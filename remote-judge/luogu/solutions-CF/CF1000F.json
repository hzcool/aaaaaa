[
    {
        "content": "\u849f\u84bb\u8868\u793a\u5e76\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\uff0c\u4e8e\u662f\u7528\u83ab\u961f\u786c\u662f\u5361\u4e86\u8fc7\u53bb\u3002\u3002   \n\u83ab\u961f\u7684\u677f\u5b50\u5c31\u4e0d\u8bf4\u4e86\uff0c\u8bb2\u4e00\u4e0b\u601d\u8def\u5427\u3002\n\n\u9996\u5148\u5f53\u7136\u662f\u8981\u8bb0\u5f55\u533a\u95f4\u4e2d\u6bcf\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u3002  \n\u82e5\u66f4\u65b0\u540e\u8fd9\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u53d8\u4e3a$1$\uff0c\u5c31$\\text{add}$\u4e00\u4e0b(\u4e0b\u9762\u5177\u4f53\u8bf4)  \n\u5982\u679c\u4ee5\u524d\u662f$1$\uff0c\u73b0\u5728\u4e0d\u662f\u4e86\uff0c\u5c31$\\text{del}$\u6389\u3002\n\n\u8fd9\u91cc\u6211\u7528\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u6808\u7684\u4e1c\u897f\uff0c\u6bcf$\\text{add}$\u8fdb\u6765\u4e00\u4e2a\u6570\uff0c\u5c31\u5806\u5230\u9876\u4e0a\u53bb\uff0c\u540c\u65f6\u8bb0\u5f55\u4e0b\u6765\u8fd9\u4e2a\u6570\u7684\u4f4d\u7f6e\u3002  \n\u6bcf\u6b21$\\text{del}$\u4e00\u4e2a\u6570\u65f6\uff0c\u628a\u6808\u9876\u7684\u5143\u7d20\u79fb\u5230\u88ab\u5220\u7684\u6570\u7684\u4f4d\u7f6e\u3002  \n\u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\u7684\u7b54\u6848\uff0c\u76f4\u63a5\u53d6\u6808\u9876\u5143\u7d20\u5373\u53ef\u3002   \n\u5982\u679c\u6808\u4e3a\u7a7a\u4e5f\u4e0d\u7528\u62c5\u5fc3\uff0c\u8fd9\u65f6\u53d6\u51fa\u6765\u7684\u5c31\u662f$0$\uff0c\u4e0d\u5f71\u54cd\u7b54\u6848\u6b63\u786e\u6027\u3002  \n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u4e0a\u9762\u7684\u64cd\u4f5c\u662f$\\Theta(1)$\u7684\u3002  \n\u7136\u540e\u5927\u529b\u83ab\u961f+\u5361\u5e38\uff0c\u8fd9\u9898\u5c31\u53ef\u4ee5\u901a\u8fc7\u5566qwq  \n\n\u6700\u540e\u6ce8\u610f\u4e00\u70b9\uff1a  \n\u5bf9\u8be2\u95ee\u6392\u5e8f\uff0c\u4e00\u5b9a\u8981\u7528\u5947\u5076\u6392\u5e8f\u4f18\u5316\uff01  \n\u5e38\u6570\u53ef\u4ee5\u5c0f\u5927\u7ea6\u4e00\u534a\u3002  \n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\Theta(n^\\frac{3}{2})$\n\n\u4e0a\u4ee3\u7801\uff1a  \n```cpp\n#pragma GCC optimize (3)\n#pragma GCC optimize (\"Ofast\")\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#define N 500007\n#define reg register\nusing namespace std;\n\nstruct query{\n\tint l,r,id;\n}q[N];\n\nint a[N],cnt[N],pos[N],be[N];\nint stk[N],ans[N];\nint n,m,top,unit;\n\ninline void read(int &x);\nvoid print(int x);\ninline bool cmp(query x,query y);\ninline void add(int t);\ninline void del(int t);\ninline char gc();\n\nint main(){\n\treg int l,r;\n\tread(n);\n\tunit = sqrt(n);\n\tfor(reg int i=1;i<=n;++i){\n        read(a[i]);\n        be[i] = i/unit+1;\n    }\n\tread(m);\n\tfor(reg int i=1;i<=m;++i){\n\t\tread(q[i].l),read(q[i].r);\n\t\tq[i].id = i;\n\t}\n\tsort(q+1,q+1+m,cmp);\n\tl = r = 1;\n\tadd(a[1]);\n\tfor(reg int i=1;i<=m;++i){\n\t\twhile(r<q[i].r) add(a[++r]);\n\t\twhile(r>q[i].r) del(a[r--]);\n\t\twhile(l<q[i].l) del(a[l++]);\n\t\twhile(l>q[i].l) add(a[--l]);\n\t\tans[q[i].id] = stk[top];\n\t}\n\tfor(reg int i=1;i<=m;++i){\n\t\tprint(ans[i]);\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n} \n\ninline char gc(){\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\n\ninline void add(int t){\n    ++cnt[t];\n\tif(cnt[t]==1){\n\t\tstk[++top] = t; //\u653e\u5230\u6808\u9876\n\t\tpos[t] = top; //\u66f4\u65b0\u6808\u9876\u5143\u7d20\u6240\u5728\u4f4d\u7f6e\n\t}else if(cnt[t]==2){\n\t\tstk[pos[t]] = stk[top]; //\u6808\u9876\u5143\u7d20\u66ff\u6362t\u7684\u4f4d\u7f6e\n\t\tpos[stk[top]] = pos[t]; //\u628a\u4f4d\u7f6e\u66f4\u65b0\u4e00\u4e0b\n\t\tstk[top--] = pos[t] = 0; //\u539f\u6765\u7684\u5730\u65b9\u8981\u6e050\n\t}\n}\n\ninline void del(int t){\n    --cnt[t];\n\tif(cnt[t]==1){\n\t\tstk[++top] = t;\n\t\tpos[t] = top;\n\t}else if(!cnt[t]){\n\t\tstk[pos[t]] = stk[top];\n\t\tpos[stk[top]] = pos[t];\n\t\tstk[top--] = pos[t] = 0;\n\t}\n}\n\ninline bool cmp(query a,query b){ \n    return (be[a.l]^be[b.l])?a.l<b.l:((be[a.l]&1)?a.r<b.r:a.r>b.r); //\u4f20\u8bf4\u4e2d\u7684\u5947\u5076\u6392\u5e8f\u4f18\u5316\n}\n\ninline void read(int &x){\n\tx = 0;\n\tchar c = gc();\n\twhile(c<'0'||c>'9') c = gc();\n\twhile(c>='0'&&c<='9'){\n\t\tx = (x<<3)+(x<<1)+(c^48);\n\t\tc = gc();\n\t}\n} \n\nvoid print(int x){\n\tif(x>9) print(x/10);\n\tputchar(x%10+'0');\n}\n```",
        "postTime": 1555425352,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1000F \u3010One Occurrence\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7528\u83ab\u961f\u7684\u8bdd\uff0c\u663e\u7136\u8981\u5c3d\u91cf\u51cf\u5c11\u79fb\u52a8\u6307\u9488\u7684\u5e38\u6570\u3002Nacly_Fish \u7684\u505a\u6cd5\u9700\u8981\u5361\u5e38\uff0c\u662f\u56e0\u4e3a\u6ca1\u6709\u5e73\u8861\u597d\u79fb\u52a8\u6307\u9488\u548c\u67e5\u8be2\u7684\u5e38\u6570\u3002\n\n\u8003\u8651\u503c\u57df\u5206\u5757\u7ef4\u62a4\uff0c\u8fd9\u6837\u67e5\u8be2\u53d8\u4e3a $O(\\sqrt{n})$\uff0c\u4f46\u662f\u79fb\u52a8\u6307\u9488\u5e38\u6570\u5927\u5927\u51cf\u5c0f\uff0c\u53ea\u9700\u8981\u5728\u5757\u5185\u505a\u4e00\u6b21\u4fee\u6539\u5373\u53ef\uff0c\u56e0\u6b64\u5feb\u4e86\u4e0d\u5c11\uff0c\u5b8c\u5168\u4e0d\u9700\u5361\u5e38\uff08scanf \u8bfb\u5165\uff09\u5c31\u80fd\u8fc7\u3002\u6211\u7684\u5757\u5927\u5c0f\u8bbe\u7684 1000\u3002\n\n\u7b80\u77ed\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,a[500005],cnt[500005],bel[500005],ans[500005],st[5005],ed[5005],sum[5005];\nstruct Query{\n\tint l,r,id;\n\tbool operator <(const Query y) const {\n\t\treturn bel[l]!=bel[y.l]?bel[l]<bel[y.l]:(bel[l]&1?r<y.r:r>y.r);\n\t}\n}q[500005];\nint Q(){\n\tfor(int i=bel[500000];i;i--){\n\t\tif(!sum[i])continue;\n\t\tfor(int j=ed[i];bel[j]=i;j--)if(cnt[j]==1)return j;\n\t}\n\treturn 0;\n}\nvoid Add(int x){\n\tif(cnt[x]==1)sum[bel[x]]--;\n\tif(cnt[x]==0)sum[bel[x]]++;\n\tcnt[x]++;\n}\nvoid Del(int x){\n\tif(cnt[x]==1)sum[bel[x]]--;\n\tif(cnt[x]==2)sum[bel[x]]++;\n\tcnt[x]--;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1,c=1000;i<=n;i++)scanf(\"%d\",&a[i]);\n\tscanf(\"%d\",&m);\n\tfor(int i=1,c=1000;i<=500000;i++)bel[i]=i/c+1,ed[bel[i]]=i;\n\tfor(int i=1;i<=m;i++)scanf(\"%d%d\",&q[i].l,&q[i].r),q[i].id=i;\n\tsort(q+1,q+m+1);\n\tint nowl=1,nowr=0;\n\tfor(int i=1;i<=m;i++){\n\t\twhile(nowl<q[i].l)Del(a[nowl++]);\n\t\twhile(nowl>q[i].l)Add(a[--nowl]);\n\t\twhile(nowr<q[i].r)Add(a[++nowr]);\n\t\twhile(nowr>q[i].r)Del(a[nowr--]);\n\t\tans[q[i].id]=Q();\n\t}\n\tfor(int i=1;i<=m;i++)printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1595211526,
        "uid": 42156,
        "name": "feecle6418",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1000F \u3010One Occurrence\u3011"
    },
    {
        "content": "\u8ddf\u4e0a\u9762\u5927\u4f6c\u8bb2\u7684\u5df2\u7ecf\u5dee\u4e0d\u591a\uff0c\u53ea\u4e0d\u8fc7\u6211\u7528\u7684\u662f\u4e3b\u5e2d\u6811\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u7ebf\u67e5\u8be2\u3002\n\n\u5927\u81f4\u601d\u8def\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6570\u7ef4\u62a4\u5b83\u7684\u6700\u8fd1\u51fa\u73b0\u7684\u4f4d\u7f6e\u548c\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u53ea\u6709\u5f53\u4e00\u4e2a\u6570\u6700\u8fd1\u51fa\u73b0\u7684\u4f4d\u7f6e\u5728\u6240\u67e5\u8be2\u7684\u533a\u95f4\u91cc\u5e76\u4e14\u5b83\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e0d\u5728\u8fd9\u4e2a\u533a\u95f4\u91cc\u65f6\uff0c\u8fd9\u4e2a\u6570\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u5bf9\u4e8e\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u7684\u6570\u503c\u5c31\u53ef\u4ee5\u4e86\uff0c\u5047\u5982\u533a\u95f4\u6700\u5c0f\u503c\u5c0f\u4e8e\u5de6\u7aef\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u5185\u5c31\u6709\u6570\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\n\n\u7136\u540e\u56e0\u4e3a\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u662f\u5728\u4e0d\u65ad\u66f4\u65b0\u7684\uff0c\u53ea\u6709\u5f53\u66f4\u65b0\u5230\u53f3\u7aef\u70b9\u65f6\u624d\u53ef\u4ee5\u8fdb\u884c\u67e5\u8be2\u3002\n\n\u4e4b\u540e\u5c31\u662f\u7528\u7ebf\u6bb5\u6811\u79bb\u7ebf\u7ef4\u62a4\uff0c\u6216\u8005\u4e3b\u5e2d\u6811\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u7248\u672c\u7684\u6700\u5c0f\u503c\u3002\n\n\u4e3b\u5e2d\u6811\uff1a\n```\n#include <iostream>\n#include <cstdio>\n\n#define Max 500005\n\nusing namespace std;\n\ninline char gc(){\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\n#define gc getchar\ninline int read(){\n    int x=0;char ch=gc();bool positive=1;\n    for(;!isdigit(ch);ch=gc())if(ch=='-')positive=0;\n    for(;isdigit(ch);ch=gc())x=x*10+ch-'0';\n    return positive?x:-x;\n}\n\ninline void write(int x){\n    if(x<0)x=-x,putchar('-');\n    if(x>9)write(x/10);putchar(x%10+'0');\n}\n\ninline void writeln(int x){\n    write(x);puts(\"\");\n}//\u4ee5\u4e0a\u90fd\u662f\u6ca1\u7528\u7684\u5feb\u8bfb\u5feb\u8f93\n\nstruct Tree{\n    int id,ls,rs,num,minn;\n    //num\u662f\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\uff0cminn\u662f\u6700\u5c0f\u503c\n}ct[Max*50];//\u5185\u5b58\u4e00\u5b9a\u8981\u5f00\u591f\u5927\uff0c\u6211\u7684\u5199\u6cd520\u500d\u4e0d\u591f\u7528\u3002\u3002\n\nint n,m,l,r,cnt,a[Max],vis[Max],last[Max],root[Max];\n\ninline Tree update(int id,Tree l,Tree r){//\u66f4\u65b0\u64cd\u4f5c\n    Tree ans;\n    ans.id=id;\n    ans.ls=l.id;\n    ans.rs=r.id;\n    if(l.minn<r.minn){\n        ans.num=l.num;\n        ans.minn=l.minn;\n    }else{\n        ans.num=r.num;\n        ans.minn=r.minn;\n    }\n    return ans;\n}\n\ninline void build(int&now,int l,int r){//\u5efa\u6811\n    now=++cnt;\n    ct[now].id=cnt;\n    if(l==r){\n        ct[now].num=l;\n        ct[now].minn=1e9;//\u4e00\u5f00\u59cb\u5c06\u6700\u5c0f\u503c\u8d4b\u503c\u6210\u6700\u5927\uff0c\u8868\u793a\u6ca1\u6709\u51fa\u73b0\u8fc7\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(ct[now].ls,l,mid);\n    build(ct[now].rs,mid+1,r);\n    ct[now]=update(now,ct[ct[now].ls],ct[ct[now].rs]);\n}\n\ninline void change(int&now,int old,int l,int r,int id,int num){\u4fee\u6539\u64cd\u4f5c\n    now=++cnt;\n    ct[now]=ct[old];\n    ct[now].id=cnt;\n    if(l==r){\n        ct[now].minn=num;\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(id<=mid){\n        change(ct[now].ls,ct[old].ls,l,mid,id,num);\n    }else{\n        change(ct[now].rs,ct[old].rs,mid+1,r,id,num);\n    }\n    ct[now]=update(now,ct[ct[now].ls],ct[ct[now].rs]);\n}\n\ninline Tree query(int now,int l,int r,int L,int R){//\u67e5\u8be2\u64cd\u4f5c\n    if(l>=L&&r<=R){\n        return ct[now];\n    }\n    int mid=(l+r)>>1;\n    if(R<=mid){\n        return query(ct[now].ls,l,mid,L,R);\n    }else{\n        if(L>mid){\n            return query(ct[now].rs,mid+1,r,L,R);\n        }else{\n            return update(1,query(ct[now].ls,l,mid,L,R),query(ct[now].rs,mid+1,r,L,R));\n        }\n    }\n}\n\nint main(){\n    n=read();\n    build(root[0],1,n);\n    for(int i=1;i<=n;i++){\n        a[i]=read();\n        root[i]=root[i-1];//\u66f4\u65b0\u6700\u8fd1\u51fa\u73b0\u7684\u4f4d\u7f6e\u548c\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\n        if(vis[a[i]]){\n            change(root[i],root[i],1,n,vis[a[i]],1e9);\n            last[a[i]]=vis[a[i]];\n            change(root[i],root[i],1,n,i,last[a[i]]);\n            vis[a[i]]=i;\n        }else{\n            vis[a[i]]=i;\n            change(root[i],root[i],1,n,i,0);\n        }\n    }\n    m=read();\n    for(int i=1;i<=m;i++){\n        l=read();r=read();\n        Tree ans=query(root[r],1,n,l,r);\n        if(ans.minn>=l){//\u5224\u65ad\u5e76\u8f93\u51fa\n            puts(\"0\");\n        }else{\n            writeln(a[ans.num]);\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1536627225,
        "uid": 27884,
        "name": "zhaotiensn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1000F \u3010One Occurrence\u3011"
    },
    {
        "content": "### [\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/CF1000F)\n\n## \u89e3\u9898\u601d\u8def\n\n\u6211\u4eec\u6709\u4e00\u4e2a\u8be2\u95ee\u533a\u95f4 $[l,r]$\uff0c\u9898\u76ee\u8981\u6c42\u4f60\u627e\u51fa\u5176\u4e2d\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u6570\u3002\n\n\u6211\u4eec\u5355\u72ec\u8003\u8651\u67d0\u4e2a\u6570 $x$\uff0c\u5047\u8bbe\u5176\u5728 $[l,r]$ \u4e2d\u51fa\u73b0\u7684**\u4e0b\u6807\u6700\u5927\u7684\u4f4d\u7f6e**\u4e3a $p$\u3002\u90a3\u4e48\uff0c$x$ \u5728\u533a\u95f4 $[l,r]$ \u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7b49\u4ef7\u4e8e $p$ \u5b58\u5728\u5e76\u4e14\u76f8\u5bf9\u4e8e $p$\uff0c$x$ \u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e $<l$\u3002\n\n\u53ef\u4ee5\u5728\u6bcf\u4e00\u4e2a\u4f4d\u7f6e $i$ \u7ef4\u62a4 $a_i$ \u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u5728\u67e5\u8be2 $[l,r]$ \u7684\u65f6\u5019\u5982\u679c\u8be5\u533a\u95f4\u4e0a\u7684\u6700\u5c0f\u503c $<l$\uff0c\u5219\u4e00\u5b9a\u6709\u6570\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u3002\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u540c\u65f6\u8bb0\u5f55\u4e00\u4e0b\u6700\u5c0f\u503c\u5bf9\u5e94\u7684\u6570\u662f\u4ec0\u4e48\u5373\u53ef\u3002\n\n\u4e3a\u4e86\u4fdd\u8bc1\u5728\u6700\u9760\u53f3\u7684 $x$ \u5904\u8bb0\u5f55\u4fe1\u606f\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8be2\u95ee\u6309\u7167\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u79bb\u7ebf\u5904\u7406\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,a[500005],pos[500005],ans[500005];\nconst int INF=0x7fffffff;\ninline int read()\n{\n\tchar ch;int res=0;\n\twhile(isspace(ch=getchar()));\n\tfor(;isdigit(ch);res=res*10+ch-'0',ch=getchar());\n\treturn res;\n}\nstruct Data\n{\n\tint val,id;\n\tData(int v,int i): val(v),id(i){}\n\tinline bool operator <(const Data &b)const\n\t\t{ return val<b.val; }\n}infdata(INF,0);\nstruct TreeNode\n{\n\tData mn;\n\tTreeNode *lc,*rc;\n\tTreeNode(int x,int i): mn(x,i)\n\t\t{ lc=rc=nullptr; }\n}*rt;\ntypedef TreeNode *pNode;\ninline void pushup(pNode i)\n\t{ i->mn=min(i->lc->mn,i->rc->mn); }\nvoid build(int l,int r,pNode &i=rt)\n{\n\ti=new TreeNode(INF,0);\n\tif(l!=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tbuild(l,mid,i->lc),build(mid+1,r,i->rc);\n\t}\n}\nvoid modify(int p,Data x,pNode i=rt,int l=1,int r=n)\n{\n\tif(l==r)\ti->mn=x;\n\telse\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(mid>=p)\tmodify(p,x,i->lc,l,mid);\n\t\telse\tmodify(p,x,i->rc,mid+1,r);\n\t\tpushup(i);\n\t}\n}\nData query(int lq,int rq,pNode i=rt,int l=1,int r=n)\n{\n\tif(r<lq || l>rq)\treturn infdata;\n\tif(l>=lq && r<=rq)\treturn i->mn;\n\tint mid=(l+r)>>1;\n\treturn min(query(lq,rq,i->lc,l,mid),\n\t\t\t   query(lq,rq,i->rc,mid+1,r));\n}\nstruct Edge{ int to,w,nxt; }e[500005];\nint cnt,head[500005];\ninline void addEdge(int u,int v,int w)\n\t{ e[++cnt]=(Edge){v,w,head[u]},head[u]=cnt; }\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)\ta[i]=read();\n\tm=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint l=read(),r=read();\n\t\taddEdge(r,l,i);\n\t}\n\tbuild(1,n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x=a[i];\n\t\tif(pos[x])\n\t\t\tmodify(pos[x],infdata),modify(i,Data(pos[x],x));\n\t\telse\n\t\t\tmodify(i,Data(0,x));\n\t\tpos[x]=i;\n\t\tfor(int j=head[i];j;j=e[j].nxt)\n\t\t{\n\t\t\tData y=query(e[j].to,i);\n\t\t\tans[e[j].w]=(y.val<e[j].to)?y.id:0;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1628665318,
        "uid": 279800,
        "name": "ExplodingKonjac",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011CF1000F One Occurrence"
    },
    {
        "content": "\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a pre \u548c nxt \u6570\u7ec4\uff0c\u5bf9\u4e8e $i$ \u8868\u793a\u6ee1\u8db3 $j<i$ \u4e14 $a_i=a_j$ \u7684 $j$ \u7684\u6700\u5927\u503c\u548c\u6ee1\u8db3 $j>i$ \u4e14 $a_i=a_j$ \u7684 $j$ \u7684\u6700\u5c0f\u503c\u3002\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684 $j$ \u5219 $pre_i=0$\uff0c$nxt_i=\\inf$\u3002\n\n\u90a3\u4e48\u73b0\u5728\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\u6c42\u533a\u95f4\u4e2d\u7684\u4e00\u4e2a $a_i$ \u6ee1\u8db3 $pre_i<l$ \u4e14 $nxt_i>r$\u3002\n\n\u601d\u8003\u4e00\u4e2a\u5728\u7ebf\u505a\u6cd5\u3002\u8fd9\u4e48\u9b3c\u755c\u7684\u4e1c\u897f\u611f\u89c9\u7528\u6811\u5957\u6811\u641e\u8d77\u6765\u6bd4\u8f83\u7a33\u3002\u3002\uff08\u4f46\u5176\u5b9e\u4f3c\u4e4e\u662f\u4e2a\u4e09\u7ef4\u504f\u5e8f\u3002\u3002\uff09\n\n\u4e00\u8d2f\u7684\u5957\u8def\uff0c\u7ebf\u6bb5\u6811\u5957\u4e00\u4e2a vector \u91cc\u9762\u4e0a\u4e8c\u5206\u3002vector \u91cc\u9762\u4fdd\u5b58\u4e09\u4e2a\u4e1c\u897f\uff1a$pre_i,nxt_i,a_i$\u3002\u6309\u7167 $pre_i$ \u6392\u5e8f\uff0c\u7136\u540e\u7b2c\u4e00\u4e2a\u6761\u4ef6 $pre_i<l$ \u4e8c\u5206\u4e00\u4e0b\u5c31\u641e\u5b9a\u4e86\u3002\u7b2c\u4e8c\u4e2a $nxt_i>r$ \u56e0\u4e3a\u6709\u7b2c\u4e00\u4e2a\u9650\u5236\u6761\u4ef6\u6240\u4ee5\u5c31\u662f\u4ece $0$ \u5f00\u59cb\u5b58\u4e00\u4e0b\u6700\u5927\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6211\u628a\u8fd9\u4e2a $2\\log$ \u7684\u505a\u6cd5\u5199\u5230\u5e38\u6570\u5de8\u5927\u3002naive \u7684\u6211\u76f4\u63a5\u7528\u4e86 vector\uff0c\u7136\u540e\u8dd1\u7684\u548c\u83ab\u961f\u5dee\u4e0d\u591a\u3002",
        "postTime": 1608544069,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1000F \u3010One Occurrence\u3011"
    },
    {
        "content": "Problem [CF1000F One Occurrence](https://www.luogu.com.cn/problem/CF1000F)\n\n---\n\n### \u9898\u76ee\u5206\u6790\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u83ab\u961f\u3002\uff08\u5e9f\u8bdd\uff09\n\n\u7528\u4e00\u4e2a\u53d8\u91cf $now$ \u6765\u8bb0\u5f55\u5f53\u524d\u533a\u95f4\u5185\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u7684\u6570\u91cf\u3002\n\n\u6bcf\u6b21\u5224\u65ad\u65f6\uff0c\u5982\u679c $now = 0$\uff0c\u5219\u8f93\u51fa $0$\uff1b\u5982\u679c\u4e0d\u662f\u5462\uff1f\u9ebb\u70e6\u5c31\u6765\u4e86\u3002\n\n\u4e8e\u662f\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55**\u5230\u76ee\u524d\u4e3a\u6b62**\u6b21\u6570\u4e3a $1$ \u7684\u6570\u3002\n\n\u4f46\u4f9d\u7136\u6709\u9ebb\u70e6\u3002\n\n\u5f53\u83ab\u961f\u4e24\u4fa7 $l, r$ \u8df3\u6765\u8df3\u53bb\u7684\u65f6\u5019\uff0c\u4f1a\u4ea7\u751f\u5bf9\u6570\u5b57\u6b21\u6570\u7684\u52a0\u51cf\uff0c\u800c\u8fd9\u4e2a\u6570\u7ec4\u5982\u679c\u4e3a\u6876\uff0c\u867d\u7136\u65b9\u4fbf\u4e86\u6570\u5b57\u6b21\u6570\u7684\u52a0\u51cf\uff0c\u4f46\u5bf9\u53bb\u627e\u4e00\u4e2a\u6b21\u6570\u4e3a $1$ \u7684\u6570\u7684\u64cd\u4f5c\u4f1a\u6781\u5927\u5730\u589e\u52a0\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e0d\u53ef\u53d6\uff1b\u5982\u679c\u4e3a\u4e00\u4e2a\u7c7b\u4f3c\u6808\u7684\u6570\u7ec4\uff0c\u867d\u65b9\u4fbf\u4e86\u5bfb\u627e\u64cd\u4f5c\uff0c\u4f46\u52a0\u51cf\u4f9d\u7136\u6709\u9ebb\u70e6\uff0c\u4e5f\u4e0d\u53ef\u53d6\u3002\n\n\u90a3\u600e\u4e48\u529e\u5462\uff1f\n\n\u6211\u4eec\u5b9a\u4e49\u8fd9\u4e2a\u6570\u7ec4\u4e3a**\u8bb0\u5f55\u51fa\u73b0\u6b21\u6570\u4e3a\u4e00\u6b21\u7684\u6570\u7684\u6808**\uff0c\u518d\u5b9a\u4e49\u4e00\u4e2a\u6876\uff0c\u4e3a\u6876\u7684\u4e0b\u6807\u7684\u90a3\u4e2a\u6570\u5728\u6808\u4e2d\u7684\u4f4d\u7f6e\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd1\u51e0\u4e4e\u5b8c\u7f8e\u5730\u540c\u65f6\u89e3\u51b3\u4e86\u4e24\u4e2a\u95ee\u9898\u3002\n\n$\\large\\color{red}\\texttt{\u5212\u91cd\u70b9}:$\n\n\u5f53\u6709\u65b0\u7684\u6b21\u6570\u4e3a $1$ \u7684\u6570\u5b57\u65f6\uff0c\u8fdb\u6808\u3002\n\n\u5f53\u539f\u4e3a\u6b21\u6570 $1$ \u7684\u6570\u73b0\u4e0d\u4e3a $1$ \u65f6\uff0c\u901a\u8fc7\u6876\u6765\u5bfb\u627e\u8fd9\u4e2a\u6570\u5728\u6808\u4e2d\u7684\u4e0b\u6807\uff0c\u7136\u540e\u628a\u6808\u9876\u653e\u5165\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u518d\u5f39\u51fa\u6808\u9876\u3002\u5982\u679c\u662f\u540c\u4e00\u4e2a\u6570\u4e5f\u65e0\u59a8\u3002\n\n\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n\n//\u4e0d\u597d\u610f\u601d\uff0c\u4e0d\u5f00 O2 \u4f18\u5316\u8fd8\u771f\u7684\u8fc7\u4e0d\u53bb\uff08\u4e5f\u6709\u53ef\u80fd\u662f\u6211\u5e38\u6570\u592a\u5927\uff09\uff0c\uff08\u53cd\u6b63\u8fd9\u662f CF\uff0c\u6ca1\u7981 O2\uff09\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define maxn 500010\nint n, m, size, l = 1, r, now, len = 0; //now \u8868\u793a\u5f53\u524d\u7b26\u5408\u8981\u6c42\u7684\u603b\u6570\uff0clen \u8868\u793a\u6808\u5185\u5143\u7d20\u6570\nint a[maxn], b[maxn], c[maxn], blo[maxn], cnt[maxn], ans[maxn]; //b[] \u6808\uff0cc[] \u6807\u53f7\nstruct node {\n\tint l, r, id;\n} q[maxn];\n\ntypedef long long ll;\nstatic char buf[100000],*p1=buf,*p2=buf;\n#define gc p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\ninline ll read() {ll res=0,w=0; char c=gc; while (!isdigit(c)) w|=c=='-',c=gc; while (isdigit(c)) res=(res<<1)+(res<<3)+(c^48),c=gc; if (w) res=-res; return res;}\ninline void write(ll x) {static int sta[50],top=0; if (x<0) putchar('-'),x=-x; do {sta[top++]=x%10,x/=10;}while (x); while (top) putchar(sta[--top]+48); putchar('\\n');}\n\n//\u8d85\u7ea7\u5feb\u8bfb\u5feb\u8f93\n\nbool cmp(node a, node b) {\n\treturn blo[a.l] ^ blo[b.l] ? blo[a.l] < blo[b.l] : blo[a.l] & 1 ? a.r < b.r : a.r > b.r;\n} //\u5947\u5076\u6027\u6392\u5e8f\n\ninline void add(int x) {\n\tif (cnt[a[x]] == 1) { //\u5982\u679c\u8981\u51cf\u6389\u4e00\u4e2a\u6570\n\t\t--now; //\u603b\u6570--\n\t\tb[c[a[x]]] = b[len]; //\u53d6\u6808\u9876\uff0c\u81ea\u5df1\u60f3\u4e00\u4e0b\n\t\tc[b[len]] = c[a[x]];\n\t\tb[len] = c[a[x]] = 0;\n\t\tlen--;\n\t}\n\t++cnt[a[x]];\n\tif (cnt[a[x]] == 1) {\n\t\t++now; //\u603b\u6570++\n\t\t++len;\n\t\tb[len] = a[x]; //\u52a0\u6808\u9876\n\t\tc[a[x]] = len;\n\t}\n}\ninline void del(int x) {\n\tif (cnt[a[x]] == 1) {\n\t\t--now;\n\t\tb[c[a[x]]] = b[len];\n\t\tc[b[len]] = c[a[x]];\n\t\tb[len] = c[a[x]] = 0;\n\t\tlen--;\n\t}\n\t--cnt[a[x]];\n\tif (cnt[a[x]] == 1) {\n\t\t++now;\n\t\t++len;\n\t\tb[len] = a[x];\n\t\tc[a[x]] = len;\n\t}\n}\n\nint main() {\n\tn = read();\n\tfor (int i = 1; i <= n; ++i) a[i] = read();\n\tm = read();\n\tfor (int i = 1; i <= m; ++i) q[i].l = read(), q[i].r = read(), q[i].id = i; //\u666e\u901a\u83ab\u961f\u662f\u79bb\u7ebf\u7b97\u6cd5\uff0c\u9700\u6807\u8bb0\u5e8f\u53f7\n\tsize = (int)sqrt(n);\n\tfor (int i = 1; i <= n; ++i) blo[i] = (i - 1) / size + 1;\n\tsort(q + 1, q + m + 1, cmp);\n\tfor (int i = 1; i <= m; ++i) {\n\t\twhile (l < q[i].l) del(l++); //\u666e\n\t\twhile (l > q[i].l) add(--l); //\u901a\n\t\twhile (r < q[i].r) add(++r); //\u83ab\n\t\twhile (r > q[i].r) del(r--); //\u961f\n\t\tif (!now) ans[q[i].id] = 0;\n\t\telse ans[q[i].id] = b[len]; //\u53d6\u6808\u9876\n\t}\n\tfor (int i = 1; i <= m; ++i) write(ans[i]), putchar('\\n');\n\treturn 0;\n}\n```\n\n## \u540e\u8bb0\n\n1. \u5199\u5b8c\u624d\u53d1\u73b0\u601d\u8def\u8ddf\u7ed2\u5e03\u7403\u51e0\u4e4e\u4e00\u81f4 ~~\uff08\u98d8\u4e86\uff09~~\n\n2. ~~\uff08\u4e8b\u5b9e\u8bc1\u660e\uff1a\u5bf9\u4e8e\u533a\u95f4 l, r \u4e71\u4e03\u516b\u7cdf\u641e\u6765\u641e\u53bb\u7684\u4e1c\u897f\u4e00\u822c\u83ab\u961f\u90fd\u80fd\u6c34\u8fc7\uff09~~\n\n3. \u4eba\u751f\u4e2d\u7b2c\u4e00\u7bc7\u7d2b\u9898\u9898\u89e3\uff01\n\n4. A story:\n\n\n    \u4f60\u7b2c\u4e00\u773c\u770b\u5230\u9898\u76ee\u5c31\u53ef\u4ee5\u53d1\u73b0\uff1a\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u83ab\u961f\uff01\n\n   ~~\uff08\u6469\u62f3\u64e6\u638c\u51c6\u5907\u6c34\u9898\uff09~~\n\n\n   \u7136\u800c\uff0c\u4f60\u63a5\u7740\u770b\u9898\u76ee\u2014\u2014\u533a\u95f4\u5185**\u4ec5\u5b58\u5728\u4e00\u6b21**\u7684\u6570\u2026\u2026\n\n   ~~\uff08\u6c89\u9ed8\uff09~~\n\n   A few minutes later.\n\n   \u8fd9\u8be5\u600e\u4e48\u505a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\n\n   ~~\uff08\u6293\u72c2\uff09~~\n\n   A few hours later.\n\n   `Wrong answer on test 2.`\n\n   A few hours later again.\n   \n   `Time limit exceeded on test 65.`\n   \n   A few hours later again and again.\n\n   `Accepted`\n\n   QwQ\n\n   $\\color{grey}\\texttt{The above is a true story.}$\n\n---\n",
        "postTime": 1621254211,
        "uid": 159548,
        "name": "Zachary_Cloud",
        "ccfLevel": 6,
        "title": "CF1000F One Occurrence \u9898\u89e3"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u83ab\u961f+\u6808\uff08\u61d2\u5220\u9664\uff09\u7684\u505a\u6cd5\u3002\n\n\u6838\u5fc3\u601d\u8def\uff1a\u7528\u83ab\u961f\u7ef4\u62a4\u533a\u95f4\u6bcf\u4e2a\u6570\u51fa\u73b0\u6b21\u6570\u3002\u7ef4\u62a4\u4e00\u4e2adeltag[]\u7684\u5220\u9664\u6807\u8bb0\u3002\u5982\u679c\u4e00\u4e2a\u6570\u51fa\u73b0\u6b21\u6570\u53d8\u62101\uff0c\u5c31\u585e\u5230\u6808\u9876\u3002\u5982\u679c\u4e00\u4e2a\u6570x\u51fa\u73b0\u6b21\u6570\u4ece1\u53d8\u62100\u62162\uff0c\u5c31deltag[x]++\uff0c\u8868\u793a\u5220\u9664\u4e00\u6b21\uff0c\u4e0d\u76f4\u63a5\u5728\u6808\u4e2d\u64cd\u4f5c\u3002\u67e5\u8be2\u65f6\uff0c\u5982\u679c\u6808\u9876\u7684\u6570\u7684deltag>0\uff0c\u8bf4\u660e\u5b83\u8981\u5220\u6389\uff0c\u5c31\u5f39\u51fa\u6808\uff0c\u7136\u540edeltag--\uff0c\u4e00\u76f4\u5f39\u5230\u6808\u9876\u7684\u6570\u6ca1\u6709\u88ab\u6807\u8bb0\u61d2\u5220\u9664\u4e3a\u6b62\u3002\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cmath>\n#define N 500001\nusing namespace std;\nint n,m,num[N], pos[N],size,cnt[N],sum,out[N],deltag[N],stack[N<<2],top=0;//deltag:\u61d2\u5220\u9664 \ninline void read(int &out)\n{\n\tout=0;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')c=getchar();\n\twhile('0'<=c&&c<='9')out=out*10+c-'0',c=getchar();\n\treturn;\n}\nstruct doby{\n\tint l,r,id;\n}ask[N];\ninline bool cmp(doby a,doby b)\n{\n\treturn pos[a.l]^pos[b.l]?pos[a.l]<pos[b.l]:(pos[a.l]&1?a.r<b.r:a.r>b.r);\n}\ninline void add(int x)\n{\n\tif(cnt[x]==1)deltag[x]++;//\u61d2\u5220\u9664\u6807\u8bb0\n\tcnt[x]++;\n\tif(cnt[x]==1)\n\t\tif(deltag[x])deltag[x]--;//\u6b21\u6570\u53d8\u62101\uff0c\u5c31\u53ef\u4ee5\u628a\u61d2\u5220\u9664\u6807\u8bb0\u51cf\u5c111\uff0c\u6765\u4ee3\u66ff\u5165\u6808\u64cd\u4f5c\n\t\telse stack[++top]=x;\n\treturn;\n}\ninline void remove(int x)\n{\n\tif(cnt[x]==1)deltag[x]++;\n\tcnt[x]--;\n\tif(cnt[x]==1)\n\t\tif(deltag[x])deltag[x]--;\n\t\telse stack[++top]=x;\n\treturn;\n}\nint main()\n{\n\tread(n);\n\tfor(int i=1;i<=n;i++)read(num[i]);\n\tread(m);\n\tsize=n/sqrt(m*2.0/3);\n\tfor(int i=1,l,r;i<=m;i++)\n\t{\n\t\tread(ask[i].l),read(ask[i].r);\n\t\task[i].id=i;\n\t\tpos[i]=(i-1)/size+1;\n\t}\n\tsort(ask+1,ask+m+1,cmp);\n\tint ql=1,qr=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\twhile(ql<ask[i].l)remove(num[ql++]);\n\t\twhile(ql>ask[i].l)add(num[--ql]);\n\t\twhile(qr<ask[i].r)add(num[++qr]);\n\t\twhile(qr>ask[i].r)remove(num[qr--]);\n\t\twhile(deltag[stack[top]]&&top)deltag[stack[top]]--,top--;//\u5f39\u51fa\u6808\u9876\u7684\u88ab\u6807\u8bb0\u61d2\u5220\u9664\u7684\u5143\u7d20\n\t\tout[ask[i].id]=stack[top];\n\t}\n\tfor(int i=1;i<=m;i++)printf(\"%d\\n\",out[i]);\n\treturn 0;\n}\n```",
        "postTime": 1567170416,
        "uid": 14381,
        "name": "1jia1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1000F \u3010One Occurrence\u3011"
    },
    {
        "content": "### \u89e3\u9898\u601d\u8def\n\n\u6839\u636e\u9898\u76ee\u5927\u610f\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5feb\u60f3\u51fa\u6765\u7528\u83ab\u961f\u6216\u4e3b\u5e2d\u6811\u89e3\n\n\u5bf9\u4e8e\u4e3b\u5e2d\u6811\uff1f\u6211\u4e0d\u4f1a\uff0c\u4e8e\u662f\u6211\u7528\u4e86\u83ab\u961f\n\n\u83ab\u961f\u5728\u8fd9\u9053\u9898\u4e2d\u5b9e\u9645\u76f8\u5f53\u4e8e\u4e00\u4e2a\u677f\u5b50\n\n\u6211\u4eec\u7528\u4e00\u4e2a $sum$ \u6570\u7ec4\u6765\u8bb0\u5f55\u8be5\u533a\u95f4\u5185\u53ea\u51fa\u73b0\u4e00\u6b21\u6709\u51e0\u4e2a\u6570\n\n\u7528 $cnt$ \u6570\u7ec4\u6765\u8bb0\u5f55\u8be5\u533a\u95f4\u5185\u67d0\u4e2a\u6570\u51fa\u73b0\u4e86\u51e0\u6b21\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u7b80\u5355\u7684\u5206\u5757\u4e86\n\n\u5757\u7684\u5927\u5c0f\u6211\u8bbe\u6210\u4e86 $2137$\uff08\u9898\u89e3\u91cc\u6709\u4eba\u8bbe\u4e3a $1000$\uff09\n\n\u8bbe\u4e00\u4e2a $last$ \u6570\u7ec4\u4ee3\u8868\u8fd9\u4e2a\u5757\u5185\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n\n\u4e3a\u4e86\u51cf\u5c11\u82b1\u8d39\u65f6\u95f4\uff0c\u6211\u9009\u62e9\u7528\u5947\u5076\u6392\u5e8f\u4f18\u5316\uff08\u662f\u8fd9\u4e2a\u540d\u5b57\u5417\uff1f\uff09\n\n```cpp\ninline bool cmp(query a,query b){return (bel[a.l]^bel[b.l])?a.l<b.l:((bel[a.l]&1)?a.r<b.r:a.r>b.r);}\n\n```\n\n\u5728\u5177\u4f53\u7684\u6dfb\u52a0\u64cd\u4f5c\u4e2d\uff0c\u9700\u8981\u7279\u5224\u5f53\u4e00\u4e2a\u6570\u51fa\u73b0 $2$ \u6b21\u6216\u51fa\u73b0 $1$ \u6b21\n\n\u5728\u5177\u4f53\u7684\u5220\u9664\u64cd\u4f5c\u4e2d\uff0c\u9700\u8981\u7279\u5224\u5f53\u4e00\u4e2a\u6570\u51fa\u73b0 $1$ \u6b21\u6216 $0$ \u6b21\n\n\u5373\n\n```cpp\nvoid add(int x){\n\tif(cnt[x]==1) sum[bel[x]]--;\n\tif(cnt[x]==0) sum[bel[x]]++;\n\tcnt[x]++;\n}\nvoid del(int x){\n\tif(cnt[x]==1) sum[bel[x]]--;\n\tif(cnt[x]==2) sum[bel[x]]++;\n\tcnt[x]--;\n}\n```\n\n\u83ab\u961f\u5de6\u53f3\u6307\u9488\u6765\u56de\u8df3\u52a8\uff0c\u6211\u5c31\u4e0d\u8bf4\u4e86\uff08\u83ab\u961f\u7684\u57fa\u672c\u64cd\u4f5c\uff1f\uff09\n\n\u4f46\u662f\u8981\u63d0\u4e00\u70b9\u7684\u662f\u67e5\u8be2\u64cd\u4f5c\n\n\u56e0\u4e3a\u6211\u6ca1\u6709\u60f3\u5230\u9898\u89e3\u91cc\u9762\u7684\u201c\u6876\u64cd\u4f5c\u201d\n\n\u6240\u4ee5\u6211\u7528\u4e86\u66b4\u529b\u641c\u7d22\uff08\u5e26\u4e00\u70b9\u5c0f\u5c0f\u7684\u526a\u679d\uff09\n\n\u5c31\u662f\u8bf4\uff0c\u5148\u8be2\u95ee\u6bcf\u4e00\u4e2a\u5757\uff0c\u5982\u679c\u5f53\u524d\u5757\u65e0\u51fa\u73b0\u4e00\u6b21\u7684\u65f6\u5019\uff0c\u5c31\u8df3\u8fc7\n\n\u5426\u5219\u5c31\u67e5\u627e\u8fd9\u4e2a\u5757\u4e2d\u51fa\u73b0\u8fc7\u4e00\u6b21\u7684\u90a3\u4e2a\uff0c\u5efa\u8bae\u4ece\u7ed3\u5c3e\u5f80\u524d\u626b\uff0c\u56e0\u4e3a\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u7528 $last$ \u6570\u7ec4\u5b58\u8fc7\u6bcf\u4e2a\u5757\u7684\u6700\u540e\u4e00\u6b21\u4f4d\u7f6e\u4e86\n\n\u7136\u540e\uff1f\u5c31\u6ca1\u4e86\u5427\uff0c\u5e94\u8be5\u5c31\u6ce8\u610f\u8fd9\u4e48\u591a\u5427\n\n\u4e0d\u8fc7\u6211\u60f3\u63d0\u4e00\u53e5\uff0c\u5c3d\u7ba1\u6211\u7528\u4e86\u641c\u7d22+\u526a\u679d\u6765\u67e5\u8be2\uff0c\u4f46\u6211\u6ca1\u5f00 $O_2$ \u4ecd\u6ca1 $TLE$\uff08\u795e\u5947\uff09\n\n\n### AC\u4ee3\u7801\uff08\u6ce8\u91ca\u7248\u672c\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=5e5+1;\nint n,m,block,len;\nint a[N],cnt[N],bel[N],ans[N],last[N],sum[N];//\u8fd9\u4e9b\u6570\u7ec4\u7684\u5177\u4f53\u542b\u4e49\u5199\u5728\u89e3\u9898\u601d\u8def\u91cc\u4e86 \nstruct query{//\u83ab\u961f\u7684\u7ed3\u6784\u4f53 \n\tint l,r,id;\n}q[N];\ninline bool cmp(query a,query b){return (bel[a.l]^bel[b.l])?a.l<b.l:((bel[a.l]&1)?a.r<b.r:a.r>b.r);}//\u5947\u5076\u4f18\u5316\u6392\u5e8f \nint ask(){//\u67e5\u8be2\u64cd\u4f5c \n\tfor(int i=bel[N-1];i;i--){\n\t\tif(!sum[i]) continue;\n\t\tfor(int j=last[i];j;j--) if(cnt[j]==1) return j;\n\t}\n\treturn 0;\n}\nvoid add(int x){//\u589e\u52a0\u64cd\u4f5c \n\tif(cnt[x]==1) sum[bel[x]]--;\n\tif(cnt[x]==0) sum[bel[x]]++;\n\tcnt[x]++;\n}\nvoid del(int x){//\u5220\u9664\u64cd\u4f5c \n\tif(cnt[x]==1) sum[bel[x]]--;\n\tif(cnt[x]==2) sum[bel[x]]++;\n\tcnt[x]--;\n}\nvoid init(){for(int i=1;i<=N-1;i++) bel[i]=i/block+1,last[bel[i]]=i; }//\u5206\u5757 \nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tblock=2137;//\u5757\u7684\u5927\u5c0f \n\tinit();//\u9884\u5904\u7406\uff0c\u5373\u5206\u5757 \n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++) scanf(\"%d%d\",&q[i].l,&q[i].r),q[i].id=i;\n\tsort(q+1,q+m+1,cmp);//\u6392\u5e8f \n\tint l=1,r=0;\n\tfor(int i=1;i<=m;i++){ \n\t\tint ql=q[i].l,qr=q[i].r;\n\t\twhile(l<ql) del(a[l]),l++;\n\t\twhile(l>ql) l--,add(a[l]);\n\t\twhile(r<qr) r++,add(a[r]);\n\t\twhile(r>qr) del(a[r]),r--;\n\t\tans[q[i].id]=ask();\n\t}\n\tfor(int i=1;i<=m;i++) printf(\"%d\\n\",ans[i]);\n}\n```\n\n### AC\u4ee3\u7801\uff08\u65e0\u6ce8\u91ca\u7248\uff09\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=5e5+1;\nint n,m,block,len;\nint a[N],cnt[N],bel[N],ans[N],last[N],sum[N];\nstruct query{\n\tint l,r,id;\n}q[N];\ninline bool cmp(query a,query b){return (bel[a.l]^bel[b.l])?a.l<b.l:((bel[a.l]&1)?a.r<b.r:a.r>b.r);} \nint ask(){\n\tfor(int i=bel[N-1];i;i--){\n\t\tif(!sum[i]) continue;\n\t\tfor(int j=last[i];j;j--) if(cnt[j]==1) return j;\n\t}\n\treturn 0;\n}\nvoid add(int x){\n\tif(cnt[x]==1) sum[bel[x]]--;\n\tif(cnt[x]==0) sum[bel[x]]++;\n\tcnt[x]++;\n}\nvoid del(int x){\n\tif(cnt[x]==1) sum[bel[x]]--;\n\tif(cnt[x]==2) sum[bel[x]]++;\n\tcnt[x]--;\n}\nvoid init(){for(int i=1;i<=N-1;i++) bel[i]=i/block+1,last[bel[i]]=i; } \nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tblock=2137; \n\tinit(); \n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++) scanf(\"%d%d\",&q[i].l,&q[i].r),q[i].id=i;\n\tsort(q+1,q+m+1,cmp); \n\tint l=1,r=0;\n\tfor(int i=1;i<=m;i++){ \n\t\tint ql=q[i].l,qr=q[i].r;\n\t\twhile(l<ql) del(a[l]),l++;\n\t\twhile(l>ql) l--,add(a[l]);\n\t\twhile(r<qr) r++,add(a[r]);\n\t\twhile(r>qr) del(a[r]),r--;\n\t\tans[q[i].id]=ask();\n\t}\n\tfor(int i=1;i<=m;i++) printf(\"%d\\n\",ans[i]);\n}\n```\n\u7b2c\u4e00\u7bc7\u7d2b\u9898\u9898\u89e3\u5462\uff0c\u7ba1\u7406\u5927\u5927\u8bf7\u901a\u8fc7\u5566",
        "postTime": 1611963841,
        "uid": 209808,
        "name": "\u94f6\u6cb3AI",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF1000F \u3010One Occurrence\u3011"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bcf\u6b21\u8be2\u95ee\u8f93\u51fa\u4e00\u4e2a\u533a\u95f4 $[l,r]$ \u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u3002\n\n## \u9898\u89e3\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u6bd4\u8f83\u6709\u610f\u601d\u3002\u4ed6\u8ba9\u4f60\u8f93\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\uff0c\u8bb2\u9053\u7406\u4f60\u8ba9\u6211\u7ef4\u62a4\u4e2a\u6570\u90fd\u8fd8\u597d\u529e\uff0c\u8fd9\u4e2a\u5c31\u6bd4\u8f83\u597d\u73a9\u4e86\u3002\n\n\u6211\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u4e0d\u7528\u5438\u6c27\u7684\u5361\u5e38\u83ab\u961f\u505a\u6cd5\u3002\n\n\u5176\u5b9e\u83ab\u961f\u9700\u8981\u7ef4\u62a4\u7684\u4e1c\u897f\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e00\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u7ec4 `cnt` \u6765\u8bb0\u5f55\u3002\n\n\u6bcf\u6b21\u6211\u4eec\u7b97\u52a0\u8d21\u732e\u7684\u65f6\u5019\uff0c`cnt` \u7684\u8ba1\u7b97\u65b9\u6cd5\u5f88\u663e\u7136\u3002\u6211\u4eec\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u7b97\u52a0\u8d21\u732e\u7684\u65f6\u5019\u5982\u679c\u8fd9\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u4e3a1\uff0c\u6211\u4eec\u5c31\u628a\u4ed6\u653e\u5230\u6808\u9876\u4e0a\u53bb\u3002\u6211\u4eec\u987a\u624b\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 `pos` \u8868\u793a\u8fd9\u4e2a\u6570\u5728\u6808\u91cc\u7684\u4f4d\u7f6e\u3002\n\n\u7b97\u51cf\u8d21\u732e\u7684\u65f6\u5019 `cnt` \u7684\u8ba1\u7b97\u65b9\u6cd5\u4f9d\u65e7\u663e\u7136\u3002\u6211\u4eec\u628a\u6808\u9876\u5143\u7d20\u653e\u5230\u5220\u9664\u7684\u6570\u7684\u4f4d\u7f6e\u4e0a\u5373\u53ef\u3002\n\n\u6bcf\u6b21\u8be2\u95ee\u7684\u7b54\u6848\u5c31\u662f\u6808\u9876\u5143\u7d20\uff0c\u7531\u4e8e\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\u8f93\u51fa\u96f6\uff0c\u6240\u4ee5\u6ca1\u5fc5\u8981\u7279\u5224\u3002\n\n\u5149\u8fd9\u6837\u662f\u8fc7\u4e0d\u4e86\u7684\uff0c\u4f1aT\u98de\u3002\n\n\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u9488\u5bf9\u4e8e\u83ab\u961f\u7684\u4f18\u5316\uff0c\u53eb\u505a\u5947\u5076\u6027\u6392\u5e8f\u4f18\u5316\uff08\u778e\u7f16\u7684\u4e00\u4e2a\u540d\u5b57\uff09\uff0c\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u5728\u5bf9\u8be2\u95ee\u6392\u5e8f\u7684\u65f6\u5019\u5206\u5757\u7684\u5947\u5076\u6027\uff0c\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u3002\u8fd9\u79cd\u6392\u5e8f\u7684\u65b9\u5f0f\u7406\u8bba\u6765\u8bf4\u6709 $\\Theta(\\frac{1}{2})$ \u7684\u5e38\u6570\u3002\n\n\u8fd9\u6837\u8fd8\u662f\u4f1aT\u3002\u5bb9\u6613\u53d1\u73b0\u8f93\u51fa\u7b54\u6848\u7684\u5faa\u73af\u53ef\u4ee5\u7528unroll\u5faa\u73af\u5c55\u5f00\uff0c\u6211\u8bbe\u7684unroll\u7684\u53c2\u662f10\uff0c\u5df2\u7ecf\u80fd\u8fc7\u4e86\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nconst int Maxn = 5e5 + 5, Each = 720;\nint n, m, top, isa[ Maxn ], cnt[ Maxn ], pos[ Maxn ], htl[ Maxn ], ans[ Maxn ];\nstruct Query_Node\n{\n\tint l, r, id, pos;\n\tQuery_Node( int L = 0, int R = 0, int ID = 0 ) { l = L, r = R, id = ID; }\n} Q[ Maxn ];\n\ninline int read( )\n{\n\tint a = 0, minus = 0;\n\tchar ch = getchar( );\n\twhile( !isdigit( ch ) )\n\t{\n\t\tif( ch == '-' )\t minus = 1;\n\t\tch = getchar( );\n\t}\n\twhile( isdigit( ch ) )\n\t{\n\t\ta = a * 10 + ch - '0';\n\t\tch = getchar( );\n\t}\n\tif( minus )\t return -a;\n\telse\treturn a;\n}\n\ninline void write( int x )\n{\n\tif( x < 0 )\n\t{\n\t\tx = -x;\n\t\tputchar( '-' );\n\t}\n\tif( x > 9 ) \twrite( x / 10 );\n\tputchar( x % 10 + '0' );\n}\n\ninline bool cmp( Query_Node rhs, Query_Node shr )\n{\n\tif( rhs.pos != shr.pos )\treturn rhs.l < shr.l;\n\telse if( rhs.pos & 1 )\treturn rhs.r < shr.r;\n\telse \treturn rhs.r > shr.r;\n}\n\ninline void Make_Cont( int x, int t )\n{\n\tx = isa[ x ];\n\tif( t == 1 ) ++ cnt[ x ];\n\telse\t-- cnt[ x ];\n\tif( cnt[ x ] == 1 )\n\t{\n\t\thtl[ ++ top ] = x;\n\t\tpos[ x ] = top;\n\t}\n\telse if( ( t == 1 ) ? ( cnt[ x ] == 2 ) : ( cnt[ x ] == 0 ) )\n\t{\n\t\thtl[ pos[ x ] ] = htl[ top ];\n\t\tpos[ htl[ top ] ] = pos[ x ];\n\t\tpos[ x ] = htl[ top -- ] = 0;\n\t}\n}\n\ninline void Contribute( )\n{\n\tint l = 1, r = 0;\n\tfor( int i = 0; i < m; ++ i )\n\t{\n\t\twhile( l < Q[ i ].l )\tMake_Cont( l ++, 0 );\n\t\twhile( l > Q[ i ].l )\tMake_Cont( -- l, 1 );\n\t\twhile( r < Q[ i ].r )\tMake_Cont( ++ r, 1 );\n\t\twhile( r > Q[ i ].r )\tMake_Cont( r --, 0 );\n\t\tans[ Q[ i ].id ] = htl[ top ];\n\t}\n}\n\nsigned main( )\n{\n\tn = read( );\n\tfor( int i = 1; i <= n; ++ i ) \t\tisa[ i ] = read( );\n\tm = read( );\n\tfor( int i = 0; i < m; ++ i )\n\t{\n\t\tQ[ i ].l = read( );\n\t\tQ[ i ].r = read( );\n\t\tQ[ i ].id = i;\n\t\tQ[ i ].pos = Q[ i ].l / Each;\n\t}\n\tsort( Q, Q + m, cmp );\n\tContribute( );\n\tif( m <= 10 )\n\t{\n\t\tfor( int i = 0; i < m; ++ i )\t\twrite( ans[ i ] ), putchar( '\\n' );\n\t\treturn 0;\n\t}\n\t#pragma unroll 10\n\tfor( int i = 0; i < m; ++ i )\t\twrite( ans[ i ] ), putchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1594297958,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1000F \u3010One Occurrence\u3011"
    },
    {
        "content": "\u9996\u5148\u628a\u8be2\u95ee\u79bb\u7ebf\uff0c\u9884\u5904\u7406\u6bcf\u4e2a\u6570\u7684$pre, nxt$\uff0c\u540c\u65f6\u7ebf\u6bb5\u6811\u7ef4\u62a4$pre$(\u4e0b\u6807\u662f$pre$\uff0c\u503c\u662f$i$)\uff0c\u540c\u65f6\u7ef4\u62a4\u4e00\u4e0b\u6700\u5927\u503c\n\n\u90a3\u4e48\u6bcf\u6b21\u5728$(1, l - 1)$\u5185\u67e5\u8be2\u6700\u5927\u503c\uff0c\u5982\u679c\u6700\u5927\u503c$>= l$\uff0c\u90a3\u4e48\u8bf4\u660e\u5408\u6cd5\n\n\u4f46\u662f$pre$\u53ef\u80fd\u4f1a\u6709\u76f8\u540c\u7684\u60c5\u51b5(0)\uff0c\u76f4\u63a5\u5f00\u4e2aset\u7ef4\u62a4\u4e00\u4e0b\n\n\u7136\u540e\u7528vector\u5bf9$nxt$\u7ef4\u62a4\u4e00\u4e2a\u7c7b\u4f3c\u5dee\u5206\u7684\u4e1c\u897f\uff0c\u5728$nxt_i$\u7684\u4f4d\u7f6e\u5220\u9664\u6389$i$\u7684\u5f71\u54cd\n\n\n```cpp\n// luogu-judger-enable-o2\n/*\n*/\n#include<bits/stdc++.h> \n#define LL long long\n#define Pair pair<int, int>\n#define MP(x, y) make_pair(x, y)\n#define fi first\n#define se second \nusing namespace std;\nconst int MAXN = 2e6 + 10;\ntemplate <typename A, typename B> inline bool chmin(A &a, B b){if(a > b) {a = b; return 1;} return 0;}\ntemplate <typename A, typename B> inline bool chmax(A &a, B b){if(a < b) {a = b; return 1;} return 0;}\ninline int read() {\n    char c = getchar(); int x = 0, f = 1;\n    while(c < '0' || c > '9') {if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n    return x * f;\n}\n\nint N, M, a[MAXN], pre[MAXN], nxt[MAXN], ans[MAXN], date[MAXN], num = 0;\nvector<Pair> q[MAXN];\nvoid Des() {\n    for(int i = 1; i <= N; i++) date[i] = a[i];\n    sort(date + 1, date + N + 1);\n    num = unique(date + 1, date + N + 1) - date - 1;\n    for(int i = 1; i <= N; i++) a[i] = lower_bound(date + 1, date + num + 1, a[i]) - date;\n}\nvoid Get() {\n    static int las[MAXN];\n    for(int i = 1; i <= N; i++) pre[i] = las[a[i]], las[a[i]] = i;\n    for(int i = 1; i <= N; i++) las[i] = N + 1;\n    for(int i = N; i >= 1; i--) nxt[i] = las[a[i]], las[a[i]] = i;\n}\n#define Getmid ((T[k].l + T[k].r) >> 1)\n#define ls k << 1\n#define rs k << 1 | 1\nstruct Node {\n    int l, r, mx;\n}T[MAXN];\nvoid update(int k) {\n    T[k].mx = max(T[ls].mx, T[rs].mx);\n}\nvoid Build(int k, int ll, int rr) {\n    T[k].l = ll; T[k].r = rr; T[k].mx = 0;\n    if(ll == rr) return ;\n    int mid = Getmid;\n    Build(ls, ll, mid); Build(rs, mid + 1, rr);\n}\nvoid Modify(int k, int pos, int v) {\n    if(T[k].l == T[k].r) {T[k].mx = v; return ;}\n    int mid = Getmid;\n    if(pos <= mid) Modify(ls, pos, v);\n    if(pos  > mid) Modify(rs, pos, v);\n    update(k);\n}\nint Query(int k, int ll, int rr) {\n    if(ll <= T[k].l && T[k].r <= rr) return T[k].mx;\n    int mid = Getmid, ans = 0;\n    if(ll <= mid) chmax(ans, Query(ls, ll, rr));\n    if(rr  > mid) chmax(ans, Query(rs, ll, rr));\n    return ans;\n}\n#undef ls\n#undef rs \n#undef Getmid\nvoid Solve() {\n    set<int> s;\n    static vector<int> v[MAXN];\n    for(int i = 1; i <= N; i++) {\n        for(int j = 0; j < v[i].size(); j++) {\n            if(!pre[v[i][j]]) \n                s.erase(v[i][j]);\n            else Modify(1, pre[v[i][j]], 0);\n        }\n        if(!pre[i]) \n            s.insert(i);\n        else Modify(1, pre[i], i);\n            \n        v[nxt[i]].push_back(i);\n        for(int j = 0; j < q[i].size(); j++) {\n            int t = Query(1, 1, q[i][j].fi - 1);\n            if(t >= q[i][j].fi) ans[q[i][j].se] = date[a[t]];\n            if(!s.empty()) {\n                set<int>::iterator it = s.end(); it--;\n                if(*it >= q[i][j].fi) ans[q[i][j].se] = date[a[*it]];\n            }\n            \n        }\n            \n    }\n}\nsigned main() {\n    N = read();\n    for(int i = 1; i <= N; i++) a[i] = read();\n    Des();\n    Get();\n    Build(1, 1, N + 1);\n    M = read();\n    for(int i = 1; i <= M; i++) {\n        int l = read(), r = read();\n        q[r].push_back(MP(l, i));\n    }\n    Solve();\n    for(int i = 1; i <= M; i++) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n/*\n5\n1 2 2 1 1\n2\n1 5\n2 3 \n\n\n10\n5 9 6 4 8 7 4 9 7 6\n1\n4 8\n*/\n```\n",
        "postTime": 1546766256,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1000F \u3010One Occurrence\u3011"
    },
    {
        "content": "\u7c7b\u4f3c\u5c0fH\u7684\u9879\u94fe\u7684\u505a\u6cd5\u3002\n\n\u8fd9\u9898\u53ef\u4ee5\u7528\u83ab\u961f\u4f46\u5f88\u9ebb\u70e6\uff0c\u8981\u5361\u5e38\n\n\u7ebf\u6bb5\u6811\u5c31\u662f\u6bcf\u6b21\u66f4\u5173\u5fc3\u4e00\u4e0bpos\u6570\u7ec4\uff0c\u7ef4\u62a4\u4e00\u4e0b\n\n\u4e3b\u5e2d\u6811\u5927\u6982\u53ef\u4ee5\u5728\u7ebf\uff1f\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ntypedef pair<int ,int > pa; \ninline int read(){int x=0,f=1,ch=getchar(); while(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();} while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();} return x*f;}\ninline void write(int x){if (x<0) putchar('-'),x=-x; if (x>=10) write(x/10); putchar(x%10+'0');}\ninline void writeln(int x){write(x); puts(\"\");}\nconst int N=5e5+5;\nstruct qu{\n\tint l,r,id;\n}q[N];\nint n,m,num[N];\ninline void init(){\n\tn=read();\n\tfor (int i=1;i<=n;i++) num[i]=read();\n\tm=read();\n\tfor (int i=1;i<=m;i++) q[i]=(qu){read(),read(),i};\n}\ninline bool cmp(qu A,qu B){return A.r<B.r;}\nconst int INF=1e9;\nint las[N],pos[N],ans[N];\npa mn[N<<2];\ninline void pushup(int k){mn[k]=min(mn[k<<1],mn[k<<1|1]);}\nvoid build(int k,int l,int r){\n\tmn[k]=pa(INF,0);\n\tif (l==r) return;\n\tint mid=(l+r)>>1; build(k<<1,l,mid); build(k<<1|1,mid+1,r);\n}\nvoid upd(int k,int l,int r,int x){\n\tif (l==r){\n\t\tmn[k]=pa(pos[x],x);\n\t\treturn;\t\n\t}\n\tint mid=(l+r)>>1;\n\tif (mid>=x) upd(k<<1,l,mid,x); else upd(k<<1|1,mid+1,r,x);\n\tpushup(k);\n}\npa query(int k,int l,int r,int x,int y){\n\tif (l==x&&r==y) return mn[k];\n\tint mid=(l+r)>>1;\n\tif (mid>=y) return query(k<<1,l,mid,x,y);\n\t\telse if (mid<x) return query(k<<1|1,mid+1,r,x,y);\n\t\t\telse return min(query(k<<1,l,mid,x,mid),query(k<<1|1,mid+1,r,mid+1,y));\n}\ninline void solve(){\n\tsort(q+1,q+1+m,cmp);\n\tfor (int i=1;i<=n;i++){\n\t\tlas[i]=pos[num[i]];\n\t\tpos[num[i]]=i;\n\t}\n\tbuild(1,1,n); memset(pos,0,sizeof(pos)); int now=0;\n\tfor (int i=1;i<=m;i++){\n\t\tint L=q[i].l,R=q[i].r;\n\t\twhile (now!=R){\n\t\t\t++now;\n\t\t\tif (las[now]){\n\t\t\t\tpos[las[now]]=INF;\n\t\t\t\tupd(1,1,n,las[now]);\n\t\t\t}\n\t\t\tpos[now]=las[now];\n\t\t\tupd(1,1,n,now);\n\t\t}\n\t\tpa tmp=query(1,1,n,L,R);\n\t\tif (tmp.first<L) ans[q[i].id]=num[tmp.second];\n\t}\n\tfor (int i=1;i<=m;i++){\n\t\twriteln(ans[i]);\n\t}\n}\nint main(){\n\tinit();\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1533952015,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1000F \u3010One Occurrence\u3011"
    },
    {
        "content": "\u83ab\u961f\u505a\u6cd5\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u5947\u602a\u7684\u79bb\u6563\u5316\u5373\u53ef\u3002\n\n\u6211\u8bbe $t_i$ \u8868\u793a\u6570\u5b57 $i$ \u5728\u76ee\u524d\u533a\u95f4\u51fa\u73b0\u7684\u6b21\u6570\uff0c$re$ \u6570\u7ec4\u7528\u6765\u5b58\u5728\u76ee\u524d\u533a\u95f4\u51fa\u73b0\u53ea\u6709\u4e00\u6b21\u7684\u6570\uff0c $res_i$ \u8868\u793a\u6570\u5b57 $i$ \u5728 $re$ \u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6570\u5b57 $i$ \u6ca1\u6709\u5728 $re$ \u6570\u7ec4\u4e2d\uff0c\u90a3\u4e48 $res_i$ \u4e3a $0$\u3002\u6211\u4eec\u4fdd\u8bc1 $re$ \u6570\u7ec4\u662f\u5411\u5de6\u7aef\u9760\u62e2\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230 $re_1$ \u4e3a\u7b54\u6848\uff0c\u5982\u679c\u6ca1\u6709\u5143\u7d20\uff08\u6ca1\u6709\u7b54\u6848\uff09\uff0c $re_1$ \u5c31\u4f1a\u4e3a $0$\u3002\n\n\u4e0d\u7406\u89e3\u7684\u53ef\u4ee5\u4ee3\u7801\u91cc\u7684\u6ce8\u91ca\u3002\n\n$\\texttt{Code:}$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N=1e6+1;\nstruct Que\n{\n\tint id;\n\tint l,r;\n}que[N];\nint n,q;\nint len;\nint l=1,r;\nint cnt;\nint re[N];\nint res[N];\nint a[N];\nint t[N];\nint c[N];\nint ans[N];\n\ninline int read()//\u5feb\u8bfb\n{\n\tint X=0; bool flag=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') flag=0; ch=getchar();}\n\twhile(ch>='0'&&ch<='9') {X=(X<<1)+(X<<3)+ch-'0'; ch=getchar();}\n\tif(flag) return X;\n\treturn ~(X-1);\n}\n\nbool cmp(Que x,Que y)\n{\n\treturn (c[x.l]^c[y.l])?c[x.l]<c[y.l]:((c[x.l]&1)?x.r<y.r:x.r>y.r);\n}\n\ninline void add(int x)\n{\n\tif(t[a[x]]==1)//\u8bf4\u660e\u73b0\u5728\u8fd9\u4e2a\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u4e0d\u662f1\u4e86\n\t{\n\t\tre[res[a[x]]]=re[cnt];//\u5c06\u6570\u7ec4\u5c3e\u7aef\u6570\u5b57\u79fb\u5230\u8fd9\u91cc\uff0c\u8986\u76d6\u5f53\u524d\u503c\uff0c\u4fdd\u8bc1\u6570\u7ec4\u5411\u5de6\u7aef\u9760\u62e2\n\t\tres[re[cnt]]=res[a[x]];//\u66f4\u65b0\u521a\u624d\u7684\u5c3e\u7aef\u6570\u5b57\u7684res\n\t\tre[cnt]=0;//\u6e05\u96f6\u73b0\u5728\u7684\n\t\tres[a[x]]=0;\n\t\tcnt--; //\u6570\u7ec4\u957f\u5ea6\u6539\u53d8\n\t}\n\tif(t[a[x]]==0)//\u6dfb\u52a0\u65b0\u5143\u7d20\u66f4\u597d\u7406\u89e3\n\t{\n\t\tre[++cnt]=a[x];\n\t\tres[a[x]]=cnt;\n\t}\n\t++t[a[x]];\n\treturn;\n}\n\ninline void sub(int x)//\u540c\u4e0a\uff0c\u5176\u4ed6\u5c31\u662f\u6b63\u5e38\u83ab\u961f\u4e86\n{\n\tif(t[a[x]]==1)\n\t{\n\t\tre[res[a[x]]]=re[cnt];\n\t\tres[re[cnt]]=res[a[x]];\n\t\tre[cnt]=0;\n\t\tres[a[x]]=0;\n\t\tcnt--; \n\t}\n\tif(t[a[x]]==2)\n\t{\n\t\tre[++cnt]=a[x];\n\t\tres[a[x]]=cnt;\n\t}\n\t--t[a[x]];\n\treturn;\n}\n\nint main()\n{\n\tn=read();\n\tlen=sqrt(n);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\ta[i]=read();\n\t\tc[i]=i/len+1;\n\t}\n\tq=read();\n\tfor(int i=1;i<=q;++i)\n\t{\n\t\tque[i].l=read();\n\t\tque[i].r=read();\n\t\tque[i].id=i;\t\n\t}\n\tsort(que+1,que+1+q,cmp);\n\tfor(int i=1;i<=q;++i)\n\t{\n\t\twhile(que[i].l<l)\n\t\t\tadd(--l);\n\t\twhile(que[i].r>r)\n\t\t\tadd(++r);\n\t\twhile(que[i].l>l)\n\t\t\tsub(l++);\n\t\twhile(que[i].r<r)\n\t\t\tsub(r--);\t\n\t\tans[que[i].id]=re[1];\n\t}\n\tfor(int i=1;i<=q;++i)\n\t\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1612516301,
        "uid": 239075,
        "name": "Eon_Floating",
        "ccfLevel": 5,
        "title": "CF1000F \u3010One Occurrence\u3011\u3010\u9898\u89e3\u3011"
    }
]