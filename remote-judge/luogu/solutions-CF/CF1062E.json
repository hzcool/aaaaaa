[
    {
        "content": "# \u3010Tree \u8bb0\u5f55\u3011 CF1062E Company\n\n## Description\n\n\u7ed9\u5b9a\u4e00\u9897\u6811\uff0c\u6709\u82e5\u5e72\u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7ed9\u51fa $l$ ,$r$\uff0c\u8981\u6c42\u7f16\u53f7\u5728 $[l,r]$ \u4e2d\u7684\u70b9\u4efb\u610f\u5220\u53bb\u4e00\u4e2a\u4e4b\u540e\u5269\u4f59\u70b9\u7684 LCA \u6df1\u5ea6\u6700\u5927\uff0c\u8f93\u51fa\u5220\u53bb\u70b9\u7684\u7f16\u53f7\u548c LCA \u7684\u6700\u5927\u6df1\u5ea6\u3002\n\n$1\\le n,m\\le 10^5$\uff0c\u65f6\u9650 $3s$\u3002\n\n## Solution\n\n\u8003\u8651\u5220\u6389\u4e00\u4e2a\u70b9\u540e\uff0cLCA \u4e3a $x$\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u70b9\u4e00\u5b9a\u5728 $x$ \u7684\u5b50\u6811\u5185\uff0c\u4e5f\u5c31\u662f $\\text{dfn}$ \u4e00\u5b9a\u5728 $[\\text{dfn}_x,\\text{dfn}_x+\\text{size}_x-1]$ \u3002\n\n\u5982\u679c\u5220\u6389\u70b9\u540e\u6539\u53d8 $x$ \uff0c\u4e5f\u5c31\u662f\u5220\u6389\u7684\u70b9\u7684 $dfn$ \u4e0d\u5728 $[\\text{dfn}_x,\\text{dfn}_x+\\text{size}_x-1]$\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5220\u6389 $\\text{dfn}$ \u6700\u5927\u6216\u8005\u6700\u5c0f\u7684\uff0c\u6bd4\u8f83\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u533a\u95f4 LCA \u7528 ST \u8868\u7ef4\u62a4\uff0c\u590d\u6742\u5ea6\uff1a$O(n\\log^2n+m\\log n)$\u3002\n\n## Code\n\n```cpp\n#define maxn 100005\nint dfn[maxn],times,lg[maxn];\nint h[maxn],head=1,n,m;\nstruct yyy{\n\tint to,z;\n\tinline void add(int x,int y){\n\t\tto=y;z=h[x];h[x]=head;\n\t}\n}a[maxn*2];\nnamespace LCA{\n    int fa[maxn][21],deep[maxn];\n    inline void dfs(int x,int pre){\n    \trg int i;deep[x]=deep[pre]+1;fa[x][0]=pre;dfn[x]=++times;\n    \tfor (i=1;i<=lg[deep[x]];i++) fa[x][i]=fa[fa[x][i-1]][i-1];\n    \tfor (i=h[x];i;i=a[i].z) if (a[i].to^pre) dfs(a[i].to,x);\n\t}\n\tinline void init(void){\n\t\trg int i;for (i=2;i<=n;i++) lg[i]=lg[i/2]+1;\n\t\tdfs(1,0);\n\t}\n\tinline int lca(int x,int y){\n\t\tif (!x||!y) return max(x,y);\n\t\tif (deep[x]<deep[y]) swap(x,y);\n\t\twhile (deep[x]>deep[y]) x=fa[x][lg[deep[x]-deep[y]]];\n\t\tif (x==y) return x;\n\t\tfor (rg int i=lg[deep[x]];i>=0;i--) \n\t\t    if (fa[x][i]^fa[y][i]) x=fa[x][i],y=fa[y][i];\n\t\treturn fa[x][0];\n\t}\n}\nusing namespace LCA;\nnamespace Segment{\n    struct yyy{\n    \tint Min,Max,id1,id2;\n    \tyyy(int x=1e9,int y=0,int a=0,int b=0){\n    \t\tMin=x;Max=y;id1=a;id2=b;\n\t\t}\n\t\tyyy operator +(const yyy &x) const{\n\t\t    yyy ans;\n\t\t    if (Min<x.Min) ans.Min=Min,ans.id1=id1;else ans.Min=x.Min,ans.id1=x.id1;\n\t\t    if (Max>x.Max) ans.Max=Max,ans.id2=id2;else ans.Max=x.Max,ans.id2=x.id2;\n\t\t    return ans;\n\t\t}\n\t}f[maxn<<2],tmp;\n\tinline void Build(int l,int r,int rt){\n\t\tif (l==r) {f[rt].Min=f[rt].Max=dfn[l];f[rt].id1=f[rt].id2=l;return;}\n\t\tint mid=l+r>>1;\n\t\tBuild(l,mid,rt<<1);\n\t\tBuild(mid+1,r,rt<<1|1);\n\t\tf[rt]=f[rt<<1]+f[rt<<1|1];\n\t}\n\tinline yyy Query(int l,int r,int rt,int head,int tail){\n\t    if (head<=l&&r<=tail) return f[rt];\n\t    int mid=l+r>>1;\n\t    if (head<=mid&&mid<tail){\n\t    \tyyy tmp1=Query(l,mid,rt<<1,head,tail),tmp2=Query(mid+1,r,rt<<1|1,head,tail);\n\t    \treturn tmp1+tmp2;\n\t\t}\n\t\telse if (head<=mid) return Query(l,mid,rt<<1,head,tail);\n\t\telse return Query(mid+1,r,rt<<1|1,head,tail);\n\t}\n}\nnamespace ST{\n    int f[maxn][21];\n    inline void init(void){\n    \trg int i,j;\n    \tfor (i=1;i<=n;i++) f[i][0]=i;\n    \tfor (j=1;j<=20;j++)\n    \t    for (i=1;i+(1<<j)-1<=n;i++)\n    \t        f[i][j]=lca(f[i][j-1],f[i+(1<<j-1)][j-1]);\n\t}\n\tinline int query(int l,int r){\n\t\tif (l>r) return 0;\n\t\tint z=lg[r-l+1];\n\t\treturn lca(f[l][z],f[r-(1<<z)+1][z]);\n\t}\n}\nsigned main(){\n    rg int i,x,y,l,r,sum1,sum2,tmp1,tmp2;\n    read(n);read(m);\n    for (i=2;i<=n;i++) read(x),a[++head].add(x,i),a[++head].add(y,i); \n    LCA::init();\n    Segment::Build(1,n,1);\n    ST::init();\n    while (m--){\n    \tread(l);read(r);\n    \tSegment::tmp=Segment::Query(1,n,1,l,r);\n    \ttmp1=Segment::tmp.id1;tmp2=Segment::tmp.id2;\n    \tsum1=lca(ST::query(l,tmp1-1),ST::query(tmp1+1,r));\n\t\tsum2=lca(ST::query(l,tmp2-1),ST::query(tmp2+1,r));\n    \tif (deep[sum1]>deep[sum2]) printf(\"%d %d\\n\",tmp1,deep[sum1]-1);\n    \telse printf(\"%d %d\\n\",tmp2,deep[sum2]-1);\n\t}\n    return 0;\n}\n```\n\n\n\n",
        "postTime": 1629860985,
        "uid": 51569,
        "name": "\u8fdd\u89c4\u7528\u6237\u540dFkZyA0!2",
        "ccfLevel": 0,
        "title": "\u3010Tree \u8bb0\u5f55\u3011 CF1062E Company"
    },
    {
        "content": "[\u6765\u849f\u84bb\u7684\u535a\u5ba2\u56ed\u91cc\u770b /kel](https://www.cnblogs.com/zkyJuruo/p/13910393.html)\n\n## $\\texttt{Solution}$\n\u6570\u636e\u7ed3\u6784\u5b66\u50bb\u7684\u849f\u84bb\u6765\u5199\u4e00\u4e2a\u65b0\u601d\u8def\n\n\u8fd9\u9898\u7684\u6b63\u89e3\u662f\u5229\u7528\u591a\u4e2a\u7ed3\u70b9\u7684 $lca$ \u662f $dfs$ \u5e8f\u6700\u5927\u7684\u7ed3\u70b9\u548c $dfs$ \u5e8f\u6700\u5c0f\u7684\u7ed3\u70b9\u7684 $lca$\u3002\u4f46\u662f\u8fd9\u91cc\u8003\u8651\u5982\u4f55\u4e0d\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002\n\n\u9996\u5148\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u5904\u7406\u51fa\u5728\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u5b50\u6811\u91cc\u9762\u7684\u70b9\u3002\n\n\u7b54\u6848\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a\n\n### 1. \u5305\u542b\u7ed3\u70b9 $l$\u3002\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4ee5 $l$ \u4e3a\u8d77\u70b9\u5411\u4e0a\u8df3\u3002\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u5c0f $\\ge r - l$ \u7684\u7ed3\u70b9 $p$\u3002\u7136\u540e\u5728\u7ed3\u70b9 $p$ \u4e0a\u9762\u4e8c\u5206\u627e\u5230\u662f\u6ca1\u6709\u9009\u54ea\u4e2a\u7ed3\u70b9\u3002\n\n### 2. \u5305\u542b\u9664\u4e86\u7ed3\u70b9 $l$ \u5916\u7684\u6240\u6709\u7ed3\u70b9\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4ee5 $l$ \u4e3a\u8d77\u70b9\u5411\u4e0a\u8df3\u3002\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u5c0f $\\ge r - l$ \u7684\u7ed3\u70b9 $p$\u3002\u8fd9\u6837\u5b50\u7684\u7b54\u6848\u5c31\u662f $l$\u3002\n\n## $\\texttt{Code}$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define L(i, j, k) for(int i = (j), i##E = (k); i <= i##E; i++) \n#define R(i, j, k) for(int i = (j), i##E = (k); i >= i##E; i--) \n#define ll long long \n#define db double\n#define mkp make_pair \nconst int N = 2e5 + 7;\nconst int M = 8e6 + 7;\nint n, m, fa[N], siz[N], dep[N], jp[20][N];\nint head[N], edge_id;\nint hd[N], sum[M], ch[M][2], tot;\nstruct node { int to, next; } e[N << 1];\nvoid add_edge(int u, int v) { ++edge_id, e[edge_id].next = head[u], e[edge_id].to = v, head[u] = edge_id; }\nvoid add(int &x, int L, int R, int wz) {\n    if(!x) x = ++tot;\n    sum[x]++;\n    if(L == R) return;\n    int mid = (L + R) / 2;\n    if(wz <= mid) add(ch[x][0], L, mid, wz);\n    else add(ch[x][1], mid + 1, R, wz);\n}\nint merge(int x, int y) {\n    if(!x || !y) return x | y;\n    int nw = ++tot;\n    sum[nw] = sum[x] + sum[y];\n    ch[nw][0] = merge(ch[x][0], ch[y][0]);\n    ch[nw][1] = merge(ch[x][1], ch[y][1]);\n    return nw;\n}\nint query(int x, int L, int R, int l, int r) {\n    if(!x) return 0;\n    if(l <= L && R <= r) return sum[x];\n    int mid = (L + R) / 2, res = 0;\n    if(l <= mid) res += query(ch[x][0], L, mid, l, r);\n    if(r > mid) res += query(ch[x][1], mid + 1, R, l, r);\n    return res;\n}\nvoid dfs(int x) {\n    siz[x] = 1, add(hd[x], 1, n, x);\n    for(int i = head[x]; i; i = e[i].next) {\n        int v = e[i].to; \n        dep[v] = dep[x] + 1, dfs(v), siz[x] += siz[v];\n        // cout << \" ? \\n\";\n        hd[x] = merge(hd[x], hd[v]);\n        // cout << \" ! \\n\";\n    }\n}\nint get(int x, int l, int r, int y) {\n    int nowans = query(hd[x], 1, n, l, r);\n    if(nowans > y) return 0;\n    if(nowans == y) return x;\n    int now = x;\n    R(i, 18, 0) if(jp[i][now] && query(hd[jp[i][now]], 1, n, l, r) < y) now = jp[i][now];\n    now = fa[now];\n    if(query(hd[now], 1, n, l, r) != y) return 0;\n    return now;\n}\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    L(i, 2, n) scanf(\"%d\", &fa[i]), add_edge(fa[i], i), jp[0][i] = fa[i];\n    L(i, 1, 18) L(j, 1, n) jp[i][j] = jp[i - 1][jp[i - 1][j]];\n    dfs(1);\n    while(m--) {\n        int l, r;\n        scanf(\"%d%d\", &l, &r);\n        int resa = get(l + 1, l + 1, r, r - l), resb = get(l, l, r, r - l);\n         // 1 : not contain l\n        if(dep[resa] >= dep[resb]) printf(\"%d %d\\n\", l, dep[resa]);\n         // 2 : contain l\n        else {\n            int L = l, R = r;\n            while(L < R) {\n                int mid = (L + R) / 2;\n                if(query(hd[resb], 1, n, L, mid) != mid - L + 1) R = mid;\n                else L = mid + 1;\n            }\n            printf(\"%d %d\\n\", L, dep[resb]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1604223579,
        "uid": 173660,
        "name": "zhoukangyang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1062E \u3010Company\u3011"
    },
    {
        "content": "### [$\\texttt{Company}$](https://www.luogu.com.cn/problem/CF1062E)\n\n\u533a\u95f4 $\\text{LCA}$ \u6a21\u677f\u9898\uff08\u7684\u52a0\u5f3a\uff1f\uff09\u3002\n\n\u8003\u8651\u533a\u95f4 $\\text{LCA}$\u3002\n\n\u533a\u95f4 $\\text{LCA}$ \u7b49\u4e8e\u4ec0\u4e48\u634f\uff1f\n\n\u6211\u4eec\u62bd\u8c61\u4e00\u4e2a\u4e8c\u53c9\u6811\u3002\n\n![xqTYk9.png](https://s1.ax1x.com/2022/11/04/xqTYk9.png)\n\n\u5047\u5982\u8ba9\u4f60\u6c42 $8,9,10,11$ \u7684 $\\text{LCA}$\uff0c\u4f60\u4f1a\u600e\u4e48\u6c42\u90a3\u3002\n\n\u901a\u8fc7\u89c2\u5bdf\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u4ed6\u4eec\u7684 $\\text{LCA}$\uff0c\u7b49\u6548\u4e8e $8,11$ \u7684 $\\text{LCA}$\uff0c\u90a3\u4e48\u8fd9\u6837\u6709\u4ec0\u4e48\u6027\u8d28\u54ea\uff1f\n\n\u6211\u4eec\u5047\u5b9a\u7ed9\u4ed6\u4eec\u4e00\u4e2a\u6a2a\u5750\u6807\uff0c\u90a3\u4e48 $8$ \u662f\u6a2a\u5750\u6807\u6700\u5c0f\u7684\u70b9\uff0c $11$ \u662f\u6a2a\u5750\u6807\u6700\u5927\u7684\u70b9\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u4ed6\u4eec\u7684 $\\text{LCA}$ \u5c31\u4f1a\u6700\u9ad8\u3002\n\n\u6beb\u65e0\u7591\u95ee\u6700\u9ad8\u7684\u2014\u2014\u4e24\u70b9 $\\text{LCA}$\uff0c\u5c31\u662f\u533a\u95f4\u7684 $\\text{LCA}$\u3002\n\n![xqTsTH.png](https://s1.ax1x.com/2022/11/04/xqTsTH.png)\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u5982\u4f55\u6c42\u51fa\u6a2a\u5750\u6807\u6700\u5c0f\u548c\u6700\u5927\u7684\u4e24\u4e2a\u70b9\u54ea\uff1f\n\n\u6211\u4eec\u8003\u8651\u5bf9\u6811\u8fdb\u884c $\\text{dfs}$\u3002\u90a3\u4e48 $dfn$ \u6700\u5c0f\u7684\u4e00\u5b9a\u662f\u6700\u5de6\u4fa7\u7684\u5417\uff1f\n\n\u4f46\u662f\u9057\u61be\u7684\u662f\uff0c$dfn$ \u6700\u5c0f\u7684\u4e0d\u4e00\u5b9a\u662f\u6700\u5de6\u4fa7\u7684\u3002\uff08\u533a\u95f4 $4-8$\uff0c$dfn$ \u6700\u5c0f\u7684\u662f $4$ \u800c\u4e0d\u662f $8$\uff09\u3002\n\n\u4f46\u662f\u6ca1\u6709\u5173\u7cfb\uff0c\u56e0\u4e3a $dfn$ \u6700\u5c0f\u7684\u70b9($4$) \u4e00\u5b9a\u662f\u6700\u5de6\u7aef\u70b9\u7684\u7956\u5148($8$)\u3002\n\n\u6839\u636e $\\text{LCA}$ \u7684\u672c\u8d28\uff0c\u6c42\u4e24\u70b9\u95f4\u7684 $\\text{LCA}$ \u5c31\u662f\u4e00\u6b65\u4e00\u6b65\u7684\u5411\u4e0a\u8df3\uff0c\u90a3\u4e48\u8d77\u70b9\u4ece $8\\to4$ \u76f8\u5f53\u4e8e\u6211\u4eec\u63d0\u524d\u8df3\u4e86\u4e00\u6b65\uff0c\u540c\u65f6\u4fdd\u8bc1\u4e0d\u4f1a\u8df3\u8fc7\u5934\uff08\u56e0\u4e3a $4$ \u4e5f\u5728\u8981\u6c42\u7684\u533a\u95f4\u5185\uff0c\u6211\u4eec\u6c42 $4$ \u548c $11$ \u7684 $\\text{LCA}$ \u4e00\u5b9a\u4e0d\u4f1a\u8d85\u8fc7\u7b54\u6848\uff09\u3002\n\u53f3\u4fa7\u4f9d\u7136\u540c\u7406\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u7528\u4f60\u559c\u6b22\u7684\u65b9\u5f0f\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u6700\u5c0f $dfn$ \u5e8f\u5566![](//\u5567.tk/qq)\n\n\n\u4ee5\u4e0a\u5373\u4e3a\u6c42\u533a\u95f4 $\\text{LCA}$ \u7684\u65b9\u6cd5\uff0c\u73b0\u5728\u7684\u95ee\u9898\u662f\u5220\u9664\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684 $\\text{LCA}$ \u6700\u6df1\uff0c\u6839\u636e\u4e0a\u9762\u7684\u6027\u8d28\uff0c\u6211\u4eec\u77e5\u9053\u53ea\u6709 $dfn$ \u6700\u5927\u6700\u5c0f\u7684\u70b9\u624d\u4f1a\u9020\u6210\u8d21\u732e\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5220\u6389\u4e00\u4e2a\uff0c\u8ba9\u6700\u5927\u548c\u6b21\u5c0f\uff0c\u6b21\u5927\u548c\u6700\u5c0f\u6c42\u51fa $\\text{LCA}$\uff0c\u4e24\u8005\u53d6\u4e00\u4e0b $\\max deep$ \u5c31\u597d\u5566\u3002\n\n### $\\text{CODE}$\n```cpp\n#include<bits/stdc++.h>\n#define N 500005\nusing namespace std;\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nint n,q,tot,head[N],dep[N],dfn[N],fa[N][20],cnt,mx[N][20],smx[N][20],mn[N][20],smn[N][20],len[20],t[N];\nstruct node\n{\n\tint from,to,next;\n}k[N];\nvoid add(int from,int to)\n{\n\tk[++tot].to=to;\n\tk[tot].from=from;\n\tk[tot].next=head[from];\n\thead[from]=tot;\n}\nvoid dfs(int now,int f)\n{\n\tdep[now]=dep[f]+1;\n\tfa[now][0]=f;\n\tdfn[now]=++cnt;\n\tt[cnt]=now;\n\tfor(int i=1;i<=19;i++)fa[now][i]=fa[fa[now][i-1]][i-1];\n\tfor(int i=head[now];i;i=k[i].next)dfs(k[i].to,now);\n}\nint lca(int a,int b)\n{\n\ta=t[a],b=t[b];\n\tif(dep[a]<dep[b])swap(a,b);\n\tfor(int i=19;i>=0;i--)if(dep[fa[a][i]]>=dep[b])a=fa[a][i];\n\tif(a==b)return dep[a];\n\tfor(int i=19;i>=0;i--)if(fa[a][i]!=fa[b][i])a=fa[a][i],b=fa[b][i];\n\treturn dep[fa[a][0]];\n}\nint main()\n{\n\tn=read();q=read();\n\tlen[0]=1;\n\tfor(int i=1;i<=19;i++)len[i]=2*len[i-1];\n\tfor(int i=2,x;i<=n;i++)\n\t{\n\t\tx=read();\n\t\tadd(x,i); \n\t}\n\tdfs(1,0);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tmx[i][0]=dfn[i];\n\t\tmn[i][0]=dfn[i];\n\t\tsmx[i][0]=0;\n\t\tsmn[i][0]=10000000;\n\t}\n\tfor(int j=1;j<=19;j++)\n\t{\n\t\tfor(int i=1;i+len[j]-1<=n;i++)\n\t\t{\n\t\t\tmx[i][j]=max(mx[i][j-1],mx[i+len[j-1]][j-1]);\n\t\t\tmn[i][j]=min(mn[i][j-1],mn[i+len[j-1]][j-1]);\n\t\t\tsmx[i][j]=max(min(mx[i][j-1],mx[i+len[j-1]][j-1]),max(smx[i][j-1],smx[i+len[j-1]][j-1]));\n\t\t\tsmn[i][j]=min(max(mn[i][j-1],mn[i+len[j-1]][j-1]),min(smn[i][j-1],smn[i+len[j-1]][j-1]));\n\t\t}\n\t}\n\twhile(q--)\n\t{\n\t\tint l=read(),r=read(),a=log2(r-l+1);\n\t\tint nmx=max(mx[l][a],mx[r-len[a]+1][a]),nmn=min(mn[l][a],mn[r-len[a]+1][a]);\n\t\tint nsx=max(smx[l][a],smx[r-len[a]+1][a]),nsn=min(smn[l][a],smn[r-len[a]+1][a]);\n\t\tif(mx[r-len[a]+1][a]!=mx[l][a])nsx=max(nsx,min(mx[l][a],mx[r-len[a]+1][a]));\n\t\tif(mn[l][a]!=mn[r-len[a]+1][a])nsn=min(nsn,max(mn[l][a],mn[r-len[a]+1][a]));\n\t\tint ans1=lca(nmx,nsn),ans2=lca(nsx,nmn);\n\t\tif(ans1>ans2)cout<<t[nmn]<<\" \"<<ans1-1<<\"\\n\";\n\t\telse cout<<t[nmx]<<\" \"<<ans2-1<<\"\\n\";\n\t}\n\treturn 0;\n}\n```\n\n\u8fd9\u91cc\u7528\u7684 $\\text{ST}$ \u8868\u7ef4\u62a4\u7684\uff0c\u5199\u9ebb\u4e86![](//\u5567.tk/kun)",
        "postTime": 1667526759,
        "uid": 331947,
        "name": "hegm",
        "ccfLevel": 0,
        "title": "CF1062E Company \u9898\u89e3"
    },
    {
        "content": "~~md\u771f\u964d\u667a\u4e86\u2026\u2026\u5220dfn\u6700\u5c0f\u6216\u6700\u5927\u7684\u70b9\u5c31\u884c\u4e86\u2026\u2026~~\n\n\u90a3\u6211\u5c31\u6765\u4e2a\u6570\u636e\u7ed3\u6784\u5b66\u50bb\u4e86\u7684\u4ee3\u78016\u4e2a\u591aK\u7684\u8fa3\u9e21\u505a\u6cd5\u5427\u2026\u2026\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053$[l,r]$\u7684$LCA$\uff0c\u8fd9\u4e2a\u7531\u4e8e$LCA$\u662f\u53ef\u5408\u5e76\u7684\u62ff\u4e2a\u7ebf\u6bb5\u6811\u53ef\u4ee5\u7ef4\u62a4\uff08\u9700\u8981\u7528$O(1)LCA$\uff09\u3002\u5982\u679c\u8fd9\u4e2a$LCA\\in [l,r]$\u90a3\u80af\u5b9a\u5220\u7684\u5c31\u662f$LCA$\uff0c\u5426\u5219\u5047\u8bbe\u6211\u4eec\u77e5\u9053$[l,r]$\u6784\u6210\u7684\u6781\u5927\u8fde\u901a\u5757\uff08\u548c\u865a\u6811\u7684\u533a\u522b\u5c31\u662f\u5305\u542b\u6240\u6709\u7ecf\u8fc7\u7684\u70b9\uff09$T$\uff0c\u8003\u8651$LCA$\u5728$T$\u4e0a\u7684\u513f\u5b50\uff0c\u5982\u679c\u5b83\u6709\u591a\u4e8e2\u4e2a\u513f\u5b50\u90a3\u663e\u7136\u4e0d\u7ba1\u5220\u54ea\u4e2a\u70b9\u5f97\u5230\u7684\u90fd\u8fd8\u662f\u8fd9\u4e2a$LCA$\u3002\u5426\u5219\u7684\u8bdd\uff0c\u5b83\u4e00\u5b9a\u6709\u4e24\u4e2a\u513f\u5b50$a$\u548c$b$\uff0c\u8003\u8651\u5b83\u4eec\u7684\u5b50\u6811\uff0c\u90a3\u80af\u5b9a\u662f\u8981\u5220\u5b50\u6811\u5185\u53ea\u6709\u4e00\u4e2a\u70b9\u5728$[l,r]$\u5185\u7684\u90a3\u4e2a\u70b9\u624d\u4f1a\u4f7f\u7b54\u6848\u6539\u53d8\uff0c\u8ba8\u8bba\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u8003\u8651\u4e0a\u8ff0\u64cd\u4f5c\u600e\u4e48\u5b9e\u73b0\uff0c\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u77e5\u9053\u5b50\u6811\u5185$[l,r]$\u7684\u70b9\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u70b9\u7684\u8bdd\u53ef\u4ee5\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u627e\u5230\u8fd9\u4e2a\u70b9\u3002\u7136\u540e\u8003\u8651\u600e\u4e48\u5904\u7406$LCA$\u5728$T$\u4e0a\u7684\u513f\u5b50\uff0c\u6211\u4eec\u80af\u5b9a\u4e0d\u80fd\u6bcf\u6b21\u66b4\u529b\u626b\u4e00\u904d\u513f\u5b50\uff0c\u8fd9\u4f1a\u88ab\u83ca\u82b1\u5361\u3002\u7136\u800c\uff0c\u6211\u4eec\u77e5\u9053\u5982\u679c\u628a\u6811\u6811\u94fe\u5256\u5206\u4e00\u4e0b\u7684\u8bdd\u4e00\u4e2a\u70b9\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u91cd\u513f\u5b50\uff08\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u7279\u5224\uff09\uff0c\u800c\u8f7b\u513f\u5b50\u662f\u53ef\u4ee5\u652f\u6301\u52a8\u6001\u7ef4\u62a4\u7684\uff0c\u90a3\u4e48\u5c31\u6709\u4e86\u4e00\u4e2a\u505a\u6cd5\uff1a\u79bb\u7ebf\u628a\u8be2\u95ee\u5b58\u5728\u53f3\u7aef\u70b9\u4e0a\uff0c\u7136\u540e\u626b\u63cf\u7ebf\uff0c\u6211\u4eec\u5e0c\u671b\u77e5\u9053$LCA$\u6709\u54ea\u4e9b\u8f7b\u513f\u5b50\u6ee1\u8db3\u5728\u5b50\u6811\u91cc\u5b58\u5728$[l,r]$\u5185\u7684\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u4ee4\u6bcf\u4e2a\u8f7b\u513f\u5b50\u7684\u70b9\u6743\u662f\u5b50\u6811\u5185$<=$\u5f53\u524d\u53f3\u7aef\u70b9\u7684\u6700\u5927\u503c\uff08\u8fd9\u6837\u5982\u679c$>=l$\u5c31\u8bf4\u660e\u5b50\u6811\u5185\u5b58\u5728$[l,r]$\u7684\u70b9\uff09\uff0c\u6211\u4eec\u6bcf\u626b\u5230\u4e00\u4e2a$r$\u5c31\u8df3\u94fe\u628a\u6240\u6709\u91cd\u94fe\u94fe\u9876\u7684\u70b9\u6743\u6539\u6210$r$\u5373\u53ef\uff0c\u7136\u540e\u6211\u4eec\u53ea\u8981\u5728$LCA$\u5904\u7ef4\u62a4\u70b9\u6743\u6700\u5927\u76842\u4e2a\u62163\u4e2a\u5373\u53ef\uff0c\u8fd9\u53ef\u4ee5\u5728\u6bcf\u4e2a\u70b9\u5f00\u4e2a\u652f\u6301\u4fee\u6539\u7684\u53ef\u5220\u5806\u7ef4\u62a4\u8f7b\u513f\u5b50\u3002\u7136\u540e\u5c31$O(n\\log^2n)$\u505a\u5b8c\u4e86\uff0c\u74f6\u9888\u5728\u4e8e\u94fe\u5256\u7ef4\u62a4\u8f7b\u513f\u5b50\u3002\n\n\u4e0a\u4ee3\u7801~\uff08\u683c\u5f0f\u5316\u540e\u670910K\u2026\u2026\uff09\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <queue>\n#define N 100011\n#define ls(_o) (_o << 1)\n#define rs(_o) ((_o << 1) | 1)\nusing namespace std;\nnamespace ywy {\n\tinline int get() {\n\t    int n = 0;\n\t    char c;\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            break;\n\t        if (c == '-')\n\t            goto s;\n\t    }\n\t    n = c - '0';\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 + c - '0';\n\t        else\n\t            return (n);\n\t    }\n\ts:\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 - c + '0';\n\t        else\n\t            return (n);\n\t    }\n\t}\n\ttypedef struct _b {\n\t    int dest;\n\t    int nxt;\n\t} bian;\n\tbian memchi[1000001];\n\tint gn = 1, heads[N], dfn[N], fan[N], size[N], zhongson[N], st[N * 2][18], lg[N * 2], gdfn = 1;\n\tinline void add(int s, int t) {\n\t    memchi[gn].dest = t;\n\t    memchi[gn].nxt = heads[s];\n\t    heads[s] = gn;\n\t    gn++;\n\t}\n\tint early[N], late[N], top[N], gstp = 1, rt[N], lef[10000001], rgh[10000001], data[10000001], gseg = 1;\n\tinline int lca(int a, int b) {\n\t    if (!(a && b))\n\t        return (a | b);\n\t    if (dfn[a] > dfn[b])\n\t        swap(a, b);\n\t    a = early[a];\n\t    b = late[b];\n\t    int g = lg[b - a + 1];\n\t    return (fan[min(st[a][g], st[b - (1 << g) + 1][g])]);\n\t}\n\tint lcas[1000001];\n\tvoid build(int l, int r, int tree) {\n\t    if (l == r) {\n\t        lcas[tree] = l;\n\t        return;\n\t    }\n\t    int mid = (l + r) >> 1;\n\t    build(l, mid, ls(tree));\n\t    build(mid + 1, r, rs(tree));\n\t    lcas[tree] = lca(lcas[ls(tree)], lcas[rs(tree)]);\n\t}\n\tint query(int rl, int rr, int l, int r, int tree) {\n\t    if (rl > rr)\n\t        return (0);\n\t    if (rl == l && rr == r)\n\t        return (lcas[tree]);\n\t    int mid = (l + r) >> 1;\n\t    if (rl > mid)\n\t        return (query(rl, rr, mid + 1, r, rs(tree)));\n\t    if (rr <= mid)\n\t        return (query(rl, rr, l, mid, ls(tree)));\n\t    return (lca(query(rl, mid, l, mid, ls(tree)), query(mid + 1, rr, mid + 1, r, rs(tree))));\n\t}\n\tvoid insert(int l, int r, int &tree, int pt) {\n\t    if (!tree)\n\t        tree = gseg, gseg++;\n\t    data[tree]++;\n\t    if (l == r)\n\t        return;\n\t    int mid = (l + r) >> 1;\n\t    if (pt <= mid)\n\t        insert(l, mid, lef[tree], pt);\n\t    else\n\t        insert(mid + 1, r, rgh[tree], pt);\n\t}\n\tint qdat(int rl, int rr, int l, int r, int tree) {\n\t    if (!data[tree])\n\t        return (0);\n\t    if (rl == l && rr == r)\n\t        return (data[tree]);\n\t    int mid = (l + r) >> 1;\n\t    if (rl > mid)\n\t        return (qdat(rl, rr, mid + 1, r, rgh[tree]));\n\t    if (rr <= mid)\n\t        return (qdat(rl, rr, l, mid, lef[tree]));\n\t    return (qdat(rl, mid, l, mid, lef[tree]) + qdat(mid + 1, rr, mid + 1, r, rgh[tree]));\n\t}\n\tint united(int a, int b) {\n\t    if (!(a && b))\n\t        return (a | b);\n\t    int me = gseg;\n\t    gseg++;\n\t    data[me] = data[a] + data[b];\n\t    lef[me] = united(lef[a], lef[b]);\n\t    rgh[me] = united(rgh[a], rgh[b]);\n\t    return (me);\n\t}\n\tint qfirst(int rl, int rr, int l, int r, int tree) {\n\t    if (!data[tree])\n\t        return (0);\n\t    if (l == r)\n\t        return (l);\n\t    int mid = (l + r) >> 1;\n\t    if (rl == l && rr == r) {\n\t        if (data[lef[tree]])\n\t            return (qfirst(l, mid, l, mid, lef[tree]));\n\t        return (qfirst(mid + 1, r, mid + 1, r, rgh[tree]));\n\t    }\n\t    if (rl > mid)\n\t        return (qfirst(rl, rr, mid + 1, r, rgh[tree]));\n\t    if (rr <= mid)\n\t        return (qfirst(rl, rr, l, mid, lef[tree]));\n\t    int cjr = qfirst(rl, mid, l, mid, lef[tree]);\n\t    if (cjr)\n\t        return (cjr);\n\t    return (qfirst(mid + 1, rr, mid + 1, r, rgh[tree]));\n\t}\n\ttypedef struct _p {\n\t    int a;\n\t    int b;\n\t    _p(int i, int j) {\n\t        a = i;\n\t        b = j;\n\t    }\n\t    friend bool operator<(const _p &a, const _p &b) {\n\t        if (a.b != b.b)\n\t            return (a.b < b.b);\n\t        return (a.a < b.a);\n\t    }\n\t    friend bool operator==(const _p &a, const _p &b) { return (a.a == b.a && a.b == b.b); }\n\t} pair;\n\ttypedef struct _heap {\n\t    priority_queue<pair> me, del;\n\t    inline void wh() {\n\t        while (!me.empty() && !del.empty() && me.top() == del.top()) me.pop(), del.pop();\n\t    }\n\t    inline void push(pair x) { me.push(x); }\n\t    inline int size() { return (me.size() - del.size()); }\n\t    inline pair top() {\n\t        wh();\n\t        return (me.top());\n\t    }\n\t    inline void erase(pair x) { del.push(x); }\n\t    inline void pop() {\n\t        wh();\n\t        me.pop();\n\t    }\n\t} heap;\n\theap chs[100001];\n\tint n;\n\tint deep[N];\n\tint lst[N], fa[N];\n\tvoid dfs(int pt, int baba) {\n\t    size[pt] = 1;\n\t    int mx = 0, best = 0;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba)\n\t            continue;\n\t        deep[memchi[i].dest] = deep[pt] + 1;\n\t        dfs(memchi[i].dest, pt);\n\t        size[pt] += size[memchi[i].dest];\n\t        rt[pt] = united(rt[pt], rt[memchi[i].dest]);\n\t        if (size[memchi[i].dest] > mx)\n\t            mx = size[memchi[i].dest], best = memchi[i].dest;\n\t    }\n\t    insert(1, n, rt[pt], pt);\n\t    top[pt] = pt;\n\t    zhongson[pt] = best;\n\t    lst[pt] = -1;\n\t}\n\tint anspt[N], anss[N];\n\tvoid efs(int pt, int baba) {\n\t    if (zhongson[pt])\n\t        top[zhongson[pt]] = top[pt], efs(zhongson[pt], pt);\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba || zhongson[pt] == memchi[i].dest)\n\t            continue;\n\t        efs(memchi[i].dest, pt);\n\t    }\n\t}\n\tvector<pair> vec[N];  // a->l,b->id\n\tvoid ffs(int pt, int baba) {\n\t    dfn[pt] = gdfn;\n\t    fan[gdfn] = pt;\n\t    gdfn++;\n\t    st[gstp][0] = dfn[pt];\n\t    gstp++;\n\t    early[pt] = late[pt] = gstp - 1;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba)\n\t            continue;\n\t        ffs(memchi[i].dest, pt);\n\t        st[gstp][0] = dfn[pt];\n\t        late[pt] = gstp;\n\t        gstp++;\n\t    }\n\t}\n\tinline int calc(int l, int r, int x) { return (lca(query(l, x - 1, 1, n, 1), query(x + 1, r, 1, n, 1))); }\n\tvector<int> tmp;\n\tinline void clear(vector<int> &v) {\n\t    vector<int> ff;\n\t    v = ff;\n\t}\n\tvoid ywymain() {\n\t    n = get();\n\t    int q = get();\n\t    for (register int i = 2; i <= n; i++) add(fa[i] = get(), i);\n\t    ffs(1, 0);\n\t    gstp--;\n\t    lg[0] = -1;\n\t    for (register int i = 1; i <= gstp; i++) lg[i] = lg[i - 1] + (i == (i & -i));\n\t    for (register int i = 1; i <= lg[gstp]; i++) {\n\t        for (register int j = 1; j <= gstp - (1 << i) + 1; j++)\n\t            st[j][i] = min(st[j][i - 1], st[j + (1 << (i - 1))][i - 1]);\n\t    }\n\t    build(1, n, 1);\n\t    dfs(1, 0);\n\t    efs(1, 0);\n\t    for (register int i = 1; i <= q; i++) {\n\t        int l = get(), r = get();\n\t        vec[r].push_back(_p(l, i));\n\t    }\n\t    for (register int i = 1; i <= n; i++) {\n\t        int cur = top[i];\n\t        while (fa[cur]) {\n\t            if (lst[cur] != -1)\n\t                chs[fa[cur]].erase(_p(cur, lst[cur]));\n\t            chs[fa[cur]].push(_p(cur, lst[cur] = i));\n\t            cur = top[fa[cur]];\n\t        }\n\t        for (register int j = 0; j < vec[i].size(); j++) {\n\t            int ance = query(vec[i][j].a, i, 1, n, 1);\n\t            if (ance >= vec[i][j].a && ance <= i) {\n\t                anspt[vec[i][j].b] = ance;\n\t                anss[vec[i][j].b] = deep[calc(vec[i][j].a, i, ance)];\n\t                continue;\n\t            }\n\t            clear(tmp);\n\t            if (zhongson[ance]) {\n\t                if (qdat(vec[i][j].a, i, 1, n, rt[zhongson[ance]]))\n\t                    tmp.push_back(zhongson[ance]);\n\t            }\n\t            if (chs[ance].size() >= 1) {\n\t                pair cjr = chs[ance].top();\n\t                chs[ance].pop();\n\t                if (cjr.b >= vec[i][j].a) {\n\t                    tmp.push_back(cjr.a);\n\t                    if (chs[ance].size() >= 1) {\n\t                        pair a = chs[ance].top();\n\t                        chs[ance].pop();\n\t                        if (a.b >= vec[i][j].a) {\n\t                            tmp.push_back(a.a);\n\t                            if (chs[ance].size() >= 1) {\n\t                                pair b = chs[ance].top();\n\t                                chs[ance].pop();\n\t                                if (b.b >= vec[i][j].a) {\n\t                                    tmp.push_back(b.a);\n\t                                }\n\t                                chs[ance].push(b);\n\t                            }\n\t                        }\n\t                        chs[ance].push(a);\n\t                    }\n\t                }\n\t                chs[ance].push(cjr);\n\t            }\n\t            if (tmp.size() >= 3) {\n\t                anss[vec[i][j].b] = deep[ance];\n\t                anspt[vec[i][j].b] = i;\n\t                continue;\n\t            }\n\t            anspt[vec[i][j].b] = i;\n\t            anss[vec[i][j].b] = deep[ance];\n\t            for (register int k = 0; k < 2; k++) {\n\t                if (qdat(vec[i][j].a, i, 1, n, rt[tmp[k]]) == 1) {\n\t                    int best = qfirst(vec[i][j].a, i, 1, n, rt[tmp[k]]),\n\t                        res = deep[calc(vec[i][j].a, i, best)];\n\t                    if (res > anss[vec[i][j].b])\n\t                        anss[vec[i][j].b] = res, anspt[vec[i][j].b] = best;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    for (register int i = 1; i <= q; i++) printf(\"%d %d\\n\", anspt[i], anss[i]);\n\t}\n}\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n\n```",
        "postTime": 1558625364,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1062E \u3010Company\u3011"
    },
    {
        "content": "~~\u6765\u4e00\u53d1\u7801\u98ce\u8f83\u4e3a\u6b63\u5e38\u7684\u9898\u89e3qwq~~\n\n\u5148\u5c1d\u8bd5\u627e\u6027\u8d28\u3002\u5047\u8bbe\u67d0\u4e00\u70b9 $u$ \u4e3a\u67d0\u4e00\u6bb5\u8282\u70b9\u7684 LCA\uff0c\u90a3\u4e48\u5176\u5b50\u6811\u7684\u8282\u70b9 $dfn$ \u5e8f\u4e00\u5b9a\u5728 $[dfn_{u},dfn_{u}+size_{u}-1]$ \u4e4b\u95f4\u3002\u5f88\u660e\u663e\u5220\u53bb**\u4e2d\u95f4**\u7684\u70b9\u4e00\u5b9a\u4e0d\u80fd\u4f7f\u7b54\u6848\u66f4\u4f18\uff0c\u53ea\u80fd\u5220\u53bb $dfn$ \u5e8f**\u6700\u5c0f**\u6216**\u6700\u5927**\u7684\u70b9\u624d\u53ef\u80fd\u4f7f LCA \u4e0b\u79fb\u3002\u5e76\u4e14\u67e5\u627e\u533a\u95f4 LCA \u4e5f\u53ea\u9700\u8981\u6c42 $dfn$ \u5e8f**\u6700\u5c0f**\u6216**\u6700\u5927**\u7684\u70b9\u7684 LCA \u5373\u53ef\u3002\u4e5f\u7b97\u662f\u8f83\u4e3a\u7ecf\u5178\u5957\u8def\u4e86\u3002\n\n\u4f7f\u7528\u4e00\u68f5\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u533a\u95f4**\u6700\u5c0f**\u4e0e**\u6700\u5927** $dfn$ \u503c\uff0c\u6bcf\u6b21\u8003\u8651\u5c06\u5176\u5220\u53bb\u3002\u4e2d\u95f4\u4f7f\u7528 ST\u8868 \u6765\u67e5\u627e\u533a\u95f4 LCA \u5373\u53ef\u3002\u4e2d\u95f4\u8fd8\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\u548c trick \uff08\u89c1\u6ce8\u91ca\uff09\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nconst int N=2e5+10,K=25,INF=1e9;\ntemplate <class T>\ninline void read(T &x)\n{\n    x=0;int f=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    if(f)x=~x+1;\n}\ntemplate <class T,class ...T1>\ninline void read(T &x,T1 &...x1)\n{\n    read(x);\n    read(x1...);\n}\n\nstruct Node\n{\n    int l,r;\n    int minx,maxx;    \n}tr[N<<2];\nint n,q;\nint tot,head[N],ver[N<<1],ne[N<<1];\nint cnt,d[N],dfn[N],st[N<<1][K];\nint Log[N<<1];\n\nvoid add(int u,int v)\n{\n    ver[++tot]=v;\n    ne[tot]=head[u];\n    head[u]=tot;\n}\nvoid dfs(int x,int fa)\n{\n    st[++cnt][0]=x;\n    d[x]=d[fa]+1;\n    dfn[x]=cnt;//\u6ce8\u610f\u8fd9\u91cc\u4f7f\u7528\u6b27\u62c9\u5e8f\u6765\u4ee3\u66ffdfs\u5e8f\uff0c\u5bf9\u4e8e\u4e4b\u540e\u6c42\u533a\u95f4LCA\u7b49\u64cd\u4f5c\u5f88\u65b9\u4fbf\uff08\u89c1\u4e0b\u65b9\uff09\n    for(int i=head[x];i;i=ne[i])\n    {\n        // if(ver[i]==fa)continue;\n        dfs(ver[i],x);\n        st[++cnt][0]=x;\n    }\n}\nint dmin(int x,int y)\n{\n    return d[x]<d[y]?x:y;\n}\nvoid build_st()\n{\n    for(int i=2;i<=cnt;i++)\n        Log[i]=Log[i>>1]+1;\n    for(int j=1;j<=Log[cnt];j++)\n        for(int i=1;i+(1<<j)-1<=cnt;i++)\n            st[i][j]=dmin(st[i][j-1],st[i+(1<<j-1)][j-1]);\n}\nint LCA(int x,int y)\n{\n    // x=dfn[x],y=dfn[y];\n    if(x>y)swap(x,y);\n    int k=Log[y-x+1];\n    return dmin(st[x][k],st[y-(1<<k)+1][k]);\n}//ST\u8868\n\nvoid pushup(int x)\n{\n    tr[x].minx=min(tr[x<<1].minx,tr[x<<1|1].minx);\n    tr[x].maxx=max(tr[x<<1].maxx,tr[x<<1|1].maxx);\n}\nvoid build(int x,int l,int r)\n{\n    tr[x].l=l,tr[x].r=r;\n    if(l==r)\n    {\n        tr[x].minx=tr[x].maxx=dfn[l];\n        return ;\n    }\n    int mid=l+r>>1;\n    build(x<<1,l,mid);\n    build(x<<1|1,mid+1,r);\n    pushup(x);\n}\nint QueryMin(int x,int l,int r)\n{\n    if(tr[x].l>=l&&tr[x].r<=r)\n        return tr[x].minx;\n    int mid=tr[x].l+tr[x].r>>1,res=INF;\n    if(l<=mid)res=min(res,QueryMin(x<<1,l,r));\n    if(r>mid)res=min(res,QueryMin(x<<1|1,l,r));\n    return res;\n}\nint QueryMax(int x,int l,int r)\n{\n    if(tr[x].l>=l&&tr[x].r<=r)\n        return tr[x].maxx;\n    int mid=tr[x].l+tr[x].r>>1,res=0;\n    if(l<=mid)res=max(res,QueryMax(x<<1,l,r));\n    if(r>mid)res=max(res,QueryMax(x<<1|1,l,r));\n    return res;\n}\nvoid modify(int x,int pos,int k)\n{\n    if(tr[x].l==tr[x].r)\n    {\n        tr[x].minx=tr[x].maxx=k;\n        return ;\n    }\n    int mid=tr[x].l+tr[x].r>>1;\n    if(pos<=mid)modify(x<<1,pos,k);\n    else modify(x<<1|1,pos,k);\n    pushup(x);\n}//SegmentTree\nint main()\n{\n    read(n,q);\n    for(int i=2;i<=n;i++)\n    {\n        int fa;\n        read(fa);\n        add(fa,i);\n    }\n    dfs(1,0);\n    build_st();\n    build(1,1,n);\n    for(int i=1;i<=q;i++)\n    {\n        int l,r;\n        read(l,r);\n        int ans1=QueryMin(1,l,r),ans2=QueryMax(1,l,r);\n        int res1,res2,lca1,lca2;\n        //\u6ce8\u610f\u5206\u6e05\u695a\u662f\u6b27\u62c9\u5e8f\u8fd8\u662f\u8282\u70b9\u672c\u8eab\u5e8f\u53f7\n        modify(1,st[ans1][0],INF);\n        res1=QueryMin(1,l,r);\n        modify(1,st[ans1][0],ans1);\n        lca1=LCA(res1,ans2);\n        //\u5c06\u8be5\u70b9\u5220\u53bb\uff0c\u7136\u540e\u6c42\u533a\u95f4LCA\uff0c\u6700\u540e\u8fd8\u539f\uff0c\u4e0b\u9762\u540c\u7406\n        modify(1,st[ans2][0],0);\n        res2=QueryMax(1,l,r);\n        modify(1,st[ans2][0],ans2);\n        lca2=LCA(res2,ans1);\n\n        if(d[lca1]>=d[lca2])\n            printf(\"%d %d\\n\",st[ans1][0],d[lca1]-1);\n        else printf(\"%d %d\\n\",st[ans2][0],d[lca2]-1);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1660132528,
        "uid": 109659,
        "name": "KevinLive",
        "ccfLevel": 0,
        "title": "CF1062E Company"
    },
    {
        "content": "\n## \u601d\u8003\n\n\u6700\u91cd\u8981\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u6211\u4eec\u5220\u53bb\u54ea\u4e2a\u70b9\u540e\uff0c\u5269\u4e0b\u70b9\u7684\u516c\u5171 $LCA$ \u6df1\u5ea6\u6700\u5927\uff0c\u5373\u5982\u4f55\u786e\u5b9a\u8fd9\u4e2a\u70b9\u3002\u6211\u4eec\u611f\u6027\u7684\u89c2\u5bdf\u548c\u7406\u6027\u7684\u5206\u6790\u4e4b\u540e\uff0c\u53d1\u73b0\u548c\u70b9\u7684 $dfn$ \u5e8f\u6709\u5173\u7cfb\uff0c\u8981\u4e48\u5220\u53bb\u5f53\u524d\u533a\u95f4\u70b9 $dfn$ \u6700\u5927\u7684\uff0c\u8981\u4e48\u5220\u6700\u5c0f\u7684\u3002\n\n\u5982\u679c\u5f97\u51fa\u4e0a\u9762\u90a3\u4e2a\u7ed3\u8bba\u5c31\u597d\u529e\u4e86\uff0c\u62ff\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4 $dfn$ \u7684\u6700\u5927\u548c\u6700\u5c0f\u503c\uff0c\u9009\u62e9\u662f\u5220 $dfn$ \u6700\u5927\u7684\u70b9\u8fd8\u662f\u6700\u5c0f\u7684\u70b9\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define ls(pos) pos << 1\n#define rs(pos) pos << 1 | 1\nusing namespace std;\nconst int N = 100010;\nconst int M = 100010;\nstruct node{\n    int nxt, to;\n}edge[M << 1];\nint head[N], num;\nvoid build(int from, int to){\n    edge[++num].nxt = head[from];\n    edge[num].to = to;\n    head[from] = num;\n}\nint dfn[N], cnt, f[N][20], rev[N], d[N], n, q;\nnamespace Seg{\n    int Max[N << 2], Min[N << 2];\n    void pushup(int pos){\n        Max[pos] = max( Max[ls(pos)], Max[rs(pos)] );\n        Min[pos] = min( Min[ls(pos)], Min[rs(pos)] );\n    }\n    void build(int pos, int l, int r){\n        if(l == r){\n            Max[pos] = Min[pos] = dfn[l];\n            return;\n        }\n        int mid = (l + r) >> 1;\n        build(ls(pos), l, mid);\n        build(rs(pos), mid+1, r);\n        pushup(pos);\n    }\n    void modify(int pos, int l, int r, int x, int v){\n        if(l == r && l == x){\n            Max[pos] = max(Max[pos], v);\n            Min[pos] = min(Min[pos], v);\n            return;\n        }\n        int mid = (l + r) >> 1;\n        if(x <= mid) modify(ls(pos), l, mid, x, v);\n        else modify(rs(pos), mid+1, r, x, v);\n        pushup(pos);\n    }\n    int QMAX(int pos, int l, int r, int x, int y){\n        int ans = 0;\n        if(l > y || r < x) return 0;\n        if(x <= l && r <= y) return Max[pos];\n        int mid = (l + r) >> 1;\n        if(x <= mid) ans = max(ans, QMAX(ls(pos), l, mid, x, y));\n        if(y > mid) ans = max(ans, QMAX(rs(pos), mid+1, r, x, y));\n        return ans;\n    }\n    int QMIN(int pos, int l, int r, int x, int y){\n        int ans = 0x3f3f3f3f;\n        if(l > y || r < x) return 0x3f3f3f3f;\n        if(x <= l && r <= y) return Min[pos];\n        int mid = (l + r) >> 1;\n        if(x <= mid) ans = min(ans, QMIN(ls(pos), l, mid, x, y));\n        if(y > mid) ans = min(ans, QMIN(rs(pos), mid+1, r, x, y));\n        return ans;\n    }\n}\nusing namespace Seg;\nvoid dfs(int u, int fa){\n    dfn[u] = ++cnt; rev[cnt] = u;\n    for(int i=head[u]; i; i=edge[i].nxt){\n        int v = edge[i].to;\n        if(v == fa) continue;\n        d[v] = d[u] + 1;\n        f[v][0] = u;\n        dfs(v, u);\n    }\n}\nint lca(int u, int v){\n    if(d[u] < d[v]) swap(u, v);\n    for(int i=18; i>=0; i--) if(d[f[u][i]] >= d[v]) u = f[u][i];\n    if(u == v) return u;\n    for(int i=18; i>=0; i--) if(f[u][i] != f[v][i]) u = f[u][i], v = f[v][i];\n    return f[u][0];\n}\nint main(){\n    cin >> n >> q;\n    for(int i=2; i<=n; i++){\n        int v; cin >> v;\n        build(i, v); build(v, i);\n    }\n    d[1] = 1;\n    dfs(1, 0);\n    build(1, 1, n);\n    for(int j=1; j<=18; j++)\n        for(int i=1; i<=n; i++) f[i][j] = f[f[i][j-1]][j-1];\n    while(q --){\n        int l, r, L, Lu, R, Ru, L2, L2u, R2, R2u, LCA1, LCA2;\n        int flag = 0;\n        cin >> l >> r;\n        L = QMIN(1, 1, n, l, r), R = QMAX(1, 1, n, l, r);\n        Lu = rev[L], Ru = rev[R];\n        L2 = min(QMIN(1, 1, n, l, Lu - 1), QMIN(1, 1, n, Lu + 1, r));\n        R2 = max(QMAX(1, 1, n, l, Ru - 1), QMAX(1, 1, n, Ru + 1, r));\n        L2u = rev[L2], R2u = rev[R2];\n        LCA1 = lca(Lu, R2u); LCA2 = lca(L2u, Ru);\n        if(d[LCA1] > d[LCA2]) flag = 1;\n        else flag = 0;\n        if(flag){\n            cout << Ru << \" \" << d[LCA1] - 1 << endl;\n        }\n        else cout << Lu << \" \" << d[LCA2] - 1 << endl;\n    }\n    return 0;\n}\n```\n\n\u5927\u6982\u731c\u51fa\u7b2c\u4e00\u4e2a\u7ed3\u8bba\u5c31\u597d\u505a\u4e86\u3002\n\n\n",
        "postTime": 1542728141,
        "uid": 60108,
        "name": "alecli",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1062E \u3010Company\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1062E)\n\n[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://chenyu-w.github.io/2022/11/02/CF1062E%20Company/)\n\n## \u524d\u8a00\n\n\u611f\u89c9\u662f\u4e2a\u633a\u725b\u903c\u7684 trick\uff0c\u5199\u7bc7\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\u3002\n\n### \u524d\u7f6e\u829d\u58eb\n\nLCA\uff0c\u7ebf\u6bb5\u6811\u3002\n\n\n## \u5206\u6790\n\n\u89c2\u5bdf\u5230\u8fd9\u9898\u51fa\u73b0\u4e86\u591a\u4e2a\u70b9\u7684 LCA\uff0c\u6211\u4eec\u5e76\u4e0d\u662f\u5f88\u719f\u6089\uff0c\u6240\u4ee5\u5c1d\u8bd5\u5bf9\u5176\u8fdb\u884c\u8f6c\u5316\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u6709\u4e00\u4e2a\u6700\u5173\u952e\u7684\u7ed3\u8bba\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u96c6 $S$\uff0c\u4ee4 $u$ \u4e3a $S$ \u4e2d dfs \u5e8f\u6700\u5927\u7684\u8282\u70b9\uff0c $v$ \u4e3a $S$ \u4e2d dfs \u5e8f\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6709 $LCA(S) = LCA(u, v)$\u3002\n\n\u8bc1\u660e\u7684\u8fc7\u7a0b\u76f8\u5f53\u7b80\u5355\uff0c\u6211\u4eec\u8bbe\u8fd9\u4e2a\u70b9\u96c6\u7684 $LCA$ \u4e3a $p$\uff0c\u90a3\u4e48\u663e\u7136\u6709 $S \\subseteq subtree(p)$\uff0c\u800c\u7531 dfs \u5e8f\u7684\u77e5\u8bc6\u5f97\u5230 $subtree$ \u4e2d\u5b50\u8282\u70b9\u7684 dfs \u5e8f\u90fd\u5728 $[dfn_p,  dfn_p + size_p - 1]$ \u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u6709 $\\forall i \\in S\uff0cdfn_i \\in [dfn_p, dfn_p + sisze_p - 1]$\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u5982\u679c\u628a dfs \u5e8f\u6392\u5728\u4e2d\u95f4\u7684\u70b9\u5ffd\u7565\uff0c\u5e76\u4e0d\u4f1a\u5bf9 $[dfn_p, dfn_p + size_p - 1]$ \u8fd9\u4e2a\u8303\u56f4\u4ea7\u751f\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 LCA \u53ea\u548c $u, v$ \u6709\u5173\uff0c\u5373 $LCA(S) = LCA(u, v)$\u3002\n\n\u77e5\u9053\u4e86\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u8fd9\u9053\u9898\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u533a\u95f4 LCA \u7684\u677f\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5404\u79cd RMQ \u6c42\u51fa\u6765 $[l, r]$ \u4e2d\u6700\u5927/\u6700\u5c0f\u7684 dfs \u5e8f\uff0c\u7136\u540e\u6bd4\u8f83\u4e00\u4e0b\u5220\u53bb\u7684 LCA \u6df1\u5ea6\uff0c\u90a3\u4e48\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\u3002\u5177\u4f53\u505a\u6cd5\u662f\uff0c\u5982\u679c\u5f53\u524d\u5220\u6389\u4e86\u70b9 $x$\uff0c\u90a3\u4e48\u540e\u6765\u7684 LCA \u5c31\u662f $LCA(LCA(l, x - 1), LCA(x + 1, r))$\uff0c\u533a\u95f4 LCA \u7528 \u7ebf\u6bb5\u6811\u6216 st\u8868\u8fdb\u884c\u7ef4\u62a4\uff0c\u6211\u5199\u7684\u662f\u7ebf\u6bb5\u6811\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\log^2n)$\u3002\n\n## \u4ee3\u7801\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int N = 1e5 + 10;\nint h[N], e[N << 1], ne[N << 1], idx;\nint dep[N], f[N][25], dfn[N], rk[N], tt;\nstruct node\n{\n    int l, r, max, min, lca;\n} t[N << 2];\n\ninline int read()\n{\n    int x = 0, y = 1; char c = getchar();\n    while (c < '0' || c > '9') {if (c == '-') y = -1; c = getchar();}\n    while (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n    return x * y;\n}\n\ninline void add(int a, int b)\n{\n    e[idx] = b, ne[idx] = h[a], h[a] = idx++;\n}\n\ninline void dfs(int u, int p)\n{\n    dep[u] = dep[p] + 1, f[u][0] = p, dfn[u] = ++tt, rk[tt] = u;\n    for (int i = 1; i <= 20; i++)\n        f[u][i] = f[f[u][i - 1]][i - 1];\n    for (int i = h[u]; ~i; i = ne[i])\n    {\n        int v = e[i];\n        if (v == p) continue;\n        dfs(v, u);\n    }\n}\n\ninline int lca(int x, int y)\n{\n    if (dep[x] < dep[y]) swap(x, y);\n    for (int i = 20; i >= 0; i--)\n        if (dep[f[x][i]] >= dep[y])\n            x = f[x][i];\n    if (x == y) return x;\n    for (int i = 20; i >= 0; i--)\n        if (f[x][i] != f[y][i])\n            x = f[x][i], y = f[y][i];\n    return f[x][0];\n}\n\ninline void pushup(int p)\n{\n    t[p].lca = lca(t[p << 1].lca, t[p << 1 | 1].lca);\n    t[p].max = max(t[p << 1].max, t[p << 1 | 1].max);\n    t[p].min = min(t[p << 1].min, t[p << 1 | 1].min);\n}\n\ninline void build(int p, int l, int r)\n{\n    t[p].l = l, t[p].r = r;\n    if (l == r)\n    {\n        t[p].max = t[p].min = dfn[l];\n        t[p].lca = l;\n        return;\n    }\n    int mid = (l + r) >> 1;\n    build(p << 1, l, mid);\n    build(p << 1 | 1, mid + 1, r);\n    pushup(p);\n}\n\ninline int query_lca(int p, int l, int r)\n{\n    if (l <= t[p].l && t[p].r <= r) return t[p].lca;\n    int mid = (t[p].l + t[p].r) >> 1;\n    if (l > mid) return query_lca(p << 1 | 1, l, r);\n    if (r <= mid) return query_lca(p << 1, l, r);\n    else return lca(query_lca(p << 1, l, r), query_lca(p << 1 | 1, l, r));\n}\n\ninline int query_max(int p, int l, int r)\n{\n    if (l <= t[p].l && t[p].r <= r) return t[p].max;\n    int mid = (t[p].l + t[p].r) >> 1, res = 0;\n    if (l <= mid) res = max(res, query_max(p << 1, l, r));\n    if (r > mid) res = max(res, query_max(p << 1 | 1, l, r));\n    return res;\n}\n\ninline int query_min(int p, int l, int r)\n{\n    if (l <= t[p].l && t[p].r <= r) return t[p].min;\n    int mid = (t[p].l + t[p].r) >> 1, res = 1 << 30;\n    if (l <= mid) res = min(res, query_min(p << 1, l, r));\n    if (r > mid) res = min(res, query_min(p << 1 | 1, l, r));\n    return res;\n}\n\nint main()\n{\n    memset(h, -1, sizeof h);\n    int n = read(), m = read();\n    for (int i = 2; i <= n; i++)\n    {\n        int x = read();\n        add(x, i);\n        add(i, x);\n    }\n    dfs(1, 0);\n    build(1, 1, n);\n    while (m--)\n    {\n        int l = read(), r = read();\n        int maxx = query_max(1, l, r), minn = query_min(1, l, r);\n        int lca_max = rk[maxx] == l ? query_lca(1, l + 1, r) : (rk[maxx] == r ? query_lca(1, l, r - 1) : lca(query_lca(1, l, rk[maxx] - 1), query_lca(1, rk[maxx] + 1, r)));\n        int lca_min = rk[minn] == l ? query_lca(1, l + 1, r) : (rk[minn] == r ? query_lca(1, l, r - 1) : lca(query_lca(1, l, rk[minn] - 1), query_lca(1, rk[minn] + 1, r)));\n        printf(\"%d %d\\n\", dep[lca_max] > dep[lca_min] ? rk[maxx] : rk[minn], max(dep[lca_max], dep[lca_min]) - 1);\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1667395517,
        "uid": 587248,
        "name": "wcywcywcywcy",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF1062E"
    },
    {
        "content": "[\u535a\u5ba2\u56ed\u67e5\u770b](https://www.cnblogs.com/AIskeleton/p/16825856.html)\n\n$* \\text{Defficulty:} \\color{Gold}{2300}$\n\n## Description\n\n\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6709 $q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4 $[l,r]$\u3002\n\n\u8981\u6c42\u5728\u7f16\u53f7\u5728 $[l,r]$ \u8303\u56f4\u5185\u7684\u70b9\u5185\u5220\u6389\u4e00\u4e2a\u70b9\u540e\u5269\u4f59\u70b9\u7684 LCA \u6df1\u5ea6\u6700\u5927\u3002\n\n\u6c42\u5220\u6389\u70b9\u7684\u7f16\u53f7\u548c\u6b64\u65f6 LCA \u7684\u6700\u5927\u6df1\u5ea6\u3002\n\n## Solution\n\n\u9996\u5148\uff0c\u8981\u505a\u8fd9\u9898\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6027\u8d28\uff1a\u4e00\u90e8\u5206\u8282\u70b9\u7684 LCA \u4e00\u5b9a\u662f\u5176\u4e2d dfs \u5e8f\u6700\u5927\u548c\u6700\u5c0f\u7684\u70b9\u7684 LCA\u3002\n\n### proof\n\n\u8bbe\u70b9 $i$ \u7684 dfs \u5e8f\u4e3a $id_i$\uff0c$id'_u=\\max{id_v}$\uff0c\u67d0\u4e2a\u533a\u95f4\u7684 dfs \u5e8f\u6700\u503c\u6240\u5728\u70b9\u5206\u522b\u4e3a $u,v$\uff0c\u5176 LCA \u4e3a $l$\u3002\n\n\u663e\u7136\u6709 $id_l \\le id_v \\le id_u \\le id'_l$\u3002\n\n\u5bf9\u4e8e $\\forall x \\in [l,r]$\uff0c$id_v \\le id_x \\le id_u \\implies id_l \\le id_x \\le id'_r \\implies l$ \u662f\u70b9 $x$ \u7684\u7956\u5148\u3002\n\n\u6240\u4ee5\uff0c\u88ab\u5220\u53bb\u7684\u8282\u70b9\u8981\u4e48\u662f $u$\uff0c\u8981\u4e48\u662f $v$\u3002\n\nQ.E.D\n\n-----\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u5220\u53bb\u7684\u8282\u70b9\u662f $u$ \u548c $v$ \u7684\u60c5\u51b5\u4e0b\u7684 LCA\uff0c\u53d6\u5176\u4e2d\u66f4\u5927\u7684\u503c\u5373\u53ef\u3002\n\n\u533a\u95f4\u7684 dfs \u5e8f\u6700\u503c\uff0c\u53ef\u4ee5\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\uff0c\u6bd4\u5982\u7ebf\u6bb5\u6811\uff0cST \u8868\u7b49\u3002\n\n\u5047\u8bbe\u5220\u53bb\u4e86\u8282\u70b9 $u$\uff0c\u67e5\u8be2\u5c31\u4f1a\u88ab\u5206\u6210 $[l,u-1]$ \u548c $[u+1,r]$ \u4e24\u90e8\u5206\u3002\n\n\u90a3\u5c31\u5206\u522b\u6c42\u51fa\u8fd9\u4e24\u90e8\u5206\u7684 LCA\uff0c\u518d\u53d6\u8fd9\u4e24\u90e8\u5206\u7684 LCA \u7684 LCA \u4f5c\u4e3a\u5220\u53bb $u$ \u65f6\u7684\u7b54\u6848\uff0c$v$ \u4e5f\u540c\u7406\u3002\n\n\u6ce8\u610f\u8fd9\u91cc\u8981\u7279\u5224\u4e00\u4e0b\uff0c\u5982\u679c $u,v$ \u521a\u597d\u5c31\u662f $l$ \u6216 $r$\uff0c\u5c31\u53ea\u5269\u4e00\u4e2a\u90e8\u5206\uff0c\u76f4\u63a5\u8fd4\u56de\u5176 LCA \u5373\u53ef\u3002\n\n\u6c42 LCA \u53ef\u4ee5\u7528\u9664\u4e86\u66b4\u529b\u5916\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6b64\u9898\u8981\u7528\u5230 dfs \u5e8f\uff0c\u6240\u4ee5\u7b14\u8005\u4f7f\u7528\u4e86\u6bd4\u8f83\u51b7\u95e8\u7684 dfs \u5e8f\u6c42 LCA\u3002\n\n\u5177\u4f53\u7ec6\u8282\u53c2\u7167\u4ee3\u7801\u3002\n\n**\u65f6\u95f4\u590d\u6742\u5ea6\uff1a**$O((n+q) \\log_2 n)$\n\n## code\n\n```cpp\n/*******************************\n| Author:  A.I.skeleton\n| Problem: E. Company\n| Contest: Codeforces Round #520 (Div. 2)\n| URL:     https://codeforces.com/contest/1062/problem/E\n| When:    2022-10-25 14:25:10\n| \n| Memory:  256 MB\n| Time:    2000 ms\n*******************************/\n#include <bits/stdc++.h>\nusing namespace std;\n#define lc p<<1\n#define rc p<<1|1\n#define F(i) (i).first\n#define S(i) (i).second\n#define pb push_back\n#define vi vector<int>\n#define pi pair<int,int>\n#define L(i,j,k) for(int (i)=(j);i<=(k);(i)++)\n#define R(i,j,k) for(int (i)=(j);i>=(k);(i)--)\n#define FST ios::sync_with_stdio(0);cin.tie(0);\n\nconst int N=1e5+100,INF=1e9;\nint n,q,p,lg[N],cn,id[N],d[N]={-1},st[19][N];\nvi g[N];int si[N],h[N],t[N],l,r;\n\nstruct se{int l,r;pi ma,mi;}s[N<<2];\nvoid pp(int p){\n  s[p].ma=max(s[lc].ma,s[rc].ma);\n  s[p].mi=min(s[lc].mi,s[rc].mi);\n}void build(int p,int l,int r){\n  s[p].l=l;s[p].r=r;\n  if(l==r) return ;\n  int m=(l+r)>>1;build(lc,l,m);build(rc,m+1,r);\n}void change(int p,int x,int k){\n  if(s[p].l>x||x>s[p].r) return;\n  if(s[p].l==s[p].r){\n    S(s[p].mi)=S(s[p].ma)=s[p].l;\n    F(s[p].mi)=F(s[p].ma)=k;return ;\n  }int m=(s[p].l+s[p].r)>>1;\n  change(lc,x,k);change(rc,x,k);pp(p);\n}pi askmi(int p,int l,int r){\n  if(s[p].l>r||l>s[p].r) return {INF,0};\n  if(l<=s[p].l&&s[p].r<=r) return s[p].mi;\n  return min(askmi(lc,l,r),askmi(rc,l,r));\n}pi askma(int p,int l,int r){\n  if(s[p].l>r||l>s[p].r) return {-INF,0};\n  if(l<=s[p].l&&s[p].r<=r) return s[p].ma;\n  return max(askma(lc,l,r),askma(rc,l,r));\n}int get(int x,int y){return d[x]<d[y]?x:y;}\nvoid dfs(int u,int f){\n  st[0][id[u]=++cn]=f;change(1,u,id[u]);\n  d[u]=d[f]+1;for(int v:g[u]) if(v^f) dfs(v,u);\n}int lca(int u,int v){\n  if(u==v) return u;if((u=id[u])>(v=id[v])) swap(u,v);\n  int d=lg[v-u++];return get(st[d][u],st[d][v-(1<<d)+1]);\n}int sol(int l,int r,int cnt){\n  if(cnt==l) return lca(S(askma(1,l+1,r)),S(askmi(1,l+1,r)));\n  else if(cnt==r) return lca(S(askma(1,l,r-1)),S(askmi(1,l,r-1)));\n  else return lca(lca(S(askma(1,l,cnt-1)),S(askmi(1,l,cnt-1))),\n        lca(S(askma(1,cnt+1,r)),S(askmi(1,cnt+1,r))));\n}int main(){\n  FST;cin>>n>>q;L(i,2,n) lg[i]=lg[i>>1]+1;build(1,1,n);\n  L(i,2,n) cin>>p,g[p].pb(i),g[i].pb(p);dfs(1,0);\n  L(i,1,lg[n]) L(j,1,(n+1-(1<<i)))\n    st[i][j]=get(st[i-1][j],st[i-1][j+(1<<i-1)]);\n  L(i,1,q){\n    cin>>l>>r;\n    pi t1=askma(1,l,r),t2=askmi(1,l,r);\n    int l1=sol(l,r,S(t1)),l2=sol(l,r,S(t2));\n    if(d[l1]>d[l2]) cout<<S(t1)<<' '<<d[l1]<<'\\n';\n    else cout<<S(t2)<<' '<<d[l2]<<'\\n';\n  }\n}\n```\n\n\u76ee\u524d\u662f\u6d1b\u8c37\u6700\u4f18\u89e3\u3002\n",
        "postTime": 1666693407,
        "uid": 540715,
        "name": "A_I_Skeleton",
        "ccfLevel": 0,
        "title": "CF1062E"
    },
    {
        "content": "~~**1\u904dA\u8d85\u5f00\u5fc3\u7684**\uff08\u5927\u96fe\uff09~~\n\n\u7b2c\u4e00\u773c\u770b\u5230\u8fd9\u9053\u9898\u6beb\u65e0\u5934\u7eea\uff0c\u89c9\u5f97\u662f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4lca\uff0c\u7136\u540e\u5728\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\uff1f\n\n\u7136\u800c\u5e76\u6ca1\u6709\u8bd5\u8fc7\uff08\u6ed1\u7a3d\uff09\u3002\n\n\u4f46\u4ed4\u7ec6\u627e\u627e\uff0c\u8fd8\u662f\u80fd\u627e\u5230\u4e00\u4e9b\u6027\u8d28\u7684\n![](https://s1.ax1x.com/2018/11/23/FiBGoq.png)\n\n\u5bf9\u4e8e\u8fd9\u4e48\u7684\u4e00\u68f5\u6811\uff0c\u5f53\u533a\u95f4\u4e3a**[3,6]**\u65f6\uff0c**dfs\u5e8f\u6700\u5c0f\u7684\u70b9\u4e3a3\uff0c\u6700\u5927\u7684\u70b9\u4e3a4**\uff0c\u5b83\u4eec\u7684lca\u4e3a2\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c**\u5f53\u5220\u96645\u53f7\u70b9\u62166\u53f7\u70b9\u65f6\uff0c\u8fd9\u4e2a\u533a\u95f4\u7684lca\u65f6\u4e0d\u53d8\u7684**\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u5728**3\u548c4\u7684lca\u7684\u5b50\u6811\u4e2d**\u3002\n\n\u5f53\u6211\u518d\u627e\u4e86\u51e0\u4e2a\u533a\u95f4\u4e4b\u540e\uff0c\u53d1\u73b0\u90fd\u662f\u8fd9\u6837\u7684\uff0c\u7136\u540e\u6211\u5c31\u4ea7\u751f\u4e86\u4e00\u4e2a\u60f3\u6cd5\uff0c**\u4e00\u4e2a\u533a\u95f4\u7684lca**\u5c31\u662f**\u533a\u95f4dfs\u5e8f\u6700\u5c0f\u7684\u70b9\u548cdfs\u6700\u5927\u7684\u70b9\u7684lca**\u3002\n\n\u7136\u540e\u6211\u53d1\u73b0\u8fd9\u4e2a\u6027\u8d28\u53ef\u4ee5\u7528**\u6253\u8868**\u6216\u8005\u7528**rmq\u548clca\u95ee\u9898\u4e4b\u95f4\u7684\u8f6c\u5316**\u6765\u627e\u5230\n\n\u6211\u4eec\u5148\u60f3\u60f3\u6211\u4eec\u662f\u600e\u4e48**\u628alca\u8f6c\u5316\u6210rmq\u95ee\u9898**\u7684\u3002\uff08\u4f1a\u7684\u540c\u5b66\u53ef\u4ee5\u8df3\u8fc7\uff09\n\n\u5047\u8bbe\u6211\u4eec\u8981\u6c42\u6811\u4e0a\u7ed3\u70b9x\u548cy\u7684lca\u3002\n\n- 1.\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684**\u6b27\u62c9\u5e8f**\u548c**\u6df1\u5ea6**\u3002\n\n- 2.\u8bb0\u5f55\u7ed3\u70b9u\u5728\u6b27\u62c9\u5e8f\u5217\u4e2d**\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e3apos(u)**\n\n- 3.\u6839\u636edfs\u7684\u6027\u8d28\uff0c\u5bf9\u4e8e\u4e24\u7ed3\u70b9u\u3001v\uff0c\u4ece**pos(u)\u904d\u5386\u5230pos(v)\u7684\u8fc7\u7a0b\u4e2d\u7ecf\u8fc7LCA(u,v)\u6709\u4e14\u4ec5\u6709\u4e00\u6b21**\uff0c\u4e14\u6df1\u5ea6\u662f**\u6df1\u5ea6\u5e8f\u5217dep[pos(u)\u2026pos(v)]\u4e2d\u6700\u5c0f\u7684**\u3002\n\n- 4.\u6c42\u51fapos(x)\u5230pos(y)\u8fd9\u6bb5\u533a\u95f4\u4e2d\u6700\u5c0f\u7684\u6df1\u5ea6\u7684\u4f4d\u7f6e\u3002\n\n\u5982\u679c\u6211\u4eec\u8981\u6c42**[l,r]\u8fd9\u6bb5\u533a\u95f4\u7684lca**\uff0c\u627e\u5230**\u6b27\u62c9\u5e8f\u6700\u5c0f\u7684\u70b9x**\u548c**\u6b27\u62c9\u5e8f\u6700\u5927\u7684\u70b9y**\n\n\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u7684lca\u5c31\u662f**pos(x)\u5230pos(y)\u4e2d\u6700\u5c0f\u6df1\u5ea6\u7684\u4f4d\u7f6e**\u3002\n\n\u90a3\u6211\u4eec\u518d\u5728[l,r]\u8fd9\u6bb5\u533a\u95f4\u4e2d\u4efb\u610f\u627e\u4e00\u5bf9\u70b9(x',y')\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\n\n**pos(x)\u2264pos(x')\u4e14pos(y')\u2265pos(y)**\uff0c\u4e5f\u5c31\u662f\u8bf4**[pos(x'),pos(y')]**\u8fd9\u6bb5\u533a\u95f4\uff0c\u88ab\u4e4b\u524d\u7684**[pos(x),pos(y)]**\u8fd9\u6bb5\u533a\u95f4**\u5b8c\u5168\u5305\u542b**\u4e86\u3002\n\n\u65e2\u7136\u5b8c\u5168\u5305\u542b\uff0c\u90a3\u4e48\u663e\u7136**dep[lca(x,y)]\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8edep[lca(x',y')]**\uff0c\u518d\u4ed4\u7ec6\u60f3\u60f3\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0**lca(x',y')\u5728lca(x,y)\u7684\u5b50\u6811\u4e2d**\u3002\n\n\u6240\u4ee5\uff0c\u8981\u5220\u9664\u70b9\uff0c\u5c31\u8981\u5220**\u4f1a\u5bf9\u533a\u95f4lca\u4ea7\u751f\u5f71\u54cd\u7684\u70b9**\uff0c\u4e5f\u5c31\u662f**dfs\u5e8f\u6700\u5927\u7684\u70b9\u548cdfs\u5e8f\u6700\u5c0f\u7684\u70b9**\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,x,y) for (register int i=(x);i<=(y);i++)\n#define drp(i,x,y) for (register int i=(x);i>=(y);i--)\n#define travel(i,x) for (register int i=head[x];i;i=e[i].nxt)\ninline char read(){\n\tstatic const int IN_LEN=1000000;\n\tstatic char buf[IN_LEN],*s,*t;\n\treturn (s==t?t=(s=buf)+fread(buf,1,IN_LEN,stdin),(s==t?-1:*s++):*s++);\n}\ntemplate<class T>\ninline void read(T &x){\n\tstatic bool iosig;\n\tstatic char c;\n\tfor (iosig=false,c=read();!isdigit(c);c=read()){\n\t\tif (c=='-') iosig=true;\n\t\tif (c==-1) return;\n\t}\n\tfor (x=0;isdigit(c);c=read()) x=((x+(x<<2))<<1)+(c^'0');\n\tif (iosig) x=-x;\n}\nconst int OUT_LEN=10000000;\nchar obuf[OUT_LEN],*ooh=obuf;\ninline void print(char c){\n\tif (ooh==obuf+OUT_LEN) fwrite(obuf,1,OUT_LEN,stdout),ooh=obuf;\n\t*ooh++=c;\n}\ntemplate<class T>\ninline void print(T x){\n\tstatic int buf[30],cnt;\n\tif (x==0) print('0');\n\telse{\n\t\tif (x<0) print('-'),x=-x;\n\t\tfor (cnt=0;x;x/=10) buf[++cnt]=x%10+48;\n\t\twhile (cnt) print((char)buf[cnt--]);\n\t}\n}\ninline void flush(){\n\tfwrite(obuf,1,ooh-obuf,stdout);\n}\nvoid judge(){\n\tfreopen(\"data.in\",\"r\",stdin);\n\tfreopen(\"data.out\",\"w\",stdout);\n}\nconst int N=110000;\nint n,Q,dfn[N],dep[N],f[20][N],mxpos[20][N],Max[20][N],alb[N],cnt,Min[20][N],mnpos[20][N];\nstruct info{\n\tint to,nxt;\n}e[N<<1];\nint head[N],opt;\nvoid add(int x,int y){\n\te[++opt]=(info){y,head[x]};\n\thead[x]=opt;\n}\nvoid dfs(int u){\n\tdfn[u]=++cnt; dep[u]=dep[f[0][u]]+1;\n\ttravel(i,u){\n\t\tint k=e[i].to;\n\t\tif (k==f[0][u]) continue;\n\t\tf[0][k]=u; dfs(k);\n\t}\n}\nint lca(int x,int y){\n\tif (dep[x]<dep[y]) swap(x,y);\n\tdrp(i,18,0) if (dep[f[i][x]]>=dep[y]) x=f[i][x];\n\tif (x==y) return dep[x];\n\tdrp(i,18,0) if (f[i][x]!=f[i][y]){\n\t\tx=f[i][x]; y=f[i][y];\n\t}\n\treturn dep[f[0][x]];\n}\nvoid init(){\n\trep(i,2,n) alb[i]=alb[i>>1]+1;\n\trep(i,1,18) rep(j,1,n) f[i][j]=f[i-1][f[i-1][j]];\n\trep(i,1,n) Max[0][i]=Min[0][i]=dfn[i],mxpos[0][i]=mnpos[0][i]=i;\n\trep(i,1,18){\n\t\tfor (int j=1;j+(1<<i)-1<=n;j++){\n\t\t\tMax[i][j]=max(Max[i-1][j],Max[i-1][j+(1<<(i-1))]);\n\t\t\tif (Max[i-1][j]>Max[i-1][j+(1<<(i-1))]) mxpos[i][j]=mxpos[i-1][j];\n\t\t\telse mxpos[i][j]=mxpos[i-1][j+(1<<(i-1))];\n\t\t\tMin[i][j]=min(Min[i-1][j],Min[i-1][j+(1<<(i-1))]);\n\t\t\tif (Min[i-1][j]<Min[i-1][j+(1<<(i-1))]) mnpos[i][j]=mnpos[i-1][j];\n\t\t\telse mnpos[i][j]=mnpos[i-1][j+(1<<(i-1))];\n\t\t}\n\t}\n}\n#define pii pair<int,int>\n#define mk make_pair\n#define fi first\n#define se second\nconst int inf=1<<30;\npii find_Max(int x,int y){\n\tif (x>y) return pii(-1,-1);\n\tint k=alb[y-x+1];\n\tint val=max(Max[k][x],Max[k][y-(1<<k)+1]),loc;\n\tif (Max[k][x]>Max[k][y-(1<<k)+1]) loc=mxpos[k][x];\n\telse loc=mxpos[k][y-(1<<k)+1];\n\treturn pii(val,loc);\n}\npii find_Min(int x,int y){\n\tif (x>y) return pii(inf,-1);\n\tint k=alb[y-x+1];\n\tint val=min(Min[k][x],Min[k][y-(1<<k)+1]),loc;\n\tif (Min[k][x]<Min[k][y-(1<<k)+1]) loc=mnpos[k][x];\n\telse loc=mnpos[k][y-(1<<k)+1];\n\treturn pii(val,loc);\n}\nint main(){\n\tjudge();\n\tread(n),read(Q);\n\trep(i,2,n){\n\t\tint x; read(x);\n\t\tadd(i,x),add(x,i);\n\t}\n\tdfs(1); init();\n\trep(i,1,Q){\n\t\tint id,l,r,ans1,ans2; read(l),read(r);\n\t\tpii t=find_Max(l,r),tt=find_Min(l,r);\n\t\tpii t1=find_Max(l,t.se-1),t2=find_Max(t.se+1,r);\n\t\tif (t1.fi>t2.fi) id=t1.se;\n\t\telse id=t2.se;\n\t\tans1=t.se; ans2=lca(id,tt.se);\n\t\tt=find_Min(l,r),tt=find_Max(l,r);\n\t\tt1=find_Min(l,t.se-1),t2=find_Min(t.se+1,r);\n\t\tif (t1.fi<t2.fi) id=t1.se;\n\t\telse id=t2.se;\n\t\tif (lca(id,tt.se)>ans2) ans1=t.se,ans2=lca(id,tt.se);\n\t\tprint(ans1),print(' '),print(ans2-1),print('\\n');\n\t}\n\treturn flush(),0;\n}\n```",
        "postTime": 1542957912,
        "uid": 23090,
        "name": "SaoFish",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1062E \u3010Company\u3011"
    }
]