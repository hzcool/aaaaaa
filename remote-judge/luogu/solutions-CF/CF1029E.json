[
    {
        "content": "\u4e00\u4e2a\u770b\u8d77\u6765\u5c31\u4e0d\u5bf9\u7684\u8d2a\u5fc3\u5c45\u7136\u662f\u6b63\u89e3...\n\n\u4f46\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\uff0c\u8fd9\u79cd\u8d2a\u5fc3\u5012\u7684\u786e\u627e\u4e0d\u5230\u53cd\u4f8b..\n\n\u8d2a\u5fc3\u601d\u60f3\uff1a\u6bcf\u6b21\u627e\u51fa\u79bb\u6839\u8282\u70b9\u6700\u8fdc\u7684\u70b9\uff0c\u7136\u540e\u7531\u6839\u8282\u70b9\u5411\u8fd9\u4e2a\u70b9\u7684\u7236\u8282\u70b9\u8fde\u8fb9\uff0c\u4e00\u76f4\u8fde\u5230\u6240\u6709\u70b9\u90fd\u80fd\u88ab\u8986\u76d6\u5373\u53ef\uff0c\u8fd9\u6837\u6784\u9020\u51fa\u7684\u4e00\u5b9a\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u6700\u4f18\u89e3\n\n\u6b63\u786e\u6027\u8bc1\u660e\uff08\u4e2a\u4ebaYY\uff09\uff1a\n\n\u4e3b\u8981\u662f\u8981\u8bc1\u660e\u8fd9\u79cd\u505a\u6cd5\u7684\u6700\u4f18\u6027\uff1a\n\n\u9996\u5148\uff0c\u7531\u4e8e\u6240\u6709\u70b9\u90fd\u8981\u6c42\u88ab\u8986\u76d6\uff0c\u81ea\u7136\u79bb\u6839\u8282\u70b9\u6700\u8fdc\u7684\u70b9\u4e5f\u4e0d\u4f8b\u5916\n\n\u90a3\u4e48\uff0c\u5982\u679c\u60f3\u8986\u76d6\u4e0a\u79bb\u6839\u8282\u70b9\u6700\u8fdc\u7684\u70b9\uff0c\u53ea\u4f1a\u6709\u4e24\u79cd\u8986\u76d6\u65b9\u6cd5\uff1a\u4e00\u79cd\u662f\u5c06\u6839\u8282\u70b9\u4e0e\u8fd9\u4e2a\u70b9\u672c\u8eab\u76f8\u8fde\uff0c\u53e6\u4e00\u79cd\u662f\u5c06\u6839\u8282\u70b9\u4e0e\u8fd9\u4e2a\u70b9\u7684\u7236\u8282\u70b9\u76f8\u8fde\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5c06\u6839\u8282\u70b9\u4e0e\u8fd9\u4e2a\u70b9\u7684\u7236\u8282\u70b9\u76f8\u8fde\uff0c\u8fd9\u6837\u7684\u65b9\u6848\u4e00\u5b9a\u4e0d\u4f1a\u5dee\n\n\u8bc1\u660e\uff1a\u5047\u8bbe\u8fd9\u4e2a\u7236\u8282\u70b9\u8fd8\u6709\u522b\u7684\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u4e0e\u7236\u8282\u70b9\u76f8\u8fde\u540e\u8fd9\u4e9b\u5b50\u8282\u70b9\u90fd\u80fd\u88ab\u8986\u76d6\uff0c\u8fd9\u6837\u4e00\u5b9a\u662f\u66f4\u4f18\u7684\n\n\u800c\u5373\u4f7f\u8fd9\u4e2a\u7236\u8282\u70b9\u6ca1\u6709\u522b\u7684\u5b50\u8282\u70b9\uff0c\u4ed6\u8fd8\u6709\u81ea\u5df1\u7684\u7236\u8282\u70b9\uff0c\u8fd9\u6837\u8fde\u8fb9\u4e5f\u80fd\u51cf\u5c11\u6839\u8282\u70b9\u4e0e\u4ed6\u7684\u7236\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u4e5f\u4f1a\u8fbe\u5230\u66f4\u597d\u7684\u6548\u679c\n\n\u5373\u4f7f\u4e0a\u9762\u4e24\u70b9\u90fd\u6ca1\u6709\u8d77\u4f5c\u7528\uff0c\u81f3\u5c11\u8fd9\u6837\u8fd8\u53ef\u4ee5\u8986\u76d6\u4e0a\u6700\u8fdc\u7684\u70b9\uff0c\u4e5f\u5e76\u4e0d\u4f1a\u4f7f\u4ee3\u4ef7\u589e\u5927\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u662f\u5b8c\u5168\u53ef\u884c\u7684\u3002\n\n\u8fd9\u6837\u5c31\u5b8c\u4e8b\u4e86\n\n\uff08ps\uff1a\u6811\u4e0abfs\u771f\u597d\u7528\uff09\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <stack>\nusing namespace std;\nstruct Edge\n{\n\tint next;\n\tint to;\n}edge[400005];\nbool used[200005];\nint head[200005];\nint f[200005];\nint n;\nint cnt=1;\nvoid init()\n{\n\tmemset(head,-1,sizeof(head));\n\tcnt=1;\n}\nvoid add(int l,int r)\n{\n\tedge[cnt].next=head[l];\n\tedge[cnt].to=r;\n\thead[l]=cnt++;\n}\nstruct node\n{\n\tint num;\n\tint dep;\n}p[200005];\nvoid bfs(int rt)\n{\n\tqueue <int> M;\n\tp[rt].dep=0;\n\tp[rt].num=rt;\n\tM.push(rt);\n\twhile(!M.empty())\n\t{\n\t\tint u=M.front();\n\t\tM.pop();\n\t\tfor(int i=head[u];i!=-1;i=edge[i].next)\n\t\t{\n\t\t\tint to=edge[i].to;\n\t\t\tif(p[to].dep)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tp[to].dep=p[u].dep+1;\n\t\t\tp[to].num=to;\n\t\t\tf[to]=u;\n\t\t\tM.push(to);\n\t\t\tif(p[to].dep<=2)\n\t\t\t{\n\t\t\t\tused[to]=1;\n\t\t\t}\n\t\t}\n\t}\n}\nbool cmp(node a,node b)\n{\n\treturn a.dep>b.dep;\n}\nint main()\n{\t\n\tscanf(\"%d\",&n);\n\tinit();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tbfs(1);\n\tsort(p+1,p+n+1,cmp);\n\tint ans=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(used[p[i].num])\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tans++;\n\t\tint u=f[p[i].num];\n\t\tused[u]=1;\n\t\tfor(int j=head[u];j!=-1;j=edge[j].next)\n\t\t{\n\t\t\tint to=edge[j].to;\n\t\t\tused[to]=1;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```",
        "postTime": 1540211088,
        "uid": 66905,
        "name": "leozhang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1029E \u3010Tree with Small Distances\u3011"
    },
    {
        "content": "\u4eca\u5929\u6a21\u62df\u8d5b\u7b2c\u4e00\u9898$CodeForces$\u539f\u9898\u6253\u6302\u4e86\uff0c\u7206\u4e86\u53ea\u5269$10$\u5206\n\n\u524d\u6392$orz$ @$jszjinshengzhi$\u8d2a\u5fc3\u79d2\u4e86\u6b64\u9898\n\n\u975e\u5e38\u81ea\u7136\u7684\u60f3\u6cd5\uff0c\u9996\u5148\u5efa\u4e2a\u5806\uff0c\u6bcf\u6b21\u628a\u6df1\u5ea6\u6700\u5927\u7684\u70b9\u53d6\u51fa\u6765\uff0c\u628a\u5b83\u5468\u56f4\u4e00\u5708\u90fd\u6807\u8bb0\u4e00\u4e0b\uff0c\u6253\u8fc7\u6807\u8bb0\u7684\u70b9\u5c31\u4e0d\u7528\u5f04\u4e86\n\n\u5f53\u7136\uff0c\u6df1\u5ea6$\\leq 2$\u7684\u70b9\u5c31\u4e0d\u7528\u52a0\u8fdb\u53bb\u4e86\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\ log\\ n)$\n\n$Code\\ Below:$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=200000+10;\nint n,head[maxn],to[maxn<<1],nxt[maxn<<1],tot;\nint dep[maxn],vis[maxn],dg[maxn],fa[maxn],ans;\n \npriority_queue<pair<int,int> > pq;\n\ninline int read(){\n    register int x=0,f=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n    while(isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n    return (f==1)?x:-x;\n}\ninline void add(int x,int y){\n    to[++tot]=y;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\n\nvoid dfs(int x,int f){\n    for(int i=head[x],y;i;i=nxt[i]){\n        y=to[i];\n        if(y==f) continue;\n        dep[y]=dep[x]+1;\n        fa[y]=x;\n        dfs(y,x);\n    }\n}\n\nint main()\n{\n    n=read();\n    int x,y;\n    for(int i=1;i<n;i++){\n        x=read(),y=read();\n        add(x,y);add(y,x);\n    }\n    dfs(1,0);\n    for(int i=1;i<=n;i++)\n        if(dep[i]>2) pq.push(make_pair(dep[i],i));\n    int u,v;\n    while(!pq.empty()){\n        u=pq.top().second,pq.pop();\n        if(vis[u]) continue;\n        u=fa[u];vis[u]=1;\n        for(int i=head[u];i;i=nxt[i])\n            vis[to[i]]=1;\n        ans++;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1540365591,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1029E \u3010Tree with Small Distances\u3011"
    },
    {
        "content": "\u6765\u4e00\u53d1\u7b80\u5355\u7684 DP \u505a\u6cd5\u3002\n\n\u6211\u6bd4\u8f83\u50bb\uff0c\u4e0d\u592a\u660e\u767d\u8fd9\u4e9b\u795e\u4ed9\u8d2a\u5fc3\u505a\u6cd5\uff0c\u600e\u4e48\u529e\u5462\uff1f\u6b38\u5176\u5b9e\u6709\u66f4\u52a0\u597d\u60f3\u7684 DP \u505a\u6cd5\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u5982\u679c\u5ffd\u7565\u6389\u6839\u8282\u70b9\u548c\u6839\u8282\u70b9\u4ee5\u4e0b\u6df1\u5ea6 $2$ \u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u8fde\u4e00\u6761\u8fb9\u5c31\u76f8\u5f53\u4e8e\u662f\u6807\u8bb0\u4e86\u4e00\u4e2a\u70b9\u3002\n\n\u6807\u8bb0\u4e86\u4e4b\u540e\uff0c\u5bf9\u4e8e\u4ed6\u7684\u7236\u4eb2\u513f\u5b50\uff0c\u4e5f\u5c31\u662f\u8ddd\u79bb\u4ed6 $1$ \u7684\u70b9\u90fd\u4f1a\u88ab\u8986\u76d6\u6389\u3002\n\n\u7136\u540e\u8fd9\u4e2a\u662f\u7ecf\u5178\u7684\u6811\u5f62 DP\uff0c\u975e\u5e38\u5957\u8def\u7684\u8bbe\u72b6\u6001\u662f $f_{i,0/1/2}$ \u8868\u793a\u4ed6\u88ab\u81ea\u5df1\u513f\u5b50\u7236\u4eb2\u8986\u76d6\u6389\u3002\n\n\u7136\u540e\u6211\u4eec\u5bf9\u4ed6\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\uff0c\u5bf9\u4e8e\u88ab\u81ea\u5df1\u8986\u76d6\u7684\uff0c\u5bf9\u4e8e\u513f\u5b50\u6765\u8bf4\uff0c\u6ca1\u5565\u5f71\u54cd\uff0c\u513f\u5b50\u53ef\u4ee5\u968f\u4fbf\u9009\u62e9\uff0c\u56e0\u6b64\u53d6\u6700\u5c0f\u7684\u90a3\u4e2a\u3002\n\n\u5bf9\u4e8e\u513f\u5b50\u8986\u76d6\u7684\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u53ea\u9700\u8981\u6709\u4e00\u4e2a\u513f\u5b50\u88ab\u6807\u8bb0\u5373\u53ef\uff0c\u8bbe\u513f\u5b50\u662f $v$\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u52a0\u4e0a\u7684\u5373\u4e3a $\\min(f_{v,0},f_{v,1})$\uff0c\u5982\u679c\u662f\u524d\u8005\u6700\u597d\uff0c\u8fd9\u6837\u76f4\u63a5\u88ab\u8986\u76d6\u4e86\uff0c\u5982\u679c\u662f\u540e\u8005\u7684\u8bdd\u5c31\u6709\u70b9\u5c0f\u9ebb\u70e6\uff0c\u6bcf\u6b21\u90fd\u51fa\u73b0\u540e\u8005\u7684\u8bdd\u5c31\u9009\u62e9\u4e00\u4e2a\u513f\u5b50\u4f7f\u5f97 $f_{v,0}$ \u548c $f_{v,1}$ \u7684\u5dee\u503c\u6700\u5c0f\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u7236\u4eb2\u8986\u76d6\u7684\uff0c\u90a3\u4e48\u513f\u5b50\u4e00\u5b9a\u8981\u88ab\u81ea\u5df1\u6216\u8005\u81ea\u5df1\u7684\u513f\u5b50\u8986\u76d6\u3002\n\n\u7136\u540e\u6211\u4eec\u518d\u6765\u8003\u8651\u6839\u8282\u70b9\u7684\u8d21\u732e\uff0c\u7b80\u5355\u7684\u60f3\u6cd5\u5c31\u662f\u628a\u4ed6\u5230\u6df1\u5ea6\u4e3a $1$ \u7684\u5730\u65b9\u70b9\u6743\u90fd\u8bbe\u4e3a $0$\uff0c\u7136\u540e\u5bf9\u4e8e\u6df1\u5ea6\u4e3a $2$ \u7684\uff0c\u5fc5\u7136\u5b58\u5728\u4e00\u79cd\u6700\u4f18\u51b3\u7b56\u4f7f\u5f97\u4ed6\u88ab\u6df1\u5ea6\u4e3a $1$ \u7684\u70b9\u8986\u76d6\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$ \u7684\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nconst int INF=2e5+5;\nint n;\nstruct _node_edge{\n\tint to_,next_;\n}edge[INF<<1];\nint head[INF],tot,a[INF],f[INF][5],vis[INF];\nvoid add_edge(int x,int y) {\n\tedge[++tot]=(_node_edge){y,head[x]};\n\thead[x]=tot;return ; \n}\n// f[x][0/1/2] \u88ab\u81ea\u5df1\uff0c\u513f\u5b50\uff0c\u7236\u4eb2\u8986\u76d6 \nvoid DFS(int x,int fa,int d) {\n\tif (d>1) a[x]=1,vis[x]=0;\n\telse a[x]=0,vis[x]=1;\n\tfor (int i=head[x];i;i=edge[i].next_) {\n\t\tint v=edge[i].to_;\n\t\tif (v==fa) continue;\n\t\tDFS(v,x,d+1);\n\t}\n\treturn ;\n}\nvoid DFS1(int x,int fa) {\n\tf[x][0]=a[x];f[x][1]=f[x][2]=0;\n\tint sum=1e9;\n\tfor (int i=head[x];i;i=edge[i].next_) {\n\t\tint v=edge[i].to_;\n\t\tif (v==fa) continue;\n\t\tDFS1(v,x);\n\t\tf[x][2]+=min(f[v][0],f[v][1]);\n\t\tf[x][0]+=min(min(f[v][1],f[v][0]),f[v][2]);\n\t\tif (f[v][1]>f[v][0]) f[x][1]+=f[v][0],sum=0;\n\t\telse f[x][1]+=f[v][1],sum=min(sum,f[v][0]-f[v][1]);\n\t}\n\tf[x][1]+=sum;\n//\tcout<<x<<\" \"<<f[x][0]<<\" \"<<f[x][1]<<\" \"<<f[x][2]<<\" yiw\\n\";\n\treturn ;\n}\nsigned main()\n{\n\tios::sync_with_stdio(false);\n\tcin>>n;\n\tfor (int i=1;i<n;i++) {\n\t\tint x=0,y=0;cin>>x>>y;\n\t\tadd_edge(x,y);add_edge(y,x);\n\t}\n\tDFS(1,0,0);\n\tDFS1(1,0);\n\tcout<<min(f[1][0],f[1][1])<<\"\\n\"; \n\treturn 0;\n}\n```\n",
        "postTime": 1664435610,
        "uid": 208653,
        "name": "_edge_",
        "ccfLevel": 0,
        "title": "CF1029E"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u91cc\u7684\u5927\u4f6c\u90fd\u662f\u7528\u8d2a\u5fc3\u5207\u6389\u8fd9\u9053\u9898\u7684\uff0c\u4f46\u5c0f\u849f\u84bb\u4e0d\u4f1a\u8d2a\u5fc3\uff0c\u53ea\u80fd\u7528\u6811\u5f62DP\n\n\u6211\u4eec\u8bbe\n\n$dp[i][0]$\u4e3a\u4e0d\u9009$i$\u5411\u6839\u8282\u70b9\u5efa\u8fb9\u4f46\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\uff08\u5305\u62ec$i$\uff09\u90fd\u88ab\u8986\u76d6\u7684\u6700\u5c0f\u8d39\u7528\n\n$dp[i][1]$\u4e3a\u9009$i$\u5411\u6839\u8282\u70b9\u5efa\u8fb9\u4e14\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\u90fd\u88ab\u8986\u76d6\u7684\u6700\u5c0f\u8d39\u7528\n\n$dp[i][2]$\u4e3a\u4e0d\u9009$i$\u5411\u6839\u8282\u70b9\u5efa\u8fb9\u4f46\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\uff08**\u4e0d**\u5305\u62ec$i$\uff09\u90fd\u88ab\u8986\u76d6\u7684\u6700\u5c0f\u8d39\u7528\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u6109\u60a6\u7684\u5217\u51faDP\u65b9\u7a0b\n\n$dp[i][1]=1+\\sum_{j}^{j\\in son_i}min(dp[j][0],dp[j][1],dp[j][2])$  \n\u5982\u679c\u9009\u8fd9\u4e2a\u70b9\uff0c\u5b83\u7684\u513f\u5b50\u7684\u72b6\u6001\u5c31\u65e0\u5173\u4e86\uff0c\u53d6\u6700\u5c0f\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n$dp[i][2]=\\sum_j^{j\\in son_i}dp[j][0]$\n\n\u5982\u679c\u8fd9\u4e2a\u70b9\u4e0d\u9009\u4e14\u8981\u4f7f\u8fd9\u4e2a\u70b9\u4e0d\u88ab\u8986\u76d6\uff0c\u5c31\u53ea\u80fd\u53d6\u5b83\u7684\u513f\u5b50\u76840\u72b6\u6001\u66f4\u65b0\u3002\n\n\u8fd9\u4e24\u6761\u65b9\u7a0b\u8fd8\u662f\u6bd4\u8f83\u597d\u63a8\u7684\u3002\u4e3b\u8981\u662f0\u72b6\u6001\u6bd4\u8f83\u96be\u8f6c\u79fb\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5206\u7c7b\uff0c\u82e5\u4ed6\u7684\u513f\u5b50\u4e2d\u6709\u4e00\u4e2a\u70b9$j$\u6ee1\u8db3$dp[j][1]<dp[j][0]$\uff0c\u5c31\u6709\n\n$dp[i][0]=\\sum_{j}^{j\\in son_i}min(dp[j][0],dp[j][1])$ \n\n\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u7528\u513f\u5b50\u76842\u72b6\u6001\u8f6c\u79fb\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u90a3\u4e2a\u70b9\u4e0d\u88ab\u8986\u76d6\n\n\u4f46\u5982\u679c\u6ca1\u6709\u513f\u5b50\u6ee1\u8db3\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4ed6\u7684\u513f\u5b50\u4e2d\u627e\u4e00\u4e2a\u70b9$k$\uff0c\u4f7f$dp[k][1]-dp[k][0]$\u6700\u5c0f\uff0c\u7136\u540e\u4f7f\n\n$dp[i][0]=\\sum_{j}^{j\\in son_i}dp[j][0]\\qquad +dp[k][1]-dp[k][0]$\n\n\u5c31\u884c\u4e86 \u3002\n\n$\\color{white}\\text{\u5982\u679c\u4f60\u770b\u5230\u4e86\u8fd9\u53e5\u8bdd\uff0c\u5c31\u6ce8\u610f\u4e00\u4e0b\uff0c\u5982\u679c\u5f53\u524d\u70b9\u7684\u6df1\u5ea6\u5c0f\u4e8e\u7b49\u4e8e1\uff0c\u90a3\u5c31\u4e0d\u5fc5\u5728dp[i][1]\u4e0a\u52a0\u4e00}$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n;\nint tot,bian[400010],nxt[400010],head[200010];\nint v[200010];\ninline int read(){\n\tregister char c;register int ret=0;\n\tfor(c=getchar();c<'0'||c>'9';c=getchar());\n\tfor(;c>='0'&&c<='9';ret=(ret<<1)+(ret<<3)+c-'0',c=getchar());\n\treturn ret;\n}\ninline void add(int x,int y){\n    ++tot;bian[tot]=y;nxt[tot]=head[x];head[x]=tot;\n}\nint dp[200010][3];\nvoid dfs1(int x,int f,int d){\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tif(bian[i]==f)continue;\n\t\tdfs1(bian[i],x,d+1);\n\t}\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tif(bian[i]==f)continue;\n\t\tdp[x][1]+=min(min(dp[bian[i]][0],dp[bian[i]][2]),dp[bian[i]][1]);\n\t\tif(dp[x][2]<1e9)dp[x][2]+=dp[bian[i]][0];\n\t}\n\tint mn=1e9,b=0;\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tif(bian[i]==f)continue;\n\t\tif(dp[bian[i]][1]<dp[bian[i]][0])dp[x][0]+=dp[bian[i]][1],b=1;\n\t\telse dp[x][0]+=dp[bian[i]][0];\n \t\tmn=min(mn,dp[bian[i]][1]-dp[bian[i]][0]);\n\t}\n\tif(!b)dp[x][0]+=mn;\n\tif(d>1)dp[x][1]++;\n}\nint main()\n{\n//\tfreopen(\"traffic.in\",\"r\",stdin);\n//\tfreopen(\"traffic.out\",\"w\",stdout);\n\tn=read();\n\tfor(int i=1;i<n;++i){\n\t\tint x=read(),y=read();\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tdfs1(1,0,0);\n\tcout<<min(dp[1][0],dp[1][1]);\n}\n```",
        "postTime": 1540366928,
        "uid": 48143,
        "name": "zhenglier",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1029E \u3010Tree with Small Distances\u3011"
    },
    {
        "content": "\u849f\u84bb\u53c8\u4e00\u6b21\u6c34\u9898\u89e3\u4e86...\n\n\u9996\u5148\u6211\u4eec\u770b\u5230\u8fd9\u9898\u8303\u56f4\uff0c\u4fbf\u77e5\u9053\u80af\u5b9a\u4e0d\u80fd\u4e00\u4e2a\u4e00\u4e2a\u679a\u4e3e\uff0c\u7136\u540e\u4f1a\u60f3\u5230\u8d2a\u5fc3\uff0c\u5982\u4f55\u4fdd\u8bc1\u8fde\u7684\u8fb9\u6700\u5c11\u5462\uff1f\n\n\u9996\u5148\uff0c\u6211\u4eec\u80af\u5b9a\u4f1a\u60f3\u5230\u5148\u5904\u7406\u6700\u8fdc\u7684\u8282\u70b9\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u8fde\u7684\u8fb9\u5c3d\u53ef\u80fd\u5c11\uff0c\u6211\u4eec\u4fbf\u4f1a\u60f3\u5230\u8fde\u4ed6\u7684\u7236\u4eb2\u548c1\u53f7\u70b9\u3002\u90a3\u4e48\u8d2a\u5fc3\u65b9\u6cd5\u81ea\u7136\u5c31\u51fa\u6765\u4e86\uff1a\n\n\u6bcf\u6b21\u5bfb\u627e\u5f53\u524d\u6700\u8fdc\u7684\u8282\u70b9\uff0c\u8fde1\u53f7\u70b9\u548c\u4ed6\u7236\u4eb2\u8282\u70b9\uff0c\u518d\u66f4\u65b0\u4ed6\u7236\u4eb2\u8282\u70b9\u6240\u8fde\u63a5\u7684\u70b9\u7684\u8ddd\u79bb\uff08\u5176\u7236\u4eb2\u548c\u5176\u5b50\u5b59\uff09\uff0c\u76f4\u5230\u6240\u5f97\u7684\u56fe\u7b26\u5408\u8981\u6c42\u3002\n\n\u6bd4\u8d5b\u65f6\u849f\u84bb\u7684\u6211\u5148\u8dd1\u4e86\u904ddijkstra\uff0c\u7136\u540e\u518d\u4e0d\u65ad\u8d2a\u5fc3,\u83ab\u540dwa5...\n\n\n\u8c03\u4e86\u534a\u5929\u4e5f\u6ca1\u8c03\u5bf9...\u6700\u540e\u8349\u8349\u6536\u573a\u3002\n\n\u6bd4\u8d5b\u7ed3\u675f\u4e4b\u540e\u95ee\u4e86\u4e0b\u5927\u4f6c,\u5927\u4f6c\u8bf4\u4e00\u5f00\u59cbdfs\u4e00\u904d\u5c31\u884c\u4e86\uff0c\u9042\u91cd\u5199\u4e86\u904dE\u3002\n\nAC\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 2e5 + 10;\nint n, dep[MAXN], id[MAXN], fa[MAXN], ans;//id\u6570\u7ec4\u91cd\u65b0\u7f16\u53f7\u7531\u6df1\u5230\u6d45\u7684\u70b9\u3002\nbool cov[MAXN];\nvector<int> e[MAXN];//\u90bb\u63a5\u8868\u5b58\u56fe\u3002\nvoid dfs(int x) {\n    for(vector<int>::iterator i = e[x].begin(); i < e[x].end(); i++) \n    {\n        if(*i == fa[x]) continue;\n        dep[*i] = dep[fa[*i] = x] + 1; dfs(*i);\n    }\n}//dfs\u904d\u5386\u6574\u4e2a\u56fe\uff0c\u83b7\u53d6\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u548c\u5176\u7236\u4eb2\u8282\u70b9\u3002\nvoid setCov(int x) {\n    for(vector<int>::iterator i = e[x].begin(); i < e[x].end(); i++)cov[*i] = true;\n    cov[x] = true;\n}//\u65b0\u589e\u8fb9\u540e\u66f4\u65b0\u5176\u9644\u8fd1\u8282\u70b9\u3002\nbool cmp(int a, int b) {\n    return dep[a] > dep[b];\n}//\u7531\u6df1\u5230\u6d45\uff0c\u65b9\u4fbf\u8d2a\u5fc3\u3002\nint main() {\n    scanf(\"%d\", &n);\n    for(int i = 1; i < n; i++) {\n        int u, v; scanf(\"%d%d\", &u, &v);\n        e[u].push_back(v); e[v].push_back(u);\n    }//\u5b58\u56fe\u3002\n    dfs(1);//\u904d\u5386\u3002\n    for(int i = 1; i <= n; i++) if(dep[i] <= 2) cov[i] = true;//\u66f4\u65b0\u6574\u4e2a\u56fe\u3002\n    for(int i = 1; i <= n; i++) id[i] = i;\n    sort(id + 1, id + n + 1, cmp);\n    for(int i = 1, j; j = id[i]; i++)\n        if(!cov[j]) \n        {\n            ans++; setCov(fa[j]);\n        }//\u4e0d\u65ad\u8d2a\u5fc3\u76f4\u5230\u7b26\u5408\u9898\u610f\u3002\n    printf(\"%d\\n\", ans);\n}\n```",
        "postTime": 1535209365,
        "uid": 64166,
        "name": "Frozencode",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1029E \u3010Tree with Small Distances\u3011"
    },
    {
        "content": "## \u9898\u89e3\uff1a\n\n\u770b\u5230\u6700\u4f18\u5316\u60f3DP\uff0c\u6ca1\u60f3\u51fa\u6765\u3002\u6b63\u89e3\u662f\u8d2a\u5fc3\u3002\n\n\u80af\u5b9a\u6df1\u5ea6\u6df1\u7684\u6700\u4e0d\u597d\u4f3a\u5019\uff0c\u5148\u628a\u6df1\u5ea6\u6df1\u7684\u641e\u5b9a\u4e86\u4e4b\u540e\uff0c\u4e00\u5c42\u4e00\u5c42\u518d\u903c\u8fd1\u6839\u8282\u70b9\u8fd9\u4e48\u641e\uff0c\u80af\u5b9a\u662f\u66f4\u4f18\u79c0\u7684\u3002\n\n\u90a3\u600e\u4e48\u4f3a\u5019\u6df1\u5ea6\u6df1\u7684\u5462\uff1f\n\n\u5047\u8bbe\u73b0\u5728\u6df1\u5ea6\u6df1\u7684\u70b9\u4e3a$x$\uff0c\u5982\u679c\u76f4\u63a5\u8fde$x$\uff0c\u80af\u5b9a\u4e0d\u5212\u7b97\u7684\u3002\u6211\u4eec\u5982\u679c\u8fde\u4e0a\u4ed6\u7684\u7236\u4eb2$f$\uff0c\u90a3\u4e48\u80af\u5b9a\u80fd\u4f7f\u5f97\u66f4\u591a\u7684\u70b9\u7b26\u5408\u6761\u4ef6\u3002\n\n\u4e8e\u662f\u8d2a\u5fc3\u539f\u5219\u5c31\u51fa\u6765\u4e86\u3002\u611f\u6027\u8ba4\u77e5\u662f\u5bf9\u7684\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u5c31\u662f\u7528\u5806\u6765\u7ef4\u62a4\u4e00\u4e2a\u4e8c\u5143\u7ec4\uff0c\u5148\u5904\u7406\u6df1\u5ea6\u6253\u7684\u8282\u70b9\uff0c\u6bcf\u6b21\u53d6\u51fa\u5806\u9876\u8282\u70b9\u5c31\u6253\u4e00\u5708\u6807\u8bb0\u3002\u5c31\u89e3\u51b3\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nconst int maxn=2e5+5;\nint n,ans;\nint tot,head[maxn],nxt[maxn<<1],to[maxn<<1];\nint deep[maxn],fa[maxn];\nbool v[maxn];\npriority_queue<pair<int,int> >q;\nvoid add(int x,int y)\n{\n    to[++tot]=y;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\nvoid dfs(int x,int f)\n{\n    deep[x]=deep[f]+1;\n    fa[x]=f;\n    if(deep[x]>2)\n        q.push(make_pair(deep[x],x));\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==f)\n            continue;\n        dfs(y,x);\n    }\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<n;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n        add(y,x);\n    }\n    deep[0]=-1;\n    dfs(1,0);\n    while(!q.empty())\n    {\n        int x=q.top().second;\n        q.pop();\n        if(v[x])\n            continue;\n        int f=fa[x];\n        v[f]=1;\n        for(int i=head[f];i;i=nxt[i])\n        {\n            int y=to[i];\n            v[y]=1;\n        }\n        ans++;\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1605932908,
        "uid": 175131,
        "name": "\u5085\u601d\u7ef4666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1029E \u3010Tree with Small Distances\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u8bf7\u70b9\u8fd9\u91cc](https://www.cnblogs.com/BrianPeng/p/12284707.html)\n\n## \u6838\u5fc3\u601d\u60f3\uff1a\u8d2a\u5fc3\n\n\u5148\u5c06\u6811\u8f6c\u5316\u4e3a\u4ee5$1$\u4e3a\u6839\u7684\u6709\u6839\u6811\n\n\u8003\u8651\u5982\u679c\u60f3\u8981\u8fde\u4e0a\u4e00\u4e2a\u70b9$u$\uff0c\u5e76\u4e14$u$\u7684\u6240\u6709\u5b50\u6811\u90fd\u5df2\u7ecf\u901a\u8fc7\u5176\u4ed6\u65b9\u5f0f\u8fde\u4e0a\u4e86\n\n\u90a3\u4e48\u5c31\u6709\u4e09\u79cd\u65b9\u6cd5\uff1a\n\n1. \u8fde\u4e0a$u$\u81ea\u5df1\uff0c\u90a3\u4e48\u53ef\u4ee5\u987a\u52bf\u8fde\u4e0a$u$\u7684\u7236\u4eb2$f_u$\n\n2. \u8fde\u4e0a$u$\u7684\u4e00\u4e2a\u513f\u5b50\uff0c\u90a3\u4e48\u9664\u4e86\u8fde\u4e0a$u$\u4ee5\u5916\u6ca1\u6709\u4efb\u4f55\u6548\u679c\n\n3. \u8fde\u4e0a$u$\u7684\u7236\u4eb2$f_u$\uff0c\u90a3\u4e48$f_u$\u7684\u6240\u6709\u513f\u5b50\u90fd\u53ef\u4ee5\u987a\u5e26\u8fde\u4e0a\n\n\u7efc\u4e0a\uff0c\u8fde\u4e0a$f_u$\u662f\u8d2a\u5fc3\u6700\u4f18\u7684\n\n\u7ed9\u6bcf\u4e00\u4e2a\u70b9$u$\u4e00\u4e2a\u6df1\u5ea6$d_u$\uff0c\u5176\u4e2d$d_1=0$\n\n\u4e3a\u4e86\u4fdd\u8bc1$u$\u7684\u6240\u6709\u5b50\u6811\u90fd\u8fde\u4e0a\uff0c\u53ef\u4ee5\u5efa\u4ee5$d_u$\u4e3a\u952e\u503c\u7684\u5927\u6839\u5806\uff0c\u628a\u6240\u6709$d_u>2$\u7684$u$\u4e22\u8fdb\u53bb\n\n\u6bcf\u6b21\u5f39\u51fa\u4e00\u4e2a$u$\uff0c\u5c31\u628a$f_u$\u8fde\u4e0a\uff0c\u5373\u5c06$f_u$\u53ca\u5176\u5468\u56f4\u7684\u70b9\u6253\u4e0a\u6807\u8bb0\n\n\u5982\u679c\u5f39\u51fa\u7684$u$\u6253\u8fc7\u4e86\u6807\u8bb0\uff0c\u76f4\u63a5\u5ffd\u7565\u5373\u53ef\n\n**Time complexity: $O(n\\log n)$**\n\n**Memory complexity: $O(n)$**\n\n\u7ec6\u8282\u89c1\u4ee3\u7801\uff08$2.82$s / $17.77$MB\uff09\n```cpp\n//This program is written by Brian Peng.\n#pragma GCC optimize(\"Ofast\",\"inline\",\"no-stack-protector\")\n#include<bits/stdc++.h>\nusing namespace std;\n#define Rd(a) (a=read())\n#define Gc(a) (a=getchar())\n#define Pc(a) putchar(a)\nint read(){\n\tregister int x;register char c(getchar());register bool k;\n\twhile(!isdigit(c)&&c^'-')if(Gc(c)==EOF)exit(0);\n\tif(c^'-')k=1,x=c&15;else k=x=0;\n\twhile(isdigit(Gc(c)))x=(x<<1)+(x<<3)+(c&15);\n\treturn k?x:-x;\n}\nvoid wr(register int a){\n\tif(a<0)Pc('-'),a=-a;\n\tif(a<=9)Pc(a|'0');\n\telse wr(a/10),Pc((a%10)|'0');\n}\nsigned const INF(0x3f3f3f3f),NINF(0xc3c3c3c3);\nlong long const LINF(0x3f3f3f3f3f3f3f3fLL),LNINF(0xc3c3c3c3c3c3c3c3LL);\n#define Ps Pc(' ')\n#define Pe Pc('\\n')\n#define Frn0(i,a,b) for(register int i(a);i<(b);++i)\n#define Frn1(i,a,b) for(register int i(a);i<=(b);++i)\n#define Frn_(i,a,b) for(register int i(a);i>=(b);--i)\n#define Mst(a,b) memset(a,b,sizeof(a))\n#define File(a) freopen(a\".in\",\"r\",stdin),freopen(a\".out\",\"w\",stdout)\n#define N (200010)\nint n,u,v,f[N],d[N],ans;\nbool vs[N];\nvector<int>e[N];\nstruct Cmp{bool operator()(int a,int b){return d[a]<d[b];}};\npriority_queue<int,vector<int>,Cmp>q;\nvoid dfs(int u);\nsigned main(){\n\tRd(n);\n\tFrn0(i,1,n)e[Rd(u)].push_back(Rd(v)),e[v].push_back(u);\n\tdfs(1);\n\twhile(!q.empty()){\n\t\tu=q.top(),q.pop();\n\t\tif(vs[u])continue;\n\t\tvs[f[u]]=1,++ans;\n\t\tfor(int i:e[f[u]])vs[i]=1;\n\t}\n\twr(ans),exit(0);\n}\nvoid dfs(int u){\n\tif(d[u]>2)q.push(u);\n\tfor(int i:e[u])if(i!=f[u])f[i]=u,d[i]=d[u]+1,dfs(i);\n}\n```\n---\n## \u63a5\u4e0b\u6765\u662f\u4f18\u5316\u90e8\u5206\n\n\u53d1\u73b0\u65f6\u95f4\u74f6\u9888\u5728\u4e8e\u5806\u64cd\u4f5c\u662f$O(\\log n)$\u7684\n\n\u800c\u4e14\u4e8b\u5b9e\u4e0a\u6839\u672c\u4e0d\u9700\u8981\u5806\uff0c\u56e0\u4e3a\u53ea\u6709\u5728dfs\u65f6\u8fdb\u884c\u7684push()\u64cd\u4f5c\uff0c\u4e4b\u540e\u90fd\u662f\u5f39\u51fa\n\n\u4f46\u662f\u5982\u679c\u5bf9$u$\u6309\u7167$d_u$\u6392\u5e8f\uff0c\u7528sort()\u8fd8\u662f$O(n\\log n)$\u7684\n\n\u5176\u5b9e\u5982\u679c\u8981\u751f\u6210\u4e00\u4e2a\u6309$d_u$\u6392\u5e8f\u7684\u5e8f\u5217\u6709$O(n)$\u505a\u6cd5\uff0c\u90a3\u5c31\u662f\u2026\u2026\n\n## BFS\u5927\u6cd5\u597d\uff01\uff01\uff01\uff01\uff01\n\nBFS\u5e8f\u5c31\u662f\u4e00\u4e2a\u6309\u7167$d_u$\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\u5e8f\u5217\n\n\u6240\u4ee5\u53ea\u8981\u628a$d_u>2$\u7684BFS\u5e8f\u8bb0\u5f55\u4e0b\u6765\uff0c\u7136\u540e\u5012\u7740\u505a\u5c31\u53ef\u4ee5\u4e86\uff0c\u5176\u5b83\u64cd\u4f5c\u4e0d\u53d8\n\n**Time complexity: $O(n)$**\n\n**Memory complexity: $O(n)$**\n\n\u7ec6\u8282\u89c1\u4ee3\u7801\uff08$2.04$s / $10.11$MB\uff09\uff08\u6548\u679c\u4e0d\u9519\uff09\n```cpp\n//This program is written by Brian Peng.\n#pragma GCC optimize(\"Ofast\",\"inline\",\"no-stack-protector\")\n#include<bits/stdc++.h>\nusing namespace std;\n#define Rd(a) (a=read())\n#define Gc(a) (a=getchar())\n#define Pc(a) putchar(a)\nint read(){\n\tregister int x;register char c(getchar());register bool k;\n\twhile(!isdigit(c)&&c^'-')if(Gc(c)==EOF)exit(0);\n\tif(c^'-')k=1,x=c&15;else k=x=0;\n\twhile(isdigit(Gc(c)))x=(x<<1)+(x<<3)+(c&15);\n\treturn k?x:-x;\n}\nvoid wr(register int a){\n\tif(a<0)Pc('-'),a=-a;\n\tif(a<=9)Pc(a|'0');\n\telse wr(a/10),Pc((a%10)|'0');\n}\nsigned const INF(0x3f3f3f3f),NINF(0xc3c3c3c3);\nlong long const LINF(0x3f3f3f3f3f3f3f3fLL),LNINF(0xc3c3c3c3c3c3c3c3LL);\n#define Ps Pc(' ')\n#define Pe Pc('\\n')\n#define Frn0(i,a,b) for(register int i(a);i<(b);++i)\n#define Frn1(i,a,b) for(register int i(a);i<=(b);++i)\n#define Frn_(i,a,b) for(register int i(a);i>=(b);--i)\n#define Mst(a,b) memset(a,b,sizeof(a))\n#define File(a) freopen(a\".in\",\"r\",stdin),freopen(a\".out\",\"w\",stdout)\n#define N (200010)\nint n,u,v,f[N],ans,s[N],sz;\nbool vs[N];\nstruct Q{int u,d;}p;\nvector<int>e[N];\nqueue<Q>q;\nsigned main(){\n\tRd(n),q.push({1,0});\n\tFrn0(i,1,n)e[Rd(u)].push_back(Rd(v)),e[v].push_back(u);\n\twhile(!q.empty()){\n\t\tp=q.front(),q.pop();\n\t\tif(p.d>2)s[++sz]=p.u;\n\t\tfor(int i:e[p.u])if(i!=f[p.u])f[i]=p.u,q.push({i,p.d+1});\n\t}\n\tFrn_(i,sz,1){\n\t\tif(vs[s[i]])continue;\n\t\tvs[f[s[i]]]=1,++ans;\n\t\tfor(int j:e[f[s[i]]])vs[j]=1;\n\t}\n\twr(ans),exit(0);\n}\n```",
        "postTime": 1581162763,
        "uid": 66199,
        "name": "Bring",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 CF1029E \u3010Tree with Small Distances\u3011"
    }
]