[
    {
        "content": "> [CF527E Data Center Drama](https://codeforces.com/contest/527/problem/E)\n\n## \u9898\u610f\n\n- \u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u65e0\u5411\u56fe\u3002\n- \u4f60\u9700\u8981\u52a0\u5c3d\u53ef\u80fd\u5c11\u7684\u8fb9\uff0c\u7136\u540e\u7ed9\u6240\u6709\u8fb9\u5b9a\u5411\uff0c\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u70b9\u7684\u51fa\u5165\u5ea6\u90fd\u662f\u5076\u6570\u3002\n- \u8fb9\u53ef\u4ee5\u662f\u81ea\u73af\uff0c\u4e5f\u53ef\u4ee5\u7531\u91cd\u8fb9\u3002\n- $n \\le 10^5$\uff0c$m \\le 2 \\times 10^5$\u3002\n\n## \u9898\u89e3\n\n\u82e5\u6bcf\u4e2a\u70b9\u7684\u51fa\u5165\u5ea6\u90fd\u662f\u5076\u6570\uff0c\u5219\u6bcf\u4e2a\u70b9\u7684\u603b\u5ea6\u6570\u662f\u5076\u6570\uff0c\u800c\u8fd9\u662f\u4e00\u5f20\u56fe\u5b58\u5728**\u6b27\u62c9\u56de\u8def**\u7684\u5145\u8981\u6761\u4ef6\u3002\n\n\u6240\u4ee5\u5c06\u6240\u6709\u603b\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u4e24\u4e24\u76f8\u8fde\u3002\n\n\u4f46\u662f\u5e76\u4e0d\u662f\u6240\u6709\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u56fe\u90fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u8fd8\u9700\u8981\u6ee1\u8db3\u8fb9\u6570\u4e3a\u5076\u6570\u3002\n\n\u90a3\u4e48\u968f\u4fbf\u627e\u4e00\u4e2a\u70b9\u52a0\u4e00\u4e2a\u81ea\u73af\u5373\u53ef\u3002\n\n\u8fd9\u663e\u7136\u662f\u6700\u5c11\u7684\u52a0\u8fb9\u65b9\u6848\u3002\n\n\u6700\u540e\u8dd1\u4e00\u4e2a\u6b27\u62c9\u56de\u8def\u51fa\u6765\uff0c\u7136\u540e\u9694\u4e00\u6761\u8fb9\u6362\u4e00\u4e2a\u65b9\u5411\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n```cpp\nconst int N = 1e5 + 7, M = 1e6 + 7;\nint n, m, h[N], e[M], t[M], tot = 1, d[N], v[M], k;\nvi p;\n\ninline void add(int x, int y, int o = 1) {\n\te[++tot] = y, t[tot] = h[x], h[x] = tot;\n\tif (o) ++d[x], ++d[y], add(y, x, 0);\n}\n\nvoid dfs(int x) {\n\tfor (int &i = h[x]; i; i = t[i]) {\n\t\tif (v[i]) continue;\n\t\tv[i] = v[i^1] = 1;\n\t\tint y = e[i];\n\t\tdfs(y);\n\t\tif ((++k) & 1) print(x, ' '), print(y);\n\t\telse print(y, ' '), print(x);\n\t}\n}\n\nint main() {\n\trd(n), rd(m);\n\tfor (int i = 1, x, y; i <= m; i++) rd(x), rd(y), add(x, y);\n\tfor (int i = 1; i <= n; i++) if (d[i] & 1) p.pb(i);\n\tfor (ui i = 0; i < p.size(); i += 2) add(p[i], p[i+1]), ++m;\n\tif (m & 1) add(1, 1), ++m;\n\tprint(m), dfs(1);\n\treturn 0;\n}\n```",
        "postTime": 1581494099,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF527E \u3010Data Center Drama\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a$naive$\u505a\u6cd5\u3002\n\n~~\u5982\u679c\u4f60\u548c\u6211\u4e00\u6837\u6ca1\u6709\u770b\u51fa\u8fd9\u662f\u4e00\u4e2a\u6b27\u62c9\u56de\u8def\uff0c\u4e5f\u8bb8\u8fd9\u7bc7Bolg\u53ef\u4ee5\u5e2e\u52a9\u4f60~~\n\n\u6ee1\u8db3\u9898\u610f\u663e\u7136\u8981\u6240\u6709\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5076\u6570\u5e76\u4e14\u603b\u8fb9\u6570\u662f\u5076\u6570\u3002\n\n\u4e00\u79cd\u66b4\u529b\u662f\u5148\u4efb\u610f\u5b9a\u5411\uff0c\u7136\u540e\u9009\u62e9\u4e24\u4e2a\u51fa\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\u4efb\u610f\u8dd1\u51fa\u4e00\u6761\u8def\u5f84\uff0c\u5c06\u4e4b\u95f4\u65b9\u5411\u53d6\u53cd\uff0c\u7136\u540e\u8fd9\u4e24\u4e2a\u70b9\u5ea6\u6570\u53d8\u4e3a\u5076\u6570\uff0c\u4e2d\u95f4\u7684\u70b9\u5ea6\u6570\u5947\u5076\u6027\u4e0d\u53d8\u3002\n\n\u53d1\u73b0\u6211\u4eec\u53ea\u9700\u8981\u7ed9\u4efb\u610f\u4e00\u79cd\u8def\u5f84\u53d8\u5411\u5373\u53ef\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f04\u51fa\u539f\u56fe\u7684\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u7136\u540e\u64cd\u4f5c\u53d8\u6210\u6bcf\u6b21\u9009\u62e9\u4e24\u4e2a\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\uff0c\u7136\u540e\u5c06\u8fd9\u4e24\u4e2a\u70b9\u4e2d\u95f4\u7684\u6811\u8fb9\u5168\u90e8\u53cd\u5411\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u5256\u5b9e\u73b0\u3002\n\n\u8fd8\u6709\u4e00\u79cd\u641e\u6cd5\u662f\u628a\u6240\u6709\u7684\u53cd\u7956\u8fb9\u968f\u610f\u5b9a\u5411\uff0c\u7136\u540e\u7528\u6811\u8fb9\u6765\u8c03\u6574\u5373\u53ef\u3002\u4f46\u61d2\u5f97\u5199\u4ee3\u7801\u4e86\u2026\u2026\n### $\\rm Code$\n```cpp\n/* This code is written by Nemlit */\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define re register\n#define rep(i, a, b) for(re int i = (a); i <= (b); ++ i)\n#define Next(i, u) for(re int i = head[u]; i; i = e[i].next)\n#define mem(k, p) memset(k, p, sizeof(k))\nil int read() {\n    re int x = 0, f = 1; re char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n#define ls k * 2\n#define rs k * 2 + 1\n#define N 600005\nint head[N], cnt, n, m, U[N], V[N], du[N], size[N], dep[N], tag[N * 4], L[N], id[N];\nint fa[N], top[N], tot, vis[N], st[N], dfn[N], son[N], Top;\nstruct edge { int v, next; }e[N << 1];\nil void add(int u, int v, int I) { e[++ cnt] = (edge){v, head[u]}, head[u] = cnt, ++ du[u], id[cnt] = I; }\nil void dfs(int u) {\n\tvis[u] = size[u] = 1;\n\tNext(i, u) {\n\t\tint v = e[i].v;\n\t\tif(vis[v]) continue;\n\t\tfa[v] = u, dep[v] = dep[u] + 1, dfs(v), L[v] = id[i], size[u] += size[v];\n\t\tif(size[son[u]] < size[v]) son[u] = v;\n\t}\n}\nil void dfs2(int u, int fr) {\n\tvis[u] = 1, top[u] = fr, dfn[u] = ++ tot;\n\tif(son[u]) dfs2(son[u], fr);\n\tNext(i, u) {\n\t\tint v = e[i].v;\n\t\tif(!vis[v]) dfs2(v, v);\n\t}\n}\nil void pushdown(int k) {\n\tif(tag[k] == 1) tag[ls] ^= 1, tag[rs] ^= 1, tag[k] = 0;\n}\nil void modify(int k, int l, int r, int ll, int rr) {\n\tif(ll <= l && r <= rr) {\n\t\ttag[k] ^= 1;\n\t\treturn;\n\t}\n\tpushdown(k);\n\tint mid = (l + r) >> 1;\n\tif(ll <= mid) modify(ls, l, mid, ll, rr);\n\tif(mid < rr) modify(rs, mid + 1, r, ll, rr);\n}\nil void modify(int u, int v) {\n\twhile(top[u] != top[v]) {\n\t\tif(dep[top[u]] < dep[top[v]]) swap(u, v);\n\t\tmodify(1, 1, n, dfn[top[u]], dfn[u]), u = fa[top[u]];\n\t}\n\tif(dep[u] < dep[v]) swap(u, v);\n\tif(u != v) modify(1, 1, n, dfn[v] + 1, dfn[u]);\n}\nil int query(int k, int l, int r, int ll) {\n\tif(l == r) return tag[k];\n\tpushdown(k);\n\tint mid = (l + r) >> 1;\n\tif(ll <= mid) return query(ls, l, mid, ll);\n\treturn query(rs, mid + 1, r, ll);\n}\nsigned main() {\n\tn = read(), m = read();\n\trep(i, 1, m) {\n\t\tint u = read(), v = read();\n\t\tadd(u, v, i), add(v, u, i), U[i] = u, V[i] = v;\n\t}\n\trep(i, 1, n) if(du[i] & 1) st[++ Top] = i;\n\tfor(re int i = 1; i <= Top; i += 2) ++ m, add(st[i], st[i + 1], m), add(st[i + 1], st[i], m), U[m] = st[i], V[m] = st[i + 1];\n\tif(m & 1) U[++ m] = V[m] = 1;\n\tmem(du, 0), Top = 0, dep[1] = 1, dfs(1), mem(vis, 0), dfs2(1, 1);\n\trep(i, 1, m) ++ du[U[i]];\n\trep(i, 1, n) if(du[i] & 1) st[++ Top] = i;\n\tfor(re int i = 1; i <= Top; i += 2) modify(st[i], st[i + 1]);\n\tprintf(\"%d\\n\", m);\n\trep(i, 2, n) if(query(1, 1, n, dfn[i])) swap(U[L[i]], V[L[i]]);\n\trep(i, 1, m) printf(\"%d %d\\n\", U[i], V[i]);\n\treturn 0;\n}\n```",
        "postTime": 1601304674,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF527E \u3010Data Center Drama\u3011"
    },
    {
        "content": "\n  \u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e2a\u65e0\u5411\u7b80\u5355\u56fe\uff0c\u7136\u540e\u4f60\u81ea\u5df1\u518d\u52a0\u4e00\u70b9\u8fb9\uff0c\u7136\u540e\u4f60\u7ed9\u4ed6\u4eec\u5b9a\u5411\uff0c\u8981\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\u548c\u5165\u5ea6\u90fd\u662f\u5076\u6570\u3002\u8f93\u51fa\u52a0\u7684\u8fb9\u6700\u5c11\u7684\u4efb\u610f\u65b9\u6848\u3002\n\n  \u5148\u63d0\u51fa\u4e00\u79cd\u6784\u9020\u65b9\u6848\u3002\n  - \u6211\u4eec\u53d1\u73b0\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5076\u6570\u6761\u8fb9\u3001\u6709\u6b27\u62c9\u8def\u5f84\u7684\u56fe\uff0c\u4ee5 $a\\rightarrow b\\leftarrow c\\rightarrow d\\leftarrow ...\\rightarrow a$ \u7684\u65b9\u5f0f\u5b9a\u5411\uff0c\u53ef\u4ee5\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\u548c\u5165\u5ea6\u90fd\u662f\u5076\u6570\u3002\uff08\u56e0\u4e3a\u6bcf\u6b21\u8bbf\u95ee\u4e00\u4e2a\u70b9\u90fd\u4f1a\u4f7f\u5f97\u5b83\u7684\u5165\u5ea6/\u51fa\u5ea6 +2\uff09\u3002\n  - \u5bf9\u4e8e\u4e00\u4e2a\u5947\u6570\u6761\u8fb9\u7684\u6709\u6b27\u62c9\u8def\u5f84\u7684\u56fe\uff0c\u968f\u4fbf\u5728\u67d0\u4e2a\u70b9\u52a0\u4e2a\u81ea\u73af\uff0c\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u5076\u6570\u6761\u8fb9\u7684\u56fe\u3002\n  - \u628a\u539f\u56fe\u52a0\u6210\u4e00\u4e2a\u6709\u6b27\u62c9\u8def\u5f84\u7684\u56fe\uff1a\u8003\u8651\u4e00\u4e2a\u56fe\u53ea\u53ef\u80fd\u6709\u5076\u6570\u4e2a\u5947\u70b9\uff0c\u90a3\u4e48\u628a\u5947\u70b9\u914d\u5bf9\u76f8\u8fde\u5373\u53ef\u3002\n     \n  \u68b3\u7406\u4e00\u4e0b\uff0c\u5c31\u662f\u6211\u4eec\u5148\u628a\u5947\u70b9\u914d\u5bf9\u76f8\u8fde\uff0c\u7136\u540e\u5982\u679c\u6709\u5947\u6570\u6761\u8fb9\u5c31\u5728\u968f\u4fbf\u54ea\u4e2a\u8282\u70b9\u52a0\u4e2a\u81ea\u73af\u3002\u7136\u540e\u627e\u4e00\u6761\u6b27\u62c9\u8def\u5f84\u5c31\u884c\u4e86\u3002\n\n\u6b63\u786e\u6027\uff1a\n  - \u5b9a\u5411\u524d\u7b54\u6848\u7684\u56fe\u4e00\u5b9a\u662f\u4e00\u4e2a\u6709\u6b27\u62c9\u8def\u5f84\u7684\u56fe\uff0c\u5426\u5219\u5b83\u5b58\u5728\u70b9\u5ea6\u6570\u4e0d\u662f\u5947\u6570\uff0c\u5b9a\u5411\u540e\u4e5f\u4e0d\u53ef\u80fd\u5165\u5ea6+\u51fa\u5ea6\u662f\u5076\u6570\u3002\u5982\u679c\u539f\u56fe\u4e0d\u662f\u90a3\u5fc5\u987b\u5f97\u52a0\u8fb9\u3002\u663e\u7136\u4f60\u52a0\u7684\u8fb9\u6570\u5df2\u7ecf\u662f\u6700\u5c11\u7684\u4e86\n  - \u4e00\u4e2a\u5947\u6570\u6761\u8fb9\u7684\u56fe\uff0c\u5b9a\u5411\u540e\u4e0d\u53ef\u80fd\u6240\u6709\u70b9\u90fd\u5165\u5ea6+\u51fa\u5ea6\u662f\u5076\u6570\uff0c\u6240\u4ee5\u5fc5\u987b\u52a0\u8fb9\uff0c\u90a3\u5c31\u52a0\u4e00\u6761\u81ea\u73af\uff0c\u4e5f\u662f\u6700\u5c11\u7684\u3002\n  \n\u867d\u7136\u4f46\u662f\uff0c\u8fd9\u7bc7\u9898\u89e3\u4e0d\u8fc7\u5ba1\u6838\u539f\u56e0\u662f\u201c\u6570\u5b66\u516c\u5f0f\u6ca1\u52a0LaTeX\"\uff0c\u53ef\u662f\u54ea\u91cc\u6709\u6570\u5b66\u516c\u5f0f\u554a\u3002\u731c\u6d4b\u662f\u201c$a\\rightarrow b\\leftarrow c\\rightarrow d\\leftarrow ...\\rightarrow a$\u201d \uff1f",
        "postTime": 1647341418,
        "uid": 106738,
        "name": "_Felix",
        "ccfLevel": 0,
        "title": "CF527E Data Center Drama"
    },
    {
        "content": "\u6bcf\u4e2a\u70b9\u5ea6\u6570\u4e3a\u5076\u6570\u610f\u5473\u7740\u770b\u6210\u65e0\u5411\u56fe\u540e\u8fd9\u5f20\u56fe\u6709**\u6b27\u62c9\u56de\u8def**\u3002\n\n\u8003\u8651\u6293\u51fa\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u4e24\u4e24\u8fde\u8fb9\uff0c\u8fd9\u6837\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u5c31\u90fd\u662f\u5076\u6570\u3002\n\n\u4f46\u662f\u8003\u8651\u5230\u91cd\u8fb9\u7684\u95ee\u9898\uff0c\u5b9e\u9645\u4e0a\u6b64\u65f6\u603b\u8fb9\u6570\u53ef\u80fd\u4e3a\u5076\u6570\u3002\u6b64\u65f6\u6211\u4eec\u9700\u8981\u518d\u52a0\u4e0a\u4e00\u4e2a\u81ea\u73af\u3002\n\n\u6700\u540e\u5728\u8fd9\u5f20\u56fe\u4e0a\u8dd1\u51fa\u4e00\u6761\u6b27\u62c9\u56de\u8def\uff0c\u76f8\u90bb\u8fb9\u5b9a\u5411\u76f8\u53cd\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <stdio.h>\n\ntypedef struct {\n\tint nxt;\n\tint end;\n} Edge;\n\nint cnt = 1;\nbool op = true;\nint deg[100007], head[100007], bucket[100007];\nbool vis[600007];\nEdge edge[600007];\n\ninline void add_edge(int start, int end){\n\tcnt++;\n\tedge[cnt].nxt = head[start];\n\thead[start] = cnt;\n\tedge[cnt].end = end;\n}\n\nvoid dfs(int u){\n\tfor (int &i = head[u]; i != 0; i = edge[i].nxt){\n\t\tif (!vis[i]){\n\t\t\tint x = edge[i].end;\n\t\t\tvis[i] = vis[i ^ 1] = true;\n\t\t\tdfs(x);\n\t\t\tif (op){\n\t\t\t\tprintf(\"%d %d\\n\", u, x);\n\t\t\t} else {\n\t\t\t\tprintf(\"%d %d\\n\", x, u);\n\t\t\t}\n\t\t\top = !op;\n\t\t}\n\t}\n}\n\nint main(){\n\tint n, m, cnt = 0;\n\tscanf(\"%d %d\", &n, &m);\n\tfor (int i = 1; i <= m; i++){\n\t\tint a, b;\n\t\tscanf(\"%d %d\", &a, &b);\n\t\tdeg[a]++;\n\t\tdeg[b]++;\n\t\tadd_edge(a, b);\n\t\tadd_edge(b, a);\n\t}\n\tfor (int i = 1; i <= n; i++){\n\t\tif (deg[i] % 2 == 1) bucket[++cnt] = i;\n\t}\n\tfor (int i = 1; i <= cnt; i += 2){\n\t\tint u = bucket[i], v = bucket[i + 1];\n\t\tm++;\n\t\tadd_edge(u, v);\n\t\tadd_edge(v, u);\n\t}\n\tif (m % 2 == 1){\n\t\tm++;\n\t\tadd_edge(1, 1);\n\t\tadd_edge(1, 1);\n\t}\n\tprintf(\"%d\\n\", m);\n\tdfs(1);\n\treturn 0;\n}\n```",
        "postTime": 1675556527,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF527E \u3010Data Center Drama\u3011"
    },
    {
        "content": "### CF 527E\n#### Solution\n\u9996\u5148\u4e00\u4e2a\u5145\u8981\u6761\u4ef6\u662f\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u4e3a\u5076\u6570\u4e14\u603b\u8fb9\u6570\u4e3a\u5076\u6570\u3002\u8003\u8651\u6c42\u5982\u4f55\u6700\u5c11\u589e\u52a0\u7684\u8fb9\u7684\u6570\u91cf\uff1a\u968f\u4fbf\u5339\u914d\u4e24\u4e2a\u5947\u6570\u5ea6\u7684\u70b9\uff0c\u6700\u540e\u5224\u65ad\u662f\u5426\u9700\u8981\u518d\u8fde\u4e00\u6761\u81ea\u73af\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u4e0a\u8ff0\u6761\u4ef6\u4e5f\u7b49\u4ef7\u4e8e\u56fe\u4e2d\u5b58\u5728\u4e00\u6761\u6b27\u62c9\u56de\u8def\u3002\u6700\u540e\u8dd1\u4e00\u904d\u6b27\u62c9\u56de\u8def\uff0c\u5bf9\u4e8e\u56de\u8def\u4e0a\u7b2c\u5947\u6570\u6761\u8fb9\u539f\u65b9\u5411\uff0c\u5076\u6570\u6761\u8fb9\u53cd\u65b9\u5411\u5373\u53ef\uff0c\u8fd9\u6837\u4fdd\u8bc1\u4e86\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u70b9\uff0c\u8981\u4e48\u5b83\u7684\u5165\u5ea6$+2$,\u8981\u4e48\u51fa\u5ea6$+2$\u3002\n\n\u6ce8\u610f\u4f7f\u7528\u94fe\u5f0f\u524d\u5411\u661f\u8dd1\u6b27\u62c9\u56de\u8def\u65f6\u4e00\u5b9a\u8981\u5c06\u7528\u8fc7\u7684\u8fb9\u5220\u6389\uff0c\u5426\u5219\u4f1a TLE\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n)$\n#### Code\n```cpp\nint n,m,cnt,len = 1;\nint deg[MAXN],vis[MAXN],head[MAXN];\n\nstruct Edge{\n    int to,next;\n} e[MAXN];\n\nvoid add_edge(int u,int v){\n    e[++len] = (Edge){v,head[u]};\n    head[u] = len;\n    e[++len] = (Edge){u,head[v]};\n    head[v] = len;\n    deg[u] += 1; deg[v] += 1;\n}\n\nvoid dfs(int u){\n    for(int &i = head[u];i;i = e[i].next){\n        if(vis[i]) continue;\n        vis[i] = vis[i ^ 1] = 1;\n        int v = e[i].to; dfs(v);\n        cnt += 1;\n        if(cnt & 1) printf(\"%d %d\\n\",u,v);\n        else printf(\"%d %d\\n\",v,u);\n    }\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i = 1,u,v;i <= m;i++)\n        scanf(\"%d%d\",&u,&v), add_edge(u,v);\n    vector<int> vec;\n    for(int i = 1;i <= n;i++)\n        if(deg[i] & 1) vec.push_back(i);\n    for(int i = 0;i < (int)vec.size();i += 2)\n        add_edge(vec[i],vec[i + 1]), m += 1;\n    if(m & 1) add_edge(1,1), m += 1;\n    printf(\"%d\\n\",m); dfs(1);\n    return 0;\n}\n```",
        "postTime": 1611932279,
        "uid": 108894,
        "name": "\u5173\u6000\u4ed6\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF527E \u3010Data Center Drama\u3011"
    },
    {
        "content": "[CF527E Data Center Drama](https://www.luogu.com.cn/problem/CF527E)\n\n## Description\n\n- \u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u65e0\u5411\u56fe\u3002\n- \u4f60\u9700\u8981\u52a0\u5c3d\u53ef\u80fd\u5c11\u7684\u8fb9\uff0c\u7136\u540e\u7ed9\u6240\u6709\u8fb9\u5b9a\u5411\uff0c\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u70b9\u7684\u51fa\u5165\u5ea6\u90fd\u662f\u5076\u6570\u3002\n- \u8fb9\u53ef\u4ee5\u662f\u81ea\u73af\uff0c\u4e5f\u53ef\u4ee5\u6709\u91cd\u8fb9\u3002\n- $n \\leq 10^5$\uff0c$m \\leq 10^5$\u3002\n\n## Solution\n\n\u5982\u679c\u4f60\u719f\u6089\u6b27\u62c9\u56de\u8def\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u4e00\u5b9a\u77e5\u9053\uff0c\u6bcf\u4e00\u4e2a\u70b9\u7684\u51fa\u5165\u5ea6\u4e3a\u5076\u6570\u662f\u4e00\u5f20\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5145\u8981\u6761\u4ef6\u3002\n\n\u4f46\u662f\u4ec5\u4ec5\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u662f\u4e0d\u591f\u7684\u3002\u9996\u5148\u6709\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u7ed3\u8bba\uff0c\u5728\u5b9a\u5411\u540e\u7684\u56fe\u4e2d\u6240\u6709\u70b9\u7684\u5165\u5ea6\u4e4b\u548c\u7b49\u4e8e\u6240\u6709\u70b9\u7684\u51fa\u5ea6\u4e4b\u548c\uff0c\u4e14\u6070\u597d\u7b49\u4e8e\u8fb9\u6570 $m$\u3002\u56e0\u6b64\u6211\u4eec\u8fd8\u5e94\u8be5\u6ee1\u8db3\u6700\u540e\u7684\u8fb9\u6570 $m$ \u4e3a\u5076\u6570\uff0c\u5426\u5219\uff0c\u82e5 $m$ \u4e3a\u5947\u6570\uff0c\u5219\u82e5\u5e72\u4e2a\u5076\u6570\u7684\u548c\u4e0d\u53ef\u80fd\u4e3a\u5947\u6570\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u6bcf\u4e00\u4e2a\u70b9\u7684\u5ea6\u6570\uff0c\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u4e4b\u95f4\u8fde\u8fb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5076\u6570\u4e86\u3002\u5bf9\u4e8e $m$ \u4e3a\u5076\u6570\u7684\u60c5\u51b5\uff0c\u5c31\u8dd1\u4e00\u8fb9\u6b27\u62c9\u56de\u8def\uff0c\u7136\u540e\u9694\u4e00\u6761\u8fb9\u6362\u4e00\u4e2a\u65b9\u5411\uff0c\u663e\u7136\u8fd9\u6837\u5bf9\u6bcf\u4e2a\u70b9\u7684\u51fa\u5165\u5ea6\u7684\u8d21\u732e\u5747\u4e3a\u5076\u6570\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e $m$ \u4e3a\u5947\u6570\u7684\u60c5\u51b5\u5982\u4f55\u5904\u7406\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u8981\u4fdd\u8bc1\u6700\u540e\u7684 $m$ \u4e3a\u5076\u6570\u3002\n\n\u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u5176\u5b9e\u53ea\u8981\u968f\u4fbf\u6293\u4e00\u4e2a\u70b9\u52a0\u4e00\u6761\u81ea\u73af\u5c31\u53ef\u4ee5\u4e86\u3002\u663e\u7136\u8fd9\u662f\u6700\u4f18\u7684\u65b9\u6848\u3002\n\n## Code\n\n```cpp\n#include <cmath>\n#include <vector>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define maxn 100005\n#define maxm 400005\nusing namespace std;\n\ninline int read()\n{\n    char ch = getchar(); int x = 0;\n    while (!isdigit(ch)) ch = getchar();\n    while (isdigit(ch)) { x = x * 10 + ch - '0'; ch = getchar(); }\n    return x;\n}\n\nstruct node\n{\n\tint nxt, to;\n}edge[maxm << 1];\nint head[maxn], d[maxn];bool vis[maxm << 1];\nint n, m, tot = 1, pos;\nvector<int> q;\n\ninline void add(int u, int v)\n{\n\tedge[++tot].nxt = head[u];\n\tedge[tot].to = v;\n\thead[u] = tot;\n}\n\ninline void addedge(int u, int v)\n{\n\td[u]++, d[v]++, add(u, v), add(v, u);\n}\n\nvoid dfs(int u)\n{\n\tfor (int &i = head[u];i;i = edge[i].nxt)\n\t{\n\t\tif (!vis[i])\n\t\t{\n\t\t\tint v = edge[i].to;vis[i] = vis[i ^ 1] = true;\n\t\t\tdfs(v);\n\t\t\tif ((++pos) & 1) printf(\"%d %d\\n\", u, v);\n\t\t\telse printf(\"%d %d\\n\", v, u);\n\t\t}\n\t\t\n\t}\n}\n\nint main(void)\n{\n\tn = read(), m = read();\n\tfor (int i = 1;i <= m;i++)\n\t{\n\t\tint u = read(), v = read();\n\t\taddedge(u, v);\n\t}\n\tfor (int i = 1;i <= n;i++)\n\t\tif (d[i] & 1) q.push_back(i);\n\tfor (int i = 0;i < q.size();i += 2)\n\t\taddedge(q[i], q[i + 1]), m++;\n\tif (m & 1) m++, addedge(1, 1);\n\tprintf(\"%d\\n\", m);dfs(1);\n\treturn 0;\n}\n```\n",
        "postTime": 1599485854,
        "uid": 246019,
        "name": "_came11ia_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF527E \u3010Data Center Drama\u3011"
    },
    {
        "content": "\u82e5\u6bcf\u4e2a\u70b9\u7684\u51fa\u5165\u5ea6\u90fd\u662f\u5076\u6570\uff0c\u5219\u6bcf\u4e2a\u70b9\u7684\u603b\u5ea6\u6570\u90fd\u662f\u5076\u6570\uff0c\u8fd9\u662f\u65e0\u5411\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5145\u8981\u6761\u4ef6\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9996\u5148\u5c06\u6240\u6709\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u8fb9\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\n\n\u5982\u679c\u8fb9\u6570\u4e3a\u5947\u6570\uff0c\u56e0\u4e3a\u5c06\u65e0\u5411\u56fe\u5b9a\u5411\u540e\uff0c$\\text{\u51fa\u5ea6\u548c}=\\text{\u5165\u5ea6\u548c}=m$\uff0c\u800c\u5076\u6570\u7684\u548c\u4e0d\u53ef\u80fd\u4e3a\u5947\u6570\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u6211\u4eec\u9700\u8981\u52a0\u5165\u4e00\u4e2a\u81ea\u73af\u4f7f\u5f97\u8fb9\u6570\u4e3a\u5076\u6570\n\n\u6700\u540e\u6211\u4eec\u8dd1\u51fa\u6765\u4e00\u6761\u6b27\u62c9\u56de\u8def\uff0c\u6211\u4eec\u4f7f\u8def\u5f84\u4e0a\u7684\u8fb9\u6b63\u5411\u4e0e\u53cd\u5411\u4ea4\u66ff\uff0c\u5219\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u70b9\uff0c\u8be5\u70b9\u5165\u5ea6/\u51fa\u5ea6 $+2$\uff0c\u6ee1\u8db3\u5165\u5ea6\u4e0e\u51fa\u5ea6\u5747\u4e3a\u5076\u6570\n\n```cpp\n//timeuse:15min\nconst int N = 100010,M = 400010;\nint n,m,d[N],id;bool vis[M << 1];\nstruct edge { int to,nxt; }e[M << 1];int head[N],cnt = 1;\nvoid add(int u,int v) { e[++cnt].to = v,e[cnt].nxt = head[u],head[u] = cnt; }\nvoid add_edge(int u,int v) { d[u]++,d[v]++,add(u,v),add(v,u); }\nvoid dfs(int u)\n{\n\tfor(int &i = head[u],v;i;i = e[i].nxt) if(!vis[i])\n\t{\n\t\tv = e[i].to,vis[i] = vis[i ^ 1] = 1;\n\t\tdfs(v);\n\t\tif((++id) & 1) pprint(u),fprint(v);\n\t\telse pprint(v),fprint(u);\n\t}\n}\nint main()\n{\n\tn = read(),m = read();\n\tfor(int i = 1;i <= m;i++) add_edge(read(),read());\n\tvector<int> p;\n\tfor(int i = 1;i <= n;i++) if(d[i] & 1) p.push_back(i);\n\tfor(int i = 0;i < p.size();i += 2) add_edge(p[i],p[i + 1]),m++;\n\tif(m & 1) m++,add_edge(1,1);\n\tfprint(m),dfs(1);\n\treturn 0;\n}\n```",
        "postTime": 1593072428,
        "uid": 53994,
        "name": "81179332_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF527E \u3010Data Center Drama\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\n\n\u7ed9\u4f60\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u6c42\u52a0\u6700\u5c11\u7684\u8fb9\uff0c\u4f7f\u5f97\u6784\u6210\u7684\u6709\u5411\u56fe\u4e2d\u70b9\u7684\u51fa\u8def\u5165\u5ea6\u5747\u4e3a\u5076\u6570\u3002\n\n\u8bb0\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u4e3a\u5947\u70b9\uff0c\u5176\u4f59\u4e3a\u5076\u70b9\u3002\n\n\u9996\u5148\u9898\u76ee\u4e2d\u7ed9\u7684\u8981\u6c42\u662f\u4e00\u4e2a\u56fe\u6709**\u6b27\u62c9\u56de\u8def**\u7684\u5145\u8981\u6761\u4ef6\u3002\n\n\u8003\u8651\u6784\u9020\uff0c\u5141\u8bb8\u91cd\u8fb9\u81ea\u73af\u3002\n\n\u91cd\u8fb9\u53ef\u4ee5\u6539\u53d8\u4e00\u70b9\u51fa\u5ea6\uff0c\u4e00\u70b9\u5165\u5ea6\u7684\u5947\u5076\u6027\uff0c\u4f46\u662f\u8fd9\u6bd4\u8f83\u9ebb\u70e6\u3002\n\n\u81ea\u73af\u53ef\u4ee5\u6539\u53d8\u4e00\u70b9\u51fa\u5165\u5ea6\u7684\u5947\u5076\u6027\uff0c**\u4e0d\u6539\u53d8\u5176\u662f\u5947\u70b9\u8fd8\u662f\u5076\u70b9**\u3002\n\n\u53ea\u9700\u8981\u5728\u5947\u70b9\u4e4b\u95f4\u8fde\u8fb9\uff0c\u591a\u51fa\u6765\u7684\u8fde\u81ea\u73af\u3002\n\n\u6700\u540e\u5728\u56fe\u4e0a\u8dd1\u6b27\u62c9\u56de\u8def\u5373\u53ef",
        "postTime": 1584106316,
        "uid": 145078,
        "name": "RainSong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF527E \u3010Data Center Drama\u3011"
    },
    {
        "content": "# $$\\text{\u4e00\u9053\u6b27\u62c9\u56de\u8def\u9898}$$\n\n\u6700\u7ec8\u7684\u56fe\u662f\u6b27\u62c9\u56de\u8def\uff0c\u5219\u6bcf\u4e2a\u70b9\u6700\u7ec8\u7684\u5165\u5ea6\u7b49\u4e8e\u51fa\u5ea6\u3002\n\n\u82e5\u8be5\u56de\u8def\u957f\u4e3a\u5076\u6570\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u539f\u56fe\u4e2d\u6240\u6709\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u4f9d\u6b21\u8fde\u65e0\u5411\u8fb9\uff0c\u8fd9\u6837\u539f\u56fe\u6240\u6709\u70b9\u5ea6\u6570\u5747\u4e3a\u5076\u6570\n\n\u5728\u8fd9\u4e2a\u56fe\u4e0a\u8dd1\u6b27\u62c9\uff0c\u5373\u53ef\u5f97\u5230\u8def\u5f84\uff0c\u5c06\u5176\u53d8\u4e3a\u6709\u5411\u56fe\u7684\u6b27\u62c9\u56de\u8def\uff0c\u8fd9\u6837\u65e0\u5411\u56fe\u7684\u5076\u6570\u5ea6\u6570\u4e00\u534a\u4e3a\u51fa\u5ea6\uff0c\u4e00\u534a\u4e3a\u5165\u5ea6\n\n\u82e5\u65e0\u5411\u8fb9\u603b\u6570\u4e3a\u5947\u6570\uff0c\u968f\u4fbf\u627e\u70b9\u52a0\u81ea\u73af\u5373\u53ef\n\n```c\n#include<bits/stdc++.h>\n#define MAXN 233333\nusing namespace std;\n\nint n,m;\nint u,v;\nint tot;//\u8fb9\u7684\u603b\u6570\nint du[MAXN];//\u6bcf\u4e2a\u70b9\u7684\u5ea6\nvector<int>oo,ans;\nmultiset<int>gg[MAXN];\n\ninline void AddEdge(int U,int V) {gg[U].insert(V);}\n\ntemplate<class T> inline void read(T &re)\n{\n\tre=0;T sign=1;char tmp;\n\twhile((tmp=getchar())&&(tmp<'0'||tmp>'9')) if(tmp=='-') sign=-1;re=tmp-'0';\n\twhile((tmp=getchar())&&(tmp>='0'&&tmp<='9')) re=re*10+(tmp-'0');re*=sign;\n}\n\nvoid DFS(int x)\n{\n\twhile(!gg[x].empty())\n\t{\n\t\tint v=*gg[x].begin();\n\t\tgg[x].erase(gg[x].begin());\n\t\tgg[v].erase(gg[v].find(x));\n\t\tDFS(v);\n\t}\n\tans.push_back(x);\n}\n\nint main()\n{\n\tread(n);read(m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tread(u);read(v);\n\t\tAddEdge(u,v);\n\t\tAddEdge(v,u);\n\t\ttot++;\n\t\tdu[v]++;\n\t\tdu[u]++;\n\t}//\u5b58\u56fe\n\n\tfor(int i=1;i<=n;i++) if(du[i]&1) oo.push_back(i);//\u8bb0\u5f55\u8fb9\n\n\tfor(int i=0;i<(int)oo.size();i+=2)\n\t{\n\t\tint uu=oo[i],vv=oo[i+1];\n\t\tAddEdge(uu,vv);\n\t\tAddEdge(vv,uu);\n\t\ttot++;\n\t}\n\n\tif(tot&1) {tot++,AddEdge(1,1),AddEdge(1,1);}//\u6dfb\u52a0\u81ea\u73af\u8fb9\n\n\tDFS(1);printf(\"%d\\n\",tot);\n\n\tfor(int i=0;i<(int)ans.size()-1;i++)\n\t{\n\t\tif(i&1) printf(\"%d %d\\n\",ans[i],ans[i+1]);\n\t\telse printf(\"%d %d\\n\",ans[i+1],ans[i]);\n\t}\n\n\treturn 0;\n}\n```\n\n\u6ce8\u610f\u8dd1\u6b27\u62c9\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u5220\u8fb9\uff0c\u5426\u5219\u4f1aT\uff01",
        "postTime": 1548163822,
        "uid": 117842,
        "name": "\u65e0\u610f\u8bc6\u8eba\u67aa\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF527E \u3010Data Center Drama\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u7528\u6b27\u62c9\u56de\u8def\u7684\u505a\u6cd5\u3002\uff08\u5176\u5b9e\u662f\u81ea\u5df1\u964d\u667a\u4e86\n\n\u9996\u5148\uff0c\u300c\u6bcf\u4e2a\u70b9\u5165\u5ea6\u548c\u51fa\u5ea6\u90fd\u662f\u5076\u6570\u300d\u7b49\u4ef7\u4e8e\u300c\u6bcf\u4e2a\u70b9\u5165\u5ea6\u662f\u5076\u6570\u4e14\u5728\u65e0\u5411\u56fe\u4e0a\u7684\u5ea6\u6570\u662f\u5076\u6570\u300d\u3002\u8fd9\u6837\uff0c\u628a\u65e0\u5411\u56fe\u4e0a\u6bcf\u4e2a\u70b9\u5ea6\u6570\u8865\u9f50\u5230\u5076\u6570\u662f\u5fc5\u8981\u7684\uff1a\u7531\u4e8e\u603b\u5ea6\u6570 $2m$ \u662f\u5076\u6570\uff0c\u90a3\u4e48\u5ea6\u6570\u662f\u5947\u6570\u7684\u70b9\u80af\u5b9a\u6709\u5076\u6570\u4e2a\uff0c\u53ef\u4ee5\u4e24\u4e24\u914d\u5bf9\u8fde\u8fb9\uff0c\u4f7f\u52a0\u8fb9\u6570\u8fbe\u5230\u4e86\u4e0b\u754c\u3002\n\n\u63a5\u4e0b\u6765\u8fd8\u8981\u6ee1\u8db3\u6bcf\u4e2a\u70b9\u5165\u5ea6\u90fd\u662f\u5076\u6570\u3002\u4e00\u4e2a\u5fc5\u8981\u6761\u4ef6\u662f\u6bcf\u4e2a\u70b9\u5165\u5ea6\u4e4b\u548c\uff08\u663e\u7136\u4e5f\u5c31\u662f $m$\uff09\u662f\u5076\u6570\u3002\u4e8e\u662f\u5982\u679c $m$ \u662f\u5947\u6570\uff0c\u9700\u8981\u518d\u968f\u4fbf\u52a0\u4e00\u6761\u8fb9\u3002\n\n\u6b64\u65f6\u5df2\u7ecf\u53ef\u4ee5\u7ed9\u51fa\u6784\u9020\u65b9\u6848\u4e86\uff0c\u52a0\u8fb9\u6570\u663e\u7136\u8fbe\u5230\u4e0b\u754c\u3002\u4e0d\u540c\u4e8e\u5176\u4ed6\u9898\u89e3\u7684\u662f\uff0c\u6211\u4e0d\u662f\u7528\u6b27\u62c9\u56de\u8def\u6784\u9020\u65b9\u6848\u7684\u3002\n\n\u5148\u7ed9\u6bcf\u6761\u8fb9\u968f\u610f\u5b9a\u5411\uff0c\u7b97\u51fa\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u3002\u7c7b\u4f3c\u4e8e\u672c\u7bc7\u9898\u89e3\u7b2c\u4e8c\u6bb5\u5730\uff0c\u6574\u51fa\u6240\u6709\u5165\u5ea6\u662f\u5947\u6570\u7684\u70b9\uff0c\u7531\u4e8e\u5165\u5ea6\u4e4b\u548c\u662f\u5076\u6570\uff0c\u8fd9\u6837\u7684\u70b9\u4e00\u5b9a\u6709\u5076\u6570\u4e2a\uff0c\u53ef\u4ee5\u4e24\u4e24\u5339\u914d\u3002\n\n\u4e0d\u80fd\u518d\u52a0\u8fb9\u4e86\uff0c\u90a3\u4e48\u5339\u914d\u7684\u6bcf\u4e00\u5bf9\u600e\u4e48\u8c03\u6574\u5462\uff1f\u7531\u4e8e\u56fe\u662f\u8fde\u901a\u7684\uff0c\u5bb9\u6613\u53d1\u73b0\uff0c\u627e\u5230\u4e24\u70b9\u95f4\u7684\u4efb\u610f\u4e00\u6761\u8def\u5f84\uff08\u627e\u8def\u5f84\u65f6\u89c6\u4e3a\u65e0\u5411\u56fe\uff09\uff0c\u5c06\u4e0a\u9762\u7684\u8fb9\u5168\u90e8\u53cd\u5411\u5373\u53ef\u3002\u56e0\u4e3a\u4ee4\u67d0\u4e2a\u70b9 $x$ \u7684\u4e00\u6761\u90bb\u8fb9\u53cd\u5411\uff0c\u80fd\u4f7f $x$ \u7684\u5165\u5ea6\u5947\u5076\u6027\u7ffb\u8f6c\uff1b\u800c\u4e00\u6761\u8def\u5f84\u4e0a\u53ea\u6709\u4e24\u7aef\u88ab\u7ffb\u8f6c\u4e86\u5947\u6570\u6b21\uff08\u4e00\u6b21\uff09\uff0c\u4e2d\u95f4\u70b9\u90fd\u88ab\u7ffb\u8f6c\u4e86\u5076\u6570\u6b21\uff08\u4e24\u6b21\uff09\u3002\n\n\u66b4\u529b\u627e\u8def\u5f84\uff0c\u6700\u574f\u4f1a\u8fbe\u5230 $\\mathrm O(n^2)$\uff0c\u600e\u4e48\u529e\u5462\uff1fdfs \u6811\u662f\u4e2a\u597d\u4e1c\u897f\u3002\u5efa\u51fa dfs \u6811\uff0c\u7ffb\u8f6c\u4e24\u70b9\u95f4\u7684\u6811\u4e0a\u552f\u4e00\u7b80\u5355\u8def\u5f84\uff0c\u6811\u4e0a\u5dee\u5206\u5373\u53ef\u3002",
        "postTime": 1673258486,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "CF527E - Data Center Drama \u9898\u89e3"
    },
    {
        "content": "https://www.luogu.com.cn/problem/CF527E\n\n\u8981\u6ce8\u610f\u56fe\u662f\u8054\u901a\u7684\n\n\u9996\u5148\u8981\u77e5\u9053\n\n**\u82e5\u6bcf\u4e2a\u70b9\u7684\u51fa\u5165\u5ea6\u90fd\u662f\u5076\u6570\uff0c\u5219\u6bcf\u4e2a\u70b9\u7684\u603b\u5ea6\u6570\u662f\u5076\u6570\uff0c\u662f\u4e00\u5f20\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5145\u8981\u6761\u4ef6\u3002**\n\n\u7136\u540e\u5bf9\u4e8e\u539f\u56fe\uff0c\u5148\u628a\u603b\u5ea6\u6570\u662f\u5947\u6570\u7684\u4e24\u4e24\u76f8\u8fde\n\n\u5c31\u4fdd\u8bc1\u4e86\u5b58\u5728\u6b27\u62c9\u56de\u8def\n\n\u4f46\u8fd9\u6837\u4e0d\u80fd\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u51fa\u5ea6\u548c\u51fa\u5ea6\u90fd\u662f\u5076\u6570\n\n\u53ef\u80fd\u5b58\u5728\u6bcf\u4e2a\u70b9\u7684\u8fb9\u6570\u90fd\u662f\u5076\u6570\uff0c\u4f46\u662f\u603b\u8fb9\u6570\u4e3a\u5947\u6570\n\n\u5982\uff1a\n\n1-2 \uff0c 2-3\uff0c 1-3\n\n\u6240\u4ee5\u8981\u968f\u4fbf\u627e\u4e00\u4e2a\u70b9\u8fde\u4e2a\u81ea\u73af\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u603b\u8fb9\u6570\u662f\u5076\u6570\n\n\n\n\u8dd1\u4e00\u8fb9\u6b27\u62c9\u56de\u8def\uff0c\u8fb9\u7684\u65b9\u5411\u4ea4\u66ff\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u518d\u51fa\u53bb\u7684\u8fd9\u4e24\u6761\u8fb9\u8981\u4e48\u540c\u65f6\u662f\u51fa\u8fb9\uff0c\u8981\u4e48\u540c\u65f6\u662f\u5165\u8fb9\n\ncode:\n\n\n```cpp\n#include<bits/stdc++.h>\n#define N 800005\nusing namespace std;\nstruct edge {\n\tint v, nxt;\n} e[N << 1];\nint p[N], eid;\nvoid init() {\n//\tmemset(p, -1, sizeof p);\n\teid = 2;\n}\nvoid insert(int u, int v) {\n\te[eid].v = v;\n\te[eid].nxt = p[u];\n\tp[u] = eid ++;\n}\nint n, m, in[N], vis[N << 1], gs, sz, a[N];\nvoid dfs(int u) {\n\tfor(int &i = p[u]; i; i = e[i].nxt) {\n\t\tif(vis[i]) continue;\n\t\tvis[i] = vis[i ^ 1] = 1;\n\t\tint v = e[i].v;\n\t\tdfs(v);\n\t\tif((++ gs) & 1) printf(\"%d %d\\n\", u, v);\n\t\telse printf(\"%d %d\\n\", v, u);//\u4ea4\u66ff\u5b9a\u5411 \n\t\t//dfs(v);\n\t}\n}\nint main() {\n\tinit();\n\tscanf(\"%d%d\", &n ,&m);\n\tfor(int i = 1; i <= m; i ++) {\n\t\tint u, v;\n\t\tscanf(\"%d%d\", &u, &v);\n\t\tinsert(u, v);\n\t\tinsert(v, u);\n\t\tin[u] ++, in[v] ++;\n\t}\n\tfor(int i = 1; i <= n; i ++) if(in[i] & 1) a[++ sz] = i;\n\tfor(int i = 1; i <= sz; i += 2) insert(a[i], a[i + 1]), insert(a[i + 1], a[i]), ++ m;\n\tif(m & 1) insert(1, 1), insert(1, 1), ++ m;\n\tprintf(\"%d\\n\", m);\n\tdfs(1); \n\treturn 0;\n}\n\n```\n\u4e3b\u8981\u662f\u770b\u5230\u5ea6\u6570\u5076\u6570\u8981\u8054\u60f3\u5230\u6b27\u62c9\u56de\u8def\uff0c\u505a\u8fd9\u79cd\u9898\u601d\u7ef4\u8981\u8df3\u8dc3\u4e00\u4e9b\n\n",
        "postTime": 1616332544,
        "uid": 31656,
        "name": "lomit",
        "ccfLevel": 8,
        "title": "CF527E Data Center Drama"
    },
    {
        "content": "## \u9898\u610f\n\n- \u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u65e0\u5411\u56fe\u3002\n- \u4f60\u9700\u8981\u52a0\u5c3d\u53ef\u80fd\u5c11\u7684\u8fb9\uff0c\u7136\u540e\u7ed9\u6240\u6709\u8fb9\u5b9a\u5411\uff0c\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u70b9\u7684\u51fa\u5165\u5ea6\u90fd\u662f\u5076\u6570\u3002\n- \u8fb9\u53ef\u4ee5\u662f\u81ea\u73af\uff0c\u4e5f\u53ef\u4ee5\u6709\u91cd\u8fb9\u3002\n- $n \\le 10^5$ \uff0c$m \\le 2 \\times 10^5$\u3002\n\n## \u9898\u89e3\n\n### \u52a0\u8fb9\n\n**\u6bcf\u4e2a\u70b9\u7684\u603b\u5ea6\u6570\u662f\u5076\u6570\uff0c\u5373\u5165\u5ea6\u52a0\u51fa\u5ea6\u7684\u548c\u662f\u5076\u6570\uff0c\u662f\u4e00\u5f20\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u3002**\n\n\u7136\u540e\u5bf9\u4e8e\u539f\u56fe\uff0c\u5148\u628a\u5ea6\u6570\u548c\u4e3a\u5947\u6570\u7684\u8fb9\u8fdb\u884c\u8fde\u63a5\uff0c**\u6ce8\u610f\u4e0d\u662f\u4e24\u4e24\u76f8\u8fde\uff0c\u800c\u662f\u76f8\u90bb\u70b9\u76f8\u8fde**\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u5b58\u5728\u6b27\u62c9\u56de\u8def\u3002\u4f46\u8fd9\u6837\u4e0d\u80fd\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u51fa\u5ea6\u548c\u51fa\u5ea6\u90fd\u662f\u5076\u6570\u3002\u6bd4\u5982 $1-2$ ,$2-3$ ,$3-1$,\u603b\u5ea6\u6570\u4e3a\u5076\u6570\uff0c\u4f46\u6bcf\u4e2a\u70b9\u7684\u51fa\u5165\u5ea6\u4e0d\u53ef\u80fd\u540c\u65f6\u4e3a\u5076\u6570\u3002\u6240\u4ee5\uff0c\u5728\u8fd9\u4e2a\u57fa\u7840\u4e0a\uff0c\u8fd8\u8981\u5728\u603b\u8fb9\u6570\u4e3a\u5947\u6570\u65f6\u7ed9\u4efb\u610f\u4e00\u4e2a\u70b9\u8fde\u81ea\u73af\u3002\n\n### \u5b9a\u5411\n\u8dd1\u4e00\u8fb9\u6b27\u62c9\u56de\u8def\uff0c\u8fb9\u7684\u65b9\u5411\u4ea4\u66ff\uff08\u5982\u7b2c\u4e00\u6761\u8fb9\u4e3a $u$ \u8fde\u5411 $v$,\u7b2c\u4e8c\u6761\u8fb9\u4e3a $v$ \u8fde\u5411 $u$\uff09\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u52a0\u4e0a\u8fb9\u540e\u51fa\u5ea6\u548c\u5165\u5ea6\u8fd8\u662f\u5076\u6570\u3002\n\n### \u4ee3\u7801\n```cpp\n#include <cmath>\n#include <vector>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>//\u706b\u8f66\u5934\u5361\u5e38\n#define M 400010\n#define N 100010\n\nusing namespace std;\n\nstruct S{\n\tint nxt, to;\n}a[M << 1];\nint d[N], head[N], tot = 1;\n\nint z, n, m;\nbool vis[M << 1];\nvector<int> g;\n\ninline int read(){//\u5feb\u8bfb\n    char ch = getchar(); int x = 0;\n    while (!isdigit(ch)) ch = getchar();\n    while (isdigit(ch)) { x = x * 10 + ch - '0'; ch = getchar(); }\n    return x;\n}\n\ninline void dfs(int u){//\u5b9a\u5411\n\tfor(int i = head[u]; i; i = a[i].nxt){\n\t\tif(!vis[i]){\n\t\t\tint v = a[i].to;\n\t\t\tvis[i] = vis[i ^ 1] = 1;\n\t\t\tdfs(v);\n\t\t\tif((++z) & 1){\n\t\t\t\tprintf(\"%d %d\\n\", u, v);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tprintf(\"%d %d\\n\", v, u);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\ninline void add(int u, int v){\n\ta[++tot].nxt = head[u];\n\ta[tot].to = v;\n\thead[u] = tot;\n}\n\ninline void adda(int u, int v){//\u5efa\u56fe\n\td[u]++;d[v]++;\n\tadd(u, v);add(v, u);\n}\n\nint main(){\n\tn = read();m = read();\n\tfor(int i = 1; i <= m; i++){\n\t\tint u, v;\n\t\tu = read();v = read();\n\t\tadda(u, v);\n\t}\n\tfor(int i = 1; i <= n; i++){\n\t\tif(d[i] & 1){\n\t\t\tg.push_back(i);\n\t\t}\n\t}\n\tfor(int i = 0; i < g.size(); i += 2){\n\t\tadda(g[i], g[i + 1]);\n\t\tm++;\n\t}\n\tif(m & 1){\n\t\tm++;\n\t\tadda(1, 1);\n\t}//\u52a0\u8fb9\n\tprintf(\"%d\\n\", m);\n\tdfs(1);\n\treturn 0;\n}\n```\n",
        "postTime": 1645881171,
        "uid": 408759,
        "name": "ollo",
        "ccfLevel": 6,
        "title": "\u5e26\u6c34\u9898"
    }
]