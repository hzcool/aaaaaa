[
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u7ebf\u6027\u505a\u6cd5\u3002\n\n### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u4f60 $n$ \u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\u6216\u4e0d\u5220\uff0c\u6c42\u6700\u540e\u5b57\u7b26\u4e32\u5b57\u5178\u5e8f\u4e0d\u964d\u7684\u65b9\u6848\u6570\u3002\n\n$1 \\leq n \\leq 10^5,\\sum |S_i| \\leq 10^6$\n\n### \u9898\u76ee\u5206\u6790\n\n\u9996\u5148\u81ea\u7136\u5730\u60f3\u5230 dp\uff0c\u8bbe $f_{i,j}$ \u8868\u793a\u7b2c $i$ \u4e2a\u5b57\u7b26\u4e32\u5220\u6389\u7b2c $j$ \u4e2a\u5b57\u7b26\u65f6\uff0c$1 \\sim i$ \u5b57\u5178\u5e8f\u4e0d\u964d\u7684\u65b9\u6848\u6570\u3002\u8bbe $t_{i,j}$ \u4e3a\u7b2c $i$ \u4e2a\u5b57\u7b26\u4e32\u5220\u6389\u7b2c $j$ \u4e2a\u5b57\u7b26\u540e\u7684\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48 $f_{i,j}=\\displaystyle\\sum_{t_{i-1,k}\\leq t_{i,j}}f_{i-1,k}$\u3002\n\n\u66b4\u529b\u505a dp \u7684\u590d\u6742\u5ea6\u662f $\\mathcal O(|S|^2\\log |S|)$ \u7684\uff08\u6bd4\u8f83\u5b57\u7b26\u4e32\u7528\u4e8c\u5206+\u54c8\u5e0c\uff0c\u4e0d\u518d\u8d58\u8ff0\uff09\u3002\u4f46\u662f\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a $i$ \u5c06 $t_{i,j}$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u90a3\u4e48\u53ef\u4ee5\u8f6c\u79fb\u7684 $f_{i-1,k}$ \u4e00\u5b9a\u662f\u4e00\u6bb5\u524d\u7f00\uff0c\u4e14\u968f\u7740 $j$ \u589e\u5927\u800c\u589e\u5927\u3002\u6240\u4ee5\u53ea\u9700\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488\uff0c\u4ece\u5de6\u5230\u53f3\u626b\u4e00\u904d\uff0c\u8fd9\u6837\u6bcf\u4e2a $t_{i-1,k}$ \u53ea\u4f1a\u88ab\u6bd4\u8f83\u4e00\u6b21\u3002\u518d\u4f7f\u7528\u524d\u7f00\u548c\u4f18\u5316\uff0c\u5373\u53ef\u505a\u5230 $\\mathcal O(|S|\\log |S|)$\u3002\n\n---\n\n\u5982\u4f55\u5c06 $t_{i,j}$ \u6392\u5e8f\u5462\uff1f\u8003\u8651\u4ee5\u4e0b\u5b57\u7b26\u4e32\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/8eep564l.png)\n\n\u53d1\u73b0\u5bf9\u4e8e\u76f8\u540c\u5b57\u7b26\u6bb5\u7684 $j$\uff0c$t_{i,j}$ \u90fd\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u53ea\u7528\u6bd4\u8f83\u4e0d\u540c\u5b57\u7b26\u6bb5\u4e4b\u95f4\u7684\u5b57\u5178\u5e8f\u3002\n\n\u5047\u8bbe\u73b0\u5728\u5206\u522b\u5220\u4e86 $\\texttt{b}$ \u548c $\\texttt{a}$\uff0c\u90a3\u4e48\u539f\u4e32\u53d8\u6210\u4e86\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/1xg8qfzs.png)\n\n\u5982\u679c\u5220\u7684\u662f $\\texttt{b}$\uff0c\u90a3\u4e48\u539f\u672c $\\texttt{b}$ \u6bb5\u7684\u6700\u540e\u4e00\u4f4d\u53d8\u6210\u4e86**\u4e0b\u4e00\u4e2a\u5b57\u7b26** $\\texttt{a}$\uff1b\u800c\u5982\u679c\u5220\u7684\u662f $\\texttt{a}$\uff0c\u90a3\u4e48 $\\texttt{b}$ \u6bb5\u7684\u6700\u540e\u4e00\u4f4d\u8fd8\u662f $\\texttt{b}$\u3002\u800c $\\texttt{a} < \\texttt{b}$\uff0c\u6240\u4ee5\u5220 $\\texttt{b}$ \u6bd4\u5220 $\\texttt{a}$ \u5b57\u5178\u5e8f\u5c0f\u3002\n\n\u518d\u6bd4\u5982\u5220 $\\texttt{c}$\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/5mb43n5x.png)\n\n\u5220 $\\texttt{c}$ \u540e $\\texttt{b}$ \u6bb5\u7684\u6700\u540e\u4e00\u4f4d\u8fd8\u662f $\\texttt{b}$\uff0c\u6240\u4ee5\u4ecd\u7136\u6bd4\u5220 $\\texttt{b}$ \u5927\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a\u82e5\u7b2c $i$ \u4e2a\u5b57\u7b26\u6bb5\u6bd4\u7b2c $i+1$ \u4e2a\u5b57\u7b26\u6bb5\u7684\u5b57\u7b26\u5927\uff0c\u90a3\u4e48\u5220 $i$ \u6bd4\u6240\u6709\u5220 $j(j>i)$ \u5f97\u5230\u7684\u5b57\u7b26\u4e32\u5c0f\u3002\u56e0\u4e3a\u5220 $i$ \u540e\u7b2c $i$ \u6bb5\u7684\u6700\u540e\u4e00\u4e2a\u53d8\u6210\u4e86\u7b2c $i+1$ \u6bb5\u7684\u5b57\u7b26\uff0c\u800c\u5220\u5176\u4ed6\u7684\u4e0d\u53d8\u3002\n\n\u540c\u7406\uff0c\u82e5\u7b2c $i$ \u4e2a\u5b57\u7b26\u6bb5\u6bd4\u7b2c $i+1$ \u4e2a\u5b57\u7b26\u6bb5\u7684\u5b57\u7b26\u5c0f\uff0c\u90a3\u4e48\u5220 $i$ \u6bd4\u6240\u6709\u5220 $j(j>i)$ \u5f97\u5230\u7684\u5b57\u7b26\u4e32\u5927\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/6j92ai6z.png)\n\n\u6240\u4ee5\u4ece\u524d\u5f80\u540e\u626b\u4e00\u904d\u5b57\u7b26\u6bb5\uff0c\u5982\u679c\u5b83\u6bd4\u4e0b\u4e00\u4e2a\u5b57\u7b26\u6bb5\u5c0f\uff0c\u5c31\u653e\u5230\u6392\u540d\u6700\u540e\uff0c\u5426\u5219\u653e\u5230\u6700\u524d\u3002\u6392\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(|S|)$\u3002\n\n---\n\n\u63a5\u4e0b\u6765\u8fdb\u4e00\u6b65\u4f18\u5316 dp\u3002\n\n\u53d1\u73b0\u590d\u6742\u5ea6\u74f6\u9888\u5728\u4e8e\u6bd4\u8f83\u5b57\u7b26\u4e32\u5927\u5c0f\uff08\u524d\u9762\u7528\u7684\u662f\u4e8c\u5206+\u54c8\u5e0c\uff09\uff0c\u8003\u8651\u4f18\u5316\u6bd4\u8f83\u65b9\u6cd5\u3002\n\n\u5047\u8bbe\u73b0\u5728\u6bd4\u8f83\u7684\u662f $t_{i-1,j}$ \u548c $t_{i,k}$\uff0c\u4e14 $j<k$\uff0c\u90a3\u4e48\u76f8\u5bf9\u4e8e\u539f\u4e32\uff0c\u5b83\u7684\u6bd4\u8f83\u662f\u5f62\u5982\u8fd9\u6837\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/oqmdc9x2.png)\n\n\u5bf9\u4e8e\u7b2c 1,3 \u90e8\u5206\uff0c\u53ef\u4ee5\u5bf9 $s_{i-1}$ \u7684\u6bcf\u4e2a\u4f4d\u7f6e\u7ef4\u62a4\u540e\u9762\u7b2c\u4e00\u4e2a $s_{i-1,j}$\n\u4e0e $s_{i,j}$ \u4e0d\u540c\u7684\u4f4d\u7f6e\uff1b\u5bf9\u4e8e\u7b2c 2 \u90e8\u5206\uff0c\u540c\u7406\uff0c\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u7ef4\u62a4\u540e\u9762\u7b2c\u4e00\u4e2a $s_{i-1,j}$ \u4e0d\u7b49\u4e8e $s_{i,j-1}$ \u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2\u6bcf\u4e00\u90e8\u5206\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\u6765\u6bd4\u8f83\u5927\u5c0f\u3002\u9884\u5904\u7406\u662f $\n\\mathcal O(|S_i|)$ \u7684\uff0c\u67e5\u8be2\u53ef\u4ee5\u505a\u5230 $\\mathcal O(1)$\u3002\n\n$j > k$ \u548c $j=k$ \u7684\u60c5\u51b5\u4e5f\u5dee\u4e0d\u591a\uff0c\u53ea\u662f\u7b2c 2 \u90e8\u5206\u4e0d\u4e00\u6837\u3002\n\n\u4e8e\u662f\u73b0\u5728\u5c31\u53ef\u4ee5 $\\mathcal O(1)$ \u6bd4\u8f83\u5b57\u7b26\u4e32\u5927\u5c0f\u4e86\uff0cdp \u590d\u6742\u5ea6\u53d8\u6210\u4e86 $\\mathcal O(\\sum|S_i|)$\u3002\u603b\u590d\u6742\u5ea6\u4e3a $\\mathcal O(n+\\sum|S_i|)$\u3002\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define fr(i,x,y) for(register ll i=(x);i<=(y);i++)\n#define mod 1000000007\nusing namespace std;\nll n,len[100010],nxt[1000010],pre[1000010],suf[1000010];\nll id[2][1000010],f[2][1000010],sum[2][1000010];//\u6eda\u52a8\u6570\u7ec4\u4f18\u5316 \nstring s[100010];\nvoid init(ll x){//\u6392\u5e8f\u90e8\u5206 \n\tll lst=-1,l=0,r=len[x];\n\tfr(i,0,len[x]-2){\n\t\tif(s[x][i]<s[x][i+1]){\n\t\t\tfr(j,lst+1,i) id[x&1][--r]=j;\n\t\t\tlst=i;\n\t\t}\n\t\tif(s[x][i]>s[x][i+1]){\n\t\t\tfr(j,lst+1,i) id[x&1][l++]=j;\n\t\t\tlst=i;\n\t\t}\n\t}\n\tfr(i,lst+1,len[x]-1) id[x&1][l++]=i;\n}\nvoid solve(ll x){//\u9884\u5904\u7406\n\tll pos=0;\n\tfr(i,0,len[x]-1){\n\t\tif(pos<i) pos=i;\n\t\twhile(pos<len[x]&&pos<len[x+1]&&s[x][pos]==s[x+1][pos]) pos++;\n\t\tnxt[i]=pos;\n\t}\n\tpos=0;\n\tfr(i,0,len[x]-1){\n\t\tif(pos<=i) pos=i+1;\n\t\twhile(pos<len[x]&&(pos-1)<len[x+1]&&s[x][pos]==s[x+1][pos-1]) pos++;\n\t\tpre[i]=pos;\n\t}\n\tpos=0;\n\tfr(i,0,len[x]-1){\n\t\tif(pos<i) pos=i;\n\t\twhile(pos<len[x]&&(pos+1)<len[x+1]&&s[x][pos]==s[x+1][pos+1]) pos++;\n\t\tsuf[i]=pos;\n\t}\n}\ninline bool chk(ll x,ll pos1,ll pos2){//O(1)\u6bd4\u8f83\u5927\u5c0f \n\tll len1=len[x]-2,len2=len[x+1]-2;\n\tif(pos1>len1) len1++;\n\tif(pos2>len2) len2++;\n\tif(nxt[0]<pos1&&nxt[0]<pos2) return s[x][nxt[0]]<s[x+1][nxt[0]];\n\tif(pos1<pos2&&pre[pos1]<=pos2){\n\t\tif(pre[pos1]>=len[x]) return len1<=len2;\n\t\treturn s[x][pre[pos1]]<s[x+1][pre[pos1]-1];\n\t}\t\n\tif(pos1>pos2&&suf[pos2]<pos1){\n\t\tif((suf[pos2]+1)>=len[x+1]) return len1<=len2;\n\t\treturn s[x][suf[pos2]]<s[x+1][suf[pos2]+1];\n\t}\n\tll tmp=max(pos1,pos2)+1;\n\tif(tmp>=len[x]||tmp>=len[x+1]) return len1<=len2;\n\tif(nxt[tmp]<len[x]&&nxt[tmp]<len[x+1]) return s[x][nxt[tmp]]<s[x+1][nxt[tmp]];\n\treturn len1<=len2;\n}\nint main(){\n\tscanf(\"%lld\",&n);\n\tfr(i,1,n){\n\t\tcin>>s[i];\n\t\ts[i]+='a';\n\t\tlen[i]=s[i].size();\n\t}\n\tfr(i,0,len[1]-1) f[1][i]=1;\n\tfr(i,0,len[1]-1) sum[1][i]=i+1;\n\tinit(1);\n\tfr(i,2,n){\n\t\tsolve(i-1);\n\t\tinit(i);\n\t\tll o=i&1;\n\t\tfr(j,0,len[i]-1) f[o][j]=sum[o][j]=0;\n\t\tll pos=0;\n\t\tfr(j,0,len[i]-1){\n\t\t\twhile(pos<len[i-1]&&chk(i-1,id[o^1][pos],id[o][j])) pos++;\n\t\t\tif(pos) f[o][j]=sum[o^1][pos-1];\n\t\t\tsum[o][j]=f[o][j];\n\t\t\tif(j) sum[o][j]=(sum[o][j]+sum[o][j-1])%mod;\n\t\t}\n\t}\n\tprintf(\"%lld\",sum[n&1][len[n]-1]);\n}\n```",
        "postTime": 1677055277,
        "uid": 224336,
        "name": "AFewSuns",
        "ccfLevel": 8,
        "title": "\u3010\u9898\u89e3\u3011CF1393E2 Twilight and Ancient Scroll (harder version)"
    },
    {
        "content": "**\u672c\u9898\u9700\u8981\u5efa\u7acb\u5728\u7406\u89e3Easier Version \u7684\u57fa\u7840\u4e0a\u624d\u80fd\u7406\u89e3\uff0c\u8bf7\u5148\u9605\u8bfb[Easier Vesion\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/huayucaji/solution-cf1393e1)\u3002**\n\n\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6237\u662f\u6392\u5e8f\u548cDP\uff0c\u6211\u4eec\u6765\u5206\u522b\u4f18\u5316\u8fd9\u4e24\u4e2a\u90e8\u5206\u3002\n\n#### \u4f18\u5316DP\n\n\u8fd9\u4e2a\u5730\u65b9\u5176\u5b9e\u5f88\u597d\u60f3\uff0c\u6211\u4eec\u6392\u597d\u5e8f\u540e\u7684\u5b57\u7b26\u4e32\u662f\u6709\u5e8f\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u7528\u00b7\u4e8c\u5206\u67e5\u627e\uff08$\\operatorname{upperbound}$\uff09\u67e5\u51fa\u6765\u7684\u7ed3\u679c $k$ \u662f\u5355\u8c03\u9012\u589e\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e24\u4e2a\u6307\u9488\u7ef4\u62a4\u4f4f $k$ \u548c\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u6b21\u5e8f\uff0c\u4f7f\u5f97\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u4e3a $O(L\\log L)$\uff0c\u7b26\u5408\u8981\u6c42\u3002\n\n#### \u4f18\u5316\u6392\u5e8f\n\n\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u5728\u6392\u5e8f\u7684\u65f6\u5019\u4e24\u4e2a\u5b57\u7b26\u4e32\u53ea\u6709\u4e24\u4e2a\u5b57\u7b26\u4e0d\u540c\uff0c\u4e5f\u5c31\u662f\u5c71\u533a\u7684\u4e24\u4e2a\u5b57\u7b26\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7b80\u5316\u6392\u5e8f\u3002\u6211\u4eec\u4ee4\u5b57\u7b26\u4e32\u4e2d\u5728 \u7b2c $i$ \u4e2a\u5b57\u7b26\u53f3\u8fb9\u7684\u7b2c\u4e00\u4e2a\u4e0e\u7b2c $i$ \u4e2a\u5b57\u7b26\u4e0d\u540c\u7684\u5b57\u7b26\u7684\u4e0b\u6807\u4e3a $nxt_i$\uff08\u6709\u70b9\u7ed5\u6ca1\u529e\u6cd5\uff0c\u672c\u4eba\u8bed\u6587\u4e0d\u597d\uff09\u3002\u6211\u4eec\u53ea\u8981\u89c2\u5bdf\u8fd9\u4e24\u4e2a\u5b57\u7b26\u7684\u5927\u5c0f\u5373\u53ef\u77e5\u9053\u5220\u53bb\u7b2c $i$ \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u6392\u5e8f\u540e\u6240\u5728\u7684\u4f4d\u7f6e\u3002\u6211\u4eec\u7ef4\u62a4 $l,r$ \u4ee3\u8868\u5f53\u524d\u5b57\u7b26\u4e32\u6240\u5728\u4f4d\u7f6e\u7684\u53ef\u80fd\u5019\u9009\u4eba\u3002\u5982\u679c $str_i>str_{nxt_i}$\uff0c\u90a3\u4e48\u5220\u53bb\u7b2c $i$ \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u6392\u5728\u7b2c $l$ \u4e2a\u4f4d\u7f6e\u3002\u5426\u5219\u653e\u5728\u7b2c $r$ \u4e2a\u4f4d\u7f6e\u3002\u6211\u4eec\u6765\u8bc1\u660e\u4e00\u4e0b\u3002\n\n**\u6211\u4eec\u53ea\u8bc1\u660e\u5982\u679c $str_i>str_{nxt_i}$\uff0c\u90a3\u4e48\u5220\u53bb\u7b2c $i$ \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u6392\u5728\u7b2c $l$ \u4e2a\u4f4d\u7f6e\u3002\u53cd\u4e4b\u8bc1\u660e\u4ea6\u7136\u3002**\n\n\u9996\u5148\u6211\u4eec\u901a\u8fc7 $nxt_i$ \u7684\u5b9a\u4e49\u53ef\u77e5\uff0c$[i,nxt_i-1]$ \u533a\u95f4\u5185\u7684\u5b57\u7b26\u90fd\u76f8\u7b49\u3002\u90a3\u4e48\u5220\u53bb\u4e86\u7b2c $i$ \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u548c\u5220\u53bb\u4e86\u7b2c $nxt_i+q\\ (nxt_i+q<len,q\\geq 0)$ \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u5bf9\u6bd4\u5982\u4e0b\u8868\uff1a\n\n||$i$|$i+1$|$i+2$|....|$nxt_i-1$|\n|--|--|---|--|--|--|\n|\u5220\u53bb\u4e86\u7b2c $i$ \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32|$str_{i+1}$|$str_{i+2}$|$str_{i+3}$|....|$str_{nxt_i}$|\n|\u5220\u53bb\u4e86\u7b2c $nxt_i+q$ \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32|$str_{i}$|$str_{i+1}$|$str_{i+2}$|....|$str_{nxt_i-1}$|\n\n\u56e0\u4e3a $[i,nxt_i-1]$ \u533a\u95f4\u5185\u7684\u5b57\u7b26\u90fd\u4e00\u6837\uff0c\u6240\u4ee5\u6211\u4eec\u6bd4\u8f83\u7684\u5c31\u662f $str_{nxt_i-1}$ \u4e0e $str_{nxt_i}$\u3002\u7531\u4e8e $str_i=str_{nxt_i-1}$\uff0c\u6240\u4ee5\u6211\u4eec\u6700\u540e\u53ea\u9700\u8981\u6bd4\u8f83 $str_i$ \u4e0e $str_{nxt_i}$ \u5c31\u53ef\u4ee5\u77e5\u9053\u5220\u53bb\u4e86\u7b2c $i$ \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u548c\u5220\u53bb\u4e86\u7b2c $nxt_i+q\\ (nxt_i+q<len,q\\geq 0)$ \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u5982\u679c $str_i<str_{nxt_i}$\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u5b9a\u5220\u53bb\u4e86\u7b2c $i$ \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u662f\u8fd8\u672a\u6392\u5e8f\u7684\u5b57\u7b26\u4e32\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\uff0c\u6240\u4ee5\u653e\u5728 $l$ \u4f4d\u7f6e\u4e0a\u3002\u53cd\u4e4b\u4ea6\u7136\u3002\u8bc1\u6bd5\u3002\n\n\u6211\u4eec\u6392\u5e8f\u7684\u65f6\u95f4\u4fbf\u964d\u4e3a\u4e86 $O(L)$\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(L\\log L+L)$ \u660e\u663e\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n\n~~\u53ef\u662f\u6211\u88ab\u5361\u5e38\u4e86~~\n\n\u8fd9\u79cd\u5176\u5b9e\u5361\u5e38\u6ca1\u610f\u601d\uff0c\u601d\u8def\u624d\u662f\u6700\u5173\u952e\u7684\uff0c\u6211\u5c31\u653e\u4e00\u4e2a\u88ab\u5361\u5e38\u7684\u4ee3\u7801\u5427\u3002\u53ef\u4ee5\u901a\u8fc7Easier Version\u9664 14th \u6d4b\u8bd5\u70b9\u7684\u6240\u6709\u6d4b\u8bd5\u70b9\uff08~~\u6885\u5f00\u4e8c\u5ea6~~\uff09\n\n```cpp\n//Don't act like a loser.\n//You can only use the code for studying or finding mistakes\n//Or,you'll be punished by Sakyamuni!!!\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int P[2]={33,37},MOD[2]={20060527,21071179},MAXN=1e5+10,ANSMOD=1e9+7; \n\nlong long f[2][MAXN*10],p[2][MAXN*10],tmp[MAXN*10];\nlong long sum[2][MAXN*10]={};\nint n=0,nxt[MAXN*10]={};\nvector<pair<int,int> > myhsh[MAXN];\nstring str[MAXN];\n\ninline void myhsh_generator(int x) {\n\tint ret[2]={};\n\tint sz=str[x].size();\n\tfor(int i=0;i<sz;i++) {\n\t\tfor(int j=0;j<=1;j++) {\n\t\t\tret[j]=(ret[j]*P[j]%MOD[j]+(int)str[x][i])%MOD[j];\n\t\t}\n\t\tmyhsh[x].push_back(make_pair(ret[0],ret[1]));\n\t}\n}\n \ninline pair<int,int> consecutive_myhsh_query(int x,int l,int r) {\n\tif(l>r) {\n\t\treturn make_pair(0,0);\n\t}\n\tpair<int,int> ret=make_pair(myhsh[x][r].first,myhsh[x][r].second);\n\tif(l!=0) {\n\t\tret.first=(ret.first-p[0][r-l+1]*myhsh[x][l-1].first%MOD[0]+MOD[0])%MOD[0];\n\t\tret.second=(ret.second-p[1][r-l+1]*myhsh[x][l-1].second%MOD[1]+MOD[1])%MOD[1];\n\t}\n\treturn ret;\n}\n \ninline pair<int,int> myhsh_query(int x,int l,int r,int del) {\n\tint sz=str[x].size();\n\tif(del<=l) {\n\t\tl++;\n\t}\n\tif(del<=r) {\n\t\tr++;\n\t}\n\tl=min(sz-1,l);\n\tr=min(sz-1,r);\n\tif(l<=del&&del<=r) {\n\t\tpair<int,int> left=consecutive_myhsh_query(x,l,del-1);\n\t\tpair<int,int> right=consecutive_myhsh_query(x,del+1,r);\n\t\tpair<int,int> ret=make_pair(0,0);\n\t\tret.first=(left.first*p[0][max(r-del,0)]%MOD[0]+right.first)%MOD[0];\n\t\tret.second=(left.second*p[1][max(r-del,0)]%MOD[1]+right.second)%MOD[1];\n\t\treturn ret;\n\t}\n\treturn consecutive_myhsh_query(x,l,r);\n}\n \ninline bool compare(int x,int delx,int y,int dely) {\n\tint l=0,r=min(str[x].size(),str[y].size())-2;\n\t\n\twhile(l<r) {\n\t\tint mid=(l+r)>>1;\n\t\tif(myhsh_query(x,l,mid,delx)==myhsh_query(y,l,mid,dely)) {\n\t\t\tl=mid+1;\n\t\t}\n\t\telse {\n\t\t\tr=mid;\n\t\t}\n\t}\n\tif(myhsh_query(x,l,l,delx)!=myhsh_query(y,l,l,dely)) {\n\t\treturn myhsh_query(x,l,l,delx)<=myhsh_query(y,l,l,dely);\n\t}\n\treturn str[x].size()<=str[y].size();\n}\n \nstruct strpair {\n\tint del,id;\n\t\n\tbool operator <=(const strpair& a)const {\n\t\treturn compare(id,del,a.id,a.del);\n\t}\n};\n \nstrpair make_strpair(int x,int y) {\n\tstrpair ret;\n\tret.del=x;\n\tret.id=y;\n\treturn ret;\n}\nvector<strpair> s[MAXN];\n \ninline void get_next(int x) {\n\tint sz=str[x].size();\n\tfill(nxt,nxt+sz,0);\n\t\n\tfor(int i=sz-1;i>=0;i--) {\n\t\tif(str[x][i]!=str[x][i+1]) {\n\t\t\tnxt[i]=i+1;\n\t\t} \n\t\telse {\n\t\t\tnxt[i]=nxt[i+1];\n\t\t}\n\t}\n}\n\nchar ch[MAXN*10];\n \nsigned main() {\n\tcin>>n;\n\tp[0][0]=1;p[1][0]=1;\n\tfor(int i=1;i<=1000000;i++) {\n\t\tp[0][i]=p[0][i-1]*P[0]%MOD[0];\n\t\tp[1][i]=p[1][i-1]*P[1]%MOD[1];\n\t}\n\t\n\tgets(ch);\n\tfor(int i=1;i<=n;i++) {\n\t\tgets(ch);\n\t\tstr[i]=ch;\n\t\tstr[i]=str[i]+'#';\n\t\tmyhsh_generator(i);\n\t\tget_next(i);\n\t\t\n\t\tint sz=str[i].size();\n\t\tint l=1,r=sz;\n\t\tfor(int j=0;j<sz;j++) {\n\t\t\tif(str[i][j]<str[i][nxt[j]]) {\n\t\t\t\ttmp[r--]=j;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttmp[l++]=j;\n\t\t\t}\n\t\t}\n\t\tfor(int j=1;j<=sz;j++) {\n\t\t\ts[i].push_back(make_strpair(tmp[j],i));\n\t\t}\n\t\t\n\t\t/*printf(\"\\n\");\n\t\tfor(vector<strpair>::iterator j=s[i].begin();j!=s[i].end();j++) {\n\t\t\tfor(int k=0;k<sz;k++) {\n\t\t\t\tif(k!=(*j).del) {\n\t\t\t\t\tcout<<str[i][k];\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t\tprintf(\"\\n\");*/\n\t}\n\t\n\tfor(int i=1;i<=n;i++) {\n\t\tint sz=str[i].size();\n\t\tint szlast=str[i-1].size();\n\t\t\n\t\tint k=-1;\n\t\tfor(int t=0;t<sz;t++) {\n\t\t\tif(i==1) {\n\t\t\t\tf[i][t]=1;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\twhile(k<szlast-1&&make_strpair(s[i-1][k+1].del,i-1)<=make_strpair(s[i][t].del,i)) {\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(k>=0) {\n\t\t\t\tf[i%2][t]=sum[(i-1)%2][k];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tf[i%2][t]=0;\n\t\t\t}\n\t\t}\n\t\tfor(int t=0;t<sz;t++) {\n\t\t\tsum[i%2][t]=((t==0? 0:sum[i%2][t-1])+f[i%2][t])%ANSMOD;\n\t\t}\n\t}\n\t\n\tcout<<sum[n%2][s[n].size()-1]<<endl; \n\treturn 0;\n}\n```",
        "postTime": 1597578245,
        "uid": 132976,
        "name": "huayucaiji",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1393E2 \u3010Twilight and Ancient Scroll (harder version)\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\u90aa\u9053\u3002\n## \u9898\u89e3\n\u8003\u8651 DP \u6bcf\u4e2a\u72b6\u6001\uff0c\u5373\u4e3a\u6bcf\u4e2a\u4e32\u548c\u5176\u5220\u53bb\u4e00\u4e2a\u5b57\u7b26\u7684\u6240\u6709\u60c5\u51b5\u3002\n\n\u72b6\u6001\u53ea\u6709 $O(\\sum|S_i|)$ \u4e2a\uff0c\u5c06\u5176\u5168\u90e8\u6392\u5e8f\u4e4b\u540e\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e0a\u5347\u5b50\u5e8f\u5217\u8ba1\u6570\u3002\n\n\u800c\u6bcf\u4e2a\u4e32\u53ef\u4ee5\u7531\u6240\u6709\u8f93\u5165\u62fc\u63a5\u7684**\u4e0d\u8d85\u8fc7\u4e24\u4e2a\u5b50\u4e32**\u62fc\u63a5\u800c\u6210\uff0c\u56e0\u6b64\u6bcf\u4e24\u4e2a\u4e32\u7684\u6bd4\u8f83\u53ef\u4ee5\u5728 $O(1)$ \u6b21 LCP \u7684\u6bd4\u8f83\u5185\u5b8c\u6210\u3002\n\n\u56e0\u4e3a\u8981\u6c42 LCP\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528\u540e\u7f00\u6570\u7ec4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\sum|S_i|\\log|S_i|)$\u3002\n\n\u4f46\u662f\u76f4\u63a5\u500d\u589e\u5efa\u4f1a\u88ab\u5361\u5e38\uff0c\u4f7f\u7528 SA-IS \u5373\u53ef\u901a\u8fc7\u3002\n\n\u7ec6\u8282\u8d3c\u591a\u3002\n## \u4ee3\u7801\n```cpp\n// Problem: E2. Twilight and Ancient Scroll (harder version)\n// Contest: Codeforces - Codeforces Round 662 (Div. 2)\n// URL: https://codeforces.com/contest/1393/problem/E2\n// Memory Limit: 256 MB\n// Time Limit: 1500 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n//\u4e0d\u56de\u5bb6\u4e86\uff0c\u6211\u4eec\u53bb\u9e1f\u5de2\uff01\n#include<bits/stdc++.h>\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"unroll-loops\")\nusing namespace std;\ninline int read(){\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\nint s[1000003];\nchar t[1000003];\nint nxt[1000003],cnt[1000003];\nint rk[1000003],sa[1000003],height[1000003];\nint st[1000003][20],l2[1000003];\nint L[100003],R[100003];\nint query(int l,int r)\n{\n\tint d=l2[r-l+1];\n\treturn min(st[l][d],st[r-(1<<d)+1][d]);\n}\nconst int p=1e9+7;\nint f[1000003],g[1000003],F,G;\nint fi[1000003],gi[1000003];\nint cmp(int x,int y,int len)\n{\n\tint z=query(min(rk[x],rk[y])+1,max(rk[x],rk[y]));\n\tif(z>=len) return 0;\n\telse if(s[x+z]<s[y+z]) return 1;\n\telse if(s[x+z]>s[y+z]) return -1;\n\telse return 0;\n}\nint LCP_[1000003];\nint cmp1(int x,int len)\n{\n\tint y=x+1;\n\tint z=LCP_[x];\n\tif(z>=len) return 0;\n\telse if(s[x+z]<s[y+z]) return 1;\n\telse if(s[x+z]>s[y+z]) return -1;\n\telse return 0;\n}\npair<int,int> A[13],B[13],*Aend,*Bend;\nbool cmp()\n{\n\tauto ix=A,iy=B;\n\twhile(ix!=Aend&&iy!=Bend)\n\t{\n\t\tauto [l1,r1]=*ix;  \t\n\t\tif(l1>r1){++ix;continue;}\n\t\tauto [l2,r2]=*iy;\n\t\tif(l2>r2){++iy;continue;}\n\t\tint len=min(r1-l1,r2-l2)+1;\n\t\tint Z=cmp(l1,l2,len);\n\t\tif(Z!=0) return Z==1;\n\t\tl1+=len,l2+=len,\n\t\t*ix={l1,r1},*iy={l2,r2};\n\t\tif(l1>r1) ++ix;\n\t\tif(l2>r2) ++iy;\n\t}\n\twhile(ix!=Aend&&ix->first>ix->second) ++ix;\n\twhile(iy!=Bend&&iy->first>iy->second) ++iy;\n\tif(ix==Aend) return 1;\n\telse return 0;\n}\nbool cmp(pair<int,int> a,pair<int,int> b)\n{\n\tA[0]=a,Aend=A+1,\n\tB[0]=b,Bend=B+1;\n\treturn cmp();\n}\nbool cmp(pair<pair<int,int>,pair<int,int>> a,pair<int,int> b)\n{\n\tA[0]=a.first,A[1]=a.second,Aend=A+2,\n\tB[0]=b,Bend=B+1;\n\treturn cmp();\n}\nbool cmp(pair<int,int> a,pair<pair<int,int>,pair<int,int>> b)\n{\n\tA[0]=a,Aend=A+1,\n\tB[0]=b.first,B[1]=b.second,Bend=B+2;\n\treturn cmp();\n}\nbool cmp(pair<pair<int,int>,pair<int,int>> a,pair<pair<int,int>,pair<int,int>> b)\n{\n\tA[0]=a.first,A[1]=a.second,Aend=A+2,\n\tB[0]=b.first,B[1]=b.second,Bend=B+2;\n\treturn cmp();\n}\nconst int N = 1e6 + 5 ;\nvoid induced_sort(const vector<int> &vec, int val_range, vector<int> &SA, const vector<bool> &sl, const vector<int> &lms_idx) {\n    vector<int> l(val_range, 0), r(val_range, 0);\n    for (int c : vec) {\n        if (c + 1 < val_range) ++l[c + 1];\n        ++r[c];\n    }\n    partial_sum(l.begin(), l.end(), l.begin());\n    partial_sum(r.begin(), r.end(), r.begin());\n    fill(SA.begin(), SA.end(), -1);\n    for (int i = lms_idx.size() - 1; i >= 0; --i)\n        SA[--r[vec[lms_idx[i]]]] = lms_idx[i];\n    for (int i : SA)\n        if (i >= 1 && sl[i - 1]) {\n            SA[l[vec[i - 1]]++] = i - 1;\n        }\n    fill(r.begin(), r.end(), 0);\n    for (int c : vec)\n        ++r[c];\n    partial_sum(r.begin(), r.end(), r.begin());\n    for (int k = SA.size() - 1, i = SA[k]; k >= 1; --k, i = SA[k])\n        if (i >= 1 && !sl[i - 1]) {\n            SA[--r[vec[i - 1]]] = i - 1;\n        }\n}\n\nvector<int> SA_IS(const vector<int> &vec, int val_range) {\n    const int n = vec.size();\n    vector<int> SA(n), lms_idx;\n    vector<bool> sl(n);\n    sl[n - 1] = false;\n    for (int i = n - 2; i >= 0; --i) {\n        sl[i] = (vec[i] > vec[i + 1] || (vec[i] == vec[i + 1] && sl[i + 1]));\n        if (sl[i] && !sl[i + 1]) lms_idx.push_back(i + 1);\n    }\n    reverse(lms_idx.begin(), lms_idx.end());\n    induced_sort(vec, val_range, SA, sl, lms_idx);\n    vector<int> new_lms_idx(lms_idx.size()), lms_vec(lms_idx.size());\n    for (int i = 0, k = 0; i < n; ++i)\n        if (!sl[SA[i]] && SA[i] >= 1 && sl[SA[i] - 1]) {\n            new_lms_idx[k++] = SA[i];\n        }\n    int cur = 0;\n    SA[n - 1] = cur;\n    for (size_t k = 1; k < new_lms_idx.size(); ++k) {\n        int i = new_lms_idx[k - 1], j = new_lms_idx[k];\n        if (vec[i] != vec[j]) {\n            SA[j] = ++cur;\n            continue;\n        }\n        bool flag = false;\n        for (int a = i + 1, b = j + 1;; ++a, ++b) {\n            if (vec[a] != vec[b]) {\n                flag = true;\n                break;\n            }\n            if ((!sl[a] && sl[a - 1]) || (!sl[b] && sl[b - 1])) {\n                flag = !((!sl[a] && sl[a - 1]) && (!sl[b] && sl[b - 1]));\n                break;\n            }\n        }\n        SA[j] = (flag ? ++cur : cur);\n    }\n    for (size_t i = 0; i < lms_idx.size(); ++i)\n        lms_vec[i] = SA[lms_idx[i]];\n    if (cur + 1 < (int)lms_idx.size()) {\n        auto lms_SA = SA_IS(lms_vec, cur + 1);\n        for (size_t i = 0; i < lms_idx.size(); ++i) {\n            new_lms_idx[i] = lms_idx[lms_SA[i]];\n        }\n    }\n    induced_sort(vec, val_range, SA, sl, new_lms_idx);\n    return SA;\n}\nvector<int> suffix_array(const string &s, const int LIM = 128) {\n    vector<int> vec(s.size() + 1);\n    copy(begin(s), end(s), begin(vec));\n    vec.back() = '$';\n    auto ret = SA_IS(vec, LIM);\n    ret.erase(ret.begin());\n    return ret;\n}\n\n// Author: https://codeforces.com/blog/entry/12796?#comment-175287\n// Uses kasai's algorithm linear in time and space\nvector<int> LCP(const string &s, const vector<int> &sa) {\n    int n = s.size(), k = 0;\n    vector<int> lcp(n), rank(n);\n    for (int i = 0; i < n; i++) rank[sa[i]] = i;\n    for (int i = 0; i < n; i++, k ? k-- : 0) {\n        if (rank[i] == n - 1) {\n            k = 0;\n            continue;\n        }\n        int j = sa[rank[i] + 1];\n        while (i + k < n && j + k < n && s[i + k] == s[j + k]) ++ k;\n        lcp[rank[i]] = k;\n    }\n    lcp[n - 1] = 0;\n    return lcp;\n}\nsigned main()\n{\n    rk[0]=19260817;\n    int N=read(),n=0;\n    string str;\n    for(int i=1; i<=N; ++i)\n    {\n    \tstring t;\n    \tcin>>t;\n    \tstr+=t;\n    \tL[i]=n+1;\n    \tR[i]=n+t.size();\n    \tfor(int j=L[i]; j<=R[i]; ++j)\n    \t\ts[j]=t[j-L[i]];\n    \tn=R[i];\n    }\n    vector<int> tmp=suffix_array(str);\n    for(int i=1; i<=n; ++i) sa[i]=tmp[i-1]+1; \n    for(int i=1; i<=n; ++i) rk[sa[i]]=i;\n    for(int i=1,k=0; i<=n; ++i)\n    {\n    \tk&&(--k);\n    \twhile(s[i+k]==s[sa[rk[i]-1]+k]) ++k;\n    \tst[rk[i]][0]=height[rk[i]]=k;\n    }\n    // for(int i=1; i<=n; ++i) printf(\"%d \",height[i]);\n    // puts(\"\");\n    // for(int i=1; i<=n; ++i,puts(\"\"))\n    \t// for(int j=sa[i]; j<=n; ++j)\n    \t\t// putchar(s[j]);\n    for(int i=n; i>=1; --i) \n    \tfor(int j=1; j<20; ++j) \n    \t\tst[i][j]=min(st[i][j-1],st[min(i+(1<<(j-1)),n)][j-1]);\n    for(int i=2; i<=n; ++i) l2[i]=l2[i>>1]+1;\n    for(int i=0; i<=R[1]-L[1]; ++i) f[i]=1,fi[i]=i;\n\tfor(int i=1; i<n; ++i) LCP_[i]=query(min(rk[i],rk[i+1])+1,max(rk[i],rk[i+1]));\n    \tsort(fi,fi+R[1]-L[1]+1,[&](int x,int y)\n    \t{\n    \t\tif(x<y) return cmp1(L[1]+x,y-x)==-1;\n    \t\telse return cmp1(L[1]+y,x-y)==1;\n    \t});\n    F=1;\n    for(int i=2; i<=N; ++i)\n    {\n    \tG=F,F=0;\n    \tfor(int j=0; j<=R[i-1]-L[i-1]; ++j) g[j]=f[j];\n    \tfor(int j=0; j<=R[i]-L[i]; ++j) f[j]=0;\n    \tif(cmp({L[i-1],R[i-1]},{L[i],R[i]})) F=G;\n    \tfor(int j=0; j<=R[i]-L[i]; ++j)\n    \t\tif(cmp({L[i-1],R[i-1]},\n    \t\t{{L[i],L[i]+j-1},{L[i]+j+1,R[i]}})) f[j]=(f[j]+G)%p;\n    \tfor(int j=0; j<=R[i-1]-L[i-1]; ++j)\n    \t\tif(cmp({{L[i-1],L[i-1]+j-1},{L[i-1]+j+1,R[i-1]}},\n    \t\t{L[i],R[i]})) F=(F+g[j])%p;\n    \tfor(int j=0; j<=R[i-1]-L[i-1]; ++j) gi[j]=fi[j];\n    \tfor(int j=0; j<=R[i]-L[i]; ++j) fi[j]=j;\n    \tsort(fi,fi+R[i]-L[i]+1,[&](int x,int y)\n    \t{\n    \t\tif(x<y) return cmp1(L[i]+x,y-x)==-1;\n    \t\telse return cmp1(L[i]+y,x-y)==1;\n    \t});\n    \tfor(int j=0,k=0,s=0; j<=R[i]-L[i]; ++j)\n    \t{\n    \t\twhile(k<=R[i-1]-L[i-1]&&\n    \t\tcmp({{L[i-1],L[i-1]+gi[k]-1},{L[i-1]+gi[k]+1,R[i-1]}},\n    \t\t{{L[i],L[i]+fi[j]-1},{L[i]+fi[j]+1,R[i]}}))\n    \t\t\ts=(s+g[gi[k++]])%p;\n    \t\tf[fi[j]]=(f[fi[j]]+s)%p;\n    \t}\n    }\n    int ans=F;\n    for(int i=0; i<=R[N]-L[N]; ++i) ans=(ans+f[i])%p;\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1678492818,
        "uid": 427683,
        "name": "\u5411\u665a\u5927\u9b54\u738b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1393E2"
    },
    {
        "content": "\u7ed9\u4f60 $n$ \u4e2a\u5b57\u7b26\u4e32\uff0c\u5bf9\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u53ef\u4ee5\u5220\u9664\u5176\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u6216\u8ba9\u5176\u4fdd\u6301\u539f\u6837\uff0c\u6c42\u6700\u540e\u4f7f\u5f97\u5b57\u7b26\u4e32\u5b57\u5178\u5e8f\u4e0d\u964d\u5f97\u65b9\u6848\u6570\u3002\n\n\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a $\\mathcal{O}(n(\\sum |S|)^2)$ \uff0c\u6211\u4eec\u5b9a\u4e49\u72b6\u6001 $f_{i,j}$ \u8868\u793a\u524d $i$ \u4e2a\u5b57\u7b26\u4e32\uff0c\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u662f\u7b2c $i$ \u4e2a\u5b57\u7b26\u4e32\u5220\u9664\u7b2c $j$ \u4e2a\u5b57\u7b26\u7684\u65b9\u6848\u6570\uff0c\u5982\u679c\u4e0d\u5220\u9664\u5219 $j = n + 1$ \u3002\n\n\u624b\u7b97\u4e00\u4e0b\u4e0d\u96be\u53d1\u73b0 $f_{i,j}$ \u662f $f_{i-1}$ \u4e2d\u5220\u9664 $k$ \u540e\u6bd4\u5f53\u524d\u4e32\u5220\u9664 $j$ \u540e\u5c0f\u7684\u4f4d\u7f6e\u7684 $f_{i-1,k}$ \u4e4b\u548c\u3002\u5982\u679c\u5bf9\u4e8e $j,k$ \u6309\u7167\u5220\u9664\u5bf9\u5e94\u4f4d\u7f6e\u540e\u5b57\u7b26\u4e32\u7684\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u8f6c\u79fb\u4e00\u5b9a\u662f\u4e00\u6bb5\u524d\u7f00\u548c\u3002\n\n\u5bf9\u8fd9\u4e9b\u4f4d\u7f6e\u6392\u5e8f\u53ef\u4ee5\u505a\u5230\u7ebf\u6027\uff0c\u5177\u4f53\u505a\u6cd5\u89c1[**\u8fd9\u9053\u9898**](https://www.luogu.com.cn/problem/P5329)\u3002\n\n\u6392\u5e8f\u540e\uff0c\u5982\u679c\u6211\u4eec\u7528\u53cc\u6307\u9488\u626b\u4e00\u904d\uff0c\u6211\u4eec\u4e00\u5171\u9700\u8981\u6bd4\u8f83 $\\mathcal{O}(\\sum |S|)$ \u6b21 $S_{i,j}$ \u548c $S_{i-1,k}$\uff0c\u5982\u679c\u76f4\u63a5\u6bd4\u8f83\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal{O}((\\sum |S|)^2)$ \u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u54c8\u5e0c\u52a0\u901f\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u4e8c\u5206\u51fa\u4e24\u4e2a\u4e32\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal{O}(\\sum|S|\\log )$ \u7684\u3002\n\n\u7ec6\u8282\u975e\u5e38\u591a\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5c55\u5f00\u8ba8\u8bba\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pre(i,a,b) for(int i=a;i>=b;i--)\nconst int N = 1000005, P = 1000000007, Q = 777777773, bas = 233;int pw[N];\nvoid calc(char *s,int *u,int n){\n\tint cur = 1, L = 1, R = n;\n\trep(i, 1, n)\n\t\tif(i == n){\n\t\t\tpre(j, n, R + 1)u[j + 1] = u[j];\n\t\t\twhile(cur)cur--, u[L++] = i - cur;\n\t\t\tu[L] = n + 1;\n\t\t}\n\t\telse if(s[i] == s[i + 1])cur++;\n\t\telse {\n\t\t\tif(s[i] < s[i + 1]){\n\t\t\t\twhile(cur)cur--, u[R--] = i - cur;\n\t\t\t}\n\t\t\telse{\n\t\t\t\twhile(cur)cur--, u[L++] = i - cur;\n\t\t\t}\n\t\t\tcur = 1;\n\t\t}\n}\nvoid init(char *s,int *u,int n){\n\tu[0] = 0;\n\trep(i, 1, n)u[i] = (1LL * u[i - 1] * bas + s[i]) % Q;\n}\nint get(int *u,int x,int ban){\n\tif(x < ban)return u[x];\n\tint res = x - ban + 1;\n\treturn (1LL * u[ban - 1] * pw[res] % Q + u[x + 1] - 1LL * u[ban] * pw[res] % Q + Q)% Q;\n}\nbool cmp(char *s,char *t,int *u,int *v,int x,int y,int lenu,int lenv){\n\tint ed = ~0,l = 1, r = std::min(lenu - (x <= lenu), lenv - (y <= lenv));\n\twhile(l <= r){\n\t\tint mid = (l + r) >> 1;\n\t\tif(get(u, mid, x) == get(v, mid, y))l = mid + 1;\n\t\telse r = mid - 1, ed = mid;\n\t}\n\tif(~ed)return s[ed + (ed >= x)] < t[ed + (ed >= y)];\n\telse return lenu - (x <= lenu) <= lenv - (y <= lenv);\n}\nint n,f[N],u[N],v[N],g[N],hs1[N],hs2[N];char s[N],t[N];\nint main(){\n\tpw[0] = 1;rep(i, 1, N - 5)pw[i] = 1LL * pw[i - 1] * bas % Q;\n\tscanf(\"%d\",&n);\n\tscanf(\"%s\",s + 1);\n\tint w = strlen(s + 1);\n\tcalc(s, u, w);init(s, hs1, w);\n\trep(i, 1, w + 1)f[i] = 1;\n\trep(op, 2, n){\n\t\tscanf(\"%s\", t + 1);\n\t\tint m = strlen(t + 1), j = 1, sum = 0;\n\t\tcalc(t, v, m);init(t, hs2, m);\n\t\trep(i, 1, m + 1)g[i] = 0;\n\t\trep(i, 1, m + 1){\n\t\t\twhile(j <= w + 1 && cmp(s, t, hs1, hs2, u[j], v[i], w, m))sum = (sum + f[j++]) % P;\n\t\t\tg[i] = sum;\n\t\t}\n\t\tw = m;rep(i, 1, m + 1)f[i] = g[i], s[i] = t[i], u[i] = v[i], hs1[i] = hs2[i];\n\t}\n\tint ans = 0;\n\trep(i, 1, w + 1)ans = (ans + f[i]) % P;\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1625563317,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF1393E2 Twilight and Ancient Scroll (harder version)"
    }
]