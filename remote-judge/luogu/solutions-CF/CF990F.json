[
    {
        "content": "\u770b\u5230\u8fd8\u6ca1\u6709\u4eba\u53d1\u9898\u89e3\uff0c\u4e0d\u5982\u6211\u6765\u4e00\u7bc7\uff1f\n\n\u5176\u5b9e\u505a\u8fd9\u9053\u9898\u7eaf\u7cb9\u662f\u56e0\u4e3a\u8fd9\u662f\u4e00\u9053\u53cc\u500d\u7ecf\u9a8c\u9898\uff0c\u8fd9\u9053\u9898\u4e0eJZOJ 5916. \u3010NOIP2018 \u6a21\u62df 10.20\u3011flow \u4f53\u9762\u610f\u601d\u662f\u4e00\u6837\u7684\uff0c\u5927\u5bb6\u53ef\u4ee5\u628a\u5b83\u770b\u6210\u4e00\u4e2a\u4e2d\u6587\u7ffb\u8bd1\uff0c\u4e0b\u9762\u5949\u4e0a\u8fd9\u9053\u9898\u7684\u4e2d\u6587\u7ffb\u8bd1\uff08~~\u4ee3\u7801\u5f62\u5f0f\u63d2\u5165~~\uff09\n\n```\n5916. \u3010NOIP2018 \u6a21\u62df 10.20\u3011flow  (File IO): input:flow.in output:flow.out \nTime Limits: 1000 ms  Memory Limits: 262144 KB  Detailed Limits    Special Judge \nDescription \n       \u4f60\u662f\u7533\u56fd\u7684\u4e00\u4e2a\u5730\u65b9\u957f\u5b98\uff0c\u4f60\u624b\u4e0b\u6709 n \u4e2a\u57ce\u5e02\u3002        \u4e3a\u4e86\u52a0\u5f3a\u57fa\u7840\u8bbe\u65bd\u5efa\u8bbe\uff0c\u5728 2020 \u5168\u9762\u5efa\u6210\u5c0f\u5eb7\u793e\u4f1a\uff0c\u7edf\u7b79\u63a8\u8fdb\u7ecf\u6d4e\u5efa\u8bbe\u3001\u653f\u6cbb\u5efa\u8bbe\u3001\u6587\u5316\u5efa\u8bbe\u3001 \u793e\u4f1a\u5efa\u8bbe\u3001\u751f\u6001\u6587\u660e\u5efa\u8bbe\uff0c\u575a\u5b9a\u5b9e\u65bd\u79d1\u6559\u5174\u56fd\u6218\u7565\u3001\u4eba\u624d\u5f3a\u56fd\u6218\u7565\u3001\u521b\u65b0\u9a71\u52a8\u53d1\u5c55\u6218\u7565\u3001\u4e61\u6751\u632f\u5174\u6218 \u7565\u3001\u533a\u57df\u534f\u8c03\u53d1\u5c55\u6218\u7565\u3001\u53ef\u6301\u7eed\u53d1\u5c55\u6218\u7565\u3001\u519b\u6c11\u878d\u5408\u53d1\u5c55\u6218\u7565\uff0c\u7a81\u51fa\u6293\u91cd\u70b9\u3001\u8865\u77ed\u677f\u3001\u5f3a\u5f31\u9879\uff0c\u7279\u522b\u662f \u8981\u575a\u51b3\u6253\u597d\u9632\u8303\u5316\u89e3\u91cd\u5927\u98ce\u9669\u3001\u7cbe\u51c6\u8131\u8d2b\u3001\u6c61\u67d3\u9632\u6cbb\u7684\u653b\u575a\u6218\uff0c\u4f7f\u5168\u9762\u5efa\u6210\u5c0f\u5eb7\u793e\u4f1a\u5f97\u5230\u4eba\u6c11\u8ba4\u53ef\u3001\u7ecf \u5f97\u8d77\u5386\u53f2\u68c0\u9a8c\u3002\u4f60\u8ba4\u4e3a\u672c\u7701\u7684\u6c34\u5229\u8c03\u914d\u975e\u5e38\u6709\u95ee\u9898\uff0c\u8fd9\u5bfc\u81f4\u90e8\u5206\u5730\u533a\u51fa\u73b0\u4e25\u91cd\u7684\u7f3a\u6c34\uff0c\u800c\u90e8\u5206\u5730\u533a\u5374\u5168 \u5e74\u6d2a\u707e\u6cdb\u6ee5\u3002        \u4e8e\u662f\u4f60\u6253\u7b97\u5c06\u539f\u6709\u7684\u4f46\u662f\u5df2\u7ecf\u5e9f\u5f03\u4e86\u7684 m \u6761\u6c34\u7ba1\u91cd\u65b0\u4f7f\u7528\u3002\u7b2c i \u6761\u6c34\u7ba1\u8fde\u63a5\u57ce\u5e02 xi \u548c yi\u3002\u8fd9\u4e9b\u6c34\u7ba1 \u8054\u901a\u4e86\u6240\u6709\u57ce\u5e02\u3002\u6bcf\u5ea7\u57ce\u5e02\u5bf9\u6c34\u7684\u9700\u6c42\u4e0d\u540c\u8bbe\u4e3a ai\uff0c\u90e8\u5206\u57ce\u5e02\u5904\u4e8e\u7f3a\u6c34\u72b6\u6001\uff0cai \u4e3a\u6b63\uff0c\u7f3a\u6c34\u91cf\u521a\u597d\u4e3a ai mol\u3002\u90e8\u5206\u57ce\u5e02\u56e0\u4e3a\u6709\u6c34\u5e93\uff0cai \u4e3a\u8d1f\uff0c\u5b83\u9700\u8981\u5411\u5916\u8f93\u9001-ai mol \u7684\u6c34\u624d\u80fd\u4e0d\u5f62\u6210\u6d2a\u707e\u3002\u5bf9\u4e8e\u6bcf\u6761\u6c34\u7ba1\uff0c\u4f60\u9700 \u8981\u51b3\u5b9a\u5b83\u7684\u8f93\u9001\u91cf fi\uff0c\u82e5 fi \u4e3a\u6b63\u5219\u8868\u793a\u4ece xi \u5411 yi \u8f93\u9001 fi mol \u7684\u6c34\uff0cfi \u4e3a\u8d1f\u5219\u8868\u793a\u4ece yi \u5411 xi \u8f93\u9001-fi mol \u7684 \u6c34\u3002        \u4f60\u9700\u8981\u505a\u5230\u6bcf\u4e2a\u57ce\u5e02\u90fd\u521a\u597d\u6ee1\u8db3\u5b83\u7684\u9700\u6c42\uff0c\u5373\u7f3a ai mol \u6c34\u7684\u57ce\u5e02\u9700\u8981\u521a\u597d\u8f93\u5165 ai \u7684\u6c34\uff0c\u800c\u591a\u51fa-ai mol \u6c34\u7684\u57ce\u5e02\u9700\u8981\u521a\u597d\u8f93\u51fa-ai mol \u6c34\u3002        \u4f60\u9700\u8981\u5224\u65ad\u80fd\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u82e5\u6ee1\u8db3\uff0c\u4f60\u8fd8\u9700\u8981\u8f93\u51fa\u6240\u6709\u7684 f\u3002 \nInput \n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 n\u3002 \u7b2c\u4e8c\u884c n \u4e2a\u6574\u6570 ai\u3002 \u7b2c\u4e09\u884c\u4e00\u4e2a\u6574\u6570 m\u3002 \u63a5\u4e0b\u6765 m \u884c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570\uff0cxi,yi\u3002 \u610f\u4e49\u5982\u9898\u4e2d\u6240\u8ff0\u3002 \nOutput \n\u5982\u679c\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u8f93\u51fa\u201dImpossible\u201d\u3002 \u5426\u5219\u7b2c\u4e00\u884c\u8f93\u51fa\u201dPossible\u201d\uff0c\u63a5\u4e0b\u6765 m \u884c\uff0c\u7b2c i+1 \u884c\u8f93\u51fa fi\u3002 \u82e5\u6709\u591a\u7ec4\u89e3\uff0c\u968f\u610f\u8f93\u51fa\u4e00\u7ec4\u5373\u53ef\u3002 \nSample Input \n4 \n3 -10 6 1 \n5 \n1 2 \n3 2 \n2 4 \n3 4 \n3 1 \nSample Output \nPossible \n4 \n-6 \n8 \n-7 \n7 \nData Constraint \n\u5bf9\u4e8e 10%\uff1an<=5\uff0c|ai|<=20 \u5bf9\u4e8e 20%\uff1an<=10\uff0c|ai|<=20 \u5bf9\u4e8e\u53e6 30%\uff1an<=1000\uff0cm=n\uff0c|ai|<=20 \u5bf9\u4e8e 100%\uff1an<=200000\uff0cm<=300000\uff0c\u4f60\u4f7f\u7528 longint(pascal)/int(c++)\u5c31\u80fd\u591f\u5b58\u50a8 ai\u3002 \u6570\u636e\u7eaf\u968f\u673a\u3002 \nHint \nTips \nmol \u662f\u4e00\u79cd\u5355\u4f4d\u3002 \n```\n\u4e0b\u9762\u662f\u601d\u8def\uff1a\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad\u662f\u5426\u5408\u6cd5\uff0c\u8fd9\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u4e00\u4e0ba\u6570\u7ec4\u91cc\u9762\u7684\u6570\u7684\u603b\u548c\u4e3a0\u53ca\u5408\u6cd5\uff0c\u4e0d\u4e3a0\u5219\u4e0d\u5408\u6cd5\uff0c\u76f4\u63a5\u8f93\u51fa\"Impossible\"\u4e4b\u540ereturn 0\u5373\u53ef\u3002\n\n\u4e4b\u540e\u8ba8\u8bba\u5408\u6cd5\u60c5\u51b5\uff1a\n\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u6784\u9020\u51fa\u4e00\u79cd\u5408\u6cd5\u89e3\u3002\n\u4e00\u79cd\u5f88\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u5148\u6784\u9020\u4e00\u68f5\u751f\u6210\u6811\uff0c\n\u5f3a\u5236\u53ea\u7528\u6811\u4e0a\u9762\u7684\u8fb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8f7b\u677e\u6c42\u51fa\u4e00\u7ec4\u5408\u6cd5\u89e3\u3002\n\n\u8fd8\u662f\u770b\u4e0d\u61c2\u7684\u5c0f\u670b\u53cb\u4eec\u8fd8\u662f\u76f4\u63a5\u770b\u4e0b\u9762\u7684\u4ee3\u7801\u5427\n\n```cpp\n#include<bits/stdc++.h>//\u4e07\u80fd\u5934\u6587\u4ef6\nusing namespace std;\nint a[200001],fa[200001],p[200001],ans[200001];\nint cnt;\nstruct rec\n{\n    int nxt;\n    int lst;\n    int to;\n    int id;\n}e[400001];//\u4e2a\u4eba\u4e60\u60ef\u7528\u6570\u7ec4\u5b58\u90bb\u63a5\u8868\nint getfa(int x)\n{\n    return fa[x]=fa[x]==x?x:getfa(fa[x]);//\u5e76\u67e5\u96c6\n}\nvoid add(int x,int y,int flag)//\u5efa\u7acb\u90bb\u63a5\u8868\n{\n    e[++cnt].nxt=e[x].lst;\n    e[cnt].to=y;\n    e[cnt].id=flag;\n    e[x].lst=cnt;\n}\nvoid dfs(int x,int f)//DFS\u641c\u7d22\n{\n    p[x]=a[x];\n    for(int i=e[x].lst;i;i=e[i].nxt)\n        if(e[i].to!=f)\n        {\n            dfs(e[i].to,x);\n            p[x]+=p[e[i].to];\n            if(i%2)ans[e[i].id]=p[e[i].to];\n            else ans[e[i].id]=-p[e[i].to];\n        }\n}\nint main()\n{\n    int n,m;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n        fa[i]=i;\n        cnt+=a[i];//cnt\u6b64\u65f6\u7528\u6765\u8bb0\u5f55a\u6570\u7ec4\u662f\u5426\u5408\u6cd5\n    }\n    if(cnt)//\u5224\u65ad\u662f\u5426\u5408\u6cd5\n    {\n        cout<<\"Impossible\"<<endl;\n        return 0;\n    }\n    cout<<\"Possible\"<<endl;\n    cnt=0;\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++)//\u5982\u4e0a\u9762\u89e3\u91ca\u6240\u8bf4\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        if(getfa(x)!=getfa(y))\n        {\n            add(x,y,i);\n            add(y,x,i);\n            fa[getfa(x)]=getfa(y);\n        }\n    }\n    dfs(1,0);\n    for(int i=1;i<=m;i++)//\u8f93\u51fa\n        cout<<ans[i]<<endl;\n    return 0;\n}\n```\n~~\u6076\u641e\u73af\u8282\uff1a~~\n\n\u597d\u5b66\u751f\u81ea\u52a8\u5ffd\u7565\u5373\u53ef\n\n~~\u6559\u5927\u5bb6\u4e00\u79cd\u65b0\u7684\u5b9a\u4e49\u65b9\u5f0f\uff0c\u53ef\u4ee5\u8ba9\u6284\u4f60\u9898\u89e3\u7684\u4eba\u4e00\u8138\u61f5\u903c\u3002~~\n\n~~\u4ee5\u4e0b\u5212\u7ebf\u957f\u5ea6\u4e0d\u540c\u5b9a\u4e49\u4e0d\u540c\u7684\u53d8\u91cf~~\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint _[200001],__[200001],___[200001],____[200001];\nint _____;\nstruct ________________\n{\n    int _______;\n    int ________;\n    int _________;\n    int __________;\n}______[400001];\nint _________________(int ___________)\n{\n    return __[___________]=__[___________]==___________?___________:_________________(__[___________]);\n}\nvoid __________________(int ___________,int ____________,int _______________)\n{\n    ______[++_____]._______=______[___________].________;\n    ______[_____]._________=____________;\n    ______[_____].__________=_______________;\n    ______[___________].________=_____;\n}\nvoid ___________________(int ___________,int _______________)\n{\n    ___[___________]=_[___________];\n    for(int _____________=______[___________].________;_____________;_____________=______[_____________]._______)\n        if(______[_____________]._________!=_______________)\n        {\n            ___________________(______[_____________]._________,___________);\n            ___[___________]+=___[______[_____________]._________];\n            if(_____________%2)____[______[_____________].__________]=___[______[_____________]._________];\n            else ____[______[_____________].__________]=-___[______[_____________]._________];\n        }\n}\nint main()\n{\n    int ______________,_______________;\n    scanf(\"%d\",&______________);\n    for(int _____________=1;_____________<=______________;_____________++)\n    {\n        scanf(\"%d\",&_[_____________]);\n        __[_____________]=_____________;\n        _____+=_[_____________];\n    }\n    if(_____)\n    {\n        cout<<\"Impossible\"<<endl;\n        return 0;\n    }\n    cout<<\"Possible\"<<endl;\n    _____=0;\n    scanf(\"%d\",&_______________);\n    for(int _____________=1;_____________<=_______________;_____________++)\n    {\n        int ___________,____________;\n        scanf(\"%d%d\",&___________,&____________);\n        if(_________________(___________)!=_________________(____________))\n        {\n            __________________(___________,____________,_____________);\n            __________________(____________,___________,_____________);\n            __[_________________(___________)]=_________________(____________);\n        }\n    }\n    ___________________(1,0);\n    for(int _____________=1;_____________<=_______________;_____________++)\n        cout<<____[_____________]<<endl;\n    return 0;\n}\n```\n~~\u4e0d\u8981\u4ee5\u4e3a\u4e0a\u9762\u7684\u662f\u4ee3\u7801\u8865\u5168\uff0c\u4e0a\u9762\u7684\u79d1\u5ba4AC\u4ee3\u7801\u54e6~~~",
        "postTime": 1540875427,
        "uid": 93488,
        "name": "Porsche",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF990F \u3010Flow Control\u3011"
    },
    {
        "content": "### \u9898\u610f\uff1a\n\n\u7ed9\u4f60\u4e00\u4e2an\u4e2a\u70b9m\u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u4f60\u53ef\u4ee5\u4efb\u610f\u8bbe\u7f6e\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\uff0c\u73b0\u5728\u8981\u6c42\u6bcf\u4e2a\u70b9\u90fd\u5f97\u5230$s_i$\u7684\u6d41\u91cf\uff0c\u95ee\u65b9\u6848?\n\n---\n\n### \u9898\u89e3\uff1a\n\n\u9996\u5148\u6ce8\u610f\u5230\u6d41\u91cf\u603b\u91cf\u662f\u5b88\u6052\u7684\uff0c\u5373\u6709\u4e00\u5b9a\u91cf\u7684\u8fdb\u5c31\u53c8\u6709\u7b49\u91cf\u7684\u51fa\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5408\u6cd5\u7684\u60c5\u51b5$\\sum s=0$\uff0c\u5426\u5219\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\n\n\u5176\u6b21\u8fd8\u8981\u53d1\u73b0\u4e00\u6761\u6027\u8d28\uff1a\u5373\u5bf9\u4e8e\u5408\u6cd5\u7684\u60c5\u51b5\uff0c\u53ea\u8981\u56fe\u662f\u8054\u901a\u7684\u5c31\u4e00\u5b9a\u6709\u53ef\u884c\u7684\u65b9\u6848\n\n\u81ea\u5df1\u53e3\u80e1\u4e00\u4e0b\u5e94\u8be5\u5f88\u5bb9\u6613\u60f3\u660e\u767d\n\n\u6839\u636e\u8fd9\u4e00\u6761\u6027\u8d28\uff0c\u6211\u4eec\u5b8c\u5168\u5c06\u7ed9\u51fa\u7684\u56fe\u5f53\u6210\u4e00\u68f5\u6811\u6765\u505a\uff0c\u4ece\u4e0a\u5230\u4e0b\u904d\u5386\uff0c\u4ece\u4e0b\u5f80\u4e0a\u66f4\u65b0\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7531\u4e8e\u8f6c\u79fb\u90fd\u662f1\u5bf91\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8d2a\u5fc3\u505a\uff0c\u5c06\u4e00\u6761\u8fb9\u7684\u6d41\u91cf\u8bbe\u7f6e\u4e3a\u4e0b\u5c42\u70b9\u6240\u9700\u8981\u7684\u6d41\u91cf\uff0c\u540c\u65f6\u7528\u4e0a\u5c42\u70b9\u201c\u652f\u4ed8\u201d\u8fd9\u4e00\u90e8\u5206\u6d41\u91cf\u3002\u81f3\u4e8e\u6d41\u91cf\u7684\u201c\u65b9\u5411\u201d\u53ea\u8981\u7279\u5224\u4e00\u4e0b\u8fb9\u662f\u5426\u662f\u7ed9\u51fa\u7684\u90a3\u6761\u5c31\u884c\u4e86\n\n---\n\n### \u9898\u89e3\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntemplate<class t> inline t read(t &x){\n\tx=0;char c=getchar();bool f=0;\n\twhile(!isdigit(c)) f|=c=='-',c=getchar();\n\twhile(isdigit(c)) x=(x<<1)+(x<<3)+(c^48),c=getchar();\n\tif(f) x=-x;return  x;\n}\ntemplate<class t> inline void write(t x){\n\tif(x<0){putchar('-'),write(-x);}\n\telse{if(x>9)write(x/10);putchar('0'+x%10);}\n}\ntemplate<class t> inline void writeln(t x){write(x);puts(\"\");}\n\nconst int N=2e5+5,M=N;\nint en=1,h[N],n,m,ans[M],a[N],sum;\nbool v[N];\n\nstruct edge{\n\tint n,v;\n}e[M<<1];\n\nvoid add(int x,int y){\n\te[++en]=(edge){h[x],y};\n\th[x]=en;\n}\n\nvoid dfs(int x){\n\tv[x]=1; //\u6807\u8bb0\u8be5\u70b9\u5df2\u8bbf\u95ee\u8fc7\n\tfor(int i=h[x];i;i=e[i].n){\n\t\tint y=e[i].v;\n\t\tif(v[y]) continue; //\u8bbf\u95ee\u8fc7\u5c31\u4e0d\u8981\u518d\u53bb\u4e86\n\t\tdfs(y);\n\t\tans[i>>1]=(i&1?-1:1)*a[y]; //\u5076\u6570\u7f16\u53f7\u8fb9\u662f\u9898\u76ee\u7ed9\u51fa\u7684\uff0c\u7528\u6b63\u7684\uff0c\u5426\u5219\u662f\u53cd\u5411\u8fb9\u7528\u8d1f\u6570\n\t\ta[x]+=a[y]; //\u7528\u4e0a\u5c42\u70b9\u652f\u4ed8\u6d41\u91cf\n\t}\n} \n\nsigned main(){\n\tread(n);\n\tfor(int i=1;i<=n;i++) sum+=read(a[i]);\n\tif(sum){ //\u5148\u5224\u6389\u65e0\u89e3\u7684\u60c5\u51b5\n\t\tputs(\"Impossible\");\n\t\treturn 0;\n\t}\n\tread(m);\n\tfor(int i=1,x,y;i<=m;i++){\n\t\tread(x);read(y);\n\t\tadd(x,y);add(y,x);\n\t}\n\tdfs(1);\n\tputs(\"Possible\");\n\tfor(int i=1;i<=m;i++) writeln(ans[i]);\n}\n```",
        "postTime": 1580612982,
        "uid": 65735,
        "name": "yuzhechuan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF990F \u3010Flow Control\u3011"
    },
    {
        "content": "\u5927\u6982\u662f\u4e00\u9053\u6bd4\u8f83\u8f7b\u677e\u7684\u601d\u7ef4\u9898\uff1f\n\n### $Solution:$\n\n\u9996\u5148\u8fd9\u5f20\u56fe\u6709\u5f88\u591a\u8fde\u901a\u5757\uff0c\u6211\u4eec\u53ea\u8003\u8651\u4e00\u4e2a\u8fde\u901a\u5757\u3002\n\n\u5f88\u663e\u7136\u5728\u4f20\u9012\u7684\u8fc7\u7a0b\u4e2d\uff0c\u603b\u6570\u80af\u5b9a\u662f\u4e0d\u53d8\u7684\uff0c\u6240\u4ee5\u8fd9\u51e0\u4e2a\u8282\u70b9\u7684 $f_i$ \u548c\u4e3a $0$\u3002\u6211\u4eec\u5148\u628a\u4e0d\u7b26\u5408\u7684\u7ed9\u7279\u5224\u6389\u3002\n\n\u5982\u679c $f_i$ \u548c\u4e3a $0$\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u53ef\u4ee5\u6784\u9020\u7684\u3002\u5177\u4f53\u505a\u6cd5\u5c31\u662f\u8dd1\u4e00\u68f5\u751f\u6210\u6811\uff0c\u7136\u540e\u4ece\u53f6\u8282\u70b9\u4e00\u76f4\u4f20\u9012\u5230\u7236\u8282\u70b9\u5373\u53ef\u3002\n\n\u4e8e\u662f\u8fd9\u9053\u9898\u5c31\u6ca1\u4e86\u2026\u2026\n\n### $Code:$\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\n#define int long long\ninline int read(){\n    int x = 0, f = 1; char ch = getchar();\n    while(ch < '0' || ch > '9'){ if(ch == '-') f = -1; ch = getchar(); }\n    while(ch >= '0' && ch <= '9'){ x = x * 10 + (ch ^ 48); ch = getchar(); }\n    return x * f;\n}\nconst int N = 400010;\nstruct edge{\n\tint v, w, nxt;\n}e[N << 1];\nstruct node{\n\tint u, v;\n}g[N << 1];\nint head[N << 1], cnt, n, m, a[N], f[N], ans[N << 1], S;\nbool vis[N], Vis[N << 1];\ninline void add(int u, int v, int w){\n\te[++cnt].v = v;\n\te[cnt].w = w;\n\te[cnt].nxt = head[u];\n\thead[u] = cnt;\n}\ninline void dfs(int u){\n\tvis[u] = 1; S += a[u];\n\tfor(int i = head[u]; i; i = e[i].nxt){\n\t\tint v = e[i].v; if(vis[v]) continue;\n\t\tdfs(v);\n\t}\n\treturn;\n}\ninline int anc(int x){ return x == f[x] ? x : f[x] = anc(f[x]); }\ninline void Dfs(int u){\n\tvis[u] = 1;\n\tfor(int i = head[u]; i; i = e[i].nxt){\n\t\tint v = e[i].v, w = e[i].w;\n\t\tif(vis[v]) continue;\n\t\tDfs(v);\n\t\tif(g[w].u == u) ans[w] = a[v];\n\t\telse ans[w] = -a[v];\n\t\ta[u] += a[v];\n\t}\n}\nsigned main(){\n\tn = read();\n\tfor(int i = 1; i <= n; ++i) a[i] = read(), f[i] = i;\n\tm = read();\n\tfor(int i = 1; i <= m; ++i) g[i].u = read(), g[i].v = read(), add(g[i].u, g[i].v, 0), add(g[i].v, g[i].u, 0);\n\tfor(int i = 1; i <= n; ++i) if(!vis[i]){\n\t\tS = 0; dfs(i); if(S != 0) return printf(\"Impossible\") & 0;\n\t}\n\tputs(\"Possible\");\n\tmemset(head, cnt = 0, sizeof(head));\n\tfor(int i = 1; i <= m; ++i){\n\t\tint u = g[i].u, v = g[i].v;\n\t\tif(anc(u) != anc(v)){\n\t\t\tadd(u, v, i); add(v, u, i);\n\t\t\tf[f[u]] = f[v];\n\t\t\tVis[i] = 1;\n\t\t}\n\t}\n\tfor(int i = 1; i <= m; ++i) if(!Vis[i]) ans[i] = 0;\n\tmemset(vis, 0, sizeof(vis));\n\tfor(int i = 1; i <= n; ++i) if(!vis[i]) Dfs(i);\n\tfor(int i = 1; i <= m; ++i) printf(\"%lld\\n\", ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1599215513,
        "uid": 147999,
        "name": "Warriors_Cat",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF990F \u3010Flow Control\u3011"
    }
]