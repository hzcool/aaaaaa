[
    {
        "content": "\u7ebf\u6bb5\u6811\u3002\n\n\u5efa\u8bae\u53ef\u4ee5\u53bb\u505a\u4e00\u4e0b $\\texttt{GSS4}$ \u6216\u8005 `\u82b1\u795e\u6e38\u5386\u5404\u56fd`\uff0c\u548c\u8fd9\u9898\u7684\u60f3\u6cd5\u7c7b\u4f3c\u3002\n\n\u89c2\u5bdf\u64cd\u4f5c\uff0c\u5176\u4e2d\u7684\u53d6\u6a21\u6211\u4eec\u662f\u6ca1\u6709\u89c1\u5230\u8fc7\u7684\uff0c\u663e\u7136\u662f\u4e00\u4e2a\u4e0d\u597d\u5904\u7406\u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5b83\u4e0d\u65b9\u4fbf\u6253\u6807\u8bb0\uff0c\u66f4\u5f88\u96be\u5408\u5e76\u6807\u8bb0\u3002\u4e00\u822c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u66b4\u529b\u4fee\u6539\uff0c\u7136\u540e\u518d\u4f18\u5316\u8fd9\u4e2a\u66b4\u529b\u7684\u8fc7\u7a0b\u3002\n\n\u5982\u679c\u662f\u533a\u95f4\u5f00\u65b9\uff0c\u90a3\u4e48\u6211\u4eec\u5f00\u4e2a $7,8$ \u6b21\u5c31\u80fd\u5f00\u5230\u5e95\uff0c\u4f46\u662f\u5982\u679c\u662f\u53d6\u6a21\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ed3\u8bba\uff1a$x \\mod p<\\frac{x}{2}\\ (\\ p<x\\ )$\uff08\u8bc1\u660e\u7565\uff09\uff0c\u6240\u4ee5\u53d6\u6a21\u4e5f\u6700\u591a\u662f $\\log x$ \u6b21\uff0c\u6211\u4eec\u4e0d\u59a8\u8bb0\u5f55\u533a\u95f4\u6700\u5927\u503c\uff0c\u5982\u679c\u6700\u5927\u503c $<p$ \u76f4\u63a5\u8fd4\u56de\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 100005\n#define reg register\n#define inl inline\n#define int long long\nusing namespace std;\nint n,q,a[MAXN];\nstruct SegmentTree\n{\n\tint t[MAXN<<2],maxn[MAXN<<2];\n\tinl void PushUp(reg int rt)\n\t{\n\t\tt[rt]=t[rt<<1]+t[rt<<1|1];\n\t\tmaxn[rt]=max(maxn[rt<<1],maxn[rt<<1|1]);\n\t}\n\tvoid Build(reg int rt,reg int l,reg int r)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\tt[rt]=maxn[rt]=a[l];\n\t\t\treturn;\n\t\t}\n\t\treg int mid=l+r>>1;\n\t\tBuild(rt<<1,l,mid);\n\t\tBuild(rt<<1|1,mid+1,r);\n\t\tPushUp(rt);\n\t}\n\tvoid ModifyMod(reg int rt,reg int l,reg int r,reg int tl,reg int tr,reg int p)\n\t{\n\t\tif(maxn[rt]<p) return;\n\t\tif(l==r)\n\t\t{\n\t\t\tt[rt]%=p;\n\t\t\tmaxn[rt]%=p;\n\t\t\treturn;\n\t\t}\n\t\treg int mid=l+r>>1;\n\t\tif(tl<=mid) ModifyMod(rt<<1,l,mid,tl,tr,p);\n\t\tif(tr>mid) ModifyMod(rt<<1|1,mid+1,r,tl,tr,p);\n\t\tPushUp(rt);\n\t}\n\tvoid Modify(reg int rt,reg int l,reg int r,reg int pos,reg int val)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\tt[rt]=maxn[rt]=val;\n\t\t\treturn;\n\t\t}\n\t\treg int mid=l+r>>1;\n\t\tif(pos<=mid) Modify(rt<<1,l,mid,pos,val);\n\t\telse Modify(rt<<1|1,mid+1,r,pos,val);\n\t\tPushUp(rt);\n\t}\n\tint Query(reg int rt,reg int l,reg int r,reg int tl,reg int tr)\n\t{\n\t\tif(tl<=l && r<=tr) return t[rt];\n\t\treg int mid=l+r>>1,res=0;\n\t\tif(tl<=mid) res+=Query(rt<<1,l,mid,tl,tr);\n\t\tif(tr>mid) res+=Query(rt<<1|1,mid+1,r,tl,tr);\n\t\treturn res;\n\t}\n}T;\nsigned main()\n{\n\tscanf(\"%lld %lld\",&n,&q);\n\tfor(reg int i=1;i<=n;i++) scanf(\"%lld\",&a[i]);\n\tT.Build(1,1,n);\n\twhile(q--)\n\t{\n\t\treg int opt,x,y,z;\n\t\tscanf(\"%lld %lld %lld\",&opt,&x,&y);\n\t\tif(opt==1) printf(\"%lld\\n\",T.Query(1,1,n,x,y));\n\t\telse if(opt==2)\n\t\t{\n\t\t\tscanf(\"%lld\",&z);\n\t\t\tT.ModifyMod(1,1,n,x,y,z);\n\t\t}\n\t\telse T.Modify(1,1,n,x,y);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1563535801,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF438D \u3010The Child and Sequence\u3011"
    },
    {
        "content": "\u6700\u8fd1\u5728\u5b66\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u5c31\u53d1\u73b0\u4e86\u8fd9\u9053\u9898\u3002\n\n**2020\u5e742\u670818\u65e5\u66f4\u65b0\uff1a\u4fee\u6b63\u6570\u5b66\u516c\u5f0f\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\u3002**\n\n-------\n\n### \u9898\u610f\u7b80\u8ff0\n\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a$ \uff0c\u6709 $m$ \u4e2a\u64cd\u4f5c $(1 \\le n,m \\le 10^5;1 \\le a[i] \\le 10^9)$ \uff0c\u5206\u4e3a\u4ee5\u4e0b\u4e09\u79cd\uff1a\n- \u64cd\u4f5c\u7c7b\u578b $1$ \uff1a\u8f93\u5165\u683c\u5f0f\u4e3a $1 \\  l \\  r$\uff0c\u67e5\u8be2\u5e8f\u5217\u4e2d\u533a\u95f4 $[l,r]$ \u7684\u548c\u3002 $(1 \\le l \\le r \\le n)$\n- \u64cd\u4f5c\u7c7b\u578b $2$ \uff1a\u8f93\u5165\u683c\u5f0f\u4e3a $2 \\  l \\  r \\  x$\uff0c\u628a\u5e8f\u5217\u4e2d\u533a\u95f4 $[l,r]$ \u7684\u6240\u6709\u6570 $ \\mod \\ x$\u3002 $(1 \\le l \\le r \\le n;1 \\le x \\le 10^9)$\n- \u64cd\u4f5c\u7c7b\u578b $3$ \uff1a\u8f93\u5165\u683c\u5f0f\u4e3a $3 \\  k \\  x$\uff0c\u628a\u5e8f\u5217\u4e2d\u4f4d\u7f6e\u4e3a $k$ \u7684\u6570\u6539\u4e3a $x$\u3002 $(1 \\le k \\le n;1 \\le x \\le 10^9)$\n\n\u8f93\u51fa\u6bcf\u4e2a\u64cd\u4f5c $1$ \u5f97\u5230\u7684\u7b54\u6848\u3002\n\n--------\n\n### \u89e3\u9898\u601d\u8def\n\u64cd\u4f5c\u4e2d\u6709\u4e24\u7c7b\u662f\u533a\u95f4\u64cd\u4f5c\uff0c\u663e\u7136\u4f1a\u60f3\u5230**\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4**\u3002\n\n- \u5bf9\u4e8e\u64cd\u4f5c $1$ \uff1a\u7ebf\u6bb5\u6811\u76f4\u63a5\u7ef4\u62a4\u533a\u95f4\u548c\u5e76\u652f\u6301\u67e5\u8be2\u5373\u53ef\u3002\n- \u5bf9\u4e8e\u64cd\u4f5c $2$ \uff1a\u8fd9\u662f\u6bd4\u8f83\u96be\u7ef4\u62a4\u7684\u64cd\u4f5c\uff0c\u4f46\u662f\u6211\u4eec\u77e5\u9053\uff0c\u5bf9\u4e8e $x \\mod p$\uff0c\u5982\u679c $(x<p)$ \uff0c\u90a3\u4e48\u6709 $x \\mod p = x$ \u5982\u679c $(x \\ge p)$ \uff0c\u90a3\u4e48\u6709$x \\  mod \\  p < \\frac{x}{2}$\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c**\u5f53\u8981\u53d6\u6a21\u7684\u533a\u95f4\u6700\u5927\u503c\u6bd4\u6a21\u6570\u5c0f\u65f6\uff0c\u7ed9\u8fd9\u4e2a\u533a\u95f4\u53d6\u6a21\u76f8\u5f53\u4e8e\u6ca1\u6709\u53d6\u6a21\uff1b\u5426\u5219\u5373\u4f7f\u8981\u53d6\u6a21\uff0c\u533a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u6570\u90fd\u6700\u591a\u53ea\u4f1a\u88ab\u64cd\u4f5c $O( \\log(x))$ \u6b21**\u3002\u6240\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\uff0c\u5982\u679c\u8981\u53d6\u6a21\u5c31\u66b4\u529b\u5bf9\u6bcf\u4e2a\u6570\u64cd\u4f5c\u5373\u53ef\u3002\n- \u5bf9\u4e8e\u64cd\u4f5c $3$ \uff1a\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539\u5373\u53ef\u3002\n\n\u90a3\u4e48\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\uff0c\u4e0b\u9762\u662f\u4ee3\u7801\u3002\n\n--------\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define rgt register int\n#define ll long long\nusing namespace std;\n\ninline int rd(){\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t\tc=getchar();\n\tint x=(c^48);\n\tc=getchar();\n\twhile(c<='9'&&c>='0'){\n\t\tx=x*10+(c^48);\n\t\tc=getchar();\n\t}\n\treturn x;\n}   //\u5feb\u901f\u8bfb\u5165\n\ninline void print(ll x){\n\tif(!x){\n\t\tputchar('0');\n\t\treturn;\n\t}\n\tll num[22],siz=0,px=x;\n\twhile(px){\n\t\tsiz++;\n\t\tnum[siz]=px%10;\n\t\tpx/=10;\n\t}\n\twhile(siz){\n\t\tputchar(num[siz]+'0');\n\t\tsiz--;\n\t}\n}   //\u5feb\u901f\u8f93\u51fa\n\nconst int mxn = 1e5+5;\nint n,m,a[mxn];\nstruct tree{\n\tint l;\n\tint r;\n\tll sum;   //\u533a\u95f4\u548c\n\tll mx;   //\u533a\u95f4\u6700\u5927\u503c\n    //\u7531\u9898\u610f\u5f97\uff0c\u6700\u540e\u7ed3\u679c\u53ef\u80fd\u4f1a\u7206int\uff0c\u5f00long long\n}tr[mxn*4];   \n\ninline void update(int p){   //\u8282\u70b9\u66f4\u65b0\n\ttr[p].sum=tr[p*2].sum+tr[p*2+1].sum;\n\ttr[p].mx=max(tr[p*2].mx,tr[p*2+1].mx); \n}\n\nvoid build(int dl,int dr,int p){   //\u5efa\u6811\n\ttr[p].l=dl;\n\ttr[p].r=dr;\n\tif(dl==dr){\n\t\ttr[p].sum=tr[p].mx=a[dl];\n\t\treturn;\n\t}\n\tint md=(dl+dr)/2;\n\tbuild(dl,md,p*2);\n\tbuild(md+1,dr,p*2+1);\n\tupdate(p);\n}\n\nvoid dchange(int dl,int dr,int p,ll x){   //\u5355\u70b9\u4fee\u6539\n\tif(dl==tr[p].l&&dr==tr[p].r){\n\t\ttr[p].sum=x;\n\t\ttr[p].mx=x;\n\t\treturn;\n\t}\n\tint md=(tr[p].l+tr[p].r)/2;\n\tif(dl<=md)\tdchange(dl,dr,p*2,x);\n\tif(md<dr)\tdchange(dl,dr,p*2+1,x);\n\tupdate(p);\n}\n\nvoid modchange(int dl,int dr,int p,ll mod){  //\u533a\u95f4\u53d6\u6a21\n\tif(dl<=tr[p].l&&dr>=tr[p].r&&tr[p].mx<mod)\n\t\treturn;   //\u6a21\u6570\u5927\u4e8e\u533a\u95f4\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\n\tif(dl<=tr[p].l&&dr>=tr[p].r&&tr[p].l==tr[p].r){\n\t\ttr[p].mx%=mod;\n\t\ttr[p].sum%=mod;\n\t\treturn;   //\u5355\u70b9\u66b4\u529b\u53d6\u6a21\n\t}\n\tint md=(tr[p].l+tr[p].r)/2;\n\tif(dl<=md)\tmodchange(dl,dr,p*2,mod);\n\tif(md<dr)\tmodchange(dl,dr,p*2+1,mod);\n\tupdate(p);\n}\n\nll answer(int dl,int dr,int p){   //\u67e5\u8be2\u533a\u95f4\u548c\n\tif(dl<=tr[p].l&&dr>=tr[p].r)\n\t\treturn tr[p].sum;\n\tint md=(tr[p].l+tr[p].r)/2;\n\tll ans=0;\n\tif(dl<=md)\tans+=answer(dl,dr,p*2);\n\tif(md<dr)\tans+=answer(dl,dr,p*2+1);\n\treturn ans;\n}\n\nint main()\n{\n\tn=rd();\n\tm=rd();\n\tfor(rgt i=1;i<=n;i++)\n\t\ta[i]=rd();\n\tbuild(1,n,1);\n    //\u8bfb\u5165\u5e76\u5efa\u6811\n                         \n\tfor(rgt op,tl,tr,x,i=1;i<=m;i++){\n\t\top=rd();\n\t\tswitch(op){  //\u5bf9\u5e94\u64cd\u4f5c\n\t\t\tcase 1:  //\u64cd\u4f5c1\n\t\t\t\ttl=rd();\n\t\t\t\ttr=rd();\n\t\t\t\tprint(answer(tl,tr,1));\n\t\t\t\tputchar('\\n');\n\t\t\t\tbreak;\n\t\t\tcase 2:  //\u64cd\u4f5c2\n\t\t\t\ttl=rd();\n\t\t\t\ttr=rd();\n\t\t\t\tx=rd();\n\t\t\t\tmodchange(tl,tr,1,x);\n\t\t\t\tbreak;\n\t\t\tcase 3:  //\u64cd\u4f5c3\n\t\t\t\ttl=tr=rd();\n\t\t\t\tx=rd();\n\t\t\t\tdchange(tl,tr,1,x);\n\t\t\t\tbreak;\n\t\t}\n\t}\t\n  \n\treturn 0;\n}\n```\n",
        "postTime": 1580694935,
        "uid": 57421,
        "name": "fls233666",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF438D \u3010The Child and Sequence\u3011"
    },
    {
        "content": "\u5927\u5bb6\u597d\uff0c\u6211\u975e\u5e38\u559c\u6b22\u66b4\u529b\u6570\u636e\u7ed3\u6784\uff0c\u4e8e\u662f\u6211\u7528\u5206\u5757A\u4e86\u8fd9\u9898\u3002\n\n\u9996\u5148\uff0c\u60f3\u5fc5\u4f60\u6765\u770b\u9898\u89e3\uff0c\u662f\u56e0\u4e3a\u8fd9\u9053\u9898\u7684\u53d6\u6a21\u64cd\u4f5c\u5427\uff01\n\u4e00\u4e2a\u6570\u4e0d\u505c\u88ab\u53d6\u6a21\uff0c\u80af\u5b9a\u53d6\u4e0d\u4e86\u51e0\u6b21\u5c31\u53d8\u6210\u5f88\u5c0f\u7684\u6570\u4e86\uff08\u540c\u4e00\u9053\u533a\u95f4\u5f00\u65b9\u7684\u9898\u76ee\uff09\uff0c\u800c\u4e14\u5982\u679c\u533a\u95f4\u6700\u5927\u503c\u5c0f\u4e8e\u6a21\u6570\uff0c\u90a3\u53d6\u6a21\u5c31\u6ca1\u6709\u610f\u4e49\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5206\u5757\uff0c\u53d6\u6a21\u66b4\u529b\uff0c\u5f53\u7136\u8fd8\u5f97\u8bb0\u5f55\u533a\u95f4\u6700\u5927\u503c\uff0c\u5224\u65ad\u6b64\u64cd\u4f5c\u662f\u5426\u6709\u5fc5\u8981\u6267\u884c\u3002\uff08\u8fd8\u5f97\u5f00O2\u624d\u80fd\u8fc7\u54e6\uff09\n\n\u5177\u4f53\u89c1\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nint n,m;\nint a[1000001];\nint l[1005],r[1005],bel[1000005];\nll sum[1005];\nint mx[1005];\ninline ll query(int L,int R){\n\tint i;\n\tll ans=0;\n\tif(bel[L]==bel[R]){\n\t\tfor(i=L;i<=R;++i)ans+=a[i];\n\t}else{\n\t\tfor(i=L;i<=r[bel[L]];++i)ans+=a[i];\n\t\tfor(i=l[bel[R]];i<=R;++i)ans+=a[i]; \n\t\tfor(i=bel[L]+1;i<=bel[R]-1;++i)ans+=sum[i]; \n\t}\n\treturn ans;\n}\ninline void change(int x,int v){\n\tsum[bel[x]]-=a[x],sum[bel[x]]+=v;\n\ta[x]=v;\n\tint i;\n\tmx[bel[x]]=0;\n\tfor(i=l[bel[x]];i<=r[bel[x]];++i)mx[bel[x]]=max(mx[bel[x]],a[i]);\n}\ninline void reset(int L,int R,int p){\n\tfor(int i=L;i<=R;i++)a[i]%=p;\n\tmx[bel[L]]=0,sum[bel[L]]=0;\n\tfor(int i=l[bel[L]];i<=r[bel[L]];i++)mx[bel[L]]=max(mx[bel[L]],a[i]),sum[bel[L]]+=a[i];\n}\ninline void modifly(int L,int R,int p){\n\tint i;\n\tif(bel[L]==bel[R]){\n\t\treset(L,R,p);\n\t}else{\n\t\treset(L,r[bel[L]],p);\n\t\treset(l[bel[R]],R,p); \n\t\tfor(i=bel[L]+1;i<=bel[R]-1;++i){\n\t\t\tif(mx[i]>=p)\n\t\t\treset(l[i],r[i],p);\t\n\t\t}\n\t}\n}\nint main(){;\n\tregister int i,j;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(i=1;i<=n;++i)scanf(\"%d\",&a[i]);\n\tint cnt=sqrt(n);\n\tfor(i=1;i<=cnt;i++){\n\t\tl[i]=r[i-1]+1;\n\t\tr[i]=l[i]+cnt-1;\n\t}\n\tif(r[cnt]<n){\n\t\tcnt++;\n\t\tl[cnt]=r[cnt-1]+1;\n\t\tr[cnt]=n;\n\t}\n\tfor(i=1;i<=cnt;++i){\n\t\tfor(j=l[i];j<=r[i];++j){\n\t\t\tbel[j]=i;\n\t\t\tsum[i]+=a[j];\t\n\t\t\tmx[i]=max(mx[i],a[j]);\n\t\t}\n\t}\n\twhile(m--){\n\t\tint opt;\n\t\tscanf(\"%d\",&opt);\n\t\tif(opt==1){//query\n\t\t\tint l,r;\n\t\t\tscanf(\"%d%d\",&l,&r);\n\t\t\tprintf(\"%lld\\n\",query(l,r));\n\t\t}\n\t\tif(opt==2){//modifly\n\t\t\tint l,r,p;\n\t\t\tscanf(\"%d%d%d\",&l,&r,&p);\n\t\t\tmodifly(l,r,p);\n\t\t}\n\t\tif(opt==3){//change\n\t\t\tint x,v;\n\t\t\tscanf(\"%d%d\",&x,&v);\n\t\t\tchange(x,v);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1565584539,
        "uid": 127915,
        "name": "Bosun",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF438D \u3010The Child and Sequence\u3011"
    },
    {
        "content": "CSP\u8fd8\u6709\u56db\u5929\uff0c\u5199\u7bc7\u9898\u89e3\u6512\u6512RP\n\n\u8fd9\u4e2a\u9898\u548c**\u82b1\u795e\u6e38\u5386\u5404\u56fd**\u86ee\u50cf\u7684\uff0c\u76f8\u4fe1\u505a\u8fc7\u90a3\u9898\u7684\u540c\u5b66\u8fd9\u4e2a\u9898\u4e5f\u4e0d\u662f\u95ee\u9898\uff0c\u8fd9\u4e2a\u9898\u5355\u70b9\u5c31\u5728\u4e0e\u53d6\u6a21\uff0c\u6ce8\u610f\u5230\u7684\u662f\uff0c\u76f4\u63a5\u5bf9\u533a\u95f4\u53d6\u6a21\u662f\u4e0d\u6ee1\u8db3\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6027\u8d28\u7684\uff0c\u6240\u4ee5\u53ea\u80fd\u4e00$down$\u5230\u5e95\uff0c\u9012\u5f52\u5230\u53f6\u8282\u70b9\uff0c\u90a3\u80af\u5b9a\u6709\u4eba\u4f1a\u95ee\uff1a\u8fd9\u4e0d\u5c31$T$\u98de\u4e86\u5417\uff1f\n\n\u4f46\u662f\u8003\u8651\u4e00\u4e0b\uff0c\u5bf9\u4e00\u4e2a\u6570\u53d6\u6a21\uff0c\u5c0f\u6a21\u5927\u5f97\u5c0f\uff0c\u5047\u5982\u4e00\u6bb5\u533a\u95f4\u6700\u5927\u503c\u90fd\u6bd4\u8fd9\u4e2a\u6a21\u6570\u5c0f\uff0c\u90a3\u65e0\u8bba\u600e\u4e48\u6539\uff0c\u5176\u503c\u90fd\u4e0d\u4f1a\u53d8\uff0c\u6709\u4e86\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u6389\u8bb8\u591a\u4e0d\u5fc5\u8981\u7684\u64cd\u4f5c\uff0c\u7531\u4e8e\u4e00\u6b21\u53d6\u6a21\u81f3\u5c11\u4f1a\u780d\u4e00\u534a\uff0c\u6240\u4ee5\u5728$log$\u7684\u65f6\u95f4\u5185\u5c31\u53ef\u4ee5\u5b8c\u6210\u5bf9\u4e00\u4e2a\u6570\u7684\u6240\u6709\u53d6\u6a21\u64cd\u4f5c\uff0c\u8fd9\u6837\u5c31\u53ef\u505a\u4e86\uff0c\u800c\u4e0a\u9762\u63d0\u5230\u7684\u90a3\u4e2a\u9898\u662f\u5f00\u6839\u53f7\uff0c\u601d\u60f3\u662f\u4e00\u6837\u7684\uff0c\u5f53\u5f00\u5230$1$\u7684\u65f6\u5019\u5c31\u4e0d\u7528\u518d\u5f00\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u989d\u5916\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c\u5373\u53ef\n\nPS\uff1a\u5176\u5b9e\u8fd9\u662f\u6211\u4eec\u4eca\u5929\u7684\u8003\u8bd5\u9898\uff0c\u8fd8\u52a0\u4e86\u6811\u5256\uff0c\u5176\u5b9e\u548c\u5e8f\u5217\u4e0a\u6ca1\u5565\u533a\u522b\uff0c\u6240\u4ee5\u4f1a\u6709\u4e9b\u5947\u602a\u7684\u7684\u4e1c\u897f\uff0c\u5ffd\u7565\u5c31\u597d\uff08\u4e2a\u4eba\u559c\u6b22\u7ed3\u6784\u4f53\u5c01\u88c5\uff09\n\n## code\n```\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#define ls (o << 1)\n#define rs (o << 1 | 1)\n/*\n\t\u6211\u5728\u65f6\u5149\u6591\u9a73\u7684\u6df1\u5904\uff0c\n\t\u8046\u542c\u5230\u82b1\u5f00\u7684\u58f0\u97f3\u3002\n\t\u541b\u304c\u304f\u308c\u305f\u3082\u306e \n*/\nusing namespace std;\ntypedef long long LL;\nconst int N = 1e5 + 5;\nint n, m, head[N], cnt, tot, v[N];\nstruct saber { int nxt, to; } rin[N << 1];\nint fa[N], son[N], size[N], dep[N], top[N], dfn[N << 2], rev[N << 2];\n\ninline int read() {\n\tint x = 0, f = 1; char c = getchar();\n\twhile (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9') x = (x << 1) + (x << 3) + (c ^ 48), c = getchar();\n\treturn x * f;\n}\n/*\u4ee5\u4e0b\u662f\u6811\u5256\u90e8\u5206\uff0c\u8bf7\u81ea\u884c\u8df3\u8fc7*/\nstruct Tree_Chain_cut {\n\t\n\tinline void add(int fr, int to) {\n\t\trin[++cnt].to = to;\n\t\trin[cnt].nxt = head[fr];\n\t\thead[fr] = cnt;\n\t}\n\t\n\tvoid dfs1(int x, int f) {\n\t\tdep[x] = dep[fa[x] = f] + (size[x] = 1);\n\t\tfor (int i = head[x]; i ; i = rin[i].nxt) {\n\t\t\tint vc = rin[i].to;\n\t\t\tif (vc == f) continue;\n\t\t\tdfs1(vc, x);\n\t\t\tsize[x] += size[vc];\n\t\t\tif (size[vc] > size[son[x]]) son[x] = vc;\n\t\t}\n\t}\n\t\n\tvoid dfs2(int x, int tp) {\n\t\ttop[rev[dfn[x] = ++ tot] = x] = tp;\n\t\tif (son[x]) dfs2(son[x], tp);\n\t\tfor (int i = head[x]; i ; i = rin[i].nxt) {\n\t\t\tint vc = rin[i].to;\n\t\t\tif (vc == fa[x] || vc == son[x]) continue;\n\t\t\tdfs2(vc, vc);\n\t\t}\n\t}\n\t\n}Shana;\n/*\u4ee5\u4e0a\u662f\u6811\u5256\u90e8\u5206*/\n\n/*\u4ee5\u4e0b\u662f\u672c\u9898\u4ee3\u7801*/\nstruct Segment_Tree {\n\t\n\tstruct Tree { LL maxn, sum; } T[N << 2];\n\t\n\tinline void update(int o) { \n\t\tT[o].sum = T[ls].sum + T[rs].sum; \n\t\tT[o].maxn = max(T[ls].maxn, T[rs].maxn);\n\t}\n\t\n\tvoid build(int o, int l, int r) {\n\t\tif (l == r) { T[o].sum = T[o].maxn = v[rev[l]]; return; }\n\t\tint mid = (l + r) >> 1;\n\t\tbuild(ls, l, mid), build(rs, mid + 1, r);\n\t\tupdate(o);\n\t}\n\t\n\tvoid Change_p(int o, int l, int r, int x, LL v) {\n\t\tif (l == r) {  T[o].sum = T[o].maxn = v; return; }\n\t\tint mid = (l + r) >> 1;\n\t\tif (x <= mid) Change_p(ls, l, mid, x, v);\n\t\telse Change_p(rs, mid + 1, r, x, v);\n\t\tupdate(o);\n\t}\n\t\n\tvoid Change(int o, int l, int r, int x, int y, LL v) {\n    \t//\u533a\u95f4\u6700\u5927\u503c\u7684\u4f5c\u7528\uff0c\u5c0f\u4e8e\u6a21\u6570\u76f4\u63a5return\n\t\tif (x <= l && y >= r && T[o].maxn < v) return; \n\t\tif (l == r) { T[o].sum %= v, T[o].maxn = T[o].sum; return; }\n\t\tint mid = (l + r) >> 1;\n\t\tif (x <= mid) Change(ls, l, mid, x, y, v);\n\t\tif (y > mid) Change(rs, mid + 1, r, x, y, v);\n\t\tupdate(o);\n\t}\n\t\n\tLL query(int o, int l, int r, int x, int y) {\n\t\tif (l >= x && r <= y) return T[o].sum;\n\t\tint mid = (l + r) >> 1; LL res = 0;\n\t\tif (x <= mid) res += query(ls, l, mid, x, y);\n\t\tif (y > mid) res += query(rs, mid + 1, r, x, y);\n\t\treturn res;\n\t}\n\t\n} Violet;\n/*\u4ee5\u4e0a\u662f\u672c\u9898\u4ee3\u7801*/\n\n/*\u6811\u5256\u8bf7\u5ffd\u7565*/\nstruct QUERY {\n\t\n\tvoid Change_point(int x, int v) { Violet.Change_p(1, 1, n, dfn[x], v); }\n\t\n\tLL Ask(int x, int y) {\n\t\tLL res = 0;\n\t\twhile (top[x] != top[y]) {\n\t\t\tif (dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\t\tres += Violet.query(1, 1, n, dfn[top[x]], dfn[x]);\n\t\t\tx = fa[top[x]];\n\t\t}\n\t\tif (dep[x] > dep[y]) swap(x, y);\n\t\tres += Violet.query(1, 1, n, dfn[x], dfn[y]);\n\t\treturn res;\n\t}\n\n} Nymph;\n/*\u6811\u5256\u8bf7\u5ffd\u7565*/\n\nint main() {\n\tfreopen(\"flower.in\", \"r\", stdin);\n\tfreopen(\"flower.out\", \"w\", stdout);\n\n\tcin >> n >> m;\n\tfor (int i = 1, u, v; i < n; ++ i) {\n\t\tu = read(), v = read();\n\t\tShana.add(u, v), Shana.add(v, u);\n\t} \n\tfor (int i = 1; i <= n; ++ i) v[i] = read();\n\tShana.dfs1(1, 0), Shana.dfs2(1, 1), Violet.build(1, 1, n);\n\tfor (int i = 1, op, x, y; i <= m; ++ i) {\n\t\top = read(), x = read(), y = read();\n        //\u8fd9\u662f\u8003\u8bd5\u4ee3\u7801\uff0c\u6ca1\u6539\u524d\u7684\uff0c\u64cd\u4f5c\u987a\u5e8f\u6709\u70b9\u4e0d\u4e00\u6837\uff0c\u8bf7\u6ce8\u610f\n\t\tif (op == 1) Violet.Change(1, 1, n, dfn[x], dfn[x] + size[x] - 1, y);\n\t\tif (op == 2) Nymph.Change_point(x, y);\n\t\tif (op == 3) printf(\"%lld\\n\", Nymph.Ask(x, y));\n\t}\n\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n```\n",
        "postTime": 1573553033,
        "uid": 160654,
        "name": "\u707c\u773c\u7684\u590f\u5a1c",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF438D \u3010The Child and Sequence\u3011"
    },
    {
        "content": "\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\n\n\u95ee\u9898\u662f\u533a\u95f4\u53d6\u819c\u600e\u4e48\u641e\u5440\uff0c\u53d6\u8d77\u6765\u8d85\u7ea7\u6162\u7684QAQ\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e2a\u6570\u53d6\u6a21\u540e\u5982\u679c\u5b83\u6539\u53d8\u4e86\uff0c\u90a3\u4e48\u5b83\u5fc5\u7136\u7f29\u5c0f\u81f3\u5c11\u4e8c\u5206\u4e4b\u4e00\u3002\n\n\u6bd4\u5982\u8bf4\u4e00\u4e2a$a\\%b=c\\quad(b<a)$\uff0c\u6211\u4eec\u6709$a=kb+c$\u4e14$b>c,k>1$\uff0c\u90a3\u4e48\u5c31\u6709$a>2c$\n\n\u6709\u4e86\u8fd9\u70b9\u5c31\u597d\u529e\u4e86\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c\uff0c\u6bcf\u6b21\u53d6\u819c\u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e0b\u6700\u5927\u503c\u5982\u679c\u5c0f\u4e8e\u819c\u6570\u7684\u8bdd\u5c31\u4e0d\u5904\u7406\u4e86\u3002\n\n\u8fd9\u6837\u6bcf\u4e2a\u6570\u6700\u591a\u88ab\u819c$loga_i$\u6b21\uff0c\u603b\u590d\u6742\u5ea6$O(nlognloga_i)$\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h> \n#define fo(i, a, b) for (int i = (a); i <= (b); ++i)\n#define fd(i, a, b) for (int i = (a); i >= (b); --i)\n#define edge(i, u) for (int i = head[u], v = e[i].v; i; i = e[i].nxt, v = e[i].v)\n#define N 100005\n#define pb push_back\n#define F first\n#define S second\n#define ll long long\n#define inf 1000000007\n#define mp std::make_pair\n#define lowbit(x) (x & -x)\n#define ls (k << 1)\n#define rs (k << 1 | 1)\nint n, m, a[N], x, y, pos, val, opt, tot, l, r;\nstruct node{\n    ll sum, max, add;\n}t[N << 2];\ninline void pushdown (int k)\n{\n    if (t[k].add)\n    {\n        t[ls].add += t[k].add;\n        t[rs].add += t[k].add;\n        t[k].sum += t[k].add;\n        t[k].add = 0;\n    }\n}\ninline void build (int k, int l, int r)\n{\n    if (l == r) {t[k].max = t[k].sum = a[l]; return;}\n    int mid = l + r >> 1;\n    build(ls, l, mid);\n    build(rs, mid + 1, r);\n    t[k].sum = t[ls].sum + t[rs].sum;\n    t[k].max = std::max(t[ls].max, t[rs].max);\n}\ninline void modify (int k, int l, int r)\n{\n    if (l == r && l == pos) {t[k].max = t[k].sum = val; return;}\n    pushdown(k);\n    int mid = l + r >> 1;\n    if (pos <= mid) modify(ls, l, mid);\n        else modify(rs, mid + 1, r);\n    t[k].sum = t[ls].sum + t[rs].sum;\n    t[k].max = std::max(t[ls].max, t[rs].max);\n}\ninline ll query (int k, int l, int r, int x, int y)\n{\n    if (x <= l && r <= y) {return t[k].sum + t[k].add;}\n    pushdown(k);\n    int mid = l + r >> 1;\n    if (y <= mid) return query(ls, l, mid, x, y);\n    if (x > mid) return query(rs, mid + 1, r, x, y);\n    return query(ls, l, mid, x, y) + query(rs, mid + 1, r, x, y);\n}\ninline void modulo (int k, int l, int r, int x, int y)\n{\n    if (x <= l && r <= y && t[k].max < val) return;\n    if (l == r) {t[k].sum = t[k].max = t[k].sum % val; return;}\n    pushdown(k);\n    int mid = l + r >> 1;\n    if (x <= mid) modulo(ls, l, mid, x, y);\n    if (mid < y) modulo(rs, mid + 1, r, x, y);\n    t[k].sum = t[ls].sum + t[rs].sum;\n    t[k].max = std::max(t[ls].max, t[rs].max);\n}\nint main ()\n{\n    scanf(\"%d %d\", &n, &m);\n    fo (i, 1, n)\n        scanf(\"%d\", &a[i]);\n    build(1, 1, n);\n    fo (I, 1, m)\n    {\n        scanf(\"%d\", &opt);\n        if (opt == 1)\n        {\n            scanf(\"%d %d\", &l, &r);\n            printf(\"%lld\\n\", query(1, 1, n, l, r));\n        }\n        else\n        if (opt == 2)\n        {\n            scanf(\"%d %d %d\", &l, &r, &val);\n            modulo(1, 1, n, l, r);\n        }\n        else\n        {\n            scanf(\"%d %d\", &pos, &val);\n            modify(1, 1, n);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1540547172,
        "uid": 13137,
        "name": "HomuraCat",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF438D \u3010The Child and Sequence\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u6570\u5217\uff0c\u533a\u95f4\u67e5\u8be2\u548c\uff0c\u533a\u95f4\u53d6\u6a21\uff0c\u5355\u70b9\u4fee\u6539\u3002\n\n$n,m$\u5c0f\u4e8e$10^5$\n\n\u67e5\u8be2\u533a\u95f4\u548c\u548c\u5355\u70b9\u4fee\u6539\u5c31\u4e0d\u7528\u8bf4\u4e86\u5427\uff0c\u7ebf\u6bb5\u6811\u57fa\u672c\u64cd\u4f5c\uff0c\u90a3\uff1f\uff1f\u5bf9\u4e8e\u8fd9\u9053\u9898\u76ee\u7684\u533a\u95f4\u4fee\u6539\u8be5\u600e\u4e48\u5904\u7406\u5462\uff1f\uff1f\u4e0d\u96be\u53d1\u73b0\uff0c\u4e00\u4e2a\u6570\u6a21\u4e24\u6b21\u540c\u6837\u7684\u6570\u65f6\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u7684\uff0c\u800c\u4e14\u4e00\u4e2a\u6570\u6a21\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u6570\u4e5f\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff1f\uff01\uff01\uff01\u90a3\u4e48\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u91c7\u7528\u4e00\u79cd\u66b4\u529b\u7684\u601d\u60f3\uff0c\u53bb\u4fee\u6539\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u5224\u65ad\u4e00\u4e0b\u533a\u95f4\u6700\u5927\u503c\u662f\u4e0d\u662f\u6bd4\u6a21\u6570\u5927\u5373\u53ef\u3002\u56e0\u4e3a\u662f\u66b4\u529b\u4fee\u6539\uff0c\u6240\u4ee5\u4e5f\u65e0\u9700$pushdown$\uff0c\u90a3\u4e48\u4ee3\u7801\u5e94\u8be5\u5c31\u5f88\u597d\u5199\u4e86\u5427\uff0c\u4e5f\u4e0d\u7b97\u592a\u957f\u3002\n\n\n\u4e0b\u9762\u662f\u6211\u7684\u4ee3\u7801\uff0c\u4ec5\u4f9b\u53c2\u8003\uff0c~~\u6bd5\u7adf\u592a\u4e11\u4e86~~\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cctype>\n#define maxn 100007\n#define ls rt<<1\n#define rs rt<<1|1\n#define ll long long\nusing namespace std;\nint n,m,maxx[maxn<<2];\nll sum[maxn<<2];\ninline int qread() {\n  char c=getchar();int num=0,f=1;\n  for(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n  for(;isdigit(c);c=getchar()) num=num*10+c-'0';\n  return num*f;\n}\ninline void pushup(int rt) {\n  sum[rt]=sum[ls]+sum[rs];\n  maxx[rt]=max(maxx[ls],maxx[rs]);\n}\nvoid build(int rt, int l, int r) {\n  if(l==r) {\n    maxx[rt]=sum[rt]=qread();\n    return;\n  }\n  int mid=(l+r)>>1;\n  build(ls,l,mid);\n  build(rs,mid+1,r);\n  pushup(rt);\n}\nvoid add(int rt, int l, int r, int L, int val) {\n  if(l==r) {\n    maxx[rt]=sum[rt]=val;\n    return;\n  }\n  int mid=(l+r)>>1;\n  if(L<=mid) add(ls,l,mid,L,val);\n  else add(rs,mid+1,r,L,val);\n  pushup(rt);\n}\nll csum(int rt, int l, int r, int L, int R) {\n  if(L<=l&&r<=R) return sum[rt];\n  int mid=(l+r)>>1;\n  ll ans=0;\n  if(L<=mid) ans+=csum(ls,l,mid,L,R);\n  if(R>mid) ans+=csum(rs,mid+1,r,L,R);\n  return ans;\n}\nvoid modify(int rt, int l, int r, int L, int R, int p) {\n  if(maxx[rt]<p) return;\n  if(l==r) {\n    sum[rt]%=p;maxx[rt]%=p;\n    return;\n  }\n  int mid=(l+r)>>1;\n  if(L<=mid) modify(ls,l,mid,L,R,p);\n  if(R>mid) modify(rs,mid+1,r,L,R,p);\n  pushup(rt);\n}\nint main() {\n  n=qread(),m=qread();\n  build(1,1,n);\n  for(int i=1,k,x,y,z;i<=m;++i) {\n    k=qread(),x=qread(),y=qread();\n    if(k==1) printf(\"%lld\\n\",csum(1,1,n,x,y));\n    if(k==2) {\n      z=qread();\n      modify(1,1,n,x,y,z);\n    }\n    if(k==3) add(1,1,n,x,y);\n  }\n  return 0;\n}\n```",
        "postTime": 1546692189,
        "uid": 68622,
        "name": "King\u4e28\u5e1d\u5fa1\u5a01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF438D \u3010The Child and Sequence\u3011"
    },
    {
        "content": "## \u5206\u5757\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898qwq\n\n~~\u8dd1\u7684\u8d3c\u6162= =~~\n\n\n\u54b3\u54b3\uff0c\u8fdb\u5165\u6b63\u9898\u3002\n\n\u533a\u95f4\u6c42\u548c\u548c\u5355\u70b9\u4fee\u6539\u90fd\u662f\u57fa\u64cd\uff0c\u8fd9\u91cc\u5c31\u4e0d\u6df1\u5165\u8bb2\u89e3\u4e86\n\n\u770b\u770b\u533a\u95f4\u53d6%\n\n\u65b9\u6cd5\u4e4b\u524d\u7684dalao\u90fd\u8bf4\u4e86\uff0c\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u5757\u5185\u7684\u6700\u5927\u503c\uff0c\u5982\u679c\u8fd9\u4e2a\u6700\u5927\u503c\u5c0f\u4e8e\u819c\u6570\u5c31\u76f4\u63a5\u8df3\u8fc7\u6b64\u5757\uff0c\u6563\u5757\u66b4\u529b\u4fee\u6539\uff0c\u56e0\u4e3a\u6bcf\u6b21\u4fee\u6539\u81f3\u5c11\u8ba9\u4e00\u4e2a\u6570\u51cf\u5c0f\u4e00\u534a\uff0c\u6240\u4ee5\u6bcf\u4e2a\u6570\u6700\u591a\u4fee\u6539\u6b21\u6570\u4e3alog\u7ea7\u522b\u7684\u3002 **\u7136\u800c\u5206\u5757\u600e\u4e48\u7ef4\u62a4\u6700\u5927\u503c\u5462= =\uff1f** \u611a\u8822\u5982\u6211\u81ea\u7136\u53ea\u80fd\u7528\u8822\u529e\u6cd5\u4e86QAQ \uff1a\n\n\u7528vector\u4fdd\u5b58\u6bcf\u4e2a\u5757\u5185\u7684\u6570\u503c\u5927\u5c0f\uff0c \u4fee\u6539\u7684\u65f6\u5019\u53ea\u8981erase\u6389\u5f53\u524d\u6570\u503c\u518dinsert\u4fee\u6539\u540e\u7684\u6570\u503c\u5c31\u597d\u4e86\u3002 \u53d6\u6700\u5927\u503c\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u53d6\u51favector\u7684\u6700\u540e\u4e00\u4e2a\u503c\u3002\n\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\u554aqaq \n\n**\u611f\u89c9\u8fd8\u6709\u4f18\u5316\u7684\u7a7a\u95f4**\uff0c\u5c0f\u849f\u84bb\u7684\u9898\u89e3\u6743\u5f53\u629b\u7816\u5f15\u7389\u4e86qwqwq \n\n\u5982\u679c\u8fd8\u6709\u4ec0\u4e48\u95ee\u9898\u6216\u8005\u610f\u89c1\u5efa\u8bae\u7684\u8bdd\u4e0d\u59a8\u76f4\u63a5\u79c1\u4fe1\u5c0f\u849f\u84bbqaq\n\n**\u90a3\u4e48\u4ee3\u7801\u5982\u4e0b**\n\n```\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n#define maxn 100010\n#define ll long long\n#define re register\n#define FOR(i, l, r) for(re ll i = l; i <= r; ++i)\nusing namespace std;\n\nll n, m, c, r, t, x, y, z, k; //\u5c0f\u849f\u84bb\u592a\u61d2\u5c31\u5168\u5f00\u4e0along long\u4e86\nll sq;\nll a[maxn], b[maxn], maxx[maxn], ans[maxn];\nvector<ll> ve[1001];\n\ninline void in(re ll &x){ //\u5feb\u8bfb\n    x=0;ll f=1;char c=getchar();\n    while(c<'0'||c>'9'){\n        if(c==-1) return;\n        if(c=='-')f=-1;\n        c=getchar();\n    }\n    while(c<='9'&&c>='0'){\n        x=(x<<1)+(x<<3)+(c^'0');\n        c=getchar();\n    }\n    x=x*f;\n}\n\nvoid out(re ll a){\n    if(a<0){\n        a*=-1;\n        putchar('-');\n    } \n    if(a>=10)out(a/10);\n    putchar(a%10+'0');\n}\n\nll query(ll x, ll y) { //\u6c42\u548c\n\tll anss = 0;\n\tFOR(i, x, min(y, b[x]*sq))\n      anss += a[i];\n    if(b[x] != b[y])\n      FOR(i, (b[y]-1)*sq+1, y) \n        anss += a[i];\n    FOR(i, b[x]+1, b[y]-1)\n      anss += ans[i];\n    return anss;\n}\n\nvoid change(ll x, ll y, ll p) { //\u533a\u95f4\u53d6%\n\tFOR(i, x, min(y, b[x]*sq)) { //\u6563\u5757\u66b4\u529b\u4fee\u6539\n\t\tif(a[i] >= p) {\n\t\t\tans[b[x]] -= a[i];\n\t\t\tve[b[x]].erase(lower_bound(ve[b[x]].begin(), ve[b[x]].end(), a[i]));\n\t\t\ta[i] %= p;\n\t\t\tans[b[x]] += a[i];\n\t\t\tve[b[x]].insert(lower_bound(ve[b[x]].begin(), ve[b[x]].end(), a[i]), a[i]);\n\t\t}\n\t}\n\tif(b[x] != b[y]) \n\t  FOR(i, (b[y]-1)*sq+1, y) {\n\t  \tif(a[i] >= p) {\n\t  \t\tans[b[y]] -= a[i];\n\t  \t\tve[b[y]].erase(lower_bound(ve[b[y]].begin(), ve[b[y]].end(), a[i]));\n\t  \t\ta[i] %= p;\n\t  \t\tans[b[y]] += a[i];\n\t  \t\tve[b[y]].insert(lower_bound(ve[b[y]].begin(), ve[b[y]].end(), a[i]), a[i]);\n\t\t  }\n\t  }\n\tFOR(i, b[x]+1, b[y]-1) { //\u6574\u5757\u5224\u65ad\u662f\u5426\u9700\u8981\u4fee\u6539\uff0c\u662f\u5219\u66b4\u529b\u53bb\u627e\n\t\tll nc = ve[i].size();\n\t\tif(ve[i][nc-1] >= p)\n\t\t  FOR(j, (i-1)*sq+1, i*sq) {\n\t\t  \tif(a[j] >= p) {\n\t\t  \t\tans[i] -= a[j];\n\t  \t\t\tve[i].erase(lower_bound(ve[i].begin(), ve[i].end(), a[j]));\n\t  \t\t\ta[j] %= p;\n\t  \t\t\tans[i] += a[j];\n\t  \t\t\tve[i].insert(lower_bound(ve[i].begin(), ve[i].end(), a[j]), a[j]);\n\t\t\t}\n\t\t  }\n\t}\n}\n\nint main() {\n\tin(n), in(m);\n\tsq = sqrt(n);\n\tFOR(i, 1, n) { //\u9884\u5904\u7406\n\t\tin(a[i]), b[i] = (i-1)/sq+1, ans[b[i]] += a[i];\t\n\t\tve[b[i]].insert(lower_bound(ve[b[i]].begin(), ve[b[i]].end(), a[i]), a[i]);\n\t} \n\tFOR(i, 1, m) {\n\t\tin(t);\n\t\tif(t == 1) {\n\t\t\tin(x), in(y);\n\t\t\tout(query(x, y));\n\t\t\tputchar(10);\n\t\t}\n\t\tif(t == 2) {\n\t\t\tin(x), in(y), in(z);\n\t\t\tchange(x, y, z);\n\t\t}\n\t\tif(t == 3) {\n\t\t\tin(x), in(k);\n\t\t\tans[b[x]] -= a[x];\n\t\t\tve[b[x]].erase(lower_bound(ve[b[x]].begin(), ve[b[x]].end(), a[x]));\n\t\t\ta[x] = k;\n\t\t\tans[b[x]] += k;\n\t\t\tve[b[x]].insert(lower_bound(ve[b[x]].begin(), ve[b[x]].end(), a[x]), a[x]);\n\t\t}\n\t}\n    return 0; // \u529f\u5fb7\u5706\u6ee1\n}\n```",
        "postTime": 1543233859,
        "uid": 66965,
        "name": "Juan_feng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF438D \u3010The Child and Sequence\u3011"
    },
    {
        "content": "### \u9898\u89e3\n\u7ebf\u6bb5\u6811\u57fa\u7840\u9898\u3002\n\n\u533a\u95f4\u67e5\u8be2\u548c\u3001\u5355\u70b9\u4fee\u6539\u5f88\u7b80\u5355\uff0c\u4e5f\u5f88\u57fa\u7840\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5728\u8d58\u8ff0\u3002\n\n\u91cd\u70b9\u6765\u770b\u4e00\u4e0b\u533a\u95f4\u53d6\u6a21\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u4e0d\u96be\u77e5\u9053\uff0c\u5f53\u4e00\u4e2a\u6570$a \\% b$\u65f6\uff0c\u5982\u679c$a < b$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u53d6\u6a21\u662f\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\u7684\uff08$*$\uff09\u3002\n\n\u5982\u679c\uff0c\u6211\u4eec\u6267\u884c\u533a\u95f4\u53d6\u6a21\u65f6\uff0c\u4e00\u4e2a\u4e00\u4e2a\u6570\u53bb\u53d6\u6a21\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u4f1a\u975e\u5e38\u9ad8\uff0c\u8fbe\u5230$\\Theta (n \\times m)$\uff0c\u7edd\u5bf9\u4f1a$TLE$\u3002\n\n\u56e0\u6b64\u8003\u8651\u4e00\u79cd\u7c7b\u4f3c\u641c\u7d22\u201c\u526a\u679d\u201d\u7684\u65b9\u5f0f\u6765\u4f18\u5316\u533a\u95f4\u53d6\u6a21\u3002\n\n\u8fd9\u65f6\uff0c\u6211\u4eec\u5c31\u8981\u7528\u5230\u4e0a\u9762\u7684\uff08$*$\uff09\u4e86\u3002\n\n\u7528\u4e00\u4e2a\u6570\u7ec4$mx[]$\u6765\u8bb0\u5f55\u533a\u95f4\u5185\u7684\u6700\u5927\u503c\uff0c\u5982\u679c\u8fd9\u4e2a\u6700\u5927\u503c\u90fd\u5c0f\u4e8e\u6211\u4eec\u8981\u53d6\u6a21\u7684\u90a3\u4e2a\u6570\u4e86\uff0c\u5c31\u76f4\u63a5$return$\u8fd4\u56de\u6389\uff0c\u56e0\u4e3a\u5bf9\u8fd9\u4e2a\u533a\u95f4\u53d6\u6a21\u5c31\u5df2\u7ecf\u6ca1\u6709\u610f\u4e49\u4e86\u3002\n\n\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u5199\u51fa$AC$\u4ee3\u7801\u3002\n\n### \u4ee3\u7801\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <cctype>\n#define int long long\n\nusing namespace std;\n\ninline int gi()\n{\n    int f = 1, x = 0; char c = getchar();\n    while (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar();}\n    while (c >= '0' && c <= '9') { x = x * 10 + c - '0'; c = getchar();}\n    return f * x;\n}\n\nint n/*\u6570\u7684\u4e2a\u6570*/, m/*\u64cd\u4f5c\u4e2a\u6570*/, tr[100003 << 2]/*\u533a\u95f4\u548c*/, mx[100003 << 2]/*\u533a\u95f4\u6700\u5927\u503c*/, a[100003]/*\u6bcf\u4e2a\u6570\u7684\u503c*/;\n\ninline void pushup(int p)//\u4e0a\u4f20\u8282\u70b9\u64cd\u4f5c\n{\n\tmx[p] = max(mx[p << 1], mx[(p << 1) | 1]);//\u66f4\u65b0\u533a\u95f4\u6700\u5927\u503c\n\ttr[p] = tr[p << 1] + tr[(p << 1) | 1];//\u52a0\u4e0a\u533a\u95f4\u548c\n}\n\nvoid build(int s, int t, int p)//\u5efa\u6811\u64cd\u4f5c\n{\n\tif (s == t)//\u5df2\u7ecf\u662f\u53f6\u5b50\u8282\u70b9\u4e86\n\t{\n\t\tmx[p] = tr[p] = a[s];//\u66f4\u65b0\u8282\u70b9\u7684\u53c2\u6570\n\t\treturn;//\u8fd4\u56de\n\t}\n\tint mid = (s + t) >> 1;//\u8ba1\u7b97\u4e2d\u95f4\u503c\n\tbuild(s, mid, p << 1); //\u9012\u5f52\u5de6\u5b50\u6811\n\tbuild(mid + 1, t, (p << 1) | 1);//\u9012\u5f52\u53f3\u5b50\u6811\n\tpushup(p);//\u4e0a\u4f20\u5f53\u524d\u8282\u70b9\n}\n\nvoid modify(int l/*\u8981\u4fee\u6539\u7684\u6570\u7684\u7f16\u53f7,\u5373\u76ee\u6807\u8282\u70b9*/, int r/*\u8981\u66f4\u65b0\u7684\u503c*/, int s, int t, int p)//\u5355\u70b9\u4fee\u6539\u64cd\u4f5c\n{\n\tif (s == t)//\u5df2\u7ecf\u5230\u4e86\u76ee\u6807\u8282\u70b9\n\t{\n\t\tmx[p] = tr[p] = r; //\u66f4\u65b0\u8282\u70b9\u53c2\u6570\n\t\treturn;//\u76f4\u63a5\u8fd4\u56de\n\t}\n\tint mid = (s + t) >> 1;//\u8ba1\u7b97\u4e2d\u95f4\u503c\n\tif (l <= mid) //\u76ee\u6807\u8282\u70b9\u5728\u5de6\u533a\u95f4\n\t\tmodify(l, r, s, mid, p << 1);//\u9012\u5f52\u5de6\u5b50\u6811\u5bfb\u627e\n\telse //\u76ee\u6807\u8282\u70b9\u5728\u53f3\u533a\u95f4\n\t\tmodify(l, r, mid + 1, t, (p << 1) | 1);//\u9012\u5f52\u53f3\u533a\u95f4\u67e5\u627e\n\tpushup(p);//\u4e0a\u4f20\u5f53\u524d\u8282\u70b9\n}\n\nvoid getmod(int l/*\u533a\u95f4\u5de6\u754c*/, int r/*\u533a\u95f4\u53f3\u754c*/, int mod/*\u8981\u53d6\u6a21\u7684\u503c*/, int s, int t, int p)//\u533a\u95f4\u53d6\u6a21\u64cd\u4f5c\n{\n\tif (mx[p] < mod) return;//\"\u526a\u679d\"\u64cd\u4f5c\n\tif (s == t)//\u5df2\u7ecf\u5230\u4e86\u53f6\u5b50\u8282\u70b9\n\t{\n\t\ttr[p] = tr[p] % mod; //\u53d6\u6a21\n\t\tmx[p] = tr[p];//\u66f4\u65b0\u6700\u5927\u503c\n\t\treturn;//\u8fd4\u56de\n\t}\n\tint mid = (s + t) >> 1;//\u8ba1\u7b97\u4e2d\u95f4\u503c\n\tif (l <= mid) getmod(l, r, mod, s, mid, p << 1);//\u67e5\u627e\u4e2d\u70b9\u5de6\u8fb9\u7684\u533a\u95f4\u8fdb\u884c\u53d6\u6a21\n\tif (r > mid) getmod(l, r, mod, mid + 1, t, (p << 1) | 1);//\u67e5\u627e\u4e2d\u70b9\u53f3\u8fb9\u7684\u533a\u95f4\u8fdb\u884c\u53d6\u6a21\n\tpushup(p);//\u4e0a\u4f20\u5f53\u524d\u8282\u70b9\n}\n\nint getans(int l, int r, int s, int t, int p)//\u67e5\u8be2\u533a\u95f4\u548c\u64cd\u4f5c\n{\n\tif (l <= s && t <= r) return tr[p];//\u5f53\u524d\u533a\u95f4\u5b8c\u5168\u5305\u542b\u4e8e\u76ee\u6807\u533a\u95f4,\u5c31\u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u533a\u95f4\u7684\u548c\n\tint mid = (s + t) >> 1, ans = 0;//\u8ba1\u7b97\u4e2d\u95f4\u503c\u53ca\u521d\u59cb\u5316\u7b54\u6848\n\tif (l <= mid) ans = ans + getans(l, r, s, mid, p << 1);//\u52a0\u4e0a\u4e2d\u70b9\u5de6\u8fb9\u7684\u533a\u95f4\u8fdb\u884c\u6c42\u548c\n\tif (r > mid) ans = ans + getans(l, r, mid + 1, t, (p << 1) | 1);//\u52a0\u4e0a\u4e2d\u70b9\u53f3\u8fb9\u7684\u533a\u95f4\u8fdb\u884c\u6c42\u548c\n\treturn ans;//\u8fd4\u56de\u7b54\u6848\n}\n\nsigned main()\n{\n\tn = gi(), m = gi();\n\tfor (int i = 1; i <= n; i++) a[i] = gi();\n\t//\u4ee5\u4e0a\u4e3a\u8f93\u5165\n\tbuild(1, n, 1);//\u5efa\u6811\n\twhile (m--)\n\t{\n\t\tint fl = gi(), x = gi(), y = gi();\n\t\tif (fl == 1)//\u662f\u8f93\u51fa\u533a\u95f4\u548c\u64cd\u4f5c\n\t\t{\n\t\t\tprintf(\"%lld\\n\", getans(x, y, 1, n, 1));//\u5c31\u8f93\u51fa\u533a\u95f4\u548c\n\t\t}\n\t\telse if (fl == 2)//\u533a\u95f4\u53d6\u6a21\u64cd\u4f5c\n\t\t{\n\t\t\tint md = gi();//\u8f93\u5165\u6a21\u6570\n\t\t\tgetmod(x, y, md, 1, n, 1);//\u8fdb\u884c\u53d6\u6a21\n\t\t}\n\t\telse \n\t\t{\n\t\t\tmodify(x, y, 1, n, 1);//\u5426\u5219\u5c31\u8fdb\u884c\u5355\u70b9\u4fee\u6539,\u6ce8\u610f\u662f\u628a\u70b9x\u7684\u503c\u4fee\u6539\u4e3ay\n\t\t}\n\t}\n\treturn 0;//\u7ed3\u675f\n}\n```",
        "postTime": 1562315062,
        "uid": 70581,
        "name": "xsI666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF438D \u3010The Child and Sequence\u3011"
    },
    {
        "content": "\u4e4b\u524d\u7684\u9898\u89e3\u53ea\u8bf4\u5230\u53ef\u4ee5\u4e0d\u6253\u6807\u8bb0\u76f4\u63a5\u6539\uff0c\u4f46\u662f\u6ca1\u8bf4\u5230\u70b9\u5b50\u4e0a\u3002\u3002\u3002\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u6837\u505a\uff1f\u601d\u8003mod\u8fd0\u7b97\u7684\u65b9\u5f0f\uff0c\u5982\u679cmod\u4e00\u6b21\uff0c\u82e5\u662f\u6a21\u6570\u5927\u4e8e\u88ab\u819c\u6570\uff0c\u5219\u4e0d\u4f1a\u6709\u4efb\u4f55\u6539\u53d8\uff0c\u53ef\u4ee5\u7ef4\u62a4\u6700\u5927\u503c\u8df3\u8fc7\uff0c\u82e5\u662f\u5bf9\u6570\u5217\u6709\u5f71\u54cd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u5b57\u4e00\u5b9a\u81f3\u5c11\u4f1a/2\uff0c\u80af\u5b9a\u6bd4\u539f\u6765\u76841/2\u5c0f\uff0c\u6240\u4ee5\u4e00\u4e2a\u6570\u6700\u591a\u66f4\u6539log\u6b21\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u6837\u505a\u7684\u539f\u56e0\u3002\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 100005;\n#define ll long long \nstruct node{\n    ll maxn,sum;\n    node *ls,*rs;\n    node(ll m,ll s,node *l,node *r) : maxn(m),sum(s),ls(l),rs(r){}\n    node(){}\n}pool[MAXN * 2];\nnode *NewNode(ll maxn,ll sum,node *ls,node *rs){\n    static int cnt = 0;\n    pool[cnt] = node(maxn,sum,ls,rs);\n    return &pool[cnt++];\n}\nll n,m,a[MAXN];\nnode *build(int l,int r){\n    if(l > r)return NULL;\n    node *rt = NewNode(0,0,NULL,NULL);\n    if(l == r){\n        rt->maxn = rt->sum = a[l];\n        return rt;\n    }\n    int mid = l + r >> 1;\n    rt->ls = build(l,mid);\n    rt->rs = build(mid + 1,r);\n    rt->maxn = max(rt->ls->maxn,rt->rs->maxn);\n    rt->sum = rt->ls->sum + rt->rs->sum;\n    return rt;\n}\nvoid change(node *rt,int l,int r,int place,ll x){\n    if(l == r){\n        rt->sum = x;\n        rt->maxn = x;\n        return ;\n    }\n    int mid = l + r >> 1;\n    rt->maxn = max(rt->maxn,x);\n    if(mid >= place)change(rt->ls,l,mid,place,x);\n    else change(rt->rs,mid + 1,r,place,x);\n    rt->sum = rt->ls->sum + rt->rs->sum;\n}\nvoid getmod(node *rt,int l,int r,int L,int R,ll x){\n    if(l == r){\n        rt->maxn %= x;\n        rt->sum = rt->maxn;\n        return ; \n    }\n    int mid = l + r >> 1;\n    if(L <= l && r <= R){\n        if(rt->maxn < x)return ;\n        getmod(rt->ls,l,mid,L,R,x);\n        getmod(rt->rs,mid + 1,r,L,R,x);\n        rt->maxn = max(rt->ls->maxn,rt->rs->maxn);\n        rt->sum = rt->ls->sum + rt->rs->sum;\n        return ;\n    }\n    if(mid >= L)getmod(rt->ls,l,mid,L,R,x);\n    if(mid < R)getmod(rt->rs,mid + 1,r,L,R,x);\n    rt->maxn = max(rt->ls->maxn,rt->rs->maxn);\n    rt->sum = rt->ls->sum + rt->rs->sum;\n    return ;\n}\nll query(node *rt,int l,int r,int L,int R){\n    if(L <= l && r <= R){\n        return rt->sum;\n    }\n    int mid = l + r >> 1;ll ans = 0;\n    if(mid >= L)ans += query(rt->ls,l,mid,L,R);\n    if(mid < R)ans += query(rt->rs,mid + 1,r,L,R);\n    return ans;\n}\nint main()\n{\n    scanf(\"%lld %lld\",&n,&m);\n    for(int i = 1; i <= n; ++i){\n        scanf(\"%lld\",&a[i]);  \n    }\n    node *rt =  build(1,n);\n    int opt,l,r;ll x;\n    for(int i = 1; i <= m; ++i){\n        scanf(\"%d\",&opt);\n        if(opt == 1){\n            scanf(\"%d %d\",&l,&r);\n            printf(\"%lld\\n\",query(rt,1,n,l,r));\n        }\n        if(opt == 2){\n            scanf(\"%d %d %lld\",&l,&r,&x);\n            getmod(rt,1,n,l,r,x);\n        }\n        if(opt == 3){\n            scanf(\"%d %lld\",&l,&x);\n            change(rt,1,n,l,x);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1532748179,
        "uid": 52576,
        "name": "moye\u5230\u7897\u91cc\u6765",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF438D \u3010The Child and Sequence\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4e3b\u8981\u8003\u5bdf\u7ebf\u6bb5\u6811emm...\n\n\u521a\u5f00\u59cb\u89c9\u5f97\u6c42\u6a21\u8981\u61d2\u6807\u8bb0\uff0c\u7136\u540e\u5ffd\u7136\u53d1\u73b0\u6ca1\u6709\u6b63\u786e\u6027\uff0c\u663e\u7136(a[l] + a[l + 1] .... + a[r])%mod != a[l] % mod + a[l+1] % mod .... + a[r] % mod\n\n\u90a3\u4e48\u53ea\u80fd\u773c\u7741\u7741\u770b\u7740\u4e00\u6b21\u6c42\u6a21\u904d\u5386\u6240\u6709\u8282\u70b9\u5417\uff0c\u6240\u4ee5\u8981\u52a0\u4f18\u5316\u3002\n\n\u4ec0\u4e48\u65f6\u5019\u6211\u4eec\u4e0d\u7528\u6a21?\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u533a\u95f4\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u6bd4mod\u5c0f\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\uff0c\u4f7f\u5f97\u5f53\u6211\u4eec\u4fbf\u5229\u5230\u67d0\u4e2a\u533a\u95f4\u65f6\uff0c\u5047\u5982\u533a\u95f4\u6700\u5927\u503c\u90fd\u5c0f\u4e8emod\uff0c\u6211\u4eec\u5c31\u53ef\u5df2\u76f4\u63a5return\n\n\u53c2\u8003\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define k 32001\n#define lson(x) (x << 1)\n#define rson(x) ((x << 1) + 1)\ntypedef long long ll;\n\ninline ll read()\n{\n\tll x(0), f(1);\n\tchar ch = getchar();\n\twhile (ch > '9' || ch < '0')\n\t{\n\t\tif (ch == '-')f = -1;\n\t\tch = getchar();\n\t}\n\twhile (ch <= '9' && ch >= '0')\n\t{\n\t\tx = x * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn x * f;\n}\ninline void write(ll x)\n{\n\tint num(0);\n\tif (x == 0)\n\t{\n\t\tputchar('0');\n\t\tputchar('\\n');\n\t\treturn;\n\t}\n\tif (x < 0)\n\t{\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tchar a[11];\n\twhile (x > 0)\n\t{\n\t\ta[num] = x % 10 + '0';\n\t\tx /= 10;\n\t\t++num;\n\t}\n\tfor (int i(num - 1); i >= 0; --i)putchar(a[i]);\n\tputchar('\\n');\n\treturn;\n}\n\nll sum[4123456];\nll maxinum[4123456];//\u7ef4\u62a4\u6700\u5927\u503c\n\ninline void pushup(int node)\n{\n\tsum[node] = sum[node << 1] + sum[node << 1 | 1];\n\tmaxinum[node] = max(maxinum[node << 1],maxinum[node << 1 | 1]);\n}//\u88ab\u513f\u5b50\u66f4\u65b0 \n\nvoid build(int l,int r,int node)\n{\n\tif(l == r)\n\t{\n\t\tmaxinum[node] = sum[node] = read();\n\t\treturn;\n\t}\n\tint mid((l + r) >> 1);\n\tbuild(l, mid, node << 1);\n\tbuild(mid + 1, r, node << 1 | 1);\n\tpushup(node);\n\treturn;\n}\n\nvoid update(int l,int r,int points,ll to,int node)\n{\n\tif(l == r)\n\t{\n\t\tmaxinum[node] = sum[node] = to;\n\t\treturn;\n\t}\n\tint mid((l + r) >> 1);\n\tif(mid >= points)update(l, mid, points, to, node << 1);\n\tif(mid < points)update(mid + 1, r, points, to, node << 1 | 1);\n\tpushup(node);\n}\n\nvoid update(int l,int r,int L,int R,int mod,int node)\n{\n\tif(maxinum[node] < mod)return;\n\tif(l == r)\n\t{\n\t\tsum[node] %= mod;\n\t\tmaxinum[node] = sum[node];\n\t\treturn;\n\t}\n\tint mid((l + r) >> 1);\n\tif(mid >= L)update(l, mid, L, R, mod, node << 1);\n\tif(mid < R)update(mid + 1, r, L, R, mod, node << 1 | 1);\n\tpushup(node);\n}\n\nll Sum(int l,int r,int L,int R,int node)\n{\n\tif(l >= L && r <= R)return sum[node];\n\tll _sum(0);\n\tint mid((l + r) >> 1);\n\tif(mid >= L)_sum += Sum(l, mid, L, R, node << 1);\n\tif(mid < R)_sum += Sum(mid + 1, r, L, R, node << 1 | 1);\n\treturn _sum;\n}\n\nint main()\n{\n\tint n(read()),m(read());\n\tbuild(1,n,1);\n\tfor(int i(1);i <= m;++i)\n\t{\n\t\tint cmd(read()),l(read()),r(read());\n\t\tif(cmd == 1)\n\t\t{\n\t\t\twrite(Sum(1,n,l,r,1));\n\t\t}\n\t\telse if(cmd == 2)\n\t\t{\n\t\t\tint mod(read());\n\t\t\tupdate(1,n,l,r,mod,1);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tupdate(1,n,l,r,1);\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n```\n\n\u4ece\u4e0d\u7528\u61d2\u6807\u8bb0\u6765\u770b\uff0c\u8fd9\u8fd8\u662f\u4e00\u9053\u5f88\u6c34\u7684\u7ebf\u6bb5\u6811\uff08\u9003\uff09",
        "postTime": 1522752409,
        "uid": 32576,
        "name": "ygsldr",
        "ccfLevel": 0,
        "title": "\u7ebf\u6bb5\u6811 CF438D \u3010The Child and Sequence\u3011"
    }
]