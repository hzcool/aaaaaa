[
    {
        "content": "#### \u9898\u610f\n\n\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u8fb9\u6709\u5bbd\u5ea6\uff0c\u70b9\u4e0a\u6709\u7cd6\uff0c\u7cd6\u5403\u5b8c\u4f1a\u4f7f\u4eba\u53d8\u80d6\uff08\u5373\u5bbd\u5ea6\u589e\u52a0\uff09\u3002\n\n\u4eba\u4ece $1$ \u8282\u70b9\u51fa\u53d1\uff0c\u4efb\u610f\u79fb\u52a8\uff0c\u4f46\u53ea\u80fd\u8d70\u8fc7\u5bbd\u5ea6\u4e0d\u8d85\u8fc7\u81ea\u8eab\u5bbd\u5ea6\u7684\u8fb9\uff0c\u8d70\u5230\u70b9\u4e0a\u53ef\u4ee5\u9009\u62e9\u5403\u6389\u8be5\u70b9\u4e0a\u7684\u7cd6\u679c\uff0c\u6bcf\u4e2a\u7cd6\u679c\u53ea\u80fd\u5403\u4e00\u6b21\u3002\n\n\u6c42\u51fa\u8981\u5403\u5b8c\u6240\u6709\u7cd6\u679c\uff0c\u4eba\u7684\u521d\u59cb\u5bbd\u5ea6\u7684\u6700\u5927\u503c\uff0c\u5982\u679c\u65e0\u8bba\u5982\u4f55\u90fd\u5403\u4e0d\u5b8c\uff0c\u8f93\u51fa $-1$\u3002\n\n#### \u9898\u89e3\n\n\u9996\u5148\u89e3\u51b3\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u4ece\u70b9 $a$ \u8d70\u5230\u70b9 $b$\uff0c\u4eba\u7684\u6700\u5927\u5bbd\u5ea6\u53ef\u4ee5\u662f\u591a\u5c11\uff0c\u5373\u627e\u5230\u4e00\u6761\u4ece $a$ \u5230 $b$ \u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u5b83\u6240\u7ecf\u8fc7\u7684\u8fb9\u7684\u5bbd\u5ea6\u6700\u5c0f\u503c\u6700\u5927\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\uff08P1967 \u8d27\u8f66\u8fd0\u8f93\uff09\uff0c\u6839\u636e\u9898\u89e3\u6211\u4eec\u77e5\u9053\uff0c\u7b54\u6848\u5e94\u8be5\u662f\u5efa\u7acb\u6700\u5927\u751f\u6210\u6811\u540e\uff0c$a, b$ \u4e24\u70b9\u4e4b\u95f4\u8fb9\u6743\u6700\u5c0f\u503c\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u7528 kruskal \u7b97\u6cd5\u6d41\u7a0b\u63a8\u51fa\u8fd9\u4e00\u7ed3\u8bba\uff1a\u8fd9\u4e2a\u7b97\u6cd5\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u7528\u5c3d\u53ef\u80fd\u5927\u7684\u8fb9\u8ba9 $a, b$ \u8054\u901a\u3002\n\n\u95ee\u9898\u73b0\u5728\u8f6c\u5316\u4e3a\u4e00\u4e2a\u6811\u4e0a\u95ee\u9898\uff0c\u770b\u4e0a\u53bb\u7b80\u5355\u4e86\u5f88\u591a\u3002\n\n\u5f53\u4eba\u5728\u4e0d\u505c\u7684\u5403\u7cd6\u65f6\uff0c\u6709\u4e9b\u8fb9\u5c31\u4f1a\u56e0\u4e3a\u4eba\u5bbd\u5ea6\u7684\u589e\u52a0\u800c\u65ad\u6389\uff0c\u8fd9\u5bf9\u4e8e\u4e00\u9897\u6811\u800c\u8a00\u662f\u6bc1\u706d\u6027\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u5b83\u5c31\u4e0d\u518d\u8054\u901a\u4e86\uff0c\u4f60\u4e5f\u4e0d\u53ef\u80fd\u5403\u5b8c\u6240\u6709\u7cd6\u4e86\uff0c\u9664\u975e\uff0c\u8fd9\u6761\u8fb9\u65ad\u5f00\u7684\u65f6\u5019\uff0c\u88ab\u5272\u4e0b\u6765\u7684\u90a3\u4e00\u68f5\u5b50\u6811\u65e9\u5c31\u88ab\u4f60\u5403\u5b8c\u4e86\u3002\n\n\u7b2c\u4e00\u6761\u65ad\u6389\u7684\u8fb9\u4e00\u5b9a\u662f\u5bbd\u5ea6\u6700\u5c0f\u7684\u90a3\u4e00\u6761\uff0c\u6211\u4eec\u8bbe\u5b83\u8fde\u63a5\u7684\u662f $u,v$ \u4e24\u70b9\uff0c\u5bbd\u5ea6\u4e3a $w$\u3002\u8bbe\u8fd9\u6761\u8fb9\u65ad\u6389\u4e4b\u540e\uff0c$u, v$\u6240\u5bf9\u5e94\u7684\u90a3\u68f5\u6811\uff08\u4e0b\u6587\u7b80\u79f0\u6811 $u$\uff0c\u6811 $v$\uff09\u7684\u7cd6\u679c\u503c\u603b\u548c\u5206\u522b\u4e3a $s_u, s_v$\u3002\n\n\u4e0d\u59a8\u8bbe\u4eba\u5148\u5403\u5b8c\u4e86\u6811 $u$ \u7684\u6240\u6709\u7cd6\u679c\uff0c\u7136\u540e\u6211\u4eec\u8bc1\u660e\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5728\u4e00\u5f00\u59cb\u5403\u5b8c\u6811 $u$ \u7684\u5168\u90e8\u8282\u70b9\u4e00\u5b9a\u4e0d\u52a3\u4e8e\u5176\u4ed6\u51b3\u7b56\u3002\u8003\u8651\u5b58\u5728\u4e00\u79cd\u89e3\u6cd5\uff0c\u4f7f\u5f97\u5403\u5b8c\u6811 $u$\uff0c\u5403\u6389\u4e86\u4e9b\u6811 $v$ \u7684\u7cd6\u679c\uff0c\u90a3\u4e48\u7531\u4e8e\u4e4b\u540e\u8fd8\u80fd\u4ece $(u, v, w)$ \u8fd4\u56de\uff0c\u5219\u5f53\u524d\u5bbd\u5ea6\u4e00\u5b9a\u4e0d\u8d85\u8fc7 $w$\uff0c\u4e5f\u5c31\u4e0d\u8d85\u8fc7\u6811\u4e0a\u7684\u4efb\u610f\u4e00\u6761\u8fb9\u7684\u5bbd\u5ea6\uff0c\u56e0\u6b64\u4ee5\u4ec0\u4e48\u987a\u5e8f\u5403\u6389\u8fd9\u4e9b\u7cd6\u679c\u90fd\u4e0d\u4f1a\u6709\u95ee\u9898\uff0c\u6362\u6210\u5148\u5403\u5b8c\u6811 $u$ \u5e76\u4e0d\u4f1a\u53d8\u52a3\u3002\n\n\u5403\u5b8c\u4e86\u6811 $u$\uff0c\u6211\u4eec\u60ca\u8bb6\u5730\u53d1\u73b0\u53ea\u8981\u5f97\u5230\u539f\u95ee\u9898\u5728\u6811 $v$ \u4e0a\u7684\u7b54\u6848 $x_v$\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f $\\min\\{x_v-s_u, w-s_u\\}$\u3002\u5148\u5403\u6811 $v$ \u4e5f\u662f\u540c\u7406\uff0c\u56e0\u6b64\u7b54\u6848\u662f $\\max\\{\\min\\{x_v-s_u, w-s_u\\}, \\min\\{x_u-s_v, w-s_v\\}\\}$\uff0c\u6700\u540e\u5982\u679c\u53d1\u73b0\u7b54\u6848\u975e\u6b63\uff0c\u5219\u8f93\u51fa $-1$\u3002\n\n\u8fd8\u5269\u4e24\u4e2a\u5c0f\u95ee\u9898\uff0c\u7b2c\u4e00\u662f\u521d\u59cb\u8282\u70b9\u662f $1$ \u800c\u4e0d\u662f $u$ \u6216 $v$\uff0c\u80fd\u4e0d\u80fd\u4ece $1$ \u8d70\u5230\u5b83\u4eec\u4e24\u4e2a\u5462\uff1f\u7531\u4e8e\u6700\u7ec8\u7b54\u6848\u4e0d\u53ef\u80fd\u5927\u4e8e $w$\uff08\u4e0d\u7136\u4e00\u5f00\u59cb\u6811\u5c31\u4e0d\u8054\u901a\u4e86\uff09\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u662f\u53ef\u4ee5\u5728\u6574\u68f5\u6811\u4e0a\u968f\u4fbf\u8d70\u7684\u3002\n\n\u7b2c\u4e8c\u662f\u5982\u4f55\u5728\u9012\u5f52\u6c42\u89e3\u7684\u65f6\u5019\u5feb\u901f\u5f97\u5230\u90a3\u4e00\u68f5\u5b50\u6811\u4e2d\u5bbd\u5ea6\u6700\u5c0f\u7684\u8fb9\uff1f\u5728\u5efa\u6700\u5927\u751f\u6210\u6811\u65f6\u5efa\u7acb kruskal \u91cd\u6784\u6811\uff0c\u90a3\u4e48\u4e00\u6761\u8fb9\u7684\u5de6\u53f3\u513f\u5b50\u5c31\u662f\u5b83\u5de6\u53f3\u4e24\u68f5\u5b50\u6811\u7684\u5bbd\u5ea6\u6700\u5c0f\u7684\u8fb9\u7684\u7f16\u53f7\uff0c\u8fd9\u662f\u7531\u4e8e kruskal \u7b97\u6cd5\u5148\u8fde\u63a5\u8fb9\u6743\u5927\u7684\u8fb9\uff0c\u90a3\u4e48\u91cd\u6784\u6811\u7684\u5b50\u6811\u7684\u6839\u4e00\u5b9a\u662f\u6700\u540e\u8fde\u63a5\u7684\u8fb9\uff0c\u5c31\u662f\u8fb9\u6743\u6700\u5c0f\u7684\u3002\n\n#### \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\ntypedef long long ll;\nconst int N = 200005;\nconst ll inf = 0x3f3f3f3f3f3f3f3f;\nint n, m, c[N];\nstruct Edge\n{\n    int x, y, w;\n} E[N];\nint fa[N];\ninline void init(int n)\n{\n    for (int i = 1; i <= n; ++i)\n        fa[i] = i;\n    return;\n}\nint find(int x)\n{\n    return fa[x] == x ? x : fa[x] = find(fa[x]);\n}\nll f[N], sum[N];//f,x\u5206\u522b\u5bf9\u5e94\u4e0a\u6587\u4e2d\u7684x,s\nint main(void)\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; ++i)\n        scanf(\"%d\", c + i);\n    for (int i = 1; i <= m; ++i)\n        scanf(\"%d%d%d\", &E[i].x, &E[i].y, &E[i].w);\n    std::sort(E + 1, E + 1 + m, [](Edge a, Edge b) -> bool\n              { return a.w > b.w; });\n    init(n + m);\n    int rt = 0;\n    for (int i = 1; i <= n;++i)\n        f[i] = inf, sum[i] = c[i];//\u5355\u4e2a\u70b9\u4f5c\u4e3a\u6811\u7684\u8fb9\u754c\u60c5\u51b5\u7684\u5904\u7406\n    for (int i = 1; i <= m; ++i) //\u5efa\u7acbkruskal\u91cd\u6784\u6811\n    {\n        int x = E[i].x, y = E[i].y;\n        if ((x = find(x)) != (y = find(y)))\n        {\n            int k = i + n;\n            fa[x] = fa[y] = k;\n            rt = k;//rt\u662f\u6700\u540e\u4e00\u6761\u88ab\u52a0\u5165\u751f\u6210\u6811\u7684\u8fb9\uff0c\u5373\u91cd\u6784\u6811\u7684\u6839\n            ll w = E[i].w; \n            f[k] = std::max(std::min(w - sum[x], f[y] - sum[x]),\n                            std::min(w - sum[y], f[x] - sum[y]));\n            sum[k] = sum[x] + sum[y];\n            //\u8fd9\u91cc\u662f\u9012\u5f52\u6c42\u89e3\u7684\u8fc7\u7a0b\u6539\u6210\u4e86\u9012\u63a8\n            //x,y\u5206\u522b\u662fk\u7684\u5de6\u53f3\u513f\u5b50\n        }\n    }\n    printf(\"%lld\\n\", f[rt] <= 0 ? -1ll : f[rt]);\n    return 0;\n}\n```",
        "postTime": 1633184924,
        "uid": 244204,
        "name": "namelessgugugu",
        "ccfLevel": 9,
        "title": "CF1578L \u9898\u89e3"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1578L)\n\n\n\n------------\n\n\u4e00\u773c\u91cd\u6784\u6811\u3002\n\n\u6211\u4eec\u6309\u8fb9\u6743\u603b\u5927\u5230\u5c0f\u5efa\u7acb `Kruskal\u91cd\u6784\u6811` \u3002\n\n\u90a3\u4e48\u4e24\u70b9\u7684 $lca$ \u5c31\u662f\u4e24\u8005\u7684\u6700\u5927\u74f6\u9888\u8def\u3002\n\n\u65e2\u7136\u6211\u4eec\u5403\u7cd6\uff0c\u90a3\u4e48\u91cd\u6784\u6811\u4e0a\u7684\u70b9\u4f1a\u8d8a\u6765\u8d8a\u5c11\u3002\n\n\u6bcf\u6b21\u67d0\u4e2a\u70b9\u6d88\u5931\uff0c\u5fc5\u987b\u5c06\u5176\u7684\u4e00\u68f5\u5b50\u6811\u5168\u5403\u5b8c\uff0c\u5e76\u4e14\u80fd\u8d70\u5230\u53e6\u4e00\u68f5\u5b50\u6811\u3002\n\n\u8003\u8651\u8d2a\u5fc3\uff0c\u6211\u4eec\u4e8c\u5206\u4e00\u4e2a\u521d\u59cb\u5bbd\u5ea6\uff0c\u5bf9\u4e8e\u5f53\u524d\u70b9\uff0c\u6211\u4eec\u8d2a\u5fc3\u7684\u5c06 $sum$ \u6bd4\u8f83\u5c0f\u7684\u70b9\u5403\u6389\uff0c\u518d\u8d70\u5411\u53e6\u4e00\u4e2a\u70b9\u3002\n\n\u90a3\u4e48\u5f53\u524d\u662f\u5426\u5408\u6cd5\u53ef\u4ee5\u68c0\u67e5\u51fa\u3002\n\n```cpp\nif(sum[ls]<sum[rs])to=ls;\nelse to=rs;\nif(sum[ls]==sum[rs])\n{\n\tif(val[ls]>val[rs])to=ls;\n\telse to=rs;\n}\nw+=sum[to];\nif(w>val[now])return 0;\nto=ls+rs-to;\nreturn check(to,w);\n```\n\n\u5728\u4e0a\u65b9 $val$ \u8868\u793a\u8fd9\u6761\u8fb9\u7684\u9650\u5236\u3002\n\n\n\n------------\n\u4f46\u662f\u9057\u61be\u7684\u662f\uff0c\u8fd9\u79cd\u601d\u8def\u662f\u9519\u8bef\u7684\u3002\n\n[$hack$](https://www.luogu.com.cn/discuss/523022)\n\n\u6211\u4eec\u8003\u8651\u9519\u8bef\u539f\u56e0\uff0c\u6211\u4eec\u7684\u8d2a\u5fc3\u53ea\u80fd\u4fdd\u8bc1\u5148\u53bb\u7684\u5b50\u6811 $sum$ \u6700\u5c0f\uff0c\u5374\u4e0d\u80fd\u4fdd\u8bc1\u53e6\u4e00\u9897\u5b50\u6811\u7684\u9650\u5236\u80fd\u6ee1\u8db3\u3002\n\n\u5148\u53d6\u4e86\u5c0f\u5b50\u6811\uff0c\u4e0d\u4e00\u5b9a\u80fd\u53bb\u5927\u5b50\u6811\uff0c\u4f46\u662f\u53ef\u80fd\u53d6\u5b8c\u5927\u5b50\u6811\uff0c\u8fd8\u80fd\u53bb\u5c0f\u5b50\u6811\u3002\n\n\u90a3\u6709\u6ca1\u6709\u4ec0\u4e48\u5168\u90e8\u60c5\u51b5\u90fd\u80fd\u8003\u8651\u5230\u7684\u89e3\u6cd5\u54ea\uff1f\n\n\u6211\u4eec\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\u5408\u5e76\u3002\n\n\u4e24\u79cd\u9009\u62e9\n\n1. \u5148\u53bb\u5de6\u513f\u5b50\n\n2. \u5148\u53bb\u53f3\u5b50\u6811\n\n$ans_i$ \u8868\u793a $i$ \u7684\u7b54\u6848\uff0c$sum_i$ \u8868\u793a $i$ \u4e3a\u6839\u8282\u70b9\uff0c\u6240\u6709\u7cd6\u679c\u7684 $c$ \u4e4b\u548c \u3002 $val_i$ \u8868\u793a\u7b2c $i$ \u70b9\u7684\u9650\u5236\u3002\n\n\u90a3\u4e48 \n\n```cpp\nans[cnt]=max(min(e[i].w,ans[v])-sum[u],min(e[i].w,ans[u])-sum[v]);\nsum[cnt]=sum[u]+sum[v];\n```\n\n\u7efc\u4e0a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\n\n\n------------\n\n$ \\texttt{CODE}$\n\n```cpp\n#include<bits/stdc++.h>\n#define N 5000005\n#define int long long\nusing namespace std;\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nint n,m,a[N],cnt,f[N],sum[N],ans[N];\nstruct edge \n{\n\tint u,v,w;\n}e[N*2];\nint find(int now)\n{\n\tif(f[now]==now)return now;\n\treturn f[now]=find(f[now]);\n}\nbool cmp(edge a,edge b){return a.w>b.w;}\nsigned main()\n{\n\tn=read(),m=read();cnt=n;\n\tfor(int i=1;i<=n;i++)a[i]=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\te[i].u=read();\n\t\te[i].v=read();\n\t\te[i].w=read();\n\t}\n\tsort(e+1,e+1+m,cmp);\n\tfor(int i=1;i<=2*n;i++)f[i]=i,sum[i]=a[i];\n\tmemset(ans,0x3f,sizeof(ans));\n\tfor(int i=1,u,v;i<=m;i++)\n\t{\n\t\tu=find(e[i].u);v=find(e[i].v);\n\t\tif(u!=v)\n\t\t{\n\t\t\t++cnt;\n\t\t\tf[u]=f[v]=cnt;\n\t\t\tans[cnt]=max(min(e[i].w,ans[v])-sum[u],min(e[i].w,ans[u])-sum[v]);\n\t\t\tsum[cnt]=sum[u]+sum[v];\n\t\t}\n\t}\n\tif(ans[cnt]<=0)cout<<-1<<\"\\n\";\n\telse cout<<ans[cnt]<<\"\\n\";\n\treturn 0;\n}\n```",
        "postTime": 1667451879,
        "uid": 331947,
        "name": "hegm",
        "ccfLevel": 0,
        "title": "CF1578L Labyrinth \u9898\u89e3"
    }
]