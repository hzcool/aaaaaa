[
    {
        "content": "### \u9898\u610f\n\n\u7ed9\u5b9a\u957f\u5ea6\u4e3a $n$ \u7684\u4e0d\u4e0b\u964d\u5e8f\u5217 $a$\uff0c\u53ef\u4ee5\u628a\u4e00\u4e9b\u5143\u7d20\u52a0\u4e00\uff08\u540c\u4e00\u4e2a\u5143\u7d20\u53ea\u80fd\u52a0\u4e00\u6b21\uff09\u3002\u8bf7\u4f60\u6c42\u51fa\u64cd\u4f5c\u4e4b\u540e\u5e8f\u5217\u4e2d\u6700\u957f\u7684\u516c\u5dee\u4e3a $1$ \u7684\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 $x$\u3002\n\n### \u5bfc\u5165\n\n\u4e3a\u4e86\u66f4\u65b9\u4fbf\u7684\u8868\u793a\u5c40\u9762\uff0c\u6211\u4eec\u4e0d\u59a8\u8bbe\u72b6\u6001\u4e3a $\\{i,0/1,v\\}$\uff0c\u8868\u793a\u524d\u7b2c $i$ \u4e2a\u5143\u7d20\u52a0\u6216\u4e0d\u52a0\u7684\u60c5\u51b5\u4e0b\u524d $i$ \u4e2a\u5143\u7d20\u7684\u6700\u957f\u7b54\u6848\u3002\n\n\u8f6c\u79fb\u5c31\u662f\u6bcf\u589e\u52a0\u4e00\u4e2a\u5143\u7d20\u5c31\u5224\u65ad\u5b83\u52a0\u6216\u4e0d\u52a0\uff0c\u518d\u5728\u4e24\u79cd\u60c5\u51b5\u4e0b\u6c42\u51fa\u5b83\u7684 $x$ \u5c31\u884c\u4e86\u3002\n\n\u7531\u4e8e\u76f8\u540c\u72b6\u6001\u53ea\u662f\u9009\u62e9\u7684\u65b9\u6848\u4e0d\u540c\uff0c\u72b6\u6001\u4e2d\u53ea\u6709\u7ed3\u5c3e\u7684\u72b6\u6001\u5bf9\u7b54\u6848\u6709\u7528\u3002\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u7559\u5bf9\u4e8e\u6bcf\u4e2a\u9636\u6bb5\uff0c\u53ea\u9700\u8981\u4fdd\u7559\u5355\u4e2a\u72b6\u6001\u5c31\u884c\u4e86\u3002\n\n### \u5206\u6790\u3001\u601d\u8def\n\n\u65e2\u7136\u53ef\u4ee5\u641c\u7d22\uff0c\u90a3\u4e48\u5c31\u6765\u8003\u8651\u4e00\u4e0b\u52a8\u6001\u89c4\u5212\u3002\n\n\u7531\u4e8e\u6bcf\u6b21\u53ea\u80fd\u5411\u524d\u8f6c\u79fb\uff0c\u56e0\u6b64\u72b6\u6001\u56fe\u662f\u5fc5\u7136\u62e5\u6709\u62d3\u6251\u5e8f\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u52a8\u6001\u89c4\u5212\u3002\n\n\u8bbe\u72b6\u6001\u4e3a $\\{i,j,v\\}$\uff0c\u8868\u793a\u524d $i$ \u4e2a\u5143\u7d20\u6700\u957f\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u5e8f\u5217\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f $j$\uff0c\u5e8f\u5217\u7684\u957f\u5ea6\u662f $v$\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u76f8\u540c\u7684 $\\{i,j\\}$ \u6765\u8bf4\uff0c\u53ea\u8981\u5b83\u4eec\u7684 $v$ \u66f4\u4f18\uff0c\u5219\u8f6c\u79fb\u51fa\u7684\u72b6\u6001\u5fc5\u7136\u662f\u6700\u4f18\u7684\uff1b\u5e76\u4e14\u5bf9\u4e8e\u6bcf\u6b21\u8f6c\u79fb\u6765\u8bf4 $v$ \u90fd\u662f\u8ddf\u7740 $\\{i,j\\}$ \u53d8\u5316\u7684\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u72b6\u6001\u5206\u7ec4\uff0c\u628a $\\{i,j\\}$ \u5206\u6210\u4e00\u7ec4\uff0c$v$ \u4f5c\u4e3a\u9644\u5e26\u5c5e\u6027\u3002\u63a5\u7740\u8f6c\u79fb\u5c31\u6c42\u51fa\u6765\u4e86\uff1a\n\n$$(1 \\le k < i)$$\n$$dp_{i,j} = \\max(dp_{i,j},dp_{k,j-1}+1)$$\n$$dp_{i,j+1} = \\max(dp_{i,j+1},dp_{k,j}+1)$$\n\n\u8f6c\u79fb\u8868\u793a\u5bf9\u4e8e\u5f53\u524d\u4f4d\u7f6e\u52a0\u548c\u4e0d\u52a0\u4e24\u79cd\u60c5\u51b5\u6765\u6c42\u51fa\u5b83\u6700\u957f\u7684 $x$\u3002\u5b9e\u9645\u4e0a\uff0c\u4e3a\u4e86\u7b54\u6848\u7684\u6b63\u786e\u6027\uff0c\u5bf9\u4e8e\u7b2c $i$ \u4e2a\u5143\u7d20\u6765\u8bf4\uff0c$j$ \u53ea\u80fd\u7b49\u4e8e $a_i$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\operatorname{O}(n^2)$\u3002\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$\\operatorname{O}(n \\times \\max(a_i))$\u3002\n\n#### \u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 55;\nint a[MAXN], dp[MAXN][105], T, n, ans;\nint main() {\n  cin >> T;\n  while (T--) {\n    cin >> n, ans = 1;\n    memset(dp, 0, sizeof(dp));\n    for (int i = 1; i <= n; i++) {\n      cin >> a[i];\n    }\n    dp[1][a[1]] = 1, dp[1][a[1] + 1] = 1; // \u521d\u59cb\u72b6\u6001\n    for (int i = 2; i <= n; i++) {\n      for (int j = 1; j < i; j++) {\n        dp[i][a[i]] = max(dp[i][a[i]], dp[j][a[i] - 1] + 1);\n        dp[i][a[i] + 1] = max(dp[i][a[i] + 1], dp[j][a[i]] + 1); //\u8f6c\u79fb\n      }\n      ans = max(ans, max(dp[i][a[i]], dp[i][a[i] + 1]));\n    }\n    cout << ans << '\\n';\n  }\n  return 0;\n}\n// \u8fdc\u53e4\u7801\u98ce\uff0c\u8bf7\u52ff\u5632\u8bbd\n```\n\n### \u62d3\u5c55\u3001\u63d0\u5347\n\n\u4ed4\u7ec6\u9605\u8bfb\u9898\u76ee\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e2a\u5143\u7d20\u53ea\u6709**\u52a0\u548c\u4e0d\u52a0**\u4e24\u79cd\u60c5\u51b5\uff0c\u56e0\u6b64 $j$ \u8fd9\u4e00\u7ef4\u5c31\u53ef\u4ee5\u4f18\u5316\u6210 $0/1$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u53d8\u3002\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$\\operatorname{O}(n)$\u3002\n\n#### \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 5005;\nint T, n, a[MAXN], dp[MAXN][2], ans;\nint main() {\n  ios::sync_with_stdio(0);\n  cin >> T;\n  while (T--) {\n    cin >> n, ans = 0;\n    for (int i = 1; i <= n; i++) {\n      cin >> a[i];\n    }\n    for (int i = 1, x; i <= n; i++) {\n      dp[i][0] = dp[i][1] = 1, x = a[i];\n      for (int j = 0; j <= 1; j++, x++) {    //\u5f53\u524d\u4f4d\u7f6e\u52a0\u6216\u4e0d\u52a0\n        for (int k = i - 1; k >= 1; k--) {\n          (a[k] == x - 1) && (dp[i][j] = max(dp[i][j], dp[k][0] + 1));  //\u8f6c\u79fb\n          (a[k] == x - 2) && (dp[i][j] = max(dp[i][j], dp[k][1] + 1));\n        }\n        ans = max(ans, dp[i][j]); //\u66f4\u65b0\u7b54\u6848\n      }\n    }\n    cout << ans << '\\n';\n  }\n  return 0;\n}\n```\n",
        "postTime": 1675999011,
        "uid": 713285,
        "name": "guanyf",
        "ccfLevel": 3,
        "title": "\u041f\u043e\u0434\u043a\u0440\u0443\u0442\u043a\u0430 I"
    }
]