[
    {
        "content": "## \u524d\u8a00\n\n\u7531\u4e8e\u8fd9\u662f\u4e00\u573a ICPC\uff0c\u6240\u4ee5 luogu \u8bc4\u6d4b\u673a\u6293\u53d6\u7ed3\u679c\u597d\u50cf\u51fa\u4e86\u4e00\u4e9b\u5c0f\u95ee\u9898\uff0c\u8fd9\u91cc\u63a8\u8350\u76f4\u63a5\u4e0a CF \u4ea4\u3002\n\n\u63a8\u8350\u5148\u53bb\u4e86\u89e3[\u540c\u6784](https://oi-wiki.org/graph/concept/)\u548c[\u6811 hash](https://oi-wiki.org/graph/tree-hash/)\n\n**update** \n\n20220220 \uff0c\u611f\u8c22 @[lyzqs](https://www.luogu.com.cn/user/19172) \u6307\u51fa\u7684\u4e00\u5904\u9519\u8bef\uff1a\u4ee3\u7801\u4e2d\u7b2c $57$ \u884c\u4e2d\u7684 ``` f[x]=1``` \u7801\u6210\u4e86 ```f[x]=0```\uff0c\u4f1a\u5bfc\u81f4\u54c8\u5e0c\u503c\u5168\u4e3a $0$\u3002\n\n## \u9898\u89e3\n\n\u867d\u7136 $n\\le 4000$\uff0c\u4f46\u662f\u66b4\u529b $O(n^2)$ \u8fd8\u662f\u4e0d\u80fd\u8fc7\u7684\uff08\u6709\u53ef\u80fd\u6211\u5e38\u6570\u5927\uff09~~\uff0c\u4e25\u91cd\u6000\u7591\u51fa\u9898\u4eba\u65f6\u6545\u610f\u5f15\u8bf1\u6211\u4eec\u3002~~\n\n\u89c2\u5bdf\u9898\u76ee\uff0c\u53d1\u73b0 \"\u5269\u4e0b\u6765\u7684\u51e0\u68f5\u6811\u540c\u6784\"\uff0c\u663e\u7136\u7684\uff0c\u4ed6\u4eec\u7684\u5927\u5c0f\u4e5f\u662f\u76f8\u540c\u7684\u3002\u7531\u4e8e\u540c\u6784\u7684\u6811\u81f3\u5c11\u9700\u8981\u4e24\u9897\uff0c\u5219\u5b83\u4eec\u7684\u5927\u5c0f\u6700\u591a\u4e3a $\\frac{n}{2}$\u2014\u2014\u4e0e\u6811\u7684\u91cd\u5fc3\u5b9a\u4e49\u76f8\u540c\u3002\n\n\u518d\u89c2\u5bdf\u4e00\u4e0b\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u66f4\u4e3a\u6e05\u6670\u7684\u6761\u4ef6\u2014\u2014\u8fd9\u6837\u7684\u8282\u70b9\u6709\u4e14\u4ec5\u6709\u4e00\u9897\u3002\u6211\u4eec\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\uff1a\n\n> \u5047\u8bbe\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u8282\u70b9\u6ee1\u8db3\u6761\u4ef6\uff0c\u5148\u8003\u8651\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\uff0c\u8bbe\u4ed6\u7684\u6bcf\u4e00\u9897\u5b50\u6811\u7684\u5927\u5c0f\u4e3a $siz$\u3002\u6b64\u65f6\u53e6\u5916\u4e00\u4e2a\u8282\u70b9\u53ea\u80fd\u5728\u5b50\u6811\u5185\uff0c\u56e0\u4e3a\u4ed6\u7684\u5b50\u6811\u540c\u6784\uff0c\u6240\u4ee5\u4ed6\u5fc5\u7136\u6709\u4e24\u9897\u4ee5\u4e0a\u7684\u5b50\u6811\u3002\u5f53\u65ad\u5f00\u7b2c\u4e8c\u4e2a\u8282\u70b9\u65f6\uff0c\u4e00\u5b9a\u6709\u4e00\u9897\u5b50\u6811\u4e0e\u7b2c\u4e00\u4e2a\u8282\u70b9\u8054\u901a\uff0c\u6b64\u65f6\u4ed6\u7684\u5927\u5c0f\u5927\u4e8e $siz$\u3002\u4ed6\u4e00\u5b9a\u6709\u53e6\u5916\u4e00\u9897\u5b50\u6811\u6ee1\u8db3\u4ed6\u4e0d\u4e0e\u7b2c\u4e00\u4e2a\u8282\u70b9\u8054\u901a\uff0c\u6b64\u65f6\u4ed6\u6700\u5927\u7684\u5927\u5c0f\u4e3a\u8fd9\u4e2a\u5b50\u6811\u7684\u5927\u5c0f\uff08\u8fd8\u4e0d\u5230\uff09\uff0c\u6b64\u65f6\u5927\u5c0f\u5c0f\u4e8e\u7b49\u4e8e $siz$\u3002\u56e0\u4e3a\u4e24\u9897\u5b50\u6811\u5927\u5c0f\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5\u4e0e\u540c\u6784\u7684\u6761\u4ef6\u4e0d\u7b26\uff0c\u4e0d\u6210\u7acb\u3002\n\n\u7136\u540e\uff0c\u4e0a\u666e\u901a\u7684\u6811\u540c\u6784 hash \u6a21\u677f\u5373\u53ef\uff08\u8fd9\u91cc\u7528\u7684\u662f [OI wiki]((https://oi-wiki.org/graph/tree-hash/)) \u4e0a\u7684\u7b2c\u4e09\u79cd\u65b9\u6cd5\uff09\u3002\n\n\uff08pass:\u5f0f\u5b50\u4e0a\u7684 $prime(size_{son(now,i)}$ \u4e2d\u7684\u51fd\u6570\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\u53ef\u4ee5\u6362\u6210\u5176\u4ed6\u6709\u5173\u4e8e $son(now,i)$ \u7684\u51fd\u6570\uff0c\u8fd9\u6837\u5b50\u66f4\u4e0d\u5bb9\u6613\u88ab\u5361\u3002\uff09\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define pb push_back\nusing namespace std;\nconst int N=1e6+1e3;\nint n;\nint root;\nvector<int>g[N];\nint pri[N],v[N],tot;\nvoid Prepare(int n)//\u6c42\u7d20\u6570\n{\n    for(int i=2;i<=n;i++)\n    {\n        if(!v[i])pri[++tot]=i;\n        for(int j=1;j<=tot&&i*pri[j]<=n;j++)\n        {\n            v[i*pri[j]]=1;\n            if(i%pri[j]==0)break;\n        }\n    }\n}\nint sz;\nint dfs_dp(int x,int fa)//\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\n{\n    int sum=-1,siz=1;\n    bool pd=1;\n    for(auto y:g[x])\n    {\n        if(y==fa)continue;\n        int tmp=dfs_dp(y,x);\n        if(sum==-1)sum=tmp;\n        else if(sum!=tmp)pd=0;\n        siz+=tmp;\n    }\n    if(pd&&sum!=-1&&(n-siz==sum||(n-siz==0&&g[x].size()>1)))root=x,sz=sum;\n    //\u81f3\u5c11\u6709\u4e24\u9897\u4ee5\u4e0a\u5b50\u6811\u5927\u5c0f\u76f8\u7b49\n    return siz;\n}\nvector<int>rt;\nint dfs_root(int x,int fa)//\u6c42\u91cd\u5fc3\n{\n    int siz=1,mx=0;\n    for(auto y:g[x])\n    {\n        if(y==fa)continue;\n        int tmp=dfs_root(y,x);\n        siz+=tmp;mx=max(mx,tmp);\n    }\n    mx=max(mx,sz-siz);\n    if(mx<=sz/2)rt.push_back(x);//\u6bcf\u9897\u5b50\u6811\u5927\u5c0f\u76f8\u7b49\n    return siz;\n}\nint f[N];\nint dfs_hash(int x,int fa)\n{\n    int siz=1;\n    f[x]=0;\n    for(auto y:g[x])\n    {\n        if(y==fa||y==root)continue;\n        int tmp=dfs_hash(y,x);\n        f[x]+=f[y]*pri[tmp];\n        siz+=tmp;\n    }\n    return siz;\n}\nsigned main()\n{\n    Prepare(1e6+1e3);\n    scanf(\"%lld\",&n);\n    for(int i=1,x,y;i<n;i++)\n    {\n        scanf(\"%lld%lld\",&x,&y);\n        g[x].pb(y);g[y].pb(x);\n    }\n    dfs_dp(1,0);\n    if(root==0)return puts(\"-1\"),0;\n    bool pd=0;\n    int tmp=0;\n    for(auto y:g[root])\n    {\n        rt.clear();\n        dfs_root(y,root);\n        //\u5bf9\u4e8e\u7b2c\u4e00\u9897\u5b50\u6811\uff0c\u4efb\u53d6\u4e00\u4e2a\u91cd\u5fc3\n        //\u5bf9\u4e8e\u5176\u4ed6\u5b50\u6811\uff0c\u679a\u4e3e\u6240\u6709\u91cd\u5fc3\n        //\u5982\u679c\u662f\u540c\u6784\u7684\uff0c\u4e24\u9897\u5b50\u6811\u5fc5\u7136\u4f1a\u627e\u5230\u4e00\u4e2a\u76f8\u7b49\u91cd\u5fc3\n        if(!pd)dfs_hash(rt[0],0),tmp=f[rt[0]],pd=1;\n        else \n        {\n            bool pd1=0;\n            for(auto z:rt)if(dfs_hash(z,0)&&(f[z]==tmp)){pd1=1;break;}\n            if(!pd1)return puts(\"-1\");\n        }\n    }\n    printf(\"%lld\\n\",g[root].size());\n    return 0;\n}\n```\n\n## \u540e\u8bdd\n\nCF \u8bc4\u5206 2400\uff0c\u611f\u89c9\u8bc4\u4e2a\u84dd\u5dee\u4e0d\u591a\u3002",
        "postTime": 1644578943,
        "uid": 223891,
        "name": "max67",
        "ccfLevel": 0,
        "title": "CF1252F Regular Forestation \u9898\u89e3"
    }
]