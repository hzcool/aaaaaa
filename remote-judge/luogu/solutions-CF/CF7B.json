[
    {
        "content": "### **\u4e00\u3001\u539f\u9898**\n\n[**\u539f\u9898\u4f20\u9001\u95e8**](https://www.luogu.com.cn/problem/CF7B)\n\n\u4e3b\u8981\u8f93\u5165\u6709\u4e09\u79cd\u64cd\u4f5c\uff0c\u5982\u4e0b\uff1a\n\n$\\texttt{alloc}$ $n$\u2014\u2014 \u5728\u5185\u5b58\u4e2d\u63d2\u5165 $n$ \u5b57\u8282\u7684\u7a7a\u95f4\u4e14\u4f7f\u9996\u5730\u5740\u6700\u5c0f\uff0c\u8fd4\u56de\u7f16\u53f7 $x$ \u6216 $\\texttt{NULL}$\u3002\n\n$\\texttt{erase}$ $x$\u2014\u2014 \u6e05\u7a7a\u7f16\u53f7\u4e3a $x$ \u7684\u5185\u5b58\u5757\u3002\n\n$\\texttt{defragment}$\u2014\u2014 \u788e\u7247\u6574\u7406\uff0c\u5c06\u6240\u6709\u5185\u5b58\u5757\u5168\u90e8\u5411\u5185\u5b58\u7684\u8d77\u70b9\u9760\u62e2\u5e76\u4e14\u4e0d\u6539\u53d8\u5b83\u4eec\u7684\u987a\u5e8f\u3002\n\n### \u4e8c\u3001\u5206\u5757\u89e3\u6790\n\n\u5148\u653e\u4e00\u6bb5\u4e3b\u8981\u53d8\u91cf\u7684\u5b9a\u4e49\u3002\n\n```cpp\nstruct node{ int s,l,id; }p[N];\nint t,m,cnt,mark[N];\n```\n\u5176\u4e2d\uff0c$t$\u3001$m$ \u5982\u9898\u610f\u4ecb\u7ecd\uff0c$cnt$ \u8bb0\u5f55\u5f53\u524d\u6700\u5927\u7f16\u53f7\u3002\n\n\u7ed3\u6784\u4f53 $p$ \u6570\u7ec4\u50a8\u5b58\u6bcf\u4e00\u4e2a\u5185\u5b58\u5757\u7684\u4fe1\u606f\uff0c\u8868\u793a\u7f16\u53f7\u4e3a $p_{i}.id$ \u7684\u5185\u5b58\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e\u662f $p_{i}.s$\uff08$s$ \u5373 $start$\uff09\uff0c\u957f\u5ea6\u662f $p_{i}.l$\uff08$l$ \u5373 $length$\uff09\u3002\n\n$mark$ \u6570\u7ec4\u6807\u8bb0\u7f16\u53f7\u4e3a $i$ \u7684\u5185\u5b58\u5757\u662f\u5426\u5b58\u5728\u3002\n\n\u4e3b\u8981\u601d\u8def\u662f\u6bcf\u6b21\u63d2\u5165\u4e00\u5757\u5185\u5b58\u5757\u5c31\u5728 $p$ \u6570\u7ec4\u4e2d\u65b0\u5f00\u8f9f\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u6807\u8bb0\u4e00\u4e0b\uff08\u5220\u9664\u548c\u91cd\u65b0\u6392\u5e8f\u601d\u8def\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\uff0c\u4e0b\u9762\u4f1a\u8bb2\u5230\uff09\u3002\n\n#### 1.$\\texttt{alloc}$\n\n\u5982\u679c $n$ \u5927\u4e8e\u603b\u957f $m$\uff0c\u90a3\u4e48\u663e\u7136\u662f\u4e0d\u80fd\u5b9e\u73b0\u7684\u3002\n\n\u63a5\u4e0b\u6765\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf $le$\uff0c\u8868\u793a\u5f53\u524d\u6b63\u5728\u5c1d\u8bd5\u4f4d\u7f6e $le$\u3002\u6240\u8c13\u7684\u201c\u8fde\u7eed\u7a7a\u95f2\u7a7a\u95f4\u201d\u5c31\u662f\u6307**\u5185\u5b58\u6761\u4e0e\u5185\u5b58\u6761\u6216\u8fb9\u754c\u4e4b\u95f4\u7684\u7a7a\u95f4**\u3002\n\n\u56e0\u6b64\uff0c\u76f4\u63a5 $for$ \u5faa\u73af\u4e00\u904d\uff0c$le$ \u5f00\u5934\u7684\u6700\u5927\u7a7a\u95f4\u4e3a **\u4e0b\u4e00\u4e2a\u5185\u5b58\u6761\u7684\u9996\u5730\u5740 $-le$**\u3002\n\n\u5982\u679c\u53ef\u4ee5\u653e\u5c31\u653e\uff0c\u7136\u540e\u6807\u8bb0\u4e00\u4e0b\u3002\u5982\u679c\u4e0d\u884c\u7684\u8bdd\uff0c\u5c31\u66f4\u65b0\u4e00\u4e0b $le$\u3002\n\n\u4e0b\u9762\u662f\u53ef\u4ee5\u653e\u7684\u60c5\u51b5\u3002\n\n```cpp\nif(p[i].s-le>=n)\n{\n\tp[++cnt]={le,n,cnt};\n\tprintf(\"%d\\n\",cnt);\n\tmark[cnt]=1;\n\treturn;\n}\n```\n\u8981\u6ce8\u610f\u51e0\u4e2a\u7279\u6b8a\u60c5\u51b5\uff1a\n\n- \u5982\u679c\u5f53\u524d\u6b63\u5728\u5c1d\u8bd5\u7684\u5185\u5b58\u5757\u4e0d\u5b58\u5728\uff0c\u5c31\u8df3\u8fc7\u3002\n\n- \u5982\u679c\u5faa\u73af\u7ed3\u675f\u540e\u53d1\u73b0\u538b\u6839\u5c31\u6ca1\u6709\u5185\u5b58\u5757\uff0c\u8981\u5728\u5faa\u73af\u5916\u7279\u5224\u3002\n\n\u5b8c\u6574\u7684 $\\texttt{alloc}$ \u4ee3\u7801\u5982\u4e0b\u3002\n\n```cpp\nvoid alloc()\n{\n\tint n,le=1,flag=0;//flag\u6807\u8bb0\u6709\u6ca1\u6709\u5185\u5b58\u6761\n\tscanf(\"%d\",&n);\n\tif(n>m)  { printf(\"NULL\\n\"); return; }\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\tif(!mark[p[i].id])  continue;\n\t\tflag=1;\n\t\tif(p[i].s-le>=n)\n\t\t{\n\t\t\tp[++cnt]={le,n,cnt};\n\t\t\tprintf(\"%d\\n\",cnt);\n\t\t\tmark[cnt]=1;\n\t\t\tsort(p+1,p+1+cnt,cmp);\n\t\t\treturn;\n\t\t}\n\t\telse  le=p[i].s+p[i].l;//\u66f4\u65b0le\n\t}\n\tif(!flag || m-le+1>=n)//\u5982\u679c\u6574\u6761\u5185\u5b58\u90fd\u662f\u7a7a\u7684\u6216\u8005\u6700\u540e\u4e00\u4e2a\u5185\u5b58\u5757\u548c\u672b\u8fb9\u754c\u4e4b\u95f4\u7684\u7a7a\u95f4\u53ef\u4ee5\u653e\n\t{\n\t\tp[++cnt]={le,n,cnt};\n\t\tprintf(\"%d\\n\",cnt);\n\t\tmark[cnt]=1;\n\t\tsort(p+1,p+1+cnt,cmp);\n\t\treturn;\n\t}\n\telse  printf(\"NULL\\n\");\nreturn;\n}\n```\n\u5927\u5bb6\u53ef\u80fd\u6709\u4e00\u70b9\u7591\u60d1\uff0c\u4e3a\u4ec0\u4e48\u8981\u989d\u5916\u8bb0\u5f55 $id$ \u800c\u4e0d\u662f\u76f4\u63a5\u7528 $p_{id}$ \u8bb0\u5f55\u67e5\u627e\u5462\uff1f\u56e0\u4e3a\u5728\u4e00\u4e9b\u7279\u6b8a\u6570\u636e\u4e0b\uff0c\u7f16\u53f7\u5c0f\u7684\u4e0d\u4e00\u5b9a\u5728\u7f16\u53f7\u5927\u7684\u524d\u9762\uff0c\u8fd9\u6837\u5faa\u73af\u7684\u65f6\u5019\u4f1a\u6709\u4e00\u4e9b\u95ee\u9898\uff0c\u56e0\u6b64\u9700\u8981 $sort$ \u4e00\u904d\uff0c\u6309\u9996\u5730\u5740\u7684\u4f18\u5148\u7ea7\u6392\u5e8f\u3002\n\n```cpp\nbool cmp(node x,node y)  { return x.s<y.s; }\n```\n\n#### 2.$\\texttt{erase}$\n\n\u8fd9\u5757\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u770b\u4e00\u770b\u8981\u6e05\u7a7a\u7684 $x$ \u5b58\u4e0d\u5b58\u5728\uff0c\u5b58\u5728**\u4e14\u6ca1\u6709\u8d8a\u754c**\u7684\u8bdd\u5c31\u628a $mark_{x}$ \u6807\u8bb0\u4e3a $false$\u3002\n\n```cpp\nvoid erase()\n{\n\tint x;\n\tscanf(\"%d\",&x);\n\tif(x<=0 || x>100)  { printf(\"ILLEGAL_ERASE_ARGUMENT\\n\"); return; }\n\tif(!mark[x])  { printf(\"ILLEGAL_ERASE_ARGUMENT\\n\"); return; }\n\telse  mark[x]=0;\nreturn;\n}\n```\n\u8fd9\u91cc\u4e5f\u6709\u4e00\u4e2a\u6ce8\u610f\u70b9\uff1a\n\n- \u5c0f\u5fc3\u8d8a\u754c\n\n\u6709\u4e9b\u6076\u5fc3\u7684\u6570\u636e\u4f1a\u5b58\u5728 $x\\le 0$ \u6216\u8005 $x\\ge cnt$ \u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u653e\u5230 $mark$ \u91cc\u5c31\u4f1a $RE$\uff08~~\u5c31\u50cf\u6211~~\uff09\u3002\n\n#### 3.$\\texttt{defragment}$\n\n\u8fd9\u4e2a\u64cd\u4f5c\u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u628a\u6bcf\u4e2a\u5185\u5b58\u5757\u53d6\u51fa\u6765\u6539\u4e00\u4e0b\u9996\u5730\u5740\u5c31\u53ef\u4ee5\u5566\u3002\n\n```cpp\nvoid defragment()\n{\n\tint le=1;//le\u8fd9\u91cc\u8bb0\u5f55\u6700\u5c0f\u7684\u7a7a\u95f2\u5730\u5740\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\tif(!mark[p[i].id])  continue;\n\t\tp[i]={le,p[i].l,p[i].id};\n\t\tle+=p[i].l;//\u66f4\u65b0le\n\t}\nreturn;\n}\n```\n#### 4.\u4e3b\u51fd\u6570\n\n\u6ca1\u4ec0\u4e48\u53ef\u8bf4\u7684\uff0c\u76f4\u63a5\u8c03\u7528\u5c31\u597d\u4e86\u3002\n\n```cpp\nint main()\n{\n\tscanf(\"%d %d\",&t,&m);\n\tfor(int i=1;i<=t;i++)\n\t{\n\t\tscanf(\"%s\",s+1);//s\u662f\u5b57\u7b26\u6570\u7ec4\n\t\tif(s[1]=='a')  alloc();\n\t\telse if(s[1]=='e')  erase();\n\t\telse if(s[1]=='d')  defragment();//\u6bcf\u6761\u547d\u4ee4\u53ea\u9700\u5224\u65ad\u9996\u5b57\u6bcd\u5c31\u884c\u4e86\n\t}\nreturn 0;\n}\n```\n\n### \u4e09\u3001\u5b8c\u6574\u4ee3\u7801\n\n\u5176\u5b9e\u770b\u524d\u9762\u7684\u5e94\u8be5\u5df2\u7ecf\u591f\u4e86\u5427......\n\n\u5b8c\u6574\u4ee3\u7801\u770b[\u8fd9\u91cc](https://www.luogu.com.cn/paste/7eyadfge)",
        "postTime": 1630417500,
        "uid": 242473,
        "name": "Elegy_of_Green_Kite",
        "ccfLevel": 0,
        "title": "CF7B Memory Manager"
    },
    {
        "content": "### \u5206\u6790\n\u4e00\u9053\u5927\u6a21\u62df\u3002\u6bcf\u6b21\u64cd\u4f5c\u5206\u522b\u5904\u7406\u5373\u53ef\u3002\n#### alloc \u5b9e\u73b0\n\u4ece $1$ \u5411 $m$ \u627e\uff0c\u5982\u679c\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cb\u6709\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e $n$ \u7684\u7a7a\u95f4\u6ca1\u6709\u88ab\u5229\u7528\u8fc7\uff0c\u5c31\u5c06\u8fd9\u91cc\u7684\u6bcf\u4e00\u4e2a\u70b9\u6807\u8bb0\u4e3a\u7528\u8fc7\uff0c\u5982\u679c\u5faa\u73af\u5b8c\u8fd8\u6ca1\u6709\u80fd\u653e\u7684\u7a7a\u95f4\uff0c\u5c31\u8bf4\u660e\u653e\u4e0d\u4e0b\u3002\n```cpp\nif(s==\"alloc\")\n{\n    scanf(\"%d\",&x);\n    int c=0,pos=0;\n    for(i=1;i<=m;i++)\n    {\n        j=i;c=0; //j\u8bb0\u5f55i\u4e4b\u540e\u5faa\u73af\u5230\u70b9\u7684\u4f4d\u7f6e\uff0cc\u8bb0\u5f55\u76ee\u524d\u7a7a\u95f4\u7684\u5927\u5c0f\n        while(!vis[j]&&j<=m) j++,c++; //\u8fde\u7eed\u7684\u7a7a\u95f4\u6ca1\u88ab\u7528\u8fc7\n        if(c>=x) //\u653e\u5f97\u4e0b\n        {\n            pos=i;\n            break;\n        }\n    }\n    if(c>=x) //\u80fd\u653e\u4e0b\n    {\n        for(j=pos;j<=pos+x-1;j++) //\u5c06\u65b0\u5f00\u7684\u5185\u5b58\u4e2d\u6bcf\u4e2a\u70b9\u90fd\u6807\u8bb0\u6210\u7528\u8fc7\n        {\n            vis[j]=true;\n        }\n        printf(\"%d\\n\",++cnt); //cnt\u8bb0\u5f55\u5f53\u524d\u653e\u5165\u5185\u5b58\u7684\u7f16\u53f7\n        flag[cnt]=true;\n        a.push_back(make_pair(pos,pos+x-1)); //\u8bb0\u5f55\u8fd9\u6bb5\u5185\u5b58\u7684\u5934\u548c\u5c3e\n        continue;\n    }\n    else //\u653e\u4e0d\u4e0b\n    {\n        printf(\"NULL\\n\"); \n        continue;\n    }\n}\n```\n#### erase \u5b9e\u73b0\n\u5982\u679c\u8981\u5220\u9664\u7684\u5185\u5b58\u7f16\u53f7\u5927\u4e8e\u6b64\u65f6\u6700\u5927\u7684\u7f16\u53f7\u6216\u8005\u4e4b\u524d\u91ca\u653e\u8fc7\uff0c\u5c31\u8bf4\u660e\u4e0d\u80fd\u91ca\u653e\uff0c\u5426\u5219\u5c06\u8fd9\u6bb5\u5185\u5b58\u4e2d\u7684\u6bcf\u4e00\u4e2a\u70b9\u6807\u8bb0\u6210\u6ca1\u7528\u8fc7\u3002\n```cpp\nif(s==\"erase\")\n{\n    scanf(\"%d\",&x);\n    if(x<0||x>inf) //\u7279\u5224\u7f16\u53f7\u8fc7\u5c0f\u6216\u8fc7\u5927\uff0c\u9632\u6b62\u6ea2\u51fa\n    {\n        printf(\"ILLEGAL_ERASE_ARGUMENT\\n\");\n        continue;\n    }\n    if(!flag[x]) //\u6b64\u65f6\u6ca1\u6709\u5360\u7528\u7f16\u53f7x\u7684\u5185\u5b58\n    {\n        printf(\"ILLEGAL_ERASE_ARGUMENT\\n\");\n        continue;\n    }\n    int s=a[x].first,t=a[x].second;\n    flag[x]=false; //\u6807\u8bb0\u4e3a\u76ee\u524d\u6ca1\u6709\u7f16\u53f7\u4e3ax\u7684\u5185\u5b58\n    a[x]=make_pair(-1,-2); //\u6807\u8bb0\u5934\u5c3e\n    for(i=s;i<=t;i++) //\u6807\u8bb0\u533a\u95f4\u5185\u7684\u6bcf\u4e00\u4e2a\u70b9\u4e3a\u672a\u4f7f\u7528\n    {\n        vis[i]=false;\n    }\n    continue;\n}\n```\n#### defragment \u5b9e\u73b0\n\u6309\u7167\u5f53\u524d\u6bcf\u4e2a\u5185\u5b58\u5757\u7684\u4f4d\u7f6e\u4ece $1$ \u5f00\u59cb\uff0c\u6bcf\u4e2a\u5185\u5b58\u5757\u5927\u5c0f\u4e0d\u53d8\uff0c\u91cd\u65b0\u4f9d\u6b21\u5206\u914d\u7a7a\u95f4\u5373\u53ef\u3002\n```cpp\nif(s==\"defragment\")\n{\n    mem(vis,0);\n    j=1;\n    vector<int>tmp; //\u8bb0\u5f55\u6309\u5f53\u524d\u5185\u5b58\u5757\u987a\u5e8f\u6392\u7684\u5185\u5b58\u5757\u7f16\u53f7\n    tmp.clear();\n    for(i=1;i<=m;i++)\n    {\n        for(j=1;j<a.size();j++)\n        {\n            if(!flag[j]) continue;\n            if(a[j].first<=i&&a[j].second>=i&&(tmp.empty()||tmp.back()!=j)) //i\u5c5e\u4e8ej\u53f7\u5185\u5b58\n            {\n                tmp.push_back(j);\n                break;\n            }\n        }\n    }\n    j=1;\n    for(int ii=0;ii<tmp.size();ii++)\n    {\n        i=tmp[ii];\n        if(!flag[i]) continue;\n        int s=j;\n        for(k=a[i].first;k<=a[i].second;k++)\n        {\n            vis[j++]=true; //\u6807\u8bb0\u65b0\u533a\u95f4\u5185\u7684\u6bcf\u4e2a\u70b9\n        }\n        a[i].first=s;a[i].second=j-1; //\u91cd\u65b0\u8bb0\u5f55\u5de6\u53f3\u7aef\u70b9\n    }\n}\n```\n### \u5b8c\u6574\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n#define mem(a,b) memset(a,b,sizeof(a));\n#define elif else if\n#define puchar putchar\nusing namespace std;\ntypedef pair<int,int> Pair;\nconst int inf=2139062143;\nconst int MAXN=107;\nint n,m,x,tail,cnt;\nstring s;\nvector<Pair>a;\nbool vis[MAXN];\nbool flag[MAXN];\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    a.push_back(make_pair(0,0));\n    while(n--)\n    {\n        int i,j,k;\n        cin>>s;\n        if(s==\"alloc\")\n        {\n            scanf(\"%d\",&x);\n            int c=0,pos=0;\n            for(i=1;i<=m;i++)\n            {\n                j=i;c=0;\n                while(!vis[j]&&j<=m) j++,c++;\n                if(c>=x)\n                {\n                    pos=i;\n                    break;\n                }\n            }\n            if(c>=x)\n            {\n                for(j=pos;j<=pos+x-1;j++)\n                {\n                    vis[j]=true;\n                }\n                printf(\"%d\\n\",++cnt);\n                flag[cnt]=true;\n                a.push_back(make_pair(pos,pos+x-1));\n                continue;\n            }\n            else\n            {\n                printf(\"NULL\\n\");\n                continue;\n            }\n        }\n        if(s==\"erase\")\n        {\n            scanf(\"%d\",&x);\n            if(x<0||x>inf)\n            {\n                printf(\"ILLEGAL_ERASE_ARGUMENT\\n\");\n                continue;\n            }\n            if(!flag[x])\n            {\n                printf(\"ILLEGAL_ERASE_ARGUMENT\\n\");\n                continue;\n            }\n            int s=a[x].first,t=a[x].second;\n            // cout<<a[x].first<<\" \"<<a[x].second<<endl;\n            flag[x]=false;\n            a[x]=make_pair(-1,-2);\n            for(i=s;i<=t;i++)\n            {\n                vis[i]=false;\n            }\n            continue;\n        }\n        if(s==\"defragment\")\n        {\n            mem(vis,0);\n            j=1;\n            int sum=0;\n            vector<int>tmp;\n            tmp.clear();\n            for(i=1;i<=m;i++)\n            {\n                for(j=1;j<a.size();j++)\n                {\n                    if(!flag[j]) continue;\n                    if(a[j].first<=i&&a[j].second>=i&&(tmp.empty()||tmp.back()!=j))\n                    {\n                        tmp.push_back(j);\n                        break;\n                    }\n                }\n            }\n            j=1;\n            for(int ii=0;ii<tmp.size();ii++)\n            {\n                i=tmp[ii];\n                if(!flag[i]) continue;\n                int s=j;\n                for(k=a[i].first;k<=a[i].second;k++)\n                {\n                    vis[j++]=true;\n                }\n                a[i].first=s;a[i].second=j-1;\n            }\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1624431740,
        "uid": 225991,
        "name": "_lxy_",
        "ccfLevel": 6,
        "title": "CF7B Memory Manager \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u7684\u4e3b\u8981\u601d\u8def\u5c31\u662f**\u6a21\u62df**\u3002\n\n\u53d1\u73b0 $T,n\\le 100$ \uff0c\u4e8e\u662f\u8003\u8651 $O(Tn^2)$ \u65f6\u95f4\u590d\u6742\u5ea6\u7684**\u6734\u7d20~~\u66b4\u529b~~\u7b97\u6cd5**\u3002\n\n\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f18\u5316\u6210 $O(Tn)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n# 1.$\\texttt{alloc}$\u64cd\u4f5c\u5b9e\u73b0\n\n\u6211\u4eec\u5148\u63a2\u7a76 $\\texttt{alloc}$ \u64cd\u4f5c\uff1a\n\n> \u5728\u5185\u5b58\u91cc\u5206\u914d\u957f\u5ea6\u4e3a $x$ \u7684\u7a7a\u95f4\u3002\n\n\u8003\u8651\u8fd9\u662f\u7ebf\u6027\u7684\uff0c\u4e8e\u662f\u679a\u4e3e\u6bcf\u4e2a $i$ \uff0c\u5224\u65ad $i$ \u81f3 $i+x-1$ \u662f\u5426\u5168\u4e3a\u7a7a\u3002\u5982\u679c\u5168\u4e3a\u7a7a\u76f4\u63a5\u5206\u914d\u7a7a\u95f4\u5f97\u4e86\uff0c\u76f4\u63a5\u9000\u51fa\u3002\n\n\u7b2c\u4e00\u5c42\u4e3a $O(n)$ \uff0c\u7b2c\u4e8c\u5c42\u4e3a $O(x)$ \u3002\n\n\u8fd9\u4e2a\u66b4\u529b\u7b97\u6cd5\u771f\u7684\u80fd\u6c34\u8fc7\u6570\u636e\uff0c\u4e0d\u8d85\u8fc7 $O(n^2)$ \u3002\n\n```cpp\nint l[101],r[101],n,x,t,cnt;\nbool a[101],al[101];\nbool canput(int l,int r)\n{\n\tFu(i,l,r)if(a[i])return 0;\n\treturn 1;\n}\nvoid alloc()\n{\n\tcin>>x;\n\tFu(i,1,n-x+1)\n\t{\n\t\tif(canput(i,i+x-1))\n\t\t{\n\t\t\tprintf(\"%d\\n\",++cnt);\n\t\t\tl[cnt]=i,r[cnt]=i+x-1;\n\t\t\tFu(j,l[cnt],r[cnt])a[j]=1;\n\t\t\tal[cnt]=1;\n\t\t\treturn;\n\t\t}\n\t}\n\tprintf(\"NULL\\n\");\n}\n```\n\n\u5b9e\u9645\u4e0a\u53ef\u4ee5\u901a\u8fc7\u524d\u7f00\u548c\u4f18\u5316\u6210 $O(n)$ \u3002\n\n\u5c31\u662f\u9996\u5148\u9884\u5904\u7406\u524d\u7f00\u548c\uff0c\u63a5\u7740\u518d\u5faa\u73af\u4e00\u904d\uff0c\u5224\u65ad\u8fd9\u6bb5\u533a\u95f4\u7684\u4f7f\u7528\u60c5\u51b5\u548c\u4e3a\u591a\u5c11\u3002\n\n\u5927\u81f4\u601d\u60f3\u770b\u4ee3\u7801\u3002\n\n```cpp\nvoid alloc()\n{\n\tcin>>x;\n\tint s[101]={};\n\tFu(i,1,n)s[i]=s[i-1]+a[i];\n\tFu(i,1,n-x+1)if(s[i+x-1]-s[i-1]==0)\n\t\u7ed9\u8fd9\u6bb5\u533a\u95f4\u8d4b\u503c\uff0c\u8df3\u51fa\u5faa\u73af;\n\tprintf(\"NULL\\n\");\n}\n```\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$ \u3002\n\n# 2.$\\texttt {erase}$ \u64cd\u4f5c\u5b9e\u73b0\n\n\n```cpp\nvoid erase()\n{\n\tcin>>x;\n\tif(x>cnt||x<1||!al[x]){printf(\"ILLEGAL_ERASE_ARGUMENT\\n\");return;}\n\tFu(j,l[x],r[x])a[j]=0;\n\tl[x]=r[x]=0;\n\tal[x]=0;\n}\n```\n\n\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c $O(n)$ \u76f4\u63a5\u5220\u9664\u3002\n\n\u628a\u8fd9\u6bb5\u533a\u95f4\u7684\u5185\u5b58\u4f7f\u7528\u503c\u5168\u90e8\u6e05\u7a7a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n# 3.$\\texttt{deflagment}$ \u64cd\u4f5c\u5b9e\u73b0\n\n\u6bcf\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5373\u5728\u5185\u5b58\u533a\u95f4\u5e8f\u5217\u91cc\u7684\u672b\u5c3e\u63d2\u5165\u8fd9\u4e00\u4e2a\u533a\u95f4\u3002\n\n\u5220\u9664\u540c\u7406\u3002\n\n\u7136\u540e\u6bcf\u4e2a\u533a\u95f4\u5f80\u524d\u79fb\u52a8\u53ea\u9700\u8981\u79fb\u52a8\u5de6\u53f3\u7aef\u70b9\u5373\u53ef\uff0c\u4f46\u662f\u8fd8\u8981\u79fb\u52a8\u91cc\u9762\u7684\u6570\u636e\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(\\sum^{cnt} _{i=1} (r_i-l_i))$\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u533a\u95f4\u4e0d\u91cd\u53e0\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6\u7b49\u4e8e $O(n)$ \u3002\n\n```\nvoid deflagment()\n{\n\tFu(i,1,cnt)\n\tif(al[i])\n\t{\n\t\tFu(j,l[i],r[i])a[j]=0;\n\t\twhile(a[l[i]-1]==0&&l[i]>1)--l[i],--r[i];\n\t\tFu(j,l[i],r[i])a[j]=1;\n\t}\n}\n\n```\n\n# 4.\u5b8c\u6574\u4ee3\u7801\uff08$O(Tn^2)$\uff09\n\n```cpp\n\n#include<bits/stdc++.h>\n#define F(i,a,b,c) for(register int i=(a);(b);i=(c))\n#define Fu(i,a,b) F(i,(a),i<=(b),i+1)\n#define Fd(i,a,b) F(i,(a),i>=(b),i-1)\n#define inf 1073741823\n#define LL long long\nint Fl,ch;template<typename t>int in(t&a){a=0;ch=getchar();Fl=1;while(((ch<'0')||(ch>'9'))&&ch!=EOF)Fl=(ch=='-')?-Fl:Fl,ch=getchar();if(ch==EOF)return 0;while((ch>='0')&&(ch<='9'))a=a*10+ch-'0',ch=getchar();a*=Fl;return 1;}template<typename t,typename ...ARGS>int in(t&a,ARGS&...args){return in(a)+in(args...);}\nusing namespace std;\nint l[101],r[101],n,x,t,cnt;\nbool a[101],al[101];\nbool canput(int l,int r)\n{\n\tFu(i,l,r)if(a[i])return 0;\n\treturn 1;\n}\nvoid alloc()\n{\n\tcin>>x;\n\tFu(i,1,n-x+1)\n\t{\n\t\tif(canput(i,i+x-1))\n\t\t{\n\t\t\tprintf(\"%d\\n\",++cnt);\n\t\t\tl[cnt]=i,r[cnt]=i+x-1;\n\t\t\tFu(j,l[cnt],r[cnt])a[j]=1;\n\t\t\tal[cnt]=1;\n\t\t\treturn;\n\t\t}\n\t}\n\tprintf(\"NULL\\n\");\n}\nvoid erase()\n{\n\tcin>>x;\n\tif(x>cnt||x<1||!al[x]){printf(\"ILLEGAL_ERASE_ARGUMENT\\n\");return;}\n\tFu(j,l[x],r[x])a[j]=0;\n\tl[x]=r[x]=0;\n\tal[x]=0;\n}\nvoid deflagment()\n{\n\tFu(i,1,cnt)\n\tif(al[i])\n\t{\n\t\tFu(j,l[i],r[i])a[j]=0;\n\t\twhile(a[l[i]-1]==0&&l[i]>1)--l[i],--r[i];\n\t\tFu(j,l[i],r[i])a[j]=1;\n\t}\n}\nint main()\n{\n\tin(t,n);\n\tFu(i,1,t)\n\t{\n\t\tstring s;cin>>s;\n\t\tif(s[0]=='a')alloc();\n\t\tif(s[0]=='e')erase();\n\t\tif(s[0]=='d')deflagment();\n\t}\n\treturn 0;\n}\n//BY \u7ebf\u6bb5\u6811\u849f\u84bb\n\n```",
        "postTime": 1595120909,
        "uid": 121995,
        "name": "SmallTualatin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF7B \u3010Memory Manager\u3011"
    },
    {
        "content": "~~\u611f\u89c9\u8fd9\u9898\u5b58\u5728\u8c14\u8bc4~~\n\n\u6211\u4ee5\u4e3a\u8fd9\u9898\u662f\u67d0\u6570\u636e\u7ed3\u6784\uff0c\u60f3\u4e86\u534a\u5929\uff0c\u60f3\u8d77\u6765\u770b\u6570\u636e\u8303\u56f4\uff08\u56e0\u4e3a\u4e2d\u6587\u9898\u9762\u91cc\u6ca1\u6709\uff09\uff0c\u4e00\u770b\uff0c\u5176\u5b9e**\u6a21\u62df**\u5c31\u53ef\u4ee5\u8fc7\u672c\u9898\u3002\n\n~~\u5efa\u8bae\u7ffb\u8bd1\u5927\u5927\u628a\u6570\u636e\u8303\u56f4\u4e5f\u7ffb\u8bd1\u4e0a~~\n\n------------\n\n\u5176\u5b9e\u7ed9\u5927\u5bb6\u5e26\u6765\u56f0\u6270\u7684\u5e94\u8be5\u662f\u6709\u4e9b\u8ff7\u60d1\u7684\u82f1\u6587\u9898\u9762\uff0c\u8fd9\u91cc\u518d\u7b80\u5355\u7684\u590d\u8ff0\u4e00\u4e0b\u3002\n\n\u4f60\u9700\u8981\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a$m$\u7684\u6bb5\u4e0a\uff0c\u652f\u6301\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a\n\n1\u3001\u627e\u5230\u4e00\u6bb5\u8fde\u7eed\u7684\u6ca1\u6709\u6807\u8bb0\u8fc7\u7684\u6bb5\uff0c\u628a\u8fd9\u4e00\u6bb5\u6807\u8bb0\u4e3a\u7f16\u53f7$n$\u3002\n\n2\u3001\u627e\u5230\u7f16\u53f7\u4e3a$x$\u7684\u6bb5\uff0c\u6e05\u9664\u8be5\u6bb5\u7684\u6807\u8bb0\u3002\n\n3\u3001\u628a\u6240\u6709\u6709\u6807\u8bb0\u7684\u6bb5\u4e4b\u95f4\u7684\uff0c\u6ca1\u6709\u6807\u8bb0\u7684\u6bb5\u79fb\u5230\u5e8f\u5217\u672b\u5c3e\u3002\n\n## \u6a21\u62df\u601d\u8def\n\n\u53ef\u4ee5\u8003\u8651\u5f00\u4e00\u4e2a\u957f\u5ea6\u4e3a$m$\u7684\u6570\u7ec4`memory`\uff0c\u5176\u4e2d`memory[i]`\u8868\u793a\u7b2c$i$\u4e2a\u5185\u5b58\u6807\u8bb0\u7684\u7f16\u53f7\u3002\n\n\u7136\u540e\u8bbe\u8ba1\u4e09\u4e2a\u51fd\u6570\u5206\u522b\u5bf9\u5e94\u4e09\u79cd\u64cd\u4f5c\u5373\u53ef\uff0c\u5177\u4f53\u64cd\u4f5c\u89c1\u4e0b\u3002\n\n## \u64cd\u4f5c1\n\n\u5bf9\u4e8e\u64cd\u4f5c1\uff0c\u53ef\u4ee5\u626b\u63cf\u6574\u4e2a\u957f\u5ea6\u4e3a$m$\u7684\u6bb5\uff0c\u627e\u5230\u8fde\u7eed\u7684\u7b26\u5408\u6761\u4ef6\u7684\u6bb5\u3002\n\n**\u4ee3\u7801\u5b9e\u73b0**\n\n```cpp\ninline void alloc(const int x){\n\tint find=0,st=0;//find\u8868\u793a\u627e\u5230\u7684\u8fde\u7eed\u7684\u6bb5\u957f\n\tfor(int i=1;i<=m;i++){\n\t\tif(memory[i]==0 && find==0)//\u8fde\u7eed\u7a7a\u95f2\u7a7a\u95f4\u7684\u7b2c\u4e00\u4e2a\u5730\u5740\u662fst \n\t\t\tfind++,st=i;\n\t\telse if(memory[i]==0)\n\t\t\tfind++;\n\t\telse find=0;//\u7a7a\u95f2\u7a7a\u95f4\u65ad\u4e86 \n\t\t//\u4ee5\u4e0a\u627e\u7a7a\u95f2\u7a7a\u95f4 \n\t\tif(find>=x){//\u627e\u5230\u4e86\u7b2c\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u8fde\u7eed\u6bb5\n\t\t\tfor(int j=st;j<=i;j++)\n\t\t\t\tmemory[j]=it;//\u8d4b\u503c\u7f16\u53f7\n\t\t\twrite(it,'\\n');\n\t\t\tit++;//\u4e0b\u4e00\u6b21\u5206\u914d\u7684\u7f16\u53f7+1\n\t\t\treturn;\n\t\t}\n\t}\n\tprintf(\"NULL\\n\");//\u6ca1\u627e\u5230\uff0c\u8f93\u51faNULL\n}\n```\n\n## \u64cd\u4f5c2\n\n\u5bf9\u4e8e\u64cd\u4f5c2\uff0c\u53ef\u4ee5\u626b\u63cf\u6574\u4e2a\u957f\u5ea6\u4e3a$m$\u7684\u6bb5\uff0c\u627e\u5230\u7f16\u53f7\u4e3a$x$\u7684\u6bb5\uff0c\u6e05\u9664\u6807\u8bb0\u3002\n\n\u5177\u4f53\u4e00\u70b9\uff0c\u5c31\u662f`if(memory[i]==x) memory[i]=0`\u3002\n\n**\u4ee3\u7801\u5b9e\u73b0**\n\n```cpp\ninline void erase(const int x){\n\tif(x<1 || x>it){\n\t\tprintf(\"ILLEGAL_ERASE_ARGUMENT\\n\");\n\t\treturn;//\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u5408\u6cd5\uff0c\u5426\u5219\u4f1a\u88abhack\n\t}\n\tfor(int i=1;i<=m;i++)//\u626b\u63cf\u6570\u7ec4\uff0c\u627e\u5230\u6240\u8981\u5220\u9664\u7684\u6bb5\n\t\tif(memory[i]==x){\n\t\t\tint p=i;\n\t\t\twhile(memory[p]==x)//\u5faa\u73af\u5220\u9664\n\t\t\t\tmemory[p++]=0;\n\t\t\treturn;\n\t\t}\n\tprintf(\"ILLEGAL_ERASE_ARGUMENT\\n\");//\u6ca1\u6709\u5bf9\u5e94\u7684\u6bb5\uff0c\u62a5\u9519\n}\n```\n\n## \u64cd\u4f5c3\n\n\u5bf9\u4e8e\u64cd\u4f5c3\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u590d\u5236\u66b4\u529b\u5b9e\u73b0\u3002\n\n\u65e2\u7136\u8981\u6c42\u628a\u6ca1\u6709\u6807\u8bb0\u7684\u6bb5\u653e\u5230\u672b\u5c3e\uff0c\u53ef\u4ee5\u8003\u8651copy\u4e00\u4efd\u539f\u6570\u7ec4\u3002\n\n\u4f46\u662fcopy\u7684\u65f6\u5019\uff0c\u4e0dcopy\u672a\u6807\u8bb0\u7684\u6bb5\u3002\n\n\u7136\u540e\u628acopy\u7684\u6570\u7ec4\uff0c\u91cd\u65b0\u8d4b\u503c\u5230\u539f\u6570\u7ec4\u4e2d\uff0c\u8fd9\u6837\uff0c\u6ca1\u6807\u8bb0\u7684\u6bb5\u5c31\u79fb\u5230\u4e86\u672b\u5c3e\u3002\n\n**\u4ee3\u7801\u5b9e\u73b0**\n\n```cpp\ninline void defragment(){\n\tstd::queue<int>Q;\n\tfor(int i=1;i<=m;i++)\n\t\tif(memory[i]!=0)//\u5229\u7528\u961f\u5217\u5faa\u73af\u5b9e\u73b0\n\t\t\tQ.push(memory[i]);\n//\u8fd9\u6837\uff0c\u6570\u7ec4\u5c31copy\u5230\u961f\u5217\u4e2d\n\tint i=1;\n\tmemset(memory,0,sizeof(memory));//\u76f4\u63a5\u6e05\u7a7a\u539f\u6570\u7ec4\n\twhile(Q.size()){//\u4ece1\u5230\u961f\u5217\u5927\u5c0f\u91cd\u65b0\u590d\u5236\u5230\u539f\u6570\u7ec4\u4e2d\n\t\tmemory[i++]=Q.front();\n\t\tQ.pop();\n\t}\n}\n```\n\n## \u4e3b\u51fd\u6570\n\n\u8bfb\u5165\u76f8\u5e94\u7684\u6570\u636e\uff0c\u8c03\u7528\u76f8\u5e94\u7684\u51fd\u6570\u7ef4\u62a4\u5373\u53ef\u3002\n\n```cpp\nsigned main(){\n\tt=read(),m=read();\n\tfor(int i=1;i<=t;i++){\n\t\tstd::string st;\n\t\tstd::cin>>st;\n\t\tif(st==\"alloc\")\n\t\t\talloc(read());\n\t\tif(st==\"erase\")\n\t\t\terase(read());\n\t\tif(st==\"defragment\")\n\t\t\tdefragment();\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1607592820,
        "uid": 307143,
        "name": "\u4e00\u94ed\u541b\u4e00",
        "ccfLevel": 6,
        "title": "\u9898\u89e3CF7B"
    },
    {
        "content": "```cpp\n// \u8fd9\u662f\u4e00\u9053\u6a21\u62df\u9898\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\u8981\u6ce8\u610f\n// \u5177\u4f53\u89c1\u4ee3\u7801\u548c\u6ce8\u91ca\n#include <iostream>\n#include <string>\n#include <array>\n\nint main()\n{\n    std::array<int, 100> Arr{ 0 };\n    int t, m;\n    std::cin >> t >> m;\n\n    int id = 1; // \u6807\u8bb0\u7740\u6700\u8fdc\u7684\u7f16\u53f7\uff0c\u4ece1\u5f00\u59cb\n    std::string Command;\n    while (t--)\n    {\n        std::cin >> Command;\n        if (Command[0] == 'a')  // \"alloc\"\n        {\n            int p;\n            std::cin >> p;\n\n            int cnt = 0, idx = 0;\n            bool OK = false;\n            for (int i = 0; i < m; ++i)\n            {\n                if (!Arr[i])\n                {\n                    ++cnt;  // \u53bb\u627e\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u76840\n                }\n                else\n                {\n                    cnt = 0;    // \u4e2d\u65ad\u4e86\u5c31\u6e05\u96f6\u91cd\u6765\n                    idx = i + 1;\n                }\n\n                if (cnt == p)   // \u4f9d\u9898\u610f\uff0c\u627e\u5230\u4e86\u7b2c\u4e00\u4e2a\u80fd\u5b58\u653ep\u4e2a\u5355\u4f4d\u7684\u5c31\u7acb\u9a6c\u8df3\u51fa\n                {\n                    OK = true;\n                    break;\n                }\n            }\n\n            if (OK)\n            {   // \u4eceidx\u5f00\u59cb\u6d82\u8fde\u7eed\u7684p\u4e2a\n                for (int i = idx; i < idx + p; ++i)\n                {\n                    Arr[i] = id;\n                }\n\n                // \u8fd9\u91cc\u8981\u52a0\u4e00\u4e86\n                std::cout << id++ << std::endl;\n            }\n            else\n            {\n                std::puts(\"NULL\");\n            }\n        }\n        else if (Command[0] == 'e') // \"erase\"\n        {\n            int p;\n            std::cin >> p;\n\n            if (p > id || p <= 0)   // \u5220\u9664\u6700\u5927\u6807\u53f7\u4ee5\u5916\u7684\u6216\u8005\u5220\u96641\u4ee5\u4e0b\u7684\u5747\u4e3a\u975e\u6cd5\n            {\n                std::puts(\"ILLEGAL_ERASE_ARGUMENT\");\n            }\n            else\n            {\n                int f = false;\n                int i;\n                for (i = 0; i < m; ++i)\n                {\n                    if (Arr[i] == p)    // \u53bb\u627e\u8981\u88ab\u5220\u53bb\u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u4e0b\u6807\n                    {\n                        break;\n                    }\n                }\n\n                while (Arr[i] == p)\n                {\n                    Arr[i] = 0; // \u6e05\u96f6\u5373\u662f\u5220\u9664\n                    ++i;\n                    f = true;   // \u6807\u8bb0\u5220\u9664\u64cd\u4f5c\u88ab\u6267\u884c\u4e86\n                }\n\n                if (!f) // \u5982\u679c\u8fd9\u4e00\u6b21\u5220\u9664\u6ca1\u6709\u505a\u4efb\u4f55\u64cd\u4f5c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5220\u9664\u4e5f\u662f\u65e0\u6548\u7684\n                {\n                    std::puts(\"ILLEGAL_ERASE_ARGUMENT\");\n                }\n            }\n        }\n        else   // \"defragment\"\n        {\n            int idx = 0;\n            for (int i = 0; i < m; ++i)\n            {\n                if (Arr[i]) // \u5982\u679c\u975e\u96f6\uff0c\u5219\u5b58\u653e\u5728\u524d\u9762\n                {\n                    Arr[idx++] = Arr[i];\n                }\n            }\n            for (int i = idx; i < m; ++i)   // \u540e\u9762\u90a3\u90e8\u5206\u90fd\u662f\u96f6\n            {\n                Arr[i] = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n```",
        "postTime": 1520239197,
        "uid": 59062,
        "name": "\u5c0f\u95f8\u87f9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF7B \u3010Memory Manager\u3011"
    },
    {
        "content": "# ~~\u9996\u5148\u5728\u770b\u9898\u89e3\u524d\uff0c\u5148\u5927\u558a\u4e00\u58f0\uff1a\u5185\u5b58\u6761\u5c06\u4f1a\u81ed\u540d\u662d\u8457\uff01~~\n\n\u597d\u4e86\u8bdd\u4e0d\u591a\u8bf4\u5f00\u59cb\u6211\u7684\u8868\u6f14\u3002\n\n\u5f88\u7b80\u5355\u8fd9\u9898\u662f\u4e2a\u7eaf\u6a21\u62df\uff08\u4f46\u662fMLE\u548cTLE\u968f\u65f6\u51fa\u73b0\uff09\uff0c\u800c\u4e14\uff0c\u8fd9\u9898\u5f88\u4e0d\u597d\u5199\uff0c\u867d\u7136\u662f\u4e2a\u6a21\u62df\u3002\n\n\u597d\u4e86\u8bdd\u4e0d\u591a\u8bf4\u4e0a\u4ee3\u7801~~\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint d[111],n,m,z,i,j,k,l;\nint cnt=0;\nstring s;\nint main()\n{\n\tcin>>n>>m;\n\tfor(k=0;k<n;k++)\n\t{\n\t\tcin>>s;\n\t\tif(s==\"alloc\")\n\t\t{\n\t\t\tcin>>z;\n\t\t\tfor(i=0,j=-1;i<m;i++)\n\t\t\t{\n\t\t\t\tif(i-j==z&&!d[i])break;\n\t\t\t\telse if(d[i])j=i;\n\t\t\t}\n\t\t\tif(i-j==z&&i<m)\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t\tcout<<cnt<<endl;\n\t\t\t\tfor(l=j+1;l<=i;l++)d[l]=cnt;\n\t\t\t}\n\t\t\telse cout<<\"NULL\"<<endl;\n\t\t}\n\t\tif(s==\"erase\")\n\t\t{\n\t\t\tcin>>z;\n\t\t\tint p=0;\n\t\t\tfor(int i=0;i<m;i++)\n\t\t\t{\n\t\t\t\tif(d[i]==z&&z!=0)\n\t\t\t\t{\n\t\t\t\t\td[i]=0;\n\t\t\t\t\tp=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(p==0)cout<<\"ILLEGAL_ERASE_ARGUMENT\"<<endl;\n\t\t}\n\t\tif(s==\"defragment\")\n\t\t{\n\t\t\tfor(int i=0,j=0;i<m;i++)\n\t\t\t{\n\t\t\t\tif(d[i])\n\t\t\t\t{\n\t\t\t\t\tl=d[j];\n\t\t\t\t\td[j]=d[i];\n\t\t\t\t\td[i]=l;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u5b8c",
        "postTime": 1592136253,
        "uid": 194902,
        "name": "iiawaKL",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF7B \u3010Memory Manager\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\uff0c\u662f\u4e00\u9053\u4e0d\u7b97\u592a\u96be\u7684\u6a21\u62df\u9898\u3002\n\n\u505a\u6cd5\u5f88\u5bb9\u6613\u60f3\u5230\u3002\n\n[\u539f\u9898\u94fe\u63a5 CF7B Memory Manager](https://www.luogu.org/problemnew/show/CF7B)\n\n## \u601d\u8def\u53ca\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5185\u5b58\u5757\uff0c\u8bb0\u5f55\u4e24\u4e2a\u53c2\u6570 $l[i]$ \u548c $r[i]$\uff0c\u4ee3\u8868\u7684\u662f\u5176\u5728\u5185\u5b58\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\uff08\u5de6\u95ed\u53f3\u95ed\uff09\n\n\u518d\u5f00\u4e00\u4e2a\u6570\u7ec4 $from[i]$\uff0c\u8bb0\u5f55\u5f53\u524d\u6570\u7ec4\u7684\u72b6\u6001\u3002\u7b2c $i$ \u4f4d\u82e5\u4e3a $0$ \uff0c\u5219\u4ee3\u8868\u8be5\u4f4d\u7f6e\u6ca1\u6709\u88ab\u5206\u914d\u3002\u82e5\u4e0d\u4e3a $0$\uff0c\u5219\u4ee3\u8868\u5176\u5c5e\u4e8e\u5185\u5b58\u5757\u7684\u7f16\u53f7\u3002\n\n```cpp\nint from[107], size; // size \u5373\u5185\u5b58\u5927\u5c0f\nint l[107], r[107], top; // top \u5373\u5df2\u6709\u5185\u5b58\u5757\u6570\u91cf\n```\n\n### $alloc$\n\n1. \u627e\u5230\u7b2c\u4e00\u5757\u7a7a\u95f2\u7684\u5185\u5b58\u5757\u3002  \n   \u65b9\u6cd5\uff1a\u66b4\u529b\u627e\uff0c\u5e76\u4e14\u4f7f\u7528\u7c7b\u4f3c\u4e8e KMP \u7684\u65b9\u6cd5\u8fdb\u884c\u4f18\u5316\u3002\u4f18\u5316\u524d\u590d\u6742\u5ea6 $O(n^2)$\uff0c\u4f18\u5316\u540e\u590d\u6742\u5ea6 $O(n)$\u3002   \n    ```cpp\n    void alloc(int n)\n    {\n        bool isSuccess = 0;\n        for (int i = 1; i <= size - n + 1; i++) {\n            bool couldUse = 1;\n            for (int j = 0; j < n; j++) {\n                if (from[i + j]) {\n                    couldUse = 0;\n                    i = i + j; // \u4f18\u5316\n                    break;\n                }\n            }\n            if (couldUse) {\n                top++;\n                l[top] = i;\n                r[top] = i + n - 1;\n                for (int j = l[top]; j <= r[top]; j++) {\n                    from[j] = top;\n                }\n                isSuccess = 1;\n                break;\n            }\n        }\n        if (isSuccess) {\n            write(top, '\\n');\n        } else {\n            puts(\"NULL\");\n        }\n        #ifdef debugTAG\n        for (int i = 1; i <= size; i++) {\n            write(from[i], 32);\n        }\n        putchar(10);\n        #endif\n    }\n    ```  \n2. \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u5b58\u50a8\uff1b  \n   \u5426\u5219\uff0c\u8f93\u51fa ``NULL``\u3002\n   \n### $erase$\n1. \u7279\u6b8a\u5224\u65ad  \n   \u82e5\u4e3a\u8d1f\u6570\uff0c\u4e3a0\uff0c\u5927\u4e8e\u5df2\u6709\u5185\u5b58\u5757\u6570\u91cf\u6216\u8005\u5df2\u7ecf\u88ab\u5220\u9664\u5c31\u8f93\u51fa ``ILLEGAL_ERASE_ARGUMENT``   \n   \u5426\u5219\uff0c\u5220\u9664\uff1b\n2. \u5c06 $l[i]$ \u6807\u4e3a $-1$\uff0c\u5e76\u6e05\u9664\u5185\u5b58\n\t```cpp\n    void erase(int x)\n    {\n        if (x <= 0 || x > top || l[x] == -1) {\n            puts(\"ILLEGAL_ERASE_ARGUMENT\");\n            return;\n        }\n        for (int j = l[x]; j <= r[x]; j++) {\n            from[j] = 0;\n        }\n        l[x] = -1;\n        #ifdef debugTAG\n        for (int i = 1; i <= size; i++) {\n            write(from[i], 32);\n        }\n        putchar(10);\n        #endif\n    }\n    ```\n    \n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\n    \n### $defragment$\n\n\u6211\u7684\u505a\u6cd5\u662f\u5229\u7528 $priority\\_queue$\n\n\u4e0d\u592a\u597d\u8bf4\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\u5427\n\n```cpp\nvoid defragment()\n{\n    priority_queue<LR> pq;\n    for (int i = 1; i <= top; i++) {\n        if (l[i] != -1) {\n            pq.push(LR(l[i], r[i], i));\n        }\n    }\n    memset(from, 0, sizeof(from));\n    int Rwall = 0;\n    while (!pq.empty()) {\n        LR f = pq.top();\n        pq.pop();\n        l[f.idx] = Rwall + 1;\n        r[f.idx] = Rwall + f.length;\n        Rwall += f.length;\n        for (int i = l[f.idx]; i <= r[f.idx]; i++) {\n            from[i] = f.idx;\n        }\n    }\n    #ifdef debugTAG\n    for (int i = 1; i <= size; i++) {\n        write(from[i], 32);\n    }\n    putchar(10);\n    #endif\n}\n```\n\n\u5176\u4e2d $LR$ \u662f\u6211\u81ea\u5df1\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u3002\n\n\u58f0\u660e\u5982\u4e0b\uff1a\n\n```cpp\nstruct LR {\n    int l, r, idx;\n    int length;\n    LR(int L = 0, int R = 0, int IDX = 0) : l(L), r(R), idx(IDX), length(r - l + 1) {}\n    bool operator < (const LR &other) const\n    {\n        return l > other.l;\n    }\n};\n```\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(nlog_{2}n)$  \n\u5b9e\u9645\u8fd0\u884c\u4e2d\u66f4\u5feb\uff0c\u5927\u7ea6 $O(n)$\n\n### \u603b\u65f6\u95f4\u590d\u6742\u5ea6\n\n$O(n^2log_2n)$\uff0c\u5b8c\u5168\u53ef\u4ee5\u8fc7\u6389\n\n## \u4ee3\u7801\n\n```cpp\n/*************************************\n * problem:      CF7B Memory Manager.\n * user ID:      63720.\n * user name:    Jomoo.\n * time:         2019-05-19.\n * language:     C++.\n * upload place: Luogu.\n*************************************/ \n\n#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <typename Int>\ninline Int read()       \n{\n    Int flag = 1;\n    char c = getchar();\n    while ((!isdigit(c)) && c != '-') c = getchar();\n    if (c == '-') flag = -1, c = getchar();\n    Int init = c & 15;\n    while (isdigit(c = getchar())) init = (init << 3) + (init << 1) + (c & 15);\n    return init * flag;\n}\n\ntemplate <typename Int>\ninline void write(Int x)\n{\n    if (x < 0) putchar('-'), x = ~x + 1;\n    if (x > 9) write(x / 10);\n    putchar((x % 10) | 48);\n}  \n\ntemplate <typename Int>\ninline void write(Int x, char nextch)\n{\n    write(x);\n    putchar(nextch);\n}  \n\n#define int long long\n\nstruct LR {\n    int l, r, idx;\n    int length;\n    LR(int L = 0, int R = 0, int IDX = 0) : l(L), r(R), idx(IDX), length(r - l + 1) {}\n    bool operator < (const LR &other) const\n    {\n        return l > other.l;\n    }\n};\n\nstruct Memory_Manager {\n    int from[107], size;\n    int l[107], r[107], top;\n\n    Memory_Manager() : top(0)\n    {\n        memset(from, 0, sizeof(from));\n    }\n\n    void alloc(int n)\n    {\n        bool isSuccess = 0;\n        for (int i = 1; i <= size - n + 1; i++) {\n            bool couldUse = 1;\n            for (int j = 0; j < n; j++) {\n                if (from[i + j]) {\n                    couldUse = 0;\n                    i = i + j;\n                    break;\n                }\n            }\n            if (couldUse) {\n                top++;\n                l[top] = i;\n                r[top] = i + n - 1;\n                for (int j = l[top]; j <= r[top]; j++) {\n                    from[j] = top;\n                }\n                isSuccess = 1;\n                break;\n            }\n        }\n        if (isSuccess) {\n            write(top, '\\n');\n        } else {\n            puts(\"NULL\");\n        }\n        #ifdef debugTAG\n        for (int i = 1; i <= size; i++) {\n            write(from[i], 32);\n        }\n        putchar(10);\n        #endif\n    }\n\n    void erase(int x)\n    {\n        if (x <= 0 || x > top || l[x] == -1) {\n            puts(\"ILLEGAL_ERASE_ARGUMENT\");\n            return;\n        }\n        for (int j = l[x]; j <= r[x]; j++) {\n            from[j] = 0;\n        }\n        l[x] = -1;\n        #ifdef debugTAG\n        for (int i = 1; i <= size; i++) {\n            write(from[i], 32);\n        }\n        putchar(10);\n        #endif\n    }\n\n    void defragment()\n    {\n        priority_queue<LR> pq;\n        for (int i = 1; i <= top; i++) {\n            if (l[i] != -1) {\n                pq.push(LR(l[i], r[i], i));\n            }\n        }\n        memset(from, 0, sizeof(from));\n        int Rwall = 0;\n        while (!pq.empty()) {\n            LR f = pq.top();\n            pq.pop();\n            l[f.idx] = Rwall + 1;\n            r[f.idx] = Rwall + f.length;\n            Rwall += f.length;\n            for (int i = l[f.idx]; i <= r[f.idx]; i++) {\n                from[i] = f.idx;\n            }\n        }\n        #ifdef debugTAG\n        for (int i = 1; i <= size; i++) {\n            write(from[i], 32);\n        }\n        putchar(10);\n        #endif\n    }\n} BerlOS;\n\nint t, m;\nchar buf[20], n;\n\nsigned main()\n{\n    t = read<int>();\n    m = read<int>();\n    BerlOS.size = m;\n    while (t--) {\n        scanf(\"%s\", buf);\n        switch(buf[0]) {\n            case 'a' :\n                BerlOS.alloc(read<int>());\n                break;\n            case 'e' :\n                BerlOS.erase(read<int>());\n                break;\n            case 'd' :\n                BerlOS.defragment();\n                break;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1558232807,
        "uid": 63720,
        "name": "brealid",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF7B \u3010Memory Manager\u3011"
    }
]