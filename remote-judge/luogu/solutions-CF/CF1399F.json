[
    {
        "content": "\u8fd9\u9898\u5c31\u6ca1\u4eba\u66b4\u529b\u8bb0\u5fc6\u5316\u641c\u7d22\u5417...\n\n\u9996\u5148\u5bf9\u7ebf\u6bb5\u7684\u7aef\u70b9\u8fdb\u884c\u79bb\u6563\u5316\u3002\u7136\u540e\uff0c\u6211\u4eec\u8bbe $f(l,r)$ \u4e3a\u8be5\u6bb5\u533a\u95f4\u7684\u7b54\u6848\u3002\n\n\u4f46\u662f\u8be5\u600e\u4e48\u8f6c\u79fb\uff1f\u8003\u8651\u679a\u4e3e\u5b50\u6bb5\u6765\u66f4\u65b0\uff0c\u540c\u65f6\u82e5\u6709\u7ebf\u6bb5\u6b63\u597d\u8986\u76d6\u4e86\u8fd9\u4e2a\u533a\u95f4\uff0c\u7b54\u6848\u518d\u52a0\u4e00\u3002\n\n\u4f46\u662f\u66b4\u529b\u679a\u4e3e\u5b50\u6bb5\u662f $O(n^3)$ \u7684\u3002\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5982\u4e0b\u8f6c\u79fb\uff1a\n\n\u9996\u5148\u53ef\u4ee5\u5355\u72ec\u653e\u7f29 $l$ \u6216 $r$ \u7aef\u70b9\uff0c\u5373\u7528 $f(l+1,r)$ \u548c $f(l,r-1)$ \u6765\u66f4\u65b0 $f(l,r)$\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u5207\u5272\u533a\u95f4\uff0c\u5047\u5982\u6709\u82e5\u5e72\u6761\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u5728 $l$ \u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u8bbe\u5176\u4e2d\u4e00\u4e2a\u7684\u53f3\u7aef\u70b9\u4e3a $r'$\uff0c\u6211\u4eec\u53d1\u73b0\u53ea\u6709\u6211\u4eec\u628a\u533a\u95f4\u5207\u5272\u4e3a $[l,r']$ \u548c $[r'+1,r]$ \u65f6\u624d\u6709\u610f\u4e49\u3002\u5bf9\u4e8e\u7ebf\u6bb5\u53f3\u7aef\u70b9\u5728 $r$ \u540c\u7406\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u7aef\u70b9\uff0c\u5b58\u4e0b\u6709\u54ea\u4e9b\u7ebf\u6bb5\u4ee5\u4ed6\u4e3a\u5de6\u7aef\u70b9\u3002\u8f6c\u79fb\u679a\u4e3e\u5373\u53ef\u3002\u6bcf\u4e2a\u7ebf\u6bb5\u6700\u591a\u5f71\u54cd $O(n)$ \u4e2a\u8f6c\u79fb\u533a\u95f4\uff0c\u4f7f\u4ed6\u4eec\u679a\u4e3e\u590d\u6742\u5ea6\u52a0\u4e00\uff08\u5de6\u7aef\u70b9\u4e3a $l$ \u6216\u53f3\u7aef\u70b9\u4e3a $r$ \u7684\u533a\u95f4\uff09\uff0c\u6240\u4ee5\u679a\u4e3e\u7684\u590d\u6742\u5ea6\u4e3a $O(n^2)$\u3002\u540c\u65f6\u72b6\u6001\u6570\u4e5f\u4e3a $O(n^2)$\uff0c\u6240\u4ee5\u6574\u4f53\u590d\u6742\u5ea6 $O(n^2)$\u3002\n\n~~\u8fd8\u6709\u4e00\u4e2a\u5077\u61d2\u7684\u505a\u6cd5~~\uff1a\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u53ea\u7528\u8003\u8651\u5de6\u7aef\u70b9\u5728 $l$ \u7684\u7ebf\u6bb5\uff0c\u81f3\u4e8e\u53f3\u7aef\u70b9\u5728 $r$ \u7684\u7ebf\u6bb5\uff0c\u6211\u4eec\u53d1\u73b0\u653e\u7f29\u548c\u7528\u5de6\u7aef\u70b9\u5728 $l$ \u7684\u7ebf\u6bb5\u6765\u5207\u5272\u533a\u95f4\u53ef\u4ee5\u5b8c\u5168\u66ff\u4ee3\u7528\u53f3\u7aef\u70b9\u5728 $r$ \u7684\u7ebf\u6bb5\u6765\u5207\u5272\u533a\u95f4\u3002\u6240\u4ee5\u53ea\u7528\u7ef4\u62a4\u4e00\u4e2a\u65b9\u5411\u5373\u53ef\u3002\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdio>\n#include<vector>\nconst int N=6005;\nusing namespace std;\nchar te1;\nint a[N],b[N],l[N];\nunsigned short int f[N][N];\nvector<int>rx[N];\nbool v[N][N];\nchar te2;\ninline int read()\n{\n\tchar h=getchar();\n\tint y=0;\n\twhile(h<'0'||h>'9')h=getchar();\n\twhile(h>='0'&&h<='9')y=y*10+h-'0',h=getchar();\n\treturn y;\n}\nunsigned short int dfs(int l,int r)\n{\n\tif(l>r)return 0; \n\tif(f[l][r]!=65535)return f[l][r];\n\tf[l][r]=0;\n\tf[l][r]=dfs(l+1,r);\n\tf[l][r]=max(f[l][r],dfs(l,r-1));\n\tfor(int i=0;i<rx[l].size()&&rx[l][i]<r;i++)f[l][r]=max(f[l][r],(unsigned short int)(dfs(l,rx[l][i])+dfs(rx[l][i]+1,r)));\n\tf[l][r]+=v[l][r];\n\treturn f[l][r];\n}\nsigned main()\n{\n\tint t=read();\n\twhile(t--)\n\t{\n\t\tint n=read();\n\t\tfor(int i=1;i<=n;i++)a[i]=read(),b[i]=read(),l[i]=a[i],l[i+n]=b[i];\n\t\tsort(l+1,l+1+n+n);\n\t\tint m=unique(l+1,l+1+n+n)-l-1;\n\t\tfor(int i=1;i<=n;i++)a[i]=lower_bound(l+1,l+1+m,a[i])-l,b[i]=lower_bound(l+1,l+1+m,b[i])-l;\n\t\tfor(int i=1;i<=m;rx[i].clear(),i++)\n\t\tfor(int j=1;j<=m;j++)f[i][j]=-1,v[i][j]=0;\n\t\tfor(int i=1;i<=n;i++)v[a[i]][b[i]]++,rx[a[i]].push_back(b[i]);\n\t\tfor(int i=1;i<=m;i++)sort(rx[i].begin(),rx[i].end());\n\t\tcout<<dfs(1,m)<<\"\\n\";\n\t}\n}\n```",
        "postTime": 1631695987,
        "uid": 203743,
        "name": "\u6ed1\u5927\u7a3d",
        "ccfLevel": 7,
        "title": "CF1399F Yet Another Segments Subset \u9898\u89e3"
    },
    {
        "content": "\u6211\u4eec\u53ef\u4ee5\u5148\u6c42\u51fa\u6bcf\u6761\u7ebf\u6bb5\u81f3\u591a\u53ef\u4ee5\u5305\u542b\u7684\u7ebf\u6bb5\u6570 $c_i$\uff0c\u7136\u540e\u5b9a\u4e49 $dp_i$ \u4e3a\u5728 $[1,i]$ \u8fd9\u4e2a\u8303\u56f4\u4e0a\u6211\u4eec\u81f3\u591a\u80fd\u9009\u51fa\u591a\u5c11\u6761\u6ee1\u8db3\u9898\u610f\u7684\u7ebf\u6bb5\u6570\uff0c\u6211\u4eec\u679a\u4e3e\u4e0d\u88ab\u5305\u542b\u7684\u7ebf\u6bb5\uff0c\u7531\u4e8e\u4e0d\u80fd\u4e0e\u5176\u4ed6\u7ebf\u6bb5\u76f8\u4ea4\uff0c\u6545\u72b6\u6001\u8f6c\u79fb\u4e3a\n\n$$dp_{r_i} = \\max\\{dp_{r_i-1},dp_{l_i-1}+c_i\\}$$\n\n$c_i$ \u7684\u6c42\u6cd5\u7c7b\u4f3c\uff0c\u4e3a\u4fdd\u8bc1\u72b6\u6001\u8f6c\u79fb\u7684\u6b63\u786e\u6027\uff0c\u6211\u4eec\u9700\u8981\u4ece\u5c06\u6240\u6709\u7ebf\u6bb5\u6309\u7167\u5176\u957f\u5ea6\u6392\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u4ece\u77ed\u7ebf\u6bb5\u8f6c\u79fb\u5230\u957f\u7ebf\u6bb5\u3002\u6392\u5e8f\u540e\uff0c\u5bf9\u6bcf\u6761\u7ebf\u6bb5\uff0c\u5728\u5176\u5bf9\u5e94\u7684\u8303\u56f4\u4e0a\u8dd1\u4e00\u904d\u4e0a\u8ff0\u8f6c\u79fb\u3002\n\n\u6ce8\u610f\u5230 $l_i$ \u548c $r_i$ \u8303\u56f4\u6bd4\u8f83\u5927\uff0c\u9700\u8981\u5148\u79bb\u6563\u5316\u4e4b\u540e\u518d\u8ba1\u7b97\u3002\u8fd9\u6837\u590d\u6742\u5ea6\u662f $O(n^2)$ \u7684\u3002\n\nAC \u4ee3\u7801 (Golang)\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t. \"fmt\"\n\t\"os\"\n\t\"sort\"\n)\n\nfunc main() {\n\tin := bufio.NewReader(os.Stdin)\n\tout := bufio.NewWriter(os.Stdout)\n\tdefer out.Flush()\n\ttype segment struct{ l, r, contains int }\n\n\tvar T, n int\n\tfor Fscan(in, &T); T > 0; T-- {\n\t\tFscan(in, &n)\n\t\tseg := make([]segment, n)\n\t\ta := []int{}\n\t\tfor i := range seg {\n\t\t\tFscan(in, &seg[i].l, &seg[i].r)\n\t\t\ta = append(a, seg[i].l, seg[i].r)\n\t\t}\n\t\tsort.Ints(a)\n\t\tk := 1\n\t\tkth := map[int]int{a[0]: k}\n\t\tfor i := 1; i < len(a); i++ {\n\t\t\tif a[i] != a[i-1] {\n\t\t\t\tk++\n\t\t\t\tkth[a[i]] = k\n\t\t\t}\n\t\t}\n\t\tfor i, s := range seg {\n\t\t\tseg[i].l = kth[s.l]\n\t\t\tseg[i].r = kth[s.r]\n\t\t}\n\t\tsort.Slice(seg, func(i, j int) bool { a, b := seg[i], seg[j]; return a.r-a.l < b.r-b.l })\n\n\t\tk++\n\t\tids := make([][]int, k)\n\t\tfor i, s := range seg {\n\t\t\tids[s.r] = append(ids[s.r], i)\n\t\t}\n\t\tfor i, s := range seg {\n\t\t\tdp := make([]int, k)\n\t\t\tfor j := s.l; j <= s.r; j++ {\n\t\t\t\tdp[j] = dp[j-1]\n\t\t\t\tfor _, id := range ids[j] {\n\t\t\t\t\tif t := seg[id]; t.l >= s.l {\n\t\t\t\t\t\tdp[j] = max(dp[j], dp[t.l-1]+t.contains)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tseg[i].contains = dp[s.r] + 1\n\t\t}\n\n\t\trseg := make([][]segment, k)\n\t\tfor _, s := range seg {\n\t\t\trseg[s.r] = append(rseg[s.r], s)\n\t\t}\n\t\tdp := make([]int, k)\n\t\tfor i := 1; i < k; i++ {\n\t\t\tdp[i] = dp[i-1]\n\t\t\tfor _, s := range rseg[i] {\n\t\t\t\tdp[i] = max(dp[i], dp[s.l-1]+s.contains)\n\t\t\t}\n\t\t}\n\t\tFprintln(out, dp[k-1])\n\t}\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n```\n",
        "postTime": 1611759200,
        "uid": 266651,
        "name": "\u7075\u8336\u5c71\u827e\u5e9c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1399F \u3010Yet Another Segments Subset\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u975e\u5b98\u65b9\u7684\u601d\u8def\u3002\u9996\u5148\uff0c\u5047\u8bbe\u6709\u7ebf\u6bb5$A$\uff0c$B$\uff0c\u4e14$A$\u5b8c\u5168\u88ab$B$\u5305\u542b\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u628a$B$\u770b\u505a\u4e00\u4e2a\u6743\u503c\u4e3a$2$\u7684\u7ebf\u6bb5\u3002\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fd9\u9053\u9898\u8f6c\u5316\u4e3a\u5982\u4f55\u9009\u4e0d\u76f8\u4ea4\u533a\u95f4\u4f7f\u5f97\u6743\u503c\u6700\u5927\u5316\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8bbe$f(i)$\u4e3a\u6700\u540e\u4e00\u4e2a\u9009\u4e2d\u533a\u95f4\u662f\u7b2c$i$\u4e2a\u533a\u95f4\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u7684\u6743\u503c\uff0c\u4e8e\u662f\u6709\n$$\nf(i) = \\max (f[j])+w_i\\ (r_j<l_i)\n$$\n\u5176\u4e2d$w_i$\u4ee3\u8868\u7684\u662f\uff0c\u80fd\u5b8c\u5168\u88ab\u8fd9\u4e2a\u533a\u95f4\u5305\u542b\u7684\u6700\u5927\u4e0d\u76f8\u4ea4\u533a\u95f4\u4e2a\u6570\u3002\u90a3\u4e48\u73b0\u5728\u95ee\u9898\u5c31\u53d8\u6210\uff1a\u5bf9\u4e8e\u6240\u6709\u533a\u95f4\u5982\u4f55\u6c42\u51fa$w_i$\u3002\n\n\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u56fe\u8bba\u7684\u601d\u60f3\uff0c\u6240\u6709\u533a\u95f4\u548c\u5b83\u5305\u542b\u7684\u533a\u95f4\u4e4b\u95f4\u7684\u5173\u7cfb\u6784\u6210\u4e86\u4e00\u68f5\u6811\u3002$A$\u5b8c\u5168\u88ab$B$\u5305\u542b\u90a3\u4e48$A$\u5c31\u662f$B$\u7684\u5b50\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5982\u679c\u6211\u4eec\u6c42\u51fa\u5b50\u8282\u70b9\u7684$w_i$\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u4e00\u6b21dp\u6c42\u51fa\u5f53\u524d\u8282\u70b9\u7684$w_i$\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8fdb\u884c\u4e00\u4e2a\u6811\u4e0a dp \u5957\u7ebf\u6027 dp \u5c31\u597d\u4e86\u3002\u4f46\u662f\u8fd9\u5c31\u610f\u5473\u7740\uff0c\u6bcf\u4e2a\u8282\u70b9\u6211\u4eec\u90fd\u9700\u8981\u5bf9\u5b83\u7684\u5b50\u8282\u70b9\u8fdb\u884c\u4e00\u6b21 dp\uff0c\u4f46\u662f\u8fd9\u6837\u5f88\u6709\u53ef\u80fd\u4f1a\u8d85\u65f6\u3002\n\n\u4e8e\u662f\u6211\u5c31\u60f3\u4e86\u4e00\u4e2a\u7528\u6811\u72b6\u6570\u7ec4\u4f18\u5316 dp \u8f6c\u79fb\u7684\u65b9\u6cd5\u3002\u9996\u5148\u6839\u636e\u8d2a\u5fc3\u601d\u60f3\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b50\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u6309\u7167\u53f3\u7aef\u70b9\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a$f(i)$\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8981\u77e5\u9053\u6ee1\u8db3 $r_j<l_i$ \u7684\u6700\u5927\u503c\u662f\u4ec0\u4e48\u5c31\u597d\u4e86\u3002\n\n\u5229\u7528\u6811\u72b6\u6570\u7ec4\u52a8\u6001\u63d2\u5165\u503c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728$O(nlogn)$\u65f6\u95f4\u5185\u6c42\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5927\u533a\u95f4\u6570\u91cf$w_i$\u4e86\u3002\n\n\u6700\u540e\u6c42\u51fa\u6240\u6709$w_i$\u7684\u503c\u4ee5\u540e\u518d\u5bf9\u6240\u6709\u533a\u95f4\u6765\u4e00\u6b21\u5927 dp\uff0c\u8fd9\u6b21\u7684 dp \u5c31\u53ef\u4ee5\u7528$O(n^2)$\u7684\u66b4\u529b\u8f6c\u79fb\u4e86\uff0c\u4e0d\u4f1a\u5f71\u54cd\u590d\u6742\u5ea6\u3002\n\n\u56e0\u4e3a\u8fd9\u9053\u9898$f(i)$\u7684 dp \u662f\u4ece\u524d\u5f80\u540e\u7684\uff0c\u6240\u4ee5\u6811\u72b6\u6570\u7ec4\u662f\u53ef\u4ee5\u6c42\u51fa\u6700\u5927\u503c\u7684\uff0c\u56e0\u4e3a\u503c\u57df\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5\u8fd8\u662f\u5f97\u79bb\u6563\u5316\u4e00\u4e0b\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n\u603b\u4f53\u590d\u6742\u5ea6\uff1a$O(n^2\\log{n})$\n\u4f46\u662f\u4e0d\u77e5\u9053\u4e3a\u5565\u8dd1\u7684\u8fd8\u633a\u5feb\u3002\n\n```cpp\nstruct Inv {\n    int l, r, id;\n    bool operator<(const Inv& a) const { return r < a.r; }\n};\nInv invs[MAXN];\n// cnt\u4ee3\u8868\u7684\u5c31\u662f\u9898\u89e3\u91cc\u7684w_i\uff0c\n// \u4e5f\u5c31\u662f\u6bcf\u4e2a\u533a\u95f4\u5305\u542b\u7684\u533a\u95f4\u91cc\u6700\u591a\u53ef\u4ee5\u9009\u591a\u5c11\u4e2a\u7b26\u5408\u9898\u610f\u7684\u533a\u95f4\uff08\u5305\u62ec\u81ea\u5df1\n// f[i]\u662f\u7528\u4e8edp\u7684\u4e34\u65f6\u6570\u7ec4\nint cnt[MAXN], f[MAXN];\n\nvector<int> G[MAXN];\nbool vis[MAXN];\nint N;\n\n// \u6c42\u6700\u5927\u503c\u7528\u7684\u6811\u72b6\u6570\u7ec4\nstruct FenwickTree {\n    FenwickTree() {}\n    inline void increase(int t, int x) {\n        for (int i = t; i <= N; i += lowbit(i)) _arr[i] = max(_arr[i], x);\n    }\n    inline int getSum(int t) {\n        int s = 0;\n        for (int i = t; i; i -= lowbit(i)) s = max(s, _arr[i]);\n        return s;\n    }\n    void clear() {\n        for (int i = 1; i <= N; i++) _arr[i] = 0;\n    }\n    int _arr[MAXN * 3];\n    inline int lowbit(int x) { return x & (-x); }\n};\ntemplate <typename T>\nstruct Discretization {\n    vector<T> xp;\n    int size() const { return xp.size(); }\n    void add(T val) { xp.push_back(val); }\n    void discretize() {\n        sort(xp.begin(), xp.end());\n        xp.resize(unique(xp.begin(), xp.end()) - xp.begin());\n    }\n    int get(T val) {\n        return lower_bound(xp.begin(), xp.end(), val) - xp.begin() + 1;\n    }\n    void clear() { xp.clear(); }\n    T get2(int num) { return xp[num - 1]; }\n};\nFenwickTree tree;\nDiscretization<int> discrete;\n\nvoid dfs(int x) {\n    if (vis[x]) return;\n    vis[x] = true;\n    if (G[x].empty()) return;\n    for (auto v : G[x]) dfs(v);\n    sort(G[x].begin(), G[x].end(),\n         [](int a, int b) { return invs[a].r < invs[b].r; });\n\n    // \u5229\u7528\u6811\u72b6\u6570\u7ec4\u4f18\u5316\u7ebf\u6027dp\n    int sz = G[x].size(), num = 0;\n    for (int i = 0; i < sz; i++) {\n        f[i] = cnt[G[x][i]] + tree.getSum(invs[G[x][i]].l - 1);\n        tree.increase(invs[G[x][i]].r, f[i]);\n        num = max(num, f[i]);\n    }\n    tree.clear();\n    cnt[x] = num + 1;\n}\n\nvoid solve() {\n    scanf(\"%d\", &n);\n    discrete.clear();\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d%d\", &invs[i].l, &invs[i].r);\n        invs[i].id = i;\n        cnt[i] = 1;\n        vis[i] = false;\n        G[i].clear();\n        discrete.add(invs[i].l);\n        discrete.add(invs[i].r);\n    }\n\n    // \u5bf9\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u79bb\u6563\u5316\n    discrete.discretize();\n    N = discrete.size();\n    for (int i = 1; i <= n; i++) {\n        invs[i].l = discrete.get(invs[i].l);\n        invs[i].r = discrete.get(invs[i].r);\n    }\n\n    // \u7ed9\u533a\u95f4\u4eec\u8fde\u8fb9\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (i != j && invs[i].l >= invs[j].l && invs[i].r <= invs[j].r) {\n                G[j].push_back(i);\n            }\n        }\n    }\n\n    // \u6811\u4e0adp\n    for (int i = 1; i <= n; i++) {\n        if (!vis[i]) dfs(i);\n    }\n\n    // \u6700\u540e\u6765\u4e00\u4e2a\u5927dp\uff0c\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u4f18\u5316\u6210 O(nlogn)\n    int ans = 0;\n    // \u6ce8\u610f\u6392\u5e8f\u4ee5\u540e\u533a\u95f4\u4f1a\u4e71\u5e8f\n    sort(invs + 1, invs + n + 1);\n    f[0] = 0;\n    for (int i = 1; i <= n; i++) {\n        f[i] = 0;\n        for (int j = i - 1; j >= 0; j--) {\n            if (invs[j].r < invs[i].l) {\n                f[i] = max(f[i], cnt[invs[i].id] + f[j]);\n            }\n        }\n        ans = max(ans, f[i]);\n    }\n    printf(\"%d\\n\", ans);\n}\n```",
        "postTime": 1596733775,
        "uid": 36956,
        "name": "Mr_Skirt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1399F \u3010Yet Another Segments Subset\u3011"
    },
    {
        "content": "# CF1399F Yet Another Segments Subset\n\n\u4e3a\u4e86\u7ed9\u673a\u623f\u5b66\u5f1f\u505a\u8868\u7387\u4e8e\u662f\u5199\u4e2a\u9898\u89e3\n\n\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\u662f\u4e2a dp \uff0c\u8bbe $f(i)$ \u8868\u793a $i$ \u8fd9\u4e2a\u524d\u7f00\u7684\u6700\u591a\u7ebf\u6bb5\u6570\u91cf\u3002\n\n\u8bbe $i$ \u7ebf\u6bb5\u6700\u591a\u80fd**\u540c\u65f6\u5305\u542b** $g(i)$ \u4e2a\u7ebf\u6bb5\uff0c\u90a3\u4e48\u66b4\u529b\u8f6c\u79fb\u5c31\u662f\u679a\u4e3e\u53f3\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u6240\u5728\u7ebf\u6bb5\u3002\n\n\u90a3\u4e48\u6ce8\u610f\u5230\u8fd9\u4e2a\u7ebf\u6bb5\u7684\u5305\u542b\u5173\u7cfb\u662f\u4e2a\u6811\u5f62\u7ed3\u6784\uff0c\u8003\u8651\u6811\u4e0a $dp$ \u3002\n\n\u76f4\u63a5\u6811\u4e0a $dp$ \u662f $O(N^3)$ \uff0c\u8003\u8651\u6811\u72b6\u6570\u7ec4\u4f18\u5316\u4e00\u4e0b\u6bcf\u5c42\u7684 $dp$\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(N^2\\log N)$\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#define pb push_back\n#define N 6005\n#define MAXN 6000\n#define lowbit(x) x&-x\nusing namespace std;\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nint T,n,L[N],R[N],p[N],de[N],f[N],g[N],h[N],cnt;\nstruct BIT\n{\n\tint c[N];\n\tvoid clear(){memset(c,0,sizeof(c));}\n\tvoid modify(int x,int k){for(;x<=cnt;x+=lowbit(x))c[x]=max(c[x],k);}\n\tint query(int x){int res=0;for(;x;x-=lowbit(x))res=max(res,c[x]);return res;}\n}t;\nvector<int>G[N];\nvector<int>F[N]; \nint belong(int i,int j){return (L[i]>=L[j]&&R[i]<=R[j]);}\nint cmp(int x,int y){return R[x]<R[y];}\n//is i belong to j? \nvoid dfs(int x)\n{\n\tif(g[x])return;\n\tint siz=F[x].size();\n\tfor(int i=0;i<siz;i++)dfs(F[x][i]);\n\tt.clear();\n\tsort(F[x].begin(),F[x].end(),cmp);\n\tint now=0;\n\tfor(int i=0;i<siz;i++)\n\t{\n\t\tnow=max(now,t.query(L[F[x][i]]-1)+g[F[x][i]]);\n\t\tt.modify(R[F[x][i]],t.query(L[F[x][i]]-1)+g[F[x][i]]);\n\t}\n\tg[x]=now+1;\n}\nint main()\n{\n\tT=read();\n\twhile(T--)\n\t{\n\t\tn=read();cnt=0;memset(de,0,sizeof(de));memset(g,0,sizeof(g));memset(f,0,sizeof(f));\n\t\tfor(int i=1;i<=n;i++)L[i]=read(),R[i]=read(),p[++cnt]=L[i],p[++cnt]=R[i],F[i].clear();\n\t\tsort(p+1,p+1+cnt);int tot=unique(p+1,p+1+cnt)-p-1;\n\t\tfor(int i=1;i<=n;i++)L[i]=lower_bound(p+1,p+1+tot,L[i])-p,R[i]=lower_bound(p+1,p+1+tot,R[i])-p;\n\t\tfor(int i=1;i<=n;i++)for(int j=1;j<=n;j++)if(i!=j&&belong(i,j))F[j].pb(i);\n\t\tfor(int i=1;i<=n;i++)if(!g[i])dfs(i);\n\t\tf[0]=0;h[0]=0;\n\t\tfor(int i=1;i<=MAXN;i++)G[i].clear();\n\t\tfor(int i=1;i<=n;i++)G[R[i]].pb(i);\n\t\tfor(int i=1;i<=MAXN;i++)\n\t\t{\n\t\t\tint siz=G[i].size();\n\t\t\tfor(int j=0;j<siz;j++)\n\t\t\t{\n\t\t\t\tint ID=G[i][j];\n\t\t\t\tf[i]=max(f[i],h[L[ID]-1]+g[ID]);\n\t\t\t}\n\t\t\th[i]=max(h[i-1],f[i]);\n\t\t}\n\t\tprintf(\"%d\\n\",h[MAXN]);\n\t}\n}\n\n```",
        "postTime": 1632314110,
        "uid": 179600,
        "name": "shao0320",
        "ccfLevel": 8,
        "title": "CF1399F Yet Another Segments Subset"
    }
]