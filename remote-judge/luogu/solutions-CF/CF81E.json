[
    {
        "content": "[\u4f20\u9001\u95e8](https://codeforces.ml/contest/81/problem/E)\n\n\u53d1\u73b0\u81ea\u5df1\u7684\u89e3\u6cd5\u5e26\u4e2a $\\log$\uff0c\u662f\u6700\u6162\u7684555\n\n\u5316\u7b80\u9898\u610f\uff1a\u7ed9\u5b9a $n$ \u70b9 $n$ \u8fb9\u7684\u65e0\u5411\u56fe\uff08\u4e0d\u4fdd\u8bc1\u8fde\u901a\uff09\uff0c\u6c42\u5176\u6700\u5927\u5339\u914d\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u6700\u5927\u5316\u4e24\u7aef\u70b9\u989c\u8272\u4e0d\u540c\u7684\u5339\u914d\u8fb9\u6570\uff0c\u5e76\u8f93\u51fa\u4e00\u4e2a\u89e3\u3002\n\n\u9996\u5148 $n$ \u70b9 $n-1$ \u8fb9\u7684\u8bdd\u5c31\u662f\u68ee\u6797\u6700\u5927\u5339\u914d\uff0c\u6811\u5f62DP\u505a\u6cd5\u5f88\u5bb9\u6613\u60f3\u5230\uff1a\u8bbe $f(x)$ \u662f\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u7684\u7b54\u6848\uff0c$son(x)$ \u662f $x$ \u7684\u513f\u5b50\u96c6\u5408\uff0c$g(x)=\\sum_{y\\in son(x)}f(y)$\uff0c\u5373 $x$ \u5b50\u6811\u4e0d\u80fd\u4f7f\u7528 $x$ \u7684\u7b54\u6848\u3002\u90a3\u4e48 $f$ \u7684\u8f6c\u79fb\u5f0f\u4e3a\uff1a\n\n$$f(x)=\\max\\{g(x),\\max\\{g(x)-f(y)+1+g(y)\\,\\mid\\,y\\in son(x)\\}\\,\\}$$\n\n\u5355\u72ec\u62ff\u51fa\u6765\u5c31\u662f\u4e2a 1500* \u7684 2C\uff0c\u7136\u800c\u5b83\u662f\u4e00\u4e2a\u5947\u602a\u6bd4\u8d5b\uff08\u5927\u6982\u7b49\u4e8eDiv1\uff09\u7684E\uff0c\u4e0d\u53ef\u80fd\u8fd9\u4e48\u7b80\u5355\u3002\u8003\u8651\u5230\uff0c$n$ \u70b9 $n$ \u8fb9\u5176\u5b9e\u5c31\u662f\u57fa\u73af\u6811\u68ee\u6797+\u666e\u901a\u68ee\u6797\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u5c06\u6811\u4e0a\u89e3\u6cd5\u62d3\u5c55\u5230\u57fa\u73af\u6811\u4e0a\u3002\n\n\u57fa\u73af\u6811\u548c\u6811\u7684\u533a\u522b\uff1a\u6709\u73af\u3002\u6240\u4ee5\u8bb8\u591a\u5173\u4e8e\u57fa\u73af\u6811\u7684\u5957\u8def\u90fd\u662f\u5173\u4e8e\u8fd9\u4e2a\u73af\u7684\uff08\u8981\u4e48\u5220\u73af\u4e0a\u4e00\u8fb9\uff0c\u8981\u4e48\u628a\u73af\u6302\u7740\u7684\u6811\u7b97\u51fa\u6765\u53d8\u6210\u73af\u5f62\u95ee\u9898\uff09\u3002\u8003\u8651\u5220\u6389\u73af\u4e0a\u4e00\u8fb9 $(u,v)$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u65b0\u7684\u6811 $t$\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u5f62DP\u6c42\u89e3\u3002\u4f46\u662f\u53ef\u80fd\u8fd8\u5b58\u5728\u6700\u4f18\u7b54\u6848\u90fd\u5305\u62ec $(u,v)$ \u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u6211\u4eec\u4e0d\u80fd\u5220\u53bb $(u,v)$. \u4f46\u662f\u6ce8\u610f\u5230\uff0c**\u9898\u76ee\u6c42\u7684\u662f\u5339\u914d**\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u9009\u4e86 $(u,v)$\uff0c\u90a3\u4e48 $u$ \u548c\u5176\u5b83\u70b9\u7684\u8fde\u8fb9\u90fd\u4e0d\u4f1a\u4f7f\u7528\u3002\u53c8\u56e0\u4e3a $u$ \u662f\u73af\u4e0a\u4e00\u70b9\uff0c\u6240\u4ee5\u4e00\u5b9a\u8fd8\u5b58\u5728\u53e6\u4e00\u6761\u5728\u73af\u4e0a\u7684\u8fb9 $(u,w)$\uff0c\u627e\u5230\u8fd9\u4e24\u6761\u8fb9\uff0c\u53ef\u4ee5\u4fdd\u8bc1\uff0c\u5220\u53bb $(u,v)$ \u6240\u5f97\u5230\u7684 $t1$ \u548c\u5220\u53bb $(u,w)$ \u6240\u5f97\u5230\u7684 $t2$ \u4e24\u68f5\u6811\u4e2d\u5fc5\u6709\u4e00\u9897\u6811\u7684\u7b54\u6848\u662f\u539f\u57fa\u73af\u6811\u7684\u7b54\u6848\u3002\n\n\u6240\u4ee5\u5927\u81f4\u89e3\u6cd5\u662f\uff1a\u627e\u5230\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u627e\u73af\uff08\u5373\u627e$u,v,w$\uff09\uff0c\u6bd4\u8f83\u5220 $(u,v)$ \u548c\u5220 $(u,w)$ \u7684\u7b54\u6848\uff0c\u786e\u5b9a\u5220\u53bb\u7684\u8fb9\uff0c\u91cd\u65b0\u505a DP \u8bb0\u5f55\u65b9\u6848\u3002\u6700\u540e\u8f93\u51fa\u3002\n\n\u53e6\u5916\uff0c\u672c\u9898\u4e2d\u7b54\u6848\u6709\u4e24\u4e2a\u5c5e\u6027\uff1a\u6570\u91cf\u548c\u4e0d\u540c\u989c\u8272\u6570\u91cf\uff0c\u5efa\u8bae\u4f7f\u7528 pair\uff0c\u5185\u7f6e\u6bd4\u8f83\u7b26\u91cd\u8f7d\u5199\u8d77\u6765\u6bd4\u8f83\u65b9\u4fbf\uff0c\u540c\u65f6\u5efa\u8bae\u91cd\u8f7d\u4e00\u4e0b pair \u7684\u52a0\u51cf\u6cd5\u4fbf\u4e8e DP \u4f7f\u7528\u3002\n\n\u5230\u8fd9\u91cc\u4f60\u53d1\u73b0\u4e86\u8fd9\u4e2a\u505a\u6cd5\u662f $O(n)$ \u7684\u4e3a\u4ec0\u4e48\u6211\u4f1a\u8bf4\u6211\u7684\u89e3\u6cd5\u5e26\u4e2a $\\log$ .\uff08\u672c\u8d28\u4e0a\u8fd9\u4e2a\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u771f\u7684\u662f\u7ebf\u6027\u6ca1\u95ee\u9898\u7684\uff09\u56e0\u4e3a\u5220\u8fb9\u52a0\u8fb9\u975e\u5e38\u9ebb\u70e6\u6240\u4ee5\u6211\u7528\u4e86 set \u53bb\u7ef4\u62a4\u53ef\u8fbe\u6027\uff0c\u5199\u8d77\u6765\u6bd4\u8f83\u65b9\u4fbf\uff0c\u4ee3\u4ef7\u5c31\u662f\u53d8\u6210\u4e86\u6700\u6162\u89e3555.\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(ll i=(a);i<=(b);i++)\n#define per(i,a,b) for(ll i=(a);i>=(b);i--)\n#define lc(x) (x<<1)\n#define rc(x) (lc(x)|1)\n#define lowbit(x) (x&-x)\n#define Max(a,b) (a>b?a:b)\n#define Min(a,b) (a<b?a:b)\n#define next Cry_For_theMoon\n#define il inline\n#define pb(x) push_back(x)\n#define is(x) insert(x)\n#define sit set<int>::iterator\n#define mapit map<int,int>::iterator\n#define pi pair<int,int>\n#define ppi pair<int,pi>\n#define fr first\n#define se second\n#define vit vector<int>::iterator\n#define mp(x,y) make_pair(x,y)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef unsigned int uint;\ntypedef double db;\nusing namespace std;\nconst int MAXN=1e5+10,MAXM=2e5+10;\nint n,u,v,color[MAXN],vis[MAXN],fa[MAXN],depth[MAXN];\nint pre[MAXN];\npi f[MAXN],g[MAXN],ans;\nset<int>e[MAXN];\nvector<pi>sol;\npi operator+(const pi& p1,const pi& p2){return mp(p1.fr+p2.fr,p1.se+p2.se);}\npi operator-(const pi& p1,const pi& p2){return mp(p1.fr-p2.fr,p1.se-p2.se);}\nstruct Dsu{\n\tint fa[MAXN];\n\tpi info[MAXN];\n\tvoid Init(){\n\t\trep(i,1,n)fa[i]=i;\n\t}\n\tint Find(int x){\n\t\tif(fa[x]==x)return x;\n\t\treturn fa[x]=Find(fa[x]);\n\t}\n\tvoid Merge(int x,int y){\n\t\tif(!info[Find(y)].fr)info[Find(y)]=info[Find(x)];\n\t\tfa[Find(x)]=Find(y);\n\t}\n}dsu;\nvoid predfs(int u){\n\tvis[u]=1;\n\tdepth[u]=depth[fa[u]]+1;\n\tfor(sit it=e[u].begin();it!=e[u].end();it++){\n\t\tif(vis[*it])continue;\n\t\tfa[*it]=u;predfs(*it);\n\t}\n}\nvoid clr(int u,int fa){\n\tf[u]=g[u]=mp(0,0);pre[u]=0;\n\tfor(sit it=e[u].begin();it!=e[u].end();it++){\n\t\tif(fa==*it)continue;\n\t\tclr(*it,u);\n\t}\n}\nvoid dfs(int u,int fa){\n\tfor(sit it=e[u].begin();it!=e[u].end();it++){\n\t\tif(fa==*it)continue;\n\t\tdfs(*it,u);\n\t\tg[u]=g[u]+f[*it];\n\t}\n\tf[u]=g[u];\n\tfor(sit it=e[u].begin();it!=e[u].end();it++){\n\t\tif(fa==*it)continue;\n\t\tif(g[u]-f[*it]+g[*it]+mp(1,color[u]!=color[*it]) > f[u]){\n\t\t\tpre[u]=*it;\n\t\t\tf[u]=g[u]-f[*it]+g[*it]+mp(1,color[u]!=color[*it]);\n\t\t}\n\t}\n}\npi dp(int u){\n\tclr(u,u); //\u6e05\u7a7a\u4fe1\u606f\t\n\tdfs(u,u);\n\treturn f[u];\n}\nvoid solve(int u,int fa){\n\tif(pre[u]){\n\t\tsol.pb(mp(u,pre[u]));\n\t\tfor(sit it=e[pre[u]].begin();it!=e[pre[u]].end();it++){\n\t\t\tif(*it == pre[u] || *it==u)continue;\n\t\t\tsolve(*it,pre[u]); \n\t\t}\n\t}\n\tfor(sit it=e[u].begin();it!=e[u].end();it++){\n\t\tif(*it==pre[u] || *it==fa)continue;\n\t\tsolve(*it,u);\n\t}\n}\nint main(){\n\tcin>>n;\n\tdsu.Init();\n\trep(u,1,n){\n\t\tcin>>v>>color[u];\n\t\tif(dsu.Find(u)!=dsu.Find(v)){\n\t\t\tdsu.Merge(u,v);\n\t\t\te[u].is(v),e[v].is(u);\n\t\t}else{\n\t\t\tdsu.info[dsu.Find(u)]=mp(u,v); //(u,v)\u662f\u73af\u4e0a\u4e00\u8fb9 \n\t\t}\n\t}\n\trep(i,1,n){\n\t\tif(vis[i])continue;\n\t\t//\u65b0\u7684\u8fde\u901a\u5757\n\t\tvis[i]=1;predfs(i);\n\t\tpi p=dsu.info[dsu.Find(i)],ret=mp(0,0),tmp=mp(0,0);\n\t\tint u,v,w;\n\t\tif(depth[p.fr]>depth[p.se])u=p.fr,v=fa[p.fr],w=p.se;\n\t\telse u=p.se,v=fa[p.se],w=p.fr;\n\t\t//1.\u5220(u,v)\u8fde(u,w)\n\t\te[u].erase(v),e[v].erase(u);\n\t\te[u].is(w),e[w].is(u);\n\t\tret=dp(i);\n\t\t//2.\u5220(u,w)\u8fde(u,v) \n\t\te[u].erase(w),e[w].erase(u);\n\t\te[u].is(v),e[v].is(u);\n\t\ttmp=dp(i); \n\t\tans=ans+Max(ret,tmp);\n\t\tif(tmp<ret){\n\t\t\te[u].erase(v),e[v].erase(u);\n\t\t\te[u].is(w),e[w].is(u);\n\t\t}\n\t\tdp(i);\n\t\tsolve(i,i);\n\t}\n\tprintf(\"%d %d\\n\",ans.fr,ans.se);\n\tint sz=sol.size();\n\trep(i,0,sz-1){\n\t\tprintf(\"%d %d\\n\",sol[i].fr,sol[i].se);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1616591790,
        "uid": 340632,
        "name": "Cry_For_theMoon",
        "ccfLevel": 8,
        "title": "\u3010CF81E\u3011Pairs"
    },
    {
        "content": "\u559c\u6b22\u7ebf\u6027\u9898\u5f00 $10^5$ \u662f\u5427\u3002\u90a3\u5c31\u522b\u602a\u6211 $O(n\\sqrt n)$ \u8fc7\u53bb\u4e86\u3002\n\n\u9898\u610f\u662f\u6c42\u57fa\u73af\u6811\u68ee\u6797\u6700\u5927\u5339\u914d\uff0c\u540c\u65f6\u6700\u5927\u5316\u5f02\u8272\u5339\u914d\u6570\u91cf\u3002\n\n\u5339\u914d\u5f53\u7136\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u7f51\u7edc\u6d41\uff0c\u5982\u679c\u662f\u6811\u7684\u8bdd\u5c31\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u7ed9\u6811\u9ed1\u767d\u67d3\u8272\u5efa\u4e8c\u5206\u56fe\u5c31\u80fd\u6c42\u51fa\u6700\u5927\u5339\u914d\u3002\u6c42\u51fa\u6700\u5927\u5f02\u8272\u5339\u914d\u6570\u91cf\u4e5f\u662f\u7b80\u5355\u7684\uff0c\u65b9\u6cd5\u662f\u628a\u6700\u5927\u6d41\u6362\u6210\u8d39\u7528\u6d41\uff0c\u5339\u914d\u8fb9\u5982\u679c\u662f\u540c\u8272\u7684\u8fb9\u6743\u662f $1$\uff0c\u5426\u5219\u8fb9\u6743\u662f $0$\uff0c\u7136\u540e\u8dd1\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff0c\u6700\u5927\u5f02\u8272\u5339\u914d\u6570\u91cf\u5c31\u662f\u6d41\u91cf\u51cf\u53bb\u8d39\u7528\u3002\n\n\u73b0\u5728\u57fa\u73af\u6811\u600e\u4e48\u529e\uff1f\u5176\u5b9e\u662f\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u76f4\u63a5\u627e\u4e00\u68f5\u751f\u6210\u6811\uff0c\u7136\u540e\u679a\u4e3e\u552f\u4e00\u7684\u975e\u6811\u8fb9\u662f\u5426\u9009\u62e9\uff0c\u5206\u522b\u8dd1\u4e00\u904d\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n\u57fa\u73af\u6811\u68ee\u6797\u76f4\u63a5\u5bf9\u6bcf\u4e2a\u8054\u901a\u5757\u505a\u57fa\u73af\u6811\u7684\u505a\u6cd5\u5373\u53ef\u3002\n\n\u867d\u7136\u662f\u8d39\u7528\u6d41\uff0c\u4f46\u662f\u7531\u4e8e\u6700\u77ed\u8def\u53ea\u6709 $0$ \u548c $1$ \u4e24\u79cd\uff0c\u76f4\u63a5\u8dd1\u7684\u590d\u6742\u5ea6\u4f9d\u7136\u662f $O(n\\sqrt n)$\uff0c\u521a\u597d\u80fd\u5361\u7740\u65f6\u9650\u8fc7\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<vector>\nusing namespace std;\nint n,m,s,t,tot=1,cnt,bin[100005],id[100005],node[100005],dep[100005],h[100005],cur[100005],ans,cost,ans1,ans2,col[100005],a[100005];\nbool vis[100005];\nvector<int> v[100005],g[100005];\npair<int,int> w[100005];\nvector<pair<int,int> > res;\nstruct edge\n{\n    int nxt,to,weight,val;\n}e[100005<<2];\ninline int read()\n{\n    int x;\n    cin>>x;\n    return x;\n}\ninline int anc(int k)\n{\n    if(!bin[k])\n        return k;\n    return bin[k]=anc(bin[k]);\n}\ninline void link(int x,int y)\n{\n    pair<int,int> val={x,y};\n    x=anc(x);\n    y=anc(y);\n    if(x^y)\n    {\n        g[val.first].emplace_back(val.second);\n        g[val.second].emplace_back(val.first);\n        bin[y]=x;\n        if(w[y].first)\n            w[x]=w[y];\n    }\n    else\n        w[x]=val;\n}\ninline void add(int x,int y,int w,int val)\n{\n    e[++tot]={h[x],y,w,val};\n    h[x]=tot;\n}\ninline void clear()\n{\n    for(int i=0;i<=t;++i)\n        h[i]=dep[i]=cur[i]=vis[i]=0;\n    tot=1;\n    s=t=cnt=ans=cost=0;\n}\ninline bool SPFA()\n{\n    for(int i=0;i<=t;++i)\n    {\n        dep[i]=0x3f3f3f3f;\n        cur[i]=h[i];\n        vis[i]=0;\n    }\n    queue<int> q;\n    q.emplace(s);\n    dep[s]=0;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        vis[k]=0;\n        for(int i=h[k];i;i=e[i].nxt)\n            if(e[i].weight&&dep[e[i].to]>dep[k]+e[i].val)\n            {\n                dep[e[i].to]=dep[k]+e[i].val;\n                if(!vis[e[i].to])\n                {\n                    vis[e[i].to]=1;\n                    q.emplace(e[i].to);\n                }\n            }\n    }\n    return dep[t]^dep[0];\n}\ninline int dfs(int k,int f)\n{\n    if(k==t)\n    {\n        ans+=f;\n        return f;\n    }\n    vis[k]=1;\n    int r=0,used=0;\n    for(int i=cur[k];i;i=e[i].nxt)\n    {\n        cur[k]=i;\n        if((!vis[e[i].to]||e[i].to==t)&&e[i].weight&&dep[e[i].to]==dep[k]+e[i].val)\n            if((r=dfs(e[i].to,min(e[i].weight,f-used))))\n            {\n                cost+=e[i].val*r;\n                e[i].weight-=r;\n                e[i^1].weight+=r;\n                used+=r;\n                if(f==used)\n                    break;\n            }\n    }\n    return used;\n}\ninline void dinic()\n{\n    while(SPFA())\n    {\n        vis[t]=1;\n        while(vis[t])\n        {\n            for(int i=0;i<=t;++i)\n                vis[i]=0;\n            dfs(s,1<<30);\n        }\n    }\n}\ninline void solve(int root)\n{\n    clear();\n    for(int i:v[root])\n        node[id[i]=++cnt]=i;\n    s=cnt+1;\n    t=s+1;\n    for(int i=1;i<=cnt;++i)\n        if(col[node[i]])\n        {\n            add(s,i,1,0);\n            add(i,s,0,0);\n            for(int j:g[node[i]])\n            {\n                int val=a[node[i]]==a[j];\n                add(i,id[j],1,val);\n                add(id[j],i,0,-val);\n            }\n        }\n        else\n        {\n            add(i,t,1,0);\n            add(t,i,0,0);\n        }\n    dinic();\n    vector<pair<int,int> > tmp;\n    pair<int,int> w1={ans,ans-cost};\n    for(int k=1;k<=cnt;++k)\n        if(col[node[k]])\n            for(int i=h[k];i;i=e[i].nxt)\n                if(!e[i].weight&&e[i].to>=1&&e[i].to<=cnt)\n                {\n                    tmp.emplace_back(node[k],node[e[i].to]);\n                    break;\n                }\n    clear();\n    ans=1;\n    cost=a[w[root].first]==a[w[root].second];\n    for(int i:v[root])\n        if(i!=w[root].first&&i!=w[root].second)\n            node[id[i]=++cnt]=i;\n    s=cnt+1;\n    t=s+1;\n    for(int i=1;i<=cnt;++i)\n        if(col[node[i]])\n        {\n            add(s,i,1,0);\n            add(i,s,0,0);\n            for(int j:g[node[i]])\n                if(j!=w[root].first&&j!=w[root].second)\n                {\n                    int val=a[node[i]]==a[j];\n                    add(i,id[j],1,val);\n                    add(id[j],i,0,-val);\n                }\n        }\n        else\n        {\n            add(i,t,1,0);\n            add(t,i,0,0);\n        }\n    dinic();\n    pair<int,int> w2={ans,ans-cost};\n    if(w1<w2)\n    {\n        tmp.clear();\n        tmp.emplace_back(w[root]);\n        for(int k=1;k<=cnt;++k)\n        if(col[node[k]])\n            for(int i=h[k];i;i=e[i].nxt)\n                if(!e[i].weight&&e[i].to>=1&&e[i].to<=cnt)\n                {\n                    tmp.emplace_back(node[k],node[e[i].to]);\n                    break;\n                }\n    }\n    pair<int,int> maxn=max(w1,w2);\n    ans1+=maxn.first;\n    ans2+=maxn.second;\n    for(auto i:tmp)\n        res.emplace_back(i);\n}\ninline void predfs(int k,int f,int tag)\n{\n    col[k]=tag;\n    for(int i:g[k])\n    {\n        if(i==f)\n            continue;\n        predfs(i,k,tag^1);\n    }\n}\nint main()\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    n=read();\n    for(int i=1;i<=n;++i)\n    {\n        int f=read();\n        a[i]=read();\n        link(i,f);\n    }\n    for(int i=1;i<=n;++i)\n        v[anc(i)].emplace_back(i);\n    for(int i=1;i<=n;++i)\n        if(anc(i)==i)\n        {\n            predfs(i,0,0);\n            solve(i);\n        }\n    cout<<ans1<<\" \"<<ans2<<'\\n';\n    for(auto i:res)\n        cout<<i.first<<\" \"<<i.second<<'\\n';\n    cout.flush();\n    return 0;\n}\n```",
        "postTime": 1669630455,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "CF81E Pairs \u9898\u89e3"
    }
]