[
    {
        "content": "#### \u601d\u8def\u5206\u4eab\n\n\u9605\u8bfb\u9898\u610f\u53ef\u77e5\uff0c\u4e00\u4e2a\u201c\u597d\u70b9\u201d\u7684\u6027\u8d28\u5b8c\u7f8e\u7684\u7b26\u5408\u4e86\u6700\u77ed\u8def\u5f84\u6811\u4e2d\u5bf9\u4e8e\u4e00\u4e2a\u7ed3\u70b9\u7684\u5b9a\u4e49\uff0c\u53c8\u56e0\u4e3a\u6811\u662f\u8fb9\u6570\u6700\u5c11\u7684\u8fde\u901a\u56fe\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u4fdd\u7559\u7684\u8fb9\u5efa\u6210\u4e00\u68f5\u6811\u3002\n\n\u5173\u4e8e\u6700\u77ed\u8def\u5f84\u6811\uff0c\u53ef\u4ee5\u53c2\u8003\u6211\u7684\u9898\u89e3[\u9898\u89e3 CF1005F \u3010Berland and the Shortest Paths\u3011](https://www.luogu.com.cn/blog/Manvski/solution-cf1005f)\uff0c\u91cc\u9762\u6709\u8f83\u5b8c\u5907\u7684\u9610\u8ff0\u3002\n\n\u5f97\u5230\u6700\u5c0f\u8def\u5f84\u6811\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u5982\u4f55\u9009\u8fb9\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u5982\u4f55\u9009\u70b9\u3002\n\n\u4f17\u6240\u5468\u77e5\uff0c\u4e00\u4e2a\u6709$m$\u4e2a\u8282\u70b9\u7684\u6811\u6709$m-1$\u6761\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u6700\u77ed\u8def\u5f84\u6811\u4e2d\u9009\u51fa$min(k+1,n)$\u4e2a\u8282\u70b9\u3002\n\n\u53c8\u56e0\u4e3a\u8981\u4fdd\u8bc1\u56fe\u7684\u8fde\u901a\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4ece$1$\u8282\u70b9\u5f00\u59cb$DFS$\u9009\u70b9\u3002\n\n#### \u4ee3\u7801\u5c55\u793a\n\n\u4e0b\u9762\u5c55\u793a\u90e8\u5206\u4ee3\u7801\uff0c\u5176\u4e2d\u6c42\u6700\u77ed\u8def\u5f84\u6811\u90e8\u5206\u524d\u6587\u4e2d\u9898\u89e3\u5df2\u63d0\u5230\uff0c\u4e0d\u5728\u8fd9\u91cc\u5c55\u793a\u3002\u5176\u4f59\u90e8\u5206\u8be6\u89e3\u5728\u6ce8\u91ca\u4e2d\u3002\n\n\uff08\u5f31\u5f31\u7684\u8bf4\u4e00\u53e5\uff0c\u8fd9\u9053\u9898\u8981\u5f00$longlong$\uff09\n\n```cpp\nvoid out(){//\u5982\u679ck>=n-1\u5c31\u76f4\u63a5\u8f93\u51fa\u6700\u77ed\u8def\u5f84\u6811\n\tcout<<n-1<<\"\\n\";\n\tfor(int i=2;i<=n;i++){\n\t\tprintf(\"%lld \",nu[ed[i]]);\n\t}\n}\nvoid work(){\n\tfor(int i=2;i<=n;i++){\n\t\tpd[ed[i]]=1;//ed[i]\u8868\u793a\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5bf9\u5e94\u7684\u8fb9\n\t\t\t\t\t//pd[i]\u4e3a1\u8868\u793a\u7b2ci\u6761\u8fb9\u5728\u6211\u4eec\u6240\u9009\u7684\u6700\u77ed\u8def\u5f84\u6811\u4e0a\n\t}\n}\nvoid DaFaShi(int x){//DFS\u9009\u70b9\n\tfor(int i=bg[x];i;i=ne[i]){\n\t\tint y=to[i];\n\t\tif(s<e&&pd[i]==1){\n\t\t\ts++;\n\t\t\tpd[i]=2;//pd[i]\u4e3a2\u8868\u793a\u9009\u62e9\u8be5\u8fb9\u4fdd\u7559\u3002\n\t\t\tDaFaShi(y);\n\t\t}\n\t}\n}\n```\n",
        "postTime": 1601112049,
        "uid": 90176,
        "name": "xixiup",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1076D \u3010Edge Deletion\u3011"
    },
    {
        "content": "\u6211\u4eec\u53d1\u73b0\u8fd9\u9053\u9898\u8981\u6c42\u5220\u8fb9\u65f6\u5230\u8fbe\u4e00\u4e9b\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u4e0d\u53d8\uff0c\u4e8e\u662f\u60f3\u5230\u53cd\u5411\u64cd\u4f5c\uff1a\u76f4\u63a5\u6b63\u5411\u5f97\u5230\u5e76\u4fdd\u7559 \u5230\u8fbe\u8fd9\u4e9b\u70b9 \u6240\u9700\u7684**\u6700\u77ed\u8def\u4e0a\u7684\u8fb9**\uff0c\u800c\u5269\u4e0b\u7684\u8fb9\u90fd\u53ef\u4ee5\u5220\u53bb\uff0c\u56e0\u4e3a\u5220\u53bb\u540e\u4ecd\u53ef\u4ee5\u901a\u8fc7\u4fdd\u7559\u7684\u8fb9\u7ecf\u8fc7\u6700\u77ed\u8ddd\u79bb\u5230\u8fbe\u8fd9\u4e9b\u70b9\u3002\n\n\u672c\u7bc7\u9898\u89e3\u7684\u4ee3\u7801\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff1a\u53ea\u9700\u8981\u4ece\u5934\u505a\u4e00\u904d djikstra\uff0c\u5728\u8fc7\u7a0b\u4e2d\u8f93\u51fa\u7b54\u6848\u5373\u53ef\uff0c\u800c\u4e0d\u9700\u8981\u5148\u5efa\u7acb[\u6700\u77ed\u8def\u6811](https://baike.baidu.com/item/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E6%A0%91/22787159?fr=aladdin)\uff0c\u518d\u505a\u4e00\u904d\u641c\u7d22\u7b54\u6848\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u5728\u7b97\u6cd5\u66f4\u65b0\u6700\u8fd1\u7684\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u989d\u5916\u8bb0\u5f55\u4e00\u4e2a\u4fe1\u606f\uff1a\u66f4\u65b0\u8fd9\u6b21\u6700\u77ed\u8def\u7684\u524d\u9a71\u8fb9\uff0c\u8fd9\u6837\u5728\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u70b9\u65f6\uff0c\u53ef\u4ee5\u4fbf\u6377\u5730\u8f93\u51fa\u5176\u6700\u77ed\u8def\u6240\u9700\u7684\u65b0\u8fb9\u3002\n\n\u53e6\u5916\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\u6570\u4e3a $n$ \u7684\u8fde\u901a\u56fe\uff0c\u60f3\u4f7f\u5176\u5168\u90e8\u6700\u77ed\u8def\u4fdd\u7559\uff0c\u6700\u591a\u53ea\u9700\u8981\u4fdd\u7559\u4e00\u68f5\u6811\uff0c\u5373\u4fdd\u7559 $n-1$ \u6761\u8fb9\uff0c\u6240\u4ee5 $k$ \u5e94\u4e0e\u5176\u53d6\u8f83\u5c0f\u503c\u3002\n\n\u8be6\u89c1\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int read(){\n\tint ret=0,f=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tif(c=='-') f=-1;\n\t\tc=getchar();\n\t}\n\twhile('0'<=c&&c<='9'){\n\t\tret=(ret<<1)+(ret<<3)+(int)(c-'0');\n\t\tc=getchar();\n\t}\n\treturn ret*f;\n}\n\ninline void write(int x){\n\tif(x>=10) write(x/10);\n\tputchar('0'+x%10);\n}\n\nconst int NR=3e5+5;\nlong long dis[NR];\nstruct Edge{\n\tint to,w,id;//id\u4e3a\u8fd9\u6761\u8fb9\u7684\u7f16\u53f7\n};\nvector<Edge>g[NR];\nstruct Node{\n\tint to,id;//id\u4e3a\u201c\u524d\u9a71\u8fb9\u201d\u7684\u7f16\u53f7\n\tlong long w;\n\tbool operator < (const Node &B)const{\n\t\treturn w>B.w;\n\t}\n};\n\nint k;\nbool vis[NR];\ninline void dijkstra(){\n\tmemset(dis,0x3f,sizeof(dis));\n\tpriority_queue<Node>q;\n\tdis[1]=0;\n\tq.push(Node{1,0,0ll});\n\twhile(!q.empty()){\n\t\tint x=q.top().to,ret=q.top().id;\n\t\tq.pop();\n\t\tif(vis[x]) continue;\n\t\tvis[x]=true;\n\t\tif(ret>0&&k>0){\n\t\t\tk--;\n\t\t\twrite(ret);\n\t\t\tputchar(' ');\n\t\t}\n\t\tif(k==0) return;//\u53ef\u4fdd\u7559\u7684\u8fb9\u6570\u5df2\u7ecf\u7528\u5b8c\n\t\tfor(unsigned int i=0;i<g[x].size();i++){\n\t\t\tint y=g[x][i].to,w=g[x][i].w,id=g[x][i].id;\n\t\t\tif(dis[y]>dis[x]+1ll*w){\n\t\t\t\tdis[y]=dis[x]+1ll*w;\n\t\t\t\tq.push(Node{y,id,dis[y]});\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tint n,m;\n\tn=read();m=read();k=read();\n\tk=min(k,n-1);\n\twrite(k);\n\tputchar('\\n');\n\tfor(int i=1,u,v,w;i<=m;i++){\n\t\tu=read();v=read();w=read();\n\t\tg[u].push_back(Edge{v,w,i});\n\t\tg[v].push_back(Edge{u,w,i});\n\t}\n\tdijkstra();\n\treturn 0;\n}\n```\n",
        "postTime": 1636523896,
        "uid": 164580,
        "name": "YGB_XU",
        "ccfLevel": 6,
        "title": "\u3010CF1076D Edge Deletion\u3011\u9898\u89e3"
    },
    {
        "content": "### Preface\n\n\u6700\u77ed\u8def\u5f84\u6811 SPT \u7ec3\u4e60\u9898\uff0c\u96be\u5ea6\u76f8\u5f53\u4e8e\u6a21\u677f\u3002\n\n### Solution\n\n\u8bfb\u9898\u53d1\u73b0\u6709\u5220\u8fb9\u540e\u6700\u77ed\u8def\u4e0d\u53d8\u7684\u6027\u8d28\uff0c\u6697\u793a\u6211\u4eec\u6c42 SPT\uff0c\u4e8e\u662f\u6211\u4eec\u628a\u8fd9\u4e2a SPT \u5efa\u51fa\u6765\u3002\n\nSPT \u4e0a\u6bcf\u4e2a\u70b9\u5230\u8282\u70b9 $1$ \u90fd\u662f\u6700\u77ed\u8def\u5f84\uff0c\u7ecf\u8fc7\u7684\u8fb9\u90fd\u662f\u5bf9\u6700\u77ed\u8def\u6709\u8d21\u732e\u7684\uff0c\u5269\u4e0b\u7684\u8fb9\u90fd\u53ef\u4ee5\u5220\u3002\u56e0\u6b64 SPT \u4e0a\u7684\u8fb9\u4fbf\u662f\u6700\u4f18\u65b9\u6848\u3002\n\n\u540c\u65f6\uff0c\u4ece\u8282\u70b9 $1$ \u51fa\u53d1\uff0c\u5bf9\u8fd9\u4e2a SPT \u904d\u5386 $\\min\\{k,n-1\\}$ \u6761\u8fb9\uff0c\u8bb0\u5f55\u8fb9\u7684\u7f16\u53f7\u8f93\u51fa\u5373\u53ef\u3002\u8fd9\u6837\u4e5f\u80fd\u4fdd\u8bc1\u56fe\u7684\u8fde\u901a\u3002\n\n### Code\n\n```cpp\n// Problem: CF1076D Edge Deletion\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/CF1076D\n// Memory Limit: 250 MB\n// Time Limit: 2500 ms\n// Author: Hexarhy\n//\n// Powered by CP Editor (https://cpeditor.org)\n\ntypedef long long ll;//\u5f00 ll \ntypedef const int cint;\ncint MAXN=3e5+5;\nint n,m,k,sum;\nstruct node\n{\n\tint to;ll val;int id;\n\tbool operator<(const node& a)const\n\t{\n\t\treturn val>a.val;\n\t}\n};\nvector<node> edge[MAXN];\nvector<int> ans;\nstruct Edge\n{\n\tint u,v;ll w;\n}e[MAXN];\nll dis[MAXN];\nint pre[MAXN];\nbool visit[MAXN];\n\nvoid dijkstra(void)\n{\n\tpriority_queue<node> q;\n\tfor(int i=1;i<=n;i++)\tdis[i]=LLONG_MAX;\n\tdis[1]=0;\n\tq.emplace(node{1,0,0});\n\twhile(!q.empty())\n\t{\n\t\tcint u=q.top().to;q.pop();\n\t\tif(visit[u])\tcontinue;\n\t\tvisit[u]=true;\n\t\tfor(const auto& it:edge[u])\n\t\t{\n\t\t\tcint v=it.to,w=it.val,id=it.id;\n\t\t\tif(dis[v]>=dis[u]+w)\n\t\t\t{\n\t\t\t\tif(dis[v]>dis[u]+w || e[pre[v]].w>w)\tpre[v]=id;//\u4e60\u60ef\u4e86\u6c42\u6700\u5c0f\u6700\u77ed\u8def\u5f84\u6811 MSPT\n\t\t\t\tif(dis[v]>dis[u]+w)\n\t\t\t\t{\n\t\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\t\tq.emplace(node{v,dis[v],0});\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid dfs(cint cur,cint fa)\n{\n\tif(sum>=k)\treturn;\n\tvisit[cur]=true;\n\tfor(const auto& it:edge[cur])\n\t{\n\t\tcint v=it.to,id=it.id;\n\t\tif(visit[v])\tcontinue;\n\t\tif(pre[v]==id)\n\t\t{\n\t\t\tans.emplace_back(id);\n\t\t\t++sum;\n\t\t\tdfs(v,cur);\n\t\t\tif(sum>=k)\treturn;//\u6ce8\u610f\u56de\u6eaf\u65f6\u8981\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u8fbe\u5230 k\n\t\t}\n\t}\n}\n\nint main()\n{\n\tread(n,m,k);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v;ll w;read(u,v,w);\n\t\te[i]=Edge{u,v,w};\n\t\tedge[u].emplace_back(node{v,w,i});\n\t\tedge[v].emplace_back(node{u,w,i});\n\t}\n\tdijkstra();\n\tmemset(visit,false,sizeof(visit));\n\tdfs(1,0);\n\tcout<<min(n-1,k)<<endl;\n\tfor(const auto& Ans:ans)\tcout<<Ans<<' ';\n\treturn 0;\n}\n```",
        "postTime": 1621001210,
        "uid": 80049,
        "name": "Hexarhy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1076D \u3010Edge Deletion\u3011"
    },
    {
        "content": "# SPT \u7ec3\u4e60\u9898\n\n\u9996\u5148\u6211\u4eec\u770b\u4e00\u4e0b\u9898\u610f\uff0c\u8981\u6c42\u6211\u4eec\u5220\u6389\u4e00\u4e9b\u8fb9\uff0c\u67d0\u4e9b\u70b9\u4ecd\u6ee1\u8db3 **1 \u53f7\u8282\u70b9\u5230\u5b83\u7684\u6700\u77ed\u8def\u957f\u5ea6**\u4ecd\u7136\u7b49\u4e8e**\u539f\u56fe\u6700\u77ed\u8def\u957f\u5ea6**\u7684\u8282\u70b9\uff0c\u8fd9\u8ba9\u6211\u4eec\u8054\u60f3\u5230\u4e86 SPT \u7684\u6027\u8d28\uff1aSPT \u4e0a\u6839\u7ed3\u70b9\u5230\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\u7b49\u4e8e\u539f\u56fe\u4e2d\u6e90\u70b9\u5230\u8be5\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u5982\u679c\u4e0d\u6e05\u695a SPT \u7684\u8bdd\u53ef\u4ee5\u770b\u4e00\u4e0b\u6211\u7684[\u8fd9\u7bc7\u535a\u5ba2](https://www.luogu.com.cn/blog/RuntimeErrror/solution-cf545e)\u3002\n\n\u7531\u4e8e SPT \u53ea\u9700\u8981 $n-1$ \u6761\u8fb9\uff0c\u6211\u4eec\u5220\u8fb9\u53ea\u9700\u8981\u7559\u4e0b $\\min(k,n-1)$ \u6761\u8fb9\u5c31\u884c\u3002Dijkstra \u505a\u5b8c\u540e dfs \u5224\u65ad\u662f\u5426\u4e3a SPT \u4e0a\u7684\u8fb9\u5e76\u8f93\u51fa\u5c31\u884c\u3002\u8bb0\u5f97\u8003\u8651 $k=0$ \u7684\u60c5\u51b5\u3002\n\n## $Code:$\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<queue>\nusing namespace std;\n\nconst int N=3e5+10,M=N<<1;\ntypedef long long ll;\n\nint n,m,k,cnt;\nint h[N],e[M],ne[M],idx;\nll w[M],dis[N];\nint pre[N];bool vis[N];\nstruct node{\n\tint to;ll w;\n\tinline bool operator <(const node& a)const{\n\t\treturn w>a.w;\n\t}\n};\npriority_queue<node>q;\n\ninline void add(int a,int b,ll c){\n\te[++idx]=b;ne[idx]=h[a];w[idx]=c;h[a]=idx;\n}\n\nvoid dij(int s){\n\tmemset(dis,0x7f,sizeof dis);\n\tdis[s]=0;q.push((node){s,0});\n\twhile(!q.empty()){\n\t\tint u=q.top().to;q.pop();\n\t\tif(vis[u])continue;\n\t\tvis[u]=true;\n\t\tfor(int i=h[u];i;i=ne[i]){\n\t\t\tint v=e[i];\n\t\t\tif(dis[v]>=dis[u]+w[i]){\n\t\t\t\tdis[v]=dis[u]+w[i];\n\t\t\t\tq.push((node){v,dis[v]});\n\t\t\t\tpre[v]=i;\n\t\t\t}\n\t\t}\n\t}\n}\nvoid dfs(int u){\n\tfor(int i=h[u];i;i=ne[i]){\n\t\tint v=e[i];\n\t\tif(i==pre[v]){\n\t\t\t++cnt;\n\t\t\tif(cnt>k||cnt==n)exit(0);\n\t\t\tprintf(\"%d \",i+1>>1);\n\t\t\tdfs(v);\n\t\t}\n\t}\n}\n\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=1;i<=m;++i){\n\t\tint a,b;ll c;scanf(\"%d%d%lld\",&a,&b,&c);\n\t\tadd(a,b,c);add(b,a,c);\n\t}\n\tdij(1);\n\tprintf(\"%d\\n\",k>n-1?n-1:k);\n\tdfs(1);\n\treturn 0;\n}\n```\n",
        "postTime": 1623579764,
        "uid": 339846,
        "name": "RuntimeErr",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1076D Edge Deletion"
    },
    {
        "content": "# CF1076D Edge Deletion\uff08\u6700\u77ed\u8def\u5f84\u6811\uff09\n\n# \u524d\u8a00\n\n\u6700\u8fd1\u5728\u5237\u6700\u77ed\u8def\u5f84\u6811\u3002\n\n\u5148\u7ed9\u5927\u5bb6\u63a8\u8350\u51e0\u9053\u9898\uff1a\n\n[CF545E Paths and Trees](https://www.luogu.com.cn/problem/CF545E)\n\n[CF1005F Berland and the Shortest Paths](https://www.luogu.com.cn/problem/CF1005F)\n\n\u90fd\u662f\u6700\u77ed\u8def\u5f84\u6811\u7684\u9898\u76ee\u3002\n\n~~\uff08\u5176\u5b9e\u4e2a\u4eba\u89c9\u5f97\u53ef\u4ee5\u5f53\u505a\u4e09\u500d\u7ecf\u9a8c\u6765\u505a\uff09~~\n\n## \u524d\u7f6e\u77e5\u8bc6\uff1a\u6700\u77ed\u8def\u5f84\u6811\uff08SPT\uff09\n\n\u5173\u4e8e\u6700\u77ed\u8def\u6811\u7684\u8bb2\u89e3\uff0c\u53ef\u4ee5\u770b\u770b\u6211\u7684[\u8fd9\u4e00\u7bc7\u9898\u89e3](https://www.luogu.com.cn/blog/LawrenceSivan/cf545e-paths-and-trees-zui-duan-lu-jing-shu-post)\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\u3002\n\n\u8fd9\u91cc\u4ec5\u5e2e\u52a9\u5927\u5bb6\u590d\u4e60\u4e00\u4e0b\u6700\u77ed\u8def\u6811\u7684\u5b9a\u4e49\uff1a\n\nSPT\uff0c\u5c31\u662f\u4ece\u4e00\u5f20\u8fde\u901a\u56fe\u4e2d\uff0c\u6709\u6811\u6ee1\u8db3\u4ece\u6839\u8282\u70b9\u5230\u4efb\u610f\u70b9\u7684\u8def\u5f84\u90fd\u4e3a\u539f\u56fe\u4e2d\u6839\u5230\u4efb\u610f\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u6811\u3002\n\n## \u9898\u610f\u53ca\u601d\u8def\uff1a\n\n>\u7ed9\u4e00\u4e2a $n$ \u4e2a\u70b9,$m$ \u6761\u8fb9\u7684\u65e0\u5411\u7b80\u5355\u5e26\u6743\u8fde\u901a\u56fe, \u8981\u6c42\u5220\u8fb9\u81f3\u6700\u591a\u5269\u4f59 $k$ \u6761\u8fb9.\n\n>\u5b9a\u4e49\"\u597d\u70b9\"\u662f\u6307\u5220\u8fb9\u540e, $1$ \u53f7\u8282\u70b9\u5230\u5b83\u7684\u6700\u77ed\u8def\u957f\u5ea6\u4ecd\u7136\u7b49\u4e8e\u539f\u56fe\u6700\u77ed\u8def\u957f\u5ea6\u7684\u8282\u70b9.\n\n>\u6700\u5927\u5316\u5220\u8fb9\u540e\u7684\u597d\u70b9\u4e2a\u6570\u3002\n\n\u9898\u76ee\u8981\u6c42\u6211\u4eec\u5220\u9664\u8282\u70b9\u4ee5\u540e\u6700\u77ed\u8def\u957f\u5ea6\u4e0d\u53d8\u3002\n\n\u6839\u636e\u6700\u77ed\u8def\u6811\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0d\u5728\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u7684\u8fb9\u88ab\u5220\u9664\u5bf9\u6700\u77ed\u8def\u662f\u4e0d\u4f1a\u6709\u5f71\u54cd\u7684\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u60f3\u5230\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u7559\u7684\u5c31\u662f\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u7684\u8fb9\u3002\n\n\u5982\u679c\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u6570\u5c0f\u4e8e\u7b49\u4e8e $k$\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u628a\u6700\u77ed\u8def\u6811\u4e0a\u7684\u8fb9\u5168\u90e8\u4fdd\u7559\uff0c\u5426\u5219\u6211\u4eec\u5728\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u9009\u62e9 $k$ \u6761\u8fb9\u7559\u4e0b\u5373\u53ef\u3002\n\n\u7531\u4e8e\u9700\u8981\u4fdd\u8bc1\u5220\u6389\u4ee5\u540e\u56fe\u662f\u8054\u901a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u8282\u70b9 $1$ \u5f00\u59cb\u904d\u5386\uff0c\u627e\u5230 $k$ \u6761\u8fb9\u7559\u4e0b\u5373\u53ef\u3002\n\n```cpp\n#define P pair <long long,int>\n#define mp(x,y) make_pair(x,y)\n\ninline void Dijkstra(int s){//\u6c42\u51fa\u6700\u77ed\u8def\u6811\n\tpriority_queue <P,vector<P>,greater<P> > q;\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[s]=0;\n\tq.push(mp(dis[s],s));\n\twhile(!q.empty()){\n\t\tint x=q.top().second;q.pop();\n\t\tif(vis[x])continue;\n\t\tvis[x]=true;\n\t\tfor(re int i=head[x];i;i=nxt[i]){\n\t\t\tint v=to[i],pos=id[i];\n\t\t\tif(dis[v]>dis[x]+w[i]){\n\t\t\t\tdis[v]=dis[x]+w[i];\n\t\t\t\tpre[v]=pos;\n\t\t\t\tq.push(mp(dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n} \n\nint ans[maxn],h,tot;\n\nvoid dfs(int u){//\u904d\u5386\u627ek\u4e2a\u8fb9\n\tif(tot>=k)return;\n\tvis[u]=true;\n\tfor(re int i=head[u];i;i=nxt[i]){\n\t\tint v=to[i],pos=id[i];\n\t\tif(vis[v])continue;\n\t\tif(dis[v]==dis[u]+w[i]){\n\t\t\tans[++h]=pos;\n\t\t\ttot++;\n\t\t\tdfs(v);\n\t\t\tif(tot>=k)return;//\u56de\u6eaf\u7684\u65f6\u5019\u4e5f\u8981\u5224\u65ad\uff0c\u8981\u4e0d\u7136\u4f1awa\u7684\n\t\t}\n\t}\n}\n```\n\n## \u7ec6\u8282\u76f8\u5173\uff1a\n\n- \u5f00 longlong\n\n- \u8f93\u51fa\u7684\u65f6\u5019\u53d8\u91cf\u7f16\u53f7\u95ee\u9898\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u5177\u4f53\u770b[\u8fd9\u91cc](https://www.luogu.com.cn/blog/LawrenceSivan/cf545e-paths-and-trees-zui-duan-lu-jing-shu-post)\n\n## \u540e\u8bb0\n\n\u8fd9\u9898\u5176\u5b9e\u53ea\u662f\u5f88\u57fa\u7840\u7684\u6700\u77ed\u8def\u5f84\u6811\u7684\u9898\u76ee\uff0c\u5e76\u6ca1\u6709\u4e00\u4e9b\u66f4\u6df1\u5165\u7684\u4e1c\u897f\u3002\n\n\u5982\u679c\u771f\u7684\u60f3\u8981\u597d\u597d\u7ec3\u4e60\u6700\u77ed\u8def\u5f84\u6811\uff0c\u8bf7\u4e00\u5b9a\u8981\u505a\u4e0a\u9762\u5217\u51fa\u7684\u90a3\u4e24\u9053\u9898\u76ee\u3002\n",
        "postTime": 1623412041,
        "uid": 375208,
        "name": "LawrenceSivan",
        "ccfLevel": 0,
        "title": "CF1076D Edge Deletion\uff08\u6700\u77ed\u8def\u5f84\u6811\uff09"
    },
    {
        "content": "\u8fd9\u9898\u76ee\u86ee\u641e\u5fc3\u6001\u7684\u3002\u3002\u867d\u7136\u662f\u4e00\u9053\u84dd\u9898\u4f46\u505a\u6cd5\u975e\u5e38\u7b80\u5355\uff0c\u4e3b\u8981\u662f\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u8ba4\u8bc6\u5230\u4e00\u4e9b\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u6027\u8d28\u3002\n\n## \u9898\u76ee\u5206\u6790\n\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a dijkstra \u7b97\u6cd5\u7684\u6027\u8d28\u3002\u5982\u679c\u6211\u4eec\u5728\u66f4\u65b0\u6bcf\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u7684\u540c\u65f6\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u70b9\u7684\u524d\u9a71\u2014\u2014\u5373\u4ece\u8d77\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u4e0a\uff0c\u8fd9\u4e2a\u70b9\u7684\u524d\u4e00\u4e2a\u70b9\uff0c\u5e76\u4e14\u5c06\u6bcf\u4e2a\u70b9\u548c\u5b83\u7684\u524d\u9a71\u8fde\u8fb9\uff0c\u90a3\u4e48\u8fde\u51fa\u6765\u7684\u65b0\u56fe\u4f1a\u662f\u4e00\u4e2a\u6811\u3002\n\n\u9664\u4e86\u8d77\u70b9\u5916\uff0c\u6bcf\u4e00\u4e2a\u70b9\u53ea\u6709\u4e00\u4e2a\u524d\u9a71\uff1b\u8d77\u70b9\u6ca1\u6709\u524d\u9a71\uff0c\u6240\u4ee5\u65b0\u56fe\u786e\u5b9e\u662f\u4e00\u4e2a\u6811\u3002\u6700\u77ed\u8def\u4e2d\u8fd8\u6709\u4e00\u4e9b\u7c7b\u4f3c\u7684\u6027\u8d28\uff0c\u4f8b\u5982\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\u5230\u53e6\u4e00\u4e2a\u70b9\u7684\u6240\u6709\u6700\u77ed\u8def\u5f84\u7684\u5e76\u96c6\u662f\u4e00\u4e2a DAG\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u53bb\u505a[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P2149)\u3002\n\n\u56de\u5230\u8fd9\u9053\u9898\u76ee\u4e2d\u3002\u9898\u76ee\u8981\u6c42\u5220\u9664\u4e00\u4e9b\u8fb9\u76f4\u5230\u5269\u4f59\u7684\u8fb9\u7684\u6570\u91cf\u5c11\u4e8e $K$\uff0c\u6211\u4eec\u4e0d\u59a8\u53cd\u8fc7\u6765\u8003\u8651\uff0c\u5373\u52a0\u5165 $K$ \u540e\u4f7f\u5f97\u597d\u70b9\u4e2a\u6570\u6700\u591a\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u52a0\u8fb9\u7684\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u4ece\u8d77\u70b9\u9010\u6b65\u6269\u5f20\u7684\u8fc7\u7a0b\uff08\u52a0\u8fb9\u987a\u5e8f\u662f\u65e0\u6240\u8c13\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u597d\u70b9\u4e00\u5b9a\u548c\u8d77\u70b9\u76f8\u8fde\u63a5\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u6837\u8ba4\u4e3a\uff09\u3002\u56e0\u6b64\u6bcf\u6b21\u52a0\u4e00\u4e2a\u8fb9\uff0c\u589e\u52a0\u7684\u597d\u70b9\u7684\u4e2a\u6570\u81f3\u591a\u662f $1$\u3002\n\n\u6211\u4eec\u5229\u7528\u524d\u9762\u63d0\u5230\u7684\u6027\u8d28\uff0c\u8dd1\u4e00\u904d dijkstra \u5e76\u628a\u90a3\u68f5\u6811\u5efa\u51fa\u6765\u3002\u90a3\u4e48\u53ea\u8981\u52a0\u5165\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u662f\u5728\u90a3\u4e2a\u6811\u4e0a\u7684\u8fb9\uff0c\u5728\u597d\u70b9\u4e2a\u6570\u8fbe\u5230 $N$ \u4e4b\u524d\uff0c\u6bcf\u52a0\u5165\u4e00\u6761\u8fb9\u90fd\u80fd\u589e\u52a0\u4e00\u4e2a\u597d\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\u8fd9\u79cd\u52a0\u8fb9\u65b9\u6cd5\u8fbe\u5230\u4e86\u7406\u8bba\u4e0a\u9650\uff0c\u6240\u4ee5\u8fd9\u662f\u6700\u4f18\u7684\u3002\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u6ca1\u5565\u96be\u7684\uff0c\u6ce8\u610f\u5728 $K>N-1$ \u7684\u65f6\u5019\u4e5f\u53ea\u9700\u8981\u52a0\u5165 $N-1$ \u6761\u8fb9\uff0c\u518d\u6ce8\u610f\u4e00\u4e0b\u9898\u76ee\u7684\u6570\u636e\u8303\u56f4\u5c31\u53ef\u4ee5\u4e86\u3002\n\n## \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ntypedef pair<LL,int> pli;\nconst int MAXN=300050;\nint N,M,K,fa[MAXN],id[MAXN];\n//fa\u8868\u793a\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\uff0cid\u8868\u793a\u901a\u5f80\u8fd9\u4e2a\u524d\u9a71\u7684\u8fb9\u7684\u7f16\u53f7 \nint h[MAXN],to[MAXN<<1],nxt[MAXN<<1],d[MAXN<<1],tot;\nint h1[MAXN],to1[MAXN],nxt1[MAXN],tot1,ans[MAXN],cnt;\nbool vis[MAXN];\nLL dist[MAXN];\ninline void add(int u,int v,int w){\n\tto[++tot]=v,nxt[tot]=h[u],d[tot]=w,h[u]=tot;\n}\ninline void add1(int u,int v){\n\tto1[++tot1]=v,nxt1[tot1]=h1[u],h1[u]=tot1;\n}\n//\u6ce8\u610f\u8fd9\u4e2a\u56fe\u662f\u65e0\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u63d2\u5165\u4e86\u4e24\u6b21\ninline int getid(int x){\n\treturn (x-1)/2+1;\n}\nvoid dij(){\n\tpriority_queue<pli,vector<pli>,greater<pli> > pq;\n\tpq.push(make_pair(0,1));\n\tmemset(dist,0x3f,sizeof(dist));\n\tdist[1]=0;\n\twhile(!pq.empty()){\n\t\tpli temp=pq.top();pq.pop();\n\t\tif(vis[temp.second]) continue;\n\t\tvis[temp.second]=1;\n\t\tfor(int i=h[temp.second];i;i=nxt[i]){\n\t\t\tif(dist[to[i]]>dist[temp.second]+d[i]){\n\t\t\t\tdist[to[i]]=dist[temp.second]+d[i];pq.push(make_pair(dist[to[i]],to[i]));\n\t\t\t\tfa[to[i]]=temp.second,id[to[i]]=i;\n\t\t\t}\n\t\t}\n\t}\n}\nvoid dfs(int x){\n\tif(id[x]) ans[++cnt]=id[x];\n\tfor(int i=h1[x];i;i=nxt1[i]){\n\t\tif(to1[i]==fa[x]) continue;\n\t\tdfs(to1[i]);\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d%d\",&N,&M,&K);\n\tfor(int i=1;i<=M;++i){\n\t\tint u,v,w;scanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd(u,v,w),add(v,u,w);\n\t}\n\tdij();\n\tfor(int i=1;i<=N;++i) add1(fa[i],i);\n\tdfs(1);\n\tK=min(K,N-1);\n\tprintf(\"%d\\n\",K);\n\tfor(int i=1;i<=K;++i) printf(\"%d%c\",getid(ans[i]),\" \\n\"[i==K]);\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1635423299,
        "uid": 356499,
        "name": "CPPfive",
        "ccfLevel": 7,
        "title": "CF1076D Edge Deletion"
    },
    {
        "content": "\u9898\u610f\u5df2\u7ecf\u8bf4\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u6211\u5c31\u4e0d\u518d\u8d58\u8ff0\uff0c\u6839\u636e\u9898\u610f\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u6700\u77ed\u8def\u5f84\u6811\uff0c\u56e0\u4e3a\u6700\u77ed\u8def\u5f84\u6811\u6027\u8d28\u5373\u4e3a\u6811\u4e0a\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u4e3a\u539f\u56fe\u7684\u6700\u77ed\u8def\uff0c\u8981\u4f7f\u597d\u70b9\u4e2a\u6570\u6700\u5927\u5c31\u8981\u5c3d\u91cf\u591a\u5730\u4fdd\u5b58\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u7684\u8fb9\uff0c\u800c\u6700\u77ed\u8def\u5f84\u6811\u5171\u6709 $n-1$ \u6761\u8fb9\uff0c\u6240\u4ee5\u9664\u4e86\u8fd9 $n-1$ \u6761\u8fb9\u4ee5\u5916\u7684\u8fb9\u90fd\u53ef\u4ee5\u76f4\u63a5\u5220\u53bb\uff0c\u5982\u679c\u8fd8\u4e0d\u591f\u7684\u8bdd\uff0c\u5c31\u4ece\u6700\u77ed\u8def\u5f84\u6811\u91cc\u9762\u5220\u8fb9\u5373\u53ef\u3002\n\n\u81f3\u4e8e\u6700\u77ed\u8def\u5f84\u6811\u7684\u6c42\u6cd5\u53ef\u4ee5\u770b\u4ee3\u7801\u5185\u6ce8\u91ca\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\n#define int long long\nusing namespace std;\nconst int N = 1e6 + 5;\nint head[N], ver[N], nxt[N], link[N], cnt;\nvoid add(int x,int y,int z)\n{\n\tnxt[++cnt] = head[x];\n\thead[x] = cnt;\n\tver[cnt] = y;\n\tlink[cnt] = z;\n}\nint tot;\nint pre[N];\ntypedef pair<int, int> PII;\npriority_queue<PII,vector<PII>,greater<PII> > q;\nbool aim[N];\nint dis[N];\nvoid djslm()\n{\n\tmemset(dis, 0x7f, sizeof dis);\n\tdis[1] = 0;\n\tq.push({0, 1});\n\twhile(!q.empty())\n\t{\n\t\tPII temp = q.top();\n\t\tq.pop();\n\t\tint lea = temp.first;\n\t\tint now = temp.second;\n\t\tif(aim[now])\n\t\t\tcontinue;\n\t\taim[now] = 1;\n\t\tfor (int i = head[now]; i;i=nxt[i])\n\t\t{\n\t\t\tint v0 = ver[i];\n\t\t\tif(dis[v0]>=lea+link[i])\n\t\t\t{\n\t\t\t\tdis[v0] = lea + link[i];\n\t\t\t\tq.push({dis[v0], v0});\n\t\t\t\tpre[v0] = i;//\u5728Dijkstra\u7684\u65f6\u5019\u8bb0\u5f55\u5f53\u524d\u70b9\u7684\u6700\u77ed\u8def\u662f\u4ece\u54ea\u4e2a\u70b9\u8f6c\u79fb\u8fc7\u6765\u7684\uff0c\u636e\u6b64\u4fbf\u53ef\u627e\u51fa\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u7684\u8fb9\n\t\t\t}\n\t\t}\n\t}\n}\nint n, m, k;\nvoid dfs(int now)\n{\n\tfor (int i = head[now]; i;i=nxt[i])\n\t{\n\t\tint v0 = ver[i];\n\t\tif(pre[v0]==i)//\u5f53\u524d\u8fb9\u4e3a\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u7684\u8fb9\n\t\t{\n\t\t\ttot++;\n\t\t\tif(tot>k||tot==n)//\u4fdd\u7559\u591f\u4e86\u6216\u662f\u4e0d\u80fd\u518d\u4fdd\u7559\u4e86\u5c31\u9000\u51fa\n\t\t\t{\n\t\t\t\tputs(\"\");\n\t\t\t\texit(0);\n\t\t\t}\n\t\t\tprintf(\"%lld \", i + 1 >> 1);//\u7531\u4e8e\u662f\u5efa\u53cc\u5411\u8fb9\uff0c\u6240\u4ee5\u9700\u8981\u5e8f\u53f7\u9664\u4ee5\u4e8c\n\t\t\tdfs(v0);\n\t\t}\n\t}\n}\nsigned main()\n{\n\tscanf(\"%lld%lld%lld\", &n, &m, &k);\n\tfor (int i = 1; i <= m;i++)\n\t{\n\t\tint a, b, c;\n\t\tscanf(\"%lld%lld%lld\", &a, &b, &c);\n\t\tadd(a, b, c);\n\t\tadd(b, a, c);\n\t}\n\tdjslm();\n\tprintf(\"%lld\\n\", min(n - 1, k));\n\tdfs(1);\n\tputs(\"\");\n}\n```\n",
        "postTime": 1629900277,
        "uid": 278481,
        "name": "Link_Space",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 OF CF1076D"
    },
    {
        "content": "**Change Log:\u4ee3\u7801\u90e8\u5206\u589e\u52a0\u4e86 dijkstra \u7684\u4e00\u4e2a\u5c0f\u4f18\u5316\uff08\u4e0d\u7136\u4f1a TLE #64\uff09\u4ee5\u53ca\u7279\u5224 $k=0$ \u7684\u60c5\u51b5**\n\n### \u6b63\u9898\uff08Upd on 2020/9/20\uff09\n\n~~\u8fc7\u4e86\u4e00\u4e2a\u6708\u53d1\u73b0\u88ab hack \u4e86\uff0c\u56de\u6765\u8865\u9898\u89e3~~\n\n\u9996\u5148\u6211\u4eec\u6784\u9020\u4ee5 $1$ \u4e3a\u6839\u7684\u6700\u77ed\u8def\u6811\uff0c\u5bf9\u4e8e\u975e\u6811\u8fb9\uff0c\u7531\u4e8e\u4e0d\u5f71\u54cd\u7b54\u6848\uff0c\u53ef\u4ee5\u968f\u4fbf\u5220\u3002\n\n\u5bf9\u4e8e\u6811\u8fb9\uff0c\u6211\u4eec\u6bcf\u6b21\u627e\u5230\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9 $x$ \u5e76\u5220\u9664 $E(fa_x,x)$\uff0c\u8fd9\u6837\u6bcf\u6b21\u53ea\u4f1a\u4f7f\u5f97\u70b9 $x$ \u6210\u4e3a\u4e0d\u662f\u201c\u597d\u7684\u201d\u8282\u70b9\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u6837\u4e00\u5b9a\u6700\u4f18\u3002\u7528 dfs \u5b9e\u73b0\u5373\u53ef\u3002\n\n\u8bb0\u5f97\u7279\u5224 $k=0$ \u7684\u60c5\u51b5\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\Theta(m\\log n+n\\log n)$ \n\n\uff08\u8f93\u51fa\u6807\u53f7\u4f5c\u8005\u7528\u4e86 map \u5b9e\u73b0\uff09\n\nCode:\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <cstring>\n#include <map>\n#include <cstdlib>\nusing namespace std ;\ntypedef long long ll ;\ntypedef pair <ll , int> P ;\nconst int MAXN = 3e5 + 10 ;\nint n , m , k , fr[MAXN] , to[MAXN] , c[MAXN] ;\nll dis[MAXN] ;\nbool vis[MAXN] ;\nmap <pair <int , int> , int> a ;\nstruct edge {\n\tint v , w ;\n\tedge (int vv = 0 , int ww = 0) {v = vv ; w = ww ;}\n} ;\nint min (int a , int b) {\n\treturn a < b ? a : b ;\n}\nvector <edge> G[MAXN] ;\nvoid dijkstra () {\n\tpriority_queue <P , vector <P> , greater <P> > q ;\n\tmemset (dis , 0x3f , sizeof (dis)) ;\n\tdis[1] = 0 ; q.push (make_pair (0 , 1)) ;\n\twhile (!q.empty ()) {\n\t\tP p = q.top () ; \n\t\tint x = q.top ().second ;\n\t\tq.pop () ;\n\t\tif (p.first > dis[x]) continue ;\n\t\tfor (int i = 0 ; i < G[x].size () ; i++) {\n\t\t\tint v = G[x][i].v , w = G[x][i].w ;\n\t\t\tif (dis[x] + w < dis[v]) {\n\t\t\t\tdis[v] = dis[x] + w ;\n\t\t\t\tq.push (make_pair (dis[v] , v)) ;\n\t\t\t}\n\t\t}\n\t}\n}\nvoid dfs (int x) {\n\tif (!k) exit (0) ;\n\tvis[x] = 1 ;\n\tfor (int i = 0 ; i < G[x].size () ; i++) {\n\t\tint v = G[x][i].v , w = G[x][i].w ;\n\t\tif (dis[x] + w != dis[v] || vis[v]) continue ; \n\t\tprintf (\"%d \" , a[make_pair (x , v)]) ;\n\t\tk-- ;\n\t\tif (!k) exit (0) ;\n\t\tdfs (v) ;\n\t}\t\n}\nint main () {\n\tscanf (\"%d %d %d\" , &n , &m , &k) ;\n\tfor (int i = 1 ; i <= m ; i++) {\n\t\tscanf (\"%d %d %d\" , &fr[i] , &to[i] , &c[i]) ;\n\t\tG[fr[i]].push_back (edge (to[i] , c[i])) ;\n\t\tG[to[i]].push_back (edge (fr[i] , c[i])) ; \n\t\ta[make_pair (fr[i] , to[i])] = a[make_pair (to[i] , fr[i])] = i ;\n\t}\n\tdijkstra () ; \n\tprintf (\"%d\\n\" , min (n - 1 , k)) ;\n\tdfs (1) ;\n\treturn 0 ;\n}\n```",
        "postTime": 1596805297,
        "uid": 122641,
        "name": "GIFBMP",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1076D \u3010Edge Deletion\u3011"
    },
    {
        "content": "\n\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a N \u4e2a\u70b9 M \u6761\u8fb9\u7684\u65e0\u5411\u7b80\u5355\u8054\u901a\u56fe\uff0c\u7559\u4e0b\u6700\u591a K \u6761\u8fb9\uff0c\u6c42\u5269\u4e0b\u7684\u70b9\u91cc\u9762\u4ece 1 \u53f7\u9876\u70b9\u5230\u5176\u4f59\u5404\u70b9\u6700\u77ed\u8def\u5927\u5c0f\u7b49\u4e8e\u539f\u5148\u6700\u77ed\u8def\u5927\u5c0f\u7684\u70b9\u6700\u591a\u600e\u4e48\u6784\u9020\u3002\n\n\u8fd9\u4e2a\u9898\u8d2a\u5fc3+dijkstra\n\n\u6211\u4eec\u53ef\u4ee5\u5728\u7b2c\u4e00\u6b21\u8dd1 dij \u65f6\u76f4\u63a5\u91c7\u7528\u8d2a\u5fc3\u7b56\u7565\uff0c\u5373\uff1a\u82e5\u5f53\u524d\u7b54\u6848\u96c6\u5408\u7684\u5927\u5c0f\u5c0f\u4e8e K \u4e14\u4f18\u5148\u961f\u5217\u975e\u7a7a\uff0c\u5219\u7ee7\u7eed\u4f18\u5148\u961f\u5217\u904d\u5386\uff0c\u6bcf\u6b21\u628a\u4e00\u6761\u8fb9\u52a0\u5165\u5230\u7b54\u6848\u96c6\u5408\u4e2d\u3002\n\n\u56e0\u4e3a\u662f\u5728\u6c42\u89e3\u6700\u77ed\u8def\u8fc7\u7a0b\u4e2d\u5411\u7b54\u6848\u96c6\u5408\u4e2d\u52a0\u8fb9\uff0c\u53ef\u77e5\u8fd9\u5c31\u662f\u4e00\u79cd\u6700\u4f18\u7b56\u7565\u3002\n\n```cpp\n#define B cout << \"BreakPoint\" << endl;\n#define O(x) cout << #x << \" \" << x << endl;\n#define O_(x) cout << #x << \" \" << x << \" \";\n#define Msz(x) cout << \"Sizeof \" << #x << \" \" << sizeof(x)/1024/1024 << \" MB\" << endl;\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<set>\n#define LL long long\nconst int inf = 1e9 + 9;\nconst int N = 5e5 + 5;\nusing namespace std;\ninline int read() {\n\tint s = 0,w = 1;\n\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9') {\n\t\tif(ch == '-')\n\t\t\tw = -1;\n\t\tch = getchar();\n\t}\n\twhile(ch >= '0' && ch <= '9') {\n\t\ts = s * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn s * w;\n}\ntypedef pair<LL,int> pii;\nstruct node{\n    int nxt,to,w;\n}e[N<<1];\nint head[N],n,m,k,pre[N],vis[N],tot = 1;\ninline void add(int x,int y,int w){\n    e[++tot] = node{head[x],y,w},head[x] = tot;\n}\nLL dis[N];\nvector<int> ans;\npriority_queue<pii> q;\nvoid init(){\n    n = read(),m = read(),k = read();\n    for(int i = 1;i <= m;i++){\n        int x = read(),y = read(),w = read();\n        add(x,y,w),add(y,x,w);\n    }\n}\nvoid dij(){\n    for(int i = 2;i <= n;i++) dis[i] = 1e15;\n    q.push(make_pair(0,1));\n    while(!q.empty() && ans.size() < k){\n        int u = q.top().second;\n\t\tq.pop();\n        if(vis[u]) continue;\n        if(u ^ 1) ans.push_back(pre[u] / 2);\n        vis[u] = 1;\n        for(int i = head[u];i;i = e[i].nxt){\n            int v = e[i].to,w = e[i].w;\n            if(dis[v] > dis[u] + w){\n                dis[v] = dis[u] + w,pre[v] = i;\n                q.push(make_pair(-dis[v],v));\n            }\n        }\n    }\n}\nvoid solve(){\n    dij();\n    k = ans.size();\n    printf(\"%d\\n\",k);\n    for(int i = 0;i < k;i++) printf(\"%d \",ans[i]);\n}\nint main(){\n    init();\n    solve();\n    return 0;\n}\n```\n\n",
        "postTime": 1583243632,
        "uid": 160811,
        "name": "\u4f18\u79c0\u7684\u6e23\u6e23\u79b9",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1076D \u3010Edge Deletion\u3011"
    },
    {
        "content": "### ~~\u9898\u76ee\u5e76\u4e0d\u96be~~\n### \u65e2\u7136\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u5c3d\u91cf\u591a\u7684\u70b9\u7684\u6700\u77ed\u8def\u4e0e\u539f\u56fe\u7684\u6700\u77ed\u8def\u4e00\u81f4\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u5b9a\u662f\u5e0c\u671b\u9009\u4e2d\u7684$k$\u6761\u8fb9\u6bcf\u6761\u8fb9\u90fd\u80fd\u4ea7\u751f\u8d21\u732e\uff0c\u4f7f\u5f97\u4e00\u4e2a\u65b0\u7684\u70b9\u6210\u4e3a\u597d\u70b9\u3002\n### \u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u539f\u56fe\u4e2d\u7684\u4e00\u68f5\u6700\u77ed\u8def\u6811\uff0c\u9009\u62e9\u6700\u77ed\u8def\u6811\u4e0a\u7684\u8fb9\uff0c\u5e76\u4e14\u4fdd\u8bc1\u9009\u62e9\u7684\u8fb9\u8fde\u63a5\u7684\u70b9\u80fd\u591f\u6784\u6210\u4e00\u4e2a\u5305\u542b$1$\u53f7\u70b9\u7684\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u7b54\u6848\u5c31\u662f\u6700\u4f18\u7684\uff0c\u56e0\u4e3a\u539f\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\u5728\u65b0\u56fe\u4e0a\u6700\u591a\u53ea\u80fd\u8d21\u732e$1$\u7684\u7b54\u6848\uff0c\u800c\u8fd9\u79cd\u65b9\u6848\u4e0b\u9009\u62e9\u7684\u6240\u6709\u8fb9\u90fd\u8d21\u732e\u4e86$1$\u7684\u7b54\u6848\u3002\n```cpp\n#include<bits/stdc++.h>\n//This code is written by Itst\nusing namespace std;\n\ninline int read(){\n    int a = 0;\n    bool f = 0;\n    char c = getchar();\n    while(c != EOF && !isdigit(c)){\n        if(c == '-')\n            f = 1;\n        c = getchar();\n    }\n    while(c != EOF && isdigit(c)){\n        a = (a << 3) + (a << 1) + (c ^ '0');\n        c = getchar();\n    }\n    return f ? -a : a;\n}\n\nconst int MAXN = 300010;\nstruct Edge{\n    int end , upEd , w;\n}Ed[MAXN << 1];\nint head[MAXN] , N , M , k , cntEd = 1;\nbool vis[MAXN];\nlong long minDis[MAXN];\npriority_queue < pair < long long , int > > q;\n\ninline void addEd(int a , int b , int c){\n    Ed[++cntEd].end = b;\n    Ed[cntEd].upEd = head[a];\n    Ed[cntEd].w = c;\n    head[a] = cntEd;\n}\n\nvoid Dijk(){\n    memset(minDis , 0x7f , sizeof(minDis));\n    minDis[1] = 0;\n    q.push(make_pair(0 , 1));\n    while(!q.empty()){\n        pair < long long , int > t = q.top();\n        q.pop();\n        if(-t.first > minDis[t.second])\n            continue;\n        for(int i = head[t.second] ; i ; i = Ed[i].upEd)\n            if(minDis[Ed[i].end] > minDis[t.second] + Ed[i].w){\n                minDis[Ed[i].end] = minDis[t.second] + Ed[i].w;\n                q.push(make_pair(-minDis[Ed[i].end] , Ed[i].end));\n            }\n    }\n}\n\nvoid dfs(int now){\n    vis[now] = 1;\n    for(int i = head[now] ; i ; i = Ed[i].upEd)\n        if(!vis[Ed[i].end] && minDis[Ed[i].end] == minDis[now] + Ed[i].w){\n            printf(\"%d \" , (i >> 1));\n            if(!--k)\n                exit(0);\n            dfs(Ed[i].end);\n        }\n}\n\nint main(){\n#ifndef ONLINE_JUDGE\n    freopen(\"1076D.in\" , \"r\" , stdin);\n    //freopen(\"1076D.out\" , \"w\" , stdout);\n#endif\n    N = read();\n    M = read();\n    k = read();\n    printf(\"%d\\n\" , min(N - 1 , k));\n    if(!k)\n        return 0;\n    for(int i = 1 ; i <= M ; i++){\n        int a = read() , b = read() , c = read();\n        addEd(a , b , c);\n        addEd(b , a , c);\n    }\n    Dijk();\n    dfs(1);\n    return 0;\n}\n\n```",
        "postTime": 1542973846,
        "uid": 96296,
        "name": "Itst",
        "ccfLevel": 0,
        "title": "CF1076D Edge Deletion"
    }
]