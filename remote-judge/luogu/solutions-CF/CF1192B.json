[
    {
        "content": "\u8fd9\u9898\u6709\u4e00\u4e2a\u5f88\u5999\u7684\u89e3\u6cd5\uff0c\u4e0d\u9700\u8981\u6811\u5256\u3001LCT\uff0c\u662f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4**\u5168dfs\u5e8f**\u3002\n\n\u9996\u5148\u8003\u8651$u,v$\u4e24\u8282\u70b9\u7684\u8ddd\u79bb\u3002\n\n$$dis(u,v)=dep[u]+dep[v]-2dep[lca(u,v)]$$\n\n\u8fd9\u5f88\u96be\u76f4\u63a5\u7ef4\u62a4\uff0c\u4e3b\u8981\u7684\u95ee\u9898\u662f\u6211\u4eec\u6ca1\u6cd5\u76f4\u63a5\u77e5\u9053$lca(u,v)$\u3002\u4e0b\u9762\u6211\u4eec\u5f15\u5165\u5168dfs\u5e8f\u3002\n\ndfs\u5e8f\u662f\uff1a\u6211\u4eecdfs\u904d\u5386\u4e00\u68f5\u6811\uff0c\u6bcf\u6b21\u8bbf\u95ee\u5230\u4e00\u4e2a\u8282\u70b9\u5c31\u628a\u5b83\u8bb0\u5230\u5e8f\u5217\u672b\u7aef\uff0c\u8fd9\u6837\u5f62\u6210\u7684\u5e8f\u5217\u5c31\u662fdfs\u5e8f\u3002\n\n\u800c\u5168dfs\u5e8f\u5219\u662f\uff1a\u4ecd\u7136dfs\u904d\u5386\u4e00\u68f5\u6811\uff0c\u6bcf\u6b21\u8bbf\u95ee\u5230\u4e00\u4e2a\u8282\u70b9\u5c31\u628a\u5b83\u8bb0\u5230\u5e8f\u5217\u672b\u7aef\uff08\u4e0b\u9762\u79f0\u8fd9\u65f6\u5e8f\u5217\u7684\u957f\u5ea6\u4e3a\u8be5\u8282\u70b9\u7684$Tin$\uff0c\u5e8f\u5217\u8bb0\u4e3a$dfn$\uff09\uff0c\u540c\u65f6\uff0c\u6bcf\u5f53\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u7684\u8bbf\u95ee\u6b63\u5f0f\u7ed3\u675f\uff0c\u6211\u4eec\u4e5f\u628a\u5b83\u7684\u7236\u4eb2\u8bb0\u5230\u5e8f\u5217\u672b\u7aef\u3002\n\n\u8fd9\u6709\u4ec0\u4e48\u5e2e\u52a9\u5462\uff1f\u6211\u4eec\u8003\u8651\u8282\u70b9$u,v$\uff08\u4e0d\u59a8\u8bbe$Tin[u]<Tin[v]$\uff09\u548c\u4ed6\u4eec\u7684$lca$\u3002\n\n- \u663e\u7136\u5730\uff0c$u,v$\u5fc5\u7136\u5206\u5c5e$lca$\u7684\u4e24\u4e2a\u5b50\u6811\uff0c\u4e8e\u662f\u5728\u8bbf\u95ee$v$\u4e4b\u524d\uff0c$u$\u6240\u5728\u5b50\u6811\u7684\u8bbf\u95ee\u4e00\u5b9a\u5df2\u7ecf\u7ed3\u675f\uff0c\u6240\u4ee5$lca$\u5fc5\u7136\u51fa\u73b0\u5728\u4e86$Tin[u]$\u5230$Tin[v]$\u4e4b\u95f4\u3002\n\n- \u663e\u7136\uff0c\u8bbf\u95ee$v$\u65f6\uff0c\u5bf9$lca$\u5b50\u6811\u7684\u8bbf\u95ee\u4e0d\u53ef\u80fd\u7ed3\u675f\uff0c\u4e8e\u662f$Tin[u]$\u5230$Tin[v]$\u4e4b\u95f4\u4e0d\u53ef\u80fd\u4f1a\u6709\u6bd4$lca$\u66f4\u6d45\u7684\u8282\u70b9\u3002\n\n\u4e0a\u9762\u7684\u4e24\u4e2a\u7ed3\u8bba\u7ffb\u8bd1\u4e00\u4e0b\u5c31\u662f\uff1a$lca$\u7684\u6df1\u5ea6\u662f$Tin[u]$\u5230$Tin[v]$\u8fd9\u4e00\u6bb5\u533a\u95f4\u91cc\u6240\u6709\u8282\u70b9\u7684\u6df1\u5ea6\u7684\u4e0b\u754c\uff0c\u800c\u4e14\u5b83\u4e00\u5b9a\u5b58\u5728\u3002\u6240\u4ee5\u5b83\u5c31\u662f\u8fd9\u6bb5\u533a\u95f4\u91cc\u7684\u6df1\u5ea6\u6700\u5c0f\u503c\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5728\u5168dfs\u5e8f\u4e0a\u7ef4\u62a4\u4e00\u4e2a$dep$\u7684\u6700\u5c0f\u503c\u3002\n\n\u90a3\u4e48\u5177\u4f53\u5982\u4f55\u5f97\u51fa\u7b54\u6848\uff1f\u6211\u4eec\u9700\u8981\u7ef4\u62a4\uff1a\n\n- \u533a\u95f4\u6df1\u5ea6\u6700\u5927\u503c\uff0c\u79f0\u4f5c``W``\uff08\u4f5c\u4e3a$dep[l]$\u548c$dep[r]$\uff09\n\n- \u533a\u95f4\u6df1\u5ea6\u6700\u5c0f\u503c\uff0c\u79f0\u4f5c``M``\uff08\u4f5c\u4e3a$dep[lca]$\uff09\n\n- $dep[l]-2dep[lca]$\uff0c\u79f0\u4f5c``LM``\u3002\u901a\u8fc7\u5de6\u53f3\u533a\u95f4\u7684``LM``\uff0c\u5de6\u533a\u95f4\u7684``L``\u548c\u53f3\u533a\u95f4\u7684``M``\u5f97\u5230\u3002\n\n- ``MR``\uff0c``LMR``\u7c7b\u4f3c\uff08\u4ece\u540d\u5b57\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e24\u4e2a\u662f\u4ec0\u4e48\u4e1c\u897f\u4e86\uff09\u3002\n\n``LMR``\u5c31\u662f\u6211\u4eec\u8981\u7684\u7b54\u6848\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\n\nint N,Q;ll KK;\nint lnk[100005];\nint pre[200005],tgt[200005],cnt;ll val[200005];\nint pos[100005];ll Val[100005];\nvoid add_E(int u,int v,ll c){\n\tpre[++cnt]=lnk[u],tgt[cnt]=v,val[cnt]=c,lnk[u]=cnt;\n} \n\nll dep[100005];\nint Tin[100005],Tout[100005];\nint dfn[200005],idx;\nvoid dfs(int x,int f){\n\tdfn[++idx]=x;Tin[x]=idx;\n\tfor(int e=lnk[x];e;e=pre[e])if(tgt[e]!=f)\n\t\tpos[(e+1)>>1]=tgt[e],dep[tgt[e]]=dep[x]+val[e],dfs(tgt[e],x),dfn[++idx]=x;\n\tTout[x]=idx;\n}\n\nll W[800005],M[800005],LM[800005],MR[800005],LMR[800005],Lzy[800005];\nvoid push_up(int x){\n\tW[x]=max(W[x<<1],W[x<<1|1]);\n\tM[x]=max(M[x<<1],M[x<<1|1]);\n\tLM[x]=max(max(LM[x<<1],LM[x<<1|1]),W[x<<1]+M[x<<1|1]);\n\tMR[x]=max(max(MR[x<<1],MR[x<<1|1]),M[x<<1]+W[x<<1|1]);\n\tLMR[x]=max(max(LMR[x<<1],LMR[x<<1|1]),max(LM[x<<1]+W[x<<1|1],W[x<<1]+MR[x<<1|1]));\n}\nvoid Add(int x,int l,int r,ll K){\n\tW[x]+=K;\n\tM[x]-=2*K;\n\tLM[x]-=K;MR[x]-=K;\n\tLzy[x]+=K;\n}\nvoid push_down(int x,int l,int r){\n\tint mid=(l+r)>>1;\n\tAdd(x<<1,l,mid,Lzy[x]);Add(x<<1|1,mid+1,r,Lzy[x]);\n\tLzy[x]=0;\n}\nvoid Build(int x,int l,int r){\n\tif(l==r){\n\t\tW[x]=dep[dfn[l]];M[x]=-2*dep[dfn[l]];\n\t\tLM[x]=MR[x]=-dep[dfn[l]];LMR[x]=0;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tBuild(x<<1,l,mid);Build(x<<1|1,mid+1,r);\n\tpush_up(x);\n}\nvoid Update(int x,int l,int r,int L,int R,ll K){\n\tif(L<=l&&r<=R){Add(x,l,r,K);return;}\n\tint mid=(l+r)>>1;\n\tpush_down(x,l,r);\n\tif(L<=mid) Update(x<<1,l,mid,L,R,K);\n\tif(R>mid) Update(x<<1|1,mid+1,r,L,R,K);\n\tpush_up(x);\n}\n\nll lstans;\n\nint main(){\n\tscanf(\"%d%d%lld\",&N,&Q,&KK);\n\tfor(int i=1;i<N;i++){\n\t\tint u,v;scanf(\"%d%d%lld\",&u,&v,&Val[i]);\n\t\tadd_E(u,v,Val[i]);add_E(v,u,Val[i]);\n\t}\n\tdfs(1,0);\n\tBuild(1,1,idx);\n\twhile(Q--){\n\t\tint d;ll K;scanf(\"%d%lld\",&d,&K);\n\t\td=(d+lstans%(N-1))%(N-1)+1;K=(K+lstans%KK)%KK;\n\t\tUpdate(1,1,idx,Tin[pos[d]],Tout[pos[d]],K-Val[d]);\n\t\tVal[d]=K;\n\t\tprintf(\"%lld\\n\",lstans=LMR[1]);\n\t}\n}\n```\n\n",
        "postTime": 1570692584,
        "uid": 58567,
        "name": "x\u4e49x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1192B \u3010Dynamic Diameter\u3011"
    },
    {
        "content": "## CF1192B \u9898\u89e3\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/CF1192B)  \n\u8ddf\u7740 [duyi](https://dfsafdsgaksgh.blog.luogu.org/solution-cf1192b) dalao\u7684\u601d\u8def, \u8f7b\u800c\u6613\u4e3e(qian nan wan xian)\u8c03\u51fa\u4e86\u672c\u9898\u3002  \n\u65e2\u7136@ [duyi](https://www.luogu.com.cn/user/100674)\u6ca1\u653e\u4ee3\u7801, \u90a3\u6211\u5c31~~\u6765\u4e00\u53d1~~\u5427\u3002  \n(\u7ba1\u7406\u5927\u5927\u8f9b\u82e6\u4e86)\n\n2022.8.12 \u4fee\u6b63\u9519\u522b\u5b57(\u611f\u8c22 @ MarchKid_Joe)\n\n### \u9898\u610f\u7b80\u8ff0\n\u6709\u4e00\u4e2a $n$ \u4e2a\u70b9\u7684\u5e26\u6743\u65e0\u5411\u6811\uff0c $q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u4fee\u6539\u4e00\u6761\u8fb9\u7684\u6743\u503c\uff0c\u8981\u6c42\u5728\u6bcf\u6b21\u4fee\u6539\u540e\uff0c\u8f93\u51fa\u6811\u7684\u76f4\u5f84\u5927\u5c0f\uff0c\u5f3a\u5236\u5728\u7ebf\u3002\n\n### \u9898\u76ee\u5206\u6790\n1. \u5bf9\u4e8e\u4e24\u68f5\u6811\u5408\u5e76\u540e\u65b0\u6811\u7684\u76f4\u5f84, \u5176\u4e24\u7aef\u70b9\u4e00\u5b9a\u51fa\u81ea\u4e24\u6811\u76f4\u5f84\u56db\u4e2a\u7aef\u70b9\u4e2d, \u6839\u636e\u8fd9\u4e00\u6761\u6027\u8d28\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u539f\u6811, \u81ea\u4e0b\u5411\u4e0a\u5408\u5e76\u8282\u70b9\u5c31\u76f8\u5f53\u4e8e\u5408\u5e76\u5b83\u6240\u4ee3\u8868\u7684\u4e24\u68f5\u5b50\u6811\u3002\n\n2. \u6bcf\u6b21\u5408\u5e76\u7684\u65f6\u5019, \u9700\u8981\u6211\u4eec\u8ba1\u7b97\u6811\u4e0a\u4e24\u70b9\u95f4\u8ddd\u79bb, \u8bb0\u8be5\u8282\u70b9\u5230\u6839\u7684\u8ddd\u79bb\u4e3a $\\operatorname{d}(x)$ , \u5219 \u8282\u70b9 $x$ \u5230 $y$ \u7684\u8ddd\u79bb\u4e3a $\\operatorname{d}(x)+\\operatorname{d}(y)-2 \\times \\operatorname{d}(\\operatorname{lca}(x, y))$ \u3002\u5728\u56db\u4e2a\u70b9\u7684\u516d\u7ec4\u642d\u914d\u4e2d, \u9009\u62e9\u76f4\u5f84\u6700\u5927\u7684\u4e00\u7ec4\u4f5c\u4e3a\u7b54\u6848\u5411\u4e0a\u4f20\u9012\u3002\n\n3. \u6c42\u6811\u4e0a\u5230\u6839\u7684\u8ddd\u79bb\u5229\u7528\u7ebf\u6bb5\u6811(\u8fd9\u65f6\u5019\u662f\u533a\u522b\u4e8e\u7b2c\u4e00\u6761\u7684\u53e6\u4e00\u68f5)\u7528\u4e24\u79cd\u9009\u62e9, \u5c06\u8fb9\u6743\u5316\u4e3a\u70b9\u6743\u540e, \u4e00\u662f\u5355\u70b9\u4fee\u6539\u52a0\u4e0a\u533a\u95f4\u67e5\u8be2, \u4e8c\u662f\u533a\u95f4\u4fee\u6539\u52a0\u4e0a\u5355\u70b9\u67e5\u8be2(\u8fb9\u6743\u6539\u53d8\u5f71\u54cd\u7684\u53ea\u6709\u5b50\u6811, \u800c\u5b50\u6811\u5728\u6811\u5256\u540e\u8282\u70b9\u7f16\u53f7\u8fde\u7eed)\u3002\u800c\u8fd9\u91cc\u6211\u4eec\u91c7\u53d6\u540e\u8005\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u4e0d\u7528\u524d\u8005...~~\u8840\u7684\u6559\u8bad~~\u3002\n\n### \u601d\u8def\u5b9e\u73b0\n1. \u6211\u4eec\u5bf9\u6c42\u51fa\u539f\u6811\u7684 dfs \u5e8f, \u540c\u65f6\u8bb0\u5f55\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5728 dfs \u5e8f\u4e2d\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u7f16\u53f7, \u8bb0\u4e3a $\\operatorname{beg}(x)$ \u548c $\\operatorname{end}(x)$ ,\u5bf9 dfs \u5e8f\u5efa\u7acb\u7b2c\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002 \u8be5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6811\u7684\u76f4\u5f84\u3002\n2. \u5bf9\u539f\u6811\u91cd\u94fe\u5256\u5206,\u5efa\u7b2c\u4e8c\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u957f\u3002\u5f53\u7136\u8fd8\u8981\u6c42 LCA  \u3002\n3. \u53ef\u4ee5\u4f7f\u7528 unordered_map \u8bb0\u5f55\u4e0b\u6c42\u8fc7\u7684 LCA, \u7528 map \u4f1a\u591a\u4e00\u4e2a $\\log$ \u7684\u590d\u6742\u5ea6\u3002\n\n### Code\n\u4ee3\u7801\u4e2d\u51fd\u6570\u540d\u5e26\u6709 \"_1\" \u7684\u4e3a\u7ef4\u62a4\u76f4\u5f84\u7684\u7ebf\u6bb5\u6811, \u5e26\u6709 \"_2\" \u7684\u4e3a\u7ef4\u62a4\u5230\u6839\u8ddd\u79bb\u7684\u7ebf\u6bb5\u6811\u3002  \n\n\u6811\u5256\u5c31\u4e0d\u9700\u8981\u89e3\u91ca\u4e86\u5427(\n```cpp\nauto dfs1(int x, int fa) -> void\n{\n    f[x] = fa; siz[x] = 1;\n    dep[x] = dep[fa]+1;\n    int maxson = 0, y;\n    for(int i = head[x]; i; i = a[i].next)\n    {\n        y = a[i].to; if(y == fa) continue;\n        dfs1(y, x); siz[x] += siz[y];\n        if(siz[y] > siz[maxson]) maxson = y;\n    }\n    son[x] = maxson;\n}\nauto dfs2(int x, int tp) -> void\n{\n    id[x] = ++tim; top[x] = tp;\n    if(son[x]) \n    {\n        dfs2(son[x], tp); int y;\n        for(int i = head[x]; i; i = a[i].next)\n        {\n            y = a[i].to;\n            if(y == f[x] or y == son[x]) continue;\n            dfs2(y, y);\n        }\n    }\n}\nauto LCA(int x, int y) -> int\n{\n    while(top[x] != top[y])\n    {\n        if(dep[top[x]] < dep[top[y]]) y = f[top[y]]; \n        else x = f[top[x]];\n    }\n    if(id[x] > id[y]) return y;\n    return x;\n}\n```\n\u6c42 dfs \u5e8f\n```cpp\nauto dfsx(int x) -> void\n{\n    d[++ct] = x;    //dfs\u5e8f\u6570\u7ec4\n    beg[x] = ct;    //\u5b50\u6811\u8d77\u70b9\n    for(int i = head[x], y; i; i = a[i].next)\n    {\n        y = a[i].to; if(y == f[x]) continue;\n        dfsx(y);\n    }\n    ::end[x] = ct;  //\u5b50\u6811\u7ec8\u70b9(\u53d8\u91cf\u540dend\u6709\u51b2\u7a81,\u6240\u4ee5\u52a0\u4e86\u4f5c\u7528\u57df)\n}\n```\n\u7b2c\u4e00\u68f5\u7ebf\u6bb5\u6811\n```cpp\nauto build_1(int l, int r, int i) -> void\n{\n    dr[i].l = l;\n    dr[i].r = r;\n    if(l == r) return (void)(dr[i].u = dr[i].v = d[l]);\n    int mid = (l+r)>>1;\n    build_1(l, mid, ls(i));\n    build_1(mid+1, r, rs(i));\n    pushup_1(i);\n}\nauto change_1(int l, int r, int i) -> void\n{\n    if(dr[i].l > r or dr[i].r < l) return ;\n    if(dr[i].l >= l and dr[i].r <= r) return ;\n    change_1(l, r, ls(i));\n    change_1(l, r, rs(i));\n    pushup_1(i);\n}\nauto pushup_1(int i) -> void\n{\n    lu = dr[ls(i)].u, lv = dr[ls(i)].v;\n    ru = dr[rs(i)].u, rv = dr[rs(i)].v;\n\n    /*  \u5de6\u53f3\u5b50\u6811\u7684\u8f83\u4f18\u89e3  */\n    if(dr[ls(i)].val >= dr[rs(i)].val) \n        dr[i].u = dr[ls(i)].u, \n        dr[i].v = dr[ls(i)].v, \n        dr[i].val = dr[ls(i)].val; \n    else \n        dr[i].u = dr[rs(i)].u, \n        dr[i].v = dr[rs(i)].v, \n        dr[i].val = dr[rs(i)].val; \n\n    /*  \u679a\u4e3e\u5269\u4e0b\u56db\u79cd\u60c5\u51b5  */\n    U = lu, V = ru; \n    len = calc(U, V);\n    if(ru != rv) //\u91cd\u590d\u7684\u4e0d\u8ba1\u7b97\u4e86\n    {   \n        len2 = calc(lu, rv); \n        if(len2 > len) U = lu, V = rv, len = len2;\n    }\n\n    if(lu != lv) //\u91cd\u590d\u7684\u4e0d\u8ba1\u7b97\u4e86\n    {\n        len2 = calc(lv, ru); \n        if(len2 > len) U = lv, V = ru, len = len2;\n        if(ru != rv) //\u91cd\u590d\u7684\u4e0d\u8ba1\u7b97\u4e86 \n        {\n            len2 = calc(lv, rv); \n            if(len2 > len) U = lv, V = rv, len = len2;\n        }\n    }\n\n    if(len > dr[i].val) \n        dr[i].val = len, dr[i].u = U, dr[i].v = V;\n}\nauto calc(int x, int y) -> long\n{\n    int lca;\n    /* \u5c06 x,y \u538b\u5165\u4e00\u4e2a\u6570, \u5c31\u4e0d\u7528 pair \u4e86 */\n    if( !mp.count(((long)(x)<<32ll)+y) ) mp[((long)(x)<<32ll)+y] = lca = LCA(x, y);\n    else lca = mp[((long)(x)<<32ll)+y];\n    return query_2(id[x], 1)+query_2(id[y], 1)-2*query_2(id[lca], 1);\n}\n```\n\u7b2c\u4e8c\u68f5\u7ebf\u6bb5\u6811\n```cpp\nauto build_2(int l, int r, int i) -> void\n{\n    tr[i].l = l;\n    tr[i].r = r;\n    if(l == r) return ;\n    int mid = (l+r)>>1;\n    build_2(l, mid, ls(i));\n    build_2(mid+1, r, rs(i));\n}\nauto add_2(int l, int r, long k, int i) -> void\n{\n    if(tr[i].l > r or tr[i].r < l) return ;\n    if(tr[i].l >= l and tr[i].r <= r) \n    {\n        tr[i].lz += k;\n        tr[i].val += k*(tr[i].r-tr[i].l+1);\n        return ;\n    }\n    pushdown_2(i);\n    add_2(l, r, k, ls(i));\n    add_2(l, r, k, rs(i));\n    tr[i].val = tr[ls(i)].val+tr[rs(i)].val;\n}\nauto query_2(int x, int i) -> long\n{\n    if(tr[i].l > x or tr[i].r < x) return 0;\n    if(tr[i].l == x and tr[i].r == x) return tr[i].val;\n    pushdown_2(i);\n    return query_2(x, ls(i))+query_2(x, rs(i));\n}\nauto pushdown_2(int i) -> void\n{\n    if(!tr[i].lz) return ;\n    tr[ls(i)].lz += tr[i].lz;\n    tr[rs(i)].lz += tr[i].lz;\n    tr[ls(i)].val += tr[i].lz*(tr[ls(i)].r-tr[ls(i)].l+1);\n    tr[rs(i)].val += tr[i].lz*(tr[rs(i)].r-tr[rs(i)].l+1);\n    tr[i].lz = 0;\n}\n\n```\n\u63a5\u4e0b\u6765\u662f\u4e3b\u51fd\u6570, ~~\u5f97\u65af~~\n```cpp\nauto main() -> signed\n{\n    scanf(\"%d%d%lld\", &n, &q, &w);\n    for(int i = 1; i < n; i += 1)\n    {\n        scanf(\"%d%d%lld\", &u[i], &v[i], &c[i]);\n        add_edge(u[i], v[i]);\n        add_edge(v[i], u[i]);\n    }\n    dfs1(1, 0); dfs2(1, 1);  //\u5256\u4e86\u5b83\n    build_2(1, n, 1);        //_____\n    for(int i = 1; i < n; i += 1)\n    {\n        if(dep[u[i]] > dep[v[i]])       //\u52a0\u5165\u521d\u59cb\u8fb9\u6743\n            add_2(id[u[i]], id[u[i]]+siz[u[i]]-1, c[i], 1);\n        else  \n            add_2(id[v[i]], id[v[i]]+siz[v[i]]-1, c[i], 1);\n    }\n    dfsx(1); \n    build_1(1, n, 1);\n    for(int i = 1, D; i <= q; i += 1)\n    {\n        scanf(\"%d%lld\", &D,&E);\n        D = (D+lst)%(n-1)+1;\n        E = (E+lst)%w;\n        if(dep[u[D]] > dep[v[D]])  \n        {\n            add_2(id[u[D]], id[u[D]]+siz[u[D]]-1, E-c[D], 1);  //\u6743\u503c\u7684\u4fee\u6539\n            change_1(beg[u[D]], ::end[u[D]], 1);               //\u76f4\u5f84\u7684\u66f4\u65b0\n            c[D] = E;\n        }\n        else \n        {\n            add_2(id[v[D]], id[v[D]]+siz[v[D]]-1, E-c[D], 1);\n            change_1(beg[v[D]], ::end[v[D]], 1);\n            c[D] = E;\n        }\n        lst = dr[1].val;\n        printf(\"%lld\\n\", lst);\n    }\n    return 0;\n}\n```\n### \u7ed3\u8bed\n\u5e38\u6570\u6709\u90a3\u4e48~~\u4ebf\u70b9\u70b9\u5927~~\u3002  \n\u82e5\u6709\u4ec0\u4e48\u95ee\u9898\u6b22\u8fce\u8bc4\u8bba\u6216\u79c1\u4fe1\u6307\u51fa\u3002  \n$\\Huge{The End}$",
        "postTime": 1660032800,
        "uid": 239164,
        "name": "Meteorshower_Y",
        "ccfLevel": 6,
        "title": "CF1192B Dynamic Diameter \u9898\u89e3"
    },
    {
        "content": "# CF1192B Dynamic Diameter\n\n## \u9898\u76ee\u5927\u610f\n\n[\u9898\u76ee\u94fe\u63a5](https://codeforces.com/problemset/problem/1192/B)\n\n\u6709\u4e00\u4e2a $n$ \u4e2a\u70b9\u7684\u5e26\u6743\u65e0\u5411\u6811\uff0c$q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u4fee\u6539\u4e00\u6761\u8fb9\u7684\u6743\u503c\uff0c\u8981\u6c42\u5728\u6bcf\u6b21\u4fee\u6539\u540e\uff0c\u8f93\u51fa\u6811\u7684\u76f4\u5f84\u5927\u5c0f\uff0c\u5f3a\u5236\u5728\u7ebf\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1\\leq n, q\\leq 10^5$\u3002\n\n## \u672c\u9898\u9898\u89e3\n\n\u4ecb\u7ecd\u4e00\u79cd\u7b80\u5355\u6613\u61c2\u7684 $\\mathcal{O}(q \\log^2 n)$ \u505a\u6cd5\u3002\n\n\u9996\u5148\uff0c\u6709\u4e00\u4e2a\u4f17\u6240\u5468\u77e5\u7684\u7ed3\u8bba\u662f\uff1a\u5bf9\u4e8e\u6811\u4e0a\u4efb\u610f\u4e24\u4e2a\u70b9\u96c6 $S, T$\uff0c\u8bbe $S$ \u7684\u76f4\u5f84\u4e3a $(u_S, v_S)$\uff0c$T$ \u7684\u76f4\u5f84\u4e3a $(u_T, v_T)$\uff0c\u5219\u70b9\u96c6 $S\\cup T$ \u7684\u76f4\u5f84\uff0c\u4e24\u4e2a\u7aef\u70b9\u90fd\u5728 $\\{u_S, v_S, u_T, v_T\\}$ \u4e2d\u4ea7\u751f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5728\u5408\u5e76\u4e24\u4e2a\u70b9\u96c6\uff0c\u5e76\u7ef4\u62a4\u76f4\u5f84\u65f6\uff0c\u53ea\u9700\u8981\u8ba8\u8bba $\\mathcal{O}(1)$ \u79cd\u53ef\u80fd\u7684\u76f4\u5f84\u3002\n\n\u5728 dfs \u5e8f\u4e0a\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u533a\u95f4 $[l,r]$\uff0c\u7ef4\u62a4 dfs \u5e8f\u5728 $[l,r]$ \u5185\u7684\u8fd9\u4e9b\u70b9\u7ec4\u6210\u7684\u70b9\u96c6\u7684\u76f4\u5f84\u3002\n\n\u8003\u8651\u4fee\u6539\u4e00\u6761\u8fb9\u7684\u6743\u503c\uff0c\u4f1a\u5bf9\u7ebf\u6bb5\u6811\u4e0a\u54ea\u4e9b\u70b9\u96c6\u4ea7\u751f\u5f71\u54cd\u3002\u8bbe\u4fee\u6539\u7684\u8fb9\u7684\u513f\u5b50\u8282\u70b9\u4e3a $x$\uff0c\u8bb0\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u7684 dfs \u5e8f\u533a\u95f4\u4e3a $[\\text{st}_x, \\text{ed}_x]$\u3002\u5219\u7ebf\u6bb5\u6811\u4e0a\u4e00\u6bb5\u533a\u95f4 $[l,r]$ \u7684\u7b54\u6848\u53ef\u80fd\u53d1\u751f\u6539\u53d8\uff0c**\u4ec5\u5f53 $[l,r]$ \u4e0e $[\\text{st}_x, \\text{ed}_x]$ \u6709\u4ea4\u4e14\u4e0d\u88ab $[\\text{st}_x, \\text{ed}_x]$ \u5b8c\u5168\u5305\u542b**\u3002\u56e0\u4e3a\u65e0\u4ea4\u65f6\uff0c\u8bf4\u660e\u6574\u4e2a\u70b9\u96c6\u90fd\u5728\u5b50\u6811\u5916\uff0c\u80af\u5b9a\u4e0d\u4f1a\u88ab\u5f71\u54cd\u5230\uff1b\u88ab\u5b8c\u5168\u5305\u542b\uff0c\u8bf4\u660e\u6574\u4e2a\u70b9\u96c6\u90fd\u5728\u5b50\u6811\u5185\uff0c\u4e5f\u4e0d\u4f1a\u88ab\u5f71\u54cd\u5230\u3002\n\n\u8003\u8651\u201c\u6709\u4ea4\u4e14\u4e0d\u88ab\u5305\u542b\u201d\uff0c\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u5b9a\u4f4d $[\\text{st}_x, \\text{ed}_x]$ \u65f6\uff0c\u6240**\u7ecf\u8fc7\u7684\u6240\u6709\u975e\u7ec8\u70b9\u8282\u70b9**\u3002\u8fd9\u6837\u7684\u8282\u70b9\u53ea\u6709 $\\mathcal{O}(\\log n)$ \u4e2a\uff0c\u53ea\u9700\u8981\u5bf9\u5b83\u4eec\u7684\u76f4\u5f84\u8fdb\u884c\u66f4\u65b0\u5373\u53ef\u3002\n\n\u66f4\u65b0\u65f6\uff0c\u8fd8\u662f\u4ece\u513f\u5b50\u90a3\u91cc\u7ee7\u627f\uff0c\u7136\u540e\u5206\u7c7b\u8ba8\u8bba\u3002\u76f8\u5f53\u4e8e\u6211\u4eec\u53ea\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7684 ``push_up`` \u51fd\u6570\uff0c\u5c31\u80fd\u89e3\u51b3\u6240\u6709\u95ee\u9898\u3002\n\n``push_up`` \u65f6\uff0c\u6d89\u53ca\u5230\u6c42\u6811\u4e0a\u67d0\u6761\u8def\u5f84\u7684\u957f\u5ea6\u3002\u53e6\u5916\u8981\u652f\u6301\u4fee\u6539\u8fb9\u6743\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u6570\u636e\u7ed3\u6784\uff08\u6811\u72b6\u6570\u7ec4\u6216\u53e6\u4e00\u68f5\u7ebf\u6bb5\u6811\uff09\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u5230\u6839\u7684\u8ddd\u79bb\u3002\u8fd9\u6837\u4fee\u6539\u5c31\u53d8\u6210\u533a\u95f4\u52a0\u3002\u67e5\u8be2\u5c31\u662f\u5148\u6c42 $\\text{LCA}$\uff0c\u7136\u540e\u505a\u4e09\u6b21\u5355\u70b9\u67e5\u8be2\u3002\u4e8e\u662f\u67e5\u8be2\u662f $\\mathcal{O}(\\log n)$ \u7684\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n + q \\log^2 n)$\u3002\n\n",
        "postTime": 1609510088,
        "uid": 100674,
        "name": "duyi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1192B \u3010Dynamic Diameter\u3011"
    },
    {
        "content": "[CF1192B Dynamic Diameter](https://www.luogu.com.cn/problem/CF1192B)\u89e3\u9898\u62a5\u544a\uff1a\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://zybuluo.com/xiaoziyao/note/1748675)\n\n## \u9898\u610f\n- \u7ed9\u5b9a\u4e00\u9897$n$\u4e2a\u70b9\u7684\u6811\uff0c\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u6743\u503c\uff1b\n- $q$\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4fee\u6539\u4e00\u6761\u8fb9\u7684\u6743\u503c\uff0c\u5e76\u8be2\u95ee\u5f53\u524d\u6811\u7684\u76f4\u5f84\uff1b\n- **\u5f3a\u5236\u5728\u7ebf**\uff1b\n- \u6570\u636e\u8303\u56f4\uff1a$1\\leqslant n,q\\leqslant 10^5$\u3002\n\n## \u5206\u6790\n\u6b27\u62c9\u5e8f+\u7ebf\u6bb5\u6811\u7ef4\u62a4\u597d\u9898\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u76f4\u5f84$(x,y)$\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u62c6\u6210\u4e24\u6761\u94fe$(x,lca(x,y))$\u548c$(lca(x,y),y)$\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u8981\u5f15\u5165\u4e00\u4e2a\u53eb\u6b27\u62c9\u5e8f\u7684\u4e1c\u897f\uff1a\n\n\u6b27\u62c9\u5e8f\u4e0edfs\u5e8f\u5f88\u7c7b\u4f3c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u5728\u8fdb\u5165\u8fd9\u4e2a\u7ed3\u70b9\u5b50\u6811\u65f6\u8bb0\u5f55\u4e00\u904d\u6b27\u62c9\u5e8f\uff0c\u6bcf\u4e00\u6b21\u4ece\u513f\u5b50\u5b50\u6811\u4e2d\u51fa\u6765\u65f6\u4e5f\u8bb0\u5f55\u4e00\u904d\u6b27\u62c9\u5e8f\u3002\n\n\u4e0b\u9762\u7ed9\u51fa\u8bb0\u5f55\u6b27\u62c9\u5e8f\u7684\u4ee3\u7801\uff1a\n```\nvoid dfs(int x,int last){\n\tq[++qs]=x,in[x]=qs;\n\tfor(int i=start[x];i;i=then[i]){\n\t\tint y=to[i];\n\t\tif(y==last)\n\t\t\tcontinue;\n\t\tdfs(y,x);\n\t\tq[++qs]=x;\n\t}\n\tout[x]=qs;\n}\n```\n\n\u5176\u4e2d$q$\u4e3a\u6b27\u62c9\u5e8f\u7ec4\u6210\u7684\u5e8f\u5217\uff0c$in_x$\u4e3a\u8fdb\u5165$x$\u5b50\u6811\u65f6\u7684\u6b27\u62c9\u5e8f\uff0c$out_x$\u5219\u4e3a\u51fa$x$\u5b50\u6811\u65f6\u7684\u6b27\u62c9\u5e8f\u3002\n\n\u8fd9\u79cd\u5e8f\u5217\u6709\u4ec0\u4e48\u6027\u8d28\u5462\uff1f\n\n- \u5e8f\u5217\u957f\u5ea6\u4e3a$2n-1$\uff1a\u8fd9\u4e2a\u5f88\u663e\u7136\uff0c\u6211\u4eec\u89c2\u5bdf\u5230**\u6bcf\u4e00\u6761\u8fb9\u4f1a\u8d21\u732e\u4e24\u904d\u6b27\u62c9\u5e8f**\uff0c\u518d\u52a0\u4e0a**\u8fdb\u5165\u6839\u7ed3\u70b9\u8d21\u732e\u4e00\u6b21\u6b27\u62c9\u5e8f**\uff0c\u603b\u6b21\u6570\u4e3a$2(n-1)+1=2n-1$\u3002\n- \u5bf9\u4e8e\u4e24\u4e2a\u7ed3\u70b9$x$\u548c$y$\u7684$lca$\uff0c\u5b83\u4e00\u5b9a\u4f1a\u5728$in_x$\u548c$in_y$\u4e2d\u95f4\u8bb0\u5f55\u4e00\u904d\u6b27\u62c9\u5e8f\uff0c\u4e14\u5b83\u662f$in_x$\u5230$in_y$\u533a\u95f4\u5185\u8bb0\u5f55\u4e86\u6b27\u62c9\u5e8f\u7684**\u6df1\u5ea6\u6700\u5c0f\u7ed3\u70b9**\uff1a\u8fd9\u4e5f\u5f88\u663e\u7136\uff0c\u56e0\u4e3a\u5728\u904d\u5386$x$\u5230\u904d\u5386$y$\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u51fa$lca$\u7684\u5b50\u6811\uff0c\u56e0\u6b64\u6ca1\u6709\u6bd4$lca$\u6df1\u5ea6\u8fd8\u5c0f\u7684\u5b50\u6811\u3002\n- **\u4e00\u4e2a\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u8d21\u732e\u7684\u6b27\u62c9\u5e8f\u4e00\u5b9a\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4**\uff1a\u7531dfs\u987a\u5e8f\u4fbf\u53ef\u5f97\u8fd9\u4e00\u70b9\u3002\n\n\u6709\u4e86\u8fd9\u4e2a\u6b27\u62c9\u5e8f\uff0c\u6211\u4eec\u5c31\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e2a\u6811**\u62cd\u5e73**\u4e86\uff08\u7c7b\u4f3c\u4e8edfs\u5e8f\uff09\uff0c\u6211\u4eec\u6765\u770b\u8fd9\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n- \u4fee\u6539\u64cd\u4f5c\uff1a$(x,y)$\u7684\u8fb9\u6743\u8d4b\u503c\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e00\u4e2a\u52a0\u6cd5\uff0c\u8bbe\u5728$\\text{dfs}$\u4e2d$x$\u662f$y$\u7684\u7236\u4eb2\uff08\u5426\u5219\u53ef\u4ee5\u4ea4\u6362$x,y$\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9$y$\u5b50\u6811\u5185\u6240\u6709\u70b9\u7684\u6df1\u5ea6\u8fdb\u884c\u52a0\u6cd5\u5c31\u597d\u4e86\uff0c\u5728\u5e8f\u5217\u4e0a\u5c31\u76f4\u63a5\u8fdb\u884c**\u7ebf\u6bb5\u6811\u533a\u95f4\u52a0\u64cd\u4f5c**\u3002\n- \u67e5\u8be2\u64cd\u4f5c\uff1a\u8003\u8651\u628a\u76f4\u5f84\u7684\u8ba1\u7b97\u65b9\u6cd5$dep_x+dep_y-2dep_{lca}$\uff0c\u5982\u4f55\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u5462\uff1f\u6211\u4eec\u628a\u5b83**\u5206\u6210\u4e24\u90e8\u5206**\uff1a$(dep_x-2dep_{lca})+dep_y$\uff08\u53ef\u4ee5\u4ea4\u6362\u987a\u5e8f\uff09\uff0c\u7136\u540e\u518d\u7ef4\u62a4\u4e00\u4e9b\u503c\u5c31\u597d\u4e86\u3002\n\n\u7ef4\u62a4\u76f4\u5f84\u5177\u4f53\u64cd\u4f5c\uff1a\n\n\u7ef4\u62a4\u5f53\u524d\u533a\u95f4\u7684\u6700\u5927\u6df1\u5ea6$maxd_x$\uff0c\u6700\u5c0f\u6df1\u5ea6$mind_x$\uff1b\u7ef4\u62a4\u4e00\u4e2a\u6df1\u5ea6\u5dee$lm_x$\uff0c\u8868\u793a\u5de6\u8fb9\u662f\u6df1\u5ea6\u6df1\u7684\u70b9$x$\uff0c\u53f3\u8fb9\u662f\u6df1\u5ea6\u6d45\u7684\u70b9$y$\uff0c\u5b83\u4eec\u7684$dep_x-2dep_y$\u6700\u5927\u662f\u591a\u5c11\uff0c\u540c\u7406\u7ef4\u62a4\u4e00\u4e2a\u6df1\u5ea6\u5dee$mr_x$\uff0c\u8868\u793a\u5de6\u8fb9\u662f\u6df1\u5ea6\u6d45\u7684\u70b9$y$\uff0c\u53f3\u8fb9\u662f\u6df1\u5ea6\u6df1\u7684\u70b9$x$\uff0c\u5b83\u4eec\u7684$dep_x-2dep_y$\u6700\u5927\u662f\u591a\u5c11\uff0c\u8fd9\u4e24\u4e2a\u4e1c\u897f\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u5b8c\u6210\u7ef4\u62a4\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u8def\u5f84\u957f\u5ea6$lmr_x$\uff0c\u4ee3\u8868\u5de6\u8fb9\u4e00\u4e2a\u6df1\u5ea6\u6df1\u7684\u70b9\uff0c\u4e2d\u95f4\u4e00\u4e2a\u6df1\u5ea6\u6d45\u7684\u70b9\uff08$lca$\uff09\uff0c\u53f3\u8fb9\u4e00\u4e2a\u6df1\u5ea6\u6df1\u7684\u70b9\uff0c\u5b83\u4eec\u7684\u8def\u5f84\u957f\u5ea6\u6700\u957f\u662f\u591a\u5c11\u3002\u8fd9\u4e2a$lmr_x$\u53ef\u4ee5\u7ee7\u627f\u5de6\u53f3\u533a\u95f4\u7684$lmr_x$\uff0c\u4e5f\u53ef\u4ee5\u7528\u5de6\u533a\u95f4\u7684$lm_x$\u548c\u53f3\u533a\u95f4\u7684$maxd_x$\u6765\u5408\u5e76\uff0c\u6216\u8005\u7528\u5de6\u533a\u95f4\u7684$maxd_x$\u548c\u53f3\u533a\u95f4\u7684$mr_x$\u5408\u5e76\u3002\n\n\u7ef4\u62a4\u4e0a\u8ff0\u503c\u7684\u4ee3\u7801\uff1a\n```\ninline void pushup(int now){\n\tmaxd[now]=max(maxd[lc[now]],maxd[rc[now]]);\n\tmind[now]=min(mind[lc[now]],mind[rc[now]]);\n\tlm[now]=max(max(lm[lc[now]],lm[rc[now]]),maxd[lc[now]]-2*mind[rc[now]]);\n\tmr[now]=max(max(mr[lc[now]],mr[rc[now]]),maxd[rc[now]]-2*mind[lc[now]]);\n\tlmr[now]=max(max(lmr[lc[now]],lmr[rc[now]]),max(lm[lc[now]]+maxd[rc[now]],maxd[lc[now]]+mr[rc[now]]));\n}\n```\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n\\log n)$\u3002\n\n## \u4ee3\u7801\n\u8fb9\u6743\u5f88\u5927\uff0c\u8bb0\u5f97\u5f00$\\text{long long}$\u3002\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n```\n#include<stdio.h>\n#define int long long\nconst int maxn=100005;\nint n,m,w,qs,e,lastans;\nint start[maxn],to[maxn<<1],then[maxn<<1],worth[maxn<<1],id[maxn<<1],dis[maxn],in[maxn],out[maxn],q[maxn<<1],tid[maxn],val[maxn],maxd[maxn<<3],mind[maxn<<3],lm[maxn<<3],mr[maxn<<3],lmr[maxn<<3],lc[maxn<<3],rc[maxn<<3],lazy[maxn<<3];\ninline int max(int a,int b){\n\treturn a>b? a:b;\n}\ninline int min(int a,int b){\n\treturn a<b? a:b;\n}\ninline void add(int x,int y,int z,int i){\n\tthen[++e]=start[x],start[x]=e,to[e]=y,worth[e]=z,id[e]=i;\n}\nvoid dfs(int x,int last){\n\tq[++qs]=x,in[x]=qs;\n\tfor(int i=start[x];i;i=then[i]){\n\t\tint y=to[i];\n\t\tif(y==last)\n\t\t\tcontinue;\n\t\tdis[y]=dis[x]+worth[i];\n\t\ttid[id[i]]=y;\n\t\tdfs(y,x);\n\t\tq[++qs]=x;\n\t}\n\tout[x]=qs;\n}\ninline void pushup(int now){\n\tmaxd[now]=max(maxd[lc[now]],maxd[rc[now]]);\n\tmind[now]=min(mind[lc[now]],mind[rc[now]]);\n\tlm[now]=max(max(lm[lc[now]],lm[rc[now]]),maxd[lc[now]]-2*mind[rc[now]]);\n\tmr[now]=max(max(mr[lc[now]],mr[rc[now]]),maxd[rc[now]]-2*mind[lc[now]]);\n\tlmr[now]=max(max(lmr[lc[now]],lmr[rc[now]]),max(lm[lc[now]]+maxd[rc[now]],maxd[lc[now]]+mr[rc[now]]));\n}\ninline void getlazy(int now,int v){\n\tmaxd[now]+=v,mind[now]+=v;\n\tlm[now]-=v,mr[now]-=v;\n\tlazy[now]+=v;\n}\ninline void pushdown(int now){\n\tif(lazy[now]==0)\n\t\treturn ;\n\tgetlazy(lc[now],lazy[now]),getlazy(rc[now],lazy[now]);\n\tlazy[now]=0;\n}\nvoid build(int l,int r,int now){\n\tif(l==r){\n\t\tgetlazy(now,dis[q[l]]);\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tlc[now]=now<<1,rc[now]=now<<1|1;\n\tbuild(l,mid,lc[now]),build(mid+1,r,rc[now]);\n\tpushup(now);\n}\nvoid update(int l,int r,int now,int L,int R,int v){\n\tif(L<=l&&r<=R){\n\t\tgetlazy(now,v);\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tpushdown(now);\n\tif(L<=mid)\n\t\tupdate(l,mid,lc[now],L,R,v);\n\tif(mid<R)\n\t\tupdate(mid+1,r,rc[now],L,R,v);\n\tpushup(now);\n}\nsigned main(){\n\tscanf(\"%lld%lld%lld\",&n,&m,&w);\n\tfor(int i=1;i<n;i++){\n\t\tint x,y,z;\n\t\tscanf(\"%lld%lld%lld\",&x,&y,&z);\n\t\tadd(x,y,z,i),add(y,x,z,i);\n\t\tval[i]=z;\n\t}\n\tdfs(1,0);\n\tbuild(1,qs,1);\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y;\n\t\tscanf(\"%lld%lld\",&x,&y);\n\t\tx=(x+lastans)%(n-1)+1,y=(y+lastans)%w;\n\t\tupdate(1,qs,1,in[tid[x]],out[tid[x]],y-val[x]);\n\t\tval[x]=y,lastans=lmr[1];\n\t\tprintf(\"%lld\\n\",lastans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1602602049,
        "uid": 35754,
        "name": "Verdandi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1192B \u3010Dynamic Diameter\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u52a8\u6001dp\u505a\u6cd5\uff0c\u53e6\u5916toptree\u7684\u505a\u6cd5\u5728\u4e0b\u9762\n\n\u65e0\u6839\u6811\u5f3a\u884c\u641e\u6210\u6839\u4e3a1\u6709\u6839\u6811\uff0c\u7136\u540e\u8fb9\u6743\u63a8\u70b9\u6743\u8bb0\u4f5c$w[x]$\n\n\u8bb0$f[x][0]$\u8868\u793a\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u76f4\u5f84\u957f\u5ea6\uff0c$f[x][1]$\u8868\u793a\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u8ddd\u4e0ex\u7236\u4eb2\u7684\u6700\u5927\u8ddd\u79bb\n\n$$f[x][0]=\\max\\left\\{\\max_{y \\in son_x} \\left\\{f[y][0]\\right\\},\\max_{y1\u2260y2\\in son_x}\\left\\{f[y1][1]+f[y2][1]\\right\\}\\right\\}$$\n\n$$f[x][1]=\\max_{y\\in son_x} \\left \\{f[y][1]\\right\\}+w[x]$$\n\n\u7136\u540e\u6211\u662f\u7528lct\uff0c\u6240\u4ee5\u662f\u5b9e\u94fe\u5256\u5206\uff0c\u5b9e\u513f\u5b50\u8bb0\u4f5c$real_x$\uff0c\u865a\u513f\u5b50\u96c6\u5408\u8bb0\u4f5c$imag_x$\uff0c\u6811\u5256\u7684\u8bdd\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u53eb\u4f5c$heavy_x$\u548c$light_x$\u800c\u5df2\n\n$$g[x][0]=\\max\\left\\{\\max_{y\\in imag_x} \\left \\{f[y][0]\\right\\},\\max_{y1\u2260y2\\in imag_x} \\left \\{f[y1][1]+f[y2][1]\\right\\}\\right\\}$$\n\n$$g[x][1]=\\max_{y\\in imag_x}\\left\\{f[y][1]\\right\\}$$\n\n\u7136\u540e\u53ef\u4ee5\u62ffg\u548c\u5b9e\u513f\u5b50\u4e00\u8d77\u8868\u793af\n\n$$y=real_x$$\n\n$$f[x][0]=\\max\\left\\{g[x][0],f[y][0],f[y][1]+g[x][1]\\right\\}$$\n\n$$f[x][1]=\\max\\left\\{g[x][1],f[y][1]\\right\\}+w[x]$$\n\n\u7136\u540e\u5b9a\u4e49\u77e9\u9635\u4e58\u6cd5\n\n$$c_{i,j}=\\max\\left\\{a[i][k]+b[k][j]\\right\\}$$\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6784\u9020\u77e9\u9635\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/b3b5vh89.png)\n\n\u5f00\u4e2a$multiset$(\u53ef\u5220\u5806)\u7ef4\u62a4\u865a\u513f\u5b50\u5c31\u597d\u4e86\n```cpp\n#include<set>\n#include<cstdio>\nusing std::greater;\nusing std::multiset;\ntypedef long long ll;\ntemplate<class type>inline const type max(const type &a,const type &b)\n{\n\treturn a>b?a:b;\n}\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch=getchar();bool f=0;\n\twhile (ch<48||ch>57){if (ch=='-')f=1;ch=getchar();}\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+(ch&15),ch=getchar();\n\tif (f)in=-in;\n}\ntemplate<class type>inline const void write(type out)\n{\n\tif (out>9)write(out/10);\n\tputchar(out%10+48);\n}\ntemplate<class type>inline const void writeln(type out)\n{\n\tif (out<0)putchar('-'),out=-out;\n\twrite(out);\n\tputchar('\\n');\n}\nconst int N=1e5+10;\nconst ll inf=2e14+10;\nstruct matrix\n{\n\tll val[3][3];\n\tinline matrix(ll a=0,ll b=0,ll c=0,ll d=0,ll e=0,ll f=0,ll g=0,ll h=0,ll i=0)\n\t{\n\t\tval[0][0]=a;val[0][1]=b;val[0][2]=c;\n\t\tval[1][0]=d;val[1][1]=e;val[1][2]=f;\n\t\tval[2][0]=g;val[2][1]=h;val[2][2]=i;\n\t}\n\tinline const matrix operator*(const matrix &m)const\n\t{\n\t\tmatrix pro(-inf,-inf,-inf,-inf,-inf,-inf,-inf,-inf,-inf);\n\t\tfor (int i=0;i<3;i++)\n\t\t\tfor (int j=0;j<3;j++)\n\t\t\t\tfor (int k=0;k<3;k++)\n\t\t\t\t\tpro.val[i][j]=max(pro.val[i][j],val[i][k]+m.val[k][j]);\n\t\treturn pro;\n\t}\n};\nstruct heap\n{\n\tmultiset<ll,greater<ll> >s;\n\tinline const ll top()\n\t{\n\t\treturn s.empty()?0ll:*s.begin();\n\t}\n\tinline const void push(ll x)\n\t{\n\t\ts.insert(x);\n\t}\n\tinline const void pop(ll x)\n\t{\n\t\tmultiset<ll,greater<ll> >::iterator it=s.find(x);\n\t\tif (it==s.end())return;\n\t\ts.erase(it);\n\t}\n\tinline const ll maxpair()\n\t{\n\t\tif (s.empty())return 0;\n\t\tmultiset<ll,greater<ll> >::iterator it=s.begin();\n\t\tll mx=*it;\n\t\tif (s.size()==1)return mx;\n\t\treturn mx+*(++it);\n\t}\n};\nint n,m,head[N],edc,dot[N];\nll w,lastans;\nstruct edge\n{\n\tint to,next;ll w;\n\tinline edge(const int &to=0,const ll &w=0ll,const int &next=0):to(to),w(w),next(next){}\n}e[N<<1];\ninline const void link(int u,int v,ll w)\n{\n\te[++edc]=edge(v,w,head[u]);head[u]=edc;\n\te[++edc]=edge(u,w,head[v]);head[v]=edc;\n}\nclass Link_Cut_Tree\n{\n\tprivate:\n\t\tstruct tree\n\t\t{\n\t\t\tmatrix m;\n\t\t\theap f0,f1;\n\t\t\tll val,f[2];\n\t\t\tint son[2],fa;\n\t\t}t[N];\n\t\tinline const void pushup(int p)\n\t\t{\n\t\t\tll g0=max(t[p].f0.top(),t[p].f1.maxpair()),g1=t[p].f1.top();\n\t\t\tt[p].m=matrix(0,g1,g0,-inf,t[p].val,t[p].val+g1,-inf,-inf,0);\n\t\t\tif (t[p].son[0])t[p].m=t[t[p].son[0]].m*t[p].m;\n\t\t\tif (t[p].son[1])t[p].m=t[p].m*t[t[p].son[1]].m;\n\t\t}\n\t\tinline const bool identity(int p)\n\t\t{\n\t\t\treturn t[t[p].fa].son[1]==p;\n\t\t}\n\t\tinline const bool nroot(int p)\n\t\t{\n\t\t\treturn t[t[p].fa].son[0]==p||identity(p);\n\t\t}\n\t\tinline const void rotate(int p)\n\t\t{\n\t\t\tbool f=identity(p);\n\t\t\tint fa=t[p].fa,gfa=t[fa].fa,q=t[p].son[f^1];\n\t\t\tif (nroot(fa))t[gfa].son[identity(fa)]=p;\n\t\t\tt[t[p].son[f^1]=fa].son[f]=q;\n\t\t\tt[t[t[q].fa=fa].fa=p].fa=gfa;\n\t\t\tpushup(fa);\n\t\t}\n\t\tinline const void splay(int p)\n\t\t{\n\t\t\tfor (int fa;nroot(p);rotate(p))\n\t\t\t\tif (nroot(fa=t[p].fa))\n\t\t\t\t\trotate(identity(p)^identity(fa)?p:fa);\n\t\t\tpushup(p);\n\t\t}\n\t\tinline const void access(int x)\n\t\t{\n\t\t\tfor (int y=0;x;x=t[y=x].fa)\n\t\t\t{\n\t\t\t\tsplay(x);\n\t\t\t\tif (t[x].son[1])\n\t\t\t\t\tt[x].f0.push(max(t[t[x].son[1]].m.val[0][1],t[t[x].son[1]].m.val[0][2])),\n\t\t\t\t\tt[x].f1.push(t[t[x].son[1]].m.val[1][2]);\n\t\t\t\tif (t[x].son[1]=y)\n\t\t\t\t\tt[x].f0.pop(max(t[y].m.val[0][1],t[y].m.val[0][2])),\n\t\t\t\t\tt[x].f1.pop(t[y].m.val[1][2]);\n\t\t\t\tpushup(x);\n\t\t\t}\n\t\t}\n\tpublic:\n\t\tinline const void dfs(int p)\n\t\t{\n\t\t\tll mx=0ll,submx=0ll;\n\t\t\tfor (int i=head[p];i;i=e[i].next)\n\t\t\t{\n\t\t\t\tint son=e[i].to;\n\t\t\t\tif (son==t[p].fa)continue;\n\t\t\t\tt[son].fa=p;\n\t\t\t\tt[dot[i+1>>1]=son].val=e[i].w;\n\t\t\t\tdfs(son);\n\t\t\t\tt[p].f1.push(t[son].f[1]);\n\t\t\t\tt[p].f0.push(t[son].f[0]);\n\t\t\t\tt[p].f[0]=max(t[p].f[0],t[son].f[0]);\n\t\t\t\tif (t[son].f[1]>mx)submx=mx,mx=t[son].f[1];\n\t\t\t\telse if (t[son].f[1]>submx)submx=t[son].f[1];\n\t\t\t}\n\t\t\t\n\t\t\tt[p].f[1]=mx+t[p].val;\n\t\t\tt[p].f[0]=max(t[p].f[0],mx+submx);\n\t\t\tpushup(p);\n\t\t}\n\t\tinline const void modify(int x,ll y)\n\t\t{\n\t\t\taccess(x);\n\t\t\tt[x].val=y;\n\t\t\tpushup(x);\n\t\t\tsplay(x);\n\t\t}\n\t\tinline const ll query()\n\t\t{\n\t\t\tsplay(1);return t[1].m.val[0][2];\n\t\t}\n}lct;\nint main()\n{\n\tread(n);read(m);read(w);\n\tll l;for (int u,v,i=1;i<n;i++)read(u),read(v),read(l),link(u,v,l);\n\tlct.dfs(1);\n\tfor (int u;m--;)\n\t\tread(u),read(l),\n\t\t\tu=(u+lastans)%(n-1)+1,l=(l+lastans)%w,\n\t\t\tlct.modify(dot[u],l),writeln(lastans=lct.query());\n\treturn 0;\n}\n```\n\n## Self-Adjusting Top Trees\n\n\u4e3b\u8981\u4ecb\u7ecd\u89c1[negiizhao\u7684\u535a\u5ba2](http://negiizhao.blog.uoj.ac/blog/4912)\n\n\u7ef4\u62a4\u76f4\u5f84\u7684\u8be6\u7ec6\u65b9\u6cd5\u89c1[negiizhao\u7684\u53e6\u4e00\u7bc7\u8bba\u6587](http://negiizhao.blog.uoj.ac/blog/3223)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/uaoyxhjy.png)\n\n\u2014\u2014\u6458\u81eanegiizhao\u300a\u6d45\u8c08\u52a8\u6001\u6811\u4e0a\u4fe1\u606f\u7684\u7ef4\u62a4\u300b\n\n\u653e\u5728self-adjusting\u7684\u4e09\u53c9\u5b9e\u73b0\u4e2d\n\n$compress \\ node$\u7684$maxdis[0/1]$\u8868\u793a\u5230\u5de6/\u53f3\u7aef\u70b9\u7684\u6700\u5927\u8ddd\u79bb, $len$\u8868\u793a\u7c07\u8def\u5f84\u957f\u5ea6, $son[2]$\u8868\u793a$rake \\ child$\n\n$rake \\ node$\u53ea\u9700\u7528\u5230$maxdis[0]$\u8868\u793a\u5230$boundary \\ node$\u7684\u6700\u8fdc\u8ddd\u79bb, $son[2]$\u8868\u793a$compress \\ child$\n\n$diam$\u8868\u793a\u8be5\u7c07\u7684\u76f4\u5f84\n\n\u5982\u4e0b\u66f4\u65b0\u5408\u5e76\u7c07\u4fe1\u606f\u5373\u53ef\n\n$compress$:\n\n$len=son[0]\\rightarrow len+son[1]\\rightarrow len$\n\n$maxdis[0]=\\max(son[0]\\rightarrow maxdis[0],son[0]\\rightarrow len+\\max(son[1]\\rightarrow maxdis[0],son[2]\\rightarrow maxdis[0]))$\n\n$maxdis[1]=\\max(son[1]\\rightarrow maxdis[1],son[1]\\rightarrow len+\\max(son[0]\\rightarrow maxdis[1],son[2]\\rightarrow maxdis[0]))$\n\n$diam=\\max \\left \\{son[0]\\rightarrow diam,son[1]\\rightarrow diam,son[2]\\rightarrow diam,son[0]\\rightarrow maxdis[1]+son[1]\\rightarrow maxdis[0],son[2]\\rightarrow maxdis[0]+\\max(son[0]\\rightarrow maxdis[1],son[1]\\rightarrow maxdis[0]) \\right \\}$\n\n$rake:$\n\n$maxdis[0]=\\max \\left \\{son[0]\\rightarrow maxdis[0],son[1]\\rightarrow maxdis[0],son[2]\\rightarrow maxdis[0] \\right \\}$\n\n$diam=\\max \\left \\{son[0]\\rightarrow diam,son[1]\\rightarrow diam,son[2]\\rightarrow diam,son[0]\\rightarrow maxdis[0]+son[1]\\rightarrow maxdis[0],son[2]\\rightarrow maxdis[0]+\\max(son[0]\\rightarrow maxdis[0],son[1]\\rightarrow maxdis[0])\\right \\}$\n\n$compress$\u7684$maxdis$\u66f4\u65b0\u7c7b\u4f3c\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u6bd4\u8f83\u597d\u7406\u89e3\uff0c$diam$\u7684\u8bdd\u5c31\u662f\u6bcf\u4e2a\u7c07\u7684$diam$\u6bd4\u4e00\u4e0b\u7136\u540e\u8ba8\u8bba\u4e00\u4e0b\u8de8\u8d8a\u4e24\u7c07\u7684\u60c5\u51b5\n\n$rake$\u7684$maxdis$\u7531\u4e8e\u6bcf\u4e2a\u7c07\u6709\u5171\u540c\u7684$boundary \\ node$\uff0c\u76f4\u63a5\u53d6\u6700\u5927\u7684\u90a3\u4e2a\u5c31\u5b8c\u4e8b\u4e86\uff0c$diam$\u540c\u7406\n\n\u7279\u522b\u5730\uff0c$base \\ cluster$\u7684$maxdis[0]=maxdis[1]=diam=len$\n\n$O(n \\log n)$ \u4ee3\u7801\u4e0d\u5b8c\u5168\u516c\u5f00\n\n~~\u5411\u8bba\u6587\u54e5\u4f4e\u5934~~\n\n```cpp\n#include<cstdio>\n#include<cstddef>\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch(getchar());\n\twhile (ch<48||ch>57)ch=getchar();\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+(ch&15),ch=getchar();\n}\ntemplate<class type>inline const void swap(type &a,type &b)\n{\n\tconst type c(a);a=b;b=c;\n}\ntemplate<class type>inline const type max(const type &a,const type &b)\n{\n\treturn a>b?a:b;\n}\ntypedef long long ll;\nconst int N(1e5+10);\nnamespace Self_Adjusting_Top_Trees\n{\n\ttemplate<>inline const void tree::pushup<compress>()\n\t{\n\t\tlen=son[0]->len+son[1]->len;\n\t\tdiam=max(son[0]->maxdis[1]+son[1]->maxdis[0],max(son[0]->maxdis[1],son[1]->maxdis[0])+son[2]->maxdis[0]);\n\t\tdiam=max(diam,max(max(son[0]->diam,son[1]->diam),son[2]->diam));\n\t\tmaxdis[0]=max(son[0]->maxdis[0],son[0]->len+max(son[2]->maxdis[0],son[1]->maxdis[0]));\n\t\tmaxdis[1]=max(son[1]->maxdis[1],son[1]->len+max(son[2]->maxdis[0],son[0]->maxdis[1]));\n\t}\n\ttemplate<>inline const void tree::pushup<rake>()\n\t{\n\t\tdiam=max(son[0]->maxdis[0]+son[1]->maxdis[0],son[2]->maxdis[0]+max(son[0]->maxdis[0],son[1]->maxdis[0]));\n\t\tdiam=max(max(diam,son[2]->diam),max(son[0]->diam,son[1]->diam));\n\t\tmaxdis[0]=max(son[2]->maxdis[0],max(son[0]->maxdis[0],son[1]->maxdis[0]));\n\t}\n\tinline const void modify(tree *p,tree *q,const ll &w)\n\t{\n\t\texpose(p,q);\n\t\tp->son[1]->maxdis[0]=p->son[1]->maxdis[1]=p->son[1]->len=p->son[1]->diam=w;\n\t\tp->pushup<compress>();\n\t\tq->pushup<compress>();\n\t}\n}using namespace Self_Adjusting_Top_Trees;\nint n,m,u[N],v[N];\nll maxw,lastans;\nint main()\n{\n\tread(n);read(m);read(maxw);\n\tnode0=new tree[n+1];\n\tll w;for (int i=1;i<n;i++)read(u[i]),read(v[i]),read(w),link(node(u[i]),node(v[i]),w);\n\tfor (int k;m--;)\n\t\tread(k),read(w),\n\t\tk=(lastans+k)%(n-1)+1,\n\t\tw=(w+lastans)%maxw,\n\t\tmodify(node(u[k]),node(v[k]),w),\n\t\tprintf(\"%I64d\\n\",lastans=node(v[k])->diam);\n\treturn 0;\n}\n```",
        "postTime": 1571974804,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1192B \u3010Dynamic Diameter\u3011"
    },
    {
        "content": "\u611f\u89c9\u81ea\u5df1\u597d\u4e45\u6ca1\u5199\u8fc7\u9898\u89e3\u4e86\u3002\u5e76\u4e14\u8fd9\u8fd8\u662f\u81ea\u5df1\u7684\u7b2c1\u9053\u7070\u9898\uff0c\u5c31\u6765OF2\u4e00\u53d1\u5427\u3002\n\n\u9996\u5148\uff0c\u8fd9\u9898\u7684\u90e8\u5206\u5206\u8fd8\u662f\u5f88\u597d\u62ff\u7684\u3002\n\n1. \u5b50\u4efb\u52a11&2\uff1a\u6bcf\u6b21\u66b4\u529b\u6c42\u51fa\u6811\u7684\u76f4\u5f84\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(qn)$\uff1b\n2. \u5b50\u4efb\u52a13\uff1a\u7531\u4e8e\u6811\u7684\u5f62\u6001\u4e3a\u83ca\u82b1\u56fe\uff0c\u663e\u7136\u6b64\u65f6\u7684\u76f4\u5f84\u4e3a\u6700\u957f\u8fb9\u52a0\u6b21\u957f\u8fb9\uff0c\u8fd9\u6837\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5927\u503c\u4e0e\u6b21\u5927\u503c\u5373\u53ef,$O(nlogn)$\uff1b\n3. \u5b50\u4efb\u52a14\uff1a\u6811\u7684\u5f62\u6001\u4e3a\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u5219\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u5176\u5b50\u6811\u4e2d\u7684\u76f4\u5f84\u6700\u5927\u503c\uff0c\u4ee5\u53ca\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u4e00\u7aef\uff0c\u4e14\u5728\u5176\u5b50\u6811\u4e2d\u7684\u6700\u5927\u94fe\u957f\uff0c$O(nlogn)$\n\n\u6700\u540e100%\u505a\u6cd5\uff1a\n\n\u5b50\u4efb\u52a15&6\uff1a\u628a\u76f4\u5f84\u62c6\u6210L~M~R\u7684\u5f62\u5f0f\uff0c\u5219\u76f4\u5f84\u957f\u5ea6\u4e3adis(L)+dis(R)-2dis(M)\uff1b\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u6811\u7684\u6b27\u62c9\u5e8f\uff0c\u5e76\u4e14\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u70b9\u5728\u6b27\u62c9\u5e8f\u4e0a\u7b2c\u4e00\u6b21\u548c\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u533a\u95f4\u7684\u6700\u5927\u503c\u3001M\u3001LM\u3001MR\u3001LMR\uff0c\u53ef\u89c1\u7b54\u6848\u4e3a\u7ebf\u6bb5\u68111\u53f7\u70b9\u7684LMR\u3002\n\n\u7ef4\u62a4\u65b9\u6cd5\uff1a\n\nM\uff1a\u672c\u9898\u8981\u4f7fM\u5c3d\u53ef\u80fd\u5c0f\uff0c\u5219\u53d6\u76f8\u53cd\u6570\u7ef4\u62a4\u6700\u5927\u503c\u5373\u53ef\u3002\n\nLM\uff1a\u4e00\u79cd\u53ef\u80fd\u662f\u7ebf\u6bb5\u6811\u4e0a\u5b50\u8282\u70b9\u7684\u503c\u5c31\u662f\u8be5\u70b9\u7684\u503c\uff08\u4e8c\u8005\u53d6max\uff09\uff0c\u53e6\u4e00\u79cd\u662f\u7ebf\u6bb5\u6811\u4e0a\u5de6\u5b50\u6811val\u52a0\u4e0a\u53f3\u5b50\u6811M\uff0cMR\u540c\u7406\u3002\n\nLMR\uff1a\u4e00\u79cd\u662f\u5728\u5b50\u6811\u5185\uff0c\u53ea\u9700\u628a\u7ebf\u6bb5\u6811\u5b50\u8282\u70b9\u7684LMR\u53d6max\u5373\u53ef\uff1b\u53e6\u4e00\u79cd\u662f\u7ecf\u8fc7\u5b50\u6811\u6811\u6839\uff0c\u9700\u8981\u5229\u7528val\u3001LM\u3001MR\u8fdb\u884c\u5408\u5e76\u3002\n\n\u4fee\u6539\u65f6\uff0c\u627e\u51fa\u5bf9\u5e94\u8fb9\u4e0a\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\uff0c\u5bf9\u8fd9\u4e2a\u70b9\u5b50\u6811\u7684\u6b27\u62c9\u5e8f\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u3002\n\nstd(c++):\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define maxn 102400\n#define ll long long\nchar str;\nint n,q;\nll w;\nstruct edge\n{\n\tint to;\n\tint nxt;\n\tll vl;\n}nd[2*maxn];\nint head[maxn],cnt;\nint st[maxn],ed[maxn],eul[2*maxn];\nint fa[maxn],cut;\nll ans,dep[maxn],wei[maxn];\nll val[8*maxn],M[8*maxn],LM[8*maxn],MR[8*maxn],LMR[8*maxn];\nll la[8*maxn];\ntemplate<class X> inline void read(X &x)\n{\n\tx=0;\n\tX f=1;\n\twhile(!isdigit(str))\n\t{\n\t\tif(str=='-')\n\t\t{\n\t\t\tf=-1;\n\t\t}\n\t\tstr=getchar();\n\t}\n\twhile(isdigit(str))\n\t{\n\t\tx*=10;\n\t\tx+=str-'0';\n\t\tstr=getchar();\n\t}\n\tx*=f;\n\treturn;\n}\nvoid init()\n{\n\tmemset(head,-1,sizeof(head));\n\tcnt=2;\n\treturn;\n}\nvoid add(int x,int y,ll z)\n{\n\tnd[cnt].to=y;\n\tnd[cnt].nxt=head[x];\n\tnd[cnt].vl=z;\n\thead[x]=cnt++;\n\treturn;\n}\nvoid dfs(int x)\n{\n\tst[x]=++cut;\n\teul[cut]=x;\n\tfor(int i=head[x];i!=-1;i=nd[i].nxt)\n\t{\n\t\tint t=nd[i].to;\n\t\tif(t!=fa[x])\n\t\t{\n\t\t\twei[t]=nd[i].vl;\n\t\t\tfa[t]=x;\n\t\t\tdep[t]=dep[x]+nd[i].vl;\n\t\t\tdfs(t);\n\t\t\teul[++cut]=x;\n\t\t}\n\t}\n\ted[x]=cut;\n\treturn;\n}\nvoid pushdown(int rt,int l,int r)\n{\n\tval[rt]+=la[rt];\n\tM[rt]-=la[rt]*2;\n\tLM[rt]-=la[rt];\n\tMR[rt]-=la[rt];\n\tif(l!=r)\n\t{\n\t\tla[rt<<1]+=la[rt];\n\t\tla[rt<<1|1]+=la[rt];\n\t}\n\tla[rt]=0;\n\treturn;\n}\nvoid pushup(int rt,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\treturn;\n\t}\n\tval[rt]=max(val[rt<<1],val[rt<<1|1]);\n\tM[rt]=max(M[rt<<1],M[rt<<1|1]);\n\tLM[rt]=max(max(LM[rt<<1],LM[rt<<1|1]),val[rt<<1]+M[rt<<1|1]);\n\tMR[rt]=max(max(MR[rt<<1|1],MR[rt<<1]),val[rt<<1|1]+M[rt<<1]);\n\tLMR[rt]=max(max(LMR[rt<<1],LMR[rt<<1|1]),max(LM[rt<<1]+val[rt<<1|1],MR[rt<<1|1]+val[rt<<1]));\n\treturn;\n}\nvoid build(int l,int r,int rt)\n{\n\tif(l==r)\n\t{\n\t\tint pos=eul[l];\n\t\tval[rt]=dep[pos];\n\t\tM[rt]=-2*dep[pos];\n\t\tLM[rt]=MR[rt]=-dep[pos];\n\t\treturn;\n\t}else\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tbuild(l,mid,rt<<1);\n\t\tbuild(mid+1,r,rt<<1|1);\n\t\tpushup(rt,l,r);\n\t\treturn;\n\t}\n}\nvoid addt(int L,int R,int l,int r,int rt,ll z)\n{\n\tif(L<=l&&R>=r)\n\t{\n\t\tla[rt]+=z;\n\t\tpushdown(rt,l,r);\n\t\treturn;\n\t}else\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tpushdown(rt,l,r);\n\t\tif(L<=mid)\n\t\t{\n\t\t\taddt(L,R,l,mid,rt<<1,z);\n\t\t}\n\t\tif(R>mid)\n\t\t{\n\t\t\taddt(L,R,mid+1,r,rt<<1|1,z);\n\t\t}\n\t\tpushdown(rt<<1,l,mid);\n\t\tpushdown(rt<<1|1,mid+1,r);\n\t\tpushup(rt,l,r);\n\t}\n\treturn;\n}\nint main()\n{\n\tinit();\n\tread(n),read(q),read(w);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tll z;\n\t\tread(x),read(y),read(z);\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t}\n\tdfs(1);\n\tbuild(1,2*n-1,1);\n\twhile(q--)\n\t{\n\t\tll x,y;\n\t\tread(x),read(y);\n\t\tx+=ans;\n\t\tx%=(n-1);\n\t\tx++;\n\t\ty+=ans;\n\t\ty%=w;\n\t\tif(fa[nd[x<<1].to]==nd[x<<1|1].to)\n\t\t{\n\t\t\tx=nd[x<<1].to;\n\t\t}else\n\t\t{\n\t\t\tx=nd[x<<1|1].to;\n\t\t}\n\t\taddt(st[x],ed[x],1,2*n-1,1,y-wei[x]);\n\t\twei[x]=y;\n\t\tans=LMR[1];\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1568507837,
        "uid": 158849,
        "name": "renhr2002",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1192B \u3010Dynamic Diameter\u3011"
    },
    {
        "content": "## \u66f4\u65b0\u8bf4\u660e\n\nUpdate 2022.8.8\uff0c\u88ab [Ztemily](https://www.luogu.com.cn/user/352961) \u6307\u51fa pushup \u6709\u9519\u8bef\uff0c\u6539\u6b63\uff0c\u73b0\u5df2\u5728 codeforces \u4e0a AC\u3002\n\n## \u9898\u610f\n\n\u52a8\u6001\u7ef4\u62a4\u6811\u4e0a\u76f4\u5f84\u95ee\u9898\u3002\n\n## \u601d\u8def\n\n\u6700\u7b80\u5355\u7684\u505a\u6cd5\u662f\u76f4\u63a5\u7528\u6b27\u62c9\u5e8f\u5947\u602a\u7684\u6027\u8d28\u6765\u6c42\u89e3\u3002\n\n\u56e0\u4e3a\u6709\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u3002\n\n### \u4ec0\u4e48\u662f\u6b27\u62c9\u5e8f\n\n\u6b27\u62c9\u5e8f\u7684\u7b80\u5355\u5b9a\u4e49\u662f\uff1a\u5f53 dfs \u65f6\uff0c\u5230\u8fbe $x$ \u65f6\u8bb0\u5f55\u4e00\u4e0b\u7f16\u53f7\uff0c\u56de\u6eaf\u5230\u8fbe $x$ \u65f6\u518d\u8bb0\u4e00\u4e0b\u7f16\u53f7\uff0c\u5230\u8fbe\u53f6\u5b50\u8282\u70b9\u65f6\u8981\u8bb0\u5f55\u4e24\u4e2a\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u6709\u7528\u7684\u6027\u8d28\uff1a\n\n- \u7531\u4e8e\u6bcf\u4e00\u6761\u8fb9\u53ea\u6709\u9012\u5f52\u5411\u4e0b\u4e0e\u56de\u6eaf\u4e24\u79cd\u60c5\u51b5\u7ecf\u8fc7\uff0c\u8fd8\u9700\u671d\u6839\u8282\u70b9\u8d21\u732e\u4e00\u6b21\uff0c\u6240\u4ee5\u6b27\u62c9\u5e8f\u6700\u591a\u53ea\u6709 $2 \\times n - 1$ \u4ece\u4e2a\u6570\u3002\n\n- \u6211\u4eec\u8bbe $in_x$ \u4e3a $x$ \u8282\u70b9\u6700\u65e9\u51fa\u73b0\u5728\u6b27\u62c9\u5e8f\u5f53\u4e2d\u7684\u4f4d\u7f6e\uff0c$out_x$ \u4e3a $x$ \u8282\u70b9\u6700\u665a\u51fa\u73b0\u5728\u6b27\u62c9\u5e8f\u5f53\u4e2d\u7684\u4f4d\u7f6e\u3002\u5219 $in_x$ \u5230 $out_x$ \u8fd9\u4e00\u6bb5\u533a\u95f4\u4e00\u5b9a\u662f\u4ee5 $x$ **\u4e3a\u6839\u7684\u5b50\u6811**\uff0c\u4ece\u5b9a\u4e49\u4e2d\u5c31\u53ef\u4ee5\u77e5\u9053\u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u8fd9\u4e24\u70b9\uff0c\u5c31\u53ef\u4ee5\u6765\u505a\u9898\u4e86\u3002\n\n### \u5173\u4e8e\u76f4\u5f84\n\n\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u6761\u76f4\u5f84\u4e00\u5b9a\u662f\u7531\u4e00\u4e2a\u6df1\u5ea6\u6700\u6df1\u7684\u70b9\uff0c\u5230\u8fbe\u6df1\u5ea6\u6700\u6d45\u7684\u70b9\uff0c\u518d\u5230\u8fbe\u6df1\u5ea6\u7b2c\u4e8c\u6d45\u7684\u70b9\u3002\n\n\u90a3\u4e48\u6211\u4eec\u7684\u4fee\u6539\u64cd\u4f5c\u53ef\u4ee5\u8fd9\u4e48\u601d\u8003\uff08\u8bbe\u76f4\u5f84\u4e24\u7aef\u70b9\u4e3a $x, y$\uff0c$d = lca(x, y)$\u3002\uff09\uff1a\n\n- \u4fee\u6539\uff1a\u5229\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 $dep$\u3002\n\n- \u67e5\u8be2\uff1a\u7b54\u6848\u4e3a $dep_x + dep_y - 2 \\times dep_d$\uff0c\u6211\u4eec\u8003\u8651\u5c06\u5b83\u62c6\u6210 $(dep_x - 2 \\times dep_d) + dep_y$\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u5806\u503c\uff1a\n\n- $maxd_x$\uff0c\u7ef4\u62a4\u533a\u95f4\u6df1\u5ea6\u6700\u5927\u503c\u3002\n\n- $mind_x$\uff0c\u7ef4\u62a4\u533a\u95f4\u6df1\u5ea6\u6700\u5c0f\u503c\u3002\n\n- $lm_x$\uff0c\u7ef4\u62a4\u533a\u95f4\u5f53 $dep_x > dep_y$\uff0c$dep_x - 2 \\times dep_y$\u3002\n\n- $mr_x$\uff0c\u540c\u7406\u3002\n\n- $lmr_x$\uff0c\u4ee3\u8868\u76f4\u5f84\u957f\u5ea6\uff0c\u5177\u4f53\u7ef4\u62a4\u53ef\u89c1\u4ee5\u4e0a\u3002\n\n\u6709\u4e86\u8fd9\u51e0\u4e2a\u4e1c\u897f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u53d1\u73b0\u7b54\u6848\u5c31\u662f $lmr_1$ \u4e86\u3002\n\n\u8fd9\u91cc\u7ed9\u4e00\u4e0b pushup \u51fd\u6570\uff1a\n\n```cpp\nvoid pushup(int node){\n  maxd[node] = max(maxd[node << 1], maxd[node << 1 | 1]);\n  mind[node] = min(mind[node << 1], mind[node << 1 | 1]);\n  lm[node] = max(max(lm[node << 1], lm[node << 1 | 1]), maxd[node << 1] - mind[node << 1 | 1] * 2);\n  mr[node] = max(max(mr[node << 1], mr[node << 1 | 1]), maxd[node << 1 | 1] - mind[node << 1] * 2);\n  lmr[node] = max(max(lmr[node << 1], lmr[node << 1 | 1]), max(lm[node << 1] + maxd[node << 1 | 1], maxd[node << 1] + mr[node << 1 | 1]));\n}\n```\n\n## \u4ee3\u7801\n\nCode\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n\n#define endl '\\n'\n#define int long long\n\nusing namespace std;\n\nconst int N = 2e5 + 5;\nconst int M = 8e5 + 5;\n\nint n, q, w;\nint W[N], dep[N];\n\nint id[N], cnt, in[N], out[N], mp[N], tid[N];\n\n// Graph | Start\nint head[N], tot;\n\nstruct Graph{\n  int to, w, next;\n}edges[N * 2];\n\nvoid add(int u, int v, int w, int i){\n  tot++;\n  edges[tot].to = v;\n  edges[tot].w = w;\n  edges[tot].next = head[u];\n  mp[tot] = i;\n  head[u] = tot;\n}\n// Graph | End\n\n// Segment tree | Start\nint maxd[M], mind[M], lm[M], mr[M], lmr[M], tag[M];\n\nvoid pushup(int node){\n  maxd[node] = max(maxd[node << 1], maxd[node << 1 | 1]);\n  mind[node] = min(mind[node << 1], mind[node << 1 | 1]);\n  lm[node] = max(max(lm[node << 1], lm[node << 1 | 1]), maxd[node << 1] - mind[node << 1 | 1] * 2);\n  mr[node] = max(max(mr[node << 1], mr[node << 1 | 1]), maxd[node << 1 | 1] - mind[node << 1] * 2);\n  lmr[node] = max(max(lmr[node << 1], lmr[node << 1 | 1]), max(lm[node << 1] + maxd[node << 1 | 1], maxd[node << 1] + mr[node << 1 | 1]));\n}\n\nvoid addtag(int node, int val){\n  maxd[node] += val;\n  mind[node] += val;\n  lm[node] -= val;\n  mr[node] -= val;\n  tag[node] += val;\n}\n\nvoid pushdown(int node){\n  if(!tag[node]){\n    return ;\n  }\n  addtag(node << 1, tag[node]);\n  addtag(node << 1 | 1, tag[node]);\n  tag[node] = 0;\n}\n\nvoid build(int node, int lt, int rt){\n  if(lt == rt){\n    addtag(node, dep[id[lt]]);\n    return ;\n  }\n  int mid = lt + rt >> 1;\n  build(node << 1, lt, mid);\n  build(node << 1 | 1, mid + 1, rt);\n  pushup(node);\n}\n\nvoid update(int node, int lt, int rt, int x, int y, int val){\n  if(y < lt || x > rt){\n    return ;\n  }\n  if(x <= lt && rt <= y){\n    addtag(node, val);\n    return ;\n  }\n  pushdown(node);\n  int mid = lt + rt >> 1;\n  update(node << 1, lt, mid, x, y, val);\n  update(node << 1 | 1, mid + 1, rt, x, y, val);\n  pushup(node);\n}\n// Segment tree | End\n\nvoid dfs(int x, int fa){\n  id[++cnt] = x;\n  in[x] = cnt;\n  for(int i = head[x]; i; i = edges[i].next){\n    if(edges[i].to != fa){\n      dep[edges[i].to] = dep[x] + edges[i].w;\n      tid[mp[i]] = edges[i].to;\n      dfs(edges[i].to, x);\n      id[++cnt] = x;\n    }\n  }\n  out[x] = cnt;\n}\n\nvoid Solve(){\n  cin >> n >> q >> w;\n  for(int i = 1; i < n; i++){\n    int u, v, w;\n    cin >> u >> v >> w;\n    add(u, v, w, i);\n    add(v, u, w, i);\n    W[i] = w;\n  }\n  dfs(1, 0);\n  build(1, 1, cnt);\n  int lastans = 0;\n  for(int i = 1; i <= q; i++){\n    int x, val;\n    cin >> x >> val;\n    x = (x + lastans) % (n - 1) + 1;\n    val = (val + lastans) % w;\n    update(1, 1, cnt, in[tid[x]], out[tid[x]], val - W[x]);\n    W[x] = val;\n    lastans = lmr[1];\n    cout << lastans << endl;\n  }\n}\n\nsigned main(){\n#ifdef debug\n  freopen(\"Code.in\", \"r\", stdin);\n  freopen(\"Code.out\", \"w\", stdout);\n#endif\n  Solve();\n  return 0;\n}\n```",
        "postTime": 1654872541,
        "uid": 363006,
        "name": "_Alexande_",
        "ccfLevel": 5,
        "title": "CF1192B \u9898\u89e3"
    },
    {
        "content": "## \u9898\u76ee\u63cf\u8ff0\n\n\u6807\u9898\u8bf4\u7684\u5f88\u6e05\u695a\uff0c\u52a8\u6001\u76f4\u5f84\u3002\n\n## \u9898\u76ee\u5206\u6790\n\n\u62ff\u5230\u8fd9\u9898\u3002  \nDDP\uff1f\u6811\u5256\uff1fLCT\uff1f\n\n\u8fd9\u9898\u6211\u4eec\u9009\u62e9\u7528DDP+\u6811\u5256/LCT\uff0c\u6216\u8005\u6811\u5256/Splay+LCA\uff0c\u7206\u8e29Segment Tree\u3002  \n\u5e76\u4e0d\uff0c\u6211\u4eec\u7740\u91cd\u4ecb\u7ecd\u7ebf\u6bb5\u6811\u4e0a\u6807\u8bb0\u62fc\u63a5\u7684\u529e\u6cd5\u3002\n\n\u9996\u5148\uff0c\u8003\u8651\u53d8\u6811\u4e0a\u64cd\u4f5c\u4e3a\u5e8f\u5217\u64cd\u4f5c\u3002\n\u7528\u4ec0\u4e48\u987a\u5e8f\u597d\u5462\uff1f\n\n\u6b27\u62c9\u5e8f\u3002  \n\u770b\u5230\u5176\u4ed6\u9898\u89e3\u544a\u8bc9\u6211\u90a3\u4e2a\u53eb\u5168DFS\u5e8f\u5e76\u8bf4\u4e86\u4e00\u4e2a\u5f88\u8ff7\u7684\u5b9a\u4e49\uff0c\u6211\u4e00\u8138\u61f5T_T\uff0c\u4e0d\u5c31\u662f\u6b27\u62c9\u5e8f\u5417\uff1f\n\n\u8fd9\u65f6\uff0c\u6839\u636e\u5b9a\u4e49\uff0c\u6811\u4e0a\u4efb\u610f\u65f6\u95f4\u6233\u4e4b\u95f4\u7684\u5e8f\u5217\u4ee3\u8868\u4e86\u4e00\u6bb5\u8def\u5f84\u3002\n\u6b64\u65f6\uff0c\u5f00\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u4ee5\u4e0b\u51e0\u4e2a\u503c\u3002\n\n1. \u8ddd\u79bb\u6839\u6700\u8fdc\u7684\u8ddd\u79bb\uff1b\n2. \u8ddd\u79bb\u6839\u6700\u8fd1\u7684\u8ddd\u79bb\uff1b\n3. \u9009\u62e9\u5de6\u7aef\u70b9\u4ee5\u53calca\u7684\u6700\u957f\u8ddd\u79bb\uff1b\n4. \u9009\u62e9\u53f3\u7aef\u70b9\u4ee5\u53calca\u7684\u6700\u957f\u8ddd\u79bb\uff1b\n5. \u9009\u62e9\u6574\u4e2a\u533a\u95f4\uff08\u4e5f\u5c31\u662f\u4e00\u6761\u94fe\uff09\u7684\u8ddd\u79bb\uff1b\n\n\u7ef4\u62a4\u5c31\u975e\u5e38\u7b80\u5355\u4e86\u3002  \n\u4f46\u662f\uff01\u6b64\u65f6\u6709\u4e00\u4e2a\u5947\u6280\u6deb\u5de7\u3002\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\uff0c\u6211\u4eec\u5728\u8bb0\u5f552\u7684\u7b54\u6848\u65f6\uff0c\u8bb0\u5f55\u5b83\u7684-2\u500d\u3002\n\n\u4f46\u662f\u56e0\u4e3a\u5bf9\u6b27\u62c9\u5e8f\u64cd\u4f5c\u4e3a\u533a\u95f4\u52a0\u51cf\uff0c\u6240\u4ee5\u8fd8\u8981\u7ef4\u62a4\u4e00\u4e2atag\u3002\n\n\u81f3\u6b64\uff0c\u516d\u4e2a\u6807\u8bb0\u5c31\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\u3002\n\n```cpp\nstruct Edge{int to,next,v;}a[maxn];\nint h[maxn>>2],cnt,n,q,W,la,dfn[maxn>>2],low[maxn<<2],eu[maxn>>1],d[maxn>>2],dep[maxn>>2];\nint tag[maxn],mx[maxn],mn[maxn],lm[maxn],rm[maxn],lmr[maxn];\nvoid add(int x,int y,int z) {a[++cnt]=(Edge){y,h[x],z},h[x]=cnt,a[++cnt]=(Edge){x,h[y],z},h[y]=cnt;}\nvoid Dfs(int x,int pa)\n{\n\tdfn[eu[++eu[0]]=x]=eu[0];\n\tfor(int i=h[x];i;i=a[i].next)\n\t\tif(a[i].to^pa) dep[a[i].to]=dep[x]+1,d[a[i].to]=d[x]+a[i].v,Dfs(a[i].to,x),eu[++eu[0]]=x;\n\tlow[x]=eu[0];\n}\nvoid Pushdown(int k)\n{\n\tif(tag[k])\n\t{\n\t\ttag[k<<1]+=tag[k],tag[k<<1|1]+=tag[k];\n\t\tmx[k<<1]+=tag[k],mx[k<<1|1]+=tag[k];\n\t\tmn[k<<1]-=tag[k]<<1,mn[k<<1|1]-=tag[k]<<1;\n\t\tlm[k<<1]-=tag[k],lm[k<<1|1]-=tag[k];\n\t\trm[k<<1]-=tag[k],rm[k<<1|1]-=tag[k];\n\t\ttag[k]=0;\n\t}\n}\nvoid Pushup(int k)\n{\n\tmx[k]=max(mx[k<<1],mx[k<<1|1]);\n\tmn[k]=max(mn[k<<1],mn[k<<1|1]);\n\tlm[k]=max(max(lm[k<<1],lm[k<<1|1]),mx[k<<1]+mn[k<<1|1]);\n\trm[k]=max(max(rm[k<<1|1],rm[k<<1]),mx[k<<1|1]+mn[k<<1]);\n\tlmr[k]=max(max(max(lmr[k<<1],lmr[k<<1|1]),mx[k<<1]+rm[k<<1|1]),lm[k<<1]+mx[k<<1|1]);\n}\nvoid Build(int k,int l,int r)\n{\n\tif(l==r) return mx[k]=d[eu[l]],mn[k]=-d[eu[l]]<<1,lm[k]=rm[k]=-d[eu[l]],void(0);\n\tint mid=l+r>>1;\n\tBuild(k<<1,l,mid),Build(k<<1|1,mid+1,r);\n\tPushup(k);\n}\nvoid Update(int k,int l,int r,int L,int R,int d)\n{\n\tif(R<l||r<L) return;\n\tif(L<=l&&r<=R) return mx[k]+=d,mn[k]-=d<<1,lm[k]-=d,rm[k]-=d,tag[k]+=d,void(0);\n\tint mid=l+r>>1;Pushdown(k);\n\tUpdate(k<<1,l,mid,L,R,d),Update(k<<1|1,mid+1,r,L,R,d);\n\tPushup(k);\n}\nsigned main()\n{\n\tint x,y,z,w;\n\tn=read(),q=read(),W=read();\n\tfor(int i=1;i<n;i++) x=read(),y=read(),add(x,y,read());\n\tDfs(1,0),Build(1,1,eu[0]);\n\twhile(q--) z=(read()+la)%(n-1)+1,w=(read()+la)%W,x=a[z<<1].to,y=a[(z<<1)-1].to,x=dep[x]<dep[y]?y:x,Update(1,1,eu[0],dfn[x],low[x],w-a[z<<1].v),a[z<<1].v=w,printf(\"%lld\\n\",la=lmr[1]);\n\treturn 0;\n}\n```",
        "postTime": 1597308277,
        "uid": 106182,
        "name": "KaisuoShutong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1192B \u3010Dynamic Diameter\u3011"
    },
    {
        "content": "# $\\text{Foreword}$\n@zhengrunzhe \u5927\u4f6c\u7684\u77e9\u9635\u505a\u6cd5\u8fc7\u4e8e\u795e\u5947\uff0c\u849f\u84bb\u65e0\u6cd5\u7406\u89e3...   \n\u6b27\u62c9\u5e8f\u7684\u505a\u6cd5\u786e\u5b9e\u975e\u5e38\u5de7\u5999\uff0c\u4f46\u6211\u4e5f\u60f3\u4e0d\u5230\u8fd9\u4e48\u795e\u4ed9\u7684\u505a\u6cd5...  \n\u63d0\u4f9b\u4e00\u79cd\u53ef\u80fd\u7b80\u5355\u4e00\u4e9b\u7684 LCT \u505a\u6cd5\u3002  \n\u7531\u4e8e\u672c\u4eba LCT \u65e0\u6cd5\u50cf\u5927\u4f6c\u90a3\u4e48\u795e\uff0c\u8bb2\u7684\u4f1a\u6bd4\u8f83\u8be6\u7ec6\u4e00\u4e9b\uff0c\u4e5f\u8bb8\u5bf9\u5176\u4ed6 LCT \u5e73\u6c11\u73a9\u5bb6\u66f4\u52a0\u53cb\u597d\uff1f\n# $\\text{Solution}$\n\u672c\u9898\u6709\u4e00\u4e2a\u5f88\u5173\u952e\u7684\u6027\u8d28\uff1a**\u8fb9\u6743\u975e\u8d1f**\u3002\uff08\u6b27\u62c9\u5e8f\u7684\u505a\u6cd5\u4e5f\u8981\u57fa\u4e8e\u8fd9\u4e2a\u6027\u8d28\uff09  \n\u53c8\u53d1\u73b0\u4fee\u6539\u65e0\u975e\u6539\u5927/\u5c0f\uff0c\u5728/\u4e0d\u5728\u539f\u76f4\u5f84\u4e0a\uff0c\u5229\u7528\u975e\u8d1f\u7684\u6027\u8d28\u5206\u522b\u8ba8\u8bba\u4e00\u4e0b\uff0c\u5c31\u4f1a\u53d1\u73b0**\u65b0\u76f4\u5f84\u81f3\u5c11\u6709\u4e00\u4e2a\u8282\u70b9\u548c\u539f\u6765\u76f8\u540c**\u3002  \n\u6240\u4ee5\u6211\u4eec\u4e00\u5f00\u59cb\u66b4\u529b\u6c42\u51fa\u76f4\u5f84\u540e\uff0c\u53ea\u9700\u8981\u4e0d\u65ad\u628a\u539f\u76f4\u5f84\u7684\u4e24\u7aef\u70b9\u63d0\u51fa\u6765\uff0c\u7528\u4ece\u4e8c\u8005\u51fa\u53d1\u65b0\u7684\u6700\u957f\u8def\u5f84\u6765\u5c1d\u8bd5\u4f5c\u4e3a\u65b0\u76f4\u5f84\u5c31\u884c\u4e86\u3002  \n\u6240\u4ee5\u73b0\u5728\u53ea\u9700\u8981\u52a8\u6001\u7ef4\u62a4**\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\u7684\u6700\u957f\u8def\u5f84**\u3002  \n\n\u5e38\u89c4\u5957\u8def\uff0c\u5148\u8fb9\u5316\u70b9\uff0c\u8fb9\u6743\u5316\u70b9\u6743\u3002  \n\u8bbe $w_x$ \u8868\u793a $x$ \u7684\u70b9\u6743\uff0c$sum_x$ \u8868\u793a $x$ splay\u5b50\u6811\u5185\u70b9\u6743\u4e4b\u548c\uff0c$dis_x$ \u8868\u793a\u4ece $x$ **\u6240\u5728 splay \u5b50\u6811\u5185\u6df1\u5ea6\u6700\u6d45\u7684\u8282\u70b9\u51fa\u53d1**\u5f80\u5b50\u6811\u5ef6\u4f38\u7684\u6700\u957f\u8def\u5f84\u3002  \n\u5148\u4e0d\u8003\u8651 $x$ \u5b9e\u94fe\u7236\u4eb2\uff0c\u5c1d\u8bd5\u6c42\u51fa**\u4ece $x$ \u51fa\u53d1**\u5f80\u5b50\u6811\u5ef6\u4f38\u7684\u6700\u957f\u8def\u5f84 $res_x$\u3002    \n\n\u4e00\u5f00\u59cb\u6709\uff1a \n$$res_x=w_x$$\n\u5bf9\u4e8e $x$ \u7684\u865a\u513f\u5b50\uff0c\u5bf9\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a `std::set`  \u7ef4\u62a4\u865a\u5b50\u6811\uff0c\u8fdb\u884c\u8f6c\u79fb\uff1a\n$$res_x\\gets \\max_{son}dis_{son}+w_x$$\n\u8fd8\u6709\u4ece $x$ \u7684\u5b9e\u513f\u5b50\u8f6c\u79fb\uff0c\u4e0d\u96be\u53d1\u73b0\u5176\u5bf9\u5e94\u7684\u5c31\u662f $dis_{rs_x}$\uff1a\n$$res_x\\gets dis_{rs_x}+w_x$$\n\u6c42\u5b8c $res_x$ \u540e\uff0c\u5982\u679c $x$ \u6ca1\u6709\u5de6\u513f\u5b50\uff0c\u8bf4\u660e\u4ed6\u5c31\u662f\u94fe\u5934\uff0c\u76f4\u63a5\u8ba9 $dis_x=res_x$ \u5373\u53ef\uff1b\u5426\u5219\uff0c\u94fe\u5934\u53ef\u4ee5\u4e0d\u4f7f\u7528 $res_x$ \u7684\u8f6c\u79fb\uff0c\u6216\u8005\u4f7f\u7528 $res_x$ \u7684\u8f6c\u79fb\uff0c\u90a3\u4e48\u8fd8\u8981\u52a0\u4e0a $x$ \u5230\u94fe\u5934\u4e00\u6bb5\u7684\u6743\u503c\u548c\uff0c\u5206\u522b\u5bf9\u5e94 `max` \u7684\u524d\u540e\u4e24\u9879\uff1a\n$$dis_x=\\max(dis_{ls_x},res_x+sum_{ls_x})$$\n\n\u8fd9\u6837\u5c31\u505a\u5b8c\u4e86\u3002\u7531\u4e8e\u8f6c\u79fb\u4e0d\u5bf9\u79f0\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u955c\u50cf\u7684\u5904\u7406\u4e00\u4e2a $dis'x$\uff0c\u5728\u7ffb\u8f6c\u65f6\u76f4\u63a5\u4ea4\u6362\u4e24\u9879\u5373\u53ef\u3002\n# $\\text{Code}$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define ull unsigned long long\n#define debug(...) fprintf(stderr,__VA_ARGS__)\n#define ok debug(\"OK\\n\")\nusing namespace std;\n\nconst int N=2e5+100;\ninline ll read(){\n  ll x(0),f(1);char c=getchar();\n  while(!isdigit(c)) {if(c=='-')f=-1;c=getchar();}\n  while(isdigit(c)) {x=(x<<1)+(x<<3)+c-'0';c=getchar();}\n  return x*f;\n}\n\nint n,m;\n\n\n#define pr pair<ll,int>\n#define mkp make_pair\npr operator + (const pr &o,const ll &w){return mkp(o.first+w,o.second);}\n\nint tr[N][2],rev[N],f[N];\nll sum[N],w[N];\npr dis1[N],dis2[N];\nmultiset<pr>s[N];\n#define ls(x) tr[x][0]\n#define rs(x) tr[x][1]\ninline bool nroot(int x){return ls(f[x])==x||rs(f[x])==x;}\ninline bool which(int x){return rs(f[x])==x;}\n\ninline void pushup(int x){\n  sum[x]=w[x]+sum[ls(x)]+sum[rs(x)];\n  \n  dis1[x]=s[x].empty()?mkp(w[x],x<=n?x:-1):(*s[x].rbegin())+w[x];\n  if(rs(x)) dis1[x]=max(dis1[x],dis1[rs(x)]+w[x]);\n  if(ls(x)) dis1[x]=max(dis1[ls(x)],dis1[x]+sum[ls(x)]);\n  \n  dis2[x]=s[x].empty()?mkp(w[x],x<=n?x:-1):(*s[x].rbegin())+w[x];\n  if(ls(x)) dis2[x]=max(dis2[x],dis2[ls(x)]+w[x]);\n  if(rs(x)) dis2[x]=max(dis2[rs(x)],dis2[x]+sum[rs(x)]);\n  \n  return;\n}\ninline void Rev(int x){\n  if(x){\n    rev[x]^=1;\n    swap(ls(x),rs(x));\n    swap(dis1[x],dis2[x]);\n  }\n  return;\n}\ninline void pushdown(int x){\n  if(rev[x]){\n    rev[x]=0;\n    Rev(ls(x));\n    Rev(rs(x));\n  }\n  return;\n}\nvoid dfs(int x){\n  if(!x) return;\n  pushdown(x);\n  debug(\"x=%d f=%d ls=%d rs=%d w=%lld dis1=(%lld %d) s: \",x,f[x],ls(x),rs(x),w[x],dis1[x].first,dis1[x].second);\n  for(pr o:s[x]) debug(\"(%lld %d) \",o.first,o.second);\n  debug(\"\\n\");\n  dfs(ls(x));dfs(rs(x));\n}\nvoid print(){\n  for(int i=1;i<=n+n-1;i++){\n    if(!nroot(i)) dfs(i);\n  }\n}\ninline void rotate(int x){\n  int fa=f[x],gfa=f[fa];\n  int d=which(x),son=tr[x][d^1];\n  f[x]=gfa;if(nroot(fa)) tr[gfa][which(fa)]=x;\n  f[fa]=x;tr[x][d^1]=fa;\n  if(son) {f[son]=fa;}tr[fa][d]=son;\n  pushup(fa);pushup(x);\n  return;\n}\nint zhan[N];\ninline void splay(int x){\n  int top=0,y=x;\n  zhan[++top]=y;\n  while(nroot(y)) zhan[++top]=y=f[y];\n  while(top) pushdown(zhan[top--]);\n  for(int fa;fa=f[x],nroot(x);rotate(x)){\n    if(nroot(fa)) which(fa)==which(x)?rotate(fa):rotate(x);\n  }\n  return;\n}\ninline void access(int x){\n  for(int y=0;x;y=x,x=f[x]){\n    splay(x);\n    if(rs(x)){\n      s[x].insert(dis1[rs(x)]);\n    }\n    if(y){\n      s[x].erase(s[x].find(dis1[y]));\n    }\n    rs(x)=y;\n    pushup(x);\n  }\n  return;\n}\ninline void makeroot(int x){\n  access(x);splay(x);Rev(x);\n}\ninline void link(int x,int y){\n  makeroot(x);makeroot(y);\n  f[x]=y;\n  s[y].insert(dis1[x]);\n  pushup(y);\n  return;\n}\n\nll mod;\nll D;\nint a,b;\nsigned main(){\n  #ifndef ONLINE_JUDGE\n  freopen(\"a.in\",\"r\",stdin);\n  freopen(\"a.out\",\"w\",stdout);\n  #endif\n  n=read();m=read();mod=read();\n  for(int i=1;i<n;i++){\n    int x=read(),y=read();\n    w[n+i]=read();\n    link(x,n+i);\n    link(y,n+i);\n  }\n  for(int i=1;i<=n;i++){\n    makeroot(i);\n    if(dis1[i].first>D){\n      D=dis1[i].first;\n      a=i;b=dis1[i].second;\n    }\n  }\n  ll lst=0;\n  while(m--){\n    ll x=(read()+lst)%(n-1)+1 +n,ww=(read()+lst)%mod;    \n    makeroot(x);\n    w[x]=ww;pushup(x);\n    int u=a,v=b;\n    D=a=b=0;\n\n    makeroot(u);\n    if(dis1[u].first>=D){\n      D=dis1[u].first;\n      a=u;b=dis1[u].second;\n    }\n    \n    makeroot(v);\n    if(dis1[v].first>=D){\n      D=dis1[v].first;\n      a=v;b=dis1[v].second;\n    }\n\n    printf(\"%lld\\n\",lst=D);\n  }\n  return 0;\n}\n/*\n*/\n \n```\n",
        "postTime": 1649257050,
        "uid": 449265,
        "name": "wind_whisper",
        "ccfLevel": 10,
        "title": "CF1192B Dynamic Diameter"
    },
    {
        "content": ">\u652f\u6301\u52a8\u6001(\u5f3a\u5236\u5728\u7ebf)\u4fee\u6539\u4e00\u68f5\u6811\u7684\u8fb9\u6743\u6c42\u6bcf\u4e2a\u65f6\u523b\u7684\u76f4\u5f84\n\n\u63d0\u4f9b\u4e00\u4e2a**\u62ec\u53f7\u5e8f\u5217\u6620\u5c04\u6811\u4e0a\u8def\u5f84\u7684\u65b9\u6cd5**\n\n\u9996\u5148\u8bf4\u660e\u4e00\u4e0b\u770b\u6e05\u9898\u610f\uff0c\u672c\u9898\u6811\u7684\u5f62\u6001\u662f\u5b9a\u7684\uff0c\u6539\u7684\u662f\u8fb9\u6743\uff0c\u56e0\u6b64```\u4e00\u4e2aLCT\u7ef4\u62a4\u52a8\u6001\u76f4\u5f84\u7684\u65b9\u6cd5\u662f\u4e0d\u53ef\u884c\u7684```\u56e0\u4e3a\u90a3\u6837\u6211\u4eec\u5176\u5b9e\u9700\u8981\u53ef\u5220\u9664$LCT$(\u4ed4\u7ec6\u54c1\u8fd9\u53e5\u8bdd\u610f\u601d\uff0c\u4e0d\u662f$Cut$),\u90a3\u6837\u5176\u5b9e\u53ef\u4ee5\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u4f46\u8981\u79bb\u7ebf\n\n\u9996\u5148\u89e3\u51b3\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u95ee\u9898:\u8fb9\u6743\u662f$1$\u65f6\n\n\u6c42\u51fa\u4e00\u68f5\u6811\u7684$dfs$\u5e8f\uff0c$st_i$\u4f4d\u7f6e\u6807$($\uff0c$ed_i$\u4f4d\u7f6e\u6807$)$\n\n\u6709\u4e00\u4e9b\u795e\u5947\u7684\u7ed3\u8bba\n\n\u539f\u6811\u62ec\u53f7\u5e8f\u4efb\u4f55\u4e00\u4e2a\u8fde\u7eed\u5b50\u6bb5\u4e24\u4e24\u5339\u914d\u540e\u5269\u4f59\u7684\u62ec\u53f7\u6309\u76f8\u5bf9\u987a\u5e8f\u62fc\u63a5\u7684\u7ed3\u679c(\u4e00\u5b9a\u662f\u552f\u4e00\u4e14\u786e\u5b9a\u7684)\u8868\u793a\u4e00\u6761\u8def\u5f84\uff0c\u8def\u5f84\u957f\u4e3a\u5269\u4f59\u7684\u62ec\u53f7\u4e2a\u6570\n\n\u56e0\u6b64\u95ee\u9898\u5b9e\u9645\u4e0a\u8f6c\u6210\u5b9a\u4e49$'('=1,')'=-1$\u8f6c\u6210$0/1$\u5e8f\u5217\u540e\uff0c\u4e00\u4e2a\u8fde\u7eed\u5b50\u4e32\u7684\u5212\u5206\u4f7f\u5f97\u540e\u9762\u51cf\u524d\u9762\u6700\u5927\n\n\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u516b\u4e2a\u6807\u8bb0\u5f97\u5230\n\n$lmx,rmx,lmi,rmi,ld,rd,lrd,ans$\u524d\u7f00/\u540e\u7f00\u7684\u6700\u5927/\u6700\u5c0f\u548c\uff0c\u524d\u7f00\u53f3\u51cf\u5de6\u6700\u5927\uff0c\u540e\u7f00\u53f3\u51cf\u5de6\u6700\u5927\uff0c\u4e24\u7aef\u70b9\u5fc5\u987b\u9009\u6ee1\u53f3\u51cf\u5de6\u6700\u5927\uff0c\u4efb\u610f\u5b50\u4e32\u53f3\u51cf\u5de6\u6700\u5927\n\n```cpp\nvoid pushup(int x){\n\tsum[x]=sum[ls(x)]+sum[rs(x)]; \n\tlmx[x]=max(lmx[ls(x)],sum[ls(x)]+lmx[rs(x)]); \n\trmx[x]=max(rmx[rs(x)],sum[rs(x)]+rmx[ls(x)]);\n\tlmi[x]=min(lmi[ls(x)],sum[ls(x)]+lmi[rs(x)]);\n\trmi[x]=min(rmi[rs(x)],sum[rs(x)]+rmi[ls(x)]);\n\tld[x]=max(ld[ls(x)],max(ld[rs(x)]-sum[ls(x)],lrd[ls(x)]+lmx[rs(x)])); \n\trd[x]=max(rd[rs(x)],max(sum[rs(x)]+rd[ls(x)],lrd[rs(x)]-rmi[ls(x)]));\n\tlrd[x]=max(lrd[ls(x)]+sum[rs(x)],lrd[rs(x)]-sum[ls(x)]);\n\tans[x]=max(max(ans[ls(x)],ans[rs(x)]),max(ld[rs(x)]-rmi[ls(x)],rd[ls(x)]+lmx[rs(x)])); \n}\n```\n\n\u5b8c\u6574\u7684\n\n```cpp\n#include<bits/stdc++.h>\n#define ls(a) ((a)<<1)\n#define rs(a) ((a)<<1|1)\n#define N 200001\n#define int long long\nusing namespace std;\ntypedef long long ll;\n#define G if(++ip==ie)if(fread(ip=ibuf,1,LL,stdin))\nconst int LL=1<<19;\nchar ibuf[LL],*ie=ibuf+LL,*ip=ie-1;\ninline char nc(void){G;return *ip;}\n//#define getchar nc\ninline ll read(void){\n\tchar opt;ll flag=1,res=0;\n\twhile((opt=getchar())<'0'||opt>'9')if(opt=='-')flag=-1;\n\twhile(opt>='0'&&opt<='9'){res=(res<<3)+(res<<1)+opt-'0';opt=getchar();}\n\treturn res*flag;\n}\nint n,m,st[N],top,q;\nstruct edge{int to;ll v;int x;};vector<edge>g[N];\nll w,sum[N<<2],lmx[N<<2],rmx[N<<2],lmi[N<<2],rmi[N<<2],ld[N<<2],rd[N<<2],lrd[N<<2],ans[N<<2],lastans,p[N][2];\nvoid pushup(int x){\n\tsum[x]=sum[ls(x)]+sum[rs(x)]; \n\tlmx[x]=max(lmx[ls(x)],sum[ls(x)]+lmx[rs(x)]); \n\trmx[x]=max(rmx[rs(x)],sum[rs(x)]+rmx[ls(x)]);\n\tlmi[x]=min(lmi[ls(x)],sum[ls(x)]+lmi[rs(x)]);\n\trmi[x]=min(rmi[rs(x)],sum[rs(x)]+rmi[ls(x)]);\n\tld[x]=max(ld[ls(x)],max(ld[rs(x)]-sum[ls(x)],lrd[ls(x)]+lmx[rs(x)])); \n\trd[x]=max(rd[rs(x)],max(sum[rs(x)]+rd[ls(x)],lrd[rs(x)]-rmi[ls(x)]));\n\tlrd[x]=max(lrd[ls(x)]+sum[rs(x)],lrd[rs(x)]-sum[ls(x)]);\n\tans[x]=max(max(ans[ls(x)],ans[rs(x)]),max(ld[rs(x)]-rmi[ls(x)],rd[ls(x)]+lmx[rs(x)])); \n}\ninline void Build(int pos,int l,int r){\n\tll v;if(l==r)return sum[pos]=(v=st[l]),lmx[pos]=rmx[pos]=max(v,0ll),lmi[pos]=rmi[pos]=min(v,0ll),ld[pos]=rd[pos]=lrd[pos]=ans[pos]=v,void();\n\tint mid=(l+r)>>1;\n\tBuild(ls(pos),l,mid),Build(rs(pos),mid+1,r);\n\tpushup(pos);\n}\ninline void Change(int pos,int l,int r,int x,ll v){\n\tif(l==r)return sum[pos]=v,lmx[pos]=rmx[pos]=max(v,0ll),lmi[pos]=rmi[pos]=min(v,0ll),ld[pos]=rd[pos]=lrd[pos]=ans[pos]=v,void();\n\tint mid=(l+r)>>1;\n\t(x<=mid)?Change(ls(pos),l,mid,x,v):Change(rs(pos),mid+1,r,x,v);\n\tpushup(pos);\n}\ninline void dfs(int x,int prt){\n\tint y;for(auto t:g[x])if((y=t.to)^prt)st[*p[t.x]=++top]=t.v,dfs(y,x),st[p[t.x][1]=++top]=-t.v;\n}\nsigned main(void){\n\tint i,x;ll y,z;n=read(),q=read(),w=read();\n\tfor(i=1;i<n;++i)x=read(),y=read(),z=read(),g[x].push_back({y,z,i}),g[y].push_back({x,z,i});\n\tdfs(1,0);Build(1,1,top);\n\twhile(q--){\n\t\tx=(read()+lastans)%(n-1)+1,y=(read()+lastans)%w;\n\t\tChange(1,1,top,*p[x],y),Change(1,1,top,p[x][1],-y);\n\t\tprintf(\"%lld\\n\",lastans=ans[1]);\n\t}\n    return 0;\n}\n```",
        "postTime": 1597323926,
        "uid": 40629,
        "name": "zzw4257",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1192B \u3010Dynamic Diameter\u3011"
    },
    {
        "content": "# \u9898\u76ee\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1192B)\n\n# \u9898\u89e3\n\n\u9898\u76ee\u4ea4\u4ee3\u4e86\u662f\u201c\u52a8\u6001\u76f4\u5f84\u201d\uff0c\u80af\u5b9a\u662f\u5728\u7ebf\u5566\uff0c\u95ee\u9898\u5728\u4e8e\u6211\u4eec\u9009\u7528\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\uff0c\u4ee5\u53ca\u600e\u4e48\u7ef4\u62a4.\n\n\u5728\u6811\u4e0a\uff0c\u8003\u8651\u4f7f\u7528\u6811\u5256\u8fdb\u884c\u7ef4\u62a4\uff0c\u4f46\u662f\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u5982\u4f55\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\uff1f\u5bf9\u4e8e\u4e00\u9897\u7ebf\u6bb5\u6811\u4e0a\u7684\u533a\u95f4\uff0c\u5b83\u7684\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u5fc5\u7136\u6765\u6e90\u4e8e\u5b83\u7684\u5b50\u533a\u95f4\u7684\u4e24\u6761\u76f4\u5f84\u7684\u7aef\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528\u56db\u6b21\u679a\u4e3e\u6bcf\u79cd\u60c5\u51b5\u5373\u53ef.\n\n\u8003\u8651\u4fee\u6539\u7684\u65f6\u5019\u600e\u4e48\u7ef4\u62a4\u7ebf\u6bb5\u6811\uff0c\u9996\u5148\uff0c\u5bf9\u4e8e\u4e00\u6761\u8fb9 $e$ \u88ab\u4fee\u6539\uff0c\u5047\u8bbe\u5b83\u8fde\u63a5\u7684\u6df1\u5ea6\u8f83\u6df1\u7684\u70b9\u4e3a $u$\uff0c\u90a3\u4e48\uff0c\u5728 $u$ \u7684\u5b50\u6811\u4e2d\u7684\u76f4\u5f84\u6ca1\u6709\u53d7\u5230\u5f71\u54cd\uff0c\u552f\u4e00\u6709\u5f71\u54cd\u7684\u662f**\u8de8\u8d8a**\u4e86 $u$ \u7684\u70b9\u7684\u76f4\u5f84\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u6765\u8bf4\uff0c\u5c31\u662f\u5305\u542b\u4e86 `dfn[u]` \u4ee5\u53ca `dfn[u]+sz[u]-1` \u4e24\u4e2a\u7aef\u70b9\u7684\u533a\u95f4\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\uff0c\u4e00\u6b21\u4fee\u6539\u7684\u8ba1\u7b97\u662f $\\mathcal O(\\log^2n)$\uff0c\u603b\u590d\u6742\u5ea6 $\\mathcal O(n\\log^2n)$.\n\n\u4ee3\u7801\u4e2d\u5bf9\u4e8e\u5355\u70b9\u7684\u6df1\u5ea6\u4f7f\u7528\u7684\u662f `BIT` \u5229\u7528\u5dee\u5206\u7ef4\u62a4\u7684\uff0c\u6216\u8bb8\u8fd9\u6837\u5e38\u6570\u66f4\u5c0f.\n\n# \u4ee3\u7801\n\n```cpp\n# include <cstdio>\n# include <algorithm>\nusing namespace std;\nnamespace Elaina{\n    # define rep(i,l,r) for(int i=l, i##_end_ = r; i <= i##_end_; ++ i)\n    # define fep(i,l,r) for(int i=l, i##_end_ = r; i >= i##_end_; -- i)\n    # define fi first\n    # define se second\n    # define Endl putchar('\\n')\n    # define writc(x, c) fwrit(x), putchar(c)\n    // # define int long long\n    typedef long long ll;\n    typedef pair<int, int> pii;\n    typedef unsigned long long ull;\n    typedef unsigned int uint;\n    template<class T>inline T Max(const T x, const T y){return x < y ? y : x;}\n    template<class T>inline T Min(const T x, const T y){return x < y ? x : y;}\n    template<class T>inline T fab(const T x){return x < 0 ? -x : x;}\n    template<class T>inline void getMax(T& x, const T y){x = Max(x, y);}\n    template<class T>inline void getMin(T& x, const T y){x = Min(x, y);}\n    template<class T>T gcd(const T x, const T y){return y ? gcd(y, x % y) : x;}\n    template<class T>inline T readin(T x){\n        x=0; int f = 0; char c;\n        while((c = getchar()) < '0' || '9' < c) if(c == '-') f = 1;\n        for(x = (c ^ 48); '0' <= (c = getchar()) && c <= '9'; x = (x << 1) + (x << 3) + (c ^ 48));\n        return f ? -x : x;\n    }\n    template<class T>void fwrit(const T x){\n        if(x < 0)return putchar('-'), fwrit(-x);\n        if(x > 9)fwrit(x / 10); putchar(x % 10 ^ 48);\n    }\n}\nusing namespace Elaina;\n\nconst int maxn = 1e5;\nconst ll inf = (1ll << 50);\n\nint n, q; ll w;\n\nstruct edge{int to, nxt; ll w;\n    edge(const int T = 0, const int N = 0, const ll W = 0) : to(T), nxt(N), w(W){}\n}e[maxn * 2 + 5];\nint ecnt = 1;// pay attention!\nint tail[maxn + 5];\ninline void add_edge(const int u, const int v, const ll w){\n    e[++ ecnt] = edge(v, tail[u], w); tail[u] = ecnt;\n    e[++ ecnt] = edge(u, tail[v], w); tail[v] = ecnt;\n}\n\ninline void init(){\n    n = readin(1), q = readin(1); w = readin(1ll);\n    int a, b; ll c;\n    rep(i, 1, n - 1){\n        a = readin(1), b = readin(1), c = readin(1ll);\n        add_edge(a, b, c);\n    }\n}\n\nll dis[maxn + 5];\nint sz[maxn + 5], wson[maxn + 5], dep[maxn + 5], fa[maxn + 5];\nvoid dfs1(const int u, const int par){\n    sz[u] = 1, dep[u] = dep[par] + 1, fa[u] = par;\n    for(int i = tail[u], v; i; i = e[i].nxt)\n        if((v = e[i].to) != par){\n        dis[v] = dis[u] + e[i].w;\n        dfs1(v, u), sz[u] += sz[v];\n        if(sz[v] > sz[wson[u]]) wson[u] = v;\n    }\n}\nint c[maxn + 5], dfn[maxn + 5], tp[maxn + 5], times;\nvoid dfs2(const int u, const int par){\n    c[dfn[u] = ++ times] = u;\n    if(!wson[u]) return;\n    tp[wson[u]] = tp[u], dfs2(wson[u], u);\n    for(int i = tail[u], v; i; i = e[i].nxt)\n        if((v = e[i].to) != par && v != wson[u])\n            dfs2(tp[v] = v, u);\n}\n\ninline int findlca(int u, int v){\n    while(tp[u] != tp[v]){\n        // printf(\"Now u == %d, v == %d\\n\", u, v);\n        if(dep[tp[u]] < dep[tp[v]]) swap(u, v);\n        u = fa[tp[u]];\n    }\n    return dep[u] < dep[v] ? u : v;\n}\n\ninline int lowbit(const int i){return i & (-i);}\n/** @brief maintain the distance of the nodes*/\nstruct BIT{\n    ll c[maxn + 5];\n    inline void modify(int i, const ll x){\n        for(; i <= n; i += lowbit(i))\n            c[i] += x;\n    }\n    inline void modify(const int l, const int r, const ll x){\n        modify(l, x), modify(r + 1, -x);\n    }\n    inline ll query(int i){\n        ll ret = 0;\n        for(; i > 0; i -= lowbit(i)) ret += c[i];\n        return ret;\n    }\n}bit;\n\ninline ll query_dis(const int u, const int v){\n    // printf(\"query_dis :> u == %d, v == %d\\n\", u, v);\n    if(u == 0 || v == 0) return -inf;\n    int lca = findlca(u, v);\n    return bit.query(dfn[u]) + bit.query(dfn[v]) - 2 * bit.query(dfn[lca]);\n}\n\nstruct diameter{\n    int c[2]; ll d;\n    inline diameter operator &(const diameter rhs) const{\n        diameter ret;\n        if(d < rhs.d) ret = rhs;\n        else ret = (*this);\n        rep(i, 0, 1) rep(j, 0, 1){\n            int x = c[i], y = rhs.c[j];\n            ll dis;\n            if((dis = query_dis(x, y)) > ret.d){\n                ret.d = dis;\n                ret.c[0] = x, ret.c[1] = y;\n            }\n        }\n        return ret;\n    }\n};\n\n/** @brief maintain the particular interval's diameter*/\ndiameter tre[maxn << 2 | 2];\n# define ls (i << 1)\n# define rs (i << 1 | 1)\n# define mid ((l + r) >> 1)\n# define _lq ls, l, mid\n# define _rq rs, mid + 1, r\ninline void pushup(const int i){\n    tre[i] = tre[ls] & tre[rs];\n}\nvoid Build(const int i = 1, const int l = 1, const int r = n){\n    if(l == r){\n        tre[i].c[0] = c[l];\n        tre[i].d = -inf;\n        return;\n    }\n    Build(_lq), Build(_rq);\n    pushup(i);\n}\nvoid Modify(const int L, const int R, const int i = 1, const int l = 1, const int r = n){\n    if(L <= l && r <= R) return;\n    if(L <= mid) Modify(L, R, _lq);\n    if(mid < R) Modify(L, R, _rq);\n    pushup(i);\n}\nvoid print(const int i = 1, const int l = 1, const int r = n){\n    if(l != r) print(_lq), print(_rq);\n    printf(\"tre[%d] :> l == %d, r == %d, (%d, %d, %lld)\\n\", i, l, r, tre[i].c[0], tre[i].c[1], tre[i].d);\n}\n\nsigned main(){\n    init();\n    dfs1(1, 0);\n    // puts(\"finished 1!\");\n    dfs2(tp[1] = 1, 0);\n    // puts(\"finished 2!\");\n    rep(i, 1, n){\n        // \u6ce8\u610f\u6b64\u5904\u4f20\u7684\u4e0b\u6807\n        bit.modify(i, dis[c[i]] - dis[c[i - 1]]);\n        // printf(\"bit[%d].insert %lld\\n\", i, dis[c[dfn[i]]] - dis[c[dfn[i - 1]]]);\n    }\n    // puts(\"finished 3!\");\n    // rep(i, 1, n){\n    //     printf(\"node %d :> sz == %d, wson == %d, fa == %d, dep == %d, dis == %lld, tp == %d, dfn == %d\\n\", i, sz[i], wson[i], fa[i], dep[i], dis[i], tp[i], dfn[i]);\n    // }\n    // rep(i, 1, n) printf(\"dis %d == %lld\\n\", i, bit.query(dfn[i]));\n\n    Build();\n    // printf(\"ans 1 == %lld\\n\", tre[1].d);\n    // print();\n    // rep(i, 1, n) printf(\"dis %d == %lld\\n\", i, bit.query(i));\n    ll las = 0, E; int D;\n    while(q --){\n        D = (0ll + readin(1) + las) % (n - 1) + 1;\n        E = (readin(1ll) + las) % w;\n        D <<= 1;\n        int u = e[D].to;\n        if(dep[u] < dep[e[D ^ 1].to])\n            u = e[D ^ 1].to;\n        // printf(\"update u == %d\\n\", u);\n        ll delta = E - e[D].w;\n        e[D].w = e[D ^ 1].w = E;\n        // printf(\"delta == %lld\\n\", delta);\n        bit.modify(dfn[u], dfn[u] + sz[u] - 1, delta);\n        Modify(dfn[u], dfn[u] + sz[u] - 1);\n        writc(las = tre[1].d, '\\n');\n        // rep(i, 1, n) printf(\"dis %d == %lld\\n\", i, bit.query(dfn[i]));\n        // print();\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1609844855,
        "uid": 125355,
        "name": "Vladilena",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1192B \u3010Dynamic Diameter\u3011"
    },
    {
        "content": "\n\u6ca1\u60f3\u5230\u554a\u6ca1\u60f3\u5230\n\n\u8c03\u4e862h\u7684\u52a8\u6001\u70b9\u5206\u6cbb,\u770b\u4e86\u770b\u9898\u89e3\u533a,\u843d\u6cea\u4e86,\u5168\u662f\u7ebf\u6bb5\u6811+\u6b27\u62c9\u5e8f\n\n\u52a8\u6001\u70b9\u5206\u6cbb\u53ef\u4ee5\u8f7b\u677e\u505a\u5230\u4e24\u4e2a$\\log$,\u770b\u770b\u672c\u9898\u7684\u6570\u636e\u8303\u56f4\u548c\u65f6\u9650,\u4e5f\u611f\u89c9\u663e\u7136\u53ef\u8fc7.\n\n\u5177\u4f53\u505a\u6cd5\u5c31\u662f:\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5206\u6cbb\u4e2d\u5fc3,\u7ef4\u62a4\u4e00\u4e2a\u4ee5\u5f53\u524d\u5206\u6cbb\u4e2d\u5fc3\u8fdb\u884c\u6df1\u641c$dfs$\u5e8f\u4e3a\u4e0b\u6807\u7684\u4e00\u68f5\u7ebf\u6bb5\u6811,\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u70b9\u5b58\u4e00\u4e2a\u6743\u503c\u548c\u4e24\u4e2a$pair$,\u8fd9\u4e2a\u6743\u503c\u7b49\u4f1a\u518d\u8bf4,\u4e24\u4e2a$pair$\u5206\u522b\u8bb0\u5f55\u6700\u5927\u6df1\u5ea6\u7684\u5bf9\u5e94\u5b50\u6811,\u6700\u5927\u6df1\u5ea6\u7684\u503c,\u6b21\u5927\u6df1\u5ea6\u7684\u5bf9\u5e94\u5b50\u6811,\u6b21\u5927\u6df1\u5ea6\u7684\u503c,\u5408\u5e76\u4e24\u4e2a\u70b9\u7684\u65f6\u5019\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b.\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5206\u6cbb\u4e2d\u5fc3\u6765\u8bf4,\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u7684\u4e24\u6761\u8def\u5f84\u52a0\u8d77\u6765\u5c31\u662f\u7b54\u6848.\n\n\u4fee\u6539\u5c31\u662f\u5728\u70b9\u5206\u6811\u4e0a\u8df3,\u5efa\u6811\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e0b$x$\u5728$y$\u8fd9\u4e2a\u5206\u6cbb\u4e2d\u5fc3\u5bf9\u5e94\u7684$dfs$\u5e8f\u662f\u591a\u5c11,\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5206\u6cbb\u4e2d\u5fc3\u8bb0\u4e00\u8bb0$dfs$\u5e8f\u4e3a$x$\u7684\u5b50\u6811\u53f3\u7aef\u70b9$dfs$\u5e8f\u548c$dfs$\u5e8f\u4e3a$x$\u5728\u6811\u4e0a\u7684\u7236\u4eb2.\u628a\u6bcf\u4e00\u4e2a\u5206\u6cbb\u4e2d\u5fc3\u7684\u7b54\u6848\u4e22\u8fdb\u4e00\u4e2amultiset\u91cc\u9762,\u66f4\u6539\u7684\u65f6\u5019\u5c31\u627e\u51fa\u6765\u5220\u6389,\u518d\u63d2\u5165\u65b0\u7684,\u6539\u8fb9\u6743\u76f8\u5f53\u4e8e\u5bf9\u4e8e\u4e00\u4e2a\u5206\u6cbb\u4e2d\u5fc3\u6539\u4e00\u6bb5\u7684\u6df1\u5ea6,\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u8981\u8bb0\u8fd9\u4e24\u4e2a\u503c\u7684\u539f\u56e0.\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86,~~\u7b80(dai)\u5355(ma)\u6613(e)\u61c2(xin)~~\n\n```cpp\n#include<bits/stdc++.h>\n#define pii pair<int,long long>\nusing namespace std;\n\nconst int N=100010;\nstruct tree{\n\tpii mmax,cmax;\n\tint ls,rs;\n\tlong long tag,ans;\n}tr[N*40];\nstruct edge{\n\tint y,nex;\n\tlong long c;\n}s[N<<1];\nint first[N],len=0,root=0,tot[N],son[N],siz[N],fa[N],dep[N],rt[N];\nvector<int> R[N],F[N];//R\u5f53\u524ddfs\u5e8f\u5b50\u6811\u5185\u53f3\u7aef\u70b9\u7684dfs\u5e8f,F\u5f53\u524ddfs\u5e8f\u8282\u70b9\u7684\u7236\u4eb2(\u4e0d\u662f\u7236\u4eb2\u7684dfs\u5e8f)\nmap<int,int> mp[N];//\u70b9->dfs\u5e8f\nint sz;\nmultiset<long long> ANS;\nmultiset<long long>::iterator it;\nbool tf[N];\nint n,q,T;\nlong long w;\n\nvoid ins(int x,int y,long long c){s[++len]=(edge){y,first[x],c};first[x]=len;}\n\nint pa,ppa;\nvector<pii>*P;\n\nvoid update(tree&now,pii ad){\n\tif(now.mmax.second<ad.second){\n\t\tif(now.mmax.first!=ad.first) now.cmax=now.mmax;\n\t\tnow.mmax=ad;\n\t}\n\telse if(now.mmax.first!=ad.first && ad.second>now.cmax.second) now.cmax=ad;\n}\n\nvoid upd(int now){\n\ttr[now].mmax=tr[tr[now].ls].mmax;tr[now].cmax=tr[tr[now].ls].cmax;\n\tupdate(tr[now],tr[tr[now].rs].mmax);\n\tupdate(tr[now],tr[tr[now].rs].cmax);\n\ttr[now].ans=tr[now].mmax.second+tr[now].cmax.second;\n}\n\nvoid add_tag(int now,long long t){//\u4e0d\u7528\u66f4\u65b0cmax,\u56e0\u4e3acmax\u5fc5\u4e0d\u5b58\u5728\n\ttr[now].tag+=t;\n\ttr[now].mmax.second+=t;\n\ttr[now].ans+=t;\n}\n\nvoid psd(int now){\n\tif(tr[now].tag){\n\t\tadd_tag(tr[now].ls,tr[now].tag);\n\t\tadd_tag(tr[now].rs,tr[now].tag);\n\t\ttr[now].tag=0;\n\t}\n}\n\nvoid gi(int&now,vector<pii>&S,int l,int r){\n\tnow=++T;\n\tif(l==r){\n\t\ttr[now].mmax=S[l];\n\t\ttr[now].ans=S[l].second;\n\t\ttr[now].cmax=make_pair(0,0);\n\t\treturn ;\t\n\t}\n\tint mid=(l+r)/2;\n\tgi(tr[now].ls,S,l,mid);\n\tgi(tr[now].rs,S,mid+1,r);\n\tupd(now);\n}\n\nvoid add(int now,int x,int y,long long t,int l,int r){\n\tif(x==l && y==r){add_tag(now,t);return ;}\n\tpsd(now);\n\tint mid=(l+r)/2;\n\tif(y<=mid) add(tr[now].ls,x,y,t,l,mid);\n\telse if(mid<x) add(tr[now].rs,x,y,t,mid+1,r);\n\telse add(tr[now].ls,x,mid,t,l,mid),add(tr[now].rs,mid+1,y,t,mid+1,r);\n\tupd(now);\n}\n\nvoid gp(int x,int fa,long long dep,vector<pii>&S,int&dfn){\n\tint now=++dfn;S[now]=make_pair(pa,dep);F[ppa][now]=fa;mp[ppa][x]=now;sz++;\n\tfor(int i=first[x];i!=0;i=s[i].nex) if(!tf[s[i].y] && s[i].y!=fa)\n\t\tgp(s[i].y,x,dep+s[i].c,S,dfn);\n\tR[ppa][now]=dfn;\n}\n\nvoid fdrt(int x,int fa){\n\ttot[x]=1;son[x]=0;\n\tfor(int i=first[x];i!=0;i=s[i].nex) if(!tf[s[i].y] && s[i].y!=fa){\n\t\tfdrt(s[i].y,x);\n\t\ttot[x]+=tot[s[i].y];\n\t\tif(tot[s[i].y]>tot[son[x]]) son[x]=s[i].y;\n\t}\n\tif(max(tot[son[x]],sz-tot[x])<max(tot[son[root]],sz-tot[root])) root=x;\n}\n\nvoid build(int x,int ff){\n\troot=0;fdrt(x,0);x=root;\n\tvector<pii> S;\n\tfa[x]=ff;dep[x]=dep[ff]+1;tf[x]=true;siz[x]=sz;\n\tR[x].resize(sz+1);F[x].resize(sz+1);S.resize(sz+1);\n\tR[x].clear();F[x].clear();S.clear();mp[x].clear();\n\tR[x][1]=sz;F[x][1]=0;S[1]=make_pair(x,0);mp[x][x]=1;\n\tint dfn=1;ppa=x;\n\tfor(int i=first[x];i!=0;i=s[i].nex) if(!tf[s[i].y]){\n\t\tsz=0;pa=s[i].y;ppa=x;\n\t\tgp(s[i].y,x,s[i].c,S,dfn);build(s[i].y,x);\n\t}\n\tgi(rt[x],S,1,siz[x]);\n\tANS.insert(tr[rt[x]].ans);\n}\n\nlong long chg(int op,long long c){\n\tint x=s[op].y,y=s[op-1].y,p=x,q=y,now;\n\tif(dep[y]<dep[x]) swap(x,y);\n\twhile(dep[y]>dep[x]) y=fa[y];\n\twhile(x!=y) x=fa[x],y=fa[y];\n\tnow=x;x=p;y=q;\n\twhile(now){\n\t\tint dfn=mp[now][x];\n\t\tif(F[now][dfn]!=y) swap(x,y),dfn=mp[now][x];\n\t\tit=ANS.lower_bound(tr[rt[now]].ans);ANS.erase(it);\n\t\tadd(rt[now],dfn,R[now][dfn],c-s[op].c,1,siz[now]);\n\t\tANS.insert(tr[rt[now]].ans);\n\t\tnow=fa[now];\n\t}\n\ts[op].c=c;\n\tit=ANS.end();it--;\n\treturn *it;\n}\n\nint main(){\n\tscanf(\"%d %d %lld\",&n,&q,&w);\n\tint x,y;\n\tlong long c;\n\tfor(int i=1;i<n;i++) \n\t\tscanf(\"%d %d %lld\",&x,&y,&c),ins(x,y,c),ins(y,x,c);\n\tsz=n;build(1,0);\n\tlong long las=0;\n\twhile(q--){\n\t\tscanf(\"%d %lld\",&x,&c);\n\t\tx=(x+las)%(n-1)+1,c=(c+las)%w;\n\t\tprintf(\"%lld\\n\",las=chg(x*2,c));\n\t}\n}\n```",
        "postTime": 1600417987,
        "uid": 29093,
        "name": "Deep_Kevin",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1192B \u3010Dynamic Diameter\u3011"
    },
    {
        "content": "the 300th Blog.\n\n**\u9898\u610f** : \u7ed9\u51fa\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u5e26\u6743\u65e0\u5411\u6811\u3002\n\n\u8d44\u74f7\u4fee\u6539\u67d0\u6761\u8fb9\u7684\u8fb9\u6743,\u5e76\u56de\u7b54\u6811\u7684\u76f4\u5f84\u3002 \n\n\u5f3a\u5236\u5728\u7ebf\u3002$n,q\\leq 10^5$ ,\u8fb9\u6743\u5747\u4e3a\u6b63\u3002\n\n------------\n\n\u53ef\u4ee5\u76f4\u63a5\u65e0\u8111 `DDP` ,\u7136\u800c\u590d\u6742\u5ea6,\u5e38\u6570,\u4ee3\u7801\u91cf\u90fd\u6bd4\u8f83\u5927\u3002\n\n\u53e6\u4e00\u4e2a\u6bd4\u8f83\u5c0f\u6e05\u65b0\u7684\u505a\u6cd5\u662f\u7ef4\u62a4**\u6b27\u62c9\u5e8f**\u3002\n\n\u6b27\u62c9\u5e8f : `dfs` \u904d\u5386\u67d0\u68f5\u6811,\u6bcf\u6b21**\u7ecf\u8fc7**\u67d0\u70b9\u65f6,\u5c06\u5176\u5199\u5165\u6b27\u62c9\u5e8f\u3002\n\n\u67d0\u4e2a\u70b9\u5c06\u4f1a\u88ab\u52a0\u5165\u5ea6\u6570\u6b21,\u6839\u8282\u70b9\u4f1a\u989d\u5916\u591a\u4e00\u6b21,\u6b27\u62c9\u5e8f\u7684\u603b\u957f\u5c31\u662f $2n-1$ \u7684\u3002\n\n\u6211\u4eec\u8bbe\u70b9 $u$ \u7b2c\u4e00\u6b21\u5199\u5165\u6b27\u62c9\u7684\u4f4d\u7f6e\u662f $in[u]$ ,\u53ef\u4ee5\u89c6\u4f5c\u7c7b\u4f3c`dfs`\u5e8f\u7684\u4e1c\u897f\u3002\n\n\u7136\u540e\u6709\u4e00\u6761\u5f88\u597d\u7684\u6027\u8d28 :\n\n- $lca(u,v)$ \u4e00\u5b9a\u5728 $\\big[in[u],in[v]\\big]$ \u4e2d\u51fa\u73b0,\u4e14\u662f\u6df1\u5ea6\u6700\u5c0f\u7684\u90a3\u4e2a\u70b9\u3002\n\n  $u,v$ \u663e\u7136\u4e00\u5b9a\u90fd\u5728 $lca(u,v)$ \u7684**\u4e0d\u540c**\u5b50\u6811\u4e2d\u3002\n\n  \u6240\u4ee5,\u904d\u5386\u5b8c $u$ \u4e4b\u540e,\u56de\u6eaf\u5230 $lca$ \u624d\u80fd\u5411\u4e0b\u8fbe\u5230 $v$ ,\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86 $lca$ \u7684\u51fa\u73b0\u3002\n\n  \u5176\u6b21,\u8bbf\u95ee\u5230 $v$ \u65f6,\u73b0\u5728\u5bf9 $lca$ \u5b50\u6811\u7684\u8bbf\u95ee\u8fd8\u672a\u7ed3\u675f,\u4e0d\u53ef\u80fd\u6d89\u53ca\u5230\u66f4\u6d45\u7684\u70b9\u3002\n  \n  **\u9644** : \u5982\u679c\u8fd9\u5f20\u56fe\u6709\u8d1f\u6743\u8fb9,\u8be5\u7ed3\u8bba\u5c31\u4e0d\u6210\u7acb,\u56e0\u4e3a\u53ef\u80fd\u513f\u5b50\u6bd4\u7956\u5148\u201c\u6d45\u201d\u3002\n  \n\u63a5\u4e0b\u6765,\u6211\u4eec\u89c2\u5bdf\u8def\u5f84\u957f\u5ea6\u7684\u8ba1\u7b97\u5f0f:\n\n$$dep[u]+dep[v]-2*dep[lca(u,v)]$$\n\n\u653e\u5230\u6b27\u62c9\u5e8f\u4e0a\u770b,\u5c31\u53d8\u6210\u4e86:\n\n$$dep[u]+dep[v]-2*\\min\\limits_{t=u}^vdep[t]$$\n\n\u8fd9\u5c31\u662f\u4e00\u4e2a\u5e8f\u5217\u95ee\u9898,\u8003\u8651\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u4e0a\u8ff0\u5f0f\u5b50\u6700\u5927\u7684\u5bf9\u5b50 $(u,v)$ ,\u5373\u4e3a\u76f4\u5f84\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4 $[l,r]$ :\n\n\u8bbe $m0$ \u4e3a\u533a\u95f4 $dep$ \u6700\u5c0f\u503c, $m1$ \u4e3a\u6700\u5927\u503c\u3002\n\n$ls$ \u4e3a$dep[u]-2\\min\\limits_{t=l}^udep[t]$ \u7684\u6700\u5927\u503c\u3002\u4e5f\u5c31\u662f\u53ea\u6709\u5de6\u534a\u8fb9\u4e24\u4e2a\u70b9\u3002\n\n$rs$ \u4e3a$dep[u]-2\\min\\limits_{t=u}^rdep[t]$ \u7684\u6700\u5927\u503c\u3002\u4e5f\u5c31\u662f\u53ea\u6709\u53f3\u534a\u8fb9\u4e24\u4e2a\u70b9\u3002\n\n$s$ \u4e3a\u533a\u95f4\u5185\u6700\u5927\u7684\u76f4\u5f84\u3002\u4e5f\u5c31\u662f\u4e09\u4e2a\u70b9\u90fd\u5168\u4e86\u3002\n\n\u8bbe\u6211\u4eec\u5408\u5e76\u7684\u4e24\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u4e3a $u,v$\u3002\n\n\u5f53\u8f6c\u79fb\u65f6,\u6700\u5927\u7684\u76f4\u5f84\u53ef\u4ee5\u53d6\u5de6\u4fa7,\u53ef\u4ee5\u53d6\u53f3\u4fa7,\u4e5f\u53ef\u4ee5\u8de8\u8d8a\u5de6\u53f3\u3002\n\n\u6709\u4e24\u79cd\u65b9\u5f0f\u8de8\u8d8a:\n\n- $lca$ \u5728\u5de6\u8fb9 : $u.rs+v.m1$\n\n- $lca$ \u5728\u53f3\u8fb9 : $u.m1+v.ls$\n\n\u5bb9\u6613\u611f\u77e5\u6700\u4f18\u89e3\u4e00\u5b9a\u662f\u5176\u4e2d\u4e00\u79cd\u3002\n\n$ls$ \u53ef\u4ee5\u4e24\u7aef\u90fd\u5728\u5de6\u4fa7 $u.ls$ ,\u4e5f\u53ef\u4ee5\u4e24\u7aef\u90fd\u5728\u53f3\u4fa7,\u53d6 $v.ls$\u3002\n\n\u6b64\u5916,\u8fd8\u53ef\u4ee5\u4e00\u7aef\u5728\u5de6\u4fa7,\u4e00\u6bb5\u5728\u53f3\u4fa7,\u5373\u4e3a $v.m1-2u.m0$\u3002\n\n$rs$ \u7684\u5904\u7406\u65b9\u6cd5\u7c7b\u4f3c\u3002$m0,m1$ \u7684\u5904\u7406\u65b9\u6cd5\u662f\u7ecf\u5178\u7684,\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u800c\u6211\u4eec\u7684\u4fee\u6539\u64cd\u4f5c\u53ef\u4ee5\u89c6\u4f5c\u5bf9\u4e00\u9897\u5b50\u6811\u7684 $dep$ \u52a0\u4e0a\u67d0\u4e2a\u503c\u3002\n\n\u53ef\u4ee5\u8f6c\u4e3a\u533a\u95f4\u52a0,\u53ea\u9700\u8981\u628a\u5bf9\u5e94\u7684\u503c\u6309\u7167\u7aef\u70b9\u4e2a\u6570\u6539\u6539\u5c31\u597d,\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n\u7efc\u4e0a,\u5373\u53ef\u5728 $O(n\\log n)$ \u7684\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u3002\n\n\u4e0d\u5230`20min`\u5c31\u5199\u5b8c\u4e86,\u53ef\u4ee5\u8bf4\u8fd8\u662f\u975e\u5e38\u5c0f\u6e05\u65b0\u7684\u3002(\u7136\u800c\u6570\u7ec4\u5f00\u5c0f\u4ea4\u4e86\u4e24\u6b21qwq)\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#define pb push_back\n#define ll long long\n#define MaxN 150500\nusing namespace std;\nvector<int> g[MaxN];\nvector<ll> l[MaxN];\nvoid adl(int f,int t,ll len){\n  g[f].pb(t);l[f].pb(len);\n  g[t].pb(f);l[t].pb(len);\n}\nll dep[MaxN];\nint p[MaxN<<1],in[MaxN],out[MaxN],tim;\nvoid pfs(int u)\n{\n  p[in[u]=++tim]=u;\n  for (int i=0,v;i<g[u].size();i++)\n    if (!in[v=g[u][i]]){\n      dep[v]=dep[u]+l[u][i];\n      pfs(v);\n      p[++tim]=u;\n    }\n  out[u]=tim;\n}\nstruct Node{\n  ll m0,m1,ls,rs,s,tg;\n  void ladd(ll c)\n  {tg+=c;m0+=c;m1+=c;ls-=c;rs-=c;}\n}a[MaxN<<3];\ninline void up(int u)\n{\n  int l=u<<1,r=u<<1|1;\n  a[u].m0=min(a[l].m0,a[r].m0);\n  a[u].m1=max(a[l].m1,a[r].m1);\n  a[u].ls=max(max(a[l].ls,a[r].ls),-2*a[l].m0+a[r].m1);\n  a[u].rs=max(max(a[l].rs,a[r].rs),a[l].m1-2*a[r].m0);\n  a[u].s=max(max(a[l].s,a[r].s),max(a[l].rs+a[r].m1,a[l].m1+a[r].ls));\n}\ninline void ladd(int u)\n{\n  if (a[u].tg){\n    a[u<<1].ladd(a[u].tg);\n    a[u<<1|1].ladd(a[u].tg);\n    a[u].tg=0;\n  }\n}\nvoid build(int l=1,int r=tim,int u=1)\n{\n  if (l==r){\n    a[u].m0=a[u].m1=dep[p[l]];\n    a[u].ls=a[u].rs=-dep[p[l]];\n    return ;\n  }int mid=(l+r)>>1;\n  build(l,mid,u<<1);\n  build(mid+1,r,u<<1|1);\n  up(u);\n}\nint wfl,wfr;ll wfc;\nvoid add(int l=1,int r=tim,int u=1)\n{\n  if (wfl<=l&&r<=wfr){\n    a[u].ladd(wfc);\n    return ;\n  }ladd(u);\n  int mid=(l+r)>>1;\n  if (wfl<=mid)add(l,mid,u<<1);\n  if (wfr>mid)add(mid+1,r,u<<1|1);\n  up(u);\n}\nint n,m;\nstruct line\n{int f,t;ll w;}s[MaxN];\nint main()\n{\n  ll lim,w,las=0;\n  scanf(\"%d%d%lld\",&n,&m,&lim);\n  for (int i=1,f,t;i<n;i++){\n    scanf(\"%d%d%lld\",&s[i].f,&s[i].t,&s[i].w);\n    adl(s[i].f,s[i].t,s[i].w);\n  }pfs(1);build();\n  for (int i=1,pl;i<=m;i++){\n    scanf(\"%d%lld\",&pl,&w);\n    pl=(pl+las)%(n-1)+1;\n    w=(w+las)%lim;\n    wfc=w-s[pl].w;s[pl].w=w;\n    int u=s[pl].f;\n    if (dep[s[pl].t]>dep[u])u=s[pl].t;\n    wfl=in[u];wfr=out[u];\n    add();\n    printf(\"%lld\\n\",las=a[1].s);\n  }return 0;\n}\n```",
        "postTime": 1591594192,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1192B \u3010Dynamic Diameter\u3011"
    },
    {
        "content": "## CF1192B Dynamic Diameter\n\n### \u9898\u610f\n\n\u4e00\u9897\u5e26\u6743\u6811\uff0c\u6bcf\u6b21\u66f4\u6539\u4e00\u6761\u8fb9\u7684\u6743\uff0c\u6bcf\u6b21\u4fee\u6539\u540e\u6c42\u51fa\u6700\u5927\u76f4\u5f84\u3002\u5f3a\u5236\u5728\u7ebf\u3002\n\n### \u601d\u8def\n\n$O(n\\log^2n)$ \u7684\u66b4\u529b\u505a\u6cd5\u3002\n\n\u6839\u636e\u7ecf\u5178\u7ed3\u8bba\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u70b9\u96c6\u7684\u6811\u4e0a\u6700\u5927\u76f4\u5f84\uff08\u6743\u503c\u975e\u8d1f\uff09\uff0c\u5e76\u96c6\u70b9\u96c6\u7684\u6811\u4e0a\u6700\u5927\u76f4\u5f84\u7684\u7aef\u70b9\u4e00\u5b9a\u662f\u539f\u56db\u4e2a\u7aef\u70b9\u4e2d\u7684\u4e24\u4e2a\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u70b9\u96c6\uff0c\u5408\u5e76\u65f6 $O(\\log n)$ \u67e5\u8be2\u4e24\u70b9\u95f4\u8ddd\u79bb\u5408\u5e76\u5c31\u53ef\u4ee5\u505a\u5230 $O(n\\log^2n)$ \u7684\u590d\u6742\u5ea6\u4e86\u3002\n\n\u601d\u8003\u5982\u4f55\u652f\u6301\u5728\u7ebf\u4fee\u6539\u8fb9\u6743\u3002\u4e24\u70b9\u95f4\u8ddd\u79bb\u4e3a $dis(x)+dis(y)-2*dis(lca(x,y))$ \u90a3\u4e48\u5148\u6811\u5256\u53d1\u73b0\u4fee\u6539\u4e00\u6761\u8fb9\u7684\u6743\u5b9e\u9645\u4e0a\u662f\u5c06\u5b50\u6811\u5185 $dis$ \u589e\u52a0\uff0c\u90a3\u4e48\u5b50\u6811\u5c31\u662f\u533a\u95f4\u52a0\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4fee\u6539\u3002\n\n\u8003\u8651\u54ea\u4e9b\u90e8\u5206\u7684\u7ebf\u6bb5\u6811\u4e0a\u7684\u70b9\u96c6\u6700\u5927\u76f4\u5f84\u88ab\u6539\u4e86\u3002\u53d1\u73b0\u5b50\u6811\u5185\u548c\u5b50\u6811\u5916\u7684\u6700\u5927\u76f4\u5f84\u4e0d\u4f1a\u53d8\u5316\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u66f4\u6539\u5b50\u6811\u5185\u4e0e\u5916\u4e4b\u95f4\u5408\u5e76\u7684\u6700\u5927\u76f4\u5f84\u5c31\u884c\u4e86\u3002\u6211\u4eec\u6309\u7167 $dfn$ \u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\uff0c\u90a3\u4e48\u6211\u4eec\u6bcf\u6b21\u53ea\u9700\u8981\u5c06\u5b50\u6811\u533a\u95f4\u91cd\u65b0 `pushup` \u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cctype>\n#include<cstdlib>\n#include<utility>\nusing namespace std;\ninline long long read(){\n\tlong long x=0;int w=0;char c=getchar();\n\twhile(!isdigit(c)) w|=c=='-',c=getchar();\n\twhile(isdigit(c)) x=x*10+(c^48),c=getchar();\n\treturn w?-x:x;\n}\nnamespace star\n{\n\tconst int maxn=1e5+10;\n\tint n,q;\n\tint ecnt=1,head[maxn],to[maxn<<1],nxt[maxn<<1],go[maxn];\n\tlong long W,w[maxn],dis[maxn];\n\tinline void addedge(){\n\t\tint a=read(),b=read();\n\t\tto[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt;\n\t\tto[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt;\n\t\tw[ecnt>>1]=read();\n\t}\n\tint dep[maxn],fa[maxn],top[maxn],siz[maxn],son[maxn],dfn[maxn],id[maxn];\n\tvoid dfs1(int x,int f){\n\t\tfa[x]=f,dep[x]=dep[f]+1,siz[x]=1;\n\t\tfor(int u,i=head[x];i;i=nxt[i]) if((u=to[i])!=f){\n\t\t\tdis[u]=dis[x]+w[i>>1],dfs1(u,x),go[i>>1]=u;\n\t\t\tif(siz[u]>siz[son[x]]) son[x]=u;\n\t\t\tsiz[x]+=siz[u];\n\t\t}\n\t}\n\tvoid dfs2(int x,int topf){\n\t\ttop[x]=topf,dfn[x]=++dfn[0],id[dfn[0]]=x;\n\t\tif(!son[x]) return;\n\t\tdfs2(son[x],topf);\n\t\tfor(int u,i=head[x];i;i=nxt[i]) if((u=to[i])!=fa[x] and u!=son[x]) dfs2(u,u);\n\t}\n\tinline int LCA(int x,int y){\n\t\twhile(top[x]!=top[y]) dep[top[x]]>dep[top[y]]?(x=fa[top[x]]):(y=fa[top[y]]);\n\t\treturn dep[x]<dep[y]?x:y;\n\t}\n\t#define ls (ro<<1)\n\t#define rs (ro<<1|1)\n\t#define mid ((l+r)>>1)\n\tnamespace S{\n\t\tlong long c[maxn];\n\t\tinline void upd(int x,long long k){for(;x<=n;x+=x&-x) c[x]+=k;}\n\t\tinline long long query(int x){long long ans=dis[id[x]];for(;x;x-=x&-x) ans+=c[x];return ans;}\n\t\tinline void update(int x,int y,long long w){upd(x,w),upd(y+1,-w);}\n\t}\n\tinline long long Dis(pair<int,int> a){return S::query(dfn[a.first])+S::query(dfn[a.second])-2*S::query(dfn[LCA(a.first,a.second)]);}\n\tnamespace T{\n\t\tpair<int,int> e[maxn<<2];\n\t\tinline pair<int,int> merge(const pair<int,int>& a,const pair<int,int>& b){\n\t\t\tpair<int,int> p[6]={a,b,make_pair(a.first,b.first),make_pair(a.first,b.second),make_pair(a.second,b.first),make_pair(a.second,b.second)};\n\t\t\tlong long dis[6];\n\t\t\tfor(int i=0;i<6;i++) dis[i]=Dis(p[i]);\n\t\t\treturn p[max_element(dis,dis+6)-dis];\n\t\t}\n\t\tvoid build(int ro=1,int l=1,int r=n){\n\t\t\tif(l==r) return e[ro]=make_pair(id[l],id[l]),void();\n\t\t\tbuild(ls,l,mid),build(rs,mid+1,r);\n\t\t\te[ro]=merge(e[ls],e[rs]);\n\t\t}\n\t\tvoid update(int x,int y,int ro=1,int l=1,int r=n){\n\t\t\tif(x==l and y==r) return;\n\t\t\tif(y<=mid) update(x,y,ls,l,mid);\n\t\t\telse if(x>mid) update(x,y,rs,mid+1,r);\n\t\t\telse update(x,mid,ls,l,mid),update(mid+1,y,rs,mid+1,r);\n\t\t\te[ro]=merge(e[ls],e[rs]);\n\t\t}\n\t}\n\t#undef ls\n\t#undef rs\n\t#undef mid\n\tinline void work(){\n\t\tn=read(),q=read(),W=read();\n\t\tfor(int i=1;i<n;i++) addedge();\t\n\t\tdfs1(1,0),dfs2(1,1);\n\t\tT::build();\n\t\tlong long ans=0;\n\t\twhile(q--){\n\t\t\tint e=(read()+ans)%(n-1)+1;\n\t\t\tlong long v=(read()+ans)%W;\n\t\t\tS::update(dfn[go[e]],dfn[go[e]]+siz[go[e]]-1,v-w[e]),w[e]=v;\n\t\t\tT::update(dfn[go[e]],dfn[go[e]]+siz[go[e]]-1);\n\t\t\tprintf(\"%lld\\n\",ans=Dis(T::e[1]));\n\t\t}\n\t}\n}\nsigned main(){\n\tstar::work();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1619164954,
        "uid": 280015,
        "name": "Star_Cried",
        "ccfLevel": 9,
        "title": "CF1192B Dynamic Diameter"
    },
    {
        "content": "\u849f\u84bb\u6765\u4e00\u53d1\u652f\u6301\u52a0\u8fb9\u5220\u8fb9\u7684LCT\u9898\u89e3\u3002\n\nLCT\u7684\u8f85\u52a9\u6811\u7ef4\u62a4\u6811\u5185\u7ef4\u62a4\u7684\u662f\u4e00\u6761\u94fe\uff0c\u8003\u8651\u7ef4\u62a4\u8fd9\u6761**\u5b9e\u94fe**\u4e0a\u7684\u6700\u6d45\u548c\u6700\u6df1\u7684\u8282\u70b9\u5230**\u5f53\u524d\u5b50\u6811\u5185**\u7684\u6700\u8fdc\u8ddd\u79bb\u3002\u7531\u4e8e\u8f7b\u8fb9\u5b9e\u9645\u4e0a\u662f\u7236\u4eb2\u4e0e\u8fd9\u68f5Splay\u4e0a\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u8fde\u7684\u8fb9\uff0c\u8bbe$lmx[i]$\u8868\u793a$i$\u8fd9\u68f5**Splay\u5b50\u6811**\u5185\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u5f80\u4e0b\u7684\u6700\u5927\u6df1\u5ea6\u3002\u5f53\u7136\u56e0\u4e3aSplay\u9700\u8981\u652f\u6301\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u7ef4\u62a4\u8fd9\u68f5Splay\u4e0a\u6df1\u5ea6\u6700\u5927\u7684\u70b9\u5f80\u4e0b\u7684\u6700\u5927\u6df1\u5ea6rmx\uff0c\u5f53\u5c06Splay\u7ffb\u8f6c\u8fc7\u6765\u65f6\u76f4\u63a5$swap(lmx,rmx)$\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651lmx\u548crmx\u5982\u4f55\u8f6c\u79fb\u3002\u4ee5lmx\u7684\u8f6c\u79fb\u4e3a\u4f8b\u3002\n\n\u5148\u8003\u8651\u5b9e\u94fe\u7684\u8f6c\u79fb\n\n\u6709\n$$\nlmx[x]=\\max(lmx[x],lmx[son[x][0]])\n$$\n\u5373\u76f4\u63a5\u4ece\u539f\u6811\u7684\u7956\u5148\u8f6c\u79fb\u4e0b\u6765\u3002\n\n\u4ee5\u53ca\n$$\nlmx[x]=\\max(lmx[x],lmx[son[x][1]]+sum[son[x][0]]+len[x])\n$$\n\u5373\u4fdd\u7559\u5b50\u6811\u7684\u7b54\u6848\u518d\u52a0\u4e0a\u7956\u5148\u548c\u81ea\u8eab\u8fd9\u6761\u8fb9\u7684\u8ddd\u79bb\u3002\n\n\u518d\u8003\u8651\u865a\u5b50\u6811\u7684\u8f6c\u79fb\u3002\u7531\u4e8e\u5b9e\u94fe\u4e0a\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u5b9e\u9645\u4e0a\u4e5f\u662f\u539f\u6811\u4e0a\u5b50\u6811\u7684\u6839\u8282\u70b9\u3002\u6240\u4ee5$lmx[x]$\u4e5f\u53ef\u4ee5\u8868\u793a\u4e3a**\u5b50\u6811\u5185\u6df1\u5ea6\u6700\u5c0f\u7684\u8282\u70b9**\u5230\u5b50\u6811\u5185\u4e00\u70b9\u6700\u8fdc\u8ddd\u79bb\uff0c\u90a3\u4e48\u6709\n$$\nlmx[x]=\\max(lmx[x],Chain.Fir+sum[son[x][0]]+len[x])\n$$\n\u5373\u4ece\u865a\u513f\u5b50\u4e2d\u6df1\u5ea6\u6700\u5927\u7684\u8282\u70b9\u8f6c\u79fb\u5373\u53ef\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u53ef\u5220\u5806\u6216\u8005multiset\u6765\u7ef4\u62a4\u3002\n\nrmx\u540c\u7406\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651$mxd[i]$\u6700\u957f\u94fe\u7684\u8f6c\u79fb\u3002\n\n\u4ecd\u7136\u5148\u8003\u8651\u5b9e\u94fe\u7684\u8f6c\u79fb\u6709\n$$\nmxd[x]=\\max(mxd[x],rmx[son[x][0]]+lmx[son[x][1]]+len[x])\n$$\n\u5373\u7956\u5148\u6df1\u5ea6\u6700\u5927\u7684\u70b9\u5230\u5b50\u6811\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u4ee5\u53ca\u81ea\u8eab\u8fd9\u6761\u8fb9\u7684\u8ddd\u79bb\u3002\n\n\u4ee5\u53ca\n$$\nmxd[x]=\\max(mxd[x],mxd[son[x][0]],mxd[son[x][1]])\n$$\n\u5373\u7956\u5148\u548c\u5b50\u6811\u672c\u6765\u5c31\u6709\u7684\u6700\u957f\u94fe\n\n\u518d\u8003\u8651\u865a\u5b50\u6811\u7684\u8f6c\u79fb\n\n\u6700\u957f\u94fe\u6709\u53ef\u80fd\u662f\u865a\u5b50\u6811\u4e2d\u672c\u6765\u5c31\u6709\u7684\u4e00\u6761\u6700\u957f\u94fe\uff0c\u8fd9\u540c\u6837\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53ef\u5220\u5806\u6216\u8005multiset\u7ef4\u62a4\u3002\n$$\nmxd[x]=\\max(mxd[x],Path.Fir)\n$$\n\u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u662f\u4e24\u6761\u865a\u5b50\u6811\u7684\u94fe\u548c\u81ea\u8eab\u8fd9\u6761\u8fb9\u62fc\u8d77\u6765\u7684\uff0c\u6240\u4ee5\u8fd8\u6709\uff1a\n$$\nmxd[x]=\\max(mxd[x],Chain.Fir+Chain.Sec+len[x])\n$$\n\u6700\u540e\u9644\u4e0a\u4ee3\u7801\n\n```cpp\nconst int N=4e5+10;\nint lmx[N],rmx[N],mxd[N];\nint fa[N],len[N],tag[N],son[N][2];\nint sum[N];\nint n,m,MXW,ans,lst_ans;\nvector<int>e[N];\nstruct inandelheap\n{\n\tpriority_queue<int>whl,del;\n\tinline void ist(int x){if(x!=-inf)whl.push(x);}\n\tinline void era(int x){if(x!=-inf)del.push(x);}\n\tinline int Top(){\n\t\twhile(1)\n\t\t{\n\t\t\tif(whl.empty()) return -inf;\n\t\t\tif(del.empty()) return whl.top();\n\t\t\tif(whl.top()==del.top()) whl.pop(),del.pop();\n\t\t\telse return whl.top();\n\t\t}\n\t}\n\tinline int Sec() {\n\t\tint tmp=Top();era(tmp);\n\t\tint tmp2=Top();ist(tmp);\n\t\treturn tmp2;\n\t}\n}chain[N],path[N];\ninline void INS(int u,int v) {chain[u].ist(lmx[v]),path[u].ist(mxd[v]);}\ninline void ERA(int u,int v) {chain[u].era(lmx[v]),path[u].era(mxd[v]);}\ninline int get(int x) {return x==son[fa[x]][1];}\t\ninline int isnotroot(int x) {return son[fa[x]][0]==x||son[fa[x]][1]==x;}\ninline void push_up(int x)\n{\n\tsum[x]=sum[son[x][0]]+sum[son[x][1]]+len[x];\n\tint oth=max(0ll,chain[x].Top());\n\tint up=max(oth,rmx[son[x][0]])+len[x];\n\tint dwn=max(oth,lmx[son[x][1]])+len[x];\n\tlmx[x]=max(lmx[son[x][0]],sum[son[x][0]]+dwn);\n\trmx[x]=max(rmx[son[x][1]],sum[son[x][1]]+up);\n\tmxd[x]=max(lmx[son[x][1]]+up,rmx[son[x][0]]+dwn);\n\tmxd[x]=max(mxd[x],max(mxd[son[x][0]],mxd[son[x][1]]));\n\tmxd[x]=max(mxd[x],path[x].Top());\n\tmxd[x]=max(mxd[x],oth+max(0ll,chain[x].Sec())+len[x]);\n}\n\ninline void rotate(int x){\n\tint f=fa[x],gf=fa[f],wh=get(x);\n\tif(isnotroot(f)) son[gf][get(f)]=x;\n\tson[f][wh]=son[x][wh^1];\n\tfa[son[x][wh^1]]=f;\n\tson[x][wh^1]=f;\n\tfa[f]=x;\n\tfa[x]=gf;\n\tpush_up(f);\n\tpush_up(x);\n}\n\ninline void splay(int x)\n{\n\tfor(int f;f=fa[x],isnotroot(x);rotate(x))\n\t\tif(isnotroot(f)) rotate(get(x)==get(f)?f:x);\n}\ninline int access(int x)\n{\n\tint y;\n\tfor(y=0;x;y=x,x=fa[x]) {splay(x);if(y)ERA(x,y);if(son[x][1])INS(x,son[x][1]);son[x][1]=y,push_up(x);}\n\treturn y;\n}\nvoid dfs1(int u) \n{\n\tfor(int v:e[u]) if(v^fa[u])\n\t{\n\t\tfa[v]=u;\n\t\tdfs1(v);\n\t\tINS(u,v);\n\t}\n\tpush_up(u);\n}\n\ninline void modify(int u,int d)\n{\t\n\taccess(u);\n\tsplay(u);\n\tlen[u]=d;\n\tpush_up(u);\n\tans=mxd[u];\n}\n\nsigned main()\n{\n\tn=read(),m=read(),MXW=read();\n\tint u,v,d;\n\tR(i,1,n-1)\n\t{\n\t\tu=read(),v=read(),d=read();\n\t\te[u].pb(i+n),e[i+n].pb(u);\n\t\te[v].pb(i+n),e[i+n].pb(v);\n\t\tlen[i+n]=d;\n\t}\n\tdfs1(1);\n\twhile(m--)\n\t{\n\t\tu=read(),d=read();\n\t\tu=(u+lst_ans)%(n-1)+1;\n\t\td=(d+lst_ans)%MXW;\n\t\t//printf(\"u:%lld val:%lld\\n\",u,d);\n\t\tmodify(u+n,d);\n\t\twriteln(lst_ans=ans);\n\t}\n}\n```\n\n\n",
        "postTime": 1617799482,
        "uid": 115779,
        "name": "\u6781\u5bd2\u795e\u51b0",
        "ccfLevel": 0,
        "title": "CF1192B Dynamic Diameter \u9898\u89e3"
    }
]