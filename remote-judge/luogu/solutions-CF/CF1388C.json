[
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u9053\u56fe\u8bba\u9898\uff0c\u540c\u65f6\u4e5f\u662f\u4e00\u9053\u7ec6\u8282\u9898\u3002\n\n\u6211\u4eec\u9996\u5148\u9700\u8981\u5224\u65ad\u8f93\u51fa `YES` \u7684\u6761\u4ef6\uff1a\n\n$1$\u3001\u63a2\u6d4b\u5668\u6d4b\u51fa\u7684\u503c\u7684\u7edd\u5bf9\u503c\u4e0d\u80fd\u8d85\u8fc7\u6240\u5728\u8282\u70b9\u7ecf\u8fc7\u7684\u603b\u4eba\u6570\u3002\n\n\u8fd9\u4e2a\u5f88\u597d\u7406\u89e3\uff0c\u5728\u8fd9\u91cc\u5c31\u4e0d\u8bf4\u660e\u4e86\u3002\n\n$2$\u3001\u8fd9\u4e2a\u8282\u70b9\u7ecf\u8fc7\u7684\u4eba\u6570\u51cf\u53bb\u63a2\u6d4b\u5668\u6d4b\u51fa\u7684\u503c\u5fc5\u987b\u80fd\u88ab $2$ \u6574\u9664\u3002\n\n\u6211\u4eec\u8bbe\u8fd9\u4e2a\u8282\u70b9\u7ecf\u8fc7\u7684\u4eba\u6570\u4e3a $x$ \u4eba\u3002\u63a2\u6d4b\u5668\u6d4b\u51fa\u7684\u503c\u4e3a $y$\u3002\n\n\u5219\u5fc3\u60c5\u5f88\u597d\u7684\u4eba\u6570\u4e3a $\\dfrac12(x+y)$\uff0c\u5fc3\u60c5\u4e0d\u597d\u7684\u4eba\u6570\u4e3a $\\dfrac12(x-y)$\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1 $x+y$ \u548c $x-y$ \u90fd\u80fd\u88ab $2$ \u6574\u9664\u5c31\u53ef\u4ee5\u4e86\u3002\u5176\u5b9e\u53ea\u9700\u6ee1\u8db3\u4e00\u4e2a\u5c31\u53ef\u4ee5\u4e86\uff0c\u53e6\u5916\u4e00\u4e2a\u76f4\u63a5\u5c31\u63a8\u51fa\u6765\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u7684\u4e00\u4e2a\u6761\u4ef6\u4e5f\u662f\u6700\u5173\u952e\u7684\u4e00\u4e2a\u6761\u4ef6\uff1a\n\n$3$\u3001\u8fd9\u4e2a\u8282\u70b9\u7ecf\u8fc7\u7684\u5fc3\u60c5\u4e0d\u597d\u7684\u4eba\u6570\u4e00\u5b9a\u8981\u4e0d\u5927\u4e8e\u5b83\u6240\u6709\u5b50\u8282\u70b9\u7ecf\u8fc7\u7684\u5fc3\u60c5\u4e0d\u597d\u7684\u4eba\u6570\u4e4b\u548c\u52a0\u4e0a\u5728\u8fd9\u4e2a\u8282\u70b9\u56de\u5bb6\u7684\u4eba\u6570\u3002\n\n\u6211\u4eec\u77e5\u9053\u4e00\u65e6\u4e00\u4e2a\u4eba\u5fc3\u60c5\u4e0d\u597d\uff0c\u4ed6\u5c31\u65e0\u6cd5\u518d\u53cd\u8f6c\u4e86\u3002\u6240\u4ee5\u5fc3\u60c5\u4e0d\u597d\u7684\u4eba\u4e00\u5b9a\u4f1a\u53ea\u589e\u4e0d\u51cf\uff0c\u56e0\u4e3a\u5fc3\u60c5\u4e0d\u597d\u7684\u4eba\u8981\u4e0d\u5c31\u8d70\u5230\u5b50\u8282\u70b9\uff0c\u8981\u4e0d\u5c31\u5728\u8fd9\u4e2a\u8282\u70b9\u56de\u5bb6\uff0c\u5f53\u7136\u5728\u8fd9\u4e2a\u8282\u70b9\u56de\u5bb6\u7684\u4eba\u53ef\u80fd\u4f1a\u6709\u5fc3\u60c5\u597d\u7684\u4eba\uff0c\u8d70\u5230\u4e0b\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u5fc3\u60c5\u597d\u7684\u4eba\u53ef\u80fd\u4f1a\u53d8\u5f97\u5fc3\u60c5\u4e0d\u597d\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8282\u70b9\u7ecf\u8fc7\u7684\u5fc3\u60c5\u4e0d\u597d\u7684\u4eba\u6570\u4e00\u5b9a\u8981**\u4e0d\u5927\u4e8e**\u5b83\u6240\u6709\u5b50\u8282\u70b9\u7ecf\u8fc7\u7684\u5fc3\u60c5\u4e0d\u597d\u7684\u4eba\u6570\u4e4b\u548c\u52a0\u4e0a\u5728\u8fd9\u4e2a\u8282\u70b9\u56de\u5bb6\u7684\u4eba\u6570\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u904d\u5386\u4e00\u904d\u6811\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u7ecf\u8fc7\u7684\u4eba\u6570\u6765\u5224\u65ad\u6761\u4ef6 $1,2$\u3002\u518d\u904d\u5386\u4e00\u904d\u6811\u5224\u65ad\u6761\u4ef6 $3$ \u662f\u5426\u6210\u7acb\u5c31\u884c\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$\n# code:\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cmath>\n#include<cstring>\nusing namespace std;\nint p[100005],h[100005];\nvector<int> edge[100005];\nbool a[100005];\nint b[100005],k[100005];\nvoid dfs(int x){\n\tint i;\n\ta[x]=1;\n\tb[x]=p[x];\n\tfor(i=0;i<edge[x].size();i++){\n\t\tif(!a[edge[x][i]]){\n\t\t\tdfs(edge[x][i]);\n\t\t\tb[x]+=b[edge[x][i]];\n\t\t}\n\t}\n}\nbool dfs1(int x){\n\tint i,ret=0;\n\tbool yes=1;\n\ta[x]=1;\n\tfor(i=0;i<edge[x].size();i++){\n\t\tif(!a[edge[x][i]]){\n\t\t\tyes&=dfs1(edge[x][i]);\n\t\t\tret+=k[edge[x][i]];\n\t\t}\n\t}\n\treturn yes&(ret>=k[x]-p[x]);\n}\nint main(){\n    int t,kk=0;\n    scanf(\"%d\",&t);\n    while(t--){\n    \tint n,m,i;\n    \tfor(i=1;i<=kk;i++){\n    \t\tedge[i].clear();\n    \t\ta[i]=b[i]=0;\n    \t}\n    \tbool no=0;\n    \tscanf(\"%d%d\",&n,&m);\n    \tkk=n;\n    \tfor(i=1;i<=n;i++){\n    \t\tscanf(\"%d\",&p[i]);\n    \t}\n    \tfor(i=1;i<=n;i++){\n    \t\tscanf(\"%d\",&h[i]);\n    \t}\n    \tfor(i=1;i<n;i++){\n    \t\tint x,y;\n    \t\tscanf(\"%d%d\",&x,&y);\n    \t\tedge[x].push_back(y);\n    \t\tedge[y].push_back(x);\n    \t}\n    \tdfs(1);\n    \tfor(i=1;i<=n;i++){\n    \t\tk[i]=(b[i]-h[i])/2;\n    \t}\n    \tfor(i=1;i<=n;i++){\n    \t\tif(abs(h[i])>b[i]||(b[i]-h[i])%2){\n    \t\t\tprintf(\"NO\\n\");\n    \t\t\tno=1;\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    \tfor(i=1;i<=n;i++){\n    \t\ta[i]=0;\n    \t}\n    \tif(!no){\n    \t\tprintf(\"%s\\n\",dfs1(1)?\"YES\":\"NO\");\n    \t}\n    }\n\treturn 0;\n}\n```",
        "postTime": 1596769970,
        "uid": 80614,
        "name": "ZCPB",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1388C \u3010Uncle Bogdan and Country Happiness\u3011"
    },
    {
        "content": "\u60f3\u8981\u68c0\u67e5\u6bcf\u4e2a\u57ce\u5e02\u7684\u5e78\u798f\u6307\u6570\u662f\u5426\u5408\u6cd5\uff0c\u9996\u5148**\u8981\u77e5\u9053\u6709\u591a\u5c11\u4eba\u4f1a\u7ecf\u8fc7\u8fd9\u4e2a\u57ce\u5e02**\u3002\u6839\u636e\u6bcf\u4e2a\u57ce\u5e02\u5c45\u4f4f\u7684\u4eba\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u7528\u4e00\u8f6e\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u6c42\u5f97\u7b54\u6848\u3002\u8fd9\u6bb5\u4ee3\u7801\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\n\n```cpp\nvoid dfs1(int rp){   //\u8ba1\u7b97\u7f16\u53f7\u4e3arp\u7684\u57ce\u5e02\u4f1a\u7ecf\u8fc7\u7684\u4eba\u7684\u6570\u91cf\n\tfor(rgt i=lst[rp];i;i=nxt[i]){   //\u904d\u5386\u8fd9\u4e2a\u57ce\u5e02\u7684\u51fa\u8fb9\n\t\tif(!fw[to[i]]){   //\u627e\u5230\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u7684\u5b50\u8282\u70b9\n\t\t\tfw[to[i]]=true;   \n\t\t\tdfs1(to[i]);   //\u8bbf\u95ee\u5b50\u6811\n\t\t\tp[rp]+=p[to[i]];   //\u7d2f\u52a0\u7ed3\u679c\n\t\t}\n\t}\n}\n```\n\n\u5f97\u5230\u6bcf\u4e2a\u57ce\u5e02\u7ecf\u8fc7\u7684\u4eba\u6570\u540e\uff0c\u6211\u4eec\u5f00\u59cb\u8fdb\u4e00\u6b65\u8003\u8651\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e00\u4e2a\u57ce\u5e02\u7684\u5e78\u798f\u6307\u6570\u662f\u9519\u8bef\u7684\u3002\n\n\u9898\u76ee\u4e2d\u6709\u4e24\u6761\u5173\u952e\u4fe1\u606f\u5e2e\u52a9\u6211\u4eec\uff1a\n\n- \u4e00\u4e2a\u57ce\u5e02\u7684\u5e78\u798f\u6307\u6570=\u7ecf\u8fc7\u8fd9\u4e2a\u57ce\u5e02\u7684\u597d\u5fc3\u60c5\u7684\u4eba\u7684\u6570\u91cf-\u7ecf\u8fc7\u8fd9\u4e2a\u57ce\u5e02\u7684\u574f\u5fc3\u60c5\u7684\u4eba\u7684\u6570\u91cf\u3002\n- \u4e00\u4e2a\u4eba\u7684\u5fc3\u60c5\u53ef\u4ee5\u7531\u597d\u53d8\u574f\uff0c\u4f46\u4e0d\u80fd\u7531\u574f\u53d8\u597d\u3002\n\n\u6839\u636e\u8fd9\u4e24\u6761\u4fe1\u606f\uff0c\u6211\u4eec\u8fdb\u4e00\u6b65\u5f52\u7eb3\uff0c\u53d1\u73b0\u4e00\u4e2a\u57ce\u5e02\u5982\u679c\u7b26\u5408\u5982\u4e0b\u6761\u4ef6\u4e4b\u4e00\u5219\u5e78\u798f\u6307\u6570\u662f\u9519\u8bef\u7684\u3002\n\n\u6211\u4eec\u8bbe\u57ce\u5e02 $i$ \u7684\u5e78\u798f\u6307\u6570\u4e3a $h_i$\uff0c\u7ecf\u8fc7\u7684\u4eba\u6570\u91cf\u4e3a $p_i$\uff0c\u7ecf\u8fc7\u8fd9\u4e2a\u57ce\u5e02\u65f6\u5fc3\u60c5\u597d\u7684\u4eba\u6570\u91cf\u4e3a $hp_i$\uff0c\u5219\u6709\u5982\u4e0b\u89c4\u5219\uff1a\n\n1. \u5982\u679c\u5b58\u5728 $|h_i|>p_i$ \u5219\u5e78\u798f\u6307\u6570\u4e0d\u5408\u6cd5\uff08\u5fc3\u60c5\u597d\u6216\u4e0d\u597d\u7684\u4eba\u6570\u8d85\u8fc7\u4e86\u4f1a\u7ecf\u8fc7\u8fd9\u4e2a\u57ce\u5e02\u7684\u4eba\u6570\uff0c\u4e0d\u5408\u6cd5\uff09\uff1b\n2. \u5982\u679c\u5b58\u5728 $(p_i-|h_i|) \\bmod 2 \\neq 0$ \u5219\u5e78\u798f\u6307\u6570\u4e0d\u5408\u6cd5\uff08\u53bb\u6389\u4e86 $|h_i|$ \u4e2a\u4eba\u540e\uff0c\u5269\u4e0b\u7684\u4eba\u4e00\u5b9a\u662f\u4e00\u534a\u5fc3\u60c5\u597d\u4e00\u534a\u5fc3\u60c5\u4e0d\u597d\uff0c\u5982\u679c\u4e0d\u80fd\u88ab $2$ \u6574\u9664\uff0c\u5219\u4e0d\u5408\u6cd5\uff09\uff1b\n3. \u8bbe\u57ce\u5e02 $i$ \u7684\u5b50\u6811\u4e0a\u7684\u57ce\u5e02\u7f16\u53f7\u4e3a $j$\uff0c\u5982\u679c\u5b58\u5728 $\\sum\\limits_{j \\in son_i}hp_j > hp_i$\uff0c\u5219\u5e78\u798f\u6307\u6570\u4e0d\u5408\u6cd5\uff08\u5b50\u6811\u4e2d\u9ad8\u5174\u7684\u4eba\u6570\u6bd4\u6839\u8282\u70b9\u7684\u591a\uff0c\u56e0\u4e3a\u4e0d\u9ad8\u5174\u7684\u4eba\u4e0d\u4f1a\u53d8\u9ad8\u5174\uff0c\u6240\u4ee5\u4e0d\u5408\u6cd5\uff09\uff1b\n\n\u5982\u679c\u6811\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u4e0d\u7b26\u5408\u4ee5\u4e0a\u4e09\u6761\u89c4\u5219\uff0c\u5219\u8fd9\u7ec4\u5e78\u798f\u6307\u6570\u662f\u53ef\u80fd\u5b58\u5728\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u518d\u505a\u4e00\u6b21\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u68c0\u67e5\u4ee5\u4e0a\u4e09\u6761\u89c4\u5219\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nvoid ck(int rp){\n\n\tif(h[rp]>=0)\n\t\thp[rp]+=h[rp];  //\u5982\u679c\u662f\u9ad8\u5174\u7684\u4eba\u6570\u591a\uff0c\u8bb0\u5f55\u9ad8\u5174\u7684\u4eba\u6570\n\telse\n\t\th[rp]=-h[rp];   //\u5426\u5219\u53d6\u7edd\u5bf9\u503c\n        \n\tif(h[rp]>p[rp]){   //\u68c0\u67e5\u7b2c\u4e00\u6761\u89c4\u5219\n\t\tans=false;\n\t\treturn;\n\t}\n    \n\tif((p[rp]-h[rp])%2){   //\u68c0\u67e5\u7b2c\u4e8c\u6761\u89c4\u5219\n\t\tans=false;\n\t\treturn;\n\t}else{\n    \n\t\thp[rp]+=(p[rp]-h[rp])/2;   //\u8ba1\u7b97\u9ad8\u5174\u7684\u4eba\u6570\n\t\tint s=0;\n\t\tfor(rgt i=lst[rp];i;i=nxt[i]){\n\t\t\tif(!fw[to[i]]){   //\u5411\u6ca1\u6709\u8bbf\u95ee\u8fc7\u7684\u5b50\u6811\u641c\u7d22\n\t\t\t\tfw[to[i]]=true;\n\t\t\t\tck(to[i]);   \n\t\t\t\tif(!ans) return;  //\u5982\u679c\u5b50\u6811\u4e0d\u5408\u6cd5\uff0c\u5219\u6574\u4e2a\u6811\u5fc5\u7136\u4e0d\u5408\u6cd5\n\t\t\t\ts+=hp[to[i]];   //\u7d2f\u8ba1\u5b50\u6811\u4e2d\u9ad8\u5174\u7684\u4eba\u6570\u91cf\n\t\t\t}\n\t\t}\n        \n\t\tif(hp[rp]-s<0){   //\u68c0\u67e5\u7b2c\u4e09\u6761\u89c4\u5219\n\t\t\tans=false;\n\t\t\treturn;\n\t\t}\n        \n\t}\n}\n```\n\n\u5230\u8fd9\u91cc\uff0c\u8fd9\u9898\u4ee3\u7801\u7684\u5173\u952e\u90e8\u5206\u90fd\u5199\u5b8c\u4e86\u3002\u4e0b\u9762\u5c31\u662f\u628a\u8fd9\u4e9b\u4ee3\u7801\u6574\u7406\u8d77\u6765\u7684\u4e8b\u4e86\uff0c\u6ce8\u610f\u7ec6\u8282\u95ee\u9898\u5373\u53ef\u3002\n\n\u5b8c\u6574\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#define ll long long\n#define rgt register int\nusing namespace std;\nconst int mxn = 1e5+5;\nint lst[mxn],to[mxn*2],nxt[mxn*2],p[mxn],hp[mxn],h[mxn];\nint n,m,tot;\nbool ans,fw[mxn];\n \ninline void add(int a,int b){  //\u6811\u7684\u52a0\u8fb9\u51fd\u6570\n\ttot++;\n\tto[tot]=b;\n\tnxt[tot]=lst[a];\n\tlst[a]=tot;\n}\n \nvoid dfs1(int rp){  //\u7b2c\u4e00\u8f6e\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n\tfor(rgt i=lst[rp];i;i=nxt[i]){\n\t\tif(!fw[to[i]]){\n\t\t\tfw[to[i]]=true;\n\t\t\tdfs1(to[i]);\n\t\t\tp[rp]+=p[to[i]];\n\t\t}\n\t}\n}\n \nvoid ck(int rp){   //\u7b2c\u4e8c\u8f6e\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n\tif(h[rp]>=0)\n\t\thp[rp]+=h[rp];\n\telse\n\t\th[rp]=-h[rp];\n\tif(h[rp]>p[rp]){\n\t\tans=false;\n\t\treturn;\n\t}\n\tif((p[rp]-h[rp])%2){\n\t\tans=false;\n\t\treturn;\n\t}else{\n\t\thp[rp]+=(p[rp]-h[rp])/2;\n\t\tint s=0;\n\t\tfor(rgt i=lst[rp];i;i=nxt[i]){\n\t\t\tif(!fw[to[i]]){\n\t\t\t\tfw[to[i]]=true;\n\t\t\t\tck(to[i]);\n\t\t\t\tif(!ans) return;\n\t\t\t\ts+=hp[to[i]];\n\t\t\t}\n\t\t}\n\t\tif(hp[rp]-s<0){\n\t\t\tans=false;\n\t\t\treturn;\n\t\t}\n\t}\n}\n \nint main(){\n\tint test;\n\tscanf(\"%d\",&test);\n\twhile(test--){\n\t\tans=true;\n\t\tscanf(\"%d%d\",&n,&m);\n        \n\t\tfor(rgt i=1;i<=n;i++)\n\t\t\tscanf(\"%d\",&p[i]);  //\u8bfb\u5165\u6bcf\u4e2a\u57ce\u5e02\u7684\u5c45\u4f4f\u4eba\u53e3\n            \n\t\tfor(rgt i=1;i<=n;i++)\n\t\t\tscanf(\"%d\",&h[i]);  //\u8bfb\u5165\u9884\u4f30\u7684\u5e78\u798f\u6307\u6570\n            \n\t\tmemset(lst,0,sizeof(lst));\n\t\ttot=0;\n\t\tfor(rgt x,y,i=1;i<n;i++){\n\t\t\tscanf(\"%d%d\",&x,&y);  //\u8bfb\u5165\u6811\u8fb9\uff0c\u5e76\u52a0\u8fb9\n\t\t\tadd(x,y);\n\t\t\tadd(y,x);\n\t\t}\n        \n\t\tmemset(fw,0,sizeof(fw));\n\t\tfw[1]=true;\n\t\tdfs1(1);   //\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u7b2c\u4e00\u8f6e\u641c\u7d22\n        \n\t\tmemset(fw,0,sizeof(fw));\n\t\tmemset(hp,0,sizeof(hp));\n\t\tfw[1]=true;\n\t\tck(1);   //\u5f00\u59cb\u7b2c\u4e8c\u8f6e\u641c\u7d22\n        \n\t\tif(ans)   //\u6839\u636e\u7ed3\u679c\u5224\u65ad\u5e78\u798f\u6307\u6570\u662f\u5426\u5408\u6cd5\uff0c\u5e76\u8f93\u51fa\u7b54\u6848\n\t\t\tprintf(\"YES\\n\");\n\t\telse\n\t\t\tprintf(\"NO\\n\");\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1596463392,
        "uid": 57421,
        "name": "fls233666",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF1388C \u3010Uncle Bogdan and Country Happiness\u3011"
    },
    {
        "content": "\u4e00\u5f00\u59cb\u770b\u9519\u4e86\u9898\u76ee\uff0c\u6211\u8fd8\u4ee5\u4e3a\u6bcf\u4e2a\u4eba\u51fa\u53d1\u65f6\u90fd\u662f\u5f00\u5fc3\u7684\uff0c\u76f4\u5230\u7ecf\u8fc7\u4e00\u6761\u8fb9\u540e\u624d\u53ef\u4ee5\u53d8\u3002\n\n\u9996\u5148\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u90fd\u662f\u4ece\u8d77\u70b9\u5f00\u59cb\u51fa\u53d1\u7684\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u4eba\u7684\u8def\u5f84\u770b\u6210\u6811\u4e0a\u7684\u4e00\u6761\u6761\u94fe\uff0c\u8fd9\u6ee1\u8db3\u6811\u4e0a\u5dee\u5206\u7684\u6a21\u578b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u51fa\u7ecf\u8fc7\u6bcf\u4e2a\u70b9\u7684\u8def\u5f84\u4e2a\u6570\n\n\u5904\u7406\u51fa\u5230\u6bcf\u4e2a\u70b9\u7684\u4eba\u4e2a\u6570\u540e\u6211\u4eec\u5f00\u59cb\u8003\u8651\u8fd9\u4e2a\u600e\u4e48\u505a\n\n\u56e0\u4e3a\u662f\u5728\u8fb9\u4e0a\u53d8\u7684\u5fc3\u60c5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5728\u5230\u8fbe\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\u53d8\u7684\u3002\n\n\u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u8fd9\u4e2a\u70b9\u5f3a\u5236\u8981\u6c42\u7684\u574f\u5fc3\u60c5\u4eba\u6570\n\n\u8bbe\u5f53\u524d\u70b9\u7ecf\u8fc7\u4eba\u6570\u4e3a$p_i$,\u574f\u5fc3\u60c5\u4eba\u6570\u4e3a$al_i$\uff0c\u9898\u76ee\u8981\u6c42$h_i$\n\n\u5f97\u5230$al_i=\\frac{p_i-h_i}{2}$\uff0c\u56e0\u4e3a$al_i$\u8981\u6c42\u662f\u6574\u6570\uff0c\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u5408\u6cd5\u3002\n\n\u7ee7\u7eed\u5f80\u4e0b\u505a\uff0c\u5df2\u77e5\u5b50\u8282\u70b9\u7684$al_i$,\u90a3\u4e48\u7236\u8282\u70b9\u7684$al_i$\u8981\u5c3d\u91cf\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u4eba\u5230\u5b50\u8282\u70b9\u90a3\u8fb9\u53d8\u574f\uff0c\u6240\u4ee5\u6211\u4eec\u5c3d\u91cf\u8ba9\u5230\u7236\u8282\u70b9\u7ed3\u675f\u7684\u4eba\u53d8\u574f\uff0c\u5f97\u5230\u4e0d\u5408\u6cd5\u7684\u65b9\u6848\u4e3a\n\n\u8bbe\u5230\u7236\u8282\u70b9\u7ed3\u675f\u7684\u4eba\u4e3a$now_i$,$sum$\u4e3a\u5b50\u8282\u70b9\u7684$al_i$\u7684\u548c\n\n\u5373\u8981\u6ee1\u8db3$al[x]-now[x]<=sum$\n\n\u5230\u8fd9\u91cc\u5c31\u505a\u5b8c\u4e86\n\n\u6ce8\u610f\u591a\u7ec4\u6570\u636e\n\n```cpp\n#include<bits/stdc++.h>\n#define huan putchar('\\n')\n#define kong putchar(' ')\nusing namespace std;\n\ntemplate <class T>\ninline void read(T &x)\n{\n\tx=0;register char ch=getchar();int pd=1;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')pd=-pd;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\tx*=pd;\n}\n\ntemplate <class T>\nvoid write(T x)\n{\n\tif(x<0)x=-x,putchar('-');\n\tif(x<10)putchar(x+'0');\n\telse {write(x/10);putchar(x%10+'0');}\n}\n\ntemplate <class T>\nvoid wrl(T x)\n{\n\twrite(x);\n\thuan;\n}\n\nconst int N=2e5+233;\n\n\nint n,p[N],h[N],al[N],m,hh[N],now[N];\nint t;\nbool flag;\nstruct dd\n{\n\tint end,nt;\n}e[N<<1];\n\ninline void add(int begin,int end)\n{\n\t++t;\n\te[t].end=end;\n\te[t].nt=h[begin];\n\th[begin]=t;\n}\n\nvoid dfs(int x,int fa)\n{\n\tif(!flag)return;\n\tint sum=0;\n\tfor(register int i=h[x];i;i=e[i].nt)\n\t{\n\t\tint u=e[i].end;\n\t\tif(u==fa)continue;\n\t\tdfs(u,x);\n\t\tp[x]+=p[u];\n\t\tsum+=al[u];\n\t}\n\tif(p[x]-hh[x]<0||((p[x]-hh[x])&1))\n\t{\n\t\tflag=false;\n\t\treturn;\n\t}\n\tal[x]=(p[x]-hh[x])/2;\n\tif(al[x]-now[x]>sum)\n\t{\n\t\tflag=false;\n\t\treturn;\n\t}\n}\n\nint main()\n{\n\tint T;\n\tread(T);\n\twhile(T--)\n\t{\n\t\tread(n);\n\t\tread(m);\n\t\tflag=1;\n\t\tt=0;\n\t\tfor(register int i=1;i<=n;++i)\n\t\t{\n\t\t\tal[i]=0;\n\t\t\th[i]=0;\n\t\t\tread(now[i]);\n\t\t\tp[i]=now[i];\n\t\t}\n\t\t\n\t\tfor(register int i=1;i<=n;++i)\n\t\t{\n\t\t\tread(hh[i]);\n\t\t}\n\t\tint x,y;\n\t\tfor(register int i=1;i<n;++i)\n\t\t{\n\t\t\tread(x);\n\t\t\tread(y);\n\t\t\tadd(x,y);\n\t\t\tadd(y,x);\n\t\t}\n\t\tdfs(1,0);\n\t\tflag?puts(\"YES\"):puts(\"NO\");\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1604472967,
        "uid": 87026,
        "name": "\u4e24\u5e74\u6253\u94c1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1388C \u3010Uncle Bogdan and Country Happiness\u3011"
    },
    {
        "content": "**\u9898\u610f**\n\n\u7ed9\u4e00\u68f5$n$\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709$a[i]$\u4e2a\u4eba\u4f4f\uff0c\u4ed6\u4eec\u4ece$1$\u53f7\u8282\u70b9\u56de\u5bb6\uff0c\u56de\u5bb6\u8def\u4e0a\u53ef\u80fd\u4ece\u5f00\u5fc3\u7684\u72b6\u6001\u53d8\u6210\u4e0d\u5f00\u5fc3\u7684\u72b6\u6001\uff08\u4f46\u4e0d\u53ef\u4ee5\u7531\u4e0d\u5f00\u5fc3\u53d8\u4e3a\u5f00\u5fc3\uff09\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u4e2a\u63a2\u6d4b\u5668\uff0c\u4f1a\u63a2\u6d4b\u7ecf\u8fc7\u8be5\u8282\u70b9\u5f00\u5fc3\u7684\u4eba\u6570\u51cf\u4e0d\u5f00\u5fc3\u7684\u4eba\u6570\uff0c\u800c\u9884\u671f\u503c\u4e3a$h[i]$\uff0c\u95ee\u662f\u5426\u53ef\u80fd\u5b58\u5728\u4e00\u79cd\u60c5\u51b5\uff0c\u4f7f\u5f97\u6240\u6709\u8282\u70b9\u7684\u63a2\u6d4b\u503c\u7b49\u4e8e\u771f\u5b9e\u503c\n\n**\u5206\u6790**\n\n\u5148\u60f3\u4e00\u4e0b\u601d\u8def\uff1a\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u53f6\u5b50\u8282\u70b9\u7684\u5f00\u5fc3\u4eba\u6570\u548c\u4e0d\u5f00\u5fc3\u4eba\u6570\uff0c\u5f00\u5fc3\u4eba\u6570\u4e00\u5b9a\u662f\u4ece$1$\u53f7\u8282\u70b9\u4e00\u76f4\u5f00\u5fc3\u8d70\u56de\u5bb6\u7684\uff0c\u4e0d\u5f00\u5fc3\u7684\u4eba\u53ef\u80fd\u5728\u8def\u4e2d\u95f4\u662f\u5f00\u5fc3\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u5c06\u9898\u76ee\u8f6c\u6362\u4e3a\u6bcf\u4e2a\u4eba\u4ece\u5bb6\u51fa\u53d1\u5230$1$\u53f7\u8282\u70b9\uff0c\u4ed6\u53ef\u80fd\u4e00\u5f00\u59cb\u662f\u4e0d\u5f00\u5fc3\u7684\uff0c\u4ed6\u53ef\u4ee5\u4ece\u4e0d\u5f00\u5fc3\u53d8\u4e3a\u5f00\u5fc3\uff0c\u4f46\u4e0d\u4f1a\u4ece\u5f00\u5fc3\u53d8\u4e3a\u4e0d\u5f00\u5fc3\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u7edf\u8ba1\u5b83\u7684\u513f\u5b50\u8282\u70b9\u7684\u5f00\u5fc3\u4eba\u6570\u548c\u4e0d\u5f00\u5fc3\u4eba\u6570\uff0c\u7136\u540e\u4e0d\u59a8\u8bbe\u8be5\u8282\u70b9\u7684\u6240\u6709\u4eba\u90fd\u662f\u4e0d\u5f00\u5fc3\uff0c\u8bbe$x$\u4e3a\u5f00\u5fc3\u7684\u4eba\u6570\uff0c$y$\u4e3a\u4e0d\u5f00\u5fc3\u7684\u4eba\u6570\uff0c$tot$\u4e3a\u7ecf\u8fc7\u8be5\u8282\u70b9\u7684\u603b\u4eba\u6570\u90a3\u4e48\u6709\u65b9\u7a0b\n$$\nx+y=tot\n$$\n$$\nx-y=h[i]\n$$\n\u7136\u540e\u5224\u65ad\u5373\u53ef\n\n```cpp\n#pragma GCC optimize(3, \"Ofast\", \"inline\")\n \n#include <bits/stdc++.h>\n \n#define start ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n#define ll long long\n#define int ll\n#define ls st<<1\n#define rs st<<1|1\n#define pii pair<int,int>\n#define rep(z, x, y) for(int z=x;z<=y;++z)\n#define repd(z, x, y) for(int z=x;z>=y;--z)\n#define com bool operator<(const node &b)const\nusing namespace std;\nmt19937 rnd(chrono::high_resolution_clock::now().time_since_epoch().count());\nconst int maxn = (ll) 3e5 + 5;\nconst int mod = 998244353;\nconst int inf = 0x3f3f3f3f;\nint T = 1;\nvector<int> v[maxn];\nint a[maxn];\nint h[maxn];\nbool flag;\n \npii dfs(int now, int pre) {\n    if (!flag)\n        return {0, 0};\n    pii p = {0, a[now]};\n    for (auto &to:v[now]) {\n        if (to == pre)\n            continue;\n        pii tmp = dfs(to, now);\n        p.first += tmp.first;\n        p.second += tmp.second;\n    }\n    int x = p.first + p.second + h[now];\n    if (x & 1) {\n        flag = false;\n        return {0, 0};\n    }\n    x /= 2;\n    if (x < p.first || x > p.first + p.second) {\n        flag = false;\n        return {0, 0};\n    }\n    return pii{x, p.first + p.second - x};\n}\n \nvoid solve() {\n    int n, m;\n    cin >> n >> m;\n    rep(i, 1, n) {\n        cin >> a[i];\n        v[i].clear();\n    }\n    rep(i, 1, n)cin >> h[i];\n    rep(i, 1, n - 1) {\n        int x, y;\n        cin >> x >> y;\n        v[x].push_back(y);\n        v[y].push_back(x);\n    }\n    flag = true;\n    dfs(1, 0);\n    if (flag)\n        cout << \"YES\\n\";\n    else\n        cout << \"NO\\n\";\n}\n \nsigned main() {\n    start;\n    cin >> T;\n    while (T--)\n        solve();\n    return 0;\n}\n```\n\n",
        "postTime": 1596517112,
        "uid": 147428,
        "name": "F_Mu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1388C \u3010Uncle Bogdan and Country Happiness\u3011"
    },
    {
        "content": "\u9898\u610f\u5de8\u4f6c\u4eec\u90fd\u89e3\u91ca\u7684\u5f88\u6e05\u695a\u5566\uff0c\u8fd9\u91cc\u5206\u4eab\u4e00\u4e0b\u849f\u84bb\u7684\u505a\u6cd5\u3002\n\n\u8fd9\u9053\u9898\u53ea\u8ba9\u6211\u4eec\u5224\u65ad\u5b83\u7ed9\u51fa\u7684\u7ed3\u679c\u662f\u5426\u6b63\u786e\uff0c\u5224\u65ad\u6b63\u786e\u4e0d\u592a\u597d\u60f3~~\u53ef\u80fd\u662f\u6211\u592a\u84bb\u4e86~~\uff0c\u90a3\u6211\u4eec\u8003\u8651\u54ea\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u8f93\u51faNO\u3002\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u6c42\u51fa\u7ecf\u8fc7\u6bcf\u4e2a\u70b9\u7684\u4eba\u6570\uff0c\u8bb0\u4e3a$siz[i]$\uff0c\u90a3\u4e48\u901a\u8fc7\u5206\u7c7b\u8ba8\u8bba$h[i]$\u7684\u6b63\u8d1f\u53ef\u4ee5\u6c42\u51fa\u7ecf\u8fc7\u8be5\u70b9\u65f6\u9ad8\u5174\u7684\u4eba\u6570$up[i]$\u548c\u4e0d\u9ad8\u5174\u7684\u4eba\u6570$down[i]$\u3002\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u660e\u663e\u7684\u53d1\u73b0\u4e24\u79cd\u9519\u8bef\uff1a\n\n\u60c5\u51b51\uff1a$siz[i]<|h[i]|$\uff0c\u4eba\u6570\u90fd\u4e0d\u591f\u3002\n\n\u60c5\u51b52\uff1a$siz[i]$\u4e0e$h[i]$\u5947\u5076\u6027\u4e0d\u540c\uff0c\u4f60\u4e0d\u53ef\u80fd\u628a\u4eba\u5206\u6210\u4e24\u534a\uff0c\u4e5f\u6ca1\u6709\u4eba\u5373\u9ad8\u5174\u53c8\u4e0d\u9ad8\u5174\u3002\n\n\u9898\u76ee\u4e2d\u4e13\u95e8\u5f3a\u8c03\u4e86\u9ad8\u5174\u53ef\u4ee5\u53d8\u6210\u4e0d\u9ad8\u5174\uff0c\u800c\u4e0d\u9ad8\u5174\u4e0d\u80fd\u8f6c\u5316\u4e3a\u9ad8\u5174\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u5176\u6240\u6709\u5b50\u8282\u70b9\u7684$down$\u4e4b\u548c\u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8e\u8be5\u8282\u70b9\u7684$down$\uff08\u6216\u8005$up$\u4e4b\u548c\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u8be5\u8282\u70b9\u7684$up$\uff09\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u5c06\u6240\u6709\u9519\u8bef\u7684\u60c5\u51b5\u90fd\u8003\u8651\u5b8c\u4e86\uff0c\u9664\u6b64\u4e4b\u5916\u7684\u60c5\u51b5\u4fbf\u90fd\u662fYES\u4e86\u3002\u63d0\u4ea4\u4e00\u904dAC~\u3002\n\n\u4ee3\u7801~\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint t,n,m,p[100001],h[100001],x,y,head[100001],to[200001],nxt[200001],tot,siz[100001],up[100001],down[100001];\nbool f;\ninline void add(int x,int y)\n{\n\tto[++tot]=y;\n\tnxt[tot]=head[x];\n\thead[x]=tot;\n}\nvoid dfs1(int x,int fa)//\u7b2c\u4e00\u904ddfs\uff0c\u6c42\u51fasiz\uff0c\u5373\u4f1a\u7ecf\u8fc7\u6539\u70b9\u7684\u4eba\u6570\n{\n\tsiz[x]=p[x];\n\tfor(register int i=head[x];i;i=nxt[i])\n\t{\n\t\tint y=to[i];\n\t\tif(y==fa)\n\t\t    continue;\n\t\tdfs1(y,x);\n\t\tsiz[x]+=siz[y];\n\t}\n}\nvoid dfs2(int x,int fa)//\u7b2c\u4e8c\u904ddfs\uff0c\u6c42\u89e3\n{\n\tif(h[x]>0)//\u5206\u7c7b\u8ba8\u8bba\u561b\n\t{\n\t\tif(siz[x]<h[x]||((siz[x]-h[x])&1))\n\t\t{\n\t\t\tf=0;\n\t\t\treturn;\n\t\t}//\u60c5\u51b51\u30012\n\t\telse\n\t\t{\n\t\t\tdown[x]=(siz[x]-h[x])>>1;\n\t\t\tup[x]=siz[x]-down[x];\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(siz[x]<-h[x]||((siz[x]+h[x])&1))\n\t\t{\n\t\t\tf=0;\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tup[x]=(siz[x]+h[x])>>1;\n\t\t\tdown[x]=siz[x]-up[x];\n\t\t}\n\t}\n\tint ups=0,downs=0;\n\tfor(register int i=head[x];i;i=nxt[i])\n\t{\n\t\tint y=to[i];\n\t\tif(y==fa)\n\t\t    continue;\n\t\tdfs2(y,x);\n\t\tups+=up[y];\n\t\tdowns+=down[y];\n\t}\n\tif((ups!=0||downs!=0)&&(ups-p[x]>up[x]||downs+p[x]<down[x]))\n\t    f=0;//\u60c5\u51b53\n}\nint main()\n{\n\tscanf(\"%d\",&t);\n\twhile(t--)\n\t{\n\t\tmemset(head,0,sizeof(head));//\u8bb0\u5f97\u6e05\u96f6\n\t\ttot=0;\n\t\tscanf(\"%d%d\",&n,&m);\n\t\tfor(register int i=1;i<=n;++i)\n\t\t    scanf(\"%d\",&p[i]);\n\t\tfor(register int i=1;i<=n;++i)\n\t\t    scanf(\"%d\",&h[i]);\n\t\tfor(register int i=1;i<n;++i)\n\t\t{\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tadd(x,y);\n\t\t\tadd(y,x);\n\t\t}\n\t\tmemset(siz,0,sizeof(siz));//\u8bb0\u5f97\u6e05\u96f6\n\t\tf=1;\n\t\tdfs1(1,0);\n\t\tdfs2(1,0);\n\t\tif(f)\n\t\t    printf(\"YES\\n\");\n\t\telse\n\t\t    printf(\"NO\\n\");\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1596443395,
        "uid": 68011,
        "name": "\u53e4\u660e\u5730_ypc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1388C \u3010Uncle Bogdan and Country Happiness\u3011"
    },
    {
        "content": "# \u9898\u610f\n\u9996\u5148\u8bfb\u61c2\u9898\uff0c\u6709m\u4e2a\u4eba\u4ece1\u57ce\u5e02\u51fa\u53d1\u56de\u5230\u81ea\u5df1\u5c45\u4f4f\u7684\u57ce\u5e02\uff0c\u8fd9\u4e9b\u4eba\u51fa\u53d1\u65f6\u5019\u5fc3\u60c5\u597d\u574f\u7684\u4eba\u6570\u4e0d\u786e\u5b9a\uff0c\u7136\u540e\u6bcf\u4e2a\u4eba\u90fd\u53ef\u80fd\u4f1a\u5728\u8def\u4e0a\u4ece\u5fc3\u60c5\u597d\u53d8\u6210\u5fc3\u60c5\u574f\uff08\u4e0d\u5b58\u5728\u5fc3\u60c5\u574f\u53d8\u6210\u5fc3\u60c5\u597d\uff09\u3002\u73b0\u5728\u544a\u8bc9\u4f60\u5df2\u77e5\u8ba1\u7b97\u51fa\u7684\u7ecf\u8fc7\u6bcf\u4e2a\u57ce\u5e02\u7684\u4eba\u5fc3\u60c5\u597d\u4eba\u6570-\u5fc3\u60c5\u574f\u4eba\u6570\uff0c\u4e5f\u5c31\u662fh[i]\uff08\u4e0d\u4e00\u5b9a\u6b63\u786e\uff09\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u57ce\u5e02\u5c45\u4f4f\u7684\u4eba\u6570p[i]\uff0c\u95ee\u8fd9\u6837\u7684h\u6570\u7ec4\u53ef\u4e0d\u53ef\u80fd\u6210\u7acb\u3002\n\n# \u89e3\u6cd5\n\u8bbe\u67d0\u4e00\u5904\u5fc3\u60c5\u597d\u7684\u4eba\u6570\u4e3agood\uff0c\u5fc3\u60c5\u5dee\u7684\u4eba\u6570\u4e3abad\uff0c\u90a3\u4e48\u5f88\u663e\u7136\u6709good + bad = \u603b\u4eba\u6570\uff0cgood - bad = h[i]\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230good = (\u603b\u4eba\u6570+h[i])/2\u3002\u53e6\u5916\u5f88\u5bb9\u6613\u5f97\u77e5\uff0cabs(h[i])>\u603b\u4eba\u6570\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u5e76\u4e14abs(h[i])\u4e0e\u603b\u4eba\u6570\u7684\u5947\u5076\u5fc5\u7136\u76f8\u540c\uff08\u603b\u4eba\u6570\u4e00\u5b9a\u65f6abs(h[i])\u5947\u5076\u6027\u662f\u4e00\u5b9a\u7684\u4e14\u4e0e\u603b\u4eba\u6570\u7684\u5947\u5076\u6027\u76f8\u540c\uff09\u3002\u4e8e\u662f\u5c31\u6709\u8fd9\u6837\u7684\u89e3\u6cd5\uff1a\u9996\u5148\u5904\u74061\u8fd9\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u70b9\u7684good\u53ef\u4ee5\u7b97\u51fa\uff0c\u76f4\u63a5\u6309\u4e0a\u9762\u7684\u89c4\u5219\u5224\u65adh[1]\u662f\u5426\u6210\u7acb\u3002\u7136\u540e\u4ece1\u5f00\u59cbdfs\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u4ed6\u7684\u6240\u6709\u5b69\u5b50\u8282\u70b9\u7684good\u548cbad\u90fd\u662f\u786e\u5b9a\u7684\uff0c\u800c\u5176\u4e2d\u7684bad\u6709\u53ef\u80fd\u662f\u4ece\u8be5\u8282\u70b9\u79bb\u5f00\u65f6\u53d8\u574f\u7684\uff0c\u6240\u4ee5\u628a\u5b69\u5b50\u8282\u70b9\u4e2d\u7684bad\u548c\u8be5\u8282\u70b9\u7684\u4eba\u6570\u5408\u5728\u4e00\u8d77\uff0c\u8fd9\u4e9b\u4eba\u90fd\u662f\u65e2\u53ef\u80fd\u662fgood\u4e5f\u53ef\u80fd\u662fbad\uff0c\u8fd9\u4e9b\u4eba\u5bf9\u5e94\u7684h\u5219\u662fh[i]-\u5b69\u5b50\u4e2d\u6240\u6709\u7684good\u6570\u3002\u7136\u540e\u5224\u5b9a\u7684\u89c4\u5219\u4e0e\u4e0a\u9762\u76f8\u540c\u3002\u6700\u540e\u6bd4\u8f83dfs\u51fa\u6765\u7ecf\u8fc71\u7684\u5b69\u5b50\u7684good\u603b\u6570\u4e0e1\u5904good\u6570\u5927\u5c0f\u3002\n\n# AC\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define jh(x, y) x ^= y ^= y ^= x\n#define lowbit(x) (x & -x)\n#define loc(x, y) (x = 1) * m + y\n#define rg register\n#define inl inline\ntypedef long long ll;\nconst int N = 5e5 + 5, INF = 0x3f3f3f3f, mod = 998244353;\nusing namespace std;\nnamespace fast_IO {\n\tinl ll read() {\n\t\trg char c;\n\t\trg ll x = 0;\n\t\trg bool flag = false;\n\t\twhile ((c = getchar()) == ' ' || c == '\\n' || c == '\\r');\n\t\tif (c == EOF)return c; if (c == '-')flag = true; else x = c ^ 48;\n\t\twhile ((c = getchar()) != ' ' && c != '\\n' && c != '\\r' && ~c)\n\t\t\tx = (x << 1) + (x << 3) + (c ^ 48);\n\t\tif (flag)return -x; return x;\n\t}\n\tinl ll max(rg ll a, rg ll b) { if (a > b)return a; return b; }\n\tinl ll min(rg ll a, rg ll b) { if (a < b)return a; return b; }\n\tvoid write(ll x) { if (x < 0)putchar('-'), x = -x; if (x >= 10)write(x / 10); putchar(x % 10 ^ 48); }\n}\nll nt[N], b[N], p[N], num, pp[N], h[N], gd[N], good;\nbool flag = true;\nvoid add(int x, int y) {\n\tb[++num] = y, nt[num] = p[x], p[x] = num;\n\tb[++num] = x, nt[num] = p[y], p[y] = num;\n}\nvoid dfs(int x, int fa) {\n\tll sum = 0;\n\tfor (int e = p[x]; e; e = nt[e]) {\n\t\tint k = b[e];\n\t\tif (k == fa)continue;\n\t\tdfs(k, x);\n\t\tif (!flag)return;\n\t\tsum += h[k];\n\t}\n\tif (x == 1)return;\n\tint tg;\n\tint tp = gd[x] - sum + pp[x], th = h[x] - gd[x];\n\tif (abs(th) > tp || (abs(th) & 1) != (tp & 1))flag = false;\n\ttg = (tp + th) / 2;\n\tgd[fa] += tg + gd[x];\n}\n\nint main() {\n\trg int T = fast_IO::read();\n\twhile (T--) {\n\t\trg int n = fast_IO::read(), m = fast_IO::read(); num = 0; flag = true; good = 0;\n\t\tfor (rg int i = 1; i <= n; ++i)pp[i] = fast_IO::read(), p[i] = 0, gd[i] = 0;\n\t\tfor (rg int i = 1; i <= n; ++i)h[i] = fast_IO::read();\n\t\tfor (rg int i = 1; i < n; ++i)add(fast_IO::read(), fast_IO::read());\n\t\tif (abs(h[1]) > m || (abs(h[1]) & 1) != (m & 1)) {\n\t\t\tputs(\"NO\");\n\t\t\tcontinue;\n\t\t}\n\t\tgood = (m + h[1]) / 2;\n\t\tdfs(1, 0);\n\t\tif (gd[1] > good)flag = false;\n\t\tif (flag)puts(\"YES\");\n\t\telse puts(\"NO\");\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1596443241,
        "uid": 87283,
        "name": "Zechariah",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1388C \u3010Uncle Bogdan and Country Happiness\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\u5b89\u5229\u81ea\u5df1\u9996\u573a CF \u7684[\u6e38\u8bb0](https://www.luogu.com.cn/blog/PsephurusGladius-zdx/codeforces-round-660-div-2-post)\uff08\u5176\u5b9e\u5565\u4e5f\u6ca1\u5199\uff09\u3002\n\n## \u9898\u76ee\u5206\u6790\n\u8003\u573a\u4e0a\u4e00\u5f00\u59cb\u62ff\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\u662f\u8499\u7684\u2026\u2026\u505a\u4e86 D \u9898\u4e4b\u540e\u56de\u6765\u731b\u7136\u53d1\u73b0\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u77e5\u9053\u4eba\u6570\u548c\u597d\u574f\u60c5\u7eea\u4eba\u6570\u4e4b\u5dee\u65f6\uff0c\u662f\u53ef\u4ee5\u76f4\u63a5\u7b97\u51fa\u574f\u60c5\u7eea\u4eba\u6570\u7684\u3002\u5177\u4f53\u4e00\u70b9\uff0c\u7531\u4e8e $good_i+bad_i=people_i,good_i-bad_i=h_i$\uff0c\u53ef\u4ee5\u7b97\u51fa $bad_i=(people_i-h_i)/2$\u3002  \n\n\u6211\u4eec\u65e2\u7136\u7b97\u51fa\u4e86\u8d70\u5230\u6bcf\u4e2a\u7ed3\u70b9\u7684\u574f\u60c5\u7eea\u4eba\u6570\uff0c\u8fd9\u9053\u9898\u5b9e\u9645\u4e0a\u5df2\u7ecf\u89e3\u51b3\u4e86\u3002\u6839\u636e\u9898\u76ee\u63cf\u8ff0\uff0c\u6ca1\u6709\u4eba\u7684\u60c5\u7eea\u4f1a\u7531\u574f\u53d8\u597d\uff0c\u800c\u4eba\u884c\u8d70\u7684\u8def\u7ebf\u662f\u7531\u6839\u5411\u4e0b\uff0c\u90a3\u4e48\u4e00\u4e2a\u7ed3\u70b9\u7684\u574f\u60c5\u7eea\u4eba\u6570\u4e00\u5b9a\u4e0d\u4f1a\u5927\u4e8e\u5176\u5b50\u7ed3\u70b9\u574f\u60c5\u7eea\u4eba\u6570\u4e4b\u548c\u52a0\u4e0a\u5f53\u524d\u7ed3\u70b9\u5c45\u4f4f\u7684\u4eba\u6570\u3002\u5224\u65ad\u8fd9\u4e00\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\uff0c\u540c\u65f6\u5224\u65ad $bad_i$ \u662f\u5426\u662f\u975e\u8d1f\u6574\u6570\u5373\u53ef\u5b8c\u6210\u6b64\u9898\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<cstdio>\nusing namespace std;\nint T,n,m,x,y,tot,p[200001],h[200001],head[200001],go[400001],suc[400001],down[200001];\nbool check;\ninline void add_edge(int x,int y)\n{\n\tgo[++tot]=y;\n\tsuc[tot]=head[x];\n\thead[x]=tot;\n\treturn;\n}\nvoid dfs(int now,int father)\n{\n\tint sum=0,q=p[now];\n\tfor(int i=head[now];i;i=suc[i])\n\t\tif(go[i]!=father)\n\t\t{\n\t\t\tdfs(go[i],now);\n\t\t\tsum+=down[go[i]];\n\t\t\tp[now]+=p[go[i]];\n\t\t}\n\tint t=p[now]-h[now];\n\tdown[now]=t>>1;\n\tif((t&1)||t<0||sum+q<down[now])\n\t\tcheck=false;\n\treturn;\n}\nint main()\n{\n\tscanf(\"%d\",&T);\n\twhile(T--)\n\t{\n\t\tcheck=true;\n\t\ttot=0;\n\t\tscanf(\"%d%d\",&n,&m);\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tscanf(\"%d\",&p[i]);\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tscanf(\"%d\",&h[i]);\n\t\tfor(int i=1;i<n;++i)\n\t\t{\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tadd_edge(x,y);\n\t\t\tadd_edge(y,x);\n\t\t}\n\t\tdfs(1,0);\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tdown[i]=head[i]=0;\n\t\tputs(check?\"YES\":\"NO\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1596442313,
        "uid": 67952,
        "name": "\u767d\u9c9f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1388C \u3010Uncle Bogdan and Country Happiness\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a \u901a\u8fc7\u9884\u5904\u7406\u51fa**\u8d70\u5230**\u5404\u4e2a\u70b9\u7684\u574f\u86cb\u6709\u591a\u5c11\uff0c\u641c\u5230\u5f53\u524d\u70b9\u8bb0\u5f55\u5f53\u524d\u70b9\u81f3\u5c11\u6709\u591a\u5c11\u574f\u86cb\uff0c\u8d2a\u5fc3\u5206\u914d\u574f\u86cb\uff0c\u5982\u679c\u6709\u591a\u51fa\u6765\u7684\u574f\u86cb\u5219\u4e3a\u65e0\u89e3\u3002\n\n\u8d2a\u5fc3\u601d\u8def: \u5f53\u524d\u70b9\u80fd\u5b58\u591a\u5c11\u574f\u86cb\u5c31\u5168\u5b58\uff0c\u513f\u5b50\u9700\u8981\u591a\u5c11\u574f\u86cb\u5c31\u5206\u914d\u591a\u5c11\u574f\u86cb\u3002\u8fd9\u6837\u5c31\u662f\u5c3d\u53ef\u80fd\u5730\u591a\u5f80\u5916\u5206\u914d\u574f\u86cb\uff0c\u4e0d\u591f\u6ca1\u6709\u5173\u7cfb\uff0c\u53ef\u4ee5\u8ba9\u597d\u4eba\u53d8\u6210\u574f\u86cb\uff0c\u4f46\u662f\u5982\u679c\u591a\u4e86\u5c31\u8bf4\u660e\u65e0\u89e3\u3002\n\n\u89c2\u5bdf\u51e0\u4e2a\u826f\u5fc3\u7684\u6837\u4f8b\u52a0\u51e0\u4e2a\u7279\u5224\u5c31\u53ef\u4ee5\u4e86\n\n[$\\mathcal{Code}$](https://codeforces.com/contest/1388/submission/88505098)\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\ninline int read()\n{\n\tint r=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9') {\n\t\tif(ch=='-') w=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') {\n\t\tr=(r<<3)+(r<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn r*w;\n}\nint cnt,head[1000010];\nstruct node {\n\tint to,next;\n}e[2000010];\nvoid add()\n{\n\tint xx=read(),yy=read();\n\te[++cnt].to=yy;\n\te[cnt].next=head[xx];\n\thead[xx]=cnt;\n\te[++cnt].to=xx;\n\te[cnt].next=head[yy];\n\thead[yy]=cnt;\n}\nint T,n,m;\nint p[1000010],h[1000010],siz[1000010];\nbool f=1;\nvoid dfs(int now,int fa,int badsum)\n{\n\tif((siz[now]+h[now])%2) f=0;\n\tif(badsum>=p[now]) badsum-=p[now];\n\telse badsum=0;\n\tfor(int i=head[now];i;i=e[i].next) {\n\t\tint v=e[i].to;\n\t\tif(v==fa) continue;\n\t\tdfs(v,now,siz[v]-(siz[v]+h[v])/2);\n\t\tbadsum-=siz[v]-(siz[v]+h[v])/2;\n\t}\n\tif(badsum>0) f=0;\n}\nvoid dfs1(int now,int fa)\n{\n\tsiz[now]=p[now];\n\tfor(int i=head[now];i;i=e[i].next) {\n\t\tint v=e[i].to;\n\t\tif(v==fa) continue;\n\t\tdfs1(v,now);\n\t\tsiz[now]+=siz[v];\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&T);\n\twhile(T--) {\n\t\tfor(int i=1;i<=cnt;i++)\n\t\t\te[i].next=e[i].to=0;\n\t\tcnt=0;\n\t\tf=1;\n\t\tn=read();m=read();\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tp[i]=read(),head[i]=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t\th[i]=read();\n\t\tfor(int i=1;i<n;i++)\n\t\t\tadd();\n\t\tdfs1(1,-1); \n\t\tdfs(1,-1,siz[1]-(siz[1]+h[1])/2);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif(siz[i]<h[i])\n\t\t\t\tf=0;\n\t\tif(f) puts(\"YES\");\n\t\telse puts(\"NO\");\n\t}\n}\n```",
        "postTime": 1596428173,
        "uid": 223298,
        "name": "do_while_true",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1388C \u3010Uncle Bogdan and Country Happiness\u3011"
    },
    {
        "content": "\u4e24\u904ddfs\u5373\u53ef\n\n\u7b2c\u4e00\u6b21dfs\u901a\u8fc7\u56de\u6eaf\u8ba1\u7b97\u5b50\u6811\u6743\u503c\u548c`val[i]`\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u8282\u70b9\u7684\u4eba\u6570\n\n\u6709\u4e86\u8fd9\u4e2a`val[i]`\u4ee5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u501f\u52a9`h[i]`\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u9ad8\u5174\u4eba\u6570\u548c\u60b2\u4f24\u4eba\u6570\n\n\u8ba1\u7b97\u516c\u5f0f\uff1a\n\n$num\\_happy = \\frac{(val[now] + h[i])}{2}$\n\n$num\\_sad = \\frac{(val[now]-h[i])}{2}$\n\n\u4f46\u662f\u9700\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u9664\u4ee5\u4e8c\u4e4b\u524d\uff0c\u8981\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u662f\u5076\u6570\uff0c\u5982\u679c\u4e0d\u662f\u5076\u6570\u663e\u7136\u4e0d\u5408\u6cd5\u3002\n\n\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5224\u65ad\u9ad8\u5174\u7684\u4eba\u6570\u548c\u4e0d\u9ad8\u5174\u7684\u4eba\u6570\u662f\u5426\u5b58\u5728\u8d1f\u6570\uff0c\u5982\u679c\u5b58\u5728\u8d1f\u6570\u663e\u7136\u4e5f\u662f\u4e0d\u5408\u7406\u7684\u3002\n\n\u4f60\u4ee5\u4e3a\u7ed3\u675f\u4e86\u561b\uff1f\u8fd8\u6ca1\u6709\u5462\uff01\n\n\u4f60\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u4e1c\u897f\u53eb\u4eb2\u513f\u5b50\u7684\u9ad8\u5174\u4eba\u6570\u6743\u503c\u548c\u3002\u76ee\u7684\u662f\u5224\u65ad\u513f\u5b50\u91cc\u7684\u9ad8\u5174\u4eba\u6570\u603b\u548c\u662f\u4e0d\u662f\u5927\u4e8e\u7236\u4eb2\u7684\u9ad8\u5174\u4eba\u6570\u603b\u548c\uff0c\u5927\u4e8e\u4e86\u80af\u5b9a\u4e5f\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u56de\u6eaf\u5b9e\u73b0\u3002\n\n\n### AC\u4ee3\u7801\n```cpp\n#include<map>\n#include<set>\n#include<cmath>\n#include<queue>\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\n#define rep(i,a,b) for(register int i = (a);i <= (b);++i)\n#define per(i,a,b) for(register int i = (a);i >= (b);--i)  \ntypedef long long ll;\ntypedef unsigned long long ull;\nusing std::string;using std::cin;using std::cout;\n\nconst int N = 1e5+5;\nint _,n,m,p[N],h[N],u,v;\nint next[2*N],head[2*N],ver[2*N],tot,val[N],back[N];\n\ninline void link(int x,int y){ver[++tot] = y , next[tot] = head[x] , head[x] = tot;}\n\ninline void dfs(int now,int father){\n\tval[now] = p[now];\n\tfor(int i = head[now];i;i = next[i]){\n\t\tif(ver[i] == father) continue;\n\t\tdfs(ver[i],now);\n\t\tval[now] += val[ ver[i] ];\n\t}\n}\n\ninline bool check(int now,int father,int num_H){\n\t\t// cout << \"\\n now in \" << now << \" \";\n\tbool flag = true;\n\tint num_happy,num_unhappy,num_now = val[now];\n\tnum_now -= h[now];\n\t\t// cout << num_now << \" \";\n\tif(num_now % 2 || num_now < 0) return false;\n\telse num_now /= 2;\n\tnum_happy = num_now + h[now] , num_unhappy = num_now;\n\tback[father] += num_happy;\n\t\t// cout << num_now << \" \";\n\t\t// cout << num_happy << \" \" << num_unhappy << \" \" << num_H << \" \";\n\tif(num_happy > num_H || num_happy < 0 || num_unhappy < 0) return false;\n\tfor(int i = head[now];i;i = next[i]){\n\t\tif(ver[i] == father) continue;\n\t\tflag &= check(ver[i],now,num_happy);\n\t\tif(!flag) return false;\n\t}\n\tif(back[now] > num_happy) return false;\n\treturn true;\n}\n\ninline void reset(){\n\trep(i,1,tot) head[i] = next[i] = ver[i] = 0;\n\ttot = 0;\n\treturn;\n}\n\nint main(){\n\tstd::ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n\t//freopen(\"in.in\", \"r\", stdin);\n\tcin >> _;\n\twhile(_--){\n\t\treset();\n\t\tcin >> n >> m;\n\t\trep(i,1,n) val[i] = back[i] = 0;\n\t\trep(i,1,n) cin >> p[i];\n\t\trep(i,1,n) cin >> h[i];\n\t\trep(i,1,n-1){\n\t\t\tcin >> u >> v;\n\t\t\tlink(u,v) , link(v,u);\n\t\t}\n\t\tdfs(1,0);\n\t\tif(check(1,0,m)) cout << \"YES\\n\";\n\t\telse cout << \"NO\\n\";\n\t}\n\treturn 0;\n#### }\n```",
        "postTime": 1596419489,
        "uid": 123389,
        "name": "Isshiki_Hugh",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF1388C \u3010Uncle Bogdan and Country Happiness\u3011"
    },
    {
        "content": "## \u9898\u610f\n\u7ed9\u51fa\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u6839\u4e3a $1$ \u7684\u6811\u3002\u8fd8\u6709 $m$ \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u90fd\u4ece $1$ \u51fa\u53d1\u8d70\u6700\u77ed\u8def\u56de\u5bb6\u3002\u5176\u4e2d\u6709\u4e9b\u4eba\u662f\u5feb\u4e50\u7684\uff0c\u6709\u4e9b\u4eba\u4e0d\u5feb\u4e50\uff0c\u5728\u8def\u4e0a\u53ef\u4ee5\u6539\u53d8\u4e00\u4e9b\u4eba\u4ece\u5feb\u4e50\u53d8\u4e3a\u4e0d\u5feb\u4e50\uff0c\u4f46\u4e0d\u5feb\u4e50\u5e76\u4e0d\u80fd\u53d8\u6210\u5feb\u4e50\u3002\n\n\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e00\u4e2a $h$ \u503c\uff0c\u8868\u793a\u8d70\u5230\u8fd9\u4e2a\u70b9\u7684\u4eba\u5feb\u4e50\u7684\u8981\u6bd4\u4e0d\u5feb\u4e50\u7684\u591a $h$ \u4eba\u3002\n\n\u4f60\u9700\u8981\u5224\u65ad\u80fd\u5426\u6784\u9020\u51fa\u4e00\u79cd\u65b9\u6848\u7b26\u5408\u9898\u610f\u3002\n\n\uff08\u8fd9\u9898\u610f\u771f\u8be1\u5f02\uff0c\u5efa\u8bae\u914d\u5408\u6837\u4f8b\u7406\u89e3\uff09\n\n## \u9898\u89e3\n\u7531\u4e8e\u77e5\u9053\u4e86\u5230\u8fd9\u4e2a\u70b9\u7684\u603b\u4eba\u6570\uff0c\u548c\u8fd9\u4e2a\u70b9\u7684 $h$ \u503c\uff0c\u663e\u7136\u8fd9\u4e2a\u70b9\u7684\u5feb\u4e50\u7684\u4eba\u7684\u4eba\u6570\u662f\u53ef\u4ee5\u76f4\u63a5\u7b97\u51fa\u6765\u7684\u3002\n\n\u53e6\u5916\uff0c\u5f53\u524d\u70b9\u5feb\u4e50\u7684\u4eba\u6570\u8981\u4e0d\u5c0f\u4e8e\u5176\u6240\u6709\u513f\u5b50\u8282\u70b9\u7684\u5feb\u4e50\u4eba\u6570\u4e4b\u548c\u3002\u518d\u5224\u4e00\u4e0b\u5feb\u4e50\u4eba\u6570\u662f\u5426\u8d85\u8fc7\u8fd9\u4e2a\u70b9\u7684\u603b\u4eba\u6570\uff0c\u6216\u662f\u662f\u5426\u662f\u8d1f\u6570\u3002\n\ncode\uff1a\n```\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\ntemplate<class T>inline void read(T &x)\n{\n\tx=0;int f=0;char ch=getchar();\n\twhile(!isdigit(ch))\tf=ch=='-',ch=getchar();\n\twhile(isdigit(ch))\tx=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\tx=f?-x:x;\n}\nvoid MEM(int *a,int n)\t{for(int i=0;i<=n;i++)\ta[i]=0;}\nconst int N=2e5+5;\nstruct edge{\n\tint next,to;\n}e[N<<1];\nint head[N],cnt,n,m,p[N],h[N],num[N],happy[N],flag;\nvoid add(int u,int v)\n{\n\te[++cnt]={head[u],v};\n\thead[u]=cnt;\n}\nvoid dfs1(int x,int fa)\n{\n\tnum[x]=p[x];\n\tfor(int i=head[x];i;i=e[i].next)\n\t\tif(e[i].to!=fa)\tdfs1(e[i].to,x),num[x]+=num[e[i].to];\n}\nvoid dfs2(int x,int fa)\n{\n\tint sum=0;\n\tfor(int i=head[x];i;i=e[i].next)\n\t\tif(flag&&e[i].to!=fa)\n\t\t\tdfs2(e[i].to,x),sum+=happy[e[i].to];\n\tif(sum>happy[x]&&flag)\n\t{\n\t\tputs(\"NO\"),flag=0;\n\t\treturn;\n\t}\n}\nsigned main()\n{\n\tint T;read(T);\n\twhile(T--)\n\t{\n\t\tflag=1;\n\t\tread(n),read(m);\n\t\tMEM(head,n),cnt=0;\n\t\tfor(int i=1;i<=n;i++)\tread(p[i]);\n\t\tfor(int i=1;i<=n;i++)\tread(h[i]);\n\t\tfor(int i=1,u,v;i<n;i++)\tread(u),read(v),add(u,v),add(v,u);\n\t\tdfs1(1,0);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif((num[i]+h[i])&1)\n\t\t\t{\n\t\t\t\tputs(\"NO\"),flag=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thappy[i]=(num[i]+h[i])/2;\n\t\t\t\tif(happy[i]>num[i]||happy[i]<0)\n\t\t\t\t{\n\t\t\t\t\tputs(\"NO\"),flag=0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\tif(!flag)\tcontinue;\n\t\tdfs2(1,0);\n\t\tif(!flag)\tcontinue;\n\t\tputs(\"YES\");\n\t}\n}\n```\n",
        "postTime": 1596413571,
        "uid": 304995,
        "name": "PanH",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1388C \u3010Uncle Bogdan and Country Happiness\u3011"
    },
    {
        "content": "> \u4e00\u4e2a\u4eba\u4e00\u65e6\u53d8\u5f97\u4f24\u5fc3\u5c31\u4e0d\u4f1a\u518d\u5f00\u5fc3\u8d77\u6765\n\n\u6240\u4ee5\u6211\u4eec\u53cd\u5411\u8003\u8651\uff0c\u6211\u4eec\u4ece\u53f6\u5b50\u7ed3\u70b9\u4e00\u4e2a\u4e00\u4e2a\u5411\u4e0a\u5408\u5e76\uff0c\u8fd9\u6837\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u4eba\u4e00\u5f00\u59cb\u53ef\u4ee5\u662f\u4f24\u5fc3\u6216\u5f00\u5fc3\uff0c\u4f46\u662f\u8d70\u52301 \u53f7\u70b9\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u53d8\u5f97\u5f00\u5fc3\u540e\u5c31\u4e0d\u4f1a\u518d\u4f24\u5fc3\u3002\u663e\u7136\u6709\u4e00\u4e2a\u8d2a\u5fc3\uff0c\u8981\u5c3d\u53ef\u80fd\u8ba9\u66f4\u591a\u7684\u4eba\u4f24\u5fc3\u3002\u7136\u540e\u6bcf\u6b21\u5408\u5e76\u5b8c\u6bcf\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u6700\u591a\u80fd\u8ba9\u591a\u5c11\u4eba\u4fdd\u6301\u4f24\u5fc3\uff0c\u7136\u540e\u518d\u7ed3\u5408\u5f53\u524d\u8282\u70b9\u7684 $h$ \u5224\u65ad\u5728\u8fd9\u4e2a\u8282\u70b9\u8981\u8ba9\u591a\u5c11\u4eba\u53d8\u7684\u5f00\u5fc3\u3002\u7136\u540e\u5c31\u4e00\u8fb9\u5408\u5e76\u4e00\u8fb9\u5224\u65ad\u5c31\u884c\u3002\n\n\u6ce8\u610f\u6709\u4e9b\u7ec6\u8282\u6bd4\u5982\u4eba\u6570\u4e0d\u591f\u5565\u7684\u3002\n\n```cpp\n// This code wrote by chtholly_micromaker(MicroMaker)\n#include <bits/stdc++.h>\n#define reg register\n#define int long long\nusing namespace std;\nconst int MaxN=200050;\nstruct Edge\n{\n\tint nxt,to;\n}E[MaxN<<2];\ntemplate <class t> inline void read(t &s)\n{\n\ts=0;\n\treg int f=1;\n\treg char c=getchar();\n\twhile(!isdigit(c))\n\t{\n\t\tif(c=='-')\n\t\t\tf=-1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c))\n\t\ts=(s<<3)+(s<<1)+(c^48),c=getchar();\n\ts*=f;\n\treturn;\n}\nint hd[MaxN],en,n,m;\nint p[MaxN],h[MaxN],siz[MaxN];\nbool flg;\ninline void adde(int u,int v)\n{\n\t++en;\n\tE[en]=(Edge){hd[u],v};\n\thd[u]=en;\n\treturn;\n}\ninline int dfs(int u,int fa)\n{\n\tif(!flg)\n\t\treturn 0;\n\tsiz[u]=p[u];\n\treg int happy=0;\n\tfor(int i=hd[u];~i;i=E[i].nxt)\n\t{\n\t\treg int v=E[i].to;\n\t\tif(v==fa)\n\t\t\tcontinue;\n\t\thappy+=dfs(v,u);\n\t\tsiz[u]+=siz[v];\n\t}\n\treg int now=happy-(siz[u]-happy);\n\tif(now>h[u])\n\t{\n\t\tflg=false;\n//\t\tprintf(\"failed in %d\\n\",u);\n\t\treturn 0;\n\t}\n\tif(now<h[u])\n\t{\n\t\tif((h[u]-now)&1)\n\t\t{\n\t\t\tflg=false;\n//\t\t\tprintf(\"died in %d\\n\",u);\n//\t\t\tprintf(\"siz %d happy %d now %d h[u]-now = %d\\n\",siz[u],happy,now,h[u]-now);\n\t\t\treturn 0;\n\t\t}\n\t\thappy+=(h[u]-now)/2;\n\t\tif(happy>siz[u])\n\t\t{\n\t\t\tflg=false;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn happy;\n}\ninline void work()\n{\n\tread(n);read(m);\n\tfill(hd,hd+n*2+5,-1);en=0;\n\tfor(int i=1;i<=n;++i)\n\t\tread(p[i]);\n\tfor(int i=1;i<=n;++i)\n\t\tread(h[i]);\n\treg int u,v;\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tread(u);read(v);\n\t\tadde(u,v);\n\t\tadde(v,u);\n\t}\n\tflg=true;\n\tdfs(1,0);\n\tputs(flg?\"YES\":\"NO\");\n\treturn;\n}\nsigned main(void)\n{\n\tint t;cin>>t;\n\twhile(t--)\n\t\twork();\n\treturn 0;\n}\n```",
        "postTime": 1596413239,
        "uid": 51376,
        "name": "MyukiyoMekya",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1388C \u3010Uncle Bogdan and Country Happiness\u3011"
    }
]