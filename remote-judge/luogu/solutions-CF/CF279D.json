[
    {
        "content": "## \u4e00\u3001\u9898\u76ee\n**\u9898\u76ee\u63cf\u8ff0**\n\n\u6709$n$\u4e2a\u6570$a_i$\uff0c\u8fd8\u6709$m$\u4e2a\u5bb9\u5668\uff0c\u7b2c\u4e00\u6b65\u628a$a_1$\u8d4b\u503c\u7ed9\u67d0\u4e00\u4e2a\u5bb9\u5668\uff0c\u7136\u540e\u6bcf\u4e00\u6b65\u7684\u8d4b\u503c\u64cd\u4f5c\u5c31\u662f\u9009\u4e24\u4e2a\u5bb9\u5668\u7684\u548c\u8d4b\u503c\u7ed9\u4e00\u4e2a\u5bb9\u5668\uff08\u968f\u4fbf\u9009\uff0c\u4e0d\u8981\u6c42\u5bb9\u5668\u4e0d\u540c\uff0c\u4f46\u6c42\u548c\u5bb9\u5668\u5fc5\u987b\u6709\u503c\uff09\uff0c\u7b2c$i$\u6b65\u8d4b\u503c\u64cd\u4f5c\u7684\u8fd4\u56de\u503c\u5fc5\u987b\u7b49\u4e8e$a_i$\uff08\u4ece$2$\u5f00\u59cb\u7b97\uff09\uff0c\u6c42$m$\u7684\u6700\u5c0f\u503c\uff0c\u6ca1\u6709\u8fd9\u6837\u7684$m$\u8f93\u51fa$-1$\u3002\n\n**\u6570\u636e\u8303\u56f4**\n\n$n\\leq 23$\uff0c$1\\leq a_i\\leq 1e9$\n## \u4e8c\u3001\u89e3\u6cd5\n\u8fd9\u4e2a\u6570\u636e\u8303\u56f4\u5f88\u5bb9\u6613\u8054\u60f3\u5230\u72b6\u6001\u538b\u7f29\u5427\uff0c\u6211\u4eec\u8bbe$dp[s]$\u4e3a\u6211\u4eec\u628a\u5f53\u524d\u72b6\u6001$a_i$\u4e00\u5b9a\u51fa\u73b0\u5728\u5bb9\u5668\u91cc\u7684\u4e3a$1$\uff0c\u4e0d\u4e00\u5b9a\u5728\u5bb9\u5668\u91cc\u7684\u4e3a$0$\uff0c\u90a3\u4e48\u6700\u7ec8\u9700\u8981\u72b6\u6001\u4e3a$dp[2^n]$\uff0c\u4e5f\u5c31\u662f$a_n$\u4e00\u5b9a\u5728\u5bb9\u5668\u91cc\uff0c\u521d\u59cb\u5316$dp[2^1]$\u4e3a$1$\uff0c\u4e00\u5f00\u59cb$a_1$\u4e00\u5b9a\u5728\u5bb9\u5668\u91cc\uff08\u5177\u4f53\u5b9e\u73b0\u65f6\u9700\u8981\u4ece$0$\u5f00\u59cb\u5b58\uff09\n\n\u8003\u8651\u8f6c\u79fb\uff0c\u6211\u4eec\u73b0\u5728\u9700\u8981\u51d1\u51fa$i$\uff0c\u90a3\u4e48\u6211\u4eec\u679a\u4e3e$i$\u4e4b\u524d\u7684\u4e24\u4e2a\u6570\uff08$i$\u4e4b\u540e\u7684\u4e0d\u53ef\u80fd\u51fa\u73b0\uff09\uff0c\u8fd9\u4e24\u4e2a\u6570\u7684\u548c\u4e3a$i$\uff0c\u7136\u540e\u6211\u4eec\u628a\u5f53\u524d\u72b6\u6001\u53bb\u6389$i$\u8fd9\u4e00\u4f4d\u4e4b\u540e\u6dfb\u52a0\u4e0a\u679a\u4e3e\u7684\u4e24\u4e2a\u6570\u7684\u4f4d\u7f6e\u7ee7\u7eed\u641c\u7d22\uff0c\u5f97\u5230\u8fd4\u56de\u503c\u4e4b\u540e\u6211\u4eec\u548c\u5f53\u524d\u72b6\u6001\u7684\u5bb9\u5668\u6570\uff08\u4e5f\u5c31\u662f$1$\u7684\u4e2a\u6570\uff09\u53d6\u4e00\u4e2a\u6700\u5927\u503c\u7136\u540e\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int M = 23;\nint read()\n{\n    int x=0,flag=1;\n    char c;\n    while((c=getchar())<'0' || c>'9') if(c=='-') flag=-1;\n    while(c>='0' && c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\n    return x*flag;\n}\nint n,a[M],dp[1<<M];\nint dfs(int x,int p)\n{\n    if(dp[x]) return dp[x];\n    int c=__builtin_popcount(x),res=25;\n    for(int i=0;i<p;i++)\n        for(int j=0;j<=i;j++)\n            if(a[i]+a[j]==a[p])\n            {\n                int t=dfs((x&~(1<<p))|(1<<p-1)|(1<<i)|(1<<j),p-1);\n                res=min(res,max(t,c));\n            }\n    return dp[x]=res;\n}\nint main()\n{\n    n=read();\n    for(int i=0;i<n;i++)\n        a[i]=read();\n    dp[1]=1;\n    int t=dfs(1<<(n-1),n-1);\n    if(t==25) puts(\"-1\");\n    else printf(\"%d\\n\",t);\n}\n\n```\n\n",
        "postTime": 1584756694,
        "uid": 128239,
        "name": "C20203030",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF279D \u3010The Minimum Number of Variables\u3011"
    }
]