[
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF786E)\n# \u9898\u76ee\u5927\u610f\n\u7ed9\u51fa\u4e00\u4e2a $n$ \u4e2a\u70b9\u7684\u6811\uff0c\u6709 $m$ \u4e2a\u5c45\u6c11\uff0c\u4ed6\u4eec\u90fd\u975e\u5e38\u559c\u6b22\u72d7\uff0c\u4e8e\u662f\uff0c\u6bcf\u4e2a\u5c45\u6c11\u8981\u6c42\u8981\u4e48\u7ed9\u5b83\u4e00\u6761\u72d7\uff0c\u8981\u4e48\u5728\u4ed6\u6563\u6b65\u7684\u8def\u5f84\u4e0a\u6bcf\u6761\u8fb9\u90fd\u6709\u72d7\u3002\u6c42\u6700\u5c11\u9700\u8981\u51e0\u4e2a\u72d7\u3002\n\n$n,m\\le 2\\times 10^4$\n# \u601d\u8def\n\u53ef\u4ee5\u770b\u51fa\u6765\u80af\u5b9a\u662f\u4e2a\u7f51\u7edc\u6d41\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u90a3\u80af\u5b9a\u662f\u628a\u5c45\u6c11\u548c\u8fb9\u8fde\u8d77\u8fb9\uff0c\u7ecf\u8fc7\u601d\u8003\uff0c\u4f60\u53d1\u73b0\u5982\u679c\u5bf9\u4e8e\u70b9 $i$ \uff0c\u6211\u4eec $s\\to i$ \u5bb9\u91cf\u4e3a $1$ \uff0c$[l,r]\\to t$ \u5bb9\u91cf\u4e3a $1$ \uff0c$i \\to [l,r] $ \u5bb9\u91cf\u4e3a $\\infty$\uff0c\u7b54\u6848\u5176\u5b9e\u5c31\u662f\u6700\u5c0f\u5272\u3002\u5176\u4e2d $[l,r]$ \u8868\u793a\u8be5\u5c45\u6c11\u6563\u6b65\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u81ea\u5df1\u753b\u4e00\u4e0b\u56fe\u5c31\u77e5\u9053\u4e86\uff0c\u5c31\u662f\u4f60\u8981\u4e48\u5220\u5c45\u6c11\u8981\u4e48\u5220\u6389\u8fb9\u3002\n\n\u7136\u540e\u4f60\u53d1\u73b0 $n^2$ \u6761\u8fb9\u80af\u5b9a\u662f\u4f1a\u7206\u70b8\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u8fb9\u6570\u5c31\u964d\u5230\u4e86 $n\\log n$ \u6761\uff0c\u5177\u4f53\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\u5b9e\u73b0\u3002\n# $\\texttt{Code}$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define Int register int\n#define INF 0x3f3f3f3f\n#define MAXN 2000005\n\nint n,m,top = 1,to[MAXN],wei[MAXN],cur[MAXN],nxt[MAXN],head[MAXN],fuck[MAXN];\nvoid Add_Edge (int u,int v,int w){\n\tto[++ top] = v,wei[top] = w,nxt[top] = head[u],head[u] = top;\n\tto[++ top] = u,wei[top] = 0,nxt[top] = head[v],head[v] = top;\n} \n\nvoid build (int i,int l,int r,int fuckto){\n\tif (l == r) return fuck[i] = l,Add_Edge (i,fuckto,1);\n\tint mid = (l + r) >> 1,ls = i << 1,rs = i << 1 | 1;\n\tAdd_Edge (i,ls,INF),Add_Edge (i,rs,INF),build (ls,l,mid,fuckto),build (rs,mid + 1,r,fuckto);\n}\n\nvoid modify (int i,int l,int r,int tl,int tr,int d){\n\tif (l >= tl && r <= tr) return Add_Edge (d,i,INF);\n\tint mid = (l + r) >> 1,ls = i << 1,rs = i << 1 | 1;\n\tif (tr > mid) modify (rs,mid + 1,r,tl,tr,d);\n\tif (tl <= mid) modify (ls,l,mid,tl,tr,d);\n}\n\nint dep[MAXN];\nbool BFS (int s,int t){\n\tfor (Int i = 1;i <= 4 * n + m + 2;++ i) cur[i] = head[i];\n\tmemset (dep,0x3f,sizeof (dep));\n\tqueue <int> q;while (!q.empty()) q.pop ();dep[s] = 0,q.push (s);\n\twhile (!q.empty()){\n\t\tint u = q.front();q.pop ();\n\t\tfor (Int i = head[u];i;i = nxt[i]){\n\t\t\tint v = to[i],w = wei[i];\n\t\t\tif (dep[v] == INF && w){\n\t\t\t\tdep[v] = dep[u] + 1;\n\t\t\t\tq.push (v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t] != INF;\n}\n\nint dfs (int s,int t,int lim){\n\tif (s == t) return lim;\n\tint used = 0;\n\tfor (Int& i = cur[s];i && lim;i = nxt[i]){\n\t\tcur[s] = i;int v = to[i],w = wei[i];\n\t\tif (dep[v] == dep[s] + 1 && w){\n\t\t\tint del = dfs (v,t,min (lim,w));\n\t\t\tused += del,lim -= del,wei[i] -= del,wei[i ^ 1] += del;\n\t\t}\n\t}\n\tif (lim == 0) dep[s] = INF;\n\treturn used;\n}\n\nint Dinic (int s,int t){\n\tint res = 0;\n\twhile (BFS (s,t)) res += dfs (s,t,INF);\n\treturn res;\n}\n\n#define PII pair<int,int>\n#define MP make_pair\n\nmap <PII,int> cge;\n\nstruct FuckTree{\n\tint toop = 1,to[MAXN],nxt[MAXN],tur[MAXN],id[MAXN],head[MAXN];\n\tvoid Add_Edge (int u,int v){\n\t\tto[++ toop] = v,nxt[toop] = head[u],head[u] = toop;\n\t\tto[++ toop] = u,nxt[toop] = head[v],head[v] = toop;\n\t}\n\tint Index,dep[MAXN],par[MAXN],siz[MAXN],son[MAXN],top[MAXN],dfn[MAXN];\n\tvoid dfs1 (int u,int fa){\n\t\tpar[u] = fa,dep[u] = dep[fa] + 1,siz[u] = 1,id[u] = cge[MP (u,fa)];\n\t\tfor (Int i = head[u];i;i = nxt[i]) if (to[i] ^ fa){\n\t\t\tdfs1 (to[i],u),siz[u] += siz[to[i]];\n\t\t\tif (siz[to[i]] > siz[son[u]]) son[u] = to[i];\n\t\t}\n\t}\n\tvoid dfs2 (int u,int Top){\n\t\ttop[u] = Top,dfn[u] = ++ Index,tur[Index] = u;\n\t\tif (son[u]) dfs2 (son[u],Top);\n\t\tfor (Int i = head[u];i;i = nxt[i])\n\t\t\tif (to[i] != par[u] && to[i] != son[u]) dfs2 (to[i],to[i]);\n\t} \n\tvoid Init (){dfs1 (1,0),dfs2 (1,1);} \n\tvoid Modify (int u,int v,int x){\n\t\twhile (top[u] ^ top[v]){\n\t\t\tif (dep[top[u]] < dep[top[v]]) swap (u,v);\n\t\t\tmodify (1,1,n,dfn[top[u]],dfn[u],x),u = par[top[u]];\n\t\t}\n\t\tif (dfn[u] > dfn[v]) swap (u,v);\n\t\tif (u ^ v) modify (1,1,n,dfn[u] + 1,dfn[v],x);  \n\t}\n}Tree;\n\nbool vis[MAXN];\nvoid dfs2 (int u){\n\tvis[u] = 1;\n\tfor (Int i = head[u];i;i = nxt[i])\n\t\tif (wei[i] && !vis[to[i]]) dfs2 (to[i]);\n}\n\ntemplate <typename T> inline void read (T &t){t = 0;char c = getchar();int f = 1;while (c < '0' || c > '9'){if (c == '-') f = -f;c = getchar();}while (c >= '0' && c <= '9'){t = (t << 3) + (t << 1) + c - '0';c = getchar();} t *= f;}\ntemplate <typename T,typename ... Args> inline void read (T &t,Args&... args){read (t);read (args...);}\ntemplate <typename T> inline void write (T x){if (x < 0){x = -x;putchar ('-');}if (x > 9) write (x / 10);putchar (x % 10 + '0');}\n\nsigned main(){\n\tread (n,m);\n\tfor (Int i = 2,u,v;i <= n;++ i) read (u,v),Tree.Add_Edge (u,v),cge[MP (u,v)] = cge[MP (v,u)] = i - 1;Tree.Init ();\n\tint s = n * 4 + m + 1,t = n * 4 + m + 2;build (1,1,n,t);\n\tfor (Int i = 1,l,r;i <= m;++ i) read (l,r),Tree.Modify (l,r,n * 4 + i),Add_Edge (s,n * 4 + i,1);\n\twrite (Dinic (s,t)),putchar ('\\n');dfs2 (s);\n\tvector <int> people,edge;\n\tfor (Int i = head[s];i;i = nxt[i]) if (!vis[to[i]]) people.push_back (to[i] - 4 * n);\n\tfor (Int i = head[t];i;i = nxt[i]) if (vis[to[i]]) edge.push_back (Tree.id[Tree.tur[fuck[to[i]]]]);\n\twrite (people.size()),putchar (' ');for (Int i = 0;i < people.size();++ i) write (people[i]),putchar (' ');putchar ('\\n');\n\twrite (edge.size()),putchar (' ');for (Int i = 0;i < edge.size();++ i) write (edge[i]),putchar (' ');putchar ('\\n');\n\treturn 0;\n}\n```\n# \u9644\n## checker \u5224\u65ad\u4f60\u7684\u7b54\u6848\u662f\u5426\u5408\u6cd5\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define Int register int\n#define MAXN 20005\n\ntemplate <typename T> inline void read (T &t){t = 0;char c = getchar();int f = 1;while (c < '0' || c > '9'){if (c == '-') f = -f;c = getchar();}while (c >= '0' && c <= '9'){t = (t << 3) + (t << 1) + c - '0';c = getchar();} t *= f;}\ntemplate <typename T,typename ... Args> inline void read (T &t,Args&... args){read (t);read (args...);}\ntemplate <typename T> inline void write (T x){if (x < 0){x = -x;putchar ('-');}if (x > 9) write (x / 10);putchar (x % 10 + '0');}\n\nint n,m,vis[MAXN],dep[MAXN],toop = 1,fa[MAXN],to[MAXN],nxt[MAXN],sum[MAXN],head[MAXN],a1[MAXN],a2[MAXN],al[MAXN],ar[MAXN];\nvoid Add_Edge (int u,int v){to[++ toop] = v,nxt[toop] = head[u],head[u] = toop;}\n\nvoid dfs (int u,int par){\n\tfa[u] = par,dep[u] = dep[par] + 1;\n\tfor (Int i = head[u];i;i = nxt[i]){\n\t\tint v = to[i];if (v == par) continue;\n\t\tdfs (v,u);\n\t}\n}\n\nvoid dfs2 (int u){\n\tfor (Int i = head[u];i;i = nxt[i])\n\t\tif (to[i] != fa[u]) dfs2 (to[i]);\n}\n\nbool check (int l,int r){\n\tbool flag = 1;\n\twhile (l ^ r){\n\t\tif (dep[l] < dep[r]) swap (l,r);\n\t\tif (!sum[l]) return 0;l = fa[l];\n\t} \n\treturn 1;\n}\n\nsigned main(){\n\tread (n,m);\n\tfor (Int i = 2,u,v;i <= n;++ i) read (u,v),a1[i - 1] = u,a2[i - 1] = v,Add_Edge (u,v),Add_Edge (v,u);\n\tfor (Int i = 1;i <= m;++ i) read (al[i],ar[i]);dfs (1,0);\n\tint tot,tot1,tot2;read (tot,tot1);\n\tfor (Int i = 1,a;i <= tot1;++ i) read (a),vis[a] = 1;\n\tread (tot2);for (Int i = 1,a;i <= tot2;++ i) read (a),sum[fa[a1[a]] == a2[a] ? a1[a] : a2[a]] = 1;\n\tfor (Int i = 1;i <= m;++ i) if (!check (al[i],ar[i]) && !vis[i]) return puts (\"You Fucking WA!\"),0;\n\tputs (\"Right!!!\"); \n\treturn 0;\n}\n```\n## datamaker \u751f\u6210\u6570\u636e\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define Int register int\n#define MAXN \n\ntemplate <typename T> inline void read (T &t){t = 0;char c = getchar();int f = 1;while (c < '0' || c > '9'){if (c == '-') f = -f;c = getchar();}while (c >= '0' && c <= '9'){t = (t << 3) + (t << 1) + c - '0';c = getchar();} t *= f;}\ntemplate <typename T,typename ... Args> inline void read (T &t,Args&... args){read (t);read (args...);}\ntemplate <typename T> inline void write (T x){if (x < 0){x = -x;putchar ('-');}if (x > 9) write (x / 10);putchar (x % 10 + '0');}\n\nsigned main(){\n\tfreopen (\"data.in\",\"w\",stdout);\n\tsrand (time (NULL));\n\tint n = rand() % 100 + 1,m = rand() % n + 1;cout << n << \" \" << m << endl;\n\tfor (Int i = 2;i <= n;++ i) cout << i << \" \" << rand() % (i - 1) + 1 << endl;\n\tfor (Int i = 1;i <= m;++ i) cout << rand () % n + 1 << \" \" << rand() % n + 1 << endl;\n\treturn 0;\n}\n```",
        "postTime": 1596698609,
        "uid": 124781,
        "name": "Walking_Dead",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF786E \u3010ALT\u3011"
    },
    {
        "content": "# \u9898\u76ee\n[\u70b9\u8fd9\u91cc](luogu.com.cn/problem/CF786E)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n\n\u770b\u5230\u8fd9\u9053\u9898\u7684\u6700\u4f18\u5316\u95ee\u9898\uff0c\u518d\u770b\u5230\u8fd9\u4e48\u602a\u5f02\u7684\u6570\u636e\u8303\u56f4\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u5c45\u6c11\u6ee1\u8db3\u5176\u4e00\u7684\u8981\u6c42\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u2014\u2014\u6700\u5c0f\u5272\u3002  \n\n\u8003\u8651\u5c06\u6bcf\u4e2a\u5c45\u6c11\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u5b83\u4eec\u7ec4\u6210 $A$ \u96c6\u5408\uff1b\u6bcf\u6761\u8fb9\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u5b83\u4eec\u7ec4\u6210 $B$ \u96c6\u5408\uff1b\u65b0\u589e\u4e00\u4e2a\u6e90\u70b9 $S$ \u548c\u6c47\u70b9 $T$\u3002\u6211\u4eec\u53ef\u4ee5\u5982\u4e0b\u6784\u56fe\uff1a  \n\n\u4ece $S$ \u5411 $u\\in A$ \u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a $1$\uff1b\u4ece $v\\in B$ \u5411 $T$ \u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a $1$\u3002\u5bf9\u4e8e $u\\in A$\uff0c\u5411\u6811\u4e0a $x_u$ \u5230 $y_u$ \u7684\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u8fde\u4e0a\u4e00\u6761\u5bb9\u91cf\u4e3a $\\infty$ \u7684\u8fb9\u3002  \n\n\u5728\u8fd9\u4e2a\u56fe\u4e0a\u9762\u8dd1\u6700\u5c0f\u5272\u7684\u8bdd\uff0c\u5982\u679c\u6700\u7ec8 $u\\in A$\uff0c\u5e76\u4e14\u5728\u5272\u91cc $u\\in T$\uff0c\u5c31\u4ee3\u8868\u4e86\u6211\u4eec\u9009\u62e9\u4e86\u7ed9 $u$ \u4e00\u53ea\u5c0f\u72d7\uff08\u5272\u6389\u4e86 $S$ \u5230 $u$ \u7684\u8fb9\uff09\uff1b\u5426\u5219\uff0c $u\\in S$\uff0c\u4ee3\u8868\u6211\u4eec\u9009\u62e9\u5728 $x_u$ \u5230 $y_u$ \u7684\u8def\u5f84\u4e0a\u653e\u4e0a\u5c0f\u72d7\uff08\u7531\u4e8e $A$ \u5411 $B$ \u8fde\u7684\u8fb9\u4e0d\u53ef\u80fd\u88ab\u5272\u6389\uff0c\u6240\u4ee5\u4e00\u5b9a\u662f $B$ \u5411 $T$ \u8fde\u7684\u8fb9\u88ab\u5272\u4e86\uff09\u3002  \n\n\u4e0d\u8fc7\u8fd9\u6837\u7684\u8bdd\uff0c\u8fb9\u6570\u5c06\u4f1a\u8fbe\u5230\u4e0d\u53ef\u627f\u53d7\u7684\u5927\u5c0f\uff0c\u8003\u8651\u4f18\u5316\u8fb9\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728 $A$ \u5411 $B$ \u8fde\u8fb9\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u6bcf\u6b21\u90fd\u662f\u5411\u6811\u4e0a\u7684\u4e00\u6761\u94fe\u4e0a\u7684\u8fb9\u8fde\u8fb9\u3002\u4f18\u5316\u7684\u70b9\u5c31\u5728\u4e8e\uff0c\u8fd9\u6837\u8fde\u8fb9\u7684\u65b9\u5f0f\u53ef\u4ee5\u201c\u6279\u91cf\u64cd\u4f5c\u201d\u3002\u8003\u8651\u4e24\u79cd\u8fde\u6cd5\uff0c\u90fd\u662f\u53ef\u884c\u7684\uff1a \n\n1. \u5c06\u6811\u4e0a\u95ee\u9898\u8f6c\u5316\u5230\u5e8f\u5217\u4e0a\u6765\uff0c\u6211\u4eec\u7528\u6811\u94fe\u5256\u5206\u3002\u4e4b\u540e $A$ \u4e2d\u4e00\u4e2a\u5143\u7d20\u5411 $B$ \u8fde\u8fb9\uff0c\u5c31\u76f8\u5f53\u4e8e\u5bf9\u5e8f\u5217\u4e0a $\\log_2n$ \u4e2a\u533a\u95f4\u8fde\u8fb9\uff0c\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u3002  \n\n2. \u5c06\u94fe $(x,y)$ \u62c6\u6210 $(x,lca(x,y))\\rightarrow(lca(x,y),y)$\u3002\u8fd9\u4e24\u6761\u5b50\u94fe\u90fd\u662f\u4ece\u5b50\u5b59\u5411\u7956\u5148\u7684\u65b9\u5411\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u60f3\u5230\u6811\u4e0a\u500d\u589e\u3002\u7528\u500d\u589e\u7684 ST \u8868\uff0c\u5c06\u6811\u4e0a\u7684\u4e00\u6761\u5b50\u5b59\u5230\u7956\u5148\u7684\u94fe\u62c6\u6210\u4e24\u4e2a**\u53ef\u4ea4\u533a\u95f4**\uff08\u53c2\u8003 RMQ-ST \u8868\u7684\u62c6\u6cd5\uff09\uff0c\u5e76\u4e14\u5206\u522b\u5411\u4e24\u4e2a\u533a\u95f4\u8fde\u8fb9\u3002\u8fd9\u6837\u7684\u8bdd\u4e00\u6761\u94fe\u5c31\u6700\u591a\u9700\u8981 4 \u6761\u8fb9\uff0c\u6bd4\u6811\u94fe\u5256\u5206\u7684\u65b9\u6cd5\u8981\u4f18\u4e00\u4e9b\u3002  \n\n\u5efa\u5b8c\u56fe\u4e4b\u540e\u8dd1\u7f51\u7edc\u6d41\uff0c\u6700\u5927\u6d41\u5373\u662f\u6700\u5c11\u5c0f\u72d7\u6570\u3002\u8003\u8651\u6784\u9020\u65b9\u6848\u3002\u4ece $S$ \u5f00\u59cb\uff0c\u53ea\u8d70**\u6ca1\u6709\u6ee1\u6d41**\u7684\u8fb9\uff0c\u5c06\u7ecf\u8fc7\u7684\u70b9\u6253\u6807\u8bb0\u3002\u5982\u679c $A$ \u4e2d\u7684\u70b9\u6ca1\u6709\u88ab\u6253\u6807\u8bb0\uff0c\u5c31\u8bf4\u660e\u5b83\u4e0a\u9762\u6709\u6d41\u7ecf\u8fc7\uff0c\u4e5f\u5c31\u662f\u5b83\u88ab\u9001\u4e86\u5c0f\u72d7\uff1b\u5982\u679c $B$ \u4e2d\u7684\u70b9\uff08\u6307\u7684\u662f\u90a3\u4e9b**\u4ee3\u8868\u5355\u72ec\u4e00\u6761\u8fb9**\u7684 $B$ \u4e2d\u7684\u70b9\uff09\u88ab\u6253\u4e86\u6807\u8bb0\uff0c\u5c31\u8bf4\u660e\u6b8b\u4f59\u7f51\u7edc\u4e0a\u5b58\u5728 $A$ \u4e2d\u7684\u70b9\u80fd\u8d70\u5230\u5b83\uff0c\u5b83\u5230 $T$ \u7684\u8fb9\u5c31\u9700\u8981\u88ab\u5220\u9664\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u6784\u9020\u51fa\u7b54\u6848\u4e86\u3002 \n\n# \u4ee3\u7801\n```cpp\n#include <queue>\n#include <cmath>\n#include <cstdio>\n#include <vector>\n\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 2e4 + 5, MAXM = 1e4 + 5, MAXE = 1e6 + 5, MAXSIZ = 1e6 + 5, MAXLOG = 16;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\nstruct edge\n{\n\tint to, nxt, c;\n}Graph[MAXE << 1], G[MAXN << 1];\n\nstd :: queue<int> q;\nstd :: vector<int> cit, edg;\n\nint f[MAXN][MAXLOG], id[MAXN][MAXLOG];\nint head[MAXSIZ], dis[MAXSIZ], cur[MAXSIZ], ref[MAXSIZ];\nint dep[MAXN], GHead[MAXN], fE[MAXN], x[MAXM], y[MAXM], ps[MAXN];\nint N, M, lg2, siz, cnt = 1, cnt1;\nbool vis[MAXSIZ];\n\nvoid addEdge( const int from, const int to, const int C )\n{\n\tGraph[++ cnt].to = to, Graph[cnt].c = C, Graph[cnt].nxt = head[from];\n\thead[from] = cnt;\n}\n\nvoid addEdge( const int from, const int to )\n{\n\tG[++ cnt1].to = to, G[cnt1].nxt = GHead[from], GHead[from] = cnt1;\n}\n\nvoid addE( const int from, const int to, const int C )\n{\n\taddEdge( from, to, C ), addEdge( to, from, 0 );\n}\n\nbool BFS( const int S, const int T )\n{\n\twhile( ! q.empty() ) q.pop();\n\tfor( int i = 1 ; i <= siz ; i ++ ) dis[i] = INF;\n\tdis[S] = 0, q.push( S );\n\tint u, v;\n\twhile( ! q.empty() )\n\t{\n\t\tu = q.front(), q.pop();\n\t\tfor( int i = head[u] ; i ; i = Graph[i].nxt )\n\t\t\tif( Graph[i].c && dis[v = Graph[i].to] > dis[u] + 1 )\n\t\t\t\tdis[v] = dis[u] + 1, q.push( v );\n\t}\n\treturn dis[T] < INF;\n}\n\nint DFS( const int u, const int lin, const int T )\n{\n\tif( u == T ) return lin;\n\tint res, used = 0, v, c;\n\tfor( int &i = cur[u] ; i ; i = Graph[i].nxt )\n\t\tif( ( c = Graph[i].c ) && dis[v = Graph[i].to] == dis[u] + 1 &&\n\t\t\t( res = DFS( v, MIN( lin - used, c ), T ) ) )\n\t\t{\n\t\t\tused += res, Graph[i].c -= res, Graph[i ^ 1].c += res;\n\t\t\tif( used == lin ) break;\n\t\t}\n\tif( used < lin ) dep[u] = INF;\n\treturn used;\n}\n\nint Dinic( const int S, const int T )\n{\n\tint fl = 0;\n\twhile( BFS( S, T ) )\n\t{\n\t\tfor( int i = 1 ; i <= siz ; i ++ ) cur[i] = head[i];\n\t\tfl += DFS( S, INF, T );\n\t}\n\treturn fl;\n}\n\nvoid DFS1( const int u, const int fa )\n{\n\tf[u][0] = fa, dep[u] = dep[fa] + 1;\n\tif( fa ) id[u][0] = ++ siz, ref[siz] = fE[u];\n\tfor( int i = GHead[u], v ; i ; i = G[i].nxt )\n\t\tif( ( v = G[i].to ) ^ fa ) fE[v] = i + 1 >> 1, DFS1( v, u );\n}\n\nvoid init()\n{\n\tlg2 = log2( N );\n\tfor( int j = 1 ; ( 1 << j ) <= N ; j ++ )\n\t\tfor( int i = 1 ; i <= N ; i ++ )\n\t\t{\n\t\t\tf[i][j] = f[f[i][j - 1]][j - 1];\n\t\t\tif( ! f[i][j] ) continue; id[i][j] = ++ siz;\n\t\t\tif( f[i][j - 1] ) addE( id[i][j], id[i][j - 1], INF );\n\t\t\tif( f[i][j] ) addE( id[i][j], id[f[i][j - 1]][j - 1], INF );\n\t\t}\n}\n\nvoid balance( int &u, const int steps ) { for( int i = 0 ; ( 1 << i ) <= steps ; i ++ ) if( steps & ( 1 << i ) ) u = f[u][i]; }\n\nint LCA( int u, int v )\n{\n\tif( dep[u] > dep[v] ) balance( u, dep[u] - dep[v] );\n\tif( dep[v] > dep[u] ) balance( v, dep[v] - dep[u] );\n\tif( u == v ) return u;\n\tfor( int i = lg2 ; ~ i ; i -- ) if( f[u][i] ^ f[v][i] ) u = f[u][i], v = f[v][i];\n\treturn f[u][0];\n}\n\nvoid cover( const int u, const int top, const int s )\n{\n\tint v = u, dis = dep[u] - dep[top];\n\tif( ! dis ) return ;\n\tint k = log2( dis ); balance( v, dis - ( 1 << k ) );\n\taddE( s, id[u][k], INF ); if( id[u][k] ^ id[v][k] ) addE( s, id[v][k], INF );\n}\n\nvoid DFS2( const int u )\n{\n\tvis[u] = true;\n\tfor( int i = head[u], v ; i ; i = Graph[i].nxt )\n\t\tif( Graph[i].c && ! vis[v = Graph[i].to] ) DFS2( v );\n}\n\nint main()\n{\n\tread( N ), read( M );\n\tfor( int i = 1, a, b ; i < N ; i ++ ) read( a ), read( b ), addEdge( a, b ), addEdge( b, a );\n\tsiz = M, DFS1( 1, 0 );\n\tinit();\n\tconst int S = ++ siz, T = ++ siz;\n\tfor( int i = 2 ; i <= N ; i ++ ) addE( id[i][0], T, 1 );\n\tfor( int i = 1, tmp ; i <= M ; i ++ )\n\t{\n\t\tread( x[i] ), read( y[i] );\n\t\ttmp = LCA( x[i], y[i] );\n\t\tcover( x[i], tmp, i ), cover( y[i], tmp, i );\n\t\taddE( S, i, 1 );\n\t}\n\twrite( Dinic( S, T ) ), putchar( '\\n' );\n\tDFS2( S );\n\tfor( int i = 1 ; i <= M ; i ++ ) if( ! vis[i] ) cit.push_back( i );\n\tfor( int i = 2 ; i <= N ; i ++ ) if( vis[id[i][0]] ) edg.push_back( fE[i] );\n\twrite( cit.size() );\n\tfor( int i = 0 ; i < cit.size() ; i ++ ) putchar( ' ' ), write( cit[i] );\n\tputchar( '\\n' ), write( edg.size() );\n\tfor( int i = 0 ; i < edg.size() ; i ++ ) putchar( ' ' ), write( edg[i] );\n\tputchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1579609872,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[CF786E]ALT"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://codeforces.com/problemset/problem/786/E)\n# \u9898\u76ee\u5927\u610f\n\u7ed9\u4e00\u9897 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5b88\u536b\u3002\u6709 $m$ \u4e2a\u5c45\u6c11\uff0c\u6bcf\u4e2a\u5c45\u6c11\u6709\u4e00\u4e2a\u6563\u6b65\u8def\u5f84\uff08\u4e24\u4e2a\u8282\u70b9\u7684\u6811\u4e0a\u6700\u77ed\u8def\uff09\u3002\u4e00\u4e2a\u5c45\u6c11\u9ad8\u5174\u5f53\u4e14\u4ec5\u5f53\u4ed6\u83b7\u5f97\u4e86\u4e00\u4e2a\u5ba0\u7269\u6216\u8005\u4ed6\u6563\u6b65\u7684\u8def\u5f84\u4e0a\u6240\u6709\u7684\u5b88\u536b\u90fd\u6709\u5ba0\u7269\u3002\u5ba0\u7269\u53ef\u4ee5\u5206\u914d\u7ed9\u5c45\u6c11\u6216\u8005\u5b88\u536b\u8005\u3002\u6c42\u6700\u5c11\u9700\u8981\u51e0\u53ea\u5ba0\u7269\u624d\u80fd\u8ba9\u6240\u6709\u5c45\u6c11\u9ad8\u5174\u3002\u8f93\u51fa\u65b9\u6848\u3002\n# \u601d\u8def\n\u5047\u8bbe\u591a\u4e00\u6761\u72d7\u5bf9\u4e8e\u7b54\u6848\u7684\u8d21\u732e\u4e3a $-1$\u3002\n\n\u5148\u8ba9 $m$ \u4e2a\u5c45\u6c11\u4eba\u624b\u4e00\u53ea\u72d7\uff0c\u5219\u8d21\u732e\u4e3a $-m$\u3002\n\n\u8003\u8651\u6700\u5927\u6743\u6700\u5927\u5b50\u56fe\u3002\u5219\u5c45\u6c11\u653e\u5f03\u4e00\u53ea\u72d7\u7684\u8d21\u732e\u4e3a $1$\uff0c\u5b88\u536b\u5f97\u5230\u4e00\u53ea\u72d7\u7684\u8d21\u732e\u4e3a $-1$\u3002\n\n\u4e14\u5c45\u6c11\u653e\u5f03\u72d7\u4f1a\u9650\u5236\u5b88\u536b\u5f97\u5230\u72d7\uff0c\u5219\u7b54\u6848\u5c31\u4e3a $-(m-(m-mincut))=mincut=maxflow$\u3002\n\n\u666e\u901a\u5efa\u56fe\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nm)$\uff0c\u4f46\u662f\u8fde\u8fb9\u5728\u6811\u4e0a\u4e00\u6bb5\u8fde\u7eed\u7684\u8fb9\u4e2d\u8fdb\u884c\uff0c\u53c2\u8003[T'ill It's Over](https://www.cnblogs.com/C202202chenkelin/p/14612686.html)\u7684\u601d\u8def\uff0c\u7528\u7ebf\u6bb5\u6811\uff08\u6811\u5256\uff09\u4f18\u5316\u8fde\u8fb9\u3002\n\n\u5219 $u\\to[l,r]$ \u53ef\u4ee5\u4f18\u5316\u4e3a $u\\to[l_1,r_1],u\\to[l_2,r_2],\\dots,u\\to[l_k,r_k]$\uff0c\u4f7f\u5f97 $[l_i,r_i]$ \u7684\u5e76\u96c6\u4e3a $[l,r]$\uff0c\u4e14\u6ca1\u6709\u4ea4\u96c6\uff0c\u5219\u901a\u8fc7 $[l_i,r_i]$ \u5230\u53f6\u5b50\u8282\u70b9\uff0c\u4e0e\u539f\u56fe\u7b49\u4ef7\u3002\n\n\u6700\u540e\u8981\u6c42\u8f93\u51fa\u65b9\u6848\uff0c\u8003\u8651\u600e\u4e48\u6784\u9020\u6700\u5c0f\u5272\u3002\n\n\u8bbe\u4e0e\u539f\u70b9\u901a\u8fc7\u6b8b\u91cf\u7f51\u7edc\u8fde\u901a\u7684\u70b9\u5f62\u6210\u70b9\u96c6 $S$\uff0c\u4e0d\u8fde\u901a\u7684\u8bbe\u4e3a\u70b9\u96c6 $T$\u3002\n\n\u5219 $S$ \u5230 $T$ \u7684\u4efb\u610f\u6b63\u5411\u8fb9\u5c31\u4e3a\u6700\u5c0f\u5272\u3002\n# Code\n```cpp\n#include <map>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n#define INF 0x3f3f3f3f\nconst int MAXN = 2e5 + 5;\nconst int MAXM = 1e6 + 5;\nstruct Edge1 { int To, Next; };\nEdge1 edge1[MAXM << 1];\nint head1[MAXN], tot1 = 1;\nvoid Addedge1(int u, int v) {\n\tedge1[++tot1].Next = head1[u], edge1[tot1].To = v, head1[u] = tot1;\n\tedge1[++tot1].Next = head1[v], edge1[tot1].To = u, head1[v] = tot1;\n}\nstruct Edge { int To, Cap, Next; };\nEdge edge[MAXM << 1];\nint head[MAXN], tot = 1;\nvoid Addedge(int u, int v, int w) {\n\tedge[++tot].Next = head[u], edge[tot].To = v, edge[tot].Cap = w, head[u] = tot;\n\tedge[++tot].Next = head[v], edge[tot].To = u, edge[tot].Cap = 0, head[v] = tot;\n}\nint Min(int x, int y) { return x < y ? x : y; }\nmap<int, int> mp;\nint cur[MAXN], dep[MAXN], que[MAXN], qhead, qtail;\nint n, m, s, t, a[MAXN], b[MAXN];\nbool vis[MAXN];\nvector<int> vec1, vec2;\nstruct Node {\n\tint l, r;\n\t#define ls (pos << 1)\n\t#define rs (pos << 1 | 1)\n};\nNode tr[MAXN << 2];\nint fa[MAXN], sz[MAXN], tp[MAXN], dep1[MAXN], son[MAXN], dfn[MAXN], real[MAXN];\nint tim;\nvoid dfs1(int u, int pre) {\n\tfa[u] = pre, sz[u] = 1, dep1[u] = dep1[pre] + 1;\n\tint maxn = 0;\n\tfor(int i = head1[u]; i; i = edge1[i].Next) {\n\t\tint v = edge1[i].To;\n\t\tif(v == pre) continue;\n\t\tdfs1(v, u); sz[u] += sz[v];\n\t\tif(maxn < sz[v]) maxn = sz[v], son[u] = v;\n\t}\n}\nvoid dfs2(int u, int Top) {\n\ttp[u] = Top, dfn[u] = ++tim;\n\tif(son[u]) dfs2(son[u], Top);\n\tfor(int i = head1[u]; i; i = edge1[i].Next) {\n\t\tint v = edge1[i].To;\n\t\tif(v == fa[u] || v == son[u]) continue;\n\t\tdfs2(v, v);\n\t}\n}\nvoid Build(int pos, int l, int r) {\n\ttr[pos].l = l, tr[pos].r = r;\n\tif (l == r) return (void) (Addedge(m + pos, t, 1), real[pos] = l);\n\tint mid = (l + r) >> 1;\n\tBuild(ls, l, mid);\n\tBuild(rs, mid + 1, r);\n\tAddedge(m + pos, m + ls, INF);\n\tAddedge(m + pos, m + rs, INF);\n}\nvoid Update(int pos, int l, int r, int u) {\n\tif (l <= tr[pos].l && tr[pos].r <= r) return (void) Addedge(u, pos + m, INF);\n\tif (tr[ls].r >= l) Update(ls, l, r, u);\n\tif (tr[rs].l <= r) Update(rs, l, r, u);\n}\nvoid Update_Past(int u, int v, int x) {\n\twhile (tp[u] != tp[v]) {\n\t\tif (dep1[tp[u]] < dep1[tp[v]]) swap(u, v);\n\t\tUpdate(1, dfn[tp[u]], dfn[u], x);\n\t\tu = fa[tp[u]];\n\t}\n\tif (u == v) return;\n\tif (dep1[u] < dep1[v]) swap(u, v);\n\tUpdate(1, dfn[son[v]], dfn[u], x);\n}\nbool bfs(bool limit) {\n\tfor(int i = s; i <= t; i++) dep[i] = 0, cur[i] = head[i];\n\tcur[s] = head[s]; dep[s] = 1;\n\tqhead = 1; qtail = 1; que[1] = s;\n\twhile(qhead <= qtail) {\n\t\tint u = que[qhead++];\n\t\tfor(int i = head[u]; i; i = edge[i].Next) {\n\t\t\tint v = edge[i].To;\n\t\t\tif(!dep[v] && edge[i].Cap && (!limit || !(i & 1))) {\n\t\t\t\tdep[v] = dep[u] + 1; cur[v] = head[v];\n\t\t\t\tque[++qtail] = v;\n\t\t\t\tif (v == t) return 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint dfs(int u, int flow) {\n\tif(u == t || !flow) return flow;\n\tint rest = flow;\n\tfor(int i = cur[u]; i && rest; i = edge[i].Next) {\n\t\tcur[u] = i;\n\t\tint v = edge[i].To;\n\t\tif(dep[v] == dep[u] + 1 && edge[i].Cap) {\n\t\t\tint del = dfs(v, Min(rest, edge[i].Cap));\n\t\t\trest -= del; edge[i].Cap -= del; edge[i ^ 1].Cap += del;\n\t\t\tif(!del) cur[v] = 0;\n\t\t}\n\t}\n\treturn flow - rest;\n}\nint Dinic() {\n\tint res = 0, flow;\n\twhile (bfs(1)) while ((flow = dfs(s, INF))) res += flow;\n\twhile (bfs(0)) while ((flow = dfs(s, INF))) res += flow;\n\treturn res;\n}\nvoid dfs_Init(int u) {\n\tfor (int i = head1[u]; i; i = edge1[i].Next) {\n\t\tint v = edge1[i].To;\n\t\tif (mp[dfn[v]]) continue;\n\t\tmp[dfn[v]] = i / 2;\n\t\tdfs_Init(v);\n\t}\n}\nvoid dfs_check(int u) {\n\tvis[u] = 1;\n\tfor (int i = head[u]; i; i = edge[i].Next)\n\t\tif (edge[i].Cap && !vis[edge[i].To]) dfs_check(edge[i].To);\n}\nint main() {\n\tscanf(\"%d %d\", &n, &m);\n\tfor (int i = 1, u, v; i < n; i++) {\n\t\tscanf(\"%d %d\", &u, &v);\n\t\tAddedge1(u, v);\n\t}\n\tt = 4 * n + m + 1;\n\tdfs1(1, 1); dfs2(1, 1); dfs_Init(1);\n\tBuild(1, 1, n);\n\tfor (int i = 1; i <= m; i++) {\n\t\tscanf(\"%d %d\", &a[i], &b[i]);\n\t\tUpdate_Past(a[i], b[i], i);\n\t\tAddedge(s, i, 1);\n\t}\n\tint res = Dinic();\n\tprintf(\"%d\\n\", res);\n\tdfs_check(s);\n\tfor (int i = head[s]; i; i = edge[i].Next)\n\t\tif (vis[s] && !vis[edge[i].To]) vec1.push_back(edge[i].To);\n\tprintf(\"%llu \", vec1.size());\n\tfor (int i = 0; i < (int) vec1.size(); i++) printf(\"%d%c\", vec1[i], i == (int) vec1.size() - 1 ? '\\n' : ' ');\n\tfor (int i = head[t]; i; i = edge[i].Next)\n\t\tif (!vis[t] && vis[edge[i].To]) vec2.push_back(mp[real[edge[i].To - m]]);\n\tprintf(\"%llu \", vec2.size());\n\tfor (int i = 0; i < (int) vec2.size(); i++) printf(\"%d%c\", vec2[i], i == (int) vec2.size() - 1 ? '\\n' : ' ');\n\treturn 0;\n}\n```",
        "postTime": 1639214203,
        "uid": 254733,
        "name": "Night_Bringer",
        "ccfLevel": 0,
        "title": "[\u9898\u89e3] CF786E ALT"
    },
    {
        "content": "\u8003\u8651\u7528\u6700\u5c0f\u5272\u89e3\u51b3\u3002              \n\n\u89c6\u6240\u6709\u5e02\u6c11\u5404\u8868\u793a\u4e00\u4e2a\u70b9\uff0c\u5c06 $s$ \u5411\u6240\u6709\u4eba\u90fd\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u6bcf\u4e2a\u5b88\u536b\u5bf9\u5e94\u7684\u8fb9\u6302\u5230\u8fde\u5411\u6811\u4e0a\u6df1\u5ea6\u5c0f\u7684\u70b9\u4e0a\u89c6\u4e3a\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u6bcf\u4e2a\u5e02\u6c11\u5411\u5176\u5bf9\u5e94\u7684\u8def\u5f84\u8fde\u5bb9\u91cf\u4e3a Inf \u7684\u8fb9\uff0c\u6700\u540e\u6bcf\u6761\u8fb9\u5411 $t$ \u8fde\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\u5373\u53ef\u3002              \n\n\u8003\u8651\u5230\u8fde\u8fb9\u5448\u533a\u95f4\u8fde\u8fb9\u5f62\u5f0f\uff0c\u6240\u4ee5\u7528\u7ebf\u6bb5\u6811 + \u6811\u5256\u4f18\u5316\u5efa\u56fe\u3002\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u70b9\u90fd\u5411\u5176\u513f\u5b50\u8fde\u5bb9\u91cf\u4e3a Inf \u7684\u8fb9\u5373\u53ef\u4f20\u9012\u8fb9\u7684\u4e0d\u53ef\u5272\u6027\u8d28\uff0c\u8fd9\u6837\u4ea7\u751f\u7684\u70b9\u6570\u4f9d\u65e7\u4e3a $O(n)$ \u8fb9\u6570\u4e3a $O(n \\log ^ 2 n)$\u3002                \n\n\u8fd8\u6709\u4e00\u79cd\u662f st \u8868\u4f18\u5316\u5efa\u56fe\uff0c\u4f46\u662f\u6ca1\u6709\u7ebf\u6bb5\u6811\u7684~~\u7406\u8bba~~\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u79c0\u5c31\u4e0d\u5177\u4f53\u5c55\u5f00\u4e86\u3002                   \n\n\u6700\u540e\u8f93\u51fa\u65b9\u6848\u65f6\uff0c\u6211\u4eec\u4ece $s$ \u5f00\u59cb\u8d70\u672a\u6ee1\u6d41\u7684\u5f97\u5230\u4e00\u4e2a\u5b50\u96c6\uff0c\u5176\u4e2d\u80fd\u8d70\u5230\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u53f6\u5b50\u8282\u70b9\uff0c\u5373\u6211\u4eec\u7684\u5b88\u536b\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e2a\u5b88\u536b\u4e0a\u65b9\u6709\u5e02\u6c11\u6ca1\u6709\u5f97\u5230\u5c0f\u72d7\uff0c\u9700\u8981\u88ab\u5272\u53bb\u3002             \n\n\u540c\u65f6\u5bf9\u4e8e\u5e02\u6c11\u800c\u8a00\uff0c\u5982\u679c\u8fd9\u4e2a\u5e02\u6c11\u6ca1\u6709\u88ab\u8d70\u5230\uff0c\u5c31\u8bf4\u660e\u5b83\u65e2\u6ca1\u6709\u88ab $s$ \u6d41\u8fc7\u540c\u65f6\u4e0b\u65b9\u4e5f\u6709\u81f3\u5c11\u4e00\u6761\u8fb9\u6ca1\u6709\u88ab\u6d41\u5230\uff0c\u8fd9\u4e2a\u5e02\u6c11\u5c31\u9700\u8981\u88ab\u9009\u3002\n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 1e5 + 5 , M = 4e6 + 5 , Inf = 1e9 + 1;\nint n,m,cnt = 1,head[Len],cur[Len],dep[Len],s,t,maxn,root,lc[Len],rc[Len],v[Len],Head[Len],Cnt,tot,top[Len],Dep[Len],fa[Len],siz[Len],son[Len],dfn[Len],ID[Len];\nint Leaf[Len];\nstruct node\n{\n\tint next,to,w;\n}edge[M << 1],Edge[Len << 1];\nvoid add(int from,int to,int w)\n{\n\tedge[++ cnt].to = to;\n\tedge[cnt].w = w;\n\tedge[cnt].next = head[from];\n\thead[from] = cnt;\n}\nvoid Add(int from,int to,int w)\n{\n\tEdge[++ Cnt].to = to;\n\tEdge[Cnt].w = w;\n\tEdge[Cnt].next = Head[from];\n\tHead[from] = Cnt;\n}\nbool BFS()\n{\n\tqueue<int> q;\n\tfor(int i = 1 ; i <= t ; i ++) dep[i] = 0;\n\tdep[s] = 1 , cur[s] = head[s] , q.push(s); \n\twhile(!q.empty())\n\t{\n\t\tint p = q.front();q.pop();\n\t\tfor(int e = head[p] ; e ; e = edge[e].next)\n\t\t{\n\t\t\tint to = edge[e].to;\n\t\t\tif(edge[e].w > 0 && !dep[to])\n\t\t\t{\n\t\t\t\tdep[to] = dep[p] + 1;\n\t\t\t\tcur[to] = head[to];\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t] > 0;\n}\nint dfs(int u,int In)\n{\n\tif(u == t) return In;\n\tint Out = 0;\n\tfor(int e = cur[u] ; e && In > 0 ; e = edge[e].next)\n\t{\n\t\tcur[u] = e;\n\t\tint to = edge[e].to;\n\t\tif(dep[to] == dep[u] + 1 && edge[e].w)\n\t\t{\n\t\t\tint res = dfs(to , min(In , edge[e].w));\n\t\t\tIn -= res;\n\t\t\tOut += res;\n\t\t\tedge[e].w -= res;\n\t\t\tedge[e ^ 1].w += res;\n\t\t}\n\t}\n\tif(!Out) return dep[u] = 0;\n\treturn Out;\n}\nvoid dfs1(int x,int f)\n{\n\tDep[x] = Dep[f] + 1;\n\tfa[x] = f;\n\tsiz[x] = 1;\n\tint maxsiz = -1;\n\tfor(int e = Head[x] ; e ; e = Edge[e].next)\n\t{\n\t\tint to = Edge[e].to;\n\t\tif(to == f) continue;\n\t\tv[to] = Edge[e].w;\n\t\tdfs1(to , x);\n\t\tsiz[x] += siz[to];\n\t\tif(siz[to] > maxsiz) maxsiz = siz[to] , son[x] = to;\n\t}\n}\nvoid dfs2(int x,int topf)\n{\n\tdfn[x] = ++ tot;\n\ttop[x] = topf;\n\tID[tot] = x;\n\tif(!son[x]) return;\n\tdfs2(son[x] , topf);\n\tfor(int e = Head[x] ; e ; e = Edge[e].next)\n\t{\n\t\tint to = Edge[e].to;\n\t\tif(to == fa[x] || to == son[x]) continue;\n\t\tdfs2(to , to);\n\t}\n}\nvoid build(int &p,int l,int r)\n{\n\tif(!p) p = ++ maxn;\n\tif(l == r) return;\n\tint mid = (l + r) >> 1;\n\tbuild(lc[p] , l , mid);\n\tbuild(rc[p] , mid + 1 , r);\n\tadd(p , lc[p] , Inf) , add(lc[p] , p , 0);\n\tadd(p , rc[p] , Inf) , add(rc[p] , p , 0);\n}\nvoid leafadd(int p,int l,int r)\n{\n\tif(l == r)\n\t{\n\t\tadd(p , t , 1) , add(t , p , 0);\n\t\tLeaf[p] = l;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tleafadd(lc[p] , l , mid);\n\tleafadd(rc[p] , mid + 1 , r);\n}\nvoid update(int p,int l,int r,int nl,int nr,int ps)\n{\n\tif(nl <= l && nr >= r){add(ps , p , Inf);add(p , ps , 0);return;}\n\tint mid = (l + r) >> 1;\n\tif(nl <= mid) update(lc[p] , l , mid , nl , nr , ps);\n\tif(nr > mid) update(rc[p] , mid + 1 , r , nl , nr , ps);\n}\nvoid addRange(int x,int y,int ps)\n{\n\twhile(top[x] != top[y])\n\t{\n\t\tif(Dep[top[x]] < Dep[top[y]]) swap(x , y);\n\t\tupdate(1 , 1 , n , dfn[top[x]] , dfn[x] , ps);\n\t\tx = fa[top[x]];\n\t}\n\tif(Dep[x] > Dep[y]) swap(x , y);\n\tif(dfn[x] + 1 <= dfn[y]) update(1 , 1 , n , dfn[x] + 1 , dfn[y] , ps);\n}\nvector<int> V,VV;\nbool flag[Len];\nvoid DDFS(int x)\n{\n\tflag[x] |= 1;//\u8bf4\u660e\u4f1a\u88ab\u672a\u6ee1\u6d41\u7684\u70b9\u8d70\u5230 \n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(edge[e].w && !flag[to]) DDFS(edge[e].to);\n\t}\n}\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i = 1 ; i < n ; i ++)\n\t{\n\t\tint x,y;scanf(\"%d %d\",&x,&y);\n\t\tAdd(x , y , i) , Add(y , x , i);\n\t}\n\tdfs1(1 , 0);\n\tdfs2(1 , 1);\n\tbuild(root , 1 , n);\n\ts = maxn + m + 1 , t = s + 1;\n\tleafadd(root , 1 , n);\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tint x,y;scanf(\"%d %d\",&x,&y);\n\t\taddRange(x , y , i + maxn);\n\t\tadd(s , i + maxn , 1) , add(i + maxn , s , 0);\n\t}\n\tint ans = 0;\n\twhile(BFS()) ans += dfs(s , Inf);\n\tprintf(\"%d\\n\",ans);\n\tDDFS(s);\n\tfor(int e = head[s] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(!flag[to]) V.push_back(to - maxn);\n\t}\n\tfor(int e = head[t] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(flag[to]) VV.push_back(v[ID[Leaf[to]]]);\n\t}\n\tprintf(\"%d \",V.size());\n\tfor(int i = 0 ; i < V.size() ; i ++) printf(\"%d \",V[i]);\n\tputs(\"\");\n\tprintf(\"%d \",VV.size());\n\tfor(int i = 0 ; i < VV.size() ; i ++) printf(\"%d \",VV[i]);\n\treturn 0;\n}\n```",
        "postTime": 1636707670,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF786E ALT"
    },
    {
        "content": "\u770b\u5230 $2\\times10^4$ \u8fd9\u79cd\u534a\u5927\u4e0d\u5c0f\u7684\u8303\u56f4\uff0c\u8981\u4e48\u662f\u5927\u6bd2\u7624\u5e26\u4e24\u4e09\u4e2a $\\log$ \u6216\u662f\u6839\u53f7\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8981\u4e48\u53ea\u80fd\u662f\u7f51\u7edc\u6d41\u4e86\u3002\u663e\u7136\u8fd9\u9898\u4f3c\u4e4e\u4e0d\u592a\u9002\u5408\u7528\u6570\u636e\u7ed3\u6784\u5904\u7406\uff0c\u4e8e\u662f\u5f80\u7f51\u7edc\u6d41\u65b9\u5411\u60f3\u3002\n\n\u5982\u679c\u7528\u6700\u5927\u6d41\u5904\u7406\u7684\u8bdd\uff0c\u53d1\u73b0\u201c\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u90fd\u5fc5\u987b\u9001\u72d7\u201d\u8fd9\u79cd\u9650\u5236\u4e0d\u597d\u5904\u7406\u3002\u4e8e\u662f\u8003\u8651\u6700\u5c0f\u5272\u3002\n\n\u6700\u5c0f\u5272\u5c31\u6709\u7ecf\u5178\u6a21\u578b\u2014\u2014\u8003\u8651\u82e5\u6700\u7ec8\u4eba\u4ee3\u8868\u7684\u70b9\u548c\u6e90\u70b9\u8054\u901a\u5c31\u8868\u793a\u5176\u672a\u88ab\u9001\u72d7\uff0c\u5176\u548c\u6c47\u70b9\u8054\u901a\u5c31\u4ee3\u8868\u5176\u88ab\u9001\u4e86\u72d7\u3002\u4e8e\u662f\uff0c\u6e90\u70b9\u5411\u4eba\u6240\u4ee3\u8868\u7684\u70b9\u8fde\u8fb9\uff0c\u5272\u6389\u5c31\u8868\u793a\u5176\u88ab\u9001\u4e86\u72d7\u3002\n\n\u800c\u4e3a\u4e86\u5904\u7406\u5b88\u536b\u662f\u5426\u88ab\u9001\u72d7\u7684\u72b6\u6001\uff0c\u6211\u4eec\u989d\u5916\u5bf9\u6bcf\u4e2a\u5b88\u536b\u5f00\u4e00\u4e2a\u70b9\uff0c\u5e76\u5bf9\u5176\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u5272\u6389\u5c31\u8868\u793a\u5176\u88ab\u9001\u4e86\u72d7\u3002\n\n\u4e00\u4e2a\u4eba\u53ef\u4ee5\u4e0d\u88ab\u9001\u72d7\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u8def\u5f84\u4e0a\u6240\u6709\u5b88\u536b\u90fd\u88ab\u9001\u72d7\u3002\u4e8e\u662f\uff0c\u4eba\u6240\u4ee3\u8868\u7684\u70b9\u5411\u8def\u5f84\u4e0a\u6240\u6709\u7684\u5b88\u536b\u70b9\u8fde\u8fb9\u6743\u4e3a\u65e0\u7a77\u7684\u8fb9\u3002\n\n\u8fd9\u6837\u6211\u4eec\u4fbf\u5efa\u597d\u4e86\u56fe\u3002\n\n\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u8fb9\u6570\u53ef\u80fd\u592a\u591a\u4e86\u3002\u6211\u4eec\u5c31\u6811\u5256\u4e00\u4e0b\uff0c\u7136\u540e\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u5373\u53ef\u3002\u8fd9\u6837\u8fb9\u6570\u5c31\u662f $O(n\\log^2n)$ \u7684\uff0c\u800c\u70b9\u6570\u4ecd\u4e3a $O(n)$\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u5efa\u56fe\u7684\u65b9\u5f0f\u53ef\u4ee5\u7b49\u4ef7\u4e8e\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u6240\u4ee5\u5bf9\u5176\u8dd1 Dinic \u7684\u590d\u6742\u5ea6\u5c31\u662f $O(n\\sqrt{n}\\log^2n)$\uff0c~~\u7684\u786e\u662f\u6211\u4eec\u8bf4\u7684\u5e26\u4e24\u4e09\u4e2a $\\log$ \u548c\u6839\u53f7\u7684\u590d\u6742\u5ea6~~\u3002\n\n\u5728\u8f93\u51fa\u65b9\u6848\u7684\u65f6\u5019\u50bb\u6389\u4e86\uff0c\u524d\u524d\u540e\u540e\u8fd8\u5f80\u6700\u5c0f\u70b9\u8986\u76d6\u7b49\u65b9\u9762\u6298\u817e\u4e86\u4e00\u5927\u5806\uff0c\u867d\u7136\u6700\u540e\u4e5f\u641e\u8fc7\u53bb\u4e86\uff08\u5373\u4ee3\u7801\u4e2d\u5199\u6cd5\uff09\uff0c\u4f46\u540e\u6765\u601d\u8003\u53d1\u73b0\u53ef\u4ee5\u76f4\u63a5\u4ece $S$ \u51fa\u53d1\u6cbf\u6240\u6709\u975e\u6ee1\u8fb9\u641c\u51fa\u4e00\u4e2a\u96c6\u5408\uff0c\u7136\u540e\u7b54\u6848\u5c31\u662f\u6240\u6709\u4e0d\u5728\u96c6\u5408\u5185\u7684\u4eba\u70b9\u548c\u6240\u6709\u5728\u96c6\u5408\u5185\u7684\u5b88\u536b\u70b9\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=90100,M=5000000;\nint n,m,id[N],vl[N];\nnamespace MaxFlow{\n\tint head[N],cur[N],dep[N],cnt,S,T,res;\n\tstruct node{int to,next,val;}edge[M];\n\tvoid ae(int u,int v,int w){\n//\t\tprintf(\"%d %d %d\\n\",u,v,w);\n\t\tedge[cnt].next=head[u],edge[cnt].to=v,edge[cnt].val=w,head[u]=cnt++;\n\t\tedge[cnt].next=head[v],edge[cnt].to=u,edge[cnt].val=0,head[v]=cnt++;\n\t}\n\tqueue<int>q;\n\tinline bool bfs(){\n\t\tmemset(dep,0,sizeof(dep)),q.push(S),dep[S]=1;\n\t\twhile(!q.empty()){\n\t\t\tregister int x=q.front();q.pop();\n\t\t\tfor(register int i=cur[x]=head[x];i!=-1;i=edge[i].next)if(edge[i].val&&!dep[edge[i].to])dep[edge[i].to]=dep[x]+1,q.push(edge[i].to);\n\t\t}\n\t\treturn dep[T]>0;\n\t}\n\tbool reach;\n\tinline int dfs(int x,int flow){\n\t\tif(x==T){res+=flow,reach=true;return flow;}\n\t\tint used=0;\n\t\tfor(register int &i=cur[x];i!=-1;i=edge[i].next){\n\t\t\tif(!edge[i].val||dep[edge[i].to]!=dep[x]+1)continue;\n\t\t\tregister int ff=dfs(edge[i].to,min(edge[i].val,flow-used));\n\t\t\tif(ff){edge[i].val-=ff,edge[i^1].val+=ff,used+=ff;if(used==flow)break;}\n\t\t}\n\t\treturn used;\n\t}\n\tinline void Dinic(){while(bfs()){reach=true;while(reach)reach=false,dfs(S,0x3f3f3f3f);}}\n}\nusing MaxFlow::S;\nusing MaxFlow::T;\nusing MaxFlow::Dinic;\nusing MaxFlow::res;\nusing MaxFlow::head;\nusing MaxFlow::ae;\nusing MaxFlow::edge;\nvector<pair<int,int> >v[20100];\nint fa[20100],sz[20100],son[20100],dep[20100],dfn[20100],rev[20100],top[20100],fid[20100],tot,cnt;\nvoid dfs1(int x){\n\tdep[x]=dep[fa[x]]+1,sz[x]=1;\n\tfor(auto y:v[x])if(y.first!=fa[x]){\n\t\tfa[y.first]=x,fid[y.first]=y.second,dfs1(y.first),sz[x]+=sz[y.first];\n\t\tif(sz[y.first]>sz[son[x]])son[x]=y.first;\n\t}\n}\nvoid dfs2(int x){\n\tdfn[x]=++tot,rev[tot]=x;if(!top[x])top[x]=x;\n\tif(son[x])top[son[x]]=top[x],dfs2(son[x]);\n\tfor(auto y:v[x])if(y.first!=fa[x]&&y.first!=son[x])dfs2(y.first);\n}\n#define lson x<<1\n#define rson x<<1|1\n#define mid ((l+r)>>1)\nvoid build(int x,int l,int r){\n\tid[x]=++cnt;\n\tif(l==r)ae(id[x],T,1),vl[id[x]]=fid[rev[l]];\n\telse build(lson,l,mid),build(rson,mid+1,r),ae(id[x],id[lson],0x3f3f3f3f),ae(id[x],id[rson],0x3f3f3f3f);\n}\nvoid AE(int x,int l,int r,int L,int R,int ID){\n//\tprintf(\"%d:[%d,%d]:[%d,%d]:%d\\n\",x,l,r,L,R,ID);\n\tif(l>R||r<L)return;\n\tif(L<=l&&r<=R){ae(ID,id[x],0x3f3f3f3f);return;}\n\tAE(lson,l,mid,L,R,ID),AE(rson,mid+1,r,L,R,ID);\n}\nvoid AE(int ID,int x,int y){\n\tae(S,ID,1);\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tAE(1,2,n,dfn[top[x]],dfn[x],ID),x=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y])swap(x,y);\n\tif(x!=y)AE(1,2,n,dfn[x]+1,dfn[y],ID);\n}\nbool vis[N][2];\nvoid dfs(int x,bool sd){\n\tvis[x][sd]=true;\n\tif(vl[x])sd=true;\n\tif(x>cnt)sd=false;\n//\tprintf(\"%d,%d\\n\",x,sd);\n\tfor(int i=head[x];i!=-1;i=edge[i].next){\n\t\tif(!edge[i^1].val||vis[edge[i].to][sd]||edge[i].to==S||edge[i].to==T)continue;\n\t\tif(!sd&&x<=cnt&&edge[i].to<x)continue;\n\t\tif(sd&&!vl[x]&&edge[i].to>x&&edge[i].to<=cnt)continue;\n\t\tdfs(edge[i].to,sd);\n\t}\n}\nvector<int>U,V;\nint main(){\n\tscanf(\"%d%d\",&n,&m),memset(head,-1,sizeof(head)),S=1,T=2,cnt=2;\n\tfor(int i=1,x,y;i<n;i++)scanf(\"%d%d\",&x,&y),v[x].push_back(make_pair(y,i)),v[y].push_back(make_pair(x,i));\n\tdfs1(1),dfs2(1),build(1,2,n);\n//\tfor(int i=1;i<=n;i++)printf(\"FA:%d DP:%d SZ:%d SN:%d DF:%d RV:%d TP:%d\\n\",fa[i],dep[i],sz[i],son[i],dfn[i],rev[i],top[i]);\n\tfor(int i=1,x,y;i<=m;i++)scanf(\"%d%d\",&x,&y),AE(cnt+i,x,y);\n\tDinic();\n\tdfs(T,false);\n\tfor(int i=cnt+1;i<=cnt+m;i++)if(vis[i][true])U.push_back(i-cnt);\n\tfor(int i=3;i<=cnt;i++)if(vl[i]&&!vis[i][false])V.push_back(vl[i]);\n\tprintf(\"%d\\n\",res);\n\tprintf(\"%d \",U.size());for(auto i:U)printf(\"%d \",i);puts(\"\");\n\tprintf(\"%d \",V.size());for(auto i:V)printf(\"%d \",i);puts(\"\");\n\treturn 0;\n} \n```\n\n",
        "postTime": 1613109923,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF786E \u3010ALT\u3011"
    },
    {
        "content": "\u9996\u5148\u8fd9\u4e2a\u4e1c\u897f\u672c\u8eab\u5c31\u957f\u5f97\u50cf\u7f51\u7edc\u6d41\u3002\u6211\u4eec\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u6700\u5c0f\u5272\uff1a\n\n+ \u6e90\u70b9\u5411\u6bcf\u4e2a\u4eba\u8fde\uff0c\u6d41\u91cf $1$\u3002\n+ \u6bcf\u4e2a\u4eba\u8fde\u5411\u81ea\u5df1\u8def\u5f84\u7684\u6bcf\u6761\u8fb9\uff0c\u6d41\u91cf $+\\infty$\u3002\n\n\u7136\u540e\u89c2\u5bdf\u6700\u5c0f\u5272\uff0c\u53d1\u73b0\u4ece\u4e24\u7c7b\u8fb9\u6d41\u8d70\u521a\u597d\u4ee3\u8868\u4e86\u7ed9\u4eba\u548c\u7ed9\u8def\u5f84\u7684\u4e24\u79cd\u9009\u62e9\u3002\n\n\u8f93\u51fa\u65b9\u6848\u662f\u5728\u8dd1\u5b8c\u6700\u5927\u6d41\u7684\u7f51\u7edc\u4e0a\u770b\u6b8b\u4f59\u6d41\u91cf\u3002\n\n\u56e0\u4e3a\u8fb9\u6bd4\u8f83\u591a\uff0c\u6240\u4ee5\u9700\u8981\u4f18\u5316\u5efa\u56fe\u3002\n\n\u8fd9\u4e2a\u662f\u6811\u94fe\u7684\u8fde\u8fb9\uff0c\u8003\u8651\u6811\u5256\u52a0\u7ebf\u6bb5\u6811\u4f18\u5316\u5373\u53ef\u3002",
        "postTime": 1664971177,
        "uid": 333549,
        "name": "TammyZhao",
        "ccfLevel": 0,
        "title": "CF786E ALT"
    },
    {
        "content": "[$\\tt Link$](/problem/CF786E)\u3002\n\n$\\tt^{\\ast}3200$\uff0c\u53ef\u80fd\u662f\u7ed9\u7801\u91cf\uff1f\n\n## \u9898\u610f\n\n\u6709\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u6570\uff0c\u548c $m$ \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u7684\u8def\u5f84\u662f\u6811\u4e0a\u7684\u4e00\u6761\u94fe\u3002  \n\u6bcf\u4e2a\u4eba\u90fd\u559c\u6b22\u5df4\u5566\u5566\u5c0f\u9b54\u4ed9\u3002\u4f60\u9700\u8981\u7ed9\u51fa\u4e00\u4e9b\u9b54\u6cd5\u68d2\uff08\u7ed9\u4eba\u6216\u7ed9\u6811\u4e0a\u8282\u70b9\uff09\u3002  \n\u6bcf\u4e2a\u4eba\u5e0c\u671b\u8981\u4e48\u81ea\u5df1\u5f97\u5230\u9b54\u6cd5\u68d2\uff0c\u8981\u4e48\u81ea\u5df1\u7684\u8def\u5f84\u6bcf\u4e2a\u70b9\u90fd\u6709\u9b54\u6cd5\u68d2\u3002  \n\u95ee\u6ee1\u8db3\u6bcf\u4e2a\u4eba\u8981\u6c42\u7684\u6700\u5c0f\u9b54\u6cd5\u68d2\u6570\uff0c\u9700\u8981\u8f93\u51fa\u65b9\u6848\u3002\n\n## \u9898\u89e3\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u9898\u5e76\u4e0d\u53ef\u4ee5\u7528\u6570\u636e\u7ed3\u6784\u505a\uff0c\u4e5f\u6ca1\u6709\u5947\u5999\u7684\u7b97\u6cd5\u3002\n\n\u8003\u8651\u66b4\u529b\u4e00\u70b9\uff0c\u7f51\u7edc\u6d41\u3002\uff08$n=2\\times10^4$ \u4e0d\u662f\u95ee\u9898\uff0c\u6211\u751a\u81f3\u5728 $\\tt 550ms$ \u5185\u8dd1\u8fc7 $n=2\\times10^5$ \u7684\u95ee\u9898\uff09\u3002\n\n\u6211\u4eec\u601d\u8003\u5efa\u8fb9\uff0c\u7528\u6d41\u91cf\u4ee3\u8868\u9b54\u6cd5\u68d2\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u6700\u5c0f\u5272\uff08\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4ec5\u628a\u8fb9\u6743\u5206\u6210 $1$ \u548c $\\infty$ \u4e24\u79cd\uff09\u3002\n\n1. \u5bf9\u4e8e\u6bcf\u4e2a\u4eba\uff0c\u4ece\u6e90\u70b9\u8fde\u5411\u4ed6\uff0c\u6d41\u91cf\u4e3a $1$\uff08\u8fd9\u662f\u7ed9\u4eba\u7684\u9009\u62e9\uff09\u3002\n2. \u5bf9\u4e8e\u6bcf\u4e2a\u4eba\uff0c\u4ece\u4ed6\u8fde\u5411\u4ed6\u7684\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u70b9\uff0c\u6d41\u91cf\u4e3a $\\infty$\uff08\u8fd9\u662f\u7ed9\u8282\u70b9\u7684\u9009\u62e9\uff09\u3002\n\n\u8003\u8651\u6700\u5c0f\u5272\u7684\u8fc7\u7a0b\uff1a\n\n+ \u8981\u4e48\u9009\u62e9\u5272\u6389 1 \u7c7b\u8fb9\uff0c\u8fd9\u6837\u8fd9\u4e2a\u4eba\u672c\u8eab\u5df2\u7ecf\u5206\u5272\u5b8c\u6bd5\n+ \u8981\u4e48\u9009\u62e9\u5272\u6389 2 \u7c7b\u8fb9\uff0c\u8fd9\u65f6\u9700\u8981\u6240\u6709\u7684 2 \u7c7b\u8fb9\u90fd\u88ab\u5272\u5f00\u624d\u80fd\u5b8c\u6210\u5206\u5272\u3002\n\n\u6240\u4ee5\u6700\u5c0f\u5272\uff0c\u5373\u6700\u5927\u6d41\u5c31\u662f\u7b54\u6848\u3002\n\n\u8f93\u51fa\u65b9\u6848\uff1a\u76f4\u63a5\u5728\u8dd1\u5b8c\u6700\u5927\u6d41\u7684\u7f51\u7edc\u4e0a $\\tt dfs$\u3002\n\n---\n\n\u5b8c\u4e86\uff1f\n\n\u53d1\u73b0\u6700\u591a\u6709 $n^2$ \u6761\u8fb9\u3002\u5373\u4f7f $\\tt dinic$ \u590d\u6742\u5ea6\u80fd\u627f\u53d7\uff0c\u8fb9\u6570\u4e5f\u627f\u53d7\u4e0d\u4e86\u3002\n\n\u4f46\u662f\u8fd9\u662f `\u4e00\u4e2a\u70b9\u5411\u4e00\u5806\u8fde\u7eed\u7684\u70b9\u8fde\u8fb9`\uff0c\u8003\u8651\u7ebf\u6bb5\u6811\u4f18\u5316\u3002\uff08\u6709\u4e00\u8bf4\u4e00\u8fd9\u573a\u7684 $\\tt B$ \u662f\u5efa\u56fe\u4f18\u5316\uff0c\u8fd8\u662f\u677f\uff09\n\n\u4f46\u662f\u8fd9\u662f\u6811\u94fe\u4e0d\u662f\u533a\u95f4\uff0c\u6240\u4ee5\u9700\u8981\u6811\u5256\uff0c\u7136\u540e\u518d\u7ebf\u6bb5\u6811\u3002\n\n\u603b\u8fb9\u6570 $n\\log^2n$\uff0c\u95ee\u9898\u4e0d\u5927\u3002\n\n---\n\n\u4e8b\u5b9e\u662f\u4ee5\u524d\u7684\u6700\u5927\u6d41\u677f\u5b50\u6709\u9505\uff0c\u7136\u540e\u6d6a\u8d39\u4e86 $\\texttt{1h+}$ \u53bb\u8c03\u3002\n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include<queue>\n#include<algorithm>\n\nusing namespace std;\n\n#define rep(i,a,b) for(int i = (a);i <= (b);++i)\n\nconst int N = 2e4 + 5;\nconst int S = N * 5 + 5;\nconst int inf = 1e9;\n\nint n,m,st,ed,res;\nint id[N << 2];\nvector<pair<int,int>> G[N];\nint dep[N],siz[N],son[N],fa[N],dfn[N],adfn[N],num[N],tot = 0,top[N];\n\nnamespace Dinic{\n    struct edge{ int v,w; edge *nxt,*inv; bool flg; } *from[S];\n\n    void adde(int u,int v,int w){\n        edge *E = from[u] = new(edge){v,w,from[u],nullptr,1};\n        edge *F = from[v] = new(edge){u,0,from[v],nullptr,0};\n        E->inv = F; F->inv = E;\n    }\n\n    queue<int> q;\n    int dep[S];\n    edge *now[S];\n    bool vis[S];\n\n    int level(){\n        while(!q.empty()) q.pop();\n        q.push(st);\n        memset(dep,0,sizeof dep);\n        memcpy(now,from,sizeof now);\n        dep[st] = 1;\n        while(!q.empty()){\n            int u = q.front(); q.pop();\n            for(edge *e = from[u];e;e = e->nxt){\n                int v = e->v,w = e->w;\n                if(w && !dep[v]){\n                    dep[v] = dep[u] + 1;\n                    q.push(v);\n                }\n            }\n        }\n        return dep[ed];\n    }\n\n    int dfs(int u,int fl){\n        if(u == ed) return res += fl,fl;\n        int cur = fl;\n        for(edge *e = now[u];e && cur;e = e->nxt){\n            now[u] = e;\n            int v = e->v,w = e->w;\n            if(w && dep[v] == dep[u] + 1){\n                int cfl = dfs(v,w < cur ? w : cur);\n                e->w -= cfl; e->inv->w += cfl; cur -= cfl;\n            }\n        }\n        return fl - cur;\n    }\n\n    void solve(){ while(level()) dfs(st,inf); }\n    \n    void fnd(int u){\n        vis[u] = true;\n        for(edge *e = from[u];e;e = e->nxt){\n            int v = e->v,w = e->w;\n            if(w && !vis[v]) fnd(v);\n        }\n    }\n\n    void output(){\n        fnd(st);\n        int cnt0 = 0,cnt1 = 0;\n        for(edge *e = from[st];e;e = e->nxt)\n            if(!vis[e->v]) ++cnt0;\n        printf(\"%d \",cnt0);\n        for(edge *e = from[st];e;e = e->nxt)\n            if(!vis[e->v]) printf(\"%d \",e->v - 4 * n);\n        for(edge *e = from[ed];e;e = e->nxt)\n            if(vis[e->v]) ++cnt1;\n        printf(\"\\n%d \",cnt1);\n        for(edge *e = from[ed];e;e = e->nxt)\n            if(vis[e->v]) printf(\"%d \",num[adfn[id[e->v]]]);\n    }\n} using Dinic::adde;\n\n#define lc (i << 1)\n#define rc (i << 1 | 1)\n#define mid ((L + R) >> 1)\n\n#define ls lc,L,mid\n#define rs rc,mid + 1,R\n#define ID int i = 1,int L = 1,int R = n\n\nvoid build(ID){\n    if(L == R) return id[i] = L,adde(i,ed,1);\n    adde(i,lc,inf); adde(i,rc,inf);\n    build(ls); build(rs);\n}\n\nvoid link(int k,int l,int r,ID){\n    if(l <= L && R <= r) return adde(k,i,inf);\n    if(l <= mid) link(k,l,r,ls);\n\tif(r > mid) link(k,l,r,rs);\n}\n\nvoid dfs1(int u = 1,int ft = 0){\n    dep[u] = dep[fa[u] = ft] + 1;\n    siz[u] = 1;\n    for(auto[v,i] : G[u]) if(v != ft){\n        num[v] = i;\n        dfs1(v,u);\n        siz[u] += siz[v];\n        if(siz[v] > siz[son[u]]) son[u] = v;\n    }\n}\n\nvoid dfs2(int u = 1,int tp = 1){\n    adfn[dfn[u] = ++tot] = u; top[u] = tp;\n    if(son[u]) dfs2(son[u],tp);\n    for(auto[v,i] : G[u]) if(!top[v]) dfs2(v,v);\n}\n\nvoid lnk(int k,int x,int y){\n    while(top[x] != top[y]){\n        if(dep[top[x]] < dep[top[y]]) swap(x,y);\n        link(k,dfn[top[x]],dfn[x]);\n        x = fa[top[x]];\n    }\n    if(dep[x] > dep[y]) swap(x,y);\n    if(x != y) link(k,dfn[x] + 1,dfn[y]);\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    rep(i,1,n - 1){\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        G[u].emplace_back(v,i);\n        G[v].emplace_back(u,i);\n    }\n    dfs1(); dfs2();\n    st = 4 * n + m + 1,ed = 4 * n + m + 2;\n    build();\n    for(int i = 1;i <= m;++i){\n        int x,y,I = 4 * n + i;\n        scanf(\"%d%d\",&x,&y);\n        lnk(I,x,y);\n        adde(st,I,1);\n    }\n    Dinic::solve();\n    printf(\"%d\\n\",res);\n    Dinic::output();\n    return 0;\n}\n```",
        "postTime": 1660830630,
        "uid": 368107,
        "name": "xfrvq",
        "ccfLevel": 7,
        "title": "CF786E \u7f51\u7edc\u6d41+\u6811\u5256\u3001\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe"
    },
    {
        "content": "$\\text{Update 4.14}$\uff1a\u53bb\u6389\u4e86\u4ee3\u7801\u4e2d\u5927\u90e8\u5206\u65e0\u7528\u7684\u5934\u6587\u4ef6\u3002\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF786E)\n\n\u540c\u6b65\u53d1\u8868\u4e8e\u6211\u7684 [$\\texttt{cnblogs}$](https://www.cnblogs.com/UperFicial/p/16139629.html)\u3002\n\n### $\\texttt{Description}$\n\n$n$ \u4e2a\u70b9\u7684\u6811\uff0c$m$ \u4e2a\u4eba\u3002\u7b2c $i$ \u4e2a\u4eba\u7684\u6563\u6b65\u8def\u5f84\u662f\u4ece $x_i$ \u5230 $y_i$\u3002\n\n\u4e00\u4e2a\u4eba\u9ad8\u5174\u5f53\u4e14\u4ec5\u5f53\u5b83\u83b7\u5f97\u4e86\u4e00\u4e2a\u5ba0\u7269\u6216 $x_i$ \u5230 $y_i$ \u6bcf\u4e00\u6761\u8fb9\u4e0a\u90fd\u6709\u4e00\u4e2a\u5ba0\u7269\u3002\n\n\u95ee\u6700\u5c11\u5206\u53d1\u591a\u5c11\u4e2a\u5ba0\u7269\u624d\u80fd\u4f7f\u6240\u6709\u5c45\u6c11\u9ad8\u5174\u3002\n\n\u8f93\u51fa\u65b9\u6848\u3002\n\n$1\\le n\\le 10^4$\uff0c$1\\le m\\le 2\\times 10^4$\u3002\n\n### $\\texttt{Solution}$\n\n\u601d\u8def\u4e09\u5206\u949f\uff0c\u4ee3\u7801\u4e09\u5c0f\u65f6\u3002\u7eaa\u5ff5\u4e00\u4e0b $\\texttt{700 AC}$\u3002\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\u7f51\u7edc\u6d41\uff0c\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u6811\u94fe\u5256\u5206\u3002\n\n\u8003\u8651\u4e00\u4e2a\u663e\u7136\u7684\u4e8c\u5206\u56fe\u3002\n\n\u6240\u6709\u4eba\u5728\u5de6\u8fb9\uff0c\u6811\u4e0a\u7684\u8fb9\u5728\u53f3\u8fb9\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u4eba\u6765\u8bf4\uff0c\u8981\u4e48\u7ed9\u4eba\u5ba0\u7269\uff0c\u8981\u4e48\u7ed9\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u5ba0\u7269\u3002\u80af\u5b9a\u4e0d\u4f1a\u540c\u65f6\u7ed9\uff0c\u8fd9\u6837\u5c31\u4e0d\u6ee1\u8db3\u6700\u4f18\u4e86\u3002\n\n\u8fd9\u5c31\u662f\u5f88\u6a21\u677f\u7684\u6700\u5c0f\u5272\u7684\u6a21\u578b\u4e86\u3002\n\n\u5efa\u56fe\u65b9\u5f0f\uff1a\n\n-  $s$ \u5411\u6bcf\u4e00\u4e2a\u4eba\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $1$ \u7684\u8fb9\u3002\n\n- \u6bcf\u4e00\u4e2a\u4eba\u5411\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\u8fde\u6d41\u91cf\u4e3a $\\infty$ \u7684\u8fb9\u3002\n\n- \u6700\u540e\u6811\u4e0a\u6bcf\u4e00\u6761\u8fb9\u5411 $t$ \u8fde\u6d41\u91cf $1$ \u7684\u8fb9\u3002\n\n\u7a0d\u5fae\u89e3\u91ca\u4e00\u4e0b\uff0c$\\infty$ \u8868\u793a\u53ea\u80fd\u9009\u4e00\u4e2a\uff0c\u56e0\u4e3a\u6700\u5c0f\u5272\u4e0d\u53ef\u80fd\u5272\u6389 $\\infty$ \u7684\u8fb9\u3002\u6d41\u91cf\u4e3a $1$ \u662f\u56e0\u4e3a\u5206\u53d1\u4e86\u4e00\u4e2a\u5ba0\u7269\u3002\n\n\u8fd9\u6837\u5efa\u56fe\u8fb9\u6570\u662f $nm$ \u7684\u3002\u5f88\u5bb9\u6613\u60f3\u5230\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u3002\n\n\u4f46\u662f\u8fd9\u662f\u5728\u6811\u4e0a\uff0c\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u901a\u8fc7\u6811\u94fe\u5256\u5206\uff0c\u5c06\u4e00\u6761\u8def\u5f84\u5206\u6210\u82e5\u5e72\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u7136\u540e\u518d\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u95ee\u9898\u5728\u4e8e\u8f93\u51fa\u65b9\u6848\u3002\n\n\u5148\u8003\u8651\u7b2c\u4e00\u884c\u3002\n\n\u5982\u679c $s$ \u5230\u67d0\u4e00\u4e2a\u4eba\u7684\u6d41\u91cf\u662f $0$\uff0c\u662f\u4e0d\u662f\u8bf4\u660e\uff0c\u8fd9\u4e2a\u4eba\u88ab\u9009\u53d6\u4e86\uff0c\u6bd5\u7adf\u6d41\u91cf\u4e3a $0$ \u4e86\u3002\n \n\u7136\u540e\u8003\u8651\u6811\u4e0a\u67d0\u6761\u8fb9 $e$ \u8fde\u5230 $t$ \u7684\u4e00\u6761\u8fb9\uff0c\u6709\u4e00\u6761\u6b8b\u4f59\u7f51\u7edc\u901a\u5411\u4e86 $e$\uff0c\u8fd9\u4e48\u8bf4\u660e $e$ \u5230 $t$ \u7684\u6d41\u91cf\u80af\u5b9a\u4e3a $0$ \u4e86\uff0c\u56e0\u4e3a\u5982\u679c\u4e0d\u662f $0$ \u5c31\u53c8\u5f62\u6210\u4e86\u4e00\u6761\u589e\u5e7f\u8def\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8fdb\u884c\u4e00\u904d `dfs` \u6765\u627e\u5230\u9009\u53d6\u4e86\u54ea\u4e9b\u8fb9\u3002\n\n\u4f46\u662f\u6ce8\u610f\uff0c\u6211\u4eec\u627e\u5230\u7684\u6240\u8c13\u7684\u201c\u8fb9\u201d\uff0c\u53ea\u662f\u5728\u7ebf\u6bb5\u6570\u4e2d\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u6570\u7ec4\u6620\u5c04\u51fa\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u7f16\u53f7\u5bf9\u5e94\u7ef4\u62a4\u7684\u70b9\uff0c\u7136\u540e\u5bf9\u5e94\u7ef4\u62a4\u7684\u70b9\u5728\u6620\u5c04\u51fa\u539f\u6811\u4e2d\u7684\u70b9\uff0c\u6700\u540e\u5bf9\u4e8e\u539f\u6811\u4e2d\u56fd\u6bcf\u4e00\u4e2a\u70b9\u518d\u7ef4\u62a4\u5b83\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u4eba\uff08\u8fd9\u4e2a\u53ef\u4ee5\u7528 `map` \u6765\u7ef4\u62a4\uff09\u3002\n\n\u4ee3\u7801\u5de8\u96be\u5199\uff1a\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#include<map>\nusing namespace std;\ntypedef long long ll;\ninline int read()\n{\n\tregister int s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')s=s*10+(ch-'0'),ch=getchar();\n\treturn s*w;\n}\nconst int INF=1e9;\nconst ll LLINF=1e18;\ntemplate<typename T>\ninline T Min(T x,T y){return x<y?x:y;}\ntemplate<typename T>\ninline T Max(T x,T y){return x>y?x:y;}\ntemplate<typename T>\ninline void Swap(T&x,T&y){int t=x;x=y;y=t;return;}\nconst int MAXN(1e6+10);\nconst int MAXM(1e6+10);\nint n,m;\nint tyt[MAXN];\nstruct E{int to,nxt,flow;};\nE edge[MAXM];\nint head[MAXN],tot(1);\nint s,t;\nint pos[MAXN];\nint que1[MAXN],t1,que2[MAXN],t2;\ninline void add(int u,int v,int f)\n{\n\tedge[++tot].nxt=head[u];\n\thead[u]=tot;\n\tedge[tot].to=v;\n\tedge[tot].flow=f;\n\treturn;\n}\ninline void add_edge(int u,int v,int f)\n{\n\tadd(u,v,f);\n\tadd(v,u,0);\n\treturn;\n}\ntypedef pair<int,int>P;\nmap<P,int>mp;\nint par[MAXN],siz[MAXN],dep[MAXN],son[MAXN],top[MAXN],idx[MAXN],rk[MAXN],cnt;\nint res[MAXN];\ninline void dfs1(int u,int fa)\n{\n\tpar[u]=fa,siz[u]=1,dep[u]=dep[fa]+1;\n\tres[u]=mp[make_pair(u,fa)];\n\tfor(register int i=head[u];i;i=edge[i].nxt)\n\t{\n\t\tE e=edge[i];\n\t\tif(e.to==fa) continue;\n\t\tdfs1(e.to,u);\n\t\tsiz[u]+=siz[e.to];\n\t\tif(siz[e.to]>siz[son[u]]) son[u]=e.to;\n\t}\n\treturn;\n}\ninline void dfs2(int u,int topf)\n{\n\ttop[u]=topf;\n\tidx[u]=++cnt;\n\trk[cnt]=u;\n\tif(son[u]) dfs2(son[u],topf);\n\tfor(register int i=head[u];i;i=edge[i].nxt)\n\t{\n\t\tE e=edge[i];\n\t\tif(e.to!=par[u]&&e.to!=son[u])\t\n\t\t\tdfs2(e.to,e.to);\n\t}\n\treturn;\n}\nstruct Segment_Tree\n{\n\tinline int lc(int p){return p<<1;}\n\tinline int rc(int p){return p<<1|1;}\n\tinline void push_down(int u,int ls,int rs)\n\t{\n\t\tadd_edge(u,ls,INF);\n\t\tadd_edge(u,rs,INF);\n\t\treturn;\n\t}\n\tinline void build(int u,int l,int r)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\tpos[u]=l;\n\t\t\tadd_edge(u,t,1);\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(lc(u),l,mid);\n\t\tbuild(rc(u),mid+1,r);\n\t\tpush_down(u,lc(u),rc(u));\n\t\treturn;\n\t}\n\tinline void update(int u,int l,int r,int ln,int rn,int k)\n\t{\n\t\tif(ln<=l&&r<=rn)\n\t\t{\n\t\t\tadd_edge(k,u,INF);\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(ln<=mid) update(lc(u),l,mid,ln,rn,k);\n\t\tif(rn>mid) update(rc(u),mid+1,r,ln,rn,k);\n\t\treturn;\n\t}\n};\nSegment_Tree shit;\ninline void ass(int k,int x,int y)\n{\n\tint fx=top[x],fy=top[y];\n\twhile(fx^fy)\n\t{\n\t\tif(dep[fx]<dep[fy]) Swap(fx,fy),Swap(x,y);\n\t\tshit.update(1,1,n,idx[fx],idx[x],k);\n\t\tx=par[fx];\n\t\tfx=top[x];\n\t}\n\tif(x!=y)\n\t{\n\t\tif(dep[x]>dep[y]) Swap(x,y);\n\t\tshit.update(1,1,n,idx[x]+1,idx[y],k);\n\t}\n\treturn;\n}\nqueue<int>q;\ninline bool bfs()\n{\n\tmemset(dep,0,sizeof(dep));\n\tdep[s]=1;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(register int i=head[u];i;i=edge[i].nxt)\n\t\t{\n\t\t\tE e=edge[i];\n\t\t\tif(e.flow&&!dep[e.to])\n\t\t\t{\n\t\t\t\tdep[e.to]=dep[u]+1;\n\t\t\t\tq.push(e.to);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t];\n}\ninline int dfs(int u,int in)\n{\n\tif(u==t) return in;\n\tint out(0);\n\tfor(register int i=head[u];i&&in;i=edge[i].nxt)\n\t{\n\t\tE e=edge[i];\n\t\tif(e.flow&&dep[e.to]==dep[u]+1)\n\t\t{\n\t\t\tint now=dfs(e.to,Min(e.flow,in));\n\t\t\tedge[i].flow-=now;\n\t\t\tedge[i^1].flow+=now;\n\t\t\tin-=now;\n\t\t\tout+=now;\n\t\t}\n\t}\n\tif(!out) dep[u]=0;\n\treturn out;\n}\ninline void remake()\n{\n\ttot=1;\n\tmemset(edge,0,sizeof(edge));\n\tmemset(head,0,sizeof(head));\n\treturn;\n}\ninline int num(int i){return i+n*4;}\ninline int dinic()\n{\n\tint ans(0);\n\twhile(bfs()) ans+=dfs(s,INF);\n\treturn ans;\n}\nbool vis[MAXN];\ninline void find_way(int u)\n{\n\tvis[u]=true;\n\tfor(register int i=head[u];i;i=edge[i].nxt)\n\t{\n\t\tE e=edge[i];\n\t\tif(!vis[e.to]&&e.flow) find_way(e.to);\n\t}\n\treturn;\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(register int i=1;i<n;i++)\n\t{\n\t\tint u=read(),v=read();\n\t\tadd_edge(u,v,INF);\n\t\tmp[make_pair(u,v)]=i;\n\t\tmp[make_pair(v,u)]=i;\n\t}\n\ts=num(m)+1,t=num(m)+2;\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tremake();\n\tshit.build(1,1,n);\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tint l=read(),r=read();\n\t\tass(num(i),l,r);\n\t\tadd_edge(s,num(i),1);\n\t} \n\tprintf(\"%d\\n\",dinic());\n\tfind_way(s);\n\tfor(register int i=head[s];i;i=edge[i].nxt)\n\t{\n\t\tE e=edge[i];\n\t\tif(!vis[e.to]) que1[++t1]=e.to;\n\t}\n\tfor(register int i=head[t];i;i=edge[i].nxt)\n\t{\n\t\tE e=edge[i];\n\t\tif(vis[e.to]) que2[++t2]=res[rk[pos[e.to]]];\n\t}\n\tprintf(\"%d \",t1);\n\tfor(register int i=1;i<=t1;i++) printf(\"%d \",que1[i]-4*n);\n\tprintf(\"\\n%d \",t2);\n\tfor(register int i=1;i<=t2;i++) printf(\"%d \",que2[i]);\n\treturn 0;\n}\n```\n\n$$\\texttt{The End.by UF}$$",
        "postTime": 1649822674,
        "uid": 360511,
        "name": "UperFicial",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\u3010CF786E ALT\u3011"
    },
    {
        "content": "\u9996\u5148\u5efa\u56fe\u5f88\u663e\u7136\uff0c\u6e90\u70b9\u8fde\u5c45\u6c11\u6d41\u91cf\u4e3a $1$ \uff0c\u5272\u6389\u5c31\u76f8\u5f53\u4e8e\u9009\u5c45\u6c11\uff0c\u5b88\u536b\u8fde\u6c47\u70b9\u6d41\u91cf\u4e3a $1$ \uff0c\u5272\u6389\u76f8\u5f53\u4e8e\u9009\u5b88\u536b\uff0c\u7136\u540e\u5c45\u6c11\u5411\u8def\u5f84\u4e0a\u5f97\u6bcf\u4e2a\u5b88\u536b\u8fde\u6b63\u65e0\u7a77\u7684\u8fb9\uff0c\u6c42\u6700\u5c0f\u5272\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8fd9\u6837\u5b50\u8fb9\u6570\u662f $n^2$ \uff0c\u7528\u6811\u5256\u4f18\u5316\u5efa\u56fe\u5c31\u662f $n\\log^2n$ \u7684\u4e86\u3002\n\n\u7136\u540e\u8f93\u51fa\u65b9\u6848\uff0c\u6700\u5c0f\u5272\u6c42\u65b9\u6848\u4e0d\u662f\u5f88\u5957\u8def\u5417\uff0c\u5c31\u662f[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P4126)\uff0c\u522b\u7684\u9898\u89e3\u89e3\u91ca\u7684\u592a\u9ebb\u70e6\u4e86\u3002\n\n\u5bf9\u6b8b\u91cf\u7f51\u7edc\u4e2d\u672a\u6ee1\u6d41\u7684\u8fb9\u7f29\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u6700\u5c0f\u5272\u7684\u5fc5\u987b\u8fb9\u548c\u53ef\u884c\u8fb9\u3002\n\n\u53ef\u884c\u8fb9\u662f\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a SCC \u4e2d\u3002\n\n\u5fc5\u987b\u8fb9\u662f\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e00\u4e2a\u548c\u6e90\u70b9\u5728\u540c\u4e00\u4e2a SCC \uff0c\u53e6\u4e00\u4e2a\u548c\u6c47\u70b9\u5728\u540c\u4e00\u4e2a SCC \u3002\n\n\u7136\u540e\u65b9\u6848\u5c31\u51fa\u6765\u4e86\uff0c\u9009\u53d6\u6240\u6709\u5fc5\u987b\u8fb9\u7136\u540e\u9009\u53ef\u884c\u8fb9\u77e5\u9053\u6700\u5927\u6d41\u5c31\u53ef\u4ee5\u4e86\u3002\n\n**Code**\n``` cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\nconst int N = 2e4;\nconst int inf = 1e9;\nusing namespace std;\nstruct edges\n{\n\tint to,id;\t\n}edge[N * 2 + 5];\nint n,m,nxt[N * 2 + 5],head[N + 5],edge_cnt,size[N + 5],top[N + 5],son[N + 5],dep[N + 5],fa[N + 5],dfn[N + 5],dfc,S,T,idc,ID[N + 5],val[N + 5],bk[N * 20 + 5],id[N * 20 + 5];\nvector <int> a1,a2;\nnamespace F\n{\n    const int N = 3e6;\n    const long long inf = 2e18;\n    struct edges\n    {\n        int to;\n        long long cost;\n    }edge[N * 2 + 5];\n    int nxt[N * 2 + 5],head[N + 5],edge_cnt = 1,dis[N + 5],q[N + 5],cur[N + 5],S,T,dfn[N + 5],dfc,low[N + 5],stk[N + 5],top,co[N + 5],cnt,Vis[N + 5];\n    void add_edge(int u,int v,long long w)\n    {\n        edge[++edge_cnt] = (edges){v,w};\n        nxt[edge_cnt] = head[u];\n        head[u] = edge_cnt;\n    }\n    void add(int u,int v,long long w)\n    {\n        add_edge(u,v,w);\n        add_edge(v,u,0);\n    }\n    int bfs()\n    {\n        for (int i = 1;i <= idc;i++)\n            cur[i] = head[i],dis[i] = 0;\n        int l = 1,r = 0;\n        dis[S] = 1;\n        q[++r] = S;\n        while (l <= r)\n        {\n            int u = q[l++];\n\n            for (int i = head[u];i;i = nxt[i])\n            {\n                int v = edge[i].to,w = edge[i].cost;\n                if (w && !dis[v])\n                {\n                    dis[v] = dis[u] + 1;\n                    q[++r] = v;\n                }\n            }\n        }\n        return dis[T];\n    }\n    long long dfs(int u,long long flow)\n    {\n        if (u == T)\n            return flow;\n        long long sm = 0;\n        for (int &i = cur[u];i;i = nxt[i])\n        {\n            int v = edge[i].to;\n            long long w = edge[i].cost;\n            if (dis[v] == dis[u] + 1 && w)\n            {\n                long long res = dfs(v,min(w,flow));\n                edge[i].cost -= res;\n                edge[i ^ 1].cost += res;\n                sm += res;\n                flow -= res;\n                if (!flow)\n                    break;\n            }\n        }\n        return sm;\n    }\n    long long dinic(int s,int t)\n    {\n        S = s;T = t;\n        long long ans = 0;\n        while (bfs())\n            ans += dfs(S,inf);\n        return ans;\n    }\n    void clear()\n    {\n        edge_cnt = 1;\n        for (int i = 1;i <= idc;i++)\n            head[i] = 0;\n        idc = 0;\n    }\n    void tarjan(int u)\n    {\n    \tlow[u] = dfn[u] = ++dfc;\n    \tstk[++top] = u;\n    \tfor (int i = head[u];i;i = nxt[i])\n    \t{\n    \t\tint v = edge[i].to,w = edge[i].cost;\n    \t\tif (!w)\n    \t\t\tcontinue;\n    \t\tif (!dfn[v])\n    \t\t{\n    \t\t\ttarjan(v);\n    \t\t\tlow[u] = min(low[u],low[v]);\n    \t\t}\n    \t\telse\n    \t\t\tif (!co[v])\n    \t\t\t\tlow[u] = min(low[u],dfn[v]);\n    \t}\n    \tif (low[u] == dfn[u])\n    \t{\n    \t\tco[u] = ++cnt;\n    \t\twhile (stk[top] != u)\n    \t\t\tco[stk[top--]] = cnt;\n    \t\ttop--;\n    \t}\n    }\n    void solve(int s,int t,int k)\n    {\n    \tfor (int i = 1;i <= idc;i++)\n    \t\tif (!dfn[i])\n    \t\t\ttarjan(i);\n    \tfor (int i = head[s];i;i = nxt[i])\n    \t{\n    \t\tint v = edge[i].to,w = edge[i].cost;\n    \t\tif (!w && co[v] == co[t])\n    \t\t\ta1.push_back(id[v]),k--,Vis[v] = 1;\n    \t}\n    \tfor (int i = head[t];i;i = nxt[i])\n    \t{\n    \t\tint v = edge[i].to,w = edge[i].cost;\n    \t\tif (w && co[v] == co[s])\n    \t\t\ta2.push_back(bk[v]),k--,Vis[v] = 1;\n    \t}\n    \tif (k)\n    \t{\n    \t\tfor (int i = head[s];i;i = nxt[i])\n\t    \t{\n\t    \t\tint v = edge[i].to,w = edge[i].cost;\n\t    \t\tif (!w && co[v] != co[s] && !Vis[v] && k)\n\t    \t\t\ta1.push_back(id[v]),k--;\n\t    \t}\n\t    \tfor (int i = head[t];i;i = nxt[i])\n\t    \t{\n\t    \t\tint v = edge[i].to,w = edge[i].cost;\n\t    \t\tif (w && co[v] != co[t] && k)\n\t    \t\t\ta2.push_back(bk[v]),k--;\n\t    \t}\n    \t}\n    }\n}\nstruct Seg\n{\n\tint id[N * 4 + 5];\n\t#define zrt k << 1\n\t#define yrt k << 1 | 1\n\tvoid build(int k,int l,int r)\n\t{\n\t\tid[k] = ++idc;\n\t\tif (l == r)\n\t\t{\n\t\t\tF::add(id[k],T,1);\n\t\t\tbk[id[k]] = val[l];\n\t\t\treturn;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tbuild(zrt,l,mid);\n\t\tbuild(yrt,mid + 1,r);\n\t\tF::add(id[k],id[zrt],inf);\n\t\tF::add(id[k],id[yrt],inf);\n\t}\n\tvoid update(int k,int l,int r,int x,int y,int z)\n\t{\n\t\tif (x > y)\n\t\t\treturn;\n\t\tif (l >= x && r <= y)\n\t\t{\n\t\t\tF::add(z,id[k],inf);\n\t\t\treturn;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tif (x <= mid)\n\t\t\tupdate(zrt,l,mid,x,y,z);\n\t\tif (y > mid)\n\t\t\tupdate(yrt,mid + 1,r,x,y,z);\n\t}\n}tree;\nvoid add_edge(int u,int v,int id)\n{\n\tedge[++edge_cnt] = (edges){v,id};\n\tnxt[edge_cnt] = head[u];\n\thead[u] = edge_cnt;\n}\nvoid dfs1(int u,int f)\n{\n\tfa[u] = f;\n\tdep[u] = dep[f] + 1;\n\tsize[u] = 1;\n\tfor (int i = head[u];i;i = nxt[i])\n\t{\n\t\tint v = edge[i].to,id = edge[i].id;\n\t\tif (v == f)\n\t\t\tcontinue;\n\t\tID[v] = id;\n\t\tdfs1(v,u);\n\t\tsize[u] += size[v];\n\t\tif (size[v] > size[son[u]])\n\t\t\tson[u] = v;\n\t}\n}\nvoid dfs2(int u,int to)\n{\n\ttop[u] = to;\n\tdfn[u] = ++dfc;\n\tval[dfc] = ID[u];\n\tif (son[u])\n\t\tdfs2(son[u],to);\n\tfor (int i = head[u];i;i = nxt[i])\n\t{\n\t\tint v = edge[i].to;\n\t\tif (v == fa[u] || v == son[u])\n\t\t\tcontinue;\n\t\tdfs2(v,v);\n\t}\n}\nvoid update(int x,int y,int z)\n{\n\twhile (top[x] != top[y])\n\t{\n\t\tif (dep[top[x]] < dep[top[y]])\n\t\t\tswap(x,y);\n\t\ttree.update(1,1,n,dfn[top[x]],dfn[x],z);\n\t\tx = fa[top[x]];\n\t}\n\tif (dfn[x] > dfn[y])\n\t\tswap(x,y);\n\ttree.update(1,1,n,dfn[x] + 1,dfn[y],z);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tint u,v;\n\tfor (int i = 1;i < n;i++)\n\t{\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd_edge(u,v,i);\n\t\tadd_edge(v,u,i);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tS = ++idc;T = ++idc;\n\ttree.build(1,1,n);\n\tfor (int i = 1;i <= m;i++)\n\t{\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tidc++;\n\t\tid[idc] = i;\n\t\tF::add(S,idc,1);\n\t\tupdate(u,v,idc);\n\t}\n\tint x = F::dinic(S,T);\n\tcout<<x<<endl;\n\tF::solve(S,T,x);\n\tcout<<a1.size()<<\" \";\n\tfor (int i = 0;i < a1.size();i++)\n\t\tprintf(\"%d \",a1[i]);\n\tcout<<endl<<a2.size()<<\" \";\n\tfor (int i = 0;i < a2.size();i++)\n\t\tprintf(\"%d \",a2[i]);\n\treturn 0;\n}\n```",
        "postTime": 1616891151,
        "uid": 73231,
        "name": "eee_hoho",
        "ccfLevel": 7,
        "title": "CF786E ALT"
    },
    {
        "content": "[\u9898\u89e3\u540c\u6b65\u53d1\u8868\u5728\u8fd9\u91cc\u54e6](https://foreverlasting1202.github.io/2019/07/02/CF786E/)\n\n\u7f51\u7edc\u6d41\u3002\n<!--more-->\n\n\u9996\u5148\u5bb9\u6613\u60f3\u5230\u4e00\u4e2a\u66b4\u529b\u5efa\u56fe\uff0c\u5bf9\u4e8e\u6e90\u70b9$S$\u5411\u6bcf\u4e2a\u5c45\u6c11\u8fde\u4e00\u6761$1$\u7684\u8fb9\uff0c\u6bcf\u4e2a\u5c45\u6c11\u5411\u6bcf\u6761\u5bf9\u5e94\u8def\u5f84\u7684\u8fb9\u8fde\u4e00\u6761$inf$\u7684\u8fb9\uff0c\u6bcf\u6761\u8fb9\u518d\u5411\u7ec8\u70b9$T$\u8fde\u4e00\u6761$1$\u7684\u8fb9\uff0c\u7b54\u6848\u663e\u7136\u5c31\u662f\u6700\u5c0f\u5272\u3002\n\n\u76f4\u63a5\u5efa\u56fe\u65f6\u7a7a\u90fd\u5230\u8fbe\u4e86$nm$\u7ea7\u522b\u3002\u8003\u8651\u4f18\u5316\u3002\n\n\u4f18\u5316$1$\uff1a\u500d\u589e\u4f18\u5316\u3002\n\n\u4f60\u5c31\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5411\u5b83\u4eec\u7684\u500d\u589e\u7684\u94fe\u8d4b\u4e88\u4e00\u4e2a\u65b0\u7684\u6807\u53f7\u3002\u90a3\u4e48\u6bcf\u6761\u8def\u5f84\u90fd\u53ea\u4f1a\u88ab\u62c6\u6210$log$\u6761\u8fd9\u6837\u7684\u94fe\uff0c\u7136\u540e\u8fde\u4e00\u8fde\u5c31\u597d\u4e86\u3002\u8fd9\u6837\u7684\u70b9\u6570\u662f$O(m+nlogn)$\u7684\u3002\n\n\u4f18\u5316$2$\uff1a\u7ebf\u6bb5\u6811\u4f18\u5316\u3002\n\n\u8003\u8651\u628a\u6574\u68f5\u6811\u76f4\u63a5\u91cd\u94fe\u5256\u5206\u6389\uff0c\u90a3\u4e48\u6bcf\u4e00\u6761\u8def\u5f84\u4e5f\u53ea\u4f1a\u88ab\u5206\u6210$log$\u6761\uff0c\u540c\u65f6\u8fd9\u79cd\u533a\u5206\u4e0b\u5b83\u4eec\u7684$dfn$\u5e8f\u90fd\u662f\u8fde\u7eed\u7684\u3002\u7136\u540e\u4f60\u5c31\u76f4\u63a5\u4e0a\u7ebf\u6bb5\u6811\uff0c\u66b4\u529b\u5efa\u56fe\u5c31\u597d\u4e86\u3002\u8fd9\u6837\u7684\u70b9\u6570\u662f$O(m+n*4*logn)$\uff0c\u975e\u5e38\u7684\u4e0d\u4f18\u79c0\u3002\n\n\u4f18\u5316$3$\uff1a\u91cd\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u4f18\u5316\n\n\u8fd8\u662f\u91cd\u94fe\u5256\u5206\u4e00\u4e0b\uff0c\u8003\u8651\u53e6\u5916\u4e00\u4e2a\u6027\u8d28\uff1a\u82e5\u4e00\u6761\u8def\u5f84\u88ab\u5206\u4e3a$k$\u6761\uff0c\u5219\u81f3\u5c11\u6709$k-1$\u6761\u662f\u4e00\u6761\u91cd\u94fe\u7684\u94fe\u5934\u3002\u8fd9\u600e\u4e48\u8bc1\u660e\uff1f\u4f60\u5c31\u8003\u8651\u4e2d\u95f4\u6709\u4e00\u6761\u4e0d\u662f\uff0c\u7136\u540e\u9a6c\u4e0a\u5f97\u5230\u4e00\u4e2a\u70b9\u6709\u4e24\u4e2a\u7236\u4eb2\uff0c\u4e8e\u662f\u77db\u76fe\uff0c\u5c31\u8bc1\u597d\u4e86\u3002\u6709\u4e86\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u6bcf\u4e00\u6761\u91cd\u94fe\uff0c\u53ea\u7528\u5c06\u4e00\u6761\u91cd\u94fe\u7684\u524d\u7f00\u94fe\u5934\u91cd\u65b0\u7f16\u53f7\uff0c\u591a\u51fa\u6765\u7684\u90a3\u4e00\u6761\u7528\u7ebf\u6bb5\u6811\u641e\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\u8fd9\u6837\u7684\u70b9\u6570\u662f$O(m+n*4+nlogn)$\u3002\u5b9e\u9645\u5b9e\u73b0\u8d77\u6765\u8fd9\u4e2a\u8dd1\u5f97\u6700\u5feb\u3002\n\ncode:\n```cpp\n//2019.7.2 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define INF 0x3f3f3f3f3f3f3f\n#define eps 1e-10\n#define RG register\n#define db double\n#define pc(x) __builtin_popcount(x)\ntypedef pair<int,int> Pair;\n#define mp make_pair\n#define fi first\n#define se second\n#define pi acos(-1.0)\n#define pb push_back\n#define gc getchar\n//inline char gc() {\n//    static char buf[100000],*p1,*p2;\n//    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n//}\ninline int read() {\n    res s=0,ch=gc();\n    while(ch<'0'||ch>'9')ch=gc();\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n    return s;\n}\n//inline int read() {\n//    res s=0,ch=gc(),w=1;\n//    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=gc();}\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s*w;\n//}\n//inline LL Read() {\n//    RG LL s=0;\n//    res ch=gc();\n//    while(ch<'0'||ch>'9')ch=gc();\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s;\n//}\n//inline LL Read() {\n//    RG LL s=0;\n//    res ch=gc(),w=1;\n//    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=gc();}\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s*w;\n//}\ninline void swap(res &x,res &y) {\n    x^=y^=x^=y;\n}\n//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nconst int N=2e4+10;\nnamespace MAIN{\n    int n,m;\n    struct E{\n        int next,to;\n        E() {}\n        E(res next,res to):next(next),to(to) {}\n    }edge[N<<1];\n    int head[N],cnt;\n    inline void addedge(const res &u,const res &v){\n        edge[++cnt]=E(head[u],v),head[u]=cnt;\n        edge[++cnt]=E(head[v],u),head[v]=cnt;\n    }\n    int sz[N],son[N],fa[N],dep[N];\n    void dfs(res x,res fax,res depx){\n        sz[x]=1,fa[x]=fax,dep[x]=depx;\n        for(res i=head[x];~i;i=edge[i].next){\n            res tox=edge[i].to;\n            if(tox==fax)continue;\n            dfs(tox,x,depx+1),sz[x]+=sz[tox];\n            if(sz[tox]>sz[son[x]])son[x]=tox;\n        }\n    }\n    int top[N],dfn[N],low[N],idx,pos[N];\n    void dfs(res x,res topx){\n        top[x]=topx,dfn[x]=++idx,pos[idx]=x;\n        if(son[x])dfs(son[x],topx),low[x]=low[son[x]];\n        else low[x]=idx;\n        for(res i=head[x];~i;i=edge[i].next){\n            res tox=edge[i].to;\n            if(tox==fa[x]||tox==son[x])continue;\n            dfs(tox,tox);\n        }\n    }\n#define Edgid(i) i\n#define Topid(i) i+n\n#define Segid(i) i+n*2\n#define Queid(i) i+n*4\n    struct Dinic{\n        struct E{\n            int next,to,val;\n            E() {}\n            E(res next,res to,res val):next(next),to(to),val(val) {}\n        }edge[N*100];\n        int head[N*50],cnt,cur[N*50];\n        Dinic() {memset(head,-1,sizeof(head)),cnt=-1;}\n        inline void addedge(const res &u,const res &v,const res &w){\n            edge[++cnt]=E(head[u],v,w),head[u]=cnt;\n            edge[++cnt]=E(head[v],u,0),head[v]=cnt;\n        }\n        int Q[N*50],he,ta,S,T,dep[N*50];\n        inline bool bfs(){\n            for(res i=S;i<=T;i++)dep[i]=0;\n            Q[he=ta=1]=S,dep[S]=1;\n            while(he<=ta){\n                res u=Q[he++];\n                for(res i=head[u];~i;i=edge[i].next){\n                    res tox=edge[i].to;\n                    if(edge[i].val&&!dep[tox])dep[Q[++ta]=tox]=dep[u]+1;\n                }\n            }\n            return dep[T]!=0;\n        }\n        int dfs(res x,res lim){\n            if(x==T)return lim;\n            for(res &i=cur[x];~i;i=edge[i].next){\n                res tox=edge[i].to;\n                if(dep[tox]==dep[x]+1&&edge[i].val){\n                    res f=dfs(tox,min(lim,edge[i].val));\n                    if(f>0){\n                        edge[i].val-=f,edge[i^1].val+=f;\n                        return f;\n                    }\n                }\n            }\n            return 0;\n        }\n        inline int dinic(){\n            res ans=0;\n            while(bfs()){\n                memcpy(cur,head,sizeof(cur));\n                while(int f=dfs(S,inf))ans+=f;\n            }\n            return ans;\n        }\n        bool vis[N*50];\n        void Dfs(res x){\n            vis[x]=1;\n            for(res i=head[x];~i;i=edge[i].next){\n                res tox=edge[i].to;\n                if(!vis[tox]&&edge[i].val)Dfs(tox);\n            }\n        }\n    }A;\n    struct Seg{\n        int ls[N<<2],rs[N<<2],tot,rt;\n        void build(res &rt,res l,res r){\n            rt=++tot;\n            if(l==r){A.addedge(Segid(rt),Edgid(pos[l]),inf);return;}\n            res mid=(l+r)>>1;\n            build(ls[rt],l,mid),build(rs[rt],mid+1,r);\n            A.addedge(Segid(rt),Segid(ls[rt]),inf),A.addedge(Segid(rt),Segid(rs[rt]),inf);\n        }\n        void connect(res rt,res l,res r,const res &L,const res &R,const res &I){\n            if(L>R)return;\n            if(L<=l&&r<=R){A.addedge(I,Segid(rt),inf);return;}\n            res mid=(l+r)>>1;\n            if(L<=mid)connect(ls[rt],l,mid,L,R,I);\n            if(R>mid)connect(rs[rt],mid+1,r,L,R,I);\n        }\n    }B;\n    inline void jump(res u,res v,const res &I){\n        A.addedge(A.S,I,1);\n        while(top[u]!=top[v]){\n            if(dep[top[u]]<dep[top[v]])swap(u,v);\n            A.addedge(I,Topid(u),inf),u=fa[top[u]];\n        }\n        if(dep[u]<dep[v])swap(u,v);\n        B.connect(1,2,n,dfn[v]+1,dfn[u],I);\n    }\n    int ans1[N],ans2[N],ans1x,ans2x;\n    inline void MAIN(){\n        n=read(),m=read(),A.S=0,A.T=m+n*4+1;\n        for(res i=1;i<=n;i++)head[i]=-1;\n        for(res i=1;i<n;i++){\n            res u=read(),v=read();\n            addedge(u,v);\n        }\n        dfs(1,0,1),dfs(1,1),B.build(B.rt,2,n);\n        for(res t=1;t<=m;t++){\n            res u=read(),v=read();\n            jump(u,v,Queid(t));\n        }\n        for(res i=2;i<=n;i++){\n            A.addedge(Edgid(i),A.T,1),A.addedge(Topid(i),Edgid(i),inf);\n            if(i!=top[i]&&i!=son[1])A.addedge(Topid(i),Topid(fa[i]),inf);\n        }\n        printf(\"%d\\n\",A.dinic()),A.Dfs(A.S);\n        for(res i=1;i<=m;i++)if(!A.vis[Queid(i)])ans1[++ans1x]=i;\n        for(res i=1;i<n;i++){\n            res u=edge[i*2].to,v=edge[i*2-1].to;\n            if(fa[u]==v)swap(u,v);\n            if(A.vis[Edgid(v)])ans2[++ans2x]=i;\n        }\n        printf(\"%d \",ans1x);\n        for(res i=1;i<=ans1x;i++)printf(\"%d \",ans1[i]);\n        printf(\"\\n%d \",ans2x);\n        for(res i=1;i<=ans2x;i++)printf(\"%d \",ans2[i]);\n    }\n}\nint main() {\n//    srand((unsigned)time(NULL));\n    // freopen(\"zao.in\",\"r\",stdin);\n    // freopen(\"std.out\",\"w\",stdout);\n    MAIN::MAIN();\n    return 0;\n}\n```",
        "postTime": 1562058265,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010CF786E\u3011ALT"
    },
    {
        "content": "[\u6b22\u8fce\u6765\u6211\u7684blog\u901b\u901b~](https://blog.csdn.net/Dream_Lolita/article/details/86761795)\n\n\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u6700\u5c0f\u5272\u6a21\u578b\uff1a\u4ece$S$\u8fde\u5411\u6bcf\u4e2a\u4eba\uff0c\u5bb9\u91cf\u4e3a$1$\uff0c\u6bcf\u6761\u8fb9\u8fde\u5411$T$\uff0c\u5bb9\u91cf\u4e3a$1$\uff0c\u6bcf\u4e2a\u4eba\u5411\u5bf9\u5e94\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a$\\text{INF}$\u3002\n\n\u8fd9\u6837\u8fde\u8fb9\u6570\u6bd4\u8f83\u591a\uff0c\u7528\u500d\u589e\u4f18\u5316\u5efa\u8fb9\u5373\u53ef\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u89c1\u4ee3\u7801\u3002\n\n\u603b\u7684\u8fb9\u6570\u548c\u70b9\u6570\u7ea7\u522b\u90fd\u662f$O(m\\log n)$\u7684\u3002\n\n\u5173\u4e8e\u8f93\u51fa\u65b9\u6848\uff0c\u53ea\u9700\u8981\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u4ece$S$\u8fdb\u884c$dfs$\u5373\u53ef\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u82e5\u4e00\u4e2a\u4ee3\u8868\u4eba\u7684\u70b9$dfs$\u65f6\u6ca1\u6709\u88ab\u8bbf\u95ee\u5230\uff0c\u5219\u8bf4\u660e\u7ed9\u5b83\u5206\u914d\u4e86\u4e00\u53ea\u72d7\uff0c\u82e5\u4e00\u4e2a\u4ee3\u8868\u8fb9\u7684\u70b9\u6ca1\u6709\u88ab\u8bbf\u95ee\u5230\uff0c\u5219\u8bf4\u660e\u8fd9\u6761\u8fb9\u4e0a\u6709\u4e00\u53ea\u72d7\u3002\n\n\u5f00\u6570\u7ec4\u4e0d\u8981\u541d\u556c\uff0c\u8d8a\u754c\u95ee\u9898\u53ef\u80fd\u4f1a\u82b1\u8d39\u5f88\u957f\u65f6\u95f4\u53bb\u8c03\u8bd5- -\u3002\n~~\u6ca1\u9519\u5927\u5bb6\u53ef\u4ee5\u67e5\u4e00\u4e0b\u63d0\u4ea4\u8bb0\u5f55\uff0cDurant_Lee\u548cDream2BTrue,\u4e2d\u95f4\u89c9\u5f97\u5efa\u8fb9\u9519\u4e86\uff0c\u7167\u7740\u522b\u4eba\u7684\u4ee3\u7801\u6539\uff0c\u7136\u540e\u4e00\u6b65\u4e00\u6b65\u6539\u56de\u53bb\uff0c\u665a\u4e0a\u624d\u88abGhastlcon\u70b9\u9192\uff0c\u6700\u540e\u7528\u5f00\u59cb\u7684\u4ee3\u7801\u4ea4\u8fc7\u4e86- -\u3002~~\n\n\u3010\u53c2\u8003\u4ee3\u7801\u3011\n```cpp\n#include<bits/stdc++.h>\n#define pb push_back\nusing namespace std;\n\nconst int N=4e5+10,M=5e6+10,INF=0x3f3f3f3f;\nint n,m,cnt,id[N][16],fc[20];\n\nnamespace IO\n{\n\tint read()\n\t{\n\t\tint ret=0;char c=getchar();\n\t\twhile(!isdigit(c)) c=getchar();\n\t\twhile(isdigit(c)) ret=ret*10+(c^48),c=getchar();\n\t\treturn ret;\n\t}\n\tvoid write(int x){if(x>9)write(x/10);putchar(x%10^48);}\n\tvoid writeln(int x){write(x);putchar('\\n');}\n\tvoid writesp(int x){write(x);putchar(' ');}\n}\nusing namespace IO;\n\nnamespace Flow\n{\n\tint tot,S,T,head[N],dis[N],vis[N];\n\tvector<int>ans1,ans2;\n\tqueue<int>q;\n\tstruct Tway{int v,w,nex;}e[M<<1];\n\tvoid add(int u,int v,int w)\n\t{\n\t\te[++tot]=(Tway){v,w,head[u]};head[u]=tot;\n\t\te[++tot]=(Tway){u,0,head[v]};head[v]=tot;\n\t}\n\tbool bfs()\n\t{\n\t\tmemset(dis,-1,sizeof(dis));\n\t\twhile(!q.empty()) q.pop(); q.push(S);dis[S]=0;\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint x=q.front();q.pop();\n\t\t\tfor(int i=head[x];i;i=e[i].nex)\n\t\t\t{\n\t\t\t\tint v=e[i].v;\n\t\t\t\tif(!e[i].w || ~dis[v]) continue;\n\n\t\t\t\tdis[v]=dis[x]+1;q.push(v);\n\t\t\t}\n\t\t}\n\t\treturn ~dis[T];\n\t}\n\tint dfs(int x,int flow)\n\t{\n\t\tint used=0,u;\n\t\tif(x==T || !flow) return flow;\n\t\tfor(int i=head[x];i;i=e[i].nex)\n\t\t{\n\t\t\tint v=e[i].v;\n\t\t\tif(dis[v]!=dis[x]+1 || !(u=dfs(v,min(flow-used,e[i].w)))) continue;\n\t\t\tused+=u;e[i].w-=u;e[i^1].w+=u;\n\t\t\tif(used==flow) break;\n\t\t}\n\t\tif(!used) dis[x]=-1;\n\t\treturn used;\n\t}\n\tvoid dfsans(int x)\n\t{\n\t\tvis[x]=1;\n\t\tfor(int i=head[x];i;i=e[i].nex)\n\t\t\tif(!vis[e[i].v] && e[i].w) dfsans(e[i].v);\n\t}\n\tvoid getans()\n\t{\n\t\tint res=0;while(bfs()) res+=dfs(S,INF);\n\t\tdfsans(S);\n\t\tfor(int i=1;i<=m;++i) if(!vis[i]) ans1.pb(i);\n\t\tfor(int i=2;i<=n;++i) if(vis[id[i][0]]) ans2.pb(id[i][0]-m);\n\t\twriteln(res);\n\t\twritesp(ans1.size());\n\t\tfor(int i=0;i<(int)ans1.size();++i) writesp(ans1[i]); puts(\"\");\n\t\twritesp(ans2.size());\n\t\tfor(int i=0;i<(int)ans2.size();++i) writesp(ans2[i]); puts(\"\");\n\t}\n}\n\nnamespace Tree\n{\n\tint tot,head[N],dep[N],fa[16][N];\n\tstruct Tway{int v,nex;}e[N];\n\tvoid addedge(int u,int v)\n\t{\n\t\te[++tot]=(Tway){v,head[u]};head[u]=tot;\n\t\te[++tot]=(Tway){u,head[v]};head[v]=tot;\n\t}\n\tvoid dfs(int x)\n\t{\n\t\tfor(int i=1;fc[i]<=dep[x];++i)\n\t\t{\n\t\t\tfa[i][x]=fa[i-1][fa[i-1][x]];id[x][i]=++cnt;\n\t\t\tFlow::add(id[x][i],id[x][i-1],INF);Flow::add(id[x][i],id[fa[i-1][x]][i-1],INF);\n\t\t}\t\n\t\tfor(int i=head[x];i;i=e[i].nex)\n\t\t{\n\t\t\tint v=e[i].v;\n\t\t\tif(v==fa[0][x]) continue;\n\t\t\tid[v][0]=m+(i+1)/2;Flow::add(id[v][0],Flow::T,1);\n\t\t\tdep[v]=dep[x]+1;fa[0][v]=x;dfs(v);\n\t\t}\n\t}\n\tint lca(int x,int y)\n\t{\n\t\tif(dep[x]<dep[y]) swap(x,y);\n\t\tfor(int t=dep[x]-dep[y],i=0;i<16;++i) \n\t\t\tif(fc[i]&t) x=fa[i][x];\n\t\tfor(int i=15;~i;--i) if(fa[i][x]^fa[i][y]) \n\t\t\tx=fa[i][x],y=fa[i][y];\n\t\treturn x==y?x:fa[0][x];\n\t}\n\tvoid tagedge(int f,int x,int y)\n\t{\n\t\tint t=dep[x]-dep[y];\n\t\tfor(int i=15;~i;--i) if(t&fc[i])\n\t\t\tFlow::add(f,id[x][i],INF),x=fa[i][x];\n\t}\n}\n\nnamespace DreamLolita\n{\n\tvoid init_tree()\n\t{\n\t\tfc[0]=1;for(int i=1;i<16;++i) fc[i]=fc[i-1]<<1;\n\t\tfor(int i=1;i<n;++i) Tree::addedge(read(),read());\n\t\tTree::dfs(1);\n\t}\n\tvoid solution()\n\t{\n\t\tn=read();m=read();cnt=m+n-1;Flow::S=0;Flow::T=N-5;Flow::tot=1;\n\t\tinit_tree();\n\t\tfor(int i=1;i<=m;++i)\n\t\t{\n\t\t\tFlow::add(Flow::S,i,1);\n\t\t\tint x=read(),y=read(),z=Tree::lca(x,y);\n\t\t\tTree::tagedge(i,x,z);Tree::tagedge(i,y,z);\n\t\t}\n\t\tFlow::getans();\n\t}\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"CF786E.in\",\"r\",stdin);\n\tfreopen(\"CF786E.out\",\"w\",stdout);\n#endif\n\tDreamLolita::solution();\n\treturn 0;\n}\n```",
        "postTime": 1549206956,
        "uid": 15438,
        "name": "Durant_Lee",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF786E \u3010ALT\u3011"
    }
]