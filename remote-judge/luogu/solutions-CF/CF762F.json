[
    {
        "content": "[Link](https://www.luogu.com.cn/problem/CF762F)\n\n\u552f\u4e00\u7684\u4e00\u7bc7\u6d1b\u8c37\u9898\u89e3\u8bf4\u7684\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u8ba9\u6211\u6765\u8bf4\u6e05\u695a\u4e00\u70b9\u3002\u4f60\u8fd8\u53ef\u4ee5\u53c2\u8003[\u5927\u8c61\u7684\u9898\u89e3](https://blog.csdn.net/wxh010910/article/details/54784089)\u3002\n\n\u8fd9\u662f\u4e00\u9053\u6bd4\u8f83\u9ebb\u70e6\u7684\u6811\u5f62+\u72b6\u538bDP\u3002\n\n\u6211\u4eec\u628a$S$\u7684\u6839\u5f53\u4f5c0\uff08\u6211\u4ece0\u5f00\u59cb\u8ba1\u6570\uff09\uff0c\u679a\u4e3e$T$\u7684\u6839\u3002\n\n\u6211\u4eec\u8bbe$f_{s,t,i}$\uff0c\u8868\u793a$S$\u4e2ds\u4e0e$T$\u4e2dt\u5339\u914d\uff0c\u5176\u4e2d$T$\u7684\uff0c**\u5df2\u88ab\u5339\u914d\u7684\u513f\u5b50\u96c6\u5408**\u662f$i$\u7684\u65b9\u6848\u6570\u3002\u679a\u4e3e$S$\u7684\u4e00\u4e2a\u513f\u5b50a\uff0c\u679a\u4e3e\u4ed6\u662f\u5426\u5339\u914d\uff0c\u5339\u914d\u5230\u4e86t\u4e0a\u7684\u54ea\u4e00\u4e2a\u513f\u5b50\u3002\n\n\u521d\u59cb\u503c\uff1a $f_{s,t,\\emptyset}=1$\n\n\u8f6c\u79fb\uff1a\n\n$f_{s,t,i}\\leftarrow f_{s,t,i-\\{u\\}}ans_{a,son[t][u]}$\n\n\u5176\u4e2d$ans_{s,t}=f_{s,t,U},U$\u8868\u793a$t$\u513f\u5b50\u7684\u5168\u96c6\u3002\n\n\u5168\u5c40$ans += \\sum_{b,a}ans_{b,a}$\n\nDP\u7684\u590d\u6742\u5ea6\u662f$O(ST^22^T)$\uff0c\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u5b9e\u73b0\uff0c\u663e\u7136\u8dd1\u4e0d\u6ee1\u3002\n\n\u7136\u800c\u8fd9\u6837\u80af\u5b9a\u7b97\u91cd\u590d\uff0c\u6839\u636e\u67d0\u4e2a\u6211\u4e0d\u77e5\u9053\u7684\u7ed3\u8bba\uff0c\u7b97\u91cd\u590d\u7684\u6b21\u6570\u6070\u597d\u662fT\u4e0eT\u81ea\u6211\u5339\u914d\u5339\u914d\u7684\u65b9\u6848\u6570\uff0c\u6240\u4ee5\u9664\u6389\u5c31\u597d\u4e86\u3002\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n \nconst int mod = 1e9 + 7 , N = 1000 , M = 12;\ninline void add(int &x , int y) {x += y ; if(x >= mod) x -= mod;}\ninline void sub(int &x , int y) {x -= y ; if(x < 0) x += mod;}\n \nstruct Tree : vector<vector<int>> {\n    void AddEdge(int x , int y) {\n        this->at(x).push_back(y) , this->at(y).push_back(x);\n    }\n};\nvoid Del(vector<int> &vec , int element) {\n    for(auto it = vec.begin() ; it != vec.end() ; ++it) {\n        while(*it == element) {\n            it = vec.erase(it);\n            if(it == vec.end()) return ;\n        }\n    }\n}\nTree getroot(Tree x , int rt) {\n    queue<int> que;\n    que.push(rt);\n    while(que.size()) {\n        int cur = que.front();\n        que.pop();\n        for(auto nxt : x[cur]) {\n            Del(x[nxt] , cur);\n            que.push(nxt);\n        }\n    }\n    return x;\n}\n \nint Log2[1 << M];\nstruct TreeMatcher {\n \nvector<int> dp[N][M];\nint dfs(Tree &S , Tree &T , int s , int t) {\n    vector<int> &cur = dp[s][t];\n    if(!cur.empty()) return cur.back();\n    cur.resize(1 << T[t].size());\n    cur[0] = 1;\n    for(auto nxt : S[s]) {\n        for(int i = (int)cur.size() - 1 ; ~i ; --i)\n            for(int j = i ; j ; j ^= (j & -j)) {\n                int node = Log2[j & -j];\n                if(cur[i ^ (1 << node)])\n                    add(cur[i] , 1LL * cur[i ^ (1 << node)] * dfs(S , T , nxt , T[t][node]) % mod);\n            }\n    }\n    return cur.back();\n}\nint match(Tree &S , Tree &T) {\n    if(S.size() < T.size())\n        return 0;\n    if(T.size() <= 1)\n        return S.size();\n \n    auto clr = [&] {\n        for(int i = 0 ; i < S.size() ; ++i)\n            for(int j = 0 ; j < T.size() ; ++j) dp[i][j].clear();\n    };\n    int ans = 0;\n    Tree s = getroot(S , 0);\n    for(int j = 0 ; j < T.size() ; ++j) {\n        Tree t = getroot(T , j);\n        clr();\n        for(int i = 0 ; i < S.size() ; ++i)\n            add(ans , dfs(s , t , i , j));\n    }\n    return ans;\n}\n \n};\n \ninline int Inv(int x) {\n    return x <= 1 ? x : 1LL * (mod - mod / x) * Inv(mod % x) % mod;\n}\n \nTree S , T;\nTreeMatcher matcher;\n \nint main() {\n    auto Input = [&](Tree &tree) {\n        int n ;\n        scanf(\"%d\" , &n);\n        tree.resize(n);\n \n        for(int i = 1 , x , y ; i < n ; ++i) {\n            scanf(\"%d %d\" , &x , &y);\n            tree.AddEdge(x - 1, y - 1);\n        }\n    };\n    Input(S) , Input(T);\n    *Log2 = -1 ; for(int i = 1 ; i < (1 << M) ; ++i) Log2[i] = Log2[i >> 1] + 1;\n    printf(\"%lld\\n\" , 1LL * matcher.match(S , T) * Inv(matcher.match(T , T)) % mod);\n    return 0;\n}\n```",
        "postTime": 1595429824,
        "uid": 138511,
        "name": "GreenDay",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF762F [Tree nesting]"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u975e\u5e38\u8349\u7387\u7684\u505a\u6cd5\u3002\n\n\u9996\u5148\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u5bf9\u4e8e\u6811 $S$ \u4e0a\u7684\u4e00\u70b9 $u$\uff0c\u6811 $T$ \u4e0a\u7684\u4e00\u70b9 $i$ \u548c\u6811 $T$ \u7684\u5b50\u96c6 $A$\uff0c\u7528 $f_{u,k,A}$ \u8868\u793a\u70b9 $u$ \u5bf9\u5e94\u70b9 $i$\uff0c\u5e76\u4e14\u5728 $u$ \u7684\u5b50\u6811\u5185\u914d\u5bf9\u4e86\u5b50\u96c6 $A$ \u7684\u65b9\u6848\u6570\u3002\n\n\u8f6c\u79fb\u662f\u7b80\u5355\u7684\uff0c\u679a\u4e3e\u4e00\u5bf9\u7236\u5b50\u5173\u7cfb\uff0c\u7136\u540e\u4ed6\u4eec\u4e24\u4e2a\u7684 $k$ \u5728\u6811 $T$ \u4e0a\u4e5f\u662f\u7236\u5b50\u5173\u7cfb\uff0c\u7136\u540e\u96c6\u5408\u5408\u5e76\u5373\u53ef\u3002\n\n\u5f62\u5f0f\u5316\u5730\u8bf4\uff0c\u5982\u679c $A$ \u548c $B$ \u7684\u4ea4\u96c6\u4e3a\u7a7a\uff0c\u4e14 $i$ \u548c $j$ \u5728\u6811 $T$ \u4e0a\u76f8\u90bb\uff0c\u90a3\u4e48\u53ef\u4ee5\u6709\u5982\u4e0b\u8f6c\u79fb\u3002\n\n$$f_{v,j,B}\\times f_{u,i,A}\\to f_{u,i,A\\cup B}$$\n\n\u7136\u540e\u4e00\u4e2a\u95ee\u9898\u662f\u540c\u4e00\u4e2a\u5b50\u56fe\u53ef\u80fd\u4f1a\u6709\u591a\u79cd\u5339\u914d\u65b9\u5f0f\u3002\u8fd9\u4e2a\u53ea\u9700\u8981\u8ba9 $T$ \u548c\u81ea\u5df1\u5339\u914d\u4e00\u4e0b\uff0c\u6700\u540e\u9664\u4ee5\u81ea\u5df1\u5339\u914d\u7684\u65b9\u6848\u6570\u5373\u53ef\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u662f $O(3^mnm^2)$ \u7684\uff0c\u53d1\u73b0\u76ee\u6807\u72b6\u6001\u548c $j$ \u65e0\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\u63d0\u524d\u679a\u4e3e $j$ \u7684\u8fb9\uff0c\u5b58\u8fdb $g_{k,B}$ \u91cc\uff0c\u7136\u540e\u76f4\u63a5\u8c03\u7528\u5373\u53ef\u3002\u590d\u6742\u5ea6 $O(3^mnm+2^mnm^2)$\u3002\n\n\u7136\u540e\u624b\u9020\u6781\u9650\u6570\u636e\uff0c\u5927\u6982\u8981\u8dd1 21s\uff0c\u663e\u7136\u8fc7\u4e0d\u4e86\u3002\n\n\u8003\u8651\u4f18\u5316\uff0c\u53d1\u73b0\u56e0\u4e3a\u540c\u6784\u8fd9\u4e2a\u4e1c\u897f\u51fa\u73b0\u5f97\u5176\u5b9e\u4e0d\u4f1a\u592a\u591a\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u679a\u4e3e\u7684 $g_{k,B}$ \u4e3a 0 \u7684\u65f6\u5019\u5c31\u4e0d\u7528\u679a\u4e3e\u53e6\u4e00\u4e2a\u4e86\uff0c\u5426\u5219\u6309\u4f4d\u66b4\u529b\u679a\u4e3e $f_{u,i,A}$ \u5373\u53ef\u3002\u540c\u7406\uff0c\u56e0\u4e3a\u53d6\u6a21\u662f\u4e00\u4e2a\u5f88\u6162\u7684\u64cd\u4f5c\uff0c\u53ea\u6709\u5f53 $f_{u,i,A}$ \u4e0d\u4e3a 0 \u65f6\u624d\u4e58\u8d77\u6765\u53d6\u6a21\u52a0\u5230 $f_{u,i,A\\cup B}$\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u4ece $O(3^mnm)$ \u4f18\u5316\u6210\u4e86\u8dd1\u4e0d\u6ee1\u7684 $O(3^mnm)$\uff0c\u5b9e\u6d4b\u53ea\u7528 1.2s\u3002\n\nhttps://codeforces.com/contest/762/submission/174329160",
        "postTime": 1664692684,
        "uid": 115936,
        "name": "\u6cf7\u6cfd\u4e09\u6708",
        "ccfLevel": 0,
        "title": "CF762F"
    },
    {
        "content": "\u8fd9\u5176\u5b9e\u662f\u4e00\u9053\u6c34\u9898\u3002\n\n\u9996\u5148\uff0cS\u662f1000\uff0cT\u662f12\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u53ef\u4ee5\u7528\u72b6\u538bdp\u3002\n\n\u4ee4dp[i][msk]\u8868\u793a\u5728S\u4e2di\u4e3a\u6839\u7684\u5b50\u6570\u4e2d\uff0c\u53d6T\u4e2d\u7ed3\u70b9\u72b6\u6001\u4e3amsk\u4e2d\u540c\u6784\u5b50\u56fe\u7684\u6570\u91cf\uff0c\u6bcf\u6b21dfs\u8f6c\u79fb\u5373\u53ef\uff0c\u5177\u4f53\u8be6\u89c1\u4ee3\u7801\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nll read(){\n\tll a=0,b=getchar(),c=1;\n\twhile(!isdigit(b))c=b=='-'?-1:1,b=getchar();\n\twhile(isdigit(b))a=a*10+b-'0',b=getchar();\n\treturn a*c;\n}\nconst int mod=1e9+7;\nstruct edge{\n\tint to;\n\tedge *next;\n};\nstruct node{\n\tint n,d[1005][1005],a[1005],b[1005];\n\tedge *ab,E[2005],*c[1005];\n\tvoid gao(int u,int v){\n\t\t*ab=(edge){v,c[u]};\n\t\tc[u]=ab++;\n\t}\n\tvoid red(){\n\t\tn=read(),ab=E;\n\t\tif(n>500){\n\t\t\tfor(int i=1;i;i++)\n\t\t\t\tint x=0;\n\t\t}\n\t\tfor(int i=1;i<n;i++){\n\t\t\tint x=read(),y=read();\n\t\t\tgao(x,y),gao(y,x);\n\t\t}\n\t}\n\tvoid dfs(int i,int f){\n\t\tint x=b[i]=0;\n\t\tfor(edge *e=c[i];e;e=e->next)\n\t\t\tif(e->to!=f){\n\t\t\t\tdfs(d[i][x++]=e->to,i);\n\t\t\t\tb[i]|=1<<e->to-1;\n\t\t\t}\n\t\ta[i]=x;\n\t}\n}a,b;\nint ans,ans2,f[1005][1<<12];\nint dfs(int i,int j,int x){\n\tif(!j)return !x;\n\tint &res=f[a.d[i][j-1]][x];\n\tif(res)return res-1;\n\tres=dfs(i,j-1,x);\n\tfor(int c=a.d[i][j-1],k=0;k<b.n;k++)\n\t\tif(x>>k&1)res=(res+1ll*dfs(i,j-1,x-(1<<k))*dfs(c,a.a[c],b.b[k+1]))%mod;\n\treturn res++;\n}\nll gao(int a,int p){\n\tif(a==1)return 1;\n\treturn (1+p*(a-gao(p%a,a)))/a%p;\n}\nint main(){\n\ta.red(),b.red();\n\ta.dfs(1,0);\n\tfor(int r=1;r<=b.n;r++){\n\t\tb.dfs(r,0);\n\t\tfor(int i=1;i<=a.n;i++)\n\t\t\tans=(ans+dfs(i,a.a[i],b.b[r]))%mod;\n\t\tmemset(f,0,sizeof(f));\n\t}\n\ta=b,a.dfs(1,0);\n\tfor(int r=1;r<=b.n;r++){\n\t\tb.dfs(r,0);\n\t\tans2=(ans2+dfs(1,a.a[1],b.b[r]))%mod;\n\t\tmemset(f,0,sizeof(f[0])*13);\n\t}\n\tans=ans*gao(ans2,mod)%mod;\n\tprintf(\"%d\",ans); \n\treturn 0;\n}\n```\n",
        "postTime": 1581250831,
        "uid": 74787,
        "name": "jzh817",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF762F \u3010Tree nesting\u3011"
    }
]