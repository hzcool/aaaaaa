[
    {
        "content": "[\u66f4\u5dee\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/AThousandMoons/p/14907466.html)\n\n\u8fd9\u4ecd\u7136\u662f\u6700\u5c0f\u94fe\u8986\u76d6\u95ee\u9898\uff0c\u8f6c\u5316\u4e3a\u6c42\u6700\u5927\u53cd\u94fe\u3002\n\n\u7136\u540e\u8003\u8651\u7528\u4e0a\u6811\u7684\u6027\u8d28\u8fdb\u884c\u4f18\u5316\uff1a\u6761\u4ef6\u96c6\u5408 $S$ \u6784\u6210\u53cd\u94fe $\\Leftrightarrow$ \u9009\u5b9a\u4e00\u4e2a\u6ca1\u6709\u6761\u4ef6\u7684\u8282\u70b9 $rt$ \u505a\u6839\uff0c\u5bf9 $rt$ \u7684\u6240\u6709\u513f\u5b50 $x$ \u7684\u5b50\u6811 $\\text{sub}(x)$ \u4e0e $S$ \u7684\u4ea4\u6784\u6210\u53cd\u94fe\uff0c\u4e14\u5b58\u5728\u65f6\u523b $T$ \u6ee1\u8db3 $\\forall(v,d)\\in S$\uff0c$d+\\text{dep}_v>T$ \u4e14 $d-\\text{dep}_v<T$\u3002\n\n\u6ce8\u610f $T$ \u4e0d\u4e00\u5b9a\u662f\u6574\u6570\uff0c\u4f46\u662f\u82e5\u5c06\u6240\u6709\u8fb9\u6743\u4ee5\u53ca $d$ \u53d8\u4e3a\u4e24\u500d\uff0c$T$ \u5c31\u662f\u6574\u6570\u4e86\u3002\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5 dp \u4e86\uff0c\u8bbe $f_{u,t}$ \u8868\u793a\u8003\u8651 $u$ \u7684\u5b50\u6811\uff08\u9664\u4e86 $u$\uff09\uff0c$T=t$ \u7684\u65f6\u5019\u7684\u6700\u5927\u53cd\u94fe\u3002\n\n\u8003\u8651\u5c06 $f_u$ \u5408\u5e76\u8fdb\u7236\u4eb2\uff1a\u8bbe\u8d21\u732e\u4e3a $f'_u$\uff0c$u$ \u4e0e\u7236\u4eb2\u7684\u8fde\u8fb9\u957f\u5ea6\u4e3a $l$\uff0c\u82e5 $u$ \u6ca1\u6709\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u662f $f_{u,i}'=\\max_{j=i-l}^{i+l}f_{u,j}$\uff0c\u79f0\u8fd9\u4e2a\u64cd\u4f5c\u4e3a**\u5411\u4e0a\u8d70 $l$ \u6b65**\u3002\n\n\u90a3\u5982\u679c\u6709\u5143\u7d20\u600e\u4e48\u529e\uff0c\u8bbe\u6761\u4ef6 $(u,d)$ \u4e0a\u6709 $x$ \u6761\u9c7c\uff0c\u8003\u8651\u5230\u8d21\u732e\u65f6\u523b\u4e3a $[d-l+1,d+l-1]$\uff0c\u5e94\u5f53\u662f\u5411\u4e0a\u8d70 $1$ \u6b65\uff0c\u7136\u540e $f_{u,d}':=\\max(f_{u,d}',f_{u,d}+x)$\uff0c\u7136\u540e\u5411\u4e0a\u8d70 $l-1$ \u6b65\u3002\n\ndp \u6570\u7ec4\u5f88\u5927\u5b58\u4e0d\u4e0b\uff0c\u4f46\u90fd\u662f\u4e00\u5927\u6bb5\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u8003\u8651\u7ef4\u62a4\u5dee\u5206\u6570\u7ec4\u3002\n\n\u5411\u4e0a\u8d70 $l$ \u6b65\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u662f\u6b63\u6570\u5411\u5de6 $l$ \u6b65\uff0c\u8d1f\u6570\u5411\u53f3 $l$ \u6b65\uff0c\u76f8\u9047\u7684\u6b63\u8d1f\u62b5\u6d88\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u7528 map \u5b58\u5dee\u5206\u6570\u7ec4\uff0c\u7528\u61d2\u6807\u8bb0 $add$ \u8868\u793a\u5411\u4e0a\u8d70\u4e86\u591a\u5c11\u6b65\uff0c\u7528 priority_queue \u7ef4\u62a4\u76f8\u90bb\u7684\u8d1f\u6570\u548c\u6b63\u6570\uff0c\u6309\u8ddd\u79bb\u6392\u5e8f\uff0c\u8d70 $l$ \u6b65\u7684\u65f6\u5019\u5c31\u628a\u8ddd\u79bb $\\leq 2(add+l)$ \u7684\u5408\u5e76\uff0c\u7136\u540e $add:=add+l$\u3002\n\n\u5408\u5e76\u7684\u65f6\u5019\u5c31\u628a\u5dee\u5206\u6570\u7ec4\u52a0\u8d77\u6765\uff0c\u6240\u4ee5\u542f\u53d1\u5f0f\u5408\u5e76\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n+k\\log^2k)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define fi first\n#define se second\n#define PB emplace_back\nusing namespace std;\ntypedef pair<int, int> pii;\nconst int N = 100003;\nint rd(){\n\tint ch = getchar(), x = 0;\n\tfor(;ch < '0' || ch > '9';ch = getchar());\n\tfor(;ch >= '0' && ch <= '9';ch = getchar()) x = x * 10 + ch - '0';\n\treturn x;\n}\ntemplate<typename T>\nbool chmax(T &a, const T &b){if(a < b) return a = b, 1; return 0;}\nint n;\nvector<pii> G[N], V[N];\nstruct DS {\n\tmap<int, int> ps, ng; int tag;\n\tpriority_queue<pii, vector<pii>, greater<pii> > pq;\n\tvoid reb(int x, bool op){\n\t\tif(op){\n\t\t\tauto it = ng.upper_bound(x-(tag<<1));\n\t\t\tif(it == ng.begin()) return; --it;\n\t\t\tpq.emplace(x-it->fi, x);\n\t\t} else {\n\t\t\tauto it = ps.lower_bound(x+(tag<<1));\n\t\t\tif(it == ps.end()) return;\n\t\t\tpq.emplace(it->fi-x, it->fi);\n\t\t}\n\t}\n\tvoid ins(int x, int val){\n\t\tif(val > 0){\n\t\t\tps[x+tag] += val;\n\t\t\treb(x+tag, true);\n\t\t} else {\n\t\t\tng[x-tag] += val;\n\t\t\treb(x-tag, false);\n\t\t}\n\t}\n\tint get() const {\n\t\tint res = 0, now = 0;\n\t\tauto i = ps.begin(), j = ng.begin();\n\t\twhile(i != ps.end() && j != ng.end()){\n\t\t\tif(i->fi-j->fi>=(tag<<1)){\n\t\t\t\tnow += j->se; ++j;\n\t\t\t} else {\n\t\t\t\tnow += i->se; ++i;\n\t\t\t} chmax(res, now);\n\t\t} return res;\n\t}\n\tvoid work(int l){\n\t\twhile(!pq.empty()){\n\t\t\tpii _ = pq.top();\n\t\t\tif(_.fi > (tag+l<<1)) break;\n\t\t\tpq.pop();\n\t\t\tint x = _.se, y = x-_.fi;\n\t\t\tauto i = ps.find(x), j = ng.find(y);\n\t\t\tif(i == ps.end() || j == ng.end()) continue;\n\t\t\tif(i->se + j->se < 0){\n\t\t\t\tj->se += i->se; ps.erase(i); reb(j->fi, false);\n\t\t\t} else {\n\t\t\t\ti->se += j->se; ng.erase(j); reb(i->fi, true);\n\t\t\t}\n\t\t} tag += l;\n\t}\n\tsize_t size() const {return ps.size()+ng.size();}\n\tint qry(int p) const {\n\t\tauto i = ps.find(p+tag), j = ng.find(p-tag);\n\t\treturn (i==ps.end()?0:i->se)+(j==ng.end()?0:j->se);\n\t}\n\tvoid operator += (const DS &o){\n\t\tfor(pii i : o.ps) ins(i.fi-o.tag, i.se);\n\t\tfor(pii i : o.ng) ins(i.fi+o.tag, i.se);\n\t}\n} S[N];\nvoid dfs(int x, int fa){\n\tfor(pii _ : G[x]) if(_.fi != fa){\n\t\tint v = _.fi, len = _.se;\n\t\tdfs(v, x);\n\t\tfor(pii &i : V[v]) i.se -= max(0, max(-S[v].qry(i.fi), S[v].qry(i.fi+1)));\n\t\tS[v].work(1);\n\t\tfor(pii i : V[v]) if(i.se > 0){\n\t\t\tS[v].ins(i.fi, i.se);\n\t\t\tS[v].ins(i.fi+1, -i.se);\n\t\t}\n\t\tS[v].work(len-1);\n\t\tif(S[x].size() < S[v].size()) swap(S[x], S[v]);\n\t\tS[x] += S[v];\n\t}\n}\nint main(){\n\tn = rd();\n\tfor(int i = 1;i < n;++ i){\n\t\tint u = rd(), v = rd(), l = rd()<<1;\n\t\tG[u].PB(v, l); G[v].PB(u, l);\n\t}\n\tint m = rd(); G[0].PB(1, 2);\n\twhile(m --){\n\t\tint d = rd()<<1, f = rd(), p = rd();\n\t\tV[p].PB(d, f);\n\t} dfs(0, 0);\n\tprintf(\"%d\\n\", S[0].get());\n}\n```",
        "postTime": 1624183496,
        "uid": 68148,
        "name": "watermoon",
        "ccfLevel": 10,
        "title": "\u6807\u9898"
    },
    {
        "content": "\u5f88\u597d\u7684\u4e00\u9053\u9898\u3002\n\n\u5f88\u96be\u53d1\u73b0\u7b54\u6848\u4e3a\u627e\u5230\u6700\u591a\u7684\u9c7c\u4f7f\u5f97\u9c7c\u4e0d\u80fd\u4e92\u76f8\u5230\u8fbe\u3002\u81f3\u4e8e\u4ec0\u4e48\u662f\u53cd\u94fe\u6211\u4e5f\u4e0d\u77e5\u9053\uff0c\u53ef\u4ee5\u5bf9\u539f\u95ee\u9898\u5efa\u56fe\uff0c\u770b\u4f5c\u662f\u5e26\u4e0b\u754c\u6700\u5c0f\u53ef\u884c\u6d41\uff0c\u7b49\u4e8e\u603b\u6743\u503c-\u8d85\u7ea7\u6e90\u70b9\u5230\u8d85\u7ea7\u6c47\u70b9\u7684\u6700\u5927\u6d41\u3002\u53c8\u56e0\u4e3a\u6700\u5927\u6d41=\u6700\u5c0f\u5272\uff0c\u6700\u5c0f\u5272\u53ef\u4ee5\u770b\u4f5c\u662f\u4fdd\u7559\u4e00\u4e9b\u70b9\u51fa\u8fb9\u548c\u5165\u8fb9\u90fd\u4e0d\u5272\uff0c\u5269\u4e0b\u4e00\u90e8\u5206\u5272\u51fa\u8fb9\uff0c\u4e00\u90e8\u5206\u5272\u5165\u8fb9\u3002\u90fd\u4e0d\u5272\u7684\u70b9\u8981\u6c42\u4e0d\u80fd\u4e92\u76f8\u5230\u8fbe\uff0c\u6240\u4ee5\u5c31\u63a8\u51fa\u4e86\u7b54\u6848\u3002\n\n\u7136\u540e\u76f4\u63a5\u6811\u5f62 DP\u3002\u5bf9\u4e8e\u4e00\u68f5\u5b50\u6811\uff0c\u6734\u7d20 DP \u9700\u8981\u8bb0\u5f55\u4e24\u4e2a\u72b6\u6001\uff0c\u5206\u522b\u8868\u793a\u5176\u4ed6\u5730\u65b9\u6765\u7684\u9c7c\u6700\u65e9\u80fd\u5230\u6839\u7684\u4e0d\u80fd\u65e9\u4e8e\u67d0\u4e2a\u65f6\u523b\uff0c\u5b50\u6811\u5185\u6765\u7684\u9c7c\u6700\u65e9\u5230\u6839\u7684\u65f6\u523b\u3002\u5408\u5e76\u5b50\u6811\u7684\u8f6c\u79fb\u662f\u4e00\u4e2a\u533a\u95f4\u4ea4\uff0c\u5230\u7236\u4eb2\u7684\u8f6c\u79fb\u662f\u7ed9\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u6269\u5f20\u8fb9\u6743\u3002\u7136\u540e\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a $O(nt^2)$ \u7684\u7b97\u6cd5\u3002\u8fd9\u597d\u5417\uff0c\u8fd9\u4e0d\u597d\u3002\n\n\u6839\u636e\u533a\u95f4\u7684\u4e00\u4e9b\u6027\u8d28\uff0c\u6211\u4eec\u5f88\u96be\u60f3\u5230\u4f18\u5316\uff1a\u4e0d\u8bb0\u5f55\u533a\u95f4\u957f\u4ec0\u4e48\u6837\uff0c\u800c\u628a\u533a\u95f4\u62c6\u6210\u5f88\u591a\u4e2a\u70b9\uff0c\u5f53\u5f88\u591a\u4e2a\u533a\u95f4\u6709\u4ea4\u65f6\uff0c\u8d21\u732e\u5168\u90e8\u90fd\u5728\u4ea4\u70b9\u4e0a\u7edf\u8ba1\u3002\u81f3\u4e8e\u8fd9\u4e2a\u4ea4\u70b9\u53ef\u80fd\u5361\u5728\u4e24\u4e2a\u76f8\u90bb\u6574\u6570\u4e4b\u95f4\uff0c\u53ea\u9700\u8981\u628a\u6240\u6709\u65f6\u95f4\u548c\u8fb9\u6743\u4e58\u4e8c\u3002\u7136\u540e\u6211\u4eec\u53d1\u73b0\u5230\u7236\u4eb2\u7684\u8f6c\u79fb\u5c31\u662f $f'_ i$ \u53ef\u4ee5\u4ece $f_{[i-l,i+l]}$ \u4e2d\u9009\u4e00\u4e2a\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u8f6c\u79fb\u4e86\u3002\n\n\u5177\u4f53\u5730\uff0c\u6211\u4eec\u8bb0\u5f55 $f_{u,T}$ \u8868\u793a\u9009\u4e86 $u$ \u7684\u5b50\u6811\uff0c\u8fd8\u6ca1\u9009 $u$ \u4e0a\u7684\u9c7c\uff0c\u5e76\u4e14\u65f6\u523b $T$ \u6ee1\u8db3\u5b50\u6811\u5185\u4e0d\u80fd\u8d70\u5230 $(u,T)$ \u4e14 $(u,T)$ \u4e5f\u4e0d\u80fd\u8d70\u5230\u5b50\u6811\u5185\uff0c\u4e5f\u5c31\u662f $d+dis_v>T,T+dis_v>d$\u3002\u8003\u8651 $u$ \u5bf9\u7236\u4eb2\u7684\u8d21\u732e\u3002\n\n* \u5982\u679c\u4e0d\u9009 $u$ \u4e0a\u7684\u9c7c\uff0c\u90a3\u4e48\u6bcf\u4e2a\u503c\u53ef\u4ee5\u5411\u5de6\u53f3\u6269\u5f20 $l$ \u7684\u957f\u5ea6\u53d6\u6700\u5927\u503c\uff0c\u7136\u540e\u6309\u4f4d\u52a0\u5230\u7236\u4eb2\u7684 $f$ \u4e0a\u3002\n\n* \u5982\u679c\u9009\u4e86 $u$ \u4e0a\u7684\u9c7c\uff0c\u90a3\u4e48\u5b50\u6811\u5185\u7684\u8d21\u732e\u5fc5\u987b\u4e3a $f_{u,d}$\uff0c\u5176\u4e2d $d$ \u4e3a\u8fd9\u4e9b\u9c7c\u7684\u65f6\u95f4\uff0c\u5b83\u5bf9\u7236\u4eb2\u7684\u8d21\u732e\u4e3a\u5728\u5f00\u533a\u95f4 $(d-l,d+l)$ \u5185\u53ef\u4ee5\u52a0\u4e0a $f_{u,d}+fish$\u3002\n\n\u5bf9\u7236\u4eb2\u7684\u8d21\u732e\u4e3a\u4e0a\u9762\u8fd9\u4e24\u4e2a\u7684\u8f83\u5927\u503c\u3002\n\n\u4e8e\u662f\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u652f\u6301\u6269\u5f20 $k$ \u4f4d\u3001\u5c06\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u6309\u4f4d\u52a0\u3002\n\n\u6309\u4f4d\u52a0\u663e\u7136\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\u542f\u53d1\u5f0f\u5408\u5e76\u89e3\u51b3\u3002\u6269\u5f20 $k$ \u4f4d\u4f3c\u4e4e\u4e0d\u9002\u5408\u76f4\u63a5\u7ef4\u62a4\u533a\u95f4\uff0c\u5f88\u96be\u6253\u6807\u8bb0\u3002\u6240\u4ee5\u6211\u4eec\u7ef4\u62a4\u5dee\u5206\u6570\u7ec4\u3002\u6269\u5f20 $k$ \u4f4d\u65f6\uff0c\u5dee\u5206\u4e3a\u6b63\u6570\u7684\u5e94\u8be5\u5de6\u79fb $k$\uff0c\u5dee\u5206\u4e3a\u8d1f\u6570\u7684\u5e94\u8be5\u53f3\u79fb $k$\uff0c\u5982\u679c\u8d1f\u6570\u548c\u6b63\u6570\u7684\u5dee\u5206\u76f8\u649e\uff0c\u4f1a\u62b5\u6d88\u6389\u5176\u4e2d\u4e00\u4e2a\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u7ef4\u62a4\u6240\u6709\u8d1f\u6570\u548c\u6b63\u6570\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u7528\u5806\u4ece\u5c0f\u5230\u5927\u7ef4\u62a4\uff0c\u5982\u679c\u4ea7\u751f\u76f8\u649e\u5c31\u6d88\u6389\u3002\u6ce8\u610f\u8ddd\u79bb\u5e94\u8be5\u662f\u7ef4\u62a4\u6269\u5f20\u6807\u8bb0\u4e4b\u524d\u7684\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u52a0\u5165\u6807\u8bb0\u65f6\u5e94\u8be5\u6ee1\u8db3\u8ddd\u79bb $>2\\times tag$\uff0c\u6bcf\u6b21 $tag$ \u589e\u52a0\u65f6\u628a\u4e0d\u6ee1\u8db3\u7684\u6d88\u6389\u3002\n\n\u7136\u540e\u8003\u8651\u8f6c\u79fb\u5982\u4f55\u5b9e\u73b0\uff0c\u7531\u4e8e\u662f\u53d6\u4e24\u4e2a\u4e1c\u897f\u7684\u8f83\u5927\u503c\uff0c\u6211\u4eec\u80af\u5b9a\u4e0d\u80fd\u5206\u522b\u6c42\u51fa\u6765\u518d\u52a0\uff0c\u56e0\u4e3a\u7ef4\u62a4\u7684\u662f\u5dee\u5206\u3002\u6211\u4eec\u8003\u8651\u5148\u8ba9 $f_u$ \u6269\u5f20\u4e00\u683c\uff0c\u518d\u6269\u5f20 $l-1$ \u683c\u3002\u5728\u6269\u5f20\u524d\uff0c\u9884\u5904\u7406\u51fa\u9009\u9c7c\u4f7f\u5f97\u5f53\u524d\u5dee\u5206\u6570\u7ec4\u7684\u53d8\u5316\uff0c\u52a0\u5230\u6269\u5f20\u4e00\u683c\u540e\u7684\u6570\u636e\u7ed3\u6784\u91cc\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5355\u70b9\u53d6 $\\max$\u3002\u4f46\u662f\u7ef4\u62a4\u7684\u662f\u5dee\u5206\uff0c\u603b\u4e0d\u53ef\u80fd\u5199\u4e2a\u5e73\u8861\u6811\u6c42\u524d\u7f00\u548c\u5427\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u7b97\u5dee\u5206\u7684\u53d8\u5316\u3002\u5982\u679c\u539f\u6570\u7ec4\u5728\u4e0d\u9009\u9c7c\u7684\u60c5\u51b5\u4e0b\u6269\u5f20\u4e00\u683c\u5c31\u4f1a\u53d8\u5927\uff0c\u6211\u4eec\u7b97\u51fa\u4f1a\u53d8\u5927\u591a\u5c11\uff0c\u5982\u679c\u53d8\u5927\u7684\u503c\u6bd4\u9009\u9c7c\u53d8\u5927\u7684\u503c\u8981\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u62ff\u9009\u9c7c\u7684\u53d8\u5316\u51cf\u53bb\u539f\u672c\u7684\u53d8\u5316\uff0c\u66f4\u6539\u5230\u65b0\u7684\u5dee\u5206\u91cc\u3002\n\n\u5b8c\u7ed3\u6563\u82b1\uff5e~\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<map>\n#include<queue>\n#include<vector>\ntypedef long long ll;\nusing namespace std;\ntypedef pair<int,int> pr;\n#define mkp make_pair\nconst int MAXN=1e5+5;\nint n,m;\nint cnte,h[MAXN],to[MAXN<<1],nx[MAXN<<1],ww[MAXN<<1];\ninline void adde(int u,int v,int w){\n\tcnte++;\n\tnx[cnte]=h[u];\n\tto[cnte]=v;\n\tww[cnte]=w;\n\th[u]=cnte;\n}\nvector<pr> fish[MAXN];\nstruct Adj{\n\tint dis,l;\n};\nbool operator <(Adj a,Adj b){\n\treturn a.dis>b.dis;\n}\nstruct node{\n\tmap<int,int> a,b;\n\tint tag;\n\tpriority_queue<Adj> que;\n\tvoid Add(int x,int y){\n\t\tauto it1=a.find(x+tag),it2=b.find(x-tag);\n\t\tif(it1!=a.end()){\n\t\t\ta[x+tag]+=y;\n\t\t\treturn ;\n\t\t}\n\t\tif(it2!=b.end()){\n\t\t\tif(it2->second>y){\n\t\t\t\tb[x-tag]-=y;\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tif(it2->second==y){\n\t\t\t\tif(it2!=b.begin()){\n\t\t\t\t\tauto l=it2;\n\t\t\t\t\tl--;\n\t\t\t\t\tauto r=a.lower_bound(x+tag);\n\t\t\t\t\tif(r!=a.end()) que.push(Adj{r->first-l->first,l->first});\n\t\t\t\t}\n\t\t\t\tb.erase(it2);\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\ta[x+tag]=y-it2->second;\n\t\t\tif(it2!=b.begin()){\n\t\t\t\tauto l=it2;\n\t\t\t\tl--;\n\t\t\t\tque.push(Adj{x+tag-l->first,l->first});\n\t\t\t}\n\t\t\tb.erase(it2);\n\t\t\treturn ;\n\t\t}\n\t\ta[x+tag]=y;\n\t\tit2=b.lower_bound(x-tag);\n\t\tif(it2!=b.begin()){\n\t\t\tit2--;\n\t\t\tque.push(Adj{x+tag-it2->first,it2->first});\n\t\t}\n\t\treturn ;\n\t}\n\tvoid Sub(int x,int y){\n\t\tauto it1=a.find(x+tag),it2=b.find(x-tag);\n\t\tif(it2!=b.end()){\n\t\t\tb[x-tag]+=y;\n\t\t\treturn ;\n\t\t}\n\t\tif(it1!=a.end()){\n\t\t\tif(it1->second>y){\n\t\t\t\ta[x+tag]-=y;\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tif(it1->second==y){\n\t\t\t\tauto r=it1;\n\t\t\t\tr++;\n\t\t\t\tif(r!=a.end()){\n\t\t\t\t\tauto l=b.lower_bound(x-tag);\n\t\t\t\t\tif(l!=b.begin()){\n\t\t\t\t\t\tl--;\n\t\t\t\t\t\tque.push(Adj{r->first-l->first,l->first});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ta.erase(it1);\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tb[x-tag]=y-it1->second;\n\t\t\tauto r=it1;\n\t\t\tr++;\n\t\t\tif(r!=a.end())\n\t\t\t\tque.push(Adj{r->first-(x-tag),x-tag});\n\t\t\ta.erase(it1);\n\t\t\treturn ;\n\t\t}\n\t\tb[x-tag]=y;\n\t\tit1=a.lower_bound(x+tag);\n\t\tif(it1!=a.end())\n\t\t\tque.push(Adj{it1->first-(x-tag),x-tag});\n\t\treturn ;\n\t}\n\tvoid Move(int x){\n\t\ttag+=x;\n\t\twhile(!que.empty()){\n\t\t\tAdj t=que.top();\n\t\t\tif(t.dis>tag*2) break;\n\t\t\tque.pop();\n\t\t\tauto it1=b.find(t.l),it2=a.find(t.l+t.dis);\n\t\t\tif(it1==b.end()||it2==a.end()) continue;\n\t\t\tif(it1->second>it2->second){\n\t\t\t\tb[t.l]-=it2->second;\n\t\t\t\tauto r=it2;\n\t\t\t\tr++;\n\t\t\t\tif(r!=a.end())\n\t\t\t\t\tque.push(Adj{r->first-t.l,t.l});\n\t\t\t\ta.erase(it2);\n\t\t\t}else if(it1->second<it2->second){\n\t\t\t\ta[t.l+t.dis]-=it1->second;\n\t\t\t\tif(it1!=b.begin()){\n\t\t\t\t\tauto l=it1;\n\t\t\t\t\tl--;\n\t\t\t\t\tque.push(Adj{t.l+t.dis-l->first,l->first});\n\t\t\t\t}\n\t\t\t\tb.erase(it1);\n\t\t\t}else{\n\t\t\t\tb.erase(it1);\n\t\t\t\ta.erase(it2);\n\t\t\t\tit1=b.lower_bound(t.l);\n\t\t\t\tit2=a.lower_bound(t.l+t.dis);\n\t\t\t\tif(it1!=b.begin()&&it2!=a.end()){\n\t\t\t\t\tit1--;\n\t\t\t\t\tque.push(Adj{it2->first-it1->first,it1->first});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ;\n\t}\n\tint Query(int x){\n\t\tint res=0;\n\t\tauto it=b.find(x-tag);\n\t\tif(it!=b.end()) res=it->second;\n\t\tit=a.find(x+tag+1);\n\t\tif(it!=a.end()) res=max(res,it->second);\n\t\treturn res;\n\t}\n\tint Ans(){\n\t\tint res=0,sum=0;\n\t\tvector<pr> x;\n\t\tfor(auto i:a)\n\t\t\tx.emplace_back(i.first-tag,i.second);\n\t\tfor(auto i:b)\n\t\t\tx.emplace_back(i.first+tag,-i.second);\n\t\tsort(x.begin(),x.end());\n\t\tfor(auto i:x)\n\t\t\tres=max(res,sum+=i.second);\n\t\treturn res;\n\t}\n}f[MAXN];\nvoid Merge(node &a,node &b){\n\tif(a.a.size()+a.b.size()<b.a.size()+b.b.size()) swap(a,b);\n\tfor(auto i:b.a)\n\t\ta.Add(i.first-b.tag,i.second);\n\tfor(auto i:b.b)\n\t\ta.Sub(i.first+b.tag,i.second);\n\tpriority_queue<Adj> tmp;\n\tswap(tmp,b.que);\n\treturn ;\n}\nint fa[MAXN];\nvoid Dfs(int u){\n\tfor(int i=h[u]; i; i=nx[i]){\n\t\tint v=to[i];\n\t\tif(v==fa[u]) continue;\n\t\tfa[v]=u;\n\t\tDfs(v);\n\t\tf[v].Move(ww[i]-1);\n\t\tMerge(f[u],f[v]);\n\t}\n\tfor(int i=0; i<fish[u].size(); i++)\n\t\tfish[u][i].second-=f[u].Query(fish[u][i].first);\n\tf[u].Move(1);\n\tfor(auto i:fish[u])\n\t\tif(i.second>0) f[u].Add(i.first,i.second),f[u].Sub(i.first+1,i.second);\n\treturn ;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1; i<n; i++){\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tw<<=1;\n\t\tadde(u,v,w);\n\t\tadde(v,u,w);\n\t}\n\tscanf(\"%d\",&m);\n\twhile(m--){\n\t\tint d,f,p;\n\t\tscanf(\"%d%d%d\",&d,&f,&p);\n\t\tfish[p].emplace_back(d*2,f);\n\t}\n\tDfs(1);\n\tprintf(\"%d\\n\",f[1].Ans());\n\treturn 0;\n}\n```\n",
        "postTime": 1648699568,
        "uid": 116116,
        "name": "LZDQ",
        "ccfLevel": 0,
        "title": "CF1023G Pisces"
    }
]