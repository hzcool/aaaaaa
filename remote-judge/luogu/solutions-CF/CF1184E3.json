[
    {
        "content": "\u6ca1\u4eba\u53d1\u9898\u89e3\uff1f~~\uff08\u624d6\u4e2a\u4eba\u901a\u8fc7\u7684\u9898\u76ee\uff09~~\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1184E3)\n\n\u5206\u4e24\u79cd\u60c5\u51b5\u8003\u8651\u3002\n\n1. \u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff08\u4ee5\u4e0b\u7b80\u79f0\u975e\u6811\u8fb9\uff09\n2. \u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff08\u4ee5\u4e0b\u7b80\u79f0\u6811\u8fb9\uff09\n\n### \u7b2c\u4e00\u79cd\u60c5\u51b5\n\n\u975e\u6811\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u6784\u6210\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u3002\n\u5982\u4f55\u6c42\u5462\uff1f\n\nlca\u95ea\u4eae\u767b\u573a\uff01\uff01\uff01\n\n\u53ea\u8981\u7528lca\u6c42\u4e00\u4e0b\uff0c\u987a\u4fbf\u6c42\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u5c31\u597d\u4e86\u3002\u8be6\u7ec6\u8bf7\u89c1\u4ee3\u7801\u3002\n\n### \u7b2c\u4e8c\u79cd\u60c5\u51b5\n\n\u6211\u4eec\u53d1\u73b0\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f\u5224\u65ad\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\uff0c\u4e5f\u5c31\u662f\u6811\u8fb9\u4e0a\u7684\u4efb\u4f55\u4e00\u4e2a\u6743\u503c\u4e0d\u80fd\u5927\u4e8e\u4efb\u4f55\u975e\u6811\u8fb9\u7684\u6743\u503c **\uff08\u524d\u63d0\u662f\u8fd9\u6761\u6811\u8fb9\u5728\u975e\u6811\u8fb9\u6784\u6210\u7684\u8def\u5f84\u4e0a\uff09**\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5728\u7b97\u7b2c\u4e00\u79cd\u60c5\u51b5\u7684\u65f6\u5019\u5728\u8def\u5f84\u4e0a\u6bcf\u4e2a\u6811\u8fb9\u6253\u4e0a\u6807\u8bb0\uff0c\u7136\u540e\u8fd9\u79cd\u60c5\u51b5\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\u3002\n\n\u5982\u4f55\u6253\u6807\u8bb0\uff1f~~\u603b\u4e0d\u80fd\u66b4\u529b\u5427~~\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u53ef\u4ee5\u6309\u975e\u6811\u8fb9\u7684\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6253\u6807\u8bb0\uff0c\u5df2\u7ecf\u88ab\u6253\u8fc7\u6807\u8bb0\u7684\u8fb9\u5c31\u4e0d\u7528\u518d\u6253\u4e86\uff0c\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u3002\u5df2\u7ecf\u6253\u8fc7\u6807\u8bb0\u7684\u8fb9\u5c31\u53ef\u4ee5\u5f80\u4e0a\u5e76\u96c6\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5feb\u901f\u5730\u8df3\u8fc7\u5df2\u7ecf\u88ab\u6253\u8fc7\u6807\u8bb0\u7684\u8fb9\u4e86\u3002\u8be6\u7ec6\u8bf7\u89c1\u4ee3\u7801\u3002\n\ncode:\n\n```cpp\n#include <bits/stdc++.h> \nusing namespace std;\nconst int N = 100005, M = 1000005;\nint n, log2n, m;\nint fa[N]/*\u6700\u5c0f\u751f\u6210\u6811\u7684\u5e76\u67e5\u96c6*/, fa2[N]/*\u53e6\u4e00\u4e2a\u5e76\u67e5\u96c6*/, de[N]/*\u6df1\u5ea6*/, f[N][30]/*lca*/, g[N][30]/*lca\u5b58\u50a8\u7684\u6700\u5927\u503c*/;\nint nw[N];//\u6bcf\u6761\u6811\u8fb9\u7684\u6700\u5927\u503c\uff08\u5411\u4e0a\u7684\uff09\nstruct Edge{\n\tint u, v, w, i;\n\tbool operator < (const Edge &x) const{\n        return w < x.w;\n\t}\n}eg[M];//\u7528\u4f5c\u6392\u5e8f\u7684\u8fb9\nbool vis[M];\nvector<pair<int, int> > e[N];//\u6700\u5c0f\u751f\u6210\u6811\nvector<pair<int, int> > ans;//\u7b54\u6848\nint getfa(int x){\n\treturn (x == fa[x] ? x : fa[x] = getfa(fa[x]));\n}\nint getfa2(int x){\n\treturn (x == fa2[x] ? x : fa2[x] = getfa2(fa2[x]));\n}\nvoid dfs(int u, int fa){//\u6c42\u51faf[u][0],g[u][0],de\n\tf[u][0] = fa;\n\tfor (int i = 0; i < e[u].size(); i++){\n\t\tint v = e[u][i].first, w = e[u][i].second;\n\t\tif (v == fa) continue;\n\t\tde[v] = de[u]+1;\n\t\tg[v][0] = w;\n\t\tdfs(v, u);\n\t}\n}\npair<int, int> lca(int u, int v){//\u6700\u5927\u503c\uff0clca\n\tint res = -0x3f3f3f3f;\n\tif (de[u] < de[v]) swap(u, v);\n\tint k = de[u]-de[v];\n\tfor (int i = 0; k; k >>= 1, i++) if (k&1) res = max(g[u][i], res), u = f[u][i];\n\tif (u == v) return {res, u};\n\tfor (int i = log2n; i >= 0; i--) if (f[u][i] != f[v][i])\n\t\tres = max(max(g[u][i], g[v][i]), res), u = f[u][i], v = f[v][i];\n\treturn {max(res, max(g[u][0], g[v][0])), f[u][0]};\n}\nint main(){\n\tstd::ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n//\tfreopen(\"test_file/in.txt\", \"r\", stdin);\n//\tfreopen(\"test_file/out.out\", \"w\", stdout);\n\tcin >> n >> m;\n\tlog2n = log2(n);\n\tfor (int i = 1; i <= n; i++) fa[i] = i;\n\tfor (int i = 1; i <= m; i++){\n\t\tcin >> eg[i].u >> eg[i].v >> eg[i].w;\n\t\teg[i].i = i;\n\t}\n\tsort(eg+1, eg+1+m);\n\tfor (int i = 1; i <= m; i++){\n\t\tint u = eg[i].u, v = eg[i].v, w = eg[i].w;\n\t\tint uu = getfa(u), vv = getfa(v);\n\t\tif (uu != vv){\n\t\t\tfa[uu] = vv;\n\t\t\te[u].push_back({v, w});\n\t\t\te[v].push_back({u, w});\n\t\t\tvis[i] = 1;\n\t\t}\n\t}\n    //\u4ee5\u4e0a\u662f\u6700\u5c0f\u751f\u6210\u6811\n\tdfs(1, 0);\n\tfor (int j = 1; j <= log2n; j++)\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tf[i][j] = f[f[i][j-1]][j-1],\n\t\t\tg[i][j] = max(g[i][j-1], g[f[i][j-1]][j-1]);\n\tfor (int i = 1; i <= n; i++) fa2[i] = i, nw[i] = 1000000000;\n    //\u521d\u59cb\u5316\n\tfor (int i = 1; i <= m; i++){\n\t\tint u = eg[i].u, v = eg[i].v, w = eg[i].w;\n\t\tif (!vis[i]){//\u5982\u679c\u662f\u975e\u6811\u8fb9\n\t\t\tpair<int, int> tmp = lca(u, v);\n\t\t\tans.push_back({eg[i].i, tmp.first});\n\t\t\twhile (de[getfa2(u)] > de[tmp.second]){//\u4eceu\u5f00\u59cb\u5411\u4e0a\u6253\u6807\u8bb0\n\t\t\t\tint uu = getfa2(u);\n\t\t\t\tnw[uu] = w;\n\t\t\t\tfa2[uu] = getfa2(f[uu][0]);\n\t\t\t}\n\t\t\twhile (de[getfa2(v)] > de[tmp.second]){//\u4ecev\u5f00\u59cb\u5411\u4e0a\u6253\u6807\u8bb0\n\t\t\t\tint vv = getfa2(v);\n\t\t\t\tnw[vv] = w;\n\t\t\t\tfa2[vv] = getfa2(f[vv][0]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= m; i++){\n\t\tif (!vis[i]) continue;\n\t\tint u = eg[i].u, v = eg[i].v;\n\t\tif (de[u] < de[v]) swap(u, v);\n\t\tans.push_back({eg[i].i, nw[u]});//\u76f4\u63a5\u7528nw\n\t}\n\tsort(ans.begin(), ans.end());\n\tfor (int i = 0; i < ans.size(); i++) cout << ans[i].second << endl;\n\treturn 0;\n}\n```",
        "postTime": 1585979410,
        "uid": 171288,
        "name": "Tony2",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1184E3 \u3010Daleks' Invasion (hard)\u3011"
    },
    {
        "content": "[\u9898\u4f20](https://www.luogu.com.cn/problem/CF1184E3)\n\n~~\u4e09\u500d\u7ecf\u9a8c\uff0c\u592a\u723d\u4e86~~\n\n\u8ddf CF1023F \u5f88\u50cf\uff0c\u5982\u679c\u4e0d\u60f3\u518d\u505a\u53e6\u5916\u4e00\u9898\u73c2\u4ee5\u7b80\u5355\u770b\u4e00\u4e0b\u6211\u7684 [\u9898\u89e3](https://www.luogu.com.cn/blog/Tomori-Nao/CF1023F)\u3002\n\n\u540c\u6837\u7684\u601d\u8def\uff0c\u6211\u4eec\u5148\u628a\u6700\u5c0f\u751f\u6210\u6811\u5efa\u51fa\u6765\uff0c\u63a5\u4e0b\u6765\u7684\u8fb9\u5206\u4e3a\u4e24\u79cd\uff1a\n\n\n- \u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff1a\n\n\u8fd9\u4f3c\u4e4e\u662f\u4e2a\u7070\u5e38\u7ecf\u5178\u7684\u95ee\u9898\uff0c\u8fd9\u4e00\u6761\u8fb9\u4f1a\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u53ea\u9700\u8981\u67e5\u8be2\u73af\u4e0a\u7684\u6700\u5927\u503c\u5c31\u662f\u7b54\u6848\u3002\n\n- \u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff1a\n\n\u5176\u5b9e\u5c31\u662f\u53cd\u8fc7\u6765\u60f3\uff0c\u975e\u6811\u8fb9\u672c\u8eab\u7684\u9650\u5236\u5c31\u662f\u73af\u4e0a\u7684 $\\max \\le w$\uff0c\u6240\u4ee5\u5c31\u662f\u73af $(a, b)$ \u4e0a\u7684\u6240\u6709\u8fb9\u4e0d\u5f97\u8d85\u8fc7 $w$\uff0c\u76f4\u63a5\u7528\u6811\u5256 + \u7ebf\u6bb5\u6811\u5f04\u6389\u5c31\u884c\u4e86\u3002\n\n\u590d\u6742\u5ea6 $O(m \\log m + m\\log^2 n)$\u3002\n\n\n\u4f46\u662f\u7531\u4e8e\u6811\u5256\u5b9e\u5728\u592a\u81ed\u4e86\u4e0d\u60f3\u5199\uff0c\u600e\u4e48\u529e\uff1f\n\n\u5bf9\u4e8e\u975e\u6811\u8fb9\uff0c\u6539\u7528 ST \u8868\u52a0\u901f\uff0c\u590d\u6742\u5ea6 $O(n \\log n+m \\log n)$\u3002\n\n\u5bf9\u4e8e\u6811\u8fb9\uff0c\u6ce8\u610f\u5230\u82e5\uff08\u6309\u8fb9\u6743\u6392\u5e8f\u540e\uff09\u4e4b\u524d\u5df2\u7ecf\u6709\u4e00\u6761\u975e\u6811\u8fb9\u8986\u76d6\u4e86\u8fd9\u6761\u6811\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u5bf9\u4e0b\u4e00\u6761\u975e\u6811\u8fb9\u662f\u4e0d\u9700\u8981\u518d\u8986\u76d6\u4e00\u6b21\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u73c2\u4ee5\u76f4\u63a5\u8df3\u5230\u53e6\u4e00\u7aef\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u6bcf\u4e2a\u8fb9\u6700\u591a\u8986\u76d6\u4e00\u6b21\uff0c\u590d\u6742\u5ea6 $O(m+n\\alpha(n))$\u3002\n",
        "postTime": 1634621671,
        "uid": 341102,
        "name": "ReKoJ",
        "ccfLevel": 0,
        "title": "CF1184E3 Daleks' Invasion (hard)"
    },
    {
        "content": "\u6613\u3001\u4e2d\u3001\u96be\u4e09\u4e2a\u7248\u672c\u4e2d\uff0c\u4e3b\u8981\u662f\u8981\u61c2\u5f97\u5b8c\u6574\u96be\u7248\u7684\u505a\u6cd5\uff08\u53e6\u4e24\u9898\u7684\u505a\u6cd5\u4e5f\u4f1a\u63d0\u5230\uff09\n# easy version\n\u53ea\u8be2\u95ee $1$ \u6761\u8fb9\uff0c\u53ef\u4ee5\u4e8c\u5206\u8fd9\u6761\u8fb9\u7684\u503c\uff0c\u6bcf\u6b21\u68c0\u9a8c\u7528 $\\text{Kruskal}$ \u6700\u5c0f\u751f\u6210\u6811\u68c0\u9a8c\u3002\n\n\u6ce8\u610f\u8fd9\u91cc\u8fb9\u6392\u5e8f\u7684\u65b9\u5f0f\u5e94\u5f53\u662f\u4ee5\u8fb9\u6743\u5347\u5e8f\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4ee5\u8fb9\u7684\u7f16\u53f7\u5347\u5e8f\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u3002\n\n\u4f8b\u5982\u5b58\u5728\u8fb9 $(1,2,3),(1,3,4),(2,3,3)$\uff0c\u8fd9\u91cc\u7684\u7b2c\u4e00\u6761\u8fb9 $(1,2,3)$ \u5b58\u5728\u4e8e\u4e00\u79cd\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u4f46\u662f\u4e0d\u6309\u7167\u7f16\u53f7\u6392\u5e8f\u53ef\u80fd\u4f7f\u5f97\u6211\u4eec\u5f97\u5230\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u662f\u5305\u542b\u7b2c\u4e00\u6761\u8fb9\u7684\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(m\\log m\\log a)$\uff0c\u53ea\u4fee\u6539\u4e00\u6761\u8fb9\u6743\u503c\u6bcf\u6b21\u5192\u6ce1\u4e00\u4e0b\u4e5f\u53ef\u4ee5\u5feb\u4e00\u70b9\uff1f\n# medium version\n\u8be2\u95ee\u6240\u6709\u975e\u6811\u8fb9\u3002\n\n\u53ef\u4ee5\u753b\u51fa\u8fd9\u4e2a\u65e0\u5411\u56fe\u4ee5\u53ca\u5176\u6700\u5c0f\u751f\u6210\u6811\uff0c\u53d1\u73b0\u5f53\u6211\u4eec\u5c06\u4e00\u6761\u975e\u6811\u8fb9\u53d8\u6210\u6811\u8fb9\u65f6\uff0c\u5176\u4e0e\u6811\u5f62\u6210\u7684\u4e00\u4e2a\u73af\u5c31\u8981\u65ad\u5f00\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u5f53\u8fd9\u6761\u8fb9\u6743\u503c\u5927\u4e8e\u7b49\u4e8e\u975e\u6811\u8fb9\u6743\u503c\u65f6\uff0c\u4e5f\u5c31\u53ef\u4ee5\u66ff\u6362\u4e86\u3002\n\n\u4e8e\u662f\u5bf9\u4e8e\u975e\u6811\u8fb9\u8981\u67e5\u8be2\u7684\u662f\uff1a\u5176\u5728\u6811\u4e0a\u5bf9\u5e94\u7684\u8def\u5f84\u4e2d\u6743\u503c\u6700\u5927\u503c\u3002\n\n\u9759\u6001\u95ee\u9898\uff0c\u6811\u94fe\u5256\u5206 + $\\text{ST}$ \u8868\u5373\u53ef\u89e3\u51b3\u95ee\u9898\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(m\n\\log m+m\\log n)$\n# hard version\n\u57fa\u4e8e\u4e0a\u4e00\u9898\u7684\u505a\u6cd5\uff0c\u9700\u8981\u5904\u7406\u6811\u8fb9\u3002\n\n\u53d1\u73b0\u975e\u6811\u8fb9\u8981\u8003\u8651\u7684\u662f\u5bf9\u5e94\u6811\u4e0a\u8def\u5f84\u7684\u6811\u8fb9\uff0c\u90a3\u4e48\u6811\u8fb9\u8003\u8651\u7684\u5c31\u662f\u80fd\u8986\u76d6\u5b83\u7684\u975e\u6811\u8fb9\uff0c\u6362\u8a00\u4e4b\u662f\u4e0e\u5176\u5f62\u6210\u73af\u7684\u975e\u6811\u8fb9\u3002\n\n\u9700\u8981\u67e5\u8be2\uff1a\u4e0e\u8fd9\u6761\u6811\u8fb9\u80fd\u5f62\u6210\u73af\u7684\u975e\u6811\u8fb9\u4e2d\u7684\u6700\u5c0f\u503c\u3002\n\n\u533a\u95f4\u53d6 $\\min$ \u64cd\u4f5c\u662f\u5728\u9493\u9c7c\uff0c\u4e2d\u95f4\u4e0d\u67e5\u8be2\uff0c\u4e8e\u662f\u76f4\u63a5\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u6539\u6210\u533a\u95f4\u8d4b\u503c\uff0c\u7ebf\u6bb5\u6811\u89e3\u51b3\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(m\\log m+m\\log^2 n)$\n\n# \u672c\u9898\u4ee3\u7801\n\n```cpp\nint n,m;\nstruct SegmentTree{\n    #define mid ((l+r)>>1)\n    #define lson rt<<1,l,mid\n    #define rson rt<<1|1,mid+1,r\n    int val[maxn<<2];\n    void build(int rt,int l,int r){\n        val[rt]=-1;\n        if(l==r){\n            val[rt]=1e9;\n            return;\n        }\n        build(lson),build(rson);\n    }\n    inline void push_down(int rt){\n        if(val[rt]!=-1){\n            val[rt<<1]=val[rt<<1|1]=val[rt];\n            val[rt]=-1;\n        }\n    }\n    void update(int rt,int l,int r,int pl,int pr,int k){\n        if(pl<=l&&r<=pr){\n            val[rt]=k;\n            return;\n        }\n        push_down(rt);\n        if(pl<=mid) update(lson,pl,pr,k);\n        if(pr>mid) update(rson,pl,pr,k);\n    }\n    int query(int rt,int l,int r,int p){\n        if(l==r) return val[rt];\n        push_down(rt);\n        if(p<=mid) return query(lson,p);\n        else return query(rson,p);\n    }\n    #undef mid\n    #undef lson\n    #undef rson\n}S;\nstruct Tree{\n    struct G_Edge{\n        int u,v,w,id;\n        bool tag;\n    }GE[maxm];\n    int bel[maxn];\n    int find(int x){\n        if(x==bel[x]) return x;\n        else return bel[x]=find(bel[x]);\n    }\n    struct T_Edge{\n        int v,w;\n        T_Edge()=default;\n        T_Edge(int v_,int w_):v(v_),w(w_){}\n    };\n    vector<T_Edge> E[maxn];\n    inline void add_edge(int u,int v,int w){\n        E[u].push_back(T_Edge(v,w));\n    }\n    inline void Krusal(){\n        sort(GE+1,GE+m+1,[&](G_Edge x,G_Edge y){\n            return x.w<y.w;\n        });\n        for(int i=1;i<=n;++i) bel[i]=i;\n        int cnt=0;\n        for(int i=1;i<=m;++i){\n            int u=GE[i].u,v=GE[i].v,w=GE[i].w;\n            int fu=find(u),fv=find(v);\n            if(fu==fv) continue;\n            else{\n                bel[fv]=fu;\n                GE[i].tag=true;\n                add_edge(u,v,w);\n                add_edge(v,u,w);\n                // printf(\"%d<->%d %d\\n\",u,v,w);\n                ++cnt;\n                if(cnt==n-1) break;\n            }\n        }\n    }\n    int fa[maxn],dep[maxn],siz[maxn],son[maxn],val[maxn];\n    int top[maxn],dfn[maxn],dfncnt;\n    int mx[maxn][18];\n    int ans[maxm];\n    void dfs1(int u,int f,int d){\n        fa[u]=f,dep[u]=d,siz[u]=1;\n        int maxson=-1;\n        for(T_Edge e:E[u]){\n            int v=e.v,w=e.w;\n            if(v==f) continue;\n            val[v]=w;\n            dfs1(v,u,d+1);\n            siz[u]+=siz[v];\n            if(siz[v]>maxson) maxson=siz[v],son[u]=v;\n        }\n    }\n    void dfs2(int u,int t){\n        top[u]=t,dfn[u]=++dfncnt;\n        mx[dfn[u]][0]=val[u];\n        if(!son[u]) return;\n        dfs2(son[u],t);\n        for(T_Edge e:E[u]){\n            int v=e.v;\n            if(v==fa[u]||v==son[u]) continue;\n            dfs2(v,v);\n        }\n    }\n    inline void build_st(){\n        mx[1][0]=0;\n        for(int k=1;k<=17;++k){\n            for(int i=1;i+(1<<k)-1<=n;++i){\n                mx[i][k]=max(mx[i][k-1],mx[i+(1<<(k-1))][k-1]);\n            }\n        }\n    }\n    inline int query_st(int l,int r){\n        int k=log2(r-l+1);\n        return max(mx[l][k],mx[r-(1<<k)+1][k]);\n    }\n    inline int query(int u,int v){\n        int res=0;\n        while(top[u]!=top[v]){\n            if(dep[top[u]]>dep[top[v]]) swap(u,v);\n            res=max(res,query_st(dfn[top[v]],dfn[v]));\n            v=fa[top[v]];\n        }\n        if(dep[u]>dep[v]) swap(u,v);\n        if(u!=v) res=max(res,query_st(dfn[u]+1,dfn[v]));\n        return res;\n    }\n    inline void update(int u,int v,int k){\n        while(top[u]!=top[v]){\n            if(dep[top[u]]>dep[top[v]]) swap(u,v);\n            S.update(1,1,n,dfn[top[v]],dfn[v],k);\n            v=fa[top[v]];\n        }\n        if(dep[u]>dep[v]) swap(u,v);\n        if(u!=v) S.update(1,1,n,dfn[u]+1,dfn[v],k);\n    }\n    inline void solve(){\n        for(int i=1;i<=m;++i){\n            GE[i].u=read(),GE[i].v=read(),GE[i].w=read(),GE[i].id=i;\n            GE[i].tag=false;\n            ans[i]=1e9;\n        }\n        Krusal();\n        dfs1(1,0,0);\n        dfs2(1,1);\n        build_st();\n        S.build(1,1,n);\n        for(int i=1;i<=m;++i) ans[i]=1e9;\n        for(int i=m;i>=1;--i){\n            int u=GE[i].u,v=GE[i].v,w=GE[i].w,id=GE[i].id;\n            if(!GE[i].tag){\n                ans[id]=query(u,v);\n                update(u,v,w);\n            }\n        }\n        for(int i=1;i<=m;++i){\n            int u=GE[i].u,v=GE[i].v,w=GE[i].w,id=GE[i].id;\n            if(GE[i].tag){\n                if(dep[u]>dep[v]) swap(u,v);\n                ans[id]=S.query(1,1,n,dfn[v]);\n            }\n        }\n        for(int i=1;i<=m;++i) printf(\"%d\\n\",ans[i]);\n    }\n}T;\nint main(){\n    n=read(),m=read();\n    T.solve();\n    return 0;\n}\n```",
        "postTime": 1666767398,
        "uid": 321177,
        "name": "SoyTony",
        "ccfLevel": 6,
        "title": "CF\u9898\u89e3\u2014\u2014CF1184E Daleks' Invasion"
    }
]