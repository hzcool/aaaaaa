[
    {
        "content": "## $\\text{Description}$\n\u6709\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u54c8\u5229\u521d\u59cb\u5728\u7ed3\u70b9 $1$\uff0c\u54c8\u5229\u53ef\u4ee5\u6cbf\u7740\u8fb9\u4efb\u610f\u79fb\u52a8\uff0c\u8fc7\u7a0b\u4e2d\u4efb\u610f\u65f6\u523b\u53ef\u4ee5\u9009\u62e9\u4e00\u6761\u8fb9\uff0c\u6539\u53d8\u5b83\u7684**\u4e00\u4e2a\u7aef\u70b9**\uff0c\u4f46\u662f\u6bcf\u6761\u8fb9\u53ea\u80fd\u88ab\u4fee\u6539\u4e00\u6b21.    \n\u8bf7\u6784\u9020\u4e00\u79cd\u65b9\u6848\u4f7f\u54c8\u5229\u8d70\u904d\u6240\u6709\u697c\u5c42\uff0c\u6216\u8005\u62a5\u544a\u65e0\u89e3.  \n$n\\le 10^5,m\\le 2\\times10^5$\n## $\\text{Solution}$\n\u9634\u95f4\u5927\u7279\u5224\u9898.   \n\u5bb9\u6613\u627e\u5230\u4e00\u79cd\u6bd4\u8f83\u6b63\u786e\u7684\u6574\u4f53\u65b9\u6848\uff1adfs\uff0c\u8fc7\u7a0b\u4e2d\u2014\u2014\n1. \u82e5\u51fa\u8fb9\u8fde\u5411\u8d70\u8fc7\u7684\u7ed3\u70b9\uff0c\u5219\u76f4\u63a5\u628a\u8fb9\u6539\u5411\u4e00\u4e2a\u672a\u8d70\u8fc7\u7684\u7ed3\u70b9\uff0c\u9012\u5f52 dfs.\n2. \u82e5\u51fa\u8fb9\u8fde\u5411\u672a\u8d70\u8fc7\u7684\u7ed3\u70b9\uff0c\u5219\u5148\u9012\u5f52 dfs\uff0c\u56de\u6eaf\u65f6\u5728\u628a\u8fb9\u6539\u5411\u4e00\u4e2a\u672a\u8d70\u8fc7\u7684\u7ed3\u70b9\uff0c\u9012\u5f52 dfs.\n\n\u4e0d\u96be\u53d1\u73b0\u8fd9\u6837\u4e00\u5b9a\u662f\u6700\u4f18\u7684.  \n\u7136\u540e\u5c31\u662f ~~\u901a\u8fc7\u89c2\u5bdf WA \u7684\u6570\u636e~~ \u5904\u7406\u4ebf\u70b9\u70b9\u7ec6\u8282\u95ee\u9898\uff1a  \n1. \u6539\u8fb9\u8fde\u5411\u7684\u70b9\u5e94\u8be5\u4f18\u5148\u8fde\u5411**\u6709\u5ea6\u6570\u7684\u70b9**.\n2. \u6709\u53ef\u80fd\u4f1a\u51fa\u73b0 $1$ \u6ca1\u6709\u5ea6\u6570\u4f46\u5b58\u5728\u89e3\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u5c1d\u8bd5\u628a\u4e00\u6761\u8fb9\u76f4\u63a5\u6539\u4e3a\u8fde\u5411 $1$\uff0c\u540c\u65f6\u8fd9\u4e2a\u8fb9\u4e0d\u5e94\u8be5\u662f\u4e00\u6761\u8fb9\u8fde\u63a5\u4e24\u4e2a\u70b9\u7684\u7b80\u5355\u56fe\u5f62.\uff08\u5426\u5219\u6539\u5b8c\u8fd8\u662f\u4f1a\u6b7b\u6389\uff09\n3. \u6539\u4e3a\u8fde\u5411 $1$ \u7684\u8fb9\u5e94\u8be5\u4f18\u5148\u9009\u62e9\u6210\u73af\u7684\u8fb9\uff0c\u8fd9\u6837\u4f1a\u66f4\u4f18.\n\n\n\u5177\u4f53\u5b9e\u73b0\u7559\u7ed9\u8bfb\u8005\u81ea\u884c\u601d\u8003.\uff08\u6216\u8005\u53c2\u8003\u6211\u5b9e\u73b0\u4e11\u7684\u4e00\u6279\u7684\u4ee3\u7801\uff09\n## $\\text{Code}$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define double long double \n#define ull unsigned long long\n#define debug(...) fprintf(stderr,__VA_ARGS__)\nconst int N=4e5+100;\nconst double eps=1e-12;\ninline ll read(){\n  ll x(0),f(1);char c=getchar();\n  while(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n  while(isdigit(c)){x=(x<<1)+(x<<3)+c-'0';c=getchar();}\n  return x*f;\n}\n\nint n,m;\nstruct node{\n  int to,nxt;\n}p[N<<1];\nint fi[N],cnt;\ninline void addline(int x,int y){\n  p[++cnt]=(node){y,fi[x]};fi[x]=cnt;\n  return;\n}\nint jd[N],du[N];\nset<int>s1,s2;\nint dfn[N<<2],tim,tot;\nstruct edge{\n  int x,y,id;\n}e[N];\nint siz[N];\nint ans[N],num;\nint flag,O,ID;\nvoid print(){\n  int pl(1);\n  if(!O) flag=0;\n  printf(\"YES\\n%d\\n\",tot+flag);\n  for(int i=1;i<=tim+1;i++){\n    if(dfn[i]) ans[++num]=dfn[i];\n    else{\n      printf(\"%d \",num);\n      for(int j=1;j<=num;j++) printf(\"%d \",ans[j]);\n      putchar('\\n');   \n      num=0;\n      if(pl<=tot){\n\tprintf(\"%d %d %d\\n\",e[pl].id,e[pl].x,e[pl].y);   \n\t++pl;\n      }\n    }\n    if(i==1&&flag){\n      printf(\"1 1\\n%d %d 1\\n\",ID,O);num=0;\n    }\n  }\n  return;\n}\nint fa[N];\nvector<int> v[N];\nint find(int x){return x==fa[x]?x:fa[x]=find(fa[x]);}\nbool vis[N];\nvoid dfs(int x){\n  dfn[++tim]=x;vis[x]=1;\n  for(int i=fi[x];~i;i=p[i].nxt){\n    if(jd[i]==1) continue;\n    int f=jd[i];\n    jd[i]=jd[i^1]=1;\n    int to=p[i].to;\n    //printf(\"x=%d to=%d\\n\",x,to);\n    dfs(to);\n    dfn[++tim]=x;\n    if((!s1.empty()||!s2.empty())&&!f){\n      int o;\n      if(!s1.empty()) o=(*s1.begin()),s1.erase(o);\n      else o=(*s2.begin()),s2.erase(o);\n      //printf(\"x=%d o=%d\\n\",x,o);\n      dfn[++tim]=0;e[++tot]=(edge){x,o,i/2+1};\n      dfs(o);\n      dfn[++tim]=x;\n    }\n  }\n  return;\n}\nint E;\nsigned main(){\n#ifndef ONLINE_JUDGE\n  freopen(\"a.in\",\"r\",stdin);\n  freopen(\"a.out\",\"w\",stdout);\n#endif\n  memset(fi,-1,sizeof(fi));cnt=-1;  \n  n=read();m=read();\n  for(int i=1;i<=n;i++) fa[i]=i;\n  for(int i=1;i<=m;i++){\n    e[i].x=read();e[i].y=read();\n    ++du[e[i].x];++du[e[i].y];\n    if(find(e[i].x)==find(e[i].y)){\n      E=i;\n    }\n    else fa[find(e[i].x)]=find(e[i].y);\n  }\n  if(du[1]==0){\n    flag=1;\n    if(E){\n      e[E].y=1;O=e[E].x;ID=E;\n    }\n    else{\n      for(int i=1;i<=m;i++){\n\tif(du[e[i].x]<=1) swap(e[i].x,e[i].y);\n\tif(du[e[i].x]>1){\n\t  e[i].id=1;O=e[i].x;ID=i;\n\t  e[i].y=1;break;\n\t}\n      }\n    }\n  }\n  memset(du,0,sizeof(du));\n  for(int i=1;i<=n;i++) fa[i]=i;\n  for(int i=1;i<=m;i++){\n    int x=e[i].x,y=e[i].y;\n    addline(x,y);addline(y,x);\n    fa[find(x)]=find(y);\n    ++du[x];++du[y];\n    if(e[i].id) jd[cnt]=jd[cnt^1]=2;\n  }\n  //for(int i=1;i<=n;i++) debug(\"i=%d fa=%d\\n\",i,fa[i]);\n  for(int i=2;i<=n;i++){\n    if(i==find(i)&&find(1)!=i){\n      if(du[i]) s1.insert(i);\n      else s2.insert(i);\n    }\n  }\n  dfs(1);\n  if(!s1.empty()||!s2.empty()) printf(\"NO\\n\");\n  else print();\n  return 0;\n}\n/*\n\n*/\n\n```\n",
        "postTime": 1639378043,
        "uid": 449265,
        "name": "wind_whisper",
        "ccfLevel": 10,
        "title": "CF65E Harry Potter and Moving Staircases"
    }
]