[
    {
        "content": "# \u3010CF487E\u3011Tourists  \u9898\u89e3\n\n\u4e4b\u524dWC\u7684\u65f6\u5019\u592a\u8822\u4e86\uff0c\u6ca1\u542c\u61c2\u5706\u65b9\u6811\uff0c\u4e00\u76f4\u611f\u89c9\u662f\u795e\u4ed9\u4e1c\u897f\uff0c\u76f4\u5230\u505a\u4e86\u8fd9\u9053\u9898\uff0c\u624d\u5bf9\u5706\u65b9\u6811\u7a0d\u6709\u4e86\u4e00\u4e9b\u611f\u89c9\n\n\u5706\u65b9\u6811\u662f\u8fd9\u6837\u7684\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u6c42\u51fa\u5b83\u7684\u6240\u6709\u70b9-\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u53cc\u65b0\u5efa\u4e00\u4e2a\u70b9\uff0c\u79f0\u4e4b\u4e3a\u201c\u65b9\u70b9\u201d\uff0c\u7136\u540e\u539f\u56fe\u7684\u70b9\u79f0\u4e4b\u4e3a\u201c\u5706\u70b9\u201d\uff0c\u6bcf\u4e2a\u5706\u70b9\u5411\u5b83\u6240\u5728\u70b9\u53cc\u5bf9\u5e94\u7684\u65b9\u70b9\u8fde\u8fb9\uff08\u6ce8\u610f\uff1a\u4e00\u4e2a\u70b9\u53ef\u80fd\u5c5e\u4e8e\u591a\u4e2a\u70b9\u53cc\uff0c\u56e0\u6b64\u4e00\u4e2a\u5706\u70b9\u9700\u8981\u5411\u591a\u4e2a\u65b9\u70b9\u8fde\u8fb9\uff09\uff0c\u5efa\u51fa\u4e00\u4e2a\u65b0\u7684\u56fe\u3002\u8fd9\u4e2a\u65b0\u56fe\u6ee1\u8db3\uff1a\u5b83\u662f\u4e00\u68f5\u6811\uff0c\u5b83\u6700\u591a\u53ea\u67092n-1\u4e2a\u70b9(n\u662f\u539f\u56fe\u70b9\u6570)\uff0c\u6240\u6709\u7684\u5706\u70b9\u53ea\u4e0e\u65b9\u70b9\u76f8\u90bb\u3001\u6240\u6709\u7684\u65b9\u70b9\u53ea\u4e0e\u5706\u70b9\u76f8\u90bb\uff08\u201c\u76f8\u90bb\u201d\u5b9a\u4e49\u4e3a\u67d0\u4e24\u4e2a\u70b9\u6709\u4e00\u6761\u8fb9\u76f4\u63a5\u8fde\u63a5\uff09\n\n\u8fd9\u4e2a\u9898\u548c\u5706\u65b9\u6811\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\n\n\u4e00\u4e2a\u975e\u5e38\u663e\u7136\u7684\u4e8b\u5b9e\u5c31\u662f\uff1a\u5f53\u4f60\u5230\u8fbe\u4e00\u4e2a\u70b9\u53cc\u65f6\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u6761\u7b80\u5355\u8def\u5f84\uff0c\u4ece\u5916\u90e8\u8fdb\u5165\u8fd9\u4e2a\u70b9\u53cc\uff0c\u7136\u540e\u7ecf\u8fc7\u70b9\u53cc\u91cc\u9762\u7684\u6743\u503c\u6700\u5c0f\u70b9\uff0c\u7136\u540e\u518d\u8d70\u51fa\u8fd9\u4e2a\u70b9\u53cc\u3002\u6240\u4ee5\u4e00\u4e2a\u70b9\u53cc\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5fc5\u7136\u662f\u70b9\u53cc\u91cc\u9762\u7684\u6700\u5c0f\u6743\u503c\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u5706\u65b9\u6811\uff0c\u65b9\u70b9\u7684\u6743\u503c\u4e3a\u70b9\u53cc\u4e2d\u7684\u6700\u5c0f\u5706\u70b9\u6743\u503c\u3002\u7136\u540e\u539f\u56fe\u5c31\u53d8\u6210\u4e86\u4e00\u68f5\u6811\uff0c\u8be2\u95ee\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u6811\u5256\u5957\u7ebf\u6bb5\u6811\u6c42\u8def\u5f84\u6700\u5c0f\u503c\u4e86\n\n\u4f46\u662f\u4fee\u6539\u64cd\u4f5c\u4f3c\u4e4e\u5e76\u4e0d\u662f\u975e\u5e38\u65b9\u4fbf\u3002\u56e0\u4e3a\u4e00\u4e2a\u5706\u70b9\u7684\u6743\u503c\u53d8\u52a8\uff0c\u53ef\u80fd\u4f1a\u5f15\u53d1\u4e0e\u4e4b\u76f8\u8fde\u7684\u65b9\u70b9\u6743\u503c\u53d8\u52a8\uff08\u5f53\u8fd9\u4e2a\u5706\u70b9\u662f\u70b9\u53cc\u4e2d\u7684\u7684\u6700\u5c0f\u6743\u503c\u70b9\u65f6\u4f1a\u53d1\u751f\u8fd9\u4ef6\u4e8b\u60c5\uff09\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u65b9\u70b9\u7ef4\u62a4\u4e00\u4e2amultiset\uff0c\u91cc\u9762\u5b58\u6240\u6709\u4e0e\u4e4b\u76f8\u90bb\u7684\u5706\u70b9\u6743\u503c\uff0c\u7136\u540e\u6743\u503c\u5c31\u662fmultiset\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u6bcf\u6b21\u4fee\u6539\u5c31\u5220\u6389\u539f\u6765\u7684\u6743\u503c\uff0c\u63d2\u5165\u65b0\u7684\u6743\u503c\u3002\u7136\u540e\u6211\u4eec\u6bcf\u4fee\u6539\u4e00\u4e2a\u5706\u70b9\u7684\u6743\u503c\uff0c\u6211\u4eec\u5c31\u904d\u5386\u4e0e\u4e4b\u76f8\u90bb\u7684\u6240\u6709\u65b9\u70b9\u5e76\u6309\u4e0a\u8ff0\u65b9\u6cd5\u4fee\u6539multiset\n\n\u4f46\u8fd9\u6837\u662f\u4f1a\u88ab\u83ca\u82b1\u56fe\u5361\u6210n\u65b9\u7684\u3002\u56e0\u4e3a\u83ca\u82b1\u56fe\u7684\u6839\u8282\u70b9\uff0c\u6709n-1\u4e2a\u65b9\u70b9\u4e0e\u4e4b\u76f8\u90bb\uff0c\u6bcf\u6b21\u4fee\u6539\u90fd\u904d\u5386\u4e00\u904d\u7684\u8bdd\uff0c\u5c31GG\u4e86\n\n\u4e8e\u662f\u4e00\u4f4d\u5de8\u4f6c\u544a\u8bc9\u4e86\u6211\u66f4\u52a0\u4f18\u79c0\u7684\u65b9\u6cd5\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u65b9\u70b9\uff0cmultiset\u91cc\u9762\u5b58\u5b83\u6240\u6709\u5b50\u8282\u70b9\u7684\u6743\u503c\u3002\u7136\u540e\u4fee\u6539\u4e00\u4e2a\u5706\u70b9\u65f6\uff0c\u5c31\u53ea\u9700\u8981\u52a8\u5b83\u7236\u4eb2\u7684multiset\uff08\u5b83\u7684\u7236\u4eb2\u5fc5\u7136\u662f\u4e00\u4e2a\u65b9\u70b9\uff09\u3002\u8be2\u95ee\u65f6\uff0c\u4ecd\u7136\u53ef\u4ee5\u6b63\u5e38\u8be2\u95ee\uff0c\u53ea\u4e0d\u8fc7\u5982\u679clca\u662f\u4e00\u4e2a\u65b9\u70b9\uff0c\u90a3\u8fd8\u8981\u989d\u5916\u8ba1\u7b97fa[lca]\u7684\u6743\u503c\u5bf9\u7b54\u6848\u7684\u8d21\u732e\n\n\u5177\u4f53\u5b9e\u73b0\u9700\u8981\u7528Tarjan\u6c42\u4e00\u4e0b\u70b9\u53cc\uff0c\u7136\u540e\u8fd8\u8981\u4e00\u68f5\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u7684\u7ebf\u6bb5\u6811\uff0c\u4ee5\u53caSTL\u7684multiset\n\n```cpp\n#include<bits/stdc++.h>\n#define INF 0x7f7f7f7f\nusing namespace std;\n\nnamespace IO\n{\n\tconst int S=(1<<20)+5;\n\t//Input Correlation\n\tchar buf[S],*H,*T;\n\tinline char Get()\n\t{\n\t\tif(H==T) T=(H=buf)+fread(buf,1,S,stdin);\n\t\tif(H==T) return -1;return *H++;\n\t}\n\tinline int read()\n\t{\n\t\tint x=0;char c=Get();\n\t\twhile(!isdigit(c)) c=Get();\n\t\twhile(isdigit(c)) x=x*10+c-'0',c=Get();\n\t\treturn x;\n\t}\n\t//Output Correlation\n\tchar obuf[S],*oS=obuf,*oT=oS+S-1,c,qu[55];int qr;\n\tinline void flush(){fwrite(obuf,1,oS-obuf,stdout);oS=obuf;}\n\tinline void putc(char x){*oS++ =x;if(oS==oT) flush();}\n\ttemplate <class I>inline void print(I x)\n\t{\n\t\tif(!x) putc('0');\n\t\tif(x<0) putc('-'),x=-x;\n\t\twhile(x) qu[++qr]=x%10+'0',x/=10;\n\t\twhile(qr) putc(qu[qr--]);\n\t\tputc('\\n');\n\t}\n}\nusing namespace IO;\n\ninline void upmin(int &x,const int &y){if(y<x) x=y;}\n\nconst int N=100010;\nint val[N<<1],n,m,q,tot;\nmultiset<int> st[N];\n\nnamespace TCD\n{\n\tconst int N=200010;\n\tstruct Edge{int to,next;} e[N<<1];\n\tint h[N],sum=0;\n\tint fa[N],top[N],hson[N];\n\tint size[N],dep[N];\n\tint dfn[N],idx[N],clk=0;\n\tint mn[N<<2];\n\t\n\tvoid AddEdge(int u,int v)\n\t{\n\t\te[++sum].to=v;\n\t\te[sum].next=h[u];\n\t\th[u]=sum;\n\t}\n\tvoid add_edge(int u,int v)\n\t{\n\t\tAddEdge(u,v);\n\t\tAddEdge(v,u);\n\t}\n\t\n\tvoid dfs1(int u,int la)\n\t{\n\t\tsize[u]=1;int mx=0;\n\t\tfor(int tmp=h[u];tmp;tmp=e[tmp].next)\n\t\t{\n\t\t\tint v=e[tmp].to;\n\t\t\tif(v==la) continue;\n\t\t\tdep[v]=dep[u]+1;\n\t\t\tdfs1(v,u);fa[v]=u;\n\t\t\tsize[u]+=size[v];\n\t\t\tif(size[v]>mx) mx=size[v],hson[u]=v;\n\t\t}\n\t}\n\t\n\tvoid dfs2(int u,int tp)\n\t{\n\t\ttop[u]=tp;idx[dfn[u]=++clk]=u;\n\t\tif(hson[u]) dfs2(hson[u],tp);\n\t\tfor(int tmp=h[u];tmp;tmp=e[tmp].next)\n\t\t\tif(e[tmp].to!=fa[u]&&e[tmp].to!=hson[u])\n\t\t\t\tdfs2(e[tmp].to,e[tmp].to);\n\t}\n\t\n\tinline void maintain(int o){mn[o]=min(mn[o<<1],mn[o<<1|1]);}\n\t\n\tvoid Build(int o,int l,int r)\n\t{\n\t\tif(l==r){mn[o]=val[idx[l]];return;}\n\t\tint mid=(l+r)/2;\n\t\tBuild(o<<1,l,mid);\n\t\tBuild(o<<1|1,mid+1,r);\n\t\tmaintain(o);\n\t}\n\t\n\tvoid Modify(int o,int l,int r,int k,int x)\n\t{\n\t\tif(l==r){mn[o]=x;return;}\n\t\tint mid=(l+r)/2;\n\t\tif(k<=mid) Modify(o<<1,l,mid,k,x);\n\t\telse Modify(o<<1|1,mid+1,r,k,x);\n\t\tmaintain(o);\n\t}\n\t\n\tint Query(int o,int l,int r,int nl,int nr)\n\t{\n\t\tif(l>=nl&&r<=nr) return mn[o];\n\t\tint mid=(l+r)/2,res=INF;\n\t\tif(nl<=mid) upmin(res,Query(o<<1,l,mid,nl,nr));\n\t\tif(nr>mid) upmin(res,Query(o<<1|1,mid+1,r,nl,nr));\n\t\treturn res;\n\t}\n\t\n\tint PathQuery(int u,int v)\n\t{\n\t\tint res=INF;\n\t\twhile(top[u]!=top[v])\n\t\t{\n\t\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\t\tupmin(res,Query(1,1,tot,dfn[top[u]],dfn[u]));\n\t\t\tu=fa[top[u]];\n\t\t}\n\t\tif(dep[u]>dep[v]) swap(u,v);\n\t\tupmin(res,Query(1,1,tot,dfn[u],dfn[v]));\n\t\tif(u>n) upmin(res,val[fa[u]]);\n\t\treturn res;\n\t}\n}\n\nnamespace Graph\n{\n\tstruct Edge{int to,next;} e[N<<1];\n\tint h[N],sum=0;\n\tint pre[N],low[N],dfn=0;\n\tint bcc[N];\n\tstack<int> stk;\n\t\n\tvoid add_edge(int u,int v)\n\t{\n\t\te[++sum].to=v;\n\t\te[sum].next=h[u];\n\t\th[u]=sum;\n\t}\n\t\n\tvoid Tarjan(int u)\n\t{\n\t\tpre[u]=low[u]=++dfn;stk.push(u);\n\t\tfor(int tmp=h[u];tmp;tmp=e[tmp].next)\n\t\t{\n\t\t\tint v=e[tmp].to;\n\t\t\tif(!pre[v])\n\t\t\t{\n\t\t\t\tTarjan(v);\n\t\t\t\tupmin(low[u],low[v]);\n\t\t\t\tif(low[v]>=pre[u])\n\t\t\t\t{\n\t\t\t\t\tint o;tot++;\n\t\t\t\t\tdo{\n\t\t\t\t\t\to=stk.top();\n\t\t\t\t\t\tstk.pop();\n\t\t\t\t\t\tbcc[o]=tot;\n\t\t\t\t\t\tTCD::add_edge(o,tot);\n\t\t\t\t\t}while(o!=v);\n\t\t\t\t\tTCD::add_edge(u,tot);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse upmin(low[u],pre[v]);\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint u,v;\n\ttot=n=read();m=read();q=read();\n\tfor(int i=1;i<=n;i++) val[i]=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tu=read();v=read();\n\t\tGraph::add_edge(u,v);\n\t\tGraph::add_edge(v,u);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(!Graph::pre[i]) Graph::Tarjan(i);\n\tTCD::dfs1(1,0);\n\tTCD::dfs2(1,1);\n\tfor(int i=2;i<=n;i++)\n\t\tst[TCD::fa[i]-n].insert(val[i]);\n\tfor(int i=n+1;i<=tot;i++)\n\t\tval[i]=st[i-n].empty()?INF:*st[i-n].begin();\n\tTCD::Build(1,1,tot);\n\twhile(q--)\n\t{\n\t\tchar opt=Get();\n\t\twhile(opt!='C'&&opt!='A') opt=Get();\n\t\tu=read();v=read();\n\t\tif(opt=='C')\n\t\t{\n\t\t\tTCD::Modify(1,1,tot,TCD::dfn[u],v);\n\t\t\tif(u==1){val[u]=v;continue;}\n\t\t\tint o=TCD::fa[u];\n\t\t\tst[o-n].erase(st[o-n].find(val[u]));\n\t\t\tst[o-n].insert(v);\n\t\t\tint minv=*st[o-n].begin();\n\t\t\tif(minv==val[o]){val[u]=v;continue;}\n\t\t\tTCD::Modify(1,1,tot,TCD::dfn[o],minv);\n\t\t\tval[o]=minv;val[u]=v;\n\t\t}\n\t\telse print(TCD::PathQuery(u,v));\n\t}\n\tflush();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1535285654,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF487E \u3010Tourists\u3011"
    },
    {
        "content": "\u9996\u5148\u5410\u69fd\u4e00\u4e0b\uff1a\u8fd9\u9898\u786e\u5b9e\u662f\u4e00\u9053\u5f88\u597d\u7684\u5706\u65b9\u6811\u6a21\u677f\u9898\uff0c\u611f\u89c9\u505a\u5b8c\u8fd9\u9898\u540e\u5bf9\u5706\u65b9\u6811\u7684\u7406\u89e3\u6df1\u4e86\u5f88\u591a\u3002\n\n***\n\u597d\u4e86\uff0c\u8fdb\u5165\u6b63\u9898:\n\n## \u4e00\u3001\u524d\u7f6e\u77e5\u8bc6\n\t1.\u7ebf\u6bb5\u6811\n    2.\u6811\u5256\n    3.tarjan\u627e\u70b9\u53cc\n\u5982\u679c\u4e0d\u4f1a\u8fd9\u4e9b\u8bf7\u81ea\u89c9\u53bb\u5b66\u3002\n\n## \u4e8c\u3001\u5e7f\u4e49\u5706\u65b9\u6811\n\t\u5148\u642c\u4e00\u5f20\u4ece\u7f51\u4e0a\u627e\u6765\u7684\u56fe\uff1a\n   \n   ![yfs.png](https://i.loli.net/2019/08/28/TLQl6MomwXPfVGO.png)\n\n\u662f\u4e0d\u662f\u770b\u4e0d\u61c2\uff1f\n\n\u89e3\u91ca\u4e00\u4e0b\uff1a\u4e0a\u56fe\u5c31\u662f\u5728\u7b80\u5355\u65e0\u5411\u56fe\u4e2d\u5efa\u7acb\u5e7f\u4e49\u5706\u65b9\u6811\u7684\u8fc7\u7a0b\u3002\n### \u6b65\u9aa4\n\t1.tarjan\u627e\u51fa\u6240\u6709\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u5e76\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u5efa\u7acb\u65b9\u70b9\n    2.\u5728\u65b0\u7684\u56fe\u4e2d\u628a\u65b9\u70b9\u548c\u4e0e\u5b83\u5bf9\u5e94\u7684\u70b9\u53cc\u4e2d\u7684\u6240\u6709\u5706\u70b9\u8fde\u8fb9\n\n## \u4e09\u3001\u672c\u9898\u89e3\u6cd5\n\u8fd9\u9898\u5f88\u660e\u663e\u662f\u4e00\u9053\u5706\u65b9\u6811\u9898\u3002\n    \n\u4e00\u770b\u5230\u6240\u6709\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u5148\u5efa\u5e7f\u4e49\u5706\u65b9\u6811\uff0c\u518d\u7528\u6811\u5256+\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u7531\u4e8e\u6c42\u7684\u662f\u6700\u5c0f\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u65b9\u70b9\u7684\u70b9\u6743\u8bbe\u7f6e\u6210\u5468\u56f4\u6240\u6709\u5706\u70b9\u7684\u6700\u5c0f\u503c\u3002\n\n### \u7136\u800c\u4fee\u6539\u5462\uff1f\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u5efa\u5b8c\u6811\u540e\u662f\u4e00\u4e2a\u83ca\u82b1\u5957\u83ca\u82b1\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\uff0c\u5728\u4fee\u6539\u67d0\u4e00\u4e2a\u7279\u5b9a\u7684\u70b9\u7684\u65f6\u5019\uff0c\u5b83\u5468\u56f4\u7684\u65b9\u70b9\u4e5f\u90fd\u8981\u88ab\u4fee\u6539\uff0c\u8fd9\u6837\u5c31\u5bb9\u6613\u88ab\u5361\u6210$\\Theta(nq)$\uff0c$\\color{darkblue}\\texttt{TLE}$\u4e86\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5706\u65b9\u6811\u662f\u4e00\u68f5\u6811\u7684\u6027\u8d28\uff0c\u628a\u6bcf\u4e2a\u65b9\u70b9\u7684\u6743\u503c\u8bbe\u4e3a\u5b83\u7684\u6240\u6709\u513f\u5b50\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u65b9\u70b9\u5f00\u4e00\u4e2a$multiset$\u7ef4\u62a4\u5c31\u53ef\u4ee5\u4e86\u3002\n\n## Code\uff08\u8bf7\u52ff\u6284\u88ad\uff09\uff1a\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<set>\n#define INF 2147483647\nusing namespace std;\nvector<int>G1[200010],G2[200010]; \nmultiset<int>S[200010];\nint minn[800010];\nint dep[200010],f[200010],size[200010],id[200010],cnt,h[200010],top[200010],loc[200010];\nint pos,dfn[200010],low[200010],topp,stack[200010];\nint n,m,q,dis[200010],ext;\nvoid swap(int &x,int &y){\n\tint t=x;x=y;y=t;\n}\nint min(int a,int b){\n\treturn a<b?a:b;\n}\nvoid build_tree(int o,int l,int r){\n\tif(l==r){\n\t\tminn[o]=dis[loc[l]];\n\t\treturn ;\n\t}\n\tint mid=l+r>>1;\n\tbuild_tree(o<<1,l,mid);\n\tbuild_tree(o<<1|1,mid+1,r);\n\tminn[o]=min(minn[o<<1],minn[o<<1|1]);\n}\nvoid update(int o,int l,int r,int x,int k){\n\tif(l==r){\n\t\tminn[o]=k;\n\t\treturn ;\n\t}\n\tint mid=l+r>>1;\n\tif(x<=mid)update(o<<1,l,mid,x,k);\n\telse update(o<<1|1,mid+1,r,x,k);\n\tminn[o]=min(minn[o<<1],minn[o<<1|1]);\n}\nint query(int o,int l,int r,int x,int y){\n\tif(x<=l&&r<=y)\n\t\treturn minn[o];\n\tint mid=l+r>>1,ret=INF;\n\tif(x<=mid)ret=min(ret,query(o<<1,l,mid,x,y));\n\tif(mid<y)ret=min(ret,query(o<<1|1,mid+1,r,x,y));\n\treturn ret;\n}\nvoid dfs1(int x,int fa){\n\tf[x]=fa;\n\tdep[x]=dep[fa]+1;\n\tsize[x]=1;\n\tint tmp=-1;\n\tfor(int i=0;i<G2[x].size();i++){\n\t\tint v=G2[x][i];\n\t\tif(v==fa)\n\t\t\tcontinue;\n\t\tdfs1(v,x);\n\t\tsize[x]+=size[v];\n\t\tif(size[v]>tmp){\n\t\t\ttmp=size[v];\n\t\t\th[x]=v;\n\t\t}\n\t}\n}\nvoid dfs2(int x,int fa){\n\ttop[x]=fa;\n\tid[x]=++cnt;\n\tloc[cnt]=x;\n\tif(!h[x])\n\t\treturn ;\n\tdfs2(h[x],fa);\n\tfor(int i=0;i<G2[x].size();i++){\n\t\tint v=G2[x][i];\n\t\tif(v==f[x]||v==h[x])\n\t\t\tcontinue;\n\t\tdfs2(v,v);\n\t}\n}\nvoid tarjan(int x){\n\tdfn[x]=low[x]=++pos;\n\tstack[++topp]=x;\n\tfor(int i=0;i<G1[x].size();i++){\n\t\tint v=G1[x][i];\n\t\tif(!dfn[v]){\n\t\t\ttarjan(v);\n\t\t\tlow[x]=min(low[x],low[v]);\n\t\t\tif(low[v]==dfn[x]){\n\t\t\t\text++;\n\t\t\t\tfor(int j=0;j!=v;topp--){\n\t\t\t\t\tj=stack[topp];\n\t\t\t\t\tG2[ext].push_back(j);\n\t\t\t\t\tG2[j].push_back(ext);\n\t\t\t\t}\n\t\t\t\tG2[ext].push_back(x);\n\t\t\t\tG2[x].push_back(ext);\n\t\t\t}\n\t\t}\n\t\telse low[x]=min(low[x],dfn[v]);\n\t}\n}\nint querypath(int x,int y){\n\tint ret=INF;\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])\n\t\t\tswap(x,y);\n\t\tret=min(ret,query(1,1,ext,id[top[x]],id[x]));\n\t\tx=f[top[x]];\n\t}\n\tif(dep[x]>dep[y])\n\t\tswap(x,y);\n\tret=min(ret,query(1,1,ext,id[x],id[y]));\n\tif(x>n)\n\t\tret=min(ret,dis[f[x]]);\n\treturn ret;\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\text=n;\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&dis[i]);\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tG1[u].push_back(v);\n\t\tG1[v].push_back(u);\n\t}\n\ttarjan(1);\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tfor(int i=1;i<=n;i++)\n\t\tif(f[i])\n\t\t\tS[f[i]].insert(dis[i]);\n\tfor(int i=n+1;i<=ext;i++)\n\t\tdis[i]=*S[i].begin();\n\tbuild_tree(1,1,ext);\n\twhile(q--){\n\t\tchar s[5];\n\t\tscanf(\"%s\",s);\n\t\tif(s[0]=='C'){\n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tupdate(1,1,ext,id[x],y);\n\t\t\tif(f[x]){\n\t\t\t\tS[f[x]].erase(S[f[x]].lower_bound(dis[x]));\n\t\t\t\tS[f[x]].insert(y);\n\t\t\t\tif(dis[f[x]]!=*S[f[x]].begin()){\n\t\t\t\t\tdis[f[x]]=*S[f[x]].begin();\n\t\t\t\t\tupdate(1,1,ext,id[f[x]],dis[f[x]]);\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t}\n\t\t\tdis[x]=y;\n\t\t}\n\t\telse if(s[0]=='A'){\n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tprintf(\"%d\\n\",querypath(x,y));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n    ",
        "postTime": 1566955141,
        "uid": 122641,
        "name": "GIFBMP",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF487E \u3010Tourists\u3011"
    },
    {
        "content": "[\u6211\u7684\u535a\u5ba2\u94fe\u63a5](https://www.cnblogs.com/Memory-of-winter/p/9451222.html)\n\n**\u9898\u76ee\u5927\u610f\uff1a**\u7ed9\u5b9a\u4e00\u5f20\u56fe\uff08\u4fdd\u8bc1\u8fde\u901a\uff09\uff0c\u6bcf\u4e2a\u70b9\u6709\u70b9\u6743\u3002\u73b0\u5728\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n1. $C\\;a\\;w:$\u628a$a$\u7684\u70b9\u6743\u6539\u4e3a$w$\uff1b\n2. $A\\;a\\;b:$\u8be2\u95ee\u4ece$a$\u5230$b$\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\uff08\u4e0d\u7ecf\u8fc7\u91cd\u590d\u70b9\uff09\u4e2d\uff0c\u70b9\u6743\u6700\u5c0f\u7684\u70b9\u7684\u70b9\u6743\u3002\n\n**\u9898\u89e3\uff1a**\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u662f\u4e00\u68f5\u6811\uff0c\u76f4\u63a5\u7528\u6811\u94fe\u5256\u5206\u7ef4\u62a4\u6700\u503c\u5373\u53ef\u3002\n\n\u4f46\u662f\u5b83\u662f\u4e00\u4e2a\u56fe\uff0c\u6240\u4ee5\u53ef\u4ee5\u60f3\u5230\u7f29\u70b9\u3002\n\n\u9898\u76ee\u8981\u6c42\u4e0d\u7ecf\u8fc7\u91cd\u590d\u70b9\uff0c\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u5982\u679c\u5230\u4e86\u5176\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u70b9\uff0c\u4e00\u5b9a\u53ef\u4ee5\u8d70\u5230\u5176\u4e2d\u7684\u70b9\u6743\u6700\u5c0f\u7684\u70b9\u3002\n\n\u4e8e\u662f\u60f3\u5230\u628a\u56fe\u4e2d\u7684\u70b9\u53cc\u7f29\u70b9\uff0c\u7ef4\u62a4\u5706\u65b9\u6811\uff0c\u628a\u65b9\u70b9\u7684\u503c\u8bbe\u4e3a\u5b83\u5468\u56f4\u7684\u5706\u70b9\u4e2d\u70b9\u6743\u6700\u5c0f\u7684\u70b9\u7684\u70b9\u6743\uff0c\u6811\u8fde\u5256\u5206\u3002\n\n\u4f46\u662f\u8fd9\u6837\u505a\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6bcf\u6b21\u4fee\u6539\u4e00\u4e2a\u5706\u70b9\uff0c\u90fd\u8981\u4fee\u6539\u5468\u56f4\u7684\u6240\u6709\u65b9\u70b9\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u5728\u591a\u4e2a\u70b9\u53cc\u4e2d\uff0c\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230$n\\log_2 n$\u7ea7\u522b\uff0c\u5c31\u4f1a$TLE$\n\n\u600e\u4e48\u529e\u5462\uff1f\n\n\u8fd9\u65f6\u6211\u4eec\u6539\u53d8\u4e00\u4e0b\u65b9\u70b9\u7684\u503c\uff0c\u53ef\u4ee5\u628a\u65b9\u70b9\u4e2d\u7684\u503c\u6539\u4e3a\u5b83\u7684\u513f\u5b50\u4e2d\u6700\u5c0f\u503c\uff08\u800c\u4e0d\u662f\u5468\u56f4\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u7684\u7236\u4eb2\u7684\u503c\u4e0d\u4f1a\u5f71\u54cd\u8fd9\u4e2a\u65b9\u70b9\uff09\n\n\u770b\u8d77\u6765\u6ca1\u4ec0\u4e48\u662f\u5427\uff1f\n\n\u4f46\u662f\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u7528$multiset$\uff08**\u4e0d\u662fset**\uff09\u6765\u5b58\u5b83\u7684\u6bcf\u4e2a\u513f\u5b50\u7684\u503c\uff0c\u4fee\u6539\u4e00\u4e2a\u5706\u70b9\u65f6\uff0c\u6211\u4eec\u53ea\u4fee\u6539\u8fd9\u4e2a\u5706\u70b9\u672c\u8eab\u548c\u8fd9\u4e2a\u70b9\u7684\u7236\u4eb2\uff08\u4e5f\u5c31\u662f\u4e00\u4e2a\u65b9\u70b9\uff09\u7684\u4fe1\u606f\uff08\u6ce8\u610f\u5982\u679c\u4fee\u6539\u7684\u70b9\u662f\u6839\u5c31\u4e0d\u4fee\u6539\u7236\u4eb2\uff09\u3002\n\n\u4fee\u6539\u590d\u6742\u5ea6$O(\\log_2 n)$\uff08\u6709\u53ef\u80fd\u662f\u5047\u7684\uff0c\u6211\u5e76\u4e0d\u600e\u4e48\u4f1a\u63a8\uff09\n\n\u8be2\u95ee\u65f6\uff0c\u60f3\u539f\u6765\u4e00\u6837\u6811\u94fe\u5256\u5206\uff0c\u6ce8\u610f\u5982\u679c\u6700\u540e\u7684\u8282\u70b9\u662f\u4e00\u4e2a\u65b9\u70b9\uff08\u4e5f\u5c31\u662f\u8bf4\u67e5\u8be2\u7684\u4e24\u4e2a\u70b9\u7684$LCA$\u662f\u65b9\u70b9\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65b9\u70b9\u7684\u7236\u4eb2\u5c31\u6ca1\u6709\u7edf\u8ba1\u5230\u7b54\u6848\u4e2d\uff0c\u4f46\u662f\u5b83\u662f\u6709\u8d21\u732e\u7684\uff0c\u4e8e\u662f\u8981\u8ba1\u7b97\n\n\u65f6\u95f4\u590d\u6742\u5ea6$(O(n\\log_2^2 n)$\u3002\n\n\u4ee3\u7801\u53c8\u957f\u53c8\u4e11\uff0c\u5927\u5bb6\u770b\u770b\u5c31\u597d\n\n \n\n**C++ Code\uff1a**\n```cpp\n#include <cstdio>\n#include <set>\n\n#define maxn 100010\n#define maxm 100010\n\n#define N 200010 \n#define M 200010\n\nusing namespace std;\nconst int inf = 0x7fffffff;\ninline int min(int a, int b) {return a < b ? a : b;}\ninline void swap(int &a, int &b) {a ^= b ^= a ^= b;}\nint n, m, q, cnt;\nint w[N];\nstruct Edge {int to, nxt;};\nmultiset <int> SM[N];\nstruct ST { //\u7ebf\u6bb5\u6811\n\tint V[N << 1], W[N];\n\tvoid build(int rt, int l, int r) {\n\t\tif (l == r) {\n\t\t\tV[rt] = W[l];\n\t\t\treturn ;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tbuild(rt << 1, l, mid);\n\t\tbuild(rt << 1 | 1, mid + 1, r);\n\t\tV[rt] = min(V[rt << 1], V[rt << 1 | 1]);\n\t}\n\tvoid add(int rt, int l, int r, int x, int num) {\n\t\tif (l == r) {\n\t\t\tV[rt] = num;\n\t\t\treturn ;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tif (x <= mid) add(rt << 1, l, mid, x, num);\n\t\telse add(rt << 1 | 1, mid + 1, r, x, num);\n\t\tV[rt] = min(V[rt << 1], V[rt << 1 | 1]);\n\t}\n\tint ask(int rt, int l, int r, int L, int R) {\n\t\tif (L <= l && R >= r) {\n\t\t\treturn V[rt];\n\t\t}\n\t\tint mid = l + r >> 1, ans = inf;\n\t\tif (L <= mid) ans = ask(rt << 1, l, mid, L, R);\n\t\tif (R > mid) ans = min(ans, ask(rt << 1 | 1, mid + 1, r, L, R));\n\t\treturn ans;\n\t}\n} S;\nstruct Tree {//\u6811\u94fe\u5256\u5206\n\tint head[N], cntE;\n\tEdge e[M << 1];\n\tvoid addE(int a, int b) {\n\t\te[++cntE] = (Edge) {b, head[a]}; head[a] = cntE;\n\t}\n\tint idx;\n\tint fa[N], dep[N], dfn[N], son[N], sz[N], top[N];\n\tvoid dfs1(int rt) {\n\t\tsz[rt] = 1;\n\t\tson[rt] = 0;\n\t\tfor (int i = head[rt]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].to;\n\t\t\tif (!dep[v]) {\n\t\t\t\tdep[v] = dep[rt] + 1;\n\t\t\t\tfa[v] = rt;\n\t\t\t\tdfs1(v);\n\t\t\t\tsz[rt] += sz[v];\n\t\t\t\tif (!son[rt] || sz[v] > sz[son[rt]]) son[rt] = v;\n\t\t\t}\n\t\t}\n\t}\n\tvoid dfs2(int rt) {\n\t\tdfn[rt] = ++idx;\n\t\tint v = son[rt];\n\t\tif (v) top[v] = top[rt], dfs2(v);\n\t\tfor (int i = head[rt]; i; i = e[i].nxt) {\n\t\t\tv = e[i].to;\n\t\t\tif (v != fa[rt] && v != son[rt]) {\n\t\t\t\ttop[v] = v;\n\t\t\t\tdfs2(v);\n\t\t\t}\n\t\t}\n\t}\n\tvoid init(int rt) {//\u6811\u94fe\u5256\u5206\u521d\u59cb\u5316\n\t\tint v;\n\t\tfa[rt] = idx = 0;\n\t\tdep[top[rt] = rt] = 1;\n\t\tdfs1(rt);\n\t\tdfs2(rt);\n\t\tfor (int i = 1; i <= n; i++) S.W[dfn[i]] = w[i];//\u5706\u70b9\u521d\u59cb\u5316\n\t\tfor (int i = n + 1; i <= cnt; i++) {//\u65b9\u70b9\u521d\u59cb\u5316\n\t\t\tfor (int j = head[i]; j; j = e[j].nxt) {\n\t\t\t\tv = e[j].to;\n\t\t\t\tif (v != fa[i]) SM[i].insert(w[v]);//\u53ea\u5b58\u5b83\u513f\u5b50\u7684\u4fe1\u606f\n\t\t\t}\n\t\t\tif (SM[i].empty()) w[i] = inf;\n\t\t\telse w[i] = *SM[i].begin();//\u6c42\u51fa\u8be5\u65b9\u70b9\u7684\u503c\u2014\u2014\u5b83\u513f\u5b50\u4e2d\u7684\u6700\u5c0f\u503c\n\t\t\tS.W[dfn[i]] = w[i];\n\t\t}\n\t\tS.build(1, 1, cnt);//\u7ebf\u6bb5\u6811\u521d\u59cb\u5316\n\t}\n\tvoid add(int x, int num) {//\u4fee\u6539\n\t\tint f = fa[x];\n\t\tif (f) {//\u5982\u679c\u662f\u4fee\u6539\u7684\u8282\u70b9\u4e0d\u662f\u6839\u5c31\u66f4\u65b0\u5b83\u7684\u7236\u4eb2\n\t\t\tSM[f].erase(SM[f].find(w[x]));//\u6e05\u9664\u5b83\u7236\u4eb2\u4e2d\u5173\u4e8e\u4fee\u6539\u8282\u70b9\u7684\u4fe1\u606f\n\t\t\tSM[f].insert(num);//\u66f4\u65b0\u4fe1\u606f\n\t\t\tw[f] = *SM[f].begin();//\u6c42\u51fa\u65b9\u70b9\u513f\u5b50\u4e2d\u7684\u6700\u5c0f\u503c\n\t\t\tS.add(1, 1, cnt, dfn[f], w[f]);//\u7ebf\u6bb5\u6811\u4fee\u6539\n\t\t}\n\t\tw[x] = num;\n\t\tS.add(1, 1, cnt, dfn[x], num);//\u7ebf\u6bb5\u6811\u4fee\u6539\n\t}\n\tint ask(int x, int y) {//\u8be2\u95ee\n\t\tint res = inf;\n\t\twhile (top[x] != top[y]) {\n\t\t\tif (dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\t\tres = min(res, S.ask(1, 1, cnt, dfn[top[x]], dfn[x]));\n\t\t\tx = fa[top[x]];\n\t\t}\n\t\tif (dep[x] > dep[y]) swap(x, y);\n\t\tres = min(res, S.ask(1, 1, cnt, dfn[x], dfn[y]));\n\t\tif (x > n) res = min(res, w[fa[x]]);\n\t\treturn res;\n\t}\n} T;\nstruct Graph {//tarjan\u7f29\u70b9\n\tint head[maxn], cntE;\n\tEdge e[maxm << 1];\n\tint stack[maxn], DFN[maxn], low[maxn];\n\tint idx, tot;\n\tbool vis[maxn];\n\tvoid addE(int a, int b) {\n\t\te[++cntE] = (Edge) {b, head[a]}; head[a] = cntE;\n\t}\n\tvoid tarjan(int rt) {\n\t\tvis[stack[++tot] = rt] = true;\n\t\tlow[rt] = DFN[rt] = ++idx;\n\t\tint v, tmp;\n\t\tfor (int i = head[rt]; i; i = e[i].nxt) {\n\t\t\tv = e[i].to;\n\t\t\tif (!DFN[v]) {\n\t\t\t\ttarjan(v);\n\t\t\t\tlow[rt] = min(low[rt], low[v]);\n\t\t\t\tif (low[v] >= DFN[rt]) {//\u5982\u679c\u5b83\u662f\u8fd9\u4e2a\u56fe\u7684\u5272\u70b9\uff0c\u90a3\u4e48\u5728\u6808\u5185\u7684\u5728\u5b83\u4e0a\u9762\u7684\u70b9\u5c31\u662f\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\n\t\t\t\t\tcnt++;\n\t\t\t\t\tw[cnt] = inf;\n\t\t\t\t\tT.addE(cnt, rt);//\u5efa\u5706\u65b9\u6811\n\t\t\t\t\tT.addE(rt, cnt);\n\t\t\t\t\tw[cnt] = min(w[cnt], w[rt]);\n\t\t\t\t\tdo {\n\t\t\t\t\t\tvis[tmp = stack[tot--]] = false;\n\t\t\t\t\t\tT.addE(cnt, tmp);\n\t\t\t\t\t\tT.addE(tmp, cnt);\n\t\t\t\t\t} while(tmp != v);//\u6ce8\u610f\u4e0d\u8981\u628a\u5f53\u524d\u70b9\u5f39\u51fa\u6808\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlow[rt] = min(low[rt], DFN[v]);\n\t\t\t}\n\t\t}\n\t}\n} G;\n\nint main() {\n\tscanf(\"%d%d%d\", &n, &m, &q);\n\tfor (int i = 1; i <= n; i++) scanf(\"%d\", &w[i]);\n\tfor (int i = 1; i <= m; i++) {\n\t\tint a, b;\n\t\tscanf(\"%d%d\", &a, &b);\n\t\tG.addE(a, b);\n\t\tG.addE(b, a);\n\t}\n\tcnt = n;\n\tG.tarjan(1);//\u7f29\u70b9\n\tT.init(1);//\u6811\u94fe\u5256\u5206\u521d\u59cb\u5316\n\twhile (q--) {\n\t\tchar op; int x, y;\n\t\tscanf(\"%s%d%d\", op, &x, &y);\n\t\tif (op[0] == 'C') {\n\t\t\tT.add(x, y);//\u4fee\u6539\n\t\t} else {\n\t\t\tprintf(\"%d\\n\", T.ask(x, y));//\u8be2\u95ee\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1533816140,
        "uid": 22072,
        "name": "Memory_of_winter",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF487E \u3010Tourists\u3011"
    },
    {
        "content": "\u5706\u65b9\u6811 + \u6811\u94fe\u5256\u5206\u3002\n\n\u7531\u4e8e\u56fe\u4e0a\u8def\u5f84\u95ee\u9898\u4e0d\u597d\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5efa\u7acb\u5706\u65b9\u6811\uff0c\u628a\u56fe\u53d8\u6210\u6811\u3002\n\n\u8fd9\u53ef\u4ee5\u7528 tarjan \u5f88\u5bb9\u6613\u5b8c\u6210\u3002\n\n\u9898\u76ee\u8981\u6c42\u8def\u5f84\u4e2d\u70b9\u6700\u5c0f\u503c\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u6811\u94fe\u5256\u5206\u7ef4\u62a4\u3002\n\n\u6211\u4eec\u5148\u5bf9\u6bcf\u4e2a\u70b9\u8fdb\u884c\u8d4b\u503c\u3002\n\n\u5bf9\u6bcf\u4e2a\u5706\u70b9\u5176\u6743\u503c\u4e3a\u5176\u503c\u672c\u8eab\u3002\n\n\u5bf9\u4e8e\u65b9\u70b9\uff0c\u6211\u4eec\u539f\u672c\u5e94\u5c06\u5176\u503c\u8bbe\u4e3a\u5176\u5468\u56f4\u503c\u5f97\u6700\u5c0f\u503c\uff0c\u7136\u800c\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u590d\u6742\u5ea6\u53d8\u4e3a $n^2$ \u7ea7\u522b\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5706\u70b9\u53ef\u4ee5\u8fde\u5411 n \u4e2a\u65b9\u70b9\u3002\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e2a\u8c03\u6574\uff0c\u5728\u65b9\u70b9\u8bb0\u5f55\u5176\u513f\u5b50\u8282\u70b9\u7684\u6700\u5c0f\u503c\uff0c\u8fd9\u6837\u6bcf\u6b21\u4fee\u6539\u90fd\u53ea\u9700\u6539\u5176\u7236\u4eb2\u8282\u70b9\u5373\u53ef\u3002\u5177\u4f53\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 multiset \u6765\u7ef4\u62a4\u3002\u6ce8\u610f\u5728\u67e5\u8be2\u65f6\u5982\u679c LCA \u662f\u65b9\u70b9\u8981\u7b97\u4e0a\u5176\u7236\u4eb2\u8282\u70b9\uff0c\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u7684\u8fd9\u4e2a\u65b9\u70b9\u672a\u5c06\u5176\u7236\u4eb2\u7b97\u5165\u7edf\u8ba1\u4e2d\u3002\n\n\u67e5\u8be2\u65f6\u5c31\u7528\u6811\u94fe\u5256\u5206\u67e5\u8be2\u5373\u53ef\u3002\n\n\u4fee\u6539\u64cd\u4f5c\u5219\u4fee\u6539\u5176\u672c\u8eab\u548c\u5176\u7236\u4eb2\uff0c\u6ce8\u610f\u5982\u679c\u4fee\u6539\u6839\u8282\u70b9\u5219\u4e0d\u7528\u6539\u7236\u4eb2\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log^2 n)$\n\n------\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n// Problem: CF487E Tourists\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/CF487E\n// Memory Limit: 256 MB\n// Time Limit: 1000 ms\n// 2022-02-10 09:01:57\n// Author : louhao088\n// \n\n#include<bits/stdc++.h>\nusing namespace std;\n//static char buf[1000000],*p1=buf,*p2=buf;\n//#define getchar() p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++\n#define pi pair<int,int>\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define ls (rt<<1)\n#define rs (rt<<1|1)\n#define mid (l+r>>1)\n#define lowbit (x&-x)\nconst int maxn=2e5+5,M=34005;\ninline int read()\n{\n\tchar ch=getchar();bool f=0;int x=0;\n\tfor(;!isdigit(ch);ch=getchar())if(ch=='-')f=1;\n\tfor(;isdigit(ch);ch=getchar())x=(x<<1)+(x<<3)+(ch^48);\n\tif(f==1)x=-x;return x;\n}\ninline void print(int x)\n{\n    static int a[55];int top=0;\n    if(x<0) putchar('-'),x=-x;\n    do{a[top++]=x%10,x/=10;}while(x);\n    while(top) putchar(a[--top]+48);\n}\nint n,m,low[maxn],dfn[maxn],tot,st[maxn],tp,cnt,id[maxn],b[maxn],a[maxn];\nint fa[maxn],son[maxn],siz[maxn],top[maxn],d[maxn],Min[maxn*4],idx,q,x,y;\nvector<int>e[maxn],G[maxn];\nmultiset<int>s[maxn];\nchar ch;\nvoid tarjan(int x)\n{\n\tdfn[x]=low[x]=++tot,st[++tp]=x;\n\tfor(auto i:G[x])\n\t\tif(!dfn[i])\n\t\t{\n\t\t\ttarjan(i);low[x]=min(low[x],low[i]);\n\t\t\tif(low[i]==dfn[x])\n\t\t\t{\n\t\t\t\tcnt++;e[cnt].pb(x),e[x].pb(cnt);\n\t\t\t\tfor(;st[tp+1]!=i;tp--)e[cnt].pb(st[tp]),e[st[tp]].pb(cnt);\n\t\t\t}\n\t\t}\n\t\telse low[x]=min(low[x],dfn[i]);\n}\nvoid dfs1(int x,int f)\n{\n\td[x]=d[f]+1,fa[x]=f;siz[x]=1;\n\tfor(auto i:e[x])\n\t\tif(i^fa[x])\n\t\t{\n\t\t\tdfs1(i,x);\n\t\t\tif(x>n)s[x].insert(a[i]);\n\t\t\tif(siz[i]>siz[son[x]])son[x]=i;\n\t\t\tsiz[x]+=siz[i];\n\t\t}\n}\nvoid dfs2(int x,int tf)\n{\n\ttop[x]=tf;id[x]=++idx;\n\tif(x<=n)b[idx]=a[x];else b[idx]=*s[x].begin();\n\tif(son[x])dfs2(son[x],tf);\n\tfor(auto i:e[x])\n\t\tif(i!=fa[x]&&i!=son[x])\n\t\t\tdfs2(i,i);\n\t\n}\nvoid build(int rt,int l,int r)\n{\n\tif(l==r){Min[rt]=b[l];return;}\n\tbuild(ls,l,mid),build(rs,mid+1,r);\n\tMin[rt]=min(Min[ls],Min[rs]);\n}\nvoid change(int rt,int l,int r,int x,int num)\n{\n\tif(l>x||r<x)return;\n\tif(l==r){Min[rt]=num;return;}\n\tchange(ls,l,mid,x,num),change(rs,mid+1,r,x,num);\n\tMin[rt]=min(Min[ls],Min[rs]);\n}\nint query(int rt,int l,int r,int L,int R)\n{\n\tif(l>R||r<L)return 1e9;\n\tif(l>=L&&r<=R)return Min[rt];\n\treturn min(query(ls,l,mid,L,R),query(rs,mid+1,r,L,R));\n}\nint treequery(int x,int y)\n{\n\tint res=1e9;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(d[top[x]]<d[top[y]])swap(x,y);\n\t\tres=min(res,query(1,1,cnt,id[top[x]],id[x]));\n\t\tx=fa[top[x]];\n\t}\n\tif(d[x]<d[y])swap(x,y);\n\tres=min(res,query(1,1,cnt,id[y],id[x]));\n\tif(y>n)res=min(res,a[fa[y]]);\n\treturn res;\n}\nsigned main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tn=read(),m=read(),q=read();cnt=n;\n\tfor(int i=1;i<=n;i++)a[i]=read();\n\tfor(int i=1;i<=m;i++)x=read(),y=read(),G[x].pb(y),G[y].pb(x);\n\ttarjan(1);dfs1(1,0);dfs2(1,1);build(1,1,cnt);\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tch=getchar();while(ch!='A'&&ch!='C')ch=getchar();x=read(),y=read();\n\t\tif(ch=='A')printf(\"%d\\n\",treequery(x,y));\n\t\telse \n\t\t{\n\t\t\tif(fa[x])\n\t\t\t{\n\t\t\t\ts[fa[x]].erase(s[fa[x]].find(a[x]));\n\t\t\t\ts[fa[x]].insert(y);\n\t\t\t\tchange(1,1,cnt,id[fa[x]],*s[fa[x]].begin());\n\t\t\t}\n\t\t\ta[x]=y;change(1,1,cnt,id[x],y);\n\t\t\t\n\t\t}\n\t}\n \treturn 0;\n}\n\n\n```\n",
        "postTime": 1644469380,
        "uid": 343748,
        "name": "louhao088",
        "ccfLevel": 9,
        "title": "\u9898\u89e3CF487E Tourists"
    },
    {
        "content": "\u5199\u5b8c\u8fd9\u9898\u5df2\u7ecf\u5b8c\u5168\u81ea\u95ed\u4e86 \u8c03\u4e86\u597d\u4e45\u2026\u2026\n\n## \u9898\u76ee\u5927\u610f\n\n\u5c31\u662f\u6c42\u4e00\u5f20\u56fe\u4e2d\u4e24\u70b9\u95f4\u6240\u6709\u8def\u5f84\u4e2d\u7ecf\u8fc7\u7684\u70b9\u7684\u6700\u5c0f\u503c\uff0c\u5e26\u4fee\u3002\n\n## \u89e3\u6cd5\n\n\u6211\u4eec\u5148\u8003\u8651\u4e00\u4e0b\u6027\u8d28\uff1a\u5bf9\u4e8e\u65e0\u5411\u56fe\u663e\u7136\u4e0d\u597d\u505a\uff0c\u8003\u8651\u4e00\u4e0b\u548b\u8f6c\u5316\u6210\u4e00\u68f5\u6811\u3002\n\n\u90a3\u5c31\u5f80\u5706\u65b9\u6811\u8003\u8651\u5457\uff0c\u672c\u9898\u6709\u5565\u6027\u8d28\uff1f\n\n\u89c2\u5bdf\u5230\uff1a\n\n> \u5bf9\u4e8e\u4e00\u4e2a\u70b9\u53cc\uff0c\u5fc5\u7136\u5b58\u5728\u4e00\u6761\u8def\u5f84\u8d70\u8fc7\u8be5\u70b9\u53cc\u4e2d\u7684\u6700\u5c0f\u503c\u3002\n\n\u8bc1\u660e\u6bd4\u8f83\u7b80\u5355\u3002\u7531\u4e8e\u70b9\u53cc\u5185\u4e24\u70b9\u4e4b\u95f4\u6ca1\u6709\u4e00\u4e2a\u5fc5\u7ecf\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u5b9a\u53ef\u4ee5\u7559\u51fa\u4e00\u4e2a\u70b9\u4ece\u8d70\u8fc7\u7684\u90a3\u4e2a\u6700\u5c0f\u503c\u70b9\u518d\u8d70\u51fa\u53bb\u3002\n\n\u90a3\u4e48\u5c31\u8003\u8651\u5efa\u7acb\u5706\u65b9\u6811\u53ed\u3002\u7801\u5957\u8def\uff0c\u5148\u4e0a\u4e00\u4e2a tarjan \u627e\u70b9\u53cc\u2026\u2026\n\n**\u7ec6\u82821 \u6ce8\u610f\u70b9\u53cc\u7684\u5f62\u6210\u662f\u9700\u8981\u6ee1\u8db3 ```low[j]>=dfn[x]``` \u7684\uff0c\u4e0d\u8981\u72af\u50bb\u6253\u9519\u4e86\u3002**\n\n\u597d\u7684\uff0c\u63a5\u4e0b\u6765\u600e\u4e48\u4fee\u6539\uff1f\u8003\u8651\u56de\u7b54\u8be2\u95ee\u7684\u540c\u65f6\u5176\u5b9e\u4e5f\u5c31\u80fd\u60f3\u5230\u600e\u4e48\u7ef4\u62a4\u4fee\u6539\uff1a\u6254\u4e00\u4e2a\u6811\u5256\u5c31\u597d\u4e86\u3002\n\n\u90a3\u5c31\u8003\u8651\u5199\u6811\u5256\u53ed\u3002\u7801\u5957\u8def\uff0c\u5148\u4e0a\u4e24\u4e2a dfs \u2026\u2026\n\n**\u7ec6\u82822 \u6ce8\u610f\u6811\u5256\u7684 ```query``` \u5565\u7684\u522b\u6253\u9519\u4e86\u2026\u2026**\n\n\u597d\u561e\uff0c\u4e0a\u8ff0\u51c6\u5907\u5de5\u4f5c\u90fd\u505a\u597d\u4e86\uff0c\u5199\u4e2a\u4fee\u6539\u6d4b\u6837\u4f8b\u2026\u2026\u6302\u6389\u4e86\u3002\n\n\u51b7\u9759\u5206\u6790\uff1a\u53d1\u73b0\u4e0d\u8bba\u6539\u65b9\u70b9\u8fd8\u662f\u5706\u70b9\uff0c\u90fd\u4f1a\u5f71\u54cd\u5230\u5468\u56f4\u7684\u70b9\u3002\n\n\u600e\u4e48\u529e\uff0c\u66b4\u529b\u4fee\u6539\uff1f\u90a3\u663e\u7136\u4e0d\u5207\u5b9e\u9645\uff0c\u4e00\u4e2a\u83ca\u82b1\u56fe\u5c31\u53ef\u4ee5\u5361\u7206\u4f60\u3002\n\n\u7ee7\u7eed\u8003\u8651\u5982\u4f55\u9ad8\u6548\u7ef4\u62a4\u3002\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u65b9\u70b9\u4ee3\u8868\u4e00\u4e2a\u70b9\u53cc\uff0c\u90a3\u4e48\uff0c\u5bf9\u4e8e\u5706\u65b9\u6811\u7684\u6811\u7ed3\u6784\uff0c\u6bcf\u4e00\u4e2a\u65b9\u70b9\u7684\u7b54\u6848\u5176\u5b9e\u9664\u4e86\u5b83\u7684\u5b69\u5b50\u8fd8\u8981\u5305\u542b\u5176\u7236\u4eb2\u3002\u8fd9\u70b9\u4e5f\u5c31\u6070\u597d\u8ba9\u7ef4\u62a4\u53d8\u5f97\u4e0d\u65b9\u4fbf\u8d77\u6765\u3002\n\n\u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u5148\u8003\u8651\u65e0\u89c6\u6389\u7236\u4eb2\u7684\u5f71\u54cd\uff0c\u53ea\u7ef4\u62a4\u5b69\u5b50\uff0c\u600e\u4e48\u505a\uff1f\n\n\u7ef4\u62a4\u4e00\u4e2a ```multiset``` \u5bf9\u6bcf\u4e2a\u65b9\u70b9\uff0c\u6bcf\u6b21\u76f4\u63a5\u62ff\u8fd9\u4e2a\u6765\u66b4\u529b\u66f4\u65b0\u65b9\u70b9\u6743\u503c\u3002\n\n\u597d\u7684\uff0c\u73b0\u5728\u8fd9\u91cc\u53ef\u4ee5\u5b9e\u73b0\u4e86\uff0c\u90a3\u5e26\u4e0a\u7236\u4eb2\u5462\uff1f\n\n\u51b7\u9759\u5206\u6790\u4e00\u6ce2\uff0c\u8fd9\u4e2a\u7236\u4eb2\u7684\u5f71\u54cd\u9700\u8981\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n* \u8fd9\u4e2a\u70b9\u662f\u65b9\u70b9\n\n* \u8fd9\u4e2a\u70b9\u7684\u7236\u4eb2\u6ca1\u6709\u88ab\u8ba1\u7b97\u5230\n\n\u90a3\u540c\u65f6\u6ee1\u8db3\u4e0b\u5217\u4e24\u4e2a\u6761\u4ef6\u7684\u70b9\u5c31\u53ea\u6709\u53ef\u80fd\u662f\u2026\u2026\n\n**\u6700\u8fd1\u516c\u5171\u7956\u5148 $(LCA)$**\n\n\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u8be2\u95ee\u5b9e\u9645\u53ea\u6709\u4e00\u4e2a\u70b9\u9700\u8981\u88ab\u7279\u6b8a\u5bf9\u5f85\uff01\n\n\u90a3\u4e48\u5c31\u76f4\u63a5\u505a\u5c31\u597d\u4e86\u3002\n\n\u6700\u540e\u518d\u9644\u8d60\u7ec6\u82823\uff1a\n\n\u66f4\u65b0 ```low[x]``` \u4e0d\u8981\u62ff ```low[j]``` \u554a\u2026\u2026\uff08\u5728\u4e0d dfs \u7684\u65f6\u5019\uff09\uff0c\u8c03\u4e86\u597d\u4e45\u2026\u2026\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int N=200100;\nint head[N],tot,Head[N],tto,n,m,q,w[N];\nstruct E {\n\tint nxt,to;\n} e[N<<1],edge[N<<1];\ninline int read(){\n\tint s=0;\n\tchar ch=getchar();\n\twhile(!isdigit(ch))ch=getchar();\n\twhile(isdigit(ch)){\n\t\ts=s*10-'0'+ch;\n\t\tch=getchar();\n\t} \n\treturn s;\n}\nint nodepos,ddf,rk[N],cir[N],To[N];\ninline int Min(int x,int y) {return x<y?x:y;}\nmultiset<int> S[N];\ninline void link(int x,int y,int w=0) {\n\tif(w) {\n\t\tedge[++tto]=(E) {\n\t\t\tHead[x],y\n\t\t};\n\t\tHead[x]=tto;\n\t\treturn;\n\t}\n\te[++tot]=(E) {\n\t\thead[x],y\n\t};\n\thead[x]=tot;\n}\nint son[N],siz[N],dfn[N],low[N],st[N],top;\nint ttop[N],pa[N],dfstime,vis[N],dep[N];\nvoid dfs1(int x,int fa) {\n\tsiz[x]=1;\n\tdep[x]=dep[fa]+1;\n\tpa[x]=fa;\n\tfor(int i=Head[x]; i; i=edge[i].nxt) {\n\t\tint j=edge[i].to;\n\t\tif(j==fa)continue;\n\t\tdfs1(j,x);\n\t\tsiz[x]+=siz[j];\n\t\tif(siz[j]>siz[son[x]])son[x]=j;\n\t}\n}\nvoid dfs2(int x,int t) {\n\trk[dfn[x]=++ddf]=x;\n\tttop[x]=t;\n\tif(!son[x])return;\n\tdfs2(son[x],t);\n\tfor(int i=Head[x]; i; i=edge[i].nxt) {\n\t\tint j=edge[i].to;\n\t\tif(j==son[x]||j==pa[x])continue;\n\t\tdfs2(j,j);\n\t}\n}\nvoid tarjan(int x,int root) {\n\tdfn[x]=low[x]=++dfstime;\n\tst[++top]=x;\n\tif(x==root&&!head[x]) {\n\t\t++nodepos;\n\t\tTo[nodepos]=x;\n\t\tcir[x]=nodepos;\n\t\tlink(x,nodepos,1);\n\t\tlink(nodepos,x,1);\n\t\treturn;\n\t}\n\tint ch=0;\n\tfor(int i=head[x]; i; i=e[i].nxt) {\n\t\tint j=e[i].to;\n\t\tif(!dfn[j]) {\n\t\t\t++ch;\n\t\t\ttarjan(j,root);\n\t\t\tlow[x]=Min(low[x],low[j]);\n\t\t\tif(dfn[x]<=low[j]&&x!=root)vis[x]=1;\n\t\t\tif(x==root&&ch>1)vis[x]=1;\n\t\t\tif(low[j]>=dfn[x]) {\n\t\t\t\tint vex=-1;\n\t\t\t\t++nodepos;\n\t\t\t\tTo[nodepos]=x;\n\t\t\t\tdo {\n\t\t\t\t\tvex=st[top--];\n\t\t\t\t\tcir[vex]=nodepos;\n\t\t\t\t\tlink(vex,nodepos,1);\n\t\t\t\t\tlink(nodepos,vex,1);\n\t\t\t\t} while(vex!=j);\n\t\t\t\tcir[x]=nodepos;\n\t\t\t\tlink(nodepos,x,1);\n\t\t\t\tlink(x,nodepos,1);\n\t\t\t}\n\t\t} else low[x]=Min(low[x],dfn[j]);\n\t}\n}\nnamespace SGT {\n\tint mi[N<<2],ls[N<<2],rs[N<<2],node;\n\tinline void pushup(int x) {\n\t\tmi[x]=Min(mi[ls[x]],mi[rs[x]]);\n\t}\n\tvoid build(int &x,int l,int r) {\n\t\tx=++node;\n\t\tif(l==r) {\n\t\t\tmi[x]=w[rk[l]];\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(ls[x],l,mid);\n\t\tbuild(rs[x],mid+1,r);\n\t\tpushup(x);\n\t}\n\tvoid change(int x,int L,int R,int pos,int v) {\n\t\tif(L==R) {\n\t\t\tmi[x]=v;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(L+R)>>1;\n\t\tif(pos<=mid)change(ls[x],L,mid,pos,v);\n\t\telse change(rs[x],mid+1,R,pos,v);\n\t\tpushup(x);\n\t}\n\tint query(int x,int L,int R,int l,int r) {\n\t\tif(L>=l&&R<=r){return mi[x];} \n\t\tint mid=(L+R)>>1,res=(1LL<<60);\n\t\tif(l<=mid)res=query(ls[x],L,mid,l,r);\n\t\tif(mid<r)res=Min(res,query(rs[x],mid+1,R,l,r));\n\t\treturn res;\n\t}\n}\nusing namespace SGT;\nint rt;\nint Query(int u,int v) {\n\tint res=(1LL<<60);\n\twhile(ttop[u]!=ttop[v]) {\n\t\tif(dep[ttop[u]]<dep[ttop[v]])swap(u,v);\n\t\tres=Min(res,query(rt,1,nodepos,dfn[ttop[u]],dfn[u]));\n\t\tu=pa[ttop[u]];\n\t}\n\tif(dep[u]<dep[v])swap(u,v);\n\tres=Min(res,query(rt,1,nodepos,dfn[v],dfn[u]));\n\tif(dep[u]>dep[v])swap(u,v);\n\tif(u>n)res=Min(res,w[pa[u]]);\n\treturn res;\n}\nvoid Change(int pos,int v) {\n\tchange(rt,1,nodepos,dfn[pos],v);\n\tif(pos==1) {\n\t\tw[pos]=v;\n\t\treturn;\n\t}\n\tint o=pa[pos];\n\tS[o-n].erase(S[o-n].find(w[pos]));\n\tS[o-n].insert(v);\n\tint minv=*S[o-n].begin();\n\tif(minv==w[o]){\n\t\tw[pos]=v;\n\t\treturn;\n\t}\n\tchange(rt,1,nodepos,dfn[o],minv);\n\tw[o]=minv;\n\tw[pos]=v;\n}\ninline void write(int x){\n\tif(x>9)write(x/10);\n\tputchar(x%10+'0');\n}\nsigned main() {\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tn=read();m=read();q=read();\n\tfor(int i=1; i<=n; ++i)w[i]=read();\n\tfor(int i=1; i<=m; ++i) {\n\t\tint u=read(),v=read();\n\t\tlink(u,v);\n\t\tlink(v,u);\n\t}\n\tnodepos=n;\n\ttarjan(1,1);\n\tmemset(dfn,0,sizeof dfn);\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tfor(int i=2; i<=n; ++i) {\n\t\tS[pa[i]-n].insert(w[i]);\n\t}\n\tfor(int i=n+1; i<=nodepos; ++i)\n\t\tw[i]=(S[i-n].empty()?(1LL<<60):(*S[i-n].begin()));\n\tmemset(mi,0x7f,sizeof mi);\n\tbuild(rt,1,nodepos);\n\twhile(q--) {\n\t\tint u,v;\n\t\tchar opt;\n\t\tcin>>opt;\n\t\tu=read();v=read();\n\t\tif(opt=='A') {\n\t\t\twrite(Query(u,v));\n\t\t\tputchar('\\n');\n\t\t\tcontinue;\n\t\t}\n\t\tChange(u,v);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1632140158,
        "uid": 128591,
        "name": "Refined_heart",
        "ccfLevel": 9,
        "title": "CF487E Tourists \u9898\u89e3"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a$tarjan$\u6c42\u70b9\u53cc+\u5706\u65b9\u6811+$LCT$\n\n\u5706\u65b9\u6811\u5c31\u662f\u628a\u6bcf\u4e2a\u70b9\u53cc\u62bd\u8c61\u51fa\u4e00\u4e2a\u65b9\u70b9\uff0c\u7136\u540e\u628a\u539f\u56fe\u4e2d\u70b9\u53cc\u4e2d\u7684\u70b9\u5411\u8fd9\u4e2a\u65b9\u70b9\u8fde\u8fb9\uff0c\u5220\u9664\u539f\u6765\u7684\u8fb9\uff0c\u6613\u8bc1\u8fd9\u6837\u5904\u7406\u540e\u5f97\u5230\u7684\u662f\u6700\u591a\u6709$2n-1$\u4e2a\u70b9\u7684\u6811\uff0c\u4e0e\u6c42\u4e00\u822c\u70b9\u53cc\u4e0d\u540c\u7684\u662f\uff0c\u6211\u4eec\u628a\u8fde\u63a5\u4e24\u4e2a\u7684\u7684\u8fb9\u4e5f\u770b\u505a\u70b9\u53cc\u3002\n\n\u5173\u4e8e\u5706\u65b9\u6811\u7684\u51e0\u4e2a\u6027\u8d28\uff1a\n\n- \u4e0e\u6bcf\u4e2a\u5706\u70b9\u76f8\u8fde\u7684\u5b9a\u4e3a\u65b9\u70b9\n- \u4e0e\u6bcf\u4e2a\u65b9\u70b9\u76f8\u8fde\u7684\u5b9a\u4e3a\u5706\u70b9\n\n\u8fd9\u4e24\u4e2a\u6027\u8d28\u90fd\u6bd4\u8f83\u663e\u7136\u3002\n\n- \u6700\u591a\u6709$2n-1$\u4e2a\u70b9\n\n\u8003\u8651\u539f\u56fe\u7684\u6781\u7aef\u60c5\u51b5\uff0c\u5373\u539f\u56fe\u672c\u8eab\u4e3a\u4e00\u68f5\u6811\uff0c\u7531\u4e8e\u6211\u4eec\u628a\u4ec5\u4ec5\u8fde\u63a5\u4e24\u4e2a\u70b9\u7684\u8fb9\u4e5f\u770b\u505a\u70b9\u53cc\uff0c\u6811\u6709$n-1$\u6761\u8fb9\uff0c\u6240\u4ee5\u52a0\u4e0a\u539f\u56fe\u7684n\u4e2a\u70b9\uff0c\u5171\u6709$2n-1$\u4e2a\u70b9\u3002\n\n\u5982\u679c\u6ca1\u6709\u4fee\u6539\u7684\u8bdd\uff0c\u77e5\u9053\u5706\u65b9\u6811\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u8fd9\u9898\u5c31\u975e\u5e38\u7b80\u5355\u4e86\uff0c\u786c\u4e0a\u6811\u5256\u6216\u8005$LCT$\u5c31\u5b8c\u4e8b\u4e86\uff0c\u672c\u4eba\u9009\u62e9\u4e86$LCT$\uff0c\u7528$LCT$\u9700\u8981\u6ce8\u610f\u51e0\u70b9\uff0c\u6bcf\u6b21\u6c42$LCA$\u7684\u65f6\u5019\u8981\u91cd\u65b0\u628a\u6839\u8282\u70b9$makeroot$\uff0c\u6bcf\u6b21\u4fee\u6539\u8981\u5148$splay$\u3002\n\n\u8003\u8651\u5982\u4f55\u5904\u7406\u4fee\u6539\u3002\n\n- \u6bcf\u4e2a\u65b9\u70b9\u7ef4\u62a4\u4e00\u4e2a$mulitset$\u7ef4\u62a4\u6700\u5c0f\u503c\uff01\n\n\u663e\u7136\u4e0d\u884c\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u83ca\u82b1\u56fe\u7684\u8bdd\uff0c\u90a3\u4e48\u5355\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6$\\Theta(nlogn)$\uff0c\u603b\u590d\u6742\u5ea6\u53ef\u80fd\u4f1a\u88ab\u5361\u6210$\\Theta(n^2logn)$\n\n\u4f46\u662f\u8fd9\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u601d\u8def\u3002\n\n\u8fd9\u4e2a\u60f3\u6cd5\u7684\u74f6\u9888\u5c31\u5728\u4e8e\u4fee\u6539\u4e00\u4e2a\u5706\u70b9\uff0c\u4e0e\u5b83\u76f8\u5173\u7684\u6240\u6709\u65b9\u70b9\u90fd\u8981\u88ab\u4fee\u6539\uff0c\u6709\u6ca1\u6709\u4ec0\u4e48\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u6bcf\u6b21\u4fee\u6539\u7684\u5f71\u54cd\u6700\u5c0f\u5462\uff1f\n\n\u6bcf\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u7236\u8282\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u6bcf\u4e2a\u65b9\u70b9\u53ea\u7ef4\u62a4\u5b83\u7684\u5b50\u8282\u70b9\uff0c\u4e0d\u7ef4\u62a4\u7236\u4eb2\u5706\u70b9\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6b21\u4fee\u6539\u53ea\u9700\u8981\u4fee\u6539\u6bcf\u4e2a\u5706\u70b9\u7684\u7236\u4eb2\u65b9\u70b9\uff0c\u5355\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6$\\Theta(logn)$\uff0c\u6839\u8282\u70b9\u7279\u6b8a\u5904\u7406\uff0c\u53ea\u4fee\u6539\u672c\u8eab\u7684\u503c\u3002\n\n\u4f46\u662f\u8fd9\u6837\u8fd8\u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff0c\u56e0\u4e3a\u4e0d\u7ef4\u62a4\u65b9\u70b9\u7684\u7236\u8282\u70b9\uff0c\u6240\u4ee5\u5f53\u4e24\u4e2a\u70b9\u7684$lca$\u4e3a\u65b9\u70b9\u65f6\uff0c\u6211\u4eec\u8981\u8ba1\u7b97\u4e0a$lca$\u7684\u7236\u8282\u70b9\u7684\u8d21\u732e\u3002\u81f3\u6b64\uff0c\u672c\u9898\u5b8c\u7ed3\u3002\uff08\u4ee3\u7801\u4ec5\u4f9b\u53c2\u8003\uff0c\u5207\u5fcc\u76f4\u63a5\u6284\u88ad\n\nCode\uff1a\n\n```cpp\n#include <map>\n#include <set>\n#include <cmath>\n#include <ctime>\n#include <queue>\n#include <bitset>\n#include <cstdio>\n#include <vector>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <list>\n#define inl inline\n#define re register int\n#define ll long long\n#define fa(x) t[x].fa\n#define ls(x) t[x].child[0]\n#define rs(x) t[x].child[1]\n#define lowbit(x) ((x) & (-x))\n#define mit mulitset<int>::iterator\nconst int inf  = 0x7fffffff;\nusing namespace std;\ntemplate < class Read >\ninl Read read(void) {\n\tRead x  = 0;\n\tregister bool w  = 0;\n\tregister char c  = getchar();\n\twhile (c  > '9' || c  < '0') {\n\t\tif (c  == '-') w  = 1;\n\t\tc  = getchar();\n\t}\n\twhile (c  >= '0' && c  <= '9') {\n\t\tx  = (x  << 3) + (x  << 1) + (c  ^ 48);\n\t\tc  = getchar();\n\t}\n\treturn w  ? -x  : x;\n}\nint n, m, q, cnt, fa[1000001];\nstruct edge { int next, to; }e[1000001];\nint head[500001], tot;\nmultiset<int>s[100001];\ninl void add(int x, int y) {\n\te[++tot] = edge{ head[x],y  }, head[x] = tot;\n\te[++tot] = edge{ head[y],x  }, head[y] = tot;\n}\nstruct node {\n\tint fa, child[2], w, mn;\n\tbool filp;\n}t[500001];\nnamespace graph {\n\tstruct edge { int next, to; }e[1000001];\n\tint dfn[1000001], low[1000001], st[1000001], top, color[1000001], tot, head[1000001], tim;\n\tinl void add(int x, int y) {\n\t\te[++tot] = edge{ head[x],y }, head[x] = tot;\n\t\te[++tot] = edge{ head[y],x }, head[y] = tot;\n\t}\n\tinl void tarjan(int x) {\n\t\tdfn[x] = low[x] = ++tim;\n\t\tst[++top] = x;\n\t\tfor (re i  = head[x]; i; i  = e[i].next) {\n\t\t\tif (!dfn[e[i].to]) {\n\t\t\t\ttarjan(e[i].to);\n\t\t\t\tlow[x] = min(low[x], low[e[i].to]);\n\t\t\t\tif (low[e[i].to] >= dfn[x]) {\n\t\t\t\t\tcnt++;\n\t\t\t\t\twhile (st[top  + 1] != e[i].to) {\n\t\t\t\t\t\tcolor[st[top]] = cnt;\n\t\t\t\t\t\t::add(cnt, st[top]);\n\t\t\t\t\t\ttop--;\n\t\t\t\t\t}\n\t\t\t\t\t::add(x, cnt);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse low[x] = min(low[x], dfn[e[i].to]);\n\t\t}\n\t}\n};\ninl void maintain(int x) {\n\tif (x  <= n)t[x].mn  = t[x].w;\n\telse t[x].mn  = *s[x  - n].begin();\n\tif (ls(x))t[x].mn  = min(t[x].mn, t[ls(x)].mn);\n\tif (rs(x))t[x].mn  = min(t[x].mn, t[rs(x)].mn);\n}\ninl bool nroot(int x) {\n\treturn ls(fa(x)) == x  || rs(fa(x)) == x;\n}\ninl bool poi(int x) {\n\treturn rs(fa(x)) == x;\n}\ninl void rotate(int x) {\n\tre f  = fa(x), gf  = fa(f), fs  = poi(x), gfs  = poi(f), s  = t[x].child[fs  ^ 1];\n\tif (nroot(f))t[gf].child[gfs] = x;\n\tt[f].child[fs] = s, t[x].child[fs  ^ 1] = f;\n\tif (s)fa(s) = f;\n\tfa(f) = x, fa(x) = gf;\n\tmaintain(f);\n}\ninl void reverse(int x) {\n\tswap(ls(x), rs(x));\n\tt[x].filp  ^= 1;\n}\ninl void pushdown(int x) {\n\tif (t[x].filp) {\n\t\tif (ls(x))reverse(ls(x));\n\t\tif (rs(x))reverse(rs(x));\n\t\tt[x].filp  = 0;\n\t}\n}\ninl void push(int x) {\n\tif (nroot(x))push(fa(x));\n\tpushdown(x);\n}\ninl void splay(int x) {\n\tpush(x);\n\twhile (nroot(x)) {\n\t\tif (nroot(fa(x)))poi(x) == poi(fa(x)) ? rotate(fa(x)) : rotate(x);\n\t\trotate(x);\n\t}\n\tmaintain(x);\n}\ninl void access(int x) {\n\tfor (re i  = 0; x; x  = fa(i  = x)) {\n\t\tsplay(x), rs(x) = i, maintain(x);\n\t}\n}\ninl void makeroot(int x) {\n\taccess(x), splay(x), reverse(x);\n}\ninl void split(int x, int y) {\n\tmakeroot(y), access(x), splay(x);\n}\ninl void link(int x, int y) {\n\tsplit(x, y);\n\tt[y].fa  = x;\n}\ninl int lca(int x, int y) {\n\taccess(y);\n\tre i  = 0;\n\tfor (; x; x  = fa(i  = x)) {\n\t\tsplay(x), rs(x) = i, maintain(x);\n\t}\n\treturn i;\n}\ninl bool spread(void) {\n\tregister char c  = getchar();\n\twhile (c  != 'A'&&c  != 'C')c  = getchar();\n\treturn c  == 'A';\n}\ninl void dfs(int x) {\n\tfor (re i  = head[x]; i; i  = e[i].next) {\n\t\tif (e[i].to  != fa[x]) {\n\t\t\tfa[e[i].to] = x;\n\t\t\tlink(x, e[i].to);\n\t\t\tdfs(e[i].to);\n\t\t\tif (x  > n)s[x  - n].insert(t[e[i].to].w);\n\t\t}\n\t}\n}\nsigned main() {\n\tn  = cnt  = read<int>(), m  = read<int>(), q  = read<int>();\n\tfor (re i  = 1; i  <= n; i++) t[i].w  = read<int>(), s[i].insert(inf);\n\tfor (re i  = 1; i  <= m; i++) graph::add(read<int>(), read<int>());\n\tfor (re i  = 1; i  <= n; i++) {\n\t\tif (!graph::dfn[i])graph::tarjan(i);\n\t}\n\tdfs(1);\n\tre op, x, y;\n\twhile (q--) {\n\t\top  = spread(), x  = read<int>(), y  = read<int>();\n\t\tif (op) {\n\t\t\tmakeroot(1);\n\t\t\tre f  = lca(x, y);\n\t\t\tsplit(x, y);\n\t\t\tre ans  = t[x].mn;\n\t\t\tif (f  > n)ans  = min(ans, t[fa[f]].w);\n\t\t\tprintf(\"%d\\n\", ans);\n\t\t}\n\t\telse {\n\t\t\tsplay(x);\n\t\t\tif (fa[x]) {\n\t\t\t\ts[fa[x] - n].erase(s[fa[x] - n].find(t[x].w));\n\t\t\t\ts[fa[x] - n].insert(t[x].w  = y);\n\t\t\t\tsplay(fa[x]), maintain(fa[x]);\n\t\t\t}\n\t\t\telse t[x].w  = y;\n\t\t}\n\t}\n}\n```\n\n",
        "postTime": 1554105940,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "CF487E tourists \u5706\u65b9\u6811+LCT"
    },
    {
        "content": "\u82e5\u4ece $x$ \u5230 $y$ \u7684\u4efb\u610f\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u5219\u4ece $x$ \u5230 $y$ \u4e00\u5b9a\u53ef\u4ee5\u7ecf\u8fc7\u8be5\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u70b9\u3002\n\n\u7528\u5e7f\u4e49\u5706\u65b9\u6811\u6765\u7ef4\u62a4\u4e00\u822c\u65e0\u5411\u56fe\uff0c\u6bcf\u4e2a\u65b9\u70b9\u7684\u6743\u503c\u4e3a\u5176\u76f8\u90bb\u7684\u5706\u70b9\u7684\u6743\u503c\u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e\u53ef\u4ee5\u7528\u6811\u5256\u6765\u4fee\u6539\u548c\u67e5\u8be2\u3002\n\n\u4f46\u662f\u8fd9\u6837\u4fee\u6539\u7684\u590d\u6742\u5ea6\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u82e5\u4e00\u4e2a\u5706\u70b9\u76f8\u90bb\u6709\u8bb8\u591a\u65b9\u70b9\uff0c\u50cf\u83ca\u82b1\u56fe\u4e00\u6837\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u662f\u65e0\u6cd5\u63a5\u53d7\u7684\u3002\n\n\u8003\u8651\u66f4\u6539\u65b9\u70b9\u7684\u6743\u503c\u5b9a\u4e49\uff0c\u6743\u503c\u6539\u4e3a\u5728\u5706\u65b9\u6811\u4e0a\u7684\u5176\u513f\u5b50\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002\u8fd9\u6837\u4fee\u6539\u4e00\u4e2a\u5706\u70b9\u65f6\uff0c\u53ea\u7528\u8003\u8651\u5176\u7236\u4eb2\u65b9\u70b9\u7684\u6743\u503c\u7684\u53d8\u5316\uff0c\u8fd9\u6837\u4fee\u6539\u590d\u6742\u5ea6\u5c31\u6b63\u786e\u4e86\u3002\n\n\u5728\u6bcf\u4e2a\u65b9\u70b9\u4e0a\u7528 $multiset$ \u6765\u7ef4\u62a4\u5176\u513f\u5b50\u7684\u6743\u503c\uff0c\u67e5\u8be2\u65f6\u4e24\u70b9\u7684 $lca$ \u82e5\u4e3a\u65b9\u70b9\uff0c\u5219\u8fd8\u8981\u8003\u8651\u5176\u7236\u4eb2\u5706\u70b9\u7684\u8d21\u732e\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 400010\n#define maxm 1600010\n#define inf 2000000000\n#define ls (cur<<1)\n#define rs (cur<<1|1)\n#define mid ((l+r)>>1)\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n,m,q,tot,dfn_cnt,cnt,root=1;\nint val[maxn],dfn[maxn],low[maxn],st[maxn];\nint fa[maxn],de[maxn],siz[maxn],son[maxn],top[maxn],rev[maxn],mi[maxm];\nvector<int> ve[maxn];\nmultiset<int> s[maxn];\nchar opt[5];\nstruct edge\n{\n    int to,nxt;\n}e[maxn];\nint head[maxn],edge_cnt;\nvoid add(int from,int to)\n{\n    e[++edge_cnt]=(edge){to,head[from]};\n    head[from]=edge_cnt;\n}\nvoid addedge(int x,int y)\n{\n    ve[x].push_back(y);\n}\nvoid tarjan(int x)\n{\n    dfn[x]=low[x]=++dfn_cnt,st[++cnt]=x;\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(!dfn[y])\n        {\n            tarjan(y),low[x]=min(low[x],low[y]);\n            if(dfn[x]<=low[y])\n            {\n                tot++;\n                int now;\n                do\n                {\n                    now=st[cnt--];\n                    addedge(tot,now),addedge(now,tot);\n                }while(now!=y);\n                addedge(tot,x),addedge(x,tot);\n            }\n        }\n        else low[x]=min(low[x],dfn[y]);\n    }\n}\nvoid dfs_son(int x,int fath)\n{\n    de[x]=de[fath]+1,siz[x]=1,fa[x]=fath,s[fath].insert(val[x]);\n    for(int i=0;i<ve[x].size();++i)\n    {\n        int  y=ve[x][i];\n        if(y==fath) continue;\n        dfs_son(y,x),siz[x]+=siz[y];\n        if(siz[y]>siz[son[x]]) son[x]=y;\n    }\n}\nvoid dfs_chain(int x,int tp)\n{\n    dfn[x]=++dfn_cnt,rev[dfn_cnt]=x,top[x]=tp;\n    if(son[x]) dfs_chain(son[x],tp);\n    for(int i=0;i<ve[x].size();++i)\n    {\n        int y=ve[x][i];\n        if(dfn[y]) continue;\n        dfs_chain(y,y);\n    }\n}\nvoid build(int l,int r,int cur)\n{\n    if(l==r)\n    {\n        int x=rev[l];\n        if(x<=n) mi[cur]=val[x];\n        else mi[cur]=*s[x].begin();\n        return;\n    }\n    build(l,mid,ls),build(mid+1,r,rs);\n    mi[cur]=min(mi[ls],mi[rs]);\n}\nvoid modify(int l,int r,int pos,int v,int cur)\n{\n    if(l==r)\n    {\n        mi[cur]=v;\n        return;\n    }\n    if(pos<=mid) modify(l,mid,pos,v,ls);\n    else modify(mid+1,r,pos,v,rs);\n    mi[cur]=min(mi[ls],mi[rs]);\n}\nint query(int L,int R,int l,int r,int cur)\n{\n    if(L<=l&&R>=r) return mi[cur];\n    int v=inf;\n    if(L<=mid) v=min(v,query(L,R,l,mid,ls));\n    if(R>mid) v=min(v,query(L,R,mid+1,r,rs));\n    return v;\n}\nint ask(int x,int y)\n{\n    int v=inf;\n    while(top[x]!=top[y])\n    {\n        if(de[top[x]]<de[top[y]]) swap(x,y);\n        v=min(v,query(dfn[top[x]],dfn[x],1,tot,root));\n        x=fa[top[x]];\n    }\n    if(dfn[x]>dfn[y]) swap(x,y);\n    v=min(v,query(dfn[x],dfn[y],1,tot,root));\n    if(x>n) v=min(v,val[fa[x]]);\n    return v;\n}\nint main()\n{\n    read(n),read(m),read(q),tot=n,val[0]=inf;\n    for(int i=1;i<=n;++i) read(val[i]);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y;\n        read(x),read(y);\n        add(x,y),add(y,x);\n    }\n    tarjan(1),dfn_cnt=0,memset(dfn,0,sizeof(dfn));\n    dfs_son(1,0),dfs_chain(1,1),build(1,tot,root);\n    while(q--)\n    {\n        int x,y;\n        scanf(\"%s\",opt),read(x),read(y);\n        if(opt[0]=='C')\n        {\n            s[fa[x]].erase(s[fa[x]].find(val[x]));\n            s[fa[x]].insert(y),val[x]=y;\n            modify(1,tot,dfn[x],y,root);\n            modify(1,tot,dfn[fa[x]],*s[fa[x]].begin(),root);\n        }\n        else printf(\"%d\\n\",ask(x,y));\n    }\n    return 0;\n}\n```",
        "postTime": 1595648181,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF487E \u3010Tourists\u3011"
    },
    {
        "content": "## \u5706\u65b9\u6811+\u6811\u94fe\u5256\u5206\n\n[\u535a\u5ba2\u9605\u8bfb](https://www.cnblogs.com/wljss/p/12620024.html)\n\n\u5148\u5efa\u51fa\u6765\u5706\u65b9\u6811\uff0c\u5706\u70b9\u4e3a\u672c\u8eab\u7684\u6743\u503c\uff0c\u65b9\u70b9\u4e3a\u4e0e\u4e4b\u76f8\u8fde\u7684\u5706\u70b9\u7684\u6700\u5c0f\u503c\u3002\n\n\u5f88\u660e\u663e\u7b54\u6848\u5c31\u662f\u8be2\u95ee\u7684\u4e24\u70b9\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\u3002\n\n\u8003\u8651\u4fee\u6539\u64cd\u4f5c\n\n$1$ .\u5706\u70b9\uff1a\u76f4\u63a5\u6539\n\n$2$ .\u65b9\u70b9\uff1a\u5bf9\u6bcf\u4e2a\u65b9\u70b9\u5f00\u4e00\u4e2a $multiset$ \uff0c\u5b58\u50a8\u76f8\u90bb\u7684\u70b9\u7684\u6743\u503c\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u7684\u8bdd\u4fee\u6539\u4e00\u4e2a\u5706\u70b9\u7684\u65f6\u5019\u4f1a\u4fee\u6539\u5f88\u591a\u65b9\u70b9\uff0c\u6548\u7387\u4f4e\u3002\n\n\u6211\u4eec\u5c06 $multiset$ \u6539\u4e3a\u5b58\u50a8\u513f\u5b50\u7684\u6743\u503c\uff0c\u8fd9\u6837\u6211\u4eec\u4fee\u6539\u5706\u70b9\u7684\u65f6\u5019\u5c31\u53ea\u7528\u4fee\u6539\u76f8\u5e94\u7684\u7236\u4eb2\u8282\u70b9\u4e86\u3002\n\n\u7528\u6811\u5256\u7ef4\u62a4\u4fee\u6539\u548c\u67e5\u8be2\u64cd\u4f5c\u5c31\u884c\u4e86\u3002\u6ce8\u610f\u67e5\u8be2\u65f6\u82e5 $lca$ \u662f\u65b9\u70b9\uff0c\u8fd8\u8981\u8003\u8651\u5176\u7236\u4eb2\u5706\u70b9\u3002\n\n\u6ce8\u610f $multiset$ \u7684\u5220\u9664\u64cd\u4f5c\u7684\u6b63\u786e\u7528\u6cd5\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<set>\n#define lson (k<<1)\n#define rson ((k<<1)|1)\nusing namespace std;\nint n, m, q, tot, Tot, num, Top, x, y, cnt, a, b;\nconst int N = 400010;\nint head[N], to[N], nt[N], Head[N], To[N], Nt[N], dfn[N], low[N], zhan[N], w[N], nfd[N], siz[N], son[N], top[N], dep[N], fa[N], tr[N << 2];\nchar opt[3];\nmultiset<int>s[N];\nmultiset<int>::iterator it;\nvoid add(int f, int t)\n{\n\tto[++tot] = t; nt[tot] = head[f]; head[f] = tot;\n}\nvoid ADD(int f, int t)\n{\n\tTo[++Tot] = t; Nt[Tot] = Head[f]; Head[f] = Tot;\n}\nvoid Tarjan(int x)\n{\n\tdfn[x] = low[x] = ++cnt; zhan[++Top] = x;\n\tfor (int i = Head[x]; i; i = Nt[i])\n\t\tif (!dfn[To[i]])\n\t\t{\n\t\t\tTarjan(To[i]); low[x] = min(low[x], low[To[i]]);\n\t\t\tif (low[To[i]] >= dfn[x])\n\t\t\t{\n\t\t\t\tadd(++num, x); add(x, num);\n\t\t\t\tint t;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tt = zhan[Top--]; add(num, t); add(t, num);\n\t\t\t\t} while (t != To[i]);\n\t\t\t}\n\t\t}\n\t\telse low[x] = min(low[x], dfn[To[i]]);\n}\nvoid dfs1(int x, int f)\n{\n\tfa[x] = f; dep[x] = dep[f] + 1; siz[x] = 1;\n\tif (x <= n && f)s[f].insert(w[x]);\n\tfor (int i = head[x]; i; i = nt[i])\n\t\tif (to[i] != f)\n\t\t{\n\t\t\tdfs1(to[i], x);\n\t\t\tsiz[x] += siz[to[i]];\n\t\t\tif (siz[to[i]] > siz[son[x]])son[x] = to[i];\n\t\t}\n\tif (x > n)w[x] = *s[x].begin();\n}\nvoid dfs2(int x, int t)\n{\n\ttop[x] = t; dfn[x] = ++cnt; nfd[cnt] = x;\n\tif (son[x])dfs2(son[x], t);\n\telse return;\n\tfor (int i = head[x]; i; i = nt[i])\n\t\tif (to[i] != fa[x] && to[i] != son[x])dfs2(to[i], to[i]);\n}\nvoid pushup(int k)\n{\n\ttr[k] = min(tr[lson], tr[rson]);\n}\nvoid build(int k, int l, int r)\n{\n\tif (l == r)\n\t{\n\t\ttr[k] = w[nfd[l]];\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(lson, l, mid); build(rson, mid + 1, r);\n\tpushup(k);\n}\nint ask(int k, int l, int r, int x, int y)\n{\n\tif (x <= l && r <= y)return tr[k];\n\tint mid = (l + r) >> 1, res = 2e9;\n\tif (x <= mid)res = min(res, ask(lson, l, mid, x, y));\n\tif (mid + 1 <= y)res = min(res, ask(rson, mid + 1, r, x, y));\n\treturn res;\n}\nvoid change(int k, int l, int r, int pos, int val)\n{\n\tif (l == r)\n\t{\n\t\ttr[k] = val;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (pos <= mid)change(lson, l, mid, pos, val);\n\telse change(rson, mid + 1, r, pos, val);\n\tpushup(k);\n}\nint cask(int x, int y)\n{\n\tint res = 2e9;\n\twhile (top[x] != top[y])\n\t{\n\t\tif (dep[top[x]] < dep[top[y]])swap(x, y);\n\t\tres = min(res, ask(1, 1, num, dfn[top[x]], dfn[x])); x = fa[top[x]];\n\t}\n\tif (dep[x] < dep[y])swap(x, y);\n\tres = min(res, ask(1, 1, num, dfn[y], dfn[x]));\n\tif (y > n)res = min(res, w[fa[y]]);\n\treturn res;\n}\nint main()\n{\n\tcin >> n >> m >> q; num = n;\n\tfor (int i = 1; i <= n; ++i)scanf(\"%d\", &w[i]); w[0] = 2e9;\n\tfor (int i = 1; i <= m; ++i)\n\t{\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tADD(x, y); ADD(y, x);\n\t}\n\tTarjan(1); cnt = 0; dfs1(1, 0); dfs2(1, 1); build(1, 1, num);\n\twhile (q--)\n\t{\n\t\tscanf(\"%s%d%d\", opt, &a, &b);\n\t\tif (opt[0] == 'C')\n\t\t{\n\t\t\tif (fa[a])\n\t\t\t{\n\t\t\t\tit = s[fa[a]].find(w[a]), s[fa[a]].erase(it), s[fa[a]].insert(b);\n\t\t\t\tw[fa[a]] = *s[fa[a]].begin(), change(1, 1, num, dfn[fa[a]], w[fa[a]]);\n\t\t\t}\n\t\t\tw[a] = b; change(1, 1, num, dfn[a], b);\n\t\t}\n\t\telse printf(\"%d\\n\", cask(a, b));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1587335004,
        "uid": 153843,
        "name": "wljss",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF487E \u3010Tourists\u3011"
    },
    {
        "content": "\n### \u89e3\u9898\u601d\u8def\n\u4e0d\u4f1a\u5706\u65b9\u6811\u7684\u53ef\u4ee5\u770b\u6211\u7684\u535a\u5ba2[\u5706\u65b9\u6811\u5b66\u4e60\u8bb0\u5f55\u53ca\u4f8b\u9898](https://blog.csdn.net/jwg2732/article/details/118659688)\u3002\n\n\u9996\u5148Tarjan\u5bfb\u627e\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u7136\u540e\u5efa\u7acb\u5706\u65b9\u6811\uff0c\u6bcf\u4e2a\u65b9\u70b9\u5b58\u8fd9\u4e2a\u70b9\u53cc\u5185\u7684\u6700\u5c0f\u70b9\u6743\u3002\n\n\u5c06\u5706\u65b9\u6811\u6811\u94fe\u5256\u5206\u4e4b\u540e\uff0c\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u5c06\u8fd9\u4e2a\u70b9\u8fde\u7684\u6240\u6709\u65b9\u70b9\u7684\u503c\u66f4\u65b0\u3002\n\n\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\uff0c\u76f4\u63a5\u67e5\u8be2\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u7684\u6700\u5c0f\u503c\u3002\n\n~~\u7136\u540e\u5c31AC\u4e86~~ \u3002\n\n\u600e\u4e48\u53ef\u80fd\u5462\uff0c\u5982\u679c\u4e00\u4e2a\u5706\u70b9\u8fde\u7740\u975e\u5e38\u591a\u4e2a\u65b9\u70b9\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u98de\u5929\u4e86\u3002\n\n\u6b63\u786e\u7684\u505a\u6cd5\u662f\uff1a  \n\n\u5efa\u51fa\u5706\u65b9\u6811\u540e\uff0c\u6bcf\u4e2a\u65b9\u8282\u70b9\u7684\u503c\u662f\u5b83\u7684\u6240\u6709\u5b50\u8282\u70b9\u7684\u6700\u5c0f\u503c\uff0c\u800c\u4e0d\u5305\u62ec\u7236\u8282\u70b9\n\u53ef\u4ee5\u7528multiset\u7ef4\u62a4\u6bcf\u4e2a\u65b9\u70b9\u7684\u6743\u503c\u3002\n\n\u90a3\u4e48\u4fee\u6539\u64cd\u4f5c\u65f6\uff0c\u53ea\u9700\u8981\u66f4\u65b0\u8fd9\u4e2a\u70b9\u548c\u5b83\u7684\u7236\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u67e5\u8be2\u65f6\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u70b9\u7684LCA\u662f\u65b9\u70b9\uff0c\u4ed6\u5e94\u8be5\u6709\u4ed6\u7236\u4eb2\u5706\u70b9\u7684\u503c\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5b58\u50a8\uff0c\u56e0\u6b64\u5728\u67e5\u8be2\u4e00\u4e0bLCA\u7684\u7236\u8282\u70b9\u7684\u503c\u5c31\u884c\u4e86\u3002\n\n\u5176\u4f59\u7684\u5c31\u662f\u6811\u5256\u7684\u57fa\u672c\u64cd\u4f5c\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nconst LL N = 2e5+7;\nconst LL INF = 1e9+7; \nconst LL maxn=1e5+7;\nstruct node\n{\n\tLL y,next;\n}e[2*N];\nLL link[N],t=0,w[N],n,m,q,a[N];\nvoid add(LL x,LL y)\n{\n\te[++t].y=y;\n\te[t].next=link[x];\n\tlink[x]=t;\n}\ninline LL read()\n{\n\tLL X=0; bool flag=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') flag=0; ch=getchar();}\n\twhile(ch>='0'&&ch<='9') {X=(X<<1)+(X<<3)+ch-'0'; ch=getchar();}\n\tif(flag) return X;\n\treturn ~(X-1);\n}\nstack<LL> st;\nLL dfn[maxn],low[maxn];\nbool cut[maxn];\nvector<LL> Dcc[N];\nLL num=0,root,cnt=0;\nLL Size=0;\nvoid tarjan(LL x)\n{\n\tdfn[x]=low[x]=++num;\n\tst.push(x);\n\tif(x==root&&link[x]==0)\n\t{\n\t\tDcc[++cnt].push_back(x);\n\t\treturn;\n\t}\n\tLL flag=0;\n\tfor(LL i=link[x];i;i=e[i].next)\n\t{\n\t\tLL y=e[i].y;\n\t\tif(!dfn[y])\n\t\t{\n\t\t\ttarjan(y);\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t\tif(low[y]>=dfn[x])\n\t\t\t{\n\t\t\t\tflag++;\n\t\t\t\tif(x!=root||flag>1) cut[x]=1;\n\t\t\t\tcnt++;\n\t\t\t\tLL z;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tz=st.top();\n\t\t\t\t\tst.pop();\n\t\t\t\t\tDcc[cnt].push_back(z);\n\t\t\t\t}while(z!=y);\n\t\t\t\tDcc[cnt].push_back(x);\n\t\t\t}\n\t\t}\n\t\telse low[x]=min(low[x],dfn[y]);\n\t}\n}\nLL dep[N],fa[N],siz[N],son[N],top[N],id[N];\nvoid dfs1(LL x,LL pre)\n{\n\tdep[x]=dep[pre]+1;\n\tfa[x]=pre;\n\tsiz[x]=1;\n\tfor(LL i=link[x];i;i=e[i].next)\n\t{\n\t\tLL y=e[i].y;\n\t\tif(y==pre) continue;\n\t\tdfs1(y,x);\n\t\tsiz[x]+=siz[y];\n\t\tif(siz[y]>siz[son[x]])\n\t\t{\n\t\t\tson[x]=y;\n\t\t}\n\t}\n}\nLL idx;\nvoid dfs2(LL x,LL topth)\n{\n\tid[x]=++idx;\n\ttop[x]=topth;\n\tif(!son[x]) return;\n\tdfs2(son[x],topth);\n\tfor(LL i=link[x];i;i=e[i].next)\n\t{\n\t\tLL y=e[i].y;\n\t\tif(y==fa[x]||y==son[x]) continue;\n\t\tdfs2(y,y);\n\t}\n}\nLL Min[N<<2];\nvoid pushup(LL k)\n{\n\tMin[k]=min(Min[k<<1],Min[k<<1|1]);\n}\nvoid build(LL k,LL l,LL r)\n{\n\tif(l==r) \n\t{\n\t\tMin[k]=w[l];\n\t\treturn;\n\t}\n\tLL mid=(l+r)>>1;\n\tbuild(k<<1,l,mid);\n\tbuild(k<<1|1,mid+1,r);\n\tpushup(k);\n}\nmultiset<LL> S[N];\nvoid construct()\n{\n\tt=0;\n\tmemset(link,0,sizeof(link));\n\tfor(LL i=1;i<=cnt;i++)\n\t{\n\t\tLL x=++Size;\n\t\tfor(LL j=0;j<Dcc[i].size();j++)\n\t\t{\n\t\t\tLL y=Dcc[i][j];\n\t\t\tadd(x,y);\n\t\t\tadd(y,x);\n\t\t}\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tfor(LL i=1;i<=n;i++)\n\tw[id[i]]=a[i];\n\tfor(LL x=n+1;x<=Size;x++)\n\t{\n\t\tfor(LL i=link[x];i;i=e[i].next)\n\t\t{\n\t\t\tLL y=e[i].y;\n\t\t\tif(y==fa[x]) continue;\n\t\t\tS[x].insert(w[id[y]]);\n\t\t}\n\t\tif(S[x].empty()) w[id[x]]=INF;\n\t\telse w[id[x]]=*S[x].begin();\n\t}\n\tbuild(1,1,Size);\n}\nvoid update(LL k,LL l,LL r,LL x,LL v)\n{\n\tif(l==r&&l==x)\n\t{\n\t\tMin[k]=v;\n\t\treturn;\n\t}\n\tLL mid=(l+r)>>1;\n\tif(x<=mid) update(k<<1,l,mid,x,v);\n\telse update(k<<1|1,mid+1,r,x,v);\n\tpushup(k);\n}\nLL query(LL k,LL l,LL r,LL L,LL R)\n{\n\tif(L<=l&&r<=R) return Min[k];\n\tLL mid=(l+r)>>1;\n\tLL res=INF;\n\tif(L<=mid) res=min(res,query(k<<1,l,mid,L,R));\n\tif(R>mid) res=min(res,query(k<<1|1,mid+1,r,L,R));\n\treturn res;\n}\nvoid change(LL x,LL v)\n{\n\tLL f=fa[x];\n\tif(f!=0)\n\t{\n\t\tS[f].erase(S[f].find(w[id[x]]));\n\t\tS[f].insert(v);\n\t\tw[id[f]]=*S[f].begin();\n\t\tupdate(1,1,Size,id[f],w[id[f]]);\n\t}\n\tw[id[x]]=v;\n\tupdate(1,1,Size,id[x],w[id[x]]);\n}\nLL query_chain(LL x,LL y)\n{\n\tLL res=INF;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tres=min(res,query(1,1,Size,id[top[x]],id[x]));\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y]) swap(x,y);\n\n\tres=min(res,query(1,1,Size,id[x],id[y]));\n\tif(x>n)\n\tres=min(res,w[id[fa[x]]]);\n\treturn res;\n}\nint main()\n{\n\tn=read();\n\tm=read();\n\tq=read();\n\tfor(LL i=1;i<=n;i++)\n\ta[i]=read();\n\tfor(LL i=1;i<=m;i++)\n\t{\n\t\tLL x,y;\n\t\tx=read();\n\t\ty=read();\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\troot=1;\n\tSize=n;\n\ttarjan(1);\n\tconstruct();\n\twhile(q--)\n\t{\n\t\tchar opt[3];\n\t\tLL x,y;\n\t\tscanf(\"%s\",opt);\n\t\tx=read();\n\t\ty=read();\n\t\tif(opt[0]=='C') change(x,y);\n\t\telse printf(\"%d\\n\",query_chain(x,y));\n\t}\n\treturn 0;\n}\n```\n\u8fd9\u6837\u5c31\u884c\u4e86\u3002\n",
        "postTime": 1626010452,
        "uid": 128215,
        "name": "Larunatrecy",
        "ccfLevel": 9,
        "title": "CF487E Tourists\uff08\u5706\u65b9\u6811+\u6811\u94fe\u5256\u5206\uff09"
    },
    {
        "content": "# \u524d\u8a00\n\u8fd0\u7528\u7b97\u6cd5\uff1a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u5706\u65b9\u6811\uff0c\u6811\u94fe\u5256\u5206\uff0csplay\uff08\u53ef\u4ee5\u7528 multiset \u7ef4\u62a4\uff0c\u4e0d\u77e5\u9053 OI \u53ef\u4e0d\u53ef\u4ee5\u4f7f\u7528\uff0c\u6240\u4ee5\u5c31\u7528\u4e86 splay \uff09\u3002\n\n[\u535a\u5ba2\u56ed\u98df\u7528\u66f4\u4f73](https://www.cnblogs.com/C202202chenkelin/p/14668908.html)\u3002\n# \u9898\u76ee\u5927\u610f\n\u6709 $n$ \u4e2a\u70b9\uff0c $m$ \u6761\u8fb9\uff0c\u6bcf\u4e2a\u70b9 $i$ \u90fd\u6709\u70b9\u6743 $w_i$ \u3002\u6709\u4e24\u4e2a\u64cd\u4f5c\uff1a\n1. C a w\uff1a \u8868\u793a a \u70b9\u7684\u6743\u503c\u53d8\u4e3a w\u3002\n2. A a b\uff1a \u6c42\u4ece a \u70b9\u5230 b \u70b9\u7684\u4e00\u6761\u8def\u5f84\u4e0a\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u4e14\u6700\u5c0f\u6743\u503c\u6700\u5c0f\u7684\u4e00\u6761\u8def\u5f84\u7684\u6700\u5c0f\u503c\u3002\n# \u601d\u8def\n\u5148\u8bf4\u660e\u5706\u65b9\u6811\uff0c\u7ecf\u5e38\u7528\u4e8e\u6c42\u89e3\u4e0e\u65e0\u5411\u56fe\u3002\u4e0b\u89c1\u5982\u4f55\u6784\u9020\u5706\u65b9\u6811\uff08\u6765\u81ea WC \u7684 PPT \u7684\u4e00\u5f20\u56fe\uff09\uff1a\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210416212811134.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZhY2VfdGhlX0JsYXN0,size_16,color_FFFFFF,t_70)\n\n\u5148\u7528 Tarjan \u7b97\u6cd5\u6c42\u51fa\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u539f\u6709\u7684\u70b9\u6210\u4e3a\u5706\u70b9\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u5efa\u7acb\u4e00\u4e2a\u65b9\u70b9\uff0c\u5c06\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u5185\u7684\u6240\u6709\u5706\u70b9\u90fd\u8fde\u5411\u8fd9\u4e2a\u65b9\u70b9\u3002\n\n\u663e\u7136\uff0c\u6709\u4e00\u6761\u91cd\u8981\u6027\u8d28\u6210\u7acb\uff1a\u6bcf\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\uff0c\u4e00\u4e2a\u662f\u5706\u70b9\uff0c\u4e00\u4e2a\u662f\u65b9\u70b9\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u666e\u901a\u7684\u65e0\u5411\u56fe\uff0c\u8981\u8fdb\u884c\u7ef4\u62a4\u5176\u70b9\u6743\uff0c\u53ef\u4ee5\u5148\u5c06\u5176\u53d8\u4e3a\u5706\u65b9\u6811\uff0c\u5728\u8fdb\u884c\u7ef4\u62a4\uff0c\u662f\u4e00\u4e9b\u9898\u7684\u57fa\u672c\u601d\u8def\u3002\u6811\u76f8\u5bf9\u4e8e\u56fe\u6709\u66f4\u597d\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\u7b49\u6765\u7ef4\u62a4\u3002\n\n\u9898\u76ee\u4e2d\u8981\u7ef4\u62a4\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u65b9\u70b9\u7684\u6743\u503c\u5c31\u4e3a\u6240\u8fde\u5706\u70b9\u7684\u6700\u5c0f\u503c\u3002\u6700\u5c0f\u503c\u4f7f\u7528 splay \u7ef4\u62a4\uff0c\u6700\u540e\u6309\u7167\u8981\u6c42\u8fdb\u884c\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u4fee\u6539\u4e00\u4e2a\u5706\u70b9\uff0c\u5c31\u4f1a\u6539\u52a8\u5176\u65c1\u8fb9\u6240\u6709\u7684\u65b9\u70b9\u3002\u8003\u8651\u83ca\u82b1\u56fe\uff0c\u4f1a\u88ab\u5361\u6210 $O(nq)$ \u3002\n\n\u7a0d\u5fae\u5728\u4e0a\u9762\u505a\u51fa\u6539\u52a8\uff0c\u6bcf\u4e2a\u65b9\u70b9\u7684\u6743\u503c\u4e3a\u5b50\u8282\u70b9\u7684\u6743\u503c\uff0c\u6682\u65f6\u4e0d\u8003\u8651\u5176\u7236\u8282\u70b9\u3002\u6811\u5256\u67e5\u8be2\u65f6\uff0c\u82e5\u4e24\u70b9\u7684 LCA \u4e3a\u65b9\u70b9\uff0c\u6700\u5c0f\u503c\u591a\u6bd4\u8f83\u4e00\u4e2a\u7236\u8282\u70b9\u7684\u6743\u503c\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(q\\log^2n+n\\log n)$\n# Code\n```cpp\n#include <stack>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nnamespace Quick_Function {\n\ttemplate <typename Temp> void Read(Temp &x) {\n\t\tx = 0; char ch = getchar(); bool op = 0;\n\t\twhile(ch < '0' || ch > '9') { if(ch == '-') op = 1; ch = getchar(); }\n\t\twhile(ch >= '0' && ch <= '9') { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); }\n\t\tif(op) x = -x;\n\t}\n\ttemplate <typename T, typename... Args> void Read(T &t, Args &... args) { Read(t); Read(args...); }\n\ttemplate <typename Temp> Temp Max(Temp x, Temp y) { return x > y ? x : y; }\n\ttemplate <typename Temp> Temp Min(Temp x, Temp y) { return x < y ? x : y; }\n\ttemplate <typename Temp> Temp Abs(Temp x) { return x < 0 ? (-x) : x; }\n\ttemplate <typename Temp> void Swap(Temp &x, Temp &y) { x ^= y ^= x ^= y; }\n}\nusing namespace Quick_Function;\n#define INF 0x3f3f3f3f\nconst int MAXN = 1e6 + 5;\nstruct edge1 { int To, Next; };\nedge1 edge1[MAXN << 1], edge2[MAXN << 1];\nint head1[MAXN], head2[MAXN];\nint edgetot1, edgetot2;\nvoid Addedge1(int u, int v) {\n\tedge1[++edgetot1].Next = head1[u], edge1[edgetot1].To = v, head1[u] = edgetot1;\n\tedge1[++edgetot1].Next = head1[v], edge1[edgetot1].To = u, head1[v] = edgetot1;\n}\nvoid Addedge2(int u, int v) {\n\tedge2[++edgetot2].Next = head2[u], edge2[edgetot2].To = v, head2[u] = edgetot2;\n\tedge2[++edgetot2].Next = head2[v], edge2[edgetot2].To = u, head2[v] = edgetot2;\n}\nint w[MAXN], n, m, q;\nstack<int> stk;\nint dfn1[MAXN], low[MAXN];\nint tim1, cnt;\nvoid Tarjan(int u) {\n\tdfn1[u] = low[u] = ++tim1; stk.push(u);\n\tfor(int i = head1[u]; i; i = edge1[i].Next) {\n\t\tint v = edge1[i].To;\n\t\tif(!dfn1[v]) {\n\t\t\tTarjan(v);\n\t\t\tlow[u] = Min(low[u], low[v]);\n\t\t\tif(low[v] >= dfn1[u]) {\n\t\t\t\tint Top = -1; cnt++;\n\t\t\t\twhile(Top != v) {\n\t\t\t\t\tTop = stk.top(); stk.pop();\n\t\t\t\t\tAddedge2(Top, cnt);\n\t\t\t\t}\n\t\t\t\tAddedge2(u, cnt);\n\t\t\t}\n\t\t}\n\t\telse low[u] = Min(low[u], dfn1[v]);\n\t}\n}\nstruct Segment_Node {\n\tint Left, Right, MinData;\n\t#define LS(x) (x << 1)\n\t#define RS(x) (x << 1 | 1)\n\t#define L(x) segment_tree[x].Left\n\t#define R(x) segment_tree[x].Right\n\t#define M(x) segment_tree[x].MinData\n};\nstruct Segment_Tree {\n\tSegment_Node segment_tree[MAXN << 2];\n\tvoid Push_Up(int pos) { M(pos) = Min(M(LS(pos)), M(RS(pos))); }\n\tvoid Build(int pos, int l, int r) {\n\t\tL(pos) = l, R(pos) = r;\n\t\tif(l == r) return;\n\t\tint mid = (l + r) >> 1;\n\t\tBuild(LS(pos), l, mid), Build(RS(pos), mid + 1, r);\n\t}\n\tvoid Update(int pos, int x, int k) {\n\t\tif(L(pos) == R(pos)) { M(pos) = k; return; }\n\t\tif(x <= R(LS(pos))) Update(LS(pos), x, k);\n\t\telse Update(RS(pos), x, k);\n\t\tPush_Up(pos);\n\t}\n\tint Query_Min(int pos, int l, int r) {\n\t\tif(l <= L(pos) && R(pos) <= r) return M(pos);\n\t\tint res = INF;\n\t\tif(l <= R(LS(pos))) res = Min(res, Query_Min(LS(pos), l, r));\n\t\tif(r >= L(RS(pos))) res = Min(res, Query_Min(RS(pos), l, r));\n\t\treturn res;\n\t}\n};\nSegment_Tree tree1;\nstruct Splay_Node {\n\tint Child[2], Val, Cnt, Siz, Father, Belong;\n\t#define Son(x, y) splay[x].Child[y]\n\t#define V(x) splay[x].Val\n\t#define C(x) splay[x].Cnt\n\t#define S(x) splay[x].Siz\n\t#define F(x) splay[x].Father\n\t#define B(x) splay[x].Belong\n};\nstruct Splay_Tree {\n\tint root[MAXN], tot;\n\tSplay_Node splay[MAXN * 3];\n\tbool Ident(int pos) { return Son(F(pos), 1) == pos; }\n\tint New(int val, int fa, int now) {\n\t\tF(++tot) = fa;\n\t\tC(tot) = S(tot) = 1;\n\t\tV(tot) = val;\n\t\tB(tot) = now;\n\t\treturn tot;\n\t}\n\tvoid Build() {\n\t\tfor(int i = 1; i <= cnt - n; i++) {\n\t\t\troot[i] = New(-INF, 0, i);\n\t\t\tSon(root[i], 1) = New(INF, root[i], i);\n\t\t}\n\t}\n\tvoid Update(int pos) { S(pos) = C(pos) + S(Son(pos, 0)) + S(Son(pos, 1)); }\n\tvoid Connect(int pos, int fa, int flag) {\n\t\tSon(fa, flag) = pos;\n\t\tF(pos) = fa;\n\t}\n\tvoid Rotate(int pos) {\n\t\tint fa = F(pos), grand = F(fa);\n\t\tint flag1 = Ident(pos), flag2 = Ident(fa);\n\t\tConnect(Son(pos, flag1 ^ 1), fa, flag1);\n\t\tConnect(fa, pos, flag1 ^ 1);\n\t\tConnect(pos, grand, flag2);\n\t\tUpdate(fa);\n\t\tUpdate(pos);\n\t}\n\tvoid Splay(int pos, int to) {\n\t\tfor(int fa = F(pos); F(pos) != to; Rotate(pos), fa = F(pos))\n\t\t\tif(F(fa) != to) Ident(pos) == Ident(fa) ? Rotate(fa) : Rotate(pos);\n\t\tif(!to) root[B(pos)] = pos;\n\t}\n\tvoid Insert(int &pos, int val, int fa) {\n\t\tif(!pos) {\n\t\t\tpos = New(val, fa, B(fa));\n\t\t\tSplay(pos, 0);\n\t\t\treturn;\n\t\t}\n\t\tif(val == V(pos)) {\n\t\t\tC(pos)++;\n\t\t\tSplay(pos, 0);\n\t\t\treturn;\n\t\t}\n\t\telse if(val < V(pos)) Insert(Son(pos, 0), val, pos);\n\t\telse Insert(Son(pos, 1), val, pos);\n\t}\n\tvoid Remove(int pos, int val) {\n\t\tif(!pos) return;\n\t\tif(val == V(pos)) {\n\t\t\tif(C(pos) > 1) {\n\t\t\t\tC(pos)--;\n\t\t\t\tSplay(pos, 0);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(Son(pos, 0)) Rotate(Son(pos, 0)), Remove(pos, val);\n\t\t\telse if(Son(pos, 1)) Rotate(Son(pos, 1)), Remove(pos, val);\n\t\t\telse {\n\t\t\t\tint newroot = F(pos);\n\t\t\t\tSon(F(pos), Ident(pos)) = 0;\n\t\t\t\tSplay(newroot, 0);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\telse if(val < V(pos)) Remove(Son(pos, 0), val);\n\t\telse Remove(Son(pos, 1), val);\n\t}\n\tint Query_Min(int pos) {\n\t\tif(!pos) return INF;\n\t\tif(S(Son(pos, 0)) >= 2) return Query_Min(Son(pos, 0));\n\t\tSplay(pos, 0); return V(pos);\n\t}\n};\nSplay_Tree tree2;\nint dfn2[MAXN], siz[MAXN], dep[MAXN], son[MAXN], fa[MAXN], tp[MAXN];\nint tim2;\nvoid dfs1(int u, int pre) {\n\tdep[u] = dep[pre] + 1, fa[u] = pre, siz[u] = 1;\n\tint maxn = -INF;\n\tfor(int i = head2[u]; i; i = edge2[i].Next) {\n\t\tint v = edge2[i].To;\n\t\tif(v == pre) continue;\n\t\tdfs1(v, u); siz[u] += siz[v];\n\t\tif(siz[v] > maxn) son[u] = v, maxn = siz[v];\n\t}\n}\nvoid dfs2(int u, int Top) {\n\tdfn2[u] = ++tim2, tp[u] = Top;\n\tif(son[u]) dfs2(son[u], Top);\n\tfor(int i = head2[u]; i; i = edge2[i].Next) {\n\t\tint v = edge2[i].To;\n\t\tif(v != son[u] && v != fa[u]) dfs2(v, v);\n\t}\n}\nint Min_Past(int x, int y) {\n\tint res = INF;\n\twhile(tp[x] != tp[y]) {\n\t\tif(dep[tp[x]] < dep[tp[y]]) Swap(x, y);\n\t\tres = Min(res, tree1.Query_Min(1, dfn2[tp[x]], dfn2[x]));\n\t\tx = fa[tp[x]];\n\t}\n\tif(dep[x] > dep[y]) Swap(x, y);\n\tres = Min(res, tree1.Query_Min(1, dfn2[x], dfn2[y]));\n\tif(x > n) res = Min(res, w[fa[x]]);\n\treturn res;\n}\nint main() {\n\tRead(n, m, q); cnt = n;\n\tfor(int i = 1; i <= n; i++) Read(w[i]);\n\tfor(int i = 1, u, v; i <= m; i++)\n\t\tRead(u, v), Addedge1(u, v);\n\tTarjan(1);\n\tdfs1(1, 0); dfs2(1, 1);\n\ttree1.Build(1, 1, tim2);\n\ttree2.Build();\n\tfor(int i = 2; i <= n; i++) tree2.Insert(tree2.root[fa[i] - n], w[i], 0);\n\tfor(int i = 1; i <= n; i++) tree1.Update(1, dfn2[i], w[i]);\n\tfor(int i = n + 1; i <= cnt; i++)\n\t\ttree1.Update(1, dfn2[i], tree2.S(tree2.root[i - n]) == 2 ? INF : tree2.Query_Min(tree2.root[i - n]));\n\tchar opt[2];\n\tfor(int i = 1, a, b; i <= q; i++) {\n\t\tscanf(\"%s\", opt), Read(a, b);\n\t\tif(opt[0] == 'A') printf(\"%d\\n\", Min_Past(a, b));\n\t\telse {\n\t\t\tif(a != 1) {\n\t\t\t\ttree2.Remove(tree2.root[fa[a] - n], w[a]);\n\t\t\t\ttree2.Insert(tree2.root[fa[a] - n], b, 0);\n\t\t\t\tint tmp = tree2.Query_Min(tree2.root[fa[a] - n]);\n\t\t\t\ttree1.Update(1, dfn2[fa[a]], tmp);\n\t\t\t}\n\t\t\ttree1.Update(1, dfn2[a], b), w[a] = b;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1618581094,
        "uid": 254733,
        "name": "Night_Bringer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF487E Tourists"
    },
    {
        "content": "\u9898\u610f\uff1a\n\n> \u6709\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u70b9\u4e0a\u6709\u70b9\u6743\uff0c$q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u6709\u4ee5\u4e0b\u4e24\u79cd\u7c7b\u578b\uff1a\n>\n> - \"C $x\\ y$\"\uff0c\u5c06 $x$ \u70b9\u7684\u70b9\u6743\u6539\u4e3a $y$\u3002\n> - \"A $x\\ y$\"\uff0c\u6c42\u6240\u4ee5 $x\\to y$ \u7684\u7b80\u5355\u8def\u5f84\u4e0a\u70b9\u6743\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\u3002\n>\n> $1\\leq n,m,q\\leq 10^5$\n\n\u9996\u5148\u628a\u63e1\u4f4f\u5173\u952e\u4fe1\u606f\u3002\u672c\u9898\u7684\u9898\u773c\u663e\u7136\u5728\u8fd9\u4e2a\u201c\u7b80\u5355\u8def\u5f84\u201d\u4e0a\u3002\u7b80\u5355\u8def\u5f84\u610f\u5473\u7740\u4e0d\u80fd\u7ecf\u8fc7\u540c\u4e00\u4e2a\u70b9\u3002\n\n\u5f88\u81ea\u7136\u5730\u53ef\u4ee5\u60f3\u5230\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u3002\u663e\u7136\uff0c\u6839\u636e\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u5b9a\u4e49\uff0c\u5728\u540c\u4e00\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8d70\u5230\u5176\u4e2d\u70b9\u6743\u6700\u5c0f\u7684\u70b9\u5e76\u8d70\u5230\u76f8\u90bb\u7684\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u5e76\u4e14\u4e0d\u4f1a\u7ecf\u8fc7\u91cd\u590d\u7684\u70b9\u3002\n\n\u8003\u8651\u7f29\u70b9\u3002\u4e0d\u8fc7\u76f4\u63a5\u7f29\u70b9\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u4e4b\u524d\u6211\u4eec\u9047\u5230\u7684\u8fde\u901a\u5206\u91cf\u90fd\u662f\u201c\u5f3a\u8fde\u901a\u5206\u91cf\u201d\u6216\u201c\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u201d\uff0c\u5bf9\u4e8e\u8fd9\u4e00\u7c7b\u8fde\u901a\u5206\u91cf\u90fd\u6709\u4e00\u4e2a\u7279\u70b9\uff0c\u90a3\u5c31\u662f\u6bcf\u4e2a\u70b9\u6070\u597d\u5c5e\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u6216\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u3002\u800c\u6709\u53ef\u80fd\u51fa\u73b0\u4e00\u4e2a\u70b9\u5c5e\u4e8e\u591a\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u60c5\u51b5\uff0c\u6545\u4e0d\u80fd\u76f4\u63a5\u7f29\u70b9\u3002\n\n\u90a3\u4e48\u600e\u4e48\u529e\u5462\uff1f\u5c31\u8981\u5148\u4ece\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u6027\u8d28\u5f00\u59cb\u8bf4\u8d77\u4e86\u3002\n\n\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u6307\u4e0d\u542b\u5272\u70b9\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe\u3002\u7279\u522b\u5730\uff0c\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u7684\u5b50\u56fe\u4e5f\u662f\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u3002\n\n\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\n\n1. \u70b9\u53cc\u8fde\u901a\u5206\u91cf\u4ee5\u5272\u70b9\u8fde\u63a5\n2. \u6bcf\u6761\u8fb9\u5fc5\u987b\u6070\u597d\u5c5e\u4e8e\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u3002\n3. \u4efb\u610f\u4e24\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u81f3\u591a\u6709\u4e00\u4e2a\u516c\u5171\u70b9\n4. \u540c\u4e00\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\u4efb\u610f\u4e24\u70b9 $u,v$ \u4e4b\u95f4\u7b80\u5355\u8def\u5f84\u7684\u5e76\u96c6\u6070\u597d\u7b49\u4e8e\u6574\u4e2a\u70b9\u53cc\u3002\n\n\u6027\u8d28 1,2,3 \u90fd\u6bd4\u8f83\u663e\u7136\uff0c\u6027\u8d28 4 \u7c89\u5154\u795e\u4ed9\u7ed9\u51fa\u4e86\u4e25\u683c\u8bc1\u660e\uff0c\u7136\u9e45\u6211\u770b\u4e86\u534a\u5929~~\u4e00\u4e2a\u5b57\u4e5f~~\u6ca1\u770b\u61c2\uff0c\u6709\u5174\u8da3\u81ea\u5df1\u53bb\u7ffb\u4ed6\u7684 blog\u3002\n\n\u90a3\u4e48\u4ec0\u4e48\u662f\u5706\u65b9\u6811\u5462\uff1f\u5982\u679c\u6211\u4eec\u5c06\u539f\u56fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u70b9\u770b\u4f5c\u4e00\u4e2a\u201c\u5706\u70b9\u201d\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u65b0\u5efa\u4e00\u4e2a\u201c\u65b9\u70b9\u201d\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u5728\u5176\u5bf9\u5e94\u7684\u65b9\u70b9\u4e0e\u70b9\u53cc\u5f53\u4e2d\u6bcf\u4e2a\u201d\u5706\u70b9\u201c\u4e4b\u95f4\u8fde\u8fb9\uff0c\u90a3\u4e48\u5f97\u5230\u7684\u5c31\u662f\u5706\u65b9\u6811\u3002\n\n\u6bd4\u5982\u4e0b\u56fe\uff1a\n\n![](https://img2018.cnblogs.com/blog/1126418/201907/1126418-20190711015718548-2063534813.png)\n\n\u56de\u5230\u6b64\u9898\u6765\u3002\u5148 tarjan \u6c42\u51fa\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u3002\u5706\u70b9\u4e0a\u7684\u70b9\u6743\u4e3a\u5bf9\u5e94\u70b9\u7684 $w_i$\uff0c\u65b9\u70b9\u4e0a\u7684\u70b9\u6743\u4e3a\u4e0e\u5176\u76f8\u8fde\u7684\u5706\u70b9\u7684\u70b9\u6743\u7684\u6700\u5c0f\u503c\u3002\n\n\u90a3\u4e48\u7b54\u6848\u5373\u4e3a $x,y$ \u4e4b\u95f4\u70b9\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002\n\n\u4e3a\u4ec0\u4e48\uff1f\u8bbe $P$ \u4e3a $x\\to y$ \u7684\u6240\u6709\u8def\u5f84\u7ecf\u8fc7\u7684\u70b9\u7684\u96c6\u5408\u7684\u5e76\u96c6\uff0c\u90a3\u4e48\u7b54\u6848\u663e\u7136\u4e3a $\\min\\limits_{u\\in P}w_u$\u3002\n\n\u90a3\u4e48 $P$ \u7a76\u7adf\u662f\u4e2a\u4ec0\u4e48\u4e1c\u897f\u5462\uff1f\u968f\u4fbf\u627e\u4e00\u6761 $x,y$ \u4e4b\u95f4\u7684\u8def\u5f84 $T$\uff0c\u5047\u8bbe\u5176\u7ecf\u8fc7\u7684\u8fb9\u4e3a $e_1,e_2,\\dots,e_k$\u3002\n\n\u6839\u636e\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u6027\u8d28 2\uff0c\u8fd9\u4e9b\u8fb9\u53ef\u4ee5\u88ab\u5212\u5206\u5230\u4e00\u4e2a\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\u3002\u5047\u8bbe\u8fd9 $k$ \u6761\u8fb9\u603b\u5171\u5c5e\u4e8e $m$ \u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u5176\u4e2d\u8fb9 $e_{i_{j,1}},e_{i_{j,2}},\\dots,e_{i_{j,c_j}}$ \u5c5e\u4e8e\u70b9\u53cc\u8fde\u901a\u5206\u91cf $j$\u3002\n\n\u6839\u636e\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u6027\u8d28 4\uff0c\u8fd9 $c_j$ \u6761\u8fb9\u53ef\u4ee5\u5305\u542b\u6574\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf $j$\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u6240\u6709\u70b9\u90fd\u5e94\u5f53\u5c5e\u4e8e $P$\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u8fd9 $m$ \u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u70b9\u96c6\u7684\u5e76 $\\subseteq P$\u3002\n\n\u800c\u4e0d\u5728\u8fd9 $m$ \u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u70b9\u663e\u7136\u4e0d\u53ef\u80fd\u88ab\u8bbf\u95ee\u5230\uff0c\u4e0d\u7136\u5c31\u8fdd\u53cd\u4e86\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u5b9a\u4e49\u4e86\u3002\n\n\u6545\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6027\u8d28\uff1a\u8fd9 $m$ \u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u70b9\u96c6\u7684\u5e76 $=P$\u3002\n\n\u56de\u5230\u5706\u65b9\u6811\u4e0a\u6765\uff0c$x,y$ \u8def\u5f84\u4e0a\u7684\u65b9\u70b9\u663e\u7136\u5c31\u5bf9\u5e94\u8fd9 $m$ \u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u800c\u6bcf\u4e2a\u65b9\u70b9\u4e0a\u7684\u6743\u503c\u662f\u8fd9\u4e2a\u70b9\u53cc\u4e2d\u6240\u6709\u70b9\u6743\u503c\u7684 $\\min$\uff0c\u6545\u8fd9 $m$ \u4e2a\u65b9\u70b9\u6743\u503c\u7684 $\\min$ \u5c31\u662f $\\min\\limits_{u\\in P}w_u$\u3002\n\n\u7528\u4e2a\u6811\u5256\u7ef4\u62a4\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\u4f46\u8fd9\u6837\u8fd8\u662f\u4f1a\u88ab\u53c9\u6389\u2014\u2014\u8003\u8651\u4e00\u5f20\u83ca\u82b1\u56fe\uff0c\u4fee\u6539\u83ca\u82b1\u56fe\u4e0a\u5ea6\u6570\u4e3a $n-1$ \u7684\u70b9\u5c31\u8981\u4fee\u6539 $n-1$ \u4e2a\u65b9\u70b9\u7684\u6743\u503c\uff0c\u590d\u6742\u5ea6\u6700\u574f\u4e3a $n^2\\log n$\u3002\n\n\u90a3\u4e48\u6709\u4ec0\u4e48\u529e\u6cd5\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2a\u65b9\u70b9\u5f00\u4e00\u4e2a `multiset`\uff0c\u50a8\u5b58\u5b83\u6240\u6709\u513f\u5b50\u7684\u6743\u503c\u3002\u5219\u65b9\u70b9\u7684\u6743\u503c\u5373\u4e3a `multiset` \u4e2d\u7684\u6700\u5c0f\u503c\u3002\u8fd9\u6837\uff0c\u4fee\u6539\u4e00\u4e2a\u5706\u70b9\u65f6\uff0c\u5c31\u53ea\u9700\u8981\u6539\u52a8\u5b83\u7236\u4eb2\u7684`multiset`\u5373\u53ef\u3002\n\n\u7136\u540e\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u82e5\u4e24\u70b9\u4e4b\u95f4\u7684 LCA \u662f\u4e2a\u65b9\u70b9\uff0c\u5219\u5c06\u7b54\u6848\u4e0e LCA \u7684\u7236\u4eb2\uff08\u5fc5\u5b9a\u662f\u4e2a\u5706\u70b9\uff09\u7684\u6743\u503c\u53d6 $\\min$ \u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u5bf9\u6570\u65b9\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define fz(i,a,b) for(int i=a;i<=b;i++)\n#define fd(i,a,b) for(int i=a;i>=b;i--)\n#define ffe(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();it++)\n#define fill0(a) memset(a,0,sizeof(a))\n#define fill1(a) memset(a,-1,sizeof(a))\n#define fillbig(a) memset(a,63,sizeof(a))\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\ntemplate<typename T1,typename T2> void chkmin(T1 &x,T2 y){if(x>y) x=y;}\ntemplate<typename T1,typename T2> void chkmax(T1 &x,T2 y){if(x<y) x=y;}\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntemplate<typename T> void read(T &x){\n\tx=0;char c=getchar();T neg=1;\n\twhile(!isdigit(c)){if(c=='-') neg=-1;c=getchar();}\n\twhile(isdigit(c)) x=x*10+c-'0',c=getchar();\n\tx*=neg;\n}\nconst int MAXN=1e5;\nint n,m,qu,w[MAXN*2+5],cnt;\nnamespace segtree{\n\tstruct node{int l,r,val;} s[MAXN*8+5];\n\tvoid build(int k,int l,int r){\n\t\ts[k].l=l;s[k].r=r;s[k].val=0x3f3f3f3f;if(l==r) return;\n\t\tint mid=(l+r)>>1;build(k<<1,l,mid);build(k<<1|1,mid+1,r);\n\t}\n\tvoid modify(int k,int x,int v){\n\t\tif(s[k].l==s[k].r){s[k].val=v;return;}\n\t\tint mid=(s[k].l+s[k].r)>>1;\n\t\tif(x<=mid) modify(k<<1,x,v);\n\t\telse modify(k<<1|1,x,v);\n\t\ts[k].val=min(s[k<<1].val,s[k<<1|1].val);\n\t}\n\tint query(int k,int l,int r){\n\t\tif(l<=s[k].l&&s[k].r<=r) return s[k].val;\n\t\tint mid=(s[k].l+s[k].r)>>1;\n\t\tif(r<=mid) return query(k<<1,l,r);\n\t\telse if(l>mid) return query(k<<1|1,l,r);\n\t\telse return min(query(k<<1,l,mid),query(k<<1|1,mid+1,r));\n\t}\n}\nnamespace tree{\n\tint hd[MAXN*4+5],nxt[MAXN*4+5],to[MAXN*4+5],ec=0;\n\tvoid adde(int u,int v){to[++ec]=v;nxt[ec]=hd[u];hd[u]=ec;}\n\tint siz[MAXN*2+5],fa[MAXN*2+5],wson[MAXN*2+5],dep[MAXN*2+5];\n\tint top[MAXN*2+5],dfn[MAXN*2+5],tim=0;\n\tvoid dfs1(int x,int f){\n\t\tfa[x]=f;siz[x]=1;\n\t\tfor(int e=hd[x];e;e=nxt[e]){\n\t\t\tint y=to[e];if(y==f) continue;\n\t\t\tdep[y]=dep[x]+1;dfs1(y,x);siz[x]+=siz[y];\n\t\t\tif(siz[y]>siz[wson[x]]) wson[x]=y;\n\t\t}\n\t}\n\tvoid dfs2(int x,int tp){\n\t\tdfn[x]=++tim;top[x]=tp;\n\t\tif(wson[x]) dfs2(wson[x],tp);\n\t\tfor(int e=hd[x];e;e=nxt[e]){\n\t\t\tint y=to[e];if(y==fa[x]||y==wson[x]) continue;\n\t\t\tdfs2(y,y);\n\t\t}\n\t}\n\tmultiset<int> st[MAXN+5];\n\tvoid prework(){\n\t\tdfs1(1,0);dfs2(1,1);segtree::build(1,1,cnt);\n\t\tfor(int i=2;i<=n;i++) w[fa[i]]=min(w[fa[i]],w[i]),st[fa[i]-n].insert(w[i]);\n\t\tfor(int i=1;i<=n-cnt;i++) st[i].insert(0x3f3f3f3f);\n//\t\tfor(int i=1;i<=cnt;i++) printf(\"%d %d %d %d %d %d\\n\",fa[i],siz[i],dep[i],wson[i],top[i],dfn[i]);\n\t\tfor(int i=1;i<=cnt;i++) segtree::modify(1,dfn[i],w[i]);\n\t}\n\tvoid change(int x,int v){\n\t\tif(x!=1){\n\t\t\tst[fa[x]-n].erase(st[fa[x]-n].find(w[x]));st[fa[x]-n].insert(v);\n\t\t\tw[fa[x]]=*st[fa[x]-n].begin();segtree::modify(1,dfn[fa[x]],w[fa[x]]);\n\t\t} w[x]=v;segtree::modify(1,dfn[x],w[x]);\n\t}\n\tint query(int x,int y){\n\t\tif(dep[x]<dep[y]) swap(x,y);\n\t\tint ret=0x3f3f3f3f;\n\t\twhile(top[x]!=top[y]){\n\t\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\t\tchkmin(ret,segtree::query(1,dfn[top[x]],dfn[x]));\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(dep[x]<dep[y]) swap(x,y);\n\t\tchkmin(ret,segtree::query(1,dfn[y],dfn[x]));\n//\t\tprintf(\"%d\\n\",y);\n\t\tif(y>n) chkmin(ret,w[fa[y]]);\n\t\treturn ret;\n\t}\n}\nnamespace graph{\n\tint hd[MAXN*2+5],nxt[MAXN*2+5],to[MAXN*2+5],ec=0;\n\tvoid adde(int u,int v){to[++ec]=v;nxt[ec]=hd[u];hd[u]=ec;}\n\tint dfn[MAXN+5],low[MAXN+5],stk[MAXN+5],top=0,tim=0;\n\tvoid tarjan(int x){\n\t\tdfn[x]=low[x]=++tim;stk[++top]=x;\n\t\tfor(int e=hd[x];e;e=nxt[e]){\n\t\t\tint y=to[e];if(!dfn[y]){\n\t\t\t\ttarjan(y);low[x]=min(low[x],low[y]);\n\t\t\t\tif(low[y]>=dfn[x]){\n\t\t\t\t\tcnt++;w[cnt]=0x3f3f3f3f;int z;\n\t\t\t\t\tdo {\n\t\t\t\t\t\t//printf(\"%d \",stk[top]);\n\t\t\t\t\t\tz=stk[top];tree::adde(cnt,z);tree::adde(z,cnt);top--;\n\t\t\t\t\t} while(z!=y);\n\t\t\t\t\ttree::adde(cnt,x);tree::adde(x,cnt);//printf(\"%d\\n\",x);\n\t\t\t\t}\n\t\t\t} else low[x]=min(low[x],dfn[y]);\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&qu);cnt=n;\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&w[i]);\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v;scanf(\"%d%d\",&u,&v);\n\t\tgraph::adde(u,v);graph::adde(v,u);\n\t} graph::tarjan(1);tree::prework();\n\twhile(qu--){\n\t\tchar opt[3];int x,y;scanf(\"%s%d%d\",opt+1,&x,&y);\n\t\tif(opt[1]=='C') tree::change(x,y);\n\t\telse printf(\"%d\\n\",tree::query(x,y));\n\t}\n\treturn 0;\n}\n/*\n9 9 1\n2\n4\n8\n7\n7\n6\n7\n8\n10\n2 1\n1 7\n3 2\n4 3\n5 4\n5 6\n6 7\n4 8\n2 9\nA 4 3\n*/\n```\n\n",
        "postTime": 1609080888,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF487E \u3010Tourists\u3011"
    },
    {
        "content": "## CF487E Tourists\n\n~~\u524d\u6392\u819c\u62dcT\u795e~~\n\n~~\u4e0a\u9762\u7684\u8bdd\u548c\u8fd9\u9053\u9898\u4e00\u70b9\u5173\u7cfb\u90fd\u6ca1\u6709~~\n\n### \u9898\u610f\n\n\u7ed9\u4e00\u4e2a\u70b9\u5e26\u6743\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6b21\u8be2\u95ee\u67e5\u8be2\u4e24\u70b9\u95f4\u6240\u6709\u7b80\u5355\u8def\u5f84\u4e0a\u6700\u5c0f\u503c\u7684\u6700\u5c0f\u503c\uff0c\u5355\u70b9\u4fee\u6539\u3002\n\n### \u601d\u8def\n\n> \u4e00\u773c\u5706\u65b9\u6811\u3002\t\t\t\t\t\t\t\t\u2014\u2014@gxy001\n\n\u8fd9\u79cd\u9898\u53ea\u6709\u5728\u6811\u4e0a\u505a\u624d\u6bd4\u8f83\u597d\u5904\u7406\u8fd9\u4e48\u591a\u6b21\u8be2\u95ee\u3002\u8003\u8651\u5e7f\u4e49\u5706\u65b9\u6811\uff0c\u7f29\u5b8c\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u540e\u5efa\u7acb\u7684\u65b9\u70b9\u548c\u5706\u70b9\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u627e\u7684\u662f\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u5fc5\u987b\u5c06\u4ee3\u8868\u6574\u4e2a\u70b9\u53cc\u7684\u65b9\u70b9\u7684\u6743\u503c\u8bbe\u4e3a\u4e0e\u5176\u76f8\u8fde\u7684\u6240\u6709\u5706\u70b9\u7684\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002\u7528\u4e00\u4e2a multiset \u6216\u8005\u4e00\u4e2a\u53ef\u5220\u5806\uff08\u6216\u8005\u5806\u5e26\u61d2\u60f0\u5220\u9664\uff09\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u6811\u4e0a\u4f7f\u7528\u6811\u5256\u8fdb\u884c\u67e5\u8be2\u4e86\u3002\n\n\u4f46\u662f\u8fd9\u9898\u5e26\u4fee\u6539\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6309\u7167\u4e0a\u9762\u7684\u65b9\u6cd5\uff0c\u66f4\u6539\u4e00\u4e2a\u5706\u70b9\u5c31\u5fc5\u987b\u904d\u5386\u4e0e\u5176\u76f8\u8fde\u7684\u6240\u6709\u65b9\u70b9\u8fdb\u884c\u4fee\u6539\u3002\u8fd9\u6837\u4f1a\u88ab\u83ca\u82b1\u56fe\u5361\u6b7b\u3002\u4e8e\u662f\u6211\u4eec\u7528\u4e00\u4e2a\u7ecf\u5178\u5957\u8def\uff1a\u65b9\u70b9\u53ea\u7ef4\u62a4\u5176\u513f\u5b50\u7684\u6743\u503c\u3002\u8fd9\u6837\u6211\u4eec\u67e5\u8be2\u65f6\u65b9\u6cd5\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7\u5982\u679c\u6c42\u51fa\u7684 LCA \u4e3a\u65b9\u70b9\u7684\u8bdd\u9700\u8981\u518d\u8003\u8651\u4e00\u4e0b\u5176\u7236\u4eb2\u8282\u70b9\u7684\u8d21\u732e\u3002\n\n\u7531\u4e8e\u6211\u4eec\u9700\u8981\u533a\u95f4\u67e5\u8be2\u52a0\u4fee\u6539\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5706\u65b9\u6811\u6811\u5256\u5e76\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5c0f\u503c\u3002\n\n### \u4ee3\u7801\n\n\u5982\u679c\u60a8\u8ffd\u6c42\u66f4\u5feb\u901f\u7684\u4ee3\u7801\u4f53\u9a8c\uff0c\u5efa\u8bae\u4f7f\u7528\u624b\u5199\u5806+\u60f0\u6027\u5220\u9664\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\n#include<cmath>\n#include<set>\nusing namespace std;\ninline int read(){\n\tint w=0,x=0;char c=getchar();\n\twhile(!isdigit(c))w|=c=='-',c=getchar();\n\twhile(isdigit(c))x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\treturn w?-x:x;\n}\nnamespace star\n{\n\tconst int maxn=2e5+10,INF=0x3f3f3f3f;\n\tint n,m,Q,a[maxn],cnt;\n\tstruct gragh{\n\t\tint ecnt,head[maxn],to[maxn<<1],nxt[maxn<<1];\n\t\tinline void addedge(int a,int b){\n\t\t\tto[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt;\n\t\t\tto[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt;\n\t\t}\n\t}G1,G2;\n\tint st[maxn],dfn[maxn],tot,id[maxn];\n\tstruct SegmentTree{\n\t\t#define ls (ro<<1)\n\t\t#define rs (ro<<1|1)\n\t\t#define mid ((l+r)>>1)\n\t\tint mn[maxn<<2];\n\t\tinline void pushup(const int &ro){\n\t\t\tmn[ro]=min(mn[ls],mn[rs]);\n\t\t}\n\t\tvoid build(const int& ro=1,const int &l=1,const int &r=cnt){\n\t\t\tif(l==r) return mn[ro]=a[id[l]],void();\n\t\t\tbuild(ls,l,mid);build(rs,mid+1,r);\n\t\t\tpushup(ro);\n\t\t}\n\t\tvoid update(const int &x,const int &ro=1,const int &l=1,const int &r=cnt){\n\t\t\tif(l==r) return mn[ro]=a[id[l]],void();\n\t\t\tif(x<=mid) update(x,ls,l,mid);\n\t\t\telse update(x,rs,mid+1,r);\n\t\t\tpushup(ro);\n\t\t}\n\t\tint query(const int &x,const int &y,const int &ro=1,const int &l=1,const int &r=cnt){\n\t\t\tif(x==l and y==r) return mn[ro];\n\t\t\tif(y<=mid) return query(x,y,ls,l,mid);\n\t\t\telse if(x>mid) return query(x,y,rs,mid+1,r);\n\t\t\telse return min(query(x,mid,ls,l,mid),query(mid+1,y,rs,mid+1,r));\n\t\t}\n\t\t#undef ls\n\t\t#undef rs\n\t\t#undef mid\n\t}T;\n\tvoid tarjan(int x){\n\t\tdfn[x]=id[x]=++tot;\n\t\tst[++st[0]]=x;\n\t\tfor(int i=G1.head[x];i;i=G1.nxt[i]){\n\t\t\tint u=G1.to[i];\n\t\t\tif(!dfn[u]){\n\t\t\t\ttarjan(u);\n\t\t\t\tid[x]=min(id[x],id[u]);\n\t\t\t\tif(id[u]>=dfn[x]){\n\t\t\t\t\tcnt++;\n\t\t\t\t\tint now=-1;\n\t\t\t\t\tG2.addedge(x,cnt);\n\t\t\t\t\twhile(now^u) now=st[st[0]--],G2.addedge(now,cnt);\n\t\t\t\t}\n\t\t\t}else id[x]=min(id[x],dfn[u]);\n\t\t}\n\t}\n\tint dep[maxn],siz[maxn],fa[maxn],son[maxn],top[maxn];\n\tmultiset<int> q[maxn];\n\tvoid dfs1(int x,int f){\n\t\tfa[x]=f,dep[x]=dep[f]+1,siz[x]=1;\n\t\tfor(int i=G2.head[x];i;i=G2.nxt[i]){\n\t\t\tint u=G2.to[i];\n\t\t\tif(u==f)continue;\n\t\t\tdfs1(u,x);\n\t\t\tif(x>n) q[x-n].insert(a[u]);\n\t\t\tsiz[x]+=siz[u];\n\t\t\tif(siz[u]>siz[son[x]])son[x]=u;\n\t\t}\n\t\tif(x>n) a[x]=*q[x-n].begin();\n\t}\n\tvoid dfs2(int x,int topf){\n\t\ttop[x]=topf,dfn[x]=++tot,id[tot]=x;\n\t\tif(!son[x])return;\n\t\tdfs2(son[x],topf);\n\t\tfor(int i=G2.head[x];i;i=G2.nxt[i]){\n\t\t\tint u=G2.to[i];\n\t\t\tif(u==fa[x] or u==son[x])continue;\n\t\t\tdfs2(u,u);\n\t\t}\n\t}\n\tinline int LCA(int x,int y){\n\t\tint ans=INF;\n\t\twhile(top[x]!=top[y]){\n\t\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\t\tans=min(ans,T.query(dfn[top[x]],dfn[x]));\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(dep[x]<dep[y])swap(x,y);\n\t\tans=min(ans,T.query(dfn[y],dfn[x]));\n\t\tif(y>n) ans=min(ans,a[fa[y]]);\n\t\treturn ans;\n\t}\n\tinline bool gc(){\n\t\tchar c=getchar();\n\t\twhile(!isalpha(c))c=getchar();\n\t\treturn c=='C';\n\t}\n\tinline void work(){\n\t\tn=cnt=read(),m=read(),Q=read();\n\t\tfor(int i=1;i<=n;i++) a[i]=read();\n\t\tfor(int i=1;i<=m;i++) G1.addedge(read(),read());\n\t\ttarjan(1);\n\t\ttot=0;\n\t\tdfs1(1,0);\n\t\tdfs2(1,1);\n\t\tT.build();\n\t\twhile(Q--)\n\t\t\tif(gc()){\n\t\t\t\tint x=read(),w=read(),u=fa[x];\n\t\t\t\tif(u)\n\t\t\t\t\tq[u-n].erase(q[u-n].find(a[x])),\n\t\t\t\t\tq[u-n].insert(w),\n\t\t\t\t\ta[u]=*q[u-n].begin(),\n\t\t\t\t\tT.update(dfn[u]);\n\t\t\t\ta[x]=w;\n\t\t\t\tT.update(dfn[x]);\n\t\t\t}else printf(\"%d\\n\",LCA(read(),read()));\n\t}\n}\nsigned main(){\n\tstar::work();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1604571344,
        "uid": 280015,
        "name": "Star_Cried",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF487E \u3010Tourists\u3011"
    },
    {
        "content": "\u5706\u65b9\u6811\u6a21\u677f\u9898\uff08\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\u6c42\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff08\u53ef\u4ee5\u7528\u67d0Tarjan\u7b97\u6cd5\uff09\uff1b\u6811\u94fe\u5256\u5206\u3002\n\n$$$$\n\n## \u9898\u610f\n\nN\u4e2a\u70b9M\u6761\u8fb9\u7684\u56fe\uff0c\u5e26\u70b9\u6743\u3002\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a`C a w` \u4fee\u6539a\u70b9\u6743\u503c\u4e3aw\uff0c\u4ee5\u53ca`A a b`\u67e5\u8be2a\u3001b\u4e4b\u95f4\u4efb\u610f\u4e00\u6761\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u70b9\u6743\u3002\n\n## \u601d\u8def\n\n\u66b4\u529b\u5f88\u597d\u5199\uff0c\u5c31\u8dd1\u51faa\u3001b\u4e4b\u95f4\u6240\u6709\u7b80\u5355\u8def\u5f84\uff0c\u5bf9\u70b9\u6743\u6c42min\u3002\n\n\u90a3\u4e48\u4e3a\u4e86\u4f18\u5316\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u6bd4\u8f83\u5feb\u901f\u7684\u65b9\u6848\u6765\u8868\u793aa\u3001b\u4e4b\u95f4\u6240\u6709\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u70b9\u6240\u6784\u6210\u7684\u96c6\u5408\u3002\u56fe\u7684\u6027\u8d28\u4e0d\u7b97\u597d\uff0c\u4e14\u8fd9\u91cc\u7684\u4fee\u6539\u64cd\u4f5c\u5e76\u6ca1\u6709\u6d89\u53ca\u56fe\u7684\u7ed3\u6784\u53d8\u5316\uff0c\u90a3\u4e48\u806a\u660e\u7684\u8bfb\u8005\u5230\u8fd9\u91cc\u60f3\u5fc5\u5df2\u7ecf\u53d1\u73b0\u4e86\uff08\u5927\u96fe\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7f29\u70b9\u628a\u56fe\u8f6c\u5316\u6210\u6811\u3002\n\n\u90a3\u5c06\u6240\u6709\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u65b0\u5efa\u4e00\u4e2a\u70b9\u4ee3\u8868\u5b83\uff0c\u7136\u540e\u4ec5\u5c06\u6240\u6709\u70b9\u4e0e\u5176\u6240\u5728\u7684\u6240\u6709\u70b9\u53cc\u8054\u901a\u5206\u91cf\u7684\u4ee3\u8868\u70b9\u4e4b\u95f4\u8fde\u8fb9\u3002\u663e\u7136\u4e00\u4e2a\u70b9\u53ef\u4ee5\u540c\u65f6\u5728\u591a\u4e2aBCC\u5185\uff0c\u65b0\u56fe\u53ef\u4ee5\u4fdd\u8bc1\u8054\u901a\u3002\u540c\u65f6\u65b0\u56fe\u4e2d\u82e5\u6709\u73af\uff0c\u5219\u73af\u4e0a\u6240\u6709BCC\u53ef\u4ee5\u7f29\u6210\u4e00\u4e2a\u66f4\u5927\u7684BCC\uff0c\u77db\u76fe\u3002\u6240\u4ee5\u65b0\u56fe\u662f\u4e00\u68f5\u6811\u3002\n\n**\u6211\u4eec\u5c06\u8fd9\u68f5\u6811\u79f0\u4f5c\u5706\u65b9\u6811\uff0c\u539f\u6765\u7684\u70b9\u8bb0\u4e3a\u5706\u70b9\uff0cBCC\u4ee3\u8868\u70b9\u8bb0\u4e3a\u65b9\u70b9\u3002**\n\n\u76f8\u5bf9\u6734\u7d20\u5730\uff1a\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\uff0c\u67e5\u8be2\u6811\u4e0aa\u3001b\u4e4b\u95f4\u7684\u7b80\u5355\u8def\u5f84\uff08\u663e\u7136\u552f\u4e00\uff09\u4e0a\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\u7528\u6811\u5256\u53ef\u4ee5\u8f83\u4e3a\u5bb9\u6613\u5730\u89e3\u51b3\u3002\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u4fee\u6539\u9700\u8981\u4fee\u6539\u7684\u70b9\u5e76\u66f4\u65b0\u5176\u6240\u5728\u7684\u6240\u6709BCC\u7684\u4ee3\u8868\u70b9\u7684\u6743\u503c\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u65b9\u6cd5\u6709\u4e00\u70b9\u95ee\u9898\uff1a\u5982\u679c\u4e00\u4e2a\u70b9\u5bf9\u5e94\u5f88\u591aBCC\uff0c\u518d\u53cd\u590d\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff0c\u90a3\u4e48\u663e\u7136\u590d\u6742\u5ea6\u7206\u70b8\u3002\n\n\u5982\u56fe\u6240\u793a\uff1a\u6bcf\u4e2a\u4ea4\u70b9\u4ee3\u8868\u539f\u56fe\u4e00\u4e2a\u8282\u70b9\uff0c\u663e\u7136\u6bcf\u4e2a\u4e09\u89d2\u5f62\u7684\u4e09\u4e2a\u70b9\u4ee5\u53ca\u4ece\u4e2d\u5fc3\u70b9\u5c04\u51fa\u7684\u7ebf\u6bb5\u4e24\u7aef\u70b9\u90fd\u662f\u4e00\u4e2aBCC\uff0c\u4f7f\u5f97\u4e2d\u95f4\u7684\u70b9\u5bf9\u5e94\u5927\u91cf\u7684BCC\u3002\n\n![#30](https://cdn.luogu.com.cn/upload/image_hosting/vzfvjz6g.png)\n\n\u4f18\u5316\uff1a\u6ce8\u610f\u5230\u201c\u5706\u65b9\u6811\u201d\u662f\u4e00\u68f5\u6811\uff08\u2026\u2026\uff09\u3002\u90a3\u4e48\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u5706\u70b9\u5f53\u6839\uff0c\u5219\u6bcf\u4e2a\u5706\u70b9\u4e4b\u7236\u4e3a\u65b9\u70b9\u3001\u6bcf\u4e2a\u65b9\u70b9\u4e4b\u7236\u4e3a\u5706\u70b9\uff08\u5efa\u6811\u7684\u65f6\u5019\u4fdd\u8bc1\u4e86\u8fd9\u4e00\u70b9\uff09\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u67e5\u8be2(a,b)\u4e4b\u95f4\u7b80\u5355\u8def\u5f84\u4e0a\u6700\u5c0f\u503c\u7684\u65f6\u5019\uff0c\u8def\u5f84\u4e0a\u6240\u6709\u65b9\u70b9\u7684\u7236\u4eb2\u90fd\u5728\u6b64\u8def\u5f84\u5185\uff08\u9664\u975e\uff0c\u5f53a,b\u7684lca\u4e3a\u65b9\u70b9\u65f6\uff0c\u8fd9\u4e2a\u70b9\u7684\u7236\u8282\u70b9\u4e0d\u5728\u8def\u5f84\u5185\u3002\u7279\u5224\u5373\u53ef\uff09\u3002\u7531\u6b64\u6027\u8d28\uff0c\u6211\u4eec\u5728\u4fee\u6539\u65f6\u4ec5\u4fee\u6539\u5706\u70b9\u53ca\u5176\u7236\u8282\u70b9\uff0c\u4ecd\u53ef\u4fdd\u8bc1\u5728\u67e5\u8be2\u65f6\u7b54\u6848\u4e0d\u53d8\u3002\n\n\u5927\u6982\u601d\u8def\u5c31\u8fd9\u6837\u3002\u4e0b\u9762\u662fCode\u3002\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define pii pair<int, int>\n\ninline void cmin(int &x, int y)\n{\n    x = min(x, y);\n}\n\nconst int inf = 1000000007;\n\nint N, M, S, L; // \u70b9\u6570 | \u8fb9\u6570 | \u8be2\u95ee\u6570\u91cf | \u2265\u603b\u70b9\u6570\u7684\u6700\u5c0f2\u7684\u5e42\uff0c\u7528\u4e8e\u7ebf\u6bb5\u6811 | (\u00b4\uff65_\uff65`)\nvector<int> e[100010]; // \u5b58\u8fb9\nint w[200010]; // [1,N]\u90e8\u5206\u5b58\u5706\u70b9\u6743\u503c\uff0c[N,N+bcccnt]\u90e8\u5206\u5b58\u65b9\u70b9\u6743\u503c\n#define ws ws_\nmultiset<int> ws[200010]; // \u7ef4\u62a4\u65b9\u70b9\u7684\u53ef\u53d6\u6743\u503c\u96c6\u5408\u3002ws\u597d\u50cf\u548c\u67d0\u4e2a\u5173\u952e\u5b57\u6216\u8005\u5185\u7f6e\u51fd\u6570\u51b2\u7a81\u4e86\n\n// \u8fd9\u4e00\u5806\u662f\u8ba1\u7b97\u70b9\u53cc\u8054\u901a\u5206\u91cf\u7528\u7684\n// \u987a\u4fbf\uff0c\u5982\u679cTarjan\u5199\u5b58\u70b9\u800c\u4e0d\u662f\u5b58\u8fb9\u7684\u8bdd\u5e94\u8be5\u4f1a\u7b80\u5355\u4e00\u4e9b\nint dfscnt = 0; // \u539f\u56fe\u7684DFS\u5e8f\nint num[100010]; // \u5b58\u50a8\u67d0\u70b9\u7684\u539fDFS\u5e8f\nint lowpt[100010]; // \u5c31\u662fTarjan\u90a3\u4e2alowpt\uff08\u5927\u96fe\uff09\nstack<pii> st; // \u540c\u4e0a\uff08\nint bcccnt = 0; // BCC\u7684\u5e8f\u53f7\nvector<int> bcc[100010]; // \u5b58\u6bcf\u4e2aBCC\u5185\u7684\u70b9\nint col[100010]; // \u7528\u6765\u914d\u5408tbcc[]\u641e\u51fabcc[]\u7684\u2026\u2026\n\n// \u8fd9\u4e00\u5806\u5927\u6982\u662f\u548c\u6811\u5256\u6709\u5173\u7684\nvector<int> ne[200010]; // \u65b0\u8fb9\nint fa[200010]; // \u7236\u8282\u70b9\nint dep[200010]; // \u6df1\u5ea6\nint sz[200010]; // \u5b50\u6811\u5927\u5c0f\nint hson[200100]; // \u91cd\u513f\u5b50\nint reccnt = 0; // \u6811\u7684\u65b0DFS\u5e8f\nint id[200010], rec[200010]; // \u5b58\u50a8\u67d0\u70b9\u7684\u65b0DFS\u5e8f\uff0c\u4ee5\u53ca\u67d0\u4e2a\u5e8f\u53f7\u5bf9\u5e94\u7684\u70b9\nint tp[200010]; // \u94fe\u7684\u9876\u7aef\n\n// \u7ebf\u6bb5\u6811\u7528\u3002\n#define data data_\nint data[800010]; // \u2026\u4f3c\u4e4edata\u4e5f\u548c\u67d0\u4e2a\u5173\u952e\u5b57\u6216\u8005\u5185\u7f6e\u51fd\u6570\u51b2\u7a81\u4e86\n\nvoid DFS(int x, int p) // Tarjan\u6c42\u70b9\u53cc\u8fde\u901a\u5206\u91cf\n{\n    num[x] = ++dfscnt;\n    lowpt[x] = num[x];\n    for (int i = 0; i < e[x].size(); i++)\n    {\n        int &to = e[x][i];\n        if (!num[to])\n        {\n            st.push(make_pair(x, to));\n            DFS(to, x);\n            cmin(lowpt[x], lowpt[to]);\n            if (lowpt[to] >= num[x]) // \u627e\u5230\u4e00\u4e2a\u65b0\u7684BCC\n            {\n                bcccnt++;\n                vector<int> tbcc; // \u53ef\u80fd\u6709\u91cd\u590d\u70b9\u3002\u53bb\u91cd\u4e4b\u540e\u5f97\u5230bcc[]\u3002\n                while (!st.empty() && num[st.top().first] >= num[to])\n                {\n                    tbcc.push_back(st.top().first);\n                    tbcc.push_back(st.top().second);\n                    st.pop();\n                }\n                stack<pii> nst;\n                while (!st.empty() && st.top() != make_pair(x, to))\n                {\n                    nst.push(st.top());\n                    st.pop();\n                }\n                assert(!st.empty());\n                st.pop();\n                tbcc.push_back(x);\n                tbcc.push_back(to);\n                while (!nst.empty())\n                {\n                    st.push(nst.top());\n                    nst.pop();\n                }\n                for (int j = 0; j < tbcc.size(); j++)\n                {\n                    int &cur = tbcc[j];\n                    if (col[cur] != bcccnt)\n                    {\n                        bcc[bcccnt].push_back(cur);\n                        col[cur] = bcccnt;\n                    }\n                }\n            }\n        }\n        else if (to != p && num[to] < num[x])\n        {\n            st.push(make_pair(x, to));\n            cmin(lowpt[x], num[to]);\n        }\n    }\n}\n\nvoid DFS0(int x, int p, int d) // \u6811\u5256\u7b2c\u4e00\u904dDFS\u3002\u6c42fa[],dep[],sz[],hson[]\n{\n    fa[x] = p;\n    dep[x] = d;\n    sz[x] = 1;\n    for (int i = 0; i < ne[x].size(); i++)\n    {\n        int &to = ne[x][i];\n        if (to != p)\n        {\n            DFS0(to, x, d + 1);\n            sz[x] += sz[to];\n        }\n    }\n    int maxsz = -1;\n    hson[x] = -1;\n    for (int i = 0; i < ne[x].size(); i++)\n    {\n        int &to = ne[x][i];\n        if (to != p && sz[to] > maxsz)\n        {\n            maxsz = sz[to];\n            hson[x] = to;\n        }\n    }\n}\n\nvoid DFS1(int x, int p, int t) // \u6811\u5256\u7b2c\u4e8c\u904dDFS\u3002\u6c42\u65b0dfs\u5e8fid[]\u4ee5\u53carec[]\uff0c\u987a\u4fbf\u6c42\u51fatp[]\n{\n    reccnt++;\n    id[x] = reccnt;\n    rec[reccnt] = x;\n    tp[x] = t;\n    if (hson[x] != -1)\n        DFS1(hson[x], x, t); \n    for (int i = 0; i < ne[x].size(); i++)\n    {\n        int &to = ne[x][i];\n        if (to != p && to != hson[x])\n        {\n            DFS1(to, x, to);\n        }\n    }\n}\n\ninline void pushup(int o) // \u7ebf\u6bb5\u6811\u66f4\u65b0\u5f53\u524d\u70b9\n{\n    data[o] = min(data[o << 1], data[o << 1 | 1]);\n}\n\nvoid build(int o, int l, int r) // \u7ebf\u6bb5\u6811\u5efa\u6811\n{\n    if (l == r)\n    {\n        if (l <= N + bcccnt)\n            data[o] = w[rec[l]];\n        else\n            data[o] = inf;\n        return;\n    }\n    int mid = (l + r) >> 1;\n    build(o << 1, l, mid);\n    build(o << 1 | 1, mid + 1, r);\n    pushup(o);\n}\n\nint query(int o, int l, int r, int ql, int qr) // \u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\u6700\u5c0f\u503c\n{\n    if (l == r || (ql <= l && r <= qr))\n        return data[o];\n    int mid = (l + r) >> 1;\n    int res = inf;\n    if (ql <= mid)\n        cmin(res, query(o << 1, l, mid, ql, qr));\n    if (mid + 1 <= qr)\n        cmin(res, query(o << 1 | 1, mid + 1, r, ql, qr));\n    return res;\n}\n\nvoid upd(int o, int l, int r, int pos, int val) // \u7ebf\u6bb5\u6811\u5355\u70b9\u66f4\u65b0\n{\n    if (l == r)\n    {\n        data[o] = val;\n        return;\n    }\n    int mid = (l + r) >> 1;\n    if (pos <= mid)\n        upd(o << 1, l, mid, pos, val);\n    else\n        upd(o << 1 | 1, mid + 1, r, pos, val);\n    pushup(o);\n}\n\ninline int lca(int u, int v) // \u6811\u5256\u6c42lca\n{\n    int fu = tp[u], fv = 304; fv = tp[v]; // FV304\u5929\u4e0b\u7b2c\u4e00\uff08\u65e0\u5173\n    while (fu != fv)\n    {\n        if (dep[fu] > dep[fv])\n        {\n            u = fa[fu];\n            fu = tp[u];\n        }\n        else\n        {\n            v = fa[fv];\n            fv = tp[v];\n        }\n    }\n    if (dep[u] < dep[v])\n        return u;\n    else\n        return v;\n}\n\nint getmin(int u, int v) // \u6811\u5256\u6c42\u6811\u4e0a\u4e24\u70b9\u95f4\u6700\u5c0f\u503c\n{\n    int ans = inf;\n    int fu = tp[u], fv = 304; fv = tp[v];\n    while (fu != fv)\n    {\n        if (dep[fu] > dep[fv])\n        {\n            cmin(ans, query(1, 1, L, id[fu], id[u]));\n            u = fa[fu];\n            fu = tp[u];\n        }\n        else\n        {\n            cmin(ans, query(1, 1, L, id[fv], id[v]));\n            v = fa[fv];\n            fv = tp[v];\n        }\n    }\n    cmin(ans, query(1, 1, L, min(id[u], id[v]), max(id[u], id[v])));\n    int an = lca(u, v);\n    if (an > N) // \u7279\u5224\uff1au,v\u7684lca\u4e3a\u65b9\u70b9\n    {\n        cmin(ans, w[fa[an]]);\n    }\n    return ans;\n}\n\nvoid update(int x, int val) // \u4fee\u6539\u64cd\u4f5c\n{\n    if (fa[x] != -1) // \u66f4\u65b0\u5706\u70b9\u7236\u4eb2\u7684\u6743\u503c\n    {\n        ws[fa[x]].erase(ws[fa[x]].lower_bound(w[x]));\n        ws[fa[x]].insert(val);\n        w[fa[x]] = *ws[fa[x]].begin();\n        upd(1, 1, L, id[fa[x]], w[fa[x]]);\n    }\n    w[x] = val; // \u66f4\u65b0\u5706\u70b9\u6743\u503c\n    upd(1, 1, L, id[x], val);\n}\n\nsigned main()\n{\n    ios::sync_with_stdio(false);\n\n    cin >> N >> M >> S;\n    for (int i = 1; i <= N; i++)\n        cin >> w[i];\n    for (int i = 1; i <= M; i++)\n    {\n        int u, v;\n        cin >> u >> v;\n        e[u].push_back(v);\n        e[v].push_back(u);\n    }\n    DFS(1, -1);\n    L = N + bcccnt;\n    while (L & (L - 1))\n        L++;\n    for (int i = 1; i <= bcccnt; i++) // \u91cd\u65b0\u6784\u56fe\n    {\n        for (int j = 0; j < bcc[i].size(); j++)\n        {\n            int &cur = bcc[i][j];\n            ne[cur].push_back(N + i);\n            ne[N + i].push_back(cur);\n        }\n    }\n    DFS0(1, -1, 1);\n    DFS1(1, -1, 1);\n    for (int i = N + 1; i <= N + bcccnt; i++) // \u6c42\u65b9\u70b9\u521d\u59cb\u6743\u503c\u3002\u6ce8\u610f\u65b9\u70b9\u5e8f\u53f7\u4eceN+1\u5f00\u59cb\n    {\n        for (int j = 0; j < ne[i].size(); j++)\n        {\n            int &to = ne[i][j];\n            if (to != fa[i])\n                ws[i].insert(w[to]);\n        }\n        w[i] = *ws[i].begin();\n    }\n    build(1, 1, L);\n    while (S--)\n    {\n        char op;\n        int x, y;\n        cin >> op >> x >> y;\n        if (op == 'A')\n            cout << getmin(x, y) << endl;\n        else\n            update(x, y);\n    }\n\n    return 0;\n}\n```\n\n\u5c0f\u58f0BB\uff1a\u5176\u5b9e\u4e5f\u6ca1\u6709\u5565\u96be\u70b9\u5751\u4e5f\u4e0d\u591a\uff0c\u53ea\u4e0d\u8fc7\u662f\u51e0\u4e2a\u4e1c\u897f\u7d2f\u52a0\u4e00\u4e0b\u3002\u4f46\u662f\u8c03\u8d77\u6765\u603b\u89c9\u5f97\u6709\u70b9\u5403\u529b\u2026\u2026",
        "postTime": 1595577078,
        "uid": 82472,
        "name": "CHHC",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF487E [ Tourists ]"
    },
    {
        "content": "\u677f\u5b50\u5927\u96c6\u5408\uff1f~~\u90a3\u6211\u4e0d\u770b\u9898\u89e3\u4e5f\u6ca1\u505a\u51fa\u6765/kk~~  \n\u601d\u8def\u4e0d\u7b97\u96be\uff0c\u4f46\u662f\u5b9e\u73b0\u8d77\u6765\u6bd4\u8f83\u7801\u519c  \n\ntarjan \u5efa\u5e7f\u4e49\u5706\u65b9\u6811 + \u5bf9\u5706\u65b9\u6811\u6811\u5256 + \u7528 `multiset` \u7ef4\u62a4\u6bcf\u4e2a\u53cc\u8054\u901a\u5206\u91cf\u6700\u5c0f\u503c  \n\n[\u4f20\u9001\u95e8](http://codeforces.com/problemset/problem/487/E)  \n\u7ed9\u51fa\u4e00\u4e2a\u56fe\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c  \n\u73b0\u5728\u7ed9 $q$ \u4e2a\u64cd\u4f5c  \n\n- \u66f4\u6539\u4e00\u4e2a\u70b9\u7684\u6743\u503c  \n- \u67e5\u8be2 $x$ \u5230 $y$ \u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\uff08\u4e0d\u80fd\u6709\u91cd\u590d\u7684\u70b9\uff09\u4e2d\uff0c\u80fd\u8d70\u5230\u7684\u6700\u5c0f\u6743\u503c\u662f\u591a\u5c11  \n\n-------------------------  \n\n\u9996\u5148\uff0c[\u8981\u4f1a\u7528 multiset](https://blog.csdn.net/sodacoco/article/details/84798621  )\uff0c\u8fd8\u8981\u4f1atarjan\uff0c\u5e76\u4e14\u4f1a\u7528\u4ed6\u6784\u5efa\u5e7f\u4e49\u5706\u65b9\u6811\uff0c[\u8fd9\u91cc](https://www.cnblogs.com/suxxsfe/p/12720339.html)  \n\n\u518d\u6765\u770b\u8fd9\u4e2a\u9898\uff0c\u53ef\u4ee5~~\u731c\u51fa~~ \u4e00\u4e2a\u7ed3\u8bba\uff1a\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u56fe\uff08\u5206\u91cf\uff09\uff0c\u5bf9\u4e8e\u5176\u4e2d\u4efb\u610f\u4e09\u4e2a\u70b9 $a,b,c$\uff0c\u4e00\u5b9a\u80fd\u627e\u51fa\u4e00\u6761 $a,b$ \u95f4\u7684\u7b80\u5355\u8def\u5f84\uff0c\u4f7f\u5f97\u5176\u7a7f\u8fc7 $c$  \n\u56e0\u4e3a\u4e00\u4e2a\u70b9\u53cc\u5e94\u8be5\u662f\u4e00\u4e2a\u73af\uff0c\u7136\u540e\u518d\u52a0\u4e0a\u4e00\u5806\u8fb9\u7ec4\u6210\u7684\uff0c\u6240\u4ee5\u627e\u5230\u4e0a\u9762\u8981\u6c42\u7684\u8fd9\u6837\u4e00\u4e2a\u8def\u5f84\u5176\u5b9e\u5f88\u5bb9\u6613\uff0c\u6240\u4ee5\u5c31 ~~\u611f\u6027\u7406\u89e3~~ \u4e00\u4e0b\u5c31\u597d  \n\u6bd4\u8f83\u8be6\u7ec6\u7684\u8bc1\u660e[CF\u5b98\u65b9\u9898\u89e3](http://codeforces.com/blog/entry/14832)\u4e0a\u6709  \n\n\u90a3\u4e48\uff0c\u6211\u4eec\u53ea\u8981\u8d70\u5230\u4e00\u4e2a\u70b9\u53cc\u4e2d\uff0c\u5c31\u76f4\u63a5\u53d6\u8fd9\u4e2a\u70b9\u53cc\u7684\u6700\u5c0f\u503c\u5c31\u884c\u4e86\uff0c\u7136\u540e\u53ef\u4ee5\u7ee7\u7eed\u5f80\u524d\u8d70\u51fa\u53bb  \n\u6240\u4ee5\u5c31\u5efa\u4e00\u68f5\u5706\u65b9\u6811\u5c31\u597d\u4e86\uff0c\u6bcf\u4e2a\u65b9\u70b9\u7ef4\u62a4\u8fd9\u4e2a\u70b9\u53cc\u4e2d\u7684\u6700\u5c0f\u503c  \n\u5bf9\u6bcf\u4e2a\u65b9\u70b9\uff0c\u8fd8\u8981\u7528\u4e00\u4e2a `multiset`\uff08\u81ea\u5e26\u6392\u5e8f\uff09\u6765\u5b58\u8fd9\u4e2a\u70b9\u53cc\u7684\u6240\u6709\u70b9\u7684\u6743\u503c\uff0c\u65b9\u4fbf\u5220\u9664\u548c\u6dfb\u52a0\u65b0\u6743\u503c\u6765\u5b9e\u73b0\u66f4\u6539  \n\n\u5bf9\u4e8e\u67e5\u8be2\uff0c\u5c31\u76f4\u63a5\u67e5\u8fd9\u4e24\u4e2a\u70b9\u5728\u6811\u4e0a\u7684\u8def\u5f84\u4e2d\u6743\u503c\u6700\u5c0f\u503c\u5c31\u884c\u4e86\uff0c\u7528\u6811\u5256\u7ef4\u62a4  \n\u8003\u8651\u600e\u4e48\u4fee\u6539  \n\u53d1\u73b0\u5982\u679c\u50cf\u4e0a\u9762\u90a3\u6837\u7ef4\u62a4\uff0c\u6bcf\u6b21\u4fee\u6539\u4e00\u4e2a\u5706\u70b9\u6743\u503c\uff0c\u90fd\u4f1a\u6ce2\u53ca\u5230\u4ed6\u5468\u56f4\u6240\u6709\u7684\u65b9\u70b9\uff0c\u5bb9\u6613\u88ab\u83ca\u82b1\u56fe\u5361\u98de  \n\u6240\u4ee5\uff0c\u6bcf\u4e2a\u65b9\u70b9\u7684\u6743\u503c\u5e94\u8be5\u662f\uff1a\u4ed6\u6240\u6709\u76f8\u90bb\u7684\u5706\u70b9\uff08\u5c31\u662f\u4ed6\u6240\u5bf9\u5e94\u7684\u90a3\u4e2a\u70b9\u53cc\u4e2d\u7684\u6240\u6709\u70b9\uff09\uff0c\u9664\u4e86\u5b83\u5728\u5706\u65b9\u6811\u4e0a\u7684\u7236\u4eb2\uff0c\u4e2d\u7684\u70b9\u6743\u6700\u5c0f\u503c  \n\u8fd9\u6837\uff0c\u4fee\u6539\u64cd\u4f5c\u65f6\uff0c\u6bcf\u4e2a\u5706\u70b9\u88ab\u4fee\u6539\uff0c\u90fd\u53ea\u4f1a\u6ce2\u53ca\u5230\u5b83\u7684\u7236\u4eb2\uff0c\u5c31\u53ea\u53bb\u66f4\u6539\u4e00\u4e0b\u7236\u4eb2\u7684\u4fe1\u606f\u5c31\u884c\u4e86  \n\u67e5\u8be2\u65f6\u4e5f\u8981\u52a0\u4e00\u4e2a\uff0c\u5c31\u662f\u5982\u679c $x,y$ \u7684 LCA \u662f\u4e2a\u65b9\u70b9\uff0c\u90a3\u4e48\u8fd8\u8981\u548c\u5b83\u7684\u7236\u4eb2\uff08\u662f\u4e2a\u5706\u70b9\uff09\u7684\u6743\u503c\u53d6 $\\min$  \n\n$\\texttt{code.}$ \u5199\u4e86\u6211\u4e00\u4e0a\u5348/kk  \n\n```cpp  \n#include<cstdio>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<map>\n#include<set>\n#include<iomanip>\n#include<cstring>\n#define reg register\n#define EN std::puts(\"\")\n#define LL long long\ninline int read(){\n\tregister int x=0;register int y=1;\n\tregister char c=std::getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') y=0;c=std::getchar();}\n\twhile(c>='0'&&c<='9'){x=x*10+(c^48);c=std::getchar();}\n\treturn y?x:-x;\n}\n#define N 200006\n#define M 400006\nint n,m;\nint w[N];\nstd::multiset<int>set[N];\nstruct graph{\n\tint fir[N],nex[M],to[M],tot;\n\tinline void add(int u,int v){\n\t\tto[++tot]=v;\n\t\tnex[tot]=fir[u];fir[u]=tot;\n\t}\n}G,T;\nstruct get_bcc{\n\tint top,stack[N];\n\tint dfn[N],low[N],dfscnt;\n\tint bcccnt;\n\tvoid tarjan(int u){\n\t\tdfn[u]=low[u]=++dfscnt;stack[top++]=u;\n\t\tfor(reg int v,i=G.fir[u];i;i=G.nex[i]){\n\t\t\tv=G.to[i];\n\t\t\tif(!dfn[v]){\n\t\t\t\ttarjan(v);low[u]=std::min(low[u],low[v]);\n\t\t\t\tif(low[v]>=dfn[u]){\n\t\t\t\t\tbcccnt++;\n\t\t\t\t\tdo{\n\t\t\t\t\t\tT.add(bcccnt,stack[--top]);T.add(stack[top],bcccnt);\n\t\t\t\t\t}while(stack[top]^v);\n\t\t\t\t\tT.add(bcccnt,u);T.add(u,bcccnt);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse low[u]=std::min(low[u],dfn[v]);\n\t\t}\n\t}\n}BCC;\nstruct TREE{\n\tint fa[N],deep[N],size[N],son[N],index[N];\n\tint top[N],dfn[N],dfscnt;\n\tvoid dfs1(int u,int fat){\n\t\tfa[u]=fat;deep[u]=deep[fat]+1;size[u]=1;\n\t\tfor(reg int v,i=T.fir[u];i;i=T.nex[i]){\n\t\t\tv=T.to[i];\n\t\t\tif(v!=fat){\n\t\t\t\tdfs1(v,u);size[u]+=size[v];\n\t\t\t\tif(size[v]>size[son[u]]) son[u]=v;\n\t\t\t}\n\t\t}\n\t}\n\tvoid dfs2(int u,int topnow){\n\t\ttop[u]=topnow;dfn[u]=++dfscnt;index[dfscnt]=u;\n\t\tif(!son[u]) return;\n\t\tdfs2(son[u],topnow);\n\t\tfor(reg int v,i=T.fir[u];i;i=T.nex[i]){\n\t\t\tv=T.to[i];\n\t\t\tif(!dfn[v]) dfs2(v,v);\n\t\t}\n\t}\n\tstruct tr {\n\t\ttr *ls,*rs;\n\t\tint min;\n\t}dizhi[N<<1],*root=&dizhi[0];\n\tint tot;\n\tinline void pushup(tr *tree){tree->min=std::min(tree->ls->min,tree->rs->min);}\n\tvoid build(tr *tree,int l,int r){\n\t\tif(l==r) return tree->min=w[index[l]],void();\n\t\tint mid=(l+r)>>1;\n\t\ttree->ls=&dizhi[++tot];tree->rs=&dizhi[++tot];\n\t\tbuild(tree->ls,l,mid);build(tree->rs,mid+1,r);\n\t\tpushup(tree);\n\t}\n\tvoid change(tr *tree,int l,int r,int pos,int k){\n\t\tif(l==r) return tree->min=k,void();\n\t\tint mid=(l+r)>>1;\n\t\tif(pos<=mid) change(tree->ls,l,mid,pos,k);\n\t\telse change(tree->rs,mid+1,r,pos,k);\n\t\tpushup(tree);\n\t}\n\tint get_min(tr *tree,int l,int r,int ql,int qr){\n\t\tif(ql<=l&&r<=qr) return tree->min;\n\t\tint mid=(l+r)>>1;\n\t\tif(qr<=mid) return get_min(tree->ls,l,mid,ql,qr);\n\t\tif(ql>mid) return get_min(tree->rs,mid+1,r,ql,qr);\n\t\treturn std::min(get_min(tree->ls,l,mid,ql,qr),get_min(tree->rs,mid+1,r,ql,qr));\n\t}\n\tinline int find(int x,int y){\n\t\tint ret=0x7f7f7f7f;\n\t\twhile(top[x]!=top[y]){\n\t\t\tif(deep[top[x]]<deep[top[y]]) x^=y,y^=x,x^=y;\n\t\t\tret=std::min(ret,get_min(root,1,BCC.bcccnt,dfn[top[x]],dfn[x]));\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(deep[x]>deep[y]) x^=y,y^=x,x^=y;\n\t\tret=std::min(ret,get_min(root,1,BCC.bcccnt,dfn[x],dfn[y]));\n\t\tif(x>n) ret=std::min(ret,w[fa[x]]);\n\t\treturn ret;\n\t}\n}Tree;\nint main(){\n//\t\tstd::freopen(\"tmp.txt\",\"r\",stdin);\n\tBCC.bcccnt=n=read();m=read();int q=read();\n\tfor(reg int i=1;i<=n;i++) w[i]=read();\n\tfor(reg int u,v,i=1;i<=m;i++){\n\t\tu=read();v=read();\n\t\tG.add(u,v);G.add(v,u);\n\t}\n\tBCC.tarjan(1);\n//\t\tstd::printf(\"bcccnt : %d\\ntot of edges : %d\\n\\n\",BCC.bcccnt,T.tot);\n\tTree.dfs1(1,0);\n\tTree.dfs2(1,1);\n\tfor(reg int i=2;i<=n;i++) set[Tree.fa[i]-n].insert(w[i]);\n\t//\u4e00\u5b9a\u4ece 2 \u5f00\u59cb\u5faa\u73af\uff0c\u56e0\u4e3a 1 \u662f\u8ddf\uff0c\u7528\u5b83\u7684\u7236\u4eb2\uff08\u5176\u5b9e\u4ed6\u4e5f\u6ca1\u6709\u7236\u4eb2\uff0c\u8fd9\u91cc\u8bf4\u7684\u662f\u5b83\u7684 fa \u6570\u7ec4\uff09\uff0c\u51cf n \u51cf\u6210\u8d1f\u6570\uff0cRE \n\tfor(reg int i=n+1;i<=BCC.bcccnt;i++)\n\t\tw[i]=set[i-n].empty()?0x7f7f7f7f:*set[i-n].begin();\n\tTree.build(Tree.root,1,BCC.bcccnt);\n\treg int x,y;char op;\n\twhile(q--){\n\t\tstd::scanf(\"%c\",&op);\n\t\tx=read();y=read();\n\t\tif(op=='C'){\n\t\t\tTree.change(Tree.root,1,BCC.bcccnt,Tree.dfn[x],y);\n\t\t\tif(x==1){w[1]=y;continue;}\n\t\t\tint ind=Tree.fa[x]-n;\n\t\t\tset[ind].erase(set[ind].find(w[x]));\n\t\t\tset[ind].insert(y);\n\t\t\tint min=*set[ind].begin();\n\t\t\tw[x]=y;\n\t\t\tif(min!=w[ind+n]) Tree.change(Tree.root,1,BCC.bcccnt,Tree.dfn[ind+n],min);\n\t\t\tw[ind+n]=min;\n\t\t}\n\t\telse std::printf(\"%d\\n\",Tree.find(x,y));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1587706771,
        "uid": 164432,
        "name": "suxxsfe",
        "ccfLevel": 9,
        "title": "CF487E Tourists"
    },
    {
        "content": "# [\u300cCodeforces487E\u300dTourists-\u5706\u65b9\u6811](http://codeforces.com/contest/487/problem/E)\n\n## Description\n\n\u7ed9\u5b9a\u4e00\u5f20\u7b80\u5355\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u8981\u6c42\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n 1. \u4fee\u6539\u4e00\u4e2a\u70b9\u7684\u70b9\u6743\u3002\n\n 2. \u8be2\u95ee\u4e24\u70b9\u4e4b\u95f4\u6240\u6709\u7b80\u5355\u8def\u5f84\u4e0a\u70b9\u6743\u7684\u6700\u5c0f\u503c\u3002\n\n$n,m,q \\leq 10^5$\n\n## Solution\n\n\u5148\u4e0d\u8003\u8651\u4fee\u6539\u3002\n\n\u5706\u65b9\u6811\u6709\u4e00\u4e2a\u6027\u8d28\uff0c\u90a3\u5c31\u662f$(u,v)$\u8def\u5f84\u4e0a\u7684\u65b9\u70b9\u6240\u4ee3\u8868\u7684\u70b9\u53cc\u5e76\u4e3a$(u,v)$\u95f4\u7684\u7b80\u5355\u8def\u5f84\u5e76\u3002\n\n\u6240\u4ee5\u53ea\u9700\u8981\u628a\u65b9\u70b9\u6743\u503c\u8bbe\u4e3a\u5176\u4ee3\u8868\u7684\u70b9\u53cc\u4e2d\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u8003\u8651\u4fee\u6539\uff0c\u53ef\u4ee5\u53d1\u73b0\u82e5\u76f4\u63a5\u5957\u7528\u4e0a\u8ff0\u505a\u6cd5\uff0c\u7531\u4e8e\u6bcf\u4e2a\u5706\u70b9\u8fde\u63a5\u7684\u65b9\u70b9\u6570\u4e3a$O(n)$\u7684\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u4e3a$O(n^2)$\u3002\n\n\u8003\u8651\u4e00\u4e2a\u5e38\u7528\u7684\u5957\u8def\uff0c\u90a3\u5c31\u662f\u628a\u6bcf\u4e2a\u65b9\u70b9\u7684\u6743\u503c\u8bbe\u4e3a\u5b83\u5b50\u8282\u70b9\u7684\u6743\u503c\u6700\u5c0f\u503c\uff0c\u6bcf\u6b21\u4fee\u6539\u65f6\u53ea\u7528\u4fee\u6539\u7236\u8282\u70b9\u5373\u53ef\uff0c\u7528\u5806\u7ef4\u62a4\u3002\n\n\u6ce8\u610f\u5f53$lca$\u4e3a\u65b9\u70b9\u65f6\uff0c\u8981\u7528\u5176\u7236\u8282\u70b9\u6743\u503c\u66f4\u65b0\u7b54\u6848\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int gi()\n{\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') c = getchar();\n\tint sum = 0;\n\twhile ('0' <= c && c <= '9') sum = sum * 10 + c - 48, c = getchar();\n\treturn sum;\n}\n\ninline char gc()\n{\n\tchar c = getchar();\n\twhile (c < 'A' || c > 'Z') c = getchar();\n\treturn c;\n}\n\nconst int maxn = 100005;\n\nint n, m, q, w[maxn << 1];\n\nstruct edge\n{\n\tint to, next;\n} e[maxn << 1];\nint h[maxn], tot;\n\ninline void add(int u, int v)\n{\n\te[++tot] = (edge) {v, h[u]}; h[u] = tot;\n\te[++tot] = (edge) {u, h[v]}; h[v] = tot;\n}\n\nvector<int> to[maxn << 1];\nint cnt, dep[maxn << 1], siz[maxn << 1], son[maxn << 1], ord[maxn << 1], dfn[maxn << 1], low[maxn << 1], Time, fa[maxn << 1], top[maxn << 1];\n\nstruct\n{\n\tpriority_queue<int, vector<int>, greater<int> > q1, q2;\n\tint Top()\n\t{\n\t\twhile (!q2.empty() && q1.top() == q2.top()) q1.pop(), q2.pop();\n\t\treturn q1.top();\n\t}\n\tvoid insert(int x) {q1.push(x);}\n\tvoid erase(int x) {q2.push(x);}\n} val[maxn];\n\nvoid dfs1(int u)\n{\n\tdep[u] = dep[fa[u]] + 1; siz[u] = 1;\n\tfor (int v : to[u])\n\t\tif (v != fa[u]) {\n\t\t\tfa[v] = u; dfs1(v);\n\t\t\tsiz[u] += siz[v];\n\t\t\tif (siz[v] > siz[son[u]]) son[u] = v;\n\t\t\tif (u > n) val[u - n].insert(w[v]);\n\t\t}\n\tif (u > n) w[u] = val[u - n].Top();\n}\n\nvoid dfs2(int u)\n{\n\tord[dfn[u] = ++Time] = u;\n\tif (son[u]) top[son[u]] = top[u], dfs2(son[u]);\n\telse low[top[u]] = Time;\n\t\n\tfor (int v : to[u])\n\t\tif (v != fa[u] && v != son[u]) top[v] = v, dfs2(v);\n}\n\nint rt[maxn << 1], Min[maxn << 3], lch[maxn << 3], rch[maxn << 3];\n\n#define mid ((l + r) >> 1)\n\nvoid build(int &s, int l, int r)\n{\n\ts = ++tot;\n\tif (s > 2e5 * 4) puts(\"fuck you\"), exit(0);\n\tif (l == r) return Min[s] = w[ord[l]], void();\n\tbuild(lch[s], l, mid);\n\tbuild(rch[s], mid + 1, r);\n\tMin[s] = min(Min[lch[s]], Min[rch[s]]);\n}\n\nvoid modify(int &s, int l, int r, int p)\n{\n\tif (l == r) return Min[s] = w[ord[l]], void();\n\tif (p <= mid) modify(lch[s], l, mid, p);\n\telse modify(rch[s], mid + 1, r, p);\n\tMin[s] = min(Min[lch[s]], Min[rch[s]]);\n}\n\nint query(int s, int l, int r, int ql, int qr)\n{\n\tif (ql <= l && r <= qr) return Min[s];\n\tif (qr <= mid) return query(lch[s], l, mid, ql, qr);\n\telse if (ql > mid) return query(rch[s], mid + 1, r, ql, qr);\n\telse return min(query(lch[s], l, mid, ql, qr), query(rch[s], mid + 1, r, ql, qr));\n}\n\nvoid modify(int v, int u)\n{\n\tif (fa[u]) val[fa[u] - n].erase(w[u]), val[fa[u] - n].insert(v), w[fa[u]] = val[fa[u] - n].Top();\n\tw[u] = v; \n\tmodify(rt[top[u]], dfn[top[u]], low[top[u]], dfn[u]);\n\tif (fa[u]) u = fa[u], modify(rt[top[u]], dfn[top[u]], low[top[u]], dfn[u]);\t\n}\n\nint query(int u, int v)\n{\n\tint ans = 1e9;\n\twhile (top[u] != top[v]) {\n\t\tif (dep[top[u]] > dep[top[v]]) ans = min(ans, query(rt[top[u]], dfn[top[u]], low[top[u]], dfn[top[u]], dfn[u])), u = fa[top[u]];\n\t\telse ans = min(ans, query(rt[top[v]], dfn[top[v]], low[top[v]], dfn[top[v]], dfn[v])), v = fa[top[v]];\n\t}\n\tif (dfn[u] > dfn[v]) swap(u, v);\n\tans = min(ans, query(rt[top[v]], dfn[top[v]], low[top[v]], dfn[u], dfn[v]));\n\tif (u > n) ans = min(ans, w[fa[u]]);\n\treturn ans;\n}\n\nnamespace Tarjan\n{\n\n\tint dfn[maxn], low[maxn], Time, stk[maxn], top;\n\n\tvoid dfs(int u)\n\t{\n\t\tdfn[u] = low[u] = ++Time;\n\t\tstk[++top] = u;\n\t\tfor (int i = h[u], v; v = e[i].to, i; i = e[i].next)\n\t\t\tif (!dfn[v]) {\n\t\t\t\tdfs(v);\n\t\t\t\tlow[u] = min(low[u], low[v]);\n\t\t\t\tif (dfn[u] == low[v]) {\n\t\t\t\t\t++cnt;\n\t\t\t\t\twhile (stk[top + 1] != v)\n\t\t\t\t\t\tto[stk[top]].push_back(cnt), to[cnt].push_back(stk[top]), --top;\n\t\t\t\t\tto[u].push_back(cnt), to[cnt].push_back(u);\n\t\t\t\t}\n\t\t\t} else low[u] = min(low[u], dfn[v]);\n\t}\n\t\n}\n\nint main()\n{\n\tn = gi(); m = gi(); q = gi();\n\tfor (int i = 1; i <= n; ++i) w[i] = gi();\n\tfor (int i = 1; i <= m; ++i) add(gi(), gi());\n\n\tcnt = n;\n\tfor (int i = 1; i <= n; ++i)\n\t\tif (!Tarjan::dfn[i]) Tarjan::dfs(i);\n\n\tfor (int i = 1; i <= cnt; ++i)\n\t\tif (!fa[i]) dfs1(i);\n\tTime = 0;\n\tfor (int i = 1; i <= cnt; ++i)\n\t\tif (!top[i]) top[i] = i, dfs2(i);\n\n\ttot = 0;\n\tfor (int i = 1; i <= cnt; ++i)\n\t\tif (top[i] == i) build(rt[i], dfn[i], low[i]);\n\n\tfor (int i = 1; i <= q; ++i) {\n\t\tchar c = gc();\n\t\tif (c == 'C') modify(gi(), gi());\n\t\telse printf(\"%d\\n\", query(gi(), gi()));\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1556098165,
        "uid": 119899,
        "name": "dsidsi",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF487E \u3010Tourists\u3011"
    },
    {
        "content": "$Tarjan$ \u70b9\u53cc + \u5706\u65b9\u6811 + \u6811\u5256 + \u7ebf\u6bb5\u6811 + $multiset$\n\n\u5982\u679c\u4f60\u770b\u5230\u7b97\u6cd5\u5c31\u4f1a\u5199\u7684\u8bdd\uff0c\u8bf4\u660e\u4f60\u975e\u5e38\u7684\u5389\u5bb3\u3002\u3002\u3002\n\n\u521a\u5b66\u5706\u65b9\u6811\u5c31\u505a\u5230\u8fd9\u9898\uff0c\u540e\u6765\u4e0d\u8010\u70e6\u76f4\u63a5\u4e0a\u677f\u5b50\u4e86\u3002\u3002\u3002\n\n### \u524d\u7f6e\u77e5\u8bc6\uff1a\u597d\u7801\u529b\n\n\u7801\u7801\u7801\u2026\u2026\u5982\u679c\u4f60\u60f3\u8981\u5c0f\u6570\u636e\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5 [\u53f3\u8f6c\u51fa\u95e8](http://uoj.ac/problem/30)\n\n### 1\u3001\u65e0\u5411\u56fe\u7684\u5904\u7406\u5229\u5668\uff1a\u5706\u65b9\u6811\n\n\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u5706\u65b9\u6811\u662f\u4ec0\u4e48\uff0c\u4f60\u53ef\u4ee5\u53bb\u505a\u6a21\u677f\u8fd8\u6709 [[SDOI2018]\u6218\u7565\u6e38\u620f](https://www.luogu.org/problemnew/show/P4606)\n\n\u56e0\u4e3a\u8fd9\u9053\u9898\u4e00\u6761\u8def\u5f84\u6bcf\u4e2a\u70b9**\u4e0d\u91cd\u590d**\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0a\u5706\u65b9\u6811\u3002\n\n\u9996\u5148 $Tarjan$ \u70b9\u53cc\u5efa\u51fa\u5706\u65b9\u6811\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u5706\u70b9\u548c\u65b9\u70b9\u8003\u8651\u54ea\u4e9b\u4fe1\u606f\u3002\n\n### 2\u3001\u5bf9\u4e8e\u4e00\u4e2a\u5706\u70b9\n\n\u5706\u70b9\u7684\u8bdd\u5c31\u76f4\u63a5\u8d70\u5427\u3002\u3002\u3002\u53ea\u8981\u7ecf\u8fc7\u7684\u65f6\u5019\u7b97\u4e00\u4e2a\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n### 3\u3001\u5bf9\u4e8e\u4e00\u4e2a\u65b9\u70b9\n\n\u8d70\u5230\u65b9\u70b9\u8bf4\u660e\u8981\u8d70\u51fa\u8fd9\u4e2a\u73af\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u5f0f\u8d70\u51fa\u8fd9\u4e2a\u73af\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/53777.png)\n\n~~\u6bd4\u8f83\u7b80\u964b\uff0c\u4e0d\u8981\u5728\u610f\u3002~~\n\n\u84dd\u8272\u8fb9\u8868\u793a\u65b9\u70b9\u8fde\u5411\u513f\u5b50\uff0c\u7ea2\u8272\u8fb9\u8868\u793a\u65b9\u70b9\u8fde\u5411\u7236\u4eb2\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u8ba1\u7b97\u5706\u70b9\u7684\u65f6\u5019\u8ba1\u7b97\u8fc7\u7236\u4eb2\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5927\u53ef\u4ee5\u53ea\u7ef4\u62a4\u84dd\u8272\u8fb9\u8fde\u5411\u7684\u7ed3\u70b9\u7684\u6743\u503c\u6700\u5c0f\u503c\u3002\n\n\u56e0\u4e3a\u6700\u5c0f\u503c\u6700\u5c11\u4f1a\u6709\u4e00\u4e2a\uff0c\u4e24\u79cd\u65b9\u5f0f\u51fa\u73af\u90fd\u53ef\u4ee5\u81f3\u5c11\u904d\u5386\u5230\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u5f00 $n$ \u4e2a $multiset$ \u5bf9\u4e8e\u65b9\u70b9\u8bb0\u5f55\u6700\u5c0f\u503c\u3002\n\n### 4\u3001\u5408\u5e76\u6700\u5c0f\u503c\u7684\u4fe1\u606f\n\n\u8ba9\u6211\u4eec\u770b\u770b\u64cd\u4f5c\uff1a\n\n\u64cd\u4f5c $1$\uff1a\u5355\u70b9\u4fee\u6539\n\n\u64cd\u4f5c $2$\uff1a\u8def\u5f84\u67e5\u8be2\n\n\u82e5\u6ca1\u4fee\u6539\uff0c\u6211\u4eec\u76f4\u63a5\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\u7ef4\u62a4\u4e00\u4e2a\u6700\u5c0f\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\u76f4\u63a5\u4e0a\u6811\u5256 + \u7ebf\u6bb5\u6811\u3002\n\n\u4e0d\u8fc7\u8fd8\u8981\u7279\u5224\uff01\u82e5 $LCA(x,y)$ \u662f\u65b9\u70b9\u7684\u8bdd\uff0c\u53ef\u4ee5\u7ed5\u8fc7\u6765\uff0c\u6240\u4ee5\u8fd8\u8981\u5bf9 $val[fa[x]]$ \u53d6\u6700\u5c0f\u3002\n\n\u5e26\u4fee\u6539\u7684\u8bdd\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u7c7b\u3002\n\n\u82e5\u4fee\u6539\u7684\u662f\u6839\uff0c\u90a3\u5c31\u76f4\u63a5\u6539\u5b8c\u987a\u4fbf\u5728\u7ebf\u6bb5\u6811\u4e2d\u66f4\u65b0\u4e00\u4e0b\u3002\n\n\u82e5\u4fee\u6539\u7684\u4e0d\u6839\uff0c\u6211\u4eec\u5728\u66f4\u65b0\u5706\u70b9\u7684\u4fe1\u606f\u7684\u540c\u65f6\u8fd8\u8981\u66f4\u65b0\u65b9\u70b9\u3002\n\n\u4ec0\u4e48\u610f\u601d\uff1f\uff1f\uff1f\n\n\u5c31\u662f\u5728\u5b83\u7236\u4eb2\u8fd9\u4e2a\u65b9\u70b9\u4e0a\u7684 $multiset$ \u4e0a\u5220\u6389\u539f\u6765\u7684\u6743\u503c\uff0c\u52a0\u5165\u65b0\u7684\u6743\u503c\u3002\u5f53\u7136\u7ebf\u6bb5\u6811\u4e0a\u4e5f\u8981\u66f4\u65b0\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n)$\uff0c\u74f6\u9888\u5728\u6811\u5256 + \u7ebf\u6bb5\u6811\u4e0a\u3002\n\n\u5982\u679c\u91c7\u7528 $LCT$ \u7684\u8bdd\u5c31\u662f $O(n\\log n)$ \u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u5e38\u6570\u98de\u8d77\u554a\u3002\u3002\u3002\n\n$Code\\ Below:$\n\n```cpp\n#include <bits/stdc++.h>\n#define lson (rt<<1)\n#define rson (rt<<1|1)\nusing namespace std;\nconst int maxn=200000+10;\nconst int inf=0x3f3f3f3f;\nint n,m,q,head[maxn],to[maxn<<1],nxt[maxn<<1],tot;\nint N,low[maxn],dfn[maxn],tim,sta[maxn],top;\nmultiset<int> s[maxn];\n\ninline int read(){\n\tregister int x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n\treturn (f==1)?x:-x;\n}\n\nnamespace RST{\n\tint val[maxn],sum[maxn<<2],head[maxn],to[maxn<<1],nxt[maxn<<1],tot;\n\tint top[maxn],dep[maxn],siz[maxn],son[maxn],fa[maxn],id[maxn],mp[maxn],tim;\n\tinline void pushup(int rt){sum[rt]=min(sum[lson],sum[rson]);}\n\tvoid build(int l,int r,int rt){\n\t\tif(l == r){sum[rt]=val[mp[l]];return;}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(l,mid,lson);\n\t\tbuild(mid+1,r,rson);\n\t\tpushup(rt);\n\t}\n\tvoid update(int x,int v,int l,int r,int rt){\n\t\tif(l == r){sum[rt]=v;return;}\n\t\tint mid=(l+r)>>1;\n\t\tif(x <= mid) update(x,v,l,mid,lson);\n\t\telse update(x,v,mid+1,r,rson);\n\t\tpushup(rt); \n\t}\n\tint query(int L,int R,int l,int r,int rt){\n\t\tif(L <= l && r <= R) return sum[rt];\n\t\tint mid=(l+r)>>1,ans=inf;\n\t\tif(L <= mid) ans=min(ans,query(L,R,l,mid,lson));\n\t\tif(R > mid) ans=min(ans,query(L,R,mid+1,r,rson));\n\t\treturn ans;\n\t}\n\tinline void addedge(int x,int y){\n\t\tto[++tot]=y;\n\t\tnxt[tot]=head[x];\n\t\thead[x]=tot;\n\t}\n\tinline void add(int x,int y){addedge(x,y),addedge(y,x);}\n\tvoid dfs1(int x,int f){\n\t\tsiz[x]=1;fa[x]=f;dep[x]=dep[f]+1;\n\t\tint maxson=-1;\n\t\tfor(int i=head[x],y;i;i=nxt[i]){\n\t\t\ty=to[i];\n\t\t\tif(y==f) continue;\n\t\t\tdfs1(y,x);siz[x]+=siz[y];\n\t\t\tif(siz[y]>maxson) maxson=siz[y],son[x]=y;\n\t\t}\n\t}\n\tvoid dfs2(int x,int topf){\n\t\tid[x]=++tim;mp[tim]=x;top[x]=topf;\n\t\tif(son[x]) dfs2(son[x],topf);\n\t\tfor(int i=head[x],y;i;i=nxt[i]){\n\t\t\ty=to[i];\n\t\t\tif(y==fa[x]||y==son[x]) continue;\n\t\t\tdfs2(y,y);\n\t\t}\n\t}\n\tinline int ask(int x,int y){\n\t\tint ans=inf;\n\t\twhile(top[x]!=top[y]){\n\t\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\t\tans=min(ans,query(id[top[x]],id[x],1,N,1));\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(dep[x]>dep[y]) swap(x,y);\n\t\tans=min(ans,query(id[x],id[y],1,N,1));\n\t\tif(x>n) ans=min(ans,val[fa[x]]);\n\t\treturn ans;\n\t}\n\tinline void solve(){\n\t\tdfs1(1,0);dfs2(1,1);\n\t\tfor(int i=2;i<=n;i++) s[fa[i]-n].insert(val[i]);\n\t\tfor(int i=n+1;i<=N;i++) val[i]=s[i-n].empty()?inf:*s[i-n].begin();\n\t\tbuild(1,N,1);\n\t\tchar op;int x,y;\n\t\twhile(q--){\n\t\t\top=getchar();\n\t\t\twhile(!isalpha(op)) op=getchar();\n\t\t\tx=read(),y=read();\n\t\t\tif(op=='C'){\n\t\t\t\tif(x<=n&&x>1){\n\t\t\t\t\ts[fa[x]-n].erase(s[fa[x]-n].find(val[x]));\n\t\t\t\t\ts[fa[x]-n].insert(y);\n\t\t\t\t\tval[fa[x]]=s[fa[x]-n].empty()?inf:*s[fa[x]-n].begin();\n\t\t\t\t\tupdate(id[fa[x]],val[fa[x]],1,N,1);\n\t\t\t\t}\n\t\t\t\tval[x]=y;update(id[x],val[x],1,N,1);\n\t\t\t}\n\t\t\telse printf(\"%d\\n\",ask(x,y));\n\t\t}\n\t}\n}\n\ninline void addedge(int x,int y){\n\tto[++tot]=y;\n\tnxt[tot]=head[x];\n\thead[x]=tot;\n}\n\nvoid tarjan(int u,int f){\n\tlow[u]=dfn[u]=++tim;sta[++top]=u;\n\tint x;\n\tfor(int i=head[u],v;i;i=nxt[i]){\n\t\tv=to[i];\n\t\tif(v==f) continue;\n\t\tif(!dfn[v]){\n\t\t\ttarjan(v,u);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t\tif(low[v]>=dfn[u]){\n\t\t\t\tN++;RST::add(N,u);\n\t\t\t\tdo {\n\t\t\t\t\tx=sta[top--];\n\t\t\t\t\tRST::add(N,x);\n\t\t\t\t}while(x!=v);\n\t\t\t}\n\t\t}\n\t\telse low[u]=min(low[u],dfn[v]);\n\t}\n}\n\nint main()\n{\n\tn=read(),m=read(),q=read();\n\tint x,y;\n\tfor(int i=1;i<=n;i++) RST::val[i]=read();\n\tfor(int i=1;i<=m;i++){\n\t\tx=read(),y=read();\n\t\taddedge(x,y),addedge(y,x);\n\t}\n\tN=n;tarjan(1,0);RST::solve();\n\treturn 0;\n}\n```",
        "postTime": 1552293387,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF487E \u3010Tourists\u3011"
    },
    {
        "content": "    \u9898\u76ee\u80cc\u666f\uff1a\n    \u5c0a\u8005\u795e\u9ad8\u8fbe\u5f88\u7a77\uff0c\u6240\u4ee5\u4ed6\u9700\u8981\u8dd1\u5546\u6765\u8d5a\u94b1\n    \u9898\u76ee\u63cf\u8ff0\uff1a\n    \u57fa\u4e09\u7684\u5730\u56fe\u53ef\u4ee5\u770b\u505a n \u4e2a\u57ce\u5e02\uff0cm \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u5c0a\u8005\u795e\u9ad8\u8fbe\u4f1a\u4ece\u4efb\u610f\u4e00\u4e2a\u70b9\u51fa\u53d1\u5e76\u5728\u8d77\u70b9\u8d2d\u4e70\u8d27\u7269\uff0c\u5728\u65c5\u9014\u4e2d\u4efb\u610f\u4e00\u70b9\u5356\u51fa\u5e76\u6700\u7ec8\u5230\u8fbe\u7ec8\u70b9\uff0c\u5c0a\u8005\u795e\u9ad8\u8fbe\u7684\u65f6\u95f4\u5f88\u5b9d\u8d35\uff0c\u6240\u4ee5\u4ed6\u4e0d\u4f1a\u91cd\u590d\u7ecf\u8fc7\u540c\u4e00\u4e2a\u57ce\u5e02\uff0c\u4f46\u662f\u4e3a\u4e86\u6323\u94b1\uff0c\u4ed6\u53ef\u80fd\u4f1a\u53bb\u7ed5\u8def\u3002\u5f53\u7136\uff0c\u7531\u4e8e\u5de5\u4f5c\u5ba4\u6cdb\u6ee5\uff0c\u6240\u4ee5\u4e00\u4e2a\u57ce\u5e02\u7684\u8d27\u7269\u4ef7\u683c\u53ef\u80fd\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u4f46\u662f\u5c0a\u8005\u795e\u9ad8\u8fbe\u667a\u5546\u4e0d\u8db3\uff0c\u4ed6\u53ef\u80fd\u5728\u4e00\u4e2a\u5f88\u8822\u7684\u8282\u70b9\u628a\u8d27\u7269\u5356\u6389\uff0c\u6240\u4ee5\u5c0a\u8005\u795e\u9ad8\u8fbe\u60f3\u77e5\u9053\u6bcf\u4e00\u6b21\u8dd1\u5546\u6700\u591a\u80fd\u8d54\u591a\u5c11\u94b1\u3002\n    \n   \t\u7b2c\u4e00\u884c n,m;\n    \u63a5\u4e0b\u6765 1 \u884c n \u4e2a\u6570\uff0c\u4ee3\u8868\u6bcf\u4e2a\u57ce\u5e02\u8d27\u7269\u7684\u4ef7\u683c\uff1b\n    \u63a5\u4e0b\u6765 m \u884c u\uff0cv \u4ee3\u8868\u4e00\u6761\u8fb9\n    \u63a5\u4e0b\u6765 1 \u884c Q\n    \u63a5\u4e0b\u6765 Q \u884c\n    C x w \u4ee3\u8868\u57ce\u5e02 x \u7684\u8d27\u7269\u4ef7\u683c\u53d8\u4e3a w\n    Q u v \u4ee3\u8868\u4e00\u6b21\u4ece u \u5230 v \n    \n    Sample Input\n    3 3 \n    1 2 3\n    1 2\n    2 3\n    1 3\n    3\n    Q 2 3\n    C 1 5\n    Q 1 3\n    Sample Output\n\n    1\n    3\n\n    \u6837\u4f8b\u89e3\u91ca\uff1a\n    1\uff0c2\uff0c3 \u90fd\u8054\u901a\uff0c\u8d77\u70b9\u8d2d\u4e70\u4ef7\u683c\u4e3a 2\uff0c\u5728 1 \u70b9\u5356\u51fa\u8d54\u5f97\u6700\u591a2-1=1\n    \u66f4\u65b0\u540e\u6bcf\u4e2a\u70b9\u4ef7\u503c\u4e3a 5\uff0c2\uff0c3\n    \u8d77\u70b9\u4ef7\u683c\u4e3a 5\uff0c\u5728 2 \u70b9\u5356\u51fa\u8d54\u5f97\u6700\u591a\uff0c5-2=3\n    \n    40%\u7684\u6570\u636e\u4e3a\u4e00\u68f5\u6811\n    \u53e6\u5916 20%\u7684\u6570\u636e\u6ca1\u6709\u4fee\u6539\u64cd\u4f5c\n    \u6240\u4ee5\u6570\u636e\u6ee1\u8db3 n,m,q<=100000;\u4fdd\u8bc1\u56fe\u8054\u901a\uff0c\u6570\u636e\u5408\u6cd5\nsolution:\n     !!! \u5706\u65b9\u6811!!!\n      \uff1f\uff1f\uff1f\u5706\u65b9\u6811\u662f\u4ec0\u4e48\uff1f\uff1f\uff1f\n      \u81ea\u5df1\u7684\u7406\u89e3\uff1a\u628a\u6bcf\u4e00\u4e2a\u73af\u62c6\u4e86\uff0c\u65b0\u5efa\u4e00\u4e2a\u65b9\u70b9\uff0c\u6743\u503c\u4e3a\u5706\u70b9\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\uff08\u539f\u6765\u7684\u70b9\u53eb\u5706\u70b9\uff09\u7136\u540e\u65b9\u70b9\u5411\u8fd9\u4e2a\u73af\u539f\u6765\u6240\u6709\u70b9\u8fde\u8fb9\uff0c\u4fdd\u7559\u5706\u70b9\uff0c\u5220\u539f\u6765\u7684\u8fb9\uff0c\u8fd9\u6837\u6574\u5f20\u56fe\u5c31\u53d8\u4e3a\u4e86\uff0c\u4e00\u4e2a\u5706\u70b9\u4e00\u4e2a\u65b9\u70b9\u95f4\u9694\u7684\uff0c\u4e24\u4e2a\u5706\u70b9\u4e4b\u95f4\u4e5f\u8981\u5efa\u65b9\u70b9\uff0c\u56e0\u4e3a\u4ed6\u4e5f\u662f\u4e00\u4e2a\u70b9\u53cc\u3002\u5efa\u4e86\u4e4b\u540e\u5c31\u663e\u7136\u662f\u4e00\u68f5\u6811\u4e86\uff08en,\u663e\u7136...\uff09\u3002\n      \n      \u90a3\u4e48\u8fd9\u4e2a\u6709\u4ec0\u4e48\u7528\u5462\uff1f\n      \u7a81\u7136\u53d1\u73b0\uff0c\u8fd9\u65f6\u6240\u6709\u65b9\u70b9\u5c31\u662f\u70b9\u53cc\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u70b9\uff0c\u5c31\u662f\u6211\u4eec\u8981\u6c42\u5f97\u7b54\u6848\uff0c\u67e5\u8be2\u7684\u8bdd\u5c31\u53d8\u4e3a\u4e86 \u6c42\u6811\u4e0a\u4e24\u70b9\u95f4\u70b9\u6743\u6700\u5c0f\u503c\uff0c\u6811\u5256\u5256\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\n      \u4f46\u662f\u4fee\u6539\u7684\u8bdd\u5c31\u5f88\u607c\u706b\u4e86\uff0c\u6bcf\u6b21\u4fee\u6539\u65f6\uff0c\u90fd\u8981\u904d\u5386\u6240\u6709\u4ed6\u7684\u76f8\u90bb\u65b9\u70b9\uff0c\u5982\u679c\u662f\u4e00\u68f5\u83ca\u82b1\u6811\u7684\u8bdd\uff0c\u5c31GG\u4e86\uff0cO\uff08n\uff09!;\n      \n      \u518d\u8003\u8651\u4f18\u5316\uff1a\n      \u73b0\u5728\u5df2\u7ecf\u662f\u4e00\u6811\u4e86\uff0c\u968f\u4fbf\u627e\u4e2a\u70b9\u4f5c\u4e3a\u6839\uff0c\u6211\u4eec\u628a\u65b9\u70b9\u7684\u503c\u8bb0\u5f55\u4e3a\u4ed6\u7684\u6240\u6709\u513f\u5b50\u5706\u70b9\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u53e6\u4e00\u4e2a\u5706\u70b9\u4f5c\u4e3a\u4ed6\u7684\u7236\u4eb2\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u65b9\u70b9\u5f00\u4e2amultiset\u7ef4\u62a4\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u5728\u4ed6\u7684\u7236\u4eb2\u65b9\u70b9\u4e2d\u5220\u53bb\u539f\u6765\u7684\u503c\uff0c\u52a0\u4e0a\u73b0\u5728\u7684\u503c\uff0c\uff08\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u7236\u4eb2\u552f\u4e00\uff0c\u6240\u4ee5\u4e00\u4e2a\u5706\u70b9\u6539\u53d8\u53ea\u4f1a\u5bf9\u4ed6\u7684\u7236\u4eb2\u65b9\u70b9\u6709\u5f71\u54cd\uff09.\u6700\u540e\u7279\u5224\u4e00\u4e0b\u4e24\u4e2a\u70b9\u7684LCA\u662f\u4e0d\u662f\u65b9\u70b9\uff0c\u5982\u679c\u662f\u65b9\u70b9\uff0c\u90a3\u4e48\u518d\u628a\u7b54\u6848\u548cLCA\u7684\u7236\u4eb2\u53d6\u4e2amin\u5c31 OK \u5566\u3002  \u6c42\u8def\u5f84\u6700\u5c0f\u503c\uff0c\u65e5\u5e38\u6811\u5256\u3002\u3002\u3002\n      ```cpp\n    \n   ```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<set>\n#include<queue>\nusing namespace std;\nconst int N=200005;\n#define il inline\nint read(){\n\tint ret=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){ret=(ret<<3)+(ret<<1)+ch-'0';ch=getchar();}\n\treturn ret*f;\n}\nmultiset<int> SM[N];\nint n,tim,m,head[N],tail[N],k,a[N];\nstruct node{\n\tint to,nxt;\n}edge[N*2];\nstruct data{\n\tint l,r,min_val;\n}tree[N*4];\nil void add(int u,int v){\n\tedge[++k].to =v; edge[k].nxt =head[u]; head[u]=k;\n}\nil void add2(int u,int v){\n\t//printf(\"##%d %d\\n\",u,v);\n\tedge[++k].to =v; edge[k].nxt =tail[u]; tail[u]=k;\n}\nint size[N],son[N],deep[N],fa[N];\nint Min(int x,int y){if(x<y) return x;return y;}\nil void dfs1(int u,int father)\n{\n\tsize[u]=1;\n\tfor(int i=tail[u];i;i=edge[i].nxt )\n\t{\n\t\tint v=edge[i].to ;\n\t\tif(v!=father){\n\t\t\tdeep[v]=deep[u]+1;   \tfa[v]=u;\n\t\t\tdfs1(v,u);     size[u]+=size[v];\n\t\t\tif(son[u]==0 || size[v]>size[son[u]]) son[u]=v;\n\t\t}\n\t}\n}\nint top[N],pos[N],cnt,N_pos[N];\nil void dfs2(int u,int tp)\n{\n\ttop[u]=tp; pos[u]=++cnt; N_pos[cnt]=u;\n\tif(son[u]==0) return ;\n\tdfs2(son[u],tp);\n\tfor(int i=tail[u];i;i=edge[i].nxt )\n\t{\n\t\tint v=edge[i].to ;\n\t\tif(v!=fa[u] && v!=son[u]) dfs2(v,v);\n\t}\n}\nil void build(int id,int l,int r)\n{\n\ttree[id].l =l; tree[id].r =r;  \n\tif(l==r){\n\t\ttree[id].min_val =a[N_pos[l]];\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(id<<1,l,mid); build(id<<1|1,mid+1,r);\n\ttree[id].min_val =Min(tree[id<<1].min_val,tree[id<<1|1].min_val) ;\n}\nil int query(int id,int l,int r)\n{\n\tif(tree[id].l >r||tree[id].r <l) return 0x3f3f3f3f;\n\tif(tree[id].l >=l&&tree[id].r <=r) return tree[id].min_val ;\n\treturn Min(query(id<<1,l,r),query(id<<1|1,l,r));\n}\nil int Query(int x,int y)\n{\n\tif(x==1&&y==3){\n\t\tint tt=1;\n\t}\n\tint ans=0x3f3f3f3f;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(deep[top[x]]<deep[top[y]]) swap(x,y);\n\t\tans=min(ans,query(1,pos[top[x]],pos[x]));\n\t\tx=fa[top[x]];\n\t}\n\tif(deep[x]<deep[y])swap(x,y);\n\tans=min(ans,query(1,pos[y],pos[x]));\n\tif(y>tim) ans=min(ans,a[fa[y]]);\n\treturn ans;\n}\nil void update(int id,int x,int val)\n{\n\tif(tree[id].l ==x&&tree[id].r ==x) {\n\t\ttree[id].min_val =val; return;\n\t}\n\tint mid=(tree[id].l +tree[id].r )>>1;\n\tif(x<=mid) update(id<<1,x,val);\n\tif(x>mid) update(id<<1|1,x,val);\n\ttree[id].min_val =Min(tree[id<<1].min_val,tree[id<<1|1].min_val) ;\n}\n\nint dfn[N],low[N],ttttt,S[N],topp;\nvoid tarjan(int u)\n{\n\tdfn[u]=low[u]=++ttttt;  S[++topp]=u;\n\tfor(int i=head[u];i;i=edge[i].nxt )\n\t{\n\t\tint v=edge[i].to;\n\t\tif(!dfn[v])  {\n\t\t\ttarjan(v); \tlow[u]=Min(low[u],low[v]);\n\t\t\tif(low[v]>=dfn[u]){\n\t\t\t\t++tim; int tmp; a[tim]=0x3f3f3f3f;\n\t\t\t\tadd2(u,tim);add2(tim,u);\n\t\t\t\tdo{\n\t\t\t\t\ttmp=S[topp--];\n\t\t\t\t\tadd2(tmp,tim);add2(tim,tmp);\n\t\t\t\t}while(tmp!=v);\n\t\t\t}\n\t\t}\n\t\telse low[u]=min(low[u],dfn[v]);\n\t } \n}\nint main()\n{\n\tfreopen(\"paoshang.in\",\"r\",stdin);\n\tfreopen(\"paoshang.out\",\"w\",stdout);\n\tn=read(); m=read();\n//\tprintf(\"%d %d \",n,m);\n\tfor(int i=1;i<=n;i++) a[i]=read();\n\tint x,y;\n\tfor(int i=1;i<=m;i++) {\n\t\tx=read(); y=read(); add(x,y); add(y,x);\n\t}\n\ttim=n;\n\tfor(int i=1;i<=n;i++) if(!dfn[i]) tarjan(i);\n\tswap(n,tim);\n\tdfs1(1,0); dfs2(1,1);\n//\tfor(int i=1;i<=4;i++) printf(\"%d \",pos[i]);\n\tfor(int j=tim+1;j<=n;j++)\n\t{\n\t\tfor(int i=tail[j];i;i=edge[i].nxt )\n\t\t{\n\t\t\tint v=edge[i].to ;\n\t\t\tif(v!=fa[j]) SM[j].insert(a[v]); \n\t\t}\n\t\tif(SM[j].empty() ) a[j]=0x3f3f3f3f;\n\t\telse a[j]= *SM[j].begin(); \n\t}\n\tbuild(1,1,n);                                                                             \n\tint qq=read();char op[10];\n\tfor(int i=1;i<=qq;i++)\n\t{\n\t\tscanf(\"%s\",op); x=read();y=read();\n\t\tif(op[0]=='C')\n\t\t{\n\t\t\tif(fa[x]){\n\t\t\t\tSM[fa[x]].erase(SM[fa[x]].find(a[x]));\n\t\t\t\tSM[fa[x]].insert(y);\n\t\t\t\ta[fa[x]]= *SM[fa[x]].begin() ;  \n\t\t\t\tupdate(1,pos[fa[x]],a[fa[x]]);\n\t\t\t}\n\t\t\ta[x]=y;  update(1,pos[x],y);\n\t\t}\n\t\telse  printf(\"%d\\n\",a[x]-Query(x,y));\n\t}\n}\n```\n ",
        "postTime": 1540387665,
        "uid": 61640,
        "name": "uniqueboy",
        "ccfLevel": 0,
        "title": "JZOJ5909. \u3010NOIP2018\u6a21\u62df10.16\u3011\u8dd1\u5546"
    }
]