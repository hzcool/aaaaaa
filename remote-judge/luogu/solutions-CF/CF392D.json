[
    {
        "content": "## \u9898\u89e3\n\n\u9996\u5148\u80af\u5b9a\u662f\u8981\u679a\u4e3e\u4e00\u4e2a\u7684\uff0c\u6211\u679a\u4e3e\u7684\u662f$u$\uff08$A$\u4e2d\u7684\u4f4d\u7f6e\uff09\u3002\n\n\u4f46\u6211\u4eec\u4e0d\u80fd\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\uff0c\u8981\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u7684\u8bdd\uff0c\u76f8\u5f53\u4e8e\u662f\u6bcf\u6b21\u4f1a\u591a\u4e00\u4e9b\u9650\u5236\uff0c\u8fd9\u6837\u6bd4\u8f83\u597d\u7ef4\u62a4\uff08\u5982\u679c\u662f\u64a4\u9500\u9650\u5236\uff0c\u90a3\u4e0d\u662f\u5f88\u9ebb\u70e6\u5417\uff09\u3002\n\n\u8003\u8651\u4f1a\u591a\u4ec0\u4e48\u9650\u5236\u5462\uff1f\n\n\u5c31\u662f\u90a3\u4e2a\u6570\u539f\u6765\u662f\u5728$A$\u4e2d\u88ab\u6d88\u706d\u7684\uff0c\u73b0\u5728\u4e0d\u80fd\u5728$A$\u4e2d\u88ab\u6d88\u706d\u4e86\uff0c\u90a3\u4e48\u5c31\u5f97\u5728$B$\u6216$C$\u4e2d\u88ab\u6d88\u706d\u3002\n\n\u90a3\u5230\u5e95\u662f\u5728$B$\u4e2d\u8fd8\u662f$C$\u4e2d\u5462\uff1f\n\n\u8fd9\u5c31\u5230\u4e86\u672c\u9898\u7684\u5173\u952e\u5730\u65b9\u4e86\uff0c\u6211\u4eec\u628a\u5728$B$\u4e2d\u6d88\u706d\u7684\u4f4d\u7f6e\u770b\u6210\u6a2a\u5750\u6807\uff0c\u5728$C$\u4e2d\u6d88\u706d\u7684\u4f4d\u7f6e\u770b\u6210\u7eb5\u5750\u6807\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5728\u4e8c\u7ef4\u5e73\u9762\u4e2d\u5c31\u6709\u4e86\u4e00\u4e9b\u70b9\uff0c\u6211\u4eec\u8981\u9009\u4e00\u4e2a\u6a2a\u5750\u6807$X$\u548c\u4e00\u4e2a\u7eb5\u5750\u6807$Y$\uff0c\u4f7f\u5f97\u6240\u6709\u70b9\u8981\u4e48\u6a2a\u5750\u6807$<=X$\uff0c\u8981\u4e48\u7eb5\u5750\u6807$<=Y$\u3002\u6211\u4eec\u8981\u6c42\u6700\u5c0f\u7684$X+Y$\u3002\n\n\u600e\u4e48\u7ef4\u62a4\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9\u5462\uff0c\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u4e0b\u6807\u4ee3\u66ff\u6a2a\u5750\u6807\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7eb5\u5750\u6807\u3002\n\n\u5177\u4f53\u600e\u4e48\u7ef4\u62a4\uff0c\u6bd4\u5982\u4e00\u4e2a\u70b9$(x,y)$\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u6a2a\u5750\u6807$<x$\u7684\u7eb5\u5750\u6807\u90fd\u5fc5\u987b$>=y$\uff0c\u76f8\u5f53\u4e8e$[0,x-1]$\u7684\u4f4d\u7f6e\u4e0a\u533a\u95f4\u8986\u76d6\u6700\u5927\u503c$y$\u3002\n\n\u7531\u4e8e\u662f$X+Y$\uff0c\u6240\u4ee5\u6211\u4eec\u76f8\u5f53\u4e8e\u5728\u7ebf\u6bb5\u6811\u4e0b\u6807\u4e3a$i$\u7684\u5730\u65b9\u90fd\u5e94\u8be5\u52a0\u4e0a$i$\u3002\n\n\u8fd9\u5c31\u8ba9\u6211\u4eec\u4e0d\u80fd\u7528\u666e\u901a\u529e\u6cd5\u533a\u95f4\u8986\u76d6\u4e86\u3002\u56e0\u4e3a\u6709\u4e9b\u4f4d\u7f6e\u4e0a\u6700\u5927\u503c\u662f\u5927\u4e8e\u8981\u8986\u76d6\u7684\u6570\u7684\uff0c\u4f46\u4f60\u4e0d\u77e5\u9053\uff0c\u4f60\u4f1a\u4ee5\u4e3a\u90a3\u4e2a\u4f4d\u7f6e\u5c0f\uff0c\u5c31\u7528\u90a3\u4e2a\u4f4d\u7f6e+\u8986\u76d6\u7684\u6570\u6765\u4fee\u6539\u7b54\u6848\u3002\n\n\u8fd9\u65f6\u5019\uff0c\u4f60\u53d1\u73b0\u968f\u7740\u6a2a\u5750\u6807\u7684\u589e\u5927\uff0c\u7eb5\u5750\u6807\u662f\u5355\u8c03\u4e0d\u589e\u7684\u3002\u90a3\u4e48\u6211\u4eec\u627e\u5230\u7b2c\u4e00\u4e2a\u8986\u76d6\u7684\u503c$<y$\u7684\u4f4d\u7f6e\uff08$y$\u662f\u5f53\u524d\u8981\u8986\u76d6\u7684\u503c\uff09\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u533a\u95f4\u8986\u76d6\u4e86\uff0c\u56e0\u4e3a\u8fd9\u65f6\u6a2a\u5750\u6807\u4e0a\u8986\u76d6\u7684\u503c\u90fd$<y$\u4e86\uff0c\u90a3\u4e48\u4f60\u7528\u6700\u5c0f\u7684\u4f4d\u7f6e+\u8986\u76d6\u7684\u6570\u6765\u4fee\u6539\u7b54\u6848\u5c31\u662f\u5bf9\u7684\u3002\n\n\u5982\u4f55\u627e\u5230\u7b2c\u4e00\u4e2a\u8986\u76d6\u7684\u503c$<y$\u7684\u4f4d\u7f6e\u5462\uff1f\n\n\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\n\n**\u7ec6\u8282\uff1a**\n\n\u53ef\u80fd\u6709\u4e9b\u662f\u53ea\u5728$B$\u6216$C$\u4e2d\u51fa\u73b0\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e$X,Y$\u90fd\u6709\u4e00\u4e2a\u4e0b\u754c\uff0c$X$\u6ca1\u5173\u7cfb\uff08\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\uff09\uff0c$Y$\u7684\u8bdd\u6211\u4eec\u5c31\u533a\u95f4\u8986\u76d6\u554a\uff0c\u505a\u6cd5\u540c\u4e0a\u3002\n\n\n\n## \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define next Next\n#define last Last\nconst int N=1e6+5;\nint n,RR,gs,ans=1e9,Xma,Yma,ma[N],a[N],b[N],c[N],d[N],La[N],Lb[N],Lc[N],lst[N],tree[N*4],mi[N*4],lazy[N*4];\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int gc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}\ninline int read()\n{\n\tint ret=0,f=0;char c=gc();\n\twhile(!isdigit(c)){if(c=='-')f=1;c=gc();}\n\twhile(isdigit(c)){ret=ret*10+c-48;c=gc();}\n\tif(f)return -ret;return ret;\n}\nvoid build(int nod,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\ttree[nod]=mi[nod]=l;\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tbuild(nod*2,l,mid);\n\tbuild(nod*2+1,mid+1,r);\n\ttree[nod]=min(tree[nod*2],tree[nod*2+1]);\n\tmi[nod]=min(mi[nod*2],mi[nod*2+1]);\n}\nvoid pushdown(int nod)\n{\n\tif(!lazy[nod])return;\n\tmi[nod*2]=max(mi[nod*2],tree[nod*2]+lazy[nod]);\n\tmi[nod*2+1]=max(mi[nod*2+1],tree[nod*2+1]+lazy[nod]);\n\tlazy[nod*2]=max(lazy[nod*2],lazy[nod]);\n\tlazy[nod*2+1]=max(lazy[nod*2+1],lazy[nod]);\n\tma[nod*2]=max(ma[nod*2],lazy[nod]);\n\tma[nod*2+1]=max(ma[nod*2+1],lazy[nod]);\n\tlazy[nod]=0;\n}\nvoid change(int nod,int l,int r,int L,int R,int val)\n{\n\tif(l==L&&r==R)\n\t{\n\t\tma[nod]=max(ma[nod],val);\n\t\tmi[nod]=max(mi[nod],tree[nod]+val);\n\t\tlazy[nod]=max(lazy[nod],val);\n\t\treturn;\n\t}\n\tpushdown(nod);\n\tint mid=(l+r)/2;\n\tif(R<=mid)change(nod*2,l,mid,L,R,val);\n\telse if(L>mid)change(nod*2+1,mid+1,r,L,R,val);\n\telse{\n\t\tchange(nod*2,l,mid,L,mid,val);\n\t\tchange(nod*2+1,mid+1,r,mid+1,R,val);\n\t}\n\tmi[nod]=min(mi[nod*2],mi[nod*2+1]);\n\tma[nod]=min(ma[nod*2],ma[nod*2+1]);\n}\nint find(int nod,int l,int r,int L,int R)\n{\n\tif(l==L&&r==R)return mi[nod];\n\tpushdown(nod);\n\tint mid=(l+r)/2;\n\tif(R<=mid)return find(nod*2,l,mid,L,R);\n\telse if(L>mid)return find(nod*2+1,mid+1,r,L,R);\n\telse return min(find(nod*2,l,mid,L,mid),find(nod*2+1,mid+1,r,mid+1,R));\n}\nint query(int nod,int l,int r,int val)\n{\n\tif(l==r)\n\t{\n\t\tif(ma[nod]>=val)return l+1;\n\t\telse return l;\n\t}\n\tpushdown(nod);\n\tint mid=(l+r)/2;\n\tif(ma[nod*2]>=val)return query(nod*2+1,mid+1,r,val);\n\telse return query(nod*2,l,mid,val);\n}\nsigned main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\ta[i]=read();\n\t\td[++gs]=a[i];\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tb[i]=read();\n\t\td[++gs]=b[i];\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tc[i]=read();\n\t\td[++gs]=c[i];\n\t}\n\tsort(d+1,d+gs+1);\n\tgs=unique(d+1,d+gs+1)-d-1;\n\tfor(int i=1;i<=n;i++)a[i]=lower_bound(d+1,d+gs+1,a[i])-d;\n\tfor(int i=1;i<=n;i++)b[i]=lower_bound(d+1,d+gs+1,b[i])-d;\n\tfor(int i=1;i<=n;i++)c[i]=lower_bound(d+1,d+gs+1,c[i])-d;\n\tfor(int i=1;i<=gs;i++)lst[i]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(lst[a[i]])continue;\n\t\tlst[a[i]]=1;\n\t\tLa[a[i]]=i;\n\t}\n\tfor(int i=1;i<=gs;i++)lst[i]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(lst[b[i]])continue;\n\t\tlst[b[i]]=1;\n\t\tLb[b[i]]=i;\n\t}\n\tfor(int i=1;i<=gs;i++)lst[i]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(lst[c[i]])continue;\n\t\tlst[c[i]]=1;\n\t\tLc[c[i]]=i;\n\t}\n\tbuild(1,0,n);\n\tfor(int i=1;i<=n;i++)\n\t\tif((!La[b[i]])&&(Lb[b[i]]==i))\n\t\t{\n\t\t\tif(!Lc[b[i]])Xma=max(Xma,i);\n\t\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif((!La[c[i]])&&(Lc[c[i]]==i))\n\t\t{\n\t\t\tif(!Lb[c[i]])Yma=max(Yma,i);\n\t\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif((!La[b[i]])&&(Lb[b[i]]==i))\n\t\t{\n\t\t\tif(Lc[b[i]])\n\t\t\t{\n\t\t\t\tint x=query(1,0,n,Lc[b[i]]);\n\t\t\t\tif(x<=i-1)change(1,0,n,x,i-1,Lc[b[i]]);\n\t\t\t}\n\t\t}\n\tint x=query(1,0,n,Yma);\n\tif(x<=n)change(1,0,n,x,n,Yma);\n\tans=min(ans,n+max(Xma+Yma,find(1,0,n,Xma,n)));\n\tfor(int i=n;i;i--)\n\t{\n\t\tif(La[a[i]]==i)\n\t\t{\n\t\t\t\n\t\t\tif(!Lb[a[i]])\n\t\t\t{\n\t\t\t\tif(!Lc[a[i]])break;\n\t\t\t\tYma=max(Yma,Lc[a[i]]);\n\t\t\t}\n\t\t\telse if(!Lc[a[i]])Xma=max(Xma,Lb[a[i]]);\n\t\t\telse{\n\t\t\t\tint x=query(1,0,n,Lc[a[i]]);\n\t\t\t\tif(x<=Lb[a[i]]-1)change(1,0,n,x,Lb[a[i]]-1,Lc[a[i]]);\n\t\t\t}\n\t\t}\n\t\tint x=query(1,0,n,Yma);\n\t\tif(x<=n)change(1,0,n,x,n,Yma);\n\t\tans=min(ans,i-1+max(Xma+Yma,find(1,0,n,Xma,n)));\n\t}\n\tcout<<ans;\n}\n/*\n\u679a\u4e3ex\n\u7136\u540e\u5c31\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4 \n*/\n```\n",
        "postTime": 1573605880,
        "uid": 39484,
        "name": "\u7c73\u5947",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF392D \u3010Three Arrays\u3011"
    },
    {
        "content": "## CF392D Three Arrays\n\n### \u89e3\u9898\u62a5\u544a\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ea\u80fd\u679a\u4e3e\u4e00\u4e2a\u6570\u7ec4\u7528\u591a\u5c11\u6570\uff0c\u4e14\u5fc5\u987b\u5728 $O(\\log^2 n),O(\\log n)$ \u6216\u66f4\u77ed\u65f6\u95f4\u5185\u6c42\u51fa\u53e6\u5916\u4e24\u4e2a\u6570\u7ec4\u7684\u7b54\u6848\u3002\n\n\u5148\u5bf9\u6bcf\u4e00\u4e2a\u6570\u8fdb\u884c\u4e00\u4e2a\u8f6c\u6362\uff1a\u8bbe\u6570\u5bf9 $t_i\\rightarrow (x_i, y_i, z_i)$ \u7684\u4e09\u4e2a\u53c2\u6570\u5206\u522b\u8868\u793a $t_i$ \u8fd9\u4e2a\u6570\u5728 $a_i,b_i,c_i$ \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08\u4e0d\u5b58\u5728\u5c31\u662f\u65e0\u7a77\u5927\uff09\uff0c\u90a3\u4e48\u4e00\u4e2a\u5408\u6cd5\u7684\u65b9\u6848 $(u, v, w)$ \u5373\u6ee1\u8db3 $\\forall t_i,a_i \\leq u \\text{ or } b_i \\leq v \\text{ or } c_i \\leq w$\u3002\n\n\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u679a\u4e3e\u4e86\u7b2c\u4e00\u7ef4\u7684 $u$\uff0c\u90a3\u4e48\u901a\u8fc7\u5bf9\u6570\u5bf9\u7684\u7b2c\u4e00\u7ef4\u8fdb\u884c\u6392\u5e8f\uff08\u6bd5\u7adf\u6211\u4eec\u4e0d\u5173\u5fc3\u6bcf\u4e2a\u6570\u5b57\u7684\u5177\u4f53\u5927\u5c0f\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u6bcf\u4e2a\u6570\u5bf9\u6709\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\uff0c\u6240\u4ee5\u6392\u5e8f\u5b8c\u5168\u6ca1\u6709\u95ee\u9898\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u5f97\u51fa\u54ea\u4e9b\u6570\u662f\u5df2\u7ecf\u6ee1\u8db3\u6761\u4ef6\u7684\uff0c\u800c\u54ea\u4e9b\u6570\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u5bf9**\u5269\u4e0b\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5bf9**\uff08\u4ee5\u4e0b\u5747\u79f0\u201c\u6570\u5bf9\u201d\uff09\u8fdb\u884c\u6c42\u89e3\u3002\n\n---\n\n\u5ffd\u7565\u7b2c\u4e00\u7ef4\u540e\uff0c\u8003\u8651\u5c06\u6570\u5bf9\u770b\u4f5c\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9 $(X_i,Y_i)$\uff08\u5b57\u6bcd\u5927\u5199\u548c\u4e0a\u9762\u7684\u6570\u5bf9\u5b9a\u4e49\u505a\u533a\u5206\uff09\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u6c42\u4e24\u6761\u76f4\u7ebf $x = v, y = w$\uff0c\u6ee1\u8db3\uff1a\u6240\u6709\u70b9\u8981\u4e48\u5728 $x = v$ \u7684\u5de6\u8fb9\u3001\u8981\u4e48\u5728 $y = w$ \u7684\u4e0b\u9762\u3002\n\n\u4e5f\u5c31\u662f\u628a\u7b2c\u4e00\u8c61\u9650\u518d\u5212\u5206\u6210\u56db\u4e2a\u5c0f\u5757\uff0c\u8ba9\u6bcf\u4e2a\u70b9\u90fd\u4e0d\u5728\u53f3\u4e0a\u65b9\u7684\u5c0f\u5757\uff08\u53ef\u4ee5\u5728\u8fb9\u754c\u4e0a\uff09\u3002\n\n![4cNQXR.png](https://z3.ax1x.com/2021/09/26/4cNQXR.png)\n\n\u56fe\u4e2d\u7684\u5f53\u7136\u4e0d\u662f\u6700\u4f18\u65b9\u6848\u3002\uff08\u53ef\u80fd\u7684\uff09\u6700\u4f18\u65b9\u6848\u4e00\u5b9a\u8981\u6ee1\u8db3\uff0c**\u56fa\u5b9a\u4e00\u6761\u7ebf\u540e\uff0c\u53e6\u4e00\u6761\u7ebf\u4e0b\u964d\u5230\u4e0d\u80fd\u518d\u4e0b\u964d**\u3002\u56e0\u4e3a\u5750\u6807\u8f74\u53ef\u4ee5\u65cb\u8f6c\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e00\u5f8b\u56fa\u5b9a $x = v$ \u5e76\u8ba9 $y = w$ \u5c3d\u53ef\u80fd\u4e0b\u964d\u3002\u4e5f\u5c31\u662f\u8fd9\u6837\uff1a\n\n![4cUiCD.png](https://z3.ax1x.com/2021/09/26/4cUiCD.png)\n\n\uff08\u7ec6\u5fc3\u7684\u540c\u5b66\u53ef\u4ee5\u53d1\u73b0\u8fd9\u5f20\u56fe\u5176\u5b9e\u662f\u91cd\u753b\u4e86\u7684\uff0c\u5927\u5bb6\u5c3d\u91cf\u7406\u89e3\u4e00\u4e0b\uff09\n\n\u901a\u4fd7\u5730\u8bf4\uff0c\u9009\u5b9a\u4e24\u4e2a\u76f8\u90bb\u7684\u201c\u6700\u5916\u5c42\u201d\u7684\u70b9\uff08\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u51f8\u5305\uff09\uff0c\u4ee5\u5de6\u8fb9\u70b9\u7684\u6a2a\u5750\u6807\u4f5c\u4e3a $v$\uff0c\u4ee5\u53f3\u8fb9\u70b9\u7684\u7eb5\u5750\u6807\u4f5c\u4e3a $w$\uff0c\u8fd9\u6837\u9009\u51fa\u6765\u7684\u76f4\u7ebf $x = v,y = w$ \u624d\u6709\u53ef\u80fd\u6210\u4e3a\u4e00\u4e2a\u6700\u4f18\u7684\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u7684\u7b54\u6848\u5c31\u662f $v + w$\u3002\n\n\u4e0b\u4e00\u4e2a\u65b9\u6848\u3001\u518d\u4e0b\u4e00\u4e2a\u65b9\u6848\u662f\u8fd9\u6837\u7684\uff1a\n\n[![4cUbZt.png](https://z3.ax1x.com/2021/09/26/4cUbZt.png)](https://imgtu.com/i/4cUbZt)\n\n\u53ef\u4ee5\u770b\u5230\uff0c**\u5b83\u662f\u4e00\u4e2a\u201c\u9636\u68af\u578b\u201d\u4e0b\u964d\u7684\u8d8b\u52bf**\u3002\u8fd9\u4e2a\u9636\u68af\u56fe\u6837\u975e\u5e38\u91cd\u8981\uff0c\u662f\u672c\u9898\u89e3\u9898\u5173\u952e\u3002\n\n---\n\n\u521a\u521a\u8bf4\u5230\u4e86\u5bf9\u7b2c\u4e00\u7ef4\u8fdb\u884c\u6392\u5e8f\uff0c\u6392\u5b8c\u5e8f\u4e4b\u540e\u4e0d\u6ee1\u8db3\u7684\u70b9\u5c31\u53ef\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u52a0\u5165\u8fd9\u4e2a\u4e8c\u7ef4\u5e73\u9762\uff0c\u5bfb\u627e\u4e00\u4e2a\u80fd\u8ba9\u5b83\u6ee1\u8db3\u7684\u65b9\u6848\u3002\u4e00\u4e2a\u70b9\u52a0\u5165\u540e\u5c31\u4e0d\u80fd\u5220\u9664\uff0c\u90a3\u4e48\u6709\u4e9b\u70b9\u6c38\u8fdc\u4e5f\u65e0\u6cd5\u843d\u5728\u201c\u9636\u68af\u201d\u4e0a\uff0c\u6210\u4e3a\u201c\u6700\u5916\u5c42\u201d\u7684\u70b9\uff0c\u8ba9\u6211\u4eec\u76f4\u63a5\u5ffd\u7565\u5b83\u4eec\uff01\n\n\u63a5\u4e0b\u6765\u4f60\u6709\u4e86\u4e00\u5806\u7eb5\u5750\u6807\u9012\u51cf\u7684\u70b9\uff0c\u9009\u5b9a\u4e24\u4e2a\u76f8\u90bb\u7684\u70b9\u6784\u6210\u7684\u76f4\u7ebf\u5373\u662f\u4e00\u4e2a\u201c\u9636\u68af\u201d\uff0c\u80fd\u4ea7\u751f\u7684\u6240\u6709\u7b54\u6848\u5c31\u662f\u6240\u6709\u76f8\u90bb\u7684 $X_i +Y_{i + 1}$\uff0c\u5230\u65f6\u5019\u66f4\u65b0\u7b54\u6848\u5373\u662f\u6c42\u5b83\u7684\u6700\u5c0f\u503c\u3002\n\n\u8003\u8651\u52a0\u5165\u4e00\u4e2a\u65b0\u70b9\u4f1a\u5bf9\u5b83\u4eec\u6709\u4ec0\u4e48\u5f71\u54cd\u3002\n\n[![4ca2Os.png](https://z3.ax1x.com/2021/09/26/4ca2Os.png)](https://imgtu.com/i/4ca2Os)\n\n\u6b64\u65f6\u52a0\u5165\u4e00\u4e2a\u65b0\u70b9\uff1a\n\n[![4cdP6H.png](https://z3.ax1x.com/2021/09/26/4cdP6H.png)](https://imgtu.com/i/4cdP6H)\n\n\u9996\u5148\uff0cD \u548c E \u7ec4\u6210\u7684\u7b54\u6848\u65e0\u6cd5\u6ee1\u8db3 J \u7684\u6761\u4ef6\uff0c\u8fd9\u4e2a\u7b54\u6848\u5e94\u5f53\u88ab\u5220\u9664\u3002\n\n\u5176\u6b21\uff0cB\u3001C\u3001D \u4e09\u4e2a\u70b9\u4e0d\u518d\u662f\u201c\u6700\u5916\u5c42\u201d\u7684\u70b9\uff0c\u5e94\u5f53\u628a\u5b83\u4eec\u548c\u5b83\u4eec\u4ea7\u751f\u7684\u7b54\u6848\u4ece\u56fe\u4e2d\u5220\u53bb\u3002\u6b64\u65f6\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u51fa\uff0c**\u4e00\u4e2a\u70b9\u662f\u201c\u6700\u5916\u5c42\u7684\u70b9\u201d\u7684\u5145\u8981\u6761\u4ef6\u662f\uff1a\u4e0d\u5b58\u5728\u6a2a\u7eb5\u5750\u6807\u90fd\u6bd4\u5b83\u5927\u7684\u70b9\u3002**\n\n\u5728\u505a\u5b8c\u4e0a\u8ff0\u4e24\u4e2a\u5904\u7406\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u653e\u5fc3\u6dfb\u52a0 $X_A +Y_J, X_J+Y_E$ \u8fd9\u4e24\u4e2a\u7b54\u6848\u4e86\u3002\n\n**\u6240\u4ee5\uff0c\u52a0\u5165\u4e00\u4e2a\u65b0\u70b9\uff0c\u5e94\u5f53\u5148\u5220\u9664\u76f8\u90bb\u8282\u70b9\u4e0d\u5408\u6cd5\u7684\u7b54\u6848\uff0c\u518d\u5faa\u73af\u5220\u9664\u6240\u6709\u4e0d\u5728\u6700\u5916\u5c42\u7684\u70b9\uff0c\u6700\u540e\u518d\u8ba1\u7b97\u5b83\u4e0e\u76f8\u90bb\u70b9\u4ea7\u751f\u7684\u7b54\u6848\u3002**\n\n---\n\n\u7ef4\u62a4\u8fd9\u4e2a\u4e8c\u7ef4\u5e73\u9762\u7684\u70b9\u9700\u8981\u5feb\u901f\u63d2\u5165\u3001\u67e5\u627e\u3001\u5220\u9664\uff08\u6309\u4e00\u5b9a\u987a\u5e8f\u7684\uff09\u76f8\u90bb\u8282\u70b9\uff1b\u7ef4\u62a4\u8fd9\u4e2a\u4e8c\u7ef4\u5e73\u9762\u4e0a\u6240\u6709\u7684\u7b54\u6848\u9700\u8981\u5feb\u901f\u63d2\u5165\u3001\u67e5\u627e\u3001\u5220\u9664\uff0c\u67e5\u8be2\u6700\u5c0f\u503c\u3002\n\n\u8fd9\u51e0\u4e2a\u64cd\u4f5c\u53ea\u9700\u8981 `std::set` \u548c `std::multiset` \u5373\u53ef\u5b8c\u6210\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n\u82f1\u6587\u6ce8\u91ca\u662f\u56e0\u4e3a Dev-C++ \u548c VSCode \u4f7f\u7528\u4e0d\u540c\u7f16\u7801\uff08GB2312 \u548c UTF8\uff09\uff0c\u61d2\u5f97\u6bcf\u6b21\u6253\u5f00\u90fd\u5207\u6362\u4e86\u3002\n\n```cpp\nconst int MAXN = 1e5 + 10;\n\nint n; int aa[4][MAXN];\n\nstruct ND {\n    int val, pos, from;\n    bool operator < (const ND &th) const {\n        return val < th.val;\n    }\n    bool operator == (const ND &th) const {\n        return val == th.val && pos == th.pos && from == th.from;\n    }\n} nds[MAXN * 3];\n\nstruct POS {\n    int from[4];\n    POS() { from[0] = from[1] = from[2] = from[3] = 0x3f3f3f3f; }\n    bool operator < (const POS &th) const {\n\t\treturn from[1] > th.from[1];\n\t}\n} whereis[MAXN]; int cnt;\n\nstruct Point {\n\tint x, y;\n\tbool operator < (const Point &th) const {\n\t\treturn x == th.x ? y < th.y : x < th.x;\n\t}\n\tbool operator == (const Point &th) const {\n\t\treturn x == th.x && y == th.y;\n\t}\n}; std::set<Point> pts; std::multiset<int> sums;\n// pts: store Points on the Ladder\n\nvoid Insert(POS in) {\n\tPoint now = {in.from[2], in.from[3]};\n\tpts.insert(now);\n\tauto it_now = pts.find(now); \n\tauto it_next = it_now; ++it_next;\n\tif (it_next->x >= it_now->x && it_next->y >= it_now->y) {\n\t\tpts.erase(now); return; // not on the Ladder\n\t} auto it_prev = it_now; --it_prev;\n\tif (sums.find(it_prev->x + it_next->y) != sums.end()) {\n\t\tsums.erase(sums.find(it_prev->x + it_next->y));\n\t} // remove an illegal sol which cannot contain the Point just added\n\twhile (true) {\n\t\t// remove all Points which will be contained by the new Ladder\n\t\tit_now = pts.find(now);\n\t\tit_prev = it_now; --it_prev;\n\t\tauto it_cprv = it_prev; --it_cprv;\n\t\tif (!(it_prev->x <= it_now->x && it_prev->y <= it_now->y)) break;\n\t\tif (sums.find(it_cprv->x + it_prev->y) != sums.end())\n\t\t\tsums.erase(sums.find(it_cprv->x + it_prev->y));\n\t\tpts.erase(it_prev);\n\t} it_now = pts.find(now); // insert the new sol\n\tit_next = it_now; ++it_next;\n\tit_prev = it_now; --it_prev;\n\tsums.insert(it_now->y + it_prev->x);\n\tsums.insert(it_now->x + it_next->y);\n}\n\nvoid solve() {\n\tstd::sort(whereis + 1, whereis + 1 + cnt);\n\tpts.insert({0, 0x3f3f3f3f + 2}); pts.insert({0x3f3f3f3f + 2, 0}); // placeholder\n\tsums.insert(0); // placeholder\n\tint ans = 0x3f3f3f3f;\n\tfor (int fst = n, now = 1; fst >= 0; --fst) {\n\t\twhile (now <= cnt && whereis[now].from[1] > fst) { // whereis[] is sorted in <from[1]>-decreasing order\n\t\t\t// add nums which cannot be covered by [1]\n\t\t\tInsert(whereis[now++]);\n\t\t} ans = std::min(ans, *sums.begin() + fst);\n\t} cout << ans << endl; \n}\n\nint main() {\n    std::ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n    cin >> n;\n    rep (t, 1, 3) {\n        rep (i, 1, n) { cin >> aa[t][i]; nds[i + (t - 1) * n] = {aa[t][i], i, t}; }\n    }\n\n    std::sort(nds + 1, nds + 1 + n * 3);\n    for (int i = 1; i <= 3 * n; ++i) { // sort, unique and record the first pos the num exists\n        if (nds[i].val != nds[i - 1].val) ++cnt;\n        aa[nds[i].from][nds[i].pos] = cnt;\n        whereis[cnt].from[nds[i].from] = std::min(whereis[cnt].from[nds[i].from], nds[i].pos);\n    }\n    \n    solve();\n\n    return 0;\n}\n\n```\n\n",
        "postTime": 1632660606,
        "uid": 56626,
        "name": "HDWR",
        "ccfLevel": 6,
        "title": "CF392D Three Arrays \u9898\u89e3"
    }
]