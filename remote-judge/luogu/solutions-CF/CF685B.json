[
    {
        "content": "\u9996\u5148\u786e\u4fdd\u4f60\u77e5\u9053\u4ec0\u4e48\u662f\u6811\u7684\u91cd\u5fc3\u3002\n\n\u8be2\u95ee\u6b21\u6570\u548c\u8282\u70b9\u4e2a\u6570\u540c\u4e2a\u7ea7\u522b\uff0c\u663e\u7136\u53ef\u4ee5\u4e00\u904d\u8dd1\u51fa\u6240\u6709\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u7b54\u6848\u3002\n\n\u8003\u8651\u8282\u70b9$x$\u548c\u5176\u6bcf\u4e2a\u513f\u5b50\u8282\u70b9$y$\uff0c\u82e5$x$\u5b50\u6811\u7684\u91cd\u5fc3\u5728$y$\u5b50\u6811\u5185\uff0c\u5219$x$\u5b50\u6811\u7684\u91cd\u5fc3\u4e00\u5b9a\u5728$y$\u5b50\u6811\u7684\u91cd\u5fc3\u7684\u4e0a\u65b9\uff0c\u56e0\u4e3a\u5f80\u4e0b\u79fb\u52a8\u663e\u7136\u4e0d\u4f18\u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u679a\u4e3e\u6bcf\u4e2a$x$\u7684\u513f\u5b50$y$\uff0c$z$\u4e3a\u5f53\u524d\u8003\u8651\u7684\u8282\u70b9\uff0c\u521d\u59cb\u4e3a$y$\u5b50\u6811\u7684\u91cd\u5fc3\u3002\n\n\u6211\u4eec\u6bcf\u6b21\u8ba9$z$\u5f80\u4e0a\u8df3\uff0c\u5e76\u66f4\u65b0\u5f53\u524d\u6700\u4f18\u89e3\u3002\n\n\u5982\u679c$z$\u5f80\u4e0a\u8df3\u7684\u7ed3\u679c\u6bd4\u5f53\u524d\u4f18\uff0c\u5219\u7ee7\u7eed\uff0c\u5426\u5219\uff0c$z$\u518d\u5f80\u4e0a\u8df3\u663e\u7136\u7b54\u6848\u4f1a\u66f4\u52a0\u52a3\uff0c\u6240\u4ee5\u7ed3\u675f\u5373\u53ef\u3002\n\n\u8fd9\u6837\u505a\uff0c$z$\u53ea\u4f1a\u8df3\u5230\u6bcf\u4e2a\u70b91\u6b21\uff08\u4e0b\u6b21\u518d\u8df3\u53ea\u4f1a\u4ece\u8fd9\u6b21$z$\u8df3\u5230\u7684\u7ec8\u70b9\u5f00\u59cb\u8df3\uff0c\u56e0\u4e3a\u4fdd\u8bc1\u4e86\u6bcf\u6b21\u5f80\u4e0a\u8df3\u66f4\u4f18\uff0c\u6700\u4e0a\u65b9\u7684\u624d\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\uff09\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(n)$\u7684\u3002\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define N 300005\nint n,m,fa[N],head[N],rt[N],sz[N],mx[N],cnt;\nstruct edge{\n\tint to,nxt;\n}e[N];\nvoid dfs(int now,int pre){\n\tsz[now]=1;\n\tfor(int i=head[now];i;i=e[i].nxt){\n\t\tdfs(e[i].to,now);\n\t\tsz[now]+=sz[e[i].to];\n\t\tmx[now]=std::max(mx[now],sz[e[i].to]);\n\t}\n\tint id=now,me=mx[now];\n\tfor(int i=head[now];i;i=e[i].nxt){\n\t\tint it=rt[e[i].to],pre=std::max(mx[it],sz[now]-sz[it]),p=it;\n\t\twhile(fa[it]!=now){\n\t\t\tit=fa[it];\n\t\t\tint New=std::max(mx[it],sz[now]-sz[it]);\n\t\t\tif(New<pre)pre=New,p=it;else break;\n\t\t}\n\t\tif(me>pre){\n\t\t\tme=pre;\n\t\t\tid=p;\n\t\t}\n\t}\n\trt[now]=id;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=2;i<=n;++i){\n\t\tscanf(\"%d\",fa+i);\n\t\te[++cnt]=(edge){i,head[fa[i]]};head[fa[i]]=cnt;\n\t}\n\tdfs(1,0);\n\twhile(m--){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tprintf(\"%d\\n\",rt[x]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1543313473,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF685B \u3010Kay and Snowflake\u3011"
    },
    {
        "content": "**\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u51fan\u4e2a\u6570\uff0cn-1\u4e2a\u6570\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u5171q\u4e2a\u8be2\u95ee\uff0c\u6c42\u4ee5ai\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u7684\u91cd\u5fc3**\n\n$size[i]$\u8868\u793a\u4ee5i\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u8282\u70b9\u4e2a\u6570\uff0c\n\n\u6709\u6811\u7684\u91cd\u5fc3\u7684\u6027\u8d28\u53ef\u77e5\uff0c\u5f53\u67d0\u8282\u70b9u\u7684\u6700\u5927\u5b50\u6811\u8282\u70b9v\u7684size\u7684\u4e24\u500d\u5c0f\u4e8e$size[u]$\n\n\u8be5\u70b9\u4e3a\u91cd\u5fc3\n\n\u5373$size[v]*2< size[u]$\n\n\u4e0d\u7136\u66b4\u529b\u5f80\u4e0a\u8d70\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(n)$\n\n\u4e0a\u4ee3\u7801\n\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint n,q;\nconst int N=600001;\nint nxt[N],first[N],go[N],tot,size[N],f[N],ans[N],fa[N];\nvoid add(int x,int y) {\n\tnxt[++tot]=first[x];\n\tfirst[x]=tot;\n\tgo[tot]=y;\n}\nvoid dfs(int x) {\n\tans[x]=x;\n\tsize[x]=1;\n\tint maxn=0,t=0;\n\tfor(int i=first[x]; i; i=nxt[i]) {\n\t\tint v=go[i];\n\t\tdfs(v);\n\t\tsize[x]+=size[v];\n\t\tif(size[v]>maxn) {\n\t\t\tmaxn=size[v];\n\t\t\tt=v;\n\t\t}\n\t}\n\tf[x]=maxn;\n\tif(f[x]*2<size[x])ans[x]=x;\n\telse {\n\t\tint now=ans[t];\n\t\twhile(fa[now]&&max(f[now],size[x]-size[now])>max(f[fa[now]],size[x]-size[fa[now]]))now=fa[now];\n\t\tans[x]=now;\n\t}\n}\nint main() {\n\tcin>>n>>q;\n\tfor(int i=2; i<=n; i++) {\n\t\tint k;\n\t\tcin>>k;\n\t\tfa[i]=k;\n\t\tadd(k,i);\n\t}\n\tdfs(1);\n\tfor(int i=1; i<=q; i++) {\n\t\tint k;\n\t\tcin>>k;\n\t\tcout<<ans[k]<<endl;\n\t}\n}\n```\n",
        "postTime": 1573219771,
        "uid": 111289,
        "name": "Ryan_",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF685B \u3010Kay and Snowflake\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u5c45\u7136\u6ca1\u6709\u9898\u89e3\u7684\u5417\n\n~~\u679c\u7136CF\u5728\u6d1b\u8c37\u6ca1\u4eba\u505a~~\n\n\u849f\u84bb\u5c0f\u5fc3\u7684\u732e\u4e0a\u9898\u89e3\u62a5\u544aqwq\n\n(\u5efa\u8bae\u5148\u770b\u4ee3\u7801\u518d\u770b\u4e0a\u9762\u7684\u505a\u9898\u8fc7\u7a0b,\u5426\u5219\u60a8\u53ef\u80fd\u770b\u4e0d\u61c2\u6211\u5728\u8bf4\u4ec0\u4e48qwq)\n\n------------\n\n\n\u672c\u9898\u5927\u610f\u5c31\u662f**\u7ed9\u4f60\u4e00\u9897\u6811\u548c\u51e0\u6b21\u67e5\u8be2,\u8be2\u95ee\u7ed9\u5b9a\u67e5\u8be2\u70b9\u7684\u5b50\u6811\u7684\u91cd\u5fc3\u662f\u54ea\u4e00\u4e2a\u70b9**\n\n\u672c\u849f\u84bb\u4e00\u770b\u9898\u9762\u975e\u5e38\u9ad8\u5174,\u8fd9\u4e0d\u76f4\u63a5\u8dd1\u51e0\u6b21DFS\u5c31\u8fc7\u4e86\u5417\n\n\u5f00\u5f00\u5fc3\u5fc3\u7684\u63d0\u4ea4\u4e86\u4ee3\u7801\n```cpp\n\tfor (rg int i = 1;i <= n;++i)\n\t{\n\t\tbigsize = 0x7f7f7f7f;\n\t\tdfs(i,fa[i]);\n\t\tans[i] = bignode;\n\t}\n```\n\u7136\u540e\u8fd9\u5c31\u662f\u7ed3\u679c\n\n![\u4e0d\u5bf9\u52b2\u554a\u5c45\u7136\u8fc7\u4e86\u4e24\u4e2a\u70b9](https://s1.ax1x.com/2018/10/18/iwa7dA.png)\n\n~~\u4e0d\u5bf9\u52b2\u554a\u5c45\u7136\u8fc7\u4e86\u4e24\u4e2a\u70b9~~\n\n\u7136\u540e\u672c\u849f\u84bb\u5c31\u61f5\u903c\u4e86\n\n\u8ba4\u771f\u60f3\u4e86\u60f3 30w\u7684\u6700\u5927\u6570\u636e\u8dd1dfs~~\u9664\u4e86\u5929\u6cb3\u4e00\u53f7~~\u600e\u4e48\u53ef\u80fd\u4e0d\u70b8\n\n\u4e8e\u662f\u51b3\u5b9a\u4fee\u6539dfs\n\n```cpp\n\tres = max(res,n - son[x]);\n\tif (res < bigsize)\n\t{\n\t\tbigsize = res;\n\t\tbignode = x;\n\t}\n\tans[x] = bignode;\n```\n\u55ef..\u679c\u7136\u8f93\u51fa\u7ed3\u679c\u90fd\u662f0\n\n\u6700\u540e\u7ecf\u8fc7\u8ba4(fan)\u771f(bo)\u7814(ke)\u7a76\n\n\u53d1\u73b0\u8fd9\u4e2a\u9898\u53ef\u4ee5\u7528**\u6811\u7684\u91cd\u5fc3\u7684\u7279\u6027**\u6765\u6c42\u89e3\n\n\u6811\u7684\u91cd\u5fc3\u7684\u7279\u6027:\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839,\u90a3\u4e48\u5176\u6240\u6709\u7684\u5b50\u6811\u7684\u5927\u5c0f\u90fd\u4e0d\u8d85\u8fc7\u6574\u4e2a\u6811\u7684\u4e00\u534a.\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u6b21dfs\u56de\u6eaf\u7684\u65f6\u5019\u52a0\u4e00\u4e9b\u7279\u5224\n\n```cpp\nif ((son[res] << 1) > son[x])\n{\n\trg int temp = ans[res];\n\twhile (((son[x] - son[temp]) << 1) > son[x]) temp = fa[temp];\n\tans[x] = temp;\n}\n```\n\u7136\u540e\u5c31\u80fd\u5f00\u5f00\u5fc3\u5fc3\u7684AC\u5566\n\n\n------------\n\n\u8fd9\u4e2a\u9898\u5176\u5b9e\u53ea\u7528\u5efa\u7acb\u5355\u5411\u8fb9,\u56e0\u4e3a\u8fd9\u68f5\u6811\u6839\u672c\u4e0d\u4f1a\u56de\u5230\u4ed6\u7684father\u8282\u70b9,\u65f6\u7a7a\u66f4\u52a0\u4f18\u79c0\n\n~~\u6211\u7684\u6700\u4f18\u89e3\u554aqaq~~\n\n------------\n\n**\u4e0a!\u4ee3!\u7801!**\n\n------------\n\n```cpp\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <iostream>\nusing namespace std;\n#define rg register\ntemplate <typename qwq> inline void read(qwq & x)//\u8bfb\u5165\u4f18\u5316 \n{\n\tx = 0;\n\trg int f = 1;\n\trg char c = getchar();\n\twhile (c < '0' || c > '9')\n\t{\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9')\n\t{\n\t\tx = (x << 1) + (x << 3) + (c ^ 48);//\u4f4d\u8fd0\u7b97\u4f18\u5316 \n\t\tc = getchar();\n\t}\n\tx *= f;\n}\ntemplate <typename qaq> inline void print(qaq x)//\u8f93\u51fa\u4f18\u5316 \n{\n\tif (x < 0)\n\t{\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif (x > 9) print(x / 10);\n\tputchar(x % 10 + '0');\n}\nconst int maxn = 300005;\nstruct edge\n{\n\tint v,next;\n}e[maxn << 1];\nint head[maxn],tot,son[maxn],n,q,fa[maxn];\ninline void add(int x,int y)\n{\n\t++tot;\n\te[tot].v = y;\n\te[tot].next = head[x];\n\thead[x] = tot;\n}\nint bignode,bigsize = 0x7f7f7f7f;\nint ans[maxn];\ninline void dfs(int x,int f)//\u79bb\u7ebf\u9884\u5904\u7406 \n{\n\trg int res = 0;//\u4fdd\u8bc1\u7b2c\u4e00\u6b21\u80fd\u591f\u5408\u6cd5\u67e5\u8be2\u4e14\u6709\u4e00\u4e2a\u6781\u5c0f\u503c,\u90a3\u4e48\u76f4\u63a5\u628a\u4ed6\u8bbe\u4e3a0 \n\tson[x] = 1;\n\tans[x] = x;//\u5148\u9ed8\u8ba4\u8be5\u70b9\u662f\u5176\u5b50\u6811\u7684\u6839\u8282\u70b9 \n\tfor (rg int i = head[x];i;i = e[i].next)//\u524d\u5411\u661f\u904d\u5386\u6811 \n\t{\n\t\tif (e[i].v == f) continue;\n\t\tdfs(e[i].v,x);\n\t\tson[x] += son[e[i].v];\n\t\tif (son[e[i].v] > son[res]) res = e[i].v;//\u53d1\u73b0\u8f83\u5927\u5b50\u6811,\u66f4\u65b0 \n//\t\tres = max(res,son[e[i].v]);\n\t}\n\tif ((son[res] << 1) > son[x])//\u6811\u7684\u91cd\u5fc3\u7684\u5b9a\u4e49:\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839,\u90a3\u4e48\u5176\u6240\u6709\u7684\u5b50\u6811\u7684\u5927\u5c0f\u90fd\u4e0d\u8d85\u8fc7\u6574\u4e2a\u6811\u7684\u4e00\u534a.\n\t//\u8bf4\u660ex\u5e76\u4e0d\u662f\u8be5\u5b50\u6811\u91cd\u5fc3 \n\t{\n\t\trg int temp = ans[res];\n\t\t//\u4f4d\u8fd0\u7b97\u4f18\u5316,\u5de6\u79fb1\u4f4d\u76f8\u5f53\u4e8e\u4e582 \n\t\twhile (((son[x] - son[temp]) << 1) > son[x]) temp = fa[temp];//\u53cd\u590d\u679a\u4e3e\u76f4\u5230\u627e\u5230\u5176\u91cd\u5fc3 \n\t\tans[x] = temp;\n\t}\n//\tres = max(res,n - son[x]);//\u8fd9\u4e2a\u65b9\u6cd5ans\u679c\u7136\u4e3a0 \n//\tif (res < bigsize)\n//\t{\n//\t\tbigsize = res;\n//\t\tbignode = x;\n//\t}\n//\tans[x] = bignode;\n}\nint x,y,z;\nint main()\n{\n\tread(n),read(q);\n\tfor (rg int i = 2;i <= n;++i)\n\t{\n\t\tread(x),add(i,x),add(x,i),fa[i] = x;\n\t}\n//\tfor (rg int i = 1;i <= n;++i)//\u66b4\u529b\u7b97\u6cd5\u679c\u65adTLE \n//\t{\n//\t\tbigsize = 0x7f7f7f7f;\n//\t\tdfs(i,fa[i]);\n//\t\tans[i] = bignode;\n//\t}\n\tdfs(1,0);\n\tfor (rg int i = 1;i <= q;++i)\n\t{\n\t\tread(x);\n\t\tprint(ans[x]),puts(\"\");\n\t}\n}\n```\n",
        "postTime": 1539866571,
        "uid": 118272,
        "name": "\u304f\u308d\u306d\u3053",
        "ccfLevel": 0,
        "title": "[CF685B] Kay and Snowflake \u9898\u89e3\u62a5\u544a"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5e94\u8be5\u7b97\u662f $\\text{CSP2019 \u6811\u7684\u91cd\u5fc3}$ \u7684\u524d\u7f6e\u77e5\u8bc6\u4e86\u5427\u3002~~\u53ef\u60dc\u4e4b\u524d\u6211\u5e76\u6ca1\u6709\u505a\u8fc7\u3002~~\n\n\u5bf9\u4e8e\u4e00\u68f5\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u5b83\u7684\u91cd\u5fc3\u53ea\u53ef\u80fd\u5728\u70b9 $u$ \u6216 \u4ee5\u70b9 $u$ \u7684\u91cd\u513f\u5b50\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u3002\n\n\u90a3\u4e48\u7c7b\u6bd4 $\\text{lca}$ \u500d\u589e\u7236\u4eb2\uff0c\u6811\u7684\u91cd\u5fc3\u500d\u589e\u91cd\u513f\u5b50\u3002\n\n\u67e5\u8be2\u65f6\u4fdd\u8bc1\u500d\u589e\u65f6\u7684\u5b50\u6811\u5927\u5c0f\u4e0d\u5c0f\u4e8e\u539f\u5b50\u6811\u5927\u5c0f\u7684\u4e00\u534a\uff08\u91cd\u5fc3\u7684\u5b9a\u4e49\uff09\u3002\n\n\u6700\u540e\u5b83\u548c\u5b83\u7684\u7236\u8282\u70b9\u90fd\u53ef\u80fd\u662f\u91cd\u5fc3\uff0c\u968f\u4fbf\u5224\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```cpp\n#include <cstdio>\n#include <vector>\nusing namespace std;\n\nconst int MAXN = 300000 , MAXK = 20;\nint n , q;\nvector< int > Graph[ MAXN + 5 ];\n\nint Fa[ MAXN + 5 ] , Size[ MAXN + 5 ] , Hson[ MAXN + 5 ] , Anc[ MAXN + 5 ][ MAXK + 1 ];\nvoid dfs( int u ) {\n    Size[ u ] = 1;\n    for( int i = 0 ; i < Graph[ u ].size() ; i ++ ) {\n        int v = Graph[ u ][ i ];\n        dfs( v ); Size[ u ] += Size[ v ];\n        if( Size[ v ] > Size[ Hson[ u ] ] ) Hson[ u ] = v;\n    }\n    Anc[ u ][ 0 ] = Hson[ u ];\n    for( int i = 1 ; i <= MAXK ; i ++ ) Anc[ u ][ i ] = Anc[ Anc[ u ][ i - 1 ] ][ i - 1 ];\n}\n\nbool chk( int u , int v ) { //\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\uff0cv\u662f\u5426\u4e3a\u91cd\u5fc3\n    return max( Size[ Hson[ v ] ] , Size[ u ] - Size[ v ] ) <= Size[ u ] / 2;\n}\nint Query( int rt ) {\n    int u = rt;\n    for( int i = MAXK ; i >= 0 ; i -- )\n        if( Anc[ u ][ i ] && Size[ Anc[ u ][ i ] ] >= Size[ rt ] / 2 ) u = Anc[ u ][ i ];\n    if( chk( rt , u ) ) return u;\n    if( chk( rt , Fa[ u ] ) ) return Fa[ u ];\n}\n\nint main( ) {\n    scanf(\"%d %d\",&n,&q);\n    for( int i = 2 ; i <= n ; i ++ ) {\n        scanf(\"%d\",&Fa[ i ]);\n        Graph[ Fa[ i ] ].push_back( i );\n    }\n    dfs( 1 );\n    for( int i = 1 , rt ; i <= q ; i ++ ) {\n        scanf(\"%d\",&rt);\n        printf(\"%d\\n\", Query( rt ) );   \n    }\n    return 0;\n}\n```",
        "postTime": 1598259436,
        "uid": 123802,
        "name": "chihik",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF685B \u3010Kay and Snowflake\u3011"
    },
    {
        "content": "#### CF685B Kay and Snowflake\n\n\u56e0\u4e3a\u8be2\u95ee\u5f88\u591a\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u5c31\u5148\u5904\u7406\u51fa\u6bcf\u68f5\u5b50\u6811\u7684\u91cd\u5fc3\u4e4b\u540e\u56de\u7b54\u5373\u53ef\u3002\n\n\u8003\u8651\u4e00\u68f5\u5b50\u6811\u7684\u91cd\u5fc3\uff0c\u8981\u4e48\u662f\u5728\u4ed6\u7684\u91cd\u513f\u5b50\u90a3\u68f5\u5b50\u6811\u4e2d\uff0c\u8981\u4e48\u662f\u5b83\u672c\u8eab\u3002\n\n\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u5c31\u662f\u5982\u679c\u8fd9\u68f5\u5b50\u6811\u7684\u4e2d\u5fc3\u4e0d\u662f\u6839\u7684\u8bdd\uff0c\u90a3\u4e48\u4e00\u5b9a\u79bb\u91cd\u513f\u5b50\u7684\u91cd\u5fc3\u4e0d\u8fdc\uff0c\u4e8e\u662f\u76f4\u63a5\u4ece\u91cd\u513f\u5b50\u7684\u91cd\u5fc3\u5f80\u4e0a\u66b4\u8df3\u5373\u53ef\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#define N 300005\n#define pb push_back\nusing namespace std;\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nint n,q,fa[N],ans[N],siz[N],son[N];\nvector<int>G[N];\nvoid dfs(int x)\n{\n\t//cout<<x<<endl;\n\tint sizz=G[x].size();siz[x]=1;\n\tfor(int i=0;i<sizz;i++)\n\t{\n\t\t//cout<<x<<\" \"<<i<<endl;\n\t\tint v=G[x][i];\n\t\tif(v==fa[x])continue;\n\t\tdfs(v);siz[x]+=siz[v];\n\t\tif(siz[v]>siz[son[x]])son[x]=v;\n\t}\n\tif(siz[son[x]]*2<=siz[x])\n\t{\n\t\tans[x]=x;\n\t\t//cout<<\"!!!!!!!!!!!!!!\"<<x<<endl;\n\t}\n\telse\n\t{\n\t\t//cout<<x<<\" \"<<son[x]<<\" \"<<fa[x]<<\" \"<<siz[son[x]]<<\" \"<<ans[son[x]]<<endl;\n\t\t//return;\n\t\tint xx=ans[son[x]];\n\t\twhile(max(siz[son[xx]],siz[x]-siz[xx])*2>siz[x])xx=fa[xx];//,printf(\"%d\\n\",xx);\n\t\tans[x]=xx;\n\t}\n}\nint main()\n{\n\tn=read();q=read();\n\tfor(int i=2;i<=n;i++){fa[i]=read();G[fa[i]].pb(i);}\n\tdfs(1);\n\twhile(q--)printf(\"%d\\n\",ans[read()]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1612274518,
        "uid": 179600,
        "name": "shao0320",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF685B \u3010Kay and Snowflake\u3011"
    },
    {
        "content": "\u9996\u5148\u5173\u4e8e\u91cd\u5fc3\uff1a\u5b9a\u4e49\uff1a\u4e00\u68f5\u6811\u5c06\u67d0\u4e2a\u70b9\u53bb\u6389\uff0c\u4f1a\u628a\u8fd9\u68f5\u6811\u5206\u4e3a\u597d\u51e0\u5757\uff0c\u4ee5\u6700\u5927\u7684\u4e00\u5757\u7684\u7ed3\u70b9\u4e2a\u6570\u4f5c\u4e3amax_size\uff0c\u8fd9\u6837\u7684\u8bdd\u6bcf\u4e00\u4e2a\u70b9\u90fd\u5bf9\u5e94\u7740\u4e00\u4e2amax_size\uff0c\u8fd9\u4e9b\u503c\u5f53\u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a\u6240\u5bf9\u5e94\u7684\u7ed3\u70b9\u5373\u4e3a\u6811\u7684\u91cd\u5fc3\u3002\n\n\u5b9a\u4e49\uff1ason[i]\u8868\u793a\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u4e2dsize\u6700\u5927\u7684\u5b50\u6811\n\u6027\u8d28\uff1a\u5982\u679c\u4e00\u68f5\u6811\u7684\u67d0\u4e2a\u5b50\u6811\u7684size*2>size[root]\u90a3\u4e48\u8fd9\u4e2a\u9876\u70b9\u662f\u8fd9\u4e9b\u5b50\u6811\u4e2dsize\u6700\u5927\u7684\u5b50\u6811\u7684\u6839\n**\u91cd\u70b9**\uff1a\u82e5x\u4e3a\u6839\u8282\u70b9\uff0c\u8fd9\u9897\u5b50\u6811\u7684\u91cd\u5fc3\u4e00\u5b9a\u5728\u6839\u8282\u70b9\uff08x\uff09\u4e0a\u6216\u8005\u662fson[x]\u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u3002\n\t\t\t\t\u4e00\u4e2a\u6811\u7684\u91cd\u5fc3\u7684dep\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u7684\u5b50\u6811\u7684\u91cd\u5fc3\n\t\t\t\t\u8fd9\u5c31\u6709\u4e86\u6211\u4eec\u7684\u6838\u5fc3\u4ee3\u7801\uff1a\t\n\n```\n\tif(size[son[x]]*2>size[x]){//\u5982\u679c\u8fd9\u4e2a\u513f\u5b50\u7684\u7ed3\u70b9\u6570\u8d85\u8fc7\u6574\u4e2a\u7684\u4e24\u500d \n\t\tk=son[x];//\u627e\u5230\u7b2c\u4e00\u4e2a\u6ca1\u8d85\u8fc7\u4e24\u500d\u7684\u5b50\u6811\u6839\u8282\u70b9 \n\t\twhile((size[x]-size[k])*2>size[x])k=fa[k];\n\t\tans[x]=k;//\u4ee5\u5b83\u4e3a\u7b54\u6848 \n\t}\n\telse{\n\t\tans[x]=x;\n\t}\n```\n\u4ee5\u4e0a\u5c31\u662f\u5bfb\u627e\u91cd\u5fc3\u7684\u8fc7\u7a0b\uff0c\u52a0\u4e0a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5c31\u597d\u4e86\u3002\n\n\u4e0b\u9644AC\u4ee3\u7801\uff1a\n\n```\n#include<iostream>\n#include<cstring>\nusing namespace std;\nstruct edge{\n\tint to,next;\n}e[300010];//\u90bb\u63a5\u8868\u5efa\u56fe\nint eid=0;\nint head[300010];\nint ans[300010];\nvoid insert(int u,int v){\n\teid++;\n\te[eid].to=v;\n\te[eid].next=head[u];\n\thead[u]=eid;\n}\nint fa[300010],son[300010],size[300010];//\u7236\u4eb2\u7ed3\u70b9\nint n,m;\nvoid dfs(int x){//\u666e\u901a\u7684dfs\n\tsize[x]=1;\n\tfor(int i=head[x];i+1;i=e[i].next){\n\t\tint k=e[i].to;\n\t\tdfs(k);\n\t\tsize[x]+=size[k];\n\t\tif(size[k]>size[son[x]])son[x]=k;\n\t}\n\tint k;\n\tif(size[son[x]]*2>size[x]){//\u5982\u679c\u8fd9\u4e2a\u513f\u5b50\u7684\u7ed3\u70b9\u6570\u8d85\u8fc7\u6574\u4e2a\u7684\u4e24\u500d \n\t\tk=son[x];//\u627e\u5230\u7b2c\u4e00\u4e2a\u6ca1\u8d85\u8fc7\u4e24\u500d\u7684\u5b50\u6811\u6839\u8282\u70b9 \n\t\twhile((size[x]-size[k])*2>size[x])k=fa[k];\n\t\tans[x]=k;//\u4ee5\u5b83\u4e3a\u7b54\u6848 \n\t}\n\telse{\n\t\tans[x]=x;\n\t}\n\treturn ;\n}\nint main(){\n\tmemset(head,-1,sizeof(head));\n\tcin>>n>>m;\n\tfor(int i=2;i<=n;i++){\n\t\tcin>>fa[i];\n\t\tinsert(fa[i],i);\n\t}\n\tdfs(1);\n\tfor(int i=1;i<=m;i++){\n\t\tint x;\n\t\tcin>>x;\n\t\tcout<<ans[x]<<endl;\n\t}\n}\n```\n\u4e00\u4e9b\u8bf4\u660e\uff1a\u4e0b\u6587\u4e2d\u6211\u7684dfs\u4e00\u822c\u4f1a\u6709\u4e24\u4e2a\u5f62\u53c2\uff0cdfs(int x,int fa)\u5206\u522b\u4ee3\u8868\u7ed3\u70b9\u4e0e\u5176\u7236\u8282\u70b9\uff0c\u4e24\u79cd\u5747\u53ef\u4f46\u662f\u4e0b\u6587\u7684\u66f4\u52a0\u901a\u7528\uff0c\u56e0\u4e3a\u4e0a\u6587\u4e2d\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u6cbf\u7740\u8fb9\u5411\u4e0a\u67e5\u627e\uff0c\u6240\u4ee5\u8bf4\u6211\u662f\u5efa\u4e86\u4e00\u4e2a\u6709\u5411\u6811\uff0c\u53ea\u80fd\u4ece\u7236\u4eb2\u8bbf\u95ee\u513f\u5b50\uff0c\u56e0\u6b64\u6211\u5c31\u4e0d\u9700\u8981\u5728\u679a\u4e3e\u8fb9\u7684\u65f6\u5019\u5224\u65ad\u6211\u8981\u53bb\u7684\u70b9\u662f\u5426\u662f\u7236\u4eb2\uff0c\u662f\u7684\u8bdd\u8fd8\u8981\u8df3\u8fc7\u3002\n\n",
        "postTime": 1567250103,
        "uid": 120244,
        "name": "luyan",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF685B \u3010Kay and Snowflake\u3011"
    },
    {
        "content": "# [Kay and Snowflake](https://www.luogu.com.cn/problem/CF685B)\n\u8fd9\u662f\u4e00\u9053\u6811\u7684\u91cd\u5fc3\u677f\u5b50\u9898\u3002\u9996\u5148\uff0c\u6211\u4eec\u8981\u8ba4\u8bc6\u6811\u7684\u91cd\u5fc3\u662f\u4ec0\u4e48\u3002\n\n## \u5b9a\u4e49\n\u5bf9\u4e8e\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u8ba1\u7b97\u5176\u6240\u6709\u5b50\u6811\u4e2d\u6700\u5927\u7684\u5b50\u6811\u8282\u70b9\u6570\uff0c\u4f7f\u8fd9\u4e2a\u503c\u6700\u5c0f\u7684\u70b9\u5c31\u662f\u8fd9\u68f5\u6811\u7684**\u91cd\u5fc3**\u3002\n## \u6027\u8d28\n- \u4ee5\u6811\u7684\u91cd\u5fc3\u4e3a**\u6839**\u65f6\uff0c\u6240\u6709\u5b50\u6811\u7684\u5927\u5c0f\u90fd\u4e0d\u8d85\u8fc7\u6574\u68f5\u6811\u5927\u5c0f\u7684**\u4e00\u534a**\u3002\n- \u6811\u4e2d\u6240\u6709\u70b9\u5230\u67d0\u4e2a\u70b9\u7684\u8ddd\u79bb\u548c\u4e2d\uff0c\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\u548c\u662f**\u6700\u5c0f**\u7684\uff1b\u5982\u679c\u6709\u4e24\u4e2a\u91cd\u5fc3\uff0c\u90a3\u4e48\u5230\u5b83\u4eec\u7684\u8ddd\u79bb\u548c**\u4e00\u6837**\u3002\n- \u628a\u4e24\u68f5\u6811\u901a\u8fc7\u4e00\u6761\u8fb9\u76f8\u8fde\u5f97\u5230\u4e00\u68f5\u65b0\u7684\u6811\uff0c\u90a3\u4e48\u65b0\u7684\u6811\u7684\u91cd\u5fc3\u5728\u8fde\u63a5\u539f\u6765\u4e24\u68f5\u6811\u7684\u91cd\u5fc3\u7684\u8def\u5f84\u4e0a\u3002\n- \u5728\u4e00\u68f5\u6811\u4e0a\u6dfb\u52a0\u6216\u5220\u9664\u4e00\u4e2a**\u53f6\u5b50**\uff0c\u90a3\u4e48\u5b83\u7684\u91cd\u5fc3\u6700\u591a\u53ea\u79fb\u52a8\u4e00\u6761\u8fb9\u7684\u8ddd\u79bb\u3002\n- \u5f53\u67d0\u8282\u70b9 $u$ \u7684\u6700\u5927\u5b50\u6811\u8282\u70b9 $v$ \u7684 $size$ \u7684**\u4e24\u500d**\u5c0f\u4e8e $size_u$\uff0c\u5219\u8be5\u70b9\u4e3a\u91cd\u5fc3\u3002\n\n\u6839\u636e\u6027\u8d28 5\uff0c\u76f4\u63a5 dfs \u5f80\u4e0a\u8df3\u5373\u53ef\u3002\n# \u4ee3\u7801\u5b9e\u73b0\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,tot,q,size1[300005],size2[300005],head[300005],ans[300005],fa[300005];\nstruct edge\n{\n\tint nxt,to;\n}e[600005];\nvoid add_edge(int u,int v)\n{\n\te[++tot].to=v;\n\te[tot].nxt=head[u];\n\thead[u]=tot;\n}\nvoid dfs(int u,int fa1)\n{\n\tfa[u]=fa1;\n\tsize1[u]=1;\n\tfor(int i=head[u];i!=0;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa1)\n\t\t\tcontinue;\n\t\tdfs(v,u);\n\t\tsize1[u]+=size1[v];\n\t\tif(size1[v]>size1[size2[u]])\n\t\t\tsize2[u]=v;\n\t}\n\tif(!size2[u])\n\t{\n\t\tans[u]=u;\n\t\treturn ;\n\t}\n\tans[u]=ans[size2[u]];\n\twhile(size1[ans[u]]*2<size1[u])\n\t{\n\t\tans[u]=fa[ans[u]];\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tint t;\n\t\tscanf(\"%d\",&t);\n\t\tadd_edge(i,t);\n\t\tadd_edge(t,i);  \n\t}\n\tdfs(1,0);\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tint t;\n\t\tscanf(\"%d\",&t);\n\t\tprintf(\"%d\\n\",ans[t]);\n\t}\n\treturn 0;\n}\n```\n\u5e0c\u671b\u672c\u7bc7\u9898\u89e3\u53ef\u4ee5\u5e2e\u5230\u5927\u5bb6\uff01\uff01\uff01",
        "postTime": 1667646067,
        "uid": 631576,
        "name": "cyz2010",
        "ccfLevel": 0,
        "title": "CF685B\u9898\u89e3"
    },
    {
        "content": "~~\u672c\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3~~\n\n\u8fd9\u662f\u4e00\u9053\u6811\u7684\u91cd\u5fc3\uff0c\u4e0d\u77e5\u9053\u7684\u5efa\u8bae\u5148\u53bb\u505a\u505a\u6a21\u677f\u9898 [P1395 \u4f1a\u8bae](https://www.luogu.com.cn/problem/P1395) \n\n\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u505a\u6cd5\u5c31\u662f\u66b4\u529b\u5730\u76f4\u63a5\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u8fdb\u884c\u7684        dfs,\u627e\u5230\u8fd9\u68f5\u5b50\u6811\u5f97\u91cd\u5fc3 \uff0c \u4f46\u662f\u663e\u800c\u6613\u89c1\u4f1a\u8d85\u65f6\uff0c\u8003\u8651\u9884\u5148\u6c42\u51fa\u6bcf\u68f5\u5b50\u6811\u7684\u91cd\u5fc3\uff0c\u67e5\u8be2\u65f6 O\uff081\uff09\u8f93\u51fa\u8be5\u5b50\u6811\u91cd\u5fc3\uff0c\u8fd9\u9053\u9898\u5c31\u53ef\u4ee5 AC \u4e86\u3002\n\n\u90a3\u4e48\u5982\u4f55\u6c42\u6bcf\u68f5\u5b50\u6811\u7684\u91cd\u5fc3\u5462 \uff1f\n\n#### **\u5bf9\u4e8e\u4e00\u9897\u6811\u5b83\u7684\u91cd\u5fc3\u5728\u521d\u59cb\u6839\u8282\u70b9\u6216\u8005\u6700\u91cd\u5b50\u6811\u4e0a**\n\n------------\n\u4f9d\u636e\u6811\u7684\u91cd\u5fc3\u7684\u6027\u8d28\uff0c\u6240\u6709\u70b9\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\u548c\u6700\u5c0f\u3002\u6362\u8a00\u4e4b\u4ee5\u91cd\u5fc3\u4e3a\u6839\u65f6\uff0c\u6240\u6709\u70b9\u7684\u6df1\u5ea6\u548c\u6700\u5c0f\u3002\u82e5\u628a\u6839\u8282\u70b9\u5b9a\u5728\u4efb\u610f\u8282\u70b9\u65f6\uff0c\u5219\u8be5\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u6df1\u5ea6\u90fd\u51cf\u5c0f\uff0c\u76f8\u5e94\u7684\u5176\u4ed6\u5b50\u6811\u7684\u8282\u70b9\u7684\u6df1\u5ea6\u4f1a\u589e\u52a0\u3002\u6700\u5927\u5b50\u6811\u5b50\u8282\u70b9\u6700\u591a\uff0c\u6240\u4ee5\u6df1\u5ea6\u548c\u51cf\u5c0f\u5c31\u6700\u591a\uff0c\u6240\u4ee5\u628a\u6839\u8282\u70b9\u653e\u5728\u6700\u5927\u5b50\u6811\u4e0a\u4f1a\u4f18\u4e8e\u653e\u5728\u5176\u4ed6\u5b50\u6811\u4e0a\uff0c\u6240\u4ee5\u4e00\u68f5\u6811\u7684\u91cd\u5fc3\u4e0d\u5728\u521d\u59cb\u6839\u8282\u70b9\u4e0a\u5c31\u5728\u521d\u59cb\u6839\u8282\u70b9\u7684\u6700\u5927\u5b50\u6811\u4e0a\u3002\n\n#### \u628a\u4e24\u68f5\u6811\u901a\u8fc7\u4e00\u6761\u8fb9\u76f8\u8fde\uff0c\u65b0\u7684\u6811\u7684\u91cd\u5fc3\u5728\u539f\u6765\u4e24\u9897\u6811\u91cd\u5fc3\u7684\u8fde\u7ebf\u4e0a\n\u5728\u641c\u7d22\u4e00\u9897\u5b50\u6811\u65f6\u53ef\u4ee5\u770b\u505a\u628a\u8fd9\u9897\u5b50\u6811\u548c\u4e4b\u524d\u7684\u8282\u70b9\u4e0e\u6839\u8282\u70b9\u5f62\u6210\u7684\u6570\u4e4b\u95f4\u901a\u8fc7\u4e00\u6761\u8fb9\u76f8\u8fde\n\n\n------------\n\u7531\u6b64\u53ef\u5f97\u4e00\u9897\u6811\u7684\u91cd\u5fc3\u5728\u8fd9\u9897\u6811\u7684\u6700\u91cd\u5b50\u6811\u7684\u91cd\u5fc3\u4e0e\u6839\u8282\u70b9\u7684\u8fde\u7ebf\u4e0a\u3002\n\n\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6211\u4eec\u627e\u5230\u5b83\u7684\u6700\u91cd\u5b50\u6811\u4ece\u6700\u91cd\u5b50\u6811\u7684\u91cd\u5fc3\u5f80\u4e0a\u8df3\uff0c\u4ece\u800c\u627e\u5230\u8fd9\u4e2a\u6839\u8282\u70b9\u4e0b\u7684\u5b50\u6811\u7684\u91cd\u5fc3\u3002\n\n\u5f80\u4e0a\u8df3\u65f6\u8fd8\u6709\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5982\u679c\u6b64\u65f6\u7ed3\u679c\u4e0d\u5982\u4e0a\u4e00\u4e2a\u8282\u70b9\u66f4\u4f18\uff0c\u5219\u7ee7\u7eed\u8df3\u4e0b\u53bb\u4e5f\u4e0d\u4f1a\u66f4\u4f18\u3002\u56e0\u4e3a\u6b64\u65f6\u6df1\u5ea6\u589e\u52a0\u7684\u70b9\u7684\u4e2a\u6570\u5df2\u7ecf\u591a\u4e8e\u6df1\u5ea6\u51cf\u5c0f\u7684\u70b9\u7684\u4e2a\u6570\uff0c\u518d\u8df3\u4e0b\u53bb\u8fd9\u4e2a\u5dee\u503c\u4f1a\u66f4\u5927\uff0c\u6545\u4e0d\u53ef\u80fd\u66f4\u4f18\u3002\n\n\u4f18\u52a3\u5224\u65ad\u7528\u8f93\u7684\u91cd\u5fc3\u7684\u6027\u8d28\uff1a\u4ee5\u6811\u7684\u91cd\u5fc3\u4e3a\u6839\u65f6\uff0c\u6240\u6709\u5b50\u6811\u7684\u5927\u5c0f\u90fd\u4e0d\u8d85\u8fc7\u6574\u68f5\u6811\u5927\u5c0f\u7684\u4e00\u534a\n\n\u4e0b\u9762\u662f\u6211\u7684 AC \u4ee3\u7801\n\n```c\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=6e5+9,MAX=0x3f3f3f3f;\nint n,q,cnt,fa[N],ans[N],pre[N],last[N],other[N],size[N];\nvoid add(int x,int y)\n{\n\tpre[++cnt]=last[x];\n\tlast[x]=cnt;\n\tother[cnt]=y;\n}\nvoid dfs(int x)\n{\n\tint maxs=0;//\u521d\u59cb\u5316\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f\u4e3a0 \n\tint an=0;//\u7528\u4e8e\u8bb0\u5f55\u6700\u5927\u5b50\u6811\u6240\u5728\u7684\u5b50\u8282\u70b9 \n\tans[x]=x;//\u521d\u59cb\u5316\u6bcf\u68f5\u5b50\u6811\u7684\u91cd\u5fc3\u4e3a\u8fd9\u68f5\u5b50\u6811\u7684\u521d\u59cb\u6839 \n\tsize[x]=1;\n\tfor(int i=last[x];i;i=pre[i])\n\t{\n\t\tint y=other[i];\n\t\tdfs(y);\n\t\tsize[x]+=size[y];//\u8ba1\u7b97\u5b50\u6811\u5927\u5c0f \n\t\tif(size[y]>maxs) //\u6bd4\u8f83\u6700\u5927\u5b50\u6811\u5e76\u8bb0\u5f55 \n\t\t{\n\t\t\tmaxs=size[y];\n\t\t\tan=y;\n\t\t}\n\t}\n\tif(2*size[an]>size[x])//\u4ee5\u6811\u7684\u91cd\u5fc3\u4e3a\u6839\u65f6\uff0c\u6240\u6709\u5b50\u6811\u7684\u5927\u5c0f\u90fd\u4e0d\u8d85\u8fc7\u6574\u68f5\u6811\u5927\u5c0f\u7684\u4e00\u534a\n\t{\n\t\tint temp=ans[an];\n\t\twhile(2*(size[x]-size[temp])>size[x])\n\t\t{\n\t\t\ttemp=fa[temp];\n\t\t}\n\t\tans[x]=temp;\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tfa[i]=x;\n\t\tadd(x,i);\n\t}\n\tdfs(1);\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n//\t\tcout<<\"ans: \";\n\t\tcout<<ans[x]<<endl;\n\t}\n}\n```\n",
        "postTime": 1632293483,
        "uid": 444672,
        "name": "\u82b1\u5b9eAngel",
        "ccfLevel": 3,
        "title": "CF685B Kay and Snowflake"
    },
    {
        "content": "\u5148\u6765\u770b\u6570\u636e\uff0c$q\u22643\u00d710^5$\uff0c\u663e\u7136\u4e0d\u53ef\u80fd\u8fb9\u95ee\u8fb9\u641c\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u9884\u5904\u7406\u51fa $focus_x$ \u8868\u793a\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u7684\u91cd\u5fc3\u3002\n\n\u7528 DFS \u9884\u5904\u7406\u51fa $size_x$\uff0c\u5373\u904d\u5386\u4e00\u904d\u6574\u68f5\u6811\u6c42\u51fa\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\u3002\n\n\u4ece\u8d2a\u5fc3\u7684\u7b56\u7565\u51fa\u53d1\uff0c\u663e\u7136\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u7684\u91cd\u5fc3\u53ea\u80fd\u5728\u5176\u6700\u91cd\u7684\u5b50\u6811\u4e0a\u6216\u8005 $x$ \u672c\u8eab\u3002\u5b9a\u4e49 $deep_i$ \u8868\u793a\u8282\u70b9 $i$ \u7684\u6df1\u5ea6\uff0c\u4e00\u5b9a\u6709\uff1a\n\n$deep_{focus_x}\u2264deep_{focus_y}$\n\n\u5373\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u91cd\u5fc3\u7684\u6df1\u5ea6\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u4ee5 $y$ \u4e3a\u6839\u7684\u5b50\u6811\u91cd\u5fc3\u7684\u6df1\u5ea6\u3002\u5176\u4e2d $y$ \u662f $x$ \u7684\u91cd\u513f\u5b50\u3002\n\n\u4e3a\u4e86\u66f4\u65b9\u4fbf\uff0c\u518d\u7528 $size_x$ \u9884\u5904\u7406\u51fa\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f\u3002\n\n\u4ee5\u4e0a\u904d\u5386\u4e86\u6574\u68f5\u6811\uff0c\u6548\u7387\u662f $O(n)$\u3002\n\n\u63a5\u4e0b\u6765\u518d\u4ece\u6839\u8282\u70b9 $1$ \u5f00\u59cb\uff0c\u9012\u5f52\u6c42\u51fa $x$ \u6bcf\u4e00\u9897\u5b50\u6811\u7684\u91cd\u5fc3\u3002\u4f46\u662f\u6ce8\u610f\u6c42 $x$ \u91cd\u5fc3\uff0c\u53ea\u4ece $x$ \u6700\u5927\u7684\u90a3\u68f5\u5b50\u6811\u7684\u91cd\u5fc3\u5f00\u59cb\u5f80\u4e0a\u8df3\uff0c\u5f53\u7ee7\u7eed\u5f80\u4e0a\u8df3\u4e0d\u5982\u5f53\u4e0b\u7684\u65f6\u5019\u505c\u4e0b\u6765\uff0c\u4e0d\u7136\u53ef\u80fd\u8d85\u65f6\u3002\n\n\u7279\u522b\u5730\uff0c\u6bcf\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u7684\u91cd\u5fc3\u662f\u5b83\u81ea\u5df1\u3002\n\n\u56e0\u4e3a\u6bcf\u6b21\u53ea\u4ece\u91cd\u5b50\u6811\u7684\u91cd\u5fc3\u5f80\u4e0a\u8df3\uff0c\u6240\u4ee5\u6bcf\u4e2a\u70b9\u53ea\u904d\u5386\u4e00\u6b21\uff0c\u590d\u6742\u5ea6\u662f $O(n)$\u3002\n\n\u6ce8\u610f\u662f\u65e0\u5411\u56fe\uff0c\u6570\u7ec4\u5f00\u53cc\u500d\u3002\n\n```cpp\n#include<iostream>\n#include<cstring>\nusing namespace std;\nint n,q,tot,max_part,pos;\nint ver[600001],Next[600001],head[300001],size[300001],fa[300001],max_sontree[300001],focus[300001];\nbool mark[300001];\nvoid add(int x,int y){\n\tver[++tot]=y;\n\tNext[tot]=head[x],head[x]=tot;\n}\nvoid dfs(int x){\n\tif(size[x])return ;\n\tsize[x]=1;\n\tfor(int i=head[x];i;i=Next[i]){\n\t\tint y=ver[i];\n\t\tif(fa[x]==y)continue;\n\t\tdfs(y);\n\t\tsize[x]+=size[y];\n\t}\n\tfor(int i=head[x];i;i=Next[i]){\n\t\tint y=ver[i];\n\t\tif(fa[x]==y)continue;\n\t\tmax_sontree[x]=max(max_sontree[x],size[y]);\n\t\t//\u6c42\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f \n\t}\n}\nvoid find(int x){\n\tif(focus[x])return ;\n\tfor(int i=head[x];i;i=Next[i]){\n\t\tint y=ver[i];\n\t\tif(fa[x]==y)continue;\n\t\tfind(y);\n\t\t//\u6c42\u6bcf\u9897\u5b50\u6811\u7684\u91cd\u5fc3 \n\t\tif(size[y]!=max_sontree[x])continue;\n\t\t//\u5982\u679c\u4e0d\u662f\u91cd\u513f\u5b50\u5c31\u9000\u51fa \n\t\tint cnt=focus[y];\n\t\twhile(cnt){\n\t\t\tint s=max(max_sontree[cnt],size[x]-size[cnt]);\n\t\t\tint t=max(max_sontree[focus[x]],size[x]-size[focus[x]]);\n\t\t\tif(s<t||!focus[x])focus[x]=cnt,cnt=fa[cnt];\n\t\t\telse break;\n\t\t\t//\u7ee7\u7eed\u5f80\u4e0a\u8df3\u7ed3\u679c\u66f4\u5dee\uff0c\u9000\u51fa\u5faa\u73af \n\t\t}\n\t}\n}\nint main(){\n\tcin>>n>>q;\n\tfor(int i=2;i<=n;i++){\n\t\tint x;\n\t\tcin>>x;\n\t\tadd(x,i);\n\t\tadd(i,x);\n\t\tfa[i]=x; mark[x]=1;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(!mark[i])focus[i]=i;\n\t\t//\u53f6\u5b50\u7ed3\u70b9\u91cd\u5fc3\u662f\u672c\u8eab \n\tdfs(1);\n\t//\u9884\u5904\u7406 \n\tfind(1);\n\tfor(int i=1;i<=q;i++){\n\t\tint root;\n\t\tcin>>root;\n\t\tcout<<focus[root]<<endl;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1627202096,
        "uid": 218530,
        "name": "BoAn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF685B \u3010Kay and Snowflake\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u505a\u6cd5\n\n\u6709\u4e00\u4e2a\u5b9a\u7406\u5c31\u662f \u5bf9\u4e8e\u4e00\u6761\u6811\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u8fde\u540c\u5757 \u91cd\u5fc3\u4f1a\u5728\u5927\u7684\u90a3\u5757 \u5982\u679c\u4e24\u5757\u5927\u5c0f\u76f8\u540c \u90a3\u4e48\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u90fd\u662f\u91cd\u5fc3\n\n\u6240\u4ee5\u4e00\u4e2a\u70b9$v$\u8981\u662f\u5b50\u6811$u$\u7684\u91cd\u5fc3\u7684\u6761\u4ef6\u662f\uff1a\n\n\u9996\u5148\u8981\u6ee1\u8db3$v$\u5728\u5b50\u6811$u$\u4e2d:$1.v\\in subtree_u$\n\n$2.\\forall w\\in son_v \\ \\ size_u-size_w\\geq size_w$\n\n\u4ee3\u8868\u91cd\u5fc3\u4e0d\u80fd\u5f80\u4e0b\u79fb(\u53ef\u4ee5v\u548cv\u7684\u67d0\u4e2a\u513f\u5b50\u540c\u65f6\u662f\u91cd\u5fc3)\n\n\u8fd9\u4e2a\u4efb\u610f\u53ef\u4ee5\u901a\u8fc7\u53d6\u4e2a\u6700\u5927\u503c\u5316\u6389\n\n$2.\\max_{w\\in son_v} \\{2size[w]\\}\\leq size_u$\n\n\u8fd9\u4e2a\u6700\u5927\u7684\u5b50\u6811\u5927\u5c0f\u53ef\u4ee5\u76f4\u63a5\u9884\u5904\u7406\u51fa\u6765\uff0c\u8bb0\u4f5c$maxw$\n\n\u5373 $2.\\ \\ \\ \\ \\ 2maxw_v \\leq size_u$\n\n\n$3.size_v\\geq size_u-size_v$\n\n\u4ee3\u8868\u91cd\u5fc3\u4e0d\u80fd\u5f80\u4e0a\u79fb(\u53ef\u4ee5v\u548cv\u7684\u7236\u4eb2\u540c\u65f6\u4e3a\u91cd\u5fc3)\n\n\u7136\u540e\u5982\u679c\u662f\u679a\u4e3eu\u770b\u54ea\u4e9bv\u6ee1\u8db3\u6761\u4ef6\u7684\u8bdd \u53d1\u73b0\u662f\u4e2a\u4e09\u7ef4\u504f\u5e8f(v\u5728u\u7684\u5b50\u6811\u4e2d $maxw_v$\u548c$size_v$)\n\n\u975e\u5e38\u9634\u95f4 \u8003\u8651\u53cd\u8fc7\u6765\u5bf9\u4e8e\u6bcf\u4e2a$v$\u770b\u5b83\u80fd\u6210\u4e3a\u54ea\u4e9b$u$\u7684\u7b54\u6848\n\n\u53d1\u73b0\u53ea\u5269\u4e8c\u7ef4\u4e86($size_u$ u\u662fv\u7684\u7956\u5148)\n\n\u7956\u5148\u8fd9\u4e2a\u7ef4\u5ea6\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u63d2\u5165\u3001\u56de\u6eaf\u5220\u9664\u7684\u65b9\u6cd5\u8f7b\u677e\u89c4\u907f\u6389\n\n\u5269\u4e0b\u4e00\u7ef4\u662f$2maxw_v\\leq size_u \\leq 2size_v$\n\n\u8fd9\u4e2a\u53ef\u4ee5\u8f7b\u677e\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\n\n\u6211\u4eec\u8981\u4fee\u6539\u8fd9\u4e9bu\u7684\u7b54\u6848 \u6211\u4eec\u5c31\u9700\u8981\u77e5\u9053size\u6ee1\u8db3\u8fd9\u4e2a\u9650\u5236\u7684\u7684\u7f16\u53f7\n\n\u56e0\u4e3a\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e86\u4e00\u6761\u7956\u5b59\u6811\u94fe \u6240\u4ee5size\u4e0e\u70b9\u4e00\u4e00\u5bf9\u5e94\n\n\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5bf9\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u5f00\u4e2avector\u88c5\u7f16\u53f7 \u67e5\u8be2\u7684\u65f6\u5019\u76f4\u63a5\u8bbf\u95ee\u4e00\u6574\u4e2avector\u4e00\u4e2a\u4e2a\u6539\u7b54\u6848\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u662f\u6ca1\u6709\u95ee\u9898\u7684 \u9996\u5148\u7a7a\u95f4\u590d\u6742\u5ea6\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u63d2\u5165\u5230$O(log)$\u4e2a\u70b9\u91cc\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8bdd\uff0c\u56e0\u4e3a\u4e00\u68f5\u6811\u6700\u591a\u6709\u4e24\u9897\u91cd\u5fc3\uff0c\u6240\u4ee5\u6bcf\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684u\u6700\u591a\u88ab\u8be2\u95ee\u4e24\u6b21\n\n\u56de\u6eaf\u7684\u65f6\u5019\u9700\u8981\u5220\u9664 \u7528vector\u53ef\u80fd\u4e0d\u592a\u597d\u5220 \u6211\u5c31\u6362\u6210\u4e86set \u591a\u4e00\u4e2alog\u4f46\u662f\u5176\u5b9e\u633a\u5feb\u7684\n\n\u7a7a\u95f4\u590d\u6742\u5ea6$O(n\\log n)$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(n \\log^2 n)$\n\n\u603b\u4e4b\u662f\u4e2a\u975e\u5e38\u66b4\u529b\u7684\u505a\u6cd5\uff0c\u6570\u636e\u8303\u56f4\u4e5f\u6ca1\u6709\u5927\u5230\u4e00\u5b9a\u8981\u90a3\u79cd\u806a\u660e\u7684$O(n)$\u505a\u6cd5\n```cpp\n#include<set>\n#include<cstdio>\n#include<vector>\nusing std::set;\nusing std::max;\nusing std::vector;\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch(getchar());\n\twhile (ch<48||ch>57)ch=getchar();\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+(ch&15),ch=getchar();\n}\ntypedef vector<int>Vector;\ntypedef set<int>Set;\nconst int N(3e5+5);\nint n,m,ans[N],size[N],maxw[N];\nVector son[N];\nstruct tree\n{\n\tSet id;\n\ttree *lson,*rson;\n\tvoid *operator new(size_t size);\n\tinline tree(){}\n\tinline const void insert(const int &l,const int &r,const int &k,const int &v)\n\t{\n\t\tid.insert(v);\n\t\tif (l==r)return;\n\t\tconst int mid(l+r>>1);\n\t\tif (k<=mid)lson->insert(l,mid,k,v);\n\t\telse rson->insert(mid+1,r,k,v);\n\t}\n\tinline const void remove(const int &l,const int &r,const int &k,const int &v)\n\t{\n\t\tid.erase(v);\n\t\tif (l==r)return;\n\t\tconst int mid(l+r>>1);\n\t\tif (k<=mid)lson->remove(l,mid,k,v);\n\t\telse rson->remove(mid+1,r,k,v);\n\t}\n\tinline const void query(const int &l,const int &r,const int &L,const int &R,const int &k)\n\t{\n\t\tif (l>R||r<L)return;\n\t\tif (l>=L&&r<=R)\n\t\t{\n\t\t\tfor (Set::iterator i(id.begin());i!=id.end();i++)ans[*i]=k;\n\t\t\treturn;\n\t\t}\n\t\tconst int mid(l+r>>1);\n\t\tlson->query(l,mid,L,R,k);\n\t\trson->query(mid+1,r,L,R,k);\n\t}\n}*root;\nchar memory_pool[N*sizeof(tree)<<1],*tail(memory_pool+sizeof(memory_pool));\ninline void *tree::operator new(size_t size){return tail-=size;}\ninline const void build(tree *&p,const int &l,const int &r)\n{\n\tp=new tree;\n\tif (l==r)return;\n\tconst int mid(l+r>>1);\n\tbuild(p->lson,l,mid);\n\tbuild(p->rson,mid+1,r);\n}\ninline const void get_size(const int &p)\n{\n\tsize[p]=1;\n\tfor (Vector::iterator i(son[p].begin());i!=son[p].end();i++)\n\t\tget_size(*i),\n\t\tsize[p]+=size[*i],\n\t\tmaxw[p]=max(maxw[p],size[*i]);\n}\ninline const void dfs(const int &p)\n{\n\troot->insert(1,n,size[p],p);\n\troot->query(1,n,maxw[p]<<1,size[p]<<1,p);\n\tfor (Vector::iterator i(son[p].begin());i!=son[p].end();i++)dfs(*i);\n\troot->remove(1,n,size[p],p);\n}\nint main()\n{\n\tread(n);read(m);\n\tfor (int fa,i(2);i<=n;i++)read(fa),son[fa].push_back(i);\n\tget_size(1);build(root,1,n);dfs(1);\n\tfor (int x;m--;)read(x),printf(\"%d\\n\",ans[x]);\n\treturn 0;\n}\n```",
        "postTime": 1602338799,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF685B \u3010Kay and Snowflake\u3011"
    },
    {
        "content": "**\u4e00\u4e2a\u6811\u7684\u91cd\u5fc3\u4e00\u5b9a\u5728\u4ed6\u6240\u6709\u513f\u5b50\u7684\u5b50\u6811\u7684\u91cd\u5fc3\u7684\u8fde\u7ebf\u4e0a\u3002**\uff08\u53ef\u4ee5\u81ea\u5df1\u591a\u753b\u51e0\u4e2a\u56fe\u6765\u8bc1\u660e\n\n\u90a3\u4e48\u5148dfs\u4ece\u6df1\u5ea6\u6700\u6df1\u7684\u70b9\u5f00\u59cb\u5f80\u4e0a\u722c\u5e76\u66f4\u65b0\u6700\u4f18\u89e3\u3002\u5982\u679c\u5f80\u4e0a\u8df3\u7684\u5927\u5c0f\u53cd\u800c\u589e\u5927\uff0c\u4fbf\u53ef\u4ee5\u76f4\u63a5\u7ed3\u675f\u3002ans[u]\u8bb0\u5f55u\u4e3a\u6839\u7684\u91cd\u5fc3\u4f4d\u7f6e\u3002\u663e\u7136\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u7ecf\u8fc7\u4e00\u6b21\u65f6\u95f4\u4e3ao(n)\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\ninline int read()\n{\n\tint x=0,f=1;\n\tchar c=getchar();\n\twhile(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n\twhile(isdigit(c)){x=(x<<3)+(x<<1)+(c^48);c=getchar();}\n\treturn x*f;\n}\n\nconst int N=300010;\nstruct edge\n{\n\tint nxt,to;\n}e[N];\nint n,m,cnt;\nint Fa[N],head[N],sz[N],mx[N],ans[N];\ninline void init()\n{\n\tcnt=0;\n\tmemset(head,-1,sizeof(head));\n}\ninline void add_edge(int u,int v)\n{\n\te[++cnt].nxt=head[u];\n\te[cnt].to=v;\n\thead[u]=cnt;\n}\ninline void dfs(int u,int fa)\n{\n\t\n\tsz[u]=1;//\u5c31\u81ea\u5df1\u4e00\u4e2a\u70b9\u5927\u5c0f\u4e3a1\n\tfor(int i=head[u];i!=-1;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tdfs(v,u);\n\t\tsz[u]+=sz[v];//\u6c42\u5b50\u6811\u5927\u5c0f\n\t\tmx[u]=max(mx[u],sz[v]);//\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f\n\t}\n\t\n\tint id=u,famax=mx[u];//\u8d77\u70b9\n\tfor(int i=head[u];i!=-1;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;//\u5f53\u524d\u70b9\u513f\u5b50\n\t\tint bsz=ans[v];//\u5b50\u6811\u7684\u91cd\u5fc3\n\t\tint pre=max(mx[bsz],sz[u]-sz[bsz]),idd=bsz;\n\t\twhile(Fa[bsz]!=u)//\u4e0d\u80fd\u722c\u5230\u81ea\u5df1\n\t\t{\n\t\t\t//\u5f80\u4e0a\u4e00\u76f4\u722c\n\t\t\tbsz=Fa[bsz];\n\t\t\tint noww=max(mx[bsz],sz[u]-sz[bsz]);\n\t\t\tif(noww<pre){pre=noww;idd=bsz;}\n\t\t\telse break;//\u5982\u679c\u5927\u5c0f\u53cd\u800c\u53d8\u5927\u4e86\u90a3\u4e48\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u4e0d\u662f\u91cd\u5fc3\u4e86\n\t\t}\n\t\t//\u66f4\u65b0\n\t\tif(famax>pre)\n\t\t{\n\t\t\tfamax=pre;\n\t\t\tid=idd;\n\t\t}\n\t}\t\n\tans[u]=id;//\u8bb0\u5f55u\u4e3a\u6839\u7684\u91cd\u5fc3\n\t\n}\nint main()\n{\n\tinit();\n\tn=read(),m=read();\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tFa[i]=read();\n\t\tadd_edge(Fa[i],i);\n\t}\n\tdfs(1,0);\n\twhile(m--)\n\t{\n\t\tint x=read();\n\t\tcout<<ans[x]<<endl;\n\t}\n}\n```\n",
        "postTime": 1590576612,
        "uid": 115779,
        "name": "\u6781\u5bd2\u795e\u51b0",
        "ccfLevel": 0,
        "title": "CF685B"
    },
    {
        "content": "## $Description$\n\n\u7ed9\u51fa\u4e00\u68f5\u6811$($\u6839\u662f$1$$\u53f7\u8282\u70b9 )$\u548c$q$\u4e2a\u8be2\u95ee,\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee$v_i,$\u8981\u6c42\u56de\u7b54\u4ee5$v_i$\u4e3a\u6839\u7684\u5b50\u6811\u7684\u91cd\u5fc3\n\n## $Solution$\n\n\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9$u$\u4f5c\u4e3a\u6839\u65f6\u7684\u7b54\u6848\uff0c\u8bb0\u4e3a$ans[u],$\u6700\u540e$O(1)$\u56de\u7b54\u3002\n\n\u8bb0$u$\u7684\u91cd\u513f\u5b50$($\u5373$size$\u6700\u5927\u7684\u513f\u5b50$)$\u4e3a$son[u]$\n\n\u8003\u8651\u4e00\u4e2a\u6027\u8d28:\u5982\u679c\u4ee5\u5f53\u524d\u8282\u70b9$u$\u4e3a\u6839$,size[son[u]]<=\\frac{size[u]}{2},$\u6240\u4ee5$,ans[u]$\u53ea\u6709\u53ef\u80fd\u662f$u$\u81ea\u5df1\u6216\u8005\u5728$son[u]$\u7684\u5b50\u6811\u4e2d\u3002\n\n\u662f$u$\u81ea\u5df1\u7684\u60c5\u51b5\u6839\u636e$size[son[u]]$\u5224\u65ad\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u5728$son[u]$\u7684\u5b50\u6811\u4e2d\u7684\u60c5\u51b5\u3002\u56e0\u4e3a$size[u]>size[son[u]],$\u6240\u4ee5$ans[u]$\u4e00\u5b9a\u5728$ans[son[u]]$\u7684\u4e0a\u65b9\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6bcf\u6b21\u4ece\u4ee5$son[u]$\u4e3a\u6839\u7684\u5b50\u6811\u7684\u91cd\u5fc3\u5411\u4e0a\u8df3\u5373\u53ef\u3002\n\n\u7531\u4e8e\u91cd\u5fc3\u53ea\u4f1a\u5411\u4e0a\u8df3\uff0c\u6240\u4ee5\u8df3\u7684\u6b21\u6570\u5c31\u662f\u6811\u9ad8,\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u4e3a$O(n)$\n\n## $Code$\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define inf 0x3f3f3f3f\n#define re register\n#define N 405400\n#define mod 1000000007\nusing namespace std;\nstruct edge{\n    int to,next;\n}e[N<<2];\ninline int read(){\n    int x=0,w=0;char ch=getchar();\n    while (!isdigit(ch))w|=ch=='-',ch=getchar();\n    while (isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n    return w?-x:x;\n}\nint ans[N],fa[N],mx,loc,size[N],son[N],n,q,head[N],cnt=1;\ninline void add(int u,int v){\n    e[++cnt].to=v;\n    e[cnt].next=head[u];\n    head[u]=cnt;\n}\nvoid dfs(int u){\n    size[u]=1;\n    for (int i=head[u];i;i=e[i].next){\n        int v=e[i].to;\n        dfs(v);\n        size[u]+=size[v];\n        if (size[v]>size[son[u]])son[u]=v;\n    }\n    if ((size[son[u]]<<1)>size[u]){\n        int x=ans[son[u]];\n        while (((size[u]-size[x])<<1)>size[u])x=fa[x];\n        ans[u]=x;\n    }else ans[u]=u;\n}\nsigned main(){\n    n=read(),q=read();\n    for (int i=2;i<=n;++i)fa[i]=read(),add(fa[i],i);\n    dfs(1);\n    while (q--){\n        int x=read();\n        printf(\"%d\\n\",ans[x]);\n    }\n    return 0;\n}\n```",
        "postTime": 1564582032,
        "uid": 54260,
        "name": "tcchyc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF685B \u3010Kay and Snowflake\u3011"
    }
]