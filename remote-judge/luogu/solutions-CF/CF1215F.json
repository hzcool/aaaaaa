[
    {
        "content": "### \u7b80\u8981\u9898\u610f\n\n\u6709 $n$ \u4e2a\u7535\u53f0\uff0c\u7b2c $i$ \u4e2a\u7535\u53f0\u9891\u6bb5\u5728 $[l_i,\\,r_i]$ \u3002\u7531\u4f60\u5728 $[1,\\,m]$ \u4e2d\u9009\u62e9\u4e3b\u9891 $f$ \uff0c\u5982\u679c $f \\in [l_i,\\,r_i]$ \uff0c\u7b2c $i$ \u4e2a\u7535\u53f0\u4f60\u53ef\u9009\u62e9\u662f\u5426\u542f\u7528\uff0c\u5426\u5219\u65e0\u6cd5\u542f\u7528\u3002\n\n\u6709\u82e5\u5e72\u7ec4\u9650\u5236\u5f62\u5982 $u$ \u548c $v$ \u5fc5\u987b\u542f\u7528\u81f3\u5c11\u4e00\u4e2a\uff0c\u6216\u4e0d\u53ef\u540c\u65f6\u542f\u7528\u3002\u8bf7\u7ed9\u51fa $f$ \u5e76\u6784\u9020\u7535\u53f0\u7684\u542f\u7528\u65b9\u6848\u3002\u65e0\u89e3\u8f93\u51fa $-1$ \u3002\n\n---\n\n### \u524d\u7f6e\u77e5\u8bc6\n\n$\\text{2 - SAT}$ \u3002[\u6a21\u677f\u9898\u94fe\u63a5](https://www.luogu.org/problem/P4782) \u3002\u81f3\u4e8e\u8fd9\u9053\u9898\uff0c\u867d\u7136\u660e\u663e\u5730\u6307\u793a\u51fa\u4e86\u8fd9\u7c7b\u95ee\u9898\uff0c\u4f46\u662f\u5efa\u6a21\u662f\u524d\u6240\u672a\u6709\u7684\u795e\u4ed9\uff01\n\n---\n\n### \u89e3\u9898\u601d\u8def\n\n\u6309\u7167 $\\text{2 - SAT}$ \u7684\u5957\u8def\uff0c\u6211\u4eec\u628a\u4e00\u4e2a\u5bf9\u8c61\u62c6\u6210\u4e24\u4e2a\u70b9\u5206\u522b\u8868\u793a\u9009\u548c\u4e0d\u9009\u3002\n\n\u4e8e\u662f\u6211\u4eec\u638f\u51fa $2n$ \u4e2a\u70b9\uff0c\u6765\u63cf\u8ff0 $n$ \u4e2a\u7535\u53f0\u7684\u542f\u7528\u65b9\u6848\u3002\n\n\u4f46\u6700\u91cd\u8981\u7684\u8003\u70b9\uff0c\u8fd8\u662f\u5efa\u6a21\u3002\n\n\u4e0b\u6587\u7528 $\\text{yes}(u)$ \u8868\u793a\u8868\u793a\u5bf9\u8c61 $u$ \u9009\u7684\u70b9\uff0c$\\text{no}(u)$ \u8868\u793a\u5bf9\u8c61 $u$ \u4e0d\u9009\u7684\u70b9\u3002\n\n\u9996\u5148\u6765\u70ed\u4e00\u70ed\u8eab\uff0c\u201c\u82e5\u5e72\u7ec4\u9650\u5236\u5f62\u5982\u7535\u53f0 $u$ \u548c\u7535\u53f0 $v$ \u5fc5\u987b\u542f\u7528\u81f3\u5c11\u4e00\u4e2a\u201d\u600e\u4e48\u5728 $\\text{2 - SAT}$ \u4e2d\u8868\u793a\u5462\uff1f\n\n\u56de\u5fc6\u4e00\u4e0b\uff0c\u65e2\u7136\u70b9\u8868\u793a\u9009\u6216\u4e0d\u9009\uff0c\u90a3\u4e48\u6761\u4ef6 $u$ \u5f80\u6761\u4ef6 $v$ \u8fde\u4e00\u6761\u6709\u5411\u8fb9\u8868\u793a\u53ea\u8981\u6761\u4ef6 $u$ \u6ee1\u8db3\uff0c\u6761\u4ef6 $v$ \u5c31\u5fc5\u987b\u6ee1\u8db3\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u8981\u50cf\u4e0b\u9762\u4e00\u6837\u8fde\u8fb9\uff1a\n\n![](https://i.loli.net/2019/09/16/6wek2Vd3sMmDFJH.png)\n\n\u5373\uff1a$\\text{no}(u) \\rightarrow \\text{yes}(v),\\ \\text{no}(v) \\rightarrow \\text{yes}(u)$ \u3002\n\n\u7406\u7531\u5f88\u7b80\u5355\u3002\u5f53 $u$ \u4e0d\u9009\u65f6\uff0c\u5982\u679c $v$ \u8fd8\u4e0d\u9009\u7684\u8bdd\uff0c\u5c31\u4e0d\u6ee1\u8db3\u9650\u5236\u4e86\uff0c\u8fd9\u610f\u5473\u7740 $v$ \u4e0d\u5f97\u4e0d\u9009\u3002\u53cd\u8fc7\u6765\u4ea6\u7136\u3002\n\n\u4e0b\u4e00\u4e2a\u70ed\u8eab\u4efb\u52a1\uff1a\u82e5\u5e72\u7ec4\u9650\u5236\u5f62\u5982\u7535\u53f0 $u$ \u548c\u7535\u53f0 $v$ \u4e0d\u53ef\u540c\u65f6\u542f\u7528\u3002\n\n\u8fde\u8fb9\u65b9\u5f0f\u5f02\u66f2\u540c\u5de5\uff1a\n\n![](https://i.loli.net/2019/09/16/vR9NFuSekpByOAd.png)\n\n\u5373\uff1a$\\text{yes}(u) \\rightarrow \\text{no}(v),\\ \\text{yes}(v) \\rightarrow \\text{no}(u)$ \u3002\n\n\u7406\u7531\u4e5f\u7c7b\u4f3c\u3002\u5f53 $u$ \u9009\uff0c$v$ \u5fc5\u987b\u4e0d\u80fd\u9009\uff0c\u5426\u5219\u8fdd\u53cd\u9650\u5236\u3002\u53cd\u8fc7\u6765\u4ea6\u7136\u3002\n\n\u70ed\u8eab\u7ed3\u675f\u3002\u771f\u6b63\u632f\u594b\u4eba\u5fc3\u7684\u5efa\u6a21\u8fd9\u624d\u5230\u6765\uff1a\u5982\u4f55\u5236\u5b9a\u552f\u4e00\u7684 $f$ \uff0c\u5e76\u8868\u793a\u51fa\u56e0\u4e3a $f \\notin [l_i,\\,r_i]$ \uff0c$i$ \u53f7\u7535\u53f0\u4e0d\u5141\u8bb8\u542f\u7528\uff1f\n\n\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u8fb9\uff1f\u592a\u6162\uff01\u592a\u7e41\u7410\uff01\u6211\u4eec\u9700\u8981**\u524d\u7f00\u548c\u7684\u601d\u60f3**\uff01\u8bd5\u8bd5\u628a\u533a\u95f4 $[l,\\,r]$ \u62c6\u6210 $[1,\\,l-1]$ \u548c $[1,\\,r]$ \u6765\u8ba8\u8bba\u3002\n\n\u5217\u51fa\u4ee5\u4e0b\u8868\u683c\uff1a\n\n||||\n|:-:|:-:|:-:|\n|$\\quad f\\in [1,\\,l_i - 1]\\quad $|$\\quad f\\in [1,\\,r_i]\\quad $|$\\quad $\u7535\u53f0 $i$ \u80fd\u5426\u542f\u7528$\\quad $|\n|$\\text{no}$|$\\text{no}$|$\\text{no}$ \uff0c\u6b64\u65f6 $f > r_i$|\n|$\\text{no}$|$\\text{yes}$|\u6ca1\u6709\u9650\u5236\uff0c\u6b64\u65f6 $f \\in [l_i,\\,r_i]$|\n|$\\text{yes}$|$\\text{yes}$|$\\text{no}$ \uff0c\u6b64\u65f6 $f < l_i$|\n|$\\text{yes}$|$\\text{no}$|\u4e0d\u5b58\u5728 \uff0c$f \\in \\varnothing$|\n\n\u636e\u6b64\uff0c\u63d0\u53d6\u51fa\u4e09\u4e2a\u91cd\u8981\u9650\u5236\uff1a\n\n- \u82e5\u7535\u53f0 $i$ \u542f\u7528\uff0c$f \\in [l_i,\\,r_i]$ \u3002\n\n- \u82e5 $f \\in [1,\\,l_i-1]$ \u6ee1\u8db3\uff0c\u7535\u53f0 $i$ \u65e0\u6cd5\u542f\u7528\u3002\n\n- \u82e5 $f \\in [1,\\,r_i]$ \u4e0d\u6ee1\u8db3\uff0c\u7535\u53f0 $i$ \u65e0\u6cd5\u542f\u7528\u3002\n\n\n\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u4ec5\u51ed\u76ee\u524d\u7684 $2n$ \u4e2a\u70b9\uff0c\u4e0d\u8db3\u4ee5\u8868\u793a\u51fa\u4e0a\u9762\u7684\u9650\u5236\u3002\n\n\u4e8e\u662f\u6211\u4eec\u518d\u638f\u51fa $2(m+1)$ \u4e2a\u70b9\uff0c\u5206\u522b\u8868\u793a\u5bf9\u4e8e $i = 0 \\dots m$ \uff0c$[f \\le i]$ \u6ee1\u8db3\u6216\u4e0d\u6ee1\u8db3\u3002\u4f8b\u5982\uff0c\u7528 $\\text{yes}(n + i + 1)$ \u8868\u793a $f \\le i$ \uff0c\u7528 $\\text{no}(n + i + 1)$ \u8868\u793a $f > i$ \u3002\n\n\u5b83\u4eec\u4e4b\u95f4\u7684\u8fde\u8fb9\u5982\u4e0b\uff1a\n\n![](https://i.loli.net/2019/09/16/b4kYHJQa1t2938n.png)\n\n\u5373\uff1a$\\text{yes}(n+i+1) \\rightarrow \\text{yes}(n+i+2),\\ \\text{no}(n+i+2) \\rightarrow \\text{no}(n+i+1)$ \u3002\n\n\u89e3\u91ca\uff1a$f \\le i$ \u6ee1\u8db3\u65f6\uff0c$f \\le i + 1$ \u5fc5\u7136\u6ee1\u8db3\u3002$f \\le i + 1$ \u4e0d\u6ee1\u8db3\u65f6\uff0c\u5373 $f \\ge i + 1$ \u6ee1\u8db3\u65f6\uff0c$f \\le i$ \u5fc5\u7136\u4e0d\u6ee1\u8db3\u3002\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u7ec8\u4e8e\u51c6\u5907\u5728\u4e24\u7c7b\u5bf9\u8c61\u4e4b\u95f4\u8fde\u8fb9\u4e86\uff01\n\n\u590d\u8bfb\u4e00\u904d\u90a3\u4e09\u4e2a\u9650\u5236\uff1a\n\n- \u82e5\u7535\u53f0 $i$ \u542f\u7528\uff0c$f \\in [l_i,\\,r_i]$ \u3002\n\n- \u82e5 $f \\in [1,\\,l_i-1]$ \u6ee1\u8db3\uff0c\u7535\u53f0 $i$ \u65e0\u6cd5\u542f\u7528\u3002\n\n- \u82e5 $f \\in [1,\\,r_i]$ \u4e0d\u6ee1\u8db3\uff0c\u7535\u53f0 $i$ \u65e0\u6cd5\u542f\u7528\u3002\n\n\n\u8f6c\u6362\u6210\u8fde\u8fb9\u5173\u7cfb\u5c31\u662f\uff1a\n\n- $\\text{yes}(i) \\rightarrow \\text{no}(n+l_i),\\ \\text{yes}(i) \\rightarrow \\text{yes}(n+r_i+1)$\n\n- $\\text{yes}(n+l_i) \\rightarrow \\text{no}(i)$ \n\n- $\\text{no}(n+r_i+1) \\rightarrow \\text{no}(i)$\n\n\n![](https://i.loli.net/2019/09/16/IYdKv7AZx3TyRoC.png)\n\n\u8fd8\u6709\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff0c$f$ \u4e0d\u80fd\u7b49\u4e8e $0$ \uff01\u6709\u4e2a\u5de7\u5999\u7684\u8fde\u8fb9\u662f $\\text{yes}(n+1) \\rightarrow \\text{no}(n+1)$ \uff0c\u8fd9\u6837 $\\text{yes}(n+1)$ \u6210\u7acb\u65f6\u4f1a\u9020\u6210\u77db\u76fe\uff0c$\\text{no}(n+1)$ \u6210\u7acb\u65f6\u521a\u597d\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\n\n\u5efa\u5b8c\u56fe\u540e\uff0c\u8dd1\u4e00\u8dd1 $\\text{2 - SAT}$ \u5c31\u884c\u5566\uff01\u5224\u65ad\u65e0\u89e3\u7684\u65b9\u6cd5\u8ddf\u6a21\u677f\u9898\u4e00\u6837\uff0c\u800c\u6709\u89e3\u65f6\u7684 $f$ \uff0c\u6ee1\u8db3 $\\text{yes}(n+f+1)$ \uff0c$\\text{no}(n+f)$ \u6210\u7acb \uff0c\u8dd1\u5b8c $\\text{2 - SAT}$ \u540e\u679a\u4e3e\u627e\u5230\u8fd9\u4e2a\u5206\u754c\u70b9\u5373\u53ef\u3002\n\n---\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n\u6ce8\u610f\u6211\u7684\u4ee3\u7801\u5b9e\u73b0\u91cc $n$ \u4e2a\u7535\u53f0\u662f\u4ece $0$ \u5230 $n - 1$ \u6807\u53f7\u7684\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\ninline int read() {\n    char c; int x; for (c = getchar(); !isdigit(c); c = getchar());\n    for (x = 0; isdigit(c); c = getchar()) { x = x * 10 + c - '0'; } return x;\n}\n\nconst int N = 2e6 + 5, E = 4e6 + 5;\n\nstruct List {\n    int tot, fst[N], nxt[E], to[E];\n\n    List() { memset(fst, -1, sizeof(fst)); }\n    inline void insert(int u, int v) {\n        nxt[tot] = fst[u]; to[tot] = v; fst[u] = tot++;\n    }\n    inline void link(int u, int v) {\n        insert(u, v); insert(v ^ 1, u ^ 1);\n    }\n} e;\n\nint n, m, m0, m1, k, c, tms, vol, dfn[N], low[N], stc[N], col[N];\nbool ins[N];\n\ninline int yes(int u) { return u << 1; }\ninline int no(int u) { return u << 1 | 1; }\n\nvoid tarjan(int u) {\n    dfn[u] = low[u] = tms++;\n    int pos = vol; stc[vol++] = u; ins[u] = true;\n    for (int i = e.fst[u]; ~i; i = e.nxt[i]) {\n        int v = e.to[i];\n        if (dfn[v] == -1) {\n            tarjan(v);\n            low[u] = std::min(low[u], low[v]);\n        } else if (ins[v]) {\n            low[u] = std::min(low[u], dfn[v]);\n        }\n    }\n    if (dfn[u] == low[u]) {\n        while (vol > pos) {\n            int v = stc[--vol];\n            col[v] = c; ins[v] = false;\n        } c++;\n    }\n}\n\nbool solve() {\n    for (int i = 0; i <= no(n + m); i++) { dfn[i] = -1; }\n    for (int i = 0; i <= no(n + m); i++) {\n        if (dfn[i] == -1) { tarjan(i); }\n    }\n    for (int i = 0; i <= n + m; i++) {\n        if (col[yes(i)] == col[no(i)]) { return false; }\n    } return true;\n}\n\nint main() {\n    m0 = read(); n = read(); m = read(); m1 = read();\n    for (int i = 0; i < m0; i++) {\n        int u = read(), v = read(); u--; v--;\n        e.link(no(u), yes(v));\n    }\n    for (int i = 0; i < m; i++) {\n        e.link(yes(n + i), yes(n + i + 1));\n    } e.link(yes(n), no(n));\n    for (int i = 0; i < n; i++) {\n        int l = read(), r = read();\n        e.link(yes(i), no(n + l - 1));\n        e.link(yes(i), yes(n + r));\n    }\n    for (int i = 0; i < m1; i++) {\n        int u = read(), v = read(); u--; v--;\n        e.link(yes(u), no(v));\n    }\n    if (solve()) {\n        for (int i = 0; i < n; i++) {\n            if (col[yes(i)] < col[no(i)]) { k++; }\n        }\n        for (int i = 1; i <= m; i++) {\n            if (col[yes(n + i)] < col[no(n + i)]) {\n                printf(\"%d %d\\n\", k, i); break;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (col[yes(i)] < col[no(i)]) { printf(\"%d \", i + 1); }\n        }\n    } else {\n        puts(\"-1\");\n    }\n    return 0;\n}\n```",
        "postTime": 1568605520,
        "uid": 26673,
        "name": "Sooke",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1215F \u3010Radio Stations\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u6b21\u60f3\u51fa 2-SAT \u9898\uff0c\u5199\u53d1\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b\u3002\n\n\u8bb0\u533a\u95f4\u6570\u4e3a $n$\uff0c\u9996\u5148\u6211\u4eec\u53d1\u73b0\u201c\u81f3\u591a\u9009\u62e9\u4e00\u4e2a\u201d\u548c\u201c\u81f3\u5c11\u9009\u62e9\u4e00\u4e2a\u201d\u662f\u7ecf\u5178\u7684 2-SAT \u9650\u5236\u3002\u7136\u540e\u5bf9\u4e8e\u6240\u6709\u9009\u62e9\u7684\u533a\u95f4\u7684\u4ea4\u96c6\u4e0d\u80fd\u4e3a\u7a7a\u7684\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u8f6c\u5316\u6210\uff1a\u82e5\u4e24\u4e2a\u533a\u95f4\u4ea4\u96c6\u4e3a\u7a7a\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u533a\u95f4\u81f3\u591a\u9009\u62e9\u4e00\u4e2a\u3002\u90a3\u4e48\u5c31\u53ef\u4ee5 2-SAT \u4e86\uff0c\u4f46\u662f\u4f7f\u7528\u8fd9\u79cd\u505a\u6cd5\uff0c\u8fb9\u6570\u662f $\\Theta(n^2)$ \u7684\uff0c\u663e\u7136\u8fc7\u4e0d\u53bb\u3002\n\n\u6211\u4eec\u8003\u8651\u4f18\u5316\uff0c\u6211\u4eec\u628a\u533a\u95f4\u6309\u5de6\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\uff0c\u5728\u5b83\u4e4b\u540e\u4e0e\u5b83\u4e0d\u4ea4\u7684\u533a\u95f4\u5fc5\u7136\u662f\u4e00\u4e2a\u540e\u7f00\uff08\u5728\u4e4b\u524d\u7684\u56e0\u4e3a\u5728\u5904\u7406\u524d\u9762\u7684\u533a\u95f4\u65f6\u5df2\u7ecf\u8fde\u8fc7\u8fb9\u4e86\uff0c\u6240\u4ee5\u4e0d\u7528\u7ba1\uff09\u3002\u4e8e\u662f\u8003\u8651\u524d\u7f00\u548c\u4f18\u5316\u5efa\u56fe\uff0c\u7136\u540e\u5c31\u505a\u5b8c\u4e86\uff0c\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n\\log n)$\u3002\n\nCode:\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std ;\nconst int MAXN = 2e6 + 10 , INF = 0x3f3f3f3f ;\nint n , m1 , m2 , L , fir[MAXN] , tot , b[MAXN] , ans[MAXN] ;\nstruct node {\n\tint l , r , id ;\n\tbool operator < (node x) const {return l < x.l ;}\n} a[MAXN] ;\nstruct edge {int to , nxt ;} e[MAXN << 1] ;\nvoid add (int u , int v) {e[++tot].to = v ; e[tot].nxt = fir[u] ; fir[u] = tot ;}\nint dfn[MAXN] , low[MAXN] , st[MAXN] , tp , vis[MAXN] , col[MAXN] , cnt , cc ;\nvoid tarjan (int x) {\n\tdfn[x] = low[x] = ++cnt ; st[++tp] = x ; vis[x] = 1 ;\n\tfor (int i = fir[x] , v = e[i].to ; i ; i = e[i].nxt , v = e[i].to) {\n\t\tif (!dfn[v]) tarjan (v) , low[x] = min (low[x] , low[v]) ;\n\t\telse if (vis[v]) low[x] = min (low[x] , dfn[v]) ;\n\t}\n\tif (dfn[x] == low[x]) {\n\t\tcol[x] = ++cc ; vis[x] = 0 ;\n\t\tfor (; st[tp] != x ; tp--) vis[st[tp]] = 0 , col[st[tp]] = cc ;\n\t\ttp-- ;\n\t}\n}\nint U[MAXN] , V[MAXN] , p[MAXN] ;\nint main () {\n\tscanf (\"%d%d%d%d\" , &m1 , &n , &L , &m2) ;\n\tfor (int i = 1 ; i <= m1 ; i++) scanf (\"%d%d\" , &U[i] , &V[i]) ;\n\tfor (int i = 1 ; i <= n ; i++) scanf (\"%d%d\" , &a[i].l , &a[i].r) , a[i].id = i ;\n\tsort (a + 1 , a + n + 1) ;\n\tfor (int i = 1 ; i <= n ; i++) p[a[i].id] = i ; \n\tfor (int i = 1 ; i <= m1 ; i++) add (p[U[i]] + n , p[V[i]]) , add (p[V[i]] + n , p[U[i]]) ;\n\tfor (int i = 1 , u , v ; i <= m2 ; i++)\n\t\tscanf (\"%d%d\" , &u , &v) , add (p[u] , p[v] + n) , add (p[v] , p[u] + n) ;\n\tfor (int i = 1 ; i <= n ; i++) {\n\t\tif (i < n) add (2 * n + i , 2 * n + i + 1) , add (3 * n + i + 1 , 3 * n + i) ;\n\t\tadd (2 * n + i , i + n) , add (i , 3 * n + i) ;\n\t}\n\t\n\tfor (int i = 1 ; i <= n ; i++) b[i] = a[i].l ;\n\tfor (int i = 1 ; i <= n ; i++) {\n\t\tint x = lower_bound (b + 1 , b + n + 1 , a[i].r + 1) - b ;\n\t\tif (x > n) continue ;\n\t\tadd (i , 2 * n + x) , add (3 * n + x , i + n) ;\n\t}\n\tfor (int i = 1 ; i <= 4 * n ; i++)\n\t\tif (!dfn[i]) tarjan (i) ;\n\tfor (int i = 1 ; i <= n ; i++)\n\t\tif (col[i] == col[i + n]) return !printf (\"-1\") ;\n\tint L = -INF , R = INF , tt = 0 ;\n\tfor (int i = 1 ; i <= n ; i++)\n\t\tif (col[i] < col[i + n]) L = max (L , a[i].l) , R = min (R , a[i].r) , ans[++tt] = a[i].id ;\n\tprintf (\"%d %d\\n\" , tt , L) ;\n\tsort (ans + 1 , ans + tt + 1) ;\n\tfor (int i = 1 ; i <= tt ; i++) printf (\"%d \" , ans[i]) ;\n\treturn 0 ;\n}\n```",
        "postTime": 1660703378,
        "uid": 122641,
        "name": "GIFBMP",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1215F\u3010Radio Stations\u3011"
    },
    {
        "content": "\u4ee4 $u$ \u8868\u793a\u9009\u62e9\u7535\u7ad9 $u$ , $u'$ \u8868\u793a\u4e0d\u9009\u62e9\u7535\u7ad9 $u$\u3002\n\n\u9996\u5148\u53ef\u4ee5\u7b80\u5355\u7684\u5904\u7406\u51fa\u7535\u7ad9\u4e4b\u95f4\u7684\u8981\u6c42\uff1a\n\n- $u,v$ \u81f3\u5c11\u9009\u4e00\u4e2a\uff0c\u8fde\u8fb9 $(u',v),(v',u)$\n\n- $u,v$ \u81f3\u591a\u9009\u4e00\u4e2a\uff0c\u8fde\u8fb9 $(u,v'),(v,u')$\n\n\u53ef\u4ee5\u679a\u4e3e $f$ ,\u7535\u7ad9\u533a\u95f4\u4e0d\u5305\u542b $f$ \u7684\u5f3a\u5236\u4e0d\u9009 ( \u8fde\u8fb9$(u,u')$ )\uff0c\u7136\u540e\u7528 $\\text{2-SAT}$ \u6c42\u89e3\u3002\n\n\u8003\u8651\u4f18\u5316\u4e0a\u8ff0\u8fc7\u7a0b\uff0c$f$ \u5bf9\u6bcf\u4e2a\u7535\u7ad9\u7684\u8981\u6c42\u53ef\u4ee5\u770b\u4f5c\u4e24\u4e2a\uff1a\n\n- $f$ \u5fc5\u987b\u5728 $[1,r_i]$ \u4e4b\u95f4\n- $f$ \u5fc5\u987b\u4e0d\u5728 $[1,l_i)$ \u4e4b\u95f4\n\n\u90a3\u4e48\u53ef\u4ee5\u5229\u7528\u524d\u7f00\u4f18\u5316\u5efa\u56fe\uff0c\u6ce8\u610f $f$ \u4e0d\u80fd\u4e3a $0$ \uff0c\u5f3a\u5236\u4e0d\u9009\u5373\u53ef\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\n\nconst int MAXN = 2e6 , MAXM = 2e6;\n\nint n , k , m1 , m2 , l[ MAXN + 5 ] , r[ MAXN + 5 ];\n\nint Enum , tmp[ MAXN + 5 ] , Head[ MAXN + 5 ];\nstruct Edge { int v , nxt; } Graph[ 2 * MAXM + 5 ];\nvoid Add_Edge( int u , int v ) { Graph[ ++ Enum ] = { v , Head[ u ] }; Head[ u ] = Enum; }\n\nint tim , cnt , dfn[ MAXN + 5 ] , low[ MAXN + 5 ] , bel[ MAXN + 5 ];\nint Top , Stack[ MAXN + 5 ];\nvoid Clear( ) {\n\ttim = cnt = 0;\n\tmemset( dfn , 0 , sizeof( dfn ) );\n\tmemset( low , 0 , sizeof( low ) );\n\tmemset( bel , 0 , sizeof( bel ) );\n}\nvoid Tarjan( int u , int fa ) {\n\tdfn[ u ] = low[ u ] = ++ tim;\n\tStack[ ++ Top ] = u;\n\tfor( int i = Head[ u ] ; i ; i = Graph[ i ].nxt ) {\n\t\tint v = Graph[ i ].v; if( v == fa ) continue;\n\t\tif( !dfn[ v ] ) {\n\t\t\tTarjan( v , u );\n\t\t\tlow[ u ] = min( low[ u ] , low[ v ] );\n\t\t}\n\t\telse if( !bel[ v ] )\n\t\t\tlow[ u ] = min( low[ u ] , dfn[ v ] );\n\t}\n\tif( dfn[ u ] == low[ u ] ) {\n        ++ cnt;\n        for( ; Stack[ Top ] != u ; Top -- ) bel[ Stack[ Top ] ] = cnt;\n        bel[ Stack[ Top -- ] ] = cnt;\n\t}\n}\n\nint main( ) {\n\tscanf(\"%d %d %d %d\",&m1,&n,&k,&m2);\n\tfor( int i = 1 , u , v ; i <= m1 ; i ++ ) {\n\t\tscanf(\"%d %d\",&u,&v);\n\t\tAdd_Edge( u + n , v ) , Add_Edge( v + n , u );\n\t}\n\tfor( int i = 1 ; i <= n ; i ++ ) scanf(\"%d %d\",&l[ i ],&r[ i ]);\n\tfor( int i = 1 , u , v ; i <= m2 ; i ++ ) {\n\t\tscanf(\"%d %d\",&u,&v);\n\t\tAdd_Edge( u , v + n ) , Add_Edge( v , u + n );\n\t}\n\t\n\t//2*n + 2*k\n\tfor( int i = 1 ; i <= k ; i ++ ) Add_Edge( 2 * n + i + 1 , 2 * n + i ); // >  f\n\tfor( int i = k + 1 ; i >= 2 ; i -- ) Add_Edge( 2 * n + i - 1 + ( k + 1 ) , 2 * n + i + ( k + 1 ) ); // <= f\n\tAdd_Edge( 2 * n + 1 + ( k + 1 ) , 2 * n + 1 );  // f \u4e0d\u4e3a 0 \n\tfor( int i = 1 ; i <= n ; i ++ ) { //\u4e0e f \u7684\u9650\u5236 \n\t\tAdd_Edge( i , 2 * n + r[ i ] + 1 + ( k + 1 ) ); Add_Edge( i , 2 * n + l[ i ] );\n\t\tAdd_Edge( 2 * n + r[ i ] + 1 , i + n ); Add_Edge( 2 * n + l[ i ] + ( k + 1 ) , i + n );\n\t}\n\t\n\tfor( int i = 1 ; i <= 2 * n + 2 * ( k + 1 ) ; i ++ ) if( !dfn[ i ] ) Tarjan( i , 0 );\n\t\n\tint num = 0 , f;\n\tfor( int i = 1 ; i <= n ; i ++ ) {\n\t\tif( bel[ i ] == bel[ i + n ] ) { printf(\"-1\\n\"); return 0; }\n\t\tif( bel[ i ] < bel[ i + n ] ) num ++;\n\t}\n\tfor( int i = 1 ; i <= k ; i ++ ) if( ( bel[ 2 * n + i ] < bel[ 2 * n + i + ( k + 1 ) ] ) && ( bel[ 2 * n + i + 1 ] > bel[ 2 * n + i + 1 + ( k + 1 ) ] ) ) { f = i; break; }\n\t\n\tprintf(\"%d %d\\n\", num , f );\n\tfor( int i = 1 ; i <= n ; i ++ ) if( bel[ i ] < bel[ i + n ] ) printf(\"%d \", i );\n\treturn 0;\n}\n```",
        "postTime": 1607667168,
        "uid": 123802,
        "name": "chihik",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1215F \u3010Radio Stations\u3011"
    },
    {
        "content": "\u7b97\u6cd5\uff1a2-sat\n\n\u91cd\u70b9\u663e\u7136\u662f\u5efa\u6a21\n\n\u6211\u4eec\u628a\u4e00\u4e2a\u5bf9\u8c61\u62c6\u6210\u4e24\u4e2a\u70b9\u5206\u522b\u8868\u793a\u9009\u548c\u4e0d\u9009\u3002(\u63a5\u4e0b\u6765\u7528$yes(x)$\u8868\u793a\u8868\u793a\u5bf9\u8c61$x$\u9009\u7684\u70b9\uff0c$no(x)$\u8868\u793a\u5bf9\u8c61$x$\u4e0d\u9009\u7684\u70b9)\n\n1. \u7535\u53f0x\u548c\u7535\u53f0y\u5fc5\u987b\u7528\u81f3\u5c11\u4e00\u4e2a\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u7684\u4e00\u4e2a\u6027\u8d28\uff1a\n\n- \u53ea\u8981x\u4e0d\u9009\uff0cy\u4e00\u5b9a\u9009\n- \u53ea\u8981y\u4e0d\u9009\uff0cx\u4e00\u5b9a\u9009\n\n\u8fde\u8fb9\u65b9\u5f0f\uff1a$no(x)->yes(y),no(y)->yes(x)$\n\n2. \u7535\u53f0x\u548c\u7535\u53f0y\u4e0d\u53ef\u540c\u65f6\u7528\n\n\u6211\u4eec\u53c8\u53d1\u73b0\u8fd9\u6837\u7684\u6027\u8d28\uff1a\n\n- \u53ea\u8981x\u9009\uff0cy\u4e00\u5b9a\u4e0d\u9009\n- \u53ea\u8981y\u9009\uff0cx\u4e00\u5b9a\u4e0d\u9009\n\n\u8fde\u8fb9\u65b9\u5f0f\uff1a$yes(x)->no(y),yes(y)->no(x)$\n\n3. \u5982\u4f55\u5236\u5b9a\u552f\u4e00\u7684f\uff0c\u5e76\u8868\u793a\u51fai\u53f7\u7535\u53f0\u4e0d\u5141\u8bb8\u542f\u7528\u7684\u60c5\u51b5\n\n\u53ef\u4ee5\u8003\u8651\u524d\u7f00\u548c\u7684\u4f18\u5316\uff1a\n\n|$[1,l-1]$|$[1,r]$|$i$\u80fd\u5426\u542f\u7528|\n| -----------: | -----------: | -----------: |\n|0|0|0|\n|0|1|1|\n|1|1|0|\n|1|0|\u4e0d\u5b58\u5728|\n\n**\u63a5\u4e0b\u6765\u6211\u6709\u70b9\u61f5\u903c\uff0c\u53bb\u770b\u4e86Sooke\u7684\u9898\u89e3**\n\n\u5176\u5b9e\u53ef\u4ee5\u518d\u5f00\u4e00\u4e9b\u70b9\u8868\u793a$f \\leq i$\u7684\u60c5\u51b5\u662f\u5426\u6ee1\u8db3\n\n\u6ce8\u610f\uff1a\u5f53$f \\leq i$\u65f6\uff0c\u4e00\u5b9a\u6709$f \\leq i+1$\u3002\u5f53$f > i+1$\u65f6\uff0c\u4e00\u5b9a\u6709$f > i$\n\n\u8fde\u8fb9\u65b9\u5f0f\uff1a$yes(n+i+1)->yes(n+i+2), no(n+i+2)->no(n+i+1)$\n\n\u6700\u540e\u603b\u7ed3\u4e09\u79cd\u8fde\u8fb9\u65b9\u5f0f\uff1a\n- $no(x)->yes(y),no(y)->yes(x)$\n- $yes(x)->no(y),yes(y)->no(x)$\n- $yes(n+i+1)->yes(n+i+2), no(n+i+2)->no(n+i+1)$\n\n\u4ee3\u7801\uff1a\n\n\u5176\u5b9e2-sat\u7684\u9898\u770b\u61c2\u4e86\u4e4b\u540e\u57fa\u672c\u4e0d\u8981\u6ce8\u91ca\uff0c\u91cd\u70b9\u5c31\u662f**\u5efa\u6a21\uff01\uff01\uff01**\n\n```cpp\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cstdio>\nusing namespace std;\n\nconst int N=2000010;\nint n,p,M,m,sum,deep,colour,v[N],dfn[N],low[N],color[N];\nint ver[N<<1],Next[N<<1],head[N],tot;\nstack<int> st;\n\ninline int read(){\n\tint x=0,tmp=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-') tmp=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tx=(x<<3)+(x<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn tmp*x;\n}\n\ninline void write(int x){\n\tif(x<0){\n\t\tputchar('-');\n\t\tx=-x;\n\t}\n\tint y=10,len=1;\n\twhile(y<=x){\n\t\ty=(y<<3)+(y<<1);\n\t\tlen++;\n\t}\n\twhile(len--){\n\t\ty/=10;\n\t\tputchar(x/y+48);\n\t\tx%=y;\n\t}\n}\n\ninline void addEdge(int x,int y){\n\tver[++tot]=y;\n\tNext[tot]=head[x];\n\thead[x]=tot;\n}\n\nvoid tarjan(int x){\n\tlow[x]=dfn[x]=++deep;\n\tv[x]=1; st.push(x);\n\tfor(int i=head[x]; i; i=Next[i]){\n\t\tint y=ver[i];\n\t\tif(dfn[y]==-1){\n\t\t\ttarjan(y);\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t}\n\t\telse{\n\t\t\tif(v[y]) low[x]=min(low[x],dfn[y]);\n\t\t}\n\t}\n\tif(dfn[x]==low[x]){\n\t\tcolor[x]=++colour;\n\t\tv[x]=0;\n\t\twhile(st.top()!=x){\n\t\t\tcolor[st.top()]=colour;\n\t\t\tv[st.top()]=0;\n\t\t\tst.pop();\n\t\t}\n\t\tst.pop();\n\t}\n}\n\ninline int yes(int p){return p<<1;}\ninline int no(int p){return p<<1|1;}\n\nint main(){\n\tn=read(); p=read(); M=read(); m=read();\n\tfor(int i=1; i<=n; i++){\n\t\tint x=read()-1,y=read()-1;\n\t\taddEdge(no(x),yes(y));\n\t\taddEdge(yes(y)^1,no(x)^1);\n\t}\n\tfor(int i=0; i<M; i++){\n\t\taddEdge(yes(p+i),yes(p+i+1));\n\t\taddEdge(yes(p+i+1)^1,yes(p+i)^1);\n\t}\n\taddEdge(yes(p),no(p));\n\taddEdge(no(p)^1,yes(p)^1);\n\tfor(int i=0; i<p; i++){\n\t\tint l=read(),r=read();\n\t\taddEdge(yes(i),no(p+l-1));\n\t\taddEdge(no(p+l-1)^1,yes(i)^1);\n\t\taddEdge(yes(i),yes(p+r));\n\t\taddEdge(yes(p+r)^1,yes(i)^1);\n\t}\n\tfor(int i=0; i<m; i++){\n\t\tint x=read()-1,y=read()-1;\n\t\taddEdge(yes(x),no(y));\n\t\taddEdge(no(y)^1,yes(x)^1);\n\t}\n\tmemset(dfn,-1,sizeof(dfn));\n\tfor(int i=0; i<=no(p+M); i++){\n\t\tif(dfn[i]==-1) tarjan(i);\n\t}\n\tfor(int i=0; i<=p+M; i++){\n\t\tif(color[yes(i)]==color[no(i)]) return printf(\"-1\")&0;\n\t}\n\tfor(int i=0; i<p; i++){\n        if(color[yes(i)]<color[no(i)]) sum++;\n    }\n    for(int i=1; i<=M; i++){\n        if(color[yes(p+i)]<color[no(p+i)]){\n        \twrite(sum); putchar(' ');\n        \twrite(i); putchar('\\n');\n\t\t\tbreak;\n        }\n    }\n    for(int i=0; i<p; i++){\n        if(color[yes(i)]<color[no(i)]){\n\t\t\twrite(i+1);\n\t\t\tputchar(' ');\n\t\t}\n    }\n\treturn 0;\n}\n```",
        "postTime": 1569036861,
        "uid": 27924,
        "name": "xukuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1215F \u3010Radio Stations\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://pelom.top/archives/14/)\n### \u9898\u610f\n\n\u6709$n$\u4e2a\u8981\u6c42\uff0c\u8981\u6c42\u7535\u53f0$x_i$\u4e0e$y_i$\u4e2d\u81f3\u5c11\u9009\u62e9$1$\u4e2a\n\n\u5171$p$\u4e2a\u7535\u53f0\uff0c\u6ee1\u8db3\u4e00\u4e2a\u7535\u53f0\u7684\u4fe1\u53f7\u529f\u7387\u8303\u56f4\u4e3a$[l_i,r_i]$\n\n\u5728$[1,M]$\u9009\u62e9\u4e00\u4e2a\u4fe1\u53f7\u529f\u7387\uff0c\u8981\u6c42\u6ee1\u8db3\u9009\u62e9\u7684\u6240\u6709\u7535\u53f0\n\n\u6709$m$\u5bf9\u7535\u53f0\u4e0d\u80fd\u540c\u65f6\u9009\u62e9\n\n\u5224\u65ad\u662f\u5426\u80fd\u591f\u6ee1\u8db3\uff0c\u5982\u679c\u662f\uff0c\u8f93\u51fa\u65b9\u6848\n\n**\u6570\u636e\u8303\u56f4\uff1a**$2 \\le n,p,M,m \\le 4 \\cdot 10^5$\n\n### \u9898\u89e3\n\n\u5bf9\u4e8e\u81f3\u5c11\u9009\u62e9\u4e00\u4e2a\u548c\u4e0d\u80fd\u540c\u65f6\u9009\u62e9\u7684\u8981\u6c42\uff0c\u6211\u4eec\u5bb9\u6613\u770b\u51fa\u8fd9\u662f\u4e00\u4e2a$2-SAT$\u95ee\u9898\n\n\u7528\u8282\u70b9$x_i$\u8868\u793a\u9009\u62e9\u7535\u53f0$x_i$\uff0c\u7528\u8282\u70b9$x_i+p$\u8868\u793a\u4e0d\u9009\u62e9$x_i$\n\n\u5219\u8981\u6c42**\u4ece$x_i$\u4e0e$y_i$\u4e2d\u81f3\u5c11\u9009\u62e9$1$\u4e2a**\u53ef\u4ee5\u62c6\u89e3\u4e3a**\u4e0d\u9009\u62e9$y_i \\rightarrow$\u9009\u62e9$x_i$** \u4e0e **\u4e0d\u9009\u62e9$x_i \\rightarrow$\u9009\u62e9$y_i$**\n\n\u5efa\u8fb9\n\n$$y_i+p \\rightarrow x_i$$\n\n$$x_i+p \\rightarrow y_i$$\n\n\u76f8\u4f3c\u7684\uff0c**\u4e0d\u80fd\u540c\u65f6\u9009\u62e9**\u53ef\u4ee5\u62c6\u89e3\u4e3a**\u9009\u62e9$x_i \\rightarrow$\u4e0d\u9009\u62e9$y_i$** \u4e0e **\u9009\u62e9$y_i \\rightarrow$\u4e0d\u9009\u62e9$x_i$**\n\n\u5efa\u8fb9\n\n$$x_i \\rightarrow y_i+p$$\n\n$$y_i \\rightarrow x_i+p$$\n\n\u73b0\u5728\u8fd8\u9700\u8981\u89e3\u51b3\u4fe1\u53f7\u529f\u7387\u7684\u9650\u5236\uff0c\u9009\u62e9\u4e00\u4e2a\u7535\u53f0\u540e\u6211\u4eec\u65e0\u6cd5\u5f97\u77e5\u4e00\u4e2a\u786e\u5b9a\u7684\u4fe1\u53f7\u529f\u7387\u6765\u7ea6\u675f\u5b83\uff0c\u4f46\u6211\u4eec\u77e5\u9053\u54ea\u4e9b\u4fe1\u53f7\u529f\u7387\u4e0d\u80fd\u9009\uff0c\u56e0\u6b64\u7531$i$\u5411$[1,l_i-1] \\cup [r_i+1,M]$\u5bf9\u5e94\u7684\u8282\u70b9\u5efa\u8fb9\uff0c\u5e76\u4e14\u7531$[l_i,r_i]$\u5bf9\u5e94\u7684\u8282\u70b9\u5411$i+p$\u5efa\u8fb9\uff0c\u610f\u4e3a\u4e0d\u9009\u62e9\u6b64\u6bb5\u8303\u56f4\u4e2d\u7684\u4fe1\u53f7\u529f\u7387\u4fbf\u4e0d\u80fd\u9009\u62e9$i$\n\n\u4f46\u662f\u5982\u679c\u8fd9\u6837\u5efa\u8fb9\u7684\u8bdd\u7a7a\u95f4\u65f6\u95f4\u90fd\u627f\u53d7\u4e0d\u4e86\uff0c\u8003\u8651\u5c06\u5efa\u8fb9\u7684\u5bf9\u8c61\u8f6c\u5316\u4e3a\u533a\u95f4\uff0c\u80fd\u4e0d\u80fd\u5411\u533a\u95f4\u7684\u4e24\u7aef\u5efa\u8fb9\u8868\u793a\u5bf9\u8fd9\u6bb5\u533a\u95f4\u7684\u9009\u62e9\u4e0e\u5426\u5462\uff1f\u8fd9\u6837\u662f\u53ef\u4ee5\u7684\uff0c\u7531$i$\u5411\u4fe1\u53f7\u9891\u7387\u4e3a$x$\u5bf9\u5e94\u7684\u8282\u70b9\u5efa\u8fb9\uff0c\u8868\u793a**\u4e0d\u80fd\u9009\u62e9\u5c0f\u4e8e$x$\u7684\u4fe1\u53f7\u9891\u7387**\uff0c\u53ef\u662f\u5982\u679c\u6211\u4eec\u8981\u8868\u793a**\u4e0d\u80fd\u9009\u62e9\u5927\u4e8e$x$\u7684\u4fe1\u53f7\u9891\u7387**\u5462\uff1f\u518d\u989d\u5916\u4f7f\u7528$M$\u4e2a\u8282\u70b9\u4fdd\u5b58\u5927\u4e8e\u7684\u4fe1\u606f\u5c31\u597d\u4e86\n\n\u800c\u8981\u4fdd\u5b58\u533a\u95f4\u8fde\u7eed\u7684\u5173\u7cfb\uff0c\u8fd8\u9700\u5728\u533a\u95f4\u4e2d\u5411\u76f8\u90bb\u7684\u503c\u5efa\u8fb9\uff0c\u5982\u4e0b\n\n```cpp\ntot=p<<1;\npre[1]=++tot;\nsuc[1]=tot+M;\nfor(int i=2;i<=M;i++){\n    pre[i]=++tot;\n    suc[i]=tot+M;\n    add(pre[i],pre[i-1]);\n    add(suc[i-1],suc[i]);\n}\n```\n\n\u81f3\u6b64\uff0c\u7ea6\u675f\u6761\u4ef6\u5df2\u7ecf\u88ab\u5168\u90e8\u5199\u5165\u56fe\u4e2d\uff0c\u8dd1\u4e00\u6b21$Tarjan$\u5373\u53ef\u5f97\u77e5\u662f\u5426\u5b58\u5728\u65b9\u6848\uff0c\u800c\u8f93\u51fa\u7b54\u6848\uff0c\u53ea\u9700\u53d6\u6ee1\u8db3\u6761\u4ef6\u7684$max(l_i)$\u4f5c\u4e3a\u6700\u540e\u9009\u5b9a\u7684\u4fe1\u53f7\u529f\u7387\uff08\u56e0\u4e3a\u9898\u76ee\u672a\u4f5c\u989d\u5916\u8981\u6c42\uff09\n\n**\u4ee3\u7801\uff1a**\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<stack>\nusing namespace std;\nconst int N=4e5+10;\nstack<int> S;\nint n,p,M,m,x,y;\nint l[N],r[N];\nint cnt,tot,dep,cc,ans;\nint head[N<<2],pre[N],suc[N],dfn[N<<2],low[N<<2],clr[N<<2],a[N];\nstruct edge{\n    int nxt,to;\n} e[N*10];\ntemplate <typename T>\ninline T Max(T a,T b){\n    return a>b?a:b;\n}\ntemplate <typename T>\ninline T Min(T a,T b){\n    return a<b?a:b;\n}\ninline void add(int u,int v){\n    e[++cnt]=(edge){head[u],v};\n    head[u]=cnt;\n}\nvoid Tarjan(int u){\n    dfn[u]=low[u]=++dep;\n    S.push(u);\n    for(int i=head[u];i;i=e[i].nxt){\n        int v=e[i].to;\n        if(!dfn[v]){\n            Tarjan(v);\n            low[u]=Min(low[u],low[v]);\n        }\n        else if(!clr[v])\n            low[u]=Min(low[u],dfn[v]);\n    }\n    if(dfn[u]==low[u]){\n        cc++;\n        for(int t;t!=u;){\n            t=S.top();\n            S.pop();\n            clr[t]=cc;\n        }\n    }\n}\nint main(){\n    scanf(\"%d%d%d%d\",&n,&p,&M,&m);\n    tot=p<<1;\n    pre[1]=++tot;\n    suc[1]=tot+M;\n    for(int i=2;i<=M;i++){\n        pre[i]=++tot;\n        suc[i]=tot+M;\n        add(pre[i],pre[i-1]);\n        add(suc[i-1],suc[i]);\n    }\n    for(int i=1;i<=n;i++){\n        scanf(\"%d%d\",&x,&y);\n        add(x+p,y);\n        add(y+p,x);\n    }\n    for(int i=1;i<=p;i++){\n        scanf(\"%d%d\",&l[i],&r[i]);\n        if(l[i]-1>=1)\n            add(i,pre[l[i]-1]);\n        if(r[i]+1<=M)\n            add(i,suc[r[i]+1]);\n        add(suc[l[i]],i+p);\n        add(pre[r[i]],i+p);\n    }\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d\",&x,&y);\n        add(x,y+p);\n        add(y,x+p);\n    }\n    for(int i=1;i<=(p<<1);i++)\n        if(!dfn[i])\n            Tarjan(i);\n    for(int i=1;i<=p;i++)\n        if(clr[i]==clr[i+p]){\n            puts(\"-1\");\n            return 0;\n        }\n    for(int i=1;i<=p;i++)\n        if(clr[i]<clr[i+p]){\n            ans=Max(ans,l[i]);\n            a[++*a]=i;\n        }\n    printf(\"%d %d\\n\",*a,ans);\n    for(int i=1;i<=*a;i++)\n        printf(\"%d \",a[i]);\n    return 0;\n}\n```",
        "postTime": 1568640491,
        "uid": 63708,
        "name": "Pelom",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1215F \u3010Radio Stations\u3011"
    },
    {
        "content": "\u7a81\u7136\u53d1\u73b0\u81ea\u5df1\u7684\u601d\u8def\u4e0d\u592a\u4e00\u6837\uff0c\u4e8e\u662f\u5199\u4e0b\u9898\u89e3\n\n## \u89e3\u6790\n\n\u9996\u5148\u8bbe $p$ \u4e2a 01 \u53d8\u91cf $x_i$ \u8868\u793a\u7b2c $i$ \u4e2a\u7535\u7ad9\u662f\u5426\u9009\u62e9\n\n\u5bf9\u4e8e\u90a3 $n$ \u4e2a $(x, y)$ \u7684\u9650\u5236\u4ee5\u53ca\u90a3 $m$ \u4e2a $(u, v)$ \u7684\u9650\u5236\u90fd\u662f 2-SAT \u677f\u5b50\uff0c\u8fd9\u91cc\u7565\u8fc7\n\n\u9898\u76ee\u8981\u6c42\u9009\u62e9\u4e00\u4e2a $f$\uff0c\u5e76\u4e14\u4ec5\u80fd\u9009\u62e9\u5305\u542b\u8be5 $f$ \u7684\u7535\u7ad9\u3002\u6211\u4eec\u8f6c\u5316\u4e00\u4e0b\u8fd9\u4e2a\u9650\u5236\uff0c\u5176\u5c31\u76f8\u5f53\u4e8e\u9650\u5236\u9009\u62e9\u51fa\u7684\u6240\u6709\u7535\u7ad9\u7684\u533a\u95f4\u7684\u4ea4\uff08\u8fd9\u7ec4\u96c6\u5408\u7684\u4ea4\uff09\u5fc5\u987b\u4e0d\u4e3a\u7a7a\uff0c\u8fd9\u6837\u624d\u5b58\u5728\u5408\u6cd5\u7684 $f$\n\n\u4e8e\u662f\u80fd\u60f3\u5230\uff0c\u82e5\u6211\u4eec\u9009\u62e9\u4e86\u67d0\u4e2a\u7279\u5b9a\u7684\u7535\u7ad9\uff0c\u5176\u5b83\u6240\u6709\u4e0e\u8be5\u7535\u7ad9\u533a\u95f4\u65e0\u4ea4\u7684\u7535\u7ad9\u90fd\u4e0d\u80fd\u88ab\u9009\u62e9\u3002\u82e5\u6211\u4eec\u5bf9\u4e24\u4e24\u6bcf\u5bf9\u7684\u7535\u7ad9\u68c0\u67e5\u5e76\u6dfb\u52a0\u9650\u5236\uff08\u8fd9\u4e2a\u9650\u5236\u7b97\u662f 2-SAT \u677f\u5b50\u90e8\u5206\u7684\uff09\uff0c\u901a\u8fc7\u53cd\u8bc1\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u6837\u8dd1 2-SAT \u5f97\u5230\u7684\u7b54\u6848\u65b9\u6848\u7684\u6240\u6709\u7535\u7ad9\u7684\u533a\u95f4\u7684\u4ea4\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\u3002\u4e8e\u662f\u6211\u4eec\u518d\u6a21\u62df\u4e00\u904d\u5373\u53ef\u5f97\u5230\u8be5\u65b9\u6848\u4e0b $f$ \u5408\u6cd5\u7684\u53d6\u503c\u8303\u56f4\uff0c\u968f\u4fbf\u53d6\u4e00\u70b9\u4f5c\u4e3a\u6700\u7ec8\u7b54\u6848\u5373\u53ef\n\n\u5173\u4e8e\u4e24\u4e24\u68c0\u67e5\u6dfb\u52a0\u9650\u5236\u90e8\u5206\u82e5\u66b4\u529b\u505a\u590d\u6742\u5ea6\u65e0\u6cd5\u627f\u53d7\u3002\u5bf9\u4e8e\u7535\u7ad9 $i$ \u6709\u533a\u95f4 $[l_i, r_i]$\uff0c\u6211\u4eec\u53d1\u73b0\u8981\u4e0e\u5b83\u6dfb\u52a0\u9650\u5236\u7684\u4efb\u610f\u7535\u7ad9 $j$ \u6709\u533a\u95f4 $[l_j, r_j]$ \u9700\u8981\u6ee1\u8db3 $r_j < l_i$ \u6216 $l_j > r_i$\u3002\u8003\u8651\u5c06\u7535\u7ad9\u5206\u522b\u6309 $l_i$ \u6216 $r_i$ \u6392\u5e8f\uff0c\u5171\u4e24\u6b21\uff08\u4e24\u8f6e\uff09\u6dfb\u52a0\u9650\u5236\uff0c\u6bcf\u6b21\u505a\u7684\u65f6\u5019\u9700\u8981\u6dfb\u52a0\u9650\u5236\u7684\u7535\u7ad9\u5c31\u603b\u662f\u4e00\u4e2a\u524d\u7f00\u6216\u540e\u7f00\uff08\u5177\u4f53\u65ad\u70b9\u53ef\u7528\u4e8c\u5206\u627e\u5230\uff09\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u524d\u7f00\u5efa\u56fe\u4f18\u5316\u8fde\u8fb9\u4e86\n\n\u53e6\u5916\u5173\u4e8e\uff082-SAT \u7684\uff09\u524d\u7f00\u5efa\u56fe\u4f18\u5316\u53ef\u53c2\u8003 [PA2010 Riddle](https://www.luogu.com.cn/problem/P6378)\n\n## CODE\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing std::vector;\nusing std::sort;\n\nconst int MAXN =4e5+20;\n\n/* -------------------------------- IO -------------------------------- */\n\nnamespace IO_number{\n\tint read(){\n\t\tint x =0; char c =getchar(); bool f =0;\n\t\twhile(c < '0' || c > '9') (c == '-') ? f =1, c =getchar() : c =getchar();\n\t\twhile(c >= '0' && c <= '9') x =(x<<1)+(x<<3)+(48^c), c =getchar();\n\t\treturn (f) ? -x : x;\n\t}\n\t\n\tvoid write(const int &x){\n\t\tif(x < 0){\n\t\t\tputchar('-');\n\t\t\twrite(-x);\n\t\t}\n\t\telse{\n\t\t\tif(x/10)\n\t\t\t\twrite(x/10);\n\t\t\tputchar('0'+x%10);\n\t\t}\n\t}\n}\nusing namespace IO_number;\n\n/* -------------------------------- 2-SAT -------------------------------- */\n\nnamespace _2SAT{\n\tnamespace Graph{\n\t\tstruct edge{\n\t\t\tint to, nxt;\n\t\t};\n\t\tint tote;\n\t\tvector<int> first;\n\t\tvector<edge> e;\n\t\t\n\t\tinline void addedge(const int &u, const int &v){\n\t\t\t++tote, e[tote].to =v, e[tote].nxt =first[u], first[u] =tote;\n\t\t}\n\t\t\n\t\tinline void init(const int &_V, const int &_E){\n\t\t\ttote =0;\n\t\t\tfirst =vector<int>(_V+1, 0);\n\t\t\te =vector<edge>(_E+1);\n\t\t}\n\t}\n\tusing Graph::first;\n\tusing Graph::e;\n\tusing Graph::addedge;\n\t\n\tint Scc_id;\n\tvector<int> scc_id;\n\t\n\tnamespace Tarjan{\n\t\tvector<int> dfn, low;\n\t\tint Dfn;\n\t\tvector<int> stk;\n\t\tint stk_top;\n\t\tvector<bool> instk;\n\t\t\n\t\tinline int min(const int &x, const int &y){\n\t\t\treturn (x < y) ? x : y;\n\t\t}\n\t\t\n\t\tvoid tarjan(const int &u){\n\t\t\tlow[u] =dfn[u] =++Dfn;\n\t\t\tstk[stk_top++] =u;\n\t\t\tinstk[u] =1;\n\t\t\tfor(int l =first[u]; l; l =e[l].nxt){\n\t\t\t\tif(!dfn[e[l].to]){\n\t\t\t\t\ttarjan(e[l].to);\n\t\t\t\t\tlow[u] =min(low[u], low[e[l].to]);\n\t\t\t\t}\n\t\t\t\telse if(instk[e[l].to])\n\t\t\t\t\tlow[u] =min(low[u], dfn[e[l].to]);\n\t\t\t}\n\t\t\tif(low[u] == dfn[u]){\n\t\t\t\t++Scc_id;\n//\t\t\t\tstk[stk_top] =0;\n\t\t\t\twhile(stk[stk_top] != u){\n\t\t\t\t\tscc_id[stk[stk_top-1]] =Scc_id;\n\t\t\t\t\tinstk[stk[stk_top-1]] =0;\n\t\t\t\t\t--stk_top;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tinline void init(const int &_V){\n\t\t\tScc_id =0;\n\t\t\tscc_id =vector<int>(_V+1);\n\t\t\tdfn =vector<int>(_V+1, 0), low =vector<int>(_V+1);\n\t\t\tDfn =0;\n\t\t\tstk =vector<int>(_V);\n\t\t\tstk_top =0;\n\t\t\tinstk =vector<bool>(_V+1, 0);\n\t\t}\n\t}\n\tusing Tarjan::tarjan;\n\t\n\tint n;\n\tbool Illegal;\n\tvector<bool> val;\n\t\n\tinline void init(const int &_n, const int &_V, const int &_E){\n\t\tn =_n;\n\t\tval =vector<bool>(2*_n+1, 0);\n\t\tGraph::init(_V, _E);\n\t\tTarjan::init(_V);\n\t}\n\t\n\t// `void addlimit(x1, b1, x2, b2)` -> ( x1 == b1 || x2 == b2 ) //\n\tinline void addlimit(const int &x1, const bool &b1, const int &x2, const bool &b2){\n\t\t/* [1, n] -> false, [n+1, 2n] -> true */\n\t\taddedge(x1+(b1^1)*n, x2+b2*n);\n\t\taddedge(x2+(b2^1)*n, x1+b1*n);\n\t}\n\t\n\tvoid work(){\n\t\tfor(int i =1; i <= 2*n; ++i){\n\t\t\tif(!Tarjan::dfn[i])\n\t\t\t\ttarjan(i);\n\t\t\tif(i > n && scc_id[i] == scc_id[i-n])\n\t\t\t\treturn Illegal =1, void();\n\t\t}\n\t\tfor(int i =1; i <= n; ++i)\n\t\t\tval[i] =(scc_id[i+n] < scc_id[i]);\n\t}\n}\n\n/* -------------------------------- Main -------------------------------- */\n\nint main(){\n\tconst int n =read(), p =read(), M =read(), m =read();\n\tstruct node{\n\t\tint l, r, number;\n\t\t\n\t\tnode(){}\n\t\tnode(const int &_l, const int &_r, const int &_number)\n\t\t\t:l(_l), r(_r), number(_number){}\n\t};\n\tvector<node> arr(p);\n\t_2SAT::init(p, p*6, n*2+m*2+(2+(p-1)*4+p*2)*2);\n\tfor(int i =0; i < n; ++i)\n\t\t_2SAT::addlimit(read(), 1, read(), 1);\n\tfor(int i =0; i < p; ++i)\n\t\tarr[i].l =read(), arr[i].r =read(), arr[i].number =i+1;\n\tfor(int i =0; i < m; ++i)\n\t\t_2SAT::addlimit(read(), 0, read(), 0);\n\t\n\tauto cmp1 =[&](const node &A, const node &B){\n\t\treturn A.r < B.r;\n\t};\n\tauto cmp2 =[&](const node &A, const node &B){\n\t\treturn A.l > B.l;\n\t};\n\tfor(int _t =0; _t < 2; ++_t){\n\t\tvector<int> prefix_in(p), prefix_out(p);\n\t\tsort(arr.begin(), arr.end(), (_t == 0) ? cmp1 : cmp2);\n\t\tprefix_in[0] =(_t == 0) ? (2*p+1) : (4*p+1);\n\t\tprefix_out[0] =(_t == 0) ? (2*p+1+p) : (4*p+1+p);\n\t\t_2SAT::addedge(prefix_in[0], arr[0].number), _2SAT::addedge(arr[0].number+p, prefix_out[0]);\n\t\tfor(int i =1; i < (int)arr.size(); ++i){\n\t\t\t// [2*p+1, 3*p]/[4*p+1, 5*p] -> in, [3*p+1, 4*p]/[5*p+1, 6*p] -> out //\n\t\t\tprefix_in[i] =prefix_in[i-1]+1;\n\t\t\tprefix_out[i] =prefix_out[i-1]+1;\n\t\t\t_2SAT::addedge(prefix_in[i], prefix_in[i-1]), _2SAT::addedge(prefix_out[i-1], prefix_out[i]);\n\t\t\t_2SAT::addedge(prefix_in[i], arr[i].number), _2SAT::addedge(arr[i].number+p, prefix_out[i]);\n\t\t}\n\t\tfor(const node &i:arr){\n\t\t\t// addlimit ( arr_[1, pos] == 0 || arr_i == 0 ) //\n\t\t\tint pos;\n\t\t\tif(_t == 0)\n\t\t\t\tpos =lower_bound(arr.begin(), arr.end(), node(-1, i.l, -1), cmp1)-arr.begin()-1;\n\t\t\telse\n\t\t\t\tpos =lower_bound(arr.begin(), arr.end(), node(i.r, -1, -1), cmp2)-arr.begin()-1;\n\t\t\tif(pos >= 0){\n\t\t\t\t_2SAT::addedge(i.number+p, prefix_in[pos]);\n\t\t\t\t_2SAT::addedge(prefix_out[pos], i.number);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t_2SAT::work();\n\tif(_2SAT::Illegal)\n\t\tputs(\"-1\");\n\telse{\n\t\tint l =1, r =M;\n\t\tauto modify =[&](const int &_l, const int &_r){\n\t\t\tr =std::min(_r, r);\n\t\t\tl =std::max(_l, l);\n\t\t};\n\t\tauto cmp3 =[&](const node &A, const node &B){\n\t\t\treturn A.number < B.number;\n\t\t};\n\t\tint cnt =0;\n\t\t\n\t\tsort(arr.begin(), arr.end(), cmp3);\n\t\tfor(int i =1; i <= p; ++i)\n\t\t\tif(_2SAT::val[i])\n\t\t\t\tmodify(arr[i-1].l, arr[i-1].r), ++cnt;\n\t\twrite(cnt), putchar(' '), write(l), putchar('\\n');\n\t\tfor(int i =1; i <= p; ++i)\n\t\t\tif(_2SAT::val[i])\n\t\t\t\twrite(i), putchar(' ');\n\t}\n}\n```",
        "postTime": 1619425177,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1215F\u3010Radio Stations\u3011"
    },
    {
        "content": "\u4e00\u9053\u9700\u8981\u524d\u7f00\u4f18\u5316\u5efa\u56fe\u7684 2-SAT \u7684\u9898\u3002\n\n\u5148\u4e0d\u8003\u8651 $l\\le f\\le r$ \u7684\u9650\u5236\uff0c\u5269\u4e0b\u7684\u9650\u5236\u5c31\u662f\uff1a\n\n1. \u4e24\u4e2a\u81f3\u5c11\u9009\u4e00\u4e2a\n\n2. \u4e24\u4e2a\u6700\u591a\u9009\u4e00\u4e2a\n\n\u6839\u636e 2-SAT \u7684\u5957\u8def\uff0c\u5148\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u9009\u548c\u4e0d\u9009\u3002\u7b2c\u4e00\u79cd\u60c5\u51b5\u8ba9 $N\\rightarrow Y$\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u8ba9 $Y\\rightarrow N$\u3002\n\n\u56e0\u4e3a $M$ \u5f88\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u628a\u6bcf\u4e2a\u5f62\u5982 $f\\le i$ \u7684\u9650\u5236\u90fd\u5efa\u51fa\u6765\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c$f\\le i\\Rightarrow f\\le i+1,f\\ge i+1\\Rightarrow f\\ge i$\uff0c\u6240\u4ee5 $Y_i\\rightarrow Y_{i+1},N_{i+1}\\rightarrow N_i$\u3002\n\n\u82e5\u9009\u70b9 $i$\uff0c\u9700\u8981\u6ee1\u8db3 $f\\le r_i$\uff0c\u4e0d\u6ee1\u8db3 $f\\le l_i-1$\uff0c\u90a3\u4e48\u76f4\u63a5\u8fde\u8fb9\u5373\u53ef\u3002\n\n\u53e6\u5916\uff0c\u6211\u4eec\u8981\u4fdd\u7559 $f\\le 0$ \u7684\u9650\u5236\u3002\u56e0\u4e3a $0$ \u4e0d\u80fd\u9009\uff0c$Y_0\\rightarrow N_0,N_0\\rightarrow Y_0$\u3002\n\n\u7136\u540e\u7c98\u4e2a 2-SAT \u677f\u5b50\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\uff0c\u53cd\u6b63\u5927\u5bb6\u5199\u7684\u65b9\u6cd5\u90fd\u4e00\u6837\u3002",
        "postTime": 1568620914,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1215F \u3010Radio Stations\u3011"
    }
]