[
    {
        "content": "## CF1030G Linear Congruential Generator\n\n~~\u7ffb\u5b66\u957f\u7684\u9898\u5355\u7ffb\u5230\u4e86\u5947\u602a\u7684\u9898~~\n\n### Solution\n\n\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u90fd\u662f\u5728$\\bmod p_i$\u610f\u4e49\u4e0b\u8fdb\u884c\u7684\u8fd0\u7b97\uff0c\u6240\u4ee5\u76f4\u89c9\u4e0a\u6700\u591a$p_i$\u6b21\u540e\u4e00\u5b9a\u4f1a\u51fa\u73b0\u5faa\u73af\uff0c\u4f46\u662f\u4e0d\u4e00\u5b9a\u662f\u7eaf\u5faa\u73af\uff0c\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u7559\u4e0b\u7684\u201c\u67c4\u201d\uff0c\u5982\u679c\u8bb0\u6bcf\u4e00\u4e2a\u201c\u67c4\u201d\u7684\u957f\u5ea6\u4e3a$l_i$\uff0c\u5faa\u73af\u957f\u5ea6\u4e3a$c_i$\uff0c\u90a3\u6700\u7ec8\u7b54\u6848\u662f$max(l_i)+lcm(c_i)$\n\n\u6211\u4eec\u7ec6\u81f4\u7684\u8003\u5bdf\u4e00\u4e0b\u8fd9\u4e2a\u5faa\u73af\u5173\u7cfb\n\n#### I. $a_i=0$\n\n\u6700\u7b80\u5355\u7684\u60c5\u51b5\uff0c$c_i=1$\uff0c\u5f53$x_i=b_i$\u65f6\u5019$l_i=0$\uff0c\u5426\u5219$l_i=1$\n\n#### II $a_i=1$\n\n\u6b64\u65f6$f_i^{(k)}=(x_i+(k-1)b_i)\\bmod p_i$\uff0c$l_i=0$\u5f53$b_i=0$\u65f6$c_i=1$\uff0c\u5426\u5219$c_i=p_i$\n\n#### III otherwise\n\n$a_i>1$\uff0c\u56e0\u4e3a$p_i$\u662f\u8d28\u6570\uff0c\u6240\u4ee5$a_i^{-1},(a_i-1)^{-1}$\u5747\u5b58\u5728\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u80fd\u56de\u6765\uff0c\u6240\u4ee5$l_i=0$\n\n\u65e2\u7136$l_i=0$\u4e86\uff0c\u90a3\u4e48$x_i\\equiv a_i^{c_i}x_i+b_i\\sum_{j=0}^{k-1}a_i^j\\equiv x_i\\equiv a_i^{c_i}x_i+b_i(a_i^{c_i}-1)(a_i-1)^{-1} \\bmod p_i$\n\n\u5373$(a_i^{c_i}-1)\\left(x_i+b_i(a_i-1)^{-1}\\right) \\equiv 0 \\bmod p_i$\n\n\u4e5f\u5373$(a^{c_i}-1)\\equiv0$\u6216$\\left(x_i+b_i(a_i-1)^{-1}\\right) \\equiv 0$\n\n\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u4e0e$c_i$\u65e0\u5173\uff0c\u6240\u4ee5$c_i=1$\uff0c\u8003\u8651\u5230$c_i$\u9700\u8981\u6c42$lcm$\u6240\u4ee5\u8fd9\u6837\u4e00\u5b9a\u4e0d\u4f18\n\n\u7b2c\u4e00\u4e2a\u5f0f\u5b50\u4e2d\u7684$c_i$\u5c31\u662f$a_i$\u5173\u4e8e$p_i$\u7684\u9636\uff0c\u5373$c_i=p_i-1$\n\n#### \u6700\u540e\n\n\u6574\u7406\u4e00\u4e0b\n\n$$a_i=0  \\Rightarrow l_i=1,c_i=1$$\n\n$$a_i=1 \\Rightarrow l_i=0,c_i=p_i$$\n\n$$a_i>1 \\Rightarrow l_i=0,c_i=p_i-1$$\n\n\n\u73b0\u5728\u6211\u4eec\u9700\u8981\u51b3\u5b9a\u4e00\u7ec4$a_i$\uff0c\u6700\u5927\u5316$max(l_i)+lcm(c_i)$\n\n\u76f4\u89c9\u4e0a\u56e0\u4e3a$l_i\\le1$\uff0c\u6240\u4ee5\u6700\u5927\u5316$lcm$\u662f\u6bd4\u8f83\u4f18\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u8003\u8651\u6700\u5927\u5316$lcm$\uff0c\u7136\u540e\u770b\u770b\u80fd\u4e0d\u80fd\u9009$1$(\u56e0\u4e3a\u6bcf\u53bb\u4e00\u4e2a\u56e0\u5b50$lcm$\u81f3\u5c11\u9664\u4e8c\uff0c\u6240\u4ee5\u635f\u5931$lcm$\u6362$l_i$\u662f\u4e8f\u7684)\n\n\u6700\u5927\u5316$lcm$\u662f\u5f88\u5bb9\u6613\u7684\uff0c\u964d\u5e8f\u8003\u8651\u6bcf\u4e2a$p_i$\uff0c\u5982\u679c\u5f53\u524d\u7684$lcm$\u5305\u542b\u4e86$p_i$\uff0c\u5c31\u9009\u62e9$a_i>1$\u5426\u5219\u9009\u62e9$a_i=1$\n\n\u540c\u65f6\u8bb0\u5f55\u4e0b$lcm$\u6bcf\u4e2a\u8d28\u56e0\u5b50\u7684\u6700\u9ad8\u6b21\u5e42\u88ab\u51e0\u4e2a$c_i$\u8fbe\u5230\u4e86\uff0c\u68c0\u67e5\u9009\u62e9\u7684$c_i$\uff0c\u5982\u679c\u6709\u4e00\u4e2a$c_i$\u7684\u5168\u90e8\u8d28\u56e0\u5b50\u90fd\u88ab\u8fbe\u5230\u4e0d\u6b62\u4e00\u6b21\uff0c\u90a3\u5c31\u9009\u4e0a\u4e00\u4e2a$1$\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <iostream>\nusing namespace std;\ntypedef long long ll;\nconst int N   = 2000005;\nconst int mod = 1000000007;\nll p[N];\nint max_p[N], cnt[N];\nint prime[555555], pcnt;\nbool pvis[N];\nint n;\nvoid getP(int n) {\n    for (int i = 2; i <= n; i++) {\n        if (!pvis[i]) {\n            prime[++pcnt] = i;\n        }\n        for (int j = 1; j <= pcnt; j++) {\n            if (prime[j] * i > n)\n                break;\n            pvis[prime[j] * i] = 1;\n            if (i % prime[j] == 0)\n                break;\n        }\n    }\n}\nll qpow(int a, int k) {\n    ll res = 1, base = a;\n    while (k) {\n        if (k & 1) {\n            res = (res * base) % mod;\n        }\n        base = (base * base) % mod;\n        k /= 2;\n    }\n    return res;\n}\ninline void update(int p, int k) {\n    if (k > max_p[p]) {\n        max_p[p] = k;\n        cnt[p]   = 1;\n    } else if (k == max_p[p]) {\n        ++cnt[p];\n    }\n}\nbool check(int x) {\n    if (pvis[x]) {\n        for (int i = 1; i <= pcnt; i++) {\n            if (prime[i] * prime[i] > x) {\n                break;\n            }\n            int k = 0;\n            while (x % prime[i] == 0) {\n                x /= prime[i];\n                k++;\n            }\n            if (max_p[prime[i]] == k && cnt[prime[i]] == 1) {\n                return false;\n            }\n        }\n        if (x > 1 && max_p[x] == 1 && cnt[x] == 1)\n            return false;\n        return true;\n    } else {\n        if (max_p[x] == 1 && cnt[x] == 1)\n            return false;\n        return true;\n    }\n}\nll lcm  = 1;\nint nya = 3;\nbool vis[N];\nint main() {\n    cin >> n;\n    for (int i = 1; i <= n; ++i) {\n        cin >> p[i];\n    }\n    sort(p + 1, p + n + 1);\n    getP(p[n]);\n    for (int i = n; i >= 1; i--) {\n        if (max_p[p[i]]) {\n            int val = p[i] - 1;\n            for (int j = 1; j <= pcnt; j++) {\n                if (prime[j] * prime[j] > val)\n                    break;\n                int k = 0;\n                while (val % prime[j] == 0) {\n                    val /= prime[j];\n                    k++;\n                }\n                k != 0 ? update(prime[j], k) : (void)nya;\n            }\n            if (val > 1) {\n                update(val, 1);\n            }\n            vis[i] = 1;\n        } else {\n            update(p[i], 1);\n        }\n    }\n    for (int i = 1; i <= pcnt; i++) {\n        if (max_p[prime[i]]) {\n            lcm = 1ll * lcm * qpow(prime[i], max_p[prime[i]]) % mod;\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if ((vis[i] && check(p[i] - 1)) || (!vis[i] && check(p[i]))) {\n            lcm = (lcm + 1) % mod;\n            break;\n        }\n    }\n    cout << lcm;\n}\n```\n\n",
        "postTime": 1612187401,
        "uid": 46099,
        "name": "YCS_GG",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1030G \u3010Linear Congruential Generator\u3011"
    }
]