[
    {
        "content": "[\u8fd8\u987b\u8981\u5f80\u4e0b\u7ffb\u5374\u4ecd\u7136\u4e0d\u4e00\u5b9a\u6709\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Illusory-dimes/p/15169251.html)\n\n## description\n\n\u6c42\u5927\u4e8e\u4e00\u4e2a\u6570 $n$ \u5e76\u4e14\u5305\u542b\u7684\u4e0d\u540c\u6570\u5b57\u4e0d\u8d85\u8fc7 $k$ \u7684\u6700\u5c0f\u6570\u3002\n\n## solution\n\n### easy version\n\n\u770b\u5230\u9898\u76ee $k\\leq 2$ \uff0c\u7740\u5b9e\u5c0f\u7684\u53ef\u601c\uff0c\u53ef\u4ee5\u7528\u4e00\u5806\u5224\u65ad\u4e71\u641e\uff1f\uff1f\uff08\u6ca1\u8bd5\u8fc7\uff09\n\n### hard version\n\n\uff08\u6ce8\uff1a\u4e0b\u6587\u201c\u8bd5\u586b\u201d\u8868\u793a\u7528\u4ece\u5f53\u524d\u8fd9\u4e00\u4f4d\u7684\u6570\u5b57 $+1$ \u5230 $9$ \u53bb\u66f4\u6362\u8fd9\u4e00\u4f4d\uff0c\u770b\u662f\u5426\u5408\u6cd5\uff09\n\n\u53ef\u4ee5\u60f3\u5230\u5e94\u8be5\u5c3d\u53ef\u80fd\u4e0d\u52a8\u9ad8\u4f4d\uff0c\u6240\u4ee5\u53ef\u4ee5\u7531\u9ad8\u5230\u4f4e\u4ece\u7b2c\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u4f4d\u7f6e\u5f00\u59cb\u8bd5\u586b\uff0c\u7136\u540e\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. \u53d1\u73b0\u8fd9\u4e00\u4f4d\u8bd5\u586b\u5b8c\u4e86\u90fd\u4e0d\u80fd\u4f7f\u5176\u5408\u6cd5\uff0c\u5f80\u9ad8\u4e00\u4f4d\u7ee7\u7eed\u8bd5\u586b\uff1b\n\n2. \u53d1\u73b0\u8fd9\u4e00\u4f4d\u80fd\u591f\u8bd5\u586b\u5230\u4f7f\u5176\u5408\u6cd5\uff0c\u5f80\u4f4e\u4e00\u4f4d\u7ee7\u7eed\u8bd5\u586b\u3002\n\n\u76f4\u5230\u6700\u4f4e\u4e00\u4f4d\u90fd\u5408\u6cd5\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u6570\u5b57\u5c31\u5408\u6cd5\u4e86\u3002\n\n\u8981\u679a\u4e3e\u6700\u4e45\u7684\u4f8b\u5b50\u5e94\u8be5\u662f\u5728 $k=1$ \u7684\u65f6\u5019\uff0c\u4f46\u603b\u5171\u8bd5\u586b\u6b21\u6570\u5927\u6982\u5c31\u5c0f\u4e00\u767e\u7684\u6837\u5b50\uff0c\u975e\u5e38\u53ef\u8fc7\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nint t,n,k;\ninline int read(){\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){s=(s<<3)+(s<<1)+ch-'0';ch=getchar();}\n\treturn s*w;\n}\ninline int digcnt(int x){\n\tint tmp=0,it;\n\twhile(x){\n\t\tit=x%10;\n\t\ttmp|=(1<<it);\n\t\tx/=10;\n\t}\n\treturn __builtin_popcount(tmp);\n}\ninline void mian(){\n\tn=read();k=read();\n\twhile(digcnt(n)>k){\n\t\tint l=1,r=n;\n\t\twhile(digcnt(r)>k){\n\t\t\tl*=10;r/=10;\n\t\t}\n\t\tl/=10;\n\t\tn=((n/l)+1)*l;\n\t}\n\tprintf(\"%d\\n\",n);\n}\nint main(){\n\tt=read();\n\tfor(int i=1;i<=t;++i)mian();\n\treturn 0;\n}\n```",
        "postTime": 1629970411,
        "uid": 206024,
        "name": "Illusory_dimes",
        "ccfLevel": 7,
        "title": "CF1560F2 Nearest Beautiful Number \u9898\u89e3"
    },
    {
        "content": "~~\u597d\u6c34\u4e00*2100~~  \n\u601d\u8def\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u5728\u539f\u6570\u4e0a\u8d2a\u5fc3\u3002\u627e\u5230\u539f\u6570\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u957f\u524d\u7f00\u3002\u8bbe\u524d\u7f00\u4e3a $1\\sim l$\uff0c\u4fdd\u7559\u8fd9\u4e00\u90e8\u5206\uff0c\u7136\u540e\u5c06\u540e\u9762\u4fee\u6539\u4e3a\u6700\u5c0f\u7684\u5c0f\u4e8e\u539f\u6570\u4e14 $l+1$ \u4f4d\u6bd4\u539f\u6765\u589e\u52a0 $1$ \u7684\u6570\u3002\u4e5f\u5c31\u662f $(a_{l+1}+1)000\\cdots0$ \u7684\u5f62\u5f0f\u3002\u4e00\u76f4\u64cd\u4f5c\u53ea\u5230\u539f\u6570\u6ee1\u8db3\u8981\u6c42\u5373\u53ef\u3002\u590d\u6742\u5ea6 $O(\\log n)$\u3002  \n# AC \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\ninline \nint calc(int n) {\n\tint t = 0, cnt = 0;\n\twhile (n) t |= 1 << n % 10, n /= 10;\n\twhile (t) t &= t - 1, cnt++;\n\treturn cnt;\n}\n\nint t, n, k;\n\nint p, q;\n\nint main() {\n\tscanf(\"%d\", &t);\n\twhile (t--) {\n\t\tscanf(\"%d%d\", &n, &k);\n\t\twhile (calc(n) > k) {\n\t\t\tp = 1, q = n;\n\t\t\twhile (calc(q) > k) p *= 10, q /= 10; p /= 10;\n\t\t\tn = (n / p + 1) * p;\n\t\t}\n\t\tprintf(\"%d\\n\", n);\n\t}\n}\n```",
        "postTime": 1663383572,
        "uid": 406941,
        "name": "Register_int",
        "ccfLevel": 6,
        "title": "CF1560F2 \u9898\u89e3"
    },
    {
        "content": "# \u5206\u6790\n\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u53d6\u5f97 $k$ \u4e2a\u4e0d\u540c\u7684\u3001\u53ef\u4ee5\u7528\u4e8e\u6784\u9020\u7b54\u6848\u7684\u6570\u5b57\uff0c\u73b0\u5728\u8003\u8651\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u6570\u5b57\u6765\u6784\u9020\u4e00\u4e2a\u6700\u5c0f\u7684\u3001\u5927\u4e8e\u7b49\u4e8e\u6240\u7ed9\u6570\u5b57 $n$ \u7684\u7b54\u6848\u3002\n\n\u4ece\u6700\u9ad8\u4f4d\u5f00\u59cb\u6784\u9020\u6570\u5b57\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u4e24\u4e2a\u8d2a\u5fc3\u7b56\u7565\uff1a\n\n1. \u5982\u679c\u8be5\u4f4d\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u66f4\u5c0f\u7684\u6570\u5b57\u6765\u6ee1\u8db3\u5927\u4e8e\u7b49\u4e8e $n$ \u4e0a\u76f8\u540c\u4f4d\u6570\u5b57\u7684\u6761\u4ef6\uff0c\u5219\u4f7f\u7528\u66f4\u5927\u7684\u6570\u5b57\u4e0d\u4f1a\u66f4\u4f18\u3002\n2. \u5982\u679c\u6240\u6784\u9020\u7b54\u6848\u7684\u67d0\u4e00\u4f4d\u4e25\u683c\u5927\u4e8e $n$ \u4e0a\u76f8\u540c\u4f4d\u7684\u6570\u5b57\uff0c\u5219\u8be5\u4f4d\u4e4b\u540e\u7684\u6bcf\u4e00\u4f4d\u53ef\u4ee5\u4efb\u610f\u4f7f\u7528 $k$ \u4e2a\u6570\u5b57\u7684\u5176\u4e2d\u4e00\u4e2a\u3002\u663e\u7136\uff0c\u9009\u62e9 $k$ \u4e2a\u6570\u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a\u6700\u4f18\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u6784\u9020\u65b9\u5f0f\uff1a\n\n1. \u4ece\u6700\u9ad8\u4f4d\u5f00\u59cb\u5411\u4f4e\u4f4d\u6784\u9020\u6570\u5b57\u3002\n2. \u5bf9\u4e8e\u6bcf\u4e00\u4f4d\uff0c\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u5c1d\u8bd5\u4f7f\u7528\u8fd9 $k$ \u4e2a\u6570\uff0c\u76f4\u5230\u67d0\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e $n$ \u4e0a\u76f8\u540c\u4f4d\u7684\u6570\u5b57\uff0c\u5c06\u8be5\u6570\u5b57\u586b\u5165\u8be5\u4f4d\u3002\u5982\u679c $k$ \u4e2a\u6570\u90fd\u5c0f\u4e8e $n$ \u4e0a\u76f8\u540c\u4f4d\u7684\u6570\u5b57\uff0c\u5219\u6784\u9020\u5931\u8d25\uff08\u8fd9 $k$ \u4e2a\u6570\u65e0\u6cd5\u6784\u9020\u51fa\u7b54\u6848\uff09\u3002\n3. \u5982\u679c\u9009\u53d6\u7684\u6570\u5b57\u4e25\u683c\u5927\u4e8e $n$ \u4e0a\u76f8\u540c\u4f4d\u7684\u6570\u5b57\uff0c\u5219\u4f7f\u7528 $k$ \u4e2a\u6570\u4e2d\u6700\u5c0f\u7684\u6570\u5b57\u586b\u5165\u8be5\u4f4d\u4e4b\u540e\u7684\u6240\u6709\u4f4d\u3002\u5426\u5219\uff0c\u5bf9\u4e0b\u4e00\u4f4d\u91cd\u590d\u6267\u884c\u7b2c $2$ \u4e2a\u6b65\u9aa4\u3002\n\n\u8fd9\u4e2a\u6784\u9020\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u5bf9\u6bcf\u4e00\u4f4d\u8fdb\u884c\u9012\u5f52\u5b9e\u73b0\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u9009\u53d6\u8fd9 $k$ \u4e2a\u6570\u3002\u5f53 $k=2$ \u65f6\uff08Easy version\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684\u53d6\u503c\u60c5\u51b5\uff0c\u8bb0\u5f55\u6bcf\u4e00\u79cd\u53d6\u503c\u60c5\u51b5\u7684\u5408\u6cd5\u89e3\uff0c\u6700\u540e\u9009\u53d6\u5176\u4e2d\u6700\u5c0f\u7684\u89e3\u4f5c\u4e3a\u7b54\u6848\u5373\u53ef\u3002\n\n\u7136\u800c\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5728\u9012\u5f52\u6c42\u89e3\u4e4b\u524d\u5c31\u5f97\u5230\u8fd9 $k$ \u4e2a\u6570\u7684\u53d6\u503c\uff0c\u800c\u662f\u5728\u5bf9\u6bcf\u4e00\u4f4d\u9012\u5f52\u7684\u8fc7\u7a0b\u4e2d\u9010\u6e10\u53d6\u5f97\u8fd9 $k$ \u4e2a\u6570\u3002\n\n\u8ba9\u6211\u4eec\u4ece\u6700\u9ad8\u4f4d\u5f00\u59cb\u8003\u8651\uff0c\u6b64\u65f6\u6211\u4eec\u9009\u4e2d\u7684\u6570\u5b57\u4e2a\u6570\u4e3a $0$ \uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u5f53\u524d\u6700\u4f18\u7684\u6570\u5b57\u52a0\u5165 $k$ \u6570\u5b57\u96c6\u5408\uff0c\u7136\u540e\u76f4\u63a5\u4f7f\u7528\u8be5\u6570\u5b57\u586b\u5165\u8be5\u4f4d\u3002\u5f53\u524d\u6700\u4f18\u7684\u6570\u5b57\u662f\u4ec0\u4e48\uff1f\u663e\u7136\u662f $n$ \u76f8\u540c\u4f4d\u4e0a\u7684\u6570\u5b57\uff0c\u8fd9\u662f\u80fd\u6ee1\u8db3\u5927\u4e8e\u7b49\u4e8e $n$ \u4e0a\u76f8\u540c\u4f4d\u6570\u5b57\u6761\u4ef6\u7684\u6700\u5c0f\u503c\uff1b\u5982\u679c\u901a\u8fc7\u9012\u5f52\u6c42\u89e3\u53d1\u73b0\u586b\u5165\u8be5\u6570\u5b57\u540e\u65e0\u6cd5\u6784\u9020\u51fa\u7b54\u6848\uff0c\u90a3\u5176\u52a0\u4e00\u540e\u7684\u503c\u5c31\u662f\u5f53\u524d\u4f4d\u6700\u4f18\u7684\u6570\u5b57\uff08\u6ee1\u8db3\u5927\u4e8e\u76f8\u540c\u4f4d\u6570\u5b57\u7684\u6761\u4ef6\uff0c\u4e00\u5b9a\u80fd\u591f\u786e\u4fdd\u6784\u9020\u51fa\u7b54\u6848\uff09\u3002\n\n\u8ba9\u6211\u4eec\u5c06\u8be5\u53d6\u6570\u65b9\u6cd5\u6269\u5c55\u5230\u5176\u4ed6\u4f4d\uff0c\u5f53\u5904\u7406\u5230\u7b2c $i$ \u4f4d\uff0c\u6b64\u65f6\u9009\u4e2d\u7684\u6570\u5b57\u4e2a\u6570 $m$ \u5c0f\u4e8e $k$ \u65f6\uff0c\u9009\u62e9 $n$ \u76f8\u540c\u4f4d\u4e0a\u7684\u6570\u5b57\u586b\u5165\u8be5\u4f4d\uff0c\u5e76\u5c06\u8be5\u6570\u52a0\u5165 $k$\uff08\u6ce8\u610f\u53bb\u91cd\uff09\uff0c\u7ee7\u7eed\u9012\u5f52\u6c42\u89e3\u4e0b\u4e00\u4f4d\uff1b\u82e5\u9012\u5f52\u6c42\u89e3\u4e0b\u4e00\u4f4d\u65e0\u6cd5\u6784\u9020\u51fa\u7b54\u6848\uff0c\u5219\u5c06\u8be5\u6570\u52a0\u4e00\u540e\u586b\u5165\u8be5\u4f4d\uff0c\u5e76\u5c06\u8be5\u6570\u52a0\u5165 $k$\uff08\u6ce8\u610f\u53bb\u91cd\uff09\uff0c\u7136\u540e\u9012\u5f52\u6c42\u89e3\u4e0b\u4e00\u4f4d\uff0c\u6b64\u65f6\u80fd\u591f\u4fdd\u8bc1\u6784\u9020\u51fa\u6700\u4f18\u89e3\u3002\n\n# AC\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\ntypedef long long ll;\nusing namespace std;\n\nint t, k, dignum;\nbool vis[10]; // \u7528\u4e8e\u6807\u8bb0\u67d0\u4e2a\u6570\u662f\u5426\u5df2\u88ab\u52a0\u5165k\u6570\u96c6\u5408\nchar n[15], ans[15];\n\n// ind: \u5f53\u524d\u6784\u9020\u7684\u4f4d\u6570\n// num: \u5df2\u9009\u62e9\u7684k\u6570\u6570\u7ec4\n// len: \u5df2\u9009\u62e9\u7684k\u6570\u6570\u91cf\n// isok: \u8be5\u4f4d\u4e4b\u524d\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u67d0\u4e00\u4f4d\u4e25\u683c\u5927\u4e8en\u76f8\u540c\u4f4d\u7684\u6570\u5b57\nbool dfs(int ind, int *num, int len, bool isok)\n{\n    if (ind == dignum)\n        return true;\n\n    // \u5df2\u9009\u62e9\u7684k\u6570\u4e2a\u6570\u5c0f\u4e8ek\n    if (len < k)\n    {\n        int new_num[k] = {0}, new_num_len = len;\n        for (int i = 0; i < len; i++)\n            new_num[i] = num[i];\n\n        // \u5982\u679ck\u96c6\u5408\u4e2d\u6ca1\u6709\u8be5\u6570\uff0c\u4fbf\u52a0\u5165\u8be5\u6570\u5e76\u6807\u8bb0\n        if (!vis[n[ind] - '0'])\n            new_num[new_num_len++] = n[ind] - '0', vis[n[ind] - '0'] = true;\n        ans[ind] = n[ind];\n        // \u9012\u5f52\u6c42\u89e3\uff0c\u5982\u679c\u53ef\u4ee5\u6784\u9020\uff0c\u5219\u5fc5\u4e3a\u6700\u4f18\u89e3\n        if (dfs(ind + 1, new_num, new_num_len, isok))\n            return true;\n        // \u4ecek\u96c6\u5408\u4e2d\u79fb\u9664\u8be5\u6570\n        if (new_num_len != len)\n            vis[n[ind] - '0'] = false;\n\n        for (int i = 0; i < len; i++)\n            new_num[i] = num[i];\n        // \u6ce8\u610f\uff0c\u5982\u679c\u52a0\u4e00\u540e\u7684\u503c\u5df2\u7ecf\u5728\u96c6\u5408\u4e2d\u4e86\uff0c\u8fd9\u610f\u5473\u7740\u5728\u96c6\u5408\u672a\u586b\u6ee1\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u4efb\u610f\u586b\u5199\u4e4b\u540e\u6240\u6709\u4f4d\u7684\u6743\u5229\n        // \u6b64\u65f6\uff0c\u5f53\u540e\u7eed\u6240\u6709\u4f4d\u586b0\u65f6\u6700\u4f18\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5c060\u52a0\u5165k\u96c6\u5408\u3002\n        if (vis[n[ind] - '0' + 1])\n            new_num[len] = 0;\n        else\n            new_num[len] = n[ind] - '0' + 1;\n        ans[ind] = n[ind] + 1;\n        // \u82e5\u4e0a\u8ff0\u60c5\u51b5\u65e0\u6cd5\u6784\u9020\uff0c\u5219\u52a0\u4e00\u540e\u586b\u5165\u5fc5\u80fd\u6784\u9020\u51fa\u6700\u4f18\u89e3\n        return dfs(ind + 1, new_num, len + 1, true);\n    }\n\n    sort(num, num + len);\n    // \u5148\u524d\u5df2\u6709\u67d0\u4e00\u4f4d\u4e25\u683c\u5927\u4e8en\u76f8\u540c\u4f4d\u4e0a\u7684\u6570\u5b57\n    if (isok)\n    {\n        ans[ind] = num[0] + '0';\n        return dfs(ind + 1, num, len, isok);\n    }\n    for (int i = 0; i < len; i++)\n    {\n        // \u6ee1\u8db3\u6761\u4ef6\n        if (num[i] >= n[ind] - '0')\n        {\n            ans[ind] = num[i] + '0';\n            // \u9012\u5f52\u6c42\u89e3\u4e0b\u4e00\u4f4d\n            if (dfs(ind + 1, num, len, num[i] > n[ind] - '0'))\n                return true;\n        }\n    }\n    // \u82e5\u8be5\u4f4d\u65e0\u6cd5\u7ee7\u7eed\u6784\u9020\u7b54\u6848\uff0c\u8fd4\u56defalse\u8868\u793a\u6784\u9020\u5931\u8d25\n    return false;\n}\n\nint main()\n{\n    cin >> t;\n    while (t--)\n    {\n        memset(vis, 0, sizeof(vis));\n        cin >> n >> k;\n        dignum = strlen(n);\n        // \u7b54\u6848\u5fc5\u4e3adignum\u4f4d\n        ans[dignum] = '\\0';\n        int num[k] = {0};\n        dfs(0, num, 0, false);\n        cout << atoll(ans) << endl;\n    }\n    return 0;\n}\n```",
        "postTime": 1629533540,
        "uid": 375012,
        "name": "MagicalSheep",
        "ccfLevel": 0,
        "title": "CF1560F2"
    },
    {
        "content": "~~\u4eca\u5e74\u4e00\u5171\u6253\u4e86 4 \u573a Div.3\uff0c\u5c31\u8fd9\u573a\u6253\u5f97\u6700\u70c2\u3002\u3002\u3002~~\n\n\u8fd9\u9053\u9898\u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u8d2a\u5fc3\u505a\u3002\n\n\u663e\u7136\u6700\u5c0f\u7684 $k$-beautiful \u6570\u7684\u4f4d\u6570\u4e0e\u539f\u6570\u76f8\u540c\u3002\n\n\u9996\u5148\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u5f00\u59cb\u586b\u4e0e\u7ed9\u5b9a\u7684\u6570\u76f8\u540c\u7684\u6570\uff0c\u76f4\u5230\u586b\u4e86 $k$ \u4e2a\u4e0d\u540c\u7684\u6570\u5c31\u505c\u6b62\uff08\u5982\u679c\u5df2\u7ecf\u586b\u5b8c\u5c31\u4e0d\u7528\u7ba1\u4e86\uff09\u3002\u6211\u4eec\u628a\u586b\u7684\u6700\u540e\u4e00\u4f4d\u53eb\u7b2c $x$ \u4f4d\uff0c\u603b\u4f4d\u6570\u6709 $m$ \u4f4d\uff0c\u5e76\u8bbe\u539f\u6570\u7684\u7b2c $i$ \u4f4d\u662f $a_i$\uff08\u5728\u8fd9\u91cc\u6700\u9ad8\u4f4d\u662f\u7b2c $1$ \u4f4d\uff0c\u6700\u4f4e\u4f4d\u662f\u7b2c $m$ \u4f4d\uff09\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\u7684\u662f\u6700\u5c0f\u7684 $k$-beautiful \u6570\u7684\u524d $(x-1)$ \u4f4d\u4e5f\u4e00\u5b9a\u662f\u8fd9\u4e48\u586b\u7684\uff08\u6700\u574f\u7684\u60c5\u51b5\u540e\u9762\u53ef\u4ee5\u5168\u90e8\u586b $9$\uff09\u3002\n\n\u73b0\u5728\u6211\u4eec\u5c31\u6765\u8003\u8651\u7b2c $x$ \u4f4d\u8be5\u586b\u4ec0\u4e48\uff0c\u5f88\u663e\u7136\u53ea\u80fd\u586b\u4e24\u79cd\u6570\uff0c\u4e00\u79cd\u662f $a_x$\uff0c\u53e6\u4e00\u79cd\u662f $a_x+1$\uff08\u5982\u679c\u5b58\u5728\uff09\u3002\n\n\u5047\u8bbe\u6211\u4eec\u7b2c $x$ \u4f4d\u586b\u4e86 $a_x$\u3002\u90a3\u4e48\u540e\u9762\u6240\u6709\u4f4d\u4e0a\u7684\u6570\u5fc5\u987b\u586b\u6211\u4eec\u4e4b\u524d\u586b\u7684 $k$ \u79cd\u6570\u4e4b\u4e00\u3002\u7531\u6b64\u6211\u4eec\u8f6c\u5316\u6210\u4e86\u4e00\u4e2a\u5168\u65b0\u7684\u95ee\u9898\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6570 $y$\uff0c\u518d\u7ed9\u4f60 $k$ \u4e2a\u4e92\u4e0d\u76f8\u540c\u7684\u4e2a\u4f4d\u6570\uff0c\u627e\u5230\u6700\u5c0f\u7684\u6570\u4f7f\u5f97\u5b83\u4e0d\u5c0f\u4e8e $y$ \u4e14\u5b83\u53ea\u7531\u8fd9 $k$ \u4e2a\u4e2a\u4f4d\u6570\u7ec4\u6210\u3002\n\n\u663e\u7136\u8fd9\u4e2a\u53ef\u4ee5\u6307\u6570\u7ea7\u590d\u6742\u5ea6\u505a\u51fa\u6765\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u6211\u4eec\u8003\u8651\u7ebf\u6027\u505a\u6cd5\u3002\n\n\u8bbe\u5728 $k$ \u79cd\u6570\u4e2d\u539f\u6570\u7b2c $i$ \u4f4d\u7684\u4e0d\u5c0f\u4e8e\u5b83\u672c\u8eab\u4e14\u6700\u5c0f\u7684\u6570\u662f $b_i$\uff0c\u5927\u4e8e\u5b83\u672c\u8eab\u4e14\u6700\u5c0f\u7684\u6570\u662f $c_i$\uff0c\u8fd9 $k$ \u79cd\u6570\u4e2d\u6700\u5c0f\u7684\u6570\u662f $minn$\u3002\n\n\u5f88\u663e\u7136\uff0c\u7b2c $i$ \u4f4d\u586b\u6570\u53ea\u53ef\u80fd\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u5206\u522b\u662f $minn,b_i,c_i$\u3002\n\n$b$ \u6570\u7ec4\u663e\u7136\u5728\u4f4d\u6570\u5c3d\u91cf\u9ad8\u7684\u65f6\u5019\u4f7f\u7528\uff0c\u627e\u5230\u6700\u5c0f\u7684\u6570 $j$ \u4f7f\u5f97\u7b2c $j$ \u4f4d\u6ca1\u6709 $b_j$\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u90a3\u4e48\u5c31\u627e\u5230\u6700\u5c0f\u7684\u4e00\u4e2a\u6570 $l$ \u4f7f\u5f97 $a_l<b_l$\uff08\u6ca1\u6709\u7684\u8bdd\u76f4\u63a5\u8f93\u51fa\u539f\u6570\uff09\u3002\u5982\u679c\u627e\u5230\uff0c\u8bf4\u660e\u8bf4\u660e\u6700\u5c0f\u7684 $k$-beautiful \u6570\u662f $\\overline{a_1a_2a_3a_4\u2026\u2026a_{l-1}b_l\\,minn\\,minn\u2026\u2026}$\u3002\n\n\u53ef\u4ee5\u80af\u5b9a\u7b2c $j$ ~ $m$ \u4f4d\u5fc5\u987b\u5168\u5f97\u586b $minn$\uff08\u56e0\u4e3a\u628a\u5b83\u5355\u72ec\u62ce\u51fa\u6765\u65e0\u5408\u6cd5\u7684\u6570\u53ef\u586b\uff0c\u6240\u4ee5\u53ea\u80fd\u501a\u9760\u66f4\u9ad8\u7684\u4f4d\u586b\u7684\u6570\u6bd4\u539f\u6765\u5927\uff0c\u540c\u65f6\u4e3a\u4e86\u4fdd\u8bc1\u7b54\u6848\u6700\u4f18\uff0c\u8fd9\u4e9b\u4f4d\u53ea\u80fd\u586b $minn$\uff09\u3002\n\n\u63a5\u7740\u4ece $x+1$ \u5f00\u59cb\u6b63\u5e8f\u679a\u4e3e\u4e00\u76f4\u5230 $j-1$ \u770b\u770b\u6709\u6ca1\u6709\u4e00\u4e2a\u6570 $k$ \u4f7f\u5f97 $a_l<b_l$\uff0c\u5982\u679c\u627e\u5230\uff0c\u8bf4\u660e\u6700\u5c0f\u7684 $k$-beautiful \u6570\u662f $\\overline{a_1a_2a_3a_4\u2026\u2026a_{l-1}b_l\\,minn\\,minn\u2026\u2026}$\uff08\u5176\u5b9e\u8ddf\u4e0a\u9762\u7684\u5bfb\u627e\u65b9\u6cd5\u4e00\u6837\uff09\u3002\n\n\u5982\u679c\u6ca1\u6709\uff0c\u8bf4\u660e\u5bf9\u4e8e\u6240\u6709\u7684 $x< l<j$\uff0c\u90fd\u6709 $a_l=b_l$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u7528\u5230 $c_l$ \u4e86\u3002\n\n$c$ \u6570\u7ec4\u5f53\u7136\u5728\u4f4d\u6570\u5c3d\u91cf\u4f4e\u7684\u65f6\u5019\u4f7f\u7528\u6700\u597d\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u7b2c $(j-1)$ \u4f4d\u5f00\u59cb\u5230\u7b2c $(x+1)$ \u4f4d\u5012\u5e8f\u679a\u4e3e\u3002\u5982\u679c\u627e\u5230\u4e00\u4e2a\u6570 $l$\uff0c\u8bf4\u660e\u6700\u5c0f\u7684 $k$-beautiful \u6570\u662f $\\overline{a_1a_2a_3a_4\u2026\u2026a_{l-1}c_l\\,minn\\,minn\u2026\u2026}$\u3002\n\n\u5426\u5219\uff0c\u7b2c $x$ \u4f4d\u53ea\u80fd\u662f $a_x+1$\u3002\n\n\u5982\u679c\u586b\u4e86 $a_x+1$\uff0c\u90a3\u540e\u9762\u5c31\u597d\u529e\u4e86\uff0c\u5982\u679c $a_x+1$ \u4e0e\u524d $(x-1)$ \u4f4d\u7684\u5176\u4e2d\u4e00\u4e2a\u6570\u5b57\u76f8\u540c\uff0c\u8bf4\u660e $k$ \u79cd\u6570\u8fd8\u6ca1\u6709\u6ee1\uff0c\u4e0d\u59a8\u8ba9\u540e\u9762\u5168\u586b $0$\u3002\u5426\u5219\uff0c\u540e\u9762\u7684\u6570\u53ea\u80fd\u5168\u586b $k$ \u79cd\u6570\u4e2d\u6700\u5c0f\u7684\u6570\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(t(\\lg n+k))$",
        "postTime": 1629359360,
        "uid": 80614,
        "name": "ZCPB",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1560F1/F2"
    },
    {
        "content": "# CF1560F2 \u9898\u89e3\n\n\n\n## \u601d\u8def\u5206\u6790\n\n\u63d0\u4f9b\u4e00\u4e2a\u80fd\u89e3\u51b3\u4e24\u4e2a\u7248\u672c\u7684\u505a\u6cd5\u3002\n\n\u8003\u8651\u76f4\u63a5\u8fdb\u884c dp\uff0c\u8bb0 $dp_{i,\\mathbf S}$ \u8868\u793a\u5f53\u524d\u586b\u7b2c $i$ \u4f4d\uff0c\u7528\u8fc7\u7684\u6570\u7801\u6784\u6210\u96c6\u5408 $\\mathbf S$ \u65f6\uff0c\u7b2c $i\\sim 0$ \u4f4d\u6240\u53d6\u5f97\u7684\u7684\u6700\u5c0f\u6570\u503c\uff0c\u7136\u540e\u72b6\u538b $\\mathbf S$ \u518d\u5957\u4e00\u4e2a dfs \u89e3\u6570\u4f4d dp \u7684\u677f\u5b50\u5373\u53ef\uff0c\u641c\u7d22\u7684\u65f6\u5019\u8981\u8bb0\u4f4f\u4ece\u7406\u8bba\u6700\u9ad8\u4f4d\uff08\u7b2c $9$ \u4f4d\uff09\u5f00\u59cb\u641c\u7d22\u5e76\u4e14\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u662f\u5426\u5728\u524d\u5bfc\u96f6\u72b6\u6001\u4e0b\u5373\u53ef\u3002\n\n\u7531\u4e8e\u5176\u53d6\u5f97\u6700\u5c0f\u6570\u503c\u4e00\u5b9a\u8981\u5148\u8ba9\u9ad8\u4f4d\u5c3d\u53ef\u80fd\u5c0f\uff0c\u56e0\u6b64\u67e5\u5230\u4e00\u7ec4\u89e3\u53ef\u4ee5\u76f4\u63a5 `break`\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(2^{10}\\cdot\\log_{10}n)$\u3002\n\n## \u4ee3\u7801\u5448\u73b0\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN=11,MAXS=1<<10;\nconst int b[]={1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000};\ninline int bit(int x) { return 1<<x; }\nint n,k,dp[MAXN][MAXS],a[MAXN];\nbool vis[MAXN][MAXS];\ninline int dfs(int dig,int S,bool lim,bool qd) {\n\tif(dig<0) return __builtin_popcount(S)<=k?0:-1; \n\tif(!lim&&vis[dig][S]) return dp[dig][S];\n\tint ret=-1;\n\tfor(int i=(lim?a[dig]:0);i<10;++i) {\n\t\tint k=dfs(dig-1,(qd&&i==0)?0:S|bit(i),lim&&(i==a[dig]),qd&&(i==0));\n\t\tif(k!=-1) {\n\t\t\tret=b[dig]*i+k;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!lim) vis[dig][S]=true,dp[dig][S]=ret;\n\treturn ret;\n}\ninline void solve() {\n\tmemset(dp,-1,sizeof(dp));\n\tmemset(vis,false,sizeof(vis));\n\tscanf(\"%d%d\",&n,&k);\n\tint len=0;\n\twhile(n) {\n\t\ta[len]=n%10;\n\t\tn/=10,++len;\n\t}\n\tfor(int i=len;i<=9;++i) a[i]=0;\n\tprintf(\"%d\\n\",dfs(9,0,true,true));\n}\nsigned main() {\n\tint T;\n\tscanf(\"%d\",&T);\n\twhile(T--) solve();\n\treturn 0;\n} \n```\n\n",
        "postTime": 1673015481,
        "uid": 539618,
        "name": "DaiRuiChen007",
        "ccfLevel": 6,
        "title": "CF1560F2 \u9898\u89e3"
    },
    {
        "content": "\u6765\u8865\u5145\u4e00\u4e0b\u4e0d\u7528\u8d2a\u5fc3\uff0c\u597d\u5199\u6a21\u677f\u5316\u7684\u6570\u4f4d DP\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u5728\u672c\u9898\u89e3\u4e4b\u524d F1 \u5df2\u7ecf\u6709 dalao \u4e8c\u5206+\u9884\u5904\u7406\u4e86\u3002\n\n\u4f46\u662f\u6211\u4eec\u5230 F2 \u7684\u65f6\u5019\uff0c\u4f1a\u53d1\u73b0\u6570\u91cf\u6bd4\u8f83\u5927\uff0c\u53ef\u80fd\u65e0\u6cd5\u9884\u5904\u7406\u4e86\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6570\u4f4d DP \u5c31\u6709\u4e86\u4ee3\u66ff\u8fd9\u4e2a\u7684\u4f18\u52bf\u3002\n\n\u9996\u5148\uff0c\u770b\u5230\u8fd9\u4e2a\u9898\u76ee\uff0c\u663e\u7136\u662f\u8981\u7528\u4e8c\u5206\u3002\n\n\u5173\u952e\u662f\u4e8c\u5206\u4e4b\u540e\u5982\u4f55 check\uff0c\u5047\u5b9a\u6211\u4eec\u4e8c\u5206\u7684\u503c\u4e3a $Mid$\uff0c\u90a3\u4e48\u9700\u8981\u7edf\u8ba1\u7684\u5373\u4e3a $[l,Mid]$ \u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u7b26\u5408\u8981\u6c42\u7684\u4e2a\u6570\u3002\n\n\u8f6c\u5316\u6210\u8fd9\u6837\u4e4b\u540e\uff0c\u53ef\u4ee5\u5229\u7528\u6570\u4f4d DP \u6765\u505a\u3002\n\n\u4e0d\u540c\u7684\u6570\uff0c\u90a3\u4e48\u5c31\u628a\u4ed6\u72b6\u538b\u4e0b\u6765\uff0c\u7136\u540e\u5bf9\u4e8e\u524d\u5bfc\u96f6\u8fdb\u884c\u4e00\u4e9b\u7279\u5224\u5373\u53ef\u3002\n\n\u6570\u4f4d DP \u6a21\u677f\u633a\u597d\u5199\u7684\u3002\n\n\u6ce8\u610f\u8fd9\u91cc\u6709\u591a\u6d4b\u7684\u539f\u56e0\uff0c\u6570\u4f4d DP \u8bb0\u5f97\u628a\u4e0a\u9650\u7684\u7ed9\u53bb\u6389\u3002\n\n\u5177\u4f53\u7684\uff0c\u6211\u4eec\u8bbe $f_{i,j,k,l}$ \u8868\u793a\u73b0\u5728\u662f\u7b2c $i$ \u4f4d\uff0c$0/1$ \u8868\u793a\u662f\u5426\u6709\u524d\u5bfc\u96f6\uff0c$k$ \u7c7b\u4f3c\u4e8e\u72b6\u538b\uff0c\u5bf9\u4e8e\u7b2c $n$ \u4f4d\u5982\u679c\u4e3a $1$\uff0c\u90a3\u4e48\u5219 $n$ \u51fa\u73b0\u8fc7\uff0c\u5bf9\u4e8e $l$ \u662f\u76ee\u524d\u4e0d\u80fd\u8d85\u8fc7\u7684\u6570\u3002\n\n\u7136\u540e\u5728\u505a\u7684\u65f6\u5019\uff0c\u679a\u4e3e\u6bcf\u4e00\u4f4d\u662f\u5565\u5373\u53ef\u3002\n\n\u6700\u540e\u5224\u4e00\u4e0b\u51fa\u73b0\u6570\u6570\u91cf\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e $l$ \u5373\u53ef\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#define int long long \nusing namespace std;\nconst int INF=15;\nconst int INFM=11;\nint t,f[INF][2][1<<INFM][INFM],n,k;\n//     \u4f4d\u6570,\u524d\u5bfc\u96f6,\u4f4d\u6570\u72b6\u6001\u538b\u7f29,\u4e0d\u8d85\u8fc7\u591a\u5c11?\nint g[INF];\nint calc(int x) {\n\tint kk=0;\n\twhile (x) kk++,x-=x&-x;\n\treturn kk;\n}\nint DFS(int a1,int a2,int a3,int a4,int a5) {\n\tif (!a1) return calc(a4)<=a5;\n\tif (!a2 && ~f[a1][a3][a4][a5]) return f[a1][a3][a4][a5];\n\tint Max=a2?g[a1]:9,res=0;\n\tfor (int i=0;i<=Max;i++) {\n\t\tint xx=a4;\n\t\tif (i==0 && a3) ;\n\t\telse xx|=(1<<i);\n\t\tres+=DFS(a1-1,a2 && i==Max,a3 && i==0,xx,a5);\n\t}\n\tif (!a2) f[a1][a3][a4][a5]=res;\n\treturn res;\n}\nint calc(int x,int k) {\n\tmemset(g,0,sizeof g);\n\twhile (x) {\n\t\tg[++g[0]]=x%10;\n\t\tx/=10;\n\t}\n\treturn DFS(g[0],1,1,0,k);\n}\nbool check(int xx,int yy,int zz) {\n\treturn calc(xx,zz)-calc(yy-1,zz)>0;\n}\nsigned main()\n{\n\tmemset(f,255,sizeof f);\n\tios::sync_with_stdio(false);\n\tcin>>t;\n\twhile (t--) {\n\t\tcin>>n>>k;\n\t\tint l=n,r=2e9,ans=-1;\n\t\twhile (l<=r) {\n\t\t\tint Mid=(l+r)>>1;\n\t\t\tif (check(Mid,n,k)) r=(ans=Mid)-1;\n\t\t\telse l=Mid+1;\n\t\t}\n\t\tcout<<ans<<\"\\n\";\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1663548703,
        "uid": 208653,
        "name": "_edge_",
        "ccfLevel": 0,
        "title": "CF1560F2"
    }
]