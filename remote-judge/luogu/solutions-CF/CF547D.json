[
    {
        "content": "\u6807\u7b97\u662f\u4ec0\u4e48\u6570\u5b66\u5f52\u7eb3\u6cd5+\u5e26\u52a0\u5220\u8fb9\u7684\u6b27\u62c9\u56de\u8def\u2026\u2026\uff0c\u590d\u6742\u5ea6\u662f$O(nlogn)$\u7684\n\n\u8fd9\u4e2a\u505a\u6cd5\u8fc7\u4e8e\u786c\u6838\u4e86\uff0c\u6211\u4eec\u4e0d\u5982\u6765\u60f3\u60f3\u4eb2\u6c11\u4e00\u4e9b\u7684\u4e71\u641e\u505a\u6cd5(\u6ca1\u51c6\u662f\u5bf9\u7684\uff1f)\n\n(\u53cd\u6b63\u8fd9\u4e2a\u505a\u6cd5\u6211\u65e2\u4e0d\u4f1a\u8bc1\u4e5f\u4e0d\u4f1a\u53c9\uff0c\u6b22\u8fcedalao\u6765\u53c9\u6216\u8005\u6765\u8bc1)\n\n\u5bf9\u4e8ex\u5750\u6807\u76f8\u540c\u7684\u70b9\uff0c\u6211\u4eec\u628a\u8fd9\u4e9b\u70b9**\u4e24\u4e24\u914d\u5bf9**,\u5982\u679c\u5269\u4e0b\u70b9\u5219\u4e0d\u7ba1\uff0c\u7136\u540e\u5728\u6bcf\u4e00\u5bf9\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\n\n\u5bf9\u4e8ey\u5750\u6807\u76f8\u7b49\u7684\u70b9\uff0c\u6211\u4eec\u4e5f\u628a\u8fd9\u4e9b\u70b9**\u4e24\u4e24\u914d\u5bf9**\uff0c\u5982\u679c\u5269\u4e0b\u70b9\u5219\u4e0d\u7ba1\uff0c\u7136\u540e\u5728\u6bcf\u4e00\u5bf9\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\n\n\u6700\u540e\u5bf9\u5f97\u5230\u7684\u56fe\u8fdb\u884c\u7ea2\u84dd\u67d3\u8272(\u5176\u5b9e\u5c31\u662f\u9ed1\u767d\u67d3\u8272)\u5c31\u53ef\u4ee5\u5f97\u5230\u6211\u4eec\u7684\u65b9\u6848\u4e86\n\n\u8bc1\u660e\u4e5f\u5f88\u7b80\u5355\uff0c\u5982\u679c\u6211\u4eec\u7ea2\u84dd\u67d3\u8272\u6210\u529f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2ax\u6216\u8005y\u5750\u6807\u6765\u8bb2\u6700\u591a\u5269\u4e0b\u4e00\u4e2a\u7ea2\u70b9\u6216\u8005\u84dd\u70b9\n\n~~\u6240\u4ee5\u8fd9\u4e2a\u7b97\u6cd5gg\u7684\u65f6\u5019\u5c31\u662f\u6211\u4eec\u7ea2\u84dd\u67d3\u8272\u5931\u8d25\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8fde\u51fa\u4e86\u5947\u73af\u2026\u2026\uff0c\u4e0d\u77e5\u9053\u6709\u6ca1\u6709dalao\u53ef\u4ee5\u7ed9\u51fa\u4e00\u7ec4\u8fde\u51fa\u5947\u73af\u7684\u65b9\u6848~~\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\nusing namespace std;const int N=1e6+10;typedef long long ll;\nint v[N];int x[N];int ct;int al[N];int col[N];int n;\nint lstu[N];int lstv[N];\ninline void add(int u,int V){v[++ct]=V;x[ct]=al[u];al[u]=ct;}\ninline void dfs(int u,int tw)\n{col[u]=tw;for(int i=al[u];i;i=x[i])if(col[v[i]]==-1)dfs(v[i],tw^1);} \nint main()\n{\n    scanf(\"%d\",&n);for(int i=1;i<=n;i++)col[i]=-1;\n    for(int i=1,x,y;i<=n;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        if(lstu[x]){add(lstu[x],i),add(i,lstu[x]),lstu[x]=0;}else lstu[x]=i;\n        if(lstv[y]){add(lstv[y],i),add(i,lstv[y]),lstv[y]=0;}else lstv[y]=i;\n    }for(int i=1;i<=n;i++)if(col[i]==-1)dfs(i,0);\n    for(int i=1;i<=n;i++)putchar((col[i])?'r':'b');return 0;\n}\n```\n\n\n\n\n",
        "postTime": 1551087597,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF547D \u3010Mike and Fish\u3011"
    },
    {
        "content": "\u6807\u7b7e: \u56fe\u8bba, \u6b27\u62c9\u56de\u8def.\n\n\u6211\u4eec\u8f6c\u5316\u4e00\u4e0b\u95ee\u9898: \u5c06\u70b9\u770b\u6210\u8fde\u63a5\u5176\u6a2a\u5750\u6807\u548c\u7eb5\u5750\u6807\u7684\u8fb9, \u6211\u4eec\u4e3a\u6bcf\u4e00\u6761\u8fb9\u5b9a\u5411, \u4f7f\u5f97\u6bcf\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6\u4e0e\u51fa\u5ea6\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 $1$ .\n\n\u8fd9\u4e2a\u5f88\u5bb9\u6613\u53ef\u4ee5\u8f6c\u5316\u6210\u4e00\u4e2a\u6b27\u62c9\u56de\u8def\u7684\u95ee\u9898: \u663e\u7136\u5ea6\u6570\u4e3a\u5076\u6570\u7684\u70b9\u5165\u5ea6\u7b49\u4e8e\u51fa\u5ea6, \u800c\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u5165\u51fa\u5ea6\u6070\u597d\u5dee $1$ . \u6211\u4eec\u5c06\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u8fde\u4e00\u6761\u865a\u62df\u8fb9\u5230\u4e00\u4e2a\u865a\u62df\u70b9, \u7531\u4e8e\u7684\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u5fc5\u7136\u662f\u5076\u6570\u4e2a, \u90a3\u4e48\u865a\u62df\u70b9\u7684\u5ea6\u6570\u4e5f\u4e3a\u5076\u6570, \u6211\u4eec\u5bf9\u65b0\u56fe\u8dd1\u6b27\u62c9\u56de\u8def\u5bf9\u8fb9\u5b9a\u5411\u5373\u53ef.\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n)$.\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint read();\nint n;\nint hd[400005], nx[800005], to[800005], cnt;\nint deg[800005];\nvoid add(int f, int t) {\n    nx[++cnt] = hd[f], hd[f] = cnt, to[cnt] = t, ++deg[f];\n}\nstruct E {\n    int u, v;\n    void init() { u = read(), v = read() + 200000, add(u, v), add(v, u); }\n} p[200005];\nbool vis[800005];\nint res[200005];\n\nint tcc;\nvoid dfs(int u) {\n    for (int &i = hd[u], e; i; i = nx[i])\n        if (!vis[e = i >> 1])\n            vis[e] = 1, (e <= n ? res[e] = i & 1 : 0), dfs(to[i]);\n}\n\nint main() {\n    n = read(), cnt = 1;\n    for (int i = 1; i <= n; ++i) p[i].init();\n    for (int i = 1; i <= 400000; ++i)\n        if (deg[i] & 1) add(0, i), add(i, 0);\n    for (int i = 1; i <= 400000; ++i) dfs(i);\n    for (int i = 1; i <= n; ++i) putchar(res[i] ? 'r' : 'b');\n    return 0;\n}\nconst int _SIZE = 1 << 22;\nchar ibuf[_SIZE], *iS = ibuf, *iT = ibuf;\n#define gc                                                         \\\n    (iS == iT ? iT = ((iS = ibuf) + fread(ibuf, 1, _SIZE, stdin)), \\\n     (iS == iT ? EOF : *iS++) : *iS++)\nint read() {\n    int x = 0, f = 1;\n    char c = gc;\n    while (!isdigit(c)) f = (c == '-') ? -1 : f, c = gc;\n    while (isdigit(c)) x = x * 10 + c - '0', c = gc;\n    return x * f;\n}\n```\n",
        "postTime": 1580290233,
        "uid": 51237,
        "name": "Kinandra",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF547D \u3010Mike and Fish\u3011"
    },
    {
        "content": "\u9898\u89e3\u533a\u4e0d\u5c11\u795e\u4ed9\u90fd\u662f\u6b27\u62c9\u56de\u8def\u505a\u6cd5 orz\n\n\u6211\u7684\u505a\u6cd5\u548c SI \u795e\u4ed9\u7684\u505a\u6cd5\u601d\u8def\u4e0a\u5dee\u4e0d\u591a\u3002\u8fd9\u91cc\u5e2e\u5fd9\u8865\u5145\u4e00\u4e9b\u6bd4\u8f83\u4e25\u5bc6\u7684\u8bc1\u660e\u3002\n\n\u8003\u8651\u82e5\u5e72\u4e2a\u6a2a\u5750\u6807\u76f8\u7b49\u7684\u70b9\uff0c\u6211\u4eec\u968f\u673a\u5c06\u5b83\u4eec\u4e24\u4e24\u914d\u5bf9\u540e\u8fde\u8fb9\uff08\u5982\u679c\u6709\u5076\u6570\u4e2a\u70b9\uff0c\u5219\u80fd\u5168\u90e8\u914d\u5bf9\uff0c\u5426\u5219\u5269\u4e0b\u4e00\u4e2a\u5355\u72ec\u7684\u70b9\uff09\uff1b\u5bf9\u4e8e\u7eb5\u5750\u6807\u76f8\u7b49\u7684\u70b9\u4e5f\u4f5c\u5982\u6b64\u5904\u7406\u3002\n\n\u6700\u540e\u5f97\u5230\u7684\u56fe\u53ef\u4ee5\u8bc1\u660e\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff08\u8bc1\u660e\u540e\u9644\uff09\uff0c\u6211\u4eec\u76f4\u63a5\u5bf9\u5176\u9ed1\u767d\u67d3\u8272\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002\n\n\u63a5\u4e0b\u6765\u662f\u8bc1\u660e\u65f6\u95f4\u3002\n\n1. \u8bc1\u660e\u5f97\u5230\u7684\u56fe\u662f\u4e8c\u5206\u56fe\u3002\n\n\u6bcf\u4e2a\u70b9\u6700\u591a\u53ea\u8fde\u4e24\u6761\u8fb9\uff0c\u4e14\u6700\u591a\u4e00\u6761\u6a2a\u5411\u8fb9\u548c\u6700\u591a\u4e00\u6761\u7eb5\u5411\u8fb9\uff0c\u5373\u4e0d\u5b58\u5728\u4e00\u4e2a\u70b9\u540c\u65f6\u4e0e\u4e24\u4e2a\u6a2a\u5750\u6807\u76f8\u7b49\u7684\u70b9\u8fde\u8fb9\u7684\u60c5\u51b5\u3002\n\n\u8fd9\u610f\u5473\u7740\u5f62\u6210\u7684\u73af\u4e00\u5b9a\u4e3a\u6a2a\u5411\u8fb9\u548c\u7eb5\u5411\u8fb9\u4ea4\u66ff\u7684\u5f62\u6001\uff0c\u4e5f\u5373\u4e0d\u5b58\u5728\u5947\u73af\uff0c\u4ece\u800c\u5f97\u5230\u7684\u56fe\u4e3a\u4e8c\u5206\u56fe\u3002\n\n2. \u8fd9\u79cd\u6784\u9020\u65b9\u6848\u7684\u6b63\u786e\u6027\u3002\n\n\u6309\u7167\u4e0a\u9762\u7684\u5efa\u56fe\u65b9\u5f0f\uff0c\u6bcf\u4e2a\u6a2a\u5750\u6807\u76f8\u540c\u800c\u5f62\u6210\u7684\u70b9\u5bf9\u989c\u8272\u5fc5\u5b9a\u76f8\u53cd\uff0c\u7eb5\u5750\u6807\u76f8\u540c\u7684\u70b9\u5bf9\u60c5\u51b5\u540c\u7406\u3002\n\n\u56e0\u6b64\u6a2a\u5750\u6807\u7b49\u4e8e $x$ \u7684\u70b9\u4e2d\uff0c\u5176\u4e2d\u914d\u5bf9\u7684\u70b9\u91cc\u9ed1\u70b9\u6570\u5fc5\u5b9a\u7b49\u4e8e\u767d\u70b9\u6570\uff0c\u800c\u6ca1\u6709\u53c2\u52a0\u914d\u5bf9\u7684\u70b9\u6700\u591a\u53ea\u6709\u4e00\u4e2a\uff0c\u7b26\u5408\u9898\u76ee\u8981\u6c42\u3002\n\n```cpp\n// Problem : D. Mike and Fish\n// Contest : Codeforces Round #305 (Div. 1)\n// URL : https://codeforces.com/contest/547/problem/D\n// Author : StudyingFather\n// Site : https://studyingfather.com\n// Memory Limit : 256 MB\n// Time Limit : 3000 ms\n// Powered by CP Editor (https://github.com/cpeditor/cp-editor)\n\n#include <cstring>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint vis[200005],p[200005],q[200005];\nvector<int> e[200005];\nvoid dfs(int u,int c)\n{\n vis[u]=c;\n for(auto v:e[u])\n  if(vis[v]==-1)dfs(v,c^1);\n}\nint main()\n{\n memset(vis,-1,sizeof(vis));\n int n;\n cin>>n;\n for(int i=1;i<=n;i++)\n {\n  int x,y;\n  cin>>x>>y;\n  if(p[x])\n  {\n   e[i].push_back(p[x]);\n   e[p[x]].push_back(i);\n   p[x]=0;\n  }\n  else p[x]=i;\n  if(q[y])\n  {\n   e[i].push_back(q[y]);\n   e[q[y]].push_back(i);\n   q[y]=0;\n  }\n  else q[y]=i;\n }\n for(int i=1;i<=n;i++)\n  if(vis[i]==-1)dfs(i,0);\n for(int i=1;i<=n;i++)\n  cout<<(vis[i]?'r':'b');\n return 0;\n}\n```",
        "postTime": 1584464364,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF547D \u3010Mike and Fish\u3011"
    },
    {
        "content": "\u5927\u5bb6\u7684\u505a\u6cd5\u90fd\u597d\u795e\uff0corz\u3002\n\n\u5148\u5047\u8bbe\u6240\u6709\u70b9\u90fd\u662f\u84dd\u7684\u3002\n\n\u8003\u8651~~\u4e71\u641e~~\u7f51\u7edc\u6d41\uff0c\u628a\u884c\u5217\u5f53\u4f5c\u70b9\uff0c\u7b2c $x$ \u884c\u6807\u53f7 $x$\uff0c\u7b2c $y$ \u884c\u6807\u53f7 $y + 2\\times 10^5$\u3002\n\n\u5bf9\u4e8e\u70b9 $(x,y)$\uff0c\u8fde\u8fb9 $x\\to y+2\\times 10^5$\uff0c\u4e0b\u754c\u4e3a $0$\uff0c\u4e0a\u754c\u4e3a $1$\uff0c\u82e5\u8fd9\u6761\u8fb9\u6709\u6d41\u91cf\u5219\u5b9a\u4e49\u8fd9\u4e2a\u70b9\u88ab\u67d3\u7ea2\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u884c\uff0c\u5982\u679c\u5b83\u4e0a\u9762\u6709 $p$ \u4e2a\u70b9\uff0c\u90a3\u4e48\u5b83\u4e0a\u9762\u7684\u7ea2\u70b9\u6570\u53ea\u80fd\u4e3a $\\left\\lfloor\\dfrac n2\\right\\rfloor,\\left\\lceil\\dfrac n2\\right\\rceil$\uff0c\u6240\u4ee5\u5efa\u4e00\u6761\u6e90\u70b9\u5230\u8fd9\u4e00\u884c\u7684\uff0c\u4e0b\u754c\u4e3a $\\left\\lfloor\\dfrac n2\\right\\rfloor$\uff0c\u4e0a\u754c\u4e3a $\\left\\lceil\\dfrac n2\\right\\rceil$ \u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u5217\u540c\u7406\u8fde\u5411\u6c47\u70b9\u3002\n\n\u5927\u529b\u8dd1\u6709\u6e90\u6c47\u4e0a\u4e0b\u754c\u53ef\u884c\u6d41\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O($\u80fd\u8fc7$)$.\n\n```cpp\nconst int kM = 2e6 + 5, kN = 4e5 + 15, kX = 2e5 + 5, kInf = 0x3f3f3f3f;\n\nnamespace Net {\n\n\tstruct Edge {\n\t\tint v, nxt, c, idx;\n\t} E[kM];\n\tint head[kN], w[kN], S, T, s, t, cnt;\n\tvoid Init(int ns, int nt) {\n\t\tmemset(head, 0xff, sizeof(head));\n\t\ts = ns; t = nt; cnt = 0;\n\t}\n\tvoid TAdd(int u, int v, int c, int idx) {\n\t\tE[cnt] = (Edge) { v, head[u], c, idx }; head[u] = cnt++;\n\t\tE[cnt] = (Edge) { u, head[v], 0, idx }; head[v] = cnt++;\n\t}\n\tvoid Add(int u, int v, int low, int upp, int idx = 0) {\n\t\tif(low != upp) TAdd(u, v, upp - low, idx);\n\t\tw[u] -= low; w[v] += low;\n\t}\n\tint tot = 0;\n\tvoid Build() {\n\t\tAdd(t, s, 0, kInf);\n\t\tS = t + 1; T = t + 2;\n\t\tfor(int i = 1; i <= t; ++i) {\n\t\t\tif(w[i] > 0) TAdd(S, i, w[i], 0), tot += w[i];\n\t\t\tif(w[i] < 0) TAdd(i, T, -w[i], 0);\n\t\t}\n\t}\n\tint lev[kN], cur[kN];\n\tstd::queue <int> que;\n\tint GetLev(int ss, int tt) {\n\t\tmemcpy(cur, head, sizeof(cur));\n\t\tmemset(lev, 0, sizeof(lev));\n\t\tlev[ss] = 1; que.push(ss);\n\t\twhile(!que.empty()) {\n\t\t\tint u = que.front(); que.pop();\n\t\t\tfor(int i = head[u]; ~i; i = E[i].nxt) {\n\t\t\t\tint c = E[i].c, v = E[i].v;\n\t\t\t\tif(c && !lev[v]) {\n\t\t\t\t\tlev[v] = lev[u] + 1;\n\t\t\t\t\tque.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn lev[tt];\n\t}\n\tint Incr(int u, int res_f, int tt) {\n\t\tif(u == tt) return res_f;\n\t\tint ret = 0, dlt;\n\t\tfor(int &i = cur[u]; ~i; i = E[i].nxt) {\n\t\t\tint c = E[i].c, v = E[i].v;\n\t\t\tif(c && lev[v] > lev[u] && (dlt = Incr(v, std::min(res_f, c), tt))) {\n\t\t\t\tE[i].c -= dlt; E[i ^ 1].c += dlt;\n\t\t\t\tret += dlt; res_f -= dlt;\n\t\t\t\tif(!res_f) break;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tint Dinic(int ss, int tt) {\n\t\tint max_f = 0;\n\t\twhile(GetLev(ss, tt)) {\n\t\t\tmax_f += Incr(ss, kInf, tt);\n\t\t}\n\t\treturn max_f;\n\t}\n\tint col[kN];\n\tvoid Construct() {\n\t\tfor(int i = 1; i <= kX; ++i) {\n\t\t\tfor(int j = head[i]; ~j; j = E[j].nxt) {\n\t\t\t\tint v = E[j].v, idx = E[j].idx;\n\t\t\t\tif(idx) col[idx] = E[j].c;\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nint n, p[kN];\nint main() { \n\tint T = 1; //rd(T);\n\twhile(T--) {\n\t\trd(n); Net::Init(kX * 2, kX * 2 + 1);\n\t\tfor(int i = 1; i <= n; ++i) {\n\t\t\tint x, y; rd(x, y);\n\t\t\tNet::Add(x, y + kX, 0, 1, i);\n\t\t\t++p[y + kX]; ++p[x];\n\t\t}\n\t\tfor(int i = 1; i <= kX; ++i) {\n\t\t\tif(p[i] > 0) Net::Add(Net::s, i, p[i] / 2, (p[i] + 1) / 2);\n\t\t\tif(p[i + kX] > 0) Net::Add(i + kX, Net::t, p[i + kX] / 2, (p[i + kX] + 1) / 2);\n\t\t}\n\t\tNet::Build();\n\t\tNet::Dinic(Net::S, Net::T);\n\t\tNet::Construct();\n\t\tfor(int i = 1; i <= n; ++i) {\n\t\t\tprintf(\"%c\", Net::col[i] ? 'b' : 'r');\n\t\t}\n\t\tprintf(\"\\n\");\n\t} return 0;\n}\n```",
        "postTime": 1609921678,
        "uid": 34238,
        "name": "zhylj",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF547D \u3010Mike and Fish\u3011"
    },
    {
        "content": "> [CF547D Mike and Fish](https://codeforc.es/contest/547/problem/D)\n\n## \u9898\u610f\n\n- \u7ed9\u5b9a $n$ \u4e2a\u6574\u70b9\u3002\n- \u4f60\u8981\u7ed9\u6bcf\u4e2a\u70b9\u67d3\u6210\u7ea2\u8272\u6216\u84dd\u8272\u3002\n- \u8981\u6c42\u540c\u4e00\u6c34\u5e73\u7ebf\u6216\u5782\u76f4\u7ebf\u4e0a\u4e24\u79cd\u989c\u8272\u7684\u6570\u91cf\u6700\u591a\u76f8\u5dee $1$\u3002\n- $n,x_i, y_i \\le 2 \\times 10^5$\u3002\n\n## \u9898\u89e3\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5c06\u6a2a\u7eb5\u5750\u6807\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\u3002\n\n\u90a3\u4e48\u9898\u610f\u8f6c\u5316\u4e3a\u5bf9\u6bcf\u6761\u8fb9\u5b9a\u5411\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u548c\u51fa\u5ea6\u6700\u591a\u76f8\u5dee $1$\u3002\n\n\u7531\u4e8e\u5947\u70b9\u4e00\u5b9a\u53ea\u6709\u5076\u6570\u4e2a\uff0c\u4e0d\u59a8\u5c06\u5176\u5168\u90fd\u8fde\u5411 $0$\u3002\n\n\u7136\u540e\u8dd1\u4e00\u904d\u6b27\u62c9\u56de\u8def\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n)$\u3002\n\n## \u4ee3\u7801\n\n```cpp\nconst int N = 2e5 + 7;\nint n, v[N<<1], d[N<<1], h[N<<1], e[N<<2], t[N<<2], c = 1;\n\ninline void add(int x, int y, int z = 1) {\n\te[++c] = y, t[c] = h[x], h[x] = c;\n\tif (z) add(y, x, 0);\n}\n\nvoid dfs(int x) {\n\tfor (int &i = h[x]; i; i = t[i])\n\t\tif (!v[i>>1]) v[i>>1] = 1 + (x < N), dfs(e[i]);\n}\n\nint main() {\n\trd(n);\n\tfor (int i = 1, x, y; i <= n; i++)\n\t\trd(x), rd(y), add(x, y + N), ++d[x], ++d[y+N];\n\tfor (int i = 1; i < N << 1; i++)\n\t\tif (d[i] & 1) add(0, i);\n\tfor (int i = 1; i < N; i++) dfs(i);\n\tfor (int i = 1; i <= n; i++) putchar(\"br\"[v[i]-1]);\n\treturn 0;\n}\n```",
        "postTime": 1575733709,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF547D \u3010Mike and Fish\u3011"
    },
    {
        "content": "\u5b89\u5229\u4e2a\u4eba blog\uff1ahttps://www.cnblogs.com/ET2006/\n\n[Codeforces \u9898\u76ee\u4f20\u9001\u95e8](https://codeforces.com/contest/547/problem/D) & [\u6d1b\u8c37\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF547D)\n\n\u9996\u5148\u8003\u8651\u5c06\u9898\u76ee\u4e2d\u7684\u6761\u4ef6\u8f6c\u5316\u4e3a\u56fe\u8bba\u7684\u8bed\u8a00\u3002\u770b\u5230\u201c\u884c\u201d\u201c\u5217\u201d\uff0c\u6211\u4eec\u5f88\u81ea\u7136\u5730\u60f3\u5230\u4e8c\u5206\u56fe\u4e2d\u884c\u3001\u5217\u8f6c\u70b9\uff0c\u70b9\u8f6c\u8fb9\u7684\u5957\u8def\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u884c $x$ \u65b0\u5efa\u4e00\u4e2a\u70b9 $R(x)$\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5217 $x$ \u4e5f\u65b0\u5efa\u4e00\u4e2a\u70b9 $C(y)$\u3002\u8003\u8651\u5bf9\u4e8e\u70b9 $(x_i,y_i)$\uff0c\u82e5\u5176\u88ab\u67d3\u4e0a\u7ea2\u8272\uff0c\u5c31\u8fde\u8fb9 $R(x_i)\\to C(y_i)$\uff0c\u5426\u5219\u8fde\u8fb9 $C(y_i)\\to R(x_i)$\u3002\u90a3\u4e48\u663e\u7136\u5bf9\u4e8e\u6bcf\u4e00\u884c\u800c\u8a00\uff0c\u5176\u7ea2\u8272\u683c\u5b50\u7684\u4e2a\u6570\u5c31\u662f\u8be5\u884c\u6240\u5bf9\u5e94\u7684\u70b9\u7684**\u51fa\u5ea6**\uff0c\u5176\u84dd\u8272\u683c\u5b50\u7684\u4e2a\u6570\u5c31\u662f\u8be5\u884c\u6240\u5bf9\u5e94\u7684\u70b9\u7684**\u5165\u5ea6**\uff1b\u5bf9\u4e8e\u6bcf\u4e00\u5217\u800c\u8a00\uff0c\u5176\u7ea2\u8272\u683c\u5b50\u7684\u4e2a\u6570\u5c31\u662f\u8be5\u884c\u6240\u5bf9\u5e94\u7684\u70b9\u7684\u5165\u5ea6\uff0c\u5176\u84dd\u8272\u683c\u5b50\u7684\u4e2a\u6570\u5c31\u662f\u8be5\u884c\u6240\u5bf9\u5e94\u7684\u70b9\u7684\u51fa\u5ea6\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u5c06\u9898\u76ee\u8f6c\u5316\u4e3a\uff1a\u7ed9\u5b9a\u4e00\u5f20\u4e8c\u5206\u56fe\uff0c\u8981\u6c42\u7ed9\u6bcf\u6761\u8fb9\u5b9a\u5411\uff0c\u4f7f\u6bcf\u4e2a\u70b9\u5165\u5ea6\u4e0e\u51fa\u5ea6\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 $1$\u3002\n\n\u6211\u4eec\u4e0d\u59a8\u5148\u8003\u8651\u539f\u9898\u7684\u4e00\u4e2a\u5f31\u5316\u7248\u672c\u3002\u5047\u8bbe\u539f\u56fe\u4e2d\u6240\u6709\u70b9\u5ea6\u6570\u90fd\u662f\u5076\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u7b49\u4e8e\u51fa\u5ea6\u3002\u8fd9\u663e\u7136\u53ef\u4ee5\u7528\u6b27\u62c9\u56de\u8def\u89e3\u51b3\uff0c\u7531\u4e8e\u6bcf\u4e2a\u70b9\u5ea6\u6570\u90fd\u662f\u5076\u6570\uff0c\u56e0\u6b64\u56fe\u7684\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u5bfc\u51fa\u5b50\u56fe\u90fd\u5b58\u5728\u6b27\u62c9\u56de\u8def\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\u8dd1\u4e00\u904d\u6b27\u62c9\u56de\u8def\uff0c\u5047\u8bbe\u4e3a $v_1\\to v_2\\to v_3\\to\\dots\\to v_k\\to v_1$\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u5bf9\u4e8e $\\forall i\\in [1,k]$ \u5c06 $v_i$ \u4e0e $v_{i+1}$ \u4e4b\u95f4\u7684\u8fb9\u5b9a\u5411\u4e3a $v_i\\to v_{i+1}$ \u5373\u53ef\uff0c\u56e0\u4e3a $\\forall i\\in [1,k]$\uff0c\u663e\u7136 $v_{i-1}\\to v_i$ \u7684\u8fb9\u4f1a\u4e3a $v_i$ \u7684\u5165\u5ea6\u4ea7\u751f $1$ \u7684\u8d21\u732e\uff0c$v_{i}\\to v_{i+1}$ \u7684\u8fb9\u4f1a\u4e3a $v_i$ \u7684\u51fa\u5ea6\u4ea7\u751f $1$ \u7684\u8d21\u732e\uff0c\u56e0\u6b64 $v_i$ \u7684\u5165\u5ea6\u6c38\u8fdc\u7b49\u4e8e\u51fa\u5ea6\uff0c\u7b26\u5408\u9898\u76ee\u8981\u6c42\u3002\n\n\u6700\u540e\u8003\u8651\u539f\u9898\uff0c\u672c\u9898\u4e00\u4e2a\u5de7\u5999\u4e4b\u5904\u5c31\u5728\u4e8e\u5947\u70b9\u600e\u4e48\u5904\u7406\u3002\u663e\u7136\u5bf9\u4e8e\u4e00\u4e2a\u5947\u70b9\u800c\u8a00\uff0c\u6211\u4eec\u8981\u6c42\u5b83\u7684\u51fa\u5ea6\u4e0e\u5165\u5ea6\u4e4b\u5dee\u4e3a $\\pm 1$\uff0c\u800c\u6211\u4eec\u5e0c\u671b\u5b83\u7684\u51fa\u5ea6\u4e0e\u5165\u5ea6\u4e4b\u5dee\u4e3a $0$\uff0c\u8fd9\u6837\u5c31\u80fd\u5f52\u7ea6\u5230\u5f31\u5316\u7248\u4e86\u3002\u56e0\u6b64\u6211\u4eec\u8003\u8651\u5efa\u7acb\u4e00\u4e2a\u865a\u70b9\uff0c\u5c06\u6240\u6709\u5947\u70b9\u4e0e\u8be5\u865a\u70b9\u4e4b\u95f4\u8fde\u8fb9\uff0c\u663e\u7136\u5bf9\u4e8e\u539f\u56fe\u4e00\u4e2a\u5408\u6cd5\u7684\u5b9a\u5411\u65b9\u5f0f\uff0c\u6211\u4eec\u603b\u80fd\u63a7\u5236\u8fd9\u4e9b\u5947\u70b9\u4e0e\u865a\u70b9\u8fde\u8fb9\u7684\u65b9\u5411\u4f7f\u5f97\u6bcf\u4e2a\u5947\u70b9\u7684\u5165\u5ea6\u90fd\u7b49\u4e8e\u51fa\u5ea6\u3002\u53c8\u6839\u636e\u6709\u5411\u56fe $\\sum indeg_i=\\sum outdeg_i$ \u53ef\u77e5\u8be5\u865a\u70b9\u7684\u5165\u5ea6\u4e5f\u7b49\u4e8e\u51fa\u5ea6\uff0c\u6545\u6211\u4eec\u5728\u65b0\u56fe\u4e0a\u8dd1\u6b27\u62c9\u56de\u8def\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define fill0(a) memset(a,0,sizeof(a))\n#define fill1(a) memset(a,-1,sizeof(a))\n#define fillbig(a) memset(a,63,sizeof(a))\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\ntemplate<typename T1,typename T2> void chkmin(T1 &x,T2 y){if(x>y) x=y;}\ntemplate<typename T1,typename T2> void chkmax(T1 &x,T2 y){if(x<y) x=y;}\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntypedef unsigned int u32;\ntypedef unsigned long long u64;\nnamespace fastio{\n\t#define FILE_SIZE 1<<23\n\tchar rbuf[FILE_SIZE],*p1=rbuf,*p2=rbuf,wbuf[FILE_SIZE],*p3=wbuf;\n\tinline char getc(){return p1==p2&&(p2=(p1=rbuf)+fread(rbuf,1,FILE_SIZE,stdin),p1==p2)?-1:*p1++;}\n\tinline void putc(char x){(*p3++=x);}\n\ttemplate<typename T> void read(T &x){\n\t\tx=0;char c=getchar();T neg=0;\n\t\twhile(!isdigit(c)) neg|=!(c^'-'),c=getchar();\n\t\twhile(isdigit(c)) x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\t\tif(neg) x=(~x)+1;\n\t}\n\ttemplate<typename T> void recursive_print(T x){if(!x) return;recursive_print(x/10);putc(x%10^48);}\n\ttemplate<typename T> void print(T x){if(!x) putc('0');if(x<0) putc('-'),x=~x+1;recursive_print(x);}\n\tvoid print_final(){fwrite(wbuf,1,p3-wbuf,stdout);}\n}\nconst int DELTA=2e5+2;\nint n,deg[DELTA*2+5],hd[DELTA*2+5],to[DELTA*6+5],nxt[DELTA*6+5],ec=1;\nvoid adde(int u,int v){to[++ec]=v;nxt[ec]=hd[u];hd[u]=ec;}\nint vis[DELTA*3+5];\nvoid dfs(int x){\n\tfor(int &e=hd[x];e;e=nxt[e])\n\t\tif(!vis[e>>1]) vis[e>>1]=1+(x<=DELTA),dfs(to[e]);\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1,x,y;i<=n;i++){\n\t\tscanf(\"%d%d\",&x,&y);++deg[x];++deg[y+DELTA];\n\t\tadde(x,y+DELTA);adde(y+DELTA,x);\n\t}\n\tfor(int i=1;i<=DELTA*2;i++)\n\t\tif(deg[i]&1) adde(0,i),adde(i,0);\n\tfor(int i=1;i<=DELTA;i++) dfs(i);\n\tfor(int i=1;i<=n;i++) putchar((vis[i]==1)?'r':'b');\n\treturn 0;\n}\n```\n\n",
        "postTime": 1615699118,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF547D\u3010Mike and Fish\u3011"
    },
    {
        "content": "\u8003\u8651\u5c06\u6bcf\u4e2a\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\u770b\u4f5c\u70b9\uff0c\u5c06\u539f\u5148\u5728\u5750\u6807\u7cfb\u4e0a\u7684\u70b9\u770b\u4f5c\u8fb9\uff0c\u90a3\u4e48\u9898\u76ee\u7684\u8981\u6c42\u5373\u4e3a\u5c06\u65b0\u56fe\u4e2d\u7684\u6bcf\u6761\u8fb9\u5b9a\u5411\u540e\uff0c\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u51fa\u5ea6\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u5927\u4e8e $1$\u3002\n\n\u56e0\u4e3a\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u7684\u4e2a\u6570\u4e00\u5b9a\u4e3a\u5076\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u4e24\u4e24\u914d\u5bf9\uff0c\u5728\u4e24\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\u3002\u8fd9\u6837\u6bcf\u4e2a\u70b9\u5ea6\u6570\u5c31\u90fd\u4e3a\u5076\u6570\u4e86\uff0c\u7136\u540e\u53ef\u4ee5\u7528\u6b27\u62c9\u56de\u8def\u6765\u7ed9\u6bcf\u6761\u8fb9\u5b9a\u5411\u3002\u6bcf\u6761\u8fb9\u7684\u65b9\u5411\u5c31\u5bf9\u5e94\u7740\u539f\u5148\u5728\u5750\u6807\u7cfb\u4e0a\u7684\u70b9\u7684\u989c\u8272\u3002\n\n\u548c [Points and Segments](https://www.luogu.com.cn/problem/CF429E) \u5f88\u50cf\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 800010\n#define d 200010\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n,tot,las;\nint p[maxn],deg[maxn],bel[maxn];\nbool vis[maxn],tag[maxn],used[maxn];\nstruct edge\n{\n    int to,nxt;\n}e[maxn];\nint head[maxn],edge_cnt=1;\nvoid add(int from,int to)\n{\n    e[++edge_cnt]={to,head[from]},head[from]=edge_cnt;\n}\nvoid dfs(int x)\n{\n    tag[x]=true;\n    for(int &i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(vis[i]) continue;\n        used[i]=vis[i]=vis[i^1]=true,dfs(y);\n    }\n}\nint main()\n{\n    read(n);\n    for(int i=1;i<=n;++i)\n    {\n        int x,y;\n        read(x),read(y),y+=d;\n        add(x,y),bel[i]=edge_cnt^1,add(y,x);\n        deg[x]++,deg[y]++,p[++tot]=x,p[++tot]=y;\n    }\n    sort(p+1,p+tot+1),tot=unique(p+1,p+tot+1)-p-1;\n    for(int i=1;i<=tot;++i)\n    {\n        int x=p[i];\n        if(deg[x]&1)\n        {\n            if(las) add(las,x),add(x,las),las=0;\n            else las=x;\n        }\n    }\n    for(int i=1;i<=tot;++i)\n        if(!tag[p[i]])\n            dfs(p[i]);\n    for(int i=1;i<=n;++i) putchar(used[bel[i]]?'b':'r');\n    return 0;\n}\n```",
        "postTime": 1599568216,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF547D \u3010Mike and Fish\u3011"
    },
    {
        "content": "  \u8fd9\u662f\u4e00\u9053\u56fe\u8bba\u9898\u3002\n  \n  \u8003\u8651\u5c06\u6a2a\u7eb5\u5750\u6807\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\u3002\n  \n  \u5bb9\u6613\u53d1\u73b0\uff0c\u5982\u679c\u628a\u6bcf\u4e2a\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\u8fde\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u4e00\u4e2a\u4e8c\u5206\u56fe\uff08$x$\u5750\u6807\u548c$y$\u5750\u6807\uff09\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6bcf\u4e00\u6761\u8fb9\u5c31\u8868\u793a\u4e00\u4e2a\u70b9\u3002\u90a3\u4e48\u600e\u4e48\u5224\u65ad\u662f\u7ea2\u8fd8\u662f\u84dd\u5462\uff1f\n\n  \u5176\u5b9e\u4e0d\u96be\u3002\u65e2\u7136\u662f\u4e8c\u5206\u56fe\uff0c\u6211\u4eec\u5c31\u5bf9\u5b83\u8dd1\u4e00\u904d\u6b27\u62c9\u56de\u8def\u5b9a\u5411\uff0c\u5165\u8fb9\u4e3a\u84dd\uff0c\u51fa\u8fb9\u4e3a\u7ea2\u5373\u53ef\u3002\u56e0\u4e3a\u6bcf\u6761\u8fb9\u8fde\u63a5\u90fd\u662fx\u5750\u6807\u548cy\u5750\u6807\u4e4b\u95f4\u7684\uff0c\u6240\u4ee5\u5bf9\u8fb9\u5b9a\u5411\u5c31\u786e\u5b9a\u4e86\u4e00\u4e2a\u70b9\u7684\u989c\u8272\u3002\n  \n  \u4ee3\u7801\uff1a\n  ```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\nusing namespace std;  \nconst int MAXN=500010;  \n\nvector<int>p[MAXN];  \nint vis[MAXN],ans[MAXN][2];  \n\nvoid dfs(int x,int y)\n{  \n    if(vis[x])\n    \treturn;\n    else\n    \tvis[x]=y;\n    int sz=p[x].size();\n    for(int i=0;i<sz;i++)\n        dfs(p[x][i],1^y);\n}\nint main()\n{\n    int n,x,y;\n    scanf(\"%d\",&n);  \n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        if(ans[x][0])\n        {\n            p[i].push_back(ans[x][0]);\n            p[ans[x][0]].push_back(i);\n            ans[x][0]=0;\n        }\n        else\n            ans[x][0]=i;\n            \n        if(ans[y][1])\n        {\n            p[i].push_back(ans[y][1]);\n            p[ans[y][1]].push_back(i);\n            ans[y][1]=0;\n        }\n        else\n            ans[y][1]=i;\n    }  \n    for(int i=1;i<=n;i++)\n    {\n        dfs(i,0);\n        if(vis[i])\n            putchar('r'); \n        else\n            putchar('b');\n    }\n    return 0; \n}  \n```",
        "postTime": 1517565073,
        "uid": 23398,
        "name": "frankchenfu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF547D \u3010Mike and Fish\u3011"
    }
]