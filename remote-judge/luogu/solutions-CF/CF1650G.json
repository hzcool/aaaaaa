[
    {
        "content": "~~\u56fe\u8bba\u4e13\u9898\u672c\u6765\u6253\u7b97\u5148\u6311\u6700\u7b80\u5355\u7684\u505a\uff0c\u7ed3\u679c\u505a\u4e86\u4e24\u4e2a\u591a\u5c0f\u65f6\uff08~~\n\n\u9898\u610f\u5c31\u662f\u8ba9\u4f60\u627e\u4ece\u8d77\u70b9 $s$ \u5230\u7ec8\u70b9 $t$ \u7684\u6700\u77ed\u8def\u4ee5\u53ca\u6b21\u77ed\u8def\u4e2a\u6570\uff0c\u672c\u9898\u6b21\u77ed\u8def\u957f\u5ea6\u6307\u7684\u662f\u6700\u77ed\u8def\u957f\u5ea6 $+1$\u3002\n\n\u8003\u8651 $\\text{DP}$\u3002\n\n\u8bbe $dp_{u,0/1}$ \u4e3a\u5f53\u524d\u5230\u4e86\u70b9 $u$\uff0c$0/1$ \u662f\u4e0e $s$ \u5230 $u$ \u7684\u6700\u77ed\u8def\u957f\u5ea6\u76f8\u5dee $0/1$ \u7684\u8def\u5f84\u7684\u6761\u6570\u3002\n\n\u624b\u6a21\u51e0\u7ec4\u6837\u4f8b\u5bb9\u6613\u5f97\u51fa\u8f6c\u79fb\u65b9\u7a0b\u3002\u5148\u8dd1\u4e00\u904d $\\text{Dijkstra}$ \u7b97\u51fa $s$ \u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def $dis$\uff0c\u8bbe\u5f53\u524d\u70b9\u4e3a $u$\uff0c\u4e0b\u4e00\u4e2a\u70b9\u4e3a $v$\u3002\u5219\u6709\uff1a\n\n- \u82e5 $dis_v = dis_u$\uff0c\u5219\u8bf4\u660e $v$ \u7684\u6700\u77ed\u8def\u5e76\u975e $u$ \u7684\u6700\u77ed\u8def $+1$\uff0c\u800c\u662f $u$ \u7684\u6700\u77ed\u8def\u548c $v$ \u7684\u6700\u77ed\u8def\u5dee $1$\uff0c\u5219\u53ef $dp_{u, 0} \\to dp_{v, 1}$\u3002\n\n- \u82e5 $dis_v = dis_u + 1$\uff0c\u5219\u8bf4\u660e $v$ \u7684\u6700\u77ed\u8def\u662f\u53ef\u4ee5\u7531 $u$ \u8f6c\u79fb\u8fc7\u6765\u7684\u3002\u4e8e\u662fv\u7ee7\u627fu\u7684\u6240\u6709\u72b6\u6001\u3002\u5373\uff1a$dp_{u, 0} \\to dp_{v, 0}\\text{\uff0c}dp_{u, 1} \\to dp_{v, 1}$\u3002\n\n\u521d\u6001\u662f $dp_{s, 0} = 1$\uff0c\u56e0\u4e3a\u9898\u76ee\u95ee\u7684\u662f\u6700\u77ed\u8def\u4e0e\u6b21\u77ed\u8def\u4e2a\u6570\u4e4b\u548c\u6240\u4ee5\u672b\u6001\u4e3a $dp_{t, 0} + dp_{t, 1}$\u3002\n\n\u81f3\u6b64\u5c31\u53ef\u4ee5\u9ad8\u9ad8\u5174\u5174\u5199\u51fa\u4e00\u4e2a $\\text{dfs}$ \u4ee3\u7801\u4e86\u3002\n\n```cpp\nvoid dfs(int x) {\n\tif (x == hd)\n\t\treturn ;\n\tvis[x] = true;\n\tfor (re i = head[x] ; i ; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif (vis[v] == true)\n\t\t\tcontinue;\n\t\tif (dis[v] == dis[x])\n\t\t\tPlus(dp[v][1], dp[x][0]);\n\t\telse if (dis[v] == dis[x] + 1)\n\t\t\tPlus(dp[v][0], dp[x][0]), Plus(dp[v][1], dp[x][1]);\n\t\tdfs(v);\n\t}\n\tvis[x] = false;\n}\n```\n\n\u7136\u540e\u6d4b\u4e00\u4e0b\u524d\u4e09\u4e2a\u6837\u4f8b\uff0c\u54c7\uff0c\u90fd\u8fc7\u4e86\u3002\u4ee5\u4e3a\u8fd9\u9898\u5c31\u8981\u5207\u4e86\uff0c\u6d4b\u7b2c\u56db\u4e2a\u6837\u4f8b\u7ed3\u679c\u53d1\u73b0\u8f93\u51fa `1204`\u3002\n\n\u663e\u7136\u662f\u8f6c\u79fb\u591a\u4e86\u3002\u8003\u8651\u4e0b\u9762\u4e00\u5f20\u56fe\uff1a\n\n![image](https://cdn.luogu.com.cn/upload/image_hosting/ag23vczn.png)\n\n\u6309\u7167\u5199\u7684 $\\text{dfs}$ \u6a21\u4e00\u4e0b\u53d1\u73b0\u70b9 $4$ \u548c\u70b9 $3$ \u8f6c\u79fb\u5230\u70b9 $5$ \u7684\u65f6\u5019\u51fa\u73b0\u4e86\u95ee\u9898\uff1a\u8f6c\u79fb\u987a\u5e8f\u3002\n\n\u6bd4\u5982\u8f6c\u79fb\u987a\u5e8f\uff1a$2 \\to 4 \\to 5$\uff0c\u4f46\u662f\u8fd8\u6709 $2 \\to 3 \\to 4 \\to 5$\uff0c\u53d1\u73b0\u5728\u7b2c\u4e00\u904d\u8f6c\u79fb\u7684\u65f6\u5019\u5df2\u7ecf\u8f6c\u79fb\u7ed9\u4e86\u70b9 $5$\uff0c\u4f46\u662f\u7b2c\u4e8c\u6b21\u8f6c\u79fb\u7684\u65f6\u5019\u9664\u4e86\u628a\u65b0\u7684\u503c\u8f6c\u79fb\u7ed9\u4e86 $5$\uff0c\u8fd8\u628a\u4ee5\u524d\u7684\u503c\u53c8\u8f6c\u79fb\u4e86\u4e00\u904d\u3002\u6240\u4ee5\u5c31\u8f6c\u79fb\u591a\u4e86\u3002\n\n\u8003\u8651\u5982\u4f55\u89e3\u51b3\u3002\u65e2\u7136\u4f60\u662f\u91cd\u590d\u8f6c\u79fb\u4e86\u524d\u4e00\u6b21\u7684\uff0c\u90a3\u6211\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u8f6c\u79fb\u8fc7\u4e86\u4e4b\u540e\u628a\u4ed6\u7684 $\\text{dp}$ \u503c\u6e05\u7a7a\uff0c\u4e0b\u4e00\u6b21\u518d\u6765\u5230\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a\u91cd\u590d\u8f6c\u79fb\u4e0a\u4e00\u6b21\u7684\u503c\u4e86\u3002\n\n```cpp\nvoid dfs(int x) {\n\tif (x == hd)\n\t\treturn ;\n\tvis[x] = true;\n\tfor (re i = head[x] ; i ; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif (vis[v] == true)\n\t\t\tcontinue;\n\t\tif (dis[v] == dis[x])\n\t\t\tPlus(dp[v][1], dp[x][0]);\n\t\telse if (dis[v] == dis[x] + 1)\n\t\t\tPlus(dp[v][0], dp[x][0]), Plus(dp[v][1], dp[x][1]);\n\t\tdfs(v);\n\t}\n\tdp[x][0] = dp[x][1] = 0;// \u591a\u52a0\u4e86\u8fd9\u4e00\u53e5\n\tvis[x] = false;\n}\n```\n\n\u4ea4\u4e0a\u53bb\u4f1a\u53d1\u73b0 `TLE on test #3`\uff0c\u6211\u4e0d\u592a\u6e05\u695a $\\text{dfs}$ \u5e38\u6570\u5927\u8fd8\u662f\u548b\u5730\uff0c\u5361\u4e86\u534a\u5929\u5e38\u4e5f\u8fc7\u4e0d\u53bb\uff08\n\n> $\\text{Update}$\uff1a\u52a0\u4e2a\u8bb0\u641c\u5927\u6982\u80fd\u8fc7\uff0c$\\text{dfs}$ \u6162\u662f\u56e0\u4e3a\u6709\u91cd\u590d\u7684\u8f6c\u79fb\uff0c\u65c1\u8fb9\u7684\u5927\u4f6c\u8bf4\u9020\u4e2a\u5b8c\u5168\u56fe\u53ef\u4ee5\u5361\u5230\u6307\u6570\u7ea7\u522b\uff08\u3002\n\n\u8003\u8651\u6362\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\u3002\u53d1\u73b0\u91cd\u590d\u8f6c\u79fb\u7684\u5b9e\u8d28\u5c31\u662f\u62ff\u8fd8\u6ca1\u8f6c\u79fb\u5b8c\u6bd5\u7684\u53bb\u66f4\u65b0\u5176\u4ed6\u7684\u4e86\uff0c\u4e8e\u662f\u8003\u8651\u5982\u4f55\u8ba9\u4ed6\u8f6c\u79fb\u5b8c\u6bd5\u518d\u53bb\u66f4\u65b0\u3002\n\n\u6ce8\u610f\u5230\u70b9 $u$ \u6240\u6709\u7684\u8f6c\u79fb\u90fd\u662f\u5bf9\u4e8e $dis_v = dis_u$ \u6216 $dis_v = dis_u + 1$ \u7684 $v$ \u53bb\u8f6c\u79fb\uff0c\u8fd9\u542f\u793a\u6211\u4eec\u6309\u7167 $dis$ \u5bf9\u539f\u56fe\u8fdb\u884c\u5206\u5c42\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $u$ \u5148\u5bf9\u4e8e\u540c\u5c42\u4e5f\u5c31\u662f $dis_v = dis_u$ \u7684\u70b9 $v$ \u8fdb\u884c\u8f6c\u79fb\uff0c\u5168\u90e8\u8f6c\u79fb\u5b8c\u6bd5\u540e\u518d\u53bb\u8f6c\u79fb $dis_v = dis_u + 1$ \u7684\u70b9 $v$ \u5373\u53ef\u3002\n\n$\\text{DP}$ \u8f6c\u79fb\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O(n)$ \u7684\uff0c\u6700\u77ed\u8def\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O(n \\log n)$ \u7684\uff0c\u4e8e\u662f\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(n \\log n)$\u3002\n\n```cpp\n#pragma GCC optimize(2)\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#include <vector>\n#define GMY (520 & 1314)\n#define char_phi int\n#define re register int\n#define FBI_OPENTHEDOOR(x, y) freopen(#x \".in\", \"r\", stdin), freopen(#y \".out\", \"w\", stdout)\n#define N 2000005\n#define M 2000005\n#define P 1000000007\nusing namespace std;\ninline void Fastio_setup() { ios :: sync_with_stdio(false); cin.tie(NULL), cout.tie(NULL); }\ninline int MAX(int x, int y) { return ((x > y) ? (x) : (y)); }\ninline int MIN(int x, int y) { return ((x < y) ? (x) : (y)); }\n \nint n, m, star_cnt, yd, hd;\nchar vis[N];\nint head[N], q[M<<3], dis[N];\nint dp[N][2];\n \nstruct star { int v, nxt; };\nstruct Node {\n\tint x, d;\n\t\n\tfriend bool operator < (Node A, Node B) { return A.d > B.d; }\n};\n \nstruct star e[M<<1];\n \npriority_queue<Node> heap;\nvector<int> vec[N];\n \ninline void star_add(int u, int v) { e[++ star_cnt].v=v, e[star_cnt].nxt=head[u], head[u]=star_cnt; }\ninline void Clean() {\n\tstar_cnt = 0; vec[0].clear();\n\tfor (re i = 1 ; i <= n ; ++ i) {\n\t\thead[i] = dp[i][0] = dp[i][1] = 0;\n\t\tvec[i].clear();\n\t}\n}\n \ninline void Dijkstra() {\n\tint x = yd; for (re i = 1 ; i <= n ; ++ i) dis[i] = 0x3f3f3f3f, vis[i] = false;\n\theap.push( (Node) {x, 0} ); dis[x] = 0;\n\twhile (heap.empty() == false) {\n\t\tx = heap.top().x; heap.pop();\n\t\tif (vis[x] == true)\n\t\t\tcontinue;\n\t\tvis[x] = true;\n\t\tfor (re i = head[x] ; i ; i = e[i].nxt) {\n\t\t\tint v = e[i].v;\n\t\t\tif (dis[v] > dis[x] + 1) {\n\t\t\t\tdis[v] = dis[x] + 1;\n\t\t\t\tif (vis[v] == false)\n\t\t\t\t\theap.push( (Node) { v, dis[v] } );\n\t\t\t}\n\t\t}\n\t}\n}\ninline void Plus(int& who, int val) { who += val; if (who >= P) who -= P; }\n \ninline void Search() {// \u5148\u66f4\u65b00\u518d\u66f4\u65b01\n\tfor (re i = 1 ; i <= n ; ++ i) {\n\t\tvis[i] = false;\n\t\tvec[dis[i]].emplace_back(i);\n\t}\n\t\n\tdp[yd][0] = 1;\n\tfor (re dep = 0 ; dep <= n ; ++ dep) {\n\t\tfor (auto x : vec[dep])\n\t\t\tfor (re i = head[x] ; i ; i = e[i].nxt) {// \u5148\u8f6c\u79fb\u540c\u5c42\u7684\n\t\t\t\tint v = e[i].v;\n\t\t\t\tif (dis[v] == dep)\n\t\t\t\t\tPlus(dp[v][1], dp[x][0]);\n\t\t\t}\n\t\tfor (auto x : vec[dep])\n\t\t\tfor (re i = head[x] ; i ; i = e[i].nxt) {// \u518d\u8f6c\u79fb\u5176\u4ed6\u5c42\u7684\n\t\t\t\tint v = e[i].v;\n\t\t\t\tif (dis[v] == dep + 1)\n\t\t\t\t\tPlus(dp[v][0], dp[x][0]), Plus(dp[v][1], dp[x][1]);\n\t\t\t}\n\t}\n}\n\n\ninline void work() {\n\tClean();\n\tcin >> n >> m; cin >> yd >> hd;\n\tfor (re i = 1, uu, vv ; i <= m ; ++ i)\n\t\t{cin >> uu >> vv; star_add(uu, vv), star_add(vv, uu);}\n\t\n\tDijkstra();\n\tSearch();// \u4e5f\u8bb8\u7b97\u662fbfs\u7f62\n\t\n\tcout << (dp[hd][0] + dp[hd][1]) % P << '\\n';\n}\n \n#undef int\n// #define IXINGMY\nchar_phi main() {\n\t#ifdef IXINGMY\n\t\tFBI_OPENTHEDOOR(a, a);\n\t#endif\n\tFastio_setup();\n\tint T; cin >> T;\n\twhile (T --)\n\t\twork();\n\treturn GMY;\n}\n```\n\n> $\\text{Hint}$\uff1a\u53c2\u8003\u4e86[ $\\text{Jerry-Black}$ \u5927\u4f6c](https://www.cnblogs.com/Jerry-Black/p/16008034.html)\u7684\u601d\u8def\u3002",
        "postTime": 1668394584,
        "uid": 652982,
        "name": "char_phi",
        "ccfLevel": 4,
        "title": "CF1650G \u300eCounting Shortcuts\u300f \u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u5148\u5bf9\u56fe\u4e0a\u70b9\u8fdb\u884c\u5206\u5c42\u3002\u8bbe $d(s,i)$ \u8868\u793a\u4ece $s$ \u70b9\u5230 $i$ \u70b9\u7684\u8ddd\u79bb\u3002\n\n\u5206\u5c42\u4e4b\u540e\uff0c\u5bb9\u6613\u53d1\u73b0\uff0c\u56fe\u4e0a\u7684\u8fb9\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\u3002\n\n1. \u5c42\u95f4\u8fb9\u3002\u8be5\u8fb9\u8fde\u63a5\u7684\u4e24\u70b9\u7684\u5c42\u6570\u5dee 1\u3002\n2. \u5c42\u5185\u8fb9\u3002\u8be5\u8fb9\u8fde\u63a5\u7684\u4e24\u70b9\u5c42\u6570\u76f8\u540c\u3002\n\n\u6700\u77ed\u8def\u7684\u6570\u91cf\u5728\u5206\u5c42\u65f6\u53ef\u4ee5\u987a\u5e26\u7b97\u51fa\u3002\u73b0\u5728\u601d\u8003\u5982\u4f55\u7b97\u51fa\u6bd4\u6700\u77ed\u8def\u957f\u5ea6\u6070\u597d\u591a 1 \u7684\u8def\u5f84\u6570\u91cf\u3002\n\n\u6ce8\u610f\u5230\uff0c\u6bcf\u8d70\u4e00\u6b21\u5c42\u5185\u8fb9\uff0c\u5230\u7ec8\u70b9\u7684\u603b\u8ddd\u79bb\u81f3\u5c11\u589e\u52a0 1\uff1b\u800c\u6bcf\u8d70\u4e00\u6b21\u6df1\u5ea6\u51cf\u5c0f\u7684\u5c42\u95f4\u8fb9\uff0c\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\u81f3\u5c11\u589e\u52a0 2\u3002\u53e6\u5916\u7531\u4e8e BFS \u7684\u6027\u8d28\uff0c\u5982\u679c\u53ea\u8d70\u5c42\u95f4\u8fb9\uff0c\u4e14\u4e00\u76f4\u671d\u7740\u6df1\u5ea6\u589e\u5927\u7684\u65b9\u5411\uff0c\u8def\u5f84\u4e00\u5b9a\u4e0e\u6700\u77ed\u8def\u76f8\u7b49\u3002\n\n\u4ece\u800c\u5f97\u51fa\u7ed3\u8bba\uff1a\u4e00\u6761\u6bd4\u6700\u77ed\u8def\u957f\u5ea6\u6070\u597d\u591a 1 \u7684\u8def\u5f84\uff0c\u4e00\u5b9a\u7ecf\u8fc7\u6070\u597d\u4e00\u6761\u5c42\u5185\u8fb9\u3002\n\n\uff08\u8fd9\u4e2a\u7ed3\u8bba\u540c\u65f6\u544a\u8bc9\u6211\u4eec\uff1a\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u5f84\u4e00\u5b9a\u662f\u7b80\u5355\u8def\u5f84\u3002\u56e0\u4e3a\u975e\u7b80\u5355\u8def\u5f84\u4e00\u5b9a\u4f1a\u8d70\u81f3\u5c11\u4e00\u6761\u6df1\u5ea6\u51cf\u5c0f\u7684\u5c42\u95f4\u8fb9\u3002\uff09\n\n\u8003\u8651\u679a\u4e3e\u5c42\u5185\u8fb9 $(u,v)$\uff0c\u5982\u679c $d(s,u) + 1 + d(v,t) = d(s,t) + 1$\uff0c\u5219\u8be5\u8def\u5f84\u5373\u4e3a\u6240\u6c42\u8def\u5f84\u3002\n\n$d(s,u)$ \u53ef\u4ee5\u901a\u8fc7\u4ece $s$ \u70b9\u51fa\u53d1\u7684 BFS \u6c42\u51fa\uff0c$d(v,t)$ \u53ef\u4ee5\u901a\u8fc7\u4ece $t$ \u70b9\u51fa\u53d1\u7684 BFS \u6c42\u51fa\uff0c\u5728 BFS \u7684\u540c\u65f6\u987a\u5e26\u6c42\u51fa $s$ \u70b9\u5230\u5404\u70b9\uff0c\u5404\u70b9\u5230 $t$ \u70b9\u7684\u6700\u77ed\u8def\u5f84\u6570\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u5c42\u5185\u8fb9\uff0c\u5229\u7528\u4e58\u6cd5\u539f\u7406\u5373\u53ef\u6c42\u51fa\u7ecf\u8fc7\u8be5\u5c42\u5185\u8fb9\uff0c\u4e14\u8def\u5f84\u957f\u5ea6\u6ee1\u8db3\u6761\u4ef6\u7684\u603b\u8def\u5f84\u6570\u91cf\u3002\n\n```cpp\n// Problem: G. Counting Shortcuts\n// Contest: Codeforces - Codeforces Round #776 (Div. 3)\n// URL: https://codeforces.com/contest/1650/problem/G\n// Memory Limit: 256 MB\n// Time Limit: 2000 ms\n//\n// Powered by CP Editor (https://cpeditor.org)\n\n#include <algorithm>\n#include <cstring>\n#include <iostream>\n#include <queue>\nusing namespace std;\ntypedef pair<int, int> pii;\nconst int mod = 1000000007;\nvector<int> e[200005];\npii ed[200005];\nint dis1[200005], dis2[200005];\nint f1[200005], f2[200005];\nint n, m, s, t;\nvoid bfs(int s, int* dis, int* f) {\n  queue<int> q;\n  memset(dis, -1, sizeof(int) * (n + 1));\n  memset(f, 0, sizeof(int) * (n + 1));\n  dis[s] = 0, f[s] = 1;\n  q.push(s);\n  while (!q.empty()) {\n    int u = q.front();\n    q.pop();\n    for (auto v : e[u])\n      if (dis[v] == -1) {\n        dis[v] = dis[u] + 1;\n        f[v] = f[u];\n        q.push(v);\n      } else if (dis[v] == dis[u] + 1)\n        f[v] = (f[v] + f[u]) % mod;\n  }\n}\nint main() {\n  int T;\n  cin >> T;\n  while (T--) {\n    cin >> n >> m;\n    cin >> s >> t;\n    for (int i = 1; i <= n; i++) e[i].clear();\n    for (int i = 1; i <= m; i++) {\n      int u, v;\n      cin >> u >> v;\n      ed[i] = make_pair(u, v);\n      e[u].push_back(v);\n      e[v].push_back(u);\n    }\n    bfs(s, dis1, f1);\n    bfs(t, dis2, f2);\n    long long ans = f1[t];\n    for (int i = 1; i <= m; i++) {\n      int u = ed[i].first, v = ed[i].second;\n      if (dis1[u] == dis1[v]) {\n        if (dis1[u] + dis2[v] == dis1[t])\n          ans = (ans + 1ll * f1[u] * f2[v]) % mod;\n        if (dis1[v] + dis2[u] == dis1[t])\n          ans = (ans + 1ll * f1[v] * f2[u]) % mod;\n      }\n    }\n    cout << ans << endl;\n  }\n  return 0;\n}\n```",
        "postTime": 1646875381,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1650G \u3010Counting Shortcuts\u3011"
    },
    {
        "content": " -  \u9898\u610f : \u975e\u7b80\u5355\u6b21\u77ed\u8def\u8ba1\u6570\n \n -  TIP : \u6a21\u677f\u9898\n \n -  \u524d\u7f6e\u77e5\u8bc6\uff1aDijkstra\n \n -  \u601d\u8def : \u5bfb\u627e\u4e0e\u6700\u77ed\u8def\u957f\u5ea6\u76f8\u5dee\u4e0d\u8d85\u8fc7 $1$ \u7684\u8def\u5f84\u6570\uff0c\u800c\u9898\u76ee\u53c8\u662f\u65e0\u8fb9\u6743\uff0c\u5373\u53ef\u5f97\u5230 **\u201c\u5bfb\u627e\u6b21\u77ed\u8def\u5f84\u6570\u201d** \u7684\u9898\u610f\u3002\u5bf9\u4e8e\u6700\u77ed\u8def\uff0c\u8003\u8651 Dijkstra \u7b97\u6cd5\uff0c\u6709\u6700\u77ed\u8def\u66f4\u65b0\u6700\u77ed\u8def\uff0c\u66f4\u65b0\u5219\u8bb0\u5f55\u539f\u6700\u77ed\u8def\u4e3a\u6b21\u77ed\u8def\u3002\u5bf9\u4e8e\u6bcf\u6761\u8def\u5f84\uff0c\u5224\u65ad\u957f\u5ea6\u662f\u5426\u7b49\u4e8e\u6b21\u77ed\u8def\uff0c\u7b49\u4e8e\u4fbf\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n \n - \u8be6\u60c5\u53ef\u89c1\u4ee3\u7801\u6ce8\u91ca\u3002\n \n - \u7279\u522b\u611f\u8c22 @cmll02 \u5927\u4f6c\u5e2e\u5fd9\u8c03\u9519\n \n```cpp\n#pragma once\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#include <bits/stdc++.h>\n#include <bits/extc++.h>\n\n#define int LL \n\nusing namespace std;\nusing namespace __gnu_pbds;\n\ntypedef long long LL;\nconst int maxn = 2e5 + 5;//\u9876\u70b9\u6570\nconst int maxm = 4e5 + 5;//\u8fb9\u6570\nconst LL inf = 0x3f3f3f3f3f3f3f3f;\nconst LL mo=1000000007;\n\n__gnu_pbds::tree <LL,null_type,less<LL>,rb_tree_tag,tree_order_statistics_node_update> TREE ;\n\nstruct Dijstra{\n    mutable int n, m;//d2[t] < inf\u4ee3\u8868\u6709\u89e3\n    mutable int d[2][maxn];//d[0]\u8bb0\u5f55\u6700\u77ed\u8def\uff0cd[1]\u8bb0\u5f55\u6b21\u77ed\u8def\n    mutable int cnt[2][maxn];//cnt[0]\u8bb0\u5f55\u6700\u77ed\u8def\u6761\u6570\uff0ccnt[1]\u8bb0\u5f55\u6b21\u77ed\u8def\u5f84\u6761\u6570\n    mutable int head[maxn];\n\t//int par[maxn]; //\u8bb0\u5f55\u8def\u5f84\n    struct Edge{\n        mutable int to, nxt;\n        mutable int dis;\n    }e[maxm];\n    \n    struct Node{\n        mutable int f;//0\u4ee3\u8868\u6700\u77ed\u8def\uff0c1\u4ee3\u8868\u6b21\u77ed\u8def\n        mutable int u;//\u7ed3\u70b9\u7f16\u53f7\n        mutable int dis;\n        bool operator<(const Node &rhs) const{\n            return dis > rhs.dis;\n        }\n    };\n\n    inline void init(int nn){\n        n = nn;\n        m = 0;\n        memset(head, 0xff, sizeof head);\n    }\n\n    inline void addEdge(int from, int to, int dis){\n        e[m].to = to;\n        e[m].dis = dis;\n        e[m].nxt = head[from];\n        head[from] = m++;\n    }\n    \n    inline void finda(int s){\n        std::priority_queue<Node> q;\n        for(int i = 0; i < n; ++i) d[0][i]  = d[1][i] = inf;//0~n-1\uff0c\u6ce8\u610f\u4e0b\u6807\u4ece\u54ea\u91cc\u5f00\u59cb\n        d[0][s] = 0;\n        for(int i = 0; i < n; ++i) cnt[0][i] = cnt[1][i] = 0;\n        cnt[0][s] = 1;\n        q.push((Node){0, s, 0});\n        while(!q.empty()){\n            Node x = q.top(); q.pop();\n            int u = x.u;\n            int dis = x.dis;\n            int f = x.f;\n            if(d[f][u] < dis) continue;\n            for(int i = head[u]; ~i; i = e[i].nxt){\n                int v = e[i].to;\n                int dd = dis + e[i].dis;\n                if(d[0][v] > dd){//\u80fd\u66f4\u65b0\u6700\u77ed\u8def\u5c31\u5148\u66f4\u65b0\u6700\u77ed\u8def\n                    if(d[0][v] < inf){\n                        d[1][v] = d[0][v];//\u4e4b\u524d\u7684\u6700\u77ed\u8def\u53d8\u4e3a\u6b21\u77ed\u8def\n                        cnt[1][v] = cnt[0][v];\n                        q.push((Node){1, v, d[1][v]});\n                    }\n                    //\u66f4\u65b0\u6700\u77ed\u8def\n                    d[0][v] = dd;\n                    cnt[0][v] = cnt[f][u];\n                    q.push((Node){0, v, d[0][v]});\n                }\n                else if(d[0][v] == dd){\n                    ( cnt[0][v] += cnt[f][u] ) %= mo ;//\u66f4\u65b0\u6700\u77ed\u8def\u6761\u6570\n                }\n                else if(d[1][v] > dd){\n                    d[1][v] = dd;//\u4e0d\u80fd\u66f4\u65b0\u6700\u77ed\u8def\uff0c\u53ea\u80fd\u66f4\u65b0\u6b21\u77ed\u8def\n                    cnt[1][v] = cnt[f][u];\n                    q.push((Node){1, v, d[1][v]});\n                }\n                else if(d[1][v] == dd){\n                    ( cnt[1][v] += cnt[f][u] ) %= mo ;//\u66f4\u65b0\u6b21\u77ed\u8def\u6761\u6570\n                }\n            }\n        }\n    }\n}a;\n\nsigned main(){\n    int T;\n    scanf(\"%lld\" , &T);\n    while(T--){\n        int n, m;\n        scanf(\"%lld%lld\", &n, &m);\n        int s, t;\n        scanf(\"%lld%lld\", &s, &t);\n\t\t--s;--t;\n        a.init(n);\n        int u, v, w=1;\n        for(int i = 0; i < m; ++ i){\n            scanf(\"%lld%lld\", &u, &v);\n            a.addEdge(u-1, v-1, w);\n            a.addEdge(v-1, u-1, w);\n        }\n        a.finda(s);\n        int res = a.cnt[0][t];\n        if(a.d[1][t] - 1 == a.d[0][t]) ( res += a.cnt[1][t] ) %= mo ;\n        printf(\"%lld\\n\", res);\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1646925058,
        "uid": 567739,
        "name": "Sellaris",
        "ccfLevel": 4,
        "title": "CF1650G"
    },
    {
        "content": "\u9996\u5148\u7528 Dijkstra \u6c42\u51fa $s$ \u5230\u4efb\u610f\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\uff0c\u8bbe\u4e3a $d_x$\u3002\n\n\u8bbe $f(i, 0 / 1)$ \u8868\u793a\u5728\u70b9 $i$\uff0c\u4e0e\u6700\u77ed\u8def\u76f8\u5dee $0 / 1$ \u7684\u65b9\u6848\u6570\uff0c\u53ef\u4ee5\u5199\u51fa\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$$\n\\begin{aligned}\n&f(u, 1) \\to f(v, 1), d_v = d_u + 1 \\\\\n&f(u, 0) \\to f(v, 0), d_v = d_u + 1 \\\\\n&f(u, 0) \\to f(v, 1), d_v = d_u\n\\end{aligned}\n$$\n\n\u5176\u4e2d $u \\to v$ \u662f\u539f\u56fe\u4e2d\u7684\u4e00\u6761\u8fb9\u3002\u521d\u59cb\u6709 $f(s, 0) = 1$\uff0c\u7b54\u6848\u4e3a $f(t, 0) + f(t, 1)$\u3002\n\n\u7531\u4e8e\u8f6c\u79fb\u987a\u5e8f\u53ef\u80fd\u6bd4\u8f83\u590d\u6742\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u5b9e\u73b0\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n\ntemplate <class T>\ninline void read(T &x) {\n    x = 0;\n    int f = 0;\n    char ch = getchar();\n    while (!isdigit(ch))    { f |= ch == '-'; ch = getchar(); }\n    while (isdigit(ch))     { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); }\n    x = f ? -x : x;\n    return ;\n}\n\ntypedef unsigned long long uLL;\ntypedef long long LL;\n\nconst LL mod = 1e9 + 7;\n\nstruct Node {\n    int pos, dis;\n    friend bool operator < (const Node &a, const Node &b) {\n        return a.dis > b.dis;\n    }\n};\n\nstd::vector<int> g[200010];\nLL f[200010][2];\nint d[200010];\nint T, n, m, s, t;\nbool vis[200010];\n\nvoid dijkstra() {\n    for (int i = 1; i <= n; ++i)    d[i] = 2e9;\n    d[s] = 0;\n    std::priority_queue<Node> q;\n    q.push((Node){s, 0});\n    while (!q.empty()) {\n        Node now = q.top();\n        q.pop();\n        if (vis[now.pos])    continue;\n        vis[now.pos] = true;\n        for (auto i : g[now.pos]) {\n            if (d[i] > d[now.pos] + 1) {\n                d[i] = d[now.pos] + 1;\n                q.push((Node){i, d[i]});\n            }\n        }\n    }\n}\n\nLL dp(int x, int k) {\n    if (~f[x][k])    return f[x][k];\n    LL s = 0;\n    for (auto i : g[x]) {\n        if (d[i] + 1 == d[x])    s += dp(i, k), s %= mod;\n        else if (d[i] == d[x] && k == 1)    s += dp(i, k - 1), s %= mod;\n    }\n    return f[x][k] = s;\n}\n\nint main() {\n    read(T);\n    while (T--) {\n        read(n), read(m);\n        for (int i = 1; i <= n; ++i)    g[i].clear(), f[i][0] = f[i][1] = -1, vis[i] = false;\n        read(s), read(t);\n        for (int i = 1, u, v; i <= m; ++i) {\n            read(u), read(v);\n            g[u].push_back(v), g[v].push_back(u);\n        }\n        dijkstra();\n        f[s][0] = 1;\n        printf(\"%lld\\n\", (dp(t, 0) + dp(t, 1)) % mod);\n    }\n    return 0;\n}\n```",
        "postTime": 1646894941,
        "uid": 124152,
        "name": "AmamiyaYuuko",
        "ccfLevel": 0,
        "title": "CF1650G Counting Shortcuts \u9898\u89e3"
    },
    {
        "content": "## \u9898\u9762\u5927\u610f\n\n\u7ed9\u51fa\u4e00\u4e2a\u65e0\u91cd\u8fb9\u65e0\u81ea\u73af\u7684\u65e0\u5411\u56fe\uff0c\u6c42\u4ece $s$ \u70b9\u5230 $t$ \u70b9\u6700\u591a\u6bd4\u6700\u77ed\u8ddd\u79bb\u591a $1$ \u7684\u8def\u5f84\u6570\uff0c\u5bf9 $998244353$ \u53d6\u6a21\u3002\n\n## \u601d\u8def\n\n\u8003\u8651 $dp$\uff0c$dp_{i,j}$ \u8868\u793a\u770b\u5230 $i$ \u70b9\uff0c\u6bd4\u6700\u77ed\u8ddd\u79bb\u957f $j$ \u7684\u8def\u5f84\u6761\u6570\u3002\u5c06\u6574\u4e2a\u56fe\u6309\u6700\u77ed\u8ddd\u79bb\u5212\u5206\u6210\u5c42\u3002$dp_{s,0}=1,dp_{s,1}=0$\uff0c\u9996\u5148\u6211\u4eec\u8003\u8651\u5c06\u8ddd\u79bb $s$ \u4e3a $i$ \u7684\u8282\u70b9\u8fdb\u884c bfs \u6269\u5c55\uff0c\u5f97\u5230\u6240\u6709\u8ddd\u79bb $s$ \u4e3a $i+1$ \u7684\u8282\u70b9\uff0c\u540c\u65f6\u72b6\u6001\u8f6c\u79fb\uff08\u8003\u8651 $u$ \u4e3a\u76ee\u524d\u8282\u70b9\uff0c$v$ \u4e3a\u6269\u5c55\u8282\u70b9\uff0c$dist_{v}=dist_{u}+1$\uff09$dp_{v,0}:=dp_{v,0}+dp_{u,0},dp_{v,1}:=dp_{v,1}+dp_{u,1}$\u3002\u5728\u6b64\u4e4b\u540e\uff0c\u6211\u4eec\u8fd8\u8981\u8003\u8651\u8ddd\u79bb $s$ \u4e3a $i+1$ \u4e92\u76f8\u4e4b\u95f4\u8fde\u7684\u8fb9\uff08\u8003\u8651 $u,v$ \u4e4b\u95f4\u6709\u8fb9\uff0c$dist_u=dist_v$\uff09$dp_{v,1}:=dp_{v,1}+dp_{u,0},dp_{u,1}:=dp_{u,1}+dp_{v,0}$\uff0c\u7136\u540e\u8ba9 $i$ \u52a0\u4e00\uff0c\u7ee7\u7eed\u6269\u5c55\u5373\u53ef\u3002\n\n\u6700\u540e\u8f93\u51fa $dp_{t,0}+dp_{t,1}$\uff0c**\u8bb0\u4f4f\u6700\u540e\u76f8\u52a0\u540e\u8fd8\u8981\u518d\u5bf9 $998244353$ \u53d6\u6a21**\u3002\uff08\u522b\u95ee\u6211\u4e3a\u5565\u52a0\u7c97\uff0c\u8981\u95ee\u5c31\u662f\u6211\u8d5b\u65f6\u964d\u667a\u3002\uff09\n\n## Code\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int mod=1e9+7;\nint f[200005][2],minv[200005];\nsigned main(){\n\tint t;\n\tcin>>t;\n\twhile(t--){\n\t\tint n,m;\n\t\tcin>>n>>m;\n\t\tint s,t;\n\t\tcin>>s>>t;\n\t\tvector<int> g[n+1];\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tminv[i]=1e18;\n\t\t\tf[i][0]=f[i][1]=0;\n\t\t}\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tint u,v;\n\t\t\tcin>>u>>v;\n\t\t\tg[u].push_back(v);\n\t\t\tg[v].push_back(u);\n\t\t} \n\t\tqueue<int> q;\n\t\tq.push(s);\n\t\tf[s][0]=1;\n\t\tminv[s]=0;\n\t\twhile(!q.empty()){\n\t\t\tint lev=minv[q.front()];\n\t\t\tqueue<int> sq;\n\t\t\twhile(!q.empty()){\n\t\t\t\tint u=q.front();\n\t\t\t\tq.pop();\n\t\t\t\tsq.push(u);\n\t\t\t\tfor(auto v:g[u]){\n\t\t\t\t\tif(minv[v]==minv[u]){\n\t\t\t\t\t\tf[v][1]=(f[v][1]+f[u][0])%mod;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile(!sq.empty()){\n\t\t\t\tint u=sq.front();\n\t\t\t\tsq.pop();\n\t\t\t\tfor(auto v:g[u]){\n\t\t\t\t\tif(minv[v]==1e18){\n\t\t\t\t\t\tminv[v]=minv[u]+1;\n\t\t\t\t\t\tf[v][0]=f[u][0];\n\t\t\t\t\t\tf[v][1]=f[u][1];\n\t\t\t\t\t\tq.push(v);\n\t\t\t\t\t}\n\t\t\t\t\telse if(minv[v]==minv[u]+1){\n\t\t\t\t\t\tf[v][0]+=f[u][0];\n\t\t\t\t\t\tf[v][1]+=f[u][1];\n\t\t\t\t\t}\n\t\t\t\t\tf[v][0]%=mod;\n\t\t\t\t\tf[v][1]%=mod;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcout<<(f[t][0]+f[t][1])%mod<<endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1646560220,
        "uid": 116664,
        "name": "Daniel_lele",
        "ccfLevel": 8,
        "title": "CF1650G\u9898\u89e3"
    },
    {
        "content": "### Preface\n\n\u8d5b\u573a\u4e0a\u88ab Hack \u4e86 qwq\u3002\n\n### Analysis\n\n\u8bbe\u6700\u77ed\u8def\u957f\u5ea6\u4e3a $D$\uff0c\u4ee5\u53ca $dis_i$ \u8868\u793a $s\\to i$ \u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\u9996\u5148\uff0c$s\\to t$ \u7684\u957f\u5ea6\u4e3a $D+1$ \u7684\u8def\u5f84\u4e00\u5b9a\u4e0d\u4f1a\u6709\u70b9\u88ab\u591a\u6b21\u7ecf\u8fc7\u3002\n\n\u5f15\u7406 A\uff1a\u6bcf\u6761\u8fb9 $(x,y)$ \u5fc5\u7136\u6ee1\u8db3 $|dis_x-dis_y|\\le 1$\u3002\n\n**\u8bc1\u660e\uff1a**\n\n\u53cd\u8bc1\uff0c\u5047\u8bbe\u6709\u4e00\u6761\u8def\u5f84\uff08\u5176\u5b9e\u53ea\u80fd\u7b97\u901a\u9053\u4e86\uff09\u7ecf\u8fc7\u7684\u70b9\u96c6\u4e3a $\\{s,p_1,p_2,\\dots,p_D,t\\}$ \u4e14\u5b58\u5728 $u<v$ \u4f7f\u5f97 $p_u=p_v$\u3002\u7531\u5f15\u7406\u53ef\u5f97 $dis_{p_u}\\le u$\uff0c\u5373 $dis_{p_v}\\le u$\uff0c\u6b64\u65f6\u5f97\u51fa $p_v\\to t$ \u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u4e00\u5b9a $\\ge D-u$\uff0c\u800c $\\{p_v,p_{v+1},\\dots,p_D,t\\}$ \u7684\u957f\u5ea6\u4e3a $D-v<D-u$\uff0c\u77db\u76fe\uff0c\u539f\u547d\u9898\u5f97\u8bc1\u3002$\\blacksquare$\n\n\u7531\u8fd9\u4e2a\u8bc1\u660e\u6211\u4eec\u4e5f\u5f97\u5230\uff1a$s\\to t$ \u7684\u957f\u5ea6\u4e3a $D+1$ \u7684\u8def\u5f84\u5305\u542b\u4e14\u4ec5\u5305\u542b\u4e00\u6761\u8fb9 $(u,v)$ \u4f7f\u5f97 $dis_u=dis_v$\u3002\u6211\u4eec\u679a\u4e3e\u8fd9\u6761\u7279\u6b8a\u7684\u8fb9\uff0c\u5206\u522b\u9884\u5904\u7406\u51fa $s\\to u$ \u548c $v\\to t$ \u7684\u6700\u77ed\u8def\u5f84\u6761\u6570\u76f8\u4e58\u5373\u53ef\u3002\n\n\u65f6\u95f4 $O(n+m)$\u3002\n\n### Code\n\n[Link](https://codeforces.com/contest/1650/submission/149199434)",
        "postTime": 1647161691,
        "uid": 101868,
        "name": "I_am_Accepted",
        "ccfLevel": 0,
        "title": "CF1650G Counting Shortcuts"
    }
]