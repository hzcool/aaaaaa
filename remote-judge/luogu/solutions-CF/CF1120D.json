[
    {
        "content": "## \u524d\u8a00\n\n[\u9898\u76ee\u4f20\u9001\u95e8\uff01](https://www.luogu.com.cn/problem/CF1120D)\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff1f](https://www.cnblogs.com/liangbowen/p/16668271.html)\n\n\u8fd9\u662f\u4e00\u9053\u5de7\u5999\u7684\u95ee\u9898\u3002\u524d\u7f6e\u829d\u58eb\uff1adfs \u5e8f\u3001\u6700\u5c0f\u751f\u6210\u6811\uff08kruskal\uff09\u3002\n\n\u53e6\u5916\u7684\u9898\u89e3\u8bb2\u5f97\u90fd\u5f88\u4e0d\u8be6\u7ec6\uff0c\u6211\u5c31\u8865\u7bc7\u9898\u89e3\u3002\n\n## \u601d\u8def\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u627e\u51fa\u8fd9\u68f5\u6811\u7684 dfs \u5e8f\u3002dfs \u5e8f\u7684\u7279\u70b9\u662f\uff0c\u76f8\u90bb\u53f6\u8282\u70b9\u7684 dfs \u5e8f\u603b\u662f\u8fde\u7eed\u7684\u3002\n\n\u90a3\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u51fa\uff0c\u5b83\u6240\u80fd\u63a7\u5236\u7684\u53f6\u8282\u70b9\u5bf9\u5e94\u7684 dfn \u5e8f\u7684\u4e00\u4e2a\u533a\u95f4\u3002\n\n\u8fd9\u6837\u5c31\u8f6c\u5316\u4e3a\u4e00\u4e2a\u533a\u95f4\u95ee\u9898\u4e86\uff1a\n\n> \u7ed9\u5b9a\u82e5\u5e72\u6bb5\u533a\u95f4 $[l, r]$\uff0c\u6bcf\u4e2a\u533a\u95f4\u6709\u4e00\u4e2a\u4ee3\u4ef7 $a_i$\uff08\u5bf9\u5e94\u539f\u56fe\u7684\u70b9\u6743\uff09\u3002\n>\n> \u8fd8\u6709\u4e00\u6bb5 $[1, n]$ \u7684\u5e8f\u5217 $a$\u3002\n>\n> \u63a7\u5236\u4e00\u4e2a\u533a\u95f4\uff0c\u8868\u793a\u53ef\u4ee5\u5bf9\u533a\u95f4\u91cc\u7684\u6570\u4efb\u610f\u52a0\u51cf\u3002\n> \n> \u6c42\u51fa\u6700\u5c11\u4ee3\u4ef7\u4ee5\u53ca\u65b9\u6848\uff0c\u4e0d\u7ba1 $a_i$ \u662f\u591a\u5c11\uff0c\u603b\u80fd\u5c06 $a$ \u7684\u6240\u6709\u6570\u53d8\u4e3a $0$\u3002\n\n\u533a\u95f4\u591a\u6b21\u4fee\u6539\uff0c\u5355\u6b21\u67e5\u8be2\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u5dee\u5206\u3002\n\n\u6bcf\u6b21\u76f8\u5f53\u4e8e\u5728\u5dee\u5206\u6570\u7ec4 $c$ \u4e0a\u6267\u884c\uff1a$c_l$ \u52a0 $x$\uff0c$c_{r + 1}$ \u51cf $x$\u3002\n\n\u5e76\u4e14\u663e\u7136\u6709 $1 \\le l, r \\le n$\uff0c$2 \\le r + 1 \\le n + 1$\uff08\u56e0\u4e3a $l$ \u548c $r$ \u662f dfs \u5e8f\uff09\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u6240\u80fd\u66f4\u6539\u7684\u6570\u662f $c_1$ \u5230 $c_{n + 1}$\uff0c\u8981\u60f3\u8ba9\u6240\u6709 $c_i$\uff08$1 \\le i \\le n$\uff09\u4e3a $0$\uff0c\u5219\u6240\u6709\u6570\u90fd\u8981\u79fb\u5230 $c_{n + 1}$ \u5934\u4e0a\u3002\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u975e\u5e38\u7b80\u5355\u4e86\uff1a$[l, r]$ \u5bf9\u5e94\u7740\u4e00\u6761 $l \\to r + 1$ \u7684\u8fb9\uff0c\u8fb9\u6743\u4e3a $a_i$\u3002\u6c42\u51fa\u6700\u5c11\u8fb9\u6743\u548c\u53ca\u65b9\u6848\uff0c\u4f7f\u5f97\u9009\u62e9\u4e86\u8fd9\u4e9b\u8fb9\u540e\uff0c$(n + 1)$ \u53f7\u70b9\u80fd\u4e0e\u6240\u6709\u70b9\u8fde\u901a\u3002\n\n\u7136\u540e\u8dd1\u4e00\u904d kruskal \u5373\u53ef\u3002\u4e8b\u5b9e\u4e0a\u8f6c\u5316\u4e3a\u533a\u95f4\u8fd9\u4e00\u6b65\u53ea\u662f\u63a8\u5bfc\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4ee3\u7801\u53ea\u9700\u8981\u5728\u6c42\u51fa\u533a\u95f4 $[l, r]$ \u65f6\uff0c\u76f4\u63a5\u8fde\u8fb9\u5373\u53ef\u3002\n\n\u5728\u8f93\u51fa\u65b9\u6848\u7684\u65f6\u5019\u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u65b9\u6848\u662f\u5e76\u96c6\uff01\u4e5f\u5c31\u662f**\u5168\u90e8**\u53ef\u80fd\u5b58\u5728\u4e8e\u6700\u4f18\u65b9\u6848\u7684\u70b9\u3002\n\n\u8fd9\u4e00\u70b9\u5177\u4f53\u770b\u4ee3\u7801\u3002\u5f88\u5bb9\u6613\u7406\u89e3\u3002\n\n## \u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#define space putchar(' ')\n#define endl putchar('\\n')\nusing namespace std;\ntypedef long long LL;\ntypedef long double LD;\nvoid fastio()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0), cout.tie(0);\n}\nint read()\n{\n\tchar op = getchar(); int x = 0, f = 1;\n\twhile (op < 48 || op > 57) {if (op == '-') f = -1; op = getchar();}\n\twhile (48 <= op && op <= 57) x = (x << 1) + (x << 3) + (op ^ 48), op = getchar();\n\treturn x * f;\n}\nvoid write(LL x)\n{\n\tif (x < 0) putchar('-'), x = -x;\n\tif (x > 9) write(x / 10);\n\tputchar(x % 10 + 48);\n}\nconst int N = 2e5 + 5;\nint n, m, a[N];\nstruct zltAK\n{\n\tint u, v, w, pos; //a[pos] = w\n}e[N];\nvoid zltakioi(int u, int v, int pos)\n{\n\te[++m].u = u, e[m].v = v;\n\te[m].w = a[pos], e[m].pos = pos;\n}\nbool cmp(zltAK IOI, zltAK CTSC) {return IOI.w < CTSC.w;} //\u819c\u62dc @zlttql \nint fa[N]; //\u5e76\u67e5\u96c6 \nvoid init() {for (int i = 1; i <= n+1; i++) fa[i] = i;}\nint get(int x)\n{\n\tif (fa[x] == x) return x;\n\treturn fa[x] = get(fa[x]);\n}\nstruct Edge\n{\n\tint now, nxt, w;\n}edge[N << 1];\nint head[N], cur;\nvoid add(int u, int v)\n{\n\tedge[++cur].now = v;\n\tedge[cur].nxt = head[u];\n\thead[u] = cur;\n}\n//dfnl[i] \u548c dfnr[i] \u8868\u793a\u53f6\u8282\u70b9 dfn \u5e8f\uff0c\u5982\u679c\u63a7\u5236 i\uff0c\u53ef\u4ee5\u66f4\u6539 dfnl[i]~dfnr[i] \u7684\u5168\u90e8\u5bf9\u5e94\u53f6\u8282\u70b9\u3002 \nint dfnl[N], dfnr[N];\nvoid dfs(int u, int fa)\n{\n\tbool leaf = true;\n\tdfnl[u] = 2147483647;\n\tfor (int i = head[u]; i; i = edge[i].nxt)\n\t{\n\t\tint v = edge[i].now;\n\t\tif (v == fa) continue;\n\t\tleaf = false, dfs(v, u);\n\t\tdfnl[u] = min(dfnl[u], dfnl[v]), dfnr[u] = max(dfnr[u], dfnr[v]);\n\t}\n\tif (leaf) dfnl[u] = dfnr[u] = ++cur;\n\tzltakioi(dfnl[u], dfnr[u] + 1, u); //\u5efa\u8fb9\uff0c\u5dee\u5206\u601d\u60f3\u5982\u4e0a\u6240\u8ff0 \n}\nint tot;\nbool ans[N];\nLL kruskal()\n{\n\tinit(), sort(e+1, e+m+1, cmp);\n\tLL sum = 0;\n\tfor (int l = 1; l <= n;)\n\t{\n\t\tint r;\n\t\tfor (r = l; r + 1 <= n && e[r].w == e[r+1].w; r++); //\u8fd9\u6837 [l,r] \u7684 w \u90fd\u662f\u4e00\u6837\u7684\n\t\t\n\t\tfor (int i = l; i <= r; i++) //\u8bb0\u5f55\u7b54\u6848\u5e76\u96c6\uff0c\u6ce8\u610f\u4e0d\u80fd\u4e00\u8fb9\u5408\u5e76\u4e00\u8fb9\u7edf\u8ba1\uff0c\u663e\u7136\u4f1a\u9519\u8bef \n\t\t\tif (get(e[i].u) != get(e[i].v))\n\t\t\t\tans[e[i].pos] = true, tot++;\n\t\t\t\t\n\t\tfor (int i = l; i <= r; i++) //\u771f\u6b63\u7684kruskal\u64cd\u4f5c \n\t\t{\n\t\t\tint fu = get(e[i].u), fv = get(e[i].v);\n\t\t\tif (fu == fv) continue;\n\t\t\tfa[fu] = fv, sum += e[i].w;\n\t\t}\n\t\tl = r + 1;\n\t}\n\treturn sum;\n}\nint main()\n{\n\tn = read();\n\tfor (int i = 1; i <= n; i++) a[i] = read();\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tint u = read(), v = read();\n\t\tadd(u, v), add(v, u);\n\t}\n\tcur = 0, dfs(1, 0);\n\twrite(kruskal()), space, write(tot), endl;\n\tfor (int i = 1; i <= n; i++)\n\t\tif (ans[i])\n\t\t\twrite(i), space;\n\treturn 0;\n}\n```\n\n\u5e0c\u671b\u80fd\u5e2e\u52a9\u5230\u5927\u5bb6\uff01",
        "postTime": 1662601016,
        "uid": 367488,
        "name": "liangbowen",
        "ccfLevel": 0,
        "title": "CF1120D \u9898\u89e3"
    },
    {
        "content": "\u6c99\u53d1~~\n\n# \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u4f60\u4e00\u68f5\u6709\u6839\u6811\uff0c\u5b9a\u4e49\u53f6\u5b50\u4e3a\u5ea6\u6570\u4e3a1\u7684\u70b9\u3002\n\n\u4f60\u53ef\u4ee5\u4ee5$ w_x $\u7684\u4ee3\u4ef7\u63a7\u5236$x$\u70b9\u3002\u9009\u62e9\u63a7\u5236\u4e4b\u540e\u53ef\u4ee5\u7ed9\u5b83\u7684\u5b50\u6811\u91cc\u7684\u53f6\u5b50\u52a0\n\u4e0a$t (t \\in Z )$\u3002\n\n\u4f60\u8981\u4ee5\u6700\u5c0f\u7684\u603b\u4ee3\u4ef7\u4f7f\u5f97\uff1a\u53e6\u4e00\u4e2a\u4eba\u5728\u53f6\u5b50\u4e0a\u4efb\u610f\u653e\u6570\uff0c\u4f60\u90fd\u53ef\u4ee5\u628a\u5b83\n\u4eec\u90fd\u53d8\u62100\u3002\n\n\u6700\u540e\u8f93\u51fa\u6700\u5c0f\u7684\u603b\u4ee3\u4ef7\uff0c\u4ee5\u53ca\u6709\u591a\u5c11\u70b9\u53ef\u80fd\u88ab\u63a7\u5236\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u53ef\u80fd\u88ab\u63a7\u5236\u7684\u70b9\u7684\u7f16\u53f7\n\n# \u601d\u8def\u7d22\u5f15\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u6309\u7167 dfs\u5e8f \u62bd\u8c61\u6210\u4e00\u4e2a\u5e8f\u5217\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u795e\u5947\u7684\u53d1\u73b0\uff0c\u6bcf\u4e00\u4e2a\u70b9\u5c31\u5bf9\u5e94\u7740\u4e00\u4e2a\u533a\u95f4~~\u8fd9\u4e0d\u662f\u5e9f\u8bdd\u5417~~\n\n\u7136\u540e\uff0c\u9009\u62e9\u67d0\u4e2a\u533a\u95f4\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u5b83\u8fdb\u884c\u533a\u95f4\u52a0\u7684\u64cd\u4f5c\n\n\u65e2\u7136\u662f\u533a\u95f4\u64cd\u4f5c\uff0c\u80af\u5b9a\u662f\u4e0d\u65b9\u4fbf\u7684\uff0c\u7136\u540e\u5c31\u5f88\u81ea\u7136\u7684\u60f3\u5230\u4e86\u5dee\u5206~~\u54ea\u91cc\u81ea\u7136\u4e86~~\n\n\u82e5\u70b9$x$\u5bf9\u5e94\u533a\u95f4$[l,r]$\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u63a7\u5236\u70b9x\uff0c\u5c31\u7b49\u540c\u4e8e\u5728$l$\u5904$+t$,\u5728$r+1$\u5904$-t$(\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u865a\u6784\u51fa\u4e00\u4e2a\u65b0\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u4ee5\u4fdd\u8bc1\u4e0d\u4f1a\u7206\u6389)\n\n\u6211\u4eec\u89c2\u5bdf\u4e00\u4e0b\u8fd9\u4e2a\u5e8f\u5217\uff0c\u53d1\u73b0\u5982\u679c\u539f\u6570\u7ec4\u5747\u4e3a0\uff0c\u5219\u5dee\u5206\u6570\u7ec4\u4e5f\u5747\u4e3a0\n\n\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5728$l$\u5230$r+1$\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a$w_x$\u7684\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u6761\u8fb9\u7684\u4e00\u7aef\u52a0\u4e0a\u4e00\u4e2a\u6570\uff0c\u800c\u5728\u53e6\u4e00\u7aef\u51cf\u53bb\u4e00\u4e2a\u76f8\u540c\u7684\u6570\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u82e5\u6240\u6709\u53f6\u5b50\u90fd\u8054\u901a\uff0c\u90a3\u4e48\u56e0\u4e3a\u5dee\u5206\u6570\u7ec4\u7684\u548c\u4e3a0\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u7136\u80fd\u5c06\u6bcf\u4e00\u4e2a\u70b9\u90fd\u53d8\u62100\n\n\u6c42\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\n\n# \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n//``` \n#include<bits/stdc++.h>\n#define ll long long\n#define now edge[i].v\n#define rep(i,l,r) for(int i=l;i<=r;i++)\nusing namespace std;\nconst int SZ=2e5+7;\nll ans;\nint cnt;\nint L,R;\nint u,v;\nint n,T;\nint w[SZ];\nint fa[SZ];\nint sz[SZ];\nbool vis[SZ];\nint head[SZ];\nbool f[SZ];\nint l[SZ],r[SZ];\nstruct wxp{\n    int v,nxt;\n}edge[SZ<<1];\nstruct pb{\n    int u,v,w,o;\n}E[SZ];\nbool cmp(pb p1,pb p2){\n    return p1.w<p2.w;\n}\nint getfa(int x){\n    return fa[x]==x?x:fa[x]=getfa(fa[x]);\n}\nvoid add(int u,int v){\n    edge[++cnt]=(wxp){v,head[u]};\n    head[u]=cnt;\n}\nvoid dfs(int x){\n    sz[x]=1;\n    vis[x]=1;\n    for(int i=head[x];i;i=edge[i].nxt)\n    if(!vis[now]){\n        dfs(now);\n        sz[x]+=sz[now];\n        l[x]=min(l[x],l[now]);\n        r[x]=max(r[x],r[now]);\n    }\n    if(sz[x]==1) l[x]=r[x]=++T;\n    E[x]=(pb){l[x],r[x]+1,w[x],x};\n}\nint main(){\n    scanf(\"%d\",&n);\n    rep(i,1,n) scanf(\"%d\",&w[i]);\n    rep(i,1,n-1){\n        scanf(\"%d%d\",&u,&v);\n        add(u,v),add(v,u);\n    }\n    memset(l,0x3f,sizeof(l));\n    dfs(1);\n    sort(E+1,E+n+1,cmp);\n    rep(i,1,T+1) fa[i]=i;\n    int sum=0;\n    for(L=1;L<=n;L=R+1){\n        R=L;\n        while(E[R+1].w==E[L].w&&R<n) R++;\n        rep(i,L,R){\n            u=E[i].u,v=E[i].v;\n            if(getfa(u)!=getfa(v)) f[E[i].o]=1,sum++;\n        }\n        rep(i,L,R){\n            u=E[i].u,v=E[i].v;\n            if(getfa(u)!=getfa(v)){\n                ans+=1ll*E[i].w;\n                fa[fa[u]]=fa[v];\n            }\n        }\n    }\n    printf(\"%I64d %d\\n\",ans,sum);\n    rep(i,1,n) if(f[i]) printf(\"%d \",i);\n} \n//```\n```\n",
        "postTime": 1553520657,
        "uid": 76045,
        "name": "\u5f71\u8fb0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1120D \u3010Power Tree\u3011"
    },
    {
        "content": "\u5f88\u5de7\u5999\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u628a\u53f6\u5b50\u8282\u70b9\u6309 dfs \u5e8f\u62bd\u8c61\u6210\u4e00\u4e2a\u5e8f\u5217\uff0c\u4e0d\u59a8\u8bbe\u8fd9\u4e2a\u5e8f\u5217\u957f $k$\u3002\n\n\u90a3\u4e48\u63a7\u5236\u4e00\u68f5\u5b50\u6811\u5185\u7684\u53f6\u5b50\u8282\u70b9\u7684\u70b9\u6743\u7b49\u540c\u4e8e\u63a7\u5236\u5e8f\u5217\u4e00\u6bb5\u533a\u95f4\u7684\u70b9\u6743\u3002\n\n\u5168\u4f53\u7f6e\u96f6\u7684\u8981\u6c42\u548c\u533a\u95f4\u52a0\u7684\u64cd\u4f5c\u5bb9\u6613\u8054\u60f3\u5230\u5dee\u5206\u6570\u7ec4\uff0c\u4e0d\u59a8\u8bbe\u5dee\u5206\u6570\u7ec4 $b_i=a_i-a_{i-1}$\uff0c$a_0=0$\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u533a\u95f4 $[l,r]$ \u52a0 $x$\uff0c\u5c31\u53ef\u4ee5\u770b\u4f5c\u662f $b_l$ \u52a0 $x$\uff0c$b_{r+1}$ \u51cf $x$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5f97\u65b0\u5efa\u51fa\u4e00\u4e2a\u865a\u70b9 $k+1$\u3002\n\n\u5bf9\u4e8e\u8981\u6c42\u5168\u4f53\u7f6e\u96f6\uff0c\u5c31\u53ef\u4ee5\u770b\u505a\u662f\u8981\u6c42 $\\forall i\\in[1,k],b_i=0$\u3002\n\n\u53d1\u73b0\u6bcf\u6b21\u64cd\u4f5c\u540e\u5dee\u5206\u6570\u7ec4\u7684\u603b\u548c\u4e0d\u4f1a\u53d8\uff0c\u6240\u4ee5\u4e3a\u4e86\u8fbe\u5230\u8981\u6c42\uff0c\u5fc5\u987b\u628a\u6240\u6709\u7684\u503c\u8f6c\u79fb\u5230 $b_{k+1}$ \u4e0a\u53bb\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u533a\u95f4 $[l,r]$ \u52a0 $x$\uff0c\u6211\u4eec\u53ef\u4ee5\u8fde\u8fb9 $(l,r+1)$\uff0c\u8fb9\u6743\u4e3a $x$\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u5f53\u4e14\u4ec5\u5f53\u4e24\u4e2a\u70b9\u8054\u901a\u65f6\uff0c\u624d\u80fd\u628a\u4e00\u4e2a\u70b9\u7684 $b$ \u503c\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u70b9\u4e0a\u53bb\uff0c\u4e14\u4ee3\u4ef7\u4e3a\u8fb9\u6743\u548c\uff08\u6ce8\u610f\u4ee3\u4ef7\u4e0e $b$ \u503c\u5927\u5c0f\u65e0\u5173\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u4e0d\u662f\u7528\u7f51\u7edc\u6d41\uff09\u3002\n\n\u6240\u4ee5\u9898\u76ee\u7684\u8981\u6c42\u5c31\u662f\u6240\u6709\u7684\u70b9\u90fd\u8981\u548c $k+1$ \u8054\u901a\uff0c\u7136\u540e\u95ee\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u80fd\u89e3\u51b3\u7684\u4e8b\u60c5\u4e86\u3002\n\n\u81f3\u4e8e\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u5728\u6700\u4f18\u65b9\u6848\u4e2d\u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u8fb9\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728 kruskal \u7684\u8fc7\u7a0b\u4e2d\u5224\u65ad\u4e00\u4e0b\u5c31\u597d\u4e86\u3002~~\uff08\u6211\u5dee\u70b9\u5199\u4e86\u6700\u5c0f\u751f\u6210\u6811\u7684\u6811\u5256\uff09~~\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n\n#define N 200010\n#define ll long long\n\nusing namespace std;\n\nstruct Edge\n{\n\tint u,v,w,id;\n\tEdge(){};\n\tEdge(int a,int b,int c,int d){u=a,v=b,w=c,id=d;}\n}e[N];\n\nint n,m,c[N],fa[N];\nint cnt,head[N],nxt[N<<1],to[N<<1];\nint idx,lp[N],rp[N],size[N];\nbool vis[N];\nint num;\nll ans;\n\nvoid adde(int u,int v)\n{\n\tto[++cnt]=v;\n\tnxt[cnt]=head[u];\n\thead[u]=cnt;\n}\n\nvoid dfs(int u,int fa)\n{\n\tbool leaf=true;\n\tfor(int i=head[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v==fa) continue;\n\t\tleaf=0;\n\t\tdfs(v,u);\n\t\tif(!lp[u]) lp[u]=lp[v];\n\t\trp[u]=rp[v];\n\t}\n\tif(leaf) lp[u]=rp[u]=++idx;\n\te[++m]=Edge(lp[u],rp[u]+1,c[u],u);\n}\n\nbool cmp(Edge a,Edge b)\n{\n\treturn a.w<b.w;\n}\n\nint find(int x)\n{\n\treturn x==fa[x]?x:(fa[x]=find(fa[x]));\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&c[i]);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadde(u,v),adde(v,u);\n\t}\n\tdfs(1,0);\n\tsort(e+1,e+m+1,cmp);\n\tidx++;\n\tfor(int i=1;i<=idx;i++) fa[i]=i;\n\tfor(int l=1,r;l<=m;l=r+1)\n\t{\n\t\tr=l;\n\t\twhile(r+1<=m&&e[r].w==e[r+1].w) r++;\n\t\tfor(int i=l;i<=r;i++)\n\t\t{\n\t\t\tint a=find(e[i].u),b=find(e[i].v);\n\t\t\tif(a!=b)\n\t\t\t{\n\t\t\t\tnum++;\n\t\t\t\tvis[e[i].id]=1;\n\t\t\t}\n\t\t}\n\t\tfor(int i=l;i<=r;i++)\n\t\t{\n\t\t\tint a=find(e[i].u),b=find(e[i].v);\n\t\t\tif(a!=b)\n\t\t\t{\n\t\t\t\tfa[a]=b;\n\t\t\t\tans+=e[i].w;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld %d\\n\",ans,num);\n\tfor(int i=1;i<=n;i++)\n\t\tif(vis[i]) printf(\"%d \",i);\n\treturn 0;\n}\n```",
        "postTime": 1611393922,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1120D \u3010Power Tree\u3011"
    },
    {
        "content": "[\u9898\u76ee\u63cf\u8ff0](https://www.luogu.com.cn/problem/CF1120D)\n\n\u5148\u8bb2\u4e00\u4e0b\u540e\u9762\u8f93\u51fa\u7684\u201c\u65b9\u6848\u201d\uff1a\u5176\u5b9e\u5c31\u662f**\u6240\u6709\u6700\u4f18\u65b9\u6848**\u4e2d\u53ef\u80fd\u88ab\u63a7\u5236\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u4ee5\u53ca\u4e2a\u6570\n\n\u5f88\u660e\u663e\uff0c\u8fd9\u662f\u4e00\u9053\u6811\u5f62dp\u9898\n\n\u90a3\u6211\u4eec\u5c31\u6765\u5217~~\u7384\u5b66~~\u8f6c\u79fb\u65b9\u7a0b\u5427\n\n\u9996\u5148\uff0cf[i][0]\u8868\u793ai\u8282\u70b9\u53ef\u4ee5\u628a\u4ed6\u7684\u53f6\u5b50\u53d8\u4e3a\u76f8\u540c\uff08\u53ea\u80fd\u53d8\u4e3a\u51e0\u79cd\u6570\uff0c\u770b\u5b83\u653e\u4e86\u4ec0\u4e48\uff0c\u6700\u5c11\u4e00\u79cd\uff09\u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c\u4e3e\u4e2a\u6817\u5b50\uff1a\n![1.png](https://i.loli.net/2020/02/16/KUEWOfIb1GDqsYR.png)\n\u6709\u5565\u7528\u5462\uff1f\u5148\u5f80\u540e\u770b\u3002\n\nf[i][1]\u8868\u793ai\u8282\u70b9\u53ef\u4ee5\u628a\u4ed6\u7684\u53f6\u5b50**\u4e00\u8d77**\u53d8\u4e3a**\u4efb\u610f\u6570**\uff08\u5305\u62ec0\uff09\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n\u6211\u4eec\u901a\u8fc7\u6817\u5b501\u5f97\u5230\u4e86\u8fd9\u6837\u4e00\u4e2a\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\nf[i][0] = f[j][0] + f[k][1]\n\n\u6ce8\u610f\uff1aj\u662fi\u7684\u6240\u6709\u513f\u5b50\u4e2d\u7684\u4e00\u4e2a\uff0ck\u662f\u9664\u4e86j\u7684\u6240\u6709i\u7684\u513f\u5b50\u3002\n\n\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u6837\u505a\u5462\uff1f\u56e0\u4e3a\u6240\u6709k\u90fd\u53ef\u4ee5\u53d8\u4e3a\u4efb\u610f\u6570\uff0c\u81ea\u7136\u4e5f\u80fd\u53d8\u4e3aj\u4e0b\u9762\u88ab\u653e\u7684\u6570\uff0c\u8fd9\u6837\u4e0d\u5c31\u90fd\u76f8\u540c\u4e86\u5417\uff1f\n\n\u5f53i\u4e0b\u9762\u7684\u6570\u90fd\u76f8\u540c\u65f6\uff0c\u63a7\u5236i\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u5c06\u4e0b\u9762\u7684\u6570\u53d8\u4e3a\u4efb\u610f\u6570\u4e86\uff1f\n\n\u6240\u4ee5\uff1a\n\nf[i][1] = f[j][1]\n\nj\u662fi\u7684\u6240\u6709\u513f\u5b50\u8282\u70b9\u3002\n\u5f88\u660e\u663e\uff0ci\u7684\u6240\u6709\u513f\u5b50\u90fd\u80fd\u4efb\u610f\uff0c\u81ea\u5df1\u4e5f\u80fd\u4efb\u610f\u3002\n\nf[i][1] = f[j][0] + f[k][1] + w[i]\n\n\u6ce8\u610f\uff1aj\u662fi\u7684\u6240\u6709\u513f\u5b50\u4e2d\u7684\u4e00\u4e2a\uff0ck\u662f\u9664\u4e86j\u7684\u6240\u6709i\u7684\u513f\u5b50\u3002\n\u5f53i\u7684\u513f\u5b50\u5176\u4e2d\u4e00\u4e2a\u662f _\u76f8\u540c_ \u65f6\uff0c\u5176\u4ed6\u4e0d\u80fd\u662f\u76f8\u540c\uff0c\u5426\u5219\u65e0\u6cd5\u4fdd\u8bc1\u6240\u6709\u6570\u90fd\u76f8\u540c\u3002\u5176\u4ed6\u7684\u513f\u5b50\u8282\u70b9\u4e00\u5b9a\u8981\u4efb\u610f\uff0c\u7136\u540e\u53d8\u6210\u90a3\u4e2a~~\u7279\u4f8b~~\u76f8\u540c\u7684\u513f\u5b50\u8282\u70b9\uff0c\u518d\u63a7\u5236i\uff0c\u5c06\u6240\u6709\u76f8\u540c\u7684\u6570\u53d8\u6210\u4efb\u610f\u6570\u3002\n\n\u8fd8\u662f\u4e3e\u4e2a\u6817\u5b50\u5427\uff1a\n![2.png](https://i.loli.net/2020/02/16/wJOjxR1iDNrXLm8.png)\n\u5f88\u597d\u61c2\u5427\uff1f\n\nok\uff0c\u4e0b\u9762\u5c31\u5904\u7406\u8fd9\u4e2a~~\u53d8\u6001~~\u65b9\u6848\u4e86\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u4e0a\u9762\u8bf4\u7684\u90a3\u4e2a~~\u7279\u4f8b~~\u76f8\u540c\u7684\u513f\u5b50\u8282\u70b9\u662f\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u6765\u7684\uff0c\u5b83\u8981\u8fbe\u5230-f[j][1]+f[j][0]\u6700\u5c0f\uff0c\u5176\u5b9e\u5c31\u662f**\u66ff\u6362**\u4e86\u4e00\u4e2af[k][1]\u5230f[j][0]\uff08\u4ece1\u52300\uff09\uff0c\u53ea\u6709\u6700\u5c0f\u624d\u80fd\u4fdd\u8bc1f[i][0]\u6700\u5c0f\u3002\n\n\u8fd8\u6709\uff0cf[i][1]\u7684\u7b2c\u4e8c\u79cd\u60c5\u51b5\u5176\u5b9e\u5c31\u662ff[i][0]+w[i]\uff0c\u53ea\u8981\u6bd4\u8f83f[j][1]\uff08j\u662fi\u7684\u6240\u6709\u513f\u5b50\u8282\u70b9\uff09\u548cf[i][0]+w[i]\u5c31\u597d\u4e86\u3002\n\n\u89e3\u91ca\u5b8c\u4e86\uff0c\u5c31\u4e0a\u7ed3\u6784\u4f53\u8bb0\u5f55\u65b9\u6848\uff01\uff01\uff01\n\n```cpp\nstruct msg{\n\tbool now_ct=0, all=0;\n\tvector<int> u;\n}g[N][2];\n```\nnow_ct\u8868\u793a\u5f53\u524d\u8981\u4e0d\u8981\u63a7\u5236\u8fd9\u4e2a\u8282\u70b9\uff0c\u5c31\u662f\u5f53f[j][1]\uff08j\u662fi\u7684\u6240\u6709\u513f\u5b50\u8282\u70b9\uff09 <= f[i][0]+w[i]\u7684\u65f6\u5019\u3002\n\nall\u8868\u793af[j][1]\uff08j\u662fi\u7684\u6240\u6709\u513f\u5b50\u8282\u70b9\uff09 == f[i][0]+w[i]\uff0c\u5373\u4e24\u79cd\u8f6c\u79fb\u65b9\u7a0b\u90fd\u662f\u6700\u4f18\u89e3\u3002\n\nu\u662f\u4e00\u4e2avector\uff0c\u8bb0\u5f55\u6240\u6709\u53ef\u4ee5\u8fbe\u5230\u6700\u4f18\u89e3\u7684~~\u7279\u4f8b~~\u76f8\u540c\u7684\u513f\u5b50\u8282\u70b9\u3002\n\n## ok\uff0c\u4e0a\u4ee3\u7801\uff01\uff01\uff01\uff08\u6ce8\u91ca\u4e00\u8d77\u4e0a\uff01\uff09\n\n```cpp\n#include <bits/stdc++.h>\n#define add push_back\n#define ll long long\nusing namespace std;\nconst int N = 200005;\nint n;\nll w[N];//\u5982\u9898\u4e2d\u7684w\nbool ans[N]/*\u6700\u4f18\u89e3\u4e2d\u53ef\u80fd\u88ab\u63a7\u5236\u7684\u70b9*/, vis[N][2]/*\u9012\u5f52\u53bb\u91cd*/;\nll f[N][2];\nstruct msg{\n\tbool now_ct=0, all=0;\n\tvector<int> u;\n}g[N][2];\nvector<int> a[N];/*\u8bb0\u5f55\u6811*/\nvoid dfs(int u, int fa){\n\tbool bo = 1;//\u8bb0\u5f55\u81ea\u5df1\u662f\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\n\tll k = 1e17;//\u8bb0\u5f55\u53ef\u4ee5\u8fbe\u5230\u6700\u4f18\u89e3\u7684\u76f8\u540c\u7684\u513f\u5b50\u8282\u70b9\u7684-f[i][1]+f[i][0]\n\tfor (int i = 0; i < a[u].size(); i++){\n\t\tint v = a[u][i];\n\t\tif (v == fa) continue;\n\t\tdfs(v, u);\n\t\tf[u][0] += f[v][1];\n\t\tf[u][1] += f[v][1];\n\t\tif (f[v][0]-f[v][1] < k){//\u6709\u66f4\u4f18\u7b56\u7565\n\t\t\tg[u][0].u.clear();//\u6e05\u7a7a\u5047\u7684\u76f8\u540c\u7684\u513f\u5b50\u8282\u70b9\n\t\t\tg[u][0].u.add(v);//\u201c\u6211\u624d\u662f\u6700\u4f18\u89e3\uff01\u201d\n\t\t}else if (f[v][0]-f[v][1] == k) g[u][0].u.add(v);//\u5982\u4e0a\n\t\tk = min(f[v][0]-f[v][1], k);//\u66f4\u65b0\n\t\tbo = 0;\n\t}\n\tif (bo){//\u5982\u679c\u81ea\u5df1\u662f\u53f6\u5b50\u8282\u70b9\n\t\tf[u][0] = 0;//\u76f8\u540c\u6ca1\u6709\u4ee3\u4ef7\n\t\tf[u][1] = w[u];//\u4efb\u610f \u63a7\u5236\u81ea\u5df1\u5c31\u597d\n\t\tg[u][1].now_ct = 1;//\u63a7\u5236\u81ea\u5df1\u4e86\n\t\treturn;\n\t}\n\tf[u][0] += k;//\u52a0\u4e0a\u6700\u4f18\u89e3\u7684\u76f8\u540c\u7684\u513f\u5b50\u8282\u70b9\uff08\u53d8\u5316\u503c\uff09\n\tif (f[u][0]+w[u] <= f[u][1]){\n\t\tg[u][1].now_ct = 1;\n\t\tg[u][1].u.assign(g[u][0].u.begin(), g[u][0].u.end());//\u628af[i][0]\u7684\u4fe1\u606f\u62f7\u8fc7\u6765\n\t}\n\tif (f[u][0]+w[u] == f[u][1]) g[u][1].all = 1;//\u4e24\u79cd\u65b9\u6848\u90fd\u53ef\u884c\n\tf[u][1] = min(f[u][0]+w[u], f[u][1]);//\u66f4\u65b0\n}\nvoid find_ans(int i, int j, int fa){\n\tif (vis[i][j]) return;//\u91cd\u590d\u4e86\n\tif (g[i][j].now_ct) ans[i] = 1;//\u8981\u63a7\u5236i\u8282\u70b9\n\tvis[i][j] = 1;\n\tif (!g[i][j].all){//\u5982\u679c\u53ea\u6709f[i][0]+w[i]\u53ef\u884c\n\t\tmap<int, bool> can;//STL\u5927\u6cd5\u597d\uff08bitset\u4f1aMLE\uff09\n\t\tfor (int _i = 0; _i < g[i][j].u.size(); _i++) can[g[i][j].u[_i]] = 1;//\u8bb0\u5f55\n\t\tfor (int _i = 0; _i < a[i].size(); _i++) if (a[i][_i] != fa){\n\t\t\tfind_ans(a[i][_i], !can[a[i][_i]], i);\n\t\t\tif (g[i][j].u.size() > 1 && can[a[i][_i]]) find_ans(a[i][_i], 1, i);//\u5361\u4e86\u62113h\uff01\uff01\uff01\u5982\u679c\u6709\u591a\u4e2a\u201c\u6700\u4f18\u89e3\u201d\u8981\u90fd\u8d70\u4e00\u6b211\uff08\u63a7\u5236\uff09\uff01\u56e0\u4e3a\u53e6\u4e00\u4e2a\u4e0d\u63a7\u5236\u201c\u6211\u201d\u5c31\u8981\u63a7\u5236\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u90fd\u8981\u63a7\u5236\u4e00\u6b21\uff01\n\t\t}\n\t}else{\n\t\tfor (int _i = 0; _i < a[i].size(); _i++) if (a[i][_i] != fa) find_ans(a[i][_i], 1, i);\n\t\tfor (int _i = 0; _i < g[i][j].u.size(); _i++) if (g[i][j].u[_i] != fa) find_ans(g[i][j].u[_i], 0, i);//\u4e24\u79cd\u65b9\u6848\u4e00\u8d77\u4e0a\uff01\n\t}\n}\nint main(){\n//\tfreopen(\"test_file/in.txt\", \"r\", stdin);\n//\tfreopen(\"test_file/out.out\", \"w\", stdout);\n\tmemset(f, 0, sizeof(f));\n\tmemset(ans, 0, sizeof(ans));\n\tmemset(vis, 0, sizeof(vis));\n    //\u8f93\u5165\n    cin >> n;\n    for (int i = 1; i <= n; i++) cin >> w[i];\n    for (int i = 1; i < n; i++){\n    \tint u, v;\n    \tcin >> u >> v;\n    \ta[u].add(v);\n    \ta[v].add(u);\n    } \n    //\u91cd\u70b9x1\n    dfs(1, 0);\n    cout << f[1][1] << ' ';\n    //\u91cd\u70b9x2\n    find_ans(1, 1, 0);\n    int cnt = 0;\n    for (int i = 1; i <= n; i++) if (ans[i]) cnt++;\n    cout << cnt << endl;\n    for (int i = 1; i <= n; i++) if (ans[i]) cout << i << \" \";\n    cout << endl;\n//    for (int i = 1; i <= n; i++){\n//    \tfor (int j = 0; j < 2; j++){\n//    \t\tprintf(\"%d %d # \", g[i][j].now_ct, g[i][j].all);\n//    \t\tfor (int k = 0; k < g[i][j].u.size(); k++) cout << g[i][j].u[k] << ' ';\n//    \t\tcout << \"| \";\n//    \t}\n//    \tcout << endl;\n//    }\n\treturn 0;//\u534e\u4e3d\u7684\u7ed3\u675f\uff01\n}\n```\n\n## \u6c42\u7ba1\u7406\u5458\u5927\u5927\u901a\u8fc7qwq\uff0c\u6211\u7684\u65b9\u6cd5\u548c\u7b2c\u4e00\u7bc7\u9898\u89e3\u4e0d\u4e00\u6837\uff01",
        "postTime": 1581827081,
        "uid": 171288,
        "name": "Tony2",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1120D \u3010Power Tree\u3011"
    },
    {
        "content": "\u53e6\u4e00\u79cd\u601d\u8def\uff1f\n### CF1120D Power Tree\n\n\u4ece\u7b80\u5355\u7684\u60c5\u51b5\u51fa\u53d1\u5f80\u5f80\u662f\u89e3\u51b3\u95ee\u9898\u7684\u4e00\u79cd\u4f18\u79c0\u7684\u7b56\u7565\u3002\n\n\u5148\u6765\u770b\u770b\u83ca\u82b1\u56fe\u7684\u60c5\u51b5\uff081\u4e3a\u6839\u8282\u70b9\uff0c\u5176\u4f59\u4e3a\u53f6\u5b50\uff09\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u5408\u6cd5\u89e3\u5373\u4e3a\u63a7\u5236\u6240\u6709\u7684\u53f6\u5b50\u6216\u5c11\u63a7\u5236\u4e00\u4e2a\u53f6\u5b50\u5e76\u63a7\u5236\u6839\u3002\n\n\u7a0d\u5fae\u63a8\u4e00\u63a8\u5c31\u4f1a\u53d1\u73b0\u5982\u4e0b\u7684\u6027\u8d28\u3002\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u53f6\u5b50\u7684**\u6700\u8fd1\u63a7\u5236\u70b9**\u4e3a\u79bb\u5b83\u6700\u8fd1\u7684\u88ab\u63a7\u5236\u7684\u7956\u5148\u3002\u663e\u7136\u6bcf\u4e2a\u53f6\u5b50\u90fd\u5fc5\u987b\u6709\u6700\u8fd1\u63a7\u5236\u70b9\u3002\n\n#### \u6027\u8d28\u4e00   \u65b9\u6848\u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u53f6\u5b50\u7684\u6700\u8fd1\u63a7\u5236\u70b9\u4e24\u4e24\u4e0d\u540c\n\n~~OIER\u7ba1\u4ec0\u4e48\u8bc1\u660e~~\n\n\u5fc5\u8981\u6027\uff1a\u5982\u679c\u4e24\u4e2a\u53f6\u5b50\u7684\u6700\u8fd1\u63a7\u5236\u70b9\u76f8\u540c\uff0c\u5219\u5b83\u4eec\u201c\u5e76\u8054\u201d\uff0c\u53ea\u80fd\u88ab\u4e00\u8d77\u63a7\u5236\u3002\n\n\u5145\u5206\u6027\uff1a\u5c06\u6240\u6709\u63a7\u5236\u70b9\u6309\u6df1\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u4ece\u524d\u5f80\u540e\u64cd\u4f5c\uff0c\u5219\u540e\u9762\u7684\u64cd\u4f5c\u4e0d\u4f1a\u5f71\u54cd\u524d\u9762\u3002\n\n#### \u6027\u8d28\u4e8c   \u6bcf\u68f5\u5b50\u6811\u4e2d\u6700\u591a\u6709\u4e00\u4e2a\u53f6\u5b50\u7684\u6700\u8fd1\u63a7\u5236\u70b9\u5728\u5b50\u6811\u5916\n\n\u7531\u6027\u8d28\u4e00\u53ef\u77e5\u4e24\u4e2a\u53f6\u5b50\u7684LCA\u5fc5\u5b9a\u4e3a\u5b83\u4eec\u7684\u6700\u8fd1\u63a7\u5236\u70b9\u7684\u7956\u5148\u3002\u5bf9\u4e8e\u5b50\u6811$u$ \u4e2d\u7684\u4e24\u4e2a\u53f6\u5b50\uff0c\u5982\u679c\u5b83\u4eec\u7684\u6700\u4f18\u63a7\u5236\u70b9\u90fd\u5728\u5b50\u6811$u$ \u5916\uff0c\u663e\u7136\u5b83\u4eec\u7684lca\u4e3a$u$\u6216$u$\u7684\u540e\u4ee3\uff0c\u8fd9\u4e0d\u884c\u3002\n\n\u5f53\u7136\uff0c\u53ea\u6709\u4e00\u4e2a\u53f6\u5b50\u5728\u5b50\u6811\u5916\u662f\u53ef\u80fd\u7684\uff0c\n\n------\n\n\u7531\u4e0a\u9762\u7684\u4e24\u4e2a\u6027\u8d28\uff0c\u72b6\u6001\u53ca\u72b6\u6001\u8f6c\u79fb\u4e0d\u96be\u770b\u51fa\u3002\uff08\u6211\u4eec\u79f0\u5b50\u6811\u88ab\u63a7\u5236\u5f53\u4e14\u4ec5\u5f53\u5176\u6240\u6709\u53f6\u5b50\u7684\u6700\u8fd1\u63a7\u5236\u70b9\u90fd\u5728\u5176\u4e2d\u3002\uff09\u4ee4$d(u,1)$\u8868\u793a\u5b50\u6811$u$\u88ab\u63a7\u5236\u7684\u6700\u5c0f\u8d39\u7528\uff0c$d(u,0)$\u8868\u793a\u5b50\u6811$u$\u6ca1\u6709\u88ab\u5b8c\u5168\u63a7\u5236\uff0c**\u4ec5\u6709\u4e00\u4e2a\u8282\u70b9\u7684\u6700\u4f18\u63a7\u5236\u70b9\u5728$u$\u4e4b\u5916\u7684\u6700\u5c0f\u8d39\u7528**\u3002\n\n\u7136\u540e\u5c31\u6709\uff1a\n\n$$d(u,1)=\\min\\{\\sum_{v\\in ch[u]}d(v,1), \\sum_{v\\in ch[u]} d(v,1) - \\max_{v\\in ch[u]}\\{d(v,1)-d(v,0)\\}+w[u]\\}$$\n\n\n\n$$d(u,0)=\\min\\{\\sum_{v\\in ch[u]}d(v,1),\\sum_{v\\in ch[u]}d(v,1)-\\max_{v\\in ch[u]}\\{d(v,1)-d(v,0)\\}\\}$$\n\n------\n\n~~\u4ec0\u4e48\uff1f\u4f60\u5929\u771f\u5730\u4ee5\u4e3a\u8fd9\u5c31\u662f\u7d2b\u9898\u7684\u96be\u5ea6?~~\n\n\u4e2a\u4eba\u611f\u89c9\u8fd9\u9898\u7684\u8f93\u51fa\u53ca\u5176\u6bd2\u7624\u2026\u2026\u6bd4\u8f83\u5bb9\u6613\u7684\u5b9e\u73b0\u65b9\u6cd5\uff1a\u7528bfs,\u5728dp\u7684\u8fc7\u7a0b\u4e2d\u5b58\u4e00\u4e0b\u8f6c\u79fb\uff08\u5c31\u662f\u4e4b\u524d\u90a3\u4e2a\u7279\u6b8a\u7684v\uff09\uff0c\u540c\u65f6\u8981\u8fdb\u884c\u5f88\u591a\u7279\u5224\u2026\u2026\u4e0d\u59a8\u5177\u4f53\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define LL long long\nconst int maxn=2e5+5;\nint n,deg[maxn],w[maxn];\nLL d[maxn][2];\nvector<int> G[maxn];\nvector<int> p[maxn][2];\nvoid dfs(int u,int fa)\n{\n\tif(deg[u]==1&&fa)\n\t{\n\t\td[u][1]=w[u],d[u][0]=0;\n\t\treturn;\n\t}\n\tLL tmp=0;\n\tfor(int i=0,v;i<G[u].size();++i) if((v=G[u][i])!=fa)\n\t{\n\t\tdfs(v,u);\n\t\ttmp+=d[v][1];\n\t}\n\td[u][1]=d[u][0]=tmp;\n\tfor(int i=0,v;i<G[u].size();++i) if((v=G[u][i])!=fa)\n\t{\n\t    d[u][1]=min(d[u][1],tmp-d[v][1]+d[v][0]+w[u]),d[u][0]=min(d[u][0],tmp-d[v][1]+d[v][0]);\n\t}\n\tfor(int i=0,v;i<G[u].size();++i) if((v=G[u][i])!=fa)\n\t{\n\t\tif(d[u][1]==tmp-d[v][1]+d[v][0]+w[u]) p[u][1].push_back(v);\n\t\tif(d[u][0]==tmp-d[v][1]+d[v][0]) p[u][0].push_back(v);\n        //\u8f6c\u79fb\u53ef\u80fd\u591a\u4e8e\u4e00\u79cd\uff0c\u7528vector\u5b58\n\t}\n}\nbool chose[maxn],vis[maxn][2];\nstruct Node\n{\n\tint u,fa,tp;\n};\nqueue<Node> Q;\nvoid bfs()\n{\n\tQ.push((Node){1,0,1});\n\twhile(!Q.empty())\n\t{\n\t\tint u=Q.front().u,fa=Q.front().fa,tp=Q.front().tp;\n\t\tQ.pop();\n\t\tif(deg[u]==1&&fa)\n\t\t{\n\t\t\tif(tp) chose[u]=1;\n\t\t\tcontinue;\n\t\t}\n        //\u5728\u8fd9\u91cc\u91cd\u65b0\u505a\u4e00\u904d\u2026\u2026\u4e3b\u8981\u662f\u8981\u7279\u5224\u4e00\u4e9b\u7279\u6b8a\u7684\u60c5\u51b5\n\t\tLL tmp=0;\n\t\tfor(int i=0,v;i<G[u].size();++i) if((v=G[u][i])!=fa)\n\t\t{\n\t\t\ttmp+=d[v][1];\n\t\t}\n\t\tif(tmp==d[u][tp])//\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0bp\u4e0d\u4e00\u5b9a\u4e3a\u7a7a\uff0c\u800c\u5982\u679c\u4e0d\u8fdb\u884c\u8fd9\u4e2a\u7279\u5224\u53ef\u80fd\u4f1a\u4f7f\u540e\u9762\u539f\u672c\u53ef\u4ee5\u4f5c\u4e3ad(v,1)\u7684v\u88ab\u8df3\u8fc7\n\t\t{\n\t\t\tfor(int i=0,v;i<G[u].size();++i) if((v=G[u][i])!=fa&&!vis[v][1]) vis[v][1]=1,Q.push((Node){v,u,1});\n\t\t}\n\t\tif(p[u][tp].size()==1)//\u5b83\u548c\u4e4b\u524d\u7684\u5e76\u4e0d\u4e92\u65a5\n\t\t{\n\t\t\tif(tp||w[u]==0) chose[u]=1;\n\t\t\tfor(int i=0,v;i<G[u].size();++i) if((v=G[u][i])!=fa&&v!=p[u][tp][0]&&!vis[v][1])\n\t\t\t{\n\t\t\t\t vis[v][1]=1;\n\t\t\t\t Q.push((Node){v,u,1});\n\t\t\t}\n\t\t\tif(!vis[p[u][tp][0]][0]) vis[p[u][tp][0]][0]=1,Q.push((Node){p[u][tp][0],u,0}); \n\t\t} else if(p[u][tp].size()>1){//\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u5b50\u8282\u70b9\u90fd\u6709\u53ef\u80fd\u4f5c\u4e3ad(v,1)\u52a0\u5165\n\t\t\tif(tp||w[u]==0)chose[u]=1;\n\t\t\tfor(int i=0,v;i<G[u].size();++i) if((v=G[u][i])!=fa&&!vis[v][1]) Q.push((Node){v,u,1});\n\t\t\tfor(int i=0;i<p[u][tp].size();++i)\n\t\t\t{\n\t\t\t\tif(!vis[p[u][tp][i]][0]) vis[p[u][tp][i]][0]=1,Q.push((Node){p[u][tp][i],u,0});\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i) scanf(\"%d\",&w[i]);\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tint x,y;scanf(\"%d%d\",&x,&y);\n\t\tG[x].push_back(y),G[y].push_back(x);\n\t\t++deg[x],++deg[y]; \n\t}\n\tdfs(1,0);\n\tbfs();\n\tint tot=0;\n\tfor(int i=1;i<=n;++i) if(chose[i]) ++tot;\n\tprintf(\"%lld %d\\n\",d[1][1],tot);\n\tfor(int i=1;i<=n;++i) if(chose[i]) printf(\"%d \",i);\n\treturn 0;\n } \n```\n\n",
        "postTime": 1595828435,
        "uid": 161577,
        "name": "psoet",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1120D \u3010Power Tree\u3011"
    },
    {
        "content": "[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/jiangtaizhe001/p/16629268.html)  \n\n[\u9898\u76ee\u4f20\u9001\u95e8](http://codeforces.com/problemset/problem/1120/D)  \n### \u9898\u76ee\u5927\u610f\n\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u6709\u6839\u6811\uff0c$1$ \u4e3a\u6839\u3002  \n\u4f60\u53ef\u4ee5\u9009\u62e9\u82b1\u8d39 $w_u$ \u7684\u4ee3\u4ef7\u63a7\u5236 $u$ \u70b9\u3002\u5f53\u4e00\u4e2a\u70b9\u88ab\u63a7\u5236\u65f6\u4f60\u53ef\u4ee5\u9009\u62e9\u7ed9\u5b83\u7684\u5b50\u6811\u5185\u7684\u53f6\u5b50\u7684\u70b9\u6743\u90fd\u52a0\u4e0a\u4e00\u4e2a\u503c $v$\u3002\u4f60\u9700\u8981\u63a7\u5236\u82e5\u5e72\u4e2a\u70b9\uff0c\u4f7f\u5f97\u82b1\u8d39\u7684\u4ee3\u4ef7\u5c3d\u91cf\u5c11\uff0c\u65e0\u8bba\u600e\u6837\u89c4\u5b9a\u53f6\u5b50\u7684\u521d\u59cb\u70b9\u6743\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u64cd\u4f5c\u4f60\u9009\u62e9\u7684\u70b9\u6765\u8ba9\u6240\u6709\u53f6\u5b50\u7684\u70b9\u6743\u6e05\u7a7a\u3002  \n\u4f60\u9700\u8981\u8f93\u51fa\u4ee3\u4ef7\u548c\u7684\u6700\u5c0f\u503c\u4ee5\u53ca\u6240\u6709\u70b9\uff0c\u6ee1\u8db3\u5b83\u5b58\u5728\u4e8e\u67d0\u4e00\u79cd\u6700\u4f18\u9009\u62e9\u4e2d\u3002\n### \u9898\u76ee\u89e3\u6790\n\u663e\u7136\u6211\u4eec\u5982\u679c\u6309\u7167 dfs \u5e8f\u5bf9\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u91cd\u6807\u53f7\uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a\u70b9\u90fd\u5bf9\u5e94\u7684\u662f\u4e00\u4e2a\u533a\u95f4\u3002  \n\u6240\u4ee5\u95ee\u9898\u5c31\u8f6c\u5316\u6210\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u73b0\u5728\u53c8 $n$ \u4e2a\u533a\u95f4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u53ef\u4ee5\u82b1\u8d39\u4ee3\u4ef7 $w_i$ \u7136\u540e\u5c06\u8fd9\u4e2a\u533a\u95f4\u533a\u95f4\u52a0\u3001\u51cf\u4efb\u610f\u4e00\u4e2a\u6570\uff0c\u4f7f\u5f97\u5e8f\u5217\u521d\u59cb\u503c\u4e3a\u4efb\u4f55\u503c\u65f6\uff0c\u90fd\u80fd\u6e05\u7a7a\u3002  \n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u8054\u60f3\u5230\u4e00\u9053\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u7ed9\u51fa\u4e00\u4e9b\u533a\u95f4\u7684\u548c\uff0c\u8be2\u95ee\u6bcf\u4e2a\u7ed9\u51fa\u533a\u95f4\u7684\u548c\u662f\u5426\u4f1a\u4e0e\u524d\u9762\u7684\u6761\u4ef6\u77db\u76fe\u3002 \n\n\u5176\u5b9e\u4e24\u9053\u9898\u7684\u89e3\u6cd5\u662f\u7c7b\u4f3c\u7684\u3002  \n\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4 $[l,r]$\uff0c\u64cd\u4f5c\u7684\u4ee3\u4ef7\u4e3a $w$\uff0c\u5982\u679c\u5c06\u6574\u4e2a\u5e8f\u5217\u5dee\u5206\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u5728 $a_l$ \u52a0\u4e0a\u4e00\u4e2a\u6570\uff0c\u7136\u540e\u5728 $a_{r+1}$ \u51cf\u53bb\u8fd9\u4e2a\u6570\uff0c\u663e\u7136\u5c31\u8f6c\u5316\u4e3a\u56fe\u4e2d\u8282\u70b9 $l,r+1$ \u4e24\u4e2a\u70b9\u4e4b\u95f4\u4e00\u6761\u8fb9\u6743\u4e3a $w$ \u7684\u65e0\u5411\u8fb9\u3002\u7136\u540e\u6700\u540e\u7684\u4ee3\u4ef7\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002  \n\n\u8fd9\u6837\u5c31\u8f6c\u5316\u4e3a\u6c42\u4e00\u5f20\u56fe\u4e2d\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u4ee5\u53ca\u53ef\u80fd\u5728\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\u7684\u8fb9\u3002  \n\u524d\u8005\u4e0d\u96be\u6c42\u51fa\u5417\uff0c\u4e3b\u8981\u7684\u95ee\u9898\u5728\u4e8e\u540e\u8005\u3002  \n\u5176\u5b9e\u8fd9\u4e2a\u95ee\u9898\u5f88\u7b80\u5355\u3002\u6211\u4eec\u8003\u8651 Kruskal \u7684\u8fc7\u7a0b\u3002  \n\u5982\u679c\u6211\u4eec\u5f53\u524d\u5904\u7406\u5230\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u9700\u8981\u540c\u65f6\u8003\u8651\u8fb9\u6743\u4e0e\u8fd9\u6761\u8fb9\u76f8\u540c\u7684\u8fb9\u662f\u5426\u80fd\u591f\u52a0\u5230\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\uff0c\u5982\u679c\u53ef\u4ee5\u52a0\u5165\u5c31\u4ee3\u8868\u8fd9\u6761\u8fb9\u53ef\u80fd\u51fa\u73b0\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u3002\u7edf\u8ba1\u5b8c\u4e4b\u540e\u518d\u4f9d\u6b21\u628a\u8fd9\u4e9b\u8fb9\u80fd\u52a0\u5165\u7684\u90fd\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u91cc\u9762\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7b97\u6cd5\u590d\u6742\u5ea6\uff1a$O(n\\log n)$\n\n\u6838\u5fc3\u4ee3\u7801\uff1a\n```cpp\nint n,u,v,head[maxn],to[maxn<<1],nex[maxn<<1],w[maxn],kkk;\n#define add(x,y) nex[++kkk]=head[x]; head[x]=kkk; to[kkk]=y\nint minx[maxn],maxx[maxn],cnt;\nvoid dfs(int x,int pre){\n\tint i; maxx[x]=-1; minx[x]=INF;\n\tfor(i=head[x];i;i=nex[i]) if(to[i]!=pre){\n\t\tdfs(to[i],x); maxx[x]=mmax(maxx[x],maxx[to[i]]); minx[x]=mmin(minx[x],minx[to[i]]);\n\t} if(maxx[x]==-1) maxx[x]=minx[x]=++cnt; return;\n}\nstruct JTZ{\n\tint num,l,r,w;\n\tbool operator < (const JTZ x) const {\n\t\treturn this->w < x.w;\n\t}\n}e[maxn];\nint fa[maxn]; int getfa(int x){ if(fa[x]==x) return x; return fa[x]=getfa(fa[x]); }\nint ans[maxn],top; ll sum;\nint main(){\n\tn=read(); int i,j,k; for(i=1;i<=n;i++) w[i]=read();\n\tfor(i=1;i<n;i++){ u=read(); v=read(); add(u,v); add(v,u); }\n\tdfs(1,-1); for(i=1;i<=n;i++) e[i].num=i,e[i].l=minx[i],e[i].r=maxx[i]+1,e[i].w=w[i];\n\tsort(e+1,e+n+1); for(i=1;i<=cnt+1;i++) fa[i]=i;\n\tfor(i=1;i<=n;i=j+1){\n\t\tj=i; while(e[i].w==e[j+1].w&&j<n) j++;\n\t\tfor(k=i;k<=j;k++){\n\t\t\tu=getfa(e[k].l); v=getfa(e[k].r);\n\t\t\tif(u!=v) ans[++top]=e[k].num;\n\t\t}\n\t\tfor(k=i;k<=j;k++){\n\t\t\tu=getfa(e[k].l); v=getfa(e[k].r);\n\t\t\tif(u!=v) fa[u]=v,sum+=e[i].w;\n\t\t}\n\t}\n\tsort(ans+1,ans+top+1);\n\tprint(sum),pc(' '),print(top),pc('\\n');\n\tfor(i=1;i<=top;i++) print(ans[i]),pc(\" \\n\"[i==top]);\n\treturn 0;\n}\n```",
        "postTime": 1661518321,
        "uid": 215042,
        "name": "jiangtaizhe001",
        "ccfLevel": 7,
        "title": "CF1120D Power Tree \u9898\u89e3"
    },
    {
        "content": "[\u66f4\u68d2\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/zzctommy/p/14066084.html)\n\n[CF1120D Power Tree](https://www.luogu.com.cn/problem/CF1120D)\n\n\u8fd9\u9898\u5982\u679c\u4e0d\u8981\u8f93\u51fa\u65b9\u6848\u7edd\u5bf9\u6ca1\u67092500\u3002\u72b6\u600110\u5206\u949f\u5c31\u5f00\u51fa\u6765\u4e86\uff0c\u8f93\u51fa\u65b9\u6848\u641e\u4e862\u4e24\u4e2a\u591a\u5c0f\u65f6\u3002\u3002\u3002\u90a3\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u89e3\u6cd5\u592a\u725b\u903c\u4e86\uff0c\u5b8c\u5168\u60f3\u4e0d\u5230\uff0c\u53ea\u80fd\u7528\u6811\u5f62dp\u4e86\u3002\n\n\u5149\u9760\u9898\u76ee\u6240\u7ed9\u7684\u90a3\u4e2a\u5f88\u50cf\u535a\u5f08\u7684\u9898\u9762\u5fc5\u7136\u6ca1\u6cd5\u505a\uff0c\u7b2c\u4e00\u6b65\u5148\u8f6c\u5316\u9898\u9762\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u53f6\u5b50\u627e\u4e00\u4e2a\"\u63a7\u5236\"\u5b83\u7684\u70b9\uff0c\u8fd9\u4e2a\u70b9\u5728\u5b83\u5230\u6839\u7684\u8def\u5f84\u4e0a\uff0c\u4f7f\u5f97\u9009\u51fa\u7684\u70b9\u4e0d\u91cd\u590d\u4e14\u6743\u503c\u548c\u6700\u5c0f\u3002\n\n\u663e\u7136\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u53f6\u5b50\u5fc5\u987b\u4e14\u4ec5\u9700\u4e00\u4e2a\u70b9\u5c31\u53ef\u4ee5\u628a\u5b83\u63a7\u5236\u6210\u9700\u8981\u7684\u6743\u503c\u3002\n\n\u7136\u540e\u662f\u9700\u8981\u76f4\u89c9\u7684\u4e00\u6b65\u4e86\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u6211\u600e\u4e48\u60f3\u5230\u7684\uff1a\u4e00\u4e2a\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811**\u9664 $u$ \u5916\u7684\u90e8\u5206**\uff0c**\u81f3\u591a\u4e00\u4e2a**\u53f6\u5b50\u6ca1\u6709\u63a7\u5236\u7684\u8282\u70b9\uff0c\u5426\u5219\u5b50\u6811\u4e0d\u5408\u6cd5\u3002\n\n\u5982\u679c\u6709\u4e00\u53f6\u5b50\u6ca1\u88ab\u63a7\u5236\uff0c\u90a3\u4e48\u6211\u4eec\u9009\u62e9 $u$ \u5373\u53ef\uff0c\u90fd\u88ab\u63a7\u5236\u4e86\u5c31\u4e0d\u7528\u9009\u4e86\u3002\n\n\u90a3\u4e48dp\u65b9\u7a0b\u5c31\u547c\u4e4b\u6b32\u51fa\u4e86\uff1a\n\n$dp[u][0]$ \u8868\u793a\uff1a\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\u5185\uff0c\u53f6\u5b50\u4e2a\u6570\u7b49\u4e8e\u9009\u51fa\u7684\u8282\u70b9\u4e2a\u6570\u7684\u6700\u5c0f\u4ee3\u4ef7\n\n$dp[u][1]$ \u8868\u793a\uff1a\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\u5185\uff0c**\u4e0d\u5305\u62ec $u$**\uff0c\u53f6\u5b50\u4e2a\u6570\u7b49\u4e8e\u9009\u51fa\u7684\u8282\u70b9\u4e2a\u6570\u52a0\u4e00\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\u8fd9\u91cc\u7684\u4e0d\u5305\u62ec $u$ \u5f88\u91cd\u8981\uff0c\u4e0d\u7136\u6ca1\u6cd5\u8f6c\u79fb\uff08\u6216\u8005\u8bf4\u6211\u4e0d\u4f1a\u8f6c\u79fb\uff09\u3002\n\n$dp[u][1]=(\\sum dp[v][0])-\\max\\{dp[v][0]-dp[v][1] \\}$ \uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5fc5\u987b\u9009\u62e9\u6070\u597d\u4e00\u68f5\u5b50\u6811\u8ba9\u5b83\u53f6\u5b50\u4e2a\u6570\u7b49\u4e8e\u9009\u51fa\u8282\u70b9\u4e2a\u6570\u52a0\u4e00\u3002\n\n$dp[u][0]=\\max(\\sum dp[v][0],dp[u][1]+w[u])$\uff0c\u8981\u4e48\u4e0d\u5305\u62ec $u$ \u7684\u5730\u65b9\u5c11\u4e86\u4e00\u4e2a\uff0c\u90a3\u4e48 $u$ \u5fc5\u987b\u9009\u3002\u8981\u4e48\u6bcf\u4e00\u4e2a\u5b50\u6811\u90fd\u6070\u597d\u9009\u6ee1\u3002\n\n\u6700\u5c0f\u4ee3\u4ef7\u5c31\u662f $dp[1][0]$\n\n------------------------\n\n\u7136\u540e\u5c31\u662f\u8f93\u51fa\u65b9\u6848\u4e86\u3002\u5176\u5b9e\u4e0d\u8d70\u5f2f\u8def\u4e5f\u8fd8\u597d\uff0c\u5c31\u662f\u8981\u60f3\u6e05\u695a\uff0c\u7136\u540e**\u5927\u529b\u4e71\u641e**\u3002\n\n\u8f93\u51fa\u65b9\u6848\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b\u6211\u7684\u601d\u8def\uff0c**\u6700\u597d\u81ea\u5df1\u4e71\u641e**\uff0c\u6bd5\u7adf\u4e71\u641e\u8fd8\u662f\u81ea\u5df1\u60f3\u6bd4\u8f83\u6e05\u695a\u3002\n\n\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u70b9\u53ef\u80fd\u53ef\u4ee5\u53d6\u5fc5\u987b\u6ee1\u8db3 $dp[u][0]=dp[u][1]+w[u]$ \u3002\u5982\u679c\u53ea\u53d6 $dp[u][1]$ \u8bf4\u660e\u8fd9\u4e2a\u70b9\u6ca1\u53d6\uff0c\u53d6\u8fd9\u4e2a\u70b9\u5c31\u5fc5\u987b\u4ece $dp[u][1]$ \u8f6c\u79fb\u7136\u540e\u52a0\u4e0a $w[u]$ \uff0c\u53c8\u8981\u8ba9\u8fd9\u9897\u5b50\u6811\u4ee3\u4ef7\u6700\u5c0f\uff0c\u90a3\u4e48 $dp[u][0]$ \u5c31\u5fc5\u987b\u4ece $dp[u][1]+w[u]$ \u8f6c\u79fb\u8fc7\u6765\u3002\n\n\u4f46\u662f\u8fd9\u6837\u8fd8\u4e0d\u591f\uff08\u597d\u50cf\u8fc7\u4e0d\u53bb\u6837\u4f8b\uff09\uff0c\u56e0\u4e3a $dp[u][0]$ \u4e0d\u4e00\u5b9a\u53ef\u4ee5\u8f6c\u79fb\u5230 $dp[1][0]$ \uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u5224\u65ad\u6bcf\u4e00\u4e2a\u72b6\u6001 $dp[u][i]$ \u662f\u5426\u53ef\u4ee5\u8f6c\u79fb\u5230  $dp[1][0]$\uff0c\u6211\u4eec\u518d\u7528\u4e00\u4e2a\u6570\u7ec4 $can[i][j]$ \u6765\u8bb0\u5f55\u8fd9\u4e2a\u3002\n\n\u518d\u8bb0\u4e00\u4e9b\u8f85\u52a9\u53d8\u91cf\uff1a\n\n$g[u]$ \u8868\u793a $\\max\\{dp[v][0]-dp[v][1] \\}$\uff0c\u90a3\u4e48 $dp[u][0]=(\\sum dp[v][0])-g[u]$\uff1b\n\n$num[u]$ \u8868\u793a $dp[u][0]$ \u53ef\u4ee5\u4ece\u591a\u5c11\u4e2a $dp[v][1]$ \u8f6c\u79fb\u8fc7\u6765\n\n$sum[u]$ \u8868\u793a $\\sum dp[v][0]$\n\n\u7136\u540e\u8f6c\u79fb $can$ \uff0c\u4e3b\u8981\u601d\u60f3\u5c31\u662f\u5224\u65ad $v$ \u662f\u5426\u53ea\u80fd\u4ece $dp[v][0]$ \u6216 $dp[v][1]$ \u8f6c\u79fb\u4e0a\u6765\u3002\n\n+ \u5982\u679c $can[u][0]=1$ \n\n  + \u8f6c\u79fb\u5230 $can[v][0]$\n\n    + \u5982\u679c $num[u]$ \u5927\u4e8e $1$ \uff0c\u90a3\u4e48 $can[v][0]$ \u7b49\u4e8e $1$ \uff0c\u56e0\u4e3a\u5b83\u4e0d\u5fc5\u987b\u4ece $dp[u][1]$ \u8f6c\u79fb\u4e0a\u53bb\u3002\n\n    + \u5982\u679c $g[u]\\not= dp[v][0]-dp[v][1]$ \uff0c\u90a3\u4e48 $can[v][0]$ \u7b49\u4e8e $1$\uff0c\u56e0\u4e3a $dp[u][0]$ \u6839\u672c\u4e0d\u662f\u4ece $dp[v][1]$ \u8f6c\u79fb\u4e0a\u53bb\u7684\uff0c\u5fc5\u7136\u662f\u4ece $dp[v][0]$ \u8f6c\u79fb\u4e0a\u53bb\u3002\n\n    + \u5982\u679c $sum[u]=dp[u][0]$ \uff0c\u90a3\u4e48 $can[v][0]$ \u7b49\u4e8e $1$ \uff0c\u56e0\u4e3a $u$ \u53ef\u4ee5\u5168\u90e8\u4ece $dp[v][0]$ \u8f6c\u79fb\u4e0a\u6765\u3002\n\n  + \u8f6c\u79fb\u5230 $can[v][1]$\n \n    + \u5982\u679c $sum[u]-dp[v][0]+dp[v][1]+w[u]=dp[u][0]$ \uff0c\u90a3\u4e48 $can[v][1]=1$ \uff0c\u5373\u5f3a\u5236\u4ece $dp[v][1]$ \u8f6c\u79fb\u4e0a\u6765\uff0c\u770b\u770b\u662f\u5426\u6539\u53d8\u6700\u4f18\u89e3\u3002\n\n+ \u5982\u679c $can[u][1]=1$\n\n  + \u8f6c\u79fb\u5230 $can[v][0]$\n\n    + \u5982\u679c $g[u]\\not= dp[v][0]-dp[v][1]$ \uff0c\u90a3\u4e48 $can[v][0]$ \u7b49\u4e8e $1$ \uff0c\u56e0\u4e3a\u5b83\u6839\u672c\u4e0d\u4f1a\u8f6c\u79fb\u5230 $dp[u][1]$\u3002\n\n    + \u5982\u679c $num[u]>1$ \uff0c\u90a3\u4e48 $can[v][0]$ \u7b49\u4e8e $1$ \uff0c\u56e0\u4e3a $dp[u][1]$ \u6709\u591a\u79cd\u9009\u62e9\uff0c$dp[v]$ \u53ef\u4ee5\u4ece $0$ \u8f6c\u79fb\u4e0a\u53bb\u3002\n\n  + \u8f6c\u79fb\u5230 $can[v][1]$\n\n    + \u5982\u679c $g[u]=dp[v][0]-dp[v][1]$ \uff0c\u90a3\u4e48 $can[v][1]$ \u7b49\u4e8e $1$ \uff0c\u4ece\u4e0a\u9762\u7684\u8f6c\u79fb\u65b9\u7a0b\u53ef\u4ee5\u770b\u51fa $dp[u][1]$ \u53ef\u4ee5\u4ece $dp[v][1]$ \u8f6c\u79fb\u4e0a\u6765\u3002\n\n~~\u8c03\u6b7b\u6211\u4e86\uff0c\u592a\u4e71\u641e\u4e86~~ \n\n\u800c\u4e14\u4e3a\u5565\u6ca1\u6709spj\u554a/fn\uff0c\u597d\u597d\u7684 $O(n)$ \u53c8\u56e0\u4e3a\u8f93\u51fa\u53d8\u6210\u4e86 $O(n\\log n)$ \uff0c\u548c\u90a3\u79cd\u975e\u5e38\u725b\u903c\u7684\u6700\u5c0f\u751f\u6210\u6811\u89e3\u6cd5\u590d\u6742\u5ea6\u76f8\u540c\u4e86\u3002\u672c\u6765\u8fd8\u4ee5\u4e3a\u201c\u7406\u8bba\u590d\u6742\u5ea6\u66f4\u4f18\u201d\u7684/kk\n\n\n```cpp\n//Orz cyn2006\n#include<bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define mkp(x,y) make_pair(x,y)\n#define pb(x) push_back(x)\n#define sz(v) (int)v.size()\ntypedef long long LL;\ntypedef double db;\ntemplate<class T>bool ckmax(T&x,T y){return x<y?x=y,1:0;}\ntemplate<class T>bool ckmin(T&x,T y){return x>y?x=y,1:0;}\n#define rep(i,x,y) for(int i=x,i##end=y;i<=i##end;++i)\n#define per(i,x,y) for(int i=x,i##end=y;i>=i##end;--i)\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-')f=0;ch=getchar();}\n    while(isdigit(ch))x=x*10+ch-'0',ch=getchar();\n    return f?x:-x;\n}\nconst int N = 200005;\nint n, w[N], deg[N], num[N];\nvector <int> ans;\nLL dp[N][2], sum[N], g[N];\nint hed[N], et;\nbool lef[N], can[N][2];\nstruct edge { int nx, to; }e[N << 1];\nvoid adde(int u, int v) { e[++ et].nx = hed[u], e[et].to = v, hed[u] = et; }\nvoid dfs(int u, int ft) {\n\tif (deg[u] == 1 && u != 1) {\n\t\tdp[u][0] = w[u], dp[u][1] = 0, lef[u] = 1;\n\t\treturn;\n\t}\n\tLL mx = 0;\n\tfor (int i = hed[u]; i; i = e[i].nx) {\n\t\tint v = e[i].to; if (v == ft) continue;\n\t\tdfs(v, u);\n\t\tsum[u] += dp[v][0];\n\t\tif(mx < dp[v][0] - dp[v][1]) mx = dp[v][0] - dp[v][1], g[u] = mx, num[u] = 1;\n\t\telse if (mx == dp[v][0] - dp[v][1]) ++ num[u];\n\t}\n\tdp[u][1] = sum[u] - mx;\n\tdp[u][0] = min(dp[u][1] + w[u], sum[u]);\n}\nvoid calc(int u, int ft) {\n\tif (can[u][0] && dp[u][0] == dp[u][1] + w[u]) ans.pb(u);\n\tfor (int i = hed[u]; i; i = e[i].nx) {\n\t\tint v = e[i].to; if (v == ft) continue;\n\t\tif (can[u][0]) {\n\t\t\tif (sum[u] - dp[v][0] + dp[v][1] + w[u] == dp[u][0]) can[v][1] = 1;\n\t\t\tif (sum[u] == dp[u][0] || g[u] != dp[v][0] - dp[v][1] || num[u] > 1) can[v][0] = 1;\n\t\t}\n\t\tif (can[u][1]) {\n\t\t\tif (g[u] == dp[v][0] - dp[v][1]) can[v][1] = 1;\n\t\t\tif (g[u] != dp[v][0] - dp[v][1] || num[u] > 1) can[v][0] = 1;\n\t\t}\n\t\tcalc(v, u);\n\t}\n}\nsigned main() {\n\tn=read();\n\trep (i, 1, n) w[i] = read();\n\trep (i, 2, n) {\n\t\tint x = read(), y = read();\n\t\tadde(x, y), adde(y, x), ++ deg[x], ++ deg[y];\n\t}\n\tdfs(1, 0), can[1][0] = 1, can[1][1] = dp[1][0] == dp[1][1] + w[1], calc(1, 0);\n\tprintf(\"%lld %d\\n\",dp[1][0], sz(ans));\n\tsort(ans.begin(), ans.end());\n\trep(i, 0, sz(ans) - 1) printf(\"%d \", ans[i]);\n\tputs(\"\");\n\treturn 0;\n}\n```",
        "postTime": 1606805728,
        "uid": 123384,
        "name": "tommy0221",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1120D \u3010Power Tree\u3011"
    },
    {
        "content": "### CF1120D Power Tree\n\n\u4e3a\u4e86\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff0c\u5efa\u8bae\u5230 luogu \u535a\u5ba2\u6216\u8005 [\u8fd9\u91cc](https://www.yijan.co/cf1120d-power-tree/) \u9605\u8bfb\u3002\n\n\n\u9996\u5148\u8fd9\u9898\u6709\u4e2a\u975e\u5e38\u663e\u7136\u7684\u505a\u6cd5\u3002\u8003\u8651\u81ea\u6df1\u5411\u6d45\u653e\u70b9\uff0c\u90a3\u4e48\u5f53\u51b3\u5b9a\u5728 $u$ \u662f\u5426\u653e\u70b9\u7684\u65f6\u5019\u5b50\u6811\u5185\u7684\u53f6\u5b50\u90fd\u88ab\u6b63\u597d\u4e00\u4e2a\u89c2\u5bdf\u70b9\u8986\u76d6\u6216\u8005\u53ea\u6709\u4e00\u4e2a\u6ca1\u6709\u88ab\u8986\u76d6\u3002\u5426\u5219\u662f\u65e0\u6cd5\u5b8c\u6210\u9898\u76ee\u7684\u6761\u4ef6\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5 $dp[u][0/1]$ \u8868\u793a $u$ \u5b50\u6811\u5185\u6709 $0/1$ \u4e2a\u5269\u4e0b\u7684\u70b9\u505a\u4e00\u6b21\u6811\u5f62 dp\u3002\n\n\u53ef\u662f\u8fd8\u6709\u4e00\u4e2a\u66f4\u52a0\u4f18\u79c0\u7684\u505a\u6cd5\u3002\n\n\u6211\u4eec\u8003\u8651\u8fd9\u4e2a\u64cd\u4f5c\u7684\u672c\u610f\u5176\u5b9e\u662f\u533a\u95f4\u8fdb\u884c + / - \u3002\u6839\u636e NOIP 2018 \u7684\u7ecf\u9a8c\u6211\u4eec\u77e5\u9053\u8fd9\u4e2a\u4e1c\u897f\u5f88\u591a\u65f6\u5019\u4f1a\u8f6c\u5316\u6210\u5dee\u5206\u7684 + \u6216\u8005 - \u3002\u4e8e\u662f\u6211\u4eec\u8003\u8651\u628a\u53f6\u5b50\u63d0\u51fa\u6765\u6309\u7167 dfs \u5e8f\u6446\u653e\u3002\u5bf9\u4e8e\u4e00\u6b21\u653e\u4e1c\u897f\u64cd\u4f5c\uff0c\u653e\u4e0b\u53bb\u540e\u5c31\u662f \u533a\u95f4\u5185\u53ef\u4ee5\u540c\u65f6\u589e\u52a0\u4e00\u4e2a\u503c\uff0c\u4e5f\u5c31\u662f\u533a\u95f4\u524d\u9762\u7684\u5dee\u5206\u52a0\u540e\u9762\u7684\u5dee\u5206\u51cf\u3002\u6211\u4eec\u53ef\u4ee5\u8fde\u4e00\u6761\u4ece\u533a\u95f4\u5f00\u5934\u5230\u7ed3\u5c3e\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8fb9\uff0c\u8868\u793a\u53ef\u4ee5\u540c\u65f6\u64cd\u4f5c\u8fd9\u4fe9\u5730\u65b9\uff08\u4e00\u4e2a\u52a0\u4e00\u4e2a\u51cf\uff09\u3002\n\n\u6211\u4eec\u8003\u8651\u8fde\u51fa\u6765\u7684\u56fe\uff1a\n\n- \u5b83\u6709 $c + 1$ \u4e2a\u8282\u70b9\uff08\u5176\u4e2d $c$ \u4e3a\u53f6\u5b50\u6570\uff09\uff0c\u56e0\u4e3a\u53ef\u80fd\u8fde\u5411\u6700\u540e\u4e00\u4e2a\u53f6\u5b50\u540e\u4e00\u4e2a\u8282\u70b9\u3002\n\n- \u8fd9\u4e2a\u56fe\u6ca1\u6709\u91cd\u8fb9\u548c\u81ea\u73af\uff08\u60f3\u4e00\u60f3\u53d1\u73b0\u663e\u7136\uff09\n\n- \u56e0\u4e3a\u60f3\u8981\u9009\u62e9\u6700\u5c11\u7684\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u9009\u8fb9\u5f62\u6210\u4e00\u68f5\u6811\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u5dee\u5206\u7684\u53d8\u6362\u662f\u4e0d\u4f1a\u8ba9\u603b\u5927\u5c0f\u548c\u53d8\u5316\u7684\u3002\u6211\u4eec\u6700\u7ec8\u5e0c\u671b\u7684\u662f\u80fd\u591f\u628a\u6240\u6709\u6743\u503c\u90fd\u5806\u5230\u6700\u540e\u4e00\u4e2a\u53f6\u5b50\u540e\u9762\u7684\u90a3\u4e2a\u865a\u70b9\u4e0a\uff0c\u5426\u5219\u5c31\u5f97\u5230\u7684\u4e00\u5b9a\u4e0d\u662f\u4e00\u4e2a\u5168 $0$ \u7684\u53f6\u5b50\u5e8f\u5217\u3002\n\n    \u4e8e\u662f\u9009\u8fb9\u7684\u65f6\u5019\u9009\u51fa\u73af\u6765\u4e00\u5b9a\u662f\u4e0d\u660e\u667a\u7684\uff0c\u56e0\u4e3a\u73af\u4e0a\u5fc5\u7136\u6709\u4e00\u6761\u8fb9\u76f4\u5230\u6700\u540e\u90fd\u4e0d\u9700\u8981\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u5c31\u53ef\u4ee5\u5b8c\u6210\u628a\u6743\u503c\u5168\u90e8\u8f6c\u79fb\u7684\u76ee\u7684\uff08\u5176\u4ed6\u7684\u70b9\u7684\u6743\u503c\u5411\u5f80\u5916\u8f93\u7684\u70b9\u901a\u8fc7\u4e00\u6761\u94fe\u8fc7\u53bb\u5c31\u597d\u4e86\uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u5220\u6389\u8fd9\u6761\u8fb9\u3002\n\n    \u540c\u65f6\uff0c\u5982\u679c\u4e0d\u8054\u901a\u4e00\u5b9a\u4e0d\u53ef\u53d6\u3002\u5982\u679c\u4e0d\u8054\u901a\u4e86\uff0c\u5fc5\u7136\u6709\u4e9b\u70b9\u5411\u6700\u540e\u4e00\u4e2a\u53f6\u5b50\u540e\u9762\u7684\u90a3\u4e2a\u865a\u70b9\u6ca1\u6709\u8def\uff0c\u6c38\u8fdc\u8fc7\u4e0d\u53bb\uff0c\u5c31\u7206\u70b8\u4e86\u3002\n\n    \u6240\u4ee5\uff0c\u6700\u7ec8\u9009\u5f97\u5230\u7684\u4e00\u5b9a\u5c31\u662f\u8fd9\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u6700\u540e\u8bf4\u4e00\u4e0b\u8f93\u51fa\u7b54\u6848\u3002\u3002\u8fd9\u9898\u4e0d\u77e5\u9053\u4e3a\u5565\u8981\u8ba9\u4f60\u8f93\u51fa\u8fd9\u79cd\u5947\u5999\u7684\u4e1c\u897f\uff0c\u5927\u6982\u5c31\u662f\u5bf9\u6bcf\u4e2a\u6743\u503c\u5206\u522b\u5224\u4e0b\u54ea\u4e9b\u8fb9\u53ef\u53d6\u518d\u7edf\u4e00\u52a0\u5165\u5e76\u67e5\u96c6\u5c31\u597d\u4e86\u3002\u3002\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u89c1\u4ee3\u7801\u3002\n\n```cpp\n#include \"iostream\"\n#include \"algorithm\"\n#include \"cstring\"\n#include \"cstdio\"\n#include \"cmath\"\n#include \"vector\"\n#include \"map\"\n#include \"set\"\n#include \"queue\"\nusing namespace std;\n#define MAXN 200006\n//#define int long long\n#define rep(i, a, b) for (int i = (a), i##end = (b); i <= i##end; ++i)\n#define per(i, a, b) for (int i = (a), i##end = (b); i >= i##end; --i)\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n#define vi vector<int>\n#define all(x) (x).begin() , (x).end()\n#define mem( a ) memset( a , 0 , sizeof a )\ntypedef long long ll;\nint n;\nint A[MAXN] , deg[MAXN];\nvi G[MAXN];\n\nstruct ed {\n    int u , v , w , id;\n} E[MAXN] ; int id;\n\nint dfn[MAXN] , clo;\nvoid dfs( int u , int fa ) {\n    dfn[u] = clo + 1;\n    if( u != 1 && deg[u] == 1 ) ++ clo;\n    for( int v : G[u] ) if( v != fa ) dfs( v , u );\n    E[++ id] = { dfn[u] , clo + 1 , A[u] , u };\n}\n\nbool cmp( ed u , ed v ) {\n    return u.w < v.w;\n}\n\nint fa[MAXN];\nint find( int x ) { return x == fa[x] ? x : fa[x] = find( fa[x] ); }\n\nvoid solve() {\n    cin >> n;\n    rep( i , 1 , n ) scanf(\"%d\",A + i);\n    int u , v;\n    rep( i , 2 , n ) scanf(\"%d%d\",&u,&v) , G[u].pb( v ) , G[v].pb( u ) , ++ deg[u] , ++ deg[v];\n    dfs( 1 , 1 );\n    sort( E + 1 , E + 1 + n , cmp );\n    rep( i , 1 , clo + 1 ) fa[i] = i;\n    ll ans = 0;\n    vi re;\n    for( int i = 1 , j ; i <= n ; i = j ) {\n        j = i;\n        while( j != n + 1 && E[j].w == E[i].w ) {\n            u = find( E[j].u ) , v = find( E[j].v );\n            if( u != v ) re.pb( E[j].id );\n            ++ j;\n        }\n        rep( k , i , j - 1 ) {\n            u = find( E[k].u ) , v = find( E[k].v );\n            if( u != v ) fa[u] = v , ans += E[k].w;\n        }\n    }\n    cout << ans << ' ' << re.size() << endl;\n    sort( all( re ) );\n    for( int i : re ) printf(\"%d \",i);\n}\n\nsigned main() {\n//    freopen(\"input\",\"r\",stdin);\n//    freopen(\"fuckout\",\"w\",stdout);\n//    int T;cin >> T;while( T-- ) solve();\n    solve();\n}\n```\n\n",
        "postTime": 1585816026,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 CF1120D \u3010Power Tree\u3011"
    },
    {
        "content": "\n### CF1120D Power Tree\n\n#### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u6709\u6839\u6811\uff0c$1$ \u4e3a\u6839\u3002\u5b9a\u4e49 $u$ \u4e3a\u53f6\u5b50\u5f53\u4e14\u4ec5\u5f53\u5b83\u4e0d\u662f\u6839\u4e14\u5ea6\u6570\u4e3a $1$\u3002\n\n\u4f60\u53ef\u4ee5\u9009\u62e9\u82b1\u8d39 $w_u$ \u7684\u4ee3\u4ef7\u63a7\u5236 $u$ \u70b9\u3002\u5f53\u4e00\u4e2a\u70b9\u88ab\u63a7\u5236\u65f6\u4f60\u53ef\u4ee5\u9009\u62e9\u7ed9\u5b83\u7684\u5b50\u6811\u5185\u7684\u53f6\u5b50\u7684\u70b9\u6743\u90fd\u52a0\u4e0a\u4e00\u4e2a\u503c $v$ \u3002\u4f60\u9700\u8981\u63a7\u5236\u82e5\u5e72\u4e2a\u70b9\uff0c\u4f7f\u5f97\u82b1\u8d39\u7684\u4ee3\u4ef7\u5c3d\u91cf\u5c11\uff0c\u65e0\u8bba\u600e\u6837\u89c4\u5b9a\u53f6\u5b50\u7684\u521d\u59cb\u70b9\u6743\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u64cd\u4f5c\u4f60\u9009\u62e9\u7684\u70b9\u6765\u8ba9\u6240\u6709\u53f6\u5b50\u7684\u70b9\u6743\u6e05\u7a7a\u3002\u4f60\u9700\u8981\u8f93\u51fa\u4ee3\u4ef7\u548c\u7684\u6700\u5c0f\u503c\u4ee5\u53ca\u6240\u6709\u70b9\uff0c\u6ee1\u8db3\u5b83\u5b58\u5728\u4e8e\u67d0\u4e00\u79cd\u6700\u4f18\u9009\u62e9\u4e2d\u3002\u8fd8\u53ef\u4ee5\u8f93\u51fa\u65b9\u6848\u6570\u3002\n\n$n\\le 2\\times 10^5$\u3002\u6a21\u62df\u8d5b\u65f6\u88ab\u52a0\u5f3a\u5230 $2\\times 10^6$\u3002\n\n#### \u9898\u89e3\n\n\u6a21\u62df\u8d5b\u573a\u4e0a\u5207\u4e86 2500\uff0c\u867d\u7136\u6c34\u7684\u79bb\u8c31\uff0c\u8fd8\u662f\u5199\u4e00\u7bc7\u9898\u89e3\u5427\u3002\n\n\u9898\u610f\u8f6c\u5316\u4e3a\uff1a\u7ed9\u6bcf\u4e2a\u8282\u70b9\u9009\u62e9\u4e00\u4e2a\u7956\u5148\uff08\u6216\u8005\u81ea\u5df1\uff09\u5bf9\u4e8e\u70b9 $u$\uff0c\u5176\u5b50\u6811\u7684\u53f6\u5b50\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u8fd8\u6ca1\u6709\u9009\u62e9\uff0c\u6c42\u6700\u5c0f\u4ee3\u4ef7\u5373\u65b9\u6848\uff0c\u65b9\u6848\u6570\u3002\u6a21\u62df\u8d5b\u7684\u65f6\u5019\u51fa\u9898\u4eba\u8fd8\u8981\u8f93\u51fa\u65b9\u6848\u6570\u3002\n\n\u90a3\u4e48\u8bbe $dp_{u,1/0}$ \u8868\u793a $u$ \u7684\u5b50\u6811\u5185\u6709 $1/0$ \u4e2a\u6ca1\u6709\u9009\u62e9\u7684\u3002\u8f6c\u79fb\uff1a\u8bbe $sum_u=\\sum\\limits_{v\\in son_u}dp_{u,1}$\u3002\n\n$dp_{u,0}=\\min\\limits_{v\\in son_u} dp_{v,0}+sum_u-dp_{v,1}$\u3002\n\n$dp_{u,1}=\\min\\limits_{v\\in son_u} \\min(sum_u,dp_{v,0}+a_u+sum_u-dp_{v,1})$\u3002\n\n\u5bf9\u4e8e\u53ef\u4ee5\u5728\u6700\u4f18\u65b9\u6848\u4e2d\u7684\u70b9\uff0c\u76f4\u63a5\u518d\u641c\u4e00\u904d\u5224\u65ad\u4ece\u54ea\u91cc\u8f6c\u79fb\u8fc7\u5c31\u884c\u3002\u65b9\u6848\u6570\u53ef\u4ee5\u8ddf\u7740\u4e00\u8d77 $dp$ \u66f4\u7b80\u5355\uff0c\u7565\u3002\n\n\u590d\u6742\u5ea6 $O(n)$\u3002\n\n```cpp\nconst ll MAXN=2e6+7;\nll n,a[MAXN],dp[MAXN][2];\nbitset<MAXN>vis;\nvector<ll>tree[MAXN],P;\nvoid dfs(ll u,ll fa)\n{\n\tif(tree[u].size()==1&&u!=1)\n\t{\n\t\tdp[u][0]=0;dp[u][1]=a[u];\n\t\treturn ;\n\t}\n\tll sum=0;\n\tfor(ll i=0;i<tree[u].size();i++)\n\t{\n\t\tll v=tree[u][i];\n\t\tif(v==fa)continue;\n\t\tdfs(v,u);\n\t\tsum+=dp[v][1];\n\t}\n\tdp[u][1]=sum;\n\tfor(ll i=0;i<tree[u].size();i++)\n\t{\n\t\tll v=tree[u][i];\n\t\tif(v==fa)continue;\n\t\tdp[u][0]=min(dp[u][0],dp[v][0]+sum-dp[v][1]);\n\t\tdp[u][1]=min(dp[u][1],sum-dp[v][1]+dp[v][0]+a[u]);\n\t}\n}\nbool mp[MAXN][2];\nvoid dfs1(ll u,ll fa,ll op)\n{\n\tif(mp[u][op])return ;\n\tmp[u][op]=1;\n\tif(tree[u].size()==1&&u!=1)\n\t{\n\t\tif(op)P.push_back(u);\n\t\treturn ;\n\t}\n\tll sum=0;\n\tfor(ll i=0;i<tree[u].size();i++)\n\t{\n\t\tll v=tree[u][i];\n\t\tif(v==fa)continue;\n\t\tsum+=dp[v][1];vis[v]=0;\n\t}\n\tif(op==0)\n\t{\n\t\tll cnt=0;\n\t\tfor(ll i=0;i<tree[u].size();i++)\n\t\t{\n\t\t\tll v=tree[u][i];\n\t\t\tif(v==fa)continue;\n\t\t\tif(dp[u][0]==dp[v][0]+sum-dp[v][1])\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t\tvis[v]=1;\n\t\t\t}\n\t\t}\n\t\tfor(ll i=0;i<tree[u].size();i++)\n\t\t{\n\t\t\tll v=tree[u][i];\n\t\t\tif(v==fa)continue;\n\t\t\tif(vis[v])dfs1(v,u,0);\n\t\t\tif(cnt>1)dfs1(v,u,1);\n\t\t\telse if(cnt==1&&!vis[v])dfs1(v,u,1);\n\t\t}\n\t\treturn ;\n\t}\n\tif(dp[u][1]==sum)\n\t{\n\t\tfor(ll i=0;i<tree[u].size();i++)\n\t\t{\n\t\t\tll v=tree[u][i];\n\t\t\tif(v==fa)continue;\n\t\t\tdfs1(v,u,1);\n\t\t}\n\t}\n\tll cnt=0;\n\tfor(ll i=0;i<tree[u].size();i++)\n\t{\n\t\tll v=tree[u][i];\n\t\tif(v==fa)continue;\n\t\tif(dp[u][1]==sum-dp[v][1]+dp[v][0]+a[u])\n\t\t{\n\t\t\tcnt++;\n\t\t\tvis[v]=1;\n\t\t\tdfs1(v,u,0);\n\t\t}\n\t}\n\tfor(ll i=0;i<tree[u].size();i++)\n\t{\n\t\tll v=tree[u][i];\n\t\tif(v==fa)continue;\n\t\tif(vis[v])dfs1(v,u,0);\n\t\tif(cnt>1)dfs1(v,u,1);\n\t\telse if(cnt==1&&!vis[v])dfs1(v,u,1);\n\t}\n\tif(cnt)P.push_back(u);\n\treturn ;\n}\nint main()\n{\n \t//freopen(\".in\",\"r\",stdin);\n    //freopen(\".out\",\"w\",stdout);\n    n=read();\n    for(ll i=1;i<=n;i++)a[i]=read();\n    for(ll i=1;i<n;i++)\n    {\n    \tll u=read(),v=read();\n    \ttree[u].push_back(v);\n    \ttree[v].push_back(u);\n\t}\n\tfor(ll i=1;i<=n;i++)dp[i][0]=dp[i][1]=LLINF;\n\tdfs(1,0);dfs1(1,0,1);\n\tsort(P.begin(),P.end());P.resize(unique(P.begin(),P.end())-P.begin());\n\twrite(dp[1][1]),pc(32),write(P.size()),pc(10);\n\tfor(ll i=0;i<P.size();i++)write(P[i]),pc(32);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1679995445,
        "uid": 395288,
        "name": "Yuby",
        "ccfLevel": 6,
        "title": "CF1120D \u9898\u89e3"
    },
    {
        "content": "## \u9898\u610f\n\n> \u7ed9\u51fa\u4e00\u68f5n\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u4e2a\u4ee3\u4ef7\uff0c\u4f60\u53ef\u4ee5\u82b1\u8d39\u8fd9\u4e2a\u4ee3\u4ef7\u6765\u4f7f\u4ee5\u5176\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u5185\u7684\u53f6\u5b50\u8282\u70b9\u7684\u6743\u503c\u540c\u65f6\u589e\u52a0v\uff08\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff09\uff0c\u82b1\u8d39\u6700\u5c0f\u4ee3\u4ef7\uff0c\u4f7f\u5176\u6240\u6709\u53f6\u5b50\u8282\u70b9\u6743\u503c\u90fd\u53d8\u4e3a0\uff0c\u8f93\u51fa\u6700\u5c0f\u6743\u503c\u53ca\u6240\u6709\u53ef\u80fd\u5728\u6700\u4f18\u89e3\u5185\u7684\u70b9\n\n## \u601d\u8def\n\n\u5f88\u5de7\u5999\u7684\u505a\u6cd5\uff0c\u4e5f\u662f\u949f\u795e\u4e0a\u8bfe\u8bb2\u7684\n\n\u5bf9\u53f6\u5b50\u8282\u70b9\u6743\u503c\u8fdb\u884c\u5dee\u5206\uff0c\u90a3\u4e48\u6bcf\u6b21\u5bf9\u8282\u70b9\u4fee\u6539\uff0c\u76f8\u5f53\u4e8e\u5bf9\u4e00\u4e2a\u8282\u70b9\u53ef\u63a7\u5236\u7684\u53f6\u5b50\u8282\u70b9\u7684dfs\u5e8f\u7684\u5de6\u7aef\u70b9\u52a0\u4e0a $v$\uff0c\u53f3\u7aef\u70b9$+1$\u7684\u4f4d\u7f6e\u51cf\u53bb $v$\uff08\u6bd5\u7adf\u662f\u5dee\u5206\u4e48\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u4ea7\u751f $n$ \u4e2a\u533a\u95f4 $[l,r+1]$ \uff0c\u56e0\u4e3a\u8981\u6e05\u7a7a\u6743\u503c\uff0c\u76f8\u5f53\u4e8e\u628a\u5dee\u5206\u5e8f\u5217\u7684\u6743\u503c\u4e5f\u6e05\u7a7a\u5373\u53ef\uff0c\u53ef\u4ee5\u770b\u4f5c\u5bf9\u6bcf\u4e2a\u533a\u95f4\u4ece $l$ \u5230 $r+1$ \u8fdb\u884c\u8fde\u8fb9\uff0c\u7136\u540e\u628a\u533a\u95f4  $[l,r]$ \u7684\u6743\u503c\u8f6c\u79fb\u5230 $r+1$ \uff0c\u6700\u540e\u628adfs\u5e8f\u533a\u95f4 $[1,n]$ \u7684\u6743\u503c\u5168\u90e8\u8f6c\u79fb\u5230 $n+1$ \u5373\u53ef\uff0c\u90a3\u6211\u4eec\u5c31\u8981\u4fdd\u8bc1\u8fde\u8fb9\u540e\u6240\u6709\u533a\u95f4\u662f\u8fde\u901a\u7684\uff0c\u4e14\u4ee3\u4ef7\u6700\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u65b0\u4ea7\u751f\u7684\u8fb9\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6700\u5c0f\u751f\u6210\u6811\u7684\u5927\u5c0f\u5c31\u662f\u6700\u5c0f\u4ee3\u4ef7\n\n\u7136\u540e\u518d\u770b\u6240\u6709\u53ef\u80fd\u5728\u6700\u4f18\u89e3\u5185\u7684\u70b9\uff0c\u8fd9\u4e00\u70b9\u4e5f\u662f\u5728\u4fdd\u8bc1\u8fde\u901a\u7684\u524d\u63d0\u4e0b\u8fdb\u884c\u7684\uff0c\u800c\u4e4b\u6240\u4ee5\u662f\u53ef\u80fd\u662f\u56e0\u4e3a\u53ef\u80fd\u542b\u6709\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\uff0c\u5373\u5927\u5c0f\u76f8\u7b49\u7684\u6700\u5c0f\u751f\u6210\u6811\u6709\u591a\u79cd\u5f62\u6210\u7684\u65b9\u6cd5\uff0c\u5728kruskal\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fc7\u7a0b\u4e2d\u5c31\u53ef\u4ee5\u8fdb\u884c\u5224\u65ad\u5904\u7406\n\nAC code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<climits>\n#include<string>\n#include<cmath>\n#include<algorithm>\n#define int long long\n\nusing namespace std;\n\nconst int maxn=200010;\n\ninline int read()\n{\n\tint w=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0' || ch>'9')\n\t{\n\t\tif(ch=='-') f=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0' && ch<='9')\n\t{\n\t\tw=(w<<3)+(w<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn w*f;\n}\n\nbool ok[maxn];\nint head[maxn],n,tot,cnt;\nint w[maxn],fa[maxn],ans;\nint dfn_l[maxn],dfn_r[maxn];\n\nstruct edge\n{\n\tint to,next;\n}e[maxn*2];\n\nstruct node\n{\n\tint from,to,val,point;\n}edg[maxn];\n\nvoid add(int x,int y)\n{\n\te[++tot].to=y;\n\te[tot].next=head[x];\n\thead[x]=tot;\n}\n\nvoid e_add(int x,int y,int p)\n{\n\tedg[++tot].from=x,edg[tot].to=y;\n\tedg[tot].val=w[p],edg[tot].point=p;\n}\n\nvoid dfs(int x,int fa)\n{\n\tbool check=true;dfn_l[x]=INT_MAX;\n\tfor(int i=head[x];i;i=e[i].next)\n\t{\n\t\tint to=e[i].to;\n\t\tif(to==fa) continue;\n\t\tcheck=false;\n\t\tdfs(to,x);\n\t\tdfn_l[x]=min(dfn_l[x],dfn_l[to]);\n\t\tdfn_r[x]=max(dfn_r[x],dfn_r[to]);\n\t}\n\tif(check)\n\t{\n\t\t dfn_l[x]=dfn_r[x]=++cnt;\n\t}\n\te_add(dfn_l[x],dfn_r[x]+1,x);\n}\n\nint find(int x)\n{\n\tif(x==fa[x]) return x;\n\treturn fa[x]=find(fa[x]);\n}\n\nvoid merger(int x,int y)\n{\n\tfa[x]=y;\n}\n\nbool cmp(node a,node b)\n{\n\treturn a.val<b.val;\n}\n\nvoid kruskal()\n{\n\tfor(int i=1;i<=n+1;i++)\n\t{\n\t\tfa[i]=i;\n\t}\n\tsort(edg+1,edg+n+1,cmp);\n\tint l,r;\n\tfor(l=1;l<=n;l=r+1)\n\t{\n\t\tr=l;\n\t\twhile(r<n && edg[r].val==edg[r+1].val) r++;\n\t\tfor(int i=l;i<=r;i++)\n\t\t{\n\t\t\tint u=edg[i].from,v=edg[i].to;\n\t\t\tif(find(u)==find(v)) continue;\n\t\t\tcnt++,ok[edg[i].point]=true;\n\t\t}\n\t\tfor(int i=l;i<=r;i++)\n\t\t{\n\t\t\tint u=find(edg[i].from);\n\t\t\tint v=find(edg[i].to);\n\t\t\tif(u==v) continue;\n\t\t\tmerger(u,v);\n\t\t\tans+=edg[i].val;\n\t\t}\n\t}\n}\n\nsigned main()\n{\n\tn=read();\n\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tw[i]=read();\n\t}\n\t\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u=read();\n\t\tint v=read();\n\t\tadd(u,v),add(v,u);\n\t}\n\t\n\ttot=0,dfs(1,0);\n\t\n\tcnt=0,kruskal();\n\t\n\tcout<<ans<<\" \"<<cnt<<endl;\n\t\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(ok[i]) cout<<i<<\" \";\n\t}\n\n\treturn 0;\n}\n```\n",
        "postTime": 1667310487,
        "uid": 464366,
        "name": "NinT_W",
        "ccfLevel": 0,
        "title": "CF1120D Power Tree"
    },
    {
        "content": "~~\u8fdb\u6211\u7684\u6536\u85cf\u5939\u5403\u571f\u53bb\u5427~~              \n\n\u611f\u89c9\u8f6c\u5316\u7684\u5f88\u597d\uff0c\u4e3b\u8981\u662f\u4e5f\u80fd\u6811 dp \u5427\u8fd8\u662f\u53ea\u8bc4\u4e86 $2500$\u3002\n\n\u81ea\u5df1\u505a\u7684\u65f6\u5019\u731c\u6d4b\u4e00\u4e2a\u70b9\u5e94\u8be5\u8981\u8f6c\u5316\u6210\u8fde\u8fb9\u5173\u7cfb\u4f46\u662f\u8fd8\u662f\u6ca1\u60f3\u5230\u5dee\u5206\u2026\u2026          \n\n\u9996\u5148\u6811\u4e0a dfn \u5e8f\u5bf9\u4e8e\u53f6\u5b50\u8282\u70b9\u91cd\u6392\u6210\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\uff0c\u7136\u540e\u9009\u4e00\u4e2a\u70b9\u5c31\u76f8\u5f53\u4e8e\u533a\u95f4\u52a0\u4e00\u4e2a\u6570\uff0c\u8fd9\u4e2a\u6bd4\u8f83\u5957\u8def\u5c31\u4e0d\u8bf4\u4e86\u3002               \n\n\u63a5\u7740\u4e00\u4e2a\u6bd4\u8f83\u4f18\u79c0\u7684\u6027\u8d28\u5c31\u662f\u4f60\u53d1\u73b0\u4e00\u4e2a\u957f\u4e3a $n$ \u7684\u5e8f\u5217\u5168\u4e3a $0$ \u7b49\u4ef7\u4e3a\u539f\u5e8f\u5217\u7684\u5dee\u5206\u6570\u7ec4\u503c\u5168\u4e3a $0$ \u4f46\u8981\u9664\u5f00\u7b2c $n + 1$ \u4f4d\u7684\u503c\uff0c\u7136\u540e\u533a\u95f4\u52a0\u5c31\u662f\u9009\u62e9\u533a\u95f4\u7684\u5dee\u5206\u6570\u7ec4\u5de6\u53f3\u7aef\u70b9\u5de6\u7aef\u70b9\u52a0\u53f3\u7aef\u70b9\u51cf\u3002                 \n\n\u4ee4\u5dee\u5206\u6570\u7ec4\u4e3a $c$\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u73b0\u5728\u6240\u6709\u7684 $i \\in [1 , n],c_i$ \u503c\u8981\u5f80 $c_{n + 1}$ \u503c\u8f6c\u79fb\uff0c\u6bd4\u8f83\u597d\u7684\u662f\u4f60\u53ef\u4ee5\u81ea\u5df1\u6307\u5b9a\u52a0\u7684\u503c\u3002           \n\n\u6211\u4eec\u8003\u8651\u5c06\u201c\u52a0\u503c\u201d\u8fd9\u4e2a\u64cd\u4f5c\u770b\u6210\u201c\u8f6c\u79fb\u503c\u201d\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u5408\u7406\u7684\u8f6c\u79fb\u987a\u5e8f\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u7ba1\u4f60\u600e\u4e48\u7ed9\u503c\u6211\u6700\u540e\u90fd\u53ef\u4ee5\u628a $c$ \u6570\u7ec4\u7684\u503c\u90fd\u8f6c\u79fb\u5230 $c_{n + 1}$ \u4e0a\u9762\u53bb\u3002           \n\n\u4e0d\u96be\u53d1\u73b0\u6811\u4ece\u5e95\u5411\u4e0a\u5373\u662f\u4e00\u79cd\u5408\u6cd5\u7684\u8f6c\u79fb\u987a\u5e8f\uff0c\u6240\u4ee5\u5bf9\u4e8e\u539f\u6765\u7684\u5dee\u5206\u6570\u7ec4\u5de6\u7aef\u70b9\u52a0\u53f3\u7aef\u70b9\u51cf\u5c31\u53ef\u4ee5\u770b\u6210\u8fde\u4e00\u6761\u6709\u8fb9\u6743\u7684\u8fb9\uff0c\u90a3\u4e48\u73b0\u5728\u5728\u6240\u6709\u7684\u8fb9\u91cc\u9762\u5c06 $n + 1$ \u4e2a\u70b9\u8fde\u63a5\u6210\u4e00\u68f5\u6811\u7136\u540e\u4ee4 $n + 1$ \u4e3a\u6839\u5c31\u597d\u4e86\uff0c\u5230\u6b64\u95ee\u9898\u7ec8\u4e8e\u8f6c\u5316\u6210\u4e86\u6700\u5c0f\u751f\u6210\u6811\u3002              \n\n\u5f53\u7136\u6b64\u9898\u4e00\u4e2a\u96be\u70b9\u5728\u4e8e\u8f93\u51fa\u603b\u65b9\u6848\u7684\u5e76\u3002\u7528\u6811\u4e0a dp \u867d\u7136\u601d\u60f3\u7b80\u5355\u505a\u95ee\u9898\u4ee5\u65f6\u4e5f\u53ca\u5176\u597d\u5199\u4f46\u662f\u5728\u5904\u7406\u95ee\u9898\u4e8c\u5c31\u663e\u5f97\u5f88\u68d8\u624b\uff0c\u800c\u7528\u6700\u5c0f\u751f\u6210\u6811\u5c31\u53d1\u73b0\u95ee\u9898\u4e8c\u53d8\u5f97\u5f88\u7b80\u5355\u3002\u5c06\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\u62ce\u51fa\u6765\uff0c\u90a3\u4e48\u53ea\u8981\u4e4b\u524d\u7684\u6240\u6709\u60c5\u51b5\u91cc\u6ca1\u6709\u8fde\u8d77\u6765\u7684\u8fde\u901a\u5757\u73b0\u5728\u4f60\u4e0d\u8bba\u600e\u4e48\u8fde\u53ea\u8981\u4fdd\u8bc1\u80fd\u8fde\u6ee1\u4e0d\u6f0f\u8fb9\u5c31\u884c\uff0c\u8fd9\u4e2a\u5c31\u62ff\u51fa\u6765\u591a\u95ee\u4e00\u904d\u5c31\u597d\u4e86\u3002          \n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$\u3002\n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 2e5 + 5;\nint n,m,val[Len],head[Len],cnt,dfn[Len],tot,L[Len],R[Len],Print[Len],num;\nlong long ans;\nbool chs[Len];\nstruct node\n{\n\tint next,to;\n}edge[Len << 1];\nvoid add(int from,int to)\n{\n\tedge[++ cnt].to = to;\n\tedge[cnt].next = head[from];\n\thead[from] = cnt;\n}\nstruct Node\n{\n\tint x,y,z,w;\n\tNode(){x = y = z = w = 0;}\n\tNode(int X,int Y,int Z,int W){x = X , y = Y , z = Z , w = W;}\n}Edge[Len << 1];\nbool cmp(Node x,Node y){return x.w < y.w;}\nvoid dfs(int x,int f)\n{\n\tbool flag = 0;L[x] = 1e9 , R[x] = 0;\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == f) continue;\n\t\tdfs(to , x);\n\t\tL[x] = min(L[x] , L[to]);\n\t\tR[x] = max(R[x] , R[to]);\n\t\tflag |= 1;\t\n\t}\t\n\tif(!flag) L[x] = R[x] = dfn[x] = ++ tot;\n\tEdge[++ m] = Node(L[x] , R[x] + 1 , x , val[x]);\n}\nint fa[Len << 2];\nvoid makeSet(int x){for(int i = 1 ; i <= x ; i ++) fa[i] = i;}\nint findSet(int x){return fa[x] == x ? fa[x] : fa[x] = findSet(fa[x]);}\nvoid unionSet(int x,int y)\n{\n\tint u = findSet(x) , v = findSet(y);\n\tif(u == v) return;\n\tfa[v] = u;\n}\nint main()\n{\n\tscanf(\"%d\",&n);for(int i = 1 ; i <= n ; i ++) scanf(\"%d\",&val[i]);\n\tfor(int i = 1 ; i < n ; i ++)\n\t{\n\t\tint x,y;scanf(\"%d %d\",&x,&y);\n\t\tadd(x , y) , add(y , x);\n\t}\n\tdfs(1 , 0);sort(Edge + 1 , Edge + 1 + m , cmp);\n\tint l , r;\n\tmakeSet(tot + 1);\n\tfor(int i = 1 ; i <= m ; i = r + 1)\n\t{\n\t\tl = r = i;\n\t\twhile(r + 1 <= m && Edge[r + 1].w == Edge[l].w) r ++;\n\t\tfor(int j = l ; j <= r ; j ++) \n\t\t{\n\t\t\tint u = findSet(Edge[j].x) , v = findSet(Edge[j].y);\n\t\t\tif(u == v) continue;\n\t\t\tPrint[++ num] = Edge[j].z;\n\t\t}\n\t\tfor(int j = l ; j <= r ; j ++)\n\t\t{\n\t\t\tint u = findSet(Edge[j].x) , v = findSet(Edge[j].y);\n\t\t\tif(u == v) continue;\n\t\t\tunionSet(u , v);\n\t\t\tans += Edge[j].w;\n\t\t}\n\t}\n\tsort(Print + 1 , Print + 1 + num);\n\tprintf(\"%lld %d\\n\",ans,num);\n\tfor(int i = 1 ; i <= num ; i ++) printf(\"%d \",Print[i]);\n\treturn 0;\n}\n```",
        "postTime": 1632383284,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1120D Power Tree"
    },
    {
        "content": "### Solve\n\n\u6c42\u51fa\u8be5\u6811\u6bcf\u4e2a**\u53f6\u5b50\u7ed3\u70b9**\u7684 DFS \u5e8f\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5b50\u6811\u4e2d\u53f6\u5b50\u7ed3\u70b9\u6700\u5927\u548c\u6700\u5c0f\u7684 DFS \u5e8f $r_u$ \u548c $l_u$\u3002\u628a\u6240\u6709\u7684\u53f6\u5b50\u7ed3\u70b9\u5355\u72ec\u62ce\u51fa\u6765\uff0c\u4ee5\u5b83\u4eec\u7684 DFS \u5e8f\u4e3a\u4e0b\u6807\uff0c\u7ec4\u6210\u4e00\u4e2a\u5e8f\u5217 $a$\uff0c\u4e0b\u6587\u4e2d\u79f0\u53f6\u5b50\u5e8f\u5217\u3002\u5bf9\u53f6\u5b50\u5e8f\u5217\u6784\u5efa\u5dee\u5206\u5e8f\u5217 $c$\u3002\n\n\u5bf9\u4e8e\u4e00\u6b21\u63a7\u5236\uff0c\u8003\u8651\u5bf9\u53f6\u5b50\u5e8f\u5217\u7684\u5dee\u5206\u5e8f\u5217\u7684\u5f71\u54cd\uff0c\u5373 $c_{l_u}+x$\uff0c$c_{r_u+1}-x$\u3002\u6700\u574f\u60c5\u51b5\u4e0b\u4e00\u5b9a\u53ef\u4ee5\u5c06 $c_{l_u}$ \u6216 $c_{r_u+1}$ \u5176\u4e2d\u4e00\u4e2a\u7f6e\u4e3a $0$\uff0c\u6700\u540e\u7684\u76ee\u7684\u662f\u5c06\u6574\u4e2a\u5dee\u5206\u5e8f\u5217\u9664\u4e86 $c_{n+1}$ \u4ee5\u5916\u90fd\u4e3a $0$\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u4e00\u6b21\u53ef\u80fd\u7684\u63a7\u5236\uff0c\u8fde\u63a5\u4e00\u6761 $l_u$ \u5230 $r_u+1$\uff0c\u8fb9\u6743\u4e3a $w_u$ \u7684\u65e0\u5411\u8fb9\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6574\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u5c31\u662f\u6240\u6c42\u7b54\u6848\u3002\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nint n, cur, cnt, w[200010], l[200010], r[200010], fa[400010];\nbool b[200010];\nvector<int> g[200010];\nstruct node {\n\tint u, v, w, d;\n\tnode() {}\n\tnode(int x, int y, int z, int s) {\n\t\tu = x, v = y, w = z, d = s;\n\t} \n\tbool operator < (const node &y) const {\n\t\treturn w < y.w;\n\t}\n} e[400010];\nvoid addedge(int u, int v, int w, int d) {\n\te[++cnt] = node(u, v, w, d);\n}\nvoid dfs(int u, int fa) {\n\tl[u] = 1e18;\n\tbool flag = true;\n\tfor (int i = 0; i < g[u].size(); i++) {\n\t\tif (g[u][i] == fa) continue;\n\t\tflag = false;\n\t\tdfs(g[u][i], u);\n\t\tl[u] = min(l[u], l[g[u][i]]), r[u] = max(r[u], r[g[u][i]]);\n\t}\n\tif (flag) l[u] = r[u] = ++cur;\n\taddedge(l[u], r[u] + 1, w[u], u);\n}\nint find(int u) {\n\tif (fa[u] == u) return u;\n\telse return fa[u] = find(fa[u]);\n}\nint kruskal() {\n\tsort(e + 1, e + cnt + 1);\n\tfor (int i = 1; i <= n; i++) fa[i] = i;\n\tint res = 0;\n\tfor (int i = 1; i <= cnt; i++) {\n\t\tint lst = i, now = i;\n\t\tif (find(e[now].u) != find(e[now].v)) b[e[now].d] = 1;\n\t\twhile (now < cnt && e[now + 1].w == e[lst].w) {\n\t\t\tnow++;\n\t\t\tif (find(e[now].u) != find(e[now].v)) b[e[now].d] = 1;\n\t\t}\n\t\tfor (int j = lst; j <= now; j++)\n\t\t\tif (find(e[j].u) != find(e[j].v)) {\n\t\t\t\tres += e[j].w;\n\t\t\t\tfa[find(e[j].u)] = find(e[j].v);\n\t\t\t}\n\t\ti = now;\n\t}\n\treturn res;\n}\nsigned main() {\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++) cin >> w[i];\n\tfor (int i = 1; i < n; i++) {\n\t\tint u, v; cin >> u >> v;\n\t\tg[u].push_back(v), g[v].push_back(u);\n\t}\n\tdfs(1, 0);\n\tcout << kruskal() << \" \";\n\tint tmp = 0;\n\tfor (int i = 1; i <= n; i++)\n\t\tif (b[i]) tmp++;\n\tcout << tmp << \"\\n\";\n\tfor (int i = 1; i <= n; i++)\n\t\tif (b[i]) cout << i << \" \";\n\treturn 0;\n}\n```",
        "postTime": 1667527737,
        "uid": 534654,
        "name": "Network_Error",
        "ccfLevel": 0,
        "title": "CF1120D Power Tree \u9898\u89e3"
    }
]