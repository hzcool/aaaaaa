[
    {
        "content": "# CF1009D\n\n\u8fd9\u9053\u9898\u975e\u5e38\u66b4\u529b\u3002\n\n\u5df2\u77e5\u6709 $n$ \u4e2a\u70b9\uff0c $m$ \u6761\u8fb9\u3002\n\n\u7531\u4e8e1\u548c\u6240\u6709\u6570\u4e92\u8d28\uff0c\u6240\u4ee51\u53ef\u4ee5\u8fde\u63a5\u6240\u6709\u70b9\uff0c\u56e0\u6b64\u53ea\u8981 $m \\geq n - 1$ \u6b64\u65f6\u56fe\u4e00\u5b9a\u8fde\u901a\u3002\n\n\u4e4b\u540e\u66b4\u529b\u679a\u4e3e\u53ef\u4ee5\u8fde\u63a5\u7684\u8fb9\uff0c\u7528 tot \u8bb0\u5f55\u4e00\u4e0b\u8fde\u63a5\u7684\u8fb9\u7684\u6570\u91cf\uff0c\u5982\u679c $tot \\geq m$ \u76f4\u63a5\u8fd4\u56de\u8f93\u51fa\u8fb9\uff0c\u4e0d\u7136\u8f93\u51fa impossible\u3002\n\n\u590d\u6742\u5ea6 $O(n^2)$\u3002\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 100005;\n\nvector<int> gcd_list[maxn];\nint n, m, tot;\n\nvoid init() {\n  for (int i = 1; i <= n; i++) {\n    int k = 0;\n    for (int j = i + 1; j <= n; j++) {\n      if (__gcd(i, j) == 1) {\n        gcd_list[i].push_back(j);\n        tot++;\n        if (tot > m) return;\n      }\n    }\n  }\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin >> n >> m;\n  if (m < n - 1) {\n    cout << \"Impossible\" << endl;\n    return 0;\n  }\n  init();\n  if (tot < m) {\n    cout << \"Impossible\" << endl;\n    return 0;\n  } else {\n    cout << \"Possible\" << endl;\n    for (int i = 1; i <= n; i++) {\n      for (int j = 0; j < gcd_list[i].size() && m > 0;j++, m--) {\n        cout << i << \" \" << gcd_list[i][j] << endl;\n      }\n    }\n  }\n  return 0;\n}\n```",
        "postTime": 1532156606,
        "uid": 53067,
        "name": "YuntianZhao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1009D \u3010Relatively Prime Graph\u3011"
    },
    {
        "content": "# Analysis\n\n\u9996\u5148\uff0c\u5982\u679c $m < n - 1$ \u5fc5\u5b9a\u65e0\u89e3\uff0c\u8f93\u51fa `Impossible`\u3002\n\n\u5176\u6b21\uff0c\u679a\u4e3e $i \\in \\{1, \\ldots, n\\}$ \u548c $j \\in \\{1, \\ldots, n\\}$\uff0c\u5982\u679c $\\gcd(i, j) = 1$\uff0c\u76f4\u63a5\u628a\u8fd9\u6761\u8fb9\u52a0\u5165\u7b54\u6848\u7684\u56fe\uff0c\u5224\u65ad\u5982\u679c\u5df2\u7ecf\u591f\u4e86\u76f4\u63a5\u8df3\u51fa\u53bb\u3002\n\n\u5982\u679c\u628a\u6240\u6709\u53ef\u4ee5\u52a0\u5165\u7684\u8fb9\u5168\u90e8\u52a0\u4e86\u4e5f\u6ca1\u6709 $m$ \u6761\uff0c\u8f93\u51fa `Impossible`\u3002\n\n\u5426\u5219\u8f93\u51fa `Possible`\uff0c\u7136\u540e\u628a\u52a0\u5165\u7b54\u6848\u7684\u8fb9\u8f93\u51fa\u3002\n\n\u4f46\u662f\u8fd9\u6837\u662f $\\mathcal{O}(n^2)$ \u7684\uff0c\u4f1a T \u5417\uff1f\n\n\u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u56e0\u4e3a $\\mathcal{O}(n^2)$ \u7684\u6700\u574f\u60c5\u51b5\u53ea\u5728\u65e0\u89e3\u65f6\u624d\u4f1a\u6709\uff0c\u4f46\u662f\u5982\u679c $n$ \u5f00\u6ee1\u7684\u8bdd\u663e\u7136\u4e0d\u53ef\u80fd\u56e0\u4e3a\u8fb9\u6570\u4e0d\u591f\u65e0\u89e3\uff0c\u6240\u4ee5\u4e0d\u4f1a TLE\u3002\n\n# Coding\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm> \nint n, m;\nstd::pair<std::string, std::vector<std::pair<int, int>>> SolveIt() {\n\tif (m < n - 1)\n\t\treturn std::make_pair(\"Impossible\", std::vector<std::pair<int, int>>());\n\tint number = 0;\n\tstd::vector<std::pair<int, int>> G;\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = i + 1; j <= n; j++)\n\t\t\tif (std::__gcd(i, j) == 1) {\n\t\t\t\tnumber += 1;\n\t\t\t\tG.emplace_back(i, j);\n\t\t\t\tif (number == m)\n\t\t\t\t\treturn std::make_pair(\"Possible\", G);\n\t\t\t}\n\treturn std::make_pair(\"Impossible\", std::vector<std::pair<int, int>>());\n}\nint main() {\n\tstd::cin.tie(nullptr);\n\tstd::cout.tie(nullptr);\n\tstd::ios::sync_with_stdio(false);\n\tstd::cin >> n >> m;\n\tauto ret = SolveIt();\n\tstd::cout << ret.first << \"\\n\";\n\tfor (auto i : ret.second)\n\t\tstd::cout << i.first << \" \" << i.second << \"\\n\";\n\treturn 0;\n} \n```",
        "postTime": 1669439127,
        "uid": 528472,
        "name": "codeLJH",
        "ccfLevel": 6,
        "title": "CF1009D Relatively Prime Graph \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u5927\u610f\u5341\u5206\u660e\u786e\uff0c\u5f88\u660e\u663e\u662f\u60f3\u8ba9\u6211\u4eec\u5efa\u4e00\u4e2a\u8fde\u901a\u56fe\u4f7f\u5f97\u4e92\u76f8\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u4e92\u8d28\u3002\n\n\u5f88\u663e\u7136\uff0c\u8981\u8ba9\u4e00\u4e2a\u56fe\u8054\u901a\uff0c\u6211\u4eec\u9996\u5148\u8981\u6709 $n-1$ \u6761\u8fb9\u3002\u663e\u7136\u5982\u679c $m<n-1$ \u4fbf\u662f\u65e0\u89e3\u7684\u4e00\u79cd\u7279\u4f8b\u3002\n\n\u5f53\u7136\uff0c\u5982\u679c $m$ \u6ee1\u8db3\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u9700\u8981\u4e00\u4e2a\u901a\u89e3\u6765\u6ee1\u8db3\u8054\u901a\u7684\u9898\u610f\u3002\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u53ef\u4ee5\u4f7f $1$ \u4e0e\u5176\u4ed6\u6240\u6709\u70b9\u8fde\u63a5\uff0c\u5e76\u4e14\u6ee1\u8db3\u4e92\u8d28\u3002\n\n\u5176\u4f59\u7684\uff0c\u679a\u4e3e\u5269\u4f59\u9664 $1$ \u5916\u7684\u6240\u6709\u70b9\uff0c\u4fdd\u8bc1\u4fdd\u8bc1\u4e92\u8d28\u5373\u53ef\u3002\u5faa\u73af\u5373\u53ef\u89e3\u51b3\uff0c\u5f53\u8fb9\u6570\u8fbe\u5230 $m$ \u65f6\u8df3\u51fa\u5faa\u73af\u3002\n\n\u6700\u540e\uff0c\u5982\u679c\u5c06\u6240\u6709\u53ef\u80fd\u7684\u8fb9\u5168\u90e8\u8fde\u4e0a\u4e5f\u65e0\u6cd5\u6ee1\u8db3\uff0c\u4e5f\u8f93\u51fa\u65e0\u89e3\u3002\u603b\u7684\u6765\u770b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(m)$\u3002",
        "postTime": 1659366101,
        "uid": 260074,
        "name": "Tranquil_Domain",
        "ccfLevel": 3,
        "title": "CF1009D \u9898\u89e3"
    }
]