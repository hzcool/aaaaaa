[
    {
        "content": "\u770b\u5230\u73b0\u5728\u6240\u6709\u7684\u9898\u89e3\u7528\u7684\u90fd\u662f\u5e26\u5e76\u67e5\u96c6\u7684\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u5199\u5e76\u67e5\u96c6\u7684\u3002\n\n\u601d\u8def\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u904d\u5386\u6240\u6709\u7684\u8fb9\uff0c\u5982\u679c\u8fb9\u7684\u4e24\u7aef\u989c\u8272\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u5c31\u5c06\u8fd9\u6761\u8fb9\u6743\u7f6e\u62101\uff0c\u6700\u540e\u6c42\u6811\u7684\u76f4\u5f84\u5373\u53ef\u3002\n\n\n(\u8fd9\u8fb9\u7528\u7684\u662f\u6811\u5f62DP\u6c42\u76f4\u5f84)\n\n### \u4e0b\u9762\u662fAC\u4ee3\u7801\n\n```cpp\n        #include<bits/stdc++.h> \n        using namespace std;\n        const int maxn=200005;\n        int anss,d[maxn],ans[maxn],ans1,node,tot,head[maxn],q,w,f[maxn],col[maxn];\n        struct road{int v,to,next;}a[maxn*2];\n        void add(int x,int y,int z){//\u5b58\u56fe\n        \ttot++;\n        \ta[tot].v=z;\n        \ta[tot].to=y;\n        \ta[tot].next=head[x];\n        \thead[x]=tot;}\n      \t void dp(int x,int fa){\n      \t \tfor(int i=head[x];i;i=a[i].next){\n      \t \tint to=a[i].to;\n      \t \tif(to==fa)continue;\n      \t \tdp(to,x);\n      \t \tanss=max(anss,d[x]+d[to]+a[i].v);\n      \t \td[x]=max(d[x],d[to]+a[i].v);}}\n        int main(){  \n        \tint n;\n        \tcin>>n;\n        \tfor(int i=1;i<=n;i++)\n        \tcin>>col[i];\n        \tfor(int i=1;i<n;i++){\n        \tcin>>q>>w;\n        \tif(col[q]==col[w])//\u989c\u8272\u76f8\u540c\u8fb9\u6743\u4e3a0\n        \t{add(q,w,0);add(w,q,0);}\n        \telse {add(q,w,1);add(w,q,1);}//\u989c\u8272\u4e0d\u540c\u8fb9\u6743\u4e3a1\n            }\n        \tdp(1,0);\n        \tcout<<(anss+1)/2;\n        \treturn 0;}\n```\n\u7559\u4e2a\u8d5e\u518d\u8d70\u5427~~~\n           ",
        "postTime": 1576678849,
        "uid": 74863,
        "name": "ShallowDream\u96e8\u68a8",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 CF734E \u3010Anton and Tree\u3011"
    },
    {
        "content": "\u5148\u4e0d\u8981\u8138\u7684\u5b89\u5229\u4e00\u4e0b\u6211\u7684\u849f\u84bb\u7a7a\u95f4[superMB\u7684\u7a7a\u95f4](https://www.luogu.org/blog/suuuuuperMB/)\n\n\u770b\u5230\u8fd9\u4e2a\u9898\u6ca1\u6709\u9898\u89e3\uff0c\u6211\u5c31\u60f3\u6765~~\u95f7\u58f0\u53d1\u5927\u8d22~~\u4e3a\u5927\u4f17\u9020\u798f\n\n\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u6837\u4f8b\u91cc\u7684\u6811\n\n![](https://cdn.luogu.com.cn/upload/vjudge_pic/CF734E/e17d4eda0dc67dbbca220a370e8bf45f5d1faeb0.png)\n\n\u4e4d\u4e00\u773c\u770b\u5f88\u6df7\u4e71\u5bf9\u4e0d\u5bf9\n\n\u4e00\u5f00\u59cb\u4f1a\u89c9\u5f97\u6709\u70b9\u96be\u4ee5\u4e0b\u624b\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5316\u7e41\u4e3a\u7b80\uff1a\n\u56e0\u4e3a\u5bf9\u4e00\u4e2a\u70b9\u64cd\u4f5c\u4e00\u6b21\u5c31\u53ef\u4ee5\u5c06\u5176\u5468\u56f4\u7684\u989c\u8272\u76f8\u540c\u7684\u70b9\u5168\u90e8\u53d8\u8272\uff0c\u6240\u4ee5\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u628a\u76f8\u90bb\u7684\u76f8\u540c\u989c\u8272\u7684\u70b9\u76f4\u63a5\u770b\u505a\u4e00\u4e2a\u70b9\uff0c\u518d\u5efa\u8d77\u4e00\u68f5\u5c0f\u6811\u3002\n\n\u90a3\u4e48\u8981\u600e\u4e48\u5efa\u7acb\u7b2c\u4e8c\u68f5\u6811\u5462\uff1f\n\n\u90a3\u4e48\u8fd9\u65f6\u5019\u5c31\u8981\u7528\u5230\u5e76\u67e5\u96c6\u4e86\uff0c\u5c06\u76f8\u90bb\u7684\u540c\u8272\u70b9\u5168\u90e8\u6307\u5411\u4e00\u4e2afather\uff0c\u7136\u540e\u68c0\u67e5\u4e00\u6b21\u7f29\u5408\u7684\u70b9\u5185\u7684\u70b9\uff0c\u5982\u679c\u548c\u53e6\u5916\u4e00\u70b9\u8fde\u63a5\u5e76\u4e14\u989c\u8272\u4e0d\u540c\uff0c\u90a3\u4e48\u5c31\u5c06\u5b83\u4eec\u7684father\u8fde\u63a5\u8d77\u6765\u3002\n\n![](https://s1.ax1x.com/2018/10/17/idqfdH.png)\n\n\u5efa\u597d\u4e86\u7b2c\u4e8c\u68f5\u6811\uff0c\u8fd9\u5c31\u663e\u5f97\u6e05\u65b0\u4e86\u5f88\u591a\n\n\u5e76\u4e14\u4ed4(ting)\u7ec6(lao)\u7814(shi)\u7a76(jiang),\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u5c0f\u6811\u8fd8\u6709\u4e00\u4e2a\u7070\u5e38\u6709\u8da3\u7684\u6027\u8d28\uff1a\u76f8\u90bb\u4e24\u4e2a\u8282\u70b9\u7684\u989c\u8272\u4e00\u5b9a\u4e0d\u76f8\u540c\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8981\u8ba9\u6574\u68f5\u6811\u90fd\u53d8\u4e3a\u4e00\u4e2a\u989c\u8272\uff0c\u5c31\u53ea\u7528\u5728\u76f4\u5f84\u4e0a\u64cd\u4f5c\u76f4\u5f84\u957f\u5ea6\u52a01\u9664\u4ee52\u6b21\uff0c\u6574\u68f5\u6811\u5c31\u53ef\u4ee5\u53d8\u6210\u4e00\u4e2a\u989c\u8272\u4e86\u3002\n\n\u56e0\u4e3a\u6570\u636e\u91cf\u8f83\u5927\uff0c\u6240\u4ee5\u5efa\u8bae\u4f7f\u7528\u8bfb\u4f18\u8f93\u4f18\n\n\u4e0b\u9762\u662f\u6734\u7d20\u7684\u4ee3\u7801\n```cpp\n#include<cstdio>\n#define maxn 200005\n#define ri register int\n#define rc register char\nusing namespace std;\ntemplate<typename TP>inline void read(TP&x)\n{\n\tx=0;ri f=1;rc c=getchar();\n\twhile(c>'9'||c<'0'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n\tx*=f;\n}\ntemplate<typename TP>inline void write(TP x)\n{\n\tif(x==0){putchar('0');return;}\n\trc father[100]={0};ri i=0;\n\tif(x<0){putchar('-'),x=-x;}\n\twhile(x){++i,father[i]=x%10+48;x/=10;}\n\twhile(i){putchar(father[i]),--i;}\n}\n//\u2014\u2014\u2014\u2014\u2191\u5feb\u8bfb\u5feb\u8f93\u4f18\u5316\u2191\u2014\u2014\u2014\u2014 \nint head1[maxn],tot1;\nstruct node1{int to,nxt;}e1[maxn<<1];\ninline void add1(int from,int to)//\u539f\u56fe \n{\n\t++tot1;\n\te1[tot1].to=to;\n\te1[tot1].nxt=head1[from];\n\thead1[from]=tot1;\n}\nint head2[maxn],tot2;\nstruct node2{int to,nxt;}e2[maxn<<1];\ninline void add2(int from,int to)//\u7f29\u70b9\u4e4b\u540e\u7684\u56fe \n{\n\t++tot2;\n\te2[tot2].to=to;\n\te2[tot2].nxt=head2[from];\n\thead2[from]=tot2;\n}\n//\u2014\u2014\u2014\u2014\u2191\u524d\u5411\u661f\u2191\u2014\u2014\u2014\u2014 \nint father[maxn];\ninline int find(int x){if(father[x]!=x)father[x]=find(father[x]);return father[x];}\ninline void join(int x,int y){x=find(x),y=find(y);if(x!=y)father[x]=y;}\n//\u2014\u2014\u2014\u2014\u2191\u5e76\u67e5\u96c6\u2191\u2014\u2014\u2014\u2014\nbool color[maxn],vis[maxn];\nint n,a[maxn],b[maxn];\ninline void Union(int x,int fa)//\u5bfb\u627e\u76f8\u540c\u989c\u8272\u7684\u70b9\n{\n\tfor(ri i=head1[x];i;i=e1[i].nxt)\n\t\tif(e1[i].to!=fa&&color[e1[i].to]==color[x]&&(!vis[e1[i].to]))\n\t\t{\n\t\t\tjoin(e1[i].to,x);\n\t\t\tvis[e1[i].to]=1;\n\t\t\tUnion(e1[i].to,x);\n\t\t}\n}\nint maxdep,maxw;\ninline void dfs(int dep,int x,int fa)\n{\n\tif(dep>maxdep)\n\t\tmaxdep=dep,maxw=x;\n\tfor(ri i=head2[x];i;i=e2[i].nxt)\n\t\tif(e2[i].to!=fa)\n\t\t\tdfs(dep+1,e2[i].to,x);\n}\n//\u2014\u2014\u2014\u2014\u2191\u7535\u98ce\u6247(\u7b11)\u2191\u2014\u2014\u2014\u2014\nint main()\n{\n\tread(n);\n\tfor(ri i=1;i<=n;++i)//\u8fdb\u884c\u8f93\u5165\u548c\u5e76\u67e5\u96c6\u521d\u59cb\u5316 \n\t{\n\t\tread(color[i]);\n\t\tfather[i]=i;\n\t}\n\tfor(ri i=1;i<n;++i)//\u5efa\u7acb\u539f\u56fe \n\t\tread(a[i]),read(b[i]),add1(a[i],b[i]),add1(b[i],a[i]);\n\tfor(ri i=1;i<=n;++i)//\u8fdb\u884cdfs\u7f29\u70b9 \n\t\tif(!vis[i])\n\t\t\tUnion(i,0);\n\tfor(ri i=1;i<=n;++i)//\u5efa\u7acb\u65b0\u56fe \n\t\tif(father[a[i]]!=father[b[i]])\n\t\t\tadd2(father[a[i]],father[b[i]]),add2(father[b[i]],father[a[i]]);//\u82e5\u7f29\u5408\u540e\u7684\u70b9\u7684father \n\tdfs(0,1,0);//\u6c42\u6811\u7684\u76f4\u5f84 \n\tdfs(0,maxw,0);\n\twrite((maxdep+1)>>1);//fin \n}\n```\n\u4ee5\u4e0b\u662f\u53e6\u5916\u4e00\u79cd\u53ea\u7528\u4e00\u904ddfs\u7684\u505a\u6cd5\n```cpp\n#include<cstdio>\n#define ri register int\n#define rc register char\nusing namespace std;\nconst int maxn=200005;\ntemplate<typename TP>inline void read(TP&x)\n{\n    x=0;ri f=1;rc c=getchar();\n    while(c>'9'||c<'0'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    x*=f;\n}\ntemplate<typename TP>inline void write(TP x)\n{\n    if(x==0){putchar('0');return;}\n    rc father[100]={0};ri i=0;\n    if(x<0){putchar('-'),x=-x;}\n    while(x){++i,father[i]=x%10+48;x/=10;}\n    while(i){putchar(father[i]),--i;}\n}\n//\u2014\u2014\u2014\u2014\u2191\u5feb\u8bfb\u5feb\u8f93\u4f18\u5316\u2191\u2014\u2014\u2014\u2014 \nint head[maxn],tot;\nstruct node{int to,nxt;}e[maxn<<1];\ninline void add(int from,int to)//\u7f29\u70b9\u4e4b\u540e\u7684\u56fe \n{\n    ++tot;\n    e[tot].to=to;\n    e[tot].nxt=head[from];\n    head[from]=tot;\n}\n//\u2014\u2014\u2014\u2014\u2191\u524d\u5411\u661f\u2191\u2014\u2014\u2014\u2014 \nint father[maxn];\ninline int find(int x){if(father[x]!=x)father[x]=find(father[x]);return father[x];}\ninline void join(int x,int y){father[x]=y;}\n//\u2014\u2014\u2014\u2014\u2191\u5e76\u67e5\u96c6\u2191\u2014\u2014\u2014\u2014\nint maxdep,maxw;\ninline void dfs(int dep,int x,int fa)\n{\n    if(dep>maxdep)\n        maxdep=dep,maxw=x;\n    for(ri i=head[x];i;i=e[i].nxt)\n        if(e[i].to!=fa)\n            dfs(dep+1,e[i].to,x);\n}\n//\u2014\u2014\u2014\u2014\u2191\u7535\u98ce\u6247\u2191\u2014\u2014\u2014\u2014\nint tempa,tempb;\nint n,a[maxn],b[maxn];\nbool color[maxn];\nint main()\n{\n    read(n);\n    for(ri i=1;i<=n;++i)\n    {\n        read(color[i]);\n        father[i]=i;\n    }\n    for(ri i=1;i<n;++i)\n    {\n        read(a[i]),read(b[i]);\n        tempa=find(a[i]),tempb=find(b[i]);\n        if(color[tempa]==color[tempb])\n            father[tempa]=father[tempb];\n    }\n    for(ri i=1;i<=n;++i)\n    \tfather[i]=find(father[i]);\n    for(ri i=1;i<=n;++i)\n        if(father[a[i]]!=father[b[i]])\n            add(father[a[i]],father[b[i]]),add(father[b[i]],father[a[i]]);\n    dfs(0,father[1],0);\n    dfs(0,maxw,0);\n    write((maxdep+1)>>1);\n}\n```",
        "postTime": 1539703776,
        "uid": 118265,
        "name": "superMB",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF734E \u3010Anton and Tree\u3011"
    },
    {
        "content": "~~\u6700\u8fd1\u8ff7\u4e0a\u4e86\u6811~~$EMM$...\n\n\u5927\u5bb6\u90fd\u4f1a\u5e76\u67e5\u96c6\u7f29\u70b9\u5427\uff0c\u8fd9\u91cc\u662f\u628a\u6240\u6709\u989c\u8272\u76f8\u540c\u7684\u70b9\u7f29\u5230\u4e00\u8d77\u3002\uff08~~\u6211\u80af\u5b9a\u4e0d\u4f1a~~\uff09\n\n\u7136\u540e\u6570\u7684\u76f4\u5f84\u5927\u5bb6\u90fd\u4f1a\u5427\uff0c\u5c31\u662f\u968f\u4fbf\u627e\u4e00\u4e2a\u70b9\uff0c\u6c42\u51fa\u6700\u8fdc\u70b9\uff0c\u518d\u4ece\u6700\u8fdc\u70b9\u5f00\u59cb\u6c42\u6700\u8fdc\u70b9\uff0c\u6c42\u4e24\u6b21\u5927\u6cd5\u5e08\u6b65\u6570\u6700\u5927\u503c\u7684\u6700\u5927\u503c\u3002\n\n\u8fd9\u9898\u5c31\u662f\u5148\u5e76\u67e5\u96c6\u7f29\u70b9\uff0c\u7136\u540e\u5728\u65b0\u56fe\u4e0a\u8dd1\u4e00\u904d\u6570\u7684\u76f4\u5f84\uff08\u8981\u8bc1\u660e\u53bb\u627e @[skip2004](https://www.luogu.org/space/show?uid=30122)\uff09\n\n\u7136\u540e\u5c31\u7b80\u5355\u4e86\n\n\u4ee3\u7801\u53d1\u4e00\u6ce2\u3002\n\n```\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#define Rint register int\n#define Temp template<typename T>\nusing namespace std;\nTemp inline void read(T &x) {\n\tx=0;T w=1,ch=getchar();\n\twhile(!isdigit(ch)&&ch!='-') x=x*10+ch-'0',ch=getchar();\n\tif(ch=='-') w=-1,ch=getchar();\n\twhile(isdigit(ch)) x=x*10+ch-'0',ch=getchar();\n\tx*=w; \n}\ninline void write_(int x) {\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>=10) write_(x/10);\n\tputchar(x%10+'0');\n}\ninline void writeln(int x) {\n\twrite_(x);\n\tputchar('\\n');\n}\nconst int maxn=2e5+5;\nstruct Edge{\n\tint to,nxt;\n}e[maxn<<1];\nint color[maxn],n,cnt=0,father[maxn],x[maxn],y[maxn],maxc,ans=-1,head[maxn];\ninline void addedge(int x,int y) {\n\tcnt++;\n\te[cnt].nxt=head[x];\n\te[cnt].to=y;\n\thead[x]=cnt;\n}\ninline int find_(int x) {\n\tif(father[x]!=x) father[x]=find_(father[x]);\n\treturn father[x];\n}\ninline void dfs(int fa,int u,int deep) {\n\tif(deep>ans) {\n\t\tmaxc=u;\n\t\tans=deep;\n\t}\n\tfor (Rint i=head[u];~i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(v!=fa) dfs(u,v,deep+1);\n\t}\n\treturn ;\n}\nint main() {\n\tread(n);\n\tmemset(head,-1,sizeof(head));\n\tfor (Rint i=1;i<=n;++i) father[i]=i;\n\tfor (Rint i=1;i<=n;++i) read(color[i]);\n\tfor (Rint i=1;i<n;++i) {\n\t\tread(x[i]);read(y[i]);\n\t\tint xf=find_(x[i]),yf=find_(y[i]);\n\t\tif(color[xf]==color[yf]) father[xf]=yf;\n\t}\n\tfor (Rint i=1;i<=n;++i) father[i]=find_(father[i]);\n\tfor (Rint i=1;i<=n;++i) if(father[x[i]]!=father[y[i]]) addedge(father[x[i]],father[y[i]]),addedge(father[y[i]],father[x[i]]);\n\tdfs(0,father[1],0);\n\tdfs(0,maxc,0);\n\twriteln((ans+1)>>1);\n\treturn 0;\n}\n```",
        "postTime": 1544865312,
        "uid": 78187,
        "name": "zjjcth330",
        "ccfLevel": 0,
        "title": "CF734E"
    },
    {
        "content": "\u5173\u4e8e\u8fd9\u9053\u9898\uff0c\u8bb8\u591a\u5927\u4f6c\u5df2\u7ecf\u7ed9\u51fa\u4e86\u9898\u89e3\uff0c\u6211\u8bf4\u4e00\u4e0b\u6211\u7684\u60f3\u6cd5\uff1a\n\n\u56e0\u4e3a\u4e00\u6b21\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u4e00\u4e2a\u76f8\u540c\u989c\u8272\u7684\u8fde\u901a\u5757\u53d8\u6210\u53e6\u4e00\u79cd\u989c\u8272\uff0c\u90a3\u6211\u4eec\u81ea\u7136\u800c\u7136\u5730\u60f3\u5230\u7f29\u70b9\uff0c\u5bf9\u4e8e\u7f29\u70b9\u4f7f\u7528\u5e76\u67e5\u96c6\u5c31\u5f88\u5bb9\u6613\u505a\u5230\uff0c\u53ef\u4ee5\u628a\u989c\u8272\u76f8\u540c\u4e14\u76f8\u8fde\u7684\u70b9\u5148\u7528\u5e76\u67e5\u96c6\u8fde\u5728\u4e00\u8d77\uff0c\u5e76\u67e5\u96c6\u8981\u8def\u5f84\u538b\u7f29\uff0c\u5426\u5219\u4f1aT\u6389\u3002\n\n _\u63a5\u4e0b\u6765\u5c31\u662f\u5efa\u56fe\uff0c\u5728\u8fd9\u91cc\u6709\u4e00\u4e2a\u5173\u952e\u8981\u70b9--\u5148\u628a\u6240\u6709\u76f8\u540c\u989c\u8272\u901a\u5757\u7f29\u597d\u70b9\uff0c\u518d\u5efa\u56fe\uff08\u8fd9\u4e2a\u597d\u50cf\u4e4b\u524d\u7684\u9898\u89e3\u90fd\u6ca1\u6709\u5f3a\u8c03\uff09\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u4e0d\u662f\u6839\u4e0e\u6839\u76f8\u8fde\u7684\u60c5\u51b5\uff01_ ~~\u6211\u4e00\u5f00\u59cb\u505a\u5c31\u8fd9\u6837\u88abWA>_<\u3002~~\n\n\u5efa\u56fe\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\uff0c\u6709\u5f88\u591a\u79cd\u65b9\u6cd5\uff0c\u6211\u7528\u7684\u662f\u90bb\u63a5\u8868\u3002\u8fd9\u4e2a\u56fe\u663e\u7136\u6ca1\u6709\u73af\uff0c\u4e5f\u5c31\u53ef\u628a\u5b83\u770b\u505a\u4e00\u68f5\u6811\uff0c\u9898\u76ee\u8981\u6c42\u4f7f\u6574\u68f5\u6811\u53d8\u6210\u4e00\u79cd\u989c\u8272\u7684\u6700\u5c11\u64cd\u4f5c\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4ece\u6811\u7684\u76f4\u5f84\u5f00\u59cb\u53d8\u8272\uff0c\u6bcf\u6b21\u5411\u5916\u6269\u5c55\u4e00\u5c42\uff0c\u662f\u6700\u4f18\u7684\u53d8\u8272\u65b9\u6848\u3002\u8fd9\u91cc\u7ed9\u4e00\u4e0b\u6811\u7684\u76f4\u5f84\u7684\u5b9a\u4e49\uff1a\n\n\u6811\u4e2d\u6240\u6709 _\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u7684\u6700\u5927\u503c_ \u5373\u4e3a\u6811\u7684\u76f4\u5f84\u3002\n\n\u5728\u5b8c\u6210\u7f29\u70b9\u540e\uff0c\u6574\u68f5\u6811\u663e\u7136\u662f\u9ed1\u767d\u76f8\u95f4\u7684\uff0c\u5bf9\u4e8e\u6b64\uff0c\u65e0\u8bba\u4ece\u54ea\u4e2a\u70b9\u5f00\u59cb\u53d8\u8272\uff0c\u6700\u4f18\u7684\u90fd\u5e94\u8be5\u662f\u4ece\u90a3\u4e2a\u70b9\u5f00\u59cb\uff0c\u5411\u5916\u6269\u5c55\u53d8\u8272\uff0c\u6839\u636e\u5b9a\u4e49\uff0c\u5982\u679c\u4e0d\u662f\u5728\u6811\u7684\u76f4\u5f84\u5f00\u59cb\u7684\u8bdd\uff0c\u5c31\u4f1a\u5931\u53bb\u5bf9\u79f0\u6027\uff0c\u4f7f\u6b65\u6570\u589e\u52a0\u3002\u6240\u4ee5\u5e94\u627e\u5230\u6811\u7684\u76f4\u5f84\uff0c\u6b65\u6570\u663e\u7136\u662f\u76f4\u5f84\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u4e5f\u5c31\u662f$\\lfloor\\dfrac{L+1}{2}\\rfloor$\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5bfb\u627e\u6811\u7684\u76f4\u5f84\u4e86\uff0c\u4e00\u822c\u6709\u4e24\u79cd\u65b9\u6cd5\u2014\u4e24\u904dDFS\u6216\u8005DP\uff0c\u6211\u7528\u7684\u662f\u4e24\u904dDFS\uff0c\u5148\u968f\u673a\u9009\u4e00\u4e2a\u70b9\uff0c\u6bd4\u5982\u4e00\u53f7\u8282\u70b9A\uff0c _\u627e\u5230\u5b83\u7684\u6839_ \uff08\u8fd9\u4e2a\u5343\u4e07\u4e0d\u80fd\u5fd8\uff01\uff09\uff0c\u7136\u540e\u4e00\u904dDFS\u627e\u5230\u8ddd\u79bb\u4ed6\u6700\u8fdc\u7684\u8282\u70b9B\uff08\u8fd9\u4e2a\u8282\u70b9\u663e\u7136\u4e00\u5b9a\u662f\u6811\u7684\u53f6\u5b50\uff09\uff0c\u518d\u4ece\u627e\u5230\u7684\u70b9B\u51fa\u53d1\uff0cDFS\u627e\u5230\u8ddd\u79bbB\u6700\u8fdc\u7684\u70b9C\uff08\u8fd9\u4e2a\u8282\u70b9\u663e\u7136\u4e5f\u4e00\u5b9a\u662f\u6811\u7684\u53f6\u5b50\uff0c\u53f6\u5b50\u4e0e\u8ddd\u79bb\u5b83\u6700\u8fdc\u7684\u53f6\u5b50\u76f8\u8fde\u5fc5\u662f\u76f4\u5f84\uff09\u3002\u6211\u4eec\u5c31\u627e\u5230\u4e86\u6811\u7684\u76f4\u5f84BC\uff0c\u518d\u6c42\u51fa$\\lfloor\\dfrac{L+1}{2}\\rfloor$\u5c31\u662f\u7b54\u6848\u4e86\u3002\n\n\u5173\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u663e\u7136\u662f\u5408\u7406\u7684\uff0c\u5b9e\u9645\u8dd1\u4e5f\u6ca1\u5230200\u6beb\u79d2\u3002\n\n\u4e0b\u9762\u8d34\u4e0a\u6211\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\n\nint n,u,v,fa[200005],dep[200005];\nbool a[200005],vis[200005];\nvector <int> edge[200005];\nqueue <pair<int,int> > q;\n\nint GetFather (int x)\n{\n\tif (x==fa[x])  return x;\n\treturn fa[x]=GetFather(fa[x]);           //\u5e76\u67e5\u96c6\u8def\u5f84\u538b\u7f29 \n}\n\nint Dfs (int x)           //DFS\u627e\u6700\u8fdc\u70b9 \n{\n\tvis[x]=1;           //\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u8d70\u8fc7\u8981\u505a\u6807\u8bb0 \n\tint far=x;           //\u6700\u8fdc\u70b9 \n\tfor (int i=0;i<edge[x].size();++i)\n\t{\n\t\tint y=edge[x][i];\n\t\tif (vis[y])  continue;\n\t\tdep[y]=dep[x]+1;           //\u7528\u6df1\u5ea6\u4f5c\u6bd4\u8f83 \n\t\tint w=Dfs(y);           //\u9012\u5f52\u6c42\u89e3 \n\t\tif (dep[w]>dep[far])  far=w;\n\t}\n\treturn far;\n}\n\nint main ()\n{\n\tscanf (\"%d\",&n);\n\tfor (int i=1;i<=n;++i)\n\t{\n\t\tscanf (\"%d\",&a[i]);\n\t\tfa[i]=i;\n\t}\n\tfor (int i=1;i<n;++i)\n\t{\n\t\tscanf (\"%d%d\",&u,&v);\n\t\tu=GetFather(u);           //\u627e\u6839 \n\t\tv=GetFather(v);\n\t\tif (a[u]==a[v]&&u!=v)  fa[u]=v;           //\u5e76\u67e5\u96c6\u7f29\u70b9 \n\t\telse if (a[u]!=a[v])\n\t\t{\n\t\t\tq.push(make_pair(u,v) );           //\u6536\u96c6\u6240\u6709\u9700\u8981\u8fde\u8fb9\u7684\u70b9 \n\t\t}\n\t}\n\twhile (!q.empty())\n\t{\n\t\tint x=q.front().first,y=q.front().second;\n\t\tq.pop();\n\t\tx=GetFather(x);\n\t\ty=GetFather(y);\n\t\tedge[x].push_back(y);           //\u8fde\u8fb9\uff0c\u5efa\u56fe \n\t\tedge[y].push_back(x);\n\t}\n\tint p=Dfs(GetFather(1));           //\u7b2c\u4e00\u904dDFS\u627e\u6700\u8fdc\u70b9 \n\tmemset(vis,0,sizeof(vis));           //\u4e0d\u8981\u5fd8\u4e86\u521d\u59cb\u5316\u6570\u7ec4 \n\tmemset(dep,0,sizeof(dep));\n\tint q=Dfs(p);           //\u7b2c\u4e8c\u904dDFS\u627e\u5230\u76f4\u5f84 \n\tprintf (\"%d\",(dep[q]-dep[p]+1)/2);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1611820283,
        "uid": 386887,
        "name": "HSY666",
        "ccfLevel": 7,
        "title": "CF734E Anton and Tree"
    },
    {
        "content": "## \u601d\u8def\n\n\u8fd9\u4e2a\u9898\u7684\u672c\u8d28\u5f88\u7b80\u5355\uff1a\u6c42\u6811\u7684\u76f4\u5f84\uff0c\u662f\u4e2a\u601d\u7ef4\u9898\u3002\n\n\u6211\u4eec\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u5c06\u4e00\u4e2a\u8fde\u901a\u5757\u4ece\u9ed1\u8272\u67d3\u6210\u767d\u8272\u6216\u8005\u4ece\u767d\u8272\u67d3\u6210\u9ed1\u8272\u3002\u5f88\u5bb9\u6613\u53ef\u4ee5\u60f3\u5230\uff0c\u6bcf\u4e00\u6b21\u6211\u4eec\u5c06\u8fde\u901a\u7684\u989c\u8272\u76f8\u540c\u7684\u4e00\u4e2a\u5757\u67d3\u6210\u522b\u7684\u989c\u8272\uff0c\u7136\u540e\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u5927\u4e00\u5708\u7684\u989c\u8272\u76f8\u540c\u7684\u8fde\u901a\u5757\u3002\u8fd9\u6837\u4e0d\u65ad\u67d3\u8272\uff0c\u4e00\u5b9a\u662f\u6700\u4f18\u7b56\u7565\uff0c\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u5373\u53ef\u660e\u767d\u3002\n\n\u90a3\u4e48\u73b0\u5728\u95ee\u9898\u7684\u5173\u952e\u5c31\u5728\u4e8e\u4ece\u54ea\u4e00\u4e2a\u70b9\u5f00\u59cb\u67d3\u8272\u3002\u5047\u8bbe\u73b0\u5728\u4f60\u773c\u524d\u6709\u4e00\u68f5\u6811\uff0c\u4f60\u4f1a\u9009\u62e9\u4ece\u4e2d\u95f4\u627e\u4e00\u4e2a\u70b9\u5411\u4e24\u8fb9\u6269\u6563\u67d3\u8272\u8fd8\u662f\u4ece\u8fb9\u4e0a\u627e\u4e00\u4e2a\u70b9\u5411\u53e6\u4e00\u8fb9\u67d3\u8272\uff1f\u5f53\u7136\u662f\u679c\u65ad\u9009\u62e9\u524d\u8005\u3002\u800c\u6811\u4e0a\u6700\u957f\u7684\u8def\u5f84\u5373\u4e3a\u6811\u7684\u76f4\u5f84\u3002\u6211\u4eec\u4ece\u6811\u7684\u76f4\u5f84\u7684\u4e2d\u70b9\u5f00\u59cb\u67d3\u8272\uff0c\u5f97\u5230\u7684\u5c31\u4e00\u5b9a\u662f\u6700\u5c11\u7684\u6b65\u6570\u3002\n\n~~\u90a3\u8fd9\u9053\u7d2b\u9898\u5c45\u7136\u5c31\u505a\u5b8c\u4e86~~\u3002\u3002\u3002\u6c42\u51fa\u76f4\u5f84\u518d\u624b\u9020\u4e24\u7ec4\u6570\u636e\u627e\u627e\u89c4\u5f8b\u5373\u53ef\u53d1\u73b0\u7b54\u6848\u4e0e\u76f4\u5f84\u95f4\u7684\u5173\u7cfb\u3002\n\n## \u4ee3\u7801\n\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<cstdlib>\n#include<ctime>\nusing namespace std;\nconst int N=200005,M=400005;\nint n,tot,sum,s;\nint color[N],ver[M],Next[M],head[N],edge[M],d[N];\nbool v[N];\nqueue<int> q;\nvoid add(int x,int y){\n\tver[++tot]=y;\n\tNext[tot]=head[x];\n\thead[x]=tot;\n}\nvoid bfs1(){\n\tsum=0;\n\td[1]=0;\n\tv[1]=1;\n\tq.push(1);\n\twhile(!q.empty()){\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[x];i;i=Next[i]){\n\t\t\tint y=ver[i];\n\t\t\tif(v[y]) continue;\n\t\t\tif(color[x]==color[y]){//\u5982\u679c\u989c\u8272\u4e00\u6837\u5219\u53ef\u4ee5\u4e00\u6b21\u67d3\u8272\uff0c\u6240\u4ee5\u8def\u5f84\u957f\u5ea6\u4e0d\u53d8\n\t\t\t\td[y]=d[x];\n\t\t\t}\n\t\t\telse{\n\t\t\t\td[y]=d[x]+1;\n\t\t\t\tif(d[y]>sum){//\u627e\u6700\u8fdc\u70b9\uff0c\u8be6\u60c5\u89c1\u4e24\u6b21bfs\u6c42\u6811\u7684\u76f4\u5f84\n\t\t\t\t\tsum=d[y];\n\t\t\t\t\ts=y;\n\t\t\t\t}\n\t\t\t}\n\t\t\tq.push(y);\n\t\t\tv[y]=1;\n\t\t}\n\t}\n}\nvoid bfs2(){\n\tmemset(v,0,sizeof(v));\n\tsum=0;\n\td[s]=0;\n\tv[s]=1;\n\tq.push(s);\n\twhile(!q.empty()){\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[x];i;i=Next[i]){\n\t\t\tint y=ver[i];\n\t\t\tif(v[y]) continue;\n\t\t\tif(color[x]==color[y]){\n\t\t\t\td[y]=d[x];\n\t\t\t}\n\t\t\telse{\n\t\t\t\td[y]=d[x]+1;\n\t\t\t\tsum=max(sum,d[y]);\n\t\t\t}\n\t\t\tv[y]=1;\n\t\t\tq.push(y);\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&color[i]);\n\t}\n\tfor(int i=1,x,y;i<=n-1;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tbfs1();\n\tbfs2();\n\tprintf(\"%d\\n\",(sum+1)>>1);\n\treturn 0;\n}\n```\n\n\u6211\u7528\u7684\u662f\u4e24\u6b21bfs\u6c42\u51fa\u6811\u7684\u76f4\u5f84\uff0c\u5176\u5b83\u7684\u65b9\u6cd5\u4e5f\u53ef\u4ee5\uff0c\u53ea\u4e0d\u8fc7\u6211\u5199\u8d77\u6765\u6bd4\u8f83\u987a\u624b\u7f62\u4e86\u3002\u552f\u4e00\u4e0e\u677f\u5b50\u4e0d\u540c\u7684\u5c31\u662f\u8981\u5728bfs\u7684\u8fc7\u7a0b\u4e2d\u5224\u4e00\u4e0b\u989c\u8272\u3002\u5982\u679c\u7ec8\u70b9\u4e0e\u8d77\u70b9\u989c\u8272\u76f8\u540c\u90a3\u4e48\u8ddd\u79bb\u4e0d\u53d8\u3002\u53cd\u4e4b\u8ddd\u79bb\u5c31+1\u3002\u5199\u4e24\u904d\u677f\u5b50\u5373\u53ef\u3002",
        "postTime": 1597477519,
        "uid": 306982,
        "name": "\u4e8cgou\u5b50",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF734E \u3010Anton and Tree\u3011"
    },
    {
        "content": "[\u9898\u76ee\u5e8a\u9001\u95e8](https://www.luogu.com.cn/problem/CF734E)\n\n---\n\n\u8fd9\u9053\u9898\u4e00\u4e2a\u91cd\u8981\u7684\u70b9\u5c31\u662f\uff1a\u4e00\u4e2a\u8272\u5757\u53ef\u4ee5\u5168\u90e8\u6539\u53d8\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a\u8272\u5757\uff0c\u770b\u6210\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u5c0f\u7684\u6811\u3002\n\n\u6837\u4f8b\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\n\n![](https://i.loli.net/2020/08/13/CFr3lN79mKfgxZM.png)\n\n\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u60c5\uff0c\u4e00\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u989c\u8272\u4e0d\u540c\u3002\n\n\u6240\u4ee5\u6211\u4eec\u6539\u53d8\u4e00\u4e2a\u70b9\u7684\u989c\u8272\uff0c\u5c31\u4f1a\u628a\u5b83\u7684\u989c\u8272\u53d8\u4e3a\u548c\u5b83\u76f8\u8fde\u63a5\u7684\u70b9\u7684\u989c\u8272\u3002\n\n\u7136\u540e\u6211\u4eec\u7528\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u4ece\u76f4\u5f84\u7684\u4e2d\u95f4\u5f00\u59cb\u53d8\uff0c\u8bbe\u76f4\u5f84\u4e3a $d$\uff0c\u6240\u9700\u6b21\u6570\u5c31\u662f$\\lfloor \\dfrac{d + 1}{2} \\rfloor$\u3002\n\n\u73b0\u5728\u89e3\u51b3\u5982\u4f55\u7f29\u70b9\uff0c\u5224\u65ad\u5f53\u5148\u70b9 $u$\uff0c\u662f\u5426\u548c\u7236\u8282\u70b9 $fa$ \u7684\u989c\u8272\u662f\u5426\u76f8\u540c\uff0c\n\n\u76f8\u540c\u5c06\u70b9\u7f16\u53f7\u53d8\u4e3a\u7236\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u4e0d\u540c\u5c31\u5efa\u8fb9\u3002\n\n```cpp\n#include <cmath>\n#include <vector>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\ntemplate<typename T>void read(T &x) {\n    T f = 1;x = 0;char s = getchar();\n    while(s < '0' || s > '9') {if(s == '-')f = -1;s = getchar();}\n    while(s >= '0' && s <= '9') {x = x * 10 + s - '0';s = getchar();}\n    x *= f;\n}\ntemplate<typename T>void print(T x) {\n    if(x < 0) putchar('-'),x = -x;\n    if(x > 9) print(x / 10);\n    putchar(x % 10 + '0');\n}\n\nconst int maxn = 200005;\n\nint nxt[maxn << 1],ver[maxn << 1],head[maxn],tot;\nvoid addEdge(int x,int y) {\n\tnxt[++ tot] = head[x];ver[tot] = y;head[x] = tot;\n}\n\nint n,col[maxn],a[maxn],first[maxn],second[maxn],ans;\nvector<int> g[maxn];\n\nvoid dfs(int u,int fa) {\n\tif (col[u] == col[fa]) a[u] = a[fa];\n\telse g[a[fa]].push_back(a[u]);\n\tfor (int i = head[u] ; i ; i = nxt[i]) {\n\t\tint v = ver[i];\n\t\tif (v == fa) continue;\n\t\tdfs(v,u);\n\t}\n}\n\nvoid dfs2(int u,int fa) {\n\tfor (int i = 0 ; i < g[u].size() ; ++ i) {\n\t\tint v = g[u][i];\n\t\tdfs2(v,fa);\n\t\tif (first[v] + 1 >= first[u]) {\n\t\t\tsecond[u] = first[u];\n\t\t\tfirst[u] = first[v] + 1;\n\t\t}\n\t\telse if (first[v] + 1 > second[u]) second[u] = first[v] + 1;\n\t}\n\tans = max(ans,first[u] + second[u]);\n}\n\nint main () {\n\tread(n);\n\tfor (int i = 1 ; i <= n ; ++ i) read(col[i]),a[i] = i;\n\tint x,y;\n\tfor (int i = 1 ; i < n ; ++ i) read(x),read(y),addEdge(x,y),addEdge(y,x);\n\tcol[0] = 2;\n\tdfs(1,0);\n\tdfs2(1,0);\n\tprintf(\"%d\\n\",(ans + 1) / 2);\n\treturn 0;\n}\n```",
        "postTime": 1597320034,
        "uid": 163516,
        "name": "Strelitzia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF734E \u3010Anton and Tree\u3011"
    },
    {
        "content": "### \u5e76\u67e5\u96c6+\u6811\u7684\u76f4\u5f84\n\n\u4e00\u5f00\u59cb\u60f3\u7684\u662f\u7f29\u70b9+\u6811\u7684\u76f4\u5f84\uff0c\u4f46\u662f2e5\u7684\u70b9\u8c8c\u4f3c\u4f1aTLE\uff08\u522b\u95ee\u6211\u4e3a\u4ec0\u4e48\uff0c\u6211\u4ea4\u4e86\u4e94\u516d\u53d1\uff09\n\n\u6240\u4ee5\u60f3\u5230\u7528\u5e76\u67e5\u96c6\u6765\u4ee3\u66ff\u7f29\u70b9\u51cf\u5c11\u65f6\u95f4\n\n#### \u4ec0\u4e48\u662f\u6811\u7684\u76f4\u5f84\uff1f\n\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6811\u4e2d\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u6811\u4e2d\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u5b9a\u4e49\u4e3a\u8fde\u63a5\u4e24\u70b9\u7684\u8def\u5f84\u8fb9\u6743\u4e4b\u548c\u3002\u6811\u4e2d\u6700\u8fdc\u7684\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u88ab\u79f0\u4e3a\u6811\u7684\u76f4\u5f84\uff0c\u8fde\u63a5\u8fd9\u4e24\u70b9\u7684\u8def\u5f84\u88ab\u79f0\u4e3a\u6811\u7684\u6700\u957f\u94fe\u3002\u540e\u8005\u901a\u5e38\u4e5f\u53ef\u79f0\u4e3a\u76f4\u5f84\uff0c\u5373\u76f4\u5f84\u662f\u4e00\u4e2a \n\u6570\u503c\u6982\u5ff5\uff0c\u4e5f\u53ef\u4ee3\u6307\u4e00\u6761\u8def\u5f84\n\u6811\u7684\u76f4\u5f84\u901a\u5e38\u6709\u4e24\u79cd\u6c42\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3aO(n)\u3002\u6211\u4eec\u5047\u8bbe\u6811\u4ee5N\u4e2a\u70b9N-1\u6761\u8fb9\u7684\u65e0\u5411\u56fe\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5e76\u5b58\u50a8\u5728\u90bb\u63a5\u8868\u4e2d\n\n\u6709\u4e24\u79cd\u7b97\u6cd5\u590d\u6742\u5ea6\u90fd\u662fO(n)\u7684\n\n\u63a8\u8350\u4e00\u4e2a\u5927\u4f6c\u5199\u7684\u4ecb\u7ecd \u5f88\u597d\u61c2     \n\n[(\u25cf'\u25e1'\u25cf)](https://www.cnblogs.com/ywjblog/p/9254997.html)\n\n\u505a\u6cd5\uff1a\n\n\u2460 \u5f53\u4e24\u4e2a\u70b9\u7684\u7956\u5148\u4e0d\u4e00\u6837\u5e76\u4e14\u4ed6\u4eec\u7684\u989c\u8272\u4e00\u6837\u7684\u65f6\u5019\uff0c\u5c06\u4ed6\u4eec\u4e24\u4e2a\u70b9\u5408\u5e76\u5728\u4e00\u8d77\n\n\u2461\u7edf\u8ba1\u6700\u540e\u5269\u4e0b\u6765\u7684\u70b9\uff0c\u5c06\u4ed6\u4eec\u91cd\u65b0\u6807\u8bb0\uff0c\u7136\u540e\u91cd\u5efa\u56fe\uff0c\u5f53\u7136\uff0c\u5982\u679c\u4f60\u6c42\u51fa\u6765\u4e24\u4e2a\u70b9\u7684\u7956\u5148\u662f\u4e00\u6837\u7684\u65f6\u5019\uff0c\u663e\u7136\u662f\u4e0d\u9700\u8981\u518d\u5efa\u7684\u3002\u6211\u4eec\u53ea\u9700\u8981\u904d\u5386\u4e4b\u524d\u7684\u8fb9\uff0c\u5e76\u91cd\u5efa\u51fa\u7956\u5148\u4e0d\u540c\u7684\u8fb9\n\n\u2462\u6700\u540e\u4e00\u6b65\uff0c\u76f4\u63a5\u5957\u6a21\u677f\u6c42\u51fa\u6811\u7684\u76f4\u5f84\u3002\u76f4\u5f84\u4e3amaxx\uff0c\u90a3\u4e48\u6811\u7684\u76f4\u5f84\u4e0a\u4e00\u5b9a\u6709maxx+1\u4e2a\u70b9\u3002\u5f53(maxx+1)%2==0\u65f6\u663e\u7136\u6211\u4eec\u53ea\u9700\u8981\u5408\u5e76\uff08maxx+1\uff09/2\u6b21\u5c31OK\u4e86\uff0c\u5982\u679c(maxx+1)%2==1,\u6211\u4eec\u5c31\u5408\u5e76maxx/2\u4e2a\u70b9\u5c31\u597d\u4e86\n\n##### \uff08\u56e0\u4e3a\u91cd\u5efa\u51fa\u6765\u7684\u65b0\u7684\u56fe\u4ed6\u4e00\u5b9a\u662f\uff1a\u9ed1\u767d\u9ed1\u767d\u9ed1\u767d\u4e00\u76f4\u4ea4\u66ff\u51fa\u73b0\u7684\uff09\n\n\n\n\n\n\n\n\n### Code\uff1a\n\n```c\n\t\t#include<bits/stdc++.h>\n\t\tusing namespace std;\n\t\tint pre[400010]; //\u91cc\u9762\u5168\u662f\u638c\u95e8\n\t\tmap <int,int> mapp;\n\t\tconst int maxn = 400086;\n        struct picture {\n            int y, v, net;\n            int pre;\n        }e[maxn];\n        int lin[maxn], len = 0;\n        int  m, dis[maxn];\n        bool vis[maxn];\n        int start, endd;\n\n        inline int read() {\n            int x = 0, y = 1;\n            char ch = getchar();\n            while(!isdigit(ch)) {\n                if(ch == '-') y = -1;\n                ch = getchar();\n            }\n            while(isdigit(ch)) {\n                x = (x << 1) + (x << 3) + ch - '0';\n                ch = getchar();\n            }\n            return x * y;\n        }\n\n        inline void insert(int xx, int yy, int vv) {\n            e[++len].y = yy;\n            e[len].v = vv;\n            e[len].net = lin[xx];\n            e[len].pre = xx;\n            lin[xx] = len;\n        }\n\n        void dfs(int st) {\n            vis[st] = 1;\n            for(int i = lin[st]; i; i = e[i].net) {\n                int to = e[i].y;\n                if(!vis[to]) {\n                    dis[to] = dis[st] + e[i].v;\n                    dfs(to);\n                }\n            }\n        }\n\t\t int unionsearch(int root)\n\t\t{\n\t\t\tint son, tmp;\n\t\t\tson = root;\n\t\t\twhile(root != pre[root]) //\u5bfb\u627e\u638c\u95e8ing\u2026\u2026\n\t\t\t\troot = pre[root];\n\t\t\twhile(son != root) //\u8def\u5f84\u538b\u7f29\n\t\t\t{   tmp = pre[son];\n\t\t\t\tpre[son] = root;\n\t\t\t\tson = tmp;     }\n\t\t\treturn root; //\u638c\u95e8\u9a7e\u5230~\n\t\t}\n        int n,num, road, total, i, from[200011], to[200101],v[200101], root1, root2;\n\t\t int main()\n\t\t{\n\t\t\tscanf(\"%d\", &num);\n\t\t\troad=num-1;\n\t\t\tfor(int i=1;i<=num;i++)\n                cin>>v[i];\n\t\t\t\ttotal = num; //\u5171num-1\u4e2a\u95e8\u6d3e\n\t\t\t\tfor(int i = 1; i <= num; ++i) //\u6bcf\u6761\u8def\u90fd\u662f\u638c\u95e8\n\t\t\t\t\tpre[i] = i;\n                int k=road;\n\n\t\t\t\twhile(k--)\n\t\t\t\t{\n\t\t\t\t    cin>>from[k]>>to[k];\n\t\t\t\t\troot1 = unionsearch(from[k]);\n\t\t\t\t\troot2 = unionsearch(to[k]);\n\t\t\t\t\tif(root1 != root2&&v[root1]==v[root2]) //\u638c\u95e8\u4e0d\u540c\uff1f\u8e22\u9986\uff01~\n\t\t\t\t\t{\n\t\t\t\t\t\tpre[root1] = root2;\n\t\t\t\t\t\ttotal--; //\u95e8\u6d3e\u5c11\u4e00\u4e2a\uff0c\u654c\u4eba\uff08\u8981\u5efa\u7684\u8def\uff09\u5c31\u5c11\u4e00\u4e2a\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint sum=0;\n\t\t\t\tfor(int i=1;i<=num;i++)\n                {\n                    root1 = unionsearch(i);\n                    if(mapp[root1]==0)\n                    {\n                        sum++;\n                        mapp[root1]=sum;\n                    }\n                }\n                memset(vis, 0, sizeof(vis));\n                memset(dis, 0x3f3f3f, sizeof(dis));\n                for(int i = 0; i < road; i++) {\n                    root1 = unionsearch(from[i]);\n\t\t\t\t\troot2 = unionsearch(to[i]);\n\t\t\t\t\tif(root1 != root2) //\u638c\u95e8\u4e0d\u540c\uff1f\u8e22\u9986\uff01~\n\t\t\t\t\t{\n\t\t\t\t\t\tinsert(mapp[root1], mapp[root2], 1);\n                        insert(mapp[root2], mapp[root1], 1);\n\t\t\t\t\t}\n                }\n\n                n=sum;\n                dis[1] = 0;\n                dfs(1);\n                int maxx = -1000;\n                for(int i = 1; i <= n; ++i)\n                    if(dis[i] > maxx && dis[i] != 1061109567) {\n                        maxx = dis[i];\n                        start=i;\n                    }\n                memset(vis, 0, sizeof(vis));\n                memset(dis, 0x3f3f3f,sizeof(dis));\n                dis[start] = 0;\n                dfs(start);\n                maxx = -1000;\n                for(int i = 1; i <= n; ++i)\n                    if(dis[i] > maxx && dis[i] != 1061109567) {\n                        maxx = dis[i];\n                        endd = i;\n                    }\n                 if((maxx+1)%2==0)\n                     printf(\"%d\\n\",(maxx+1)/2);\n                else\n                     printf(\"%d\\n\",(maxx)/2);\n\t\t\treturn 0;\n        }\n\n```\n\n\u5b66\u4f1a\u4e86\u7684\u8bdd\u8bb0\u5f97\u597d\u8bc4\u54df\uff0c\u4eb2\n\n\n\n\n",
        "postTime": 1569502253,
        "uid": 133364,
        "name": "xiayucc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF734E \u3010Anton and Tree\u3011"
    },
    {
        "content": "\u540c\u4e00\u4e2a\u989c\u8272\u7684\u4e00\u4e2a\u8054\u901a\u5757\u53ef\u4ee5\u88ab\u4e00\u8d77\u67d3\u8272\uff0c\u6240\u4ee5\u8bf4\u53ef\u4ee5\u76f4\u63a5\u770b\u6210\u4e00\u4e2a\u70b9\u3002\u5b9e\u73b0\u65b9\u6cd5\u5927\u6982\u5c31\u662f\u7ed9\u6bcf\u4e2a\u70b9\u91cd\u65b0\u6807\u53f7\uff0c\u5982\u679c\u8054\u901a\u4e14\u989c\u8272\u76f8\u540c\u5c31\u6807\u540c\u4e00\u4e2a\u53f7\u3002\u4e4b\u540e\u518d\u91cd\u65b0\u5efa\u6811\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u91cd\u65b0\u5efa\u51fa\u7684\u6811\u76f8\u90bb\u4e24\u4e2a\u70b9\u7684\u989c\u8272\u4e00\u5b9a\u662f\u4e0d\u540c\u7684\u3002\u6240\u4ee5\u9700\u8981\u4fee\u6539\u7684\u6b21\u6570\u5c31\u662f\u6811\u7684\u76f4\u5f84$/2$\u4e0a\u53d6\u6574\u3002\n\n```\n\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\n\tint x=0,f=1;\n\tchar c=getchar();\n\twhile(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n\twhile(isdigit(c)){x=(x<<3)+(x<<1)+(c^48);c=getchar();}\n\treturn x*f;\n}\nconst int N=400040;\nstruct edge\n{\n\tint nxt,to;\n}e[N];\nint head[N],cnt;\nint n;\nint fa[N],x[N],y[N];\nint col[N];\nint maxx,id;\ninline int find(int x)\n{\n\treturn x==fa[x]?x:fa[x]=find(fa[x]);\n}\ninline void mer(int x,int y)\n{\n\tint tx=find(x),ty=find(y);\n\tif(col[tx]==col[ty]) fa[ty]=tx;\n}\ninline void init()\n{\n\tcnt=0;\n\tmemset(head,-1,sizeof(head));\n}\ninline void add_edge(int u,int v)\n{\n\te[++cnt].nxt=head[u];\n\te[cnt].to=v;\n\thead[u]=cnt;\n}\ninline void dfs(int u,int f,int dep)\n{\n\tif(dep>maxx){maxx=dep;id=u;}\n\tfor(int i=head[u];i!=-1;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==f)continue;\n\t\tdfs(v,u,dep+1);\n\t}\n}\nint main()\n{\n\tinit();\n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcol[i]=read();\n\t\tfa[i]=i;\n\t}\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tx[i]=read(),y[i]=read();\n\t\tmer(x[i],y[i]);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfa[i]=find(fa[i]);//\u7f29\u70b9\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(fa[x[i]]!=fa[y[i]])\n\t\t{\n\t\t\tadd_edge(fa[x[i]],fa[y[i]]);//\u5efa\u56fe\n\t\t\tadd_edge(fa[y[i]],fa[x[i]]);\n\t\t}\n\t}\n\tdfs(fa[1],0,0);//\u4e24\u904d\u6df1\u641c\u6c42\u6811\u7684\u76f4\u5f84\n\tdfs(id,0,0);\n\tcout<<(maxx+1)/2;\n}\t\n\n```\n",
        "postTime": 1593614827,
        "uid": 115779,
        "name": "\u6781\u5bd2\u795e\u51b0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF734E \u3010Anton and Tree\u3011"
    },
    {
        "content": "# $\\mathtt{CF734E}$\n\n## $\\mathcal{Description}$\n\n\u7ed9\u4e00\u68f5$n(n\\leq200000)$\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u4e3a\u9ed1\u8272\u6216\u767d\u8272\uff0c\u4e00\u6b21\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u4e00\u4e2a\u76f8\u540c\u989c\u8272\u7684\u8fde\u901a\u5757\u53d8\u6210\u53e6\u4e00\u79cd\u989c\u8272\uff0c\u6c42\u4f7f\u6574\u68f5\u6811\u53d8\u6210\u4e00\u79cd\u989c\u8272\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u3002\n\n## $\\mathcal{Solution}$\n\n\u8fd9\u68f5\u6811\u4e2d\u6bcf\u4e2a\u70b9\u4e3a\u9ed1\u70b9\u6216\u767d\u70b9\uff0c\u7136\u540e\u6700\u540e\u4e5f\u53ea\u8981\u6c42\u51fa\u6700\u5c0f\u64cd\u4f5c\u6570\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u6211\u4eec\u9009\u62e9\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u8fdb\u884c\u67d3\u8272\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\uff08\u90fd\u4f1a\u628a\u8fd9\u4e2a\u8054\u901a\u5757\u53d8\u6210\u540c\u4e00\u4e2a\u989c\u8272\uff09\uff0c\u4e8e\u662f\u6211\u4eec\u81ea\u7136\u800c\u7136\u7684\u53ef\u4ee5\u60f3\u5230\u7f29\u70b9\u3002\u7136\u540e\u6837\u4f8b\u4e2d\u7684\u6811\u5c31\u53ef\u4ee5\u662f![](https://s1.ax1x.com/2018/10/17/idqfdH.png)\n\n(\u8d3a\u4e2a\u56fe$qwq$)\n\n\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u628a\u8fd9\u4e2a\u6811\u4ece\u539f\u5148\u7684\u6811\u53d8\u6210\u4e86\u4e00\u68f5\u5f02\u5c42\u989c\u8272\u76f8\u5f02\uff08\u4e5f\u5c31\u662f\u9ed1\u767d\u76f8\u95f4\uff09\u7684\u6811\uff0c\u5982\u679c\u5f53\u524d\u662f\u4e00\u6761\u94fe\uff0c\u6211\u4eec\u8981\u662f\u6700\u540e\u64cd\u4f5c\u6570\u662f\u6700\u5c0f\u7684\uff0c\u6211\u4eec\u4e00\u5b9a\u4f1a\u9009\u62e9\u4ece\u4e2d\u95f4\u5f00\u59cb\u67d3\u8272\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u53ea\u9700\u8981\u9009\u62e9\u4ed6\u7684\u76f4\u5f84\u8fdb\u884c\u67d3\u8272\uff0c\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f$(\u76f4\u5f84+1)/ 2$\u3002\n\n## $\\mathcal{Code}$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 2e5 + 10;\n\nint n, color[N];\nvector<int> a[N];\n\ninline int read() {\n\tint x = 0, k = 1; char c = getchar();\n\tfor (; c < 48 || c > 57; c = getchar()) k ^= (c == '-');\n\tfor (; c >= 48 && c <= 57; c = getchar()) x = x * 10 + (c ^ 48);\n\treturn k ? x : -x;\n}\n\npair<int, int> dfs(int x, int fa, int depth) {\n    int sz = a[x].size();\n    pair<int, int> tmp = make_pair(depth, x);\n    for (int i = 0; i < sz; i++) {\n        int y = a[x][i];\n        if (y == fa)\n            continue;\n        if(color[y] != color[x])\n            tmp = std::max(tmp, dfs(y, x, depth + 1));\n        else \n            tmp = std::max(tmp, dfs(y, x, depth));\n    }\n    return tmp;\n}\n\nint main() {\n    n = read();\n    for (int i = 1; i <= n; i++)\n        color[i] = read();\n    for (int i = 1; i < n; i++) {\n        int x = read(), y = read();\n        a[x].push_back(y), a[y].push_back(x);\n    }\n    pair<int, int> tmp = dfs(1, -1, 0);\n    tmp = dfs(tmp.second, -1, 0);\n    printf(\"%d\\n\", tmp.first + 1 >> 1);\n}\n```",
        "postTime": 1570521048,
        "uid": 13746,
        "name": "Trimsteanima",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF734E \u3010Anton and Tree\u3011"
    },
    {
        "content": "# Sol.\n[\u5b8c\u6574\u7248\uff08\u6216\u8bb8\u662f\u66f4\u4f73\u7684\u9605\u8bfb\u4f53\u9a8c\uff1f\uff09](https://www.cnblogs.com/Xsmyy/p/13551469.html)\n### \u6765\u8bb2\u8bb2\u5927\u4f53\u7684\u601d\u8def\u5427\uff01\n\u8fd9\u9053\u9898\u76ee\uff0c\u6211\u4eec\u9996\u5148\u8981\u60f3\u5230\uff1a\n- \u628a\u90a3\u4e9b\u76f8\u540c\u989c\u8272\u7684\u70b9\u7f29\u5230\u4e00\u8d77\uff0c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u3002\n\n\u7f29\u70b9\u5982\u56fe\uff08\u6837\u4f8b\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hiysx0kj.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u7136\u540e\uff0c\u4f3c\u4e4e\u5c31\u8c41\u7136\u5f00\u6717\u4e86\u3002\n\n~~\u7f29\u5b8c\u70b9\u4ee5\u540e\u4f3c\u4e4e\u53d8\u6210\u4e86\u4e00\u9053\u6c42\u6811\u7684\u76f4\u5f84**\u306e**\u95ee\u9898\uff1f~~\n\n\u6c42\u5b8c\u6811\u7684\u76f4\u5f84\u4e4b\u540e\uff0c\u6211\u4eec\u5bb9\u6613\u60f3\u5230\uff1a\n$$\nAns=\\biggl\\lfloor\\frac{Diamater+1}{2}\\biggr\\rfloor\n$$\n\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define MAX 1000001\nusing namespace std;\nint TotalPoint;\nint Count;\nint Color[MAX];\nint Block[MAX];\nint First[MAX],Second[MAX];\nvector< int >Edge[MAX];\nvector< int >NewEdge[MAX];\ninline void Shrink(int Now,int Father)\n{\n\tif(Color[Now]==Color[Father])\n\t{\n\t\tBlock[Now]=Block[Father];\n\t}\n\telse\n\t{\n\t\tNewEdge[Block[Father]].push_back(Block[Now]);\n\t}\n\tregister int i;\n\tfor(i=0;i<Edge[Now].size();i++)\n\t{\n\t\tregister int Next;\n\t\tNext=Edge[Now][i];\n\t\tif(Next!=Father)\n\t\t{\n\t\t\tShrink(Next,Now);\n\t\t}\n\t}\n}\ninline void Diamater(int Now,int Father)\n{\n\tregister int i;\n\tfor(i=0;i<NewEdge[Now].size();i++)\n\t{\n\t\tregister int Next;\n\t\tNext=NewEdge[Now][i];\n\t\tDiamater(Next,Father);\n\t\tif(First[Next]+1>=First[Now])\n\t\t{\n\t\t\tSecond[Now]=First[Now];\n\t\t\tFirst[Now]=First[Next]+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(First[Next]+1>Second[Now])\n\t\t\t{\n\t\t\t\tSecond[Now]=First[Next]+1;\n\t\t\t}\n\t\t}\n\t}\n}\nint main(void)\n{\n\tregister int i;\n\tcin>>TotalPoint;\n\tfor(i=1;i<=TotalPoint;i++)\n\t{\n\t\tBlock[i]=i;\n\t}\n\tColor[0]=233;\n\tfor(i=1;i<=TotalPoint;i++)\n\t{\n\t\tcin>>Color[i];\n\t}\n\tfor(i=1;i<TotalPoint;i++)\n\t{\n\t\tregister int U,V;\n\t\tcin>>U>>V;\n\t\tEdge[U].push_back(V);\n\t\tEdge[V].push_back(U);\n\t}\n\tCount=0;\n\tShrink(1,0);\n\tDiamater(1,0);\n\tregister int Ans;\n\tAns=0;\n\tfor(i=1;i<=TotalPoint;i++)\n\t{\n\t\tAns=max(Ans,First[i]+Second[i]);\n\t}\n\tcout<<(Ans+1)/2<<endl; \n\treturn 0;\n}\n\n```",
        "postTime": 1598197586,
        "uid": 132168,
        "name": "_Clown_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF734E \u3010Anton and Tree\u3011"
    },
    {
        "content": "\u7b80\u5355\u9898\uff0c\u4e8c\u5341\u5206\u949f\u79d2\u6389\u4e86\u3002\n\n\u8003\u8651\u5230\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u66f4\u6539\u4e00\u4e2a**\u8fde\u901a\u5757**\u5185\u6240\u6709\u7684\u8282\u70b9\u989c\u8272\uff0c\u6211\u4eec\u5e72\u8106\u628a\u6811\u4e0a\u7684\u6240\u6709\u76f8\u540c\u989c\u8272\u8fde\u901a\u5757\u7f29\u70b9\u7f29\u5230\u4e00\u8d77\u3002\u73b0\u5728\u6211\u4eec\u5f97\u5230\u4e00\u68f5\u66f4\u5c0f\u7684\u6811\uff0c\u8fd9\u68f5\u6811\u6ee1\u8db3\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u8fde\u63a5\u5230\u7684\u53e6\u4e00\u4e2a\u8282\u70b9\u4e0e\u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u989c\u8272\u4e00\u5b9a\u4e0d\u540c\u3002\n\n\u4e8e\u662f\u8fd9\u9053\u9898\u53d8\u6210\u4e86\u6c42\u6811\u76f4\u5f84\u3002\u8bbe\u6811\u76f4\u5f84\u4e3a $d$\uff0c\u6700\u4f18\u7b54\u6848\u4e3a $\\lfloor \\dfrac{d+1}{2} \\rfloor$\u3002\n\n\u8bc1\u660e\uff1a\n\n\u5047\u8bbe\u6211\u4eec\u6709\u66f4\u4f18\u7684\u7b54\u6848\u3002\u6811\u76f4\u5f84\u4e3a $d$\uff0c\u6211\u4eec\u9700\u8981\u628a\u76f4\u5f84\u5408\u5e76\u6210\u4e00\u4e2a\u989c\u8272\uff0c\u663e\u7136\u6211\u4eec\u9700\u8981\u5408\u5e76 $\\lfloor \\dfrac{d+1}{2} \\rfloor$ \u6b21\uff0c\u8bf4\u660e\u6ca1\u6709\u66f4\u4f18\u7684\u7b54\u6848\uff0c\u56e0\u6b64\u6700\u4f18\u7b54\u6848\u4e3a $\\lfloor \\dfrac{d+1}{2} \\rfloor$\u3002\n\n\u5bf9\u4e8e\u5177\u4f53\u7f29\u70b9\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u5199\u4e3a\u4e0b\u9762\u7684\u8fc7\u7a0b\uff1a\n\n1. `dfs` \u4e2d\u904d\u5386\u5230\u5f53\u524d\u8282\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u7684\u989c\u8272\u548c\u5176\u7236\u4eb2\u4e0d\u540c\uff0c\u8bf4\u660e\u8fd9\u662f\u4e00\u4e2a\u65b0\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5426\u5219\u8fd9\u4e2a\u8282\u70b9\u4e0e\u7236\u4eb2\u5c5e\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff1b   \n2. \u904d\u5386\u8fd9\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$ \u7684\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvector<int> G[200005],Gn[200005];\nint n,col[200005],scc[200005],cnt,ncol[200005],dp[200005][2];\nbool used[200005];\nvoid dfs(int now,int pre)\n{\n\tif(col[pre]!=col[now])\tscc[now]=++cnt;\n\telse\tscc[now]=scc[pre];\n\tfor(unsigned int i=0;i<G[now].size();++i)\n\t{\n\t\tint to=G[now][i];\n\t\tif(to==pre)\tcontinue;\n\t\tdfs(to,now);\n\t}\n}\nint dis,maxn;\nvoid dfs1(int now,int pre,int far)\n{\n\tif(far>dis)\n\t{\n\t\tdis=far;\n\t\tmaxn=now;\n\t}\n\tfor(unsigned int i=0;i<Gn[now].size();++i)\n\t{\n\t\tint to=Gn[now][i];\n\t\tif(to==pre)\tcontinue;\n\t\tdfs1(to,now,far+1);\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tcol[0]=-1;\n\tfor(int i=1;i<=n;++i)\tscanf(\"%d\",&col[i]);\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d %d\",&u,&v);\n\t\tG[u].push_back(v);\n\t\tG[v].push_back(u);\n\t}\n\tdfs(1,0);\n\tint p=0,q=0;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(used[scc[i]])\tcontinue;\n\t\tif(col[i])\t++p;\n\t\telse\t++q;\n\t\tused[scc[i]]=true;\n\t\tncol[scc[i]]=col[i];\n\t}\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tfor(unsigned int j=0;j<G[i].size();++j)\n\t\t{\n\t\t\tint u=i,v=G[i][j];\n\t\t\tif(scc[u]==scc[v])\tcontinue;\n\t\t\tGn[scc[u]].push_back(scc[v]);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i)\tsort(Gn[i].begin(),Gn[i].end()),Gn[i].erase(unique(Gn[i].begin(),Gn[i].end()),Gn[i].end());\n\tdfs1(1,0,0);\n\tdfs1(maxn,0,0);\n\tprintf(\"%d\",(dis+1)/2);\n\treturn 0;\n}\n```",
        "postTime": 1597238349,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF734E \u3010Anton and Tree\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\n\n\u4e00\u68f5\u6811\u4e0a\u6709\u9ed1\u767d\u4e24\u79cd\u989c\u8272\u7684\u7ed3\u70b9\uff0c\u6bcf\u6b21\u53ef\u4ee5\u628a\u8fde\u901a\u7684\u4e00\u79cd\u989c\u8272\u53d8\u6210\u53e6\u4e00\u79cd\u989c\u8272\u3002\u6c42\u81f3\u5c11\u8981\u591a\u5c11\u6b21\uff0c\u624d\u80fd\u662f\u6574\u68f5\u6811\u53d8\u4e3a\u4e00\u79cd\u989c\u8272\u3002\n\n---\n\n\u56e0\u4e3a\u4e00\u6b21\u64cd\u4f5c\u540e\u662f\u6574\u4e2a\u540c\u8272\u8fde\u901a\u5757\u540c\u65f6\u53d8\u8272\uff0c\u90a3\u5c31\u5148\u628a\u540c\u8272\u8fde\u901a\u5757\u7f29\u6210\u4e00\u4e2a\u70b9\n\n\u7f29\u5b8c\u70b9\u540e\uff0c\u6c42\u76f4\u5f84 $d$ \uff0c\u7b54\u6848\u4e3a $\\lfloor \\frac {d+1}2 \\rfloor$\n\n**but why?**\n\n\u7f29\u5b8c\u70b9\u540e\u7684\u56fe\u4e0a\u6bcf\u4e24\u4e2a\u76f8\u90bb\u7684\u70b9\u989c\u8272\u4e00\u5b9a\u4e0d\u540c\uff0c\u5426\u5219\u5e94\u8be5\u53d8\u62101\u4e2a\u70b9\u4e86\n\n\u8981\u7b97\u76f4\u5f84\u7684\u539f\u56e0\u662f\uff0c\u76f4\u5f84\u662f\u6811\u4e2d\u6700\u957f\u7684\u8def\u5f84\uff0c\u4f60\u65e0\u8bba\u600e\u4e48\u64cd\u4f5c\u603b\u4e0d\u53ef\u80fd\u628a\u76f4\u5f84\u90fd\u53d8\u6210\u540c\u4e00\u79cd\u989c\u8272\u800c\u8fd8\u6709\u5176\u4ed6\u8def\u5f84\u975e\u540c\u8272\u5427\n\n\u90a3\u4e48\u76f4\u63a5\u8003\u8651\u5982\u4f55\u628a\u76f4\u5f84\u53d8\u6210\u540c\u4e00\u79cd\u989c\u8272\u4e86\u3002\u80af\u5b9a\u662f\u4ece\u76f4\u5f84\u7684\u4e2d\u95f4\u90e8\u5206\u5f00\u59cb\u64cd\u4f5c\u3002\u6211\u4eec\u6765\u6a21\u62df\u4e00\u4e0b\n\n```\n1 0 1 0 1 0 // 0 changes\n```\n\n```\n1 0 [0] 0 1 0 // 1 changes\n```\n\n```\n1 1 [1] 1 1 0 // 2 changes\n```\n\n```\n0 0 [0] 0 0 0 // 3 changes\n```\n\n\u7136\u540e\u4f60\u518d\u6a21\u62df\u53d1\u73b0\u76f4\u5f84\u957f\u5ea6\u4e3a7\u89814\u6b21\uff0c\u957f\u5ea6\u4e3a8\u89814\u6b21\uff0c\u957f\u5ea6\u4e3a9\u89815\u6b21\n\n\u4e8e\u662f\u4f60\u5c31\u627e\u5230\u4e86\u89c4\u5f8b ~~\uff08\u534e\u751f\uff0c\u4f60\u53d1\u73b0\u4e86\u76f2\u70b9~~\n\n```cpp\n// This code wrote by chtholly_micromaker(MicroMaker)\n#include <bits/stdc++.h>\n#define reg register\n#define pii pair<int,int>\nusing namespace std;\nconst int MaxN=200050;\nstruct Edge\n{\n\tint nxt,to;\n}E[MaxN<<1],Ep[MaxN<<1];\ntemplate <class t> inline void rd(t &s)\n{\n\ts=0;\n\treg char c=getchar();\n\twhile(!isdigit(c))\n\t\tc=getchar();\n\twhile(isdigit(c))\n\t\ts=(s<<3)+(s<<1)+(c^48),c=getchar();\n\treturn;\n}\nint hd[MaxN],hdp[MaxN],en,enp,n;\nint col[MaxN],idp[MaxN];\nbool vis[MaxN];\npii dis[MaxN];\ninline void adde(int u,int v)\n{\n\t++en;\n\tE[en].nxt=hd[u];\n\tE[en].to=v;\n\thd[u]=en;\n\treturn;\n}\ninline void addep(int u,int v)\n{\n//\tcout<<\"addep: \"<<u<<\" -> \"<<v<<endl;\n\t++enp;\n\tEp[enp].nxt=hdp[u];\n\tEp[enp].to=v;\n\thdp[u]=enp;\n\treturn;\n}\ninline void dfs1(int u,int color,int idx)\n{\n\tvis[u]=true;\n\tidp[u]=idx;\n\tfor(int i=hd[u];~i;i=E[i].nxt)\n\t{\n\t\treg int v=E[i].to;\n\t\tif(vis[v])\n\t\t\tcontinue;\n\t\tif(col[v]!=color)\n\t\t\tcontinue;\n\t\tdfs1(v,color,idx);\n\t}\n\treturn;\n}\ninline void dfs2(int u,int color,int idx)\n{\n\tif(col[u]!=color)\n\t{\n\t\taddep(idp[u],idx);\n\t\taddep(idx,idp[u]);\n\t\treturn;\n\t}\n\tvis[u]=true;\n\tfor(int i=hd[u];~i;i=E[i].nxt)\n\t{\n\t\treg int v=E[i].to;\n\t\tif(vis[v])\n\t\t\tcontinue;\n\t\tdfs2(v,color,idx);\n\t}\n\treturn;\n}\ninline void dfs3(int u,int fa)\n{\n\tfor(int i=hdp[u];~i;i=Ep[i].nxt)\n\t{\n\t\treg int v=Ep[i].to;\n\t\tif(v==fa)\n\t\t\tcontinue;\n\t\tdis[v].first=dis[u].first+1;\n\t\tdfs3(v,u);\n\t}\n\treturn;\n}\nsigned main(void)\n{\n\tios::sync_with_stdio(false);cin.tie(0);\n\tmemset(hd,-1,sizeof hd);\n\tmemset(hdp,-1,sizeof hdp);\n\treg int u,v,cnt=0;\n\tcin>>n;\n\tfor(int i=1;i<=n;++i)\n\t\tcin>>col[i];\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tcin>>u>>v;\n\t\tadde(u,v);adde(v,u);\n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tif(!vis[i])\n\t\t\tdfs1(i,col[i],++cnt);\n\tmemset(vis,false,sizeof vis);\n\tfor(int i=1;i<=n;++i)\n\t\tif(!vis[i])\n\t\t\tdfs2(i,col[i],idp[i]);\n\tfor(int i=1;i<=cnt;++i)\n\t\tdis[i].second=i;\n\tdfs3(1,0);\n\tdis[1].first=0;\n\treg pii res=dis[1];\n\tfor(int i=2;i<=cnt;++i)\n\t\tif(dis[i].first>res.first)\n\t\t\tres=dis[i];\n\tdis[res.second].first=0;\n\tdfs3(res.second,0);\n\tres=dis[1];\n\tfor(int i=2;i<=cnt;++i)\n\t\tif(dis[i].first>res.first)\n\t\t\tres=dis[i];\n\tcout<<(res.first+1)/2<<endl;\n\t/*\n\tfor(int i=1;i<=n;++i)\n\t\tcout<<idp[i]<<\" \";\n\t*/\n\treturn 0;\n}\n```\n\n",
        "postTime": 1583227116,
        "uid": 51376,
        "name": "MyukiyoMekya",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF734E \u3010Anton and Tree\u3011"
    }
]