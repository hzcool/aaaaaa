[
    {
        "content": "## \u8fd9\u662f\u4e00\u9053\u7ec3\u542f\u53d1\u5f0f\u5408\u5e76 \uff08dsu on tree\uff09 \u7684\u597d\u9898\n\n### \u5148\u7b80\u5355\u8bf4\u4e00\u4e0b\u542f\u53d1\u5f0f\u5408\u5e76\u5427\n\n\u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u6574\u68f5\u6811\uff0c\u5e76\u7528\u4e00\u4e2a\u6570\u7ec4ap\uff08appear\uff09\u8bb0\u5f55\u6bcf\u79cd\u989c\u8272\u51fa\u73b0\u51e0\u6b21\n\n\u4f46\u662f\u6bcf\u505a\u5b8c\u4e00\u68f5\u5b50\u6811\u5c31\u9700\u8981\u6e05\u7a7aap\uff0c\u4ee5\u514d\u5bf9\u5176\u5144\u5f1f\u9020\u6210\u5f71\u54cd\u3002\n\n\u800c\u8fd9\u6837\u505a\u5b83\u7684\u7956\u5148\u65f6\u5c31\u8981\u628a\u5b83\u91cd\u65b0\u641c\u4e00\u904d\uff0c\u6d6a\u8d39\u65f6\u95f4\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9v\uff0c\u6700\u540e\u4e00\u68f5\u5b50\u6811\u662f\u4e0d\u7528\u6e05\u7a7a\u7684\uff0c\u56e0\u4e3a\u505a\u5b8c\u90a3\u68f5\u5b50\u6811\u540e\u53ef\n\u4ee5\u628a\u5176\u7ed3\u679c\u76f4\u63a5\u52a0\u5165v\u7684\u7b54\u6848\u4e2d\u3002\n\n\u9009\u54ea\u68f5\u5b50\u6811\u5462\uff1f\u5f53\u7136\u662f\u6240\u542b\u8282\u70b9\u6700\u591a\u7684\u4e00\u68f5\u54af\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u201c\u91cd\u513f\u5b50\u201d\n\n\u5176\u5b9e\u611f\u89c9\u8fd9\u6837\u5feb\u4e0d\u4e86\u591a\u5c11\u2026\u2026\u4f46\u662f\u5b83\u7adf\u7136\u662fnlogn\u7684\uff01\n\n### \u5bf9\u4e8e\u8fd9\u9053\u9898\n\n\u5148\u7528\u4e00\u904ddfs\u7b97\u51fa\u6bcf\u4e2a\u70b9\u662f\u5426\u4e3a\u91cd\u513f\u5b50\n\n\u518ddfs\u7edf\u8ba1\u7b54\u6848\uff0c\u6bcf\u6b21\u78b0\u5230\u91cd\u513f\u5b50\u5c31\u8df3\u8fc7\uff0c\u9012\u5f52\u5b8c\u6e05\u7a7aap\u6570\u7ec4\u7b49\u4e1c\u4e1c\n\n\u6700\u540edfs\u91cd\u513f\u5b50\uff0c\u4e0d\u6e05\u7a7a\n\n\u518d\u5bf9\u5f53\u524d\u8282\u70b9\u8fdb\u884c\u53e6\u4e00\u79cddfs\uff0c\u66b4\u529b\u7edf\u8ba1ap\uff0c\u4e0d\u505a\u91cd\u513f\u5b50\n\n\u770b\u4ee3\u7801\u5427~~~\uff08\u8fd9\u662f\u5e05\u7684\u4eba\u6700\u4e0d\u5173\u5fc3\u7684\u90e8\u5206\uff09\n\n------------\u6211\u662f\u5206\u5272\u7ebf\n\n```cpp\n//written by YellowBean, the AKer of IMO (rubbish)\n#include<bits/stdc++.h>\n#define ll long long\n#define re register\nusing namespace std;\nconst int N=2e5+10;\nint n;\nint c[N];//color\nint v[N],nex[N],first[N],tot=1;\ninline void add(int x,int y){\n\tv[++tot]=y;\n\tnex[tot]=first[x];\n\tfirst[x]=tot;\n}\ninline int read(){\n\tint x=0;char ch=getchar();\n\twhile(!isdigit(ch))ch=getchar();\n\twhile(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n\treturn x;\n}\nll ans[N],ap[N],mx,sum;//\u5341\u5e74OI\u4e00\u573a\u7a7a\uff0c\u4e0d\u5f00 long long \u89c1\u7956\u5b97 \n//ap\u8868\u793a\u6bcf\u79cd\u989c\u8272\u51fa\u73b0\u51e0\u6b21 mx\u8868\u793a\u51fa\u73b0\u6700\u591a\u7684\u6b21\u6570 sum\u8868\u793a\u989c\u8272\u7f16\u53f7\u548c \nint sz[N];//\u5b50\u6811\u5927\u5c0f \nbool gson[N];//\u8868\u793a\u4e00\u4e2a\u70b9\u662f\u5426\u4e3a\u91cd\u513f\u5b50 \nvoid getg(int x,int f){//get \u5b50\u6811\u5927\u5c0f \u4ee5\u53ca \u91cd\u513f\u5b50 \n\tsz[x]=1;\n\tint mx=0,p=0;\n\tfor(re int i=first[x];i;i=nex[i]){\n\t\tint y=v[i];\n\t\tif(y==f)continue;\n\t\tgetg(y,x);sz[x]+=sz[y];\n\t\tif(sz[y]>mx){\n\t\t\tmx=sz[y];\n\t\t\tp=y;\n\t\t}\n\t}if(p)gson[p]=1;\n}\nvoid DFS(int x,int f,int p){//\u66b4\u529b\u904d\u5386\u5b50\u6811 p\u4e3a\u91cd\u513f\u5b50 \u4e4b\u540e\u9700init\u6e05\u7a7a \n\t//\u7edf\u8ba1\u7b54\u6848 \n\tap[c[x]]++;\n\tif(ap[c[x]]>mx){\n\t\tmx=ap[c[x]];\n\t\tsum=c[x];\n\t}else if(ap[c[x]]==mx)sum+=c[x];\n\tfor(re int i=first[x];i;i=nex[i]){\n\t\tint y=v[i];\n\t\tif(y==f || y==p)continue;//\u4e0d\u8981\u628a\u91cd\u513f\u5b50\u4e5f\u4e00\u8d77\u904d\u5386\u4e86\uff01 \n\t\tDFS(y,x,p);\n\t}\n}\ninline void init(int x,int f){//\u66b4\u529b\u904d\u5386\u540e\u6e05\u7a7a \n\tap[c[x]]--;\n\tfor(re int i=first[x];i;i=nex[i]){\n\t\tint y=v[i];\n\t\tif(y==f)continue;\n\t\tinit(y,x);\n\t}\n}\nvoid dfs(int x,int f){//\u542f\u53d1\u5f0f\u5408\u5e76\u5173\u952e\u51fd\u6570\uff01 \n\tint p=0;//\u91cd\u513f\u5b50\u6807\u8bb0 \n\tfor(re int i=first[x];i;i=nex[i]){\n\t\tint y=v[i];\n\t\tif(y==f)continue;\n\t\tif(!gson[y]){//\u4e0d\u662f\u91cd\u513f\u5b50\u7684\u66b4\u529b\u505a \n\t\t\tdfs(y,x);\n\t\t\tinit(y,x);\n\t\t\tsum=mx=0;\n\t\t}\n\t\telse p=y;\n\t}if(p)dfs(p,x);//\u91cd\u513f\u5b50\u5355\u72ec\u7279\u5224\n\tDFS(x,f,p);\n\tans[x]=sum;\n}\nint main(){\n\tn=read();\n\tfor(re int i=1;i<=n;i++)c[i]=read();\n\tfor(re int i=1;i<n;i++){\n\t\tint x=read(),y=read();\n\t\tadd(x,y),add(y,x);\n\t}getg(1,0);\n\tdfs(1,0);\n\tfor(re int i=1;i<=n;i++)\n\t\tprintf(\"%lld \",ans[i]);\n}\n//those who read but don't copy are handsome\n```\n\n\u5173\u4e8e\u590d\u6742\u5ea6\u8bc1\u660e\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u5b83\u88ab\u8ba1\u7b97\u7684\u6b21\u6570\u5c31\u662f\u5b83\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u8f7b\u8fb9\uff08\u8fde\u5230\u8f7b\u513f\u5b50\u7684\u8fb9\uff09\u6570\n\n\u6211\u4eec\u53ea\u9700\u7b97\u51fa\u8f7b\u8fb9\u6709\u51e0\u6761\n\n\u7531\u4e8e\u6bcf\u4ece\u4e00\u4e2a\u6df1\u5ea6\u4e3ad\u7684\u8282\u70b9\u6cbf\u4e00\u6761\u8f7b\u8fb9\u8d70\u5230\u6df1\u5ea6\uff08d-1\uff09\u7684\u8282\u70b9\uff0c\u5b50\u6811\u5927\u5c0f\u5c31\u81f3\u5c11*2\n\uff08\u8fd9\u662f\u56e0\u4e3a\u6709\u4e00\u4e2a\u91cd\u513f\u5b50>=\u5f53\u524d\u5b50\u6811\uff09\n\n\u6240\u4ee5\u6700\u591a\u53ea\u6709logn\u6761\u8f7b\u8fb9\uff01\n\n\u6545\u590d\u6742\u5ea6\u4e3aO\uff08nlogn\uff09\uff01\n\n#### \u7686\u5927\u6b22\u559c\uff01\n",
        "postTime": 1571042687,
        "uid": 104292,
        "name": "YellowBean_Elsa",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "# **\u3010\u9898\u89e3\u3011Lomsat gelral [CF600E]**\n\n[$\\mathcal{My}\\ \\mathcal{Blog}$](https://www.cnblogs.com/Xing-Ling/p/12334816.html)\n\n## **\u3010\u524d\u8a00\u3011**\n\n\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76 $\\text{Dsu on tree}$ \u4e00\u822c\u7528\u6765\u89e3\u51b3\u4e00\u7c7b\u4e0d\u5e26\u4fee\u7684\u5b50\u6811\u67e5\u8be2\u95ee\u9898\uff08\u636e\u8bf4\u8fd9\u73a9\u610f\u513f\u539f\u540d \u9759\u6001\u94fe\u5206\u6cbb\uff1f\uff09\u3002\n\n\u5176\u6838\u5fc3\u601d\u60f3\u4e3a\uff1a**\u5229\u7528\u91cd\u94fe\u5256\u5206\u7684\u6027\u8d28\u4f18\u5316\u5b50\u6811\u8d21\u732e\u7684\u8ba1\u7b97\u3002**\n\n\u7531\u4e8e [$\\text{zwfymqz}$](https://www.cnblogs.com/zwfymqz/) \u5de8\u4f6c\u4e00\u8bb2\u5f97\u6bd4\u8f83\u7b80\u7565\uff0c\u4e00\u5f00\u59cb\u6211\u5e76\u6ca1\u6709\u7406\u89e3\u5230\u5176\u7cbe\u9ad3\uff0c\u5bfc\u81f4\u4e00\u5ea6\u6000\u7591\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5408\u7406\u6027\uff0c\u751a\u81f3\u8fde\u4ee3\u7801\u90fd\u770b\u4e0d\u61c2\u3002  \n\u540e\u6765\u770b\u4e86\u770b [$\\text{YudeS}$ \u696a](https://www.luogu.com.cn/user/118662) \u795e\u4ed9\u7684\u53e6\u4e00\u79cd\u5199\u6cd5 \u81ea\u5df1\u624b\u73a9\u4e86\u51e0\u68f5\u6811\u5c31\u61c2\u4e86\u3002  \n\u4e2a\u4eba\u8ba4\u4e3a\u540e\u8005\u66f4\u597d\u7406\u89e3\uff0c\u56e0\u6b64\u672c\u6587\u8bb2\u89e3\u540e\u8005\uff0c\u53ef\u80fd\u4e0e\u7f51\u4e0a\u5927\u591a\u6570\u5199\u6cd5\u7565\u6709\u4e0d\u540c\u3002\n\n## **\u3010\u7b97\u6cd5\u5b9e\u73b0\u3011**\n\n\u5148\u770b\u677f\u9898\uff1a[$\\text{Lomsat gelral [CF600E]}$](https://www.luogu.com.cn/problem/CF600E)\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\u7ed9\u51fa\u4e00\u68f5 $n$ \u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u6709\u4e00\u79cd\u989c\u8272\u7f16\u53f7\uff0c\u6c42\u8be5\u6811\u4e2d\u6bcf\u68f5\u5b50\u6811\u91cc\u7684\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u989c\u8272\u7684\u7f16\u53f7\u548c\u3002\n\n\u7b97\u6cd5\u6d41\u7a0b\u5982\u4e0b\uff1a\n\n- \u8dd1\u4e00\u904d $dfs$ \u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u7684\u91cd\u513f\u5b50 $son$ \u3002  \n\n- \u5bf9\u4e8e\u4e00\u4e2a\u70b9 $x$\uff0c\u9996\u5148\u904d\u5386\u8ba1\u7b97\u4ed6\u6240\u6709\u8f7b\u513f\u5b50\u7684 $ans$\uff0c\u5e76\u4e14\u6bcf\u7b97\u5b8c\u4e00\u4e2a\u513f\u5b50\u5c31\u8981\u6e05\u9664\u5b83\u7684\u6240\u6709\u8d21\u732e\u3002  \n\u63a5\u4e0b\u6765\u8ba1\u7b97\u91cd\u513f\u5b50 $son[x]$ \u7684\u7b54\u6848\uff0c\u5e76\u4fdd\u7559 $subtree(son[x])$ \u4e2d\u6240\u6709\u70b9\u7684\u8d21\u732e\uff0c\u7136\u540e\u518d\u66b4\u529b\u52a0\u5165 $subtree(x)$ \u4e2d\u9664 $subtree(son[x])$ \u4ee5\u5916\u7684\u6240\u6709\u70b9\u7684\u8d21\u732e\uff0c\u6b64\u65f6\u5373\u53ef\u5f97\u5230 $ans[x]$ \u3002  \n\u968f\u540e\u56de\u6eaf\u5230 $fa[x]$\uff0c\u5982\u679c $x$ \u662f $fa[x]$ \u7684\u8f7b\u513f\u5b50\uff0c\u90a3\u4e48\u5c06\u5728 $x$ \u8fd9\u4e00\u6ce2\u8ba1\u7b97\u4e0b\u6765\u7684\u8d21\u732e\u5168\u90e8\u6e05\u9664\uff0c\u53cd\u4e4b\u5219\u5168\u90e8\u4fdd\u7559\u3002\n\n## **\u3010\u65f6\u95f4\u590d\u6742\u5ea6\u3011**\n\n\u7ecf\u8fc7\u591a\u6b21~~\u4e0d\u9760\u8c31\u7684~~\u624b\u73a9\u5c1d\u8bd5\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff1a\u6bcf\u4e00\u4e2a\u70b9\u53ea\u4f1a\u5728\u5176\u5230\u6839\u8def\u5f84\u4e2d\u82e5\u5e72\u91cd\u94fe\u4ea4\u754c\u5904\u88ab\u7edf\u8ba1\uff08\u4e5f\u5373\u662f\u4ece\u8be5\u70b9\u5230\u6839\u8def\u5f84\u4e0a\u7684\u8f7b\u8fb9\u6570\u91cf\uff09\u3002\n\n\u800c\u7531\u4e8e\u91cd\u94fe\u5256\u5206\u7684\u6027\u8d28\uff0c\u4efb\u610f\u4e00\u4e2a\u70b9\u5f80\u4e0a\u8df3\u65f6\u6240\u7ecf\u8fc7\u7684\u91cd\u94fe\u6570\u91cf\u4e0d\u8d85\u8fc7 $O(logn)$\uff0c\u6240\u4ee5\u91cd\u94fe\u4ea4\u754c\u5904\uff08\u8f7b\u8fb9\uff09\u7684\u6570\u91cf\u4e5f\u4e0d\u4f1a\u8d85\u8fc7 $O(logn)$\uff0c\u56e0\u6b64\u6bcf\u4e2a\u70b9\u7684\u7edf\u8ba1\u6b21\u6570\u4e5f\u4e3a $O(logn)$ \u3002\n\n\u603b\u590d\u6742\u5ea6\u4e3a\uff1a$O(nlogn)$\uff0c\u5e76\u5e26\u4e0a\u4e00\u4e2a\u901a\u5e38\u4e3a $O(1)$ \u7684\u5e38\u6570\uff08\u7edf\u8ba1\u4e00\u4e2a\u70b9\u8d21\u732e\u7684\u590d\u6742\u5ea6\uff09\u3002\n\n## **\u3010Code\u3011**\n\n```cpp\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#define LL long long\n#define Re register int\nusing namespace std;\nconst int N=1e5+3;\nint o,n,m,x,y,t,K,tmp,A[N],Q[N],cnt[N],son[N],size[N],head[N];LL ans,Ans[N];\nstruct QAQ{int to,next;}a[N<<1];\ninline void add(Re x,Re y){a[++o].to=y,a[o].next=head[x],head[x]=o;}\ninline void in(Re &x){\n    int f=0;x=0;char c=getchar();\n    while(c<'0'||c>'9')f|=c=='-',c=getchar();\n    while(c>='0'&&c<='9')x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    x=f?-x:x;\n}\ninline void dfs(Re x,Re fa){//\u9884\u5904\u7406\u91cd\u513f\u5b50\n    size[x]=1;\n    for(Re i=head[x],to;i;i=a[i].next)\n        if((to=a[i].to)!=fa){\n            dfs(to,x),size[x]+=size[to];\n            if(size[to]>size[son[x]])son[x]=to;\n        }\n}\ninline void CL(){//\u6e05\u7a7a\u8d21\u732e\uff0c\u4ecezero\u5f00\u59cb\n    while(t)cnt[Q[t--]]=0;ans=tmp=0;\n}\ninline void insert(Re x){//\u52a0\u5165\u70b9x\u7684\u8d21\u732e\n    ++cnt[Q[++t]=A[x]];\n    if(cnt[A[x]]>tmp)tmp=cnt[ans=A[x]];\n    else if(cnt[A[x]]==tmp)ans+=A[x];\n}\ninline void addson(Re x,Re fa){//\u52a0\u5165subtree(x)\u7684\u8d21\u732e\uff08\u4ee5x\u4e3a\u6839\u7684\u6574\u68f5\u5b50\u6811\uff09\n    insert(x);\n    for(Re i=head[x],to;i;i=a[i].next)\n        if((to=a[i].to)!=fa)addson(to,x);\n}\ninline void sakura(Re x,Re fa){\n    for(Re i=head[x],to;i;i=a[i].next)\n        if((to=a[i].to)!=fa&&to!=son[x])sakura(to,x),CL();//\u8ba1\u7b97\u8f7b\u513f\u5b50\u7684\u7b54\u6848\u5e76\u6e05\u7a7a\u8d21\u732e\n    if(son[x])sakura(son[x],x);//\u8ba1\u7b97\u91cd\u513f\u5b50\u7684\u7b54\u6848\u5e76\u4fdd\u7559subtree(son[x])\uff08\u4ee5son[x]\u4e3a\u6839\u7684\u6574\u68f5\u5b50\u6811\u8d21\u732e\uff09\n    for(Re i=head[x],to;i;i=a[i].next)\n        if((to=a[i].to)!=fa&&to!=son[x])addson(to,x);//\u52a0\u5165subtree(x)-subtree(son[x])-x\uff08\u4ee5x\u7684\u6240\u6709\u8f7b\u513f\u5b50\u4e3a\u6839\u7684\u5b50\u6811\u8d21\u732e\uff09\n    insert(x),Ans[x]=ans;//\u6ce8\u610f\u8fd8\u8981\u628ax\u7684\u8d21\u732e\u4e5f\u52a0\u8fdb\u53bb\n}\nint main(){\n//  freopen(\"123.txt\",\"r\",stdin);\n    in(n),m=n-1;\n    for(Re i=1;i<=n;++i)in(A[i]);\n    while(m--)in(x),in(y),add(x,y),add(y,x);\n    dfs(1,0),sakura(1,0);\n    for(Re i=1;i<=n;++i)printf(\"%lld \",Ans[i]);\n}\n```\n\n##  **\u3010\u53c2\u8003\u8d44\u6599\u3011**\n\n- [$\\text{Dsu on tree}$ \u5165\u95e8](https://www.cnblogs.com/zwfymqz/p/9683124.html)\n\n---------\n\n## **\u3010\u540e\u8bb0\u3011**\n\n[$\\mathcal{My}\\ \\mathcal{Blog}$](https://www.cnblogs.com/Xing-Ling/p/12336327.html)\n\n\u518d\u8865\u5145\u4e00\u4e0b\u53e6\u4e00\u79cd\u505a\u6cd5\u5427\u3002\n\n\u5927\u81f4\u6d4f\u89c8\u4e86\u7f51\u4e0a\u7684\u9898\u89e3\uff0c\u5e38\u89c1\u505a\u6cd5\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a\n\n- $\\text{Dsu on tree}$\uff08\u5360\u5927\u591a\u6570\uff0c\u6bd5\u7adf\u662f\u677f\u5b50\uff09\n\n- \u7ebf\u6bb5\u6811\u5408\u5e76\uff08\u7a7a\u95f4\u5de8\u5927\uff09\n\n- $O(n\\sqrt{n}logn)$ \u7684 $\\text{DFS}$ \u5e8f $+$ $sb$ \u66b4\u529b\u83ab\u961f\uff08\u65f6\u95f4\u5de8\u5927\uff09\n\n- $O(n\\sqrt{n})$ \u7684 $\\text{DFS}$ \u5e8f $+$ \u56de\u6eda\u83ab\u961f\uff08\u6548\u7387\u4e00\u822c\uff09\n\n\u4f46\u5c31\u662f\u6ca1\u627e\u5230\u4e00\u7bc7 $\\text{DFS}$ \u5e8f $+$ \u5206\u6cbb\uff0c\u8ba9\u6211\u6765\u505a\u5168\u7f51\u7b2c\u4e00\u7bc7\u5427\uff08~~\u53ea\u662f\u6211\u6ca1\u6709\u627e\u5230\uff0c\u5e0c\u671b\u4e0d\u8981\u6253\u8138\u5427~~\uff09\u3002\n\n### **\u3010\u5206\u6790\u3011**\n\n\u5b50\u6811\u67e5\u8be2\u8f6c\u5230\u5e8f\u5217\u4e0a\u540e\u5176\u672c\u8d28\u662f\u4e00\u7cfb\u5217\u7684\u533a\u95f4\u67e5\u8be2\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u8981\u60f3\u7528\u5206\u6cbb\u662f\u9700\u8981\u6ee1\u8db3\u4e00\u5b9a\u5355\u8c03\u6027\u7684\uff0c\u90a3\u4e48\u8fd9\u4e9b\u533a\u95f4\u662f\u5426\u6709\u6211\u4eec\u60f3\u8981\u7684\u6027\u8d28\u5462\uff1f\n\n\u5148\u7ed9\u51fa\u4e00\u4e9b\u5b9a\u4e49\uff1a\n\n- $size(x)$ \u8868\u793a $|subtree(x)|$\uff0c\u5373\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\u3002\n\n- $dfn(x)$ \u8868\u793a\u8282\u70b9 $x$ \u7684 $\\text{DFS}$ \u5e8f\u3002\n\n- $idx(i)$ \u8868\u793a $\\text{DFS}$ \u5e8f $i$ \u6240\u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u6ee1\u8db3 $dfn(idx(i))=i,\\ idx(dfn(x))=x$\u3002\n\n- $Rdfn(i)$ \u8868\u793a $i+size(idx(i))-1$\uff0c\u5373 $\\text{DFS}$ \u5e8f $i$ \u6240\u5bf9\u5e94\u7684\u7684\u8282\u70b9\u5b50\u6811\u4e2d\u6700\u5927\u7684 $\\text{DFS}$ \u5e8f\u3002\n\n#### **\u3010\u5f15\u7406\u3011**\n\n**\u629b\u7ed3\u8bba**\uff1a   \n\u8bbe $i'<i$\uff0c\u82e5\u5b58\u5728\u4e00\u4e2a $j$ \u6ee1\u8db3 $i \\leqslant j \\leqslant Rdfn(i)$ \u4e14 $i' \\leqslant j \\leqslant Rdfn(i')$\uff0c\u90a3\u4e48 \u4e00\u5b9a\u6709 $Rdfn(i') \\geqslant Rdfn(i)$ \u3002  \n\uff08\u6309\u7167 [$\\text{YudeS}$ \u696a](https://www.cnblogs.com/yudes/) \u5de8\u4f6c\u6240\u8bf4\uff0c\u7a7f\u8fc7 $j$ \u7684\u533a\u95f4\u6709\u4e92\u76f8\u5305\u542b\u7684\u5173\u7cfb\uff0c\u653e\u5728\u6b64\u5904\u5373\u662f\u533a\u95f4 $[i,Rdfn(i)]$ \u88ab\u5305\u542b\u4e8e $[i',Rdfn(i')]$ \u4e2d \uff09\u3002\n\n\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u7a0d\u60f3\u4e00\u4e0b\u5c31\u660e\u767d\u4e86\u3002\n\n**\u8bc1\u660e**\uff1a  \n\u7531\u7ed9\u51fa\u7684\u4e24\u4e2a\u6761\u4ef6\u53ef\u77e5 $idx(j) \\in subtree(idx(i))$ \u4e14  $idx(j) \\in subtree(idx(i'))$\uff0c\u6240\u4ee5 $idx(i),idx(i')$ \u5747\u4e3a$idx(j)$ \u7684\u7956\u5148\u8282\u70b9\u3002  \n\u53c8\u56e0\u4e3a $i'<i$\uff0c\u4e14\u4efb\u610f\u4e00\u4e2a\u8282\u70b9 $x$ \u7684\u6240\u6709\u7956\u5148\u90fd\u5728\u4ece\u6839\u5230 $x$ \u7684\u7b80\u5355\u8def\u5f84\u4e0a\uff0c\u6240\u4ee5 $idx(i')$ \u5e94\u4e3a $idx(i)$ \u7684\u7956\u5148\u8282\u70b9\uff0c\u4e8e\u662f\u6709 $Rdfn(i') \\geqslant Rdfn(i)$\u3002\n\n#### **\u3010\u7b97\u6cd5\u5b9e\u73b0\u3011**\n\n\u56de\u5230\u8fd9\u9053\u9898\uff0c\u6709\u4e86\u4e0a\u9762\u90a3\u4e2a\u6027\u8d28\uff0c\u7528\u5206\u6cbb\u5df2\u7ecf\u5f88\u663e\u7136\u4e86\u5427\uff0c\u5bf9\u4e8e\u4e00\u5c42 $(L,mid,R)$ \u626b\u4e00\u904d\u8ba1\u7b97\u51fa\uff1a\u6ee1\u8db3 $L \\leqslant i \\leqslant mid$ \u4e14 $mid+1 \\leqslant Rdfn(i) \\leqslant R$ \u7684\u6240\u6709 $ans[i]$ \u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a$O(nlogn)$\u3002\n\n\u6838\u5fc3\u64cd\u4f5c\u5c31\u4e00\u4e2a\u5206\u6cbb\u51fd\u6570\uff0c\u597d\u60f3\u53c8\u597d\u5199\uff0c\u5c45\u7136\u6ca1\u4eba\u7528....\n\n\u50cf\u8fd9\u79cd $dot$ \u7684\u9898\u5e94\u8be5\u90fd\u53ef\u4ee5\u7528 $\\text{DFS}$ \u5e8f $+$ \u56de\u6eda\u83ab\u961f/\u5206\u6cbb \u641e\u5427\uff0c$insert$ \u51fd\u6570\u90fd\u4e0d\u9700\u8981\u6539\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5206\u6cbb\u57fa\u672c\u4e00\u6837\uff08~~\u849f\u84bb\u778e\u53e3\u80e1\uff0c\u53ef\u4fe1\u5ea6\u6781\u4f4e~~\uff09\n\n### **\u3010Code\u3011**\n\n```cpp\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#define LL long long\n#define Re register int\nusing namespace std;\nconst int N=1e5+3;\nint o,n,m,x,y,t,tmp,dfn_O,A[N],Q[N],cnt[N],dfn[N],idx[N],size[N],head[N];LL ans,Ans[N];\nstruct QAQ{int to,next;}a[N<<1];\ninline void add(Re x,Re y){a[++o].to=y,a[o].next=head[x],head[x]=o;}\ninline void in(Re &x){\n    int f=0;x=0;char c=getchar();\n    while(c<'0'||c>'9')f|=c=='-',c=getchar();\n    while(c>='0'&&c<='9')x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    x=f?-x:x;\n}\ninline void dfs(Re x,Re fa){//\u9884\u5904\u7406dfn\u5e8f\n    idx[dfn[x]=++dfn_O]=x,size[x]=1;\n    for(Re i=head[x],to;i;i=a[i].next)\n        if((to=a[i].to)!=fa)dfs(to,x),size[x]+=size[to];\n}\ninline void CL(){//\u6e05\u7a7a\u8d21\u732e\uff0c\u4ecezero\u5f00\u59cb\n    while(t)cnt[Q[t--]]=0;ans=tmp=0;\n}\ninline void insert(Re x){//\u52a0\u5165\u70b9x\u7684\u8d21\u732e\n    ++cnt[Q[++t]=A[x]];\n    if(cnt[A[x]]>tmp)tmp=cnt[ans=A[x]];\n    else if(cnt[A[x]]==tmp)ans+=A[x];\n}\ninline void sakura(Re L,Re R){//\u5206\u6cbb\u89e3\u51b3(L,R)\n    if(L==R){if(size[L]==1)Ans[L]=A[L];return;}\n    Re mid=L+R>>1;\n    sakura(L,mid),sakura(mid+1,R);//\u9012\u5f52\u89e3\u51b3\u4e0b\u9762\u7684\n    Re p=mid;CL();//\u641e\u4e00\u4e2a\u6307\u9488p\n    for(Re i=mid,j;i>=L&&(j=i+size[idx[i]]-1)<=R;--i){//\u5f53j=Rdfn(i)\u5927\u4e8eR\u65f6\u5c31\u53ef\u4ee5\u7ed3\u675f\u4e86\n        insert(idx[i]);\n        if(j<=mid)continue;//\u53ea\u89e3\u51b3\u5bf9\u4e8ej>mid\u7684\u90e8\u5206\n        while(p<j)insert(idx[++p]);//\u7531\u6027\u8d28\u53ef\u77e5\u6ee1\u8db3\u5927\u4e8emid\u7684\u90a3\u90e8\u5206j\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u4e0d\u65ad\u79fb\u52a8\u6307\u9488p\u5373\u53ef\n        Ans[idx[i]]=ans;//\u83b7\u5f97\u7b54\u6848\n    }\n}\nint main(){\n//  freopen(\"123.txt\",\"r\",stdin);\n    in(n),m=n-1;\n    for(Re i=1;i<=n;++i)in(A[i]);\n    while(m--)in(x),in(y),add(x,y),add(y,x);\n    dfs(1,0),sakura(1,n);\n    for(Re i=1;i<=n;++i)printf(\"%lld \",Ans[i]);\n}\n```\n\n#### **\u3010\u53c2\u8003\u8d44\u6599\u3011**\n\n- [$\\text{YudeS}$ \u696a](https://www.luogu.com.cn/user/118662) \u795e\u4ed9\u7684 $\\text{DFS}$ \u5e8f\u5206\u6cbb\u4ee3\u7801\u3002\n\n",
        "postTime": 1582168039,
        "uid": 110985,
        "name": "\u8fb0\u661f\u51cc",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "\u6ca1\u6709\u4eba\u5199\u7ebf\u6bb5\u6811\u5408\u5e76\u5417qwq  \n\u53cd\u6b63\u849f\u84bb\u6765\u5199\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u9898\u89e3\u5566\uff5e\n\n\u5c31\u662f\u628a\u6bcf\u4e2a\u70b9\u7684\u989c\u8272\u5148\u63d2\u5165\u6bcf\u4e2a\u70b9\u7684\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u91cc\uff0c\u7136\u540edfs\u65f6\u628a\u5b50\u6811\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u5230\u7236\u8282\u70b9\u4e0a\uff0c\u7ef4\u62a4\u9898\u610f\u8981\u6c42\u7684\u503c\u5c31\u53ef\u4ee5\u4e86\n\n\u4ee3\u7801\u957f\u8fd9\u6837\uff1a\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define lson tr[now].l\n#define rson tr[now].r\n#define int long long\nusing namespace std;\n\nstruct tree\n{\n\tint l,r,sum,val,ans;\n}tr[5000050];\n\nint rt[100010],cl[100010],cnt,n,anss[100010];\nvector<int> g[100010];\n\nint push_up(int now)\n{\n\tif(tr[lson].sum>tr[rson].sum)\n\t{\n\t\ttr[now].sum=tr[lson].sum;\n\t\ttr[now].val=tr[lson].val;\n\t\ttr[now].ans=tr[lson].ans;\n\t}\n\tif(tr[rson].sum>tr[lson].sum)\n\t{\n\t\ttr[now].sum=tr[rson].sum;\n\t\ttr[now].val=tr[rson].val;\n\t\ttr[now].ans=tr[rson].ans;\n\t}\n\tif(tr[lson].sum==tr[rson].sum)\n\t{\n\t\ttr[now].sum=tr[lson].sum;\n\t\ttr[now].val=tr[lson].val;\n\t\ttr[now].ans=tr[lson].ans+tr[rson].ans;\n\t}\n}\n\nint update(int &now,int l,int r,int pos,int v)\n{\n\tif(!now) now=++cnt;\n\tif(l==r)\n\t{\n\t\ttr[now].val=l;\n\t\ttr[now].sum+=v;\n\t\ttr[now].ans=l;\n\t\treturn 0;\n\t}\n\tint mid=(l+r)>>1;\n\tif(pos<=mid) update(lson,l,mid,pos,v);\n\telse update(rson,mid+1,r,pos,v);\n\tpush_up(now);\n}\n\nint merge(int a,int b,int l,int r)\n{\n\tif(!a) return b;\n\tif(!b) return a;\n\tif(l==r)\n\t{\n\t\ttr[a].val=l;\n\t\ttr[a].sum+=tr[b].sum;\n\t\ttr[a].ans=l;\n\t\treturn a;\n\t}\n\tint mid=(l+r)>>1;\n\ttr[a].l=merge(tr[a].l,tr[b].l,l,mid);\n\ttr[a].r=merge(tr[a].r,tr[b].r,mid+1,r);\n\tpush_up(a);\n\treturn a;\n}\n\nint dfs(int now,int f)\n{\n\tfor(int i=0;i<g[now].size();i++)\n\t{\n\t\tif(g[now][i]==f) continue;\n\t\tdfs(g[now][i],now);\n\t\tmerge(rt[now],rt[g[now][i]],1,100000);\n\t}\n\tupdate(rt[now],1,100000,cl[now],1);\n\tanss[now]=tr[rt[now]].ans;\n}\n\nint main()\n{\n\tscanf(\"%lld\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&cl[i]);\n\t\trt[i]=i;\n\t\tcnt++;\n\t}\n\tint from,to;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tscanf(\"%lld%lld\",&from,&to);\n\t\tg[from].push_back(to);\n\t\tg[to].push_back(from);\n\t}\n\tdfs(1,0);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tprintf(\"%lld \",anss[i]);\n\t}\n}\n```",
        "postTime": 1537166070,
        "uid": 48740,
        "name": "Styx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "\u8fd9\u9898\u53ef\u4ee5\u8bf4\u662f\u7ebf\u6bb5\u6811\u5408\u5e76\u677f\u5b50\u9898\u4e86......\n\n\u90a3\u6211\u4eec\u73b0\u5728\u5c31\u5148\u6765\u8bf4\u8bf4\u7ebf\u6bb5\u6811\u5408\u5e76\u8be5\u600e\u4e48\u505a.\u95ee\u9898\u662f\u8fd9\u6837\u7684:\u7ed9\u4f60\u4e24\u68f5\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811tree1\u548ctree2,\u8ba9\u4f60\u5408\u5e76\u6210tree3(\u6ce8\u610f\u4e00\u5b9a\u8981\u662f\u52a8\u6001\u5f00\u70b9,\u4e0d\u7136\u65f6\u7a7a\u590d\u6742\u5ea6\u4f1a\u7206\u70b8).\n\n\u6211\u4eec\u8003\u8651\u5f53\u524d\u6b63\u5728\u5408\u5e76tree1\u7684k1\u8282\u70b9\u548ctree2\u7684k2\u8282\u70b9\n\n#### 1.k1\u8282\u70b9\u4e3a\u7a7a,k2\u8282\u70b9\u4e3a\u7a7a\n\n\u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5,\u90a3\u4e48\u5408\u5e76\u540e\u663e\u7136\u8fd8\u662f\u4e3a\u7a7a,\u4e8e\u662f\u6211\u4eec\u5c31\u4e0d\u7528\u7ee7\u7eed\u9012\u5f52\u5904\u7406.\n\n\n#### 2.k1\u8282\u70b9\u4e3a\u7a7a,k2\u8282\u70b9\u4e0d\u4e3a\u7a7a\n\n\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5408\u5e76\u540e\u663e\u7136\u53ea\u6709k2,\u90a3\u4e48\u76f4\u63a5\u628a\u65b0\u6811\u7684tree3\u7684k3\u8282\u70b9\u8d4b\u503c\u6210k2\u8282\u70b9\u5c31\u597d\u4e86.\n\n#### 3.k1\u8282\u70b9\u4e0d\u4e3a\u7a7a,k2\u8282\u70b9\u4e3a\u7a7a.\n\n\u548c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u7c7b\u4f3c,\u8d4b\u503c\u6210k1\u5c31\u884c\u4e86.\n\n\u524d\u4e09\u79cd\u60c5\u51b5\u7528\u4ee3\u7801\u8868\u793a\u4e5f\u5c31\u662f:\n\n```\nif ((k1==0)||(k2==0)) return k1+k2;\n```\n\n#### 4.k1\u8282\u70b9\u4e0d\u4e3a\u7a7a,k2\u8282\u70b9\u4e5f\u4e0d\u4e3a\u7a7a.\n\n\u90a3\u4e48\u5408\u5e76\u8fd9\u9897\u6811\u5c31\u8981\u518d\u9012\u5f52\u5408\u5e76\u4e86.\n\n\u7528\u4ee3\u7801\u8868\u793a\u4e5f\u5c31\u662f:\n\n```\nt[k3].l=merge(t[k1].l,t[k2].l,l,mid);\nt[k3].r=merge(t[k1].r,t[k2].r,mid+1,r);\n```\n\n#### \u6574\u4e2a\u5408\u5e76\u8fc7\u7a0b\u4e5f\u5c31\u662f:\n\n```\n\n\tif ((k1==0)||(k2==0)) return k1+k2;\n\tif (l==r) return k1;\n\tint mid=(l+r)>>1;\n\tt[k1].l=merge(t[k1].l,t[k2].l,l,mid);\n\tt[k1].r=merge(t[k1].r,t[k2].r,mid+1,r);\n\treturn k1;\n```\n\n#### \u90a3\u4e48\u8bb2\u5b8c\u4e86\u7ebf\u6bb5\u6811\u5408\u5e76,\u5c31\u8be5\u8bb2\u8bb2\u8fd9\u9898\u4e86.\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9u,\u6211\u4eec\u628au\u7684\u5b50\u6811\u4fe1\u606f\u585e\u8fdb\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u91cc,\u6211\u4eec\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u51fa\u6240\u6709\u4e2a\u6570\u6700\u5927\u7684\u4e0b\u6807\u4e4b\u548c.\u6211\u4eec\u5b9a\u4e49$t[i].max$\u8868\u793ai\u8fd9\u4e2a\u533a\u95f4\u91cc\u4e2a\u6570\u6700\u5927\u6709\u51e0\u4e2a,$t[i].ans$\u4e3a\u4e2a\u6570\u6700\u5927\u7684\u4e0b\u6807\u4e4b\u548c\u662f\u591a\u5c11,\u90a3\u4e48\u8282\u70b9u\u7684\u7b54\u6848\u4e5f\u5c31\u662ft[root[u]].ans\u4e86.\n\n\u8003\u8651\u66b4\u529b\u60c5\u51b5,\u5982\u679c\u6211\u4eec\u505a\u5230\u6bcf\u4e2a\u70b9\u90fd\u628a\u6240\u6709\u5b50\u6811\u90fd\u52a0\u8fdb\u7ebf\u6bb5\u6811\u91cc\u9762\u4e00\u6b21\u590d\u6742\u5ea6\u662f\u6839\u636e\u6811\u9ad8\u800c\u53d8\u5316\u7684,\u590d\u6742\u5ea6\u4e5f\u5c31\u662f$\u6811\u9ad8*n*logn$,\u5728\u6700\u597d\u7684\u60c5\u51b5\u91cc\u4e5f\u662f$nloglogn$,\u5b9e\u5728\u4e0d\u53ef\u53d6.\n\n\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65b9\u6cd5\u4e86!\n\n\u5047\u8bbe\u6211\u4eec\u5f53\u524d\u9012\u5f52\u5230\u8282\u70b9u,\u5c31\u628a\u6240\u6709u\u7684\u6240\u6709\u513f\u5b50v\u7684\u7ebf\u6bb5\u6811\u7ed9\u5408\u5e76\u8d77\u6765\u7136\u540e\u628a\u8282\u70b9u\u7684\u6743\u503c\u66f4\u65b0\u4e00\u4e0b\u5c31\u884c\u4e86,\u4e0d\u7528\u628a\u6240\u6709\u7684\u70b9\u90fd\u91cd\u65b0\u52a0\u8fdb\u7ebf\u6bb5\u6811\u4e00\u904d.\n\n\u90a3\u4e48\u8fd9\u4e48\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u662f\u591a\u5c11\u5462?\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u590d\u6742\u5ea6\u5176\u5b9e\u662f\u548c\u53f6\u8282\u70b9\u4e2a\u6570\u6709\u5173\u7cfb\u7684.\u5728\u8fd9\u9898\u91cc\u9762\u6211\u4eec\u53ea\u4f1a\u52a0\u8fdb\u53bb$n$\u4e2a\u8282\u70b9,\u6240\u4ee5\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u5c31\u662f$nlogn$,\u4f46\u662f\u9057\u61be\u7684\u662f\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u4f1a\u662f$nlogn$(\u522b\u8ddf\u6211\u8bf4\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u5f00n\u4e2a\u70b9\u4e0d\u662f$nlogn$),\u4f46\u8fd9\u9898\u8fd8\u662f\u80fd\u505a\u7684,\u505a\u5230\u8fd9\u8fb9\u6211\u4eec\u5c31\u53ef\u4ee5\u5b8c\u7f8e\u89e3\u51b3\u4e86\u8fd9\u9898\u4e86.\n\n\u6700\u540e\u9644\u4e0a\u4ee3\u7801,\u6709\u4e9b\u5c0f\u6ce8\u91ca\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node//\u6211\u5b9a\u4e49\u7684t\n{\n\tint l,r,max;\n\tlong long ans;\n}t[10000005];\nint n,u,v,top,nex[200005],head[100005],go[200005],root[100005],color[100005];\nlong long ans[100005];\nvoid add(int u,int v)//\u94fe\u5f0f\u524d\u5411\u661f\n{\n\ttop++;\n\tnex[top]=head[u];\n\thead[u]=top;\n\tgo[top]=v;\n}\nint merge(int k1,int k2,int l,int r)//\u5373\u5f53\u524d\u5408\u5e76k1\u8282\u70b9\u548ck2\u8282\u70b9\n{\n\tif ((k1==0)||(k2==0)) return k1+k2;//\u8003\u8651\u524d\u4e09\u79cd\u60c5\u51b5\n\tif (l==r)//\u8fb9\u754c\u60c5\u51b5\u5c31\u662fmax\u503c\u76f8\u52a0\n\t{\n\t\tt[k1].max=t[k1].max+t[k2].max;\n\t\treturn k1;\n\t}\n\tint mid=(l+r)>>1;//\u7b2c\u56db\u79cd\u60c5\u51b5\u5c31\u662f\u9012\u5f52\u5408\u5e76\n\tt[k1].l=merge(t[k1].l,t[k2].l,l,mid);\n\tt[k1].r=merge(t[k1].r,t[k2].r,mid+1,r);\n    //\u4e0b\u9762\u8fd9\u4e00\u6bb5\u662fpush_up,\u4e5f\u5c31\u662f\u7ebf\u6bb5\u6811\u5e38\u89c4\u7ef4\u62a4\n\tint ls=t[k1].l,rs=t[k1].r;\n\tif (t[ls].max>t[rs].max)\n\t{\n\t\tt[k1].max=t[ls].max;\n\t\tt[k1].ans=t[ls].ans;\n\t}\n\telse\n\tif (t[ls].max<t[rs].max)\n\t{\n\t\tt[k1].max=t[rs].max;\n\t\tt[k1].ans=t[rs].ans;\n\t}\n\telse\n\t{\n\t\tt[k1].max=t[ls].max;\n\t\tt[k1].ans=t[ls].ans+t[rs].ans;\n\t}\n\treturn k1;\n}\nvoid add(int p,int l,int r,int k)//\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e2d\u52a0\u5165p\u8fd9\u4e2a\u70b9\n{\n\tif (l==r)\n\t{\n\t\tt[k].max++;\n\t\tt[k].ans=l;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif (p<=mid) \n\t{\n\t\tif (t[k].l==0)\n\t\t{\n\t\t\ttop++;\n\t\t\tt[k].l=top;\n\t\t}\n\t\tadd(p,l,mid,t[k].l);\n\t}\n\telse\n\t{\n\t\tif (t[k].r==0)\n\t\t{\n\t\t\ttop++;\n\t\t\tt[k].r=top;\n\t\t}\n\t\tadd(p,mid+1,r,t[k].r);\n\t}\n\tint ls=t[k].l,rs=t[k].r;\n\tif (t[ls].max>t[rs].max)\n\t{\n\t\tt[k].max=t[ls].max;\n\t\tt[k].ans=t[ls].ans;\n\t}\n\telse\n\tif (t[ls].max<t[rs].max)\n\t{\n\t\tt[k].max=t[rs].max;\n\t\tt[k].ans=t[rs].ans;\n\t}\n\telse\n\t{\n\t\tt[k].max=t[ls].max;\n\t\tt[k].ans=t[ls].ans+t[rs].ans;\n\t}\n}\nvoid dfs(int u,int fa)\n{\n\tfor (int i=head[u];i!=0;i=nex[i])//\u5148\u9012\u5f52\u513f\u5b50\n\t{\n\t\tint v=go[i];\n\t\tif (v!=fa)\n\t\t{\n\t\t\tdfs(v,u);\n\t\t\troot[u]=merge(root[u],root[v],1,n);//\u628a\u513f\u5b50\u5408\u5e76\n\t\t}\n\t}\n\tif (root[u]==0)\n\t{\n\t\ttop++;\n\t\troot[u]=top;\n\t}\n\tadd(color[u],1,n,root[u]);//\u628a\u8282\u70b9u\u7684\u6743\u503c\u66f4\u65b0\n\tans[u]=t[root[u]].ans;//\u66f4\u65b0\u7b54\u6848\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++)\n\tscanf(\"%d\",&color[i]);\n\tfor (int i=1;i<n;i++)\n\t{\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\tdfs(1,0);\n\tfor (int i=1;i<=n;i++)//\u8f93\u51fa\u7b54\u6848\n\tprintf(\"%lld \",ans[i]);\n}\n```",
        "postTime": 1544101866,
        "uid": 28810,
        "name": "King_of_gamers",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "\u5173\u4e8edsu on tree qwq\n\n\u5728\u67e5\u8be2\u5b50\u6811\u4fe1\u606f\u65f6 \u5982\u679c\u4e0d\u628a\u4fe1\u606f\u6e05\u7a7a \u4f1a\u5bf9\u5176\u4ed6\u5b50\u6811\u4ea7\u751f\u5f71\u54cd\n\n\u7136\u800c \u53ef\u4ee5\u770b\u5230\u7684\u662f \u5f53\u524d\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u5b50\u6811 \u662f\u4e0d\u4f1a\u5bf9\u5176\u4ed6\u5b50\u6811\u4ea7\u751f\u5f71\u54cd\u7684\n\n\u6240\u4ee5 \u6211\u4eec\u9009\u62e9\u4e0d\u6e05\u7a7a\u6700\u540e\u4e00\u4e2a\u5b50\u6811 \u800c\u662f\u4fdd\u7559\u5b83\n\n\u6211\u4eec\u9009\u62e9 \u5927\u5c0f\u6700\u5927\u7684\u90a3\u4e2a\u5b50\u6811 \u4e5f\u5c31\u662f\u4ee5\u5f53\u524d\u8282\u70b9\u7684\u91cd\u513f\u5b50\u4e3a\u6839\u7684\u5b50\u6811\uff01\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u7531\u539f\u6765\u7684n^2 \u53d8\u4e3a\u4e86 nlogn\uff01\n\ndalao\u4eec\u8bc1\u7684\u90fd\u6bd4\u6211\u597d\u6211\u5c31\u4e0d\u8bc1\u4e86qwq(\u61d2 \n\n\u63a8\u5e7f\u5230\u6bcf\u4e2a\u8282\u70b9 \u7528\u8fd9\u4e2a\u65b9\u6cd5\u53bb\u5904\u7406 \u81ea\u7136\u4e5f\u662f\u6210\u7acb\u7684\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define int long long\n#define maxn 100001\nusing namespace std;\nvoid read(int &x)\n{\n\tx = 0;int f = 1;\n\tchar ch = getchar();\n\twhile(!isdigit(ch)){if(ch == '-')f = -1; ch = getchar();}\n\twhile(isdigit(ch)){x = (x<<3) + (x<<1) + ch - '0'; ch = getchar();}\n\tx = x*f;\n} \nint color[maxn],son[maxn],size[maxn],fa[maxn];\nint ans[maxn],cnt[maxn],sum = 0,Max = 0,Son = 0;\nint head[maxn],nxt[maxn<<1],ver[maxn<<1],tot = 0;\nint n,root = 1;\nvoid add(int x,int y)\n{\n\tnxt[++tot] = head[x]; head[x] = tot; ver[tot] = y;\t\n}\nvoid dfs1(int x,int f)\n{\n\tsize[x] = 1; fa[x] = f;\n\tint maxson = 0;\n\tfor(int i = head[x]; i; i = nxt[i])\n\t{\n\t\tint y = ver[i];\n\t\tif(y == f)continue;\n\t\tdfs1(y,x);\n\t\tsize[x] += size[y];\n\t\tif(size[y] > maxson)son[x] = y,maxson = size[y];\n\t}\n}\nvoid change(int x,int val)\n{\n\tcnt[color[x]] += val;\n\tif(cnt[color[x]] > Max)Max = cnt[color[x]],sum = color[x];\n\telse if(cnt[color[x]] == Max)sum += color[x];\n\tfor(int i = head[x]; i; i = nxt[i])\n\t{\n\t\t//\u6ce8\u610f\u6b64\u5904 \n\t\t//\u7531\u4e8e\u91cd\u513f\u5b50\u7684\u4fe1\u606f\u6ca1\u6709\u88ab\u5220\u53bb \u5df2\u7ecf\u7edf\u8ba1\u8fc7\u4e86 \u6240\u4ee5\u4e0d\u80fd\u518d\u8ba1\u7b97\u4e00\u6b21\u3002 \n\t\tint y = ver[i];\n\t\tif(y == fa[x] || y == Son)continue;\n\t\tchange(y,val);\n\t}\n}\nvoid dfs2(int x,int opt)\n{\n\tfor(int i = head[x]; i; i = nxt[i])\n\t{\n\t\tint y = ver[i];\n\t\tif(y == fa[x] || y == son[x])continue;\n\t\tdfs2(y,0);\n\t}\n\tif(son[x])dfs2(son[x],1),Son = son[x];\n\tchange(x,1);ans[x] = sum;Son = 0;\n\tif(!opt)change(x,-1),sum = Max = 0;\n}\nsigned main()\n{ \n\tread(n);\n\tfor(int i = 1; i <= n; i++)read(color[i]);\n\tfor(int i = 1; i <= n-1; i++)\n\t{\n\t\tint x,y; read(x),read(y); add(x,y),add(y,x);\n\t}\n\tdfs1(root,0);\n\tdfs2(root,0);\n\tfor(int i = 1; i <= n; i++)printf(\"%lld \",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1572874658,
        "uid": 122591,
        "name": "abjfj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "## \u9898\u76ee\n\n\u4e00\u68f5\u6811\u6709n\u4e2a\u7ed3\u70b9\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u662f\u4e00\u79cd\u989c\u8272\uff0c\u6bcf\u4e2a\u989c\u8272\u6709\u4e00\u4e2a\u7f16\u53f7\uff0c\u6c42\u6811\u4e2d\u6bcf\u4e2a\u5b50\u6811\u7684\u6700\u591a\u7684\u989c\u8272\u7f16\u53f7\u7684\u548c\u3002\uff08\u6ce8\u610f\u4e0d\u662f\u989c\u8272\u548c\u800c\u662f\u8282\u70b9\u7684\u7f16\u53f7\u548c\uff09\n\n## \u9898\u89e3\n\n-   ~~\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u677f\u5b50\u9898~~\n-   \u8fd9\u9053\u9898\u9996\u5148\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7ef4\u62a4\u5728\u503c\u57df\u8303\u56f4\u5185\u7684\u7ebf\u6bb5\u6811\uff08\u6743\u503c\u7ebf\u6bb5\u6811\uff09\uff0c\u800c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5efa\u9020\u4e00\u68f5\u6811\u590d\u6742\u5ea6\u4f1a\u975e\u5e38\u9ad8\u3002 \u4e3a\u4e86\u964d\u4f4e\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u5efa\u51fa\u6574\u4e2a\u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\uff0c\u5728\u6211\u4eec\u9700\u8981\u65f6\u518d\u5efa\u51fa\u6211\u4eec\u60f3\u8981\u7684\u8282\u70b9\u3002\u8fd9\u79cd\u65b9\u6cd5\u7ef4\u62a4\u7684\u7ebf\u6bb5\u6811\u53eb\u505a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u3002 \n-   \u800c\u7ebf\u6bb5\u6811\u5408\u5e76\u5c31\u662f\u5c06\u4e24\u68f5\u52a8\u6001\u5f00\u70b9\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u5230\u4e00\u8d77\u3002 \u5408\u5e76\u5177\u4f53\u64cd\u4f5c\u89c1\u4ee3\u7801\uff08~~\u5176\u5b9e\u5f88\u597d\u7406\u89e3~~\uff09\n-   \u5bf9\u4e8e\u672c\u9898\u6765\u8bf4$t[i].max$\u8868\u793a\u533a\u95f4$i$\u5185\u989c\u8272\u6700\u591a\u7684\u8282\u70b9\u4e2a\u6570\uff0c$t[i].ans$\u8868\u793a\u533a\u95f4\u7b54\u6848\n-   \u76f4\u63a5$dfs$\u66f4\u65b0\u5373\u53ef\n\n## code\n\n```cpp\n#include <bits/stdc++.h> \nusing namespace std; \nconst int maxn = 1e5 + 100; \ntypedef long long LL; \n\ntemplate <class T> \ninline void read(T &s) {\n\ts = 0; T w = 1, ch = getchar(); \n\twhile (!isdigit(ch)) { if (ch == '-') w = -1; ch = getchar(); }\n\twhile (isdigit(ch)) { s = (s << 1) + (s << 3) + (ch ^ 48); ch = getchar(); }\n\ts *= w; \n}\n\nint n, m, tot, cnt; \nint c[maxn], lin[maxn], rt[maxn]; \nLL ans[maxn]; \nstruct node {\n\tint next, to; \n} e[maxn << 1]; \nstruct tree {\n\tint lc, rc, num; \n\tLL ans; \n} t[maxn * 60]; \n\ninline void add(int from, int to) {\n\te[++tot].to = to; \n\te[tot].next = lin[from]; \n\tlin[from] = tot; \n}\n\nvoid push_up(int p) {\n\tint ls = t[p].lc, rs = t[p].rc; \n\tif (t[ls].num > t[rs].num) {\n\t\tt[p].num = t[ls].num; \n\t\tt[p].ans = t[ls].ans; \n\t}\n\telse if (t[ls].num < t[rs].num) {\n\t\tt[p].num = t[rs].num; \n\t\tt[p].ans = t[rs].ans; \n\t}\n\telse {\n\t\tt[p].num = t[ls].num; \n\t\tt[p].ans = t[ls].ans + t[rs].ans; \n\t}\n\treturn ; \n}\n\nint merge(int p, int q, int l, int r) {\n\tif (!p || !q) return p + q; \n\tif (l == r) {\n\t\tt[p].num += t[q].num; \n\t\tt[p].ans = l; \n\t\treturn p; \n\t}\n\tint mid = (l + r) >> 1; \n\tt[p].lc = merge(t[p].lc, t[q].lc, l, mid); \n\tt[p].rc = merge(t[p].rc, t[q].rc, mid + 1, r); \n\tpush_up(p); \n\treturn p; \n}\n\nvoid update(int &p, int l, int r, int x) {\n\tif (!p) p = ++cnt; \n\tif (l == r) {\n\t\tt[p].num++; \n\t\tt[p].ans = l; \n\t\treturn ; \n\t}\n\tint mid = (l + r) >> 1; \n\tif (x <= mid) update(t[p].lc, l, mid, x); \n\telse update(t[p].rc, mid + 1, r, x); \n\tpush_up(p); \n}\n\nvoid dfs(int u, int fa) {\n\tfor (int i = lin[u]; i; i = e[i].next) {\n\t\tint v = e[i].to; \n\t\tif (v == fa) continue; \n\t\tdfs(v, u); \n\t\trt[u] = merge(rt[u], rt[v], 1, maxn); \n\t}\n\tupdate(rt[u], 1, maxn, c[u]); \n\tans[rt[u]] = t[rt[u]].ans; \n}\n\nint main() {\n\tread(n); cnt = n; \n\tfor (int i = 1; i <= n; ++i) {\n\t\tread(c[i]); \n\t\trt[i] = i; \n\t}\n\tfor (int i = 1; i < n; ++i) {\n\t\tint x, y; read(x), read(y); \n\t\tadd(x, y); add(y, x); \n\t}\n\tdfs(1, 0); \n\tfor (int i = 1; i <= n; ++i) \n\t\tprintf(\"%lld \", ans[i]); \n\treturn 0; \n}\n```\n\n\n\n",
        "postTime": 1569658440,
        "uid": 145352,
        "name": "MILLOPE",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "\u6bd4\u8d5b\u7684\u65f6\u5019\u4e0d\u4f1a\u542f\u53d1\u5f0f\u5408\u5e76\u6240\u4ee5\u6ca1\u5199\u51fa\u6765\n\n\u66b4\u529b\u662f\u4e0d\u96be\u60f3\u7684\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u6c42\u51fa$cnt[u][clr]$\u8868\u793a\u70b9$u$\u7684\u5b50\u6811\uff0c\u989c\u8272$clr$\u7684\u51fa\u73b0\u6b21\u6570\uff1b\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5206\u522b\u6c42\u51fa\u7b54\u6848\n\n\u8fd9\u4e2a\u65b9\u6cd5\u80af\u5b9a\u4f1aTLE+MLE\n\n**\u8fd9\u53ef\u4ee5\u6210\u4e3a\u6bd4\u8d5b\u7684\u4e00\u8d2f\u601d\u8def\uff0c\u5148\u60f3\u66b4\u529b\uff0c\u7136\u540e\u52a0\u4ee5\u4f18\u5316\u6216\u5bfb\u627e\u89c4\u5f8b\uff1b\u505a\u9898\u4e0d\u80fd\u8981\u6c42\u4e00\u6b65\u767b\u5929**\n\n\u6211\u4eec\u53ef\u4ee5\u5206\u90e8\u5206\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\n\n\u5148\u8003\u8651\u5982\u4f55\u6c42$cnt$\n\n\u4e0d\u96be\u60f3\u5230\u7528map\u4fdd\u5b58\uff0c$t[u][clr]$\u8868\u793a\u70b9$u$\u7684\u5b50\u6811\uff0c\u989c\u8272$clr$\u7684\u51fa\u73b0\u6b21\u6570\n\n\u8fd9\u6837\u770b\u8d77\u6765\u4f7f\u7a0b\u5e8f\u66f4\u6162\u4e86\uff0c\u4e8e\u662f\u8003\u8651\u5982\u4f55\u4f18\u5316\n\n**\u8fd9\u91cc\u5c31\u662f\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u6838\u5fc3\u601d\u60f3**\n\n\u601d\u8003\u4e00\u4e0b\uff0c\u5728\u5408\u5e76\u4e24\u68f5\u5b50\u6811\u65f6\uff0c\u662f \u5c06\u5c0f\u7684\u5408\u5e76\u5230\u5927\u7684\u4e0a \u8fd8\u662f \u5c06\u5927\u7684\u5408\u5e76\u5230\u5c0f\u7684\u4e0a\uff1f\n\n\u5f53\u7136\u662f\u524d\u8005\uff0c\u5c06\u5c0f\u7684\u5408\u5e76\u5230\u5927\u7684\u4e0a\n\n\u770b\u8d77\u6765\u6ca1\u4f18\u5316\u591a\u5c11\uff0c\u4f46\u662f\u73b0\u5728\u7b97\u4e00\u4e0b\u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u6bcf\u4e2amap\u5728\u88ab\u5408\u5e76\u7ed9\u5176\u4ed6map\u65f6\uff0c\u957f\u5ea6\u6700\u5c11\u53d8\u4e3a\u539f\u6765\u7684\u4e24\u500d\uff0c\u90a3\u4e48\u4e00\u4e2amap\u6700\u591a\u88ab\u5408\u5e76\u591a\u5c11\u6b21\uff1f\n\n\u663e\u7136\u662f$O(\\log n)$\u7ea7\u7684\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u6bcf\u4e2a\u70b9\u6700\u591a\u88ab\u79fb\u52a8\u7684\u6b21\u6570\u662f$O(\\log n)$\u7ea7\u7684\uff0c\u90a3\u4e48\u603b\u5171\u5c31\u662f$O(n\\log n)$\u7ea7\u7684\uff0c\u7b97\u4e0amap\u7684\u65f6\u95f4\uff0c\u603b\u65f6\u95f4\u662f$O(n\\log^2 n)$\n\n\u7136\u540e\u7b2c\u4e8c\u90e8\u5206\uff0c\u8ba1\u7b97\u7b54\u6848\uff0c\u53ea\u8981\u5bf9\u6bcf\u4e2a\u70b9\u8bb0\u5f55$mx[u]$\uff08\u6700\u5927\u51fa\u73b0\u6b21\u6570\uff09\u548c$ans[u]$\uff08\u6b64\u6b21\u6570\u5bf9\u5e94\u7684\u7b54\u6848\uff09\uff0c\u7136\u540e\u5728\u5408\u5e76\u65f6\u7ef4\u62a4\u5c31\u884c\u4e86\n\n\u4ee3\u7801\u5b9e\u73b0\u4e0d\u591a\u8bf4\uff0c\u8fd9\u79cd\u9898\u662f\u7ec3\u4e60stl\u7684\u597d\u9898\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<map>\n#include<set>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,ll> pil;\n#define fir first\n#define sec second\n#define mp make_pair\nconst int MAXN = 1e5 + 5;\n\nstruct Edge\n{\n\tint next,to;\n}e[MAXN*2];\nint head[MAXN],etot=0;\ninline void add(int u,int v)\n{\n\te[++etot] = (Edge){ head[u],v};\n\thead[u]=etot;\n}\n\nint c[MAXN];\n\nmap<int,int> t[MAXN];\nint mx[MAXN];\nll ans[MAXN];\nint p[MAXN];\n\nvoid dfs(int u,int fa)\n{\n\tp[u]=u;\n\tt[u][c[u]]=1;\n\tmx[u]=1;\n\tans[u]=c[u];\n\t\t\n\tfor(int i=head[u]; i; i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa) continue;\n\t\tdfs(v,u);\n\t\tif(t[p[u]].size() < t[p[v]].size())\n\t\t{\n\t\t\tswap(p[u],p[v]);\n\t\t\tmx[u]=mx[v];\n\t\t\tans[u]=ans[v];\n\t\t}\n\t\t\n\t\tmap<int,int> &mpu=t[p[u]], &mpv=t[p[v]];\n\t\tfor(map<int,int>::iterator it=mpv.begin(); it!=mpv.end(); ++it)\n\t\t{\n\t\t\tint clr=it->fir, tot=it->sec;\n\t\t\tmpu[clr] += tot;\n\t\t\t\n\t\t\tif(mpu[clr]>mx[u])\n\t\t\t\tmx[u]=mpu[clr], ans[u]=0;\n\t\t\tif(mpu[clr]==mx[u])\n\t\t\t\tans[u]+=clr;\n\t\t}\n\t}\n}\n\nint main(void)\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=1; i<=n; ++i) scanf(\"%d\",&c[i]);\n\tfor(int i=1; i<n; ++i)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v); add(v,u);\n\t}\n\t\n\tdfs(1,0);\n\tfor(int i=1; i<=n; ++i) cout<<ans[i]<<' ';\n\treturn 0;\n}\n```\n",
        "postTime": 1570411781,
        "uid": 73687,
        "name": "He_Ren",
        "ccfLevel": 10,
        "title": "\u89e3\u9898\u62a5\u544a CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "\u6ca1\u6709\u591a\u5c11\u4eba\u7528\u83ab\u961f\u505a\u5417\uff1f\n\n~~\u849f\u84bb\u6c34\u4e00\u6ce2\u83ab\u961f~~\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff08$n\\sqrt{n}logn$)\n\n~~\u849f\u84bb\u8fc7\u83dc\uff0c\u4e0d\u4f1a\u53bb\u6389logn\u7684\u505a\u6cd5qaq~~\n\n\u601d\u8def\u5f88\u7b80\u5355\uff1a\n\n1.dfs\u8dd1\u4e00\u4e0b\u6811\u4e0a\u70b9\u7684dfs\u5e8f\u3002\n\n2.\u5c06\u6811\u4e0a\u70b9\u6309dfs\u5e8f\u8fdb\u884c$\\sqrt{n}$ \u5206\u5757\u3002\n\n3.\u5bf9\u6bcf\u4e2a\u70b9\u6309\u5de6\u7aef\u70b9\u7684\u5757\u5e8f\u53f7\u548c\u53f3\u7aef\u70b9\u7684\u5927\u5c0f\u6392\u5e8f\u3002\n\n```cpp\ninline int cmp(Node aa,Node bb)\n{\n\treturn aa.ls==bb.ls?aa.r<bb.r:aa.ls<bb.ls;\n}\n```\n\n4.\u5f00\u59cb\u83ab\u961f\uff0c\u7528num[x]\u6570\u7ec4\u7edf\u8ba1\u51fa\u73b0x\u6b21\u7684\u989c\u8272\u7684\u5e8f\u53f7\u548c\u3002\u8f6c\u79fb\u65f6\u5c06\u539f\u5148\u7684\u51cf\u53bb\uff0c\u518d\u52a0\u4e0a\u73b0\u5728\u7684\u3002\n\n```cpp\ninline void add(int x)\n{\n\tint xx=coll[x];\n\tif(num[xx])\n\tadd(num[xx],-xx,1);\n\tnum[xx]++;\n\tadd(num[xx],xx,1);\n}\ninline void del(int x)\n{\n\tint xx=coll[x];\n\tadd(num[xx],-xx,1);\n\tnum[xx]--;\n\tif(num[xx])\n\tadd(num[xx],xx,1);\n}\n```\n5.\u5c06num\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5927\u503c\u3002\n\n6.\u67e5\u627enum[x]\u4e2d\u4f7fnum[x]\uff01=0\u7684x\u6700\u5927\u503c\uff0c\u5e76num[x]\u4e3a\u7b54\u6848\u3002\uff08\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff09\n\np.s.\u7a0b\u5e8f\u7406\u8bba\u4e0a\u65f6\u95f4\u590d\u6742\u5ea6\u7206\u4e86\uff0c\u4f46\u662f\u7ecf\u8fc7\u6211\u5728\u8003\u573a\u4e0a\u62cd\u7684\u65f6\u5019\u6ca1\u6709\u591a\u5c11\u6570\u636e\u53ef\u4ee5\u5361\u6389\uff0c\u5e76\u4e14\u53ef\u4ee5\u5361\u6389\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u6570\u636e\u7b2c\u4e8c\u6b21\u8bd5\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a\u7206\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7a0b\u5e8f\u53ea\u8981\u8bc4\u6d4b\u673a\u9ad8\u5174\uff0c\u5c31\u4e0d\u4f1a\u6302\u3002\n\n\u4e0a\u4ee3\u7801\uff08\u9884\u8b66\uff0c\u4ee3\u7801\u4e2d\u542b\u6709\u5927\u91cf\u65e0\u7528\u6570\u7ec4\uff09\n\n\u7801\u957f\uff1a3000B\n\n~~\u5f53\u5f53\u5f53\u5f53~~\n\n```cpp\n#pragma GCC optimize(2)\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#define ll long long\nusing namespace std;\ninline ll read()\n{\n\tll f=0,x=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9')\n\t{\n\t\tif(ch=='-')x=-1;ch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')f=(f<<1)+(f<<3)+ch-'0',ch=getchar();\n\treturn f*x;\n}\nll n,col[100009],siz,cnt=0,head[100009],dfn[100009],\n\tl[100009],r[100009],num[100009],ans=0,maxx=0,anss[100009],\n\tcoll[100009];\nstruct edge\n{\n\tll to,nxt;\n}e[200009];\nstruct Node\n{\n\tll l,r,id,bh,col,ls,rs;\n}a[100009];\nstruct segtree\n{\n\tll l,r,w;\n}tree[400009];\ninline void adde(int a,int b)\n{\n\tcnt++;\n\te[cnt].nxt=head[a];\n\te[cnt].to=b;\n\thead[a]=cnt;\n}\ninline void dfs(int x,int fa)\n{\n\tdfn[x]=++cnt;\n\tl[cnt]=x;coll[cnt]=col[x];\n\ta[cnt].id=x;a[cnt].l=cnt;a[cnt].col=col[x];\n\tfor(int i=head[x];~i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v==fa)continue;\n\t\tdfs(v,x);\n\t}\n\tr[x]=cnt;\n\ta[dfn[x]].r=cnt;\n}\ninline int cmp(Node aa,Node bb)\n{\n\treturn aa.ls==bb.ls?aa.r<bb.r:aa.ls<bb.ls;\n}\ninline void build(int l,int r,int p)\n{\n\ttree[p].l=l;tree[p].r=r;\n\tif(l==r)\n\treturn ;\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,p*2);build(mid+1,r,p*2+1);\n}\ninline void add(int x,int xx,int p)\n{\n\tif(tree[p].l==tree[p].r)\n\t{\n\t\ttree[p].w+=xx;\n\t\t//printf(\"%d %d %d\\n\",tree[p].l,tree[p].r,tree[p].w);\n\t\treturn ;\n\t}\n\tint mid=(tree[p].l+tree[p].r)>>1;\n\tif(x<=mid)add(x,xx,p*2);\n\telse add(x,xx,p*2+1);\n\ttree[p].w=tree[p*2].w+tree[p*2+1].w;\n\t//printf(\"%d %d %d %d\\n\",tree[p].l,tree[p].r,tree[p].w,xx);\n}\ninline void add(int x)\n{\n\tint xx=coll[x];\n\t//ans[num[xx]]-=x;\n\tif(num[xx])\n\tadd(num[xx],-xx,1);\n\tnum[xx]++;\n\tadd(num[xx],xx,1);\n\t//printf(\"!!!%d %d %d\\n\",x,xx,a[x].id);\n\t//ans[num[xx]]+=x\n\t//if(num[x]==maxx)ans+=x;\n}\ninline void del(int x)\n{\n\tint xx=coll[x];\n\tadd(num[xx],-xx,1);\n\tnum[xx]--;\n\t//printf(\"!!!%d %d %d\\n\",x,xx,a[x].id);\n\tif(num[xx])\n\tadd(num[xx],xx,1);\n}\ninline void find(int l,int r,int p)\n{\n\tif(ans)return ;\n\tif(l<=tree[p].l&&r>=tree[p].r){\n\t\tint mid=(tree[p].l+tree[p].r)>>1;\n\t\tif(tree[p].l==tree[p].r){\n\t\t\tans=max(ans,tree[p].w);return ;\n\t\t}\n\t\tif(tree[p*2+1].w)find(l,r,p*2+1);\n\t\telse if(tree[p*2].w)find(l,r,p*2);\n\t\treturn ;\n\t}\n\tint mid=(tree[p].l+tree[p].r)>>1;\n\tif(r>mid)find(l,r,p*2+1);\n\tif(l<=mid)find(l,r,p*2);\n}\nint main()\n{\n\tn=read();siz=sqrt(n);\n\tbuild(1,n,1);\n\tmemset(head,-1,sizeof(head));\n\t//printf(\"%d\\n\",n);\n\tfor(int i=1;i<=n;i++){\n\t\tcol[i]=read(); \n\t}\n\tfor(int i=1;i<=n-1;i++){\n\t\tint a=read(),b=read();\n\t\tadde(a,b);adde(b,a);\n\t}\n\tcnt=0;\n\tdfs(1,1);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\ta[i].ls=(a[i].l+siz-1)/siz;\n\t}\n\tsort(a+1,a+n+1,cmp);\n\tint l=1,r=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tans=0;\n\t\twhile(r<a[i].r)add(++r);\n\t\twhile(r>a[i].r)del(r--);\n\t\twhile(l<a[i].l)del(l++);\n\t\twhile(l>a[i].l)add(--l);\n\t\tfind(1,n,1);\n\t\tanss[a[i].id]=ans;\n\t\t//printf(\"ans %d %d %d %d\\n\",a[i].l,a[i].r,a[i].id,ans);\n\t}\n\tfor(int i=1;i<=n;i++)printf(\"%lld \",anss[i]);\n\treturn 0;\n}\n```",
        "postTime": 1572188564,
        "uid": 80908,
        "name": "\u7ebf\u6bb5\u6811\u58f9\u96f6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "\u4e00\u5f00\u59cb\u60f3\u62ff\u8fd9\u9053\u9898\u505a\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u7ec3\u4e60\u9898\u7684\u2026\u2026\u540e\u6765\u53d1\u73b0\uff0c\u8c8c\u4f3c\u83ab\u961f\u66f4\u597d\u60f3\u4e00\u70b9\u3002\n\n\u8fd9\u79cd\u5904\u7406\u5b50\u6811\u4fe1\u606f\u7684\u95ee\u9898\uff0c\u4e00\u822c\u6709\u4e24\u79cd\u9009\u62e9\uff0c\u4e00\u79cd\u662f\u6811\u4e0a\u5408\u5e76\uff08\u542f\u53d1\u5f0f\u5408\u5e76\u3001\u7ebf\u6bb5\u6811\u5408\u5e76\u7b49\uff09\uff0c\u4e00\u79cd\u662f$dfs$\u5e8f\u3002$dfs$\u5e8f\u53ef\u4ee5\u5c06\u5b50\u6811\u95ee\u9898\u8f6c\u5316\u4e3a\u533a\u95f4\u95ee\u9898\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u83ab\u961f\u5566\uff01\n\n\u6211\u4eec\u8bb0$dfn[x],size[x]$\u4e3a$x$\u7684$dfs$\u5e8f\u548c\u5b50\u6811\u5927\u5c0f\uff0c\u90a3\u4e48$x$\u7684\u5b50\u6811\u5c31\u53ef\u4ee5\u6620\u5c04\u5230$dfs$\u5e8f\u4e2d$[dfn[x],dfn[x]+size[x]-1]$\u8fd9\u4e00\u6bb5\u3002\u6211\u4eec\u7528\u83ab\u961f\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u5c31\u5f88\u65b9\u4fbf\u4e86\uff0c\u6bcf\u6b21\u79fb\u52a8\u7ef4\u62a4\u6700\u5927\u503c\u53ca\u6700\u5927\u503c\u7684\u7f16\u53f7\u548c\u5373\u53ef\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u7ef4\u62a4\u6700\u5927\u503c\u662f\u5f88\u96be\u5b9e\u73b0\u7684\uff0c\u56e0\u4e3a\u6700\u5927\u503c\u4e0d\u5177\u6709\u53ef\u51cf\u6027\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u4f1a\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u6216\u8005$set$\u5e2e\u5fd9\u7ef4\u62a4\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u505a\u5230$O(n\\sqrt nlogn)$\u7684\u590d\u6742\u5ea6\uff0c\u5e76\u4e0d\u662f\u5f88\u4f18\u79c0\u3002\n\n\u5982\u4f55\u628a$logn$\u7ed9\u53bb\u6389\u5462\uff1f\u6211\u4eec\u4f7f\u7528\u5206\u5757\u3002\u4f17\u6240\u5468\u77e5\uff0c\u6839\u53f7\u7b97\u6cd5\u548c\u6839\u53f7\u7b97\u6cd5\u653e\u5728\u4e00\u8d77\u6bd4\u8f83\u642d\uff0c\u56e0\u4e3a\u5982\u679c\u4f7f\u7528$log$\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u79fb\u52a8\u4e00\u6b21\u6307\u9488\u90fd\u9700\u8981$log$\u7684\u65f6\u95f4\u3002\u800c\u5982\u679c\u4f7f\u7528\u5206\u5757\uff0c\u5219\u53ef\u4ee5\u53d8\u4e3a\u7528$O(1)$\u65f6\u95f4\u79fb\u52a8\u6307\u9488\uff0c\u5728\u6bcf\u6b21\u6307\u9488\u79fb\u5b8c\u540e\u7528$\\sqrt n$\u7684\u65f6\u95f4\u5904\u7406\u7b54\u6848\u3002\n\n\u6211\u4eec\u8bb0\u5f55$f[x],Count[x],tag[x]$\u4e09\u4e2a\u53d8\u91cf\u3002\u5176\u4e2d$f[x]$\u8868\u793a\u989c\u8272\u4e3a$x$\u7684\u70b9\u51fa\u73b0\u7684\u6b21\u6570\uff0c$Count[x]$\u8868\u793a\u51fa\u73b0\u6b21\u6570\u4e3a$x$\u7684\u70b9\u7684\u7f16\u53f7\u548c\uff0c$tag$\u662f\u5206\u5757\u6570\u7ec4\uff0c$tag[x]$\u8868\u793a\u4f4d\u4e8e\u7b2c$x$\u5757\u7684\u6240\u6709$Count$\u7684\u548c\uff0c\u8fd9\u6837\u6307\u9488\u79fb\u52a8\u4e00\u6b21\u5c31\u53ea\u9700\u8981$O(1)$\u65f6\u95f4\u4e86\u3002\n\n\u81f3\u4e8e\u6307\u9488\u79fb\u5b8c\u4e4b\u540e\u5982\u4f55\u5904\u7406\uff0c\u5c31\u5f88\u7b80\u5355\u4e86\u3002\u5148\u7528$\\sqrt n$\u7684\u65f6\u95f4\u904d\u5386\u4e00\u904d$tag$\u6570\u7ec4\uff0c\u627e\u5230\u6700\u5927\u7684\u6709\u503c\u7684\u5757\uff0c\u7136\u540e\u518d\u5728\u8fd9\u4e2a\u5757\u5185\u627e\u6700\u5927\u7684$Coung[i]$\u5373\u53ef\u3002\u6574\u4f53\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\sqrt n)$\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cmath>\n#include<algorithm>\n#define int long long\nusing namespace std;\nconst int N=200000;\nint n,blk[N],fst[N],lst[N],dfn[N],cnt;\nint ans[N],c[N],C[N],size[N],S,f[N],Count[N],tag[N];\nvector<int>V[N];\n\nstruct Que\n{\n\tint L,R,id;\n\tbool operator <(const Que &x) const {return blk[L]<blk[x.L]||blk[L]==blk[x.L]&&R<x.R;}\n} Q[N];\n\nvoid dfs(int x,int fat)\n{\n\tdfn[x]=++cnt;size[x]=1;c[cnt]=C[x];\n\tfor (int i=0,s=V[x].size();i<s;i++)\n\t{\n\t\tint v=V[x][i];if (v==fat) continue;\n\t\tdfs(v,x);size[x]+=size[v];\n\t}\n\tQ[x].L=dfn[x];Q[x].R=dfn[x]+size[x]-1;Q[x].id=x;\n}\n\nsigned main()\n{\n\tscanf(\"%lld\",&n);\n\tfor (int i=1;i<=n;i++) scanf(\"%lld\",&C[i]);\n\tfor (int i=1;i<n;i++)\n\t{\n\t\tint x,y;scanf(\"%lld%lld\",&x,&y);\n\t\tV[x].push_back(y);V[y].push_back(x);\n\t}\n\tdfs(1,0);S=(int)sqrt(n);\n\tfor (int i=1;i<=n;i++) \n\t{\n\t\tblk[i]=(i-1)/S+1;\n\t\tif (blk[i]!=blk[i-1]) fst[blk[i]]=i,lst[blk[i-1]]=i-1;\n\t}\n\tlst[blk[n]]=n;\n\tsort(Q+1,Q+n+1);\n\tint l=1,r=0;\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\twhile (r<Q[i].R) {++r;int x=c[r];Count[f[x]]-=x;tag[blk[f[x]]]-=x;++f[x];Count[f[x]]+=x;tag[blk[f[x]]]+=x;}\n\t\twhile (l>Q[i].L) {--l;int x=c[l];Count[f[x]]-=x;tag[blk[f[x]]]-=x;++f[x];Count[f[x]]+=x;tag[blk[f[x]]]+=x;}\n\t\twhile (r>Q[i].R) {int x=c[r];Count[f[x]]-=x;tag[blk[f[x]]]-=x;--f[x];Count[f[x]]+=x;tag[blk[f[x]]]+=x;--r;}\n\t\twhile (l<Q[i].L) {int x=c[l];Count[f[x]]-=x;tag[blk[f[x]]]-=x;--f[x];Count[f[x]]+=x;tag[blk[f[x]]]+=x;++l;}\n\t\tint pos=0;\n\t\tfor (int j=1;j<=blk[n];j++) if (tag[j]>0) pos=j;\n\t\tif (!pos) {ans[Q[i].id]=0;continue;}\n\t\tfor (int j=fst[pos];j<=lst[pos];j++) if (Count[j]>0) ans[Q[i].id]=Count[j];\n\t}\n\tfor (int i=1;i<=n;i++) printf(\"%lld \",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1573646992,
        "uid": 29575,
        "name": "Holy_Push",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "Dsu on Tree \u677f\u5b50\u9898\n\u5177\u4f53\u601d\u60f3\u5eb7\u4ee3\u7801\n```cpp\n//#pragma GCC optimize(2)\n//#pragma GCC optimize(3)\n#include <bits/stdc++.h>\n#define int long long\n#define N 100005\n//#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<22,stdin),p1 == p2)?EOF:*p1++)\nusing namespace std ;\n//char buf[(1 << 22)] , *p1 = buf , *p2 = buf ;\ninline int read ()\n{\n    char c = getchar () ; int x = 0 , f = 1 ;\n    while (c < '0' || c > '9') { if (c == '-') f = -1 ; c = getchar () ; }\n    while (c >= '0' && c <= '9'){ x = x * 10 + c - '0' ; c = getchar () ; }\n    return x * f ;\n}\nint n , sz[N] , ver[N << 1] , nxt[N << 1] , hed[N << 1] , col[N] , sum , cnt[N] , ans[N] , son[N] , mx , tot ;\nvoid add (int x , int y) { ver[++ tot] = y ; nxt[tot] = hed[x] ; hed[x] = tot ; }\nvoid dfs (int x , int fa) //\u627e\u6bcf\u4e2a\u8282\u70b9\u7684\u91cd\u513f\u5b50\uff0c\u4e0d\u7528\u8bb2\u4e86\u5427\n{\n\tint mx = -1e9 ;\n\tsz[x] = 1 ;\n\tfor (int i = hed[x] ; i ; i = nxt[i])\n\t{\n\t\tint y = ver[i] ;\n\t\tif (y == fa) continue ;\n\t\tdfs (y , x) ;\n\t\tsz[x] += sz[y] ;\n\t\tif (sz[y] > mx)\n\t\t{\n\t\t\tmx = sz[y] ;\n\t\t\tson[x] = y ;\n\t\t}\n\t}\n}\nvoid change (int x , int fa , int val , int p) //p\u662f\u4e0d\u80fd\u8bbf\u95ee\u7684\u70b9 \n{\n\tcnt[col[x]] += val ;//\u7edf\u8ba1\u5f53\u524d\u8fd9\u4e2a\u989c\u8272\u51fa\u73b0\u7684\u6b21\u6570\n\tif (cnt[col[x]] > mx) mx = cnt[col[x]] , sum = col[x] ;//\u66f4\u65b0\u7b54\u6848\n\telse if (cnt[col[x]] == mx) sum += col[x] ;//\u5982\u679c\u6ca1\u6709\u66f4\u5927\u503c\uff0c\u5c31\u52a0\u4e0a\u7b54\u6848\n\tfor (int i = hed[x] ; i ; i = nxt[i])\n\t{\n\t\tint y = ver[i] ;\n\t\tif (y == fa || y == p) continue ;//\u5982\u679c\u662f\u5f53\u524d\u8fd9\u4e2a\u70b9\u7684\u7236\u4eb2\u6216\u662f\u4e0d\u80fd\u8bbf\u95ee\u7684\u70b9\u5c31\u4e0d\u8981\u8ba1\u7b97\n\t\tchange (y , x , val , p) ;\n\t} \n}\nvoid dsu (int x , int fa , int op)//op [0/1]\u8868\u793a\u662f\u8f7b\u513f\u5b50\u6216\u91cd\u513f\u5b50\n{\n\tfor (int i = hed[x] ; i ; i = nxt[i])\n\t{\n\t\tint y = ver[i] ;\n\t\tif (y == fa || y == son[x]) continue ;// \u5982\u679c\u662f\u5f53\u524d\u8fd9\u4e2a\u70b9\u7684\u7236\u4eb2\u6216\u662f\u91cd\u513f\u5b50\u5c31\u4e0d\u8981\u8ba1\u7b97\n\t\tdsu (y , x , 0) ;//\u8ba1\u7b97\u8f7b\u513f\u5b50\n\t}\n\tif (son[x]) dsu (son[x] , x , 1) ;//\u5982\u679cx\u7684\u91cd\u513f\u5b50\u662fy\uff0c\u5c31\u9012\u5f52\u91cd\u513f\u5b50\uff0c\u4e0d\u6d88\u9664\u5f71\u54cd\n\tchange (x , fa , 1 , son[x]) ;//\u66b4\u529b\u7edf\u8ba1\u8f7b\u513f\u5b50\u7684\u7b54\u6848\n\tans[x] = sum ;//\u8bb0\u5f55\u7b54\u6848\n\tif (op == 0) change (x , fa , -1 , 0) , sum = mx = 0 ;//\u5982\u679c\u8981\u5220\u9664\u8d21\u732e\u7684\u8bdd\u5c31\u5220\u9664\n}\nsigned main ()\n{\n//\tfreopen (\"dsutree.in\" , \"r\" , stdin) ; freopen (\"dsutree.out\" , \"w\" , stdout) ;\n\tn = read () ;\n\tfor (int i = 1 ; i <= n ; i ++) col[i] = read () ;\n\tfor (int i = 1 , x , y ; i < n ; x = read () , y = read () , add (x , y) , add (y , x) , i ++) ;\n\tdfs (1 , 0) ;\n\tdsu (1 , 0 , 0) ;\n\tfor (int i = 1 ; i <= n ; i ++) printf (\"%lld \" , ans[i]) ;\n}\n```",
        "postTime": 1572518211,
        "uid": 37014,
        "name": "\u66fe\u7237\u7237",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "$$\\color{cornflowerblue}{\\mathcal{Treaker}}$$\n# \u7ebf\u6bb5\u6811\u5408\u5e76\n\u88f8\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\u4e00\u822c\u770b\u5230\u8fd9\u79cd\u7ef4\u62a4\u989c\u8272\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u5e94\u8be5\u5f80\u7ebf\u6bb5\u6811\u5408\u5e76\u8fd9\u65b9\u9762\u60f3\u4e00\u60f3\u3002\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u6211\u4eec\u7ef4\u62a4\u4ec0\u4e48\u5462\u3002\n\n\u901a\u8fc7\u89c2\u5bdf\u9898\u9762\uff0c\u5bb9\u6613\u53d1\u73b0\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u989c\u8272\u7684\u6700\u591a\u7684\u662f\u4ec0\u4e48\uff0c\u6240\u6709\u6700\u591a\u7684\u989c\u8272\u7684\u7f16\u53f7\u548c\u662f\u4ec0\u4e48\u3002\u5177\u4f53\u5982\u4f55\u7ef4\u62a4\u53ef\u4ee5\u53bb\u770b\u770b\u4ee3\u7801\uff08\u5e94\u8be5\u4e0d\u96be\u5427\u3002\uff09\n\n\u7136\u540e\u5408\u5e76\u5c31\u884c\u4e86\u3002\n\n\u8fd9\u91cc\u6765\u4e00\u7bc7\u6307\u9488\u9898\u89e3~~\u6307\u9488\u5927\u6cd5\u543c\u554a\uff0c\u6e05\u65b0\u9753\u4e3d~~\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#define ll long long\nusing namespace std;\nconst int N = 1e5+5;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nint n;\nint fa[N] , dep[N];\nll ans[N];\nstruct Segment_Tree\n{\n\tstruct node\n\t{\n\t\tnode *ls , *rs;\n\t\tint maxn;\n\t\tll sum;\n\t\tnode() {ls = rs = NULL; maxn = 0; sum = 0;}\n\t\tinline void up()\n\t\t{\n\t\t\tif(!ls) return (void)(maxn = rs -> maxn , sum = rs -> sum);\n\t\t\tif(!rs) return (void)(maxn = ls -> maxn , sum = ls -> sum);\n\t\t\tif(ls -> maxn > rs -> maxn) return (void)(maxn = ls -> maxn , sum = ls -> sum);\n\t\t\tif(rs -> maxn > ls -> maxn) return (void)(maxn = rs -> maxn , sum = rs -> sum);\n\t\t\tif(ls -> maxn == rs -> maxn) return (void)(maxn = ls -> maxn , sum = ls -> sum + rs -> sum);\n\t\t}\n\t}*root[N];\n\t#define mid ((l + r) >> 1)\n\tvoid chenge(node *&p,int x,int l,int r)\n\t{\n\t\tif(!p) p = new node();\n\t\tif(l == r) return (void)(p -> maxn = 1 , p -> sum = x);\n\t\tif(x <= mid) chenge(p -> ls,x,l,mid);\n\t\telse chenge(p -> rs,x,mid+1,r);\n\t\tp -> up();\n\t}\n\tstruct Edge\n\t{\n\t\tint to; Edge *nxt;\n\t\tEdge(int to,Edge *nxt) : to(to) , nxt(nxt) {}\n\t}*head[N];\n\tinline void add(int u,int v) {head[u] = new Edge(v,head[u]);}\n\t#define to (i -> to)\n\tnode *merge(node *p,node *o,int l,int r)\n\t{\n\t\tif(!p || !o) return p ? p : o;\n\t\tif(l == r) \n\t\t{\n\t\t\tp -> maxn = p -> maxn + o -> maxn;\n\t\t\treturn p;\n\t\t}\n\t\tp -> ls = merge(p -> ls,o -> ls,l,mid);\n\t\tp -> rs = merge(p -> rs,o -> rs,mid+1,r);\n\t\treturn p -> up() , p;\n\t}\n\tvoid dfs(int x)\n\t{\n\t\tfor(Edge *i = head[x];i;i = i -> nxt)\n\t\t{\n\t\t\tif(dep[to]) continue;\n\t\t\tdep[to] = dep[x] + 1;\n\t\t\tdfs(to);\n\t\t\troot[x] = merge(root[x],root[to],1,n);\n\t\t}\n\t\tans[x] = root[x] ? root[x] -> sum : 0;\n\t}\n\tinline void LOL()\n\t{\n\t\tn = read();\n\t\tfor(int i = 1;i <= n;i ++) chenge(root[i],read(),1,n);\n\t\tfor(int i = 1 , u , v;i < n;i ++)\n\t\t{\n\t\t\tu = read(); v = read();\n\t\t\tadd(u,v); add(v,u);\n\t\t} dep[1] = 1;\n\t\tdfs(1);\n\t\tfor(int i = 1;i <= n;i ++) printf(\"%lld \",ans[i]);\n\t}\n}DNF;\nint main()\n{\n\tDNF.LOL();\n\treturn 0;\n}\n```",
        "postTime": 1571493155,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "\u503c\u57df\u7ebf\u6bb5\u6811 + \u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6811\u4e0a\u7684\u7ed3\u70b9\uff0c\u5f00\u4e00\u4e2a\u4ee5\u989c\u8272\u4e3a\u7f16\u53f7\u7684\u503c\u57df\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u4e0a\u7684\u6bcf\u4e2a\u7ed3\u70b9\u8981\u7ef4\u62a4\u8fd9\u4e24\u4e2a\u4e1c\u897f\uff1a\u51fa\u73b0\u6700\u591a\u6b21\u989c\u8272\u7684\u4e2a\u6570\uff0c\u6700\u591a\u6b21\u989c\u8272\u7684\u548c\u3002\n\n\u7136\u540e\u6bcf\u6b21\u7236\u7ed3\u70b9\u628a\u6240\u6709\u5b50\u7ed3\u70b9\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u8d77\u6765\u5c31\u884c\u4e86\u3002\n\n\u6ce8\u610f\u8981\u5f00 `long long`\u3002\n\n\u8fd9\u91cc\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u5bf9\u6307\u9488\u515a\u6709\u5e2e\u52a9qwq\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n\ntypedef long long LL;\n#define int LL\n\nconst int MAXN = 1e5;\n\nint n;\nint c[MAXN | 1], ans[MAXN | 1];\nstd::vector < int > e[MAXN | 1];\n\nstruct Segtree {\n\tint maxv, sumv;\n\tSegtree *ch[2];\n\tSegtree() : maxv(0), sumv(0) {\n\t\tch[0] = ch[1] = NULL;\n\t}\n} *root[MAXN | 1];\n\ninline int read() {\n\tregister int x = 0;\n\tregister char ch = getchar();\n\twhile(!isdigit(ch)) ch = getchar();\n\twhile(isdigit(ch)) {\n\t\tx = x * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn x;\n}\n\ninline void pushup(Segtree *o) {\n\tif(o -> ch[0] == NULL) {\n\t\tif(o -> ch[1] == NULL) return;\n\t\telse {\n\t\t\to -> maxv = o -> ch[1] -> maxv;\n\t\t\to -> sumv = o -> ch[1] -> sumv;\n\t\t}\n\t\treturn;\n\t} else {\n\t\tif(o -> ch[1] == NULL) {\n\t\t\to -> maxv = o -> ch[0] -> maxv;\n\t\t\to -> sumv = o -> ch[0] -> sumv;\n\t\t\treturn;\n\t\t}\n\t}\n\tif(o -> ch[0] -> maxv > o -> ch[1] -> maxv) {\n\t\to -> maxv = o -> ch[0] -> maxv;\n\t\to -> sumv = o -> ch[0] -> sumv;\n\t} else if(o -> ch[0] -> maxv < o -> ch[1] -> maxv) {\n\t\to -> maxv = o -> ch[1] -> maxv;\n\t\to -> sumv = o -> ch[1] -> sumv;\n\t} else {\n\t\to -> maxv = o -> ch[0] -> maxv;\n\t\to -> sumv = o -> ch[0] -> sumv + o -> ch[1] -> sumv;\n\t}\n}\n\nvoid insert(Segtree *&o, int cor, int l = 1, int r = n) {\n\tif(o == NULL) o = new Segtree;\n\tif(l == r) {\n\t\t++(o -> maxv);\n\t\to -> sumv = cor;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(cor <= mid) insert(o -> ch[0], cor, l, mid);\n\telse insert(o -> ch[1], cor, mid + 1, r);\t\n\tpushup(o);\n}\n\nSegtree *merge(Segtree *x, Segtree *y, int l = 1, int r = n) {\n\tif(x == NULL) return y;\n\tif(y == NULL) return x;\n\tSegtree *res = new Segtree;\n\tif(l == r) {\n\t\tres -> maxv = x -> maxv + y -> maxv;\n\t\tres -> sumv = l;\n\t} else {\n\t\tint mid = (l + r) >> 1;\n\t\tres -> ch[0] = merge(x -> ch[0], y -> ch[0], l, mid);\n\t\tres -> ch[1] = merge(x -> ch[1], y -> ch[1], mid + 1, r);\n\t\tpushup(res);\n\t}\n\tdelete x;\n\tdelete y;\n\treturn res;\n}\n\nvoid dfs(int x, int fa) {\n\tinsert(root[x], c[x]);\n\tfor(std::vector < int >::iterator it = e[x].begin(); it != e[x].end(); ++it) {\n\t\tint to = *it;\n\t\tif(to == fa) continue;\n\t\tdfs(to, x);\n\t\troot[x] = merge(root[x], root[to]);\n\t}\n\tans[x] = root[x] -> sumv;\n}\n\nsigned main() {\n\tn = read();\n\tfor(int i = 1; i <= n; ++i) c[i] = read();\n\tfor(int i = 1; i < n; ++i) {\n\t\tint a = read(), b = read();\n\t\te[a].push_back(b);\n\t\te[b].push_back(a);\n\t}\n\tdfs(1, 0);\n\tfor(int i = 1; i <= n; ++i) printf(\"%lld \", ans[i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1543228093,
        "uid": 24878,
        "name": "iodwad",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "\u6734\u7d20\u7684\u542f\u53d1\u5f0f\u5408\u5e76\u5c31\u662f\u5927\u578bSTL\u7ec3\u4e60\u7cfb\u5217\u3002\u3002\u3002\n\n\n[STL\u5b9e\u73b0dsu\u7684\u7ecf\u5178\u5b9e\u73b0](https://www.luogu.org/blog/qiyue7ACM/solution-cf1009f)\n\n\u5bf9\u4e8e\u8fd9\u9898\u7684\u8bdd\u6211\u4eec\u9700\u8981\u6ce8\u610f\u5230\u4e00\u4e2a\u5173\u952e\u70b9\u5c31\u662f\uff1a\u533a\u95f4\u4f17\u6570\u53ea\u5728modify\u7684\u65f6\u5019\u4f1a\u53d1\u751f\u4fee\u6539\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e2amap\u5f88\u7b80\u5355\u7684\u5c31\u8fdb\u884c\u7ef4\u62a4\u4e86\n\n\n\u7531\u4e8e\u662f\u5f88\u4e45\u4e4b\u524d\u5199\u7684\u9898\uff0c\u5f53\u65f6\u53ea\u5199\u4e86java\u4ee3\u7801\uff0c\u7528hashmap\u5b9e\u73b0\uff0cC++\u7528unordered_map\u66ff\u6362\u5373\u53ef\n\njava AC\u4ee3\u7801\uff1a\n```java\nimport java.io.*;\nimport java.util.*;\npublic class Main\n{\n    public static InputReader in = new InputReader(System.in);\n    public static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n    public static void main(String[] args)\n    {\n        int n;\n        n=in.nextInt();\n        dsu_on_tree d=new dsu_on_tree(n+1);\n        for(int i=1;i<=n;++i)\n            d.ans2[i]=in.nextInt();\n        for(int i=1;i<n;++i)\n            d.insert(in.nextInt(),in.nextInt());\n        d.topo(1);\n        d.solve(n);\n        for(int i=1;i<=n;++i)\n            out.print(d.ans2[i]+\" \");\n        out.flush();\n        out.close();\n    }\n\u00a0\n}\nclass graph_list\n{\n    LinkedList<Integer> edge[];\n    void add(int u,int v)\n    {\n        edge[u].add(v);\n    }\n    graph_list(int n)\n    {\n        edge=new LinkedList[n];\n        for(int i=0;i<n;++i)\n            edge[i]=new LinkedList<Integer>();\n    }\n}\nclass graph //\u524d\u5411\u661f\n{\n    int Begin[], to[], Next[], e;\n    void add(int u, int v)\n    {\n        to[++e] = v;\n        Next[e] = Begin[u];\n        Begin[u] = e;\n    }\n    graph(int a)\n    {\n        e=0;\n        to=new int[a];\n        Next=new int[a];\n        Begin=new int[a];\n        Arrays.fill(Begin,-1);\n    }\n}\nclass dsu_on_tree\n{\n    graph p;\n    HashMap<Integer,Integer> ans[];\n    int topo1[],time,fa[],K,sum[],max1[];\n    long ans2[];\n    dsu_on_tree(int n)\n    {\n        fa=new int[n+1];\n        max1=new int[n+1];\n        ans=new HashMap[n];\n        ans2=new long[n+1];\n        topo1=new int[n];\n        p=new graph(2*n+10);\n        for(int i=0;i<n;++i)\n            ans[i]=new HashMap<Integer,Integer>();\n    }\n    void insert(int u,int v)\n    {\n        p.add(u,v);\n        p.add(v,u);\n    }\n    void solve(int N)\n    {\n        for(int i=1;i<=N;++i)\n        {\n            ans[i].put((int)ans2[i],1);\n            max1[i]=1;\n        }\n        for(int i=time-1;i>0;--i)\n            ans[fa[topo1[i]]]=merge(ans[topo1[i]],ans[fa[topo1[i]]],topo1[i]);\n\u00a0\n    }\n    HashMap<Integer,Integer> merge(HashMap<Integer,Integer> a,HashMap<Integer,Integer> b,int p)\n    {\n        if(a.size()>b.size())\n        {\n            ans2[fa[p]]=ans2[p];\n            max1[fa[p]]=max1[p];\n            p=fa[p];\n            for(Map.Entry<Integer,Integer> i:b.entrySet())\n            {\n                if (a.containsKey(i.getKey())) {\n                    int p2 = a.get(i.getKey());\n                    if(max1[p]==p2+i.getValue())\n                        ans2[p]+=(long)i.getKey();\n                    else if(max1[p]<p2+i.getValue())\n                    {\n                        ans2[p]=(long)i.getKey();\n                        max1[p]=p2+i.getValue();\n                    }\n                    a.replace(i.getKey(), p2 + i.getValue());\n                }\n                else\n                    {\n                    a.put(i.getKey(), i.getValue());\n                        if (max1[p]==i.getValue())\n                            ans2[p]+=(long)i.getKey();\n                        else if(max1[p]<i.getValue())\n                        {\n                            ans2[p]=(long)i.getKey();\n                            max1[p]=i.getValue();\n                        }\n                }\n            }\n            b.clear();\n            return a;\n        }\n        p=fa[p];\n        for(Map.Entry<Integer,Integer> i:a.entrySet()) {\n            if (b.containsKey(i.getKey()))\n            {\n                int p2 = b.get(i.getKey());\n                if(max1[p]==p2+i.getValue())\n                    ans2[p]+=(long)i.getKey();\n                else if(max1[p]<p2+i.getValue())\n                {\n                    ans2[p]=(long)i.getKey();\n                    max1[p]=p2+i.getValue();\n                }\n                b.replace(i.getKey(), p2 + i.getValue());\n            }\n            else\n                {\n                b.put(i.getKey(), i.getValue());\n                if (max1[p]==i.getValue())\n                    ans2[p]+=(long)i.getKey();\n                else if(max1[p]<i.getValue())\n                {\n                    ans2[p]=(long)i.getKey();\n                    max1[p]=i.getValue();\n                }\n            }\n        }\n        a.clear();\n        return b;\n    }\n    void topo(int root)\n    {\n        Arrays.fill(fa,-1);\n        Arrays.fill(topo1,0);\n        int que[]=new int[100010];\n        int tail=0,head=0;\n        int cur=0;\n        que[tail++]=root;\n        time=0;\n        while (tail!=head)\n        {\n            cur=que[head++];\n            topo1[time++]=cur;\n            for(int i=p.Begin[cur];i!=-1;i=p.Next[i])\n                if(p.to[i]!=fa[cur])\n                {\n                    que[tail++]=(p.to[i]);\n                    fa[p.to[i]]=cur;\n                }\n        }\n    }\n}\nclass InputReader{\n    private final static int BUF_SZ = 65536;\n    BufferedReader in;\n    StringTokenizer tokenizer;\n    public InputReader(InputStream in) {\n        super();\n        this.in = new BufferedReader(new InputStreamReader(in),BUF_SZ);\n        tokenizer = new StringTokenizer(\"\");\n    }\n    public String next() {\n        while (!tokenizer.hasMoreTokens()) {\n            try {\n                tokenizer = new StringTokenizer(in.readLine());\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return tokenizer.nextToken();\n    }\n    public boolean hasNext() {  //\u5904\u7406EOF\n        while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n            try {\n                String line = in.readLine();\n                if(line == null) return false;\n                tokenizer = new StringTokenizer(line);\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return true;\n    }\n    public int nextInt() {\n        return Integer.parseInt(next());\n    }\n    public long nextLong()\n    {\n        return Long.parseLong(next());\n    }\n}\n```\n",
        "postTime": 1565682419,
        "uid": 154957,
        "name": "qiyue7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "### DSU\n#### \u7c7b\u4f3c\u5e76\u67e5\u96c6\u7684\u6309\u79e9\u5408\u5e76\n#### \u6b65\u9aa4\n1.\u5148\u5904\u7406\u8f7b\u513f\u5b50\u7684\u6811,\u518d\u628a\u4ed6\u4eec\u5168\u90e8\u6e05\u7a7a   \n2.\u5904\u7406\u91cd\u513f\u5b50\u6811   \n3.\u628a\u8f7b\u513f\u5b50\u548c\u91cd\u513f\u5b50\u5408\u5e76\u8d77\u6765.   \n#### \u590d\u6742\u5ea6\n$O(nlogn)$   \n\u56e0\u4e3a\u4e00\u4e2a\u70b9\u88ab\u5904\u7406(\u66b4\u529b\u6e05\u7a7a)\u53ea\u53ef\u80fd\u56e0\u4e3a\u67d0\u4e2a\u7956\u5148\u662f\u8f7b\u513f\u5b50,\u800c\u8fd9(\u8f7b\u513f\u5b50)\u5728\u94fe\u4e0a\u4e0d\u4f1a\u8d85\u8fc7$logn$\u4e2a.    \n#### \u9488\u5bf9\u672c\u9898\n\u641e\u51e0\u4e2a\u6876\u5b58\u67d0\u989c\u8272\u51fa\u73b0\u7684\u6b21\u6570,\u67d0\u6b21\u6570\u5185\u6240\u6709\u7684color\u4e4b\u548c.   \n\u4eca\u5929yyb\u8bf4:\"\u66b4\u529b\u6e05\u7a7a.\"\n\u53ea\u8981\u662f\u6ca1\u6709\u6e05\u7a7a,\u6240\u6709\u4fe1\u606f\u80af\u5b9a\u662f\u5728\u4e00\u8d77\u7684,\u6e05\u7a7a\u4ee5\u540e\u518dupd\u5c31\u662f\u626b\u91cd\u513f\u5b50\u6216\u8005\u5408\u5e76\u4e86,\u4e0d\u8981\u6015\u6e05\u7a7a\u65f6\u4e22\u4e86\u4ec0\u4e48\u4e1c\u897f,\u4ee5\u540eupd\u626b\u91cd\u513f\u5b50\u6216\u8005\u5408\u5e76\u65f6\u4f1a\u518d\u5f04\u56de\u6765\u7684.\n#### pps:\u6e05\u7a7a\u65f6\u5fc5\u5224\u65ad\u4e0d\u8981\u6e05\u7a7a\u91cd\u513f\u5b50\n\n----\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdio>\n#define ll long long\nconst int N = 1e5+10;\nusing namespace std;\nint n,co[N],h[N],cnt,son[N],siz[N],ctl[N],num[N],top;ll A[N],sum[N];\nstruct ed{int t,nxt;}e[N<<1];\nvoid add(int fr,int t){e[++cnt]=(ed){t,h[fr]};h[fr]=cnt;}\nvoid Dfs1(int u,int fa){\n\tsiz[u]=1;\n\tfor(int i=h[u];i;i=e[i].nxt){\n\t\tint v=e[i].t;if(v==fa)continue;\n\t\tDfs1(v,u);siz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])\n\t\t\tson[u]=v;\n\t}\n}\nvoid upd(int u,int fa,int va){\n\tsum[num[co[u]]]-=co[u];\n\tnum[co[u]]+=va;\n\tsum[num[co[u]]]+=co[u];\n\tif(sum[top+1])++top;\n\tif(!sum[top])--top;\n\tfor(int i=h[u];i;i=e[i].nxt){\n\t\tif(e[i].t!=fa&&!ctl[e[i].t])upd(e[i].t,u,va);//!ctl[e[i].t];\n\t}\n}\nvoid Dfs2(int u,int fa,int keep){\n\tfor(int i=h[u];i;i=e[i].nxt){\n\t\tint v=e[i].t;if(v==fa||v==son[u])continue;\n\t\tDfs2(v,u,0);\n\t}\n\tif(son[u])\n\t\tDfs2(son[u],u,1),ctl[son[u]]=1;\n\tupd(u,fa,1);\n\tctl[son[u]]=0;\n\tA[u]=sum[top];\n\tif(!keep)\n\t\tupd(u,fa,-1);\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&co[i]);\n\tfor(int i=1,u,v;i<n;i++){\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);add(v,u);\n\t}\n\tDfs1(1,0);Dfs2(1,0,1);\n\tfor(int i=1;i<=n;i++)printf(\"%lld \",A[i]);\n\treturn 0;\n}\n-------------------------------------------------\n```",
        "postTime": 1540220332,
        "uid": 69935,
        "name": "GUO\u5927\u4fa0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "## \u4e00\u9053\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\n### \u6709\u66f4\u65b0\n\u6211\u4e5f\u4e0d\u77e5\u9053\u4e0a\u6b21\u4e3a\u4ec0\u4e48\u80fd\u8fc7\u3002\u3002\u3002\u6570\u636e\u8303\u56f4\u5f00\u9519\u8fd8\u5fd8\u4e86long long\u3002\u3002\u3002\n\n\u9996\u5148\u8dd1\u4e00\u8fb9dfs\uff0c\u627e\u51fa\u7236\u8282\u70b9\u548c\u91cd\u513f\u5b50\uff08\u4e0d\u77e5\u9053\u7684\u5148\u770b\u6811\u5256\uff09\n\n\u56e0\u4e3a\u6570\u636e\u8303\u56f4\uff0c\u53ea\u80fd\u5f00\u4e00\u4e2a\u8bb0\u5f55\u989c\u8272\u6570\u91cf\u7684\u6570\u7ec4\u3002\u6700\u4f18\u7684\u529e\u6cd5\u662f\u4fdd\u7559\u91cd\u513f\u5b50\u7684\u60c5\u51b5\u3002\n\n\u7136\u800c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u6570\u7ec4\u5f52\u96f6\u548c\u7edf\u8ba1\u7b54\u6848\u6bcf\u6b21\u662f$O(n)$\u7684\uff0c\u4e00\u5171$O(n^2)$\u3002\u4e8e\u662f\u6211\u7528\u4e86\u4e00\u4e2a\u65f6\u95f4\u6233\u7684\u4f18\u5316\uff08\u89c1\u4ee3\u7801\uff0c\u6709\u8bf4\u660e\uff09\n\n\n\u4ee3\u7801\u4e11\u52ff\u55b7\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nint n;\nstruct Array{                                     //\u4f18\u5316\n    int tme,a[100010],t[100010],maxsize;\n    ll sum; //t\u4e3a\u4e0a\u6b21\u66f4\u6539\u65f6\u95f4\uff0ca\u4e3a\u6570\u91cf\uff0ctime\u4e3a\u76ee\u524d\u65f6\u95f4\uff0cmaxn\u4e3a\u6700\u5927\u7684\u6570\u91cf\uff0csum\u4e3a\u6700\u5927\u7684\u4e4b\u548c\n    void clear(){tme++,maxsize=sum=0;}              //\u53ea\u8981\u628a\u65f6\u95f4\u6233++\uff0c\u4e24\u4e2a\u7edf\u8ba1\u6700\u5927\u7684\u5f52\u96f6\u5373\u53ef(O(1))\u3002\n    void inc(int k){\n        if(t[k]!=tme)a[k]=0,t[k]=tme;           //\u5982\u679c\u4e0a\u6b21\u66f4\u6539\u4e4b\u540e\u6709\u5f52\u96f6\uff0c\u5219\u5f52\u96f6\n        a[k]++;\n        if(a[k]>maxsize)sum=0,maxsize=a[k];\n        if(a[k]==maxsize)sum+=k;\n    }\n    ll ans(){return sum;}\n}a;\nint head[100010],nxt[200010],cnt,v[200010];\nint c[100010],wson[100010],fa[100010],s[100010];\nll ans[100010];\nvoid add(int U,int V){            //\u52a0\u8fb9\n    nxt[++cnt]=head[U];\n    head[U]=cnt;\n    v[cnt]=V;\n}\nvoid dfs1(int now){               //\u627e\u91cd\u513f\u5b50\n    s[now]=1;\n    wson[now]=0;\n    for(register int i=head[now];i;i=nxt[i])\n        if(v[i]!=fa[now]){\n            fa[v[i]]=now;\n            dfs1(v[i]);\n            s[now]+=s[v[i]];\n            if(s[v[i]]>s[wson[now]])wson[now]=v[i];\n        }\n}\nvoid dfs2(int now,Array& a){  //\u7edf\u8ba1\u4ee5now\u4e3a\u6839\u5b50\u6811\u4e2d\u7684\u989c\u8272\u6570\u91cf\u3002\n    a.inc(c[now]);\n    for(register int i=head[now];i;i=nxt[i])\n        if(v[i]^fa[now])dfs2(v[i],a);\n}\nvoid dfs3(int now,Array& a){  //\u6838\u5fc3\u4ee3\u7801\n    if(wson[now]==0){    //\u53f6\u5b50\u8282\u70b9\n        ans[now]=c[now];\n        a.inc(c[now]);\n        return;\n    }\n    for(register int i=head[now];i;i=nxt[i]){\n        if(v[i]!=fa[now]&&v[i]!=wson[now]){\n            dfs3(v[i],a);\n            a.clear();\n        }\n    }\n    dfs3(wson[now],a);  //\u91cd\u513f\u5b50\u5f71\u54cd\u4fdd\u7559\n    for(register int i=head[now];i;i=nxt[i]){  //\u52a0\u4e0a\u5176\u5b83\u5b50\u6811\n        if(v[i]!=fa[now]&&v[i]!=wson[now]){\n            dfs2(v[i],a);\n        }\n    }\n    a.inc(c[now]);  //\u522b\u5fd8\u4e86\u52a0\u4e0a\u81ea\u5df1\n    ans[now]=a.ans();//\u7edf\u8ba1\u7b54\u6848\n}\nint main(int argc,char**argv){ //\u4e3b\u7a0b\u5e8f\u6ca1\u5565\u53ef\u8bb2\n    scanf(\"%d\",&n);\n    for(register int i=1;i<=n;i++)scanf(\"%d\",c+i);\n    for(register int i=1;i<n;i++){\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        add(u,v);\n        add(v,u);\n    }\n    dfs1(1);\n    dfs3(1,a);\n    for(register int i=1;i<=n;i++)printf(\"%lld \",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1520662156,
        "uid": 67371,
        "name": "hehezhou",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "\u5178\u578b\u7684dsu on tree\n\u9012\u5f52\u5904\u7406\u8f7b\u513f\u5b50\uff0c\u8ba1\u7b97\u8f7b\u513f\u5b50\u7b54\u6848\uff0c \n\u7136\u540e\u6d88\u53bb\u8f7b\u513f\u5b50\u5bf9\u4e8e\u7b54\u6848\u7684\u5f71\u54cd\u3002 \n\u7136\u540e\u9012\u5f52\u5904\u7406\u91cd\u513f\u5b50\uff0c\u4e0d\u6d88\u53bb\u5f71\u54cd\uff0c\u6700\u540e\u52a0\u5165\u6240\u6709\u8f7b\u513f\u5b50\u8d21\u732e\uff0c\u8ba1\u7b97\u7b54\u6848\u3002\n\u8fd8\u53ef\u4ee5\u5c06\u6811\u5904\u7406\u6210\u5e8f\u5217\uff0c\u7528\u83ab\u961f\u8fdb\u884c\u5904\u7406\ndsu on tree\u65f6\u95f4\u590d\u6742\u5ea6O\uff08nlogn\uff09\n\u83ab\u961f\u65f6\u95f4\u590d\u6742\u5ea6O\uff08n\u221an\uff09\n\u663e\u7136\u524d\u8005\u66f4\u4f18\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 100005\n#define ll long long\nll cnt=0,top=0,n;\nll head[maxn],size[maxn],deep[maxn],f[maxn],son[maxn],sum[maxn],num[maxn],c[maxn],ans[maxn];\nbool vis[maxn];\nstruct node\n{\n\tint to,next;\n}e[maxn*2];\ninline ll read()\n{\n\tll w=1,s=0; char ch=getchar();\n\twhile(ch<'0' || ch>'9'){if(ch=='-')w=-1; ch=getchar();}\n\twhile(ch>='0' && ch<='9'){s=s*10+ch-'0'; ch=getchar();}\n\treturn w*s;\n}\nvoid add(int x,int y)\n{\n\tcnt++;\n\te[cnt].to=y;\n\te[cnt].next=head[x];\n\thead[x]=cnt;\n}\nvoid dfs1(int u,int fa)\n{\n\tsize[u]=1; deep[u]=deep[fa]+1; f[u]=fa;\n\tfor(int i=head[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa) continue;\n\t\tdfs1(v,u);\n\t\tsize[u]+=size[v];\n\t\tif(size[v]>size[son[u]]) son[u]=v;\n\t}\n}\nvoid update(int u,int fa,int tp)\n{\n\tsum[num[c[u]]]-=c[u];\n\tnum[c[u]]+=tp;\n\tsum[num[c[u]]]+=c[u];\n\tif(sum[top+1]) top++;\n\tif(!sum[top]) top--;\n\tfor(int i=head[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa || vis[v]) continue;\n\t\tupdate(v,u,tp);\n\t}\n}\nvoid dfs(int u,int fa,int tp)\n{\n\t\n\tfor(int i=head[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa || v==son[u]) continue;\n\t\tdfs(v,u,0);\n\t}\n\tif(son[u]) \n\t{\n\t\tdfs(son[u],u,1); vis[son[u]]=true;\n\t}\n\tupdate(u,fa,1); vis[son[u]]=false;\n\tans[u]=sum[top];\n\tif(!tp) update(u,fa,-1);\n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++) c[i]=read();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint a=read(),b=read();\n\t\tadd(a,b); add(b,a);\n\t}\n\tdfs1(1,0);\n\tdfs(1,0,1);\n\tfor(int i=1;i<=n;i++) printf(\"%lld \",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1564933881,
        "uid": 178304,
        "name": "PerfessorZhang",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    },
    {
        "content": "\u9898\u76ee\u94fe\u63a5[ Lomsat gelral](http://codeforces.com/problemset/problem/600/E)\n#### \u9898\u610f\n\n\u4e00\u68f5\u6811\u6709$n$\u4e2a\u7ed3\u70b9\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u662f\u4e00\u79cd\u989c\u8272\uff0c\u6bcf\u4e2a\u989c\u8272\u6709\u4e00\u4e2a\u7f16\u53f7\uff0c\u6c42\u6811\u4e2d\u6bcf\u4e2a\u5b50\u6811\u7684\u6700\u591a\u7684\u989c\u8272\u7f16\u53f7\u7684\u548c\n\n## dsu  on tree\u7b97\u6cd5\n- dsu on tree\u7b97\u6cd5\u7684\u601d\u60f3\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u8bbf\u95ee\u4e00\u6b21\u91cd\u513f\u5b50\uff0c\u8bbf\u95ee\u4e24\u6b21\u8f7b\u513f\u5b50\u3002\u8fd9\u6837\uff0c\u6bcf\u4e2a\u70b9\u88ab\u8bbf\u95ee\u7684\u603b\u6b21\u6570\u662f$O(log n)$\u3002\u5728\u8bbf\u95ee\u8fc7\u7a0b\u4e2d\u5904\u7406\u95ee\u9898\u3002\n\n\n------------\n- \u8fd9\u9053\u9898\u4e5f\u53ef\u4ee5\u770b\u505a\u662f $dsu$\n$on$\n$tree$ \u7684\u6a21\u677f\u3002\n\n- \u9996\u5148\u9012\u5f52\u6bcf\u4e2a\u8f7b\u513f\u5b50\uff0c\u6c42\u51fa\u7b54\u6848\uff0c\u7136\u540e\u6e05\u7a7a\u3002\n\n- \u7136\u540e\u9012\u5f52\u91cd\u513f\u5b50\uff0c\u6c42\u51fa\u7b54\u6848\uff0c\u4e0d\u6e05\u7a7a\uff0c\u518d\u9012\u5f52\u4e00\u8fb9\u8f7b\u513f\u5b50\uff0c\u5c06\u6240\u6709\u8f7b\u5b50\u6811\u7684\u989c\u8272\u52a0\u5165\u5230\u5168\u5c40\u6570\u7ec4\uff0c\u5f97\u5230\u5f53\u524d\u70b9\u7684\u7b54\u6848\u3002\n#### \u4ee3\u7801\n~~\u81ea\u529b\u66f4\u751f\u5427~~",
        "postTime": 1576228428,
        "uid": 176990,
        "name": "Celtic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF600E \u3010Lomsat gelral\u3011"
    }
]