[
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa\u4e00\u4e2a\u5e8f\u5217,\u652f\u6301\u533a\u95f4\u5c06\u67d0\u4e2a\u6570\u53d8\u4e3a\u67d0\u4e2a\u6570,\u8f93\u51fa\u6700\u7ec8\u7684\u5e8f\u5217.\n\n# \u5206\u6790\n\n\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u53ea\u6709 $100$ \u79cd,\u6240\u4ee5\u76f4\u63a5\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\u5c31\u597d\u4e86.\n\n\u4f46\u662f,\u8fd9\u6837\u7684\u505a\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u4e0d\u4f18\u79c0.\n\n\u90a3\u4e48\u5c31\u4ece\u8fd9\u4e2a\u8f93\u51fa\u53bb\u8003\u8651,\u53ef\u4ee5\u53d1\u73b0\u5728\u6700\u7ec8\u7ed3\u679c\u524d\u6ca1\u6709\u5fc5\u8981\u77e5\u9053\u6bcf\u4e2a\u70b9\u786e\u5207\u7684\u503c,\u90a3\u4e48\u8003\u8651\u5bf9\u6bcf\u4e00\u79cd\u6570\u5efa\u4e00\u9897\u7ebf\u6bb5\u6811,\u5c06\u4e00\u79cd\u989c\u8272\u53d8\u4e3a\u4ee4\u4e00\u79cd\u989c\u8272\u53ea\u9700\u8981\u5728\u539f\u6765\u7684\u7ebf\u6bb5\u6811\u4e2d\u5c06\u4fee\u6539\u533a\u95f4\u90e8\u5206\u5206\u88c2\u51fa\u6765,\u5728\u5408\u5e76\u5230\u53d8\u6210\u7684\u989c\u8272\u7684\u7ebf\u6bb5\u6811\u4e2d,\u6700\u540e\u904d\u5386\u6240\u6709\u6811\u5c31\u597d\u4e86.\n\n# \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\nconst int MAXN=2e5+7;\nint n,m;\nint arr[MAXN*2];\nint answer[MAXN];\nint root[MAXN*2];\nstruct SegmentTree//\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7684\u7ebf\u6bb5\u6811\n{\n\tint lson,rson;\n\tint num;\n}sgt[MAXN*100];\nint sgt_cnt=0,tot=0;\nint rubbish[MAXN*100];//\u7a7a\u95f4\u56de\u6536\u7528\u7684\u5783\u573e\u6876\n#define LSON (sgt[now].lson)\n#define RSON (sgt[now].rson)\n#define MIDDLE ((left+right)>>1)\n#define LEFT LSON,left,MIDDLE\n#define RIGHT RSON,MIDDLE+1,right\n#define NOW now_left,now_right\nint NewPoint()//\u4e00\u4e2a\u65b0\u4e2a\u8282\u70b9\n{\n\tif(tot)\n\t{\n\t\treturn rubbish[tot--];//\u5982\u679c\u5783\u573e\u6876\u4e0d\u662f\u7a7a\u7684\u5c31\u4ece\u5783\u573e\u6876\u91cc\u62ff\n\t}\n\treturn ++sgt_cnt;//\u5426\u5219\u5c31\u7528\u4e00\u4e2a\u5168\u65b0\u7684\n}\nvoid DeletePoint(int &now)//\u5220\u9664\u8282\u70b9\n{\n\tsgt[now].lson=sgt[now].rson=sgt[now].num=0;//\u6ce8\u610f\u8981\u6e05\u7a7a\n\trubbish[++tot]=now;//\u6254\u5783\u573e\u6876\u91cc\n\tnow=0;\n}\nvoid Merge(int &tree1,int &tree2,int left=1,int right=n)//\u5408\u5e76\u4e24\u9897\u7ebf\u6bb5\u6811\n{\n\tif(!tree1||!tree2)\n\t{\n\t\ttree1+=tree2;\n\t\ttree2=0;//\u6ce8\u610f\u8981\u5c06tree2\u6539\u62100\n\t\treturn;\n\t}\n\tif(left==right)\n\t{\n\t\tsgt[tree1].num+=sgt[tree2].num;\n\t\tDeletePoint(tree2);//\u5220\u9664\u8282\u70b9,\u8282\u7701\u7a7a\u95f4\n\t\treturn;\n\t}\n\tMerge(sgt[tree1].lson,sgt[tree2].lson,left,MIDDLE);//\u7ee7\u7eed\u5411\u4e0b\u5408\u5e76\n\tMerge(sgt[tree1].rson,sgt[tree2].rson,MIDDLE+1,right);\n\tDeletePoint(tree2);\n}\nvoid Split(int now_left,int now_right,int &tree1,int &tree2,int left=1,int right=n)//\u5c06\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u6bb5\u533a\u95f4\u5206\u88c2\u51fa\u6765,\u4ee3\u7801\u53ef\u4ee5\u53c2\u8003\u6a21\u677f\u9898\u4e2d\u7684\u9898\u89e3\n{\n\tif(right<now_left||now_right<left)\n\t{\n\t\treturn;\n\t}\n\tif(!tree1)\n\t{\n\t\treturn;\n\t}\n\tif(now_left<=left&&right<=now_right)\n\t{\n\t\ttree2=tree1;\n\t\ttree1=0;\n\t\treturn;\n\t}\n\tif(!tree2)\n\t{\n\t\ttree2=NewPoint();\n\t}\n\tSplit(NOW,sgt[tree1].lson,sgt[tree2].lson,left,MIDDLE);\n\tSplit(NOW,sgt[tree1].rson,sgt[tree2].rson,MIDDLE+1,right);\n}\nvoid Updata(int place,int &now,int left=1,int right=n)//\u5355\u70b9\u4fee\u6539\n{\n\tif(place<left||right<place)\n\t{\n\t\treturn;\n\t}\n\tif(!now)\n\t{\n\t\tnow=NewPoint();\n\t}\n\tif(left==right)\n\t{\n\t\tsgt[now].num=1;//\u76f4\u63a5\u4fee\u6539\u62101\n\t\treturn;\n\t}\n\tUpdata(place,LEFT);\n\tUpdata(place,RIGHT);\n}\nvoid GetAnswer(int num,int now,int left=1,int right=n)//\u5c06\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u653e\u5230\u7b54\u6848\u4e0a\n{\n\tif(!now)\n\t{\n\t\treturn;\n\t}\n\tif(left==right)\n\t{\n\t\tanswer[left]+=sgt[now].num*num;//\u8ba1\u7b97\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6570\n\t\treturn;\n\t}\n\tGetAnswer(num,LEFT);\n\tGetAnswer(num,RIGHT);\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tREP(i,1,n)\n\t{\n\t\tscanf(\"%d\",&arr[i]);\n\t\tUpdata(i,root[arr[i]]);\n\t}\n\tscanf(\"%d\",&m);\n\tint cnt=n;\n\tint left,right,x,y;\n\tint split_root;\n\tREP(i,1,m)\n\t{\n\t\tscanf(\"%d%d%d%d\",&left,&right,&x,&y);\n\t\tif(root[x])//\u5982\u679c\u5728\u73b0\u5728\u7684\u5e8f\u5217\u4e2d\u5b58\u5728x\u90a3\u4e48\u4fee\u6539\n\t\t{\n\t\t\tarr[++cnt]=y;//\u65b9\u4fbf\u6700\u540e\u7684\u67e5\u8be2,\u5c06y\u653e\u5165\u6570\u7ec4\n\t\t\tsplit_root=0;\n\t\t\tSplit(left,right,root[x],split_root);//\u5728\u5e8f\u5217\u4e2d\u5c06\u8fd9\u6bb5\u533a\u95f4\u7684x\u5206\u88c2\u51fa\u6765\n\t\t\tMerge(root[y],split_root);//\u5408\u5e76\u5230y\u4e0a\u9762\n\t\t}\n\t}\n\tsort(arr+1,arr+1+cnt);//\u6392\u5e8f\u53bb\u91cd\n\tarr[0]=0;\n\tREP(i,1,cnt)\n\t{\n\t\tif(arr[i]^arr[i-1])\n\t\t{\n\t\t\tGetAnswer(arr[i],root[arr[i]]);//\u8bb0\u5f55\u7b54\u6848\n\t\t}\n\t}\n\tREP(i,1,n)\n\t{\n\t\tprintf(\"%d \",answer[i]);//\u8f93\u51fa\u7b54\u6848\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1586498468,
        "uid": 86625,
        "name": "Limit",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF911G \u3010Mass Change Queries\u3011"
    },
    {
        "content": "~~\u7ebf\u6bb5\u6811\u52a8\u6001\u5f00\u70b9\u88f8\u9898~~\n\n\u8fd9\u662f\u7f51\u4e0a\u7684\u4e00\u79cd\u8bf4\u6cd5\uff0c\u867d\u7136\u6211\u5e76\u4e0d\u77e5\u9053\u6709\u591a\u7b80\u5355\u3002\n\n\u5bf9\u4e00\u4e2a\u5e8f\u5217\u8fdb\u884c\u64cd\u4f5c\uff0c\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u5c31\u662f\u7528\u7ebf\u6bb5\u6811\u4e86\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u867d\u7136\u5e8f\u5217\u5f88\u957f\uff0c\u5bf9\u6574\u4e2a\u5e8f\u5217\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bd4\u8f83\u56f0\u96be\uff08\u867d\u7136\u5927\u90e8\u5206\u4eba\u90fd\u662f\u8fd9\u4e48\u641e\u7684\uff09\uff0c\u4f46\u662f\u4e0d\u540c\u7684\u6743\u503c\u6700\u591a\u53ea\u6709100\u79cd\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u5bf9\u4e0d\u540c\u7684\u6743\u503c\u5f00\u7ebf\u6bb5\u6811\uff0c\u6700\u591a\u4e5f\u4e0d\u8fc7100\u68f5\u7ebf\u6bb5\u6811\u3002\n\n\u73b0\u5728\u8003\u8651\u5bf9\u6bcf\u4e2a\u6743\u503c\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u662f\u5426\u5b58\u5728\u513f\u5b50\u8282\u70b9\u6765\u8868\u793a\u67d0\u533a\u95f4\u5185\u662f\u5426\u6709\u8be5\u6743\u503c\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u82e5\u5728\u6743\u503c\uff58\u7684\u7ebf\u6bb5\u6811\u5185\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\uff3b\uff4c\uff0c\uff52\uff3d\u6240\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u5982\u679c\u8fd9\u68f5\u6811\u5185\u6709\u8be5\u8282\u70b9\uff0c\u8bf4\u660e\u8be5\u533a\u95f4\u5185\u6709\u6743\u503c\uff58\uff1b\u53cd\u4e4b\u82e5\u8be5\u8282\u70b9\u4e0d\u5b58\u5728\uff08\u4e3a\u7a7a\uff09\uff0c\u8bf4\u660e\u8be5\u533a\u95f4\u5185\u65e0\u6743\u503c\uff58\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5f80\u4e0b\u9012\u63a8\u5230\u533a\u95f4\uff3b\uff4c\uff0c\uff4c\uff3d\uff0c\u6b64\u65f6\u533a\u95f4\u53d8\u6210\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u8be5\u8282\u70b9\u5b58\u5728\uff0c\u5c31\u8bf4\u660e\u5e8f\u5217\u4e2d\uff4c\u5904\u6743\u503c\u4e3a\uff58\u3002\n\n\u5f53\u6211\u4eec\u9700\u8981\u8fdb\u884c\u4e00\u4e2a\u64cd\u4f5c\uff0c\u5bf9\u533a\u95f4\uff3b\uff4c\uff0c\uff52\uff3d\u4e2d\uff58\u53d8\u4e3a\uff59\u65f6\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a\uff58\u7684\u7ebf\u6bb5\u6811\u4e2d\u533a\u95f4\uff3b\uff4c\uff0c\uff52\uff3d\u4e2d\u7684\u8282\u70b9\u53d6\u51fa\uff0c\u653e\u8fdb\uff59\u7684\u7ebf\u6bb5\u6811\u4e2d\uff0c\u4e5f\u5c31\u662f\u5408\u5e76\u7ebf\u6bb5\u6811\u3002\u5e76\u4e14\uff0c\u7531\u4e8e\u5e8f\u5217\u4e2d\u540c\u4e00\u4f4d\u7f6e\u5728\u67d0\u4e00\u65f6\u523b\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u4e0d\u4f1a\u4ea7\u751f\uff59\u4e2d\u4e5f\u6709\u5bf9\u5e94\u8282\u70b9\u7684\u51b2\u7a81\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u5bf9100\u68f5\u7ebf\u6bb5\u6811\u90fd\u626b\u4e00\u904d\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u7ec8\u5e8f\u5217\u4e86\u3002\n\n\u5728\u8fd9\u4ee5\u4e0a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u68f5\u7ebf\u6bb5\u6811\u9664\u4e86\u52a8\u6001\u5f00\u70b9\uff0c\u4ec0\u4e48\u90fd\u4e0d\u7528\u4fdd\u5b58\uff0c~~\u4f3c\u4e4e\u771f\u7684\u5f88\u7b80\u5355\uff1f~~\n\n\u53e6\u5916\uff0c\u9898\u76ee\u5e76\u6ca1\u6709\u4fdd\u8bc1\uff58\u4e00\u5b9a\u4e0d\u7b49\u4e8e\uff59\uff0c\u6240\u4ee5CF\u7684\u6570\u636e\u7edd\u5bf9\u4f1a\u5361\u7279\u6b8a\u60c5\u51b5\u7684\uff0c\u8fd9\u65f6\u7279\u5224\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\ncode\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> PII;\n\ninline int rd() {\n\tint xx=0,ff=1;\n\tchar ch=getchar();\n\twhile(ch<'0' or ch>'9'){if(ch=='-')ff=-1;ch=getchar();}\n\twhile(ch>='0' and ch<='9'){xx=xx*10-'0'+ch;ch=getchar();}\n\treturn xx*ff;\n}\n\nconst int N=1e7+10;\nconst int M=2e6+10;\nconst int INF=(1<<30);\n\nint n,m;\nint cnt;\nint lson[N],rson[N];\n\nint root[120];\n\nint merge(int a,int b)\n{\n\tif(!a or !b)return a | b;\n\t\n\tlson[a] = merge(lson[a] , lson[b]);\n\trson[a] = merge(rson[a] , rson[b]);\n\t\n\treturn a;\n}\n\nvoid init(int& i,int l,int r,int goal)\n{\n\tif(l > goal or r < goal)return ;\n\t\n\tif(!i)i = ++cnt;\n\t\n\tif(l == r)return ;\n\t\n\tint mid = (l + r) >> 1;\n\tinit(lson[i],l,mid,goal);\n\tinit(rson[i],mid+1,r,goal);\n}\n\nvoid modify(int& a,int& b,int l,int r,int x,int y)\n{\n\tif(!a)return ;\n\tif(l > y or r < x)return ;\n\t\n\tif(l >= x and r <= y) \n\t{\n\t\tb = merge(a , b);a = 0;\n\t\treturn;\n\t}\n\tif(!b)\n\t{\n\t\tb = ++cnt;\n\t}\n\tint mid = (l + r) >> 1;\n\tmodify(lson[a],lson[b],l,mid,x,y);\n\tmodify(rson[a],rson[b],mid+1,r,x,y);\n}\n\nint ans[M];\n\nvoid print(int i,int l,int r,int c)\n{\n\tif(!i)return ;\n\tif(l == r)\n\t{\n\t\tans[l] = c;\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tprint(lson[i],l,mid,c);\n\tprint(rson[i],mid+1,r,c);\n}\n\nint main()\n{\n\tn = rd(); \n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x = rd();\n\t\tinit(root[x],1,n,i);\n\t}\n\t\n\tm = rd();\n\twhile(m--)\n\t{\n\t\tint l = rd(),r = rd();\n\t\tint x = rd(),y = rd();\n\t\t\n\t\tif(x == y)continue;//\u975e\u5e38\u91cd\u8981\u7684\u4e00\u6b65\uff0c\u907f\u514d\u76f8\u540c\u5143\u7d20\u7684\u66f4\u6362\u51fa\u9519 \n\t\t\n\t\tmodify(root[x],root[y],1,n,l,r);\n\t}\n\t\n\tfor(int i=1;i<=100;i++)\n\t\tprint(root[i],1,n,i);\n\t\n\tfor(int i=1;i<=n;i++)printf(\"%d \",ans[i]);\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1572852055,
        "uid": 146368,
        "name": "\u4eba\u95f4\u8fc7\u5ba2",
        "ccfLevel": 7,
        "title": "CF911G Mass Change Queries"
    },
    {
        "content": "\u975e\u5e38 $\\text{Naive}$ \u7684\u4e00\u9053\u9898\u3002\n\n\u770b\u5230 $\\max a_i\\leq 100$\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u5f00 $100$ \u68f5\u7ebf\u6bb5\u6811\uff0c\u7b2c $i$ \u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b $l,r$ \u5185\u503c\u4e3a $i$ \u7684\u6570\u7684\u4e2a\u6570\uff0c\u66b4\u529b\u4e71\u641e\u3002\u4f46\u662f $O(nm \\log n)$ \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4f1a\u7206\u70b8\uff0c\u600e\u4e48\u529e\u5462\uff1f\n\n\u4f7f\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u5373\u53ef\u907f\u514d $\\text{MLE}$\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c $l,r,x,y$\uff0c\u6211\u4eec\u5c06\u7b2c $x$ \u68f5\u7ebf\u6bb5\u6811\u4e0a $l,r$ \u7684\u503c\u6e05\u96f6\uff0c\u7b2c $y$ \u68f5\u7ebf\u6bb5\u6811\u4e0a\u7684\u503c\u5bf9\u5e94\u52a0\u4e0a\u7b2c $x$ \u68f5\u7ebf\u6bb5\u6811\u6e05\u96f6\u524d\u7684\u503c\u3002\u4f46\u8fd9\u6837\u5e76\u4e0d\u6bd4\u66b4\u529b\u66f4\u4f18\u79c0\uff08\n\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u4e0a\u8ff0\u64cd\u4f5c\u5176\u5b9e\u672c\u8d28\u5c31\u662f\uff0c\u5728\u7b2c $x$ \u68f5\u7ebf\u6bb5\u6811\u4e0a\u53bb\u6389\u533a\u95f4 $l,r$ \u7684\u8d21\u732e\uff0c\u5728\u7b2c $y$ \u68f5\u7ebf\u6bb5\u6811\u4e0a\u52a0\u4e0a\u7b2c $x$ \u68f5\u7ebf\u6bb5\u6811\u5728\u533a\u95f4 $l,r$ \u4e0a\u7684\u8d21\u732e\u3002\u5176\u5b9e\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u548c\u5206\u88c2\uff0c\u4ece\u7b2c $x$ \u68f5\u7ebf\u6bb5\u6811\u4e0a\u53bb\u6389 $l,r$ \u8d21\u732e\u4f7f\u7528\u5206\u88c2\uff0c\u800c\u5728\u7b2c $y$ \u68f5\u7ebf\u6bb5\u6811\u4e0a\u52a0\u4e0a\u7b2c $x$ \u68f5\u7ebf\u6bb5\u6811\u5728 $l,r$ \u4e0a\u7684\u8d21\u732e\u4f7f\u7528\u5408\u5e76\u3002\n\n\u5373\u4f7f\u4f7f\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4ecd\u7136\u6709\u53ef\u80fd $\\text{MLE}$\uff0c\u4e3a\u4e86\u7a33\u59a5\uff0c\u5b9e\u73b0\u65f6\u4f7f\u7528\u56de\u6536\u7a7a\u95f4\u7684\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u5373\u53ef\uff08\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(m \\log n+nm \\log n)$\uff0c\u7531\u4e8e\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u7279\u6b8a\u6027\uff0c\u5176\u5b9e\u5e76\u8dd1\u4e0d\u6ee1\u3002\n\n**Show the Code**\n\n```cpp\n#include<cstdio>\nconst int M=100;\nint n,top=0,tot=0;\nint a[200005],rt[105],rub[20000005],sum[20000005],sonL[20000005],sonR[20000005]; \ninline int read() {\n\tregister int x=0,f=1;register char s=getchar();\n\twhile(s>'9'||s<'0') {if(s=='-') f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9') {x=x*10+s-'0';s=getchar();}\n\treturn x*f;\n}\ninline int newnode() {return top? rub[top--]:++tot;}\ninline void delnode(int &x) {sonL[x]=sonR[x]=sum[x]=0;rub[++top]=x;x=0;}\ninline void pushup(int p) {sum[p]=sum[sonL[p]]+sum[sonR[p]];}\ninline void change(int &p,int x,int l=1,int r=n) {\n\tif(!p) p=newnode();\n\tif(l==r) {sum[p]=1;return;}\n\tint mid=l+r>>1;\n\tif(x<=mid) change(sonL[p],x,l,mid);\n\telse change(sonR[p],x,mid+1,r);\n\tpushup(p);\n}\ninline void merge(int &x,int &y,int l=1,int r=n) {//\u5c06 y \u5408\u5e76\u5230 x \u4e0a \n\tif(!x||!y) {x+=y;return;}\n\tif(l==r) {sum[x]+=sum[y];delnode(y);}\n\tint mid=l+r>>1;\n\tmerge(sonL[x],sonL[y],l,mid);\n\tmerge(sonR[x],sonR[y],mid+1,r);\n\tdelnode(y); pushup(x);\n}\ninline void split(int &x,int &y,int L,int R,int l=1,int r=n) {\n\tif(!y) return;\n\tif(L<=l&&r<=R) {x=y;y=0;return;}\n\tif(!x) x=newnode();\n\tint mid=l+r>>1;\n\tif(L<=mid) split(sonL[x],sonL[y],L,R,l,mid);\n\tif(R>mid) split(sonR[x],sonR[y],L,R,mid+1,r);\n\tpushup(x); pushup(y);\n}\ninline void dfs(int p,int clr,int l=1,int r=n) {\n\tif(l==r) {a[l]=(sum[p]? clr:a[l]); return;}\n\tint mid=l+r>>1;\n\tdfs(sonL[p],clr,l,mid); dfs(sonR[p],clr,mid+1,r);\n}\nint main() {\n\tn=read();\n\tfor(register int i=1;i<=n;++i) {a[i]=read();change(rt[a[i]],i);}\n\tint Q=read();\n\twhile(Q--) {\n\t\tint l=read(),r=read(),x=read(),y=read();\n\t\tif(x!=y) {int tmp=0; split(tmp,rt[x],l,r); merge(rt[y],tmp);}\n\t}\n\tfor(register int i=1;i<=M;++i) dfs(rt[i],i);\n\tfor(register int i=1;i<=n;++i) printf(\"%d \",a[i]);\n\treturn 0;\n}\n```",
        "postTime": 1602248733,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF911G \u3010Mass Change Queries\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\u7ed9\u5b9a\u5e8f\u5217 $a_1,a_2,\\cdots,a_n$\u3002  \n\u8981\u6c42\u652f\u6301\u5c06\u533a\u95f4 $[l,r]$ \u4e2d\u7b49\u4e8e $p$ \u7684\u6570\u53d8\u6210 $p'$\u3002  \n$q$ \u6b21\u64cd\u4f5c\u540e\u8f93\u51fa\u6700\u7ec8\u7684\u5e8f\u5217\u3002\n\n$\\texttt{Data Range: }1\\le n,q\\le 2\\times 10^5,1\\le a_i,p,p'\\le 100$ \u3002\n\n## \u9898\u89e3\n\n\u770b\u5230\u662f\u5e8f\u5217\u64cd\u4f5c\uff0c\u81ea\u7136\u60f3\u5230 \u7ebf\u6bb5\u6811/\u5e73\u8861\u6811/\u5206\u5757\uff0c  \n\u7136\u540e\u6392\u9664\u5e73\u8861\u6811\uff08\u6ca1\u6709\u7ed3\u6784\u6027\u7684\u5e8f\u5217\u64cd\u4f5c\uff09\u3002  \n\n\u4f46\u6309\u7167\u5e8f\u5217\u7ef4\u62a4\u7684\u4e00\u822c\u601d\u7ef4\u800c\u8a00\uff0c  \n\u5c06\u7b49\u4e8e $x$ \u7684\u6570\u53d8\u6210 $y$ \u8fd9\u4e00\u64cd\u4f5c\u4f3c\u4e4e\u975e\u5e38\u7684\u68d8\u624b\u3002\n\n-------------------\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u662f\u4e2a\u6570\u5b66\u9898\u3002  \n\u524d\u7f6e\u829d\u58eb\uff1a[oi-wiki \u7f6e\u6362\u7fa4](https://oi-wiki.org/math/permutation-group/#_5)\n\n\u7f6e\u6362\u7fa4\u7684\u601d\u60f3\u7ed9\u4e88\u6211\u4eec\u4ee5\u5f88\u5927\u7684\u542f\u53d1\u3002  \n\u5177\u4f53\u5730\uff0c\u6211\u4eec\u7ef4\u62a4\u7684\u4e0d\u518d\u662f\u7cfb\u6570\u5e8f\u5217 $a_1,a_2,\\cdots,a_n$\uff0c  \n\u800c\u662f\u6620\u5c04\u5e8f\u5217 $f_1(x),f_2(x),\\cdots,f_n(x)$\u3002  \n\u521d\u59cb\u65f6\uff0c\u8fd9\u4e9b\u6620\u5c04\u5747\u4e3a\u6052\u7b49\u7f6e\u6362 $\\epsilon(x)=x$\u3002\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a    \n- \u7ed9\u5b9a\u6620\u5c04 $g(x)$\uff0c\u5c06 $[l,r]$ \u4e2d\u7684\u6620\u5c04 $f_k(x)$ \u53d8\u4e3a $(f_k\\circ g)(x)=g(f_k(x))$\u3002  \n- \u7ed9\u5b9a $a_k$\uff0c\u8f93\u51fa $f_k(a_k)$\u3002\n\n\u5728\u672c\u9898\u4e2d\uff0c$g(x)=\\begin{cases}x&(x\\not= p)\\\\q&(x=p)\\end{cases}$\uff0c\u53ea\u9700\u8981\u6700\u540e\u8f93\u51fa\u6620\u5c04\u7684\u503c\u3002\n\n\u7531\u4e8e\u503c\u57df\u5927\u5c0f\u4e3a $|S|=100$\uff0c\u53ef\u4ee5\u4ee5\u7f6e\u6362\u7684\u5f62\u5f0f\u66b4\u529b\u7ef4\u62a4 $f_k\\circ g$\u3002 \n- \u590d\u5408\u7b97\u5b50 $\\circ$ \u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u53ef\u4ee5\u7528 \u7ebf\u6bb5\u6811+\u6807\u8bb0\u4e0b\u4f20 \u7684\u65b9\u6cd5\u7ef4\u62a4\uff0c  \n  \u7a7a\u95f4\u590d\u6742\u5ea6 $\\Theta(n)$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(q|S|\\log n+n\\log n)$\u3002  \n- \u76f4\u63a5\u7528\u5206\u5757\u7ef4\u62a4\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $\\Theta(n+|S|\\sqrt{n})$\uff0c  \n  \u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(q|S|\\sqrt{n}+n)$\u3002\n\n## Code\n\u8fd9\u91cc\u91c7\u7528\u7684\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\uff0c\u53ea\u7ed9\u51fa\u6838\u5fc3\u4ee3\u7801\u3002\n\n```cpp\ntypedef unsigned int word;\ntypedef unsigned char byte;\nstruct replace{//\u6620\u5c04\n\tword next[100];\n\tinline replace(){}\n\tinline replace(const replace &p){\n\t\tmemcpy(next,p.next,sizeof(next));}\n\tinline word& operator[](word id){return next[id];}\n\tinline void operator*=(const replace &p){//\u590d\u5408\u7b97\u5b50\n\t\tfor(register word i=0;i<100;++i)\n\t\t\tnext[i]=p.next[next[i]];}\n}idnt;//\u6052\u7b49\u7f6e\u6362\nstruct READ{//\u5feb\u8bfb\n\tchar c;\n\tinline READ():c(getchar()){//\u521d\u59cb\u5316\u6052\u7b49\u7f6e\u6362\n\t\tfor(register word i=0;i<100;++i) idnt[i]=i;}\n\ttemplate<typename type>\n\tinline READ& operator >>(register type& num){\n\t\twhile('0'>c||c>'9') c=getchar();\n\t\tfor(num=0;'0'<=c&&c<='9';c=getchar())\n\t\t\tnum=num*10+(c-'0');\n\t\treturn *this;\n\t}\n}cin;\ntemplate<word size>\nstruct segment_tree{//\u7ebf\u6bb5\u6811\n\tsegment_tree<(size>>1)> l,r;\n\treplace rep;\n\tbyte tag;\n\tinline segment_tree():rep(idnt){}\n\tinline void operator()(word f,word t,word x,word y){\n\t\tif(f==0&&t==(size<<1)-1){\n\t\t\tfor(register word i=0;i<100;++i)\n\t\t\t\tif(rep[i]==x) rep[i]=y;\n\t\t\treturn void(tag=1);\n\t\t}\n\t\tif(tag){\n\t\t\tl.rep*=rep,r.rep*=rep;\n\t\t\trep=idnt,tag=0,l.tag=r.tag=1;\n\t\t}\n\t\tif(f&size) r(f&~size,t&~size,x,y);\n\t\telse if((t&size)^size) l(f,t,x,y);\n\t\telse l(f,size-1,x,y),r(0,t&~size,x,y);\n\t}//\u533a\u95f4\u4e58\u6620\u5c04\n\tinline word operator()(word id,word x){//\u6c42\u6620\u5c04\u503c\n\t\treturn rep[id&size? r(id&~size,x):l(id,x)];}\n};\ntemplate<>\nstruct segment_tree<0>{//\u6a21\u677f\u7279\u5316\u5e95\u5c42\u7ed3\u70b9\n\treplace rep;\n\tbyte tag;\n\tinline segment_tree():rep(idnt){}\n\tinline void operator()(word f,word t,word x,word y){\n\t\tfor(register word i=0;i<100;++i)\n\t\t\tif(rep[i]==x) rep[i]=y;\n\t}\n\tinline word operator()(word id,word x){return rep[x];}\n};\nsegment_tree<(1<<17)> tree;\n```",
        "postTime": 1624100016,
        "uid": 104726,
        "name": "wangrx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF911G Mass Change Queries"
    },
    {
        "content": "\u770b\u5b8c\u9898\u9762 \u64cd\u4f5c\u83ab\u540d\u719f\u6089 \n\n\u4e4b\u540e\u6211\u4eec\u70b9\u5f00 [\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P4119) \n\n\u8bf6 \u600e\u4e48\u4fee\u6539\u64cd\u4f5c\u4e00\u6a21\u4e00\u6837\u554a \n\n\u4e4b\u540e\u6211\u4eec\u628a\u90a3\u9053\u9898\u7684AC\u8bb0\u5f55xjb\u6539\u6539\u5c31\u8fc7\u4e86 \n\n------------\n\n\n~~\u597d\u5427\u4e0a\u9762\u5f53\u6211\u6ca1\u8bf4~~ \n\n\u6211\u4eec\u8003\u8651\u5206\u5757 \u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6bcf\u4e2a\u6570\u7684\u503c \n\n\u5148\u60f3\u60f3\u6574\u5757\u600e\u4e48\u64cd\u4f5c \n\n$rt_{i,j}$ \u8868\u793a\u5728\u7b2ci\u4e2a\u5757\u4e2d  \u6700\u5de6\u8fb9\u503c\u4e3aj\u7684\u4e0b\u6807 \n\n\u5047\u5982\u6211\u4eec\u5728\u7b2ci\u4e2a\u5757\u4e2d \u628a\u503cx\u7684\u6570\u6539\u4e3ay \n\n\u5982\u679c\u503cy\u5728\u5757\u4e2d\u51fa\u73b0\u8fc7\n\n\u90a3\u4e48\u628a$rt_{i,x}$\u7684father\u8bbe\u4e3a$rt_{i,y}$ \n\n\u5982\u679c\u6ca1\u6709\u51fa\u73b0\u8fc7 \n\n\u5c31\u628a$rt_{i,y}$\u8d4b\u503c$rt_{i,x}$ \u5e76\u4e14\u628a$rt_{i,x}$\u7684\u503c\u8bbe\u4e3ay\n\n\u64cd\u4f5c\u540e \u663e\u7136\u5757\u5185\u6ca1\u6709\u503c\u4e3ax\u7684\u6570 \u9700\u628a$rt_{i,x}$\u8d4b\u503c\u4e3a0 \n\n\u8fb9\u89d2\u7684\u65f6\u5019 \n\n\u628a\u5757\u4e2d\u7684\u6bcf\u4e2a\u6570\u90fd\u66f4\u65b0 \u91cd\u65b0\u505a\u4e00\u904d$rt$\u6570\u7ec4 \n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u719f\u6089\u7684\u6839\u53f7 \u800c\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u505a\u5230$O(n)$ \n\n\u8fb9\u89d2\u66b4\u529b\u6709\u4e2a\u5c0f\u4f18\u5316 \uff1a \n\n\u6211\u4eec\u66f4\u65b0\u7684\u53ea\u662f\u503c\u4e3ax\u548cy\u7684\u6570 \u53ef\u4ee5\u53ea\u628a\u8fd9\u4e24\u4e2a\u5b50\u6811\u62c9\u51fa\u6765\u91cd\u6784 \u8be6\u89c1\u4ee3\u7801 \n\n```cpp\n#include<bits/stdc++.h>  \n#define rg register \n#define fp( i , x , y ) for( rg int i=(x); i<=(y); ++i ) \n#define fq( i , x , y ) for( rg int i=(y); i>=(x); --i )  \nusing namespace std ; \nconst int N = 2e5+10 , B_P = 450 , V=105 ;    \nint rt[B_P][V] , fa[N] , a[N] , n , blo ;   \nint lef[B_P] , rig[B_P] , pos[N] , sta[B_P] ;  \nint f( int x ) { return fa[x] == x ? x : fa[x] = f(fa[x]) ; } \nvoid prep( int p ) { \n  fp( i , lef[p] , rig[p] ) \n    if( !rt[p][a[i]] ) fa[i]=i , rt[p][a[i]]=i ; \n\telse fa[i]=rt[p][a[i]] ;  \n} \nvoid upd( int p , int lx , int rx , int x , int y ) {\n  int l = lef[p] , r = rig[p] , top=0 ;\n  rt[p][x] = rt[p][y] = 0 ; \n  fp( i , l , r ) { \n     a[i] = a[f(i)] ; \n     if( a[i] == x || a[i] == y ) sta[++top] = i ; \n  } \n  fp( i , lx , rx ) if( a[i] == x ) a[i] = y ; \n  fp( i , 1 , top ) fa[sta[i]] = sta[i] ; \n  fp( i , 1 , top ) \n    if( !rt[p][a[sta[i]]] ) rt[p][a[sta[i]]] = sta[i] ; \n    else fa[sta[i]] = rt[p][a[sta[i]]] ; \n} \nvoid modify( int l , int r , int x , int y ) { \n  if( x == y ) return ; \n  int lv = pos[l] , rv = pos[r] , tp , nw=0 ; \n  if( lv == rv ) { upd( lv , l , r , x , y ) ;  return ; } \n  upd( lv , l , rig[lv] , x , y ) ; \n  upd( rv , lef[rv] , r , x , y ) ; \n  fp( i , lv+1 , rv-1 ) { \n    if( !rt[i][x] ) continue ; \n    if( rt[i][y] ) fa[rt[i][x]] = rt[i][y] ; \n\telse rt[i][y] = rt[i][x] , a[rt[i][x]] = y ; \n    rt[i][x] = 0 ; \n  } \n} \nsigned main( ) { \n  ios::sync_with_stdio(false) ; \n  cin.tie(0) ; \n  int q , opt , l , r , x , y ; \n  cin >> n ;  \n  blo = sqrt(n) ; \n  fp( i , 1 , n ) cin >> a[i] , fa[i]=i ;   \n  fp( i , 1 , n ) pos[i] = (i-1)/blo+1 ; \n  fq( i , 1 , n ) lef[pos[i]] = i ; \n  fp( i , 1 , n ) rig[pos[i]] = i ; \n  fp( i , 1 , pos[n] ) prep( i ) ; \n  cin >> q ; \n  while( q -- ) {  \n    cin >> l >> r >> x >> y ; \n    modify( l , r , x , y ) ; \n  } \n  fp( i , 1 , n ) a[i] = a[f(i)] , cout << a[i] << ' ' ;  \n  cout << '\\n' ; \n  return 0 ; \n} \n```\n\n\n\u8dd1\u7684\u5f88\u4f18\u79c0 \u4e0d\u9700\u8981\u4efb\u4f55\u5361\u5e38\u5373\u53ef1.5s\u8fc7\u9898 \n\n",
        "postTime": 1605271198,
        "uid": 100114,
        "name": "hater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF911G \u3010Mass Change Queries\u3011"
    },
    {
        "content": "noip\u524d\u5199\u4e2a\u9898\u89e3.\n\n\u63d0\u4f9b\u4e24\u79cd\u505a\u6cd5.\n\n\u7b2c\u4e00\u79cd\u662f\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811, \u6bcf\u4e2a\u8282\u70b9\u4e0a\u7ef4\u62a4100\u4e2atag, \u8868\u793a\u533a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5206\u522b\u53d8\u6210\u4e86\u4ec0\u4e48.\n\n\u4e0b\u4f20\u7684\u65f6\u5019\u5947\u602a\u5730\u64cd\u4f5c\u4e00\u4e0b.\n\n```cpp\n_rep(i, 1, 100) tag[ls[h]][i] = tag[h][tag[ls[h]][i]]\n```\n\n~~\u5e94\u8be5\u6ca1\u5199\u9519~~\n\n\u4fee\u6539\u7684\u65f6\u5019\u66b4\u529bfor\u4e00\u904d\u6240\u6709\u6807\u8bb0\u628a\u7b49\u4e8ex\u7684\u90fd\u6539\u6210y.\n\n\u6700\u540e\u4e00\u6b21\u67e5\u8be2\u628a\u6240\u6709\u6807\u8bb0\u90fd\u4e0b\u4f20\u5c31\u597d.\n\n\u6bcf\u4e2a\u70b9\u5927\u69821s\u591a.\n\n~~\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86~~\n\n\u7b97\u4e86\u8fd8\u662f\u8d34\u4e0b.\n\n\u5199\u7684\u6307\u9488\u2026\u2026\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#define _rep(i, a, b) for (register int i = a; i <= b; ++i)\n#define read_int(x) void(scanf(\"%d\", &x))\nstruct Node {\n    int l, r, x, t[101];\n    Node *c[2];\n    Node(const int& l = 0, const int& r = 0) : l(l), r(r) {\n        c[0] = c[1] = 0;\n        x = 0;\n        _rep(i, 1, 100) t[i] = i;\n    }\n    int mid() {return (l + r) >> 1;}\n    void pd() {\n        if (l == r) return;\n        _rep(i, 1, 100) {\n            c[0]->t[i] = t[c[0]->t[i]];\n            c[1]->t[i] = t[c[1]->t[i]];\n        }\n        _rep(i, 1, 100) t[i] = i;\n    }\n} *root;\nvoid build(Node* o) {\n    if (o->l == o->r) return read_int(o->x);\n    int mid = o->mid();\n    build(o->c[0] = new Node(o->l, mid));\n    build(o->c[1] = new Node(mid + 1, o->r));\n}\nvoid modify(Node* o, const int& l, const int& r, const int& x, const int& y) {\n    if (l <= o->l && o->r <= r) {\n        _rep(i, 1, 100) if (o->t[i] == x) o->t[i] = y;\n        return;\n    }\n    o->pd();\n    int mid = o->mid();\n    if (l <= mid) modify(o->c[0], l, r, x, y);\n    if (mid < r) modify(o->c[1], l, r, x, y);\n}\nvoid query(Node* o) {\n    if (o->l == o->r) {\n        if (o->mid() != 1) putchar(' ');\n        printf(\"%d\", o->t[o->x]);\n        return;\n    }\n    o->pd(); query(o->c[0]); query(o->c[1]);\n}\nconst int maxa = 100;\nint n, q, l, r, x, y;\nint main() {\n    read_int(n); build(root = new Node(1, n));\n    read_int(q);\n    for (register int i = 0; i < q; ++i) {\n        read_int(l); read_int(r); read_int(x); read_int(y);\n        modify(root, l, r, x, y);\n    }\n    query(root); putchar('\\n');\n}\n```\n\n\u7b2c\u4e8c\u79cd\u505a\u6cd5\u8dd1\u7684\u6bd4\u8f83\u5feb.\n\n\u9996\u5148\u5bf9\u6bcf\u4e2a\u6570\u5b57\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811, \u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e\u662f\u4e0d\u662f\u6709\u8fd9\u4e2a\u6570(0/1).\n\n\u4fee\u6539\u7684\u65f6\u5019\u5c31\u628a\u4e00\u68f5\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u5408\u5e76\u5230\u53e6\u4e00\u68f5\u4e0a\u9762.\u7136\u540e\u628a\u5b83\u81ea\u5df1\u6e05\u7a7a.\n\n\u6700\u540e\u4e00\u6b21\u67e5\u8be2.\n\n\u5171\u8ba1\u5feb\u4e86140s\u2026\u2026\n\n\u56e0\u4e3a\u6211\u5199\u7684\u6307\u9488\u6240\u4ee5\u7ec6\u8282\u6bd4\u8f83\u591a\u5427. \u6570\u7ec4\u52a8\u5f00\u4e5f\u6bd4\u8fd9\u4e2a\u597d\u770b.\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#define _rep(i, a, b) for (register int i = a; i <= b; ++i)\n#ifndef xyxtql\nconst int ri_top = 1e7;\nchar ri[ri_top + 1], *rich = ri, *rr = ri;\n//\u522b\u95ee\u6211\u4e3a\u4ec0\u4e48\u662frich\u4e86\u2026\u2026\ninline void rd() {*(rr = ri + fread(rich = ri, 1, ri_top, stdin)) = 0;}\ninline char nch() {if (++rich >= rr) rd(); return *rich;}\ninline void read_int(int& x) {\n\twhile (!isdigit(*rich)) nch();\n\tfor (x = *rich - '0'; isdigit(nch()); x = x * 10 + *rich - '0');\n}\n#else\n#define read_int(x) void(scanf(\"%d\", &x))\n#endif\nstruct Node {\n\tint s;\n\tNode* c[2];\n\tNode();\n} *root[101], *null;\nNode::Node() {s = 0; c[0] = c[1] = null;}\nvoid add(Node* &o, const int& l, const int& r, const int& x) {\n\tif (o == null) o = new Node(); //\u987a\u624b\u52a8\u5f00\u4e86\u2026\u2026\n\t++o->s;\n\tif (l == r) return;\n\tint mid = (l + r) >> 1;\n\tif (x <= mid) add(o->c[0], l, mid, x);\n\telse add(o->c[1], mid + 1, r, x);\n} //\u5efa\u6811\nvoid merge(Node* &o, Node* &p) {\n\tif (p == null) return;\n\tif (o == null) return void((o = p, p = null));\n\to->s += p->s;\n\tmerge(o->c[0], p->c[0]);\n\tmerge(o->c[1], p->c[1]);\n\tp = null; //\u6ce8\u610f\u6e05\u7a7a\n} //\u5408\u5e76\u7ebf\u6bb5\u6811(\u8fd8\u662f\u6bd4\u8f83\u5957\u8def\u7684?)\n//\u4fee\u6539\u64cd\u4f5c\nvoid modify(Node* &o, Node* &p, const int& l, const int& r, const int& L, const int& R) {\n\tif (p == null) return;\n\tif (o == null) o = new Node(); //\u6ce8\u610f\u5f00\u70b9\n\tif (L <= l && r <= R) {\n\t\tmerge(o, p); //\u533a\u95f4\u5305\u542b\u76f4\u63a5\u5408\u5e76.\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (L <= mid) modify(o->c[0], p->c[0], l, mid, L, R);\n\tif (mid < R) modify(o->c[1], p->c[1], mid + 1, r, L, R);\n\to->s = o->c[0]->s + o->c[1]->s;\n\tp->s = p->c[0]->s + p->c[1]->s; //\u7ef4\u62a4\n}\nint a[200001];\nvoid query(Node* o, const int& l, const int& r, const int& x) {\n\tif (!o->s) return; //\u5982\u679c\u533a\u95f4\u6ca1\u6709\u6570\u76f4\u63a5return\n\tif (l == r) return void(a[l] = x); //\u6700\u540e\u4e00\u6b21\u4fee\u6539\u76f4\u63a5\u8986\u76d6\u5230a\u6570\u7ec4\n\tint mid = (l + r) >> 1;\n\tquery(o->c[0], l, mid, x);\n\tquery(o->c[1], mid + 1, r, x);\n}\nint n, q, l, r, x, y;\nint main() {\n\tnull = new Node(); null->c[0] = null->c[1] = null; //\u56e0\u4e3a\u5728\u8c03\u7528new Node()\u7684\u65f6\u5019null\u8fd8\u4e0d\u5b58\u5728\u6240\u4ee5\u5b83\u7684\u5b69\u5b50\u4e8b\u5b9e\u4e0a\u662f\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684, \u9700\u8981\u624b\u52a8\u6253\u4e00\u4e0b\n\t_rep(i, 1, 100) root[i] = null; //\u521d\u59cb\u5316\n\tread_int(n);\n\tfor (register int i = 1; i <= n; ++i) {\n\t\tint x; read_int(x); add(root[x], 1, n, i);\n\t}\n\tfor (read_int(q); q--; ) {\n\t\tread_int(l); read_int(r); read_int(x); read_int(y);\n\t\tif (x != y) modify(root[y], root[x], 1, n, l, r);\n\t}\n\t_rep(i, 1, 100) query(root[i], 1, n, i);\n\t_rep(i, 1, n) printf(\"%d%c\", a[i], \"\\n \"[i != n]);\n}\n```",
        "postTime": 1541644531,
        "uid": 22132,
        "name": "little_gift",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF911G \u3010Mass Change Queries\u3011"
    },
    {
        "content": "\u76f4\u63a5\u4e0a\u5206\u5757\u3002\n\n\u5176\u4ed6\u90e8\u5206\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u8981\u8003\u8651\u600e\u4e48\u6253\u6807\u8bb0\u548c\u5982\u4f55\u4e0b\u653e\u6807\u8bb0\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u503c\u57df $\\le 100$\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u72b6\u538b\u3002\n\n\u8bbe $f_{i,j}$ \u4e3a\u5728\u7b2c $i$ \u5757\u5185\uff0c\u54ea\u4e9b\u6570\u6700\u540e\u4f1a\u88ab\u4fee\u6539\u4e3a $j$\u3002\n\n\u7136\u540e\u82e5\u6709\u4e00\u4e2a\u4ece $x$ \u5230 $y$ \u7684\u4fee\u6539\uff0c\u6613\u5f97 $f_{i,y} = f_{i,y} + f_{i,x},f_{i,x} = 0$\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u600e\u4e48\u8fdb\u884c\u6574\u5757\u6807\u8bb0\u7684\u4e0b\u653e\u3002\n\n\u8003\u8651\u4f7f\u7528 lowbit \u6765\u89e3\u51b3\u3002\u6bcf\u6b21\u6c42\u51fa\u4e00\u4e2a $f_{i,x}$ \u7684\u6700\u4f4e\u4f4d\uff0c\u7136\u540e\u5728\u4e00\u4e2a $g_i = 2^i$ \u7684\u6570\u7ec4\u4e2d\u4e8c\u5206\u6c42\u51fa\u6b64\u6700\u4f4e\u4f4d\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002\n\n\u7136\u540e\u76f4\u63a5\u66b4\u529b\u4e0b\u653e\u6807\u8bb0\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(q\\sqrt{n}+q \\times 100 \\times \\log{100})$\uff0c\u53ef\u4ee5\u8f7b\u677e\u901a\u8fc7\u672c\u9898\u3002\n\n\u6ce8\u610f\u7279\u5224\u4fee\u6539\u65f6 $x=y$ \u7684\u60c5\u51b5\uff0c\u5426\u5219\u4f1a WA on test 114\u3002\n\n```cpp\n\n/*\n\t\u300e\u6708\u6b63\u7b11\uff0c\u5730\u6b63\u6da6\u6f6e\uff0c\u661f\u6b63\u821e\uff0c\u98ce\u6b63\u51c9\u3002\u300f\n*/\n\n/*\n\t\u300e\u957f\u591c\u4f34\u6d6a\u7834\u6653\u68a6\uff0c\u68a6\u6653\u7834\u6d6a\u4f34\u591c\u957f\u3002\u300f\n*/\n\n//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\n#include <bits/stdc++.h>\nusing namespace std;\n//#define int long long\ninline int read()\n{\n\tint sum = 0, nega = 1;\n\tchar ch = getchar();\n\twhile (ch > '9'||ch < '0')\n\t{\n\t    if (ch == '-') nega = -1;\n\t\tch = getchar();\n\t}\n\twhile (ch <= '9' && ch >= '0') sum = sum * 10 + ch - '0', ch = getchar();\n\treturn sum * nega;\n}\ninline void write(int X)\n{\n\tif(X < 0) {putchar('-'); X = -X;}\n\tif(X > 9) write(X / 10);\n\tputchar(X % 10 + '0');\n}\nconst int N = 2e5 + 9, M = 109, BL = 509;\nint n, q, a[N], B, tag[N], L[BL], R[BL], m;\n__int128 fa[BL][M], pown[M];\nint to[109];\ninline __int128 lowbit(__int128 x) {return x & (-x);}\ninline void Set(int id) \n{\n\tfor (int i = 1; i <= m; i++) to[i] = 0;\n\tfor (int i = 1; i <= m; i++) \n\t\twhile(fa[id][i]) \n\t\t{\n\t\t\t__int128 t = lowbit(fa[id][i]); fa[id][i] ^= t;\n\t\t\tint pos = lower_bound(pown + 1, pown + m + 1, t) - pown;\n\t\t\tto[pos] = i;\n\t\t}\n\tfor (int i = L[id]; i <= R[id]; i++) a[i] = to[a[i]];\n\tfor (int i = 1; i <= m; i++) fa[id][i] = pown[i];\n\treturn ;\n}\ninline void update(int l, int r, int x, int y) \n{\n\tif(tag[l] == tag[r]) \n\t{\n\t\tSet(tag[l]);\n\t\tfor (int i = l; i <= r; i++) \n\t\t\tif(a[i] == x) a[i] = y;\n\t\treturn ;\n\t}\n\tSet(tag[l]);\n\tfor (int i = l; i <= R[tag[l]]; i++) \n\t\tif(a[i] == x) a[i] = y;\n\tSet(tag[r]);\n\tfor (int i = L[tag[r]]; i <= r; i++) \n\t\tif(a[i] == x) a[i] = y;\n\tfor (int i = tag[l] + 1; i < tag[r]; i++) \n\t{\n\t\tif(x != y) fa[i][y] |= fa[i][x], fa[i][x] = 0;\n\t}\n\treturn ;\n}\nsigned main()\n{\n\tn = read();\n\tfor (int i = 1; i <= n; i++) a[i] = read(); m = 100;\n\tpown[0] = 1;\n\tfor (int i = 1; i <= m; i++) pown[i] = (pown[i - 1] << 1);\n\tB = sqrt(n); \n\tfor (int i = 1; i <= n; i++) tag[i] = (i - 1) / B + 1;\n\tfor (int i = 1; i <= tag[n]; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tfa[i][j] = pown[j];\n\tfor (int l = 1, r; l <= n; l = r + 1) \n\t{\n\t\tr = min(n, l + B - 1); \n\t\tL[tag[l]] = l; R[tag[r]] = r;\n\t//\tcout << l << \" \" << r << endl;\n\t\tif(r == n) break;\n\t}\n\tq = read();\n\tfor (int i = 1; i <= q; i++) \n\t{\n\t\tint l = read(), r = read(), x = read(), y = read();\n\t\tupdate(l, r, x, y);\n\t//\tfor (int j = 1; j <= n; j++) cout << a[j] << \" \"; cout << endl;\n\t}\n\tfor (int i = 1; i <= tag[n]; i++) Set(i);\n\tfor (int i = 1; i <= n; i++) printf(\"%d \", a[i]);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1659514684,
        "uid": 97304,
        "name": "Mophie",
        "ccfLevel": 0,
        "title": "CF911G Mass Change Queries \u9898\u89e3"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF911G)\n\n[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://chenyu-w.github.io/2022/06/26/CF911G%20Mass%20Change%20Queries/)\n\n## \u524d\u8a00\n\n\u7ebf\u6bb5\u6811\u91cc\u5f00\u4e86\u4e00\u767e\u591a\u4e2a\u61d2\u6807\u8bb0\uff0c\u76f4\u63a5\u66b4\u529b\u8279\u8fc7\u3002\n\n### \u524d\u7f6e\u829d\u58eb\n\n\u7ebf\u6bb5\u6811\n\n\n## \u5206\u6790\n\n\u9996\u5148\uff0c\u8fd9\u9898\u6700\u5f15\u4eba\u6ce8\u76ee\u7684\u5c31\u662f\u8fd9\u4e2a $[1,100]$ \u7684\u503c\u57df\uff0c\u90a3\u770b\u5230\u8fd9\u79cd\u503c\u57df\uff0c\u6211\u4eec\u8003\u8651\u5728\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a\u6570\u7ec4 $cover$\uff0c$cover[i]$ \u5c31\u8868\u793a\u6570 $i$ \u73b0\u5728\u53d8\u6210\u4e86\u4ec0\u4e48\u6570\u3002\n\n\u5bf9\u6bcf\u4e2a\u4fee\u6539\u64cd\u4f5c\uff0c\u56e0\u4e3a\u503c\u57df\u5f88\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u5019\u76f4\u63a5\u904d\u5386\u4e00\u4e0b\u8fd9\u4e2a\u8282\u70b9\u7684 $cover$ \u6570\u7ec4\uff0c\u628a\u5176\u4e2d\u7b49\u4e8e $x$ \u7684\u6539\u6210 $y$ \u5c31\u53ef\u4ee5\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\u64cd\u4f5c\uff0c\u6211\u4eec\u76f4\u63a5\u4ece\u6811\u6839\u9012\u5f52\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u628a\u53f6\u5b50\u7ed3\u70b9\u53d8\u6210\u7684\u6570\u8f93\u51fa\u5373\u53ef\u3002\n\n\u6700\u540e\u6ce8\u610f\u4e00\u4e0b\uff0c\u5728\u61d2\u6807\u8bb0\u4e0b\u4f20\u7684\u65f6\u5019\u76f4\u63a5\u628a\u5de6\u53f3\u8282\u70b9\u7684\u503c\u66b4\u529b\u8d4b\u4e3a\u7236\u8282\u70b9\u4e0a\u5bf9\u5e94\u7684\u503c\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int N = 2e5 + 10, M = 110;\nstruct node\n{\n    int l, r;\n    int val;\n    int cover[M];\n} t[N << 2];\nint a[N];\n\ninline int read()\n{\n    int x = 0, y = 1; char c = getchar();\n    while (c < '0' || c > '9') {if (c == '-') y = -1; c = getchar();}\n    while (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n    return x * y;\n}\n\ninline void build(int p, int l, int r)\n{\n    t[p].l = l;\n    t[p].r = r;\n    for (int i = 1; i <= 100; i++)\n        t[p].cover[i] = i;\n    if (l == r)\n    {\n        t[p].val = a[l];\n        return;\n    }\n    int mid = (l + r) >> 1;\n    build(p << 1, l, mid);\n    build(p << 1 | 1, mid + 1, r);\n}\n\ninline void pushdown(int p)\n{\n    node &u = t[p], &l = t[p << 1], &r = t[p << 1 | 1];\n    for (int i = 1; i <= 100; i++)\n        l.cover[i] = u.cover[l.cover[i]], r.cover[i] = u.cover[r.cover[i]];\n    for (int i = 1; i <= 100; i++)\n        u.cover[i] = i;\n}\n\ninline void modify(int p, int l, int r, int x, int y)\n{\n    if (l <= t[p].l && t[p].r <= r)\n    {\n        for (int i = 1; i <= 100; i++)\n            if (t[p].cover[i] == x)\n                t[p].cover[i] = y;\n        return;\n    }\n    pushdown(p);\n    int mid = (t[p].l + t[p].r) >> 1;\n    if (l <= mid) modify(p << 1, l, r, x, y);\n    if (r > mid) modify(p << 1 | 1, l, r, x, y);\n}\n\ninline void print(int p)\n{\n    if (t[p].l == t[p].r)\n    {\n        printf(\"%d \", t[p].cover[t[p].val]);\n        return;\n    }\n    pushdown(p);\n    print(p << 1);\n    print(p << 1 | 1);\n}\n\nint main()\n{\n    int n = read();\n    for (int i = 1; i <= n; i++)\n        a[i] = read();\n    build(1, 1, n);\n    int m = read();\n    while (m--)\n    {\n        int l = read(), r = read(), x = read(), y = read();\n        modify(1, l, r, x, y);\n    }\n    print(1);\n    return 0;\n}\n```\n\n",
        "postTime": 1656212306,
        "uid": 587248,
        "name": "wcywcywcywcy",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF911G"
    },
    {
        "content": "\u6253\u8fc7\u8fd9\u4e00\u573a\n\n$But$ $G$\u770b\u90fd\u6ca1\u770b\u5c31\u73a9\u53bb\u4e86\n\n\u7ebf\u6bb5\u6811\u91cc\u9762\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u91cc\u9762\uff0c\u6bcf\u4e2a\u6570\u5c06\u4f1a\u53d8\u6210\u54ea\u4e2a\u6570\n\n\u521d\u59cb\u65f6$tag[i]=i$\n\n\u4e0b\u4f20\u6807\u8bb0\u65f6\u5f53\u524d\u8282\u70b9\u7684$tag$\u7b49\u4e8e\u7236\u4eb2\u8282\u70b9\u7684$tag$\n\n\u4fee\u6539\u65f6\u679a\u4e3e\u4fee\u6539\n\n\u9012\u5f52\u8f93\u51fa\n```cpp\n/**\n * @Date:   2019-03-10T16:39:52+08:00\n * @Last modified time: 2019-03-10T16:39:53+08:00\n */\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <complex>\n#include <algorithm>\n#include <climits>\n#include <queue>\n#include <map>\n#include <set>\n#include <vector>\n#include <iomanip>\n#define A 1000010\n#define B 2010\n\nusing namespace std;\ntypedef long long ll;\nstruct node {\n    int l, r, w, tag[101];\n}tree[A];\nint n, q, a, b, x, y;\nvoid build(int k, int l, int r) {\n    tree[k].l = l; tree[k].r = r;\n    for (int i = 1; i <= 100; i++) tree[k].tag[i] = i;\n    if (l == r) {\n        scanf(\"%d\", &tree[k].w);\n        return;\n    }\n    int m = (l + r) >> 1;\n    build(k << 1, l, m);\n    build(k << 1 | 1, m + 1, r);\n}\nvoid down(int k) {\n    if (tree[k].l == tree[k].r) return;\n    for (int i = 1; i <= 100; i++)\n        tree[k << 1].tag[i] = tree[k].tag[tree[k << 1].tag[i]],\n        tree[k << 1 | 1].tag[i] = tree[k].tag[tree[k << 1 | 1].tag[i]];\n    for (int i = 1; i <= 100; i++) tree[k].tag[i] = i;\n}\nvoid change(int k) {\n    if (tree[k].l >= a and tree[k].r <= b) {\n        for (int i = 1; i <= 100; i++)\n            if (tree[k].tag[i] == x)\n                tree[k].tag[i] = y;\n        return;\n    }\n    down(k);\n    int m = (tree[k].l + tree[k].r) >> 1;\n    if (a <= m) change(k << 1);\n    if (b > m) change(k << 1 | 1);\n}\nvoid output(int k) {\n    if (tree[k].l == tree[k].r) {\n        int m = (tree[k].l + tree[k].r) >> 1;\n        cout << tree[k].tag[tree[k].w] << \" \";\n        return;\n    }\n    down(k); output(k << 1); output(k << 1 | 1);\n}\n\nint main(int argc, char const *argv[]) {\n\tcin >> n;\n    build(1, 1, n);\n    cin >> q;\n    while (q--) {\n        cin >> a >> b >> x >> y;\n        change(1);\n    }\n    output(1);\n    return 0;\n}\n\n```",
        "postTime": 1552209021,
        "uid": 78064,
        "name": "\u826f\u6708\u6faa\u4e8c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF911G \u3010Mass Change Queries\u3011"
    },
    {
        "content": "## \u9898\u76ee\u63cf\u8ff0\n \n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF911G)\n\n## \u601d\u8def\u7b80\u8ff0\n\n\u7b80\u5355\u9898\u3002\u89c2\u5bdf\u5230 $a$ \u7684\u503c\u57df\u5f88\u5c0f\uff0c\u8003\u8651\u5bf9\u6bcf\u4e2a\u503c\u7ef4\u62a4\u4e00\u4e2a\u5b58\u5bf9\u5e94\u4e0b\u6807\u7684\u5e73\u8861\u6811\u3002\n\n\u6bcf\u6b21\u64cd\u4f5c\u5c31\u76f8\u5f53\u4e8e\u5c06\u7b2c $x$ \u68f5\u5e73\u8861\u6811\u503c\u5728 $l$ \u5230 $r$ \u7684\u8282\u70b9\u5206\u88c2\u51fa\u6765\uff0c\u518d\u5408\u5e76\u5230\u7b2c $y$ \u8bfe\u5e73\u8861\u6811\u4e2d\u3002\u7531\u4e8e\u8981\u5408\u5e76\u7684\u4e24\u68f5\u5e73\u8861\u6811\u503c\u57df\u4e0d\u5b58\u5728\u4e25\u683c\u5927\u4e8e\u7b49\u4e8e\u8fd9\u79cd\u5173\u7cfb\uff0c\u6240\u4ee5\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n\u8fd9\u91cc\u5199\u7684\u662f FHQ treap\uff08\u4e3a\u4ec0\u4e48\u9898\u89e3\u533a\u6ca1\u4eba\u5199\u5e73\u8861\u6811\u5408\u5e76 qwq\uff0c\u611f\u89c9\u5e73\u8861\u6811\u6bd4\u7ebf\u6bb5\u6811\u66f4\u7b80\u5355\u66f4\u597d\u5199\u4e00\u70b9\u554a\uff09\u3002\n\n\u542f\u53d1\u5f0f\u5408\u5e76\u5b9e\u73b0\u7684\u597d\u597d\u50cf\u662f\u8ddf\u7ebf\u6bb5\u6811\u5408\u5e76\u4e00\u4e2a\u590d\u6742\u5ea6\u7684\u3002\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\u4ec5\u662f $O(n)$\u3002\u5199\u5e73\u8861\u6811\u7684\u597d\u5904\u5c31\u662f\u597d\u5199\u5e76\u4e14\u7a7a\u95f4\u5c0f\uff0c\u5728\u672c\u9898\u4e0d\u52a0\u4efb\u4f55\u4f18\u5316\u8dd1\u5f97\u6bd4\u5927\u591a\u6570\u7ebf\u6bb5\u6811\u505a\u6cd5\u5feb\u3002~~\u5feb\u6765\u5199 FHQ treap \u554a\u3002~~\n\n## \u4e11\u964b\u306e\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define GC c=getchar()\n#define IG isdigit(c)\n#define rep(i,l,r) for(int i(l),_##i(r);i<=_##i;++i)\n#define per(i,r,l) for(int i(r),_##i(l);i>=_##i;--i)\nconst int SZ(1<<23);\nunsigned char buf[SZ],*s,*t;\n#define getchar() (s==t&&(t=buf+fread(s=buf,1,SZ,stdin)),s==t?EOF:*s++)\ntemplate<class T=int>T frd(T x=0,char GC,bool f=1)\n{\n\tfor(;!IG;GC)f=c!='-';for(;IG;GC)x=x*10+(c^48);return f?x:-x;\n}\nusing namespace std;\nconst int V(100),N(2e5+5);\nint n,q,root[V+5],a[N+5];\nmt19937 rnd(114514);\nstruct node {int ls,rs,rk; node() {ls=rs=0,rk=rnd();} }nd[N+5];\nvoid split(int &x,int &y,int rt,int k)\n{\n\tif(!rt) return (void)(x=y=0);\n\tif(rt<=k) x=rt,split(nd[x].rs,y,nd[x].rs,k);\n\telse y=rt,split(x,nd[y].ls,nd[y].ls,k);\n}\nint merge(int x,int y)\n{\n\tif(!x||!y) return x+y; if(nd[x].rk>nd[y].rk) swap(x,y); int t1,t2;\n\tsplit(t1,t2,y,x),nd[x].ls=merge(nd[x].ls,t1),nd[x].rs=merge(nd[x].rs,t2);\n\treturn x;\n}\nvoid put(int rt,int val)\n{\n\tif(rt) a[rt]=val,put(nd[rt].ls,val),put(nd[rt].rs,val);\n}\nsigned main()\n{\n\tn=frd();\n\trep(i,1,n) {int a(frd());root[a]=merge(root[a],i);}\n\trep(q,1,frd())\n\t{\n\t\tint l(frd()),r(frd()),x(frd()),y(frd()),t1,t2,t3; \n\t\tsplit(t1,t2,root[x],l-1),split(t2,t3,t2,r);\n\t\troot[x]=merge(t1,t3),root[y]=merge(root[y],t2);\n\t}\n\trep(i,1,100) put(root[i],i);\n\trep(i,1,n) printf(\"%d \",a[i]);\n\treturn 0;\n}\n```\n\n~~\u5728\u6211\u8c03\u5b8c\u4ee3\u7801\u51c6\u5907\u4ea4\u7684\u65f6\u5019\u4e00\u4e0d\u5c0f\u5fc3\u628a\u5c40\u90e8\u7684 $t1,t2,t3$ \u624b\u6b8b\u5f00\u5230\u5168\u5c40\u4e86\uff0c\u6d6a\u8d39\u4e86 0.5h\uff08\u54ed\u6b7b\uff09\u3002~~",
        "postTime": 1661521662,
        "uid": 312306,
        "name": "LJ07",
        "ccfLevel": 0,
        "title": "[Solution]CF911G"
    },
    {
        "content": "### [\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/CF911G)\n\n## \u89e3\u9898\u601d\u8def\n\n\u53d1\u73b0\u503c\u57df\u4ec5\u6709 $[1,100]$\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u7ed9\u6bcf\u4e00\u4e2a\u503c\u5f00\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u8bb0\u5f55\u8be5\u6570\u5728\u67d0\u4e2a\u4f4d\u7f6e\u5b58\u4e0d\u5b58\u5728\u3002\n\n\uff08\u55ef\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8282\u70b9\u9664\u4e86\u5de6\u53f3\u513f\u5b50\u7f16\u53f7\u4ec0\u4e48\u90fd\u4e0d\u7528\u8bb0\u5f55\uff09\n\n\u5f53\u6211\u4eec\u8981\u5c06 $[l,r]$ \u4e2d\u7684 $x$ \u6539\u4e3a $y$ \u7684\u65f6\u5019\uff0c\u5047\u8bbe $x,y$ \u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e3a $t_x,t_y$\uff0c\u9996\u5148\u5c06 $t_x$ \u4e2d $[l,r]$ \u7684\u90e8\u5206\u5206\u88c2\u51fa\u6765\uff0c\u7136\u540e\u628a\u5b83\u5408\u5e76\u5230 $t_y$ \u4e0a\u3002\n\n\u8f93\u51fa\u7684\u65f6\u5019\u5c31\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u627e\u4e00\u627e\u6709\u54ea\u4e2a\u6570\u5b57\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u5b58\u5728\u5c31\u884c\u4e86\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,q,a[200005];\nset<int> num;\nstruct TreeNode\n{\n    TreeNode *lc,*rc;\n    TreeNode()\n        { lc=rc=nullptr; }\n}*rt[105],*zt;\ntypedef TreeNode *pNode;\nvoid insert(int p,pNode &i,int l=1,int r=n)\n{\n    if(!i)  i=new TreeNode;\n    if(l!=r)\n    {\n        int mid=(l+r)>>1;\n        if(mid>=p)  insert(p,i->lc,l,mid);\n        else    insert(p,i->rc,mid+1,r);\n    }\n}\nvoid merge(pNode &dst,pNode &src)\n{\n    if(!src)    return;\n    if(!dst)    return dst=src,src=nullptr,void();\n    merge(dst->lc,src->lc);\n    merge(dst->rc,src->rc);\n    delete src;src=nullptr;\n}\nvoid split(int lq,int rq,pNode &dst,pNode &src,int l=1,int r=n)\n{\n    if(!src)\treturn;\n    if(l>=lq && r<=rq)\n        dst=src,src=nullptr;\n    else\n    {\n        if(!dst)    dst=new TreeNode;\n        int mid=(l+r)>>1;\n        if(mid>=lq) split(lq,rq,dst->lc,src->lc,l,mid);\n        if(mid<rq)  split(lq,rq,dst->rc,src->rc,mid+1,r);\n    }\n}\nbool exist(int p,pNode &i,int l=1,int r=n)\n{\n    if(!i)  return false;\n    if(l==r)    return true;\n    int mid=(l+r)>>1;\n    return (mid>=p)?exist(p,i->lc,l,mid):exist(p,i->rc,mid+1,r);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&a[i]),insert(i,rt[a[i]]),num.insert(a[i]);\n    scanf(\"%d\",&q);\n    while(q--)\n    {\n        int l,r,x,y;\n        scanf(\"%d%d%d%d\",&l,&r,&x,&y);\n        if(x==y)    continue;\n        num.insert(y);\n        split(l,r,zt,rt[x]);\n        merge(rt[y],zt);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        int ai=0;\n        for(int j: num)\n            if(exist(i,rt[j]))\n                { ai=j;break; }\n        printf(\"%d \",ai);\n    }\n    return 0;\n}\n```\n\n## \u540e\u8bb0\n\n\u7ebf\u6bb5\u6811\u5206\u88c2\u5408\u5e76\u771f\u662f\u4e2a\u795e\u5947\u7684\u4e1c\u897f\uff0c\u672c\u9898127\u4e2a\u6d4b\u8bd5\u70b9\uff0c\u6709\u7684\u5927\u4f6c\u53ea\u7528\u8dd114s\uff0c\u800c\u6211\u8fd9\u4e2a\u83dc\u9e2155s\u8d77\u6b65\u3002\u3002qwq\n\n\u9644\u5f55\uff0c\u4e3a\u6307\u9488\u515a\u5ba3\u4f20\uff1a\n![\u6307\u9488\u597d](https://cdn.luogu.com.cn/upload/image_hosting/c65wperd.png)",
        "postTime": 1627875520,
        "uid": 279800,
        "name": "ExplodingKonjac",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011CF911G Mass Change Queries"
    },
    {
        "content": "\u5927\u5bb6\u597d\uff0c\u6211\u975e\u5e38\u559c\u6b22\u66b4\u529b\u6570\u636e\u7ed3\u6784\uff0c\u6240\u4ee5\u6211\u7528\u88f8\u7684\u5206\u5757\u8fc7\u4e86\u8fd9\u9053\u9898\u3002\n\n\u5176\u5b9e\u5b8c\u5168\u7528\u4e0d\u4e0a\u53e6\u4e00\u7bc7\u5206\u5757\u9898\u89e3\u6240\u8bf4\u7684vector\u8fd8\u6709\u542f\u53d1\u5f0f\u5408\u5e76\u4ec0\u4e48\u7684\u3002\n\n\uff08~~\u4f46\u5e94\u8be5\u662f\u80fd\u5361\u6389\u7684~~\uff09\n\n## \u3010\u601d\u8def\u3011\n\u7528\u5206\u5757\u7684\u8bdd\u601d\u8def\u5f02\u5e38\u7b80\u5355\u800c\u66b4\u529b\u3002\n\n\u9996\u5148\u5206\u5757\u662f\u4ec0\u4e48\u5e94\u8be5\u4e0d\u7528\u591a\u8bf4\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u503c\u57df\u53ea\u6709 $100$ \u3002\n\n\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5757\u6253 $100$ \u4e2a\u6807\u8bb0\uff0c\u8868\u793a **\u5f53\u524d\u5757\u4e2d\u503c\u4e3a x \u7684\u6570\u53d8\u6210\u4e86\u4ec0\u4e48\u6570** \u3002\n\n\u8003\u8651\u7ef4\u62a4\u3002\n\n\u5bf9\u4e8e\u6563\u5757\uff0c\u66b4\u529b\u91cd\u6784\u4ee5\u6e05\u9664\u6807\u8bb0\uff0c\u6b64\u65f6\u5757\u5185\u6240\u6709\u503c\u90fd\u4e3a\u771f\u5b9e\u503c\uff0c\u7136\u540e\u66b4\u529b\u626b\u63cf+\u8d4b\u503c\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6574\u5757\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u8fd9 $100$ \u4e2a\u6807\u8bb0\uff0c\u76f4\u63a5\u66b4\u529b\u626b\u63cf\u5757\u4e2d\u7b49\u4e8e $x$ \u7684 **\u6807\u8bb0** \uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u6807\u8bb0\u7684\u503c\u8d4b\u4e3a $y$ \u3002\n\n\u6700\u540e\u8f93\u51fa\u524d\u6bcf\u4e00\u4e2a\u5757\u66b4\u529b\u91cd\u6784\u4e00\u904d\u4ee5\u83b7\u53d6\u771f\u5b9e\u503c\uff0c\u5c31\u53ef\u4ee5\u8f93\u51fa\u4e86\u3002\n\n\u7136\u540e\u4f20\u7edf\u827a\u80fd\u5757\u957f\u8bbe\u4e00\u4e2a $\\sqrt{n}$ \uff08~~\u8fd9\u91cc\u6ce8\u610f\u4e86\uff0c\u8981\u8003\u7684\uff01~~\uff09\uff0c\u4ee3\u7801\u4ea4\u4e0a\u53bb\uff0c$\\text{TLE on test113}$ \u3002 $\\text{Oh no!}$ \u6211\u4eec\u7684\u7b97\u6cd5\u88ab\u5361\u4e86\uff01\n\n\u7136\u540e\u6211\u7a81\u7136\u610f\u8bc6\u5230\u5757\u957f\u4e0d\u5e94\u8be5\u8bbe $\\sqrt{n}$ \u3002\n\n\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u3002\n\n\u6211\u4eec\u8bbe\u5757\u957f\u4e3a $b$\uff0c\u503c\u57df\u4e3a $x$ \u3002\n\n\u66b4\u529b\u91cd\u6784\u4e00\u4e2a\u5757\uff0c\u8981\u626b\u63cf\u5757\u957f+\u503c\u57df\uff0c\u662f$O(b+x)$ \u7684\u3002\n\n\u5904\u7406\u6574\u5757\uff0c\u603b\u5171\u8981\u5904\u7406 $\\frac{n}{b}$ \u4e2a\u5757\uff0c\u6bcf\u4e00\u4e2a\u5757 $O(x)$ \uff0c\u603b\u5171\u662f $O(\\frac{nx}{b})$ \u7684\u3002\n\n\u6211\u4eec\u610f\u8bc6\u5230\u5757\u957f\u4e0d\u5e94\u8be5\u53d6 $\\sqrt{n}$ \uff0c\u800c\u5e94\u8be5\u53d6 $\\sqrt{nx}$ \u624d\u80fd\u505a\u5230\u590d\u6742\u5ea6\u6b63\u786e\u3002\n\n\u7136\u800c\u5b9e\u6d4b\u5757\u957f\u5f00 $2000$ \u5de6\u53f3\u8dd1\u5f97\u66f4\u5feb\u3002\u3002\u3002\n\n## \u3010\u4ee3\u7801\u3011\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <typename T>\ninline void read(T &x){\n    x = 0;int fu = 1;\n    char c = getchar();\n    while(c > 57 || c < 48){\n        if(c == 45) fu = -1;\n        c = getchar();\n    }\n    while(c <= 57 && c >= 48){\n        x = (x << 3) + (x << 1) + c - 48;\n        c = getchar();\n    }\n    x *= fu;\n}\ntemplate <typename T>\ninline void fprint(T x){\n    if(x < 0) putchar(45), x = -x;\n    if(x > 9) fprint(x / 10);\n    putchar(x % 10 + 48);\n}\ntemplate <typename T>\ninline void fprint(T x, char ch){\n    fprint(x);putchar(ch);\n}\ninline char next_char(){\n    char ch = getchar();\n    while(ch == 9 || ch == 10 || ch == 32) ch = getchar();\n    return ch;\n}\n#define MAXN 200005\n#define block 2000\n#define B MAXN / block + 5\nint n, m;\nint a[MAXN];\nint bel[MAXN], fst[B], lst[B], fa[B][105];\n\ninline void rebuild(int x){\n    for (register int i = fst[x];i <= lst[x];i ++) a[i] = fa[x][a[i]];\n    for (register int i = 1;i <= 100;i ++) fa[x][i] = i;\n}\n\nint main(){\n    read(n);\n    for (register int i = 1;i <= n;i ++) read(a[i]);\n    for (register int i = 1;i <= n;i ++){\n        bel[i] = (i - 1) / block + 1;\n        if(!fst[bel[i]]) fst[bel[i]] = i;\n        lst[bel[i]] = i;\n    }\n    for (register int i = 1;i <= bel[n];i ++)\n        for (register int j = 1;j <= 100;j ++)\n            fa[i][j] = j;\n    read(m);\n    while(m --){\n        int l, r, x, y;\n        read(l);read(r);read(x);read(y);\n        int L = bel[l], R = bel[r];\n        if(L == R){\n            rebuild(L);\n            for (register int i = l;i <= r;i ++) if(a[i] == x) a[i] = y;\n        }\n        else{\n            rebuild(L);rebuild(R);\n            for (register int i = l;i <= lst[L];i ++) if(a[i] == x) a[i] = y;\n            for (register int i = fst[R];i <= r;i ++) if(a[i] == x) a[i] = y;\n            for (register int i = L + 1;i < R;i ++){\n                for (register int j = 1;j <= 100;j ++){\n                    if(fa[i][j] == x) fa[i][j] = y;\n                }\n            }\n        }\n    }\n    for (register int i = 1;i <= bel[n];i ++) rebuild(i);\n    for (register int i = 1;i <= n;i ++) fprint(a[i], 32);\n    putchar(10);\n}\n```",
        "postTime": 1605275194,
        "uid": 66511,
        "name": "DPair",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF911G \u3010Mass Change Queries\u3011"
    },
    {
        "content": "\u8001\u5e08\u8bb2\u8fd9\u9053\u9898\u65f6\u7528\u7684\u662f\u7ebf\u6bb5\u6811\u3002\u4e00\u6bb5\u65f6\u95f4\u540e\u6211\u4ece\u96f6\u5f00\u59cb\u505a\u8fd9\u9053\u9898\u65f6\uff0c\u60f3\u4e86 1h \u591a\u7ebf\u6bb5\u6811\u7684 `push_down()` \u51fd\u6570\u600e\u4e48\u5199\u624d\u80fd\u53bb\u6389 100 \u8fd9\u4e2a\u5e38\u6570\uff0c\u7136\u540e\u624d\u53d1\u73b0\u8fd9\u9898\u53ef\u4ee5\u76f4\u63a5\u5206\u5757\u78be\u8fc7\u53bb\u3002\u81ea\u5df1\u5f88\u559c\u6b22\u7684\u6570\u636e\u7ed3\u6784\u7adf\u7136\u6ca1\u6709\u7b2c\u4e00\u65f6\u95f4\u60f3\u5230\u3002\n\n\u8fd9\u9898\u4f7f\u7528\u5206\u5757\u601d\u8def\u8fd8\u662f\u5f88\u7b80\u5355\u7684\u3002\n\n\u7531\u4e8e\u4e0d\u80fd\u66b4\u529b\u4fee\u6539\uff0c\u800c\u666e\u901a\u7684\u6570\u7ec4\u6216\u8005\u5e76\u67e5\u96c6\u53c8\u4e0d\u80fd\u7ef4\u62a4\u6570\u4e0e\u6570\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\u3002\u6240\u4ee5\u6211\u4eec\u4e3a\u4e86\u4f7f\u7528\u5ef6\u8fdf\u6807\u8bb0\u7ef4\u62a4\u6570\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u9700\u8981\u8003\u8651\u66f4\u52a0\u66b4\u529b\u7684\u5ef6\u8fdf\u6807\u8bb0\u7ef4\u62a4\u65b9\u6cd5\uff1avector \u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n\u7136\u540e\u56e0\u4e3a\u8fd9\u4e2a\u4e1c\u897f\u653e\u5230\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u4f1a\u5e38\u6570\u5de8\u5927\u4e14\u975e\u5e38\u96be\u7ef4\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5206\u5757\u3002\n\n\u8bbe\u6700\u5927\u503c\u4e3a $size$\uff0c\u5206\u5757\u5927\u5c0f\u4e3a $maxn$\uff0c\u5148\u5bf9\u4e8e\u6bcf\u4e00\u5757\u5f00 100 \u4e2a vector\uff0c\u7136\u540e\u4f7f\u7528\u4e24\u4e2a\u51fd\u6570\uff1a\n- `merge()` \u5373\u5bf9\u4e8e\u4fee\u6539 `l r x y` \u6309\u79e9\u5408\u5e76\u540c\u4e00\u5757\u4e2d\u7684 `x, y` \u5bf9\u5e94\u7684\u4e24\u4e2a vector\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u644a $O(\\log size)$\uff0c\u4e14\u5e38\u6570\u8f83\u5c0f\uff0c\u4e00\u822c\u8dd1\u4e0d\u6ee1\u3002\n- `assign()` \u5373\u5bf9\u4e8e\u4e00\u6574\u5757\uff0c\u628a vector \u7ef4\u62a4\u7684\u6570\u7684\u6620\u5c04\u5173\u7cfb\u4e0b\u4f20\u5230\u5355\u4e2a\u6570\u4e0a\uff0c\u7136\u540e\u628a vector \u6062\u590d\u539f\u72b6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(maxn + size)$\u3002\u521d\u59cb\u65f6 vector \u4e2d $v_{i, j} = \\{j\\}$\u3002\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u6bcf\u6b21\u4fee\u6539 $\\log size \\frac{n}{maxn} + maxn + size$\uff0c\u6700\u7ec8\u5bf9\u6bcf\u4e00\u5757 `assign()` \u4e00\u904d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n + \\frac{n}{maxn} \\times size)$\u3002\n\n\u7531\u4e8e\u5206\u5757\u5e38\u6570\u5c0f\uff0c\u867d\u7136\u8fd9\u9898\u4f7f\u7528\u5206\u5757\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u5927\uff0c\u4e3a $O(n \\sqrt n \\log n)$\uff0c\u4f46\u5b9e\u9645\u4e0a\u4f7f\u7528\u5206\u5757\u78be\u8fc7\u53bb\u6beb\u65e0\u538b\u529b\uff0c$maxn = \\sqrt n$ \u65f6\u7528\u4e86 2.11min\uff0c\u6700\u6162\u7684\u4e00\u4e2a\u70b9 1825ms\uff0c\u8fd8\u7b97\u6b63\u5e38\uff1b\u800c\u4f7f\u7528\u6700\u4f18\u5206\u5757\u5927\u5c0f $maxn = \\sqrt {n \\log size} + 1$ \u65f6\u53ea\u7528 1.58min\uff0c\u6700\u6162\u7684\u70b9 935ms\u3002\u603b\u7528\u65f6\u5927\u7ea6\u662f\u4e00\u822c\u7ebf\u6bb5\u6811\u7528\u65f6\u7684 3 \u500d\u3002\n\n\u5982\u679c\u5b9e\u5728\u8981\u5c06\u8fd9\u79cd\u65b9\u6cd5\u5361\u5230\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u754c\uff0c\u53ef\u4ee5\u8003\u8651\u5bf9\u8fd9\u79cd\u65b9\u6cd5\u8fdb\u884c\u66f4\u8be6\u7ec6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u52bf\u80fd\u5206\u6790\uff0c\u4ee5\u627e\u5230\u6784\u9020\u6570\u636e\u7684\u65b9\u6cd5\uff1a\n\n\u8bbe\u4e00\u5f00\u59cb\u6240\u6709\u5757\u90fd\u5904\u4e8e\u521d\u6001\uff1b\n\n- `merge()`\uff1a\u6bcf\u4e00\u8f6e\u4fee\u6539\u4e2d\uff0c\u53ef\u4ee5\u5bf9\u4e00\u5757\u6d88\u8017 $O(\\log size)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u5982\u679c\u5bf9\u521d\u6001\u4e0b\u7684\u540c\u4e00\u5757\u4f7f\u7528\u4e86 `size` \u6b21 `merge()`\uff0c\u5219\u8be5\u5757\u5230\u8fbe\u7ec8\u6001\uff0c\u4e0d\u80fd\u518d\u6d88\u8017\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u4e0d\u8fc7\u904d\u5386\u5230\u8fd9\u4e00\u5757\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u4e3a $O(1)$\uff09\u3002\u6bcf\u4e00\u8f6e\u53ef\u4ee5\u5bf9\u4efb\u610f\u5757\u4f7f\u7528 `merge()`\uff08\u5b9e\u9645\u4e3a\u8fde\u7eed\u7684\u82e5\u5e72\u5757\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u53ef\u4ee5\u4e0d\u8003\u8651\uff09\u3002\n- `assign()`\uff1a\u6bcf\u4e00\u8f6e\u4fee\u6539\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u4e00\u5757\u6062\u590d\u5230\u521d\u6001\u3002\u6bcf\u4e00\u8f6e\u53ef\u4ee5\u5bf9\u6700\u591a 2 \u5757\u4f7f\u7528 `assign()`\u3002\n\n\u6240\u4ee5\u5982\u679c\u8981\u5361\u8fd9\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u8fd9\u6837\u7684\u6570\u636e\uff1a\u5148\u4e0d\u65ad\u5bf9\u533a\u95f4 $1 n$ \u6267\u884c\u53ef\u4ee5\u5c06\u6309\u79e9\u5408\u5e76\u5361\u5230 $O(\\log n)$ \u7684\u5408\u5e76\u64cd\u4f5c\uff0c\u7136\u540e\u518d\u5bf9\u533a\u95f4 $[maxn * k + 1, maxn * k + 2 * maxn]$ \u6267\u884c\u4fee\u6539\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528 $\\frac{n}{2 \\times maxn}$ \u6b21\u64cd\u4f5c\u4f7f\u5176\u6062\u590d\u7ec8\u6001\u3002\n\n\u5f53\u7136\uff0c\u4ee5\u4e0a\u7684\u6570\u636e\u6784\u9020\u65b9\u6cd5\u4e0d\u80fd\u5728\u5b9e\u9645\u60c5\u51b5\u4e0b\u4fdd\u8bc1\u5361\u6389\u5206\u5757\u3002\u56e0\u4e3a\u5206\u5757 3s \u8dd1 $n = 200000$ \u7684\u6570\u636e\u4e00\u822c\u662f\u53ef\u4ee5\u8fc7\u7684\uff0c\u5e76\u4e14\u5206\u5757\u53ef\u4ee5\u5fae\u8c03\u5757\u5927\u5c0f\uff0c\u6216\u8005\u76f4\u63a5\u4f7f\u5757\u5927\u5c0f\u6839\u636e\u968f\u673a\u6570\u6ce2\u52a8\uff0c\u4f7f\u522b\u4eba\u6839\u672c\u6ca1\u6cd5\u5361\u3002\n\n\u8fd9\u9898\u91cc\u5f88\u591a\u5730\u65b9\u9700\u8981\u8003\u8651 `(i + 1) * maxn <= n` \u8fd9\u6837\u7684\u8fb9\u754c\u60c5\u51b5\uff0c\u6211\u8fd8\u56e0\u6b64 Wa on 114 \u4e86\u51e0\u6b21\u3002\u540c\u65f6 CF \u7684 hack \u673a\u5236\u975e\u5e38\u6bd2\u7624\uff0c\u5bfc\u81f4 $n = 1, maxn = \\sqrt {n \\log n}$ \u65f6\u4f1a RE\uff0c\u9700\u8981\u5c06 $maxn$ \u6539\u4e3a $maxn = \\sqrt {n \\log n} + 1$\uff08\u4e0d\u8fc7\u8bbe\u4e3a $maxn = \\sqrt {n \\log size} + 1$ \u65f6\u4e0d\u7528\u8003\u8651\uff09\u3002\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<vector>\nint n, q, maxn;\nint a[200005];\nstd::vector<int> v[1900][105];\ninline void merge(std::vector<int> &v1, std::vector<int> &v2) {\n\tif (v1.size() < v2.size()) std::swap(v1, v2);\n\tv1.insert(v1.end(), v2.begin(), v2.end());\n\tv2.clear();\n}\ninline void assign(int i, int x, int y, int l, int r) {\n\tstatic int vis[105] = {};\n\tif ((i + 1) * maxn <= n) {\n\t\tfor (int j = 1; j <= 100; j++) {\n\t\t\tfor (int k : v[i][j]) vis[k] = j;\n\t\t\tv[i][j].clear();\n\t\t\tv[i][j].push_back(j);\n\t\t}\n\t\tfor (int j = i * maxn; j < (i + 1) * maxn; j++) a[j] = vis[a[j]];\n\t}\n\tfor (int j = l; j < r; j++)\n\t\tif (a[j] == x) a[j] = y;\n}\nint main() {\n\tscanf(\"%d\", &n);\n\tmaxn = sqrt(n * log2(n)) + 1;\n\tfor (int i = 0; i < n; i++) scanf(\"%d\", &a[i]);\n\tfor (int i = 0; (i + 1) * maxn <= n; i++)\n\t\tfor (int j = 1; j <= 100; j++) v[i][j].push_back(j);\n\tfor (scanf(\"%d\", &q); q--;) {\n\t\tint l, r, x, y, L, R;\n\t\tscanf(\"%d%d%d%d\", &l, &r, &x, &y);\n\t\tif (x != y) {\n\t\t\tl--;\n\t\t\tL = l / maxn, R = r / maxn;\n\t\t\tif (L != R) {\n\t\t\t\tassign(L, x, y, l, (L + 1) * maxn);\n\t\t\t\tfor (int i = L + 1; i < R; i++) merge(v[i][y], v[i][x]);\n\t\t\t\tassign(R, x, y, R * maxn, r);\n\t\t\t} else assign(L, x, y, l, r);\n\t\t}\n\t}\n\tfor (int i = 0; (i + 1) * maxn <= n; i++) assign(i, 0, 0, 0, 0);\n\tfor (int i = 0; i < n; i++) printf(\"%d \", a[i]);\n}\n```\n",
        "postTime": 1586226071,
        "uid": 144740,
        "name": "\u9006\u6d41\u4e4b\u65f6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF911G \u3010Mass Change Queries\u3011"
    },
    {
        "content": "## \u601d\u8def\n\n\u89c2\u5bdf\u5230\u503c\u57df\u5f88\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u503c\u90fd\u5f00\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u6bcf\u4e2a\u6570\u662f\u5426\u662f\u8fd9\u4e2a\u503c\u3002\n\n\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4f7f\u7528\u4e86\u624b\u5199 `bitset`\u3002\n\n\u5199\u6cd5\u5927\u6982\u5f88\u50cf\u5206\u5757\u3002\u4fee\u6539\u65f6\u5148\u66b4\u529b\u4fee\u6539\u4e24\u8fb9\u6563\u7684\uff0c\u518d\u6574\u5757\u4fee\u6539\u4e2d\u95f4\u7684\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(\\frac{nq}{w})$\u3002\u8dd1\u5f97\u98de\u5feb\u3002\n\n## [code](https://codeforces.com/contest/911/submission/195328369)\n\n```cpp\n#include<stdio.h>\n#define B 6\n#define L 63\ninline char nc()\n{\n\tstatic char buf[99999],*l,*r;\n\treturn l==r&&(r=(l=buf)+fread(buf,1,99999,stdin),l==r)?EOF:*l++;\n}\ninline void read(int&x)\n{\n\tchar c=nc();for(;c<'0'||'9'<c;c=nc());\n\tfor(x=0;'0'<=c&&c<='9';x=(x<<3)+(x<<1)+(c^48),c=nc());\n}\nint n,q,a[200000];unsigned long long b[100][(200000>>B)+1];\nmain()\n{\n\tread(n);for(int i=0;i<n;read(a[i]),--a[i],b[a[i]][i>>B]|=1ull<<(i&L),++i);\n\tread(q);\n\tfor(int l,r,x,y;q--;)\n\t{\n\t\tread(l);read(r);read(x);read(y);--l;--r;--x;--y;\n\t\tif(x==y)continue;\n\t\tfor(;l<=r&&(l&L);++l)if(b[x][l>>B]>>(l&L)&1)\n\t\t\tb[y][l>>B]|=1ull<<(l&L),b[x][l>>B]^=1ull<<(l&L);\n\t\tfor(;l<=r&&(~r&L);--r)if(b[x][r>>B]>>(r&L)&1)\n\t\t\tb[y][r>>B]|=1ull<<(r&L),b[x][r>>B]^=1ull<<(r&L);\n\t\tif(l<r)for(int i=l>>B;i<=r>>B;++i)b[y][i]|=b[x][i],b[x][i]=0;\n\t}\n\tfor(int i=0;i<100;++i)for(int j=0;j<n;++j)if(b[i][j>>B]>>(j&L)&1)\n\t\ta[j]=i;\n\tfor(int i=0;i<n;printf(\"%d \",a[i++]+1));\n}\n```\n\n",
        "postTime": 1677599211,
        "uid": 90693,
        "name": "_\u2022\u0301\u3078\u2022\u0301\u256c_",
        "ccfLevel": 7,
        "title": "CF911G Mass Change Queries \u9898\u89e3"
    },
    {
        "content": "## \u9898\u610f\r\n\r\n\u7ed9\u51fa $n $ \u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570\u503c\u57df $[1,100]$\u3002\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u5c06 $[l,r] $ \u4e2d\u7b49\u4e8e $x$ \u7684\u6570\u53d8\u6210 $y$\u3002\u8f93\u51fa\u7b54\u6848\u6570\u7ec4\u3002\r\n\r\n## \u601d\u8def\r\n\r\n\u8fd9\u4e2a\u9898\u503c\u57df\u5f88\u5c0f\uff0c\u80af\u5b9a\u662f\u4e2a\u7a81\u7834\u53e3\u3002\r\n\r\n\u4e00\u4e2a\u60f3\u6cd5\u662f\u5bf9\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a tag \u6570\u7ec4\uff0c\u8868\u793a\u5f53\u524d\u533a\u95f4\u4e3a $i$ \u7684\u503c\u53d8\u6210\u4e86\u591a\u5c11\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u662f $100n\\log n$ \u7684\uff0c\u4e0d\u662f\u5f88\u884c\uff08\u4f46\u662f\u53ef\u4ee5\u8fc7\uff0c\u4f46\u662f\u8fd9\u6837\u8bf4\u7684\u8bdd\u8fd9\u9053\u9898\u7eaf\u66b4\u529b\u4e5f\u80fd\u8fc7\uff0c\u800c\u4e14\u6bd4\u8fd9\u4e48\u641e\u8fd8\u5feb\uff09\u3002\r\n\r\n\u8003\u8651\u6362\u4e2a\u601d\u8def\uff0c\u5bf9\u6bcf\u4e2a\u503c\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u6743\u503c\u662f $0/1$ \u8868\u793a\u5f53\u524d\u4f4d\u7f6e\u6709\u6ca1\u6709\u6570\uff0c\u4f46\u662f\u4fee\u6539\u4e0d\u597d\u89e3\u51b3\u3002\r\n\r\n\u6211\u4eec\u5728\u53ef\u63a5\u53d7\u590d\u6742\u5ea6\u5185\u80fd\u505a\u7684\u5c31\u662f\u627e\u5230\u4e24\u9897\u7ebf\u6bb5\u4e0a\u4fee\u6539\u533a\u95f4\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u4f46\u662f\u5c06 $x$ \u5168\u90e8\u53d8\u6210 $y$ \u4e5f\u5c31\u662f\u8981\u6e05\u7a7a $x$ \u7ebf\u6bb5\u6811\u4e0a\u5bf9\u5e94\u533a\u95f4\uff0c\u5c06\u8fd9\u4e9b\u533a\u95f4\u8f6c\u79fb\u5230\u7ebf\u6bb5\u6811 $ y$  \u4e0a\uff0c\u542c\u7740\u5c31\u5f88\u50cf\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u8003\u8651\u5bf9\u8fd9\u4e9b\u8282\u70b9\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u6bd4\u5982\u8fd9\u73a9\u610f\uff08\u7f51\u4e0a\u968f\u4fbf\u6252\u7684\uff09\uff1a\r\n\r\n![](https://pic1.zhimg.com/80/v2-08d7cb06efc8a445b26e3a22d7ddcf04_720w.webp)\r\n\r\n\u88ab\u6807\u8bb0\u7684\u51e0\u4e2a\u8282\u70b9\u5c31\u662f\u672c\u6b21\u64cd\u4f5c\u6d89\u53ca\u5230\u7684\u533a\u95f4\uff0c\u5219\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u628a $x$ \u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e0a\u7684\u6240\u6709\u8282\u70b9\u5408\u5e76\u5230 $y$ \u4e0a\uff0c\u7136\u540e\u8fd9\u91cc\u76f4\u63a5\u7ebf\u6bb5\u6811\u5408\u5e76\u5c31\u884c\u4e86\uff0c\u4ee3\u7801\u5982\u4e0b\uff08\u8fd9\u91cc\u7528\u8282\u70b9\u7684\u6709\u65e0\u4ee3\u8868\u662f\u5426\u6709\u8fd9\u4e2a\u6570\uff09\r\n\r\n```c++\r\nvoid merge(int& u,int& v)\r\n{\r\n\tif(!u||!v)return u+=v,v=0,void();\r\n\tmerge(t[u].l,t[v].l);\r\n\tmerge(t[u].r,t[v].r);\r\n\ts[++top]=v;v=0;\r\n}\r\nvoid update(int& x,int &y,int l,int r,int ql,int qr)//split x to y\r\n{\r\n\tif(!x)return;\r\n\tif(ql<=l&&r<=qr)\r\n\t{\r\n\t\tmerge(y,x);\r\n\t\treturn;\r\n\t}\r\n\tint mid=(l+r)>>1;\r\n\tif(!y)y=newnode(),t[y].l=t[y].r=0;// y \u7684\u7ed3\u6784\u5fc5\u987b\u5b8c\u6574\uff0c\u5426\u5219\u4f1a\u5408\u5e76\u5230 0 \u4e0a\r\n\tif(ql<=mid)update(t[x].l,t[y].l,l,mid,ql,qr);\r\n\tif(qr>mid)update(t[x].r,t[y].r,mid+1,r,ql,qr);\r\n}\r\n```\r\n\u8fd9\u91cc\u6ca1\u6709\u50cf\u5176\u4ed6\u9898\u89e3\u4e00\u6837\u65b0\u5f00\u4e00\u4e2a\u8282\u70b9\u94fe\u63a5\u8981\u4fee\u6539\u7684\u8282\u70b9\uff0c\u800c\u662f\u76f4\u63a5\u5728\u627e\u51fa\u533a\u95f4\u7684\u65f6\u5019\u8c03\u7528 merge \u51fd\u6570\uff0c\u8fd9\u6837\u8dd1\u7684\u66f4\u5feb\u3002\r\n\r\n\u8fd9\u91cc\u8865\u4e2a\u590d\u6742\u5ea6\u8bc1\u660e\uff1a\r\n\r\n\u590d\u6742\u5ea6\u770b\u8d77\u6765\u4e0d\u79d1\u5b66\uff0c\u4f46\u662f\u89c2\u5bdf merge \u51fd\u6570\uff0c\u6211\u4eec\u6bcf\u6b21 merge \u51fd\u6570\u7684\u8c03\u7528\u4e00\u5b9a\u4f1a\u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u7ebf\u6bb5\u6811\u6700\u591a\u4ea7\u751f $O((n+m)\\log n)$ \u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u6d88\u8017\u5728 merge \u51fd\u6570\u4e0a\u7684\u590d\u6742\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 $O((n+m)\\log n)$\uff08\u6bcf\u6b21 merge \u7684\u8c03\u7528\u662f $O(1)$ \u7684\uff09\u3002\r\n\r\n\u800c\u5176\u4ed6\u90e8\u5206\u7684\u590d\u6742\u5ea6\u663e\u7136\u4e0d\u4f1a\u8d85\u8fc7 $O((n+m)\\log n)$\uff0c \u6240\u4ee5\u590d\u6742\u5ea6\u5c31\u662f $O((n+m)\\log m)$\u3002\r\n\r\n\u8f93\u51fa\u5c31\u904d\u5386\u6240\u6709\u51fa\u73b0\u8fc7\u6743\u503c\u7684\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\r\n## \u601d\u8def2\r\n\u63d0\u4f9b\u4e00\u79cd\u4e0d\u4e00\u6837\u7684\u5206\u5757\u65b9\u5f0f\uff0c\u590d\u6742\u5ea6\u4e25\u683c $O(n\\sqrt{n})$\u3002\r\n\r\n\u5bf9\u4e8e\u6bcf\u4e2a\u5757\u7ef4\u62a4\u4e00\u4e2a list \u6570\u7ec4\u8868\u793a\u5f53\u524d\u5757\u4e2d\u6743\u503c\u4e3a $i$ \u7684\u6570\u7684\u51fa\u73b0\u4f4d\u7f6e\u3002\r\n\r\n\u8fd9\u91cc\u4fee\u6539\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6563\u5757\u5c06 $x$ \u7684 list \u4e2d\u6240\u6709\u4e0b\u6807\u5728 $[l,r]$ \u4e4b\u95f4\u7684\u52a0\u5165 $y$\uff0c\u6574\u5757\u5c06 $x$ \u7684 list \u76f4\u63a5\u52a0\u5165 $y$ \u7684 list \u4e2d\uff0c\u7531\u4e8e list \u7684\u7279\u6b8a\u6027\uff0c\u524d\u4e00\u4e2a\u64cd\u4f5c\u662f $O(\\sqrt{n}) $  \u7684\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5757\u7684 list \u6700\u591a $O(\\sqrt{n})$ \u4e2a\u6570\uff0c\u800c\u63d2\u5165\u662f $O(1) $ \u7684\uff0c\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\uff0clist \u76f4\u63a5\u52a0\u590d\u6742\u5ea6\u662f $O(1)  $ \u7684\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662f $O(n\\sqrt{n})$ \u7684\u3002\r\n\r\n\u4f46\u662f\u8fd9\u73a9\u610f\u7531\u4e8e list \u5bfb\u5740\u4e0d\u8fde\u7eed\uff0c\u5e38\u6570\u582a\u79f0\u5de8\u5927\uff0c\u6bd4\u7eaf\u66b4\u529b\u8fd8\u6162\uff08\u8fd9\u9898\u7eaf\u66b4\u529b\u53ef\u8fc7\uff09\uff0c\u8003\u573a\u4e0a\u7b97\u590d\u6742\u5ea6\u4e00\u5b9a\u8bb0\u5f97\u7b97\u4e0a list \u7684\u5e38\u6570\u3002\r\n\r\n## code\r\n\r\n\u7ebf\u6bb5\u6811\u5408\u5e76\u4e3b\u4f53\u4ee3\u7801\u5df2\u7ecf\u4e0a\u4e86\uff0c\u7136\u540e\u5176\u4ed6\u90e8\u5206\u53ef\u4ee5\u770b\u5176\u4ed6\u9898\u89e3\uff0c\u8fd9\u91cc\u5c06 list \u5206\u5757\u505a\u6cd5\u4e0a\u4e0a\u6765\u3002\r\n```cpp\r\nconst int MAXN=2e5+10;\r\nconst int B=400;\r\ninline int get(int x){return (x-1)/B+1;}\r\ninline int L(int x){return (x-1)*B+1;}\r\ninline int R(int x){return x*B;}\r\nlist<int> a[MAXN/B+20][110];\r\nint ans[MAXN];\r\nint main()\r\n{\r\n\tios::sync_with_stdio(0),cin.tie(0),cout.tie(0);\r\n\tint n;cin>>n;\r\n\tint x;\r\n\tfor(int i=1;i<=n;i++)\r\n\t{\r\n\t\tint x;cin>>x;\r\n\t\ta[get(i)][x].push_back(i);\r\n\t}\r\n\tint T;cin>>T;\r\n\tauto update=[&](list<int>& a,list<int>& b,int l,int r)\r\n\t{\r\n\t\tauto ii=a.begin();\r\n\t\twhile(ii!=a.end())\r\n\t\t{\r\n\t\t\tauto nxt=next(ii);\r\n\t\t\tif(l<=*ii&&*ii<=r) b.splice(b.begin(),a,ii);\r\n\t\t\tii=nxt;\r\n\t\t}\r\n\t};\r\n\twhile(T--)\r\n\t{\r\n\t\tint l,r,x,y;cin>>l>>r>>x>>y;\r\n\t\tif(x==y)continue;\r\n\t\tint p=get(l),q=get(r);\r\n\t\tupdate(a[p][x],a[p][y],l,r),update(a[q][x],a[q][y],l,r);\r\n\t\tfor(int i=p+1;i<q;i++) a[i][y].splice(a[i][y].begin(),move(a[i][x]));\r\n\t}\r\n\tfor(int i=1;i<=get(n);i++)\r\n\t{\r\n\t\tfor(int j=1;j<=100;j++)\r\n\t\t\tfor(auto& p:a[i][j])ans[p]=j;\r\n\t}\r\n\tfor(int i=1;i<=n;i++)cout<<ans[i]<<' ';\r\n\treturn 0;\r\n}\r\n```\r\n\r\n",
        "postTime": 1665734356,
        "uid": 571229,
        "name": "__stick",
        "ccfLevel": 7,
        "title": "CF911G"
    },
    {
        "content": "### Problem  \n\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a$\uff0c\u6bcf\u6b21\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c\uff0c\u4f7f\u5f97\u4e00\u4e2a\u533a\u95f4\u5185\u4e3a $x$ \u7684\u6570\u90fd\u53d8\u6210 $y$\u3002  \n\u95ee\u4f60\u8fd9\u4e2a\u5e8f\u5217\u6700\u540e\u4f1a\u53d8\u6210\u4ec0\u4e48\u3002  \n\n### Solution  \n\u4f60\u9996\u5148\u53d1\u73b0\uff0c\u4f60\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u6743\u503c\u5efa\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u533a\u57df\u53d8\u503c\u7684\u64cd\u4f5c\u5c31\u662f\u628a\u4e00\u9897\u7ebf\u6bb5\u6811\u7684\u82e5\u5e72\u5b50\u6811\uff08\u4ee3\u8868\u8fd9\u4e2a\u533a\u95f4\uff09\u79fb\u690d\uff08\u5408\u5e76\uff09\u5230\u53e6\u5916\u4e00\u9897\u7ebf\u6bb5\u6811\u4e0a\u3002  \n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u4e9b\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u4e2a\u6570\u662f $O(n \\log n)$\uff0c\u6240\u4ee5\u5408\u5e76\u7684\u590d\u6742\u5ea6\u662f\u6b63\u786e\u7684\u3002  \n\n\u7136\u540e\u6211\u4eec\u4f9d\u6b21\u5408\u5e76\u7ebf\u6bb5\u6811\uff0c\u8fd9\u4e2a\u9898\u5c31\u505a\u5b8c\u4e86\u3002  \n\ncode\uff1a  \n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+10;\nint n,m,a[N],b[N],L,R,x,y,root[110],cnt,l[N*80],r[N*80],tree[N*80];\nvoid update(int &rt,int left,int right,int x){\n\tif(!rt)rt=++cnt;\n\tif(left==right){tree[rt]++;return;}\n\tint mid=(left+right)/2;\n\tif(x<=mid)update(l[rt],left,mid,x);\n\telse update(r[rt],mid+1,right,x);\n}\nint merge(int rt1,int rt2,int left,int right){\n\tif(!rt1)return rt2;if(!rt2)return rt1;\n\ttree[rt1]+=tree[rt2];tree[rt2]=0;\n\tif(left==right)return rt1;\n\tint mid=(left+right)/2;\n\tl[rt1]=merge(l[rt1],l[rt2],left,mid);\n\tr[rt1]=merge(r[rt1],r[rt2],mid+1,right);\n\tl[rt2]=r[rt2]=0;return rt1;\n}\nvoid query(int &rt1,int &rt2,int left,int right,int L,int R){\n\tif(!rt2)rt2=++cnt;\n\tif(left>=L&&right<=R){\n\t\trt2=merge(rt2,rt1,left,right);rt1=0;\n\t\treturn;\n\t}int mid=(left+right)/2;\n\tif(L<=mid)query(l[rt1],l[rt2],left,mid,L,R);\n\tif(mid+1<=R)query(r[rt1],r[rt2],mid+1,right,L,R);\n}\nvoid dfs(int rt,int left,int right,int x){\n\tif(!rt)return;\n\tif(left==right&&tree[rt]==0)return;\n\tif(left==right){b[left]=x;return;}\n\tint mid=(left+right)/2;\n\tdfs(l[rt],left,mid,x);\n\tdfs(r[rt],mid+1,right,x);\n}\nint main(){\n\tios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t\tcin>>a[i],update(root[a[i]],1,n,i);\n\tcin>>m;\n\twhile(m--){\n\t\tcin>>L>>R>>x>>y;\n\t\tif(x==y)continue;\n\t\tquery(root[x],root[y],1,n,L,R);\n\t}\n\tfor(int i=1;i<=100;i++)\n\t\tdfs(root[i],1,n,i);\n\tfor(int i=1;i<=n;i++)\n\t\tcout<<b[i]<<\" \";\n\treturn 0;\n}\n```\n",
        "postTime": 1676456409,
        "uid": 213173,
        "name": "\u5c0f\u6728\u866b",
        "ccfLevel": 4,
        "title": "\u3010CF\u601d\u7ef4\u8bad\u7ec3\u3011CF911G Mass Change Queries"
    },
    {
        "content": "~~\u7adf\u7136\u6ca1\u6709\u4eba\u7528\u5206\u5757\uff01\uff01~~\n\n- \u9898\u610f\n\n\u7ed9\u5b9a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a$\uff0c$m$ \u6b64\u64cd\u4f5c\uff1a\n\n```l r x y``` \u5c06\u533a\u95f4 $[l,r]$ \u5185\u7b49\u4e8e $x$ \u7684\u6570\u8d4b\u503c\u4e3a $y$\u3002\n\n\u8f93\u51fa\u64cd\u4f5c\u540e\u7684\u5e8f\u5217\u3002\n\n- \u5206\u6790\n\n\u4e0d\u77e5\u9053\u5728\u573a\u7684\u670b\u53cb\u4eec\u6709\u6ca1\u6709\u505a\u8fc7\u6700\u521d\u5206\u5757\u7684\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u62ff\u7740\u9898\u5e94\u8be5\u662f\u968f\u624b\u5207\u4e86\uff0c~~\u7531\u4e8e\u6211\u592a\u83dc\u8c03\u4e86\u597d\u4e45~~\u3002\n\n\u6211\u4eec\u624d\u7528\u66b4\u529b\u7684\u5206\u5757\u601d\u60f3\uff0c\u66b4\u529b\u91cd\u6784\u8fb9\u89d2\u5757\uff0c\u4e2d\u95f4\u5757\u53ef\u4ee5\u5206\u4e09\u7c7b\uff1a\n\n1. \u4e0d\u5b58\u5728 $x$\uff0c\u76f4\u63a5\u8df3\u8fc7\u3002\n2. \u5b58\u5728 $x$\uff0c\u4e0d\u5b58\u5728 $y$\uff0c\u5c06 $x$ \u6620\u5c04\u5230 $y$\uff0c\u611f\u89c9\u597d\u50cf\u662f\u6700\u521d\u5206\u5757\u7684\u91cd\u70b9\uff0c\u8003\u8651\u7528 $pos_x$ \u8868\u793a\u76ee\u524d\u771f\u5b9e\u503c\u4e3a $x$ \u7684\u6570\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u64cd\u4f5c\u65f6\uff0c\u5c06 $val_{pos_x} \\leftarrow y,pos_y \\leftarrow pos_x$\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u64cd\u4f5c\u7684\u6b63\u786e\u6027\uff0c\u4e0b\u6b21\u4fee\u6539 $y$ \u4e3a $z$ \u65f6\u5c31\u80fd\u8bbf\u95ee\u5230\u6b63\u786e\u7684\u6570\u4e86\uff01\n3. \u90fd\u5b58\u5728\uff0c\u76f4\u63a5\u66b4\u529b\u5408\u5e76\uff0c\u8003\u8651\u6bcf\u6b21\u66b4\u529b\u5408\u5e76\u540e\u5757\u5185\u7684\u989c\u8272\u6570\u91cf\u51cf\u5c11 $1$\uff0c\u6240\u4ee5\u8fd9\u6837\u7684\u64cd\u4f5c\u6700\u591a $\\min(\\omega,\\sqrt n)\\sqrt n$\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\min(\\omega,\\sqrt n)n)$\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002\n\n\u597d\u4e86\uff0c\u5c31\u8fd9\u6837\u4e86\uff0c\u7b80\u4e0d\u7b80\u5355\uff1f\n\n- code\n\n```cpp\n#include <bits/stdc++.h>\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2\")\nusing namespace std;\n\nnamespace IO{\n\tchar ibuf[(1 << 20) + 1], *iS, *iT;\n\t#if ONLINE_JUDGE\n\t#define gh() (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, (1 << 20) + 1, stdin), (iS == iT ? EOF : *iS++) : *iS++)\n \t#else\n\t#define gh() getchar()\n\t#endif\n\t#define reg register\n\tinline long long read () {\n\t\treg char ch = gh();\n\t\treg long long x = 0;\n\t\treg char t = 0;\n\t\twhile (ch < '0' || ch > '9')   t |= ch == '-', ch = gh();\n\t\twhile (ch >= '0' && ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gh();\n\t\treturn t ? -x : x;\n\t}\n\tinline void write(long long x) {\n\t\tif (x < 0) {\n\t\t\tx = ~(x - 1);\n\t\t\tputchar('-');\n\t\t}\n\t\tif (x > 9)\n\t\t\twrite(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\n\nusing IO::read;\nusing IO::write;\n\nconst int maxn(2e5 + 500), maxk(450);\nint n, m, sqn, len, id[maxn], a[maxn], ls[maxk], rs[maxk], cnt[maxk][105];\n\nstruct DSU {\n\tint now, pos[105], val[105];\n\tvoid init () {\n\t\tfor (int i = 1; i <= 100; i++) pos[i] = val[i] = i, cnt[now][i] = 0;\n\t\tfor (int i = ls[now]; i <= rs[now]; i++) cnt[now][a[i]]++;\n\t}\n\tvoid mdy (int x, int y) {\n\t\tval[pos[x]] = y;\n\t\tpos[y] = pos[x];\n\t\tpos[x] = 0;\n\t}\n\tinline int operator [] (const int &rhs) {\n\t\treturn val[rhs];\n\t}\n} b[maxk];\n\nvoid mdy (int l, int r, int x, int y) {\n\tint now = id[r];\n\tfor (int i = ls[now]; i <= rs[now]; i++) a[i] = b[now][a[i]];\n\tfor (int i = l; i <= r; i++) if (a[i] == x) a[i] = y;\n\tb[now].init();\n}\n\nint main () {\n\tn = read(), sqn = sqrt(n);\n\tfor (int i = 1; i <= n; i++) a[i] = read();\n\tfor (int i = 1; i <= n; i++) id[i] = (i - 1) / sqn + 1; len = id[n];\n\tfor (int i = 1; i <= len; i++) ls[i] = rs[i - 1] + 1, rs[i] = i * sqn, b[i].now = i, b[i].init(); rs[len] = n;\n\tm = read();\n\twhile (m--) {\n\t\tint l = read(), r = read(), x = read(), y = read(), ll = id[l], rr = id[r];\n\t\tif (x == y) continue;\n\t\tif (ll == rr) {\n\t\t\tif (cnt[ll][x]) mdy(l, r, x, y);\n\t\t\tcontinue;\n\t\t}\n\t\tif (cnt[ll][x]) mdy(l, rs[ll], x, y);\n\t\tif (cnt[rr][x]) mdy(ls[rr], r, x, y);\n\t\tfor (int i = ll + 1; i < rr; i++) {\n\t\t\tif (!cnt[i][x]) continue;\n\t\t\tif (cnt[i][y]) mdy(ls[i], rs[i], x, y);\n\t\t\telse b[i].mdy(x, y);\n\t\t\tcnt[i][y] += cnt[i][x], cnt[i][x] = 0; \n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) a[i] = b[id[i]][a[i]];\n\tfor (int i = 1; i <= n; i++) write(a[i]), putchar(' ');\n}\n```",
        "postTime": 1668414021,
        "uid": 317495,
        "name": "JWRuixi",
        "ccfLevel": 7,
        "title": "Solution CF911G Mass Change Queries"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u533a\u95f4\u5185\u90e8\u5206\u70b9\u4fee\u6539\uff0c\u6700\u7ec8\u72b6\u6001\u67e5\u8be2\u7684\u9898\u76ee\uff0c\u662f\u4e00\u9053\u4e0d\u9519\u7684\u6570\u636e\u7ed3\u6784\u9898\u76ee\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u7528\u5206\u5757\u6765\u8279\uff0c\u867d\u7136\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u597d\u50cf\u66f4\u80fd\u8dd1\u4e00\u70b9\uff0c\u4f46\u662f\u6bd5\u7adf\u6211\u592a\u83dc\u4e86 \u4e0d\u4f1a\u5199\u3002\n\n\u8fd9\u9053\u9898\u7684\u6570\u636e\u8303\u56f4\u662f$2e5$\uff0c\u5206\u5757\u6839\u53f7\u590d\u6742\u5ea6\u5e94\u8be5\u8fd8\u662f\u53ef\u4ee5\u8279\u8fc7\u53bb\u7684\u3002\n\n\u7531\u4e8e\u6570\u636e\u7684\u503c\u57df\u53ea\u6709$100$\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5728\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u5927\u5c0f\u4e3a$100$\u7684\u6876\u5373\u53ef\uff0c\u7136\u540e\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u7684\u53d8\u5316\u60c5\u51b5\u3002\n\n\u6211\u4eec\u8003\u8651\u4f7f\u7528\u5206\u5757\uff0c\u66b4\u529b\u4fee\u6539\uff0c\u7528\u4e00\u4e2a\u5927\u5c0f\u4e3a$n\u00d7100$\u7684$mp$\u6876\u6570\u7ec4\u6807\u8bb0$1\\to 100$\u6bcf\u4e2a\u6570\u7684\u6620\u5c04\u60c5\u51b5\u4f5c\u4e3a\u61d2\u6807\u8bb0\uff0c\u5728\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u5019\u4e0b\u4f20\u6807\u8bb0\uff0c\u7136\u540e\u6700\u540e\u628a\u6807\u8bb0\u5168\u90e8\u4e0b\u4f20\uff0c\u8f93\u51fa\u6700\u540e\u7684$a$\u6570\u7ec4\u5373\u53ef\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define fint register int\n#define H 1001\n#define N 500001\nusing namespace std;\nstruct node\n{\n\tint siz;\n\tint tot;\n}\nblock;\nint a[N],L[N],R[N],mp[N][105],bel[N],n,vis[N];\ninline int read();\nvoid pushdown(int x);\ninline void build(int l,int r,int now);\nvoid modify(int l,int r,int x,int y);\nint main()\n{\n\tn=read();\n\tfor(fint i=1;i<=n;i++)\n\ta[i]=read();\n\tblock.siz=2000;//\u542c\u8bf4\u8fd9\u6837\u8dd1\u7684\u5feb\n\tblock.tot=n/block.siz;\n\tif(n%block.siz)\n\tblock.tot++;\n\tfor(fint i=1;i<=n;i++)\n\tbel[i]=(i-1)/block.siz+1;\n\tbuild(1,block.siz,1);\n\tfor(fint i=1;i<=block.tot;i++)\n\tfor(fint j=1;j<=100;j++)\n\tmp[i][j]=j;\n\tint m;\n\tm=read();\n\tfor(fint i=1;i<=m;i++)\n\t{\n\t\tint ll,rr,x,y;\n\t\tll=read(),rr=read(),x=read(),y=read();\n\t\tmodify(ll,rr,x,y);\n\t}\n\tfor(fint i=1;i<=n;i++)\n\tif(!vis[bel[i]])\n\tpushdown(i),vis[bel[i]]=1;\n\tfor(fint i=1;i<=n;i++)\n\tcout<<a[i]<<\" \";\n\treturn 0;\n}\n\ninline int read()\n{\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')\n\t{\n\t\tif(ch=='-')\n\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn x*f;\n}\n\nvoid build(int l,int r,int now)\n{\n\tif(now==block.tot)\n\t{\n\t\tL[now]=l,R[now]=n;\n\t\treturn ;\n\t}\n\tL[now]=l,R[now]=r;\n\tbuild(r+1,r+block.siz,now+1);\n\treturn ;\n}\n\nvoid modify(int l,int r,int x,int y)\n{\n\tif(bel[l]==bel[r])\n\t{\n\t\tpushdown(l);\n\t\tfor(fint i=l;i<=r;i++)\n\t\tif(a[i]==x)\n\t\ta[i]=y;\n\t\treturn ;\n\t}\n\tpushdown(l),pushdown(r);\n\tfor(fint i=l;i<=R[bel[l]];i++)\n\tif(a[i]==x)\n\ta[i]=y;\n\tfor(fint i=L[bel[r]];i<=r;i++)\n\tif(a[i]==x)\n\ta[i]=y;\n\tfor(fint i=bel[l]+1;i<=bel[r]-1;i++)\n\tfor(fint j=1;j<=100;j++)\n\tif(mp[i][j]==x)\n\tmp[i][j]=y;\n\treturn ;\n}\n\ninline void pushdown(int x)\n{\n\tfor(fint i=L[bel[x]];i<=R[bel[x]];i++)\n\ta[i]=mp[bel[x]][a[i]];\n\tfor(fint i=1;i<=100;i++)\n\tmp[bel[x]][i]=i;\n\treturn ;\n}",
        "postTime": 1608471194,
        "uid": 244059,
        "name": "king_xbz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF911G \u3010Mass Change Queries\u3011"
    }
]