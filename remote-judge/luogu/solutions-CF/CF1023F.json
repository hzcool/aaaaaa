[
    {
        "content": "~~\u6076\u81ed\u6811\u94fe\u5256\u5206\u6bc1\u6211\u9752\u6625\u8017\u6211\u94b1\u8d22\u4e0d\u8bb2\u6b66\u5fb7\u3002~~\n\n### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa $k$ \u6761\u8fb9\u6743\u672a\u5b9a\u7684\u8fb9\uff0c\u4ee5\u53ca $m$ \u6761\u8fb9\u6743\u5df2\u5b9a\u7684\u8fb9\uff0c\u8ba9\u4f60\u6c42\u8fd9\u6837\u4e00\u4e2a\u4e1c\u897f\uff1a\n\n1. \u6709\u4e00\u9897\u6700\u5c0f\u751f\u6210\u6811\u5305\u542b\u8fd9 $k$ \u6761\u8fb9\uff1b\n\n1. \u8fd9 $k$ \u6761\u8fb9\u7684\u6743\u503c\u548c\u6700\u5927\u3002\n\n\u6700\u540e\u8f93\u51fa $k$ \u6761\u8fb9\u7684\u6743\u503c\u548c\u3002\n\n\u65e2\u7136\u8981\u6c42 $k$ \u6761\u8fb9\u90fd\u5728\u6700\u5c0f\u751f\u6210\u6811\u5185\uff0c\u90a3\u6211\u4eec\u4e0d\u59a8\u5148\u628a\u8fd9 k \u6761\u8fb9\u52a0\u5165\u4e00\u68f5\u6811\u5185\u3002\n\n\u7136\u540e\u6211\u4eec\u5bf9 $m$ \u6761\u8fb9\u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u628a\u80fd\u52a0\u5165\u751f\u6210\u6811\u5185\u7684\u8fb9\u90fd\u52a0\u8fdb\u53bb\u3002\uff08\u5176\u5b9e\u5c31\u662f\u8865\u5b8c\u8fd9\u9897\u751f\u6210\u6811\uff09\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u5269\u4e0b\u6ca1\u52a0\u7684\u8fb9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/o1iotapi.png)\n\n\u5982\u4e0a\u56fe\uff0c\u7ea2\u8272\u4e8c\u8fb9\u662f $k$ \u6761\u8fb9\u4e2d\u7684\u4e24\u6761\uff0c\u84dd\u8272\u662f\u5df2\u52a0\u5165\u7684\u8fb9\uff0c\u800c\u9ed1\u8fb9\u5219\u662f\uff0c\u672a\u52a0\u5165\u7684\u4e00\u6761\u9ed1\u8fb9\u3002\n\n\u8003\u8651\u8fd9\u6761\u8fb9\u4f1a\u5bf9\u8fb9 $AC$ \u548c $AB$ \u9020\u6210\u4ec0\u4e48\u5f71\u54cd\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u4f18\u5148\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u4e86\u4e00\u904d\uff0c\u6240\u4ee5\u53ea\u8981\u7ea2\u8fb9\u4e2d\u7684\u6700\u5927\u503c $\\le$ $f_{w_i}$ \uff0c\u90a3\u4e48\u84dd\u8fb9\u5c31\u5fc5\u5b9a\u53ef\u4ee5\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u3002\n\n\u90a3\u4e48\u6bcf\u4e00\u6761\u9ed1\u8fb9\u5176\u5b9e\u5c31\u53d8\u6210\u4e86\u5bf9\u8def\u5f84\u7684\u9650\u5236\u3002\n\n\u5373 $f_{a_i}$ \u5230 $f_{b_i}$ \u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u7684\u6743\u503c\u4e0d\u5f97\u8d85\u8fc7 $f_{w_i}$ \uff0c\u8fd9\u662f\u4e00\u4e2a\u5728\u6811\u4e0a\u8fdb\u884c\u533a\u95f4\u8986\u76d6\u7684\u6a21\u677f\uff0c\u53ef\u4ee5\u7528\u6811\u5256~~\u8f7b\u677e~~\u89e3\u51b3\u3002\n\n\u8fd8\u6709\u4ebf\u4e9b\u5c0f\u95ee\u9898\uff1a\n\n1. \u521d\u59cb\u7684\u7ea2\u8fb9\u8981\u8bbe\u6210\u4e00\u4e2a\u6700\u5927\u503c\uff0c\u8fd9\u6837\u5c31\u6613\u4e8e\u8fdb\u884c\u5224\u65ad\u662f\u5426\u6709\u89e3\uff1b\n\n1. \u84dd\u8fb9\u7684\u6743\u503c\u8bbe\u4e3a $0$ \uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u5f71\u54cd\u5230\u6700\u5927\u503c\u7684\u66f4\u65b0\u3002\n\n\u4ee5\u4e0a\u3002\n\n### Code\n\n```cpp\n#include <stdio.h>\n#include <algorithm>\n#include <string.h>\n#define N 500005\nusing namespace std;\nconst int INF=1e9+1;\nint n, m, k, ans[N];\nstruct Edge{\n\tint to, nxt, w;\n}d[N*2];\nint tot, h[N];\nvoid add(int x, int y, int w){\n\td[++tot].to=y, d[tot].nxt=h[x];\n\td[tot].w=w, h[x]=tot;\n}\nstruct Tree_chain_partition{\n\tint val[N], son[N], sum[N], dep[N], fa[N];\n\tint top[N], toseg[N], back[N], cnt;\n\tvoid debug(){\n\t\tfor(int i=1; i<=n; i++) \n\t\t\tprintf(\"%d: %d %d %d %d %d %d %d %d\\n\", i, val[i], son[i], sum[i], dep[i], fa[i], top[i], toseg[i], back[i]);\n\t\tfor(int i=1; i<=n; i++)\n\t\t\tprintf(\"--%d %d\\n\", mx[i], tag[i]);\n\t}\n\tvoid dfs_1(int pos, int f){\n\t\tsum[pos]=1, dep[pos]=dep[f]+1, fa[pos]=f;\n\t\tfor(int i=h[pos]; i; i=d[i].nxt){\n\t\t\tint to=d[i].to;\n\t\t\tif(to==f) continue;\n\t\t\tval[to]=d[i].w;\n\t\t\tdfs_1(to, pos);\n\t\t\tsum[pos]+=sum[to];\n\t\t\tif(sum[son[pos]]<sum[to]) son[pos]=to; \n\t\t}\n\t}\n\tvoid dfs_2(int pos, int root){\n\t\ttoseg[pos]=++cnt, top[pos]=root;\n\t\tback[cnt]=pos;\n\t\tif(son[pos]) dfs_2(son[pos], root);\n\t\tfor(int i=h[pos]; i; i=d[i].nxt){\n\t\t\tint to=d[i].to;\n\t\t\tif(top[to]) continue;\n\t\t\tdfs_2(to, to);\n\t\t}\n\t}\n\t#define ls k<<1\n\t#define rs k<<1|1\n\t#define mid (l+r>>1)\n\tint mx[N*4], tag[N*4];\n\tvoid pushup(int k){mx[k]=max(mx[ls], mx[rs]);}\n\tvoid upd(int k, int w){mx[k]=w, tag[k]=w;}\n\tvoid pushdown(int k){\n\t\tif(!tag[k]) return ;\n\t\tif(mx[ls]>=tag[k]) upd(ls, tag[k]);\n\t\tif(mx[rs]>=tag[k]) upd(rs, tag[k]);\n\t\ttag[k]=0;\n\t\treturn ;\n\t}\n\tvoid build(int k, int l, int r){\n\t\tif(l==r){mx[k]=val[back[l&r]];return ;}\n\t\tbuild(ls, l, mid);build(rs, mid+1, r);\n\t\tpushup(k);\n\t}\n\tvoid add(int k, int l, int r, int x, int y, int w){\n\t\tif(w>mx[k]) return ;\n\t\tif(x<=l&&r<=y) return upd(k, w);pushdown(k);\n\t\tif(x<=mid) add(ls, l, mid, x, y, w);\n\t\tif(mid<y) add(rs, mid+1, r, x, y, w);\n\t\treturn pushup(k);\n\t}\n\tint LCA(int a, int b){\n\t\twhile(top[a]!=top[b]){\n\t\t\tif(dep[top[a]]<dep[top[b]]) swap(a, b);\n\t\t\ta=fa[top[a]];\n\t\t}\n\t\tif(dep[a]>dep[b]) return b;\n\t\treturn a;\n\t}\n\tvoid change(int a, int b, int w){\n\t\twhile(top[a]!=top[b]){\n\t\t\tif(dep[top[a]]<dep[top[b]]) swap(a, b);\n\t\t\tadd(1, 1, n, toseg[top[a]], toseg[a], w);\n\t\t\ta=fa[top[a]];\n\t\t}\n\t\tif(a==b) return;\n\t\tif(dep[a]<dep[b]) swap(a, b);\n\t\tadd(1, 1, n, toseg[b]+1, toseg[a], w);\n\t}\n\tvoid putall(int k, int l, int r){\n\t\tif(l==r){\n\t\t\tans[back[l&r]]=mx[k];\n\t\t\treturn ;\n\t\t}pushdown(k);\n\t\tputall(ls, l, mid);putall(rs, mid+1, r);\n\t}\n}TCP;\nstruct F{\n\tint a, b, w;\n\tbool in;\n\tbool operator < (const F &A) const{\n\t\treturn w<A.w;\n\t}\n}f[N], g[N];\nint fs[N];\nint find(int x){\n\tif(x==fs[x]) return x;\n\treturn fs[x]=find(fs[x]);\n}\nlong long ret=0;\nint main(){\n\tscanf(\"%d%d%d\", &n, &k, &m);\n\tfor(int i=1; i<=n; i++) fs[i]=i;\n\tfor(int i=1; i<=k; i++){\n\t\tscanf(\"%d%d\", &g[i].a, &g[i].b);\n\t\tadd(g[i].a, g[i].b, INF), add(g[i].b, g[i].a, INF);\n\t\tfs[find(g[i].a)]=find(g[i].b);\n\t}\n\tfor(int i=1; i<=m; i++)\n\t\tscanf(\"%d%d%d\", &f[i].a, &f[i].b, &f[i].w), f[i].in=false;\n\tsort(f+1, f+m+1);\n\tfor(int i=1; i<=m; i++){\n\t\tint fa=find(f[i].a), fb=find(f[i].b);\n\t\tif(fa==fb) continue;\n\t\tf[i].in=true;\n\t\tfs[fa]=fb;\n\t\tadd(f[i].a, f[i].b, 0);\n\t\tadd(f[i].b, f[i].a, 0);\n\t}\n\tTCP.dfs_1(1, 0);\n\tTCP.dfs_2(1, 1);TCP.top[1]=TCP.fa[1]=1;\n\tTCP.build(1, 1, n);\n\tfor(int i=1; i<=m; i++)\n\t\tif(!f[i].in){\n\t\t\tint lca=TCP.LCA(f[i].a, f[i].b);\n\t\t\tTCP.change(f[i].a, lca, f[i].w);\n\t\t\tTCP.change(f[i].b, lca, f[i].w);\n\t\t}\n\tTCP.putall(1, 1, n);\n\tfor(int i=1; i<=n; i++){\n\t\tif(ans[i]==INF) return printf(\"-1\")*0;\n\t\tret+=(long long)ans[i];\n\t}\n\tprintf(\"%lld\\n\", ret);\n\treturn 0;\n}\n```\n",
        "postTime": 1616817696,
        "uid": 341102,
        "name": "ReKoJ",
        "ccfLevel": 0,
        "title": "CF1023F Mobile Phone Network"
    },
    {
        "content": "## \u9898\u610f\n\u7ed9\u4f60 $m_1$ \u6761\u767d\u8fb9\uff0c$m_2$ \u6761\u9ed1\u8fb9\uff0c\u8981\u6c42\u6784\u9020\u4e00\u9897\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8981\u6c42\u5305\u542b\u6240\u6709\u767d\u8fb9\uff0c\u6c42\u6700\u5927\u53ef\u80fd\u7684\u767d\u8fb9\u4e4b\u548c\u3002[qwq](https://www.luogu.com.cn/blog/xzc/solution-cf1023f)\n## \u5206\u6790\n\u5982\u679c\u6211\u4eec\u7528\u5df2\u77e5\u7684\u9ed1\u8fb9\u5efa\u4e00\u9897\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u5728\u52a0\u5165\u767d\u8fb9\u65f6\uff0c\u6811\u7684\u7ed3\u6784\u53ef\u80fd\u4f1a\u53d8\u5316\uff08 $LCT$ \u7b49\u52a8\u6001\u6811\u53ef\u80fd\u53ef\u4ee5\u505a\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e00\u5f00\u59cb\u5c31\u628a\u767d\u8fb9\u7684\u6743\u503c\u4f5c\u4e3a $0$ \u786e\u5b9a\u4e00\u9897\u6700\u7ec8\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n- \u90a3\u4e48\u8003\u8651\u767d\u8fb9\u7684\u6700\u5927\u503c\u3002\u5f53\u4e14\u4ec5\u5f53\u4e00\u6761\u4e0d\u5728 $MST$ \u4e2d\u7684\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u7684\u8def\u5f84\u4e2d\u8fb9\u7684\u6743\u503c\u5927\u4e8e\u5b83\u7684\u6743\u503c\u65f6\u662f\u53ef\u4ee5\u66ff\u6362\u7684\u3002\n\n- \u90a3\u4e48\u5982\u4f55\u7ef4\u62a4\u4e00\u9897\u6811\u4e0a\u7684\u8def\u5f84\uff0c\u6811\u94fe\u5256\u5206\uff0c $LCT$ \u3002\u90fd\u662f\u4e0d\u9519\u7684\u9009\u62e9\u3002\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log^2n /n \\log n)$ \u3002\n\n- \u7136\u800c\u8fd9\u9053\u9898\u53ea\u7ed9\u4e86 $256M$ \u7684\u7a7a\u95f4\u6240\u4ee5\uff0c\u8981\u6709\u6781\u5f3a\u7684\u5361\u7a7a\u95f4\u80fd\u529b\u624d\u8fc7\u5f97\u4e86\uff0c\u53ef\u89c1\u53e6\u4e00\u7bc7\u9898\u89e3\u3002\u800c\u6211\u5f88\u53ef\u60dc\u6ca1\u6709\u5361\u8fc7\u3002\n\n- \u8003\u8651\u4f18\u5316\u7a7a\u95f4\u3002\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u6bcf\u4e00\u6761\u767d\u8fb9\u5176\u5b9e\u6211\u4eec\u6700\u591a\u4e5f\u53ea\u4f1a\u8986\u76d6\u4e00\u6b21\u3002\u6240\u4ee5\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u4e0d\u4ec5\u4f18\u5316\u4e86\u7a7a\u95f4\uff0c\u4e5f\u4f18\u5316\u4e86\u65f6\u95f4\uff0c\u4e3a $O(n\\alpha(n))$\u3002\n\n## \u4ee3\u7801\n\n\u7a7a\u95f4\u8fc7\u4e0d\u4e86\u7684\u6811\u5256\uff0c\u5927\u5bb6\u53ef\u4ee5\u53c2\u7167\u4e00\u4e0b\uff0c\u53ef\u80fd\u662f\u6211\u5b9e\u73b0\u6709\u70b9\u95ee\u9898\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read()\n{\n\tint x = 0,f = 0;char ch = getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=1;ch=getchar();}\n\twhile(isdigit(ch)){x=x*10+ch-'0';ch=getchar();}\n\treturn f?-x:x;\n}\nconst int N = 501000;\nint n,k,m1,m2;\nstruct dsu_edge{int x,y,w;}dsu_e[N<<1];\nint dsu_fa[N],mst_e[N],mst_top;\nbool dsu_cmp(dsu_edge a,dsu_edge b)\n{\n\treturn a.w < b.w;\n}\nint dsu_find(int x)\n{\n\treturn x==dsu_fa[x]?x:dsu_fa[x]=dsu_find(dsu_fa[x]);\n}\nvoid solve_dsu()\n{\n\tfor(int i = 1;i <= m1+m2;i++)\n\t{\n\t\tint a = dsu_e[i].x,b = dsu_e[i].y;\n\t\ta = dsu_find(a);\n\t\tb = dsu_find(b);\n\t\tif(a == b) continue;\n\t\tmst_e[i] = 1;\n\t\tdsu_fa[a] = b;\n\t}\n}\nstruct segment_tree{\n\tint down,up;\n}t[N<<1];\nvector<int> G[N<<1],W[N<<1];\nint top[N],son[N],si[N],d[N],id[N],f[N],map_e[N],seg_val[N],val_node[N],cnt_id = 0;\nvoid build(int x,int l,int r)\n{\n//\tcout<<\"l:: \"<<l<<\" \"<<\" r:: \"<<r<<endl;\n\tif(l==r) {\n\t\tif(l==1) return;\n//\t\tcout<<\"segval   \"<<seg_val[l]<<endl;\n\t\tt[x].up = (seg_val[l] == 0);\n\t\tt[x].down = 0;\n\t\treturn;\n\t}\n\tint mid = l+r>>1;\n\tbuild(x<<1,l,mid);\n\tbuild(x<<1|1,mid+1,r);\n\tt[x].up = t[x<<1|1].up + t[x<<1].up;\n//\tcout<<\"t[x].up:: \"<<t[x].up<<endl;\n}\nvoid dfs_dep(int x,int fa,int dep)\n{\n\td[x] = dep;f[x] = fa;si[x] = 1;\n\t//cout<<\"x:: \"<<x<<\" fa:: \"<<fa<<endl;\n\tfor(int i = 0;i < G[x].size();i++)\n\t{\n\t\tint y = G[x].at(i);\n\t\tif(y == fa) continue;\n\t\tval_node[y] = W[x].at(i);\n\t\tdfs_dep(y,x,dep+1);\n\t\tsi[x] += si[y];\n\t\tif(si[y] > si[son[x]])\n\t\t{\n\t\t\tson[x] = y;\n\t\t}\n\t}\n}\nvoid dfs_top(int x,int fa,int Top)\n{\n\t//cout<<\"x:: \"<<x<<\"  Top:: \"<<Top<<endl;\n\tid[x] = ++cnt_id;seg_val[cnt_id] = val_node[x];top[x] = Top;\n\tif(son[x]) dfs_top(son[x],x,Top);\n\tfor(int i = 0;i < G[x].size();i++)\n\t{\n\t\tint y = G[x].at(i);\n\t\tif(y == son[x] || y == fa) continue;\n\t\tdfs_top(y,x,y);\n\t}\n}\nvoid solve_mst()\n{\n\tfor(int i = 1;i <= m1+m2;i++)\n\t{\n\t\tif(mst_e[i])\n\t\t{\n\t\t\t//cout<<\"mst_e[i]:: \"<<i<<endl;\n\t\t\tdsu_edge a = dsu_e[i];\n\t\t\tG[a.x].push_back(a.y);\n\t\t\tG[a.y].push_back(a.x);\n\t\t\tW[a.x].push_back(a.w);\n\t\t\tW[a.y].push_back(a.w);\n\t\t}\n\t}\n\tdfs_dep(1,0,1);\n\tdfs_top(1,0,1);\n\tbuild(1,1,n);\n}\nvoid update(int x)\n{\n\tif(t[x].down)\n\t{\n\t\tt[x<<1|1].down = t[x<<1].down = 1;\n\t\tt[x<<1|1].up = t[x<<1].up = 0;\n\t\tt[x].down = 0;\n\t}\n\treturn;\n}\nvoid change(int x,int L,int R,int l,int r)\n{\n\tif(r < L || l > R) return;\n\tif(L <= l && r <= R) {\n\t\tt[x].up = 0;\n\t\tt[x].down = 1;\n\t\treturn;\n\t}\n\tupdate(x);\n\tint mid = l+r>>1;\n\tchange(x<<1,L,R,l,mid);\n\tchange(x<<1|1,L,R,mid+1,r); \n\tt[x].up = t[x<<1].up + t[x<<1|1].up;\n}\nint ask(int x,int L,int R,int l,int r)\n{\n\tif(r < L || l > R) return 0;\n\tif(L <= l && r <= R) return t[x].up;\n\tupdate(x);\n\tint mid = l+r>>1;\n\treturn ask(x<<1,L,R,l,mid)+ask(x<<1|1,L,R,mid+1,r); \t\n}\nint work_edge(dsu_edge a)\n{\n\tint x = a.x,y = a.y;\n\tint res = 0;\n\twhile(top[x] != top[y])\n\t{\n//\t\tcout<<\"X:: \"<<x<<\"  \"<<\"Y::\" <<y<<endl;\n\t\tif(d[top[x]] < d[top[y]]) swap(x,y);\n\t\tres += ask(1,id[top[x]],id[x],1,n);\n\t\tchange(1,id[top[x]],id[x],1,n);\n\t\tx = f[top[x]];\n\t}\n\tif(d[x] > d[y]) swap(x,y);\n\tres += ask(1,id[x]+1,id[y],1,n);\n\tchange(1,id[x]+1,id[y],1,n);\n//\tcout<<\"res:: \"<<res<<endl;\n\treturn res;\n}\nvoid solve_ans()\n{\n\tlong long ans = 0;\n\tfor(int i = m1+1;i <= m1+m2;i++)\n\t{\n\t\tif(mst_e[i]) continue;\n\t\tans += 1LL*dsu_e[i].w * work_edge(dsu_e[i]);\n\t}\n//\tcout<<\"ask \"<<ask(1,1,n,2,n)<<endl;\n\tif(ask(1,1,n,2,n) > 0) printf(\"-1\\n\");\n\telse printf(\"%lld\\n\",ans);\n}\nsigned main()\n{\n\tn = read();m1 = read();m2 = read();\n\tfor(int i = 1;i <= n;i++) dsu_fa[i] = i;\n\tfor(int i = 1;i <= m1;i++) \n\t{\n\t\tdsu_e[i].x = read();\n\t\tdsu_e[i].y = read();\n\t\tdsu_e[i].w = 0;\n\t}\n\tfor(int i = m1+1;i <= m1+m2;i++)\n\t{\n\t\tdsu_e[i].x = read();\n\t\tdsu_e[i].y = read();\n\t\tdsu_e[i].w = read();\n\t}\n\tsort(dsu_e+1,dsu_e+m1+m2+1,dsu_cmp);\n\tsolve_dsu();\n\tsolve_mst();\n\tsolve_ans();\n\treturn 0;\n}\n```\n\n\n\u53ef\u4ee5\u901a\u8fc7\u7684\u5e76\u67e5\u96c6\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read()\n{\n\tint x = 0,f = 0;char ch = getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=1;ch=getchar();}\n\twhile(isdigit(ch)){x=x*10+ch-'0';ch=getchar();}\n\treturn f?-x:x;\n}\nconst int N = 1110000;\nint n,k,m1,m2;\nstruct dsu_edge{int x,y,w;}dsu_e[N];\nint dsu_fa[N],mst_e[N],mst_top;\nbool dsu_cmp(dsu_edge a,dsu_edge b)\n{\n\treturn a.w < b.w;\n}\nint dsu_find(int x)\n{\n\treturn x==dsu_fa[x]?x:dsu_fa[x]=dsu_find(dsu_fa[x]);\n}\nvoid solve_dsu()\n{\n\tfor(int i = 1;i <= m1+m2;i++)\n\t{\n\t\tint a = dsu_e[i].x,b = dsu_e[i].y;\n\t\ta = dsu_find(a);\n\t\tb = dsu_find(b);\n\t\tif(a == b) continue;\n\t\tmst_e[i] = 1;\n\t\tdsu_fa[a] = b;\n\t}\n}\n//vector<int> G[N],W[N];\nstruct MLE{\n\tint to,nxt,w;\n}e[N];\nint fuck = 0,head[N];\nvoid add(int x,int y,int w)\n{\n\te[++fuck].to = y;\n\te[fuck].nxt = head[x];\n\te[fuck].w = w;\n\thead[x] = fuck;\n}\nvoid solve_mst()\n{\n\tfor(int i = 1;i <= m1+m2;i++)\n\t{\n\t\tif(mst_e[i])\n\t\t{\n\t\t\t//cout<<\"mst_e[i]:: \"<<i<<endl;\n\t\t\tdsu_edge a = dsu_e[i];\n\t\t\tadd(a.x,a.y,a.w);\n\t\t\tadd(a.y,a.x,a.w);\n//\t\t\tG[a.x].push_back(a.y);\n//\t\t\tG[a.y].push_back(a.x);\n//\t\t\tW[a.x].push_back(a.w);\n//\t\t\tW[a.y].push_back(a.w);\n\t\t}\n\t}\n}\nint f[N],d[N],cost[N];\nvoid dfs(int x,int fa,int dep)\n{\n\tf[x] = fa;d[x] = dep;\n\tfor(int i = head[x];i;i = e[i].nxt)\n\t{\n\t\tint y = e[i].to;\n\t\tif(y == fa)continue;\n\t\tcost[y] = e[i].w;\n\t\tdfs(y,x,dep+1);\n\t}\n}\nsigned main()\n{\n\tn = read();m1 = read();m2 = read();\n\tfor(int i = 1;i <= n;i++) dsu_fa[i] = i;\n\tfor(int i = 1;i <= m1;i++) \n\t{\n\t\tdsu_e[i].x = read();\n\t\tdsu_e[i].y = read();\n\t\tdsu_e[i].w = 0;\n\t}\n\tfor(int i = m1+1;i <= m1+m2;i++)\n\t{\n\t\tdsu_e[i].x = read();\n\t\tdsu_e[i].y = read();\n\t\tdsu_e[i].w = read();\n\t}\n\tsort(dsu_e+1,dsu_e+m1+m2+1,dsu_cmp);\n\tsolve_dsu();\n\tsolve_mst();\n\tdfs(1,0,1);\n\tlong long num = 0,ans = 0;\n\tfor(int i = 1;i <= n;i++) dsu_fa[i] = i;\n\tfor(int i = m1+1;i <= m1+m2;i++)\n\t{\n\t\tif(mst_e[i]) continue;\n\t\tint a = dsu_find(dsu_e[i].x),b = dsu_find(dsu_e[i].y),c = dsu_e[i].w;\n\t\twhile(a != b)\n\t\t{\n\t\t\tif(d[a]<d[b]) swap(a,b);\n\t\t\tif(cost[a] <= 0) ans += c,num++;\n\t\t\t//cout<<c<<endl;\n\t\t\tint fa = dsu_find(f[a]);\n\t\t\tdsu_fa[a] = fa;\n\t\t\ta = dsu_find(a); \n\t\t}\n\t}\n\tif(num < m1) ans=-1;\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1595422434,
        "uid": 227824,
        "name": "JK_LOVER",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1023F \u3010Mobile Phone Network\u3011"
    },
    {
        "content": "1.\u8003\u8651\u4ee4k\u6761\u65e0\u6743\u8fb9\u6743\u503c\u4e3a0\uff0c\u5efa\u51fa\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n2.\u5c06\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u65e0\u6743\u8fb9\u6743\u503c\u8bbe\u4e3aINF\uff0c\u6709\u6743\u8fb9\u6743\u503c\u8bbe\u4e3a0\uff0c\u5c06\u6700\u5c0f\u751f\u6210\u6811\u6811\u94fe\u5256\u5206\n\n3.\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6761\u6ca1\u6709\u5305\u542b\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u5e26\u6743\u8fb9(u,v,d)\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u6700\u5c0f\u751f\u6210\u6811\u4e0a(u,v)\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u6743\u503c\u5bf9d\u53d6min\n\n4.\u7b54\u6848\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u548c\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define int long long\nusing namespace std;\nconst int MAXN=1110000;\nconst int INF=1e15;\nint n,m,k;\nint ans[MAXN];\nint f[MAXN],X[MAXN],Y[MAXN],D[MAXN],book[MAXN];\nint tot,front[MAXN],to[MAXN],nxt[MAXN],di[MAXN];\nint fa[MAXN],dep[MAXN],siz[MAXN],son[MAXN],top[MAXN],w[MAXN],totw,b[MAXN];\nint data[MAXN],maxn[MAXN*4],flag[MAXN*4];\nvoid init(int u,int v,int d)\n{\n\tto[++tot]=v;\n\tnxt[tot]=front[u];\n\tdi[tot]=d;\n\tfront[u]=tot;\n}\nint find(int x)\n{\n\tif(f[x]!=x)f[x]=find(f[x]);\n\treturn f[x];\n}\nvoid dfs(int u,int father)\n{\n\tfa[u]=father;\n\tdep[u]=dep[father]+1;\n\tsiz[u]=1;\n\tfor(int i=front[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v==fa[u])continue;\n\t\tdata[v]=di[i];\n\t\tdfs(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])\n\t\t\tson[u]=v;\n\t}\n}\nvoid dfs(int u)\n{\n\tif(son[u])\n\t{\n\t\tw[son[u]]=++totw;\n\t\ttop[son[u]]=top[u];\n\t\tb[totw]=son[u];\n\t\tdfs(son[u]);\n\t}\n\tfor(int i=front[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v==fa[u]||v==son[u])continue;\n\t\tw[v]=++totw;\n\t\ttop[v]=v;\n\t\tb[totw]=v;\n\t\tdfs(v);\n\t}\n}\nvoid build(int root,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tmaxn[root]=data[b[l]];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(root*2,l,mid);\n\tbuild(root*2+1,mid+1,r);\n\tmaxn[root]=max(maxn[root*2],maxn[root*2+1]);\n}\nvoid pushdown(int root)\n{\n\tif(flag[root]<=maxn[root*2])\n\t\tmaxn[root*2]=flag[root],flag[root*2]=flag[root];\n\tif(flag[root]<=maxn[root*2+1])\n\t\tmaxn[root*2+1]=flag[root],flag[root*2+1]=flag[root];\n\tflag[root]=0;\n}\nvoid chg(int root,int l,int r,int xl,int xr,int d)\n{\n\tif(d>maxn[root])return;\n\tif(l==xl&&r==xr)\n\t{\n\t\tmaxn[root]=d;\n\t\tflag[root]=d;\n\t\treturn;\n\t}\n\tif(flag[root])pushdown(root);\n\tint mid=(l+r)>>1;\n\tif(xr<=mid)chg(root*2,l,mid,xl,xr,d);\n\telse\n\t\tif(xl>mid)chg(root*2+1,mid+1,r,xl,xr,d);\n\t\telse\t\n\t\t{\n\t\t\tchg(root*2,l,mid,xl,mid,d);\n\t\t\tchg(root*2+1,mid+1,r,mid+1,xr,d);\n\t\t}\n\tmaxn[root]=max(maxn[root*2],maxn[root*2+1]);\n}\nvoid change(int u,int v,int d)\n{\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]])swap(u,v);\n\t\tchg(1,1,n,w[top[u]],w[u],d);\n\t\tu=fa[top[u]];\n\t}\n\tif(u==v)return;\n\tif(dep[u]<dep[v])swap(u,v);\n\tchg(1,1,n,w[v]+1,w[u],d);\n}\nint lca(int u,int v)\n{\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]])swap(u,v);\n\t\tu=fa[top[u]];\n\t}\n\tif(dep[u]>dep[v])return v;\n\treturn u;\n}\nvoid check(int root,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tans[b[l]]=maxn[root];\n\t\treturn;\n\t}\n\tif(flag[root])pushdown(root);\n\tint mid=(l+r)>>1;\n\tcheck(root*2,l,mid);\n\tcheck(root*2+1,mid+1,r);\n}\nsigned main()\n{\n\t//freopen(\"test.in\",\"r\",stdin);\n\t//freopen(\"test.out\",\"w\",stdout);\n\tscanf(\"%I64d%I64d%I64d\",&n,&k,&m);\n\tfor(int i=1;i<=n;i++)f[i]=i;\n\tint cnt=0;\n\tfor(int i=1,x,y;i<=k;i++)\n\t{\n\t\tscanf(\"%I64d%I64d\",&x,&y);\n\t\tif(find(x)!=find(y))\n\t\t{\n\t\t\tf[find(x)]=find(y);\n\t\t\tinit(x,y,INF);\n\t\t\tinit(y,x,INF);\n\t\t\tcnt++;\n\t\t}\n\t}\n\tint ans2=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%lld%lld%lld\",&X[i],&Y[i],&D[i]);\n\t\tif(find(X[i])!=find(Y[i]))\n\t\t{\n\t\t\tf[find(X[i])]=find(Y[i]);\n\t\t\tinit(X[i],Y[i],0);\n\t\t\tinit(Y[i],X[i],0);\n\t\t\tcnt++;\n\t\t\tbook[i]=1;\n\t\t}\n\t}\n\tdfs(1,0);\n\tw[1]=++totw;\n\ttop[1]=1;\n\tb[totw]=1;\n\tdfs(1);\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++)\n\t\tif(!book[i])\n\t\t{\n\t\t\tint tmp=lca(X[i],Y[i]);\n\t\t\tchange(X[i],tmp,D[i]);\n\t\t\tchange(Y[i],tmp,D[i]);\n\t\t}\n\tcheck(1,1,n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(ans[i]==INF)\n\t\t{\n\t\t\tprintf(\"-1\");\n\t\t\treturn 0;\n\t\t}\n\t\tans[i]+=ans[i-1];\n\t}\n\tprintf(\"%I64d\",ans[n]-ans2);\n\treturn 0;\n}\n\n```",
        "postTime": 1540369695,
        "uid": 27032,
        "name": "cyhzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1023F \u3010Mobile Phone Network\u3011"
    },
    {
        "content": "## \u4e00\u3001\u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9\u3001$m$ \u6761\u8fb9\u7684\u65e0\u5411\u5e26\u6743\u56fe\uff0c\u4ee4\u989d\u5916\u7ed9\u5b9a $k$ \u6761\u8fb9\uff0c\u6c42\u4fdd\u8bc1\u8fd9 $k$ \u6761\u8fb9\u80fd**\u540c\u65f6**\u5b58\u5728\u4e8e\u6b64\u56fe\u7684**\u5176\u4e2d**\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff08MST\uff09\u4e2d\u7684\u60c5\u51b5\u4e0b**\u8fb9\u6743\u548c\u7684\u6700\u5927\u503c**\u3002\u5982\u679c\u5b58\u5728\u4e00\u6761\u8fb9\u7684\u6743\u53ef\u4ee5\u8bbe\u4e3a\u65e0\u7a77\u5927\uff0c\u8f93\u51fa $-1$\u3002\n\n## \u4e8c\u3001\u601d\u8def\n\n\u597d\u9898\u3002\n\n\u6700\u663e\u7136\u7684\u60f3\u6cd5\u662f\u6211\u4eec\u5148\u5efa\u51fa\u539f\u56fe\u7684 MST \uff0c\u7136\u540e\u4f9d\u6b21\u67e5\u8be2 $k$ \u6761\u8fb9\u4e24\u70b9\u5728 MST \u4e0a\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c $\\max$\uff0c\u7136\u540e\u5c06\u8fd9\u6761\u8fb9\u8bbe\u4e3a $\\max$\uff0c\u5e76\u5c06\u539f\u8fb9\u6743\u8d4b\u503c\u4e3a $0$\u3002\n\n\u4f46\u662f\u8fd9\u6837\u662f**\u9519\u8bef**\u7684\uff0c\u56e0\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8fb9\u53ef\u80fd\u6070\u6070\u662f\u4e4b\u524d\u65b0\u589e\u7684\u8fb9\uff0c\u8fd9\u6837\u4e0d\u80fd\u4fdd\u8bc1\u5272\u6389\u7684\u662f\u6700\u5927\u8fb9\uff1b\u4f46\u82e5\u5272\u65b0\u8fb9\uff0c\u5219\u4e0d\u7b26\u5408\u9898\u610f\uff0c\u4e5f\u4e0d\u6613\u5904\u7406\u3002\n\n\u8f6c\u6362\u89d2\u5ea6\uff0c\u6211\u4eec\u5148\u4fdd\u8bc1\u8fd9 $k$ \u6761\u8fb9\u4e00\u5b9a\u5728 MST \u4e2d\uff0c\u5728\u6c42 MST \u65f6\u94a6\u5b9a\u8fd9 $k$ \u6761\u8fb9\u4e3a $0$\uff0c\u6784\u5efa\u51fa MST\uff1b\u7136\u540e\u6811\u94fe\u5256\u5206\uff0c\u521d\u59cb\u5316\u65b0\u8fb9\u7684\u6743\u4e3a $+\\infty$\uff0c\u7528**\u4e0d\u5728** MST \u4e2d\u7684\u8fb9\u5bf9 MST \u4e2d\u7684\u8fb9\u6743\u8fdb\u884c\u7ea6\u675f\uff0c\u5373\u6b64\u8fb9\u4e24\u70b9\u5728 MST \u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u90fd\u5e94**\u4e0d\u5927\u4e8e**\u6b64\u8fb9\u8fb9\u6743\u3002\u533a\u95f4\u53d6 $\\min$ \u5373\u53ef\u3002\n\n\u6700\u540e\u6211\u4eec\u53ef\u4ee5\u67e5\u8be2\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u5982\u679c\u6709 $+\\infty$ \u5c31\u8f93\u51fa $-1$\uff0c\u5426\u5219\u8f93\u51fa\u548c\u3002\n\n\uff08\u8fd9\u91cc\u533a\u95f4\u53d6 $\\min$ \u7528\u666e\u901a\u7ebf\u6bb5\u6811\u5373\u53ef\uff0c\u4f46\u67e5\u8be2\u6bcf\u4e2a\u8282\u70b9\u5e38\u6570\u8f83\u5927\uff0c\u88ab\u5361\u5e38\u4e86\u3002\u56e0\u6b64\u6211\u7528\u5409\u53f8\u673a\u7ebf\u6bb5\u6811\u533a\u95f4\u53d6 $\\min$\u3001\u7ef4\u62a4\u533a\u95f4\u548c\uff09\n\n### AC code\n\n```cpp\n//written_by_FTL\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<queue>\n#include<vector>\n#include<set>\n#define ll long long\n#define LD long double\n#define i7 __int128\n#define re return\nusing namespace std;\nconst int N=5e5+5;\nint rd(){\n\tint ans=0,f=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')f^=(ch=='-'),ch=getchar();\n\twhile(ch>='0'&&ch<='9')ans=(ans<<3)+(ans<<1)+(ch^48),ch=getchar();\n\tre f?-ans:ans;\n}\nint n,m,k,u,v,bk[N<<1];\nll sum,INF=0x3f3f3f3f,a[N];\nint nd[N],tt=1;\nstruct xxs{\n\tint u,v,w;\n\tbool operator <(const xxs x)const{\n\t\tre w<x.w;\n\t}\n}g[N<<1];\nstruct edge{\n\tint v;ll w;int nxt;\n}e[N<<1];\nvoid add(int u,int v,int w){\n\te[++tt]={v,w,nd[u]};\n\tnd[u]=tt;\n}\nnamespace kru{\n\tint f[N];\n\tint gtf(int x){\n\t\tif(f[x]==x)re x;\n\t\tre f[x]=gtf(f[x]);\n\t}\n\tvoid sol(){\n\t\tsort(g+1,g+k+m+1);\n\t\tfor(int i=1;i<=n;i++)f[i]=i;\n\t\tint tot=0;\n\t\tfor(int i=1;i<=k+m;i++){\n\t\t\tu=gtf(g[i].u),v=gtf(g[i].v);\n\t\t\tif(u==v)continue;\n\t\t\tf[u]=v,sum+=g[i].w,bk[i]=1;\n\t\t\tadd(g[i].u,g[i].v,g[i].w?g[i].w:INF),add(g[i].v,g[i].u,g[i].w?g[i].w:INF);\n\t\t\tif(++tot==n-1)break;\n\t\t}\n\t}\n}\nint f[N],siz[N],d[N],sn[N];\nint dfn[N],rk[N],tp[N],num;\nnamespace SGT{//\u5409\u53f8\u673a\u7ebf\u6bb5\u6811\n\t#define vl v<<1\n\t#define vr v<<1|1\n\t#define t d[v]\n\t#define tl d[vl]\n\t#define tr d[vr]\n\t#define z lz[v]\n\t#define zl lz[vl]\n\t#define zr lz[vr]\n\t#define mid ((l+r)>>1)\n\tstruct data{\n\t\tint l,r;int mx,x,c;ll s;\n\t}d[N<<2];\n\tvoid pu(int v){\n\t\tt.s=tl.s+tr.s;\n\t\tif(tl.mx>tr.mx)t.mx=tl.mx,t.c=tl.c,t.x=tl.x>tr.mx?tl.x:tr.mx;\n\t\telse{\n\t\t\tif(tl.mx<tr.mx)t.mx=tr.mx,t.c=tr.c,t.x=tl.mx>tr.x?tl.mx:tr.x;\n\t\t\telse t.mx=tl.mx,t.c=tl.c+tr.c,t.x=tl.x>tr.x?tl.x:tr.x;\n\t\t}\n\t}\n\tvoid chg(int v,int k){\n\t\tif(t.mx<=k)re;\n\t\tt.s-=(ll)t.c*(t.mx-k);\n\t\tt.mx=k;\n\t}\n\tvoid pd(int v){\n\t\tchg(vl,t.mx),chg(vr,t.mx);\n\t}\n\tvoid bd(int l,int r,int v){\n\t\tt.l=l,t.r=r,t.x=0;\n\t\tif(l==r){\n\t\t\tt.s=t.mx=a[rk[l]],t.c=1;\n\t\t\tre;\n\t\t}\n\t\tbd(l,mid,vl),bd(mid+1,r,vr);\n\t\tpu(v);\n\t} \n\tll qry(int l,int r,int v){\n\t\tif(t.l>=l&&t.r<=r)re t.s;\n\t\tpd(v);\n\t\tre (tl.r>=l?qry(l,r,vl):0)+(tr.l<=r?qry(l,r,vr):0);\n\t}\n\tvoid ud(int l,int r,int v,int k){\n\t\tif(t.mx<=k)re;\n\t\tif(t.l>=l&&t.r<=r&&t.x<k){chg(v,k);re;}\n\t\tpd(v);\n\t\tif(tl.r>=l)ud(l,r,vl,k);\n\t\tif(tr.l<=r)ud(l,r,vr,k);\n\t\tpu(v);\n\t}\n\t#undef  t\n\t#undef  mid\n}\nnamespace HCS{//\u6811\u94fe\u5256\u5206\n\tvoid dfs1(int u,int fa){\n\t\tf[u]=fa,siz[u]=1;\n\t\tfor(int i=nd[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].v;\n\t\t\tif(v==f[u])continue;\n\t\t\td[v]=d[u]+1,dfs1(v,u),siz[u]+=siz[v];\n\t\t\tif(siz[v]>siz[sn[u]])sn[u]=v;\n\t\t}\n\t}\n\tvoid dfs2(int u,int t){\n\t\tdfn[u]=++num,rk[num]=u,tp[u]=t;\n\t\tfor(int i=nd[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].v;\n\t\t\tif(v==sn[u]){dfs2(v,t),a[v]=e[i].w;break;}\n\t\t}\n\t\tfor(int i=nd[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].v;\n\t\t\tif(v==f[u]||v==sn[u])continue;\n\t\t\tdfs2(v,v),a[v]=e[i].w;\n\t\t}\n\t}\n\tvoid ud(int u,int v,int w){\n\t\twhile(tp[u]!=tp[v]){\n\t\t\tif(d[tp[u]]<d[tp[v]])swap(u,v);\n\t\t\tSGT::ud(dfn[tp[u]],dfn[u],1,w),u=f[tp[u]];\n\t\t}\n\t\tif(d[u]>d[v])swap(u,v);\n\t\tif(u!=v)SGT::ud(dfn[u]+1,dfn[v],1,w);\n\t}\n}\nint main(){\n\tn=rd(),k=rd(),m=rd();\n\tfor(int i=1;i<=k;i++){\n\t\tu=rd(),v=rd();\n\t\tg[i]={u,v,0};\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tu=rd(),v=rd();\n\t\tg[i+k]={u,v,rd()};\n\t}\n\tkru::sol();//MST\n\tHCS::dfs1(1,0),HCS::dfs2(1,1),SGT::bd(1,n,1);\n\tfor(int i=k+1;i<=k+(m);i++){\n\t\tif(bk[i])continue;\n\t\tHCS::ud(g[i].u,g[i].v,g[i].w);\n\t}\n\tll ans=SGT::d[1].s,x=SGT::d[1].mx;\n\tprintf(\"%lld\\n\",(x==INF)?-1:ans-sum);\n\tre 0;\n}\n```\n\n### $\\text{The End.}$",
        "postTime": 1647658771,
        "uid": 346440,
        "name": "FreeTimeLove",
        "ccfLevel": 7,
        "title": "CF1023F\u3010Mobile Phone Network\u3011"
    },
    {
        "content": "## Solution\n\n- \u9996\u5148\uff0c\u9898\u76ee\u7ed9\u5b9a $k$ \u6761\u8fb9\u80af\u5b9a\u8981\u9009\uff0c\u63a5\u4e0b\u6765\u8003\u8651\u5bf9\u624b\u7684 $m$ \u6761\u8fb9\u4e2d\u90a3\u4e9b\u4f1a\u88ab\u9009\u3002\u90a3\u4e48\u53ef\u4ee5\u6784\u9020\u751f\u6210\u6811\uff0c\u628a $k$ \u6761\u8fb9\u5148\u5728\u751f\u6210\u6811\u4e0a\u8fde\u8d77\u6765\uff0c\u7136\u540e\u7528\u5269\u4e0b $m$ \u6761\u8fb9\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u8865\u5168\u8be5\u751f\u6210\u6811\uff0c\u8fd9\u6837\u4f7f\u7528\u7684 $m$ \u6761\u8fb9\u6743\u503c\u662f\u6700\u5c0f\u7684\u3002\n- \u5bf9\u4e8e\u6ca1\u6709\u88ab\u9009\u4e2d\u7684\u8fb9\uff0c\u6211\u4eec\u9700\u8981\u9009\u62e9\u4fdd\u8bc1\u81ea\u5df1\u7684 $k$ \u6761\u8fb9\u6bd4\u5b83\u4eec\u4f18\u3002\u5bf9\u4e8e\u4e00\u6761\u6ca1\u6709\u9009\u62e9\u7684\u8fde\u63a5 $(u,v)$ \u7684\u8fb9\uff0c\u5b83\u4e0d\u4f1a\u88ab\u9009\u4e2d\u4ec5\u5f53\u751f\u6210\u6811 $u\\to v$ \u8def\u5f84\u4e0a\u4efb\u610f\u4e00\u6761\u8fb9\u7684\u6743\u503c\u90fd\u4e0d\u5927\u4e8e\u5b83\u3002\u539f\u56e0\u5f88\u663e\u7136\uff0c\u56e0\u4e3a\u5982\u679c\u6709\u6bd4\u5b83\u5927\u7684\uff0c\u76f4\u63a5\u628a\u6bd4\u5b83\u5927\u7684\u90a3\u6761\u8fb9\u5220\u6389\u6362\u6210\u5b83\u5c31\u66f4\u4f18\u4e86\u3002\n- \u6211\u4eec\u521d\u59cb\u628a $k$ \u6761\u8fb9\u4ef7\u683c\u90fd\u8bbe\u4e3a $\\infty$\uff0c\u5bf9\u4e8e\u6ca1\u6709\u9009\u62e9\u7684 $(u,v)$ \u6743\u503c\u4e3a $w$ \u7684\u8fb9\uff0c\u751f\u6210\u6811 $u\\to v$ \u4e0a\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u90fd\u5bf9 $w$ \u53d6 $\\min$\u3002\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u6bcf\u6761\u8fb9\u90fd $\\leq w$\u3002\n- \u628a\u6ca1\u6709\u9009\u62e9\u7684\u8fb9\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u8fd9\u6837\u53d6 $\\min$ \u5c31\u6210\u4e86\u8986\u76d6\uff0c\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u7ef4\u62a4\u6570\u636e\u7ed3\u6784\u6765\u652f\u6301\u6811\u4e0a\u94fe\u8986\u76d6\u3002\u53ef\u4ee5\u4f7f\u7528\u6811\u94fe\u5256\u5206\u628a\u95ee\u9898\u653e\u5230\u5e8f\u5217\u4e0a\uff0c\u7136\u540e\u4f7f\u7528\u989c\u8272\u6bb5\u5747\u644a\u6216\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7686\u53ef\u3002\n- \u6700\u540e\u5c06 $k$ \u6761\u8fb9\u7684\u6743\u503c\u76f8\u52a0\u5373\u4e3a\u7b54\u6848\uff0c\u4e0d\u8981\u5fd8\u8bb0\u5224\u65ad\u65e0\u89e3\u3002\n\n\u4e00\u4e9b\u7ec6\u8282\uff1a\n\n- \u989c\u8272\u6bb5\u5747\u644a\u5e38\u6570\u8fc7\u5927\uff0c\u65e0\u6cd5\u901a\u8fc7\u3002\u6d4b\u8bc4\u8bb0\u5f55\uff1a<https://codeforces.com/contest/1023/submission/199081289>\n- \u7531\u4e8e\u53ea\u6709\u6700\u540e\u7684\u5355\u70b9\u67e5\u8be2\uff0c\u7ebf\u6bb5\u6811\u53ef\u4ee5\u53ea\u7ef4\u62a4\u533a\u95f4\u4fee\u6539\u7684 `tag`\uff0c\u6ce8\u610f\u6700\u540e\u6ca1\u6709 `tag` \u7684\u5373\u4e3a $\\infty$\uff0c\u8f93\u51fa\u65e0\u89e3\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(m\\log^2n)$\u3002\n\n## $\\mathcal{}Code$\n\n\u6811\u94fe\u5256\u5206\uff0c[1.76s](https://www.luogu.com.cn/record/105880084)\u3002\n\n```cpp\n#pragma GCC optimize(\"Ofast\")\n#include <bits/stdc++.h>\nusing namespace std;\nnamespace FastIO {\n\tchar buf[1 << 23], *p1 = buf, *p2 = buf;\n#define getchar() \\\n\t(p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << 21, stdin), p1 == p2) ? EOF : *p1 ++)\n\tinline int read() {\n\t    register int sr = 0;\n\t    register char ch = getchar(), last;\n\t    while (ch < '0' || ch > '9') last = ch, ch = getchar();\n\t    while (ch >= '0' && ch <= '9') sr = (sr << 1) + (sr << 3) + (ch ^ 48), ch = getchar();\n\t    return last == '-' ? -sr : sr;\n\t}\n}\nnamespace Milkcat {\n\tusing namespace FastIO;\n\ttypedef long long LL;\n\tconst int N = 1e6 + 5, inf = INT_MAX;\n\tstruct edge {\n\t\tint u, v, w;\n\t\tbool operator < (const edge& x) const {\n\t\t\treturn w < x.w;\n\t\t}\n\t} e[N], qwq[N];\n\tint n, m, k, f[N], a[N];\n\tvector<edge> t;\n\tLL ans;\n\tint find(int x) { return f[x] == x ? x : f[x] = find(f[x]); }\n\tvoid merge(int u, int v) {\n\t\tint fu = find(u), fv = find(v);\n\t\tif (fu != fv) f[fv] = fu;\n\t}\n\tstruct SegmentTree {\n\t    LL tag[N << 1];\n\t    inline int ls(int p) { return p << 1; }\n\t    inline int rs(int p) { return p << 1 | 1; }\n\t    void push_down(int p, int l, int r) {\n\t        if (tag[p]) tag[ls(p)] = tag[p], tag[rs(p)] = tag[p], tag[p] = 0;\n\t    }\n\t    void modify(int p, int l, int r, int nl, int nr, LL k) {\n\t        if (nl <= l && r <= nr) { tag[p] = k; return; }\n\t        push_down(p, l, r);\n\t        int mid = (l + r) >> 1;\n\t        if (nl <= mid) modify(ls(p), l, mid, nl, nr, k);\n\t        if (nr > mid) modify(rs(p), mid + 1, r, nl, nr, k);\n\t    }\n\t    LL query(int p, int l, int r, int t) {\n\t        if (l == r) return tag[p];\n\t        push_down(p, l, r);\n\t        int mid = (l + r) >> 1;\n\t        if (t <= mid) return query(ls(p), l, mid, t);\n\t        if (t > mid) return query(rs(p), mid + 1, r, t);\n\t    }\n\t} Sgt;\n\tstruct TreeDecom {\n\t\tstruct edge {\n\t\t\tint next, to;\n\t\t} e[N << 1];\n\t\tint tot, cnt, head[N], depth[N], fa[N], siz[N], son[N], top[N], id[N];\n\t\tvoid Add(int u, int v) {\n\t\t\te[++ cnt].to = v;\n\t\t\te[cnt].next = head[u];\n\t\t\thead[u] = cnt;\n\t\t}\n\t\tvoid add(int u, int v) {\n\t\t\tAdd(u, v), Add(v, u);\n\t\t}\n\t\tvoid dfs1(int u, int fat) {\n\t\t\tfa[u] = fat, siz[u] = 1, depth[u] = depth[fa[u]] + 1;\n\t\t\tfor (int i = head[u]; i; i = e[i].next) {\n\t\t\t\tint v = e[i].to;\n\t\t\t\tif (v == fa[u]) continue;\n\t\t\t\tdfs1(v, u), siz[u] += siz[v];\n\t\t\t\tif (!son[u] || siz[v] > siz[son[u]])\n\t\t\t\t\tson[u] = v;\n\t\t\t}\n\t\t}\n\t\tvoid dfs2(int u, int topf) {\n\t\t\ttop[u] = topf, id[u] = ++ tot;\n\t\t\tif (son[u]) dfs2(son[u], topf);\n\t\t\tfor (int i = head[u]; i; i = e[i].next) {\n\t\t\t\tint v = e[i].to;\n\t\t\t\tif (v == fa[u] || v == son[u]) continue;\n\t\t\t\tdfs2(v, v);\n\t\t\t}\n\t\t}\n\t\tvoid updRange(int u, int v, int k) {\n\t\t\twhile (top[u] != top[v]) {\n\t\t\t\tif (depth[top[u]] < depth[top[v]]) swap(u, v);\n\t\t\t\tSgt.modify(1, 1, n, id[top[u]], id[u], k), u = fa[top[u]];\n\t\t\t}\n\t\t\tif (depth[u] > depth[v]) swap(u, v);\n\t\t\tif (id[u] < id[v]) Sgt.modify(1, 1, n, id[u] + 1, id[v], k);\n\t\t}\n\t} T;\n\tint main() {\n\t\tn = read(), k = read(), m = read();\n\t\tfor (int i = 1; i <= n; i ++) f[i] = i;\n\t\tfor (int i = 1; i <= k; i ++) {\n\t\t\tqwq[i].u = read(), qwq[i].v = read();\n\t\t\tmerge(qwq[i].u, qwq[i].v), T.add(qwq[i].u, qwq[i].v);\n\t\t}\n\t\tfor (int i = 1; i <= m; i ++) e[i].u = read(), e[i].v = read(), e[i].w = read();\n\t\tsort(e + 1, e + 1 + m);\n\t\tfor (int i = 1; i <= m; i ++) {\n\t\t\tint fu = find(e[i].u), fv = find(e[i].v);\n\t\t\tif (fu != fv) merge(e[i].u, e[i].v), T.add(e[i].u, e[i].v);\n\t\t\telse t.push_back(e[i]);\n\t\t}\n\t\tT.dfs1(1, 0), T.dfs2(1, 1);\n\t\treverse(t.begin(), t.end());\n\t\tfor (edge pwp : t) T.updRange(pwp.u, pwp.v, pwp.w);\n\t\tfor (int i = 1; i <= k; i ++) {\n\t\t\tif (T.depth[qwq[i].u] < T.depth[qwq[i].v]) swap(qwq[i].u, qwq[i].v);\n\t\t\tint res = Sgt.query(1, 1, n, T.id[qwq[i].u]);\n\t\t\tif (!res) puts(\"-1\"), exit(0);\n\t\t\tans += res;\n\t\t}\n\t\tprintf(\"%lld\\n\", ans);\n\t\treturn 0;\n\t}\n}\nint main() {\n\treturn Milkcat::main();\n}\n\n```\n",
        "postTime": 1679921542,
        "uid": 560516,
        "name": "\u55b5\u4ed4\u725b\u5976",
        "ccfLevel": 0,
        "title": "CF1023F Mobile Phone Network \u9898\u89e3"
    },
    {
        "content": "# Mobile Phone Network-\u9898\u89e3\n\n### \u9898\u610f\n\n\u7ed9\u5b9a $k$ \u6761\u8fb9\u6743\u4e0d\u5b9a\u7684\u8fb9\u4e0e $m$ \u8fb9\u6743\u786e\u5b9a\u7684\u8fb9\uff0c\u8ba9 $k$ \u6761\u8fb9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u5e76\u6700\u5927\u5316 $k$ \u6761\u8fb9\u3002\n\n### \u89e3\u6cd5\n\n\u65e2\u7136\u8981\u8ba9 $k$ \u6761\u8fb9\u5728\u6700\u5c0f\u751f\u6210\u6811\u5185\uff0c\u90a3\u5148\u5c06\u8fd9\u4e9b\u8fb9\u52a0\u5165\u8fd9\u68f5\u6811\uff0c\u518d\u7528 Kruskal \u8ba9 $m$ \u6761\u8fb9\u8865\u5168\u751f\u6210\u6811\u3002\u5bf9\u4e8e\u5269\u4e0b\u7684\u975e\u6811\u8fb9\uff0c\u4ee4\u7aef\u70b9\u4e3a $x$ \u548c $y$ \u8fb9\u6743\u4e3a $w$\uff0c\u6839\u636e\u6700\u5c0f\u751f\u6210\u6811\u7684\u6027\u8d28\uff0c\u751f\u6210\u6811\u4e0a $x$ \u5230 $y$ \u7684\u8def\u5f84\u8fb9\u6743\u90fd\u4e0d\u80fd\u8d85\u8fc7 $w$\uff0c\u5426\u5219\u5176\u4e2d\u7684\u4e00\u6761\u8fb9\u5e94\u7531\u8fd9\u6761\u975e\u6811\u8fb9\u4ee3\u66ff\u3002\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\u7ed9\u591a\u6761\u6811\u4e0a\u8def\u5f84\u4e0e\u503c $w$\uff0c\u4f7f\u5f97\u6bcf\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u7684\u6743\u503c\u4e0d\u8d85\u8fc7 $w$\u3002\u6811\u5256\u663e\u7136\u53ef\u4ee5\u89e3\u51b3\uff0c\u4f46\u65f6\u7a7a\u5747\u52a3\uff0c\u5bb9\u6613\u88ab\u5361\u6389\u3002\n\n\u53ef\u4ee5\u8ba9 $w$ \u9012\u589e\uff0c\u90a3\u4e48\u6bcf\u6761\u8fb9\u6700\u591a\u4f1a\u66f4\u65b0\u6700\u5c0f\u503c\u4e00\u6b21\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u5df2\u7ecf\u66f4\u65b0\u7684\u90e8\u5206\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u964d\u5230\u8fd1\u4f3c $O(n)$\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n\n#define  Int  long long int\n#define  Pub  public\n#define  rand  Rand\nstd::mt19937 rand(time(0));\n\nusing std::min;using std::max;\nusing std::swap;\nconst Int INF=1000000000000000;\n\nint n,k,m;\nstd::map<std::pair<int,int>,bool> h;\n\nint RD(){\n    int x=0;char c=getchar();\n    while(c>'9'||c<'0')c=getchar();\n    while(c<='9'&&c>='0')x=(x<<3)+(x<<1)+c-'0',c=getchar();\n    return x;\n}\nclass Node{\nPub:std::vector<int> s;int fa;\n    int dp;\n}a[500005];\n\nInt t[2000005];\n\n\nvoid dfs(int x){\n    if(h.find({x,a[x].fa})==h.end()&&h.find({a[x].fa,x})==h.end())t[x]=0;\n    a[x].dp=a[a[x].fa].dp+1;\n    for(int i:a[x].s){\n        if(i==a[x].fa)continue;\n        a[i].fa=x;\n        dfs(i);\n    }\n}\n\nclass Edge{\nPub:int x,y;\n    Int z;\n    bool f;\n}e[500005];\nint fa[500005];\nint fin(int x){\n    if(fa[x]!=x)fa[x]=fin(fa[x]);\n    return fa[x];\n}\nint FA[500005];\nint FIN(int x){\n    if(FA[x]!=x)FA[x]=FIN(FA[x]);\n    return FA[x];\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&k,&m);\n    for(int i=1;i<=n;++i)fa[i]=FA[i]=i;\n    for(int i=1,x,y;i<=k;++i){\n        x=RD(),y=RD();\n        fa[fin(x)]=fin(y);\n        a[x].s.emplace_back(y);\n        a[y].s.emplace_back(x);\n        h[{x,y}]=1;\n    }\n    for(int i=1;i<=m;++i)e[i].x=RD(),e[i].y=RD(),e[i].z=RD();\n    for(int i=1;i<=m;++i){\n        if(fin(e[i].x)!=fin(e[i].y)){\n            fa[fin(e[i].x)]=fin(e[i].y);\n            a[e[i].x].s.emplace_back(e[i].y);\n            a[e[i].y].s.emplace_back(e[i].x);\n            e[i].f=1;\n        }\n    }\n    std::fill(t,t+2000005,INF);\n    \n    dfs(1);\n    for(int i=1;i<=m;++i){\n        if(e[i].f==0){\n            int x=e[i].x,y=e[i].y;\n            while(x!=y){\n                x=FIN(x),y=FIN(y);\n                if(x==y)break;\n                if(a[x].dp<a[y].dp)swap(x,y);\n                t[x]=min(t[x],e[i].z);\n                FA[x]=FIN(a[x].fa);\n            }\n        }\n    }\n    Int ans=0;\n    for(int i=1;i<=n;++i)ans=min(INF,t[i]+ans);\n    if(ans==INF)printf(\"-1\");\n    else printf(\"%lld\",ans);\n    \n    return 0;\n}\n```",
        "postTime": 1668694083,
        "uid": 492662,
        "name": "Endt_or_endt",
        "ccfLevel": 5,
        "title": "Mobile Phone Network-\u9898\u89e3"
    }
]