[
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u52a8\u6001\u51f8\u5305\u7684\u6a21\u677f\u9898\u3002\n\n\u542c\u7f62\u6628\u5929\u5f90\u660e\u5bbd\u7684\u8ba1\u7b97\u51e0\u4f55\u9898\uff0c\u5206\u4eab\u4e00\u4e0b\u4ee5\u5750\u6807\u6392\u5e8f\u7684\u51f8\u5305\u5efa\u7acb\u65b9\u6cd5\u3002\u4e2a\u4eba\u8ba4\u4e3a\u76f8\u5bf9\u4e8e\u6781\u89d2\u6392\u5e8f\uff0c\u5750\u6807\u6392\u5e8f\u80fd\u591f\u51cf\u5c0f\u7cbe\u5ea6\u8bef\u5dee\uff0c\u5c24\u5176\u662f\u8fd9\u6837\u4e00\u9053\u5750\u6807\u90fd\u4e3a\u6574\u6570\u7684\u9898\u3002\n\n\u9759\u6001\u51f8\u5305\u7684\u6784\u5efa\u65b9\u6cd5\u662f\uff1a\n\n1. \u5c06\u5404\u70b9\u5750\u6807\u6309 $x$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n2. \u5206\u522b\u7ef4\u62a4\u4e0a\u51f8\u58f3\u548c\u4e0b\u51f8\u58f3\u3002\u6ce8\u610f\u5230\u5982\u679c\u4e4b\u524d\u6709\u4e24\u70b9 $A$ \u548c $B$ \uff0c\u5f53\u63d2\u5165\u65b0\u8282\u70b9 $C$ \u65f6\uff0c\u4ee5\u4e0a\u51f8\u58f3\u4e3a\u4f8b\uff0c\u5982\u679c $\\overrightarrow{AB} \\times \\overrightarrow{AC} \\ge 0$ \u65f6\uff0c\u8fd9\u8bf4\u660e $B$ \u5728\u7ebf\u6bb5 $AC$ \u7684\u4e0b\u65b9\uff0c\u5c31\u53ef\u4ee5\u5c06 $B$ \u5220\u9664\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6b64\u65f6\u51f8\u5305\u662f\u4e00\u4e2a\u7c7b\u4f3c\u5355\u8c03\u6808\u7684\u7ed3\u6784\u3002\n\n\u6392\u5e8f\u8fc7\u7a0b\u662f\u7b97\u6cd5\u7684\u74f6\u9888\uff0c\u6548\u7387 $\\Theta(n \\log n)$\u3002\u800c\u540e\u9762\u7684\u6784\u5efa\u662f $\\Theta(n)$ \u7684\u3002\n\n\u4ece\u4e0a\u9762\u7684\u542f\u53d1\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u4e00\u79cd\u52a8\u6001\u7ef4\u62a4\u51f8\u5305\u7684\u65b9\u6cd5\u3002\n\n\u7528 $\\texttt{std::map}$ \u7ef4\u62a4\u4e0a\u4e0b\u51f8\u58f3\uff0c $x$ \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c $y$ \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u3002\u5728\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u70b9\u5230\u51f8\u58f3\u4e0a\u65f6\uff0c\u68c0\u67e5\u5b83\u5468\u56f4\u7684\u70b9\u662f\u5426\u53ef\u4ee5\u88ab\u5220\u6389\uff0c\u7528\u4e0e\u9759\u6001\u51f8\u5305\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5224\u65ad\u3002\n\n\u867d\u7136\u63d2\u5165\u4e00\u4e2a\u70b9\u65f6\u53ef\u80fd\u5220\u9664\u82e5\u5e72\u4e2a\u70b9\uff0c\u4f46\u6ce8\u610f\u5230\u6bcf\u4e2a\u70b9\u53ea\u6709\u5728\u88ab\u5220\u9664\u65f6\u624d\u4f1a\u591a\u8d21\u732e\u8fd9 $\\mathcal O(\\log n)$ \u7684\u65f6\u95f4\uff0c\u6240\u4ee5\u672c\u7b97\u6cd5\u652f\u6301\u51f8\u5305\u7684\u5355\u6b21\u63d2\u5165\u6709**\u644a\u8fd8**\u610f\u4e49\u4e0a\u7684\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(\\log n)$ \u3002\n\n\u9898\u5916\u8bdd\uff1a\u6ce8\u610f\u5230\u8fd9\u662f\u644a\u8fd8\u610f\u4e49\u4e0a\u7684\uff0c\u6240\u4ee5\u5355\u6b21\u64cd\u4f5c\u7684\u5b9e\u9645\u6d88\u8017\u65f6\u95f4\u53ef\u80fd\u8fdc\u8fdc\u4e0d\u6b62 $\\mathcal O(\\log n)$ \uff0c\u7b80\u5355\u7684\u6784\u9020\u65b9\u6cd5\uff1a\u653e\u4e00\u4e2a\u70b9\u5728 $(+\\infty, +\\infty)$ \uff0c\u8fd9\u6837\u5c31\u4f1a\u628a\u6240\u6709\u70b9\u9664\u4e86\u6700\u5de6\u70b9\u90fd\u9876\u6389\uff0c\u5355\u6b21\u5c31\u53d8\u6210\u4e86 $\\Theta(n)$ \u7684\u3002\uff08\u60f3\u4e00\u60f3\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u662f $n\\log n$ \uff1f\uff09\u6240\u4ee5\u8fd9\u4e2a\u65b9\u6cd5**\u4e0d\u80fd**\u76f4\u63a5\u8f6c\u5316\u4e3a\u53ef\u6301\u4e45\u5316\u51f8\u5305\u3002\n\n```cpp\n#include <cstdio>\n#include <cmath>\n\n#include <algorithm>\n#include <map>\n\ntypedef std::map<int, int> map;\ntypedef map::iterator iterator;\ntypedef int num;\ntypedef long long ll;\n\nmap top, down;\n\nll det(int x1, int y1, int x2, int y2);\nbool check_top(int x, int y);\nbool check_down(int x, int y);\nbool remove_top(iterator it);\nbool remove_down(iterator it);\nvoid insert_top(int x, int y);\nvoid insert_down(int x, int y);\n\nint main() {\n\tint q, op, x, y;\n\tscanf(\"%d\", &q);\n\twhile (q--) {\n\t\tscanf(\"%d%d%d\", &op, &x, &y);\n\t\tif (op == 1) {\n\t\t\tinsert_top(x, y);\n\t\t\tinsert_down(x, y);\n\t\t} else\n\t\t\tputs((check_top(x, y) && check_down(x, y)) ? \"YES\" : \"NO\");\n\t}\n\treturn 0;\n}\n\nvoid insert_top(int x, int y) {\n\tif (check_top(x, y))\n\t\treturn;\n\ttop[x] = y;\n\titerator it = top.find(x);\n\titerator jt = it;\n\tif (it != top.begin()) {\n\t\t--jt;\n\t\twhile (remove_top(jt++))\n\t\t\t--jt;\n\t}\n\tif (++jt != top.end())\n\t\twhile (remove_top(jt--))\n\t\t\t++jt;\n}\n\nll det(int x1, int y1, int x2, int y2) {\n\treturn (ll)x1 * y2 - (ll)x2 * y1;\n}\n\nvoid insert_down(int x, int y) {\n\tif (check_down(x, y))\n\t\treturn;\n\tdown[x] = y;\n\titerator it = down.find(x);\n\titerator jt = it;\n\tif (it != down.begin()) {\n\t\t--jt;\n\t\twhile (remove_down(jt++))\n\t\t\t--jt;\n\t}\n\tif (++jt != down.end())\n\t\twhile (remove_down(jt--))\n\t\t\t++jt;\n}\n\nbool remove_top(iterator it) {\n\tif (it == top.begin())\n\t\treturn false;\n\titerator jt = it, kt = it;\n\t--jt;\n\t++kt;\n\tif (kt == top.end())\n\t\treturn false;\n\tif (det(it->first - jt->first, it->second - jt->second, kt->first - jt->first, kt->second - jt->second) >= 0) {\n\t\ttop.erase(it);\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool remove_down(iterator it) {\n\tif (it == down.begin())\n\t\treturn false;\n\titerator jt = it, kt = it;\n\t--jt;\n\t++kt;\n\tif (kt == down.end())\n\t\treturn false;\n\tif (det(it->first - jt->first, it->second - jt->second, kt->first - jt->first, kt->second - jt->second) <= 0) {\n\t\tdown.erase(it);\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool check_top(int x, int y) {\n\titerator it = top.lower_bound(x);\n\tif (it == top.end())\n\t\treturn false;\n\tif (it->first == x)\n\t\treturn y <= it->second;\n\tif (it == top.begin())\n\t\treturn false;\n\titerator jt = it;\n\t--jt;\n\treturn det(it->first - jt->first, it->second - jt->second, x - jt->first, y - jt->second) <= 0;\n}\n\nbool check_down(int x, int y) {\n\titerator it = down.lower_bound(x);\n\tif (it == down.end())\n\t\treturn false;\n\tif (it->first == x)\n\t\treturn y >= it->second;\n\tif (it == down.begin())\n\t\treturn false;\n\titerator jt = it;\n\t--jt;\n\treturn det(it->first - jt->first, it->second - jt->second, x - jt->first, y - jt->second) >= 0;\n}\n```",
        "postTime": 1518102853,
        "uid": 21423,
        "name": "Elegia",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF70D \u3010Professor's task\u3011"
    },
    {
        "content": "~~\u4e3a\u6b64\u9898\u8d21\u732e\u4e86\u4e00\u9875\u7ea2~~\n\n\u539f\u6765if(calc(balabala...)>0)\u5199\u6210if(calc(balabala...))\u5c45\u7136\u4f1a\u9519\n\u6211\u4e00\u76f4\u4ee5\u4e3a\u662f\u5bf9\u7684(\u83dc\u5f97\u771f\u5b9e\n\n\u52a8\u6001\u51f8\u5305\u88f8\u9898\n\n\u56e0\u4e3a\u7528\u6781\u89d2\u6392\u5e8f\u4f1a\u6709\u7cbe\u5ea6\u8bef\u5dee~~(\u800c\u6211\u53c8\u53ea\u4f1aatan2\u7684\u6781\u89d2\u6392\u5e8f)~~ \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u70b9\u7684\u5750\u6807\u90fd\u4e583 \u8bef\u5dee\u5c31\u6ca1\u90a3\u4e48\u5927\u4e86\uff1f\n\n\u6781\u89d2\u6392\u5e8f\u9700\u8981\u4e00\u4e2a\u539f\u70b9 \u9898\u76ee\u4e00\u5f00\u59cb\u5c31\u7ed93\u4e2a\u70b9 \u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u7528\u8fd9\u4e2a\u4e09\u89d2\u5f62\u7684\u91cd\u5fc3\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8981\u52a0\u5165\u51f8\u5305\u7684\u70b9 \u6211\u4eec\u4e00\u8981\u627e\u5230\u5b83\u5bf9\u4e8e\u51f8\u5305\u7684\u4f4d\u7f6e \u4e8c\u5c31\u8981\u56e0\u5b83\u800c\u4fee\u6539\u51f8\u5305\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u95ee\u9898\u5c31\u62ff\u4e2aset\u7ef4\u62a4\u5c31\u884c\u4e86(\u5de8\u4f6c\u4eec\u82b15m50s\u6253\u4e2a\u5e73\u8861\u6811\u4e4b\u7c7b\u7684\u66f4\u597d\uff01) \u6bd4\u8f83\u51fd\u6570\u5c31\u662f\u6781\u89d2\u6392\u5e8f\u7684\u51fd\u6570 \n\n\u7b2c\u4e8c\u4e2a\u95ee\u9898\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u60f3\u5230(\u60f3\u4e00\u60f3,\u4e3a\u4ec0\u4e48?) \u7531\u8981\u52a0\u5165\u7684\u70b9\u5411\u4e24\u8fb9\u4e00\u76f4\u6c42\u53c9\u79ef \u4e00\u76f4\u4fee\u6539\u5c31\u884c\u4e86\n\n\u5982\u679c\u662f\u8be2\u95ee\u7684\u8bdd\u5176\u5b9e\u5c31\u662f\u50cf\u63d2\u5165\u4e00\u6837\u627e\u5230\u4f4d\u7f6e\u540e\u770b\u53c9\u79ef\n\n\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u548c\u4ee3\u7801\u6ce8\u91ca~~(\u81ea\u8ba4\u4ee3\u7801\u98ce\u683c\u5b8c\u7f8e)~~\n\n\u6ca1\u6709\u4ee3\u7801\u6ce8\u91ca\u7684\uff1a[\u4e91\u526a\u8d34\u677f](https://www.luogu.org/paste/p4fi9i68)\uff08\u6709\u4e86\u4ee3\u7801\u6ce8\u91ca\u611f\u89c9\u4ee3\u7801\u53d8\u4e11\u4e86\uff09\n\n```cpp\n#include <cstdio>\n#include <set>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long ll;\n\nint n,opr,x,y;\n\nstruct p {int x,y;double ang;}o,ori[4]; \n//ang \u6781\u89d2\n \nset<p> S;\nset<p>::iterator pre,suc;\n\ninline bool operator < (p i,p j)\n{return i.ang==j.ang?i.x<j.x:i.ang<j.ang;}\n\np operator - (p i,p j) {return (p){i.x-j.x,i.y-j.y};}\n\nll cross(p i,p j) {return (ll)i.x*j.y-(ll)i.y*j.x;}\n\nset<p>::iterator PRE(set<p>::iterator x)\n{return x==S.begin()?--S.end():--x;}\n//\u6ce8\u610f\u8fb9\u754c \n\nset<p>::iterator SUC(set<p>::iterator x)\n{return (++x)==S.end()?S.begin():x;}\n\ninline void insert(p x) {\n    if(cross(x-*pre,*suc-x)<=0) return ; //\u5728\u51f8\u5305\u5185 \u89e3\u91ca\u770b\u8be2\u95ee\u5904 \n    S.insert(x);\n    set<p>::iterator cur=S.find(x),i=PRE(cur),j=PRE(i);\n    //\u76f8\u5f53\u4e8eP=cur=p A=i=s[top] B=j=s[top-1] \n    while(cross(*cur-*j,*i-*j)>=0) S.erase(i),i=j,j=PRE(j);\n    //\u5f80\u6781\u89d2\u5c0f\u7684\u5730\u65b9\u4fee\u6539 \u5411\u91cfBP\u5728\u5411\u91cfBA\u4e0a\u6216\u53f3\u8fb9 \u5c31\u5220\u6389A \n    //\u4e0b\u9762\u540c\u7406 \u753b\u4e2a\u56fe\u5c31\u5f88\u6e05\u6670\u4e86 \n    i=SUC(cur);j=SUC(i);\n    while(cross(*cur-*j,*i-*j)<=0) S.erase(i),i=j,j=SUC(j);\n}\n\nint main() {\n    scanf(\"%d\",&n);\n    for(register int i=1;i<=3;++i) { //\u5148\u8bfb\u5165\u4e09\u4e2a\u70b9\u5b9a\u539f\u70b9 \n        scanf(\"%d %d %d\",&opr,&ori[i].x,&ori[i].y);\n        o.x+=ori[i].x;o.y+=ori[i].y;\n        ori[i].x*=3;ori[i].y*=3; //\u6ce8\u610f\u7cbe\u5ea6\u5904\u7406 \n    } for(register int i=1;i<=3;++i) {\n        ori[i].ang=atan2(ori[i].y-o.y,ori[i].x-o.x); //\u6c42\u6ce2\u6781\u89d2 \n        S.insert(ori[i]);\n    } for(register int i=4;i<=n;++i) { //\u8bfb\u5165\u5269\u4e0b\u7684 \n        scanf(\"%d %d %d\",&opr,&x,&y);x*=3;y*=3;\n        p P=(p){x,y,atan2(y-o.y,x-o.x)};\n        if((suc=S.lower_bound(P))==S.end()) suc=S.begin();\n        //\u627e\u63d2\u5165\u70b9\u540e\u9762\u7684\u4f4d\u7f6e \n\t\t//\u5c31\u662f\u627e\u5230\u5927\u4e8e\u7b49\u4e8e\u63d2\u5165\u70b9\u7684\u70b9\u5728\u51f8\u5305\u4e0a\u7684\u4f4d\u7f6e\n\t\t//\u60f3\u8c61\u6210\u6307\u5357\u9488\u90a3\u6837\u7684\u4f1a\u5f88\u597d\u7406\u89e3\uff1f \u6700\u5c0f\u7684\u6781\u89d2\u5728x\u6b63\u534a\u8f74\n\t\t//\u6700\u5927\u7684\u6781\u89d2\u662f\u9006\u65f6\u9488\u7ed5\u4e00\u5708\u540e\u4e5f\u5728x\u6b63\u534a\u8f74 \n\t\t//\u5982\u679c\u6ca1\u6709 \u8bf4\u660e\u63d2\u5165\u70b9\u5c06\u662f\u6700\u5927\u7684 \u5b83\u7684\u540e\u9762\u5c31\u8bbe\u4e3a\u5f00\u5934 \n        pre=PRE(suc);\n        //\u627e\u63d2\u5165\u70b9\u524d\u9762\u7684\u4f4d\u7f6e \n        if(opr==1) insert(P);\n        else if(cross(P-*pre,*suc-P)<=0) printf(\"YES\\n\");\n        //\u76f8\u5f53\u4e8e \u6781\u89d2\u8f83\u5c0f\u7684\u70b9A[*pre] \u548c\u6781\u89d2\u8f83\u5927\u7684\u70b9B[*suc]\n\t\t//\u4ed6\u4eec\u4e4b\u95f4\u6709\u4e2a\u70b9P \u5982\u679c\u5411\u91cfAP\u5728\u5411\u91cfPB\u4e0a\u6216\u8005\u5de6\u8fb9\n\t\t//P\u70b9\u5c31\u5728\u51f8\u5305\u5185 \u53ef\u4ee5\u753b\u56fe\u60f3\u60f3 \n        else printf(\"NO\\n\");\n    } return 0;\n}\n```\n\n",
        "postTime": 1550313374,
        "uid": 64288,
        "name": "\u65cb\u8f6c\u5361\u58f3",
        "ccfLevel": 0,
        "title": "11"
    },
    {
        "content": "**\u524d\u7f6e**\n\n3\u6708\u7684\u65f6\u5019\u542c517\u5c06\u8fd9\u9898\uff0c\u8fc7\u4e86\u8fd9\u4e48\u4e45\uff0c\u7ec8\u4e8e\u505a\u4e86\u8fd9\u9898\uff0c\u53d1\u7bc7\u9898\u89e3\u5e2e\u52a9\u7406\u89e3\u4e00\u4e0b\n\n**\u9898\u610f**\n\n\u52a8\u6001\u4e8c\u7ef4\u51f8\u5305\uff0c\u52a0\u70b9\u548c\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u51f8\u5305\u5185\n\n**\u5206\u7c7b**\n\n- \u6570\u5b66\uff0c\u6570\u8bba\n- \u8ba1\u7b97\u51e0\u4f55\n- \u6a21\u677f\u7cfb\u5217\n\n**\u524d\u7f6e\u77e5\u8bc6**\n\n[\u9759\u6001\u4e8c\u7ef4\u51f8\u5305](https://www.luogu.org/problem/P2742)\n\n**\u60f3\u6cd5**\n\n\u56de\u5fc6\u9759\u6001\u4e8c\u7ef4\u51f8\u5305\u7684\u6784\u5efa\u65b9\u6cd5\uff0c\u6211\u4eec\u5148\u7ef4\u62a4\u4e00\u4e2a\u4e0a\u4e0b\u51f8\u58f3\uff0c\u518d\u8fdb\u884c\u64cd\u4f5c\n\n\u5b9e\u9645\u4e0a\u73b0\u5728\u5c31\u662f\u8ba9\u8fd9\u4e2a\u7ef4\u62a4\u53d8\u6210\u52a8\u6001\u7684\n\nC++ STL\u91cc\u7684map\u4f1a\u975e\u5e38\u597d\u7528\n\n\u5f00\u4e24\u4e2amap\uff0c\u4e00\u4e2a\u53ebtop\uff0c\u7ef4\u62a4\u4e0a\u51f8\u58f3\uff1b\u4e00\u4e2a\u53ebdown\uff0c\u7ef4\u62a4\u4e0b\u51f8\u58f3\u3002\n\ntop/down[x]\u8868\u793a\u6a2a\u5750\u6807\u4e3ax\u7684\u70b9\u7684\u7eb5\u5750\u6807\u662f\u4ec0\u4e48\n\n**\u5bf9\u4e8echeck\u64cd\u4f5c\uff1a** \u5224\u65ad\u5f53\u524d\u70b9\u7684\u4e0a\u4e0b\u8fb9\u754c\u662f\u4ec0\u4e48\u7136\u540e\u8fd4\u56de\u7ed3\u679c\n\n**\u5bf9\u4e8edelete\u64cd\u4f5c\uff1a** \u5f53\u524d\u70b9\u5982\u679c\u5df2\u7ecf\u5728\u51f8\u5305\u5185\uff0c\u5220\u9664\u4e4b\n\n**\u5bf9\u4e8einsert\u64cd\u4f5c\uff1a** \u5728\u5f53\u524d\u4f4d\u7f6e\u52a0\u4e0a\u4e00\u4e2a\u70b9\uff0c\u7136\u540edelete\u6389\u88ab\u5305\u62ec\u5728\u5185\u90e8\u7684\u70b9\n\n\u6570\u5b66\u8981\u6c42\uff1a\u53c9\u79ef\n\n**\u559c\u95fb\u4e50\u89c1\u4ee3\u7801\u7cfb\u5217**\n\n```cpp\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cstdio>\n#define ll long long\n#define map_it map<ll,ll>::iterator\nusing namespace std;\n\nll n;\nmap<ll,ll> top,down;\n\ninline ll read(){\n\tll x=0,tmp=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-') tmp=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tx=(x<<3)+(x<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn tmp*x;\n}\n\ninline bool check_top(ll x,ll y){\n    map_it i=top.lower_bound(x);\n    if(i==top.end()) return 0;\n    if(i->first==x) return y<=i->second;\n    if(i==top.begin()) return 0;\n    map_it j=i; j--;\n    return (i->first-j->first)*(y-j->second)-(i->second-j->second)*(x-j->first)<=0;\n}\n\ninline bool check_down(ll x,ll y){\n    map_it i=down.lower_bound(x);\n    if(i==down.end()) return 0;\n    if(i->first==x) return y>=i->second;\n    if(i==down.begin()) return 0;\n    map_it j=i; j--;\n    return (i->first-j->first)*(y-j->second)-(i->second-j->second)*(x-j->first)>=0;\n}\n\ninline bool delete_top(map_it i){\n\tif(i==top.begin()) return 0;\n\tmap_it j=i,k=i; j--; k++;\n\tif(k==top.end()) return 0;\n\tif((i->first-j->first)*(k->second-j->second)-(i->second-j->second)*(k->first-j->first)>=0){\n\t\ttop.erase(i);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\ninline bool delete_down(map_it i){\n\tif(i==down.begin()) return 0;\n\tmap_it j=i,k=i; j--; k++;\n\tif(k==down.end()) return 0;\n\tif((i->first-j->first)*(k->second-j->second)-(i->second-j->second)*(k->first-j->first)<=0){\n\t\tdown.erase(i);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\ninline void insert_top(ll x,ll y){\n\tif(check_top(x,y)) return;\n\ttop[x]=y;\n\tmap_it i=top.find(x),j=i;\n\tif(i!=top.begin()){\n\t\tj--;\n\t\twhile(delete_top(j++)) j--;\n\t}\n\tif(++j!=top.end()) while(delete_top(j--)) j++;\n}\n\ninline void insert_down(ll x,ll y){\n\tif(check_down(x,y)) return;\n\tdown[x]=y;\n\tmap_it i=down.find(x),j=i;\n\tif(i!=down.begin()){\n\t\tj--;\n\t\twhile(delete_down(j++)) j--;\n\t}\n\tif(++j!=down.end()) while(delete_down(j--)) j++;\n}\n\nint main(){\n\tn=read();\n\tfor(ll i=1; i<=n; i++){\n\t\tll op=read(),x=read(),y=read();\n\t\tif(op==1){\n\t\t\tinsert_top(x,y);\n\t\t\tinsert_down(x,y);\n\t\t}\n\t\telse{\n\t\t\tif(check_top(x,y)&&check_down(x,y)) puts(\"YES\");\n\t\t\telse puts(\"NO\");\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1565159442,
        "uid": 27924,
        "name": "xukuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF70D \u3010Professor's task\u3011"
    },
    {
        "content": "\u5efa\u51f8\u5305\uff0c\u9664\u4e86 Andrew \u7b97\u6cd5\u8fd8\u6709 Graham \u626b\u63cf\u6cd5\u3002\u7136\u800c\u6709\u4eba\u8ba4\u4e3a\u201c\u6781\u89d2\u6392\u5e8f\u201d\u4e22\u7cbe\u5ea6\u3001\u6548\u7387\u4f4e\uff0c\u8fd9\u91cc\u6211\u7ed9\u4e00\u4e2a\u4e0d\u9700\u8981 atan2 \u7684\u6781\u89d2\u6392\u5e8f\u3002\n\n### \u600e\u4e48\u201c\u6781\u89d2\u6392\u5e8f\u201d\n\n![](https://cdn.jsdelivr.net/gh/Cat-shao/MyPic2@master/dymanic-convexhull-1)\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u5b9a\u4e49\u4ece\u539f\u70b9\u6cbf $y$ \u8f74\u8d1f\u534a\u8f74\u65b9\u5411\u7684\u5411\u91cf\u89d2\u5ea6\u6700\u5c0f\uff0c\u9006\u65f6\u9488\u65cb\u8f6c\u8d8a\u6765\u8d8a\u5927\u3002\n\n\n![](https://cdn.jsdelivr.net/gh/Cat-shao/MyPic2@master/dymanic-convexhull-2)\n\n\u4f8b\u5982\u4e0a\u56fe $a$ \u7684\u89d2\u5ea6\u5c0f\u4e8e $b$ \u7684\u89d2\u5ea6\u3002\n\n\u4e00\u4e2a\u6734\u7d20\u7684\u60f3\u6cd5\uff1a\u5224\u65ad\u4e24\u4e2a\u5411\u91cf $a$ \u7684\u89d2\u5ea6\u662f\u5426\u5c0f\u4e8e $b$ \u7684\u89d2\u5ea6\uff0c\u53ef\u4ee5\u901a\u8fc7 $a$ \u7684\u659c\u7387\u4e0e $b$ \u7684\u659c\u7387\u6bd4\u8f83\u3002\u4f46\u662f\u5411\u91cf\u5728 $y$ \u8f74\u4e0a\u65f6\u6ca1\u6cd5\u8ba1\u7b97\u659c\u7387\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u7279\u5224\u3002\n1. \u5982\u679c $a, b$ \u5728 $y$ \u8f74\u53f3\u4fa7\uff0c$a$ \u7684\u89d2\u5ea6\u6bd4 $b$ \u7684\u89d2\u5ea6\u5c0f\u4e14\u5f53 $a$ \u7684\u659c\u7387\u5c0f\u4e8e $b$ \u7684\u659c\u7387\u3002\n2. \u5982\u679c $a, b$ \u5728 $y$ \u8f74\u5de6\u4fa7\u6216\u5176\u4e2d\u4e00\u4e2a\u5728 $y$ \u8f74\u4e0a\u53e6\u4e00\u4e2a\u5728 $y$ \u8f74\u5de6\u4fa7\uff0c\u5c06\u5b83\u4eec\u7ed5\u539f\u70b9\u65cb\u8f6c $180^{\\circ}$ \u4e8c\u8005\u89d2\u5ea6\u5173\u7cfb\u4e0d\u53d8\uff0c\u53d8\u6210\u4e86\u7b2c\u4e00\u79cd\u60c5\u51b5\u3002\n3. \u5982\u679c $a, b$ \u5728 $y$ \u8f74\u4e24\u4fa7\uff0c\u54ea\u4e2a\u5728\u53f3\u4fa7\u54ea\u4e2a\u89d2\u5ea6\u5c0f\u3002\n4. \u5f53 $a, b$ \u5728 $y$ \u8f74\u4e0a\u65f6\uff0c\u8c01\u671d\u4e0b\u8c01\u89d2\u5ea6\u5c0f\u3002\u4e8c\u8005\u90fd\u671d\u4e0b\uff0c\u89d2\u5ea6\u76f8\u540c\u3002\n5. \u5f53 $a$ \u5728 $y$ \u8f74\u4e0a\uff0c$b$ \u5728 $y$ \u8f74\u53f3\u4fa7\uff08\u4ece\u60c5\u51b5 2 \u8f6c\u6362\u6765\u7684\uff09\uff0c\u5982\u679c $a$ \u671d\u4e0b\u90a3\u4e48 $a$ \u89d2\u5ea6\u5c0f\uff0c\u5982\u679c $a$ \u671d\u4e0a $a$ \u89d2\u5ea6\u5927\u3002$b$ \u5728 $y$ \u8f74\u4e0a\u65f6\u7c7b\u4f3c\u3002\n\n\u539f\u70b9\u4e0d\u4f1a\u51fa\u73b0\u5728\u51f8\u5305\u7684\u8fb9\u7f18\u4e0a\uff0c\u4e0d\u9700\u8981\u8003\u8651\u539f\u70b9\u7684\u89d2\u5ea6\u3002\n\n```cpp\nbool operator<(vec a, vec b) {\n    if (a.x == 0 && b.x == 0) {\n        if (signbit(a.y) == signbit(b.y)) { // 4\n            return false;\n        }\n        return a.y < 0;\n    }\n    if (a.x <= 0 && b.x <= 0) { // 2\n        return -a < -b;\n    }\n    if ((a.x == 0 && a.y < 0) || (b.x == 0 && b.y > 0)) { // 5\n        return true;\n    }\n    if ((a.x == 0 && a.y > 0) || (b.x == 0 && b.y < 0)) { // 5\n        return false;\n    }\n    if (signbit(a.x) != signbit(b.x)) { // 3\n        return a.x > b.x;\n    }\n    return (long long) a.y * b.x < (long long) b.y * a.x; // 1\n}\n```\n\n### \u5269\u4e0b\u7684\u90e8\u5206\n\n\u6211\u4eec\u628a\u7ed9\u6211\u4eec\u6240\u6709\u7684\u70b9\u7684\u5750\u6807\u90fd\u4e58\u4e0a 3 \u3002\u7531\u4e00\u5f00\u59cb\u7684\u4e09\u4e2a\u70b9\uff0c\u8ba1\u7b97\u51fa\u8fd9\u4e09\u4e2a\u70b9\u56f4\u6210\u7684\u4e09\u89d2\u5f62\u7684\u91cd\u5fc3\uff08\u56e0\u4e3a\u5750\u6807\u90fd\u4e58\u4e0a 3 \u6240\u4ee5\u91cd\u5fc3\u7684\u5750\u6807\u5fc5\u4e3a\u6574\u6570\uff09\uff0c\u5e76\u5c06\u6240\u6709\u70b9\u4e00\u8d77\u5e73\u79fb\uff0c\u4f7f\u5f97\u91cd\u5fc3\u843d\u5728\u539f\u70b9\u4e0a\u3002\u8fd9\u6837\u5904\u7406\u65b9\u4fbf\u6211\u4eec\u6bd4\u8f83\u89d2\u5ea6\u3002\n\n\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u51f8\u5305\u8fb9\u7f18\u4e0a\u7684\u70b9\uff08\u5411\u91cf\uff09\uff0c\u6309\u6781\u89d2\u6392\u5e8f\u3002\n\n![](https://cdn.jsdelivr.net/gh/Cat-shao/MyPic2@master/dymanic-convexhull-4)\n\n\u8003\u8651\u600e\u4e48\u505a\u8be2\u95ee\u3002\u8bb0\u7ed9\u6211\u4eec\u7684\u5411\u91cf\u4e3a $b$ \uff0c\u5728\u51f8\u5305\u8fb9\u7f18\u4e0a\u89d2\u5ea6\u5c0f\u4e8e $b$ \u4e14\u6700\u5927\u7684\u5411\u91cf\u4e3a $a$ \uff08$b$ \u7684\u524d\u9a71\uff09\uff0c\u89d2\u5ea6\u5927\u4e8e\u7b49\u4e8e $b$ \u4e14\u6700\u5c0f\u7684\u5411\u91cf\u4e3a $c$ \uff08$b$ \u7684\u540e\u7ee7\uff09\u3002\u5224\u65ad $b$ \u662f\u5426\u5728\u51f8\u5305\u4e0a\uff08\u5185\u90e8\u548c\u8fb9\u7f18\uff09\uff0c\u53ea\u9700\u8981\u5224\u65ad $b$ \u662f\u5426\u5728 $ac$ \u7684\u5de6\u4fa7\u6216\u8fb9\u7f18\uff0c\u5373 $\\overrightarrow{ac} \\times \\overrightarrow{ab} \\ge 0$ \u3002\n\n```cpp\n// \u8fd9\u91cc\u5b9e\u73b0\u7684\u662f \"b\" \u662f\u4e0d\u662f\u5728\u51f8\u5305\u5916\u3002hull \u662f std::set \u3002prev \u4e0d\u662f std::prev \uff0c\u662f\u6211\u81ea\u5df1\u5199\u7684 prev \u3002\n// prev(hull.begin()) == std::prev(hull.end()) \u3002\n// \u540c\u7406\u4e0b\u9762 insert \u4e2d\u7684 next \u4e5f\u4e0d\u662f std::next \uff0c\u662f\u6211\u81ea\u5df1\u5199\u7684 next \u3002\nbool outHull(vec b) {\n    auto it = hull.lower_bound(b);\n    if (it == hull.end()) {\n        it = hull.begin();\n    }\n    auto c = *it, a = *prev(it);\n    return cross({a, c}, {a, b}) < 0;\n}\n```\n\n![](https://cdn.jsdelivr.net/gh/Cat-shao/MyPic2@master/dymanic-convexhull-6-new)\n\n\n\u8003\u8651\u600e\u4e48\u505a\u63d2\u5165\u3002\u9996\u5148\u5224\u65ad\u7ed9\u6211\u4eec\u7684\u70b9 $p$ \u662f\u4e0d\u662f\u5728\u51f8\u5305\u4e0a\uff08\u5185\u90e8\u548c\u8fb9\u7f18\uff09\u3002\u5982\u679c\u5728\u51f8\u5305\u4e0a\u90a3\u4e48\u5c31\u4e0d\u7528\u63d2\u5165\u4e86\u3002\u7136\u540e\u628a $p$ \u63d2\u5165\u5230\u5e73\u8861\u6811\u4e2d\u3002\u5982\u5de6\u4e0a\u56fe\uff0c\u9006\u65f6\u9488\uff0c\u7ed9 $p$ \u5468\u56f4\u7684\u5411\u91cf\u8d77\u4e2a\u540d\u3002 $p$ \u63d2\u5165\u540e $d, c, p$ \u662f\u51f9\u7684\uff0c\u5373 $\\overrightarrow{pc} \\times \\overrightarrow{cd} \\le 0$ \uff0c\u5220\u9664 $c$ \u3002\u5220\u5b8c\u540e\u53ef\u80fd\u8fd8\u662f\u51f9\u7684\uff0c\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u540c\u7406 $p, b, a$ \u662f\u51f9\u7684\uff0c\u5373 $\\overrightarrow{pb} \\times \\overrightarrow{ba} \\ge 0$ \uff0c\u628a $b$ \u5220\u6389\uff0c\u5982\u679c\u8fd8\u662f\u51f9\u7684\u5c31\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u3002\n\n```cpp\nvoid insert(vec v) {\n    hull.erase(v); // \u65b9\u5411\u76f8\u540c\u7684\u5411\u91cf\u4f1a\u88ab\u5224\u4e3a\u76f8\u7b49\n    auto it = hull.insert(v).first;\n    while (cross({*it, *next(it)}, {*next(it), *next(it, 2)}) <= 0) {\n        hull.erase(*next(it));\n    }\n    while (cross({*it, *prev(it)}, {*prev(it), *prev(it, 2)}) >= 0) {\n        hull.erase(*prev(it));\n    }\n}\n```\n\n\u5206\u6790\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5e73\u8861\u6811\u9009\u7528\u7ea2\u9ed1\u6811\uff0c\u67e5\u627e $\\Theta(\\log n)$ \uff0c\u63d2\u5165 $O(1)$ \uff0c\u5220\u9664 $O(1)$ \u3002\u5bf9\u4e8e\u8be2\u95ee\uff0c\u76f8\u5f53\u4e8e\u4e24\u6b21\u67e5\u627e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\Theta(\\log n)$ \u3002\u5bf9\u4e8e\u63d2\u5165\uff0c\u67e5\u627e $p$ \u9700\u8981\u63d2\u5165\u7684\u4f4d\u7f6e $\\Theta(\\log n)$ \uff0c\u7531\u4e8e\u4e00\u4e2a\u70b9\u53ea\u80fd\u5220\u9664\u4e00\u6b21\uff0c\u5747\u644a\u5230\u6bcf\u6b21\u64cd\u4f5c 1 \u5c31\u662f $O(1)$ \u7684\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5747\u644a $\\Theta(\\log n)$ \u3002\n\n### \u9898\u5916\u8bdd\n\n\u6ce8\u610f\u5230\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5747\u644a $\\Theta(\\log n)$ \uff0c\u6709\u6ca1\u6709\u4ec0\u4e48\u4e25\u683c $\\Theta(\\log n)$ \u7684\u505a\u6cd5\uff1f\u7b54\u6848\u662f\u6709\u7684\u3002\u300aCOMPUTATIONAL GEOMETRY AN INTRODUCTION\u300b\u4e2d 3.3.6 \u8282\u63d0\u5230\u4e86\u8fd9\u4e00\u505a\u6cd5\uff0c3.3.7 \u8282\u63d0\u5230\u4e86\u6709\u63d2\u5165\u3001\u5220\u9664\u7ef4\u62a4\u52a8\u6001\u51f8\u5305\u7684 $\\Theta(\\log^2 n)$ \u505a\u6cd5\u3002\u5404\u4f4d\u6709\u5174\u8da3\u53ef\u4ee5\u53bb\u770b\u770b\uff0c\u8bb2\u5f97\u633a\u597d\u3002\n\n\u4e0d\u96be\u60f3\u51fa\u672c\u9898\u8fd8\u6709\u4e00\u4e2a\u8be2\u95ee $\\Theta(\\log n)$ \uff0c\u63d2\u5165 $\\Theta(\\sqrt{n})$ \u7684\u505a\u6cd5\uff0c\u57fa\u4e8e\u5757\u72b6\u94fe\u8868\u3002\u4e0d\u597d\u8bf4\u5b9e\u73b0\u51fa\u6765\u6709\u6ca1\u6709\u6211\u4e0a\u6587\u4ecb\u7ecd\u4e86\u4e00\u5927\u987f\u7c7b\u4f3c Graham \u626b\u63cf\u6cd5\u7684\u89e3\u6cd5\u5feb\u3002\u8bf4\u5230\u6548\u7387\uff0c\u6211\u5f00\u4e86 Ofast \u548c\u5feb\u8bfb\u540e\u5c31\u62ff\u5230 codeforces \u4e0a\u7684\u6700\u4f18\u89e3\u4e86\u3002[\u6d4b\u8bc4\u8bb0\u5f55](https://codeforces.com/contest/70/submission/164984350)\n\n\u6709\u95ee\u9898\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u4e2d\u95ee\u6211\u3002\u5982\u679c\u53d1\u73b0\u4e86\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\u9ebb\u70e6\u5404\u4f4d\u6307\u51fa\uff0c\u8c22\u8c22\u3002",
        "postTime": 1658308881,
        "uid": 234011,
        "name": "Cat_shao",
        "ccfLevel": 0,
        "title": "\u63d2\u5165\u5747\u644a O(log n) \u7684\u52a8\u6001\u51f8\u5305\uff0c\u6781\u89d2\u6392\u5e8f"
    },
    {
        "content": "## \u9898\u89e3\n\n\u8fd9\u9053\u9898\u5f88\u660e\u663e\u662f\u8ba9\u4f60\u52a8\u6001\u7ef4\u62a4\u51f8\u5305\u5e76\u5224\u65ad\u70b9\u662f\u5426\u5728\u51f8\u5305\u5185\u3002\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u5f88\u5947\u602a\u7684\u52a8\u6001\u7ef4\u62a4\u51f8\u5305\u7684\u65b9\u6cd5\uff0c\u662f\u7b14\u8005\u5728\u4e0a\u8bfe\u65f6\u5076\u7136\u60f3\u5230\u7684\u3002\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u51f8\u5305\u4e0a\u7684\u70b9\u5177\u6709\u4ec0\u4e48\u7279\u6b8a\u6027\u8d28\u3002\n\n![image-20210806222231759](https://cdn.luogu.com.cn/upload/image_hosting/txz5321o.png)\n\n\u5f88\u660e\u663e\uff0c\u51f8\u5305\u4e0a\u7684\u70b9\u4e00\u5b9a\u4f1a\u5b58\u5728\u4e00\u6761\u4e3a\u67d0\u4e2a\u659c\u7387\u7684\u76f4\u7ebf\u4ece\u65e0\u9650\u8fdc\u5904\u5411\u51f8\u5305\u5e73\u79fb\u65f6\u7b2c\u4e00\u4e2a\u78b0\u5230\u5b83\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a\u70b9\u4e0e\u8fd9\u4e2a\u51f8\u5305\"\u76f8\u5207\"\u3002\n\n\u6211\u4eec\u8bbe\u5bf9\u4e8e\u51f8\u5305\u4e0a\u7684\u70b9 $(x,y)$\uff0c\u5b83\u7684\u5bf9\u5e94\u76f4\u7ebf\u659c\u7387\u4e3a $k$\uff0c\u660e\u663e\u6709 $y=kx+b$\u3002\u7531\u4e8e\u5b83\u662f\u88ab\u7b2c\u4e00\u4e2a\u78b0\u5230\u7684\uff0c\u6240\u4ee5 $b$ \u8981\u4e48\u662f\u6240\u6709\u70b9\u4e2d\u6700\u5927\u7684\uff0c\u8981\u4e48\u662f\u6240\u6709\u70b9\u4e2d\u6700\u5c0f\u7684\u3002\n\n\u6211\u4eec\u5c06\u76f4\u7ebf\u7684\u8868\u8fbe\u5f0f\u6539\u5199\u6210\u4e00\u822c\u5f0f $ax+by=c$\uff0c\u6211\u4eec\u7684\u76ee\u7684\u662f\u8ba9 $c$ \u6700\u5c0f\u3002\n\n\u800c\u5f53 $k$ \u4e00\u5b9a\u65f6 $a$ \u4e0e $b$ \u4e00\u5b9a\u5448\u67d0\u79cd\u500d\u6570\u5173\u7cfb\uff0c\u8fd9\u4e2a\u500d\u6570\u662f\u4e00\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f53 $a$ \u4e00\u5b9a\u65f6 $b$ \u53ea\u4e0e $k$ \u6709\u5173\uff0c\u6211\u4eec\u4e0d\u59a8\u8bbe $a+b=1$\uff0c\u53ef\u5f97 $ax_0\\pm(1-a)y_0=a(x_0\\pm y_0)\\mp y_0=c$\u3002\n\n\u540c\u6837\u5728\u4e00\u822c\u5f0f\u4e2d\u4f9d\u65e7\u6709\u5bf9\u4e8e\u51f8\u5305\u4e0a\u7684\u70b9\uff0c\u5b58\u5728\u67d0\u4e2a\u659c\u7387\u4f7f\u5f97\u8be5\u70b9\u5bf9\u5e94\u7684 $c$ \u662f\u6240\u6709\u70b9\u4e2d\u6700\u5927\u6216\u8005\u6700\u5c0f\u7684\uff0c\u5373 $\\exist x,(x_0\\pm y_0)x\\mp y_0=\\min((x_i\\pm y_i)x\\mp y_i)$\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 $c$ \u7684\u503c\u4e0e\u659c\u7387\u7684\u5173\u7cfb\u8f6c\u5316\u6210\u4e00\u4e2a\u4e00\u6b21\u51fd\u6570\uff1a$f_i(x)=(x_i\\pm y_i)x\\mp y_i$\u3002\u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u80fd\u5728 $x\\in[0,1]$ \u4e2d\u5b58\u5728\u6bd4\u5176\u5b83\u7684 $f$ \u51fd\u6570\u503c\u90fd\u5927/\u5c0f\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5b83\u5c31\u4e00\u5b9a\u662f\u51f8\u5305\u4e0a\u7684\u70b9\u3002\n\n\u8fd9\u660e\u663e\u53ef\u4ee5\u7528\u674e\u8d85\u7ebf\u6bb5\u6811\u6765\u8fdb\u884c\u7ef4\u62a4\uff0c$x$ \u7684\u53d6\u503c\u533a\u95f4\u4e3a $[0,1]$\uff0c\u5728\u8fd9\u4e2a\u533a\u95f4\u4e2d\u7528\u52a8\u6001\u5f00\u70b9\u7684\u65b9\u5f0f\u7ef4\u62a4\u6240\u6709\u70b9\u7684\u51fd\u6570\uff0c\u5982\u679c\u8be5\u51fd\u6570\u5728\u67d0\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u66f4\u65b0\u539f\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u6210\u4e3a\u51f8\u5305\u4e0a\u7684\u70b9\u3002\n\n\u63d2\u5165\u4e00\u4e2a\u70b9\u660e\u663e\u662f $\\log\\,n$ \u7684\uff0c\u76f4\u63a5\u50cf\u7ef4\u62a4\u4e00\u6b21\u51fd\u6570\u4e00\u6837\u66b4\u529b\u63d2\u5165\u5373\u53ef\u3002\n\n\u800c\u67e5\u8be2\u65f6\u53ef\u80fd\u51fa\u73b0\u5b83\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u6bd4\u5f53\u524d\u8282\u70b9\u7684\u51fd\u6570\u5927\uff0c\u4f46\u5374\u6ca1\u6709\u67d0\u4e2a\u7956\u5148\u7684\u51fd\u6570\u5927\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5728\u67e5\u8be2\u7684\u8fc7\u7a0b\u4e2d\u540c\u65f6\u4e0b\u4f20\u5b83\u6bd4\u6240\u6709\u7956\u5148\u7684\u51fd\u6570\u503c\u90fd\u5927\u7684\u53d6\u503c\u8303\u56f4\uff0c\u8fd9\u5f88\u660e\u663e\u53ef\u4ee5\u76f4\u63a5\u89e3\u51fa\u6765\uff0c\u5728\u5411\u5b50\u5b59\u4e0b\u4f20\u65f6\u9700\u8981\u66f4\u65b0\uff0c\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u662f $\\log\\,n$\u3002\n\n \u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O\\left(n\\log\\,n\\right)$\uff0c\u4f46\u7531\u4e8e\u8981\u7ef4\u62a4\u56db\u4e2a\u51fd\u6570\uff0c\u5e38\u6570\u53ef\u80fd\u4f1a\u6709\u70b9\u5927\u3002\n\n## \u6e90\u7801\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n#define MAXN 100005\n#define lowbit(x) (x&-x)\n#define reg register\n#define pb push_back\n#define mkpr make_pair\n#define fir first\n#define sec second\ntypedef long long LL;\ntypedef unsigned long long uLL;\nconst int mo=998244353;\nconst int jzm=2333;\nconst int lim=15;\nconst int orG=3,invG=332748118;\nconst double Pi=acos(-1.0);\nconst double eps=1e-7;\ntypedef pair<int,int> pii;\ntemplate<typename _T>\n_T Fabs(_T x){return x<0?-x:x;}\ntemplate<typename _T>\nvoid read(_T &x){\n\t_T f=1;x=0;char s=getchar();\n\twhile(s>'9'||s<'0'){if(s=='-')f=-1;s=getchar();}\n\twhile('0'<=s&&s<='9'){x=(x<<3)+(x<<1)+(s^48);s=getchar();}\n\tx*=f;\n}\ntemplate<typename _T>\nvoid print(_T x){if(x<0){x=(~x)+1;putchar('-');}if(x>9)print(x/10);putchar(x%10+'0');}\nLL gcd(LL a,LL b){return !b?a:gcd(b,a%b);}\nint add(int x,int y,int p){return x+y<p?x+y:x+y-p;}\nint qkpow(int a,int s,int p){int t=1;while(s){if(s&1LL)t=1ll*a*t%p;a=1ll*a*a%p;s>>=1LL;}return t;}\nint q;\nstruct line{\n\tdouble k,b;line(){k=b=0;}\n\tline(double K,double B){k=K;b=B;}\n\tdouble ask(const double x){return k*x+b;}\n};\nstruct ming{line mx;int lson,rson;ming(){mx=line(-1e9,-1e9);lson=rson=0;}};\nclass LiCao_SegmentTree{\n\tprivate:\n\t\tint tot;ming tr[MAXN];\n\tpublic:\n\t\tint root;line nd;\n\t\tvoid insert(int &rt,double l,double r,line aw,int dep){\n\t\t\tif(l>r||!dep)return ;if(!rt)rt=++tot;const double mid=(l+r)/2.0;\n\t\t\tif(tr[rt].mx.ask(mid)<aw.ask(mid))swap(tr[rt].mx,aw);\n\t\t\tif(tr[rt].mx.ask(l)<aw.ask(l))insert(tr[rt].lson,l,mid,aw,dep-1);\n\t\t\tif(tr[rt].mx.ask(r)<aw.ask(r))insert(tr[rt].rson,mid,r,aw,dep-1);\n\t\t}\n\t\tbool query(int rt,double l,double r,line aw,double al,double ar){\n\t\t\tif(al>ar)return 0;const double mid=(l+r)/2.0;\n\t\t\tif(!rt||(al<=mid&&mid<=ar&&tr[rt].mx.ask(mid)<aw.ask(mid)))return 1;double bl=al,br=ar;\n\t\t\tif(tr[rt].mx.ask(l)<aw.ask(l)||tr[rt].mx.ask(mid)<aw.ask(mid)){\n\t\t\t\tar=min(ar,mid);\n\t\t\t\tif(tr[rt].mx.ask(al)>aw.ask(al))al=max(al,(tr[rt].mx.b-aw.b)/(aw.k-tr[rt].mx.k))+eps;\n\t\t\t\tif(tr[rt].mx.ask(ar)>aw.ask(ar))ar=min(ar,(tr[rt].mx.b-aw.b)/(aw.k-tr[rt].mx.k))-eps;\n\t\t\t\tif(query(tr[rt].lson,l,mid,aw,al,ar))return 1;\n\t\t\t}\n\t\t\tif(tr[rt].mx.ask(r)<aw.ask(r)||tr[rt].mx.ask(mid)<aw.ask(mid)){\n\t\t\t\tal=bl;ar=br;al=max(al,mid);\n\t\t\t\tif(tr[rt].mx.ask(al)>aw.ask(al))al=max(al,(tr[rt].mx.b-aw.b)/(aw.k-tr[rt].mx.k))+eps;\n\t\t\t\tif(tr[rt].mx.ask(ar)>aw.ask(ar))ar=min(ar,(tr[rt].mx.b-aw.b)/(aw.k-tr[rt].mx.k))-eps;\n\t\t\t\tif(query(tr[rt].rson,mid,r,aw,al,ar))return 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n}T[4];\nsigned main(){\n\tread(q);\n\tfor(int i=1;i<=q;i++){\n\t\tint opt,x,y;read(opt);read(x);read(y);\n\t\tline tmp1=line(1.0*x+1.0*y,-1.0*y),tmp2=line(1.0*x-1.0*y,1.0*y);\n\t\tline tmp3=line(-1.0*x-1.0*y,1.0*y),tmp4=line(1.0*y-1.0*x,-1.0*y);\n\t\tif(opt==1)\n\t\t\tT[0].insert(T[0].root,0.0,1.0,tmp1,lim),\n\t\t\tT[1].insert(T[1].root,0.0,1.0,tmp2,lim),\n\t\t\tT[2].insert(T[2].root,0.0,1.0,tmp3,lim),\n\t\t\tT[3].insert(T[3].root,0.0,1.0,tmp4,lim);\n\t\telse{\n\t\t\tbool tp1=T[0].query(T[0].root,0.0,1.0,tmp1,0.0,1.0);if(tp1){puts(\"NO\");continue;}\n\t\t\tbool tp2=T[1].query(T[1].root,0.0,1.0,tmp2,0.0,1.0);if(tp2){puts(\"NO\");continue;}\n\t\t\tbool tp3=T[2].query(T[2].root,0.0,1.0,tmp3,0.0,1.0);if(tp3){puts(\"NO\");continue;}\n\t\t\tbool tp4=T[3].query(T[3].root,0.0,1.0,tmp4,0.0,1.0);if(tp4){puts(\"NO\");continue;}\n\t\t\tputs(\"YES\");\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\n\n\n",
        "postTime": 1628300277,
        "uid": 105141,
        "name": "StaroForgin",
        "ccfLevel": 9,
        "title": "\u9898\u89e3[CF70D]Professor's task"
    },
    {
        "content": "\u8fd9\u9898\u5c45\u7136\u641e\u4e86\u6211\u4e00\u665a\u4e0a\u3002\u3002\u3002\n\n\u9996\u5148\u9898\u9762\u7684\u7ffb\u8bd1\u5e76\u4e0d\u6e05\u6670\uff0c\u5982\u679c\u4ed4\u7ec6\u9605\u8bfb\u82f1\u6587\u539f\u9898\u4f1a\u770b\u5230\uff0c\u8be2\u95ee\u7684\u662f\u70b9(x,y)\u662f\u5426\u5728\u51f8\u5305\u5185\u90e8\uff08\u542b\u8fb9\u754c\uff09\uff0c~~\u53ef\u80fd\u4e5f\u53ea\u6709\u6211\u8fd9\u79cd\u50bbx\u4e00\u5f00\u59cb\u7406\u89e3\u6210\u4e86\u8be2\u95ee\u5728\u4e0d\u5728\u51f8\u5305\u4e0a~~\uff0c\u4ee5\u53ca\u8fd8\u6709\u4e00\u53e5\u8bdd\u6ca1\u6709\u7ffb\u8bd1\uff1a\u6240\u6709\u52a0\u5165\u96c6\u5408S\u7684\u70b9\u90fd\u4e0d\u540c\u3002\n\n\u7136\u540e\u6765\u8bf4\u8fd9\u9898\u600e\u4e48\u505a\u3002\u56de\u987e\u6211\u4eec\u6c42\u51f8\u5305\u7684\u8fc7\u7a0b\uff1a\u5148\u6309\u5750\u6807\u6392\u5e8f\uff0c\u7136\u540e\u5148\u6c42\u4e2a\u4e0a\u51f8\u58f3\uff0c\u518d\u6c42\u4e2a\u4e0b\u51f8\u58f3\uff0c\u56f4\u8d77\u6765\u5c31\u662f\u6574\u4e2a\u51f8\u5305\u3002\u6240\u4ee5\u8fd9\u9898\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u5206\u522b\u7ef4\u62a4\u4e0a\u51f8\u58f3\u548c\u4e0b\u51f8\u58f3\u3002\n\n\u8003\u8651\u7528\u5e73\u8861\u6811\u6765\u7ef4\u62a4\u51f8\u58f3\u3002\u4ee5\u4e0a\u51f8\u58f3\u4e3a\u4f8b\u3002\u5148\u4e0d\u8003\u8651\u4e00\u4e9b\u8fb9\u754c\u4e4b\u7c7b\u7684\u7ec6\u8282\u95ee\u9898\uff0c\u52a0\u5165\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u9996\u5148\u8981\u5224\u65ad\u5b83\u662f\u5426\u4f1a\u4ea7\u751f\u5f71\u54cd\uff0c\u5373\u5982\u679c\u5b83\u5728\u73b0\u6709\u7684\u51f8\u5305\u5185\u90e8\uff08\u4e0a\u51f8\u58f3\u7684\u4e0b\u65b9\uff0c\u4e0b\u51f8\u58f3\u7684\u4e0a\u65b9\uff09\u5c31\u76f4\u63a5\u9000\u51fa\u3002\u5728\u5df2\u77e5\u5b83\u4e00\u5b9a\u4f1a\u52a0\u5165\u51f8\u5305\u7684\u60c5\u51b5\u4e0b\uff0c\u8003\u8651\u5b83\u5de6\u53f3\u7684\u70b9\u662f\u5426\u4f1a\u5f62\u6210\u51f9\u7684\u56fe\u5f62\uff0c\u8fd9\u91cc\u53ef\u4ee5\u7528\u53c9\u79ef\u6765\u5224\u65ad\u3002\u53c9\u79ef\u4e00\u5b9a\u8981\u5f00long long\uff01\n\n\u6bd4\u65b9\u8bf4\u5982\u679c\u52a0\u5165\u4e0a\u51f8\u58f3\u7684\u70b9P(x, y)\uff0c\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u70b9\u662fA\uff0c\u7b2c\u4e8c\u4e2a\u70b9\u662fB\uff0c\u5982\u679c\u6298\u7ebfBAP\u5411\u4e0b\u51f9\u5c31\u8981\u5220\u9664A\uff0c\u7136\u540e\u7ee7\u7eed\u8fd9\u6837\u505a\u4e0b\u53bb\u3002\u5bf9\u53f3\u8fb9\u4e5f\u8fd9\u6837\u505a\uff0c\u7136\u540e\u5bf9\u4e0b\u51f8\u58f3\u4e5f\u662f\u4e00\u6837\u3002\n\n\u5177\u4f53\u7684\u5b9e\u73b0\u4e0a\uff0c\u6ce8\u610f\u5230\u56e0\u4e3a\u6211\u4eec\u662f\u7ef4\u62a4\u4e0a\u51f8\u58f3\u548c\u4e0b\u51f8\u58f3\uff0c\u56e0\u6b64\u5728\u4e00\u4e2a\u51f8\u58f3\u4e0a\uff0c\u6240\u6709\u7684\u70b9\u7684x\u5750\u6807\u4e24\u4e24\u4e0d\u540c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528std::map<int, int>\u6765\u7ef4\u62a4\uff0c\u4ee5\u6a2a\u5750\u6807\u4e3a\u5173\u952e\u5b57\uff0c\u7eb5\u5750\u6807\u4e3a\u503c\u3002\u5728\u8fed\u4ee3\u5668\u7684\u4f7f\u7528\u4e0a\u8981\u500d\u52a0\u5c0f\u5fc3\uff0c\u4ed4\u7ec6\u8003\u8651\u8fb9\u754c\u60c5\u51b5\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n\u6700\u540e\u518d\u4ecb\u7ecd\u4e00\u4e0b\u6211\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\uff0c\u4ee4\u5f88\u591aOIer\u6df1\u6076\u75db\u7edd\u7684std::next\uff08\u4ee5\u53ca\u5b83\u7684\u5144\u5f1fstd::prev\uff09\u3002\u81eaC++11\u8d77\uff0c\u5934\u6587\u4ef6<iterator>\u4e2d\uff0c\u547d\u540d\u7a7a\u95f4std\u5185\u65b0\u589e\u4e86\u4e09\u4e2a\u51fd\u6570\uff1astd::advance, std::next, std::prev\u3002\u5176\u4e2dstd::next\u548cstd::prev\u90fd\u662f\u8f6c\u800c\u8c03\u7528std::advance\u3002std::next\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u8fed\u4ee3\u5668i\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4e00\u4e2a\u5e26\u7b26\u53f7\u6574\u6570n\uff08\u9ed8\u8ba4\u4e3a1\uff09\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411i\u5f80\u540e\u79fbn\u7684\u4f4d\u7f6e\u3002std::prev\u4e5f\u4e00\u6837\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u5b83\u5f80\u524d\u79fb\u3002\u4f5c\u4e3a\u4e00\u4e2a\u770b\u5b8c\u4e86\u6574\u672c\u300aC++Primer\u300b\u7684\u4eba\uff0c\u6211\u8868\u793aC++Primer\u4e0a\u5e76\u6ca1\u6709\u63d0\u5230\u4e09\u4e2a\u51fd\u6570......\u6211\u4e5f\u662f\u67e5\u4e86cppreference\u624d\u77e5\u9053\u3002\u597d\u5728\u6211\u4ece\u6765\u90fd\u6ca1\u6709\u7528bits/stdc++.h\u5e93\u548c\u5199using namespace std\u7684\u4e60\u60ef\uff0c\u56e0\u6b64\u4ece\u6765\u6ca1\u6709\u56e0\u4e3anext\u800cCE\u8fc7\u3002\u3002\u3002\n  \n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include <cctype>\n#include <cstdio>\n#include <climits>\n#include <algorithm>\n#include <map>\n#include <iterator>\n\ntemplate <typename T> inline void read(T& t) {\n    int f = 0, c = getchar(); t = 0;\n    while (!isdigit(c)) f |= c == '-', c = getchar();\n    while (isdigit(c)) t = t * 10 + c - 48, c = getchar();\n    if (f) t = -t;\n}\ntemplate <typename T, typename... Args>\ninline void read(T& t, Args&... args) {\n    read(t); read(args...);\n}\n\n#define rep(I, A, B) for (int I = (A); I <= (B); ++I)\n#define rrep(I, A, B) for (int I = (A); I >= (B); --I)\n#define erep(I, X) for (int I = head[X]; I; I = next[I])\n\nstd::map<int, int> up, down;\nint n;\n\ninline long long cross(int x1, int y1, int x2, int y2) {\n    return 1ll * x1 * y2 - 1ll * x2 * y1;\n}\ninline bool checkUp(int x, int y) {\n    auto pos = up.lower_bound(x);\n    if (pos == up.end()) return false;\n    if (pos->first == x) return y <= pos->second;\n    if (pos == up.begin()) return false;\n    auto prev = std::prev(pos);\n    return cross(x - prev->first, y - prev->second, pos->first - prev->first, pos->second - prev->second) >= 0;\n}\ninline bool checkDown(int x, int y) {\n    auto pos = down.lower_bound(x);\n    if (pos == down.end()) return false;\n    if (pos->first == x) return y >= pos->second;\n    if (pos == down.begin()) return false;\n    auto prev = std::prev(pos);\n    return cross(x - prev->first, y - prev->second, pos->first - prev->first, pos->second - prev->second) <= 0;\n}\ninline void insertUp(int x, int y) {\n    if (checkUp(x, y)) return;\n    up[x] = y;\n    auto pos = up.find(x);\n    auto next = std::next(pos);\n    if (next != up.end()) {\n        auto next2 = std::next(next);\n        while (next2 != up.end()) {\n            if (cross(next->first - x, next->second - y, next2->first - x, next2->second - y) >= 0) {\n                up.erase(next);\n                next = next2;\n                next2 = std::next(next2);\n            } else break;\n        }\n    }\n    if (pos == up.begin()) return;\n    auto prev = std::prev(pos);\n    while (prev != up.begin()) {\n        auto prev2 = std::prev(prev);\n        if (cross(prev->first - x, prev->second - y, prev2->first - x, prev2->second - y) <= 0) {\n            up.erase(prev);\n            prev = prev2;\n        } else break;\n    }\n}\ninline void insertDown(int x, int y) {\n    if (checkDown(x, y)) return;\n    down[x] = y;\n    auto pos = down.find(x);\n    auto next = std::next(pos);\n    if (next != down.end()) {\n        auto next2 = std::next(next);\n        while (next2 != down.end()) {\n            if (cross(next->first - x, next->second - y, next2->first - x, next2->second - y) <= 0) {\n                down.erase(next);\n                next = next2;\n                next2 = std::next(next2);\n            } else break;\n        }\n    }\n    if (pos == down.begin()) return;\n    auto prev = std::prev(pos);\n    while (prev != down.begin()) {\n        auto prev2 = std::prev(prev);\n        if (cross(prev->first - x, prev->second - y, prev2->first - x, prev2->second - y) >= 0) {\n            down.erase(prev);\n            prev = prev2;\n        } else break;\n    }\n}\n\nint main() {\n    read(n);\n    rep(i, 1, n) {\n        int q, x, y;\n        read(q, x, y);\n        if (q == 1) {\n            insertUp(x, y);\n            insertDown(x, y);\n        } else {\n            puts(checkUp(x, y) && checkDown(x, y) ? \"YES\" : \"NO\");\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1533918224,
        "uid": 72071,
        "name": "GKxx",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 CF70D \u3010Professor's task\u3011"
    },
    {
        "content": "## \u52a8\u6001\u51f8\u5305\n\n\u5206\u522b\u7528\u4e24\u4e2a $\\text{std::map}$\uff1a$top$ \u4e0e $down$ \u6765\u7ef4\u62a4\u4e0a\u4e0b\u51f8\u5305\u3002\u9700\u8981\u652f\u6301\uff1a\n- \u5355\u70b9\u52a0\u5165\u3002\n- \u5355\u70b9\u8be2\u95ee\u4e0e\u51f8\u5305\u4f4d\u7f6e\u5173\u7cfb\u3002\n\n\u5176\u4e2d $top[x]/down[x]$ \u8868\u793a\u7684\u662f\u51f8\u5305\u4e0a\u6a2a\u5750\u6807\u4e3a $x$ \u7684\u70b9\u7684\u7eb5\u5750\u6807\uff0c\u5373 $top[x]/down[x]=y$\u3002\n\n### \u57fa\u672c\u51fd\u6570\n$\\text{vec()}$ \u5c06\u4e24\u4e2a\u70b9\u8f6c\u5316\u4e3a\u5411\u91cf\uff0c$\\text{cross}$ \u662f\u53c9\u79ef\u3002\u4e0e\u9759\u6001\u51f8\u5305\u4e00\u6837\u3002\n```cpp\npii vec(pii x, pii y) {\n\treturn {y.first - x.first, y.second - x.second};\n}\nint cross(pii a, pii b) {\n\treturn a.first * b.second - a.second * b.first;\n}\n```\n\n### \u5224\u65ad\u70b9\u662f\u5426\u5728\u51f8\u5305\u5185\u90e8\n\u5982\u56fe\uff0c\u4ee5\u4e0a\u51f8\u5305\u4e3a\u4f8b\uff0c\u84dd\u70b9\u5728\u51f8\u5305\u5185\u90e8\uff0c\u7ea2\u70b9\u5728\u5916\u90e8\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/go3tijzo.png)\n\n\u6240\u4ee5\u5224\u65ad\u662f\u5426\u5728\u5185\u90e8\u4e0e\u9759\u6001\u51f8\u5305\u57fa\u672c\u4e00\u6837\uff0c\u7528\u53c9\u79ef\u6216\u8005\u659c\u7387\u5224\u65ad\u5373\u53ef\u3002\n\n\u5177\u4f53\u5730\uff0c\u5728\u7ef4\u62a4\u4e0a\u51f8\u5305\u65f6\uff0c\u5982\u679c\u7531 $i-1$ \u4e0e $i$ \u6784\u6210\u7684\u5411\u91cf $\u00d7$ \u7531 $i-1$ \u4e0e $x$ \u6784\u6210\u7684\u5411\u91cf $\\le 0$\uff0c\u90a3\u4e48\u5c31\u662f\u56fe\u4e2d\u7684\u84dd\u70b9\u84dd\u7ebf\u60c5\u51b5\u3002\u7ea2\u70b9\u540c\u7406\u3002\n\n\u659c\u7387\u4e5f\u4e00\u6837\u3002\u603b\u4e4b\u5bf9\u7740\u56fe\u753b\u4e00\u753b\u5c31\u80fd\u753b\u51fa\u6765\u3002\n\n\u4ee3\u7801\uff0c\u4ee5\u4e0a\u51f8\u5305\u4e3a\u4f8b\uff1a\n```cpp\nbool inside_top(int x, int y) {\n\tauto it = top.lower_bound(x);\n\tif(it == top.end()) return false;\n\tif(it->first == x) return y <= it->second;\n\tif(it == top.begin()) return false;\n\tauto i = it, j = it;\n\t--j;\n\treturn cross(vec({j->first, j->second}, {i->first, i->second}), vec({j->first, j->second}, {x, y})) <= 0;\n}\n```\n\n### \u51f8\u5305\u4e0a\u5355\u70b9\u5220\u9664\n\u8fd9\u4e2a\u64cd\u4f5c\u662f\u7528\u6765\u5220\u9664\u51f8\u5305\u4e0a\u4e0d\u5408\u6cd5\u7684\u70b9\u7684\uff0c\u5728\u5355\u70b9\u63d2\u5165\u65f6\u9700\u8981\u4f7f\u7528\u3002\n\n\u901a\u8fc7\u70b9 $i$ \u4e0e\u5b83\u4e24\u8fb9\u7684\u70b9\u7684\u659c\u7387\u5173\u7cfb\u6765\u5224\u65ad\u662f\u5426\u5220\u9664\u3002\n\n\u4ee3\u7801\uff0c\u4ee5\u4e0a\u51f8\u5305\u4e3a\u4f8b\uff1a\n```cpp\nbool delete_top(map<int,int>::iterator i) {\n\tif(i == top.begin()) return false;\n\tauto j = i, k = i; \n\t--j;\n\t++k;\n\tif(k == top.end()) return false;\n\tif(cross(vec({j->first, j->second}, {i->first, i->second}), vec({j->first, j->second}, {k->first, k->second})) >= 0) {\n\t\ttop.erase(i);\n\t\treturn true;\n\t}\n\treturn false;\n}\n```\n\n### \u5355\u70b9\u63d2\u5165\n\u4ee5\u4e0a\u51f8\u5305\u4e3a\u4f8b\uff0c\u63d2\u5165\u70b9 $(x,y)$\u65f6\uff1a\n\n\u5148\u4ee4 $top[x]=y$\uff0c\u7136\u540e\u4e0d\u65ad\u5220\u9664\u5de6\u53f3\u4e24\u8fb9\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u70b9\uff0c\u9700\u8981\u7528\u5230\u4e0a\u9762\u7684\u5355\u70b9\u5220\u9664\u3002\n\n\u4ee3\u7801\uff1a\n> \u5173\u4e8e $\\text{std::next}$ \u4e0e $\\text{std::prev}$\uff1a\u7ed9\u5b83\u4e00\u4e2a\u8fed\u4ee3\u5668 $it$\uff0c\u8fd4\u56de $it$ \u7684\u4e0b\u4e00\u4e2a/\u4e0a\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\n\n```cpp\nvoid insert_top(int x, int y) {\n\tif(inside_top(x, y)) return;\n\ttop[x] = y;\n\tauto i = top.find(x), j = i;\n\tif(i != top.begin()) {// \u5411\u5de6\u8fb9\u5220 \n\t\t--j;\n\t\tauto next_j = next(j); \n\t\twhile(delete_top(j)) {\n\t\t\tj = next_j; \n\t\t\t--j;\n\t\t\tnext_j = next(j);\n\t\t}\n\t\t++j;\n\t}\n//\tassert(j == i); \n\tif(j != top.end()) { //\u5411\u53f3\u8fb9\u5220 \n\t\twhile(++j != top.end()) {\n\t\t\tauto prev_j = prev(j);\n\t\t\twhile(delete_top(j)) {\n\t\t\t\tj = prev_j;\n\t\t\t\t++j;\n\t\t\t\tprev_j = prev(j);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\u4f46\u662f\u8fd9\u4e2a\u5199\u6cd5\u6709\u70b9\u8822\uff0c\u5e76\u4e14 $\\text{std::next}$ \u4e0e $\\text{std::prev}$ \u5e38\u6570\u6709\u70b9\u5927\uff0c\u6bd4 $it++/it--$ \u6162\u3002\n\n\u6240\u4ee5\u7f51\u4e0a\u66f4\u901a\u7528\u7684\u5199\u6cd5\u5927\u6982\u662f\u8fd9\u6837\uff1a\n```cpp\nvoid insert_top(int x, int y) {\n\tif(inside_top(x, y)) return;\n\ttop[x] = y;\n\tauto i = top.find(x), j = i;\n\tif(i != top.begin()) {\n\t\t--j;\n\t\twhile(delete_top(j++)) --j;\n\t\t//\u6ce8\u610f\u4e0a\u9762\u8fd9\u4e00\u884c\uff0c\u6700\u540e\u4e00\u6b21\u4f1a j++ \u4f46\u662f\u4e0d\u4f1a --j\n\t}\n\tif(++j != top.end()) {\n\t\twhile(delete_top(j--)) ++j;\n\t\t//\u540c\u7406\n\t}\n}\n```\n\n\u4ee3\u7801\u77ed\uff0c\u8dd1\u5f97\u8fd8\u5feb\uff0c\u771f\u9999~\n\n\u81ea\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5199\u5b66\u4e60\u4e86\u52a8\u6001\u51f8\u5305\u6240\u9700\u7684\u6240\u6709\u64cd\u4f5c\uff01\n\n### \u6a21\u677f\uff1aCF70D. Professor's task\n\n[\u4ee3\u7801\u6233\u8fd9\u91cc](https://www.luogu.com.cn/paste/lto905of)\n\n",
        "postTime": 1644811078,
        "uid": 229981,
        "name": "hzy1",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011CF70D Professor's task"
    }
]