[
    {
        "content": "### 1.\u9898\u610f\u7ffb\u8bd1\n\n\u73b0\u5728\u8fd9\u4e2a\u7ffb\u8bd1\u5b9e\u5728\u662f\u592a\u8ff7\u4e86\u3002\n\n\u6709\u4e00\u4e2a\u5c71\u6d1e\u89c6\u4f5c\u7531 $n$ \u4e2a\u70b9\u7ec4\u6210\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u9ad8\u5ea6 $h_i$ , $k$\u4e2a\u4eba\u4ece $1$ \u53f7\u70b9\u51fa\u53d1\uff0c\u4f60\u9700\u8981\u7ed9\u8fd9 $k$ \u4e2a\u4eba\u5b89\u6392\u7ec8\u70b9 \uff0c \u6bcf\u4e2a\u70b9\u4ec5\u53ef\u4f5c\u4e3a\u4e00\u4e2a\u4eba\u7684\u7ec8\u70b9\uff0c\u4e00\u4e2a\u4eba\u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\u8def\u4e0a\u7684\u6240\u6709\u70b9\u9700\u8981\u5927\u4e8e\u4ed6\u7684\u8eab\u9ad8 $s_i$ \uff0c\u4f60\u53ef\u4ee5\u7ed9\u67d0\u4e00\u4e2a\u70b9\u4ef7\u9ad8 $t$ \uff0c\u6700\u5c0f\u5316 $t$ \u4f7f\u5f97\u6bcf\u4e2a\u4eba\u90fd\u80fd\u8d70\u5230\u4ed6\u7684\u7ec8\u70b9\uff0c\u6216\u8005\u5224\u65ad\u65e0\u89e3\u3002\n\n---\n\n### 2.\u601d\u8def\n\n\u5148\u8003\u8651\u4e0d\u52a0\u9ad8\u3002\n\n\u79f0\u6839\u5230\u8be5\u70b9\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\u4e3a\u8fd9\u4e2a\u70b9\u7684\u9650\u5236\u3002\n\n\u56e0\u4e3a\u8eab\u9ad8\u9ad8\u7684\u4eba\u80fd\u53bb\u7684\u70b9\u96c6\u4e00\u5b9a\u662f\u8eab\u9ad8\u4f4e\u7684\u4eba\u7684\u70b9\u7684\u5b50\u96c6\uff0c\u6240\u4ee5\u8003\u8651\u6309\u7167\u8eab\u9ad8\u964d\u5e8f\u540e\u8d2a\u5fc3\u5730\u653e\u5230\u53ef\u4ee5\u7684\u5c71\u6d1e\u91cc\uff0c\u663e\u7136\u8981\u6c42\u5c31\u662f\u7b2c $i$ \u9ad8\u7684\u4eba\u53ef\u4ee5\u53bb\u7684\u5c71\u6d1e\u7684\u4e2a\u6570\u8981\u5927\u4e8e $i$ \uff0c\u6bcf\u4e2a\u4eba\u53ef\u4ee5\u5230\u7684\u70b9\u7684\u4e2a\u6570\u53ef\u4ee5\u901a\u8fc7\u5dee\u5206\u7b80\u5355\u7684\u6c42\u51fa\u3002\n\n\u8003\u8651\u628a\u4e00\u4e2a\u70b9\u52a0\u9ad8\u5230 $x$\uff0c\u52a0\u9ad8\u4e00\u4e2a\u70b9 $A$ \u5bf9\u67d0\u4e2a\u70b9 $B$ \u6709\u5f71\u54cd\uff0c\u5f53\u4e14\u4ec5\u5f53 $A$ \u662f $1\\to B$ \u8def\u5f84\u4e0a\u7684\u552f\u4e00\u6700\u5c0f\u503c\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u8fd9\u6837\u4e00\u4e2a\u533a\u57df\n\n\n(\u56fe\u968f\u624b\u753b\u7684\u6bd4\u8f83\u8349\u7387)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/r82jeu76.png)\n\n\n\u76f4\u5230\u7ea2\u8272\u533a\u57df\uff0c\u5c31\u5f71\u54cd\u4e0d\u4e86\u7ea2\u8272\u533a\u57df\u548c\u5b83\u7684\u5b50\u6811\u4e86\u3002\n\n\u5bf9\u4e8e\u9ed1\u8272\u90a3\u5757\u533a\u57df\uff0c\u4ed6\u7684\u9650\u5236\u5c31\u53d8\u6210\u4e86 $\\min \\{\\text{\u6b21\u5c0f\u9650\u5236},x\\}$  \u3002\n\n\u7531\u4e8e\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684\u201c\u552f\u4e00\u6700\u5c0f\u503c\u201d\u4e2a\u6570\u662f\u4e0d\u8d85\u8fc7 1 \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u201c\u552f\u4e00\u6700\u5c0f\u503c\u63a7\u5236\u533a\u57df\u201d\uff0c\u8fd9\u4e9b\u201c\u63a7\u5236\u533a\u57df\u201d\u7684\u5927\u5c0f\u603b\u548c\u662f\u4e0d\u5927\u4e8e $n$ \u7684\u3002\n\n\u7136\u540e\u4e00\u4e2a\u70b9\u4ece\u5b83\u7684\u201c\u6700\u5c0f\u9650\u5236\u201d  $ ori $  \u53d8\u6210\u4e86  $new =\\min \\{\\text{\u6b21\u5c0f\u9650\u5236},x\\}$ \uff0c \u4ea7\u751f\u7684\u5f71\u54cd\u662f\u8ba9 $(ori , new] $ \u8eab\u9ad8\u7684\u4eba\u591a\u4e86\u4e00\u4e2a\u53ef\u4ee5\u53bb\u7684\u70b9\u3002\n\n\u5c31\u662f\u8bf4\u603b\u5171\u8981\u8fdb\u884c $n$ \u6b21\u5bf9\u4e00\u4e9b\u533a\u95f4\u5185\u4eba $f_i  + 1\\to f_i $ \uff0c \u5e76\u67e5\u8be2\u662f\u5426\u6ee1\u8db3\u6240\u6709\u7684 $f_i \\geq i$  \uff0c\u5176\u4e2d $f_i$ \u8868\u793a $i$ \u4eba\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\u6570\u3002\n\n\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u52a0\uff0c\u5168\u5c40 $\\min f_i - i$ \u662f\u5426\u5927\u4e8e $0$ \u5373\u53ef\u3002\n\n---\n\n### 3 \u4ee3\u7801\n\n\u7bc7\u5e45\u8f83\u957f\uff0c\u4e0d\u5728\u6b64\u5904\u653e\u51fa\uff0c\u7ebf\u6bb5\u6811\u53ea\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u52a0\uff0c\u6ca1\u6709 query \uff0c \u6574\u4f53\u7801\u91cf\u4e5f\u4e0d\u7b97\u5927 \uff0c \u9700\u8981\u8bb0\u5f97\u7279\u5224\u7b54\u6848\u4e3a 0 \u7684\u60c5\u51b5\u3002\n\n[\u4f20\u9001\u95e8|\u6211\u6c38\u8fdc\u559c\u6b22\u4e09\u65e0](https://www.luogu.com.cn/paste/386h9zwo)\n\n\n\n",
        "postTime": 1660145397,
        "uid": 161697,
        "name": "\u10e6\ua9bf\u0fd0",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011CF533A Berland Miners [\u601d\u7ef4,\u7ebf\u6bb5\u6811]"
    },
    {
        "content": "\u90a3\u65e2\u7136\u5927\u5bb6\u90fd\u662f\u725b\u903c 1log \u505a\u6cd5\u6211\u5c31\u7ed9\u4e2a\u53ea\u80fd 2log \u7684\u505a\u6cd5\u5427/\u6d41\u6cea\n\n\u8003\u8651\u628a $k$ \u4e2a\u4eba\u7684\u6743\u503c\u964d\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u8bbe $v_i$ \u662f\u7b2c $i$ \u4e2a\u8282\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u4f60\u628a $v$ \u4e5f\u964d\u5e8f\u6392\u5e8f\uff0c\u6700\u540e\u6700\u4f18\u79c0\u7684\u5339\u914d\u80af\u5b9a\u662f\u4e00\u4e00\u5bf9\u5e94\u5730\u53bb\u5339\u914d\uff0c\u8fd9\u662f\u7ecf\u5178\u7ed3\u8bba\u3002\n\n\u8003\u8651\u5982\u679c\u589e\u52a0\u4e00\u4e2a\u70b9 $u$ \u7684\u7b54\u6848\uff0c\u5b9e\u9645\u4e0a\u4f1a\u5bf9\u4ee5 $u$ \u4e3a\u6839\u7684\u4e00\u4e2a\u8fde\u901a\u5757\u7684 $v$ \u503c\u53bb\u589e\u52a0\uff0c\u800c\u4e14\u6bcf\u4e2a $v$ \u503c\u7684\u4e0a\u9650\u8fd8\u4e0d\u4e00\u6837\uff0c\u5177\u4f53\u800c\u8a00\u662f\u8def\u5f84\u4e0a\u7b2c\u4e8c\u5c0f\u7684\u6743\u503c\u4e0e\u6700\u5c0f\u6743\u503c\u7684\u5dee\u3002\u4e8b\u5b9e\u4e0a\u4f60\u4f1a\u53d1\u73b0\u7956\u5148\u6c38\u8fdc\u6bd4\u5b50\u5b59\u8981\u66f4\u4e3a\u4f18\u79c0\uff0c\u521d\u59cb\u7684 $v$ \u4e0d\u4f1a\u66f4\u5c0f\uff0c\u800c\u4e14\u589e\u52a0\u7684\u4e0a\u9650\u4e5f\u4e0d\u4f1a\u66f4\u5c0f\u3002\n\n\u7136\u540e\u8003\u8651\u4e8c\u5206\u7b54\u6848 $ans$\uff0c\u66b4\u529b\u679a\u4e3e\u589e\u52a0\u7684\u662f\u54ea\u4e2a\u8fde\u901a\u5757\uff0c\u52a0\u8d77\u6765\u662f $O(n)$ \u7684\u3002\u5047\u8bbe\u679a\u4e3e\u4e86\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u70b9\u5206\u522b\u4e3a $u_1,u_2,...,u_N$\u3002\u90a3\u4e48\u9996\u5148\u6309\u7167 $v$ \u6392\u5e8f\uff0c\u5982\u679c $v$ \u76f8\u540c\u6309\u7167\u589e\u52a0\u7684\u4e0a\u754c $lim$ \u6392\u5e8f\u3002\u7136\u540e\u4e00\u4e2a\u70b9\u539f\u672c\u7684\u503c $v$ \u548c\u65b0\u7684\u503c $nv$\uff0c\u6309\u7167\u65b0\u7684 $u_1,u_2,...,u_N$ \u7684\u987a\u5e8f\u53bb\u904d\u5386\u5c31\u4f1a\u5355\u8c03\u4e0d\u5347\u3002\u8fd9\u8ba9\u540e\u7eed\u7684\u5904\u7406\u53d8\u5f97\u5bb9\u6613\u3002\n\n\u7136\u540e\u8003\u8651\u8bbe $f(i)$ \u662f\u6392\u5e8f\u540e\u6700\u540e\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\u7b2c $i$ \u4e2a\u4eba\u7684\u6d1e\u7684\u7f16\u53f7\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u8ba9 $\\min\\{i-f(i)\\}$ \u53d8\u6210\u975e\u8d1f\u6570\u3002\u800c\u589e\u52a0\u4e00\u4e2a\u70b9\u7684\u503c\uff0c\u53ef\u4ee5\u89c6\u4f5c\u5220\u9664\u4e00\u6b21\uff0c\u518d\u5f80\u524d\u63d2\u5165\u4e00\u6b21\u3002\u624b\u73a9\u540e\u4f1a\u53d1\u73b0\u8fd9\u6837\u4e00\u4e2a\u4e8b\u60c5\uff1a\u8bbe $L$ \u4e3a\u7b2c\u4e00\u4e2a\u5c0f\u4e8e $nv$ \u7684\u4f4d\u7f6e\uff0c$R$ \u662f\u7b2c\u4e00\u4e2a\u521d\u59cb\u7684 $f$ \u5927\u4e8e\u7b49\u4e8e $x$ \u7684\u4f4d\u7f6e\uff0c\u5219\u628a\u7b2c $x$ \u4e2a\u4f4d\u7f6e\u4fee\u6539\u4e3a $nv$\uff0c\u7b49\u4ef7\u4e8e\u628a\u5bf9\u4e8e $i\\in [L,R)$ \u7684\u70b9\u7684 $i-f(i)$ \u51cf\u53bb\u4e00\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u641e\u51fa $2\\times N$ \u4e2a\u5dee\u5206\u6807\u8bb0\uff0c\u628a\u8fd9\u4e9b\u5dee\u5206\u6807\u8bb0\u6392\u5e8f\u540e\u53ea\u9700\u8981\u77e5\u9053\u6bcf\u4e00\u6bb5\u7684 $i-f(i)$ \u7684\u6700\u5c0f\u503c\u5373\u53ef\uff0c\u53ef\u4ee5\u7528 st \u8868\u9884\u5904\u7406\u3002\n\n\u7531\u4e8e\u4e8c\u5206\u5185\u8fd8\u8981\u4e8c\u5206\u67e5\u627e+\u6392\u5e8f\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n\\log w)$ \u7684\uff0c\u9700\u8981\u4e00\u4e9b\u5361\u5e38\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\n#define op(x) ((x&1)?x+1:x-1)\n#define odd(x) (x&1)\n#define even(x) (!odd(x))\n#define lc(x) (x<<1)\n#define rc(x) (lc(x)|1)\n#define lowbit(x) (x&-x)\n#define mp(x,y) make_pair(x,y)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\nusing namespace std;\nconst int MAXN=5e5+10,INF=1e9+10;\nint n,k,h[MAXN],s[MAXN],hh[MAXN];\nint pos[MAXN],lim[MAXN],rt[MAXN],depth[MAXN];\nvector<int>e[MAXN],V[MAXN];\narray<int,2>val[MAXN],tag[MAXN*2+10];\nint tag1[MAXN],tag2[MAXN];\nint cmp(array<int,2> x,array<int,2> y){\n    if(x[0]!=y[0])return x[0]>y[0];\n    else return depth[x[1]]<depth[y[1]];\n}\nint cmp2(int x,int y){return pos[x]<pos[y];}\nvoid dfs1(int u,int fa,int m1,int m2){\n    depth[u]=depth[fa]+1;\n    if(h[u]<h[m1])m2=m1,m1=u;\n    else if(h[u]<h[m2])m2=u;\n    lim[u]=h[m2];\n    val[u]={h[m1],u};\n    V[m1].push_back(u);rt[u]=(m1==u);\n    for(auto v:e[u])if(v!=fa)dfs1(v,u,m1,m2);\n}\nint st[20][MAXN],logn[MAXN],raw[MAXN];\nint qry(int L,int R){\n    if(L>R)return -INF;\n    int len=logn[R-L+1];\n    return max(st[len][L],st[len][R-(1<<len)+1]);\n}\nint cur1,cur2,cur;\nint ed[MAXN];\nvoid upd(int L,int R){if(L>R)return;tag[++cur]={L,1};tag[++cur]={R+1,-1};}\nint check(int u,int mid){\n    cur=cur1=cur2=0;\n    for(auto x:V[u]){\n        int p=pos[x],v=hh[p],nv=min(lim[x],v+mid);\n        int R=ed[p];\n        int L=lower_bound(s+1,s+1+k,nv,greater<int>())-s;\n        upd(L,R-1);\n    }\n    //sort\n    tag[++cur]={k+1,1};\n    sort(tag+1,tag+1+cur);\n    //\n    if(qry(1,tag[1][0]-1)>0)return 0;\n    int sum=0;\n    rep(i,1,cur){if(tag[i][0]>k)break;\n        sum+=tag[i][1];\n        if(tag[i][0]!=tag[i+1][0]){\n            int L=tag[i][0],R=tag[i+1][0]-1;\n            if(qry(L,R)>sum)return 0;\n        }\n    }\n    return 1;\n}\nint check(int mid){\n    rep(i,1,n)if(rt[i]){\n        if(check(i,mid))return 1;\n    }\n    return 0;\n}\nint main(){\n    logn[0]=-1;rep(i,1,500000)logn[i]=logn[i>>1]+1;\n    ios::sync_with_stdio(false);\n    cin>>n;\n    rep(i,1,n)cin>>h[i];\n    rep(i,1,n-1){\n        int u,v;cin>>u>>v;\n        e[u].push_back(v);e[v].push_back(u);\n    }\n    cin>>k;\n    rep(i,1,k)cin>>s[i];\n    sort(s+1,s+1+k,greater<int>());\n    h[0]=INF;\n    dfs1(1,0,0,0);\n    sort(val+1,val+1+n,cmp);\n    rep(i,1,n)hh[i]=val[i][0],pos[val[i][1]]=i;\n    rep(i,1,n)sort(V[i].begin(),V[i].end(),cmp2);\n    hh[n+1]=-INF;\n    rep(i,1,k)raw[i]=st[0][i]=upper_bound(hh+1,hh+1+n,s[i],greater<int>())-hh-1,st[0][i]=i-st[0][i];\n    rep(i,1,n){\n        int cur=max(1,ed[i-1]);\n        while(cur<=n && raw[cur]<i)cur++;\n        ed[i]=cur;\n    }\n    rep(i,1,19)rep(j,1,k)if(j+(1<<i)-1<=k)st[i][j]=max(st[i-1][j],st[i-1][j+(1<<(i-1))]);\n    if(qry(1,k)<=0){cout<<\"0\";return 0;}\n    int L=1,R=1e9,ret=-1;\n    while(L<=R){\n        int mid=(L+R)>>1;\n        if(check(mid)){ret=mid;R=mid-1;}\n        else{L=mid+1;}\n    }\n    cout<<ret;\n    return 0;\n}\n```",
        "postTime": 1660134435,
        "uid": 340632,
        "name": "Cry_For_theMoon",
        "ccfLevel": 8,
        "title": "CF533A"
    },
    {
        "content": "\u597d\u50cf\u5df2\u7ecf\u6709 $114$ \u5e74\u6ca1\u5199\u9898\u89e3\u4e86\u3002\uff08\u60b2\uff09\n\n\u63d0\u4f9b\u4e00\u4e2a\u505a\u6cd5\uff0c\u4e0d\u7528\u6570\u636e\u7ed3\u6784\uff0c\u53ea\u9700\u8981\u6392\u5e8f\u3002\n\n\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u5230\u6839\u7684\u6700\u5c0f\u9650\u5236\u548c\u6b21\u5c0f\u9650\u5236\u540e\uff0c\u53ef\u4ee5\u5c06\u6700\u5c0f\u9650\u5236\u76f8\u540c\u7684\u8fde\u901a\u5757\u5408\u5e76\uff0c\u5982\u679c\u4fee\u6539\u7684\u8bdd\u5fc5\u7136\u662f\u4fee\u6539\u8be5\u8fde\u901a\u5757\u7684\u6839\uff08\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\uff09\uff0c\u5e26\u6765\u7684\u6536\u76ca\u662f\u53ef\u4ee5\u63d0\u9ad8\u8fd9\u4e2a\u8fde\u901a\u5757\u91cc\u6240\u6709\u70b9\u7684\u6700\u5c0f\u9650\u5236\uff0c\u5f53\u7136\u6b21\u5c0f\u9650\u5236\u8fd8\u662f\u4e0d\u4f1a\u53d1\u751f\u4efb\u4f55\u53d8\u5316\u3002\n\n\u5047\u5982\u6ca1\u6709\u4fee\u6539\u64cd\u4f5c\uff0c\u5982\u4f55\u5b89\u653e\u5de5\u4eba\uff1f\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u5e94\u8be5\u628a\u6700\u9ad8\u7684\u5de5\u4eba\u5b89\u6392\u5728\u9650\u5236\u6700\u5927\u7684\u8282\u70b9\uff0c\u6b21\u9ad8\u7684\u653e\u5728\u6b21\u5927\u7684 $\\dots$ \u4f46\u662f\u73b0\u5728\u6709\u4e00\u6b21\u4fee\u6539\u673a\u4f1a\u3002\u6839\u636e\u4e0a\u6587\uff0c\u4fee\u6539\u80fd\u5f71\u54cd\u5230\u7684\u8303\u56f4\u662f\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u5047\u5982\u8be5\u8fde\u901a\u5757\u91cc\u6709\u7684\u5de5\u4eba\u8eab\u9ad8\u672c\u6765\u5c31\u6ca1\u6709\u8d85\u8fc7\u9650\u5236\uff0c\u90a3\u4e48\u5176\u5b9e\u5c31\u6d6a\u8d39\u4e86\u4ed6\u6240\u5728\u7684\u8fd9\u4e2a\u4f4d\u7f6e\uff08\u8282\u70b9\uff09\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u6709\u53ef\u80fd\u6709\u4e24\u4e2a\u8eab\u9ad8\u8d85\u8fc7\u9650\u5236\u7684\u5de5\u4eba\u5728\u539f\u8ba1\u5212\u4e2d\u5e76\u4e0d\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u4ea4\u6362\u5176\u4ed6\u5de5\u4eba\u5c06\u8fd9\u4e24\u4e2a\u8eab\u9ad8\u8d85\u8fc7\u9650\u5236\u7684\u5de5\u4eba\u653e\u5230\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u8fde\u901a\u5757\u8fdb\u884c\u4fee\u6539\uff0c\u4f7f\u5f97\u8fd9\u4e24\u4e2a\u5de5\u4eba\u7684\u8eab\u9ad8\u9650\u5236\u540c\u65f6\u88ab\u6ee1\u8db3\uff0c\u800c\u4e14\u5176\u4ed6\u4f4d\u7f6e\u4e0d\u53d7\u5f71\u54cd\u3002\n\n\u8fd9\u5c31\u662f\u5927\u4f53\u601d\u8def\uff0c\u518d\u8bb2\u8bb2\u600e\u4e48\u5b9e\u73b0\u7684\u3002\n\n\u5c06\u5de5\u4eba\u4ee5\u8eab\u9ad8\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\u518d\u5c06\u6bcf\u4e2a\u8282\u70b9\u4ee5\u6700\u5c0f\u9650\u5236\uff08\u4ece\u5927\u5230\u5c0f\uff09\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0cdfs \u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u6b21\u5c0f\u9650\u5236\uff08\u4ece\u5927\u5230\u5c0f\uff09\u4e3a\u7b2c\u4e09\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u679a\u4e3e\u8fde\u901a\u5757\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\uff0c\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n- \u4e0d\u5728\u8fd9\u4e2a\u8fde\u901a\u5757\u91cc\u4fee\u6539\uff1a\u90a3\u4e48\u5c31\u4ece\u5f53\u524d\u5269\u4e0b\u7684\u5de5\u4eba\u4e2d\u9009\u5c3d\u91cf\u8eab\u9ad8\u5c3d\u91cf\u9ad8\u7684**\u800c\u4e14\u80fd\u7b26\u5408\u9650\u5236\u7684**\u3002\n- \u5982\u679c\u9009\u62e9\u5728\u8fd9\u4e2a\u8fde\u901a\u5757\u91cc\u4fee\u6539\uff0c\u9996\u5148\u5f97\u6709\u80fd\u591f\u4fee\u6539\u7684\u8d44\u683c\uff0c\u9700\u8981\u6ee1\u8db3\u4e24\u65b9\u9762\u7684\u6761\u4ef6\uff1a\u4e00\u4e2a\u662f\u8eab\u9ad8\u9ad8\u4e8e\u8be5\u8fde\u901a\u5757\uff08\u4e14\u6ca1\u6709\u88ab\u524d\u9762\u8fde\u901a\u5757\u9009\u4e2d\uff09\u7684\u6240\u6709\u5de5\u4eba\u90fd\u5f97\u653e\u5230\u8fd9\u4e2a\u8fde\u901a\u5757\u91cc\u3002\u56e0\u4e3a\u5982\u679c\u8fd9\u4e2a\u8fde\u901a\u5757\u653e\u4e0d\u4e0b\uff0c\u653e\u5230\u540e\u9762\u5fc5\u7136\u4e0d\u53ef\u80fd\u6ee1\u8db3\u8eab\u9ad8\u9650\u5236\u3002\u4ee4\u4e00\u65b9\u9762\uff0c\u5982\u679c\u5728\u539f\u8ba1\u5212\u4e0b\uff0c\u63a5\u4e0b\u6765\u7684\u8fde\u901a\u5757\u91cc\u8fd8\u6709\u8eab\u9ad8\u8fc7\u9ad8\u7684\u5de5\u4eba\u80af\u5b9a\u4e5f\u4e0d\u884c\u3002\u5224\u65ad\u8fd9\u4e24\u4e2a\u662f\u7b80\u5355\u7684\u3002\n\n\u5728\u88ab\u4fee\u6539\u7684\u8fde\u901a\u5757\u91cc\u5148\u628a\u8eab\u9ad8\u9ad8\u4e8e\u8be5\u8fde\u901a\u5757\uff08\u4e14\u6ca1\u6709\u88ab\u524d\u9762\u8fde\u901a\u5757\u9009\u4e2d\uff09\u7684\u6240\u6709\u5de5\u4eba\u653e\u8fdb\u53bb\uff0c\u518d\u4ece\u5269\u4e0b\u7684\u5de5\u4eba\u91cc\u9009\u8eab\u9ad8\u5c3d\u91cf\u9ad8\u7684 $\\dots$ \u8ba1\u7b97\u6bcf\u4e2a\u5de5\u4eba\u5982\u679c\u8981\u653e\u5230\u5bf9\u5e94\u7684\u8282\u70b9\u4e0a\uff0c\u5f97\u589e\u52a0\u591a\u5c11\uff0c\u6c42\u6700\u5927\u503c\u3002\u8fd8\u8981\u6ce8\u610f\u6709\u4e9b\u5de5\u4eba\u5b89\u6392\u5230\u7684\u8282\u70b9\u6ee1\u8db3\u8fd9\u4e2a\u5de5\u4eba\u7684\u8eab\u9ad8\u6bd4\u8be5\u8282\u70b9\u7684\u6b21\u5c0f\u9650\u5236\u8fd8\u5927\uff0c\u90a3\u4e48\u8bf4\u660e\u600e\u4e48\u4fee\u6539\u90fd\u662f\u65e0\u6cd5\u6ee1\u8db3\u7684\uff0c\u56e0\u6b64\u867d\u7136\u9009\u62e9\u4e86\u8fd9\u4e2a\u8fde\u901a\u5757\u8981\u653e\u54ea\u4e9b\u5de5\u4eba\uff0c\u4e0d\u4ee3\u8868\u8fd9\u662f\u53ef\u4ee5\u968f\u4fbf\u653e\u7684\u3002\n\n\u7b56\u7565\u662f\u628a\u6700\u9ad8\u7684\u5de5\u4eba\u653e\u5230 dfs \u5e8f\u6700\u5c0f\u7684\u8282\u70b9\u4e0a\uff0c\u6b21\u9ad8\u7684\u5de5\u4eba\u653e\u5230 dfs \u5e8f\u6b21\u5c0f\u7684\u8282\u70b9\u4e0a $\\dots$ \u8fd9\u6837\u505a\u662f\u56e0\u4e3a\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0cdfs \u5e8f\u6700\u5c0f\u7684\u8282\u70b9\u6b21\u5c0f\u9650\u5236\u662f\u6700\u5c0f\u7684\uff0cdfs \u5e8f\u6b21\u5c0f\u7684\u8282\u70b9 \u6b21\u5c0f\u9650\u5236 \u662f\u6b21\u5c0f\u7684\uff08\u6709\u70b9\u7ed5\uff09\u5982\u679c\u8fd9\u6837\u8d2a\u5fc3\u653e\u90fd\u662f\u4e0d\u884c\u7684\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u8fd9\u4e2a\u8fde\u901a\u5757\u5982\u679c\u53bb\u4fee\u6539\u4ed6\uff0c\u662f\u4e0d\u53ef\u80fd\u6ee1\u8db3\u9898\u610f\u7684\uff0c\u53cd\u4e4b\uff0c\u5982\u679c\u4fee\u6539\u8fd9\u4e2a\u8fde\u901a\u5757\uff0c\u662f\u80fd\u641e\u51fa\u6ee1\u8db3\u9898\u610f\u7684\u89e3\u7684\uff0c**\u90a3\u4e48\u5c31\u5e94\u8be5\u5c06\u4fee\u6539\u8fd9\u4e2a\u8fde\u901a\u5757\u6240\u6d88\u8017\u7684\u4ee3\u4ef7\u4f5c\u4e3a\u6700\u7ec8\u7b54\u6848**\u3002\u5982\u679c\u8fd9\u4e2a\u8fde\u901a\u5757\u4ecd\u7136\u7ee5\u9756\uff0c\u540e\u9762\u7684\u7b54\u6848\u5fc5\u7136\u4e0d\u4f1a\u66f4\u4f18\u3002\n\n\u4e0a\u8ff0\u8fc7\u7a0b\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u7ef4\u62a4\uff0c\u8fd9\u662f\u56e0\u4e3a\u5c06\u6bcf\u4e2a\u8282\u70b9\u6392\u5e8f\u540e\uff0c**\u6bcf\u4e2a\u8fde\u901a\u5757\u5fc5\u7136\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4**\u3002\n\n\u6211\u4e00\u5f00\u59cb\u5199\u7684\u65f6\u5019\u72af\u4e86\u4e24\u4e2a\u9519\u8bef\uff0c\u7b2c\u4e00\u4e2a\u9519\u8bef\u6bd4\u8f83\u611a\u8822\uff1a\u6211\u5728\u5212\u5206\u8fde\u901a\u5757\u7684\u65f6\u5019\u76f4\u63a5\u6309\u7167\u6700\u5c0f\u9650\u5236\u76f8\u7b49\u7684\u8fdb\u884c\u5206\u7c7b\uff0c\u8fd9\u6837\u80af\u5b9a\u662f\u9519\u8bef\u7684\uff0chack\u6570\u636e\u5982\u4e0b\uff1a\n\n```\n3\n1145 1 4\n1 2\n1 3\n19 198 10\n```\n\n\u53ef\u4ee5\u5c06 $2$ \u53f7\u5de5\u4eba\u5b89\u6392\u5230 $1$ \u53f7\u70b9\u3002\u4f46\u663e\u7136 $2$ \u53f7\u70b9\u548c $3$ \u53f7\u70b9\u4e0d\u5c5e\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u56e0\u6b64\u65e0\u8bba\u5982\u4f55\u90fd\u65e0\u6cd5\u5c06\u5269\u4e0b\u7684\u4e24\u4e2a\u5de5\u4eba\u5b89\u6392\u5230\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u8fdb\u884c\u8865\u6551\u3002\u89e3\u51b3\u65b9\u6848\u662f\u5728\u9884\u5904\u7406\u7684\u65f6\u5019\u4e0d\u4ec5\u9884\u5904\u7406\u6700\u5c0f\u9650\u5236\uff0c\u8fd8\u9884\u5904\u7406\u6700\u5c0f\u9650\u5236\u6765\u81ea\u4e8e\u54ea\u4e00\u4e2a\u70b9\uff0c\u6bd4\u5982 $2$ \u53f7\u70b9\u7684\u6700\u5c0f\u9650\u5236\u6765\u81ea\u4e8e $2$ \u53f7\u70b9\uff0c$3$ \u53f7\u70b9\u7684\u6700\u5c0f\u9650\u5236\u867d\u7136\u4e0e\u5176\u76f8\u540c\uff0c\u4f46\u662f\u4e0d\u662f\u6765\u81ea\u4e8e\u540c\u4e00\u4e2a\u70b9\uff0c\u56e0\u6b64\u80af\u5b9a\u4e0d\u662f\u4e00\u4e2a\u8fde\u901a\u5757\u3002\n\n\u7b2c\u4e8c\u4e2a\u9519\u8bef\u662f\u524d\u4e00\u4e2a\u7684\u884d\u751f\u7269\u3002\u6211\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u6392\u5e8f\u53ea\u7528\u6700\u5c0f\u9650\u5236\u548c\u6b21\u5c0f\u9650\u5236\u4f5c\u4e3a\u5173\u952e\u5b57\uff0c\u8fd9\u6837\u6392\u5e8f\u4f1a\u5bfc\u81f4\u5982\u679c\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u6700\u5c0f\u9650\u5236\u76f8\u540c\uff0c\u8282\u70b9\u53ef\u80fd\u4f1a\u88ab\u6df7\u5230\u4e00\u8d77\uff0c\u5982\u679c\u6309\u7167 dfs \u5e8f\u4ece\u5c0f\u5230\u5927\u6392\u5c31\u4e0d\u4f1a\u6709\u8fd9\u4e2a\u95ee\u9898\u3002\n## \u540e\u8bb0\n\u6211\u4e00\u5f00\u59cb\u6ca1\u6709\u6ce8\u610f\u5230\u72af\u7684\u4e24\u4e2a\u9519\u8bef\uff0c\u4f46\u662f\u8fd8\u662f\u80fd AC\uff0c~~\u53ef\u89c1\u6570\u636e\u4e4b\u6c34~~\u3002\n\n\u4f46\u662f\u5f53\u6211\u6539\u6389\u7b2c\u4e00\u4e2a\u9519\u8bef\u540e\u53c8\u4ea4\u4e86\u4e00\u53d1\uff0c\u5c45\u7136\u5c31\u6302\u4e86\u3002\n\n\u8fd9\u5c31\u662f $\\color{red}\\text{-1}\\color{black}\\text{+}\\color{red}\\text{-1} \\color{black}\\text= \\color{green}\\text+$ \u5417\uff1f",
        "postTime": 1660143346,
        "uid": 240812,
        "name": "45dino",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF533A \u3010Berland Miners\u3011"
    },
    {
        "content": "\u4e3a\u5565\u9898\u89e3\u533a\u5168\u5728\u7ebf\u6bb5\u6811\u554a\u3002\n\n\u9996\u5148\u628a\u7269\u54c1\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u8fd9\u4e9b\u7269\u54c1\u80fd\u8fbe\u5230\u7684\u70b9\u80af\u5b9a\u662f\u4e00\u4e2a\u5305\u542b\u7684\u5173\u7cfb\u3002\n\n\u6240\u4ee5\u6839\u636e\u970d\u5c14\u5b9a\u7406\uff0c\u7b2c $i$ \u4e2a\u7269\u54c1\u80fd\u5230\u8fbe\u7684\u6d1e\u8981 $\\geq i$ \u3002\n\n\u6211\u4eec\u628a\u6d1e\u4e5f\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u6bcf\u6b21\u7269\u54c1\u9ad8\u5ea6 $T$ \u53d8\u5c0f\u4e86\uff0c\u6b64\u65f6\u5982\u679c\u6709\u6ee1\u8db3\u9ad8\u5ea6 $H\\geq T$ \u7684\u6d1e\uff0c\u5c31\u628a\u8fd9\u4e2a\u6d1e\u52a0\u8fdb\u6811\u3002\u6700\u540e $1$ \u6240\u5728\u7684\u8054\u901a\u5757\u5927\u5c0f\u5c31\u662f\u80fd\u5230\u8fbe\u7684\u6d1e\u6570\u91cf\u3002\n\n\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u6c42\u51fa\u5728\u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u6709\u54ea\u4e9b\u7269\u54c1\u201c\u4e0d\u6ee1\u8db3\u201d\uff0c\u5e76\u4e14\u9700\u8981\u8865\u591a\u5c11\u4e2a\u70b9\u624d\u80fd\u6ee1\u8db3\u3002\n\n\u6211\u4eec\u8003\u5bdf\u4e00\u4e0b\u9009\u62e9\u7684\u8981\u53d8\u9ad8\u7684\u6d1e\u8981\u6ee1\u8db3\u5565\u6027\u8d28\uff0c\u4e14\u8981\u53d8\u9ad8\u591a\u5c11\u3002\n\n1. \u5728\u52a0\u6700\u540e\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7269\u54c1\u65f6\uff0c\u8fd9\u4e2a\u6d1e\u4ecd\u7136\u6ca1\u88ab\u52a0\u4e0a\u3002\n\n2. \u5728\u52a0\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7269\u54c1\u65f6\uff0c\u8fd9\u4e2a\u6d1e\u7684\u7236\u4eb2\u4e0e $1$ \u8fde\u901a\u3002\n\n\u8981\u53d8\u6210\u591a\u9ad8\uff1f\u6211\u4eec\u4e00\u5b9a\u662f\u8ba9\u5b83\u53d8\u6210\u548c\u7b2c\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7269\u54c1\u4e00\u6837\u9ad8\u3002\n\n\u6211\u4eec\u4ecd\u7136\u6267\u884c\u4e00\u904d\u52a0\u70b9\u7684\u8fc7\u7a0b\uff0c\u540c\u65f6\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u6ee1\u8db3 $1,2$ \u6027\u8d28\u7684\u70b9\u7684\u6743\u503c\uff0c\u6743\u503c\u6307\u628a\u5b83\u8865\u4e0a\u4ee5\u540e\u7684\u8d21\u732e\u3002\u7531\u4e8e\u6027\u8d28 $2$ \u7684\u5b58\u5728\uff0c\u53d1\u73b0\u6bcf\u6b21\u52a0\u4e86 $x$\uff0c\u4f60\u53ea\u9700\u8981\u8003\u8651 $x$ \u6240\u5728\u8054\u901a\u5757\u7684 $rt$ \u5bf9\u7236\u4eb2\u7684\u8d21\u732e\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7269\u54c1\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a $set$ \uff0c\u8bb0\u5f55\u4e00\u4e2a\u4e8c\u5143\u7ec4\u8868\u793a\u6240\u6709\u6ee1\u8db3 $1,2$ \u6027\u8d28\u7684\u70b9\u548c\u5b83\u4eec\u5f53\u524d\u7684\u6743\u503c\uff0c\u53d1\u73b0\u6743\u503c\u5c0f\u7684\u4e00\u4e2a\u524d\u7f00\u4f1a\u88ab\u5f39\u51fa\u53bb\u3002\n\n\u6700\u540e $set$ \u7a7a\u4e86\u5c31\u662f\u65e0\u89e3\uff0c\u5426\u5219\u627e\u5230\u672c\u6765\u6700\u9ad8\u7684\u70b9\uff0c\u8ba1\u7b97\u5373\u53ef\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvector<int>g[501000];\nint n,q,h[500100],f[501000],sz[501000],id[500100];\nbool cmp(int x,int y){return h[x]>h[y];}\nbool cmp2(int x,int y){return x>y;}\nint F(int x){\n\tif(x==f[x])return x;\n\treturn f[x]=F(f[x]);\n}\nint fa[501000];\nvoid dfs(int x){for(int v:g[x])if(fa[x]!=v)fa[v]=x,dfs(v);}\n#define mp make_pair\nint vp[501000],ans[500100];\nint bt[501000],tk[501000];\nbool sb[501000];\nset<pair<int,int> >s;\nvoid ins(int x){\n\tsz[x]=1;\n\tfor(int v:g[x])if(sz[v]){\n\t\tint k1=F(v),k2=F(x);\n\t\tif(fa[v]==x)f[k1]=k2,sz[k2]+=sz[k1];\n\t\telse f[k2]=k1,sz[k1]+=sz[k2];\n\t}\n\tint cc=fa[F(x)];\n\tif(sb[cc]&&s.count(mp(tk[cc],cc))){\n\t\ts.erase(mp(tk[cc],cc));\n\t\ttk[cc]+=sz[F(x)];\n\t\ts.insert(mp(tk[cc],cc));\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&h[i]),f[i]=id[i]=i;\n\tsort(id+1,id+n+1,cmp); \n\tfor(int i=1,u,v;i<n;i++)scanf(\"%d%d\",&u,&v),g[u].push_back(v),g[v].push_back(u);\n\tdfs(1);\n\tscanf(\"%d\",&q);\n\tfor(int i=1;i<=q;i++)scanf(\"%d\",&vp[i]);\n\tsort(vp+1,vp+q+1,cmp2);\n\tint now=1,R=-1,L=q+1;\n\tfor(int i=1;i<=q;i++){\n\t\twhile(now<=n&&h[id[now]]>=vp[i])\n\t\t\tins(id[now++]);\n\t\tif(sz[F(1)]<i)bt[i]=i-sz[F(1)],R=i,L=min(L,i);//\u8bf7\u7ed9\u6211\u4ee5\u706b\u2026\u2026 \n\t}\n\tif(R==-1)return puts(\"0\"),0;\n\tfor(int i=1;i<=n;i++)f[i]=i,sz[i]=0;now=1;\n\tfor(int i=1;i<=L;i++)\n\t\twhile(now<=n&&h[id[now]]>=vp[i])ins(id[now++]);\n\tfor(int i=1;i<=n;i++)if(h[i]<vp[R]&&(i==1||F(fa[i])==F(1)&&sz[1]))sb[i]=tk[i]=1,s.insert(mp(1,i));\n\tfor(int i=1;i<=n;i++)f[i]=i,sz[i]=0;now=1;\n\tfor(int i=1;i<=q;i++){\n\t\twhile(now<=n&&h[id[now]]>=vp[i])ins(id[now++]);\n\t\tif(bt[i]){\n\t\t\tauto it=s.begin();\n\t\t\tfor(;it!=s.end()&&(*it).first<bt[i];it++);\n\t\t\ts.erase(s.begin(),it);\n\t\t}\n\t}\n\tif(s.empty())puts(\"-1\");\n\telse{\n\t\tint ans=1e9+7;\n\t\tfor(auto it:s)ans=min(ans,vp[L]-h[it.second]);\n\t\tprintf(\"%d\",ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1660128696,
        "uid": 223624,
        "name": "Apollo13",
        "ccfLevel": 8,
        "title": "CF533A"
    },
    {
        "content": "\u53e6\u5916\u4e24\u4e2a\u9898\u89e3\u611f\u89c9\u4e0d\u662f\u5f88\u80fd\u770b\u61c2\uff0c\u6211\u6765\u6c34\u4e00\u7bc7\u3002\n\n\n\u628a\u77ff\u5de5\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u5230\u6839\u7684\u6700\u5c0f\u548c\u6b21\u5c0f\u503c\u3002\u8bbe\u7b2c $i$ \u4e2a\u77ff\u5de5\u80fd\u8fdb $c_i$ \u4e2a\u6d1e\uff0c\u65ad\u8a00\uff1a\u5f53\u4e14\u4ec5\u5f53\u6240\u6709 $i+c_i>k$ \u65f6\u53ef\u884c\u3002\u8bc1\u660e\u8003\u8651\u628a\u6bcf\u4e2a\u70b9\u6309\u7167\u5230\u6839\u7684\u6700\u5c0f\u503c\u6392\u5e8f\uff0c\u76f4\u63a5\u628a\u77ff\u5de5\u653e\u8fdb\u6700\u540e\u7684 $k$ \u4e2a\u70b9\uff0c\u82e5\u4e0d\u53ef\u884c\u5219\u5fc5\u5b9a\u65e0\u89e3\u3002\n\n\u6c42\u51fa\u6700\u5927\u7684 $i$ \u4f7f\u5f97 $i+c_i\\le k$\uff0c\u5fc5\u7136\u9700\u8981\u628a\u4e00\u4e2a\u6d1e\u7a74\u6269\u5927\u5230 $s_i$\uff0c\u56e0\u4e3a\u5927\u4e8e $s_i$ \u5fc5\u5b9a\u4e0d\u4f18\uff0c\u800c\u5c0f\u4e8e $s_i$ \u5219 $i+c_i$ \u8fd8\u662f\u4e0d\u5927\u4e8e $k$\u3002\u4e8e\u662f\u8003\u8651\u679a\u4e3e\u6269\u5927\u54ea\u4e2a\u6d1e\u7a74\u3002\n\n\u6269\u5927\u4e00\u4e2a\u6d1e\u7a74\u4f1a\u4fee\u6539\u5b83\u5b50\u6811\u5185\u4e00\u90e8\u5206\u70b9\u5230\u6839\u7684\u6700\u5c0f\u503c\uff0c\u53ef\u4ee5\u4f53\u73b0\u4e3a\u5220\u9664\u4e00\u4e9b\u70b9\u518d\u63d2\u5165\u4e00\u4e9b\u70b9\u3002\u5bb9\u6613\u53d1\u73b0\u4e00\u4e2a\u70b9\u4f1a\u88ab\u5f71\u54cd\u5373\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u6700\u5c0f\u503c\u4e3a\u5f53\u524d\u70b9\uff0c\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u4f1a\u5f71\u54cd\u5230\u54ea\u4e9b\u70b9\u5373\u53ef\uff0c\u90a3\u4e48\u66b4\u529b\u627e\u5230\u6240\u6709\u4f1a\u88ab\u5f71\u54cd\u7684\u70b9\u7684\u603b\u65f6\u95f4\u5f00\u9500\u662f $O(n)$\u3002\u4e8e\u662f\u53ef\u4ee5\u66b4\u529b\u63d2\u5165\u548c\u5220\u9664\u70b9\uff0c\u4f5c\u7528\u5230\u5e8f\u5217 $c$ \u4e0a\uff0c\u5219\u4e3a\u524d\u7f00\u52a0\u51cf\u64cd\u4f5c\u3002\u53ef\u4ee5\u4e8c\u5206\u51fa\u4f5c\u7528\u8303\u56f4\u5e76\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 $i+c_i$ \u7684\u6700\u5c0f\u503c\u3002\u603b\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int readint(){\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxn=5e5+5;\nint n,k,h[maxn],s[maxn];\nvector<int> g[maxn];\nint fa[maxn],mn[maxn],mn2[maxn];\nvector<int> q[maxn];\nconst int inf=2e9;\nvoid dfs(int u){\n\tif(u==1){\n\t\tmn[1]=1;\n\t\tmn2[1]=inf;\n\t}\n\telse if(h[u]<h[mn[fa[u]]]){\n\t\tmn2[u]=h[mn[fa[u]]];\n\t\tmn[u]=u;\n\t}\n\telse{\n\t\tmn[u]=mn[fa[u]];\n\t\tmn2[u]=min(mn2[fa[u]],h[u]);\n\t}\n\tq[mn[u]].push_back(u);\n\tfor(int v:g[u]){\n\t\tif(v==fa[u]) continue;\n\t\tfa[v]=u;\n\t\tdfs(v);\n\t}\n}\nstruct node{\n\tint l,r;\n\tnode* ch[2];\n\tint mn,add=0;\n\tvoid pushup(){\n\t\tmn=min(ch[0]->mn,ch[1]->mn);\n\t}\n\tnode(int l,int r):l(l),r(r),mn(l){\n\t\tif(l==r) return;\n\t\tint mid=l+(r-l)/2;\n\t\tch[0]=new node(l,mid);\n\t\tch[1]=new node(mid+1,r);\n\t}\n\tvoid pushtag(int k){\n\t\tmn+=k;\n\t\tadd+=k;\n\t}\n\tvoid pushdown(){\n\t\tch[0]->pushtag(add);\n\t\tch[1]->pushtag(add);\n\t\tadd=0;\n\t}\n\tvoid modify(int ql,int qr,int k){\n\t\tif(ql<=l&&qr>=r){\n\t\t\tpushtag(k);\n\t\t\treturn;\n\t\t}\n\t\tpushdown();\n\t\tif(ql<=ch[0]->r) ch[0]->modify(ql,qr,k);\n\t\tif(qr>=ch[1]->l) ch[1]->modify(ql,qr,k);\n\t\tpushup();\n\t}\n\tint query(int x){\n\t\tif(l==r) return mn;\n\t\tpushdown();\n\t\tif(x<=ch[0]->r) return ch[0]->query(x);\n\t\telse return ch[1]->query(x);\n\t}\n}*rt;\nvoid modify(int x,bool t){\n\tint p=upper_bound(s+1,s+k+1,x)-s-1;\n\tif(p) rt->modify(1,p,t?1:-1);\n}\nint main(){\n\t#ifdef LOCAL\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tfreopen(\"out.txt\",\"w\",stdout);\n\t#endif\n\tn=readint();\n\tfor(int i=1;i<=n;i++) h[i]=readint();\n\tfor(int i=1;i<n;i++){\n\t\tint a,b;\n\t\ta=readint();\n\t\tb=readint();\n\t\tg[a].push_back(b);\n\t\tg[b].push_back(a);\n\t}\n\tk=readint();\n\tfor(int i=1;i<=k;i++) s[i]=readint();\n\tsort(s+1,s+k+1);\n\tdfs(1);\n\trt=new node(1,k);\n\tfor(int i=1;i<=n;i++) modify(h[mn[i]],1);\n\tint res=-1;\n\tfor(int i=k;i>0;i--) if(rt->query(i)<k+1){\n\t\tres=s[i];\n\t\tbreak;\n\t}\n\tif(res<0){\n\t\tprintf(\"0\\n\");\n\t\treturn 0;\n\t}\n\tint ans=inf;\n\tfor(int i=1;i<=n;i++) if(h[i]<res){\n\t\tfor(int j:q[i]){\n\t\t\tmodify(h[i],0);\n\t\t\tmodify(min(mn2[j],res),1);\n\t\t}\n\t\tif(rt->mn>=k+1) ans=min(ans,res-h[i]);\n\t\tfor(int j:q[i]){\n\t\t\tmodify(min(mn2[j],res),0);\n\t\t\tmodify(h[i],1);\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans<inf?ans:-1);\n\t#ifdef LOCAL\n\tfprintf(stderr,\"%d\\n\",(int)clock());\n\t#endif\n\treturn 0;\n}\n```",
        "postTime": 1630244367,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF533A \u3010Berland Miners\u3011"
    },
    {
        "content": "\n\u6ca1\u60f3\u5230\u849f\u84bb\u6211\u6709\u751f\u4e4b\u5e74\u7adf\u7136\u4e5f\u80fdA\u4e0a\u4e00\u9053VK CUP\u7684\u9898\u3002\n\n[\u672c\u849f\u84bb\u7684Blog](https://www.chnxuzhiyuan.cn/2019/03/15/%E3%80%8CVK%20Cup%202015-Round%202%E3%80%8DA.Berland%20Miners%20%E3%80%8CZJOI%E6%A8%A1%E6%8B%9F%E8%B5%9B%E3%80%8D%E4%BF%84%E5%88%BB%E9%98%BF%E8%AF%BA%E6%96%AF-Solution/)\n### \u4f20\u9001\u95e8\n\n\u539f\u9898\u94fe\u63a5\uff1a\n\n[CF533A](http://codeforces.com/problemset/problem/533/A)\n\n[\u6d1b\u8c37](https://www.luogu.org/problemnew/show/CF533A)\n\n\n\u4e0b\u6587\u4e2d\u7684B\u6570\u7ec4\u5c31\u662f\u68d2\u5b50\u7684\u957f\u5ea6\u3002\n\n### \u9898\u89e3\n\n\u9996\u5148\u8003\u8651\u6ca1\u6709\u5f00\u51ff\u64cd\u4f5c\u65f6\uff0c\u5982\u4f55\u5224\u65ad\u5f53\u524d\u7684\u60c5\u51b5\u662f\u5426\u5408\u6cd5\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u80fd\u5426\u5c06\u4e00\u6839\u68d2\u5b50\u653e\u8fdb\u4e00\u4e2a\u6d1e\u7a74\u91cc\uff0c\u53d6\u51b3\u4e8e\u8be5\u6d1e\u7a74\u5230\u6839\u4e2d\u9ad8\u5ea6\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u8bbe\u6bcf\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u9ad8\u5ea6\u6700\u5c0f\u503c\u4e3a$Min[i]$\uff08\u53ef\u4ee5$O(n)$\u6784\u9020\u51fa\u6765\uff09\u3002\u5bf9$Min$\u548c$B$\u4e24\u4e2a\u6570\u7ec4\u5206\u522b\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n\u5f53\u6ee1\u8db3$B[i] \\leq Min[j]$\u65f6\uff0c\u68d2\u5b50$i$\u5c31\u53ef\u4ee5\u653e\u8fdb\u6d1e\u7a74$j$\u91cc\u3002\u8bbe\u7b2c$i$\u6839\u68d2\u5b50\u53ef\u4ee5\u653e\u8fdb$num[i]$\u4e2a\u6d1e\u7a74\u3002\u5f53\u6ee1\u8db3$\\forall i,num[i]\\geq i$\u65f6\uff0c\u5c31\u5408\u6cd5\u3002\u4e5f\u5c31\u662f\u5f53\u4e14\u4ec5\u5f53$\\min_{i=1}^{n}{(num[i]-i)}\\geq 0$\u65f6\u5408\u6cd5\u3002\n\n\u7136\u540e\u8003\u8651\u5f00\u51ff\u64cd\u4f5c\u3002\u7531\u4e8e\u4e0d\u77e5\u9053\u5f00\u51ff\u54ea\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48$O(n)$\u679a\u4e3e\u8fc7\u53bb\u3002\u7136\u540e\u4e8c\u5206\u8981\u5f00\u51ff\u7684\u9ad8\u5ea6\u3002\n\n![1.png](https://www.chnxuzhiyuan.cn/images/\u300cVK Cup 2015-Round 2\u300dA.Berland Miners \u300cZJOI\u6a21\u62df\u8d5b\u300d\u4fc4\u523b\u963f\u8bfa\u65af-Solution-1.png)\n\n\u6bd4\u5982\u8981\u5bf9\u56fe\u4e2d\u8fd9\u4e2a\u8282\u70b9\u8fdb\u884c\u5f00\u51ff\uff0c\u90a3\u4e48\u5b83\u7684\u5b50\u6811\u4e2d\u7684\u4ee5\u8be5\u8282\u70b9\u4e3a\u6700\u5c0f\u503c\u7684\u8282\u70b9\u7684$Min$\u503c\u5c31\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5$Min$\u6570\u7ec4\u4e2d\u5c31\u53ef\u80fd\u9700\u8981\u5220\u53bb\u51e0\u4e2a\u539f\u5148\u7684\u503c\u7136\u540e\u52a0\u5165\u51e0\u4e2a\u65b0\u5143\u7d20\uff08\u53ef\u80fd\u52a0\u5165\u4e8c\u5206\u540e\u7684\u9ad8\u5ea6\u6216\u539f\u5148\u5230\u6839\u8282\u70b9\u94fe\u4e0a\u7684\u6b21\u5c0f\u503c\uff09\uff0c\u7531\u4e8e$Min$\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u5bf9$num$\u6570\u7ec4\u4e2d\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4\u4ea7\u751f\u8d21\u732e\uff0c\u4e14\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u540e\u4e00\u6574\u4e2a\u533a\u95f4\u7684\u503c\u88ab\u51cf1\uff0c\u52a0\u5165\u4e00\u4e2a\u5143\u7d20\u540e\u4e00\u6574\u4e2a\u533a\u95f4\u7684\u503c\u88ab\u52a01\uff0c\u6240\u4ee5\u5c31\u5957\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5168\u5c40\u6700\u5c0f\u503c\u5373\u53ef\u3002\u5e76\u4e14\u7531\u4e8e\u6bcf\u4e2a\u8282\u70b9\u5230\u6811\u6839\u7684\u94fe\u4e0a\u53ea\u6709\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u5728\u4e8c\u5206\u7684\u65f6\u5019\u4f1a\u5f71\u54cd\u5230\u5b83\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n\\log n \\log B_i)$\u3002\n\n\u7136\u540e\u849f\u84bb\u6211\u50bb\u5475\u5475\u5730\u5361\u4e86\u534a\u5929\u5e38\u6570\uff0c\u6b7b\u6d3b\u8fc7\u4e0d\u53bb\uff0c\u53ea\u597d\u60f3$O(n\\log n)$\u7684\u505a\u6cd5\u3002\n\n\u7ecf\u8fc7ZZK\u5927\u4f6c\u7684\u70b9\u62e8\uff0c\u6211\u53d1\u73b0\u5176\u5b9e\u6839\u672c\u4e0d\u9700\u8981\u4e8c\u5206\u3002\n\n\u627e\u5230\u6700\u957f\u7684$num_i-B_i$\u7684\u503c\u5c0f\u4e8e\u96f6\u7684\u68d2\u5b50\uff0c\u90a3\u4e48\u5982\u679c\u6709\u89e3\uff0c\u5c31\u4e00\u5b9a\u8981\u5c06\u67d0\u4e2a\u6d1e\u7a74\u7684\u9ad8\u5ea6\u5f00\u51ff\u5230\u8fd9\u6839\u68d2\u5b50\u7684\u957f\u5ea6\u3002\n\n\u4e8e\u662f\u4e4e\u5c31\u53ef\u4ee5$O(n)$\u679a\u4e3e\u5f00\u51ff\u54ea\u4e00\u4e2a\u6d1e\u7a74\uff0c\u7136\u540e\u68c0\u67e5\u4e00\u4e0b\u5f00\u51ff\u5b8c\u4e4b\u540e\u662f\u5426\u5408\u6cd5\u5c31\u597d\u4e86\u3002\n\n### \u4ee3\u7801\n\n\u4e0b\u9762\u662f\u4e24\u4e2alog\u7684\u4ee3\u7801\uff08\u8d3c\u6162\uff09\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int maxn=200005,inf=0x3F3F3F3F;\nint n,m,tot,lnk[maxn],w[maxn],son[maxn*2],nxt[maxn*2],B[maxn],Min[maxn],Sec[maxn],tot2,lnk2[maxn],son2[maxn],nxt2[maxn],L,R=inf,mid;\ninline int read()\n{\n\tint ret=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){ret=ret*10+ch-'0';ch=getchar();}\n\treturn ret*f;\n}\ninline void add_e(int x,int y){tot++;son[tot]=y;nxt[tot]=lnk[x];lnk[x]=tot;}\ninline void add_e2(int x,int y){tot2++;son2[tot2]=y;nxt2[tot2]=lnk2[x];lnk2[x]=tot2;}\nstruct SegmentTree\n{\n\tstruct Node{int Min,Tag;}Tree[maxn*4];\n\tvoid PushUp(int rt){Tree[rt].Min=min(Tree[rt*2].Min,Tree[rt*2+1].Min);}\n\tvoid PushDown(int rt)\n\t{\n\t\tif(!Tree[rt].Tag) return;\n\t\tTree[rt*2].Min+=Tree[rt].Tag;Tree[rt*2+1].Min+=Tree[rt].Tag;\n\t\tTree[rt*2].Tag+=Tree[rt].Tag;Tree[rt*2+1].Tag+=Tree[rt].Tag;\n\t\tTree[rt].Tag=0;\n\t}\n\tvoid RangeUpdate(int LL,int RR,int delta,int L=1,int R=m,int rt=1)\n\t{\n\t\tif(LL<=L&&R<=RR){Tree[rt].Min+=delta;Tree[rt].Tag+=delta;return;}\n\t\tPushDown(rt);\n\t\tint M=(L+R)/2;\n\t\tif(LL<=M) RangeUpdate(LL,RR,delta,L,M,rt*2);\n\t\tif(M<RR) RangeUpdate(LL,RR,delta,M+1,R,rt*2+1);\n\t\tPushUp(rt);\n\t}\n\tvoid Build(int L=1,int R=m,int rt=1)\n\t{\n\t\tif(L==R){Tree[rt].Min=L-m-1;return;}\n\t\tint M=(L+R)/2;\n\t\tBuild(L,M,rt*2);\n\t\tBuild(M+1,R,rt*2+1);\n\t\tPushUp(rt);\n\t}\n\tint QueryAll(){return Tree[1].Min;}\n}T;\nvoid Build(int now,int fa,int id,int mi,int se)\n{\n\tif(w[now]<=mi){se=mi;mi=w[now];id=now;}\n\telse if(w[now]<se) se=w[now];\n\tMin[now]=mi;Sec[now]=se;add_e2(id,now);\n\tfor(int i=lnk[now];i;i=nxt[i])\n\t\tif(son[i]!=fa)\n\t\t\tBuild(son[i],now,id,mi,se);\n}\ninline void Modify(int num,int delta)\n{\n\tstatic int L,R,mid;\n\tL=1;R=m;\n\twhile(L<=R)\n\t{\n\t\tmid=(L+R)/2;\n\t\tB[mid]<=num?L=mid+1:R=mid-1;\n\t}\n\tif(R>=1) T.RangeUpdate(1,R,delta);\n}\ninline bool Check(int now,int fa)\n{\n\tfor(int i=lnk2[now];i;i=nxt2[i])\n\t{\n\t\tModify(Min[now],-1);\n\t\tModify(min(Sec[son2[i]],w[now]+mid),1);\n\t}\n\tbool flg=false;\n\tif(T.QueryAll()>=0) flg=true;\n\tfor(int i=lnk2[now];i;i=nxt2[i])\n\t{\n\t\tModify(Min[now],1);\n\t\tModify(min(Sec[son2[i]],w[now]+mid),-1);\n\t}\n\tif(flg) return true;\n\tfor(int i=lnk[now];i;i=nxt[i])\n\t\tif(son[i]!=fa&&Check(son[i],now))\n\t\t\treturn true;\n\treturn false;\n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++) w[i]=read();\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tint a=read(),b=read();\n\t\tadd_e(a,b);add_e(b,a);\n\t}\n\tm=read();\n\tfor(int i=1;i<=m;i++) B[i]=read();\n\tsort(B+1,B+1+m);\n\tBuild(1,0,0,inf,inf);\n\tT.Build();\n\tfor(int i=1;i<=n;i++) Modify(Min[i],1);\n\twhile(L<=R)\n\t{\n\t\tmid=(L+R)/2;\n\t\tCheck(1,0)?R=mid-1:L=mid+1;\n\t}\n\tprintf(\"%d\\n\",L<inf?L:-1);\n\treturn 0;\n}\n```\n\n\u4e00\u4e2alog\u7684\u4ee3\u7801\uff08\u8dd1\u7684\u98de\u5feb\uff09\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int maxn=200005,inf=0x3F3F3F3F;\nint n,m,tot,lnk[maxn],w[maxn],son[maxn*2],nxt[maxn*2],B[maxn],Min[maxn],Sec[maxn],tot2,lnk2[maxn],son2[maxn],nxt2[maxn],BMax,ans=inf;\ninline char nc()\n{\n\tstatic char buf[8388608],*L=buf,*R=buf;\n\treturn L==R&&(R=(L=buf)+fread(buf,1,8388608,stdin),L==R)?EOF:*L++;\n}\ninline int read()\n{\n\tint ret=0,f=1;char ch=nc();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=nc();}\n\twhile(ch>='0'&&ch<='9'){ret=ret*10+ch-'0';ch=nc();}\n\treturn ret*f;\n}\ninline void add_e(int x,int y){tot++;son[tot]=y;nxt[tot]=lnk[x];lnk[x]=tot;}\ninline void add_e2(int x,int y){tot2++;son2[tot2]=y;nxt2[tot2]=lnk2[x];lnk2[x]=tot2;}\nstruct SegmentTree\n{\n\tstruct Node{int Min,Tag;}Tree[maxn*4];\n\tinline void PushUp(int rt){Tree[rt].Min=(Tree[rt<<1].Min<Tree[rt<<1|1].Min?Tree[rt<<1].Min:Tree[rt<<1|1].Min);}\n\tinline void PushDown(int rt)\n\t{\n\t\tif(!Tree[rt].Tag) return;\n\t\tTree[rt<<1].Min+=Tree[rt].Tag;Tree[rt<<1|1].Min+=Tree[rt].Tag;\n\t\tTree[rt<<1].Tag+=Tree[rt].Tag;Tree[rt<<1|1].Tag+=Tree[rt].Tag;\n\t\tTree[rt].Tag=0;\n\t}\n\tinline void RangeUpdate(int RR,int delta,int L=1,int R=m,int rt=1)\n\t{\t\n\t\tif(RR==m){Tree[rt].Min+=delta;Tree[rt].Tag+=delta;return;}\n\t\twhile(L<=R&&L<=RR)\n\t\t{\n\t\t\tPushDown(rt);\n\t\t\tint M=(L+R)>>1;\n\t\t\tif(M<=RR){Tree[rt<<1].Min+=delta;Tree[rt<<1].Tag+=delta;L=M+1;rt=rt<<1|1;}\n\t\t\telse{R=M;rt=rt<<1;}\n\t\t}\n\t\twhile(rt>1){rt>>=1;PushUp(rt);}\n\t}\n\tvoid Build(int L=1,int R=m,int rt=1)\n\t{\n\t\tif(L==R){Tree[rt].Min=L-m-1;return;}\n\t\tint M=(L+R)>>1;\n\t\tBuild(L,M,rt<<1);\n\t\tBuild(M+1,R,rt<<1|1);\n\t\tPushUp(rt);\n\t}\n\tinline int Query(int pos,int L=1,int R=m,int rt=1)\n\t{\n\t\tif(L==R) return Tree[rt].Min;\n\t\tint M=(L+R)>>1;\n\t\tPushDown(rt);\n\t\tif(pos<=M) return Query(pos,L,M,rt<<1);\n\t\telse return Query(pos,M+1,R,rt<<1|1);\n\t}\n}T;\nvoid Build(int now,int fa,int id,int mi,int se)\n{\n\tif(w[now]<=mi){se=mi;mi=w[now];id=now;}\n\telse if(w[now]<se) se=w[now];\n\tMin[now]=mi;Sec[now]=se;add_e2(id,now);\n\tfor(int i=lnk[now];i;i=nxt[i])\n\t\tif(son[i]!=fa)\n\t\t\tBuild(son[i],now,id,mi,se);\n}\ninline void Modify(int num,int delta)\n{\n\tint L=1,R=m,mid;\n\twhile(L<=R)\n\t{\n\t\tmid=(L+R)>>1;\n\t\tB[mid]<=num?L=mid+1:R=mid-1;\n\t}\n\tif(R>=1) T.RangeUpdate(R,delta);\n}\ninline void Solve(int now,int fa)\n{\n\tif(w[now]<BMax&&BMax-w[now]<ans)\n\t{\n\t\tfor(int i=lnk2[now];i;i=nxt2[i])\n\t\t{\n\t\t\tModify(Min[now],-1);\n\t\t\tModify(min(Sec[son2[i]],BMax),1);\n\t\t}\t\n\t\tif(T.Tree[1].Min>=0) ans=BMax-w[now];\n\t\tfor(int i=lnk2[now];i;i=nxt2[i])\n\t\t{\n\t\t\tModify(Min[now],1);\n\t\t\tModify(min(Sec[son2[i]],BMax),-1);\n\t\t}\n\t}\n\tfor(int i=lnk[now];i;i=nxt[i])\n\t\tif(son[i]!=fa)\n\t\t\tSolve(son[i],now);\n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++) w[i]=read();\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tint a=read(),b=read();\n\t\tadd_e(a,b);add_e(b,a);\n\t}\n\tm=read();\n\tfor(int i=1;i<=m;i++) B[i]=read();\n\tsort(B+1,B+1+m);\n\tBuild(1,0,0,inf,inf);\n\tT.Build();\n\tfor(int i=1;i<=n;i++) Modify(Min[i],1);\n\tfor(int i=m;i;i--)\n\t\tif(T.Query(i)<0)\n\t\t\t{BMax=B[i];break;}\n\tif(BMax) Solve(1,0);\n\telse ans=0;\n\tprintf(\"%d\\n\",ans==inf?-1:ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1552720135,
        "uid": 42392,
        "name": "\u5f90\u81f4\u8fdc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF533A \u3010Berland Miners\u3011"
    },
    {
        "content": "\u5148\u628a\u7269\u54c1\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5047\u8bbe\u7b2c $i$ \u4e2a\u7269\u54c1\u6709 $cnt_i$ \u4e2a\u6d1e\u80fd\u8fdb\u53bb\uff0c\u663e\u7136\u5bf9\u4e8e $i<j$ \uff0c\u7b2c $i$ \u4e2a\u7269\u54c1\u80fd\u8fdb\u7684\u6d1e\u7b2c $j$ \u4e2a\u4e00\u5b9a\u53ef\u4ee5\uff0c\u6240\u4ee5\u76f4\u63a5\u6309\u8fd9\u4e2a\u987a\u5e8f\u4f9d\u6b21\u7ed9\u7269\u54c1\u9009\u6d1e\n\n\u90a3\u4e48\u5148\u4e0d\u8003\u8651\u4fee\u6539\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u7269\u54c1\u80fd\u653e\u8fdb\u53bb\u5f53\u4e14\u4ec5\u5f53 $cnt_i\\ge i$ \u3002\n\n\u6700\u521d\u7684 $cnt_i$ \u662f\u597d\u6c42\u7684\uff0c\u904d\u5386\u4e00\u4e0b\u6811\uff0c\u6bcf\u4e2a\u6d1e\u7684\u8d21\u732e\u90fd\u662f\u4e00\u6bb5\u540e\u7f00\uff0c\u76f8\u5f53\u4e8e\u533a\u95f4\u52a0\uff0c\u5dee\u5206\u6216\u8005\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u8003\u8651\u627e\u5230\u6700\u9760\u524d\u7684\u4e0d\u5408\u6cd5\u7684\u7269\u54c1\uff0c\u5373\u6700\u5c0f\u7684 $i$ \u6ee1\u8db3 $cnt_i<i$ \uff0c\u90a3\u4e48\u5b83\u6ee1\u8db3 $s_i$ \u6700\u5927\u3002\n\n\u90a3\u4e48\u95ee\u9898\u8f6c\u5316\u6210\u9009\u4e00\u4e2a\u6d1e\uff0c\u628a\u8fd9\u4e2a\u6d1e\u53d8\u6210 $s_i$ \u3002\u539f\u56e0\u662f\u5982\u679c\u53d8\u6210\u5176\u4ed6\u4e0d\u5408\u6cd5\u7269\u54c1\u7684 $s_j$ \uff0c\u90a3\u65e0\u8bba\u600e\u4e48\u6837\u4e5f\u65e0\u6cd5\u6ee1\u8db3\u7b2c $i$ \u4e2a\u7269\u54c1\u3002\n\n\u4e00\u79cd\u60f3\u6cd5\u662f\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a $<s_i$ \u7684\u7269\u54c1\uff0c\u7136\u540e\u5b83\u53ea\u4f1a\u5f71\u54cd\u5b83\u7684\u5b50\u6811\uff0c\u90a3\u4e48\u626b\u4e00\u904d\u5b50\u6811\u770b\u770b\u5b50\u6811\u5bf9 $cnt_i$ \u7684\u5f71\u54cd\u3002\u663e\u7136\u8fd9\u662f\u4e00\u4e2a\u533a\u95f4\u52a0\u7684\u6548\u679c\uff0c\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u4e0a\u5b58 $c_i-i$ \u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e\u626b\u5b8c\u540e\u5224\u65ad\u4e00\u5c0f\u6700\u5c0f\u503c\u662f\u5426 $\\ge 0$ \u5373\u53ef\u3002\n\n\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u770b\u4f3c\u662f $O(n^2\\log k)$ \u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e00\u4e2a\u7269\u54c1\u6ee1\u8db3 $<s_i$ \uff0c\u90a3\u4e48\u5b83\u7684\u5b50\u6811\u91cc\u7684\u70b9\u5c31\u4e0d\u7528\u518d\u679a\u4e3e\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7269\u54c1\u4e0d\u53bb\u6539\u5b83\uff0c\u5b50\u6811\u518d\u600e\u4e48\u6539\u4e5f\u6ca1\u7528\u3002\n\n\u8fd9\u6837\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u626b\u4e00\u6b21\u53bb\u8ba1\u7b97\u5bf9\u7ebf\u6bb5\u6811\u7684\u5f71\u54cd\uff0c\u6240\u4ee5\u603b\u7684\u590d\u6742\u5ea6\u4e3a $O(n\\log k)$ \u3002\n\nhttps://codeforces.ml/contest/533/submission/156921476",
        "postTime": 1652361183,
        "uid": 115936,
        "name": "\u6cf7\u6cfd\u4e09\u6708",
        "ccfLevel": 0,
        "title": "CF533A"
    },
    {
        "content": "\u4e00\u79cd\u53e6\u7c7b\u7684\u8d2a\u5fc3\u3002\n\n\u5c06\u6570\u4ece\u5927\u5230\u5c0f\u5f80\u91cc\u586b\uff0c\u5728\u6811\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u201c\u8fb9\u754c\u201d\uff0c\u4ece\u6839\u5f00\u59cb\u5f80\u5916\u62d3\u5c55\uff0c\u76f4\u5230\u8fb9\u754c\u4e0a\u7684\u6240\u6709\u6570\u90fd\u6bd4\u5f53\u524d\u8981\u586b\u7684\u6570\u5c0f\uff0c\u4e14\u8fb9\u754c\u5185\u5df2\u7ecf\u88ab\u586b\u6ee1\u4e86\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e2a\u6570\u5df2\u7ecf\u65e0\u6cd5\u88ab\u586b\u8fdb\u53bb\u4e86\u3002\u800c\u6211\u4eec\u8981\u52a0\u7684\u70b9\u4e00\u5b9a\u662f\u5728\u8fb9\u754c\u4e0a\u7684\u3002\n\n\u8bbe\u4e00\u4e2a\u70b9 $i$ \u80fd\u591f\u88ab\u586b\u8fdb\u53bb\u7684\u6700\u5927\u7684\u6570\u662f\u4ece\u5c0f\u5230\u5927\u7684\u7b2c $mx_i$ \u4e2a\uff0c\u5c06\u5269\u4f59\u7684\u70b9\uff08\u4e0d\u5728\u8fb9\u754c\u5185\u7684\u70b9\uff09\u6309\u7167 $mx_i$ \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5e76\u8d2a\u5fc3\u7684\u4e3a\u6bcf\u4e2a\u70b9 $i$ \u5206\u914d\u5b83\u88ab\u586b\u7684\u6570\uff0c\u4e14\u8fd9\u4e2a\u6570\u5c3d\u53ef\u80fd\u7684\u5927\uff0c\u8bbe\u8fd9\u4e2a\u6570\u662f\u4ece\u5c0f\u5230\u5927\u7684\u7b2c $val_i$ \u4e2a\u3002\n\n\u5982\u679c $val_i=mx_i$\uff0c\u662f\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u5b83\u5df2\u7ecf\u5c3d\u5b83\u7684\u5168\u529b\u4e86\u3002\u53ef\u662f\u5982\u679c $val_i<mx_i$\uff0c\u8bf4\u660e\u5728\u5b83\u4e4b\u524d\u6709\u4e00\u4e2a\u6570\u62a2\u8d70\u4e86 $mx_i$\uff0c\u5bfc\u81f4\u5b83\u4e0d\u80fd\u5c3d\u5176\u6240\u80fd\u3002\u53ea\u6709\u8fd9\u79cd\u70b9\u662f\u5b58\u5728\u4f18\u5316\u7684\u7a7a\u95f4\u7684\u3002\n\n\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5728\u8fb9\u754c\u4e0a\u7684\u70b9 $p$\uff0c\u663e\u7136\u6bcf\u4e2a\u4f1a\u88ab\u4ed6\u5f71\u54cd\u7684\u70b9 $x$ \u4e00\u5b9a\u6ee1\u8db3 $x$ \u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\u662f $a_p$\u3002\u679a\u4e3e\u6bcf\u4e2a $x$\uff0c\u5c06 $x$ \u5220\u9664\uff0c\u5e76\u5c06\u6240\u6709\u5728 $x$ \u540e\u9762\u7684\u70b9 $i$ \u5c1d\u8bd5\u628a $val_i$ \u589e\u52a0\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u6837\u7684\u589e\u52a0\u4e00\u5b9a\u662f\u81f3\u591a $1$ \u7684\uff0c\u800c\u4e14\u4e00\u5b9a\u5c06\u67d0\u4e2a\u533a\u95f4 $[x+1,r]$ \u7684 $val$ \u90fd $+1$\u3002\u8fd9\u4e2a\u533a\u95f4\u9700\u8981\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a$val$ \u8fde\u7eed\u4e14 $val$ \u5747 $<mx$\u3002\u7ef4\u62a4\u4e00\u4e2a\u7b2c $i$ \u4e2a\u503c\u8868\u793a $mx_i-val_i$ \u7684 st \u8868\uff0c\u4e8c\u5206\u8fd9\u4e2a $r$\uff0c\u5224\u65ad\u4e00\u4e0b $val_x-val_r=x-r$ \u4e14 $\\min\\{mx_i-val_i\\}>0$ \u5373\u53ef\u3002\u66f4\u6539\u5b8c\u540e\u770b\u5269\u4e0b\u6ca1\u88ab\u586b\u8fdb\u53bb\u7684\u80fd\u5426\u7528 $x$ \u586b\u6ee1\uff0c\u6700\u540e\u628a\u66f4\u6539\u7684\u600e\u4e48\u6539\u600e\u4e48\u8fd8\u56de\u53bb\u5c31\u884c\u4e86\u3002\u5269\u4e0b\u7684\u5c31\u662f\u4e00\u5806\u7ec6\u8282\u4e86\u3002\n\n\u6ce8\u610f\u5230\u8fb9\u754c\u4e0a\u7684\u70b9\u7684\u5b50\u6811\u4e92\u4e0d\u76f8\u4ea4\uff0c\u6240\u4ee5\u679a\u4e3e\u7684\u70b9\u7684\u4e2a\u6570\u662f $O(n)$ \u7684\u3002\u603b\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint read() {\n\tint s = 0, f = 1;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9')\n\t\tf = (ch == '-' ? -1 : 1), ch = getchar();\n\twhile (ch >= '0' && ch <= '9')\n\t\ts = (s << 1) + (s << 3) + (ch ^ 48), ch = getchar();\n\treturn s * f;\n}\n\nconst int inf = 1e9;\n\n#define N 1000005\n\nint n, m;\nint a[N], b[N], fa[N];\nvector<int> e[N];\nint sz[N], v[N] = {0};\nint tmp[N], cnt = 0, cc = 0;\npair<int, int> nc[N];\nint mn1[N], mn2[N];\nint rt[N], cr = 0;\nvector<int> p[N];\nint val[N], mx[N], d[N];\nint st[N][25], lg[N], pw[25];\n\nvoid init() {\n\tpw[0] = 1;\n\tfor (int i = 1; i <= 20; i++)\n\t\tpw[i] = pw[i - 1] << 1;\n\tfor (int i = 1; i <= cc; i++)\n\t\tlg[i] = lg[i >> 1] + 1, st[i][0] = mx[i] - val[i];\n\tfor (int j = 1; pw[j] <= cc; j++)\n\t\tfor (int i = 1; i + pw[j] - 1 <= cc; i++)\n\t\t\tst[i][j] = min(st[i][j - 1], st[i + pw[j - 1]][j - 1]);\n}\n\nint qry(int l, int r) {\n\tint i = lg[r - l + 1] - 1;\n\treturn min(st[l][i], st[r - pw[i] + 1][i]);\n}\n\nint sec(int x, int y, int z) {\n\treturn x + y + z - min(x, min(y, z)) - max(x, max(y, z));\n}\n\nvoid pre(int x) {\n\tsz[x] = 1, mn1[x] = min(a[x], mn1[fa[x]]), mn2[x] = sec(mn1[fa[x]], mn2[fa[x]], a[x]);\n\tfor (int y : e[x])\n\t\tif (y != fa[x])\n\t\t\tfa[y] = x, pre(y), sz[x] += sz[y];\n}\n\nvoid srh(int x, int rt) {\n\tnc[++cc] = make_pair(mn1[x], rt * (mn1[x] == a[rt]));\n\tif (mn1[x] == a[rt])\n\t\ttmp[++cnt] = mn2[x];\n\tfor (int y : e[x])\n\t\tif (y != fa[x])\n\t\t\tsrh(y, rt);\n}\n\nsigned main() {\n\tn = read();\n\tfor (int i = 1; i <= n; i++)\n\t\ta[i] = read();\n\tfor (int i = 1; i < n; i++) {\n\t\tint u = read(), v = read();\n\t\te[u].push_back(v), e[v].push_back(u);\n\t}\n\tm = read();\n\tfor (int i = 1; i <= m; i++)\n\t\tb[i] = read();\n\tsort(b + 1, b + m + 1);\n\tmn1[0] = mn2[0] = inf, pre(1);\n\tpriority_queue<pair<int, int> > pq;\n\tpq.push(make_pair(a[1], 1));\n\tint tot = 0, ans = 0, pos = 0;\n\tfor (int i = m; i >= 1; i--) {\n\t\twhile (!pq.empty()) {\n\t\t\tif (pq.top().first < b[i])\n\t\t\t\tbreak;\n\t\t\tint x = pq.top().second;\n\t\t\tpq.pop(), tot++;\n\t\t\tfor (int y : e[x])\n\t\t\t\tif (y != fa[x])\n\t\t\t\t\tpq.push(make_pair(a[y], y));\n\t\t}\n\t\tif (!tot) {\n\t\t\tans = inf, pos = i;\n\t\t\tbreak;\n\t\t}\n\t\ttot--;\n\t}\n\tif (!ans) {\n\t\tprintf(\"0\");\n\t\treturn 0;\n\t}\n\twhile (!pq.empty())\n\t\trt[++cr] = pq.top().second, pq.pop();\n\tfor (int i = 1; i <= cr; i++)\n\t\tsrh(rt[i], rt[i]);\n\tsort(nc + 1, nc + cc + 1);\n\tint cur = pos;\n\tfor (int i = cc; i >= 1; i--) {\n\t\tp[nc[i].second].push_back(i);\n\t\twhile (cur >= 1 && nc[i].first < b[cur])\n\t\t\tcur--;\n\t\tmx[i] = cur;\n\t}\n\tcur = pos;\n\tset<int> s;\n\tfor (int i = 0; i <= pos; i++)\n\t\ts.insert(i);\n\tfor (int i = cc; i >= 1; i--) {\n\t\twhile (cur >= 1 && nc[i].first < b[cur])\n\t\t\tcur--;\n\t\tval[i] = cur;\n\t\tif (cur > 0)\n\t\t\ts.erase(cur);\n\t\tcur--;\n\t}\n\tinit();\n\tfor (int id = 1; id <= cr; id++) {\n\t\tint x = rt[id], len = p[x].size(), c = 0, lst = 1;\n\t\tfor (int j = 0; j < len; j++) {\n\t\t\tif (p[x][j] < lst)\n\t\t\t\tc = 0, lst = 1;\n\t\t\tint r = p[x][j], l = lst - 1;\n\t\t\twhile (r - l > 1) {\n\t\t\t\tint mid = (l + r) >> 1;\n\t\t\t\tif (val[p[x][j]] - val[mid] == p[x][j] - mid && qry(mid, p[x][j] - 1) > c)\n\t\t\t\t\tr = mid;\n\t\t\t\telse\n\t\t\t\t\tl = mid;\n\t\t\t}\n\t\t\tlst = r;\n\t\t\tif (val[r] + c > 0)\n\t\t\t\ts.insert(val[r] + c);\n\t\t\tc++;\n\t\t}\n\t\tcnt = 0, srh(x, x);\n\t\tsort(tmp + 1, tmp + cnt + 1);\n\t\tauto it = s.end();\n\t\tit--;\n\t\tfor (int j = cnt; j >= 1; j--) {\n\t\t\tif ((*it) && b[*it] > tmp[j])\n\t\t\t\tbreak;\n\t\t\tif (*it)\n\t\t\t\tit--;\n\t\t}\n\t\tif (!(*it))\n\t\t\tans = min(ans, b[pos] - a[x]);\n\t\tc = 0, lst = 1;\n\t\tfor (int j = 0; j < len; j++) {\n\t\t\tif (p[x][j] < lst)\n\t\t\t\tc = 0, lst = 1;\n\t\t\tint r = p[x][j], l = lst - 1;\n\t\t\twhile (r - l > 1) {\n\t\t\t\tint mid = (l + r) >> 1;\n\t\t\t\tif (val[p[x][j]] - val[mid] == p[x][j] - mid && qry(mid, p[x][j] - 1) > c)\n\t\t\t\t\tr = mid;\n\t\t\t\telse\n\t\t\t\t\tl = mid;\n\t\t\t}\n\t\t\tlst = r;\n\t\t\tif (val[r] + c > 0)\n\t\t\t\ts.erase(val[r] + c);\n\t\t\tc++;\n\t\t}\n\t}\n\tprintf(\"%d\", ans == inf ? -1 : ans);\n\treturn 0;\n}\n```",
        "postTime": 1676898930,
        "uid": 483037,
        "name": "Galex",
        "ccfLevel": 6,
        "title": "CF533A \u9898\u89e3"
    },
    {
        "content": "\n### \u9898\u610f\n\n\u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c $h_i$\u3002\u53e6\u5916\u6709\u4e00\u4e2a\u6743\u503c\u5e8f\u5217 $s$\u3002\n\n\u5e8f\u5217\u4e2d $s_i$ \u80fd\u5bf9\u5e94\u6811\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u5f53\u4e14\u4ec5\u5f53**\u8fd9\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e $s_i$**\u3002\n\n\u73b0\u5728\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\u589e\u52a0\u4efb\u610f\u503c $p$\uff0c\u6c42\u6700\u5c11\u589e\u52a0\u591a\u5c11\u4f7f\u5f97\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u80fd\u5bf9\u5e94\u6811\u4e0a\u7684\u67d0\u4e00\u4e2a\u70b9\u3002\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u8f93\u51fa $-1$\u3002\n\n### \u6027\u8d28\u53d1\u73b0\n\n\u89c2\u5bdf\u53d1\u73b0\uff0c\u6211\u4eec\u5c06 $s$ \u4e2d\u7684\u6240\u6709\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u66f4\u5927\u7684 $s_i$ \u5982\u679c\u80fd\u5bf9\u5e94\u67d0\u4e00\u4e2a\u8282\u70b9 $k$\uff0c**\u66f4\u5c0f\u7684 $s_j$ \u4e5f\u4e00\u5b9a\u53ef\u4ee5\u5bf9\u5e94\u8fd9\u4e2a\u8282\u70b9** \u3002\n\n\u6240\u4ee5\uff0c\u82e5\u6211\u4eec\u8003\u8651\u6bcf\u4e00\u4e2a $s_i$ \u80fd\u591f\u914d\u5bf9\u7684\u8282\u70b9\u7684\u96c6\u5408 $S_i$\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6709 ${s_i}\\leq{s_j}$\uff0c\u4e00\u5b9a\u6709 ${S_i}\\in{S_j}$\u3002\n\n\u65e2\u7136\u5177\u6709\u8fd9\u4e2a\u6027\u8d28\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5ffd\u7565 $S_i$ \u5177\u4f53\u6709\u54ea\u4e9b\u503c\u800c\u4ec5\u5173\u5fc3 $S_i$ \u7684\u5927\u5c0f\uff0c\u56e0\u4e3a **\u4e0d\u53ef\u80fd\u6709\u8282\u70b9 $i$ \u5728\u524d\u9762\u7684\u8282\u70b9\u7684\u96c6\u5408\u4e2d\uff0c\u4f46\u4e0d\u5728\u540e\u9762\u8282\u70b9\u7684\u96c6\u5408\u4e2d** \u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u8bb0\u5f55 $S_i$ \u7684\u5927\u5c0f\u4e3a $cnt_i$\uff0c\u8868\u793a $s_i$ \u80fd\u914d\u5bf9\u7684\u8282\u70b9\u4e2a\u6570\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9 $\\forall{i}$ \u90fd\u6709 $i\\leq cnt_i$\uff0c\u6709\u89e3\u3002\n\n\u9996\u5148\u8bc1\u660e\u5145\u5206\u6027\uff0c\u5bf9\u4e8e $s_i$ \u800c\u8a00\uff0c\u5982\u679c $s_1$ \u5230 $s_{i-1}$ \u90fd\u80fd\u914d\u5bf9\uff0c\u90a3\u4e48\u5b83\u4eec\u4e00\u5171\u5360\u7528\u4e86 $i-1$ \u4e2a\u8282\u70b9\uff0c\u4f46\u662f **\u5b83\u80fd\u5230\u8fbe\u7684\u8282\u70b9 $cnt_i$ \u4e0d\u6b62\u8fd9\u4e48\u591a** \uff0c\u6240\u4ee5\u4e5f\u4e00\u5b9a\u53ef\u4ee5\u6210\u529f\u914d\u5bf9\u3002\u6240\u4ee5\u6b64\u89c4\u5f8b\u5bf9 $s_{i-1}$ \u6210\u7acb\u65f6\uff0c\u5bf9 $s_i$ \u4e5f\u6210\u7acb\u3002\u53c8\u56e0\u4e3a\u5b83\u5bf9 $s_1$ \u6210\u7acb\uff08\u663e\u7136\uff09\uff0c **\u5e94\u7528\u5f52\u7eb3\u6cd5\u77e5\u5bf9\u4e00\u5207 $s_i$ \u90fd\u6210\u7acb** \u3002\n\n\u63a5\u7740\u8bc1\u660e\u5fc5\u8981\u6027\uff0c\u5047\u5982 $i\\gt cnt_i$ \u4e14 $s_1$ \u5230 $s_{i-1}$ \u90fd\u80fd\u914d\u5bf9\uff0c\u90a3\u4e48\u5b83\u4eec\u4e00\u5171\u5360\u7528 $i-1$ \u4e2a\u8282\u70b9\u3002 **\u800c\u4e14\u8fd9\u4e9b\u70b9\u4e00\u5b9a\u662f\u81ea\u5df1\u7684\u96c6\u5408\u4e2d\u5305\u542b\u7684\u70b9** \u3002\u4f46\u662f\u5b83\u7684\u96c6\u5408\u6ca1\u6709\u8fd9\u4e48\u5927\uff08$i-1\\geq cnt_i$\uff09\uff0c\u6240\u4ee5\u5b83\u4e00\u5b9a\u6ca1\u6709\u8282\u70b9\u53ef\u4ee5\u914d\u5bf9 $s_i$\u3002\n\n### \u6027\u8d28\u8fd0\u7528\n\n\u8003\u8651\u5982\u4f55\u5e94\u7528\u8fd9\u4e2a\u6027\u8d28\u3002\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u5148\u6c42\u51fa\u6240\u6709\u7684 $cnt_i$\u3002\u660e\u663e\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u6574\u4e2a\u6811\uff0c\u5728 dfs \u7684\u8fc7\u7a0b\u4e2d\u4f20\u9012\u94fe\u4e0a\u7684\u6700\u5c0f\u503c $k$\u3002 **\u800c\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e\u94fe\u4e0a\u6700\u5c0f\u503c\u7684 $s_i$ \u90fd\u53ef\u4ee5\u548c\u8fd9\u4e2a\u70b9\u914d\u5bf9** \uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u4f1a\u4f7f\u5f97\u6240\u6709 $s_i \\leq x$ \u7684 $cnt_i$ \u52a0 $1$\uff0c\u4f7f\u7528\u7ebf\u6bb5\u6811\u6216\u5dee\u5206\u7ef4\u62a4\u533a\u95f4\u52a0\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u786e\u5b9a\u6539\u52a8\u7684\u5927\u5c0f\u3002\n\n\u6211\u4eec\u8003\u8651\u5e8f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u6ee1\u8db3 $i\\leq cnt_i$ \u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u9700\u8981\u91cd\u65b0\u914d\u5bf9\u7684 $s_i$ \u6700\u5927\u7684\u4e00\u4e2a $s_{max}$\u3002\u5982\u679c\u6211\u4eec\u5728\u64cd\u4f5c\u4e2d\u66f4\u65b0\u7684\u8282\u70b9\u7684\u65b0\u6743\u503c\u5c0f\u4e8e $s_{max}$\uff0c\u90a3\u4e48\u4e0d\u4f1a\u6709\u8282\u70b9\u7684\u94fe\u4e0a\u6700\u5c0f\u503c\u53d8\u5f97\u5927\u4e8e $s_i$\uff0c **\u539f\u56e0\u662f\u6539\u52a8\u7684\u70b9\u548c\u5b83\u7684\u5b50\u6811\u90fd\u4e0d\u53ef\u80fd\u548c $s_{max}$ \u914d\u5bf9\uff0c\u522b\u7684\u70b9\u6ca1\u6709\u6539\u53d8** \u3002\u6240\u4ee5\uff0c\u6539\u52a8\u4e00\u5b9a\u662f\u628a\u67d0\u4e00\u4e2a\u70b9\u6539\u6210\u4e86\u5927\u4e8e\u7b49\u4e8e $s_{max}$ \u7684\u6570\u3002\u82e5\u4e0d\u80fd\u6210\u529f\u914d\u5bf9\u4e00\u5b9a\u662f\u5b50\u6811\u7684\u6743\u503c\u592a\u5c0f\uff0c\u5f53\u524d\u70b9\u591a\u5927\u90fd\u6ca1\u7528\u3002\u5426\u5219 $s_{max}$ \u5c31\u4e00\u5b9a\u53ef\u4ee5\u5b8c\u6210\u5927\u4e8e $s_{max}$ \u53ef\u4ee5\u5b8c\u6210\u7684\u3002\u800c\u5982\u679c\u6211\u4eec\u6539\u7684\u5927\u4e8e $s_{max}$\uff0c\u589e\u91cf\u5c31\u4e00\u5b9a\u4f1a\u66f4\u5927\uff0c\u4e0d\u5982 $s_{max}$ \u66f4\u4f18\u3002\n\n### \u679a\u4e3e\u6539\u52a8\u70b9\n\n\u90a3\u4e48\u6211\u4eec\u679a\u4e3e\u8fd9\u4e2a\u70b9\u5c31\u597d\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u70b9 $i$ \u4e00\u5b9a\u6ee1\u8db3 ${h_i}\\lt{s_{max}}$\u3002\u56e0\u4e3a\u628a\u6743\u503c\u6539\u5c0f\u4e00\u5b9a\u662f\u8111\u6b8b\u884c\u4e3a\u3002\u800c\u4e14\u5982\u679c\u5b83\u6ee1\u8db3 ${h_i}\\lt{s_{max}}$\uff0c\u5b83\u5b50\u6811\u4e0a\u7684\u6240\u6709\u70b9\u5c31\u4e00\u5b9a\u4e0d\u7528\u518d\u679a\u4e3e\u4e86\u3002\u56e0\u4e3a **\u4e0d\u7ba1\u5b50\u6811\u4e0a\u7684\u70b9 $j$ \u8d4b\u5230\u591a\u5927\u7684\u503c\uff0c\u5b83\u6709\u4e00\u4e2a\u5c0f\u4e8e $s_{max}$ \u7684\u7956\u5148\u5c31\u6ce8\u5b9a\u4e86 $s_{max}$ \u4e0d\u80fd\u5b89\u653e\u5728\u5b83\u7684\u5b50\u6811\u91cc** \u3002\n\n### \u5224\u522b\u5408\u6cd5\u6027\n\n\u63a5\u4e0b\u6765\u8981\u505a\u7684\u4e8b\u662f\u68c0\u67e5\u628a\u5f53\u524d\u70b9\u66f4\u6539\u5230 $s_{max}$ \u662f\u5426\u4f7f\u6700\u7ec8\u5e8f\u5217\u6ee1\u8db3\u5bf9 $\\forall{i}$ \u90fd\u6709 $i\\leq cnt_i$\u3002\n\n\u6211\u4eec\u8003\u8651\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4 $cnt_i-i$ \u7684\u6700\u5c0f\u503c\u4f5c\u4e3a\u7ebf\u6bb5\u6811\u6743\u503c\uff0c\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e00\u4e2a $cnt_i-i$ \u975e\u8d1f\uff0c\u4e5f\u5c31\u662f\u5168\u6811\u6700\u5c0f\u503c\u5927\u4e8e\u7b49\u4e8e $0$\uff0c\u6240\u6709\u8282\u70b9\u90fd\u6ee1\u8db3\u8981\u6c42\u3002\n\n\u6240\u4ee5\u6211\u4eec\u904d\u5386\u8981\u4fee\u6539\u7684\u8282\u70b9 $i$ \u7684\u5b50\u6811\uff0c\u4f46\u662f\u4e0b\u4f20\u7684\u94fe\u4e0a\u6700\u5c0f\u503c\u4e0d\u662f $h_i$ \u800c\u662f $s_{max}$\u3002\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u904d\u5386\u5230\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c **\u51cf\u53bb\u5b83\u539f\u6765\u7684\u94fe\u4e0a\u6700\u5c0f\u503c\u5bf9 $cnt$ \u7684\u8d21\u732e\uff0c\u4e5f\u5c31\u662f\u5bf9\u7ebf\u6bb5\u6811\u6743\u503c\u7684\u8d21\u732e** \uff0c\uff08\u8fd9\u5c31\u9700\u8981\u5728\u7b2c\u4e00\u6b21\u904d\u5386\u6811\u65f6\u8bb0\u5f55\u521d\u59cb\u7684\u94fe\u4e0a\u6700\u5c0f\u503c\uff09\u3002\u7136\u540e\u5bf9 $s_i$ \u5c0f\u4e8e\u7b49\u4e8e\u65b0\u7684\u94fe\u4e0a\u6700\u5c0f\u503c\u7684 $cnt_i$ \u52a0\u4e0a $1$\uff0c\u4e5f\u5c31\u662f\u7ebf\u6bb5\u6811\u6743\u503c\u533a\u95f4 $+1$\u3002\u8fd8\u539f\u5c31\u9700\u8981\u518d\u8dd1\u4e00\u904d\u5b50\u6811\uff0c\u51cf\u53bb\u65b0\u6743\u503c\u7684\u8d21\u732e\u518d **\u52a0\u4e0a\u65e7\u6743\u503c\u7684\u8d21\u732e** \u3002\n\n\u6bcf\u4e2a\u70b9\u8981\u4e48\u4f5c\u4e3a ${h_i}\\geq{s_{max}}$ \u7684\u8282\u70b9\u88ab\u626b\u5230\u4e00\u6b21\uff0c\u8981\u4e48 **\u4f5c\u4e3a\u8981\u6539\u52a8\u52a8\u8282\u70b9\u88ab\u626b\u5230\u4e24\u6b21\uff08\u66f4\u65b0\u4e00\u6b21\uff0c\u8fd8\u539f\u4e00\u6b21\uff09** \u3002\u518d\u52a0\u4e0a\u9884\u5904\u7406 $cnt$ \u548c\u6bcf\u6b21\u904d\u5386\u8bbf\u95ee\u7ebf\u6bb5\u6811\u533a\u95f4\u52a0\u3001\u6700\u5c0f\u503c\uff0c\u603b\u590d\u6742\u5ea6 $O((n+k)\\log{k})$\u3002\n\n### \u53c2\u8003\u4ee3\u7801\n\n\u6ce8\u610f\u5982\u679c\u5728\u8ba1\u7b97\u5b8c $cnt$ \u4e4b\u540e\u6240\u6709\u8282\u70b9\u90fd\u6ee1\u8db3\u8981\u6c42\u4e86\uff0c\u76f4\u63a5\u8f93\u51fa $0$\u3002\u56e0\u4e3a\u5728\u7b2c\u4e8c\u904d\u904d\u5386\u6811\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4e0d\u4f1a\u8003\u8651 ${h_i}={s_{max}}$ \u7684\u70b9\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rd(i,n) for(int i=0;i<n;i++)\n#define rp(i,n) for(int i=1;i<=n;i++)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define per(i,a,b) for(int i=b;i>=a;i--)\n#define st string\n#define vt vector\n#define pb push_back\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int,int> pii;\ntypedef pair<ll,ll> pll;\nint s[500005],h[500005],mxs=-1,n,a,b,m;\nint ori[500005];\nvt<int>vv[500005];\nbool cmp(int a,int b){\n\treturn a>b;\n}\nstruct node{\n\tint l,r,m,tg;\n}sg[2000005];\ninline void init(int i,int l,int r){\n\tsg[i].l=l,sg[i].r=r;\n\tif(l==r){\n\t\tsg[i].m=-sg[i].l;\n\t\treturn;\n\t}\n\tinit(i<<1,l,l+r>>1);\n\tinit(i<<1|1,(l+r>>1)+1,r);\n\tsg[i].m=min(sg[i<<1].m,sg[i<<1|1].m);\n}\ninline void psh(int i){\n\tif(!sg[i].tg)return;\n\tsg[i].m+=sg[i].tg;\n\tif(sg[i].l!=sg[i].r){\n\t\tsg[i<<1].tg+=sg[i].tg;\n\t\tsg[i<<1|1].tg+=sg[i].tg;\n\t}\n\tsg[i].tg=0;\n}\ninline void add(int i,int k,int a){\n\tpsh(i);\n\tif(s[sg[i].r]>k)return;\n\tif(s[sg[i].l]<=k){\n\t\tsg[i].tg+=a;\n\t\tpsh(i);\n\t\treturn;\n\t}\n\tadd(i<<1,k,a);\n\tadd(i<<1|1,k,a);\n\tsg[i].m=min(sg[i<<1].m,sg[i<<1|1].m);\n}\ninline int qry(int i,int k){\n\tpsh(i);\n\tif(sg[i].l>k||sg[i].r<k)return 1e9;\n\tif(sg[i].l==sg[i].r)return sg[i].m;\n\tint res=min(qry(i<<1,k),qry(i<<1|1,k));\n\tsg[i].m=min(sg[i<<1].m,sg[i<<1|1].m);\n\treturn res;\n}\ninline void dfs1(int i,int k,int p){\n\tori[i]=min(k,h[i]);\n\tadd(1,ori[i],1);\n\tfor(auto j:vv[i])if(j!=p){\n\t\tdfs1(j,ori[i],i);\n\t}\n}\ninline void dfs3(int i,int k,int p,int a){\n\tadd(1,k,a);\n\tadd(1,ori[i],-a);\n\tfor(auto j:vv[i])if(j!=p){\n\t\tdfs3(j,min(k,h[j]),i,a);\n\t}\n}\ninline int dfs2(int i,int p){\n\tif(h[i]<mxs){\n\t\tdfs3(i,mxs,p,1);\n\t\tbool flag=(sg[1].m>=0);\n\t\tdfs3(i,mxs,p,-1);\n\t\tif(flag)return mxs-h[i];\n\t\telse return 1e9;\n\t}else{\n\t\tint res=1e9;\n\t\tfor(auto j:vv[i])if(j!=p){\n\t\t\tres=min(res,dfs2(j,i));\n\t\t}return res;\n\t}\n}\nsigned main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcin>>n;\n\trp(i,n)cin>>h[i];\n\trp(i,n-1){\n\t\tcin>>a>>b;\n\t\tvv[a].pb(b);\n\t\tvv[b].pb(a); \n\t}\n\tcin>>m;\n\trp(i,m)cin>>s[i];\n\tsort(s+1,s+1+m,cmp);\n\tinit(1,1,m);\n\tdfs1(1,1e9,0);\n\trp(i,m)if(qry(1,i)<0)mxs=max(mxs,s[i]);\n\tif(mxs==-1){\n\t\tcout<<0<<endl;\n\t\treturn 0;\n\t}\n\tint res=dfs2(1,0);\n\tif(res==1e9)cout<<-1<<endl;\n\telse cout<<res<<endl;\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1660278016,
        "uid": 304222,
        "name": "jucason_xu",
        "ccfLevel": 0,
        "title": "CF533A\u9898\u89e3"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Jerry-Jiang/p/16576345.html)\n## \u524d\u8a00\n\u6bd4\u8f83\u795e\u4ed9\u7684\u9898\u3002\n\n~~\u5b9e\u9645\u4e0a\u5c31\u662f\u592a\u96be\u4e86\u6211\u4e0d\u4f1a\u2026\u2026~~\n\n## \u6b63\u6587\n\n\u9898\u76ee\u5927\u610f\uff1a\u6709 $n$ \u4e2a\u77ff\u6d1e\uff0c\u6bcf\u4e2a\u9ad8\u5ea6\u4e3a $h_i$\uff0c\u5b83\u4eec\u76f8\u8fde\u7ec4\u6210\u4e00\u68f5\u6811\u3002\u73b0\u5728\u6709 $m$ \u4e2a\u5de5\u4eba\uff0c\u6bcf\u4e2a\u4eba\u7684\u9ad8\u5ea6\u4e3a $s_i$\uff0c\u5141\u8bb8\u5347\u9ad8\u6700\u591a\u4e00\u4e2a\u77ff\u6d1e\u7684\u9ad8\u5ea6\uff0c\u95ee\u662f\u5426\u80fd\u8ba9 $m$ \u4e2a\u5de5\u4eba\u90fd\u8fdb\u53bb\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$m\\leq n\\leq 5\\cdot 10^5$\u3002\n\n\u9996\u5148\uff0c\u7b80\u5316\u95ee\u9898\uff0c\u8003\u8651\u5982\u679c\u4e0d\u80fd\u5347\u9ad8\u77ff\u6d1e\u9ad8\u5ea6\u600e\u4e48\u505a\u3002\n\n\u5bb9\u6613\u60f3\u51fa\u5c06 $s_i$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5339\u914d\u6700\u5927\u7684 $m$ \u4e2a\u77ff\u6d1e\u5c31\u884c\u3002\n\n\u4e5f\u5c31\u662f\u8bbe $i$ \u53ef\u4ee5\u8fdb $cnt_i$ \u4e2a\u77ff\u6d1e\uff0c\u90a3\u4e48\u5fc5\u987b\u6ee1\u8db3 $cnt_i\\geq i$\uff0c\u5373 $cnt_i-i\\geq 0$\u3002\n\n\u8003\u8651\u52a0\u4e0a\u5347\u9ad8\u77ff\u6d1e\u9ad8\u5ea6\uff0c\u80af\u5b9a\u5347\u9ad8\u5230 $s_i$ \u6700\u5927\u7684\u4e14\u4e0d\u6ee1\u8db3\u7684\u90a3\u4e2a\u4eba\u7684\u9ad8\u5ea6\uff0c\u5426\u5219\u4ed6\u5c31\u6ca1\u5730\u65b9\u53bb\u4e86\u3002\n\n\u8fd9\u4e2a\u4f60\u679a\u4e3e\u5347\u9ad8\u54ea\u4e2a\u70b9\uff0c\u7136\u540e\u770b\u5b83\u80fd\u5f71\u54cd\u5230\u54ea\u4e9b\u70b9\uff0c\u8fd9\u4e2a\u53ef\u4ee5 $O(n)$ \u9884\u5904\u7406\u3002\n\n\u5269\u4e0b\u7684\u7ef4\u62a4\u6254\u5230\u7ebf\u6bb5\u6811\u4e0a\u5c31\u884c\uff0c\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define sz(x) (int)(x.size())\nusing namespace std;\nconst int mod=1e9+7,Base=233,inf=0x3f3f3f3f;\nconst long long INF=0x3f3f3f3f3f3f3f3f;\ntemplate<typename T>inline void chmax(T &a, T b){a=max(a,b);}\ntemplate<typename T>inline void chmin(T &a, T b){a=min(a,b);}\ninline void trans(int &a,int b){a+=b;if(a>mod)a-=mod;}\nconst int maxn=5e5+5;\nint n,m,h[maxn],s[maxn],mn1[maxn],mn2[maxn],ans=1e18,pos=-1;\nvector<int> g[maxn],mn[maxn];\nstruct node\n{\n\tint l,r,val,tag;\n};\nstruct segtree\n{\n\tnode tree[maxn<<2];\n\tvoid pushup(int x)\n\t{\n\t\ttree[x].val=min(tree[x<<1].val,tree[x<<1|1].val);\n\t}\n\tvoid pushdown(int x)\n\t{\n\t\tif(!tree[x].tag)\n\t\t\treturn;\n\t\ttree[x<<1].tag+=tree[x].tag;\n\t\ttree[x<<1|1].tag+=tree[x].tag;\n\t\ttree[x<<1].val+=tree[x].tag;\n\t\ttree[x<<1|1].val+=tree[x].tag;\n\t\ttree[x].tag=0;\n\t}\n\tvoid build(int x,int l,int r)\n\t{\n\t\ttree[x].l=l;\n\t\ttree[x].r=r;\n\t\ttree[x].tag=0;\n\t\tif(l==r)\n\t\t{\n\t\t\ttree[x].val=l-m-1;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(x<<1,l,mid);\n\t\tbuild(x<<1|1,mid+1,r);\n\t\tpushup(x);\n\t}\n\tvoid update(int x,int l,int r,int v)\n\t{\n\t\tif(tree[x].l>=l&&tree[x].r<=r)\n\t\t{\n\t\t\ttree[x].val+=v;\n\t\t\ttree[x].tag+=v;\n\t\t\treturn;\n\t\t}\n\t\tpushdown(x);\n\t\tint mid=(tree[x].l+tree[x].r)>>1;\n\t\tif(l<=mid)\n\t\t\tupdate(x<<1,l,r,v);\n\t\tif(r>mid)\n\t\t\tupdate(x<<1|1,l,r,v);\n\t\tpushup(x);\n\t}\n\tint query(int x,int l,int r)\n\t{\n\t\tif(tree[x].l>=l&&tree[x].r<=r)\n\t\t\treturn tree[x].val;\n\t\tpushdown(x);\n\t\tint mid=(tree[x].l+tree[x].r)>>1,ret=1e18;\n\t\tif(l<=mid)\n\t\t\tret=query(x<<1,l,r);\n\t\telse\n\t\t\tchmin(ret,query(x<<1|1,l,r));\n\t\treturn ret;\n\t}\n}tr;\nvoid update(int op,int x)\n{\n\tint l=1,r=m;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(s[mid]<=x)\n\t\t\tl=mid+1;\n\t\telse\n\t\t\tr=mid-1;\n\t}\n\tif(r>=1)\n\t\ttr.update(1,1,r,op);\n}\nvoid dfs1(int u,int p,int f,int s,int mnpos)\n{\n\tif(h[u]<f)\n\t\ts=f,f=h[u],mnpos=u;\n\telse if(h[u]<s)\n\t\ts=h[u];\n\tmn1[u]=f;\n\tmn2[u]=s;\n\tmn[mnpos].push_back(u);\n\tfor(int i=0;i<sz(g[u]);i++)\n\t{\n\t\tint v=g[u][i];\n\t\tif(v==p)\n\t\t\tcontinue;\n\t\tdfs1(v,u,f,s,mnpos);\n\t}\n}\nvoid dfs2(int u,int p)\n{\n\tif(h[u]<pos&&pos-h[u]<ans)\n\t{\n\t\tfor(int i=0;i<sz(mn[u]);i++)\n\t\t{\n\t\t\tupdate(-1,mn1[mn[u][i]]);\n\t\t\tupdate(1,min(mn2[mn[u][i]],pos));\n\t\t}\n\t\tif(tr.tree[1].val>=0)\n\t\t\tans=pos-h[u];\n\t\tfor(int i=0;i<sz(mn[u]);i++)\n\t\t{\n\t\t\tupdate(1,mn1[mn[u][i]]);\n\t\t\tupdate(-1,min(mn2[mn[u][i]],pos));\n\t\t}\n\t}\n\tfor(int i=0;i<sz(g[u]);i++)\n\t{\n\t\tint v=g[u][i];\n\t\tif(v==p)\n\t\t\tcontinue;\n\t\tdfs2(v,u);\n\t}\n}\nsigned main()\n{\n//    #ifndef _DEBUG\n//\t\tfreopen(\"a.in\",\"r\",stdin);\n//\t\tfreopen(\"a.out\",\"w\",stdout);\n//    #endif\n\tscanf(\"%lld\",&n);\n    for(int i=1;i<=n;i++)\n    \tscanf(\"%lld\",h+i);\n    int u,v;\n    for(int i=1;i<n;i++)\n    {\n    \tscanf(\"%lld%lld\",&u,&v);\n    \tg[u].push_back(v);\n    \tg[v].push_back(u);\n\t}\n\tscanf(\"%lld\",&m);\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%lld\",s+i);\n\tsort(s+1,s+m+1);\n\ttr.build(1,1,m);\n\tdfs1(1,0,1e18,1e18,0);\n\tfor(int i=1;i<=n;i++)\n\t\tupdate(1,mn1[i]);\n\tfor(int i=m;i>=1;i--)\n\t\tif(tr.query(1,i,i)<0)\n\t\t{\n\t\t\tpos=s[i];\n\t\t\tbreak;\n\t\t}\n\tif(pos==-1)\n\t{\n\t\tprintf(\"0\\n\");\n\t\treturn 0;\n\t}\n\tdfs2(1,0);\n\tif(ans==1e18)\n\t\tans=-1;\n\tprintf(\"%lld\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1660205484,
        "uid": 229669,
        "name": "Jerry__Jiang",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011CF533A Berland Miners"
    },
    {
        "content": "[Blog](https://blog.csdn.net/qq_42403731/article/details/88632452)\n###### ~~\u4e00\u9053\u641e\u4e86N\u5929\u7684\u795e\u4ed9\u9898~~\n## \u9898\u76ee\u5927\u610f\n\u4f60\u73b0\u5728\u6709M\u4e2a\u8d27\u7269\u8981\u4ece\u6839\u8282\u70b9\u8fd0\u5230\u6811\u4e0a\u5404\u8282\u70b9\uff08\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u653e\u4e00\u4e2a\uff09\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u9ad8\u5ea6$h[i]$,\u6bcf\u4e2a\u8d27\u7269\u90fd\u6709\u4e00\u4e2a\u9ad8\u5ea6$B[i]$\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8d27\u7269\u7ecf\u8fc7\u7684\u6240\u6709\u5c71\u6d1e\uff0c\u90fd\u4e0d\u80fd\u4f4e\u4e8e$B[i]$\n \u4f60\u73b0\u5728\u53ef\u4ee5\u6539\u53d8\u4e00\u4e2a\u5c71\u6d1e\u7684\u9ad8\u5ea6,\u95ee\u6700\u5c11\u589e\u52a0\u591a\u5c11\uff0c\u4f7f\u5f97\u6240\u6709\u8d27\u7269\u90fd\u80fd\u8fd0\u51fa\u53bb\n\n## \u9898\u89e3\n- ##### \u9996\u5148\u6765\u8003\u8651\u4e0d\u5f00\u51ff\u60c5\u51b5\n  \u8bbe\u7b2c$i$\u4e2a\u80fd\u653e\u8fdb$num[i]$\u4e2a\u5c71\u6d1e\uff0c\u90a3\u4e48\u663e\u7136\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u4e3a$\\forall num[i]>=i$\uff0c\u5373$\\forall num[i]-i>=0$\n  \u8fd9\u4e1c\u897f\u8fd8\u662f\u4e0d\u597d\u7ef4\u62a4\uff0c\u518d\u8f6c\u5316\u4e00\u4e0b\uff0c\u5c31\u662f$min(num[i]-i)>=0$\n  $\\longrightarrow$\u8fd9\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u65b9\u4fbf\u5730\u7ef4\u62a4\u4e86\n  \n- ##### \u63a5\u4e0b\u6765\u8003\u8651\u5f00\u51ff\n  \u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u679a\u4e3e\u6bcf\u4e00\u4e2a\u8282\u70b9\u5f00\u51ff\u7684\u9ad8\u5ea6\uff0c\u7136\u540echeck\u4e0a\u9762\u7684\u6761\u4ef6\n  \u5f53\u4e00\u4e2a$h[i]$\u6539\u53d8\u65f6\uff0c\u5bf9\u4e8e$num$\u7684\u5f71\u54cd\u662f\u4e00\u4e2a\u533a\u95f4$[1,k]$\uff0c\u5728$B[i]$\uff08\u6709\u5e8f\uff09\u4e0a\u4e8c\u5206\u5f97\u51fa\u8fd9\u4e2ak\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u4fee\u6539\uff0c\u4e4b\u540e\u518d\u6539\u56de\u6765\u5373\u53ef\n  **\u590d\u6742\u5ea6**$O(N*log^2)$\n  ~~\u7136\u540e\u62fc\u547d\u5361\u5e38\uff0c\u4ecd\u7136\u5361\u4e0d\u8fdb\u65f6\u9650\u3002\u3002~~\n- ##### \u7ee7\u7eed\u4f18\u5316\n  \u7ebf\u6bb5\u6811\u7684log\u57fa\u672c\u662f\u4f18\u4e0d\u6389\u4e86\uff0c\u90a3\u80fd\u4e0d\u80fd\u628a\u8282\u70b9\u7684\u4e8c\u5206\u7ed9\u53bb\u6389\u5462\uff1f\n  \u8003\u8651\u4e00\u4e2a\u5143\u7d20$max(B[i])\\in \\{num[i]-i<0\\}$\n  \u5bf9\u4e8e\u8fd9\u4e2a\u4e1c\u897f\uff0c\u5728\u6709\u89e3\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u5b9a\u4f1a\u6709\u4e00\u4e2a\u5c71\u6d1e\u88ab\u6539\u6210$B[i]$\n  > \u82e5\u6539B[k]>B[i]\uff0c\u5219\u5176\u4ed6B[k]\u4e00\u5b9a\u662f\u653e\u6ee1\u7684\uff0c\u5bf9\u4e8eB[i]\u6ca1\u6709\u5f71\u54cd\n  > \u82e5\u6539B[k]<B[i]\uff0c\u90a3\u4e48\u53ea\u53ef\u80fd\u8ba9num[i]\u53d8\u5f97\u66f4\u5c0f\uff0c\u4e5f\u6ca1\u7528\n  \n  \u6240\u4ee5\uff0c\u53ea\u9700\u8981\u679a\u4e3e\u6bcf\u4e2a\u8282\u70b9\u8ba9\u5b83\u53d8\u6210$B[i]$\u5373\u53ef\n  **\u590d\u6742\u5ea6**$O(N*log)$\n  ~~\u666e\u901a\u9012\u5f52\u5f0f\u7ebf\u6bb5\u6811\u5e38\u6570\u5de8\u5927\uff0c\u4ecd\u7136\u8dd1\u5f97\u6709\u70b9\u6162\u3002\u3002~~\n- ##### \u5c0fTrick\n  \u6211\u4eec\u5728\u6784\u9020\u65f6\u8981\u6784\u9020\u51fa\n  > Min[i]:\u5230\u6839\u8282\u70b9\u8def\u5f84\u7684\u6700\u5c0f\u503c\n  > Min_[i]:\u5230\u6839\u8282\u70b9\u8def\u5f84\u7684\u6b21\u5c0f\u503c\uff08\u975e\u4e25\u683c\uff0c\u66f4\u6539\u65f6\u8981\u7528\uff09\n  > id[i]:\u6700\u5c0f\u503c\u7684\u8282\u70b9\u6807\u53f7\n \n  \u90a3\u4e48\u6211\u4eec\u8d2a\u5fc3\u60f3\u6cd5\uff0c\u6309$Min[i]$\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u679a\u4e3e\u8282\u70b9\uff08\u6b64\u65f6\u53ef\u884c\u89e3\u8d8a\u6765\u8d8a\u5927\uff09\u9009\u62e9\n  \u5e76\u4e14\u53ea\u9009\u62e9id[i]==i\u4e14Min_[i]>Min[i]\u7684\u8282\u70b9\u8fdb\u884c\u5c1d\u8bd5\u2014\u2014**\u53ea\u6709\u8fd9\u4e9b\u8282\u70b9\u624d\u4f1a\u771f\u6b63\u4ea7\u751f\u5f71\u54cd**\n  \u7136\u540e\u5c31\u8dd1\u5f97\u6bd4\u8f83\u5feb\u4e50\u4e86~~\n\nCode\u7565\u957f~~\n\n```cpp\n#include<bits/stdc++.h>\n#define gt() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++)\n#define pt(ch) (Top<1000000?St[Top++]=ch:(Out(),St[(Top=0)++]=ch))\n#define Out() (fwrite(St,1,Top,stdout))\n#define __R register\n#define IL inline\nusing namespace std;\nint Top;static char St[1000000],buf[1000000],*p1=buf,*p2=buf;\nconst int maxn=(5e5)+5,INF=2e9;\nint N,Ans,M,Bas,B[maxn],h[maxn];bool vis[maxn];\nstruct Vector{\n    int tot,lnk[maxn],nxt[maxn<<1],son[maxn<<1];\n    IL void add_e(int x,int y){son[++tot]=y,nxt[tot]=lnk[x],lnk[x]=tot;}\n}T,G;\nIL int read(){\n    __R int ret=0;__R char ch=gt();\n    while(ch<'0'||ch>'9') ch=gt();\n    while(ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=gt();\n    return ret;\n}\nvoid write(int x){if(x>9) write(x/10);pt(x%10+'0');}\n//SegmentTree\nint tag[maxn<<2],P[maxn<<2],Mid[maxn<<2];\n#define Ls (i<<1)\n#define Rs (Ls|1)\nIL int Min(int x,int y){return x<y?x:y;}\nIL void Add(int i,int p){P[i]+=p,tag[i]+=p;}\nIL void Down(int i){Add(Ls,tag[i]),Add(Rs,tag[i]),tag[i]=0;}\nIL void Updata(int i){P[i]=Min(P[Ls],P[Rs]);}\nvoid Build(int i=1,int L=1,int R=M){\n    if(L==R) return (void)(P[i]=L-M-1);\n    Mid[i]=L+R>>1;\n    Build(Ls,L,Mid[i]),Build(Rs,Mid[i]+1,R),Updata(i);\n}\nvoid Modify(int x,int y,int p,int i=1,int L=1,int R=M){\n    if(x<=L&&R<=y) return (void)(Add(i,p));\n    if(tag[i]) Down(i);\n    if(x<=Mid[i]) Modify(x,y,p,Ls,L,Mid[i]);if(y>Mid[i]) Modify(x,y,p,Rs,Mid[i]+1,R);\n    Updata(i);\n}\nint Query(int x,int i=1,int L=1,int R=M){\n    if(L==R) return P[i];\n    if(tag[i]) Down(i);\n    return x<=Mid[i]?Query(x,Ls,L,Mid[i]):Query(x,Rs,Mid[i]+1,R);\n}\n//\u53ea\u8981\u5c1d\u8bd5\u5c06\u6240\u6709\u6d1e\u6539\u6210max(Bi)\u2208{num[i]-i<0}\uff0c\u56e0\u4e3a\u5728\u6709\u89e3\u65f6\uff0c\u4e00\u5b9a\u8981\u6709\u4e00\u4e2a\u6d1e\u88ab\u51ff\u6210\u8fd9\u4e2aBk \nvoid Find(){for(__R int i=M;i;i--) if(Query(i)<0){Bas=B[i];break;}}\n//Build\nint A1[maxn],A2[maxn],out[maxn],fuk[maxn];\nvoid Dfs(int x,int fa,int id,int Mi,int Mi_){\n    if(h[x]<=Mi) Mi_=Mi,Mi=h[x],id=x;else if(h[x]<Mi_) Mi_=h[x];\n    A1[x]=Mi,A2[x]=Mi_,T.add_e(id,x),fuk[x]=id;\n    for(__R int j=G.lnk[x];j;j=G.nxt[j]) if(G.son[j]!=fa) Dfs(G.son[j],x,id,Mi,Mi_);\n}\nIL int Calc(int x,int p){\n    __R int L=1,R=M,mid;\n    while(L<=R) if(B[mid=L+R>>1]<=x) L=mid+1;else R=mid-1;\n    if(R>=1) Modify(1,R,p);\n    return R;\n}\nint X[maxn],Y[maxn];\nIL void Solve(int x){\n    __R int lst=h[x];h[x]=Bas;\n    for(__R int j=T.lnk[x];j;j=T.nxt[j]) X[j]=Calc(A1[x],-1),Y[j]=Calc(Min(A2[T.son[j]],h[x]),1);\n    if(P[1]>=0) Ans=Bas-lst;\n    for(__R int j=T.lnk[x];j;j=T.nxt[j]){\n        if(X[j]>=1) Modify(1,X[j],1);\n        if(Y[j]>=1) Modify(1,Y[j],-1);\n    }\n    h[x]=lst;\n}\n//XG\nint len,id[maxn];\nstruct ff{\n    int x,y;\n    IL bool operator <(const ff b)const{return y<b.y;}\n}hep[maxn];\nIL void Put(int x,int y){hep[++len]=(ff){x,y},push_heap(hep+1,hep+1+len);}\nIL ff Get(){return pop_heap(hep+1,hep+1+len),hep[len--];}\nIL void ReBuild(){\n    int cnt=M;len=0,Put(1,h[1]);\n    while(len&&cnt){\n        __R ff i=Get();vis[i.x]=1,id[++id[0]]=i.x;\n        if(B[cnt]>i.y) break;\n        cnt--;\n        for(int j=G.lnk[i.x];j;j=G.nxt[j]) if(!vis[G.son[j]]) Put(G.son[j],Min(i.y,h[G.son[j]]));\n    }\n    while(len) vis[id[++id[0]]=Get().x]=1;\n}\nint main(){\n    N=read();\n    for(__R int i=1;i<=N;i++) h[i]=read();\n    for(__R int i=1;i<N;i++){\n        int x=read(),y=read();\n        G.add_e(x,y),G.add_e(y,x);\n    }\n    if((M=read())>N) return puts(\"-1\"),0;\n    for(__R int i=1;i<=M;i++) B[i]=read();sort(B+1,B+1+M),Ans=B[M];\n    Build(),Dfs(1,0,0,INF,INF),ReBuild();\n    for(__R int i=1;i<=N;i++) Calc(A1[i],1);\n    if(P[1]>=0) Ans=0;\n      else{\n      \tFind();\n      \tfor(int i=1,x;i<=id[0];i++) if(x=id[i],Bas>h[x]&&Bas-h[x]<Ans&&fuk[x]==x&&A2[x]>A1[x]) Solve(x);\n      }\n    if(Ans<B[M]) printf(\"%d\\n\",Ans);else puts(\"-1\");\n    return Out(),0;\n```\n",
        "postTime": 1552868845,
        "uid": 36779,
        "name": "ff_666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF533A \u3010Berland Miners\u3011"
    }
]