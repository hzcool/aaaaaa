[
    {
        "content": "\u8fd9\u9053\u88ab\u6211\u4e00\u773c\u79d2\u6389\u7684\u9898\u76ee\uff0c\u771f\u7684\u662f $1800$ \u7684\uff1f\n\n\u770b\u4e00\u4e0b\u9898\uff0c\u9898\u76ee\u4e2d\u7684\u610f\u601d\u5927\u6982\u5c31\u662f\u628a\u90a3\u4e2a\u5ea6\u6570 $\\ge 3$ \u7684\u89c6\u4e3a\u6839\uff0c\u7136\u540e\u628a\u5b83\u7684\u5b50\u8282\u70b9\u90fd\u7ed9\u66ff\u6362\u6389\u3002\n\n\u7136\u540e\u6211\u4eec\u53bb\u89c2\u5bdf\u4e00\u4e0b\u6837\u4f8b\uff0c\u53ef\u4ee5\u660e\u786e\u7684\u662f\u5ea6\u6570 $= 1$ \u7684\u80af\u5b9a\u662f\u4e00\u4e2a 1-multihedgehog \u7684\u5b50\u8282\u70b9\uff0c\u7136\u540e\u6211\u4eec\u5c06\u8fd9\u4e9b\u70b9\u5220\u6389\u4e4b\u540e\uff0c\u53d1\u89c9\u5220\u9664\u4e86\u4e4b\u540e\uff0c\u8fd9\u5f20\u56fe\u5c31\u662f k-1-multihedgehog\uff0c\u7136\u540e\u53ef\u4ee5\u731c\u6d4b\u4e00\u4e0b\uff0c\u5927\u6982\u5c31\u662f\u4ece\u5916\u9762\u5f80\u91cc\u641e\u3002\n\n\u5b9e\u9645\u8fd9\u9898\u76ee\u6709\u70b9\u7c7b\u4f3c\u4e0e\u62d3\u6251\u6392\u5e8f\uff0c\u53ef\u4ee5\u7c7b\u6bd4\uff0c\u7136\u800c\u8fd9\u9898\u76ee\u6811\u662f\u65e0\u5411\u8fb9\uff0c\u5f53\u7136\u4e5f\u4e0d\u662f\u6ca1\u6709\u529e\u6cd5\uff0c\u4f9d\u65e7\u53ef\u4ee5\u7c7b\u4f3c\u4e0e\u62d3\u6251\u6392\u5e8f\uff0c\u4e0d\u8fc7\u8981\u8bb0\u5f55\u4e00\u4e2a vis1 \u6570\u7ec4\uff0c\u4e3a\u5f53\u524d\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u90a3\u5c31\u4e4b\u540e\u65e0\u9700\u8bbf\u95ee\u3002\n\n\u5f53\u7136\uff0c\u8fd9\u4e5f\u6709\u70b9\u50cf BFS ~~\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4e5f\u4e0d\u592a\u6e05\u695a\u3002~~\n\n\u5927\u4f53\u7684\u60f3\u6cd5\u5c31\u662f\u5148\u628a\u5ea6\u6570 $\\ge 1$ \u7684\u90fd\u641e\u5230\u4e00\u4e2a\u961f\u5217\u91cc\u9762\uff0c\u7136\u540e\u53d6\u51fa\u8282\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\uff0c\u5b83\u7684\u513f\u5b50\u662f $\\ge 3$ \u4e2a\u7684\uff0c\u90a3\u4e48\u5c31\u662f\u53ef\u4ee5\u7684\uff0c\u5426\u5219\u53ef\u4ee5\u76f4\u63a5\u7279\u5224\u6389\u65e0\u89e3\uff0c\u56e0\u4e3a\u5b83\u8fd9\u4e2a\u8981\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u662f\u6839\u6216\u8005\u5ea6\u6570 $=1$ \u7684\u8282\u70b9\uff0c\u5f53\u7136\u5bf9\u4e8e\u5b83\u7684\u513f\u5b50\u6765\u8bf4\uff0c\u5982\u679c\u4ed6\u4eec\u7684\u56fe\u7ea7\u522b\u4e0d\u4e00\u6837\uff0c\u663e\u7136\u4e5f\u662f\u65e0\u89e3\u3002\n\n\u4e0a\u8ff0\u56fe\u7684\u7ea7\u522b\u6307\u7684\u662f k-multihedgehog \u4e2d\u7684 k\u3002\n\n\u7136\u540e\u6211\u4eec\u53bb\u5bfb\u627e\u8fd9\u4e2a\u6700\u5927\u7684\u7ea7\u522b\u662f\u5565\uff0c\u6bd4\u8f83\u4e00\u4e0b\u5b83\u548c\u9898\u76ee\u4e2d\u7ed9\u5b9a\u7684 $k$ \u5373\u53ef\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#include <cstring>\nusing namespace std;\nconst int INF=1e5+5;\nstruct _node_edge{\n    int to_,next_;\n}edge[INF<<1];\nint head[INF],tot,in[INF],dis_[INF],vis[INF],vis1[INF];\nqueue <int> q;\nvoid add_edge(int x,int y) {\n    edge[++tot]=(_node_edge){y,head[x]};\n    head[x]=tot;in[y]++;return ;\n}\nint n,k;\nsigned main()\n{\n    memset(dis_,255,sizeof dis_);\n    scanf(\"%d %d\",&n,&k);\n    for (int i=1;i<n;i++) {\n        int x=0,y=0;scanf(\"%d %d\",&x,&y);\n        add_edge(x,y);add_edge(y,x);\n    }\n    for (int i=1;i<=n;i++) {\n        if (in[i]==1) {\n            dis_[i]=0;\n            vis[i]=1e9;\n            vis1[i]=1;\n            q.push(i);\n        }\n    }\n    while (q.size()) {\n        int x=q.front();q.pop();\n        vis1[x]=1;\n        // cout<<x<<\"\\n\";\n        if (vis[x]<3) {cout<<\"No\\n\";return 0;}\n        for (int i=head[x];i;i=edge[i].next_) {\n            int v=edge[i].to_;if (vis1[v]) continue;\n            if (dis_[v]==-1) dis_[v]=dis_[x]+1,vis[v]=1;\n            else if (dis_[v]!=dis_[x]+1) {cout<<\"No\\n\";return 0;}\n            else vis[v]++;\n            if (--in[v]==1) q.push(v);\n        }\n    }\n    int Max=0;\n    for (int i=1;i<=n;i++)\n        Max=max(Max,dis_[i]);\n    // cout<<dis_[6]<<\" over\\n\";\n    if (Max==k) cout<<\"Yes\\n\";\n    else cout<<\"No\\n\";\n    return 0;\n}\n```\n",
        "postTime": 1645190737,
        "uid": 208653,
        "name": "_edge_",
        "ccfLevel": 0,
        "title": "CF1067B"
    },
    {
        "content": "### \u9898\u610f\uff1a\n\n\u5b9a\u4e49 k-multihedgehog \u4e3a\uff1a\n\n\u5bf9\u4e8e 1-multihedgehog\uff0c\u5176\u4e2d\u4e00\u4e2a\u70b9\u5ea6\u6570 $\\ge3$ \uff0c\u5176\u5b83\u70b9\u5ea6\u6570\u5747\u4e3a $1$.\n\nk-multihedgehog \u662f\u5728 (k-1)-multihedgehog \u7684\u57fa\u7840\u4e0a\uff0c\u628a\u6240\u6709\u5ea6\u4e3a $1$ \u7684\u70b9\u66ff\u6362\u6210\u4e00\u4e2a 1-multihedgehog \u5e76\u4e0e\u539f\u56fe\u76f8\u8fde\u3002\n\n\u73b0\u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9\u7684\u56fe\u4ee5\u53ca\u4e00\u4e2a\u6570 $k$ \uff0c\u95ee\u8fd9\u5f20\u56fe\u662f\u4e0d\u662f\u4e00\u4e2a k-multihedgehog\u3002\n\n### \u601d\u8def\uff1a\n\n\u5148\u60f3\u60f3\u5df2\u77e5\u8fd9\u68f5\u6811\u7684 root \u7684\u65f6\u5019\u3002\n\n\u8fd9\u53ef\u4ee5\u76f4\u63a5 dfs \u626b\u4e00\u904d\uff0c\u5224\u65ad\u6bcf\u4e2a\u70b9\u6240\u5bf9\u5e94\u7684\u5b50\u6811\u662f\u5426\u7b26\u5408\u8981\u6c42\u5373\u53ef\u3002\n\n\u8fb9\u754c\u4e3a\u6df1\u5ea6\u7b49\u4e8e $k$ \u65f6\uff0c\u6b64\u65f6\u76f4\u63a5\u5224\u65ad\u4e0e\u5b83\u76f8\u8fde\u7684\u6709\u51e0\u6761\u8fb9\u3002\n\n\u82e5\u4e0d\u662f\u8fb9\u754c\uff0c\u5f53\u8fde\u8fb9\u6570 $<3$ \u65f6(\u4e0d\u7b97\u4e0e\u7236\u4eb2\u76f8\u8fde\u7684)\uff0c\u8bf4\u660e\u4e0d\u6210\u7acb\uff0c\u8f93\u51fa No\u3002\n\n\u8003\u8651\u5982\u4f55\u6c42 root\u3002\n\n\u8fd9\u91cc\u6709\u4e24\u79cd\u65b9\u6cd5:\n\n\u7b2c\u4e00\uff0c\u7528\u4e00\u79cd\u7c7b\u4f3c\u62d3\u6251\u6392\u5e8f\u7684\u7b97\u6cd5\u6c42\n\n\u4f46\u8fd9\u79cd\u65b9\u6cd5\u8fd8\u8981\u5220\u8fb9\uff0c\u8fc7\u4e8e\u9ebb\u70e6\uff0c\u5148\u4e0d\u8fc7\u591a\u8003\u8651\n\n\u7b2c\u4e8c\uff0c\u5b9a\u4e49\u4e00\u4e2a\u70b9\u7684\u9ad8\u5ea6\u4e3a\u5b83\u513f\u5b50\u9ad8\u5ea6\u7684\u6700\u5927\u503c $+1$ \uff0c\u53f6\u5b50\u8282\u70b9\u9ad8\u5ea6\u4e3a $1$\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 $root$ \u7684\u9ad8\u5ea6\u4e00\u5b9a\u662f $k+1$\n\n\u5e76\u4e14\u5176\u4f59\u70b9\u7684\u9ad8\u5ea6\u90fd\u4e0d\u4e0e $root$ \u76f8\u540c\uff0c\u5426\u5219\u4e0d\u5408\u6cd5\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u4efb\u9009\u4e00\u4e2a\u70b9\u8dd1\u4e00\u8fb9 dfs \u6c42\u6bcf\u4e2a\u70b9\u7684\u9ad8\u5ea6\uff0c\n\n\u5224\u65ad\u4e00\u4e0b $root$ \uff0c\u518d\u8dd1\u4e00\u904d\u521a\u521a\u7684\u505a\u6cd5\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\n\n\u6ce8\u610f,\u5f53 $k \\ge n$ \u65f6\uff0c\u53ef\u76f4\u63a5\u8f93\u51fa No\uff0c\u6b64\u65f6\u5fc5\u7136\u65e0\u89e3\u3002\n\n### \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,k,dep[100005],mat[100005],head[100005],edgenum,root;\nstruct node{\n\tint to,nxt;\n}edge[200005];\nvoid add(int u,int v){\n\tedgenum++;\n\tedge[edgenum].to=v;\n\tedge[edgenum].nxt=head[u];\n\thead[u]=edgenum;\n}\nvoid dfs1(int u,int fa){\n\tint mx=0;\n\tfor(int e=head[u];e;e=edge[e].nxt){\n\t\tint v=edge[e].to;\n\t\tif(v==fa) continue;\n\t\tdfs1(v,u);\n\t\tmx=max(mx,dep[v]);\n\t}\n\tdep[u]=mx+1;\n}\nbool dfs2(int u,int fa,int dep){\n\tint cnt=0;\n\tfor(int e=head[u];e;e=edge[e].nxt){\n\t\tint v=edge[e].to;\n\t\tif(v==fa) continue;\n\t\tcnt++;\n\t}\n\tif(dep==k) return (cnt==0);\n\tif(cnt<3) return false;\n\tbool flag=true;\n\tfor(int e=head[u];e;e=edge[e].nxt){\n\t\tint v=edge[e].to;\n\t\tif(v==fa) continue;\n\t\tflag=flag&dfs2(v,u,dep+1);\n\t}\n\treturn flag;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\tif(k>=n){\n\t\tprintf(\"No\");\n\t\treturn 0;\n\t}\n\tfor(int i=1,u,v;i<n;i++){\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);add(v,u);\n\t}\n\tdfs1(1,0);\n\tbool flag1=0;\n\tfor(int i=1;i<=n;i++)\n\t\tif(dep[i]==k+1){\n\t\t\tif(flag1){\n\t\t\t\tprintf(\"No\");\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tflag1=true;\n\t\t\troot=i;\n\t\t}\n\tflag1=dfs2(root,0,0);\n\tif(flag1) printf(\"Yes\");\n\telse printf(\"No\");\n\treturn 0;\n}\n```\n",
        "postTime": 1630149700,
        "uid": 120028,
        "name": "Dunkerque",
        "ccfLevel": 0,
        "title": "CF1067B"
    },
    {
        "content": "## \u9898\u610f\n\n\u5b9a\u4e49\u4e00\u68f5\u6811 k-multihedgehog\uff1a\n\n\u5bf9\u4e8e 1-multihedgehog\uff0c\u5176\u4e2d\u4e00\u4e2a\u70b9\u5ea6\u6570 $\\ge3$ \uff0c\u5176\u5b83\u70b9\u5ea6\u6570\u5747\u4e3a $1$.\n\nk-multihedgehog \u662f\u5728 k-1-multihedgehog \u7684\u57fa\u7840\u4e0a\uff0c\u628a\u6240\u6709\u5ea6\u4e3a $1$ \u7684\u70b9\u66ff\u6362\u6210\u4e00\u4e2a 1-multihedgehog \u5e76\u4e0e\u539f\u56fe\u76f8\u8fde\u3002\n\n## \u89e3\u6790\n\n\u6211\u4eec\u53ef\u4ee5\u7528**\u6a21\u62df**\u7684\u505a\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6211\u4eec\u5148\u5047\u8bbe\u7ed9\u51fa\u7684\u6811\u662f k-multihedgehog \u7136\u540e\u7531\u5916\u81ea\u5185\u4e00\u5c42\u4e00\u5c42\u5220\u9664\u5e76\u8bb0\u5f55\u5220\u4e86\u51e0\u5c42\uff0c\u6700\u540e\u518d\u5c06\u6211\u4eec\u5f97\u5230\u7684\u5c42\u6570\u4e0e $k$ \u8fdb\u884c\u6bd4\u8f83\uff0c\u5224\u65ad\u662f\u5426\u76f8\u540c\u5373\u53ef\u3002\u5f53\u7136\uff0c\u5982\u679c\u5728\u6a21\u62df\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4e86\u4e0d\u5408\u9898\u610f\u7684\u60c5\u51b5\uff0c\u5c31\u76f4\u63a5\u8f93\u51fa `No` \u5e76\u9000\u51fa\u3002\n\n\u90a3\u6a21\u62df\u5177\u4f53\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u6700\u5916\u5c42\u7684\u70b9\u62bd\u51fa\u6765\uff0c\u7136\u540e\u627e\u5230\u4ed6\u4eec\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u518d\u5c06\u8fd9\u4e2a\u7236\u4eb2\u8282\u70b9\u5904\u7406\u4e86\uff0c\u5904\u7406\u5b8c\u8fd9\u4e2a\u7236\u4eb2\u8282\u70b9\u7684\u540c\u65f6\u628a\u8fd9\u4e2a\u7236\u4eb2\u8282\u70b9\u63a8\u8fdb\u961f\u5217\u91cc\u53bb\uff0c\u6210\u4e3a\u4e0b\u4e00\u8f6e\u7684\u201c\u6700\u5916\u5c42\u7684\u70b9\u201d\uff0c\u5982\u6b64\u5f80\u590d\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u76f8\u90bb\u4e24\u5c42\u8981\u5206\u5f00\u5904\u7406\uff0c\u6211\u4eec\u9700\u8981\u4e24\u4e2a\u961f\u5217\u6eda\u4e00\u4e0b\u3002\n\n\u8fd9\u4e48\u8bb2\u53ef\u80fd\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u4ee3\u7801\u4f1a\u6ce8\u91ca\u7684\u6bd4\u8f83\u8be6\u7ec6\u3002\n\n## \u4ee3\u7801\n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+5;\nint n,K;\nstruct edge{\n\tint to,next;\n}e[N<<1];\nint head[N],cnt,num;\nint vis[N];\nint in[N];\ninline void add(int x,int y){\n\te[++cnt].to=y;\n\te[cnt].next=head[x];\n\thead[x]=cnt;\n}\ninline void solve(){\n\tqueue<int> q[2];\n\tfor(int i=1;i<=n;i++)\n\t\tif(in[i]==1) q[0].push(i),vis[i]=0;//\u63a8\u8fdb\u6700\u5916\u5c42\u7684\u70b9 \n\tfor(int\tt=0;;t^=1){//\u76f8\u90bb\u4e24\u5c42\u4e0d\u80fd\u6df7\u6dc6\uff0c\u56e0\u6b64\u9700\u8981\u7528 t \u6807\u8bb0\u4e00\u4e0b \n\t\twhile(!q[t].empty()){\n\t\t\tint x=q[t].front();q[t].pop();\n\t\t\tif(in[x]==0) continue;//\u5982\u679c\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u88ab\u5904\u7406\u8fc7\u4e86\uff0c\u5373\u5ea6\u6570\u51cf\u4e3a 0 \u4e86\uff0c\u76f4\u63a5 continue \u5373\u53ef \n\t\t\tint u;\n            for(int i=head[x];i;i=e[i].next){//\u5bfb\u627e\u7236\u4eb2\u8282\u70b9 \n                if(in[e[i].to]==0) continue;\n                u=e[i].to;break;\n            }\n            if(in[u]<3){printf(\"No\\n\");exit(0);}//\u5982\u679c\u7236\u4eb2\u8282\u70b9\u5ea6\u6570 <3\uff0c\u663e\u7136\u662f\u4e0d\u5408\u9898\u610f\u7684 \n\t\t\tint tot=0;//tot \u8bb0\u5f55\u513f\u5b50\u4e2a\u6570 \n\t\t\tfor(int i=head[u];i;i=e[i].next){\n\t\t\t\tint v=e[i].to;\n\t\t\t\tif(in[v]==1&&vis[v]==t) in[v]--,in[u]--,tot++;//\u5bf9\u4e8e\u627e\u5230\u7684\u513f\u5b50\uff0c\u7236\u4eb2\u548c\u513f\u5b50\u90fd\u5904\u7406\u4e00\u4e0b \n\t\t\t}\n\t\t\tif(tot<3){printf(\"No\\n\");exit(0);}//\u5982\u679c\u975e\u6700\u5916\u5c42\u8282\u70b9\u7684\u513f\u5b50\u6570 <3\uff0c\u663e\u7136\u662f\u4e0d\u5408\u9898\u610f\u7684 \n\t\t\tq[t^1].push(u);vis[u]=t^1;\n//\t\t\tprintf(\"out%d %d %d %d\\n\",x,u,t,num);\n\t\t}\n\t\tif(q[t^1].empty()) break;//\u5982\u679c\u4e0b\u4e00\u8f6e\u662f empty \uff0c\u90a3\u4e48\u8bf4\u660e\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u6700\u7ec8\u7684\u521d\u59cb\u7236\u4eb2\u4e86\uff0c\u53ef\u4ee5\u9000\u51fa \n\t\tnum++;\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&K);\n\tmemset(vis,-1,sizeof(vis));\n\tfor(int i=1,x,y;i<n;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);add(y,x);\n\t\tin[x]++;in[y]++;//\u521d\u59cb\u8bb0\u5f55\u5ea6\u6570 \n\t}\n\tif(K>=n){printf(\"No\\n\");return 0;}//\u663e\u7136\uff0c\u5c42\u6570\u5927\u4e8e\u70b9\u6570\u76f4\u63a5\u8f93\u51fa No (\u9898\u9762 k\u7684\u8303\u56f4\u7279\u522b\u5927) \n\tsolve();\n\tif(num==K) printf(\"Yes\\n\");//\u82e5\u6a21\u62df\u5f97\u5230\u7684\u5c42\u6570\u548c\u7ed9\u51fa\u7684\u76f8\u540c\uff0c\u8f93\u51fa Yes \n\telse printf(\"No\\n\");\n\treturn 0;\n}\n```\n\n\u5982\u679c\u5bf9\u4ee3\u7801\u7406\u89e3\u4ecd\u7136\u6709\u56f0\u96be\uff0c\u53ef\u4ee5\u6ce8\u610f\u4ee3\u7801\u91cc\u6709\u4e00\u884c\u88ab\u6ce8\u91ca\u6389\u7684 `printf` \uff0c\u5bf9\u4e8e\u6837\u4f8b $1$ \uff0c\u8f93\u51fa\u7ed3\u679c\u662f\u8fd9\u6837\u7684\uff1a\n\n```\nout1 4 0 0\nout7 6 0 0\nout10 5 0 0\nout4 13 1 1\n```\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u7a0b\u5e8f\u5148\u627e\u5230\u4e86\u6700\u5916\u5c42\u7684 $1$ \u53f7\u70b9\uff0c\u7136\u540e\u5904\u7406\u4e86\u7236\u4eb2 $4$ \u53f7\u70b9\uff0c\u8fd9\u6837\u4e09\u6b21\u5904\u7406\u4e86\u7b2c\u4e00\u5c42\uff0c\u7136\u540e\u627e\u5230\u4e86\u7b2c\u4e8c\u8f6e\u6210\u4e3a\u6700\u5916\u5c42\u7684 $4$ \u53f7\u70b9\uff0c\u5904\u7406\u4e86\u4ed6\u7684\u7236\u4eb2 $13$ \u53f7\u70b9\uff0c\u6700\u540e $13$ \u53f7\u70b9\u5904\u7406\u4e4b\u540e\u5f97\u5230\u7684\u4e0b\u4e00\u5c42\u662f empty \u7684\uff0c\u5faa\u73af\u5c31\u7ed3\u675f\u4e86\uff0c\u9664\u521d\u59cb\u6839\u4ee5\u5916\u627e\u5230\u4e86 $2$ \u5c42\uff0c\u4e0e $k$ \u76f8\u540c\uff0c\u6545\u7ed3\u679c\u4e3a `Yes`\u3002\n\n## \u7410\u8bb0\n\n\u62ff\u5230\u8fd9\u9898\u7684\u65f6\u5019\uff0c\u6211\u771f\u7684\u89c9\u5f97\u2026\u2026\u633a\u7b80\u5355\uff0c\u7ed3\u679c\u4e00\u76f4 WA \uff0c\u53d1\u73b0\u8fd9\u9053\u9898\u5751\u70b9\u5f88\u591a\uff0c\u5904\u7406\u4e5f\u7b97\u662f\u6bd4\u8f83\u9ebb\u70e6\u3002\u6b64\u5916\uff0c\u4e0d\u76f4\u63a5\u4ece\u5916\u5411\u5185\u5904\u7406\uff0c\u800c\u662f\u6bcf\u6b21\u627e\u7236\u4eb2\u8282\u70b9\u5904\u7406\u6700\u5916\u5c42\u7684\u601d\u8def\u4e5f\u7b97\u662f\u6bd4\u8f83\u6709\u8da3\u7684\u4e86\u3002",
        "postTime": 1599986408,
        "uid": 195229,
        "name": "water_tomato",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1067B \u3010Multihedgehog\u3011"
    }
]