[
    {
        "content": "\u9006\u5e8f\u5bf9\u5206\u4e3a\u56db\u79cd\uff1a\n\n1. \u7ed9\u5b9a\u7684\u6570\u4e4b\u95f4\u7684\u9006\u5e8f\u5bf9\u3002\n\n2. \u4e0d\u786e\u5b9a\u7684\u6570\u4e4b\u95f4\u7684\u9006\u5e8f\u5bf9\u3002\n\n3. \u7ed9\u5b9a\u7684\u6570\u5728\u4e0d\u786e\u5b9a\u7684\u6570\u5de6\u8fb9\u7684\u9006\u5e8f\u5bf9\u3002\n\n4. \u7ed9\u5b9a\u7684\u6570\u5728\u4e0d\u786e\u5b9a\u7684\u6570\u53f3\u8fb9\u7684\u9006\u5e8f\u5bf9\u3002\n\n## \u4e00\u3001\u7ed9\u5b9a\u7684\u6570\u4e4b\u95f4\u7684\u9006\u5e8f\u5bf9\n\n\u7528\u6811\u72b6\u6570\u7ec4/\u5f52\u5e76\u6392\u5e8f\u4e4b\u7c7b\u7684\u6c42\u5373\u53ef\u3002\n\n## \u4e8c\u3001\u4e0d\u786e\u5b9a\u7684\u6570\u4e4b\u95f4\u7684\u9006\u5e8f\u5bf9\n\n\u4efb\u53d6\u4e24\u4e2a\u4e0d\u786e\u5b9a\u7684\u6570\uff0c\u4e3a\u9006\u5e8f\u5bf9\u7684\u6982\u7387\u4e3a $\\frac1 2$ \u3002\u8bb0\u603b\u7684 $-1$ \u6570\u91cf\u4e3a $\\rm tot$\uff0c\u90a3\u4e48\u603b\u671f\u671b\u4e3a $\\frac{\\rm{tot}\\times(\\rm{tot}-1)}4$ \u3002\n\n## \u4e09\u3001\u7ed9\u5b9a\u7684\u6570\u5728\u4e0d\u786e\u5b9a\u7684\u6570\u5de6\u8fb9\u7684\u9006\u5e8f\u5bf9\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7ed9\u5b9a\u7684\u6570\uff0c\u8bb0\u603b\u7684 $-1$ \u6570\u91cf\u4e3a $\\rm tot$\uff0c\u6ca1\u6709\u51fa\u73b0\u5728\u7ed9\u5b9a\u7684\u6570\u4e2d\u7684\u6570\uff08\u4e5f\u5c31\u662f\u4e0d\u786e\u5b9a\u7684\u6570\u53ef\u4ee5\u53d6\u7684\u503c\uff09\u91cc\u6709 $\\rm low$ \u4e2a\u6bd4\u5b83\u5c0f\uff0c\u90a3\u4e48\u6bcf\u4e2a\u5728\u5b83\u53f3\u8fb9\u7684\u4e0d\u786e\u5b9a\u7684\u4f4d\u7f6e\u6bd4\u5b83\u5c0f\u7684\u6982\u7387\u4e3a $\\frac{\\rm low}{\\rm tot}$\uff0c\u5728\u5b83\u53f3\u8fb9\u6709 $r$ \u4e2a\u4f4d\u7f6e\u4e0d\u786e\u5b9a\uff0c\u8fd9\u4e2a\u7ed9\u5b9a\u7684\u6570\u8d21\u732e\u5c31\u662f $\\frac{r\\times\\rm{low}}{\\rm tot}$ \u3002\n\n## \u56db\u3001\u7ed9\u5b9a\u7684\u6570\u5728\u4e0d\u786e\u5b9a\u7684\u6570\u53f3\u8fb9\u7684\u9006\u5e8f\u5bf9\n\n\u4e0e\u4e0a\u9762\u4e00\u79cd\u60c5\u51b5\u7c7b\u4f3c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7ed9\u5b9a\u7684\u6570\uff0c\u8bb0\u603b\u7684 $-1$ \u6570\u91cf\u4e3a $\\rm tot$\uff0c\u6ca1\u6709\u51fa\u73b0\u5728\u7ed9\u5b9a\u7684\u6570\u4e2d\u7684\u6570\uff08\u4e5f\u5c31\u662f\u4e0d\u786e\u5b9a\u7684\u6570\u53ef\u4ee5\u53d6\u7684\u503c\uff09\u91cc\u6709 $\\rm high$ \u4e2a\u6bd4\u5b83\u5927\uff0c\u90a3\u4e48\u6bcf\u4e2a\u5728\u5b83\u5de6\u8fb9\u7684\u4e0d\u786e\u5b9a\u7684\u4f4d\u7f6e\u6bd4\u5b83\u5927\u7684\u6982\u7387\u4e3a $\\frac{\\rm high}{\\rm tot}$\uff0c\u5728\u5b83\u5de6\u8fb9\u6709 $l$ \u4e2a\u4f4d\u7f6e\u4e0d\u786e\u5b9a\uff0c\u8fd9\u4e2a\u7ed9\u5b9a\u7684\u6570\u8d21\u732e\u5c31\u662f $\\frac{l\\times\\rm{high}}{\\rm tot}$ \u3002\n\n## \u5173\u4e8e\u4e09\u3001\u56db\u7684\u5177\u4f53\u5b9e\u73b0\n\n$l$ \u548c $r$ \u53ef\u4ee5\u7528\u524d\u7f00\u548c\u8ba1\u7b97\u3002\n\n\u9884\u5904\u7406\u51fa\u5c0f\u4e8e\u7b49\u4e8e $i$ \u7684\u6570\u4e2d\u6709 $\\mathrm{cnt}[i]$ \u4e2a\u6570\u7ed9\u5b9a\uff0c\u90a3\u4e48 $\\mathrm{low}[i]=i-\\mathrm{cnt}[i]$\uff0c$\\mathrm{high}[i]=\\mathrm{tot}-\\mathrm{low}[i]$ \u3002\n\n## \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\ntypedef long long ll;\n\nconst int N=200010;\nconst int M=998244353; \n\nint qpow(int x,int y); //\u5feb\u901f\u5e42\u7528\u4e8e\u6c42\u9006\u5143 \nvoid add(int p,int x); //\u6811\u72b6\u6570\u7ec4 \nint query(int p);\n\nint n,a[N],l[N],r[N],BIT[N],cnt[N],ans;\n\nint main()\n{\n\tint i,inv;\n\t\n\tscanf(\"%d\",&n);\n\t\n\tfor (i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%d\",a+i);\n\t\tif (a[i]!=-1) ++cnt[a[i]];\n\t\tl[i]=l[i-1]+(a[i]==-1);\n\t}\n\t\n\tfor (i=1;i<=n;++i)\n\t{\n\t\tcnt[i]+=cnt[i-1]; //\u6c42\u7ed9\u5b9a\u7684\u6570\u4e2a\u6570\u7684\u524d\u7f00\u548c \n\t}\n\t\n\tinv=qpow(4,M-2);\n\tans=(ll)l[n]*(l[n]-1)%M*inv%M; //\u7b2c\u4e8c\u79cd\u9006\u5e8f\u5bf9\n\t\n\tinv=qpow(l[n],M-2); //\u7528l[n]\u4ee3\u8868tot\uff0c\u6c42\u51fatot\u7684\u9006\u5143 \n\t\n\tfor (i=n;i>=1;--i)\n\t{\n\t\tr[i]=r[i+1]+(a[i]==-1);\n\t\tif (a[i]!=-1)\n\t\t{\n\t\t\tans=(ans+query(a[i]))%M; //\u7b2c\u4e00\u79cd\u9006\u5e8f\u5bf9 \n\t\t\tadd(a[i],1);\n\t\t\tans=(ans+(ll)r[i]*(a[i]-cnt[a[i]])%M*inv%M)%M; //\u7b2c\u4e09\u79cd\u9006\u5e8f\u5bf9\n\t\t\tans=(ans+(ll)l[i]*(l[n]-a[i]+cnt[a[i]])%M*inv%M)%M; //\u7b2c\u56db\u79cd\u9006\u5e8f\u5bf9 \n\t\t}\n\t}\n\t\n\tprintf(\"%d\",ans);\n\t\n\treturn 0;\n}\n\nint qpow(int x,int y)\n{\n\tint out=1;\n\twhile (y)\n\t{\n\t\tif (y&1) out=(ll)out*x%M;\n\t\tx=(ll)x*x%M;\n\t\ty>>=1;\n\t}\n\treturn out;\n}\n\nvoid add(int p,int x)\n{\n\tfor (;p<=n;p+=(p&-p))\n\t{\n\t\tBIT[p]+=x;\n\t}\n}\n\nint query(int p)\n{\n\tint out=0;\n\tfor (;p>0;p-=(p&-p))\n\t{\n\t\tout+=BIT[p];\n\t}\n\treturn out;\n}\n```",
        "postTime": 1546050531,
        "uid": 49742,
        "name": "ouuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1096F \u3010Inversion Expectation\u3011"
    },
    {
        "content": "[\u539f\u9898\u5730\u5740](https://codeforces.com/problemset/problem/1096/F)\n\n[luogu\u5730\u5740](https://www.luogu.com.cn/problem/CF1096F)\n\n\u9898\u610f\u5341\u5206\u6e05\u6670\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\n### \u5206\u6790\n\n\u89c2\u5bdf\u5230\u4e00\u5171\u6709\u4e24\u79cd\u6570\u5b57\uff0c\u786e\u5b9a\u7684\u548c\u4e0d\u786e\u5b9a\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u6210\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\u9006\u5e8f\u5bf9\u8d21\u732e\u3002\n\n#### 1. \u786e\u5b9a\u4f4d\u7f6e\u548c\u786e\u5b9a\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8d21\u732e\n\n\u6811\u72b6\u6570\u7ec4\u6216\u5f52\u5e76\u76f4\u63a5\u6c42\u5373\u53ef\u3002\n\n\u6ce8\u610f\u8fd9\u4e00\u90e8\u5206\u7684\u9006\u5e8f\u5bf9\u662f\u5bf9\u6bcf\u4e2a\u6392\u5217\u90fd\u6709\u8d21\u732e\u7684\uff0c\u6240\u4ee5\u4e0d\u7528\u9664\u4ee5 $k!$\u3002\n\n#### 2. \u4e0d\u786e\u5b9a\u4f4d\u7f6e\u548c\u4e0d\u786e\u5b9a\u4f4d\u7f6e\u4e4b\u95f4\u7684\u9006\u5e8f\u5bf9\u8d21\u732e\n\n\u7531\u4e8e\u9898\u76ee\u4fdd\u8bc1\u7ed9\u5b9a\u7684\u4e00\u5b9a\u662f\u4e00\u4e2a\u6392\u5217\uff0c\u6545\u4e0d\u5b58\u5728\u4e24\u4e2a\u6570\u5b57\u76f8\u540c\u7684\u60c5\u51b5\u3002\n\n\u8bbe\u4e00\u5171\u6709 $k$ \u4e2a\u4e0d\u786e\u5b9a\u7684\u6570\u5b57\uff0c\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u957f\u5ea6\u4e3a $k$ \u7684\u6240\u6709\u6392\u5217\u4e2d\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\u548c\u3002\n\n\u6ce8\u610f\u5230\u4e00\u4e2a\u6392\u5217 $p_1,p_2,...p_{n}$ \u4e2d\u4e00\u5171\u6709 $ \\dfrac{n\\times(n-1)}{2}$ \u4e2a\u4e8c\u5143\u7ec4 $(p_i,p_j)$  $(i < j)$\uff0c\u8003\u8651\u7ffb\u8f6c\u7684\u6392\u5217 $p_{n},p_{n-1},...,p_1$ \uff0c\u6bcf\u4e2a\u4e8c\u5143\u7ec4\u4f1a\u4ee5\u76f8\u53cd\u7684\u5f62\u5f0f\u51fa\u73b0\u5728\u7ffb\u8f6c\u6392\u5217\u4e2d\uff0c\u7531\u4e8e\u4e24\u4e2a\u6570\u5b57\u4e0d\u76f8\u7b49\uff0c\u5fc5\u7136\u6709\u4e14\u4ec5\u6709\u4e00\u7ec4\u8d21\u732e $1$ \u7684\u9006\u5e8f\u5bf9\u6570\uff0c\u6240\u4ee5\u4e24\u4e2a\u6392\u5217\u4e00\u5171\u7684\u9006\u5e8f\u5bf9\u6570\u4fbf\u662f $ \\frac{n\\times(n-1)}{2}$\u3002\n\n\u4e00\u5171\u6709 $\\frac{n!}{2}$ \u79cd\u76f8\u53cd\u7684\u6392\u5217\uff0c\u6240\u4ee5\u8fd9\u4e00\u90e8\u5206\u7684\u603b\u8d21\u732e\u662f $\\frac{k \\times (k-1) \\times k!}{4}$\u3002\n\n\u6ce8\u610f\u8fd9\u662f\u603b\u9006\u5e8f\u5bf9\u6570\u91cf\uff0c\u8981\u9664\u4ee5 $k!$\u3002\n\n#### 3. \u786e\u5b9a\u4f4d\u7f6e\u548c\u4e0d\u786e\u5b9a\u4f4d\u7f6e\u95f4\u7684\u9006\u5e8f\u5bf9\u8d21\u732e\n\n\u5047\u8bbe\u6211\u4eec\u679a\u4e3e\u5230\u7b2c $i$ \u4e2a\u4f4d\u7f6e\uff0c\u5b83\u524d\u9762\u6709 $num$ \u4e2a\u4e0d\u786e\u5b9a\u7684\u4f4d\u7f6e\uff08\u8fd9\u8868\u660e\u540e\u9762\u5171\u6709 $k-num$ \u4e2a\uff09\u3002\n\n\u4e8c\u5206\u6216\u6811\u72b6\u6570\u7ec4\u627e\u5230\u6bd4 $p_i$ \u5c0f\u7684\u5e76\u4e14\u672a\u786e\u5b9a\u4f4d\u7f6e\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5047\u8bbe\u4e3a $m$\u3002\n\n\u90a3\u4e48\u6bcf\u4e2a\u6bd4 $p_i$ \u5c0f\u7684\u6570\u6709 $\\frac{num}{k}$ \u7684\u6982\u7387\u5728 $p_i$ \u524d\u9762\uff0c\u6bcf\u4e2a\u6bd4 $p_i$ \u5927\u7684\u6570\u6709 $\\frac{k-num}{k}$ \u7684\u6982\u7387\u5728 $p_i$ \u540e\u9762\u3002\n\n\u6545\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u671f\u671b\u8d21\u732e\u4e3a\n\n$$\\frac{m \\times num}{k} + \\frac{(k-m)\\times(k-num)}{k}$$\n\n\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u6c42\u548c\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u7b97\u7684\u662f\u6982\u7387\uff0c\u6240\u4ee5\u4e5f\u4e0d\u7528\u9664\u4ee5 $k!$\u3002\n\n\u6700\u540e\u628a\u4e09\u79cd\u60c5\u51b5\u7684\u671f\u671b\u52a0\u8d77\u6765\u5373\u53ef\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nconst int N = 200010;\nconst int mod = 998244353;\nint n;\nint a[N];\nbool vis[N];\nll qpow(ll a,ll b){\n    ll res=1;\n    for (; b; b>>=1){\n        if (b&1) res=res*a%mod;\n        a=a*a%mod;\n    }\n    return res;\n}\nll pro[N], inv[N], invn[N];\nvoid init(){\n    pro[0]=inv[0]=invn[0]=1;\n    for (int i=1;i<=N-10;++i) pro[i]=pro[i-1]*i%mod;\n    inv[N-10]=qpow(pro[N-10],mod-2);\n    for (int i=N-11;i>=1;--i) inv[i]=inv[i+1]*(i+1)%mod;\n    for (int i=N-10;i>=1;--i) invn[i]=inv[i]*pro[i-1]%mod;\n}\nint c[N];\nvoid add(int x,int d){for (; x<=n; x+=x&-x) c[x]+=d;}\nint ask(int x){int res=0; for (; x; x-=x&-x) res+=c[x]; return res;}\nint main(){\n    cin>>n;\n    init();\n    for (int i=1;i<=n;++i){\n        cin>>a[i];\n        if (a[i]>0) vis[a[i]]=1;\n    }\n    int k=0;\n    for (int i=1;i<=n;++i){\n        if (!vis[i]) add(i,1),k++;\n    }\n    ll inv2=qpow(2,mod-2);\n    ll ans=pro[k]*inv2%mod*k%mod*(k-1)%mod*inv2%mod*inv[k]%mod;\n    ll cnt=0;\n    for (int i=n;i>=1;--i){\n        if (a[i]==-1) cnt++;\n        else{\n            ll m=ask(a[i]);\n            ll add1=cnt*invn[k]%mod*m%mod;\n            ll add2=(k-cnt)*invn[k]%mod*(k-m)%mod;\n            ans=(ans+add1+add2)%mod;\n        }\n    }\n    memset(c,0,sizeof(c));\n    for (int i=n;i>=1;--i){\n        if (a[i]!=-1){\n            ans=(ans+ask(a[i]))%mod;\n            add(a[i],1);\n        }\n\n    }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1665843998,
        "uid": 615501,
        "name": "Fanch100",
        "ccfLevel": 7,
        "title": "CF1096F Inversion Expectation \u505a\u9898\u8bb0\u5f55"
    },
    {
        "content": "$a_i=-1$\u7684\u79f0\u4e3a\u672a\u77e5\u6570\uff0c\u5426\u5219\u79f0\u4e3a\u5df2\u77e5\u6570\n\n\u9006\u5e8f\u5bf9\u6570\u5206\u62103\u5757\u8003\u8651\uff0c\u4e24\u4e2a\u5df2\u77e5\u6570\u7684\u9006\u5e8f\u5bf9\uff0c\u5df2\u77e5\u6570\u548c\u672a\u77e5\u6570\u7684\u9006\u5e8f\u5bf9\uff0c\u4e24\u4e2a\u672a\u77e5\u6570\u7684\u9006\u5e8f\u5bf9\u3002\n\n\u4e24\u4e2a\u5df2\u77e5\u6570\u7684\u9006\u5e8f\u5bf9\uff0c\u6811\u72b6\u6570\u7ec4\u626b\u4e00\u904d\u5373\u53ef\n\n\u4e24\u4e2a\u672a\u77e5\u6570\u7684\u9006\u5e8f\u5bf9\uff0c\u8bbe\u6709$m$\u4e2a\u672a\u77e5\u6570\uff0c\u6bcf\u4e00\u5bf9\u4e4b\u95f4\u7684\u9006\u5e8f\u5bf9\u6570\u91cf\u671f\u671b\u90fd\u662f$0.5$\uff0c\u6240\u4ee5\u8fd9\u4e00\u5757\u7b54\u6848\u662f$m(m-1)*0.25$\n\n\u5df2\u77e5\u6570\u548c\u672a\u77e5\u6570\u7684\u9006\u5e8f\u5bf9\uff0c\u4e5f\u5f88\u7b80\u5355\uff0c\u5148\u628a\u6240\u6709\u672a\u77e5\u6570\u7b97\u51fa\u6765\uff0c\u6c42\u51fa\u6bcf\u4e00\u4e2a\u5df2\u77e5\u6570\u5927\u4e8e\u591a\u5c11\u4e2a\u672a\u77e5\u6570\uff0c\u8bbe\u4e3a$cnt_i$\n\n\u4ece\u5de6\u5230\u53f3\u626b\u4e00\u904d\u6240\u6709\u7684\u672a\u77e5\u6570\uff0c\u5bf9\u4e8e\u5728\u5de6\u8fb9\u7684\u5df2\u77e5\u6570\uff0c\u90a3\u4e2a\u6570\u5fc5\u987b\u5927\u4e8e\u8fd9\u4e2a\u672a\u77e5\u6570\u624d\u80fd\u4ea7\u751f\u8d21\u732e\uff0c\u6240\u4ee5\u671f\u671b\u662f$\\frac{cnt_i}{m}$\uff1b\u53f3\u8fb9\u7684\u671f\u671b\u662f$\\frac{m-cnt_i}{m}$\n\n\u6240\u4ee5\u626b\u5230\u5df2\u77e5\u6570\u7684\u65f6\u5019\u91cd\u65b0\u7b97\u8fd9\u4e2a\u5df2\u77e5\u6570\u7684\u8d21\u732e\u5c31\u597d\u4e86\n\n```cpp\n#include<bits/stdc++.h>\n#define il inline\n#define vd void\n#define mod 998244353\n#define inv2 499122177\ntypedef long long ll;\nil int gi(){\n    int x=0,f=1;\n    char ch=getchar();\n    while(!isdigit(ch)){\n        if(ch=='-')f=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nint n,ans,A[200010],t[200010],B[200010],m;\nbool yes[200010];\nil vd update(int x){while(x<=n)++t[x],x+=x&-x;}\nil int query(int x){int r=0;while(x)r+=t[x],x-=x&-x;return r;}\nil int pow(int x,int y){\n    int ret=1;\n    while(y){\n        if(y&1)ret=1ll*ret*x%mod;\n        x=1ll*x*x%mod;y>>=1;\n    }\n    return ret;\n}\nint main(){\n#ifndef ONLINE_JUDGE\n    freopen(\"in.in\",\"r\",stdin);\n    freopen(\"out.out\",\"w\",stdout);\n#endif\n    n=gi();\n    for(int i=1;i<=n;++i)A[i]=gi();\n    for(int i=n;i;--i)if(~A[i])ans=(ans+query(A[i]))%mod,update(A[i]);\n    int cnt=0;for(int i=1;i<=n;++i)if(A[i]==-1)++cnt;\n    ans=(ans+1ll*cnt*(cnt-1)%mod*inv2%mod*inv2%mod)%mod;\n    if(cnt){\n        for(int i=1;i<=n;++i)if(~A[i])yes[A[i]]=1;\n        for(int i=1;i<=n;++i)if(!yes[i])B[++m]=i;\n        int invm=pow(m,mod-2);\n        for(int i=1;i<=n;++i)if(~A[i])A[i]=1ll*invm*(std::lower_bound(B+1,B+m+1,A[i])-B-1)%mod;\n        int res=0;for(int i=1;i<=n;++i)if(~A[i])res=(res+1+mod-A[i])%mod;\n        for(int i=1;i<=n;++i)\n            if(~A[i])res=(res-1ll+A[i]+A[i])%mod;\n            else ans=(ans+res)%mod;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1546588373,
        "uid": 23118,
        "name": "\u03bb\u1d09\u028d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1096F \u3010Inversion Expectation\u3011"
    },
    {
        "content": "\u5206\u522b\u8ba1\u7b97 $ -1 $ \u548c $ -1 $ \u7684\u8d21\u732e\uff0c$ -1 $ \u548c\u6570\u5b57\u7684\u8d21\u732e\uff0c\u6570\u5b57\u548c\u6570\u5b57\u7684\u8d21\u732e\n\n\u7b2c\u4e00\u4e2a\u7528 $ dp $ \u6c42\u51fa\uff0c\u7b2c\u4e8c\u4e2a\u7528\u524d\u7f00\u548c\u6c42\u51fa\uff0c\u7b2c\u4e09\u4e2a\u7528\u6811\u72b6\u6570\u7ec4\u6c42\u51fa\n\n$ sb $ \u7684\u6211\u80fd\u7528\u524d\u7f00\u548c\u7684\u5730\u65b9\u5199\u4e86\u6811\u72b6\u6570\u7ec4\n\n```cpp\n#include <bits/stdc++.h>\n#define Fast_cin ios::sync_with_stdio(false), cin.tie();\n#define rep(i, a, b) for(register int i = a; i <= b; i++)\n#define per(i, a, b) for(register int i = a; i >= b; i--)\n#define DEBUG(x) cerr << \"DEBUG\" << x << \" >>> \" << endl;\nusing namespace std;\n\ntypedef unsigned long long ull;\ntypedef long long ll;\n\ntemplate <typename _T>\ninline void read(_T &f) {\n    f = 0; _T fu = 1; char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') fu = -1; c = getchar(); }\n    while(c >= '0' && c <= '9') { f = (f << 3) + (f << 1) + (c & 15); c = getchar(); }\n    f *= fu;\n}\n\ntemplate <typename T>\nvoid print(T x) {\n    if(x < 0) putchar('-'), x = -x;\n    if(x < 10) putchar(x + 48);\n    else print(x / 10), putchar(x % 10 + 48);\n}\n\ntemplate <typename T>\nvoid print(T x, char t) {\n    print(x); putchar(t);\n}\n\nconst int N = 2e5 + 5, md = 998244353;\n\ninline int mul(int x, int y) { return (ll)x * y % md; }\n\ninline int add(int x, int y) {\n\tx += y;\n\tif(x >= md) x -= md;\n\treturn x;\n}\n\ninline int sqr(int x) { return mul(x, x); }\n\ninline int fpow(int x, int y) {\n\tint ans = 1;\n\twhile(y) {\n\t\tif(y & 1) ans = mul(ans, x);\n\t\ty >>= 1; x = sqr(x);\n\t}\n\treturn ans;\n}\n\nint a[N], s[N], f[N], fac[N];\nint n, inv2 = (md + 1) / 2, ans1;\n\ninline int lowbit(int x) { return x & -x; }\n\nvoid change(int x, int y) {\n\tfor(register int i = x; i <= n; i += lowbit(i))\n\t\tf[i] += y;\n}\n\nint query(int x) {\n\tint ans = 0;\n\tfor(register int i = x; i; i -= lowbit(i))\n\t\tans += f[i];\n\treturn ans;\n}\n\nint main() {\n\tread(n); fac[0] = 1;\n\tfor(register int i = 1; i <= n; i++) read(a[i]), fac[i] = mul(fac[i - 1], i), s[i] = 1;\n\tfor(register int i = n; i >= 1; i--) {\n\t\tif(a[i] == -1) continue;\n\t\tans1 = add(ans1, query(a[i]));\n\t\tchange(a[i], 1);\n\t}\n\tmemset(f, 0, sizeof(f));\n\tfor(register int i = 1; i <= n; i++) {\n\t\tif(a[i] != -1) s[a[i]] = 0;\n\t}\n\tfor(register int i = 1; i <= n; i++) s[i] += s[i - 1];\n\tans1 = mul(ans1, fac[s[n]]);\n\tfor(register int i = 1; i <= s[n]; i++) f[i] = add(f[i - 1], mul(mul(fac[s[n]], fpow(i, md - 2)), mul(i - 1, mul(i, inv2))));\n\tans1 = add(ans1, f[s[n]]); memset(f, 0, sizeof(f));\n\tfor(register int i = 1; i <= n; i++) if(a[i] == -1) change(i, 1);\n\tfor(register int i = 1; i <= n; i++) {\n\t\tif(a[i] == -1) continue;\n\t\tint val = mul(s[a[i]], query(n) - query(i));\n\t\tval = add(val, mul(s[n] - s[a[i]], query(i)));\n\t\tval = mul(val, fac[s[n] - 1]);\n\t\tans1 = add(ans1, val);\n\t}\n\tprint(mul(ans1, fpow(fac[s[n]], md - 2)), '\\n');\n\treturn 0;\n}\n```\n",
        "postTime": 1546165625,
        "uid": 51815,
        "name": "LJC00118",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1096F \u3010Inversion Expectation\u3011"
    },
    {
        "content": "# CF1096F\n\nInversion Expectation\n\n## \u9898\u76ee\u53d9\u8ff0\n\n\u7ed9\u4f60\u4e00\u4e2a\u6263\u6389\u4e86\u4e00\u4e9b\u6570\u7684\u5168\u6392\u5217\u3002\u95ee\u4f60\u8fd9\u4e2a\u5168\u6392\u5217\u5982\u679c\u52a0\u4e0a\u90a3\u4e9b\u6263\u6389\u7684\u6570\uff0c\u9006\u5e8f\u5bf9\u6570\u7684\u671f\u671b\u3002\n\n## \u9898\u89e3\n\n\u7b54\u6848\u5373\u4e3a$E(\\sum_{i=1}^{n-1}\\sum_{j=i+1}^n a_i>a_j)$\u3002\n\n\u8003\u8651\u628a\u9006\u5e8f\u5bf9\u5206\u4e3a\u4e09\u79cd\uff1a\n\n1. \u4e24\u4e2a\u672a\u77e5\u6570\u7684\u9006\u5e8f\u5bf9\n2. \u4e00\u4e2a\u672a\u77e5\u6570\u4f55\u4e00\u4e2a\u5df2\u77e5\u6570\u7684\u9006\u5e8f\u5bf9\n3. \u4e24\u4e2a\u5df2\u77e5\u6570\u7684\u9006\u5e8f\u5bf9\n\n\u524d\u4e24\u79cd\u63a8\u5f0f\u5b50\uff0c\u6700\u540e\u4e00\u79cd\u6811\u72b6\u6570\u7ec4\u5373\u53ef\u3002\n\n## \u77e5\u8bc6\u70b9\n\n+ Fading \u53eb\u8fd9\u4e2a\u8ba1\u7b97\u8d21\u732e...\u53ef\u80fd\u6709\u70b9\u50cf\u662f\uff1f\u4e0d\u77e5\u9053",
        "postTime": 1585645084,
        "uid": 75715,
        "name": "KokiNiwa",
        "ccfLevel": 0,
        "title": "Inversion Expectation\uff08\u671f\u671b\uff09"
    }
]