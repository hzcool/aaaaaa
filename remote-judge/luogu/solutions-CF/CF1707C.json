[
    {
        "content": "\u56e0\u4e3a\u6240\u6709\u8fb9\u6743\u4e24\u4e24\u4e0d\u540c\uff0c\u6240\u4ee5 MST \u662f\u552f\u4e00\u7684\uff0c\u6211\u4eec\u628a MST \u4e0a\u7684\u8fb9\u6807\u8bb0\u51fa\u6765\u3002\n\n\u6211\u4eec\u77e5\u9053\u5bf9\u56fe\u8fdb\u884c DFS \u540e\uff0c\u53ea\u6709\u6811\u8fb9\u548c\u8fd4\u7956\u8fb9\u4e24\u7c7b\u8fb9\u3002\u8981\u4f7f\u5f97 MST \u4e0a\u7684\u8fb9\u5747\u4e3a\u6811\u8fb9\uff0c\u5219\u4e0d\u5728 MST \u4e0a\u7684\u8fb9\u53ea\u80fd\u4e3a\u8fd4\u7956\u8fb9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5728 MST \u4e0a\u7684\u8fb9\u5728\u5f53\u524d\u6839\u4e0b\u5fc5\u987b\u662f\u7956\u5148\u540e\u4ee3\u5173\u7cfb\u3002\n\n\u81f3\u6b64\uff0c\u539f\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u5224\u65ad\u6bcf\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6839\u65f6\uff0c\u6240\u6709\u975e MST \u8fb9\u7684\u4e24\u4e2a\u70b9\u662f\u5426\u90fd\u662f\u7956\u5148\u540e\u4ee3\u5173\u7cfb\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u968f\u4fbf\u627e\u4e00\u4e2a\u70b9\u5f53\u6839\uff0c\u628a\u6bcf\u6761\u975e MST \u8fb9\u4e24\u4fa7\u5b50\u6811\u6bcf\u4e2a\u70b9\u7684\u503c\u52a0\u4e00\uff08\u53ea\u6709\u5728\u8fd9\u4e9b\u70b9\u5f53\u6839\u65f6\u624d\u662f\u7956\u5148\u540e\u4ee3\u5173\u7cfb\uff09\uff0c\u7136\u540e\u5224\u65ad\u6bcf\u4e2a\u70b9\u7684\u503c\u662f\u5426\u7b49\u4e8e $m-n+1$ \u5373\u53ef\u3002\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u7528\u6811\u4e0a\u5dee\u5206\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$\u3002\n\n```cpp\n// Problem: C. DFS Trees\n// Contest: Codeforces - Codeforces Round #808 (Div. 1)\n// URL: https://codeforces.com/contest/1707/problem/C\n// Memory Limit: 256 MB\n// Time Limit: 1000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n//By: OIer rui_er\n#include <bits/stdc++.h>\n#define rep(x,y,z) for(int x=(y);x<=(z);x++)\n#define per(x,y,z) for(int x=(y);x>=(z);x--)\n#define debug printf(\"Running %s on line %d...\\n\",__FUNCTION__,__LINE__)\n#define fileIO(s) do{freopen(s\".in\",\"r\",stdin);freopen(s\".out\",\"w\",stdout);}while(false)\nusing namespace std;\ntypedef long long ll;\nconst int N = 2e5+5;\n\nint n, m, vis[N], fa[N][20], dis[N], s[N];\nvector<tuple<int, int> > e;\nvector<int> t[N];\ntemplate<typename T> void chkmin(T& x, T y) {if(x > y) x = y;}\ntemplate<typename T> void chkmax(T& x, T y) {if(x < y) x = y;}\nstruct Dsu {\n\tint fa[N];\n\tvoid init(int x) {rep(i, 1, x) fa[i] = i;}\n\tint find(int x) {return x == fa[x] ? x : fa[x] = find(fa[x]);}\n\tbool merge(int x, int y) {\n\t\tint u = find(x), v = find(y);\n\t\tif(u == v) return 0;\n\t\tfa[u] = v;\n\t\treturn 1;\n\t}\n}dsu;\nvoid kruskal() {\n\tdsu.init(n);\n\trep(i, 0, m-1) {\n\t\tint u = get<0>(e[i]), v = get<1>(e[i]);\n\t\tif(dsu.merge(u, v)) {\n\t\t\tvis[i] = 1;\n\t\t\tt[u].push_back(v);\n\t\t\tt[v].push_back(u);\n\t\t}\n\t}\n}\nvoid dfs1(int u, int f) {\n\tfa[u][0] = f;\n\tdis[u] = dis[f] + 1;\n\trep(i, 1, 19) fa[u][i] = fa[fa[u][i-1]][i-1];\n\tfor(int v : t[u]) if(v != f) dfs1(v, u);\n}\nint LCA(int u, int v) {\n\tif(dis[u] < dis[v]) swap(u, v);\n\tper(i, 19, 0) if(dis[fa[u][i]] >= dis[v]) u = fa[u][i];\n\tif(u == v) return u;\n\tper(i, 19, 0) if(fa[u][i] != fa[v][i]) u = fa[u][i], v = fa[v][i];\n\treturn fa[u][0];\n}\nvoid dfs2(int u, int f) {\n\ts[u] += s[f];\n\tfor(int v : t[u]) if(v != f) dfs2(v, u);\n}\n\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\trep(i, 0, m-1) {\n\t\tint u, v;\n\t\tscanf(\"%d%d\", &u, &v);\n\t\te.emplace_back(u, v);\n\t}\n\tkruskal();\n\tdfs1(1, 0);\n\trep(i, 0, m-1) {\n\t\tif(!vis[i]) {\n\t\t\tint u = get<0>(e[i]), v = get<1>(e[i]);\n\t\t\tint lca = LCA(u, v);\n\t\t\tif(dis[u] > dis[v]) swap(u, v);\n\t\t\tif(lca == u) {\n\t\t\t\t++s[1], ++s[v];\n\t\t\t\tint p = v;\n\t\t\t\tper(j, 19, 0) if(dis[fa[p][j]] > dis[u]) p = fa[p][j];\n\t\t\t\t--s[p];\n\t\t\t}\n\t\t\telse ++s[u], ++s[v];\n\t\t}\n\t}\n\tdfs2(1, 0);\n\trep(i, 1, n) putchar(s[i]==m-n+1?'1':'0');\n\tputs(\"\");\n\treturn 0;\n}\n```",
        "postTime": 1658118069,
        "uid": 122461,
        "name": "rui_er",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1707C\u3010DFS Trees\u3011"
    },
    {
        "content": "**\u7528\u5e76\u67e5\u96c6\u6c42\u51fa MST\u3002**\n\n\u7531\u4e8e\u9898\u76ee\u7ed9\u7684\u8fb9\u6743\u4e24\u4e24\u4e0d\u540c\uff0c\u6240\u4ee5\uff1a\n\n**MST \u552f\u4e00\u3002**\n\n\u7136\u540e\u89c2\u5bdf\u51fd\u6570\u7684\u904d\u5386\u987a\u5e8f\uff0c\u53d1\u73b0\uff1a\n\n**\u9898\u76ee\u7ed9\u7684\u51fd\u6570\u751f\u6210\u7684\u662f\u4ece\u6bcf\u4e2a\u70b9\u51fa\u53d1\u7684 DFS \u641c\u7d22\u6811\u3002**\n\n\u7136\u540e\u5c31\u662f\u5173\u952e\u7684\u60f3\u6cd5\uff1a\n\n**DFS \u641c\u7d22\u6811\u6ca1\u6709\u6a2a\u5411\u8fb9\u3002**\n\n\u7136\u800c\u9664\u4e86\u6a2a\u5411\u8fb9\u5c31\u662f\u8fd4\u7956\u8fb9\uff0c\u6709\uff1a\n\n**\u6240\u6709\u8fd4\u7956\u8fb9\u5747\u53ef\u884c\u3002**\n\n\u8bbe $v$ \u5411 $u$ \u8fd4\u7956\uff0c$u$ \u5411 $v$ \u7684\u7b2c\u4e00\u6761\u8fb9\u8fde\u5411 $w$\uff0c\u7531\u4e8e MST \u7684\u6027\u8d28\uff0c\u5f97\u5230\u8fb9\u6743\u7684\u4e0d\u7b49\u5f0f $(u,v)>(u,w)$\uff0c\u6240\u4ee5\u5728 $u$ \u70b9\u8981\u904d\u5386 $v$ \u7684\u65f6\u5019 $v$ \u70b9\u5fc5\u7136\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u6240\u4ee5\u8fd4\u7956\u8fb9\u53ef\u884c\u3002\n\n\u7531\u4e8e\u6a2a\u5411\u8fb9\u4e0d\u53ef\u884c\uff0c\u5f97\u5230\u672c\u9898\u7684\u5145\u8981\u6761\u4ef6\uff1a\n\n**\u5bf9\u4e8e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9 $(u,v)$\uff0c\u6811\u4e0a\u4e00\u4e2a\u70b9 $x$ \u80fd\u4f5c\u4e3a\u8d77\u59cb\u70b9\u5f53\u4e14\u4ec5\u5f53 $x$ \u7b2c\u4e00\u6b21\u8d70\u5230 $\\text{path}(u,v)$ \u65f6\u662f\u5728 $u$ \u6216 $v$\u3002**\n\n\u7531\u4e8e\u548c\u5b50\u6811\u6709\u5173\uff0c\u6211\u4eec\u60f3\u5230\u7edf\u8ba1\u65b9\u5f0f\uff1a\n\n**\u6811\u4e0a\u5dee\u5206\u3002**\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\uff0c\u5b9e\u73b0\u53ef\u505a\u5230\uff1a\n\n**\u65f6\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u3002**\n\n[\u4ee3\u7801](https://codeforces.com/contest/1707/submission/164574252)\n\n",
        "postTime": 1658197274,
        "uid": 101868,
        "name": "I_am_Accepted",
        "ccfLevel": 0,
        "title": "CF1707C DFS Trees\uff08DFS \u641c\u7d22\u6811\uff09"
    },
    {
        "content": "## \u89e3\u9898\u601d\u8def\uff1a\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u628a\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u627e\u51fa\u6765\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u7684\u8fb9\u6743\u90fd\u4e0d\u60f3\u76f8\u540c\uff0c\u6240\u4ee5\u6700\u5c0f\u751f\u6210\u6811\u662f\u552f\u4e00\u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u89c2\u5bdf\u5176\u4ed6\u8fb9\u3002\n\n\u5982\u6837\u4f8b $1$\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/7r1thr86.png)\n\n\u8fb9\u6743\u4e3a $4$ \u7684\u90a3\u6761\u8fb9\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u3002\n\n\u5982\u679c\u4ece $1$ \u53f7\u70b9\u5f00\u59cb\uff0c\u4ed6\u4f1a\u5148\u5230 $2$ \u53f7\u70b9\uff0c\u7136\u540e\u56e0\u4e3a $3$ \u53f7\u70b9\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u6240\u4ee5\u4ed6\u4f1a\u8fb9\u6743\u4e3a $4$ \u7684\u90a3\u6761\u8fb9\u8d70\u5230 $3$\uff0c\u56e0\u4e3a\u8fd9\u6761\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff0c\u6240\u4ee5\u6700\u540e\u627e\u51fa\u6765\u7684\u5c31\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e86\u3002\n\n\u5206\u522b\u4ece\u5176\u4ed6\u70b9\u51fa\u53d1\uff0c\u53d1\u73b0\u90fd\u4e0d\u4f1a\u7ecf\u8fc7\u8fb9\u6743\u4e3a $4$ \u7684\u90a3\u6761\u8fb9\u3002\n\n\u6240\u4ee5\u8981\u60f3\u627e\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5c31\u4e0d\u80fd\u7ecf\u8fc7\u975e\u6811\u8fb9\u3002\n\n\u4e0d\u59a8\u4ee51\u4e3a\u6839\uff0c\u90a3\u4e48 $lca(2,3)=1$\uff0c\u6211\u4eec\u5ffd\u7565\u8fb9\u6743\uff0c\u4ece $1$ \u51fa\u53d1\u80af\u5b9a\u4f1a\u5148\u5230 $2$ \u548c $3$ \u5176\u4e2d\u4e00\u4e2a\u70b9\uff0c\u518d\u901a\u8fc7\u8fd9\u6761\u975e\u6811\u8fb9\u5230\u53e6\u4e00\u4e2a\u70b9\u3002\n\n\u5982\u679c\u8fd8\u6709\u5176\u4ed6\u5b50\u6811\u548c $1$ \u53f7\u8fde\u63a5\uff0c\u90a3\u4e48\u4e3a\u4e86\u4fdd\u8bc1\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e9b\u70b9\u80af\u5b9a\u901a\u8fc7\u6811\u8fb9\u5230 $1$ \u597d\u70b9\uff0c\u4e4b\u540e\u5c31\u548c\u4ece $1$ \u53f7\u70b9\u51fa\u53d1\u7684\u60c5\u51b5\u4e00\u6837\u4e86\u3002\n\n\u6211\u4eec\u8003\u8651\u666e\u904d\u60c5\u51b5\uff0c\u5bf9\u4e8e\u4e00\u6761\u975e\u6811\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9 $u,v(dep_u>dep_v)$\uff0c\u5982\u679c $lca(u,v)\\not=v$\uff0c\u9664\u4e86 $u,v$ \u5b50\u6811\u4ee5\u5916\u7684\u7684\u70b9\u5168\u90e8\u90fd\u4e0d\u5408\u6cd5\uff08\u4ece\u90a3\u4e2a\u70b9\u51fa\u53d1\u4e0d\u80fd\u627e\u5230\u6700\u5c0f\u751f\u6210\u6811\uff09\u3002\n\n\u53ef\u4ee5\u7528\u6811\u4e0a\u5dee\u5206\u89e3\u51b3\uff0c\u5373 $p_i$ \u4e3a $p=i$ \u5b50\u6811\u5185\u7684\u70b9\u90fd\u4e0d\u5408\u6cd5\uff0c\u6bcf\u6b21\u6211\u4eec\u90fd\u6267\u884c $p_{root}+1,p_u-1,p_v-1$ \u7684\u64cd\u4f5c\u3002\n\n\u6ce8\u610f\u5230\u6211\u4eec\u4e0a\u9762\u6709 $lca(u,v)\\not=v$ \u7684\u6761\u4ef6\u9650\u5236\uff0c\u5982\u679c $lca(u,v)=v$,\u4ee5\u4ece $u$ \u5230 $v$ \u94fe\u4e0a\u7684\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u7684\u6240\u6709\u70b9\u90fd\u4e0d\u5408\u6cd5\uff0c\u56e0\u4e3a\u4ece\u8fd9\u4e9b\u70b9\u8981\u5148\u8d70\u5230\u94fe\u4e0a\uff0c\u7136\u540e\u5c31\u4f1a\u51fa\u73b0\u5148\u8d70\u5230 $u,v$ \u4e24\u4e2a\u70b9\u5176\u4e2d\u4e00\u4e2a\uff0c\u518d\u901a\u8fc7\u975e\u6811\u8fb9\u8d70\u5230\u53e6\u4e00\u4e2a\u70b9\u7684\u60c5\u51b5\u4e86\u3002\u6ce8\u610f $u,v$ \u4e24\u70b9\u662f\u5408\u6cd5\u7684\uff0c\u56e0\u4e3a\u4ece\u4ed6\u4eec\u51fa\u53d1\uff0c\u4e00\u5f00\u59cb\u8bbf\u95ee\u4e86\u4ed6\u4eec\u81ea\u5df1\u3002\n\n\u5bf9\u4e8e $lca(u,v)=v$ \u7684\u60c5\u51b5\uff0c\u5148\u5c06 $p_u-1$\uff0c\u5c06 $u$ \u8df3\u5230 $v$ \u4e0b\u9762\uff0c\u518d\u5c06 $p_u-1$\u3002\n\n\u6700\u540e $dfs$ \u4e0b\u4f20 $p$ \u5373\u53ef\uff0c$p=0$ \u7684\u70b9\u5c31\u662f\u5408\u6cd5\u70b9\u3002\n\n## \u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<stack>\n#define rep(x,y,z) for(int x=y;x<=z;x++)\n#define per(x,y,z) for(int x=z;x>=y;x--)\n\nusing namespace std;\n\nconst int N=2e5+10;\n\nstruct UNMST\n{\n\tint u,v;\n}un[N];\n\nvector<int>e[N];\nint fa[N],pa[N][25],dep[N],p[N];\nbool ans[N];\n\nint find(int x)\n{\n\tif(fa[x]==x) return x;\n\telse return fa[x]=find(fa[x]);\n}\n\nvoid dfs(int cur)\n{\n\tfor(int i=0;i<e[cur].size();i++)\n\t{\n\t\tint nt=e[cur][i];\n\t\tif(nt==pa[cur][0]) continue;\n\t\tpa[nt][0]=cur;\n\t\tdep[nt]=dep[cur]+1;\n\t\tdfs(nt);\n\t}\n}\n\nint LCA(int x,int y)\n{\n\tfor(int i=20;i>=0;i--) if(dep[pa[x][i]]>=dep[y]) x=pa[x][i];\n\tif(x==y) return x;\n\tfor(int i=20;i>=0;i--)\n\tif(pa[x][i]!=pa[y][i])\n\t{\n\t\tx=pa[x][i];\n\t\ty=pa[y][i];\n\t}\n\treturn pa[x][0];\n}\n\nvoid dfs2(int cur)\n{\n\tfor(int i=0;i<e[cur].size();i++)\n\t{\n\t\tint nt=e[cur][i];\n\t\tif(nt==pa[cur][0]) continue;\n\t\tp[nt]+=p[cur];\n\t\tdfs2(nt);\n\t}\n\tif(p[cur]==0) ans[cur]=1;\n}\n\nint x[N],y[N];\n\nint main()\n{\n\tint n,m,num=0;\n\tscanf(\"%d%d\",&n,&m);\n\trep(i,1,m) scanf(\"%d%d\",&x[i],&y[i]);\n\trep(i,1,n) fa[i]=i;\n\trep(i,1,m)\n\t{\n\t\tint fx=find(x[i]),fy=find(y[i]);\n\t\tif(fx==fy) un[++num]=(UNMST) {x[i],y[i]};\n\t\telse\n\t\t{\n\t\t\tfa[fx]=fy;\n\t\t\te[x[i]].push_back(y[i]);\n\t\t\te[y[i]].push_back(x[i]);\n\t\t}\n\t}\n\tdep[1]=1;\n\tdfs(1);\n\trep(j,1,20)\n\t\trep(i,1,n)\n\t\t\tpa[i][j]=pa[pa[i][j-1]][j-1];\n\trep(i,1,num)\n\t{\n\t\tint u=un[i].u,v=un[i].v;\n\t\tif(dep[u]<dep[v]) swap(u,v);\n\t\tint lca=LCA(u,v);\n\t\tif(lca==v)\n\t\t{\n\t\t\tp[u]--;\n\t\t\tper(j,0,20) if(dep[pa[u][j]]>dep[v]) u=pa[u][j];\n\t\t\tp[u]++;\n\t\t\tcontinue;\n\t\t}\n\t\tp[1]++;\n\t\tp[u]--;\n\t\tp[v]--;\n\t}\n\tdfs2(1);\n\trep(i,1,n)\n\t\tprintf(\"%d\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1658111458,
        "uid": 571634,
        "name": "hgzxwzf",
        "ccfLevel": 7,
        "title": "CF1707C DFS Trees"
    },
    {
        "content": "# CF1707C DFS Trees\n\n[link](https://codeforces.com/problemset/problem/1707/C)\n\n## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u7b2c $i$ \u6761\u8fb9\u7684\u6743\u503c\u4e3a $i$\u3002\n\n\u9898\u76ee\u4e2d\u7ed9\u4e86\u4e00\u4e2a\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u9519\u8bef\u7b97\u6cd5\uff0c\u8981\u6c42\u5224\u65ad `findMST(i)` \u662f\u5426\u662f\u6700\u5c0f\u751f\u6210\u6811 $(1\\le i\\le n)$\u3002\n\n$2\\le n\\le 10^5,n-1\\le m\\le 2\\times 10^5$\u3002\n\n## \u5206\u6790\n\n\u9996\u5148\u7531\u4e8e\u56fe\u4e2d\u7684\u8fb9\u6743\u4e24\u4e24\u4e0d\u540c\uff0c\u6240\u4ee5 MST\uff08 \u6700\u5c0f\u751f\u6210\u6811 \uff09\u552f\u4e00\uff0c\u4f7f\u7528 Kruskal \u7b97\u6cd5\u6c42\u51fa\u539f\u56fe\u7684 MST\u3002\n\n\u73b0\u5728\u89c2\u5bdf\u4e00\u4e0b\u9898\u76ee\u4e2d\u7ed9\u5b9a\u7684\u51fd\u6570\u662f\u5728\u505a\u4ec0\u4e48\uff1a`findMST(i)` \u751f\u6210\u7684\u662f\u4ece\u70b9 $i$ \u51fa\u53d1\u7684 DFS \u641c\u7d22\u6811\u3002\u90a3\u4e48\u539f\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u5224\u65ad\u6bcf\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6839\u65f6\uff0c\u6240\u6709\u5728 MST \u4e2d\u7684\u8fb9\u7684\u4e24\u4e2a\u70b9\u662f\u5426\u90fd\u4e0d\u662f\u7956\u5148\u540e\u4ee3\u5173\u7cfb\u3002\n\n\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4 $t_i(1\\le i\\le n)$ \u8868\u793a\u6240\u6709\u6ee1\u8db3\u5728\u4ee5\u70b9 $i$ \u4e3a\u6839\u7684 DFS \u641c\u7d22\u6811\u4e2d\u8fb9\u7684\u4e24\u4e2a\u70b9\u4e0d\u662f\u7956\u5148\u540e\u4ee3\u5173\u7cfb\u7684\u8fb9\u7684\u4e2a\u6570\uff0c\u521d\u59cb\u65f6 $t_1=t_2=\\dots=t_n=0$\u3002\n\n\u94a6\u5b9a\u70b9 $1$ \u4e3a\u6839\uff0c\u5bf9\u4e8e\u6bcf\u6761\u4e0d\u5728 MST \u4e2d\u7684\u8fb9 $(u,v)$\uff0c\u5c06 $u$ \u7684\u5b50\u6811\u548c $v$ \u7684\u5b50\u6811\u4e2d\u6bcf\u4e2a\u70b9\u7684 $t_i$ \u52a0 $1$\uff08 \u53ea\u6709\u5728\u8fd9\u4e9b\u70b9\u5f53\u6839\u65f6 $(u,v)$ \u8fd9\u6761\u8fb9\u624d\u662f\u7956\u5148\u540e\u4ee3\u5173\u7cfb \uff09\u3002\u6700\u540e `findMST(i)` \u662f\u5426\u662f\u6700\u5c0f\u751f\u6210\u6811\u5c31\u7b49\u4ef7\u4e8e $t_i$ \u662f\u5426\u7b49\u4e8e $m-(n-1)$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n\\log n)$\u3002Kruskal \u65f6\u95f4\u590d\u6742\u5ea6 $O(m)$\uff08 \u56e0\u4e3a\u7b2c $i$ \u6761\u8fb9\u7684\u6743\u503c\u4e3a $i$\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u6392\u5e8f \uff09\uff0c\u4f7f\u7528\u6811\u4e0a\u5dee\u5206\u5b8c\u6210 \" \u5bf9\u4e8e\u6bcf\u6761\u4e0d\u5728 MST \u4e2d\u7684\u8fb9 $(u,v)$\uff0c\u5c06 $u$ \u7684\u5b50\u6811\u548c $v$ \u7684\u5b50\u6811\u4e2d\u6bcf\u4e2a\u70b9\u7684 $t_i$ \u52a0 $1$ \" \u8fd9\u6b65\uff0c\u5355\u6b21\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\log n)$\uff0c\u5171 $(m-n+1)$ \u6761\u8fb9\u9700\u8981\u5b8c\u6210\u6b64\u64cd\u4f5c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((m-n+1)\\log n)$\u3002\u90a3\u4e48\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(m+n+(m-n+1)\\log n)=O(n\\log n)$\u3002\n\n## \u4ee3\u7801\n\n~~~cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=1e5+10,MAXM=2e5+10;\nint n,m; //\u70b9\u6570 n\uff0c\u8fb9\u6570 m \nint U[MAXM],V[MAXM]; //\u539f\u56fe\u4e2d\u7684\u8fb9 \nint f[MAXN]; //\u5e76\u67e5\u96c6 \nint getfa(int x) //\u5411\u4e0a\u627e\u7956\u5148 \n{\n\tif(x==f[x]) return x;\n\telse return f[x]=getfa(f[x]); //\u8def\u5f84\u538b\u7f29 \n}\nbool merge(int x,int y) //\u5408\u5e76 x,y \n{\n\tint fx=getfa(x),fy=getfa(y);\n\tif(fx!=fy) { f[fx]=fy; return 1;}\n\telse return 0; //\u5df2\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u5185 \n}\nstruct node\n{\n\tint to,nxt;\n} edg[MAXN<<1];\nint cnt,hea[MAXN];\nvoid add(int u,int v)\n{\n\tcnt++;\n\tedg[cnt].to=v;\n\tedg[cnt].nxt=hea[u];\n\thea[u]=cnt;\n} //\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u6700\u5c0f\u751f\u6210\u6811 \nint vis[MAXM]; //\u7b2c i \u6761\u8fb9\u662f\u5426\u5728\u6700\u5c0f\u751f\u6210\u6811\u5185 \nvoid Kruskal() //Kruskal \u6c42\u6700\u5c0f\u751f\u6210\u6811 \n{\n\tfor(int i=1;i<=n;i++) f[i]=i; //\u521d\u59cb\u5316\u5e76\u67e5\u96c6 \n\tfor(int i=1;i<=m;i++)\n\t\tif(merge(U[i],V[i])) //\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811 \n\t\t{\n\t\t\tvis[i]=1;\n\t\t\tadd(U[i],V[i]);\n\t\t\tadd(V[i],U[i]);\n\t\t}\n}\nint fa[MAXN][30],dep[MAXN]; //\u7956\u5148 fa\uff0c\u6df1\u5ea6 dep \nvoid dfs1(int u,int fat) //\u904d\u5386\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6c42\u51fa\u7956\u5148 fa\uff0c\u6df1\u5ea6 dep \n{\n\tfa[u][0]=fat;\n\tfor(int i=1;i<=19;i++)\n\t\tfa[u][i]=fa[fa[u][i-1]][i-1]; //\u500d\u589e \n\tdep[u]=dep[fat]+1;\n\tfor(int i=hea[u];i;i=edg[i].nxt)\n\t\tif(edg[i].to!=fat) dfs1(edg[i].to,u);\n}\nint lca(int x,int y) //\u500d\u589e lca \n{\n\tfor(int i=19;i>=0;i--)\n\t\tif(dep[fa[y][i]]>=dep[x])\n\t\t\ty=fa[y][i];\n\tif(x==y) return x;\n\tfor(int i=19;i>=0;i--)\n\t\tif(fa[x][i]!=fa[y][i])\n\t\t\t{ x=fa[x][i]; y=fa[y][i];}\n\treturn fa[x][0];\n}\nint t[MAXN];\nvoid dfs2(int u,int fat)\n{\n\tt[u]+=t[fat]; //\u6811\u4e0a\u5dee\u5206\u4e4b\u540e\u8981\u524d\u7f00\u548c \n\tfor(int i=hea[u];i;i=edg[i].nxt)\n\t\tif(edg[i].to!=fat) dfs2(edg[i].to,u);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d%d\",&U[i],&V[i]);\n\tKruskal();\n\tdfs1(1,0);\n\tfor(int i=1;i<=m;i++)\n\t\tif(!vis[i]) //\u6811\u4e0a\u5dee\u5206\u8ba1\u7b97 \n\t\t{\n\t\t\tif(dep[U[i]]>dep[V[i]]) swap(U[i],V[i]);\n\t\t\tint lc=lca(U[i],V[i]);\n\t\t\tif(U[i]==lc)\n\t\t\t{\n\t\t\t\tt[1]++; t[V[i]]++;\n\t\t\t\tint x=V[i];\n\t\t\t\tfor(int j=19;j>=0;j--)\n\t\t\t\t\tif(dep[fa[x][j]]>dep[U[i]])\n\t\t\t\t\t\tx=fa[x][j];\n\t\t\t\tt[x]--;\n\t\t\t}\n\t\t\telse { t[U[i]]++; t[V[i]]++;}\n\t\t}\n\tdfs2(1,0);\n\tfor(int i=1;i<=n;i++)\n\t\tif(t[i]==m-(n-1)) printf(\"1\");\n\t\telse printf(\"0\");\n\treturn 0;\n}\n~~~\n\n[AC\u8bb0\u5f55](https://codeforces.com/problemset/submission/1707/175522294)\n\n## \u5199\u5728\u6700\u540e\n\n\u7b14\u8005\u6c34\u5e73\u6709\u9650\uff0c\u5982\u679c\u5199\u7684\u6709\u4e0d\u6e05\u695a\u6216\u4e0d\u5bf9\u7684\u5730\u65b9\u671b\u8bfb\u8005\u79c1\u4fe1\u6211\u6307\u51fa\uff0c\u6211\u4f1a\u53ca\u65f6\u4fee\u6b63",
        "postTime": 1665478891,
        "uid": 355970,
        "name": "__lyx",
        "ccfLevel": 0,
        "title": "CF1707C DFS Trees"
    },
    {
        "content": "\u633a\u5999\u7684\u9898\u3002\u72ec\u7acb\u505a\u51fa\u6765\u4e86\u4e00\u4e2a `*2400`\uff0c\u597d\u8036\n\n\u4e0b\u9762\u6211\u8bd5\u56fe\u8bf4\u660e\u4e00\u4e0b\u601d\u8003\u7684\u8def\u7ebf\u3002\n\n- \u7531\u4e8e\u8fb9\u6743\u4e0d\u540c\uff0c\u6700\u5c0f\u751f\u6210\u6811\u5b9e\u9645\u4e0a\u662f\u552f\u4e00\u7684\u3002\n- \u56e0\u6b64\uff0c\u8003\u8651\u4e00\u6761\u975e\u6811\u8fb9 $(u,v)$\uff0c\u89c2\u5bdf\u6837\u4f8b\u4e00\uff0c\u4e00\u5f00\u59cb\u6211\u731c\u6d4b\u8fd9\u4ee3\u8868 $u\\to v$ \u8def\u5f84\u4e0a\u4e0d\u5305\u62ec\u7aef\u70b9\u7684\u6240\u6709\u70b9\u90fd\u4f1a\u8d70\u6b6a\uff0c\u5f97\u4e0d\u5230\u771f\u6b63\u7684 MST\u3002\n- \u8bc1\u660e\u5f88\u7b80\u5355\uff1a\u8003\u8651\u8def\u5f84\u4e0a\u7684\u4e00\u4e2a\u70b9 $x$\uff0c\u4e0d\u59a8\u8bbe $x$ \u7b2c\u4e00\u6b65\u4f1a\u671d $u$ \u7684\u65b9\u5411\u8d70\uff08\u6ce8\u610f MST \u552f\u4e00\uff0c\u56e0\u6b64\u53ea\u8981\u8d70\u9519\u4e00\u6b65\u5c31\u610f\u5473\u7740 $x$ \u4e0d\u7b26\u5408\u8981\u6c42\uff0c\u6545\u53ef\u884c\u7684\u8def\u5f84\u5176\u5b9e\u662f\u552f\u4e00\u7684\uff09\uff0c\u90a3\u4e48\u60f3\u8981\u56de\u5230 $v$\uff0c\u5fc5\u7136\u8981\u7ecf\u8fc7 $(u,v)$\uff0c\u9009\u53d6\u8fd9\u6761\u4e0d\u4f18\u7684\u8fb9\u3002\u56e0\u4e3a\u5728 DFS \u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4e0d\u4f1a\u8d70\u56de\u5934\u8def\u3002\n- \u4f46\u6837\u4f8b\u4e8c\u662f\u4e00\u4e2a\u53cd\u4f8b\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2vtyaqa6.png)\n\n> \u56fe\u4e2d\u7684 $8$ \u53f7\u70b9\u4e5f\u4f1a\u8d70\u6b6a\uff0c\u4f46\u5b83\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u8981\u6c42\u3002\n\n\u7ecf\u8fc7\u4e00\u4e9b\u601d\u8003\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u8bba\uff1a\n\n- \u5bf9\u4e8e\u4e00\u4e2a\u70b9 $r$\uff0c\u82e5 MST \u4ee5 $r$ \u4e3a\u6839\u65f6\u56fe\u4e2d\u4e0d\u5b58\u5728\u6a2a\u53c9\u8fb9\uff0c\u90a3\u4e48 $r$ \u662f\u5408\u6cd5\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u82e5\u4ee5 $r$ \u4e3a\u6839\u662f\uff0c\u4efb\u610f\u975e\u6811\u8fb9 $(u,v)$ \u603b\u662f\u6ee1\u8db3 $u,v$ \u4e2d\u7684\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u7956\u5148\uff0c\u90a3\u4e48 $r$ \u662f\u7b26\u5408\u8981\u6c42\u7684\u3002\n- \u5145\u5206\u6027\u663e\u7136\u3002\u5fc5\u8981\u6027\u4e5f\u4e0d\u96be\u8bc1\u660e\uff1a\u5982\u679c $u,v$ \u662f\u4e00\u6761\u6a2a\u53c9\u8fb9\uff0c\u8bbe $z=\\text{LCA}(u,v)$\uff0c\u82e5 $r$ \u5728\u8d70\u5411 $z$ \u7684\u8fc7\u7a0b\u4e2d\u5df2\u7ecf\u8d70\u6b6a\u4e86\u663e\u7136\u4e0d\u884c\uff1b\u5426\u5219 $r$ \u5728\u8d70\u5230 $z$ \u540e\u5c31\u53d8\u6210\u4e86\u4e0a\u9762\u8ba8\u8bba\u7684\u60c5\u51b5\uff0c\u5fc5\u7136\u4f1a\u8d70\u5411\u4e00\u8fb9\u7136\u540e\u6b6a\u6389 $(u,v)$ \u8fd9\u6761\u8fb9\u3002\n\n\u56e0\u6b64\u73b0\u5728\u53ea\u9700\u8981\u7b97\u51fa\u6765\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6839\u65f6\u662f\u5426\u5b58\u5728\u6a2a\u53c9\u8fb9\u3002\n\n\u6211\u4eec\u5148\u968f\u4fbf\u63d0\u4e00\u4e2a\u6839\u51fa\u6765\uff0c\u8bbe $S_u$ \u8868\u793a $u$ \u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\u7684\u96c6\u5408\uff0c\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84 $(u,v)$\uff1a\n\n- \u82e5 $u,v$ \u4e92\u4e0d\u4e3a\u5bf9\u65b9\u7684\u7956\u5148\uff0c\u90a3\u4e48\u6240\u6709\u5728 $S_{\\text{root}}-S_u-S_v$ \u4e2d\u7684\u8282\u70b9\u5747\u4e0d\u7b26\u5408\u8981\u6c42\u3002\n- \u5426\u5219\uff0c\u4e0d\u59a8\u8bbe $u$ \u662f $v$ \u7684\u7956\u5148\uff0c\u8bbe $x$ \u662f $v$ \u7684 $\\text{dep}_v-\\text{dep}_u-1$ \u7ea7\u7956\u5148\uff08\u5373 $u$ \u7684\u67d0\u4e2a\u76f4\u63a5\u513f\u5b50\uff0c\u540c\u65f6\u4e5f\u662f $v$ \u7684\u7956\u5148\uff09\uff0c\u90a3\u4e48\u6240\u6709\u5728 $S_x-S_v$ \u4e2d\u7684\u8282\u70b9\u5747\u4e0d\u7b26\u5408\u8981\u6c42\u3002\n\n\u4e8e\u662f\u73b0\u5728\u76f8\u5f53\u8981\u7ed9\u4e00\u4e2a\u5b50\u6811\u505a\u4e00\u4e2a\u8986\u76d6\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002\u53ef\u4ee5\u76f4\u63a5\u62cd\u5e73\u6210 $\\text{DFS}$ \u5e8f\u8f6c\u6210\u5e8f\u5217\u95ee\u9898\u5dee\u5206\u89e3\u51b3\u3002\n\n\u7b97\u4e0a\u6c42 $k$ \u7ea7\u7956\u5148/\u5e76\u67e5\u96c6\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u8d85\u8fc7 $O(n\\log n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\n#define int long long\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\tfor(;(c<'0'||c>'9');c=getchar()){if(c=='-')f=-1;}\n\tfor(;(c>='0'&&c<='9');c=getchar())x=x*10+(c&15);\n\treturn x*f;\n}\n\nconst int MN=2e5+5;\nint fa[MN],dfn[MN],dep[MN],fp[MN],top[MN],hson[MN],sz[MN];\nint n,m,fr[MN],to[MN];\n\nint find(int x){return x==fp[x]?x:fp[x]=find(fp[x]);}\n\nvector<int>G[MN];\nvoid adde(int u,int v){\n\tG[u].push_back(v),G[v].push_back(u);\n}\n\nvoid dfs1(int u,int de){\n\tdep[u]=de,sz[u]=1;\n\tfor(int v:G[u]){\n\t\tif(v==fa[u])continue;\n\t\tfa[v]=u,dfs1(v,de+1),sz[u]+=sz[v];\n\t\tif(sz[v]>sz[hson[u]])hson[u]=v;\n\t}\n}\n\nint tot=0,id[MN];\nvoid dfs2(int u,int tp){\n\ttop[u]=tp,dfn[u]=++tot,id[tot]=u;\n\tif(hson[u])dfs2(hson[u],tp);\n\tfor(int v:G[u]){\n\t\tif(v==hson[u]||v==fa[u])continue;\n\t\tdfs2(v,v);\n\t}\n}\n\nint LCA(int u,int v){\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]<dep[top[v]])swap(u,v);\n\t\tu=fa[top[u]];\n\t}\n\tif(dep[u]>dep[v])swap(u,v);\n\treturn u;\n}\n\nbool used[MN];\nint d[MN];\n\nvoid add(int l,int r,int k){\n\td[l]+=k,d[r+1]-=k;\n}\n\nint get(int u,int v){\n\tassert(dfn[v]>=dfn[u]&&dfn[v]<=dfn[u]+sz[u]-1);\n\tint de=dep[u]+1;\n\twhile(dep[top[v]]>de)v=fa[top[v]];\n\tint dis=dep[v]-de;\n\treturn id[dfn[v]-dis];\n}\n\nsigned main(void){\n\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.in\",\"r\",stdin);\n#endif\n\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;i++)fr[i]=read(),to[i]=read();\n\tfor(int i=1;i<=n;i++)fp[i]=i;\n\tfor(int i=1;i<=m;i++){\n\t\tint u=find(fr[i]),v=find(to[i]);\n\t\tif(u==v)continue;\n\t\tadde(fr[i],to[i]),fp[u]=v,used[i]=1;\n\t}\n\n\tdfs1(1,1),dfs2(1,1);\n\tfor(int i=1;i<=m;i++){\n\t\tif(used[i])continue;\n\t\tint u=fr[i],v=to[i],z=LCA(u,v);\n\t\tif(z!=u&&z!=v){\n\t\t\tadd(1,n,1);\n\t\t\tadd(dfn[u],dfn[u]+sz[u]-1,-1);\n\t\t\tadd(dfn[v],dfn[v]+sz[v]-1,-1);\n\t\t}\n\t\telse{\n\t\t\tif(z==v)swap(u,v);assert(z==u);\n\t\t\tint x=get(u,v);if(x==v){continue;}\n\t\t\tadd(dfn[x],dfn[x]+sz[x]-1,1);\n\t\t\tadd(dfn[v],dfn[v]+sz[v]-1,-1);\n\t\t}\n\t}\n\n\tfor(int i=1;i<=n;i++)d[i]+=d[i-1];\n\tfor(int i=1;i<=n;i++)cout<<(!(d[dfn[i]]>0));puts(\"\");\n\n\treturn 0;\n}\n```",
        "postTime": 1658848824,
        "uid": 307453,
        "name": "\u4e91\u6d45\u77e5\u5904",
        "ccfLevel": 6,
        "title": "CF1707C DFS Trees"
    },
    {
        "content": "\u89c2\u5bdf\u4f2a\u4ee3\u7801\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u603b\u662f\u8d70\u672a\u8d70\u8fc7\u4e14\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9 \u3002 \n\n\u9996\u5148\u6211\u4eec\u8981\u5148\u6c42\u51fa\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811 $G$\u3002\n\n\u975e\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u5206\u4e3a\u8fd4\u7956\u8fb9\u548c\u6a2a\u53c9\u8fb9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/0hin28by.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u63a5\u4e0b\u6765\uff0c\u5206\u7c7b\u8ba8\u8bba :\n\t\n\u8bbe\u975e\u6811\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u4e3a $x,y$\uff0c\u6839\u636e\u6700\u5c0f\u751f\u6210\u6811\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u5f97\u5230\u975e\u6811\u8fb9\u7684\u6743\u503c $edge(x,y)$ \u5927\u4e8e $x,y$ \u5728\u56fe $G$ \u7684\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u7684\u6743\u503c\u3002\n\n\n1.\u8fd4\u7956\u8fb9 \n\n\u4ee5\u6b64\u56fe\u4e3a\u4f8b:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/a40uv4wh.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n$4$ \u5230 $1$ \u7684\u8fd4\u7956\u8fb9\u7684\u6743\u503c\u4e00\u5b9a\u5927\u4e8e $edge(2,4),edge(2,1)$ \u3002\n\n\u4ece $2$ \u5f00\u59cb\u904d\u5386\uff0c\u5148\u8d70 $edge(1,2)$ \u8fd9\u6761\u8fb9\uff0c\u904d\u5386\u5b8c\u5b50\u6811 $5$ \u540e\u56de\u6eaf\u5230\u8282\u70b9 $1$\uff0c\u8d70 $edge(1,4)$\uff0c\u663e\u7136\u5f62\u6210\u7684\u5154\u53d8\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u4ece $4$ \u5f00\u59cb\u904d\u5386\uff0c\u5148\u8d70 $edge(2,4),edge(2,1)$\uff0c\u904d\u5386\u5b8c\u5b50\u6811 $5$ \u540e\u56de\u6eaf\u5230\u8282\u70b9 $1$\uff0c\u4e0d\u4f1a\u8d70 $edge(1,4)$\u3002\n\n\u4ece $4$ \u7684\u5b50\u6811\u7684\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u904d\u5386\uff0c \u4e00\u5b9a\u5148\u5230 $4$ \u7136\u540e\u6309\u4e0a\u4e00\u79cd\u65b9\u5f0f\u904d\u5386\uff0c\u4ece $1$ \u7684\u5176\u4ed6\u5b50\u6811\u5f00\u59cb\u904d\u5386\u540c\u7406\u3002\n\n\u6240\u4ee5\u5728 $x,y$ \u5728\u56fe $G$ \u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\uff08\u4e0d\u542b $x,y$\uff09\u4e0d\u80fd\u5bb9\u7eb3\u8fd9\u6761\u8fd4\u7956\u8fb9 $edge(x,y)$\u3002 \n\n2. \u6a2a\u53c9\u8fb9\n\n\u4ee5\u6b64\u56fe\u4e3a\u4f8b:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tzl7cpz4.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u8bc1\u660e\u7684\u65b9\u6cd5\u4e0e\u8fd4\u7956\u8fb9\u7c7b\u4f3c\uff0c\u6240\u4ee5\u76f4\u63a5\u8bf4\u7ed3\u8bba\uff1a \u6240\u6709\u975e $x$ \u6216 $y$ \u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u90fd\u4e0d\u80fd\u5bb9\u7eb3\u8fd9\u6761\u6a2a\u53c9\u8fb9 $edge(x,y)$\u3002\n\n## $Code$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+1;\nint n,m,tot,num;\nint fa[N];\nint dep[N];\nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\nvector < int > to[N];//\u6811\u8fb9\nvector < pair < int , int > > ex;//\u975e\u6811\u8fb9\u5bf9\uff0c\u5206\u4e3a\u8fd4\u7956\u8fb9\u4e0e\u6a2a\u53c9\u8fb9\nvector < int > exto[N];\nvoid find_dep(int x,int fa)\n{\n\tdep[x]=dep[fa]+1;\n\tfor(int i=0; i<to[x].size(); i++)\n\t{\n\t\tstatic int y;\n\t\ty=to[x][i];\n\t\tif(y==fa)continue;\n\t\tfind_dep(y,x);\n\t}\n\treturn;\n}\nint vis[N];\nint now[N];\nint could[N];\nvoid find_exto(int x,int fa)\n{\n\tnow[dep[x]]=x;\n\tfor(int i=0; i<exto[x].size(); i++)\n\t{\n\t\tstatic int y;\n\t\ty=exto[x][i];\n\t\tif(now[dep[y]]==y)\n\t\t{\n\t\t\tcould[1]++;\n\t\t\tcould[now[dep[y]+1]]--;\n\t\t\tcould[x]++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcould[x]++;\n\t\t\tcould[y]++;\n\t\t}\n\t}\n\tfor(int i=0; i<to[x].size(); i++)\n\t{\n\t\tif(to[x][i]==fa)continue;\n\t\tfind_exto(to[x][i],x);\n\t}\n}\nvoid find_add(int x,int fa)\n{\n\tcould[x]+=could[fa];\n\tfor(int i=0; i<to[x].size(); i++)\n\t{\n\t\tstatic int y;\n\t\ty=to[x][i];\n\t\tif(y==fa)continue;\n\t\tfind_add(y,x);\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1; i<=n; i++)fa[i]=i;\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\tstatic int x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tint fx=find(x),fy=find(y);\n\t\tif(fx!=fy)\n\t\t{\n\t\t\tfa[fx]=fy;\n\t\t\tto[x].push_back(y);\n\t\t\tto[y].push_back(x); \n\t\t}\n\t\telse\n\t\t{\n\t\t\ttot++;\n\t\t\tex.push_back(make_pair(x,y));\n\t\t}\n\t}\n\tfind_dep(1,0);\n\tfor(int i=0; i<ex.size(); i++)\n\t{\n\t\tstatic int x,y;\n\t\tx=ex[i].first;\n\t\ty=ex[i].second;\n\t\tif(dep[x]<dep[y])swap( x,y );\n\t\texto[x].push_back(y);\n\t}\n\tfind_exto(1,0);\n\tfind_add(1,0);\n\tfor(int i=1; i<=n; i++)cout<<(could[i]==tot);\n}\n```",
        "postTime": 1665638877,
        "uid": 740607,
        "name": "__ODT__",
        "ccfLevel": 0,
        "title": "CF1707C DFS Trees"
    }
]