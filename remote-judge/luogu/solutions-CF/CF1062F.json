[
    {
        "content": "\u62d3\u6251\u6392\u5e8f\u597d\u9898\u3002\n\n\u9996\u5148\u6211\u4eec\u5e94\u8be5\u77e5\u9053$DAG$\u7684\u62d3\u6251\u6392\u5e8f\u6709\u8fd9\u4e48\u4e2a\u6027\u8d28\uff0c\u4efb\u610f\u65f6\u523b\u5728\u961f\u5217\u91cc\u7684\u70b9\u90fd\u4e0d\u53ef\u4e92\u76f8\u5230\u8fbe\u3002\u8fd9\u4e0d\u662f\u663e\u7136\u5417\uff0c\u56e0\u4e3a\u53ea\u6709\u5f53\u4e00\u4e2a\u70b9\u51fa\u961f\u4e4b\u540e\u5b83\u7684\u540e\u7ee7\u70b9\u624d\u6709\u53ef\u80fd\u5165\u961f\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u7528\u62d3\u6251\u6392\u5e8f\u641e\u51fa\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\u6570\uff0c\u63a5\u7740\u518d\u628a\u56fe\u53cd\u8fc7\u6765\u518d\u505a\u4e00\u904d\u5f97\u5230\u80fd\u591f\u5230\u8fbe\u6bcf\u4e2a\u70b9\u7684\u70b9\u6570\uff0c\u5c31\u80fd\u591f\u77e5\u9053\u7b54\u6848\u4e86\u3002\u7136\u800c\u4f17\u6240\u5468\u77e5\u8fd9\u4e2a\u95ee\u9898\u6700\u597d\u7684\u89e3\u6cd5\u4e5f\u5c31\u662f$O(\\frac {n^2}{64})$\u7684$bitset$\u4e86\uff0c\u4e0d\u8fc7\u6211\u4eec\u5176\u5b9e\u53ea\u8003\u8651**\u6700\u591a\u6709\u4e00\u4e2a\u70b9\u4e0d\u80fd\u5728\u540e\u9762\u88ab\u4ed6\u5230\u8fbe\u7684\u70b9**\u5c31\u884c\u4e86\uff0c\u63a5\u4e0b\u6765\u5c06\u4f1a\u7528\u5230\u8fd9\u4e2a\u6027\u8d28\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u5f00\u59cb\u62d3\u6251\u6392\u5e8f\u4e86\uff0c\u8bbe$rest$\u4e3a\u8fd8\u672a\u51fa\u961f\u7684\u70b9\u6570\u3002\u5982\u679c\u5f53\u524d\u961f\u5217\u91cc\u53ea\u6709\u4e00\u4e2a\u70b9\u90a3\u4e48\u663e\u7136\u5269\u4e0b$rest$\u4e2a\u70b9\u90fd\u53ef\u88ab\u4ed6\u5230\u8fbe\uff0c\u56e0\u4e3a\u5269\u4e0b\u7684\u70b9\u5f97\u7531\u8fd9\u4e2a\u552f\u4e00\u7684\u70b9\u6269\u5c55\u51fa\u6765\u3002\u5982\u679c\u5f53\u524d\u961f\u5217\u91cc\u6709\u81f3\u5c113\u4e2a\u70b9\u90a3\u8fd9\u4e9b\u961f\u5217\u91cc\u7684\u70b9\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9\u672c\u6765\u5c31\u5df2\u7ecf\u81f3\u5c11\u662f2\u4e2a\u4e86\uff08\u5b83\u4eec\u4e0d\u80fd\u4e92\u76f8\u5230\u8fbe\uff09\uff0c\u4e00\u5b9a\u4e0d\u80fd\u6210\u4e3a\u7b54\u6848\u3002\u7136\u540e\u6211\u4eec\u8003\u8651\u67092\u4e2a\u70b9\u7684\u60c5\u51b5\uff0c\uff0c\u6211\u4eec\u4e0d\u59a8\u6309\u7167\u5b83\u4eec\u7684\u961f\u5217\u987a\u5e8f\u8bbe\u4e3a$a,b$\uff0c\u6211\u4eec\u5e0c\u671b\u77e5\u9053$a$\u662f\u5426\u80fd\u5230\u8fbe\u5269\u4e0b\u7684\u9664$b$\u4e4b\u5916\u7684\u6240\u6709\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u62c5\u5fc3\u8fd9\u79cd\u60c5\u51b5\uff1a\u4e4b\u540e\u6ca1\u5165\u961f\u7684\u53ea\u8981\u6709\u4e00\u4e2a\u70b9\u53ef\u80fd\u4ec5\u80fd\u7531$b$\u5230\u8fbe\uff0c\u90a3\u4e48$a$\u5c31\u4e0d\u53ef\u80fd\u505a\u5230\u3002\u5b9e\u9645\u4e0a\u5982\u679c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u663e\u7136\u53ea\u9700\u8003\u8651$b$\u7684\u6240\u6709\u540e\u7ee7\u70b9\u662f\u5426\u90fd\u80fd\u88ab$a$\u5230\u8fbe\u5373\u53ef\u3002\u4e0d\u59a8\u8fd9\u6837\u60f3\uff1a**\u5982\u679c\u8fd9\u4e2a\u540e\u7ee7\u70b9\u53ea\u80fd\u88ab$b$\u5230\u8fbe\uff0c\u90a3\u4e48\u5b83\u4ec5\u80fd\u88ab$b$\u6269\u5c55\u51fa\u6765**\u3002\u5b83\u5e76\u4e0d\u4f1a\u88ab$a$\u6269\u5c55\u51fa\u6765\uff0c\u6240\u4ee5\u8fd9\u4e2a\u70b9\u7684\u5165\u5ea6\u4e00\u5b9a\u662f1\uff0c\u5982\u679c\u5165\u5ea6\u5927\u4e8e1\u7684\u8bdd\u5c31\u8bf4\u660e\u53ea\u9760$b$\u662f\u65e0\u6cd5\u6269\u5c55\u51fa\u6765\u7684\uff0c\u800c\u961f\u5217\u91cc\u4ec5\u67092\u4e2a\u70b9\uff0c\u5fc5\u987b\u5f97\u501f\u52a9$a$\uff0c\u6240\u4ee5\u8fd8\u5fc5\u987b\u6709\u4e00\u6761$a$\u5230\u8fd9\u4e2a\u70b9\u7684\u8def\u5f84\u3002\u4e8e\u662f\u8fd9\u6837\u7684\u8bdd$a$\u5c31\u80fd\u591f\u5230\u8fbe\u9664$b$\u4e4b\u5916\u7684$rest-1$\u4e2a\u70b9\u4e86\u3002\n\n\u6240\u4ee5\u4ee5\u540e\u770b\u5230$DAG$\u8fd8\u662f\u5e94\u8be5\u5f80\u62d3\u6251\u6392\u5e8f\u4e0a\u60f3\u4e00\u60f3\u554a\u2026\u2026\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nnamespace ywy {\n\tinline int get() {\n\t    int n = 0;\n\t    char c;\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            break;\n\t        if (c == '-')\n\t            goto s;\n\t    }\n\t    n = c - '0';\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 + c - '0';\n\t        else\n\t            return (n);\n\t    }\n\ts:\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 - c + '0';\n\t        else\n\t            return (n);\n\t    }\n\t}\n\ttypedef struct _b {\n\t    int dest;\n\t    int nxt;\n\t} bian;\n\tbian memchi[1000001];\n\tint gn = 1, heads[300001], deg[300001];\n\tinline void add(int s, int t) {\n\t    memchi[gn].dest = t;\n\t    memchi[gn].nxt = heads[s];\n\t    heads[s] = gn;\n\t    gn++;\n\t    deg[t]++;\n\t}\n\tint que[500001], f[500001], ss[300001], ts[300001];\n\tvoid ywymain() {\n\t    int n = get(), m = get();\n\t    for (register int i = 1; i <= m; i++) {\n\t        ss[i] = get();\n\t        ts[i] = get();\n\t        add(ss[i], ts[i]);\n\t    }\n\t    int head = 0, tail = 0, rest = n;\n\t    for (register int i = 1; i <= n; i++) {\n\t        if (!deg[i])\n\t            que[tail] = i, tail++;\n\t    }\n\t    while (head < tail) {\n\t        int me = que[head];\n\t        head++;\n\t        rest--;\n\t        if (head >= tail)\n\t            f[me] += rest;\n\t        else {\n\t            if (head + 1 >= tail) {\n\t                for (register int i = heads[que[head]]; i; i = memchi[i].nxt) {\n\t                    if (deg[memchi[i].dest] == 1)\n\t                        goto s;\n\t                }\n\t                f[me] += (rest - 1);\n\t            s:;\n\t            }\n\t        }\n\t        for (register int i = heads[me]; i; i = memchi[i].nxt) {\n\t            deg[memchi[i].dest]--;\n\t            if (!deg[memchi[i].dest])\n\t                que[tail] = memchi[i].dest, tail++;\n\t        }\n\t    }\n\t    gn = 1;\n\t    memset(heads, 0, sizeof(heads));\n\t    memset(deg, 0, sizeof(deg));\n\t    for (register int i = 1; i <= m; i++) add(ts[i], ss[i]);\n\t    head = 0;\n\t    tail = 0;\n\t    rest = n;\n\t    for (register int i = 1; i <= n; i++) {\n\t        if (!deg[i])\n\t            que[tail] = i, tail++;\n\t    }\n\t    while (head < tail) {\n\t        int me = que[head];\n\t        head++;\n\t        rest--;\n\t        if (head >= tail)\n\t            f[me] += rest;\n\t        else {\n\t            if (head + 1 >= tail) {\n\t                for (register int i = heads[que[head]]; i; i = memchi[i].nxt) {\n\t                    if (deg[memchi[i].dest] == 1)\n\t                        goto t;\n\t                }\n\t                f[me] += (rest - 1);\n\t            t:;\n\t            }\n\t        }\n\t        for (register int i = heads[me]; i; i = memchi[i].nxt) {\n\t            deg[memchi[i].dest]--;\n\t            if (!deg[memchi[i].dest])\n\t                que[tail] = memchi[i].dest, tail++;\n\t        }\n\t    }\n\t    int tot = 0;\n\t    for (register int i = 1; i <= n; i++) {\n\t        if (f[i] >= n - 2)\n\t            tot++;\n\t    }\n\t    cout << tot << endl;\n\t}\n}\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1558769757,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1062F \u3010Upgrading Cities\u3011"
    },
    {
        "content": "## [\u9898\u610f](https://www.luogu.org/problem/CF1062F)\n\n\u7531\u4e8e\u8fd9\u662f\u4e2a$DAG$,\u6211\u4eec\u8003\u8651\u62d3\u6734\u6392\u5e8f,\u6c42\u67d0\u4e2a\u70b9\u80fd\u5230\u7684\u548c\u80fd\u5230\u5b83\u7684\u70b9,\u8fd9\u662f\u4e24\u4e2a\u95ee\u9898,\u6211\u4eec\u53ef\u4ee5\u6b63\u53cd\u4e24\u8fb9\u62d3\u6734\u6392\u5e8f,\u8fd9\u6837\u5c31\u53ea\u7528\u8003\u8651\u5b83\u80fd\u5230\u7684\u70b9\u4e86\n\n\u8bbe$f[x]$\u8868\u793a$x$\u80fd\u5230\u7684\u70b9\u6570$+$\u80fd\u5230$x$\u7684\u70b9\u6570\n\n\u5982\u679c\u5728\u62d3\u6734\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\uff1a\n\n$q.size()==1$,\u663e\u7136\u5f53\u524d\u961f\u9996$x$\u80fd\u5230\u8fbe\u5269\u4e0b\u7684\u6240\u6709\u70b9,\u4e2d\u9014\u8bb0\u5f55\u51fa\u73b0\u5728\u961f\u5217\u4e2d\u7684\u70b9\u7684\u4e2a\u6570$tot$,$f[x]+=n-tot$\n\n$q.size()==2$,\u8bb0\u5f55\u961f\u5217\u4e2d\u7684\u4e24\u70b9$x,y$,\u5bf9\u4e8e$y$,\u5982\u679c$y$\u5b58\u5728$y->z$\u4e14$z$\u7684\u5165\u5ea6\u4e3a1,\u90a3\u4e48$x$\u663e\u7136\u4e0d\u80fd\u5230$z$,\u6807\u8bb0\u4e00\u4e0b$x$\u5373\u53ef\n\n\u6700\u540e\u679a\u4e3e\u6bcf\u4e2a\u70b9,\u5224\u65ad\u662f\u5426\u5408\u6cd5\u5373\u53ef\n\ncode:\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=300010;\nconst int maxm=300010;\nint n,m,cnt,ans;\nint head[maxn],deg[maxn],u[maxm],v[maxm],f[maxn];\nbool vis[maxn];\nstruct edge\n{\n\tint to,nxt;\n}e[maxm<<1];\ninline int read()\n{\n\tchar c=getchar();int res=0,f=1;\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9')res=res*10+c-'0',c=getchar();\n\treturn res*f;\n}\ninline void add(int u,int v)\n{\n\te[++cnt].nxt=head[u];\n\thead[u]=cnt;\n\te[cnt].to=v;deg[v]++;\n}\ninline void solve(int x,int y,int w)\n{\n\tbool flag=0;\n\tfor(int i=head[y];i;i=e[i].nxt)\n\t{\n\t\tint z=e[i].to;\n\t\tif(deg[z]==1){flag=1;break;}\n\t}\n\tif(flag)vis[x]=1;\n\telse f[x]+=w;\n}\ninline void topsort()\n{\n\tqueue<int>q;\n\tint tot=0;\n\tfor(int i=1;i<=n;i++)if(!deg[i])q.push(i),tot++;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front(),num=q.size();q.pop();\n\t\tif(num==1)f[x]+=n-tot;\n\t\tif(num==2)solve(x,q.front(),n-tot);\n\t\tfor(int i=head[x];i;i=e[i].nxt)\n\t\t{\n\t\t\tint y=e[i].to;\n\t\t\tif(!(--deg[y]))q.push(y),tot++;\n\t\t}\n\t}\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tu[i]=read(),v[i]=read();\n\t\tadd(u[i],v[i]);\n\t}\n\ttopsort();\n\tmemset(deg,0,sizeof(deg));\n\tmemset(head,0,sizeof(head));\n\tcnt=0;\n\tfor(int i=1;i<=m;i++)add(v[i],u[i]);\n\ttopsort();\n\tfor(int i=1;i<=n;i++)if(!vis[i]&&f[i]>=n-2)ans++;\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1566458777,
        "uid": 145441,
        "name": "nofind",
        "ccfLevel": 6,
        "title": "CF1062F Upgrading Cities(\u62d3\u6251\u6392\u5e8f)"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\n\u8bf4\uff1a\u7ed9\u5b9a $n,m\\le 3\\times 10^5$ \u7684\u6709\u5411\u65e0\u73af\u56fe\uff0c\u95ee\uff1a\u6709\u591a\u5c11\u4e2a\u70b9 $i$ \u6ee1\u8db3\uff0c\u5220\u9664\u81f3\u591a\u4e00\u4e2a\u70b9\u4e4b\u540e\uff0c\u5bf9\u4e8e\u4efb\u610f $x$\uff0c\u8981\u4e48 $x$ \u53ef\u8fbe $i$ \u8981\u4e48 $i$ \u53ef\u8fbe $x$\u3002\n\n## \u9898\u89e3\n\n\u4ecb\u7ecd\u4e00\u4e2a\u867d\u4e0d\u4e00\u5b9a\u597d\u5199\uff0c\u4f46\u66f4\u52a0\u76f4\u89c2\u7684\u505a\u6cd5\u3002\n\n\u6ce8\u610f\u5230\uff0c\u53ef\u8fbe\u95ee\u9898\uff0c\u5982\u679c\u771f\u7684\u6c42\u786e\u5207\u96c6\u5408\uff0c\u6700\u597d\u7684\u65b9\u5f0f\u662f `bitset`\uff0c\u8fd9\u91cc\u7684\u7279\u6b8a\u6027\u8d28\u662f\u5220\u9664\u81f3\u591a $1$ \u4e2a\u70b9\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6807\u53f7\u4e3a $i$ \u5b9a\u4e49\u4e3a\u67d0\u62d3\u6251\u6392\u5e8f\u540e\u7b2c $i$ \u4e2a\u70b9\u3002\n\n\u8003\u8651\u4e0d\u5220\u9664\u70b9\u65f6\u7684\u60c5\u51b5\uff1a\n\n\u5047\u8bbe $x$ \u662f\u8fd9\u6837\u4e00\u4e2a\u70b9\uff0c\u4f60\u53d1\u73b0\u4fdd\u7559\u8fd9\u6837\u4e00\u5f20\u56fe\uff0c\u4e00\u5b9a $x$ \u4e5f\u4e3a\u5408\u6cd5\u70b9\uff1a\u5bf9\u4e8e $i<x$\uff0c$i$ \u4fdd\u7559\u6700\u5c0f\u7684 $j$ \u6ee1\u8db3 $i$\uff0c$j$ \u6709\u8fb9\uff0c\u4ee4\u6b64\u65f6 $j$ \u79f0\u4e3a $mn_i$\uff0c\u4e0d\u5b58\u5728\u5c31\u8bbe\u4e3a $\\inf$\uff0c\u5bf9\u4e8e $i>x$\uff0c$i$ \u4fdd\u7559\u6700\u5927\u7684 $j$ \u6ee1\u8db3 $i$\uff0c$j$ \u6709\u8fb9\uff0c\u4ee4 $j$ \u4e3a $mx_i$ \u4e0d\u5b58\u5728\u5c31\u8bbe\u4e3a $-\\inf$ \u3002\n\n\u5373\uff0c\u6761\u4ef6\u4e3a\uff1a$(\\max_{i< x}{mn_i})\\le x $ \u4e14 $(\\min_{x< i}{mx_i})\\ge x$\u3002\n\n\u8003\u8651\u5220\u9664\u4e00\u4e2a\u70b9\uff1a\n\n\u663e\u7136\uff0c\u8981\u4e48 $x$ \u5de6\u53f3\u4e24\u4fa7\u4e00\u8fb9\u4e00\u5b9a\u5408\u6cd5\uff0c\u8003\u8651\u5269\u4e0b\u4e00\u4fa7\uff0c\u4e0d\u59a8\u8bbe\u4e3a\u5de6\u4fa7\uff0c\u627e\u5230\u552f\u4e00\u7684 $p$ \u6ee1\u8db3 $p$ \u7684\u6700\u5c0f\u51fa\u8fb9\u8d85\u8fc7 $x$\uff0c\u5f53\u5c06\u6700\u5c0f\u51fa\u8fb9\u6307\u5411 $p$ \u7684\u70b9\uff0c\u90fd\u6362\u6210\u6b21\u5c0f\u51fa\u8fb9\uff0c\u5982\u679c\u5bf9\u4e8e\u9664 $p$ \u5916\u5269\u4e0b\u70b9\u82e5\u4ecd\u6ee1\u8db3 $\\max \\le x$ \u5219 $x$ \u5408\u6cd5\uff0c\u5426\u5219\u975e\u6cd5\u3002\n\n\u590d\u6742\u5ea6 $O(n\\log n)$ \u74f6\u9888\u5728\u4e8e\u7ed9\u51fa\u8fb9\u6309\u7167\u62d3\u6251\u5e8f\u6392\u5e8f\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nnamespace ifzw{\n#define ll long long\n#define dd double\n#define ull unsigned ll \n#define LL __int128\n#define siz(A) ((int)A.size())\nusing namespace std;\nchar gc(){static char buf[1<<16],*s,*t;if(s==t){t=(s=buf)+fread(buf,1,1<<16,stdin);if(s==t)return EOF;}return *s++;}\n#define getchar gc\nll read()\n{\n\tchar c;\n\tll w=1;\n\twhile((c=getchar())>'9'||c<'0')if(c=='-')w=-1;\n\tll ans=c-'0';\n\twhile((c=getchar())>='0'&&c<='9')ans=(ans<<1)+(ans<<3)+c-'0';\n\treturn ans*w;\n}\nvoid pc(char c,int op)\n{\n\tstatic char buf[1<<16],*s=buf,*t=buf+(1<<16);\n\t(op||((*s++=c)&&(s==t)))&&(fwrite(buf,1,s-buf,stdout),s=buf);\n}\nvoid wt(int x)\n{\n\tif(x>9)wt(x/10);\n\tpc('0'+x%10,0);\n}\nvoid wts(int x,char op)\n{\n\tif(x<0)pc('-',0),x=-x;\n\twt(x),pc(op,0);\n}\nchar ST;\nconst int xx=3e5+5;\nint n,m;\nvector<int>v[xx],r[xx],lin[xx];\nint id[xx],ex[xx],il[xx],ir[xx],rd[xx],cd[xx];\nint g0(int i){if(!i)return 0;if(siz(v[i]))return id[v[i][0]];return 1e9;}\nint g1(int i){if(!i)return 1e9;if(siz(r[i]))return id[r[i][0]];return -1e9;}\nchar ED;\nint main(){\n\tcerr<<abs(&ST-&ED)/1024.0/1024<<\"\\n\";\n\t#ifdef AAA\n\tsystem(\"ulimit -s 524288\");\n\tcerr<<\" stack is on \\n\";\n\t#endif \n\t//~ freopen(\"a.in\",\"r\",stdin);\n\t//~ freopen(\"a.out\",\"w\",stdout);\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a=read(),b=read();\n\t\tv[a].push_back(b);\n\t\tr[b].push_back(a);\n\t\trd[b]++,cd[a]++;\n\t}\n\tqueue<int>q;\n\tfor(int i=1;i<=n;i++)\n\t\tif(!rd[i])q.push(i);\n\tint cst=0;\n\tvector<int>ty;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();q.pop();\n\t\tty.push_back(x);\n\t\tid[x]=++cst;\n\t\tfor(auto to:v[x])\n\t\t\tif(!(--rd[to]))q.push(to);\n\t}\n\tfor(int i=1;i<=n;i++)sort(v[i].begin(),v[i].end(),[&](int A,int B){return id[A]<id[B];});\n\tfor(int i=1;i<=n;i++)sort(r[i].begin(),r[i].end(),[&](int A,int B){return id[A]<id[B];}),reverse(r[i].begin(),r[i].end());\n\tfor(int i=1;i<=n;i++)\n\t\tif(siz(v[i]))lin[v[i][0]].push_back(i);\n\tfor(int i=1;i<=n;i++)ex[i]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(auto it:lin[i])\n\t\t\tex[i]=siz(v[it])<=1?1e9:max(ex[i],id[v[it][1]]);\n\t}\n\tint M=0,S=0;\n\tfor(auto i:ty)\n\t{\n\t\tif(g0(M)<=id[i])il[i]=0;\n\t\telse if(g0(S)>id[i])il[i]=2;\n\t\telse if(ex[M]<=id[i])il[i]=1;\n\t\telse il[i]=2;\n\t\tif(g0(M)<g0(i))S=M,M=i;\n\t\telse if(g0(S)<g0(i))S=i;\n\t}\n\t\n\tfor(int i=1;i<=n;i++)lin[i].clear();\n\tfor(int i=1;i<=n;i++)\n\t\tif(siz(r[i]))lin[r[i][0]].push_back(i);\n\tfor(int i=1;i<=n;i++)ex[i]=1e9;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(auto it:lin[i])\n\t\t\tex[i]=siz(r[it])<=1?-1e9:min(ex[i],id[r[it][1]]);\n\t}\n\treverse(ty.begin(),ty.end());\n\tM=0,S=0;\n\tfor(auto i:ty)\n\t{\n\t\tif(g1(M)>=id[i])ir[i]=0;\n\t\telse if(g1(S)<id[i])ir[i]=2;\n\t\telse if(ex[M]>=id[i])ir[i]=1;\n\t\telse ir[i]=2;\n\t\tif(g1(M)>g1(i))S=M,M=i;\n\t\telse if(g1(S)>g1(i))S=i;\n\t}\n\t\n\tint ans=0;\n\tfor(int i=1;i<=n;i++)if(il[i]+ir[i]<=1)ans++;\n\tcout<<ans<<\"\\n\";\n\tpc('1',1);\n\treturn 0;\n}\n\n}signed main(){return ifzw::main();}\n\n```\n\n",
        "postTime": 1684555205,
        "uid": 371852,
        "name": "\u4e00\u5ff5\u4e4b\u95f4\u3001\u3001",
        "ccfLevel": 0,
        "title": "CF1062F  U p g  r a d i n g   C i t i e s"
    },
    {
        "content": "[Link](https://www.luogu.com.cn/problem/CF1062F)\n\n[Blog\u9605\u8bfb\u6548\u679c\u66f4\u4f73](https://tony102.xyz/index.php/2021/02/27/cf1062f-upgrading-cities/)\n\n\n### Sol\n\n> \u7403\uff1a\u62d3\u6251\u6392\u5e8f\u662f\u4e00\u4e2a\u9ed1\u7bb1\u64cd\u4f5c\u662f\u5427\uff1f\u5c31\u662f\u4f60\u6839\u672c\u4e0d\u77e5\u9053\u5b83\u5728\u5e72\u4ec0\u4e48\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u60f3\u62d3\u6251\u6392\u5e8f\u7684\u201c\u9ed1\u7bb1\u201d\u6709\u4ec0\u4e48\u6027\u8d28\n\n\u62d3\u6251\u6392\u5e8f\u7684\u201c\u9ed1\u7bb1\u201d\u961f\u5217\u7684\u6027\u8d28\uff0c\u4e00\u4e2a\u70b9\u80fd\u8fdb\u961f\u5217\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u7684\u524d\u9a71\u8282\u70b9\u90fd\u5df2\u51fa\u961f\u3002\u5728\u4e00\u5f20DAG\u4e0a\uff0c\u82e5\u4e24\u4e2a\u70b9\u540c\u65f6\u51fa\u73b0\u5728\u961f\u5217\u4e2d\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e92\u76f8\u65e0\u6cd5\u5230\u8fbe\uff0c\u5426\u5219\u4e0d\u662fDAG\u3002\u56e0\u4e3a\u4e24\u4e2a\u70b9\u5728\u6ca1\u6709\u73af\u7684\u524d\u63d0\u4e0b\u80fd\u4e92\u76f8\u5230\u8fbe\uff0c\u53ea\u80fd\u662f\u4ece\u76f8\u540c\u7684\u524d\u9a71\u8fc7\u6765\u3002\u80fd\u540c\u65f6\u51fa\u73b0\u5728\u961f\u5217\u4e2d\u8bf4\u660e\u6ca1\u6709\u8fd9\u6837\u7684\u524d\u9a71\u8282\u70b9\u3002\n\n\u6211\u4eec\u8bb0 $f_i$ \u8868\u793a\u4ece\u8be5\u70b9\u53ef\u4ee5\u8d70\u5230\u7684\u70b9\u96c6\u548c\u53ef\u4ee5\u8d70\u5230\u8be5\u70b9\u7684\u70b9\u96c6\u7684\u5e76\u96c6\u5927\u5c0f\u3002\u5206\u5f00\u5904\u7406\u8be5\u70b9\u53ef\u4ee5\u8d70\u5230\u7684\u70b9\u548c\u53ef\u4ee5\u8d70\u5230\u8be5\u70b9\u7684\u70b9\uff0c\u53ea\u8981\u5efa\u51fa\u53cd\u56fe\u505a\u76f8\u540c\u7684\u64cd\u4f5c\u5373\u53ef\u3002\n\n\u4ee5\u5728\u6b63\u56fe\u4e0a\u7684\u60c5\u51b5\u505a\u8bf4\u660e\uff0c\u53cd\u56fe\u7684\u60c5\u51b5\u540c\u7406\u53ef\u5f97\n\n\u5148\u6765\u7b97\u7b97\u91cd\u8981\u8282\u70b9\u3002\u52a0\u5165\u5728\u4e00\u4e2a\u961f\u5217\u91cc\u9762\uff0c\u5047\u5982\u73b0\u5728\u961f\u5217\u91cc\u9762\u53ea\u6709\u5b83\u4e00\u4e2a\u70b9$i$\uff0c\u90a3\u4e48\u5b83\u53ef\u4ee5\u5230\u7684\u70b9\u5c31\u662f\u9664\u5b83\u610f\u5916\u7684\u6240\u6709$n-1$\u4e2a\u70b9\u3002\u8fd9\u6837\u5bf9$f_i$\u7684\u8d21\u732e\u5c31\u662f$n-tot$ . $tot$ \u6307\u7684\u662f\u62d3\u6251\u5f00\u59cb\u524d\u5c31\u5165\u961f\u7684\u70b9\u7684\u4e2a\u6570\u3002\n\n\u90a3\u4e48\u6b21\u91cd\u8981\u8282\u70b9\u7684\u8ba1\u7b97\u4e5f\u5f88\u7b80\u5355\u3002\u6b21\u91cd\u8981\u8282\u70b9\u8981\u6210\u4e3a\u91cd\u8981\u8282\u70b9\uff0c\u5f53\u4e14\u4ec5\u5f53\u961f\u5217\u4e2d\u5143\u7d20\u4e2a\u6570\u4e3a$2$\u65f6\uff0c\u8bbe\u8fd9\u4e24\u4e2a\u70b9\u5206\u522b\u4e3a$u,v$\uff0c \u5728$u$\u5230$v$\u7684\u8def\u5f84\u4e0a\u53ea\u8981\u5b58\u5728\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6\u4e3a$1$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u88ab\u5220\u9664\u4e4b\u540e\u8fd9\u4e24\u4e2a\u70b9\u4e2d\u7684\u4efb\u610f\u4e00\u8005\u5373\u6ee1\u8db3\u6761\u4ef6\u3002\u628a\u8d21\u732e\u8bb0\u5230\u4efb\u610f\u4e00\u4e2a\u70b9\u4e0a\uff0c\u7ed9\u53e6\u5916\u4e00\u4e2a\u70b9\u6253\u4e0a\u6807\u8bb0\u5373\u53ef\u3002\n\n\n\n### Code\n[Code\u6233\u8fd9\u91cc](https://tony102.xyz/index.php/2021/02/27/cf1062f-upgrading-cities/)\n\n",
        "postTime": 1614406317,
        "uid": 230933,
        "name": "Tony102",
        "ccfLevel": 7,
        "title": "CF1062F Upgrading Cities"
    },
    {
        "content": "`DAG` \u4e2d\u6c42\u6ee1\u8db3 $u$ \u80fd\u5230\u8fbe $v$ \u6216\u8005 $v$ \u80fd\u5230\u8fbe $u$ \u7684 $v$ \u7684\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e $n-1$ \u7684 $u$ \u7684\u4e2a\u6570 \u3002\n\n\u7531\u4e8e\u8981\u8003\u8651 $u$ \u5230 $v$ \u548c $v$ \u5230 $u$ , \u6211\u4eec\u9700\u8981\u6b63\u53cd\u5efa\u8fb9\u505a\u4e24\u6b21\u62d3\u6251\u6392\u5e8f\u3002\n\n\u8003\u8651\u62d3\u6251\u6392\u5e8f\u7684\u4e00\u4e2a\u6027\u8d28 , \u5c31\u662f\u53ea\u6709\u81ea\u5df1\u51fa\u961f\u4ee5\u540e\u81ea\u5df1\u7684\u540e\u7ee7\u624d\u4f1a\u8fdb\u961f , \u6240\u4ee5\u5f53\u524d\u961f\u5217\u7684\u6240\u6709\u70b9\u90fd\u662f\u4e92\u76f8\u65e0\u6cd5\u5230\u8fbe\u7684 \u3002 \n\n\u7531\u4e8e\u672c\u9898\u4e4b\u4e2d\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u6709\u6ca1\u6709\u4e00\u4e2a\u70b9\u6ee1\u8db3\u5f53\u524d\u70b9\u4e0d\u80fd\u5230\u8fbe , \u5982\u679c\u961f\u5217\u91cc\u9762\u7684\u5143\u7d20\u8d85\u8fc7\u4e09\u4e2a\u90a3\u4e48\u5f53\u524d\u70b9\u80af\u5b9a\u4e0d\u662f\u5173\u952e\u70b9 \u3002 \n\n\u5bf9\u4e8e\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u6211\u4eec\u76f4\u63a5\u7edf\u8ba1\u8fdb\u961f\u4e2a\u6570 $cnt$ , \u90a3\u4e48\u5f53\u524d\u70b9 $u$ \u7684\u6240\u6709\u80fd\u5230\u8fbe\u7684\u70b9\u5c31\u662f $n-cnt$ , \u8ba9\u7edf\u8ba1\u6570\u7ec4 $f_u=f_u+n-cnt$ \u5373\u53ef \u3002\n\n\u5982\u679c\u5f53\u524d\u961f\u5217\u91cc\u6709\u4e24\u4e2a\u5143\u7d20\u90a3\u4e48\u8981\u8003\u8651\u53e6\u4e00\u4e2a\u70b9 $v$ \u7684\u540e\u7ee7 $w$ \u91cc\u9762\u662f\u5426\u53ea\u6709 $v \\rightarrow w$ \u8fd9\u4e00\u6761\u8def\u5f84\u53ef\u4ee5\u8d70 , \u5982\u679c\u5b58\u5728\u7684\u8bdd\u90a3\u4e48 $u$ \u5c31\u4e0d\u80fd\u5230\u8fbe $v,w$ \u8fd9\u4e24\u4e2a\u70b9 , \u76f4\u63a5\u6807\u8bb0\u5373\u53ef \u3002\u5982\u679c\u4e0d\u5b58\u5728\u7684\u8bdd\u540c\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u4e00\u6837\u5904\u7406\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n+m)$\n\n```cpp\n/*********************************************************************\n    \u7248\u6743: 22377987589@qq.com\n    \u4f5c\u8005: shenxinge\n    \u65e5\u671f: 2022-12-15 20:03 \n*********************************************************************/\n#include<bits/stdc++.h>\n#define For(i,a,b) for(int i=a;i<=b;i++)\n#define Rep(i,a,b) for(int i=a;i>=b;i--)\nusing namespace std;\nconst int maxn=3e5+5210;\ninline int read()\n{\n\tint x=0,f=1;char c;\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-f;\n\tfor(;isdigit(c);c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n\treturn x*f;\n}\nint n,m,u[maxn],v[maxn];\nvector<int> vec[maxn];\nint f[maxn],in[maxn];\nqueue<int> que;bool nimp[maxn];\ninline void toposort()\n{\n\tint cnt=0;\n\tFor(i,1,n) if(!in[i]) \n\t\tque.push(i),cnt++;\n\twhile(!que.empty())\n\t{\n\t\tint u=que.front();que.pop();\n\t\tint nsz=que.size();\n\t\tif(!nsz) f[u]+=n-cnt;\n\t\telse if(nsz==1)\n\t\t{\n\t\t\tint v=que.front();\n\t\t\tfor(int w:vec[v])\n\t\t\t\tif(in[w]==1)\n\t\t\t\t\t{nimp[u]=true;goto loop;}\n\t\t\tf[u]+=n-cnt;\n\t\t\tloop:;\n\t\t}\n\t\telse nimp[u]=true;\n\t\tfor(int v:vec[u])\n\t\t\tif(!--in[v]) que.push(v),cnt++;\n\t}\n}\nsigned main()\n{\n\tn=read(),m=read();\n\tFor(i,1,m)\n\t{\n\t\tint u=read(),v=read();\n\t\tvec[u].push_back(v),in[v]++;\n\t\t::u[i]=u,::v[i]=v;\n\t}\n\tFor(i,1,n) f[i]=1;\n\ttoposort();\n\tFor(i,1,n)\n\t\tvector<int>().swap(vec[i]);\n\tFor(i,1,m)\n\t{\n\t\tint u=::v[i],v=::u[i];\n\t\tvec[u].push_back(v),in[v]++;\n\t}\n\ttoposort();\n\tint ans=0;\n\tFor(i,1,n)\n\t\tif(!nimp[i]&&f[i]>=n-1)\n\t\t\tans++;\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1671107931,
        "uid": 235855,
        "name": "shenxinge",
        "ccfLevel": 6,
        "title": "[\u9898\u89e3] Upgrading Cities"
    },
    {
        "content": "\\*2900\n\n\u4eba\u5f88\u4e71\uff0c\u4ee5\u5377\u4ee3\u9893\uff0c\u5f88\u7ecf\u5178\uff0c\u4f46\u4e2a\u4eba\u8ba4\u4e3a\u7b2c\u4e00\u6b21/\u5fd8\u4e86\u786e\u5b9e\u60f3\u4e0d\u5230\uff0c~~\u5efa\u8bae\u964d\u7d2b\u7684\u522b\u8df3\u8138~~\u3002\uff08u1s1\uff0clg\u9898\u89e3\u90fd\u770b\u4e0d\u61c2\n\n\u8bbe $in_x$ \u4e3a\u80fd\u5230\u8fbe $x$ \u7684\u70b9\u6570\uff0c\u4ee4 $inS_x$ \u4e3a\u80fd\u5230\u8fbe $x$ \u7684\u4e0d\u53ef\u91cd\u96c6\u5408\uff0c$in_x=|inS_x|$\uff0c\u540c\u7406\u5b9a\u4e49 $out_x$ \u4e3a $x$ \u80fd\u5230\u8fbe\u7684\u70b9\u96c6\u5408\uff0c$outS$ \u540c\u3002\n\n- \u91cd\u8981\u70b9\u5f53\u4e14\u4ec5\u5f53 $in_x+out_x=n+1$\uff0c\u56e0\u4e3a\u81ea\u5df1\u7b97\u4e86\u4e24\u6b21\u3002\n- \u6b21\u91cd\u8981\u70b9\u5f53\u4e14\u4ec5\u5f53 $in_x+out_x=n$\uff0c\u56e0\u4e3a\u5b9a\u4e49\u4e2d\u5228\u53bb\u4e86\u91cd\u8981\u70b9\uff0c\u800c\u6b21\u91cd\u8981\u70b9\u663e\u7136\u662f\u6b21\u5927\u7684\uff0c\u53ef\u4ee5\u53d6\u7b49\u3002\n\n\u8ba1\u6570 $in_x,out_x$ \u6709 bitset \u7684 $\\frac{n^2}w$ \u7684\u901a\u7528\u89e3\u6cd5\uff0c\u5373\u975e\u91cd\u8981\u70b9\u5747\u53ef\u6c42\uff0c\u590d\u6742\u5ea6\u4e0d\u4f18\u96c5\u6545\u4e0d\u8d58\u8ff0\u3002\n\n\u6709\u7ecf\u5178\u7ed3\u8bba $in_x+out_x=n+1$ \u7684\u91cd\u8981\u70b9\u5fc5\u5b9a\u5728 DAG \u7684\u6700\u957f\u94fe\u4e0a\uff0c\u8bbe\u6700\u957f\u94fe\u4e0a\u70b9\u96c6\u5408\u4e3a $s$\uff0c\u5927\u5c0f\u4e3a $|S|$\uff0c\u8003\u8651\u53cd\u8bc1\uff1a\n\n- \u82e5 $x$ \u91cd\u8981\u4e14\u4e0d\u5728\u6700\u957f\u94fe\u4e0a\uff0c\u8bbe\u6392\u540d\u4e3a $i$ \u7684\u70b9 $s_i$ \u662f\u80fd\u5230\u8fbe $x$ \u4e14\u5728\u957f\u94fe\u5e8f\u5217\u4e2d\u6392\u540d\u6700\u9760\u540e\u7684\u70b9\u3002\uff08\u6309\u62d3\u6251\u5e8f\u6392\u540d\uff09\n- \u82e5 $i=|S|$\uff0c\u5219\u6700\u957f\u94fe\u53ef\u5ef6\u4f38\uff0c\u77db\u76fe\u3002\n- \u5426\u5219 $i<|S|$\uff0c\u7531\u4e8e $x$ \u91cd\u8981\u4e14 $s_{i+1}$ \u4e0d\u53ef\u8fbe $x$\uff0c\u6545 $x$ \u53ef\u8fbe $s_{i+1}$\u3002\n- \u5219 $s_i\\to x\\to s_{i+1}$ \u53ef\u5e76\u5165\u6700\u957f\u94fe\u4f7f\u589e\u957f\uff0c\u77db\u76fe\u3002\n\n\u7531\u4e8e\u90fd\u5728\u6700\u957f\u94fe\u4e0a\uff0c$inS_{s_i},inS_{s_{i+1}}$ \u662f\u6709\u5305\u542b\u5173\u7cfb\u7684\uff0c$outS$ \u540c\u7406\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u66b4\u529b\u904d\u5386\uff0c**\u88ab\u5305\u542b\u7684\u53ea\u5728\u4e4b\u524d\u904d\u5386\u4e00\u6b21**\uff0c\u5373\u4e0d\u91cd\u590d\u904d\u5386\u70b9\uff0c\u6545\u53ef\u8ba1\u6570\u957f\u94fe\u4e0a\u7684 $in_x,out_x$\uff0c\u5e76\u7ed9\u51fa\u5224\u65ad\uff0c\u590d\u6742\u5ea6 $O(n+m)$\u3002\n\n\u4e8e\u662f\u91cd\u8981\u70b9\u4e00\u5b9a\u90fd\u8003\u8651\u5b8c\u4e86\uff0c\u8003\u8651\u6b21\u91cd\u8981\u70b9\uff0c\u82e5\u4f4d\u4e8e\u957f\u94fe\u4e0a\u4e5f\u53ef\u4ee5\u5224\u65ad\u3002\n\n\u8003\u8651\u4f4d\u4e8e\u957f\u94fe\u5916\u7684\u6b21\u91cd\u8981\u70b9 $x$\uff0c\u6839\u636e\u4e4b\u524d\u957f\u94fe\u7406\u8bba\u7684\u7ecf\u9a8c\u6211\u4eec\u610f\u8bc6\u5230\u5b83\u4e0d\u4f1a\u91cc\u957f\u94fe\u592a\u8fdc\u3002\n\n\u4e0e\u53cd\u8bc1\u6cd5\u540c\u7406\u7684\u601d\u8def\uff0c\u6211\u4eec\u8bbe\u6392\u540d\u4e3a $i$ \u7684\u70b9 $s_i$ \u662f\u80fd\u5230\u8fbe $x$ \u4e14\u5728\u957f\u94fe\u5e8f\u5217\u4e2d\u6392\u540d\u6700\u9760\u540e\u7684\u70b9\uff0c\u518d\u8bbe\u6392\u540d\u4e3a $j$ \u7684\u70b9 $s_j$ \u662f $x$ \u80fd\u5230\u8fbe\u4e14\u5728\u957f\u94fe\u5e8f\u5217\u4e2d\u6392\u540d\u6700\u9760\u524d\u7684\u70b9\u3002\n\n- \u6709 $j-i-1\\le 1$\uff0c\u5426\u5219\u4e2d\u95f4\u7684\u70b9\u90fd\u4e0d\u53ef\u8fbe\u5219 $in_x+out_x\\le n+1-(j-i-1)<n$\u3002\n- \u540c\u65f6 $j-i-1\\ge 1$\uff0c\u5426\u5219\u957f\u94fe\u589e\u957f\u3002\n- \u6545 $j-i-1=1$\u3002\n\n\u6ce8\u610f\uff0c\u82e5\u4e0d\u80fd\u8fbe\u957f\u94fe\u5219 $j=n+1$\uff0c\u4e0d\u80fd\u88ab\u8fbe\u5219 $i=0$\uff0c\u8fb9\u754c\u60c5\u51b5\u65e0\u8bef\u3002\n\n\u4e0d\u59a8\u6839\u636e $x$ \u8bbe $L_x=i,R_x=j$ \u4e3a\u5bf9\u5e94\u7684 $s_i,s_j$ \u6392\u540d\uff0c\u6709 $R_x-L_x-1=1$\u3002\n\n\u53d1\u73b0 $\\forall x,y,L_x\\neq L_y,R_x\\neq R_y$\uff0c\u8003\u8651\u53cd\u8bc1\uff1a\n\n\u9996\u5148 $L_x=L_y\\leftrightarrow R_x=R_y$\uff0c\u540c\u65f6\u5df2\u6709 $s_{L_x+1}$ \u4e0d\u5728 $x,y$ \u7684\u53ef\u8fbe\u8303\u56f4\u5185\uff0c\u8003\u8651 $x,y$ \u662f\u5426\u4e92\u76f8\u53ef\u8fbe\uff1a\n\n- \u4e0d\u4e92\u76f8\u53ef\u8fbe\uff0c$in_x+out_x<n$\uff0c$y$ \u540c\u7406\u3002\n- \u4e92\u76f8\u53ef\u8fbe\uff0c\u663e\u7136\u957f\u94fe\u53ef\u589e\u957f\uff0c\u77db\u76fe\u3002\n\n\u6545\u5f97\u8bc1\u3002\n\n\u8fd9\u544a\u8bc9\u6211\u4eec\uff0c\u5bf9\u4e8e\u975e\u5173\u952e\u70b9\u7684\u904d\u5386\u4e5f\u53ef\u4ee5\u66b4\u529b\u6267\u884c\uff0c\u8bbe $P_i$ \u4e3a $L_x=i$ \u7684 $x$\u3002\n\n\u6211\u4eec\u5728\u8fdb\u884c\u5b8c $s_{i+2}$ \u7684\u96c6\u5408\u904d\u5386\u540e\u5bf9 $P_i$ \u7684\u96c6\u5408\u8fdb\u884c\u904d\u5386\uff08\u56e0\u4e3a $R_{P_i}=i+2$\uff09\uff0c\u7136\u540e\u66b4\u529b\u56de\u64a4\u3002\n\n\u6211\u4eec\u589e\u52a0\u7684\u590d\u6742\u5ea6\u4e3a\u81f3\u591a\u4e3a $s_i,s_{i+1}$ \u4e24\u70b9\u904d\u5386\u65f6\u7684\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a $s_i$ \u53ef\u8fbe $P_i$\uff0c\u6545 $outS$ \u5448\u5305\u542b\u5173\u7cfb\uff0c$P_i$ \u80fd\u904d\u5386\u5230\u7684\u4e5f\u5c31\u662f $outS_{s_i}\\oplus outS_{s_{i+2}}$\uff0c\u8fd9\u91cc $\\oplus$ \u8868\u793a\u5bf9\u79f0\u5dee\u3002\n\n\u8fd9\u6837\u603b\u548c\u8fd8\u662f\u5728\u53ef\u63a5\u53d7\u7684 $O(n+m)$ \u8303\u56f4\u5185\uff0c\u53ea\u4e0d\u8fc7\u5e26\u4e24\u500d\u5e38\u6570\u3002\n\n\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5176\u4ed6\u4eba\u90fd\u8dd1\u7684\u8fd9\u4e48\u6162\uff1f[\u4ee3\u7801](https://www.luogu.com.cn/paste/mgemikve)",
        "postTime": 1649433241,
        "uid": 158948,
        "name": "\u7ea6\u745f\u592b\u7528\u8111\u73a9",
        "ccfLevel": 0,
        "title": "CF1062F Upgrading Cities"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4e00\u773c\u770b\u4e0a\u53bb\u53ef\u80fd\u6ca1\u4ec0\u4e48\u601d\u8def~~\u81f3\u5c11\u6211\u662f\u8fd9\u6837\u7684~~\uff0c\u4f46\u4ed4\u7ec6\u601d\u8003\u540e\uff0c\u5c31\u4f1a\u53d1\u73b0\u53ef\u4ee5\u7528\u62d3\u6251\u6392\u5e8f\u3002\n\n\u62d3\u6251\u6392\u5e8f\u6709\u4e00\u4e2a\u6027\u8d28\uff0c\u5c31\u662f**\u4efb\u610f\u65f6\u523b\u5728\u961f\u5217\u91cc\u7684\u70b9\u90fd\u4e0d\u80fd\u4e92\u76f8\u5230\u8fbe**~~\u8fd9\u4e0d\u662f\u663e\u7136\u5417~~\uff0c\u7528\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u51fa\u6bcf\u4e2a\u70b9\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u4e2a\u6570\u4e86\u3002\n\n\u4f46\u662f**\u91cd\u8981\u7684\u8282\u70b9**\u548c**\u6b21\u91cd\u8981\u7684\u8282\u70b9**\u7684\u5b9a\u4e49\u662f**\u4e92\u76f8\u5230\u8fbe**\uff0c\u4e8e\u662f\u6211\u4eec\u8981\u5c06\u539f\u56fe\u7684\u6bcf\u6761\u8fb9\u53cd\u8fc7\u6765\u5b58\u4e00\u6b21\u56fe\uff0c\u6682\u4e14\u53eb\u5b83\u201c\u53cd\u56fe\u201d\uff0c\u7136\u540e\u628a\u53cd\u56fe\u505a\u4e00\u904d\u62d3\u6251\u6392\u5e8f\uff0c\u518d\u628a\u4e24\u6b21\u62d3\u6251\u6392\u5e8f\u6c42\u51fa\u6765\u7684\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u5230\u8fbe\u7684\u8282\u70b9\u4e2a\u6570\u52a0\u8d77\u6765\uff0c\u5c31\u5f97\u5230\u4e86\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u548c\u5176\u5b83\u70b9\u4e92\u76f8\u5230\u8fbe\u7684\u8282\u70b9\u4e2a\u6570\u3002\n\n\u6700\u540e\uff0c\u628a\u6bcf\u4e2a\u70b9\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u4e2a\u6570\u5224\u65ad\u4e00\u904d\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u4e2a\u6570$\u2265n-2$,\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u8282\u70b9\u6216\u6b21\u91cd\u8981\u7684\u8282\u70b9\u3002\n\n\n\u4e0a\u4ee3\u7801:-)\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n\nusing namespace std;\n\nconst int maxn=300010;\nvector<int>G1[maxn],G2[maxn];   //G1[]:\u539f\u56fe\u7684\u90bb\u63a5\u8868\uff0cG2[]:\u53cd\u56fe\u7684\u90bb\u63a5\u8868\nint n,m,ans;\nint in1[maxn],in2[maxn];        //in1[]:\u539f\u56fe\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\uff0cin2[]:\u53cd\u56fe\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\nint d[maxn];                    //\u6bcf\u4e2a\u70b9\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u4e2a\u6570\n\nint read()      //\u5feb\u8bfb \n{\n    int x=0;\n    char c=getchar();\n    while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9') x=x*10+c-'0',c=getchar();\n    return x;\n}\n\nvoid tp1()      //\u62d3\u6251\u6392\u5e8f\u539f\u56fe\n{\n    queue<int>que;\n    int sum=n;              //\u76ee\u524d\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u4e2a\u6570 \n    for(int i=1;i<=n;i++)\n        if(!in1[i])         //\u5165\u5ea6\u4e3a\u96f6\u5c31\u5165\u961f \n        {\n            que.push(i);\n            sum--;          //\u56e0\u4e3ai\u6ca1\u6709\u5165\u5ea6\uff0c\u6240\u4ee5\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u4e2a\u6570\u51cf\u4e00 \n        }\n    while(!que.empty())\n    {\n        int t=que.front();\n        que.pop();\n        if(que.empty())\n            d[t]+=sum;          //\u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u90a3\u4e48t\u53ef\u4ee5\u5230\u8fbe\u5269\u4e0b\u6240\u6709\u7684\u8282\u70b9 \n        if(que.size()==1)       //\u5982\u679c\u961f\u5217\u91cc\u5269\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5224\u65ad\u5220\u53bb\u8fd9\u4e2a\u8282\u70b9\u540et\u80fd\u5426\u5230\u8fbe\u5176\u4f59\u6240\u6709\u7684\u8282\u70b9  \n        {\n            int tt=que.front(); //tt:t\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9 \n            int flag=1;         //flag=1:t\u80fd\u5230\u8fbe\u5176\u4f59\u6240\u6709\u7684\u8282\u70b9\uff0cflag=0:\u4e0d\u80fd \n            for(int i=0;i<G1[tt].size();i++)//\u679a\u4e3ett\u80fd\u5230\u8fbe\u7684\u70b9 \n                if(in1[G1[tt][i]]==1)       //\u5982\u679c\u80fd\u5230\u8fbeG1[tt][i]\u7684\u70b9\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48t\u5c31\u4e0d\u80fd\u5230\u8fbeG1[tt][i] \n                {\n                    flag=0;\n                    break;\n                }\n            if(flag==1)\n                d[t]+=sum;\n        }\n        //\u62d3\u6251\u6392\u5e8f\u5165\u961f\n        for(int i=0;i<G1[t].size();i++)\n        {\n            int c=G1[t][i];\n            if(!(--in1[c]))\n            {\n                que.push(c);\n                sum--;\t\t\t//\u56e0\u4e3ac\u5165\u961f\u4e86\uff0c\u6240\u4ee5\u540e\u9762\u7684\u8282\u70b9\u5c31\u90fd\u5230\u4e0d\u4e86c\u4e86\n            }\n        }\n    }\n    return;\n}\n\nvoid tp2()      //\u62d3\u6251\u6392\u5e8f\u53cd\u56fe \n{\n    queue<int>que;\n    int sum=n;              //\u76ee\u524d\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u4e2a\u6570 \n    for(int i=1;i<=n;i++)\n        if(!in2[i])         //\u5165\u5ea6\u4e3a\u96f6\u5c31\u5165\u961f \n        {\n            que.push(i);\n            sum--;          //\u56e0\u4e3ai\u6ca1\u6709\u5165\u5ea6\uff0c\u6240\u4ee5\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u4e2a\u6570\u51cf\u4e00 \n        }\n    while(!que.empty())\n    {\n        int t=que.front();\n        que.pop();\n        if(que.empty())\n            d[t]+=sum;          //\u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u90a3\u4e48t\u53ef\u4ee5\u5230\u8fbe\u5269\u4e0b\u6240\u6709\u7684\u8282\u70b9 \n        if(que.size()==1)       //\u5982\u679c\u961f\u5217\u91cc\u5269\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5224\u65ad\u5220\u53bb\u8fd9\u4e2a\u8282\u70b9\u540et\u80fd\u5426\u5230\u8fbe\u5176\u4f59\u6240\u6709\u7684\u8282\u70b9\n        {\n            int tt=que.front(); //tt:t\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9 \n            int flag=1;         //flag=1:t\u80fd\u5230\u8fbe\u5176\u4f59\u6240\u6709\u7684\u8282\u70b9\uff0cflag=0:\u4e0d\u80fd \n            for(int i=0;i<G2[tt].size();i++)//\u679a\u4e3ett\u80fd\u5230\u8fbe\u7684\u70b9 \n                if(in2[G2[tt][i]]==1)       //\u5982\u679c\u80fd\u5230\u8fbeG1[tt][i]\u7684\u70b9\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48t\u5c31\u4e0d\u80fd\u5230\u8fbeG1[tt][i] \n                {\n                    flag=0;\n                    break;\n                }\n            if(flag==1)\n                d[t]+=sum;\n        }\n        //\u62d3\u6251\u6392\u5e8f\u5165\u961f\n        for(int i=0;i<G2[t].size();i++)\n        {\n            int c=G2[t][i];\n            if(!(--in2[c]))\n            {\n                que.push(c);\n                sum--;\t\t\t//\u56e0\u4e3ac\u5165\u961f\u4e86\uff0c\u6240\u4ee5\u540e\u9762\u7684\u8282\u70b9\u5c31\u90fd\u5230\u4e0d\u4e86c\u4e86\n            }\n        }\n    }\n    return;\n}\n\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=m;i++)\n    {\n        int u=read(),v=read();\n        G1[u].push_back(v);\n        in1[v]++;\n        G2[v].push_back(u);\n        in2[u]++;\n    }\n    tp1();\n    tp2();\n    //\u5982\u679c\u7b2ci\u4e2a\u70b9\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u4e2a\u6570\u2265n-2,\u90a3\u4e48i\u662f\u91cd\u8981\u7684\u8282\u70b9\u6216\u6b64\u91cd\u8981\u7684\u8282\u70b9 \n    for(int i=1;i<=n;i++)\n        if(d[i]>=n-2)\n            ans++;\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1582029377,
        "uid": 211300,
        "name": "Acestar",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1062F \u3010Upgrading Cities\u3011"
    },
    {
        "content": "[\u66f4\u5dee\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/tx-lcy/p/16790870.html)\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1062F)\n## \u601d\u8def\n\u8003\u8651\u6b63\u53cd\u4e24\u904d\u62d3\u6251\uff0c\u8bbe $s_{0,i}/s_{1,i}$ \u8868\u793a\u80fd\u5230\u8fd9\u4e2a\u70b9\u7684\u70b9\u6570/\u4ece\u8fd9\u4e2a\u70b9\u51fa\u53d1\u80fd\u5230\u7684\u70b9\u6570\u3002\n\n\u53e6\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\uff1a\u6b63\u5728\u62d3\u6251\u7684\u6240\u6709\u70b9\u4e4b\u95f4\u662f\u4e24\u4e24\u65e0\u6cd5\u5230\u8fbe\u7684\u3002\n\n\u8bbe\u5f53\u524d\u6b63\u5728\u62d3\u6251\u7684\u70b9\u96c6\u4e3a $v$\uff1a\n\n+ \u82e5 $v$ \u4e2d\u53ea\u542b\u6709\u4e00\u4e2a\u6570\uff0c\u663e\u7136\u8fd9\u4e2a $v$ \u53ef\u4ee5\u5230\u8fbe\u5269\u4e0b\u6ca1\u6709\u62d3\u6251\u7684\u6240\u6709\u70b9\u3002\n+ \u82e5 $v$ \u4e2d\u542b\u6709\u4e24\u4e2a\u6570\uff0c\u8fd9\u4e24\u4e2a\u6570\u662f\u4e92\u76f8\u65e0\u6cd5\u5230\u8fbe\u7684\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u8fd9\u4e24\u4e2a\u6570\u80fd\u5230\u8fbe\u7684\u70b9\uff0c\u8bbe\u5f53\u524d\u8003\u8651\u7684\u6570\u4e3a $x$\uff0c\u82e5\u67d0\u4e2a\u4e0e $x$ \u6709\u8fb9\u70b9\u5f53\u524d\u7684\u5165\u5ea6\u4e3a $1$\uff0c\u663e\u7136\u5b83\u53ea\u80fd\u4ece\u70b9 $x$ \u8fc7\u53bb\uff0c\u65e0\u6cd5\u4ece\u53e6\u4e00\u4e2a\u70b9\u8fc7\u53bb\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u6253\u4e2a\u6807\u8bb0\uff0c\u53e6\u4e00\u4e2a\u70b9\u4e0d\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\u3002\n+ \u82e5 $v$ \u4e2d\u542b\u6709\u4e09\u4e2a\u6570\uff0c\u663e\u7136\u8fd9\u4e9b\u6570\u4e0d\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\u3002\n\n\u5c31\u8fd9\u6837\u66b4\u529b\u62d3\u6251\u5373\u53ef\u3002\n## \u4ee3\u7801\n```cpp\n/*\nA tree without skin will surely die. \nA man without face is invincible.\n*/\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nint const N=1e6+10;\nint q[N],l,r,num,s[2][N],d[2][N],n;\nvector<int>a[N],b[N];\ninline void add(vector<int>&v,int type,vector<int>a[N]){\n\tif (v.size()==1){s[type][v[0]]=num-1;}\n\telse if (v.size()==2){\n\t\ts[type][v[0]]=s[type][v[1]]=num-2;\n\t\tfor (auto j:a[v[0]]) if (d[type][j]==1) s[type][v[1]]=-1e8;\n\t\tfor (auto j:a[v[1]]) if (d[type][j]==1) s[type][v[0]]=-1e8;\n\t}\n\telse{for (auto x:v) d[type][x]=-1e8;}\n\tfor (auto x:v) q[++r]=x,--num;v.clear();\n}\ninline void toposort(vector<int>a[N],int type){\n\tvector<int>v;\n\tfor (int i=1;i<=n;++i) if (!d[type][i]) v.push_back(i);\n\tnum=n;l=0,r=-1;add(v,type,a);\n\twhile (l<=r){\n\t\tint now=q[l++];\n\t\tfor (auto j:a[now]) if (--d[type][j]==0) v.push_back(j);\n\t\tif (l>r) add(v,type,a);\n\t}\n}\nsigned main(){\n\tint m;//\u8bfb\u5165\n\twhile (m--){\n\t\tint u,v;//\u8bfb\u5165\n\t\ta[u].push_back(v);++d[0][v];\n\t\tb[v].push_back(u);++d[1][u];\n\t}\n\ttoposort(a,0);\n\ttoposort(b,1);\n\tint ans=0;\n\tfor (int i=1;i<=n;++i) if (s[1][i]+s[0][i]>=n-2) ++ans;\n\t//\u8f93\u51fa\n\treturn 0;\n}\n```\n",
        "postTime": 1665715379,
        "uid": 253608,
        "name": "Tx_Lcy",
        "ccfLevel": 7,
        "title": "CF1062F Upgrading Cities"
    }
]