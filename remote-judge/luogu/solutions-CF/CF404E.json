[
    {
        "content": "## \u9898\u76ee\u5206\u6790\n\n**\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u4e00\u5835\u5899\u53ea\u6709\u88ab\u673a\u5668\u4eba\u649e\u5230\u624d\u662f\u6709\u7528\u7684\u5899\u3002**\n\n\u5148\u8003\u8651\u6ca1\u6709\u5899\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u6a21\u62df\u5373\u53ef\u3002\n\n\u6211\u4eec\u518d\u8003\u8651\u4e24\u5835\u5899\u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u4e00\u5171\u6709\u4e24\u79cd\u53ef\u80fd\uff1a\n\n- \u5899\u5728\u539f\u70b9\u540c\u4fa7\n\n- \u5899\u5728\u539f\u70b9\u5f02\u4fa7\n\n\u5728\u540c\u4fa7\u7684\u60c5\u51b5\u53ef\u4ee5\u9996\u5148\u6392\u9664\uff0c\u56e0\u4e3a\u524d\u9762\u7684\u4e00\u5835\u5899\u53ef\u4ee5\u6321\u4f4f\u673a\u5668\u4eba\u7684\u6240\u6709\u53ef\u80fd\u8d85\u8fc7\u5b83\u7684\u6307\u4ee4\uff0c\u6240\u4ee5\u540e\u9762\u7684\u90a3\u5835\u5899\u6c38\u8fdc\u4e0d\u53ef\u80fd\u88ab\u673a\u5668\u4eba\u649e\u5230\u3002\n\n\u90a3\u4e48\u5f02\u4fa7\u7684\u60c5\u51b5\u5462\uff1f\n\n\u6839\u636e\u6700\u524d\u9762\u5f97\u51fa\u7684\u7406\u8bba\uff0c\u4e24\u5835\u5899\u90fd\u8981\u88ab\u649e\u5230\u624d\u662f\u6709\u7528\u7684\uff0c\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u4f1a\u53d1\u73b0\u673a\u5668\u4eba\u7684\u8def\u5f84\u80af\u5b9a\u8986\u76d6\u4e86\u4e24\u5835\u5899\u95f4\u6240\u6709\u7684\u70b9\uff0c\u90a3\u4e48\u5c31\u4e0d\u53ef\u80fd\u4f7f\u673a\u5668\u4eba\u6700\u540e\u4e00\u6b65\u505c\u5728\u4e00\u4e2a\u6ca1\u6709\u8d70\u8fc7\u7684\u70b9\u4e0a\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u5899\u7684\u6570\u91cf\u53ea\u53ef\u80fd\u4e3a $0$ \u6216 $1$ \u3002\n \n\u90a3\u4e48\u8003\u8651\u5899\u7684\u6570\u91cf\u4e3a $1$ \u7684\u60c5\u51b5\uff0c\u5f53\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u662f \"L\" \u7684\u8bdd\uff0c\u90a3\u4e48\u4e00\u79cd\u7b26\u5408\u9898\u610f\u7684\u60c5\u51b5\u6700\u540e\u4e00\u6b65\u5fc5\u7136\u5728\u539f\u70b9\u5de6\u8fb9\uff0c\u53cd\u4e4b\u540c\u7406\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u5982\u679c\u4e00\u4e2a\u70b9\u53ef\u4ee5\u653e\u7f6e\u5899\u4f7f\u5f97\u8be5\u60c5\u51b5\u7b26\u5408\u9898\u610f\uff0c\u90a3\u4e48\u66f4\u9760\u8fd1\u539f\u70b9\u7684\u6446\u653e\u65b9\u5f0f\u4e00\u5b9a\u53ef\u4ee5\uff0c\u56e0\u4e3a\u5b83\u62b5\u6d88\u4e86\u66f4\u591a\u7684\u53cd\u5411\u79fb\u52a8\u3002\n\n\u6240\u4ee5\u76f4\u63a5\u4e8c\u5206\u51fa\u5899\u53ef\u80fd\u5728\u7684\u6700\u5927\u4f4d\u7f6e\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n\\log n)$\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n, npos, maxp, minp;\nchar ch[1000005];\nint chk(int pos) {      //\u5224\u65ad\u5899\u653e\u5728pos\u5904\u662f\u5426\u53ef\u884c\uff0cpos=0\u4ee3\u8868\u4e0d\u653e\u5899 \n\tnpos = maxp = minp = 0;\n\tfor(int i = 1; i <= n; i++) {\n\t\tmaxp = max(maxp, npos);\n\t\tminp = min(minp, npos);\n\t\tnpos += (ch[i] == 'R') ? 1 : -1;\n\t\tif(pos && npos == pos)  npos -= (ch[i] == 'R') ? 1 : -1;\n\t}\n\treturn npos > maxp || npos < minp;\n}\nint main() {\n\tscanf(\"%s\", ch + 1);\n\tn = strlen(ch + 1);\n\tif(chk(0)) {\n\t\tputs(\"1\");\n\t\treturn 0;\n\t}\n\tif(ch[n] == 'L') {\n\t\tint l = 1, r = 1E6, ans = 0;\n\t\twhile(l <= r) {\n\t\t\tint mid = (l + r) >> 1;\n\t\t\tif(chk(mid))  ans = mid, l = mid + 1;\n\t\t\telse  r = mid - 1;\n\t\t}\n\t\tcout << ans << endl;\n\t\treturn 0;\n\t}\n\tint l = -1E6, r = -1, ans = 0;\n\twhile(l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif(chk(mid))  ans = mid, r = mid - 1;\n\t\telse  l = mid + 1;\n\t}\n\tcout << abs(ans) << endl;\n}\n```\n",
        "postTime": 1598702646,
        "uid": 48257,
        "name": "wlj_55",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF404E \u3010Maze 1D\u3011"
    }
]