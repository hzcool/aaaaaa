[
    {
        "content": "### \u778e\u626f\n\n\u6700\u8fd1\u5b66\u7ebf\u6bb5\u6811\u554a\uff0c\u8fd9\u9898\u5927\u7ea6\u90fd\u662f\u81ea\u5df1\u60f3\u51fa\u6765\u7684\u3002~~\u4e3b\u8981\u662f\u8001\u5e08\u8bb2\u8bfe\u7684\u65f6\u5019\u6ca1\u542c\uff0c\u9898\u89e3\u53c8\u770b\u4e0d\u61c2\u554a\u554a\u3002~~\u505a\u6cd5\u6bd4\u8f83\u76f4\u63a5\u3002\n\n### \u9898\u610f\n\n\u5728 $n$ \u5929\u5185\uff0c\u6709 $m$ \u79cd\u7269\u54c1\u3002\u5176\u4e2d\u7b2c $i$ \u79cd\u7269\u54c1\u6709 $c_i$ \u4e2a\uff0c\u4e14\u5c06\u5728 $[l_i, r_i]$ \u8fd9\u51e0\u5929\u51fa\u73b0\uff0c\u4ef7\u683c\u4e3a\u6bcf\u4e2a $p_i$\u3002\u7ed9\u5b9a\u4e00\u4e2a $k$\uff0c\u6bcf\u5929\u8981**\u79df\u501f\u4e00\u5929**\u4ef7\u683c\u6700\u5c0f\u7684 $k$ \u4e2a\u7269\u54c1\uff08\u5982\u4e0d\u591f\u5c31\u80fd\u79df\u591a\u5c11\u79df\u591a\u5c11\uff09\u3002\u6c42\u8fd9 $n$ \u5929\u8981\u82b1\u7684\u94b1\u3002\n\n### \u601d\u8def\n\n\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u4e24\u4e2a\u4fe1\u606f\u3002\u533a\u95f4 $[l, r]$ \u8868\u793a\uff1a  \n1. $cnt$\u3002\u4ef7\u503c\u4e3a $[l, r]$ \u4e4b\u95f4\u7684\u7269\u54c1\u6570\u91cf\u4e4b\u548c\u3002\n2. $sum$\u3002\u4ef7\u503c\u4e3a $[l, r]$ \u4e4b\u95f4\u7684\u7269\u54c1\u5168\u90e8\u79df\u5b8c\u6240\u9700\u7684\u4ee3\u4ef7\u3002\n\n\u4e24\u4e2a\u4e1c\u897f\u7684 pushup \u90fd\u662f\u76f4\u63a5\u76f8\u52a0\u3002\u7136\u540e\u5c31\u5f88\u88f8\u4e86\u3002\n\n\u62ff\u4e00\u4e2a vector\uff0c$op_i$ \u8868\u793a\u5728\u7b2c $i$ \u5929\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\u3002\u5982\u679c\u6709\u4e00\u79cd\u7269\u54c1\u8981\u51fa\u73b0\uff0c\u5c31\u628a\u5b83\u7684\u6570\u91cf\u653e\u8fdb\u6765\uff1b\u53cd\u4e4b\uff0c\u628a\u5b83\u7684\u6570\u91cf\u7684\u76f8\u53cd\u6570\u653e\u8fdb\u6765\u3002\u6ce8\u610f\u662f\u5728 $r_i + 1$ \u7684\u4f4d\u7f6e\u653e\u5220\u9664\u6807\u8bb0\uff0c\u56e0\u4e3a\u7b2c $r_i$ \u5929\u8fd9\u4e2a\u7269\u54c1\u4ecd\u7136\u5b58\u5728\u3002\n\n\u5faa\u73af\u6a21\u62df\u6bcf\u4e00\u5929\u7684\u60c5\u51b5\uff0c\u7136\u540e\u6bcf\u4e00\u5929\u6c42\u524d $k$ \u5927\u7684\u548c\u5373\u53ef\u3002  \n\n```cpp\nil ll get()\n{\n\tll all = t[1].cnt; // \u6709\u7684\u7269\u54c1\u7684\u603b\u91cf\n\tif (all <= k) return query(1, 1, T, 1, T, 0); // \u5982\u679c\u603b\u91cf\u4e0d\u53ca k\uff0c\u5168\u90e8\u79df\u501f\n\tint k_0th = kth(1, 1, T, k); // \u8868\u793a\u7b2c k \u8d35\u7684\u4ee3\u4ef7\u3002\n\tll k1num = query(1, 1, T, 1, k_0th - 1, 1);\n\treturn query(1, 1, T, 1, k_0th - 1, 0) + (k - k1num) * k_0th;\n}\n```\n\n\u505a\u5b8c\u4e86\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\log n + n\\log n)$\u3002~~\u6211\u731c\u5e38\u6570\u6709\u4e2a 3\u3002~~\n\n[AC code \u8bb0\u5f55](https://www.luogu.com.cn/record/69805564)  \n\n```cpp\n#include <bits/stdc++.h>\n#define rep1(i, l, r) for (int i = l; i <= int(r); ++i)\n#define rep2(i, l, r) for (int i = l; i >= int(r); --i)\n#define ptc putchar\n#define il inline\n#define pb push_back\n#define fst first\n#define snd second\n#define ls(x) x << 1\n#define rs(x) x << 1 | 1\n#define ......\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef ......\nconst int MAXN = 1e6 + 10, inf = ~0U >> 2, INF = ~0U >> 1;\nnamespace stupid_lrc\n{\n\ttemplate <typename T>\n\til void read(T &x)\n\n    il int read()\n\n\ttemplate <typename T, typename ...L>\n\til void read(T &x, L &...y) {read(x); read(y...);}\n\n\ttemplate <typename T>\n\til void write(T x)\n\n\ttemplate <typename T>\n\til T my_max(const T &x, const T &y)\n}\nusing namespace stupid_lrc;\n// \u5947\u5999\u7f3a\u7701\u6e90\nint n, m, k; int T;\nvector <pii> op[MAXN]; ll ans;\n\nstruct setr\n{\n\tll cnt, sum;\n} t[MAXN << 2];\n\nil void pushup(int x)\n{\n\tt[x].cnt = t[ls(x)].cnt + t[rs(x)].cnt;\n\tt[x].sum = t[ls(x)].sum + t[rs(x)].sum;\n}\n\nil void upd(int x, int l, int r, int k, int num)\n{\n\tif (l > k || r < k) return;\n\tif (l == r && r == k) return t[x].cnt += num, t[x].sum = t[x].cnt * l, void();\n\tint mid = l + r >> 1;\n\tupd(ls(x), l, mid, k, num); upd(rs(x), mid + 1, r, k, num);\n\tpushup(x);\n}\n\nil ll query(int x, int l, int r, int ql, int qr, bool h)\n{\n\tif (l > qr || r < ql) return 0;\n\tif (l >= ql && r <= qr) return h ? t[x].cnt : t[x].sum;\n\tint mid = l + r >> 1;\n\treturn query(ls(x), l, mid, ql, qr, h) + query(rs(x), mid + 1, r, ql, qr, h);\n}\n\nil int kth(int x, int l, int r, int k)\n{\n\tif (l == r) return l;\n\tint mid = l + r >> 1;\n\tif (k <= t[ls(x)].cnt) return kth(ls(x), l, mid, k);\n\treturn kth(rs(x), mid + 1, r, k - t[ls(x)].cnt);\n}\n\nil ll get()\n{\n\tll all = t[1].cnt;\n\tif (all <= k) return query(1, 1, T, 1, T, 0);\n\tint k_0th = kth(1, 1, T, k);\n\tll k1num = query(1, 1, T, 1, k_0th - 1, 1);\n\treturn query(1, 1, T, 1, k_0th - 1, 0) + (k - k1num) * k_0th;\n}\n\nint main()\n{\n\tread(n, k, m);\n\trep1(i, 1, m)\n\t{\n\t\tint l, r, c, p; read(l, r, c, p); T = my_max(T, p);\n\t\top[l].pb(mp(c, p)); op[r + 1].pb(mp(-c, p));\n\t}\n\trep1(i, 1, n)\n\t{\n\t\tfor (auto p : op[i]) upd(1, 1, T, p.snd, p.fst);\n\t\tans += get();\n\t}\n\twrite(ans); rout;\n}\n```",
        "postTime": 1645438420,
        "uid": 409236,
        "name": "StayAlone",
        "ccfLevel": 6,
        "title": "CF1070C Cloud Computing C++\u9898\u89e3"
    },
    {
        "content": "\u9898\u610f\uff1a\u4e00\u4e2a\u65f6\u95f4\u8f74\uff0c\u5728 $[l_i,r_i]$ \u65f6\u523b\u4f1a\u51fa\u73b0 $c_i$ \u4e2a\u4ef7\u503c\u4e3a $p_i$ \u7684\u7269\u54c1\uff0c\u6c42\u6bcf\u4e2a\u65f6\u523b\u51fa\u73b0\u7684\u7269\u54c1\u4ef7\u503c\u524d $k$ \u5c0f\uff08\u4e0d\u8db3 $k$ \u4e2a\u5219\u5269\u4f59\u8865 $0$\uff09\u4e4b\u548c\u3002\n\n\u8003\u8651 $l_i=r_i=1$ \u600e\u4e48\u505a\uff0c\u90a3\u4e48\u6709\u663e\u7136\u7684\u8d2a\u5fc3\uff1a\u76f4\u63a5\u4ece\u5c0f\u5230\u5927\u53d6\u5373\u53ef\u3002\n\n\u4f46\u662f\u73b0\u5728\u7269\u54c1\u662f\u52a8\u6001\u7684\uff0c\u4e8e\u662f\u8003\u8651\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7269\u54c1\u3002\n\n\u4e3a\u4e86\u5951\u5408\u4e0a\u9762\u7684\u8d2a\u5fc3\uff0c\u6211\u4eec\u4f7f\u7528\u4ee5\u7269\u54c1\u4ef7\u503c\u4e3a\u4e0b\u6807\u7684\u6811\u72b6\u6570\u7ec4\u6765\u7ef4\u62a4\u8fd9\u4e00\u8fc7\u7a0b\u3002\u626b\u63cf\u7ebf\u626b\u63cf\u65f6\u95f4\uff0c\u90a3\u4e48\u6bcf\u4e2a\u7269\u54c1\u7b49\u4ef7\u4e8e\u4e00\u6b21\u63d2\u5165\uff0c\u4e00\u6b21\u5220\u9664\u64cd\u4f5c\u3002\u7136\u540e\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6bcf\u79cd\u4ef7\u503c\u7684\u7269\u54c1\u4e2a\u6570\u3002\u7531\u4e8e\u6211\u4eec\u8981\u5bf9\u6bcf\u4e2a\u65f6\u95f4\u5feb\u901f\u8ba1\u7b97\u7b54\u6848\uff0c\u6211\u4eec\u4e0d\u80fd\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u4ef7\u503c\u3002\u4f46\u7531\u4e8e\u6211\u4eec\u9009\u62e9\u7684\u7269\u54c1\u4ef7\u503c\u662f\u4e0d\u964d\u7684\uff0c\u4e14\u53ea\u6709\u6700\u5927\u7684\u6743\u503c\u6709\u53ef\u80fd\u4e0d\u5168\u9009\u4e2d\uff0c\u4e8e\u662f\u53ef\u4ee5\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u500d\u589e\uff08\u4e0d\u4f1a\u6811\u72b6\u6570\u7ec4\u500d\u589e\u8bf7\u5de6\u8f6c 2020 \u8054\u5408\u7701\u9009 \u51b0\u706b\u6218\u58eb\uff0c\u8fd9\u4e2a trick \u5e94\u8be5\u5f88\u666e\u53ca\u4e86\uff09\uff0c\u627e\u5230\u5168\u9009\u7684\u90e8\u5206\u7684\u6743\u503c\u6700\u5927\u503c\uff0c\u7136\u540e\u6bd4\u6700\u5927\u503c\u5c0f\u7684\u524d\u7f00\u4e00\u5b9a\u90fd\u9009\uff0c\u76f4\u63a5\u8ba1\u7b97\u8d21\u732e\u3002\n\n\u7b97\u5b8c\u5168\u9009\u7684\u90e8\u5206\uff0c\u540e\u9762\u53ef\u80fd\u5269\u4e00\u70b9\u8fb9\u89d2\u6599\u8fd8\u6ca1\u7b97\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u627e\u5230\u6bd4\u6700\u5927\u503c\u5927\u7684\u4e0b\u4e00\u4e2a\u7269\u54c1\u6570\u91cf\u4e0d\u4e3a $0$ \u7684\u4ef7\u503c\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u90e8\u5206\u8d21\u732e\u3002\u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u76f4\u63a5\u7528\u4e00\u4e2a set \u6765\u7ef4\u62a4\u6240\u6709\u6709\u7269\u54c1\u7684\u4f4d\u7f6e\u3002\n\n\u603b\u590d\u6742\u5ea6 $O((n+m)\\log v)$\u3002\n\n```cpp\n//noip rp++!\n#include<iostream>\n#include<cstdio>\n#include<set>\n#include<algorithm>\nusing namespace std;\n#define int long long\nstruct element\n{\n    int opt,t,c,p;\n    bool operator <(const element &other) const\n    {\n        return t<other.t;\n    }\n}a[200001<<1];\nint n,k,m,cnt[1000001],val[1000001],ans,maxn;\nset<int> s;\ninline int read()\n{\n    int x=0;\n    char c=getchar();\n    while(c<'0'||c>'9')\n        c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=(x<<1)+(x<<3)+(c^48);\n        c=getchar();\n    }\n    return x;\n}\ninline int lowbit(int x)\n{\n    return x&-x;\n}\ninline void update(int x,int val1,int val2)\n{\n    for(;x<=maxn;x+=lowbit(x))\n    {\n        cnt[x]+=val1;\n        val[x]+=val2;\n    }\n}\ninline int query1(int x)\n{\n    int res=0;\n    for(;x;x-=lowbit(x))\n        res+=cnt[x];\n    return res;\n}\ninline int query2(int x)\n{\n    int res=0;\n    for(;x;x-=lowbit(x))\n        res+=val[x];\n    return res;\n}\nsigned main()\n{\n    n=read(),k=read(),m=read();\n    for(int i=1;i<=m;++i)\n    {\n        int l=read(),r=read(),c=read(),p=read();\n        maxn=max(maxn,p);\n        a[(i<<1)-1]={1,l,c,p};\n        a[i<<1]={-1,r+1,c,p};\n    }\n    m<<=1;\n    sort(a+1,a+m+1);\n    int p=1;\n    for(int i=1;i<=n;++i)\n    {\n        while(p<=m&&a[p].t<=i)\n        {\n            update(a[p].p,a[p].c*a[p].opt,a[p].p*a[p].c*a[p].opt);\n            if(query1(a[p].p)-query1(a[p].p-1))\n                s.insert(a[p].p);\n            else\n                if(s.find(a[p].p)!=s.end())\n                    s.erase(s.find(a[p].p));\n            ++p;\n        }\n        if(query1(maxn)<=k)\n        {\n            ans+=query2(maxn);\n            continue;\n        }\n        int pos=0,tmp=0,val=0,v=0;\n        for(int j=20;~j;--j)\n        {\n            tmp=pos|(1<<j);\n            if(tmp>maxn)\n                continue;\n            v=val+cnt[tmp];\n            if(v>k)\n                continue;\n            val=v;\n            pos=tmp;\n        }\n        ans+=query2(pos);\n        if(val==k)\n            continue;\n        int num=*s.upper_bound(pos);\n        ans+=num*(k-val);\n    }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1637246957,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "CF1070C Cloud Computing \u9898\u89e3"
    },
    {
        "content": "\u4e00\u5f00\u59cb\u5f88\u61f5\u903c\u3002\u3002\u3002\u540e\u6765\u60f3\u4e86\u60f3\u8fd9\u4e0d\u5c31\u662f\u79bb\u6563\u5316+\u6743\u503c\u7ebf\u6bb5\u6811\u5417\uff1f\u8c03\u4e86\u4e00\u4f1a\u513f\u5c31AC\u4e86\u3002\n\n\u9996\u5148\uff0c\u5904\u7406\u8bfb\u5165\u3002\u6ce8\u610f\u5230\u5bf9\u4e8e\u4e00\u4e2a\u8ba1\u5212\uff0c\u6709\u5f00\u59cb\u65f6\u95f4\u548c\u7ed3\u675f\u65f6\u95f4\uff0c\u53ef\u4ee5\u5f00\u4e00\u4e2a$\\text{struct}$\u5904\u7406\u3002\n\n\u5bf9\u6bcf\u4e00\u4e2a$\\text{Plan}$\uff0c\u53ef\u4ee5\u8bb0\u5f55\u5b83\u7684(\u5f00\u59cb/\u7ed3\u675f)\u65f6\u95f4\uff0c\u518d\u8bb0\u5f55\u6bcf\u5929\u6700\u591a\u53ef\u79df\u4e2a\u6570\u5373$\\ c\\ $(\u7ed3\u675f\u5c31\u628a\u4e2a\u6570\u8bb0\u6210\u8d1f\u6570)\uff0c\u4ee5\u53ca\u6bcf\u4e00\u4e2a\u7684\u79df\u91d1$\\ p\\ $\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$\\ \\text{Plan}\\ $\u53d8\u5316(\u5f00\u59cb\u6216\u7ed3\u675f) \u6309\u65f6\u95f4\u6392\u5e8f\u4e00\u4e0b\uff0c\u5c31\u662f\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539\u88f8\u9898\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>//Could Computing \n#define LL long long\nusing namespace std;\ninline LL read(){\n\tchar c=getchar();while(c>'9'||c<'0')c=getchar();\n\tLL ans=0;for(;c<='9'&&c>='0';c=getchar())ans=ans*10+c-'0';return ans;\n}\nint n,m;\nLL k,ans,tt,Pmax;\nstruct Plan{ int t;LL c,p; }p[400010];\ninline bool tdn(Plan x,Plan y){ return x.t<y.t; }\nstruct Reply{ \n\tint h=0;//\u8868\u793a\u8981\u5c06\u4ef7\u683c\u5728[1,h]\u95f4\u7684\u90fd\u79df\u8d70 \n\tLL ex=0;//\u8868\u793a\u9664\u4e86\u4e0a\u8ff0\u7684\u8fd8\u8981\u79df\u8d70\u591a\u5c11\u94b1\u7684 CPU \n};\nstruct Node{//\u6309p\u5f00\u6743\u503c\u7ebf\u6bb5\u6811 \n\tLL cnt=0,wgh=0;//\u4e2a\u6570\u548c\u603b\u4ef7\u94b1 \n}node[4000010];\n\ninline void push_up(int t){\n\tnode[t].cnt=node[t<<1].cnt+node[t<<1|1].cnt;\n\tnode[t].wgh=node[t<<1].wgh+node[t<<1|1].wgh;\n}\n\nvoid update(int t,int l,int r,int x){//\u5355\u70b9\u4fee\u6539 \n\tif(l==p[x].p&&r==p[x].p){\n\t\tnode[t].cnt+=p[x].c;\n\t\tnode[t].wgh+=p[x].c*p[x].p;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(p[x].p<=mid) update(t<<1,l,mid,x);\n\telse update(t<<1|1,mid+1,r,x);\n\tpush_up(t);\n}\n\nReply query(int t,int l,int r,LL num){\n\tif(l==r){\n\t\tReply ans;\n\t\tif(num==node[t].cnt) ans.h=l;\n\t\telse ans.h=l-1,ans.ex=l*num;\n\t\treturn ans;\n\t}\n\tif(node[t].cnt==num){ Reply ans;ans.h=r;return ans;}//\u636e\u8bf4\u8fd9\u6837\u53ef\u4ee5\u7701\u4e00\u70b9\u65f6\u95f4\u800c\u4e14\u7b54\u6848\u4e0d\u4f1a\u53d7\u5f71\u54cd\n\tint mid=(l+r)>>1;\n\tif(node[t<<1].cnt>=num) return query(t<<1,l,mid,num);\n\treturn query(t<<1|1,mid+1,r,num-node[t<<1].cnt);//\u6807\u51c6\u7684 \u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206 \u64cd\u4f5c \n}\nLL sum_query(int t,int l,int r,int L,int R){\n\t/*\u67e5\u4e00\u4e0b\u533a\u95f4\u548c(\u5176\u5b9e\u8fd9\u4e2a\u53ef\u4ee5\u548cquery\u4e00\u8d77\u5199\u7684),\u4f46\u662f\u6211\u592a\u83dc\u4e86,\u6015\u5199\u70b8*/\n\tif(L<=l&&r<=R) return node[t].wgh;\n\tint mid=(l+r)>>1;LL ans=0;\n\tif(L<=mid) ans+=sum_query(t<<1,l,mid,L,R);\n\tif(R>mid) ans+=sum_query(t<<1|1,mid+1,r,L,R);\n\treturn ans;\n}\n\nint main(){\n\tn=read(),k=read(),m=read();\n\tfor(int i=1;i<=m;i++){//\u521d\u59cb\u5316 \n\t\tp[(i<<1)-1].t=read(),p[i<<1].t=read()+1;\n\t\t/*\u8fd9\u91cc\u7531\u4e8e\u7ed9\u51fa\u7684\u662f[\u5f00\u59cb\u65f6\u95f4,\u7ed3\u675f\u65f6\u95f4),\u6240\u4ee5\u5bf9\u4e8e\u7ed3\u675f\u65f6\u95f4\u52a01\u4f7f\u65f6\u95f4\u53d8\u6210\u95ed\u533a\u95f4*/\n\t\tp[(i<<1)-1].c=read(),p[i<<1].c=-p[(i<<1)-1].c;//\u7ed3\u675f\u65f6\u4e2a\u6570c\u662f\u8d1f\u7684 \n\t\tp[(i<<1)-1].p=read(),p[i<<1].p=p[(i<<1)-1].p;\n\t\tif(p[i<<1].p>Pmax) Pmax=p[i<<1].p;\n\t}\n\tsort(p+1,p+(m<<1|1),tdn);//\u6392\u5e8f \n\tupdate(1,1,Pmax,1);\n\t/*\u7531\u4e8e\u7b2c\u4e00\u4e2aPlan\u5f00\u59cb\u524d\u6bcf\u5929\u90fd\u6ca1\u6709\u53ef\u4ee5\u79df\u7684,\u6ca1\u6709\u7b54\u6848\u8d21\u732e,\u6240\u4ee5\u76f4\u63a5\u5c06\u7b2c\u4e00\u4e2aPlan\u52a0\u5165\u7ebf\u6bb5\u6811 */\n\tfor(int i=2;i<=(m<<1);i++){\n\t\ttt=p[i].t-p[i-1].t;//\u6bcf\u4e00\u6bb5\u5206\u6bb5\u5904\u7406, \u76f8\u5f53\u4e8e\u79bb\u6563\u5316 \n\t\tif(node[1].cnt<=k) ans+=node[1].wgh*tt;//\u5982\u679c\u6240\u6709\u80fd\u79df\u7684\u90fd\u4e0d\u5230k\u4e2a,\u53ea\u80fd\u5168\u90e8\u4e70\u8d70\u4e86... \n\t\telse{\n\t\t\tReply u=query(1,1,Pmax,k);\n\t\t\tLL res=u.ex;\n\t\t\tif(u.h) res+=sum_query(1,1,Pmax,1,u.h);\n\t\t\tans+=res*tt;//\u5bf9\u4e8e\u8fd9tt\u5929\u90fd\u662f\u4e00\u6837\u7684,\u76f4\u63a5\u5c06\u6bcf\u4e00\u5929\u7684\u82b1\u8d39\u4e58\u4e0a\u5929\u6570\u5c31\u597d\u4e86 \n\t\t}\n\t\tupdate(1,1,Pmax,i);//\u4e0d\u8981\u5fd8\u4e86\u628a\u65b0\u7684Plan\u52a0\u5165 \n\t}\n\tprintf(\"%lld\",ans);\n}\n```\n",
        "postTime": 1548231036,
        "uid": 76107,
        "name": "\u661f\u00b7\u8f89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1070C \u3010Cloud Computing\u3011"
    }
]