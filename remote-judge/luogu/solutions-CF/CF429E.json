[
    {
        "content": "\uff08\u867d\u7136\u4e0d\u77e5\u9053\u53e6\u4e00\u7bc7\u9898\u89e3\u5728\u8bf4\u4ec0\u4e48\u4f46\u662f\u611f\u89c9\u5e94\u8be5\u548c\u8fd9\u4e2a\u672c\u8d28\u76f8\u540c\u2026\u2026\u5427\n\n\u54e6\u5148\u8bf4\u4e00\u4e0b\u6211\u6700\u5f00\u59cb\u7684\u5783\u573e\u505a\u6cd5\uff1a\u5148\u628a\u5750\u6807\u79bb\u6563\u5316\uff0c\u7136\u540e\u5bf9\u79bb\u6563\u5316\u4e4b\u540e\u7684\u4e00\u6bb5\u4f1a\u6709\u4e00\u4e2a\u8986\u76d6\u6b21\u6570$cnt$\uff0c\u90a3\u4e48\u8fd9\u4e00\u6bb5\u88ab\u8986\u76d6\u7684\u7ea2\u8272\uff08\u6216\u8005\u84dd\u8272\uff09\u6700\u591a\u4f1a\u6709$\\lceil\\frac {cnt}2\\rceil$\u4e2a\uff0c\u6700\u5c11\u6709$\\lfloor\\frac{cnt}2\\rfloor$\u4e2a\uff0c\u90a3\u4e48\u5c31\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u6709\u4e0a\u4e0b\u754c\u7f51\u7edc\u6d41\u7684\u6a21\u578b\uff0c$i$\u5411$i+1$\u8fde\u4e0a\u4e0b\u754c\u4e3a\u8fd9\u4e2a\u7684\u8fb9\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u533a\u95f4\u8ba9$r+1$\u5230$l$\u8fde1\u7684\u8fb9\uff0c\u7136\u540e\u5c31\u505a\u5b8c\u4e86\uff0c~~\u7136\u800c\u6211\u9ad8\u4f30\u4e86Dinic\u7684\u901f\u5ea6T\u7684\u98de\u8d77\u2026\u2026~~\n\n\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8f6c\u5316\u6a21\u578b\u5c31\u662f\u628a\u7ea2\u7684\u533a\u95f4\u770b\u505a-1\uff0c\u84dd\u7684\u533a\u95f4\u770b\u505a1\uff0c\u90a3\u4e48\u6bcf\u4e2a\u70b9\u5fc5\u987b\u8986\u76d6\u6210-1\uff0c1\u6216\u80050\uff0c\u5176\u5b9e\u4e0a\u9762\u90a3\u4e2a\u7f51\u7edc\u6d41\u7684\u5efa\u56fe\u5df2\u7ecf\u544a\u8bc9\u6211\u4eec\u5982\u679c\u4e00\u6bb5\u7684cnt\u4e3a\u5076\u6570\u90a3\u4e48\u4e00\u5b9a\u4f1a\u88ab\u8986\u76d6\u62100\uff0c\u5426\u5219\u4f1a\u662f1\u6216-1\uff0c\u8fd9\u6837\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5f80cnt\u4e3a\u5947\u6570\u7684\u6bb5\u91cc\u9762\u5f3a\u884c\u52a0\u4e00\u4e2a\u533a\u95f4\u8ba9\u4ed6\u5f3a\u884c\u53d1\u6325\u4f5c\u7528\u7136\u540e\u8fd9\u4e00\u6bb5\u4e5f\u4f1a\u662f0\uff0c\u90a3\u5c31\u597d\u529e\u4e86\uff0c\u6211\u8981\u7ed9\u6bcf\u4e2a\u533a\u95f4\u786e\u5b9a\u4e00\u4e2a\u989c\u8272\u4f7f\u5f97\u8986\u76d6\u5728\u6bcf\u4e2a\u70b9\u7684\u7ea2\u8272=\u84dd\u8272\uff0c\u8fd9\u662f\u5565\u5462\uff1f\u6211\u4eec\u628a\u79bb\u6563\u5316\u540e\u7684\u5750\u6807\u770b\u505a\u5173\u952e\u70b9\uff0c\u4e0d\u59a8\u5c31\u8ba9\u4ed6\u8868\u793a\u8fd9\u4e2a\u8fde\u7eed\u6bb5\uff0c\u90a3\u4e48**\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u4ecel\u5411r\u8fde\u4e00\u6761\u65e0\u5411\u8fb9\uff0c\u8981\u505a\u7684\u5c31\u76f8\u5f53\u4e8e\u7ed9\u8fb9\u5b9a\u5411\u8ba9\u5165\u5ea6\u7b49\u4e8e\u51fa\u5ea6**\uff0c\u8fd9\u4e0d\u6b27\u62c9\u56de\u8def\uff1f\u5e76\u4e14\u7531\u4e8e\u6bcf\u4e2a\u6bb5\u7684cnt\u6211\u4eec\u90fd\u7ed9\u4ed6\u5f3a\u884c\u8bbe\u4e3a\u4e86\u5076\u7684\u6240\u4ee5\u4e00\u5b9a\u662f\u6709\u89e3\u7684\uff0c\u6700\u7ec8\u6211\u4eec\u770b\u8fd9\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684\u8fb9\u5b9a\u7684\u5411\u662f\u4ece\u54ea\u6307\u5230\u54ea\u5c31\u80fd\u786e\u5b9a\u989c\u8272\u4e86\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nnamespace ywy {\n\tinline int get() {\n\t    int n = 0;\n\t    char c;\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            break;\n\t        if (c == '-')\n\t            goto s;\n\t    }\n\t    n = c - '0';\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 + c - '0';\n\t        else\n\t            return (n);\n\t    }\n\ts:\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 - c + '0';\n\t        else\n\t            return (n);\n\t    }\n\t}\n\ttypedef struct _b {\n\t    int dest;\n\t    int nxt;\n\t    int id;\n\t    unsigned char gg;\n\t} bian;\n\tbian memchi[1000001];\n\tint gn = 2, heads[222222];\n\tinline void add(int s, int t, int id) {\n\t    memchi[gn].dest = t;\n\t    memchi[gn].id = id;\n\t    memchi[gn].nxt = heads[s];\n\t    heads[s] = gn;\n\t    gn++;\n\t}\n\tint dss[333333], dts[333333];\n\tunsigned char bv[333333];\n\tvoid dfs(int pt) {\n\t    bv[pt] = 1;\n\t    for (register int i = heads[pt]; i; heads[pt] = i = memchi[i].nxt) {\n\t        if (memchi[i].gg)\n\t            continue;\n\t        dss[memchi[i].id] = pt;\n\t        dts[memchi[i].id] = memchi[i].dest;\n\t        memchi[i].gg = memchi[i ^ 1].gg = 1;\n\t        dfs(memchi[i].dest);\n\t    }\n\t}\n\tint lsh[222222];\n\tint ls[100001], rs[100001], adds[222222], dels[222222], cnt[222222];\n\tvoid ywymain() {\n\t    int n = get();\n\t    int ptr = 1;\n\t    for (register int i = 1; i <= n; i++) {\n\t        ls[i] = lsh[ptr] = get();\n\t        ptr++;\n\t        rs[i] = lsh[ptr] = get() + 1;\n\t        ptr++;\n\t    }\n\t    ptr--;\n\t    sort(lsh + 1, lsh + 1 + ptr);\n\t    int newl = unique(lsh + 1, lsh + 1 + ptr) - lsh - 1;\n\t    for (register int i = 1; i <= n; i++) {\n\t        ls[i] = lower_bound(lsh + 1, lsh + 1 + newl, ls[i]) - lsh;\n\t        rs[i] = lower_bound(lsh + 1, lsh + 1 + newl, rs[i]) - lsh;\n\t        add(ls[i], rs[i], i);\n\t        add(rs[i], ls[i], i);\n\t        adds[ls[i]]++;\n\t        dels[rs[i]]++;\n\t    }\n\t    for (register int i = 1; i <= newl; i++) {\n\t        cnt[i] = cnt[i - 1] + adds[i] - dels[i];\n\t        if (cnt[i] & 1) {\n\t            add(i, i + 1, n + 1);\n\t            add(i + 1, i, n + 1);\n\t        }\n\t    }\n\t    for (register int i = 1; i <= newl; i++) {\n\t        if (bv[i])\n\t            continue;\n\t        dfs(i);\n\t    }\n\t    for (register int i = 1; i <= n; i++) {\n\t        if (dss[i] > dts[i])\n\t            printf(\"1 \");\n\t        else\n\t            printf(\"0 \");\n\t    }\n\t}\n}\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1553091407,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF429E \u3010Points and Segments\u3011"
    },
    {
        "content": "\u9996\u5148\u8fd9\u4e2a\u9650\u5236\u4ed6\u6709\u5355\u70b9\u6709\u7ebf\u6bb5\uff0c\u4e0d\u662f\u5f88\u6574\uff0c\u901a\u8fc7\u8f7b\u5fae\u8c03\u6574\uff0c\u628a\u5355\u70b9\u8c03\u6574\u4e3a\u4e00\u4e2a\u533a\u95f4\uff0c\u6362\u4e2a\u8bf4\u6cd5\u5c31\u662f\u628a\u7aef\u70b9\u5f3a\u884c\u5b9a\u4e49\u4e00\u4e2a\u504f\u5e8f\u4f7f\u5f97\u548c\u539f\u9898\u9650\u5236\u4e0d\u53d8\uff0c\u5373\u5982\u679c\u4f4d\u7f6e\u76f8\u540c\uff0c\u94a6\u5b9a\u5de6\u7aef\u70b9\u5c0f\u4e8e\u53f3\u7aef\u70b9\u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6574\u6761\u76f4\u7ebf\u88ab\u5212\u5206\u4e3a\u4e86$2n+1$\u6bb5\u533a\u95f4\uff0c\u6bcf\u6bb5\u533a\u95f4\u53d7\u4e00\u4e9b\u9650\u5236\u3002\u53d1\u73b0\u8fd9\u4e9b\u533a\u95f4\u4f9d\u6b21\u5411\u53f3\uff0c\u53d7\u5f71\u54cd\u7684\u7ebf\u6bb5\u53ea\u591a/\u5c11\u4e86\u4e00\u4e2a\u3002\u90a3\u4e48\u5c31\u662f\u6bcf\u6bb5\u533a\u95f4\u53d7\u5f71\u54cd\u7684\u7ebf\u6bb5\u4e2a\u6570\u5206\u522b\u4e3a\u5947\u6570\uff0c\u5076\u6570\uff0c\u5947\u6570\uff0c\u5076\u6570\u3002\u90a3\u4e48\u5bf9\u5076\u6570\u7684\u9650\u5236\u5373\u4e3a\u7ea2\u8272\u548c\u84dd\u8272\u4e2a\u6570\u5fc5\u987b\u76f8\u7b49\uff0c\u5bf9\u5947\u6570\u53ef\u4ee5\u76f4\u63a5\u4e0d\u8003\u8651\uff0c\u56e0\u4e3a\u76f8\u90bb\u7684\u4e24\u4e2a\u5076\u6570\u9650\u5236\u533a\u95f4\u90fd\u7b26\u5408\u9898\u610f\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5947\u6570\u533a\u95f4\u4e00\u5b9a\u7b26\u5408\u7ea2\u8272\u548c\u84dd\u8272\u5dee\u4e0d\u8d85\u8fc7$1$\u3002\u8fd9\u6b65\u662f\u771f\u7684\u795esto sjw orz\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u8003\u8651\u6bcf\u6b21\u53d8\u5316\u7684\u4e24\u4e2a\u7ebf\u6bb5\uff0c\u5982\u679c\u4e00\u4e2a\u662f\u5de6\u7aef\u70b9\u4e00\u4e2a\u662f\u53f3\u7aef\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e24\u6761\u7ebf\u6bb5\u7684\u989c\u8272\u5fc5\u987b\u4e00\u6837\uff0c\u5426\u5219\u5fc5\u987b\u4e0d\u4e00\u6837\u3002\u6309\u7167\u5982\u6b64\u9650\u5236\u8dd1\u4e2a2-sat\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u6392\u5e8f\u7684$O(n\\log n)$\u3002\n\n\u63a5\u4e0b\u6765\u8bc1\u660e\u8fd9\u4e2a\u65b9\u7a0b\u7ec4\u4e00\u5b9a\u6709\u89e3\u3002\u6bcf\u4e2a\u672a\u77e5\u6570$x_i$\u5728\u8fd9\u4e2a\u65b9\u7a0b\u7ec4\u91cc\u53ea\u4f1a\u51fa\u73b0$2$\u6b21\u3002\u90a3\u4e48\u628a\u6bcf\u4e2a\u65b9\u7a0b\u91cc\u7684\u4e24\u4e2a\u672a\u77e5\u6570\u8fde\u8fb9\u7684\u8bdd\u4e00\u5b9a\u662f\u4e00\u5806\u73af\u7684\u5f62\u5f0f\u3002\u8003\u8651\u628a\u6bcf\u4e2a\u73af\u7684\u8fd9\u4e9b\u65b9\u7a0b\u52a0\u8d77\u6765\uff0c\u4f60\u4f1a\u5f97\u5230$0=0$\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e9b\u65b9\u7a0b\u91cc\u9762\u6709\u4e00\u4e2a\u662f\u591a\u4f59\u7684\u3002\u628a\u968f\u4fbf\u4e00\u4e2a\u53bb\u6389\uff0c\u7ed9\u4e86\u4e00\u4e2a\u9650\u5236\uff0c\u5269\u4e0b\u7684\u662f\u4e00\u6761\u94fe\uff0c\u6309\u7740\u62d3\u6251\u5e8f\u6784\u9020\u4e00\u5b9a\u53ef\u4ee5\u6784\u9020\u51fa\u89e3\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<vector>\n#include<stack>\nusing namespace std;\ntypedef long long ll;\n#define N 200002\nstruct node{int x,id,op;}a[N];\nstruct edge{int to,nxxt;}e[N<<3];\nint n,tot,js,head[N<<2],cnt=2,dfn[N],low[N],f[N],cn,an;\nbool inq[N];\nstack<int>s;\ninline void ins(int u,int v){e[cnt]=(edge){v,head[u]};head[u]=cnt++;}\ninline bool cmp(node n1,node n2)\n{\n\tif(n1.x^n2.x)return n1.x<n2.x;\n\telse return n1.op>n2.op;\n}\nvoid tarjan(int x)\n{dfn[x]=low[x]=++cn;inq[x]=1;s.push(x);\n\tfor(int i=head[x];i;i=e[i].nxxt)\n\t{int j=e[i].to;\n\t\tif(!dfn[j])tarjan(j),low[x]=min(low[x],low[j]);\n\t\telse if(inq[j])low[x]=min(low[x],dfn[j]);\n\t}\n\tif(dfn[x]==low[x])\n\t{an++;\n\t\twhile(!s.empty()&&s.top()!=x){inq[s.top()]=0;f[s.top()]=an;s.pop();}\n\t\tinq[x]=0;f[x]=an;s.pop();\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x,y;scanf(\"%d%d\",&x,&y);\n\t\ta[++tot]=(node){x,i,1};a[++tot]=(node){y,i,-1};\n\t}\n\tsort(a+1,a+1+tot,cmp);int su=0;\n\tfor(int i=2;i<=tot;i+=2)\n\t{\n\t\tif(a[i].op!=a[i-1].op)\n\t\t{\n\t\t\tins(a[i].id,a[i-1].id);ins(a[i-1].id,a[i].id);\n\t\t\tins(a[i].id+n,a[i-1].id+n);ins(a[i-1].id+n,a[i].id+n);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tins(a[i].id,a[i-1].id+n);ins(a[i].id+n,a[i-1].id);\n\t\t\tins(a[i-1].id,a[i].id+n);ins(a[i-1].id+n,a[i].id);\n\t\t}\n\t}\n\tfor(int i=1;i<=2*n;i++)if(!dfn[i])tarjan(i);\n\tfor(int i=1;i<=n;i++)printf(\"%d \",f[i]<f[i+n]);puts(\"\");\n}\n\n```\n",
        "postTime": 1614596509,
        "uid": 84564,
        "name": "LebronDurant",
        "ccfLevel": 9,
        "title": "CF429E Points and Segments"
    },
    {
        "content": "\u8fd9\u4e2a\u65b9\u6cd5\u6765\u81ea @realskc\u3002\u975e\u5e38\u611f\u8c22 Ta\u3002\u8fd9\u7bc7\u6587\u7ae0\u4ecb\u7ecd\u4e86\u4e00\u79cd\u4f7f\u7528\u9ed1\u767d\u67d3\u8272\u7684\u89e3\u51b3\u65b9\u6848\u3002\r\n\r\n\u672c\u9898\u6240\u5c5e\u6bd4\u8d5b\u4e8e $2014.5$ \u4e3e\u529e\uff0c\u5728 $\\tt codeforces$ \u4e0a\u8bc4\u5206 $3\\color{red} 000$\u3002\r\n\r\n\u6211\u4eec\u9996\u5148\u8003\u8651\u8fd9\u4e48\u4e00\u4e2a\u95ee\u9898\uff1a\u7ed9\u4f60 $n$ \u6761\u7ebf\u6bb5\uff0c\u5982\u4f55**\u5224\u65ad**\u662f\u5426\u6ee1\u8db3\u9898\u76ee\u7684\u9650\u5236\u6761\u4ef6\u3002\r\n\r\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5750\u6807\u4f4d\u7f6e $x$\uff0c\u5047\u8bbe\u6709 $s$ \u6761\u7ebf\u6bb5\u8986\u76d6\u4e86\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5fc5\u987b\u8981\u6709 $\\lfloor\\frac{s}{2}\\rfloor$ \u4e2a\u67d0\u4e00\u79cd\u989c\u8272\u7684\u7ebf\u6bb5\uff0c$s-\\lfloor\\frac{s}{2}\\rfloor$ \u4e2a\u53e6\u5916\u4e00\u79cd\u989c\u8272\u7684\u7ebf\u6bb5\u3002\r\n\r\n\u5bf9\u4e8e\u8fd9 $s$ \u6761\u7ebf\u6bb5\uff0c\u6211\u4eec\u628a\u5176\u4e2d $2\\times \\lfloor\\frac{s}{2}\\rfloor$ \u6761\u7ebf\u6bb5\u6784\u6210 $\\lfloor\\frac{s}{2}\\rfloor$ \u7ec4\u5339\u914d\uff0c\u53ea\u9700\u8981\u4fdd\u8bc1\u6bcf\u4e00\u7ec4\u5339\u914d\u91cc\u9762\u4e24\u6761\u7ebf\u6bb5\u989c\u8272\u4e0d\u540c\u5373\u53ef\u3002\r\n\r\n\u73b0\u5728\u8003\u8651\u5bf9\u4e8e\u6240\u6709\u4f4d\u7f6e $x$ \u7684\u95ee\u9898\uff1a\u8003\u8651\u5bf9\u4e8e\u6240\u6709\u4f4d\u7f6e $x$\uff0c\u52a8\u6001\u7ef4\u62a4\u8fd9\u4e2a\u5339\u914d\u5373\u53ef\u3002\r\n\r\n\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u56fe $G$\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u5b58\u5728\u8fc7\u7684\u7ebf\u6bb5 $i$ \u4e0e\u7ebf\u6bb5 $j$ \u7684\u5339\u914d\uff0c\u8fde\u63a5\u4e00\u6761 $(i,j)$ \u7684\u65e0\u5411\u8fb9\u3002\u6211\u4eec\u5bf9\u4e8e\u6211\u4eec $G$ \u8fdb\u884c**\u9ed1\u767d\u67d3\u8272**\uff0c\u628a\u56fe\u7684\u67d3\u8272\u7ed3\u679c\u505a\u4e3a\u7ebf\u6bb5\u67d3\u8272\u5373\u53ef\u3002\r\n\r\n\u5177\u4f53\u5982\u4f55\u52a8\u6001\u7ef4\u62a4\u8fd9\u4e00\u5339\u914d\uff0c\u6211\u4eec\u4ece\u5de6\u5411\u53f3\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5750\u6807\uff0c\u7136\u540e\u53ea\u9700\u8981\u8003\u8651\u6dfb\u52a0\u6216\u8005\u5220\u9664\u4e00\u6761\u7ebf\u6bb5\u5373\u53ef\u3002\u4e0b\u9762 $7$ \u6bb5\u4ecb\u7ecd\u4e86\u7ef4\u62a4\u6d41\u7a0b\uff0c\u7a0d\u663e\u7a0b\u5e8f\u5316\uff0c\u5e76\u4e14\u6bd4\u8f83\u7b80\u5355\u3002\u5982\u679c\u4e0d\u60f3\u770b\u4e5f\u53ef\u4ee5\u8003\u8651\u7565\u8fc7\u3002\r\n\r\n\u6211\u4eec\u8bb0\u5f55\u5f53\u524d\u6bcf\u4e00\u6761 $x$ \u5339\u914d\u7684\u7ebf\u6bb5 $mat_x$\u3002\u6211\u4eec\u53d1\u73b0\u5728\u8986\u76d6\u5f53\u524d\u4f4d\u7f6e\u7684\u6240\u6709\u7ebf\u6bb5\u4e2d\u6700\u591a\u6709\u4e00\u6761\u7ebf\u6bb5 $p$ \u6ca1\u6709\u88ab\u5339\u914d\u3002\u5982\u679c\u8fd9\u6837\u7684 $p$ \u4e0d\u5b58\u5728\uff0c\u90a3\u4e48 $p=0$\u3002\r\n\r\n+ \u5bf9\u4e8e\u52a0\u5165\u4e00\u6761\u7ebf\u6bb5 $x$\uff0c\u5982\u679c\u6b64\u65f6 $p=0$\uff0c\u90a3\u4e48\u5b83\u5c31\u6210\u4e3a\u4e86\u90a3\u4e00\u6761\u6ca1\u6709\u5339\u914d\u7684\u7ebf\u6bb5\uff0c\u4ee4 $p\\leftarrow x$ \u5373\u53ef\uff1b\u5982\u679c $p\\neq 0$\uff0c\u90a3\u4e48\u7b80\u5355\u7684\u4ee4 $x$ \u548c $p$ \u5339\u914d\u5373\u53ef\uff0c\u6ce8\u610f $p$ \u5df2\u7ecf\u88ab\u5339\u914d\u4e86\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4ee4 $p\\leftarrow 0$\u3002\r\n\r\n+ \u5bf9\u4e8e\u5220\u9664\u4e00\u6761\u7ebf\u6bb5 $x$\uff0c\u60c5\u51b5\u7a0d\u7a0d\u9ebb\u70e6\u4e00\u70b9\u3002\r\n\r\n\u5982\u679c\u6b64\u65f6 $p=x$\uff0c\u90a3\u4e48 $x$ \u6ca1\u6709\u88ab\u5339\u914d\u3002\u6b64\u65f6\u53ea\u9700\u8981\u4ee4 $p\\leftarrow 0$ \u5373\u53ef\u3002\r\n\r\n\u5426\u5219\uff0c$x$ \u539f\u5148\u4e0e $mat_x$ \u5339\u914d\u3002\u5220\u9664 $x$ \u4e4b\u540e\uff0c$mat_x$ \u5c31\u5931\u53bb\u4e86\u5339\u914d\u3002\u4ee5\u4e0b\u7684\u6d41\u7a0b\u548c\u91cd\u65b0\u52a0\u5165\u7ebf\u6bb5 $mat_x$ \u7c7b\u4f3c\u3002~~\u4e8e\u662f\u4ee5\u4e0b\u8fd9\u6bb5\u8bdd\u662f\u57fa\u672c\u4e0a\u662f\u590d\u5236\u4e0a\u9762\u7684\u3002~~\r\n\r\n\u5982\u679c\u6b64\u65f6 $p=0$\uff0c\u90a3\u4e48 $mat_x$ \u5c31\u6210\u4e3a\u4e86\u90a3\u4e00\u6761\u6ca1\u6709\u5339\u914d\u7684\u7ebf\u6bb5\uff0c\u4ee4 $p\\leftarrow x$ \u5373\u53ef\uff1b\u5982\u679c $p\\neq 0$\uff0c\u90a3\u4e48\u7b80\u5355\u7684\u4ee4 $mat_x$ \u548c $p$ \u5339\u914d\u5373\u53ef\uff0c\u6ce8\u610f $p$ \u5df2\u7ecf\u88ab\u5339\u914d\u4e86\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4ee4 $p\\leftarrow 0$\u3002\r\n\r\n\u6bcf\u6b21\u6211\u4eec\u5339\u914d\u4e24\u6761\u7ebf\u6bb5\u65f6\uff0c\u90fd\u8981\u5c06\u4e24\u6761\u7ebf\u6bb5\u8fde\u8fb9\u3002\u6ce8\u610f\u5220\u9664\u5339\u914d\u7684\u65f6\u5019\u4e0d\u8981\u5220\u9664\u539f\u5148\u8fde\u63a5\u7684\u8fb9\u3002\r\n\r\n\u5f53\u5904\u7406\u5b8c\u6240\u6709\u7684\u5750\u6807\u4ee5\u540e\uff0c\u6211\u4eec\u7684\u9650\u5236\u5df2\u7ecf\u5f88\u5b8c\u5907\u4e86\uff0c\u53ea\u9700\u8981\u5bf9\u6211\u4eec\u5efa\u7acb\u7684\u56fe\u8fdb\u884c\u4e8c\u5206\u56fe\u67d3\u8272\u5373\u53ef\u3002\r\n\r\n\u6211\u4eec\u6ce8\u610f\u5230\u6211\u4eec\u6ca1\u6709\u8ba8\u8bba\u65e0\u89e3\u7684\u60c5\u51b5\u3002\u5f88\u9057\u61be\uff0c\u7b14\u8005\u4e0d\u4f1a\uff0c\u53ea\u80fd\u5728\u8fd9\u91cc\u5199\u51fa\u7ed3\u8bba\uff1a\u4e0d\u4f1a\u6709\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\u6837\u4f8b\u4e5f\u6ca1\u6709\u65e0\u89e3\u7684\u60c5\u51b5\u3002\r\n\r\n\u4ee3\u7801\u5982\u4e0b\uff1a\u5171\u8ba1 $16$ \u4e2a\u6d4b\u8bd5\u70b9\uff0c\u603b\u5171\u7528\u65f6 $\\tt 3.21s$\uff0c\u5185\u5b58 $\\tt 28.46 MB$\u3002\u4ee3\u7801\u957f\u5ea6 $\\tt 1.60kb$\u3002\u5728\u6d1b\u8c37 $56$ \u53d1\u63d0\u4ea4\u4e2d\u6392\u540d\u7b2c $56$\u3002\r\n\r\n```cpp\r\n#include<cstdio>\r\n#include<vector>\r\n#include<algorithm>\r\n#include<assert.h>\r\n#include<map>\r\nstruct edge{int x,y;};\r\nedge f[100005];\r\nint n,mat[100005],col[100005],now=0;\r\nstd::vector<int> a[100005],add[200005],del[200005],vec;\r\nstd::map<int,int> mp;\r\nvoid addqwq(int x,int y){a[x].push_back(y);a[y].push_back(x);}\r\nvoid dfs(int v,int c)\r\n{\r\n\tcol[v]=c;\r\n\tfor (int i=0;i<(int)a[v].size();i++)\r\n\t{\r\n\t\tint u=a[v][i];\r\n\t\tif (col[u]!=-1) continue;\r\n\t\tdfs(u,1-c);\r\n\t}\r\n}\r\nint main()\r\n{\r\n\tscanf(\"%d\",&n);\r\n\tfor (int i=1;i<=n;i++)\r\n\t{\r\n\t\tscanf(\"%d%d\",&f[i].x,&f[i].y);\r\n\t\tif (!mp[f[i].x]) vec.push_back(f[i].x),mp[f[i].x]=1;\r\n\t\tif (!mp[f[i].y+1]) vec.push_back(f[i].y+1),mp[f[i].y+1]=1;\r\n\t}\r\n\tstd::sort(vec.begin(),vec.end());\r\n\tfor (int i=0;i<(int)vec.size();i++) mp[vec[i]]=i+1;\r\n\tfor (int i=1;i<=n;i++) f[i].x=mp[f[i].x],f[i].y=mp[f[i].y+1];\r\n\tfor (int i=1;i<=n;i++) add[f[i].x].push_back(i),del[f[i].y].push_back(i);\r\n\tfor (int i=0;i<(int)vec.size();i++) vec[i]=mp[vec[i]];\r\n\tfor (int i=1;i<=n;i++) col[i]=-1;\r\n\tfor (int i=0;i<(int)vec.size();i++)\r\n\t{\r\n\t\tint x=vec[i];\r\n\t\tfor (int d=0;d<(int)del[x].size();d++)\r\n\t\t{\r\n\t\t\tint id=del[x][d];\r\n\t\t\tint k=mat[id];\r\n\t\t\tmat[id]=0;\r\n\t\t\tif (now==id) now=0;\r\n\t\t\tif (!k) continue;\r\n\t\t\tif (now)\r\n\t\t\t{\r\n\t\t\t\tmat[now]=k,mat[k]=now;\r\n\t\t\t\taddqwq(k,now);\r\n\t\t\t\tnow=0;\r\n\t\t\t}\r\n\t\t\telse now=k,mat[now]=0;\r\n\t\t}\r\n\t\tfor (int d=0;d<(int)add[x].size();d++)\r\n\t\t{\r\n\t\t\tint id=add[x][d];\r\n\t\t\tif (now)\r\n\t\t\t{\r\n\t\t\t\tmat[now]=id,mat[id]=now;\r\n\t\t\t\taddqwq(id,now);\r\n\t\t\t\tnow=0;\r\n\t\t\t}\r\n\t\t\telse now=id;\r\n\t\t}\r\n\t}\r\n\tfor (int i=1;i<=n;i++) if (col[i]==-1) dfs(i,1);\r\n\tfor (int i=1;i<=n;i++) printf(\"%d \",col[i]);puts(\"\");\r\n\treturn 0;\r\n}\r\n```\r\n\r\n\u611f\u8c22\u60a8\u7684\u9605\u8bfb\u3002\u5e0c\u671b\u80fd\u5e2e\u52a9\u60a8\u3002",
        "postTime": 1663545781,
        "uid": 36957,
        "name": "RainFestival",
        "ccfLevel": 0,
        "title": "realskc"
    },
    {
        "content": "##### \u4f20\u9001\u95e8 \n[Codeforces 429E Points and Segments](https://codeforces.com/contest/429/problem/E)\n##### \u9898\u89e3\n===upd 2023.04.13===\n\n\u611f\u8c22\u8bc4\u8bba\u533a\uff0c\u6b27\u62c9\u56de\u8def\u7684\u505a\u6cd5\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u5750\u6807\u8f74\u4e0a\u76f8\u90bb\u4e24\u70b9\u4e4b\u95f4\u533a\u95f4\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u8282\u70b9\uff0c\u6b64\u65f6\u533a\u95f4 $[l,r]$ \u5efa\u56fe\u4e3a $l\\rightarrow (r,r+1)$\u3002\u6b64\u65f6\u8282\u70b9 $(r,r+1)$ \u4ec5\u53ef\u80fd\u4f5c\u4e3a\u67d0\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u7684\u5f00\u754c\u88ab\u8fde\u8fb9\uff0c\u8fd9\u4e2a\u6027\u8d28\u4f7f\u5f97\u5373\u4f7f\u51fa\u73b0\u4e0b\u8ff0\u7684**\u5f15\u5165\u4e0d\u5b58\u5728\u7684\u67d3\u8272\u533a\u95f4\u7684\u95ee\u9898**\uff0c\u7531\u4e8e\u975e\u6cd5\u533a\u95f4\u67d3\u8272\u662f\u4e24\u4e2a\u4e00\u7ec4\u8bbe\u7f6e\u4e3a\u5f02\u8272\uff0c\u6b64\u65f6\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u6837\u7684\u975e\u6cd5\u533a\u95f4\u5185\u4efb\u4e00\u70b9\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u3002\n\n===\u4ee5\u4e0b\u4e3a\u539f\u6587===\n\n>\u5148\u8d34\u4e00\u4e2a\u6700\u5f00\u59cb\u5199\u7684\uff0c\u540e\u6765\u89c9\u5f97\u6709\u8bef\u7684\u65b9\u6cd5\uff1a\u6b27\u62c9\u56de\u8def\u3002\n\n\u5bf9\u4e8e\u8fd9\u7c7b\u9ed1\u767d\u67d3\u8272\uff0c\u4e14\u5b58\u5728\u5dee\u503c\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 $1$ \u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u8003\u8651\u6b27\u62c9\u56de\u8def\u6c42\u89e3\u3002\u56e0\u4e3a\u6309\u7167\u6b27\u62c9\u56de\u8def\u5c06\u65e0\u5411\u56fe\u7684\u8fb9\u6307\u5b9a\u65b9\u5411\u540e\uff0c\u4efb\u610f\u70b9\u7684\u5165\u5ea6\u4e0e\u51fa\u5ea6\u76f8\u7b49\uff1b\u82e5\u56fe\u4e2d\u5b58\u5728\u5ea6\u6570\u4e3a\u5947\u7684\u70b9\uff0c\u8fd9\u6837\u7684\u70b9\u53ea\u6709\u5076\u6570\u4e2a\uff0c\u90a3\u4e48\u5c06\u5176\u4e24\u4e24\u4e00\u7ec4\u8fdb\u884c\u8fde\u8fb9\uff0c\u6c42\u89e3\u6b27\u62c9\u56de\u8def\u540e\u5220\u8fb9\uff0c\u6b64\u65f6\uff0c\u4efb\u610f\u70b9\u7684\u5165\u5ea6\u4e0e\u51fa\u5ea6\u5dee\u503c\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 $1$\u3002\n\n\u8003\u8651 X \u8f74\u4e0a\u4efb\u610f\u70b9\uff0c\u5408\u6cd5\u7684\u67d3\u8272\u65b9\u6848\u9700\u8981\u6ee1\u8db3\uff0c\u8986\u76d6\u5b83\u7684\u533a\u95f4\u4e2d\uff0c\u84dd\u8272\u4e0e\u7ea2\u8272\u7684\u6570\u91cf\u5dee\u4e0d\u8d85\u8fc7 $1$\u3002\u5c06\u533a\u95f4\u770b\u4f5c\u8fb9\uff0c\u5176\u67d3\u8272\u770b\u4f5c\u5bf9\u8fb9\u7684\u5b9a\u5411\uff08\u5411\u5de6\u6216\u53f3\uff09\uff0c\u6839\u636e\u6b27\u62c9\u56de\u8def\u7684\u6027\u8d28\uff0cX \u8f74\u4e0a\u4efb\u4e00\u70b9\u4e0a\uff0c\u5411\u5de6\u4e0e\u5411\u53f3\u7684\u8fb9\u6570\u91cf\u76f8\u7b49\u3002\u4e3a\u4e86\u5904\u7406\u533a\u95f4\u7684\u8fb9\u754c\u60c5\u51b5\uff08\u5373\u4fdd\u8bc1\u533a\u95f4\u62fc\u63a5\u8d77\u6765\uff0c\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u5927\u533a\u95f4\uff09\uff0c\u5c06\u5176\u8868\u793a\u4e3a\u5de6\u95ed\u53f3\u5f00 $[l,r+1)$\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4 $l\\rightarrow r+1$ \u8fde\u4e00\u6761\u8fb9\u3002\u5bf9\u4e8e\u5947\u6570\u5ea6\u7684\u70b9\uff0c\u6309\u7167 X \u8f74\u987a\u5e8f\u4e24\u4e24\u4e00\u7ec4\u8fde\u8fb9\uff1b\u56e0\u4e3a\u82e5\u9700\u8981\u5220\u9664\u7684\u8fb9\u51fa\u73b0\u8986\u76d6\uff0c\u7edd\u5bf9\u5dee\u503c\u53ef\u80fd\u5927\u4e8e $1$\u3002\n\n\u5efa\u56fe\u540e\u6c42\u89e3\u6b27\u62c9\u56de\u8def\u5373\u53ef\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\uff0c\u74f6\u9888\u5728\u79bb\u6563\u5316\u4e0a\u3002\n\n\u4e0a\u8ff0\u7b97\u6cd5\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u539f\u59cb\u7684\u533a\u95f4\u662f\u5de6\u95ed\u53f3\u95ed\uff0c\u800c\u4e3a\u4e86\u6ee1\u8db3\u533a\u95f4\u5de6\u95ed\u53f3\u5f00\u7684\u6027\u8d28\uff0c\u5c06 $[l,r]$ \u8868\u793a\u4e3a $[l,r+1)$\u3002\u6b64\u65f6 $(r,r+1)$ \u5e94\u8be5\u4e0e $[l,r]$ \u903b\u8f91\u4e00\u81f4\uff0c\u5373\u8868\u793a\u67d0\u4e00\u79cd\u533a\u95f4\u7684\u67d3\u8272\u65b9\u6848\uff0c\u4f46\u5b9e\u9645\u4e0a $(r,r+1)$ \u5e76\u6ca1\u6709\u533a\u95f4\u8986\u76d6\u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u5728 $(r,r+1)$ \u4e2d\u53ef\u80fd\u51fa\u73b0\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u3002\u4e0b\u9762\u7684\u6837\u4f8b\uff0c\u5b58\u5728\u4e00\u79cd\u6b27\u62c9\u56de\u8def\u7684\u6784\u9020\uff0c\u4f7f\u4e4b\u5728 $(3,4)$ \u533a\u95f4\u5185\u7684\u4efb\u4e00\u70b9\u90fd\u4e0d\u6ee1\u8db3\u6761\u4ef6\u3002\n\n```cpp\n/*\n7\n4 6\n4 5\n1 3\n2 3\n1 1\n1 5\n1 6\n*/\n```\n\n\n**\u6545\u4e0a\u8ff0\u6b27\u62c9\u56de\u8def\u7684\u505a\u6cd5\uff0c\u4ec5\u5728\u4e0b\u8ff0\u7ea6\u675f\u4e0b\u6b63\u786e\uff1a\u539f\u59cb\u533a\u95f4\u4e3a\u5de6\u95ed\u53f3\u5f00\uff1b\u6216\u53ea\u8981\u6c42\u5728\u6574\u6570\u70b9\u4e0a\u6ee1\u8db3\u6761\u4ef6\u3002**\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstruct edge\n{\n    int to, rev, id;\n    bool used;\n};\n\nint main()\n{\n    ios::sync_with_stdio(0), cin.tie(0);\n    int N;\n    cin >> N;\n    vector<pair<int, int>> seg(N);\n    vector<int> xs;\n    for (int i = 0; i < N; ++i)\n    {\n        cin >> seg[i].first >> seg[i].second;\n        ++seg[i].second;\n        xs.push_back(seg[i].first);\n        xs.push_back(seg[i].second);\n    }\n    sort(xs.begin(), xs.end());\n    xs.erase(unique(xs.begin(), xs.end()), xs.end());\n    for (auto &p : seg)\n    {\n        p.first = lower_bound(xs.begin(), xs.end(), p.first) - xs.begin();\n        p.second = lower_bound(xs.begin(), xs.end(), p.second) - xs.begin();\n    }\n\n    int V = xs.size();\n    vector<vector<edge>> G(V);\n    vector<int> deg(V);\n    for (int i = 0; i < N; ++i)\n    {\n        int u = seg[i].first, v = seg[i].second;\n        G[u].push_back({v, (int)G[v].size(), i, 0});\n        G[v].push_back({u, (int)G[u].size() - 1, i, 0});\n        ++deg[u], ++deg[v];\n    }\n    vector<int> odd;\n    for (int v = 0; v < V; ++v)\n    {\n        if (deg[v] & 1)\n            odd.push_back(v);\n    }\n    assert(((int)odd.size() & 1) == 0);\n    for (int i = 0; i < (int)odd.size(); i += 2)\n    {\n        int u = odd[i], v = odd[i + 1];\n        G[u].push_back({v, (int)G[v].size(), -1, 0});\n        G[v].push_back({u, (int)G[u].size() - 1, -1, 0});\n    }\n    vector<int> res(N);\n    vector<int> iter(V);\n    function<void(int)> euler_path = [&](int v)\n    {\n        int n = G[v].size();\n        for (int &i = iter[v]; i < n; ++i)\n        {\n            while (i < n && G[v][i].used)\n                ++i;\n            if (i == n)\n                break;\n            auto &e = G[v][i];\n            if (e.id != -1)\n                res[e.id] = e.to > v ? 1 : -1;\n            e.used = G[e.to][e.rev].used = 1;\n            euler_path(e.to);\n        }\n    };\n\n    for (int v = 0; v < V; ++v)\n        if (iter[v] == 0)\n            euler_path(v);\n\n    for (int i = 0; i < N; ++i)\n        cout << max(0, res[i]) << \" \\n\"[i + 1 == N];\n    return 0;\n}\n```\n>\u5982\u4e0b\u662f\u4e2a\u4eba\u8ba4\u4e3a\u7684\u6b63\u89e3\uff1a2-SAT\n\n\u4e3a\u4e86\u907f\u514d\u6b67\u4e49\uff0c\u9898\u4e2d\u7684 $[l,r]$ \u533a\u95f4\uff0c\u4e0b\u9762\u79f0\u4e4b\u4e3a\u7ebf\u6bb5\u3002\n\n\u7c7b\u4f3c\u4e8e\u626b\u63cf\u7ebf\u7684\u601d\u60f3\uff0c\u5c06\u7ebf\u6bb5\u62c6\u4e3a\u5de6\u53f3\u7aef\u70b9\uff0c\u5728 X \u8f74\u4e0a\u4f9d\u6b21\u5411\u53f3\u8003\u8651\u3002\u6bcf\u9047\u5230\u4e00\u4e2a\u7aef\u70b9 $x$\uff0c\u533a\u95f4\u6240\u8986\u76d6\u7ebf\u6bb5\u6570\u91cf\u7684\u5947\u5076\u6027\u6539\u53d8\uff1b\u5bf9\u4e8e\u4efb\u4e00\u5076\u6570\u533a\u95f4\uff0c\u4e24\u79cd\u989c\u8272\u67d3\u8272\u6570\u91cf\u76f8\u7b49\u3002\u89c2\u5bdf\u53d1\u73b0\uff0c\u5728\u5947\u6570\u533a\u95f4\uff0c\u5de6\u53f3\u7aef\u70b9\u540c\u65f6\u4e3a\u7ebf\u6bb5\u5de6\uff08\u6216\u53f3\uff09\u7aef\u70b9\u65f6\uff0c\u4e24\u4e2a\u7aef\u70b9\u4ee3\u8868\u7684\u7ebf\u6bb5\u6240\u67d3\u989c\u8272\u4e0d\u540c\uff1b\u53cd\u4e4b\uff0c\u67d3\u8272\u76f8\u540c\u3002\u5b9a\u4e49\n\n$$x_i\\text{\u4e3a\u771f} \\Leftrightarrow \\text{\u7ebf\u6bb5}i\\text{\u67d3\u4e3a\u7ea2\u8272}$$ \n\n\u8f6c\u5316\u4e3a 2-SAT \u95ee\u9898\u3002\n\n\u4e0a\u8ff0\u65b9\u6cd5\u57fa\u4e8e\u4e00\u4e2a\u5047\u8bbe\uff0c\u5404\u4e2a\u7aef\u70b9\u5750\u6807\u4e92\u4e0d\u76f8\u540c\u3002\u82e5\u51fa\u73b0\u7aef\u70b9\u76f8\u540c\u7684\u5750\u6807\uff0c\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u5bf9\u533a\u95f4\u67d0\u4e2a\u70b9 $x$ \u64cd\u4f5c $n$ \u6b21\uff0c\u64cd\u4f5c\u53ea\u6709 $\\pm 1$ \u4e24\u79cd\uff0c\u6c42\u6700\u7ec8 $x$ \u4e0a\u7684\u503c\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 $1$ \u7684\u65b9\u6848\u3002\u663e\u7136\u4e4b\u524d\u5bf9\u4e8e\u5947\u6570\u533a\u95f4\u7aef\u70b9\u4e24\u4e24\u914d\u5bf9\u7684\u65b9\u6cd5\u4e5f\u662f\u53ef\u884c\u7684\u3002\n\n\u6700\u540e\u7684\u95ee\u9898\u8fd8\u662f\u5173\u4e8e\u539f\u59cb\u7ebf\u6bb5\u5de6\u95ed\u53f3\u95ed\u7684\u6027\u8d28\u3002\u5bf9\u4e8e\u5de6\u7aef\u70b9\uff0c\u662f\u53f3\u8fde\u7eed\u7684\uff1b\u5bf9\u4e8e\u53f3\u7aef\u70b9\uff0c\u662f\u5de6\u8fde\u7eed\u7684\u3002\u5373\uff0c\u5750\u6807\u4e3a $x$ \u7684\u5de6\u7aef\u70b9\uff0c\u6539\u53d8\u7684\u533a\u95f4\u662f $[x,\\cdots)$\uff1b\u800c\u53f3\u7aef\u70b9\u662f $(x,\\cdots)$\u3002\u6545\u76f8\u540c\u5750\u6807\u7684\u5de6\u7aef\u70b9\u5e94\u4f18\u5148\u4e8e\u53f3\u7aef\u70b9\u88ab\u5904\u7406\u3002\u82e5\u539f\u59cb\u7684\u533a\u95f4\u5c31\u662f\u5de6\u95ed\u53f3\u5f00\uff0c\u5219\u4e0d\u7528\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff0c\u76f4\u63a5\u6309\u7167\u5750\u6807\u6392\u5e8f\u5373\u53ef\u3002\n\n\u5206\u89e3\u5f3a\u8fde\u901a\u5206\u91cf\u8fdb\u884c\u6c42\u89e3\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstruct Node\n{\n    int x, d, id;\n};\n\nint main()\n{\n    ios::sync_with_stdio(0), cin.tie(0);\n    int N;\n    cin >> N;\n    vector<Node> ns;\n    for (int i = 0; i < N; ++i)\n    {\n        int l, r;\n        cin >> l >> r;\n        ns.push_back({l, 1, i});\n        ns.push_back({r, -1, i});\n    }\n    sort(ns.begin(), ns.end(), [&](auto &a, auto &b)\n         {\n             if (a.x != b.x)\n                 return a.x < b.x;\n             return a.d > b.d;\n         });\n\n    int V = N * 2;\n    vector<vector<int>> G(V), rG(V);\n    auto add_edge = [&](int u, int v)\n    { G[u].push_back(v), rG[v].push_back(u); };\n\n    for (int i = 0; i < V; i += 2)\n    {\n        auto &a = ns[i], &b = ns[i + 1];\n        if (a.d == b.d)\n        {\n            add_edge(a.id + N, b.id);\n            add_edge(b.id + N, a.id);\n            add_edge(a.id, b.id + N);\n            add_edge(b.id, a.id + N);\n        }\n        else\n        {\n            add_edge(a.id, b.id);\n            add_edge(b.id + N, a.id + N);\n            add_edge(a.id + N, b.id + N);\n            add_edge(b.id, a.id);\n        }\n    }\n\n    vector<int> scc(V);\n    auto find_scc = [&]()\n    {\n        vector<bool> used(V);\n        vector<int> vs;\n        function<void(int)> dfs = [&](int v)\n        {\n            used[v] = 1;\n            for (int u : G[v])\n                if (!used[u])\n                    dfs(u);\n            vs.push_back(v);\n        };\n        function<void(int, int)> rdfs = [&](int v, int k)\n        {\n            used[v] = 1;\n            scc[v] = k;\n            for (int u : rG[v])\n                if (!used[u])\n                    rdfs(u, k);\n        };\n        for (int v = 0; v < V; ++v)\n            if (!used[v])\n                dfs(v);\n        int k = 0;\n        fill(used.begin(), used.end(), 0);\n        for (int i = (int)vs.size() - 1; i >= 0; --i)\n            if (!used[vs[i]])\n                rdfs(vs[i], k++);\n    };\n\n    find_scc();\n    for (int i = 0; i < N; ++i)\n        cout << (scc[i] > scc[i + N] ? 1 : 0) << \" \\n\"[i + 1 == N];\n    return 0;\n}\n```\n",
        "postTime": 1658029257,
        "uid": 350679,
        "name": "SHOHOKUKU",
        "ccfLevel": 0,
        "title": "Codeforces 429E 2-SAT"
    },
    {
        "content": "[Codeforces \u9898\u9762\u4f20\u9001\u95e8](https://codeforces.ml/contest/429/problem/E) & [\u6d1b\u8c37\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF429E)\n\n~~\u679c\u7136\u6211\u4e0d\u5177\u5907\u878d\u4f1a\u8d2f\u901a\u7684\u80fd\u529b/ll~~\n\n\u770b\u5230\u8fd9\u6837\u7684\u8bbe\u95ee\u6211\u4eec\u53ef\u4ee5\u5f88\u81ea\u7136\u5730\u8054\u60f3\u5230[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/CF547D)\uff0c\u5177\u4f53\u6765\u8bf4\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u5efa\u51fa\u4e00\u5f20\u56fe\uff0c\u7136\u540e\u6839\u636e\u201d\u6bcf\u4e2a\u70b9\u5ea6\u90fd\u662f\u5076\u6570\u7684\u56fe\u5fc5\u7136\u6bcf\u4e2a\u8fde\u901a\u5757\u90fd\u5b58\u5728\u6b27\u62c9\u56de\u8def\u201c\u8fd9\u4e00\u6761\u4ef6\u6784\u9020\u51fa\u539f\u56fe\u7684\u6b27\u62c9\u56de\u8def\u8fdb\u800c\u6c42\u89e3\u7b54\u6848\u3002\u56e0\u6b64\u73b0\u5728\u95ee\u9898\u8f6c\u5316\u4e3a\u5982\u4f55\u6784\u5efa\u51fa\u8fd9\u6837\u4e00\u5f20\u56fe\u51fa\u6765\u3002\n\n\u9996\u5148\u4e00\u4e2a\u975e\u5e38\u76f4\u89c2\u7684\u60f3\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u65b0\u5efa\u4e00\u4e2a\u5de6\u90e8\u70b9\uff0c\u5bf9\u4e8e\u6570\u8f74\u4e0a\u6bcf\u4e00\u4e2a\u6574\u70b9\u65b0\u5efa\u4e00\u4e2a\u53f3\u90e8\u70b9\uff0c\u7136\u540e\u4ece\u6bcf\u4e2a\u533a\u95f4\u8868\u793a\u7684\u5de6\u90e8\u70b9\u5411\u8fd9\u6bb5\u533a\u95f4\u4e2d\u6240\u6709\u6574\u70b9\u8868\u793a\u7684\u53f3\u90e8\u70b9\u8fde\u8fb9\uff0c\u8fd9\u6837\u95ee\u9898\u53ef\u4ee5\u53d8\u4e3a\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u90e8\u70b9\uff0c\u4e0e\u5176\u76f8\u8fde\u7684\u5de6\u90e8\u70b9\u4e2d\u7ea2\u70b9\u4e0e\u84dd\u70b9\u7684\u5dee\u7684\u7edd\u5bf9\u503c $\\le 1$\u200b\uff0c\u4e0d\u8fc7\u6ce8\u610f\u5230\u8fd9\u6837\u4e00\u6765\u6d89\u53ca\u4e0e\u6bcf\u4e2a\u70b9\u76f8\u8fde\u7684\u70b9 instead of \u8fb9\uff0c\u8fd9\u662f\u4e0d\u597d\u76f4\u63a5\u7528\u6b27\u62c9\u56de\u8def\u6c42\u89e3\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u8fdf\u65e9\u653e\u5f03\u8fd9\u4e2a\u60f3\u6cd5\uff08\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u5c06\u6240\u6709\u67d3\u6210\u7ea2\u8272\u7684\u89c6\u4f5c $+1$\uff0c\u67d3\u6210\u84dd\u8272\u89c6\u4f5c $-1$\uff0c\u90a3\u4e48\u4e00\u4e2a\u70b9\u7b26\u5408 $|r(x)-b(x)|\\le 1$ \u7684\u8981\u6c42\u5f53\u4e14\u4ec5\u5f53\u5c06\u6240\u6709\u8986\u76d6\u5b83\u7684\u6240\u6709\u7ebf\u6bb5\u6743\u503c\u4e4b\u548c\u4e3a $-1,0$ \u6216 $1$\u3002\u56e0\u6b64\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff0c\u6709 $n$ \u4e2a\u533a\u95f4\uff0c\u4f60\u8981\u9009\u62e9\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4\uff0c\u9009\u62e9\u5c06\u533a\u95f4\u4e2d\u6240\u6709\u4f4d\u7f6e\u4e0a\u7684\u6570 $+1$ \u6216\u8005 $-1$\uff0c\u4f7f\u5f97\u6700\u7ec8\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u7684\u7edd\u5bf9\u503c $\\le 1$\u3002\u6211\u4eec\u4e0d\u59a8\u5148\u8003\u8651\u4e00\u4e2a\u5f31\u5316\u7248\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u70b9\u88ab\u8986\u76d6\u6b21\u6570\u6070\u597d\u4e3a\u5076\u6570\u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u6700\u7ec8\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u6570\u90fd\u5e94\u662f $0$\u3002\u6ce8\u610f\u5230\u8fd9\u91cc\u6d89\u53ca\u533a\u95f4\u64cd\u4f5c\uff0c\u800c\u533a\u95f4\u64cd\u4f5c\u53ef\u4ee5\u89c6\u4f5c\u5dee\u5206\u5e8f\u5217\u4e0a\u7684\u4e24\u4e2a\u7aef\u70b9\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4 $[l,r]$\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4f5c\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ee4 $b_l$ \u52a0 $1$\uff0c$b_{r+1}$ \u51cf $1$\uff0c\u6216\u8005\u4ee4 $b_l$ \u51cf $1$\uff0c$b_{r+1}$ \u52a0 $1$\uff0c\u6700\u540e\u8981\u4f7f $b$ \u5e8f\u5217\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f $0$\u3002\u6211\u4eec\u8003\u8651\u4ece $l$ \u5411 $r+1$ \u8fde\u4e00\u6761\u8fb9\uff0c\u8fd9\u6837\u5982\u679c\u6211\u4eec\u9009\u62e9 $(l,r+1)$ \u8fd9\u6761\u8fb9\u4ece $l$ \u6307\u5411 $r+1$ \u5219\u4f1a\u4f7f $l$ \u51fa\u5ea6 $+1$\uff0c$r+1$ \u5165\u5ea6 $+1$\uff0c\u53cd\u4e4b\u4f1a\u4f7f $l$ \u5165\u5ea6 $+1$\uff0c$r+1$ \u51fa\u5ea6 $+1$\uff0c\u8fd9\u6837\u6700\u7ec8\u5e8f\u5217 $b$ \u4e2d\u6240\u6709\u5143\u7d20\u90fd\u4e3a $0$ \u5c31\u81ea\u7136\u5730\u88ab\u8f6c\u5316\u4e3a\uff0c\u6bcf\u4e2a\u70b9\u5165\u5ea6\u90fd\u7b49\u4e8e\u51fa\u5ea6\uff0c\u8fd9\u6837\u5c31\u81ea\u7136\u5730\u53ef\u4ee5\u6b27\u62c9\u56de\u8def\u4e86\u3002\u8dd1\u4e00\u904d\u6b27\u62c9\u56de\u8def\uff0c\u7136\u540e\u5982\u679c $(l_i,r_i+1)$ \u8fd9\u6761\u8fb9\u7531 $l_i$ \u6307\u5411 $r_i+1$ \u5219\u4ee4 $i$ \u7684\u989c\u8272\u4e3a $0$\uff0c\u5426\u5219\u4ee4 $i$ \u7684\u989c\u8272\u4e3a $1$\u3002\u90a3\u4e48\u5982\u679c\u6709\u7684\u70b9\u8986\u76d6\u6b21\u6570\u4e0d\u662f\u5076\u6570\u600e\u4e48\u529e\u5462\uff1f\u5982\u679c $i$ \u8986\u76d6\u6b21\u6570\u4e3a\u5947\u6570\uff0c\u90a3\u6211\u4eec\u5c31\u624b\u52a8\u6dfb\u52a0\u4e00\u4e2a\u533a\u95f4 $[i,i]$\uff0c\u8fd9\u6837\u6240\u6709\u70b9\u8986\u76d6\u6b21\u6570\u90fd\u662f\u5076\u6570\uff0c\u5c31\u53ef\u4ee5\u89c4\u7ea6\u4e3a\u524d\u4e00\u79cd\u60c5\u51b5\u4e86\u3002\n\n\u6ce8\u610f\uff0c\u7531\u4e8e\u533a\u95f4\u957f\u5ea6\u5f88\u5927\uff0c\u9700\u8981\u79bb\u6563\u5316\u3002\u5177\u4f53\u6765\u8bf4\u6309\u7167 P3643 [APIO2016]\u5212\u8247 \u7684\u5957\u8def\uff0c\u5c06\u6240\u6709\u533a\u95f4\u6539\u5199\u6210\u4e00\u4e2a\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\uff0c\u7136\u540e\u79bb\u6563\u5316\u4e00\u4e0b\u5373\u53ef\u5c06\u6574\u4e2a\u6570\u8f74\u62c6\u6210 $\\mathcal O(n)$ \u4e2a\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\uff0c\u90a3\u4e48\u663e\u7136\u6bcf\u4e00\u4e2a\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\u4e2d\u6240\u6709\u70b9\u6700\u7ec8\u7684\u6743\u503c\u90fd\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u7528\u53d6\u8fd9\u4e2a\u533a\u95f4\u6700\u5de6\u8fb9\u7684\u70b9\u4f5c\u4e3a\u8be5\u533a\u95f4\u7684\u4ee3\u8868\u70b9\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$\uff0c\u56e0\u4e3a\u8981\u79bb\u6563\u5316\u3002\n\n```cpp\nconst int MAXN=1e5;\nint n,l[MAXN+5],r[MAXN+5],key[MAXN*2+5],cnt=0,uni[MAXN*2+5],num=0;\nint d[MAXN*2+5],hd[MAXN*2+5],nxt[MAXN*6+5],to[MAXN*6+5],ec=1;\nvoid adde(int u,int v){/*printf(\"adde %d %d\\n\",u,v);*/to[++ec]=v;nxt[ec]=hd[u];hd[u]=ec;}\nint dir[MAXN*3+5],vis[MAXN*2+5],now[MAXN*2+5];\nvoid dfs(int x){\n//\tprintf(\"dfs %d\\n\",x);\n\tvis[x]=1;\n\tfor(int &e=now[x];e;e=nxt[e]) if(!~dir[e>>1]){\n\t\tdir[e>>1]=e&1;dfs(to[e]);\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d%d\",&l[i],&r[i]);++r[i];\n\t\tkey[++cnt]=l[i];key[++cnt]=r[i];\n\t} sort(key+1,key+cnt+1);key[0]=-1;\n\tfor(int i=1;i<=cnt;i++) if(key[i]^key[i-1]) uni[++num]=key[i];\n\tfor(int i=1;i<=n;i++){\n\t\tl[i]=lower_bound(uni+1,uni+num+1,l[i])-uni;\n\t\tr[i]=lower_bound(uni+1,uni+num+1,r[i])-uni;\n\t\td[l[i]]++;d[r[i]]--;adde(l[i],r[i]);adde(r[i],l[i]);\n\t}\n\tfor(int i=1;i<=num;i++){\n\t\td[i]+=d[i-1];\n\t\tif(d[i]&1) adde(i,i+1),adde(i+1,i);\n\t}\n\tmemset(dir,-1,sizeof(dir));\n\tfor(int i=1;i<=num;i++) now[i]=hd[i];\n\tfor(int i=1;i<=num;i++) if(!vis[i]) dfs(i);\n\tfor(int i=1;i<=n;i++) printf(\"%d%c\",dir[i],\" \\n\"[i==n]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1630993063,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF429E Points and Segments"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u56fe\u8bba\u9898\u3002\u8868\u9762\u4e0a\u4e0d\u5bb9\u6613\u770b\u51fa\u6765\uff0c\u56e0\u4e3a\u8fd9\u9053\u9898\u76ee\u9700\u8981\u6211\u4eec\u7528\u5230\u8f6c\u5316\u7684\u601d\u60f3\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u5982\u4f55\u5c06\u5b83\u8f6c\u5316\u6210\u4e00\u4e2a\u56fe\u8bba\u6a21\u578b\u3002\n\n------------\n\n\u6211\u4eec\u9996\u5148\u731c\u6d4b\u5982\u4f55\u5efa\u6a21\u3002\n\n\u9898\u76ee\u8981\u6c42\u6bcf\u4e00\u4e2a\u70b9\u88ab\u8986\u76d6\u7684\u7ebf\u6bb5\u4e2d\uff0c\u7ea2\u8272\u7684\u548c\u84dd\u8272\u7684\u7ebf\u6bb5\u6570\u91cf\u5dee\u4e0d\u8d85\u8fc7$1$\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u7ea2\u8272\u8fb9\u770b\u6210\u662f$1$\uff0c\u84dd\u8272\u8fb9\u770b\u6210\u662f$-1$\uff0c\u6bcf\u6761\u7ebf\u6bb5\u7684\u6743\u503c\u662f$p_i(p_i=1/-1)$\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u6210$|\\displaystyle\\sum p_i|\\le 1$\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c$1$\u548c$-1$\u662f\u76f8\u53cd\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u63a8\u65ad\u51fa\u7ea2\u8fb9\u548c\u84dd\u8fb9\u4e92\u4e3a\u53cd\u5411\u8fb9\uff08\u5176\u5b9e\u8fd9\u4e2a\u8bf4\u6cd5\u5e76\u4e0d\u51c6\u786e\uff0c\u8bf7\u7ee7\u7eed\u5f80\u4e0b\u9605\u8bfb\uff09\u3002\u90a3\u4e48\u8fd9\u4e2a\u8fb9\u662f\u4ece\u54ea\u91cc\u8fde\u5230\u54ea\u91cc\u7684\u5462\uff1f\u56e0\u4e3a\u201c\u8fb9\u6743\u201d\u5c31\u662f\u7ebf\u6bb5\u7684\u6743\u503c\uff0c\u6240\u4ee5\u8fb9\u5c31\u662f\u4ece\u7ebf\u6bb5\u7684\u8d77\u70b9\u8fde\u5230\u7ebf\u6bb5\u7684\u7ec8\u70b9\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u7684\u57fa\u672c\u6a21\u578b\u5c31\u51fa\u6765\u4e86\uff0c\u90a3\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e00\u6761\u7ebf\u6bb5\uff0c\u4ece\u7ebf\u6bb5\u7684\u8d77\u70b9\u5230\u7ec8\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u6784\u6210\u4e86\u4e00\u5f20$n$\u6761\u8fb9\u7684**\u65e0\u5411\u56fe**\u3002\n\n------------\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8003\u8651\u5bf9\u8fd9\u4e9b\u8fb9\u505a\u4ec0\u4e48\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u7ed9\u7ebf\u6bb5\u786e\u5b9a\u4e00\u4e2a\u4e32\u989c\u8272\uff0c\u6240\u4ee5\u76f8\u5f53\u4e8e\u662f\u8bf4\u6211\u4eec\u8981\u7ed9\u8fd9\u4e9b\u7ebf\u6bb5\u5b9a\u5411\u3002\u5982\u4f55\u7ed9\u8fd9\u4e9b\u7ebf\u6bb5\u5b9a\u5411\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8003\u8651\uff1a\u6211\u4eec\u662f\u8ba9\u6bcf\u4e00\u6761\u7ebf\u6bb5\u4ece\u8d77\u70b9\u8fde\u5411\u7ec8\u70b9\uff0c\u76f8\u5f53\u4e8e\u6709\u4e24\u4e2a\u72ec\u7acb\u7684\u70b9\u96c6\uff08\u5de6\u7aef\u70b9\u96c6\u5408$L$\u548c\u53f3\u7aef\u70b9\u96c6\u5408$R$\uff09\uff0c\u96c6\u5408\u5185\u6ca1\u6709\u4e92\u76f8\u8fde\u8fb9\uff0c\u96c6\u5408\u4e4b\u95f4\u4e92\u76f8\u6709\u8fde\u8fb9\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u6784\u6210\u4e86\u4e00\u5f20\u4e8c\u5206\u56fe\u3002\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8c\u5206\u56fe\u4e2d\u7684\u8fb9\u8fdb\u884c\u7ea2\u84dd\u4ea4\u66ff\u67d3\u8272\uff0c\u76f4\u5230\u67d3\u5b8c\u6240\u6709\u7684\u8fb9\u4e3a\u6b62\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u5b9a\u5411\u3002\n\n------------\n\n\u5b9a\u5411\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e\u67d3\u8272\u60c5\u51b5\u8f93\u51fa`0`\u6216`1`\u3002\n\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u521d\u59cb\u65f6\u7b2c\u4e00\u6761\u8fb9\u67d3\u4ec0\u4e48\u989c\u8272\uff0c\u4f8b\u5982`0 1 1 0 1`\u548c`1 0 0 1 0`\u5b9e\u9645\u4e0a\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64`SPJ`\u90fd\u4f1a\u628a\u4f60\u5224\u4e3a\u6b63\u786e\u3002\n\n\u8fd9\u65f6\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u6570\u636e\u8303\u56f4$l_i,r_i\\le 10^9$\uff08\u800c256MB\u7684\u7a7a\u95f4\u50a8\u5b58\u4e0d\u4e86$2\\times 10^9$\u7684\u6570\u7ec4\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u6211\u4eec\u4f7f\u7528\u79bb\u6563\u5316\uff0c\u76f8\u5f53\u4e8e\u628a\u8303\u56f4\u5f88\u5e7f\u7684\u4e00\u4e9b\u5750\u6807\u96c6\u4e2d\u5728$2\\times n$\u7684\u7f16\u53f7\u4e2d\uff0c\u901a\u8fc7\u8f83\u5c0f\u7684\u7f16\u53f7\u6765\u50a8\u5b58\u3002\u8fd9\u4e2a\u5728\u8f93\u5165\u7684\u65f6\u5019\u9700\u8981\u7279\u522b\u6ce8\u610f\u3002\n\n------------\n\n\u81f3\u6b64\u8fd9\u9053\u9898\u5c31\u88ab\u6211\u4eec\u5b8c\u7f8e\u5730\u89e3\u51b3\u4e86\u3002\u8fd8\u6709\u4e00\u9053\u4e0e\u672c\u9898\u601d\u60f3\u7c7b\u4f3c\u7684\u9898\u76ee\uff0c\u5e0c\u671b\u5927\u5bb6\u53ef\u4ee5\u89e6\u7c7b\u65c1\u901a\uff1a[Codeforces 547D](https://www.luogu.org/problemnew/show/CF547D)\u3002\n\n\u4e0b\u9762\u6211\u7ed9\u51fa`cpp`\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<map>\nusing namespace std;  \nconst int MAXN=200010;  \n\nvector<int>p[MAXN];  \nint vis[MAXN],ans[MAXN][2]; \nmultimap<int,int>h;\nint tot=0; \n\nvoid dfs(int x,int y)\n{  \n    if(vis[x]>=0)\n    \treturn;\n    else\n    \tvis[x]=y;\n    int sz=p[x].size();\n    for(int i=0;i<sz;i++)\n        dfs(p[x][i],1^y);\n}\n\nint main()\n{\n\tmemset(vis,-1,sizeof(vis));\n    int n;scanf(\"%d\",&n);  \n    int l,r;\n    for(int i=0;i<n;i++)\n    {\n    \tscanf(\"%d%d\",&l,&r);\n    \tp[i<<1].push_back(i<<1|1);\n\t\tp[i<<1|1].push_back(i<<1);\n        h.insert(make_pair(l<<1,i<<1));\n\t\th.insert(make_pair(r<<1|1,i<<1|1));\n\t}\n\tmultimap<int,int>::iterator it=h.begin();\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tint l=it->second;it++;\n\t\tint r=it->second;it++;\n\t\tp[l].push_back(r);p[r].push_back(l);\n\t}\n\tfor(int i=0;i<n;i++)\n\t\tif(vis[i<<1]<0)\n\t\t\tdfs(i<<1,1);\n\tfor(int i=0;i<n;i++)\n\t\tprintf(\"%d \",vis[i<<1]);\n    return 0;\n}\n```",
        "postTime": 1518354638,
        "uid": 23398,
        "name": "frankchenfu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF429E \u3010Points and Segments\u3011"
    }
]