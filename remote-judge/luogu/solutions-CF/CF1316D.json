[
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u6709\u4e00\u4e2a$n \\times n$\u5927\u5c0f\u7684\u68cb\u76d8\uff0c\u68cb\u76d8\u7684\u6bcf\u4e2a\u683c\u5b50\u4e0a\u6709\u4e00\u4e2a\u5b57\u6bcd\uff08\u662f`U,L,R,D,X`\u4e2d\u4e4b\u4e00\uff09\uff0c\u5176\u4e2d`U`\u8868\u793a\u5411\u4e0a\u8d70\uff0c`D`\u8868\u793a\u5411\u4e0b\u8d70\uff0c`L`\u8868\u793a\u5411\u5de6\u8d70\uff0c`R`\u8868\u793a\u5411\u53f3\u8d70\uff0c`X`\u8868\u793a\u8d70\u5230\u8fd9\u4e2a\u683c\u5b50\u5c31\u505c\u6b62\u3002\n\n\u73b0\u5728\u7ed9\u4f60$n ^ 2$\u4e2a\u5750\u6807$(x_{i,j}, y_{i, j})$\u8868\u793a\u4ece$(i, j)$\u51fa\u53d1\u80fd\u8d70\u5230\u7684\u4f4d\u7f6e\uff08\u5982\u679c\u65e0\u9650\u5faa\u73af\u5219\u4e3a$-1$\uff09\uff0c\u4f60\u9700\u8981\u6784\u9020\u51fa\u8fd9\u4e2a\u68cb\u76d8\uff0c\u6216\u8005\u8f93\u51fa`INVALID`\uff0c$n \\leq 10^3$ \n\n### \u5206\u6790\n\n\u5bb9\u6613\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff1a\u6240\u6709\u7ec8\u70b9\u76f8\u540c\u7684\u70b9\u5f62\u6210\u72ec\u7acb\u7684\u8054\u901a\u5757\n\n\u8bc1\u660e\u5f88\u663e\u7136\uff0c\u5982\u679c$A$\u7684\u7ec8\u70b9\u662f$(x_1, y_1)$\uff0c$B$\u7684\u7ec8\u70b9\u662f$(x_2,y_2)$($(x_1,y_1) \\not= (x_2, y_2)$)\uff0c\u4e14$A$\u6709\u8fb9\u8fde\u5230$B$\u7684\u8bdd\uff0c\u90a3\u4e48$A$\u7684\u7ec8\u70b9\u5c31\u4e0d\u53ef\u80fd\u662f$(x_1, y_1)$\uff0c\u800c\u4f1a\u662f$(x_2,y_2)$\u4e0e\u9898\u8bbe\u77db\u76fe\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u597d\u89e3\u51b3\u4e86\n\n\u6211\u4eec\u9996\u5148\u5ffd\u7565\u6389\u6b7b\u5faa\u73af\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u4e00\u4e2a\uff08\u975e\u6b7b\u5faa\u73af\uff09\u8054\u901a\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u8054\u901a\u5757\u7684\u7ec8\u70b9\uff08\u5373$(i,j)=(x_{i,j},y_{i,j})$\u7684\u70b9\uff09\u5411\u5916\u5f00\u59cb$\\texttt{DFS}$\uff0c\u904d\u5386\u6240\u6709\u4e0e\u4ed6\u76f8\u90bb\u7684\u70b9\u5e76\u8bb0\u5f55\u7b54\u6848\u3002\n\n\u800c\u5bf9\u4e8e\u6b7b\u5faa\u73af\u7684\u60c5\u51b5\uff0c\u663e\u7136\u5982\u679c\u5355\u72ec\u7684\u4e00\u4e2a\u70b9\u6b7b\u5faa\u73af\u7684\u8bdd\u80af\u5b9a\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u8fd9\u65f6\u5019\u8f93\u51fa`INVALID`\u5373\u53ef\n\n\u5426\u5219\u6211\u4eec\u679a\u4e3e\u4e24\u4e2a\u76f8\u90bb\u7684\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u628a\u8fd9\u4e24\u4e2a\u70b9\u8fde\u6210\u53cc\u5143\u73af\uff0c\u7136\u540e\u5206\u522b\u4ece\u8fd9\u4e24\u4e2a\u70b9\u5f00\u59cb$\\texttt{DFS}$\uff0c\u904d\u5386\u6240\u6709\u5728\u4e0d\u7ecf\u8fc7\u5176\u4e2d\u4e00\u4e2a\u70b9\u7684\u60c5\u51b5\u4e0b\u80fd\u8d70\u5230\u7684\u6240\u6709\u70b9\u5e76\u8bb0\u5f55\u7b54\u6848\uff08\u8be6\u60c5\u53c2\u89c1\u4ee3\u7801\uff09\n\n\u6700\u540e\uff0c\u5982\u679c\u6709\u67d0\u4e00\u4e2a\u70b9\u6ca1\u6709\u88ab\u904d\u5386\u5230\u7684\u8bdd\u5219\u8f93\u51fa`INVALID`\uff0c\u5426\u5219\u5c31\u8f93\u51fa`VALID`\u5e76\u8f93\u51fa\u524d\u6587\u5904\u7406\u51fa\u7684\u7b54\u6848\n\n### \u4ee3\u7801\n\n``` cpp\n#include <bits/stdc++.h>\n \n#define R register\n#define ll long long\n#define sum(a, b, mod) (((a) + (b)) % mod)\n#define check(x, y) ((x > 0) && (x <= n) && (y > 0) && (y <= n))\n \nconst int MaxN = 1e3 + 10;\nconst char op[] = {'U', 'L', 'D', 'R', 'X'};\nconst int dx[] = {1, 0, -1, 0}, dy[] = {0, 1, 0, -1};\n \nint n, vis[MaxN][MaxN];\nchar ans[MaxN][MaxN];\nstd::vector<std::pair<int, int>> v;\nstd::pair<int, int> a[MaxN][MaxN];\n \nint nxt(int x, int y, int ex, int ey)\n{\n    for (int i = 0; i <= 3; i++)\n        if (x + dx[i] == ex && y + dy[i] == ey)\n            return i;\n    return -1;\n}\n \ninline int read()\n{\n    int x = 0, f = 1;\n    char ch = getchar();\n    while (ch > '9' || ch < '0')\n    {\n        if (ch == '-')\n            f = 0;\n        ch = getchar();\n    }\n    while (ch <= '9' && ch >= '0')\n        x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n    return f ? x : (-x);\n}\n \nvoid dfs(int x, int y, int Dx) // \u6b63\u5e38\u8054\u901a\u5757\u6c42\u89e3\n{\n    if (ans[x][y]) return;\n    ans[x][y] = op[Dx];\n    for (int i = 0; i <= 3; i++)\n    {\n        int ex = x + dx[i], ey = y + dy[i];\n        if (check(ex, ey) && a[ex][ey] == a[x][y])\n            dfs(ex, ey, i);\n    }\n}\n \nvoid get(int x, int y) // \u6c42\u6b7b\u5faa\u73af\u8054\u901a\u5757\u5927\u5c0f\n{\n    vis[x][y] = 1, v.push_back(std::make_pair(x, y));\n    for (int i = 0; i <= 3; i++)\n    {\n        int ex = x + dx[i], ey = y + dy[i];\n        if (check(ex, ey) && a[ex][ey].first == -1 && a[ex][ey].second == -1 && !vis[ex][ey])\n            get(ex, ey);\n    }\n}\n \nvoid Dfs(int x, int y, int banx, int bany, int Dx) // \u6b7b\u5faa\u73af\u8054\u901a\u5757\u904d\u5386\n{\n    if (ans[x][y]) return;\n    ans[x][y] = op[Dx];\n    for (int i = 0; i <= 3; i++)\n    {\n        int ex = x + dx[i], ey = y + dy[i];\n        if (check(ex, ey) && (a[ex][ey].first == -1 && a[ex][ey].second == -1) && (ex != banx || ey != bany))\n            Dfs(ex, ey, banx, bany, i);\n    }\n}\n \nint main()\n{\n    n = read();\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= n; j++)\n            a[i][j].first = read(), a[i][j].second = read();\n    }\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= n; j++)\n            if (a[i][j].first == i && a[i][j].second == j)\n                dfs(i, j, 4);\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            if (a[i][j].first == -1 && a[i][j].second == -1 && !vis[i][j])\n            {\n                v.clear(), get(i, j);\n                if (v.size() == 1) return 0 * printf(\"INVALID\");\n                for (int k = 1; k < v.size(); k++)\n                {\n                    int x = nxt(v[k - 1].first, v[k - 1].second, v[k].first, v[k].second);\n                    if (~x)\n                    {\n                        Dfs(v[k].first, v[k].second, v[k - 1].first, v[k - 1].second, x);\n                        x = nxt(v[k].first, v[k].second, v[k - 1].first, v[k - 1].second);\n                        Dfs(v[k - 1].first, v[k - 1].second, v[k].first, v[k].second, x);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= n; j++)\n            if (!ans[i][j])\n                return 0 * printf(\"INVALID\");\n    puts(\"VALID\");\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= n; j++)\n            putchar(ans[i][j]);\n        puts(\"\");\n    }\n    return 0; \n}\n```\n\n",
        "postTime": 1583569502,
        "uid": 61966,
        "name": "little_sun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 CF1316D \u3010Nash Matrix\u3011"
    },
    {
        "content": "\u5206\u4e24\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u5904\u7406\u4f1a\u7ec8\u6b62\u7684\u7ed3\u70b9\uff0c\u7b2c\u4e8c\u90e8\u5206\u5904\u7406\u4e0d\u4f1a\u7ec8\u6b62\u7684\u7ed3\u70b9\n\n\u8bd5\u60f3\uff0c\u5bf9\u4e8e\u4e00\u4e2a $(i, j)$\uff0c\u505c\u6b62\u4e8e $(ex_{(i, j)}, ey_{(i, j)})$\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u5148\u968f\u4fbf\u62c9\u51fa\u6765\u4e00\u6761\u8def\u5f84\uff0c\u4e00\u5b9a\u4f1a\u77e5\u9053\uff0c**\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u90fd\u4f1a\u505c\u6b62\u4e8e $ {(ex_{(i, j)}, ey_{(i, j)})}$**\uff0c\u6240\u4ee5\uff0c\u8fd9\u5f20\u56fe\u4e00\u5b9a\u662f\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\uff0c\u67d0\u4e00\u4e2a\u8fde\u901a\u5757\u5185\uff0c\u70b9\u7684\u505c\u6b62\u70b9\u5e94\u8be5\u662f\u76f8\u540c\u7684\u3002\n\n\u6211\u4eec\u627e\u5230\u6240\u6709\u7684\u81ea\u505c\u6b62\u70b9\uff0c\u4e5f\u5c31\u662f $(i, j) = (ex_{(i, j)}, ey_{(i, j)})$\uff0c\u663e\u7136\u8fd9\u4e2a\u70b9\u5e94\u5f53\u662f `X`\uff0c\u7136\u540e\u6211\u4eec\u4ece\u5b83\u5f00\u59cb\uff0c\u5728\u6ee1\u8db3\u505c\u6b62\u70b9\u662f\u5b83\u7684\u8fde\u901a\u5757\u5185\u6784\u9020\u7b54\u6848\u3002\u8fd9\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u6211\u4eec DFS \u4e00\u904d\uff0c\u628a\u8bbf\u95ee\u5230\u4e00\u4e2a\u70b9\u7684\u65b9\u5411\u90fd\u53cd\u8fc7\u6765\u5c31\u884c\u4e86\u3002\n\n```cpp\nvoid DFS(int p, int q, int sx, int sy) // \u5f53\u524d\u5728 (p, q)\uff0c\u5904\u7406\u6240\u6709\u505c\u6b62\u70b9\u662f (sx, sy) \u7684\n{\n\tREP(i, 0, 3) // \u679a\u4e3e\u65b9\u5411\uff0cdx[], dy[] \u662f\u589e\u91cf\u6570\u7ec4\n\t{\n\t\tint tx = p + dx[i], ty = q + dy[i];\n\t\tif(tx >= 1 && tx <= n && ty >= 1 && ty <= n && // \u4e0d\u8d8a\u754c\n\t\t  ex[tx][ty] == sx && ey[tx][ty] == sy && !ans[tx][ty]) // \u7ec8\u6b62\u70b9\u662f (sx, sy) && \u6ca1\u8bbf\u95ee\n\t\t{\n\t\t\tans[tx][ty] = dc[i]; // dc[] \u5b58\u7684\u662f\u53cd\u65b9\u5411\n\t\t\tDFS(tx, ty, sx, sy);\n\t\t}\n\t}\n}\n```\n\n\u7136\u540e\u662f $-1$ \u7684\u60c5\u51b5\u3002\u5982\u679c\u4e00\u4e2a $-1$ \u8fde\u901a\u5757\u7684\u5927\u5c0f\u4e3a $1$\uff0c\u90a3\u4e48\u7ed3\u679c\u80af\u5b9a\u662f `INVALID`\uff0c\u56e0\u4e3a\u4e00\u4e2a\u70b9\u600e\u4e48\u4e5f\u6ca1\u6cd5\u505a\u5230\u4e0d\u505c\u6b62\u3002\u5426\u5219\uff0c\u6211\u4eec\u9009\u62e9\u8fd9\u4e2a\u8fde\u901a\u5757\u5185\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\uff0c\u628a\u5b83\u4eec\u6307\u5411\u5bf9\u65b9\uff0c\u7136\u540e\u8ba9\u5176\u4ed6 $-1$ \u90fd\u8d70\u5230\u8fd9\u4e24\u4e2a\u70b9\u4e0a\u9762\u6765\uff0c\u8fd9\u4e2a\u8fde\u901a\u5757\u5c31\u5408\u6cd5\u4e86\u3002\n\n\u8fd9\u9700\u8981\u518d\u5199\u4e00\u79cd DFS \u5417\uff1f\u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u6211\u4eec\u628a\u4e0a\u9762 DFS \u7684\u53c2\u6570 $(sx ,s y)\\gets (-1, -1)$\uff0c\u5c31\u662f\u81ea\u52a8\u5728\u627e $-1$ \u8fde\u901a\u5757\u4e86\u3002\n\n\u522b\u5fd8\u4e86\u6784\u9020\u9898\u7684\u60ef\u5e38\u5957\u8def\uff1a\u6784\u9020\u5b8c\u540e\u518d\u68c0\u9a8c\u4e00\u904d\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define REP(i, x, y) for(register int i = x; i <= y; i++)\nusing namespace std;\nconst int N = 1e3 + 5;\nconst int dx[4] = {0, 1, 0, -1};\nconst int dy[4] = {1, 0, -1, 0};\nconst char dc[4] = {'L', 'U', 'R', 'D'};\nint n, ex[N][N], ey[N][N];\nchar ans[N][N];\nvoid DFS(int p, int q, int sx, int sy)\n{\n\tREP(i, 0, 3)\n\t{\n\t\tint tx = p + dx[i], ty = q + dy[i];\n\t\tif(tx >= 1 && tx <= n && ty >= 1 && ty <= n &&\n\t\t  ex[tx][ty] == sx && ey[tx][ty] == sy && !ans[tx][ty])\n\t\t{\n\t\t\tans[tx][ty] = dc[i];\n\t\t\tDFS(tx, ty, sx, sy);\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d\", &n);\n\tREP(i, 1, n) REP(j, 1, n) scanf(\"%d %d\", &ex[i][j], &ey[i][j]);\n\tREP(i, 1, n) REP(j, 1, n)\n\t\tif(ex[i][j] == i && ey[i][j] == j)\n\t\t\tans[i][j] = 'X', DFS(i, j, i, j); \n\tREP(i, 1, n) REP(j, 1, n)\n\t{\n\t\tif(ex[i][j] == -1 && !ans[i][j])\n\t\t{\n\t\t\t// \u6ce8\u610f\uff0c\u8fd9\u91cc\u4e24\u79cd\u60c5\u51b5\u5373\u53ef\uff0c\u56e0\u4e3a ...-1 \u7684\u60c5\u51b5\u5728 i=i-1 / j=j-1 \u7684\u65f6\u5019\u679a\u4e3e\u5230\u4e86 \n\t\t\tif(ex[i + 1][j] == -1) \n\t\t\t\tans[i][j] = 'D', ans[i + 1][j] = 'U', DFS(i, j, -1, -1), DFS(i + 1, j, -1, -1);\n\t\t\tif(ex[i][j + 1] == -1) \n\t\t\t\tans[i][j] = 'R', ans[i][j + 1] = 'L', DFS(i, j, -1, -1), DFS(i, j + 1, -1, -1);\n\t\t}\n\t}\n\tbool invalid = false;\n\tREP(i, 1, n) REP(j, 1, n) invalid |= !ans[i][j];\n\tif(invalid) return puts(\"INVALID\") && 0;\n\tputs(\"VALID\");\n\tREP(i, 1, n)\n\t{\n\t\tREP(j, 1, n) putchar(ans[i][j]);\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1584721743,
        "uid": 51971,
        "name": "syksykCCC",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 CF1316D \u3010Nash Matrix\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u672c\u8eab\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u6bd4\u8d5b\u7684\u65f6\u5019\u8111\u62bd\u4e86\u628a`(i-1)*n+j`\u5199\u6210\u4e86`i*(n-1)+j`\uff0c\u8c03\u4e86\u4e00\u5e74\u6ca1\u8c03\u51fa\u6765\u2026\u2026\n\n\u68cb\u76d8\u4f9d\u5176\u76ee\u7684\u5730\u7684\u4e0d\u540c\u88ab\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a\u4e92\u4e0d\u5f71\u54cd\u7684\u8fde\u901a\u5757\u3002\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230**\u76ee\u7684\u5730\u4e3a\u5b83\u672c\u8eab**\u7684\u683c\u5b50\uff0c\u4ece\u5b83\u5f00\u59cb\u53cd\u5411dfs\uff0c\u5c31\u53ef\u4ee5\u4e3a\u8fd9\u4e2a\u8fde\u901a\u5757\u4e2d\u7684\u6bcf\u4e2a\u683c\u5b50\u6784\u9020\u51fa\u6700\u7ec8\u80fd\u5230\u8fbe\u5b83\u7684\u4e00\u4e2a\u65b9\u6848\u3002\n\n![\u793a\u610f\u56fe](http://pic.yuntu.ru/2020/05/20/QQ2020030618160500f4ebe3b28cf65e.png)\n\n\u5bf9\u4e8e\u90a3\u4e9b\u6c38\u8fdc\u8fd0\u52a8\u4e0b\u53bb\u7684\u683c\u5b50\uff0c\u968f\u4fbf\u9009\u4e00\u4e2a\u5f00\u59cb\u53cd\u5411dfs\uff0c\u4f46\u662f\u521a\u5f00\u59cb\u641c\u7b2c\u4e00\u4e2a\u683c\u5b50\u65f6**\u4e0d\u8fdb\u884c\u6807\u8bb0**\uff0c\u8fd9\u6837\uff0c\u8fde\u901a\u5757\u4e2d\u7684\u6bcf\u4e2a\u683c\u5b50\u90fd\u80fd\u5230\u8fbe\u8d77\u70b9\uff0c\u4f46\u540c\u65f6\uff0c\u56e0\u4e3a\u8d77\u70b9\u6ca1\u6709\u88ab\u6807\u8bb0\uff0c\u6240\u4ee5\u5f88\u5feb\u4f1a\u641c\u56de\u5230\u8d77\u70b9\uff0c\u4f7f\u5f97\u8d77\u70b9\u4e5f\u80fd\u5230\u8fbe\u8fde\u901a\u5757\u4e2d\u7684\u5176\u5b83\u683c\u5b50\u3002\n\n\u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u65e0\u89e3\u5462\uff1f\u53ea\u8981\u5728\u4e0a\u8ff0\u6784\u9020\u7ed3\u675f\u540e\uff0c\u4ecd\u6709\u683c\u5b50**\u672a\u88ab\u8bb0\u5f55**\u5373\u53ef\u3002\n\n\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nint dest[1005][1005], n;\nchar board[1005][1005];\nvoid dfs(int x, int y, int astr, char c)\n{\n    if (board[x][y]) // \u5df2\u6807\u8bb0\u8fc7\uff0c\u8fd4\u56de\n        return;\n    board[x][y] = c; // \u6807\u8bb0\n    \n    // \u9006\u5411\u641c\u7d22\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u683c\u5b50\n    // \u4e0d\u7528\u5904\u7406\u8fb9\u754c\u56e0\u4e3a\u8fb9\u754c\u5fc5\u7136\u4e0e\u4e4b\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\n    if (dest[x - 1][y] == astr)\n        dfs(x - 1, y, astr, 'D');\n    if (dest[x + 1][y] == astr)\n        dfs(x + 1, y, astr, 'U');\n    if (dest[x][y - 1] == astr)\n        dfs(x, y - 1, astr, 'R');\n    if (dest[x][y + 1] == astr)\n        dfs(x, y + 1, astr, 'L');\n}\n```\n```cpp\n// \u4ee5\u4e0b\u5728main\u51fd\u6570\u4e2d\n// \u521d\u59cb\u5316\uff0c\u628a\u4e8c\u7ef4\u6620\u5c04\u6210\u4e00\u7ef4\u65b9\u4fbf\u50a8\u5b58\uff0c\u5176\u5b9e\u7528std::pair\u4e5f\u53ef\u4ee5\u5427\nfor (int i = 1; i <= n; ++i)\n    for (int j = 1; j <= n; ++j)\n    {\n        int x = read(), y = read();\n        if (x == -1)\n            dest[i][j] = -1;\n        else\n            dest[i][j] = (x - 1) * n + y;\n    }\n\n// \u5bf9\u76ee\u7684\u5730\u4e3a\u5b83\u672c\u8eab\u7684\u683c\u5b50\uff0c\u548c\u6c38\u8fdc\u8fd0\u52a8\u4e0b\u53bb\u7684\u683c\u5b50\u8fdb\u884cdfs\nfor (int i = 1; i <= n; ++i)\n    for (int j = 1; j <= n; ++j)\n    {\n        if (dest[i][j] == (i - 1) * n + j)\n            dfs(i, j, dest[i][j], 'X');\n        if (dest[i][j] == -1)\n            dfs(i, j, -1, 0);\n    }\n    \n// \u5224\u65ad\u662f\u5426\u65e0\u89e3\nbool valid = true;\nfor (int i = 1; i <= n; ++i)\n    for (int j = 1; j <= n; ++j)\n        if (board[i][j] == 0)\n            valid = false;\n```",
        "postTime": 1583491394,
        "uid": 70304,
        "name": "Pecco",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1316D \u3010Nash Matrix\u3011"
    },
    {
        "content": "# [CF1316D Nash Matrix](https://www.luogu.com.cn/problem/CF1316D)\n\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u7684\u70b9\u5206\u6210\u4e24\u7c7b\uff1a\u505c\u4e0d\u4e0b\u6765\u7684\u548c\u4f1a\u505c\u4e0b\u6765\u7684\u3002\n\n\u6211\u4eec\u4f18\u5148\u89e3\u51b3\u4f1a\u505c\u4e0b\u6765\u7684\u70b9\u3002\n\n### Case 1:\n\u9996\u5148\uff0c\u5982\u679c\u4e00\u4e2a\u70b9 $(i,j)$ \u7684\u7ec8\u70b9\u4e3a  $(i,j)$ \uff0c\u90a3\u4e48\u6beb\u65e0\u7591\u95ee\uff0c\u8fd9\u4e2a\u70b9\u80af\u5b9a\u4f1a\u88ab\u6807\u8bb0\u6210 $X$ \u3002\n\n\u7136\u540e\u6211\u4eec\u4ece\u8fd9\u4e2a\u70b9\u51fa\u53d1dfs\uff08\u5f53\u7136bfs\u4e5f\u53ef\u4ee5\uff09\uff0c\u627e\u5230\u6240\u6709\u7ec8\u70b9\u540c\u6837\u662f $(i,j)$ \u7684\u70b9\uff0c\u7136\u540e\u5728\u8def\u5f84\u4e0a\u6807\u8bb0\u5bf9\u5e94\u7684\u5b57\u7b26\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u628a\u6240\u6709\u7ec8\u70b9\u662f\u540c\u4e00\u70b9\u7684\u683c\u70b9\u8fde\u63a5\u5728\u4e86\u4e00\u8d77\u3002\n\n\u6240\u6709\u505c\u4e0b\u6765\u7684\u70b9\u5c31\u89e3\u51b3\u4e86\u3002\n### Case 2:\n\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u89e3\u51b3\u4e0d\u4f1a\u505c\u4e0b\u6765\u7684\u70b9\u3002\n\n\u5982\u679c\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\u4e0d\u4f1a\u505c\u4e0b\u6765\uff0c\u90a3\u4e48\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n1. \u8fd9\u4e2a\u70b9\u5728\u4e00\u4e2a\u73af\u5185\uff1b\n2. \u8fd9\u4e2a\u70b9\u6709\u4e00\u6761\u8def\u5f84\u5230\u8fbe\u4e00\u4e2a\u73af\u3002\n\n\u800c\u5efa\u7acb\u73af\u7684\u6700\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\u8ba9\u4e24\u4e2a\u70b9\u4e92\u76f8\u53ef\u8fbe\u3002\n\n\u6240\u4ee5\u6211\u4eec\u628a\u6240\u6709\u80fd\u914d\u5bf9\u7684\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u914d\u5bf9\uff0c\u518d\u628a\u5269\u4e0b\u7684\u70b9\u5c3d\u53ef\u80fd\u5f80\u5176\u4e2d\u4e00\u4e2a\u73af\u4e0a\u6dfb\u52a0\u8def\u5f84\u3002\n\u89e3\u51b3\uff01\n### How to judge the result?\n\u5982\u679c\u5728\u5efa\u73af\u914d\u5bf9\u65f6\u6709\u4e00\u4e2a\u70b9\u4e0d\u80fd\u914d\u5bf9\uff0c\u90a3\u4e48\u7ed3\u679c\u5c31\u662f`INVALID`\uff1b\n\n\u5982\u679c\u6709\u4efb\u4f55\u4e00\u4e2a\u683c\u70b9\u4e0a\u6ca1\u6709\u6807\u8bb0\u8def\u5f84\uff0c\u90a3\u4e48\u7ed3\u679c\u5c31\u662f`INVALID`\uff1b\n\n\u53cd\u4e4b\u7ed3\u679c\u5c31\u662f`VALID`\u3002\n## Code\n\u9644\u4e0aAC\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio> \nconst int maxn = 1005;\nint n;\nchar matrix[maxn][maxn];\nint x[maxn][maxn], y[maxn][maxn];\n\nvoid dfs(int p, int q, char c)\n{\n\tif(matrix[p][q] != '\\0')\n\t\treturn;\n\tmatrix[p][q] = c;\n\tif(x[p - 1][q] == x[p][q] && y[p - 1][q] == y[p][q])//up\n\t\tdfs(p - 1, q, 'D');\n\tif(x[p + 1][q] == x[p][q] && y[p + 1][q] == y[p][q])//down\n\t\tdfs(p + 1, q, 'U');\n\tif(x[p][q - 1] == x[p][q] && y[p][q - 1] == y[p][q])//left\n\t\tdfs(p, q - 1, 'R');\n\tif(x[p][q + 1] == x[p][q] && y[p][q + 1] == y[p][q])//right\n\t\tdfs(p, q + 1, 'L');\n}\n\nbool connect(int p,int q,int r,int s,char c1,char c2)\n{\n\tif(x[r][s] == -1 && y[r][s] == -1)\n\t{\n\t\tmatrix[p][q] = c1;\n\t\tif(matrix[r][s] == '\\0')\n\t\t\tmatrix[r][s] = c2;\n\t\treturn true;\n\t}\n\telse\n\t\treturn false;\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i = 1; i <= n; i++)\n\t\tfor(int j = 1; j <= n; j++)\n\t\t\tscanf(\"%d%d\",&x[i][j],&y[i][j]);\n\t//Case 1\n\tfor(int i = 1; i <= n; i++)\n\t\tfor(int j = 1; j <= n; j++)\n\t\t\tif(x[i][j] == i && y[i][j] == j)\n\t\t\t\tdfs(i, j, 'X');\n\t//Case 2\n\tfor(int i = 1; i <= n; i++)\n\t\tfor(int j = 1; j <= n; j++)\n\t\t\tif(x[i][j] == -1 && y[i][j] == -1)\n\t\t\t{\n\t\t\t\tbool flag = (matrix[i][j] != '\\0');\n\t\t\t\tif(!flag)//from left to right\n\t\t\t\t\tflag = connect(i,j,i,j+1,'R','L');\n\t\t\t\tif(!flag)//from right to left\n\t\t\t\t\tflag = connect(i,j,i,j-1,'L','R');\n\t\t\t\tif(!flag)//from down to up\n\t\t\t\t\tflag = connect(i,j,i-1,j,'U','D');\n\t\t\t\tif(!flag)//from up to down\n\t\t\t\t\tflag = connect(i,j,i+1,j,'D','U');\n\t\t\t\tif(!flag)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"INVALID\\n\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\tfor(int i = 1; i <= n; i++)\n\t\tfor(int j = 1; j <= n; j++)\n\t\t\tif(matrix[i][j] == '\\0')\n\t\t\t{\n\t\t\t\tprintf(\"INVALID\\n\");\n\t\t\t\treturn 0;\n\t\t\t}\n\tprintf(\"VALID\\n\");\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tfor(int j = 1; j <= n; j++)\n\t\t\tprintf(\"%c\",matrix[i][j]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2)$ ",
        "postTime": 1583463304,
        "uid": 286770,
        "name": "Andrewzdm",
        "ccfLevel": 7,
        "title": "CF1316D \u9898\u89e3"
    },
    {
        "content": "dfs+ \u6784\u9020\uff01\n\n\u6709\u4e24\u79cd\u8def\u9700\u8981\u6211\u4eec\u6765\u627e\u3002\n\n\u2474\u975e\u5faa\u73af\u7684\u8def\uff0c\u8fd9\u663e\u7136\u662f\u4e00\u6761\u5355\u5411\u7684\u8def\uff0c\u5f88\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u7528 dfs \u6765\u505a\u3002\u6211\u7684\u505a\u6cd5\u662f\u627e\u5230\u7ec8\u70b9\uff0c\u8d4b\u4e0a X\uff0c\u7136\u540e\u53cd\u63a8\u56de\u53bb\u3002\n\n\u2475\u5faa\u73af\u7684\u8def\uff0c\u8fd9\u91cc\u6211\u662f\u76f4\u63a5\u6784\u9020\uff0c\u597d\u50cf\u53ef\u4ee5\u641c\u7d20\u5199\uff1f\u4f46\u662f\u6211\u6ca1\u8c03\u51fa\u6765\u3002\u6784\u9020\u7684\u8bdd\uff0c\u6211\u4eec\u5148\u627e\u5230\u4e00\u4e2a\u5faa\u73af\u91cc\u7684\u70b9\uff0c\u7136\u540e\u4ece\u4ed6\u56db\u4e2a\u65b9\u5411\u91cc\u968f\u4fbf\u627e\u4e00\u4e2a\u4e5f\u662f\u5faa\u73af\u91cc\u7684\u70b9\u3002\u5982\u679c\u7b2c\u4e8c\u4e2a\u70b9\u8fd8\u672a\u6784\u9020\uff0c\u90a3\u4e48\u6211\u4eec\u8ba9\u8fd9\u4e24\u4e2a\u70b9\u4e92\u76f8\u8d70\u5411\u5bf9\u65b9\uff0c\u8fd9\u6837\u5c31\u5faa\u73af\u4e86\u3002\u5982\u679c\u7b2c\u4e8c\u4e2a\u70b9\u5df2\u7ecf\u6784\u9020\uff0c\u90a3\u4e48\u6211\u4eec\u8ba9\u8fd9\u4e2a\u70b9\u8d70\u5411\u7b2c\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u4f1a\u8d70\u5411\u4e00\u4e2a\u5faa\u73af\uff0c\u7b26\u5408\u9898\u610f\u3002\n\n\u505a\u5b8c\u4e0a\u9762\u4e24\u6b65\u540e,\u904d\u5386\u6574\u4e2a\u56fe\u770b\u770b\u6709\u6ca1\u6709\u8fd8\u6ca1\u8d4b\u503c\u7684\u70b9,\u6709\u7684\u8bdd\u5c31\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u56fe,\u6ca1\u6709\u7684\u8bdd\u5c31\u662f\u5b58\u5728,\u8f93\u51fa\u5373\u53ef\u3002\n\n\u6211\u89c9\u5f97\u6bd4\u8f83\u96be\u7684\u662f\u5b58\u56fe\uff0c\u8bd5\u4e86\u51e0\u79cd\u65b9\u6cd5\uff0c\u6700\u540e\u662f\u4e8c\u7ef4\u7ed3\u6784\u4f53\u6210\u529f\u4e86\u3002\u7ed3\u6784\u4f53\u4e0b\u6807\u5b58\u56fe\u7684\u4f4d\u7f6e\uff0c\u7ed3\u6784\u4f53\u91cc\u9762\u7684\u53d8\u91cf\u5b58\u4ed6\u8981\u53bb\u7684\u5730\u65b9\u3002\n\n\u4e0b\u9762\u662f AC \u4ee3\u7801,\u7ec6\u8282\u6ce8\u91ca\u5728\u4ee3\u7801\u91cc\u4e86\u3002\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define ld long double\n#define inf 0x7f7f7f7f\n#define maxn 1000010\n#define ri register int\n#define il inline\n#define mod 1000000009\n#define db() cout << 1 << endl\nusing namespace std;\nint dx[]={0,0,1,-1};\nint dy[]={1,-1,0,0};\nchar dz[]=\"LRUD\";//dfs\u65f6\u53cd\u63a8\u7684\u65b9\u5411\nchar dzz[]=\"RLDU\";//\u6784\u9020\u65f6\u6b63\u63a8\u7684\u65b9\u5411\nchar ans[1010][1010];//\u7b54\u6848\u6570\u7ec4\nstruct node \n{\n\tint x,y;\n\tbool operator ==(node b)//\u91cd\u5b9a\u4e49\u76f8\u7b49\u7684\u7b26\u53f7\n\t{\n\t\treturn (x==b.x&&y==b.y);\n\t}\n}a[1010][1010];\nint n;\nvoid dfs(int x,int y)//\u4ece\u7ec8\u70b9\u53cd\u63a8\n{\n\tfor(int i=0;i<4;i++)\n\t{\n\t\tint b=x+dx[i];\n\t\tint c=y+dy[i];//\u8d70\u5230\u4e0b\u4e00\u4e2a\n\t\tif(b<1||b>n||c<1||c>n||ans[b][c])\n\t\t\tcontinue;//\u8d8a\u754c\u6216\u5df2\u7ecf\u627e\u8fc7\n\t\tif(a[b][c]==a[x][y])//\u5982\u679c\u4e0b\u4e2a\u4f4d\u7f6e\u8981\u53bb\u7684\u5730\u65b9\u662f\u73b0\u5728\u7684\u4f4d\u7f6e\n\t\t\tans[b][c] = dz[i],dfs(b,c);\n\t}\n}\nsigned main()\n{\n\tios::sync_with_stdio(0);\n\tcin >> n;\n\tint p = 0;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tcin >> a[i][j].x >> a[i][j].y;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(a[i][j].x==i&&a[i][j].y==j)\n\t\t\t{//\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u7ec8\u70b9\u662f\u81ea\u5df1,\u90a3\u4e48\u4ed6\u5c31\u662f\u975e\u5faa\u73af\u8def\u7684\u7ec8\u70b9\n\t\t\t\tans[i][j]='X';\n\t\t\t\tdfs(i,j);\n\t\t\t}\t\t\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)//\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\n\t\t\tif(a[i][j].x==-1&&!ans[i][j])//\u5982\u679c\u662f\u5faa\u73af\u7684\u70b9\u4e14\u672a\u8d4b\u503c\n\t\t\t\tfor(int k=0;k<4;k++)\n\t\t\t\t{\n\t\t\t\t\tint b=i+dx[k];\n\t\t\t\t\tint c=j+dy[k];//\u8d70\u5230\u4e0b\u4e00\u4e2a\u70b9\n\t\t\t\t\tif(b<1||b>n||c<1||c>n)\n\t\t\t\t\t\tcontinue;//\u8d8a\u754c\n\t\t\t\t\tif(a[b][c].x==-1)//\u627e\u5230\u4e86\u7b2c\u4e8c\u4e2a\u5faa\u73af\u7684\u70b9\n\t\t\t\t\t{\t\t\t\n\t\t\t\t\t//\tcout << b << \" \"<< c << \" \" <<k<<endl;\n\t\t\t\t\t\tif(!ans[b][c])//\u7b2c\u4e8c\u4e2a\u70b9\u672a\u8d4b\u503c\n\t\t\t\t\t\t\tans[i][j] = dzz[k],ans[b][c] = dz[k];\n\t\t\t\t\t\telse//\u5df2\u8d4b\u503c\n\t\t\t\t\t\t\tans[i][j] = dzz[k];\n\t\t\t\t\t\tbreak;//\u627e\u5230\u4e00\u4e2a\u5373\u53ef,\u9000\u51fa\n\t\t\t\t\t}\t\t\n\t\t\t\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(!ans[i][j])\n\t\t\t{\n\t\t\t\tcout << \"INVALID\";\n\t\t\t\treturn 0;\n\t\t\t}//\u904d\u5386\u770b\u770b\u6709\u6ca1\u6709\u672a\u8d4b\u503c\u7684\u70b9\n\tcout << \"VALID\\n\";\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tcout << ans[i][j];\n\t\tcout << endl;\n\t}\n  \treturn 0;\n}\n```\n",
        "postTime": 1583454451,
        "uid": 287610,
        "name": "\u6d41\u7eea",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 CF1316D \u3010Nash Matrix\u3011"
    }
]