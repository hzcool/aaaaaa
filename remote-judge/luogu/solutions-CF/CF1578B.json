[
    {
        "content": "[\u4f20\u9001\u95e8](https://codeforces.com/contest/1578/problem/B)\n \n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u9700\u8981\u5e73\u8861\u6811\u4e5f\u4e0d\u9700\u8981\u542f\u53d1\u5f0f\u5408\u5e76~~\u4f46\u8dd1\u7684\u6bd4\u8fd9\u4e24\u4e2a\u90fd\u6162~~\u7684 $O(n\\log n)$ \u505a\u6cd5\u3002\n\n\u8003\u8651\u4e00\u4e2a\u8fde\u901a\u5757\u5185\u90e8\u7684\u8fb9\uff1a  \n\u5bb9\u6613\u53d1\u73b0\u53ef\u4ee5\u7b49\u6548\u6210 \u8fd9\u4e2a\u8fde\u901a\u5757\u4e2d\u7684\u6240\u6709\u70b9\u6784\u6210\u7684\u51f8\u591a\u8fb9\u5f62 \u7684\u8fb9\u3002  \n\u90a3\u4e48\u8003\u8651\u8fde\u901a\u4e24\u4e2a\u70b9\u4f1a\u4f7f\u5f97\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\u5408\u5e76\u3002  \n\u53d1\u73b0\u5408\u5e76\u6b21\u6570\u548c\u7ef4\u62a4\u51f8\u591a\u8fb9\u5f62\u6240\u9700\u7684\u8fb9\u7684\u53d8\u5316\u6b21\u6570\u90fd\u662f $O(n)$ \u7684\u3002\n\u90a3\u4e48\u6765\u5eb7\u5eb7\u600e\u4e48\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\uff1a  \n\u5c06\u73af\u5c55\u5f00\u4e3a\u94fe\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4 $pre1_i$ \u4e3a\u8fd9\u4e2a\u70b9\u6240\u5728\u51f8\u591a\u8fb9\u5f62\u4e0a\u7684\u7f16\u53f7\u5c0f\u4e8e\u8fd9\u4e2a\u70b9\u7684\u524d\u9a71\uff08\u82e5\u6ca1\u6709\u5219 $pre1_i=i$\uff09\u3002  \n\u82e5\u8fd9\u4e2a\u70b9\u7684\u540e\u7ee7\u4e3a\u51f8\u591a\u8fb9\u5f62\u4e0a\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\uff0c\u90a3\u4e48\u5c06 $pre2_i$ \u8bbe\u4e3a\u5176\u540e\u7ee7\uff0c\u5426\u5219 $pre2_i=i$\u3002  \n\u5bf9\u79f0\u5730\u7ef4\u62a4 $suf_1$ \u548c $suf_2$\u3002\n\n![image](https://cdn.luogu.com.cn/upload/image_hosting/81nqz2eu.png)\n\n\u4e8b\u5b9e\u4e0a\u5c31\u662f\u60f3\u7ef4\u62a4\u51fa\u5c55\u5f00\u540e\u7684\u7ed3\u679c\u5566\u3002  \n\u7136\u540e\u53d1\u73b0\u6dfb\u52a0\u4e00\u6761\u8fb9\u53ef\u80fd\u8de8\u8fc7\u82e5\u5e72\u6761\u5f53\u524d\u7ef4\u62a4\u7684\u8fb9\u3002  \n\u5c06\u6240\u6709\u6d89\u53ca\u5230\u7684\u8fb9\u7684\u7aef\u70b9\u62ce\u51fa\u6765\u5355\u72ec\u5904\u7406\u3002  \n\u53d1\u73b0\u5c06\u8fd9\u4e9b\u70b9\u5355\u72ec\u6392\u5e8f\u540e\u76f8\u90bb\u70b9\u5728\u65b0\u591a\u8fb9\u5f62\u4e0a\u4e00\u5b9a\u6709\u8fb9\uff08\u9664\u4e86 $(\u6700\u5c0f\u7684\u70b9, \u6700\u5927\u7684\u70b9)$ \u8fd9\u6761\u8fb9\uff09\u3002  \n\u90a3\u4e48\u5229\u7528\u8fd9\u4e9b\u8fb9\u66f4\u65b0\u6d89\u53ca\u5230\u7684\u70b9\u7684\u524d\u9a71\u540e\u7ee7\uff0c\u7279\u5224\u4e00\u4e0b\u6700\u5c0f\u7684\u70b9\u548c\u6700\u5927\u7684\u70b9\u4e4b\u95f4\u662f\u5426\u6709\u8fb9\u5373\u53ef\u3002  \n\u8981\u600e\u4e48\u627e\u5230\u65b0\u6dfb\u52a0\u7684\u8fb9 $(u, v)(u<v)$ \u8de8\u8fc7\u7684\u8fb9\u5462\uff1f  \n\u53d1\u73b0\u5c31\u662f $\\{(i, pre1/2_i)\\mid i\\in[u, v]\\land pre1/2_i\\leqslant u\\}$ \u548c $\\{(i, suf1/2_i)\\mid i\\in[u, v]\\land suf1/2_i\\geqslant v\\}$\u3002  \n\u90a3\u4e48\u7528\u4e00\u68f5\u7ebf\u6bb5\u6811\u5728\u8fd9\u4e2a\u533a\u95f4\u4e0a\u82e5\u6ee1\u8db3\u6761\u4ef6\u5c31\u5411\u4e0b\u9012\u5f52\u5373\u53ef\u3002  \n\u56e0\u4e3a\u6bcf\u8de8\u8fc7\u4e00\u6761\u8fb9\u5c31\u4f1a\u5bfc\u81f4\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u5408\u5e76\uff0c\u6240\u4ee5\u53d6\u51fa\u7684\u603b\u70b9\u6570\u662f $O(n)$ \u7684\u3002  \n\u6240\u4ee5\u6700\u7ec8\u590d\u6742\u5ea6\u662f $O(n\\log n)$ \u7684\uff0c\u4f46\u662f\u5e26\u4e86\u82e5\u5e72\u5e38\u6570\uff0c\u53ef\u80fd\u9700\u8981\u6bd4\u8f83\u7cbe\u7ec6\u7684\u5b9e\u73b0\u3002  \n\u7b14\u8005\u901a\u8fc7\u5c06\u7ebf\u6bb5\u6811\u7684\u5355\u70b9\u4fee\u6539\u90e8\u5206\u6539\u4e3a\u975e\u9012\u5f52\u5b9e\u73b0\u901a\u8fc7\u4e86\u672c\u9898\u3002  \n\n\u53e6\u9644\u4e24\u7ec4\u65b9\u4fbf\u8c03\u8bd5\u7684 hack \u6570\u636e\uff1a\n\n```\n8 6\n1 6 4\n1 6 8\n1 7 2\n1 4 2\n1 5 3\n2 5 6\n```\n```\n10 6\n1 5 10\n1 3 7\n1 6 9\n1 8 1\n1 2 4\n2 2 8\n```\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define INF 0x3f3f3f3f\n#define N 200010\n#define ll long long\n//#define int long long\n\nchar buf[1<<21], *p1=buf, *p2=buf;\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf, 1, 1<<21, stdin)), p1==p2?EOF:*p1++)\ninline int read() {\n\tint ans=0, f=1; char c=getchar();\n\twhile (!isdigit(c)) {if (c=='-') f=-f; c=getchar();}\n\twhile (isdigit(c)) {ans=(ans<<3)+(ans<<1)+(c^48); c=getchar();}\n\treturn ans*f;\n}\n\nint n, m;\nint dsu[N], sta[N*8], top;\ninline int find(int p) {return dsu[p]==p?p:dsu[p]=find(dsu[p]);}\n\nstruct seg1{\n\t#define tl(p) tl[p]\n\t#define tr(p) tr[p]\n\tint tl[N<<2], tr[N<<2], minn[N<<2], mini[N<<2], pos[N];\n\tinline void pushup(int p) {\n\t\tminn[p]=min(minn[p<<1], minn[p<<1|1]);\n\t\tmini[p]=minn[p]==minn[p<<1]?mini[p<<1]:mini[p<<1|1];\n\t}\n\tvoid build(int p, int l, int r) {\n\t\ttl(p)=l; tr(p)=r;\n\t\tif (l==r) {minn[p]=mini[p]=l; pos[l]=p; return ;}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(p<<1, l, mid);\n\t\tbuild(p<<1|1, mid+1, r);\n\t\tpushup(p);\n\t}\n\tvoid upd(int t, int p, int val) {for (minn[p=pos[p]]=val,p>>=1; p; p>>=1) pushup(p);}\n\tvoid chkmin(int t, int p, int val) {for (p=pos[p],minn[p]=min(minn[p], val),p>>=1; p; p>>=1) pushup(p);}\n\tvoid query(int p, int l, int r, int lim) {\n\t\tif (minn[p]>lim) return ;\n\t\tif (tl(p)==tr(p)) {sta[++top]=minn[p]; sta[++top]=tl(p); return ;}\n\t\tint mid=(tl(p)+tr(p))>>1;\n\t\tif (l<=mid) query(p<<1, l, r, lim);\n\t\tif (r>mid) query(p<<1|1, l, r, lim);\n\t}\n}pre1, pre2;\n\nstruct seg2{\n\t#define tl(p) tl[p]\n\t#define tr(p) tr[p]\n\tint tl[N<<2], tr[N<<2], maxn[N<<2], maxi[N<<2], pos[N];\n\tinline void pushup(int p) {\n\t\tmaxn[p]=max(maxn[p<<1], maxn[p<<1|1]);\n\t\tmaxi[p]=maxn[p]==maxn[p<<1]?maxi[p<<1]:maxi[p<<1|1];\n\t}\n\tvoid build(int p, int l, int r) {\n\t\ttl(p)=l; tr(p)=r;\n\t\tif (l==r) {maxn[p]=maxi[p]=l; pos[l]=p; return ;}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(p<<1, l, mid);\n\t\tbuild(p<<1|1, mid+1, r);\n\t\tpushup(p);\n\t}\n\tvoid upd(int t, int p, int val) {for (maxn[p=pos[p]]=val,p>>=1; p; p>>=1) pushup(p);}\n\tvoid chkmax(int t, int p, int val) {for (p=pos[p],maxn[p]=max(maxn[p], val),p>>=1; p; p>>=1) pushup(p);}\n\tvoid query(int p, int l, int r, int lim) {\n\t\tif (maxn[p]<lim) return ;\n\t\tif (tl(p)==tr(p)) {sta[++top]=maxn[p]; sta[++top]=tl(p); return ;}\n\t\tint mid=(tl(p)+tr(p))>>1;\n\t\tif (l<=mid) query(p<<1, l, r, lim);\n\t\tif (r>mid) query(p<<1|1, l, r, lim);\n\t}\n}suf1, suf2;\n\nsigned main()\n{\n\tn=read(); m=read();\n\tpre1.build(1, 1, n); pre2.build(1, 1, n);\n\tsuf1.build(1, 1, n); suf2.build(1, 1, n);\n\tfor (int i=1; i<=n; ++i) dsu[i]=i;\n\tfor (int i=1,u,v; i<=m; ++i) {\n\t\t// cout<<\"i: \"<<i<<endl;\n\t\tif (read()&1) {\n\t\t\tu=read(); v=read(); top=0;\n\t\t\tif (u>v) swap(u, v);\n\t\t\tif (find(u)==find(v)) continue;\n\t\t\tpre1.query(1, u, v, u); pre2.query(1, u, v, u);\n\t\t\tsuf1.query(1, u, v, v); suf2.query(1, u, v, v);\n\t\t\tsort(sta+1, sta+top+1);\n\t\t\ttop=unique(sta+1, sta+top+1)-sta-1;\n\t\t\t// cout<<\"sta: \"; for (int j=1; j<=top; ++j) cout<<sta[j]<<' '; cout<<endl;\n\t\t\tfor (int j=1; j<top; ++j) dsu[find(sta[j])]=find(sta[j+1]);\n\t\t\tfor (int j=1; j<top; ++j) pre1.upd(1, sta[j+1], sta[j]), pre2.upd(1, sta[j], sta[j]);\n\t\t\tfor (int j=2; j<=top; ++j) suf1.upd(1, sta[j-1], sta[j]), suf2.upd(1, sta[j], sta[j]);\n\t\t\tpre2.chkmin(1, sta[top], sta[1]);\n\t\t\tsuf2.chkmax(1, sta[1], sta[top]);\n\t\t\t// cout<<\"pre1: \"; for (int j=1; j<=n; ++j) cout<<pre1[j]<<' '; cout<<endl;\n\t\t\t// cout<<\"pre2: \"; for (int j=1; j<=n; ++j) cout<<pre2[j]<<' '; cout<<endl;\n\t\t}\n\t\telse printf(\"%d\", find(read())==find(read()));\n\t}\n\tprintf(\"\\n\");\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1669169569,
        "uid": 299872,
        "name": "_ICEY_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 [CF1578B] Building Forest Trails"
    },
    {
        "content": "\u672c\u6587\u8d77\u7b14\u4e8e```2021.12.07```\u3002\n\n[CF1578B Building Forest Trails](https://www.luogu.com.cn/problem/CF1578B)\n\n\uff08\u5185\u5bb9\u54ea\u91cc\u65e0\u610f\u4e49\u4e86\uff1f\u96be\u9053 LuoGu \u4e0a UKE \u5c31\u4ee3\u8868\u6211\u7b97\u6cd5\u9519\u4e86\uff1fCF\u4e0a\u901a\u8fc7\u4e86\u5582\uff01\u6c42\u7ba1\u7406\u5458\u5927\u5927\u7ed9\u901a\u8fc7\u5ba1\u6838\uff0c\u6216\u8005\u6307\u51fa\u54ea\u91cc\u65e0\u610f\u4e49\uff0c\u6211\u53bb\u4fee\u6539\uff09\n\n\u96be\u5ea6\u5e94\u8be5\u5728\u7d2b\uff0c\u4f46\u5f88\u8003\u7801\u529b\uff0c\u96be\u70b9\u90fd\u5728\u4ee3\u7801\u5b9e\u73b0\u65b9\u9762\u4e86\uff0c\u7136\u9e45\u5199\u5b8c\u9898\u540e\u53d1\u73b0\u9898\u89e3\u6bd4\u9898\u66f4\u96be\u5199\u3002\n\n\u77e5\u8bc6\u70b9\uff1a\u5e76\u67e5\u96c6 + $\\text{FHQ Treap}$\u3002\n\n\u4e0d\u96be\u60f3\u5230\u7528\u5e76\u67e5\u96c6\u6765\u56de\u7b54\u67e5\u8be2\uff0c\u6240\u4ee5\u95ee\u9898\u7684\u5173\u952e\u8f6c\u5316\u4e3a\u6bcf\u6b21\u8fde\u8fb9\u65f6\u8981\u5c06\u54ea\u4e9b\u96c6\u5408\u5408\u5e76\u3002\n\n\u5177\u4f53\u4e00\u70b9\uff0c\u7ed9\u5b9a\u4e00\u6761\u5c06\u8981\u8fde\u7684\u8fb9 $(l,r)$ \u4e0d\u59a8\u8bbe $l<r$\uff0c\u6211\u4eec\u9700\u8981\u5feb\u901f\u77e5\u9053 $(l,r)$ \u7a7f\u8fc7\u54ea\u4e9b\u96c6\u5408\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u96c6\u5408\u5408\u5e76\u8d77\u6765\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\u6b63\u786e\u3002\n\n\u82e5\u8981\u5224\u65ad\u8fb9 $(l,r)$ \u662f\u5426\u7a7f\u8fc7\u4e00\u4e2a\u96c6\u5408 $S$\uff0c\u5219\u9700\u5224\u65ad\u5728\u4f7f\u5f97 $S$ \u8fde\u901a\u7684\u90a3\u7ec4\u8fb9\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e00\u6761\u4e0e $(l,r)$ \u76f8\u4ea4\u7684\u8fb9 $(tl,tr)$ \uff08\u7aef\u70b9\u76f8\u4ea4\u4e5f\u7b97\u76f8\u4ea4\uff09\uff0c\u800c\u5224\u65ad\u4e24\u6761\u8fb9\u662f\u5426\u76f8\u4ea4\u5219\u76f8\u5f53\u4e8e\u5224\u65ad\u4e24\u6761\u8fb9\u5bf9\u5e94\u7684\u533a\u95f4\u662f\u5426\u6709\u91cd\u53e0\u7684\u90e8\u5206\uff08\u5728\u7aef\u70b9\u5904\u91cd\u53e0\u4e5f\u7b97\u76f8\u4ea4\uff09\u3002 \n\n\u5bb9\u6613\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5173\u5fc3\u662f\u54ea\u4e9b\u8fb9\u4f7f\u8fd9\u4e2a\u96c6\u5408\u8fde\u901a\u8d77\u6765\uff0c\u56e0\u4e3a\u82e5 $(l,r)$ \u7a7f\u8fc7\u96c6\u5408 $S$\uff0c\u5219\u4e0d\u7ba1\u662f\u54ea\u7ec4\u8fb9\u5c06 $S$ \u8fde\u901a\u8d77\u6765\u7684\uff0c$(l,r)$ \u80af\u5b9a\u4f1a\u4e0e\u8fd9\u7ec4\u8fb9\u7684\u5176\u4e2d\u4e4b\u4e00\u76f8\u4ea4\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u6c42\u89e3\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u96c6\u5408\u9009\u53d6\u4e00\u7ec4\u4ee3\u8868\u8fb9\uff0c\u6bd4\u5982\u5bf9\u4e8e\u96c6\u5408 $S=\\{1,4,5,8,12\\}$\uff0c\u6211\u4eec\u9009\u53d6 $(1,4),(4,5),(5,8),(8,12)$ \u4f5c\u4e3a\u4ee3\u8868\u8fb9\uff0c\u5373\u9009\u53d6\u9996\u5c3e\u76f8\u63a5\u7684\u8fb9\uff0c\u8fd9\u6837\u9009\u53d6\u7684\u4f18\u70b9\u662f\u8fd9\u4e9b\u8fb9\u53ea\u5728\u7aef\u70b9\u5904\u76f8\u4ea4\uff0c\u7701\u53bb\u4e86\u5f88\u591a\u9ebb\u70e6\u3002\n\n\u4e0b\u4e00\u6b65\u5c31\u6709\u70b9\u96be\u8bf4\u660e\u4e86\uff0c\u53ea\u80fd\u4e0a\u56fe\uff0c\u610f\u601d\u662f\u5728\u4ec5\u8fde\u4ee3\u8868\u8fb9\u65f6\uff0c\u96c6\u5408\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u53ef\u4ee5\u6784\u6210\u4e00\u9897\u6811\uff0c\u76f8\u4fe1\u4ece\u56fe\u4e2d\u4e0d\u96be\u770b\u51fa\u8fd9\u9897\u6811\u662f\u5982\u4f55\u6784\u5efa\u51fa\u6765\u7684\u3002\n\n\u4e0b\u56fe\u4e2d\u662f\u8fde\u8fb9\u540e\u4ee3\u8868\u8fb9\u96c6\u4e3a $(1,10),(10,20)\\ ||\\ (2,9)\\ ||\\ (3,5)\\ ||\\ (6,8)\\ ||\\ (11,20)\\ ||\\ (13,18)$ \u7684\u7ed3\u679c\uff0c\u5176\u4e2d\u5206\u5212\u7ebf\u5206\u5f00\u4e86\u4e0d\u540c\u7684\u96c6\u5408\u3002\n\n\u5efa\u8bae\u5148\u5728\u8349\u7a3f\u7eb8\u4e0a\u753b\u56f4\u6210\u5708\u7684 20 \u4e2a\u70b9\uff0c\u8fde\u4e0a\u8fb9\u540e\u518d\u5bf9\u7167\u4e0b\u56fe\uff08\u6211\u4e0d\u4f1a\u9ad8\u7ea7\u7684\u4f5c\u56fe\u5de5\u5177\uff0c\u53ea\u80fd\u5c06\u5c31\u5c06\u5c31\u4e86/xk\uff09\uff0c\u6839\u8282\u70b9\u662f\u4e00\u4e2a\u4e3a\u4e86\u65b9\u4fbf\u4ee3\u7801\u5b9e\u73b0\u800c\u8bbe\u7684\u865a\u8282\u70b9\u3002\n\n![1](https://cdn.luogu.com.cn/upload/image_hosting/jrcm9vcf.png)\n\n\u6211\u4eec\u6682\u4e14\u79f0\u8fd9\u9897\u6811\u4e3a\u533a\u95f4\u6bb5\u6811\uff0c\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u90fd\u4ee3\u8868\u4e00\u4e2a\u8fde\u901a\u7684\u96c6\u5408 $S$\uff0c\u6bcf\u4e00\u4e2a\u70b9\u90fd\u5b58\u6709\u8fd9\u4e2a\u96c6\u5408\u7684\u8de8\u5ea6\uff0c\u5373\u8fd9\u4e2a\u96c6\u5408\u5305\u542b\u7684\u6700\u5c0f\u8282\u70b9\u7f16\u53f7 $le$ \u4ee5\u53ca\u6700\u5927\u8282\u70b9\u7f16\u53f7 $ri$\uff0c\u79f0 $[le,ri]$ \u4e3a $S$ \u5bf9\u5e94\u7684\u533a\u95f4\uff0c \u4ee5\u4e0b\u7528\u96c6\u5408\u5bf9\u5e94\u7684\u533a\u95f4\u6307\u4ee3\u8fd9\u4e2a\u96c6\u5408\uff0c\u56fe\u4e2d\u8282\u70b9\u4e0a\u7684\u533a\u95f4\u4ee3\u8868\u4e86\u5bf9\u5e94\u96c6\u5408\u7684\u8de8\u5ea6\u3002\n\n\u8fd9\u9897\u6811\u4e4b\u6240\u4ee5\u53ef\u4ee5\u5efa\u51fa\u6765\uff0c\u662f\u56e0\u4e3a\u96c6\u5408\u4eec\u5bf9\u5e94\u533a\u95f4\u4e4b\u95f4\u7684\u5173\u7cfb\u8981\u4e48\u662f\u5305\u542b\u8981\u4e48\u662f\u76f8\u79bb\u3002\n\n\u7136\u540e\u6211\u4eec\u7528 $son(S)$ \u8868\u793a\u96c6\u5408 $S$ \u5728\u533a\u95f4\u6bb5\u6811\u4e0a\u5bf9\u5e94\u7684\u513f\u5b50\u4eec\uff0c$son(S)$ \u53ef\u4ee5\u7528 $\\text{FHQ Treap}$ \u7ef4\u62a4\uff08\u6ce8\u610f $\\text{FHQ Treap}$ \u7ef4\u62a4\u7684\u662f\u67d0\u4e2a\u96c6\u5408\u7684\u513f\u5b50\u96c6\uff0c\u4e0d\u662f\u7ef4\u62a4\u533a\u95f4\u6bb5\u6811\uff0c\u6240\u4ee5\u533a\u95f4\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u90fd\u5bf9\u5e94\u4e86\u4e00\u9897 $\\text{FHQ Treap}$\uff09\u3002\n\n\u73b0\u5728\u6211\u4eec\u601d\u8003\u8fde\u8fb9\u4f1a\u5bf9\u8fd9\u9897\u6811\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\uff1f\n\n#### \u60c5\u51b5\u4e00\n\n![2](https://cdn.luogu.com.cn/upload/image_hosting/ya8otthv.png)\n\n\u8fde\u8fb9 $(10,13)$\uff0c\u8fb9\u7684\u4e24\u7aef\u70b9\u6240\u5728\u96c6\u5408\u5206\u522b\u4e3a $[1:20]$ \u548c $[13:18]$\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e24\u4e2a\u96c6\u5408\u5728\u533a\u95f4\u6bb5\u6811\u4e0a\u7684\u8def\u5f84\u662f\u4e00\u6761\u4ece\u4e0a\u5f80\u4e0b\u7684\u94fe\u3002\n\n\u6b64\u65f6\u94fe\u4e0a\u7684\u6bcf\u4e2a\u96c6\u5408\u5c31\u662f\u8981\u5408\u5e76\u7684\u96c6\u5408\uff0c\u6240\u6709\u96c6\u5408\u5408\u5e76\u5230 $\\text{LCA}$\uff08$[1:20]$\uff09\uff0c\u800c\u4e14\u6240\u6709\u96c6\u5408\u7684\u513f\u5b50\u4eec\u90fd\u8981\u6210\u4e3a $\\text{LCA}$ \u7684\u513f\u5b50\uff08\u8981\u5408\u5e76\u513f\u5b50\u96c6\uff09\u3002\n\n\u5408\u5e76\u540e\u533a\u95f4\u6bb5\u6811\u53d8\u4e3a\n\n![3](https://cdn.luogu.com.cn/upload/image_hosting/5dyv9a65.png)\n\n\u4ee3\u8868\u8fb9\u96c6\u53d8\u4e3a $(1,10),(10,13),(13,18),(18,20)\\ ||\\ (2,9)\\ ||\\ (3,5)\\ ||\\ (6,8)$\u3002\n\n#### \u60c5\u51b5\u4e8c\n\n![4](https://cdn.luogu.com.cn/upload/image_hosting/sgpisufi.png)\n\n\u8fde\u8fb9 $(7,13)$\uff0c\u8fb9\u7684\u4e24\u7aef\u70b9\u6240\u5bf9\u5e94\u7684\u96c6\u5408\u5206\u522b\u4e3a $[7:7]$ \u548c $[13:18]$\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e24\u4e2a\u96c6\u5408\u5728\u533a\u95f4\u6bb5\u6811\u4e0a\u7684 $\\text{LCA}$\uff08$[1:20]$\uff09\u4e0d\u662f\u4e24\u4e2a\u96c6\u5408\u7684\u5176\u4e2d\u4e4b\u4e00\uff0c\u4e14\u6700\u9760\u8fd1 $\\text{LCA}$ \u7684\u4e24\u4e2a\u96c6\u5408 $S_u=[2:9],S_v=[11:20]$ \u4e4b\u95f4\u6709\u7a7a\u9699\uff08$10$ \u4e0d\u5b58\u5728\uff09\u3002\n\n\u6b64\u65f6\u94fe\u4e0a\u7684\u6bcf\u4e2a\u96c6\u5408\u90fd\u8981\u5408\u5e76\u5230 $\\text{LCA}$\uff0c\u800c\u4e14\u6240\u6709\u96c6\u5408\u7684\u513f\u5b50\u4eec\u90fd\u8981\u6210\u4e3a $\\text{LCA}$ \u7684\u513f\u5b50\u3002\n\n\u5408\u5e76\u540e\u533a\u95f4\u6bb5\u6811\u53d8\u4e3a\n\n![5](https://cdn.luogu.com.cn/upload/image_hosting/4t4xw44h.png)\n\n\u4ee3\u8868\u8fb9\u96c6\u53d8\u4e3a $(1,2),(2,6),(6,7),(7,8),(8,9),(9,10),(10,13),(13,18),(18,20)\\ ||\\ (3,5)$\u3002\n\n#### \u60c5\u51b5\u4e09\n\n![6](https://cdn.luogu.com.cn/upload/image_hosting/jr0na23q.png)\n\n\u8fde\u8fb9 $(14,17)$\uff0c\u8fb9\u7684\u4e24\u7aef\u70b9\u6240\u5bf9\u5e94\u7684\u96c6\u5408\u5206\u522b\u4e3a $[14:14]$ \u548c $[17:17]$\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e24\u4e2a\u96c6\u5408\u5728\u533a\u95f4\u6bb5\u6811\u4e0a\u7684 $\\text{LCA}$\uff08$[13:18]$\uff09\u4e0d\u662f\u4e24\u4e2a\u96c6\u5408\u7684\u5176\u4e2d\u4e4b\u4e00\uff0c\u4e14\u6700\u9760\u8fd1 $\\text{LCA}$ \u7684\u4e24\u4e2a\u96c6\u5408 $S_u=[14:14],S_v=[17:17]$ \u4e4b\u95f4\u6ca1\u6709\u7a7a\u9699\uff08$15,16$ \u90fd\u5b58\u5728\uff09\u3002\n\n\u6b64\u65f6\u94fe\u4e0a\u7684\u6bcf\u4e2a\u96c6\u5408\u9664 $\\text{LCA}$ \u5916\u90fd\u8981\u5408\u5e76\u5230\u4e00\u8d77\uff0c\u6210\u4e3a\u4e00\u4e2a\u65b0\u7684\u96c6\u5408\uff0c\u800c\u4e14\u6240\u6709\u53c2\u4e0e\u5408\u5e76\u7684\u96c6\u5408\uff08\u4e0d\u5305\u62ec $\\text{LCA}$\uff09\u7684\u513f\u5b50\u4eec\u90fd\u8981\u6210\u4e3a\u65b0\u96c6\u5408\u7684\u513f\u5b50\uff0c\u800c\u4e14 $S_u$ \u4e0e $S_v$ \u4e2d\u95f4\u8fde\u7eed\u7684\u90a3\u4e00\u6bb5\uff08$[15:15],[16:16]$\uff09\u4e5f\u8981\u6210\u4e3a\u65b0\u96c6\u5408\u7684\u513f\u5b50\uff0c\u6700\u540e\u8fd9\u4e2a\u65b0\u96c6\u5408\u6210\u4e3a $\\text{LCA}$ \u7684\u513f\u5b50\u3002\n\n\u5408\u5e76\u540e\u533a\u95f4\u7ebf\u6bb5\u6811\u53d8\u4e3a\n\n![7](https://cdn.luogu.com.cn/upload/image_hosting/dg8jnl79.png)\n\n\u4ee3\u8868\u8fb9\u96c6\u53d8\u4e3a $(1,10),(10,20)\\ ||\\ (2,9)\\ ||\\ (3,5)\\ ||\\ (6,8)\\ ||\\ (11,20)\\ ||\\ (13,18)\\ ||\\ (14,17)$\u3002\n\n#### \u60c5\u51b5\u56db\n\n\u8fde\u8fb9 $(10,20)$\uff0c\u8fb9\u7684\u4e24\u7aef\u7684\u5bf9\u5e94\u7684\u96c6\u5408\u4e3a\u540c\u4e00\u4e2a\uff0c\u5373 $[1:20]$\uff0c\u8fd9\u79cd\u60c5\u51b5\u76f8\u5f53\u4e8e\u4ec0\u4e48\u4e8b\u90fd\u6ca1\u5e72\uff0c\u533a\u95f4\u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\u4e5f\u4e0d\u4f1a\u6539\u53d8\uff0c\u5ffd\u7565\u5373\u53ef\u3002\n\n#### \u4ee3\u7801\u5b9e\u73b0\n\n\u7b97\u6cd5\u7684\u63cf\u8ff0\u5b8c\u6210\u4e86\uff0c\u4ee3\u7801\u5b9e\u73b0\u624d\u662f\u6700\u96be\u7684\uff0c\u597d\u50cf\u66f4\u96be\u8bb2\u4e86\uff0c\u8fd9\u91cc\u53ea\u80fd\u7b80\u7565\u8c08\u4e00\u4e0b\u6838\u5fc3\u601d\u60f3\u3002\n\n\u6bcf\u4e2a\u96c6\u5408\u7684\u513f\u5b50\u96c6\u662f\u4e00\u9897 $\\text{FHQ Treap}$\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5728\u533a\u95f4\u6bb5\u6811\u4e0a\u5c06\u513f\u5b50\u96c6\u5408\u5408\u5e76\uff0c\u90fd\u662f\u4ece\u4e0b\u5f80\u4e0a\u5408\u5e76\u7684\uff0c\u4e8e\u662f\u8fd9\u53ef\u4ee5\u7528 $\\text{FHQ Treap}$ \u7684\u5206\u88c2\u53ca\u5408\u5e76\u64cd\u4f5c\u4ee5\u5355\u6b21\u5408\u5e76 $O(\\log n)$ \u5b8c\u6210\u3002\n\n\u5bf9\u4e8e\u5728\u533a\u95f4\u6bb5\u6811\u4e0a\u6c42 $\\text{LCA}$ \u53ca $S_u,S_v$\uff0c\u5219\u53ef\u901a\u8fc7\u66b4\u529b\u8df3\u7236\u4eb2\u7684\u65b9\u5f0f\u6c42\u51fa\uff0c\u6240\u4ee5\u9700\u8981\u5728\u6bcf\u9897 $\\text{FHQ Treap}$ \u7684\u6839\u8282\u70b9\u5904\u8bb0\u5f55\u8fd9\u9897 $\\text{FHQ Treap}$ \u662f\u54ea\u4e2a\u96c6\u5408\u7684\u513f\u5b50\u96c6\u5408\u3002\u5e76\u4e14\u5728\u6bcf\u4e2a\u96c6\u5408 $S$ \u5728\u5176\u7236\u4eb2\u7684\u513f\u5b50\u96c6\u4e2d\u6709\u4e00\u4e2a $\\text{FHQ Treap}$ \u8282\u70b9 $nd(S)$\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u5728 $S$ \u4e0a\u8bb0\u5f55 $nd(S)$\uff08\u4e4b\u6240\u4ee5\u4e0d\u76f4\u63a5\u8bb0\u5f55\u8fd9\u4e2a\u96c6\u5408 $S$ \u5728\u533a\u95f4\u6bb5\u6811\u4e0a\u7684\u7236\u4eb2\u662f\u8c01\uff0c\u662f\u56e0\u4e3a\u5728\u4fee\u6539\u64cd\u4f5c\u4e2d\u5bf9\u533a\u95f4\u6bb5\u6811\u7ed3\u6784\u7684\u4fee\u6539\u4f1a\u6539\u53d8\u5f88\u591a\u7236\u5b50\u5173\u7cfb\uff09\u3002\n\n\u7136\u540e\u5728 $\\text{FHQ Treap}$ \u4ece $nd(S)$ \u5f80\u4e0a\u8df3\uff0c\u8df3\u5230\u6839\u8282\u70b9\uff0c\u518d\u901a\u8fc7\u6839\u8282\u70b9\u4e0a\u8bb0\u5f55\u7684\u4fe1\u606f\u5f97\u77e5\u8fd9\u9897 $\\text{FHQ Treap}$ \u662f\u8c01\u7684\u513f\u5b50\u96c6\uff0c\u4e5f\u5c31\u77e5\u9053\u5230\u4e86\u5728\u533a\u95f4\u6bb5\u6811\u4e0a $S$ \u7684\u7236\u4eb2\u662f\u8c01\uff0c\u5728\u533a\u95f4\u6bb5\u6811\u4e0a\u627e\u67d0\u4e2a\u96c6\u5408\u7684\u7236\u4eb2\u4ee5\u5355\u6b21 $O(\\log n)$ \u5b8c\u6210\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u533a\u5206\u60c5\u51b5\u4e8c\u548c\u60c5\u51b5\u4e09\uff0c\u5373\u5982\u4f55\u5f97\u77e5 $S_u$ \u4e0e $S_v$ \u4e4b\u95f4\u662f\u5426\u8fde\u7eed\uff0c\u5219\u9700\u8981\u5728 $\\text{FHQ Treap}$ \u4e0a\u591a\u7ef4\u62a4\u4e00\u4e2a\u6807\u8bb0 $tag$\uff0c\u4ee3\u8868\u8fd9\u4e2a$\\text{FHQ Treap}$ \u91cc\u662f\u5426\u8fde\u7eed\uff0c\u4e8e\u662f\u53ef\u5728 $S_u$ \u4e0e $S_v$ \u7684 $\\text{LCA}$ \u7684\u513f\u5b50\u96c6\u5408\u4e2d\u5148\u5206\u88c2\u51fa\u5305\u542b $S_u$ \u548c $S_v$ \u7684\u90a3\u4e00\u9897 $\\text{FHQ Treap}$\uff0c\u7136\u540e\u901a\u8fc7\u6839\u8282\u70b9\u7684 $tag$ \u5feb\u901f\u5224\u65ad\uff0c\u8fd9\u4e00\u6b65\u4e5f\u662f\u5355\u6b21 $O(\\log n)$\u3002\n\n\u56e0\u4e3a\u96c6\u5408\u4eec\u6700\u591a\u5408\u5e76 $n-1$ \u6b21\uff0c\u6bcf\u6b21\u5408\u5e76\u4e2d\u4e0a\u8ff0\u4e09\u4e2a $O(\\log n)$ \u7684\u64cd\u4f5c\u4f1a\u5404\u8fdb\u884c $O(1)$ \u6b21\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\u3002\n\n\u5f53\u7136\uff0c\u8fd9\u9897 $\\text{FHQ Treap}$ \u5b9e\u5728\u592a\u590d\u6742\u4e86\uff0c \u5e38\u6570\u4e5f\u4f1a\u6709\u70b9\u5927\uff0c\u65f6\u9650\u5f00 $3s$ \u5e76\u4e0d\u8fc7\u5206\u3002\n\nCF \u4e0a\u63d0\u4ea4 $AC$ \u4e86\uff0c\u4f46\u5728\u6d1b\u8c37\u4e0a\u63d0\u4ea4 $UKE$ \u4e86\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9e1znt9n.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/0wy2ce1d.png)\n\n```6k```\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include <stdio.h>\n#include <algorithm>\n#include <string.h>\n#include <iostream>\n#include <assert.h>\n#include <random> \nusing namespace std;\n\n#define re register\n#define sf scanf\n#define pf printf\n#define nl() putchar('\\n')\n#define ms(x, val) memset(x, val, sizeof(x))\n#define ll long long\n#define _for(i, a, b) for(re int (i) = (a); (i) < (b); ++(i))\n#define _rfor(i, a, b) for(re int (i) = (a); (i) <= (b); ++(i))\n#define _fev(p, u) for(re int (p) = head[(u)]; (p); (p) = nex[(p)])\n#define inf 0x7fffffffffffffffll\n#define maxn 200005\n#define maxnn (4*maxn)\n\ntemplate <class T>\nvoid print(string name, T arr[], int n, int flag = 1){\n\tcout<<name<<\":\";\n\t_for(i, 0, n)cout<<\" \"<<arr[i+flag];\n\tcout<<endl;\n}\n\nint rdnt(){\n\tre int x = 0, sign = 1;\n\tre char c = getchar();\n\twhile (c < '0' || c > '9') { if (c == '-') sign = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9') x = (x<<3) + (x<<1) + (c ^ 48), c = getchar();\n\treturn x * sign;\n}\n\nmt19937 engine(315);\nuniform_int_distribution<ll> dstr(0, inf);\nll randnt(){ return dstr(engine); }\n\nint pcnt = 0, pool[maxnn];\nstruct Union{ int nd, uf, le, ri, rt; } union_[maxn];\nstruct Treap{ int bl, fa, vl, sz, lc, rc, L, R; bool tag; ll pri; } treap[maxnn];\n#define nd(x) union_[x].nd\n#define uf(x) union_[x].uf\n#define le(x) union_[x].le\n#define ri(x) union_[x].ri\n#define rt(x) union_[x].rt\n#define bl(x) treap[x].bl\n#define fa(x) treap[x].fa\n#define vl(x) treap[x].vl\n#define sz(x) treap[x].sz\n#define lc(x) treap[x].lc\n#define rc(x) treap[x].rc\n#define tag(x) treap[x].tag\n#define R(x) treap[x].R\n#define L(x) treap[x].L\n#define pri(x) treap[x].pri\nint new_node(re int nn){ re int x = pool[pcnt--]; treap[x] = treap[nn]; pri(x) = randnt(); return x; }\nvoid del_node(re int x){ pool[++pcnt] = x; }\n\nint stk[maxn];\nint find(re int u){\n\tre int top = 0;\n\twhile(uf(u) > 0) stk[top++] = u, u = uf(u);\n\twhile(top) uf(stk[--top]) = u;\n\treturn u;\n}\n\n//void print(int x, int dep = 0){\n//\t_for(i, 0, dep) pf(\"\\t\");\n//\tif (x == 0){ pf(\"none\\n\"); return; }\n//\tpf(\"bl:%d vl:%d sz:%d tag:%d L:%d R:%d\\n\", bl(x), vl(x), sz(x), tag(x), L(x), R(x));\n//\tprint(lc(x), dep+1);\n//\tprint(rc(x), dep+1);\n//}\n//\n//void dfs(int x, vector<int> &vec){\n//\tif (!x) return;\n//\tdfs(lc(x), vec);\n//\tvec.push_back(vl(x));\n//\tdfs(rc(x), vec);\n//}\n\nbool cmp(re int v1, re int v2){ return le(v1) < le(v2); }\n\nvoid ud(re int x){\n\tsz(x) = 1; tag(x) = true;\n\tif (lc(x)){\n\t\ttag(x) &= tag(lc(x)) && R(lc(x))+1 == le(vl(x));\n\t\tsz(x) += sz(lc(x));\n\t\tL(x) = L(lc(x));\n\t\tfa(lc(x)) = x;\n\t\tbl(lc(x)) = -1;\n\t}\n\telse L(x) = le(vl(x));\n\tif (rc(x)){\n\t\ttag(x) &= tag(rc(x)) && ri(vl(x))+1 == L(rc(x));\n\t\tsz(x) += sz(rc(x));\n\t\tR(x) = R(rc(x));\n\t\tfa(rc(x)) = x;\n\t\tbl(rc(x)) = -1;\n\t}\n\telse R(x) = ri(vl(x));\n\tfa(x) = 0;\n}\n\nvoid split(int x, int v, int &ltr, int &rtr, bool fg){\n\tif (!x){ ltr = rtr = 0; return; }\n\tbool judge = (fg?vl(x)==v:false) || cmp(vl(x), v);\n\tif (judge){\n\t\tltr = x;\n\t\tsplit(rc(x), v, rc(ltr), rtr, fg);\n\t\tud(ltr);\n\t}\n\telse{\n\t\trtr = x;\n\t\tsplit(lc(x), v, ltr, lc(rtr), fg);\n\t\tud(rtr);\n\t}\n}\n\nint merge(int x, int y){\n\tif (!x || !y){ if (x+y != 0) ud(x+y); return x+y; }\n\tif (pri(x) <= pri(y)){\n\t\trc(x) = merge(rc(x), y); ud(x);\n\t\treturn x;\n\t}\n\telse{\n\t\tlc(y) = merge(x, lc(y)); ud(y);\n\t\treturn y;\n\t}\n}\n\nvoid ins(int &x, int v){\n\tre int ltr = 0, rtr = 0, d = new_node(0);\n\tsz(d) = 1; vl(nd(v) = d) = v; tag(d) = true; L(d) = le(v); R(d) = ri(v);\n\tsplit(x, v, ltr, rtr, false);\n\tx = merge(merge(ltr, d), rtr);\n}\n\nvoid del(re int &rt, re int v){\n\tif (!rt) return;\n\tre int ltr = 0, mtr = 0, rtr = 0;\n\tsplit(rt, v, ltr, mtr, false);\n\tsplit(mtr, v, mtr, rtr, true);\n\trt = merge(ltr, rtr);\n\tnd(v) = 0;\n\tif (mtr) del_node(mtr);\n}\n\nbool unite(re int u, re int v){\n\tuf(u) += uf(v);\n\tuf(v) = u;\n\tnd(v) = le(v) = ri(v) = 0;\n\treturn true;\n}\n\nvoid ud_bl(re int x){\n\tif (rt(x)) bl(rt(x)) = x;\n}\n\nint get_uf_fa(re int x){\n\tx = nd(x);\n\twhile(fa(x)) x = fa(x);\n\treturn bl(x);\n}\n\nvoid go_up(re int x, re int v){\n\twhile(x != v){\n\t\tre int pa = get_uf_fa(x), ltr = 0, mtr = 0, rtr = 0;\n\t\tsplit(rt(pa), vl(x), ltr, mtr, false);\n\t\tsplit(mtr, vl(x), mtr, rtr, true);\n\t\tdel_node(mtr);\n\t\trt(pa) = merge(merge(ltr, rt(x)), rtr);\n\t\tud_bl(pa); unite(pa, x); rt(x) = 0;\n\t\tx = pa;\n\t}\n}\n\n//void print_tree(int x, int dep = 0){\n//\t_for(i, 0, dep) pf(\"\\t\");\n//\tpf(\"x:%d le:%d ri:%d fa:%d\\n\", x, le(x), ri(x), x==0?-1:get_uf_fa(x)); \n//\tvector<int> vec;\n//\tdfs(rt(x), vec);\n//\tfor(auto i : vec) print_tree(i, dep+1);\n//}\n\nint main(){\n//\t#ifndef ONLINE_JUDGE\n//\tfreopen(\"sample.in\", \"r\", stdin);\n//\tfreopen(\"sample.out\", \"w\", stdout);\n//\t#endif\n\t\n\tuf(0) = -1;\n\t_for(i, 1, maxnn) pool[++pcnt] = maxnn-i; \n\tbl(0) = fa(0) = -1; sz(0) = vl(0) = lc(0) = rc(0) = tag(0) = L(0) = R(0) = 0;\n\t\n\tre int n = rdnt(), m = rdnt();\n\tle(0) = 0; ri(0) = n+1;\n\t_rfor(i, 1, n){\n\t\tuf(i) = -1, le(i) = ri(i) = i, rt(i) = 0;\n\t\tins(rt(0), i);\n\t}\n\tud_bl(0);\n\t\n\t_rfor(i, 1, m){\n\t\tre int opt = rdnt(), l = rdnt(), r = rdnt();\n\t\tif (opt == 2) pf(\"%d\", find(l) == find(r));\n\t\telse if (opt == 1){\n\t\t\tif (l > r) swap(l, r);\n\t\t\tre int u = find(l), v = find(r), tu, tv, lca, tar, tmp = u;\n\t\t\tif (u == v) continue;\n\t\t\t\n\t\t\twhile(!(l >= le(tmp) && r <= ri(tmp))) tmp = get_uf_fa(tmp);\n\t\t\tif (tmp == u || tmp == v){\n\t\t\t\tlca = tar = tmp;\n\t\t\t\tgo_up(u, lca); go_up(v, lca);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tre int ltr = 0, mtr = 0, rtr = 0;\n\t\t\t\tlca = tmp; tu = u; tv = v;\n\t\t\t\twhile((tmp = get_uf_fa(tu)) != lca) tu = tmp;\n\t\t\t\twhile((tmp = get_uf_fa(tv)) != lca) tv = tmp;\n\t\t\t\tsplit(rt(lca), tu, ltr, mtr, false);\n\t\t\t\tsplit(mtr, tv, mtr, rtr, true);\n\t\t\t\tif (tag(mtr)){\n\t\t\t\t\tri(tu) = ri(tv);\n\t\t\t\t\tdel(mtr, tu); del(mtr, tv);\n\t\t\t\t\tud_bl(tu); ud_bl(tv);\n\t\t\t\t\tgo_up(u, tu); go_up(v, tv);\n\t\t\t\t\trt(tu) = merge(merge(rt(tu), mtr), rt(tv));\n\t\t\t\t\trt(tv) = 0;\n\t\t\t\t\tunite(tu, tv); ud_bl(tu);\n\t\t\t\t\tre int d = new_node(0);\n\t\t\t\t\tsz(d) = 1; vl(nd(tu) = d) = tu; tag(d) = true; L(d) = le(tu); R(d) = ri(tu);\n\t\t\t\t\trt(lca) = merge(merge(ltr, d), rtr);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ttar = lca;\n\t\t\t\t\trt(lca) = merge(merge(ltr, mtr), rtr);\n\t\t\t\t\tgo_up(u, lca); go_up(v, lca);\n\t\t\t\t}\n\t\t\t}\n\t\t\tud_bl(lca);\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1638854837,
        "uid": 474113,
        "name": "MoYuFang",
        "ccfLevel": 7,
        "title": "\u3010CF1578B Building Forest Trails\u3011\u9898\u89e3"
    },
    {
        "content": "CF \u5b98\u65b9\u9898\u89e3\u505a\u6cd5\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u4e00\u4e2a\u8fde\u901a\u5757\u5185\u90e8\u7684\u8fde\u8fb9\u60c5\u51b5\u4e0d\u91cd\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a\u591a\u8fb9\u5f62\uff0c\u5373\u6bcf\u4e2a\u70b9\u8fde\u5411\u4e0b\u4e00\u4e2a\u540c\u8fde\u901a\u5757\u5185\u7684\u70b9\u3002\n\n\u65ad\u73af\u6210\u94fe\uff0c\u5f62\u6210\u5982\u4e0b\u7ed3\u6784\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vzey3e58.png)\n\n\u7531\u4e8e\u4efb\u610f\u4e24\u4e2a\u8fde\u901a\u5757\u4e0d\u4f1a\u76f8\u4ea4\uff0c\u6211\u4eec\u4ee4 $h_i$ \u8868\u793a\u70b9 $i$ **\u4e0a\u65b9**\u7684\u8fb9\u7684\u6570\u91cf\u3002\u5982\u56fe\u4e2d $h_2=0,h_3=1,h_5=1$\u3002\u663e\u7136 $\\forall i\\in [1,n),|h_i-h_{i+1}|\\le 1$\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28\u3002\n\n\u6765\u770b\u8fde\u8fb9\u64cd\u4f5c\u3002\u8bbe\u8fde\u63a5 $x,y$\uff0c$x<y$ \u4e14 $x,y$ \u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u5185\u3002\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n* $h_x\\neq h_y$\u3002\u4e0d\u59a8\u8bbe $h_x>h_y$\u3002\u627e\u5230 $x$ \u53f3\u8fb9\u7b2c\u4e00\u4e2a\u6ee1\u8db3 $h_p<h_x$ \u7684\u70b9 $p$\uff0c\u5219 $x$ \u7684\u8fde\u901a\u5757\u5fc5\u201c\u5305\u542b\u201d\u4e8e $p$ \u7684\u8fde\u901a\u5757\u4e2d\uff08\u5982\u4e0a\u56fe $E$ \u4e0e $H$ \u7684\u5173\u7cfb\uff09\u3002\u7531\u4e8e $p\\le y$\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06 $x$ \u4e0e $p$ \u7684\u8fde\u901a\u5757\u5408\u5e76\u3002\n\n* $h_x=h_y$\u3002\u4f9d\u65e7\u627e\u5230 $p$\uff0c\u82e5 $p<y$\uff0c\u5219\u4f9d\u65e7\u5408\u5e76\uff1b\u5426\u5219\u8bf4\u660e\u6b64\u65f6 $x,y$ \u7684\u8fde\u8fb9\u4e0d\u4f1a\u4e0e\u5176\u4ed6\u8fb9\u6709\u4ea4\uff0c\u76f4\u63a5\u5408\u5e76 $x,y$ \u5373\u53ef\u3002\n\n\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u81f3 $x$ \u4e0e $y$ \u5728\u540c\u4e00\u8fde\u901a\u5757\u5185\u3002\u7531\u4e8e\u603b\u5408\u5e76\u6b21\u6570\u4e3a $O(n)$\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u5b9e\u73b0\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u4e0e\u4e00\u4e2a\u80fd\u5feb\u901f\u627e\u5230 $p$ \u7684\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u652f\u6301\u5408\u5e76\u7684\u6570\u636e\u7ed3\u6784\u5373\u53ef\u3002\n\n\u6ce8\u610f\u5230\u76f8\u90bb\u70b9\u7684 $h$ \u4e4b\u5dee\u4e0d\u8d85\u8fc7 $1$\uff0c\u4e8e\u662f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u67e5\u8be2\u65f6\u7ebf\u6bb5\u6811\u4e8c\u5206\u3002\n\n\u5408\u5e76\u53c8\u5206\u4e24\u79cd\u60c5\u51b5\u3002\u7528 $l_i$ \u8868\u793a $i$ \u6240\u5728\u8fde\u901a\u5757\u7684\u6700\u5de6\u8fb9\u7684\u70b9\uff0c$r_i$ \u540c\u7406\u3002\u82e5 $r_x<l_y$\uff0c\u5219\u4e24\u8fde\u901a\u5757\u6ca1\u6709\u5305\u542b\u5173\u7cfb\uff0c\u8981\u52a0\u4e00\u6761\u8fb9\uff0c$h$ \u533a\u95f4 $+1$\uff1b\u5426\u5219\u6709\u5305\u542b\u5173\u7cfb\uff0c\u8981\u5220\u4e00\u6761\u8fb9\uff0c\u52a0\u4e24\u6761\u8fb9\uff0c\u533a\u95f4 $-1$\u3002\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u4e8e\u662f\u6b64\u9898\u5f97\u89e3\u3002\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\u5e38\u6570\u5f88\u5c0f\uff0c\u5b9e\u6d4b $498\\text{ms}$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=200005;\nint n,m;\nstruct dsu {\n    int fa[N],l[N],r[N];\n    void init() {for(int i=1;i<=n;i++) fa[i]=l[i]=r[i]=i;}\n    int get(int x) {return fa[x]==x?x:fa[x]=get(fa[x]);}\n    void merge(int x,int y) {\n        x=get(x); y=get(y);\n        if(x==y) return ;\n        fa[x]=y; l[y]=min(l[x],l[y]); r[y]=max(r[x],r[y]);\n    }\n} s;\nstruct sgt {\n    int mn[4*N],add[4*N];\n    void pushval(int p,int v) {mn[p]+=v; add[p]+=v;}\n    void pushdown(int p) {\n        if(!add[p]) return ;\n        pushval(p<<1,add[p]); pushval(p<<1|1,add[p]);\n        add[p]=0;\n    }\n    void modify(int L,int R,int v,int p=1,int l=1,int r=n) {\n        if(L>R) return ;\n        if(L<=l&&r<=R) {pushval(p,v); return ;}\n        int mid=l+r>>1; pushdown(p);\n        if(L<=mid) modify(L,R,v,p<<1,l,mid);\n        if(R>mid) modify(L,R,v,p<<1|1,mid+1,r);\n        mn[p]=min(mn[p<<1],mn[p<<1|1]);\n    }\n    int query(int x,int p=1,int l=1,int r=n) {\n        if(l==r) return mn[p];\n        int mid=l+r>>1; pushdown(p);\n        if(x<=mid) return query(x,p<<1,l,mid);\n        return query(x,p<<1|1,mid+1,r);\n    }\n    int binaryl(int x,int v,int p=1,int l=1,int r=n) {\n        if(r<=x) {\n            if(mn[p]>=v) return 0;\n            if(l==r) return l;\n            int mid=l+r>>1; pushdown(p);\n            if(mn[p<<1|1]<v) return binaryl(x,v,p<<1|1,mid+1,r);\n            return binaryl(x,v,p<<1,l,mid);\n        }\n        int mid=l+r>>1,res=0; pushdown(p);\n        if(mid+1<=x) res=binaryl(x,v,p<<1|1,mid+1,r);\n        if(!res) res=binaryl(x,v,p<<1,l,mid);\n        return res;\n    }\n    int binaryr(int x,int v,int p=1,int l=1,int r=n) {\n        if(x<=l) {\n            if(mn[p]>=v) return n+1;\n            if(l==r) return l;\n            int mid=l+r>>1; pushdown(p);\n            if(mn[p<<1]<v) return binaryr(x,v,p<<1,l,mid);\n            return binaryr(x,v,p<<1|1,mid+1,r);\n        }\n        int mid=l+r>>1,res=n+1; pushdown(p);\n        if(x<=mid) res=binaryr(x,v,p<<1,l,mid);\n        if(res==n+1) res=binaryr(x,v,p<<1|1,mid+1,r);\n        return res;\n    }\n} t;\nvoid merge(int x,int y) {\n    x=s.get(x); y=s.get(y);\n    if(s.r[x]<s.l[y]) t.modify(s.r[x]+1,s.l[y]-1,1);\n    else t.modify(max(s.l[x],s.l[y]),min(s.r[x],s.r[y]),-1);\n    s.merge(x,y);\n}\nint main() {\n    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n    cin>>n>>m;\n    s.init();\n    while(m--) {\n        int op,x,y;\n        cin>>op>>x>>y;\n        if(op==1) {\n            if(x>y) swap(x,y);\n            int vx=t.query(x),vy=t.query(y);\n            while(s.get(x)!=s.get(y)) {\n                if(vx>vy) {merge(x,t.binaryr(x,vx)); vx--;}\n                else if(vx<vy) {merge(t.binaryl(y,vy),y); vy--;}\n                else {\n                    int p=t.binaryr(x,vx);\n                    if(p<y) {merge(x,p); vx--;}\n                    else merge(x,y);\n                }\n            }\n        }\n        else cout<<(s.get(x)==s.get(y));\n    }\n    return 0;\n}\n```",
        "postTime": 1681445411,
        "uid": 217452,
        "name": "Yu_Jie",
        "ccfLevel": 0,
        "title": "CF1578B \u9898\u89e3"
    }
]