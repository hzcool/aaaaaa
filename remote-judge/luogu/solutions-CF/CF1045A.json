[
    {
        "content": "\u7f51\u7edc\u6d41+\u7ebf\u6bb5\u6811\u4f18\u5316\u3002\n\n\u8fd9\u4e2a\u4e1c\u897f\uff0c\u663e\u7136\u7f51\u7edc\u6d41\u4e00\u904d\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8003\u8651\u7b2c3\u79cd\u6b66\u5668\u8981\u6070\u597d\u653b\u51fb2\u4e2a\u7684\u9650\u5236\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u6b66\u5668\u53ea\u653b\u51fb\u4e861\u4e2a\uff0c\u5219\u53e6\u5916\u4e24\u4e2a\u661f\u7403\u4e00\u5b9a\u90fd\u88ab\u5176\u4ed6\u6b66\u5668\u653b\u51fb\u4e86\uff08\u4e14\u4e0d\u662f\u7b2c3\u79cd\uff09\uff0c\u90a3\u4e48\uff0c\u76f4\u63a5\u7528\u8fd9\u4e2a\u6b66\u5668\u66ff\u6362\u653b\u51fb\u67d0\u4e2a\u661f\u7403\u7684\u6b66\u5668\uff0c\u5176\u6700\u591a\u653b\u51fb\u7684\u661f\u7403\u4e2a\u6570\u4e0d\u53d8\uff0c\u56e0\u6b64\u5148\u4e0d\u5fc5\u8003\u8651\u3002\n\n\u76f4\u63a5\u5bf9\u6bcf\u79cd\u6b66\u5668\u5efa\u4e00\u4e2a\u70b9\uff0c\u5bf9\u6bcf\u4e2a\u661f\u7403\u5efa\u4e00\u4e2a\u70b9\u3002\n\n\u5bf9\u4e8e\u7b2c1\u79cd\u6b66\u5668\uff0c\u4ece\u6e90\u70b9\u5411\u8fd9\u4e2a\u70b9\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u4ece\u8fd9\u4e2a\u6b66\u5668\u5411\u5176\u6240\u6709\u80fd\u653b\u51fb\u5230\u7684\u661f\u7403\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u7b2c2\u79cd\u6b66\u5668\uff0c\u4ece\u6e90\u70b9\u5411\u8fd9\u4e2a\u70b9\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u7136\u540e\u76f4\u63a5\u5bf9\u533a\u95f4\u5185\u6bcf\u4e2a\u661f\u7403\u8fde\u8fb9\u7684\u8bdd\uff0c\u8fb9\u4e3a$O(n^2)$\u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u4f18\u5316\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u7b2c3\u79cd\u6b66\u5668\uff0c\u4ece\u6e90\u70b9\u5411\u8fd9\u4e2a\u70b9\u8fde\u5bb9\u91cf\u4e3a2\u7684\u8fb9\uff0c\u8868\u793a\u6700\u591a\u80fd\u653b\u51fb2\u4e2a\u661f\u7403\u3002\u7136\u540e\u518d\u5206\u522b\u5411$a,b,c$\u661f\u7403\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\u5373\u53ef\u3002\n\n\u6bcf\u4e2a\u661f\u7403\u5411\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u8868\u793a\u53ea\u80fd\u653b\u51fb\u4e00\u6b21\u3002\n\n\u7136\u540e\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u5373\u53ef\uff0c\u6700\u5927\u6d41\u5c31\u662f\u6700\u591a\u80fd\u653b\u51fb\u7684\u661f\u7403\u4e2a\u6570\u3002\n\n\u518d\u8003\u8651\u6c42\u65b9\u6848\uff0c\u53ef\u4ee5\u4ece\u6c47\u70b9\u51fa\u53d1\uff0c\u6cbf\u7740\u6709\u5bb9\u91cf\u7684\u53cd\u5411\u8fb9\uff08\u8bf4\u660e\u88ab\u8d70\u8fc7\uff09\u6d41\u56de\u53bb\u5373\u53ef\u77e5\u9053\u6bcf\u4e2a\u661f\u7403\u88ab\u54ea\u4e2a\u6b66\u5668\u653b\u51fb\u3002\u6d41\u56de\u53bb\u7684\u9014\u4e2d\u8981\u6ce8\u610f\u51cf\u63891\u7684\u5bb9\u91cf\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u91cd\u590d\u8d70\u7684\u60c5\u51b5\u3002\u7136\u540e\u627e\u5230\u7b54\u6848\u8981\u53ca\u65f6\u9000\u51fa\u3002\n\n\u7136\u540e\u518d\u8003\u8651\u7b2c3\u79cd\u6b66\u5668\u8981\u6070\u597d\u653b\u51fb2\u4e2a\u7684\u9650\u5236\u3002\u5982\u679c\u5b83\u53ea\u653b\u51fb\u4e861\u4e2a\u661f\u7403\uff0c\u76f4\u63a5\u628a\u53e6\u5916\u4e24\u4e2a\u4e2d\u7684\u67d0\u4e00\u4e2a\u6539\u6210\u7528\u8fd9\u4e2a\u6b66\u5668\u653b\u51fb\u5373\u53ef\u3002\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<queue>\n#include<algorithm>\n#include<cstring>\n#define inf 1234567890\n#define T 33333\nint n,m,cnt=1,d[200005],node,head[44444],iter[44444],dep[44444],ys[5001],tot[5001];\nstruct edge{\n\tint to,nxt,cap;\n}e[2333333];\nstruct wea{\n\tint op,l,r,a,b,c,k;\n}v[5005];\ninline void addedge(int u,int v,int cap){\n\te[++cnt]=(edge){v,head[u],cap};head[u]=cnt;\n\te[++cnt]=(edge){u,head[v],0};head[v]=cnt;\n}\nvoid build(int l,int r,int o){\n\tif(l==r){\n\t\td[o]=l;\n\t\treturn;\n\t}\n\td[o]=++node;\n\tconst int mid=l+r>>1;\n\tbuild(l,mid,o<<1);\n\tbuild(mid+1,r,o<<1|1);\n\taddedge(d[o],d[o<<1],inf);\n\taddedge(d[o],d[o<<1|1],inf);\n}\nvoid add(int l,int r,int o,int id,const int&L,const int&R){\n\tif(L<=l&&r<=R){\n\t\taddedge(id,d[o],1);\n\t\treturn;\n\t}\n\tconst int mid=l+r>>1;\n\tif(L<=mid)add(l,mid,o<<1,id,L,R);\n\tif(mid<R)add(mid+1,r,o<<1|1,id,L,R);\n}\nstd::queue<int>q;\nvoid bfs(){\n\tdep[0]=1;\n\tq.push(0);\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\tif(e[i].cap&&!dep[e[i].to]){\n\t\t\tdep[e[i].to]=dep[u]+1;\n\t\t\tq.push(e[i].to);\n\t\t}\n\t}\n}\nint dfs(int u,int f){\n\tif(!f||u==T)return f;\n\tfor(int&i=iter[u];i;i=e[i].nxt)\n\tif(e[i].cap&&dep[u]<dep[e[i].to]){\n\t\tint d=dfs(e[i].to,std::min(f,e[i].cap));\n\t\tif(d){\n\t\t\te[i].cap-=d;\n\t\t\te[i^1].cap+=d;\n\t\t\treturn d;\n\t\t}\n\t}\n\treturn 0;\n}\nint dinic(){\n\tfor(int f,flow=0;;){\n\t\tmemset(dep,0,sizeof dep);\n\t\tbfs();\n\t\tif(!dep[T])return flow;\n\t\tmemcpy(iter,head,sizeof iter);\n\t\twhile(f=dfs(0,inf))flow+=f;\n\t}\n}\nvoid find(int now,int&s,int pre){\n\tif(s)return;\n\tif(now>m&&now<=n+m){\n\t\ts=now-m;\n\t\treturn;\n\t}\n\tfor(int i=head[now];i;i=e[i].nxt)\n\tif(e[i].to!=pre&&e[i].cap){\n\t\tfind(e[i].to,s,now);\n\t\t--e[i].cap;\n\t\treturn;\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tnode=n+m;\n\tbuild(1,m,1);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%d\",&v[i].op);\n\t\tif(v[i].op==0){\n\t\t\tscanf(\"%d\",&v[i].k);\n\t\t\taddedge(0,i+m,1);\n\t\t\tfor(int j=0;j<v[i].k;++j){\n\t\t\t\tint x;\n\t\t\t\tscanf(\"%d\",&x);\n\t\t\t\taddedge(i+m,x,1);\n\t\t\t}\n\t\t}else\n\t\tif(v[i].op==1){\n\t\t\taddedge(0,i+m,1);\n\t\t\tscanf(\"%d%d\",&v[i].l,&v[i].r);\n\t\t\tadd(1,m,1,i+m,v[i].l,v[i].r);\n\t\t}else{\n\t\t\taddedge(0,i+m,2);\n\t\t\tscanf(\"%d%d%d\",&v[i].a,&v[i].b,&v[i].c);\n\t\t\taddedge(i+m,v[i].a,1);\n\t\t\taddedge(i+m,v[i].b,1);\n\t\t\taddedge(i+m,v[i].c,1);\n\t\t}\n\t}\n\tfor(int i=1;i<=m;++i)addedge(i,T,1);\n\tint mx=dinic();\n\tprintf(\"%d\\n\",mx);\n\tfor(int i=head[T];i;i=e[i].nxt)\n\tif(e[i].cap){\n\t\tfind(e[i].to,ys[e[i].to],T);\n\t}\n\tfor(int i=1;i<=m;++i)++tot[ys[i]];\n\tfor(int i=1;i<=n;++i)\n\tif(v[i].op==2&&tot[i]==1){\n\t\tif(ys[v[i].a]!=i)ys[v[i].a]=i;else\n\t\tys[v[i].b]=i;\n\t}\n\tfor(int i=1;i<=m;++i)\n\tif(ys[i])printf(\"%d %d\\n\",ys[i],i);\n\treturn 0;\n}\n```",
        "postTime": 1543214125,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 CF1045A \u3010Last chance\u3011"
    }
]