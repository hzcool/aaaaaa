{
    "description": "\nInnovative Computable Quality Control (ICQC) has developed a ground-breaking\nnew machine for performing, well, quality control. Thanks to\nits novel Deep Intelligence technology, an ICQC quality control (QC)\nmachine can automatically, with $100\\%$ accuracy, detect manufacturing\nerrors in any machine in existence, whether it is a coffee machine, an\nintergalactic space ship, or a quantum computer.\n\nICQC is now setting up its factory for producing these QC\nmachines. Like any other manufacturing process, some fraction of\nthe produced machines will suffer from malfunctions and these need to\nbe found and discarded. Fortunately, ICQC has just the product\nfor detecting malfunctioning machines!\n\nObviously, ICQC should not simply use a QC machine on itself, since\na malfunctioning machine might incorrectly classify itself as working\ncorrectly. Instead, ICQC will take each batch of $n$ machines\nproduced during a day and have them test each other overnight.\nIn particular, during every hour of the night, each of the $n$ QC\nmachines can run a check on one of the other QC machines, and\nsimultaneously be checked by one other QC machine.\n\nIf the machine running the check is correct, it will correctly report\nwhether the tested machine is correct or malfunctioning, but if the\nmachine running the check is malfunctioning, it may report either result.\nIf a machine A is used to test a machine B multiple times it will return the same result every time, even if machine A is malfunctioning.\nThe exact testing schedule does not have to be fixed in advance,\nso the choice of which machines should check which other machines during\nthe second hour of the night may be based on the result of the tests\nfrom the first hour, and so on.\n\nICQC are $100\\%$ confident that strictly more than a half of the $n$ QC\nmachines in each batch are working correctly, but the night is only $12$\nhours long, so there is only time to do a small number of test rounds.\nCan you help ICQC determine which QC machines are malfunctioning?\n\nFor example, consider Sample Interaction 1 below. After the fourth hour,\nevery machine has tested every other machine. For machine $1$,\nonly one other machine claimed that it was malfunctioning, and if it\nwas truly malfunctioning then at least $3$ of the other machines would\nclaim this. For machine $4$, only one other machine claims that it\nis working, which implies that machine $2$ must be malfunctioning since\nmore than half of the machines are supposed to be working. Note that\neven though machine $4$ is malfunctioning, it still happened to produce\nthe correct responses in these specific test rounds.\n\n\n\n",
    "inputFormat": "## Interaction\n\n\nThe first line of input contains a single integer $b$ ($1 \\le b \\le 500$),\nthe number of batches to follow. Each batch is independent.\nYou should process each batch\ninteractively, which means the input you receive\nwill depend on the previous output of your program.\n\nThe first line of input for each batch contains a single integer $n$\n($1 \\le n \\le 100$), the number of QC machines in the batch.\nThe interaction then proceeds in rounds. In each round, your program can\nschedule tests for the next hour, by writing a line of\nthe form\n\"$\\texttt{test}$ $\\ x_1\\ x_2\\ \\ldots\\ x_n$\"\nindicating that each machine $i$ should run a test on machine $x_i$.\nIf $x_i=0$, then machine $i$ is idle in that round and performs no test.\nAll positive numbers in the sequence must be distinct.\n\nAfter writing this line, there will be a result to read from the\ninput. The result is one line containing a string of length\n$n$, having a '$\\texttt{1}$' in position $i$ if machine $i$ says that machine $x_i$\nis working correctly, '$\\texttt{0}$' if machine $i$ says that machine $x_i$ is\nmalfunctioning, and '$\\texttt{-}$' (dash) if machine $i$ was idle in the round.\n\nWhen your program has determined which machines are malfunctioning,\nbut no later than after $12$ rounds of tests,\nit must write a line of the form\n\"$\\texttt{answer}$ $S$\"\nwhere $S$ is a binary string of length $n$, having a '$\\texttt{1}$' in position $i$\nif machine $i$ is working correctly, and a '$\\texttt{0}$' if it is malfunctioning.\n\nAfter writing the answer line, your program should start processing\nthe next batch by reading its number $n$. When all $b$ batches have been\nprocessed, the interaction ends and your program should exit.\n\n\n*Notes on interactive judging:*\n\n- *The evaluation is non-adversarial, meaning that the result of each\nmachine testing each other machine is chosen in advance rather than in\nresponse to your queries.*\n- *Do not forget to flush output buffers after writing. See the Addendum to Judging Notes for details.*\n- *You are provided with a command-line tool for local testing, together with input files\ncorresponding to the sample interactions.\nThe tool has comments at the top to explain its use.*\n\n\n",
    "outputFormat": "",
    "samples": [
        [
            "1\n5\n10101\n01110\n10101\n10101\n10101\n",
            "test 5 4 2 1 3\ntest 4 5 1 3 2\ntest 2 3 4 5 1\ntest 3 1 5 2 4\nanswer 10101"
        ],
        [
            "2\n4\n1111\n7\n0001100\n----11-",
            "test 2 3 4 1\nanswer 1111\ntest 2 3 4 5 6 7 1\ntest 0 0 0 0 2 4 0\nanswer 0101110"
        ]
    ],
    "hint": "",
    "translation": "**\u3010\u9898\u76ee\u63cf\u8ff0\u3011**\n\n\u521b\u65b0\u7684\u53ef\u8ba1\u7b97\u8d28\u91cf\u63a7\u5236\uff08ICQC\uff09\u5f00\u53d1\u4e86\u4e00\u79cd\u5f00\u521b\u6027\u7684\u65b0\u673a\u5668\uff0c\u7528\u4e8e\u6267\u884c\u826f\u597d\u7684\u8d28\u91cf\u63a7\u5236\u3002\u5f97\u76ca\u4e8e\u5176\u65b0\u9896\u7684\u6df1\u5ea6\u667a\u80fd\u6280\u672f\uff0cICQC \u8d28\u91cf\u63a7\u5236\uff08QC\uff09\u673a\u5668\u80fd\u591f\u4ee5 $100\\%$ \u7684\u51c6\u786e\u5ea6\u81ea\u52a8\u68c0\u6d4b\u73b0\u6709\u4efb\u4f55\u673a\u5668\u7684\u5236\u9020\u9519\u8bef\uff0c\u65e0\u8bba\u662f\u5496\u5561\u673a\u3001\u661f\u9645\u98de\u8239\u8fd8\u662f\u91cf\u5b50\u8ba1\u7b97\u673a\u3002\n\nICQC \u76ee\u524d\u6b63\u5728\u5efa\u7acb\u5de5\u5382\u751f\u4ea7\u8fd9\u4e9b QC \u673a\u5668\u3002\u50cf\u4efb\u4f55\u5176\u4ed6\u5236\u9020\u8fc7\u7a0b\u4e00\u6837\uff0c\u751f\u4ea7\u7684\u673a\u5668\u4e2d\u6709\u4e00\u90e8\u5206\u4f1a\u51fa\u73b0\u6545\u969c\uff0c\u9700\u8981\u627e\u5230\u5e76\u4e22\u5f03\u3002\u5e78\u8fd0\u7684\u662f\uff0cICQC \u53ea\u6709\u68c0\u6d4b\u6545\u969c\u673a\u5668\u7684\u4ea7\u54c1\uff01\n\n\u663e\u7136\uff0cICQC \u4e0d\u5e94\u8be5\u7b80\u5355\u5730\u5728\u81ea\u5df1\u8eab\u4e0a\u4f7f\u7528 QC \u673a\u5668\uff0c\u56e0\u4e3a\u51fa\u73b0\u6545\u969c\u7684\u673a\u5668\u53ef\u80fd\u4f1a\u9519\u8bef\u5730\u5c06\u81ea\u5df1\u5f52\u7c7b\u4e3a\u6b63\u5e38\u5de5\u4f5c\u3002\u76f8\u53cd\uff0cICQC \u5c06\u5728\u4e00\u5929\u5185\u751f\u4ea7\u6bcf\u6279 $n$ \u673a\u5668\uff0c\u5e76\u8ba9\u5b83\u4eec\u5728\u4e00\u591c\u4e4b\u95f4\u76f8\u4e92\u6d4b\u8bd5\u3002\u7279\u522b\u662f\uff0c\u5728\u591c\u95f4\u7684\u6bcf\u4e00\u4e2a\u5c0f\u65f6\uff0c\u6bcf\u4e2a $n$ QC\u673a\u5668\u90fd\u53ef\u4ee5\u5728\u53e6\u4e00\u53f0 QC \u673a\u5668\u4e0a\u8fd0\u884c\u68c0\u67e5\uff0c\u540c\u65f6\u7531\u53e6\u4e00\u53f0 QC \u673a\u5668\u8fdb\u884c\u68c0\u67e5\u3002\n\n\u5982\u679c\u8fd0\u884c\u68c0\u67e5\u7684\u673a\u5668\u662f\u6b63\u786e\u7684\uff0c\u5b83\u5c06\u6b63\u786e\u5730\u62a5\u544a\u6d4b\u8bd5\u673a\u5668\u662f\u6b63\u786e\u7684\u8fd8\u662f\u6545\u969c\u7684\uff0c\u4f46\u5982\u679c\u8fd0\u884c\u68c0\u67e5\u7684\u673a\u5668\u662f\u6545\u969c\u7684\uff0c\u5b83\u53ef\u80fd\u4f1a\u62a5\u544a\u4efb\u4f55\u4e00\u4e2a\u7ed3\u679c\u3002\u5982\u679c\u4f7f\u7528\u673a\u5668 A \u591a\u6b21\u6d4b\u8bd5\u673a\u5668B\uff0c\u5373\u4f7f\u673a\u5668 A \u51fa\u73b0\u6545\u969c\uff0c\u6bcf\u6b21\u90fd\u4f1a\u8fd4\u56de\u76f8\u540c\u7684\u7ed3\u679c\u3002\u51c6\u786e\u7684\u6d4b\u8bd5\u65f6\u95f4\u8868\u4e0d\u5fc5\u4e8b\u5148\u786e\u5b9a\uff0c\u56e0\u6b64\uff0c\u5728\u591c\u95f4\u7b2c\u4e8c\u4e2a\u5c0f\u65f6\uff0c\u54ea\u4e9b\u673a\u5668\u5e94\u8be5\u68c0\u67e5\u54ea\u4e9b\u5176\u4ed6\u673a\u5668\uff0c\u53ef\u4ee5\u6839\u636e\u7b2c\u4e00\u4e2a\u5c0f\u65f6\u7684\u6d4b\u8bd5\u7ed3\u679c\u6765\u9009\u62e9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\nICQC $100\\%$ \u786e\u4fe1\uff0c\u4e25\u683c\u6765\u8bf4\uff0c\u6bcf\u6279 $n$ QC \u673a\u5668\u4e2d\u6709\u4e00\u534a\u4ee5\u4e0a\u5de5\u4f5c\u6b63\u5e38\uff0c\u4f46\u591c\u95f4\u53ea\u6709$12$ \u5c0f\u65f6\uff0c\u56e0\u6b64\u53ea\u6709\u65f6\u95f4\u8fdb\u884c\u5c11\u91cf\u6d4b\u8bd5\u3002\u60a8\u80fd\u5e2e\u52a9 ICQC \u786e\u5b9a\u54ea\u4e9b QC \u673a\u5668\u51fa\u73b0\u6545\u969c\u5417\uff1f\n\n\u4f8b\u5982\uff0c\u8003\u8651\u4e0b\u9762\u7684\u6837\u672c\u4ea4\u4e92\u4f5c\u7528 $1$\u3002\u5728\u7b2c\u56db\u4e2a\u5c0f\u65f6\u4e4b\u540e\uff0c\u6bcf\u53f0\u673a\u5668\u90fd\u6d4b\u8bd5\u4e86\u5176\u4ed6\u6bcf\u53f0\u673a\u5668\u3002\u5bf9\u4e8e\u673a\u5668 $1$\uff0c\u53ea\u6709\u53e6\u4e00\u53f0\u673a\u5668\u58f0\u79f0\u5b83\u6709\u6545\u969c\uff0c\u5982\u679c\u5b83\u771f\u7684\u6709\u6545\u969c\uff0c\u90a3\u4e48\u5176\u4ed6\u673a\u5668\u4e2d\u81f3\u5c11\u6709 $3$ \u53f0\u4f1a\u58f0\u79f0\u8fd9\u4e00\u70b9\u3002\u5bf9\u4e8e\u673a\u5668$4$\uff0c\u53ea\u6709\u53e6\u4e00\u53f0\u673a\u5668\u58f0\u79f0\u5b83\u6b63\u5728\u5de5\u4f5c\uff0c\u8fd9\u610f\u5473\u7740\u673a\u5668 $2$ \u4e00\u5b9a\u6709\u6545\u969c\uff0c\u56e0\u4e3a\u8d85\u8fc7\u4e00\u534a\u7684\u673a\u5668\u5e94\u8be5\u5728\u5de5\u4f5c\u3002\u8bf7\u6ce8\u610f\uff0c\u5c3d\u7ba1\u673a\u5668 $4$ \u51fa\u73b0\u6545\u969c\uff0c\u4f46\u5728\u8fd9\u4e9b\u7279\u5b9a\u7684\u6d4b\u8bd5\u56de\u5408\u4e2d\u4ecd\u78b0\u5de7\u4ea7\u751f\u4e86\u6b63\u786e\u7684\u54cd\u5e94\u3002\n\n**\u3010\u8f93\u5165\u683c\u5f0f\u3011**\n\n\u7b2c\u4e00\u884c\u8f93\u5165\u5305\u542b\u4e00\u4e2a\u6574\u6570 $b$\uff08$1\u2264 b\u2264500$\uff09\uff0c\u8981\u9075\u5faa\u7684\u6279\u6b21\u6570\u3002\u6bcf\u6279\u90fd\u662f\u72ec\u7acb\u7684\u3002\u60a8\u5e94\u8be5\u4ee5\u4ea4\u4e92\u65b9\u5f0f\u5904\u7406\u6bcf\u4e2a\u6279\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u6536\u5230\u7684\u8f93\u5165\u5c06\u53d6\u51b3\u4e8e\u60a8\u7684\u7a0b\u5e8f\u4e4b\u524d\u7684\u8f93\u51fa\u3002\n\n\u6bcf\u4e2a\u6279\u6b21\u7684\u7b2c\u4e00\u884c\u8f93\u5165\u5305\u542b\u4e00\u4e2a\u6574\u6570 $n$ \uff08$1\u2264n\u2264100$\uff09\uff0c\u6279\u6b21\u4e2d QC \u673a\u5668\u7684\u6570\u91cf\u3002\u7136\u540e\uff0c\u4ea4\u4e92\u5faa\u73af\u8fdb\u884c\u3002\u5728\u6bcf\u4e00\u8f6e\u4e2d\uff0c\u4f60\u7684\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u901a\u8fc7\u5199\u4e00\u884c\u8868\u683c\u6765\u5b89\u6392\u4e0b\u4e00\u4e2a\u5c0f\u65f6\u7684\u6d4b\u8bd5 \u201c $\\texttt{test}$ $x_1$ $x_2$ $x_n$\u201d\u6307\u793a\u6bcf\u53f0\u673a\u5668 $i$ \u5e94\u5728\u673a\u5668 $x_i$ \u4e0a\u8fd0\u884c\u6d4b\u8bd5\u3002\u5982\u679c $x_i$ \u4e3a $0$\uff0c\u7136\u540e\uff0c\u673a\u5668 $i$ \u5728\u8be5\u8f6e\u4e2d\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u4e0d\u6267\u884c\u4efb\u4f55\u6d4b\u8bd5\u3002\u5e8f\u5217\u4e2d\u7684\u6240\u6709\u6b63\u6570\u5fc5\u987b\u662f\u4e0d\u540c\u7684\u3002\n\n\u5199\u4e0b\u8fd9\u4e00\u884c\u540e\uff0c\u5c06\u6709\u4e00\u4e2a\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\u7684\u7ed3\u679c\u3002\u7ed3\u679c\u662f\u4e00\u884c\u5305\u542b\u957f\u5ea6\u4e3a $n$ \u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u673a\u5668 $i$ \u8868\u793a\u673a\u5668 $x_i$\uff0c\u5219\u5728\u4f4d\u7f6e $i$ \u5904\u6709\u201c$\\texttt{1}$\u201d\uff0c$x_i$ \u5de5\u4f5c\u6b63\u5e38\uff0c\u201c$\\texttt{0}$\u201d \u5982\u679c\u673a\u5668 $i$ \u663e\u793a\u673a\u5668 $x_i$ \u51fa\u73b0\u6545\u969c\uff0c\u5982\u679c\u673a\u5668 $i$ \u5728\u5faa\u73af\u4e2d\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u5219\u4e3a\u201c$\\texttt{-}$\u201d\uff08\u7834\u6298\u53f7\uff09\u3002\n\n\u5f53\u60a8\u7684\u7a0b\u5e8f\u786e\u5b9a\u54ea\u4e9b\u673a\u5668\u51fa\u73b0\u6545\u969c\u65f6\uff0c\u4f46\u4e0d\u8fdf\u4e8e $12$ \u8f6e\u6d4b\u8bd5\u4e4b\u540e\uff0c\u5b83\u5fc5\u987b\u4ee5\u201c$\\texttt{answer}$ $S$\u201d\u7684\u5f62\u5f0f\u5199\u4e00\u884c\uff0c\u5176\u4e2d $S$ \u662f\u957f\u5ea6\u4e3a $n$ \u7684\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u673a\u5668 $i$ \u6b63\u5e38\u5de5\u4f5c\uff0c\u5219\u5728\u4f4d\u7f6e $i$ \u5904\u6709\u201c$\\texttt{1}$\u201d\uff0c\u5982\u679c\u673a\u5668 $i$ \u51fa\u73b0\u6545\u969c\uff0c\u5219\u5728\u4f4d\u7f6e $i$ \u5904\u6709\u201c$\\texttt{0}$\u201d\u3002\n\n\u5728\u5199\u4e0b\u7b54\u6848\u884c\u4e4b\u540e\uff0c\u4f60\u7684\u7a0b\u5e8f\u5e94\u8be5\u901a\u8fc7\u8bfb\u53d6\u4e0b\u4e00\u6279\u7684\u7f16\u53f7 $n$ \u6765\u5f00\u59cb\u5904\u7406\u4e0b\u4e00\u6279\u3002\u5f53\u6240\u6709 $b$ \u6279\u5904\u7406\u5b8c\u6210\u540e\uff0c\u4ea4\u4e92\u7ed3\u675f\uff0c\u7a0b\u5e8f\u5e94\u8be5\u9000\u51fa\u3002\n\n\u5173\u4e8e\u4e92\u52a8\u8bc4\u5224\u7684\u8bf4\u660e\uff1a\n - \u8bc4\u4f30\u662f\u975e\u5bf9\u6297\u6027\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u53f0\u673a\u5668\u6d4b\u8bd5\u53e6\u4e00\u53f0\u673a\u5668\u7684\u7ed3\u679c\u662f\u63d0\u524d\u9009\u62e9\u7684\uff0c\u800c\u4e0d\u662f\u54cd\u5e94\u60a8\u7684\u67e5\u8be2\u3002\n- \u5199\u5165\u540e\u4e0d\u8981\u5fd8\u8bb0\u5237\u65b0\u8f93\u51fa\u7f13\u51b2\u533a\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u300a\u8bc4\u59d4\u987b\u77e5\u300b\u9644\u5f55\u3002\n- \u6211\u4eec\u4e3a\u60a8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7528\u4e8e\u672c\u5730\u6d4b\u8bd5\u7684\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u4ee5\u53ca\u4e0e\u793a\u4f8b\u4ea4\u4e92\u76f8\u5bf9\u5e94\u7684\u8f93\u5165\u6587\u4ef6\u3002\u8be5\u5de5\u5177\u9876\u90e8\u6709\u6ce8\u91ca\u89e3\u91ca\u5176\u7528\u9014\u3002"
}