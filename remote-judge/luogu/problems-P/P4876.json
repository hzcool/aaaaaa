{
    "description": "It's a hot summer day, and Bessie the cow is feeling quite lazy. She wants to locate herself at a position in her field so that she can reach as much delicious grass as possible within only a short distance.\n\nThere are $N$ patches of grass $(1 <= N <= 100,000)$ in Bessie's field. The $ith$ such patch contains $g_i$ units of grass $(1 <= g_i <= 10,000)$ and is located at a distinct point $(x_i, y_i)$ in the field $(0 <= x_i,$ $y_i <= $ $1,000,000)$.  Bessie would like to choose a point in the field as her initial location (possibly the same point as a patch of grass, and possibly even a point with non-integer coordinates) so that a maximum amount of grass is within a distance of $K$ steps from this location $(1 <= K <= 2,000,000)$.\n\nWhen Bessie takes a step, she moves 1 unit north, south, east, or west of her current position.  For example, to move from $(0,0)$ to $(3,2)$, this requires 5 total steps.  Bessie does not need to take integer-sized steps -- for example, 1 total step could be divided up as half a unit north and half a unit east.\n\nPlease help Bessie determine the maximum amount of grass she can reach, if she chooses the best possible initial location.\n",
    "inputFormat": "* Line 1: The integers $N$ and $K$.\n\n* Lines 2..1+N: Line $i+1$ describes the $ith$ patch of grass using 3 integers: $g_i, x_i, y_i.$\n",
    "outputFormat": "* Line 1: The maximum amount of grass Bessie can reach within $K$ steps, if she locates herself at the best possible initial position.",
    "samples": [
        [
            "4 3\n7 8 6\n3 0 0\n4 6 0\n1 4 2",
            "8"
        ]
    ],
    "hint": "INPUT DETAILS:\n\nBessie is willing to take at most 3 steps from her initial position.  There\nare 4 patches of grass.  The first contains 7 units of grass and is located\nat position $(8,6)$, and so on.\n\nOUTPUT DETAILS:\n\nBy locating herself at $(3,0)$, the grass at positions $(0,0)$, $(6,0)$, and\n$(4,2)$ is all within $K$ units of distance.",
    "translation": "```\n  Bessie\u7684\u7530\u91cc\u6709N(1<=N<=100,000)\u5757\u8349\u5730\uff0c\u6bcf\u5757\u8349\u5730\u7684\u5750\u6807\u662f (xi, yi) (0<=xi,yi<=1,000,000),\u4e0a\u9762\u957f\u7740gi(1<=gi<=10,000)\u4e2a\u5355\u4f4d\u7684\u7267\u8349\u3002 \n  Bessie\u53ef\u4ee5\u5411\u4e1c\u5357\u897f\u5317\u65b9\u5411\u8d70\uff0c\u4e00\u6b21\u8d70\u4e00\u6b65\uff08\u4e00\u4e2a\u5355\u4f4d\u957f\u5ea6\uff09\u3002\u5982\u5979\u4ece\uff080,0\uff09\u8d70\u5230\uff083,2\uff09\u9700\u89815\u6b65\u3002\u5979\u6700\u591a\u53ef\u4ee5\u4e00\u6b21\u8d70k (1<=k<=2,000,000) \u6b65\u3002\n  \u73b0\u5728\u5979\u60f3\u627e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4f7f\u5979\u4ece\u8be5\u4f4d\u7f6e\u51fa\u53d1\u53ef\u4ee5\u5f97\u5230\u6700\u591a\u5355\u4f4d\u7684\u7267\u8349(\u5979\u53ef\u4ee5\u8d70\u591a\u6b21\uff0c\u4f46\u6bcf\u6b21\u90fd\u4ece\u8be5\u4f4d\u7f6e\u51fa\u53d1)\u3002 \n  \u8f93\u5165\u683c\u5f0f\uff1a \n  \u7b2c1\u884c\uff1a\u4e24\u4e2a\u6574\u6570N\u548cK \n  \u7b2c2~N+1\u884c\uff1a\u4e09\u4e2a\u6574\u6570gi\uff0cxi\uff0cyi \n  \u8f93\u51fa\u683c\u5f0f\uff1a \n  \u7b2c1\u884c\uff1aBessie\u6240\u80fd\u83b7\u5f97\u7684\u6700\u591a\u5355\u4f4d\u7267\u8349\u6570\n```"
}