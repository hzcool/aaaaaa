{
    "description": "There are $N$ pastures $(2 \\le N \\le 2 \\cdot 10^5)$, connected by $N\u22121$ roads, such that they form a tree. Every road takes $1$ second to cross. Each pasture starts out with $0$ grass, and the ith pasture's grass grows at a rate of $a_i (1 \\le a_i \\le 10^8)$ units per second. Farmer John is in pasture $1$ at the start, and needs to drive around and fertilize the grass in every pasture. If he visits a pasture with $x$ units of grass, it will need $x$ amount of fertilizer. A pasture only needs to be fertilized the first time it is visited, and fertilizing a pasture takes $0$ time.\n\nThe input contains an additional parameter $T \\in \\{0,1\\}$.\n\n - If $T=0$, Farmer John must end at pasture $1$.\n - If $T=1$, Farmer John may end at any pasture.\n\nCompute the minimum amount of time it will take to fertilize every pasture and the minimum amount of fertilizer needed to finish in that amount of time. ",
    "inputFormat": "The first line contains $N$ and $T$.\n\nThen for each $i$ from $2$ to $N$, there is a line containing $p_i$ and $a_i$, meaning that there is a road connecting pastures $p_i$ and $i$. It is guaranteed that $1 \\le p_i<i$. ",
    "outputFormat": " The minimum amount of time and the minimum amount of fertilizer, separated by spaces. ",
    "samples": [
        [
            "5 0\n1 1\n1 2\n3 1\n3 4",
            "8 21"
        ],
        [
            "5 1\n1 1\n1 2\n3 1\n3 4",
            "6 29"
        ]
    ],
    "hint": "### Explanation for Sample 1\n\nThe optimal route for Farmer John is as follows: \n\n - At time $1$, move to node $3$, which now has $1 \\cdot 2=2$ grass and so needs $2$ fertilizer.\n - At time $2$, move to node $5$, which now has $2 \\cdot 4=8$ grass and so needs $8$ fertilizer.\n - At time $3$, move back to node $3$, which we already fertilized and so don't need to fertilize again.\n - At time $4$, move to node $4$, which now has $4 \\cdot 1=4$ grass and so needs $4$ fertilizer.\n - At time $5$, move back to node $3$, which we already fertilized.\n - At time $6$, move back to node $1$.\n - At time $7$, move to node $2$, which now has $7 \\cdot 1=7$ grass and so needs $7$ fertilizer.\n - At time $8$, return to node $1$. \n\nThis route takes $8$ time and uses $2+8+4+7=21$ fertilizer. It can be shown that $8$ is the least possible amount of time for any route that returns to node $1$ at the end and $21$ is the least possible fertilizer used for any route that returns to node $1$ and takes $8$ time.\n\n### Explanation for Sample 2\n\nThe optimal route for Farmer John is as follows:\n\n - At time $1$, move to node $2$, which now has $1 \\cdot 1=1$ grass and so needs $1$ fertilizer.\n - At time $2$, move back to node $1$.\n - At time $3$, move to node $3$, which now has $3 \\cdot 2=6$ grass and so needs $6$ fertilizer.\n - At time $4$, move to node $5$, which now has $4 \\cdot 4=16$ grass and so needs $16$ fertilizer.\n - At time $5$, move back to node $3$, which we already fertilized and so don't need to fertilize again.\n - At time $6$, move to node $4$, which now has $6 \\cdot 1=6$ grass and so needs $6$ fertilizer.\n\nThis route takes $6$ time and uses $1+6+16+6=29$ fertilizer. It can be shown that $6$ is the least possible amount of time for any route and $29$ is the least possible fertilizer used for any route that takes $6$ time.\n\n### SCORING\n\n - Inputs $3-10$: $T=0$\n - Inputs $11-22$: $T=1$\n - Inputs $3-6$ and $11-14$: No pasture is adjacent to more than three roads.",
    "translation": "\u6709N\u4e2a\u9876\u70b9\u7684\u6811\uff0c\u7ecf\u8fc7\u8282\u70b9\u4e4b\u95f4\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u9700\u89811s\u3002\u6bcf\u4e2a\u9876\u70b9\u4e00\u5f00\u59cb\u7684\u6743\u503c\u5747\u4e3a0\uff0c\u7b2ci\u4e2a\u70b9\u7684\u6743\u503c\u7684\u589e\u957f\u901f\u7387\u4e3aa[i]/s\u3002FJ\u4ece1\u53f7\u9876\u70b9\u51fa\u53d1\u904d\u5386\u6574\u68f5\u6811\u3002\u5f53FJ\u8d70\u5230\u67d0\u4e2a\u8282\u70b9\u65f6\uff0c\u82e5\u8be5\u8282\u70b9\u7684\u6743\u503c\u4e3ax\uff0c\u5219\u9700\u8981\u652f\u51fa\u5927\u5c0f\u4e3ax\u7684\u8d39\u7528\u3002\uff08\u5f53\u7136\uff0c\u53ea\u9700\u5728\u7b2c\u4e00\u6b21\u7ecf\u8fc7\u8be5\u8282\u70b9\u65f6\u9700\u8981\u652f\u51fa\u3002\uff09\n\n\u7ed9\u51fa\u4e00\u4e2a\u53c2\u6570T:\n\n(i)**\u82e5T=0,FJ\u5fc5\u987b\u56de\u52301\u53f7\u8282\u70b9**\u3002\n\n(ii)**\u82e5T=1\uff0cFJ\u53ef\u4ee5\u5728\u4efb\u610f\u8282\u70b9\u7ed3\u675f\u4ed6\u7684\u904d\u5386**\u3002\n\n\u6c42\u904d\u5386\u6240\u6709\u8282\u70b9\u7684\u6700\u5c0f\u65f6\u95f4\u548c\u6b64\u65f6\u9700\u8981\u4ed8\u51fa\u7684\u8d39\u7528\u3002\n\n# \u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\u5305\u62ecN\u548cT\u3002\n\n\u7b2c2\u884c\u5230\u7b2cN\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6574\u6570p[i]\u548ca[i],a[i]\u7684\u542b\u4e49\u89c1\u4e0a\u6587\u3002p[i]\u5219\u8868\u793a\u8282\u70b9i\u548cp[i]\u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u76f8\u8fde\u3002\n\n# \u8f93\u51fa\u683c\u5f0f\n\u4e24\u4e2a\u6574\u6570\uff1a\u904d\u5386\u6240\u6709\u8282\u70b9\u7684\u6700\u5c0f\u65f6\u95f4\u548c\u6b64\u65f6\u9700\u8981\u4ed8\u51fa\u7684\u8d39\u7528\u3002\n\n\u53d6\u503c\u8303\u56f4\u81ea\u884c\u53c2\u8003\u539f\u6587\u3002"
}