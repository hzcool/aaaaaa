{
    "description": "\n\nLet us consider the following way of constructing graphs. Pick the number of colors $\u02c6c$ . Let $n$ be the number of vertices in a graph. To build a graph, we use a workspace with several graphs in it. Each vertex of each graph has a color. Colors are denoted by integers from $1$ to $\u02c6c$ . Initially, we have $n$ graphs in a workspace with one vertex in each graph, all colored with color $1$ , and no edges. The only vertex of i-th graph has number $i$ .\n\nThe following operations are permitted:\n\njoin a $b$ : join graphs containing vertices a and $b$ into one graph. No edges are added. Vertices a and $b$ must be in different graphs.\n\nrecolor a $c_{1 }c_{2}:$ in graph containing vertex a recolor all vertices of color $c_{1}$ with color $c_{2}.$\n\nconnect a $c_{1 }c_{2}:$ in graph containing vertex a create edges between all pairs of vertices where one vertex has color $c_{1}$ and the other has color $c_{2}.$ If $c_{1} = c_{2}$ loops are not created. If such an edge already exists, then the second parallel edge is created. Multi-edges are not allowed in this problem, so this case must not occur.\n\nAt the end we should have a single graph and colors of its vertices do not matter.\n\nThe minimal number of colors $\u02c6c$ , that can be used to construct a graph, is called a clique width of a graph. Clique width is one of the characteristics of graph complexity. Many NP-hard problems can be solved in polynomial time on graphs with bounded clique width, using dynamic programming on this process of building a graph. For a general graph, calculating the exact value of a clique width is known to be NP-hard. However, for some graph classes bounds on a clique width are known.\n\nCactus is a connected undirected graph in which every edge lies on at most one simple cycle. Intuitively cactus is a generalization of a tree where some cycles are allowed. Multi-edges (multiple edges between a pair of vertices) and loops (edges that connect a vertex to itself) are not allowed in a cactus. It is known that a clique width of a cactus does not exceed $4$ .\n\nYou are given a cactus. Find out how to build it in the described way using at most $\u02c6c = 4$ colors.\n\n![](https://onlinejudgeimages.s3.amazonaws.com/problem/13991/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202016-12-22%20%EC%98%A4%ED%9B%84%207.31.10.png)\n\n![](https://onlinejudgeimages.s3.amazonaws.com/problem/13991/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202016-12-22%20%EC%98%A4%ED%9B%84%207.31.21.png)\n\n",
    "inputFormat": "\n\nThe first line of the input file contains two integers $n$ and $m (1 \\le n \\le 50 000$ ; $0 \\le m \\le 50 000)$ . Here $n$ is the number of vertices in the graph. Vertices are numbered from $1$ to $n$ . Edges of the graph are represented by a set of edge-distinct paths, where $m$ is the number of such paths.\n\nEach of the following $m$ lines contains a path in the graph. A path starts with an integer $k_{i} (2 \\le k_{i } \\le 1000)$ followed by $k_{i}$ integers from $1$ to $n$ . These $k_{i}$ integers represent vertices of a path. Adjacent vertices in the path are distinct. The path can go to the same vertex multiple times, but every edge is traversed exactly once in the whole input file.\n\nThe graph in the input file is a cactus.\n\n",
    "outputFormat": "\n\nIn the first line print one integer $q$ -- the number of operations you need. This number should not be greater than $10^{6}$ . In the next $q$ lines print operations. Each operation is denoted by its first letter (`j` for join, `r` for recolor and `c` for connect) and its arguments in the order they are described in the problem statement.\n\nAt the end, after applying all these operations, one should have one graph, which is equal to the cactus in the input. This means that there should be exactly one edge between each pair of vertices connected in the input graph, and no edges between vertices not connected in the input graph.\n\n",
    "samples": [
        [
            "8 2\n5 1 2 3 4 7\n5 4 5 6 1 8\n",
            "17\nr 2 1 2\nj 2 3\nc 2 1 2\nr 6 1 2\nj 5 6\nc 6 1 2\nr 4 1 3\nj 4 3\nj 4 6\nj 4 7\nc 4 3 1\nr 4 3 1\nr 8 1 2\nr 1 1 3\nj 1 8\nj 1 4\nc 1 3 2\n"
        ],
        [
            "15 3\n9 1 2 3 4 5 6 7 8 3\n7 2 9 10 11 12 13 10\n5 2 14 9 15 10\n",
            "39\nr 7 1 2\nr 5 1 2\nj 7 8\nc 7 1 2\nj 5 4\nc 5 1 2\nr 6 1 3\nj 6 7\nj 6 5\nc 6 3 2\nr 3 1 4\nj 6 3\nc 6 4 1\nr 11 1 2\nr 13 1 2\nj 12 11\nj 12 13\nc 11 1 2\nr 10 1 3\nj 12 10\nc 10 2 3\nr 10 1 2\nr 10 4 2\nr 15 1 3\nj 15 10\nc 15 3 3\nj 9 10\nc 9 1 3\nr 9 3 2\nr 9 1 4\nr 14 1 4\nj 9 14\nc 9 4 4\nr 1 1 4\nr 3 1 2\nj 2 1\nj 2 14\nj 2 3\nc 2 1 4\n"
        ]
    ],
    "hint": "Time limit: 2 s, Memory limit: 512 MB. \n\n",
    "translation": "\u6709 $n$ \u4e2a\u96c6\u5408\uff0c\u521d\u59cb\u7b2c $i$ \u4e2a\u96c6\u5408\u53ea\u5305\u542b\u7b2c $i$ \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u7684\u521d\u59cb\u989c\u8272\u90fd\u4e3a $1$\u3002\u8981\u6c42\u4f7f\u7528\u4e0b\u5217 $3$ \u79cd\u64cd\u4f5c\u6784\u5efa\u51fa\u7ed9\u5b9a\u7684\u4ed9\u4eba\u638c\u3002\u8f93\u51fa\u65b9\u6848\uff0c\u64cd\u4f5c\u6570\u4e0d\u5f97\u591a\u4e8e $10^6$\u3002\n\n- $j\\ a\\ b$\uff0c\u5c06 $a$ \u6240\u5728\u7684\u96c6\u5408\u548c $b$ \u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\u6210\u4e00\u4e2a\u96c6\u5408\u3002\n\n- $r\\ a\\ c_1\\ c_2$\uff08$c_1,c_2\\in[1,2,3,4]$\uff09\uff0c\u5c06 $a$ \u6240\u5728\u7684\u96c6\u5408\u4e2d\uff0c\u6240\u6709\u989c\u8272\u4e3a $c_1$ \u7684\u70b9\u7684\u989c\u8272\u6539\u4e3a $c_2$\u3002\n\n- $c\\ a\\ c_1\\ c_2$\uff0c\u5c06 $a$ \u6240\u5728\u7684\u96c6\u5408\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u989c\u8272\u4e3a $c_1$ \u7684\u70b9\u8fde\u5411\u6bcf\u4e00\u4e2a  \u989c\u8272\u4e3a $c_2$ \u7684\u70b9\uff0c**\u4e0d\u5141\u8bb8\u51fa\u73b0\u91cd\u8fb9**\u3002\n\n\u8f93\u5165\u7b2c\u4e00\u884c\u4e3a\u70b9\u6570 $n$ \u548c $m$ \u6761\uff08$n,m\\leq 50000$\uff09\u8fb9\u4e0d\u91cd\u590d\u7684\u8def\u5f84\uff0c\u6bcf\u6761\u8fb9**\u6070\u597d**\u4f1a\u51fa\u73b0\u4e00\u6b21\u3002\u63a5\u4e0b\u6765\u6bcf\u884c\u7b2c\u4e00\u4e2a\u6570\u5b57 $k_i$($2\\leq k_i\\leq1000$) \u4ee3\u8868\u8def\u5f84\u7684\u70b9\u6570\uff0c\u540e\u9762 $k_i$ \u4e2a\u6570\u5b57\u8868\u793a\u4e00\u6761\u8def\u5f84\u3002"
}