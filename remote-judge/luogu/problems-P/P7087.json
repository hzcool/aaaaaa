{
    "description": "\n\nErast Kopi is famous Sudoku puzzle designer. Resounding success of his puzzle compilations caused a number of imitations and plagiarisms. Prior to sending a lawsuit he decided to get more evidence.\n\nSudoku puzzle is a table $9 \\times 9$ , divided into $3 \\times 3$ subtables of $3 \\times 3$ cells each. Each cell may contain a digit from $1$ to $9$ . The task is to fill empty cells with digits in a way that each row, each column and each of the $9$ subtables $3 \\times 3$ contains each digit from $1$ to $9$ exactly once.\n\nKopi has a database of Sudoku puzzles and he wants to check if it contains similar puzzles. The puzzle $P$ is similar to the puzzle $Q$ , if it is possible to transform the puzzle $P$ into the puzzle $Q$ using a sequence of the following operations:\n\nchoose two digits $x$ and $y$ and replace all digits $x$ with $y$ and vice versa;\n\nswap two triples of rows: $(1 , 2 , 3) , (4 , 5 , 6) , (7 , 8 , 9)$ ;\n\nswap two rows in one triple of rows;\n\nswap two triples of columns: $(1 , 2 , 3) , (4 , 5 , 6) , (7 , 8 , 9)$ ;\n\nswap two columns in one triple of columns;\n\nflip along top-left -- bottom-right axis. After this operation columns become rows and vice versa.\n\n![](/upload/images2/ip.png)\n\nHelp Kopi to find similar puzzles in his database.\n\n",
    "inputFormat": "\n\nThe first line of the input contains single integer $n$ -- the number of puzzles in the database $(1 \\le n \\le 20)$ .\n\nThe rest of the input contains description of $n$ puzzles: $P_1 , P_2$ , . . . , Pn. Each puzzle is described by nine lines that contain nine characters each. Each character is either a digit from $1$ to $9$ , or a dot $(\u2018. ')$ denoting an empty cell. An empty line separates consecutive puzzles in the database.\n\nThere are no spaces in the input file.\n\nThe puzzles are not guaranteed to be solvable.\n\n",
    "outputFormat": "\n\nCheck if the puzzle $P_1$ is similar to puzzles $P_2$ , P3 , . . . , $P_n$ (in this order), than check if the puzzle $P_2$ is similar to puzzles P3 , P4 , . . . , $P_n$ (in this order) and so on.\n\nIf the puzzle $P_i$ is similar to the puzzle $Pj (1 \\le i < j \\le n)$ output `Yes`, otherwise output `No`. If the answer is positive, the next line should contain an integer qij -- the number of operations required to transform the puzzle $P_i$ to the puzzle $Pj$ . The number of operations is not required to be minimal, however it must not exceed $1000$ . In the following qij lines write the operations that transform the puzzle $P_i$ to the puzzle $Pj$ , one per line.\n\nOperations are encoded in the following way:\n\n`D $x$ y` for swapping digits $x$ and $y$ ;\n\n`R a b` for swapping triples of rows (3a $\u2212 2$ , 3a $\u2212 1 , 3a)$ and (3b $\u2212 2$ , 3b $\u2212 1 , 3b);$\n\n`r a b` for swapping rows a and $b$ , rows must belong to same triple of rows;\n\n`C a b` for swapping triples of columns (3a $\u2212 2$ , 3a $\u2212 1 , 3a)$ and (3b $\u2212 2$ , 3b $\u2212 1 , 3b);$\n\n`c a b` for swapping columns a and $b$ , columns must belong to same triple of columns;\n\n`F` for flipping along top-left -- bottom-right axis.\n\nThe columns are numbered from left to right and the rows are numbered from top to bottom as they are given in the input file, starting from one.\n\n",
    "samples": [
        [
            "4\n.....1...\n1........\n.2.....8.\n.........\n8....9...\n.........\n....7....\n...2...1.\n2...4....\n\n....2....\n...7.4...\n8.......9\n.8...2..1\n..2......\n.........\n.........\n..1.8....\n.........\n\n1........\n.........\n.........\n.........\n.........\n.........\n.........\n.........\n.........\n\n.....1...\n1........\n.2.....8.\n.........\n8....9...\n.........\n....7....\n...2...1.\n2...4....\n",
            "Yes\n7\nC 1 2\nD 5 3\nF\nr 7 9\nc 6 5\nC 2 3\nD 1 8\nNo\nYes\n0\nNo\nYes\n8\nR 1 2\nC 2 3\nc 4 5\nF\nr 5 6\nc 7 9\nD 1 8\nD 3 5\nNo\n"
        ]
    ],
    "hint": "Time limit: 2 s, Memory limit: 256 MB. \n\n",
    "translation": "\u5bf9\u4e8e\u4e24\u4e2a $9\\times9$ \u6570\u72ec\u8c1c\u9898\uff08\u4e0d\u7ba1\u662f\u5426\u6709\u89e3\uff09$A,B$\uff0c\u5b9a\u4e49 $A$ \u548c $B$ \u7b49\u4ef7\u5f53\u4e14\u4ec5\u5f53 $A$ \u53ef\u4ee5\u901a\u8fc7\u4e0b\u5217\u64cd\u4f5c\u8fdb\u884c\u82e5\u5e72\u6b21\u53d8\u6362\u540e\u6210\u4e3a $B$\u3002\n- \u9009\u62e9\u4e24\u4e2a\u6570\u5b57 $x,y$\uff0c\u5c06\u6240\u6709 $x$ \u53d8\u6210 $y$\uff0c\u6240\u6709 $y$ \u53d8\u6210 $x$\u3002\n- \u5728 $(1,2,3),(4,5,6),(7,8,9)$ \u4e09\u4e2a\u4e09\u5143\u7ec4\u4e2d\uff0c\u9009\u62e9\u4e24\u4e2a\uff0c\u4f5c\u4e3a\u6574\u4f53\u4ea4\u6362\u4ee5\u5b83\u4e3a\u4e0b\u6807\u7684\u884c\u3002\n- \u9009\u62e9\u5728\u540c\u4e00\u4e2a\u4e09\u5143\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570 $x,y$\uff0c\u4ea4\u6362\u8c1c\u9898\u7684\u7b2c $x$ \u884c\u548c\u7b2c $y$ \u884c\u3002\n- \u5728 $(1,2,3),(4,5,6),(7,8,9)$ \u4e09\u4e2a\u4e09\u5143\u7ec4\u4e2d\uff0c\u9009\u62e9\u4e24\u4e2a\uff0c\u4f5c\u4e3a\u6574\u4f53\u4ea4\u6362\u4ee5\u5b83\u4e3a\u4e0b\u6807\u7684\u5217\u3002\n- \u9009\u62e9\u5728\u540c\u4e00\u4e2a\u4e09\u5143\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570 $x,y$\uff0c\u4ea4\u6362\u8c1c\u9898\u7684\u7b2c $x$ \u5217\u548c\u7b2c $y$ \u5217\u3002\n- \u628a $A$ \u8f6c\u7f6e\u3002\n\n\u73b0\u5728\u7ed9\u5b9a $n(n\\le20)$ \u4e2a\u6570\u72ec\u8c1c\u9898\uff0c\u5224\u65ad\u5b83\u4eec\u4e24\u4e24\u662f\u5426\u7b49\u4ef7\u3002\u82e5\u7b49\u4ef7\uff0c\u8fd8\u9700\u8981\u8f93\u51fa\u4e00\u79cd\u53d8\u6362\u7684\u65b9\u6cd5\u3002`D x y` \u8868\u793a\u5c06\u4e24\u4e2a\u6570\u5b57\u4ea4\u6362\uff0c`R a b` \u8868\u793a\u6574\u4f53\u4ea4\u6362\u4e09\u5143\u7ec4 $(3a-2,3a-1,3a),(3b-2,3b-1,3b)$ \u5bf9\u5e94\u7684\u884c\uff0c`r a b` \u8868\u793a\u4ea4\u6362\u4e24\u4e2a\u884c\uff0c\u540c\u7406\u6709 `C a b` \u548c `c a b` \u4f5c\u4e3a\u5217\u64cd\u4f5c\u3002`F` \u8868\u793a\u53d6\u8f6c\u7f6e\u3002\n\ntranslated by @Starlight237"
}