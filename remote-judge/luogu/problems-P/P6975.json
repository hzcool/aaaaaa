{
    "description": "\n\nThis is the $20-th$ Northeastern European Regional Contest $(NEERC).$ Cactus problems had become a NEERC tradition. The first Cactus problem was given in $2005$ , so there is a jubilee -- $10$ years of Cactus.\n\nCactus is a connected undirected graph in which every edge lies on at most one simple cycle. Intuitively cactus is a generalization of a tree where some cycles are allowed. Multiedges (multiple edges between a pair of vertices) and loops (edges that connect a vertex to itself) are not allowed in a cactus.\n\nYou are given a cactus. Let's move an edge -- remove one of graph's edges, but connect a different pair of vertices with an edge, so that a graph still remains a cactus. How many ways are there to perform such a move?\n\n![](https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/11737/1.png)\n\nFor example, in the left cactus above (given in the first sample), there are $42$ ways to perform an edge move. In the right cactus (given in the second sample), which is the classical NEERC cactus since the original problem in $2005$ , there are $216$ ways to perform a move.\n\n",
    "inputFormat": "\n\nThe first line of the input file contains two integers $n$ and $m (1 \\le n \\le 50 000 , 0 \\le m \\le 50 000)$ . Here $n$ is the number of vertices in the graph. Vertices are numbered from $1$ to $n$ . Edges of the graph are represented by a set of edge-distinct paths, where $m$ is the number of such paths.\n\nEach of the following $m$ lines contains a path in the graph. A path starts with an integer $k_{i} (2 \\le k_{i} \\le 1000)$ followed by $k_{i}$ integers from $1$ to $n$ . These $k_{i}$ integers represent vertices of a path. Adjacent vertices in a path are distinct. Path can go to the same vertex multiple times, but every edge is traversed exactly once in the whole input file.\n\nThe graph in the input file is a cactus.\n\n",
    "outputFormat": "\n\nWrite to the output file a single integer -- the number of ways to move an edge in the cactus.\n\n",
    "samples": [
        [
            "6 1\n7 1 2 5 6 2 3 4\n",
            "42\n"
        ],
        [
            "15 3\n9 1 2 3 4 5 6 7 8 3\n7 2 9 10 11 12 13 10\n5 2 14 9 15 10\n",
            "216\n"
        ]
    ],
    "hint": "Time limit: 1 s, Memory limit: 256 MB. \n\n",
    "translation": "\u9898\u76ee\u63cf\u8ff0\n\n\u5b9a\u4e49\u4e00\u79cd\u65e0\u5411\u8fde\u901a\u56fe\u53eb`\u4ed9\u4eba\u638c\u56fe\uff08Cactus\u56fe\uff09`\u3002\u4ed9\u4eba\u638c\u56fe\u4e2d\u6ca1\u6709\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u5e76\u4e14\u5176\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\u81f3\u591a\u4f4d\u4e8e\u4e00\u4e2a\u7b80\u5355\u73af\u4e0a\u3002\u7b80\u5355\u5730\u8bf4\uff0c`\u4ed9\u4eba\u638c\u56fe`\u662f\u6811\u7684\u4e00\u79cd\u6cdb\u5316\u5f62\u5f0f\uff0c\u5176\u4e2d\u5141\u8bb8\u51fa\u73b0\u4e00\u4e9b\u73af\u3002\n\n\u73b0\u5728\u6709\u4e00\u4e2a`\u4ed9\u4eba\u638c\u56fe`\uff0c\u4f60\u6bcf\u6b21\u53ef\u4ee5\u79fb\u52a8\u4e00\u6761\u8fb9\uff08\u79fb\u9664\u56fe\u7684\u4e00\u6761\u8fb9\uff0c\u5e76\u5c06\u53e6\u4e00\u5bf9\u9876\u70b9\u7528\u4e00\u6761\u8fb9\u8fde\u63a5\u8d77\u6765\uff09\u3002\u95ee\u5982\u679c\u8981\u8ba9\u540e\u6765\u5f97\u5230\u7684\u65b0\u56fe\u4ecd\u7136\u662f`\u4ed9\u4eba\u638c\u56fe`\uff0c\u6709\u591a\u5c11\u79cd\u79fb\u52a8\u8fb9\u7684\u529e\u6cd5\uff1f\n\n\u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570n\u548cm\uff0c\u5206\u522b\u8868\u793a\u56fe\u4e2d\u7684\u9876\u70b9\u6570\uff08\u9876\u70b9\u7684\u7f16\u53f7\u5206\u522b\u4e3a${1,2,3,...,n}$\uff09\u548c\u8fb9\u7684\u6570\u76ee\uff0c\u4e14\u6ee1\u8db3\n$$1\u2264n\u226450000,0\u2264m\u226450000$$\n\n\u7b2c2~m+1\u884c\uff0c\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u6761\u8def\u5f84\uff08\u4ece\u4e00\u4e2a\u9876\u70b9\u51fa\u53d1\u4e00\u76f4\u5f80\u540e\u8d70\uff0c\u76f4\u5230\u5f53\u524d\u6240\u5728\u7684\u9876\u70b9\u6ca1\u6709\u4efb\u4f55\u672a\u8d70\u8fc7\u4e00\u6761\u8fb9\uff09\u3002\n\n\uff08\u8bd1\u8005\u6ce8\uff1a\u867d\u7136\u5e94\u8be5\u90fd\u80fd\u770b\u51fa\u6765\u4e86\uff0c\u4f46\u662f\u8fd8\u662f\u7528\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u66f4\u6d45\u663e\u6613\u61c2\uff09\n\n\u8bbe\u8def\u5f84\u7684\u5f00\u59cb\u70b9\u4e3a$q_1$\uff0c$E_i$\u8868\u793a\u7b2c$i$\u4e2a\u70b9\u7684\u8fb9,$vis$\u6570\u7ec4\u4e2d\u5b58\u50a8\u5df2\u7ecf\u8d70\u8fc7\u4e86\u7684\u8fb9\uff0c\u5219\u6574\u6761\u8def\u5f84\u53ef\u5b9a\u4e49\u4e3a\uff1a\n```\n1.x\u2190q1\n2.f(x)\n\t1.add(vis[],x)\n\t2.for i\u2208Ex do\n\t1.if i not in vis[] then\n\t\t1.call f(i->to)\n3.print(vis[])\n```\n\u5373\uff1a\u6bcf\u4e00\u884c\u7684\u5f00\u59cb\u6709\u4e00\u4e2a\u6574\u6570$k_i$\uff0c\u6ee1\u8db3\n$2\u2264k_i\u22641000$\uff0c\u7d27\u63a5\u7740\u6709$k_i$\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8fd9\u6761\u8def\u5f84\u6240\u7ecf\u8fc7\u7684\u9876\u70b9$q_i$\uff0c\u6ee1\u8db3$q_i\u2208[1,n]$\u3002\n\n\u6570\u636e\u4fdd\u8bc1\u8def\u5f84\u4e2d\u7684\u76f8\u90bb\u9876\u70b9\u662f\u4e0d\u540c\u7684\u3002\n\n\u5728\u8def\u5f84\u4e2d\u53ef\u4ee5\u591a\u6b21\u5230\u8fbe\u540c\u4e00\u4e2a\u9876\u70b9\uff0c\u4f46\u5728\u6574\u4e2a\u8f93\u5165\u6587\u4ef6\u4e2d\uff0c\u6bcf\u6761\u8fb9\u53ea\u904d\u5386\u4e00\u6b21\u3002\n\n\u6570\u636e\u4fdd\u8bc1\u8f93\u5165\u6587\u4ef6\u4e2d\u7684\u56fe\u5f62\u662f\u4ed9\u4eba\u638c\u3002\n\n\u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u51fa\u6587\u4ef6\u4e2d\u53ea\u6709\u4e00\u4e2a\u6574\u6570\uff0c\u5373\u79fb\u52a8`\u4ed9\u4eba\u638c\u56fe`\u4e2d\u4e00\u6761\u8fb9\u7684\u65b9\u6cd5\u6570\u3002\n\n\u6570\u636e\u8303\u56f4\n$$1\u2264n\u226450000,0\u2264m\u226450000,2\u2264k_i\u22641000,q_i\u2208[1,n]$$"
}