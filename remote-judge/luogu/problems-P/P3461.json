{
    "description": "Byteland Railways encountered a necessity of restructuring and    reduction of the rail network.\n\nAfter a deep analysis of of the rail network it has been decided    which railway stations will be removed and which ones will stay.\n\nIt has been also decided that the rail network should be reduced as far    as possible.\n\nIt remains to choose which railway lines should be removed and which    ones should stay.\n\nThe rail network is composed of rail segments connecting railway    stations.\n\nIt is known that from each station one can travel to every other    station (potentially visiting some intermediate stations).\n\nRail segments are bidirectional.\n\nThere can be at most one rail segment connecting each pair of stations.\n\nEach segment can be assigned a cost of maintenance, which is    a positive integer.\n\nThe rail segments that will remain should be chosen in such    way that:\n\nit is possible to travel between every pair of stations        that are not going to be removed,                  their total cost of maintenance is low (it can be at most two times        greater than the lowest cost that can be achieved, assuming that the        previous condition is satisfied).\n\nAll remaining rail segments will be removed.\n\nRailway lines that will remain can run through stations that will be    removed.\n\nTaskWrite a programme which:\n\nreads a description of the rail network and the stations          that will not be removed from the standard input,                      determines which rail segments should remain and which should          be removed,                      writes out the rail segments that should remain together with the          total cost of their maintenance to the standard output.\n",
    "inputFormat": "The first line of input contains two positive integers $n$ and $m$, $2\\le n\\le 5\\ 000$, $1\\le m\\le 500\\ 000$($m\\le \\frac{n(n-1)}{2}$),      separated by a single space.\n\n$n$ denotes the number of railway stations and $m$ is the number of rail segments.\n\nRailway stations are numbered from $1$ to $n$.\n\nThe following $m$ lines contain descriptions of the rail      segments, one per line.\n\nEach of these lines contains three positive integers $a$,$b$ and $u$,$1\\le a,b\\le n$,$a\\ne b$,$1\\le u\\le 100\\ 000$.\n\n$a$ and $b$ are the numbers of stations that are connected      by the segment and $u$ is its cost of maintenance.\n\nThe $(m+2)$'th line contains a sequence of integers separated by      single spaces.\n\nThe first one of them is $p$ - the number of stations that should remain      ($1\\le p\\le n$, $p\\cdot m\\le 15\\ 000\\ 000$).\n\nIt is followed by the numbers of these stations in increasing order.\n",
    "outputFormat": "The first line of output should contain two integers $c$ and $k$ separated by a single space, where $c$ is the total cost of maintenance of the segments that      should remain and $k$ is the number of these segments.\n\nEach of the following $k$ lines should contain two integers $a_i$ and $b_i$, separated by a single space -      the numbers of stations that are connected by the segment.\n\nThe total cost of maintenance of the segments can be at most      two times greater than the lowest achievable total cost.\n",
    "samples": [
        [
            "8 11\n1 2 6\n3 1 5\n2 3 8\n3 4 9\n3 5 10\n5 4 3\n5 6 9\n6 4 8\n6 8 8\n6 7 7\n8 7 10\n4 2 5 7 8",
            "42 5\n2 3\n3 5\n5 6\n6 7\n6 8"
        ]
    ],
    "hint": "",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\n\u51fa\u8a00\u4e0d\u900a\u94c1\u8def\u7cfb\u7edf\u9700\u8981\u91cd\u65b0\u5e03\u7f6e\u3002\u901a\u8fc7\u5bf9\u94c1\u8def\u7f51\u7edc\u6df1\u5165\u7684\u5206\u6790\uff0c\u6709\u4e00\u4e9b\u7ad9\u70b9\u9700\u8981\u88ab\u79fb\u9664\uff0c\u6709\u4e00\u4e9b\u9053\u8def\u4e5f\u9700\u8981\u88ab\u79fb\u9664\u3002 \u6574\u4e2a\u94c1\u8def\u7f51\u7edc\u53ef\u4ee5\u770b\u505a\u4e00\u5f20\u7531 $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u9053\u8def\u7ec4\u6210\u7684\u65e0\u5411\u56fe\u3002\u4ece\u6bcf\u4e00\u4e2a\u70b9\u51fa\u53d1\u90fd\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u6216\u95f4\u63a5\u7684\u9053\u8def\u5230\u8fbe\u5176\u5b83\u6240\u6709\u70b9\u3002\u4e24\u4e2a\u7ad9\u70b9\u4e4b\u95f4\u6700\u591a\u53ea\u6709\u4e00\u6761\u9053\u8def\u3002\u6bcf\u4e00\u6761\u9053\u8def\u90fd\u6709\u4e00\u4e2a\u6b63\u6574\u6570\u8d39\u7528\u3002\u4f60\u7684\u4efb\u52a1\u662f\u51b3\u5b9a\u54ea\u4e9b\u70b9\u548c\u9053\u8def\u9700\u8981\u88ab\u4fdd\u7559\u3002 \u8981\u6c42\uff1a\n\n1.\u4ece\u6bcf\u4e00\u4e2a\u6ca1\u88ab\u79fb\u9664\u7684\u70b9\u51fa\u53d1\u90fd\u80fd\u901a\u8fc7\u76f4\u63a5\u6216\u95f4\u63a5\u7684\u6ca1\u88ab\u79fb\u9664\u7684\u9053\u8def\u5230\u8fbe\u5176\u4ed6\u6240\u6709\u6ca1\u88ab\u79fb\u9664\u7684\u70b9\u3002\n\n2.\u5269\u4e0b\u7684\u9053\u8def\u7684\u8d39\u7528\u603b\u548c\u8981\u6bd4\u8f83\u5c0f\uff0c\u5373\u4e0d\u80fd\u8d85\u8fc7\u6700\u4f18\u89e3\u7684\u4e24\u500d\u3002\n\n## \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 $n$\u3001$m$\uff08$2\\leq n\\leq 5\\times 10^3$\uff0c$1\\leq m\\leq 5\\times 10^5$\uff09\uff0c\u8868\u793a\u70b9\u6570\u548c\u8fb9\u6570\u3002 \u63a5\u4e0b\u6765 $m$ \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6b63\u6574\u6570 $a$\u3001$b$\u3001$u$\uff08$1\\leq a$\u3001$b\\leq n$\uff0c$a\\neq b$\uff0c$1\\leq u\\leq 1 \\times 10^5$\uff09\uff0c\u8868\u793a $a$ \u548c $b$ \u4e4b\u95f4\u6709\u4e00\u6761\u8d39\u7528\u4e3a $u$ \u7684\u9053\u8def\u3002 \u6700\u540e\u4e00\u884c\u7684\u5f00\u5934\u4e3a\u4e00\u4e2a\u6b63\u6574\u6570 $p$\uff08$2\\leq p\\leq n$\uff0c$p\\times m\\leq 1.5\\times 10^7$\uff09\uff0c\u8868\u793a\u5fc5\u987b\u8981\u4fdd\u7559\u7684\u70b9\u6570\u3002 \u63a5\u4e0b\u6765\u5305\u542b $p$ \u4e2a\u6b63\u6574\u6570\uff0c\u6309\u9012\u589e\u987a\u5e8f\u4f9d\u6b21\u7ed9\u51fa\u5fc5\u987b\u4fdd\u7559\u7684\u70b9\u7684\u7f16\u53f7\u3002\n\n## \u8f93\u51fa\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 $c$\u3001$k$\uff0c\u5176\u4e2d $c$ \u8868\u793a\u5269\u4f59\u9053\u8def\u7684\u8d39\u7528\u603b\u548c\uff0c$k$ \u8868\u793a\u5269\u4f59\u9053\u8def\u7684\u6761\u6570\u3002 \u63a5\u4e0b\u6765 $k$ \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 $a$\u3001$b$\uff0c\u8868\u793a\u4e00\u6761\u9053\u8def\u7684\u4e24\u4e2a\u7aef\u70b9\u3002 \u5982\u6709\u591a\u7ec4\u89e3\uff0c\u8f93\u51fa\u4efb\u610f\u4e00\u7ec4\u3002"
}