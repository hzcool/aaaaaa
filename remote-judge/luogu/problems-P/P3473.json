{
    "description": "Al Bytone, the infamous thief, plans a bank robbery.\n\nHe knows only too well that the moment he robs the bank a pursuit    will be commenced. Unfortunately, Al Bytone is a poor driver and turning    left causes him great trouble. This is why he tries to devise such an    escape route that at each intersection he would either ride straight    ahead or turn right. He is also aware that once he passes through any    intersection, the police will come and remain there, waiting for him.\n\nTherefore he may pass through any intersection at most once.\n\nFurthermore, the police are always present at certain intersections,    so Al Bytone will have to avoid these intersections as well    (there's no police at the intersections near the bank and near Al Bytone's    hideout.)    Al Bytone is planning his escape route. To your great (and rather    unpleasant) surprise, he paid you a visit and told to calculate the    number of different escape routes leading from the bank to his hideout    complying the aforementioned requirements. Needless to say, Al Bytone    does not take 'no' as an answer...\n\n    The streets of Byteburg form a rectangular grid.\n\nEvery street runs either in the North-South or East-West direction,    and every two non-parallel streets intersect.\n\nThe bank is situated to the south of the south-western-most intersection.\n\nAl Bytone will start his great escape driving north.\n\nTask      Write a programme that:\n\nreads from the standard input the location of hideout,          descriptions of intersections with police and a positive          integer ![](http://main.edu.pl/images/OI15/uci-en-tex.1.png),                      calculates the number of different escape routes leading from the bank to the hideout          complying the aforementioned requirements,                      writes out to the standard output this number's residue modulo ![](http://main.edu.pl/images/OI15/uci-en-tex.2.png).\n\n\u7ed9\u4e00\u4e2an\\*m  \u7684\u5730\u56fe\uff0c\u8ba1\u7b97\u4ece(n,1)  \u5230\u7b2c x \u5217\u7684\u7b2cy  \u884c\u7684\u8def\u5f84\u6761\u6570 mod k \uff0c\u8d70\u8fc7\u7684\u70b9\u4e0d\u80fd\u518d\u8d70\uff0c\u8f6c\u5f2f\u53ea\u80fd\u5411\u53f3\u8f6c\u3002\n",
    "inputFormat": "There are three integers in the first line of the standard input,      ![](http://main.edu.pl/images/OI15/uci-en-tex.3.png), ![](http://main.edu.pl/images/OI15/uci-en-tex.4.png) and ![](http://main.edu.pl/images/OI15/uci-en-tex.5.png) (![](http://main.edu.pl/images/OI15/uci-en-tex.6.png), ![](http://main.edu.pl/images/OI15/uci-en-tex.7.png)).\n\nThe numbers ![](http://main.edu.pl/images/OI15/uci-en-tex.8.png) and ![](http://main.edu.pl/images/OI15/uci-en-tex.9.png) denote the number of streets leading in      East-West and North-South direction, respectively.\n\nThe second line contains two integers ![](http://main.edu.pl/images/OI15/uci-en-tex.10.png) and ![](http://main.edu.pl/images/OI15/uci-en-tex.11.png) (![](http://main.edu.pl/images/OI15/uci-en-tex.12.png),      ![](http://main.edu.pl/images/OI15/uci-en-tex.13.png)).\n\nThese represent the hideout's location - at the intersection      of ![](http://main.edu.pl/images/OI15/uci-en-tex.14.png) street leading in Nort\u2026\n",
    "outputFormat": "Your programme should write out the residue of the number of escape      routes modulo ![](http://main.edu.pl/images/OI15/uci-en-tex.26.png) in the first and only line of the standard output.\n",
    "samples": [
        [
            "3 5 10\n4 2\n+++++\n++*++\n++++*\n",
            "2\n"
        ]
    ],
    "hint": ""
}