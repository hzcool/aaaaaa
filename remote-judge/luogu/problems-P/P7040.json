{
    "description": "\n\nJohn likes to learn esoteric programming languages. Recently he discovered the probabilistic $programming\u00a0language$ Java2K. Built-in functions of Java2K have only a certain probability to do whatever you $intend\u00a0the_m$ to do.\n\nThe Java2K programming is very hard, so John designed a much simpler language for training: Java2016. $\u00a0Built-i_n$ operators of Java2016 are deterministic, while their operands are random. Each value in $Java2016\u00a0is$ a positive integer in the range $0 \\cdots 255$ , inclusive.\n\nJava2016 supports six operators of three precedencies:\n\n$\u2329expressio_n\u232a ::= \u2329expressio_n\u232a\u2018mi_n'\u2329su_m\u232a | \u2329expressio_n\u232a\u2018max'\u2329su_m\u232a | \u2329su_m\u232a$\n\n$\u2329su_m\u232a ::= \u2329su_m\u232a\u2018+'\u2329ter_m\u232a | \u2329su_m\u232a\u2018-'\u2329ter_m\u232a | \u2329ter_m\u232a$\n\n$\u2329ter_m\u232a ::= \u2329ter_m\u232a\u2018 \\times '\u2329factor\u232a | \u2329ter_m\u232a\u2018/'\u2329factor\u232a | \u2329factor\u232a$\n\n$\u2329factor\u232a ::= \u2018('\u2329expressio_n\u232a\u2018)' | \u2018?' | \u2329macro\u232a$\n\nMinimum $(\u2018mi_n')$ and maximum $(\u2018max')$ operators are defined as usual. Addition $(\u2018+'),$ subtraction $(\u2018-')\u00a0and$ multiplication $(\u2018 \\times ')$ are defined modulo $256$ . The result of the division $(\u2018/')$ is rounded towards zero. $\u00a0If$ the divider is zero, the program crashes. The argument of the operator is a result of another $operator,\u00a0evenly$ distributed random value $(\u2018?'),$ or macro substitution.\n\nFor instance, the probability that $`?/?/?`$ is evaluated to zero is $98$ . $2\\%,$ while the probability of $the\u00a0crash$ is $0$ . $8\\%.$\n\nThe Java2016 program consists of zero or more macro definitions, followed by the resulting expression. $\u00a0Each$ macro definition has a form of\n\n$\u2329macrodef\u232a ::= \u2329macro\u232a\u2018='\u2329expressio_n\u232a$\n\n$\u2329macro\u232a ::= \u2018a'$ . . . $\u2018z'$\n\nThe macro should be defined before the first use. It may not be redefined. The macro is expanded to $its\u00a0definitio_n$ on each use. For instance,\n\na $=$ ? max ?\n\n(a max $a) /$ a\n\nis expanded to `((? max $?)$ max $(?$ max $?)) / (?$ max $?)`.$\n\nJohn is going to add probabilistic constants to Java2016, so for each possible constant value he needs $a\u00a0progra_m$ that successfully evaluates to this value with at least one-half probability. Crashes are $counted\u00a0toward$ failures.\n\n",
    "inputFormat": "\n\nThe input contains a single integer $c$ -- the target constant $(0 \\le c \\le 255)$ .\n\n",
    "outputFormat": "\n\nOutput a Java2016 program that successfully evaluates to constant $c$ with probability no less than $1/2$ . $\u00a0The$ total length of the program should not exceed $256$ characters (excluding spaces).\n\n",
    "samples": [
        [
            "0\n",
            "? /?/ ?\n"
        ],
        [
            "1\n",
            "a = ? max ?\n(a max a) / a\n"
        ]
    ],
    "hint": "Time limit: 2 s, Memory limit: 512 MB. \n\n",
    "translation": "John \u559c\u6b22\u5b66\u4e60\u6df1\u5965\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u6700\u8fd1\uff0c\u4ed6\u53d1\u73b0\u4e86\u6982\u7387\u7f16\u7a0b\u8bed\u8a00 Java2K\u3002Java2K \u7684\u5185\u7f6e\u51fd\u6570\u53ea\u6709\u4e00\u5b9a\u7684\u6982\u7387\u53bb\u6267\u884c\u4f60\u60f3\u8ba9\u5b83\u4eec\u505a\u7684\u4e8b\u60c5\u3002\n\nJava2K \u7f16\u7a0b\u975e\u5e38\u56f0\u96be\uff0c\u56e0\u6b64 John \u8bbe\u8ba1\u4e86\u4e00\u79cd\u7b80\u5355\u5f97\u591a\u7684\u8bed\u8a00\u7528\u4e8e\u8bad\u7ec3\uff1aJava2016\u3002Java2016 \u7684\u5185\u7f6e\u8fd0\u7b97\u7b26\u662f\u786e\u5b9a\u6027\u7684\uff0c\u800c\u5b83\u4eec\u7684\u64cd\u4f5c\u6570\u662f\u968f\u673a\u7684\u3002Java2016 \u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u662f $0$ \u5230 $255$ (\u5305\u542b $0$ \u548c $255$) \u4e2d\u7684\u6574\u6570\u3002\n\nJava2016 \u652f\u6301\u5206\u4e3a\u4e09\u4e2a\u4f18\u5148\u7ea7\u7684\u516d\u79cd\u8fd0\u7b97\u7b26\uff1a\n\n$$\\begin{aligned}{\\langle \\mathrm{expression}\\rangle}&\\quad::=\\quad{\\langle \\mathrm{expression}\\rangle}\\operatorname{`\\texttt{min}\\text'}{\\langle \\mathrm{sum}\\rangle}\\mid{\\langle \\mathrm{expression}\\rangle}\\operatorname{`\\texttt{max}\\text'}{\\langle \\mathrm{sum}\\rangle}\\mid {\\langle \\mathrm{sum}\\rangle}\\\\{\\langle \\mathrm{sum}\\rangle}&\\quad::=\\quad{\\langle \\mathrm{sum}\\rangle}\\operatorname{`\\texttt{+}\\text'}{\\langle \\mathrm{term}\\rangle}\\mid{\\langle \\mathrm{sum}\\rangle}\\operatorname{`\\texttt{-}\\text'}{\\langle \\mathrm{term}\\rangle}\\mid{\\langle \\mathrm{term}\\rangle}\\\\{\\langle \\mathrm{term}\\rangle}&\\quad::=\\quad{\\langle \\mathrm{term}\\rangle}\\operatorname{`\\texttt{*}\\text'}{\\langle \\mathrm{factor}\\rangle}\\mid {\\langle \\mathrm{term}\\rangle}\\operatorname{`\\texttt{/}\\text'}{\\langle \\mathrm{factor}\\rangle}\\mid {\\langle \\mathrm{factor}\\rangle}\\\\{\\langle \\mathrm{factor}\\rangle}&\\quad::=\\quad\\operatorname{`\\texttt{(}\\text'}{\\langle \\mathrm{expression}\\rangle}\\operatorname{`\\texttt{)}\\text'}\\mid `\\texttt{?}\\text'\\mid {\\langle \\mathrm{macro}\\rangle}\\end{aligned}$$\n\n\u6700\u5c0f ($\\operatorname{`\\texttt{min}\\text'}$) \u548c\u6700\u5927 ($\\operatorname{`\\texttt{max}\\text'}$) \u8fd0\u7b97\u7b26\u7684\u5b9a\u4e49\u548c\u901a\u5e38\u4e00\u6837\u3002\u52a0\u6cd5 ($\\operatorname{`\\texttt{+}\\text'}$)\u3001\u51cf\u6cd5 ($\\operatorname{`\\texttt{-}\\text'}$) \u548c\u4e58\u6cd5 ($\\operatorname{`\\texttt{*}\\text'}$) \u662f\u5728\u6a21 $256$ \u7684\u610f\u4e49\u4e0b\u5b9a\u4e49\u7684\u3002\u9664\u6cd5 ($`\\operatorname{\\texttt{/}\\text'}$) \u7684\u7ed3\u679c\u5411 $0$ \u53d6\u6574\u3002\u5982\u679c\u9664\u6570\u662f $0$\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u5d29\u6e83\u3002\u8fd0\u7b97\u7b26\u7684\u53c2\u6570\u662f\u53e6\u4e00\u4e2a\u8fd0\u7b97\u7b26\u7684\u7ed3\u679c\u3001\u5747\u5300\u5206\u5e03\u7684\u968f\u673a\u6570 ($\\operatorname{`\\texttt{?}\\text'}$) \u6216\u5b8f\u4ee3\u6362\u7684\u7ed3\u679c\u3002\n\n\u4f8b\u5982\uff0c$``\\texttt{?/?/?}\\text{''}$ \u6709 $98.2\\%$ \u7684\u6982\u7387\u8ba1\u7b97\u5f97\u5230 $0$\uff0c\u800c\u5d29\u6e83\u7684\u6982\u7387\u4e3a $0.8\\%$\u3002\n\nJava2016 \u7a0b\u5e8f\u7531\u96f6\u4e2a\u6216\u591a\u4e2a\u5b8f\u5b9a\u4e49\u4ee5\u53ca\u968f\u540e\u7684\u7ed3\u679c\u8868\u8fbe\u5f0f\u7ec4\u6210\u3002\u6bcf\u6761\u5b8f\u5b9a\u4e49\u90fd\u5f62\u5982\n\n$$\\begin{aligned}{\\langle \\mathrm{macrodef}\\rangle}&\\quad::=\\quad{\\langle \\mathrm{macro}\\rangle}\\operatorname{`\\texttt{=}\\text'}{\\langle \\mathrm{expression}\\rangle}\\\\{\\langle \\mathrm{macro}\\rangle}&\\quad::=\\quad\\operatorname{`\\texttt{a}\\text'}\\ldots\\operatorname{`\\texttt{z}\\text'}\\end{aligned}$$\n\n\u5b8f\u5fc5\u987b\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528\u524d\u88ab\u5b9a\u4e49\u3002\u5b8f\u4e0d\u80fd\u88ab\u91cd\u590d\u5b9a\u4e49\u3002\u5b8f\u5728\u6bcf\u6b21\u4f7f\u7528\u65f6\u90fd\u4f1a\u88ab\u5c55\u5f00\u6210\u5b83\u7684\u5b9a\u4e49\u3002\u4f8b\u5982\uff0c\n\n$$\\texttt{a = ?  max ?}\\\\\\texttt{(a max a) / a}$$\n\n\u4f1a\u88ab\u5c55\u5f00\u6210 $``\\texttt{((? max ?) max (? max ?)) / (? max ?)}\\text{''}$\u3002\n\nJohn \u5c06\u8981\u628a\u6982\u7387\u5e38\u91cf\u52a0\u5165 Java2016\uff0c\u56e0\u6b64\u5bf9\u6bcf\u4e2a\u53ef\u80fd\u7684\u5e38\u91cf\uff0c\u4ed6\u9700\u8981\u4e00\u4e2a\u7a0b\u5e8f\u80fd\u4ee5\u81f3\u5c11\u4e00\u534a\u7684\u6982\u7387\u6210\u529f\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u503c\u3002\u5d29\u6e83\u88ab\u7b97\u4f5c\u5931\u8d25\u3002\n\n#### \u8f93\u5165\n\n\u8f93\u5165\u5305\u542b\u4e00\u4e2a\u6574\u6570 $c$ ($0\\le c\\le 255$)\uff0c\u8868\u793a\u76ee\u6807\u5e38\u91cf\u3002\n\n#### \u8f93\u51fa\n\n\u8f93\u51fa\u4e00\u4e2a Java2016 \u7a0b\u5e8f\uff0c\u5b83\u9700\u8981\u80fd\u591f\u4ee5\u81f3\u5c11 $1/2$ \u7684\u6982\u7387\u6210\u529f\u8ba1\u7b97\u51fa\u5e38\u91cf $c$\u3002\u7a0b\u5e8f\u7684\u603b\u957f\u5ea6\u4e0d\u5e94\u8d85\u8fc7 $256$ \u4e2a\u5b57\u7b26 (\u7a7a\u683c\u4e0d\u8ba1\u7b97\u5728\u5185)\u3002"
}