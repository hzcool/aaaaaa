{
    "description": "\n\nAccording to Java standard library documentation, the hash code of String is computed as\n\n$s[0] \\times 31 ^ {n -1} + s[1] \\times 31 ^ {n -2} + \\cdots + s[n -1]$\n\nHere $s[i]$ is the i-th character of the string, $n$ is the length of the string, and $^$ indicates exponentiation. Computation uses signed $32-bit$ integers in two's complement form.\n\nHeather is going to hack the servers of Not Entirely Evil Recording Company $(NEERC).$ To perform an attack she needs $k$ distinct query strings that have equal hash codes. Unfortunately, NEERC servers accept query string containing lower- and uppercase English letters only.\n\nHeather hired you to write a program that generates such query strings for her.\n\n",
    "inputFormat": "\n\nThe single line of the input file contains integer $k$ -- the number of required query strings to generate $(2 \\le k \\le 1000)$ .\n\n",
    "outputFormat": "\n\nOutput $k$ lines. Each line should contain a single query string. Each query string should be non-empty and its length should not exceed $1000$ characters. Query string should contain only lower- and uppercase English letters. All query strings should be distinct and should have equal hash codes.\n\n",
    "samples": [
        [
            "4\n",
            "edHs\nmENAGeS\nfEHs\nedIT\n"
        ]
    ],
    "hint": "Time limit: 2 s, Memory limit: 256 MB. \n\n",
    "translation": "\u6839\u636e$Java$\u7684\u6807\u51c6\u5e93\u6587\u4ef6\uff0c\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u4ee3\u7801\u662f\u8fd9\u4e48\u8ba1\u7b97\u7684\uff1a\n\n$$s[0]\u00d731 ^{(n\u22121)}+s[1]\u00d731^{(n\u22122)}+\u22ef+s[n\u22121]$$\n\n\u5728\u8fd9\u91cc\uff0cs[i]\u6307\u7684\u662f\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2ci\u4f4d\uff0cn\u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\n\n\u8fd9\u4e2a\u8ba1\u7b97\u8fc7\u7a0b\u7528\u7684\u662f\u6709\u7b26\u53f7\u7684$32$\u4f4d\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8865\u7801\u5f62\u5f0f\u3002\n\n\u6709\u4e00\u4e2a\u4eba\u53eb\u4f5c \u9616\u9515\u4ec4 $(Heather)$\u3002\u4ed6\u60f3\u8981$hack$\u6389\u201c\u4e0d\u5168\u662f\u6076\u9b54\u5f55\u97f3\u516c\u53f8\u201d$(NEERC)$\u3002\u4e3a\u4e86\u8fdb\u884c\n\n\u4e00\u6b21\u653b\u51fb\uff0c\u9616\u9515\u4ec4\u9700\u8981$k$\u4e2a\u6709\u76f8\u540c\u54c8\u5e0c\u4ee3\u7801\u7684\u4e0d\u540c\u7684\u8be2\u95ee\u5b57\u7b26\u4e32\u3002\u4e0d\u5e78\u7684\u662f\uff0c$NEERC$\u7684\u670d\u52a1\u5668\n\n\u53ea\u63a5\u53d7\u53ea\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\u3002\n\n\u9616\u9515\u4ec4\u8bf7\u4f60\u5e2e\u5fd9\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4ee5\u751f\u6210\u4ed6\u9700\u8981\u7684\u8be2\u95ee\u5b57\u7b26\u4e32\u3002\n\n-------\n\n\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570$k$,\u4ee3\u8868\u9700\u8981\u7684\u5b57\u7b26\u4e32\u7684\u6570\u91cf\u3002\n\n-------\n\n\u8f93\u51fa\u6709$k$\u884c\uff0c\u6bcf\u884c\u7684\u8be2\u95ee\u5b57\u7b26\u4e32\u90fd\u4e0d\u5e94\u8be5\u4e3a\u7a7a\uff0c\u5e76\u4e14\u6bcf\u884c\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5e94\u8be5\u5c0f\u4e8e\u7b49\u4e8e1000\u4e2a\u5b57\u7b26\u3002\n\n\u8be2\u95ee\u5b57\u7b26\u4e32\u7684\u5177\u4f53\u8981\u6c42\u8bf7\u770b\u4e0a\u6587\u3002\n\n-------\n\n\u65f6\u95f4\u9650\u5236\uff1a$2s$    \n\n\u7a7a\u95f4\u9650\u5236\uff1a$256MB$\n\n\u7ffb\u8bd1\u63d0\u4f9b\uff1a@Trexmao"
}