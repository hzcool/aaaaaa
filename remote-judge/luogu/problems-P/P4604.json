{
    "description": "## \u4efb\u52a1\u4e00\n\n\u7ed9\u5b9a $n$ \u4e2a $32$ \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u5c06\u5b83\u4eec\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n## \u4efb\u52a1\u4e8c\n\n\u6709 $2n$ \u4e2a\u4eba\u5728\u73a9 \u300c\u77f3\u5934\u526a\u5200\u5e03\u300d \u6e38\u620f\u3002\u4ed6\u4eec\u6392\u6210\u4e24\u6392\uff0c\u6bcf\u6392 $n$ \u4e2a\u4eba\u3002\u6bcf\u4e2a\u4eba\u5728\u6bcf\u4e00\u5c40\u6e38\u620f\u90fd\u4f7f\u7528\u56fa\u5b9a\u7b56\u7565\uff0c\u5373\u5bf9\u4e8e\u7b2c $i (i \\in 1, 2)$ \u6392\u7684\u7b2c $j (0 \\leq j < n)$ \u4e2a\u4eba\uff0c\u7528\u4e00\u4e2a\u6574\u6570 $a_{ij}$\u200b\u200b \u8868\u793a\u4ed6\u7684\u7b56\u7565\uff0c\u5176\u4e2d $0$ \u8868\u793a\u53ea\u51fa\u77f3\u5934\uff0c$1$ \u8868\u793a\u53ea\u51fa\u526a\u5200\uff0c$2$ \u8868\u793a\u53ea\u51fa\u5e03\u3002\n\n\u73b0\u5728\u6709 $q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7ed9\u5b9a\u4e09\u4e2a\u6574\u6570 $x,y,l(0\\leq x,y<n,1\\leq l\\leq n-max(x,y))$\uff0c \u95ee\u5c06\u7b2c\u4e00\u6392\u7684\u7b2c $x\u223cx+l-1$ \u4e2a\u4eba\u548c\u7b2c\u4e8c\u6392\u7684\u7b2c $y\u223cy+l-1$ \u4e2a\u4eba\u6bd4\u8d5b\u4e4b\u540e\uff0c\u7b2c\u4e00\u6392\u6709\u591a\u5c11\u4e2a\u4eba\u4f1a\u8d62\u3002\n\n\u4e0a\u6587\u4e2d \u300c\u6bd4\u8d5b\u300d \u7684\u610f\u601d\u662f\uff0c\u5bf9\u4e8e\u6240\u6709\u6574\u6570 $i$ \u6ee1\u8db3 $0\\leq i<l$,\u8ba9\u7b2c\u4e00\u6392\u7684\u7b2c $x+i$ \u4e2a\u4eba\u548c \u7b2c\u4e8c\u6392\u7684\u7b2c $y+i$ \u4e2a\u4eba\u8fdb\u884c \u300c\u77f3\u5934\u526a\u5200\u5e03\u300d \u6e38\u620f\u3002\n\n## \u4efb\u52a1\u4e09\n\n\u6211\u4eec\u79f0\u4e00\u4e2a\u5408\u6cd5\u7684\u62ec\u53f7\u4e32\u4e3a\uff1a\u53ea\u7531\u5de6\u62ec\u53f7\u548c\u53f3\u62ec\u53f7\u6784\u6210\uff0c\u4e24\u79cd\u62ec\u53f7\u7684\u6570\u91cf\u76f8\u7b49\uff0c \u4e14\u4efb\u610f\u4e00\u4e2a\u524d\u7f00\u7684\u5de6\u62ec\u53f7\u6570\u91cf\u4e0d\u5c11\u4e8e\u53f3\u62ec\u53f7\u6570\u91cf\u7684\u4e32\u3002\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u7531 ```(```\uff0c```)``` \u548c```?``` \u6784\u6210\u7684\u4e32\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u5c06\u6bcf\u4e2a ```?``` \u90fd\u66ff\u6362\u6210\u4e00\u4e2a\u62ec\u53f7\u4e4b\u540e\uff0c\u8be5\u4e32\u53d8\u6210\u4e00 \u4e2a\u5408\u6cd5\u7684\u62ec\u53f7\u4e32\u3002\u4e24\u79cd\u65b9\u6848\u4e0d\u540c\uff0c\u5f53\u4e14\u4ec5\u5f53\u81f3\u5c11\u6709\u4e00\u4e2a\u4f4d\u7f6e\u7684 ```?``` \u88ab\u66ff\u6362\u6210\u4e86\u4e0d\u540c\u7684\u62ec\u53f7\u3002",
    "inputFormat": "\u6b64\u9898\u63d0\u4f9b\u4e86\u6a21\u677f\u7a0b\u5e8f\u3002\u9009\u624b\u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u7f16\u5199\u81ea\u5df1\u7684\u7a0b\u5e8f\uff0c\u6a21\u677f\u7a0b\u5e8f\u8be6\u89c1\u4e0b\u6587\u6570\u636e\u8303\u56f4\u4e0e\u63d0\u793a\u3002\n\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570$ task\\_id(1\\leq task\\_id\\leq3)$\uff0c\u8868\u793a\u4efb\u52a1\u7f16\u53f7\u3002\u63a5\u4e0b\u6765\u662f\u6bcf\u4e2a\u5177\u4f53\u4efb\u52a1\u7684\u8f93\u5165\u5185\u5bb9\u3002\n\n\u5728\u8f93\u5165\u7684\u540c\u4e00\u884c\u4e2d\uff0c\u76f8\u90bb\u7684\u4e24\u4e2a\u6574\u6570\u4f1a\u88ab\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\n\n\u5bf9\u4e8e\u4efb\u52a1\u4e00\uff1a\u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570 $n,s$\u3002\u4ee4 $a_0=next\\_integer(s),a_i=next\\_integer(a_{i-1}),1\\leq i<n$\uff0c\u5219 $a_0,a_1,\u2026,a_{n-1}$ \u5373\u4e3a\u9700\u8981\u6392\u5e8f\u7684 $n$ \u4e2a\u6574\u6570\u3002\n\n\u5bf9\u4e8e\u4efb\u52a1\u4e8c\uff1a\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 $n,q$\u3002\u7b2c\u4e8c\u884c\u4e00\u4e2a\u4ec5\u5305\u542b $0, 1, 2$ \u7684\u957f\u5ea6\u4e3a $n$ \u7684\u5b57\u7b26\u4e32\uff0c\u7b2c $i$ \u4e2a\u5b57\u7b26\u6240\u4ee3\u8868\u7684\u6574\u6570\u8868\u793a\u7b2c\u4e00\u6392\u7b2c $i$ \u4e2a\u4eba\u7684\u7b56\u7565\uff08\u5373 $a_{1i}$\u200b\u200b\uff09\u3002\u7b2c\u4e09\u884c\u683c\u5f0f\u540c\u7b2c\u4e8c\u884c\uff0c\u8868\u793a\u7b2c\u4e8c\u6392\u5404\u4e2a\u4eba\u7684\u7b56\u7565\u3002\n\n\u5bf9\u4e8e\u4efb\u52a1\u4e09\uff1a\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 $n$\uff0c\u8868\u793a\u7ed9\u5b9a\u7684\u4e32\u7684\u957f\u5ea6\u3002\u7b2c\u4e8c\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5373\u4e3a\u7ed9\u5b9a\u7684\u4e32\u3002",
    "outputFormat": "\u5bf9\u4e8e\u4efb\u52a11\uff1a\u4ee4 $b$ \u4e3a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u6570\u7ec4\uff0c\u8c03\u7528 ```output_arr(b, n * 4)``` \u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u4efb\u52a12\uff1a\u5c06\u6bcf\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u4f9d\u6b21\u5b58\u5165 $32$ \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u6570\u7ec4 $b$ \u4e2d\uff08\u5373\uff0c\u5b58\u5165 $b_0,b_1,\u22ef,b_{q-1}$ \u4e2d\uff09\uff0c\u7136\u540e\u8c03\u7528 ```output_arr(b, q * 4)``` \u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u4efb\u52a13\uff1a\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e0d\u540c\u7684\u65b9\u6848\u6570\u9664\u4ee5 $2^{32}$\u200b\u200b \u5f97\u5230\u7684\u4f59\u6570\u3002",
    "samples": [
        [
            "1\n100000 2017012501",
            "4275990336"
        ],
        [
            "2\n6 6\n200100\n200211\n5 1 3\n2 0 1\n2 0 3\n2 0 2\n2 3 4\n0 1 3",
            "3349208141"
        ],
        [
            "3\n4\n(???",
            "2"
        ],
        [
            "3\n4\n)???",
            "0"
        ]
    ],
    "hint": "## \u6570\u636e\u8303\u56f4\u4e0e\u63d0\u793a\n\n| \u4efb\u52a1\u7f16\u53f7 | \u5206\u503c | \u6d4b\u8bd5\u70b9\u7f16\u53f7 | \u6570\u636e\u8303\u56f4\u4e0e\u7ea6\u5b9a | \u65f6\u95f4\u9650\u5236 |\n| :----------: | :----------: | :----------: | :----------: | :----------: |\n| 1 | 5 | 1 | $n=100000$ | 3s |\n| 1 | 19 | 2 | $n=10^8$ | 4s |\n| 1 | 11 | 3 | $n=2\\times10^8$ | 6s |\n| 2 | 7 | 4 | $n=q=1000$ | 3s |\n| 2 | 23 | 5 | $n=q=300000$ | 3s |\n| 3 | 9 | 6 | $n=1000$ | 3s |\n| 3 | 5 | 7 | $n=120000$ | 3s |\n| 3 | 7 | 8 | $n=225000$ | 3s |\n| 3 | 14 | 9 | $n=266666$ | 3s |\n\n## \u6a21\u677f\u7a0b\u5e8f\n\n### C++\u6a21\u677f\n\n```\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n\ntypedef unsigned int u32;\ntypedef unsigned long long u64;\n\ninline u32 next_integer(u32 x) {\n    x ^= x << 13;\n    x ^= x >> 17;\n    x ^= x << 5;\n    return x;\n}\n\nbool output_arr(void *a, u32 size) {\n    if (size % 4) {\n        return puts(\"-1\"), 0;\n    }\n\n    u32 blocks = size / 4;\n    u32 *A = (u32 *)a;\n    u32 ret = size;\n    u32 x = 23333333;\n    for (u32 i = 0; i < blocks; i++) {\n        ret = ret ^ (A[i] + x);\n        x ^= x << 13;\n        x ^= x >> 17;\n        x ^= x << 5;\n    }\n\n    return printf(\"%u\\n\", ret), 1;\n}\n\n// ===== header ======\n\nnamespace Sorting {\nvoid init_data(u32 *a, int n, u32 seed) {\n    for (int i = 0; i < n; i++) {\n        seed = next_integer(seed);\n        a[i] = seed;\n    }\n}\n\nvoid main() {\n    int n;\n    u32 seed;\n    scanf(\"%d%u\", &n, &seed);\n\n    u32 *a = new u32[n];\n    init_data(a, n, seed);\n\n    // sort(a, n);\n\n    output_arr(a, n * sizeof(u32));\n}\n}\n\nnamespace Game {\nvoid main() {\n    int n, q;\n    scanf(\"%d%d\", &n, &q);\n\n    char *s1 = new char[n + 1];\n    char *s2 = new char[n + 1];\n    scanf(\"%s%s\", s1, s2);\n\n    u32 *anss = new u32[q];\n    int *q_x = new int[q];\n    int *q_y = new int[q];\n    int *q_len = new int[q];\n\n    for (int i = 0; i < q; i++) {\n        scanf(\"%d%d%d\", q_x + i, q_y + i, q_len + i);\n    }\n\n    // solve(n, q, s1, s2, q_x, q_y, q_len, anss);\n\n    output_arr(anss, q * sizeof(u32));\n}\n}\n\nnamespace Parentheses {\nvoid main() {\n    int n;\n    scanf(\"%d\", &n);\n\n    char *s = new char[n + 1];\n    scanf(\"%s\", s);\n\n    u32 ans;\n    // ans = solve(n, s);\n\n    printf(\"%u\\n\", ans);\n}\n}\n\nint main() {\n    int task_id;\n    scanf(\"%d\", &task_id);\n\n    switch (task_id) {\n        case 1:\n            Sorting::main();\n            break;\n        case 2:\n            Game::main();\n            break;\n        case 3:\n            Parentheses::main();\n            break;\n    }\n\n    return 0;\n}\n```\n\n### C\u6a21\u677f\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define bool int\n#define true 1\n#define false 0\n\ntypedef unsigned int u32;\ntypedef unsigned long long u64;\n\ninline u32 next_integer(u32 x) {\n    x ^= x << 13;\n    x ^= x >> 17;\n    x ^= x << 5;\n    return x;\n}\n\nbool output_arr(void *a, u32 size) {\n    if (size % 4) {\n        return puts(\"-1\"), 0;\n    }\n\n    u32 blocks = size / 4;\n    u32 *A = (u32 *)a;\n    u32 ret = size;\n    u32 x = 23333333;\n    u32 i;\n    for (i = 0; i < blocks; i++) {\n        ret = ret ^ (A[i] + x);\n        x ^= x << 13;\n        x ^= x >> 17;\n        x ^= x << 5;\n    }\n\n    return printf(\"%u\\n\", ret), 1;\n}\n\n// ===== header ======\n\nvoid Sorting_main() {\n    int n;\n    u32 seed;\n    scanf(\"%d%u\", &n, &seed);\n\n    u32 *a = malloc(n * sizeof(u32));\n    int i;\n    for (i = 0; i < n; i++) {\n        seed = next_integer(seed);\n        a[i] = seed;\n    }\n\n    // sort(a, n);\n\n    output_arr(a, n * sizeof(u32));\n}\n\nvoid Game_main() {\n    int n, q;\n    scanf(\"%d%d\", &n, &q);\n\n    char *s1 = malloc((n + 1) * sizeof(char));\n    char *s2 = malloc((n + 1) * sizeof(char));\n    scanf(\"%s%s\", s1, s2);\n\n    u32 *anss = malloc(q * sizeof(u32));\n    int *q_x = malloc(q * sizeof(int));\n    int *q_y = malloc(q * sizeof(int));\n    int *q_len = malloc(q * sizeof(int));\n\n    int i;\n\n    for (i = 0; i < q; i++) {\n        scanf(\"%d%d%d\", q_x + i, q_y + i, q_len + i);\n    }\n\n    // solve(n, q, s1, s2, q_x, q_y, q_len, anss);\n\n    output_arr(anss, q * sizeof(u32));\n}\n\nvoid Parentheses_main() {\n    int n;\n    scanf(\"%d\", &n);\n\n    char *s = malloc((n + 1) * sizeof(char));\n    scanf(\"%s\", s);\n\n    u32 ans;\n    // ans = solve(n, s);\n\n    printf(\"%u\\n\", ans);\n}\n\nint main() {\n    int task_id;\n    scanf(\"%d\", &task_id);\n\n    switch (task_id) {\n        case 1:\n            Sorting_main();\n            break;\n        case 2:\n            Game_main();\n            break;\n        case 3:\n            Parentheses_main();\n            break;\n    }\n\n    return 0;\n}\n```\n\n### Pascal\u6a21\u677f\n\n```\ntype\n    u32 = dword;\n    u64 = qword;\n    u32_p = ^u32;\n    u64_p = ^u64;\n    longint_p = ^longint;\n\nfunction next_integer(x : u32) : u32; inline;\nbegin\n    x := x xor (x << 13);\n    x := x xor (x >> 17);\n    x := x xor (x << 5);\n    exit(x);\nend;\n\nfunction output_arr(a_in : pointer; size : u32) : boolean;\nvar\n    blocks : u32;\n    a, a_ed : u32_p;\n    ret, x : u32;\nbegin\n    if size mod 4 <> 0 then begin\n        writeln(-1);\n        exit(false);\n    end;\n\n    blocks := size div 4;\n    ret := size;\n    a := a_in;\n    a_ed := a + blocks;\n    x := 23333333;\n\n    while a < a_ed do begin\n        ret := ret xor (a[0] + x);\n        x := x xor (x << 13);\n        x := x xor (x >> 17);\n        x := x xor (x << 5);\n        inc(a);\n    end;\n\n    writeln(ret);\n    exit(true);\nend;\n\n// ====== header ======\n\n\nprocedure init_data(a : u32_p; n : longint; seed : u32);\nvar\n    a_ed : u32_p;\nbegin\n    a_ed := a + n;\n    while a < a_ed do begin\n        seed := next_integer(seed);\n        a[0] := seed;\n        inc(a);\n    end;\nend;\n\nprocedure Sorting_main();\nvar\n    n : longint;\n    seed : u32;\n    a : u32_p;\n    i : u32;\nbegin\n    read(n, seed);\n\n    a := Getmem(n * sizeof(u32));\n    init_data(a, n, seed);\n\n    // sort(a, n);\n\n    output_arr(a, n * sizeof(u32));\nend;\n\n\nprocedure Game_main();\nvar\n    n, q : longint;\n    s1, s2 : ansistring;\n    anss : u32_p;\n    q_x, q_y, q_len : longint_p;\n    i : longint;\nbegin\n    readln(n, q);\n    readln(s1);\n    readln(s2);\n\n    anss := Getmem(q * sizeof(u32));\n    q_x := Getmem(q * sizeof(longint));\n    q_y := Getmem(q * sizeof(longint));\n    q_len := Getmem(q * sizeof(longint));\n\n    for i := 0 to q - 1 do begin\n        read(q_x[i], q_y[i], q_len[i]);\n    end;\n\n    // solve(n, q, s1, s2, q_x, q_y, q_len, anss);\n\n    output_arr(anss, q * sizeof(u32));\nend;\n\n\nprocedure Parentheses_main();\nvar\n    n : longint;\n    s : ansistring;\n    ans : u32;\nbegin\n    read(n);\n    read(s);\n\n    // ans := solve(n, s);\n\n    writeln(ans);\nend;\n\n\nvar\n    task_id : longint;\n\nbegin\n    read(task_id);\n\n    if task_id = 1 then begin\n        Sorting_main();\n    end else if task_id = 2 then begin\n        Game_main();\n    end else if task_id = 3 then begin\n        Parentheses_main();\n    end;\n    close(input); close(output);\nend.\n```"
}