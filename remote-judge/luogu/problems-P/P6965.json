{
    "description": "\n\nBen has recently learned about binary prefix codes. A binary code is a set of $n$ distinct nonempty code words $s_{i}$ , each consisting of 0s and $1s.$ A code is called a prefix code if for every $i \u2260 j$ neither $s_{i}$ is a prefix of $s_{j}$ nor $s_{j}$ is a prefix of $s_{i}$ . A word $x$ is called a prefix of a word $w$ if there exists a possibly empty word $y$ , such that xy $= w$ . For example, $x = 11$ is a prefix of $w = 110$ and $x = 0100$ is a prefix of $w = 0100$ .\n\nBen found a paper with $n$ lines of binary code in it. However, this paper is pretty old and there are some unreadable characters. Fortunately, each word contains at most one unreadable character.\n\nBen wants to know whether these $n$ lines could represent a binary prefix code. In other words, can he replace every unreadable character with $0$ or $1$ , so that the code becomes a prefix code?\n\n",
    "inputFormat": "\n\nThe first line contains integer $n$ -- the number of code words $(1 \\le n \\le 5 \u00b7 10^{5}).$\n\nNext $n$ lines contain nonempty code word records, one per line. Each code word record consists of `0`, `1` and `?` characters. Every code word record contains at most one `?` character that represents unreadable character.\n\nThe total length of words does not exceed $5 \u00b7 10^{5}$ .\n\n",
    "outputFormat": "\n\nOutput `NO` in the first line if the code cannot be a prefix code.\n\nOtherwise, output `YES` in the first line. Next $n$ lines shall contain code words in the same order as the corresponding code word records in the input.\n\nIf there are several prefix codes, that could have been written on the paper, output any one.\n\n",
    "samples": [
        [
            "4\n00?\n0?00\n?1\n1?0\n",
            "YES\n000\n0100\n11\n100\n"
        ],
        [
            "3\n0100\n01?0\n01?0\n",
            "NO\n"
        ]
    ],
    "hint": "Time limit: 2 s, Memory limit: 2048 MB. \n\n",
    "translation": "### \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u5b9a `n` \u4e2a01\u4e32\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u81f3\u591a\u6709\u4e00\u4f4d\u662f\u672a\u77e5\u7684\uff0c\u53ef\u4ee5\u586b `0` \u6216 `1` \uff0c\u6c42\u662f\u5426\u5b58\u5728\u4e00\u79cd\u65b9\u6848\uff0c\u4f7f\u5f97\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e0d\u662f\u5176\u5b83\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\n\n### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570 `n` \uff0c\u4ee3\u8868\u5b57\u7b26\u4e32\u7684\u6570\u91cf\u3002 $(1 \\leq n \\leq 5 \\cdot 10^5)$\n\n\u63a5\u4e0b\u6765 `n` \u884c\u6bcf\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u53ea\u53ef\u80fd\u7531 `0` \u3001 `1` \u6216 `?` \u7ec4\u6210\u3002 `?` \u4ee3\u8868\u672a\u77e5\u7684\u4f4d\u7f6e\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u6700\u591a\u4e00\u4e2a\u3002\n\n\u4fdd\u8bc1\u5b57\u7b26\u4e32\u603b\u957f\u5ea6\u4e0d\u8d85\u8fc7 $5 \\cdot 10^5$ \u3002\n\n### \u8f93\u51fa\u683c\u5f0f\n\n\u5982\u679c\u65e0\u89e3\uff0c\u53ea\u9700\u8981\u8f93\u51fa `NO` \u3002\n\n\u5982\u679c\u6709\u89e3\uff0c\u5728\u7b2c\u4e00\u884c\u8f93\u51fa `YES` \uff0c\u63a5\u4e0b\u6765 `n` \u884c\u8f93\u51fa\u65b9\u6848\u3002\n\n\u5982\u679c\u6709\u591a\u7ec4\u89e3\uff0c\u53ea\u9700\u8981\u8f93\u51fa\u4efb\u610f\u4e00\u7ec4\u3002"
}