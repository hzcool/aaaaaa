{
    "description": "A full moon casts some sort of spell on the cows and, like their cousins the wolves and coyotes, they bay at the moon -- mooing instead of howling, of course.\n\nEach 'moo' lasts a certain amount of time. A short 'moo' might last time 1; a longer one might last time 24 or even 1,000,000,000 or longer (cows can really moo when they want to). No 'moo' will last more than or equal to 2^63.\n\nIt should come as no surprise that the cows have a pattern to their moos.  Bessie will choose an integer c (1 <= c <= 100) that is the initial length of a moo.\n\nAfter Bessie moos for length c, the cows calculate times for\n\nsubsequent moos. They apply two formulae to each moo time to yield even more moo times. The two formulae are:\n\n```cpp\nf1(c)=a1*c/d1+b1 (integer divide, of course) and \nf2(c)=a2*c/d2+b2. \nThey then successively use the two new times created by evaluating f1(c) and f2(c) to create even more mooing times. They keep a sorted list of all the possible mooing times (discarding duplicates). \nThey are allowed to moo a total of N times (1 <= N <= 4,000,000). Please determine the length of the longest moo before they must quit. \nThe constants in the formulae have these constraints: 1 <= d1 < a1; d1 < a1 <= 20; 0 <= b1 <= 20; 1 <= d2 < a2; d2 < a2 <= 20; 0 <= b2 <= 20. \nConsider an example where c=3 and N=10. The constants are: \na1=4    b1=3     d1=3 \na2=17   b2=8     d2=2 \n```\nThe first mooing time is 3, given by the value of c. The total list of mooing times is:\n```cpp\n1. c=3             ->  3       6. f2(3)=17*3/2+8  -> 33 \n2. f1(3)=4*3/3+3   ->  7       7. f1(28)=4*28/3+3 -> 40 \n3. f1(7)=4*7/3+3   -> 12       8. f1(33)=4*33/3+3 -> 47 \n4. f1(12)=4*12/3+3 -> 19       9. f1(40)=4*40/3+3 -> 56 \n5. f1(19)=4*19/3+3 -> 28      10. f1(47)=4*47/3+3 -> 65 \nThe tenth time is 65, which would be the proper answer for this set of inputs. \n```\nPartial feedback will be provided on the first 50 submissions.\nMEMORY LIMIT: 64MB\n\n\u6ee1\u6708\u7684\u65f6\u5019\uff0c\u548c\u72fc\u4e00\u6837\uff0c\u725b\u4eec\u4e5f\u5728\u6708\u5149\u4e0b\u53eb.\u4ed6\u4eec\u4ece\u4e0d\u568e\u53eb\uff0c\u800c\u662f\u54de\u53eb.\n\n\u6bcf\u6b21\u54de\u53eb\u90fd\u6709\u4e00\u4e2a\u65f6\u957f\uff0c\u53ef\u80fd\u662f1\u79d2\uff0c\u53ef\u80fd\u662f\uff1b10^9\u79d2\u6216\u66f4\u4e45\uff0c\u725b\u4eec\u771f\u7684\u975e\u5e38\u80fd\u53eb.\u5f53\u7136\uff0c\u6ca1\u6709 \u54de\u53eb\u65f6\u957f\u4f1a\u8d85\u8fc7\u6216\u7b49\u4e8e2^63.\n\n\u725b\u4eec\u7684\u54de\u53eb\u53ef\u4ee5\u627e\u5230\u89c4\u5f8b\uff0c\u8fd9\u5e76\u4e0d\u5947\u602a.\u8d1d\u831c\u4f1a\u9009\u62e9\u4e00\u4e2a\u6574\u6570100)\u6765\u4f5c\u4e3a\u521d\u59cb\u65f6 \u957f.\u4e4b\u540e\uff0c\u725b\u4eec\u6839\u636e\u4e24\u6761\u516c\u5f0f\u786e\u5b9a\u66f4\u591a\u7684\u65f6\u957f.\u8fd9\u4e24\u6761\u516c\u5f0f\n\nf1(c)=a1\\*c/d1+b1\u6574\u9664\n\nf2(c)=a2\\*c/d2+b2. \n\n\u725b\u4eec\u7528\u8fd9\u4e24\u6761\u516c\u5f0f\u4e0d\u65ad\u5730\u8fed\u4ee3\u3001\u8ba1\u7b97\uff0c\u7b97\u5f97\u5927\u91cf\u7684\u65f6\u957f.\u7136\u540e\u5979\u4eec\u5c06\u8fd9\u4e9b\u65f6\u957f\u6392\u5e8f\uff0c\u5254\u9664\u91cd \u590d\u7684\u65f6\u957f\uff0c\u6700\u540e\u53d6\u524dN(l<N< 4000000)\u4e2a\u6574\u6570\u4e3a\u5979\u4eecN\u6b21\u54de\u53eb\u7684\u65f6\u957f.\u8bf7\u4f60\u8ba1\u7b97\uff0c\u7b2cN\u6b21\u54de\u53eb \u7684\u65f6\u957f\u662f\u591a\u5c11.\u516c\u5f0f\u4e2d\u7684\u5e38\u91cf\u5747\u4e3a\u6574\u6570\uff0c\u6ee1\u8db3\u4e0b\u5217\u5173\u7cfb\uff1a 1 <= d1 < a1; d1 < a1 <= 20; 0 <= b1 <= 20; 1 <= d2 < a2; d2 < a2 <= 20; 0 <= b2 <= 20.\n",
    "inputFormat": "\\* Line 1: Two space-separated integers: c and N\n\n\\* Line 2: Three space-separated integers: a1, b1, and d1\n\n\\* Line 3: Three space-separated integers: a2, b2, and d2\n",
    "outputFormat": "\\* Line 1: A single line which contains a single integer which is the length of the Nth moo\n",
    "samples": [
        [
            "3 10 \n4 3 3 \n17 8 2 \n",
            "65 \n"
        ]
    ],
    "hint": ""
}