{
    "description": "\n\nNEERC featured a number of problems about cactuses -- connected undirected graphs in which every edge belongs to at most one simple cycle. Intuitively, cactus is a generalization of a tree where some cycles are allowed.\n\nIn $2005$ , the first year where a problem about cactuses appeared, the problem was called simply `Cactus`. In $2007$ it was `Cactus Reloaded`, in $2010$ it was called `Cactus Revolution`, and in $2013$ it was called `Cactus Automorphisms`. Here is an example of cactus that was used in those problems:\n\n![](/upload/images2/cactus.png)\n\nFor four years judges had to generate test files for cactuses with thousands of vertices. Of course, a number of test generators of ever-increasing complexity were built, culminating with a domain-specific language called CGL -- Cactus Generator Language. CGL can compactly define a big cactus for purposes of a test. In this problem you have to parse a simplified version of this language, which we call SCGL -- Simple Cactus Generator Language, and output a resulting cactus.\n\nA cactus has to be output by listing the minimal set of edge-distinct paths that cover the whole graph.\n\nThe syntax of SCGL cactus definition is represented by the graph non-terminal in the grammar that is given below using the Extended Backus-Naur Form:\n\ngraph $=$ `c`\n\n$|$ `c(` list `)`\n\n$|$ `loop(` list `)`\n\n$|$ `t(` list `)`\n\nlist $=$ graph ${$ `,` graph $}$\n\n$|$ (number $|$ range $|$ variable ) $[$ `,` graph $]$\n\nnumber $=$ nzdig ${$ `0` $|$ nzdig $}$\n\nnzdig $=$ `1` $|$ `2` $| \\cdots |$ `8` $|$ `9`\n\nrange $=$ `range(` variable `,` numvar `,` numvar `)`\n\nvariable $=$ `A` $|$ `B` $| \\cdots |$ `Y` $|$ `Z`\n\nnumvar $=$ number $|$ variable\n\nA graph production rule denotes a graph with two labeled vertices -- the first and the last. Graphs definition rules have the following semantics:\n\nThe basic building block $c$ denotes a graph with just two vertices (one is the first and the other one is the last) and one edge.\n\nThe $c(\u03c3)$ rule connects a specified list of graphs $\u03c3$ from left to right into a chain, merging the last vertex of the first graph in the list with the first vertex of the second graph in the list, the last vertex of the second graph with the first of the third one, and so on. The resulting graph's first vertex is the first vertex of the first graph in the list, and the resulting graph's last vertex is the last vertex of the last graph in the list.\n\nThe $loo_p(\u03c3)$ rule connects a specified list of graphs $\u03c3$ from left to right, merging the last vertex of the first graph in the list with the first vertex of the second graph in the list, and so on like in $c(\u03c3),$ while the last vertex of the last graph in the list is merged with the first vertex of the first graph in the list to form a loop. The resulting graph's first and last vertices are the first and the last vertices of the first graph in the list. Loop can be applied only to lists with more than one graph.\n\nThe $t(\u03c3)$ rule connects a specified list of graphs $\u03c3,$ merging their first vertices. The resulting graph's first and last vertices are the first and the last vertices of the first graph in the list.\n\nThe list of graphs is either specified explicitly, by a comma-separated list, or using a list repetition with a number, a range, or a variable, optionally followed by a comma and a graph. When a graph is not explicitly specified in a list repetition, then the given graph is assumed to be $c$ .\n\nThe simplest list repetition is defined using a number non-terminal. It denotes a list of graphs with the specified integer number of copies of the given graph.\n\nA range list repetition is defined by $range(\u03bd, \u03b1, \u03b2)$ rule which has three components -- a variable $\u03bd,$ and numbers $\u03b1$ and $\u03b2.$ If $\u03be$ character sequence is a graph, then $c|loo_p|t(range(\u03bd, \u03b1, \u03b2), \u03be)$ are called rangeenabled rules and the variable $\u03bd$ is called a bound variable in $\u03be.$ In the context of a range-enabled rule, $\u03be$ is repeated $|\u03b2 \u2212 \u03b1| + 1$ times to form a list. Every occurrence of variable $\u03bd$ in $\u03be$ is replaced by consecutive integer numbers between $\u03b1$ and $\u03b2$ inclusive in ascending order. That produces a list of $|\u03b2 \u2212\u03b1|+ 1$ graphs, which are then connected according the specification of the corresponding range-enabled rule. The $\u03b1$ and $\u03b2$ themselves might refer to variables that are bound in the outer range-enabled rule.\n\nIn a well-formed graph:\n\neach variable non-terminal (a letter from A to $Z)$ occurs at most once as $\u03bd$ in $range(\u03bd, \u03b1, \u03b2)$ rules;\n\nall other occurrences of variable non-terminal that are allowed by the grammar are bound.\n\nNote, that if a character sequence $\u03be$ is a graph, then $\u03be, c(\u03be),$ c(1 , $\u03be), t(\u03be),$ and t(1 , $\u03be)$ all denote the same graph. On the other hand, neither $loo_p(\u03be)$ nor loop(1 , $\u03be)$ are allowed.\n\nThe following examples illustrate these basic rules. The graphs have their first and last vertices marked with letters $F$ and $L$ correspondingly.\n\n![](/upload/images2/cactus1.png)\n\n![](/upload/images2/cactus2.png)\n\n",
    "inputFormat": "\n\nThe input file contains a single line with a well-formed cactus definition in SCGL. While the syntax and semantics of SCGL themselves do not guarantee that the resulting graph is a cactus, the input file for this problem always defines a cactus -- every edge belongs to at most one simple cycle and there are no multiple edges between vertices. For example, neither loop(3 , $loo_p(3))$ nor $loo_p(2)$ are possible.\n\nThe line in the input file is at most $1000$ characters long and defines a cactus with at most $50 000$ vertices. Integer numbers represented by number non-terminals do not exceed $50 000$ .\n\n",
    "outputFormat": "\n\nThe first line of the output file must contain two integer numbers $n$ and $m$ . Here $n$ is the number of vertices in the graph. Vertices are numbered from $1$ to $n$ , where $1$ is the number of the first vertex of the graph and $n$ is the number of the last vertex of the graph. The other vertices can be numbered arbitrarily. Edges of the graph are represented by a set of edge-distinct paths, where $m$ is the minimal number of such paths.\n\nEach of the following $m$ lines must contain a path in the graph. A path starts with an integer number $k_{i} (k_{i} \\ge 2)$ followed by $k_{i}$ integers from $1$ to $n$ . These $k_{i}$ integers represent vertices of a path. A path can go to the same vertex multiple times, but every edge must be traversed exactly once in the whole output file.\n\n",
    "samples": [
        [
            "c(c,t(loop(3),c(c,loop(6))),loop(c,c,t(c,loop(4))))\n",
            "15 1\n19 1 2 9 10 11 12 13 10 15 9 14 2 3 4 5 6 7 8 3\n"
        ],
        [
            "c\n",
            "2 1\n2 1 2\n"
        ],
        [
            "c(2)\n",
            "3 1\n3 1 2 3\n"
        ],
        [
            "c(3)\n",
            "4 1\n4 1 2 3 4\n"
        ],
        [
            "t(c(3),c,c)\n",
            "6 2\n2 1 2\n5 3 1 4 5 6\n"
        ],
        [
            "c(2,t(c(2),c,c))\n",
            "9 3\n3 2 1 3\n3 4 5 6\n5 1 7 5 8 9\n"
        ]
    ],
    "hint": "Time limit: 1 s, Memory limit: 256 MB. \n\n"
}