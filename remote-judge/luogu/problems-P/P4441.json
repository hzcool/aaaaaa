{
    "description": "Little Mirko got a video game console for Christmas. It wasn\u2019t a Playstation 4 or an Xbox one, but Atari 2600, and it came with one free game. The protagonist of the game is standing on the bottom of the screen, and there are various objects dispersed on the rest of the screen, falling towards the bottom.\n\nMore precisely, the screen can be represented as a grid of RxS pixels arranged in R rows and S columns. The protagonist takes up one pixel of the lowest line and is marked with \u2018M\u2019. The rest of the pixels are marked with some of the characters: \u2018.\u2019 (empty space), \u2018*\u2019 (bomb), \u2018(\u2018 (open bracket) or \u2018)\u2019 (closed bracket).\n\nThe protagonist can move one pixel to the left or to the right in a single move, but doesn\u2019t need to, whereas the rest of the objects simultaneously move one pixel down (possibly out of the screen). When the protagonist finds himself at the same position as one of the brackets, we say that he picked up that bracket and added it at the end of his array of acquired brackets. The protagonist\u2019s goal is to acquire the longest possible **valid** bracket\nexpression.\n\nA valid bracket expression is defined inductively in the following way:\n\n- \u201c()\u201d is a valid expression\n- If **a\u200b** is a valid expression, then \u201c(**a**\u200b)\u201d is a valid expression as well\n- If **a\u200b** and **b\u200b** are valid expressions, then \u201c**ab**\u200b\u201d is a valid expression as well\n\nThe game ends when the protagonist finds himself at the same position as the bomb, or when all the objects fall out of the screen.\n",
    "inputFormat": "The first line of input contains the positive integers R \u200band S \u200b(1 \u2264 R, S \u2264 300) that represent the dimensions of the screen.\n\nEach of the following R lines contains S characters \u2018M\u2019, \u2018.\u2019, \u2018*\u2019, \u2018(\u2018 or \u2018)\u2019 that represent the initial state of the screen.\n\nTest data will be such that there will always exist at least one valid bracket expression that is possible to acquire. ",
    "outputFormat": "In the first line, you must output the length of the longest valid bracket expression that Mirko can acquire.\n\nIn the second line, output that expression. If there are multiple longest valid expressions, output the **lexicographically\u200b \u200bsmallest\u200b** one.",
    "samples": [
        [
            "5 4\n..).\n.)(.\n(.)*\n*(.*\n..M.\n",
            "4\n(())\n"
        ],
        [
            "6 3\n)(.\n*..\n(**\n)()\n().\nM..\n",
            "4\n()()\n"
        ],
        [
            "6 3\n((.\n*..\n(**\n)()\n().\nM..\n",
            "2\n()"
        ]
    ],
    "hint": "In test cases worth 25% of total points, it will hold 1 \u2264 R \u2264 15.\n\nIn test cases worth 50% of total points, it will hold 1 \u2264 R \u2264 100.\n\nIf you output the correct length, but the wrong expression, you will be awarded 40% of points for that test case. In any case, in order to score points, your output must consist of two non-empty lines. ~~(\u4f46\u6211\u5e76\u4e0d\u4f1a\u505aspj\uff0c\u6240\u4ee5\u8fd9\u8bdd\u5c41\u7528\u6ca1\u6709)~~\n\n**Clarification\u200b \u200bof\u200b \u200bthe\u200b \u200bfirst\u200b \u200btest\u200b \u200bcase**:\u200b \u200bThe protagonist\u2019s moves are: left, left, right right.\n\n**Clarification\u200b \u200bof\u200b \u200bthe\u200b \u200bsecond\u200b \u200btest\u200b \u200bcase**:\u200b \u200bThe protagonist\u2019s moves are: stay still, stay still, stay still, right, left.\n\n**Clarification\u200b \u200bof\u200b \u200bthe\u200b \u200bthird\u200b \u200btest\u200b \u200bcase**:\u200b \u200bThe protagonist\u2019s moves are: stay still, stay still, right.",
    "translation": "### \u9898\u610f\u7ffb\u8bd1\n\nLittle Mirko \u5723\u8bde\u8282\u83b7\u5f97\u4e86\u4e00\u53f0\u6e38\u620f\u673a\uff0c\u5b83\u4e0d\u662f Playstation 4 \u4e5f\u4e0d\u662f Xbox one\uff0c\u800c\u662f\u4e00\u53f0 Atari 2600\uff0c\u91cc\u9762\u81ea\u5e26\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684\u6e38\u620f\uff1a\u4e3b\u89d2\u7ad9\u5728\u5c4f\u5e55\u5e95\u90e8\uff0c\u5929\u4e0a\u6709\u5404\u79cd\u7269\u4f53\u6389\u4e0b\u6765\u2026\u2026\n\n\u51c6\u786e\u5730\u8bf4\uff0c\u5c4f\u5e55\u53ef\u4ee5\u770b\u505a $R$ \u884c $S$ \u5217\u7684\u7f51\u683c\uff0c\u4e3b\u89d2\u7ad9\u5728\u6700\u540e\u4e00\u884c\uff0c\u6240\u5728\u7684\u4f4d\u7f6e\u6807\u8bb0\u4e3a `M`\u3002\u5176\u4ed6\u683c\u5b50\u4e0a\u7684\u6807\u8bb0\u53ef\u80fd\u662f\uff1a`.`\uff08\u7a7a\u4f4d\u7f6e\uff09\uff0c`*`\uff08\u70b8\u5f39\uff09\uff0c`(`\uff08\u5de6\u62ec\u53f7\uff09\u6216 `)`\uff08\u53f3\u62ec\u53f7\uff09\u3002\n\n\u4e3b\u89d2\u4e00\u6b21\u53ef\u4ee5\u5411\u5de6\u6216\u5411\u53f3\u79fb\u52a8\u4e00\u683c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u52a8\uff0c\u540c\u65f6\u5176\u4ed6\u7684\u7269\u4f53\u5411\u4e0b\u843d\u4e00\u683c\uff08\u53ef\u4ee5\u6389\u51fa\u5c4f\u5e55\uff09\u3002\u5f53\u4e3b\u89d2\u4e0e\u67d0\u62ec\u53f7\u4f4d\u7f6e\u76f8\u540c\u65f6\uff0c\u4ed6\u5c31\u6361\u8d77\u8fd9\u4e2a\u62ec\u53f7\uff0c\u653e\u8fdb\u4ed6\u7684\u62ec\u53f7\u5e8f\u5217\u5c3e\u90e8\u3002\u6e38\u620f\u7684\u76ee\u7684\u662f\u8981\u83b7\u5f97\u6700\u957f\u7684**\u5408\u6cd5**\u62ec\u53f7\u8868\u8fbe\u5f0f\u3002\n\n\u5408\u6cd5\u7684\u62ec\u53f7\u8868\u8fbe\u5f0f\u662f\u6309\u4e0b\u9762\u65b9\u5f0f\u5f52\u7eb3\u5b9a\u4e49\u7684\uff1a\n\n- $\\texttt{()}$ \u662f\u5408\u6cd5\u7684\u62ec\u53f7\u8868\u8fbe\u5f0f\n- \u5982\u679c $a$ \u662f\u5408\u6cd5\u7684\u62ec\u53f7\u8868\u8fbe\u5f0f\uff0c\u90a3\u4e48 $\\texttt{(}a\\texttt{)}$ \u4e5f\u662f\u5408\u6cd5\u7684\u62ec\u53f7\u8868\u8fbe\u5f0f\u3002\n- \u5982\u679c $a$ \u548c $b$ \u90fd\u662f\u5408\u6cd5\u7684\u62ec\u53f7\u8868\u8fbe\u5f0f\uff0c\u90a3\u4e48 $ab$ \u4e5f\u662f\u5408\u6cd5\u7684\u62ec\u53f7\u8868\u8fbe\u5f0f\u3002\n\n\u5f53\u6240\u6709\u7269\u4f53\u6389\u51fa\u5c4f\u5e55\u6216\u8005\u4e3b\u89d2\u78b0\u5230\u70b8\u5f39\uff08\u4e0e\u70b8\u5f39\u5728\u76f8\u540c\u4f4d\u7f6e\uff09\u65f6\u6e38\u620f\u7ed3\u675f\u3002"
}