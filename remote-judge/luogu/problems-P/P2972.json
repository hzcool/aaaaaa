{
    "description": "My country's bigger than most\n\nAnd if asked I boast\n\n'Cause I'm really proud\n\nSo I shout it loud\n\nThough our numbers are few\n\nWe will welcome you\n\nAlthough we don't have history \n\nGold medal winning teams\n\nHeroes or prisoners\n\nWorld famous volcanoes\n\nStill what we've got's glorious\n\n'Cause we've got\n\nRocks and trees\n\nAnd trees and rocks\n\nAnd rocks and trees\n\nAnd trees and rocks\n\nAnd rocks and trees\n\nAnd trees and rocks\n\nAnd rocks and trees\n\nAnd trees and rocks\n\nAnd water\n\n-The Arrogant Worms, on Canada\n\n```cpp\nhttp://www.youtube.com/watch?v=P2Ca-vTapfU \nAfter moving across the 49th parallel to Canada, the land of rocks and trees, Farmer John's cows invented a game to spend their leisure time on the pasture; naturally, it involved the rocks and trees! Cowboy Ted likes this game very much, but so poor is his luck that he always loses to other cows. This time, he is going to seek your help. \nThe game's rules are simple. It is played with a tree that has both N (2 <= N <= 10,000) nodes conveniently numbered 1..N and also N-1 branches. Node 1 is the root of this tree; except for node 1, node i has parent P_i (1 <= P_i < i). Initially, Each node contains some rocks (except the root node, which has no rocks). In particular, non-root node i has exactly R_i (1 <= R_i <= 1,000) rocks at the beginning of the game. \nTwo players alternate turns to play this game in turn, with Ted going first. In each turn, the current player can choose a non-root node i and move at most L (1 <= L <= 1,000) rocks from this node one branch closer to the root (i.e., move these rocks to the parent node). He must move at least one rock, and, of course, he cannot exceed the current number of rocks on this node. The game ends when a player can't make a legal move (i.e., when all the rocks are on node 1); that player loses. \nTed needs your help. He has given you the initial configuration of the game, and he will then make T (1 <= T <= 10,000) changes to the configuration one by one. Please help him determine, after each step, if he can win the game beginning from this configuration, assuming both he and his opponent use the best possible strategy. \nTed's changes are specified as two integers A_j (1 < A_j <= N) and B_j (1 <= B_j <= 1,000), meaning that Ted will change the number of rocks on node A_j to B_j (this is a 'set' not a 'subtract' or 'add'), and will then ask you whether he can win. Changes accumulate; node A_j's rocks stay at B_j until another change for A_j appears. \n```\nConsider this example with three nodes numbered as shown and the shape shown in Board 0.\nInitially, there are 5 rocks on node 2 and 3 rocks on node 3; see Board 1.\n\nFor the first change, Ted removes 2 rocks from node 2 (thus leaving 3); see Board 2.  For the second change, Ted removes 2 rocks from node 3 (thus leaving 1).  Note that node 2 still has 3 rocks; see Board 3.\n\n1            -         -         -\n\n/ \\          / \\       / \\       / \\\n\n2   3        5   3     3   3     3   1\n\nBoard 0      Board 1   Board 2   Board 3\n\nYour program should determine in each case who wins. \n\nFor about 30% of the test cases, N <= 10, and T <= 100, and no tree node will have more than 5 rocks on it after any of Ted's changes. \n\nPartial feedback will be provided for your first 50 submissions. \n\n\u519c\u592b\u7ea6\u7ff0\u5728\u7a7f\u8fc7\u5317\u7eac49\u5ea6\u7eac\u7ebf\u8fdb\u5165\u7947\u6709\u77f3\u5934\u6728\u5934\u7684\u571f\u5730\uff0c\u52a0\u62ff\u5927\u4e4b\u540e\uff0c\u4ed6\u4eec\u7684\u725b\u53d1\u660e\u4e86\u4e00\u79cd\u65b0\u6e38\u620f\u6765\u5728\u8349\u5730\u4e0a\u6d88\u78e8\u95f2\u6687\u65f6\u95f4\uff1b\u56e0\u4e3a\u8fd9\u4e2a\u6e38\u620f\u628a\u77f3\u5934\u548c\u6728\u5934\uff08\u6811\uff09\u5929\u8863\u65e0\u7f1d\u5730\u7ed3\u5408\u5728\u4e00\u8d77\uff01\u5c0f\u725bTed\u7070\u5e38\u559c\u6b22\u8fd9\u4e2a\u6e38\u620f\uff0c\u53ef\u662f\u4ed6\u7684\u8fd0\u6c14\u662f\u591a\u4e48\u7cdf\u7cd5\u4ed6\u603b\u662f\u5728\u8fd9\u4e2a\u6e38\u620f\u8f93\u7ed9\u5176\u5b83\u7684\u725b\u3002\u8fd9\u6b21\uff0c\u4ed6\u8fc7\u6765\u627e\u4f60\u5e2e\u5fd9\u3002\n\n\n\u8fd9\u4e2a\u6e38\u620f\u7684\u89c4\u5219\u5f88\u7b80\u5355\u3002\u8fd9\u4e2a\u6e38\u620f\u5728\u4e00\u4e2a\u6709\u77401\u5230N (2 <= N <= 10,000)\u4e00\u5171N\u4e2a\u8282\u70b9\uff0cN-1\u6761\u8fb9\u7684\u6811\u4e0a\u9762\u8fdb\u884c\u3002\u8282\u70b91\u662f\u6811\u6839\u3002\u9664\u4e86\u8282\u70b91\uff0c\u8282\u70b9i\u6709\u4e00\u4e2a\u7236\u8282\u70b9P\\_i (1 <= P\\_i < i)\u3002\u4e00\u5f00\u59cb\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e9b\u77f3\u5934\uff08\u9664\u4e86\u6839\u8282\u70b9\uff0c\u6839\u8282\u70b9\u6ca1\u6709\u77f3\u5934\uff09\u3002\n\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u5728\u6e38\u620f\u521a\u5f00\u59cb\u7684\u65f6\u5019\u975e\u6839\u8282\u70b9i\u6070\u597d\u6709R\\_i (1 <= R\\_i <= 1,000)\u4e2a\u77f3\u5934\u3002 \u6e38\u620f\u5728\u4e24\u4e2a\u73a9\u5bb6\u4e4b\u95f4\u8f6e\u6d41\u8fdb\u884c\uff0cTed\u5148\u624b\u3002\u5728\u6bcf\u4e00\u8f6e\uff0c\u8fd9\u8f6e\u7684\u73a9\u5bb6\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u975e\u6839\u8282\u70b9\uff0c\u5e76\u4e14\u628a\u6700\u591aL (1 <= L <= 1,000)\u4e2a\u77f3\u5934\u4ece\u8fd9\u4e2a\u8282\u70b9\u5411\u6811\u6839\u9760\u8fd1\u4e00\u4e2a\u5355\u4f4d\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u628a\u8fd9\u4e9b\u77f3\u5934\u79fb\u52a8\u5230\u5b83\u7684\u7236\u8282\u70b9\u5904\uff09\u3002\u5e76\u4e14\u8fd9\u4e2a\u73a9\u5bb6\u81f3\u5c11\u9700\u8981\u79fb\u52a8\u4e00\u4e2a\u77f3\u5b50\u3002\u5f53\u67d0\u4e2a\u73a9\u5bb6\u6ca1\u6709\u529e\u6cd5\u79fb\u52a8\u77f3\u5b50\u7684\u65f6\u5019\uff08\u4e5f\u5c31\u662f\u6240\u6709\u7684\u77f3\u5b50\u90fd\u79fb\u52a8\u5230\u8282\u70b91\uff09\uff0c\u6e38\u620f\u7ed3\u675f\uff0c\u8fd9\u4e2a\u73a9\u5bb6\u5931\u8d25\u3002\n\n\nTed\u9700\u8981\u4f60\u7684\u5e2e\u52a9\u3002\u4ed6\u5f97\u5230\u4e86\u4e00\u5f00\u59cb\u4e00\u5f00\u59cb\u6e38\u620f\u7684\u4f48\u5c40\uff0c\u800c\u4e14\u4ed6\u5c06\u4f1a\u5bf9\u8fd9\u4e2a\u4f48\u5c40\u4e00\u4e00\u8fdb\u884cT (1<= T <= 10,000)\u6b21\u4fee\u6539\u3002\u8bf7\u5e2e\u52a9\u4ed6\u786e\u5b9a\uff0c\u5728\u6bcf\u6b65\u4fee\u6539\u4e4b\u540e\uff0c\u4ee5\u8fd9\u4e2a\u4f48\u5c40\u5f00\u5c40\uff0c\u5728\u53cc\u65b9\u90fd\u7528\u6700\u4f18\u7b56\u7565\u7684\u524d\u63d0\u4e0b\u4ed6\u662f\u5426\u80fd\u8d62\u5f97\u8fd9\u4e2a\u6e38\u620f\u3002 Ted\u7684\u6bcf\u6b21\u4fee\u6539\u7531\u4e24\u4e2a\u6570\u5b57A\\_j (1 < A\\_j <= N)\u548cB\\_j (1 <= B\\_j <= 1,000)\u63cf\u8ff0\uff0c\u8868\u793aTed\u5c06\u4f1a\u628a\u8282\u70b9A\\_j\u7684\u77f3\u5934\u6570\u4fee\u6539\u4e3aB\\_j\uff08\u6ce8\u610f\u8fd9\u662f\u4e00\u4e2a\u201c\u8bbe\u5b9a\u201d\u64cd\u4f5c\uff0c\u65e2\u4e0d\u662f\u201c\u51cf\u5c11\u201d\u4e5f\u4e0d\u662f\u201c\u589e\u52a0\u201d\uff09\u3002\u5e76\u4e14\u8be2\u95ee\u4fee\u6539\u540e\u8c01\u4f1a\u83b7\u80dc\u3002\u6ce8\u610f\u8fd9\u4e9b\u4fee\u6539\u4f1a\u7d2f\u79ef\uff0c\u4e5f\u5c31\u662f\u8282\u70b9A\\_j\u7684\u77f3\u5934\u6570\u4f1a\u4e00\u76f4\u4fdd\u6301\u5728B\\_j\u4e2a\uff0c\u77e5\u9053\u65b0\u7684A\\_j\u51fa\u73b0\u3002\n\n\n\u4f60\u7684\u7a0b\u5e8f\u5e94\u8be5\u786e\u5b9a\u5728\u4ee5\u6bcf\u4e2a\u72b6\u51b5\u4f5c\u4e3a\u5f00\u5c40\u65f6\u8c01\u5c06\u83b7\u80dc\u3002 \u5927\u7ea630%\u7684\u6d4b\u8bd5\u6570\u636e\u6709N <= 10\u4e14T <= 100\u3002\u5e76\u4e14\u5728Ted\u6bcf\u6b21\u4fee\u6539\u8fc7\u540e\u6811\u4e0a\u6ca1\u6709\u8282\u70b9\u4f1a\u8d85\u8fc75\u4e2a\u77f3\u5934\u3002 \u4f60\u5c06\u4f1a\u5728\u4f60\u524d50\u6b21\u63d0\u4ea4\u7684\u65f6\u5019\u5f97\u5230\u90e8\u4efd\u6d4b\u8bd5\u6570\u636e\u53cd\u9988\u3002\n",
    "inputFormat": "\\* Line 1: Three space-separated integers: N, T, and L\n\n\\* Lines 2..N: Line i contains two space-separted integers: P\\_i and R\\_i\n\n\\* Lines N+1..N+T: Line j+N describes Ted's next change using two space-separated integers: A\\_j and B\\_j\n",
    "outputFormat": "\\* Lines 1..T: Line i contains 'Yes' if Ted can win the game after change i; and 'No' otherwise.\n",
    "samples": [
        [
            "3 2 10 \n1 5 \n1 3 \n2 3 \n3 1 \n",
            "No \nYes \n"
        ]
    ],
    "hint": ""
}