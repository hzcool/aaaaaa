{
    "description": "As with most types of products, buying a new phone can be difficult.\nOne of the main challenges is that there are a lot of different\naspects of the phone that you might care about, such as its price, its\nperformance, and how user-friendly the phone is.\nTypically, there will be no single phone that is simultaneously the\nbest at all of these things: the cheapest phone, the most powerful\nphone, and the most user-friendly phone will likely be different phones.\n\nThus when buying a phone, you are forced to make some sacrifices by\nbalancing the different aspects you care about against each other and\nchoosing the phone that achieves the best compromise (where \"best\"\nof course depends on what your priorities happen to be).  One way of\nmeasuring this sacrifice is known as the *opportunity cost*,\nwhich (for the purposes of this problem) we define as follows.\n\nSuppose that you have bought a phone with price $x$, performance $y$,\nand user-friendliness $z$. For simplicity, we assume that these three\nvalues are measured on a comparable numeric scale where higher is\nbetter. If there are $n$ available phones, and the values\n$(x_i,y_i,z_i)$ represent the (price, performance, user-friendliness)\nof the $i^{\\text{th}}$ phone, then the opportunity cost of your phone\nis defined as\n\n$$\\max _{1 \\leq i \\leq n}\\left(\\max \\left(x_{i}-x, 0\\right)+\\max \\left(y_{i}-y, 0\\right)+\\max \\left(z_{i}-z, 0\\right)\\right)$$\n\n\nWrite a program that, given the list of available phones, finds a\nphone with the minimum opportunity cost.",
    "inputFormat": "The first line of input contains an integer $n$ ($2 \\leq n \\leq\n200\\,000$), the number of phones considered. Following that are $n$ lines.\nThe $i^{\\text{th}}$ of these lines contains three integers $x_i$, $y_i$, and $z_i$,\nwhere $x_i$ is the price, $y_i$ is the performance, and $z_i$ is the\nuser-friendliness of the $i^{\\text{th}}$ phone ($1 \\leq x_i, y_i, z_i \\leq\n10^9$).",
    "outputFormat": "Output a single line containing two integers: the smallest possible\nopportunity cost and an integer between $1$ and $n$ indicating the\nphone achieving that opportunity cost. If there are multiple such\nphones, output the one with the smallest index.\n",
    "samples": [
        [
            "4\n20 5 5\n5 20 5\n5 5 20\n10 10 10",
            "10 4\n"
        ],
        [
            "4\n15 15 5\n5 15 15\n15 5 15\n10 10 10",
            "10 1"
        ]
    ],
    "hint": "",
    "translation": "\u4e0e\u5927\u591a\u6570\u7c7b\u578b\u7684\u4ea7\u54c1\u4e00\u6837\uff0c\u8d2d\u4e70\u4e00\u90e8\u65b0\u624b\u673a\u53ef\u80fd\u5f88\u56f0\u96be\u3002\u5176\u4e2d\u4e00\u4e2a\u4e3b\u8981\u56f0\u96be\u662f\uff0c\u4f60\u53ef\u80fd\u4f1a\u5173\u5fc3\u624b\u673a\u7684\u8bb8\u591a\u4e0d\u540c\u65b9\u9762\uff0c\u6bd4\u5982\u4ef7\u683c\u3001\u6027\u80fd\u4ee5\u53ca\u624b\u673a\u7684\u7528\u6237\u53cb\u597d\u7a0b\u5ea6\uff08**\u672c\u9898\u4e2d\u4ec5\u8003\u8651\u8fd9\u4e09\u79cd\u56e0\u7d20**\uff09\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e0d\u4f1a\u6709\u4e00\u6b3e\u624b\u673a\u540c\u65f6\u5728\u6240\u6709\u8fd9\u4e9b\u65b9\u9762\u90fd\u662f\u6700\u597d\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6700\u4fbf\u5b9c\u7684\u624b\u673a\u3001\u529f\u80fd\u6700\u5f3a\u5927\u7684\u624b\u673a\u548c\u7528\u6237\u6700\u53cb\u597d\u7684\u624b\u673a\u53ef\u80fd\u662f\u4e0d\u540c\u7684\u624b\u673a\u3002\u56e0\u6b64\uff0c\u5728\u8d2d\u4e70\u624b\u673a\u65f6\uff0c\u4f60\u4e0d\u5f97\u4e0d\u505a\u51fa\u4e00\u4e9b\u727a\u7272\uff0c\u5e73\u8861\u5f7c\u6b64\u5173\u5fc3\u7684\u4e0d\u540c\u65b9\u9762\uff0c\u5e76\u9009\u62e9\u5b9e\u73b0\u6700\u4f73\u6298\u8877\u7684\u624b\u673a\uff08\u5f53\u7136\uff0c\u201c\u6700\u4f73\u201d\u53d6\u51b3\u4e8e\u4f60\u7684\u4f18\u5148\u7ea7\uff09\u3002\u8861\u91cf\u8fd9\u79cd\u727a\u7272\u7684\u4e00\u79cd\u65b9\u6cd5\u79f0\u4e3a**\u673a\u4f1a\u6210\u672c**\uff08\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff09\uff0c\u6211\u4eec\u5c06\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n\u67d0\u5546\u5e97\u91cc\u4e00\u5171\u6709 $n$ \u90e8\u624b\u673a\uff0c\u5176\u4e2d\u7b2c $i$ \u90e8\u624b\u673a\u7684\u4ef7\u683c\u4e3a $x_i$\uff0c\u6027\u80fd\u4e3a $y_i$\uff0c\u7528\u6237\u53cb\u597d\u7a0b\u5ea6\u4e3a $z_i$\u3002\u5047\u8bbe\u4f60\u8d2d\u4e70\u4e86\u4e00\u4e2a\u4ef7\u683c\u4e3a $x$\uff0c\u6027\u80fd\u4e3a $y$\uff0c\u7528\u6237\u53cb\u597d\u7a0b\u5ea6\u4e3a $z$ \u7684\u4e00\u53f0\u624b\u673a\uff0c\u90a3\u4e48\u8d2d\u4e70\u8fd9\u53f0\u624b\u673a\u7684\u673a\u4f1a\u6210\u672c\u7528\u5982\u4e0b\u516c\u5f0f\u8868\u793a\uff1a\n\n$$\\max\\limits_{1\\leqslant i\\leqslant n}(\\max(x_i-x,0),\\max(y_i-y,0),\\max(z_i-z,0))$$\n\n\u73b0\u5728\uff0c\u8bf7\u6c42\u51fa\u6240\u6709 $n$ \u90e8\u624b\u673a\u7684\u673a\u4f1a\u6210\u672c\u7684\u6700\u5c0f\u503c\uff0c\u5e76\u627e\u5230\u673a\u4f1a\u6210\u672c\u6700\u5c0f\u7684**\u7f16\u53f7\u6700\u5c0f**\u7684\u624b\u673a\u7684\u7f16\u53f7\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a\n\n- $2\\leqslant n\\leqslant 2\\times 10^5$\u3002\n- $1\\leqslant x_i,y_i,z_i\\leqslant 10^9$\u3002\n\nTranslated by Eason_AC"
}