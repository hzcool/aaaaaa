{
    "description": "Cirno \u6355\u83b7\u4e86\u4e00\u53ea $n$ \u7ef4\u8682\u8681\uff0c\u5b83\u60f3\u4ece $S(0,0,...,0)$ \u722c\u5230 $T(1,1,...,1)$ \u3002\n\n\u88ab\u5c01\u95ed\u5728\u8fd9\u4e2a $1\\times1\\times...\\times1$ \u7684\u65b9\u683c\u4e2d\uff0c\u8682\u8681\u6bcf\u4e00\u6b65\u53ea\u80fd\u722c\u5411\u4e00\u4e2a\u5750\u6807\u76f8\u90bb\u7684\u70b9\u3002\n\n\u73b0\u5728 Cirno \u60f3\u8003\u8003\u4f60\u8682\u8681\u6700\u591a\u80fd\u627e\u5230\u591a\u5c11\u6761\u4ece $S$ \u5230 $T$ \u7684\u8def\u5f84\u4e24\u4e24\u6ca1\u6709\u4ea4\u70b9( \u9664 $S$, $T$ )\u3002\n\n\u5e76\u8981\u6c42\u4f60\u6784\u9020\u8fd9\u6837\u4e00\u7ec4\u8def\u5f84\u3002",
    "inputFormat": "\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570 $n$ \u3002",
    "outputFormat": "\u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570 $t$\uff0c\u8868\u793a\u6700\u591a\u7684\u8def\u5f84\u6570\u3002\n\n\u4ee5\u4e0b $t$ \u884c\uff0c\u6bcf\u884c\u4e00\u6761\u5408\u6cd5\u8def\u5f84\u3002\n\n\u5408\u6cd5\u8def\u5f84\u8868\u793a\u65b9\u5f0f :\n\n> $S$ [\u7a7a\u683c] $P_1$ [\u7a7a\u683c] $P_2$ [\u7a7a\u683c] ... [\u7a7a\u683c] $T$\n\n\u5176\u4e2d $P_i$ \u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u538b\u7f29\u7684 $01$ \u4e32 \u8868\u793a\u4e00\u4e2a $n$ \u7ef4\u5750\u6807\u3002\n\n**\u8bf7\u4e0d\u8981\u8f93\u51fa\u591a\u4f59\u7684\u7a7a\u683c**\u3002",
    "samples": [
        [
            "2",
            "2\n0 1 3\n0 2 3"
        ]
    ],
    "hint": "**\u300c\u672c\u9898\u4f7f\u7528 Special Judge\u300d**\n\n### Sample1\u89e3\u91ca\n\n\u7b2c $1$ \u6761\u8def\u5f84\uff1a$(0,0) \\rightarrow (0,1) \\rightarrow (1,1)$\n\n\u7b2c $2$ \u6761\u8def\u5f84\uff1a$(0,0) \\rightarrow (1,0) \\rightarrow (1,1)$\n\n\u4e8c\u8005\u9664\u4e86 $S$ \u4e0e $T$ \u65e0\u4ea4\u70b9\u3002\n\n### \u6570\u636e\u8303\u56f4\u7ea6\u5b9a\n\n**\u300c\u672c\u9898\u4e0d\u91c7\u7528\u6346\u7ed1\u6d4b\u8bd5\uff0c\u6570\u636e\u6709\u68af\u5ea6\u300d**\n\n\u5bf9\u4e8e 100% \u7684\u6570\u636e $3 \\le n \\le 60$\u3002\n\n### \u540e\u7f6e\u4ee3\u7801\u7247\u6bb5\n\n - \u4e8c\u8fdb\u5236\u538b\u4f4d\u51fd\u6570\n\n```cpp\n/**\n * For only cpp11, cpp14, cpp17, cpp20.\n *\n * @param: __s : The binary high-dimension position inputed.\n * @return: Standard output format( U64 ).\n**/\n\nunsigned long long zip( std::string __s ) \n  { unsigned long long __r = 0;\n    for( auto __c : __s ) \n      { ( __r <<= 1ull ) |= ( __c - 0x30 ); }\n    return __r; }\n\n```\n - SPJ\u4ee3\u7801\n```cpp\n//SPJ\n#include \"testlib.h\"\n#include<bits/stdc++.h>\n\ntypedef unsigned long long ULL;\ntypedef std::vector<std::string> SEQ;\ntypedef std::string STR;\n\nSEQ split( std::string _par, char _sgn )\n  { SEQ _rat = SEQ();\n\tSTR _rem = STR();\n\t\n    for( char __c : _par )\n      { if( __c = _sgn ) _rat.push_back( _rem ), _rem = \"\";\n\t    else _rem += __c; }\n\t\n\tif( _rem != \"\" ) _rat.push_back( _rem );\n\t\n\treturn _rat; }\n\nULL to_ULL( std::string _str ) \n  { ULL _rat = 0;\n\t\n\tfor( char __c : _str )\n\t  { ( _rat *= 10ull ) += (ULL)( __c - '0' ); }\n\t\n\treturn _rat; }\n\nbool isPw2( ULL x )\n  { return !( x & (x - 1ull) ); }\n\nstd::map<ULL, bool> MP;\n\nint main(int argc, char* argv[]) {\n    registerTestlibCmd(argc, argv);\n\t\n\tULL n = inf.readLong();\n\tULL S = 0, T = (1ull << n) - 1ull;\n\tULL N = ouf.readLong();\n\t\n\tif( N != n ) quitf( _wa, \"Count paths wrongly.\" );\n\t\n\touf.readEoln();\n\t\n    while( n -- ) {\n    \tstd::string path = ouf.readLine();\n    \n    \tULL _lst = 0;\n    \t\n    \tfor( auto N : split( path, \" \" ) )\n    \t  { ULL _now = to_ULL( N );\n    \t\tif( _now != S and _now != T and MP[_now] ) \n\t\t\t  { quitf( _wa, \"Paths crossing\" ); }\n    \t    if( !isPw2( _now ^ _lst ) ) \n\t\t\t  { quitf( _wa, \"Wrong path format\" ); }\n    \t    _lst = _now; MP[_now] = true; }\n    \t\n    \tif( _lst != T ) quitf( _wa, \"Wrong path ending\" );\n\t}\n\t\n\tquitf( _ok, \"Accepted\" );\n\t\n    return 0;\n} \n```\n"
}