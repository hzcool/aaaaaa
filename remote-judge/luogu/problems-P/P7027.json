{
    "description": "\n\nThere are only two directions in Perpendicularia: vertical and horizontal. Perpendicularia government are going to build a new secret service facility. They have some proposed facility plans and want to calculate total secured perimeter for each of them.\n\nThe total secured perimeter is calculated as the total length of the facility walls invisible for the perpendicularly-looking outside observer. The figure below shows one of the proposed plans and corresponding secured perimeter.\n\n![](https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15139/1.png)\n\nWrite a program that calculates the total secured perimeter for the given plan of the secret service facility.\n\n",
    "inputFormat": "\n\nThe plan of the secret service facility is specified as a polygon.\n\nThe first line of the input contains one integer $n$ -- the number of vertices of the polygon $(4 \\le n \\le 1000)$ . Each of the following $n$ lines contains two integers $x_{i}$ and $y_{i} -$ the coordinates of the i-th vertex $(\u221210^{6} \\le x_{i}, y_{i} \\le 10^{6}).$ Vertices are listed in the consecutive order.\n\nAll polygon vertices are distinct and none of them lie at the polygon's edge. All polygon edges are either vertical $(x_{i} = x_{i+1}\u00a0or$ horizontal $(y_{i} = y_{i+1})$ and none of them intersect each other.\n\n",
    "outputFormat": "\n\nOutput a single integer -- the total secured perimeter of the secret service facility.\n\n",
    "samples": [
        [
            "10\n1 1\n6 1\n6 4\n3 4\n3 3\n5 3\n5 2\n2 2\n2 3\n1 3\n",
            "6\n"
        ]
    ],
    "hint": "Time limit: 3 s, Memory limit: 512 MB. \n\n",
    "translation": "## \u9898\u76ee\u63cf\u8ff0\n\n\u7ed9\u4f60\u4e00\u4e2a\u6570 $ n $ \uff0c\u518d\u7ed9\u4f60 $ n $ \u4e2a\u70b9\uff08$ x_i , y_i $\uff09\uff0c\u8fd9 $ n $ \u4e2a\u70b9\u4f9d\u6b21\u8fde\u6210\u4e00\u4e2a\u591a\u8fb9\u5f62\u3002\uff08\u4fdd\u8bc1\u591a\u8fb9\u5f62\u7684\u6bcf\u6761\u8fb9\u90fd\u4e0e\u5750\u6807\u8f74\u5e73\u884c\u6216\u5782\u76f4\uff0c\u70b9\u4e0d\u91cd\u5408\uff0c\u70b9\u4e0d\u5728\u8fb9\u4e0a\uff0c\u8fb9\u65e0\u76f8\u4ea4\uff09\n\n\u6c42\u6709\u591a\u957f\u7684\u8fb9\u662f\u5b89\u5168\u7684\uff1f\n\n\uff08\u4e00\u4e2a\u5355\u4f4d\u957f\u5ea6\u7684\u8fb9\u662f\u5b89\u5168\u7684\u5f53\u4e14\u4ec5\u5f53\u5b83\u5411\u5916\u5e73\u79fb\u540e\u80fd\u4e0e\u5176\u4f59\u8fb9\u76f8\u9047\uff0c\u7ed3\u5408\u4e00\u4e0b\u56fe\u770b\u770b\uff09\n\n## \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6570$ n $,\u8868\u793a\u6709\u591a\u5c11\u4e2a\u5b9a\u70b9\u3002\n\n\u63a5\u4e0b\u6765 $ n $ \u884c\uff0c\u884c\u4e24\u4e2a\u6570 $ x_i \\; y_i $ \u8868\u793a\u6bcf\u4e2a\u70b9\u7684\u5750\u6807\u3002\n\n## \u8f93\u51fa\u683c\u5f0f\n\n\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u5b89\u5168\u7684\u957f\u5ea6\u3002"
}