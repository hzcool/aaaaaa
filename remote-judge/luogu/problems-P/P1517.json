{
    "description": "Problems involving the computation of exact values of very large magnitude and precision are common. For example, the computation of the national debt is a taxing experience for many computer systems.\n\nThis problem requires that you write a program to compute the exact value of Rn where R is a real number ( 0.0 < R <= 9999.9) and n is an integer such that 0 < n <= 250.\n",
    "inputFormat": "The input will consist of a set (less than 11) of pairs of values for R and n. The R value will occupy columns 1 through 6, and the n value will be in columns 8 and 9.\n\n   \n ",
    "outputFormat": "The output will consist of one line for each line of input giving the exact value of R^n. Leading zeros should be suppressed in the output. Insignificant trailing zeros must not be printed. Don't print the decimal point if the result is an integer.\n",
    "samples": [
        [
            "95.123  2\n0.4321  5\n5.1234  7\n6.7592  3\n98.999  5\n1.0100 10\n",
            "9048.385129\n.01506334182914325601\n92663.3181348508776705891407804544\n308.806114738688\n9509420210.697891990494999\n1.10462212541120451001\n"
        ]
    ],
    "hint": "If you don't know how to determine wheather encounted the end of input:\n\ns is a string and n is an integer\n\nC++\nwhile(cin>>s>>n) \n\n{ \n...\n} \nc\nwhile(scanf(\"%s%d\",s,&n)==2) //to see if the scanf read in as many items as you want\n\n\n{ \n...\n}",
    "translation": "\u8ba1\u7b97\u91cf\u975e\u5e38\u5927\u3001\u7cbe\u5ea6\u8981\u6c42\u975e\u5e38\u9ad8\u7684\u95ee\u9898\u662f\u5f88\u5e38\u89c1\u7684\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u8ba1\u7b97\u56fd\u5bb6\u503a\u52a1\u5c31\u662f\u8fd9\u4e48\u4e00\u9879\u5bf9\u4e8e\u8bb8\u591a\u8ba1\u7b97\u673a\u7cfb\u7edf\u6765\u8bf4\u975e\u5e38\u7e41\u91cd\u7684\u5de5\u4f5c\u3002\n\n\u73b0\u5728\u6709\u8fd9\u4e48\u4e00\u4e2a\u4efb\u52a1\u8981\u6c42\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u8ba1\u7b97R^n\u7684\u7cbe\u786e\u503c\uff0c\u5176\u4e2dR\u662f\u4e00\u4e2a\u5b9e\u6570(0.0 < R <= 9999.9)\u800cn\u662f\u4e00\u4e2a\u6574\u6570\uff080 < n <= 250\uff09\u3002\n\n\u8f93\u5165\u5c06\u5305\u542b\u4e00\u4e2a\u5c0f\u4e8e11\u884c\u7684\u6587\u4ef6\uff0c\u5176\u4e2d\u6bcf\u4e00\u884c\u5305\u62ec\u4e00\u4e2aR\u548c\u4e00\u4e2an\uff0c\u4e2d\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff08\u6570\u91cf\u4e0d\u5b9a\u4f46\u662f\u4fdd\u8bc1R\u7684\u7b2c\u4e00\u4f4d\u5728\u7b2c\u4e00\u5217\u800cn\u7684\u672b\u4f4d\u5728\u7b2c\u4e5d\u5217\uff09\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8f93\u5165\u9700\u8981\u6709\u4e00\u884c\u7684\u8f93\u51fa\uff0c\u8868\u793aR^n\u7684\u7cbe\u786e\u503c\u3002\u6709\u4e09\u70b9\u8981\u6c42\uff1a\n\n1\u3001\u8f93\u51fa\u4e0d\u5141\u8bb8\u6709\u524d\u5bfc0\n\n2\u3001\u4e0d\u5141\u8bb8\u65e0\u610f\u4e49\u7684\u5c3e\u968f0\uff08\u59821.90\u4e2d\u76840\u4e0d\u80fd\u8f93\u51fa\uff09\n\n3\u3001\u5982\u679c\u7ed3\u679c\u662f\u6574\u6570\uff0c\u4e0d\u5e94\u8be5\u6253\u5370\u5c0f\u6570\u70b9\n\n\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u5982\u4f55\u786e\u5b9a\u8f93\u5165\u7684\u672b\u5c3e\u503c:\n\n\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e2e\u52a9\n\nstring s; int n;\n\nc++\u7248while(cin >> s >> n) {\u2026\u8fd9\u91cc\u662f\u4f60\u7684\u4ee3\u7801}\n\nc\u7248while(scanf(\"%s%d\"\uff0cs\uff0c&n)==2) //\u4ee5\u67e5\u770bscanf\u662f\u5426\u6309\u9700\u8981\u7684\u6570\u91cf\u8bfb\u53d6\u3002\n\n{\u2026\u8fd9\u91cc\u662f\u4f60\u7684\u4ee3\u7801}\n\n\u611f\u8c22 @SLYZ_0120  \u63d0\u4f9b\u7684\u7ffb\u8bd1\u3002"
}