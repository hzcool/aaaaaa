{
    "description": "The streets of Byte City form a regular, chessboardlike network - they are either north-south or west-east directed. We shall call them NS- and WE-streets. Furthermore, each street crosses the whole city. Every NS-street intersects every WE- one and vice versa. The NS-streets are numbered from $1$ to $n$, starting from the westernmost. The WE-streets are numbered from $1$ to $m$, beginning with the southernmost. Each intersection of the $i$'th NS-street with the $j$'th WE-street is denoted by a pair of numbers $(i,j)$ (for $1\\le i\\le n$, $1\\le j\\le m$).\n\nThere is a bus line in Byte City, with intersections serving as bus stops. The bus begins its itinerary by the $(1,1)$ intersection, and finishes by the $(n,m)$ intersection. Moreover, the bus may only travel in the eastern and/or northern direction.\n\nThere are passengers awaiting the bus by some of the intersections. The bus driver wants to choose his route in a way that allows him to take as many of them as possible. (We shall make an assumption that the interior of the bus is spacious enough to take all of the awaiting passengers, regardless of the route chosen.)TaskWrite a programme which:\n\nreads from the standard input a description of the road network and the number of passengers waiting at each intersection,finds, how many passengers the bus can take at the most,writes the outcome to the standard output.\n\nByte City \u7684\u8857\u9053\u5f62\u6210\u4e86\u4e00\u4e2a\u6807\u51c6\u7684\u68cb\u76d8\u7f51\u7edc \u2013 \u4ed6\u4eec\u8981\u4e48\u662f\u5317\u5357\u8d70\u5411\u8981\u4e48\u5c31\u662f\u897f\u4e1c\u8d70\u5411. \u5317\u5357\u8d70\u5411\u7684\u8def\u53e3\u4ece 1 \u5230 n\u7f16\u53f7, \u897f\u4e1c\u8d70\u5411\u7684\u8def\u4ece1 \u5230 m\u7f16\u53f7. \u6bcf\u4e2a\u8def\u53e3\u7528\u4e24\u4e2a\u6570(i, j) \u8868\u793a(1 <= i <= n, 1 <= j <= m). Byte City\u91cc\u6709\u4e00\u6761\u516c\u4ea4\u7ebf, \u5728\u67d0\u4e00\u4e9b\u8def\u53e3\u8bbe\u7f6e\u4e86\u516c\u4ea4\u7ad9\u70b9. \u516c\u4ea4\u8f66\u4ece (1, 1) \u53d1\u8f66, \u5728(n, m)\u7ed3\u675f.\u516c\u4ea4\u8f66\u53ea\u80fd\u5f80\u5317\u6216\u5f80\u4e1c\u8d70. \u73b0\u5728\u6709\u4e00\u4e9b\u4e58\u5ba2\u5728\u67d0\u4e9b\u7ad9\u70b9\u7b49\u8f66. \u516c\u4ea4\u8f66\u53f8\u673a\u5e0c\u671b\u5728\u8def\u7ebf\u4e2d\u80fd\u63a5\u5230\u5c3d\u91cf\u591a\u7684\u4e58\u5ba2.\u5e2e\u4ed6\u60f3\u60f3\u600e\u4e48\u624d\u80fd\u63a5\u5230\u6700\u591a\u7684\u4e58\u5ba2.\n",
    "inputFormat": "The first line of the standard input contains three positive integers $n$, $m$ and $k$ - denoting the number of NS-streets, the number of WE-streets and the number of intersections by which the passengers await the bus, respectively ($1\\le n\\le 10^9$, $1\\le m\\le 10^9$, $1\\le k\\le 10^5$).\n\nThe following $k$ lines describe the deployment of passengers awaiting the bus, a single line per intersection. In the $(i+1)$'st line there are three positive integers $x_i$, $y_i$ and $p_i$, separated by single spaces, $1\\le x_i\\le n$,$1\\le y_i\\le m$,$1\\le p_i\\le 10^6$ . A triplet of this form signifies that by the intersection$(x_i,y_i)p_i$ passengers await the bus. Each intersection is described in the input data once at the most. The total number of passengers waiting for the bus does not exceed $1\\ 000\\ 000\\ 000$.\n",
    "outputFormat": "Your programme should write to the standard output one line containing a single integer - the greatest number of passengers the bus can take.\n",
    "samples": [
        [
            "8 7 11\n4 3 4\n6 2 4\n2 3 2\n5 6 1\n2 5 2\n1 5 5\n2 1 1\n3 1 1\n7 7 1\n7 4 2\n8 6 2",
            "11"
        ]
    ],
    "hint": ""
}