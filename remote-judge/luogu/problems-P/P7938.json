{
    "description": "In this problem, we define a sequence of `(` and `)` as a \"bracket sequence\".\n\nThe definition of *Regular Bracket Sequence* is as follows:\n\n1. `()` is a Regular Bracket Sequence.\n1. If `A` is a Regular Bracket Sequence, then `(A)` is also a Regular Bracket Sequence.\n1. If `A` and `B` are Regular Bracket Sequences, then `AB` is also a Regular Bracket Sequence.\n\nFor example: `()`, `(())`, and `()()` are all Regular Bracket Sequences, but `)(`, `()(` are not.\n\nIn particular, an empty sequence is **not** a Regular Bracket Sequence sequence in this problem.\n\nNow ~~cute~~ Ran gives you a bracket sequence $s$ of length $n$. She wants you to construct $2\\cdot m$ **strictly increasing** arrays. Let us denote them as\n $p_1,p_2,\\cdots,p_{2 m}$ (you can leave any of them empty). You need to ensure that all integers between $1\\sim n$ appear **exactly once** in these arrays. \n \nAn array $p_i=\\{r_1,r_2,\\cdots,r_k\\}$ is *Beautiful* if    $\\{s_{r_1},s_{r_2},\\cdots,s_{r_k}\\}$ is a Regular Bracket Sequence.\n\nRan wonders whether it is possible to construct these arrays so that at least $m$ of the $2\\cdot m$ arrays are \"beautiful arrays\". ",
    "inputFormat": "Each test contains multiple test cases.\n\nThe first line contains an integer $T$, the number of test cases.\n\nFor each test case, the first line contains two integers $n$ and $m$, and the second line contains a bracket sequence $s$.",
    "outputFormat": "For each test case, print one line.\n\nIf it is possible to construct these arrays, print $1$. Otherwise print $0$.",
    "samples": [
        [
            "2\n2 1\n()\n2 99\n()",
            "1\n0"
        ]
    ],
    "hint": "### Explanation\n\nFor the first test case, we can construct $p_1=\\{1,2\\}$ and $ p_2=\\{\\}$. So $p_1$ is a \"beautiful array\".\n\nFor the second test case, it is obvious that we cannot use two numbers to construct $99$ beautiful arrays.\n\n### Constraints\n\n$1\\le T,n,m\\le 200$.",
    "translation": "\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e3a\u62ec\u53f7\u4e32\u5f53\u4e14\u4ec5\u5f53\u5176\u4ec5\u7531 `(` \u548c `)` \u7ec4\u6210\u3002\n\n\u8bd5\u5c06\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u62ec\u53f7\u4e32\u5206\u4e3a $2m$ \u4e2a\u5b50\u5e8f\u5217\uff0c\u5b50\u5e8f\u5217\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u4e14\u6bcf\u4e2a\u5b57\u7b26\u90fd\u5fc5\u987b\u5206\u5230\u6070\u597d\u4e00\u4e2a\u5b50\u5e8f\u5217\u4e2d\uff0c\u4f7f\u5f97\u81f3\u5c11 $m$ \u4e2a\u5b50\u5e8f\u5217\u4e3a\u5339\u914d\u7684\u62ec\u53f7\u4e32\u3002**\u7a7a\u5e8f\u5217\u4e0d\u7b97\u5339\u914d\u7684\u62ec\u53f7\u5e8f\u5217**\u3002\u65e0\u89e3\u8bf7\u8f93\u51fa $0$\uff0c\u5426\u5219\u8f93\u51fa $1$\u3002\u672c\u9898\u591a\u7ec4\u6570\u636e\uff0c\u5176\u4e2d\u6570\u636e\u7ec4\u6570\u4e3a $T$\u3002\n\n\u5b9a\u4e49 $A$ \u4e3a $B$ \u7684\u5b50\u5e8f\u5217\u5f53\u4e14\u4ec5\u5f53 $A$ \u80fd\u7531 $B$ \u5728\u987a\u5e8f\u4e0d\u6539\u53d8\u7684\u524d\u63d0\u4e0b\u5220\u9664\u82e5\u5e72\u5143\u7d20\u540e\u5f97\u5230\u3002\n\n*\u6837\u4f8b $1$ \u89e3\u91ca\uff1a\u4f60\u53ef\u4ee5\u5c06\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u5206\u5165\u7b2c\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u8ba9\u7b2c\u4e8c\u4e2a\u5b50\u5e8f\u5217\u4e3a\u7a7a\u5b50\u5e8f\u5217\u3002\u6b64\u65f6\u7b2c\u4e00\u4e2a\u5b50\u5e8f\u5217\u4e3a `()`\uff0c\u7b2c\u4e8c\u4e2a\u4e3a\u7a7a\uff0c\u603b\u8ba1\u6709\u4e00\u4e2a\u5339\u914d\u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u6ee1\u8db3\u8981\u6c42\u3002"
}