{
    "description": "\n\nThe Merkle-Hellman Knapsack Cryptosystem was one of the earliest public key cryptosystems invented by Ralph Merkle and Martin Hellman in $1978$ . Here is its description\n\nAlice chooses $n$ positive integers ${a_{1}, . . . , a_{n}}$ such that each $a_{i} > \\sum^{i\u22121}_{j=1}a_{j},$ a positive integer $q$ which is greater than the sum of all $a_{i},$ and a positive integer $r$ which is coprime with $q$ . These $n + 2$ integers are Alice's private key.\n\nThen Alice calculates $b_i = (a_{i} \u00b7 r)$ mod $q$ . These $n$ integers are Alice's public key.\n\nKnowing her public key, Bob can transmit a message of $n$ bits to Alice. To do that he calculates $s$ , the sum of $b_{i}$ with indices $i$ such that his message has bit $1$ in i-th position. This value $s$ is the encrypted message.\n\nNote that an eavesdropper Eve, who knows the encrypted message and the public key, has to solve a (presumably hard) instance of the knapsack problem to find the original message. Meanwhile, after receiving $s$ , Alice can calculate the original message in linear time; we leave it to you as an exercise.\n\nIn this problem you deal with the implementation of the Merkle-Hellman Knapsack Cryptosystem in which Alice chose $q = 2^{64},$ for obvious performance reasons, and published this information. Since everyone knows her $q$ , she asks Bob to send her the calculated value $s$ taken modulo $2^{64}$ for simplicity of communication.\n\nYou are to break this implementation. Given the public key and an encrypted message, restore the original message.\n\n",
    "inputFormat": "\n\nThe first line contains one integer $n (1 \\le n \\le 64)$ .\n\nEach of the next $n$ lines contains one integer $b_{i} (1 \\le b_{i} < 2^{64}).$\n\nThe last line contains one integer $s$ mod $q$ -- the encrypted message $s$ taken modulo $q (0 \\le s$ mod $q < 2^{64}).$\n\nThe given sequence $b_{i}$ is a valid public key in the described implementation, and the given value $s$ mod $q$ is a valid encrypted message.\n\n",
    "outputFormat": "\n\nOutput exactly $n$ bits ($0$ or $1$ digits) -- the original message.\n\n",
    "samples": [
        [
            "5\n10\n20\n50\n140\n420\n440\n",
            "01001\n"
        ]
    ],
    "hint": "Time limit: 3 s, Memory limit: 512 MB. \n\n",
    "translation": "\u80cc\u5305\u5bc6\u7801\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u516c\u94a5\u5bc6\u7801\u7cfb\u7edf\uff0c\u4e0b\u9762\u662f\u5b83\u7684\u5177\u4f53\u8fc7\u7a0b\uff1a\n\n- Alice \u9009\u62e9 $n$ \u4e2a\u6b63\u6574\u6570 $a_1,a_2,\\cdots,a_n$\uff0c\u6ee1\u8db3 $a_i> \\sum\\limits_{j=1}^{i-1} a_j$\uff0c\u518d\u9009\u62e9\u4e24\u4e2a\u6b63\u6574\u6570 $q,r$\uff0c\u6ee1\u8db3 $q> \\sum\\limits_{j=1}^n a_i$\uff0c$r,q$ \u4e92\u8d28\u3002\u8fd9 $n + 2$ \u4e2a\u6570\u662f Alice \u7684\u79c1\u94a5\u3002\u518d\u8ba1\u7b97 $b_i = (a_i\\cdot r)\\bmod q$\uff0c\u8fd9 $n+2$ \u4e2a\u6570\u662f Alice \u7684\u516c\u94a5\u3002\n\n- Bob \u6709\u4e00\u4e2a 01 \u4e32 $t$\uff0c\u4ed6\u77e5\u9053 Alice \u7684\u516c\u94a5\uff0c$t$ \u52a0\u5bc6\u540e\u5f97\u5230 $s=\\left(\\sum\\limits_{i=1}^n [t_i=1]b_i\\right)\\bmod q$. \u4ed6\u628a\u8fd9\u4e2a 01 \u4e32\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u53d1\u7ed9\u4e86 Alice\u3002\u90a3 Alice \u5c31\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u89e3\u51fa\u6765\u3002\n\n\u4f60\u73b0\u5728\u622a\u83b7\u4e86 $s$\uff0c\u5e76\u77e5\u9053 $b_i$ \u548c $q$\uff0c\u5176\u4e2d $q = 2^{64}$\u3002\u8bf7\u89e3\u51fa\u8fd9\u4e2a 01 \u4e32\u3002\n\n$n\\le 64$\uff0c\u4fdd\u8bc1 $s,b_i$ \u5408\u6cd5\u3002"
}