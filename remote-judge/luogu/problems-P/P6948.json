{
    "description": "\n\nThe Intrusion and Crime Prevention Company (ICPC) builds intrusion detection systems for homes and businesses. The International Collegiate Programming Contest (in a strange coincidence also known as ICPC) is considering hiring the company to secure the room that contains the problem set for next year's World Finals.\n\nThe contest staff wants to prevent the intrusion attempts that were made in past years, such as rappelling down the outside of the building to enter through a window, crawling through air ducts, impersonating Bill Poucher, and the creative use of an attack submarine. For that reason, the problems will be stored in a room that has a single door and no other exits.\n\nICPC (the company) proposes to install sensors on the four sides of the door, where pairs of sensors are connected by wires. If somebody opens the door, any connected sensor pair will detect this and cause an alarm to sound.\n\nThe system has one design flaw, however. An intruder might cut the wires before opening the door. To assess the security of the system, you need to determine the minimum number of line segments that cut all wires. Figure H.1 shows two configurations of wires on the door (corresponding to the two sample inputs), and minimum-size cuts that intersect all wires.\n\n![](https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15696/1.png)\n\nFigure H.1 : Illustrations of Sample Inputs $1$ and $2$ .\n\n",
    "inputFormat": "\n\nThe input starts with a line containing three integers $n , w$ , and $h$ , which represent the number of wires installed $(1 \\le n \\le 10^{6})$ and the dimensions of the door $(1 \\le w , h \\le 10^{8}).$ This is followed by $n$ lines, each describing a wire placement. Each of these lines contains four integers $x_{1}, y_{1}, x_{2},$ and $y_{2} (0 \\le x_{1}, x_{2} \\le w , 0 \\le y_{1}, y_{2} \\le h)$ , meaning that a wire goes from $(x_{1}, y_{1})$ to $(x_{2}, y_{2}).$ Each wire connects different sides of the door. No wire is anchored to any of the four corners of the door. All locations in the input are distinct.\n\n",
    "outputFormat": "\n\nDisplay a minimum-size set of straight line cuts that intersect all wires. First, display the number of cuts needed. Then display the cuts, one per line in the format $x_{1} y_{1} x_{2} y_{2}$ for the cut between $(x_{1}, y_{1})$ and $(x_{2}, y_{2}).$ Each cut has to start and end on different sides of the door. Cuts cannot start or end closer than $10^{\u22126}$ to any wire anchor location or any corner of the door.\n\nCuts may be displayed in any order. The start and end locations of each cut may be displayed in either order. If there are multiple sets of cuts with the same minimum size, display any of them.\n\n",
    "samples": [
        [
            "4 4 6\n0 1 4 4\n0 5 2 0\n0 3 3 6\n2 6 4 2\n",
            "1\n0 4 4 3\n"
        ],
        [
            "5 4 6\n0 2 2 0\n0 3 2 6\n1 6 3 0\n1 0 4 4\n3 6 4 2\n",
            "2\n0 4 4 4.5\n0 1 4 1\n"
        ]
    ],
    "hint": "Time limit: 6 s, Memory limit: 1024 MB. \n\n",
    "translation": "#### \u9898\u76ee\u63cf\u8ff0\n\n\u5165\u4fb5\u4e0e\u72af\u7f6a\u9884\u9632\u516c\u53f8 (the Intrusion and Crime Prevection Company, \u7b80\u79f0 ICPC) \u4e3a\u5bb6\u5ead\u548c\u5546\u4e1a\u516c\u53f8\u5efa\u7acb\u4e86\u5165\u4fb5\u68c0\u6d4b\u7cfb\u7edf\u3002\u56fd\u9645\u5927\u5b66\u751f\u7f16\u7a0b\u7ade\u8d5b (the International Collegiate Programming Contest, \u78b0\u5de7\u4e5f\u7b80\u79f0 ICPC) \u6b63\u5728\u8003\u8651\u96c7\u4f63\u8be5\u516c\u53f8\u6765\u786e\u4fdd\u4e0b\u4e00\u5e74 World Finals \u7684\u9898\u76ee\u6587\u4ef6\u7684\u50a8\u85cf\u623f\u95f4\u7684\u5b89\u5168\u3002\n\n\u6bd4\u8d5b\u5de5\u4f5c\u4eba\u5458\u5e0c\u671b\u9632\u6b62\u8fc7\u53bb\u51e0\u5e74\u53d1\u751f\u7684\u5165\u4fb5\u5c1d\u8bd5\uff0c\u4f8b\u5982\u5728\u5927\u697c\u7684\u5916\u90e8\u5782\u76f4\u901f\u964d\u7136\u540e\u4ece\u7a97\u6237\u8fdb\u5165\uff0c\u4ece\u6392\u6c14\u7ba1\u9053\u722c\u8fdb\u6765\uff0c\u5192\u5145 Bill Poucher \uff08\u8bd1\u8005\u6ce8\uff1a\u67d0\u77e5\u540d\u8ba1\u7b97\u673a\u79d1\u5b66\u6559\u6388\uff0cACM-ICPC \u7684\u6267\u884c\u8463\u4e8b\uff09\uff0c\u4ee5\u53ca\u521b\u9020\u6027\u5730\u4f7f\u7528\u653b\u51fb\u6f5c\u8247\u3002\u6b63\u56e0\u5982\u6b64\uff0c\u9898\u76ee\u6587\u4ef6\u5c06\u88ab\u50a8\u85cf\u5728\u4ec5\u6709\u4e00\u6247\u95e8\u800c\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u51fa\u5165\u53e3\u7684\u623f\u95f4\u91cc\u3002\n\nICPC \uff08\u6307\u516c\u53f8\uff09\u5efa\u8bae\u5728\u95e8\u7684\u56db\u8fb9\u5b89\u88c5\u4f20\u611f\u5668\uff0c\u6bcf\u5bf9\u4f20\u611f\u5668\u7531\u7535\u7ebf\u8fde\u63a5\u3002\u5982\u679c\u6709\u4eba\u6253\u5f00\u4e86\u95e8\uff0c\u4efb\u4f55\u8fde\u63a5\u7684\u4e00\u5bf9\u4f20\u611f\u5668\u5c06\u68c0\u6d4b\u5230\u8fd9\u4e2a\u52a8\u4f5c\u5e76\u5f15\u8d77\u8b66\u62a5\u58f0\u3002\n\n\u7136\u800c\u8fd9\u4e2a\u7cfb\u7edf\u5b58\u5728\u4e00\u4e2a\u8bbe\u8ba1\u7f3a\u9677\u3002\u5165\u4fb5\u8005\u53ef\u4ee5\u5728\u5f00\u95e8\u4e4b\u524d\u526a\u65ad\u8fd9\u4e9b\u7535\u7ebf\u3002\u4e3a\u4e86\u8bc4\u4f30\u8fd9\u4e2a\u7cfb\u7edf\u7684\u5b89\u5168\u6027\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u6700\u5c11\u7684\u7ebf\u6bb5\u526a\u65ad\u6240\u6709\u7535\u7ebf\u3002\u4e0b\u56fe\u5c55\u793a\u4e86\u4e24\u79cd\u5177\u6709\u4e0d\u540c\u7535\u7ebf\u5206\u5e03\u7684\u95e8\uff08\u5bf9\u5e94\u4e8e\u4e24\u4e2a\u6837\u4f8b\uff09\u4ee5\u53ca\u6700\u5c11\u7684\u4e0e\u6240\u6709\u7535\u7ebf\u76f8\u4ea4\u7684\u7ebf\u6bb5\u3002\n\n![\u56fe](http://173.82.2.245/share/eh-1.png)\n\n#### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u4e09\u4e2a\u6574\u6570 $n, w, h$ \u5206\u522b\u8868\u793a\u7535\u7ebf\u7684\u6570\u91cf ($1 \\le n \\le 10^6$) \u4ee5\u53ca\u95e8\u7684\u5c3a\u5bf8 ($1 \\le w, h \\le 10^8$) \u3002\u63a5\u4e0b\u6765 $n$ \u884c\uff0c\u6bcf\u884c\u63cf\u8ff0\u4e00\u4e2a\u7535\u7ebf\u7684\u4f4d\u7f6e\u3002\u8fd9\u4e9b\u884c\u4e2d\u6bcf\u884c\u5305\u542b\u56db\u4e2a\u6574\u6570 $x_1, y_1, x_2, y_2$ ($0 \\le x_1, x_2 \\le w, 0 \\le y_1, y_2 \\le h$) \u8868\u793a\u8be5\u7535\u7ebf\u4ece $(x_1, y_1)$ \u8fde\u63a5\u5230 $(x_2, y_2)$ \u3002\u6bcf\u6839\u7535\u7ebf\u8fde\u63a5\u95e8\u7684\u4e0d\u540c\u7684\u4e24\u8fb9\u3002\u6ca1\u6709\u7535\u7ebf\u8fde\u63a5\u5230\u95e8\u7684\u56db\u4e2a\u89d2\u843d\u3002\u8f93\u5165\u7684\u6240\u6709\u4f4d\u7f6e\u90fd\u662f\u4e24\u4e24\u4e0d\u540c\u7684\u3002\n\n#### \u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u51fa\u6700\u5c11\u7684\u4e00\u7ec4\u7ebf\u6bb5\u4e0e\u6240\u6709\u7535\u7ebf\u6709\u4ea4\u3002\u9996\u5148\u7b2c\u4e00\u884c\u8f93\u51fa\u7ebf\u6bb5\u7684\u6570\u91cf\u3002\u7136\u540e\u9010\u884c\u8f93\u51fa\u7ebf\u6bb5\uff0c\u6bcf\u884c\u4ee5 $x_1$ $y_1$ $x_2$ $y_2$ \u7684\u683c\u5f0f\u7ed9\u51fa\u4e00\u4e2a\u4ece $(x_1, y_1)$ \u5230 $(x_2, y_2)$ \u7684\u7ebf\u6bb5\u3002\u6bcf\u6761\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u5fc5\u987b\u5728\u95e8\u7684\u4e0d\u540c\u7684\u4e24\u8fb9\u3002\u7ebf\u6bb5\u7684\u7aef\u70b9\u4e0e\u4efb\u4f55\u7535\u7ebf\u7aef\u70b9\u53ca\u95e8\u7684\u56db\u4e2a\u89d2\u843d\u7684\u8ddd\u79bb\u4e0d\u80fd\u5c0f\u4e8e $10^{-6}$ \u3002\n\n\u7ebf\u6bb5\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u8f93\u51fa\u3002\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u4e5f\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u8f93\u51fa\u3002\u5982\u679c\u6709\u591a\u79cd\u53ef\u884c\u7684\u89e3\uff0c\u8f93\u51fa\u4efb\u610f\u4e00\u7ec4\u89e3\u5373\u53ef\u3002\n\n\u8bd1\u8005\u6ce8\uff1a\u7ebf\u6bb5\u7684\u7aef\u70b9\u5750\u6807\u53ef\u4ee5\u662f\u6ee1\u8db3\u9650\u5236\u7684\u4efb\u610f**\u5b9e\u6570**\u3002\n"
}