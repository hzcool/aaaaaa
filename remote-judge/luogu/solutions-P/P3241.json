[
    {
        "content": "\u8fd9\u91cc\u662f\u5e38\u6570\u6781\u5927\u7684\u52a8\u6001\u70b9\u5206\u6cbb\u9898\u89e3\n\n\u7531\u4e8e\u81ea\u5df1\u4e3b\u5e2d\u6811\u4e0d\u4f1a\u538b\u7f29\u7248\u672c\u5bfc\u81f4\u4e86\u5c34\u5c2c\u7684mle\uff0c\u7136\u540e\u5c31\u6eda\u8fc7\u53bb\u5199\u70b9\u5206\u6811\u4e86\n\n## \u524d\u7f6e\u829d\u58eb\uff1a\u52a8\u6001\u70b9\u5206\u6cbb(\u70b9\u5206\u6811)\n\n\u6240\u8c13\u52a8\u6001\u70b9\u5206\u6cbb\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u9759\u6001\u7684\u4e0d\u80fd\u518d\u9759\u6001\u7684\u6570\u636e\u7ed3\u6784\u2014\u2014\u70b9\u5206\u6811\uff0c\u751a\u81f3\u8fde\u6570\u636e\u7ed3\u6784\u90fd\u7b97\u4e0d\u4e0a\uff0c\u53ea\u80fd\u8bf4\u662f\u4e00\u4e2alog\u7ea7\u522b\u7684\u9ad8\u7ea7\u66b4\u529b\uff0c\u4e3a\u4e86\u907f\u514d\u8bef\u4f1a\uff0c\u4ee5\u4e0b\u79f0\u201c\u52a8\u6001\u70b9\u5206\u6cbb\u201d\u8fd9\u4e2a\u7b97\u6cd5\u4e3a\u201c\u70b9\u5206\u6811\u201d\n\n\u5728\u5b66\u4e60\u52a8\u6001\u70b9\u5206\u6cbb\u4e4b\u524d\uff0c\u8bf7\u5148\u51fa\u95e8\u5de6\u8f6c\u4f60\u7ad9\u6a21\u677f\u533aAC\u70b9\u5206\u6cbb\u7684\u6a21\u677f\n\n\u4f60\u4f1a\u53d1\u73b0\u6240\u8c13\u70b9\u5206\u6cbb\u4e0d\u8fc7\u662f\u63a7\u5236\u4e86\u4e0bO(nlogn)\u66b4\u529b\u7684\u6b21\u6570\u800c\u5df2\uff0c\u6211\u4eec\u505a\u4e86log\u6b21O(nlogn)\u7684\u66b4\u529b\uff0c\u4e8e\u662f\u5c31\u5f97\u5230\u4e86O(nlog^2n)\u7684\u70b9\u5206\u6cbb\uff0c\u800c\u70b9\u5206\u6811\u5176\u5b9e\u548c\u70b9\u5206\u6cbb\u7684\u5173\u7cfb\u4e0d\u662f\u7279\u522b\u5bc6\u5207\u4e86\uff0c\u4e8c\u8005\u552f\u4e00\u7684\u8054\u7cfb\u5c31\u662f\u70b9\u5206\u6811\u901a\u8fc7\u70b9\u5206\u6cbb\u7684\u51fd\u6570\u6765\u5efa\u6811\u800c\u5df2\u2026\u2026\n\n\u70b9\u5206\u6811\u7684\u60f3\u6cd5\u662f\u8fd9\u6837\u7684\uff0c\u6709\u7684\u95ee\u9898\u6211\u4eec\u4e0d\u662f\u975e\u5e38\u5173\u5fc3\u6811\u7684\u5f62\u6001\u7279\u70b9\uff0c\u6bd4\u5982\u8def\u5f84\u95ee\u9898\uff0c\u8054\u901a\u5757\u95ee\u9898\uff0c\u5bfb\u627e\u5173\u952e\u70b9\u95ee\u9898\u7b49\u7b49\uff0c\u4ee5\u8def\u5f84\u95ee\u9898\u4e3a\u4f8b\uff0c\u6211\u4eec\u4e0d\u4e00\u5b9a\u975e\u5f97\u67e5\u5230p,q\u7684lca\u624d\u53ef\u4ee5\u5904\u7406p\uff0cq\u7684\u8def\u5f84\u4fe1\u606f\uff0c\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u968f\u4fbf\u4ece\u8fd9\u4e2a\u8def\u5f84\u4e0a\u5bfb\u627e\u4e00\u4e2a\u5206\u5272\u70b9G,\u53ea\u8981\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u7684\u5904\u7406p\u5230G\u548cq\u5230G\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u6709\u4e9b\u65f6\u5019\u5c31\u53ef\u4ee5\u5904\u7406p\u5230q\u7684\u4fe1\u606f\n\n\u6240\u4ee5\u70b9\u5206\u6811\u4e8b\u5b9e\u4e0a\u662f\u5bf9\u539f\u6811\u505a\u4e86\u4e00\u79cd\u626d\u66f2\u7684\u6620\u5c04\uff0c\u4f7f\u5f97\u6620\u5c04\u4e4b\u540e\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\n\n1.\u539f\u6811\u4e0a\u4efb\u610f\u4e24\u70b9p,q\u5728\u70b9\u5206\u6811\u4e0a\u7684lca\u4e00\u5b9a\u5728p\u5230q\u7684\u8def\u5f84\u4e0a\n\n2.\u70b9\u5206\u6811\u7684\u6811\u9ad8\u662fO(logn)\u7684\n\n\u56e0\u6b64\u70b9\u5206\u6811\u5141\u8bb8\u6211\u4eec\u8fdb\u884c\u4e0b\u9762\u4e24\u4e2a\u5728\u4e00\u822c\u6811\u4e0a\u6839\u672c\u4e0d\u53ef\u80fd\u505a\u5230\u7684\u66b4\u529b\n\n1.\u66b4\u529b\u8df3father\u83b7\u5f97\u67d0\u4e00\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\n\n2.\u5728\u6bcf\u4e00\u4e2a\u70b9\u91cc\u5f00\u4e00\u4e2avector\uff0c\u5b58\u50a8\u5b83\u7684\u5b69\u5b50\u7684\u6240\u6709\u4fe1\u606f\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\n\n## $O(\\sum size)=O(\\sum dep)=O(nlogn)$\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u70b9\u5206\u6811\u4e0a\u5f00\u5fc3\u7684\u4f7f\u7528\u66b4\u529b\u4e86~\n\n## \u70b9\u5206\u6811\u7684\u6784\u5efa\n\n\u9996\u5148\u6211\u4eec\u6839\u636e\u70b9\u5206\u6cbb\u7684\u8fc7\u7a0b\uff1a\u627e\u5230\u5f53\u524d\u8fde\u901a\u5757\u7684\u91cd\u5fc3\uff0c\u5220\u53bb\u91cd\u5fc3\uff0c\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u9012\u5f52\u5b50\u8fc7\u7a0b\u8fd9\u4e2a\u7ecf\u5178\u7b97\u6cd5\u6765\u5bf9\u6574\u68f5\u6811\u505a\u5256\u5206\uff0c\u6211\u4eec\u5220\u53bb\u91cd\u5fc3g\u4e4b\u540e\uff0c\u4eceg\u5411\u5404\u4e2a\u5b50\u8054\u901a\u7684\u91cd\u5fc3\u8fde\u8fb9\uff0c\u8fd9\u6837\u5c31\u6784\u6210\u4e86\u4e00\u9897\u70b9\u5206\u6811\n\n\u53ef\u4ee5\u8bc1\u660e\u7684\u662f\uff0c\u4e24\u4e2a\u70b9\u5728\u70b9\u5206\u6811\u4e0a\u7684lca\u4e00\u5b9a\u5728\u539f\u6811\u4e0a\u8fd9\u4e24\u4e2a\u70b9\u7684\u8def\u5f84\u4e0a\uff0c\u4f46\u662f\uff0c\u70b9\u5206\u6811\u9664\u6b64\u4e4b\u5916\u548c\u539f\u6811\u7684\u5173\u7cfb\u5341\u5206\u7684\u5c0f\uff0c\u5c24\u5176\u662f\u70b9\u5206\u6811\u5177\u6709\u8fd9\u6837\u4e00\u6761\u6027\u8d28\uff0c\n\u4e00\u4e2a\u70b9\u5230\u5b83\u70b9\u5206\u6811\u7684\u5404\u4e2a\u7956\u5148\u7684\u8ddd\u79bb\u5f88\u53ef\u80fd\u6ca1\u6709\u4efb\u4f55\u6027\u8d28\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5e76\u4e0d\u80fd\u901a\u8fc7\u8df3\u70b9\u5206\u6811\u4e0a\u7684father\u7684\u5f62\u5f0f\u6765\u8bbf\u95ee\u4e00\u4e2a\u70b9\u5230\u70b9\u5206\u6811\u6839\u7684\u4fe1\u606f\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u65e0\u6cd5\u901a\u8fc7\u7d2f\u52a0\u5404\u4e2a\u8fb9\u4e0a\u8fb9\u6743\u7684\u65b9\u5f0f\u6765\u8ba1\u7b97\u70b9\u5230\u5b83\u7684\u70b9\u5206\u6811\u7956\u5148\u7684\u8ddd\u79bb\u7684\n\n\u56e0\u6b64\u6211\u4eec\u5b58\u50a8\u4e00\u4e2a\u70b9\u5206\u6811\u7684\u65b9\u5f0f\u662f\u5728\u4e00\u4e2a\u70b9\u5f00\u4e00\u4e2avector\u4e0a\u5b58\u50a8\u4ed6\u5230\u6bcf\u4e2a\u7956\u5148\u7684\u8ddd\u79bb\u4ee5\u53ca\u7956\u5148\u7684\u7f16\u53f7\uff0c\u8fd9\u6837\u6211\u4eec\u5728\u8bbf\u95ee\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u7956\u5148\u7684\u65f6\u5019\u53ea\u9700\u8981\u66b4\u529b\u7684\u626b\u4e00\u904d\u6574\u4e2avector\u5c31\u53ef\u4ee5\u83b7\u5f97\u6574\u4e2a\u8def\u5f84\u4e0a\u7684\u4fe1\u606f\u4e86\n\n\u53e6\u5916\u9664\u4e86\u81ea\u5e95\u5411\u4e0a\u7684\u8bbf\u95ee\u8fc7\u7a0b\uff0c\u6211\u4eec\u6709\u4e9b\u65f6\u5019\u8fd8\u9700\u8981\u5904\u7406\u4e00\u4e2a\u70b9\u548c\u5176\u4ed6\u5b50\u8fde\u901a\u5757\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u80fd\u9700\u8981\u5bf9\u4e8e\u6bcf\u4e2a\u91cd\u5fc3\u66b4\u529b\u5f00\u4e00\u4e2avector\u5904\u7406\u4ed6\u7684\u6240\u6709\u5b50\u8fde\u901a\u5757\u7684\u4fe1\u606f\u4e86\n\n\u603b\u4e4b\uff0c\u70b9\u5206\u6811\u7684\u7b97\u6cd5\u601d\u60f3\u5c31\u662f\u56e0\u4e3a\u53cd\u6b63\u6211\u662f$O(logn)$\u7684\u6811\u9ad8\uff0c\u56e0\u6b64\u6211\u53ef\u4ee5\u5f88\u591a\u65f6\u5019\u4f7f\u7528\u4e00\u4e9b\u5341\u5206\u66b4\u529b\u7684\u624b\u6bb5\uff0c\u6bcf\u4e2a\u70b9\u66b4\u529b\u8bb0\u7956\u5148\u548c\u5b69\u5b50\uff0c\u603b\u590d\u6742\u5ea6\u8fd8\u662f$O(nlogn)$\u7684\n\n## \u6240\u4ee5\uff0c\u70b9\u5206\u6811\u4e8b\u5b9e\u4e0a\u662f\u4e00\u4e2a\u7cbe\u5fc3\u8bbe\u8ba1\u8fc7\u7684\u66b4\u529b\n\n## \u672c\u9898\u9898\u89e3\n\n\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bb2\u6211\u4eec\u8fd8\u662f\u5148\u60f3\u4e00\u4e2a\u66b4\u529b\u7136\u540e\u628a\u5b83\u653e\u5230\u70b9\u5206\u6811\u4e0a\u53bb\u505a\u5c31\u53ef\u4ee5\u4e86\n\n\u6211\u4eec\u4eff\u7167\u4e00\u822c\u6811\u4e0a\u8be2\u95ee\u4e00\u4e2a\u70b9\u5230\u5176\u4ed6\u6240\u6709\u70b9\u8ddd\u79bb\u7684\u65b9\u5f0f(\u5f53\u7136\u4f1a\u6709\u4e00\u4e2a\u975e\u5e38\u4f18\u7f8e\u7684\u6811\u5256\u7b97\u6cd5\uff0c\u8fd9\u4e2a\u6682\u4e14\u4e0d\u8c08)\uff0c\u6211\u4eec\u5bf9\u6574\u68f5\u6811\u5efa\u4e00\u4e2a\u70b9\u5206\u6811\uff0c\u7136\u540e\u6bcf\u4e2a\u8282\u70b9\u4f7f\u7528vector\u8bb0\u5f55\u4ed6\u5230\u5404\u4e2a\u7956\u5148\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u8981\u6c42\u8fd9\u4e2a\u548c\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb\u4e86\n\n\u6211\u4eec\u60f3\u4e00\u4e0b\u4e00\u822c\u60c5\u51b5\u4e0blca\u6cd5\u6c42\u6811\u4e0a\u8ddd\u79bb\u7684\u65b9\u6848\uff0c\u4e8b\u5b9e\u4e0a\u6211\u4eec\u662f\u901a\u8fc7lca\u8fd9\u4e2a\u201c\u5206\u5272\u70b9\u201d\u5c06\u6811\u4e0a\u7684\u8def\u5f84\u5206\u6210\u4e86\u4e24\u4e2a\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u5904\u7406\u7684\u90e8\u5206\uff0c\u5373\u6811\u4e0a\u6df1\u5ea6\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0alca\u9664\u4e86\u8fd9\u4e2a\u7528\u9014\u4e4b\u5916\u5b83\u7684\u610f\u4e49\u4e0d\u662f\u5f88\u5927\n\n\u6362\u53e5\u8bdd\u6765\u8bb2\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u4f7f\u7528lca\u4f5c\u4e3a\u5206\u5272\u70b9\uff0c\u800c\u662f\u4f7f\u7528\u4e00\u4e9b\u522b\u7684\u70b9\u4f5c\u4e3a\u5206\u5272\u70b9\uff0c\u524d\u63d0\u662f\u6211\u4eec\u5fc5\u987b\u4fdd\u8bc1\u5206\u6210\u7684\u4e24\u90e8\u5206\u8def\u5f84\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u5904\u7406\uff0c\u90a3\u4e48\u6211\u4eec\u60f3\u5230\u4e86\u4e24\u4e2a\u70b9\u5206\u6570\u4e0a\u7684lca\uff0c\u70b9\u5206\u6811\u4e0a\u7684lca\u4e00\u5b9a\u5728\u8fd9\u4e24\u4e2a\u70b9\u7684\u8def\u5f84\u4e0a\uff0c\u800c\u4e24\u4e2a\u70b9\u5230\u70b9\u5206\u6811\u7956\u5148\u7684\u8ddd\u79bb\u53c8\u53ef\u4ee5\u5feb\u901f\u5904\u7406\uff0c\u56e0\u6b64\u6211\u4eec\u8ba4\u4e3a\u70b9\u5206\u6811\u4e0a\u7684lca\u662f\u4e00\u4e2a\u4f18\u79c0\u7684\u5206\u5272\u70b9\n\n\u90a3\u4e48\u4eff\u7167\u4e00\u822c\u60c5\u51b5\u4e0b\u6211\u4eec\u5728\u6811\u4e0a\u6c42\u70b9p\u5230\u6240\u6709\u70b9\u7684\u8ddd\u79bb\u7684\u7b97\u6cd5:\u679a\u4e3elca\u7136\u540e\u4f9d\u6b21\u7b97\u8d21\u732e\uff0c\u8fd9\u9700\u8981\u4e00\u4e2a\u4e00\u4e2a\u7684\u8df3\u94fe\uff0c\u6700\u574f\u590d\u6742\u5ea6$O(n)$\uff0c\u7136\u540e\u6211\u4eec\u5982\u679c\u628a\u679a\u4e3elca\u6362\u6210\u679a\u4e3e\u70b9\u5206\u6811\u7684lca\uff0c\u590d\u6742\u5ea6\u5c31\u6210\u4e86$O(logn)$\u7684\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u6211\u4eec\u9700\u8981\u9884\u5904\u7406\u4ec0\u4e48\u4fe1\u606f\u5462\uff1f\uff0c\u9996\u5148\u6bcf\u4e2a\u70b9\u5f00\u4e00\u4e2avector\u5b58\u50a8\u8fd9\u4e2a\u70b9\u7684\u6240\u6709\u7956\u5148\u548c\u5230\u6240\u6709\u7956\u5148\u7684\u8ddd\u79bb\uff0c\u56e0\u4e3a\u524d\u9762\u8bf4\u8fc7\u70b9\u5206\u6811\u4e0a\u8ddd\u79bb\u5e76\u4e0d\u5177\u6709\u9012\u63a8\u6027\u8d28\uff0c\u6240\u4ee5\u53ea\u80fd\u66b4\u529b\u7684\u5b58\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u5f00\u53e6\u5916\u4e00\u4e2avector\u5b58\u50a8\u6240\u6709\u7684\u5b50\u8054\u901a\u5757\u4ee5\u53ca\u5b50\u8054\u901a\u5757\u4e2d\u7684\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\u4e4b\u548c\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u5904\u7406\u51fa\u4e86\u8fc7\u8fd9\u4e2a\u70b9\u7684\u4e24\u8fb9\u8def\u5f84\u4fe1\u606f\u4e86\n\n\u597d\u4e86\u6211\u4eec\u73b0\u5728\u8981\u8be2\u95ee\u70b9p\u5230\u6811\u4e0a\u6240\u6709\u70b9\u7684\u8ddd\u79bb\u4e4b\u548c\u4e86\uff0c\u8ba9\u6211\u4eec\u6765\u7b80\u5355\u7684\u63cf\u8ff0\u4e0b\u7b97\u6cd5\u6d41\u7a0b\n\n1.\u4f7f\u7528\u70b9\u5206\u6cbb\u7b97\u6cd5\u5904\u7406\u51fa\u70b9\u5206\u6811\uff0c\u7136\u540e\u4f7f\u7528vector\u5b58\u50a8\u4e0b\u521a\u624d\u7684\u4fe1\u606f\n\n2.\u66b4\u529b\u7684\u626b\u4e00\u904d\u70b9p\u7684\u7956\u5148vector\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7956\u5148g\uff0c\u7b54\u6848+=p\u5230g\u7684\u8ddd\u79bb+p\u5230g\u7684\u8ddd\u79bb\u00d7g\u7684\u4e0d\u5305\u542bp\u7684\u5b50\u8054\u901a\u5757siz\u548c+g\u7684\u4e0d\u5305\u542bp\u7684\u5b50\u8054\u901a\u5757\u4e2d\u7684\u70b9\u5230g\u7684\u8ddd\u79bb\u4e4b\u548c\n\u5982\u679c\u4e0d\u7406\u89e3\u7684\u8bdd\u53ef\u4ee5\u81ea\u5df1\u753b\u4e2a\u56fe\u4e86\u89e3\u4e00\u4e0b\n\n\u597d\u4e86\u6211\u4eec\u53d1\u73b0\u521a\u624d\u7b97\u6cd5\u7684\u5173\u952e\u5728\u4e8e\u5982\u4f55\u6c42\u51fa\u201cg\u7684\u4e0d\u5305\u542bp\u7684\u5b50\u8054\u901a\u5757siz\u548c\u201d\u4ee5\u53ca\u201cg\u7684\u4e0d\u5305\u542bp\u7684\u5b50\u8054\u901a\u5757\u4e2d\u7684\u70b9\u5230g\u7684\u8ddd\u79bb\u4e4b\u548c\u201d\u8fd9\u4e24\u4e2a\u4fe1\u606f\n\n\u65b9\u6cd51\uff0c\u53ef\u4ee5\u5b58\u50a8\u548c\uff0c\u7136\u540e\u51cf\u53bbp\u7684\u4fe1\u606f\uff0c(\u8fd9\u91cc\u52a1\u5fc5\u6ce8\u610f\u4e0d\u80fd\u7528g\u7684\u548c\u51cf\u53bbp\u7684\u548c\uff0c\u4ed4\u7ec6\u56de\u60f3\u4e00\u4e0b\u4f1a\u53d1\u73b0\u70b9\u5206\u6811\u7684\u7236\u5b50\u5173\u7cfb\u5176\u5b9e\u5f88\u5f31\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a\u4fe1\u606f\u6839\u672c\u6ca1\u6709\u5173\u7cfb\u4e5f\u4e0d\u80fd\u51cf\uff0c\u5fc5\u987b\u5728g\u4e0b\u5355\u72ec\u5b58\u50a8\u6bcf\u4e00\u4e2a\u5b50\u8054\u901a\u5757\u5230g\u7684\u4fe1\u606f)\n\n\u65b9\u6cd52\uff0c\u5982\u679c\u70b9\u5ea6\u6570\u5f88\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u626b\u4e00\u904dg\u7684\u5b69\u5b50vector\uff0c\u7136\u540e\u8df3\u8fc7\u542bp\u7684\u5b50\u8054\u901a\u5757\u5373\u53ef\uff0c\u6ce8\u610f\u5982\u679c\u70b9\u7684\u5ea6\u6570\u572820\u5de6\u53f3\uff0c\u4f60\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u5f88\u53ef\u80fd\u548c\u4e24\u4e2alog\u6ca1\u5565\u533a\u522b\n_____________________\n\n\u597d\u4e86\u6211\u4eec\u73b0\u5728\u552f\u4e00\u8981\u505a\u7684\u5c31\u662f\u7ed9\u521a\u624d\u7684\u505a\u6cd5\u52a0\u4e0a\u70b9\u6743\u9650\u5236\uff0c\u6bcf\u4e2a\u70b9\u66b4\u529b\u8bb0\u5f55\u5230\u7956\u5148\u7684\u8ddd\u79bb\u5f53\u7136\u662f\u7701\u4e0d\u4e86\u7684\uff0c\u4f46\u662f\u6211\u4eec\u8be5\u5982\u4f55\u5904\u7406g\u7684\u5b50\u8054\u901a\u5757\u4fe1\u606f\u5462\uff1f\n\n\u5f53\u7136\u4f60\u53ef\u4ee5\u628avector\u6362\u6210\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u914d\u5408\u52a8\u6001\u5f00\u70b9\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u8fd8\u662f\u53ef\u4ee5\u63a7\u5236\u5728\u4e00\u4e2alog\u4e0a\uff0c\u4f46\u662f\u53c8\u6ca1\u6709\u4fee\u6539\u5e72\u561b\u5f00\u7ebf\u6bb5\u6811\u5462\uff1f\u4e0d\u5acc\u70e6\u5417\uff1f\n\n\u6240\u4ee5\u6211\u4eec\u91c7\u53d6\u4e00\u4e9b\u66f4\u52a0\u66b4\u529b\u7684\u624b\u6bb5\uff0c\u6211\u4eec\u6bcf\u4e2a\u70b9\u4e0a\u5f003\u4e2avector\uff0c\u6bcf\u4e2avector\u5b58\u50a8\u8fd9\u4e2a\u5b50\u8054\u901a\u5757\u91cc\u7684\u6240\u6709\u70b9\u7684\u70b9\u6743\u548c\u6df1\u5ea6\uff0c\u51b7\u9759\u5206\u6790\u4e00\u6ce2\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u770b\u4f3c\u66b4\u529b\u7684\u505a\u6cd5\u7a7a\u95f4\u590d\u6742\u5ea6\u53ea\u6709$O(nlogn)$\n\n\u7136\u540e\u628a\u6bcf\u4e2avector\u6309\u70b9\u6743\u6392\u5e8f\u4e4b\u540e\u5904\u7406siz\u7684\u540e\u7f00\u548c\u548cdep\u7684\u540e\u7f00\u548c\uff0c\u5728\u6267\u884c\u521a\u624d\u7b97\u6cd5\u7684\u65f6\u5019\u6bcf\u679a\u4e3e\u4e00\u4e2a\u7956\u5148g\u5c31\u5904\u7406\u4e00\u4e0b\u5b83\u76843\u4e2avector\uff0c\u4e0d\u7b97p\u7684\u90a3\u4e2avector\uff0c\u7136\u540e\u6211\u4eec\u5728\u8fd9\u4e2avector\u4e0a\u4e8c\u5206\u51fa\u6240\u6709\u5408\u6cd5\u7684\u70b9\u7684\u533a\u95f4\uff0c\u7136\u540e\u4e24\u4e2a\u540e\u7f00\u548c\u76f4\u63a5\u76f8\u51cf\u5c31\u53ef\u4ee5\u5f97\u51fa\u4e0d\u542bp\u4e14\u503c\u57df\u7b26\u5408\u8981\u6c42\u7684\u70b9\u7684siz\u4ee5\u53ca\u4e0d\u542bp\u4e14\u503c\u57df\u7b26\u5408\u8981\u6c42\u7684\u70b9\u7684dep\u4e4b\u548c\u4e86\n\n\u53e6\u5916\u4e3a\u4ec0\u4e48\u662f\u540e\u7f00\u548c\u800c\u4e0d\u662f\u524d\u7f00\u548c\uff1f\uff0c\u4f60\u4f1a\u53d1\u73b0\u524d\u7f00\u548c\u652f\u6301\u7684\u662f\u5de6\u5f00\u53f3\u95ed\u533a\u95f4\uff0c\u4f46\u662f\u6211\u4eec\u4f7f\u7528upper\\_bound\u548clower\\_bound\u4e8c\u5206\u51fa\u8fd9\u5de6\u5f00\u53f3\u95ed\u7684\u533a\u95f4\u662f\u5341\u5206\u56f0\u96be\u7684(\u9700\u8981\u52a0\u4e00\u51cf\u4e00\u4e4b\u7c7b\u7684\u8fd8\u5f97\u5c0f\u5fc3\u8fed\u4ee3\u5668\u5931\u6548)\uff0c\u76f8\u6bd4\u4e4b\u4e0b\u6211\u4eec\u4e8c\u5206\u51fa\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\u4f1a\u5bb9\u6613\u8bb8\u591a\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u4f7f\u7528\u540e\u7f00\u548c\u4e86\n\n\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u5176\u5b9e\u70b9\u5206\u6cbb\u8fd8\u662f\u76f8\u5f53\u5c0f\u6e05\u65b0\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee3\u7801\u96be\u5ea6\u76f8\u5bf9\u6811\u5256+\u4e3b\u5e2d\u6811\u7684\u505a\u6cd5\u4e5f\u4f1a\u5c0f\u5f88\u591a\u2026\u2026\u6bd4\u5982\u8fd9\u9898\u6211\u5927\u6982\u624d\u5199\u4e8670\u884c\n\n\u4e0a\u4ee3\u7801~\n\n```C\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<algorithm>\n#include<vector>\nusing namespace std;const int N=15*1e4+10;typedef long long ll;\nint v[2*N];int x[2*N];int ct;int al[N];int val[2*N];bool book[N];bool cut[N];\nint siz[N];int w[N];ll dep[N];int tot;int nrt;int miv;ll res;int n;int m;ll A;\nstruct data//\u5b58\u50a8\u8282\u70b9\u4fe1\u606f\u7684vector\n{\n    int val;ll ss;ll sv;\n    friend bool operator <(data a,data b){return a.val<b.val;}\n};vector <data> ans[N][3];\nstruct ed{int f;ll dis;int tp;};vector <ed> fa[N];//\u5b58\u50a8\u5230\u7956\u5148\u8ddd\u79bb\u7684vector\ninline void add(int u,int V,int va){v[++ct]=V;x[ct]=al[u];al[u]=ct;val[ct]=va;}\nvoid dfs1(int u)//\u5bfb\u627esiz\n{\n    book[u]=true;siz[u]=1;\n    for(int i=al[u];i;i=x[i]){if(!book[v[i]]&&!cut[v[i]]){dfs1(v[i]);siz[u]+=siz[v[i]];}}\n    book[u]=false;\n}\nvoid dfs2(int u)//\u5bfb\u627e\u4e2d\u5fc3\n{\n    book[u]=true;int mav=tot-siz[u];\n    for(int i=al[u];i;i=x[i]){if(!book[v[i]]&&!cut[v[i]]){dfs2(v[i]);mav=max(mav,siz[v[i]]);}}\n    book[u]=false;if(miv>mav){miv=mav;nrt=u;}\n}\nvoid dfs3(int u,const int& g,const int& t)//\u5904\u7406\u6df1\u5ea6\n{\n    book[u]=true;fa[u].push_back((ed){g,dep[u],t});\n    ans[g][t].push_back((data){w[u],1,dep[u]});\n    for(int i=al[u];i;i=x[i]){if(!book[v[i]]&&!cut[v[i]]){dep[v[i]]=dep[u]+val[i];dfs3(v[i],g,t);}}\n    book[u]=false;\n}\nvoid solve(int u)//\u70b9\u5206\u6cbb\u6784\u5efa\u70b9\u5206\u6811\n{\n    dfs1(u);if(siz[u]==1){cut[u]=true;fa[u].push_back((ed){u,0,-1});return;}//\u8fb9\u754c\u6761\u4ef6\n    tot=siz[u];miv=0x3f3f3f3f;dfs2(u);cut[nrt]=true;fa[nrt].push_back((ed){nrt,0,-1});\n    for(int i=al[nrt],t=0;i;i=x[i])\n    {\n        if(cut[v[i]]){continue;}\n        dep[v[i]]=val[i];dfs3(v[i],nrt,t);//\u9884\u5904\u7406vector\n        ans[nrt][t].push_back((data){0x3f3f3f3f,0,0});\n        sort(ans[nrt][t].begin(),ans[nrt][t].end());//\u6309\u70b9\u6743sort\n        for(int j=ans[nrt][t].size()-2;j>=0;j--)\n        {\n            ans[nrt][t][j].ss+=ans[nrt][t][j+1].ss;//\u5904\u7406\u540e\u7f00\u548c\n            ans[nrt][t][j].sv+=ans[nrt][t][j+1].sv;\n        }t++;\n    }for(int i=al[nrt];i;i=x[i]){if(!cut[v[i]]){solve(v[i]);}}//\u9012\u5f52\u70b9\u5206\u6cbb\n}\ninline void query(int l,int r,int u)//\u66b4\u529b\u8df3\u94fe\uff0c\u4e8c\u5206\u51fa\u7b54\u6848\n{\n    res=0;vector <data>:: iterator L;vector <data>:: iterator R;\n    for(int i=fa[u].size()-1;i>=0;i--)\n    {\n        int f=fa[u][i].f;\n        for(int tp=0;tp<=2;tp++)\n        {\n            if(tp==fa[u][i].tp||ans[f][tp].empty()){continue;}\n            L=lower_bound(ans[f][tp].begin(),ans[f][tp].end(),(data){l,0,0});//\u4f7f\u7528upper\u548clower_bound\u53ef\u4ee5\u8f7b\u6613\u7684\u4e8c\u5206\u51fa\u4e00\u4e2a\u5de6\u95ed\u53f3\u5f00\u7684\u8fb9\u754c\n            R=upper_bound(ans[f][tp].begin(),ans[f][tp].end(),(data){r,0,0});\n            res+=fa[u][i].dis*(L->ss-R->ss)+L->sv-R->sv;//\u5904\u7406\u8fd9\u4e2a\u91cd\u5fc3\u7684\u8d21\u732e\n        }if(l<=w[f]&&w[f]<=r){res+=fa[u][i].dis;}//\u7279\u5224\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u5230\u4e2d\u5fc3\u7684\u8ddd\u79bb\n    }\n}\nint main()\n{\n    scanf(\"%d%d%lld\",&n,&m,&A);\n    for(int i=1;i<=n;i++){scanf(\"%d\",&w[i]);}\n    for(int i=1,u,v,c;i<n;i++){scanf(\"%d%d%d\",&u,&v,&c);add(u,v,c);add(v,u,c);}\n    solve(1);//\u70b9\u5206\u6cbb\n    for(int i=1;i<=m;i++)\n    {\n        int u;ll l;ll r;scanf(\"%d%lld%lld\",&u,&l,&r);\n        (l+=res)%=A;(r+=res)%=A;if(l>r)swap(l,r);\n        query(l,r,u);printf(\"%lld\\n\",res);//\u5904\u7406\u7b54\u6848\n    }return 0;//\u62dc\u62dc\u7a0b\u5e8f~\n}\n\n```\n\n\n",
        "postTime": 1525355987,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3241 \u3010[HNOI2015]\u5f00\u5e97\u3011"
    },
    {
        "content": "### \u70b9\u5206\u6811\u5c0f\u7ed3\n\n\u70b9\u5206\u6811\u7684\u9898\u5176\u5b9e\u5c31\u662f\u628a\u70b9\u5206\u6cbb\u7684\u8be2\u95ee\u70b9\u6362\u6210\u67d0\u51e0\u4e2a\u70b9\uff0c\u8be2\u95ee\u6362\u6210\u591a\u7ec4\uff0c\u6709\u65f6\u8fd8\u4f1a\u5e26\u4fee\u6539\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u6bcf\u6b21\u5982\u679c\u505a\u70b9\u5206\u6cbb\uff0c\u627e\u91cd\u5fc3\u7684\u8fc7\u7a0b\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u5904\u7406\u51fa\u6240\u6709\u7684\u91cd\u5fc3\uff0c\u5c06\u5176\u5206\u6210\u4e0d\u540c\u7684\u5c42\u6570\uff0c\u5c06\u6240\u6709\u91cd\u5fc3\u9010\u5c42\u8fde\u8d77\u6765\uff0c\u907f\u514d\u91cd\u590d\u627e\u91cd\u5fc3\uff0c\u4ece\u800c\u8fdb\u884c\u4fee\u6539\u4fe1\u606f\u6216\u56de\u7b54\u591a\u7ec4\u8be2\u95ee\n\n\u4e24\u4e2a\u5173\u952e\u7684\u6027\u8d28\uff1a\n\n+ \u70b9\u5206\u6811\u6700\u5927\u6df1\u5ea6\u662f$log$\u7ea7\u522b\u7684\n\n+ \u70b9\u5206\u6811\u4e0a\u4e24\u70b9\u7684$lca$\u5728\u539f\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e24\u4e2a\u5f3a\u529b\u7684\u6027\u8d28\uff0c\u5728\u70b9\u5206\u6811\u4e0a\u7528\u6bd4\u8f83\u66b4\u529b\u7684\u65b9\u6cd5\u89e3\u51b3\u8def\u5f84\u7edf\u8ba1\u95ee\u9898\u3002\n\n### \u5bf9\u4e8e\u8fd9\u9053\u9898\n\n+ \u9996\u5148\u5047\u8bbe\u6ca1\u6709$l,r$\u7684\u9650\u5236\uff0c\u8be2\u95ee\u67d0\u4e2a\u70b9\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u8ddd\u79bb\u4e4b\u548c\uff0c\u6211\u4eec\u7528\u70b9\u5206\u6811\u53bb\u505a\u8be5\u5982\u4f55\u505a\u3002\n\n\u4fbf\u4e8e\u7406\u89e3\uff0c\u8bbe\u4e09\u4e2a\u6570\u7ec4\n\n$sum[0][x]$\u8868\u793a\u70b9\u5206\u6811\u4e0a$x$\u5b50\u6811\u7684\u6240\u6709\u70b9\u5230**x**\u7684\u8ddd\u79bb\u548c\n\n$sum[1][x]$\u8868\u793a\u70b9\u5206\u6811\u4e0a$x$\u5b50\u6811\u7684\u6240\u6709\u70b9\u5230**x\u70b9\u5206\u6811\u4e0a\u7236\u4eb2**\u7684\u8ddd\u79bb\u548c\n\n$siz[x]$\u8868\u793a\u70b9\u5206\u6811\u4e0a$x$\u5b50\u6811\u5927\u5c0f\n\n\u663e\u7136\u5bf9\u4e8e\u8be2\u95ee\u7684\u70b9$x$\uff0c\u6211\u4eec\u8df3\u70b9\u5206\u6811\u4e0a\u7684\u7236\u4eb2\u5373\u53ef\uff0c\u521d\u59cb\u65f6$ans$\u8bbe\u4e3a$sum[0][x]$\uff0c\u4e5f\u5c31\u662f\u70b9\u5206\u6811$x$\u5b50\u6811\u4e0b\u65b9\u7684\u8d21\u732e\u548c\n\n\u8df3\u70b9\u5206\u6811\u7236\u4eb2\u65f6\uff0c\u5f53\u524d\u8df3\u5230\u70b9$now$\uff08\u70b9$now$\u8981\u6709\u7236\u4eb2\uff09\uff0c$ans += sum[0][fa[now]] - sum[1][now] + (siz[fa[now]] - siz[now]) * Dis(x, fa[now])$\n\n\u8fd9\u662f\u5728\u8df3\u7684\u8fc7\u7a0b\u4e2d\u52a0\u4e0a$x$\u4e0a\u65b9\u7684\u8d21\u732e\u3002\n\n$sum[0][fa[now]] - sum[1][now]$\u662f$fa$\u7684\u9664\u6389$now$\u7684\u5b50\u6811\u7684\u70b9\u5230$fa$\u7684\u8ddd\u79bb\u548c\uff0c\u7136\u800c\u8fd9\u4e9b\u8d21\u732e\u8fd8\u5c11\u4e00\u6bb5\uff0c\u5c31\u662f$fa$\u5230$x$\u4e4b\u95f4\u7684\u4e00\u6bb5\uff0c\u6240\u4ee5\u8981\u52a0\u4e0a\u540e\u9762\u7684\u90a3\u90e8\u5206\u3002\n\n\u89e3\u91ca\u4e00\u4e0b\u90a3\u4e24\u4e2a\u51cf\u6cd5\uff0c\u5176\u5b9e\u90fd\u662f\u9664\u6389\u5df2\u7ecf\u5904\u7406\u8fc7\u7684\u5b50\u6811\uff0c$siz$\u53ef\u4ee5\u505a\u51cf\u6cd5\u51cf\u53bb\u91cd\u590d\u8ba1\u7b97\u7684\uff0c\u6bd4\u8f83\u7b80\u5355\uff0c\u6ce8\u610f$sum$\u9700\u8981\u5f00\u4e24\u4e2a\u6570\u7ec4\uff0c$sum[0][fa[now]] - sum[1][now]$\u4e0d\u80fd\u5199\u6210$sum[0][fa[now]] - sum[0][now]$\uff0c\u5176\u5b9e\u633a\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u5bf9\u8c61\u4e0d\u540c\uff0c\u7b2c\u4e00\u79cd\u5199\u6cd5\u7684\u4e24\u4e2a\u6570\u7ec4\u5168\u662f\u5230$fa$\u7684\u8ddd\u79bb\u548c\uff0c\u800c\u7b2c\u4e8c\u79cd\u5199\u6cd5\u662f\u5230$fa$\u548c\u5230$now$\u7684\u8ddd\u79bb\u548c\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u53bb\u91cd\n\n+ \u73b0\u5728\u6709\u4e86$l,r$\u7684\u9650\u5236\n\n\u5176\u5b9e\u5c31\u662f\u518d\u52a0\u4e00\u7ef4\uff08\u5b58\u6210$vector$\uff09\uff0c\u5b58\u4e0a\u5b50\u6811\u4e2d\u5404\u70b9\u7684\u4fe1\u606f\u5c31\u597d\u4e86\uff0c\u6309\u7167\u5e74\u9f84\u6392\u5e8f\uff0c\u8ddd\u79bb\u505a\u4e2a\u524d\u7f00\u548c\uff0c\u7136\u540e\u8be2\u95ee$l,r$\u4e5f\u5c31\u76f8\u5f53\u4e8e$[0,r] - [0,l-1]$\uff0c\u4e8c\u5206\u51fa$vector$\u4e2d$l-1,r$\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\u56e0\u4e3a\u70b9\u5206\u6811\u6bcf\u5c42\u8282\u70b9\u7684$vector$\u5143\u7d20\u603b\u548c\u662f$n$\uff0c\u5171$log$\u5c42\uff0c\u6240\u4ee5\u7a7a\u95f4$nlogn$\uff0c\u53ef\u4ee5\u63a5\u53d7\n\n\u7136\u540e\u8fd8\u6709\u4e2a\u5c0f\u4f18\u5316\uff0c$siz$\u5176\u5b9e\u4e0d\u7528\u5355\u72ec\u5b58\u4e2a$vector$\uff0c\u7528\u4e8c\u5206\u540e$sum$\u7684$vector$\u7684\u4e0b\u6807\u4e4b\u5dee\u5c31\u80fd\u7b97\u51fa$siz$\uff0c\u53e6\u5916\u6211\u70b9\u5206\u6811\u4e00\u76f4\u5199\u6811\u5256$lca$\uff0c\u611f\u89c9\u6bd4$ST$\u8868\u9884\u5904\u7406\u8981\u5feb\u4e00\u70b9\n\n+ \u603b\u7ed3\uff1a\u5176\u5b9e\u6700\u4e3b\u8981\u7684\u5c31\u662f\u90a3\u4e2a\u5f0f\u5b50\uff0c\u521d\u59cb$ans = sum[0][x]$, \u70b9\u5206\u6811\u8df3\u7236\u4eb2\u65f6\uff0c$ans += sum[0][fa[now]] - sum[1][now] + (siz[fa[now]] - siz[now]) * Dis(x, fa[now])$\uff0c\u5176\u4ed6\u7684\u90fd\u662f\u5957\u8def\u4e86\n\n### \u4ee3\u7801\n\n```cpp\n#include <cmath>\n#include <ctime>\n#include <vector>\n#include <cctype>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define rint register int\nusing namespace std;\ntypedef long long ll;\n\nconst int maxn = 1.5e5 + 10;\nconst int inf = 0x3f3f3f3f;\nint n, q, A, maxsiz, tsiz, rt, cnt, head[maxn], v[maxn], Fa[maxn];\nint dep[maxn], dis[maxn], siz[maxn], son[maxn], top[maxn], fa[maxn];\nbool vis[maxn];\nll lastans;\n\nstruct Edge {\n\tint to, nxt, val;\n}e[maxn << 1];\n\nstruct Node {\n\tint v; ll sum;\n\tbool operator < (const Node &B) const {\n\t\treturn v < B.v;\n\t}\n};\nvector < Node > vec[2][maxn];\n\ntemplate <typename T> T read(register T x = 0, register bool f = 0, register char ch = getchar()) {\n\tfor(;!isdigit(ch);ch = getchar()) f = ch == '-';\n\tfor(; isdigit(ch);ch = getchar()) x = (x << 3) + (x << 1) + (ch & 15);\n\treturn f ? -x : x ;\n}\n\nvoid add(rint x, rint y, rint z) {\n\te[++cnt] = (Edge){y, head[x], z}, head[x] = cnt;\n}\n\nvoid dfs1(rint x, rint prt) {\n\tfa[x] = prt, dep[x] = dep[prt] + 1, siz[x] = 1;\n\tfor(rint i = head[x], y;i;i = e[i].nxt) {\n\t\tif((y = e[i].to) == prt) continue;\n\t\tdis[y] = dis[x] + e[i].val;\n\t\tdfs1(y, x);\n\t\tsiz[x] += siz[y];\n\t\tif(!son[x] || siz[y] > siz[son[x]]) son[x] = y;\n\t}\n}\n\nvoid dfs2(rint x, rint tp) {\n\ttop[x] = tp;\n\tif(son[x]) dfs2(son[x], tp);\n\tfor(rint i = head[x], y;i;i = e[i].nxt) {\n\t\tif((y = e[i].to) != fa[x] && y != son[x]) dfs2(y, y);\n\t}\n}\n\nint Dis(rint a, rint b) {\n\trint x = a, y = b;\n\twhile(top[x] != top[y]) {\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tx = fa[top[x]];\n\t}\n\tx = dep[x] < dep[y] ? x : y;\n\treturn dis[a] + dis[b] - dis[x] * 2;\n}\n\nvoid getrt(rint x, rint prt) {\n\tsiz[x] = 1;\n\trint maxs = 0;\n\tfor(rint i = head[x], y;i;i = e[i].nxt) {\n\t\tif(vis[y = e[i].to] || y == prt) continue;\n\t\tgetrt(y, x);\n\t\tsiz[x] += siz[y];\n\t\tmaxs = max(maxs, siz[y]);\n\t}\n\tmaxs = max(maxs, tsiz - siz[x]);\n\tif(maxs < maxsiz) maxsiz = maxs, rt = x;\n}\n\nvoid dfs(rint x, rint prt, rint sum) {\n\tsiz[x] = 1;\n\tvec[0][rt].push_back((Node){v[x], sum});\n\tif(Fa[rt]) vec[1][rt].push_back((Node){v[x], Dis(x, Fa[rt])});\n\tfor(rint i = head[x], y;i;i = e[i].nxt) {\n\t\tif(vis[y = e[i].to] || y == prt) continue;\n\t\tdfs(y, x, sum + e[i].val);\n\t\tsiz[x] += siz[y];\n\t}\n}\n\nvoid solve(rint x) {\n\tvis[x] = 1, dfs(x, 0, 0);\n\tfor(rint i = head[x], y;i;i = e[i].nxt) {\n\t\tif(vis[y = e[i].to]) continue;\n\t\ttsiz = siz[y], maxsiz = inf, getrt(y, x);\n\t\tFa[rt] = x;\n\t\tsolve(rt);\n\t}\n}\n\nll query(rint opt, rint x, rint l, rint r, ll &ss) {\n\trint lef = lower_bound(vec[opt][x].begin(), vec[opt][x].end(), (Node){l, 0}) - vec[opt][x].begin() - 1;\n\trint rig = upper_bound(vec[opt][x].begin(), vec[opt][x].end(), (Node){r, 0}) - vec[opt][x].begin() - 1;\n\tss = rig - lef;\n\tll ans = 0;\n\tif(rig >= 0 && rig < (int) vec[opt][x].size()) ans += vec[opt][x][rig].sum;\n\tif(lef >= 0 && lef < (int) vec[opt][x].size()) ans -= vec[opt][x][lef].sum;\n\treturn ans;\n}\n\nint main() {\n\tn = read<int>(), q = read<int>(), A = read<int>();\n\tfor(rint i = 1;i <= n; ++i) v[i] = read<int>();\n\tfor(rint i = 1, x, y, z;i < n; ++i) {\n\t\tx = read<int>(), y = read<int>(), z = read<int>();\n\t\tadd(x, y, z), add(y, x, z);\n\t}\n\tdfs1(1, 0), dfs2(1, 1);\n\ttsiz = n, maxsiz = inf, getrt(1, 0), solve(rt);\n\tfor(rint i = 1;i <= n; ++i) {\n\t\tsort(vec[0][i].begin(), vec[0][i].end());\n\t\tsort(vec[1][i].begin(), vec[1][i].end());\n\t\tfor(rint j = 1;j < (int)vec[0][i].size(); ++j) vec[0][i][j].sum += vec[0][i][j - 1].sum;\n\t\tfor(rint j = 1;j < (int)vec[1][i].size(); ++j) vec[1][i][j].sum += vec[1][i][j - 1].sum;\n\t}\n\tfor(rint i = 1, x, l, r;i <= q; ++i) {\n\t\tx = read<int>(), l = (read<ll>() + lastans) % A, r = (read<ll>() + lastans) % A;\n\t\tl > r ? swap(l, r) : void();\n\t\tll s1, s2;\n\t\tlastans = query(0, x, l, r, s1);\n\t\tfor(rint now = x;Fa[now];now = Fa[now]) {\n\t\t\tlastans += query(0, Fa[now], l, r, s2) - query(1, now, l, r, s1);\n\t\t\tlastans += (s2 - s1) * Dis(x, Fa[now]);\n\t\t}\n\t\tprintf(\"%lld\\n\", lastans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1610631808,
        "uid": 316961,
        "name": "liuzhaoxu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3241 \u3010[HNOI2015]\u5f00\u5e97\u3011"
    },
    {
        "content": "\u636e\u8bf4\u6b63\u89e3\u662f\u52a8\u6001\u70b9\u5206\u6cbb\uff0c\u4f46\u662f\u6811\u5256+\u4e3b\u5e2d\u6811\u8dd1\u7684\u66f4\u5feb\uff1f\uff1f\n\n\u8003\u8651\u4e00\u4e2a\u7b80\u5316\u7684\u95ee\u9898\uff1a\u6bcf\u6b21\u8be2\u95ee\u6811\u4e0a\u6240\u6709\u70b9\u5230\u70b9$u$\u7684\u8ddd\u79bb\u4e4b\u548c\u3002\n\n\u8bb0\u70b9$i$\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u662f$dis_i$\n\n\u901a\u8fc7\u753b\u56fe\u53ef\u4ee5\u53d1\u73b0$ans=\\sum_{i=1}^ndis_i+n\\times dis_u-2\\times\\sum_{i=1}^ndis_{lca(i,u)}$\n\n\u524d\u4e24\u9879\u5f88\u597d\u89e3\u51b3\uff0c\u5173\u952e\u662f\u5feb\u901f\u8ba1\u7b97$\\sum_{i=1}^ndis_{lca(i,u)}$\n\n\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u90fd\u5411\u4e0a\u8d70\u5230\u6839\uff0c\u8bb0\u5f55\u6bcf\u6761\u8def\u7ecf\u8fc7\u7684\u6b21\u6570\uff0c\u8be2\u95ee\u65f6\u4ece$u$\u5411\u4e0a\u8df3\uff0c\u6bcf\u6b21\u52a0\u8fb9\u6743$\\times$\u8986\u76d6\u6b21\u6570\u5373\u53ef\u3002\n\n\u73b0\u5728\u8981\u8ba1\u7b97\u70b9\u6743\u5728$[L,R]$\u5185\u7684\u70b9\u5230\u70b9$u$\u7684\u8ddd\u79bb\uff0c\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u628a\u70b9\u6743\u6392\u5e8f\uff0c\u79bb\u6563\u5316\uff0c\u6309\u70b9\u6743\u4ece\u5c0f\u5230\u5927\u63d2\u5165\uff0c\u8be2\u95ee\u65f6\u548c\u5e8f\u5217\u7684\u5904\u7406\u4e00\u6837$[1,R]-[1,L]$\u3002\n\n\u53e6\u5916\u4e3b\u5e2d\u6811\u7684\u533a\u95f4\u4fee\u6539\u8981\u6253\u6c38\u4e45\u6807\u8bb0\uff0c\u5426\u5219\u4f1a\u6709\u65b0\u5efa\u5f88\u591a\u8282\u70b9\uff0c\u7a7a\u95f4\u53ef\u80fd\u5f00\u4e0d\u4e0b\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAX_N = 150010;\nconst int MAX_M = 300010;\nconst int MAX_T = 10000010;\nconst int inf = INT_MAX;\n#define LL long long\n#define rep(i, u) for (int i = fir[u]; i; i = e[i].nxt)\nint read()\n{\n    int x = 0, f = 1; char ch = getchar();\n    while (ch > '9' || ch < '0') { if (ch == '-') f = -1; ch = getchar(); }\n    while (ch <= '9' && ch >= '0') { x = x * 10 + ch - '0'; ch = getchar(); }\n    return x * f;\n}\nstruct Edge\n{\n    int to, nxt, w;\n} e[MAX_M];\nstruct Monster\n{\n    int age, id;\n    friend bool operator < (Monster x, Monster y)\n    {\n        return x.age != y.age ? x.age < y.age : x.id < y.id;\n    }\n} mon[MAX_N];\nint n, m, mod, cnt, cnt2, root[MAX_M], _, fir[MAX_N], last[MAX_N];\nint siz[MAX_N], pos[MAX_N], top[MAX_N], fa[MAX_N];\nLL ans, dis[MAX_N], sumdis[MAX_N], sumE[MAX_N];\nvoid add(int u, int v, int w)\n{\n    e[++cnt] = (Edge) { v, fir[u], w }; fir[u] = cnt;\n    e[++cnt] = (Edge) { u, fir[v], w }; fir[v] = cnt;\n}\nclass SGT\n{\nprivate:\n    int cnt;\n    LL sum[MAX_T];\n    int ls[MAX_T], rs[MAX_T], tim[MAX_T];\npublic:\n    int update(int pre, int l, int r, int L, int R)\n    {\n        int root_ = ++cnt, mid = (l + r) >> 1;\n        ls[root_] = ls[pre]; rs[root_] = rs[pre];\n        sum[root_] = sum[pre]; tim[root_] = tim[pre];\n        if (l == L && R == r) { tim[root_] ++; return root_; }\n        sum[root_] += (sumE[R] - sumE[L - 1]);\n        if (R <= mid) ls[root_] = update(ls[root_], l, mid, L, R);\n        else if (L > mid) rs[root_] = update(rs[root_], mid + 1, r, L, R);\n        else ls[root_] = update(ls[root_], l, mid, L, mid),\n             rs[root_] = update(rs[root_], mid + 1, r, mid + 1, R);\n        return root_;\n    }\n    LL query(int root_, int l, int r, int L, int R)\n    {\n        LL re = 1LL * (sumE[R] - sumE[L - 1]) * tim[root_];\n        if (l == L && R == r) { return re + sum[root_]; }\n        int mid = (l + r) >> 1;\n        if (R <= mid) return re + query(ls[root_], l, mid, L, R);\n        else if (L > mid) return re + query(rs[root_], mid + 1, r, L, R);\n        else return re + query(ls[root_], l, mid, L, mid) + query(rs[root_], mid + 1, r, mid + 1, R);\n    }\n} T;\nvoid dfs1(int u)\n{\n    siz[u] = 1;\n    rep(i, u)\n    {\n        int v = e[i].to;\n        if (v == fa[u]) continue;\n        fa[v] = u; dis[v] = dis[u] + e[i].w;\n        last[v] = e[i].w;\n        dfs1(v); siz[u] += siz[v];\n    }\n}\nvoid dfs2(int u, int top_)\n{\n    top[u] = top_; pos[u] = ++cnt2;\n    sumE[pos[u]] = last[u];\n    int big = 0;\n    rep(i, u) if (siz[e[i].to] > siz[big] && e[i].to != fa[u]) big = e[i].to;\n    if (!big) return ;\n    dfs2(big, top_);\n    rep(i, u) if (e[i].to != fa[u] && e[i].to != big) dfs2(e[i].to, e[i].to);\n}\nint modify(int x)\n{\n    while (top[x] != 1)\n    {\n        _ = T.update(_, 1, n, pos[top[x]], pos[x]);\n        x = fa[top[x]];\n    }\n    return _ = T.update(_, 1, n, 1, pos[x]);\n}\nLL query(int root_, int x)\n{\n    LL re = 0;\n    while (top[x] != 1)\n    {\n        re += T.query(root_, 1, n, pos[top[x]], pos[x]);\n        x = fa[top[x]];\n    }\n    return re + T.query(root_, 1, n, 1, pos[x]);\n}\nint main()\n{\n    n = read(); m = read(); mod = read();\n    for (int i = 1; i <= n; i++)\n        mon[i].age = read(), mon[i].id = i;\n    sort(mon + 1, mon + n + 1);\n    for (int i = 1; i < n; i++)\n    {\n        int u = read(), v = read(), w = read();\n        add(u, v, w);\n    }\n    dfs1(1); dfs2(1, 1);\n    for (int i = 1; i <= n; i++)\n        sumE[i] += sumE[i - 1], sumdis[i] = sumdis[i - 1] + dis[mon[i].id];\n    for (int i = 1; i <= n; i++) root[i] = modify(mon[i].id);\n    for (int i = 1; i <= m; i++)\n    {\n        int u = read(), a = read(), b = read();\n        a = (1LL * a + ans) % mod;\n        b = (1LL * b + ans) % mod;\n        if (a > b) swap(a, b);\n        a = lower_bound(mon + 1, mon + n + 1, (Monster) { a, 0 }) - mon;\n        b = upper_bound(mon + 1, mon + n + 1, (Monster) { b, 1e9 }) - mon - 1;\n        ans = 1LL * (b - a + 1) * dis[u] + sumdis[b] - sumdis[a - 1]\n              - 2LL * (query(root[b], u) - query(root[a - 1], u));\n        printf(\"%lld\\n\", ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1513933480,
        "uid": 37070,
        "name": "Ameyax",
        "ccfLevel": 0,
        "title": "[HNOI2015] \u5f00\u5e97"
    },
    {
        "content": "## \u9898\u76ee\u63cf\u8ff0\n\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u9897$n(n\\leq150000)$\u4e2a\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u70b9\u6743\uff0c\u8fb9\u6709\u8fb9\u6743\uff08\u8868\u793a\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff09\u3002$q(q\\leq200000)$\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u70b9\u6743\u5728$[L, R]$\u4e4b\u95f4\u7684\u6240\u6709\u70b9\u5230\u67d0\u4e2a\u70b9\u7684\u8ddd\u79bb\u4e4b\u548c\u3002\u5f3a\u5236\u5728\u7ebf\u3002\n\n## \u5206\u6790\n\u9996\u5148\u8003\u8651\u4e00\u4e2a\u7b80\u5316\u7684\u7248\u672c\uff0c\u8be2\u95ee\u6240\u6709\u70b9\u5230\u70b9$u$\u7684\u8ddd\u79bb\u548c\u3002\u5c1d\u8bd5\u8fdb\u884c\u516c\u5f0f\u63a8\u5bfc\u3002\n\u4ee4$dep[i], size[i]$\u5206\u522b\u8868\u793a\u4ee5$1$\u4e3a\u6839\u65f6\u7b2c$i$\u4e2a\u70b9\u7684\u6df1\u5ea6\u548c\u5b50\u6811\u5927\u5c0f\u3002\u89c2\u5bdf$1$\u4e3a\u6839\u548c$u$\u4e3a\u6839\u4f1a\u53d1\u751f\u54ea\u4e9b\u53d8\u5316\u3002\n\n$u$\u7684\u5b50\u6811\u4e2d\u67d0\u8282\u70b9$v$\u7684\u6df1\u5ea6\u4f1a\u4ece$dep[v]$\u53d8\u6210$dep[v]-dep[u]$\uff0c\u76f8\u5f53\u4e8e\u90fd\u51cf\u5c11\u4e86$dep[u]$\uff0c\u4e14\u6709$size[u]\u4e2a\u70b9\u53d1\u751f\u4e86\u6b64\u53d8\u5316$\uff1b$fa[u]$\u7684\u5b50\u6811\uff0c\u4e14\u4e0d\u662f$u$\u7684\u5b50\u6811\u4e2d\u7684\u67d0\u8282\u70b9$v$\uff0c\u6df1\u5ea6\u4f1a\u4ece$dep[v]$\u53d8\u6210$dep[v]-dep[fa[u]]+dep[u]-dep[fa[u]]$\uff0c\u76f8\u5f53\u4e8e\u51cf\u5c11\u4e86$2dep[fa[u]]-dep[u]$\uff0c\u4e14\u6709$size[fa[u]]-size[u]$\u4e2a\u70b9\u53d1\u751f\u4e86\u6b64\u53d8\u5316\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u66f4\u5177\u4f53\u7684\u63cf\u8ff0\uff0c\u5b9a\u4e49$a_{i}$\u4e3a$1$\u81f3$u$\u7684\u94fe\u4e0a\u7684\u7b2c$i$\u4e2a\u70b9\uff0c$1$\u81f3$u$\u7684\u94fe\u4e0a\u5171\u6709$k$\u4e2a\u70b9\uff0c\u90a3\u4e48\u6240\u6709\u70b9\u5230$u$\u7684\u8ddd\u79bb\u4e4b\u548c\u53ef\u4ee5\u7528\u5982\u4e0b\u5f0f\u5b50\u8868\u793a\uff1a\n$\\sum_{i=1}^{n}dep[i] - \\sum_{i=1}^{k-1}(size[a_{i}]-size[a_{i+1}])*(2*dep[a_{i}]-dep[u])-size[u]*dep[u]$\n\n\u5c55\u5f00\u53ef\u5f97\uff1a\n$\\sum_{i=1}^{n}dep[i]- size[u]*dep[u]-$\n$(2*\\sum_{i=1}^{k-1}size[a_{i}]*dep[a_{i}]-$ $2*\\sum_{i=1}^{k-1}size[a_{i+1}]*dep[a_{i}]-$ $\\sum_{i=1}^{k-1}size[a_{i}]*dep[u]+$  $\\sum_{i=1}^{k-1}size[a_{i+1}]*dep[u])$\n\n$=\\sum_{i=1}^{n}dep[i]- size[u]*dep[u]-$\n$2*\\sum_{i=1}^{k-1}size[a_{i}]*dep[a_{i}]+$ $2*\\sum_{i=1}^{k-1}size[a_{i+1}]*dep[a_{i}]+$ $\\sum_{i=1}^{k-1}size[a_{i}]*dep[u]$ $\\sum_{i=1}^{k-1}size[a_{i+1}]*dep[u])$\n\n\u5176\u4e2d \n$\\sum_{i=1}^{k-1}size[a_{i}]*dep[u]-\\sum_{i=1}^{k-1}size[a_{i+1}]*dep[u] $\n$= \\sum_{i=1}^{k-1}size[a_{i}]*dep[u]-\\sum_{i=2}^{k}size[a_{i}]*dep[u]$\n$ = size[a_{1}]*dep[u] -size[a_{k}]*dep[u]= n*dep[u]-size[u]*dep[u]$\n\n\u4e8e\u662f\u539f\u5f0f\u53d8\u4e3a\n$\\sum_{i=1}^{n}dep[i] +n*dep[u]-2*size[u]*dep[u] $\n$- 2*\\sum_{i=1}^{k-1}size[a_{i}]*dep[a_{i}]+2*\\sum_{i=1}^{k-1}size[a_{i+1}]*dep[a_{i}]$\n\n\u73b0\u5728\u89c2\u5bdf\n$- 2*\\sum_{i=1}^{k-1}size[a_{i}]*dep[a_{i}]+2*\\sum_{i=1}^{k-1}size[a_{i+1}]*dep[a_{i}] $\n$= 2*\\sum_{i=1}^{k-1}size[a_{i+1}]*dep[a_{i}]- 2*\\sum_{i=1}^{k-1}size[a_{i}]*dep[a_{i}]$\n\n\u76f4\u63a5\u76f8\u51cf\u51fa\u73b0\u7684$size[a_{i}]-size[a_{i+1}]$\u96be\u4ee5\u5904\u7406\uff0c\u6211\u4eec\u8003\u8651\u8fdb\u884c\u4e00\u6b21\u9519\u4f4d\n\n\u539f\u5f0f$=2*\\sum_{i=2}^{k}size[a_{i}]*dep[a_{i-1}]- 2*\\sum_{i=1}^{k-1}size[a_{i}]*dep[a_{i}]$\n$=2*\\sum_{i=2}^{k}size[a_{i}]*dep[a_{i-1}]- 2*\\sum_{i=2}^{k-1}size[a_{i}]*dep[a_{i}] (dep[a_{1}]=dep[1]=0)$\n$=2*size[a_{k}]*dep[a_{k-1}] + 2*\\sum_{i=2}^{k-1}size[a_{i}]*(dep[a_{i-1}]-dep[a_{i}])$\n\n\u5c06\u539f\u5f0f\u4e2d\u7684$-2*size[u]*dep[u]$\u5e76\u5165\u4e0a\u5f0f\u4e2d\uff0c\u5f97\u5230\uff1a\n$2*size[a_{k}]*dep[a_{k-1}] -2*size[a_{k}]*dep[a_k]$\n$+ 2*\\sum_{i=2}^{k-1}size[a_{i}]*(dep[a_{i-1}]-dep[a_{i}])$\n$=2*\\sum_{i=2}^{k}size[a_{i}]*(dep[a_{i-1}]-dep[a_{i}])$\n\n\u6ce8\u610f\u5230$dep[a_i]-dep[a_{i-1}]$\u662f\u70b9 $i$ \u5230\u5176\u7236\u8282\u70b9\u7684\u8fb9\u6743\uff0c\u5b9a\u4e49\u4e3a$fv[i]$\n\u6545\u539f\u5f0f\u7b49\u4e8e\n$\\sum_{i=1}^{n}dep[i] +n*dep[u]-2*\\sum_{i=2}^{k}size[a_{i}]*fv[a_i]$\n\u53ef\u4ee5\u8fdb\u884c\u7ef4\u62a4\n\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u52a0\u5165$[L, R]$\u7684\u9650\u5236\u3002\u76f4\u63a5\u901a\u8fc7\u5b50\u6811\u67e5\u8be2\u7684\u65b9\u5f0f\u8fdb\u884c\uff0c\u5355\u6b21\u590d\u6742\u5ea6\u4e0e\u6811\u9ad8\u7ea6\u4e3a\u7ebf\u6027\u5173\u7cfb\uff0c\u4e0d\u53ef\u4ee5\u63a5\u53d7\u3002\u8fd9\u65f6\u4fbf\u8981\u4f53\u4f1a\u4e3b\u5e2d\u6811\u7684\u7248\u672c\u4f5c\u7528\u3002\n\u5c06\u70b9\u6309\u7167\u70b9\u6743\u6392\u5e8f\uff0c\u4e00\u4e2a\u4e00\u4e2a\u52a0\u5165\uff0c\u6700\u7ec8\u7b54\u6848\u4fbf\u662f$R$\u5bf9\u5e94\u7248\u672c\u7684\u4e3b\u5e2d\u6811\u7684\u7b54\u6848\u51cf\u53bb$L$\u4e2a\u5bf9\u5e94\u7248\u672c\u7684\u524d\u4e00\u4e2a\u7248\u672c\u7684\u4e3b\u5e2d\u6811\u7684\u7b54\u6848\u3002\n\n\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u6811\u7684\u5f62\u6001\u4e0d\u53d1\u751f\u53d8\u5316\uff0c$fv[i]$\u4e0d\u53d1\u751f\u53d8\u5316\uff0c\u53ea\u6709$size[i]$\u53d1\u751f\u53d8\u5316\u3002\u53ea\u9700\u628a\u52a0\u5165\u7684\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684$size$\u8fdb\u884c$+1$\u5373\u53ef\uff0c\u67e5\u8be2\u65f6\u4ece\u5f53\u524d\u6307\u5b9a\u7684\u70b9\u51fa\u53d1\uff0c\u5411\u4e0a\u7edf\u8ba1$\\sum size[i]*fv[i]$\u3002\u8fd9\u662f\u53ef\u4ee5\u901a\u8fc7\u6811\u94fe\u5256\u5206\u7ef4\u62a4\u7684\u3002\u7531\u4e8e\u7a7a\u95f4\u9650\u5236\uff0c\u6807\u8bb0\u6c38\u4e45\u5316\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\n## \u601d\u8def\u603b\u7ed3\n\u5bf9\u4e3b\u5e2d\u6811\u7684\u8ba4\u8bc6\u4e0d\u8981\u50f5\u5316\uff0c\u4f53\u4f1a\u5176\u6709\u5173\u7248\u672c\u7684\u4f5c\u7528\u3002\u4f8b\u5982\u5bf9\u4e8e\u533a\u95f4$[l, r]$\u7edf\u8ba1\u5728$[L, R]$\u4e4b\u95f4\u7684\u6570\u7684\u4e2a\u6570\u95ee\u9898\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u6309\u7167\u6570\u503c\u6392\u5e8f\u540e\u4e00\u4e2a\u4e2a\u63d2\u5165\u70b9\uff0c\u7edf\u8ba1\u7b2c$R$\u4e2a\u7248\u672c\u7684\u6811\u4e2d\u4f4d\u7f6e\u662f$[l, r]$\u7684\u6709\u591a\u5c11\uff0c\u51cf\u53bb\u7b2c$L-1$\u9897\u6811\u7684\u7b54\u6848\u3002\u4e0d\u540c\u7248\u672c\u4e0d\u4e00\u5b9a\u662f\u6309\u7167\u4f4d\u7f6e\uff0c\u4e5f\u4e0d\u4e00\u5b9a\u662f\u6309\u7167\u6743\u503c\uff08\u867d\u7136\u6211\u76ee\u524d\u5c31\u89c1\u8fc7\u8fd9\u4fe9\uff09\uff0c\u601d\u8def\u8981\u7075\u6d3b\u3002\n\n## \u4ee3\u7801\n\n```\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <bits/stdc++.h>\n#define MAXN 200050\n#define ri register int\n#define il inline\nusing namespace std;\ntypedef long long LL;\nint n, q, A, ecnt, numcnt, root[MAXN], rtcnt, num[MAXN];\nint tcnt, top[MAXN], id[MAXN], fa[MAXN], fv[MAXN], son[MAXN], size[MAXN];\nLL lastans, dsum[MAXN], dep[MAXN];\nstruct Node {\n    int id, ag;\n    bool operator < (const Node &x) const {\n        if(ag == x.ag) return id < x.id;\n        return ag < x.ag;\n    }\n}mon[MAXN];\nstruct node {\n    int v, w;\n    node *next;\n}pool[MAXN<<2], *h[MAXN];\nstruct NODE {\n    int ls, rs, lazy;\n    LL sum, esum;\n    void init() {\n        ls = rs = lazy = 0, esum = sum = 0;\n    }\n}t[MAXN<<7];\nil void adde(int u, int v, int w) {\n    node *p = &pool[ecnt++], *q = &pool[ecnt++];\n    *p = node {v, w, h[u]}, h[u] = p;\n    *q = node {u, w, h[v]}, h[v] = q;\n}\nvoid dfs1(int u) {\n    size[u] = 1;\n    for(node *p = h[u]; p; p = p->next) {\n        if(p->v == fa[u]) continue;\n        dep[p->v] = dep[u]+p->w, fa[p->v] = u, fv[p->v] = p->w, dfs1(p->v), size[u] += size[p->v];\n        if(size[p->v] > size[son[u]]) son[u] = p->v;\n    }\n}\nvoid dfs2(int u, int t) {\n    id[u] = ++tcnt, top[u] = t, num[tcnt] = fv[u];\n    if(!son[u]) return ;\n    dfs2(son[u], t);\n    for(node *p = h[u]; p; p = p->next) \n        if(!id[p->v]) dfs2(p->v, p->v);\n}\nvoid build(int &u, int l, int r) {\n    int tmp = u; u = ++rtcnt, t[u] = t[tmp];\n    if(l == r) return (void)(t[u].esum = num[l]);\n    int mid = (l+r)>>1;\n    build(t[u].ls, l, mid);\n    build(t[u].rs, mid+1, r);\n    t[u].esum = t[t[u].ls].esum + t[t[u].rs].esum;\n}\nvoid change(int &u, int l, int r, int tl, int tr) {\n    int tmp = u; u = ++rtcnt, t[u] = t[tmp];\n    if(tl <= l && r <= tr) {\n        ++t[u].lazy;\n        t[u].sum += t[u].esum;\n        return ;\n    }\n    int mid = (l+r)>>1;\n    if(tl <= mid) change(t[u].ls, l, mid, tl, tr);\n    if(mid < tr) change(t[u].rs, mid+1, r, tl, tr);\n    t[u].sum = t[t[u].ls].sum + t[t[u].rs].sum + t[u].esum*t[u].lazy;\n}\nvoid Change(int u, int ver) {\n    while(top[u] != 1) {\n        change(root[ver], 1, n, id[top[u]], id[u]);\n        u = fa[top[u]];\n    }\n    change(root[ver], 1, n, 1, id[u]);\n}\nLL query(int u, int l, int r, int tl, int tr, int add) {\n    if(tl <= l && r <= tr) return t[u].sum + t[u].esum*add;\n    int mid = (l+r)>>1; LL ret = 0;\n    add += t[u].lazy;\n    if(tl <= mid) ret += query(t[u].ls, l, mid, tl, tr, add);\n    if(mid < tr) ret += query(t[u].rs, mid+1, r, tl, tr, add);\n    return ret;\n}\nLL Query(int u, int ver) {\n    LL ret = 0;\n    while(top[u] != 1) {\n        ret += query(root[ver], 1, n, id[top[u]], id[u], 0);\n        u = fa[top[u]];\n    }\n    ret += query(root[ver], 1, n, 1, id[u], 0);\n    return ret;\n}\nil LL calc(int u, int ver) {\n    return dsum[ver] + ver*dep[u] - 2*Query(u, ver);\n}\nint main() {\n    int u, v, c;\n    scanf(\"%d%d%d\", &n, &q, &A);\n    for(ri i = 1; i <= n; ++i) scanf(\"%d\", &mon[i].ag), mon[i].id = i;\n    for(ri i = 1; i < n; ++i) scanf(\"%d%d%d\", &u, &v, &c), adde(u, v, c);\n    dfs1(1), dfs2(1, 1);\n    sort(mon+1, mon+n+1);\n    build(root[0], 1, n);\n    for(ri i = 1; i <= n; ++i) \n        dsum[i] = dsum[i-1] + dep[mon[i].id], \n        root[i] = root[i-1], Change(mon[i].id, i);\n    while(q--) {\n        LL l, r; int L, R;\n        scanf(\"%d%lld%lld\", &u, &l, &r);\n        l += lastans, r += lastans;\n        L = min(l%A, r%A), R = max(l%A, r%A);\n        L = lower_bound(mon+1, mon+n+1, Node{0, L})-mon, R = upper_bound(mon+1, mon+n+1, Node{MAXN, R})-mon-1;\n        printf(\"%lld\\n\", lastans = calc(u, R)-calc(u, L-1));\n    }\n    return 0;\n}\n```",
        "postTime": 1535974329,
        "uid": 3369,
        "name": "hychyc",
        "ccfLevel": 0,
        "title": "\u3010HNOI2015\u3011\u5f00\u5e97"
    },
    {
        "content": "\u6811\u94fe\u5256\u5206\u4e0e\u7ebf\u6bb5\u6811\u914d\u5408\u53ef\u4ee5\u7ef4\u62a4\u6811\u4e0a\u8def\u5f84\u548c\u5b50\u6811\u4fee\u6539\u67e5\u8be2\u3002\n\n\u8bbe\u8282\u70b9 $y$ \u7684\u91cd\u513f\u5b50 $wson(y)$ \u4e3a\u8bf8\u591a\u513f\u5b50\u4e2d\u5927\u5c0f $size$ \u6700\u5927\u7684\u513f\u5b50\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7684\u8fb9\u79f0\u4e3a\u91cd\u8fb9\uff0c\u76f8\u8fde\u7684\u91cd\u8fb9\u7ec4\u6210\u91cd\u94fe\uff0c\u4e0d\u662f\u91cd\u8fb9\u7684\u8fb9\u5c31\u662f\u8f7b\u8fb9\u3002\n\n\u539f\u7406\u5728\u4e8e\u5c06\u4e00\u68f5\u6811\u8fdb\u884c\u6811\u94fe\u5256\u5206\u4e4b\u540e\uff0c\u4efb\u610f\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8f7b\u8fb9\u6761\u6570\u4e0d\u8d85\u8fc7 $\\log_2n$ \u56e0\u4e3a $\\forall x\\in son(y),x\\neq wson(y)$ \u6709 $size(y)>2size(x)$\uff0c\u7531\u91cd\u513f\u5b50\u7684\u5b9a\u4e49\u53ef\u4ee5\u5f97\u77e5\u3002\n\n\u6811\u5256\u9700\u8981\u8bb0\u5f55\u7684\u6570\u636e\u5982\u4e0b\uff1a\n```cpp\nint tlpf[N][8];\n#define f(x) tlpf[x][0]\n#define d(x) tlpf[x][1]\n#define t(x) tlpf[x][2]\n#define w(x) tlpf[x][3]\n#define s(x) tlpf[x][4]\n#define g(x) tlpf[x][5]\n#define p(x) tlpf[x][6]\n#define r(x) tlpf[x][7]\n```\n\u5176\u4e2d `f(x)` \u8868\u793a $x$ \u7684\u7236\u4eb2\uff0c`d(x)` \u662f\u9ed8\u8ba4\u8fb9\u6743\u4e3a\u4e00\u65f6\u7684\u6df1\u5ea6\uff0c`t(x)` \u662f\u94fe\u9876\uff0c\u8f7b\u513f\u5b50\u7684\u94fe\u9876\u662f\u81ea\u5df1\uff0c\u91cd\u513f\u5b50\u7684\u94fe\u9876\u662f\u7236\u4eb2\u7684\u94fe\u9876\uff0c`w(x)` \u662f\u91cd\u513f\u5b50\uff0c`s(x)` \u662f\u5b50\u6811\u5927\u5c0f\uff0c`g(x)` \u8868\u793a\u4f18\u5148\u8d70\u91cd\u8fb9\u7684\u65f6\u95f4\u6233\uff0c\u8fd9\u6837\u4e00\u6761\u91cd\u94fe\u7684\u65f6\u95f4\u6233\u662f\u8fde\u7eed\u7684\uff0c`p(x)` \u662f\u7236\u8fb9\u6743\u503c\uff0c`r(x)` \u6ee1\u8db3 $r(g(x))=x$\u3002\n\n\u901a\u8fc7\u4e24\u6b21\u6df1\u641c\u6765\u8fdb\u884c\u6811\u94fe\u5256\u5206\uff1a\n```cpp\nvoid dfs1(int x=1){\n\tint y;s(x)=1;\n\tfor(int i:lk[x])\n\t\tif((y=ed[i])!=f(x)){\n\t\t\tf(y)=x,d(y)=d(x)+1;\n\t\t\tp(y)=w[i],d[y]=d[x]+p(y);\n\t\t\tdfs1(y),s(x)+=s(y);\n\t\t\tif(s(y)>s(w(x)))w(x)=y;\n\t\t}\n}\nvoid dfs2(int x=1){\n\tint y;r(g(x)=++dlt)=x;\n\tif(w(x)){\n\t\tt(w(x))=t(x),dfs2(w(x));\n\t\tfor(int i:lk[x])\n\t\t\tif((y=ed[i])!=w(x)&&y!=f(x))\n\t\t\t\tt(y)=y,dfs2(y);\n\t}\n}\n```\n\u4e0a\u9762\u8bf4\u5230\uff0c\u91cd\u94fe\u4e0a\u65f6\u95f4\u6233\u8fde\u7eed\uff0c\u8fd9\u6837\u4fee\u6539\u4e00\u6761\u94fe\u53ef\u4ee5\u5212\u5206\u6210 $O(\\log_2n)$ \u6761\u91cd\u94fe\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4fee\u6539\u67e5\u8be2\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(\\log_2^2n)$\u3002\n\n\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8282\u70b9\u6309 $x_i$ \u6392\u5e8f\uff0c\u8fd9\u6837\u6bcf\u4e00\u6b21\u67e5\u8be2\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u533a\u95f4\u7684\u8282\u70b9\uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u6709\uff08\u6ce8\u610f\u8fd9\u91cc\u7684 $d$ \u662f\u5e26\u8fb9\u6743\u7684\u6df1\u5ea6\uff09\uff1a$$\\sum\\limits_{y=L}^Rdis(x,y)=\\sum\\limits_{y=L}^R(d(x)+d(y)-2d(lca(x,y))=(R-L+1)d(x)+\\sum\\limits_{y=L}^Rd(y)-2\\sum\\limits_{y=L}^Rd(lca(x,y))$$ \u7b2c\u4e8c\u90e8\u5206\u53ef\u4ee5\u9884\u5904\u7406\u524d\u7f00\u548c $O(1)$ \u6c42\uff0c\u7b2c\u4e09\u90e8\u5206\u53ef\u4ee5\u8fd9\u6837\u8003\u8651\uff1a\u5982\u679c\u5c06 $y$ \u5230\u6839\u8282\u70b9\u7684\u94fe\u4e0a\u6574\u4f53\u52a0\u4e0a\u8fb9\u6743\uff0c\u518d\u67e5\u8be2\u4ece $x$ \u5230\u6839\u8282\u70b9\u7684\u548c\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u5c31\u662f $d(lca(x,y))$\u3002\n\n\u7531\u4e8e\u5f3a\u5236\u5728\u7ebf\uff0c\u6211\u4eec\u53ef\u4ee5\u6309 $x_i$ \u4ece\u5c0f\u5230\u5927\u4fee\u6539\u8fd9\u4e9b\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\uff0c\u9700\u8981\u53ef\u6301\u4e45\u5316\uff0c\u5728\u67e5\u8be2\u65f6\u5bf9\u4e24\u68f5\u7ebf\u6bb5\u6811\u8fdb\u884c\u5dee\u5206\u5373\u53ef\u3002\n```cpp\nint build(int l=1,int r=n){\n\tint md=l+r>>1,x=++cnt;\n\tif(l==r){bs[x]=p(r(l));return x;}\n\tls=build(l,md),rs=build(md+1,r);\n\tbs[x]=bs[ls]+bs[rs];return x;\n}\ninline void x_new(int &x){\n\tt[++cnt][0]=ls,t[cnt][1]=rs;\n\tad[cnt]=ad[x],sm[cnt]=sm[x];\n\tbs[cnt]=bs[x],x=cnt;\n}\ninline void add(int &x,int p){\n\tx_new(x);ad[x]+=p,sm[x]+=bs[x]*p;\n}\ninline void pd(int x){\n\tif(ad[x]){\n\t\tif(ls)add(ls,ad[x]);\n\t\tif(rs)add(rs,ad[x]);ad[x]=0;\n\t}\n}\nvoid Add(int &x,int l,int r,int L,int R){\n\tif(l>=L&&r<=R)return add(x,1);pd(x);\n\tint md=l+r>>1;x_new(x);\n\tif(L<=md)Add(ls,l,md,L,R);\n\tif(md<R)Add(rs,md+1,r,L,R);\n\tsm[x]=sm[ls]+sm[rs];\n}\nvoid qry(int &x,int l,int r,int L,int R,int addd=0){\n\tif(l>=L&&r<=R){ans+=sm[x]+bs[x]*addd;return;}\n\tint md=l+r>>1;addd+=ad[x];\n\tif(L<=md)qry(ls,l,md,L,R,addd);\n\tif(md<R)qry(rs,md+1,r,L,R,addd);\n}\n```\n[LOJ \u4e0a\u7684 AC \u8bb0\u5f55](https://loj.ac/s/1542617)",
        "postTime": 1659687994,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "\u6811\u94fe\u5256\u5206\u548c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811"
    },
    {
        "content": "\u5148\u8d34\u4e2a\u4f20\u9001\u95e8[P3241](https://www.luogu.com.cn/problem/P3241)\u3002\n\n\u70b9\u5206\u6811\u597d\u9898\u3002\n\n\u6709\u5927\u91cf\u7684\u8be2\u95ee\u540c\u65f6\u6bcf\u6b21\u8be2\u95ee\u7684\u6811\u90fd\u4e00\u6837\uff0c\u9898\u76ee\u8fd8\u5f3a\u5236\u5728\u7ebf\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u7528**\u70b9\u5206\u6811**\u3002\n\n\u5148\u8f6c\u5316\u4e00\u4e0b\u95ee\u9898\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee,\n\n\u76f8\u5f53\u4e0e\u95ee\u6240\u6709\u5e74\u9f84\u5728 $[L,R]$ \u4e4b\u95f4\u7684\u70b9\u5230 $u$ \u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\u4e4b\u548c\u3002\n\n\u82e5\u8003\u8651\u5355\u6b21\u7684\u8be2\u95ee\u53ef\u4ee5\u7528\u70b9\u5206\u6cbb\uff0c\n\n\u800c\u53c8\u56e0\u4e3a\u6bcf\u6b21\u8be2\u95ee\u7684\u6811\u90fd\u4e00\u6837\uff0c\u6240\u4ee5\u6bcf\u6b21\u9009\u62e9\u7684\u91cd\u5fc3\u90fd\u4e00\u6837\uff0c\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u8003\u8651\u7528\u70b9\u5206\u6811\u6765\u505a\u4e86\u3002\n\n\u53ef\u4ee5\u901a\u8fc7\u4e00\u6b21\u9884\u5904\u7406\uff0c\u5c06\u6bcf\u6b21\u9009\u62e9\u7684\u91cd\u5fc3\u90fd\u5904\u7406\u51fa\u6765\u3002\n\n\u518d\u770b\u5355\u6b21\u8be2\u95ee\uff0c\u5bf9\u4e8e $u$ \u8fd9\u4e2a\u70b9\uff0c\n\n\u5176\u4ed6\u6240\u6709\u5bf9\u4ed6\u6709\u8d21\u732e\u7684\u70b9 \uff0c\n\n\u4f1a\u5728\u540c\u4e00\u91cd\u5fc3\u5176\u4ed6\u5b50\u6811\u4e2d\uff0c\n\n\u6216\u8005\u5728\u540c\u4e00\u91cd\u5fc3\u7684\u548c $u$ \u8fd9\u4e2a\u70b9\u76f8\u540c\u7684\u5b50\u6811\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u5f52\u5e76\u7684\u53bb\u505a\u3002\n\n\u5176\u4ed6\u5b50\u6811\u91cc\u7684\u70b9\u5230 $u$ \u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\u53ef\u4ee5\u5206\u6210\u4e24\u79cd\uff0c\n\n\u4e00\u79cd\u662f\u4ece\u5b50\u6811\u5230\u91cd\u5fc3\uff0c\u53e6\u4e00\u79cd\u662f\u4ece\u91cd\u5fc3\u5230 $u$\uff0c\n\n\u8981\u5904\u7406\u8fd9\u4e24\u79cd\u60c5\u51b5\u6211\u4eec\u9700\u8981\u5c06\u6bcf\u4e2a\u5b50\u6811\u91cc\u6240\u6709\u70b9\u7684\u4fe1\u606f\u90fd\u5b58\u5230\u6bcf\u4e2a\u91cd\u5fc3\u91cc\u3002\n\n\u6839\u636e\u9898\u76ee\u7684\u6027\u8d28\u6700\u591a $3$ \u9897\u5b50\u6811\uff0c\u6240\u4ee5\u5728\u8bb0\u5f55\u513f\u5b50\u5b50\u6811\u7684\u4fe1\u606f\u65f6\u8981\u5f00\u4e2a $3$ \u3002\n\n**\u7136\u540e\u6839\u636e\u5e74\u9f84\u6765\u6392\u4e2a\u5e8f**\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\n\n\u53ef\u4ee5\u7528**\u524d\u7f00\u548c**\u6765\u7edf\u8ba1\u5230\u91cd\u5fc3\u7684\u957f\u5ea6\uff0c\n\n\u7136\u540e\u6bcf\u6b21\u95ee\u7684\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\u548c\uff0c\n\n\u53ef\u4ee5\u8003\u8651**\u4e8c\u5206**\u5bfb\u627e\u8fb9\u754c\u7136\u540e $O(1)$ \u8ba1\u7b97\uff0c\n\n\u6240\u4ee5\u6bcf\u6b21\u8ba1\u7b97\u5c31\u662f $O(log\\ n)$ \u7684\u590d\u6742\u5ea6\u3002\n\n\u53e6\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u91cd\u5fc3\u5230 $u$ \u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\u4e58\u4e0a\u6240\u6709\u5e74\u9f84\u4e3a $[L,R]$ \u7684\u70b9\u7684\u6570\u91cf\u3002\n\n\u7136\u540e\u518d**\u4e8c\u5206**\u67e5\u627e\u4e24\u4e2a\u8fb9\u754c \u76f8\u51cf\u6c42\u5f97\u6570\u91cf\uff0c\n\n\u4e5f\u662f $O(log\\ n)$ \u7684\u590d\u6742\u5ea6\uff0c\n\n\u8fd9\u6837\u6bcf\u6b21\u8be2\u95ee\u5c31\u662f $O(log\\ n)$ \u7684\u590d\u6742\u5ea6\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u90e8\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u9012\u5f52\u7684\u53bb\u5904\u7406\uff0c\n\n\u6bcf\u9012\u5f52\u4e00\u5c42\u5c31\u518d\u6b21\u5206\u7c7b\uff0c\u5206\u6210\u4e24\u90e8\u5206\uff0c\n\n\u76f4\u5230 $u$ \u4e3a\u91cd\u5fc3\u4e3a\u6b62\u3002\n\n\u5206\u6790\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6700\u591a\u6709$O(log\\ n)$ \u5c42\uff0c\n\n\u6bcf\u5c42\u90fd\u4f1a\u8fdb\u884c\u4e00\u6b21\u6392\u5e8f\uff0c\u6240\u4ee5\u603b\u7684**\u590d\u6742\u5ea6**\u4e3a$O(nlog^2\\ n)$\u3002\n\n\u7136\u540e\u5c31\u5b8c\u4e86\uff0c\u5269\u4e0b\u7684\u8d34\u4e2a\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nint n,m,A;\nlong long ans;\nint age[150010];\nint head[150010],ver[300010],to[300010],edge[300010],tot;\nbool vis[150010];\nstruct Father{int u,num;long long dis;};\nvector<Father> fa[150010];//\u8bb0\u5f55\u5f53\u524d\u70b9Father\u7684\u4fe1\u606f\nstruct Son{int age;long long dis;inline bool operator<(const Son& a)const{return age<a.age;}};\nvector<Son> son[150010][3];//\u6700\u591a\u4e09\u9897\u5b50\u6811\u6240\u4ee5\u7b2c\u4e8c\u7ef4\u4e3a3\n                           //\u8bb0\u5f55\u5b50\u6811\u4fe1\u606f\ninline void add(int x,int y,int z){\n\tver[++tot]=y;\n\tedge[tot]=z;\n\tto[tot]=head[x];\n\thead[x]=tot;\n}\ninline int getsiz(int x,int fa){//\u6c42\u5b50\u6811\u7684\u5927\u5c0f \u8fd4\u56de\u503c\u5c31\u662f\u5927\u5c0f\n\tif(vis[x]) return 0;int res=1;\n\tfor(int i=head[x];i;i=to[i]){\n\t\tint y=ver[i];\n\t\tif(y==fa||vis[y]) continue;\n\t\tres+=getsiz(y,x);\n\t}\n\treturn res;\n}\ninline int getrt(int x,int fa,int tot,int &rt){//\u6c42\u91cd\u5fc3 \u8fd4\u56de\u503c\u4e5f\u662f\u5b50\u6811\u5927\u5c0f\n\tif(vis[x]) return 0;                   //tot\u4e3a\u603b\u70b9\u6570 \u91cd\u5fc3\u4e3art\n\tint S=1,mx=0;                          //S\u4e3a\u5f53\u524d\u5b50\u6811\u5927\u5c0f mx\u4e3a\u5269\u4f59\u8054\u901a\u5757\u6700\u5927\u503c\n\tfor(int i=head[x];i;i=to[i]){\n\t\tint y=ver[i];\n\t\tif(y==fa||vis[y]) continue;\n\t\tint t=getrt(y,x,tot,rt);//\u5b50\u6811\u5927\u5c0f\n\t\tmx=max(mx,t);\n\t\tS+=t;\n\t}\n\tmx=max(mx,tot-S);\n\tif(mx<=tot/2) rt=x;//\u8fd9\u91cc\u53ea\u8981\u4fdd\u8bc1<=tot/2\u5c31\u884c\n\treturn S;          //\u56e0\u4e3a\u6211\u4eec\u4e3b\u8981\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u884c \u4e0d\u4e00\u5b9a\u4e00\u5b9a\u662f\u91cd\u5fc3\n}\ninline void getdis(int x,int fath,long long dis,int rt,int k,vector<Son>& p){\n//\u904d\u5386\u5b50\u6811\u6c42\u8ddd\u79bb\n//x\u4e3a\u76ee\u524d\u7684\u70b9 fath\u4e3a\u7236\u4eb2 dis\u4e3a\u76ee\u524d\u7684\u8ddd\u79bb rt \u548c k \u8868\u793a \u4ed6\u662frt\u7684\u7b2ck\u4e2a\u5b50\u6811 \u6211\u4eec\u8981\u628a\u4fe1\u606f\u5b58\u5230p\u8fd9\u4e2avector\u91cc\n\tif(vis[x]) return;\n\tfa[x].push_back({rt,k,dis,});//\u5b58\u5165\u4fe1\u606f\n\tp.push_back({age[x],dis});   //\u5b58\u5165\u4fe1\u606f\n\tfor(int i=head[x];i;i=to[i]){\n\t\tint y=ver[i];\n\t\tif(y==fath||vis[y]) continue;\n\t\tgetdis(y,x,dis+edge[i],rt,k,p);\n\t}\n}\ninline void build(int x){\n\tif(vis[x]) return ;\n\tgetrt(x,0,getsiz(x,0),x);\n\tvis[x]=1;\n\tfor(int i=head[x],k=0;i;i=to[i],k++){\n\t\tint y=ver[i];\n\t\tif(vis[y]) continue;\n\t\tauto& p=son[x][k];\n\t\tp.push_back({-1,0});p.push_back({A+1,0});//\u63d2\u5165\u54e8\u5175\u65b9\u4fbf\u6c42\u503c\n\t\tgetdis(y,0,edge[i],x,k,p);\n\t\tsort(p.begin(),p.end());\n\t\tfor(int i=1;i<p.size();i++) p[i].dis+=p[i-1].dis;\n\t}\n\tfor(int i=head[x];i;i=to[i]) build(ver[i]);\n}\ninline long long query(int x,int l,int r){//\u67e5\u8be2\u6bcf\u6b21\u8be2\u95ee\n\tlong long res=0;\n\tfor(auto& t: fa[x]){     //\u679a\u4e3ex\u7684\u6bcf\u4e2a\u7236\u8282\u70b9\n\t\tint Age=age[t.u];//\u7279\u5224\u91cd\u5fc3\u7684\u503c\n\t\tif(Age>=l&&Age<=r) res+=t.dis;\n\t\tfor(int i=0;i<3;i++){\n\t\t\tif(i==t.num) continue;//\u5982\u679c\u679a\u4e3e\u5230\u4e86\u540c\u5b50\u6811\u7684\u5c31\u8df3\u8fc7\n\t\t\tauto& p=son[t.u][i];\n\t\t\tif(p.empty()) continue;//\u4e3a\u7a7a\u4e5f\u8df3\u8fc7\n\t\t\tint a=lower_bound(p.begin(),p.end(),Son({l,-1}))-p.begin();\n\t\t\tint b=lower_bound(p.begin(),p.end(),Son({r+1,-1}))-p.begin();\n\t\t\tres+=t.dis*(b-a)+p[b-1].dis-p[a-1].dis;//\u4e00\u5171\u4e24\u90e8\u5206\u4e0a\u9762\u63d0\u5230\u4e86\n\t\t}\n\t}\n\tfor(int i=0;i<3;i++){//\u627ex\u4e3a\u91cd\u5fc3\u65f6\u548c\u513f\u5b50\u8282\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n\t\t auto& p=son[x][i];\n\t\tif(p.empty()) continue;\n\t\tint a=lower_bound(p.begin(),p.end(),Son({l,-1}))-p.begin();\n\t\tint b=lower_bound(p.begin(),p.end(),Son({r+1,-1}))-p.begin();\n\t\tres+=p[b-1].dis-p[a-1].dis;//\u4e0b\u9762\u7684\u53ea\u7528\u7ba1\u7b2c\u4e8c\u90e8\u5206\n\t}\n\treturn res;\n}\nint main(){\n\tn=read(),m=read(),A=read();\n\tfor(int i=1;i<=n;i++) age[i]=read();\n\tfor(int i=1,x,y,z;i<=n-1;i++){\n\t\tx=read(),y=read(),z=read();\n\t\tadd(x,y,z);add(y,x,z);\n\t}build(1);\n\tfor(int i=1,u,a,b,l,r;i<=m;i++){\n\t\tu=read(),a=read(),b=read();\n\t\tl=(a+ans)%A,r=(b+ans)%A;\n\t\tif(l>r) swap(l,r);\n\t\tans=query(u,l,r);\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;//\u518d\u89c1~~~\n}\n```",
        "postTime": 1623577133,
        "uid": 113507,
        "name": "Max_QAQ",
        "ccfLevel": 8,
        "title": "P3241 [HNOI2015]\u5f00\u5e97"
    },
    {
        "content": "~~\u300c\u524d\u8a00\u300d\u4e3a\u9632\u6b62\u5728\u67d0\u5de8\u5de8\u7684\u6bd2\u7624idea \u7d2b\u8346\u82b1\u4e4b\u201c\u5e97\" \u9762\u524d\u4e00\u8138\u61f5\uff0c\u7279\u6eda\u6765\u8865\u6b64\u9898\u3002~~  ~~\u6211\u8fd8\u662f\u592anaive\u4e86\u3002~~\n\n\u300c\u9898\u4e49\u300d\u7ed9\u51fa\u4e00\u68f5\u5355\u70b9\u5ea6\u6570\u5f88\u5c0f\u7684\u65e0\u6839\u5e26\u8fb9\u6743\u3001\u70b9\u6743\u7684\u6811\uff0c\u6bcf\u6b21\u8be2\u95ee\u5728\u6240\u6709\u70b9\u6743\u5728\\[l,r\\]\u7684\u70b9\u5230c\u7684\u8ddd\u79bb\u4e4b\u548c\u3002\n\n\u300c\u5206\u6790\u300d\u8003\u8651\u5efa\u7acb\u70b9\u5206\u6811\uff0c\u5206\u6cbb\u7ed3\u6784\u6bcf\u4e2a\u70b9\u90fd\u50a8\u5b58\u5bf9\u5e94\u5206\u6cbb\u8303\u56f4\uff08\u7b80\u79f0\u8303\u56f4\uff09\u5185\u7684\u4fe1\u606f\uff0c\u8be2\u95ee\u65f6\u4ecec\u5411\u540e\u8df3\u5206\u6cbb\u94fe\uff0c\u5e76\u9010\u7ea7\u5c06\u4fe1\u606f\u5408\u5e76\u5f97\u5230\u6574\u68f5\u6811\u7684\u7b54\u6848\u3002\n\n\u5bf9\u4e8e\u94fe\u4e0a\u67d0\u4e00\u70b9x\uff0c\u8bbe\u524d\u4e00\u4e2a\u70b9\u4e3apx\uff0c\u663e\u7136\u6211\u4eec\u9700\u8981\u7528\u5230\u7684\uff0cx\u8303\u56f4\u4e2d\uff08\u9664\u53bbpx\u8303\u56f4\uff09\u7684\u6240\u6709\u5408\u6cd5\u7684\u70b9\uff08\u5373\u70b9\u6743\u5728\\[l,r\\]\u5185\u7684\u70b9\uff09\u5230c\u7684\u8ddd\u79bb\u4e4b\u548c\uff0c\u62c6\u5f00\u4e3a\u8fd9\u4e9b\u70b9\u5230x\u7684\u8ddd\u79bb\u548c+\u8fd9\u4e9b\u70b9\u7684\u4e2a\u6570\u4e58\u4ee5x\u5230c\u7684\u8ddd\u79bb\u3002\u5bf9\u4e8e\u7b2c\u4e00\u90e8\u5206\u6211\u4eec\u5c06\u5b83\u770b\u4f5cx\u8303\u56f4\u5185\u6240\u6709\u70b9\u5230x\u7684\u8ddd\u79bb\u548c-px\u8303\u56f4\u5185\u6240\u6709\u70b9\u5230x\u7684\u8ddd\u79bb\u548c\uff0c\u7b2c\u4e8c\u90e8\u5206\u540c\u7406\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u6bcf\u4e2a\u8282\u70b9x\u50a8\u5b58\u8303\u56f4\u5185\u6240\u6709\u70b9\u70b9\u6743age\u3001\u5230x\u7684\u8ddd\u79bbdis\u4ee5\u53ca\u5230\u4e0a\u4e00\u7ea7\u5206\u6cbb\u4e2d\u5fc3fa\\[x\\]\u7684\u8ddd\u79bbldis\uff08\u653e\u5728\u96c6\u5408d\\[x\\]\uff09\u3002\u7136\u540e\u5c06d\\[x\\]\u6309\u7167age\u6392\u5e8f\uff0c\u90a3\u4e48x\u7684\u5206\u6cbb\u8303\u56f4\u5bf9\u4e8e\u67e5\u8be2\u4e2d\u5fc3c\u7684\u4ea7\u751f\u8d21\u7684\u70b9\u732e\u5904\u4e8ed\\[x\\]\u7684\u4e00\u6bb5\u533a\u95f4\u4e0a\u3002\u5229\u7528\u524d\uff08\u540e\uff09\u7f00\u548c+\u4e8c\u5206\u5c31\u80fd\u5730\u5f88\u597d\u5904\u7406\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define IL inline \n#define LL long long \nusing namespace std;\n\nconst int N=150010;\nconst int inf=0x3f3f3f3f;\n\nint n,Q,A,age[N];\nint head[N],to[N<<1],last[N<<1],len[N<<1];\n\nIL void addEdge(int x,int y,int w) {\n\tstatic int cnt=0;\n\tto[++cnt]=y,len[cnt]=w,last[cnt]=head[x],head[x]=cnt;\n\tto[++cnt]=x,len[cnt]=w,last[cnt]=head[y],head[y]=cnt;\n}\nnamespace dbl {\n\tint fa[N][20],dep[N];\n\tLL ds[N][20];\n\tvoid prDfs(int x,int d) {\n\t\tdep[x]=dep[fa[x][0]=d]+1;\n\t\tfor(int i=1; (1<<i)<=dep[x]; ++i) {\n\t\t\tfa[x][i]=fa[fa[x][i-1]][i-1];\n\t\t\tds[x][i]=ds[fa[x][i-1]][i-1]+ds[x][i-1];\n\t\t}\n\t\tfor(int i=head[x]; i; i=last[i]) {\n\t\t\tif(to[i]!=d) ds[to[i]][0]=len[i],prDfs(to[i],x);\n\t\t}\n\t}\n\tIL LL gtDis(int x,int y) {\n\t\tif(dep[x]<dep[y]) swap(x,y);\n\t\tLL ret=0; int dif=dep[x]-dep[y];\n\t\tfor(int i=19; ~i; --i) if((dif>>i)&1) \n\t\t\tret+=ds[x][i],x=fa[x][i];\n\t\tif(x==y) return ret;\n\t\tfor(int i=19; ~i; --i) if(fa[x][i]!=fa[y][i]) \n\t\t\tret+=ds[x][i],x=fa[x][i],ret+=ds[y][i],y=fa[y][i];\n\t\treturn ret+ds[x][0]+ds[y][0];\n\t}\n}\nnamespace dpd {\n\tstruct node {\n\t\tLL dis,ldis; int age;\n\t\tIL node(LL d=0,LL ld=0,int a=0):dis(d),ldis(ld),age(a){}\t\n\t\tIL bool operator<(const node&d) const {\n\t\t\treturn age<d.age;\n\t\t}\n\t};\n\tvector<node> d[N];\n\tint root,siz[N],fa[N];\n\tbool ban[N];\n\tvoid prSiz(int x,int d) {\n\t\tsiz[x]=1; \n\t\tfor(int i=head[x]; i; i=last[i]) if(!ban[to[i]]&&to[i]!=d) \n\t\t\tprSiz(to[i],x),siz[x]+=siz[to[i]];\n\t}\n\tvoid gtRoot(int x,int d,int t) {\n\t\tstatic int f[N]={inf}; f[x]=siz[t]-siz[x];\n\t\tfor(int i=head[x]; i; i=last[i]) if(!ban[to[i]]&&to[i]!=d) \n\t\t\tgtRoot(to[i],x,t),f[x]=max(f[x],siz[to[i]]);\n\t\tif(f[x]<f[root]) root=x;\n\t}\n\tvoid prNode(int x,int d,LL dis) {\n\t\tdpd::d[root].push_back(node(dis,dbl::gtDis(x,fa[root]),age[x]));\n\t\tfor(int i=head[x]; i; i=last[i]) {\n\t\t\tif(!ban[to[i]]&&to[i]!=d) prNode(to[i],x,dis+len[i]);\n\t\t}\n\t}\n\tvoid build(int x,int lrt) {\n\t\troot=0; prSiz(x,0); gtRoot(x,0,x); \n\t\tx=root; fa[x]=lrt; ban[x]=1; prNode(x,0,0);\n\t\tsort(d[x].begin(),d[x].end());\n\t\td[x].push_back(node(0,0,A));\n\t\tfor(unsigned i=d[x].size()-2; ~i; --i) {\n\t\t\td[x][i].dis+=d[x][i+1].dis;\n\t\t\td[x][i].ldis+=d[x][i+1].ldis;\n\t\t}\n\t\tfor(int i=head[x]; i; i=last[i]) {\n\t\t\tif(!ban[to[i]]) build(to[i],x);\n\t\t}\n\t}\n\tIL LL query(int c,int l,int r) {\n\t\tvector<node>::iterator L,R; LL ans=0;\n\t\tfor(int x=c; x; x=fa[x]) {\n\t\t\tL=lower_bound(d[x].begin(),d[x].end(),node(0,0,l));\n\t\t\tR=upper_bound(d[x].begin(),d[x].end(),node(0,0,r));\n\t\t\tans+=dbl::gtDis(x,c)*(R-L)+(L->dis-R->dis);\n\t\t\tif(fa[x]) ans-=dbl::gtDis(fa[x],c)*(R-L)+(L->ldis-R->ldis);\n\t\t}\n\t\treturn ans;\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d%d\",&n,&Q,&A);\n\tfor(int i=1; i<=n; ++i) scanf(\"%d\",&age[i]);\n\tfor(int x,y,w,i=n; --i; ) {\n\t\tscanf(\"%d%d%d\",&x,&y,&w);\n\t\taddEdge(x,y,w);\n\t}\n\tdbl::prDfs(1,0);\n\tdpd::build(1,0); \n\tLL lans=0;\n\tfor(int u,a,b; Q--; ) {\n\t\tscanf(\"%d%d%d\",&u,&a,&b);\n\t\ta=(lans+a)%A, b=(lans+b)%A; if(a>b) swap(a,b); \n\t\tprintf(\"%lld\\n\",lans=dpd::query(u,a,b));\n\t}\n\treturn 0;\n} // \u4ee3\u7801O2\u9700\u8981\n\n```\n~~\u597d\u4e86\uff0c\u6eda\u53bb\u770b \u7d2b\u8346\u82b1\u4e4b\u604b \u4e86~~\n\n",
        "postTime": 1553435706,
        "uid": 125139,
        "name": "nosta",
        "ccfLevel": 8,
        "title": "[HNOI2015] \u5f00\u5e97"
    },
    {
        "content": "\u6253\u5e7f\u544a\uff1a[blog](https://www.cnblogs.com/bztMinamoto/p/9480501.html)\n\n\u5173\u4e8e\u70b9\u5206\u662f\u4ec0\u4e48\u697c\u4e0b\u8bb2\u7684\u542c\u6e05\u695a\u4e86~~\uff08\u4e3b\u8981\u662f\u6211\u6839\u672c\u8bb2\u4e0d\u6765\uff09~~\uff0c\u8fd8\u662f\u8bb2\u4e00\u4e0b\u672c\u9898\u7684\u601d\u8def\u5427\n\n\u8fd9\u9898\u6b63\u89e3\u662f\u52a8\u6001\u70b9\u5206\u6cbb\uff08\u4e0d\u8fc7\u636e\u8bf4\u4e3b\u5e2d\u6811+\u6811\u94fe\u5256\u5206\u8dd1\u5f97\u66f4\u5feb\uff1f\uff09\n\n\u3000\u3000\u5982\u679c\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u52a8\u6001\u70b9\u5206\u7684\u53ef\u4ee5\u53bb\u770b\u770b\u5e7b\u60f3\u4e61\u7684\u6218\u7565\u6e38\u620f->[\u849f\u84bb\u7684\u9898\u89e3](https://minamoto.blog.luogu.org/solution-p3345)\n\n\u3000\u3000\u8fd9\u4e00\u9053\u9898\uff0c\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u5206\u6811\u4e0a\u7684\u70b9\u7ef4\u62a4\u4ec0\u4e48\u3002\u6211\u4eec\u8bb0\u5f55\u4e09\u4e2a\u503c\uff0c$sz_0$\u8868\u793a\u5b50\u6811\u5185\u7684\u70b9\u6570\u4e4b\u548c\uff0c$sz_1$\u8868\u793a\u5b50\u6811\u5185\u6240\u6709\u70b9\u5230\u5176\u7684\u8ddd\u79bb\u4e4b\u548c\uff0c$sz_2$\u8868\u793a\u5b50\u6811\u5185\u6240\u6709\u70b9\u5230\u5176\u7236\u4eb2\u7684\u8ddd\u79bb\u4e4b\u548c\u3002\u90a3\u4e48\u8003\u8651\u6211\u4eec\u5728\u8df3\u70b9\u5206\u6811\u7684\u65f6\u5019\u8981\u5982\u4f55\u7ef4\u62a4\u7b54\u6848\u5462\uff1f\u5f88\u660e\u663e$sz_1[u]+\\sum sz_1[fa]-sz_2[p]+(sz_0[fa]-sz_0[p])*dist(fa,u)$\u5c31\u662f\u5728\u70b9\u5206\u6811\u4e0a\u4e0e$u$\u7684$LCA$\u662f$fa$\u7684\u6240\u6709\u70b9\u7684\u8ddd\u79bb\u4e4b\u548c\uff0c\u5176\u4e2d$fa$\u4e3a$p$\u7684\u7236\u4eb2\uff0c$p$\u4e3a\u4ece$u$\u4e0d\u65ad\u8df3\u7236\u4eb2\u76f4\u5230\u6839\uff0c\u90a3\u4e48\u53ea\u8981\u4e0d\u65ad\u679a\u4e3e$fa$\uff0c\u5e76\u4e0d\u65ad\u5f80\u4e0a\u8df3\u5e76\u7ef4\u62a4\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u3000\u3000\u7136\u800c\u4e0a\u9762\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\uff0c\u56e0\u4e3a\u5177\u4f53\u7684\u8ba1\u7b97\u4e0d\u662f\u8fd9\u6837\u7684\u3002\u6211\u4eec\u5bf9\u4e8e$u$\u70b9\u5185\u90e8\u7684\u8d21\u732e\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\uff0c\u7136\u540e\u8003\u8651\u5f80\u4e0a\u8df3\u3002\u5728\u4e0a\u8ff0\u7684\u5f0f\u5b50\u4e2d\u5982\u679c\u4e00\u4e2a\u70b9$p$\u6709$fa$\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u8981\u51cf\u53bb$sz_0[p]*dist(fa,u)+sz_2[p]$\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u4e0d\u662f$u$\u90a3\u4e48\u7b54\u6848\u5c31\u8981\u52a0\u4e0a$sz_0[p]+dist(p,u)$\uff0c\u7136\u540e\u6bcf\u4e00\u4e2a\u70b9\u90fd\u8981\u52a0\u4e0a\u81ea\u5df1\u7684$sz_1$\u3002\u6309\u8fd9\u4e2a\u89c4\u5f8b\u5728\u8df3\u70b9\u5206\u6811\u7684\u65f6\u5019\u4e0d\u65ad\u52a0\u5c31\u597d\u4e86\n\n\u3000\u3000\u7136\u540e\u8003\u8651\u600e\u4e48\u5728$[l,r]$\u4e4b\u5185\uff0c\u5f88\u660e\u663e\u53ef\u4ee5\u641e\u4e00\u4e2a\u5dee\u5206\uff0c\u628a\u6bcf\u4e00\u4e2a\u8282\u70b9\u5728\u70b9\u5206\u6811\u4e0a\u7684\u5b50\u6811\u5185\u7684\u6240\u6709\u5e74\u9f84\u7684\u8ddd\u79bb\u4e4b\u548c\u52a0\u8d77\u6765\uff0c\u5728\u505a\u524d\u7f00\u548c\uff0c\u90a3\u4e48\u5728\u5e74\u9f84$[l,r]$\u7684\u4eba\u6570\u5c31\u662f$[1,r]-[1,l-1]$\n```\n//minamoto\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<vector>\n#include<algorithm>\n#define ll long long\n#define N 150005\nusing namespace std;\n#define getc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<21],*p1=buf,*p2=buf;\ntemplate<class T>inline bool cmax(T&a,const T&b){return a<b?a=b,1:0;}\ninline int read(){\n    #define num ch-'0'\n    char ch;bool flag=0;int res;\n    while(!isdigit(ch=getc()))\n    (ch=='-')&&(flag=true);\n    for(res=num;isdigit(ch=getc());res=res*10+num);\n    (flag)&&(res=-res);\n    #undef num\n    return res;\n}\nchar sr[1<<21],z[20];int C=-1,Z;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\ninline void print(ll x){\n    if(C>1<<20)Ot();if(x<0)sr[++C]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]='\\n';\n}\nint head[N],Next[N<<1],ver[N<<1],edge[N<<1];\nint n,tot,val[N],q,maxn;\nint st[N<<1][19],d[N],dfn[N],num,bin[25],tp,logn[N<<1];\ninline void add(int u,int v,int e){\n\tver[++tot]=v,Next[tot]=head[u],head[u]=tot,edge[tot]=e;\n\tver[++tot]=u,Next[tot]=head[v],head[v]=tot,edge[tot]=e;\n}\ninline void ST(){\n\tfor(int j=1;j<=tp;++j)\n\tfor(int i=1;i+bin[j]-1<=(n<<1);++i)\n\tst[i][j]=min(st[i][j-1],st[i+bin[j-1]][j-1]);\n}\nvoid dfs1(int u,int fa){\n\tst[dfn[u]=++num][0]=d[u];\n\tfor(int i=head[u];i;i=Next[i]){\n\t\tint v=ver[i];\n\t\tif(v==fa) continue;\n\t\td[v]=d[u]+edge[i],dfs1(v,u),st[++num][0]=d[u];\n\t}\n}\nint fa[N],sz[N],son[N],size,rt;bool vis[N];\nvoid dfs2(int u,int fa){\n\tsz[u]=1,son[u]=0;\n\tfor(int i=head[u];i;i=Next[i]){\n\t\tint v=ver[i];\n\t\tif(vis[v]||v==fa) continue;\n\t\tdfs2(v,u),sz[u]+=sz[v],cmax(son[u],sz[v]);\n\t}\n\tcmax(son[u],size-sz[u]);\n\tif(son[u]<son[rt]) rt=u;\n}\ninline ll dis(int a,int b){\n\tif(dfn[a]>dfn[b]) a^=b^=a^=b;\n\tint k=logn[dfn[b]-dfn[a]+1];\n\treturn d[a]+d[b]-(min(st[dfn[a]][k],st[dfn[b]-bin[k]+1][k])<<1);\n}\nstruct node{\n\tint val;ll sz[3];\n\tnode(int a=0,ll b=0,ll c=0,ll d=0){val=a,sz[0]=b,sz[1]=c,sz[2]=d;}\n\tinline bool operator <(const node &b)const\n\t{return val<b.val;}\n};\nvector<node> sta[N];\nvoid dfs3(int u,int f,int rt){\n\tsta[rt].push_back(node(val[u],1,dis(u,rt),fa[rt]?dis(u,fa[rt]):0));\n\tfor(int i=head[u];i;i=Next[i]){\n\t\tint v=ver[i];\n\t\tif(v==f||vis[v]) continue;\n\t\tdfs3(v,u,rt);\n\t}\n}\nvoid dfs4(int u){\n\tvis[u]=true;\n\tdfs3(u,0,u);sta[u].push_back(node(-1,0,0,0));\n\tsort(sta[u].begin(),sta[u].end());\n\tfor(int i=0,j=sta[u].size();i<j-1;++i)\n\tsta[u][i+1].sz[0]+=sta[u][i].sz[0],\n\tsta[u][i+1].sz[1]+=sta[u][i].sz[1],\n\tsta[u][i+1].sz[2]+=sta[u][i].sz[2];\n\tfor(int i=head[u];i;i=Next[i]){\n\t\tint v=ver[i];\n\t\tif(vis[v]) continue;\n\t\trt=0,size=sz[v];\n\t\tdfs2(v,0),fa[rt]=u,dfs4(rt);\n\t}\n}\ninline node query(int id,int l,int r){\n\tif(id==0) return node();\n\tvector<node>::iterator it1=upper_bound(sta[id].begin(),sta[id].end(),node(r,0,0,0));--it1;\n\tvector<node>::iterator it2=upper_bound(sta[id].begin(),sta[id].end(),node(l-1,0,0,0));--it2;\n\treturn node(0,it1->sz[0]-it2->sz[0],it1->sz[1]-it2->sz[1],it1->sz[2]-it2->sz[2]);\n}\ninline ll calc(int u,int l,int r){\n\tll res=0;\n\tfor(int p=u;p;p=fa[p]){\n\t\tnode a=query(p,l,r);\n\t\tres+=a.sz[1];\n\t\tif(p!=u) res+=a.sz[0]*dis(p,u);\n\t\tif(fa[p]) res-=a.sz[2]+a.sz[0]*dis(fa[p],u);\n\t}\n\treturn res;\n}\nint main(){\n\tll ans=0;\n\tn=read(),q=read(),maxn=read();\n\tbin[0]=1,logn[0]=-1;\n\tfor(int i=1;i<=20;++i) bin[i]=bin[i-1]<<1;\n\twhile(bin[tp+1]<=(n<<1)) ++tp;\n\tfor(int i=1;i<=(n<<1);++i) logn[i]=logn[i>>1]+1;\n\tfor(int i=1;i<=n;++i) val[i]=read();\n\tfor(int i=1;i<n;++i){\n\t\tint u=read(),v=read(),e=read();\n\t\tadd(u,v,e);\n\t}\n\tdfs1(1,0),ST();\n\trt=0,son[0]=n+1,size=n,dfs2(1,0);\n\tdfs4(rt);\n\twhile(q--){\n\t\tint a=read(),b=read(),c=read();\n\t\tb=(b+ans)%maxn,c=(c+ans)%maxn;\n\t\tif(b>c) b^=c^=b^=c;\n\t\tprint(ans=calc(a,b,c));\n\t}\n\tOt();\n\treturn 0;\n}\n```",
        "postTime": 1534304347,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3241 \u3010[HNOI2015]\u5f00\u5e97\u3011"
    },
    {
        "content": "\u5efa\u8bae\u5148\u505a\u4e00\u4e0b\uff1a[P4211 [LNOI2014]LCA](https://www.luogu.com.cn/problem/P4211)\n\n\u5982\u679c\u4f60\u505a\u4e86\u4e0a\u9762\u90a3\u9898\uff0c\u4f60\u4f1a\u53d1\u73b0\u6b64\u9898\u4e3a\u5f3a\u5236\u5728\u7ebf\u7248\uff0c\u800c\u4e14\u6dfb\u52a0\u4e86\u8fb9\u6743\u3002\n\n\u5176\u5b9e\u4e0d\u8981\u7d27\uff0c\u90a3\u4e2a\u8be2\u95ee\u5dee\u5206\u7684\u601d\u8def\u4ecd\u7136\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\uff0c\u53ea\u4e0d\u8fc7\u8981\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5b9e\u73b0\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u628a $age$ \u6392\u5e8f\uff0c\u7136\u540e\u5148\u6811\u5256\uff0c\u6309 $age$ \u987a\u5e8f\u5efa\u4e3b\u5e2d\u6811\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6709\u8fb9\u6743\u4e4b\u540e\u6709\u4e9b\u96be\u5904\u7406\u3002\n\n\u9996\u5148\u662f\u4e3b\u5e2d\u6811\u8981\u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u56e0\u4e3a\u6bcf\u6b21\u4fee\u6539\u662f\u6807\u8bb0\u7ffb\u500d\uff0c\u6240\u4ee5\u53ef\u4ee5\u7ef4\u62a4 $tim$ \u6570\u7ec4\uff0c\u8868\u793a\u8986\u76d6\u51e0\u6b21\uff0c\u53ef\u4ee5\u4e58\u4e0a\u8fb9\u6743\u548c\u6765\u8ba1\u7b97\u8d21\u732e\u3002\n\n\u5176\u6b21\u5c31\u662f\u8981\u5229\u7528\u8ddd\u79bb\u516c\u5f0f\u6765\u8ba1\u7b97\u7b54\u6848\uff0c\u5982\u8be2\u95ee$l$ $r$ $x$\u90a3\u4e48\u7b54\u6848\u5e94\u4e3a\uff1a $dis[x] * (r - l + 1) + (sumd[r] - sumd[l - 1]) - Query(root[r], root[l - 1], x) * 2)$ \n\ncode:\n\n```cpp\n// Program written by Liu Zhaozhou ~~~\n\nconst int Maxn = 15e4 + 1;\nconst int Maxm = 3e5 + 1;\nconst int Maxt = Maxn * 49;\n\nint n, q, ages, cnt = 0, head[Maxn], ver[Maxm], edge[Maxm], nxt[Maxm];\ninline void AddEdge(int u, int v, int w) {\n\tver[++cnt] = v, edge[cnt] = w, nxt[cnt] = head[u], head[u] = cnt;\n\tver[++cnt] = u, edge[cnt] = w, nxt[cnt] = head[v], head[v] = cnt;\n}\n\nstruct state {\n\tint age, idx;\n\tstate(void) { age = idx = 0; }\n\tstate(int a, int i) : age(a), idx(i) {}\n\tinline bool operator < (const state&rhs) const { return age == rhs.age ? idx < rhs.idx : age < rhs.age; } \n} a[Maxn];\n\nll dis[Maxn], sume[Maxn], sumd[Maxn];\nint sze[Maxn], son[Maxn], fat[Maxn];\nint top[Maxn], dfn[Maxn], timer = 0;\ninline void DfsFir(int u) {\n\tsze[u] = 1;\n\tfor (int i = head[u]; i; i = nxt[i]) {\n\t\tif (ver[i] == fat[u]) continue;\n\t\tdis[ver[i]] = dis[u] + edge[i];\n\t\tfat[ver[i]] = u; DfsFir(ver[i]);\n\t\tsze[u] += sze[ver[i]];\n\t\tif (sze[son[u]] < sze[ver[i]]) son[u] = ver[i];\n\t}\n}\n\ninline void DfsSec(int u, int t) {\n\ttop[u] = t, dfn[u] = ++timer;\n\tsume[timer] = dis[u] - dis[fat[u]];\n\tif (son[u]) DfsSec(son[u], t);\n\tfor (int i = head[u]; i; i = nxt[i]) {\n\t\tif (ver[i] == fat[u] || ver[i] == son[u]) continue;\n\t\tDfsSec(ver[i], ver[i]);\n\t}\n}\n\nint lson[Maxt], rson[Maxt], tim[Maxt], root[Maxn], tot = 0; ll sum[Maxt];\ninline void inherit(int p, int q) { lson[p] = lson[q], rson[p] = rson[q], sum[p] = sum[q], tim[p] = tim[q]; }\ninline void insert(int &pos, int l, int r, int L, int R) {\n\tinherit(++tot, pos); pos = tot; \n\tif (L <= l && R >= r) { sum[pos] += sume[r] - sume[l - 1]; ++tim[pos]; return; }\n\tint mid = l + r >> 1;\n\tif (L <= mid) insert(lson[pos], l, mid, L, R);\n\tif (R > mid) insert(rson[pos], mid + 1, r, L, R);\n\tsum[pos] = sum[lson[pos]] + sum[rson[pos]] + (sume[r] - sume[l - 1]) * tim[pos];\n}\n\ninline void Modify(int &rt, int pos) { while (pos) insert(rt, 1, n, dfn[top[pos]], dfn[pos]), pos = fat[top[pos]]; }\ninline ll query(int p, int q, int l, int r, int L, int R) {\n\tif (!p) return 0;\n\tif (L <= l && R >= r) return sum[p] - sum[q];\n\tint mid = l + r >> 1; ll ret = (sume[min(R, r)] - sume[max(L, l) - 1]) * (tim[p] - tim[q]);\n\tif (L <= mid) ret += query(lson[p], lson[q], l, mid, L, R);\n\tif (R > mid) ret += query(rson[p], rson[q], mid + 1, r, L, R);\n\treturn ret;\n}\n\ninline ll Query(int p, int q, int x) { ll ret = 0ll; while (x) ret += query(p, q, 1, n, dfn[top[x]], dfn[x]), x = fat[top[x]]; return ret; }\n\nsigned main(void) {\n//\tfile(\"\");\n\tread(n), read(q), read(ages);\n\tfor (int i = 1; i <= n; i++) read(a[i].age), a[i].idx = i;\n\tsort(a + 1, a + n + 1);\n\tfor (int i = 1, u, v, w; i < n; i++) read(u), read(v), read(w), AddEdge(u, v, w);\n\tDfsFir(1), DfsSec(1, 1);\n\tfor (int i = 1; i <= n; i++) sume[i] += sume[i - 1], sumd[i] = sumd[i - 1] + dis[a[i].idx];\n\tfor (int i = 1; i <= n; i++) Modify(root[i] = root[i - 1], a[i].idx);\n\tll lastans = 0; int l, r, x;\n\twhile (q--) {\n\t\tread(x), read(l), read(r);\n\t\tl = (l + lastans) % ages;\n\t\tr = (r + lastans) % ages;\n\t\tif (l > r) swap(l, r);\n\t\tl = lower_bound(a + 1, a + n + 1, state(l, 0)) - a;\n\t\tr = upper_bound(a + 1, a + n + 1, state(r, n)) - (a + 1);\n\t\twriteln(lastans = (dis[x] * (r - l + 1) + (sumd[r] - sumd[l - 1]) - Query(root[r], root[l - 1], x) * 2));\n\t}\n//\tfwrite(pf, 1, o1 - pf, stdout);\n\treturn 0;\n}\n\n/**/\n\n\n\n```\n",
        "postTime": 1597459597,
        "uid": 50925,
        "name": "EternalEpic",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3241 \u3010[HNOI2015]\u5f00\u5e97\u3011"
    },
    {
        "content": "\u52a8\u6001\u70b9\u5206\u6cbb\n\n\u5efa\u7acb\u70b9\u5206\u6811\uff0c\u4f7f\u7528 `vector` \u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5728\u70b9\u5206\u6811\u4e0a\u7684\u6240\u6709\u7956\u5148\u4ee5\u53ca\u5b83\u5230\u7956\u5148\u7684\u8ddd\u79bb\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $u$\uff0c\u8bbe $u$ \u7684\u5b50\u6811\u4e2d\u7684\u70b9\u5230 $u$ \u7684\u8ddd\u79bb\u548c\u4e3a $sum_u$\uff0c\u5b50\u6811\u5927\u5c0f\u4e3a $num_u$\n\n\u5bf9\u4e8e $u$ \u7684\u4e00\u4e2a\u7956\u5148 $v$\uff0c\u5b83\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a\uff1a$dis_{u,v}+dis_{u,v}\\times(num_v-num_u)+sum_v-sum_u$\n\n\u6ce8\u610f\uff01\u6b64\u5904\u4e0d\u662f\u51cf\u6cd5\uff0c\u70b9\u5206\u6811\u4e2d\u7684\u4fe1\u606f\u4e0d\u80fd\u76f8\u51cf\uff0c\u6b64\u5904\u7684\u51cf\u53f7\u8868\u793a\u4e0d\u5305\u542b\n\n\u53d1\u73b0\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u4e0d\u8d85\u8fc7 $3$\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6bcf\u4e2a\u70b9\u5f00\u4e09\u4e2a `vector` \u8bb0\u5f55\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u7684\u70b9\u6743\u3001\u5230 $u$ \u7684\u8ddd\u79bb\n\n\u8fd9\u6837\u6211\u4eec\u628a\u4e09\u4e2a `vector` \u5206\u522b\u6309\u7167\u70b9\u6743\u6392\u5e8f\uff0c\u7ef4\u62a4\u4e00\u4e2a\u540e\u7f00\u548c\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u4e8c\u5206\u67e5\u627e\u5373\u53ef\n\n\u4e3a\u4ec0\u4e48\u662f\u540e\u7f00\u548c\u5462\uff1f\u8bbe\u6211\u4eec\u8981\u627e\u7684\u533a\u95f4\u4e3a $[l,r]$\uff0c\u5982\u679c\u662f\u524d\u7f00\u548c\uff0c\u6211\u4eec\u9700\u8981\u5f97\u5230 $l-1$ \u548c $r$\uff0c\u800c\u8fd9\u4e2a\u4e1c\u897f\u9700\u8981 `lower_bound` \u518d\u51cf $1$\u3001`upper_bound` \u518d\u51cf $1$\uff0c\u8fd8\u9700\u8981\u5224\u8fb9\u754c\u3002\u800c\u5982\u679c\u662f\u540e\u7f00\u548c\uff0c\u6211\u4eec\u9700\u8981\u5f97\u5230 $l$ \u548c $r+1$\uff0c\u8fd9\u4e2a\u76f4\u63a5 `lower_bound`\u3001`upper_bound` \u5373\u53ef\n\n```cpp\nconst int N = 150010,M = N;\nint n,q,A;ll ans;\nEE(1);int x[N];\n\nint siz[N],S,root,mxr;bool vis[N];\nvoid get_siz(int u,int fa)\n{\n\tsiz[u] = 1;\n\tfor(int i = head[u],v;i;i = e[i].nxt) if((v = e[i].to) != fa && !vis[v])\n\t\tget_siz(v,u),siz[u] += siz[v];\n}\nvoid get_root(int u,int fa)\n{\n\tint maxx = S - siz[u];\n\tfor(int i = head[u],v;i;i = e[i].nxt) if((v = e[i].to) != fa && !vis[v])\n\t\tget_root(v,u),maxx = max(maxx,siz[v]);\n\tif(maxx < mxr) mxr = maxx,root = u;\n}\nstruct anc { int to;ll dis;int ty; };vector<anc> v[N];\nstruct data\n{\n\tint w;ll num,sum;\n\tfriend bool operator < (data a,data b) { return a.w < b.w; }\n};vector<data> s[N][3];\nint dep[N];\nvoid dfs(int u,int fa,int fr,int w)\n{\n\tv[u].push_back({fr,dep[u],w});\n\ts[fr][w].push_back({x[u],1,dep[u]});\n\tfor(int i = head[u],v;i;i = e[i].nxt) if((v = e[i].to) != fa && !vis[v])\n\t\tdep[v] = dep[u] + e[i].w,dfs(v,u,fr,w);\n}\nvoid solve(int u)\n{\n\tget_siz(u,0),S = siz[u],mxr = INF,get_root(u,0);\n\tvis[root] = 1,v[root].push_back({root,0,-1});\n\tif(siz[u] == 1) return;\n\tint cnt = 0;\n\tfor(int i = head[root],v;i;i = e[i].nxt) if(!vis[v = e[i].to])\n\t{\n\t\tdep[v] = e[i].w,dfs(v,root,root,cnt);\n\t\tauto& now = s[root][cnt];\n\t\tnow.push_back({INF,0,0});\n\t\tsort(now.begin(),now.end());\n\t\tfor(int j = now.size() - 2;~j;j--)\n\t\t\tnow[j].num += now[j + 1].num,now[j].sum += now[j + 1].sum;\n\t\tcnt++;\n\t}for(int i = head[root],v;i;i = e[i].nxt) if(!vis[v = e[i].to]) solve(v);\n}\nll query(int l,int r,int u)\n{\n\tll ans = 0;\n\tfor(int i = v[u].size() - 1;~i;i--)\n\t{\n\t\tint fa = v[u][i].to;\n\t\tfor(int j = 0;j < 3;j++)\n\t\t{\n\t\t\tauto& now = s[fa][j];\n\t\t\tif(j == v[u][i].ty || now.empty()) continue;\n\t\t\tauto L = lower_bound(now.begin(),now.end(),(data){l,0,0});\n\t\t\tauto R = upper_bound(now.begin(),now.end(),(data){r,0,0});\n\t\t\tans += v[u][i].dis * (L->num - R->num) + L->sum - R->sum;\n\t\t}if(l <= x[fa] && r >= x[fa]) ans += v[u][i].dis;\n\t}return ans;\n}\nint main()\n{\n\tn = read(),q = read(),A = read();\n\tfor(int i = 1;i <= n;i++) x[i] = read();\n\tfor(int i = 1;i < n;i++) { int x = read(),y = read();add_edge(x,y,read()); }\n\tsolve(1);\n\tfor(int i = 1;i <= q;i++)\n\t{\n\t\tll u = read(),l = read(),r = read();\n\t\tl = (l + ans) % A,r = (r + ans) % A;if(l > r) swap(l,r);\n\t\tfprint(ans = query(l,r,u));\n\t}\n}\n```",
        "postTime": 1593433643,
        "uid": 53994,
        "name": "81179332_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3241 \u3010[HNOI2015]\u5f00\u5e97\u3011"
    },
    {
        "content": "# \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u9897\u5927\u5c0f\u4e3a $N$ \u7684\u65e0\u6839\u4e8c\u53c9\u6811\uff0c\u8fb9\u5e26\u6743\u70b9\u5e26\u6743\u3002$Q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa $l,r,u$\uff0c\u6c42\u6240\u6709\u70b9\u6743\u5904\u4e8e $[l,r]$ \u533a\u95f4\u7684\u70b9\u5230\u70b9 $u$ \u7684\u8ddd\u79bb\u548c\u3002$N\\le1.5\\times10^5$\uff0c$Q\\le2\\times10^5$\uff0c\u5f3a\u5236\u5728\u7ebf\u3002\n\n# \u601d\u8def\n\n\u8003\u8651\u5355\u6b21\u8be2\u95ee\u600e\u4e48\u505a\u3002\u4ece $u$ \u5f00\u59cb\u505a\u4e00\u904d DFS\uff1f\u8fd9\u4e2a\u505a\u6cd5\u5982\u679c\u8981\u63a8\u5e7f\u5230\u591a\u6b21\u8be2\u95ee\u9700\u8981\u6362\u6839 DP\uff0c\u4f46\u5f3a\u5236\u5728\u7ebf\u3002\u8003\u8651\u6811\u5206\u6cbb\uff0c\u4ece\u70b9\u6216\u8fb9\u5206\u6811\u7684\u6811\u6839\u5f00\u59cb\u5411 $u$ \u8d70\uff0c\u6bcf\u6b21\u8ba1\u7b97\u548c $u$ \u4e0d\u5728\u540c\u4e00\u5b50\u6811\u4e2d\u7684\u70b9\u7684\u8d21\u732e\u3002\u6bcf\u6b21\u8be2\u95ee\u8981\u67e5\u8be2 $O(logn)$ \u4e2a\u70b9\u7684\u7b54\u6848\uff0c\u6bcf\u6b21\u67e5\u8be2\u90fd\u662f\u533a\u95f4\u548c\u95ee\u9898\uff0c\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u6216\u8005\u6392\u5e8f\u524d\u7f00\u548c\u52a0\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\u603b\u590d\u6742\u5ea6 $O(nlog^2n)$\u3002\n\n\u8003\u8651\u80fd\u4e0d\u80fd\u4f18\u5316\u6389\u4e00\u53ea $log$\u3002\u4e00\u4e2a\u5f88\u6709\u4ef7\u503c\u4e14\u53ef\u63a8\u5e7f\u5230\u5176\u4ed6\u9898\u7684\u60f3\u6cd5\uff1a\u524d\u7f00\u548c\u7684\u590d\u6742\u5ea6\u74f6\u9888\u5728\u4e8e\u4e8c\u5206\uff0c\u800c\u4e8c\u5206\u7684\u5fc5\u8981\u5728\u4e8e\u65f6\u95f4\u7a7a\u95f4\u4e0d\u591f\u5728\u6bcf\u4e2a\u70b9\u4e0a\u90fd\u5f00 $O(n)$ \u524d\u7f00\u548c\u3002\u80fd\u4e0d\u80fd\u7528\u4ec0\u4e48\u529e\u6cd5\u4f7f\u5f97\u53ef\u4ee5 $O(n)$ \u524d\u7f00\u548c\u5374\u4e0d\u7206\u7a7a\u95f4\uff1f\u53d1\u73b0\u5f53\u524d\u7f00\u548c\u5728\u5b58\u6709\u6240\u6709\u7684\u4e0d\u540c\u70b9\u6743\u65f6\uff0c\u5229\u7528\u7387\u6700\u5927\uff0c\u90a3\u4e48\u5c31\u8003\u8651\u628a\u8fd9\u4e2a\u524d\u7f00\u548c\u7ed9\u63d0\u5230\u5916\u9762\u6765\u3002\u90a3\u4e48\u5728\u5916\u9762\u7684\u524d\u7f00\u548c\uff0c\u91cc\u9762\u53c8\u5957\u4e86\u522b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u662f\u4ec0\u4e48\uff1f\u53ef\u6301\u4e45\u5316\u7ef4\u62a4\u7b2c\u4e8c\u7ef4\u6709\u53ef\u51cf\u6027\u7684\u4fe1\u606f\u3002\n\n# \u5b9e\u73b0\n\n\u8003\u8651\u5177\u4f53\u600e\u4e48\u5b9e\u73b0\u3002\n\n\u9996\u5148\uff0c\u9009\u62e9\u70b9\u5206\u6811\u8fd8\u662f\u8fb9\u5206\u6811\uff1f\u9898\u76ee\u4e2d\u8bf4\u6811\u5df2\u7ecf\u4e09\u5ea6\u5316\uff0c\u6240\u4ee5\u4f7f\u7528\u8fb9\u5206\u6811\u6765\u7b80\u5316\u4fee\u6539\u548c\u67e5\u8be2\u64cd\u4f5c\u3002\n\n\u6ce8\u610f\u5230\u70b9\u6743\u6700\u5927\u503c\u5f88\u5927\uff0c\u9700\u8981\u79bb\u6563\u5316\u3002\u5148\u4e00\u904d\u8fb9\u5206\u6cbb\u786e\u5b9a\u597d\u8fb9\u5206\u6811\u7684\u5f62\u6001\uff0c\u7136\u540e\u628a\u70b9\u6309\u7167\u70b9\u6743\u6392\u5e8f\uff0c\u4f9d\u6b21\u52a0\u5165\u53ef\u6301\u4e45\u5316\u8fb9\u5206\u6811\u91cc\u3002\n\n\u8fd9\u91cc\u786e\u5b9a\u8fb9\u5206\u6811\u5f62\u6001\uff0c\u6309\u70b9\u6bcf\u5c42\u5206\u6cbb\u5904\u4e8e\u5206\u6cbb\u4e2d\u5fc3\u7684\u54ea\u4e00\u4fa7\u6765\u6784\u5efa\u4e00\u4e2a 01 \u4e32\u3002\u6240\u4ee5\u6700\u540e\u7684\u8fb9\u5206\u6811\u5c31\u5f88\u50cf\u662f\u4e00\u9897 01 Trie\u3002\u8fb9\u5206\u6811\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u5f53\u524d\u70b9\u6240\u4ee3\u8868\u7684\u8fde\u901a\u5757\u7684\u4fe1\u606f\uff0c\u5982\u8054\u901a\u5757\u4e2d\u70b9\u7684\u4e2a\u6570\u4ee5\u53ca\u8054\u901a\u5757\u4e2d\u6240\u6709\u70b9\u5230\u4e0a\u4e00\u5c42\u5206\u6cbb\u4e2d\u5fc3\u7684\u8ddd\u79bb\u548c\u3002\u90a3\u4e48\u6bcf\u6b21\u67e5\u8be2\u5c31\u8ba1\u7b97\u5728\u5206\u6cbb\u4e2d\u5fc3\u53e6\u4e00\u4fa7\u7684\u70b9\u5bf9\u70b9 $u$ \u7684\u8d21\u732e\u5373\u53ef\u3002\n\n\u4ee3\u7801\u53bb\u6389\u4e86\u65e0\u5173\u7d27\u8981\u7684\u90e8\u5206\u3002\n\n```cpp\nint n,m;\nLL lst;\nint v[N+10],lsh[N+10],tl,aa;\nvector<int> vtn[N+10];\n\nint lrt,rt[N+10];\nint zx,mx;\nint sz[N+10];\nint bh[N+10];\nint dis[LGN+10][N+10];\nint de[N+10];\n\nvoid GetAns(int u,int fa,int d,int dep){\n\tdis[dep][u]=d;\n\tfor(int i=head[u],v=e[i].t;i;i=e[i].n,v=e[i].t)\n\t\tif(v!=fa&&!used[i>>1])\n\t\t\tGetAns(v,u,d+e[i].w,dep);\n}\n\nvoid GetRoot(int u,int fa,int tsz){\n\tsz[u]=1;\n\tfor(int i=head[u],v=e[i].t;i;i=e[i].n,v=e[i].t)\n\t\tif(!used[i>>1]&&v!=fa){\n\t\t\tGetRoot(v,u,tsz);\n\t\t\tsz[u]+=sz[v];\n\t\t\tif(Max(tsz-sz[v],sz[v])<mx)\n\t\t\t\tmx=Max(tsz-sz[v],sz[v]),zx=i;\n\t\t}\n}\n\nvoid Divide(int u,int tsz,int bit,int dep){\n\tif(tsz==1)\n\t\treturn bh[u]=bit,de[u]=dep,void();\n\tzx=0,mx=tsz;\n\tGetRoot(u,0,tsz);\n\tint dq=zx;\n\tused[dq>>1]=1;\n\tGetAns(e[dq].t,0,e[dq].w,dep);\n\tGetAns(e[dq^1].t,0,0,dep);\n\tint szz=sz[e[dq].t];\n\tDivide(e[dq].t,szz,bit,dep+1);\n\tDivide(e[dq^1].t,tsz-szz,bit|(1<<dep),dep+1);\n}\n\nnamespace EDT{\n#define SM(u) tr[u].sm\n#define SL(u) tr[u].sl\n#define S(u,x) tr[u].s[x]\n#define LS(u) tr[u].s[0]\n#define RS(u) tr[u].s[1]\n\n\tint tn;\n\n\tstruct NODE{\n\t\tLL sm;\n\t\tint sl;\n\t\tint s[2];\n\t}tr[N*LGN+10];\n\n\tint Add(int old,int x,int dep){\n\t\tint u=++tn;\n\t\tbool tmp=(bh[x]>>dep)&1;\n\t\tSM(u)=SM(old);\n\t\tSL(u)=SL(old);\n\t\tif(dep==de[x])\n\t\t\treturn u;\n\t\tS(u,tmp^1)=S(old,tmp^1);\n\t\tS(u,tmp)=Add(S(old,tmp),x,dep+1);\n\t\tSM(S(u,tmp))+=dis[dep][x];\n\t\t++SL(S(u,tmp));\n\t\treturn u;\n\t}\n\n\tLL Query(int u,int x,int dep){\n\t\tif(dep==de[x])\n\t\t\treturn 0;\n\t\tint tmp=(bh[x]>>dep)&1;\n\t\treturn Query(S(u,tmp),x,dep+1)+SM(S(u,tmp^1))+1ll*SL(S(u,tmp^1))*dis[dep][x];\n\t}\n}\n\nint main(){\n\tn=Read(),m=Read()+1,aa=Read();\n\tfor(int i=1;i<=n;++i)\n\t\tlsh[++tl]=v[i]=Read();\n\tsort(lsh+1,lsh+tl+1);\n\ttl=unique(lsh+1,lsh+tl+1)-lsh-1;\n\tfor(int i=1;i<=n;++i)\n\t\tvtn[v[i]=lower_bound(lsh+1,lsh+1+tl,v[i])-lsh].push_back(i);\n\tfor(int i=1;i<n;++i)\n\t\tAdde(Read(),Read(),Read());\n\tDivide(1,n,0,0);\n\tfor(int i=1;i<=tl;++i){\n\t\tfor(auto x:vtn[i])\n\t\t\tlrt=EDT::Add(lrt,x,0);\n\t\trt[i]=lrt;\n\t}\n\twhile(--m){\n\t\tint u=Read(),a=Read(),b=Read();\n\t\ta=(a+lst)%aa,b=(b+lst)%aa;\n\t\tif(a>b)\n\t\t\tswap(a,b);\n\t\ta=lower_bound(lsh+1,lsh+1+tl,a)-lsh-1,b=upper_bound(lsh+1,lsh+1+tl,b)-lsh-1;\n\t\tprintf(\"%lld\\n\",lst=EDT::Query(rt[b],u,0)-EDT::Query(rt[a],u,0));\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1653392302,
        "uid": 190926,
        "name": "__OccDreamer__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3[HNOI2015]\u5f00\u5e97"
    },
    {
        "content": "\u725b\u903c\u9898\u3002\n\n\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u70b9\u6709\u70b9\u6743\uff0c\u8fb9\u6709\u8fb9\u6743 $\\in[0,A)$\uff0c\u8981\u6c42\u5728\u7ebf\u7ef4\u62a4\u4e00\u4e2a\u8be2\u95ee $u,a,b$\uff0c\u6c42\u70b9\u6743\u5728 $[a,b]$ \u7684\u70b9\u5230 $u$ \u7684\u8ddd\u79bb\u4e4b\u548c\u3002\n\n\u8003\u8651\u4e00\u4e2a\u96c6\u5408 $S$ \u4e2d\u7684\u6240\u6709\u70b9\u5230 $u$ \u7684\u8ddd\u79bb\u600e\u4e48\u505a\uff0c\u662f $\\sum_{v\\in S}dis_v+dis_u-2dis_{lca(v,u)}$\u3002\n\n\u8fd9\u4e2a\u8be2\u95ee\u53ef\u4ee5\u5dee\u5206\u6389\uff0c\u53d8\u6210\u6c42\u70b9\u6743 $[1,b]-[1,a)$ \u7684\u5f62\u5f0f\uff0c\u7136\u540e\u53ef\u4ee5\u6574\u4e00\u4e2a\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u628a\u72b6\u6001\u8bb0\u5f55\u4e0b\u6765\n\n\u57fa\u672c\u7406\u6e05\u4e86\u601d\u8def\uff0c\u8003\u8651\u8fd9\u4e48\u4e00\u4e2a\u6d41\u7a0b\u3002\n\n\u5148\u6309\u7167\u70b9\u6743\u6392\u5e8f\uff0c\u679a\u4e3e $i\\in[0,A)$\uff0c\u6bcf\u6b21\u627e\u5230\u6700\u9760\u53f3\u7684\u70b9\u6743\u4e25\u683c\u5927\u4e8e $i$ \u7684\uff0c\u7136\u540e\u7ef4\u62a4\u8fd9\u524d\u9762\u7684\u70b9\uff0c\u8bb0\u5f55\u4e00\u4e2a $sumdis_i$ \u8868\u793a\u4e0a\u8ff0\u6240\u7ef4\u62a4\u7684 $dis$ \u4e4b\u548c\uff0c$totdis_i$ \u8868\u793a\u4e0a\u8ff0\u7ef4\u62a4\u7684\u70b9\u6709\u51e0\u4e2a\uff0c\u7136\u540e\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u52a0\u5165\u4e00\u4e2a\u70b9\uff0c\u5c31\u7ed3\u5408\u6811\u5256\u628a\u8fd9\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u6240\u6709 $app_i$ \u52a0\u4e00\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\uff0c\u62c6\u6210 $[1,v]\\to$ \u540e\u5c31\u662f $sumdis_v+totdis_v\\times dis_u$\uff0c\u7136\u540e\u51cf\u53bb\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e0a\u8be2\u95ee $u$ \u5230\u6839\u8282\u70b9\u4e0a\u7684 $dis_x\\times app_x$ \u4e4b\u548c\u4e58 $2$ \u5c31\u884c\u4e86\u3002\n\n\u73b0\u5728\u662f $11:07$\uff0c\u6211\u770b\u6211\u4ec0\u4e48\u65f6\u5019\u5199\u5b8c\u3002\n\n\u73b0\u5728\u662f $14:07$\uff0c\u6211\u7ec8\u4e8e\u5199\u5b8c\u4e86\u3002\n\n```cpp\n#define maxn 150010\nusing i64 = long long;\nint n,Q,A;\nint a[maxn];\n//tree\nint head[maxn],Next[maxn<<1],ver[maxn<<1],edge[maxn<<1],tot;\nvoid add(int x,int y,int z){\n  ver[++tot]=y,edge[tot]=z;\n  Next[tot]=head[x],head[x]=tot;\n}\nint dep[maxn],siz[maxn],fa[maxn],dis[maxn],rk[maxn],W[maxn];\nint son[maxn],top[maxn],dfn[maxn],id;\nvoid dfs1(int x){\n  siz[x]=1;\n  rg(i,x){\n    int y=ver[i];\n    if(dep[y])continue;\n    dis[y]=dis[x]+edge[i];\n    W[y]=edge[i];\n    dep[y]=dep[x]+1;\n    fa[y]=x;\n    dfs1(y);\n    siz[x]+=siz[y];\n    if(siz[son[x]]<siz[y])son[x]=y;\n  }\n}\nvoid dfs2(int x,int t){\n  dfn[x]=++id;top[x]=t;rk[id]=x;\n  if(!son[x])return;\n  dfs2(son[x],t);\n  rg(i,x)if(ver[i]!=fa[x]&&ver[i]!=son[x])dfs2(ver[i],ver[i]);\n}\n//decrease\nint o[maxn],cnt;\n//product\npair<int,int>g[maxn];\ni64 sumdis[maxn];\nint totdis[maxn];\nstruct prpr{\n  int lc,rc;\n  i64 sm,ex;\n  int app;\n}tree[maxn<<6];\nint nod,rt[maxn];\nint build(int l,int r){\n  int x=++nod;\n  if(l==r)return tree[x].ex=W[rk[l]],x;\n  int mid=(l+r)>>1;\n  tree[x].lc=build(l,mid);\n  tree[x].rc=build(mid+1,r);\n  tree[x].ex=tree[tree[x].lc].ex+tree[tree[x].rc].ex;\n  return x;\n}\nint insert(int now,int l,int r,int L=1,int R=n){\n  int x=++nod;\n  tree[x]=tree[now];\n  if(L>=l&&R<=r){\n    tree[x].app++;\n    tree[x].sm+=tree[x].ex;\n    return x;\n  }\n  int mid=(L+R)>>1;\n  if(l<=mid)tree[x].lc=insert(tree[now].lc,l,r,L,mid);\n  if(r>mid)tree[x].rc=insert(tree[now].rc,l,r,mid+1,R);\n  tree[x].sm=tree[tree[x].lc].sm+tree[tree[x].rc].sm+tree[x].ex*tree[x].app;\n  return x;\n}\n//ans\ni64 ans;\ni64 qry(int x,int l,int r,int L=1,int R=n,int add=0){\n  if(l<=L&&R<=r)return tree[x].sm+tree[x].ex*add;\n  int mid=(L+R)>>1;\n  i64 ans=0;\n  add+=tree[x].app;\n  if(l<=mid)ans+=qry(tree[x].lc,l,r,L,mid,add);\n  if(r>mid)ans+=qry(tree[x].rc,l,r,mid+1,R,add);\n  return ans;\n}\ni64 QQ(int u,int v){\n  i64 ans=0;\n  while(top[u]!=1){\n    ans+=qry(rt[v],dfn[top[u]],dfn[u]);\n    u=fa[top[u]];\n  }\n  ans+=qry(rt[v],dfn[1],dfn[u]);\n  return ans;\n}\ni64 ask(int u,int L){\n  return sumdis[L]+totdis[L]*1ll*dis[u]-2*QQ(u,L);\n}\nsigned main(){\n  cin>>n>>Q>>A;\n  rep(i,1,n)cin>>a[i],g[i]={a[i],i};\n  rep(i,1,n-1){\n    int x,y,z;\n    cin>>x>>y>>z;\n    add(x,y,z);\n    add(y,x,z);\n  }\n  dep[1]=1;\n  dfs1(1),dfs2(1,1);\n  sort(g+1,g+n+1);\n  rt[0]=build(1,n);\n  rep(i,1,n){\n    sumdis[i]=sumdis[i-1]+dis[g[i].second];\n    totdis[i]=totdis[i-1]+1;\n    rt[i]=rt[i-1];\n    int x=g[i].second;\n    while(top[x]!=1){\n      rt[i]=insert(rt[i],dfn[top[x]],dfn[x]);\n      x=fa[top[x]];\n    }\n    rt[i]=insert(rt[i],dfn[1],dfn[x]);\n  }\n  while(Q--){\n    int u,a,b;\n    cin>>u>>a>>b;\n    a=(a+ans%A)%A;\n    b=(b+ans%A)%A;\n    if(a>b)swap(a,b);\n    a=lower_bound(g+1,g+n+1,make_pair(a,0))-g; \n    b=upper_bound(g+1,g+n+1,make_pair(b,INT_MAX))-g-1;\n    cout<<(ans=ask(u,b)-ask(u,a-1))<<endl;\n  }\n}\n```",
        "postTime": 1649214436,
        "uid": 100325,
        "name": "peterwuyihong",
        "ccfLevel": 7,
        "title": "P3241 [HNOI2015]\u5f00\u5e97 \u8bb0\u5f55"
    },
    {
        "content": "\u603b\u89c9\u5f97\u5404\u4f4d\u795e\u4ed9\u70b9\u5206\u6811\u7684\u6784\u5efa\u6709\u4e9b\u91cd\u590d\u8d58\u4f59\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8f83\u597d\u7684\u5199\u6cd5\u3002\u3002\u3002\n\n\u5177\u4f53\u505a\u6cd5\u662f\u6bcf\u6b21\u7528\u9012\u5f52\u4e0a\u4e00\u5c42\u7684\u603b\u5927\u5c0ftot\u51cf\u53bb\u4e0a\u4e00\u5c42\u7684\u70b9\u7684\u91cd\u513f\u5b50\u5927\u5c0f\uff0c\u5f97\u5230\u7684\u5c31\u662f\u8fd9\u4e00\u5c42\u7684\u603b\u5927\u5c0f\u3002\u8fd9\u6837\u6c42\u4e2d\u5fc3\u5c31\u53ea\u9700\u4e00\u6b21dfs\u4e86\n\n\u6709\u4e9b\u8bf4\u4e0d\u660e\u767d\u5462\u3002\u3002\u3002\u770b\u4ee3\u7801\u5427\n\n\u4e0d\u559c\u52ff\u55b7\u3002\n\n\n```\n#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef vector<int>::iterator IT;\n\nstruct Edge\n{\n    int to,nxt,val;\n\n    Edge(){}\n    Edge(int to,int nxt,int val):to(to),nxt(nxt),val(val){}\n}e[300010];\nint head[150010],cnt;\n\nvoid addedge(int u,int v,int val)\n{\n    e[++cnt]=Edge(v,head[u],val);\n    head[u]=cnt;\n}\n\nint siz[150010],son[150010];\nbool vis[150010];\n\nint tot,lasttot;\nint maxp,root;\n\nvoid getG(int now,int fa)\n{\n    siz[now]=1;\n    son[now]=0;\n    for(int i=head[now];i;i=e[i].nxt)\n    {\n        int vs=e[i].to;\n        if(vs==fa||vis[vs]) continue;\n        getG(vs,now);\n        siz[now]+=siz[vs];\n        son[now]=max(son[now],siz[vs]);\n    }\n    son[now]=max(son[now],tot-siz[now]);\n    if(son[now]<maxp)\n    {\n        maxp=son[now];\n        root=now;\n    }\n}\n\nstruct Node\n{\n    int fa;\n    vector<int>anc;\n    vector<int>child,allchild;\n}nd[150010];\n\nint age[150010];\nint build(int now,int ntot)\n{\n    tot=ntot;\n    maxp=0x7f7f7f7f;\n    getG(now,0);\n    int g=root;\n    cout<<g<<'\\n';\n    vis[g]=1;\n    for(int i=head[g];i;i=e[i].nxt)\n    {\n        int vs=e[i].to;\n        if(vis[vs]) continue;\n        int tmp=build(vs,ntot-son[vs]);\n        nd[tmp].fa=now;\n        nd[now].child.push_back(tmp);\n    }\n    return g;\n}\n\nint virtroot;\n\nint main()\n{\n    int n,Q,A;\n    cin>>n>>Q>>A;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>age[i];\n    }\n    for(int i=1;i<n;i++)\n    {\n        int u,v,val;\n        cin>>u>>v>>val;\n        addedge(u,v,val);\n        addedge(v,u,val);\n    }\n    virtroot=build(1,n);\n}\n\n```",
        "postTime": 1550708335,
        "uid": 53241,
        "name": "partychicken",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3241 \u3010[HNOI2015]\u5f00\u5e97\u3011"
    },
    {
        "content": "[[HNOI2015]\u5f00\u5e97](https://www.luogu.com.cn/problem/P3241)\n\n\u52a8\u6001\u70b9\u5206\u6cbb + ```std::vector``` \n\n\u9898\u610f\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6c42\u6240\u6709\u7684\u70b9\u6743\u5728 $l\\sim r$ \u4e4b\u95f4\u7684\u8282\u70b9\u5230\u5f53\u524d\u8be2\u95ee\u70b9\u7684\u8ddd\u79bb\u548c\u3002\n\n\u6839\u636e\u4e00\u822c\u52a8\u6001\u70b9\u5206\u6cbb\u7684\u5957\u8def\uff0c\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u4e0b\u5f53\u524d\u5206\u6cbb\u5757\u4e2d\u5404\u4e2a\u8282\u70b9\u5bf9\u5206\u6cbb\u4e2d\u5fc3\u7684\u8d21\u732e\uff0c\u901a\u5e38\u4e3a\u4e86\u65b9\u4fbf\u5bb9\u65a5\uff0c\u8fd8\u8981\u8bb0\u5f55\u5f53\u524d\u5206\u6cbb\u5757\u4e2d\u5404\u4e2a\u8282\u70b9\u5bf9\u4e0a\u5c42\u5206\u6cbb\u4e2d\u5fc3\u7684\u8d21\u732e\uff0c\u800c\u4e0a\u5c42\u5206\u6cbb\u4e2d\u5fc3\u5c31\u662f\u5f53\u524d\u5206\u6cbb\u4e2d\u5fc3\u5728\u70b9\u5206\u6811\u4e0a\u7684\u7236\u4eb2\u3002\n\n\u5728\u6b64\u9898\u4e2d\uff0c\u8282\u70b9\u5bf9\u5206\u6cbb\u4e2d\u5fc3\u7684\u8d21\u732e\u5c31\u662f\u5f53\u524d\u8282\u70b9\u5230\u5206\u6cbb\u4e2d\u5fc3\u7684\u8ddd\u79bb\uff0c\u800c\u4e3a\u4e86\u5904\u7406\u70b9\u6743\u5927\u5c0f\u8fd9\u4e00\u7ef4\u7684\u9650\u5236\uff0c\u53ef\u4ee5\u91c7\u7528\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u89c2\u5bdf\u5230\u70b9\u6743\u53ef\u80fd\u5f88\u5927\uff0c\u7528\u4ee5\u70b9\u6743\u4e3a\u4e0b\u6807\u7684\u6570\u636e\u7ed3\u6784\u5f88\u96be\u7ef4\u62a4\uff08\u9700\u8981\u52a8\u6001\u5f00\u70b9\uff09\uff0c\u4f46\u662f\u7531\u4e8e\u9898\u76ee\u4e0d\u5e26\u4fee\u6539\uff0c\u8003\u8651\u7528 ```std::vector``` \u7ef4\u62a4\u3002\n\n\u5177\u4f53\u505a\u6cd5\u662f\u5728\u6bcf\u5c42\u5206\u6cbb\u4e2d\u5fc3\u5efa\u7acb\u4e00\u4e2a ```std::vector``` \u5e76\u6302\u5728\u5206\u6cbb\u4e2d\u5fc3\u4e0a\uff0c\u626b\u63cf\u5206\u6cbb\u5757\uff0c\u5bf9\u4e8e\u5206\u6cbb\u5757\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5c06\u4e8c\u5143\u7ec4 $(x,dis)$ \u63d2\u5165 ```std::vector``` \uff0c$x$ \u8868\u793a\u70b9\u6743\uff0c$dis$ \u8868\u793a\u8be5\u70b9\u5230\u5206\u6cbb\u4e2d\u5fc3\u7684\u8ddd\u79bb\u3002\n\n\u5c06\u5f53\u524d\u5206\u6cbb\u5757\u626b\u63cf\u5b8c\u4e4b\u540e\uff0c\u628a ```std::vector``` \u6309\u7167 $x$ \u6392\u5e8f\u5e76\u6c42\u51fa\u6392\u5e8f\u540e $dis$ \u7684**\u540e\u7f00\u548c**\u3002\n\n\u67e5\u8be2\u65f6\u5728 $x$ \u5bf9\u5e94\u7684\u90a3\u4e00\u7ef4\u4e0a\u4e8c\u5206\u51fa\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e $l$ \u7684\u5143\u7d20\u5bf9\u5e94\u4e0b\u6807 $l^\\prime$ \u548c\u7b2c\u4e00\u4e2a\u5927\u4e8e $r$ \u5143\u7d20\u5bf9\u5e94\u7684\u4e0b\u6807 $r^\\prime$\u3002\n\n\u6b64\u65f6\u5c31\u4f53\u73b0\u51fa\u7ef4\u62a4\u540e\u7f00\u548c\u7684\u4f18\u52bf\u4e86\uff0c\u53ea\u9700\u8981\u8ba1\u7b97 $dis_{l^\\prime}-dis_{r^\\prime}$ \u5373\u53ef\uff0c\u800c\u7ef4\u62a4\u524d\u7f00\u548c\u9700\u8981\u5224\u65ad\u8f83\u591a\u7684\u8fb9\u754c\u6761\u4ef6\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7ef4\u62a4\uff0c\u53ef\u4ee5\u63d2\u5165\u4e8c\u5143\u7ec4 $(\\inf,0)$\u3002\n\n\u6309\u7167\u540c\u6837\u7684\u65b9\u6cd5\uff0c\u5728\u5f53\u524d\u5206\u6cbb\u5757\u4e0a\u518d\u5f00\u4e00\u4e2a ```std::vector``` \uff0c\u7ef4\u62a4 $(x,dis^\\prime)$ \uff0c\u8fd9\u91cc\u7684 $dis^\\prime$ \u8868\u793a\u7684\u662f\u5f53\u524d\u8282\u70b9\u5230**\u4e0a\u4e00\u5c42**\u5206\u6cbb\u4e2d\u5fc3\u7684\u8ddd\u79bb\u3002\n\n\u6839\u636e\u70b9\u5206\u6cbb\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8bc1\u660e\uff0c$\\sum size(x)=\\mathcal{O(n \\log n)}$\uff0c\u8fd9\u91cc\u7684 $size(x)$ \u6307\u7684\u662f\u5206\u6cbb\u5757\u7684\u5927\u5c0f\uff0c\u7b49\u4e8e\u5bf9\u5e94\u7684 ```std::vector``` \u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0d\u4f1a\u7206\u70b8\u3002\n\n\u63a5\u4e0b\u6765\u5904\u7406\u8be2\u95ee\uff0c\u6839\u636e\u70b9\u5206\u6811\u6811\u9ad8\u4e3a $\\log n$ \u7ea7\u522b\u7684\u6027\u8d28\uff0c\u6211\u4eec\u4ece\u8be2\u95ee\u70b9\u5f00\u59cb\u9010\u4e2a\u5411\u4e0a\u8df3\u7236\u4eb2\uff0c\u6bcf\u5230\u4e00\u4e2a\u5206\u6cbb\u4e2d\u5fc3\u5c31\u6309\u7167\u4e4b\u524d\u7684\u505a\u6cd5\u8ba1\u7b97\u51fa\u5f53\u524d\u5206\u6cbb\u5757\u4e2d\u6ee1\u8db3\u70b9\u6743\u5728 $l \\sim r$ \u4e4b\u95f4\u7684\u70b9\u5230\u5f53\u524d\u5206\u6cbb\u4e2d\u5fc3\u7684\u8ddd\u79bb\u548c\uff0c\u5e76\u7b97\u51fa\u8282\u70b9\u6570\uff08\u4e8c\u5206\u51fa\u7684\u4e0b\u6807\u76f8\u51cf\uff09\uff0c\u5c06\u8ddd\u79bb\u548c\u52a0\u4e0a\u8282\u70b9\u6570\u4e58\u4ee5\u5f53\u524d\u5206\u6cbb\u4e2d\u5fc3\u5230\u8be2\u95ee\u70b9\u7684\u8ddd\u79bb\u5c31\u662f\u5b83\u4eec\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\n\n\u4f46\u662f\u8fd9\u6837\u53d1\u73b0\u6709\u4e00\u4e9b\u7b54\u6848\u88ab\u7b97\u91cd\u4e86\uff0c\u9700\u8981\u5bb9\u65a5\u6389\u8be2\u95ee\u8282\u70b9\u6240\u5728\u7684\u5b50\u6811\u5bf9\u5f53\u524d\u5206\u6cbb\u5757\u7684\u8d21\u732e\uff0c\u7528\u5148\u524d\u5904\u7406\u597d\u7684\u70b9\u5bf9\u4e0a\u5c42\u5206\u6cbb\u4e2d\u5fc3\u7684\u8d21\u732e\u5bf9\u5e94\u7684 ```std::vector``` \u8fdb\u884c\u8ba1\u7b97\uff08\u6ce8\u610f\u8981\u52a0\u4e0a\u70b9\u6570\u4e58\u8ddd\u79bb\uff09\uff0c\u65b9\u6cd5\u4e0e\u5904\u7406\u5f53\u524d\u5206\u6cbb\u5757\u5bf9\u5206\u6cbb\u4e2d\u5fc3\u7684\u8d21\u732e\u5dee\u4e0d\u591a\u3002\n\n\u4f46\u662f\u8fd9\u6837\u5199\u4ea4\u4e0a\u53bb\u53d1\u73b0**\u8d85\u65f6\u4e86**\u3002\n\n\u9898\u76ee\u4e2d\u6709\u4e00\u4e2a\u6027\u8d28\u4e3a\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u4e0d\u8d85\u8fc7 3\uff0c\u5f97\u5c06\u8fd9\u4e2a\u6027\u8d28\u5229\u7528\u8d77\u6765\u3002\n\n\u8003\u8651\u53ea\u7ef4\u62a4\u8282\u70b9\u5bf9\u4e0a\u5c42\u5206\u6cbb\u4e2d\u5fc3\u7684\u8d21\u732e\uff0c\u5728\u8df3\u5230\u4e00\u4e2a\u5206\u6cbb\u4e2d\u5fc3\u65f6\u66b4\u529b\u626b\u63cf\u5e76\u8ba1\u7b97\u6bcf\u4e2a\u5b50\u6811\u7684\u7b54\u6848\uff08\u6700\u591a\u53ea\u6709\u4e09\u4e2a\uff0c\u6ce8\u610f\u8ba1\u7b97\u8ddd\u79bb\u7684\u8d21\u732e\uff09\uff0c\u5355\u72ec\u8ba1\u7b97\u5206\u6cbb\u4e2d\u5fc3\u7684\u8d21\u732e\uff0c\u7d2f\u52a0\u8d77\u6765\u5c31\u662f\u7b54\u6848\u3002\n\n\u7531\u4e8e\u53ea\u7ef4\u62a4\u4e86\u4e00\u4e2a ```std::vector```\uff0c\u6240\u4ee5\u5728\u70b9\u5206\u6cbb\u9884\u5904\u7406\u65f6\u5e38\u6570\u4f1a\u51cf\u5c0f\u4e00\u534a\uff0c\u5728\u5b9e\u9645\u6d4b\u8bc4\u4e2d\u6709\u663e\u8457\u63d0\u901f\u3002\n\n\u540c\u65f6\u5efa\u8bae\u6c42\u8ddd\u79bb\u65f6\u4f7f\u7528 $\\mathcal{O(1)}$ \u7684 ST \u8868\u6c42 $\\text{lca}$\u3002\n\n\u5206\u6790\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u70b9\u5206\u6811\u9ad8\u4e3a $\\log n$ \u7ea7\u522b\uff0c\u6bcf\u6b21\u8df3\u7236\u4eb2\u9700\u8981 $\\log n$ \u7684\u65f6\u95f4\u8ba1\u7b97\u8d21\u732e\uff0c\u70b9\u5206\u6cbb\u9884\u5904\u7406\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O(n \\log n)}$ \u7ea7\u522b\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O(n \\log^2 n)}$\u3002\n\n\u65e2\u7136\u4f60\u80fd\u627e\u5230\u8fd9\u9898\uff0c\u6211\u76f8\u4fe1\u4f60\u80fd\u77ac\u95f4\u505a\u51fa\u6765\u7684\u3002\n\n```Code:```\n\n```cpp\n#include<bits/stdc++.h>\ntypedef long long LL;\ntypedef long double LD;\nusing namespace std;\nconst LL N=200010,M=2000010,INF=0x3f3f3f3f;\ninline LL max(LL x,LL y){return x>y?x:y;}\ninline LL min(LL x,LL y){return x<y?x:y;}\ninline void swap(LL &x,LL &y){x^=y^=x^=y;}\nLL head[N],ver[M],edge[M],Next[M],tot;\nLL n,m,t,rt,lastans,d[N],f[N],val[N],vis[N],dist[N],size[N];\nLL in[N],out[N],st[N<<2][20],lg[N<<2],ts;\nstruct node{LL pos,sum;};\nbool operator <(node a,node b){\n\treturn a.pos<b.pos;\n}\nvector<node> v[N];\nvector<LL> h[N];\nvoid upd(LL u,LL pos,LL dis){\n\tv[u].push_back((node){pos,dis});\n}\nLL ask(LL u,LL l,LL r,LL &fi,LL &se){\n\tfi=lower_bound(v[u].begin(),v[u].end(),(node){l,0})-v[u].begin();\n\tse=upper_bound(v[u].begin(),v[u].end(),(node){r,0})-v[u].begin();\n\treturn v[u][fi].sum-v[u][se].sum;\n}\nvoid add(LL x,LL y,LL z){\n\tver[++tot]=y,edge[tot]=z,Next[tot]=head[x],head[x]=tot;\n}\nvoid dfs(LL x,LL fa){\n\td[x]=d[fa]+1;\n\tin[x]=++ts,st[ts][0]=x;\n\tfor(LL i=head[x];i;i=Next[i]){\n\t\tLL y=ver[i],z=edge[i];\n\t\tif(y==fa)continue;\n\t\tdist[y]=dist[x]+z;\n\t\tdfs(y,x);\n\t}\n\tout[x]=++ts;\n\tif(fa)st[ts][0]=fa;\n}\nvoid init(){\n\tfor(LL i=2;i<=N<<1;i++)lg[i]=lg[i>>1]+1;\n\tfor(LL j=1;(1<<j)<=ts;j++)\n\t\tfor(LL i=1;i+(1<<j)-1<=ts;i++){\n\t\t\tLL x=st[i][j-1],y=st[i+(1<<(j-1))][j-1];\n\t\t\tst[i][j]=(d[x]<d[y])?x:y;\n\t\t}\n}\nLL lca(LL x,LL y){\n\tLL l=in[x],r=in[y];\n\tif(l>r)swap(l,r);LL Lg=lg[r-l+1];\n\treturn d[st[l][Lg]]<d[st[r-(1<<Lg)+1][Lg]]?st[l][Lg]:st[r-(1<<Lg)+1][Lg];\n}\nLL get(LL x,LL y){\n\treturn dist[x]+dist[y]-2*dist[lca(x,y)];\n}\nvoid get_size(LL x,LL fa){\n\tsize[x]=1;\n\tfor(LL i=head[x];i;i=Next[i]){\n\t\tLL y=ver[i];\n\t\tif(y==fa||vis[y])continue;\n\t\tget_size(y,x);\n\t\tsize[x]+=size[y];\n\t}\n}\nvoid get_rt(LL x,LL fa,LL sum){\n\tsize[x]=1;\n\tLL flag=1;\n\tfor(LL i=head[x];i;i=Next[i]){\n\t\tLL y=ver[i];\n\t\tif(y==fa||vis[y])continue;\n\t\tget_rt(y,x,sum);\n\t\tsize[x]+=size[y];\n\t\tif(size[y]>sum/2)flag=0;\n\t}\n\tif(flag&&sum-size[x]<=sum/2)rt=x;\n}\nvoid get_dis(LL x,LL fa,LL dis){\n\tupd(rt,val[x],dis);\n\tfor(LL i=head[x];i;i=Next[i]){\n\t\tLL y=ver[i],z=edge[i];\n\t\tif(y==fa||vis[y])continue;\n\t\tget_dis(y,x,dis+z);\n\t}\n}\nvoid solve(LL x){\n\tvis[x]=1;\n\tfor(LL i=head[x];i;i=Next[i]){\n\t\tLL y=ver[i],z=edge[i];\n\t\tif(vis[y])continue;\n\t\tget_size(y,x);\n\t\tget_rt(y,x,size[y]);\n\t\tf[rt]=x;\n\t\th[x].push_back(rt);\n\t\tget_dis(y,x,z);\n\t\tsolve(rt);\n\t}\n\tupd(x,INF,0);\n\tsort(v[x].begin(),v[x].end());\n\tfor(LL i=v[x].size();i;i--)\n\t\tv[x][i-1].sum+=v[x][i].sum;\n}\nint main(){\n\tscanf(\"%lld%lld%lld\",&n,&m,&t); \n\tfor(LL i=1;i<=n;i++)\n\t\tscanf(\"%lld\",&val[i]);\n\tfor(LL i=1;i<n;i++){\n\t\tLL x,y,z;\n\t\tscanf(\"%lld%lld%lld\",&x,&y,&z);\n\t\tadd(x,y,z),add(y,x,z);\n\t}\n\tdfs(1,0);\n\tinit();\n\tget_rt(1,0,n);\n\tsolve(rt);\n\twhile(m--){\n\t\tLL x,a,b,l,r,fi,se;\n\t\tscanf(\"%lld%lld%lld\",&x,&a,&b);\n\t\tl=(a+lastans)%t;\n\t\tr=(b+lastans)%t;\n\t\tif(l>r)swap(l,r);\n\t\tlastans=0;\n\t\tfor(LL i=0;i<(LL)h[x].size();i++)\n\t\t\tlastans+=ask(h[x][i],l,r,fi,se);\n\t\tfor(LL i=x;f[i];i=f[i]){\n\t\t\tLL len=get(x,f[i]);\n\t\t\tfor(LL j=0;j<(LL)h[f[i]].size();j++)\n\t\t\t\tif(h[f[i]][j]!=i)lastans+=ask(h[f[i]][j],l,r,fi,se),lastans+=len*(se-fi);\n\t\t\tif(l<=val[f[i]]&&val[f[i]]<=r)lastans+=len;\n\t\t}\n\t\tprintf(\"%lld\\n\",lastans);\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1629037650,
        "uid": 137242,
        "name": "Dia\u043esi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3241 \u3010[HNOI2015]\u5f00\u5e97\u3011"
    },
    {
        "content": "\u8fd9\u9898\u539f\u6765\u662f\u5957\u8def\u9898\uff1f \uff08\u7ed3\u679c\u4ee3\u7801\u8c03\u4e86\u4e00\u4e2a\u4e0b\u5348\uff09\n\n\n\u6211\u4eec\u8003\u8651\u5957\u4e2a\u52a8\u6001\u70b9\u5206\uff0c\u6bcf\u5c42\u7684\u70b9\u5206\u4e2d\u5fc3\u66b4\u529bvector \u5b58\u4e0b\u7ba1\u8f96\u5b50\u6811\u7684\u5404\u79cd\u4fe1\u606f\uff08\u5982\u70b9\u6570\u3001\u8ddd\u79bb\u3001\u7528\u6765\u5bb9\u65a5\u7684\u4fe1\u606f\uff09\uff0c\u7136\u540e\u6309 a[i] \u6392\u5e8f\uff0c\u5904\u7406\u524d\u7f00\u548c\n\n\u7136\u540e\u8be2\u95ee\u7684\u65f6\u5019\u4e8c\u5206 l r \uff0c\u63a5\u7740\u5c31\u662f\u5957\u8def\u5904\u7406\u7b54\u6848\u4e86\n\n\n\u8fd9\u91cc\u7528\u4e86\u6811\u5256\u6c42lca\n\n\u7136\u540e\u6211\u4eec\u8fd8\u53d1\u73b0\u771f\u5b9e\u7684\u70b9\u5206\u4ee3\u7801\u6bd4\u8f83\u77ed\uff1f\n\n```\n//by Judge\n#include<bits/stdc++.h>\n#define ll long long\n#define fp(i,a,b) for(int i=(a),I=(b)+1;i<I;++i)\n#define go(G,u) for(int i=G.head[u],v=G.e[i].to;i;v=G.e[i=G.e[i].nxt].to)\n#define Vt Vater[u]\n#define Vr Vater[root]\n#define P pair<int,int>\n#define se second\n#define fi first\nusing namespace std;\nconst int M=15e5+3;\ntypedef int arr[M];\n#ifndef Judge\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline void cmax(int& a,int b){if(a<b)a=b;}\ninline int read(){ int x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} inline int cread(){ char c=getchar();\n\tfor(;!isupper(c);c=getchar()); return c=='C';\n}char sr[1<<21],z[20];int C=-1,Z;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\ninline void print(ll x,char chr='\\n'){\n    if(C>1<<20)Ot();if(x<0)sr[++C]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]=chr;\n} int n,m,A,root,tot; ll ans,dis[M];\narr a,f,son,siz,dep,top,mx,vis,Vater;\nstruct node{ int val; ll size[3];\n\tnode(int a=0,ll b=0,ll c=0,ll d=0){\n\t\tval=a,size[0]=b,size[1]=c,size[2]=d; }\n\tbool operator <(node b)const{ return val<b.val;}\n}; vector<node> vec[M];\nstruct Gr{ int pat,head[M];\n\tstruct Edge{ int to,val,nxt; }e[M<<1];\n\tinline void add(int u,int v,int w){\n\t\te[++pat]=(Edge){v,w,head[u]},head[u]=pat;\n\t\te[++pat]=(Edge){u,w,head[v]},head[v]=pat;\n\t}\n}G;\nvoid dfs(int u,int fa){\n\tdep[u]=dep[fa]+1,siz[u]=1;\n\tgo(G,u) if(v^fa){\n\t\tdis[v]=dis[u]+G.e[i].val;\n\t\tf[v]=u,dfs(v,u),siz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]]) son[u]=v;\n\t}\n}\nvoid dfs(int u){ if(!top[u]) top[u]=u;\n\tif(son[u]) top[son[u]]=top[u],dfs(son[u]);\n\tgo(G,u) if(v^f[u]&&v^son[u]) dfs(v);\n}\ninline int lca(int u,int v){\n\tfor(;top[u]^top[v];u=f[top[u]])\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\treturn dep[u]<dep[v]?u:v;\n}\ninline ll Dis(int u,int v){\n\treturn dis[u]+dis[v]-(dis[lca(u,v)]<<1);\n}\n/////////////////////////////////////////////////////////\nvoid get_root(int u,int fa){ siz[u]=1,mx[u]=0;\n\tgo(G,u) if(!vis[v]&&v^fa) get_root(v,u),\n\t\tsiz[u]+=siz[v],cmax(mx[u],siz[v]);\n\tcmax(mx[u],tot-siz[u]); if(mx[u]<mx[root]) root=u;\n}\nvoid DFS(int u,int fa,ll DIS){\n\tvec[root].push_back(node(a[u],1,DIS,Vr?Dis(Vr,u):0));\n\tgo(G,u) if(!vis[v]&&v^fa) DFS(v,u,DIS+G.e[i].val);\n}\nvoid solv(int u,int fa){\n\tget_root(u,fa),u=root,vis[u]=1,Vt=fa;\n\tDFS(u,0,0),vec[u].push_back(node(-1));\n\tsort(vec[u].begin(),vec[u].end());\n\tfp(i,0,vec[u].size()-2)\n\t\tvec[u][i+1].size[0]+=vec[u][i].size[0],\n\t\tvec[u][i+1].size[1]+=vec[u][i].size[1],\n\t\tvec[u][i+1].size[2]+=vec[u][i].size[2];\n\tgo(G,u) if(!vis[v]) tot=siz[v],root=0,solv(v,u);\n}\ninline node query(int x,int l,int r){ if(!x) return node();\n\tvector<node>::iterator itl=upper_bound(vec[x].begin(),vec[x].end(),node(l-1)); --itl;\n\tvector<node>::iterator itr=upper_bound(vec[x].begin(),vec[x].end(),node(r)); --itr;\n\treturn node(0,itr->size[0]-itl->size[0],itr->size[1]-itl->size[1],itr->size[2]-itl->size[2]);\n}\ninline ll calc(int x,int l,int r){ ll s=0;\n\tfor(int u=x;u;u=Vt){ node a=query(u,l,r);\n\t\ts+=a.size[1]+a.size[0]*Dis(u,x);\n\t\tif(Vt) s-=a.size[2]+a.size[0]*Dis(Vt,x);\n\t} return s;\n}\nint main(){ int x,y,z;\n\tn=read(),m=read(),A=read(); fp(i,1,n) a[i]=read();\n\tfp(i,1,n-1) x=read(),y=read(),z=read(),G.add(x,y,z);\n\tdfs(1,0),dfs(1),root=0,mx[0]=tot=n,solv(1,0);\n\tfp(T,1,m){ z=read(),x=(read()+ans)%A,y=(read()+ans)%A;\n\t\tif(x>y) swap(x,y); print(ans=calc(z,x,y)); } return Ot(),0;\n} /*Cardi B*/\n```\n\n",
        "postTime": 1552988410,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3241 \u3010[HNOI2015]\u5f00\u5e97\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u4ee3\u7801\u5b9e\u73b0\u6bd2\u7624\u4e0e\u522b\u7684\u9898\u89e3\u5927\u5927\u7684\u89e3\u6cd5\n\n\u6ca1\u6709\u4f7f\u7528\u6027\u8d28\uff08\u5ea6\u6570\u4e0d\u5927\u4e8e3\uff09\n\n\u6211\u4e5f\u4e0d\u77e5\u9053\u8fd9\u4e2a\u6027\u8d28\u6709\u5565\u7528 \u8fb9\u5206\u6cbb\u590d\u6742\u5ea6\u5c31\u5bf9\u4e86\u4f46\u6211\u53c8\u4e0d\u77e5\u9053\u8fb9\u5206\u6cbb\u5bf9\u8fd9\u79cd\u9898\u6709\u5565\u7528\n\n\u660e\u663e\u5efa\u7acb\u70b9\u5206\u6811\u518d\u5efa\u7acb\u7ebf\u6bb5\u6811 \u6309\u7167\u6743\u503c\u4e0b\u6807\u5efa\u7acb\u5373\u53ef\n\n\u4f46\u662f\u7a7a\u95f4\u590d\u6742\u5ea6n^logn \u6709\u6bd2\n\n\u8003\u8651\u4e00\u4e2a$\\sum$\u5b50\u6811\u662flog\u7ea7\u522b\u7684\n\n\u6743\u503c\u8bb8\u591a\u4e3a\u7a7a\n\n\u76f4\u63a5\u7528vector \u5b58\u4e0b\u6765\u5373\u53ef\n\n\u66b4\u529b\u79bb\u6563\u5316\n\n\u67e5\u8be2\u6cbf\u7740\u6811\u5411\u4e0a\u8df3\u5373\u53ef\n\n\u4f60\u9700\u8981\u7279\u6b8a\u7684\u5361\u5e38\u6280\u5de7\uff08\u4ee5\u4e0b\u4ee3\u7801\u53ea\u4f9b\u53c2\u8003\u53ea\u4fdd\u8bc1\u6b63\u786e\u6027\uff09\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<ctime>\nusing namespace std;\ntypedef long long LL;\nconst int N=2e5+100;\nconst int INF=1e9+7;\ninline void read(int &x){\n    x=0;\n    int f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){\n        if(ch=='-')f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9'){\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    x*=f;\n}\nint n,A,Q;\nstruct Front_Star{\n    int u,v,w,nxt;\n}e[N<<2];\nint cnt=0;\nint first[N];\nvoid add(int u,int v,int w){\n    ++cnt;\n    e[cnt].u=u;\n    e[cnt].v=v;\n    e[cnt].w=w;\n    e[cnt].nxt=first[u];\n    first[u]=cnt;\n}\n//\nint val[N];\nint dep[N];\nint dis[N];\nint dfn[N];\nint st[N<<1][21];\nint Log2[N<<1];\nint dfn_cnt;\nvoid Pre_DFS(int u,int fat,int depth){\n    dep[u]=depth;\n    dfn[u]=++dfn_cnt;\n    st[dfn_cnt][0]=u;\n    for(int i=first[u];i;i=e[i].nxt){\n        int v=e[i].v;\n        if(v==fat)continue;\n        dis[v]=dis[u]+e[i].w;\n        Pre_DFS(v,u,depth+1);\n        st[++dfn_cnt][0]=u;\n    }\n}\nint CheckMin(int x,int y){\n    return dep[x]<dep[y]?x:y;\n}\nvoid Pre(){\n    for(int j=1;j<=20;++j){\n        for(int i=1;i+(1<<j)-1<=dfn_cnt;++i){\n            st[i][j]=CheckMin(st[i][j-1],st[i+(1<<(j-1))][j-1]);\n        }\n    }\n    for(int i=1;i<=dfn_cnt;++i)Log2[i]=log2(i);\n}\nint LCA(int x,int y){\n    x=dfn[x];\n    y=dfn[y];\n    if(x>y)swap(x,y);\n    int len=Log2[y-x+1];\n    return CheckMin(st[x][len],st[y-(1<<len)+1][len]);\n}\nint Dis(int x,int y){\n    return dis[x]+dis[y]-2*dis[LCA(x,y)];\n}\n//\nint root;\nint AllNode;\nint F[N];\nint siz[N];\nbool vis[N];\nvoid Get_Root(int x,int fat){\n    siz[x]=1;\n    int tmp=0;\n    for(int i=first[x];i;i=e[i].nxt){\n        int v=e[i].v;\n        if(v==fat)continue;\n        if(vis[v])continue;\n        Get_Root(v,x);\n        siz[x]+=siz[v];\n        tmp=max(tmp,siz[v]);\n    }\n    tmp=max(tmp,AllNode-siz[x]);\n    if(F[root]>tmp)root=x;\n    F[x]=tmp;\n}\nint Par[N];\nint rootS[N];\nint rootT[N];\nint lson[9350344];\nint rson[9350344];\nLL sum[9350344];\nLL Cnt[9350344];\nint tot=0;\ninline void PushUp(int p){\n    sum[p]=0,Cnt[p]=0;\n    if(lson[p]){\n        sum[p]=sum[p]+sum[lson[p]];\n        Cnt[p]=Cnt[p]+Cnt[lson[p]];\n    }\n    if(rson[p]){\n        sum[p]=sum[p]+sum[rson[p]];\n        Cnt[p]=Cnt[p]+Cnt[rson[p]];\t\n    }\n}\ninline void Update(int &p,int l,int r,int pos,int v){\n    if(!p)p=++tot;\n    if(l==r){sum[p]+=v;Cnt[p]+=1;return;}\n    int mid=(l+r)>>1;\n    if(pos<=mid)Update(lson[p],l,mid,pos,v);\n    else Update(rson[p],mid+1,r,pos,v);\n    PushUp(p);\n}\ninline pair<LL,LL> Query(int p,int l,int r,int dl,int dr){\n    if(!p)return make_pair(0,0);\n    if(l>r)return make_pair(0,0); \n    if(dl<=l&&r<=dr){\n        return make_pair(sum[p],Cnt[p]);\n    }\n    int mid=(l+r)>>1;\n    pair<LL,LL>ret;\n    ret.first=ret.second=0;\n    if(dl<=mid){\n        pair<LL,LL> now=Query(lson[p],l,mid,dl,dr);\n        ret.first=ret.first+now.first;\n        ret.second=ret.second+now.second;\n    }\n    if(mid< dr){\n        pair<LL,LL> now=Query(rson[p],mid+1,r,dl,dr);\n        ret.first=ret.first+now.first;\n        ret.second=ret.second+now.second;\t\t\n    }\n    return ret;\n}\nstruct Node{\n\tint pos;\n\tLL v;\n\tNode(int _pos=0,LL _v=0):pos(_pos),v(_v){}\n\tfriend bool operator < (Node A,Node B){\n\t\treturn A.pos<B.pos;\n\t}\n};\nvector<Node>S[N],T[N];\nvector<int>mmpS[N],mmpT[N];\nvoid GetDep(int x,int fat,int P){\n\tS[P].push_back(Node(val[x],Dis(x,P)));\n\tT[P].push_back(Node(val[x],Dis(x,Par[P])));\n    for(int i=first[x];i;i=e[i].nxt){\n        int v=e[i].v;\n        if(v==fat)continue;\n        if(vis[v])continue;\n        GetDep(v,x,P);\n    }\n}\nvoid Divide(int x,int fat){\n    vis[x]=1;\n    Par[x]=fat;\n    GetDep(x,0,x);\n    for(int i=first[x];i;i=e[i].nxt){\n        int v=e[i].v;\n        if(v==fat)continue;\n        if(vis[v])continue;\n        root=0;\n        AllNode=siz[v];\n        Get_Root(v,0);\n        Divide(root,x);\n    }\t\n}\n\nlong long TIME=0;\n\nLL GetAns(int u,int L,int R){\n    LL ret=0;\n    for(int i=u;i;i=Par[i]){\n    \tint l=lower_bound(mmpS[i].begin()+1,mmpS[i].begin()+1+mmpS[i][0],L)-mmpS[i].begin();\n    \tint r=upper_bound(mmpS[i].begin()+1,mmpS[i].begin()+1+mmpS[i][0],R)-mmpS[i].begin()-1;\n\t\tpair<LL,LL> now=Query(rootS[i],1,mmpS[i][0],l,r);\n        ret=ret+now.second*Dis(i,u)+now.first;\n    }\n    for(int i=u;Par[i];i=Par[i]){\n    \tint l=lower_bound(mmpT[i].begin()+1,mmpT[i].begin()+1+mmpT[i][0],L)-mmpT[i].begin();\n    \tint r=upper_bound(mmpT[i].begin()+1,mmpT[i].begin()+1+mmpT[i][0],R)-mmpT[i].begin()-1;\n\t\tpair<LL,LL> now=Query(rootT[i],1,mmpT[i][0],l,r);\n        ret=ret-now.second*Dis(Par[i],u)-now.first;\n    }\n    return ret;\n}\nint main(){\n\tfreopen(\"P3241.in\",\"r\",stdin);\n\tfreopen(\"P3241.out\",\"w\",stdout);\n    read(n);\n    read(Q);\n    read(A);\n    for(int i=1;i<=n;++i)read(val[i]);\n    for(int i=1;i<n;++i){\n        int u,v,w;\n        read(u);read(v);read(w);\n        add(u,v,w);\n        add(v,u,w);\n    }\n    Pre_DFS(1,0,1);\n    Pre();\n    AllNode=n;\n    F[0]=INF;\n    Get_Root(1,0);\n    Divide(root,0);\n    for(int i=1;i<=n;++i){\n    \tmmpS[i].resize(S[i].size()+3);\n    \tmmpS[i][0]=0;\n    \tfor(int j=0;j<S[i].size();++j)mmpS[i][++mmpS[i][0]]=S[i][j].pos;\n\t\tmmpS[i][++mmpS[i][0]]=INF;\n\t\tmmpS[i][++mmpS[i][0]]=0;\t\t\n\t\tsort(mmpS[i].begin()+1,mmpS[i].begin()+mmpS[i][0]+1);\n\t\tmmpS[i][0]=unique(mmpS[i].begin()+1,mmpS[i].begin()+mmpS[i][0]+1)-mmpS[i].begin()-1;\n\t\tfor(int j=0;j<S[i].size();++j){\n\t\t\tNode now=S[i][j];\n\t\t\tnow.pos=lower_bound(mmpS[i].begin()+1,mmpS[i].begin()+mmpS[i][0]+1,now.pos)-mmpS[i].begin();\n\t\t\tUpdate(rootS[i],1,mmpS[i][0],now.pos,now.v);\n\t\t}\n    \tif(Par[i]){\n    \t\tmmpT[i].resize(T[i].size()+3);\n\t\t\tmmpT[i][0]=0;\n\t\t\tfor(int j=0;j<T[i].size();++j)mmpT[i][++mmpT[i][0]]=T[i][j].pos;\n\t\t\tmmpT[i][++mmpT[i][0]]=INF;\n\t\t\tmmpT[i][++mmpT[i][0]]=0;\n\t\t\tsort(mmpT[i].begin()+1,mmpT[i].begin()+mmpT[i][0]+1);\n\t\t\tmmpT[i][0]=unique(mmpT[i].begin()+1,mmpT[i].begin()+mmpT[i][0]+1)-mmpT[i].begin()-1;\t\t\n\t\t\tfor(int j=0;j<T[i].size();++j){\n\t\t\t\tNode now=T[i][j];\n\t\t\t\tnow.pos=lower_bound(mmpT[i].begin()+1,mmpT[i].begin()+mmpT[i][0]+1,now.pos)-mmpT[i].begin();\n\t\t\t\tUpdate(rootT[i],1,mmpT[i][0],now.pos,now.v);\n\t\t\t}\n\t\t}\n\t}\n    LL lastans=0;\n    while(Q--){\n        int u,a,b;\n        read(u);\n        read(a);\n        read(b);\n        int L=min((a+lastans)%A,(b+lastans)%A);\n        int R=max((a+lastans)%A,(b+lastans)%A);\n        cout<<(lastans=GetAns(u,L,R))<<'\\n';\n    }\n    return 0;\n}\n```\n",
        "postTime": 1551834353,
        "uid": 28147,
        "name": "\u5289\u5b50\u98ba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3241 \u3010[HNOI2015]\u5f00\u5e97\u3011"
    }
]