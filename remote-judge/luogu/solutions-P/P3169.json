[
    {
        "content": "\u8fd9\u9053\u9898\u5e94\u8be5\u4e0a\u6765\u5c31\u80fd\u770b\u51fa\u6765a\u80af\u5b9a\u662f\u4e2a\u6709\u5faa\u73af\u8282\u7684\u73a9\u610f\u513f\u2026\u2026\u7ed3\u679c\u6211\u4e0a\u6765\u6253\u4e86\u4e2a\u8868\u7784\u4e86\u4e00\u773c\uff0c\u4ee5\u4e3a\u5faa\u73af\u8282\u957f\u5ea6\u5c31\u662f3389\uff08\u6211\u771f\u7684\u592a\u83dc\u4e86\uff09\uff0c\u7136\u540e\u65e0\u9650WA\u2026\u2026\u540e\u6765\u624d\u53d1\u73b0\u539f\u6765\u5faa\u73af\u8282\u957f\u5ea6\u662f3388\u2026\u2026Orz\u2026\u2026\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u5f00\u59cb\u63a8\u7b97\u5f0f\u4e86\uff0c\u8003\u8651\u5c55\u5f00\uff1a\n$$\\sum_{k=0}^nb_k(x-t)^k=\\sum_{k=0}^nb_k\\sum_{i=0}^k(-1)^{k-i}t^{k-i}x^i\\binom ki$$\n\u663e\u7136\u53ef\u4ee5\u4ea4\u6362\u6c42\u548c\u987a\u5e8f\uff0c\u4e8e\u662f\u4e4e\n$$=\\sum_{i=0}^nx^i\\sum_{k=i}^n\\binom kib_k(-1)^{k-i}t^{k-i}$$\n\u7136\u540e\u5c31\u5f97\u5230\u4e86\n$$a_i=\\sum_{k=i}^nb_k(-1)^{k-i}t^{k-i}\\binom ki$$\n\u8fd9\u662f\u4e00\u4e2a\u88f8\u7684\u4e8c\u9879\u5f0f\u53cd\u6f14\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u5f97\u5230\n$$b_k=\\sum_{i=k}^n(-1)^{i-k}\\binom ika_it^{i-k}$$\n\u7136\u540e\u53d1\u73b0\u9898\u76ee\u4e2d\u7684\u6761\u4ef6$n-m\\le 5$\uff0c\u66b4\u529b\u9ad8\u7cbe\u5ea6\u7b97\u4e00\u4e0b\u5c31\u6ca1\u4e86\u3002\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nconst int maxn = 1 << 15 | 5;\nconst double PI = acos(-1);\nstruct C{\n\tdouble x, y;\n\tC operator+(const C &c) const {return (C){x + c.x, y + c.y};}\n\tC operator-(const C &c) const {return (C){x - c.x, y - c.y};}\n\tC operator*(const C &c) const {return (C){x * c.x - y * c.y, x * c.y + y * c.x};}\n} aa[maxn], tab[maxn];\nvoid rader(C *a, int n){\n\tfor(int i = 1, j = n >> 1; i < n - 1; i++){\n\t\tif(i < j) swap(a[i], a[j]);\n\t\tint k = n >> 1;\n\t\tfor(; j >= k; k >>= 1) j -= k;\n\t\tif(j < k) j += k;\n\t}\n}\nvoid fft(C *a, int n){\n\trader(a, n);\n\tfor(int h = 2; h <= n; h <<= 1){\n\t\tint hh = h >> 1;\n\t\tfor(int i = 0; i < n; i += h)\n\t\tfor(int j = i; j < i + hh; j++){\n\t\t\tC x = a[j], y = a[j + hh] * tab[n / h * (j - i)];\n\t\t\ta[j] = x + y, a[j + hh] = x - y;\n\t\t}\n\t}\n}\nstruct Bigint{\n\tint a[maxn], n;\n\tBigint(){memset(a, 0, sizeof(a)); n = 0;}\n\tBigint(char *str){\n\t\tmemset(a, 0, sizeof(a));\n\t\tint l = strlen(str);\n\t\tn = 0;\n\t\tfor(int i = l - 1; i >= 0; i -= 4, ++n){\n\t\t\tfor(int j = max(i - 3, 0); j <= i; j++)\n\t\t\t\ta[n] = a[n] * 10 + str[j] - '0';\n\t\t}\n\t}\n\tBigint operator*(const Bigint &b) const {\n\t\tBigint res = Bigint();\n\t\tfor(res.n = 1; res.n < n + b.n; res.n <<= 1);\n\t\tfor(int i = 0; i < res.n; i++){\n\t\t\taa[i] = (C){a[i], b.a[i]};\n\t\t\ttab[i] = (C){cos(2 * i * PI / res.n), sin(2 * i * PI / res.n)};\n\t\t}\n\t\tfft(aa, res.n);\n\t\tfor(int i = 0; i < res.n; i++){\n\t\t\taa[i] = aa[i] * aa[i];\n\t\t\ttab[i].y = -tab[i].y;\n\t\t}\n\t\tfft(aa, res.n);\n\t\tfor(int i = 0; i < res.n; i++) aa[i].y /= 2 * res.n;\n\t\tfor(int i = 0; i < res.n; i++){\n\t\t\tll t = (ll)(aa[i].y + 0.5);\n\t\t\tres.a[i] = t % 10000;\n\t\t\taa[i + 1].y += t / 10000;\n\t\t}\n\t\tif(aa[res.n].y > 0.5) res.a[res.n++] = (int)(aa[res.n].y + 0.5);\n\t\twhile(res.n > 0 && !res.a[res.n - 1]) --res.n;\n\t\treturn res;\n\t}\n\tBigint operator+(const Bigint &b) const {\n\t\tBigint res = Bigint();\n\t\tres.n = max(n, b.n);\n\t\tfor(int i = 0; i < res.n; i++){\n\t\t\tres.a[i] += a[i] + b.a[i];\n\t\t\tif(res.a[i] >= 10000) ++res.a[i + 1], res.a[i] -= 10000;\n\t\t}\n\t\tif(res.a[res.n]) ++res.n;\n\t\treturn res;\n\t}\n\tBigint operator*(int b) const {\n\t\tBigint res = Bigint();\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tll t = (ll)a[i] * b + res.a[i];\n\t\t\tres.a[i] = t % 10000;\n\t\t\tres.a[i + 1] = t / 10000;\n\t\t}\n\t\tfor(res.n = n; res.a[res.n]; ++res.n){\n\t\t\tres.a[res.n + 1] = res.a[res.n] / 10000;\n\t\t\tres.a[res.n] %= 10000;\n\t\t}\n\t\treturn res;\n\t}\n\tBigint operator/(int b) const {\n\t\tBigint res = Bigint();\n\t\tres.n = n;\n\t\tfor(int i = n - 1; i >= 0; i--){\n\t\t\tint t = res.a[i] + a[i];\n\t\t\tif(i > 0) res.a[i - 1] += t % b * 10000;\n\t\t\tres.a[i] = t / b;\n\t\t}\n\t\twhile(res.n > 0 && !res.a[res.n - 1]) --res.n;\n\t\treturn res;\n\t}\n\tint operator%(int b) const {\n\t\tint res = 0;\n\t\tfor(int i = n - 1; i >= 0; i--)\n\t\t\tres = (res * 10000 + a[i]) % b;\n\t\treturn res;\n\t}\n\tBigint operator-(const Bigint &b) const {\n\t\tBigint res = Bigint();\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tres.a[i] += a[i] - b.a[i];\n\t\t\tif(res.a[i] < 0) res.a[i] += 10000, --res.a[i + 1];\n\t\t}\n\t\tfor(res.n = n; res.n > 0 && !res.a[res.n - 1]; --res.n);\n\t\treturn res;\n\t}\n\tBigint& operator++(){\n\t\t++a[0];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(a[i] >= 10000) ++a[i + 1], a[i] -= 10000;\n\t\t\telse break;\n\t\t}\n\t\tif(a[n]) ++n;\n\t\treturn *this;\n\t}\n\tvoid print(){\n\t\tprintf(\"%d\", a[n - 1]);\n\t\tfor(int i = n - 2; i >= 0; i--) printf(\"%04d\", a[i]);\n\t\tputchar('\\n');\n\t}\n\tint cmp(const Bigint &b) const {\n\t\tif(n != b.n) return n < b.n ? -1 : 1;\n\t\tfor(int i = n - 1; i >= 0; i--)\n\t\t\tif(a[i] != b.a[i]) return a[i] < b.a[i] ? -1 : 1;\n\t\treturn 0;\n\t}\n\tbool operator>=(const Bigint &b) const {return cmp(b) >= 0;}\n} n, m, mul, res;\nchar str[maxn];\nint a[3500], vis[3500], K;\nint main(){\n\tvis[a[0] = 1] = 1;\n\tfor(int i = 1; i < 3388; i++)\n\t\ta[i] = (1234 * a[i - 1] + 5678) % 3389;\n\tscanf(\"%s\", str);\n\tn = Bigint(str);\n\tscanf(\"%d\", &K);\n\tscanf(\"%s\", str);\n\tm = Bigint(str);\n\tint sub = (n - m).a[0], mod = m % 3388;\n\tmul.n = mul.a[0] = 1;\n\tfor(int i = 0; i <= sub; i++){\n\t\tres = res + mul * a[mod];\n\t\tmul = mul * (++m) * K / (i + 1);\n\t\tmod = (mod + 1) % 3388;\n\t}\n\tres.print();\n\treturn 0;\n}\n```",
        "postTime": 1535095354,
        "uid": 30575,
        "name": "waaadreamer",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3169 \u3010[CQOI2015]\u591a\u9879\u5f0f \u3011"
    },
    {
        "content": "\u6bd2\u7624\u9898\n\u8003\u5bdf\u7684\u662f\u9ad8\u7cbe\u5ea6\u3002\n\u7b2c\u4e00Ai\u7684\u9012\u63a8\u5f0f\u5f88\u7b80\u5355\n\u77e9\u9635\u4e58\u6cd5\u5c31\u884c\n\u90a3\u4e48\u53d1\u73b0n-m\u6bd4\u8f83\u5c0f\n\u5229\u7528\u4e8c\u9879\u5f0f\u5b9a\u7406\u5c31\u53ef\u4ee5\u4e86\n```\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cstdlib>\n#include <iostream>\n#include <cassert>\n#include <sstream>\n#include <numeric>\n#include <climits>\n#include <string>\n#include <cctype>\n#include <ctime>\n#include <iomanip>\n#include <cmath>\n#include <vector>\n#include <queue>\n#include <list>\n#include <map>\n#include <set>\nusing namespace std;\n// -*- C++ -*- forwarding header.\n\n// Copyright (C) 1997-2014 Free Software Foundation, Inc.\n//\n// This file is part of the GNU ISO C++ Library.  This library is free\n// software; you can redistribute it and/or modify it under the\n// terms of the GNU General Public License as published by the\n// Free Software Foundation; either version 3, or (at your option)\n// any later version.\n\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// Under Section 7 of GPL version 3, you are granted additional\n// permissions described in the GCC Runtime Library Exception, version\n// 3.1, as published by the Free Software Foundation.\n\n// You should have received a copy of the GNU General Public License and\n// a copy of the GCC Runtime Library Exception along with this program;\n// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n// <http://www.gnu.org/licenses/>.\n\n/** @file include/cstdio\n *  This is a Standard C++ Library file.  You should @c \\#include this file\n *  in your programs, rather than any of the @a *.h implementation files.\n *\n *  This is the C++ version of the Standard C Library header @c stdio.h,\n *  and its contents are (mostly) the same as that header, but are all\n *  contained in the namespace @c std (except for names which are defined\n *  as macros in C).\n */\n\n//\n// ISO C++ 14882: 27.8.2  C Library files\n//\n\n#pragma GCC system_header\n\n#include <bits/c++config.h>\n#include <stdio.h>\n\n#ifndef _GLIBCXX_CSTDIO\n#define _GLIBCXX_CSTDIO 1\n\n#ifndef _GLIBCXX_HAVE_GETS\nextern \"C\" char* gets (char* __s) __attribute__((deprecated));\n#endif\n\n// Get rid of those macros defined in <stdio.h> in lieu of real functions.\n#undef clearerr\n#undef fclose\n#undef feof\n#undef ferror\n#undef fflush\n#undef fgetc\n#undef fgetpos\n#undef fgets\n#undef fopen\n#undef fprintf\n#undef fputc\n#undef fputs\n#undef fread\n#undef freopen\n#undef fscanf\n#undef fseek\n#undef fsetpos\n#undef ftell\n#undef fwrite\n#undef getc\n#undef getchar\n#if __cplusplus <= 201103L\n# undef gets\n#endif\n#undef perror\n#undef printf\n#undef putc\n#undef putchar\n#undef puts\n#undef remove\n#undef rename\n#undef rewind\n#undef scanf\n#undef setbuf\n#undef setvbuf\n#undef sprintf\n#undef sscanf\n#undef tmpfile\n#undef tmpnam\n#undef ungetc\n#undef vfprintf\n#undef vprintf\n#undef vsprintf\n\nnamespace std\n{\n  using ::FILE;\n  using ::fpos_t;\n\n  using ::clearerr;\n  using ::fclose;\n  using ::feof;\n  using ::ferror;\n  using ::fflush;\n  using ::fgetc;\n  using ::fgetpos;\n  using ::fgets;\n  using ::fopen;\n  using ::fprintf;\n  using ::fputc;\n  using ::fputs;\n  using ::fread;\n  using ::freopen;\n  using ::fscanf;\n  using ::fseek;\n  using ::fsetpos;\n  using ::ftell;\n  using ::fwrite;\n  using ::getc;\n  using ::getchar;\n#if __cplusplus <= 201103L\n  // LWG 2249\n  using ::gets;\n#endif\n  using ::perror;\n  using ::printf;\n  using ::putc;\n  using ::putchar;\n  using ::puts;\n  using ::remove;\n  using ::rename;\n  using ::rewind;\n  using ::scanf;\n  using ::setbuf;\n  using ::setvbuf;\n  using ::sprintf;\n  using ::sscanf;\n  using ::tmpfile;\n#if _GLIBCXX_USE_TMPNAM\n  using ::tmpnam;\n#endif\n  using ::ungetc;\n  using ::vfprintf;\n  using ::vprintf;\n  using ::vsprintf;\n} // namespace\n\n#if _GLIBCXX_USE_C99\n\n#undef snprintf\n#undef vfscanf\n#undef vscanf\n#undef vsnprintf\n#undef vsscanf\n\nnamespace __gnu_cxx\n{\n#if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n  extern \"C\" int\n  (snprintf)(char * __restrict, std::size_t, const char * __restrict, ...)\n  throw ();\n  extern \"C\" int\n  (vfscanf)(FILE * __restrict, const char * __restrict, __gnuc_va_list);\n  extern \"C\" int (vscanf)(const char * __restrict, __gnuc_va_list);\n  extern \"C\" int\n  (vsnprintf)(char * __restrict, std::size_t, const char * __restrict,\n          __gnuc_va_list) throw ();\n  extern \"C\" int\n  (vsscanf)(const char * __restrict, const char * __restrict, __gnuc_va_list)\n  throw ();\n#endif\n\n#if !_GLIBCXX_USE_C99_DYNAMIC\n  using ::snprintf;\n  using ::vfscanf;\n  using ::vscanf;\n  using ::vsnprintf;\n  using ::vsscanf;\n#endif\n} // namespace __gnu_cxx\n\nnamespace std\n{\n  using ::__gnu_cxx::snprintf;\n  using ::__gnu_cxx::vfscanf;\n  using ::__gnu_cxx::vscanf;\n  using ::__gnu_cxx::vsnprintf;\n  using ::__gnu_cxx::vsscanf;\n} // namespace std\n\n#endif // _GLIBCXX_USE_C99\n\n#endif\nnamespace fastIO{\n    #define BUF_SIZE 100000\n    #define OUT_SIZE 100000\n    #define ll long long\n    //fread->read\n    bool IOerror=0;\n    inline char nc(){\n        static char buf[BUF_SIZE],*p1=buf+BUF_SIZE,*pend=buf+BUF_SIZE;\n        if (p1==pend){\n            p1=buf; pend=buf+fread(buf,1,BUF_SIZE,stdin);\n            if (pend==p1){IOerror=1;return -1;}\n            //{printf(\"IO error!\\n\");system(\"pause\");for (;;);exit(0);}\n        }\n        return *p1++;\n    }\n    inline bool blank(char ch){return ch==' '||ch=='\\n'||ch=='\\r'||ch=='\\t';}\n    inline void read(int &x){\n        bool sign=0; char ch=nc(); x=0;\n        for (;blank(ch);ch=nc());\n        if (IOerror)return;\n        if (ch=='-')sign=1,ch=nc();\n        for (;ch>='0'&&ch<='9';ch=nc())x=x*10+ch-'0';\n        if (sign)x=-x;\n    }\n    inline void read(ll &x){\n        bool sign=0; char ch=nc(); x=0;\n        for (;blank(ch);ch=nc());\n        if (IOerror)return;\n        if (ch=='-')sign=1,ch=nc();\n        for (;ch>='0'&&ch<='9';ch=nc())x=x*10+ch-'0';\n        if (sign)x=-x;\n    }\n    inline void read(double &x){\n        bool sign=0; char ch=nc(); x=0;\n        for (;blank(ch);ch=nc());\n        if (IOerror)return;\n        if (ch=='-')sign=1,ch=nc();\n        for (;ch>='0'&&ch<='9';ch=nc())x=x*10+ch-'0';\n        if (ch=='.'){\n            double tmp=1; ch=nc();\n            for (;ch>='0'&&ch<='9';ch=nc())tmp/=10.0,x+=tmp*(ch-'0');\n        }\n        if (sign)x=-x;\n    }\n    inline void read(char *s){\n        char ch=nc();\n        for (;blank(ch);ch=nc());\n        if (IOerror)return;\n        for (;!blank(ch)&&!IOerror;ch=nc())*s++=ch;\n        *s=0;\n    }\n    inline void read(char &c){\n        for (c=nc();blank(c);c=nc());\n        if (IOerror){c=-1;return;}\n    }\n    //getchar->read\n    inline void read1(int &x){\n        char ch;int bo=0;x=0;\n        for (ch=getchar();ch<'0'||ch>'9';ch=getchar())if (ch=='-')bo=1;\n        for (;ch>='0'&&ch<='9';x=x*10+ch-'0',ch=getchar());\n        if (bo)x=-x;\n    }\n    inline void read1(ll &x){\n        char ch;int bo=0;x=0;\n        for (ch=getchar();ch<'0'||ch>'9';ch=getchar())if (ch=='-')bo=1;\n        for (;ch>='0'&&ch<='9';x=x*10+ch-'0',ch=getchar());\n        if (bo)x=-x;\n    }\n    inline void read1(double &x){\n        char ch;int bo=0;x=0;\n        for (ch=getchar();ch<'0'||ch>'9';ch=getchar())if (ch=='-')bo=1;\n        for (;ch>='0'&&ch<='9';x=x*10+ch-'0',ch=getchar());\n        if (ch=='.'){\n            double tmp=1;\n            for (ch=getchar();ch>='0'&&ch<='9';tmp/=10.0,x+=tmp*(ch-'0'),ch=getchar());\n        }\n        if (bo)x=-x;\n    }\n    inline void read1(char *s){\n        char ch=getchar();\n        for (;blank(ch);ch=getchar());\n        for (;!blank(ch);ch=getchar())*s++=ch;\n        *s=0;\n    }\n    inline void read1(char &c){for (c=getchar();blank(c);c=getchar());}\n    //scanf->read\n    inline void read2(int &x){scanf(\"%d\",&x);}\n    inline void read2(ll &x){\n        #ifdef _WIN32\n            scanf(\"%I64d\",&x);\n        #else\n        #ifdef __linux\n            scanf(\"%lld\",&x);\n        #else\n            puts(\"error:can't recognize the system!\");\n        #endif\n        #endif\n    }\n    inline void read2(double &x){scanf(\"%lf\",&x);}\n    inline void read2(char *s){scanf(\"%s\",s);}\n    inline void read2(char &c){scanf(\" %c\",&c);}\n    inline void readln2(char *s){gets(s);}\n    //fwrite->write\n    struct Ostream_fwrite{\n        char *buf,*p1,*pend;\n        Ostream_fwrite(){buf=new char[BUF_SIZE];p1=buf;pend=buf+BUF_SIZE;}\n        void out(char ch){\n            if (p1==pend){\n                fwrite(buf,1,BUF_SIZE,stdout);p1=buf;\n            }\n            *p1++=ch;\n        }\n        void print(int x){\n            static char s[15],*s1;s1=s;\n            if (!x)*s1++='0';if (x<0)out('-'),x=-x;\n            while(x)*s1++=x%10+'0',x/=10;\n            while(s1--!=s)out(*s1);\n            out(' ');\n        }\n        void println(int x){\n            static char s[15],*s1;s1=s;\n            if (!x)*s1++='0';if (x<0)out('-'),x=-x;\n            while(x)*s1++=x%10+'0',x/=10;\n            while(s1--!=s)out(*s1); out('\\n');\n        }\n        void print(ll x){\n            static char s[25],*s1;s1=s;\n            if (!x)*s1++='0';if (x<0)out('-'),x=-x;\n            while(x)*s1++=x%10+'0',x/=10;\n            while(s1--!=s)out(*s1);\n        }\n        void println(ll x){\n            static char s[25],*s1;s1=s;\n            if (!x)*s1++='0';if (x<0)out('-'),x=-x;\n            while(x)*s1++=x%10+'0',x/=10;\n            while(s1--!=s)out(*s1); out('\\n');\n        }\n        void print(double x,int y){\n            static ll mul[]={1,10,100,1000,10000,100000,1000000,10000000,100000000,\n                1000000000,10000000000LL,100000000000LL,1000000000000LL,10000000000000LL,\n                100000000000000LL,1000000000000000LL,10000000000000000LL,100000000000000000LL};\n            if (x<-1e-12)out('-'),x=-x;x*=mul[y];\n            ll x1=(ll)floor(x); if (x-floor(x)>=0.5)++x1;\n            ll x2=x1/mul[y],x3=x1-x2*mul[y]; print(x2);\n            if (y>0){out('.'); for (size_t i=1;i<y&&x3*mul[i]<mul[y];out('0'),++i); print(x3);}\n        }\n        void println(double x,int y){print(x,y);out('\\n');}\n        void print(char *s){while (*s)out(*s++);}\n        void println(char *s){while (*s)out(*s++);out('\\n');}\n        void flush(){if (p1!=buf){fwrite(buf,1,p1-buf,stdout);p1=buf;}}\n        ~Ostream_fwrite(){flush();}\n    }Ostream;\n    inline void print(int x){Ostream.print(x);}\n    inline void println(int x){Ostream.println(x);}\n    inline void print(char x){Ostream.out(x);}\n    inline void println(char x){Ostream.out(x);Ostream.out('\\n');}\n    inline void print(ll x){Ostream.print(x);}\n    inline void println(ll x){Ostream.println(x);}\n    inline void print(double x,int y){Ostream.print(x,y);}\n    inline void println(double x,int y){Ostream.println(x,y);}\n    inline void print(char *s){Ostream.print(s);}\n    inline void println(char *s){Ostream.println(s);}\n    inline void println(){Ostream.out('\\n');}\n    inline void flush(){Ostream.flush();}\n    //puts->write\n    char Out[OUT_SIZE],*o=Out;\n    inline void print1(int x){\n        static char buf[15];\n        char *p1=buf;if (!x)*p1++='0';if (x<0)*o++='-',x=-x;\n        while(x)*p1++=x%10+'0',x/=10;\n        while(p1--!=buf)*o++=*p1;\n    }\n    inline void println1(int x){print1(x);*o++='\\n';}\n    inline void print1(ll x){\n        static char buf[25];\n        char *p1=buf;if (!x)*p1++='0';if (x<0)*o++='-',x=-x;\n        while(x)*p1++=x%10+'0',x/=10;\n        while(p1--!=buf)*o++=*p1;\n    }\n    inline void println1(ll x){print1(x);*o++='\\n';}\n    inline void print1(char c){*o++=c;}\n    inline void println1(char c){*o++=c;*o++='\\n';}\n    inline void print1(char *s){while (*s)*o++=*s++;}\n    inline void println1(char *s){print1(s);*o++='\\n';}\n    inline void println1(){*o++='\\n';}\n    inline void flush1(){if (o!=Out){if (*(o-1)=='\\n')*--o=0;puts(Out);}}\n    struct puts_write{\n        ~puts_write(){flush1();}\n    }_puts;\n    inline void print2(int x){printf(\"%d\",x);}\n    inline void println2(int x){printf(\"%d\\n\",x);}\n    inline void print2(char x){printf(\"%c\",x);}\n    inline void println2(char x){printf(\"%c\\n\",x);}\n    inline void print2(ll x){\n        #ifdef _WIN32\n            printf(\"%I64d\",x);\n        #else\n        #ifdef __linux\n            printf(\"%lld\",x);\n        #else\n            puts(\"error:can't recognize the system!\");\n        #endif\n        #endif\n    }\n    inline void println2(ll x){print2(x);printf(\"\\n\");}\n    inline void println2(){printf(\"\\n\");}\n    #undef ll\n    #undef OUT_SIZE\n    #undef BUF_SIZE\n};\n#define LL long long\n#define DIGIT   4      //\u56db\u4f4d\u9694\u5f00,\u5373\u4e07\u8fdb\u5236  \n#define DEPTH   10000        //\u4e07\u8fdb\u5236  \n#define MAX     10000  \ntypedef int bignum_t[MAX+1];  \n  \n/************************************************************************/  \n/* \u8bfb\u53d6\u64cd\u4f5c\u6570\uff0c\u5bf9\u64cd\u4f5c\u6570\u8fdb\u884c\u5904\u7406\u5b58\u50a8\u5728\u6570\u7ec4\u91cc                             */  \n/************************************************************************/  \nint read(bignum_t a,istream&is=cin)  \n{  \n    char buf[MAX*DIGIT+1],ch ;  \n    int i,j ;  \n    memset((void*)a,0,sizeof(bignum_t));  \n    if(!(is>>buf))return 0 ;  \n    for(a[0]=strlen(buf),i=a[0]/2-1;i>=0;i--)  \n    ch=buf[i],buf[i]=buf[a[0]-1-i],buf[a[0]-1-i]=ch ;  \n    for(a[0]=(a[0]+DIGIT-1)/DIGIT,j=strlen(buf);j<a[0]*DIGIT;buf[j++]='0');  \n    for(i=1;i<=a[0];i++)  \n    for(a[i]=0,j=0;j<DIGIT;j++)  \n    a[i]=a[i]*10+buf[i*DIGIT-1-j]-'0' ;  \n    for(;!a[a[0]]&&a[0]>1;a[0]--);  \n    return 1 ;  \n}  \n  \nvoid write(const bignum_t a,ostream&os=cout)  \n{  \n    int i,j ;  \n    for(os<<a[i=a[0]],i--;i;i--)  \n    for(j=DEPTH/10;j;j/=10)  \n    os<<a[i]/j%10 ;  \n}  \n  \nint comp(const bignum_t a,const bignum_t b)  \n{  \n    int i ;  \n    if(a[0]!=b[0])  \n    return a[0]-b[0];  \n    for(i=a[0];i;i--)  \n    if(a[i]!=b[i])  \n    return a[i]-b[i];  \n    return 0 ;  \n}  \n  \nint comp(const bignum_t a,const int b)  \n{  \n    int c[12]={1};  \n    for(c[1]=b;c[c[0]]>=DEPTH;c[c[0]+1]=c[c[0]]/DEPTH,c[c[0]]%=DEPTH,c[0]++);  \n    return comp(a,c);  \n}  \n  \nint comp(const bignum_t a,const int c,const int d,const bignum_t b)  \n{  \n    int i,t=0,O=-DEPTH*2 ;  \n    if(b[0]-a[0]<d&&c)  \n    return 1 ;  \n    for(i=b[0];i>d;i--)  \n    {  \n        t=t*DEPTH+a[i-d]*c-b[i];  \n        if(t>0)return 1 ;  \n        if(t<O)return 0 ;  \n    }  \n    for(i=d;i;i--)  \n    {  \n        t=t*DEPTH-b[i];  \n        if(t>0)return 1 ;  \n        if(t<O)return 0 ;  \n    }  \n    return t>0 ;  \n}  \n/************************************************************************/  \n/* \u5927\u6570\u4e0e\u5927\u6570\u76f8\u52a0                                                       */  \n/************************************************************************/  \n\nvoid add(bignum_t a,const bignum_t b)  \n{  \n    int i ;  \n    for(i=1;i<=b[0];i++)  \n    if((a[i]+=b[i])>=DEPTH)  \n    a[i]-=DEPTH,a[i+1]++;  \n    if(b[0]>=a[0])  \n    a[0]=b[0];  \n    else  \n    for(;a[i]>=DEPTH&&i<a[0];a[i]-=DEPTH,i++,a[i]++);  \n    a[0]+=(a[a[0]+1]>0);  \n}  \n/************************************************************************/  \n/* \u5927\u6570\u4e0e\u5c0f\u6570\u76f8\u52a0                                                       */  \n/************************************************************************/  \n\nvoid add(bignum_t a,const int b)  \n{  \n    int i=1 ;  \n    for(a[1]+=b;a[i]>=DEPTH&&i<a[0];a[i+1]+=a[i]/DEPTH,a[i]%=DEPTH,i++);  \n    for(;a[a[0]]>=DEPTH;a[a[0]+1]=a[a[0]]/DEPTH,a[a[0]]%=DEPTH,a[0]++);  \n}  \n\n/************************************************************************/  \n/* \u5927\u6570\u76f8\u51cf(\u88ab\u51cf\u6570>=\u51cf\u6570)                                               */  \n/************************************************************************/  \n\nvoid sub(bignum_t a,const bignum_t b)  \n{  \n    int i ;  \n    for(i=1;i<=b[0];i++)  \n    if((a[i]-=b[i])<0)  \n    a[i+1]--,a[i]+=DEPTH ;  \n    for(;a[i]<0;a[i]+=DEPTH,i++,a[i]--);  \n    for(;!a[a[0]]&&a[0]>1;a[0]--);  \n}  \n\n/************************************************************************/  \n/* \u5927\u6570\u51cf\u53bb\u5c0f\u6570(\u88ab\u51cf\u6570>=\u51cf\u6570)                                           */  \n/************************************************************************/  \n\nvoid sub(bignum_t a,const int b)  \n{  \n    int i=1 ;  \n    for(a[1]-=b;a[i]<0;a[i+1]+=(a[i]-DEPTH+1)/DEPTH,a[i]-=(a[i]-DEPTH+1)/DEPTH*DEPTH,i++);  \n    for(;!a[a[0]]&&a[0]>1;a[0]--);  \n}  \n  \nvoid sub(bignum_t a,const bignum_t b,const int c,const int d)  \n{  \n    int i,O=b[0]+d ;  \n    for(i=1+d;i<=O;i++)  \n    if((a[i]-=b[i-d]*c)<0)  \n    a[i+1]+=(a[i]-DEPTH+1)/DEPTH,a[i]-=(a[i]-DEPTH+1)/DEPTH*DEPTH ;  \n    for(;a[i]<0;a[i+1]+=(a[i]-DEPTH+1)/DEPTH,a[i]-=(a[i]-DEPTH+1)/DEPTH*DEPTH,i++);  \n    for(;!a[a[0]]&&a[0]>1;a[0]--);  \n}  \n\n/************************************************************************/  \n/* \u5927\u6570\u76f8\u4e58\uff0c\u8bfb\u5165\u88ab\u4e58\u6570a\uff0c\u4e58\u6570b\uff0c\u7ed3\u679c\u4fdd\u5b58\u5728c[]                          */  \n/************************************************************************/  \n\nvoid mul(bignum_t c,const bignum_t a,const bignum_t b)  \n{  \n    int i,j ;  \n    memset((void*)c,0,sizeof(bignum_t));  \n    for(c[0]=a[0]+b[0]-1,i=1;i<=a[0];i++)  \n    for(j=1;j<=b[0];j++)  \n    if((c[i+j-1]+=a[i]*b[j])>=DEPTH)  \n    c[i+j]+=c[i+j-1]/DEPTH,c[i+j-1]%=DEPTH ;  \n    for(c[0]+=(c[c[0]+1]>0);!c[c[0]]&&c[0]>1;c[0]--);  \n}  \n\n/************************************************************************/  \n/* \u5927\u6570\u4e58\u4ee5\u5c0f\u6570\uff0c\u8bfb\u5165\u88ab\u4e58\u6570a\uff0c\u4e58\u6570b\uff0c\u7ed3\u679c\u4fdd\u5b58\u5728\u88ab\u4e58\u6570                   */  \n/************************************************************************/  \n\nvoid mul(bignum_t a,const int b)  \n{  \n    int i ;  \n    for(a[1]*=b,i=2;i<=a[0];i++)  \n    {  \n        a[i]*=b ;  \n        if(a[i-1]>=DEPTH)  \n        a[i]+=a[i-1]/DEPTH,a[i-1]%=DEPTH ;  \n    }  \n    for(;a[a[0]]>=DEPTH;a[a[0]+1]=a[a[0]]/DEPTH,a[a[0]]%=DEPTH,a[0]++);  \n    for(;!a[a[0]]&&a[0]>1;a[0]--);  \n}  \n  \nvoid mul(bignum_t b,const bignum_t a,const int c,const int d)  \n{  \n    int i ;  \n    memset((void*)b,0,sizeof(bignum_t));  \n    for(b[0]=a[0]+d,i=d+1;i<=b[0];i++)  \n    if((b[i]+=a[i-d]*c)>=DEPTH)  \n    b[i+1]+=b[i]/DEPTH,b[i]%=DEPTH ;  \n    for(;b[b[0]+1];b[0]++,b[b[0]+1]=b[b[0]]/DEPTH,b[b[0]]%=DEPTH);  \n    for(;!b[b[0]]&&b[0]>1;b[0]--);  \n}  \n\n/**************************************************************************/  \n/* \u5927\u6570\u76f8\u9664,\u8bfb\u5165\u88ab\u9664\u6570a\uff0c\u9664\u6570b\uff0c\u7ed3\u679c\u4fdd\u5b58\u5728c[]\u6570\u7ec4                         */  \n/* \u9700\u8981comp()\u51fd\u6570                                                         */  \n/**************************************************************************/  \n\nvoid div(bignum_t c,bignum_t a,const bignum_t b)  \n{  \n    int h,l,m,i ;  \n    memset((void*)c,0,sizeof(bignum_t));  \n    c[0]=(b[0]<a[0]+1)?(a[0]-b[0]+2):1 ;  \n    for(i=c[0];i;sub(a,b,c[i]=m,i-1),i--)  \n    for(h=DEPTH-1,l=0,m=(h+l+1)>>1;h>l;m=(h+l+1)>>1)  \n    if(comp(b,m,i-1,a))h=m-1 ;  \n    else l=m ;  \n    for(;!c[c[0]]&&c[0]>1;c[0]--);  \n    c[0]=c[0]>1?c[0]:1 ;  \n}  \n  \nvoid div(bignum_t a,const int b,int&c)  \n{  \n    int i ;  \n    for(c=0,i=a[0];i;c=c*DEPTH+a[i],a[i]=c/b,c%=b,i--);  \n    for(;!a[a[0]]&&a[0]>1;a[0]--);  \n}  \n\n/************************************************************************/  \n/* \u5927\u6570\u5e73\u65b9\u6839\uff0c\u8bfb\u5165\u5927\u6570a\uff0c\u7ed3\u679c\u4fdd\u5b58\u5728b[]\u6570\u7ec4\u91cc                           */  \n/* \u9700\u8981comp()\u51fd\u6570                                                       */  \n/************************************************************************/  \n\nvoid sqrt(bignum_t b,bignum_t a)  \n{  \n    int h,l,m,i ;  \n    memset((void*)b,0,sizeof(bignum_t));  \n    for(i=b[0]=(a[0]+1)>>1;i;sub(a,b,m,i-1),b[i]+=m,i--)  \n    for(h=DEPTH-1,l=0,b[i]=m=(h+l+1)>>1;h>l;b[i]=m=(h+l+1)>>1)  \n    if(comp(b,m,i-1,a))h=m-1 ;  \n    else l=m ;  \n    for(;!b[b[0]]&&b[0]>1;b[0]--);  \n    for(i=1;i<=b[0];b[i++]>>=1);  \n}  \n\n/************************************************************************/  \n/* \u8fd4\u56de\u5927\u6570\u7684\u957f\u5ea6                                                       */  \n/************************************************************************/  \n\nint length(const bignum_t a)  \n{  \n    int t,ret ;  \n    for(ret=(a[0]-1)*DIGIT,t=a[a[0]];t;t/=10,ret++);  \n    return ret>0?ret:1 ;  \n}  \n\n/************************************************************************/  \n/* \u8fd4\u56de\u6307\u5b9a\u4f4d\u7f6e\u7684\u6570\u5b57\uff0c\u4ece\u4f4e\u4f4d\u5f00\u59cb\u6570\u5230\u7b2cb\u4f4d\uff0c\u8fd4\u56deb\u4f4d\u4e0a\u7684\u6570               */  \n/************************************************************************/  \n\nint digit(const bignum_t a,const int b)  \n{  \n    int i,ret ;  \n    for(ret=a[(b-1)/DIGIT+1],i=(b-1)%DIGIT;i;ret/=10,i--);  \n    return ret%10 ;  \n}  \n\n/************************************************************************/  \n/* \u8fd4\u56de\u5927\u6570\u672b\u5c3e0\u7684\u4e2a\u6570                                                  */  \n/************************************************************************/  \n\nint zeronum(const bignum_t a)  \n{  \n    int ret,t ;  \n    for(ret=0;!a[ret+1];ret++);  \n    for(t=a[ret+1],ret*=DIGIT;!(t%10);t/=10,ret++);  \n    return ret ;  \n}  \n  \nvoid comp(int*a,const int l,const int h,const int d)  \n{  \n    int i,j,t ;  \n    for(i=l;i<=h;i++)  \n    for(t=i,j=2;t>1;j++)  \n    while(!(t%j))  \n    a[j]+=d,t/=j ;  \n}  \n  \nvoid convert(int*a,const int h,bignum_t b)  \n{  \n    int i,j,t=1 ;  \n    memset(b,0,sizeof(bignum_t));  \n    for(b[0]=b[1]=1,i=2;i<=h;i++)  \n    if(a[i])  \n    for(j=a[i];j;t*=i,j--)  \n    if(t*i>DEPTH)  \n    mul(b,t),t=1 ;  \n    mul(b,t);  \n}  \n  \n#define SGN(x) ((x)>0?1:((x)<0?-1:0))  \n#define ABS(x) ((x)>0?(x):-(x))  \n  \nint read(bignum_t a,int&sgn,istream&is=cin)  \n{  \n    char str[MAX*DIGIT+2],ch,*buf ;  \n    int i,j ;  \n    memset((void*)a,0,sizeof(bignum_t));  \n    if(!(is>>str))return 0 ;  \n    buf=str,sgn=1 ;  \n    if(*buf=='-')sgn=-1,buf++;  \n    for(a[0]=strlen(buf),i=a[0]/2-1;i>=0;i--)  \n    ch=buf[i],buf[i]=buf[a[0]-1-i],buf[a[0]-1-i]=ch ;  \n    for(a[0]=(a[0]+DIGIT-1)/DIGIT,j=strlen(buf);j<a[0]*DIGIT;buf[j++]='0');  \n    for(i=1;i<=a[0];i++)  \n    for(a[i]=0,j=0;j<DIGIT;j++)  \n    a[i]=a[i]*10+buf[i*DIGIT-1-j]-'0' ;  \n    for(;!a[a[0]]&&a[0]>1;a[0]--);  \n    if(a[0]==1&&!a[1])sgn=0 ;  \n    return 1 ;  \n}  \nstruct bignum  \n{  \n    bignum_t num ;  \n    int sgn ;  \n    public :  \n    inline bignum()  \n    {  \n        memset(num,0,sizeof(bignum_t));  \n        num[0]=1 ;  \n        sgn=0 ;  \n    }  \n    inline int operator!()  \n    {  \n        return num[0]==1&&!num[1];  \n    }  \n    inline bignum&operator=(const bignum&a)  \n    {  \n        memcpy(num,a.num,sizeof(bignum_t));  \n        sgn=a.sgn ;  \n        return*this ;  \n    }  \n    inline bignum&operator=(const int a)  \n    {  \n        memset(num,0,sizeof(bignum_t));  \n        num[0]=1 ;  \n        sgn=SGN (a);  \n        add(num,sgn*a);  \n        return*this ;  \n    }  \n    ;  \n    inline bignum&operator+=(const bignum&a)  \n    {  \n        if(sgn==a.sgn)add(num,a.num);  \n        else if  \n        (sgn&&a.sgn)  \n        {  \n            int ret=comp(num,a.num);  \n            if(ret>0)sub(num,a.num);  \n            else if(ret<0)  \n            {  \n                bignum_t t ;  \n                memcpy(t,num,sizeof(bignum_t));  \n                memcpy(num,a.num,sizeof(bignum_t));  \n                sub (num,t);  \n                sgn=a.sgn ;  \n            }  \n            else memset(num,0,sizeof(bignum_t)),num[0]=1,sgn=0 ;  \n        }  \n        else if(!sgn)  \n            memcpy(num,a.num,sizeof(bignum_t)),sgn=a.sgn ;  \n        return*this ;  \n    }  \n    inline bignum&operator+=(const int a)  \n    {  \n        if(sgn*a>0)add(num,ABS(a));  \n        else if(sgn&&a)  \n        {  \n            int  ret=comp(num,ABS(a));  \n            if(ret>0)sub(num,ABS(a));  \n            else if(ret<0)  \n            {  \n                bignum_t t ;  \n                memcpy(t,num,sizeof(bignum_t));  \n                memset(num,0,sizeof(bignum_t));  \n                num[0]=1 ;  \n                add(num,ABS (a));  \n                sgn=-sgn ;  \n                sub(num,t);  \n            }  \n            else memset(num,0,sizeof(bignum_t)),num[0]=1,sgn=0 ;  \n        }  \n        else if  \n            (!sgn)sgn=SGN(a),add(num,ABS(a));  \n        return*this ;  \n    }  \n    inline bignum operator+(const bignum&a)  \n    {  \n        bignum ret ;  \n        memcpy(ret.num,num,sizeof (bignum_t));  \n        ret.sgn=sgn ;  \n        ret+=a ;  \n        return ret ;  \n    }  \n    inline bignum operator+(const int a)  \n    {  \n        bignum ret ;  \n        memcpy(ret.num,num,sizeof (bignum_t));  \n        ret.sgn=sgn ;  \n        ret+=a ;  \n        return ret ;  \n    }  \n    inline bignum&operator-=(const bignum&a)  \n    {  \n        if(sgn*a.sgn<0)add(num,a.num);  \n        else if  \n        (sgn&&a.sgn)  \n        {  \n            int ret=comp(num,a.num);  \n            if(ret>0)sub(num,a.num);  \n            else if(ret<0)  \n            {  \n                bignum_t t ;  \n                memcpy(t,num,sizeof(bignum_t));  \n                memcpy(num,a.num,sizeof(bignum_t));  \n                sub(num,t);  \n                sgn=-sgn ;  \n            }  \n            else memset(num,0,sizeof(bignum_t)),num[0]=1,sgn=0 ;  \n        }  \n        else if(!sgn)add (num,a.num),sgn=-a.sgn ;  \n        return*this ;  \n    }  \n    inline bignum&operator-=(const int a)  \n    {  \n        if(sgn*a<0)add(num,ABS(a));  \n        else if(sgn&&a)  \n        {  \n            int  ret=comp(num,ABS(a));  \n            if(ret>0)sub(num,ABS(a));  \n            else if(ret<0)  \n            {  \n                bignum_t t ;  \n                memcpy(t,num,sizeof(bignum_t));  \n                memset(num,0,sizeof(bignum_t));  \n                num[0]=1 ;  \n                add(num,ABS(a));  \n                sub(num,t);  \n                sgn=-sgn ;  \n            }  \n            else memset(num,0,sizeof(bignum_t)),num[0]=1,sgn=0 ;  \n        }  \n        else if  \n            (!sgn)sgn=-SGN(a),add(num,ABS(a));  \n        return*this ;  \n    }  \n    inline bignum operator-(const bignum&a)  \n    {  \n        bignum ret ;  \n        memcpy(ret.num,num,sizeof(bignum_t));  \n        ret.sgn=sgn ;  \n        ret-=a ;  \n        return ret ;  \n    }  \n    inline bignum operator-(const int a)  \n    {  \n        bignum ret ;  \n        memcpy(ret.num,num,sizeof(bignum_t));  \n        ret.sgn=sgn ;  \n        ret-=a ;  \n        return ret ;  \n    }  \n    inline bignum&operator*=(const bignum&a)  \n    {  \n        bignum_t t ;  \n        mul(t,num,a.num);  \n        memcpy(num,t,sizeof(bignum_t));  \n        sgn*=a.sgn ;  \n        return*this ;  \n    }  \n    inline bignum&operator*=(const int a)  \n    {  \n        mul(num,ABS(a));  \n        sgn*=SGN(a);  \n        return*this ;  \n    }  \n    inline bignum operator*(const bignum&a)  \n    {  \n        bignum ret ;  \n        mul(ret.num,num,a.num);  \n        ret.sgn=sgn*a.sgn ;  \n        return ret ;  \n    }  \n    inline bignum operator*(const int a)  \n    {  \n        bignum ret ;  \n        memcpy(ret.num,num,sizeof (bignum_t));  \n        mul(ret.num,ABS(a));  \n        ret.sgn=sgn*SGN(a);  \n        return ret ;  \n    }  \n    inline bignum&operator/=(const bignum&a)  \n    {  \n        bignum_t t ;  \n        div(t,num,a.num);  \n        memcpy (num,t,sizeof(bignum_t));  \n        sgn=(num[0]==1&&!num[1])?0:sgn*a.sgn ;  \n        return*this ;  \n    }  \n    inline bignum&operator/=(const int a)  \n    {  \n        int t ;  \n        div(num,ABS(a),t);  \n        sgn=(num[0]==1&&!num [1])?0:sgn*SGN(a);  \n        return*this ;  \n    }  \n    inline bignum operator/(const bignum&a)  \n    {  \n        bignum ret ;  \n        bignum_t t ;  \n        memcpy(t,num,sizeof(bignum_t));  \n        div(ret.num,t,a.num);  \n        ret.sgn=(ret.num[0]==1&&!ret.num[1])?0:sgn*a.sgn ;  \n        return ret ;  \n    }  \n    inline bignum operator/(const int a)  \n    {  \n        bignum ret ;  \n        int t ;  \n        memcpy(ret.num,num,sizeof(bignum_t));  \n        div(ret.num,ABS(a),t);  \n        ret.sgn=(ret.num[0]==1&&!ret.num[1])?0:sgn*SGN(a);  \n        return ret ;  \n    }  \n    inline bignum&operator%=(const bignum&a)  \n    {  \n        bignum_t t ;  \n        div(t,num,a.num);  \n        if(num[0]==1&&!num[1])sgn=0 ;  \n        return*this ;  \n    }  \n    inline int operator%=(const int a)  \n    {  \n        int t ;  \n        div(num,ABS(a),t);  \n        memset(num,0,sizeof (bignum_t));  \n        num[0]=1 ;  \n        add(num,t);  \n        return t ;  \n    }  \n    inline bignum operator%(const bignum&a)  \n    {  \n        bignum ret ;  \n        bignum_t t ;  \n        memcpy(ret.num,num,sizeof(bignum_t));  \n        div(t,ret.num,a.num);  \n        ret.sgn=(ret.num[0]==1&&!ret.num [1])?0:sgn ;  \n        return ret ;  \n    }  \n    inline int operator%(const int a)  \n    {  \n        bignum ret ;  \n        int t ;  \n        memcpy(ret.num,num,sizeof(bignum_t));  \n        div(ret.num,ABS(a),t);  \n        memset(ret.num,0,sizeof(bignum_t));  \n        ret.num[0]=1 ;  \n        add(ret.num,t);  \n        return t ;  \n    }  \n    inline bignum&operator++()  \n    {  \n        *this+=1 ;  \n        return*this ;  \n    }  \n    inline bignum&operator--()  \n    {  \n        *this-=1 ;  \n        return*this ;  \n    }  \n    ;  \n    \n    inline int operator>(const bignum&a)  \n    {  \n        return sgn>0?(a.sgn>0?comp(num,a.num)>0:1):(sgn<0?(a.sgn<0?comp(num,a.num)<0:0):a.sgn<0);  \n    }  \n    ;\n    \n    inline int operator>(const int a)  \n    {  \n        return sgn>0?(a>0?comp(num,a)>0:1):(sgn<0?(a<0?comp(num,-a)<0:0):a<0);  \n    }  \n    ;\n    \n    inline int operator>=(const bignum&a)  \n    {  \n        return sgn>0?(a.sgn>0?comp(num,a.num)>=0:1):(sgn<0?(a.sgn<0?comp(num,a.num)<=0:0):a.sgn<=0);  \n    }  \n    ;\n    \n    inline int operator>=(const int a)  \n    {  \n        return sgn>0?(a>0?comp(num,a)>=0:1):(sgn<0?(a<0?comp(num,-a)<=0:0):a<=0);  \n    }  \n    ;\n    \n    inline int operator<(const bignum&a)  \n    {  \n        return sgn<0?(a.sgn<0?comp(num,a.num)>0:1):(sgn>0?(a.sgn>0?comp(num,a.num)<0:0):a.sgn>0);  \n    }  \n    ;\n    \n    inline int operator<(const int a)  \n    {  \n        return sgn<0?(a<0?comp(num,-a)>0:1):(sgn>0?(a>0?comp(num,a)<0:0):a>0);  \n    }  \n    ;\n    \n    inline int operator<=(const bignum&a)  \n    {  \n        return sgn<0?(a.sgn<0?comp(num,a.num)>=0:1):(sgn>0?(a.sgn>0?comp(num,a.num)<=0:0):a.sgn>=0);  \n    }  \n    ;\n    \n    inline int operator<=(const int a)  \n    {  \n        return sgn<0?(a<0?comp(num,-a)>=0:1):  \n        (sgn>0?(a>0?comp(num,a)<=0:0):a>=0);  \n    }  \n    ;\n    \n    inline int operator==(const bignum&a)  \n    {  \n        return(sgn==a.sgn)?!comp(num,a.num):0 ;  \n    }  \n    ;\n    \n    inline int operator==(const int a)  \n    {  \n        return(sgn*a>=0)?!comp(num,ABS(a)):0 ;  \n    }  \n    ;\n    \n    inline int operator!=(const bignum&a)  \n    {  \n        return(sgn==a.sgn)?comp(num,a.num):1 ;  \n    }  \n    ;\n    \n    inline int operator!=(const int a)  \n    {  \n        return(sgn*a>=0)?comp(num,ABS(a)):1 ;  \n    }  \n    ;\n    \n    inline int operator[](const int a)  \n    {  \n        return digit(num,a);  \n    }  \n    ;\n    \n    friend inline istream&operator>>(istream&is,bignum&a)  \n    {  \n        read(a.num,a.sgn,is);  \n        return  is ;  \n    }  \n    ;\n    \n    friend inline ostream&operator<<(ostream&os,const bignum&a)  \n    {  \n        if(a.sgn<0)  \n            os<<'-' ;  \n        write(a.num,os);  \n        return os ;  \n    }  \n    ;\n    \n    friend inline bignum sqrt(const bignum&a)  \n    {  \n        bignum ret ;  \n        bignum_t t ;  \n        memcpy(t,a.num,sizeof(bignum_t));  \n        sqrt(ret.num,t);  \n        ret.sgn=ret.num[0]!=1||ret.num[1];  \n        return ret ;  \n    }  \n    ;\n    \n    friend inline bignum sqrt(const bignum&a,bignum&b)  \n    {  \n        bignum ret ;  \n        memcpy(b.num,a.num,sizeof(bignum_t));  \n        sqrt(ret.num,b.num);  \n        ret.sgn=ret.num[0]!=1||ret.num[1];  \n        b.sgn=b.num[0]!=1||ret.num[1];  \n        return ret ;  \n    }  \n    ;\n    \n    inline int length()  \n    {  \n        return :: length(num);  \n    }  \n    ;\n    \n    inline int zeronum()  \n    {  \n        return :: zeronum(num);  \n    }   \n    ;\n    \n}n,m,t,A[10],B[10],ans,a0,nowt;\n\nbignum C(bignum n,bignum m)\n{\n    ans=1;bignum maxx=n-m;\n    for(int i=1;maxx>=i;++i)ans=ans*(m+i)/i;\n    return ans;\n}\n\nconst int MOD=3389;\n\nLL ksm(LL a,LL b)\n{\n    LL ans=1;\n    for(;b;b>>=1,a=a*a%MOD)if(b&1)ans=ans*a%MOD;\n    return ans;\n}\n\nstruct Matrix\n{\n    int a[3][3];\n    Matrix(){memset(a,0,sizeof(a));}\n    void clear(){for(int i=1;i<=2;++i)a[i][i]=1;}\n    Matrix operator * (const Matrix &B)\n    {\n        Matrix C;\n        for(int i=1;i<=2;++i)\n            for(int j=1;j<=2;++j)\n                for(int k=1;k<=2;++k)\n                    C.a[i][j]=(C.a[i][j]+a[i][k]*B.a[k][j])%MOD;\n        return C;\n    }\n}a;\n\nMatrix KSM(const Matrix &X,bignum b)\n{\n    Matrix A=X,ans;ans.clear();\n    while(b>0)\n    {\n        if(b%2==1)ans=ans*A;\n        A=A*A;\n        b/=2;\n    }\n    return ans;\n}\n\nint main()\n{\n    int i;\n    a0=0;\n    cin>>n>>t>>m;t=a0-t;\n    int inv=ksm(1234,MOD-2);\n    a.a[1][1]=1234;a.a[1][2]=0;a.a[2][1]=a.a[2][2]=1;\n    a=KSM(a,n-i);\n    int res=(a.a[1][1]+5678ll*a.a[2][1])%MOD;\n    bignum maxx=n-m;\n    for(i=0;maxx>=i;++i)\n    {\n        A[i]=res;B[i]=A[i];\n        nowt=1;\n        for(int j=i-1;j>=0;--j)\n        {\n            nowt*=t;\n            B[i]-=nowt*C(n-j,n-i)*B[j];\n        }\n        res=(res-5678)*inv%MOD;\n        if(res<0)res+=MOD;\n    }\n    cout<<B[i-1];\n    \n    return 0;\n}\n```",
        "postTime": 1521881613,
        "uid": 28147,
        "name": "\u5289\u5b50\u98ba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3169 \u3010[CQOI2015]\u591a\u9879\u5f0f \u3011"
    },
    {
        "content": "\u9996\u5148\u8fd9\u9053\u9898\u7ed9\u5b9a\u7684 $\\{a_i\\}$ \u9012\u63a8\u516c\u5f0f\u6a21\u6570\u8f83\u5c0f\uff0c\u8003\u8651\u6c42\u51fa\u5faa\u73af\u8282\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6253\u8868\u7684\u65b9\u6cd5\u6c42\u5faa\u73af\u8282\uff0c\u5177\u4f53\u64cd\u4f5c\u5927\u81f4\u662f\u5199\u4e00\u4e2a\u4ece $1$ \u5230 $3389^2$\uff08\u9012\u63a8\u5f0f\u5faa\u73af\u8282\u957f\u5ea6\u4e0d\u8d85\u8fc7\u6a21\u6570\u7684\u5e73\u65b9\uff09\u7684\u5faa\u73af\u628a $a_i$ \u5404\u9879\u7b97\u51fa\u6765\uff0c\u7531\u4e8e $a_{i+1}$ \u53ea\u4e0e $a_i$ \u6709\u5173\uff0c\u56e0\u6b64\u53ea\u8981\u627e\u5230\u6ee1\u8db3 $i\\gt 0\\land a_i=1$ \u7684\u6700\u5c0f\u7684 $i$ \u5373\u53ef\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u6709\u4e86 $\\{a_i\\}$ \u5faa\u73af\u8282\u957f\u5ea6\u3002\u4e0b\u9762\u662f\u6253\u8868\u7a0b\u5e8f\uff0c\u8f93\u51fa\u4e86 $3388$\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdlib>\nint arr[3389*3389+1];\nint main(){\n  arr[0]=1;\n  for(int cx=1;cx<=3389*3389;++cx){\n    arr[cx]=(arr[cx-1]*1234+5678)%3389;\n    if(arr[cx]==1) std::cout<<cx<<std::endl,exit(0);\n  }\n  return 0;\n}\n```\n\n\u6709\u4e86 $\\{a_i\\}$ \u6211\u4eec\u8003\u8651\u63a8\u5f0f\u5b50\uff0c\u9898\u9762\u4e0a\u7684\u5f0f\u5b50\u4e2d\uff0c\u7b49\u53f7\u5de6\u8fb9\u7684\n\n$$\n\\sum\\limits_{i=0}^n a_ix^i\n$$\n\n\u662f\u4e00\u4e2a\u5f62\u5f0f\u5e42\u7ea7\u6570\uff0c$a_i$ \u76f8\u5f53\u4e8e\u662f\u8fd9\u4e2a\u5f62\u5f0f\u5e42\u7ea7\u6570\u7684\u7cfb\u6570\u3002\u4f46\u662f\u53f3\u8fb9\u4e0d\u662f\u5f62\u5f0f\u5e42\u7ea7\u6570\uff0c\u6211\u4eec\u8003\u8651\u628a\u53f3\u8fb9\u5316\u6210\u5f62\u5f0f\u5e42\u7ea7\u6570\uff0c\u53ea\u9700\u628a $(x-t)^i$ \u7528\u4e8c\u9879\u5f0f\u5b9a\u7406\u6253\u5f00\uff08\u4e0b\u5f0f $(1)$\uff09\uff0c\u8fd9\u65f6\u5f0f\u5b50\u91cc\u9762\u6709\u4e8c\u9879\u5f0f\u7cfb\u6570\uff0c\u8003\u8651\u7528\u4e8c\u9879\u5f0f\u53cd\u6f14\u628a $b_i$ \u6c42\u51fa\u6765\u3002\u5728\u7528\u4e8c\u9879\u5f0f\u53cd\u6f14\u4e4b\u524d\u53d1\u73b0 $b_i$ \u548c $x^j$ \u7684\u4f4d\u7f6e\u4e0d\u5bf9\uff0c\u8003\u8651\u53d8\u6362\u4e00\u4e0b\u6c42\u548c\u987a\u5e8f\uff08\u4e0b\u5f0f $(2)$\uff09\uff0c\u53ea\u9700\u5bf9 $x^j$ \u8003\u8651\u6bcf\u4e00\u4e2a $b_i$ \u5bf9\u5b83\u7684\u8d21\u732e\u5373\u53ef\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5957\u4e8c\u9879\u5f0f\u53cd\u6f14\u4e86\uff08\u4e0b\u5f0f $(4)$\uff09\uff0c\u6ce8\u610f\u5f0f\u4e2d\u4e0b\u6807\u53d8\u5316\uff0c$\\binom{i}{j}$ \u53d8\u6210 $\\binom{j}{i}$ \u5e76\u975e\u7b14\u8bef\u3002\n\n$$\n\\begin{aligned}\n\\because& &\\sum\\limits_{i=0}^{n}b_i(x-t)^i &= \\sum\\limits_{i=0}^{n}b_i \n\\sum\\limits_{j=0}^{i}\\binom{i}{j}(-1)^j x^j t^{(i-j)} &(1)\\\\\n& &&=\\sum\\limits_{i=0}^{n}x^i\\sum\\limits_{j=i}^{n}\n\\binom{i}{j}(-1)^{j-i}t^{j-i}b_{j} &(2)\\\\\n\\therefore& &\\sum\\limits_{i=0}^n a_ix^i &= \n\\sum\\limits_{i=0}^{n}x^i\\sum\\limits_{j=i}^{n}\n\\binom{i}{j}(-1)^{j-i}t^{j-i}b_{j} &(3)\\\\\n\\therefore& &b_i &=\\sum\\limits_{j=i}^{n}\\binom{j}{i}(-1)^{j-i}t^{j-i}a_j &(4)\n\\end{aligned}\n$$\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u5f97 $b_m$\uff1a\n\n$$\nb_m =\\sum\\limits_{i=m}^{n}\\binom{i}{m}(-1)^{i-m}t^{i-m}a_i\n$$\n\n\u6ce8\u610f\u5230\u6570\u636e\u8303\u56f4\u4e2d $n-m\\le5,n\\in(0,10^{3000}]$\uff0c\u5199\u4e00\u4e2a\u9ad8\u7cbe\u5ea6\u7684\u9012\u63a8\u5373\u53ef\uff0c\u53ef\u80fd\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u8fd9\u4e2a\u4e8c\u9879\u5f0f\u7cfb\u6570\u7684\u9012\u63a8\u4e86\uff0c\u6211\u4eec\u663e\u7136\u4e0d\u80fd $O(n)$ \u6c42\u8fd9\u4e00\u5217\u7684\u4e8c\u9879\u5f0f\u7cfb\u6570\uff0c\u4f46\u662f\u7531 $\\binom{m}{m}=1$ \u53ca $\\binom{i}{m}=\\frac{i}{i-m}\\binom{i-1}{m}$ \u53ef\u4ee5\u76f4\u63a5 $O(n-m)$ \u9012\u63a8\u3002\n\n\u4e0d\u60f3\u624b\u5199\u9ad8\u7cbe\u5ea6\uff0c\u4e0b\u9762\u662f Java \u4ee3\u7801\uff1a\n\n```java\nimport java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n  public static void main(String[] args)throws Exception{\n    Scanner sc=new Scanner(System.in);\n    BigInteger n=sc.nextBigInteger();\n    int t=sc.nextInt();\n    BigInteger m=sc.nextBigInteger();\n    int a[]=new int[3388];\n    a[0]=1;\n    for(int cx=1;cx<3388;++cx)\n      a[cx]=(a[cx-1]*1234+5678)%3389;\n    BigInteger sub=n.subtract(m),mrem=m.remainder(new BigInteger(Integer.toString(3388)));\n    BigInteger ans=BigInteger.ZERO,base=BigInteger.ONE;\n    for(int cx=0;cx<=sub.intValue();++cx){\n      ans=ans.add(base.multiply(new BigInteger(Integer.toString(a[mrem.intValue()]))));\n      m=m.add(BigInteger.ONE);\n      base=base.multiply(m.multiply(new BigInteger(Integer.toString(t)))).divide(new BigInteger(Integer.toString(cx+1)));\n      mrem=mrem.add(BigInteger.ONE).remainder(new BigInteger(Integer.toString(3388)));\n    }\n    System.out.println(ans);\n  }\n}\n```\n\n**\u590d\u6742\u5ea6\u5206\u6790**\n\nJava \u7684\u9ad8\u7cbe\u5ea6\u6574\u6570\u5176\u5b9e\u5c31\u662f\u7528 `int` \u505a\u7684\u538b\u4f4d\u9ad8\u7cbe\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4e00\u4e2a\u4f4d\u6570\u4e3a $n$ \u7684\u5927\u6574\u6570\uff0c\u9ad8\u7cbe\u5ea6\u4e58\u9664\u53d6\u6a21\u5e94\u8be5\u90fd\u662f $O(n\\log n)$ \u7684\uff0c\u5728\u672c\u9898\u4e2d\uff0c\u7531\u4e8e $n$ \u7684\u4f4d\u6570\u662f $O(\\log n)$ \u7684\uff0c\u56e0\u6b64\u5355\u6b21\u9ad8\u7cbe\u5ea6\u4e58\u9664\u53d6\u6a21\u7684\u590d\u6742\u5ea6\u662f $O(\\log n\\log\\log n)$\u3002\u5faa\u73af\u6b21\u6570 $O(n-m)$\uff0c\u5916\u52a0\u524d\u9762 $O(1)$ \u7684\u9012\u63a8\uff08\u8fd0\u7b97\u6b21\u6570\u662f\u5e38\u6570\u56e0\u800c\u662f $O(1)$\uff09\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O((n-m)\\log n\\log\\log n)$\u3002",
        "postTime": 1660700867,
        "uid": 496840,
        "name": "SAMSHAWCRAFT",
        "ccfLevel": 0,
        "title": "[CQOI2015]\u591a\u9879\u5f0f - \u9898\u89e3"
    },
    {
        "content": "\u4ec0\u4e48\u3010\u3011\u51fa\u9898\u4eba/tuu\n\n\u9898\u610f\u660e\u786e\u3002\n\n\u53f3\u8fb9\u662f\u591a\u9879\u5f0f\u5e73\u79fb\uff0c\u6240\u4ee5\u76f4\u63a5\u5927\u529b\u5c55\u5f00\uff1a\uff1a\n$$ \\sum_{i=0}^n\\frac {x^i}{i!}\\sum_{j=i}^nb_jj!\\frac {(-t)^{j-i}} {(j-i)!} $$\n\u80fd\u591f\u5f97\u5230\uff1a\n$$ a_m=\\frac 1 {m!}\\sum_{j=m}^nb_jj!\\frac {(-t)^{j-m}}{(j-m)!}=\\sum_{j=m}^n\\binom jm b_j(-t)^{j-m} $$\n\u4e8c\u9879\u5f0f\u53cd\u6f14\uff1a\n$$ b_m=\\sum_{j=m}^n\\binom j ma_j(-t)^{j-m} $$\n\u7136\u540e\u53d1\u73b0\u9898\u76ee\u5e95\u4e0b\u5199\u7740\u5927\u5927\u7684 $ 0 \\leq n-m \\leq 5 $\uff0c\u53ea\u9700\u8981\u8ba1\u7b97\u51fa $ a_m $ \u540e\u9762\u7684\u5c31\u4e07\u4e8b\u5927\u5409\u4e86\u3002\n\n\u81f3\u4e8e\u627e $ a $\uff0c\u56e0\u4e3a\u6709\u53d6\u6a21\u6240\u4ee5\u5faa\u73af\u8282\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7\u6a21\u6570\u7684\u5e73\u65b9\uff0c\u6216\u8005\u76f4\u63a5\u5927\u529b\u77e9\u5feb\u4e5f\u884c\u3002\u590d\u6742\u5ea6\u662f $ O(\\log n) $ \u7684\u3002\n\n\u7136\u540e\u5269\u4e0b\u7684\u5c31\u662f\u9ad8\u7cbe\u5ea6\u677f\u5b50\u3002\u3002\u3002\n\n\u4ee3\u7801\u592a\u957f\u800c\u4e14\u61d2\u5f97\u5199\uff0c\u4e0d\u653e\u4e86\u3002\u3002\u3002",
        "postTime": 1640088290,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u6570\u5b66 \u9ad8\u7cbe\u5ea6 P3169\u9898\u89e3"
    }
]