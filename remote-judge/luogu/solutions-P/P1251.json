[
    {
        "content": "### \u5173\u4e8e\u6784\u56fe\uff1a\n\n\u8fd9\u662f\u4e00\u9053\u6700\u5c0f\u8d39\u7528\uff08\u8d39\u7528\u6307\u5355\u4ef7\uff09\u6700\u5927\u6d41\u7684\u9898\u76ee\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u62c6\u70b9\uff0c\u5c06\u4e00\u5929\u62c6\u6210\u665a\u4e0a\u548c\u65e9\u4e0a\uff0c\u6bcf\u5929\u665a\u4e0a\u4f1a\u53d7\u5230\u810f\u9910\u5dfe\uff08\u6765\u6e90\uff1a\u5f53\u5929\u65e9\u4e0a\u7528\u5b8c\u7684\u9910\u5dfe\uff0c\u5728\u8fd9\u9053\u9898\u4e2d\u53ef\u7406\u89e3\u4e3a\u4ece\u539f\u70b9\u83b7\u5f97\uff09\uff0c\u6bcf\u5929\u65e9\u4e0a\u53c8\u6709\u5e72\u51c0\u7684\u9910\u5dfe\uff08\u6765\u6e90\uff1a\u8d2d\u4e70\u3001\u5feb\u6d17\u5e97\u3001\u6162\u6d17\u5e97\uff09\u3002\n\n1.\u4ece\u539f\u70b9\u5411\u6bcf\u4e00\u5929\u665a\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u5f53\u5929\u6240\u7528\u9910\u5dfex\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u5929\u665a\u4e0a\u4ece\u8d77\u70b9\u83b7\u5f97x\u6761\u810f\u9910\u5dfe\u3002\n\n2.\u4ece\u6bcf\u4e00\u5929\u65e9\u4e0a\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u5f53\u5929\u6240\u7528\u9910\u5dfex\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u6bcf\u5929\u767d\u5929,\u8868\u793a\u5411\u6c47\u70b9\u63d0\u4f9bx\u6761\u5e72\u51c0\u7684\u9910\u5dfe,\u6d41\u6ee1\u65f6\u8868\u793a\u7b2ci\u5929\u7684\u9910\u5dfe\u591f\u7528 \u3002\n3.\u4ece\u6bcf\u4e00\u5929\u665a\u4e0a\u5411\u7b2c\u4e8c\u5929\u665a\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u5929\u665a\u4e0a\u53ef\u4ee5\u5c06\u810f\u9910\u5dfe\u7559\u5230\u7b2c\u4e8c\u5929\u665a\u4e0a\uff08\u6ce8\u610f\u4e0d\u662f\u65e9\u4e0a\uff0c\u56e0\u4e3a\u810f\u9910\u5dfe\u5728\u65e9\u4e0a\u4e0d\u53ef\u4ee5\u4f7f\u7528\uff09\u3002\n\n4.\u4ece\u6bcf\u4e00\u5929\u665a\u4e0a\u5411\u8fd9\u4e00\u5929+\u5feb\u6d17\u6240\u7528\u5929\u6570t1\u7684\u90a3\u4e00\u5929\u65e9\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a\u5feb\u6d17\u6240\u7528\u94b1\u6570\u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u5929\u665a\u4e0a\u53ef\u4ee5\u9001\u53bb\u5feb\u6d17\u90e8,\u5728\u5730i+t1\u5929\u65e9\u4e0a\u6536\u5230\u9910\u5dfe \u3002\n\n5.\u540c\u7406\uff0c\u4ece\u6bcf\u4e00\u5929\u665a\u4e0a\u5411\u8fd9\u4e00\u5929+\u6162\u6d17\u6240\u7528\u5929\u6570t2\u7684\u90a3\u4e00\u5929\u65e9\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a\u6162\u6d17\u6240\u7528\u94b1\u6570\u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u5929\u665a\u4e0a\u53ef\u4ee5\u9001\u53bb\u6162\u6d17\u90e8,\u5728\u5730i+t2\u5929\u65e9\u4e0a\u6536\u5230\u9910\u5dfe \u3002\n\n6.\u4ece\u8d77\u70b9\u5411\u6bcf\u4e00\u5929\u65e9\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a\u8d2d\u4e70\u9910\u5dfe\u6240\u7528\u94b1\u6570\u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u5929\u65e9\u4e0a\u53ef\u4ee5\u8d2d\u4e70\u9910\u5dfe \u3002\n\u6ce8\u610f\uff0c\u4ee5\u4e0a6\u70b9\u9700\u8981\u5efa\u53cd\u5411\u8fb9\uff013~6\u70b9\u9700\u8981\u505a\u5224\u65ad\uff08\u5373\u8fde\u5411\u7684\u8fb9\u5fc5\u987b<=n\uff09\n\n### \u5173\u4e8e\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#define INF 2147483647\n#define LL long long\nusing namespace std;\nqueue<int> f;\n\tint n,m,m1,t1,m2,t2,len=-1,st,ed;\n\tstruct node{int x,y,c,d,next;} a[100000];\n\tint b[100000],last[100000],pre[100000],pos[100000],p[100000];\n\tLL dis[100000];\n\tbool bz[100000];\nvoid ins(int x,int y,int c,int d)\n{\n\ta[++len].x=x;a[len].y=y;a[len].c=c;a[len].d=d;a[len].next=last[x];last[x]=len;\n\ta[++len].x=y;a[len].y=x;a[len].c=0;a[len].d=-d;a[len].next=last[y];last[y]=len;\n}\nbool spfa()\n{\n\tmemset(bz,true,sizeof(bz));\n\tbz[st]=false;\n\tmemset(dis,63,sizeof(dis));\n\tdis[st]=0;\n\tp[st]=INF;\n\tf.push(st);\n\twhile(!f.empty())\n\t{\n\t\tint x=f.front();\n\t\tbz[x]=true;\n\t\tfor(int i=last[x];i>-1;i=a[i].next)\n\t\t{\n\t\t\tint y=a[i].y;\n\t\t\tif(a[i].c>0&&dis[y]>dis[x]+a[i].d)\n\t\t\t{\n\t\t\t\tdis[y]=dis[x]+a[i].d;\n\t\t\t\tpos[y]=x;\n\t\t\t\tpre[y]=i;\n\t\t\t\tp[y]=min(p[x],a[i].c);\n\t\t\t\tif(bz[y])\n\t\t\t\t{\n\t\t\t\t\tf.push(y);\n\t\t\t\t\tbz[y]=false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tf.pop();\n\t}\n\treturn dis[ed]<4557430888798830399;\n}\nLL flow()\n{\n\tLL ans=0;\n\twhile(spfa())\n\t{\n\t\tans+=p[ed]*dis[ed];\n\t\tfor(int i=ed;i!=st;i=pos[i])\n\t\t{\n\t\t\ta[pre[i]].c-=p[ed];\n\t\t\ta[pre[i]^1].c+=p[ed];\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\n{\n\tint x;\n\tscanf(\"%d\",&n);\n\tst=0,ed=2*n+1;\n\tmemset(last,-1,sizeof(last)); \n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&x);\n\t\tins(st,i,x,0);//\u6bcf\u5929\u665a\u4e0a\u4ece\u8d77\u70b9\u83b7\u5f97x\u6761\u810f\u9910\u5dfe \n\t\tins(i+n,ed,x,0);//\u6bcf\u5929\u767d\u5929,\u5411\u6c47\u70b9\u63d0\u4f9bx\u6761\u5e72\u51c0\u7684\u9910\u5dfe,\u6d41\u6ee1\u65f6\u8868\u793a\u7b2ci\u5929\u7684\u9910\u5dfe\u591f\u7528 \n\t}\n\tscanf(\"%d %d %d %d %d\",&m,&t1,&m1,&t2,&m2);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(i+1<=n) ins(i,i+1,INF,0);//\u6bcf\u5929\u665a\u4e0a\u53ef\u4ee5\u5c06\u810f\u9910\u5dfe\u7559\u5230\u7b2c\u4e8c\u5929\u665a\u4e0a \n\t\tif(i+t1<=n) ins(i,i+n+t1,INF,m1);//\u6bcf\u5929\u665a\u4e0a\u53ef\u4ee5\u9001\u53bb\u5feb\u6d17\u90e8,\u5728\u5730i+t1\u5929\u65e9\u4e0a\u6536\u5230\u9910\u5dfe \n\t\tif(i+t2<=n) ins(i,i+n+t2,INF,m2);//\u6bcf\u5929\u665a\u4e0a\u53ef\u4ee5\u9001\u53bb\u6162\u6d17\u90e8,\u5728\u5730i+t2\u5929\u65e9\u4e0a\u6536\u5230\u9910\u5dfe \n\t\tins(st,i+n,INF,m);//\u6bcf\u5929\u65e9\u4e0a\u53ef\u4ee5\u8d2d\u4e70\u9910\u5dfe \n\t}\n\tprintf(\"%lld\",flow());\n}\n```",
        "postTime": 1520148532,
        "uid": 31955,
        "name": "Mark_ZZY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u4ece\u4e0a\u5230\u4e0b\u7ffb\u5b8c\u6240\u6709\u9898\u89e3\uff0c\u867d\u7136\u5927\u591a\u6570\u90fd\u6e05\u695a\u5730\u8bf4\u660e\u4e86**\u5982\u4f55\u53bb\u5efa\u56fe**\uff0c\u4f46\u6ca1\u6709\u4e00\u7bc7\u53bb\u89e3\u91ca**\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u5efa\u56fe**\u3002\u51b5\u4e14\u5efa\u56fe\u65f6\u5019\u5f88\u591a\u5947\u5947\u602a\u602a\u7684\u5c0f\u7ec6\u8282\u5e76\u4e0d\u7b26\u5408\u5e38\u89c4\u7684\u601d\u8def\uff0c\u5982\u679c\u6ca1\u6709\u771f\u6b63\u53bb\u5f04\u61c2\u5b83\uff0c\u5373\u4f7f\u8fd9\u9053\u9898\u6c34\u8fc7\uff0c\u8003\u573a\u4e0a\u4e5f\u4e0d\u4f1a\u60f3\u6e05\u695a\u7684\u3002\n\n## \u672c\u7bc7\u9898\u89e3\u5c06\u5145\u5206\uff0c\u5168\u9762\u5730\u6765\u89e3\u91ca\u5efa\u56fe\u7684\u8fc7\u7a0b\uff0c\u4ee5\u53ca\u5176\u4e2d\u7684\u8bf8\u591a\u7ec6\u8282\u3002\u4e5f\u6b22\u8fce\u5404\u4f4d\u6307\u51fa\u5176\u4e2d\u4e0d\u8db3\u3002\n\n\n\u62ff\u5230\u9898\u540e~~\u6839\u636e\u6807\u7b7e~~\u5927\u4f53\u4e0a\u53ef\u4ee5\u5224\u65ad\u51fa\u8fd9\u662f\u4e00\u4e2a\u6700\u5c0f\u8d39\u7528\u6d41\u3002\u9898\u76ee\u4e2d\u6709\u4e00\u6bb5\u8fd9\u6837\u8bf4\u9053\uff1a\n\n\t\u6bcf\u5929\u7ed3\u675f\u65f6,\u9910\u5385\u5fc5\u987b\u51b3\u5b9a\u5c06\u591a\u5c11\u5757\u810f\u7684\u9910\u5dfe\u9001\u5230\u5feb\u6d17\u90e8,\u591a\u5c11\u5757\u9910\u5dfe\u9001\u5230\u6162\u6d17\u90e8,\u4ee5\u53ca\u591a\u5c11\u5757\u4fdd\u5b58\u8d77\u6765\u5ef6\u671f\u9001\u6d17\u3002\n    \u4f46\u662f\u6bcf\u5929\u6d17\u597d\u7684\u9910\u5dfe\u548c\u8d2d\u4e70\u7684\u65b0\u9910\u5dfe\u6570\u4e4b\u548c,\u8981\u6ee1\u8db3\u5f53\u5929\u7684\u9700\u6c42\u91cf\u3002\n    \n\u4e8e\u662f\u6574\u7406\u5f97\uff0c\u6211\u4eec\u9700\u8981\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n \n - \u5c06\u810f\u9910\u5dfe\u4ee5`f\u5143/\u6761`\u9001\u5230\u5feb\u6d17\u90e8\uff0c\u8fc7m\u5929\u540e\uff0c\u5e72\u51c0\u9910\u5dfe\u9001\u56de\u6765\u4f7f\u7528\n - \u5c06\u810f\u9910\u5dfe\u4ee5`s\u5143/\u6761`\u9001\u5230\u6162\u6d17\u90e8\uff0c\u8fc7n\u5929\u540e\uff0c\u5e72\u51c0\u9910\u5dfe\u9001\u56de\u6765\u4f7f\u7528\n - \u5ef6\u671f\u9001\u6d17\uff08\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e4b\u540e\u9910\u5dfe\u9700\u6c42\u8fc7\u5c11\uff0c\u5e76\u4e0d\u9700\u8981\u6240\u6709\u9910\u5dfe\u7684\u60c5\u51b5\uff09\n - \u4ee5`p\u5143/\u6761`\u8d2d\u4e70\u65b0\u7684\u9910\u5dfe\n \n### \u4e8e\u662f\u672c\u9898\u7b2c\u4e00\u4e2a\u96be\u70b9\u5c31\u6765\u4e86\uff1a\u5982\u4f55\u5904\u7406\u810f\u9910\u5dfe\u548c\u5e72\u51c0\u9910\u5dfe\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\uff0c\u6bcf\u5929\u5f00\u59cb\u7684\u65f6\u5019\u53ea\u6709\u5e72\u51c0\u7684\u9910\u5dfe\u53ef\u4f7f\u7528\uff0c\u6bcf\u5929\u7ed3\u675f\u7684\u65f6\u5019\u4ec5\u6709\u810f\u7684\u9910\u5dfe\u9700\u8981\u64cd\u4f5c\u3002**\u4e8e\u662f\u5c06\u6bcf\u5929\u62c6\u6210\u4e24\u4e2a\u70b9\uff1a\u8d77\u59cb\u70b9\u4e0e\u7ed3\u675f\u70b9**\uff0c\u5206\u522b\u5904\u7406\u4e0d\u540c\u65f6\u95f4\u6bb5\u6240\u9700\u64cd\u4f5c\u3002\n\n\u4e8e\u662f\u4e5f\u53ef\u4ee5\u60f3\u5230\uff1a\n - \u9001\u5230\u5feb\u6d17\u90e8\u5c5e\u4e8e\u7ed3\u675f\u70b9\u64cd\u4f5c\uff0c\u8fde\u5411`i+m`\u5929\u540e\u7684\u8d77\u59cb\u70b9\uff0c\u8d39\u7528\u4e3af\uff08\u8868\u793a\u9910\u5dfe\u6d17\u597d\u4e86\uff0c\u53ef\u4f7f\u7528\uff09\n - \u9001\u5230\u6162\u6d17\u90e8\u5c5e\u4e8e\u7ed3\u675f\u70b9\u64cd\u4f5c\uff0c\u8fde\u5411`i+n`\u5929\u540e\u7684\u8d77\u59cb\u70b9\uff0c\u8d39\u7528\u4e3as\n - \u5ef6\u671f\u9001\u6d17\u5c5e\u4e8e\u7ed3\u675f\u70b9\u64cd\u4f5c\uff0c\u8fde\u5411`i+1`\u7684\u7ed3\u675f\u70b9\uff0c\u4e0d\u9700\u8d39\u7528\u3002\n - \u8d2d\u4e70\u65b0\u7684\u9910\u5dfe\u7684\u64cd\u4f5c\u4e5f\u5e94\u662f\u8fde\u5411\u6bcf\u5929\u8d77\u59cb\u70b9 \u7684\u8fb9\uff0c\u76ee\u524d\u5e76\u6ca1\u6709\u786e\u5b9a\u4ece\u54ea\u8fde\u7684\uff0c\u4f46\u8d39\u7528\u4e3ap\u3002\n \n\n\u4ee5\u4e0a\u64cd\u4f5c\u6d41\u91cf\u5747\u4e3a$inf$.\n\n\u597d\u4e86\uff0c\u5230\u8fd9\u91cc\u4f60\u6709\u6ca1\u6709\u53d1\u73b0\u4ee5\u4e0a\u64cd\u4f5c\u6709\u4ec0\u4e48\u5171\u540c\u70b9\uff1f\n\n### \u6ca1\u9519\uff0c\u4ed6\u4eec\u90fd\u662f\u8fde\u5411\u8d77\u59cb\u70b9\u7684\u6709\u5411\u8fb9\uff01\n$\\color{red} update: \\text{\u5ef6\u671f\u9001\u6d17\u7684\u64cd\u4f5c\u5e94\u8fde\u5411\u7684\u662f\u7ed3\u675f\u70b9\uff0c}$\n$\\color{red} \\text{\u611f\u8c22}$ $Specialzyy$ $\\color{red} \\text{\u6307\u51fa\u9519\u8bef\u3002}$\n\n$\\color{red} update: \\text{\u8bdd\u867d\u5982\u6b64\uff0c\u4f46\u6b64\u9898\u6ca1\u6709\u4ece\u8d77\u59cb\u70b9\u5411\u5916\u8fde\u7684\u8fb9\uff0c\u4ecd\u6ee1\u8db3\u7ebf\u6027\u3002}$\n\n\n\n\u4e8b\u5b9e\u4e0a\uff0c\u7f51\u7edc\u6d4124\u9898\u7684\u5168\u79f0\u4e3a\u201c\u7f51\u7edc\u6d41\u4e0e\u7ebf\u6027\u89c4\u521224\u9898\u201d\uff0c\u8fd9\u4e5f\u5c31\u544a\u8bc9\u6211\u4eec\uff1a  **\u7f51\u7edc\u6d41\u7684\u5efa\u56fe\u4e00\u5b9a\u6709\u987a\u5e8f\u7684\uff0c\u5efa\u7684\u8fb9\u4e00\u5b9a\u662f\u6cbf\u6e90\u70b9\u6d41\u5411\u6c47\u70b9\uff0c\u5426\u5219\u56fe\u5c31\u4f1a\u4e0d\u6d41\u901a\u3002**\n\n\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u5c31\u5f04\u660e\u767d\u4e86\uff1a\u6211\u4eec\u5e94\u8be5\u5c06\u6e90\u70b9\u8fde\u63a5\u6bcf\u5929\u7684**\u7ed3\u675f\u70b9**\uff0c\u800c\u4e0d\u662f\u4ed6\u4eec\u7684\u8d77\u59cb\u70b9\uff1b\u8d77\u59cb\u70b9\u8fde\u5411\u4ed6\u4eec\u7684\u6c47\u70b9\uff0c\u5bb9\u91cf\u4e3a\u8fd9\u5929\u6240\u9700\u7684\u9910\u5dfe\u6570\u91cf\uff0c\u8d39\u7528\u4e3a0\u3002\n\n\u6b64\u5916\u8d2d\u4e70\u9910\u5dfe\u76f4\u63a5\u4ece\u6e90\u70b9\u8d2d\u4e70\u5373\u53ef\u3002\n\n---\n\n\u4e4b\u540e\u8dd1\u4e00\u4e2a\u88f8\u7684\u8d39\u7528\u6d41\u5373\u53ef\u3002\u4e0a\u6211\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <queue>\n#define N 2*n+1\n#define inf 2147483647\nusing namespace std;\n\nstruct ed{\n\tint u,next,w,f;\n}e[300000];\nlong long n,p,b,f,a,s,st=1,cost,ans;\nint r[100000],d[100000],fir[100000],c[100000];\nqueue<int> q; bool v[100000];\n\nbool spfa()\n{\n\tfor (int i=0;i<=N;i++) d[i]=inf/2,v[i]=0,c[i]=fir[i];\n\tq.push(0); v[0]=1; d[0]=0;\n\twhile (!q.empty())\n\t{\n\t\tint k=q.front(); q.pop(); v[k]=0;\n\t\tfor (int i=fir[k];i;i=e[i].next)\n\t\t{\n\t\t\tint u=e[i].u,w=e[i].f;\n\t\t\tif (d[u]>d[k]+w&&e[i].w)\n\t\t\t{\n\t\t\t\td[u]=d[k]+w; if (!v[u]) v[u]=1,q.push(u); \n\t\t\t} \n\t\t}\n\t}\n\treturn (d[N]<inf/2);\n}\n\nint dfs(int p,int now)\n{\n\tif (p==N) {\n\t\tv[N]=1; ans+=now; return now;\n\t}\n\tint mw=0,used=0;  v[p]=1;\n\tfor (int i=c[p];i;i=e[i].next){\n\t\tc[p]=1; int u=e[i].u,w=e[i].f;\n\t\tif ((!v[u]||u==N)&&d[u]==d[p]+w&&e[i].w)\n\t\tif (mw=dfs(u,min(now-used,e[i].w)))\n\t\t{\n\t\t\te[i].w-=mw; e[i^1].w+=mw; used+=mw;\n\t\t\tcost+=w*mw; if (used==now) break;\n\t\t}\n\t}\n\treturn used;\n}\n\nlong long dinic()\n{\n\twhile (spfa())\n\t{\n\t\tv[N]=1;\n\t\twhile (v[N])\n\t\t{\n\t\t\tmemset(v,0,sizeof(v));\n\t\t\tdfs(0,inf);\n\t\t}\n\t\t\n\t}\n\treturn cost;\n}\n\nvoid add(int x,int y,int w,int f)\n{\n\te[++st].u=y; e[st].next=fir[x]; e[fir[x]=st].w=w; e[st].f=f;\n\te[++st].u=x; e[st].next=fir[y]; e[fir[y]=st].w=0; e[st].f=-f;\n\t\n}\n\nint main()\n{\n\tcin>>n;\n\tfor (int i=1;i<=n;i++) {\n\t\tcin>>r[i];\n\t\tadd(0,i,r[i],0); add(i+n,N,r[i],0);\n        //\u6e90\u70b9\u8fde\u63a5\u7ed3\u675f\u70b9\uff0c\u8d77\u59cb\u70b9\u8fde\u5411\u4ed6\u4eec\u7684\u6c47\u70b9\u3002\n\t}\n\tcin>>p>>a>>f>>b>>s;\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tadd(0,i+n,inf,p);  //\u4ece\u6e90\u70b9\u8d2d\u4e70\u9910\u5dfe\n\t\tif (i+1<=n) add(i,i+1,inf,0);   //\u628a\u4eca\u5929\u7684\u810f\u6bdb\u5dfe\u62d6\u5230\u660e\u5929 \n\t\tif (i+a<=n) add(i,i+n+a,inf,f); //\u628a\u9910\u5dfe\u9001\u5230\u5feb\u6d17\u90e8\n\t\tif (i+b<=n) add(i,i+n+b,inf,s); //\u628a\u9910\u5dfe\u9001\u5230\u6162\u6d17\u90e8\n\t}\n    //\u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u4ee5\u4e0a\u7684\u8fde\u8fb9\u5747\u662f\u7531\u6e90\u70b9\u5411\u6c47\u70b9\u7684\u3002\n\tcout<<dinic()<<endl;\n} \n```\n",
        "postTime": 1552836955,
        "uid": 15984,
        "name": "\u5929\u6cfd\u9f9f",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1251 \u3010\u7f51\u7edc\u6d4124\u9898\u3011\u9910\u5dfe\u8ba1\u5212\u95ee\u9898"
    },
    {
        "content": "\u600e\u4e48\u5c31\u6ca1\u4eba\u6765\u4efd\u8d2a\u5fc3\u7684\u9898\u89e3\u5462\uff1f\n\n~~\u5939\u5728\u7f51\u7edc\u6d41\u5927\u4f6c\u4e2d\u7684\u849f\u84bb\u745f\u745f\u53d1\u6296~~\n\n------------\n\n# \u5206\u6790\n\u8d39\u7528\u6d41\u7684\u89e3\u6cd5\u662f\u6709\u7684\uff0c\u7136\u800c\u6548\u7387\u592a\u4f4e\uff08 ~~\u4e0d\u4f1a~~ /\u9003\uff09\u3002\u4e3a\u4f55\u4e0d\u8003\u8651\u8d2a\u5fc3\u5462\u3002\n\n**\u8d2a\u5fc3**\uff1a\n\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86\u4e00\u5171\u8981\u4e70\u7684\u9910\u5dfe\u6570\uff0c\u90a3\u4e48\uff0c\u5c31\u53ef\u8003\u8651\u7528\u8d2a\u5fc3\u6c42\u51fa\u6700\u5c0f\u7684\u8d39\u7528\u4e86\u3002\n\n\u5bf9\u4e8e\u6bcf\u5929\u9700\u8981\u7684\u9910\u5dfe\uff0c\u4e00\u5171\u6709\u4e00\u4e0b\u4e09\u79cd\u6765\u6e90\uff1a\n1. \u672a\u7528\u8fc7\u7684\u9910\u5dfe\uff1a\u5df2\u7ecf\u4e70\u4e86\uff0c\u514d\u8d39\n2. \u524d\u9762\u6162\u6d17\u51fa\u6765\u7684\u9910\u5dfe\uff1a\n\u8d8a\u65e9\u8d8a\u597d\uff08\u7559\u7ed9\u540e\u9762\u7684\u6162\u6d17\uff09\n3. \u524d\u9762\u5feb\u6d17\u51fa\u6765\u7684\u9910\u5dfe\uff1a\n\u8d8a\u665a\u8d8a\u597d\uff08\u5c3d\u53ef\u80fd\u7559\u7ed9\u6162\u6d17\uff09\n\n\u6839\u636e\u9898\u76ee\u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5176\u8d39\u7528\u662f\u9012\u589e\u7684\u3002\n\n\u81f3\u4e8e\u5b9e\u73b0\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u6bcf\u4e00\u5929\u80fd\u591f\u7528\u6765\u6362\u6d17\u7684\u9910\u5dfe\u6570\u5373\u53ef\u3002\n\n**\u4e09\u5206**\uff1a\n\n\u81f3\u4e8e\u5982\u4f55\u786e\u5b9a\u8981\u4e70\u7684\u9910\u5dfe\u6570\uff0c\u679a\u4e3e\u662f\u4e00\u5b9a$OK$\u7684\uff0c\u53ea\u4e0d\u8fc7\u6548\u7387\u592a\u4f4e\u3002\u6211\u4eec\u53ef\u4ee5\u731c\u6d4b\u4e00\u4e0b\u9910\u5dfe\u6570\u4e0e\u6700\u5c0f\u8d39\u7528\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5e94\u8be5\u8fd1\u4f3c\u5355\u8c37\u51fd\u6570\n\n\u53ea\u6709\u611f\u6027\u7684\u8ba4\u8bc6\uff1a\u82e5\u9910\u5dfe\u6570\u8fc7\u5c0f\uff0c\u5219\u4f1a\u65e0\u89e3\uff0c\u53ef\u89c6\u4e3a\u65e0\u7a77\u5927\uff1b\u82e5\u9910\u5dfe\u6570\u8fc7\u591a\uff0c\u5219\u65e0\u9700\u6362\u6d17\u9910\u5dfe\uff0c\u4f46\u6362\u6d17\u9910\u5dfe\u5fc5\u5b9a\u6bd4\u4e0d\u6362\u6d17\u8981\u4f18\u3002\n\n\u4e8e\u662f\uff0c\u5c31\u6109\u5feb\u7684\u4e09\u5206\u5427\uff08\u4e09\u5206\u548c\u4e8c\u5206\u5dee\u4e0d\u591a\uff0c\u968f\u4fbf\u770b\u770b\u5c31\u884c\u4e86\uff09\u3002\n\n-------------\n# \u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n\n#define IL inline\n#define ll long long\n\nusing namespace std;\n\nconst int maxn = 2000 + 5;\nconst ll INF = 0xfffffffffffff; //ans\u6bd4\u8f83\u5927\uff0c\u6ce8\u610f\u65e0\u7a77\u5927\u7684\u53d6\u503c\n\nIL int read()\n{\n    char c = getchar();\n    int sum = 0 ,k = 1;\n    for(;'0' > c || c > '9'; c = getchar())\n        if(c == '-') k = -1;\n    for(;'0' <= c && c <= '9'; c = getchar()) sum = sum * 10 + c - '0';\n    return sum * k;\n}\n\nint n;\nint t1, t2;\nll p0, p1, p2;\nint need[maxn], num[maxn];\n//\u9700\u8981\u7684\u9910\u5dfe\u6570  \uff0c  \u6bcf\u5929\u53ef\u6362\u6d17\u7684\u9910\u5dfe\u6570\nIL ll min_(ll x, ll y) { return x < y ? x : y; }\n\nIL ll check(ll rest)\n{\n    memset(num, 0, sizeof(num));\n    int tp = 1;\n    ll price = rest * p0; //\u5148\u4e70\u4e0b\u6765\n    for(int t = 1, k, ned; t <= n; ++t)\n    if(need[t])\n    {\n        ned = need[t];\n        if(rest)//\u5982\u679c\u6709\u5269\u4f59\n        {\n            k = min_(ned, rest);\n            rest -= k;\n            num[t] += k;\n            ned -= k;\n            if(!ned) continue;\n        }\n        \n        for(; tp < t && !num[tp]; ++tp);//\u7b97\u662f\u4e00\u4e2a\u4f18\u5316\uff0c\u627e\u5230\u6700\u65e9\u7684\u80fd\u6362\u6d17\u9910\u5dfe\u7684\u65f6\u95f4\n        for(int i = tp; i <= t - t2; ++i)//\u6162\u6d17\uff0c\u4ece\u524d\u5f80\u540e\n        if(num[i])\n        {\n            k = min_(ned, num[i]);\n            num[i] -= k;\n            num[t] += k;\n            price += k * p2;\n            ned -= k;\n            if(!ned) continue ;\n        }\n        for(int i = t - t1; i >= 1 && i > t - t2; --i)//\u5feb\u6d17\uff0c \u4ece\u540e\u5f80\u524d\n        if(num[i])\n        {\n            k = min_(ned, num[i]);\n            num[i] -= k;\n            num[t] += k;\n            price += k * p1;\n            ned -= k;\n            if(!ned) continue;\n        }\n        if(ned) return INF; //\u5982\u679c\u80fd\u7528\u7684\u90fd\u7528\u4e0a\u4e86\uff0c\u4f46\u8fd8\u662f\u6ee1\u8db3\u4e0d\u4e86\u6761\u4ef6\uff0c\u90a3\u5c31\u65e0\u89e3\u4e86\n    }\n    return price;\n}\n\nint main()\n{\n    ll l = 0, r = 0;\n    n = read();\n    for(int i = 1; i <= n; ++i) { need[i] = read(); r += need[i]; }\u3001\n    //\u5934\u75db\uff0c\u89e3\u91ca\u4e0d\u4e86\n    p0 = read(); t1 = read(); p1 = read(); t2 = read(); p2 = read();\n    l = need[1];\n    //\u6807\u51c6\u5f0f\u4e09\u5206\n    for(ll k, lmid, rmid, s1, s2;l + 2 < r;)\n    {\n    \tk = (r - l) / 3;\n    \tlmid = l + k;\n    \trmid = r - k;\n    \tif(check(lmid) >= check(rmid)) l = lmid; else r = rmid;\n    }\n    ll ans = check(l);\n    for(++l;l <= r; ++l)\n        ans = min_(ans, check(l));\n    printf(\"%lld\", ans);\n    return 0;\n}\n```",
        "postTime": 1538469789,
        "uid": 48277,
        "name": "SCKer",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u7f51\u7edc\u6d4124\u9898\u4e2d\uff0c\u5b58\u5728\u5404\u79cd\u53ea\u662f\u6765\u8ba9\u4eba\u7ec3\u5199\u6a21\u677f\u719f\u7ec3\u5ea6\u7684\u9898\u3002\u4e0d\u8fc7\u8fd9\u9898\u7684\u5efa\u56fe\u65b9\u5f0f\u7b97\u662f\u4e00\u80a1\u6e05\u6d41\uff0c\u8ba9\u4eba\u5f88\u4e0d\u597d\u60f3\uff0c\u4f46\u60f3\u5230\u4e86\u4e5f\u5f88\u4e0d\u597d\u8bc1\u660e\uff0c\u4e0d\u8fc7\u8bc1\u660e\u51fa\u6765\u540e\u771f\u7684\u5f88\u597d\u5199\u3002\n\n\n\u5bf9\u4e8e\u9001\u5230\u5feb\u6d17\u90e8\u3001\u6162\u6d17\u90e8\u3001\u76f4\u63a5\u8d2d\u4e70\u90fd\u5f88\u597d\u60f3\uff0c\u62c6\u70b9\u540e\u76f4\u63a5\u8fde\u5c31\u884c\u4e86\u3002\u4e5f\u5c31\u662f\u628a\u4e00\u5929\u62c6\u6210\u4e0a\u5348\u548c\u4e0b\u5348\u4e24\u4e2a\u70b9\uff0c\u4e0a\u5348\u53ef\u4ee5\u63a5\u53d7\u6d17\u5b8c\u7684\u9910\u5dfe\u3001\u4e70\u65b0\u9910\u5dfe\uff0c\u4e0b\u5348\u53ef\u4ee5\u628a\u9910\u5dfe\u9001\u53bb\u6d17\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0a\u5348\u7684\u201c\u6d41\u201d\u7684\u610f\u4e49\u662f\u5e72\u51c0\u7684\u9910\u5dfe\uff0c\u4e0b\u5348\u7684\u201c\u6d41\u201d\u7684\u610f\u4e49\u662f\u810f\u7684\u9910\u5dfe\u3002\n\n\n\u8ba9\u7b2ci\u5929\u201c\u7ecf\u8fc7\u201d\u6c47\u70b9\u7684\u6d41\u4e3ari\u663e\u7136\u662f\u884c\u4e0d\u901a\u7684\u3002\u53ef\u4ee5\u628a\u201c\u62ff\u53bb\u7528ri\u4e2a\u9910\u5dfe\u201d\u62c6\u6210\u4e24\u4e2a\u52a8\u4f5c\uff1a\u4e0a\u5348\u628ari\u4e2a\u5e72\u51c0\u7684\u9910\u5dfe\u7ed9\u6c47\u70b9\uff0c\u4e0b\u5348\u63a5\u6536\u4ece\u6e90\u70b9\u6765\u7684ri\u4e2a\u810f\u9910\u5dfe\u3002\n\n\n\u8fd8\u8981\u6ce8\u610f\u7684\u662f\uff0c\u9910\u5385\u91cc\u53ef\u4ee5\u6512\u5e72\u51c0\u7684\u9910\u5dfe\uff0c\u6240\u4ee5\u7b2ci\u5929\u4e0a\u5348\u8981\u8fde\u4e00\u6761\u8fb9\u5230\u7b2ci+1\u5929\u4e0a\u5348\u3002\n\n\n\u4ee5\u4e0a\u8fc7\u7a0b\u5176\u5b9e\u53ef\u4ee5\u7528\u6709\u4e0a\u4e0b\u754c\u7f51\u7edc\u6d41\u6765\u601d\u8003\uff0c\u4f46\u5e76\u4e0d\u5bf9\u52b2\u7684\u4eba\u5e76\u4e0d\u60f3\u8fd9\u4e48\u505a\u3002\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#define ll long long\n#define maxn 4010\n#define maxm 2000010\nusing namespace std;\nconst ll inf=0x7fffffff;\nll fir[maxn],nxt[maxm],v[maxm],fl[maxm],w[maxm],cnt;\nll mincost,n,m,p,f,s,N,dis[maxn];\nbool vis[maxn];\nll read()\n{\n    ll x=0,f=1;\n    char ch=getchar();\n    while(isdigit(ch)==0 && ch!='-')\n        ch=getchar();\n    if(ch=='-')f=-1,ch=getchar();\n    while(isdigit(ch))x=x*10+ch-'0',\n        ch=getchar();\n    return x*f;\n}\nvoid addedge(ll u1,ll v1,ll fl1,ll w1)\n{\n    w[cnt]=w1,v[cnt]=v1,fl[cnt]=fl1,nxt[cnt]=fir[u1],fir[u1]=cnt++;\n    w[cnt]=-w1,v[cnt]=u1,fl[cnt]=0,nxt[cnt]=fir[v1],fir[v1]=cnt++;\n}\nll spfa() \n{\n    memset(dis,-1,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    dis[N*2+1]=0;\n    deque<ll >q;\n    q.push_back(N*2+1);\n    while(!q.empty())\n    {\n        ll u=q.front();q.pop_front();\n        for(ll k=fir[u];k!=-1;k=nxt[k])\n        {\n            ll vv=v[k];\n            if(fl[k^1]>0)\n            {\n                if(dis[vv]>dis[u]-w[k] \n                || dis[vv]==-1)\n                {\n                    dis[vv]=dis[u]-w[k];\n                    if(vis[vv]==0)    \n                    {\n                        if(q.empty()==0&&\n                        dis[q.front()]>dis[vv])\n                            q.push_front(vv);\n                        else\n                            q.push_back(vv);\n                    }    \n                    vis[vv]=1;\n                }\n            }\n        }\n        vis[u]=0;\n    }\n    return dis[0];\n}\nll getfl(ll u,ll nowflow)\n{\n    vis[u]=1;\n    if(u==N*2+1)return nowflow;\n    ll tmp,sum=0;\n    for(ll k=fir[u];k!=-1;k=nxt[k])\n    {\n        if(nowflow<=0)break;\n        ll vv=v[k];\n        if(vis[vv]==0 && fl[k]>0 \n        && dis[vv]+w[k]==dis[u]&&\n        (tmp=getfl(vv,min(nowflow,fl[k])))>0)\n        {\n            fl[k]-=tmp;\n            fl[k^1]+=tmp;\n            nowflow-=tmp;\n            mincost+=tmp*w[k];\n            sum+=tmp;\n        }\n     } \n    return sum;\n}\nint main()\n{\n    memset(fir,-1,sizeof(fir));\n    N=read();\n    for(ll i=1;i<=N;i++)\n    {\n        ll r=read();\n        addedge(i,N*2+1,r,0);\n        addedge(0,i+N,r,0);\n    }\n    p=read(),m=read(),f=read(),n=read(),s=read();\n    for(ll i=1;i<=N;i++)\n    {\n        addedge(0,i,inf,p);\n        if(i+m<=N)addedge(i+N,i+m,inf,f);\n        if(i+n<=N)addedge(i+N,i+n,inf,s);\n        if(i+1<=N)addedge(i,i+1,inf,0);\n    }\n    while(spfa()!=-1)\n    {\n        memset(vis,0,sizeof(vis));\n        getfl(0,0x7fffffff);\n    }\n    cout<<mincost;\n    return 0;\n}\n```\nex1\uff1a\u5982\u679cn<=2 \\* 10^5\uff0cri<=100\u8be5\u600e\u4e48\u505a\uff1f\n\n\u5176\u5b9e\u53ef\u4ee5\u4e09\u5206\u8d2d\u4e70\u7684\u6bdb\u5dfe\u603b\u6570\uff0c\u7136\u540e\u8d2a\u5fc3\u5730\u7b97\u51fa\u662f\u5426\u53ef\u884c\u3002\n\n\n\u5047\u8bbe\u8d2d\u4e70\u7684\u6bdb\u5dfe\u603b\u6570\u662f\u7ed9\u5b9a\u7684\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u53d8\u5f97\u7b80\u5355\u591a\u4e86\u3002\u5728\u7b2cx\u5929\u5c06\u6bdb\u5dfe\u9001\u53bb\u6d17\uff0c\u5230\u7b2cx+m\u6216x+n\u5929\u624d\u80fd\u7528\uff0c\u8fd9\u4ef6\u4e8b\u53ef\u4ee5\u770b\u6210\u5728\u7b2cx\u5929\u6bdb\u5dfe\u4e0d\u591f\u7528\u65f6\uff0c\u82b1s\u6216f\u4e58\u5750\u65f6\u5149\u673a\u56de\u5230\u7b2cx-n\u6216x-m\u5929\uff0c\u5c06\u6bdb\u5dfe\u53d8\u6210\u5e72\u51c0\u7684\u5e26\u56de\u6765\u3002\u5bf9\u4e8e\u524d\u9762\u7684\u82e5\u5e72\u5929\uff0c\u65b0\u4e70\u7684\u6bdb\u5dfe\u4e0d\u7528\u767d\u4e0d\u7528\uff0c\u5c3d\u91cf\u628a\u65b0\u4e70\u7684\u7528\u5b8c\u3002\u65b0\u6bdb\u5dfe\u4e0d\u591f\u7528\u65f6\u8003\u8651\u56de\u5230\u4e4b\u524d\u7684\u67d0\u4e00\u5929\u3002\u8fd9\u65f6\u80af\u5b9a\u56de\u5230x-n\u6216\u518d\u4e4b\u524d\u7684\u65f6\u95f4\u66f4\u5212\u7b97\u3002\u56e0\u4e3ax-m\u53ca\u4ee5\u524d\u53ef\u4ee5\u7528\u6162\u6d17\uff0c\u82b1\u8d39\u5c11\u3002\u5982\u679cx-m\u5929\u53ca\u4e4b\u524d\u6ca1\u6709\u810f\u6bdb\u5dfe\u4e86\uff0c\u624d\u53bb\u7b2cx-n\u5230x-m\u5929\u4e4b\u95f4\u3002\u8fd9\u65f6\u6700\u597d\u53d6\u79bb\u73b0\u5728\u66f4\u8fd1\u7684\u3002\u8fd9\u6837\u53ef\u4ee5\u8ba9\u79bb\u73b0\u5728\u66f4\u8fdc\u7684\u65f6\u95f4\uff0c\u4e5f\u5c31\u662f\u79bb\u7b2cx-m\u5929\u66f4\u8fd1\u7684\u65f6\u95f4\uff0c\u66f4\u6709\u673a\u4f1a\u6162\u6d17\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u53cc\u7aef\u961f\u5217\u7ef4\u62a4\u3002\n\n\n\u6839\u636e\u8fd9\u4e2a\u7b56\u7565\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8d2d\u4e70\u7684\u6bdb\u5dfe\u603b\u6570c\uff0c\u90fd\u6709\u552f\u4e00\u786e\u5b9a\u7684\u603b\u8d39\u7528\u4e0e\u4e4b\u5bf9\u5e94\u3002\u56e0\u6b64\u5b9a\u4e49f(c)\u4e3a\u603b\u5171\u8d2d\u4e70c\u5757\u6bdb\u5dfe\u7684\u8d39\u7528\u3002\u6ce8\u610fc\u7684\u53d6\u503c\u8303\u56f4\u5e94\u8be5\u662f\u5927\u4e8e\u67d0\u4e2a\u6570\uff0c\u56e0\u4e3a\u65b0\u6bdb\u5dfe\u603b\u6570\u592a\u5c11\u7684\u65f6\u5019\u6709\u4e9b\u5929\u4f1a\u6ca1\u6bdb\u5dfe\u53ef\u7528\u3002\n\n\n\u4e09\u5206\u6cd5\u8981\u4fdd\u8bc1\u5355\u5cf0\u3002\u611f\u6027\u5730\u60f3\uff0cc\u8f83\u5c0f\u65f6\u8981\u9891\u7e41\u5730\u4f7f\u7528\u5feb\u6d17\uff0c\u6240\u4ee5\u82b1\u5728\u6d17\u6bdb\u5dfe\u4e0a\u7684\u8d39\u7528\u4f1a\u5f88\u5927\u3002\u800cc\u8f83\u5927\u65f6\u8d2d\u4e70\u6bdb\u5dfe\u7684\u8d39\u7528\u4f1a\u5f88\u5927\u3002\n\n\n\u7406\u6027\u5730\u60f3\uff0c\u5e76\u4e0d\u5bf9\u52b2\u7684\u4eba\u5e76\u4e0d\u7406\u6027\u3002\n\n\n\u8bberi\u4e4b\u548c\u4e3aR\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230\u65f6\u95f4\u590d\u6742\u5ea6O(n log R)\u4e86\u5462\u3002\n\n\n \n\nex2\uff1a\u5728ex1\u7684\u6761\u4ef6\u4e0b\uff0c\u82e5\u5feb\u6d17\u5e97\u66f4\u4fbf\u5b9c\uff0c\u8be5\u600e\u4e48\u529e\uff1f\n\n\n\u90a3\u5c31\u522b\u6162\u6d17\u4e86\u3002\n\n\n \n\n\u662f\u8d2a\u5fc3\u80fd\u89e3\u6240\u6709\u7f51\u7edc\u6d41\u95ee\u9898\uff0c\u8fd8\u662f\u7f51\u7edc\u6d41\u80fd\u89e3\u6240\u6709\u8d2a\u5fc3\u95ee\u9898\u5462\uff08\u5c31\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u2026\u2026\uff09\uff1f\n",
        "postTime": 1516866686,
        "uid": 33242,
        "name": "echo6342",
        "ccfLevel": 0,
        "title": "\u5e76\u4e0d\u5bf9\u52b2\u7684\u9910\u5dfe\u8ba1\u5212\u95ee\u9898"
    },
    {
        "content": "Tags: OI\n\n#\u6d1b\u8c37P1251 [\u9910\u5dfe\u8ba1\u5212\u95ee\u9898]\n\n\u770b\u5230\u5404\u4f4d\u795e\u4ed9\u5199\u7684\u662fspfa+ek\uff0c\u8fd8\u6709\u4e00\u4e9b\u795e\u4ed9\u5199\u4e86\u6211\u4e0d\u4f1a\u7684zkw\u8d39\u7528\u6d41\uff0c\u88ab\u5413\u5230\u4e86\u3002\n\n\u56e0\u6b64\u6211\u5199\u4e86\u4e2a\u539f\u59cb\u5bf9\u5076\uff08Primal-Dual\uff09\u3002\n\n---\n\n\u62c6\u70b9\u8dd1\u8d39\u7528\u6d41\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e00\u5929\u90fd\u62c6\u6210\u65e9\u4e0a\u548c\u665a\u4e0a\uff0c\u65e9\u4e0a\u662f\u7528\u5e72\u51c0\u7684\u9910\u5dfe\uff0c\u665a\u4e0a\u5c31\u662f\u8981\u641e\u90a3\u4e9b\u810f\u7684\u9910\u5dfe\u3002\n\n\u7136\u540e\u8fde\u8fb9\u65b9\u6cd5\u5982\u4e0b\uff1a\n\n- \u6e90\u70b9\u5411\u6bcf\u4e00\u5929\u7684\u65e9\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$r_i$\uff0c\u8d39\u7528\u4e3a$0$\u7684\u8fb9\u3002\u6bcf\u4e00\u5929\u7684\u665a\u4e0a\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$r_i$\uff0c\u8d39\u7528\u4e3a$0$\u7684\u8fb9\n\n- \u5bf9\u4e8e\u4e0d\u6d17\u7684\u60c5\u51b5\uff0c\u6bcf\u4e00\u5929\u665a\u4e0a\u5411\u4e0b\u4e00\u5929\u665a\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$INF$\uff0c\u8d39\u7528\u4e3a$0$\u7684\u8fb9\u3002\n\n- \u5bf9\u4e8e\u7528\u5feb\u6d17\u7684\u60c5\u51b5\uff0c\u6bcf\u4e00\u5929\u665a\u4e0a\u5411\u5feb\u6d17\u7ed3\u675f\u4e4b\u540e\u7684\u90a3\u5929\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$INF$\uff0c\u8d39\u7528\u4e3a\u5feb\u6d17\u8d39\u7528\u7684\u8fb9\u3002\n\n- \u5bf9\u4e8e\u7528\u6162\u6d17\u7684\u60c5\u51b5\uff0c\u6bcf\u4e00\u5929\u665a\u4e0a\u5411\u6162\u6d17\u7ed3\u675f\u4e4b\u540e\u7684\u90a3\u5929\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$INF$\uff0c\u8d39\u7528\u4e3a\u6162\u6d17\u8d39\u7528\u7684\u8fb9\u3002\n\n- \u5bf9\u4e8e\u8d2d\u4e70\u65b0\u7684\u9910\u5dfe\uff0c\u6e90\u70b9\u5411\u6bcf\u4e00\u5929\u65e9\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$INF$\uff0c\u8d39\u7528\u4e3a\u4e70\u65b0\u6bdb\u5dfe\u8d39\u7528\u7684\u8fb9\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u8dd1\u8d39\u7528\u6d41\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(N \\times \\min(U, C))$ \u500d\u6700\u5927\u6d41\u65f6\u95f4\uff0c\u5927\u6982\u662f$O(C \\times N \\times (N+M) \\log N)$\uff1f\u4e0d\u786e\u5b9a~~\uff08\u7f51\u7edc\u6d41\u5c31\u662f\u7384\u5b66\uff09~~\n\ncode\uff1a\n\n```\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cctype>\n#include <queue>\n\n#define next Syameimaru_Aya\n\nusing namespace std;\n\ninline int read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\n\twhile (isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n\treturn x*f;\n}\n\nconst long long INF=1LL<<50;\n\nbool inq[500050],vis[500050];\n\nint e=1,first[500050],next[500050],tail[500050];\n\nlong long w[500050],d[500050],h[500050],cost=0,flow=0,r[500050];\n\nint preu[500050],pree[500050];\n\nint s=0,t,N;\n\ninline void Link(int u,int v,long long re,long long weight)\n{\n\tnext[++e]=first[u];\n\tfirst[u]=e;\n\ttail[e]=v;\n\tr[e]=re;\n\tw[e]=weight;\n\tnext[++e]=first[v];\n\tfirst[v]=e;\n\ttail[e]=u;\n\tr[e]=0;\n\tw[e]=-weight;\n}\n\ninline void Dijkstra()\n{\n\tfor (int i=1;i<=t;i++)\n\t{\n\t\tvis[i]=0;\n\t\td[i]=INF;\n\t}\n\td[s]=0;\n\tpriority_queue <pair<long long,int>,vector<pair<long long,int>>,greater<pair<long long,int>>> q;\n\twhile (!q.empty())\n\t\tq.pop();\n\tq.push(pair<long long,int>(0,s));\n\twhile (!q.empty())\n\t{\n\t\tpair <long long,int> rhs=q.top();\n\t\tq.pop();\n\t\tint u=rhs.second;\n\t\tif (vis[u])\n\t\t\tcontinue;\n\t\tfor (int i=first[u];i;i=next[i])\n\t\t{\n\t\t\tint v=tail[i];\n\t\t\tif (r[i]>0 && d[v]>d[u]+w[i]+h[u]-h[v])\n\t\t\t{\n\t\t\t\td[v]=d[u]+w[i]+h[u]-h[v];\n\t\t\t\tpreu[v]=u;\n\t\t\t\tpree[v]=i;\n\t\t\t\tq.push(pair<long long,int>(d[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\ninline void MinCostMaxFlow()\n{\n    memset(h,0,sizeof(h));\n    while (1)\n    {\n        Dijkstra();\n        //cout << d[t] << endl;\n        if (d[t]==INF)\n            break;\n        else\n        {\n            for (int u=1;u<=t;u++)\n                h[u]+=d[u];\n            long long delta=INF;\n            for (int u=t;u!=s;u=preu[u])\n            {\n                int e=pree[u];\n                delta=min(delta,r[e]);\n            }\n            flow+=delta;\n            cost+=delta*h[t];\n            for (int u=t;u!=s;u=preu[u])\n            {\n                int e=pree[u];\n                r[e]-=delta;\n                r[e^1]+=delta;\n            }\n        }\n    }\n}\n\nint main()\n{\n\tN=read();\n\tt=2*N+1;\n\tfor (int i=1;i<=N;i++)\n\t{\n\t\tint r=read();\n\t\tLink(s,i,r,0);\n\t\tLink(i+N,t,r,0);\n\t}\n\tint p=read(),m=read(),f1=read(),n=read(),s1=read();\n\tfor (int i=1;i<=N;i++)\n\t{\n\t\tLink(s,i+N,INF,p);\n\t\tif (i+m<=N)\n\t\t\tLink(i,N+i+m,INF,f1);\n\t\tif (i+n<=N)\n\t\t\tLink(i,i+n+N,INF,s1);\n\t\tif (i+1<=N)\n\t\t\tLink(i,i+1,INF,0);\n\t}\n\tMinCostMaxFlow();\n\tcout << cost << endl;\n\treturn 0;\n}\n```",
        "postTime": 1546666119,
        "uid": 8457,
        "name": "chen_zhe",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3002\n\n---\n\n#### \u5efa\u6a21\n\n\u5148\u53ea\u8003\u8651\u4e70\u5165\u9910\u5dfe\uff0c\u4e5f\u5c31\u662f\u4e0d\u8003\u8651\u9001\u6d17\uff0c\u4e0d\u96be\u5f97\u5230\u4e00\u4e0b\u5efa\u6a21\u65b9\u6cd5\uff1a\n\n\u5c06\u6bcf\u5929\u62bd\u8c61\u6210\u4e00\u4e2a\u70b9 $i$\uff0c\u4e0e\u6c47\u70b9 $t$ \u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a $r_i$ \uff0c\u8d39\u7528\u4e3a $0$\uff0c\u4ee3\u8868\u6bcf\u5929\u9700\u8981 $r_i$ \u6761\u9910\u5dfe\u3002\u7531\u6e90\u70b9 $s$ \u5411\u6bcf\u5929\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a $\\infty$\uff0c\u8d39\u7528\u4e3a $p$\uff0c\u4ee3\u8868\u4e70\u5165\u9910\u5dfe\u3002\u5f97\u5230\u4e0b\u9762\u7684\u7f51\u7edc $G$\uff1a\n\n![aus4l8.png](https://s1.ax1x.com/2020/07/30/aus4l8.png)\n\n\u53d1\u73b0\u8fd9\u4e2a\u56fe\u7f3a\u5c11\u4fe1\u606f\uff0c\u6211\u4eec\u9700\u8981\u628a\u9001\u6d17\u7684\u4fe1\u606f\u52a0\u5165\u56fe\u4e2d\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e00\u5929\uff0c\u518d\u5efa\u4e00\u4e2a\u70b9 $i'$\uff0c\u7531\u6e90\u70b9 $s$ \u5411\u5176\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a $r_i$\uff0c\u4ee3\u8868\u6bcf\u5929\u4ea7\u751f\u4e86 $r_i$ \u6761\u810f\u9910\u5dfe\u3002\u82e5\u53ef\u4ee5\u9001\u6d17\uff0c\u5219\u8fde\u8fb9 $i' \\to (i+k)$ \uff0c\u5176\u4e2d $k$ \u4ee3\u8868\u5feb\u6d17\u6216\u6162\u6d17\u6240\u9700\u7684\u5929\u6570\uff0c\u5bb9\u91cf\u4e3a $\\infty$\uff0c\u8d39\u7528\u4e3a\u6b64\u6b21\u9001\u6d17\u7684\u8d39\u7528\u3002\u7531\u4e8e\u53ef\u4ee5\u5ef6\u8fdf\u9001\u6d17\uff0c\u8fde\u63a5 $i' \\to (i+1)'$\uff0c\u5bb9\u91cf $\\infty$\u3002\u5f97\u5230\u4e0b\u9762\u7684\u7f51\u7edc $G'$\uff1a\n\n![aucmod.png](https://s1.ax1x.com/2020/07/30/aucmod.png)\n\n\u5728 $G'$ \u4e0a\u8dd1\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n---\n\n$\\text{Code}:$\n\n```cpp\n#pragma GCC target(\"avx\")\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#define maxn 5005\n#define maxm 500005\n#define R register\n#define INF 0x3f3f3f3f\nusing namespace std;\ntypedef long long lxl;\n\ninline lxl read()\n{\n\tlxl x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') {x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n\treturn x*f;\n}\n\nstruct edge\n{\n\tint v;\n\tlxl cp,w;\n\tint next;\n}e[maxm<<1];\n\nint head[maxn],k;\n\ninline void add(int u,int v,lxl cp,lxl w)\n{\n\te[k]=(edge){v,cp,w,head[u]};\n\thead[u]=k++;\n\te[k]=(edge){u,0,-w,head[v]};\n\thead[v]=k++;\n}\n\nint n,s,t;\nlxl dis[maxn],flw[maxn],mincost,maxflow;\nint pre[maxn];\nbool vis[maxn];\n\ninline bool SPFA()\n{\n\tqueue<int> q;\n\tmemset(dis,-1,sizeof(dis));\n\tmemset(vis,false,sizeof(vis));\n\tdis[s]=0;\n\tflw[s]=INF;\n\tvis[s]=true;\n\tpre[s]=-1;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tvis[u]=false;\n\t\tfor(int i=head[u];~i;i=e[i].next)\n\t\t{\n\t\t\tint v=e[i].v;\n\t\t\tif(!e[i].cp) continue;\n\t\t\tif(!~dis[v]||dis[v]>dis[u]+e[i].w)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+e[i].w;\n\t\t\t\tflw[v]=min(flw[u],e[i].cp);\n\t\t\t\tpre[v]=i;\n\t\t\t\tif(!vis[v]) q.push(v),vis[v]=true;\n\t\t\t}\n\t\t}\n\t}\n\treturn ~dis[t];\n}\n\ninline void update()\n{\n\tfor(int i=pre[t];~i;i=pre[e[i^1].v])\n\t{\n\t\te[i].cp-=flw[t];\n\t\te[i^1].cp+=flw[t];\n\t}\n\tmaxflow+=flw[t];\n\tmincost+=dis[t]*flw[t];\n}\n\nint main()\n{\n\t// freopen(\"P1251.in\",\"r\",stdin);\n\tn=read();\n\tmemset(head,-1,sizeof(head));\n\ts=1,t=(n<<1)+2;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tint ri=read();\n\t\tadd(i<<1|1,t,ri,0);\n\t\tadd(s,i<<1,ri,0);\n\t}\n\tint P=read(),M=read(),F=read(),N=read(),S=read();\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tadd(s,i<<1|1,INF,P);\n\t\tif(i+1<=n) add(i<<1,(i+1)<<1,INF,0);\n\t\tif(i+M<=n) add(i<<1,(i+M)<<1|1,INF,F);\n\t\tif(i+N<=n) add(i<<1,(i+N)<<1|1,INF,S);\n\t}\n\twhile(SPFA())\n\t\tupdate();\n\tprintf(\"%lld\\n\",mincost);\n\treturn 0;\n}\n```\n",
        "postTime": 1596094360,
        "uid": 224236,
        "name": "GoPoux4",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u5514\u5f88\u4e0d\u9519\u7684\u4e00\u4e2a\u9898\uff0c\u5efa\u8bae\u521d\u5b66\u8005\u4e0d\u8981\u770b\u9898\u89e3\uff0c\u81ea\u5df1\u60f3\u4e00\u60f3QwQ\n\n\u7531\u4e8e\u4e0d\u4f1a\u7528markdown\uff0c\u6240\u4ee5\u6ca1\u6cd5\u53ef\u89c6\u5316\uff0c\u56e0\u6b64\u4e0b\u6587\u7528<u,v,minf,maxf,cost>\u6765\u8868\u793a\u5efa\u4e00\u6761\u4eceu\u5230v\u7684\u4e0b\u754c\u662fminf\u4e0a\u754c\u662fmaxf\u8d39\u7528\u662fcost\u7684\u8fb9\uff0c\u7279\u6b8a\u7684\u5982\u679cminf=0\u90a3\u4e48\u76f4\u63a5\u7528<u,v,f,c>\u8868\u793a\uff0c\u610f\u4e49\u7c7b\u4f3c\u3002\n\n\u6839\u636e\u4e0a\u4e0b\u754c\u7f51\u7edc\u6d41\u7684\u4e00\u822c\u505a\u6cd5\uff0c\u53ef\u4ee5\u5f97\u77e5\u8fd9\u91cc\u5982\u679cminf=0\u90a3\u4e48\u5c31\u662f\u4e00\u822c\u7684\u7f51\u7edc\u6d41\u7684\u8fb9\u3002\n\n\u5426\u5219<u,v,minf,maxf,c>=<S,v,minf,0>+<u,T,minf,c>+<u,v,maxf-minf,c>\u3002\n\n\u9996\u5148\u975e\u5e38\u663e\u7136\u7684\uff0c\u4e3a\u4e86\u8868\u793a\u201c\u7528\u81f3\u5c11r\\_i\u5757\u9910\u5dfe\u201d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u628a\u6bcf\u4e2a\u70b9x\u62c6\u4e3apx\u548cqx\u3002\u5e76\u8fde\u8fb9<px,qx,r[x],inf,0>\uff0c\u6765\u4fdd\u8bc1\u7b2cx\u5929\u80fd\u591f\u6709r[x]\u5757\u9910\u5dfe\u3002\n\n\u7136\u540e\u5f88\u663e\u7136\u7684\uff0cpx\u8868\u793a\u7684\u662f\u65e9\u4e0a\uff0cqx\u8868\u793a\u7684\u662f\u665a\u4e0a\uff0c\u56e0\u6b64\u4e0d\u96be\u5904\u7406\u201c\u4e70\u9910\u5dfe\u201d\u201c\u5feb\u3001\u6162\u6d17\u201d\u8fd9\u4e09\u4e2a\u8fc7\u7a0b\uff1a\u5206\u522b\u5bf9\u5e94\u7740\uff1a\n\n<S,px,inf,p>\u3001<qx,p(x+m),inf,f>\u3001<qx,p(x+n),inf,s>\u3002\n\n\u770b\u8d77\u6765\u597d\u50cf\u6ca1\u6709\u95ee\u9898\u4e86\uff0c\u8fd9\u6837\u5c31\u5b8c\u4e86\u4e48\uff1f\n\n\u5176\u5b9e\u5e94\u8be5\u8fd8\u5c11\u4e86\u4e00\u4e2a\u8fc7\u7a0b\uff1a\u4eca\u5929\u6709\u591a\u4f59\u7684\u9910\u5dfe\u6ca1\u6709\u7528\u5b8c\uff0c\u5e76\u4e14\u662f\u5e72\u51c0\u7684\uff0c\u8fd9\u4e2a\u65f6\u5019\u4e0d\u80fd\u901a\u8fc7\u5feb\u6d17\u6216\u662f\u6162\u6d17\u8f6c\u79fb\u8d70\uff0c\u56e0\u6b64\u8981<px,p(x+1),inf,0>\u8868\u793a\u8fd9\u4e9b\u9910\u5dfe\u4eca\u5929\u4e0d\u7528\uff0c0\u4ee3\u4ef7\u7684\u7559\u5230\u660e\u5929\u7684\u8fc7\u7a0b\u3002\n\n\u7136\u540e\u2026\u2026\u7136\u540e\u5c31\u662f\u8dd1\u4e00\u4e2a\u6b63\u5e38\u7684\u8d39\u7528\u6d41\u5373\u53ef\uff0c\u663e\u7136\u539f\u56fe\u7684\u53ef\u884c\u6d41\u662f\u4e00\u5b9a\u5b58\u5728\u7684\uff08\u4f60\u81f3\u5c11\u53ef\u4ee5\u6bcf\u5929\u90fd\u4e70\u65b0\u7684\uff09\u3002\u6240\u4ee5\u8dd1\u4e00\u4e2a\u8d39\u7528\u6d41\u5373\u53ef\u3002\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<climits>\n#include<queue>\n#define N 4020\n#define M 15*N\n#define P(x) x\n#define Q(x) (x+n)\n#define inf INT_MAX\n#define INF LLONG_MAX\n#define lint long long\nusing namespace std;\nstruct edges{\n    int from,to,pre,resf,cost;\n}e[M];int etop,h[N];\ninline int add_edge(int u,int v,int f,int c)\n{\n    e[++etop].from=u,e[etop].to=v,e[etop].pre=h[u];\n    return e[etop].resf=f,e[etop].cost=c,h[u]=etop;\n}\ninline int build_edge(int u,int v,int f,int c)\n{\n    return add_edge(u,v,f,c),add_edge(v,u,0,-c);\n}\nlint d[N];bool inq[N];int fr[N];queue<int> q;\ninline int spfa(int s,int t,int &flow,lint &cost)\n{\n    for(int i=1;i<=t;i++) d[i]=INF;\n    memset(inq,false,sizeof(inq));\n    memset(fr,0,sizeof(fr));\n    while(!q.empty()) q.pop();\n    q.push(s),inq[s]=true,d[s]=0;\n    while(!q.empty())\n    {\n        int x=q.front();q.pop(),inq[x]=false;\n        for(int i=h[x],y;i;i=e[i].pre)\n            if(e[i].resf&&d[y=e[i].to]>d[x]+e[i].cost)\n            {\n                d[y]=d[x]+e[i].cost,fr[y]=i;\n                if(!inq[y]) inq[y]=true,q.push(y);\n            }\n    }\n    if(!fr[t]) return false;int minf=inf;\n    for(int i=fr[t];i;i=fr[e[i].from])\n        minf=min(minf,e[i].resf);\n    for(int i=fr[t];i;i=fr[e[i].from])\n        e[i].resf-=minf,e[((i-1)^1)+1].resf+=minf;\n    cost+=d[t]*minf,flow+=minf;return true;\n}\nint main()\n{\n    int n;scanf(\"%d\",&n);\n    int s=2*n+1,t=s+1;\n//    build_edge(t,s,inf,0);\n    for(int i=1;i<=n;i++)\n    {\n        int r;scanf(\"%d\",&r);\n        build_edge(s,Q(i),r,0);\n        build_edge(P(i),t,r,0);\n    }\n    int p,x,y,a,b;\n    scanf(\"%d%d%d%d%d\",&p,&x,&a,&y,&b);\n    for(int i=1;i<=n;i++)\n    {\n        build_edge(s,P(i),inf,p);\n        if(i+x<=n) build_edge(Q(i),P(i+x),inf,a);\n        if(i+y<=n) build_edge(Q(i),P(i+y),inf,b);\n    }\n    for(int i=1;i<n;i++) build_edge(P(i),P(i+1),inf,0);\n    int f=0;lint c=0;\n    while(spfa(s,t,f,c));\n    cout<<c<<endl;return 0;\n}\n```",
        "postTime": 1513314465,
        "uid": 8662,
        "name": "Mys_C_K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "**\u8fd9\u9053\u9898\u5e94\u8be5\u4e0d\u96be\u770b\u51fa\u662f\u9053\u8d39\u7528\u6d41\u7684\u9898\u76ee\uff0c\u4f46\u662f\u5177\u4f53\u600e\u4e48\u5efa\u56fe\u5012\u662f\u503c\u5f97\u8003\u8651\u7684\u3002**\n\n**\u9996\u5148\u6839\u636e\u9898\u610f\uff0c\u65e2\u8981\u6709\u6bcf\u5929\u65b0\u7684\u9910\u5dfe\uff0c\u53c8\u6709\u6bcf\u5929\u7528\u8fc7\u7684\u9910\u5dfe\uff0c\u8fd9\u4e24\u4e2a\u4fe1\u606f\u96be\u4ee5\u53ea\u7528\u4e00\u4e2a\u8868\u793a\u7b2c\u51e0\u5929\u7684\u70b9\u6765\u8868\u793a\uff0c\u6240\u4ee5\u8003\u8651\u62c6\u70b9\uff0c\u628a\u6bcf\u5929\u62c6\u6210\u65b0\u9910\u5dfe\u548c\u65e7\u9910\u5dfe\u4e24\u4e2a\u70b9\u3002**\n\n**\u6211\u4eec\u8981\u4fdd\u8bc1\u6bcf\u5929\u7684\u65e7\u9910\u5dfe\u7684\u4ea7\u751f\u91cf\u548c\u65b0\u9910\u5dfe\u7684\u4f9b\u5e94\u91cf\uff0c\u60f3\u5230\u4e0e\u6e90\u70b9\u548c\u6c47\u70b9\u76f4\u63a5\u76f8\u8fde\u6700\u5bb9\u6613\u4fdd\u8bc1\u8fd9\u4e2a\u8981\u6c42\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u6e90\u70b9\u5411\u6bcf\u5929\u7684\u65e7\u9910\u5dfe\u8fde\u5f53\u5929\u9700\u8981\u7684\u9910\u5dfe\u6570\u91cf\uff0c\u65b0\u9910\u5dfe\u5411\u6c47\u70b9\u8fde\u6bcf\u5929\u7684\u9910\u5dfe\u6570\u91cf\uff0c\u6bcf\u6d41\u5411\u6c47\u70b91\u70b9\u6d41\u91cf\u5c31\u8868\u90a3\u4e00\u5929\u4f9b\u5e94\u4e861\u5f20\u9910\u5dfe\uff0c\u800c\u4ee5\u4e0a\u4e24\u79cd\u8fde\u8fb9\u90fd\u662f\u6ca1\u6709\u82b1\u8d39\u7684\uff0c\u6240\u4ee5\u8d39\u7528\u662f0\u3002**\n\n**\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u5929\u7684\u65e7\u9910\u5dfe\u4e0d\u4e00\u5b9a\u8981\u6d17\uff0c\u6240\u6709\u6bcf\u5929\u7684\u65e7\u9910\u5dfe\u5411\u4e0b\u4e00\u5929\u8fde\u6d41\u91cf\u6b63\u65e0\u7a77\uff0c\u8d39\u7528\u662f0\u7684\u8fb9\u3002\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff0c\u6700\u540e\u4e00\u5929\u5f53\u7136\u5c31\u4e0d\u8981\u5411\u4e0b\u4e00\u5929\u8fde\u4e86\u3002**\n\n**\u7136\u540e\u8003\u8651\u76f4\u63a5\u8d2d\u4e70\uff0c\u76f4\u63a5\u8d2d\u4e70\u5bf9\u65e7\u9910\u5dfe\u6ca1\u6709\u5f71\u54cd\uff0c\u5b83\u53ef\u4ee5\u63d0\u4f9b\u82b1\u4e00\u5b9a\u8d39\u7528\u4e70\u65b0\u9910\u5dfe\uff0c\u800c\u8d2d\u4e70\u6ca1\u6709\u6570\u91cf\u4e0a\u9650\uff0c\u6240\u4ee5\u6e90\u70b9\u5230\u6bcf\u5929\u7684\u65b0\u9910\u5dfe\u8fde\u6d41\u91cf\u662f\u6b63\u65e0\u7a77\uff0c\u8d39\u7528\u662fp\u7684\u8fb9\u3002**\n\n**\u63a5\u4e0b\u6765\u8003\u8651\u5feb\u6d17\u548c\u6162\u6d17\u3002\u4e0d\u96be\u53d1\u73b0\u5b83\u4eec\u7684\u8fde\u8fb9\u65b9\u5f0f\u5e94\u8be5\u662f\u5f88\u7c7b\u4f3c\u7684\u3002\u6211\u4eec\u628a\u6bcf\u5929\u7684\u65e7\u9910\u5dfe\u5411m\u5929\u540e\u7684\u65b0\u9910\u5dfe\u8fde\u6d41\u91cf\u6b63\u65e0\u7a77\uff0c\u8d39\u7528\u662ff\u7684\u8fb9\uff0c\u8868\u793a\u5feb\u6d17\u3002\u540c\u6837\u5730\uff0c\u6211\u4eec\u628a\u6bcf\u5929\u7684\u65e7\u9910\u5dfe\u5411n\u5929\u540e\u7684\u65b0\u9910\u5dfe\u8fde\u4e00\u6761\u6d41\u91cf\u6b63\u65e0\u7a77\uff0c\u8d39\u7528\u662fs\u7684\u8fb9\uff0c\u8868\u793a\u6162\u6d17\u3002\u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u4e2a\u7ec6\u8282\uff0c\u5c31\u662f\u5bf9\u4e8e\u7b2ci\u5929\uff0ci+m\u548ci+n\u90fd\u662f\u8981\u5c0f\u4e8e\u7b49\u4e8e\u603b\u5929\u6570\u7684\u3002**\n\n**\u7136\u540e\u8dd1\u4e00\u4e2a\u8d39\u7528\u6d41\u5c31\u884c\u4e86\u3002**\n\n**\u6700\u540e\u662f\u4ee3\u7801\u3002**\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nlong long n,p,kuai,man,feik,feim,res,q[500000];\nlong long head[50001],cnt,st,ed,w[50000],v[50000],inq[50000],f[50001];\nstruct node\n{\n    long long next,to,c,other,cost,from;\n}a[500001];\nvoid add(long long from,long long to,long long c,long long cost)\n{\n    int k1,k2;\n    ++cnt;\n    k1=cnt;\n    a[cnt].next=head[from];\n    a[cnt].from=from;\n    a[cnt].to=to;\n    a[cnt].c=c;\n    a[cnt].cost=cost;\n    head[from]=cnt;\n    ++cnt;\n    k2=cnt;\n    a[cnt].next=head[to];\n    a[cnt].from=to;\n    a[cnt].to=from;\n    a[cnt].c=0;\n    a[cnt].cost=-cost;\n    head[to]=cnt;\n    a[k1].other=k2;\n    a[k2].other=k1;\n}\nvoid bfs()\n{\n    for(int i=1;i<=n;i++)\n    q[i]=0;\n    memset(v,0x3f,sizeof(v));\n    memset(w,0,sizeof(w));\n    memset(inq,0,sizeof(inq));\n    memset(f,0,sizeof(f));\n    int h=1,t=1;\n    q[1]=st;\n    v[st]=0;\n    w[st]=2e9;\n    while(h<=t)\n    {\n        int x=q[h];\n        inq[x]=0;\n        for(int i=head[x];i;i=a[i].next)\n        {\n            int y=a[i].to;\n            if(a[i].c>0&&v[y]>v[x]+a[i].cost)\n            {\n                w[y]=min(w[x],a[i].c);\n                v[y]=v[x]+a[i].cost;\n                f[y]=i;\n                if(!inq[y])\n                {\n                    q[++t]=y;\n                    inq[y]=1;\n                }\n            }\n        }\n        h++;\n    }\n    for(int i=f[ed];i;i=f[a[i].from])\n    {\n        a[i].c-=w[ed];\n        a[a[i].other].c+=w[ed];\n    }\n}\nint main()\n{\n    scanf(\"%lld\",&n);\n    st=0,ed=2*n+1;\n    for(int i=1;i<=n;i++)\n    {\n        long long x;\n        scanf(\"%lld\",&x);\n        add(st,i,x,0);\n        add(i+n,ed,x,0);\n    }\n    scanf(\"%lld%lld%lld%lld%lld\",&p,&kuai,&feik,&man,&feim);    \n    for(int i=1;i<=n;i++)\n    {\t\t\n        if(i+1<=n)\n        add(i,i+1,2e9,0);\n        if(i+kuai<=n)\n        add(i,i+kuai+n,2e9,feik);\t\t\n        if(i+man<=n)\n        add(i,i+man+n,2e9,feim);\t\t\n        add(st,i+n,2e9,p);\n    }\n    while(1)\n    {\n        bfs();\n        if(w[ed]>0)\n        res+=v[ed]*w[ed];\n        else\n        break;\n    }\n    printf(\"%lld\\n\",res);\n    return 0;\n}\n```",
        "postTime": 1541595809,
        "uid": 98954,
        "name": "\u4e0d\u5b58\u5728\u4e4b\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "*\u65f6\u95f4\uff1a2019.3.19*\n\n**\u7f51\u7edc\u6d4124\u9898**\uff1a\u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011\n\n## \u9898\u76ee\u63cf\u8ff0\n\n\u4e00\u4e2a\u9910\u5385\u5728\u76f8\u7ee7\u7684 $N$ \u5929\u91cc,\u6bcf\u5929\u9700\u7528\u7684\u9910\u5dfe\u6570\u4e0d\u5c3d\u76f8\u540c\u3002\u5047\u8bbe\u7b2c $i$ \u5929\u9700\u8981 $r_i$ \u5757\u9910\u5dfe($i=1,2,...,N$)\u3002\u9910\u5385\u53ef\u4ee5\u8d2d\u4e70\u65b0\u7684\u9910\u5dfe,\u6bcf\u5757\u9910\u5dfe\u7684\u8d39\u7528\u4e3a $p$ \u5206;\u6216\u8005\u628a\u65e7\u9910\u5dfe\u9001\u5230\u5feb\u6d17\u90e8,\u6d17\u4e00\u5757\u9700 $a$ \u5929,\u5176\u8d39\u7528\u4e3a $f$ \u5206;\u6216\u8005\u9001\u5230\u6162\u6d17\u90e8,\u6d17\u4e00\u5757\u9700 $b$ \u5929($b>a$),\u5176\u8d39\u7528\u4e3a $s$ \u5206($s < f$)\u3002\n\n\u6bcf\u5929\u7ed3\u675f\u65f6,\u9910\u5385\u5fc5\u987b\u51b3\u5b9a\u5c06\u591a\u5c11\u5757\u810f\u7684\u9910\u5dfe\u9001\u5230\u5feb\u6d17\u90e8,\u591a\u5c11\u5757\u9910\u5dfe\u9001\u5230\u6162\u6d17\u90e8,\u4ee5\u53ca\u591a\u5c11\u5757\u4fdd\u5b58\u8d77\u6765\u5ef6\u671f\u9001\u6d17\u3002\u4f46\u662f\u6bcf\u5929\u6d17\u597d\u7684\u9910\u5dfe\u548c\u8d2d\u4e70\u7684\u65b0\u9910\u5dfe\u6570\u4e4b\u548c,\u8981\u6ee1\u8db3\u5f53\u5929\u7684\u9700\u6c42\u91cf\u3002\n\n\u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u4e3a\u9910\u5385\u5408\u7406\u5730\u5b89\u6392\u597d $N$ \u5929\u4e2d\u9910\u5dfe\u4f7f\u7528\u8ba1\u5212,\u4f7f\u603b\u7684\u82b1\u8d39\u6700\u5c0f\u3002\u7f16\u7a0b\u627e\u51fa\u4e00\u4e2a\u6700\u4f73\u9910\u5dfe\u4f7f\u7528\u8ba1\u5212\u3002\n\n## \u5efa\u56fe\uff081\uff09\n\n\u8003\u8651\u5efa\u51fa\u4e0b\u9762\u8fd9\u5f20\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/54489.png)\n\n\u5c06\u6bcf\u5929\u5f53\u6210\u4e00\u4e2a\u70b9\uff0c\u6839\u636e\u5f53\u5929\u7684\u9910\u5dfe\u662f\u5426\u5df2\u4f7f\u7528\uff0c\u62c6\u6210**\u524d**\u548c**\u540e**\u3002  \n$S$\u5411**\u524d**\u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a$p$\uff0c\u8868\u793a\u53ef\u4ee5\u4efb\u610f\u4e70\u65b0\u9910\u5dfe  \n**\u524d**\u5411**\u540e**\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a$r_i$\uff0c\u8868\u793a\u9700\u8981\u4f7f\u7528$r_i$\u6761\u9910\u5dfe\u3002  \n\u7b2c$N$\u4e2a**\u540e**\u5411$T$\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a$\\sum r_i$\uff0c\u8868\u793a\u9700\u8981\u5c06\u6240\u6709\u9910\u5dfe\u7528\u6389\u3002  \n\u6bcf\u5929**\u540e**\u5411$a$\u5929\u540e\u7684**\u524d**\u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a$s$\uff0c\u8868\u793a\u9001\u5230\u5feb\u6d17\u90e8\uff08\u6162\u6d17\u90e8\u540c\u7406\uff09\n\n------\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u53ea\u9700\u8981\u63a7\u5236\u6d41\u5411**\u540e**\u7684\u6d41\u91cf\u5747\u4e3a$r_i$\u5c31\u884c\u4e86\u3002\n\n\u4f46\u662f\uff0c\u8fd9\u6837\u5c31\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a**\u6211\u4eec\u6ca1\u529e\u6cd5\u63a7\u5236\u6d41\u5411\u540e\u7684\u6d41\u91cf\u521a\u597d\u6d41\u6ee1\u5440\uff1f**\n\n\u770b\u6765\u6211\u4eec\u8981\u6539\u53d8\u5efa\u56fe\u65b9\u5f0f\u4e86\u3002\n\n## \u5efa\u56fe\uff082\uff09\n\n\u5efa\u51fa\u4e0b\u9762\u8fd9\u5f20\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/54490.png)\n\n\n\u5c06\u6bcf\u5929\u5f53\u6210\u4e00\u4e2a\u70b9\uff0c\u6839\u636e\u5f53\u5929\u7684\u9910\u5dfe\u662f\u5426\u5df2\u4f7f\u7528\uff0c\u62c6\u6210**\u524d**\u548c**\u540e**\u3002  \n$S$\u5411**\u524d**\u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a$p$\uff0c\u8868\u793a\u53ef\u4ee5\u4efb\u610f\u4e70\u65b0\u9910\u5dfe\u3002  \n**\u524d**\u5411$T$\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a$r_i$\uff0c**\u8868\u793a\u8981\u6d88\u8017$\\textbf{r}_\\textbf{i}$\u6761\u9910\u5dfe\u3002**  \n$S$\u5411**\u540e**\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a$r_i$\uff0c**\u8868\u793a\u6536\u5230\u7528\u524d\u4ea7\u751f\u7684$\\textbf{r}_\\textbf{i}$\u6761\u65e7\u9910\u5dfe**\u3002  \n\u6bcf\u5929**\u540e**\u5411$a$\u5929\u540e\u7684**\u524d**\u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a$s$\uff0c\u8868\u793a\u9001\u5230\u5feb\u6d17\u90e8\uff08\u6162\u6d17\u90e8\u540c\u7406\uff09\n\n------\n\n\u8fd9\u6837\u5efa\u56fe\u610f\u5473\u7740**\u524d**\u7684\u6d41\u4e0e**\u540e**\u7684\u6d41\u610f\u4e49\u4e0d\u540c\u3002  \n\u4ece$S$\uff08\u6216\u51e0\u5929\u524d\u7684**\u540e**\uff09\u6d41\u5411**\u524d**\u7684\u6d41\u8868\u793a\u80fd\u4f7f\u7528\u7684\u65b0\u9910\u5dfe\uff0c  \n\u800c\u4ece$S$\u6d41\u5411**\u540e**\u7684\u6d41\u8868\u793a\u4f7f\u7528\u540e\u7559\u4e0b\u7684$r_i$\u6761\u65e7\u9910\u5dfe\u3002\n\n\u6211\u4eec\u63a7\u5236\u4e86\u4ece**\u524d**\u6d41\u51fa\u7684\u9910\u5dfe\uff08\u5373\u4f7f\u7528\u6570\u91cf\uff09\u4e3a$r_i$\uff0c\u800c\u6d41\u8fdb**\u540e**\u7684\u9910\u5dfe\u6570\u91cf\u521a\u597d\u4e3a$r_i$\n\n## \u4ee3\u7801\n\n\u6ce8\u610f\u4e0a\u9762\u6ca1\u6709\u8bb2\u5230\u7684\u4e00\u70b9\uff1a\u4f7f\u7528\u524d\u591a\u4f59\u7684\u5e72\u51c0\u9910\u5dfe\u53ef\u4ee5\u7559\u5230\u660e\u5929\u518d\u4f7f\u7528\u3002  \n\u5c06\u4eca\u5929\u7684**\u524d**\u5411\u660e\u5929\u7684**\u524d**\u8fde\u8fb9\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int kMaxN = 2000 * 2 + 10;\nconst int kMaxM = kMaxN * 4;\nconst int kInf = 4e18;\nstruct Graph {\n  struct Arc {\n    int to, cap, cost;\n    int next;\n  };\n  Arc arcs[kMaxM << 1];\n  int top, head[kMaxN];\n  Graph() { top = 1; }\n  void Add(int u, int v, int cap, int cost) {\n    arcs[++top] = (Arc) {v, cap, cost, head[u]};\n    head[u] = top;\n    arcs[++top] = (Arc) {u, 0, -cost, head[v]};\n    head[v] = top;\n  }\n  int s, t;\n  queue<int> Q;\n  bool in[kMaxN];\n  int cost[kMaxN], flow[kMaxN], last[kMaxN];\n  bool Spfa() {\n    memset(flow, 0, sizeof(flow));\n    memset(last, 0, sizeof(last));\n    memset(cost, 0x7F, sizeof(cost));\n    // \u4e0d\u7528memset flow\u548clast\n    // \u8fd9\u4e24\u4e2a\u6570\u7ec4\u4e0d\u53c2\u4e0e\u6700\u77ed\u8def\u8ba1\u7b97\n    // \u4e00\u5b9a\u8981\u5199flow[t] = 0\n    // \u5982\u679c\u6709\u8d1f\u73af\u4e00\u5b9a\u8981\u5199memset(in)\n    Q.push(s);\n    cost[s] = 0;\n    flow[s] = kInf;\n    flow[t] = 0; // !!!\n    while (!Q.empty()) {\n      int u = Q.front();\n      Q.pop();\n      in[u] = false;\n      for (int i = head[u]; i; i = arcs[i].next) {\n        Arc& arc = arcs[i];\n        int v = arc.to;\n        if (cost[u] + arc.cost < cost[v] && arc.cap) {\n          cost[v] = cost[u] + arc.cost;\n          flow[v] = min(flow[u], arc.cap);\n          last[v] = i;\n          if (!in[v]) {\n            in[v] = true;\n            Q.push(v);\n          }\n        }\n      }\n    }\n    return flow[t] != 0;\n  }\n  int max_flow, min_cost;\n  void Update() {\n    int u = t;\n    while (u != s) {\n      int i = last[u];\n      arcs[i].cap -= flow[t];\n      arcs[i ^ 1].cap += flow[t];\n      u = arcs[i ^ 1].to;\n    }\n    max_flow += flow[t];\n    min_cost += cost[t] * flow[t];\n  }\n  void Ek() {\n    max_flow = min_cost = 0;\n    while (Spfa()) Update();\n  }\n};\nGraph G;\nint n;\nint p, a, f, b, s;\n#define UNUSED(I) (I)\n#define USED(I) ((I) + 2001)\nsigned main() {\n  scanf(\"%lld\", &n);\n  G.s = kMaxN - 2;\n  G.t = kMaxN - 1;\n  for (int i = 1; i <= n; i++) {\n    int r;\n    scanf(\"%lld\", &r);\n    G.Add(UNUSED(i), G.t, r, 0);\n    G.Add(G.s, USED(i), r, 0);\n  }\n  scanf(\"%lld %lld %lld %lld %lld\",\n        &p, &a, &f, &b, &s);\n  for (int i = 1; i <= n; i++) {\n    G.Add(G.s, UNUSED(i), kInf, p);\n    if (i + 1 <= n) G.Add(UNUSED(i), UNUSED(i + 1), kInf, 0);\n    if (i + a <= n) G.Add(USED(i), UNUSED(i + a), kInf, f);\n    if (i + b <= n) G.Add(USED(i), UNUSED(i + b), kInf, s);\n  }\n  G.Ek();\n  // printf(\"%lld %lld\\n\", G.min_cost, G.max_flow);\n  printf(\"%lld\\n\", G.min_cost);\n  return 0;\n}\n```",
        "postTime": 1552984614,
        "uid": 57525,
        "name": "longlongzhu123",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "## \u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u4e2d\u7684 \n# \u5efa\u6a21\u96be\u9898\uff1a\n### \u9910\u5dfe\u8ba1\u5212\u95ee\u9898\n\n\u8fd9\u9053\u9898\u53ea\u8981\u60a8\u5b66\u4f1a\u4e86\u5982\u4f55**\u5efa\u6a21**\uff0c\u8fd8\u6709\u4f1a**\u62c6\u70b9**\uff08\u7f51\u7edc\u6d41\u5fc5\u5907\uff09\uff0c\u7136\u540e\u5957\u4e00\u6ce2\u6a21\u677f\uff0c\u5c31\u80fd~~\u8f7b\u677eA\u6389~~\u3002\n\n\u5efa\u6a21\u65b9\u6cd5\uff1a\n\n\u601d\u8def\uff1a**\u5efa\u65f6\u95f4\u8f74\uff0c\u5c06\u6bcf\u4e00\u5929\u62c6\u4e3a\u65e9\u4e0a\u548c\u665a\u4e0a\uff08\u5e72\u51c0\u7684\u7eb8\u5dfe\u548c\u810f\u7684\u7eb8\u5dfe\uff09**\u3002\n\n**1. \u5148\u5efa\u8d85\u6e90\u8d85\u6c47\u3002**\n\n**2.\u8d85\u6e90\u5411\u6bcf\u4e00\u5929\u665a\u4e0a\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u5f53\u5929\u9700\u8981\u7684\u7eb8\u5dfe\u6570\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002**\n\n**3.\u8d85\u6c47\u5411\u6bcf\u4e00\u5929\u65e9\u4e0a\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u5f53\u5929\u9700\u8981\u7684\u7eb8\u5dfe\u6570\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002**\n\n**4.\u6bcf\u5929\u665a\u4e0a\u5411\u4e0b\u4e00\u5929\u665a\u4e0a\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff08\u5c06\u5f53\u5929\u7684\u810f\u7eb8\u5dfe\u7559\u5230\u4e0b\u4e00\u5929\uff09\u3002**\n\n**5.\u8fde\u5feb\u6d17\uff0c\u6162\u6d17\u5e97\u7684\u8fb9\uff08\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\uff0c\u5c31\u662f\u4ece\u5f53\u5929\u665a\u4e0a\u5411\u8fc7k\uff08\u6d17\u7684\u5929\u6570\uff09\u540e\u90a3\u4e00\u5929\u65e9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a\u6d17\u7eb8\u5dfe~~\uff08\u867d\u7136\u6211\u4e0d\u77e5\u9053\u7eb8\u5dfe\u80fd\u6d17\uff09~~\u7684\u8d39\u7528\u7684\u8fb9\uff09\u3002**\n\n**6.\u8fde\u4e70\u65b0\u7eb8\u5dfe\u7684\u8fb9\uff0c\u5c31\u662f\u4ece\u8d85\u6e90\u5411\u6bcf\u5929\u65e9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a\u4e70\u65b0\u7eb8\u5dfe\u8d39\u7528\u7684\u8fb9\u3002**\n\n##### \u6ce8\u610f\uff1a\u8981\u8fde\u7684\u70b9\u662f\u5426\u8d8a\u754c\u3002\n\n\u6211\u662f\u7528EK\u52a0SPFA\u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6~~\u61d2\u5f97\u7b97~~\uff0c~~\u4e3aO\uff08\u80fd\u8fc7\uff09~~\u3002\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n \n#define N 5000\n#define M 12000\n#define INF 0x7fffffff\n \nusing namespace std;\n \nint n,newcost,fast,fastcost,slow,slowcost,head[N],c[M],cost[M],nxt[M],to[M],into[N],out[N],f[N],pre[N],cnt,tot,s,t,minn,ans;\n//newcost\u4e3a\u4e70\u65b0\u7eb8\u5dfe\u7684\u8d39\u7528\uff0cfast\u4e3a\u5feb\u6d17\u5e97\u9700\u8981\u7684\u5929\u6570\uff0cfastcost\u4e3a\u5feb\u6d17\u5e97\u9700\u8981\u7684\u8d39\u7528\uff0c\u6162\u6d17\u5e97slow\u540c\u7406\uff0ccnt\u4e3a\u8fb9\u7684\u7f16\u53f7\uff0ctot\u4e3a\u70b9\u7684\u7f16\u53f7\uff0cminn\u4e3a\u6bcf\u6761\u627e\u5230\u7684\u589e\u5e7f\u8def\u7684\u6d41\u91cf\u3002\nbool vis[N];\n \nqueue<int>q;\n \nvoid adde(int u,int v,int a,int b){//\u6211\u7528\u7684\u662f\u90bb\u63a5\u8868\u5b58\u8fb9\n    cnt++;\n    to[cnt]=v;\n    c[cnt]=a;\n    cost[cnt]=b;\n    nxt[cnt]=head[u];\n    head[u]=cnt;\n     \n    cnt++;\n    to[cnt]=u;\n    c[cnt]=0;\n    cost[cnt]=-b;\n    nxt[cnt]=head[v];\n    head[v]=cnt;\n}\n \nbool SPFA(){//\u5957\u6a21\u677f\n    for(int i=s;i<=t;i++){//\u5207\u8bb0\u521d\u59cb\u5316\uff0c\u6211\u88ab\u5751\u8fc7n\u904d\n        f[i]=INF;\n    }\n    q.push(s);\n    vis[s]=true;\n    f[s]=0;\n    while(!q.empty()){\n        int now=q.front();\n        q.pop();\n        vis[now]=false;\n        for(int i=head[now];i;i=nxt[i]){\n            if(c[i]&&f[now]+cost[i]<f[to[i]]){\n                f[to[i]]=f[now]+cost[i];\n                pre[to[i]]=i;\n                if(!vis[to[i]]){\n                    q.push(to[i]);\n                    vis[to[i]]=true;\n                }\n            }\n        }\n    }\n    if(f[t]==INF){\n        return false;\n    }else{\n        return true;\n    }\n}\n \nvoid EK(){//\u5957\u6a21\u677f\n    while(SPFA()){\n        minn=INF;\n        for(int i=t;i!=s;i=to[pre[i]^1]){\n            minn=min(minn,c[pre[i]]);\n        }\n        for(int i=t;i!=s;i=to[pre[i]^1]){\n            c[pre[i]]-=minn;\n            c[pre[i]^1]+=minn;\n            ans+=minn*cost[pre[i]];\n        }\n    }\n}\n \nint main(){\n    scanf(\"%d%d%d%d%d%d\",&n,&newcost,&fast,&fastcost,&slow,&slowcost);\n    cnt=1;\n    tot=1;\n    s=1;\n    t=1+2*n+1;\n    for(int i=1;i<=n;i++){//\u7ed9\u6bcf\u4e2a\u70b9\u7684\u65e9\u4e0a\u70b9\u548c\u665a\u4e0a\u70b9\u7f16\u53f7\n        into[i]=++tot;//into\u5b58\u7684\u662f\u65e9\u4e0a\n        out[i]=++tot;//out\u5b58\u7684\u662f\u665a\u4e0a\n    }\n    for(int i=1;i<=n;i++){\n        int ni;\n        scanf(\"%d\",&ni);\n        adde(s,out[i],ni,0);//\u5efa\u7b2c2\u6761\u5efa\u6a21\u65b9\u6cd5\u7684\u8fb9\n        adde(into[i],t,ni,0);//\u5efa\u7b2c3\u6761\u5efa\u6a21\u65b9\u6cd5\u7684\u8fb9\n        adde(s,into[i],INF,newcost);//\u5efa\u7b2c6\u6761\u5efa\u6a21\u65b9\u6cd5\u7684\u8fb9\n        if(out[i+1]<t){\n            adde(out[i],out[i+1],INF,0);//\u5efa\u7b2c4\u6761\u5efa\u6a21\u65b9\u6cd5\u7684\u8fb9\n        }\n        if(into[i+fast]<t){\n            adde(out[i],into[i+fast],INF,fastcost);//\u5efa\u7b2c5\uff08\u5feb\u6d17\u5e97\uff09\u5efa\u6a21\u65b9\u6cd5\u7684\u8fb9\n        }\n        if(into[i+slow]<t){\n            adde(out[i],into[i+slow],INF,slowcost);/\u5efa\u7b2c5\uff08\u6162\u6d17\u5e97\uff09\u5efa\u6a21\u65b9\u6cd5\u7684\u8fb9\n        }\n    }\n    EK();\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\u6211\u8ba4\u4e3a\uff1a\u5176\u5b9e\uff0c\u505a\u6700\u5927\u6d41\u5173\u952e\u5728\u4e8e\u5efa\u6a21\u548c\u4e00\u4e9b\u6280\u5de7\u7684\u4f7f\u7528\uff08\u5982\u62c6\u70b9\uff0c\u62c6\u8fb9\uff0c\u5229\u7528\u6b8b\u91cf\u7f51\u7edc\u7b49\u7b49\uff09\uff0c\u5176\u4ed6\u7684\u5957\u4e00\u6ce2\u6a21\u677f\u5c31\u884c\u4e86\u3002",
        "postTime": 1533480957,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "> \u4f20\u9001\u95e8 [$\\looparrowright$](https://www.luogu.com.cn/problem/P1251)  \n\n## \u9898\u76ee\u63cf\u8ff0  \n&emsp;&emsp;\u4e00\u4e2a\u9910\u5385\u5728\u76f8\u7ee7\u7684 $N$ \u5929\u91cc,\u6bcf\u5929\u9700\u7528\u7684\u9910\u5dfe\u6570\u4e0d\u5c3d\u76f8\u540c\u3002\u5047\u8bbe\u7b2c $i$ \u5929\u9700\u8981 $r_i$ \u5757\u9910\u5dfe\uff08$ i=1,2,\\cdots,N$\uff09\u3002\u9910\u5385\u53ef\u4ee5\u8d2d\u4e70\u65b0\u7684\u9910\u5dfe,\u6bcf\u5757\u9910\u5dfe\u7684\u8d39\u7528\u4e3a $p$ \u5206;\u6216\u8005\u628a\u65e7\u9910\u5dfe\u9001\u5230\u5feb\u6d17\u90e8,\u6d17\u4e00\u5757\u9700 $m$ \u5929,\u5176\u8d39\u7528\u4e3a $f$ \u5206;\u6216\u8005\u9001\u5230\u6162\u6d17\u90e8,\u6d17\u4e00\u5757\u9700 $n$ \u5929\uff08$n>m$\uff09,\u5176\u8d39\u7528\u4e3a $s$ \u5206\uff08$s<f$\uff09\u3002  \n&emsp;&emsp;\u6bcf\u5929\u7ed3\u675f\u65f6,\u9910\u5385\u5fc5\u987b\u51b3\u5b9a\u5c06\u591a\u5c11\u5757\u810f\u7684\u9910\u5dfe\u9001\u5230\u5feb\u6d17\u90e8,\u591a\u5c11\u5757\u9910\u5dfe\u9001\u5230\u6162\u6d17\u90e8,\u4ee5\u53ca\u591a\u5c11\u5757\u4fdd\u5b58\u8d77\u6765\u5ef6\u671f\u9001\u6d17\u3002\u4f46\u662f\u6bcf\u5929\u6d17\u597d\u7684\u9910\u5dfe\u548c\u8d2d\u4e70\u7684\u65b0\u9910\u5dfe\u6570\u4e4b\u548c,\u8981\u6ee1\u8db3\u5f53\u5929\u7684\u9700\u6c42\u91cf\u3002  \n&emsp;&emsp;\u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u4e3a\u9910\u5385\u5408\u7406\u5730\u5b89\u6392\u597d $N$ \u5929\u4e2d\u9910\u5dfe\u4f7f\u7528\u8ba1\u5212,\u4f7f\u603b\u7684\u82b1\u8d39\u6700\u5c0f\u3002\u7f16\u7a0b\u627e\u51fa\u4e00\u4e2a\u6700\u4f73\u9910\u5dfe\u4f7f\u7528\u8ba1\u5212\u3002  \n## \u8f93\u5165\u683c\u5f0f  \n&emsp;&emsp;\u7531\u6807\u51c6\u8f93\u5165\u63d0\u4f9b\u8f93\u5165\u6570\u636e\u3002\u6587\u4ef6\u7b2c $1$ \u884c\u6709 $1$ \u4e2a\u6b63\u6574\u6570 $N$\uff0c\u4ee3\u8868\u8981\u5b89\u6392\u9910\u5dfe\u4f7f\u7528\u8ba1\u5212\u7684\u5929\u6570\u3002  \n&emsp;&emsp;\u63a5\u4e0b\u6765\u7684\u4e00\u884c\u662f\u9910\u5385\u5728\u76f8\u7ee7\u7684 $N$ \u5929\u91cc,\u6bcf\u5929\u9700\u7528\u7684\u9910\u5dfe\u6570\u3002  \n&emsp;&emsp;\u6700\u540e\u4e00\u884c\u5305\u542b $5$ \u4e2a\u6b63\u6574\u6570 $p,m,f,n,s$\u3002$p$ \u662f\u6bcf\u5757\u65b0\u9910\u5dfe\u7684\u8d39\u7528\uff1b$m$ \u662f\u5feb\u6d17\u90e8\u6d17\u4e00\u5757\u9910\u5dfe\u9700\u7528\u5929\u6570\uff1b$f$ \u662f\u5feb\u6d17\u90e8\u6d17\u4e00\u5757\u9910\u5dfe\u9700\u8981\u7684\u8d39\u7528\uff1b$n$ \u662f\u6162\u6d17\u90e8\u6d17\u4e00\u5757\u9910\u5dfe\u9700\u7528\u5929\u6570\uff1b$s$ \u662f\u6162\u6d17\u90e8\u6d17\u4e00\u5757\u9910\u5dfe\u9700\u8981\u7684\u8d39\u7528\u3002  \n## \u8f93\u51fa\u683c\u5f0f  \n&emsp;&emsp;\u5c06\u9910\u5385\u5728\u76f8\u7ee7\u7684 $N$ \u5929\u91cc\u4f7f\u7528\u9910\u5dfe\u7684\u6700\u5c0f\u603b\u82b1\u8d39\u8f93\u51fa\u3002  \n## \u8f93\u5165\u8f93\u51fa\u6837\u4f8b  \n### \u8f93\u5165 \\#1  \n> 3   \n> 1 7 5   \n> 11 2 2 3 1  \n\n### \u8f93\u51fa #1  \n> 134  \n\n## \u8bf4\u660e/\u63d0\u793a  \n&emsp;&emsp;$N\\leqslant 2000$\uff0c$r_i\\leqslant 10000000$\uff0c$p,f,s\\leqslant10000$\u3002\u65f6\u9650 $4\\mathrm s$\u3002    \n## \u5206\u6790  \n&emsp;&emsp;\u9898\u76ee\u4e2d\u6709\u8bf4\uff1a\u6bcf\u5929\u7ed3\u675f\u65f6,\u9910\u5385\u5fc5\u987b\u51b3\u5b9a\u5c06\u591a\u5c11\u5757\u810f\u7684\u9910\u5dfe\u9001\u5230\u5feb\u6d17\u90e8,\u591a\u5c11\u5757\u9910\u5dfe\u9001\u5230\u6162\u6d17\u90e8,\u4ee5\u53ca\u591a\u5c11\u5757\u4fdd\u5b58\u8d77\u6765\u5ef6\u671f\u9001\u6d17\uff1b\u6bcf\u5929\u6d17\u597d\u7684\u9910\u5dfe\u548c\u8d2d\u4e70\u7684\u65b0\u9910\u5dfe\u6570\u4e4b\u548c,\u8981\u6ee1\u8db3\u5f53\u5929\u7684\u9700\u6c42\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u5b8c\u6574\u7684\u4e00\u5929\uff0c\u6bcf\u5929\u65e9\u6668\u81f3\u5c11\u8981\u83b7\u5f97\u6ee1\u8db3\u5f53\u5929\u9700\u6c42\u7684\u8d76\u7d27\u9910\u5dfe\uff0c\u5e72\u51c0\u9910\u5dfe\u53ef\u4ee5\u4ece\u5feb\u6d17\u90e8\u6216\u6162\u6d17\u90e8\u83b7\u5f97\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4e70\uff1b\u6bcf\u5929\u665a\u4e0a\u8981\u51b3\u5b9a\u810f\u9910\u5dfe\u7684\u53bb\u5904\u3002\u6bcf\u4e2a\u72b6\u6001\u6709\u591a\u79cd\u9009\u62e9\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u8003\u8651\u5206\u5c42\u56fe\u6700\u77ed\u8def\uff0c\u7136\u800c\uff0c\u5bf9\u4e8e\u6b64\u9898\uff0c\u6309\u7167\u6700\u77ed\u8def\u7684\u601d\u60f3\u96be\u4ee5\u5b8c\u6210\u5efa\u56fe\u7684\u5de5\u4f5c\uff1b\u8981\u4f7f $N$ \u5929\u5185\u6bcf\u4e00\u5929\u90fd\u6ee1\u8db3\u9910\u5dfe\u7684\u4f7f\u7528\u9700\u6c42\uff0c\u4e14\u8981\u6c42\u8d39\u7528\u6700\u5c0f\uff0c\u4e0d\u59a8\u8fdb\u4e00\u6b65\u8003\u8651\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3002  \n&emsp;&emsp;\u4e0d\u59a8\u5c31\u5c06 $N$ \u5929\u4f5c\u4e3a $N$ \u4e2a\u8282\u70b9\uff0c\u518d\u8003\u8651\u65e9\u6668\u548c\u665a\u4e0a\u7684\u4e0d\u540c\u5206\u5de5\uff0c\u5c31\u5c06\u6bcf\u4e2a\u70b9\u62c6\u6210\u4ee3\u8868\u3010\u65e9\u6668\uff0c\u591c\u665a\u3011\u7684\u4e24\u4e2a\u70b9\u3002\u89c4\u5b9a\uff1a\u4ee3\u8868\u65e9\u6668\u7684\u70b9\u7f16\u53f7\u4e3a $1\\sim N$\uff0c\u4ee3\u8868\u591c\u665a\u7684\u70b9\u7f16\u53f7\u4e3a $N+1\\sim 2N$\uff0c\u6e90\u70b9 $\\text{source}$ \u7684\u7f16\u53f7\u4e3a $0$\uff0c\u6c47\u70b9 $\\text{sink}$ \u7684\u7f16\u53f7\u4e3a $2N+1$\u3002\n&emsp;&emsp;\u7f16\u53f7\u4e3a $1\\sim N$ \u8282\u70b9\u7684\u5165\u8fb9\u7528\u4e8e\u63a5\u53d7\u5e72\u51c0\u7684\u9910\u5dfe\uff0c\u5305\u62ec\u4ece\u6162\u6d17\u90e8\u3001\u5feb\u6d17\u90e8\u6d17\u597d\u7684\u9910\u5dfe\uff0c\u548c\u4e4b\u95f4\u4e70\u6765\u7684\u6bdb\u5dfe\uff1a\u5176\u4e2d\u4e00\u90e8\u5206\u5165\u8fb9\u4e3a\u6e90\u70b9\u5411 $1\\sim N$ \u8282\u70b9\u7684\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a $+\\infty$\uff0c\u5355\u4f4d\u8d39\u7528\u4e3a $p$\uff0c\u8fd9\u4e9b\u8fb9\u7528\u4e8e\u4f9b\u7ed9\u5e72\u51c0\u7684\u9910\u5dfe\uff1b\u53e6\u4e00\u90e8\u5206\u4e3a\u4ee3\u8868\u591c\u665a\u8282\u70b9\u7684\u51fa\u8fb9\uff0c\u5c06\u810f\u9910\u5dfe\u9001\u5230\u5feb\u6d17\u90e8\u5c5e\u4e8e\u591c\u665a\u7684\u64cd\u4f5c\uff0c\u4f1a\u8fde\u5411$m$ \u5929\u540e\u7684\u65e9\u6668\uff0c\u8d39\u7528\u4e3a $f$\uff0c\u5c06\u810f\u9910\u5dfe\u9001\u5230\u6162\u6d17\u90e8\u4e5f\u662f\u591c\u665a\u7684\u64cd\u4f5c\uff0c\u8fde\u5411 $n$ \u5929\u540e\u7684\u65e9\u6668\uff0c\u8d39\u7528\u4e3a $s$\u3002\u7f16\u53f7\u4e3a $1\\sim N$ \u8282\u70b9\u7684\u51fa\u8fb9\u90fd\u8fde\u5411\u6c47\u70b9\uff0c\u5bb9\u91cf\u4e3a $r_i$\uff0c\u8d39\u7528\u4e3a $0$\u3002  \n&emsp;&emsp;\u7f16\u53f7\u4e3a $N+1\\sim 2N$ \u7684\u8282\u70b9\u5165\u8fb9\u7528\u4e8e\u63a5\u53d7\u810f\u7684\u9910\u5dfe\uff1a\u4e00\u90e8\u5206\u5165\u8fb9\u7684\u53e6\u4e00\u7aef\u4e3a\u6e90\u70b9\uff0c\u8fd9\u4e9b\u8fb9\u7528\u4e8e\u63d0\u4f9b\u810f\u9910\u5dfe\uff0c\u5bb9\u91cf\u4e3a $r_i$\uff08\u63a5\u53d7\u7684\u4ec5\u4ec5\u662f\u5f53\u5929\u4ea7\u751f\u7684\u810f\u9910\u5dfe\uff09\uff0c\u8d39\u7528\u4e3a $0$\uff1b\u53e6\u4e00\u90e8\u5206\u5165\u8fb9\u7684\u53e6\u4e00\u7aef\u662f\u524d\u51e0\u5929\u7684\u591c\u665a\uff0c\u8fd9\u4e9b\u8fb9\u63d0\u4f9b\u524d\u51e0\u5929\u591c\u665a\u9057\u7559\u4e0b\u7684\u810f\u9910\u5dfe\uff0c\u5bb9\u91cf\u4e3a $+\\infty$\uff0c\u8d39\u7528\u4e3a $0$\u3002\u7f16\u53f7\u4e3a $N+1\\sim 2N$ \u7684\u8282\u70b9\u7684\u51fa\u8fb9\u7528\u4e8e\u5904\u7406\u810f\u6bdb\u5dfe\uff1a\u5c06\u810f\u9910\u5dfe\u9001\u5230\u5feb\u6d17\u90e8\u5c5e\u4e8e\u591c\u665a\u7684\u64cd\u4f5c\uff0c\u4f1a\u8fde\u5411$m$ \u5929\u540e\u7684\u65e9\u6668\uff0c\u8d39\u7528\u4e3a $f$\uff0c\u5c06\u810f\u9910\u5dfe\u9001\u5230\u6162\u6d17\u90e8\u4e5f\u662f\u591c\u665a\u7684\u64cd\u4f5c\uff0c\u8fde\u5411 $n$ \u5929\u540e\u7684\u65e9\u6668\uff0c\u8d39\u7528\u4e3a $s$\u3002\u7f16\u53f7\u4e3a $1\\sim N$ \u8282\u70b9\u7684\u51fa\u8fb9\u90fd\u8fde\u5411\u6c47\u70b9\uff0c\u5bb9\u91cf\u4e3a $r_i$\uff0c\u8d39\u7528\u4e3a $0$\u3002    \n&emsp;&emsp;\u6309\u7167\u4e0a\u8ff0\u65b9\u5f0f\u5efa\u56fe\uff0c\u5176\u6700\u5927\u6d41\u5fc5\u4e3a $\\sum\\limits_{i=1}^N r_i$\uff0c\u4e14\u6c47\u70b9\u7684\u6bcf\u4e00\u6761\u5165\u8fb9\u90fd\u6ee1\u6d41\uff0c\u8fd9\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u5929\u7684\u5e72\u51c0\u6bdb\u5dfe\u80fd\u591f\u6ee1\u8db3\u9700\u6c42\u3002\u7f51\u7edc\u7684\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5373\u4e3a\u7b54\u6848\u3002    \n\n## \u4ee3\u7801  \n```cpp\n/******************************************************************\nCopyright: 11D_Beyonder All Rights Reserved\nAuthor: 11D_Beyonder\nProblem ID: \u6d1b\u8c37 P1251\nDate: 7/29/2020\nDescription: Minimum-cost Flow\n*******************************************************************/\n#include<iostream>\n#include<queue>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\ntypedef long long ll;\nconst ll inf=0x3f3f3f3f3f3f3f3f;\nconst int N=2004<<2;\nconst int M=1000003;\nstruct E\n{\n\tint to;\n\tll cap;\n\tll cost;\n\tint Next=-1;\n}edge[M];\nint head[N],tot;\nbool inqueue[N];\nll incf[N],dis[N];\nint pre[N];\nint days;//\u9910\u5dfe\u4f7f\u7528\u8ba1\u5212\u5929\u6570\nint source;//\u6e90\u70b9\nint sink;//\u6c47\u70b9\nint p;//\u6bcf\u5757\u65b0\u9910\u5dfe\u8d39\u7528\nint m,f;//\u5feb\u6d17 \u65f6\u95f4\u548c\u8d39\u7528\nint n,s;//\u6162\u6d17 \u65f6\u95f4\u548c\u8d39\u7528\nll r[N>>1];\nvoid init();\ninline void add_edge(int u,int v,ll cap,ll cost);\nbool SPFA();\nll MCMF();\nint main()\n{\n\tcin>>days;\n\tint i;\n\tfor(i=1;i<=days;i++) scanf(\"%lld\",r+i);\n\tcin>>p>>m>>f>>n>>s;\n\tinit();\n\tfor(i=1;i<=days;i++)\n\t{\n\t\tadd_edge(i,sink,r[i],0);//\u65e9\u6668\u7684\u70b9\u8fde\u5411\u6c47\u70b9 \u6ee1\u6d41\u65f6\u4ee3\u8868\u8fd9\u5929\u7684\u6bdb\u5dfe\u591f\u7528\n\t\tadd_edge(source,i+days,r[i],0);//\u665a\u4e0a\u83b7\u5f97r[i]\u6761\u810f\u6bdb\u5dfe\n\t\tadd_edge(source,i,inf,p);//\u6e90\u70b9\u6d41\u5411\u65e9\u4e0a\u7684\u70b9 \u53ef\u4f9b\u7ed9\u6bdb\u5dfe\n\t\tif(i+m<=days) add_edge(i+days,i+m,inf,f);//\u5feb\u6d17\n\t\tif(i+n<=days) add_edge(i+days,i+n,inf,s);//\u6162\u6d17\n\t\tif(i+1<=days) add_edge(i+days,i+1+days,inf,0);//\u810f\u6bdb\u5dfe\u5b58\u5230\u4e0b\u4e00\u5929\u665a\u4e0a\n\t}\n\tcout<<MCMF()<<endl;\n\treturn 0;\n}\nvoid init()\n{\n\tsource=0;\n\tsink=2*days+1;\n\ttot=1;\n\tmemset(head,-1,sizeof(head));\n}\ninline void add_edge(int u,int v,ll cap,ll cost)\n{\n\ttot++;\n\tedge[tot].to=v;\n\tedge[tot].cap=cap;\n\tedge[tot].cost=cost;\n\tedge[tot].Next=head[u];\n\thead[u]=tot;\n\ttot++;\n\tedge[tot].to=u;\n\tedge[tot].cap=0;\n\tedge[tot].cost=-cost;\n\tedge[tot].Next=head[v];\n\thead[v]=tot;\n}\nbool SPFA()\n{\n\tqueue<int>q;\n\tmemset(dis,inf,sizeof(dis));\n\tmemset(inqueue,0,sizeof(inqueue));\n\tq.push(source);\n\tdis[source]=0;\n\tinqueue[source]=1;\n\tincf[source]=inf;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tinqueue[x]=0;\n\t\tfor(register int i=head[x];~i;i=edge[i].Next)\n\t\t{\n\t\t\tif(!edge[i].cap) continue;//\u5269\u4f59\u5bb9\u91cf\u4e3a0\uff0c\u4e0d\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u3002\n\t\t\tint y=edge[i].to;\n\t\t\tif(dis[y]>dis[x]+edge[i].cost)\n\t\t\t{\n\t\t\t\tdis[y]=dis[x]+edge[i].cost;//\u677e\u5f1b\u64cd\u4f5c\n\t\t\t\tincf[y]=min(incf[x],edge[i].cap);//\u6700\u5c0f\u5269\u4f59\u5bb9\u91cf\n\t\t\t\tpre[y]=i;//\u8bb0\u5f55\u524d\u9a71\n\t\t\t\tif(!inqueue[y])\n\t\t\t\t{\n\t\t\t\t\tinqueue[y]=1;\n\t\t\t\t\tq.push(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(dis[sink]==inf) return 0;//\u6c47\u70b9\u4e0d\u53ef\u8fbe\uff0c\u5df2\u7ecf\u6c42\u51fa\u6700\u5927\u6d41\n\telse return 1;\n}\nll MCMF()\n{\n\tll maxflow,mincost;\n\tmaxflow=mincost=0;\n\twhile(SPFA())\n\t{\n\t\tint x=sink;\n\t\t//\u6cbf\u7740\u524d\u9a71\u5012\u7740\u8d70\u589e\u5e7f\u8def\n\t\twhile(x!=source)\n\t\t{\n\t\t\tint y=pre[x];\n\t\t\tedge[y].cap-=incf[sink];\n\t\t\tedge[y^1].cap+=incf[sink];\n\t\t\tx=edge[y^1].to;\n\t\t}\n\t\tmaxflow+=incf[sink];\n\t\tmincost+=dis[sink]*incf[sink];\n\t}\n\treturn mincost;\n}\n```",
        "postTime": 1596034762,
        "uid": 253240,
        "name": "11D_Beyonder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u6765\u8bb2\u4e00\u4e2a\u548c\u5176\u4ed6\u9898\u89e3\u4e0d\u4e00\u6837\u7684\u7f51\u7edc\u6d41\u505a\u6cd5\n\n- \u9996\u5148\u6211\u4eec\u8003\u8651\u4e70\u6bdb\u5dfe\n\n\u663e\u7136\u5206\u591a\u6b21\u4e70\u548c\u7b2c\u4e00\u5929\u4e70\u9f50\u662f\u7b49\u4ef7\u7684\n\n- \u62c6\u70b9\n\n\u6211\u4eec\u628a\u4e00\u5929\u62c6\u6210\u4e24\u4e2a\u70b9$i,i+N$\uff0c$i$\u8868\u793a\u5e72\u51c0\u6bdb\u5dfe\uff0c$i+N$\u8868\u793a\u810f\u6bdb\u5dfe\n\n\u73b0\u5728\u5c31\u53ef\u4ee5\u5efa\u56fe\u4e86\n\n1. $S->1,d\\text{(\u5bb9\u91cf)}=+\\infty,c\\text{(\u8d39\u7528)}=p$\n\n\u8868\u793a\u4e70\u6bdb\u5dfe\n\n2. $i->i+1,d=+\\infty,c=0$\n\n\u8868\u793a\u8fd9\u4e00\u5929\u6ca1\u7528\u5b8c\u7684\u6bdb\u5dfe\u7559\u5230\u4e0b\u4e00\u5929\n\n3. $i+N->i+1+N,d=+\\infty,c=0$\n\n\u8868\u793a\u8fd9\u4e00\u5929\u7684\u810f\u6bdb\u5dfe\u7559\u5230\u4e0b\u4e00\u5929\uff08\u867d\u7136\u7559\u5230\u4e4b\u540e\u518d\u6d17\u80af\u5b9a\u662f\u4e0d\u4f18\u7684\uff0c\u4f46\u662f\u6709\u53ef\u80fd\u8fd9\u4e2a\u6bdb\u5dfe\u6700\u540e\u4e0d\u6d17\u4e86\uff09\n\n4. $(N+N)->T,d=+\\infty,c=0$\n\n\u8868\u793a\u6700\u540e\u5269\u4e0b\u7684\u810f\u6bdb\u5dfe\n\n5. $i+N->i+m,d=+\\infty,c=f$\n\n\u8868\u793a\u810f\u6bdb\u5dfe\u9001\u5feb\u6d17\u5e97\uff0c\u82b1\u8d39$f$\uff0c\u5728$m$\u5929\u540e\u83b7\u5f97\u5e72\u51c0\u6bdb\u5dfe\n\n6. $i+N->i+n,d=+\\infty,c=s$\n\n\u8868\u793a\u810f\u6bdb\u5dfe\u9001\u6162\u6d17\u5e97\uff0c\u82b1\u8d39$s$\uff0c\u5728$n$\u5929\u540e\u83b7\u5f97\u5e72\u51c0\u6bdb\u5dfe\n\n\uff08\u6ce8\u610f4\u30015\u30016\u8fde\u8fb9\u7684\u65f6\u5019\u4e0d\u8981\u8d8a\u754c\uff09\n\n\u63a5\u4e0b\u6765\u662f\u6700\u6838\u5fc3\u7684\u8fb9\uff0c\u4e0d\u8fc7\u975e\u5e38\u9b3c\u755c\n\n\u73b0\u5728\u6309\u8bf4\u5e94\u8be5\u5bf9$i,i+N$\u5efa\u8fb9\u4e86\uff0c\u4f46\u663e\u7136\u5982\u679c\u76f4\u63a5$i->i+N,d=r_i,c=0$\u7684\u8bdd\uff0c**\u9001\u6d17**\u7684\u8fb9\u4e0d\u4f1a\u88ab\u7528\u5230\n\n- \u600e\u4e48\u56de\u4e8b\uff1f\n\n\u53ef\u4ee5\u753b\u4e2a\u56fe\u89c2\u5bdf\u4e00\u4e0b\uff0c\u53d1\u73b0**\u6d41**\u662f**\u6bdb\u5dfe**\uff0c\u5c31\u662f\u8bf4\u8fd9\u6837\u53d8\u6210\u4e86\u8ba9\u6bdb\u5dfe\u6700\u591a\uff0c\u90a3\u5c31\u53d8\u6210\u5168\u90fd\u4e70\u6bdb\u5dfe\u4e86\n\n- \u600e\u4e48\u529e\uff1f\n\n$i->i+N,d=r_i,c=-\\infty$\n\n\u770b\u8d77\u6765\u4e0d\u53ef\u7406\u89e3\uff0c\u4f46\u8fd9\u6837\u5904\u7406\u4e4b\u540e\u4e3a\u4e86\u8ba9\u8d39\u7528\u6700\u5c0f\uff0c\u4f1a**\u4f18\u5148**\u5c3d\u53ef\u80fd\u591a\u5f97\u8d70\u8fd9\u79cd\u8fb9\uff0c\u7136\u540e**\u5176\u4ed6\u8d39\u7528\u6700\u5c0f**\n\n\u7136\u540e\u6211\u4eec\u628a\u8d39\u7528\u6d41\u8dd1\u5230\u8fd9\u6b21\u589e\u5e7f\u65f6**\u8d39\u7528\u4e3a\u6b63**\u4e3a\u6b62\uff08\u4e3a\u6b63\u7684\u8fd9\u4e00\u6b21\u4e0d\u8ba1\u5165\uff09\n\n- \u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\n\n\u6211\u4eec\u628a\u8d39\u7528\u6d41\u5361\u5728\u4e86\u6d41\u6ee1\u6240\u6709$i->i+N$\u7684\u8fb9\u4e14\u8d39\u7528\u6700\u5c0f\u7684\u60c5\u51b5\n\n$spfa\\text{\u8d39\u7528\u6d41}$\u662f**\u4f18\u5148\u4fdd\u8bc1\u8d39\u7528\u6700\u5c0f**\uff0c\u7136\u540e\u9010\u6e10\u589e\u5927\u6d41\n\n\u6240\u4ee5\u8fd9\u4e2a\u72b6\u6001\u5c31\u662f\u6d41\u6ee1\u6240\u6709\u4f7f\u7528\u6bdb\u5dfe\u7684\u8fb9\uff08\u4e5f\u5c31\u6240\u6709\u6bdb\u5dfe\u7684\u9700\u6c42\u90fd\u6ee1\u8db3\uff09\u65f6\u6700\u5c0f\u7684\u8d39\u7528\n\n\u5373\u6700\u5c0f\u82b1\u8d39\n\n$ans=cost+inf\\times\\sum_{i=1}^nr_i$\u5373\u53ef\n\n- \u4e0d\u80fd\u7ee7\u7eed\u589e\u5e7f\u4e86\n\n\u7ee7\u7eed\u7684\u8bdd\u53c8\u4f1a\u9677\u5165\u4ee4**\u6bdb\u5dfe\u6700\u591a**\u7684\u60c5\u51b5\u4e2d\uff0c\u7136\u540e\u5c31$GG$\u4e86\n\n## \u603b\u7ed3\n\n\u6240\u4ee5\u8fd9\u4e2a\u9b3c\u755c\u505a\u6cd5\u7684\u5173\u952e\u5c31\u662f\u5229\u7528$spfa\\text{\u8d39\u7528\u6d41}$**\u4f18\u5148\u4fdd\u8bc1\u8d39\u7528\u6700\u5c0f**\u7684\u7279\u6027\uff0c\u540c\u65f6\u7528$-\\infty$\u7684\u8d39\u7528\u5f3a\u5236\u4f18\u5148\u586b\u6ee1**\u4f7f\u7528\u6bdb\u5dfe**\u7684\u8fb9\uff0c\u518d\u627e\u5230\u8d39\u7528\u6700\u5c0f\u7684\u65f6\u523b\uff0c\u7136\u540e\u8fd9\u65f6\u7684\u6d41\u5c31\u662f\u6700\u4f18\u4f7f\u7528\u8ba1\u5212\uff0c\u771f\u5b9e\u8d39\u7528\u6700\u5c0f\n\n- $\\infty=?$\n\n\u9996\u5148$\\infty>>p,f,s$\u4ee5\u4fdd\u8bc1\u4e8c\u8005\u4e92\u4e0d\u5f71\u54cd\uff0c\u5373$\\infty>>10000$\n\n\u7136\u540e\u4e3a\u4e86\u4e0d\u7206$long long$\uff0c$\\infty\\times\\sum_{i=1}^nr_i<=9e18$\uff0c\u7531\u4e8e$\\infty\\times\\sum_{i=1}^nr_i<=\\infty\\times n\\times r_{max}=\\infty\\times 1e10$\uff0c$\\infty\\text{\u53d6}1e8$\u5373\u53ef\n\n\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#define S 0\n#define T 4010\n#define inf 100000000\n#define finf 0x7fffffffffffffff\nusing namespace std;\n\nlong long n,r[2005],i,p,f,s,ft,st,ans;\n\nstruct way\n{\n    long long v,d,c,next;\n};\nway e[300000];\nlong long head[4100],cur[4100],cnt;\nvoid add(long long u,long long v,long long d,long long c)\n{\n    e[cnt].v=v;e[cnt].d=d;e[cnt].c=c;e[cnt].next=head[u];head[u]=cnt++;\n    e[cnt].v=u;e[cnt].d=0;e[cnt].c=-c;e[cnt].next=head[v];head[v]=cnt++;\n}\n\nlong long dist[4100],flow[4100],pre[4100];\nlong long spfa()\n{\n    static long long in[4100],x;\n    static queue<long long> q;\n    memset(dist,63,sizeof(dist));dist[S]=0;q.push(S);flow[S]=finf;\n    while(!q.empty())\n    {\n        x=q.front();q.pop();in[x]=0;\n        for(long long i=head[x];~i;i=e[i].next)\n            if(e[i].d&&dist[x]+e[i].c<dist[e[i].v])\n                dist[e[i].v]=dist[x]+e[i].c,pre[e[i].v]=i,flow[e[i].v]=min(flow[x],e[i].d),in[e[i].v]?0:(q.push(e[i].v),in[e[i].v]=1);\n    }\n    return dist[T]!=dist[4099];\n}\nlong long fee_flow()\n{\n    long long ret=0,x;\n    while(spfa()&&dist[T]<0)\n    {\n        ret+=flow[T]*dist[T];\n        x=T;\n        while(x!=S)\n            e[pre[x]].d-=flow[T],e[pre[x]^1].d+=flow[T],x=e[pre[x]^1].v;\n    }\n    return ret;\n}\n\nchar Getchar()\n{\n    static char buff[1000000],*p,*end=p;\n    if(p==end)\n        end=buff+fread(p=buff,1,1000000,stdin);\n    if(p==end)\n        return -1;\n    return *(p++);\n}\ntemplate<typename TT>void read(TT &x)\n{\n    static char rc;static long long flag;\n    x=0;rc=Getchar();flag=1;\n    while(!isdigit(rc))\n        flag=(rc=='-'?-1:1),rc=Getchar();\n    while(isdigit(rc))\n        x=x*10+rc-'0',rc=Getchar();\n    x*=flag;\n}\n\nint main()\n{\n    memset(head,-1,sizeof(head));\n    read(n);\n    for(i=1;i<=n;i++)\n        read(r[i]),add(i,i+n,r[i],-inf),ans+=r[i]*inf;\n    read(p);read(ft);read(f);read(st);read(s);\n    add(S,1,inf,p);add(n+n,T,inf,0);\n    for(i=1;i<n;i++)\n        add(i,i+1,inf,0),add(i+n,i+n+1,inf,0);\n    for(i=1;i+ft<=n;i++)\n        add(i+n,i+ft,inf,f);\n    for(i=1;i+st<=n;i++)\n        add(i+n,i+st,inf,s);\n    ans+=fee_flow();\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1554024368,
        "uid": 9517,
        "name": "a2956331800",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\n\n\u6bcf\u5929\u9700\u8981$r[i]$\u5757\u9910\u5dfe,\u53ef\u4ee5\u4e70\u9910\u5dfe\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6d17\u597d\u7684\uff0c\u4e0b\u5348\u53ef\u4ee5\u9009\u62e9\u6d17\u4e24\u79cd\u6d17\u8863\n+ \u6d17\u4e00\u5757\u9700 $m$ \u5929,\u5176\u8d39\u7528\u4e3a $f$ \u5206;\u6216\u8005,\u6d17\u4e00\u5757\u9700 $n$ \u5929$(n>m)$,\u5176\u8d39\u7528\u4e3a $s$ \u5206$(s<f)$\u3002\n<!--more-->\n\n\u8003\u8651\u628a\u4e00\u5929\u62c6\u70b9\uff0c\uff08\u53c8\u6bcf\u5929\u5fc5\u987b\u6d17$r[i]$\u5757\u9910\u5dfe\uff0c\u6bcf\u5929\u5fc5\u987b\u9700\u8981$r[i]$\u9910\u5dfe\uff09\n\n$i$\u8868\u793a\u4e0a\u5348,$i+Q$\u8868\u793a\u4e0b\u5348\u3002\n\n+ \u5219$(s,i+n,r[i],0)$,$(i,t,r[i],0)$\u9650\u5236\u4e86\u6bcf\u5929\u7684\u5fc5\u987b\n+ $(i+Q,i+m,INF,f)$\u6216\u8005$(i+Q,i+n,INF,s)$\u8868\u793a\u9009\u62e9\u6d17\u3002\n+ \u7136\u540e\u591a\u7684\u6bdb\u5dfe\u53ef\u4ee5\u7559\u5230\u660e\u5929$(i,i+1,INF,0)$\n+ \u9700\u8981\u4e70\u6bdb\u5dfe\u76f4\u63a5$(s,i,INF,p)$\n\n\n```c++\n\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#include <cmath>\n#include <cstring>\n#include <vector>\n#include <map>\n#include <stack>\nusing namespace std;\ntypedef long long ll;\n#define pii pair<int, int>\n#define mk make_pair\n#define INF 0x3f3f3f3f\nconst int N = 1e6 + 10;\nconst int mod = 1e9 + 7;\nint read()\n{\n    int x = 0, f = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n            f = -1;\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n        x = (x << 1) + (x << 3) + c - '0', c = getchar();\n    return x * f;\n}\nstruct Edge\n{\n    int to, w, nxt, f;\n    Edge() {}\n    Edge(int v, int c, int t, int k) : to(v), w(c), nxt(t), f(k) {}\n};\nconst int EN = 5e3 + 10;\nconst int EM = 5e4 + 10;\nstruct LeiDinic\n{\n\n    Edge e[EM << 1];\n    int head[EN], scnt, dis[EN], vis[EN], cur[EN];\n    ll cost;\n    LeiDinic() { scnt = 1, cost = 0; }\n    void addEdge(int u, int v, int w, int k)\n    {\n        e[++scnt] = Edge(v, w, head[u], k);\n        head[u] = scnt;\n        e[++scnt] = Edge(u, 0, head[v], -k); ///!!!!\n        head[v] = scnt;\n    }\n    bool spfa(int s, int t)\n    {\n        memset(vis, 0, sizeof(vis));\n        memset(dis, INF, sizeof(dis));\n        queue<int> q;\n        dis[s] = 0;\n        vis[s] = 1;\n\n        q.push(s);\n        while (!q.empty())\n        {\n            int x = q.front();\n            q.pop();\n            vis[x] = 0;\n            for (int i = head[x]; i; i = e[i].nxt)\n            {\n                int to = e[i].to;\n\n                if (dis[to] > dis[x] + e[i].f && e[i].w)\n                {\n                    dis[to] = dis[x] + e[i].f;\n                    if (!vis[to])\n                    {\n                        vis[to] = 1;\n                        q.push(to);\n                    }\n                }\n            }\n        }\n        return dis[t] != INF;\n    }\n\n    int dfs(int x, int t, int flow)\n    {\n        if (x == t)\n            return flow;\n        vis[x] = 1;\n        int res = 0;\n        for (int i = cur[x]; i && res < flow; i = e[i].nxt)\n        {\n            cur[x] = i;\n            int to = e[i].to;\n            if (!vis[to] && dis[to] == dis[x] + e[i].f && e[i].w)\n            {\n                int dis = dfs(to, t, min(flow - res, e[i].w));\n                if (dis)\n                {\n                    e[i].w -= dis;\n                    e[i ^ 1].w += dis;\n                    cost += 1ll * e[i].f * dis;\n                    res += dis;\n                }\n            }\n        }\n        vis[x] = 0;\n        return res;\n    }\n    ll Maxflow(int s, int t)\n    {\n        int ans = 0, tmp;\n        while (spfa(s, t))\n        {\n            memcpy(cur, head, sizeof(head));\n            while ((tmp = dfs(s, t, INF)))\n                ans += tmp;\n        }\n        return cost;\n    }\n} dc;\nint a[N];\nint main()\n{\n    int Q = read();\n    for (int i = 1; i <= Q; i++)\n        a[i] = read();\n    int p = read(), m = read(), f = read(), n = read(), sf = read();\n    int s = 2 * Q + 1, t = 2 * Q + 2;\n    for (int i = 1; i <= Q; i++)\n    {\n        dc.addEdge(s, i, INF, p);\n        dc.addEdge(i, t, a[i], 0);\n        dc.addEdge(s, i + Q, a[i], 0);\n        if (i + m <= Q)\n            dc.addEdge(i + Q, i + m, INF, f);\n        if (i + n <= Q)\n            dc.addEdge(i + Q, i + n, INF, sf);\n        if (i + 1 <= Q)\n            dc.addEdge(i, i + 1, INF, 0);\n    }\n    printf(\"%lld\\n\", dc.Maxflow(s, t));\n}\n\n```\n",
        "postTime": 1594256175,
        "uid": 21031,
        "name": "NaCN",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u7f51\u7edc\u6d41\u597d\u9898\u554a\n\n\u5f88\u660e\u663e~~\u6807\u7b7e\u544a\u8bc9\u6211\u4eec~~\u8fd9\u662f\u9053\u8d39\u7528\u6d41\n\n\u9996\u5148\u80af\u5b9a\u8981\u4ece\u6e90\u70b9\u5411\u6bcf\u4e2a\u70b9\u548c\u4ece\u6bcf\u4e2a\u70b9\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u9700\u8981\u9910\u5dfe\u6570\u7684\u8fb9\uff0c\u8d39\u75280\n\n\u6bcf\u5929\u8981\u5904\u7406\u810f\u9910\u5dfe\u548c\u63a5\u53d7\u5e72\u51c0\u9910\u5dfe\u3002\u5f00\u59cb\u65f6\u53ea\u6709\u5e72\u51c0\u9910\u5dfe\u53ef\u7528\uff0c\u7ed3\u675f\u65f6\u53ea\u6709\u810f\u9910\u5dfe\u8981\u5904\u7406\uff0c\u8003\u8651\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u8868\u793a\u6bcf\u5929\u5f00\u59cb\u548c\u7ed3\u675f\u3002\n\n\u5904\u7406\u9910\u5dfe\u67093\u79cd\uff1a\u5feb\u6d17\u548c\u6162\u6d17\u548c\u6ede\u7559\u3002\u8fd9\u4e09\u79cd\u60c5\u51b5\u5206\u522b\u8fde\u5230i+m,i+n,i+1,\u8d39\u7528\u5c31\u662ff,s\u548c0.\u6d41\u91cf\u6ca1\u6709\u9650\u5236\uff0c\u5c31\u662finf\n\n\u4e70\u65b0\u9910\u5dfe\u5462\uff1f\u76f4\u63a5\u4ece\u6e90\u70b9\u4e70\uff0c\u6d41\u91cf\u4ecd\u6ca1\u9650\u5236\uff0cinf\uff0c\u8d39\u7528\u4e3ap\n\n\u7136\u540e\u5c31\u662f\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u677f\u5b50\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <queue>\n\nusing namespace std;\n\n#define ll long long\n\ninline int read() {\n\tint s = 0;\n\tchar ch = getchar();\n\twhile (!isdigit(ch)) ch = getchar();\n\twhile (isdigit(ch)) s = (s << 1) + (s << 3) + (ch & 15), ch = getchar();\n\treturn s;\n}\n\nstruct Edge {\n\tint from, to; ll flow, dis;\n\tinline Edge(int n, int m, ll s, ll l) : from(n), to(m), flow(s), dis(l) {}\n};\n\nint n, m, m1, t1, m2, t2, s, t, en = -1, dep[10005], pre[10005], last[10005];\nll dis[10005], flow[10005], mf, mc;\nvector<Edge> ed;\nvector<int>e[10005];\n\ninline int min_(int a, int b) {\n\treturn a < b ? a : b;\n}\n\ninline void addedge(int from, int to, int v, int d) {\n\ted.push_back(Edge(from, to, v, d));\n\te[from].push_back(++en); \n\ted.push_back(Edge(to, from, 0, -d));\n\te[to].push_back(++en);\n}\n\ninline bool spfa(int s, int t) {\n\tmemset(dis, 0x3f, sizeof(dis)); memset(flow, 0x3f, sizeof(flow)); bool vis[10005];\n\tdeque<int> q; q.push_back(s); memset(vis, 0, sizeof(vis));\n\tdis[s] = 0; pre[t] = -1; vis[s] = 1; while (!q.empty()) {\n\t\tint x = q.front(); q.pop_front(); vis[x] = 0;\n\t\tfor (vector<int> :: iterator it = e[x].begin(); it != e[x].end(); ++it) {\n\t\t\tint v = ed[(*it)].to; \n\t\t\tif (ed[(*it)].flow > 0 && dis[v] > dis[x] + ed[(*it)].dis) {\n\t\t\t\tdis[v] = dis[x] + ed[(*it)].dis;  pre[v] = x; last[v] = (*it);\n\t\t\t\tflow[v] = min_(flow[x], ed[(*it)].flow);\n\t\t\t\tif (!vis[v]) {\n\t\t\t\t\tvis[v] = 1;\n\t\t\t\t\tif (!q.empty() && dis[q.front()] > dis[v]) q.push_front(v);\n\t\t\t\t\telse q.push_back(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} return pre[t] != -1;\n}\n\ninline void MCMF() {\n\twhile (spfa(s, t)) {\n\t\tint now = t; mf += flow[t]; mc += flow[t] * dis[t];\n\t\twhile (now != s) {\n\t\t\ted[last[now]].flow -= flow[t];\n\t\t\ted[last[now] ^ 1].flow += flow[t];\n\t\t\tnow = pre[now];\n\t\t}\n\t}\n}\n\nint main() {\n\tn = read(); s = 0; t = n * 2 + 1;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tint x = read(); addedge(s, i, x, 0); addedge(i + n, t, x, 0);\n\t} m = read(); t1 = read(); m1 = read(); t2 = read(); m2 = read();\n\tfor (int i = 1; i <= n; ++i) {\n\t\tif (i <= n - 1) addedge(i, i + 1, 0x3f3f3f3f, 0);\n\t\tif (i + t1 <= n) addedge(i, i + n + t1, 0x3f3f3f3f, m1);\n\t\tif (i + t2 <= n) addedge(i, i + n + t2, 0x3f3f3f3f, m2);\n\t\taddedge(s, i + n, 0x3f3f3f3f, m);\n\t} MCMF(); printf(\"%lld\", mc);\n\treturn 0;\n}\n```\n",
        "postTime": 1579493357,
        "uid": 98096,
        "name": "Smallbasic",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u9898\u76ee\u94fe\u63a5\uff1ahttps://www.luogu.com.cn/problem/P1251\n\n## \u3010\u9898\u76ee\u63cf\u8ff0\u3011\n\u4e00\u4e2a\u9910\u5385\u5728\u76f8\u7ee7\u7684 N \u5929\u91cc,\u6bcf\u5929\u9700\u7528\u7684\u9910\u5dfe\u6570\u4e0d\u5c3d\u76f8\u540c\u3002\u5047\u8bbe\u7b2c i \u5929\u9700\u8981 r_i\u5757\u9910\u5dfe( i=1,2,...,N)\u3002\u9910\u5385\u53ef\u4ee5\u8d2d\u4e70\u65b0\u7684\u9910\u5dfe,\u6bcf\u5757\u9910\u5dfe\u7684\u8d39\u7528\u4e3a p \u5206;\u6216\u8005\u628a\u65e7\u9910\u5dfe\u9001\u5230\u5feb\u6d17\u90e8,\u6d17\u4e00\u5757\u9700 m \u5929,\u5176\u8d39\u7528\u4e3a f \u5206;\u6216\u8005\u9001\u5230\u6162\u6d17\u90e8,\u6d17\u4e00\u5757\u9700 n \u5929(n>m),\u5176\u8d39\u7528\u4e3a s \u5206(s<f)\u3002\n\n\u6bcf\u5929\u7ed3\u675f\u65f6,\u9910\u5385\u5fc5\u987b\u51b3\u5b9a\u5c06\u591a\u5c11\u5757\u810f\u7684\u9910\u5dfe\u9001\u5230\u5feb\u6d17\u90e8,\u591a\u5c11\u5757\u9910\u5dfe\u9001\u5230\u6162\u6d17\u90e8,\u4ee5\u53ca\u591a\u5c11\u5757\u4fdd\u5b58\u8d77\u6765\u5ef6\u671f\u9001\u6d17\u3002\u4f46\u662f\u6bcf\u5929\u6d17\u597d\u7684\u9910\u5dfe\u548c\u8d2d\u4e70\u7684\u65b0\u9910\u5dfe\u6570\u4e4b\u548c,\u8981\u6ee1\u8db3\u5f53\u5929\u7684\u9700\u6c42\u91cf\u3002\n\n\u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u4e3a\u9910\u5385\u5408\u7406\u5730\u5b89\u6392\u597d N \u5929\u4e2d\u9910\u5dfe\u4f7f\u7528\u8ba1\u5212,\u4f7f\u603b\u7684\u82b1\u8d39\u6700\u5c0f\u3002\u7f16\u7a0b\u627e\u51fa\u4e00\u4e2a\u6700\u4f73\u9910\u5dfe\u4f7f\u7528\u8ba1\u5212\u3002\n\n## \u3010\u8f93\u5165\u683c\u5f0f\u3011\n\u7531\u6807\u51c6\u8f93\u5165\u63d0\u4f9b\u8f93\u5165\u6570\u636e\u3002\u6587\u4ef6\u7b2c 1 \u884c\u6709 1 \u4e2a\u6b63\u6574\u6570 N\uff0c\u4ee3\u8868\u8981\u5b89\u6392\u9910\u5dfe\u4f7f\u7528\u8ba1\u5212\u7684\u5929\u6570\u3002\n\n\u63a5\u4e0b\u6765\u7684 N \u884c\u662f\u9910\u5385\u5728\u76f8\u7ee7\u7684 N \u5929\u91cc,\u6bcf\u5929\u9700\u7528\u7684\u9910\u5dfe\u6570\u3002\n\n\u6700\u540e\u4e00\u884c\u5305\u542b5\u4e2a\u6b63\u6574\u6570p,m,f,n,s\u3002p \u662f\u6bcf\u5757\u65b0\u9910\u5dfe\u7684\u8d39\u7528; m \u662f\u5feb\u6d17\u90e8\u6d17\u4e00\u5757\u9910\u5dfe\u9700\u7528\u5929\u6570; f \u662f\u5feb\u6d17\u90e8\u6d17\u4e00\u5757\u9910\u5dfe\u9700\u8981\u7684\u8d39\u7528; n \u662f\u6162\u6d17\u90e8\u6d17\u4e00\u5757\u9910\u5dfe\u9700\u7528\u5929\u6570; s \u662f\u6162\u6d17\u90e8\u6d17\u4e00\u5757\u9910\u5dfe\u9700\u8981\u7684\u8d39\u7528\u3002\n\n## \u3010\u8f93\u51fa\u683c\u5f0f\u3011\n\u5c06\u9910\u5385\u5728\u76f8\u7ee7\u7684 N \u5929\u91cc\u4f7f\u7528\u9910\u5dfe\u7684\u6700\u5c0f\u603b\u82b1\u8d39\u8f93\u51fa\n\n## \u3010\u89e3\u9898\u601d\u8def\u3011\n### \u96be\u70b9\u5728\u4e8e\u5efa\u56fe\n\u8003\u8651\u5c06\u6bcf\u5929\u5206\u4e3a\u4e24\u90e8\u5206\u2014\u2014\u5f00\u59cb\u548c\u7ed3\u675f\uff0c\u5f00\u59cb\u65f6\u83b7\u5f97\u5e72\u51c0\u7684\u9910\u5dfe\uff08\u901a\u8fc7\u8d2d\u4e70\uff0c\u5feb\u6d17\uff0c\u6162\u6d17\u83b7\u5f97\uff09\uff0c\u7ed3\u675f\u65f6\u83b7\u5f97\u810f\u9910\u5dfe\uff08\u6bcf\u5929\u65e9\u4e0a\u4f7f\u7528\u540e\u7684\u9910\u5dfe\uff0c\u53ef\u7406\u89e3\u4e3a\u7531\u6e90\u70b9\u63d0\u4f9b\uff09\n\n\u7b2c\u4e00\u6b65\uff0c\u5c06\u6e90\u70b9\u4e0e\u6bcf\u5929\u7684\u7ed3\u675f\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u6240\u9700\u9910\u5dfe\u6570\uff08\u8868\u793a\u83b7\u5f97\u7684\u810f\u9910\u5dfe\u6570\uff09\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u5c06\u6bcf\u4e00\u5929\u7684\u5f00\u59cb\u4e0e\u6c47\u70b9\u540c\u6837\u8fde\u4e00\u6761\u8d39\u7528\u4e3a0\uff0c\u5bb9\u91cf\u4e3a\u9910\u5dfe\u6570\u7684\u8fb9\uff08\u8868\u793a\u63d0\u4f9b\u7684\u65b0\u9910\u5dfe\u6570\uff09\n\n\u7b2c\u4e8c\u6b65\uff0c\u5c06\u6e90\u70b9\u4e0e\u6bcf\u4e00\u5929\u7684\u5f00\u59cb\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u65e0\u7a77\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff08\u8868\u793a\u6bcf\u5929\u65e9\u4e0a\u53ef\u4ee5\u4ece\u6e90\u70b9\u8d2d\u4e70\u65b0\u7684\u9910\u5dfe\uff09\n\n\u7b2c\u4e09\u6b65\uff0c\u8003\u8651\u6bcf\u5929\u7684\u810f\u9910\u5dfe\u6d17\u4e0e\u4e0d\u6d17\uff0c\u600e\u4e48\u6d17\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a\n\n1.\u4e0d\u6d17\uff0c\u5c06\u6bcf\u5929\u7684\u7ed3\u675f\u4e0e\u7b2c\u4e8c\u5929\u7684\u7ed3\u675f\u8fde\u4e00\u6761\u8d39\u7528\u4e3a0\uff0c\u5bb9\u91cf\u4e3a\u65e0\u7a77\u7684\u8fb9\uff08\u8868\u793a\u63d0\u4f9b\u7684\u810f\u9910\u5dfe\u6570\u76ee\uff09\n\n2.\u5feb\u6d17\uff0c\u5c06\u6bcf\u5929\u7684\u7ed3\u675f\u5411\u6d17\u597d\u540e\u7684\u5f00\u59cb\u8fde\u4e00\u6761\u5bb9\u91cf\u65e0\u7a77\uff0c\u8d39\u7528\u4e3a\u5feb\u6d17\u8d39\u7528\u7684\u8fb9\n\n3.\u6162\u6d17\uff0c\u5c06\u6bcf\u5929\u7684\u7ed3\u675f\u5411\u6d17\u597d\u540e\u7684\u5f00\u59cb\u8fde\u4e00\u6761\u5bb9\u91cf\u65e0\u7a77\uff0c\u8d39\u7528\u4e3a\u6162\u6d17\u8d39\u7528\u7684\u8fb9\n\n\u5efa\u56fe\u5b8c\u6210\n\n\u5176\u4f59\u5957\u677f\u5b50\u5c31\u6ca1\u95ee\u9898~~\uff08\u6ce8\u610f\u5f00longlong\uff09~~\n\n## \u3010AC\u4ee3\u7801\u3011\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int maxn=100010;\nconst int maxm=300010;\nconst ll INF=0x7fffffff;\nstruct Edge\n{\n    int to;\n    int next;\n    ll w;  //\u8d39\u7528\n    ll f;  //\u5bb9\u91cf\n}edge[maxm];\nint dis[maxn];\nint cur[maxm]; //\u5f53\u524d\u5f27\u4f18\u5316\nint head[maxm];\nbool vis[maxn];\nint n,t,cnt;\ninline void init()  //\u6570\u7ec4\u521d\u59cb\u5316\n{\n    n=t=cnt=0;\n    memset(cur,-1,sizeof(cur));\n    memset(dis,0x3f,sizeof(dis));\n    memset(head,-1,sizeof(head));\n    memset(vis,false,sizeof(vis));\n}\ninline void Insert(int u,int v,ll w,ll f)\n{\n    edge[cnt].to=v;\n    edge[cnt].next=head[u];\n    edge[cnt].w=w;\n    edge[cnt].f=f;\n    head[u]=cnt++;\n}\ninline void insert(int u,int v,ll w,ll f)\n{\n    Insert(u,v,w,f);  //\u6b63\u5411\u8fb9\n    Insert(v,u,-w,0); //\u53cd\u5411\u8fb9\n}\ninline bool spfa()  //\u7f51\u7edc\u6d41\u6807\u51c6\u6700\u77ed\u8def\n{\n    memset(dis,0x3f,sizeof(dis));\n    memset(vis,false,sizeof(vis));\n    queue<int> que;\n    que.push(0);\n    dis[0]=0;\n    vis[0]=true;\n    while(!que.empty())\n    {\n        ll u=que.front();\n        que.pop();\n        vis[u]=false;\n        for(int i=head[u];~i;i=edge[i].next)\n        {\n            int v=edge[i].to;\n            if(edge[i].f&&dis[v]>dis[u]+edge[i].w)\n            {\n                dis[v]=dis[u]+edge[i].w;\n                if(!vis[v])\n                {\n                    que.push(v);\n                    vis[v]=true;\n                }\n            }\n        }\n    }\n    return dis[t]==0x3f3f3f3f;\n}\ninline ll dfs(int u,ll flow,ll& Min)  //\u7f51\u7edc\u6d41\u6807\u51c6\u641c\u7d22\n{\n    if(u==t) return flow;\n    ll res=flow;\n    vis[u]=true;\n    for(int i=cur[u];~i;i=edge[i].next)\n    {\n        cur[u]=edge[i].next;\n        int v=edge[i].to;\n        if(!vis[v]&&edge[i].f&&dis[v]==dis[u]+edge[i].w)\n        {\n            ll temp=dfs(v,min(res,edge[i].f),Min);\n            edge[i].f-=temp;\n            edge[i^1].f+=temp;\n            Min+=temp*edge[i].w;\n            res-=temp;\n            if(res==0) break;\n        }\n    }\n    vis[u]=false;\n    return flow-res;\n}\ninline void solve()\n{\n    init();\n    scanf(\"%d\",&n);\n    t=n<<1|1;  //\u6c47\u70b9\n    for(int i=1;i<=n;++i)\n    {\n        ll x;\n        scanf(\"%lld\",&x);\n        insert(0,i,0,x);  //\u6e90\u70b9\u5411\u6bcf\u5929\u7ed3\u675f\u8fde\u4e0a\u4e00\u6761\u5bb9\u91cf\u4e3a\u6240\u9700\u9910\u5dfe\u7684\u8fb9\uff0c\u8868\u793a\u63d0\u4f9b\u7684\u810f\u9910\u5dfe\u6570\n        insert(i+n,t,0,x);  //\u6bcf\u5929\u5f00\u59cb\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u6240\u9700\u9910\u5dfe\u7684\u8fb9\uff0c\u8868\u793a\u63d0\u4f9b\u7684\u65b0\u9910\u5dfe\u6570\n    }\n    int a,b;\n    ll p,f,s;\n    scanf(\"%lld%d%lld%d%lld\",&p,&a,&f,&b,&s);\n    for(int i=1;i<=n;++i)\n    {\n        insert(0,i+n,p,INF);  //\u4ece\u6e90\u70b9\u8d2d\u4e70\u9910\u5dfe\n        if(i+1<=n) insert(i,i+1,0,INF);  //\u4e0d\u6d17\u9910\u5dfe\n        if(i+a<=n) insert(i,i+n+a,f,INF); //\u5feb\u6d17\u9910\u5dfe\n        if(i+b<=n) insert(i,i+n+b,s,INF); //\u6162\u6d17\u9910\u5dfe\n    }\n    ll flow=0,Min=0;\n    while(!spfa())  //\u8dd1\u7f51\u7edc\u6d41\u6a21\u677f\n    {\n        memset(vis,false,sizeof(vis));\n        for(int i=0;i<cnt;++i) cur[i]=head[i];\n        flow+=dfs(0,INF,Min);\n    }\n    printf(\"%lld\\n\",Min);  //\u6807\u51c6\u8f93\u51fa\n}\nint main()\n{\n    solve();\n    return 0;\n}\n\n```",
        "postTime": 1575558041,
        "uid": 226316,
        "name": "YZL11111",
        "ccfLevel": 0,
        "title": "\u7f51\u7edc\u6d4124\u9898 P1251 \u9910\u5dfe\u8ba1\u5212\u95ee\u9898 \u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "\u5361\u4e86\u6211\u6574\u6574\u4e00\u5929\u7684\u9898\u554a~~~\n\n\u5f53\u6211\u767e\u601d\u4e0d\u5f97\u5176\u89e3\u4e3a\u4ec0\u4e48\u6211\u7684\u6c34\u7ba1\u5b50\u91cc\u603b\u662f\u6ca1\u6c34\uff08\u4e00\u76f4\u8f93\u51fa0\uff09\u7684\u65f6\u5019\uff0c\u6211\u4e00\n\n\u4e0d\u5c0f\u5fc3\u624b\u6b20\u6539\u4e86\u4e00\u4e2a\u5730\u65b9\uff0c\u7136\u540e\u5c31\u51fa\u6837\u4f8b\u4e86\uff0c\u4ea4\u4e0a\u53bb\uff0cA\u4e86\uff01\n\n\u5bf9\u6bd4\u524d\u540e\u4ee3\u7801\uff1a\n\n\u524d\n```cpp\n\treturn dis[T] == inf;\n```\n\u540e\n```cpp\n\treturn dis[T] < inf;\n```\n~~\u6211\u5c31\u662f\u4e2a\u667a\u969c......~~\n\n\u7f51\u7edc\u6d41\uff0c\u4f17\u6240\u5468\u77e5\uff0c\u96be\u5c31\u96be\u5728\u5efa\u6a21\uff0c\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u8fd9\u4e48\u60f3\uff1a\n\n\u65e9\u4e0a\u7528\u8fc7\u7684\u9910\u5dfe\u4f1a\u4e22\u5230\u665a\u4e0a\u53d8\u6210\u810f\u9910\u5dfe\uff0c\u76f8\u5f53\u4e8e\u6bcf\u4e00\u5929\u90fd\u62c6\u6210\u4e86\u4e24\u4e2a\u70b9\uff0c\u4ece\n\n$S$\u5230\u665a\u4e0a\u6709\u4e00\u6761\u6d41\u91cf\u4e3a$ri$\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u4ece\u65e9\u4e0a\u5230$T$\u6709\u4e00\u6761\u6d41\u91cf\u4e3a\n\n$ri$\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u800c\u665a\u4e0a\u5806\u79ef\u7684\u810f\u9910\u5dfe\u663e\u7136\u662f\u8981\u6d17\u6389\u7684\uff0c\u90a3\u5c31\u770b\u770b\u662f\u9001\u5230\n\n\u5feb\u6d17\u8fd8\u662f\u6162\u6d17\u5e97\u4e8e\u662f\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ece\u5f53\u524d\u8fd9\u4e00\u5929\uff0c\u5230\u5feb\u6d17\uff08\u6162\u6d17\uff09\u5e97\u6d17\u5b8c\u7684\n\n\u90a3\u4e00\u5929\u6709\u4e00\u6761\u6d41\u91cf\u4e3a$inf$\u8d39\u7528\u4e3a\u5176\u6240\u9700\u8981\u7684\u8d39\u7528\uff0c\u6bcf\u4e00\u5929\u5230\u7b2c\u4e8c\u5929\u90fd\u53ef\u4ee5\u6e90\n\n\u6e90\u4e0d\u65ad\u7684\u9001\u8fc7\u6765\u6d17\u5b8c\u7684\u810f\u9910\u5dfe\uff0c\u90a3\u5c31\u662f\u6709\u4e00\u6761\u6d41\u91cf\u4e3a$inf$\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\n\n\u800c\u5982\u679c\u662f\u4e70\u65b0\u7684\u9910\u5dfe\u7684\u8bdd\uff0c\u5c31\u662f\u4e00\u6761\u6d41\u91cf\u4e3a$inf$\uff0c\u8d39\u7528\u4e3a\u8d2d\u4e70\u7684\u8d39\u7528\u7684\u8fb9\uff0c\n\n\u4ee5\u4e0a\u5efa\u6a21\u5c31\u5b8c\u6210\u4e86\uff0c\u603b\u7ed3\u4e00\u4e0b\uff1a\n\n\u2460\u4ece\u6e90\u70b9\u60f3\u6bcf\u5929\u665a\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$ri$\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u65e9\u4e0a\u5411\u6c47\u70b9\u8fde\u4e00\u6761\n\n\u540c\u4e0a\u8ff0\u7684\u8fb9\n\n\u2461\u7531\u665a\u4e0a\u5411\u7b2c\u4e8c\u5929\u65e9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$inf$\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\n\n\u2462\u7531\u665a\u4e0a\u5411\u5feb\uff08\u6162\uff09\u6d17\u5e97\u6d17\u5b8c\u7684\u90a3\u4e00\u5929\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$inf$\u8d39\u7528\u4e3a\u5176\u82b1\u8d39\u7684\u8fb9\n\n\u2463\u7531\u6e90\u70b9\u5411\u65e9\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$inf$\uff0c\u8d39\u7528\u4e3a\u8d2d\u4e70\u6240\u9700\u8d39\u7528\u7684\u8fb9\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u8dd1\u4e00\u4e2a\u6700\u5c0f\u8d39\u7528\u6d41\uff0c\u6211\u628a\u4e4b\u524d$Dinic$\u7684\u677f\u5b50\u6539\u4e86\u6539\u5c31\u4ea4\u4e0a\u53bb\u4e86\uff0c\n\ndalao\u52ff\u55b7\uff0c\u4ee5\u4e0b\u662f\u4ee3\u7801\uff1a\n\n## code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\n#include<cstring>\n#define R register\n#define inf 2147483647\n\nusing namespace std;\ntypedef long long LL;\nconst int N = 4e6+5;\nint n, p, m, f, d, s;\nint S, T, last[N], pos[N], cap[N];\nLL dis[N];\nstruct saber {\n\tint nxt, to, dis, cap;\n}rin[N];\nint head[N], cnt = 1;\nbool vis[N];\nqueue<int> q;\n\ninline bool spfa() {\n\tfor(R int i = 0;i <= T;++ i) dis[i] = inf, vis[i] = 0;\n\tcap[S] = inf, dis[S] = 0, q.push(S);\n\twhile(!q.empty()) {\n\t\tR int vi = q.front();\n\t\tq.pop();\n\t\tvis[vi] = false;\n\t\tfor(R int i = head[vi]; i ;i = rin[i].nxt) {\n\t\t\tR int vc = rin[i].to;\n\t\t\tif(dis[vc] > dis[vi] + rin[i].dis && rin[i].cap) {\n\t\t\t\tdis[vc] = dis[vi] + rin[i].dis;\n\t\t\t\tcap[vc] = min(cap[vi], rin[i].cap);\n\t\t\t\tpos[vc] = vi;\n\t\t\t\tlast[vc] = i;\n\t\t\t\tif(!vis[vc]) vis[vc] = true, q.push(vc);\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[T] < inf;\n}\n\ninline LL Dinic() {\n\tLL res = 0;\n\twhile(spfa()) {\n\t\tres += dis[T] * cap[T];\n\t\tfor(R int i = T; i ;i = pos[i]) {\n\t\t\trin[last[i]].cap -= cap[T];\n\t\t\trin[last[i] ^ 1].cap += cap[T];\n\t\t}\n\t}\n\treturn res;\n}\n\ninline void add(int f, int t, int c, int d) {\n\trin[++cnt].to = t, rin[cnt].dis = d, rin[cnt].cap = c, rin[cnt].nxt = head[f], head[f] = cnt;\n\trin[++cnt].to = f, rin[cnt].dis = -d, rin[cnt].cap = 0, rin[cnt].nxt = head[t], head[t] = cnt;\n}\n\nint main() {\n\tscanf(\"%d\",&n);\n\tS = 0, T = 2 * n + 1;\n\tfor(R int i = 1, x;i <= n;++ i) {\n\t\tscanf(\"%d\",&x);\n\t\tadd(S, i, x, 0);\n\t\tadd(i + n, T, x, 0);\n\t}\n\tscanf(\"%d%d%d%d%d\",&p, &m, &f, &d, &s);\n\tfor(R int i = 1;i <= n;++ i) {\n\t\tif(i + 1 <= n) add(i, i + 1, inf, 0);\n\t\tif(i + m <= n) add(i, i + m + n, inf, f);\n\t\tif(i + d <= n) add(i, i + d + n, inf, s);\n\t\tadd(S, i + n, inf, p);\n\t}\n\tprintf(\"%lld\",Dinic());\n\treturn 0;\n}\n```\n",
        "postTime": 1569627342,
        "uid": 160654,
        "name": "\u707c\u773c\u7684\u590f\u5a1c",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u628a\u9898\u89e3\u770b\u4e86\u4e00\u904d...\u5927\u5bb6\u7684\u8d39\u7528\u6d41\u90fd\u662f\u62c6\u6210\u4e24\u4e2a\u70b9\u7684\uff0c\u90a3\u4e48\u6211\u5c31\u6765\u63d0\u4f9b\u4e00\u79cd\u65b0(S)\u9896(B)\u800c\u72ec(N)\u7279(C)\u7684\u601d\u8def\uff1a\n## \u62c6\u62105\u4e2a\u70b9\uff01\n\n\u9996\u5148\u60f3\u5230\uff0c\u5e94\u8be5\u7528\u6d41\u91cf\u6765\u4ee3\u8868\u6bcf\u5929\u7684\u9910\u5dfe\uff0c\u8fd9\u6837\u4fdd\u8bc1\u6700\u5927\u6d41\u5c31\u662f\u4fdd\u8bc1\u6bcf\u5929\u6709\u9910\u5dfe\u3002\n\n\u7136\u540e\u5148\u6765\u4e2a\u6700\u7b80\u5355\u7684\u6a21\u578b\u5427\u3002\u76f4\u63a5\u6392\u6210\u4e00\u6392\uff0c\u4ece\u6e90\u70b9\u4e70\uff0c\u6e90\u70b9\u5411\u6bcf\u5929\u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a\u8d2d\u4e70\u7684\u94b1\uff0c\u4e0d\u9650\u6d41\u3002\u6bcf\u5929\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u9650\u6d41\u8868\u793a\u6bcf\u5929\u7528\u7684\u9910\u5dfe\u6570\u3002\u6d17\u5c31\u662fn\u00b2\u679a\u4e3e\u540e\u9762\u7684\u5929\u6570\uff0c\u4e0e\u5f53\u524d\u70b9\u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a\u6d17\u7684\u8d39\u7528\u3002\n\n\u7136\u540e\u53d1\u73b0\u4e0d\u884c\uff1a\u4f60\u6d17\u7684\u8bdd\uff0c\u4e00\u6761\u9910\u5dfe\u5c31\u7528\u4e86\u4e24\u6b21\uff0c\u8fd9\u6837\u603b\u6d41\u91cf(\u4e70\u7684\u603b\u9910\u5dfe\u6570)\u5c31\u6bd4\u6bcf\u5929\u9910\u5dfe\u6570\u4e4b\u548c\u5c11\u4e86\u3002\u6240\u4ee5\u9700\u8981\u989d\u5916\u7684\u6d41\u91cf\u6765\u5904\u7406\u8fd9\u4e2a\u4e00\u5dfe\u591a\u7528\u7684\u95ee\u9898\u3002\n\n\u6211\u6709\u4e2a\u5f88\u6734\u7d20\u7684\u60f3\u6cd5\uff1a\u518d\u5f00\u4e00\u6761\u6d41\u91cf\uff0c\u5728\u8fde\u8fb9\u7684\u65f6\u5019\u8d39\u7528\u53d6\u8d1f\uff0c\u628a\u4e70\u7684\u8d39\u7528\u51cf\u53bb\u3002\n\n\u7136\u540e\u53d1\u73b0\u53c8\u6302\u4e86\uff1a\u4f60\u53ef\u80fd\u6d17\u591a\u6b21\u554a\uff01\u6bcf\u6b21\u6d17\u90fd\u51cf\uff0c\u90a3\u8fd8\u4e86\u5f97\uff1f\n\n\u8fd9\u542f\u793a\u6211\u4eec\u7b2c\u4e8c\u6b21\u6d17\u7684\u65f6\u5019\u4e0d\u6d88\u9664\u4e70\u7684\u94b1\u3002\n\n\u8fd9\u5c31\u8981\u628a\u65b0\u4e70\u6765\u7684\u548c\u4e4b\u524d\u6d17\u8fc7\u7684\u5206\u5f00\u5904\u7406\u3002\n\n\u7136\u540e\u6211\u8003\u8651\u4e86\u4e00\u4f1a\u4e09\u4e2a\u70b9\uff0c\u53d1\u73b0\u4e0d\u884c\uff0c\u5c31\u5efa\u4e864\u4e2a\u70b9\uff0c\u8fdb\u6765\u4e24\u4e2a\uff0c\u51fa\u53bb\u4e24\u4e2a\u3002\n\n\u8fd8\u6709\u4e2a\u5c0f\u95ee\u9898\uff0c\u4f60\u6d17\u7684\u6570\u91cf\u4e0d\u53ef\u80fd\u8d85\u8fc7\u4f60\u4e70\u7684\u6570\u91cf\u5427...\u56e0\u4e3a\u6211\u4ece\u6e90\u70b9\u90a3\u91cc\u4e70\u7684\u65f6\u5019\u6d41\u91cf\u4e3aINF\uff0c\u6240\u4ee5\u5c31\u8981\u5728\u6d17\u7684\u65f6\u5019\u9650\u6d41\u3002\u7136\u540e\u53c8\u591a\u51fa\u6765\u4e00\u4e2a\u70b9...\n\n\u5230\u6700\u540e\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e865\u4e2a\u70b9...\u867d\u7136\u6b63\u786e\u6027\u6ca1\u95ee\u9898\u4e86\u4f46\u662f...\n\n\u4f60\u89c1\u8fc71w\u4e2a\u70b9\uff0cn\u00b2\u6761\u8fb9\u7684\u8d39\u7528\u6d41\u5417...\n\n\u5927\u6982\u957f\u8fd9\u6837...\n\n![\u6309\u4f4f\u6b64\u5904\u62d6\u52a8\u5230\u65b0\u6807\u7b7e\u9875\u4e2d\uff0c\u663e\u793a\u56fe\u7247](https://img2018.cnblogs.com/blog/1332167/201812/1332167-20181206165058561-524199611.png)\n\n\u770b\u8d77\u6765\u6bd4\u8f83\u6050\u6016......\u5b9e\u6d4bTLE\uff0c60\u5206\u3002\n\n\u7136\u540e\u6211\u4f18\u5316\u8fde\u8fb9\u4e00\u6ce2\uff0c\u628an\u00b2\u8fde\u8fb9\u6539\u6210\u6bcf\u4e2a5\u53f7\u70b9\u4e4b\u95f4\u8fde\u6d41\u91cfINF\uff0c\u8d39\u7528\u4e3a0\u7684\u94fe\uff0c\u5c31A\u4e86!!??\n\n(\u867d\u7136\u901f\u5ea6\u662f\u6b63\u89e3\u7684\u4e24\u500d...)\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n\ntypedef long long LL;\nconst int N = 20014, M = 2500010;\nconst LL INF = 0x3f3f3f3f3f3f3f3fll;\n\nstruct Edge {\n    int nex, v;\n    LL len, c;\n}edge[M << 1]; int top = 1;\n\nint e[N], pre[N], vis[N], Time;\nLL d[N], flow[N], use[N];\nstd::queue<int> Q;\n\ninline void add(int x, int y, LL z, LL w) {\n    top++;\n    edge[top].v = y;\n    edge[top].c = z;\n    edge[top].len = w;\n    edge[top].nex = e[x];\n    e[x] = top;\n\n    top++;\n    edge[top].v = x;\n    edge[top].c = 0;\n    edge[top].len = -w;\n    edge[top].nex = e[y];\n    e[y] = top;\n    return;\n}\n\ninline bool SPFA(int s, int t) {\n    memset(d, 0x3f, sizeof(d));\n    //printf(\"%lld \\n%lld \\n\\n\", d[t], INF);\n    d[s] = 0;\n    vis[s] = Time;\n    flow[s] = INF;\n    Q.push(s);\n    while(!Q.empty()) {\n        int x = Q.front();\n        Q.pop();\n        vis[x] = 0;\n        //printf(\"d[%d] = %lld \\n\", x, d[x]);\n        for(int i = e[x]; i; i = edge[i].nex) {\n            int y = edge[i].v;\n            if(edge[i].c && d[y] > d[x] + edge[i].len) {\n                d[y] = d[x] + edge[i].len;\n                flow[y] = std::min(flow[x], edge[i].c);\n                pre[y] = i;\n                if(vis[y] != Time) {\n                    vis[y] = Time;\n                    Q.push(y);\n                }\n            }\n        }\n    }\n    //printf(\"d < INF d = %lld %d \\n\", d[t], d[t] < INF);\n    return d[t] < INF;\n}\n\ninline void update(int s, int t) {\n    LL f = flow[t];\n    //printf(\"update : f = %lld \\n\", f);\n    while(s != t) {\n        //printf(\"t = %d \\n\", t);\n        int i = pre[t];\n        edge[i].c -= f;\n        edge[i ^ 1].c += f;\n        t = edge[i ^ 1].v;\n    }\n    return;\n}\n\ninline LL solve(int s, int t, LL &cost) {\n    LL ans = 0;\n    cost = 0;\n    memset(vis, 0, sizeof(vis));\n    Time = 1;\n    while(SPFA(s, t)) {\n        ans += flow[t];\n        cost += flow[t] * d[t];\n        //printf(\"f = %lld  d = %lld \\n\", flow[t], d[t]);\n        //printf(\"cost = %lld \\n\", cost);\n        update(s, t);\n        Time++;\n    }\n    return ans;\n}\n\nint n;\ninline int id(int i, int k) {\n    return (k - 1) * n + i;\n}\n\nint main() {\n    int quick, slow;\n    LL sc, buy, qc;\n    scanf(\"%d\", &n);\n    int s = n * 5 + 1, t = n * 5 + 2;\n    for(int i = 1; i <= n; i++) {\n        scanf(\"%lld\", &use[i]);\n    }\n    scanf(\"%lld%d%lld%d%lld\", &buy, &quick, &qc, &slow, &sc);\n\n    for(int i = 1; i <= n; i++) {\n        add(s, i, INF, buy);\n        add(id(i, 3), t, use[i], 0);\n        add(i, id(i, 3), use[i], 0);\n        add(id(i, 2), id(i, 3), use[i], 0);\n        add(i, id(i, 4), use[i], -buy);\n        add(id(i, 2), id(i, 4), use[i], 0);\n        add(id(i, 4), id(i, 5), use[i], 0);\n        /*for(int j = i + quick; j <= n; j++) {\n            add(id(i, 5), id(j, 2), INF, qc);\n        }\n        for(int j = i + slow; j <= n; j++) {\n            add(id(i, 5), id(j, 2), INF, sc);\n        }*/\n        if(i + quick <= n) {\n            add(id(i, 5), id(i + quick, 2), INF, qc);\n        }\n        if(i + slow <= n) {\n            add(id(i, 5), id(i + slow, 2), INF, sc);\n        }\n        if(i < n) {\n            add(id(i, 5), id(i + 1, 5), INF, 0);\n        }\n    }\n\n    LL cost;\n    solve(s, t, cost);\n    printf(\"%lld\", cost);\n    return 0;\n}\n```",
        "postTime": 1544090217,
        "uid": 55600,
        "name": "huyufeifei",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u597d\u9898\u554a\uff01\n\n\u65e2\u53ef\u4ee5\u7528\u4e0a\u4e0b\u754c\u8d39\u7528\u6d41\u78be\u8fc7\u53bb\uff0c\u8bad\u7ec3\u5bf9\u8fd9\u4e2a\u7b97\u6cd5\u7684\u9002\u5e94\u80fd\u529b\uff0c\u4e5f\u53ef\u4ee5\u7528\u7279\u6b8a\u601d\u60f3\uff08\u62c6\u70b9\uff09\u8f6c\u5316\u4e3a\u666e\u901a\u8d39\u7528\u6d41\u505a\uff0c\u572824\u9898\u91cc\u9762\u4e5f\u7b97\u662f\u4f18\u79c0\u7684\u4e86\uff01\n\n\n### \u5efa\u8bae\u70b9\u8fdb\u9898\u89e3\u91cc\u7684\u4f60\u5148\u81ea\u5df1\u601d\u8003\u4e00\u756a\uff0c\u505a\u51fa\u4e00\u4e9b\u5c1d\u8bd5\uff0c\u5b9e\u5728\u60f3\u4e0d\u51fa\u6765\u518d\u770b\u9898\u89e3\u3002\u4e0d\u8981\u6d6a\u8d39\u4e86\u8fd9\u9053\u597d\u9898\uff01\n\n\n[\u5b89\u5229\u4e00\u6ce2\u535a\u5ba2](http://www.cnblogs.com/dedicatus545/p/8387692.html)\n\n\n## \u601d\u8def\n\n\n\u8fd9\u9053\u9898\u4e4d\u4e00\u770b\uff0c\u53ef\u4ee5\u8dd1\u4e0a\u4e0b\u754c\u8d39\u7528\u6d41\n\n\n\u4ee3\u7801\u91cf\u3001\u96be\u5ea6 -> inf\n\n\n\u5176\u5b9e\u4e0d\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8d39\u7528\u6d41\u7684\u7279\u6b8a\u5904\u7406\u53bb\u6389\u4e0b\u754c\n\n\n\u89c2\u5bdf\u9898\u76ee\uff0c\u6bcf\u5929\u8981\u6c42\u6709ri\u5757\u9910\u5dfe\n\n\n\u9996\u5148\uff0c\u6709\u8d2a\u5fc3\u5982\u4e0b\uff1a\n\n\n\u5f53\u4e14\u4ec5\u5f53\u6bcf\u5929\u53ef\u4f9b\u4f7f\u7528\u7684\u9910\u5dfe\u6b63\u597d\u6ee1\u8db3\u9700\u6c42\u65f6\uff0c\u53ef\u4ee5\u6709\u6700\u5c0f\u8d39\u7528\n\n\n\u8bc1\u660e\uff1a\u82e5\u67d0\u4e00\u5929\u6709\u591a\u4e00\u5757\u9910\u5dfe\uff0c\u5219\u5176\u6839\u672c\u6765\u6e90\u4e00\u5b9a\u662f\u4e70\u591a\u4e86\uff0c\u800c\u4e14\u5728\u8fd9\u5757\u9910\u5dfe\u53c2\u4e0e\u7684\u5468\u8f6c\u4e2d\u8fd8\u6d88\u8d39\u4e86\u4e00\u4e9b\u6e05\u6d17\u8d39\u7528\uff0c\u540c\u65f6\u5b83\u9020\u6210\u5176\u4f59\u7684\u65e5\u5b50\u91cc\u4e5f\u4f1a\u6709\u9910\u5dfe\u88ab\u95f2\u7f6e\n\n\n\u56e0\u6b64\u9996\u5148\u628a\u9898\u76ee\u8f6c\u5316\u4e3a\u201c\u6bcf\u5929\u6b63\u597d\u4f7f\u7528ri\u201d\n\n\n\u6b64\u65f6\u8003\u8651\u62c6\u70b9\uff0c\u5c06\u6bcf\u4e00\u5929\u62c6\u6210xi,yi\uff0c\u5176\u4e2dyi\u8fde\u8fb9\u5230T\uff0c\u5bb9\u91cf\u4e3ari\uff0c\u8d39\u7528\u4e3a0\uff0c\u8868\u793a\u8be5\u5929\u9700\u8981\u8fd9\u4e48\u591a\u9910\u5dfe\u3002\uff08\u4ee5\u4e0b\u8fd9\u7c7b\u8fb9\u8868\u793a\u4e3a (cap,cost) \uff09\n\n\n\n## \u5efa\u56fe\n\n\n\u5efa\u56fe\u7684\u6838\u5fc3\u662f\u4fdd\u8bc1yi\u5230T\u7684\u8fb9\u53ef\u4ee5\u6ee1\u6d41\u7684\u60c5\u51b5\u4e0b\uff0c\u6784\u5efa\u8d39\u7528\u7b49\u540c\u4e8e\u9898\u76ee\u8981\u6c42\u7684\u7f51\u7edc\u3002\n\n\n\u9996\u5148\u5b9a\u4e49xi\u4e3a\u201c\u7b2ci\u5929\u5bf9\u4e8e\u7528\u5b8c\u7684\u9910\u5dfe\u505a\u51fa\u7684\u51b3\u7b56\u201d\uff0c\u56e0\u6b64\u53ef\u4ee5\u4ecexi\u5230xi+1\u8fde\u4e00\u6761\u8fb9 (inf,0)\uff0c\u5176\u8fb9\u4e0a\u7684\u6d41\u91cf\u8868\u793a\u201c\u7b2ci+1\u5929\u4fdd\u7559\u7b2ci\u5929\u4e2d\uff08\u6d41\u91cf\uff09\u5757\u9910\u5dfe\u7684\u51b3\u7b56\u201d\n\n\n\u7136\u540e\u4eceS\u5230xi\u8fde\u8fb9 (ri,0) \uff0c\u4ee3\u8868\u8be5\u5929\u9700\u8981\u505a\u51fa\u8fd9\u4e00\u51b3\u7b56\u7684\u9910\u5dfe\u6570\u91cf\uff0c\u4e5f\u5c31\u662f\u8be5\u5929\u4f7f\u7528\u4e86\u7684\u9910\u5dfe\u6570\u91cf\n\n\n\u4eceS\u5230yi\u8fde\u8fb9(inf,p)\u4ee3\u8868\u65b0\u4e70\u4e00\u5757\u3002\u8fd9\u5757\u9910\u5dfe\u4e0d\u9700\u8981\u53c2\u4e0exi\u7684\u201c\u65e7\u9910\u5dfe\u51b3\u7b56\u201d\uff0c\u76f4\u63a5\u8fde\u5230yi\n\n\n\u4ecexi\u5230yi+m\u3001yi+n\u5206\u522b\u8fde\u8fb9 (inf,f) (inf,s) \uff0c\u4ee3\u8868\u5feb\u6d17\u548c\u6162\u6d17\u51b3\u7b56\u3002\n\n\n\u7136\u540e\u5728\u8fd9\u5f20\u56fe\u4e0a\u8dd1S-T\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\n\n\n## \u5c0f\u7ed3\n\n\n\u672c\u9898\u901a\u8fc7\u6bcf\u4e00\u5929\u7684\u62c6\u70b9\uff0c\u5c06\u4e0a\u4e0b\u754c\u4e2d\u7684\u4e0b\u754c\uff0c\u8f6c\u5316\u4e3a\u4e86\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u95f4\u63a5\u8054\u7cfb\u6765\u505a\u3002\u5176\u5b9e\u5f88\u591a\u4e0a\u4e0b\u754c\u8d39\u7528\u6d41\u7684\u9898\u76ee\u90fd\u53ef\u4ee5\u8fd0\u7528\u8fd9\u6837\u7684\u601d\u60f3\u3002\n\n\nCode\uff1a\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#define inf 100000000000000LL\n#define ll long long\nusing namespace std;\ninline ll read(){\n    ll re=0,flag=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){\n        if(ch=='-') flag=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9') re=(re<<1)+(re<<3)+ch-'0',ch=getchar();\n    return re;\n}\nll n,m,cnt,ans,flow,first[100010];\nll dis[100010],pre[100010],path[100010];\nstruct edge{\n    ll to,next,w,cap;\n}a[100010];\ninline void add(ll u,ll v,ll w,ll cap){\n    a[++cnt]=(edge){v,first[u],w,cap};first[u]=cnt;\n    a[++cnt]=(edge){u,first[v],-w,0};first[v]=cnt;\n}\nvoid init(){\n    memset(first,-1,sizeof(first));\n    memset(a,0,sizeof(a));cnt=-1;ans=0;flow=0;\n}\nll spfa(ll s,ll t){\n    ll q[10010],head=0,tail=1,maxn=10000,i,u,v,w;\n    memset(pre,-1,sizeof(pre));\n    for(i=s;i<=t;i++) dis[i]=inf;\n    q[0]=s;dis[s]=0;\n    while(head!=tail){\n        u=q[head];head=(head+1)%maxn;\n        for(i=first[u];~i;i=a[i].next){\n            v=a[i].to;w=a[i].w;\n            if(a[i].cap&&dis[v]>dis[u]+w){\n                dis[v]=dis[u]+w;\n                pre[v]=u;path[v]=i;\n                q[tail]=v;tail=(tail+1)%maxn;\n            }\n        }\n    }\n    return ~pre[t];\n}\ninline ll _min(ll l,ll r){return (l<r)?l:r;}\nll mcmf(ll s,ll t){\n    ll f,u;\n    while(spfa(s,t)){\n        f=inf;\n        for(u=t;u!=s;u=pre[u]) f=_min(f,a[path[u]].cap);\n        flow+=f;ans+=dis[t]*f;\n        for(u=t;u!=s;u=pre[u]){\n            a[path[u]].cap-=f;\n            a[path[u]^1].cap+=f;\n        }\n    }\n}\nint main(){\n//    freopen(\"napkin.in\",\"r\",stdin);\n//    freopen(\"napkin.out\",\"w\",stdout);\n    init();\n    ll i,t1,t2;\n    n=read();\n    for(i=1;i<=n;i++){\n        t1=read();\n        add(0,i,0,t1);\n        add(i+n,(n<<1)+1,0,t1);\u3001\n        //S -> xi , yi -> T\n    }\n    for(i=1;i<n;i++) add(i,i+1,0,inf);\n    // xi -> xi+1\n    t1=read();\n    for(i=1;i<=n;i++) add(0,i+n,t1,inf);\n    // S -> yi\uff0c\u8d2d\u4e70\n    t1=read();t2=read();\n    for(i=1;i<=n-t1;i++) add(i,i+t1+n,t2,inf);\n    //\u5feb\u6d17\n    t1=read();t2=read();\n    for(i=1;i<=n-t1;i++) add(i,i+t1+n,t2,inf);\n    //\u6162\u6d17\n    mcmf(0,(n<<1)+1);\n    printf(\"%lld\",ans);\n}\n```",
        "postTime": 1517384428,
        "uid": 27753,
        "name": "Orion545",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u4e0d\u5c11\u5927\u4f6c\u5199\u4e86zkw\u8d39\u7528\u6d41\uff0c\u4f46\u7531\u4e8e\u6211\u592a\u83dc\u4e86\uff0c\u4e0d\u7ba1\u662f\u5efa\u56fe\u8fd8\u662f\u677f\u5b50\u90fd\u770b\u5f97\u6211\u4e00\u8138\u8499\uff0c\u6240\u4ee5\u6211\u6765\u8bf4\u4e00\u4e0b\u6211\u7684\u505a\u6cd5\n\n\u9996\u5148\u628a\u6bcf\u4e00\u5929\u62c6\u6210\u65e9\u665a\u4e24\u4e2a\u70b9\uff0c\u7136\u540e\u6839\u636e\u9898\u610f\u5f80\u8d85\u7ea7\u539f\u70b9\u548c\u6c47\u70b9\u8fde\u8fb9\u5c31\u884c\u4e86\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u6211\u4ee3\u7801\uff0c\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff0c\u4e5f\u7528\u7684zkw\u8d39\u7528\u6d41\n\n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\n#define int int64_t\n//int64_t\u957f\u5f97\u6bd4long long\u597d\u770b\nusing namespace std;\n\nconst int MAXN = 2e3 + 5;\nconst int INF = 0x3f3f3f3f;\n\nint n;\n\nstruct Edge{\n    int to, val, cost;\n    Edge *next, *ops;\n    Edge(int to, int val, int cost, Edge *next): to(to), val(val), cost(cost), next(next){}\n};\n\nEdge *head[MAXN << 1];\n\nvoid AddEdge(int u, int v, int w, int c) {\n    head[u] = new Edge(v, w, c, head[u]);\n    head[v] = new Edge(u, 0, -c, head[v]);\n    head[u]->ops = head[v]; head[v]->ops = head[u];\n}\n\nnamespace zkw{\n    int s, t, ans, res;\n    int dis[MAXN << 1];\n    bool vis[MAXN << 1];\n    bool Spfa() {\n        memset(vis, false, sizeof vis);\n        memset(dis, 0x3f, sizeof dis);\n        deque<int> q;\n        q.push_back(s);\n        vis[s] = true; dis[s] = 0;\n        while (!q.empty()) {\n            int u = q.front(); q.pop_front(); vis[u] = false;\n            for (Edge *e = head[u]; e; e = e->next) {\n                int v = e->to;\n                if (e->val > 0 && dis[u] + e->cost < dis[v]) {\n                    dis[v] = dis[u] + e->cost;\n                    if (!vis[v]) {\n                        vis[v] = true;\n                        if (!q.empty() && dis[v] < dis[q.front()]) q.push_front(v);\n                        else q.push_back(v);\n                    }\n                }\n            }\n        }\n        return dis[t] < INF;\n    }\n    \n    int Dfs(int u, int flow) {\n        if (u == t) {\n            vis[u] = true;\n            res += flow;\n            return flow;\n        }\n        int used = 0; vis[u] = true;\n        for (Edge *e = head[u]; e; e = e->next) {//\u5f53\u524d\u5f27\u5c31\u4e0d\u52a0\u4e86\n            int v = e->to;\n            if ((!vis[v] || v == t) && e->val && dis[u] + e->cost == dis[v]) {\n                int mi = Dfs(v, min(e->val, flow - used));\n                if (mi) {\n                    e->val -= mi;\n                    e->ops->val += mi;\n                    ans += e->cost * mi;\n                    used += mi;\n                }\n                if (used == flow) break;\n            }\n        }\n        return used;\n    }\n    \n    void Work() {\n        res = 0; ans = 0;\n        while (Spfa()) {\n            vis[t] = true;\n            while (vis[t]) {\n                memset(vis, false, sizeof vis);\n                Dfs(s, INF);\n            }\n        }\n    }\n}\n\nsigned main() {\n    cin >> n;\n    zkw :: s = 0; zkw :: t = n * 2 + 1;\n    for (int i = 1; i <= n; i++) {\n        int x;\n        cin >> x;\n        AddEdge(0, i, x, 0);//\u6bcf\u5929\u83b7\u5f97x\u4e2a\u810f\u7684\n        AddEdge(n + i, n * 2 + 1, x, 0);//\u6bcf\u5929\u751f\u6210x\u4e2a\u5e72\u51c0\u7684\n    }\n    int m, t1, m1, t2, m2;\n    cin >> m >> t1 >> m1 >> t2 >> m2;\n    for (int i = 1; i <= n; i++) {\n        if (i + 1 <= n) AddEdge(i, i + 1, INF, 0);//\u53ef\u4ee5\u628a\u810f\u7684\u62d6\u5230\u7b2c\u4e8c\u5929\u6d17\n        if (i + t1 <= n) AddEdge(i, i + n + t1, INF, m1);//\u5feb\u6d17\n        if (i + t2 <= n) AddEdge(i, i + n + t2, INF, m2);//\u6162\u6d17\n        AddEdge(0, i + n, INF, m);//\u4e70\u65b0\u7684\n    }\n    zkw :: Work();\n    cout << zkw :: ans << endl;\n    return 0;\n}\n```",
        "postTime": 1552113178,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u786e\u5b9e\u6709\u70b9\u96be\u5ea6\uff0c\u5982\u679c\u4e0d\u662f\u7f51\u7edc\u6d4124\u6050\u6015\u5f88\u5c11\u4eba\u4f1a\u60f3\u5230\u7f51\u7edc\u6d41  \n1.\u8fd9\u9898\u6ca1\u6709\u5173\u4e8e\u9650\u5236\u6d41\u91cf\u7684\u6761\u4ef6  \n2.\u8fd9\u9898\u6ca1\u6709\u5173\u4e8e\u4e24\u79cd\u72b6\u6001\u4e4b\u95f4\u8054\u901a\u4e0d\u8fde\u901a\u7684\u8981\u6c42\uff08\u5373\u5272  \n3.\u8fd9\u9898\u6ca1\u6709\u5173\u4e8e\u4e0d\u76f8\u4ea4\u7684\u5339\u914d\u7684\u95ee\u9898  \n\u4f46\u8fd9\u9898\u6bd5\u7adf\u662f\u7f51\u7edc\u6d4124\uff0c\u8fd8\u662f\u8981\u7528\u7f51\u7edc\u6d41\u505a\uff08\u624b\u52a8\u6ed1\u7a3d\n\n\n---------------\n\n\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u5c06\u6700\u5927\u6d41\u91cf\u4f5c\u4e3a\u7b54\u6848\uff0c\u800c\u662f\u5c06\u6700\u5927\u6d41\u91cf\u4f5c\u4e3a\u524d\u63d0\uff0c\u5f88\u660e\u663e\uff0c\u5c06\u6700\u5927\u6d41\u4f5c\u4e3a\u524d\u63d0\u7684\u5c31\u662f\u8d39\u7528\u6d41\u7684\u6a21\u578b  \n\u5c06\u95ee\u9898\u62bd\u8c61\u4e00\u4e0b\uff0c\u5c31\u662f\u6bcf\u5929\u9700\u8981$r_i$\u5f20\u5e72\u51c0\u9910\u5dfe\uff0c\u540c\u65f6\u6bcf\u5929\u4f1a\u4ea7\u751f$r_i$\u5f20\u810f\u7eb8\u5dfe\uff0c\u53ef\u4ee5\u76f4\u63a5\u8d2d\u4e70\u5e72\u51c0\u7eb8\u5dfe\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6e05\u6d17\u5c06\u810f\u7eb8\u5dfe\u8f6c\u5316\u4e3a\u5e72\u51c0\u7eb8\u5dfe  \n\u4e8e\u662f\u6211\u4eec\u5c06\u6bcf\u4e00\u5929\u62c6\u6210\u4e24\u4e2a\u8282\u70b9  \n\n\n\n**\u4ece\u539f\u70b9\u5411\u5176\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\u8fde\u5bb9\u91cf$r_i$\uff0c\u8d39\u75280\u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u5929\u4ea7\u751f$r_i$\u5f20\u810f\u9910\u5dfe\uff0c\u4e0b\u6587\u7b80\u79f0\u5165\u70b9**  \n**\u53e6\u4e00\u4e2a\u8282\u70b9\u5411\u6c47\u70b9\u8fde\u5bb9\u91cf$r_i$\uff0c\u8d39\u75280\u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u5929\u9700\u8981$r_i$\u5f20\u5e72\u51c0\u9910\u5dfe\uff0c\u4e0b\u6587\u7b80\u79f0\u51fa\u70b9**  \n**\u7b2ci\u5929\u7684\u5165\u70b9\u5411\u7b2ci+1\u5929\u7684\u5165\u70b9\u8fde\u5bb9\u91cfINF\uff0c\u8d39\u75280\u7684\u8fb9\uff0c\u8868\u793a\u4eca\u5929\u7684\u810f\u9910\u5dfe\u7559\u5230\u660e\u5929**  \n**\u7b2ci\u5929\u7684\u5165\u70b9\u5411\u7b2ci+m\u5929\u7684\u51fa\u70b9\u8fde\u5bb9\u91cfINF\uff0c\u8d39\u7528f\u7684\u8fb9\uff0c\u5411i+n\u5929\u7684\u51fa\u70b9\u8fde\u5bb9\u91cfINF\uff0c\u8d39\u7528s\u7684\u8fb9\uff0c\u8868\u793a\u6e05\u6d17\u7eb8\u5dfe**  \n**\u4ece\u6e90\u70b9\u5411\u7b2ci\u5929\u7684\u51fa\u70b9\u8fde\u5bb9\u91cfINF\uff0c\u8d39\u7528p\u7684\u8fb9\uff0c\u8868\u793a\u8d2d\u4e70\u7eb8\u5dfe\uff0c\uff08\u7279\u522b\u6ce8\u610f\u4e0d\u662f\u4ece\u5165\u70b9\u8fde\u5411\u51fa\u70b9\uff0c\u56e0\u4e3a\u8fd9\u4e00\u5929\u53ea\u6709\u5148\u7528\u4e86\u5e72\u51c0\u9910\u5dfe\u624d\u4f1a\u4ea7\u751f\u810f\u9910\u5dfe\uff09**  \n\n\n\u7136\u540e\u76f4\u63a5\u9003\u6a21\u677f\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff0c\u6700\u5927\u6d41\u4fdd\u8bc1\u4e86\u6bcf\u5929\u90fd\u6709$r_i$\u5f20\u5e72\u51c0\u9910\u5dfe  \n\n\n**\u4ee3\u7801**\n```cpp\n#include<bits/stdc++.h>\n#define INF (1ll<<50)\n#define int long long\nusing namespace std;\nstruct edge{\n    int to,next;\n    int data,cost;\n}e[200000];\nint h[10000],pop=1,n,m,s=8000,t=9000,maxflow=0,ans=0;\nvoid add(int x,int y,int z,int r){\n    pop++;\n    e[pop].to=y;e[pop].cost=r;e[pop].data=z;e[pop].next=h[x];h[x]=pop;\n    pop++;\n    e[pop].to=x;e[pop].cost=-r;e[pop].data=0;e[pop].next=h[y];h[y]=pop;\n}\nint flow[10000],d[10000],last[10000],v[10000];\nbool spfa(){\n    memset(flow,0,sizeof(flow));\n    memset(last,0,sizeof(last));\n    fill(d,d+10000,INF);\n    memset(v,0,sizeof(v));\n    flow[s]=INF;\n    d[s]=0;v[s]=1;\n    queue<int>q;\n    q.push(s);\n    while(q.size()){\n        int x=q.front(),y;q.pop();v[x]=0;\n        for(int i=h[x];i;i=e[i].next){\n            if(!e[i].data)continue;\n            if(e[i].cost+d[x]<d[y=e[i].to]){\n                d[y]=d[x]+e[i].cost;\n                last[y]=i;flow[y]=min(flow[x],e[i].data);\n                if(v[y])continue;\n                v[y]=1;q.push(y);\n            }\n        }\n    }\n    if(d[t]==INF)return false;\n    return true;\n}\nvoid updata(){\n    maxflow+=flow[t];\n    ans+=flow[t]*d[t];\n    int k=t;\n    while(k!=s){\n        int x=last[k];\n        e[x].data-=flow[t];\n        e[x^1].data+=flow[t];\n        k=e[x^1].to;\n    }\n}\nint P,M,F,N,S,r[10000];\nsigned main()\n{\n\t//freopen(\"testdata.in\",\"r\",stdin);\n    scanf(\"%lld\",&n);\n    for(int i=1;i<=n;i++)\n      scanf(\"%lld\",&r[i]);\n    scanf(\"%lld%lld%lld%lld%lld\",&P,&M,&F,&N,&S);\n    memset(h,0,sizeof(h));\n    for(int i=1;i<=n;i++)\n      add(s,i,r[i],0),\n      add(i+n,t,r[i],0);\n    for(int i=1;i<=n;i++){\n        add(s,i+n,INF,P);\n        if(i<n)\n        add(i,i+1,INF,0);\n        if(i+M<=n)\n        add(i,i+n+M,INF,F);\n        if(i+N<=n)\n        add(i,i+n+N,INF,S);\n    }\n    while(spfa())updata();\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1548581213,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u601d\u8def\u4e0a\u65b9\u7684\u5927\u4f6c\u8bb2\u7684\u5f88\u6e05\u695a\u4e86,\u5f53\u7136\u628a\u51fa\u5165\u70b9\u6539\u6210\u9ed1\u767d\u5929\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u6280\u5de7\u3002\n\n- \u5f88\u663e\u7136\u8fd9\u4e00\u5929\u7684\u810f\u7eb8\u5dfe\u53ef\u4ee5\u7559\u5230\u660e\u5929,\u4e5f\u53ef\u4ee5\u7559\u5230\u5feb\u6d17\u90e8\u548c\u6162\u6d17\u90e8\u3002\n- \u5f88\u663e\u7136\u6211\u53ef\u4ee5\u4ece\u4e70,\u5feb\u6d17\u90e8\u548c\u6162\u6d17\u90e8\u8fd9\u4e09\u4e2a\u5730\u65b9\u6765\u62ff\u7eb8\u5dfe\u3002\n- \u4e5f\u5f88\u663e\u7136\u6bcf\u5929\u4f1a\u7528\u6389\u4e00\u4e9b\u7eb8\u5dfe\n- \u66f4\u663e\u7136\u7684\u662f\u8fd9\u6ee1\u8db3\u6d41\u548c\u8d39\u7528\u7684\u6027\u8d28\n\n\u4ee3\u7801\u5982\u4e0b:\n\n```pascal\n// luogu-judger-enable-o2\nUses math;\n\nvar\n    from,reach,next,value,cost:array[-1..50010] of longint;\n    dis,pre,last,flow:array[-1..50010] of int64;\n    queue:array[-1..50010] of longint;\n    cnt:array[-1..8100] of longint;\n    vis:array[-1..8100] of boolean;\n    time,money:array[1..2] of longint;\n    n,m,i,j,k,tot,now,node,sink,source:longint;\n    maxflow,mincost:int64;\n\nprocedure add(x,y,sum_1,sum_2:longint);\nbegin\n    inc(tot); from[tot]:=x; reach[tot]:=y; value[tot]:=sum_1; cost[tot]:= sum_2; next[tot]:=cnt[x]; cnt[x]:=tot;\n    inc(tot); from[tot]:=y; reach[tot]:=x; value[tot]:=0    ; cost[tot]:=-sum_2; next[tot]:=cnt[y]; cnt[y]:=tot;\nend;\n\nfunction spfa:boolean;\nvar head,tail,now,i:longint;\nbegin\n    filldword(dis,sizeof(dis) div 4,maxlongint);\n    filldword(flow,sizeof(flow) div 4,maxlongint);\n    filldword(vis,sizeof(vis) div 4,0);\n    head:=1; tail:=1;  queue[1]:=source; vis[source]:=True; dis[source]:=0; pre[sink]:=-1;\n\n    while head<=tail do\n    begin\n        now:=queue[head]; vis[now]:=False; inc(head);\n        i:=cnt[now];\n        while i<>-1 do\n        begin\n            if (value[i]>0)and(dis[reach[i]]>dis[now]+cost[i]) then\n            begin\n                dis[reach[i]]:=dis[now]+cost[i];\n                pre[reach[i]]:=now;\n                last[reach[i]]:=i;\n                flow[reach[i]]:=min(flow[now],value[i]);\n                if vis[reach[i]]=False then\n                begin\n                    vis[reach[i]]:=True;\n                    inc(tail); queue[tail]:=reach[i];\n                end;\n            end;\n            i:=next[i];\n        end;\n    end;\n    if pre[sink]=-1 then exit(False); exit(True);\nend;\n\nprocedure MincostMaxflow;\nbegin\n    maxflow:=0; mincost:=0; now:=0;\n    while (spfa) do\n    begin\n        now:=sink;\n        inc(maxflow,flow[sink]);\n        inc(mincost,flow[sink]*dis[sink]);\n        while now<>source do\n        begin\n            dec(value[last[now]],flow[sink]);\n            inc(value[last[now] xor 1],flow[sink]);\n            now:=pre[now];\n        end;\n    end;\nend;\n\nprocedure Clear;\nbegin\n    filldword(cnt,sizeof(cnt) div 4,maxlongint*2+1); tot:=1;\n    fillchar(value,sizeof(value),0);\n    fillchar(reach,sizeof(reach),0);\n    fillchar(cost,sizeof(cost),0);\n    fillchar(next,sizeof(next),0);\nend;\n\nprocedure Construction_I;\nbegin\n    source:=1; sink:=(n+1) << 1;\n    for i:=1 to n do begin read(k); add(source,i+1,k,0); add(i+n+1,sink,k,0); end;\n    read(k,time[1],money[1],time[2],money[2]);\n    for i:=1 to n do\n    begin\n        if i+2<=n+1 then add(i+1,i+2,maxlongint,0);\n        if i+1+times[1]<=n+1 then add(i+1,i+times[1],maxlongint,money[1]);\n        if i+1+times[2]<=n+1 then add(i+1,i+times[2],maxlongint,moeny[2]);\n        add(source,i+n+1,maxlongint,k);\n    end;\nend;\n\nbegin\n    read(n); \n    Clear; Construction_I; MincostMaxflow; writeln(mincost);\nend.\n```",
        "postTime": 1541210284,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "### \u3010\u9898\u76ee\u3011\n![\u9898\u76ee](https://cdn.luogu.com.cn/upload/pic/25941.png)\n### \u3010\u6784\u56fe\u3011\n- \u9996\u5148\uff0c\u8981\u8fdb\u884c\u62c6\u70b9\u3002\u628a\u6bcf\u4e00\u5929\u62c6\u5206\u6210am\u548cpm\uff0c\u4e0a\u5348\u5c31\u662f\u7528\u5e72\u51c0\u9910\u5dfe\uff0c\u4e0b\u5348\u5c31\u662f\u5904\u7406\u810f\u9910\u5dfe\u3002\u5177\u4f53\u6784\u56fe\u5982\u4e0b\uff08\u6e90\u70b9\u4e3aS\uff0c\u6c47\u70b9\u4e3aT\uff09\uff1a\n\t- \u7528\u6bdb\u5dfe\n    \t- S\u4e0e\u6bcf\u4e00\u5929\u4e0a\u5348\u8fde\u4e00\u6761\u6d41\u91cf\u4e3ari\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u6bcf\u4e00\u5929\u4e0b\u5348\u4e0eT\u8fde\u63a5\u4e00\u6761\u6d41\u91cf\u4e3ari\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002 _**\u8868\u793a\u6bcf\u4e00\u5929\u4e0a\u5348\u8981\u7ed9\u51fari\u6761\u5e72\u51c0\u6bdb\u5dfe\uff0c\u4e0b\u5348\u5f97\u5230ri\u6761\u810f\u6bdb\u5dfe**_ \u3002\n        \n    - \u5904\u7406\u6bdb\u5dfe\n    \t1. \u4e0d\u6d17\uff1a\u6bcf\u4e00\u4e2a\u4e0b\u5348\u7684\u70b9\u4e0e\u4e0b\u4e00\u5929\u4e0b\u5348\u7684\u70b9\u8fde\u63a5\u4e00\u6761\u65e0\u9650\u6d41\u91cf\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c**\u8868\u793a\u5f53\u5929\u4e0b\u5348\u7684\u810f\u6bdb\u5dfe\u53ef\u4ee5\u5806\u79ef\u5230\u4e0b\u4e00\u5929\u7684\u4e0b\u5348\u518d\u5904\u7406**\u3002\n        1. \u5feb\u6d17\uff1a\u6bcf\u4e00\u5929\u4e0b\u5348\u7684\u70b9\u4e0e\u5feb\u6d17\u671f\u9650\u540e\u7684\u4e00\u5929\u8fde\u63a5\u4e00\u6761\u65e0\u9650\u6d41\u91cf\uff0c\u8d39\u7528\u4e3a\u5feb\u6d17\u8d39\u7528\u7684\u8fb9\u3002\n        1. \u6162\u6d17\uff1a\u4e0e\u5feb\u6d17\u540c\u7406\u3002\n        1. \u4e70\u6bdb\u5dfe\uff1aS\u4e0e\u6bcf\u4e00\u5929\u4e0a\u5348\u8fde\u4e00\u6761\u65e0\u9650\u6d41\u91cf\uff0c\u8d39\u7528\u4e3a\u4e70\u6bdb\u5dfe\u8d39\u7528\u7684\u8fb9\u3002\n        \n### \u3010\u89e3\u9898\u53cd\u601d\u3011\n- \u5f53\u9047\u5230\u4e00\u5929\u6709\u591a\u79cd\u5904\u7406\u7684\u9898\u76ee\u65f6\uff0c\u8981\u8003\u8651\u4f7f\u7528**\u62c6\u70b9**\u3002\n- \u641e\u65e0\u7a77\u5927\u65f6\u8981\u6ce8\u610f\u5168\u5c40\u53d8\u91cf\uff01\uff01\uff01\n\n### \u3010\u53c2\u8003\u7a0b\u5e8f\u3011\n```cpp\n#include<cstdio>\n#include<queue>\n#include<iostream>\n#include<cstring>\n#define am(x)(n+(x))\n#define pm(i) i\n#define INF 2000000000\ntypedef long long LL;\n#define int LL\nusing namespace std;\n\nint cur=1,n,m,s,t,mcost,mflow,nmon,qtim,qmon,stim,smon;\nint head[50005],dis[50005],flow[50005],pre[50005];\nstruct EDGE{\n    int t,next,w,f;\n}e[1000005];\nvoid add(int a,int b,int w,int f)\n{\n    cur++;e[cur].t=b;e[cur].next=head[a];e[cur].w=w;e[cur].f=f;head[a]=cur;\n    cur++;e[cur].t=a;e[cur].next=head[b];e[cur].w=0;e[cur].f=-f;head[b]=cur;\n}\n\nqueue < int > q;\nbool vis[5005];\nbool SPFA(int s,int t)\n{\n    for (int i=1;i<=t;i++)\n    \tdis[i]=INF;\n    memset(vis,0,sizeof vis);\n    vis[s]=1;\n    flow[s]=INF;\n    memset(vis,0,sizeof vis);\n    q.push(s);\n    while (!q.empty())\n    {\n        int u=q.front();q.pop();\n        vis[u]=false;\n        for (int h=head[u];h!=-1;h=e[h].next)\n        {\n            int v=e[h].t,f=e[h].f;\n            if (e[h].w&&dis[u]+f<dis[v])//\u5982\u679c\u8fb9\u8fd8\u6709\u6d41\u91cf\u5c31\u5c1d\u8bd5\u66f4\u65b0\n            {\n                dis[v]=dis[u]+f;//\u66f4\u65b0\u6700\u77ed\u8def\u5f84\n                flow[v]=min(flow[u],e[h].w);//\u5c3d\u53ef\u80fd\u5730\u6d41\u6c34\n                pre[v]=h;//\u8bb0\u5f55\u8def\u5f84\n                if (!vis[v])\n                {\n                    vis[v]=true;\n                    q.push(v);\n                }\n            }\n        }\n    }\n    return dis[t]!=INF;\n}\n\nvoid Update(int s,int t)\n{\n    int x=t;\n    while (x!=s)\n    {\n        int i=pre[x];\n        e[i].w-=flow[t];\n        e[i^1].w+=flow[t];\n        x=e[i^1].t;\n    }//\u6cbf\u7740\u8bb0\u5f55\u4e0b\u7684\u8def\u5f84\u5e76\u8fdb\u884c\u589e\u5e7f\u8def\n    mcost+=flow[t]*dis[t];//\u7d2f\u8ba1\u8d39\u7528\n}\nvoid E_K(int s,int t)\n{\n    while (SPFA(s,t))//\u5f53\u8fd8\u6709\u591a\u4f59\u6d41\u91cf\u65f6\n        Update(s,t);\n}\n\nsigned main()\n{\n    scanf(\"%lld\",&n);\n    s=0;t=2*n+1;\n    memset(head,-1,sizeof head);\n    for (int i=1;i<=n;i++)\n    {\n        int x;\n        scanf(\"%lld\",&x);\n        add(s,pm(i),x,0);\n        add(am(i),t,x,0);\n    }\n    scanf(\"%lld%lld%lld%lld%lld\",&nmon,&qtim,&qmon,&stim,&smon);\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tif (i+1<=n)\n\t\t\tadd(pm(i),pm(i+1),INF,0);\n\t\tif (i+qtim<=n)\n\t\t\tadd(pm(i),am(i+qtim),INF,qmon);\n\t\tif (i+stim<=n)\n\t\t\tadd(pm(i),am(i+stim),INF,smon);\n\t\tadd(s,am(i),INF,nmon);\n\t}\n    E_K(s,t);\n   \tprintf(\"%lld\",mcost);\n    return 0;\n} \n```",
        "postTime": 1532621223,
        "uid": 12349,
        "name": "FREEH",
        "ccfLevel": 6,
        "title": "\u62c6\u70b9\u2014\u2014\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "### \u8fd9\u9053\u9898\uff0c\u662f\u6211\u505a24\u9898\u7684\u7b2c\u4e00\u9898\n\n\u5509\u256e(\u256f\u25bd\u2570)\u256d\uff0c\u8bf4\u4ec0\u4e48\u5462\uff0c\u4f5c\u4e3a\u849f\u84bb\u7684\u6211=_=\u3002\n\n\u5148\u8bf4\u5efa\u6a21\u5417\uff1a\n\n\u9996\u5148\uff0c\u6211\u4eec\u62c6\u70b9\uff0c\u5c06\u4e00\u5929\u62c6\u6210\u665a\u4e0a\u548c\u65e9\u4e0a\uff0c\u6bcf\u5929\u665a\u4e0a\u4f1a\u53d7\u5230\u810f\u9910\u5dfe\uff0c\u65e9\u4e0a\u8ddf\u665a\u4e0a\u7684\u6bdb\u5dfe\u7684\u8d28\u91cf\u662f\u4e0d\u4e00\u6837\u7684\u3002\n\n1.\u4ece\u539f\u70b9\u5411\u6bcf\u4e00\u5929\u665a\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u5f53\u5929\u6240\u7528\u9910\u5dfex\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u5929\u665a\u4e0a\u4ece\u8d77\u70b9\u83b7\u5f97x\u6761\u810f\u9910\u5dfe\u3002\n\n2.\u4ece\u6bcf\u4e00\u5929\u65e9\u4e0a\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u5f53\u5929\u6240\u7528\u9910\u5dfex\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u5929\u767d\u5929\u5411\u6c47\u70b9\u63d0\u4f9bx\u6761\u5e72\u51c0\u7684\u9910\u5dfe,\u6ee1\u6d41\u65f6\u8868\u793a\u7b2ci\u5929\u7684\u9910\u5dfe\u591f\u7528\u4e86 \u3002\n\n3.\u4ece\u6bcf\u4e00\u5929\u665a\u4e0a\u5411\u7b2c\u4e8c\u5929\u665a\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a999999999\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u5929\u665a\u4e0a\u53ef\u4ee5\u5c06\u7528\u5e9f\u7684\u9910\u5dfe\u7559\u5230\u7b2c\u4e8c\u5929\u665a\u4e0a\u3002\n\n4.\u4ece\u6bcf\u4e00\u5929\u665a\u4e0a\u5411\u4ece\u8fd9\u4e00\u5929\u6254\u5230\u5feb\u6d17\u7ed3\u675f\u7684\u90a3\u4e00\u5929\u65e9\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a999999999\uff0c\u8d39\u7528\u4e3a\u5feb\u6d17\u5e97\u6240\u9700\u8981\u7684\u94b1\u6570\u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u5929\u665a\u4e0a\u53ef\u4ee5\u9001\u53bb\u5feb\u6d17\u90e8,\u5728\u7b2ci+t1\u5929\u65e9\u4e0a\u6536\u5230\u9910\u5dfe \u3002\n\n5.\u540c\u7406\uff0c\u4ece\u6bcf\u4e00\u5929\u665a\u4e0a\u4ece\u8fd9\u4e00\u5929\u6254\u5230\u6162\u6d17\u7ed3\u675f\u7684\u90a3\u4e00\u5929\u65e9\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a999999999\uff0c\u8d39\u7528\u4e3a\u6162\u6d17\u5e97\u6240\u7528\u94b1\u6570\u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u5929\u665a\u4e0a\u53ef\u4ee5\u9001\u53bb\u6162\u6d17\u90e8,\u5728\u7b2ci+t2\u5929\u65e9\u4e0a\u6536\u5230\u9910\u5dfe \u3002\n\n6.\u4ece\u8d77\u70b9\u5411\u6bcf\u4e00\u5929\u65e9\u4e0a\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a999999999\uff0c\u8d39\u7528\u4e3a\u8d2d\u4e70\u9910\u5dfe\u6240\u7528\u94b1\u6570\u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u5929\u65e9\u4e0a\u53ef\u4ee5\u8d2d\u4e70\u9910\u5dfe \u3002\n\n\u5728\u6ce8\u610f\u4e0d\u8981\u8d85\u8fc7n\u5c31\u884c\u4e86\u3002\n\n\u7136\u800c\u3001\u3001\u3001\n\n\u975e\u5e38\u5c34\u5c2c\uff0c\u4e00\u4e2a\u6807\u51c6\u7684ZKW\u70b8\u4e865\u4e2a\u70b9\uff0c\u8fde\u7eedSPFA\u4e07\u5c81\uff01\n\n```cpp\n#include<cstdio>\n#include<cstring>\nusing  namespace  std;\ntypedef  long  long  ll;\nstruct  node\n{\n    ll  y,next,other,c,d;\n}a[210000];ll  last[5100],len,n,m,x1,x2,y1,y2,flow[5100],dis[5100],d[5100],b[5100],st,ed,cost,ans;\nbool  v[5100];\nll  list[5100],head,tail;\ninline  ll  mymin(ll  x,ll  y){return  x<y?x:y;}\nvoid  ins(ll  x,ll  y,ll  c,ll  d)\n{\n    len++;\n    a[len].y=y;a[len].c=c;a[len].d=d;a[len].next=last[x];last[x]=len;\n    len++;\n    a[len].y=x;a[len].c=0;a[len].d=-d;a[len].next=last[y];last[y]=len;\n    a[len].other=len-1;\n    a[len-1].other=len;\n}\nbool  spfa()\n{\n    memset(v,true,sizeof(v));v[st]=false;\n    memset(dis,20,sizeof(dis));dis[st]=0;\n    head=1;tail=2;list[head]=st;\n    ll  inf=dis[st+1];\n    while(head!=tail)\n    {\n        ll  x=list[head];\n        for(ll  k=last[x];k;k=a[k].next)\n        {\n            ll  y=a[k].y;\n            if(a[k].c>0  &&  dis[x]+a[k].d<dis[y])\n            {\n                dis[y]=dis[x]+a[k].d;\n                flow[y]=mymin(flow[x],a[k].c);\n                d[y]=x;b[y]=k;\n                if(v[y]==true)\n                {\n                    v[y]=false;\n                    if(dis[list[head+1]]>dis[y])\n                    {\n                        ll  all=head;\n                        head--;if(head==0)head=n;\n                        list[head]=list[all];list[all]=y;\n                    }\n                    else\n                    {\n                        list[tail++]=y;if(tail==n+1)tail=1;\n                    }\n                }\n            }\n        }\n        head++;v[x]=true;\n        if(head==n+1)head=1;\n    }\n    if(dis[ed]!=inf)\n    {\n        ll  y=ed,root=0;\n        while(y>0)\n        {\n            root=b[y];y=d[y];\n            a[root].c-=flow[ed];a[a[root].other].c+=flow[ed];\n        }\n        ans+=flow[ed];cost+=flow[ed]*dis[ed];\n        return  true;\n    }\n    return  false;\n}\nint  main()\n{\n    scanf(\"%lld\",&n);\n    st=0;ed=n*2+1;\n    for(ll  i=1;i<=n;i++)\n    {\n        ll  x;scanf(\"%lld\",&x);\n        ins(st,i*2,x,0);ins(i*2-1,ed,x,0);\n    }\n    scanf(\"%lld%lld%lld%lld%lld\",&m,&x1,&y1,&x2,&y2);\n    for(ll  i=1;i<n;i++)\n    {\n        ins(i*2,i*2+2,999999999,0);\n        ins(st,i*2-1,999999999,m);\n    }\n    ins(st,n*2-1,99999999,m);\n    ll  edd=n-x1;\n    for(ll  i=1;i<=edd;i++)ins(i*2,(i+x1)*2-1,999999999,y1);\n    edd=n-x2;\n    for(ll  i=1;i<=edd;i++)ins(i*2,(i+x2)*2-1,999999999,y2);\n    flow[st]=999999999;n=n*2+2;\n    while(spfa()==true);\n    printf(\"%lld\\n\",cost);\n    return  0;\n}\n```",
        "postTime": 1525431715,
        "uid": 65602,
        "name": "\u7231\u559d\u654c\u654c\u754f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u5176\u5b9e\u6211\u6bd4\u8f83\u597d\u5947\u8fd9\u9053\u9898\u4e3a\u4ec0\u4e48\u4e00\u822c\u8d39\u7528\u6d41\u4f1a\u5361\u4e0d\u8fc7\u53bb\u5462\uff1f\n\n\n\u5bf9\u4e8e\u666e\u901a\u7684\u8d39\u7528\u6d41\u7b97\u6cd5\u662f\u901a\u8fc7\u4e0d\u505c\u5730spfa\u5bfb\u627e\u6700\u4f18\u8def\u5f84\u589e\u5e7f\u7684\uff0c\u90a3\u4e48\u6bcf\u6b21spfa\u7684\u65f6\u5019\u5e38\u6570\u662f\u5f88\u5927\u7684\uff0c\u800c\u4e14\u8d3c\u5927\uff0c\u5bfc\u81f4\u4e00\u4e9b\u7a20\u5bc6\u56fe\u662f\u5361\u4e0d\u8fc7\u53bb\u7684\uff0c\u5373\u4f7f\u52a0\u4e0a\u4ec0\u4e48slf lll\u4f18\u5316\u4e4b\u7c7b\u7684\u3002\n\n\n\u600e\u4e48\u529e\u5462\uff1f\u4e0azkw\u8d39\u7528\u6d41\u5c31A\u4e86\uff0c\u800c\u4e14\u901f\u5ea6\u8fd8\u662f\u5f88\u53ef\u89c2\u7684\n\n```cpp\n#include <stdio.h>\n#include <string.h>\n#define rep(i, st, ed) for (int i = st; i <= ed; i += 1)\n#define erg(i, st) for (int i = ls[st]; i; i = e[i].next)\n#define fill(x, t) memset(x, t, sizeof(x))\n#define min(x, y) (x)<(y)?(x):(y)\n#define ll long long\n#define INF 0x3f3f3f3f\n#define N 4001\n#define E N * 21 + 1\nstruct edge{int x, y, w, c, next;}e[E];\ninline int read(){\n    char ch = getchar(); int x = 0;\n    while (ch > '9' || ch < '0'){\n        ch = getchar();\n    }\n    while (ch <= '9' && ch >= '0'){\n        x = (x << 1) + (x << 3) + ch - '0';\n        ch = getchar();\n    }\n    return x;\n}\nint ls[N];\ninline void addEdge(int &cnt, int x, int y, int w, int c){\n    cnt += 1; e[cnt] = (edge){x, y, w, c, ls[x]}; ls[x] = cnt;\n    cnt += 1; e[cnt] = (edge){y, x, 0, -c, ls[y]}; ls[y] = cnt;\n}\nint cur[N], vis[N], dis[N];\nll ans;\ninline int find(int now, int ed, int mn){\n    if (now == ed || !mn){\n        return mn;\n    }\n    int ret = 0;\n    vis[now] = 1;\n    for (int &i = cur[now]; i; i = e[i].next){\n        if (e[i].w > 0 && dis[e[i].y] + e[i].c == dis[now] && !vis[e[i].y]){\n            int d = find(e[i].y, ed, min(mn - ret, e[i].w));\n            ans += d * e[i].c;\n            e[i].w -= d;\n            e[i ^ 1].w += d;\n            ret += d;\n            if (ret == mn){\n                break;\n            }\n        }\n    }\n    return ret;\n}\ninline int modify(int st, int ed){\n    int mn = INF, inf = INF;\n    rep(now, st, ed){\n        if (vis[now]){\n            erg(i, now){\n                if (!vis[e[i].y] && e[i].w > 0){\n                    mn = min(mn, -dis[now] + e[i].c + dis[e[i].y]);\n                }\n            }\n        }\n    }\n    if (mn == inf){\n        return 0;\n    }\n    rep(i, st, ed){\n        if (vis[i]){\n            dis[i] += mn;\n        }\n    }\n    return 1;\n}\ninline void zkw(int st, int ed){\n    do{\n        rep(i, st, ed){\n            vis[i] = 0;\n            cur[i] = ls[i];\n        }\n        while (find(st, ed, INF)){\n            rep(i, st, ed){\n                vis[i] = 0;\n                cur[i] = ls[i];\n            }\n        }\n    } while (modify(st, ed));\n}\nint main(void){\n    int n = read();\n    int st = 0, ed = n * 2 + 1;\n    int edgeCnt = 1;\n    rep(i, 1, n){\n        int r = read();\n        addEdge(edgeCnt, st, i, r, 0);\n        addEdge(edgeCnt, i + n, ed, r, 0);\n    }\n    int ap = read(), am = read(), af = read(), an = read(), as = read();\n    rep(i, 1, n){\n        addEdge(edgeCnt, st, i + n, INF, ap);\n        if (i < n){\n            addEdge(edgeCnt, i, i + 1, INF, 0);\n        }\n        if (i + am <= n){\n            addEdge(edgeCnt, i, i + n + am, INF, af);\n        }\n        if (i + an <= n){\n            addEdge(edgeCnt, i, i + n + an, INF, as);\n        }\n    }\n    ans = 0;\n    zkw(st, ed);\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1491995112,
        "uid": 18867,
        "name": "jpwang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7528zkw\u662f\u771f\u7684\u5feb\u2026\u2026\u4f46\u662f\u73b0\u5728\u65f6\u95f4\u52304s\u4e86\uff0c\u53c8\u6709o2\u548c\u9ad8\u6027\u80fd\uff0c\u8c8c\u4f3c\u666e\u901a\u7684\u8d39\u7528\u6d41\u4e5f\u53ef\u4ee5\u8fc7\u4e86\uff0c\u5927\u80c6\u7684\u53d1\u4e00\u53d1\u9898\u89e3\uff0c\u9996\u5148\uff0c\u8981\u628a\u6bcf\u4e00\u5929\u548c\u6e90\u70b9\u6c47\u70b9\u5efa\u4e00\u6761\u5bb9\u91cf\u4e3a\u6bcf\u5929\u7684\u9700\u6c42\u7684\u8fb9\uff0c\u8d39\u7528\u4e3a0\uff0c\u7136\u540e\u5728\u6761\u4ef6\u6ee1\u8db3\u7684\u60c5\u51b5\u4e0b\uff08i + n < num of days\u4e4b\u7c7b\u7684\uff09\uff0c\u5411\u5feb\u6d17\u4e4b\u540e\u90a3\u5929\u5efa\u5bb9\u91cfINF\u8d39\u7528f\u7684\u8fb9\uff0c\u6162\u6d17\u4e5f\u662f\uff0c\u6ce8\u610f\u8981\u548c\u4e0b\u4e00\u5929\u5efa\u8fb9\uff0c\u5bb9\u91cfINF\u8d39\u75280\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4e0d\u6d17\u2026\u2026\u6240\u4ee5\u8fd8\u662f\u8981\u62c6\u70b9\uff0c\u81f3\u4e8e\u65b0\u4e70\u7684\uff0c\u81ea\u7136\u8d39\u7528\u4e3aprice\uff0c\u5bb9\u91cfinf\uff0c\u5c31\u8fd9\u4e9b\n\n\u4ee3\u7801\uff1a\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <functional>\n#include <queue>\nusing namespace std;\nint cnt=1,nd,price,m,f,n,s,ans;\nbool inq[2005];\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 80003;\nconst int MAXE = 160003;\nstruct Edge {\n    int from, to, nxt, cap, flow, cost;\n    Edge() {}\n    Edge(int from, int to, int nxt, int cap, int flow, int cost):from(from), to(to), nxt(nxt), cap(cap), flow(flow), cost(cost) {}\n}e[MAXE];\nint h[MAXN], p;\nint source, sink;\nint cur[MAXN];\nint d[MAXN];\nqueue<int> q;\nbool exist[MAXN];\ninline void add_edge(int x, int y, int cap, int cost) {\n    e[p] = Edge(x, y, h[x], cap, 0, cost); h[x] = p++;\n    e[p] = Edge(y, x, h[y], 0, 0, -cost); h[y] = p++;\n}\nbool SPFA() {\n    memset(d, 0x3f, sizeof(d));\n    memset(exist, 0, sizeof(exist));\n    memset(cur, -1, sizeof(cur));\n    q.push(source);\n    d[source] = 0;\n    exist[source] = 1;\n    while(!q.empty()) {\n        int u = q.front(); q.pop();\n        exist[u] = 0;\n        for(int i = h[u]; ~i; i = e[i].nxt) {\n            int v = e[i].to;\n            if(e[i].cap > e[i].flow && d[v] > d[u] + e[i].cost) {\n                d[v] = d[u] + e[i].cost;\n                cur[v] = i;\n                if(!exist[v]) {\n                    q.push(v);\n                    exist[v] = 1;\n                }\n            }\n        }\n    }\n    return d[sink] != INF;\n}\nlong long MCMF() {\n    long long cost = 0;\n    while(SPFA()) {\n        int flow = INF;\n        for(int i = sink; i != source; i = e[cur[i]].from) flow = min(flow, e[cur[i]].cap - e[cur[i]].flow);\n        for(int i = sink; i != source; i = e[cur[i]].from) {\n            e[cur[i]].flow += flow;\n            e[cur[i] ^ 1].flow -= flow;\n        }\n        cost += flow * d[sink];\n    }\n    return cost;\n}\nint main()\n{\n    memset(h, -1, sizeof(h));\n    scanf(\"%d\", &nd);\n    int x;source = 0; sink = 8000;\n    for(int i = 1; i <= nd; i++)\n    {\n            scanf(\"%d\",&x);\n            add_edge(source, i, x, 0);//\u8fde\u6e90\u70b9\u6c47\u70b9\n            add_edge(nd + i, sink, x, 0);\n    }\n    scanf(\"%d%d%d%d%d\", &price, &m, &f, &n, &s);\n    for(int i = 1; i <= nd; i++)\n    {\n        if(i + 1 <= nd)add_edge(i, i + 1, INF, 0);//\u7559\u5230\u660e\u5929\n        if(i + m <= nd)add_edge(i, nd + i + m, INF, f);//\u5feb\u6d17\n        if(i + n <= nd)add_edge(i, nd + i + n, INF, s);//\u6162\u6d17\n        add_edge(source, nd+i, INF, price);//\u65b0\u4e70\n    }\n    printf(\"%d\\n\",MCMF());\n    return 0;\n}\n\n```",
        "postTime": 1509154031,
        "uid": 34332,
        "name": "KKarshilov",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u8d39\u7528\u6d41\u5361\u4e0d\u8fc7\u53bb\u600e\u4e48\u529e\uff1f\n\n\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e00\u79cd $O(n\\log^2 n)$ \u7684\u7b97\u6cd5\u3002\n\n\u8003\u8651\u9010\u5355\u4f4d\u6d41\u91cf\u589e\u5e7f\u8d39\u7528\u6d41\u7684\u8fc7\u7a0b\uff0c\u6bcf\u589e\u5e7f\u4e00\u5355\u4f4d\u6d41\u91cf\uff0c\u589e\u52a0\u7684\u8d39\u7528\u662f\u4e0d\u51cf\u7684\u3002\n\n\u5982\u679c\u8981\u6c42\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\uff0c\u53ef\u4ee5\u4e8c\u5206\u51fa\u589e\u52a0\u8d39\u7528\u5927\u4e8e $0$ \u7684\u6d41\u91cf\uff0c\u7136\u540e\u6c42\u8fd9\u4e2a\u6d41\u91cf\u4e0b\u7684\u6700\u5c0f\u8d39\u7528\u3002\n\n\u6c42\u7279\u5b9a\u6d41\u91cf\u4e0b\u7684\u6700\u5c0f\u8d39\u7528\uff0c\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\u5c31\u662f\u7528\u7ed9\u5b9a\u6570\u91cf\u7684\u9910\u5dfe\u5206\u914d\u7ed9\u6bcf\u5929\u4f7f\u5f97\u6ee1\u8db3\u8981\u6c42\u7684\u6700\u5c0f\u8d39\u7528\u3002\n\n\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u8d2a\u5fc3\uff0c\u7528\u5e76\u67e5\u96c6\u4f18\u5316\u53ef\u4ee5\u505a\u5230 $O(n\\log n)$\u3002\n\n\u4e8e\u662f\u603b\u590d\u6742\u5ea6\u5c31\u662f $O(n\\log^2 n)$ \u4e86\u3002\n",
        "postTime": 1491401255,
        "uid": 8147,
        "name": "t0vd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1251 \u3010\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3011"
    }
]