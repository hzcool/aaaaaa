[
    {
        "content": "Farmer John\u6709n\u4e2a\u519c\u573a\uff0c\u7f16\u53f7\u4e3a1\u5230n\uff0c\u6bcf\u4e2a\u519c\u573a\u5728\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u6709\u4e00\u4e2a\u5750\u6807\u3002\u73b0\u5728\u4ed6\u60f3\u6309\u7167\u7f16\u53f7\u7684\u987a\u5e8f\u4e00\u6b21\u8bbf\u95ee\u6bcf\u4e2a\u519c\u573a\uff0c\u4ece1\u53f7\u52302\u53f7\uff0c\u518d\u52303\u53f7\u2026\u2026\u6700\u540e\u4ecen\u53f7\u56de\u52301\u53f7\u3002\u6bcf\u6b21\u53ea\u80fd\u4ece\u5f53\u524d\u4f4d\u7f6e\u8d70\u5230\u5f53\u524d\u4f4d\u7f6e\u7684\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u70b9\uff0c\u6bcf\u8d70\u4e00\u6b65\u9700\u8981\u82b11\u5206\u949f\uff0c\u6bcf\u4e2a\u9876\u70b9\u53ea\u80fd\u8bbf\u95ee\u4e00\u6b21\uff0c\u95ee\u8d70\u5b8c\u4e00\u5708\u56de\u52301\u70b9\u7684\u6700\u77ed\u65f6\u95f4\u662f\u591a\u5c11\u3002\n\n\u65e2\u7136\u8bbf\u95ee\u987a\u5e8f\u662f\u786e\u5b9a\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\uff0c\u6bd4\u5982Dijkstra\u7b97\u6cd5\uff0c\u5206\u522b\u8ba1\u7b97\u4ece1\u52302\u7684\u6700\u77ed\u8def\u5f84\uff0c2\u52303\u7684\u6700\u77ed\u8def\u5f84\u2026\u2026\u7136\u540e\u5168\u90e8\u76f8\u52a0\u5c31\u662f\u7b54\u6848\u4e86\u3002\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u5982\u4f55\u6c42\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6bd4\u5982\u6211\u4eec\u5148\u8003\u8651\u6309\u7167\u9898\u76ee\u4e2d\u7684\u6837\u4f8b\uff0c\u4ece2\u53f7\u52303\u53f7\u70b9\u7684\u6700\u77ed\u8def\u5f84\u662f\u591a\u5c11\u3002\n\n\u628a\u6837\u4f8b\u753b\u6210\u56fe\u770b\u4e00\u4e0b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/nwurpmxt.png)\n\n2\u53f7\u70b9\u52303\u53f7\u70b9\uff0c\u76f4\u63a5\u8fde\u4e0b\u6765\u662f\u6700\u5feb\u7684\uff0c\u53ea\u89813\u5206\u949f\uff0c\u5c31\u662f\u7ea2\u8272\u7684\u7ebf\u3002\u4f46\u662f\u73b0\u5728\u6211\u4eec\u8981\u4ece2\u53f7\u70b9\u76f4\u63a5\u8d70\u52303\u53f7\u70b9\uff0c\u4e2d\u95f4\u4e0d\u80fd\u7ecf\u8fc7\u65e0\u5173\u7684\u519c\u573a1\uff0c\u6240\u4ee5\u53ea\u80fd\u8d70\u7eff\u8272\u7684\u7ebf\uff0c\u6240\u4ee5\u4ece2\u52303\u7684\u6700\u77ed\u8def\u5f84\u662f5\u3002\n\n\u90a3\u4e48\u5982\u4f55\u5b9e\u73b0\u8fd9\u79cd\u4e0d\u7ecf\u8fc7\u519c\u573a\u7684\u6700\u77ed\u8def\u5f84\u5462\uff1f\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u52a0\u865a\u70b9\u3002\u6211\u4eec\u5728\u6bcf\u4e2a\u70b9\u7684\u4e0a\u4e0b\u5de6\u53f3\uff0c\u518d\u52a04\u4e2a\u70b9\u3002\u5982\u4e0b\u56fe\uff0c\u628a\u865a\u70b9\u90fd\u52a0\u4e0a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/6lwi1xk1.png)\n\n\u597d\uff0c\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u670914\u4e2a\u70b9\u3002\u628a\u6bcf\u4e2a\u519c\u573a\u548c\u5468\u56f4\u7684\u56db\u4e2a\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u957f\u5ea6\u4e3a1\u7684\u8fb9\uff0c\u7136\u540e\u5728\u865a\u70b9\u4e4b\u95f4\u4e24\u4e24\u8fde\u8fb9\u3002\u6bd4\u59822\u52309\u8fde\u4e00\u6761\u8fb9\uff0c9\u52306\u8fde\u4e00\u6761\u8fb9\uff0c6\u523012\u8fde\u4e00\u6761\u8fb9\uff0c12\u52303\u8fde\u4e00\u6761\u8fb9\u3002\u6211\u4eec\u8981\u6c42\u8d70\u6700\u77ed\u8def\u5f84\u7684\u65f6\u5019\uff0c\u53ea\u80fd\u6cbf\u7740\u6211\u4eec\u8fde\u7684\u8fb9\u8d70\uff0c\u4e0d\u80fd\u968f\u4fbf\u4e71\u8d70\u3002\u5e76\u4e14\u8d70\u7684\u65f6\u5019\u4e0d\u80fd\u78b0\u5230\u522b\u7684\u519c\u573a\u3002\u8fd9\u6837\u7ea2\u8272\u7684\u8def\u5f842-5-1-3\u56e0\u4e3a\u78b0\u5230\u4e861\u53f7\u800c\u4e0d\u80fd\u8d70\uff0c\u800c2-9-6-12-3\u8fd9\u6761\u8def\u5f84\u662f\u53ef\u4ee5\u7684\u3002\n\n\u6211\u4eec\u8fd9\u6837\u8fde\u8fb9\u4ee5\u540e\u8dd1\u6700\u77ed\u8def\uff0c\u4e00\u5b9a\u662f\u6bd4\u8f83\u4f18\u79c0\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u8def\u7ebf\u7ecf\u8fc7\u4e86\u4e0d\u5b58\u5728\u7684\u70b9\uff0c\u5c31\u4f1a\u201d\u7ed5\u8fdc\u201c\u3002\u6bd4\u59829\u53f7\u70b9\u548c12\u53f7\u70b9\u7684\u53f3\u8fb9\u6ca1\u6709\u70b9\u4e86\u3002\u5982\u679c\u4f60\u4ece9\u53f7\u70b9\u5411\u53f3\u8d70\uff0c\u7136\u540e\u4e0b\u6765\uff0c\u7136\u540e\u523012\u53f7\u70b9\u7684\u53f3\u8fb9\uff0c\u518d\u8d70\u56de\u523012\u53f7\u70b9\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u6837\u7ed5\u8def\u4e86\uff0c\u8fd9\u6837\u7684\u8def\u662f\u4e0d\u5212\u7b97\u7684\u3002\n\n\u90a3\u4e48\u662f\u5426\u4efb\u610f\u4e24\u4e2a\u865a\u70b9\u4e4b\u95f4\u90fd\u8fde\u8fb9\u5462\uff1f\u4e5f\u4e0d\u662f\u3002\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6982\u5ff5\uff0c\u201d\u6700\u591a\u62d0\u5f2f\u4e00\u6b21\u7684\u8def\u5f84\u201c\uff0c\u5c31\u662f\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u8981\u4e48\u662f\u76f4\u7ebf\uff0c\u8981\u4e48\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u76f4\u89d2\u62d0\u5f2f\uff0c\u4e0d\u80fd\u6709\u4e24\u4e2a\u6216\u8005\u4e24\u4e2a\u4ee5\u4e0a\u3002\u6bd4\u5982\u56fe\u4e2d2\u53f7\u70b9\u5de6\u8fb9\u768410\u53f7\u70b9\uff0c\u548c3\u53f7\u70b9\u4e0b\u9762\u768411\u53f7\u70b9\uff0c\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\uff0c\u5c31\u627e\u4e0d\u5230\u4e00\u6761\u8def\u5f84\u53ef\u4ee5\u6700\u591a\u62d0\u4e00\u4e2a\u76f4\u89d2\u5f2f\u5c31\u80fd\u76f8\u8fde\u3002\u8fd9\u683710\u53f7\u70b9\u548c11\u53f7\u70b9\u6211\u4eec\u5c31\u4e0d\u8fde\u8fb9\uff0c\u56e0\u4e3a\u5982\u679c\u8981\u62d0\u8d85\u8fc7\u4e00\u4e2a\u5f2f\uff0c\u8fd9\u4e2a\u8def\u7ebf\u4e00\u5b9a\u8981\u7ed5\u8def\u3002\u4e8b\u5b9e\u4e0a\uff0c10\u53f7\u523011\u53f7\u70b9\uff0c\u53ef\u4ee5\u8d7010-14-7-12-11\u8fd9\u6761\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u662f\u4e0d\u7ed5\u8def\u7684\uff0c\u6240\u4ee5\u5e76\u4e0d\u9700\u8981\u5728\u4ed6\u4eec\u4e4b\u95f4\u591a\u8fde\u4e00\u6761\u7ed5\u8def\u7684\u8fb9\u3002\n\n\u90a3\u4e48\u53ea\u8981\u865a\u70b9\u4e4b\u95f4\u7684\u8fb9\u90fd\u4e0d\u7ed5\u8def\uff0c\u90a3\u4e48\u865a\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u7684\u957f\u5ea6\u5c31\u662f\u4ed6\u4eec\u4e4b\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\uff0c\u5373\u4e24\u70b9\u4e4b\u95f4\u6a2a\u5750\u6807\u7684\u5dee\u7684\u7edd\u5bf9\u503c\uff0c\u52a0\u4e0a\u7eb5\u5750\u6807\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u3002\n\n\u4e0b\u4e00\u4e2a\u96be\u70b9\u662f\u5982\u4f55\u5224\u65ad\u4e24\u4e2a\u70b9\u4e4b\u95f4\u53ef\u4ee5\u6709\u4e00\u6761\u201d\u6700\u591a\u62d0\u5f2f\u4e00\u6b21\u7684\u8def\u5f84\u201c\uff0c\u800c\u4e14\u8981\u6c42\u8fd9\u4e2a\u8def\u5f84\u4e0d\u80fd\u7ecf\u8fc7\u519c\u573a\u5462\uff1f\u5982\u679c\u8fd9\u4e24\u4e2a\u70b9\u672c\u6765\u5c31\u5728\u540c\u4e00\u884c\u6216\u8005\u540c\u4e00\u5217\uff0c\u95ee\u9898\u5c31\u9000\u5316\u6210\u4e86\u5224\u65ad\u519c\u573a\u70b9\u5728\u4e0d\u5728\u7ebf\u6bb5\u4e0a\uff0c\u8fd9\u4e2a\u597d\u89e3\u51b3\u3002\u5982\u679c\u4e24\u4e2a\u70b9\u4e0d\u5728\u540c\u4e00\u884c\u540c\u4e00\u5217\uff0c\u90a3\u4e48\u56e0\u4e3a\u4ed6\u4eec\u6700\u591a\u62d0\u4e00\u6b21\u5f2f\uff0c\u6240\u4ee5\u53ea\u6709\u4e24\u6761\u8def\u7ebf\u53ef\u4ee5\u8d70\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/w8ieduca.png)\n\n\u4ece(x1,y1)\u70b9\u8d70\u5230(x2\uff0cy2)\u70b9\uff0c\u8981\u4e48\u8d70\u9ed1\u8272\u8def\u5f84\uff0c\u8981\u4e48\u8d70\u7ea2\u8272\u8def\u5f84\u3002\u6bcf\u6761\u8def\u5f84\u53ef\u4ee5\u62c6\u6210\u4e24\u4e2a\u7ebf\u6bb5\uff0c\u4e8e\u662f\u53c8\u9000\u5316\u4e3a\u70b9\u5728\u7ebf\u6bb5\u4e0a\u7684\u5224\u65ad\u3002\n\n\u57fa\u672c\u601d\u8def\u8bb2\u5b8c\u4e86\uff0c\u5176\u4ed6\u5c31\u662f\u4ee3\u7801\u4e86\uff1a\n\n```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\nconst int MAXN = 505;\n\nstruct Point {\n    int x, y;\n\n    Point(int x, int y) : x(x), y(y) {}\n\n    bool operator<(const Point &a) const {\n        if (x != a.x) return x < a.x;\n        return y < a.y;\n    }\n};\n\nstruct Edge {\n    int v, w;\n\n    Edge(int v, int w) : v(v), w(w) {}\n};\n\nstruct Node {\n    int u, d;\n\n    Node(int u, int d) : u(u), d(d) {}\n\n    bool operator<(const Node &a) const {\n        return d > a.d;\n    }\n};\n\nint n, x[MAXN], y[MAXN], nn, ans, dis[MAXN], vis[MAXN];//nn\u8868\u793a\u70b9\u7684\u603b\u4e2a\u6570\nmap<Point, int> dict;//\u5b9a\u4e49\u4e00\u4e2a\u96c6\u5408\uff0c\u7528\u6765\u5224\u65ad\u67d0\u4e2a\u70b9\u662f\u5426\u91cd\u590d\u51fa\u73b0\u8fc7\nint dx[] = {0, 0, 1, -1};\nint dy[] = {1, -1, 0, 0};\nvector<Edge> adj[MAXN];\n\n//\u5224\u65adp\u70b9\u5728\u4e0d\u5728\u7ebf\u6bb5(x1,y1),(x2,y2)\u4e0a\nbool inSegment(int p, int x1, int y1, int x2, int y2) {\n    if (x1 == x2 && x[p] == x1) {\n        if (y1 > y2) swap(y1, y2);\n        if (y[p] >= y1 && y[p] <= y2) return true;\n    }\n    if (y1 == y2 && y[p] == y1) {\n        if (x1 > x2) swap(x1, x2);\n        if (x1 <= x[p] && x[p] <= x2) return true;\n    }\n    return false;\n}\n\n//\u5224\u65ad\u4e00\u6761\u7ebf\u6bb5\u662f\u5426\u7a7f\u8fc7\u4efb\u4f55\u4e00\u4e2a\u519c\u573a\nbool valid(int x1, int y1, int x2, int y2) {\n    for (int i = 1; i <= n; ++i) {\n        if (inSegment(i, x1, y1, x2, y2)) return false;\n    }\n    return true;\n}\n\n//\u5224\u65adp1\u548cp2\u70b9\u80fd\u5426\u8fde\u901a\uff0c\u8fde\u901a\u7684\u6761\u4ef6\u662f\u6709\u81f3\u5c11\u4e00\u6761\u6700\u591a\u4e00\u4e2a\u76f4\u89d2\u7684\u8def\u5f84\uff0c\u4e0d\u7ecf\u8fc7\u5176\u4ed6\u519c\u573a\nbool connect(int p1, int p2) {\n    if (x[p1] == x[p2] || y[p1] == y[p2]) {\n        return valid(x[p1], y[p1], x[p2], y[p2]);\n    }\n    if (valid(x[p1], y[p1], x[p2], y[p1]) && valid(x[p2], y[p1], x[p2], y[p2])) return true;\n    return valid(x[p1], y[p1], x[p1], y[p2]) && valid(x[p1], y[p2], x[p2], y[p2]);\n}\n\nint manhattan(int p, int q) {\n    return abs(x[p] - x[q]) + abs(y[p] - y[q]);\n}\n\nvoid dijkstra(int start, int target) {\n    memset(dis, 0x3f, sizeof(dis));\n    memset(vis, 0, sizeof(vis));\n    dis[start] = 0;\n    priority_queue<Node> q;\n    q.push(Node(start, 0));\n    while (!q.empty()) {\n        int u = q.top().u;\n        q.pop();\n        if (vis[u]) continue;\n        vis[u] = 1;\n        for (int i = 0; i < adj[u].size(); ++i) {\n            int v = adj[u][i].v;\n            if (v <= n && v != target) continue;\n            int w = adj[u][i].w;\n            if (dis[v] > dis[u] + w) {\n                dis[v] = dis[u] + w;\n                q.push(Node(v, dis[v]));\n            }\n        }\n    }\n}\n\nint main() {\n    //\u5148\u8f93\u5165\u6bcf\u4e2a\u70b9\u7684\u6570\u636e\n    cin >> n;\n    for (int i = 1; i <= n; ++i) {\n        cin >> x[i] >> y[i];\n        dict[Point(x[i], y[i])] = i;\n    }\n    nn = n;\n    //\u628a\u6bcf\u4e2a\u70b9\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u70b9\u4e5f\u52a0\u8fdb\u6765\uff0c\u91cd\u590d\u7684\u5c31\u4e0d\u8981\u4e86\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 0; j < 4; ++j) {\n            int xx = x[i] + dx[j];\n            int yy = y[i] + dy[j];\n            Point p = Point(xx, yy);\n            if (dict.count(p) == 0) {\n                ++nn;\n                x[nn] = xx;\n                y[nn] = yy;\n                dict[p] = nn;\n            }\n            int id = dict[p];\n            adj[i].push_back(Edge(id, 1));\n            adj[id].push_back(Edge(i, 1));\n        }\n    }\n    //\u5efa\u8fb9\n    for (int i = n + 1; i <= nn; ++i) {\n        for (int j = i + 1; j <= nn; ++j) {\n            if (connect(i, j)) {\n                int d = manhattan(i, j);\n                adj[i].push_back(Edge(j, d));\n                adj[j].push_back(Edge(i, d));\n            }\n        }\n    }\n    for (int i = 1; i <= n; ++i) {\n        int target = i + 1;\n        if (i == n) target = 1;\n        dijkstra(i, target);\n        if (dis[target] == 0x3f3f3f3f) {\n            cout << -1 << endl;\n            return 0;\n        }\n        ans += dis[target];\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n",
        "postTime": 1583480001,
        "uid": 43206,
        "name": "\u6ce5\u571f\u7b28\u7b28",
        "ccfLevel": 0,
        "title": "P3039 [USACO12JAN]Delivery Route S\u9898\u89e3"
    },
    {
        "content": "usaco\u82f1\u6587\u9898\u89e3\u94fe\u63a5\uff1a<http://www.usaco.org/current/data/sol\\_delivery.html>\n\n\u8868\u793a\u770b\u4e86\u9898\u89e3\u548c\u7a0b\u5e8f\u597d\u4e45\u624d\u770b\u61c2\u3002\u3002\u3002\u3002\n\n\u601d\u8def\u5927\u6982\u662f\u8fd9\u6837\u7684\uff0c\u6211\u4eec\u628a\u539f\u6765\u7684\u4e00\u4e2a\u70b9\u62c6\u5206\u6210\u4e94\u4e2a\u70b9\uff0c\u5206\u522b\u5728\u5b83\u7684\u4e0a\u4e0b\u5de6\u53f3\uff0c\u4e5f\u5efa\u7acb\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u91cd\u65b0\u6784\u56fe\uff0c\u57285n\u4e2a\u70b9\u4e2d\u4e00\u4e00\u5224\u65ad\u662f\u5426\u80fd\u5230\u8fbe\uff0c\u5982\u4f55\u5224\u65ad\u5462\uff1f\u6211\u4eec\u770b\u770b\u4e24\u4e2a\u70b9\u95f4\u80fd\u4e0d\u80fd\u6784\u6210\u4e00\u6761\u76f4\u89d2\u8def\u5f84\uff0c\u5373\u8fd9\u6761\u8def\u5f84\u53ea\u80fd\u8f6c\u4e00\u6b21\u5f2f\uff0c\u5982\u679c\u53ef\u4ee5\u5c31\u628a\u8fd9\u4e24\u4e2a\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u7136\u540e\u7528\u56fe\u505adijkstra\uff0c\u5f97\u51fa\u6211\u4eec\u8981\u6c42\u7684\u4e24\u70b9\u95f4\u7684\u80fd\u5230\u8fbe\u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u4e48\u505a \uff1f\uff1f\n\n ![](https://cdn.luogu.com.cn/upload/pic/4528.png) \n\n\uff08\u56fe\u4e2d\u9ed1\u5708\u4ee3\u8868\u539f\u672c\u7684\u70b9\uff0c\u7ea2\u70b9\u4ee3\u8868\u6269\u5c55\u540e\u7684\u70b9\uff0c\u7eff\u7ebf\u4ee3\u8868\u539f\u672c\u6ca1\u6709\u7ea2\u70b9\u524d\u8d70\u7684\u8def\u7ebf\uff0c\u9ec4\u7ebf\u4ee3\u8868\u6269\u5c55\u70b9\u540e\u7684\u8def\u7ebf\uff09\n\n\u5982\u56fe\u6240\u793a\u6211\u4eec\u53d1\u73b0\u6269\u5c55\u7ea2\u70b9\u540e\u4e24\u70b9\u95f4\u4e4b\u95f4\u8fde\u63a5\u7684\u8def\u5f84\u5982\u679c\u5b58\u5728\u8981\u4e48\u662f\u76f4\u7ebf\uff0c\u8981\u4e48\u53ea\u5b58\u5728\u4e00\u4e2a\u76f4\u89d2\uff0c\u6269\u5c55\u70b9\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u51cf\u5c11\u8def\u5f84\u7684\u5f2f\u5f2f\u66f2\u66f2\u7a0b\u5ea6\uff0c\u66f4\u597d\u505a\u3002\u4e14\u56fe\u753b\u591a\u4e86\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u4e24\u4e2a\u70b9\u5305\u62ec\u4ed6\u4eec\u7684\u6269\u5c55\u70b9\u95f4\u90fd\u4e0d\u5b58\u5728\u76f4\u89d2\u8def\u5f84\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u662f\u4e0d\u8054\u901a\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u628a\u539f\u95ee\u9898\u53d8\u6210\u4e86\u91cd\u6784\u56fe\u540e\uff0c\u6c42\u4e00\u6761\u7531\u591a\u6761\u4e24\u70b9\u95f4\uff08\u8fd9\u4e24\u70b9\u4e92\u76f8\u53ef\u4ee5\u5230\u8fbe\uff0c\u5373\u76f4\u89d2\u8def\u5f84\u4e0a\u4e0d\u5b58\u5728\u539f\u95ee\u9898\u4e2d\u7684\u70b9\uff09\u7684\u76f4\u89d2\u8def\u5f84\u6784\u6210\u7684\u6700\u77ed\u8def\u5f84\uff1b\n\n\u6211\u77e5\u9053\u8bb2\u7684\u5f88\u6a21\u7cca\uff0c\u6240\u4ee5\u5177\u4f53\u7684\u8bdd\u8fd8\u662f\u7a0b\u5e8f\u91cc\u9762\u5199\u5427\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nstruct ding{\n    int x,y;\n}p[600];\nstruct bian{\n    int to,next;\n}edge[300000];\nding f2[600],f[600];\nint n,h[5]={0,-1,1,0,0},l[5]={0,0,0,1,-1};\nint indx[50000];\nint num=0,cnt=0,head[10000],dis[10000];\nbool vis[10000];\nbool check3(int x1,int y1,int x2,int y2,int x3,int y3)\n{\n//\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u5c31\u628a\u76f4\u89d2\u8def\u5f84\u62c6\u6210\u4e24\u6761\u6765\u770b\n  if (x2==x3) return ((x1==x2)&&(y1>min(y2,y3))&&(y1<max(y2,y3)));\n  else return ((y1==y2)&&(x1>min(x2,x3))&&(x1<max(x2,x3)));\n}\nbool check2(ding tot,int a,int b)\n{\n  bool fg=true;\n  for (int i=1;i<=n;i++) if ((tot.x==f[i].x)&&(tot.y==f[i].y)) {fg=false;break;}//\u6211\u4eec\u8981\u4fdd\u8bc1\u76f4\u89d2\u4e0a\u6ca1\u6709\u70b9\n  fg=fg||(f2[a].x==f2[b].x)||(f2[a].y==f2[b].y);\n//\u5f53\u7136\u5982\u679c\u4e24\u4e2a\u70b9\u539f\u672c\u5c31\u5728\u540c\u4e00\u5217\u6216\u540c\u4e00\u884c\u7684\u8bdd\uff0c\u90a3\u5c31\u4e0d\u5b58\u5728\u76f4\u89d2\u4e86\u3002\u3002\u3002 \n  for (int i=1;i<=n;i++)\n  if (check3(f[i].x,f[i].y,f2[a].x,f2[a].y,tot.x,tot.y)||check3(f[i].x,f[i].y,f2[b].x,f2[b].y,tot.x,tot.y))\n//\u68c0\u67e5\u679a\u4e3e\u7684\u8fd9\u6761\u76f4\u89d2\u8def\u5f84\u4e0a\u6709\u6ca1\u6709\u70b9\uff0c\u5982\u679c\u6709\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u7981\u6b62\u901a\u884c\n  {fg=false; break;} \n  if (fg) return true;\n  return false;\n}\nbool check1(int a,int b)\n{\n//\u4e00\u822c\u60c5\u51b5\u4e0b\u4e24\u70b9\u95f4\u7684\u7684\u76f4\u89d2\u8def\u5f84\u6709\u4e24\u6761\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u5206\u7c7b\u8ba8\u8bba\n  ding tot; tot.x=f2[a].x; tot.y=f2[b].y; \n  if (check2(tot,a,b)) return true;\n   tot.x=f2[b].x; tot.y=f2[a].y; \n  if (check2(tot,a,b)) return true;\n  return false;\n}\nvoid add(int u,int v)\n{\n  edge[++num].to=v;\n  edge[num].next=head[u];\n  head[u]=num;\n}\nint calc(int a,int b){return (abs(f2[a].x-f2[b].x)+abs(f2[a].y-f2[b].y));} \n//\u8ba1\u7b97\u4e24\u70b9\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\nint dijkstra(int a,int b)\n{\n  for (int i=1;i<=cnt;i++) {dis[i]=2100000000; vis[i]=false;}\n//\u8d4b\u521d\u503c\n  for (int i=1;i<=n;i++) if ((indx[i]!=b)&&(indx[i]!=a)) vis[indx[i]]=true;\n//\u9664\u4e86\u8d77\u70b9\u4e0e\u7ec8\u70b9\u5916\uff0c\u5176\u4ed6\u539f\u672c\u5c31\u5b58\u5728\u7684\u70b9\u662f\u4e0d\u80fd\u7528\u4e8e\u66f4\u65b0\u6700\u77ed\u8def\u5f84\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u80fd\u88ab\u7ecf\u8fc7\u4e00\u6b21\n  dis[a]=0;\n  for (int i=1;i<=cnt;i++)\n  {\n      int now=1;\n      for (int j=1;j<=cnt;j++) if (((dis[j]<dis[now])||(vis[now]))&&(!vis[j])) now=j;\n//\u5982\u679c\u8bf4\u5df2\u7ecf\u6ca1\u6709\u6ca1\u88ab\u66f4\u65b0\u8fc7\u7684\u70b9\uff0c\u6216\u8005\u70b9\u4e0e\u70b9\u4e4b\u95f4\u5df2\u7ecf\u6ca1\u8def\u4e86\uff0c\u8fd4\u56de-1\uff1b\n      if ((vis[now])||(dis[now]==2100000000)) return -1;\n      if (now==b) return dis[b];\n//\u5982\u679c\u7ec8\u70b9\u6210\u4e86\u76ee\u524d\u79bb\u8d77\u70b9\u6700\u8fd1\u7684\u672a\u66f4\u65b0\u8fc7\u5176\u4ed6\u70b9\u7684\u70b9\uff0c\u90a3\u4e48\u8bf4\u660e\u5269\u4e0b\u7684\u70b9\u5df2\u7ecf\u6ca1\u529e\u6cd5\u518d\u66f4\u65b0\u8fd9\u6761\u6700\u77ed\u8def\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de\u7b54\u6848\n      vis[now]=true;\n      for (int j=head[now];j;j=edge[j].next)\n      {\n        int y1=edge[j].to;\n      if (!vis[y1]) dis[y1]=min(dis[y1],dis[now]+calc(now,y1));\n    }\n  }\n  return -1;\n}\nint main()\n{\n  scanf(\"%d\",&n);\n  for (int i=1;i<=n;i++) \n  {\n    scanf(\"%d%d\",&p[i].x,&p[i].y);\n    ding tot; tot.x=p[i].x; tot.y=p[i].y;\n    f[i]=tot;\n//\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u50a8\u5b58\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u3002\u3002\u3002p[i]\u6570\u7ec4\u662f\u6ca1\u7528\u7684\u3002\u3002\u3002\n  }\n  for (int i=1;i<=n;i++)\n  {\n    f2[++cnt]=f[i]; indx[i]=cnt;//\u50a8\u5b58\u6269\u5c55\u540e\u7684\u70b9\uff0c\u5e76\u8bb0\u5f55\u539f\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\n    for (int j=1;j<=4;j++)\n    {\n     bool fg=true; \n     ding tot;tot.x=p[i].x+h[j]; tot.y=p[i].y+l[j];\n//\u679a\u4e3e\u6269\u5c55\u70b9\n     for (int k=1;k<=n;k++) if ((tot.x==f[k].x)&&(tot.y==f[k].y)) {fg=false;break;}\n//\u4fdd\u8bc1\u539f\u672c\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u662f\u6ca1\u6709\u70b9\u7684\n     if (fg) f2[++cnt]=tot;\n    }\n  } \n  for (int i=1;i<=cnt;i++)\n   for (int j=i+1;j<=cnt;j++)\n   if (check1(i,j)) {add(i,j);add(j,i);}\n//\u68c0\u67e5\u8fd9\u4e24\u70b9\u95f4\u662f\u5426\u80fd\u5230\u8fbe\uff0c\u5982\u679c\u53ef\u4ee5\uff0c\u90a3\u4e48\u5c31\u7528\u94fe\u5f0f\u524d\u5411\u661f\u8bb0\u5f55\u4e0b\u6765\uff08\u597d\u50cf\u53ef\u4ee5\u4e0d\u7528\uff0c\u4f46\u662f\u6211\u5f53\u65f6\u4ee5\u4e3a\u3002\u3002\uff09\n   int ans=0;\n  for (int i=1;i<=n;i++)\n  {\n      int sum=0;\n      if (i!=n) sum=dijkstra(indx[i],indx[i+1]);\n      else sum=dijkstra(indx[i],indx[1]); \n//\u8ba1\u7b97\u5b83\u4e0e\u5b83\u8981\u5230\u8fbe\u7684\u70b9\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\n      if (sum==-1) {cout<<\"-1\"<<endl; return 0;}\n//\u5982\u679c\u8fd4\u56de-1\uff0c\u8bf4\u660e\u4e24\u70b9\u95f4\u65e0\u6cd5\u5230\u8fbe\n      else ans+=sum;\n//\u5426\u5219\u8bb0\u5f55\n  }\n  printf(\"%d\\n\",ans);\n  return 0;\n}\n```",
        "postTime": 1489127236,
        "uid": 21621,
        "name": "nihanchu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3039 \u3010[USACO12JAN]\u914d\u9001\u8def\u7ebfDelivery Route\u3011"
    },
    {
        "content": "## \u9898\u610f\n\u5728\u5e73\u9762\u4e0a\u6709 $N$ \u4e2a\u70b9\uff0c\u6bcf\u6b21\u53ea\u80fd\u671d\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u4e00\u683c\uff0c\u6c42\u4ece $1$ \u53f7\u70b9\u51fa\u53d1\u6309\u987a\u5e8f\u7ecf\u8fc7\u6bcf\u4e2a\u70b9\u521a\u597d\u4e00\u6b21\uff0c\u6700\u540e\u56de\u5230 $1$ \u53f7\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002\n## \u601d\u8def\n\u6309\u7167\u89c4\u5219\uff0c\u4ece\u5e73\u9762\u4e0a\u4e00\u4e2a\u70b9\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u5c31\u662f\u5b83\u4eec\u4e4b\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u3002\u5982\u679c\u4e24\u4e2a\u70b9\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\uff0c\u5219\u6700\u77ed\u8def\u7ebf\u53ea\u6709\u4e00\u79cd\u8d70\u6cd5\uff1b\u5426\u5219\u6700\u77ed\u8def\u7ebf\u53ef\u4ee5\u6709\u591a\u79cd\u8d70\u6cd5\uff0c\u5176\u4e2d\u6709\u4e24\u79cd\u8d70\u6cd5\u53ea\u9700\u8981\u62d0\u5f2f\u4e00\u6b21\u3002\n\n\u7531\u4e8e\u9898\u76ee\u4e2d\u8981\u6c42\u6bcf\u4e2a\u70b9\u5fc5\u987b\u6309\u987a\u5e8f\u7ecf\u8fc7\u521a\u597d\u4e00\u6b21\uff0c\u6240\u4ee5\u5728\u8def\u5f84\u4e2d\u76f8\u90bb\u4e24\u4e2a\u70b9\u4e4b\u95f4\u79fb\u52a8\u65f6\uff0c\u4e0d\u80fd\u7ecf\u8fc7\u5176\u4ed6\u70b9\uff0c\u7531\u6b64\u53ef\u80fd\u5bfc\u81f4\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u53d8\u957f\u3002\u7531\u4e8e\u5750\u6807\u7684\u8303\u56f4\u8f83\u5927\uff0c\u65e0\u6cd5\u7528\u641c\u7d22\u7684\u65b9\u5f0f\u6c42\u51fa\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u53ea\u80fd\u8003\u8651\u5bf9\u6700\u77ed\u8def\u5f84\u8fdb\u884c\u6784\u9020\u3002\n\n\u8003\u8651\u6700\u7b80\u5355\u7684\u60c5\u51b5\uff0c\u6bcf\u6b21\u8d70\u5230\u4e0b\u4e00\u4e2a\u70b9\u65f6\u6700\u591a\u62d0\u5f2f\u4e00\u6b21\uff0c\u5982\u679c\u6b64\u65f6\u4f1a\u7ecf\u8fc7\u5176\u4ed6\u70b9\uff0c\u5219\u53ef\u4ee5\u5bf9\u8def\u5f84\u8fdb\u884c\u5fae\u8c03\uff0c\u4f7f\u5f97\u521a\u597d\u4ece\u8fd9\u4e2a\u70b9\u65c1\u8fb9\u7ecf\u8fc7\uff0c\u5e76\u4ecd\u7136\u4fdd\u6301\u662f\u6700\u77ed\u8def\u5f84\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u70b9\u7684\u56db\u4e2a\u4f4d\u7f6e\u76f8\u90bb\u7684\u683c\u5b50\u5f53\u505a\u8854\u63a5\u70b9\uff0c\u8fd9\u6837\u5728\u6700\u77ed\u8def\u5f84\u4e2d\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u6b21\u6700\u591a\u62d0\u5f2f\u4e00\u6b21\u5c31\u80fd\u5230\u8fbe\u4e0b\u4e00\u4e2a\u70b9\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u68c0\u67e5\u6bcf\u4e00\u5bf9\u70b9\u4e4b\u95f4\u662f\u5426\u53ef\u4ee5\u6700\u591a\u62d0\u5f2f\u2f00\u6b21\u5230\u8fbe\uff0c\u7136\u540e\u6c42\u51fa\u901a\u8fc7\u8854\u63a5\u70b9\uff0c\u8def\u5f84\u4e2d\u6bcf\u5bf9\u76f8\u90bb\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u3002\u8003\u8651\u5230\u70b9\u6570\u5f88\u5c0f\uff0c\u53ef\u4ee5\u91c7\u7528 Floyd \u7b97\u6cd5\u6c42\u89e3\u3002\n\n\u6b64\u5916\uff0c\u539f\u5148\u7684\u70b9\u4e2d\u53ef\u80fd\u6709\u7684\u70b9\u4f4d\u7f6e\u672c\u8eab\u5c31\u76f8\u90bb\uff0c\u6240\u4ee5\u6dfb\u52a0\u8854\u63a5\u70b9\u65f6\u9700\u8981\u6ce8\u610f\uff0c\u4e0d\u80fd\u5c06\u5df2\u6709\u7684\u70b9\u6dfb\u52a0\u4e3a\u8854\u63a5\u70b9\uff0c\u53ef\u4ee5\u91c7\u7528 STL \u4e2d\u7684 `set` \u6765\u5224\u91cd\u3002\n## CODE\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nusing Pii = pair<int, int>;\nconst int kMaxN = 501, kInf = 1e9, kD[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\nset<Pii> s;\nPii p[kMaxN];\nint f[kMaxN][kMaxN], n, m, ans;\nbool C(int i, int j) {\n  bool b0 = 0, b1 = 0;            // \u521d\u59cb\u5316\u4e24\u6761\u8def\u7ebf\n  for (int k = 1; k <= n; k++) {  // \u679a\u4e3e\u4e2d\u95f4\u70b9\n    if (k != i && k != j) {       // \u975e\u8d77\u70b9\u6216\u7ec8\u70b9\n      b0 |= p[k].first == p[i].first && p[k].second >= min(p[i].second, p[j].second) && p[k].second <= max(p[i].second, p[j].second);\n      b0 |= p[k].second == p[j].second && p[k].first >= min(p[i].first, p[j].first) && p[k].first <= max(p[i].first, p[j].first);\n      b1 |= p[k].second == p[i].second && p[k].first >= min(p[i].first, p[j].first) && p[k].first <= max(p[i].first, p[j].first);\n      b1 |= p[k].first == p[j].first && p[k].second >= min(p[i].second, p[j].second) && p[k].second <= max(p[i].second, p[j].second);\n    }\n  }\n  return !(b0 && b1);\n}\nint main() {\n  cin >> n;\n  for (int i = 1; i <= n; i++) {\n    cin >> p[i].first >> p[i].second;\n    s.insert(p[i]);  // \u52a0\u5165\u96c6\u5408\n  }\n  m = n;\n  for (int i = 1; i <= n; i++) {                                   // \u679a\u4e3e\u70b9\n    for (int j = 0; j < 4; j++) {                                  // \u679a\u4e3e\u65b9\u5411\n      p[m + 1] = {p[i].first + kD[j][0], p[i].second + kD[j][1]};  // \u8ba1\u7b97\u90bb\u70b9\n      if (!s.count(p[m + 1])) {                                    // \u4f4d\u7f6e\u53ef\u7528\n        s.insert(p[++m]);                                          // \u52a0\u5165\u96c6\u5408\n      }\n    }\n  }\n  for (int i = 1; i <= m; i++) {\n    for (int j = 1; j <= m; j++) {                                                               // \u679a\u4e3e\u70b9\u5bf9\n      f[i][j] = C(i, j) ? abs(p[i].first - p[j].first) + abs(p[i].second - p[j].second) : kInf;  // \u8ba1\u7b97\u62d0\u4e00\u6b21\u5f2f\u662f\u5426\u53ef\u8fbe\n    }\n  }\n  for (int k = n + 1; k <= m; k++) {  // \u679a\u4e3e\u4e2d\u95f4\u70b9\n    for (int i = 1; i <= m; i++) {\n      for (int j = 1; j <= m; j++) {                // \u679a\u4e3e\u70b9\u5bf9\n        f[i][j] = min(f[i][j], f[i][k] + f[k][j]);  // \u66f4\u65b0\u8ddd\u79bb\n      }\n    }\n  }\n  ans = f[n][1];                 // \u521d\u59cb\u5316\u7b54\u6848\n  for (int i = 1; i < n; i++) {  // \u7d2f\u52a0\u7b54\u6848\n    ans = min(kInf, ans + f[i][i + 1]);\n  }\n  cout << (ans == kInf ? -1 : ans);\n  return 0;\n}\n```",
        "postTime": 1661334130,
        "uid": 444534,
        "name": "\u54c8\u58eb\u5947\u61a8\u61a8",
        "ccfLevel": 5,
        "title": "P3039 [USACO12JAN]Delivery Route S"
    }
]