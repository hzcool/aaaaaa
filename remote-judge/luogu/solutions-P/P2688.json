[
    {
        "content": "\u7b2c\u4e00\u4e2a\u70b9\u6ca1\u6709\u8be2\u95ee\uff0c\u53ea\u9700\u8981\u5224\u65ad\u521d\u59cb\u68cb\u76d8\u80fd\u5426\u653e\u4e0b\u5c31\u884c\u4e86\u3002\u2014\u2014\u76f4\u63a5\u628a\u6240\u6709ci\\*ti\u52a0\u8d77\u6765\uff0c\u5224\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8en\u5373\u53ef.\n\n\u7b2c2\u5230\u7b2c8\u4e2a\u70b9\uff0c\u53ea\u6709\u4e00\u6b21\u8be2\u95ee\u3002\u8fd9\u4e2a\u8be2\u95ee\u628a\u68cb\u76d8\u5206\u6210\u4e86\u4e24\u6bb5\uff0c\u6211\u4eec\u8003\u8651\u5176\u4e2d\u8f83\u77ed\u7684\u90a3\u90e8\u5206\uff0c\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u80cc\u5305\u95ee\u9898\u2014\u2014\u8981\u5728\u8fd9\u90e8\u5206\u4e2d\u653e\u7f6e\u5c3d\u91cf\u591a\u7684\u7269\u54c1\uff0c\u7a7a\u95f4\u6d6a\u8d39\u5f97\u8d8a\u5c11\u8d8a\u597d\u3002\uff08\u81f3\u4e8e\u5269\u4e0b\u7684\u90a3\u90e8\u5206\uff0c\u76f4\u63a5\u7528\u7269\u54c1\u603b\u4f53\u79ef\u51cf\u53bb\u524d\u9762\u80fd\u591f\u653e\u5165\u7684\u7269\u54c1\u4f53\u79ef\uff0c\u4e0e\u5269\u4f59\u7684\u7a7a\u95f4\u8fdb\u884c\u6bd4\u8f83\u5373\u53ef\u3002\uff09\u6bcf\u4e2a\u6218\u8230\u7684\u4ef7\u503c\u5373\u4e3a\u5b83\u7684\u957f\u5ea6\uff0c\u76f4\u63a5\u591a\u91cd\u80cc\u5305\u5373\u53ef\u3002\u7b2c2\u30013\u4e2a\u70b9\u76f4\u63a5\u662f01\u80cc\u5305\uff0c\u800c\u540e\u9762\u7684\u70b9\u7531\u4e8ec\\*n\u8f83\u5927\uff0c\u6734\u7d20\u7684\u80cc\u5305\u4f1aT\uff0c\u9700\u8981\u7528\u5355\u8c03\u961f\u5217\u4f18\u5316\u5f97\u5230O(cn)\u7684\u7b97\u6cd5.\n\n\u7b2c9\u523014\u4e2a\u70b9\uff0c\u53ea\u6709\u4e00\u79cd\u7269\u54c1\u3002\u6211\u4eec\u4e8c\u5206\u7b54\u6848\uff0c\u90a3\u4e48\u8be2\u95ee\u5e8f\u5217\u628a\u68cb\u76d8\u5206\u6210\u4e86\u591a\u4e2a\u90e8\u5206\u3002\u5047\u8bbe\u67d0\u4e00\u6bb5\u7684\u957f\u5ea6\u4e3aL\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u653e\u4e0bL/size\u4e2a\u7269\u54c1\u3002\u4e8e\u662f\u6211\u4eec\u626b\u4e00\u904d\u5c31\u53ef\u4ee5\u7edf\u8ba1\u6700\u591a\u653e\u7f6e\u7684\u7269\u54c1\u6570\u91cf\uff0c\u7136\u540e\u518d\u6839\u636e\u8981\u6c42\u4e8c\u5206\u4e0b\u53bb\u5373\u53ef\u3002\n\n\u7b2c15\u523020\u4e2a\u70b9\uff0c\u6709\u4e24\u79cd\u7269\u54c1\u3002\u5728\u4e8c\u5206\u7684\u57fa\u7840\u4e0a\uff08\u8bbe\u5206\u4e3a\u4e86mid\u6bb5\uff09\uff0c\u6211\u4eec\u7528f[i][j]\u8868\u793a\u8003\u8651\u5230\u524di\u6bb5\uff0c\u6070\u597d\u653e\u7f6ej\u79cd1\u53f7\u7269\u54c1\u7684\u524d\u63d0\u4e0b\uff0c\u53ef\u4ee5\u653e\u7f6e\u7684\u6700\u591a2\u53f7\u7269\u54c1\u7684\u6570\u91cf\u3002\u8bbe\u7b2ci\u6bb5\u7684\u957f\u5ea6\u4e3aLi\uff0c\u8f6c\u79fb\u65b9\u7a0b\u4e3af[i][j]=max(f[i-1][j-k]+(Li-k\\*size1)/size2)\uff0c\u5176\u4e2d0<=k<=j\u4e14k\\*size1<=Li\u3002\u90a3\u4e48f[mid][num1]\u5c31\u662f\u5f53\u524d\u72b6\u6001\u53ef\u4ee5\u653e\u7f6e\u7684\u6700\u591a2\u53f7\u7269\u54c1\u7684\u6570\u91cf\uff0c\u4e0e\u8981\u6c42\u8fdb\u884c\u6bd4\u8f83\uff0c\u518d\u4e8c\u5206\u5373\u53ef\u3002\u770b\u4e0a\u53bb\u8fd9\u4e2a\u65b9\u7a0b\u662fO(n^3)\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u6709k<=Li\uff0c\u56e0\u6b64\u5bf9\u4e8e\u786e\u5b9a\u7684j\uff0c\u8003\u8651\u6240\u6709\u7684i\uff0c\u603b\u5171\u7684\u51b3\u7b56\u6570\u91cf\u4e0d\u4f1a\u8d85\u8fc7sigma(Li)\uff0c\u5373\u4e0d\u4f1a\u8d85\u8fc7O(n)\u4e2a\u3002\u6240\u4ee5DP\u7684\u590d\u6742\u5ea6\u4e3aO(n^2)\uff0c\u6574\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2logq)\uff0c\u4f46\u8fdc\u8fdc\u8fbe\u4e0d\u5230\u8fd9\u4e2a\u754c\uff0c\u7a0d\u5fae\u4f18\u5316\u4e00\u4e0b\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n\n\n\n\n\u4ee3\u7801\uff08c++\uff09\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define maxn 500010\nint n,c,q,siz[maxn],num[maxn],od[maxn],que[maxn];\nint f[maxn],sta[maxn],sta2[maxn],len[maxn],dp[2][4010];\nbool cmp(const int &p,const int &q)\n{\n    return que[p]<que[q];\n}\nint main()\n{\n    int t; scanf(\"%d\",&t);\n    while(t--)\n    {\n        scanf(\"%d%d%d\",&n,&c,&q);\n        memset(f,0,sizeof(f));\n        long long totsum=0;\n        for(int i=1; i<=c; i++)\n        {\n            scanf(\"%d%d\",&siz[i],&num[i]);\n            totsum+=1ll*siz[i]*num[i];\n        }\n        for(int i=1; i<=q; i++)\n        {\n            od[i]=i;\n            scanf(\"%d\",&que[i]);\n        }\n        if(totsum>n) {printf(\"0\\n\"); continue;}\n        if(q==0)\n        {\n            printf(\"-1\\n\");\n        }\n        else if(q==1)\n        {\n            int now=min(que[1]-1,n-que[1]);\n            for(int i=1; i<=c; i++)\n            {\n                for(int j=0; j<siz[i]; j++)                 {\n                    int ta=1,fr=1;\n                    sta[1]=f[j]; sta2[1]=0;                    for(int k=1,e=siz[i]; e+j<=now; k++,e+=siz[i])                    {\n                        int curf=f[e+j]-e;\n                        while(ta<=fr && sta[fr]<=curf) fr--;\n                        sta[++fr]=curf; sta2[fr]=k;\n                        if(sta2[fr]-sta2[ta]>num[i]) ta++;\n                        f[e+j]=sta[ta]+e;\n                    }\n                }\n            }\n            if(f[now]+max(que[1]-1,n-que[1])>=totsum)\n                printf(\"-1\\n\");\n            else printf(\"1\\n\");\n        }\n        else if(c==1)\n        {\n            sort(od+1,od+1+q,cmp);\n            int l=0,r=q+1,mid=(l+r)>>1;\n            while(l<r)\n            {\n                int ans=0,lst=0;\n                for(int i=1; i<=q; i++)\n                    if(od[i]<=mid)\n                    {\n                        ans+=(que[od[i]]-lst-1)/siz[1]*siz[1];\n                        lst=que[od[i]];\n                    }\n                ans+=(n-lst)/siz[1]*siz[1];\n                if(ans>=totsum) l=mid+1;\n                else r=mid;\n                mid=(l+r)>>1;\n            }\n            if(mid!=q+1) printf(\"%d\\n\",mid);\n            else printf(\"-1\\n\");\n        }\n        else if(c==2)\n        {\n            sort(od+1,od+1+q,cmp);\n            int l=0,r=q+1,mid=(l+r)>>1;\n            while(l<r)\n            {\n                int tot=0,lst=0;\n                for(int i=1; i<=q; i++)\n                    if(od[i]<=mid)\n                    {\n                        len[++tot]=que[od[i]]-lst-1;\n                        lst=que[od[i]];\n                    }\n                len[++tot]=n-lst;\n                memset(dp,-0x3f,sizeof(dp));\n                                dp[0][0]=0;\n                for(int i=1; i<=tot; i++)\n                    for(int j=0; j<=num[1]; j++)\n                    {\n                        for(int k=0,e=0; k<=j && e<=len[i]; k++,e+=siz[1]) //how many 1st items\n                            dp[i&1][j]=max(dp[i&1][j],dp[(i&1)^1][j-k]+(len[i]-e)/siz[2]);\n                    }\n                                if(dp[tot&1][num[1]]>=num[2]) l=mid+1;\n                else r=mid;\n                mid=(l+r)>>1;\n            }\n            if(mid!=q+1) printf(\"%d\\n\",mid);\n            else printf(\"-1\\n\");\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1502007952,
        "uid": 36560,
        "name": "QSWei",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2688 \u3010\u5927\u6d77\u6218\u3011"
    }
]