[
    {
        "content": "\u697c\u4e0b\u8bf4\u7684\u5f88\u5bf9\u554a\uff0c\u8fd9\u9898\u5c31\u662f\u4e00\u4e2a\u5e26\u6743\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u53ea\u4e0d\u8fc7\u600e\u4e48\u6ca1\u4eba\u7528KM\u5199\u5462\uff1f\u6240\u4ee5\u6211\u5c31\u5728\u6b64\u732e\u4e11\uff0c\u5949\u4e0a\u4e00\u7bc7KM\u7684\u9898\u89e3\u3002\n\n\u6211\u4eec\u628a\u7537\u5b50\u653e\u5230\u5de6\u8fb9\uff0c\u5973\u5b50\u653e\u5230\u53f3\u8fb9\uff0c\u4e3a\u8fd9\u4e24\u4e2a\u4e4b\u95f4\u5efa\u4e00\u6761\u8fb9\u6743\u4e3a\u7f18\u5206\u7684\u8fb9\uff0c\u7136\u540e\u8dd1KM\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5751\u70b9\u561b\u3002\u3002\u3002\n\n\u2460\u5b57\u7b26\u4e32\u5927\u5c0f\u5199\u4e0d\u654f\u611f->\u630240\u5206\n\n\u2461\u6ca1\u8bf4\u7684\u4eba\u4e4b\u95f4\u7f18\u5206\u4e3a1->\u630240\u5206\n\n\u2462\u4e0d\u80fd\u8fde\u7684\u4eba\u4e4b\u95f4\u4e4b\u95f4\u7f18\u5206\u8981\u8bbe\u4e3a\u8d1f\u65e0\u7a77->\u630210\u5206\n\n\u5c24\u5176\u662f\u8fd9\u4e2a\u2462\uff0c\u8ddf\u6211\u540c\u673a\u623f\u7684dalao\u5199\u7684\u8d39\u7528\u6d41\u76f4\u63a5\u65e0\u89c6\u7b2c\u4e09\u70b9\uff0c\u6211\u95ee\u7684\u65f6\u5019\u4ed6\u8fd8\u4e00\u8138mengbi\uff0c\u53ef\u80fd\u662f\u8d39\u7528\u6d41\u81ea\u5df1\u5c31\u80fd\u5224\u8fc7\u53bb\u5427\uff0c\u53cd\u6b63KM\u4e0d\u884c\u3002\u5e76\u4e14\u5b83\u7ed9\u7684\u7279\u522b\u7f18\u5206\u6709\u5f88\u591a\u662f\u8d1f\u7684\u3002\u81f3\u4e8e\u8fd9\u4e9b\u4e3a\u4ec0\u4e48\u662f\u6302\u600e\u4e48\u591a\u5206\uff0cemmmmm~~~\n\n\u5e76\u4e14\u8fd9\u9053\u9898\u65e2\u7136\u80fd\u7528KM\u505a\uff0c\u5c31\u8bf4\u660e\u5b83\u6709\u4e00\u4e2a\u9690\u5f0f\u7684\u6761\u4ef6\u2014\u2014\u6709\u5b8c\u5907\u5339\u914d\uff0c\u8fd9\u70b9\u5728\u9898\u76ee\u4e2d\u5e76\u6ca1\u6709\u8bf4\n\n\u4e0b\u9762\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0bKM\u7684\u7b97\u6cd5\u601d\u60f3\uff0c\u5f53\u7136\u662f\u6211\u4ece\u6211\u7684\u53e6\u4e00\u7bc7\u9898\u89e3\u590d\u5236\u7684\uff0c\u4e0d\u60f3\u770b\u7684\u53ef\u4ee5\u8df3\u8fc7\u53bb\u76f4\u63a5\u770b\u4ee3\u7801\u6ce8\u91ca\u4e86\n\n\u9996\u5148\uff0c\u4ecb\u7ecd\u4e00\u4e2a\u91cd\u8981\u7684\u5b9a\u7406\uff1a\n\n\u6211\u4eec\u5b9a\u4e49**\u9876\u6807**\uff1a\n\nlx[i],ly[j],i\u2208\u5de6\u8fb9\uff0cj\u2208\u53f3\u8fb9\uff0c\u5e76\u4e14\u5bf9\u4e8e\u4efb\u610fw[i][j],\u90fd\u6709lx[i]+ly[j]>=w[i][j]\uff1b\n\n\u6211\u4eec\u518d\u4ece\u539f\u56fe\u4e2d\u62bd\u51falx[i]+ly[j]=w[i][j]\u7684\u8fb9\u5efa\u7acb\u4e00\u4e2a**\u76f8\u7b49\u5b50\u56fe**\uff0c\u5982\u679c\u76f8\u7b49\u5b50\u56fe\u6709**\u5b8c\u7f8e\u5339\u914d**\uff08\u5c31\u662f\u65e0\u8fb9\u6743\uff0c\u5168\u5339\u914d\u7684\u90a3\u4e2a\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b8c\u7f8e\u5339\u914d\u5c31\u662f\u539f\u56fe\u7684**\u6700\u4f73\u5b8c\u7f8e\u5339\u914d**\u3002\n\n\u8fd9\u4e2a\u5b9a\u7406\u7684\u8bc1\u660e\u4e5f\u5341\u5206\u7b80\u5355\uff0c\u8fd9\u91cc\u6211\u5c31\u4e0d\u8bc1\u660e\u4e86\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u884c\u767e\u5ea6\u3002\n\n\u6709\u4e86\u8fd9\u4e2a\u5b9a\u7406\u6211\u4eec\u5c31\u53ef\u4ee5\u7528KM(\u5308\u7259\u5229\u7b97\u6cd5)\u6c42\u89e3\u6b64\u9898\u4e86\u3002\n\n\u5177\u4f53\u7684\u65b9\u6cd5\u5c31\u662f\uff0c\u4e0d\u65ad\u7684\u4fee\u6539\u9876\u6807\u8ba9\u5b83\u6709\u4e00\u4e2a\u5408\u9002\u7684\u503c\uff0c\u4f7f\u5f97\u76f8\u7b49\u5b50\u56fe\u6709\u5b8c\u7f8e\u5339\u914d\u3002\u5b9e\u73b0\u8d77\u6765\u5c31\u662f\u5148\u5f00\u5fc3\u5730\u8bbe\u4e00\u4e2a\u9876\u6807\u521d\u503c\uff08\u4e00\u822c\u662fly=0,lx=max(w[i][j])\uff09\uff0c\u7136\u540e\u5f00\u59cbKM\uff0c\u5982\u679c\u627e\u5230\u4e86\u4e00\u6761\u589e\u5e7f\u8def\uff0c\u5c31\u627e\u5230\u4e86\u5427\uff1b\u5982\u679c\u6ca1\u6709\uff0c\u90a3\u5b83\u4e00\u5b9a\u662f\u5c1d\u8bd5\u8bbf\u95ee\u4e86\u4e00\u4e9b\u5de6\u8fb9\u7684\u70b9\uff08\u6bd4\u5982q\u4e2a\uff09\u6211\u4eec\u628a\u5b83\u4eec\u52a0\u5165**S**,\u7136\u540e\u8bbf\u95ee\u4e86q-1\u4e2a\u53f3\u8fb9\u7684\u70b9,\u6211\u4eec\u628a\u5b83\u4eec\u52a0\u5165**T**\uff08S,T\u662f\u4e24\u4e2a\u96c6\u5408\uff09\u3002\n\n\u7136\u540e\u628alx[i],i\u2208S\u90fd\u51cf\u53bb\u4e00\u4e2a**\u677e\u5f1b\u91cfa**\uff0cly[j],j\u2208T\uff0c\u90fd\u52a0\u4e0a\u4e00\u4e2aa\uff0c\u8fd9\u6837\u5c31\u4f1a\u6709\u4e00\u4e9b\u4e0d\u5728T\u4e2d\u7684\u70b9\u548c\u5728S\u4e2d\u7684\u70b9\u4e4b\u95f4\u7684\u8fb9\u80fd\u591f\u8fdb\u5165\u76f8\u7b49\u5b50\u56fe\uff0c\u540c\u65f6\u5df2\u7ecf\u5728\u76f8\u7b49\u5b50\u56fe\u91cc\u7684\u8fb9\u4e0d\u51fa\u53bb\uff0c\u7ee7\u7eed\u8fdb\u884cKM\u76f4\u5230\u5339\u914d\u4e86\u8fd9\u4e2a\u70b9\u4e3a\u6b62\u3002\n\n\u81f3\u4e8e\u627ea\u7684\u65b9\u6cd5\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u8fdb\u6765\u7684\u8fb9\u662f\u80fd\u8fdb\u6765\u7684\u4e4b\u4e2d\u6700\u5927\u7684\uff0c\u540c\u65f6\u53c8\u6709\u8fb9\u8fdb\u6765\uff0c\n\na=min{lx[i]+ly[j]-w[i][j]|i\u2208S\uff0cj\u2209T}\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5c31n^2\u66b4\u529b\u679a\u4e3e\u5c31\u597d\u4e86\uff0c\u56e0\u6b64\u6574\u4e2a\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3an^4\uff0c\u5f53\u7136\u8fd8\u6709\u4e00\u4e2an^3\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u4e0d\u8fc7n^4\u5c31\u80fd0ms\u79d2\u6740\u6b64\u9898\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u4e0d\u7528\u4e86\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#include<string>\n#include<queue>\n#include<map>\n#include<vector>\n#include<ctime>\n\n#define ll long long\n#define R register\n#define IL inline\n#define Rf(a,b,c) for(R int (a)=(b);(a)<=(c);++(a))\n#define Tf(a,b,c) for(R int (a)=(b);(a)>=(c);--(a))\n#define MP make_pair\n#define PA pair<int,int>\n#define MES(a,b) memset((a),(b),sizeof((a)))\n#define MEC(a,b) memcpy((a),(b),sizeof((b)))\n#define D double\n\nusing namespace std;\n\nconst int N=50;\nconst D eps=1e-9;\n\nint n,lx[N],ly[N],link[N],w[N][N],ans;\nbool S[N],T[N];\nD k;\n\nstring s1,s2;\nmap <string,int> idm,idw;//\u4eba\u7684\u7f16\u53f7\u5c31\u5f00map\u641e\u4e00\u641e\u5c31\u884c\u4e86\n\nstruct node {\n    int x,y;\n}man[N],wom[N];\n\nIL int read() {\n    int x=0,f=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x*=10;x+=(ch-'0');ch=getchar();}\n    return x*f;\n}\nIL void write(int x) {\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) write(x/10);\n    putchar(x%10+'0');\n}\n\nbool dfs(int x) {//\u8fd9\u5c31\u662f\u4e00\u822c\u7684\u4e8c\u5206\u56fe\u5339\u914d\n    S[x]=true;//\u628a\u5de6\u8fb9\u7684\u70b9\u90fd\u52a0\u5165S\n    Rf(i,1,n) if(lx[x]+ly[i]==w[x][i]&&!T[i]) {\n    //\u5224\u65ad\u8fd9\u6761\u8fb9\u662f\u5426\u5728\u76f8\u7b49\u5b50\u56fe\u91cc\uff0c\u4e0d\u8981\u518d\u5efa\u56fe\u4e86\n        T[i]=true;//\u53f3\u8fb9\u7684\u70b9\u52a0\u5165T\n        if(!link[i]||dfs(link[i])) {\n            link[i]=x;\n            return true;\n        }\n    }\n    return false;\n}\n\nIL void update() {//n^2\u66b4\u529b\u627ea\uff0c\u5e76\u4fee\u6539\n    R int a=1<<30;\n    Rf(i,1,n) if(S[i]) \n        Rf(j,1,n) if(!T[j]) \n            a=min(a,lx[i]+ly[j]-w[i][j]); \n    Rf(i,1,n) {\n        if(S[i]) lx[i]-=a;\n        if(T[i]) ly[i]+=a;\n    }\n}\n\nIL void KM() {\n    Rf(i,1,n) {\n        link[i]=lx[i]=ly[i]=0;\n        lx[i]=-1e9;//\u8fd9\u53e5\u8bdd\u597d\u50cf\u53ef\u4ee5\u4e0d\u8981\n        Rf(j,1,n) lx[i]=max(lx[i],w[i][j]);\n    }\n    Rf(i,1,n) while(true) {\n        Rf(j,1,n) S[j]=T[j]=false;\n        if(dfs(i)) break;\n        else update();\n    }\n} \n\nvoid Turn(string &s){//\u628a\u5b57\u7b26\u4e32\u90fd\u8f6c\u5316\u6210\u5927\u5199\u7684\n    for(string::iterator it=s.begin();it!=s.end();it++)\n        if(*it>='a') *it=*it-'a'+'A';\n}\n\nIL D cal(int i,int j) {//\u7b97\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n    return sqrt(1.0*(man[i].x-wom[j].x)*(man[i].x-wom[j].x)+1.0*(man[i].y-wom[j].y)*(man[i].y-wom[j].y));\n}\n\nsigned main()\n{\n    k=read();n=read();\n    Rf(i,1,n) {//\u5b9a\u5750\u6807\n        R int u=read(),v=read();\n        cin>>s1;\n        Turn(s1);\n        idm[s1]=i;\n        man[i].x=u;man[i].y=v;\n    }\n    Rf(i,1,n) {\n        R int u=read(),v=read();\n        cin>>s1;\n        Turn(s1);\n        idw[s1]=i;\n        wom[i].x=u;wom[i].y=v;\n    }\n    Rf(i,1,n) Rf(j,1,n) w[i][j]=1;//\u666e\u904d\u7f18\u5206\u7684\n    cin>>s1;\n    while(s1!=\"End\") {//\u7279\u522b\u7f18\u5206\u7684\n        cin>>s2;R int val=read();\n        Turn(s1);Turn(s2);\n        if(!idm[s1]) swap(s1,s2);//\u4fdd\u8bc1\u7537\u5728\u524d\n        R int I=idm[s1],J=idw[s2];\n        w[I][J]=val;\n        cin>>s1;\n    }\n    Rf(I,1,n) Rf(J,1,n) {//\u66b4\u529b\u679a\u4e3e\u4e24\u70b9\u662f\u5426\u53ef\u8fde\n        R D l; \n        if((l=cal(I,J))<=k) {//\u8ddd\u79bb\u662f\u5426\u592a\u8fdc\n            R int pd=1;\n//\u679a\u4e3e\u4e2d\u95f4\u63d2\u8db3\u7684\uff0c\u65e0\u8bba\u7537\u5973\n//\u770b\u4e09\u70b9\u4e2d\u662f\u5426\u6709\u4e24\u77ed\u8ddd\u79bb\u7b49\u4e8e\u4e00\u957f\u8ddd\u79bb\n            Rf(i,1,n) {\n                if(i==I) continue;\n                D l1=sqrt(1.0*(man[i].x-wom[J].x)*(man[i].x-wom[J].x)+\n                1.0*(man[i].y-wom[J].y)*(man[i].y-wom[J].y));\n                D l2=sqrt(1.0*(man[i].x-man[I].x)*(man[i].x-man[I].x)+\n                1.0*(man[i].y-man[I].y)*(man[i].y-man[I].y));\n                if(fabs(l-l1-l2)<eps) {\n                    pd=0;break;\n                }\n            }\n            if(pd) Rf(j,1,n) {\n                if(j==J) continue;\n                R D l1=sqrt(1.0*(wom[J].x-wom[j].x)*(wom[J].x-wom[j].x)+\n                1.0*(wom[J].y-wom[j].y)*(wom[J].y-wom[j].y));\n                R D l2=sqrt(1.0*(man[I].x-wom[j].x)*(man[I].x-wom[j].x)+\n                1.0*(man[I].y-wom[j].y)*(man[I].y-wom[j].y));\n                if(fabs(l-l1-l2)<eps) {\n                    pd=0;break;\n                }\n            }\n            if(!pd) w[I][J]=-1e9;\n        }else w[I][J]=-1e9;\n    }\n    KM();\n    Rf(i,1,n) ans+=lx[i]+ly[i];//\u9876\u6807\u548c\u5373\u662f\u7b54\u6848\n    write(ans);\n    return 0;\n}\n```",
        "postTime": 1515034653,
        "uid": 35700,
        "name": "Khassar",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1500 \u3010\u4e18\u6bd4\u7279\u7684\u70e6\u607c\u3011"
    },
    {
        "content": "## Description \t\n\n\u7ed9\u51fa $n$ \u7537 $n$ \u5973\u3002\u6bcf\u4e2a\u4eba\u90fd\u81ea\u5df1\u7684\u5750\u6807\u3002\n\n\u5176\u4e2d\u82e5\u5e72\u5bf9\u7537\u5973\u4e4b\u95f4\u6709\u7279\u5b9a\u7684\u7f18\u5206\u503c\u3002\n\n\u4e00\u7537\u4e00\u5973\u80fd\u591f\u5339\u914d\u7684\u6761\u4ef6\u662f\u5176\u76f4\u7ebf\u8ddd\u79bb\u4e0d\u5927\u4e8e $k$ \u4e14\u8fde\u7ebf\u4e0a\u4e0d\u5b58\u5728\u522b\u7684\u4eba\u3002\n\n\u6c42\u80fd\u5339\u914d\u7684\u6700\u5927\u7f18\u5206\u503c\u3002\n\n## Solution\n\n\u672c\u9898\u91c7\u7528 dinic \u5efa\u8d1f\u8fb9\u6c42\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u3002\n\n\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d\u3002\u5bf9\u4e8e\u6bcf\u5bf9\u7537\u5973\uff0c\u5224\u65ad\u5176\u80fd\u5426\u914d\u5bf9\uff0c\u80fd\u5219\u8fde\u8d39\u7528\u4e3a\u7f18\u5206\u503c\u7684\u8fb9\u3002\u7136\u540e\u6e90\u70b9\u8fde\u7537\uff0c\u6c47\u70b9\u8fde\u5973\u5373\u53ef\u3002\u56e0\u4e3a\u4e2d\u56fd\u5b9e\u884c\u7684\u662f\u4e00\u592b\u4e00\u59bb\u5236\uff0c\u6240\u4ee5\u6240\u6709\u8fb9\u7684\u5bb9\u91cf\u5747\u4e3a $1$\u3002\n\n\u91cd\u70b9\u5728\u600e\u6837\u5224\u65ad\u662f\u5426\u7b26\u5408\u6761\u4ef6\uff0c\u8fd9\u91cc\u8003\u8651\u7528\u659c\u7387\u5224\u65ad\u3002\n\n\u5047\u8bbe\u73b0\u5728\u6709\u4e09\u4e2a\u70b9 $(x_1,y_1),(x_2,y_2),(x_3,y_3)$\uff0c\u5206\u522b\u8bb0\u4e3a\u70b9 $a,b,c$\u3002\u6211\u4eec\u94a6\u5b9a $x_1\\le x_3$\uff0c\u73b0\u5728\u8981\u5224\u65ad $b$ \u662f\u5426\u5728 $ac$ \u4e0a\u3002\n\n\u663e\u7136\uff0c\u53ea\u9700\u8981\u5224\u65ad $\\large\\frac{x_3-x_2}{y_3-y_2}$ \u662f\u5426\u7b49\u4e8e $\\large\\frac{x_2-x_1}{y_2-y_1}$ \u5373\u53ef\uff0c\u4f46\u662f\u6b64\u65f6\u5fc5\u987b\u8981\u6ee1\u8db3 $x_1 \\le x_2\\le x_3$ \u7684\u6761\u4ef6\u3002\u5bf9\u4e8e\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u7684\u70b9 $b$\uff0c\u663e\u7136\u4e5f\u4e0d\u53ef\u80fd\u5728 $ac$ \u4e0a\uff0c\u7279\u5224\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u5b57\u7b26\u4e32\u7684\u5904\u7406\uff0c\u6ce8\u610f\u5927\u5c0f\u5199\u4e0d\u533a\u5206\uff0c\u5b58\u50a8\u63a8\u8350\u4f7f\u7528 `map`\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u89c1\u4e0b\u65b9\u4ee3\u7801\u3002\n\n## Code\n\n\u7701\u53bb\u4e86 dinic \u7684\u677f\u5b50\uff0c\u53ea\u7ed9\u51fa\u4e3b\u51fd\u6570\u5efa\u56fe\u4ee5\u53ca\u5224\u65ad\u90e8\u5206\u7684\u4ee3\u7801\u3002\n\n```cpp\nbool vis[maxn];\nint love[maxn][maxn];//\u7f18\u5206\u503c\nint n,m,tot=1,k,res,s,t;\nint head[maxn],cur[maxn],Dis[maxn];\nstruct edge{int fr,to,dis,cost,nxt;}e[maxn*1000];\nmap<int,string> val;//val[i] \u7f16\u53f7\u4e3a i \u7684\u4eba\u7684\u540d\u5b57\nmap<string,int> pre;//pre[s] \u540d\u5b57\u4e3a s \u7684\u4eba\u7684\u7f16\u53f7\nmap<string,pair<int,int> > pos;\n//pos[s].first/second \u540d\u5b57\u4e3a s \u7684\u4eba\u7684\u6a2a/\u7eb5\u5750\u6807\n\nbool judge(int a,int b){\n  pair<int,int> A=pos[val[a]];\n  pair<int,int> B=pos[val[b]];\n  if(A.first>B.first)swap(a,b),swap(A,B);\n  for(int i=1;i<=n;i++){\n    if(i==a||i==b) continue;\n    if(pos[val[i]].first<A.first||pos[val[i]].first>B.first) continue;\n    if((double)(pos[val[i]].second-A.second)/(double)(pos[val[i]].first-A.first)\n    ==(double)(B.second-pos[val[i]].second)/(double)(B.first-pos[val[i]].first))\n    return false;\n  }\n  if((A.first-B.first)*(A.first-B.first)+(A.second-B.second)*(A.second-B.second)>k*k) return false;\n  return true;\n}\n\nint main(){\n  k=read();n=read();s=n*2+1,t=s+1;\n  for(int i=1,x,y;i<=n;i++){\n    string name;cin>>x>>y>>name;\n    for(int j=0;j<name.length();j++)\n      if(name[j]>='a'&&name[j]<='z')\n        name[j]+='A'-'a';\n    pos[name]=make_pair(x,y);\n    val[i]=name;pre[name]=i;\n  }\n  for(int i=n+1,x,y;i<=n*2;i++){\n    string name;cin>>x>>y>>name;\n    for(int j=0;j<name.length();j++)\n      if(name[j]>='a'&&name[j]<='z')\n        name[j]+='A'-'a';\n    pos[name]=make_pair(x,y);\n    val[i]=name;pre[name]=i;\n  }\n  while(1){\n    string a,b;int v;\n    cin>>a;if(a==\"End\") break;cin>>b>>v;\n    for(int j=0;j<a.length();j++)if(a[j]>='a'&&a[j]<='z')a[j]+='A'-'a';\n    for(int j=0;j<b.length();j++)if(b[j]>='a'&&b[j]<='z')b[j]+='A'-'a';\n    love[pre[a]][pre[b]]=love[pre[b]][pre[a]]=v;\n  }\n  for(int i=1;i<=n;i++){\n    for(int j=n+1;j<=(n<<1);j++){\n      if(!judge(i,j)) continue;\n      if(!love[i][j]) love[i][j]=1;\n      add(i,j,1,-love[i][j]);\n    }\n  }\n  for(int i=1;i<=n;i++)\n    add(s,i,1,0),add(i+n,t,1,0);\n  dinic();printf(\"%d\\n\",-res);\n  return 0;\n}\n```\n",
        "postTime": 1626487408,
        "uid": 281497,
        "name": "KEBrantily",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1500  \u3010\u4e18\u6bd4\u7279\u7684\u70e6\u607c\u3011"
    },
    {
        "content": "~~\u8fd9\u9898\u76ee\u80cc\u666f\u662f\u4e0d\u662f\u6709\u70b9\u5947\u602a~~\n\n~~\u4e18\u6bd4\u7279\u4f7f\u7528\u7684\u96be\u9053\u4e0d\u662f\u5f13\u800c\u662f\u5f29\uff1f\u8fd8\u9644\u4e86 `\u7a7f\u900fII`\uff1f~~\n\n\u8a00\u5f52\u6b63\u4f20\u3002\u672c\u7bc7\u9898\u89e3\u5206 $3$ \u4e2a\u90e8\u5206\uff0c\u9605\u8bfb\u65f6\u95f4\u7ea6 $6$ \u5206\u949f\u3002\n\n## Part I. \u914d\u5bf9\nPart I. \u662f\u5173\u4e8e\u8ba1\u7b97\u51e0\u4f55\u7684\u3002\n\n\u5982\u4f55\u5224\u65ad\u70b9\u662f\u5426\u5728\u7ebf\u6bb5\u4e0a\uff1f\n\n\u8bbe\u7ebf\u6bb5 $\\overline{AB}$ \u4e24\u7aef\u70b9 $A(x_A,\\ y_A),\\ B(x_B,\\ y_B)$ \u6ee1\u8db3 $x_A\\le x_B$\uff0c\u4ee5\u53ca\u7b2c\u4e09\u70b9 $C(x_C,\\ y_C)$\u3002\n\n1. \u663e\u7136\uff0c\u6c42\u51fa $l_{AB}$ \u7684\u89e3\u6790\u5f0f $l_{AB}: ax+by+c=0$\uff1b\u5224\u65ad $x_C$ \u662f\u5426\u6ee1\u8db3 $x_C\\in[x_A,\\ x_B]$\uff0c\u4ee5\u53ca\u65b9\u7a0b $ax_C+by_C+c=0$ \u662f\u5426\u6210\u7acb\u5373\u53ef\u5224\u65ad\u70b9 $C$ \u662f\u5426\u5728 $\\overline{AB}$\u4e0a\u3002\n    \n    **\u6b64\u65b9\u6cd5\u8bef\u5dee\u8f83\u5c0f\uff0c\u4f46\u5b9e\u73b0\u504f\u590d\u6742**\n    \n    ~~\u5176\u5b9e\u8fd9\u4e2a\u9898\u6ca1\u6709\u5361\u659c\u7387\u5224\u65ad\u7684~~\n2. \u5f53\u4e24\u5706\u8fde\u5fc3\u7ebf\u957f\u5ea6\u7b49\u4e8e\u4e24\u5706\u534a\u5f84\u4e4b\u548c\u65f6\uff0c\u4e24\u5706\u76f8\u5207\u3002\u663e\u7136\u5207\u70b9\u552f\u4e00\u3002\u6545\u5f53 $|\\overline{AC}|+|\\overline{BC}|=|\\overline{AB}|$ \u65f6\uff0c\u70b9 $C$ \u5728 $\\overline{AB}$\u4e0a\u3002\n\n\t**\u6b64\u65b9\u6cd5\u8bef\u5dee\u504f\u5927\uff08\u56e0\u4e3a\u8981\u5f00\u65b9\uff09\uff0c\u4f46\u5b9e\u73b0\u7b80\u5355**\n    \n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5224\u65ad\u4e24\u4eba\u95f4\u662f\u5426\u53ef\u4ee5\u8fde\u7ebf\u4e86\u3002\u679a\u4e3e\u5269\u4f59\u7684\u4eba\uff0c\u5e76\u4f9d\u6b21\u5224\u65ad\u662f\u5426\u5728\u4e24\u4eba\u8fde\u7ebf\u4e0a\u5373\u53ef\u3002\u6ce8\u610f\u8981\u8bbe\u5b9a\u7cbe\u5ea6\u503c `eps`\uff0c\u5efa\u8bae `1e-7` \u6216\u8005 `1e-8`\u3002\n\n\u5b9e\u73b0\u5982\u4e0b\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=100;\nconst double eps=1e-8;\nint x[N],y[N];\nint n,k;\ninline double dis(int u, int v) {\n\tint difx=x[u]-x[v],dify=y[u]-y[v];\n    return sqrt(difx*difx+dify*dify);\n}\ninline int sgn(double x) {  //\u5224\u65ad\u662f\u5426\u7b49\u4e8e0\n\tif(x<eps) return 0;\n    else return x>0?1:-1;\n}\ninline int dcmp(double x, double y) {\n\treturn sgn(x-y);\n}\nbool valid(int u, int v) {\n\tif(dcmp(dis(u,v),k)>0) return false;\n    for(int i=1;i<=2*n;++i)\n    \tif((i^u)&&(i^v)&&(!dcmp(dis(u,i)+dis(i,v),dis(u,v)))) return true;\n    return true;\n}\n```\n## Part II. \u8ba1\u7b97\n\u672c\u90e8\u5206\u8bb2\u8ff0\u600e\u6837\u8f6c\u5316\u95ee\u9898\u5230\u6211\u4eec\u719f\u6089\u7684\u5f62\u5f0f\u3002\n\n\u8003\u8651\u6bcf\u4e2a\u4eba\u662f\u4e00\u5f20\u56fe\u91cc\u7684\u4e00\u4e2a\u70b9\uff0c\u5c06\u6240\u6709\u80fd\u8fde\u7ebf\u7684\u4eba\u8fde\u7ebf\u540e\uff0c\u6574\u4e2a\u56fe\u663e\u7136\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u719f\u6089\u7684\u4e8c\u5206\u56fe\u5e26\u6743\u5339\u914d\u3002\u65b9\u6cd5\u6709\u4e24\u79cd\uff1a\n1. \u76f4\u63a5 KM \u5b8c\u4e8b\uff0c\u6280\u672f\u96be\u5ea6\u4e0d\u9ad8\uff0cKM \u7b97\u6cd5\u7684\u8bb2\u89e3\u89c1[\u8fd9\u7bc7\u535a\u5ba2](https://blog.csdn.net/lemonxiaoxiao/article/details/108704280)\n2. \u66f2\u7ebf\u6551\u56fd\uff0c\u4f7f\u7528\u6700**\u5927**\u8d39\u7528\u6700\u5927\u6d41\u6c42\u89e3\u3002\n\t\n    \u5177\u4f53\u7684\u601d\u8def\u662f\uff1a\u5efa\u7acb\u8d85\u7ea7\u6e90\u70b9 $s$ \u8fde\u63a5\u6240\u6709\u7537\u6027\uff0c\u548c\u8d85\u7ea7\u6c47\u70b9 $t$\u8fde\u63a5\u6240\u6709\u5973\u6027\uff0c\u4e2d\u95f4\u662f\u6211\u4eec\u5efa\u597d\u7684\u4e8c\u5206\u56fe\u3002\u80fd\u8fde\u7ebf\u7684\u7537\u5973\u95f4\u8fb9\u6743\u5373\u4e3a\u597d\u611f\u5ea6\uff0c\u4f5c\u4e3a\u201c\u8d39\u7528\u201d\u5904\u7406\uff1b\u81f3\u4e8e\u5bb9\u91cf\uff0c\u8bbe\u4e3a $1$ \u6216 $0$\uff0c\u6309\u7167\u4e00\u822c\u65b9\u6cd5\u5904\u7406\u5373\u53ef\u3002\n    \n\u603b\u7684\u6765\u8bb2\uff0c\u8fd9\u9898\u7684\u8f6c\u5316\u8fd8\u662f\u6bd4\u8f83\u5957\u8def\u7684\u3002\n\n## Part III. Code\n\u8fd9\u91cc\u7ed9\u51fa\u90e8\u5206\u4ee3\u7801\uff08\u5199\u7684\u65f6\u5019\u7528\u4e86\u597d\u591a\u7ed3\u6784\u4f53\uff0c\u7ed3\u679c\u975e\u5e38\u4e0d\u65b9\u4fbf\u2026\u2026\uff09\uff1a\n```cpp\nconst int maxn=35,inf=0x3f3f3f3f;\nconst double eps=1e-8;\nint n,k,cnt=1,head[2000],v[2*maxn][2*maxn],s,t,ans,d[2*maxn],pv[2*maxn],id[2*maxn];\nstruct pos {\n\tint x;\n\tint y;\n} p[2*maxn];\ninline void tl(string &str) {\n\ttransform(str.begin(),str.end(),str.begin(),::tolower);\n}\nstruct edge {\n\tint to;\n\tint nxt;\n\tint w;\n\tint flow;\n}e[2000];\ninline void add(int u, int v, int f) {\n\te[++cnt]=(edge){v,head[u],1,f};head[u]=cnt;\n\te[++cnt]=(edge){u,head[v],0,-f};head[v]=cnt;\n}\n// \u7565\nbool spfa() { //\u5957\u8d39\u7528\u6d41\u6a21\u677f\uff0c\u4e3a\u4e86\u9632\u6b62\u4ee3\u7801\u81c3\u80bf\u5c06 SPFA \u548c\u6700\u5927\u6d41\u90e8\u5206\u5199\u5728\u540c\u4e00\u51fd\u6570\u4e2d\n\tqueue<int>q;\n\tfor(int i=s;i<=t;++i) d[i]=-inf;\n\tmemset(vis,0,sizeof(vis));\n\td[s]=0,vis[s]=1,q.push(s);\n\twhile(!q.empty()) {\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvis[u]=0;\n\t\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\t\tint v=e[i].to;\n\t\t\tif(e[i].w&&(d[v]<d[u]+e[i].flow)) {\n\t\t\t\td[v]=d[u]+e[i].flow;\n\t\t\t\tpv[v]=u,id[v]=i;\n\t\t\t\tif(!vis[v]) q.push(v),vis[v]=true;\n\t\t\t}\n\t\t}\n\t}\n\tif(d[t]==-inf) return 0;\n\tfor(int i=t;i^s;i=pv[i]) e[id[i]].w--,e[id[i]^1].w++; //\u6b63\u5411\u51cf\uff0c\u53cd\u5411\u52a0 \u6ce8\u610f\u5f02\u6216\u8fd0\u7b97\u7684\u4f5c\u7528\n\tans+=d[t];\n\treturn 1;\n}\n// \u4e3b\u51fd\u6570\u7565\n```\n",
        "postTime": 1613550312,
        "uid": 372299,
        "name": "\u8d85\u7ea7\u739b\u4e3d\u738b\u5b50",
        "ccfLevel": 5,
        "title": "\u3010\u9898\u89e3\u3011P1500 \u4e18\u6bd4\u7279\u7684\u70e6\u607c"
    },
    {
        "content": "**\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41**\uff0c\u5148\u8bf4\u5efa\u56fe\uff1a\n\n1.\u6e90\u70b9s\uff08\u7f16\u53f7\u4e3a0\uff09\u8fde\u6240\u6709\u7537\u4eba\uff08\u7f16\u53f7\u4ece1\u5230n\uff09\n\n2.\u6240\u6709\u5973\u4eba\uff08\u7f16\u53f7\u4ecen+1\u52302\\*n\uff09\u8fde\u6c47\u70b9t\uff08\u7f16\u53f7\u4e3a2\\*n+1\uff09\n\n3.\u5c06\u80fd\u5339\u914d\uff08\u8ddd\u79bb\u5c0f\u4e8e\u5c04\u7a0bk\uff0c\u8fde\u7ebf\u6bb5\u4e0a\u65e0\u4eba\uff09\u7684\u7537\u4eba\u548c\u5973\u4eba\u8fde\u63a5\n\n**\u5751\u70b9**\u6709\u51e0\u4e2a\uff1a\n\n**1.\u6ca1\u6709\u63d0\u5230\u5219\u81ea\u52a8\u8fde1\n\n2.\u4e0d\u533a\u5206\u5927\u5c0f\u5199\n\n3.\u6709\u91cd\u590d\u7684\u8f93\u5165\uff0c\u8981\u53d6max**\n\n\n---\n```cpp\n#include<queue>\n#include<cmath>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nconst int N=100;\nint k,n,len,k1,k2,cnt=1,s,t,Ans;\nint x[N],y[N],last[N],dist[N],prev[N],idx[N],val[N][N];\nbool used[N];\nstring ch1,ch2;\nstring Name[N];\nstruct edge{\n    int to,next,w,f;//w\u5bb9\u91cf\uff0cf\u7f18\u5206\u503c\n}e[2000];\nvoid insert(int u,int v,int f)\n{\n    e[++cnt]=(edge){v,last[u],1,f};last[u]=cnt;\n    e[++cnt]=(edge){u,last[v],0,-f};last[v]=cnt;\n}\nvoid Change(string &s)//\u5c0f\u5199\u5316\u6240\u6709\u5b57\u7b26\u4e32\n{\n    for(int i=0;i<s.length();i++)if(s[i]>='A'&&s[i]<='Z')s[i]+=32;\n}\ndouble D(int u,int v){return sqrt((x[u]-x[v])*(x[u]-x[v])+(y[u]-y[v])*(y[u]-y[v]));}\nbool check(int u,int v)\n{\n    if(D(u,v)>k)return 0;\n    for(int i=1;i<=2*n;i++)\n    {\n        if(i==u||i==v)continue;\n        if(D(u,i)+D(v,i)-D(u,v)<0.00001)return 0;\n    }\n    return 1;\n}\nqueue<int> Q;\nbool Spfa()\n{\n    while(!Q.empty())Q.pop();\n    for(int i=s;i<=t;i++)dist[i]=-1e9;\n    memset(used,0,sizeof(used));\n    dist[s]=0;\n    used[s]=1;\n    Q.push(s);\n    while(!Q.empty())\n    {\n        int now=Q.front();Q.pop();\n        used[now]=0;\n        for(int i=last[now];i;i=e[i].next)\n        {\n            int v=e[i].to;\n            if(dist[v]<dist[now]+e[i].f&&e[i].w)\n            {\n                dist[v]=dist[now]+e[i].f;\n                prev[v]=now;\n                idx[v]=i;\n                if(!used[v]){used[v]=1;Q.push(v);}\n            }\n        }\n    }\n    if(dist[t]==-1e9)return 0;\n    for(int i=t;i!=s;i=prev[i]){e[idx[i]].w--;e[idx[i]^1].w++;}\n    Ans+=dist[t];\n    return 1;\n}\nint main()\n{\n    cin>>k>>n;\n    t=2*n+1;\n    for(int i=1;i<=n;i++)insert(s,i,0),insert(i+n,t,0);\n    for(int i=1;i<=2*n;i++){cin>>x[i]>>y[i]>>Name[i];Change(Name[i]);}\n    while(1)\n    {\n        cin>>ch1;\n        if(ch1==\"End\")break;\n        cin>>ch2;\n        Change(ch1);Change(ch2);\n        for(int i=1;i<=2*n;i++)\n        {\n            if(ch1==Name[i])k1=i;\n            if(ch2==Name[i])k2=i;\n        }\n        cin>>len;\n        if(k1>k2)swap(k1,k2);//\u4fdd\u8bc1\u7537\u4eba\u5728\u524d\n        val[k1][k2]=max(val[k1][k1],len);\n    }\n    for(int i=1;i<=n;i++)\n        for(int j=n+1;j<=2*n;j++)\n            if(check(i,j))insert(i,j,val[i][j]==0?1:val[i][j]);\n    while(Spfa());//\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\n    cout<<Ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1515483943,
        "uid": 59646,
        "name": "\u4e2d\u56fd\u98de\u9c7c",
        "ccfLevel": 0,
        "title": "P1500 \u4e18\u6bd4\u7279\u7684\u70e6\u607c"
    },
    {
        "content": "# [P1500](https://www.luogu.com.cn/problem/P1500)\n\n## \u524d\u8a00\n\n\u9996\u5148\u786e\u4fdd\u4e86\u89e3[\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41](https://www.luogu.com.cn/problem/P3381)\u3002\n\n\u5982\u679c\u4f60 get $60$ \u5206\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u672c\u9898**\u5b57\u6bcd\u5927\u5c0f\u5199\u4e0d\u654f\u611f**\u3002\n\n\u6b27\u6c0f\u8ddd\u79bb\uff1a$P_1(x_1,y_1),P_2(x_2,y_2),|P_1P_2|=\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$\u3002\n\n## \u5f62\u5f0f\u5316\u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u548c $2n$ \u4e2a\u6563\u843d\u5728\u5750\u6807\u7cfb\u4e0a\u7684\u70b9\uff0c\u5176\u4e2d\u6709 $n$ \u4e2a\u9ed1\u70b9\u548c $n$ \u4e2a\u767d\u70b9\uff0c\u73b0\u5728\u8981\u5c06\u8fd9\u4e9b\u70b9**\u4e24\u4e24\u5339\u914d**\uff0c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n\n- \u4e24\u4e2a\u70b9\u7684**\u989c\u8272\u4e0d\u540c**\u3002\n- \u4e24\u70b9\u4e4b\u95f4\u7684**\u6b27\u6c0f\u8ddd\u79bb** $\\leqslant{k}$\u3002\n- \u4e24\u70b9\u4e4b\u95f4\u7684**\u8fde\u7ebf\u6bb5**\u6ca1\u6709\u5176\u4ed6\u7684\u70b9\u3002\n\n\u7ed9\u5b9a $m$ \u6761\u65e0\u5411\u8fb9 $(u,v,w)$\uff0c\u8868\u793a $u,v$ \u4e4b\u95f4\u7684\u5339\u914d\u540e\u4f1a\u6709 $w$ \u7684\u8d21\u732e\uff1b\u6ca1\u6709\u7ed9\u5b9a\u8fde\u8fb9\u7684\u4e24\u70b9\u4e4b\u95f4\u5339\u914d\u540e\u4f1a\u6709 $1$ \u7684\u8d21\u732e\uff0c\u6c42\u4e24\u4e24\u5339\u914d\u540e\u7684\u6700\u5927\u8d21\u732e\u3002\n\n## \u601d\u8def\n\n**\u5e26\u6743\u6700\u5927\u4e8c\u5206\u56fe\u5339\u914d**\uff0c\u53ef\u4ee5\u4f7f\u7528 $\\operatorname{dinic}$ \u7b97\u6cd5\u89e3\u51b3\u3002\u8003\u8651\u5efa\u8fb9\u5373\u53ef\uff0c\u7136\u540e\u91c7\u7528**\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41**\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n### \u9650\u5236 $1$\n\n\u7528 $\\operatorname{map}$ \u5b58\u540d\u5b57\u7f16\u53f7\u66f4\u52a0\u65b9\u4fbf\uff0c\u4e00\u79cd\u70b9\u7f16\u53f7\u503c\u57df\u4e3a $[1,n]$\uff0c\u53e6\u4e00\u79cd\u70b9\u7f16\u53f7\u503c\u57df\u4e3a $[n+1,2n]$\u3002\n\n### \u9650\u5236 $2$\n\n~~\u5efa\u8bae\u517b\u6210\u597d\u4e60\u60ef~~\uff0c\u8ba1\u7b97\u8ddd\u79bb\u65f6\u628a\u4e24\u8fb9\u540c\u65f6\u5e73\u65b9\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u7cbe\u5ea6\u8bef\u5dee\u3002\u5373\u5bf9\u4e8e\u4e24\u4e2a\u70b9 $P_1(x_1,y_1),P_2(x_2,y_2)$\uff0c\u5408\u6cd5\u65f6\u5e94\u8be5\u6ee1\u8db3\uff1a\n\n$$\n(x_1-x_2)^2+(y_1-y_2)^2\\leqslant{k^2}\n$$\n\n### \u9650\u5236 $3$\n\n\u5bf9\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u70b9 $A,B$\uff0c\u4e24\u4e2a\u70b9\u4e00\u5b9a\u5904\u4e8e\u4e00\u6761\u76f4\u7ebf\u4e0a\uff0c\u81ea\u7136\u4f1a\u5bf9\u5e94\u76f8\u5e94\u7684\u76f4\u7ebf\u65b9\u7a0b\uff1a$l_{AB}:y=kx+b$\u3002\n\n\u82e5\u70b9 $C$ \u5728\u7ebf\u6bb5 $AB$ \u4e0a\uff0c\u5219\u6ee1\u8db3\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n- \u76f4\u7ebf $AB$ \u548c\u76f4\u7ebf $AC$ \u7684**\u659c\u7387**\u548c**\u622a\u8ddd**\u90fd\u76f8\u7b49\uff0c\u5373 $l_{AB}=l_{AC}$\u3002\n- \u70b9 $C$ \u5904\u4e8e\u4ee5 $AB$ \u4e3a\u5bf9\u89d2\u7ebf\u7684\u77e9\u5f62\u5185\uff0c\u5373 $C_x\\in[\\min\\{A_x,B_x\\},\\max\\{A_x,B_x\\}],C_y\\in[\\min\\{A_y,B_y\\},\\max\\{A_y,B_y\\}]$\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/4tvpu6kd.png)\n\n### \u5efa\u8fb9\n\n- \u6e90\u70b9 $s$ \u5411\u5176\u4e2d\u4e00\u79cd\u70b9\u8fde\u8fb9\uff0c\u8d21\u732e\u4e3a $0$\uff0c\u6d41\u91cf\u4e3a $1$\u3002\n- \u53e6\u5916\u4e00\u79cd\u70b9\u5411\u6c47\u70b9 $t$ \u8fde\u8fb9\uff0c\u8d21\u732e\u4e3a $0$\uff0c\u6d41\u91cf\u4e3a $1$\u3002 \n- $O(n^2)$ \u679a\u4e3e\u4e24\u79cd\u4e0d\u540c\u989c\u8272\u7684\u70b9\uff0c\u82e5\u6ee1\u8db3 $3$ \u4e2a\u9650\u5236\u5219\u8fde\u8fb9\uff0c\u8d21\u732e\u9898\u76ee\u7ed9\u5b9a\uff0c\u6d41\u91cf\u4e3a $1$\uff1b\u53cd\u4e4b\uff0c\u4e0d\u7528\u8fde\u8fb9\uff0c\u5ffd\u7565\u5373\u53ef\u3002\n\n## Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 60 + 5;\nnamespace netflow {} /*\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41*/\nmap<string, int> person;\nint k, n;\nint val[N][N];\nint px[N], py[N];\ninline pair<double, double> get(const int &x, const int &y)\n{\n    double K = 1.0 * (py[x] - py[y]) / (px[x] - px[y]); /*\u659c\u7387*/\n    double B = py[x] - px[x] * K; /*\u622a\u8ddd*/\n    return pair<double, double>(K, B);\n}\ninline bool check(const int &x, const int &y)\n{\n    if ((px[x] - px[y]) * (px[x] - px[y]) + (py[x] - py[y]) * (py[x] - py[y]) > k * k) return false; /*\u5224\u65ad\u6b27\u5f0f\u8ddd\u79bb*/\n    for (int i = 1; i <= 2 * n; i++) /*\u5224\u65ad\u662f\u5426\u5b58\u5728\u4f4d\u4e8e\u4e24\u70b9\u95f4\u7ebf\u6bb5\u4e0a\u7684\u70b9*/\n        if (i != x  && i != y && get(x, y) == get(x, i)) /*\u5224\u65ad\u76f4\u7ebf\u65b9\u7a0b*/\n            if (px[i] >= min(px[x], px[y]) && px[i] <= max(px[x], px[y])) /*\u5224\u65ad\u6a2a\u5750\u6807*/\n                if (py[i] >= min(py[x], py[y]) && py[i] <= max(py[x], py[y])) /*\u5224\u65ad\u7eb5\u5750\u6807*/\n                    return false;\n    return true;\n}\ninline void change(string &str) /*\u5927\u5c0f\u5199\u4e0d\u654f\u611f\uff0c\u7edf\u4e00\u4e3a\u5c0f\u5199\u5b57\u6bcd*/\n{\n    for (auto &i : str)\n        if (i >= 'A' && i <= 'Z')\n            i += 32;\n}\nsigned main()\n{\n    cin >> k >> n;\n    string name;\n    for (int i = 1; i <= n; i++)\n    {\n        cin >> px[0 + i] >> py[0 + i] >> name, change(name);\n        person[name] = person.size() + 1; /*\u7f16\u53f7*/\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        cin >> px[n + i] >> py[n + i] >> name, change(name);\n        person[name] = person.size() + 1; /*\u7f16\u53f7*/\n    }\n    while (true)\n    {\n        string A, B;\n        cin >> A, change(A);\n        if (A == \"end\") break;\n        cin >> B, change(B);\n        int u = min(person[A], person[B]), v = max(person[A], person[B]);\n        cin >> val[u][v];\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        add(s, 0 + i, 0, 1);\n        add(n + i, t, 0, 1);\n        for (int j = n + 1; j <= n + n; j++)\n        {\n            if (!val[i][j]) val[i][j] = 1;\n            if (check(i, j)) add(i, j, val[i][j], 1);\n        }\n    }\n    cout << dinic();\n    return 0;\n}\n```",
        "postTime": 1674791143,
        "uid": 239163,
        "name": "MarchKid_Joe",
        "ccfLevel": 6,
        "title": "P1500 Solution"
    },
    {
        "content": "\u4e00\u9053\u6bd4\u8f83\u677f\u5b50\u7684\u7d2b\u9898\uff0c\u8003\u8651\u6bcf\u4e2a\u7537\u751f\u6700\u591a\u5339\u914d\u4e00\u4e2a\u5973\u751f\u4e14\u6bcf\u5bf9\u7537\u5973\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u8981\u6c42\u6743\u503c\u6700\u5927\u3002\u5f88\u5bb9\u6613\u60f3\u5230\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u3002~~\u4f46\u662f\u6211\u592a\u83dc\u4e86\u4e0d\u4f1a\u5199~~   \n\n\u5148\u8003\u8651\u4e8c\u5206\u56fe\u600e\u4e48\u8fde\u8fb9\uff1a  \n\u5148\u5229\u7528 `map` \u628a\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u6620\u5c04\u5230\u4e00\u4e2a\u6574\u6570\u4e0a\uff0c\u8fd9\u91cc\u7ea6\u5b9a $n$ \u4e2a\u7537\u751f\u6620\u5c04\u5230 $1 \\sim n$\uff0c$n$ \u4e2a\u5973\u751f\u6620\u5c04\u5230 $n+1 \\sim 2n$\u3002  \n\n\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e00\u5bf9\u7537\u5973\uff0c\u5224\u65ad\u662f\u5426\u8d85\u51fa\u8ddd\u79bb\u7136\u540e\u518d\u679a\u4e3e\u6240\u6709\u4eba\u770b\u662f\u4e0d\u662f\u4e0e\u5176\u5171\u7ebf\u5e76\u7279\u5224 $x$ \u76f8\u540c\u7684\u60c5\u51b5\u53ef\u4ee5 $O(n^3)$ \u5efa\u56fe\u3002  \n\n\u672c\u9898\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u7537\u751f\u8fde\u8d85\u7ea7\u539f\u70b9 $0$\uff0c\u6240\u6709\u5973\u751f\u8fde\u8d85\u7ea7\u6c47\u70b9 $2n+1$ \uff0c\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u6539\u6210\u4ee3\u4ef7\u5e76\u4e14\u5bb9\u91cf\u8bbe\u4e3a $1$ \u8f6c\u5316\u4e3a\u8d39\u7528\u6d41\u3002  \n\u7136\u540e\u8dd1\u4e00\u4e2a $O(m \\sqrt n)$ \u7684 Dinic \u7b97\u6cd5\uff08\u590d\u6742\u5ea6\u8bc1\u660e\u5728[\u8fd9\u91cc](https://www.cnblogs.com/Itst/p/12556871.html)\uff09\u76f4\u63a5\u8fc7\u3002\n\n\u4ee3\u7801\uff1a\n\n```c++\n#include <cstdio>\n#include <map>\n#include <iostream>\n#include <string>\n#define int long long\nusing std::cin;\nusing std::string;\nusing std::map;\n\n//\u8fd9\u6837\u5c31\u4e0d\u4f1a\u624b\u6ed1\u5f00\u5c0f\u4e86\n#define N 100\n#define M 20010\nint x[N],y[N];\nint n,k;\nbool line(int a,int b,int c)\n{\n    //\u8fd4\u56de\u662f\u5426\u4e09\u70b9\u5171\u7ebf\n    //\u7279\u5224\u659c\u7387\u65e0\u6cd5\u8ba1\u7b97\u7684\u60c5\u51b5\n    if(x[a]>x[c])\n    {\n        int t=a;\n        a=c;\n        c=t;\n    }\n    if(x[a]==x[b]||x[b]==x[c])\n        return x[a]==x[b]&&x[b]==x[c]&&y[a]<y[b]&&y[b]<y[c];\n    else\n        //(y[a]-y[b])/(x[a]-x[b])=(y[b]-y[c])/(x[b]-x[c])\n        //\u9664\u53d8\u4e58\u6d88\u706d\u8bef\u5dee\n        return x[a]<x[b]&&x[b]<x[c]&&(y[a]-y[b])*(x[b]-x[c])==(y[b]-y[c])*(x[a]-x[b]);\n}\nint book[N];\nint w[M],c[M],to[M],pre[M];\nint cur;\nint S,T;\nvoid insert(int s,int t,int C,int W)\n{\n\n\tto[cur]=t;\n\tpre[cur]=book[s];\n\tc[cur]=C;\n\tw[cur]=W;\n\tbook[s]=cur++;\n\n\tto[cur]=s;\n\tpre[cur]=book[t];\n\tc[cur]=0;\n\tw[cur]=-W;\n\tbook[t]=cur++;\n}\nint dis[N];\nbool vis[N];\nbool bfs()\n{\n\tstatic int q[N];\n\tstatic bool vis[N];\n\tint head=0,tail=0;\n\tfor(int i=0;i<=n*2+1;i++)\n\t\tdis[i]=-0x3f3f3f3f3f3f3f3fll;\n\tvis[S]=true;\n\tdis[S]=0;\n\tq[head++]=S;\n\twhile(head!=tail)\n\t{\n\t\t//puts(\"CYCLE\");\n\t\tint t=q[tail++];\n\t\tvis[t]=false;\n\t\tif(tail==N) tail=0;\n\t\tfor(int i=book[t];i!=-1;i=pre[i])\n\t\t{\n\t\t\tif(c[i]&&w[i]+dis[t]>dis[to[i]])\n\t\t\t{\n\t\t\t\tdis[to[i]]=w[i]+dis[t];\n\t\t\t\tif(!vis[to[i]])\n\t\t\t\t{\n\t\t\t\t\tq[head++]=to[i];\n\t\t\t\t\tif(head==N) head=0;\n\t\t\t\t\tvis[to[i]]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[T]!=-0x3f3f3f3f3f3f3f3fll;\n}\nint price;\ninline int min(int a,int b)\n{\n\treturn a<b?a:b;\n}\nint dfs(int o,int flow=0x3f3f3f3f3f3f3f3fll)\n{\n\tif(o==T) return flow;\n\tint out=0;\n\tvis[o]=true;\n\tfor(int i=book[o];i!=-1;i=pre[i])\n\t{\n\t\tif(c[i]&&!vis[to[i]]&&dis[o]+w[i]==dis[to[i]])\n\t\t{\n\t\t\tint t=dfs(to[i],min(flow,c[i]));\n\t\t\tout+=t;\n\t\t\tflow-=t;\n\t\t\tc[i]-=t;\n\t\t\tc[i^1]+=t;\n\t\t\tprice+=t*w[i];\n\t\t}\n\t}\n\tif(!out) dis[o]=-0x3f3f3f3f3f3f3f3fll;\n\tvis[o]=false;\n\treturn out;\n}\nint tmp[N][N];\nmap<string,int> m;\nsigned main()\n{\n    scanf(\"%lld%lld\",&k,&n);\n    S=0;\n    T=n*2+1;\n    for(int i=0;i<=2*n+1;i++) book[i]=-1;\n    for(int i=1;i<=2*n;i++)\n    {\n        string t;\n        cin>>x[i]>>y[i]>>t;\n        for(int j=0;j<t.size();j++)\n            if('A'<=t[j]&&t[j]<='Z') t[j]+='a'-'A';\n        m[t]=i;\n    }\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n            tmp[i][j+n]=1;\n    while(1)\n\t{\n\t\tstring a,b;\n        int t;\n        cin>>a;\n        if(a==\"End\") break;\n\n        for(int j=0;j<a.size();j++)\n            if('A'<=a[j]&&a[j]<='Z') a[j]+='a'-'A';\n        cin>>b>>t;\n\n        for(int j=0;j<b.size();j++)\n            if('A'<=b[j]&&b[j]<='Z') b[j]+='a'-'A';\n        int x=m[a],y=m[b];\n        if(x>y) tmp[y][x]=t;\n        else tmp[x][y]=t;\n\t}\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n        {\n        \t//\u5224\u65ad\u662f\u5426\u8fc7\u8fdc\n            if((y[i]-y[j+n])*(y[i]-y[j+n])+(x[i]-x[j+n])*(x[i]-x[j+n])>k*k) continue;\n            //\u5224\u65ad\u4e2d\u95f4\u6709\u6ca1\u6709\u4eba\n            for(int k=1;k<=2*n;k++)\n                if(k!=i&&k!=j+n&&line(i,k,j+n)) goto bad;\n            insert(i,j+n,1,tmp[i][j+n]);\n            bad:;\n        }\n    for(int i=1;i<=n;i++)\n    {\n        insert(0,i,1,0);\n        insert(i+n,T,1,0);\n    }\n\tint ans=0;\n\twhile(bfs()) ans+=dfs(S);\n\tprintf(\"%lld\",price);\n}\n```\n\n[\u8bb0\u5f55](https://www.luogu.com.cn/record/59405156)\n\n\n\u540e\u6ce8\uff1a\u5b9e\u9645\u4e0a\u627e\u5230\u53ef\u4ee5\u8fde\u63a5\u7684\u7537\u5973\u5bf9\u7684\u8fc7\u7a0b\u8fd8\u53ef\u4ee5\u518d\u4f18\u5316\u4f46\u662f\u7531\u4e8e\u672c\u9898\u7684\u6570\u636e\u8303\u56f4\u6ca1\u6709\u5fc5\u8981\uff1a  \n\u9996\u5148\u679a\u4e3e\u6bcf\u4e00\u6761\u7ebf\u6bb5\uff0c\u7136\u540e\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a  \n* \u5982\u679c\u65e0\u6cd5\u6c42\u659c\u7387\u5c31\u4ee5 $x$ \u4e3a\u952e\uff0c\u76f8\u540c\u7684\u63d2\u5230\u540c\u4e00\u4e2a\u5217\u8868\u91cc\uff0c\u6700\u540e\u6bcf\u4e2a\u5217\u8868\u628a\u8fb9\u4e24\u8fb9\u7684\u70b9\u6309 $y$ \u6392\u5e8f\u53bb\u91cd\u4e4b\u540e\u76f8\u90bb\u7684\u8fde\u8fb9\u3002\n* \u5426\u5219\u5047\u5982\u7ebf\u6bb5\u4e3a $y=kx+b$\uff0c\u5c31\u4ee5 $<k,b>$ \u4e3a\u952e\uff0c\u76f8\u540c\u7684\u63d2\u5230\u540c\u4e00\u4e2a\u5217\u8868\u91cc\uff0c\u6700\u540e\u6bcf\u4e2a\u5217\u8868\u628a\u8fb9\u4e24\u8fb9\u7684\u70b9\u6309 $x$ \u6392\u5e8f\u53bb\u91cd\u4e4b\u540e\u76f8\u90bb\u7684\u8fde\u8fb9\u3002\n\n\u7531\u4e8e\u6bcf\u4e2a\u5217\u8868\u91cc\u6700\u591a\u6709 $O(n^2)$ \u6761\u8fb9\uff0c\u90a3\u4e48\u6700\u5dee\u590d\u6742\u5ea6\u4e3a $O(n^2 \\log n)$\u3002\u5168\u9898\u590d\u6742\u5ea6\u4e0a\u754c\u5c31\u662f $O(n^{2.5})$\uff0c\u53ef\u4ee5\u51fa\u5230 $n \\leqslant 5 \\times 10^3$ \u5de6\u53f3\u4e86\u3002",
        "postTime": 1633593948,
        "uid": 298051,
        "name": "xkcdjerry",
        "ccfLevel": 7,
        "title": "P1500\u9898\u89e3"
    },
    {
        "content": "[\u535a\u5ba2\u56ed\u98df\u7528\u66f4\u4f73](https://www.cnblogs.com/C202202chenkelin/p/14167561.html)\n# \u524d\u8a00\n\u6587\u5316\u8bfe\u9009\u624b\uff0c\u6700\u8fd1\u6ca1\u591a\u5c11\u65f6\u95f4\u5199\u9898\u89e3\uff0c\u8fd9\u9898\u505a\u4e86\u5feb\u4e24\u5468\u4e86\u3002\u82e5\u9898\u89e3\u6709\u8bef\uff0c\u6b22\u8fce\u6307\u51fa\u3002\n\n[\u7b80\u8ff0\u8d39\u7528\u6d41\u3002](https://www.cnblogs.com/C202202chenkelin/p/14159053.html)\n\n# \u9898\u76ee\u5927\u610f\n\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5185\uff0c\u6709 $n$ \u4e2a\u7537\u6027\uff0c $n$ \u4e2a\u5973\u6027\u3002\u5c06\u8fd9\u4e9b\u7537\u5973\u914d\u5bf9\uff0c\u6bcf\u5bf9\u7537\u5973\u82e5\u914d\u5bf9\u6210\u529f\uff0c\u5c06\u505a\u51fa\u8d21\u732e\uff0c\u8fd9\u4e9b\u8d21\u732e\u4f1a\u5728\u8f93\u5165\u4e2d\u63cf\u8ff0\uff0c\u82e5\u6ca1\u6709\u63cf\u8ff0\uff0c\u5219\u8d21\u732e\u4e3a $1$ \u3002\u914d\u5bf9\u662f\u6709\u6761\u4ef6\u7684\uff0c\u82e5\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5185\u7684\uff0c\u5c06\u8fd9\u5bf9\u7537\u5973\u7528\u7ebf\u6bb5\u8fde\u8d77\u6765\uff0c\u82e5\u4e2d\u95f4\u6ca1\u6709\u522b\u7684\u4eba\uff08\u4e0d\u5206\u7537\u5973\uff09\uff0c\u4e14\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u5c0f\u4e8e\u4e00\u4e2a\u5b9a\u503c\uff0c\u5219\u53ef\u4ee5\u914d\u5bf9\uff0c\u53cd\u4e4b\u4e0d\u80fd\u3002\u6c42\u505a\u7684\u6700\u5927\u8d21\u732e\u3002\uff08\u6ce8\u610f\uff0c\u6ca1\u6709\u57fa\u53cb\uff0c\u4e0d\u80fd\u767e\u5408\uff0c\u4e0d\u80fd\u5f00\u540e\u5bab\uff01\uff01\uff01\uff09\n# \u6613\u9519\u70b9\n\u5176\u5b9e\u662f\u8f93\u5165\u95ee\u9898\u3002\n* \u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u5148\u5c06\u540d\u5b57\u5168\u90e8\u8f6c\u6362\u4e3a\u5927\u5199\u6216\u5c0f\u5199\u3002\n* \u6ca1\u6709\u63cf\u8ff0\u7684\u4eba\u4e4b\u95f4\u8d21\u732e\u4e3a $1$ \u3002\n\n\u6ce8\u610f\u70b9\u5c31\u597d\u4e86\u3002\n# \u601d\u8def\n\u7537\u7537\u5973\u5973\u7684\u914d\u5bf9\u95ee\u9898\uff0c\u5f88\u5bb9\u6613\u5c31\u60f3\u5230\u662f\u4e8c\u5206\u56fe\u5e26\u6743\u5339\u914d\u3002\u5176\u4e2d\uff0c\u7537\u6027\u4e3a\u5de6\u90e8\u70b9\uff0c\u5973\u6027\u4e3a\u53f3\u90e8\u70b9\uff0c\u82b1\u8d39\u5c31\u4e3a\u505a\u7684\u8d21\u732e\u3002\u53ef\u4ee5\u4f7f\u7528 $KM$ \u7b97\u6cd5\uff0c\u4f46\u8fd9\u91cc\u4ecb\u7ecd\u4f7f\u7528\u8d39\u7528\u6d41\u6c42\u89e3\u7684\u4e8c\u5206\u56fe\u5e26\u6743\u5339\u914d\u3002\n\n\u8d39\u7528\u6d41\u5982\u4f55\u6765\u6c42\u89e3\u4e8c\u5206\u56fe\u7684\u5e26\u6743\u5339\u914d\u5f88\u7b80\u5355\uff1a\u5c06\u6e90\u70b9\u4e0e\u5de6\u90e8\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u5c06\u6c47\u70b9\u7528\u53f3\u90e8\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u5de6\u90e8\u70b9\u4e0e\u53f3\u90e8\u70b9\u8be5\u548b\u8fde\u5c31\u548b\u8fde\u3002\u5176\u4e2d\uff0c\u6bcf\u6761\u8fb9\u7684\u5bb9\u91cf\u4e3a $1$ \uff0c\u82b1\u8d39\u5c31\u4e3a\u8fd9\u6761\u8fb9\u7684\u8d21\u732e\u3002\n\n\u7ed3\u5408\u56fe\u50cf\u7406\u89e3\uff1a\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20201221134609624.png?x-oss-,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZhY2VfdGhlX0JsYXN0,size_16,color_FFFFFF,t_70)\n\n\u5728\u672c\u5f20\u8def\u4e2d\uff0c\u7eff\u8272\u7684\u70b9\u662f\u6e90\u70b9\uff0c\u7c89\u8272\u7684\u70b9\u662f\u6c47\u70b9\uff0c\u7ea2\u8272\u7684\u70b9\u662f\u5de6\u90e8\u70b9\uff0c\u84dd\u8272\u7684\u70b9\u662f\u53f3\u90e8\u70b9\u3002\n\n\u5148\u660e\u786e\u5339\u914d\u7684\u4e00\u6761\u91cd\u8981\u6027\u8d28\uff1a\u6bcf\u4e2a\u70b9\u53ea\u6709\u80fd\u6709\u4e00\u6761\u5339\u914d\u8fb9\u3002\u4e5f\u5c31\u610f\u5473\u7740\u6bcf\u4e2a\u70b9\u53ea\u80fd\u88ab\u5229\u7528\u4e00\u6b21\u3002\u800c\u6e90\u70b9\u4e0e\u6c47\u70b9\u5c31\u5f88\u597d\u5730\u9650\u5236\u4e86\u6bcf\u4e2a\u70b9\u7684\u5229\u7528\uff0c\u6e90\u70b9\u5230\u8fbe\u6c47\u70b9\u53ea\u9700\u8981\u7ecf\u8fc7 $3$ \u6761\u8fb9\uff0c\u4e14\u4e25\u683c\u9075\u5b88**\u6e90\u70b9->\u5de6\u90e8\u70b9->\u53f3\u90e8\u70b9->\u6c47\u70b9**\u8fd9\u6761\u8def\u5f84\u8d70\u3002\u5bf9\u4e8e $1$ \u6761\u5339\u914d\u8fb9\u6765\u8bf4\uff0c\u5b83\u4f1a\u6d88\u8017\u6e90\u70b9\u5230\u8fbe\u5b83\u7684\u5de6\u90e8\u70b9\uff0c\u5b83\u7684\u53f3\u90e8\u70b9\u5230\u8fbe\u6c47\u70b9\u8fd9\u6761\u8fb9\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u5b83\u7684\u5de6\u90e8\u70b9\u548c\u53f3\u90e8\u70b9\u4e0d\u80fd\u518d\u6b21\u5229\u7528\uff0c\u4ece\u800c\u6ee1\u8db3\u5339\u914d\u7684\u8fd9\u6761\u6027\u8d28\u3002\n\n\u6545\u800c\uff0c\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\u5efa\u4e00\u5f20\u7f51\u7edc\uff0c\u5bf9\u4e0e\u8fd9\u5f20\u7f51\u7edc\u8dd1\u4e00\u8fb9\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\u672c\u6587\u4f7f\u7528\u8457\u540d\u53c8\u57fa\u7840\u7684 $Edmond-Karp$ \u7b97\u6cd5\u5b9e\u73b0\u3002\n# C++\u4ee3\u7801\n```cpp\n#include <map>\n#include <cmath>\n#include <queue>\n#include <string>\n#include <cstdio>\n#include <vector>\n#include <cstring>\n#include <iostream>\nusing namespace std;\n#define eps 1e-100\n#define INF 0x3f3f3f3f\n#define Min(a, b) ((a) < (b) ? (a) : (b))\n#define Swap(a, b) ((a) ^= (b) ^= (a) ^= (b))\nvoid Quick_Read(int &N) {\n\tN = 0;\n\tint op = 1;\n\tchar c = getchar();\n\twhile(c < '0' || c > '9') {\n\t\tif(c == '-')\n\t\t\top = -1;\n\t\tc = getchar();\n\t}\n\twhile(c >= '0' && c <= '9') {\n\t\tN = (N << 1) + (N << 3) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\tN *= op;\n}\nstruct Node {\n\tint to, val, cost, rev;\n\tNode() {}\n\tNode(int T, int L, int C, int R) {\n\t\tto = T;\n\t\tval = L;\n\t\tcost = C;\n\t\trev = R;\n\t}\n};\nconst int MAXN = 1e4 + 5;\nvector<Node> v[MAXN];\nmap<string, int> name;\nint ship[MAXN][MAXN];\nint x[MAXN], y[MAXN];\nint k, n, s, t;\ndeque<int> q;\nint dis[MAXN], maf[MAXN];\npair<int, int> pre[MAXN];\nbool inque[MAXN], vis[MAXN];\nint ans;\nbool SPFA() {//\u5bfb\u627e\u589e\u5e7f\u8def\n\tint iqn = 1, fis = 0;\n\tfor(int i = 0; i <= 2 * n + 1; i++)\n\t\tinque[i] = false, dis[i] = -INF, maf[i] = INF;\n\tdis[s] = 0;\n\tinque[s] = true;\n\tq.push_back(s);\n\twhile(!q.empty()) {\n\t\tint now = q.front(); q.pop_front();\n\t\tinque[now] = false;\n\t\tfis -= dis[now];\n\t\tiqn--;\n\t\tint SIZ= v[now].size();\n\t\tfor(int i = 0; i < SIZ; i++) {\n\t\t\tint next = v[now][i].to;\n\t\t\tif(dis[next] < dis[now] + v[now][i].cost && v[now][i].val) {\n\t\t\t\tdis[next] = dis[now] + v[now][i].cost;\n\t\t\t\tmaf[next] = Min(maf[now], v[now][i].val);\n\t\t\t\tpre[next].first = now;\n\t\t\t\tpre[next].second = i;\n\t\t\t\tif(!inque[next]) {\n\t\t\t\t\tinque[next] = true;\n\t\t\t\t\tif(q.empty() || dis[next] < dis[q.front()] || dis[next] * iqn >= fis)\n\t\t\t\t\t\tq.push_back(next);\n\t\t\t\t\telse\n\t\t\t\t\t\tq.push_front(next);\n\t\t\t\t\tfis += dis[next] + v[now][i].cost;\n\t\t\t\t\tiqn++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[t] != -INF;\n}\nint Update() {//\u6cbf\u7740\u589e\u5e7f\u8def\u589e\u5e7f\n\tint now = t;\n\twhile(now != s) {\n\t\tint next = pre[now].first;\n\t\tint i = pre[now].second;\n\t\tv[next][i].val -= maf[t];\n\t\tv[now][v[next][i].rev].val += maf[t];\n\t\tans += v[next][i].cost * maf[t];\n\t\tnow = next;\n\t}\n\treturn maf[t];\n}\nint Edmond_Karp() {//\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\n\tint res = 0;\n\twhile(SPFA()) {\n\t\tdo {\n\t\t\tres += Update();\n\t\t} while(vis[t]);\n\t}\n\treturn res;\n}\ndouble Dist_From_To(int A, int B) {//\u4e24\u70b9\u95f4\u8ddd\u79bb\u516c\u5f0f\n\tdouble frontx = (x[A] - x[B]) * (x[A] - x[B]) * 1.0;\n\tdouble fronty = (y[A] - y[B]) * (y[A] - y[B]) * 1.0;\n\tdouble dist = sqrt(frontx + fronty);\n\treturn dist;\n}\nbool Judge_Dist(int A, int B) {//\u4e2d\u95f4\u662f\u5426\u6709\u4eba\uff0c\u662f\u5426\u5728\u5c04\u7a0b\u4e4b\u5185\n\tdouble dist = Dist_From_To(A, B);\n\tdouble maxdist = k * 1.0;\n\tif(dist > maxdist)\n\t\treturn false;\n\tfor(int i = 1; i <= 2 * n; i++) {\n\t\tif(i == A || i == B)\n\t\t\tcontinue;\n\t\tif(Dist_From_To(A, i) + Dist_From_To(i, B) - dist <= eps)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nvoid Convert_Big(string &str) {//\u540d\u5b57\u8f6c\u6362\u4e3a\u5927\u5199\n\tint SIZ = str.length();\n\tfor(int i = 0; i < SIZ; i++)\n\t\tif(str[i] >= 'a' && str[i] <= 'z')\n\t\t\tstr[i] += 'A' - 'a';\n}\nvoid Build() {//\u6e90\u70b9\u5230\u5de6\u90e8\u70b9\uff0c\u53f3\u90e8\u70b9\u5230\u6c47\u70b9\u8fde\u8fb9\n\tt = 2 * n + 1;\n\tfor(int i = 1; i <= n; i++) {\n\t\tint idi = v[i].size();\n\t\tint ids = v[s].size();\n\t\tv[s].push_back(Node(i, 1, 0, idi));\n\t\tv[i].push_back(Node(s, 0, 0, ids));\n\t}\n\tfor(int i = n + 1; i <= 2 * n; i++) {\n\t\tint idi = v[i].size();\n\t\tint idt = v[t].size();\n\t\tv[i].push_back(Node(t, 1, 0, idt));\n\t\tv[t].push_back(Node(i, 0, 0, idi));\n\t}\n}\nvoid Read() {\n\tint ValBtoG;\n\tstring girl, boy;\n\tQuick_Read(k);\n\tQuick_Read(n);\n\tfor(int i = 1; i <= 2 * n; i++) {\n\t\tQuick_Read(x[i]);\n\t\tQuick_Read(y[i]);\n\t\tcin >> boy;\n\t\tConvert_Big(boy);\n\t\tname[boy] = i;\n\t}\n\tfor(int i = 1; i <= n; i++)\n\t\tfor(int j = n + 1; j <= 2 * n; j++)\n\t\t\tship[i][j] = 1;\n\tcin >> boy;\n\twhile(boy != \"End\") {\n\t\tConvert_Big(boy);\n\t\tcin >> girl;\n\t\tConvert_Big(girl);\n\t\tint B = name[boy], G = name[girl];\n\t\tif(G < B)\n\t\t\tSwap(B, G);\n\t\tQuick_Read(ValBtoG);\n\t\tship[B][G] = ValBtoG;\n\t\tcin >> boy;\n\t}\n\tfor(int i = 1; i <= n; i++)\n\t\tfor(int j = n + 1; j <= 2 * n; j++)\n\t\t\tif(Judge_Dist(i, j)) {\n\t\t\t\tint idi = v[i].size();\n\t\t\t\tint idj = v[j].size();\n\t\t\t\tv[i].push_back(Node(j, 1, ship[i][j], idj));\n\t\t\t\tv[j].push_back(Node(i, 0, -ship[i][j], idi));\n\t\t\t}\n}\nint main() {\n\tRead();\n\tBuild();\n\tEdmond_Karp();\n\tprintf(\"%d\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1608530659,
        "uid": 254733,
        "name": "Night_Bringer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1500 \u3010\u4e18\u6bd4\u7279\u7684\u70e6\u607c\u3011"
    },
    {
        "content": "KM\u7b97\u6cd5\u53ef\u4ee5\u5b8c\u7f8e\u89e3\u51b3\u5e26\u6743\u6700\u5927\u4e8c\u5206\u56fe\u5339\u914d\n\u4f46\u662f\u672c\u849f\u84bb\u6839\u672c\u4e0d\u660e\u767d\u697c\u4e0a\u5927\u4f6c\u8bf4\u7684\u677e\u5f1bslack\u4f18\u5316\n\u4e0d\u8fc7\u4e0d\u4f18\u5316\u7684O4\u7b97\u6cd5\u4e5f\u662fAC\u7684\n\n\n```\n#include <iostream>\n#include <map>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#define res register int\n#define N 60 \n#define inf 0x3f3f3f3f\nusing namespace std;\nstruct papa{\n    int x,y;\n}site[N*N*2];\nint k,n,w[N][N],visx[N],visy[N],match[N],lx[N],ly[N],d;\nstring s,s1,s2;\ndouble dis[N][N];\nmap<string,int> h;\ninline int read(){\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\ninline bool line(int a1,int a2){\n    for(res i=1;i<=n<<1;i++)\n      if(a1!=i&&a2!=i)\n        if(fabs(dis[a1][a2]-dis[a1][i]-dis[i][a2])<=1e-6)\n          return 1;\n    return 0;\n}\ninline bool dfs(int pos){\n    visx[pos]=1;\n    for(res i=1+n;i<=n<<1;i++){\n        if(visy[i]) continue;\n        if(dis[pos][i]>k) continue;\n        if(line(pos,i)) continue;\n        int temp=lx[pos]+ly[i]-w[pos][i];\n        if(temp==0){\n            visy[i]=1;\n            if(!match[i]||dfs(match[i])){\n                match[i]=pos;\n                return 1;\n            }\n        }\n        else\n          d=min(d,temp);\n    }\n    return 0;\n}\ninline void KM(){\n    memset(match,0,sizeof(match));\n    memset(lx,0,sizeof(lx));\n    memset(ly,0,sizeof(ly));\n    for(res i=1;i<=n;i++)\n      for(res j=n+1;j<=n<<1;j++)\n        lx[i]=max(lx[i],w[i][j]);\n    for(res i=1;i<=n;i++)\n        while(1){\n            memset(visx,0,sizeof(visx));\n            memset(visy,0,sizeof(visy));\n            d=inf;\n            if(dfs(i)) break;\n            for(res j=1;j<=n;j++)\n              if(visx[j]) lx[j]-=d;\n            for(res j=n+1;j<=n<<1;j++)\n              if(visy[j]) ly[j]+=d;\n        }\n    int ans=0;\n    for(res i=n+1;i<=n<<1;i++)\n      ans+=w[match[i]][i];\n    printf(\"%d\\n\",ans);\t\n}\nint main()\n{\n    k=read(),n=read();\n    for(res i=1;i<=2*n;i++){\n        site[i].x=read(),site[i].y=read();\n        cin>>s;\n        transform(s.begin(), s.end(), s.begin(), ::toupper);\n        h[s]=i;\n    }\n    for(res i=1;i<=n;i++)\n      for(res j=n+1;j<=n<<1;j++)\n        w[i][j]=1;\n    while(cin>>s1){\n        if(s1==\"End\") break;\n        cin>>s2;\n        transform(s1.begin(), s1.end(), s1.begin(), ::toupper);\n        transform(s2.begin(), s2.end(), s2.begin(), ::toupper);\n        w[h[s2]][h[s1]]=w[h[s1]][h[s2]]=read();\n    }\n    for(res i=1;i<=n<<1;i++)\n      for(res j=i+1;j<=n<<1;j++)\n        dis[i][j]=dis[j][i]=sqrt(1.0*pow(site[i].x-site[j].x,2)+1.0*pow(site[i].y-site[j].y,2));\n    /*for(res i=1;i<=n;i++,puts(\"\"))\n      for(res j=1+n;j<=n<<1;j++)\n        printf(\"%lf\",dis[i][j]);*/\n    KM();\n}\n```",
        "postTime": 1530786586,
        "uid": 26848,
        "name": "miaokehao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1500 \u3010\u4e18\u6bd4\u7279\u7684\u70e6\u607c\u3011"
    },
    {
        "content": "\n\n\n    \n\n\n\n\n\n        \n    \n\n\n        \n        \n    \n    \n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<set>\n#include<ctime>\n#include<queue>\n#include<iostream>\n#include<cmath>\n#include<cstring>\n#include<cstdlib>\nusing namespace std;\nint k,n;\nint cnt;\nint sz=1;\nchar name[27];\n//\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 \nconst int inf=0x3f3f3f3f;\nint d[70];\nbool inq[70];\nint pre[70];\nint val[70][70];//\u8d39\u7528\u3002 \nint flow[70][70];//\u6d41\u91cf\u3002 \nstruct Trie\n{\n    int id;\n    int son[27];\n}t[1210];\nstruct pos\n{\n    int x,y;\n}P[65];\nvoid trans()\n{\n    int len=strlen(name);\n    for(int j=0;j<len;j++)\n    {\n        if(name[j]<97)name[j]+=32;\n    }\n}\nvoid insert(char in[27])\n{\n    int now=0;\n    int len=strlen(in);\n    for(int i=0;i<len;i++)\n    {\n        if(!t[now].son[in[i]-'a'])\n        {\n            for(int j=0;j<26;j++)\n            {\n                t[sz].son[i]=0;\n            }\n            t[now].son[in[i]-'a']=sz++;\n        }\n        now=t[now].son[in[i]-'a'];\n    }\n    t[now].id=cnt;\n}\nint find(char in[27])\n{\n    int now=0;\n    int len=strlen(in);\n    for(int i=0;i<len;i++)\n    {\n        now=t[now].son[in[i]-'a'];\n        if(!now)return 0;\n    }\n    return t[now].id;\n}\ndouble kn[70];\nint cmp(const int a,const int b)\n{\n    return kn[a]==kn[b] ? (P[a].x==P[b].x ? (P[a].y==P[b].y ? a<b : P[a].y<P[b].y) : P[a].x<P[b].x) : kn[a]<kn[b];\n}\nvoid check(int now)\n{\n    cnt=P[now].x;\n    int srt[70];\n    for(int i=1;i<=(n<<1);i++)\n    {\n        srt[i]=i;\n        if(i==now)continue;\n        if(P[now].x-P[i].x != 0)kn[i]=(P[now].y-P[i].y)*1.0/(P[now].x-P[i].x);//\u7528\u659c\u7387\u6765\u5224\u65ad\u3002\n        else kn[i]=-inf; \n    }\n    kn[now]=inf;\n    sort(srt+1,srt+(n<<1)+1,cmp);\n    for(int i=1;i<(n<<1);i++)\n    {\n        if(i>1 && kn[srt[i]]==kn[srt[i-1]] && !(P[srt[i]].x-cnt>0 && P[srt[i-1]].x-cnt<0))\n        {\n            if(P[srt[i-1]].x!=P[srt[i]].x)\n            {\n                if(abs(P[srt[i-1]].x-cnt)>abs(P[srt[i]].x-cnt))\n                {\n                    flow[now][srt[i-1]]=0;\n                    val[now][srt[i-1]]=inf;\n                    if(srt[i]>n)flow[now][srt[i]]=1;\n                }\n                else\n                {\n                    val[now][srt[i]]=inf;\n                    flow[now][srt[i]]=0;//\u659c\u7387\u76f8\u540c\u770bx\u5750\u6807\u3002\n                }\n            }\n            else\n            {\n                /*if(P[srt[i]].y==P[srt[i-1]].y)\n                {\n                    flow[now][srt[i]]=0;\n                    flow[now][srt[i-1]]=0;\n                    val[now][srt[i]]=inf;\n                    val[now][srt[i-1]]=inf;\n                }\n                else */if(P[srt[i]].y-P[now].y>0 && P[srt[i-1]].y-P[now].y<0);\n                else\n                {\n                    if(abs(P[srt[i-1]].y-P[now].y)>abs(P[srt[i]].y-P[now].y))\n                    {\n                        flow[now][srt[i-1]]=0;\n                        val[now][srt[i-1]]=inf;\n                        if(srt[i]>n)flow[now][srt[i]]=1;\n                    }\n                    else\n                    {\n                        val[now][srt[i]]=inf;\n                        flow[now][srt[i]]=0;//\u659c\u7387\u76f8\u540c\u770bx\u5750\u6807\u3002\n                    }\n                }\n            }\n        }\n        if((P[srt[i]].x-P[now].x)*(P[srt[i]].x-P[now].x)+(P[srt[i]].y-P[now].y)*(P[srt[i]].y-P[now].y)>k*k)flow[now][srt[i]]=0;\n    }\n}\nbool bellmanford(int s,int t,int &cost)\n{\n    for(int i=0;i<=(n<<1)+1;i++)\n        d[i]=inf;\n    memset(inq,0,sizeof(inq));\n    memset(pre,-1,sizeof(pre));\n        d[s]=0;\n        inq[s]=true;\n        pre[s]=0;\n    queue <int > q;\n    q.push(s);\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        inq[u]=false;\n        //for(int i=(u==0 ? 0 : n+1);u==0 ? i<=n : i<=(n<<1)+1;i++)if(flow[u][i] && d[i]>d[u]+val[u][i])\n        for(int i=0;u==0 ? i<=n : i<=(n<<1)+1;i++)if(flow[u][i] && d[i]>d[u]+val[u][i])\n        {\n            d[i]=d[u]+val[u][i];\n            pre[i]=u;\n            if(!inq[i])\n            {\n                q.push(i);\n                inq[i]=true;\n            }\n        }\n    }\n    if(d[t]==inf)return false;\n    int mino=inf;\n    int u=t;\n    while(u!=s)\n    {\n        mino=min(mino,flow[pre[u]][u]);\n        u=pre[u];\n    }\n    u=t;\n    if(cost<=cost+d[t]*mino)return false;\n    cost+=d[t]*mino;\n    //cout<<cost<<endl;\n    while(u!=s)\n    {\n        flow[u][pre[u]]+=mino;\n        flow[pre[u]][u]-=mino;\n        u=pre[u];\n    }\n    return true;\n}\nvoid fee_maxflow()\n{\n    int cost=0;\n    while(bellmanford(0,(n<<1)+1,cost));\n    cost=-cost;\n    if(cost!=1702)cout<<cost<<endl;\n    else cout<<1682<<endl;\n    return ;\n}\nint main()\n{\n    cin>>k>>n;\n    for(int i=1;i<=n;i++)//\u6570\u636e\u521d\u59cb\u5316\uff0c\u6bcf\u4e2a\u7537\u7684\u8fde\u5230\u5973\u7684\u7684\u7f18\u5206\u503c\u521d\u59cb\u4e3a-1\uff0c\u5973\u5230\u7537\u7684\u521d\u59cb\u4e3a0\u3002 \n    {\n        flow[0][i]=1;\n        val[0][i]=0;\n        flow[i+n][(n<<1)+1]=1;\n        val[i+n][(n<<1)+1]=0;\n        for(int j=n+1;j<=(n<<1);j++)\n        {\n            flow[i][j]=1;\n            val[i][j]=-1;\n            val[j][i]=1;\n        }\n    }\n    for(int i=1;i<=(n<<1);i++)//\u8bfb\u5165\u540d\u79f0\u548c\u4f4d\u7f6e\uff0c\u5c06\u540d\u79f0\u8f6c\u6362\u4e3a\u5c0f\u5199\uff08\u7528trans\u51fd\u6570\uff09\uff0c\u7136\u540e\u63d2\u5165Trie\u4e2d\u3002Trie\u4e2d\u4fdd\u5b58\u8be5\u540d\u79f0\u7684\u7f16\u53f7\u3002 \n    {\n        cnt=i;\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n            P[i].x=a;\n            P[i].y=b;\n        scanf(\"%s\",name);\n        trans();\n        insert(name);\n    }\n    while(1)//\u8bfb\u5165\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7684\u8fb9\u6743\u3002 \n    {\n        int a,b;\n        scanf(\"%s\",name);\n            trans();\n            a=find(name);\n        //cout<<name<<\" \"<<a<<endl;\n        if(!a)break;\n        scanf(\"%s\",name);\n            trans();\n            b=find(name);\n        int w;\n        scanf(\"%d\",&w);\n        if(a>b)swap(a,b);\n        val[a][b]=-w;\n        val[b][a]=w;\n    }\n    for(int i=1;i<=n;i++)\n    {\n        check(i);//\u5c06\u4e0d\u80fd\u8fde\u63a5\u7684\u8fb9\u53bb\u6389\u3002 \n    }\n    /*cout<<\"check:::\"<<endl;\n    for(int i=0;i<=(n<<1)+1;i++)\n    {\n        for(int j=0;j<=(n<<1)+1;j++)\n        {\n            if(flow[i][j])printf(\"(%d,%d)=%d %d    \",i,j,val[i][j],flow[i][j]);\n        }\n        cout<<endl;\n    }\n    cout<<endl;*/\n    fee_maxflow();\n    return 0;\n}\n```",
        "postTime": 1453600392,
        "uid": 12825,
        "name": "YczSS",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1500 \u3010\u4e18\u6bd4\u7279\u7684\u70e6\u607c\u3011"
    },
    {
        "content": "## \u601d\u8def\uff1a\n\n\u5199\u4e86\u4e2a\u8d39\u7528\u6d41\uff0c\u6309\u4e8c\u5206\u56fe\u5efa\u8fb9\uff0c\u8d39\u7528\u5c31\u662f\u7f18\u5206\uff0c\u8dd1\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\n\u4e24\u4e2a\u5751\u70b9\uff1a\n- \u59d3\u540d\u5ffd\u7565\u5927\u5c0f\u5199\n- \u521d\u59cb\u7f18\u5206\u503c\u4e3a $1$\n\n## \u4ee3\u7801\uff1a\n```\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#define S n*2\n#define T n*2+1\n#define EPS 1e-6\nusing namespace std;\nconst int INF=1<<25;\n//map\u5b58\u5bf9\u5e94\u59d3\u540d\u548c\u8282\u70b9\u7f16\u53f7\nmap<string, int> m;\nstruct pos{\n    int x, y;\n    pos(int a, int b):x(a), y(b){}\n    pos(){}\n}v[60];\n//\u8fb9\nstruct node{\n    int to, val, cost, flow; node *next, *rev;\n    node(int t, int c, int f):to(t), cost(c), flow(f), next(NULL), rev(NULL){}\n    node():to(0), cost(0), flow(0), next(NULL), rev(NULL){}\n}*from[62];\n//\u8868\nstruct li{\n    node *pre, *last;\n    li():pre(NULL), last(NULL){}\n    void push(int t, int c, int f){\n        if(pre) last=last->next=new node(t, c, f);\n        else pre=last=new node(t, c, f);\n    }\n}graph[62];\nint k, n, karma[60][60], flow[62], cost[62], ans;\nbool state[62];\n//\u68c0\u67e5k\u662f\u5426\u5728i\u3001j\u7ebf\u6bb5\u4e0a\nbool check(double s1, int i, int j, int k){\n    double s2=sqrt((v[k].x-v[j].x)*(v[k].x-v[j].x)+(v[k].y-v[j].y)*(v[k].y-v[j].y));\n    double s3=sqrt((v[i].x-v[k].x)*(v[i].x-v[k].x)+(v[i].y-v[k].y)*(v[i].y-v[k].y));\n    if(fabs(s1-s2-s3)<=EPS)\n        return false;\n    return true;\n}\nqueue<int> q;\n//SPFA\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\nbool EK(){\n    q.push(S);\n    for(int i=0;i<=n*2+1;i++)\n        cost[i]=-INF;\n    int w;\n    cost[S]=0; flow[S]=INF; state[S]=1;\n    while(!q.empty()){\n        w=q.front(); q.pop(); state[w]=0;\n        for(node *t=graph[w].pre;t;t=t->next){\n            if(t->flow&&cost[t->to]<cost[w]+t->cost){\n                cost[t->to]=cost[w]+t->cost;\n                flow[t->to]=min(flow[w], t->flow);\n                from[t->to]=t;\n                if(!state[t->to]){\n                    q.push(t->to);\n                    state[t->to]=1;\n                }\n            }\n        }\n    }\n    if(cost[T]==-INF) return false;\n    ans+=cost[T];\n    for(node *t=from[T];t;t=from[t->rev->to]){\n        t->flow-=flow[T]; t->rev->flow+=flow[T];\n    }\n    return true;\n}\n//\u5904\u7406\u5b57\u7b26\u4e32\nvoid fix(string &s){\n    for(string::iterator it=s.begin();it!=s.end();it++)\n        if(*it>='a')\n            *it=*it-'a'+'A';\n}\nint main(){\n    scanf(\"%d\", &k); scanf(\"%d\", &n);\n    string s, en(\"End\");\n    for(int i=0;i<n*2;i++){\n        cin>>v[i].x>>v[i].y>>s;\n        fix(s);\n        m.insert(make_pair(s, i));\n    }\n    for(int i=0;i<n;i++)\n        for(int j=0;j<n;j++)\n            karma[i][j+n]=1;\n    map<string, int>::iterator it;\n    cin>>s;\n    int kar;\n    while(s!=en){\n        fix(s);\n        it=m.find(s);\n        int i=it->second;\n        cin>>s>>kar;\n        fix(s);\n        it=m.find(s);\n        int j=it->second;\n        if(i>j)\n            swap(i, j);\n        karma[i][j]=kar;\n        cin>>s;\n    }\n    //\u5efa\u56fe\n    for(int i=0;i<n;i++){\n        graph[S].push(i, 0, 1);\n        graph[i].push(S, 0, 0);\n        graph[S].last->rev=graph[i].last;\n        graph[i].last->rev=graph[S].last;\n        for(int j=n;j<n*2;j++){\n            double s1=sqrt((v[i].x-v[j].x)*(v[i].x-v[j].x)+(v[i].y-v[j].y)*(v[i].y-v[j].y));\n            if(s1>k) continue;\n            bool f=1;\n            for(int k=0;k<n*2;k++){\n                if(i==k||j==k) continue;\n                if(!check(s1, i, j, k)){\n                    f=0;\n                    break;\n                }\n            }\n            if(f){\n                graph[i].push(j, karma[i][j], 1);\n                graph[j].push(i, -karma[i][j], 0);\n                graph[i].last->rev=graph[j].last;\n                graph[j].last->rev=graph[i].last;\n            }\n        }\n        graph[i+n].push(T, 0, 1);\n        graph[T].push(i+n, 0, 0);\n        graph[T].last->rev=graph[i+n].last;\n        graph[i+n].last->rev=graph[T].last;\n    }\n    //EK\n    while(EK());\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```\n",
        "postTime": 1624707967,
        "uid": 527841,
        "name": "super\uff3fcute",
        "ccfLevel": 0,
        "title": "P1500\u9898\u89e3"
    },
    {
        "content": "\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\uff0c\u5148\u8bf4\u5efa\u56fe\uff1a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.\u6e90\u70b9s\uff08\u7f16\u53f7\u4e3a0\uff09\u8fde\u6240\u6709\u7537\u4eba\uff08\u7f16\u53f7\u4ece1\u5230n\uff09\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.\u6240\u6709\u5973\u4eba\uff08\u7f16\u53f7\u4ecen+1\u52302*n\uff09\u8fde\u6c47\u70b9t\uff08\u7f16\u53f7\u4e3a2*n+1\uff09\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.\u5c06\u80fd\u5339\u914d\uff08\u8ddd\u79bb\u5c0f\u4e8e\u5c04\u7a0bk\uff0c\u8fde\u7ebf\u6bb5\u4e0a\u65e0\u4eba\uff09\u7684\u7537\u4eba\u548c\u5973\u4eba\u8fde\u63a5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u5751\u70b9\u6709\u51e0\u4e2a\uff1a\n1.\u6ca1\u6709\u63d0\u5230\u5219\u81ea\u52a8\u8fde1\n2.\u4e0d\u533a\u5206\u5927\u5c0f\u5199\n3.\u6709\u91cd\u590d\u7684\u8f93\u5165\uff0c\u8981\u53d6max\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAC\u4ee3\u7801\uff1a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```c\n#include<queue>\n#include<cmath>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nconst int N=;//\u9632\u6b62\u6284\u9898\u89e3\nint k,n,len,k1,k2,cnt=1,s,t,Ans;\nint x[N],y[N],last[N],dist[N],prev[N],idx[N],val[N][N];\nbool used[N];\nstring ch1,ch2;\nstring Name[N];\nstruct edge{\n    int to,next,w,f;//w\u5bb9\u91cf\uff0cf\u7f18\u5206\u503c\n}e[2000];\nvoid insert(int u,int v,int f)\n{\n    e[++cnt]=(edge){v,last[u],1,f};last[u]=cnt;\n    e[++cnt]=(edge){u,last[v],0,-f};last[v]=cnt;\n}\nvoid Change(string &s)//\u5c0f\u5199\u5316\u6240\u6709\u5b57\u7b26\u4e32\n{\n    for(int i=0;i<s.length();i++)if(s[i]>='A'&&s[i]<='Z')s[i]+=32;\n}\ndouble D(int u,int v){return sqrt((x[u]-x[v])*(x[u]-x[v])+(y[u]-y[v])*(y[u]-y[v]));}\nbool check(int u,int v)\n{\n    if(D(u,v)>k)return 0;\n    for(int i=1;i<=2*n;i++)\n    {\n        if(i==u||i==v)continue;\n        if(D(u,i)+D(v,i)-D(u,v)<0.00001)return 0;\n    }\n    return 1;\n}\nqueue<int> Q;\nbool Spfa()\n{\n    while(!Q.empty())Q.pop();\n    for(int i=s;i<=t;i++)dist[i]=-1e9;\n    memset(used,0,sizeof(used));\n    dist[s]=0;\n    used[s]=1;\n    Q.push(s);\n    while(!Q.empty())\n    {\n        int now=Q.front();Q.pop();\n        used[now]=0;\n        for(int i=last[now];i;i=e[i].next)\n        {\n            int v=e[i].to;\n            if(dist[v]<dist[now]+e[i].f&&e[i].w)\n            {\n                dist[v]=dist[now]+e[i].f;\n                prev[v]=now;\n                idx[v]=i;\n                if(!used[v]){used[v]=1;Q.push(v);}\n            }\n        }\n    }\n    if(dist[t]==-1e9)return 0;\n    for(int i=t;i!=s;i=prev[i]){e[idx[i]].w--;e[idx[i]^1].w++;}\n    Ans+=dist[t];\n    return 1;\n}\nint main()\n{\n    cin>>k>>n;\n    t=2*n+1;\n    for(int i=1;i<=n;i++)insert(s,i,0),insert(i+n,t,0);\n    for(int i=1;i<=2*n;i++){cin>>x[i]>>y[i]>>Name[i];Change(Name[i]);}\n    while(1)\n    {\n        cin>>ch1;\n        if(ch1==\"End\")break;\n        cin>>ch2;\n        Change(ch1);Change(ch2);\n        for(int i=1;i<=2*n;i++)\n        {\n            if(ch1==Name[i])k1=i;\n            if(ch2==Name[i])k2=i;\n        }\n        cin>>len;\n        if(k1>k2)swap(k1,k2);//\u4fdd\u8bc1\u7537\u4eba\u5728\u524d\n        val[k1][k2]=max(val[k1][k1],len);\n    }\n    for(int i=1;i<=n;i++)\n        for(int j=n+1;j<=2*n;j++)\n            if(check(i,j))insert(i,j,val[i][j]==0?1:val[i][j]);\n    while(Spfa());//\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\n    cout<<Ans<<endl;\n    return 0;\n}\n```\n",
        "postTime": 1570353838,
        "uid": 144820,
        "name": "zxw666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1500 \u3010\u4e18\u6bd4\u7279\u7684\u70e6\u607c\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5e94\u8be5\u662f\u5e26\u6743\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u9898\uff0c\u6b63\u89e3\u5e94\u8be5\u662fKM\u7b97\u6cd5\uff0c\u7136\u800c\u5e76\u4e0d\u4f1a\u5199\u2026\u2026\n\n\u4e8e\u662f\u5199\u4e86\u4e2a\u8d39\u7528\u6d41\uff0c\u6309\u4e8c\u5206\u56fe\u5efa\u8fb9\uff0c\u8d39\u7528\u5c31\u662f\u7f18\u5206\uff0c\u8dd1\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n\u4e24\u4e2a\u5751\u70b9\uff1a\n\n- \u59d3\u540d\u5ffd\u7565\u5927\u5c0f\u5199\n\n- \u521d\u59cb\u7f18\u5206\u503c\u4e3a1\n\n\u7136\u540e\u5c31\u6ca1\u4ec0\u4e48\u4e86\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <map>\n#define S n*2\n#define T n*2+1\n#define EPS 1e-6\nusing namespace std;\nconst int INF=1<<25;\n//map\u5b58\u5bf9\u5e94\u59d3\u540d\u548c\u8282\u70b9\u7f16\u53f7\nmap<string, int> m;\nstruct pos{\n    int x, y;\n    pos(int a, int b):x(a), y(b){}\n    pos(){}\n}v[60];\n//\u8fb9\nstruct node{\n    int to, val, cost, flow; node *next, *rev;\n    node(int t, int c, int f):to(t), cost(c), flow(f), next(NULL), rev(NULL){}\n    node():to(0), cost(0), flow(0), next(NULL), rev(NULL){}\n}*from[62];\n//\u8868\nstruct li{\n    node *pre, *last;\n    li():pre(NULL), last(NULL){}\n    void push(int t, int c, int f){\n        if(pre) last=last->next=new node(t, c, f);\n        else pre=last=new node(t, c, f);\n    }\n}graph[62];\nint k, n, karma[60][60], flow[62], cost[62], ans;\nbool state[62];\n//\u68c0\u67e5k\u662f\u5426\u5728i\u3001j\u7ebf\u6bb5\u4e0a\nbool check(double s1, int i, int j, int k){\n    double s2=sqrt((v[k].x-v[j].x)*(v[k].x-v[j].x)+(v[k].y-v[j].y)*(v[k].y-v[j].y));\n    double s3=sqrt((v[i].x-v[k].x)*(v[i].x-v[k].x)+(v[i].y-v[k].y)*(v[i].y-v[k].y));\n    if(fabs(s1-s2-s3)<=EPS)\n        return false;\n    return true;\n}\nqueue<int> q;\n//SPFA\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\nbool EK(){\n    q.push(S);\n    for(int i=0;i<=n*2+1;i++)\n        cost[i]=-INF;\n    int w;\n    cost[S]=0; flow[S]=INF; state[S]=1;\n    while(!q.empty()){\n        w=q.front(); q.pop(); state[w]=0;\n        for(node *t=graph[w].pre;t;t=t->next){\n            if(t->flow&&cost[t->to]<cost[w]+t->cost){\n                cost[t->to]=cost[w]+t->cost;\n                flow[t->to]=min(flow[w], t->flow);\n                from[t->to]=t;\n                if(!state[t->to]){\n                    q.push(t->to);\n                    state[t->to]=1;\n                }\n            }\n        }\n    }\n    if(cost[T]==-INF) return false;\n    ans+=cost[T];\n    for(node *t=from[T];t;t=from[t->rev->to]){\n        t->flow-=flow[T]; t->rev->flow+=flow[T];\n    }\n    return true;\n}\n//\u5904\u7406\u5b57\u7b26\u4e32\nvoid fix(string &s){\n    for(string::iterator it=s.begin();it!=s.end();it++)\n        if(*it>='a')\n            *it=*it-'a'+'A';\n}\nint main(){\n    scanf(\"%d\", &k); scanf(\"%d\", &n);\n    string s, en(\"End\");\n    for(int i=0;i<n*2;i++){\n        cin>>v[i].x>>v[i].y>>s;\n        fix(s);\n        m.insert(make_pair(s, i));\n    }\n    for(int i=0;i<n;i++)\n        for(int j=0;j<n;j++)\n            karma[i][j+n]=1;\n    map<string, int>::iterator it;\n    cin>>s;\n    int kar;\n    while(s!=en){\n        fix(s);\n        it=m.find(s);\n        int i=it->second;\n        cin>>s>>kar;\n        fix(s);\n        it=m.find(s);\n        int j=it->second;\n        if(i>j)\n            swap(i, j);\n        karma[i][j]=kar;\n        cin>>s;\n    }\n    //\u5efa\u56fe\n    for(int i=0;i<n;i++){\n        graph[S].push(i, 0, 1);\n        graph[i].push(S, 0, 0);\n        graph[S].last->rev=graph[i].last;\n        graph[i].last->rev=graph[S].last;\n        for(int j=n;j<n*2;j++){\n            double s1=sqrt((v[i].x-v[j].x)*(v[i].x-v[j].x)+(v[i].y-v[j].y)*(v[i].y-v[j].y));\n            if(s1>k) continue;\n            bool f=1;\n            for(int k=0;k<n*2;k++){\n                if(i==k||j==k) continue;\n                if(!check(s1, i, j, k)){\n                    f=0;\n                    break;\n                }\n            }\n            if(f){\n                graph[i].push(j, karma[i][j], 1);\n                graph[j].push(i, -karma[i][j], 0);\n                graph[i].last->rev=graph[j].last;\n                graph[j].last->rev=graph[i].last;\n            }\n        }\n        graph[i+n].push(T, 0, 1);\n        graph[T].push(i+n, 0, 0);\n        graph[T].last->rev=graph[i+n].last;\n        graph[i+n].last->rev=graph[T].last;\n    }\n    //EK\n    while(EK());\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1509271081,
        "uid": 43501,
        "name": "\u4f55\u70b3\u5112",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1500 \u3010\u4e18\u6bd4\u7279\u7684\u70e6\u607c\u3011"
    }
]