[
    {
        "content": "##  [\u9020\u51fa\u6765\u4e00\u4e2a\u6570\u636e\u7ed3\u679chack\u4e86\u6240\u6709\u9898\u89e3... \u4f60\u4eec\u8fd9\u662f\u601d\u60f3\u50f5\u5316\u7684\u8868\u73b0\u554a](https://www.luogu.org/discuss/show/101031)\n \n\n \u8fd9\u7bc7\u9898\u89e3\u5206\u4e24\u5757\uff0c\u5148\u8bb2\u8bb2\u6b64\u9898\u601d\u8def\uff0c\u518d\u5bf9\u4e8e\u5176\u4ed6\u9898\u89e3\u7684\u9519\u8bef\u70b9\u8fdb\u884c\u8be6\u7ec6\u5206\u6790\u3002\n\n\n\n## \u4e00.\u672c\u9898\u601d\u8def\u53ca\u7ec6\u8282\u5904\u7406\n\n####  **0. \u9996\u5148\u4e9a\u745f\u738b\u5b9e\u5728\u662f\u592a\u53ef\u7231\u4e86QwQ\uff0c\u543e\u738b\u4e07\u5c81\uff01**\n![](https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1550651121&di=9604902adbfc30f6fd9527700f93a09d&src=http://www.pujia8.com/static/pics/20170212120059_32.jpg)\n\n~~\u770b\u4ec0\u4e48\u770b\uff0c\u6ca1\u89c1\u8fc7\u4e9a\u745f\u738bSaber\u5417\u3002~~\n\n#### 1. \u8fd9\u9898\u5982\u679c\u4e0d\u8bb2\u6570\u636e\u8303\u56f4\uff0c\u5c31\u4f1a\u8ba9\u4eba\u5341\u5206\u96be\u4ee5\u4e0b\u624b\uff1a\n\n\u9996\u5148\u96c6\u5408\u70b9\u662f\u672c\u9898\u6838\u5fc3\uff0c\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u57fa\u4e8e\u96c6\u5408\u70b9\u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\u3002\u4f46\u4ed6\u4e0d\u544a\u8bc9\u4f60\u70b9\u5728\u54ea\u91cc\u3002\u4f46\u4e00\u770b\u6570\u636e\u8303\u56f4\uff0c$r*c$\u6700\u5927\u7ea6\u7b49\u4e8e$1000$\uff0c\u4e8e\u662f\u4e0d\u7ba1\u4e09\u4e03\u4e8c\u5341\u4e00\uff0c\u5148\u66b4\u529b\u679a\u4e3e\u96c6\u5408\u70b9\u518d\u8bf4\u3002\n\n#### 2. \u96c6\u5408\u70b9\u786e\u5b9a\uff0c\u5982\u4f55\u8ba1\u7b97\u7b54\u6848\uff1f\n\n\u6839\u636e\u9898\u610f\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff1a\n\t\n    \u603b\u8def\u7a0b=\uff08n-1\uff09\u4e2a\u9a91\u58eb\u5230\u96c6\u5408\u70b9\u7684\u8ddd\u79bb+\u6709\u4e2a\u9a91\u58eb\u53bb\u63a5\u56fd\u738b\u4e4b\u95f4\u4e71\u4e03\u516b\u7cdf\u7684\u8ddd\u79bb\n    \n\u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u8ddd\u79bb\u5e76\u4e0d\u662f\u4e24\u70b9\u4e4b\u95f4\u66fc\u54c8\u987f\u8ddd\u79bb\uff0c\u800c\u662f\u901a\u8fc7\u65e5\u5b57\u5f62\u4e0d\u65ad\u8df3\u6765\u8df3\u53bb\u5f97\u5230\u7684\u3002\n\n~~\u90a3\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u90fd\u8fdb\u884cBFS\uff0c\u770b\u8df3\u5230\u96c6\u5408\u70b9\u7684\u6700\u77ed\u8def\u5f84\u662f\u591a\u5c11\u3002~~ \u4ee5\u4e0a\u65b9\u6cd5\u80af\u5b9a\u662f\u8d85\u65f6\u7684\uff0c\u90a3\u6211\u4eec\u53c8\u4f1a\u7528\u5230\u4e00\u4e2a\u5e38\u89c1\u6280\u5de7\uff1a**\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u7b49\u4e8e\u7ec8\u70b9\u5230\u8d77\u70b9\u7684\u6700\u77ed\u8def\u3002**\n\n\u4e8e\u662f\u6211\u4eec\u4ece\u679a\u4e3e\u7684\u8fd9\u4e2a\u96c6\u5408\u70b9\u5f00\u59cb\u8dd1BFS\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u7c7b\u4f3c\u6d2a\u6c34\u586b\u5145\u4f3c\u7684\u90fd\u6c42\u51fa\u6765\u5566\u3002\u53c8\u7531\u4e8e\u679a\u4e3e\u96c6\u5408\u70b9\u4e0d\u5b9a\uff0c\u5b58\u50a8\u65f6\u5019\u53ef\u7528**\u56db\u7ef4\u6570\u7ec4**\u3002\n\n#### 3.\u5bf9\u4e8e\u9a91\u58eb\u63a5\u56fd\u738b\u90e8\u5206\u5982\u4f55\u5206\u6790\uff1f\n\n\u9996\u5148\u5e94\u8be5\u53ef\u4ee5\u60f3\u5230\uff0c\u9a91\u58eb\u4e0d\u53ef\u80fd\u603b\u662f\u521a\u597d\u8df3\u5230\u56fd\u738b\u90a3\u683c\u5b50\uff0c\u82e5\u60f3\u6700\u4f18\u56fd\u738b\u5927\u90e8\u5206\u60c5\u51b5\u90fd\u4f1a\u8d70\u4e00\u70b9\u8ddd\u79bb\u7684\u3002\u3002\u8fd9\u4e5f\u5bfc\u81f4\u4e86\u4e0d\u4e00\u5b9a\u662f\u6700\u8fd1\u7684\u9a91\u58eb\u53bb\u63a5\u56fd\u738b\u3002\n\n\u4f46\u53c8\u5f88\u660e\u663e\u7684\u662f\uff0c\u9a91\u58eb\u5982\u679c\u79bb\u56fd\u738b\u8d8a\u8fd1\uff0c\u56fd\u738b\u5c31\u53ef\u4ee5\u8d70\u7684\u8d8a\u5c11\uff0c\u6240\u4ee5\u9a91\u58eb\u8df3\u5230\u54ea\u4e00\u683c\u5b50\u6700\u4f18\u4e5f\u4e0d\u77e5\u9053\u3002\n\n~~\u4e8e\u662f\u5c31\u4e0d\u4f1a\u4e86~~ \n\n### \u4e8e\u662f\u6211\u4eec\u8d2a\u5fc3\u5730\u60f3\uff0c\u56fd\u738b\u8d70\u7684\u8def\u5e94\u8be5\u4e0d\u4f1a\u8d85\u8fc7\u9a91\u58eb\u4e00\u6b21\u80fd\u8d85\u8fc7\u7684\u6b65\u6570\uff082\u6b65\uff09\uff0c\u4e8e\u662f\u66b4\u529b\u679a\u4e3e\u4ee5\u56fd\u738b\u4e3a\u4e2d\u5fc3\u76845*5\u77e9\u5f62\u786e\u5b9a\u63a5\u56fd\u738b\u7684\u70b9\u3002\n\n\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u6837\u53ef\u4ee5\u8fc7\uff0c\u4f46\u662f\u8fd9\u4e2a\u66b4\u529b\u7ffb\u904d\u9898\u89e3\u4e5f\u6ca1\u6709\u4eba\u8be6\u7ec6\u8bc1\u660e\uff0c\u4e8e\u662f\u73b0\u5728\u6211\u4eec\u6765hack\u4ed6\u3002\n\n## \u4e8c.\u5bf9\u4e8e\u66b4\u529b\u679a\u4e3e5*5\u77e9\u5f62\u7684$hack$\n\n### \u5148\u4e0a\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/52315.png)\n\n~~RT,\u5de6\u4e0b\u662f\u4e9a\u745f\u738b\uff0c\u4e2d\u95f4\u90a3\u4e2a\u662f\u5706\u684c\u9a91\u58eb\u9ad8\u6587\uff08\u96fe\uff09~~\n\n\u7ea2\u683c\u5b50\u662f\u6211\u4eec\u6784\u9020\u51fa\u6765\u7684\u96c6\u5408\u70b9\uff0c\u65c1\u8fb9\u7684\u7ea2\u5708\u662f\u5176\u4ed6\u9a91\u58eb\uff0c\u4ed6\u4eec\u8ddd\u79bb\u7ea2\u683c\u90fd\u53ea\u67091\u6b65\uff0c\u6240\u4ee5\u80af\u5b9a\u9009\u62e9\u90a3\u4e2a\u70b9\u4e3a\u96c6\u5408\u70b9\u3002\n\n\u6ce8\u610f\u5230\u6b64\u65f6\u9ad8\u6587\u5df2\u7ecf\u4e0d\u5728\u738b\u76845*5\u8303\u56f4\u5185\u4e86\uff0c\u6211\u4eec\u6765\u628a\u4e24\u6b21\u8ddd\u79bb\u7b97\u4e00\u7b97\u3002\n\n#### 1. \u6211\u4eec\u6765\u7b97\u4e00\u4e0b\u73b0\u5728\u7684\u603b\u8ddd\u79bb\n\u5176\u4ed6\u9a91\u58eb\u603b\u8ddd\u79bb\u4e00\u5171\u4e3a5\uff0c\u9ad8\u6587\u5230\u96c6\u5408\u70b9\u8ddd\u79bb\u4e3a$d$\uff08\u8fd9\u6837\u5047\u8bbe\u4ed6\u79bb\u96c6\u5408\u70b9\u5f88\u8fdc\u4e5f\u9002\u7528\uff09\n\n\u738b\u5230\u9ad8\u6587\u8981\u8d703\u6b65\u3002\u6240\u4ee5\u4e00\u5171\u4e3a$d+3+5=d+8$\u6b65\u3002\n\n#### 2.\u6211\u4eec\u8ba9\u9ad8\u6587\u8d70\u4e00\u6b65\uff0c\u5206\u6790$5*5$\u65b9\u683c\u5185\u60c5\u51b5\u3002\n\n\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5f53\u9ad8\u6587\u5728\u738b\u7684\u5bf9\u89d2\u7ebf\u4e0a\u65f6\uff0c\u6700\u4f18\u53ef\u4ee5\u7f29\u77ed\u4e00\u6b65\uff0c\u4e8e\u662f\u738b\u53ea\u75282\u6b65\u5230\u9ad8\u6587\u3002\n\n\u7136\u800c\u9ad8\u6587\u5f80\u524d\u8d70\u4e00\u6b65\uff0c\u6700\u52a3\u7684\u60c5\u51b5\u662f\u5fc5\u987b\u539f\u8def\u8fd4\u56de\u624d\u80fd\u5230\u96c6\u5408\u70b9\uff0c\u4e8e\u662f\u9ad8\u6587\u56de\u96c6\u5408\u70b9\u9700\u8981$d+2$\u6b65\u3002\n\n\u5176\u4ed6\u9a91\u58eb\u4e0d\u53d8\uff0c\u5171$d+2+5+2=d+9$\u6b65\u3002\n\n\u4e8e\u662f\u4fbf$hack$\u4e86\uff0c\u9a91\u58eb\u4e0e\u738b\u76f8\u9047\u70b9\u672a\u5fc5\u5728$5*5$\u65b9\u683c\u5185\u3002\n\n#### 3. ~~\u90a3\u662f\u4e0d\u662f$7*7$\u65b9\u683c\u5c31\u597d\u4e86\u5462\uff1f~~\n\n\u5f53\u7136\u4e0d\u662f\uff0c\u7531\u4e0a\u53ef\u77e5\uff0c\u8fbe\u5230\u6700\u52a3\u60c5\u51b5\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u5747\u4e0d\u80fd\u63a7\u5236\u5728\u67d0\u4e00\u65b9\u6846\u5185\uff1a\n1. \u63a5\u738b\u7684\u9a91\u58eb\u5f80\u5185\u8d70\u4e00\u6b65\u4f1a\u4f7f\u5230\u96c6\u5408\u70b9\u7684\u8ddd\u79bb+1(\u5c31\u662f\u539f\u8def\u8fd4\u56de\u7684\u60c5\u51b5)\n2. \u9a91\u58eb\u5904\u5728\u738b\u7684\u5bf9\u89d2\u7ebf\u4e0a\n\n\u8fd9\u91cc\u8fd8\u8981\u8bf4\u8bf4\uff0c\u53ef\u4ee5\u60f3\u8c61\u51fa\u6765\uff0c\u82e5\u4e0d\u5728\u5bf9\u89d2\u7ebf\u4e0a\u5219\u6700\u4f18\u53ef\u4ee5\u51cf\u5c112\u6b65\u8ddd\u79bb\uff0c\u90a3\u7b54\u6848\u4e0d\u53d8\u4f18\u4e5f\u4e0d\u4f1a\u53d8\u52a3\u3002\n\n#### 4. \u90a3\u8fd9\u9898\u662f\u4e0d\u662f\u6ca1\u505a\u5934\u4e86\uff1f\n\n\u9898\u5f53\u7136\u8fd8\u662f\u53ef\u4ee5\u505a\uff0c\u4f60\u53ef\u4ee5\u679a\u4e3e\u68cb\u76d8\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u6765\u5224\u65ad\u662f\u5426\u4e3a\u738b\u4e0e\u9a91\u58eb\u76f8\u9047\u70b9\uff0c\u7136\u540e\u66b4\u529b\u679a\u4e3e\u9a91\u58eb\uff0c\u518d\u66b4\u529b\u679a\u4e3e\u96c6\u5408\u70b9\uff0c\u6700\u52a3\u662f$O(R^3*C^3)$\uff0c\u4f46\u662f\u4e0d\u53ef\u80fd\u8fbe\u5230\u8fd9\u4e48\u5927\u3002\n\n\u5f53\u7136\uff0c\u672c\u9898\u6700\u96be\u7684\u90e8\u5206\u5e76\u4e0d\u662f\u8fd9\u91cc\uff0c\u5982\u679c\u5acc\u9ebb\u70e6\u4e5f\u4e0d\u7528\u60f3\u592a\u590d\u6742\uff0c\u679a\u4e3e$5*5$\u8fc7\u4e86\u5c31\u7b97\u4e86\u5427\u3002\u3002\n\n\n## \u4e09.\u4e00\u4e9b\u5c0f\u7ec6\u8282\n\n1. \u9996\u5148\u662f\u8bfb\u9898\u3002\u3002\u884c\u548c\u5217\u522b\u641e\u6df7\u4e86\u3002\u3002\n\n2. \u679a\u4e3e$5*5$\u65b9\u683c\u522b\u8d8a\u754c\u90fd\u662f\u5c0f\u4e8b\u4e86\n\n3. \u6d2a\u6c34\u586b\u5145\u8bb0\u5fc6\u5316\u90a3\u91cc\uff0c\u5e94\u8be5\u5165\u961f\u65f6\u5019\u5c31\u6807\u8bb0\u8bbf\u95ee\uff0c\u4e0d\u7136\u5728\u961f\u5217\u91cc\u65f6\u5019\u8fd8\u4f1a\u589e\u52a0\u4e00\u5806\u91cd\u590d\u7684\u3002\u3002\n\n4. \u8d4b\u521d\u503c\u65f6\u5c0f\u4e00\u70b9\uff0c\u6211\u5f00\u4e86$INT$_$MAX/3$\u8fd8\u7206\u4e86\u8d1f\u6570\u3002\u3002\n\n## \u56db.\u4e11\u964b\u7684\u4ee3\u7801\n\u4e0d\u5177\u6709\u89c2\u8d4f\u6027\n\n//1. \u679a\u4e3e\u96c6\u5408\u70b9O(10^3)\n//2. BFS\u7b97\u51fa\u5404\u9a91\u58eb\u5230\u6b64\u70b9\u8ddd\u79bb \n\n//3. \u518d\u679a\u4e3e\u96c6\u5408\u70b9\u3002\u3002 \n//4. \u679a\u4e3e\u54ea\u4e2a\u9a91\u58eb\u63a5\uff08\u6216\u90fd\u4e0d\u63a5\uff09\u56fd\u738b\u6700\u4f18\u3002 \n//5. \u603b\u8ddd\u79bb=\u5176\u4ed6\u9a91\u58eb\u5230\u70b9\u7684\u8ddd\u79bb+\n\t//\u6211\u5230\u56fd\u738b\u9644\u8fd1\u7684\u8ddd\u79bb+\u56fd\u738b\u5230\u9644\u8fd1\u7684\u8ddd\u79bb+\u56fd\u738b\u9644\u8fd1\u5230\u70b9\u8ddd\u79bb\uff1b\n```cpp\n\n \n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\nstruct pp{\n\tint l,c;\n\tint d;\n}kn[2000],ki;\n\nint st,r,c;\nint dx[8]={1,2,2,1,-1,-2,-2,-1};\nint dy[8]={2,1,-1,-2,-2,-1,1,2};\nbool v[50][30];\nint ans=1000000000,sum,d[50][30][50][30];//d[a,b,c,d] -> (a,b) to (c,d)\nqueue<pp> q;\n\nbool yuejie(int x,int y)\n{\n\treturn (x<=0||x>r||y<=0||y>c);\n}\n\nvoid bfs(int bx,int by)\n{\n\tmemset(v,0,sizeof(v));\n\tq.push((pp){bx,by,0}); v[bx][by]=1; d[bx][by][bx][by]=0;\n\twhile (!q.empty())\n\t{\n\t\t\n\t\tint xx=q.front().l,yy=q.front().c;\n\t\t\n\t\td[bx][by][xx][yy]=q.front().d; q.pop();\n\t\t\n\t\tfor (int i=0;i<8;i++)\n\t\t{\n\t\t\tint x=xx+dx[i],y=yy+dy[i];\n\t\t\tif (!yuejie(x,y)&&!v[x][y]) v[x][y]=1,q.push((pp){x,y,d[bx][by][xx][yy]+1});\n\t\t}\n\t}\n}\n\nvoid print(int x,int y)\n{\n\tfor (int i=1;i<=r;i++,cout<<endl)\n\tfor (int j=1;j<=c;j++) cout<<d[i][j][x][y]<<\" \";\n\tcout<<endl;\n}\n\nint a(int x){return (x>0)?x:-x;}\n\n\n\nint main()\n{\n\tcin>>r>>c;\n\tmemset(d,0x10f,sizeof(d));\n\tchar cross; int line;\n\twhile (cin>>cross>>line)\n\t{\n\t\tif (st==0) st=1,ki.l=line,ki.c=cross-'A'+1;\n\t\telse kn[st].l=line,kn[st++].c=cross-'A'+1;\n\t}\n\tst--;\n\t//1,2\n\tfor (int i=1;i<=r;i++)\n  \t  for (int j=1;j<=c;j++) bfs(i,j);\n  \t  \n  \t\n  \t//3,4,5\n  \tfor (int i=1;i<=r;i++)\n  \tfor (int j=1;j<=c;j++)  //ji he point \n\t{\n\t\tint sum=0;\n//\t\tprint(i,j);\n\t\tfor (int k=1;k<=st;k++) sum+=d[kn[k].l][kn[k].c][i][j];\n\t\tans=min(sum+max(a(ki.l-i),a(ki.c-j)),ans);\n\t\tfor (int k=1,summ=sum;k<=st;summ=sum,k++)  //knight who pick up the king\n\t\t{\n\t\t\tsumm-=d[kn[k].l][kn[k].c][i][j];\n\t\t\tfor (int ii=max(1,ki.l-3);ii<=min(r,ki.l+3);ii++)  //\u522b\u8d8a\u754c\u4e86 \n\t\t\t  for (int jj=max(1,ki.c-3);jj<=min(c,ki.c+3);jj++)\n\t\t\t  ans=min(\n\t\t\t  \tsumm+d[kn[k].l][kn[k].c][ii][jj]+\n\t\t\t  \tmax(a(ii-ki.l),a(jj-ki.c))+d[ii][jj][i][j],ans);\n\t\t}\n\t}\n\tcout<<ans<<endl;\n}\n```\n",
        "postTime": 1550652053,
        "uid": 15984,
        "name": "\u5929\u6cfd\u9f9f",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf\u3011"
    },
    {
        "content": "Emmm\u2026\n\n\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4eba\u9700\u8981\u8d2a\u5fc3\u641c\u7d22\u738b\u5468\u56f45x5\u5462\uff1f\n\n\u4f9d\u672c\u83dc\u9e21\u770b\uff0c\u672c\u9898\u662fDijkstra + ^\\*&(#(%&\\*@($???!!!!!!\n\n\u672c\u83dc\u9e21\u5728USACO Training\u5148AC\u4e86\u4e00\u904d\uff0c\u7136\u540e\u6765\u6d1b\u8c37TLE\u4e86\u4e24\u4e2a\u70b9( \u00b0~\u00b0 )\n\n\u7136\u540e\u672c\u83dc\u9e21\u624b\u52a8\u6d4b\u4e86\u4e00\u4e0bpriority_queue\u7684push\u548cpop\u901f\u5ea6\u5e76\u4e14\u624b\u6253\u4e86\u4e00\u4e2aheap\u628a\u901f\u5ea6\u63d0\u5230\u4e86priority_queue\u76842.5\u500d\n\n\u7136\u540e\u2026\u2026\u5c31\u6ca1\u6709\u7136\u540e\u4e86\n\n![AC](https://cdn.luogu.com.cn/upload/pic/60816.png)\n\n## \u5173\u952e\u8bcd\n\n* Dijkstra\n* \u5efa\u56fe\n* \u62c6\u70b9\n* \u4f18\u5316\n* TLE\n* priority_queue\n* heap\n\n## \u8bf4\u660e\n\n### \u672c\u9898\u89e3\u5185N=RC\uff0cK\u8868\u793a\u9a91\u58eb\u6570\u91cf\n\n## \u5efa\u56fe\n\n\u6211\u4eec\u60f3\u8981\u77e5\u9053\u6700\u5c0f\u603b\u8ddd\u79bb\u3002\n\n### \u5148\u7b80\u5316\u95ee\u9898\uff1a\u5982\u679c\u9a91\u58eb\u4e0d\u80fd\u5e26\u738b\uff0c\u90a3\u4e48\n\n```\n\u5230pos\u6700\u5c0f\u603b\u8ddd\u79bb = sum(\u6bcf\u4e2a\u9a91\u58eb\u5230pos\u6700\u77ed\u8ddd\u79bb) + \u738b\u5230pos\u6700\u5c0f\u8ddd\u79bb\n```\n\n\u800c\u738b\u5230\u67d0\u4e2apos\uff0c\u5047\u8bbe\u662f$(x, y)$\uff0c\u7684\u6700\u5c0f\u8ddd\u79bb\u662f`max(abs(x - king.x), abs(y - king.y))`\n\n\u89e3\u51b3\u9a91\u58eb\u7684\u95ee\u9898\uff0c\u5e0c\u671b\u80fd\u591f\u5f97\u5230\u6bcf\u4e00\u4e2a\u9a91\u58eb\u5230\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u77ed\u8def\u957f\u5ea6\uff0c\u9996\u5148\u60f3\u5230\u53ef\u4ee5\u4f7f\u7528**floyd\uff08\u591a\u6e90\u6700\u77ed\u8def\u5f84\uff09**\uff0c\u4f46\u662f\u6548\u7387\u662f$O(N^3) = O(R^3\\times C^3)$\u3002R=30\uff0cC=26\uff0c\u6240\u4ee5\u6700\u591a\u8fd0\u884c474,552,000\uff0c**\u4f1aTLE**\uff0c\u60e8\u60e8( \u00b0\u00ac\u00b0 )\n\n\u4e8e\u662f\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u96c6\u5408\u5730\u4ece\u96c6\u5408\u5730\u4f5c\u4e3a\u6e90\u70b9\u505a\u4e00\u4e0b**BFS**\uff0c\u603b\u6548\u7387$O(N^2)$\u3002\n\n**\u5efa\u56fe**\uff1a\u904d\u5386\u68cb\u76d8\u6bcf\u4e00\u4e2a\u683c\u5b50\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u683c\u5b50\u679a\u4e3e\u6240\u6709\u7684\u9a91\u58eb\u8d70\u6cd5\uff0c\u5982\u679c\u4e0d\u6389\u51fa\u68cb\u76d8\u5c31\u4ece\u8be5\u8d77\u70b9\u683c\u5b50\u5411\u8fd9\u4e00\u6b65\u7684\u7ec8\u70b9\u683c\u5b50\u5efa\u4e00\u6761**\u6709\u5411\u8fb9**\uff0c\u56e0\u4e3a\u6700\u7ec8\u904d\u5386\u5230\u5bf9\u9762\u683c\u5b50\u7684\u65f6\u5019\u8fd8\u4f1a\u52a0\u4e00\u6761\u6709\u5411\u8fb9\u56de\u6765\uff0c**\u51d1\u6210\u4e00\u6761\u65e0\u5411\u8fb9**\u3002\n\n### \u4f46\u662f\uff0c\u9a91\u58eb\u662f\u80fd\u5e26\u738b\u7684\uff0c\u6240\u4ee5\n\n```\n\u5230pos\u6700\u5c0f\u603b\u8ddd\u79bb = sum(K-1\u4e2a\u9a91\u58eb\u5230pos\u6700\u77ed\u8ddd\u79bb) + \u67d0\u4e2a\u9a91\u58eb\u5e26\u738b\u52a0\u4e0a\u738b\u5230\u8be5\u9a91\u58eb\u7684\u6700\u5c0f\u603b\u8ddd\u79bb\n```\n\n\u5927\u90e8\u5206\u5176\u4ed6\u9898\u89e3\u5230\u8fd9\u91cc\u5c31\u5f00\u59cb\u5404\u79cd\u7384\u5b66\u8d2a\u5fc3\u4e86( \u00b0~\u00b0 )\n\n\u5176\u5b9e\u8fd9\u4e5f\u53ef\u4ee5\u5efa\u56fe\u3002\u5173\u952e\u5728\u4e8e\u62c6\u70b9\uff0c\u6bcf\u4e2a\u683c\u5b50\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u8868\u793a\u4e24\u79cd\u72b6\u6001\uff1a\n\n* \u72b6\u6001\u4e00\uff1a\u8d70\u5230\u8fd9\u91cc\u7684\u9a91\u58eb**\u8981\u53bb\u4f46\u8fd8\u6ca1\u6709**\u63a5\u738b\n* \u72b6\u6001\u4e8c\uff1a\u8d70\u5230\u8fd9\u91cc\u7684\u9a91\u58eb**\u4e0d\u6253\u7b97\u6216\u8005\u5df2\u7ecf**\u63a5\u4e0a\u738b\n\n\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u5206\u5f00\u5904\u7406\u738b\u7684\u8d70\u6cd5\uff0c\u72b6\u6001\u4e00\u5230\u72b6\u6001\u4e8c\u589e\u52a0\u7684\u8ddd\u79bb\u5c31\u662f\u738b\u4ece\u5b83\u7684\u539f\u59cb\u4f4d\u7f6e\u8d70\u5230\u65b0\u4f4d\u7f6e\u7684\u6700\u77ed\u8ddd\u79bb\u3002\u8fd9\u6837\u5efa\u51fa\u6765\u7684\u56fe\u6709\u4e0d\u540c\u7684\u8fb9\u6743\uff0c\u4e0d\u80fd\u4f7f\u7528BFS\uff0c\u6700\u77ed\u8def\u9700\u8981\u7528**Dijkstra**\uff0c\u603b\u6548\u7387$O(N^2log_2N)$\u3002\n\n**\u5efa\u56fe\u8fc7\u7a0b**\uff1a\u5bf9\u6240\u6709\u72b6\u6001\u4e00\u7684\u70b9\u50cf\u4e4b\u524d\u4e00\u6837\u5efa\u56fe\uff0c\u5bf9\u6240\u6709\u72b6\u6001\u4e8c\u7684\u70b9\u540c\u6837\u50cf\u4e4b\u524d\u4e00\u6837\u5efa\u56fe\uff0c\u5e76\u5728\u6bcf\u4e00\u4e2a\u683c\u5b50$(x, y)$\u4e0a\u4ece\u72b6\u6001\u4e00\u7684\u70b9\u5230\u72b6\u6001\u4e8c\u7684\u70b9\u5efa\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u957f\u5ea6\u4e3a`max(abs(x - king.x), abs(y - king.y))`\u3002\u8fd9\u6837\u603b\u7ed3\u70b9\u6570\u4f1a\u52a0\u500d\uff0c\u4f46\u662f\u7b97\u6cd5\u6548\u7387\u4f9d\u7136\u591f\u3002\n\n## \u5e94\u7528Dijkstra\u5f97\u5230\u7684\u6570\u636e\n\n\u7528ans\u8bb0\u5f55\u6700\u5c0f\u7b54\u6848\uff0c\u7136\u540e\u7528\u6bcf\u4e00\u4e2a\u96c6\u5408\u5730\u5f97\u5230\u7684\u6700\u5c0f\u603b\u8ddd\u79bb\u66f4\u65b0\u5b83\u3002\n\n\u6309\u7167\u521a\u624d\u7684\u601d\u8def\uff0c\u5e94\u8be5\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u9a91\u58eb\u5e26\u738b\uff08\u72b6\u6001\u4e8c\uff09\uff0c\u5176\u4ed6\u9a91\u58eb\u90fd\u4e0d\u5e26\u738b\uff08\u72b6\u6001\u4e00\uff09\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u96c6\u5408\u5730dijkstra\u5b8c\u7684\u6700\u77ed\u8ddd\u79bb\u6570\u636e\u8981\u5f97\u5230\u6700\u5c0f\u603b\u8ddd\u79bb\uff0c\u8fd9\u65f6\u5019\u66b4\u529b\u601d\u8def\u662f\u904d\u5386\u6240\u6709\u9a91\u58eb\uff0c\u628a\u6240\u6709\u5269\u4e0b\u9a91\u58eb\u539f\u59cb\u4f4d\u7f6e\u72b6\u6001\u4e00\u7684\u8ddd\u79bb\u90fd\u52a0\u8d77\u6765\uff0c\u518d\u52a0\u4e0a\u5f53\u524d\u904d\u5386\u5230\u7684\u9a91\u58eb\u7684\u72b6\u6001\u4e8c\u8ddd\u79bb\uff0c\u6548\u7387$O(K^2)$\u3002\u7531\u4e8e\u662f\u7ed9\u6bcf\u4e00\u4e2a\u683c\u5b50\u4f5c\u4e3a\u96c6\u5408\u5730\u6c42\u4e00\u904d\uff0c\u603b\u6548\u7387\u662f$O(NK^2)$\uff0c\u6700\u574f\u603b\u6548\u7387\u662f$O(N^3)$\uff0c**TLE**\u3002\n\n\u4f46\u662f\u6ce8\u610f\u72b6\u6001\u4e00\u7684\u8ddd\u79bb\u6570\u636e\u5728\u904d\u5386\u5230\u4e0d\u540c\u9a91\u58eb\u7684\u65f6\u5019\u91cd\u590d\u4f7f\u7528\u4e86\u3002\u9488\u5bf9\u8fd9\u4e00\u70b9\uff0c\u6211\u7528\u7684**\u4f18\u5316\u601d\u8def\u662f$O(N)$\u6c42\u6240\u6709\u72b6\u6001\u4e00\u8ddd\u79bb\u7684\u548c\uff0c\u518d$O(N)$\u6c42\u6240\u6709\u9a91\u58eb\u4ece\u72b6\u6001\u4e00\u5230\u72b6\u6001\u4e8c\u6700\u5c0f\u7684\u589e\u91cf\u3002\u4e8c\u8005\u76f8\u52a0\u5c31\u662f\u5f53\u524d\u96c6\u5408\u5730\u5bf9\u5e94\u7684\u6700\u77ed\u603b\u8ddd\u79bb\u3002**\n\n## \u8c03\u8bd5\n\n### \u672c\u83dc\u9e21\u72af\u7684\u9519\u8bef\uff1a\n\n* \u5404\u79cd\u7f16\u8bd1\u9519\u8bef\n  * \u7279\u522b\u7684\uff0c`template struct`\u5b9a\u4e49\u7ed3\u6784\u4f53\u4e0d\u80fd\u5728\u7ed3\u6784\u4f53\u91cc\u9762\u5b9a\u4e49\u6bd4\u8f83\u6027\u8d28\u7684operator\n* \u6b7b\u5faa\u73af\n* \u8f93\u5165\u65f6R\u548cC\u5f04\u53cd\n* \u6700\u5c0f\u589e\u91cf\u5728\u65e0\u9a91\u58eb\u60c5\u51b5\u4e0b\u7684\u7279\u5224\n* \u5404\u79cd\u5176\u5b83\u667a\u969cWA\n* USACO AC\uff0c\u6d1b\u8c37TLE\n\n### \u9488\u5bf9USACO AC\uff0c\u6d1b\u8c37TLE\u7684\u8c03\u8bd5\uff1a\n\n\u6211\u81ea\u6d4b\u4e86\u7a0b\u5e8f\u7684\u5404\u90e8\u5206\u7528\u65f6\u3002\u5360\u5927\u90e8\u5206\u65f6\u95f4\u7684\u662fDijkstra\uff0c\u800c\u5728Dijkstra\u91cc\u9762\u6700\u5360\u65f6\u95f4\u7684\u5355\u6b65\u64cd\u4f5c\u662fpriority_queue\u7684push\u548cpop\uff0c\u5bf9\u4e8e\u6570\u636e\u70b9#6\u5360\u4e86\u5dee\u4e0d\u591a\u4e00\u79d2\u3002\u4ee5\u4e0b\u56fe\u7247\u4e2d\u7684t\u5355\u4f4d\u662f\u5fae\u79d2\uff0c\u6570\u636e\u70b9\u662f#6\u3002\n\n![time distribution](https://cdn.luogu.com.cn/upload/pic/60821.png)\n\n\u4e8e\u662f\u6211\u7528\u4ee5\u4e0b\u4ee3\u7801\u6d4b\u8bd5\u4e86priority_queue\u7684\u8fd0\u884c\u901f\u5ea6\n\n```cpp\n#include <cstdio>\n#include <queue>\n#include <cstdlib>\n#include <ctime>\nusing namespace std;\n\nstruct Node {\n\tint id, val;\n\tbool operator >(const Node other) const {\n\treturn (val == other.val) ? (id > other.id) : val > other.val;\n\t}\n} placeholderNode;\n\npriority_queue<Node, vector<Node>, greater<Node> > q;\n\nNode seq[1000005];\n\nunsigned long long pushTime, popTime;\n\nvoid test() {\n\tfor (int i = 0; i < 1000000; i ++)\n\tseq[i] = (Node){rand() % 100000, rand() % 100000};\n\tunsigned long t1 = clock();\n\tfor (int i = 0; i < 1000000; i ++)\n\tq.push(seq[i]);\n\tunsigned long t2 = clock();\n\tfor (int i = 0; i < 1000000; i ++)\n\tq.pop();\n\tunsigned long t3 = clock();\n\tpushTime += t2 - t1;\n\tpopTime += t3 - t2;\n}\n\nint main(int argc, char const *argv[]) {\n\tsrand(time(0));\n\tint percent = 0;\n\tprintf(\"\\r%3d%%\", percent); fflush(stdout);\n\tfor (int i = 0; i < 1000; i ++) {\n\t\ttest();\n\t\tif (percent < i / 10.0) {\n\t\t\tpercent = int(i / 10.0);\n\t\t\tprintf(\"\\r%3d%%\", percent); fflush(stdout);\n\t\t}\n\t}\n\tprintf(\"\\r100%%\\n\");\n\tprintf(\"push: %lf; pop: %lf\\n\", pushTime / 1e9, popTime / 1e9);\n\treturn 0;\n}\n\n```\n\n\u5355\u6b21push/pop\u5e73\u5747\u7528\u65f6\u7ed3\u679c\u5982\u4e0b\uff08\u5c0f\u6570\u7684\u5355\u4f4d\u662f\u5fae\u79d2\uff09\n\n![priority_queue test result](https://cdn.luogu.com.cn/upload/pic/60822.png)\n\n\u8bf4\u660epop\u5360\u4e86\u5927\u90e8\u5206\u7684\u8fd0\u884c\u65f6\u95f4\u3002\u4f46\u662f\u6211\u5e76\u6ca1\u6709\u8db3\u591f\u7684\u65f6\u95f4\u7ed9\u6211\u7684priority_queue\u53bbpop( \u00b0\u00ac\u00b0 )\n\n**\u7406\u8bba\u4e0apriority_queue\u662f\u53ef\u4ee5\u63d0\u901f\u7684\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528\u7684\u662fvector\u4f5c\u4e3a\u5bb9\u5668**\n\n**\u4e8e\u662f\u6211\u624b\u6253\u4e86\u4e00\u4e2a\u4f7f\u7528\u6570\u7ec4\u7684heap**\u5e76\u4e14\u5bf9\u5b83\u8fdb\u884c\u4e86\u5b8c\u5168\u4e00\u6837\u7684\u6d4b\u8bd5\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n#include <queue>\n#include <cstdlib>\n#include <ctime>\n#include <cstring>\nusing namespace std;\n\nstruct Node {\n\tint id, val;\n\tbool operator >(const Node other) const {\n\treturn (val == other.val) ? (id > other.id) : val > other.val;\n\t}\n} seq[1000005];\n\nNode heep[1000005];\nint heepTot;\n\nvoid pushHeap(Node x) {\n\tint id = (++ heepTot);\n\twhile ((id >> 1) && heep[id >> 1] > x) {\n\t\theep[id] = heep[id >> 1];\n\t\tid >>= 1;\n\t}\n\theep[id] = x;\n}\n\nvoid popHeap() {\n\tNode cur = heep[heepTot --];\n\tint id = 1, id2;\n\twhile (true) {\n\t\tif (((id << 1) <= heepTot && cur > heep[id << 1]) && ((id << 1 | 1) <= heepTot && cur > heep[id << 1 | 1])) {\n\t\t\theep[id] = heep[id2 = (id << 1 | (heep[id << 1] > heep[id << 1 | 1]))];\n\t\t\tid = id2;\n\t\t} else if ((id << 1) <= heepTot && cur > heep[id << 1]) {\n\t\t\theep[id] = heep[id << 1];\n\t\t\tid = (id << 1);\n\t\t} else if ((id << 1 | 1) <= heepTot && cur > heep[id << 1 | 1]) {\n\t\t\theep[id] = heep[id << 1 | 1];\n\t\t\tid = (id << 1 | 1);\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\theep[id] = cur;\n}\n\ninline Node heapTop() {\n\treturn heep[1];\n}\n\ninline bool heapEmpty() {\n\treturn heepTot == 0;\n}\n\nvoid debugHeap() {\n\tchar op[2];\n\tint x1, x2;\n\tbool f = true;\n\tNode cur;\n\twhile (f) {\n\t\tscanf(\"%1s\", op);\n\t\tswitch (*op) {\n\t\t\tcase 'a':\n\t\t\tscanf(\"%d%d\", &x1, &x2);\n\t\t\tpushHeap((Node){x1, x2});\n\t\t\tbreak;\n\t\t\tcase 'p':\n\t\t\tpopHeap();\n\t\t\tbreak;\n\t\t\tcase 't':\n\t\t\tcur = heapTop();\n\t\t\tprintf(\"Node(%d, %d)\\n\", cur.id, cur.val);\n\t\t\tbreak;\n\t\t\tcase 'h':\n\t\t\tfor (int i = 1; i <= heepTot; i ++) printf(\"%d: Node(%d, %d)\\n\", i, heep[i].id, heep[i].val);\n\t\t\tbreak;\n\t\t\tcase 'q':\n\t\t\tf = false;\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\tprintf(\"Unknown operation.\\n\");\n\t\t}\n\t}\n}\n\nunsigned long long pushTime, popTime;\n\nvoid test() {\n\tfor (int i = 0; i < 1000000; i ++)\n\tseq[i] = (Node){rand() % 100000, rand() % 100000};\n\tunsigned long t1 = clock();\n\tfor (int i = 0; i < 1000000; i ++)\n\tpushHeap(seq[i]);\n\tunsigned long t2 = clock();\n\tfor (int i = 0; i < 1000000; i ++)\n\tpopHeap();\n\tunsigned long t3 = clock();\n\tpushTime += t2 - t1;\n\tpopTime += t3 - t2;\n}\n\nint main(int argc, char const *argv[]) {\n\tfor (int i = 1; i < argc; i ++) {\n\t\tif (!strcmp(argv[i], \"debug\")) {\n\t\t\ttest();\n\t\t\treturn 0;\n\t\t}\n\t}\n\tsrand(time(0));\n\tint percent = 0;\n\tprintf(\"\\r%3d%%\", percent); fflush(stdout);\n\tfor (int i = 0; i < 1000; i ++) {\n\t\ttest();\n\t\tif (percent < i / 10.0) {\n\t\t\tpercent = int(i / 10.0);\n\t\t\tprintf(\"\\r%3d%%\", percent); fflush(stdout);\n\t\t}\n\t}\n\tprintf(\"\\r100%%\\n\");\n\tprintf(\"push: %lf; pop: %lf\\n\", pushTime / 1e9, popTime / 1e9);\n\treturn 0;\n}\n\n```\n\n**priority_queue vs. myHeap**\uff0c\u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\n\n![priority_queue vs. myHeap](https://cdn.luogu.com.cn/upload/pic/60817.png)\n\npush\u63d0\u901f\u5230\u539f\u6765\u76844.2\u500d\uff0cpop\u63d0\u901f\u5230\u539f\u6765\u76842.6\u500d\n\n\u7136\u540e\u6211\u628a\u6211\u81ea\u5df1\u7684heap\u7c98\u5230\u672c\u9898\u4ee3\u7801\u91cc\u3002\n\n\u7136\u540e\u672c\u83dc\u9e21\u5c31AC\u4e86\u3002\n\n## \u4ee3\u7801\n\nUSACO Training\u539f\u9898\u4ee3\u7801\n\n```cpp\n/*\n TASK: camelot\n LANG: C++\n ID: lutongy1\n */\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <queue>\n\nusing namespace std;\n\n//MARK: Global constants\n\nconst int MAXR = 30, MAXC = 35;\nconst int MAXK = MAXR * MAXC;\nconst int MAXN = MAXR * MAXC * 2;\nconst int MAXM = MAXN * 10;\n\nconst int knightMoves[8][2] = {\n\t{1, 2},\n\t{2, 1},\n\t{2, -1},\n\t{1, -2},\n\t{-1, -2},\n\t{-2, -1},\n\t{-2, 1},\n\t{-1, 2}\n};\n\n//MARK: Global variables\n\nint X, Y, knightCnt;\n\nint knights[MAXK], kingX, kingY;\n\ninline bool setKnight(int id, int x, int y) {\n\tknights[id] = ((x << 5) | y);\n\t// fprintf(stdout, \"setKnight(id: %d, x: %d, y: %d) => %s\\n\", id, x, y, (x < 0 || x >= 32 || y < 0 || y >= 32) ? \"true\" : \"false\");\n\treturn (x < 0 || x >= 32 || y < 0 || y >= 32);\n}\n\ninline int knightX(int id) {\n\t// fprintf(stdout, \"knightX(id: %d) => %d\\n\", id, (knights[id] >> 5) & 0x1f);\n\treturn (knights[id] >> 5) & 0x1f;\n}\n\ninline int knightY(int id) {\n\t// fprintf(stdout, \"knightY(id: %d) => %d\\n\", id, knights[id] & 0x1f);\n\treturn knights[id] & 0x1f;\n}\n\ninline int kingDist(int x, int y) {\n\t// fprintf(stdout, \"kingDist(x: %d, y: %d) => %d\\n\", x, y, max(abs(x), abs(y)));\n\treturn max(abs(x - kingX), abs(y - kingY));\n}\n\ninline int ctoi(char c) {\n\t// fprintf(stdout, \"ctoi(c: \\'%c\\') => %d\\n\", c, ((c >= 'A' && c <= 'Z') ? c - 'A' + 1 : 0));\n\treturn (c >= 'A' && c <= 'Z') ? c - 'A' + 1 : 0;\n}\n\ninline int coordId(int x, int y, bool withKing = false) {\n\t// fprintf(stdout, \"coordId(x: %d, y: %d, withKing: %s) => %d\\n\", x, y, withKing ? \"true\" : \"false\", ((y - 1) + (x - 1) * Y + (withKing ? (X * Y) : 0)));\n\treturn (y - 1) + (x - 1) * Y + (withKing ? (X * Y) : 0);\n}\n\ninline int coordX(int id) {\n\t// fprintf(stdout, \"coordX(id: %d) => %d\\n\", id, (id / Y) % X + 1);\n\treturn (id / Y) % X + 1;\n}\n\ninline int coordY(int id) {\n\t// fprintf(stdout, \"coordY(id: %d) => %d\\n\", id, id % Y + 1);\n\treturn id % Y + 1;\n}\n\ninline bool coordWithKing(int id) {\n\t// fprintf(stdout, \"coordWithKing(id: %d) => %s\\n\", id, (id / X / Y) ? \"true\" : \"false\");\n\treturn id / X / Y;\n}\n\ninline bool isValidMove(int cid, int moveId, int *targid = NULL) {\n\tint x = coordX(cid) + knightMoves[moveId][0];\n\tint y = coordY(cid) + knightMoves[moveId][1];\n\tbool f = (x > 0 && x <= X && y > 0 && y <= Y);\n\tif (f && targid) *targid = coordId(x, y, coordWithKing(cid));\n\t// fprintf(stdout, \"isValidMove(cid: %d, moveId: %d, targid: %p(=>%d)) => %s\\n\", cid, moveId, targid, targid ? *targid : -1, f ? \"true\" : \"false\");\n\treturn f;\n}\n\nstruct Edge {\n\tint v, c;\n\tEdge *next;\n} *h[MAXN], pool[MAXM];\nint edgeTot;\n\ninline void addEdge(int u, int v, int c) {\n\tEdge *p = pool + (edgeTot ++);\n\tp->v = v; p->c = c; p->next = h[u];\n\th[u] = p;\n\t// fprintf(stdout, \"addEdge(u: %d, v: %d, c: %d) => void\\n\", u, v, c);\n}\n\nvoid buildMap() {\n\tint u, v, move;\n\t// Knight moves\n\tfor (u = 0; u < X * Y * 2; u ++)\n\t\tfor (move = 0; move < 8; move ++)\n\t\t\tif (isValidMove(u, move, &v))\n\t\t\t\taddEdge(u, v, 1); // Only forward, since backward will be added later\n\t// Take king\n\tfor (u = 0, v = X * Y; u < X * Y; u ++, v ++)\n\t\taddEdge(u, v, kingDist(coordX(u), coordY(u)));\n}\n\nstruct Node {\n\tint id, val;\n\tbool operator >(const Node other) const {\n\t\treturn (val == other.val) ? (id > other.id) : val > other.val;\n\t}\n} placeholderNode;\n\npriority_queue<Node, vector<Node>, greater<Node> > q;\n\nconst int INF = 0x3f3f3f3f;\n\nint dis[MAXN], pre[MAXN];\nbool vis[MAXN];\n\nvoid dijkstra(int src) {\n\twhile (!q.empty()) q.pop();\n\tmemset(dis, 0x3f, sizeof(dis));\n\tmemset(vis, 0, sizeof(vis));\n\tmemset(pre, -1, sizeof(pre));\n\tq.push((Node){src, dis[src] = 0});\n\twhile (!q.empty()) {\n\t\tint u = q.top().id; q.pop();\n\t\tif (vis[u]) continue;\n\t\tvis[u] = true;\n\t\tfor (Edge *p = h[u]; p; p = p->next) {\n\t\t\tif (dis[p->v] > dis[u] + p->c) {\n\t\t\t\tpre[p->v] = u;\n\t\t\t\tq.push((Node){p->v, dis[p->v] = dis[u] + p->c});\n\t\t\t}\n\t\t}\n\t}\n}\n\n//MARK: Debug\n\nvoid printCoord(int id) {\n\tfprintf(stdout, \"[%c%2d]\", coordX(id) - 1 + 'A', coordY(id));\n}\n\nvoid printTrace(int src, int dest) {\n\tprintCoord(src);\n\twhile (src != dest && pre[src] >= 0) {\n\t\tint nxt = pre[src];\n\t\tif (src - nxt >= X * Y) {\n\t\t\tfprintf(stdout, \" (king %d)\", dis[src] - dis[nxt]);\n\t\t} else {\n\t\t\tfprintf(stdout, \" > \");\n\t\t\tprintCoord(nxt);\n\t\t}\n\t\tsrc = nxt;\n\t}\n\tfprintf(stdout, \" (END)\");\n}\n\nint camelot;\nint ans, sum, minadd, minaddId, kx, ky;\n\nvoid processDis() {\n\tsum = 0; minadd = INF;\n\tfor (int i = 1; i <= knightCnt; i ++) {\n\t\tkx = knightX(i); ky = knightY(i);\n\t\tif (dis[coordId(kx, ky)] == INF) return;\n\t\tsum += dis[coordId(kx, ky)];\n\t\tif (minadd > dis[coordId(kx, ky, true)] - dis[coordId(kx, ky)]) {\n\t\t\tminadd = dis[coordId(kx, ky, true)] - dis[coordId(kx, ky)];\n\t\t\tminaddId = i;\n\t\t}\n\t}\n\tif (!knightCnt) minadd = 0;\n\tans = min(ans, sum + minadd);\n\t/*\n\tfprintf(stdout, \"\\n\");\n\tfor (int i = 1; i <= 60; i ++) fprintf(stdout, \"*\");\n\tfprintf(stdout, \"\\n\\n\");\n\tfprintf(stdout, \"Camelot = \"); printCoord(camelot); fprintf(stdout, \"\\n\");\n\tfprintf(stdout, \"King starts from \"); printCoord(coordId(kingX, kingY)); fprintf(stdout, \"\\n\\n\");\n\tfor (int i = 1; i <= knightCnt; i ++) {\n\t\tfprintf(stdout, \"Knight #%3d: \", i);\n\t\tkx = knightX(i); ky = knightY(i);\n\t\tprintTrace(coordId(kx, ky, minaddId == i), camelot);\n\t\tfprintf(stdout, \"\\n\\tadds %d to total distance.\\n\", dis[coordId(kx, ky, minaddId == i)]);\n\t}\n\tfprintf(stdout, \"\\nTotal distance: %8d\\nAnswer:         %8d\\n\", sum + minadd, ans);\n\tfprintf(stdout, \"\\n\");\n\tfor (int i = 1; i <= 60; i ++) fprintf(stdout, \"*\");\n\tfprintf(stdout, \"\\n\\n\");\n\t*/\n}\n\n//MARK: IO\n\nFILE *in, *out;\n\n//MARK: Main\n\nint main(int argc, char const *argv[]) {\n\t// Input\n\tfprintf(stdout, \"Reading in...\\n\");\n\tin = fopen(\"camelot.in\", \"r\");\n\tchar s_cx[2];\n\tint cy;\n\tfscanf(in, \"%d%d%s%d\", &Y, &X, s_cx, &kingY);\n\tkingX = ctoi(s_cx[0]);\n\twhile (fscanf(in, \"%s%d\", s_cx, &cy) != EOF)\n\t\tsetKnight(++ knightCnt, ctoi(s_cx[0]), cy);\n\tfclose(in);\n\t// Calc\n\tfprintf(stdout, \"Building map...\\n\");\n\tbuildMap();\n\tfprintf(stdout, \"Initialize variable \\'ans\\' to 0x%x\\n\", ans = INF);\n\tfprintf(stdout, \"Iterating through tiles...\\n\");\n\tfor (camelot = 0; camelot < X * Y; camelot ++) {\n\t\tdijkstra(camelot);\n\t\tprocessDis();\n\t}\n\t// Output\n\tfprintf(stdout, \"Writing output...\\n\");\n\tout = fopen(\"camelot.out\", \"w\");\n\tfprintf(out, \"%d\\n\", ans);\n\tfclose(out);\n\tfprintf(stdout, \"Complete!\\n\");\n\treturn 0;\n}\n\n```\n\nUSACO Training\u5e26\u8c03\u8bd5\u8f93\u51fa\u7684\u4ee3\u7801\uff08\u4f1a\u8f93\u51fa\u6bcf\u4e00\u4e2a\u96c6\u5408\u5730\u7684\u6700\u4f18\u89e3\uff0c\u4f46\u662f\u4f1a\u4e25\u91cd\u8d85\u65f6\uff0c\u4e0d\u5efa\u8bae\u7528\u4e8e\u63d0\u4ea4\uff09\n\n ```cpp\n/*\n TASK: camelot\n LANG: C++\n ID: lutongy1\n */\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <queue>\n\nusing namespace std;\n\n//MARK: Global constants\n\nconst int MAXR = 30, MAXC = 35;\nconst int MAXK = MAXR * MAXC;\nconst int MAXN = MAXR * MAXC * 2;\nconst int MAXM = MAXN * 10;\n\nconst int knightMoves[8][2] = {\n\t{1, 2},\n\t{2, 1},\n\t{2, -1},\n\t{1, -2},\n\t{-1, -2},\n\t{-2, -1},\n\t{-2, 1},\n\t{-1, 2}\n};\n\n//MARK: Global variables\n\nint X, Y, knightCnt;\n\nint knights[MAXK], kingX, kingY;\n\ninline bool setKnight(int id, int x, int y) {\n\tknights[id] = ((x << 5) | y);\n\t// fprintf(stdout, \"setKnight(id: %d, x: %d, y: %d) => %s\\n\", id, x, y, (x < 0 || x >= 32 || y < 0 || y >= 32) ? \"true\" : \"false\");\n\treturn (x < 0 || x >= 32 || y < 0 || y >= 32);\n}\n\ninline int knightX(int id) {\n\t// fprintf(stdout, \"knightX(id: %d) => %d\\n\", id, (knights[id] >> 5) & 0x1f);\n\treturn (knights[id] >> 5) & 0x1f;\n}\n\ninline int knightY(int id) {\n\t// fprintf(stdout, \"knightY(id: %d) => %d\\n\", id, knights[id] & 0x1f);\n\treturn knights[id] & 0x1f;\n}\n\ninline int kingDist(int x, int y) {\n\t// fprintf(stdout, \"kingDist(x: %d, y: %d) => %d\\n\", x, y, max(abs(x), abs(y)));\n\treturn max(abs(x - kingX), abs(y - kingY));\n}\n\ninline int ctoi(char c) {\n\tfprintf(stdout, \"ctoi(c: \\'%c\\') => %d\\n\", c, ((c >= 'A' && c <= 'Z') ? c - 'A' + 1 : 0));\n\treturn (c >= 'A' && c <= 'Z') ? c - 'A' + 1 : 0;\n}\n\ninline int coordId(int x, int y, bool withKing = false) {\n\t// fprintf(stdout, \"coordId(x: %d, y: %d, withKing: %s) => %d\\n\", x, y, withKing ? \"true\" : \"false\", ((y - 1) + (x - 1) * Y + (withKing ? (X * Y) : 0)));\n\treturn (y - 1) + (x - 1) * Y + (withKing ? (X * Y) : 0);\n}\n\ninline int coordX(int id) {\n\t// fprintf(stdout, \"coordX(id: %d) => %d\\n\", id, (id / Y) % X + 1);\n\treturn (id / Y) % X + 1;\n}\n\ninline int coordY(int id) {\n\t// fprintf(stdout, \"coordY(id: %d) => %d\\n\", id, id % Y + 1);\n\treturn id % Y + 1;\n}\n\ninline bool coordWithKing(int id) {\n\t// fprintf(stdout, \"coordWithKing(id: %d) => %s\\n\", id, (id / X / Y) ? \"true\" : \"false\");\n\treturn id / X / Y;\n}\n\ninline bool isValidMove(int cid, int moveId, int *targid = NULL) {\n\tint x = coordX(cid) + knightMoves[moveId][0];\n\tint y = coordY(cid) + knightMoves[moveId][1];\n\tbool f = (x > 0 && x <= X && y > 0 && y <= Y);\n\tif (f && targid) *targid = coordId(x, y, coordWithKing(cid));\n\tfprintf(stdout, \"isValidMove(cid: %d, moveId: %d, targid: %p(=>%d)) => %s\\n\", cid, moveId, targid, targid ? *targid : -1, f ? \"true\" : \"false\");\n\treturn f;\n}\n\nstruct Edge {\n\tint v, c;\n\tEdge *next;\n} *h[MAXN], pool[MAXM];\nint edgeTot;\n\ninline void addEdge(int u, int v, int c) {\n\tEdge *p = pool + (edgeTot ++);\n\tp->v = v; p->c = c; p->next = h[u];\n\th[u] = p;\n\tfprintf(stdout, \"addEdge(u: %d, v: %d, c: %d) => void\\n\", u, v, c);\n}\n\nvoid buildMap() {\n\tint u, v, move;\n\t// Knight moves\n\tfor (u = 0; u < X * Y * 2; u ++)\n\t\tfor (move = 0; move < 8; move ++)\n\t\t\tif (isValidMove(u, move, &v))\n\t\t\t\taddEdge(u, v, 1); // Only forward, since backward will be added later\n\t// Take king\n\tfor (u = 0, v = X * Y; u < X * Y; u ++, v ++)\n\t\taddEdge(u, v, kingDist(coordX(u), coordY(u)));\n}\n\nstruct Node {\n\tint id, val;\n\tbool operator >(const Node other) const {\n\t\treturn (val == other.val) ? (id > other.id) : val > other.val;\n\t}\n} placeholderNode;\n\npriority_queue<Node, vector<Node>, greater<Node> > q;\n\nconst int INF = 0x3f3f3f3f;\n\nint dis[MAXN], pre[MAXN];\nbool vis[MAXN];\n\nvoid dijkstra(int src) {\n\twhile (!q.empty()) q.pop();\n\tmemset(dis, 0x3f, sizeof(dis));\n\tmemset(vis, 0, sizeof(vis));\n\tmemset(pre, -1, sizeof(pre));\n\tq.push((Node){src, dis[src] = 0});\n\twhile (!q.empty()) {\n\t\tint u = q.top().id; q.pop();\n\t\tif (vis[u]) continue;\n\t\tvis[u] = true;\n\t\tfor (Edge *p = h[u]; p; p = p->next) {\n\t\t\tif (dis[p->v] > dis[u] + p->c) {\n\t\t\t\tpre[p->v] = u;\n\t\t\t\tq.push((Node){p->v, dis[p->v] = dis[u] + p->c});\n\t\t\t}\n\t\t}\n\t}\n}\n\n//MARK: Debug\n\nvoid printCoord(int id) {\n\tfprintf(stdout, \"[%c%2d]\", coordX(id) - 1 + 'A', coordY(id));\n}\n\nvoid printTrace(int src, int dest) {\n\tprintCoord(src);\n\twhile (src != dest && pre[src] >= 0) {\n\t\tint nxt = pre[src];\n\t\tif (src - nxt >= X * Y) {\n\t\t\tfprintf(stdout, \" (king %d)\", dis[src] - dis[nxt]);\n\t\t} else {\n\t\t\tfprintf(stdout, \" > \");\n\t\t\tprintCoord(nxt);\n\t\t}\n\t\tsrc = nxt;\n\t}\n\tfprintf(stdout, \" (END)\");\n}\n\nint camelot;\nint ans, sum, minadd, minaddId, kx, ky;\n\nvoid processDis() {\n\tsum = 0; minadd = INF;\n\tfor (int i = 1; i <= knightCnt; i ++) {\n\t\tkx = knightX(i); ky = knightY(i);\n\t\tif (dis[coordId(kx, ky)] == INF) return;\n\t\tsum += dis[coordId(kx, ky)];\n\t\tif (minadd > dis[coordId(kx, ky, true)] - dis[coordId(kx, ky)]) {\n\t\t\tminadd = dis[coordId(kx, ky, true)] - dis[coordId(kx, ky)];\n\t\t\tminaddId = i;\n\t\t}\n\t}\n\tif (!knightCnt) minadd = 0;\n\tans = min(ans, sum + minadd);\n\tfprintf(stdout, \"\\n\");\n\tfor (int i = 1; i <= 60; i ++) fprintf(stdout, \"*\");\n\tfprintf(stdout, \"\\n\\n\");\n\tfprintf(stdout, \"Camelot = \"); printCoord(camelot); fprintf(stdout, \"\\n\");\n\tfprintf(stdout, \"King starts from \"); printCoord(coordId(kingX, kingY)); fprintf(stdout, \"\\n\\n\");\n\tfor (int i = 1; i <= knightCnt; i ++) {\n\t\tfprintf(stdout, \"Knight #%3d: \", i);\n\t\tkx = knightX(i); ky = knightY(i);\n\t\tprintTrace(coordId(kx, ky, minaddId == i), camelot);\n\t\tfprintf(stdout, \"\\n\\tadds %d to total distance.\\n\", dis[coordId(kx, ky, minaddId == i)]);\n\t}\n\tfprintf(stdout, \"\\nTotal distance: %8d\\nAnswer:         %8d\\n\", sum + minadd, ans);\n\tfprintf(stdout, \"\\n\");\n\tfor (int i = 1; i <= 60; i ++) fprintf(stdout, \"*\");\n\tfprintf(stdout, \"\\n\\n\");\n}\n\n//MARK: IO\n\nFILE *in, *out;\n\n//MARK: Main\n\nint main(int argc, char const *argv[]) {\n\t// Input\n\tfprintf(stdout, \"Reading in...\\n\");\n\tin = fopen(\"camelot.in\", \"r\");\n\tchar s_cx[2];\n\tint cy;\n\tfscanf(in, \"%d%d%s%d\", &Y, &X, s_cx, &kingY);\n\tkingX = ctoi(s_cx[0]);\n\twhile (fscanf(in, \"%s%d\", s_cx, &cy) != EOF)\n\t\tsetKnight(++ knightCnt, ctoi(s_cx[0]), cy);\n\tfclose(in);\n\t// Calc\n\tfprintf(stdout, \"Building map...\\n\");\n\tbuildMap();\n\tfprintf(stdout, \"Initialize variable \\'ans\\' to 0x%x\\n\", ans = INF);\n\tfprintf(stdout, \"Iterating through tiles...\\n\");\n\tfor (camelot = 0; camelot < X * Y; camelot ++) {\n\t\tdijkstra(camelot);\n\t\tprocessDis();\n\t}\n\t// Output\n\tfprintf(stdout, \"Writing output...\\n\");\n\tout = fopen(\"camelot.out\", \"w\");\n\tfprintf(out, \"%d\\n\", ans);\n\tfclose(out);\n\tfprintf(stdout, \"Complete!\\n\");\n\treturn 0;\n}\n\n```\n\n\u6d1b\u8c37\u4ee3\u7801\uff08\u5e26\u6709myHeap\uff09\n\n```cpp\n/*\n TASK: camelot\n LANG: C++\n ID: lutongy1\n */\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <ctime>\n\nusing namespace std;\n\n//MARK: Global constants\n\nconst int MAXR = 30, MAXC = 45;\nconst int MAXK = MAXR * MAXC;\nconst int MAXN = MAXR * MAXC * 2;\nconst int MAXM = MAXN * 10;\n\nconst int knightMoves[8][2] = {\n\t{1, 2},\n\t{2, 1},\n\t{2, -1},\n\t{1, -2},\n\t{-1, -2},\n\t{-2, -1},\n\t{-2, 1},\n\t{-1, 2}\n};\n\n//MARK: Global variables\n\nint X, Y, knightCnt;\n\nint knights[MAXK], kingX, kingY;\n\ninline bool setKnight(int id, int x, int y) {\n\tknights[id] = ((x << 5) | y);\n\t// fprintf(stderr, \"setKnight(id: %d, x: %d, y: %d) => %s\\n\", id, x, y, (x < 0 || x >= 32 || y < 0 || y >= 32) ? \"true\" : \"false\");\n\treturn (x < 0 || x >= 32 || y < 0 || y >= 32);\n}\n\ninline int knightX(int id) {\n\t// fprintf(stderr, \"knightX(id: %d) => %d\\n\", id, (knights[id] >> 5) & 0x1f);\n\treturn (knights[id] >> 5) & 0x1f;\n}\n\ninline int knightY(int id) {\n\t// fprintf(stderr, \"knightY(id: %d) => %d\\n\", id, knights[id] & 0x1f);\n\treturn knights[id] & 0x1f;\n}\n\ninline int kingDist(int x, int y) {\n\t// fprintf(stderr, \"kingDist(x: %d, y: %d) => %d\\n\", x, y, max(abs(x), abs(y)));\n\treturn max(abs(x - kingX), abs(y - kingY));\n}\n\ninline int ctoi(char c) {\n\t// fprintf(stderr, \"ctoi(c: \\'%c\\') => %d\\n\", c, ((c >= 'A' && c <= 'Z') ? c - 'A' + 1 : 0));\n\treturn (c >= 'A' && c <= 'Z') ? c - 'A' + 1 : 0;\n}\n\ninline int coordId(int x, int y, bool withKing = false) {\n\t// fprintf(stderr, \"coordId(x: %d, y: %d, withKing: %s) => %d\\n\", x, y, withKing ? \"true\" : \"false\", ((y - 1) + (x - 1) * Y + (withKing ? (X * Y) : 0)));\n\treturn (y - 1) + (x - 1) * Y + (withKing ? (X * Y) : 0);\n}\n\ninline int coordX(int id) {\n\t// fprintf(stderr, \"coordX(id: %d) => %d\\n\", id, (id / Y) % X + 1);\n\treturn (id / Y) % X + 1;\n}\n\ninline int coordY(int id) {\n\t// fprintf(stderr, \"coordY(id: %d) => %d\\n\", id, id % Y + 1);\n\treturn id % Y + 1;\n}\n\ninline bool coordWithKing(int id) {\n\t// fprintf(stderr, \"coordWithKing(id: %d) => %s\\n\", id, (id / X / Y) ? \"true\" : \"false\");\n\treturn id / X / Y;\n}\n\ninline bool isValidMove(int cid, int moveId, int *targid = NULL) {\n\tint x = coordX(cid) + knightMoves[moveId][0];\n\tint y = coordY(cid) + knightMoves[moveId][1];\n\tbool f = (x > 0 && x <= X && y > 0 && y <= Y);\n\tif (f && targid) *targid = coordId(x, y, coordWithKing(cid));\n\t// fprintf(stderr, \"isValidMove(cid: %d, moveId: %d, targid: %p(=>%d)) => %s\\n\", cid, moveId, targid, targid ? *targid : -1, f ? \"true\" : \"false\");\n\treturn f;\n}\n\nstruct Edge {\n\tint v, c;\n\tEdge *next;\n} *h[MAXN], pool[MAXM];\nint edgeTot;\n\ninline void addEdge(int u, int v, int c) {\n\tEdge *p = pool + (edgeTot ++);\n\tp->v = v; p->c = c; p->next = h[u];\n\th[u] = p;\n\t// fprintf(stderr, \"addEdge(u: %d, v: %d, c: %d) => void\\n\", u, v, c);\n}\n\nvoid buildMap() {\n\tint u, v, move;\n\t// Knight moves\n\tfor (u = 0; u < X * Y * 2; u ++)\n\t\tfor (move = 0; move < 8; move ++)\n\t\t\tif (isValidMove(u, move, &v))\n\t\t\t\taddEdge(u, v, 1); // Only forward, since backward will be added later\n\t// Take king\n\tfor (u = 0, v = X * Y; u < X * Y; u ++, v ++)\n\t\taddEdge(u, v, kingDist(coordX(u), coordY(u)));\n}\n\nstruct Node {\n\tint id, val;\n\tbool operator >(const Node other) const {\n\t\treturn (val == other.val) ? (id > other.id) : val > other.val;\n\t}\n} placeholderNode;\n\nNode heep[1000005];\nint heepTot;\n\nvoid pushHeap(Node x) {\n\tint id = (++ heepTot);\n\twhile ((id >> 1) && heep[id >> 1] > x) {\n\t\theep[id] = heep[id >> 1];\n\t\tid >>= 1;\n\t}\n\theep[id] = x;\n}\n\nvoid popHeap() {\n\tNode cur = heep[heepTot --];\n\tint id = 1, id2;\n\twhile (true) {\n\t\tif (((id << 1) <= heepTot && cur > heep[id << 1]) && ((id << 1 | 1) <= heepTot && cur > heep[id << 1 | 1])) {\n\t\t\theep[id] = heep[id2 = (id << 1 | (heep[id << 1] > heep[id << 1 | 1]))];\n\t\t\tid = id2;\n\t\t} else if ((id << 1) <= heepTot && cur > heep[id << 1]) {\n\t\t\theep[id] = heep[id << 1];\n\t\t\tid = (id << 1);\n\t\t} else if ((id << 1 | 1) <= heepTot && cur > heep[id << 1 | 1]) {\n\t\t\theep[id] = heep[id << 1 | 1];\n\t\t\tid = (id << 1 | 1);\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\theep[id] = cur;\n}\n\ninline Node heapTop() {\n\treturn heep[1];\n}\n\ninline bool heapEmpty() {\n\treturn heepTot == 0;\n}\n\nconst int INF = 0x3f3f3f3f;\n\nint dis[MAXN], pre[MAXN];\nbool vis[MAXN];\n\nint dijkstraLoop1Count, dijkstraLoop2Count;\nunsigned long qPushTime = 0;\n\nvoid dijkstra(int src) {\n\twhile (!heapEmpty()) popHeap();\n\tmemset(dis, 0x3f, sizeof(dis));\n\tmemset(vis, 0, sizeof(vis));\n\t// memset(pre, -1, sizeof(pre));\n\t// unsigned long tmp = clock();\n\tpushHeap((Node){src, dis[src] = 0});\n\t// qPushTime += clock() - tmp;\n\twhile (!heapEmpty()) {\n\t\tdijkstraLoop1Count ++;\n\t\tint u = heapTop().id; popHeap();\n\t\tif (vis[u]) continue;\n\t\tvis[u] = true;\n\t\tfor (Edge *p = h[u]; p; p = p->next) {\n\t\t\tdijkstraLoop2Count ++;\n\t\t\tif (dis[p->v] > dis[u] + p->c) {\n\t\t\t\t// pre[p->v] = u;\n\t\t\t\t// tmp = clock();\n\t\t\t\tpushHeap((Node){p->v, dis[p->v] = dis[u] + p->c});\n\t\t\t\t// qPushTime += clock() - tmp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n//MARK: Debug\n\nvoid printCoord(int id) {\n\tfprintf(stderr, \"[%c%2d]\", coordX(id) - 1 + 'A', coordY(id));\n}\n\nvoid printTrace(int src, int dest) {\n\tprintCoord(src);\n\twhile (src != dest && pre[src] >= 0) {\n\t\tint nxt = pre[src];\n\t\tif (src - nxt >= X * Y) {\n\t\t\tfprintf(stderr, \" (king %d)\", dis[src] - dis[nxt]);\n\t\t} else {\n\t\t\tfprintf(stderr, \" > \");\n\t\t\tprintCoord(nxt);\n\t\t}\n\t\tsrc = nxt;\n\t}\n\tfprintf(stderr, \" (END)\");\n}\n\nint camelot;\nint ans, sum, minadd, minaddId, kx, ky;\n\nvoid processDis() {\n\tsum = 0; minadd = INF;\n\tfor (int i = 1; i <= knightCnt; i ++) {\n\t\tkx = knightX(i); ky = knightY(i);\n\t\tif (dis[coordId(kx, ky)] == INF) return;\n\t\tsum += dis[coordId(kx, ky)];\n\t\tif (minadd > dis[coordId(kx, ky, true)] - dis[coordId(kx, ky)]) {\n\t\t\tminadd = dis[coordId(kx, ky, true)] - dis[coordId(kx, ky)];\n\t\t\t// minaddId = i;\n\t\t}\n\t}\n\tif (!knightCnt) minadd = 0;\n\tans = min(ans, sum + minadd);\n\t/*\n\tfprintf(stderr, \"\\n\");\n\tfor (int i = 1; i <= 60; i ++) fprintf(stderr, \"*\");\n\tfprintf(stderr, \"\\n\\n\");\n\tfprintf(stderr, \"Camelot = \"); printCoord(camelot); fprintf(stderr, \"\\n\");\n\tfprintf(stderr, \"King starts from \"); printCoord(coordId(kingX, kingY)); fprintf(stderr, \"\\n\\n\");\n\tfor (int i = 1; i <= knightCnt; i ++) {\n\t\tfprintf(stderr, \"Knight #%3d: \", i);\n\t\tkx = knightX(i); ky = knightY(i);\n\t\tprintTrace(coordId(kx, ky, minaddId == i), camelot);\n\t\tfprintf(stderr, \"\\n\\tadds %d to total distance.\\n\", dis[coordId(kx, ky, minaddId == i)]);\n\t}\n\tfprintf(stderr, \"\\nTotal distance: %8d\\nAnswer:         %8d\\n\", sum + minadd, ans);\n\tfprintf(stderr, \"\\n\");\n\tfor (int i = 1; i <= 60; i ++) fprintf(stderr, \"*\");\n\tfprintf(stderr, \"\\n\\n\");\n\t*/\n}\n\n//MARK: IO\n\nFILE *in, *out;\n\n//MARK: Main\n\nint main(int argc, char const *argv[]) {\n\t// Input\n\tfprintf(stderr, \"Reading in... t=%lu\\n\", clock());\n\tin = stdin;\n\tchar s_cx[2];\n\tint cy;\n\tfscanf(in, \"%d%d%s%d\", &Y, &X, s_cx, &kingY);\n\tkingX = ctoi(s_cx[0]);\n\twhile (fscanf(in, \"%s%d\", s_cx, &cy) != EOF)\n\t\tsetKnight(++ knightCnt, ctoi(s_cx[0]), cy);\n\t// fclose(in);\n\t// Calc\n\tfprintf(stderr, \"Building map... t=%lu\\n\", clock());\n\tbuildMap();\n\tfprintf(stderr, \"Initialize variable \\'ans\\' to 0x%x... t=%lu\\n\", ans = INF, clock());\n\tfprintf(stderr, \"Iterating through tiles... t=%lu\\n\", clock());\n\tunsigned long dijTime = 0, procTime = 0, timeTmp;\n\tdijkstraLoop1Count = 0; dijkstraLoop2Count = 0;\n\tfor (camelot = 0; camelot < X * Y; camelot ++) {\n\t\ttimeTmp = clock();\n\t\tdijkstra(camelot);\n\t\tdijTime += clock() - timeTmp;\n\t\ttimeTmp = clock();\n\t\tprocessDis();\n\t\tprocTime += clock() - timeTmp;\n\t}\n\tfprintf(stderr, \"dijkstra: %lu \u00b5s; processDis: %lu \u03bcs\\n\", dijTime, procTime);\n\tfprintf(stderr, \"dijkstra avg loop times: { 1: %.2lf, 2: %.2lf }\\n\", (double) dijkstraLoop1Count / X / Y, (double) dijkstraLoop2Count / X / Y);\n\t// fprintf(stderr, \"q.push: %lu \u00b5s\\n\", qPushTime);\n\t// Output\n\tfprintf(stderr, \"Writing output... t=%lu\\n\", clock());\n\tout = stdout;\n\tfprintf(out, \"%d\\n\", ans);\n\t// fclose(out);\n\tfprintf(stderr, \"Complete! t=%lu\\n\", clock());\n\treturn 0;\n}\n\n```\n",
        "postTime": 1560531876,
        "uid": 37935,
        "name": "lutongyu",
        "ccfLevel": 0,
        "title": "P1930 [USACO Training 3.3] Camelot - Dijkstra analysis and solution"
    },
    {
        "content": "~~\u5c0f\u849f\u84bbA\u4e86\u8fd9\u9053\u9898\uff0c\u5f00\u5fc3\u5730\u8fc7\u6765\u6c34\u4e00\u6ce2\u9898\u89e3~~\n\n\u601d\u8def\u5c31\u662f\u51b3\u5b9a\u5148\u66b4\u529b\u679a\u4e3e\u96c6\u5408\u70b9\uff0c\u518d\u770b\u600e\u4e48\u5904\u7406\u56fd\u738b\u548c\u9a91\u58eb\u66f4\u4f18\uff08\u4e5f\u5c31\u662f\u600e\u4e48\u628a\u4ed6\u8fd0\u8fc7\u53bb\uff09\uff08\u89e3\u51b3\u9a91\u58eb\u8981\u7d27\uff09\n\n\u4e5f\u5c31\u662f\u66b4\u529b\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u7b97\u51fa\u6240\u6709\u9a91\u58eb\u5230\u8fd9\u91cc\u7684\u8ddd\u79bb\uff08\u5f53\u7136\uff0c\u8fd9\u4e2a\u6700\u5c0f\u8ddd\u79bb\u8fd8\u8981\u8003\u8651\u56fd\u738b\u600e\u4e48\u63a5\uff09\u7136\u540emin\u4e00\u4e0b\u627e\u5230\u8ddd\u79bb\u6700\u5c0f\u7684\u70b9\uff0c\u7136\u540e\u628a\u6240\u6709\u7684\u6b65\u6570\u4e5f\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4e5f\u7d2f\u52a0\u51fa\u6765 : )\n\n\u4e0d\u8fc7\u4e00\u4e2a\u4e00\u4e2a\u53bb\u679a\u4e3e\u592a\u8d39\u65f6\u95f4\u4e86\uff0c\u4f46\u662f\u6211\u53c8\u4e0d\u77e5\u9053\u6700\u77ed\u8def\u600e\u4e48\u7528\u5230\u8fd9\u4e0a\u9762\uff1b\n\n\u53e6\u5916\u8981\u8bf4\u7684\u5c31\u662f\uff0c\u9a91\u58eb\u63a5\u56fd\u738b\u8fd9\u91cc\u4e5f\u9700\u8981\u4e00\u70b9\u5c0f\u6280\u5de7\u3002\u56e0\u4e3a\u9a91\u58eb\u63a5\u56fd\u738b\u6700\u4f18\u7684\u60c5\u51b5\u5c31\u662f\u9a91\u58eb\u8d70\u5230\u4ee5\u56fd\u738b\u4e3a\u4e2d\u5fc35*5\u7684\u8303\u56f4\u5185\uff0c\u7136\u540e\u8ba9\u56fd\u738b\u81ea\u5df1\u8d70\u5230\u9a91\u58eb\u90a3\u91cc\u53bb\uff08\u5982\u679c\u9a91\u58eb\u76f4\u63a5\u5c31\u53ef\u4ee5\u53bb\u5230\u56fd\u738b\u6240\u5728\u7684\u90a3\u4e2a\u70b9\u90a3\u56fd\u738b\u5c31\u4e0d\u7528\u8d70\u8def\u4e86\uff09\u3002\n\n\u6709\u4e00\u4e2a\u795e\u5947\u800c\u6709\u7528\u7684\u601d\u8def\u5c31\u662f\u5f00\u4e00\u4e2a\u56db\u7ef4\u6570\u7ec4bk\u3002bk[i][j][k][l]\u8868\u793a\u4ece\u7b2ci\u884c\u7b2cj\u5217\u90a3\u4e2a\u70b9\u5230\u7b2ck\u884c\u7b2cl\u5217\u7684\u90a3\u4e2a\u70b9\u7684\u8ddd\u79bb\u3002\n\nP.S.\uff1a\u6211\u8fd9\u91cc\u7684bk\u7528\u4e00\u4e2a\u53e6\u5916\u7684\u51fd\u6570\u8fdb\u884c\u9884\u5904\u7406\uff0c\u7528bfs\u3002\u867d\u7136\u53cd\u590d\u8c03\u7528bfs\u5f88\u8d39\u65f6\u95f4\uff08~~\u4f46\u662f\u8c8c\u4f3c\u5f88\u597d\u7528~~\uff09\u3002\u3002\u3002\n\n\u7136\u540e\uff01\u4f9d\u7136\u662f\u6ca1\u6709A\u7684\u3002\u56e0\u4e3a\u6709\u51e0\u4e2a\u6bd4\u8f83\u5751\u7239\u7684\u6570\u636e\uff0c\u6bd4\u5982\u6574\u4e2a\u68cb\u76d8\u5e03\u6ee1\u9a91\u58eb\u7b49\u7b49\u5f88\u5751\u7684\u6570\u636e\u70b9\u3002\u3002\u3002\u6d1b\u8c37\u7684\u6570\u636e\u662f\u6ca1\u6709\u5b98\u7f51\u5f3a\u5927\u7684\uff0c\u56e0\u4e3a\u5b98\u7f51\u8fd8\u6709\u51e0\u4e2a\u6bd4\u8f83\u5751\u7684\u6570\u636e\u70b9\u3002\u3002\u3002\u6bd4\u5982\u8bf4\u4e0b\u9762\u8fd9\u4e2a\uff1a\n```\n2 2\nA 1\nB 2\n```\nemmm...\u5982\u679c\u60f3\u8981\u4ee3\u7801\u771f\u7684\u7edd\u5bf9\u6b63\u786e\u7684\u8bdd\uff0c\u53ef\u4ee5\u62ff\u53bb\u8c03\u8bd5\u8c03\u8bd5\u3002\u3002\u3002\n\n\u6211\u662f\u88ab\u8fd9\u4e2a\u6570\u636e\u5751\u5230\u4e86\uff0c\u56e0\u4e3a\u4e8b\u5148\u770b\u4e86dalao\u7684\u9898\u89e3\uff0c\u53d1\u73b0\u4e0d\u80fd\u659c\u7740\u8d70\uff0c\u7136\u540e\u5c31\u6253\u4e86abs(i-king.x)+abs(j-king.y)\uff0c\u4f46\u5176\u5b9e\u662fmax(abs(i-king.x),abs(j-king.y))\u3002\u3002\u3002\n\n\u5570\u55e6\u4e86\u4e00\u5927\u5806\uff0c\u5177\u4f53\u601d\u8def\u89c1\u4ee3\u7801\uff1a\n```\n/*\nID:zhangji78\nLANG:C++\nTASK:camelot\n*/\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint dx[8]={-2,-1,-2,1,2,2,1,-1};//\u9a91\u58eb\u904d\u5386\u7684\u65b9\u5411\nint dy[8]={-1,2,1,2,1,-1,-2,-2};\nconst int inf=99999999;//\u5047\u88c5\u8fd9\u662f\u6b63\u65e0\u7a77\uff08\u624b\u52a8\u6ed1\u7a3d\uff09\nstruct node\n{\n    int x,y,s;//\u7528\u4e8e\u5bbd\u641c\u7684list\u6570\u7ec4\u3002x->\u884c\u5750\u6807\uff0cy->\u5217\u5750\u6807\uff0cs->\u5230\u8fd9\u513f\n}list[12000];//\u9700\u8981\u7528\u51e0\u6b65\u3002\nstruct wz\n{\n    int x,y;\n}king,knight[12000];\n//\u7384\u5b66...\u660e\u660e\u6570\u636e\u6700\u5927\u4e5f\u5c31\u662f26*40\uff0c\u5374\u4e00\u5b9a\u8981\u5f00\u523012000\uff0c\u6211\u4e4b\u524d\u5f001200\u90fd\n//\u4f1aRE...\nint n,m,tj,head,tail;\nbool kk[30][50];\nint bk[50][30][50][30],all,bs;\n//bk[i][j][k][l]\u8868\u793a(i,j)\u5230(k,l)\u9a91\u58eb\u8d70\u7684\u8ddd\u79bb...\nvoid bfs(int x,int y)\n{\n//emmm...\u6807\u51c6\u7684bfs\uff0c\u5982\u679c\u4e0d\u559c\u6b22\u53ef\u4ee5\u6539\u6210dfs\uff0c\u4f46\u662f\u65f6\u95f4...\u5475\u5475...\u56e0\u4e3a\n//\u8be5\u51fd\u6570\u662f\u8981\u53cd\u590d\u8c03\u7528\u7684...\u5efa\u8bae\u7528bfs...\n    head=1;tail=2;\n    list[head].x=x;list[head].y=y;\n    bk[x][y][x][y]=0;//\u8fd9\u662f\u4e00\u4e2a\u5751\u70b9\n    memset(kk,false,sizeof(kk));kk[x][y]=true;\n    while(head<tail)\n    {\n    \tif(tail==n*m+1)break;\n        for(int i=0;i<=7;i++)\n        {\n            int xx=list[head].x+dx[i],yy=list[head].y+dy[i];\n            if(xx>=1&&xx<=n&&yy>=1&&yy<=m)\n            {\n                if(kk[xx][yy]==false)\n                {\n                    kk[xx][yy]=true;\n                    list[tail].x=xx;list[tail].y=yy;\n                    list[tail].s=list[head].s+1;\n                    bk[x][y][xx][yy]=list[tail].s;\n                    bk[xx][yy][x][y]=list[tail].s;\n                    tail++;\n                }\n            }\n        }\n        head++;\n    }\n}\nvoid build_bk()\n{\n\tmemset(bk,1,sizeof(bk));//\u672c\u6765\u60f3\u5f0463\u7684\uff0c\u540e\u6765\u70b8\u4e86...\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=m;j++)bfs(i,j);//\u53cd\u590d\u8c03\u7528\uff0c\u6784\u5efabk\u6570\u7ec4\n\t}\n}\n/*\n\u8fd9\u73a9\u610f\u513f\u672c\u6765\u662f\u6211\u4e4b\u524d\u60f3\u7740\u5148\u627e\u96c6\u5408\u70b9\u786e\u5b9a\u96c6\u5408\u70b9\u518d\u770b\u600e\u4e48\u63a5\u7687\u5e1d\u7684...\n\u540e\u6765\u53d1\u73b0...\u662f\u6211\u592a\u5929\u771f\u4e86...\n\u4f46\u662f\u8fd8\u662f\u628a\u5b83\u4fdd\u7559\u7740\u5427...\u7559\u4e2a\u7eaa\u5ff5...\uff08\u624b\u52a8\u6ed1\u7a3d\uff09\nvoid find()\n{\n    int minn=inf,sum=0,xx,yy;\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            for(int k=1;k<=tj;k++)sum+=bk[knight[k].x][knight[k].y][i][j];\n            if(sum<minn)\n            {\n                minn=sum;\n                xx=i;yy=j;\n            }\n            sum=0;\n        }\n    }\n    for(int k=1;k<=tj;k++)all+=bk[knight[k].x][knight[k].y][xx][yy];\n    edx=xx;edy=yy;\n}\n*/\nint kn_ki()\n{\n    int minnn=inf;\n    for(int edx=1;edx<=n;edx++)\n    {\n    \tfor(int edy=1;edy<=m;edy++)\n    \t{\n        \t//\u679a\u4e3e\u96c6\u5408\u70b9...\u4e0d\u4f1a\u8d85\u65f6...\n    \t\tint minn=inf;bool bkkk=false;\n    \t\tfor(int s=1;s<=tj;s++)\n\t\t\t{\n\t\t\t\tall+=bk[knight[s].x][knight[s].y][edx][edy];\n\t\t\t\tif(bk[knight[s].x][knight[s].y][edx][edy]>=bk[0][0][0][0]){bkkk=true;break;}\n\t\t\t}\n            //all\u7edf\u8ba1\u5230\u8fd9\u4e2a\u70b9\u4e00\u5171\u8981\u591a\u5c11\u6b65\n            //bkkk\u662f\u770b\u6709\u6ca1\u6709\u9a91\u58eb\u4e0d\u80fd\u5230\u8fd9\u91cc\uff0c\u5982\u679c\u4e0d\u80fd\u5230\u7684\u8bdd\u5c31\u4e0d\u80fd\u505a\n            //\u96c6\u5408\u70b9\n\t\t\tif(bkkk==true)\n\t\t\t{\n\t\t\t\tall=0;\n                //\u8fd9\u6b65\u4e0d\u80fd\u7701\uff0c\u8d3c\u5751\u4e86...\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t   \tfor(int s=1;s<=tj;s++)\n\t\t    {\n\t\t        int ss=inf;\n\t\t        for(int i=king.x-2;i<=king.x+2;i++)\n\t\t        {\n\t\t        \tif(i>=1&&i<=n)\n\t\t        \t{\n\t\t\t        \tfor(int j=king.y-2;j<=king.y+2;j++)\n\t\t\t            {\n\t\t\t            \tif(j>=1&&j<=m)\n\t\t\t            \t{\n\t\t\t\t            \tint jl=max(abs(i-king.x),abs(j-king.y));\n                                //\u4e00\u5927\u5751\u70b9\u554a...\n\t\t\t\t                ss=min(ss,bk[knight[s].x][knight[s].y][i][j]+bk[i][j][edx][edy]+jl);\n\t\t\t\t\t\t\t}\n\t\t\t            }\n\t\t\t\t\t}\n\t\t        }\n\t\t        minn=min(minn,all-bk[knight[s].x][knight[s].y][edx][edy]+ss);\n                //\u4e0d\u7b97\u8fd9\u4e2a\u70b9\u539f\u6765\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\uff0c\u76f4\u63a5\u7b97\u5b83\u63a5\u56fd\u738b\u7684\u8ddd\u79bb\n\t\t    }\n\t\t    all=0;\n            //\u8fd9\u6b65\u4e0d\u80fd\u7701...\u8d3c\u5751...\n\t\t    minnn=min(minnn,minn);\n\t\t}\n\t}\n    return minnn;\n}\nint main()\n{\n    //freopen(\"camelot.in\",\"r\",stdin);\n    //freopen(\"camelot.out\",\"w\",stdout);\n    scanf(\"%d%d\",&n,&m);\n    getchar();char c;int xx,yy;bool bsk=false;\n    while(cin>>c)//\u4e0d\u80fd\u7528scanf\uff0c\u4f1a\u6709\u7384\u5b66\u9519\u8bef\n    {\n    \tyy=c-'A'+1;\n        scanf(\"%d\",&xx);//\u8fd9\u73a9\u610f\u513f\u4e5f\u662f\u5751\u70b9...\u4e4b\u524d\u8f93\u5165\u7684\u65f6\u5019\u662f\u4e00\u4e2a\u5b57\n        \t\t\t\t//\u7b26\u4e00\u4e2a\u5b57\u7b26\u5730\u8f93\u5165\uff0c\u4f46\u662f\u4e24\u4f4d\u6570\u5c31\u8f93\u5165\u4e0d\u4e86\u4e86\n\t    if(bsk==false)king.x=xx,king.y=yy,bsk=true;//\u5982\u679c\u662f\u7b2c\u4e00\u4e2a\n\t\telse\n\t    {\n\t        knight[++tj].x=xx;\n\t        knight[tj].y=yy;\n\t    }\n    }\n    if(tj==0)printf(\"0\\n\");//\u5751\u70b9*n\uff01\u82e5\u6ca1\u6709\u9a91\u58eb\uff0c\u5c31\u8f93\u51fa0\uff01\n    else\n    {\n\t    build_bk();\n\t    printf(\"%d\\n\",kn_ki());\n\t}\n    return 0;\n}\n```\n\n\u672c\u4eba\u5c0f\u849f\u84bb\uff0c\u6c42dalao\u8f7b\u55b7...\n\n\u6700\u540e\u611f\u8c22zsyz\u521d\u4e00\u4fe1\u606f\u73ed\u7684\u7334\u5b50\u3001Z.W.Q.\u548cZ.F.Y. dalao\uff0c\u662f\u4ed6\u4eec\u4e00\u76f4\u5728\u5e2e\u6211\u8c03\u8bd5\u3001\u60f3\u6539\u8fdb\u7684\u65b9\u6cd5\u3001\u627e\u9519\u8bef\u3001\u51fa\u6570\u636e\uff0c\u6211\u80fd\u591fA\u8fd9\u4e2a\u4ee3\u7801\u79bb\u4e0d\u5f00\u8fd9\u4e9bdalao\u7684\u5e2e\u52a9~",
        "postTime": 1524453480,
        "uid": 44157,
        "name": "zhangjianweivv",
        "ccfLevel": 0,
        "title": "[USACO3.3]Camelot\u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf\u3011"
    },
    {
        "content": "## \uff08\u3007\uff09\u5199\u5728\u524d\u9762\u7684\u8bdd\n\n\u5728\u6b64\u4e4b\u524d\uff0c\u8be5\u9898\u5df2\u7ecf\u6709\u5f88\u591a\u9898\u89e3\uff0c\u4f46\u5b83\u4eec\u5927\u591a\u662f\u679a\u4e3e\u56fd\u738b\u5468\u56f4$5\\times 5$\u7684\u8303\u56f4\uff08\u7384\u5b66\u8d2a\u5fc3\uff1f\uff09\uff0c\u6700\u540e\u8ba1\u7b97\u6700\u5c0f\u8ddd\u79bb\u3002\n\n\u867d\u7136\u80fd$AC$\uff0c\u4f46\u5176\u5b9e\u8fd9\u79cd\u505a\u6cd5\u662f\u4e0d\u4e25\u8c28\u7684( \u8be6\u89c1\u5de8\u4f6c\u7684[hack\u6570\u636e](https://www.luogu.com.cn/discuss/show/101031) )\n\n\u7136\u800c\u5c06$5\\times 5$\u7684\u8303\u56f4\u6269\u5927\u81f3$R\\times C$\u7684\u8303\u56f4\u540e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u5927\u3002\u90a3\u4e48\uff0c\u8fd9\u9053\u9898\u771f\u7684\u65e0\u89e3\u4e86\u5417\uff1f\n\n\u849f\u84bb\u7684\u6211\u7528spfa\u5728\u6b63\u786e\u7684\u7ed3\u679c\u548c\u6b63\u786e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185$AC$\u4e86\u6b64\u9898(\u800c\u4e14\u8fc7\u4e86$hack$\u6570\u636e)\u3002\n\n## \uff08\u4e00\uff09\u89e3\u9898\u601d\u8def\n\n\u9898\u76ee\u4e0d\u518d\u9610\u8ff0\u3002[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P1930)\n\n\u8fd9\u9053\u9898\u6c42\u7684\u662f\u6240\u6709\u9a91\u58eb\u4ee5\u53ca\u56fd\u738b\u5230\u67d0\u96c6\u5408\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb(\u4efb\u610f\u9a91\u58eb\u4e0e\u56fd\u738b\u6c47\u5408\u540e\uff0c\u53ef\u4ee5\u5e26\u7740\u56fd\u738b\u4e00\u8d77\u8d70\uff0c\u5e76\u4e14\u53ea\u7b97\u4e00\u4e2a\u4eba\u7684\u8ddd\u79bb)\u3002\n\n### Step1\uff1a\u5173\u4e8e\u96c6\u5408\u70b9\n\n\u96c6\u5408\u70b9\u662f\u54ea\u4e00\u4e2a\uff1f\u4e0d\u77e5\u9053\u3002~~\u4e0d\u77e5\u9053\u5c31\u679a\u4e3e~~\n\n\u4e0e\u5176\u5b83\u9898\u89e3\u65e0\u5f02\uff0c\u770b\u5230\u8303\u56f4\u5341\u5206\u5c0f\u7684$R\u3001C$\u540e\uff0c\u6bc5\u7136\u9009\u62e9\u679a\u4e3e\u96c6\u5408\u70b9\u3002\n\n\u679a\u4e3e\u540e\uff0c\u76f8\u5f53\u4e8e\u5df2\u7ecf\u77e5\u9053\u4e86\u96c6\u5408\u70b9\uff0c\u6c42\u9a91\u58eb\u548c\u56fd\u738b\u4ece\u539f\u6240\u5728\u5730\u5230\u8be5\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb\u548c\u3002\n\n\u8fd9\u4e2a\u53ef\u4ee5\u53cd\u8fc7\u6765\u770b\uff0c\u4e5f\u5c31\u662f\u4ece\u96c6\u5408\u70b9\u51fa\u53d1\uff0c\u6c42\u51fa\u9a91\u58eb\u548c\u56fd\u738b\u4ece\u96c6\u5408\u70b9\u5230\u9a91\u58eb\u548c\u56fd\u738b\u539f\u6240\u5728\u5730\u7684\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u3002\n\n\u663e\u7136\uff0c\u4e0a\u8ff0\u4e24\u8005\u662f\u7b49\u4ef7\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6700\u77ed\u8def\u7b97\u6cd5\u76f4\u63a5\u6c42\u51fa\u6700\u5c0f\u7684\u8ddd\u79bb\u4e4b\u548c\u3002\u8fd9\u91cc\u4f7f\u7528spfa\u3002\n\n### Step2\uff1a\u5173\u4e8e\u6700\u77ed\u8def\n\n\u5b9a\u4e49$dis(x, y, 0)$\u8868\u793a\u96c6\u5408\u70b9\u5230\u70b9$(x,y)$\u7684\u6700\u5c0f\u8ddd\u79bb(\u6700\u5c11\u6b65\u6570\uff0c\u4e0d\u5e26\u56fd\u738b)\u3002\n\n\u5b9a\u4e49$dis(x, y, 1)$\u8868\u793a\u96c6\u5408\u70b9\u5230\u70b9$(x,y)$\u7684\u6700\u5c0f\u8ddd\u79bb(\u6700\u5c11\u6b65\u6570\uff0c\u6b64\u65f6\u5728\u70b9$(x,y)$\uff0c\u9a91\u58eb\u5df2\u7ecf\u5e26\u4e0a\u4e86(\u6216\u8005\u662f\u6b63\u5728\u5e26\u7740)\u56fd\u738b\uff09\n\n\u8003\u8651\u5982\u4f55\u8f6c\u79fb\u3002\n\n\u663e\u7136\uff0c\u5bf9\u4e8e$dis(x,y,0)$\u8fd9\u4e2a\u72b6\u6001\uff0c\u53ef\u4ee5\u4f5c\u4e24\u79cd\u8f6c\u79fb:\n\n1. \u5f53\u524d\u9a91\u58eb\u6ca1\u6709\u5e26\u56fd\u738b\n\n\u53ef\u4ee5\u8f6c\u79fb\u51fa8\u4e2a\u72b6\u6001(\u5373\u9a91\u58eb\u8d70\u7684\u516b\u4e2a\"\u65e5\"\u5b57)\uff0c\u8bbe\u8f6c\u79fb\u540e\u7684\u72b6\u6001\u4e3a$dis(x', y', 0)$\u3002\u56e0\u4e3a\u9a91\u58eb\u8f6c\u79fb\u5230\u8fd9\u4e2a\u72b6\u6001\u53ea\u9700\u8981\u4e00\u6b65\uff0c\u6240\u4ee5\u8fb9\u6743\u4e3a$1$\u3002\n\n\u8f6c\u79fb\u65b9\u7a0b\u4e3a$dis(x', y', 0) =\\min\\{dis(x, y, 0) +1\\}$\n\n2. \u5f53\u524d\u9a91\u58eb\u5e26\u4e0a\u4e86\u56fd\u738b\n\n\u53ef\u4ee5\u8f6c\u79fb\u51fa\u4e00\u4e2a\u72b6\u6001\uff0c\u8bbe\u56fd\u738b\u8d70\u5230$(x,y)$\u9700\u8981\u7684\u6b65\u6570\u4e3a$val$\u3002\u8f6c\u79fb\u540e\u7684\u72b6\u6001\u4e3a$dis(x,y,1)$\u3002\n\n\u8f6c\u79fb\u65b9\u7a0b\u4e3a$dis(x,y,1)=\\min\\{dis(x,y,0)+val\\}$\n\n\u540c\u6837\uff0c$dis(x,y,1)$\u4e5f\u53ef\u4ee5\u662f\u4ece\u5176\u4ed6\u7684$dis(x',y',1)$\u8f6c\u79fb\u8fc7\u6765\u3002\u8f6c\u79fb\u65b9\u7a0b\u5f88\u7b80\u5355\u3002\n\n### Step3\uff1a\u7ed3\u679c\u7684\u5904\u7406\n\nspfa\u8dd1\u5b8c\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e86$dis(x,y,z)$\u6570\u7ec4\uff0c\u4f46\u9898\u76ee\u8981\u6c42\u7684\u662f\u8ddd\u79bb\u548c\u7684\u6700\u5c0f\u503c\u3002\n\n\u7b80\u5355\uff0c\u5c06\u6700\u5c0f\u503c\u7d2f\u52a0\u5373\u53ef\u3002\u7b49\u7b49\uff0c\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u54ea\u4f4d\u9a91\u58eb\u5e26\u56fd\u738b$???$\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u9a91\u58eb\uff0c\u7d2f\u52a0\u4ed6\u7684$dis(x,y,1)$\uff0c\u540c\u65f6\u7d2f\u52a0\u5176\u5b83\u9a91\u58eb\u7684$dis(x,y,0)$\uff0c\u4f7f\u5f97\u603b\u548c\u6700\u5c0f\u3002\n\n\u5bb9\u6613\u8bc1\u660e\uff0c$dis(x,y,0)\\leq dis(x,y,1)$\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u6bcf\u4e2a$(x,y)$\uff0c\u6c42\u51fa$\\min\\{dis(x,y,1)-dis(x,y,0)\\}$\uff0c\u7136\u540e\u52a0\u4e0a\u6240\u6709$dis(x,y,0)$\u5373\u53ef\u3002\n\n\u6700\u5dee\u65f6\u95f4\u590d\u6742\u7684$\\Theta (R^2C^2)$~~\u65f6\u95f4\u90fd\u82b1\u5728\u679a\u4e3e\u4e0a\u4e86~~\uff0c\u7a33\u7a33\u5730\u8fc7\uff0c\u4e0d\u9700\u8981\u5361\u5e38\u3002\n\n## \uff08\u4e8c\uff09\u4ee3\u7801\n\n~~\u6211\u77e5\u9053\u5927\u5bb6\u559c\u6b22\u770b\u8fd9\u4e2a~~\n\n\u6709\u6ce8\u91ca\u54e6\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxr = 45, maxc = 30, INF = 1e6 + 7;\nint R, C, Map[maxr][maxc], Kingx, Kingy;\nint X[8] = {-1, 1, 2, 2, 1, -1, -2, -2}, Y[8] = {2, 2, 1, -1, -2, -2, -1, 1};\nstruct node{\n\tint x, y;\n\tbool king;//\u8bb0\u5f55\u662f\u5426\u5e26\u56fd\u738b\n};\nqueue< node > q;\nint Abs(int x){//\u6c42\u7edd\u5bf9\u503c \n\tif(x < 0) return -x;\n\tif(x == 0) return 0;\n\tif(x > 0) return x;\n}\nint spfa(int x,int y){\n\tint dis[maxr][maxc][2] = {}; bool vis[maxr][maxc][2] = {};//\u521d\u59cb\u5316dis\uff0cvis\u6570\u7ec4(spfa\u5e38\u89c4\u64cd\u4f5c) \n\tfor(int i=1; i<=R; i++)//\u521d\u59cb\u5316dis\u6570\u7ec4\uff0c\u540c\u6837\u662f\u5e38\u89c4\u64cd\u4f5c \n\t\tfor(int j=1; j<=C; j++)\n\t\t    dis[i][j][0] = dis[i][j][1] = INF;\n\tnode t;\n\tif(x == Kingx and y == Kingy) dis[x][y][1] = 0, t.king = true;//\u5982\u679c\u96c6\u5408\u70b9\u7684\u4f4d\u7f6e\u662f\u56fd\u738b\u7684\u4f4d\u7f6e(\u4e0d\u7528\u8003\u8651\u56fd\u738b\u7684\u79fb\u52a8)\uff0c\u521d\u59cb\u72b6\u6001\u5c31\u662fdis[x][y][1] \n\telse dis[x][y][0] = 0, t.king = false;//\u5982\u679c\u96c6\u5408\u70b9\u7684\u4f4d\u7f6e\u4e0d\u662f\u56fd\u738b\u7684\u4f4d\u7f6e\uff0c\u9700\u8981\u8003\u8651\u56fd\u738b\u7684\u79fb\u52a8\uff0c\u521d\u59cb\u72b6\u6001\u662fdis[x][y][0]\n\tt.x = x, t.y = y;\n\tq.push(t);//\u5165\u961f\uff0c\u5e38\u89c4\u64cd\u4f5c \n\tvis[x][y][t.king] = true;//\u6807\u8bb0,\u5e38\u89c4\u64cd\u4f5c \n\twhile(!q.empty()){//\u4e00\u4e0b\u5747\u4e3aspfa\u5e38\u89c4\u64cd\u4f5c\n\t\tint dx = q.front().x, dy = q.front().y;\n\t\tbool flag = q.front().king;\n\t\tq.pop();\n\t\tfor(int i=0; i<8; i++){//\u4e0d\u8fdb\u884c\u5e26\u56fd\u738b\u7684\u64cd\u4f5c \n\t\t\tint ex = dx + X[i], ey = dy + Y[i];\n\t\t\tif(ex < 1 or ey < 1 or ex > R or ey > C) continue;\n\t\t\tif(dis[ex][ey][flag] > dis[dx][dy][flag] + 1){\n\t\t\t\tdis[ex][ey][flag] = dis[dx][dy][flag] + 1;\n\t\t\t\tif(!vis[ex][ey][flag]){\n\t\t\t\t\tvis[ex][ey][flag] = true;\n\t\t\t\t\tnode e; e.x = ex, e.y = ey, e.king = flag;\n\t\t\t\t\tq.push(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!flag){//\u5728(dx, dy)\u8fd9\u4e2a\u70b9\u5e26\u4e0a\u56fd\u738b(\u8ba9\u56fd\u738b\u81ea\u5df1\u8d70\u5230\u8fd9\u4e2a\u70b9) \n\t\t\tint val = dis[dx][dy][flag] + max(Abs(dx-Kingx), Abs(dy-Kingy));\n\t\t\t//\u7b97\u51fa\u56fd\u738b\u8d70\u5230\u8fd9\u4e2a\u70b9\u7684\u6b65\u6570,\u56fd\u738b\u53ef\u4ee5\u8d70\u516b\u4e2a\u65b9\u5411\uff0c\u4e0d\u662f\u66fc\u54c8\u987f\u8ddd\u79bb\uff0c\u800c\u662fmax(Abs(dx-Kingx), Abs(dy-Kingy),\u81ea\u884c\u753b\u56fe\u7406\u89e3 \n\t\t\tif(dis[dx][dy][!flag] > val){\n\t\t\t\tdis[dx][dy][!flag] = val;\n\t\t\t\tif(!vis[dx][dy][!flag]){\n\t\t\t\t\tvis[dx][dy][!flag] = true;\n\t\t\t\t\tnode e; e.x = dx, e.y = dy, e.king = !flag;\n\t\t\t\t\tq.push(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvis[dx][dy][flag] = false;\n\t}\n\tint minu = INF, cnt = 0;//\u6700\u77ed\u8def\u8dd1\u5b8c\u540e\uff0c\u7b97\u51fa\u6700\u77ed\u7684\u603b\u8ddd\u79bb\n\t//\u5bb9\u6613\u8bc1\u660e\uff0c\u9a91\u58eb\u6240\u5728\u7684\u70b9\u7684\u72b6\u6001dis[x][y][1]>=dis[x][y][0]\uff0c\u8981\u4f7f\u603b\u8ddd\u79bb\u6700\u5c0f\uff0c\u53ea\u9700\u8981\u627e\u6700\u5c0f\u7684(dis[x][y][1]-dis[x][y][0])\uff0c\u6700\u540e\u52a0\u4e0a\u6240\u6709\u9a91\u58eb\u7684\u8ddd\u79bbdis[x][y][0]\u5373\u53ef \n\tfor(int i=1; i<=R; i++)\n\t    for(int j=1; j<=C; j++)\n\t    \tif(Map[i][j] == 1) minu = min(minu, dis[i][j][1] - dis[i][j][0]), cnt += dis[i][j][0];\n\treturn cnt+minu;\n}\nint main(){\n\tcin>>C>>R;//\u5199\u5230\u6700\u540e\u53d1\u73b0R,C\u6253\u53cd\u4e86\uff0c\u4e0d\u60f3\u6539\u4e86\uff0c\u5c06\u5c31\u7740\u770b\u5427 \n\tchar kingx;\n\tcin>>kingx>>Kingy;//\u8bfb\u5165 \n\tKingx = kingx-'A'+1;//Kingx\u50a8\u5b58\u56fd\u738b\u7684\u6a2a\u5750\u6807\uff0cKingy\u50a8\u5b58\u56fd\u738b\u7684\u7eb5\u5750\u6807 \n\tchar knightx; int knighty;\n\twhile(cin>>knightx>>knighty){//\u8bfb\u5165 \n\t\tMap[knightx-'A'+1][knighty] = 1;//\u90bb\u63a5\u77e9\u9635\u6807\u8bb0\u56fd\u738b\u7684\u4f4d\u7f6e \n\t}\n\tint ans = INF;//\u521d\u59cb\u5316 \n\tfor(int i=1; i<=R; i++) \n\t\tfor(int j=1; j<=C; j++)\n\t\t\tans = min(ans, spfa(i, j));//\u679a\u4e3e\u96c6\u5408\u70b9\uff0cspfa\u6c42\u6700\u77ed\u8ddd\u79bb \n\tif(ans == INF) printf(\"0\");\n\telse printf(\"%d\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1597232644,
        "uid": 76228,
        "name": "God\u306efather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1930 \u3010[USACO3.3]\u4e9a\u745f\u738b\u7684\u5bab\u6bbf\u3011"
    },
    {
        "content": "\u6211\u7684\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\n\n(1):\u679a\u4e3e\u96c6\u5408\u70b9\uff08\u4e0d\u7528\u591a\u8bf4\uff09\n\n(2):\u8bbe$dis_{x,y,z}$\uff0c\u8868\u793a\u9a91\u58eb\u5230\u96c6\u5408\u70b9\u7684\u6b65\u6570\uff0c$x$,$y$\u4ee3\u8868\u5750\u6807\uff0c$z$\u4ee3\u8868\u662f\u5426\u6709\u56fd\u738b\uff0c0\u4ee3\u8868\u6ca1\u6709\uff0c1\u4ee3\u8868\u6709\u3002\u7528Dijkstra\u6c42dis\u6570\u7ec4\u3002\u516c\u5f0f\u5982\u4e0b\uff1a\uff08xx\uff0cyy\u4ee3\u8868\u9a91\u58eb\u76848\u79cd\u8d70\u6cd5\uff0ckx\uff0cky\u4ee3\u8868\u56fd\u738b\u7684\u5750\u6807\uff09\n\n$dis_{x,y,0}=\\min\\{dis_{x+xx,y+yy,0}\\}+1$\n\n$dis_{x,y,1}=\\min(\\min\\{dis_{x+xx,y+yy,1}\\}+1,dis_{x,y,0}+\\max(abs(x-kx),abs(y-ky))$\n\n\u521d\u503c\uff1a$dis_{x,y,0}=0$\uff08x\uff0cy\u4ee3\u8868\u96c6\u5408\u70b9\uff09\n\n\u5176\u5b9e\u9898\u89e3\u533a\u5df2\u7ecf\u6709\u4e00\u4f4d\u5de8\u4f6c\u7528\u4e86\u8fd9\u4e2a\u601d\u8def\u3002\u4e0d\u8fc7\u4ed6\u7528\u4e86SPFA\u3002\u6211\u8fd9\u4e2a\u849f\u84bb\u5199SPFA\u5c31\u5fc3\u60ca\u80c6\u6218\uff0c\u751f\u6015\u88ab\u5361\u3002\u6240\u4ee5\u6211\u57fa\u672c\u4e0d\u7528SPFA\uff0c\u90fd\u7528Dijkstra\u3002Heap+Dijkstra\u7684\u7b97\u6cd5\u5e94\u8be5\u7b97\u662f\u6bd4\u8f83\u6162\u4e86\u3002\u4e0d\u8fc7\u5438\u4e2a\u6c27\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n\nAC Code:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define INF 0x3f3f3f3f\nint dis[41][27][2],R,C,ans=INF,kx,ky,k;\nbool flag[41][27][2],knight[41][27];\nchar s[2];\nstruct data{\n\tint x,y,z;\n}myd1,myd2;\nbool operator <(data x,data y){\n\treturn x.x<y.x;\n}\npriority_queue<pair<int,data> >heap;\nconst short dd[8][2]={{1,2},{2,1},{-1,2},{2,-1},{1,-2},{-2,1},{-1,-2},{-2,-1}};\ninline int dijkstra(int x,int y){\n\tmemset(flag,0,sizeof(flag));\n\tmemset(dis,0x3f,sizeof(dis));\n\twhile(!heap.empty())heap.pop();\n\tmyd1.x=x,myd1.y=y;myd1.z=0;\n\tdis[x][y][0]=0;\n\theap.push(make_pair(0,myd1));\n\twhile(!heap.empty()){\n\t\tmyd1=heap.top().second;heap.pop();\n\t\tif(flag[myd1.x][myd1.y][myd1.z])continue;\n\t\tflag[myd1.x][myd1.y][myd1.z]=1;\n\t\tfor(int i=0;i<8;++i){\n\t\t\tmyd2.x=myd1.x+dd[i][0],myd2.y=myd1.y+dd[i][1],myd2.z=myd1.z;\n\t\t\tif(myd2.x<1||myd2.x>R||myd2.y<1||myd2.y>C)continue;\n\t\t\tdis[myd2.x][myd2.y][myd2.z]=min(dis[myd1.x][myd1.y][myd1.z]+1,dis[myd2.x][myd2.y][myd2.z]);\n\t\t\theap.push(make_pair(-dis[myd2.x][myd2.y][myd2.z],myd2));\n\t\t}\n\t\tif(!myd1.z){\n\t\t\tdis[myd1.x][myd1.y][1]=min(dis[myd1.x][myd1.y][0]+max(abs(kx-myd1.x),abs(ky-myd1.y)),dis[myd1.x][myd1.y][1]);\n\t\t\tmyd1.z=1;\n\t\t\theap.push(make_pair(-dis[myd1.x][myd1.y][1],myd1));\n\t\t}\n\t}\n\tint sum=0,now;\n\tfor(int i=1;i<=R;++i){\n\t\tfor(int j=1;j<=C;++j){\n\t\t\tif(knight[i][j]){\n\t\t\t\tif(dis[i][j][0]==INF)return INF;\n\t\t\t\tsum+=dis[i][j][0];\n\t\t\t}\n\t\t}\n\t}\n\tnow=sum+max(abs(kx-x),abs(ky-y));\n\tfor(int i=1;i<=R;++i){\n\t\tfor(int j=1;j<=C;++j){\n\t\t\tif(knight[i][j])now=min(now,sum+dis[i][j][1]-dis[i][j][0]);\n\t\t}\n\t}\n\treturn now;\n}\nint main(){\n\tscanf(\"%d%d\",&R,&C);\n\tscanf(\"%s%d\",s,&kx);\n\tky=s[0]-'A'+1;\n\twhile(~scanf(\"%s%d\",s,&k)){\n\t\tknight[k][s[0]-'A'+1]=1;\n\t}\n\tfor(int i=1;i<=R;++i){\n\t\tfor(int j=1;j<=C;++j){\n\t\t\tans=min(ans,dijkstra(i,j));\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\u82e5\u6709\u4e9b\u96be\u770b\uff0c\u8bf7\u8c05\u89e3",
        "postTime": 1616735279,
        "uid": 261370,
        "name": "Andy_Lin",
        "ccfLevel": 0,
        "title": "new solution"
    },
    {
        "content": "\u8fd9\u9898\u4e3b\u8981\u662f\u7384\u5b66\u8f93\u5165+\u7384\u5b66\u7406\u89e3+\u7384\u5b66\u65f6\u95f4\u590d\u6742\u5ea6+\u7384\u5b66\u5b9a\u7406\u5440QAQ...\n\u81f3\u4e8e\u7384\u5b66\u7406\u89e3\u5176\u4ed6\u9898\u89e3\u5df2\u7ecf\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86\u5440\uff0c\u4e3b\u8981\u8fd8\u662f\u8ba9\u5927\u5bb6\u770b\u770b\u6211\u7684\u7384\u5b66\u4ee3\u7801\u5440QAQ....\n```pascal\n//\u5148\u7384\u5b66\u7406\u89e3\u5440\nconst z:array[1..8,1..2]of -2..2=((1,2),(1,-2),(-1,2),(-1,-2),(2,1),(2,-1),(-2,1),(-2,-1));\nvar i,j,k,ix,iy:longint;\n    m,n,h,t,sum,q:longint;\n    kingx,kingy:longint;\n    x_ch:array[char]of longint;\n    min,p:array[-1..100,-1..100]of longint;\n    x,y,u:array[0..10000]of longint;\n    main:longint=maxlongint;\n    boo:array[-1..100,-1..100]of boolean;\n    ans:array[-1..30,-1..50,-1..30,-1..50] of longint;\n    s:string;\n    ch:char;\nfunction mine(m,n:longint):longint;//min\nbegin\n  if m>n then exit(n) else exit(m);\nend;\nfunction max(m,n:longint):longint;//max\nbegin\n  if m>n then exit(m) else exit(n);\nend;\nprocedure find(x1,y1:longint);//\u4ee5x1,y1\u4e3a\u7ec8\u70b9\u5440QAQ\nvar i,j,k,pd:longint;\nbegin\n  for i:=-2 to 2 do//\u7384\u5b66\u5b9a\u7406\uff0c\u4e0d\u77e5\u9053\u662f\u8c01\u600e\u4e48\u7684\u5440\n  for j:=-2 to 2 do//\u63a5\u56fd\u738b\u7684\u4f4d\u7f6e\u4e00\u5b9a\u5728\u56fd\u738b\u65c1\u8fb92\u683c\u5185\n  if boo[kingx+i,kingy+j] then\n  begin\n    pd:=0;\n    for k:=1 to sum do\n    inc(pd,ans[x1,y1,x[k],y[k]]);\n    main:=mine(main,pd+max(abs(x1-kingx),abs(y1-kingy)));//\u5f53\u56fd\u738b\u76f4\u63a5\u8d70\u5230\u7ec8\u70b9\n    for k:=1 to sum do\n    begin\n      main:=mine(main,\n      pd-ans[x1,y1,x[k],y[k]]{\u9a91\u58eb\u76f4\u63a5\u53bb\u7ec8\u70b9}+ans[kingx+i,kingy+j,x[k],y[k]]{\u9a91\u58eb\u5230\u63a5\u7684\u4f4d\u7f6e}+\n      ans[x1,y1,kingx+i,kingy+j]{\u4ece\u63a5\u7684\u4f4d\u7f6e\u5230\u7ec8\u70b9}+max(abs(i),abs(j))){\u56fd\u738b\u5230\u63a5\u7684\u4f4d\u7f6e};//\u7b2ck\u4e2a\u9a91\u58eb\u53bb\u63a5\u56fd\u738b\u5440\n    end;\n  end;\nend;\nbegin\n  readln(m,n);\n  k:=m;\n  m:=n;\n  n:=k;\n  for ch:='A' to 'Z' do x_ch[ch]:=ord(ch)-ord('A')+1;\n  read(ch,k);kingx:=x_ch[ch];kingy:=k;//\u8bfb\u5165\u56fd\u738b\u4f4d\u7f6e\u5440QAQ\n  for ix:=1 to m do\n  for iy:=1 to n do\n  for i:=1 to m do\n  for j:=1 to n do ans[ix,iy,i,j]:=123123123;//\u8d4b\u521d\u503c\n  for ix:=1 to m do//\u7528bfs\u8ba1\u7b97\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u6b65\u6570,\u56db\u6b21\u5c45\u7136\u4e0d\u8d85\u5440\uff0c\u7384\u5b66\u65f6\u95f4\u590d\u6742\u5ea6....\n  for iy:=1 to n do\n  begin\n    x[1]:=ix;\n    y[1]:=iy;\n    u[1]:=0;\n    h:=1;\n    t:=1;\n    for i:=1 to m do\n    for j:=1 to n do\n    boo[i,j]:=true;\n    boo[ix,iy]:=false;\n    ans[ix,iy,ix,iy]:=0;\n    repeat\n      for i:=1 to 8 do\n      if boo[x[t]+z[i,1],y[t]+z[i,2]] then\n      begin\n        inc(h);\n        x[h]:=x[t]+z[i,1];\n        y[h]:=y[t]+z[i,2];\n        u[h]:=u[t]+1;\n        ans[ix,iy,x[h],y[h]]:=u[h];//\u4fdd\u5b58\u6700\u4f18\u89e3\u5440\n        boo[x[h],y[h]]:=false;\n      end;\n      inc(t);\n    until t>h;\n  end;\n  while not eof do//\u7384\u5b66\u8bfb\u5165\n  begin\n    readln(s);//\u5b57\u7b26\u4e32\uff0c\u771f\u9ebb\u70e6...\n    for i:=1 to length(s) do\n    begin\n      if (s[i] in ['A'..'Z']) then\n      begin\n        inc(sum);\n        x[sum]:=x_ch[s[i]];\n        k:=0;\n        j:=i+2;\n        while (s[j] in ['0'..'9']) and (j<=length(s))do\n        begin\n          k:=k*10+ord(s[j])-48;\n          inc(j);\n        end;\n        y[sum]:=k;\n      end;\n    end;\n  end;\n  if sum=0 then begin write(0); exit; end;\n  for i:=1 to m do\n  for j:=1 to n do boo[i,j]:=true;\n  for i:=1 to m do\n  for j:=1 to n do\n  begin\n    find(i,j);//\u627e\u6700\u4f18\u89e3\u5440QAQ\n  end;\n  write(main);//\u8f93\u51fa\nend.\n```\n\u8fd9\u662f\u4e00\u9053\u7384\u5b66\u96be\u9898\uff0c\u96be\u5ea6\u633a\u9ad8\u7684\uff0c\u8f9b\u82e6\u8c03\u4e862\u4e2a\u5c0f\u65f6\uff0c\uff0c\uff0c",
        "postTime": 1548654184,
        "uid": 86625,
        "name": "Limit",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf\u3011"
    },
    {
        "content": "\u63a5\u56fd\u738b\u4e00\u5b9a\u5728\u56fd\u738b+-2\u7684\u8303\u56f4\u662f\u56e0\u4e3a\uff1a\u9a91\u58eb\u4e00\u6b21\u80fd\u8d702\u683c\uff0c\u6240\u4ee5\u4e00\u5b9a\u591a\u8d70\u9a91\u58eb\u3002\u96c6\u5408\u70b9\u4e00\u5b9a\u4f1a\u5728\u56fd\u738b\u5750\u6807+-2\u4e4b\u5185\uff0c\u56e0\u4e3a\u5f53\u9a91\u58eb\u63a5\u8fd1\u56fd\u738b\u7684\u65f6\u5019\uff08\u53ea\u80fd\u7ed5\u5708\u624d\u80fd\u4f1a\u548c\u7684\u65f6\u5019\uff09\uff0c\u56fd\u738b\u8d70\u5230\u9a91\u58eb\u65c1\u8fb9\u5c31\u662f\u6700\u77ed\u63a5\u56fd\u738b\u7684\u8ddd\u79bb \u3002\n\n\u53ef\u4ee5\u8ba4\u4e3a\u662f\u6a21\u62df\uff0c\u8be6\u7ec6\u9898\u89e3\u5728\u4ee3\u7801\u91cc\u6ce8\u91ca\n\n/\\*\nID:luojiny1\n\nLANG:C++\n\nTASK:camelot\n\n\\*/\n\n    \n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<cstdlib>//\u91cc\u9762\u6709abs \uff08\u53d6\u7edd\u5bf9\u503c\uff09 \n#define INF 0x3f3f3f3f\n#define max(a,b) ((a)>(b)?(a):(b))\nusing namespace std;\nconst int maxR=31,maxC=28;\nint R,C,n=0;\nint kx,ky,nx[maxR*maxC],ny[maxR*maxC],d[maxC][maxR][maxC][maxR],ans=INF;//(kx,ky)\u8868\u793a\u56fd\u738b\u5750\u6807\uff0c(nx[i],ny[i])\u8868\u793a\u7b2ci\u4e2a\u9a91\u58eb\u7684\u5750\u6807,d[x][y][a][b]\u8868\u793a(x,y)\u5230(a,b)\u6309\u7167\u9a91\u58eb\u8d70\u6cd5\u6700\u77ed\u8ddd\u79bb\n//\u6211\u4eec\u628a\u5730\u56fe\u60f3\u8c61\u6210\u5750\u6807\u8f74\uff0c\u524d\u4e00\u4e2a\u4e0b\u6807\u8868\u793ax(\u975e\u5e38\u89c4\u5199\u6cd5\u7684r\u5373\u884c)\uff0c\u4e0b\u4e00\u4e2a\u8868\u793ay \nstruct point{\n    int x,y,step;\n};\nvoid bfs(int sx,int sy){//\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22-\u6700\u77ed\u8def \n    int dx[8]={-1,1,2,2,1,-1,-2,-2};\n    int dy[8]={2,2,1,-1,-2,-2,-1,1};\n    bool vis[maxC][maxR]={0};\n    queue<point>Q;\n    Q.push((point){sx,sy,0});\n    while(!Q.empty()){\n        point a=Q.front();Q.pop();\n        int x=a.x,y=a.y;\n        if(vis[x][y])continue;\n        vis[x][y]=1;\n        d[sx][sy][x][y]=a.step;\n        for(int i=0;i<8;i++){\n            int newx=x+dx[i],newy=y+dy[i];\n            if(newx>=0&&newx<C&&newy>=0&&newy<R)Q.push((point){newx,newy,a.step+1});\n        }\n    }\n}\nint main()\n{\n    freopen(\"camelot.in\",\"r\",stdin);\n    freopen(\"camelot.out\",\"w\",stdout);\n    memset(d,0x3f3f3f3f,sizeof(d));\n    char ch;\n    scanf(\"%d %d\\n\",&R,&C);\n    scanf(\"%c %d\\n\",&ch,&ky);\n    kx=ch-'A',ky--;//\u4e60\u60ef0\u4e0b\u6807\u5f00\u59cb \n    while((ch=getchar())!=EOF)if(ch>='A'&&ch<='Z'){\n        scanf(\"%d\",&ny[n]);\n        ny[n]--,nx[n++]=ch-'A';\n        bfs(nx[n-1],ny[n-1]);\n    }\n    if(n==0){//\u7279\u6b8a\u60c5\u51b5\uff0c\u6ca1\u6709\u9a91\u58eb \n        printf(\"0\\n\");\n        return 0;\n    }\n    for(int dx=-2;dx<=2;dx++)\n    for(int dy=-2;dy<=2;dy++){\n        int newn=dx+kx,newm=dy+ky;\n        if(newn>=0&&newn<C&&newm>=0&&newm<R)bfs(newn,newm);} //\u6c42\u51fa \uff08\u679a\u4e3e\u7684\u9a91\u58eb\u63a5\u56fd\u738b\u7684\u5750\u6807\uff09\u5230\u4efb\u4f55\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \n    for(int newx=0;newx<C;newx++)\n    for(int newy=0;newy<R;newy++)\n    {\n        int t=0;\n        for(int i=0;i<n;i++){\n            if(d[nx[i]][ny[i]][newx][newy]==INF){t=INF;break;//\u5982\u679c\u96c6\u5408\u70b9\u6709\u4e00\u4e2a\u9a91\u58eb\u65e0\u6cd5\u5230\u8fbe\u5219\u9000\u51fa \n            }\n            t+=d[nx[i]][ny[i]][newx][newy];\n        }\n        if(t==INF)continue;//\u6b64\u70b9\u65e0\u6548\uff0c\u627e\u4e0b\u4e00\u4e2a\u70b9 \n        for(int dx=-2;dx<=2;dx++)//+-2\u7684\u8303\u56f4\u662f\u56e0\u4e3a\uff1a\u9a91\u58eb\u4e00\u6b21\u80fd\u8d702\u683c\uff0c\u6240\u4ee5\u4e00\u5b9a\u591a\u8d70\u9a91\u58eb\u3002\u96c6\u5408\u70b9\u4e00\u5b9a\u4f1a\u5728\u56fd\u738b\u5750\u6807+-2\u4e4b\u5185\uff0c\u56e0\u4e3a\u5f53\u9a91\u58eb\u63a5\u8fd1\u56fd\u738b\u7684\u65f6\u5019\uff08\u53ea\u80fd\u7ed5\u5708\u624d\u80fd\u4f1a\u548c\u7684\u65f6\u5019\uff09\uff0c\u56fd\u738b\u8d70\u5230\u9a91\u58eb\u65c1\u8fb9\u5c31\u662f\u6700\u77ed\u63a5\u56fd\u738b\u7684\u8ddd\u79bb \n        for(int dy=-2;dy<=2;dy++){\n            int newn=dx+kx,newm=dy+ky,king=(abs(kx-newn)==abs(ky-newm)?abs(kx-newn):abs(kx-newn)+abs(ky-newm));//(newn,newm)\u8868\u793a\u67d0\u4e2a\u9a91\u58eb\u63a5\u56fd\u738b\u7684\u4f4d\u7f6e  king\u8868\u793a\u56fd\u738b\u5230\uff08\u9a91\u58eb\u63a5\u56fd\u738b\u7684\u4f4d\u7f6e\uff09\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5f53\u5728\u56fd\u738b\u7684\u5bf9\u89d2\u7ebf\u4e0a\u80fd\u5230\u8fbe\u7684\u65f6\u5019\u8ddd\u79bb\u662fabs(kx-newn)\u5426\u5219\u662f\u4e24\u4e2a\u5750\u6807\u4e4b\u5dee\u7684\u548c \n            if(newn>=0&&newn<C&&newm>=0&&newm<R)\n            for(int i=0;i<n;i++)\n            ans=min(ans,t-d[nx[i]][ny[i]][newx][newy]+d[nx[i]][ny[i]][newn][newm]+king+d[newn][newm][newx][newy]);//\u679a\u4e3e\u51fa\u5230(newn,newm)\u63a5\u56fd\u738b\u7684\u9a91\u58eb\u7684\u6700\u5c0f\u82b1\u8d39 \n        }\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1502341157,
        "uid": 22150,
        "name": "\u548c\u5176\u6b63",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf Camelot\u3011"
    },
    {
        "content": "### 1 \u601d\u8def\n\n\u8f93\u5165\uff0c\u8bbe\u56fd\u738b\u5750\u6807\u4e3a $(sx,sy)$\u3002\n\n\u8fd9\u9053\u9898\u4e3b\u8981\u662f\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002\n\n\u9996\u5148\uff0c\u901a\u8fc7\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u627e\u51fa\u6bcf\u5bf9\u70b9\u7684\u8d70\u201c\u65e5\u201d\u5b57\u5f62\u7684\u6700\u77ed\u8def\u3002\u8bbe\u4ece $(i,j)$ \u8d70\u5230 $(a,b)$ \u9700\u8981 $dis[i][j][a][b]$ \u7684\u65f6\u95f4\u3002\n\n\u5f88\u660e\u663e\uff0c$dis[i][j][a][b]=dis[a][b][i][j]$\uff0c\u4e0d\u8fc7\u8c8c\u4f3c\u5b83\u4e0d\u91cd\u8981\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e00\u6bb5\u4e5f\u53ef\u4ee5\u7528 `Floyd` \u7b97\u6cd5\u89e3\u51b3\uff0c\u4f46\u662f\u901f\u5ea6\u4f1a\u6162\u5f88\u591a\uff0c\u5149\u662f\u8fd9\u4e00\u9879\u90fd\u53ef\u80fd\u8d85\u65f6\u3002\n\n\u7136\u540e\uff0c\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\u4e3a\u96c6\u5408\u70b9\u3002\u8bbe\u5b83\u7684\u5750\u6807\u4e3a $(x,y)$\u3002\n\n\u6bcf\u6b21\u679a\u4e3e\u65f6\uff0c\u90fd\u8ba1\u7b97\u51fa\u6240\u6709\u7684\u9a91\u58eb\u5230\u8fd9\u4e2a\u70b9\uff08\u5ffd\u7565\u56fd\u738b\uff09\u6240\u82b1\u8d39\u7684\u65f6\u95f4\uff0c\u8bbe\u5b83\u4e3a $sum$\u3002\n\n\u90a3\u4e48\uff0c\u5982\u679c\u9a91\u58eb\u90fd\u4e0d\u53bb\u63a5\u56fd\u738b\uff0c\u5219\u82b1\u8d39\u65f6\u95f4\u4e3a\uff1a\n\n$$sum+\\operatorname{max}(|sx-x|,|sy-y|)$$\n\n\u7136\u540e\uff0c\u6211\u4eec\u8bbe\u53bb\u63a5\u56fd\u738b\u7684\u9a91\u58eb\u7684\u5750\u6807\u4e3a $(jx,jy)$\uff0c\u5b83\u5728 $(nx,ny)$ \u70b9\u63a5\u5230\u4e86\u56fd\u738b\u3002\n\n\u90a3\u4e48\uff0c\u6b64\u65b9\u6848\u82b1\u8d39\u65f6\u95f4\u5c31\u662f\uff1a\n\n$$sum-dis[jx][jy][x][y]+dis[jx][jy][nx][ny]+\\operatorname{max}(|sx-nx|,|sy-ny|)+dis[nx][ny][x][y]$$\n\n\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u53e6\u5916\uff0c\u679a\u4e3e\u63a5\u9001\u70b9\u65f6\uff0c\u53ea\u9700\u8981\u679a\u4e3e\u4ee5\u9a91\u58eb\u4e3a\u4e2d\u5fc3\u7684 $5\\times5$ \u7684\u65b9\u683c\u5373\u53ef\u3002\n\n\u672c\u7bc7\u4ee3\u7801\u5df2\u7ecf\u901a\u8fc7\u4e86 @[\u5929\u6cfd\u9f9f](/user/15984) \u7684 [hack \u6570\u636e](https://www.luogu.com.cn/discuss/101031)\u3002\n\n### 2 \u4ee3\u7801\u4e0e\u8bb0\u5f55\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\n#define max_n 45//\u6700\u5927\u5c3a\u5bf8\n#define inf 20000000//\u5f88\u5927\u7684\u6570\nint n;//\u884c\u6570\uff08\u5b57\u6bcd\uff09\nint m;//\u5217\u6570\uff08\u6570\u5b57\uff09\nint dis[max_n+2][max_n+2][max_n+2][max_n+2];//\u9884\u5904\u7406\u7684\u5b57\u6bcd\nstruct W{//\u8def\u5f84\u7ed3\u6784\u4f53\n\tint x,y,t;//\u5750\u6807\u3001\u65f6\u95f4\n};\nqueue<W>q;//\u961f\u5217\nbool vis[max_n+2][max_n+2];//\u8bbf\u95ee\u60c5\u51b5\nconst int dx[8]={-2,-2,-1,1,2,2,1,-1};//\u65b9\u5411\u6570\u7ec4\nconst int dy[8]={-1,1,2,2,1,-1,-2,-2};//\u65b9\u5411\u6570\u7ec4\nchar s[2];//\u4e00\u4e2a\u5b57\u7b26\u4e32\nint x;//\u4e00\u4e2a\u5750\u6807\nint sx,sy;//\u8d77\u70b9\u5750\u6807\nstruct K{//\u9a91\u58eb\u7ed3\u6784\u4f53\n\tint x,y;//\u5750\u6807\n}k[max_n*max_n+2];//\u9a91\u58eb\nint ki=0;//\u4e0b\u6807\nint sum;//\u6c42\u548c\nint ans=inf;//\u7b54\u6848\nvoid askdis(const int sx,const int sy){\n\tmemset(vis,0,sizeof(vis));\n\tdis[sx][sy][sx][sy]=0;\n\tvis[sx][sy]=true;\n\tq.push((W){sx,sy,0});\n\tregister W f;//\u961f\u9996\n\twhile(!q.empty()){\n\t\tf=q.front();\n\t\tq.pop();\n\t\tfor(register int d=0,nx,ny;d<8;++d){\n\t\t\tnx=f.x+dx[d];\n\t\t\tny=f.y+dy[d];\n\t\t\tif(nx<1||nx>n||ny<1||ny>m)continue;//\u6ce8\u610f\u4e0d\u8981\u8d8a\u754c\n\t\t\tif(vis[nx][ny])continue;\n\t\t\tdis[sx][sy][nx][ny]=f.t+1;\n\t\t\tvis[nx][ny]=true;\n\t\t\tq.push((W){nx,ny,f.t+1});\n\t\t}\n\t}\n}\ninline int absi(int a){\n\treturn a>=0?a:-a;\n}\ninline int ma(int a,int b){\n\treturn a>b?a:b;\n}\ninline int mi(int a,int b){\n\treturn a<b?a:b;\n}\nint main(){\n\t#ifndef ONLINE_JUDGE\n\tfreopen(\"P1930_1.in\",\"r\",stdin);\n\tfreopen(\"P1930_1.out\",\"w\",stdout);\n\t#endif\n\tscanf(\"%d%d\",&m,&n);//\u884c\u548c\u5217\u522b\u641e\u53cd\u4e86\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=1;j<=m;++j){\n\t\t\tfor(int x=1;x<=n;++x){\n\t\t\t\tfor(int y=1;y<=m;++y)dis[i][j][x][y]=inf;\n\t\t\t}\n\t\t}\n\t}\n\tfor(register int i=1;i<=n;++i){\n\t\tfor(register int j=1;j<=m;++j)askdis(i,j);\n\t}\n\tscanf(\"%s%d\",s,&sy);\n\tsx=s[0]-'A'+1;\n\twhile(scanf(\"%s%d\",s,&x)!=EOF)k[++ki]=(K){s[0]-'A'+1,x};\n\tfor(register int x=1;x<=n;++x){//\u679a\u4e3e\u96c6\u5408\u70b9\n\t\tfor(register int y=1;y<=m;++y){\n\t\t\tsum=0;\n\t\t\tfor(register int i=1;i<=ki;++i)sum+=dis[k[i].x][k[i].y][x][y];//\u90fd\u4e0d\u63a5\u7684\u65f6\u5019\u9a91\u58eb\u6b65\u6570\n\t\t\tans=mi(ans,sum+ma(absi(sx-x),absi(sy-y)));\n\t\t\tfor(register int j=1;j<=ki;++j){//\u679a\u4e3e\u63a5\u9001\u9a91\u58eb\n\t\t\t\tfor(register int nx=ma(1,k[j].x-3);nx<=mi(k[j].x+3,n);++nx){//\u679a\u4e3e\u63a5\u9001\u70b9\n\t\t\t\t\tfor(register int ny=ma(1,k[j].y-3);ny<=mi(k[j].y+3,m);++ny){\n\t\t\t\t\t\tans=mi(ans,/*\u516c\u5f0f\u5f00\u59cb*/sum-dis[k[j].x][k[j].y][x][y]+dis[k[j].x][k[j].y][nx][ny]+ma(absi(sx-nx),absi(sy-ny))+dis[nx][ny][x][y]/*\u516c\u5f0f\u7ed3\u675f*/);\n\t\t\t\t\t\t/*\u53f3\u90e8\u516c\u5f0f\n\t\t\t\t\t\t=\u6240\u6709\u9a91\u58eb\u5230\u8fbe\u96c6\u5408\u70b9\u7684\u8ddd\u79bb\uff081\uff09-\u63a5\u9001\u9a91\u58eb\u5230\u96c6\u5408\u70b9\u7684\u8ddd\u79bb\uff082\uff09+\u63a5\u9001\u9a91\u58eb\u5230\u63a5\u9001\u70b9\u7684\u8ddd\u79bb\uff083\uff09+\u56fd\u738b\u5230\u63a5\u9001\u70b9\u7684\u8ddd\u79bb\uff084\uff09+\u9a91\u58eb\u4ece\u63a5\u9001\u70b9\u5230\u96c6\u5408\u70b9\u7684\u8ddd\u79bb\uff085\uff09\n\t\t\t\t\t\t=\u603b\u8ddd\u79bb\n\t\t\t\t\t\t*/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n[\u8bb0\u5f55\u4f20\u9001\u95e8](https://www.luogu.com.cn/record/58957837)\n\nBy **dengziyue**",
        "postTime": 1633232554,
        "uid": 387840,
        "name": "happy_dengziyue",
        "ccfLevel": 6,
        "title": "P1930\u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\uff0c\u5e94\u8be5\u662f\u660e\u663e\u7684$BFS$\u5427\u3002\u3002\u3002\n\n\u4e0d\u8fc7\uff0c\u6211\u4eec\u8981\u6ce8\u610f\u5176\u5b9e\u53ea\u8981\u5230\u4ee5\u56fd\u738b\u4e3a\u4e2d\u5fc3\u7684$5*5$\u7684\u8303\u56f4\u5373\u53ef\u3002\n\n\u672c\u4eba\u7528\u4e86$4$\u7ef4\u6570\u7ec4\uff0c\u8bf7$dalao$\u4eec\u52ff\u55b7$QWQ$\n\n\u4e0b\u9644\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <iostream>\nint dx[8]={-2,-1,1,2,2,1,-1,-2},dy[8]={-1,-2,-2,-1,1,2,2,1};\nint r,c,starth,startl,sb[2000][2],cnt;\nint q[2000][3],head,tail;\nint best[50][50][50][50];\nint answer=0x3f3f3f3f;\nbool flag;\nchar ch;\nusing namespace std;\nvoid BFS(int sx,int sy)//bfs\n{\n    head=0;\n    tail=1;\n    q[1][0]=sx;\n    q[1][1]=sy;\n    q[1][2]=0;\n    while (head<tail)\n    {\n        head++;\n        for (int i=0;i<8;i++)\n        {\n            int nx=q[head][0]+dx[i];\n            int ny=q[head][1]+dy[i];\n            if (nx<=0||nx>r||ny<=0||ny>c) continue;\n            if (best[sx][sy][nx][ny]>q[head][2]+1)\n            {\n                tail++;\n                q[tail][0]=nx;\n                q[tail][1]=ny;\n                q[tail][2]=q[head][2]+1;\n                best[sx][sy][nx][ny]=q[tail][2];\n                best[nx][ny][sx][sy]=q[tail][2];\n            }\n        }\n    }\n}\nint main()\n{\n    memset(best,0x3f3f3f3f,sizeof(best));\n    scanf(\"%d%d\",&c,&r);\n    while (cin>>ch)\n    {\n        if (flag)\n        {\n            scanf(\"%d\",&sb[++cnt][1]);\n            sb[cnt][0]=ch-64;\n        } else\n        {\n            scanf(\"%d\",&startl);\n            starth=ch-64;\n            flag=1;\n        }\n    }\n    for (int i=1;i<=r;i++)\n      for (int j=1;j<=c;j++)\n      {\n        best[i][j][i][j]=0;\n        BFS(i,j);\n      }\n    for (int i=1;i<=r;i++)\n      for (int j=1;j<=c;j++)\n      {\n      \tflag=1;\n      \tint s=0;\n      \tfor (int k=1;k<=cnt;k++) \n      \t  if (best[sb[k][0]][sb[k][1]][i][j]<0x3f3f3f3f)\n            s+=best[sb[k][0]][sb[k][1]][i][j]; else\n            {\n            \tflag=0;\n            \tbreak;\n            }\n        if (!flag) continue;\n      \tfor (int k=1;k<=cnt;k++)\n      \t{\n      \t\tif (s+max(abs(starth-i),abs(startl-j))<answer)\n      \t\t  answer=s+max(abs(starth-i),abs(startl-j));\n      \t\tfor (int ii=starth-2;ii<=starth+2;ii++)\n      \t\t  for (int jj=startl-2;jj<=startl+2;jj++)\n      \t\t    if (ii>0&&ii<=r&&jj>0&&jj<=c)\n      \t\t    {\n      \t\t    \tif (best[sb[k][0]][sb[k][1]][i][j]==0x3f3f3f3f) \n      \t\t    \t{\n      \t\t    \t\tflag=0;\n      \t\t    \t\tbreak;\n      \t\t    \t}\n      \t\t    \tif (best[sb[k][0]][sb[k][1]][ii][jj]==0x3f3f3f3f)\n      \t\t    \t{\n      \t\t    \t\tflag=0;\n      \t\t    \t\tbreak;\n      \t\t    \t}\n      \t\t    \tif (best[ii][jj][i][j]==0x3f3f3f3f)\n      \t\t    \t{\n      \t\t    \t\tflag=0;\n      \t\t    \t\tbreak;\n      \t\t    \t}\n      \t\t    \tif (s-best[sb[k][0]][sb[k][1]][i][j]+best[sb[k][0]][sb[k][1]][ii][jj]+best[ii][jj][i][j]+max(abs(starth-ii),abs(startl-jj))<answer)\n      \t\t      answer=s-best[sb[k][0]][sb[k][1]][i][j]+best[sb[k][0]][sb[k][1]][ii][jj]+best[ii][jj][i][j]+max(abs(starth-ii),abs(startl-jj));\n      \t\t    }\t  \t\t    \n      \t}\n      }\n    if (answer==0x3f3f3f3f) answer=0;\n    printf(\"%d\\n\",answer);\n    return 0;\n}```",
        "postTime": 1535372146,
        "uid": 48264,
        "name": "zhouhongkai",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf\u3011"
    },
    {
        "content": "###\u5751\u70b9.\n\n- \u8f93\u5165\u91cc\u56fd\u738b\u4e0e\u9a91\u58eb\u7684\u4f4d\u7f6e\u7b2c\u4e00\u4e2a\u662f\u5217,\u7b2c\u4e8c\u4e2a\u662f\u884c.\u56e0\u4e3a\u884c\u670940\u884c,\u5217\u53ea\u670926\u5217.\n\n- \u56fd\u738b\u53ea\u80fd\u5230\u4e0e\u81ea\u8eab\u76f8\u90bb\u7684\u56db\u4e2a\u65b9\u683c\u4e2d,\u4e0d\u80fd\u659c\u7740\u8d70.\n\n- \u8981\u7279\u5224\u6ca1\u6709\u9a91\u58eb\u7684\u60c5\u51b5\n\n\u9898\u4e2d\u56fe\u4f3c\u4e4e\u6709\u8bef.\u6211\u770b\u5176\u4ed6AC\u7684\u4ee3\u7801,\u4f3c\u4e4e\u56fd\u738b\u7684\u6b65\u6570\u76f4\u63a5\u7528\u4e24\u70b9\u4e4b\u95f4\u7684\u54c8\u5bc6\u987f\u8ddd\u79bb\u8ba1\u7b97\u4e86,\u6211\u6709\u4e9b\u4e0d\u592a\u660e\u767d.\u5982\u679c\u56fd\u738b\u516b\u4e2a\u65b9\u5411\u90fd\u53ef\u4ee5\u8d70,\u90a3\u4e48\u7b97\u51fa\u6765\u7684\u7b54\u6848\u4f1a\u6bd4\u6b63\u786e\u7b54\u6848\u5c0f.\u6c42\u89e3\u7b54.\n\n###\u5904\u7406\u65b9\u6cd5:\u521a\u5f00\u59cb\u8f93\u5165\u68cb\u76d8\u5927\u5c0f\u65f6\u5c06\u884c\u4e0e\u5217\u4e92\u6362.\n\n###\u601d\u8def:\u56e0\u4e3a\u56fd\u738b\u8d70\u7684\u6bd4\u9a91\u58eb\u6162,\u6240\u4ee5\u5c3d\u91cf\u8ba9\u9a91\u58eb\u53bb\u63a5\u56fd\u738b.\n\n###\u6b65\u9aa4:\n\n1. \u8ba1\u7b97\u6bcf\u4e2a\u70b9\u4e4b\u95f4\u4ee5\u9a91\u58eb\u8d70\u6cd5\u7684\u6700\u77ed\u8def.(\u5982\u679c\u4e0d\u80fd\u5230\u8fbe\u5219\u8bbe\u4e3a\u6781\u5927\u503c)\n\n2. \u679a\u4e3e\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u6c47\u96c6\u70b9.\u5206\u522b\u8ba1\u7b97\u603b\u6b65\u6570,\u6700\u540e\u53d6\u6700\u5c0f\u8f93\u51fa.\n\n**\u603b\u6b65\u6570\u516c\u5f0f** : \u6bcf\u4e2a\u9a91\u58eb\u5230\u6c47\u96c6\u70b9\u7684\u6b65\u6570 \u51cf \u5c06\u8981\u53bb\u63a5\u56fd\u738b\u7684\u9a91\u58eb\u5230\u6c47\u96c6\u70b9\u7684\u6b65\u6570 \u52a0 \u56fd\u738b\u5230\"\u9a91\u58eb\u63a5\u4ed6\u7684\u4f4d\u7f6e\"\u7684\u6b65\u6570 \u52a0 \u63a5\u56fd\u738b\u7684\u9a91\u58eb\u5230\"\u63a5\u56fd\u738b\u7684\u4f4d\u7f6e\"\u7684\u6b65\u6570  \u52a0 \"\u63a5\u56fd\u738b\u7684\u4f4d\u7f6e\"\u5230\u6c47\u96c6\u70b9\u7684\u6b65\u6570= \u603b\u6b65\u6570\n\n###\u7ec6\u8282:\n\n- \u9a91\u58eb\u63a5\u56fd\u738b\u7684\u4f4d\u7f6e\u7ecf\u8fc7\u8bc1\u660e\u5728\u56fd\u738b\u5468\u56f4\u516b\u4e2a\u683c\u5b50\u4e2d\u6216\u56fd\u738b\u672c\u8eab\u7684\u4f4d\u7f6e.\u4e0d\u7528\u679a\u4e3e\u6240\u6709\u5730\u56fe\u4e0a\u7684\u70b9\u4f5c\u4e3a\u6c47\u96c6\u70b9.\n\n- \u8f93\u5165\u5b57\u7b26\u65f6\u5efa\u8bae\u7528cin,\u7528scanf\u4f1a\u6709\u7384\u5b66\u9519\u8bef.\n\n###\u4ee3\u7801\u5982\u4e0b(\u5177\u4f53\u89c1\u6ce8\u91ca):\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<iostream>\n#include<cstring>\nusing namespace std;\n#define maxr 50\n#define maxc 50\ninline int Min(int x,int y){return x<y?x:y;}\ninline int Abs(int x){return x>=0?x:-x;}\nint R,C,tot,dis[maxr][maxc][maxr][maxc],t,ans=1<<30;\n//t\u4e3a\u679a\u4e3e\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u6c47\u96c6\u70b9\u8ba1\u7b97\u5f97\u5230\u7684\u603b\u6b65\u6570(\u5047\u8bbe\u9a91\u58eb\u4e0d\u53bb\u63a5\u56fd\u738b)\n//ans\u4e3a\u6700\u7ec8\u7684\u6700\u5c0f\u603b\u6b65\u6570 \nint dir[][2]= {{2,1},{1,2},{-2,1},{-1,2},{-1,-2},{-2,-1},{2,-1},{1,-2}};\n//\u9a91\u58eb\u79fb\u52a8\u65b9\u6cd5 \nstruct node{\n    int x,y;\n}king,knight[1505];\n//king\u4e3a\u56fd\u738b\u7684\u4f4d\u7f6e,knight\u4e3a\u9a91\u58eb\u7684\u4f4d\u7f6e \nqueue<node>q;//BFS\u6240\u9700\u8981\u7684\u961f\u5217(\u4e5f\u53ef\u4ee5\u624b\u5199) \nusing namespace std;\nvoid init(){\n    memset(dis,0x3f,sizeof(dis));//\u521d\u59cb\u4e3a\u6781\u5927\u503c \n    char c;\n    scanf(\"%d%d\",&C,&R);\n    cin>>c>>king.y;\n    king.x=c-'A'+1;\n    while(cin>>c) {\n        knight[++tot].x=c-'A'+1;\n        scanf(\"%d\",&knight[tot].y);\n    }//\u8bfb\u5165\n    //\u5c06\u5b57\u7b26\u8f6c\u5316\u4e3a\u6574\u6570 \u5e76\u4e14 \u6570\u7ec4\u4e0b\u6807\u4ece1\u5f00\u59cb \n}\nvoid bfs(int sx,int sy){//bfs(\u8d77\u59cb\u4f4d\u7f6e) \n    dis[sx][sy][sx][sy]=0;//\u4ece\u8d77\u59cb\u4f4d\u7f6e\u5230\u8d77\u59cb\u4f4d\u7f6e\u6240\u9700\u6b65\u6570\u4e3a 0\n    q.push((node){sx,sy});\n    while(!q.empty()){\n        node now=q.front();q.pop();\n        for(int i=0;i<8;++i){\n            int cx=now.x+dir[i][0],cy=now.y+dir[i][1];//\u9a91\u58eb\u8d70\u6cd5 \n            if(cx>=1&&cx<=R&&cy>=1&&cy<=C&&dis[sx][sy][cx][cy]==1061109567){//\u672a\u8d8a\u754c\u4e14\u8bbf\u95ee\u8fc7 \n                dis[sx][sy][cx][cy]=dis[sx][sy][now.x][now.y]+1;//\u6807\u8bb0\u6b65\u6570 \n                q.push((node){cx,cy});\n            }\n        }\n    }\n}\nvoid check(int mux,int muy,int fi,int ret){//\u53c2\u6570:\u6c47\u96c6\u70b9\u5750\u6807,\u7b2c\u51e0\u4e2a\u9a91\u58eb\u53bb\u63a5\u56fd\u738b,\u4e4b\u524d\u7684\u5f97\u5230\u7684\u6b65\u6570\u603b\u548c \n    ret-=dis[knight[fi].x][knight[fi].y][mux][muy];//\u5148\u51cf\u53bb\u8be5\u9a91\u58eb\u5230\u6c47\u96c6\u70b9\u7684\u8ddd\u79bb \n    for(int i=-1;i<=1;++i)//\u5728\u56fd\u738b\u5468\u56f4\u6216\u56fd\u738b\u672c\u8eab\u7684\u4f4d\u7f6e \n    for(int j=-1;j<=1;++j){\n        int ex=king.x+i,ey=king.y+j;//\u679a\u4e3e\u6c47\u96c6\u70b9 \n        if(ex>=1&&ex<=R&&ey>=1&&ey<=C){//\u4e3a\u8d8a\u754c \n            ans=Min(ans,ret+dis[knight[fi].x][knight[fi].y][ex][ey]+dis[ex][ey][mux][muy]+Abs(ex-king.x)+Abs(ey-king.y));\n        }//\u7531\u8ba1\u7b97\u516c\u5f0f\u66f4\u65b0ans \n    }\n}\nint main(){\n    init();\n    if(tot==0){printf(\"0\");return 0;}//\u7279\u5224\u6ca1\u6709\u9a91\u58eb\u7684\u60c5\u51b5 \n    for(int i=1;i<=R;++i)for(int j=1;j<=C;++j)bfs(i,j);//\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230\u68cb\u76d8\u4e0a\u4efb\u610f\u4e00\u70b9\u7684\u6700\u77ed\u8def \n    for(int i=1;i<=R;++i)\n    for(int j=1;j<=C;++j){\n        t=0;//\u6e05\u7a7a\u4e3a0 \n        for(int k=1;k<=tot;++k)t+=dis[knight[k].x][knight[k].y][i][j];//\u5148\u5f97\u5230\u603b\u548c \n        for(int k=1;k<=tot;++k)check(i,j,k,t);//\u68c0\u67e5\u5e76\u66f4\u65b0ans \n    }\n    printf(\"%d\",ans);//\u8f93\u51fa \n    return 0;\n}\n```",
        "postTime": 1509515593,
        "uid": 36075,
        "name": "karma",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf Camelot\u3011"
    },
    {
        "content": "\u6700\u77ed\u6b65\u6570 = \u9a91\u58eb\u6240\u8d70\u7684\u6b65\u6570 + \u56fd\u738b\u6240\u8d70\u7684\u6b65\u6570\u3002\n\n\u5bf9\u4e8e\u9a91\u58eb\u8d70\u7684\u6b65\u6570\uff0c\u4ee5\u96c6\u5408\u70b9\u4e3a\u6e90\u70b9bfs\u5373\u53ef;  \n\u5bf9\u4e8e\u56fd\u738b\u8d70\u7684\u6b65\u6570\uff0c\u5982\u679c\u4e0d\u5728\u9a91\u58eb\u53ef\u4ee5\u8d70\u7684\u70b9\u4e0a\uff0c\u5c31\u8ba9\u4ed6\u627e\u9a91\u58eb\u6216\u76f4\u63a5\u53bb\u96c6\u5408\u70b9\u3002\n\nbfs\u4e2d\u7528\u4e86\u4e00\u4e2aexist[i][j]\u6570\u7ec4\uff0c\u8868\u793a(i,j)\u5904\u5b58\u5728\u7684\u68cb\u5b50\u6570\uff1bcntt\u5219\u8868\u793a\u5df2\u7ecf\u5b8c\u6210\u7684\u9a91\u58eb\u6570\u91cf\u3002\u663e\u7136\u5f53cntt\u4e3a\u9a91\u58eb\u603b\u6570\u91cfcnt\u65f6\u5c31\u53ef\u4ee5\u5b8c\u6210bfs\u4e86\u3002\u540c\u65f6\u8fd9\u91cc\u7528\u6765\u4e00\u4e2a\u5c0f\u526a\u679d\uff0c\u5f53\u524d\u6b65\u6570\u5927\u4e8e\u76ee\u524d\u6700\u4f18\u89e3\u5c31\u76f4\u63a5\u8df3\u8fc7\u3002\n\n\u6807\u8bb0\u9a91\u58eb\u53ef\u4ee5\u8d70\u8fc7\u7684\u70b9\u7684\u65b9\u6cd5\u662f\u901a\u8fc7[[UVA1599] \u7406\u60f3\u8def\u5f84](https://www.luogu.org/problemnew/show/UVA1599)\u5b66\u6765\u7684\uff0c\u4ee5\u96c6\u5408\u70b9\u4e3a\u6e90\u70b9bfs\u5b8c\u4e4b\u540e\uff0c\u5904\u4e8edis[i][j]\u7684\u9a91\u58eb\uff0c\u4e0b\u4e00\u6b65\u5fc5\u7136\u8d70\u5230dis[i][j]-1\u7684\u70b9\u4e0a\uff0c\u5f53\u7136\uff0c\u5982\u679c\u6709\u591a\u4e2adis[i][j]-1\uff0c\u90a3\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u8d70\uff0c\u6240\u4ee5\u8bf4\u662f\u9a91\u58eb**\u53ef\u4ee5**\u8d70\u5230\u7684\u70b9\u3002\n\n\u56fd\u738b\u627e\u9a91\u58eb\u7684\u8bdd\uff0c\u6211\u76f4\u63a5\u8ba9\u4ed6\u53bb\u5230\u4e86\u5404\u9a91\u58eb\u7684\u8d77\u70b9\u3002~~\u4f46\u662f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5c31\u662fA\u8fc7\u53bb\u4e86~~\n\n\u66b4\u529b\u679a\u4e3e\u96c6\u5408\u70b9\uff0cbfs\u540e\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <cmath>\n#define M(x,y) make_pair((x),(y)) \nusing namespace std;\n\nconst int maxr = 300;\nconst int maxc = 500;\nconst int maxn = 1e6 + 10;\nconst int dx[] = {-2,-1,1,2,2,1,-1,-2};\nconst int dy[] = {1,2,2,1,-1,-2,-2,-1};\npair<int,int> knight[maxn],king;\nint dis[maxr][maxc];\nint exist[maxr][maxc]; //\u6807\u8bb0\u683c\u5b50\u4e0a\u6709\u591a\u5c11\u68cb\u5b50(\u5176\u5b9e\u53ea\u67090\u30011\u548c2\u4e09\u79cd\u503c)\nbool vis[maxr][maxc],able[maxr][maxc]; //able[i][j]\u4e3a\u771f\u8868\u793a\u6709\u9a91\u58eb\u8d70\u8fd9\u4e00\u683c\nint n,m,a,b,cnt,ans=9999;\n\nvoid input();\nbool inMap(int,int);\nvoid bfs(int,int); \nvoid mark(int,int);\nvoid solve();\nvoid output();\n\nint main(){\n    input();\n    solve();\n    output();\n    return 0;\n}\n\nvoid input(){\n    scanf(\"%d%d\",&n,&m); char t;\n    cin >> t >> king.first; king.second = t - 'A' + 1;\n    while (cin >> t >> knight[cnt].first) {\n        knight[cnt].second = t - 'A' + 1,\n        exist[knight[cnt].first][knight[cnt++].second]++;\n    }\n}\n\nbool inMap(int x,int y){\n    return x > 0 && x <= n && y > 0 && y <= m; \n}\n\nvoid bfs(int sx, int sy){\n    memset(dis,-1,sizeof(dis)); bool flag = 1;\n    memset(able,0,sizeof(able));\n    queue<pair<int,int> > q; int cntt = exist[sx][sy], p = 0;\n    dis[sx][sy] = 0; q.push(M(sx,sy));\n    \n    while (!q.empty() && flag){ //\u5c0f\u526a\u679d\uff0c\u5982\u679c\u73b0\u5728\u5df2\u7ecf\u6709\u5927\u4e8e\u6700\u4f18\u89e3\u7684\u6b65\u6570\uff0c\u526a\u6389\n        int x = q.front().first;\n        int y = q.front().second; q.pop();\n        \n        for (int i = 0; i < 8; i++){\n            int nx = x + dx[i];\n            int ny = y + dy[i];\n            if (!inMap(nx,ny) || dis[nx][ny] > -1) continue;\n            dis[nx][ny] = dis[x][y] + 1;\n            cntt += exist[nx][ny];\n            if (cntt == cnt || dis[nx][ny] > ans) \n                {flag = 0; break;} //\u641c\u5b8c\u6240\u6709\u9a91\u58eb \u6216 \u6ee1\u8db3\u526a\u679d\u6761\u4ef6\n            q.push(M(nx,ny));\n        }\n    } \n    \n    if (cntt != cnt) return; //\u6709\u9a91\u58eb\u65e0\u6cd5\u8d70\u5230\u8fd9\u4e00\u96c6\u5408\u70b9\uff0c\u6b64\u60c5\u51b5\u65e0\u89e3\n    \n    int t = 9999;\n    for (int i = 0; i < cnt; i++)\n        mark(knight[i].first,knight[i].second); //\u6807\u8bb0\u9a91\u58eb\u80fd\u8d70\u7684\u70b9\n    \n    t = min(t,abs(king.first-sx) + abs(king.second-sy)); //\u56fd\u738b\u76f4\u63a5\u8d70\u5230\u96c6\u5408\u70b9\u7684\u6b65\u6570\n    for (int i = 0; i < cnt; i++){\n        p += dis[knight[i].first][knight[i].second];\n        t = min(abs(king.first-knight[i].first)+abs(king.second-knight[i].second),t); //\u56fd\u738b\u8d70\u5230\u9a91\u58eb\u8d77\u70b9\u7684\u4f4d\u7f6e\n    }\n    if (able[king.first][king.second]) t = 0; //\u5982\u679c\u9a91\u58eb\u80fd\u8d70\u5230\u56fd\u738b\u6240\u5728\u4f4d\u7f6e\uff0c\u56fd\u738b\u4e0d\u9700\u8d70\u52a8\n    \n    ans = min(ans,p+t); //\u66f4\u65b0\u7b54\u6848\n}\n\nvoid mark(int x, int y){\n    queue<pair<int,int> > q;\n    q.push(M(x,y)); able[x][y] = 1;\n    \n    while (!q.empty()){\n        int x = q.front().first;\n        int y = q.front().second; q.pop();\n        \n        for (int i = 0; i < 8; i++){\n            int nx = x + dx[i];\n            int ny = y + dy[i];\n            if (!inMap(nx,ny) || dis[x][y] - 1 != dis[nx][ny] || able[nx][ny]) \n                continue; //\u9a91\u58eb\u4e0b\u4e00\u6b65\u8d70\u7684\u70b9\u5230\u96c6\u5408\u70b9\u7684\u8ddd\u79bb \u5fc5\u987b\u662f \u8fd9\u4e2a\u70b9\u5230\u96c6\u5408\u70b9\u7684\u8ddd\u79bb \u51cf\u4e00\u3002\n            able[nx][ny] = 1;\n            q.push(M(nx,ny));\n        }\n    }\n}\n\nvoid solve(){\n    //\u679a\u4e3e\u96c6\u5408\u70b9\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= m; j++)\n            bfs(i,j);\n}\n\nvoid output(){\n    if (ans == 9999) cout << 0 << endl;\n    else cout << ans << endl;\n}\n```\n",
        "postTime": 1555519620,
        "uid": 129873,
        "name": "ReModer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf\u3011"
    },
    {
        "content": "\u849f\u84bb\u82b1\u4e86\u4e24\u5929\u786c\u809b\u8fc7\u8fd9\u9053\u9898 \u5fc3\u60c5~~\u5077\u7a0e~~\u6109\u60a6 \u671f\u95f4\u5fc3\u6001\u5d29\u8fc7\u60f3\u5b66\u4e60\u9898\u89e3 \u4f46\u53d1\u73b0\u9898\u89e3\u91cc\u9762\u53ea\u6709\u56db\u7ef4\u6570\u7ec4\u89e3\u6cd5 \u773c\u82b1\u7f2d\u4e71 \u4e8e\u662f\u672c\u849f\u84bb\u6253\u7b97\u81ea\u5df1\u5199\u8fc7\u8fd9\u9053\u9898\u3002  \n\u6211\u7684\u4e3b\u8981\u601d\u60f3\u662f\uff1a  \n## BFS\n\u5148\u4e00\u904dbfs\u6c42\u51fa\u6bcf\u4e2a\u9a91\u58eb\u5230\u8fbe\u5404\u4e2a\u70b9\u7684\u6b65\u6570\u5e76\u76f8\u52a0\uff0c\u5982\u679c\u5b58\u5728\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9\u5c31\u8bbe\u4e3a-1(\u521d\u59cb\u5316\u7684\u65f6\u5019\u5df2\u7ecf\u5904\u7406\u4e3a-1)\u3002\u6ce8\u610f\u7279\u5224\u6ca1\u6709\u9a91\u58eb\u7684\u60c5\u51b5\u3002  \n\u7b2c\u4e8c\u6b65\u5904\u7406\u51fa\u56fd\u738b\u5230\u5404\u4e2a\u70b9\u7684\u6b65\u6570\u3002  \n\u7b2c\u4e09\u6b65\u679a\u4e3e\u6bcf\u4e2a\u9a91\u58eb\u63a5\u9001\u56fd\u738b\uff0c\u5148\u4ece\u603b\u6b65\u6570\u7684\u6570\u7ec4a\u4e2d\u51cf\u53bb\u8be5\u9a91\u58eb\u539f\u5148\u7684\u6b65\u6570\uff0c\u518d\u5c06\u8be5\u9a91\u58eb\u539f\u672c\u5230\u8fbe\u5404\u70b9\u7684\u6700\u77ed\u6b65\u6570\u4e0e\u56fd\u738b\u6b65\u6570\u76f8\u52a0\u6c42\u51fa**\u63a5\u56fd\u738b\u7684\u6700\u5c11\u6b65\u6570**\u3002  \n\u7b2c\u56db\u6b65\u662f\u4ee5**\u63a5\u56fd\u738b\u7684\u6700\u5c11\u6b65\u6570**\u7684\u4f4d\u7f6e\u4e3a\u8d77\u70b9\u518d\u6b21bfs\uff0c\u6c42\u51fa\u8be5\u70b9\u5230\u5404\u70b9\u7684\u6700\u5c11\u6b65\u6570\uff0c\u7136\u540e\u628a\u7ed3\u679c\u52a0\u4e0a**\u63a5\u56fd\u738b\u7684\u6700\u5c11\u6b65\u6570**\u5373\u53ef\u6c42\u51fa\u8be5\u9a91\u58eb\u63a5\u56fd\u738b\u540e\u5230\u8fbe\u96c6\u5408\u70b9\u7684\u6700\u5c11\u6b65\u6570\u3002  \n\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u63a5\u56fd\u738b\u7684\u6700\u5c11\u6b65\u6570\u6709\u53ef\u80fd\u6709\u591a\u4e2a\u4f4d\u7f6e\u3002\u6240\u4ee5\u6211\u4eec\u4f7f\u7528minx\u548cminy\u4e24\u4e2a\u6570\u7ec4\u4fdd\u5b58\u4f4d\u7f6e\u5750\u6807\u3002\u518d\u4e00\u4e2a\u4e2a\u679a\u4e3e\u4f4d\u7f6e\u3002  \n\u672c\u9898\u89e3\u5f97\u4ee5\u5b9e\u73b0\u7684\u539f\u56e0\u662f\u4e8b\u5148\u5df2\u7ecf\u6c42\u51fa\u4e86\u5230\u5404\u70b9\u7684\u6700\u5c11\u6b65\u6570\uff0c\u8fd9\u6837\u5355\u72ec\u6539\u53d8\u4e00\u4e2a\u9a91\u58eb\u548c\u56fd\u738b\u7684\u6b65\u6570\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5230\u5168\u5c40 \u53cd\u800c\u80fd\u591f\u66f4\u52a0\u76f4\u89c2\u7684\u6c42\u51fa\u6700\u77ed\u6b65\u6570\u3002  \n\uff08\u82f1\u6587\u90e8\u5206\u662f\u6211\u5199\u4ee3\u7801\u65f6\u5019\u61d2\u5f97\u8c03\u8f93\u5165\u6cd5\u7684\u6ce8\u91ca\uff0c\u89c9\u5f97\u5927\u6982\u80fd\u591f\u5e2e\u52a9\u7406\u89e3\u5c31\u7559\u7740\u4e86\u3002\uff09\n```cpp\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<cstring>\n#include<iostream>\n#include<iomanip>\n#include<algorithm>\n#define re register\nusing namespace std;\n\nstruct node//for bfs\n{\n    int x;\n    int y;\n    int cnt;\n};\n\nvector<node> q;//\u50a8\u5b58\u9a91\u58eb\u5750\u6807\nqueue<node> tmp;//bfs\u7528\u4e34\u65f6\u961f\u5217\n\nint r, c, kx, ky, minx[40 * 27], miny[40 * 27], ans = 2147483647;\nint dx[16] = {1,  1, 2,  2, -1, -1, -2, -2, 1, 1,  1, 0,  0, -1, -1, -1};\nint dy[16] = {2, -2, 1, -1,  2, -2,  1, -1, 0, 1, -1, 1, -1, -1,  1,  0};\nint a[27][41], k[27][41], e[27][41], f[28][42];\nbool vis[27][41];\n\nvoid bfs(node s)\n{\n    int sx = s.x, sy = s.y;//\u8d77\u59cb\u5750\u6807\n    while(!tmp.empty()) tmp.pop();//\u522b\u5fd8\u4e86\u6e05\u7a7a\u961f\u5217\n    tmp.push(s);\n    if(a[sx][sy] < 0) a[sx][sy] = 0;//\u5982\u679c\u5c1a\u672a\u51fa\u73b0\u9a91\u58eb \u66f4\u65b0\u3002\n    vis[sx][sy] = true;\n    while(!tmp.empty())\n    {\n        int x = tmp.front().x, y = tmp.front().y, cnt = tmp.front().cnt;\n        tmp.pop();\n        for(re int i = 0; i < 8; ++i)//x:lie\n        {\n            int nx = x + dx[i], ny = y + dy[i];\n            if(!vis[nx][ny] && nx >= 1 && nx <= c && ny >= 1 && ny <= r)\n            {\n                vis[nx][ny] = true;\n                if(a[nx][ny] >= 0) a[nx][ny] += cnt + 1;//\u5982\u679c\u5c1a\u672a\u51fa\u73b0\u9a91\u58eb \u66f4\u65b0\u3002\n                else a[nx][ny] = cnt + 1;//\u5426\u5219\u8be5\u4f4d\u7f6e\u6b65\u6570\u52a0\u4e0a\u8be5\u9a91\u58eb\u6b65\u6570\n                tmp.push((node){nx, ny, cnt + 1});\n            }\n        }\n    }\n}\n\nvoid kbfs(node s)//\u56fd\u738b\u6b65\u6570\u8ba1\u7b97\n{\n    int sx = s.x, sy = s.y;\n    while(!tmp.empty()) tmp.pop();\n    tmp.push(s);\n    vis[sx][sy] = true;\n    while(!tmp.empty())\n    {\n        int x = tmp.front().x, y = tmp.front().y, cnt = tmp.front().cnt;\n        tmp.pop();\n        for(re int i = 8; i < 16; ++i)//x:lie\n        {\n            int nx = x + dx[i], ny = y + dy[i];\n            if(!vis[nx][ny] && nx >= 1 && nx <= c && ny >= 1 && ny <= r)\n            {\n                vis[nx][ny] = true;\n                k[nx][ny] = cnt + 1;\n                tmp.push((node){nx, ny, cnt + 1});\n            }\n        }\n    }\n}\n\nvoid find_min(node s)//\u627e\u51fa\u63a5\u56fd\u738b\u7684\u6700\u5c0f\u6b65\u6570\n{\n    memset(vis, false, sizeof(vis));//\u521d\u59cb\u5316vis\n    int sx = s.x, sy = s.y;\n    while(!tmp.empty()) tmp.pop();\n    tmp.push(s);\n    e[sx][sy] = k[sx][sy];//e\u73b0\u5728\u7528\u4f5c\u50a8\u5b58\u63a5\u56fd\u738b\u7684\u6700\u5c0f\u6b65\u6570\n    vis[sx][sy] = true;\n    while(!tmp.empty())\n    {\n        int x = tmp.front().x, y = tmp.front().y, cnt = tmp.front().cnt;\n        tmp.pop();\n        for(re int i = 0; i < 8; ++i)//x:lie\n        {\n            int nx = x + dx[i], ny = y + dy[i];\n            if(!vis[nx][ny] && nx >= 1 && nx <= c && ny >= 1 && ny <= r)\n            {\n                vis[nx][ny] = true;\n                e[nx][ny] = k[nx][ny] + cnt + 1;\n                tmp.push((node){nx, ny, cnt + 1});\n            }\n        }\n    }\n}\n\nvoid find_all(node s)//\u5728\u6700\u7ec8\u7684\u5730\u56fe\u4e2d\u6c42\u51fa\u6700\u5c0f\u503c \u6b64\u65f6\u4ee5\u63a5\u56fd\u738b\u7684\u6700\u5c0f\u6b65\u6570\u7684\u4f4d\u7f6e\u4e3a\u8d77\u70b9\n{\n    memset(vis, false, sizeof(vis));\n    int sx = s.x, sy = s.y;\n    while(!tmp.empty()) tmp.pop();\n    tmp.push(s);\n    vis[sx][sy] = true;\n    while(!tmp.empty())\n    {\n        int x = tmp.front().x, y = tmp.front().y, cnt = tmp.front().cnt;\n        tmp.pop();\n        for(re int i = 0; i < 8; ++i)//x:lie\n        {\n            int nx = x + dx[i], ny = y + dy[i];\n            if(!vis[nx][ny] && nx >= 1 && nx <= c && ny >= 1 && ny <= r)\n            {\n                vis[nx][ny] = true;\n                e[nx][ny] += cnt + 1;\n                tmp.push((node){nx, ny, cnt + 1});\n            }\n        }\n    }\n}\n\nvoid change_origin(node s)//\u7cbe\u9ad3 \u603b\u6b65\u6570\u51cf\u53bb\u5f53\u524d\u9a91\u58eb\u7684\u6b65\u6570\n{\n    memset(vis, false, sizeof(vis));\n    int sx = s.x, sy = s.y;\n    while(!tmp.empty()) tmp.pop();\n    tmp.push(s);\n    f[sx][sy] = e[sx][sy] = a[sx][sy];//\u8fd9\u91cc\u7684e\u548cf\u662f\u50a8\u5b58\u51cf\u53bb\u4e4b\u540e\u7684\u6b65\u6570\n    vis[sx][sy] = true;\n    while(!tmp.empty())\n    {\n        int x = tmp.front().x, y = tmp.front().y, cnt = tmp.front().cnt;\n        tmp.pop();\n        for(re int i = 0; i < 8; ++i)//x:lie\n        {\n            int nx = x + dx[i], ny = y + dy[i];\n            if(!vis[nx][ny] && nx >= 1 && nx <= c && ny >= 1 && ny <= r)\n            {\n                vis[nx][ny] = true;\n                f[nx][ny] = e[nx][ny] = a[nx][ny] - cnt - 1;\n                tmp.push((node){nx, ny, cnt + 1});\n            }\n        }\n    }\n}\n\nint main()\n{\n    //freopen(\"1930.txt\", \"r\", stdin);\n    cin >> r >> c;//r:hang c:lie\n    for(re int i = 1; i <= c; ++i)\n    \tfor(re int j = 1; j <= r; ++j)\n    \t\ta[i][j] = -1;\n    char t;\n    cin >> t >> ky;\n    kx = t - 'A' + 1;\n    while(cin >> t)//input\n    {\n        int x = t - 'A' + 1, y;\n        cin >> y;\n        q.push_back((node){x, y, 0});\n    }\n    \n    if(q.empty())//special situation\n    {\n        printf(\"0\");\n        return 0;\n    }\n    \n    kbfs((node){kx, ky, 0});//king's step\n    \n    for(re int mm = 0; mm < q.size(); ++mm)//storage all steps without king\n    {\n        memset(vis, false, sizeof(vis));\n        bfs(q[mm]);\n    }\n    \n    int minn, pos, tnum;\n    \n    for(re int mm = 0; mm < q.size(); ++mm)//every knight\n    {\n    \tminn = 2147483647, pos = 0;//\u521d\u59cb\u5316\n    \tmemset(minx, 0, sizeof(minx));\n    \tmemset(miny, 0, sizeof(miny));\n    \tmemset(e, -1, sizeof(e));\n    \t\n        find_min(q[mm]);//find the min element of e, no need to judge \"-1\"\n        for(re int i = 1; i <= c; ++i)\n        \tfor(re int j = 1; j <= r; ++j)\n        \t\tif(e[i][j] >= 0) minn = min(minn, e[i][j]);//find min \u53ea\u627e\u9a91\u58eb\u80fd\u591f\u5230\u8fbe\u7684\u5730\u65b9\n    \t\n    \tfor(re int i = 1; i <= c; ++i)\n        \tfor(re int j = 1; j <= r; ++j)\n        \t\tif(e[i][j] == minn)\n        \t\t\tminx[++pos] = i, miny[pos] = j;//find min's position\n        \n        change_origin(q[mm]);//a[][] without 1 knight\n        \n        for(re int i = 1; i <= pos; ++i)//\u8fd9\u91cc\u662f\u5bf9\u63a5\u56fd\u738b\u7684\u6700\u5c0f\u6b65\u6570\u7684\u4e0d\u540c\u7684\u4f4d\u7f6e\u8fdb\u884cbfs\n        {\n        \ttnum = 2147483647;//\u521d\u59cb\u5316\n        \tfor(re int j = 1; j <= c; ++j)\n        \t\tfor(re int l = 1; l <= r; ++l)\n        \t\t\tif(e[j][l] >= 0) e[j][l] = f[j][l];//f\u50a8\u5b58\u51cf\u53bb\u9a91\u58eb\u6b65\u6570\u4ee5\u540e\u7684\u6570\u7ec4 \u56e0\u4e3ae\u6570\u7ec4\u5bf9\u4e8e\u4e0d\u540c\u7684\u4f4d\u7f6e\u88ab\u6539\u53d8\u4e86 \u6240\u4ee5\u9700\u8981f\u6570\u7ec4\u6062\u590d \u53ea\u6062\u590d\u80fd\u591f\u5230\u8fbe\u7684\u4f4d\u7f6e\u3002\n        \tfind_all((node){minx[i], miny[i], 0});//\u627e\u51fa\u5168\u5c40\u6700\u5c0f\u503c\n        \tfor(re int j = 1; j <= c; ++j)\n            \tfor(re int l = 1; l <= r; ++l)\n            \t\tif(e[j][l] >= 0) tnum = min(tnum, e[j][l]);//find min \u8fd9\u91cc\u662f\u6700\u7ec8\u7ed3\u679c\n            tnum += minn;//\u522b\u5fd8\u52a0\u4e0a\u63a5\u56fd\u738b\u7684\u6700\u5c0f\u6b65\u6570\n            ans = min(ans, tnum);//\u66f4\u65b0ans\n        }\n    }\n    \n    cout << ans << endl;\n    return 0;\n}\n```",
        "postTime": 1541074112,
        "uid": 55683,
        "name": "QianhanOfficial",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf\u3011"
    },
    {
        "content": "\u6b64\u9898\uff0c\u5148bfs\u6c42\u51fa\u9a91\u58eb\u4ece\u4e00\u70b9\u5230\u53e6\u4e00\u70b9\u7684\u6700\u77ed\u6b65\u6570\uff0c\u518d\u679a\u4e3e\u96c6\u5408\u70b9\uff0c\u6c42\u51fa\u6240\u6709\u9a91\u58eb\u5230\u96c6\u5408\u70b9\u7684\u6b65\u6570\uff0c\u63a5\u7740\u627e\u63a5\u56fd\u738b\u7684\u9a91\u58eb\uff0c\u5c06\u6bcf\u4e00\u6b21\u7684\u7ed3\u679c\u6bd4\u8f83\u3002  \n\u65b9\u6cd5\u597d\u60f3\uff0c\u770b\u600e\u4e48\u5b9e\u73b0\u3002  \n\u8fd9\u4e2a\u8ba1\u7b97\u7b54\u6848\u7684\u516c\u5f0f\uff1a\n```pascal\n\u603b\u6b65\u6570=\u6240\u6709\u9a91\u58eb\u5230\u96c6\u5408\u70b9\u6b65\u6570+\u63a5\u56fd\u738b\u6240\u9700\u6b65\u6570-\u63a5\u56fd\u738b\u7684\u9a91\u58eb\u539f\u672c\u6b65\u6570\n```\n\u4ee3\u7801\u5e94\u8be5~~\u5f88\u8be6\u7ec6~~\u8bf4\u660e\u4e86\uff1a\n```cpp\n#include<map>\n#include<cmath>\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\n#define N 0x7fffffff\nusing namespace std;\nconst int dx[10]={-2,-2,-1,-1, 1, 1, 2, 2};//\u884c\uff0c\u9a91\u58eb\u7684\u884c\u52a8(\u65b9\u5411)\nconst int dy[10]={-1, 1,-2, 2,-2, 2,-1, 1};//\u5217\u64cd\u4f5c\u2191 \nstruct node\n{\n    int x,y;//\u8868\u793a\u4f4d\u7f6e \n}gw,qs[1111],list[5555];//gw\u2192\u56fd\u738b;qs\u2192\u9a91\u58eb;list\u662f\u5bbd\u641c\u7528\u7684\u961f\u5217 \nint R,C,n,ans=N;//n\u662f\u9a91\u58eb\u4e2a\u6570\uff0cans\u8bb0\u5f55\u7b54\u6848 \nint f[50][30][50][30];//f[i][j][x][y]\u8868\u793a\u4ece(i,j)\u5230(x,y)\u9a91\u58eb\u7684\u6b65\u6570 \n//int calc(int xx,int yy){return (xx-1)*C+yy;}\nint d_gw(int _x,int _y){return max(abs(gw.x-_x),abs(gw.y-_y));}\n//\u56fd\u738b\u5230(_x,_y)\u7684\u6b65\u6570 \nvoid bfs(int _x,int _y)//\u8d77\u59cb\u70b9 \n{\n    int head=1,tail=2;bool v[50][30];//\u5224\u91cd \n    memset(v,0,sizeof(v));v[_x][_y]=1;//\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u5728list\u91cc \n    f[_x][_y][_x][_y]=0;//\u81ea\u5df1\u7684\u8ddd\u79bb0 \n    list[1].x=_x,list[1].y=_y;//list\u7b2c\u4e00\u9879\u662f\u8d77\u59cb\u70b9 \n    while(head<tail)//\u5bbd\u641c \n    {\n        int x=list[head].x,y=list[head].y;//\u53d6\u51fa\u961f\u5217\u91cc\u7684\u70b9\u5750\u6807 \n        for(int t=0;t<8;t++)//\u679a\u4e3e\u9a91\u58eb\u516b\u79cd\u65b9\u5411 \n        {\n            int X=x+dx[t],Y=y+dy[t];//\u6c42\u51fa\u8d70\u540e\u4f4d\u7f6e \n            if(X>0&&Y>0&&X<=R&&Y<=C)//\u4e0d\u80fd\u8d85\u754c \n            {\n                if(f[_x][_y][X][Y]>f[_x][_y][x][y]+1)\n                {//\u5982\u679c\u524d\u4e00\u6b65\u7684\u6b65\u6570+1\u6bd4\u5f53\u524d\u8d77\u59cb\u70b9\u5230\u8fd9\u70b9\u7684\u6b65\u6570\u5c11 \n                    f[_x][_y][X][Y]=f[_x][_y][x][y]+1;//\u5c31\u66f4\u65b0 \n                    if(!v[X][Y])//\u5982\u679c\u4e0d\u5728\u961f\u5217\u91cc \n                    {\n                        v[X][Y]=1;//\u52a0\u8fdb\u961f\u5217 \n                        list[tail].x=X,list[tail++].y=Y;\n                    }//\u5c3e\u5230\u4e0b\u4e00\u9879 \n                }\n            }\n        }\n        head++;//\u5934\u6307\u5230list\u4e0b\u4e00\u9879 \n    }\n}\nint main()\n{\n    char c[3];memset(f,63,sizeof(f));//\u4e00\u5f00\u59cb\u65e0\u7a77\u5927\u65b9\u4fbf\u6c42\u6700\u5c0f \n    #define M f[0][0][0][0]//\u8bb0\u5f55f\u539f\u59cb\u503c \n    scanf(\"%d%d\",&R,&C);//\u884c\u5217\u6ca1\u6709\u53cd \n    scanf(\"%s%d\",c,&gw.x);//\u6570\u5b57\u662f\u6a2a\u5750\u6807 \n    gw.y=c[0]-'A'+1;//\u5b57\u6bcd\u8f6c\u6210\u7eb5\u5750\u6807 \n    while(scanf(\"%s\",c)!=EOF)//\u6ca1\u6709\u7ed9\u51fa\u56fa\u5b9a\u9a91\u58eb\u4e2a\u6570 \n    {\n        qs[++n].y=c[0]-'A'+1;//\u9a91\u58eb\u603b\u6570\u5148+1\u518d\u5b58 \n        scanf(\"%d\",&qs[n].x);\n    }\n    for(int i=1;i<=R;i++)\n        for(int j=1;j<=C;j++)\n            bfs(i,j);//\u5bbd\u641c\u9884\u5904\u7406f\u6570\u7ec4 \n    int x1=max(1,gw.x-2),x2=min(R,gw.x+2);//\u6c42\u51fa\u56fd\u738b\u00b12\u7684\u8303\u56f4 \n    int y1=max(1,gw.y-2),y2=min(C,gw.y+2);//\u5e76\u63a7\u5236\u4e0d\u8d85\u8fb9\u754c \n    for(int i=1;i<=R;i++)\n    {\n        for(int j=1;j<=C;j++)//\u679a\u4e3e\u96c6\u5408\u70b9 \n        {\n            int s1=0,s2;bool flag=1;//s1\u662f\u6240\u6709qs\u5230\u96c6\u5408\u70b9\u7684\u6b65\u6570\uff0cs2\u662f\u63a5gw\u6240\u7528\u7684\u6b65\u6570 \n            for(int k=1;k<=n;k++)//qs\n            {\n                if(f[qs[k].x][qs[k].y][i][j]>=M){flag=0;break;}//\u6709\u9a91\u58eb\u5230\u4e0d\u4e86\u96c6\u5408\u70b9 \n                s1+=f[qs[k].x][qs[k].y][i][j];//\u52a0\u4e0a\u6b65\u6570 \n            }\n            if(!flag)continue;//\u8fd9\u70b9\u5c31\u4e0d\u80fd\u96c6\u5408 \n            ans=min(ans,s1+d_gw(i,j));//\u5148\u6bd4\u8f83\u56fd\u738b\u81ea\u5df1\u8d70\u7684\u65b9\u6848 \n            for(int o=1;o<=n;o++)//\u679a\u4e3e\u63a5\u56fd\u738b\u7684qs \n            {\n                s2=N;\n                for(int p=x1;p<=x2;p++)//\u63a5\u7684\u70b9\u518d\u56fd\u738b\u5468\u56f4\u00b12\u624d\u4f1a\u662f\u6700\u4f18\u65b9\u6848 \n                    for(int q=y1;q<=y2;q++)//\u521a\u521a\u8303\u56f4\u5df2\u7ecf\u6c42\u4e86\u76f4\u63a5\u7528 \n                    {\n                        if(f[qs[o].x][qs[o].y][p][q]>=M)continue;//\u540c\u4e0a\uff0c\u65e0\u6cd5\u5230\u8fbe \n                        s2=min(s2,d_gw(p,q)+f[qs[o].x][qs[o].y][p][q]+f[p][q][i][j]);\n                    }//\u63a5\u7684\u6b65\u6570=gw\u5230\u63a5\u7684\u70b9\u6b65\u6570+qs\u5230\u63a5\u7684\u70b9+qs\u4ece\u63a5\u7684\u70b9\u5230\u96c6\u5408\u70b9\u7684\u6b65\u6570;\n                ans=min(ans,s1+s2-f[qs[o].x][qs[o].y][i][j]);//\u8ba1\u7b97\u65b9\u6cd5 \n            }\n        }\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n~~Eh\u3002\u3002\u3002\u6211\u56e0\u4e3a\u770b\u4e86\u67d0\u4e9b\u8bf4\u96c6\u5408\u70b9\u518d\u56fd\u738b\u5468\u56f45```*```5\u7684\u800c\u88ab\u5751\u4e86\u8bb8\u4e45~~",
        "postTime": 1530927499,
        "uid": 60654,
        "name": "key_rA9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u7bc7\u9898\u89e3\u796d\u3002\n\n\u7ec8\u4e8eA\u4e86\u3002\u3002\uff08\u6211\u771f\u662f\u4e00\u4e2a\u5c0f\u849f\u84bb\uff09\n\u7814\u7a76\u4e86\u6211\u51e0\u4e2a\u4e2d\u5348\uff0c\u539f\u6765\u5c31\u662f\u628a\uff1a\n```cpp\nmax(abs(stx-edx),abs(sty-edy))\n```\n\u6253\u6210\u4e86\uff1a\n```cpp\nmax(abs(stx-edx),abs(edx-edy))\n```\n\u7136\u540e\u53c8\u591a\u6b64\u4e00\u4e3e\u628ax\u5012\u8fc7\u6765\u5b58\u3002\u3002\u3002\u3002\u3002\n~~\u6211\u53ef\u80fd\u771f\u7684\u6709\u70b9\u8111\u6b8b~~\n\n\u6240\u4ee5\u4ee5\u540e\u63d0\u9192\u5404\u4f4d\uff0c\u5982\u679c\u6709\u65f6\u600e\u4e48\u505a\u90fd\u5bf9\u4e0d\u4e86\uff0c\u90a3\u4e48\u4f60\u5c31\u627e\u627e\u662f\u4e0d\u662f\u53d8\u91cf\u6253\u9519\u4e86\u554a\u4e4b\u7c7b\u7684\uff0c\u771f\u5751\u554a\uff0c\u82b1\u4e86\u6211\u51e0\u4e2a\u4e2d\u5348\u3002\u3002\u3002\u3002\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u4e0d\u662f\u5f88\u96be\uff0c\u53ea\u662f\u4f60\u53ea\u662f\u9700\u8981\u6253\u5f88\u957f\u7684\u4ee3\u7801\u5c31\u662f\u4e86\u3002\u6838\u5fc3\u601d\u8def\u5c31\u662f\uff1a\u5b9a\u4e49\u4e00\u4e2af[i][j][k][t]\uff0c\u8868\u793a\u4ece\uff08i\uff0cj\uff09\u5230\uff08k\uff0ct\uff09\u9700\u8981\u8d70\u7684\u6700\u77ed\u8def\u7ebf\uff08\u9a91\u58eb\uff09\u3002\u8fd9\u4e2a\u771f\u7684\u5f88\u91cd\u8981\uff0c\u4f60\u53ea\u8981\u628a\u8fd9\u4e2a\u56db\u7ef4\u6570\u7ec4\u60f3\u5230\u4e86\uff0c\u90a3\u4e48\u6574\u9053\u9898\u4e5f\u5c31\u5dee\u4e0d\u591a\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5982\u4f55\u6c42\u51faf\u6570\u7ec4\u4e86\uff0c\u8fd9\u91cc\u5c31\u7528\u4e00\u4e2abfs\u5c31\u53ef\u4ee5\u641e\u5b9a\u4e86\u3002\u7136\u540e\u5c31\u662f\u56e0\u4e3a\u56fd\u738b\u6bcf\u6b21\u90fd\u662f\u8d70\u9644\u8fd1\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u6709\u4e00\u4e2a\u516c\u5f0f\uff1a\n```cpp\nmax(abs(stx-edx),abs(sty-edy))\n```\n\u63a5\u7740\u53c8\u662f\u4e00\u4e2a\u516c\u5f0f\uff08\u4e5f\u4e0d\u662f\u516c\u5f0f\u5427\uff09\uff1a\u603b\u8def\u7a0b=\u6bcf\u4e2a\u9a91\u58eb\u5230\u76ee\u6807\u70b9\u7684\u6b65\u6570-\u63a5\u56fd\u738b\u7684\u9a91\u58eb\u5230\u76ee\u6807\u70b9\u7684\u6b65\u6570+\u63a5\u56fd\u738b\u7684\u5730\u70b9\u5230\u76ee\u6807\u70b9\u7684\u6b65\u6570+\u63a5\u56fd\u738b\u7684\u9a91\u58eb\u5230\u63a5\u56fd\u738b\u7684\u5730\u70b9\u7684\u6b65\u6570+\u63a5\u56fd\u738b\u7684\u5730\u70b9\u5230\u56fd\u738b\u7684\u4f4d\u7f6e\n\n\u6700\u540e\u5c31\u662f\u901a\u8fc7\u8bc1\u660e\u53ef\u4ee5\u53d1\u73b0\uff1a\u63a5\u56fd\u738b\u7684\u5730\u70b9\u90fd\u662f\u5728\u56fd\u738b\u7684\u4e0a\u4e0b\u5de6\u53f3\u6216\u8005\u5de6\u4e0a\u5de6\u4e0b\u53f3\u4e0a\u53f3\u4e0b\u3002\u8fd9\u4e2a\u4e5f\u662f\u81f3\u5173\u91cd\u8981\uff0c\u6211\u521a\u5f00\u59cb\u4e0d\u77e5\u9053\u7ed3\u679c\u5c31\u7528dfs\u3002\u3002\u3002\u3002\u3002\n\n\u5c31\u8fd9\u6837\uff0c\u6ce8\u610f\u4e00\u4e0b\u7ec6\u8282\uff0c\u6574\u9053\u9898\u5c31\u505a\u5b8c\u4e86\uff01\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<iostream>\n#define tyy(stx,sty,edx,edy) max(abs((stx)-(edx)),abs((sty)-(edy)))\nusing namespace std;\nint n,m,len=0;\nbool b[50][50];\n//h\u8868\u793ahorseman\uff0ck\u8868\u793aking\nint dhx[8]={2,2,1,1,-1,-1,-2,-2};\nint dhy[8]={-1,1,-2,2,-2,2,-1,1};\nint dkx[9]={0,-1,-1,-1,0,0,1,1,1};\nint dky[9]={0,-1,0,1,-1,1,-1,0,1};\nint f[50][41][30][41];\nstruct node\n{\n    int x,y;\n}list[210000];\nstruct shop\n{\n    int x,y;\n}aa[210000];\ninline int bfs(int stx,int sty)\n{\n    int head,tail;\n    memset(b,true,sizeof(b));b[stx][sty]=false;\n    f[stx][sty][stx][sty]=0;\n    head=1;tail=2;list[1].x=stx;list[1].y=sty;\n    while(head<tail)\n    {\n        int x=list[head].x,y=list[head].y;\n        for(int t=0;t<=7;++t)\n        {\n            int xx=x+dhx[t];\n            int yy=y+dhy[t];\n            if(xx>=1&&xx<=n&&yy>=1&&yy<=m)\n            {\n                if(f[stx][sty][xx][yy]>f[stx][sty][x][y]+1)\n                {\n                    if(b[xx][yy]==true)\n                    {\n\t\t\t\t\t\tf[stx][sty][xx][yy]=f[stx][sty][x][y]+1;\n\t\t\t\t\t\t\n                   \t\tnode tno;\n                    \ttno.x=xx;tno.y=yy;\n                        b[xx][yy]=false;\n                        list[tail]=tno;tail++;\n                    }\n                }\n            }\n        }\n        head++;\n    }\n}\nint main()\n{\n\t//freopen(\"testdata (2).in\",\"r\",stdin);\n    char t;\n    memset(f,127,sizeof(f));\n    int x,pd=0;\n    scanf(\"%d%d\",&m,&n);\n    for(int i=1;i<=n;i++)for(int j=1;j<=m;j++)bfs(i,j);//\u6700\u5f00\u59cb\u5c31\u628af\u6570\u7ec4\u5168\u90e8\u7b97\u51fa\u6765\n    /*for(int i=1;i<=5;i++)\n    {\n        cin>>t>>x;\n        x=m-x+1;\n        len++;aa[len].x=t-64;aa[len].y=x;\n    }*/\n    getchar();//\u8fd9\u5c31\u662f\u4e00\u79cd\u795e\u5947\u7684\u6587\u672c\u8f93\u5165\n    while(cin>>t)\n    {\n    \tcin>>x;\n        len++;aa[len].x=t-64;aa[len].y=x;\n    }\n    int sum=999999999,kx,ky;\n    kx=aa[1].x;ky=aa[1].y;\n    for(register int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            int ans=0,pd=0;\n            for(int k=2;k<=len;k++)\n            {\n                if(f[aa[k].x][aa[k].y][i][j]>=2139062143){pd=1;break;}\n                ans+=f[aa[k].x][aa[k].y][i][j];\n            }\n            if(pd==1){continue;}\n            if(pd==0)\n            {\n                for(int k=2;k<=len;k++)\n                {\n                \tint st=2139062143;\n                    int ax,ay;\n                    for(int tt=0;tt<=8;tt++)\n                    {\n                    \tax=kx+dkx[tt];ay=ky+dky[tt];\n                    \tif(f[aa[k].x][aa[k].y][ax][ay]>=2139062143)continue;//\u5982\u679c\u90fd\u5230\u4e0d\u4e86\u56fd\u738b\u9644\u8fd1\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528\u5f80\u4e0b\u7b97\u4e86\n                    \tif(ax<=n&&ax>=1&&ay<=m&&ay>=1)\n                        {\n                        \tint s=0;\n                        \ts+=f[ax][ay][i][j];\n                        \ts+=f[aa[k].x][aa[k].y][ax][ay];\n\t\t\t\t\t\t\ts+=tyy(ax,ay,kx,ky);\n\t\t\t\t\t\t\tst=min(st,s);\n                        }\n                    }\n                    sum=min(ans-f[aa[k].x][aa[k].y][i][j]+st,sum);\n                }\n            }\n        }\n    }\n    if(sum==999999999)printf(\"0\");\n    else printf(\"%d\",sum);\n    return 0;\n}\n```\n\n\u9ebb\u70e6\u7ba1\u7406\u5458\u901a\u8fc7\uff0c\u6211\u7b2c\u4e00\u6b21\u7684\u9898\u89e3\u554a~~",
        "postTime": 1527141579,
        "uid": 17168,
        "name": "tangyayan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9053\u9898\u5176\u5b9e\u4e0d\u96be\u7684\uff0c\u53ea\u662f\u4ee3\u7801\u6bd4\u8f83\u957f\u800c\u5df2\uff1a\n\n\uff081\uff09\u628a\u68cb\u76d8\u4e0a\u7684\u70b9\u5168\u90e8\u641c\u7d22\u4e00\u6b21\uff0c\u627e\u51fa\u5176\u5b9e\u4ece\u8fd9\u4e00\u4e2a\u70b9\u5230\u5176\u4ed6\u7684\u70b9\u7684\u6700\u5c0f\u6b65\u6570\uff0c\u7528\u601d\u7ef4\u6570\u7ec4\u8bb0\u5f55\uff1b\n\n\uff082\uff09\u679a\u4e3e\u6240\u6709\u7684\u70b9\uff0c\u628a\u8fd9\u4e2a\u5e97\u5f53\u4f5c\u7ec8\u70b9\u9700\u8981\u8d70\u7684\u6700\u5c0f\u6b65\u6570\uff1b\n\n\uff083\uff09\u5728\uff082\uff09\u91cc\u9762\u5148\u6c42\u4e0d\u8ba9\u9a91\u58eb\u63a5\u56fd\u738b\u7684\u503c\uff0c\u7136\u540e\u679a\u4e3e\u6240\u6709\u7684\u9a91\u58eb\uff0c\u5047\u8bbe\u8ba9\u8fd9\u4e00\u4e2a\u9a91\u58eb\u53bb\u63a5\u56fd\u738b\u7684\u6700\u5c0f\u503c\u3002\n\n\u6ce8\uff1a\u56e0\u4e3a\u9a91\u58eb\u4ee5\u4e00\u6b65\u53ef\u4ee5\u8d70\u4ee5\u81ea\u5df1\u4e3a\u4e2d\u5fc35X5\u7684\u8303\u56f4\uff0c\u8ba9\u9a91\u58eb\n\n\u53bb\u63a5\u56fd\u738b\u603b\u662f\u6bd4\u8ba9\u56fd\u738b\u53bb\u627e\u9a91\u58eb\u7528\u6b65\u6570\u66f4\u5c11\uff0c\u6240\u4ee5\u53ea\u7528\u641c\u7d22\u4ee5\n\n\u56fd\u738b\u4e3a\u4e2d\u5fc35X5\u7684\u8303\u56f4\u5c31\u597d\u4e86\uff0c\u8868\u793a\u9a91\u58eb\u8d70\u5230\u8fd9\u4e2a\u70b9\u53bb\u63a5\u56fd\u738b\u7684\u6700\u5c0f\u503c\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h> \nusing namespace std;\nconst int dx[8]={2,2,1,1,-1,-1,-2,-2};//\u9a91\u58eb\u4e00\u6b65\u53ef\u4ee5\u8d70\u7684\u70b9\uff0c\u56fd\u738b\u6ca1\u6709\u5fc5\u8981\u7ba1 \nconst int dy[8]={-1,1,-2,2,-2,2,-1,1};\nint n,m;\nstruct node\n{\n    int x,y;\n};int len;//\u8bb0\u5f55\u9a91\u58eb\u548c\u56fd\u738b\u7684\u5750\u6807 \nnode a[2100];\nnode king;\nint f[51][31][51][31];//\u9a91\u58eb\u4ece\u70b91\u5230\u70b92\u6240\u9700\u7684\u6700\u5c0f\u503c \nint minn=2147483647;\ninline int find(int x1,int y1,int x2,int y2)//\u8fd4\u56de\u56fd\u738b\u4ece\u70b91\u5230\u70b92\u7684\u6700\u77ed\u8ddd\u79bb \n{\n    return max(abs(x1-x2),abs(y1-y2));//\u56fd\u738b\u662f\u53ef\u4ee5\u659c\u7740\u8d70\u7684 \n}\ninline void bfs(int stx,int sty)//\u9a91\u58eb\u4ee5\u8fd9\u4e2a\u5e97\u4e3a\u8d77\u70b9\u8d70\u5230\u6bcf\u4e00\u4e2a\u70b9\u7684\u6700\u5c0f\u503c\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u6211\u5efa\u8bae\u90fd\u7528\u6700\u77ed\u8def\u6765\u505a\uff0c\u6df1\u641c\u4e0d\u597d \n{\n    int i,x,y,xx,yy,head,tail,listx[5100],listy[5100];//\u961f\u5217\u7684x\u5750\u6807\u548cy\u5750\u6807 \n    bool v[51][31];\n    memset(v,true,sizeof(v));v[stx][sty]=false;//\u8bb0\u5f55\u8fd9\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u961f\u5217\u91cc\u9762 \n    head=tail=1;f[stx][sty][stx][sty]=0;//\u521d\u59cb\u5316\u81ea\u5df1\u5230\u81ea\u5df1\u4e0d\u7528\u8d70 \n    listx[1]=stx;listy[1]=sty;//\u961f\u52171 \n    while(head<=tail)\n    {\n        x=listx[head];y=listy[head];//\u8bb0\u5f55\u4e00\u4e0b\uff0c\u9632\u6b62\u540e\u9762\u51fa\u73b0\u9519\u8bef \n        for(i=0;i<=7;i++)\n        {\n            xx=x+dx[i];//\u5f80\u4e0b\u8d70 \n            yy=y+dy[i];\n            if(xx>=1 && xx<=n && yy>=1 && yy<=m)//\u5982\u679c\u6ca1\u6709\u8d85\u51fa\u8fb9\u754c \n            {\n                if(f[stx][sty][xx][yy]>f[stx][sty][x][y]+1)//\u5982\u679c\u8fd9\u662f\u66f4\u4f18\u89e3 \n                {\n                    f[stx][sty][xx][yy]=f[stx][sty][x][y]+1;\n                    if(v[xx][yy]==true)//\u5982\u679c\u8fd8\u6ca1\u6709\u5728\u961f\u5217\u91cc\u9762 \n                    {\n                        v[xx][yy]=false;tail++;//\u5f80\u4e0b\u627e \n                        listx[tail]=xx;listy[tail]=yy;\n                    }\n                }\n            }\n        }\n        v[x][y]=true;//\u53ef\u4ee5\u8bf4\u662f\u56de\u6eaf\u628a \n        head++;//\u8bb0\u5f97\u628a\u5934+1 \n    }\n}\nint main()\n{\n    //freopen(\"1.in\",\"r\",stdin);\n    int i,j,k,t,ans,s,l,r;char st[11];\n    scanf(\"%d%d\",&n,&m);\n    scanf(\"%s%d\",st+1,&t);\n    king.x=t;king.y=st[1]-'A'+1;//\u8bb0\u5f55\u56fd\u738b\u7684\u5750\u6807\n\t//\u8fd9\u91cc\u6709\u4e00\u4e2a\u7ec6\u8282\uff0c\u5c31\u662fx\u548cy\u8981\u53cd\u8fc7\u6765\u8bb0\u5f55\uff0c\u56e0\u4e3ac++\u91cc\u9762\u662f\u5148\u884c\u5728\u5217\u7684\uff0c\u548c\u6570\u5b66\u6709\u4e00\u4e9b\u4e0d\u540c\uff0c\u8fd9\u6837\u662f\u4e3a\u4e86\u4f7ffor\u66f4\u52a0\u65b9\u4fbf \n    while(scanf(\"%s%d\",st+1,&t)!=EOF)//\u8bb0\u5f97\u8981\u8fd9\u6837\u8f93\u5165 \n    {\n        len++;a[len].x=t;a[len].y=st[1]-'A'+1;//\u8bb0\u5f55 \n    }\n    memset(f,127,sizeof(f));//\u628af\u521d\u59cb\u5316\u65e0\u9650\u5927 \n    for(i=1;i<=n;i++) for(j=1;j<=m;j++) bfs(i,j);//\u641c\u7d22\u4e00\u6b21\uff081\uff09 \n    for(i=1;i<=n;i++)\n    {\n        for(j=1;j<=m;j++)\n        {\n        \t//\u5148\u627e\u4e00\u904d\u9a91\u58eb\u4e0d\u63a5\u56fd\u738b\u7684\u65b9\u6848 \n            s=0;bool bk=true;\n            for(k=1;k<=len;k++) \n            {\n                s=s+f[a[k].x][a[k].y][i][j];\n                if(f[a[k].x][a[k].y][i][j]>=f[0][0][0][0]){bk=false;break;}//\u5982\u679c\u6709\u9a91\u58eb\u65e0\u6cd5\u5230\u8fbe\u7ec8\u70b9\uff0c\u8fd9\u79cd\u65b9\u6848\u5c31\u4e0d\u884c \n            }\n            if(bk==false) continue;\n            minn=min(minn,s+find(king.x,king.y,i,j));//\u6c42\u6700\u5c0f\u503c \n            for(k=1;k<=len;k++)//\u8ba9\u8fd9\u4e00\u4e2a\u9a91\u58eb\u53bb\u63a5\u56fd\u738b \n            {\n                ans=2147483647;\n                for(l=king.x-2;l<=king.x+2;l++)//\u4ee5\u56fd\u738b\u4e3a\u4e2d\u5fc35*5\u7684\u683c\u5b50 \n                {\n                    if(l>=1 && l<=n)//\u5224\u65ad\u8fb9\u754c \n                    {\n                        for(r=king.y-2;r<=king.y+2;r++)\n                        {\n                            if(r>=1 && r<=m)\n                            {\n                                if(f[a[k].x][a[k].y][l][r]>=f[0][0][0][0]) continue;//\u5982\u679c\u8d70\u4e0d\u5230\u8fd9\u4e00\u4e2a\u70b9\uff0c\u5c31\u4e0d\u8981\u7ba1\u4e86 \n                                ans=min(ans,f[a[k].x][a[k].y][l][r]+f[l][r][i][j]+find(king.x,king.y,l,r));//\u8868\u793a\u9a91\u58eb\u548c\u56fd\u738b\u8d70\u5230\u8fd9\u4e00\u4e2a\u70b9 \uff0c\u7136\u540e\u9a91\u58eb\u518d\u5e26\u56fd\u738b\u8d70\u5230\u7ec8\u70b9\uff08\u7b97\u4e00\u4e2a\u4eba\u7684\u6b65\u6570\uff09 \n                            }\n                        }\n                    }\n                }\n                minn=min(minn,s-f[a[k].x][a[k].y][i][j]+ans);//\u8bb0\u5f97\u51cf\u53bb\u9a91\u58eb\u76f4\u63a5\u5230\u7ec8\u70b9\u7684\u6b65\u6570 \n            }\n        }\n    }\n    printf(\"%d\\n\",minn);//\u8f93\u51fa \n    return 0;\n}\n```",
        "postTime": 1525669891,
        "uid": 66181,
        "name": "Celebrate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf\u3011"
    },
    {
        "content": "\u6211\u56e0\u4e3a\u770b\u53cd\u4e86\u884c\u548c\u5bbd\u8c03\u4e863\u4e2a\u5c0f\u65f6\u3002\u3002\u3002\n\n\u671f\u95f4\u4e00\u76f4\u548c\u9898\u89e3\u5bf9\u4ee3\u7801\uff1a\u600e\u4e48\u4e0d\u5bf9\u5462\uff1f\u3002\u3002\u3002\n\n\u5e26\u56fd\u738b\u8dd1\u8def\u65f6\u56e0\u4e3a\u9a91\u58eb\u8dd1\u5f97\u5feb\uff0c\u6240\u4ee5\u8ba9\u9a91\u58eb\u591a\u8dd1\uff08\\_**\u4f60\u5750\u51fa\u79df\u8f66\u65f6\u662f\u4f60\u53bb\u8ffd\u51fa\u79df\u8f66\u518d\u5750\u4e0a\u5417**\\_\uff09\n\n\u6240\u4ee5\u9a91\u58eb\u8dd1\u5230\u56fd\u738b\u8eab\u65c1\uff0c\u56fd\u738b\u518d\u5411\u9a91\u58eb\u79fb\u52a8\uff0c\u518d\u4e00\u8d77\u8dd1\u8def\n\n\u7136\u540e\u5c31\u662fbfs\u6700\u77ed\u8def\n\n\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\n\n\u7136\u540e\u679a\u4e3e\u56fd\u738b\u8eab\u8fb9\u7684\u70b9\n\n\u7136\u540e\u679a\u4e3e\u4e00\u4e2a\u9a91\u58eb\u5e26\u56fd\u738b\u8dd1\n\n\u7136\u540e\u3002\u3002\u3002\n\n\u4e0d\u679a\u4e3e\u4e86\uff0c\u6c42\u6700\u77ed\u8ddd\u79bb\n\n\u53cd\u6b63\u5c31\u662f\\_**###\u679a\u679a\u679a\u679a\u679a\u4e3e\u4e3e\u4e3e\u4e3e\u4e3e**\\_\n\n\u770b\u4e0d\u61c2\u7684\u8bdd\u770b\u697c\u4e0b\u5427\n\nc++\n```cpp\n# include<iostream>\n# include<cstdio>\n# include<cstring>\n# include<algorithm>\n# include<cstdlib>\n# define fo(i,a,b) for(int i=a;i<=b;i++)//\u88c5\u903c\u4e13\u7528\u5b8f\u5b9a\u4e49\nusing namespace std;\nstruct p{\n    int x,y;\n    int get[41][31];//\u6bcf\u4e2a\u9a91\u58eb\u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\n}knight[1201];\nstruct q{\n    int x,y;\n}king;//\u56fd\u738b\u4f4d\u7f6e\nint n,m,col,where,num,tot=99999999;\nchar row;\nint mv1[8]={1,-1,-1,1,2,-2,2,-2};\nint mv2[8]={2,2,-2,-2,1,1,-1,-1};\nint f[1000001][2];\nint to[31][31][41][31];\nbool use[41][31];\nint max(int x,int y)\n{\n    return x>y?x:y;\n}\nint min(int x,int y)\n{\n    return x<y?x:y;\n}\nint abs(int x)\n{\n    return x<0?-x:x;\n}\nvoid bfs1(int x,int y)\n{\n    memset(f,0,sizeof(f));\n    memset(use,0,sizeof(use));\n    f[1][0]=x,f[1][1]=y;\n    use[x][y]=1;\n    int head=0,tail=1;\n    while(head<tail)\n    {\n        head++;\n        fo(i,0,7)\n          {\n              int xx=f[head][0]+mv1[i],yy=f[head][1]+mv2[i];\n              if(!use[xx][yy]&&xx>=1&&xx<=n&&yy>=1&&yy<=m)\n              {\n                  use[xx][yy]=1;\n                  f[++tail][0]=xx;\n                  f[tail][1]=yy;\n                  to[x][y][xx][yy]=to[x][y][f[head][0]][f[head][1]]+1;\n            }\n          }\n    }\n}\nvoid find()\n{\n    fo(i,-2,2)\n      fo(j,-2,2)\n        {\n            int u=king.x+i,v=king.y+j;\n            if(u>=1&&u<=n&&v>=1&&v<=m)\n            bfs1(u,v);\n        }\n    fo(i,1,n)\n      fo(j,1,m)\n        {\n            int ride=0;\n            fo(k,1,num)\n              if(knight[k].get[i][j]==0x7f)\n              {\n                  ride=-1;\n                  break;\n              }\n              else ride+=knight[k].get[i][j];\n            if(ride!=-1)\n            {\n                fo(k,-2,2)\n                  fo(l,-2,2)\n                    {\n                        int u=king.x+k,v=king.y+l;\n                        if(u>=1&&u<=n&&v>=1&&v<=m)\n                        {\n                            if(abs(king.x-u)==abs(king.y-v))\n                            where=abs(king.x-u);\n                            else\n                            where=abs(king.x-u)+abs(king.y-v);\n                            fo(g,1,num)\n                              tot=min(tot,ride-knight[g].get[i][j]+knight[g].get[u][v]+to[u][v][i][j]+where);\n                        }\n                    }\n            }\n        }\n    printf(\"%d\",tot);\n}\nvoid bfs(int x)\n{\n    memset(f,0,sizeof(f));\n    memset(use,0,sizeof(use));\n    f[1][0]=knight[x].x,f[1][1]=knight[x].y;\n    knight[x].get[f[1][0]][f[1][1]]=0;\n    use[f[1][0]][f[1][1]]=1;\n    int head=0,tail=1;\n    while(head<tail)\n    {\n        head++;\n        fo(i,0,7)\n          {\n              int xx=f[head][0]+mv1[i],yy=f[head][1]+mv2[i];\n              if(!use[xx][yy]&&xx>=1&&xx<=n&&yy>=1&&yy<=m)\n              {\n                  use[xx][yy]=1;\n                  f[++tail][0]=xx;\n                  f[tail][1]=yy;\n                  knight[x].get[xx][yy]=knight[x].get[f[head][0]][f[head][1]]+1;\n            }\n          }\n    }\n}\nvoid init()\n{\n    scanf(\"%d%d\",&m,&n);//\u522b\u641e\u53cd\u4e86\u3002\u3002\u3002\n    cin>>row>>col;\n    king.x=row-64,king.y=col;\n    memset(knight,0x7f,sizeof(knight));\n    while(cin>>row>>col)\n    {\n        int x=row-64;\n        knight[++num].x=x;\n        knight[num].y=col;\n    }\n    fo(i,1,num)\n      bfs(i);\n    if(!num)\n    {\n        printf(\"0\");//\u7279\u5224\n        exit(0);\n    }\n    find();\n}\nint main()\n{\n    init();\n    return 0;\n}\n```",
        "postTime": 1507449921,
        "uid": 49206,
        "name": "Dispwnl",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf Camelot\u3011"
    },
    {
        "content": "\u9996\u5148\u53ef\u4ee5O(n\\*m)\u6765\u66b4\u529b\u679a\u4e3e\u6bcf\u4e00\u4e2a\u6c47\u5408\u70b9\uff0cbfs\u9884\u5904\u7406\u4e00\u4e0b\u9a91\u58eb\u5230\u8fd9\u4e2a\u6c47\u5408\u70b9\u7684\u8ddd\u79bb\u3002\n\n\u7136\u540e\u5728\u53ef\u4ee5\u7528\u4e2abfs\u628a\u6240\u6709\u9a91\u58eb\u7684\u8def\u5f84\u6807\u8bb0\u4e00\u4e0b\uff0c\u63a5\u7740\u7528\u56fd\u738b\u6765\u8d70bfs\uff0c\u8d70\u5230\u7684\u7b2c\u4e00\u4e2a\u9a91\u58eb\u5230\u8fc7\u7684\u4f4d\u7f6e\u5c31\u662f\u90a3\u4e2a\u9a91\u58eb\u548c\u56fd\u738b\u6c47\u5408\u7684\u70b9\uff0c\u7136\u540e\u4ed6\u4eec\u4e24\u4e2a\u5c31\u53ef\u4ee5\u4e00\u8d77\u8d70\u4e86\u3002\n\n\u4ee3\u7801\u5185\u6709\u8be6\u7ec6\u89e3\u91ca\u3002\n\n\u4ee3\u7801\u5982\u4e0bC++\uff1a\n\n/*************************************************************************\n\n    > Author: wzw-cnyali\n    > Created Time: 2017/4/3 21:07:04\n************************************************************************/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long LL;\n#define REP(i, a, b) for(register int i = (a), i##_end_ = (b); i <= i##_end_; ++ i)\n#define DREP(i, a, b) for(register int i = (a), i##_end_ = (b); i >= i##_end_; -- i)\n#define EREP(i, a) for(register int i = (be[a]); i != -1; i = nxt[i])\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define mem(a, b) memset((a), b, sizeof(a))\ntemplate<typename T> inline bool chkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; }\ntemplate<typename T> inline bool chkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; }\nint read()\n{\n    int sum = 0, fg = 1; char c = getchar();\n    while(c < '0' || c > '9') { if (c == '-') fg = -1; c = getchar(); }\n    while(c >= '0' && c <= '9') { sum = sum * 10 + c - '0'; c = getchar(); }\n    return sum * fg;\n}\nconst int Size = 2000;\nconst int inf = 0x3f3f3f3f;\nconst int d1[8][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};\nconst int d2[8][2] = {{1, 2}, {2, 1}, {-1, 2}, {2, -1}, {1,    -2}, {-2, 1}, {-2, -1}, {-1, -2}};\nstruct node\n{\n    int x, y;\n}king, knight[Size];\nint cnt;\nint n, m;\nbool vis[100][100];\nint dis[100][100];\nbool judge(int x, int y)\n{\n    if(x < 1 || y < 1 || x > n || y > m) return 0;\n    return 1;\n}\nvoid bfs(int x, int y)//\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u9a91\u58eb\u5230\u6c47\u5408\u70b9\uff08x,y\uff09\u7684\u8ddd\u79bb\n{\n    queue <node> Q;\n    Q.push((node){x, y});\n    mem(vis, 0);\n    mem(dis, inf);\n    dis[x][y] = 0;\n    vis[x][y] = 1;\n    while(!Q.empty())\n    {\n        node ls = Q.front();\n        Q.pop();\n        REP(i, 0, 7)\n        {\n            int tx = ls.x + d2[i][0];\n            int ty = ls.y + d2[i][1];\n            if(judge(tx, ty) && !vis[tx][ty])\n            {\n                chkmin(dis[tx][ty], dis[ls.x][ls.y] + 1);\n                Q.push((node){tx, ty});\n                vis[tx][ty] = 1;\n            }\n        }\n    }\n}\nbool road[100][100];//\u9a91\u58eb\u8d70\u7684\u8def\nint work()\n{\n    //\u5c06\u9a91\u58eb\u7684\u8def\u5f84\u6807\u8bb0\u51fa\u6765\n    queue <node> Q;\n    mem(road, 0);\n    REP(k, 1, cnt)\n    {\n        while(!Q.empty()) Q.pop();\n        Q.push((node){knight[k].x, knight[k].y});\n        road[knight[k].x][knight[k].y] = 1;\n        while(!Q.empty())\n        {\n            node ls = Q.front();\n            Q.pop();\n            REP(i, 0, 7)\n            {\n                int tx = ls.x + d2[i][0];\n                int ty = ls.y + d2[i][1];\n                if(judge(tx, ty) && !road[tx][ty] && dis[tx][ty] == dis[ls.x][ls.y] - 1)\n                {\n                    road[tx][ty] = 1;\n                    Q.push((node){tx, ty});\n                    if(road[king.x][king.y]) return 0;\n                }\n            }\n        }\n    }\n    //\u56fd\u738b\u5f00\u59cb\u8d70\n    while(!Q.empty()) Q.pop();\n    Q.push((node){king.x, king.y});\n    mem(vis, 0);\n    mem(dis, inf);\n    vis[king.x][king.y] = 1;\n    dis[king.x][king.y] = 0;\n    while(!Q.empty())\n    {\n        node ls = Q.front();\n        Q.pop();\n        REP(i, 0, 7)\n        {\n            int tx = ls.x + d1[i][0];\n            int ty = ls.y + d1[i][1];\n            if(judge(tx, ty) && !vis[tx][ty])\n            {\n                dis[tx][ty] = dis[ls.x][ls.y] + 1;\n                vis[tx][ty] = 1;\n                if(road[tx][ty]) return dis[tx][ty];//\u8d70\u5230\u9a91\u58eb\u8d70\u7684\u8def\u5c31\u548c\u9a91\u58eb\u4e00\u8d77\u8d70\n                Q.push((node){tx, ty});\n            }\n        }\n    }\n    return 0;\n}\nchar ch[5];\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.in\", \"r\", stdin);\n    freopen(\"output.out\", \"w\", stdout);\n#endif\n    n = read(), m = read();\n    int ls;\n    scanf(\"%s%d\", ch, &ls);\n    king.x = ls;\n    king.y = ch[0] - 'A' + 1;\n    while(scanf(\"%s%d\", ch, &ls) != EOF)\n    {\n        knight[++cnt].x = ls;\n        knight[cnt].y = ch[0] - 'A' + 1;\n    }\n    int ans = inf;\n    REP(i, 1, n)\n    {\n        REP(j, 1, m)\n        {\n            bfs(i, j);\n            int sum = 0;\n            REP(k, 1, cnt) sum += dis[knight[k].x][knight[k].y];\n            sum += work();\n            ans = min(ans, sum);\n            if(ans == 0) { printf(\"0\\n\"); return 0; }\n        }\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n\n```",
        "postTime": 1491483302,
        "uid": 19623,
        "name": "Jason_Yvan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf Camelot\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9898\u6709\u4e00\u70b9\u610f\u601d\n\n\u4e00\u79cd\u53ef\u884c\u7684\u529e\u6cd5\u662f\uff1a\u66b4\u529b\u679a\u4e3e\u6240\u6709\u68cb\u5b50\u6700\u7ec8\u6c47\u5408\u7684\u70b9\uff08O(NM)\uff09\uff0c\u7136\u540e\u518d\u5904\u7406\u51fa\u8fd9\u4e2a\u7ec8\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bbf[x][y]\uff08BFS\uff09\uff0c\u518d\u5bf9\u4e8e\u6bcf\u4e2a\u9a91\u58eb\uff0c\u5c31\u77e5\u9053\u5355\u72ec\u7684\u6b65\u6570\u4e86\u3002\u96be\u70b9\u662f\u56fd\u738b\uff0c\u73b0\u5728\u53ef\u4ee5\u8ba9\u6bcf\u4e2a\u9a91\u58eb\u8df3\u5230\u7ec8\u70b9\u53bb\uff08\u7531\u4e8e\u5df2\u7ecf\u7b97\u51fa\u4f4d\u7f6e\uff0c\u6240\u4ee5\u53ea\u8981\u5f80\u8ddd\u79bb-1\u7684\u70b9\u8df3\u5c31\u884c\uff09\uff0c\u6807\u8bb0\u8def\u4e0a\u7684\u70b9\u3002\u518d\u4ee5\u56fd\u738b\u4e3a\u8d77\u70b9BFS\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u8d70\u5230\u7684\u9a91\u58eb\u8d70\u8fc7\u7684\u70b9\uff0c\u56fd\u738b\u76f4\u63a5\u4e0a\u53bb\u5c31\u662f\u5f53\u524d\u7684\u6700\u4f18\u89e3\u3002\n\n\u5177\u4f53\u6709\u4e00\u4e9b\u7ec6\u8282\uff0c\u8be6\u89c1\u4ee3\u7801\u5427\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <queue>\nusing namespace std ;\n\nconst int maxn = 50 ;\nint n, m, f[maxn][maxn], Kx, Ky, ans = 1<<29, stp[maxn][maxn] ; // f\u662f\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\uff0c(Kx,Ky)\u662f\u56fd\u738b\u5750\u6807, stp(step)\u662f\u4ee5\u56fd\u738b\u4e3a\u8d77\u70b9\u7684\u8ddd\u79bb\nbool p[maxn][maxn] ; // \u9a91\u58eb\u8def\u5f84\u4e0a\u7ecf\u8fc7\u70b9\u7684\u6807\u8bb0\nconst int go[8][2] = { {1,2}, {2,1}, {-1,2}, {2,-1}, {1,-2}, {-2,1}, {-2,-1}, {-1,-2} } ;\nconst bool dir[8][2] = { {1,0}, {0,1}, {-1,0}, {0,-1}, {1,1}, {-1,-1}, {1,-1}, {-1,1} } ;\n\nstruct node {\n    int x, y ;\n} ; //\u7528\u4e8equeue\u4e2d\n\nbool Judge ( int x, int y ) {\n    if ( x < 1 || y < 1 || x > n || y > m ) return false ;\n    if ( f[x][y] != -1 ) return false ; // \u5224\u65ad\u8fd9\u4e2a\u70b9\u662f\u5426\u5df2\u7ecf\u8d70\u8fc7\n    return true ;\n}\nbool judge ( int x, int y ) {\n    if ( x < 1 || y < 1 || x > n || y > m ) return false ;\n    if ( p[x][y] ) return false ; // \u5224\u65ad\u8fd9\u4e2a\u70b9\u9a91\u58eb\u662f\u5426\u5df2\u7ecf\u8df3\u8fc7\n    return true ;\n}\nbool pd ( int x, int y ) {\n    if ( x < 1 || y < 1 || x > n || y > m ) return false ;\n    if ( stp[x][y]!=-1 ) return false ; //\u5224\u65ad\u8fd9\u4e2a\u70b9\u56fd\u738b\u662f\u5426\u5df2\u7ecf\u8d70\u8fc7\n    return true ;\n}\n\nqueue<node> q ; // BFS\u7528\nvector<node> K ; // \u5b58\u50a8\u9a91\u58eb\nint calc_king ( int rec = 1<<29 ) { //\u4e13\u95e8\u8ba1\u7b97\u56fd\u738b\n    int i, j, u, v, x, y ;\n    x = Kx, y = Ky ;\n    memset ( stp, -1, sizeof(stp) ) ; //\u521d\u59cb\u5316\n    while ( !q.empty() ) q.pop() ;\n    q.push( (node){x,y} ) ;\n    stp[x][y] = 0 ;\n    while ( !q.empty() ) {\n        x = q.front().x ; y = q.front().y ;\n        q.pop() ;\n        if ( p[x][y] ) rec = min ( rec, stp[x][y] ) ; //\u5982\u679c\u9047\u5230\u9a91\u58eb\uff0c\u5c31\u5750\u987a\u98ce\u8f66\n        for ( i = 0 ; i < 8 ; i ++ ) {\n            u = x+go[i][0] ;\n            v = y+go[i][1] ;\n            if ( !pd(u,v) ) continue ;\n            stp[u][v] = stp[x][y]+1 ;\n            if ( p[u][v] ) rec = min ( rec, stp[u][v] ) ; // \u540c\n            else q.push( (node){u,v} ) ;\n        }\n    }\n    return rec ;\n}\nvoid Jump ( int x, int y ) { //\u9a91\u58eb\u5f80\u7ec8\u70b9\u8df3\n    p[x][y] = 1 ;\n    int i, j, u, v, xx, yy ;\n    for ( i = 0 ; i < 8 ; i ++ ) {\n        u = x+go[i][0] ;\n        v = y+go[i][1] ;\n        if ( !judge(u,v) ) continue ;\n        if ( f[u][v]+1==f[x][y] ) Jump ( u, v ) ; // \u6ce8\u610f\uff0c\u8fd9\u91cc\u662f\u6bcf\u4e2a\u6ee1\u8db3\u7684\u70b9\u90fd\u8981\u8df3\uff0c\u56e0\u4e3a\u4f60\u4e0d\u786e\u5b9a\u6240\u6709\u53ef\u884c\u8def\u5f84\u4e2d\u90a3\u4e00\u6761\u79bb\u56fd\u738b\u6700\u8fd1\n    } \n}\nint BFS ( int x, int y, int rec = 0 ) { //\u5904\u7406\u51fa\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\n    int i, j, u, v ;\n    while ( !q.empty() ) q.pop() ;\n    q.push ( (node){x,y} ) ;\n    f[x][y] = 0 ;\n    memset ( p, 0, sizeof(p) ) ;\n    p[x][y] = 1 ;\n    //printf ( \"%c %d : \\n\", y+'A'-1, x ) ;\n    while ( !q.empty() ) {\n        x = q.front().x ; y = q.front().y ;\n        q.pop() ;\n        for ( i = 0 ; i < 8 ; i ++ ) {\n            u = x+go[i][0] ;\n            v = y+go[i][1] ;\n            if ( !Judge(u,v) ) continue ;\n            f[u][v] = f[x][y]+1 ;\n            q.push( (node){u,v} ) ;\n        }\n    }\n    for ( i = 0 ; i < K.size() ; i ++ ) {\n        x = K[i].x, y = K[i].y ;\n        if ( f[x][y] < 0 ) return (1<<29) ;\n        rec += f[x][y] ;  // \u5355\u4e2a\u9a91\u58eb\u7684\u6b65\u6570\n        if ( rec >= ans ) return rec ;\n        Jump(x,y) ;\n    }\n    /*for ( i = 1 ; i <= n ; i ++, putchar('\\n') ) \n        for ( j = 1 ; j <= m ; j ++ ) \n            printf ( \"%d \", f[i][j] ) ;\n    printf ( \"all knights : %d\\n\\n\", rec ) ;*/\n    rec += calc_king() ;\n    return rec ;\n}\n\nchar c[5] ;\nint main() {\n    int i, j, k ;\n    scanf ( \"%d%d\", &n, &m ) ;\n    scanf ( \"%s%d\", c, &k ) ;\n    Ky = c[0]-'A'+1 ; Kx = k ;\n    while ( scanf ( \"%s%d\", c, &k ) != EOF )\n        K.push_back( (node){k,c[0]-'A'+1} ) ;\n    for ( i = 1 ; i <= n ; i ++ ) \n        for ( j = 1 ; j <= m ; j ++ ) {\n            memset ( f, -1, sizeof(f) ) ;\n            ans = min ( ans, BFS(i,j) ) ;\n        }\n    printf ( \"%d\\n\", ans ) ;\n    return 0 ;\n}\n```",
        "postTime": 1490967596,
        "uid": 39497,
        "name": "GoAway",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf Camelot\u3011"
    },
    {
        "content": "\u672c\u9898\u5c31\u662f\u4e00\u4e2a\u6c42\u6240\u6709\u70b9\u5bf9\u95f4\u7684\u6700\u77ed\u8def\u7136\u540e\u5904\u7406\u7684\u95ee\u9898\u3002\u6700\u77ed\u8def\u597d\u6c42\uff0c\u96be\u70b9\u5728\u4e8e\u6709\u738b\uff0c\u738b\u53ef\u4ee5\u81ea\u5df1\u4e00\u683c\u4e00\u683c\u5730\u8d70\u5230\u6c47\u96c6\u70b9\uff1b\u4e5f\u53ef\u4ee5\u8ba9\u67d0\u4e2a\u9a91\u58eb\u5148\u8df3\u5230\u4ed6\u6240\u5728\u7684\u683c\u5b50\uff0c\u518d\u4e00\u8d77\u5230\u6c47\u96c6\u70b9\uff1b\u4e5f\u53ef\u4ee5\u5148\u8d70\u51e0\u6b65\uff0c\u518d\u8ba9\u9a91\u58eb\u8df3\u5230\u4ed6\u6240\u5728\u7684\u683c\u5b50\uff0c\u518d\u4e00\u8d77\u5230\u6c47\u96c6\u70b9\u3002\n\nd[i,j,x,y]\u8868\u793a\u70b9(i,j)\u5230(x,y)\u7684\u6700\u77ed\u8def\u957f\uff0c\u53ef\u4ee5\u7528BFS\u6c42\u51fa\u3002\u738b\u7684\u5750\u6807\u4e3a(kx,ky)\uff0c\u6700\u7ec8\u7ed3\u679c\u7528ans\u50a8\u5b58\u3002 \u57fa\u672c\u601d\u8def\u662f\u679a\u4e3e\u4e00\u6bcf\u4e2a\u683c\u5b50\u4f5c\u4e3a\u6240\u6709\u9a91\u58eb\u7684\u6c47\u96c6\u70b9(i,j)\uff0c\u518d\u679a\u4e3e\u6bcf\u4e2a\u683c\u5b50\uff0c\u4ee5\u8fd9\u4e2a\u683c\u5b50\u4e3a\u738b\u548c\u67d0\u4e2a\u9a91\u58eb\u7684\u76f8\u9047\u5904(x,y)\uff0c\u518d\u679a\u4e3e\u6bcf\u4e2a\u9a91\u58eb\u5750\u6807(m,n)\u3002 \u6c42\u51fad[i,j,x,y]+d[x,y,m,n]+max(abs(kx-x),abs(ky-y))-d[i,j,m,n]\u7684\u6700\u5c0f\u503c\uff0c\u5c06\u6c47\u96c6\u70b9\u5230\u6240\u6709\u9a91\u58eb\u7684\u6700\u77ed\u8def\u548cs\u52a0\u4e0a\u8fd9\u4e2a\u503c\uff0c\u4e0eans\u6bd4\u8f83\u53d6\u5c0f\u8005\u3002\n\n\u679a\u4e3e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^3)\uff0c\u8d85\u65f6\u4e0d\u662f\u4e00\u822c\u5730\u4e25\u91cd\u2026\u2026\u4e8e\u662f\u5f00\u59cb\u4f18\u5316\u3002\u6700\u4f18\u5316\u526a\u679d\u662f\u5fc5\u8981\u7684\uff0c\u5f53\u67d0\u4e2a\u6c47\u96c6\u70b9\u5230\u6240\u6709\u9a91\u58eb\u7684\u6700\u77ed\u8defs\u5df2\u7ecf\u5927\u4e0e\u4e86ans\u65f6\u76f4\u63a5\u9000\u51fa\u3002\u5c3d\u7ba1\u6548\u7387\u5927\u5927\u63d0\u9ad8\uff0c\u4f46\u4ecd\u7136\u4e25\u91cd\u8d85\u65f6\u3002\u4e8e\u662f\u60f3\u4e00\u60f3\uff0c\u738b\u548c\u9a91\u58eb\u7684\u76f8\u9047\u70b9\u53ef\u80fd\u51fa\u73b0\u5728\u54ea\u4e9b\u4f4d\u7f6e\u4e0a\uff1f\u663e\u7136\u738b\u8d70\u7684\u6bd4\u9a91\u58eb\u8981\u6162\uff0c\u90a3\u4e48\u5e94\u8be5\u5c3d\u91cf\u8981\u8ba9\u738b\u5c11\u8d70\uff0c\u6240\u4ee5\u738b\u9700\u8981\u5148\u8d70\u7684\u60c5\u51b5\u53ea\u53ef\u80fd\u662f\u9a91\u58eb\u65e0\u6cd5\u5230\u8fbe\u7684\u5730\u65b9\u6216\u8005\u9a91\u58eb\u5230\u8fbe\u9700\u8981\u7ed5\u4e00\u5708\u7684\u60c5\u51b5\u3002\u53ef\u4ee5\u6784\u60f3\u4e00\u4e0b\u9a91\u58eb\u5728\u738b\u9644\u8fd1\u65f6\u8fbe\u5230\u738b\u7684\u8def\u5f84\uff0c\u5c31\u4e0d\u96be\u53d1\u73b0\uff0c\u76f8\u9047\u70b9\u53ea\u5e94\u8be5\u5728\u738b\u7684\u9644\u8fd1\u5f88\u77ed\u7684\u8ddd\u79bb\u4ee5\u5185\u3002\u4f30\u7b97\u4e00\u4e0b\uff0c\u76f8\u9047\u70b9\u5c31\u5728\u738b\u7684\u5750\u6807\u52a0\u51cf1\u7684\u8303\u56f4\u5185\u679a\u4e3e\u5c31\u53ef\u4ee5\u4e86\uff0c\u7ecf\u8fc7\u8bc1\u660e\uff0c\u8fd9\u6837\u505a\u662f\u6b63\u786e\u7684\uff1a\n\n\u8bc1\u660e\n\u6027\u8d281\uff1a\u5047\u8bbe\u56fd\u738b\u548c\u9a91\u58eb\u5728\u8d85\u8fc7\u56fd\u738b\u5ea7\u6807\u70b9\u4e00\u6b65\u8303\u56f4\u5916\u96c6\u5408\uff0c\u96c6\u5408\u70b9\u79f0\u4e3a\u201c\u539f\u6c47\u5408\u70b9\u201d\uff0c\u90a3\u4e48\uff0c\u5f53\u9a91\u58eb\u7531\u539f\u6c47\u5408\u70b9\u5411\u56fd\u738b\u8fc8\u8fdb\u4e00\u6b65\uff0c\u5219\u603b\u6c47\u5408\u6b65\u6570\u51cf\u5c11\u4e00\u6b65\u3002\n\n\u6027\u8d282\uff1a\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u6837\u505a\u5f97\u5230\u7684\u89e3\u4e0d\u5927\u4e8e\u5728\u539f\u6c47\u5408\u70b9\u6c47\u5408\u5f97\u5230\u7684\u89e3\u3002\u56e0\u4e3a\u201c\u5f53\u9a91\u58eb\u7531\u539f\u6c47\u5408\u70b9\u5411\u56fd\u738b\u8fc8\u8fdb\u4e00\u6b65\uff0c\u5219\u603b\u6c47\u5408\u6b65\u6570\u51cf\u5c11\u4e00\u6b65\u3002\u201d\n\n\u610f\u5473\u7740\uff0c\u9a91\u58eb\u539f\u8def\u8fd4\u56de\u201c\u539f\u6c47\u5408\u70b9\u201d\u7684\u8bdd\uff0c\u603b\u6c47\u5408\u6b65\u6570\u548c\u539f\u6765\u76f8\u540c\u3002\n\n\u5177\u4f53\u89c1\u6ce8\u91ca\n\n\n        \n```cpp\n#include <cstdio>\n#include <queue>\n#include <cstring>\n#include <cstdlib>\nusing namespace std;\ntypedef pair<int,int> Pair;\nint dx[]={0,1,1,1,-1,-1,-1,0,0,0},tx[]={0,1,1,-1,-1,2,2,-2,-2};\nint dy[]={0,0,1,-1,0,1,-1,0,1,-1},ty[]={0,2,-2,2,-2,1,-1,1,-1};\nint d[40][40][40][40];\nint dd[1000],vv[1000],dist[1000];\nstruct node\n{\n    int x,y;\n}a[1000],b[10];\nstruct quenode\n{\n    int x,y,v;\n    quenode(int a=0,int b=0,int c=0):\n        x(a),y(b),v(c) {}\n};\nint n,m,tot;\nchar c;\n//\u8bfb\u5165 \u9a91\u58eb\u5750\u6807\u5b58\u5728a\u4e2d\uff0c\u56fd\u738b\u4e0e\u5176\u4e34\u8fd1\u70b9\u5b58\u5728b\u4e2d \nvoid init()\n{\n    scanf(\"%d%d*c\",&n,&m);\n    //scanf(\"%d%d\",&kx,&ky);\n    tot=-1;\n    while(~scanf(\"%c\",&c))\n    {\n        if (c<65||c>90)\n            continue;\n        scanf(\"%d\",&a[++tot].x);\n        a[tot].y=c-'A'+1;\n    }\n    b[0].x=a[0].x,b[0].y=a[0].y;\n    for (int i=1;i<=8;i++)\n        b[i].x=b[0].x+dx[i],b[i].y=b[0].y+dy[i];\n}\nbool check(int x,int y)\n{\n    if (x<1 || y<1 || x>n || y>m)\n        return 0;\n    return 1;\n}\n//\u6c42\u51fax\uff0cy\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def bfs \nvoid sovle(int x,int y)\n{\n    if (!check(x,y)) return;\n    queue<quenode>que;\n    quenode now=quenode(x,y,0);\n    d[x][y][x][y]=0;\n    int xx,yy;\n    bool vis[40][40];\n    memset(vis,0,sizeof vis);\n    vis[x][y]=1;\n    que.push(now);\n    while(!que.empty())\n    {\n        now=que.front();\n        que.pop();\n        for (int i=1;i<=8;i++)\n        {\n            xx=now.x+tx[i];\n            yy=now.y+ty[i];\n            if (check(xx,yy) && !vis[xx][yy])\n            {\n                vis[xx][yy]=1;\n                d[x][y][xx][yy]=now.v+1;\n                que.push(quenode(xx,yy,now.v+1));\n            }\n        }\n    }\n}\nvoid doit()\n{\n    int sum=0,maxcut=0,step,king,ans=0x3f3f3f3f;\n    memset(dd,0x3f,sizeof dd);\n    memset(d,-1,sizeof d);\n    for (int i=1;i<=tot;i++)\n        sovle(a[i].x,a[i].y);\n    for (int i=0;i<=8;i++)\n        sovle(b[i].x,b[i].y);\n    //\u6c42\u6700\u77ed\u8def \n    for (int i=1;i<=tot;i++)\n        for (int j=0;j<=8;j++)\n        {\n            step=d[a[i].x][a[i].y][b[j].x][b[j].y];\n            if (step<0) continue;\n            if (step<dd[i])\n            {\n                dd[i]=step+(j>0);\n                vv[i]=j;\n            }\n        }\n    //\u7b97\u51fa\u4e86\u6240\u6709\u9a91\u58eb\u5230\u56fd\u738b+-1\u7684\u6700\u77ed\u8ddd\u79bb,dd\u662f\u8ddd\u79bb,vv\u662f\u8fd9\u4e2a\u70b9\u7684\u5728b\u4e2d\u7684\u4e0b\u6807 \n    for (int i=1;i<=n;i++)\n        for (int j=1;j<=m;j++)//\u679a\u4e3e\u6240\u6709\u7684\u603b\u805a\u96c6\u70b9\n        {\n            king=abs(i-b[0].x)+abs(j-b[0].y);//king\u5b58\u50a8\u56fd\u738b\u5230\u8fd9\u4e2a\u70b9\u7684\u6b65\u6570\n            int k;\n            for (k=1;k<=tot;k++)\n            {\n                dist[k]=d[a[k].x][a[k].y][i][j];//dist\u5b58\u50a8\u6240\u6709\u9a91\u58eb\u5230\u4e0e\u603b\u4f1a\u805a\u70b9\u7684\u8ddd\u79bb\n                if (dist[k]<0) break;\n            }\n            if (dist[k]<0) continue;//\u8d70\u4e0d\u5230 \n            maxcut=0;//maxcut\u5b58\u50a8\u9a91\u58eb\u63a5\u4e0a\u56fd\u738b\u80fd\u51cf\u5c11\u7684\u6700\u5927\u8ddd\u79bb\n            for (int k=1;k<=tot;k++)\n            {\n                step=d[b[vv[k]].x][b[vv[k]].y][i][j];\n                if(maxcut<dist[k]+king-(step+dd[k])) maxcut=dist[k]+king-(step+dd[k]);\n            }\n            sum=king;\n            for  (k=1;k<=tot;k++)\n                  sum+=dist[k];\n            sum-=maxcut;\n            if (ans>sum) ans=sum;\n        } \n    printf(\"%d\",ans);\n}\nint main()\n{\n    init();\n    doit();\n}\n```",
        "postTime": 1476578850,
        "uid": 17689,
        "name": "\u8fdc\u822a\u4e4b\u66f2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf Camelot\u3011"
    },
    {
        "content": "\u88ab\u8fd9\u9053BFS\u4e0d\u5e26\u6743\u56fe\u7684\u6700\u77ed\u8def\u6c34\u9898\u5361\u4e86\u4e09\u5929\u3002\u3002\u3002\u3002\u3002\u5c31\u8fd9\u6837\u5f31\u6210\u6e23\u4e86\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\n\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5148\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u679a\u4e3e\u96c6\u5408\u70b9\uff0c\u679a\u4e3e\u63a5\u56fd\u738b\u7684\u9a91\u58eb\uff0c\u679a\u4e3e\u63a5\u56fd\u738b\u7684\u70b9\uff0c\u7b97\u51fa\u9700\u8981\u7684\u8ddd\u79bb\u3002\n\n\n\u603b\u8ddd\u79bb=Min\uff5b\u6240\u6709\u9a91\u58eb\u5230\u96c6\u5408\u70b9\u7684\u8ddd\u79bb\u548c-\u63a5\u56fd\u738b\u7684\u9a91\u58eb\u5230\u96c6\u5408\u70b9\u7684\u8ddd\u79bb+\u56fd\u738b\u5230\u9a91\u58eb\u63a5\u4ed6\u7684\u70b9\u7684\u8ddd\u79bb+\u9a91\u58eb\u5230\u63a5\u56fd\u738b\u70b9\u7684\u8ddd\u79bb+\u5176\u5b9e\u4ece\u63a5\u56fd\u738b\u7684\u70b9\u8d70\u5230\u96c6\u5408\u70b9\u7684\u8ddd\u79bb\uff5d\uff08\u5f53\u7136\u592a\u6734\u7d20\u5c31\u94c1\u5b9a\u8d85\u65f6\u4e86\uff09\n\n\n\u7136\u540e\u5f00\u59cb\u5904\u7406\u5404\u4e2a\u7ec6\u8282\u3002\n\n\n\u9996\u5148\u6c42\u6700\u77ed\u8def\uff0c\u4e00\u5f00\u59cb\u8111\u5b50\u6ca1\u52a8\u5f53\u7136\u5c31\u60f3\u5230\u7528Dijkstra\u6c42\uff08\u6211\u6709\u591a\u6c99\u8336\u3002\u3002\u3002\uff09\uff0c\u5f53\u7136O\uff08v\\*v^2\uff09\u94c1\u5b9a\u8981\u8d85\u65f6\u554a\uff0c\u6240\u4ee5\u7528heap+Dijkstra\u505a\u4e86\u4e00\u4e0b\u3002\u3002\u3002\u679c\u7136\u8fd8\u662f\u8d85\u65f6\u3002\u3002\u3002\u8fd9\u65f6\u5019\u6211\u7ec8\u4e8e\u7f13\u8fc7\u795e\u6765\uff0c\u8fd9\u662f\u65e0\u6743\u56fe\u554a\uff01\u6c42\u65e0\u6743\u56fe\u7684\u6700\u77ed\u8def\u5c31\u4ece\u6bcf\u4e00\u4e2a\u70b9\u5f00\u59cb\u8d70\u4e00\u904dBFS\u5c31\u51fa\u6765\u4e86\u554a\uff01\u3002\u3002\u3002\n\n\n\u7136\u540e\u662f\u679a\u4e3e\u7684\u95ee\u9898\uff0c\u6734\u7d20\u679a\u4e3e\u5f53\u7136O\uff08n^3\uff09\u8d85\u65f6\uff0c\u7136\u540e\u89c2\u5bdf\u5230\u8fd9\u4e2a\u56fe\u6700\u5927\u662f30\\*26\uff0c\u7136\u540e\u4f30\u8ba1\u4e00\u4e0b\u6700\u8fdc\u7684\u9a91\u58eb\u548c\u56fd\u738b\uff0c\u4f30\u7b97\u540e\u53d1\u73b0\u63a5\u56fd\u738b\u7684\u70b9\u5e94\u8be5\u5728\u56fd\u738b\u5468\u56f45\u683c\u5185\uff0c\uff08\u8fd9\u9898\u6570\u636e\u5f31\uff0c2\u683c\u5185\u5c31\u53ef\u4ee5AC\u4e86\uff0c\u6216\u80052\u683c\u662f\u5bf9\u7684\uff1f\uff09\u3002\u7136\u540e\u5c31\u80e1\u4e71AC\u4e86\u3002\u3002\u3002\n\n\n\n\n```cpp\ntype\n        re=record\n                tot,x,y:longint;\n        end;\nconst\n        dx:array[1..8] of longint=(2,1,-1,-2,-2,-1,1,2);\n        dy:array[1..8] of longint=(1,2,2,1,-1,-2,-2,-1);\nvar\n        d:array[1..780] of re;\n        f:array[1..40,1..26,1..40,1..26] of longint;\n        a,mm:array[1..40,1..26] of longint;\n        b:array[0..780,1..2] of longint;\n        bz:array[1..40,1..26] of boolean;\n        R,C,i,j,k,p,q,len,head,tail,sum,min,w1,w2,x,y,tot:longint;\n        ch:char;\n        s:string;\nfunction doit1:Longint;\nbegin\n        doit1:=maxlongint;\n        for i:=1 to R do\n            for j:=1 to C do\n                if a[i,j]=1 then\n                begin\n                    for k:=1 to R do\n                        for p:=1 to C do\n                                inc(mm[k,p],f[i,j,k,p]);\n                end;\n        for i:=1 to R do\n                for j:=1 to C do\n                        if mm[i,j]+abs(i-w1)+abs(j-w2)<doit1 then doit1:=mm[i,j]+abs(i-w1)+abs(j-w2);\nend;\nfunction doit2:Longint;\nbegin\n        doit2:=maxlongint;\n        for p:=1 to R do\n            for q:=1 to C do\n              if mm[p,q]<=doit2 then\n                for i:=1 to R do\n                    for j:=1 to C do\n                        for k:=1 to len do\n                        begin\n                                sum:=f[b[k,1],b[k,2],i,j]+mm[p,q]-f[b[k,1],b[k,2],p,q]+f[i,j,p,q]+abs(b[0,1]-i)+abs(b[0,2]-j);\n                                if sum<doit2 then doit2:=sum;\n                        end;\nend;\nbegin\n        readln(R,C);\n        readln(ch,k);\n        a[ord(ch)-64,k]:=2;\n        w1:=k; w2:=ord(ch)-64;\n        b[0,1]:=w1; b[0,2]:=w2;\n        while not eof do\n        begin\n                readln(s);\n                for i:=1 to length(s) do\n                        if s[i] in ['A'..'Z'] then\n                        begin\n                                k:=i+2;\n                                j:=0;\n                                while (s[k] in ['0'..'9']) and (k<=length(s)) do\n                                begin\n                                        j:=j*10+ord(s[k])-48;\n                                        inc(k);\n                                end;\n                                a[j,ord(s[i])-64]:=1;\n                                inc(len);\n                                b[len,1]:=j;\n                                b[len,2]:=ord(s[i])-64;\n                        end;\n        end;                                                             //read data;\n        fillchar(f,sizeof(f),5);\n        for i:=1 to R do\n                for j:=1 to C do\n                begin\n                        fillchar(bz,sizeof(bz),true);\n                        head:=0;\n                        tail:=1;\n                        d[1].tot:=0;\n                        d[1].x:=i;\n                        d[1].y:=j;\n                        f[i,j,i,j]:=0;\n                        bz[i,j]:=false;\n                        while head<tail do\n                        begin\n                                inc(head);\n                                for k:=1 to 8 do\n                                begin\n                                        x:=d[head].x+dx[k]; y:=d[head].y+dy[k];\n                                        if (x>0) and (x<=R) and (y>0) and (y<=C) and bz[x,y] then\n                                        begin\n                                                inc(tail);\n                                                d[tail].tot:=d[head].tot+1;\n                                                d[tail].x:=x;\n                                                d[tail].y:=y;\n                                                bz[x,y]:=false;\n                                                f[i,j,x,y]:=d[tail].tot;\n                                                inc(tot);\n                                        end;\n                                end;\n                                if tot=r*c then break;\n                        end;\n                end;                                                    //bfs;\n        min:=maxlongint;\n        x:=doit1;\n        y:=doit2;\n        if x<min then min:=x;\n        if y<min then min:=y;\n        if (len=1) and (x<=2) and (y<=2) then writeln(1) else writeln(min);      //work;\nend.\n```",
        "postTime": 1498807673,
        "uid": 15374,
        "name": "\u59da\u6587\u6d9b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1930 \u3010\u4e9a\u745f\u738b\u7684\u5bab\u6bbf Camelot\u3011"
    }
]