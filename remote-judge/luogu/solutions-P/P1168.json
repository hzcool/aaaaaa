[
    {
        "content": "$vector$\u8f7b\u677e\u6c34\u8fc7\r\n\r\n\u6216\u6210\u6b64\u9898\u6700\u77ed\u4ee3\u7801\uff1f\r\n\r\n\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b$STL$\u5bb9\u5668$vector$\r\n\r\n$vector$\u57fa\u672c\u64cd\u4f5c\uff1a\r\n\r\n$vc.push\\_back()$\u5728$vector$\u672b\u5c3e\u63d2\u5165\u4e00\u4e2a\u6570\u636e\r\n\r\n$vc.insert()$\u5728$vecter$\u4e2d\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\r\n\r\n$vc.erase()$\u5728$vector$\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\r\n\r\n$vc.at()$\u5728$vector$\u4e2d\u83b7\u53d6\u67d0\u4e2a\u5143\u7d20($vc[a]$\u7b49\u4ef7\u4e8e$vc.at(i)$)\r\n\r\n\u56e0\u4e3a\u6bcf\u6b21\u63d2\u5165\u540e\u6392\u5e8f\u65f6\u95f4\u4ee3\u4ef7\u592a\u5927\uff0c\u5219\u63d2\u5165\u91c7\u7528$lower\\_bound$\u6765\u4e8c\u5206\u5927\u4e8e\u7b49\u4e8e\u8be5\u6570\u7684\u6570\u7684\u6307\u9488\uff0c\u4f7f\u5f97\u6bcf\u6b21\u63d2\u5165\u5b8c\u90fd\u662f\u5df2\u7ecf\u6392\u597d\u5e8f\r\n\r\n\u7136\u540e\u6bcf\u6b21\u63d2\u5165\u540e\uff0c\u76f4\u63a5\u8f93\u51fa\u5f53\u524d\u5bb9\u5668\u5185\u7b2c$\\frac{size()-1}{2}$\u9879\u5373\u53ef($vector$\u662f\u4ece\u7b2c$0$\u9879\u5f00\u59cb\u5b58\u50a8\u7684)\r\n\r\n\u597d\u4e86\uff0c\u4e0a\u4ee3\u7801\r\n```\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nint n;\r\nvector<int>a;\r\nint main()\r\n{\r\n    cin>>n;\r\n    for(int i=1,x;i<=n;i++)\r\n    {\r\n        scanf(\"%d\",&x);\r\n        a.insert(upper_bound(a.begin(),a.end(),x),x);//\u4e8c\u5206\u63d2\u5165\u4fdd\u8bc1\u5355\u8c03\u6027\r\n        if(i%2==1)\r\n        {\r\n        \tprintf(\"%d\\n\",a[(i-1)/2]);//\u662f\u5947\u6570\u4e2a\u5c31\u8f93\u51fa\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n```",
        "postTime": 1534169535,
        "uid": 48265,
        "name": "decoqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u4f7f\u7528\u4e24\u4e2a\u5806\uff0c\u5927\u6839\u5806\u7ef4\u62a4\u8f83\u5c0f\u7684\u503c\uff0c\u5c0f\u6839\u5806\u7ef4\u62a4\u8f83\u5927\u7684\u503c\n\n\u5373\u5c0f\u6839\u5806\u7684\u5806\u9876\u662f\u8f83\u5927\u7684\u6570\u4e2d\u6700\u5c0f\u7684\uff0c\u5927\u6839\u5806\u7684\u5806\u9876\u662f\u8f83\u5c0f\u7684\u6570\u4e2d\u6700\u5927\u7684\n\n\u5c06\u5927\u4e8e\u5927\u6839\u5806\u5806\u9876\u7684\u6570\uff08\u6bd4\u6240\u6709\u5927\u6839\u5806\u4e2d\u7684\u5143\u7d20\u90fd\u5927\uff09\u7684\u6570\u653e\u5165\u5c0f\u6839\u5806\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u5927\u6839\u5806\u5806\u9876\u7684\u6570\uff08\u6bd4\u6240\u6709\u5c0f\u6839\u5806\u4e2d\u7684\u5143\u7d20\u90fd\u5c0f\uff09\u7684\u6570\u653e\u5165\u5927\u6839\u5806\n\n\u90a3\u4e48\u5c31\u4fdd\u8bc1\u4e86\u6240\u6709\u5927\u6839\u5806\u4e2d\u7684\u5143\u7d20\u90fd\u5c0f\u4e8e\u5c0f\u6839\u5806\u4e2d\u7684\u5143\u7d20\n\n\u4e8e\u662f\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u5927\u6839\u5806\u7684\u5806\u9876\u5143\u7d20\uff0c\u6709\u3010\u5c0f\u6839\u5806\u7684\u5143\u7d20\u4e2a\u6570\u3011\u4e2a\u5143\u7d20\u6bd4\u8be5\u5143\u7d20\u5927\uff0c\u3010\u5927\u6839\u5806\u7684\u5143\u7d20\u4e2a\u6570-1\u3011\u4e2a\u5143\u7d20\u6bd4\u8be5\u5143\u7d20\u5c0f\uff1b\n\n\u540c\u7406\uff0c\u5bf9\u4e8e\u5c0f\u8ddf\u5806\u7684\u5806\u9876\u5143\u7d20\uff0c\u6709\u3010\u5927\u6839\u5806\u7684\u5143\u7d20\u4e2a\u6570\u3011\u4e2a\u5143\u7d20\u6bd4\u8be5\u5143\u7d20\u5c0f\uff0c\u3010\u5c0f\u6839\u5806\u7684\u5143\u7d20\u4e2a\u6570-1\u3011\u4e2a\u5143\u7d20\u6bd4\u8be5\u5143\u7d20\u5927\uff1b\n\n\u90a3\u4e48\u7ef4\u62a4\u3010\u5927\u6839\u5806\u7684\u5143\u7d20\u4e2a\u6570\u3011\u548c\u3010\u5c0f\u6839\u5806\u7684\u5143\u7d20\u4e2a\u6570\u3011\u5dee\u503c\u4e0d\u5927\u4e8e1\u4e4b\u540e\uff0c\u5143\u7d20\u4e2a\u6570\u8f83\u591a\u7684\u5806\u7684\u5806\u9876\u5143\u7d20\u5373\u4e3a\u5f53\u524d\u4e2d\u4f4d\u6570\uff1b\uff08\u5982\u679c\u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u5c31\u662f\u4e24\u4e2a\u5806\u5806\u9876\u5143\u7d20\u7684\u5e73\u5747\u6570\uff0c\u672c\u9898\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff09\n\n\u6839\u636e\u8fd9\u4e24\u4e2a\u5806\u7684\u5b9a\u4e49\uff0c\u7ef4\u62a4\u65b9\u5f0f\u4e5f\u5f88\u7b80\u5355\uff0c\u628a\u5143\u7d20\u4e2a\u6570\u591a\u7684\u5806\u7684\u5806\u9876\u5143\u7d20\u53d6\u51fa\uff0c\u653e\u5165\u5143\u7d20\u4e2a\u6570\u5c11\u7684\u5806\u5373\u53ef\n\n\u5bf9\u4e8e\u90e8\u5206\u4e0d\u4f1a\u5806\u7684\u540c\u5b66\uff0c\u8bf7\u53c2\u7167\u4e0b\u9762\u5404\u4f4d\u795e\u7287\u7684\u7b97\u6cd5\uff0c\u6216\u8005\u81ea\u884c\u5b66\u4e60\u5806\n\n\u4e0b\u9762\u662f\u4ee3\u7801\u5b9e\u73b0\uff0c\u4f7f\u7528\u4e86STL\u7684\u4f18\u5148\u961f\u5217\u4f5c\u4e3a\u5806\uff0c\u7ecf\u8fc7\u538b\u884c\u4ec5\u670924\u884c\u4ee3\u7801\uff0c\u53ef\u8bfb\u6027\u53ef\u80fd\u6bd4\u8f83\u4f4e\uff0c\u5982\u679c\u89c9\u5f97\u9605\u8bfb\u56f0\u96be\u53ef\u4ee5\u53c2\u7167\u4e0b\u9762\u5404\u4f4d\u795e\u7287\u7684\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read(){//\u8bfb\u5165\u4f18\u5316\n\tint x=0;bool f=0;char c=getchar();\n\twhile (c<'0'||c>'9'){if (c=='-')f=1;c=getchar();}\n\twhile (c>='0'&&c<='9'){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n\treturn f?-x:x;\n}\npriority_queue<int,vector<int> > q1;//\u5927\u6839\u5806\npriority_queue<int,vector<int>,greater<int> > q2;//\u5c0f\u6839\u5806\nint main(){\n\tint n=read();q1.push(read());\n\tcout<<q1.top()<<endl; \n\tfor (int i=2;i<=n;i++){\n\t\tint input=read();//\u7b49\u540c\u4e8ecin>>input\n\t\tif (input>q1.top()) q2.push(input);\n\t\t\telse q1.push(input);\n\t\twhile (abs(q1.size()-q2.size())>1)\n\t\t\tif (q1.size()>q2.size()){q2.push(q1.top());q1.pop();}\n\t\t\t\telse{q1.push(q2.top());q2.pop();}\n\t\tif (i%2) cout<<(q1.size()>q2.size()?q1.top():q2.top())<<endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1525353905,
        "uid": 24835,
        "name": "\u8096\u6069Sean",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u56e0\u4e3a~~\u81ea\u8ba4\u4e3a~~\u6bd4\u9898\u89e3\u7b2c\u4e00\u7bc7\u597d\u7406\u89e3\u4e00\u70b9~~\uff08\u53ef\u80fd\u6ca1\u6709\uff09~~ \u6240\u4ee5\u5c31\u6572\u4e86\u4e00\u7bc7\u7b80\u5355\u7684\u9898\u89e3w\n\n\u9996\u5148\u8bb0\u5f55\u4e00\u4e2a\u53d8\u91cf$mid$\uff0c\u8bb0\u5f55\u7b54\u6848\uff08\u4e2d\u4f4d\u6570\uff09\u3002\u5efa\u7acb\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5927\u6839\u5806\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u5927\u6839\u5806\u5b58$\u2264mid$\u7684\u6570\uff0c\u5c0f\u6839\u5806\u5b58 $>mid$\u7684\u7684\u6570\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5411\u5806\u4e2d\u52a0\u5165\u5143\u7d20\u65f6\uff0c\u5c31\u901a\u8fc7\u4e0e$mid$\u7684\u6bd4\u8f83\uff0c\u9009\u62e9\u52a0\u5165\u54ea\u4e00\u4e2a\u5806\n```\nscanf(\"%d\",&a[i]);\nif(a[i]>mid) q2.push(a[i]);\nelse q1.push(a[i]);\n```\n\u663e\u7136\uff0c\u5c0f\u6839\u5806\u7684\u5806\u9876\u662f\u7b2c\u4e00\u4e2a\u5927\u4e8e$mid$\u7684\u6570\uff0c\u5927\u6839\u5806\u5806\u9876\u662f\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e$mid$\u7684\u6570\u5b57\u3002\n![](https://i.loli.net/2019/02/13/5c63c5bf7fe93.png)\n\n\u4f46\u6211\u4eec\u5728\u8f93\u51fa\u7b54\u6848\u524d\u9700\u8981\u5bf9$mid$\u8fdb\u884c\u8c03\u6574\uff0c\u5982\u679c**\u5c0f\u6839\u5806\u548c\u5927\u6839\u5806\u5185\u5143\u7d20\u76f8\u540c**\uff0c\u5c31\u65e0\u9700\u5904\u7406\uff0c\u6b64\u65f6$mid$\u4ecd\u7136\u662f\u5f53\u524d\u7684\u4e2d\u4f4d\u6570\u3002\n\n\u5982\u679c\u4e24\u4e2a\u5806\u4e2d\u5143\u7d20\u4e2a\u6570\u4e0d\u540c\uff0c\u90a3\u6211\u4eec\u5c31\u9700\u8981\u8fdb\u884c\u8c03\u6574\u3002\n![\u65e0\u6807\u9898.png](https://i.loli.net/2019/02/13/5c63c6b654bbe.png)\n\n**\u5177\u4f53\u662f\u628a\u5143\u7d20\u4e2a\u6570\u8f83\u591a\u7684\u5806\u7684\u5806\u9876\u4f5c\u4e3a$mid$\uff0c$mid$\u52a0\u5165\u5143\u7d20\u8f83\u5c11\u7684\u5806\u3002**\n\n![\u65e0\u6807\u9898.png](https://i.loli.net/2019/02/13/5c63c8350d450.png)\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```\nif(q1.size()>q2.size()){\n\tq2.push(mid);\n\tmid=q1.top();\n\tq1.pop();\n}\n```\n\u540c\u7406\uff0c\u5982\u679cq2\u4e2d\u5143\u7d20\u6bd4q1\u591a\uff0c\u540c\u7406\u8f6c\u79fb\u3002\n\n\u6700\u540e\uff0c\u5728\u5947\u6570\u4e2a\u5143\u7d20\u52a0\u5165\u65f6\u8f93\u51fa\u6b64\u65f6\u7684\u4e2d\u4f4d\u6570$mid$\u5373\u53ef\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\n```\n#include<bits/stdc++.h>\n#include<queue>\nusing namespace std;\nint n;\nint a[100100];\nint mid;\npriority_queue<int,vector<int>,less<int> >q1;//\u5927\u6839\u5806\npriority_queue<int,vector<int>,greater<int> >q2;//\u5c0f\u6839\u5806\nint main(){\n    cin>>n;\n    scanf(\"%d\",&a[1]);\n    mid=a[1];\n    cout<<mid<<endl;//mid\u521d\u503c\u662fa[1]\n    for(int i=2;i<=n;i++){\n        scanf(\"%d\",&a[i]);\n        if(a[i]>mid) q2.push(a[i]);\n        else q1.push(a[i]);\n        if(i%2==1){//\u7b2c\u5947\u6570\u6b21\u52a0\u5165\n            while(q1.size()!=q2.size()){\n                if(q1.size()>q2.size()){\n                    q2.push(mid);\n                    mid=q1.top();\n                    q1.pop();\n                }\n                else{\n                    q1.push(mid);\n                    mid=q2.top();\n                    q2.pop();\n                }\n            }\n            cout<<mid<<endl;\n        }\n    }\n    return 0;\n}\n```\n\n\n\n",
        "postTime": 1550041635,
        "uid": 83903,
        "name": "\u975b\u6d9f",
        "ccfLevel": 0,
        "title": "P1168 \u4e2d\u4f4d\u6570"
    },
    {
        "content": "\u8fd9\u9053\u9898\u770b\u5404\u8defdalao\u5404\u663e\u795e\u901a\uff0c\u5bf9\u9876\u5806\u7684\u601d\u8def\u5341\u5206\u4e0d\u9519\uff0c\u7c7b\u4f3c\u7684\u4e00\u9053\u9898\u662fP1801\u9ed1\u5323\u5b50\u3002\n\n\u4f46\u662f\u6211\u662f\u6309\u7167\u6811\u72b6\u6570\u7ec4\u7684\u6807\u7b7e\u627e\u8fc7\u6765\u4e86\u7684...\u6240\u4ee5\u8bf4\u6807\u7b7e\u5bb3\u6b7b\u4eba\u3002\n\n\u4e8e\u662f\u6211\u5c31\u7528\u6811\u72b6\u6570\u7ec4\u505a\u4e86\u3002\n\n\u8fd9\u91cc\u7ed9\u51fa\u6811\u72b6\u6570\u7ec4\u7684\u601d\u8def\uff0c\u5176\u5b9e\u5b8c\u5168\u7c7b\u6bd4\u6743\u503c\u7ebf\u6bb5\u6811\n\n\u90a3\u4e48\u597d\u5904\u5c31\u662f\u5e38\u6570\u5c0f\uff0c\u597d\u8c03\u8bd5\uff0c\u800c\u4e14\u5199\u8d77\u6765\u5341\u5206\u65b9\u4fbf\u3002\u3002\u3002\u52a3\u52bf\u7684\u8bdd\u5c31\u662f\u4e0d\u80fd\u5f88\u6709\u6548\u7684\u7ef4\u62a4\u4e0d\u6ee1\u8db3\u533a\u95f4\u51cf\u6cd5\u7684\u4fe1\u606f\uff1f\n\n\u627e\u524d2k-1\u4e2a\u6570\u7684\u4e2d\u4f4d\u6570\u5c31\u662f\u627e\u7b2ck\u5c0f\u3002\u540c\u65f6\u6211\u4eec\u8fd8\u770b\u5230\u6743\u503c\u8f83\u5927\n\n\n\u4e8e\u662f\u6211\u4eec\u7684\u601d\u8def\u5c31\u5f88\u660e\u786e\u4e86\uff0c\u5148\u79bb\u6563\u5316\uff0c\u7136\u540e\u6743\u503cbit\u627ekth\u5c31\u884c\u4e86\n\n\u7531\u4e8e\u6811\u72b6\u6570\u7ec4\u672c\u8eab\u7684\u7ed3\u6784\u5c31\u53ef\u4ee5\u770b\u6210\u4e8c\u7ea7\u5236\u62c6\u5206\uff0c\uff08\u5929\u7136\u7684\u500d\u589e\u7ed3\u6784\uff09\uff0c\u6211\u4eec\u500d\u589e\u67e5\u8be2\u7b2ck\u5c0f\u5c31\u53ef\u4ee5\u4e86\u3002\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nint n,tot;\nconst int maxn=1e5+10;\nint bit[maxn];\nint a[maxn],b[maxn];\n\ninline int lowbit(int x)\n{\n\treturn x&-x;\n}\ninline void add(int pos,int x)\n{\n\tfor(int i=pos;i<=tot;i+=lowbit(i))bit[i]+=x;\n}\ninline int find_kth(int k)\n{\n\tint ans=0,now=0;\t\t\t\t//\u8fd9\u91cc\u4e3b\u8981\u89e3\u91ca\u4e00\u4e0b\u8fd9\u4e2a\u7684\u539f\u7406 ans\u5c31\u662f\u7b54\u6848\uff0cnow\u662f\u6bd4\u5f53\u524d\u627e\u5230\u7684\u6570\u7684\u5c0f\u7684\u6570\u5b57\u7684\u4e2a\u6570\u3002 \n\tfor(int i=20;i>=0;i--)\t\t\t//2^20\u53ef\u4ee5\u8bf4\u5f88\u5927\u4e86\uff0c\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\u4e86\uff0c\u6211\u4eec\u6309\u716720\u500d\u589e\u5c31\u53ef\u4ee5 \n\t{\n\t\tans+=(1<<i);\t\t\t//\u5148\u8ba9\u7b54\u6848\u52a0\u4e0a\u53bb\uff0c\u8bd5\u8bd5 \n\t\tif(ans>tot||now+bit[ans]>=k)ans-=(1<<i);//\u5982\u679c\u8d85\u4e86\u603b\u4f53\u7684\u6700\u5927\u503c\uff08\u9632\u6b62\u6570\u7ec4\u8d8a\u754c\uff09\uff0c\u6216\u8005\u662f \u8d85\u8fc7\u4e86k\u4e2a\uff0c\u5c31\u9000\u56de\u53bb\uff0c\u8fd9\u91cc\u6ce8\u610f\u662f\u5927\u4e8e\u7b49\u4e8e\uff0c\u56e0\u4e3a\u8981\u8003\u8651\u6709\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u6211\u4eec\u627e\u7684\u5176\u5b9e\u662f\u4e00\u4e2a\u6ee1\u8db3\u5c0f\u4e8e\u4ed6\u7684\u4e2a\u6570\u5c0f\u4e8ek\u7684\u6700\u5927\u6570\u3002\u3002\uff08\u53ef\u80fd\u4e0d\u597d\u7406\u89e3\uff0c\u8dd1\u4e24\u904d\u6837\u4f8b\u5c31\u884c\u4e86\uff09 \n\t\telse now+=bit[ans];//\u80fd\u52a0\u5c31\u52a0\u4e0a\uff0c\u8fd9\u91cc\u4e0d\u7528\u6015\u52a0\u5230\u4e86\u539f\u6765\u7684\u6570\uff0c\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u7684\u7ed3\u6784\u4f7f\u8fd9\u4e2a\u65b0\u500d\u589e\u51fa\u6765\u7684\u6570\u5c31\u662f\u591a\u51fa\u6765\u7684\u90a3\u4e00\u6761\u679d \n\t}\n\treturn ans+1;//\u7136\u540e\u52a0\u4e0a1\u5c31\u662f\u7b54\u6848\u5566 \n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&a[++tot]);\t\t//\u8bfb\u4e2a\u5165 \n\t\tb[tot]=a[tot];\n\t}\n\tsort(a+1,a+1+n);\t\t\t\t//\u6392\u4e2a\u5e8f \n\ttot=unique(a+1,a+1+tot)-a-1;\t//\u53bb\u4e2a\u91cd \n\tfor(int i=1;i<=n;i++)b[i]=lower_bound(a+1,a+1+tot,b[i])-a;//\u79bb\u6563\u5316\u4e00\u4e0b \n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tadd(b[i],1);\t\t\t//\u52a8\u6001\u52a0\u70b9 \n\t\tif(i&1)printf(\"%d\\n\",a[find_kth((i+1)>>1)]);//\u67e5kth \n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1535885683,
        "uid": 54825,
        "name": "ysj1173886760",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "/\\*\n\u5c06a\u6570\u7ec4\u53bb\u91cd\u540e\u5b58\u5728b\u6570\u7ec4\u91cc\uff0c\u7528b\u6570\u7ec4\u7684\u5927\u5c0f\u5efa\u6811\u3002\n\n\u7528\u6811\u7684l\u4f5c\u4e3a\u6570\u5b57\uff0cnum\u8bb0\u5f55\u8fd9\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\n\n\u5219 \u66f4\u65b0\u65f6\uff0c\u627e\u5230a\u5728b\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u8ba9\u6b64\u4f4d\u7f6e\u7684\u6570++\uff0c\u8868\u793a\u8fd9\u4e2a\u6570\u51fa\u73b0\u4e86\u4e00\u6b21\n\n\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u8f93\u51fa\u7b2ci/2+1\u4e2a\u6570\uff0c\u5219\u8ba9x=i/2+1\uff0c\n\n\u5982\u679croot\u7684\u5de6\u513f\u5b50\u7684num>=x\uff0c\u5219\u8bf4\u660e\u8981\u627e\u7684\u6570\u5728\u5de6\u5b50\u6811\u91cc\uff0c\u5426\u5219\u5728\u53f3\u5b50\u6811\u91cc\uff0c\n\n\u5982\u679c\u662f\u53bb\u53f3\u5b50\u6811\u91cc\u627e\uff0c\u5219\u8ba9x-=tree[root<<1].num\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u53f3\u5b50\u6811\u91cc\u8981\u627e\u7684\u662f\u7b2cx-=tree[root<<1].num\u4e2a\u3002\n\n\\*/\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=1e5+5;\nint n;\nint a[N],b[N];\nstruct Tree\n{\n    int l,r,mid;\n    int num;\n}tree[N<<2];\nint read()\n{\n    char c=getchar();int num=0;\n    for(;!isdigit(c);c=getchar());\n    for(;isdigit(c);c=getchar())\n        num=num*10+c-'0';\n    return num;\n}\nvoid build(int root,int l,int r)\n{\n    tree[root].l=l,tree[root].r=r,tree[root].mid=l+r>>1;\n    if(l==r)\n        return;\n    build(root<<1,l,tree[root].mid);\n    build(root<<1|1,tree[root].mid+1,r);\n}\nvoid update(int root,int x)\n{\n    ++tree[root].num;\n    if(tree[root].l==tree[root].r)\n        return;\n    if(x<=tree[root].mid)\n        update(root<<1,x);\n    else\n        update(root<<1|1,x);\n}\nint query(int root,int num)\n{\n    if(tree[root].l==tree[root].r)\n        return tree[root].l;\n    if(num<=tree[root<<1].num)\n        return(query(root<<1,num));\n    else\n        return(query(root<<1|1,num-tree[root<<1].num));\n}\nint main()\n{\n    n=read();\n    for(int i=1;i<=n;++i)\n        a[i]=read(),b[i]=a[i];\n    sort(b+1,b+n+1);\n    int bound=unique(b+1,b+n+1)-b;\n    build(1,1,n);\n    for(int i=1;i<=n;++i)\n    {\n        int pos=lower_bound(b+1,b+bound+1,a[i])-b;\n        update(1,pos);\n        if(i%2)\n            printf(\"%d\\n\",b[query(1,i/2+1)]);\n    }\n    return 0;\n}\n```",
        "postTime": 1515998763,
        "uid": 39886,
        "name": "Drifterming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "#### \u9898\u76ee\u94fe\u63a5\u2014\u2014[\u4e2d\u4f4d\u6570](https://www.luogu.org/problemnew/show/P1168)\n\u2014\u2014\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u6b21\u8f93\u5165\u5947\u6570\u4e2a\u6574\u6570\u65f6\u7528sort\u51fd\u6570\u8fdb\u884c\u4e00\u6b21\u5feb\u6392\u3002\u7136\u540e\u8f93\u51fa\u4e2d\u95f4\u7684\u6570\u3002\n\n\u2014\u2014\u4e8e\u662f \u4ee3\u7801\u5982\u4e0b\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n,a[100001];\nint main(){\n\tscanf(\"%d\",&n);//\u8f93\u5165n\uff1b\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>a[i];//\u8f93\u5165\u975e\u8d1f\u6574\u6570Ai\n\t\tif(i==1)printf(\"%d\\n\",a[i]);//\u7b2c1\u4e2a\u6570\u76f4\u63a5\u8f93\u51fa\n\t\tif(i!=1&&i%2==1){\n\t\t\tsort(a+1,a+i+1);\u5feb\u6392\n\t\t\tprintf(\"%d\\n\",a[(1+i)/2]);//\u8f93\u51fa\u4e2d\u4f4d\u6570\n\t\t}\n\t}return 0;//\u7ed3\u675f\n}\n```\n\n\u2014\u2014~~\u8fd9\u6837\u8fd9\u9053\u9898\u5c31\u5b8c\u7f8e\u7684\u7ed3\u675f\u4e86~~\u3002\n\n\u2014\u2014\u5f00\u4e2a\u73a9\u7b11\uff0c\u8fd9\u6837\u5199\u53ea\u80fd\u8fc740%\u7684\u6570\u636e\u3002\u800c\u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\u6211\u4eec\u80af\u5b9a\u662f\u8981\u8fdb\u884c\u4f18\u5316\u7684\u3002\n\n\u2014\u2014\u800c\u5bf9\u4e8e\u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u7528**\u5bf9\u9876\u5806**\u6765\u5b9e\u73b0\u3002\n\n\u2014\u2014**\u5bf9\u9876\u5806\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5efa\u7acb\u4e00\u4e2a\u5927\u6839\u5806\u548c\u4e00\u4e2a\u5c0f\u6839\u5806**\u3002\n\n\u2014\u2014\u5f62\u8c61\u7684\u89e3\u91ca![\u575f\u5934\u5bf9\u649e](https://i.loli.net/2019/06/25/5d11f067496d176042.jpg)\n\n\u2014\u2014\u8fd9\u9053\u9898\u4e3b\u8981\u505a\u6cd5\u5c31\u662f\u5148\u6765\u4e00\u4e2a**\u5927\u6839\u5806**\u548c\u4e00\u4e2a**\u5c0f\u6839\u5806**\uff0c\u800c\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u6211\u4eec\u628a**\u5927\u6570**\u653e\u5728**\u5c0f\u6839\u5806\u91cc**\uff0c**\u5c0f\u6570**\u653e\u5728**\u5927\u6839\u5806**\u91cc\uff0c\u5e76\u4e14\u7ef4\u62a4\u4e00\u4e2a\u72b6\u6001\uff1a\n```\n\u5f53\u5e8f\u5217\u7684\u957f\u5ea6\u4e3a\u5947\u6570\u65f6\uff0c\n\u2014\u2014\u4fdd\u8bc1\u5c0f\u6839\u5806\u7684\u6df1\u5ea6\u7b49\u4e8e\u5927\u6839\u5806\u7684\u6df1\u5ea6\u52a0\u4e00\u3002\n\u5f53\u5e8f\u5217\u7684\u957f\u5ea6\u4e3a\u5076\u6570\u65f6\uff0c\n\u2014\u2014\u4fdd\u8bc1\u5c0f\u6839\u5806\u7684\u6df1\u5ea6\u7b49\u4e8e\u5927\u6839\u5806\u7684\u6df1\u5ea6\u3002\n```\n\u2014\u2014\u8fd9\u6837\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u5c0f\u6839\u5806\u91cc\u7684\u662f\u6bd4\u5176\u5806\u9876\u5927\u7684\u4e00\u90e8\u5206\u6570\uff0c\u5927\u6839\u5806\u91cc\u7684\u662f\u6bd4\u5c0f\u6839\u5806\u7684\u5806\u9876\u5c0f\u7684\u4e00\u90e8\u5206\u6570\u3002\n\u2014\u2014\u6211\u4eec\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u5f53\u5e8f\u5217\u7684\u957f\u5ea6\u4e3a\u5947\u6570\u65f6\uff0c\u5c0f\u6839\u5806\u7684\u5806\u9876\u5c31\u662f\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570\n\n\u2014\u2014\u8bf4\u5b8c\u4e86\u601d\u60f3\uff0c\u63a5\u4e0b\u6765\u662f\u4ee3\u7801\u5b9e\u73b0\n\n\u2014\u2014\u9996\u5148\u662f**\u5efa\u5806**\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u7528C++\u81ea\u5e26\u7684STL\u5e93\u4e2d\u7684**poriority_queue**\u6765\u5b9e\u73b0\uff0c\u5f53\u7136\u624b\u6253\u5806\u4e5f\u662f\u53ef\u4ee5\u7684\u4e0d\u8fc7\u6211\u61d2\u5f97\u6253\u4e86\u3002\n\n\u2014\u2014\u5efa\u5806\n```\npriority_queue<int> x;//\u5c0f\u6839\u5806\npriority_queue<int> d;//\u5927\u6839\u5806\n```\n\u2014\u2014\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c**priority_queue**\u53ea\u80fd\u7ef4\u62a4\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u8981\u5b9e\u73b0\u5c0f\u6839\u5806\uff0c\u5c31\u9700\u8981\u518d\u653e\u5165\u5806\u4e2d\u65f6\u4e58\u4ee5\u4e2a\u8d1f\u4e00\uff0c\u5c06\u5176\u53d8\u4e3a\u8d1f\u6570\uff0c\u53d6\u51fa\u65f6\u518d\u4e58\u56de\u6765\uff0c\u8fd9\u6837\u5c31\u80fd\n\u5b9e\u73b0\u4e00\u4e2a\u5c0f\u6839\u5806\n\n\u2014\u2014~~\u5176\u5b9e\u662f\u56e0\u4e3a\u6211\u4e0d\u4f1a\u91cd\u8f7d\u8fd0\u7b97\u7b26\u4e4b\u7c7b\u7684\u5b9e\u73b0\u5c0f\u6839\u5806\u7684\u65b9\u6cd5\uff0c\u6240\u4ee5\u53ea\u80fd\u8fd9\u6837\u505a~~\n\n\u2014\u2014\u63a5\u4e0b\u6765\u662f\u4ee3\u7801\u5b9e\u73b0\n\n\u2014\u2014 \u9996\u5148\uff0c\u5bf9\u4e8ei\u4e3a\u5076\u6570\u65f6\uff0c\u7531\u4e8ei-1\u4e3a\u5947\u6570\uff0c\u6240\u4ee5\u5bf9\u4e8e\u957f\u5ea6\u4e3ai-1\u7684\u5e8f\u5217 **lx==ln+1**\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u4e00\u4e2a\u6570\u653e\u5165\u5927\u6839\u5806\u5185\u6765\u4fdd\u8bc1\u6b64\u65f6 **lx==ln**\n\n```\n\u2014\u2014\u82e5\u6b64\u65f6Ai\u6bd4\u5c0f\u6839\u5806\u7684\u5806\u9876\u8981\u5c0f\uff0c\u8bf4\u660eAi\u6bd4\u5c0f\u6839\u5806\u5185\u6240\u6709\u5143\u7d20\u90fd\u8981\u5c0f\uff0c\u8fd9\u65f6\u6211\u4eec\u4fbf\u53ef\u4ee5\u76f4\u63a5\u5c06Ai\u653e\u5165\u5927\u6839\u5806\u5185\uff1a\n\n\u2014\u2014\u800c\u5982\u679cAi\u6bd4\u5c0f\u6839\u5806\u7684\u5806\u9876\u8981\u5927\u7684\u8bdd\uff0c\u6211\u4eec\u8981\u5c06\u5c0f\u6839\u5806\u7684\u5806\u9876\u53d6\u51fa\u653e\u5165\u5927\u6839\u5806\u5185\uff0cAi\u653e\u5165\u5c0f\u6839\u5806\u5185\u624d\u80fd\u4fdd\u8bc1\u5c0f\u6839\u5806\u5185\u6240\u6709\u5143\u7d20\u90fd\u6bd4\u5927\u6839\u5806\u5185\u7684\u6240\u6709\u5143\u7d20\u5927\n```\n\u2014\u2014i\u4e3a\u5947\u6570\u65f6\u540c\u7406\u3002\n\n\u2014\u2014\u4e0b\u9762\u624d\u662f\u4ee3\u7801\u5b9e\u73b0\n\n```\n#include<bits/stdc++.h>//\u4e07\u80fd\u7684\u5934\u6587\u4ef6\nusing namespace std;\npriority_queue<int> x;//\u5c0f\u6839\u5806\npriority_queue<int> d;//\u5927\u6839\u5806\nint p,k,m,a,z[10001];\nint main(){\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++){\n            cin>>a;\n            if(i==1){\n            x.push(-1*a);//\u5c06\u7b2c\u4e00\u4e2a\u6570\u653e\u5165\u5c0f\u6839\u5806\n            cout<<-1*x.top()<<endl;//\u8f93\u51fa\n            }\n            if(i>1&&i%2==0)//\u5982\u679ci\u4e3a\u5076\u6570\n            {\n            int c=x.top();\n                if(a<=-1*c)//Ai\u6bd4\u5c0f\u6839\u5806\u5806\u9876\u5c0f\n                d.push(a);//\u76f4\u63a5\u63d2\u5165\u5927\u6839\u5806\n                else//Ai\u6bd4\u5c0f\u6839\u5806\u5806\u9876\u5927\n                {\n                x.pop();x.push(-1*a);d.push(-1*c);//\u5c0f\u6839\u5806\u5806\u9876\u653e\u5165\u5927\u6839\u5806\uff0cAi\u653e\u5165\u5c0f\u6839\u5806\n                }\n            }if(i>1&&i%2==1)//\u5982\u679ci\u4e3a\u5947\u6570\n            {\n            int c=d.top();\n                if(a>=c)//Ai\u6bd4\u5927\u6839\u5806\u7684\u5806\u9876\u5927\n                x.push(-1*a);//\u76f4\u63a5\u63d2\u5165\u5c0f\u6839\u5806\n                else//Ai\u6bd4\u5927\u6839\u5806\u7684\u5806\u9876\u5c0f\n                {\n                d.pop();d.push(a);x.push(-1*c);//\u5927\u6839\u5806\u7684\u5806\u9876\u653e\u5165\u5c0f\u6839\u5806\uff0cAi\u653e\u5165\u5927\u6839\u5806\n                }\n                printf(\"%d\\n\",-1*x.top());//i\u4e3a\u5947\u6570\u65f6\u8f93\u51fa\u4e2d\u4f4d\u6570\n            }\n    }\n    return 0;//\u7ed3\u675f\n}\n```",
        "postTime": 1561123793,
        "uid": 182842,
        "name": "\u5a77\u83e1",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1168\u3010\u4e2d\u4f4d\u6570\u3011(\u5df2\u8fc7\u9898\u89e3)"
    },
    {
        "content": "# \u6743\u503c\u6811\u72b6\u6570\u7ec4+\u4e8c\u5206\u67e5\u627e+\u79bb\u6563\u5316\n\n### **C++**\n\n1.\u90e8\u5206\u5206\u7684\u60f3\u6cd5\uff0c\u5c31\u662f\u7528\u7c7b\u4f3c\u901a\u6392\u7684\u65b9\u6cd5\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4k\uff0c\u6bcf\u6b21\u5728k[a[i]]\u548ck[a[i-1]]\u52a01\uff0c\u7136\u540e\u4ece\u4e0b\u68071\u5f00\u59cb\u5f80\u540e\u626b\uff0c\u5f53\u626b\u5230\u7684\u6570\u7684\u4e2a\u6570\u662f\u5e8f\u5217\u7684\u201c\u4e2d\u4f4d\u6570\u201d\u5c31\u8f93\u51fa\u3002\uff08\u5f53\u7136\u56e0\u4e3aa[i]\u592a\u5927\u800c\u4e14\u6700\u591a100000\u4e2a\u6570\u6240\u4ee5\u6211\u4eec\u8981\u79bb\u6563\u4e00\u4e0b\uff09\n\n2.\u8fd9\u79cd\u60f3\u6cd5\u53ef\u4ee5\u6539\u4e00\u4e0b\uff0c\u5c31\u662f\u7528\u4e00\u4e2a\u524d\u7f00\u548c+\u4e8c\u5206\u67e5\u627e\uff08\u524d\u7f00\u548c\u6570\u7ec4sum\uff09\uff0csum[i]\u8868\u5f0f\u5c0f\u4e8e\u7b49\u4e8ei\u7684\u6570\u6709\u591a\u5c11\u4e2a\u3002\u4e8c\u5206\u65f6\u5f53sum[mid]\u5927\u4e8e\u7b49\u4e8e(\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\u8981\u7b49\u4e8e\uff09\u201c\u4e2d\u4f4d\u6570\u201d\uff0c\u4e0a\u754c\u7f29\u5c0f\u3002\u53cd\u4e4b\uff0c\u4e0b\u754c\u7f29\u5c0f\u3002\u56e0\u4e3ak[a[i]]\u4e0d\u662f\u4e00\u6b21\u6027\u52a0\u5b8c\uff08\u5c31\u662f\u5728\u7ebf\uff09\uff0c\u6240\u4ee5\u524d\u7f00\u548c\u6570\u7ec4\u6bcf\u6b21\u90fd\u8981\u66f4\u6539\uff0c\u5f88\u8d39\u65f6\u95f4\u3002\n\n3.\u8bf6\uff01\uff01\u524d\u7f00\u548c\u6570\u7ec4\u8981\u66f4\u6539\uff01\u4e0d\u5c31\u662f\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u5417\uff01\u6211\u4eec\u53ef\u4ee5\u5c06\u524d\u7f00\u548c\u6570\u7ec4\u66f4\u6539\u7684\u90e8\u5206\u6362\u6210\u6811\u72b6\u6570\u7ec4\uff08\u8fd9\u91cc\u53ea\u9700\u8981\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\uff0c\u6240\u4ee5\u6811\u72b6\u6570\u7ec4\u5c31\u591f\u4e86\uff09\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u5341\u5206\u6109\u5feb\u5730\u5f97\u51fa\u4e86\u6b63\u89e3\uff01\uff01\uff01\n\n\u5982\u679c\u4e0d\u662f\u5f88\u7406\u89e3\u201c\u4e2d\u4f4d\u6570\u201d\u53ef\u4ee5\u770b\u4e00\u4e0b\u4ee3\u7801\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<math>\n#include<cstring>\nusing namespace std;\nconst int N=100005;\nstruct asd\n{\n\tint id,val;\n}z[N];\nbool cmp(asd a,asd b)\n{\n\treturn a.val<b.val;\n}\nint a[N],b[N],c[N],n;\nint lowbit(int x)\n{\n\treturn x&(-x);\n}\nvoid add(int x,int val)//\u5355\u70b9\u4fee\u6539 \n{\n\twhile(x<=n)\n\t{\n\t\tc[x]+=val;\n\t\tx+=lowbit(x);\n\t}\n}\nint getsum(int x)//\u533a\u95f4\u67e5\u8be2 \n{\n\tint s=0;\n\twhile(x)\n\t{\n\t\ts+=c[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn s;\n}\nint Find(int x)//\u4e8c\u5206\u67e5\u627e\n{\n\tint l=1,r=n,mid;\n\twhile(l<=r)\n\t{\n\t\tmid=(l+r)>>1;//\u8fd9\u4e2a\u5199\u6cd5\u7b49\u4ef7\u4e8emid=(l+r)/2\uff0c\u8001\u5e08\u8bf4\u7528\u4f4d\u8fd0\u7b97\u6bd4\u8f83\u6709\u903c\u683c :D\n\t\tint s=getsum(mid);//\u5c0f\u4e8e\u7b49\u4e8emid\u7684\u6570\u7684\u4e2a\u6570 \n\t\tif(s>=x/2+1)r=mid-1;//\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e\u201c\u4e2d\u4f4d\u6570\u201d\uff0c\u4e0a\u754c\u7f29\u5c0f\uff08x\u662f\u8981\u6c42\u4e2d\u4f4d\u6570\u7684\u5e8f\u5217\u7684\u957f\u5ea6\uff09 \n\t\telse l=mid+1;//\u53cd\u4e4b\uff0c\u4e0b\u754c\u7f29\u5c0f \n\t}\n\treturn b[l];\n}\nvoid Disc()//\u79bb\u6563\u5316 \n{\n\tsort(z+1,z+n+1,cmp);//\u6309\u7167\u503c\u7684\u5927\u5c0f\u6392\u5e8f\uff0c\u76f8\u7b49\u4e5f\u65e0\u6240\u8c13 \n\tfor(int i=1;i<=n;i++)\n\t{\n\t\ta[z[i].id]=i;//z[i].id\u662f\u8fd9\u4e2a\u6570\u5728\u672a\u6392\u5e8f\u7684\u5e8f\u5217\u4e2d\u7684\u7f16\u53f7\uff0c\u7528i\u66ff\u6362\u539f\u6765\u7684\u503c \n\t\tb[i]=z[i].val;//b[i]\u8868\u793a\u7684\u662f\u79bb\u6563\u540e\u7684\u6570\u503c\u4e3ai\u7684\u6570\u7684\u771f\u5b9e\u503c \n\t}\n}\nint main()\n{\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&z[i].val);\n\t\tz[i].id=i;\n\t}\n\tDisc(); //\u79bb\u6563\u5316 \n\tcout<<b[a[1]]<<endl;\n\tadd(a[1],1);\n\tfor(int i=3;i<=n;i+=2)\n\t{\n\t\tadd(a[i],1);//\u5728a[i]\u4f4d\u52a0\u4e00 \n\t\tadd(a[i-1],1);//\u5728a[i-1]\u4f4d\u52a0\u4e00\n\t\tprintf(\"%d\\n\",Find(i));//\u4e8c\u5206\u67e5\u627e \n\t}\n\treturn 0;\n}\n```\n\n# **Hope you enjoy!**\n\n## ~~\u4eba\u5982\u5176\u540d~~",
        "postTime": 1565332715,
        "uid": 85996,
        "name": "Im_a_ordinary_noob",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u672c\u6765\u89c9\u5f97\u65b9\u6cd5\u633a\u5947\u7279\u7684\uff0c\u6ca1\u60f3\u5230\u5c45\u7136\u548c\u697c\u4e0b\u5927\u4f6c\u601d\u8def\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7\u6211\u6bd4\u8f83\u61d2\u76f4\u63a5\u7528\u7684stl\u91cc\u7684queue\n\n\u5efa\u7acb\u4e24\u4e2aqueue\uff0c\u5206\u522b\u65f6\u4ece\u5c0f\u5230\u5927\u548c\u4ece\u5927\u5230\u5c0f\uff08\u547d\u540d\u4e3aque1\uff0cque2\uff09\uff0c\u9996\u5148que1\u4e2d\u6709\u4e00\u4e2a\u6570a[1]\uff0cque2\u4e3a\u7a7a\u3002\n\n\u7136\u540e\u6bcf\u6b21\u8fdb\u6765\u4e24\u4e2a\u6570\uff0c\u5c0f\u7684\u7ed9que1\uff0c\u5927\u7684\u7ed9que2\uff0c\u7136\u540e\u5982\u679cque1\u6700\u5927\u7684\u6570\u6bd4que2\u6700\u5c0f\u7684\u6570\u5927\u4e86\u5c31\u66ff\u6362\u4ed6\u4eec\u4fe9\u3002\n\n\u56e0\u4e3a\u53ea\u8fdb\u6765\u4e24\u4e2a\u6570\uff0c\u6240\u4ee5\u6700\u591a\u66f4\u6362\u4e00\u6b21\uff0c\u4fdd\u8bc1\u4e86\u590d\u6742\u5ea6\u4e3aO\uff08nlgn\uff09\n\n\u4ee3\u7801\u633a\u4e11\u7684\u52ff\u55b7\u2026\u2026\n\n\n\u00b7\u00b7\u00b7cpp\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<queue>\nusing namespace std;\nstruct cmp1\n{\n    bool operator () (int &a,int &b)\n    {\n        return a<b;\n    }\n};\nstruct cmp2\n{\n    bool operator () (int &a,int &b)\n    {\n        return a>b;\n    }\n};\nint n,x,y;\nint main()\n{\n    priority_queue<int,vector<int>,cmp1>que1;\n    priority_queue<int,vector<int>,cmp2>que2;\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&x);\n    que1.push(x);\n    printf(\"%d\\n\",x);\n    for(int i=3;i<=n;i+=2)\n    {\n        scanf(\"%d%d\",&x,&y);\n        if(x>y)\n        {\n            int t=x;x=y;y=t;\n        }\n        que1.push(x);\n        que2.push(y);\n        if(que1.top()>que2.top())\n        {\n            int a=que1.top(),b=que2.top();\n            que1.pop();\n            que1.push(b);\n            que2.pop();\n            que2.push(a);\n        }\n        printf(\"%d\\n\",que1.top());\n    }\n    return 0;\n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1509452780,
        "uid": 41180,
        "name": "\u9759\u9ed8\u4e4b\u5149",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u8fd9\u9898\u53ef\u4ee5\u7528\u4e24\u4e2a\u5806\u505a\u3002\u3002\u3002\u5de6\u5806\u4e3a\u5927\u6839\u5806\u53f3\u5806\uff0c\u4e3a\u5c0f\u6839\u5806\uff0c\u9047\u5230\u5927\u4e8e\u5927\u6839\u5806\u5806\u9876\u7684\u5c31\u653e\u5728\u5c0f\u6839\u5806\u91cc\u3002\u3002\u3002\u53cd\u4e4b\u653e\u5165\u5927\u6839\u5806\u3002\u3002\u8ba9\u4ed6\u4eec\u7684\u5143\u7d20\u4e2a\u6570\u5dee\u503c\u4e3a\u4e00\uff0c\u5982\u679c\u4e0d\u4e3a\u4e00\u5c31\u4ece\u591a\u7684\u4e00\u4e2a\u62ff\u51fa\u6765\u653e\u5165\u5c11\u7684\u4e00\u4e2a\u4e2d\u3002\u3002\u3002\u4e4b\u540e\u5143\u7d20\u591a\u7684\u5806\u9876\u7684\u5143\u7d20\u5c31\u662f\u4e2d\u4f4d\u6570\u4e86\u3002\u3002\u54c8\u54c8\u3002\u3002\u4e0b\u9762\u662f\u4ee3\u7801\n\n```cpp\n #include<cstdio>\n#include<iostream>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#include<ctime>\nusing namespace std;\ninline int read()\n{\n    char ch=getchar();\n    int a=0,t=1;\n    while(ch<'0'||ch>'9') {if(ch=='-') t=-1;ch=getchar();}\n    while(ch<='9'&&ch>='0') {a=a*10+ch-'0';ch=getchar();}\n    return a*t;\n}\npriority_queue<int,vector<int> > l;\npriority_queue<int,vector<int>,greater<int> > r;\nint n;\nint num=0;\nint leftnum=0,rightnum=0;\nint x,y;\nint a[5000001];\nint main()\n{\n    //int th=clock();\n    freopen(\"wq.in\",\"r\",stdin);freopen(\"wq.out\",\"w\",stdout);\n    n=read();\n    //l.resize(1000001);r.resize(1000001);\n    a[1]=read();a[2]=read();a[3]=read();\n    printf(\"%d\\n\",a[1]);\n    sort(a+1,a+4);\n    printf(\"%d\\n\",a[2]);\n    l.push(a[1]);leftnum++;\n    l.push(a[2]);leftnum++;\n    r.push(a[3]);rightnum++;\n    for(int q=5;q<=n;q+=2)\n    {\n        for(int i=q-1;i<=q;++i)\n        {\n            a[i]=read();\n            //if(l.empty()==1) {l.push(a[i]);leftnum++;continue;}\n            //if(r.empty()==1) {r.push(a[i]);rightnum++;continue;}\n            x=l.top();y=r.top();\n            int bo=0;\n            if(a[i]<=x) {l.push(a[i]),leftnum++,bo=1;continue;}\n            if(a[i]>=y) {r.push(a[i]),rightnum++,bo=1;continue;}\n            if(a[i]>x) {r.push(a[i]),rightnum++,bo=1;continue;}\n            if(a[i]<y) {l.push(a[i]),leftnum++,bo=1;continue;}\n            //if(bo==0) l.push(a[i]),leftnum++;\n        }\n        while(abs(leftnum-rightnum)!=1)\n        {\n            if(leftnum>rightnum)\n            {\n                x=l.top();\n                l.pop();\n                leftnum--;\n                r.push(x);\n                rightnum++;\n                continue;\n            }\n            if(leftnum<rightnum)\n            {\n                x=r.top();\n                r.pop();\n                rightnum--;\n                l.push(x);\n                leftnum++;\n                continue;\n            }\n        }\n        if(leftnum>rightnum) \n        {\n            x=l.top();\n            //num++;\n            printf(\"%d\\n\",x);\n            continue;\n        } \n        if(leftnum<rightnum) \n        {\n            //num++;\n            x=r.top();\n            printf(\"%d\\n\",x);\n            continue;\n        }\n    } \n    //while(l.empty()!=0)\n    //printf(\"%d\",th-clock());\n    //printf(\"%d\",num);\n    return 0;\n}\n```",
        "postTime": 1479292431,
        "uid": 14203,
        "name": "\u5f20\u5c0f\u6e90",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "### 1 O(n logn)\u7b97\u6cd5\n\n$\\;$\u5f88\u663e\u7136\uff0c\u6211\u4eec\u6c42\u5f97\u4e2d\u4f4d\u6570\u5c31\u662f\u5728\u5f53\u524d\u6570\u5217\u6392\u5e8f\u4e4b\u540e\uff0c\u6392\u5728\u7b2c$\\frac{i+1}{2}$\u7684\u4f4d\u7f6e\u7684\u6570\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u52a8\u6001\u7ef4\u62a4\u6570\u5217\u4e2d$k$\u5927\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u4e14\u652f\u6301\u52a8\u6001\u63d2\u5165\u3002\u600e\u4e48\u529e\u5462\uff1f\u5f53\u7136\u627e\u5e73\u8861\u6811\u554a\uff01\u4e8e\u662f\u6211\u5199\u4e86\u4e00\u4e2aTreap\u3002\u590d\u6742\u5ea6$O(n log_2n)$\uff0c\u7ed3\u679c\u5e38\u6570\u5f88\u5927\u3002\n\n$\\;$\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u5806\u4e5f\u53ef\u4ee5\u5b8c\u6210\u4ee5\u4e0a\u64cd\u4f5c\u3002\u8bbe\u8ba1\u4e24\u4e2a\u5806\uff0c\u7136\u540e\u4e00\u4e2a\u662f\u5927\u6839\u5806\uff0c\u4e00\u4e2a\u662f\u5c0f\u6839\u5806\uff0c\u6ee1\u8db3\u5927\u6839\u5806\u7684\u6700\u5927\u5143\u7d20\u6bd4\u5c0f\u6839\u5806\u7684\u6700\u5c0f\u5143\u7d20\u5c0f\u3002\u67e5\u8be2\u65f6\u53d6\u5806\u9996\u3002\u590d\u6742\u5ea6$O(n log_2n)$\uff0c\u5e38\u6570\u4f18\u4e8e\u5e73\u8861\u6811\u3002\n\n### 2 \u5e38\u6570\u518d\u4f18\u5316\n\n$\\;$\u4e8e\u662f\uff0c@Too\\_Young \u795e\u7287\u8ba4\u4e3a\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e0a\u9762\u5e38\u6570\u518d\u4f18\u5316\u3002\u6ce8\u610f\u5230\u5e73\u8861\u6811\u548c\u5806\u7684\u63d2\u5165\u3001\u67e5\u8be2\u90fd\u662f$O(log_2 n)$\u7684\uff0c\u4e8e\u662f\u4ed6\u63d0\u51fa\uff0c\u53ef\u4ee5\u7528\u6590\u6ce2\u90a3\u5951\u5806\u6765\u4f18\u5316\uff0c\u8fd9\u6837\uff0c\u9664\u4e86\u7ef4\u62a4\u65f6\u7684\u5220\u9664\u4ee5\u5916\u90fd\u662f$O(1)$\u7684\u3002\u5e38\u6570\u4f18\u5316\u5b8c\u6210\u3002\n\n### 3 Treap\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<ctime>\n#include<vector>\nusing namespace std;\nconst int MAXN=400010;\n\nstruct Treap\n{\n    static const int NaN=-2;\n    struct node\n    {\n        node *ch[2];\n        int r,v,sz,c;\n        node(int v,node* tmp):v(v)\n        {\n            ch[0]=ch[1]=tmp;\n            r=rand();sz=c=1;\n        }\n        bool operator<(const node& cpr)const\n        {\n            return r<cpr.r;\n        }\n        void upd()\n        {\n            sz=c+ch[0]->sz+ch[1]->sz;\n        }\n    }*root,*null;\n    Treap()\n    {\n        null=new node(0,0);\n        null->sz=null->c=0;\n        null->r=NaN;\n        root=null;\n    }\n    \n    void rotate(node* &o,int d)//turn{0:left;1:right}\n    {\n        node* k=o->ch[d^1];\n        o->ch[d^1]=k->ch[d];\n        k->ch[d]=o;\n        o->upd();k->upd();o=k;\n    }\n    void insert(node* &o,int x)\n    {\n        if(o==null)\n            o=new node(x,null);\n        else\n        {\n            if(o->v==x)\n            {\n                o->c++;\n                o->sz++;\n            }\n            else\n            {\n                bool d=(x>o->v);\n                insert(o->ch[d],x);\n                if(o->ch[d]<o)\n                    rotate(o,d^1);\n                o->upd();\n            }\n        }\n    }\n    int kth(node* &o,int k)\n    {\n        int o_sz=o->ch[0]->sz+o->c;\n        if(k>o->ch[0]->sz&&k<=o_sz)\n            return o->v;\n        else if(k<=o->ch[0]->sz)\n            return kth(o->ch[0],k);\n        else\n            return kth(o->ch[1],k-o_sz);\n    }\n}mid;\n\nint main()\n{\n    srand(time(NULL));\n    int n,x,y;scanf(\"%d%d\",&n,&x);\n    mid.insert(mid.root,x);printf(\"%d\\n\",x);\n    for(int i=2;i<=n;i++)\n        if(i&1)\n        {\n            scanf(\"%d\",&x);mid.insert(mid.root,x);\n            printf(\"%d\\n\",mid.kth(mid.root,i+1>>1));\n        }\n        else\n        {\n            scanf(\"%d\",&x);\n            mid.insert(mid.root,x);\n        }\n    return 0;\n}\n```",
        "postTime": 1515805957,
        "uid": 23398,
        "name": "frankchenfu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u4e2d\u4f4d\u6570\u53ef\u4ee5\u8f6c\u5316\u4e3a\u533a\u95f4\u7b2ck\u5927\u95ee\u9898\uff0c\u5f53\u7136\u662f\u9009\u62e9Treap\u5b9e\u73b0\u540d\u6b21\u6811\u4e86\u554a\u3002\uff08\u7b11\uff09\n\n\n\u529f\u80fd\u5341\u5206\u7b80\u5355\u7684Treap\u5373\u80fd\u6ee1\u8db3\u9700\u6c42\u2014\u2014\u53ea\u9700\u8981\u63d2\u5165\u4e0e\u67e5\u627e\u7b2c\u5927\u7684\u529f\u80fd\u3002\n\n\n\u63d2\u5165\u7b2ci\u4e2a\u6570\u65f6\uff0c\u5982\u679ci\u662f\u5947\u6570\uff0c\u968f\u5373\u8be2\u95ee\u5f53\u524d\u6392\u540d\u7b2c(i+1>>1)\u7684\u6570\u3002\n\n\n\u6ce8\u610f\u662f\u4e00\u8fb9\u63d2\u5165\u4e00\u8fb9\u8be2\u95ee\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u7559\u539f\u5e8f\u5217\u7684\u987a\u5e8f\uff0c\u800c\u4e0d\u662f\u6240\u6709\u63d2\u5165\u5b8c\u540e\u518d\u8be2\u95ee\u3002\n\n\n\u8fd9\u6837\u4e00\u8d9f\u4e0b\u6765\uff0c\u6240\u6709\u6570\u90fd\u63d2\u5165\u5b8c\u6bd5\u4e86\uff0c\u8be2\u95ee\u4e5f\u5904\u7406\u5b8c\u6bd5\u4e86\u3002\n\n\n\u5f88\u597d\u7406\u89e3\uff0c\u8bdd\u4e0d\u591a\u8bf4\u5566\uff0c\u4ee3\u7801\u5982\u4e0b\u3002\n\n\n\u4e24\u4e2a\u7248\u672c\uff0c\u5c01\u88c5\u7248\u732e\u7ed9\u50cf\u6211\u4e00\u6837\u8ffd\u6c42\u53ef\u8bfb\u6027\u7684\u4eba\uff1b\u7cbe\u7b80\u7248\u732e\u7ed9\u559c\u6b22\u4ee3\u7801\u6bd4\u8f83\u5c11\u7684\u4eba\u3002\n\n\n## \u5c01\u88c5\u7248\u4ee3\u7801\n\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\nconst int MAXN=100010;\nint n;\nclass Treap\n{\n    public:\n        Treap(void)\n        {\n            rt=cnt=0;\n            memset(a,0,sizeof a);\n            memset(s,0,sizeof s);\n        }\n        void Insert(int x)\n        {\n            _Insert(rt,x);\n        }\n        int Xth(int x)\n        {\n            return _Xth(rt,x);\n        }\n    private:\n        bool a[MAXN];\n        int rt,cnt;\n        struct node\n        {\n            int l,r,v,p,size,num;\n        }s[MAXN];\n        int Random(void)\n        {\n            int x;\n            while(a[x=rand()%MAXN]);\n            a[x]=1;\n            return x;\n        }\n        void Update(int i)\n        {\n            s[i].size=s[s[i].l].size+s[s[i].r].size+s[i].num;\n        }\n        void L_Rotate(int &i)\n        {\n            int t=s[i].r;\n            s[i].r=s[t].l,s[t].l=i;\n            s[t].size=s[i].size;\n            Update(i),i=t;\n        }\n        void R_Rotate(int &i)\n        {\n            int t=s[i].l;\n            s[i].l=s[t].r,s[t].r=i;\n            s[t].size=s[i].size;\n            Update(i),i=t;\n        }\n        void _Insert(int &i,int x)\n        {\n            if(!i)\n            {\n                s[i=++cnt].v=x,s[i].p=Random();\n                s[i].size=s[i].num=1;\n                return;\n            }\n            ++s[i].size;\n            if(x==s[i].v)\n                ++s[i].num;\n            else if(x<s[i].v)\n            {\n                _Insert(s[i].l,x);\n                R_Rotate(i);\n            }\n            else\n            {\n                _Insert(s[i].r,x);\n                L_Rotate(i);\n            }\n        }\n        int _Xth(int i,int x)\n        {\n            if(!i)\n                return 0;\n            int t;\n            if(x<=s[s[i].l].size)\n                return _Xth(s[i].l,x);\n            else if(x>(t=s[s[i].l].size+s[i].num))\n                return _Xth(s[i].r,x-t);\n            else\n                return s[i].v;\n        }\n}T;\nint main(int argc,char *argv[])\n{\n    scanf(\"%d\",&n);\n    srand((unsigned)time(NULL));\n    for(int i=1,x;i<=n;++i)\n    {\n        scanf(\"%d\",&x);\n        T.Insert(x);\n        if(i&1)\n            printf(\"%d\\n\",T.Xth(i+1>>1));\n    }\n    return 0;\n}\n```\n\n\n\n## \u7cbe\u7b80\u7248\u4ee3\u7801\n\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\nconst int MAXN=100010;\nbool a[MAXN];\nint n,rt,cnt;\nstruct node\n{\n    int l,r,v,p,size,num;\n}s[MAXN];\nint Random(void)\n{\n    int x;\n    while(a[x=rand()%MAXN]);\n    a[x]=1;\n    return x;\n}\nvoid Update(int i)\n{\n    s[i].size=s[s[i].l].size+s[s[i].r].size+s[i].num;\n}\nvoid L_Rotate(int &i)\n{\n    int t=s[i].r;\n    s[i].r=s[t].l,s[t].l=i;\n    s[t].size=s[i].size;\n    Update(i),i=t;\n}\nvoid R_Rotate(int &i)\n{\n    int t=s[i].l;\n    s[i].l=s[t].r,s[t].r=i;\n    s[t].size=s[i].size;\n    Update(i),i=t;\n}\nvoid Insert(int &i,int x)\n{\n    if(!i)\n    {\n        s[i=++cnt].v=x,s[i].p=Random();\n        s[i].size=s[i].num=1;\n        return;\n    }\n    ++s[i].size;\n    if(x==s[i].v)\n        ++s[i].num;\n    else if(x<s[i].v)\n    {\n        Insert(s[i].l,x);\n        R_Rotate(i);\n    }\n    else\n    {\n        Insert(s[i].r,x);\n        L_Rotate(i);\n    }\n}\nint Xth(int i,int x)\n{\n    if(!i)\n        return 0;\n    int t;\n    if(x<=s[s[i].l].size)\n        return Xth(s[i].l,x);\n    else if(x>(t=s[s[i].l].size+s[i].num))\n        return Xth(s[i].r,x-t);\n    else\n        return s[i].v;\n}\nint main(int argc,char *argv[])\n{\n    scanf(\"%d\",&n);\n    srand((unsigned)time(NULL));\n    for(int i=1,x;i<=n;++i)\n    {\n        scanf(\"%d\",&x);\n        Insert(rt,x);\n        if(i&1)\n            printf(\"%d\\n\",Xth(rt,i+1>>1));\n    }\n    return 0;\n}\n```\n\n> \u8c22\u8c22\u9605\u8bfb\u3002\n",
        "postTime": 1513748139,
        "uid": 35851,
        "name": "Capella",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u672c\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u3002~~QAQ~~\n\n\u5f88\u660e\u663e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u7684\u624b\u6bb5\u4f18\u5316\u590d\u6742\u5ea6\uff0c\u5c31\u53ef\u4ee5\u4ec5\u4ec5\u4ece\u5de6\u5230\u53f3\u626b\u4e00\u904d\uff0c\u52a0\u4e0a\u7ef4\u62a4\u7684\u590d\u6742\u5ea6\uff0c$O(~nlogn~)$ \u5de6\u53f3\u5e94\u8be5\u662f\u6b63\u89e3\u7684\u3002\n\n\u9898\u89e3\u91cc\u597d\u591a\u5199\u4e86\u4ec0\u4e48\u5806 $vector$ \u7684\uff0c\u849f\u84bb\u61d2\u5f97\u60f3\u90a3\u4e48\u591a\uff0c\u5c31\u628a\u5e73\u8861\u6811\u7684\u4ee3\u7801\u590d\u5236\u7c98\u8d34\u4e86\u4e00\u904d\u6539\u4e00\u6539\u5c31 $A$ \u4e86\u3002\n\n\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u5462\uff1f\n\n\u6211\u4eec\u8003\u8651\u5230\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u503c\uff0c\u56e0\u4e3a\u4f7f\u4ece\u5de6\u5f80\u53f3\u63d2\u5165\u7684\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u8003\u8651\u4ed6\u7684\u4f4d\u7f6e\uff0c\u4ec5\u8003\u8651\u5f53\u524d\u72b6\u6001\u4e0b\u7684\u6743\u503c\u5927\u5c0f\u5e8f\u5217\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u626b\u4e00\u904d\uff0c\u628a\u5f53\u524d\u6743\u503c\u5165\u961f\uff08\u51c6\u786e\u8bf4\u5e94\u8be5\u53eb\u6811\uff0c\u4f46\u6211\u611f\u89c9\u53eb\u961f\u66f4\u597d\u7406\u89e3\uff0c\u56e0\u4e3a\u5e73\u8861\u6811\u672c\u8d28\u5c31\u662f\u4e00\u4e2a\u5e8f\u5217\uff09\uff0c\u7136\u540e\u67e5\u8be2\u5f53\u524d\u5e73\u8861\u6811\u7684\u4e2d\u4f4d\u6570\u5373\u53ef\u3002\n```code\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define Mid (l+r)/2\n#define maxn 100005\n#define inf 0x3f3f3f3f\n\nconst int mod=1e9+7;\n\nint n,m,Q;\n\nint read(){\n    int x=0,f=1;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+c-'0';c=getchar();}\n    return x*f;\n}\nint a[maxn];\nint fa[maxn],siz[maxn],cnt[maxn],ch[maxn][2],key[maxn];\nint rt,len;\nint get(int x)\n{\n    return ch[fa[x]][1]==x;\n}\nvoid clear(int x)\n{\n    fa[x]=cnt[x]=siz[x]=ch[x][1]=ch[x][0]=key[x]=0;\n}\nvoid pushup(int x)\n{\n    if(!x)return;\n    siz[x]=cnt[x]+siz[ch[x][0]]+siz[ch[x][1]];\n}\nvoid rotate(int x)\n{\n    int fu=fa[x],ye=fa[fu],k=get(x);\n    ch[fu][k]=ch[x][!k];fa[ch[fu][k]]=fu;\n    ch[x][!k]=fu;fa[fu]=x;\n    fa[x]=ye;if(ye)ch[ye][ch[ye][1]==fu]=x;\n    pushup(fu);pushup(x);\n}\nvoid splay(int x)\n{\n    for(int fu;fu=fa[x];rotate(x))\n        if(fa[fu])\n            rotate((get(x)==get(fu))?fu:x);\n    rt=x;\n}\nvoid insert(int x)\n{\n    if(rt==0)\n    {\n        len++;rt=len;key[len]=x;\n        siz[len]=cnt[len]=1;return;\n    }\n    int now=rt,fu=0;\n    while(1)\n    {\n        if(key[now]==x)\n        {\n            cnt[now]++;pushup(now);pushup(fu);\n            splay(now);return;\n        }\n        fu=now;now=ch[now][key[now]<x];\n        if(!now)\n        {\n            len++;key[len]=x;siz[len]=cnt[len]=1;\n            fa[len]=fu;ch[fu][key[fu]<x]=len;\n            pushup(fu);splay(len);return;\n        }\n    }\n}\nint firnk(int x)\n{\n    int now=rt;\n    while(1)\n    {\n        if(ch[now][0]&&x<=siz[ch[now][0]])now=ch[now][0];\n        else\n        {\n            if(siz[ch[now][0]]+cnt[now]>=x)\n                return key[now];\n            x-=siz[ch[now][0]]+cnt[now];\n            now=ch[now][1];\n        }\n    }\n}\nsigned main(){\n//  freopen(\"a.in\",\"r\",stdin);\n//  freopen(\"a.out\",\"w\",stdout);\n    int x,y,z,l,r,k,opt;\n    n=read();\n    for(int i=1;i<=n;i++){\n        a[i]=read();insert(a[i]);\n        if(i%2==1)cout<<firnk(i/2+1)<<endl;\n    }\n\n\n\n\n\n    return 0;\n}\n```",
        "postTime": 1572450412,
        "uid": 26622,
        "name": "Masky",
        "ccfLevel": 6,
        "title": "P1168\u5e73\u8861\u6811\u9898\u89e3"
    },
    {
        "content": "> **\u8fd9\u4e48\u6709\u8da3\u7684\u4e00\u9053\u94fe\u8868\u601d\u8def\u9898\uff0c\u4f60\u8c37\u771f\u7684\u6ca1\u6709\u4eba\u5199\u94fe\u8868\u5417\uff08\u7ffb\u4e86\u5168\u90e88\u9875\u9898\u89e3\u672a\u89c1\u94fe\u8868\uff09\uff1f\uff1f\uff1f\u5bf9\u9876\u5806\u662f\u591a\u4e48\u7684\u67af\u71e5\u4e4f\u5473** \n\n> *\"\u4f7f\u7528\u94fe\u8868\u6765\u89e3\u6b64\u9898\u6709\u5728\u7ebf\u548c\u79bb\u7ebf\u4e24\u79cd\u7b97\u6cd5\uff0c\u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u79bb\u7ebf\u7b97\u6cd5\uff0c\u4e0d\u8fc7\u4f1a\u7528\u4e00\u53e5\u8bdd\u6765\u4ecb\u7ecd\u5728\u7ebf\u7b97\u6cd5\u3002\"*\n\n### \u5728\u7ebf\u7b97\u6cd5\n***\n\u5229\u7528\u672c\u9898\u7684\u7279\u6b8a\u6027\uff0c\u6211\u4eec\u901a\u8fc7\u4f7f\u7528\u5757\u72b6\u94fe\u8868\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u65b0\u63d2\u5165\u7684\u6570\u4e8c\u5206\u540e\u63d2\u5165\u7136\u540e\u6bcf\u6b21\u8fd4\u56de\u4f4d\u7f6e\u5728\u4e2d\u95f4\u7684\u5143\u7d20\uff0c\u5c06\u5757\u5927\u5c0f\u8bbe\u7f6e\u4e3a $nlog_2n$ \u5373\u53ef\u5b9e\u73b0 $O(n\\sqrt{nlog_2n})$ \u7684\u590d\u6742\u5ea6\uff0c\u5e94\u8be5\u662f\u6ca1\u9519\u4e86\u3002\n\n\n### \u79bb\u7ebf\u7b97\u6cd5\n***\n\u76f8\u8f83\u4e8e\u5e73\u8861\u6811\uff0c\u5bf9\u9876\u5806\uff0c\u5206\u5757\u7684\u66b4\u529b\uff0c\u79bb\u7ebf\u7684\u505a\u6cd5\u66f4\u80fd\u4f53\u73b0\u51fa\u4e00\u79cd\u601d\u7ef4\u7684\u7f8e\u611f\u3002\u6211\u4eec\u901a\u8fc7\u9884\u5148\u5c06\u6240\u6709\u7684\u6570\u5b57\u5b58\u50a8\uff0c\u6807\u8bb0\u5176\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5c06\u4e00\u4e2a\u4e0e\u539f\u6570\u7ec4\u76f8\u540c\u7684\u6570\u7ec4\u6392\u5e8f\uff0c\u6784\u5efa\u4e00\u4e2a $A_n\\rightarrow POS_n$ \u7684\u4e00\u4e00\u6620\u5c04\uff0c\u5176\u4e2d $A_n$ \u8868\u793a\u539f\u5e8f\u5217\u4e2d\u7684\u7b2c $n$ \u4e2a\u5143\u7d20\uff0c\u800c $POS_n$ \u8868\u793a\u539f\u5e8f\u5217\u4e2d\u7b2c $n$ \u4e2a\u5143\u7d20\u5728\u6392\u5e8f\u540e\u7684\u5e8f\u5217 $\\{B_n\\}$ \u4e2d\u7684\u4f4d\u7f6e\uff0c\u5c06 $\\{B_n\\}$ \u6309\u7167\u6392\u5e8f\u540e\u7684\u987a\u5e8f\u8fde\u6210\u94fe\u8868\uff0c\u5373\u4ece\u94fe\u5934\u81f3\u7ed3\u5c3e\u5143\u7d20\u5927\u5c0f\u5355\u8c03\u9012\u589e\u3002\u6240\u4ee5 $POS_n$ \u5c31\u662f $A_n$ \u5728\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u6807\u53f7\u3002\n\n\u7136\u540e\u6211\u4eec\u5012\u5e8f\u505a\uff0c\u539f\u6570\u5217\u4e2d\u6bcf\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\u6211\u4eec\u5c31\u628a\u8fd9\u4e2a\u5143\u7d20\u4ece\u94fe\u8868\u4e2d\u5220\u53bb\uff0c\u800c\u4e14\u5982\u679c\u8fd9\u4e2a\u5143\u7d20\u5728\u94fe\u8868\u4e2d\u5728\u4e2d\u4f4d\u6570\u7684\u5143\u7d20\u7684\u5de6\u8fb9\u90a3\u4e48\u5c31\u628a\u4e2d\u4f4d\u6570\u7684\u6307\u9488\u5f80\u53f3\u79fb\uff0c\u5982\u679c\u5728\u53f3\u8fb9\u5c31\u5f80\u5de6\u79fb\uff0c\u4fdd\u8bc1\u6709\u4e00\u4e2a\u6307\u9488\u59cb\u7ec8\u6307\u5411\u4e2d\u4f4d\u6570\u6240\u5728\u7684\u94fe\u8868\u7684\u8282\u70b9\u3002\n\ncode: \u4ee3\u7801\u56e0\u4e3a\u6709\u8bfb\u4f18+\u6a21\u677f\u7684\u539f\u56e0\u7565\u957f\uff0c\u76f4\u63a5\u4eceusing namespace IO;\u4e4b\u540e\u770b\u8d77\u5373\u53ef\n\n```cpp\n//It's supposed to die.\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<ctime>\n#include<utility>\n#include<functional>\n#include<cmath>\n#include<vector>\n#include<assert.h>\nusing namespace std;\n#define reg register\n#define endfile fclose(stdin);fclose(stdout);\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef std::pair<int,int> pii;\ntypedef std::pair<ll,ll> pll;\nnamespace IO{\n    char buf[1<<15],*S,*T;\n    inline char gc(){\n        if (S==T){\n            T=(S=buf)+fread(buf,1,1<<15,stdin);\n            if (S==T)return EOF;\n        }\n        return *S++;\n    }\n    inline int read(){\n        reg int x;reg bool f;reg char c;\n        for(f=0;(c=gc())<'0'||c>'9';f=c=='-');\n        for(x=c^'0';(c=gc())>='0'&&c<='9';x=(x<<3)+(x<<1)+(c^'0'));\n        return f?-x:x;\n    }\n    inline ll readll(){\n        reg ll x;reg bool f;reg char c;\n        for(f=0;(c=gc())<'0'||c>'9';f=c=='-');\n        for(x=c^'0';(c=gc())>='0'&&c<='9';x=(x<<3)+(x<<1)+(c^'0'));\n        return f?-x:x;\n    }\n}\nusing namespace IO;\nconst int maxn = 1e6 + 10;\nint n, a[maxn], pos[maxn], mid, mov, cnt, ans[maxn];\npii b[maxn];\nstruct Node{\n    int pre, nxt, val;\n} List[maxn];\nvoid insert(int node, int val){\n    List[++cnt].val = val;\n    List[cnt].pre = node;\n    List[cnt].nxt = List[node].nxt;\n    List[List[node].nxt].pre = cnt;\n    List[node].nxt = cnt;\n}\nvoid erase(int node){\n    List[List[node].pre].nxt = List[node].nxt;\n    List[List[node].nxt].pre = List[node].pre;\n}\nbool cmp(pii u, pii v){\n    if(u.first == v.first)\n        return u.second < v.second;\n    return u.first < v.first;\n}\nint main(){\n    n = read();\n    if(!(n & 1))\n        n--;\n    mid = (n+1) >> 1;\n    for(int i = 1; i <= n ; i++)\n        b[i].first = a[i] = read(), b[i].second = i;\n    sort(b+1, b+1+n, cmp);\n    for(int i = 1; i <= n; i++){\n        insert(cnt, b[i].first);\n        pos[b[i].second] = cnt;\n    }\n    for(int i = n; i >= 1; i--){\n        if(i & 1){\n            if(mov > 0)\n                mid = List[mid].nxt;\n            if(mov < 0)\n                mid = List[mid].pre;\n            mov = 0;\n            ans[i] = List[mid].val;\n        }\n        if(pos[i] < mid)\n            mov++;\n        if(pos[i] > mid)\n            mov--;\n        erase(pos[i]);\n    }\n    for(int i = 1; i <= n; i++)\n        if(i & 1)\n            cout << ans[i] << endl;\n    return 0;\n}\n\n```\n",
        "postTime": 1554995446,
        "uid": 100514,
        "name": "\u5c0f\u9ed1AWM",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u81ea\u5df1\u6a21\u62df\u4e86\u597d\u4e45\u624d\u7ec8\u4e8e\u660e\u767d\u8be5\u600e\u4e48\u7528\u5806\u7684\u3002\u3002\u3002\u3002\u3002\u3002\n\n1.\u9996\u5148\uff0c\u4e2d\u4f4d\u6570\u7684\u5de6\u8fb9\u90fd\u5c0f\u4e8e\u8fd9\u4e2a\u4e2d\u4f4d\u6570\uff1b\n\n2.\u5176\u6b21\uff0c\u4e2d\u4f4d\u6570\u7684\u53f3\u8fb9\u90fd\u5927\u4e8e\u8fd9\u4e2a\u4e2d\u4f4d\u6570\uff1b\n\n3.\u4e2d\u4f4d\u6570\u7684\u53f3\u8fb9\u662f\u6709\u6b21\u5e8f\u4ece\u5c0f\u5f80\u5927\u6392\u7684\uff1b\n\n4.\u4e2d\u4f4d\u6570\u7684\u5de6\u8fb9\u662f\u6709\u6b21\u5e8f\u4ece\u5927\u5f80\u5c0f\u6392\u7684\u3002\n\n###\u4e8e\u662f\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u5806\u7684\u5e94\u7528\u4e86\uff1a\n\n- \u7528\u4e00\u4e2a\u5c0f\u6839\u5806\u6765\u5b58\u653e\u4e2d\u4f4d\u6570\u53f3\u8fb9\u7684\u4e00\u5768\u6570\uff0c\u5c0f\u6839\u5806\u4fdd\u8bc1\u4e86\u91cc\u9762\u7684\u6570\u662f\u7531\u5c0f\u5230\u5927\u7684\uff1b\n\n- \u7528\u4e00\u4e2a\u5927\u6839\u5806\u6765\u5b58\u653e\u4e2d\u4f4d\u6570\u5de6\u8fb9\u7684\u4e00\u5768\u6570\uff0c\u5927\u6839\u5806\u4fdd\u8bc1\u4e86\u91cc\u9762\u7684\u6570\u662f\u7531\u5927\u5230\u5c0f\u7684\uff1b\n\n- \u7528\u5927\u6839\u5806\u7684\u5806\u9876\u6765\u5b58\u653e\u4e2d\u4f4d\u6570\uff08\u5f53\u7136\u53ef\u4ee5\u7528\u5c0f\u6839\u5806\uff09\n\n\u63a5\u4e0b\u6765\u662f\u64cd\u4f5c\u4e0a\u7684\u95ee\u9898:\n\n\u56e0\u4e3a\u6c42\u6bcf\u6b21\u4e2d\u4f4d\u6570\u7684\u65f6\u5019\u4e2a\u6570\u4e00\u5b9a\u4e3a\u5947\u6570\uff0c\u6240\u4ee5\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5927\u6839\u5806\u7684\u6570\u8981\u6bd4\u5c0f\u6839\u5806\u7684\u6570\u591a1\uff08\u56e0\u4e3a\u591a\u4e86\u90a3\u4e2a\u4e2d\u4f4d\u6570\uff09\n\n\u6bcf\u6b21\u8bfb2\u4e2a\u6570\uff0c\u4e24\u4e2a\u6570\u5206\u522b\u8fdb\u884c\uff1a\u5982\u679c\u5b83\u6bd4\u4e0a\u4e00\u6b21\u7684\u4e2d\u4f4d\u6570\u5927\uff0c\u5c31\u585e\u5165\u5c0f\u6839\u5806\uff08\u4e3a\u4ec0\u4e48\uff1f\u601d\u8003\u4e00\u4e0b\uff09\uff1b\u5426\u5219\u5c31\u585e\u5165\u5927\u6839\u5806\uff1b\n\n\u5982\u679c\u5c0f\u6839\u5806\u7684\u6570\u91cf\u6bd4\u5927\u6839\u5806\u7684\u6570\u91cf-1\u8fd8\u8981\u5c11\uff0c\u90a3\u4e48\u5c31\u628a\u5927\u6839\u5806\u5806\u9876\u585e\u5230\u5c0f\u6839\u5806\u4e2d\u8fdb\u884c\u7ef4\u62a4\uff1b\n\n\u5982\u679c\u5c0f\u6839\u5806\u7684\u6570\u91cf\u6bd4\u5927\u6839\u5806\u7684\u6570\u91cf-1\u8fd8\u8981\u5927\uff0c\u90a3\u4e48\u5c31\u628a\u5c0f\u6839\u5806\u5806\u9876\u585e\u5230\u5927\u6839\u5806\u4e2d\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u5176\u4ed6\u7684\uff0c\u5c31\u6ca1\u6709\u4e86\u3002\n\n\u9644\u4e0a\u4ee3\u7801:\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<string>\n#include<cstring>\n#define oo 1000000000\nusing namespace std;\nint n;\nvoid exchange(int &x,int &y){ //\u4ea4\u6362\u51fd\u6570 \n    int t; t=x,x=y,y=t;\n}\nstruct Max_Heap{\n    int size,h[4000005];\n    void Max_Heapify(int i){\n        int l=i << 1;\n        int r=i << 1 | 1;\n        int largest;\n        if (l<=size && h[l]>h[i])\n            largest=l;\n        else\n            largest=i;\n        if (r<=size && h[r]>h[largest])\n            largest=r;\n        if (largest!=i){\n            exchange(h[i],h[largest]);\n            Max_Heapify(largest);\n        }\n    }\n    void Heap_Inc(int i,int key){\n        h[i]=key;\n        while (i>1 && h[i >> 1]<h[i]){\n            exchange(h[i],h[i >> 1]);\n            i>>=1;\n        }\n    }\n    int top(){\n        return h[1];\n    }\n    void pop(){\n        h[1]=h[size];\n        size--;\n        Max_Heapify(1);\n    }\n    void push(int key){\n        size++;\n        h[size]=key;\n        Heap_Inc(size,key);\n    }\n} max_h; //\u5927\u6839\u5806\u7684\u64cd\u4f5c \nstruct Min_Heap{\n    int size,h[4000005];\n    void Min_Heapify(int i){\n        int l=i << 1;\n        int r=i << 1 | 1;\n        int smallest;\n        if (l<=size && h[l]<h[i])\n            smallest=l;\n        else\n            smallest=i;\n        if (r<=size && h[r]<h[smallest])\n            smallest=r;\n        if (smallest!=i){\n            exchange(h[i],h[smallest]);\n            Min_Heapify(smallest);\n        }\n    }\n    void Heap_Inc(int i,int key){\n        h[i]=key;\n        while (i>1 && h[i >> 1]>h[i]){\n            exchange(h[i],h[i >> 1]);\n            i>>=1;\n        }\n    }\n    int top(){\n        return h[1];\n    }\n    void pop(){\n        h[1]=h[size];\n        size--;\n        Min_Heapify(1);\n    }\n    void push(int key){\n        size++;\n        h[size]=key;\n        Heap_Inc(size,key);\n    }\n} min_h; //\u5c0f\u6839\u5806\u7684\u64cd\u4f5c \nint main()\n{\n    scanf(\"%d\",&n);\n    int x; scanf(\"%d\",&x);\n    max_h.push(x);   //\u628a\u7b2c\u4e00\u4e2a\u6570\u8bfb\u5165\u5e76\u8f93\u51fa\uff0c\u4e0d\u89e3\u91ca \n    printf(\"%d\\n\",x);\n    for (int i=1; i << 1 < n; i++){\n        int mid=max_h.top();\n        int v1,v2;\n        scanf(\"%d%d\",&v1,&v2); //\u4e00\u6b21\u8bfb\u4e24\u4e2a \n        if (v1>mid) \n            min_h.push(v1); else\n            max_h.push(v1);\n        if (v2>mid)\n            min_h.push(v2); else\n            max_h.push(v2);\n        if (min_h.size>max_h.size-1){\n            max_h.push(min_h.top());\n            min_h.pop();\n        }\n        if (min_h.size<max_h.size-1){\n            min_h.push(max_h.top());\n            max_h.pop();\n        }  //\u6211\u5c31\u662f\u559c\u6b22\u628a\u624b\u5199\u5806\u6253\u6210STL\u7684\u6837\u5b50 \n        printf(\"%dAAAAA\\n\",max_h.top()); //\u8f93\u51fa\u7b54\u6848 \n    }\n    return 0;\n}\n\n```",
        "postTime": 1511679274,
        "uid": 14908,
        "name": "Jack_Homes_Huang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u6b64\u9898\u65b9\u6cd5\u5c42\u51fa\u4e0d\u7a77\uff0c\u8fd9\u91cc\u8bb2\u89e3\u4e00\u4e0b\u6811\u72b6\u6570\u7ec4\u7684\n\n\u9996\u5148ai<=10^9\uff0c\u60f3\u5230\u79bb\u6563\u5316\n\n\u4e0d\u8fc7\u79bb\u6563\u597d\u4ee5\u540e\uff0c\u539f\u6570\u4e0e\u65b0\u6570\u9700\u8981\u5bf9\u5e94\uff0c\u56e0\u4e3a\u6700\u540e\u8fd8\u8981\u8f93\u51fa\u539f\u6570\n\n\u63a5\u4e0b\u6765\u662f\u6811\u72b6\u6570\u7ec4\u7684\u533a\u95f4\u67e5\u8be2\n\n\u600e\u4e48\u67e5\u8be2\uff1f\n\n\u6211\u4eec\u4ee4c[i]\u4e3a\u5f53\u524d\u5e8f\u5217\u4e2di\u4e3a\u7b2c\u51e0\u5c0f\n\n\u6bd4\u5982\u5e8f\u5217\uff1a1 3 5 7 9\n\nc\u6570\u7ec4\u5c31\u4e3a\uff1a1 1 2 2 3 3 4 4 5\n\n\u6ca1\u6709\u7684\u6570\u8ddf\u524d\u9762\u4e00\u81f4\uff0c\u6240\u4ee5\u6bcf\u6b21\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u533a\u95f4\u67e5\u627e\u7b2c(i+1)/2\u5c0f\u6570\n\n\u5373\u4e3a\u67e5\u627e\uff1ac[i]=(i+1)/2\uff0ci\u6700\u5c0f\n\n\u65b9\u6cd5\uff1f\n\n\u4e8c\u5206\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\nvar\n    a,b,c,number,print:array[0..1000000] of int64;\n    p,n,i:longint;\nfunction lowbit(x:int64):int64;\nbegin\n    exit(x and -x);\nend;\nprocedure add(x:int64);\nbegin\n    while x<=n do\n        begin\n            inc(c[x]);\n            inc(x,lowbit(x));\n        end;\nend;\nfunction getsum(x:int64):int64;\nbegin\n    getsum:=0;\n    while x>0 do\n        begin\n            inc(getsum,c[x]);\n            dec(x,lowbit(x));\n        end;\nend;\nfunction find(x:int64):int64;//\u4e8c\u5206\u533a\u95f4\u67e5\u8be2\nvar\n    l,r,mid:int64;\nbegin\n    l:=0;\n    r:=n;\n    while l<=r do\n        begin\n            mid:=(l+r) div 2;\n            if getsum(mid)>=x then\n                r:=mid-1 else\n                begin\n                    find:=mid+1;\n                    l:=mid+1;\n                end;\n        end;\nend;\nprocedure swap(var x,y:int64);\nvar\n    t:int64;\nbegin\n    t:=x;\n    x:=y;\n    y:=t;\nend;\nprocedure sort(l,r:longint);\nvar\n    i,j,mid:longint;\nbegin\n    i:=l;\n    j:=r;\n    mid:=a[(l+r) div 2];\n    repeat\n        while a[i]<mid do\n            inc(i);\n        while a[j]>mid do\n            dec(j);\n        if i<=j then\n            begin\n                swap(a[i],a[j]);\n                swap(number[i],number[j]);\n                inc(i);\n                dec(j);\n            end;\n    until i>j;\n    if l<j then\n        sort(l,j);\n    if i<r then\n        sort(i,r);\nend;\nbegin\n    readln(n);\n    for i:=1 to n do\n        begin\n            read(a[i]);\n            number[i]:=i;\n        end;\n    sort(1,n);\n    a[0]:=a[i]-1;\n    for i:=1 to n do\n        if a[i]<>a[i-1] then //\u79bb\u6563\n            begin\n                inc(p);\n                print[p]:=a[i]; //\u5bf9\u5e94\uff0c\u7528\u4e8e\u8f93\u51fa\n                b[number[i]]:=p;\n            end else\n            b[number[i]]:=p;\n    for i:=1 to n do\n        begin\n            add(b[i]); //\u66f4\u6539\uff0c\u5728\u6240\u6709\u6bd4\u81ea\u5df1\u5927\u7684\u6570\u4e2d+1\n            if odd(i) then //i\u4e3a\u5947\u6570\u65f6\uff0c\u8981\u8f93\u51fa\u4e86\n                writeln(print[find((i+1) div 2)]); //find\u67e5\u627e\u7684\u4e0b\u6807\n        end;\nend.\n\n```",
        "postTime": 1508245764,
        "uid": 51719,
        "name": "ModestCoder_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u770b\u5b8c\u9898\u76ee\uff0c\u533a\u95f4\u4e2d\u4f4d\u6570\uff0c\n\n\u65e2\u7136\u662f\u533a\u95f4\u4e2d\u4f4d\u6570\uff0c\u5c31\u53ef\u4ee5\u5199\u533a\u95f4\u7b2ck\u5927\n\n###\u4e3b\u5e2d\u6811\u95ea\u4eae\u767b\u573a###\n\n\u6240\u8c13\u4e3b\u5e2d\u6811\uff0c\u5c31\u662f\u5bf9\u4e8e\u952e\u503c\uff0c[1,1],[1,2][1,3]\u2026\u2026\u6bcf\u4e2a\u533a\u95f4\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u518d\u7528\u524d\u7f00\u548c\u6c42\u8981\u6c42\u533a\u95f4\u51fa\u73b0\u4e2a\u6570\uff0c\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6309\u666e\u901a\u7b2ck\u5927\u6c42\u4e86\n\n[1,2\\*k-1]\u7684\u4e2d\u4f4d\u6570\uff0c\u4e0d\u5c31\u662f\u7b2ck\u5927\u5417\uff1f\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nstruct Node{\n    int a,b,rs,ls,sum;\n}tr[2000010];\nint a[100010],b[100010];\nint rt[100010],pos,cnt;\nvoid Build(int &node,int a,int b)\n{\n    node=++cnt;\n    tr[node].a=a;\n    tr[node].b=b;\n    if(a==b)return;\n    int mid=(a+b)>>1;\n    Build(tr[node].ls,a,mid);\n    Build(tr[node].rs,mid+1,b);\n}\nvoid Insert(int pre,int &node)\n{\n    node=++cnt;\n    tr[node].ls=tr[pre].ls;\n    tr[node].rs=tr[pre].rs;\n    tr[node].a=tr[pre].a;\n    tr[node].b=tr[pre].b;\n    tr[node].sum=tr[pre].sum+1;\n    if(tr[node].a==tr[node].b)return;\n    int mid=(tr[node].a+tr[node].b)>>1;\n    if(mid>=pos)Insert(tr[pre].ls,tr[node].ls);\n    else Insert(tr[pre].rs,tr[node].rs);\n}\nint Query(int pre,int node,int k)\n{\n    if(tr[node].ls==tr[node].rs)return b[tr[node].a];\n    int cmp=tr[tr[node].ls].sum-tr[tr[pre].ls].sum;\n    if(cmp>=k)return Query(tr[pre].ls,tr[node].ls,k);\n    else return Query(tr[pre].rs,tr[node].rs,k-cmp);\n}\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;b[i]=a[i],i++)\n        scanf(\"%d\",&a[i]);\n    sort(b+1,b+n+1);\n    Build(rt[0],1,n);\n    for(int i=1;i<=n;i++)\n    {\n        pos=lower_bound(b+1,b+n+1,a[i])-b;\n        Insert(rt[i-1],rt[i]);\n    } \n    for(int i=1;i<=(n+1)/2;i++)\n    {\n        printf(\"%d\\n\",Query(rt[0],rt[i*2-1],i));\n    }\n    return 0;\n}\n```",
        "postTime": 1489589355,
        "uid": 10291,
        "name": "fighter_OI",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u6811\u72b6\u6570\u7ec4\u7ec3\u624b\u7684\u597d\u9898\uff0c\u987a\u4fbf\u7ec3\u4e60\u4e86\u4e00\u4e0b\u4e8c\u5206\uff0c\u79bb\u6563\u5316\uff0c\uff0c\uff0c\uff0c\uff0c\uff0c\n\n\u9996\u5148\u8fd9\u4e00\u9898\u8981\u6c42\u6211\u4eec\u627e\u4e2d\u4f4d\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4c[x]\u5b58\u50a8\u5f53\u524d\n\nx-x and -x+1-------x\u8fd9\u4e2a\u533a\u95f4\u4e2d\u6570\u5b57\u7684\u4e2a\u6570\n\n\u5f53\u7136\u4e4b\u524d\u8981\u79bb\u6563\u5316\u3002\n\n\u7136\u540e\u6211\u4eec\u4e8c\u5206\u4e00\u4e2a\u6570\uff0c\u5224\u65ad\u6bd4\u8fd9\u4e2a\u6570\u5c0f\u7684\u6570\u7684\u4e2a\u6570\u662f\u5426\u7b49\u4e8e\u6bd4\u8fd9\u4e2a\u6570\u5927\u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u8fd9\u6837\u53ef\u4ee5\u505a\u5230O(n\\*log(n)\\*log(n))\u4e0d\u4f1a\u8d85\u65f6\u3002\n\n\n\n\n\n```cpp\nvar a,b,c,e:array[0..270000]of int64;\ni,j,k,m,n,p,l,r,mid:longint;\nans,wer:int64;\nprocedure sort(l,r: longint);\nvar\ni,j,x,y: longint;\nbegin\n  i:=l;\n  j:=r;\n  x:=a[(l+r) div 2];\n  repeat\n    while a[i]>x do inc(i);\n    while x>a[j] do dec(j);\n    if not(i>j) then\n    begin\n      y:=a[i];\n      a[i]:=a[j];\n      a[j]:=y;\n      y:=b[i];\n      b[i]:=b[j];\n      b[j]:=y;\n      inc(i);\n      j:=j-1;\n    end;\n  until i>j;\n  if l<j then sort(l,j);\n  if i<r then sort(i,r);\nend;\nfunction six(x:longint):longint;\nbegin\n  exit(x and -x);\nend;\nprocedure up(x:longint);\nbegin\n  if x>n then exit;\n  c[x]:=c[x]+1;\n  up(x+six(x));\nend;\nprocedure de(x:longint);\nvar a:longint;\nbegin\n  a:=1;\n  while a<=x do a:=a*2;\n  a:=a div 2;\n  ans:=ans+c[a+k];  //writeln(a+k);\n  k:=a+k;\n  x:=x-a;\n  if x=0 then exit else de(x);\nend;\nbegin\n  read(n);\n  for i:=1 to n do read(a[i]);  p:=a[1];\n  for i:=1 to n do b[i]:=i;\n  sort(1,n);\n  for i:=1 to n do e[n+1-i]:=a[i];\n  for i:=1 to n do a[b[i]]:=n+1-i;\n  ans:=0;\n  for i:=1 to n do\n  begin\n    k:=0;ans:=0;\n    up(a[i]);\n    if i mod 2=1 then\n    begin\n      l:=0;r:=250000;ans:=0;k:=0;\n      while l<r do\n      begin\n        ans:=0;k:=0;\n        mid:=(l+r)div 2;\n        de(mid);\n     //   if ans<i div 2+1 then l:=mid+1 else r:=mid;\n      end;\n      writeln(e[l]) ;\n    end;\n  end;\n  k:=0; ans:=0;\n  //write(a[5]);\n // write(e[5]);\nend.\n\n```",
        "postTime": 1476192577,
        "uid": 6063,
        "name": "NephrenRuq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "pascal\u7248\u2014\u2014\u7ebf\u6bb5\u6811\uff08\u52a0\u5feb\u6392\uff0c\u52a0\u4e8c\u5206\u67e5\u627e\uff09\uff1b\n\n\u7531\u4e8e\u6570\u636e\u4e3a10^9\uff1b\u6545\u4e0d\u80fd\u7528\u7ebf\u6bb5\u6811\u8868\u793a1\u523010^9\u5185\u7684\u6570\u7684\u6709\u65e0\uff08\u6bd5\u7adf\u6c42\u4e2d\u4f4d\u6570\u4e0d\u6ee1\u8db3\u88f8\u7684\u7ebf\u6bb5\u6811\u6761\u4ef6\u2014\u2014\u533a\u95f4\u52a0\u6cd5\uff09\uff1b\n\n\u53ef\u4ee5\u5148\u4fdd\u7559\u539f\u6570\u5217\uff0c\u590d\u5236\u4e00\u904d\u8fdb\u884c\u5feb\u6392\uff08\u8bb0\u5f97\u8981\u53bb\u91cd\uff09\uff1b\n\n\u5728\u4ece\u539f\u6570\u5217\u4e2d1->n\u4e2d\u5206\u522b\u60f3\u7ebf\u6bb5\u6811\u63d2\u5165\u6570\u5b57\uff08\u6b64\u65f6\u7ebf\u6bb5\u6811\u5e95\u5c42\uff08\u8be5\u6570\u5b57\u5728\u5feb\u6392\u4e2d\u7684\u4f4d\u7f6e\uff09\u8bb0\u5f55\u8be5\u6570\u5b57\u51fa\u73b0\u6b21\u6570\uff09\uff1b\n\n\u7531\u6b64\u6ee1\u8db3\u533a\u95f4\u52a0\u6cd5\uff1b\n\n\n\n```cpp\ntype qwe=record\n    l,r,num:longint;\nend;\nvar tree:array[1..400000] of qwe;//\u7ebf\u6bb5\u6811\uff1b\n    line1,line2,line3:array[1..100000] of longint;//\u5feb\u6392\u6570\u7ec4\uff0c\u53bb\u91cd\u6570\u7ec4\uff08line2\u4e3a\u6700\u7ec8\u6570\u7ec4\uff09\uff08\u7a7a\u95f4\u6709\u70b9\u6d6a\u8d39\uff0c\u4f46\u7b80\u5355\u6613\u61c2\uff09\uff1b\n    n,m,j,k,l,i,b,c,l1,l2,l3:longint;\nprocedure qsort(l,r:longint);//\u5feb\u6392\uff1b\nvar i,j,k,mid:longint;\nbegin\n  i:=l;\n  j:=r;\n  mid:=line2[(l+r) div 2];\n  repeat\n    while line2[i]<mid do inc(i);\n    while line2[j]>mid do j:=j-1;\n    if i<=j then\n       begin\n         k:=line2[i];\n         line2[i]:=line2[j];\n         line2[j]:=k;\n         inc(i);\n         j:=j-1;\n       end;\n  until i>j;\n  if l<j then qsort(l,j);\n  if i<r then qsort(i,r);\nend;\nprocedure bt(p,l,r:longint);//\u5efa\u6811\uff1b\n      var mid:longint;\nbegin\n   tree[p].l:=l;\n   tree[p].r:=r;\n   if tree[p].l=tree[p].r then exit;\n   mid:=(l+r) div 2;\n   bt(2*p,l,mid);\n   bt(2*p+1,mid+1,r);\nend;\nfunction find(x:longint):longint;//\u4e8c\u5206\u67e5\u627e\uff1b\n     var r,i,j,mid,l:longint;\nbegin\n  r:=l2;\n  l:=1;\n  while l<r do\n  begin\n    mid:=(l+r)div 2;\n    if line2[mid]>=x then r:=mid else l:=mid+1;\n  end;\n  exit(l);\nend;\nprocedure change(p,x:longint);//\u63d2\u5165\u6570\u5b57\uff1b\n      var i,j,mid,l:longint;\nbegin\n  if tree[p].l=tree[p].r then\n    begin\n      inc(tree[p].num);\n      exit;\n    end;\n    inc(tree[p].num);\n  mid:=(tree[p].l+tree[p].r) div 2;\n  if mid>=x then change(2*p,x)\n  else change(2*p+1,x);\nend;\nfunction sort(p,x:longint):longint;//\u67e5\u627e\u4e2d\u4f4d\u6570\uff1b\n     var mid,i,j:longint;\nbegin\n  if tree[p].l=tree[p].r then exit(tree[p].l);\n  if tree[2*p].num>=x then exit(sort(2*p,x))\n  else exit(sort(2*p+1,x-tree[2*p].num));\nend;\nbegin\n    readln(n);\n    for i:=1 to n do read(line1[i]);\n    for i:=1 to n do line2[i]:=line1[i];\n    qsort(1,n);\n    line3[1]:=line2[1];\n    k:=1;\n    for i:=2 to n do//\u53bb\u91cd\uff1b\n        if line2[i]<>line2[i-1] then\n               begin\n                 inc(k);\n                 line3[k]:=line2[i];\n               end;\n    l2:=k;\n    for i:=1 to n do line2[i]:=line3[i];\n    bt(1,1,l2);\n    for i:=1 to n do\n    begin\n     k:=find(line1[i]);\n     change(1,k);\n     if i mod 2=1 then\n       begin\n         k:=sort(1,(i div 2)+1);\n         writeln(line2[k]);\n       end;\n    end;\nend.\n```",
        "postTime": 1471003699,
        "uid": 13479,
        "name": "\u667a\u4e4b\u661f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u6bcf\u63d2\u5165\u4e24\u4e2a\u5143\u7d20\u5c31\u8f93\u51fa\u4e00\u6b21\u4e2d\u4f4d\u6570\u3002\u5982\u679c\u80fd\u7ef4\u62a4\u6570\u7ec4\u5355\u8c03\u9012\u589e\u7684\u8bdd\uff0c\u5219\u6bcf\u6b21\u8f93\u51fa\u7684\u6570\u8981\u4e48\u539f\u6765\u7684\u6570\u76f8\u7b49\uff08\u63d2\u5165\u4e00\u4e2a\u5927\u6570\u3001\u4e00\u4e2a\u5c0f\u6570\uff09\uff0c\u8981\u4e48\u662f\u5927\u4e00\u53f7\u7684\u6570\uff08\u63d2\u5165\u4e24\u4e2a\u5927\u6570\uff09\uff0c\u8981\u4e48\u5c0f\u4e00\u53f7\u7684\u6570\uff08\u63d2\u5165\u4e24\u4e2a\u5c0f\u6570\uff09\u3002\n\u4f7f\u7528\u7c7b\u4f3c\u63d2\u5165\u6392\u5e8f\u7684\u65b9\u6cd5\u7ef4\u62a4\u6570\u7ec4\u7684\u5355\u8c03\u9012\u589e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6709\u70b9\u9ad8\u3002\u521a\u597dSTL\u4e2d\u6709\u4e2a\u6570\u636e\u7ed3\u6784\u6ee1\u8db3\u6570\u5217\u6709\u5e8f\uff0c\u4e14\u652f\u6301\u67e5\u627e\u5927\u4e00\u53f7\u6216\u5c0f\u4e00\u53f7\u7684\u5143\u7d20\u3002\u90a3\u5c31\u662fset\u3002\nset\u63d2\u5165\u548c\u67e5\u627e\u65f6\u95f4\u90fd\u662fO(logn)\u3002\n\u4e0a\u4ee3\u7801\n```cpp\n#include <iostream>\n#include <set>\nusing namespace std;\nmultiset<int> st;\nmultiset<int>::iterator it;\n\nint main(){\n\tint n,t,k=0;\n\tcin>>n;\n\tcin>>t;\n\tst.insert(t);\n\tit = st.begin();\n\tcout<<t<<endl;\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tcin>>t;\n\t\tst.insert(t);\n\t\tif(t<*it)\n\t\t\t--k;\n\t\telse\n\t\t\t++k;\n\t\tif(i&1)\n\t\t{\n\t\t\t//\u63d2\u5165\u4e24\u4e2a\u5927\u7684\uff0c\u5c31\u5f80\u540e\u4e00\u4e2a \n\t\t\tif(k>0)\tit++;\n\t\t\t//\u63d2\u5165\u4e24\u4e2a\u5c0f\u7684\uff0c\u5c31\u5f80\u524d\u4e00\u4e2a \n\t\t\telse if(k<0) it--;\n\t\t\tcout<<*it<<endl;\n\t\t\tk = 0;\n\t\t}\n\t}\n}\n```\n",
        "postTime": 1572175009,
        "uid": 156042,
        "name": "\u738b\u534a\u4ed9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\t\t\u770b\u4e86\u6b64\u9898,\u53d1\u73b0\u662f\u6c42\u4e2d\u4f4d\u6570,\u81ea\u7136\u800c\u7136\u7684\u60f3\u5230\u4e86\u6c42kth\n\n\t\t\u6c42kth\u6709\u591a\u79cd,\u6211\u7528\u7684\u662f\u6743\u503c\u7ebf\u6bb5\u6811,\u5373\u8bb0\u5f55x\u7684\u4e2a\u6570,\u4f46,\u6211\u4eec\u770b\u9898\uff0c\u53d1\u73b0a[i]\u53ef\u4ee5\u9ad8\u8fbe1e9,\u4e00\u4e2a\u6570\u7ec4\u662f\u5f00\u4e0d\u5b8c\u7684,\u4e0d\u8fc7\u4e07\u5e78\u7684\u662fn\u53ea\u5230\u4e861e5,\u800c\u6c42kth\u53ea\u9700\u8981\u77e5\u9053\u5927\u5c0f\u5173\u7cfb\u5c31\u884c,\u4e0d\u9700\u8981\u77e5\u9053\u5177\u4f53\u7684\u503c,\u6240\u4ee5,\u6211\u4eec\u53ef\u4ee5\u7528\u79bb\u6563\u5316\u6765\u641e\u5b9a\u5b83\uff01\n\n\t\t\u8fd9\u91cc\u8bf4\u4e00\u4e0bstable_sort,\u5b83\u5176\u5b9e\u8ddfsort\u5dee\u4e0d\u591a,\u4e0d\u8fc7\u533a\u522b\u5728\u4e8e\u76f8\u540c\u5143\u7d20sort\u540e\u7684\u503c\u662f\u4e00\u6837\u7684\uff01\u6240\u4ee5stable_sort\u6781\u9002\u5408\u7528\u4e8e\u79bb\u6563\u5316\n\n\t\t\u90a3\u4e48\u95ee\u9898\u6765\u4e86,\u5047\u5982\u6211\u4eec\u7528\u79bb\u7ebf\u7b97\u6cd5,\u5404\u79cd\u5224\u65ad,\u9a9a\u64cd\u4f5c,\u773c\u82b1\u7f2d\u4e71,\u672c\u849f\u84bb\u7684\u5185\u5fc3qwq\n\n\t\t\u6240\u4ee5,\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5728\u7ebf\u7b97\u6cd5\uff01\n\n\t\t\u6211\u4eec\u52a8\u6001\u5c06\u6b64\u65f6\u7684a[i] (\u79bb\u6563\u5316\u540e) \u7684\u4e2a\u6570+1,\u7136\u540e\u6bcf\u5230i\u4e3a\u5947\u6570\u65f6\u6211\u4eec\u5c31\u6c42\u51fa\u7684(i+1)/2\u5927\u7684\u6570\u5373\u53ef\u4e86~\n        \n        \u4ee5\u4e0b\u662f\u4ee3\u7801:\n        \n        #include<bits/stdc++.h>//\u79bb\u6563\u5316+\u6743\u503c\u7ebf\u6bb5\u6811\u6c42kth \n\t\tusing namespace std;\n        const int N=1e5+1;\n        long long a[N];\n        long long e[N],b[N];\n        int c[N];\n        int d[N<<2];\n        inline long long read(){\n            long long X=0,w=0; char ch=0;\n            while(!isdigit(ch)) {w|=ch=='-';ch=getchar();}\n            while(isdigit(ch)) X=(X<<3)+(X<<1)+(ch^48),ch=getchar();\n            return w?-X:X;\n        }//\u5feb\u8bfb \n        inline bool kk(int x,int y){\n            return a[x]<a[y];\n        }\n        inline void up(int now,int l,int r,int x){\n            d[now]++;//\u8303\u56f4\u4e2d\u6709x\u7684\u90fd\u52a0\u4e00,\u4e0d\u7528\u5de6\u513f\u5b50\u52a0\u53f3\u513f\u5b50\u90a3\u4e48\u9ebb\u70e6~ \n            if(l==r){\n                return;\n            }\n            int mid=((l+r)>>1);\n            if(x<=mid){\n                up(now<<1,l,mid,x);//\u5411\u5de6\u67e5\u627e \n                return;\n            }\n            up(now<<1|1,mid+1,r,x);//\u5411\u53f3\u67e5\u627e \n        }\n        inline int kth(int now,int l,int r,int x){\n            if(l==r){\n                return l;\n            }\n            int ls=now*2;\n            int mid=((l+r)>>1);\n            if(d[ls]>=x){//\u5982\u679c\u524d\u9762\u7684\u6570\u7684\u4e2a\u6570\u5927\u4e8ex \n                return kth(ls,l,mid,x);//\u5411\u524d\u641c \n            }\n            return kth(ls|1,mid+1,r,x-d[ls]);//\u6ce8\u610f\u8fd9\u91cc\u662fx-d[ls],\u56e0\u4e3a\u524d\u534a\u6bb5\u6709d[ls]\u4e2a\u6570,\u90a3\u4e48,kth\u5728\u540e\u534a\u6bb5\u7684\u6392\u540d\u5e94\u4e3ax-d[ls]\n        }\n        int main(){\n            int n;\n            n=read();\n            long long x;\n            for(int i=1;i<=n;++i){\n                a[i]=read();\n                e[i]=a[i];//\u8bb0\u5f55\u5b58\u503c \n                c[i]=i;//\u7528\u4e8e\u4e4b\u540e\u79bb\u6563\u5316 \n            }\n            stable_sort(c+1,c+n+1,kk);//stable\u6392\u5e8f \n            for(int i=1;i<=n;++i){\n                a[c[i]]=i;//\u79bb\u6563\u5316\u503c,\u79bb\u6563\u5316\u540ea[i]\u8868\u793a\u539f\u6765\u7b2ci\u4e2a\u6570\u7b2ca[i]\u5927\n            }\n            for(int i=1;i<=n;++i){\n                b[a[i]]=e[i];//\u8bb0\u5f55\u503c,\u7528\u4e8e\u8f93\u51fa \n            }\n            for(int i=1;i<=n;++i){\n                up(1,1,1e5,a[i]);//a[i]\u52a0\u4e00 \n                if(i%2){\n                    int zhong=(i+1)>>1;\n                    printf(\"%lld\\n\",b[kth(1,1,1e5,zhong)]);\n                } \n            }\n            return 0;\n        }\n",
        "postTime": 1532426224,
        "uid": 71458,
        "name": "a13518354766",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u7ef4\u62a4\u4e00\u4e2a\u6700\u5927\u5806\u548c\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u4f7f\u5f97\u6700\u5927\u5806\u7684\u6700\u5927\u5143\u7d20\u603b\u5c0f\u4e8e\u7b49\u4e8e\u6700\u5c0f\u5806\u7684\u6700\u5c0f\u5143\u7d20\uff0c\u5e76\u4e14\u6700\u5927\u5806\u5143\u7d20\u4e2a\u6570\u603b\u662f\u6bd4\u6700\u5c0f\u5806\u5143\u7d20\u4e2a\u6570\u5c111\u3002\u5f53\u6709\u65b0\u5143\u7d20\u65f6\uff0c\u603b\u662f\u628a\u6bd4\u6700\u5c0f\u5806\u6700\u5c0f\u5143\u7d20\u5c0f\u7684\u5143\u7d20\u52a0\u5165\u6700\u5927\u5806\uff0c\u628a\u6bd4\u6700\u5c0f\u5806\u6700\u5c0f\u5143\u7d20\u5927\u7684\u5143\u7d20\u52a0\u5165\u6700\u5927\u5806\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u540e\u6700\u5c0f\u5806\u7684\u6700\u5c0f\u5143\u7d20\u5c31\u662f\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570\u3002\n\n\u672c\u9898\u4e2d\u5143\u7d20\u6570\u91cf\u90fd\u662f\u5355\u6570\uff0c\u5143\u7d20\u4e2a\u6570\u662f\u53cc\u6570\u7684\u60c5\u51b5\uff0c\u53ea\u9700\u4f7f\u5f97\u6700\u5927\u5806\u5143\u7d20\u4e2a\u6570\u548c\u6700\u5c0f\u5806\u5143\u7d20\u4e2a\u6570\u76f8\u7b49\u3002\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nint n,a1;\npriority_queue<int,vector<int> ,greater<int> >minheap;\npriority_queue<int>maxheap;\nint main()\n{\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&a1);\n    printf(\"%d\\n\",a1);\n    minheap.push(a1);\n    for(int i=1;i<=(n-1)/2;i++)\n    {\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        if(a<minheap.top())\n        {\n            maxheap.push(a);\n        }\n        else\n        {\n            minheap.push(a);\n        }\n        if(b<minheap.top())\n        {\n            maxheap.push(b);\n        }\n        else\n        {\n            minheap.push(b);\n        }\n        while(maxheap.size()>=minheap.size())\n        {\n            minheap.push(maxheap.top());\n            maxheap.pop();\n        }\n        while(maxheap.size()<minheap.size()-1)\n        {\n            maxheap.push(minheap.top());\n            minheap.pop();\n        }\n        printf(\"%d\\n\",minheap.top());\n    }\n    return 0;\n}\n```",
        "postTime": 1508327846,
        "uid": 19250,
        "name": "\u575a\u51b3\u6740\u6bd22008",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u600e\u4e48\u6ca1\u4eba\u7528\u4e3b\u5e2d\u6811\u5462\uff1f\u8fd9\u660e\u663e\u662f\u533a\u95f4\u7b2cK\u5927\u95ee\u9898\uff0c\u5178\u578b\u7684\u4e3b\u5e2d\u6811\u677f\u5b50\u554a\u3002\n\n\u8bfb\u5165\u6bcf\u4e2a\u6570\u540e\u79bb\u6563\u5316\u5efa\u6811\uff0c\u5f53\u5efa\u5230\u5947\u6570\u4e2a\u65f6\u8f93\u51fa\u4e00\u6b21\u8be2\u95ee\u533a\u95f4\u7b2ck\u5c0f\u3010k\u4e3a\u5f53\u524d\u5df2\u5efa\u70b9\u6570\u7684\u4e00\u534a+1\u3011\n\n\u5c31\u662f\u4e3b\u5e2d\u6811\u5450\u3002\u4e0d\u8fc7\u6570\u7ec4\u522b\u5f00\u5c0f\u4e86\uff0c5\\*10^6\u591f\u4e86\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int maxn=100005,INF=200000000;\ninline int read()\n{\n    int out=0,flag=1;char c=getchar();\n    while(c<48||c>57) {if(c=='-') flag=-1;c=getchar();}\n    while(c>=48&&c<=57) {out=out*10+c-48;c=getchar();}\n    return out*flag;\n}\nint A[maxn],B[maxn],num[maxn],numi=0,h[maxn],N;\nclass node{\n```\npublic:\n\n\n\n\n\n```cpp\n        int l,r,sl,sr,sum;\n}e[50*maxn];\nint root[maxn],pos,siz=0;\nvoid build(int& u,int l,int r){\n    u=++siz;\n    e[u].l=l;\n    e[u].r=r;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    build(e[u].sl,l,mid);\n    build(e[u].sr,mid+1,r);\n}\nvoid insert(int pre,int& u){\n    u=++siz;\n    e[u]=e[pre];\n    e[u].sum++;\n    if(e[u].l==e[u].r) return;\n    int mid=(e[u].l+e[u].r)>>1;\n    if(pos<=mid) insert(e[pre].sl,e[u].sl);\n    else insert(e[pre].sr,e[u].sr);\n}\nint Query(int pre,int u,int k){\n    if(e[u].l==e[u].r) return num[e[u].l];\n    int sum=e[e[u].sl].sum-e[e[pre].sl].sum;\n    if(k<=sum) return Query(e[pre].sl,e[u].sl,k);\n    else return Query(e[pre].sr,e[u].sr,k-sum);\n}\nint main()\n{\n    N=read();\n    for(int i=1;i<=N;i++) B[i]=A[i]=read();\n    sort(B+1,B+1+N);\n    B[0]=-1;\n    for(int i=1;i<=N;i++){\n        if(B[i]!=B[i-1]) numi++;\n        num[numi]=B[i];\n        h[i]=numi;\n    }\n    build(root[0],1,N);\n    for(int i=1;i<=N;i++){\n        pos=h[lower_bound(B+1,B+1+N,A[i])-B];\n        insert(root[i-1],root[i]);\n        if(i&1) printf(\"%d\\n\",Query(root[0],root[i],(i>>1)+1));\n    }\n    return 0;\n}\n\n```",
        "postTime": 1500559169,
        "uid": 32842,
        "name": "Mychael",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u6211\u7ed9\u5927\u5bb6\u63d0\u4f9b\u4e00\u79cd $vector$ \u7684\u505a\u6cd5\uff0c\n\n\u5148\u4e0a\u4ee3\u7801\u4e3a\u656c\uff1a\n\n```cpp\n#include <vector>\n#include <stdio.h>\n#include <iostream>\nusing namespace std;\nvector <int> a;\nint main(void)\n{\n\tint n,F,K=0; cin >> n;\n\tfor(int i=1;i<=n;i++)\n\t{\tcin >> F;\n\t\ta.insert(lower_bound(a.begin(),a.end(),F),F);\n\t\tif(!(i&1)) continue;\n\t\tcout << a[K++] << endl;\n\t}\n\treturn 0;\n}\n```\n\n\u5176\u4e2d\u5229\u7528\u4e86 $vector$ \u4e2d\u7684 $insert()$ \u51fd\u6570\u548c $lower\\_bound()$\n\n$insert(a,b)$ \u8868\u793a\u5728 $a$ **\u4f4d\u7f6e\u524d**\u63d2\u5165\u5143\u7d20 $b$ \uff0c\n\n$lower\\_bound(s,t,a)$ \u8868\u793a\u5728 $s$ \u5230 $t$ \u8fde\u7eed\u7684\u4e00\u6bb5\u4e2d\u627e\u51fa\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e $a$ \u7684**\u4f4d\u7f6e**\u3002\n\n\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\u5c31\u8fc7\u4e86\uff01\n\n\u6700\u540e\uff0c\u611f\u8c22[\u5927\u4f6c](https://www.luogu.org/space/show?uid=107960)\u5b89\u5229\u6b64\u9898~~~\n\n\u6c42\u8fc7\u6c42\u8fc7\uff0c\u5b89\u5229[\u535a\u5ba2](https://www.luogu.org/blog/A4paper/)\n",
        "postTime": 1540969377,
        "uid": 47629,
        "name": "A4paper",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u6700\u8fd1\u505a\u4e86\u4e9b\u5355\u8c03\u961f\u5217\uff5e \u770b\u5b8c\u9898\u76ee\u540e\u679c\u65ad\u6253\u4e86\u5355\u8c03\u961f\u5217(\u9898\u76ee\u770b\u9519\u4e86)\uff0c\u7ed3\u679c Ti 3\u4e2a\u70b9(O n2)(\u51715\u4e2a\u70b9)\u3002\u3002\u3002\n\u4e5f\u60f3\u8fc7\u7ebf\u6bb5\u6811\uff0c\u4f46\u4e0d\u592a\u4f1a\u3002\u3002\u3002\n\n\u540e\u6765\u53d1\u73b0\u53ef\u4ee5\u7528\u5806\u505a\uff0c\u800c\u4e14\u662f\u6bd4\u8f83\u795e\u5947\u7684\u505a\u6cd5\u3002\u3002--\u7528\u4e24\u4e2a\u5806(\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u4e00\u4e2a\u5c0f\u6839\u5806)\u6765\u7ef4\u62a4\u5c31\u597d\u5566\uff01\n\n\u5927\u6839\u5806\u8bb0\u5f55\u5c0f\u4e8e\u4e2d\u4f4d\u6570\u7684\u6570\uff0c\u5c0f\u6839\u5806\u8bb0\u5f55\u4e2d\u4f4d\u6570\u53ca\u5927\u4e8e\u4e2d\u4f4d\u6570\u7684\u5143\u7d20\uff0c\u7ef4\u62a4\u5143\u7d20\u4e2a\u6570\u5dee\u503c\u4e3a1\u3002\u5143\u7d20\u591a\u7684\u5806\u7684\u5806\u9876\u5373\u4e3aans\u3002\u3002\u3002\n\u9047\u5230\u5927\u4e8e\u5927\u6839\u5806\u5806\u9876\u7684\u6570\u5c31\u4e22\u8fdb\u5c0f\u6839\u5806\uff0c\u5426\u5219\u4e22\u8fdb\u5927\u6839\u5806\u3002\n\n\u5199\u5806\u7684\u8bddSTL\u5f88\u65b9\u4fbf(\u4f46\u4e60\u60ef\u624b\u5199\u3002\u3002\u3002) \u4e0b\u9762\u89c1\u4ee3\u7801\u3002\u3002\u3002\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#define rg register\n#define il inline\n#define fp(i,a,b) for(rg int i=a;i<=b;++i)\n#define Max 200000\nusing namespace std;\nint max_heap[Max],min_heap[Max]; \nint a[Max],n,Max_n,Min_n; //Max_n \u8bb0\u5f55\u5927\u6839\u5806\u5143\u7d20\u6570,Min_n\u8bb0\u5f55\u5c0f\u6839\u5806\u5143\u7d20\u6570\nil int gi() //\u8bfb\u5165\u4f18\u5316\n{\n\tint res=0; char ch=0;\n\twhile(ch<'0'|| ch>'9'){ ch=getchar(); }\n\twhile(ch>='0'&&ch<='9') res=res*10+ch-'0',ch=getchar();\n\treturn res;\n}\nil void we(int x) //\u8f93\u51fa\u4f18\u5316\n{\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>9) we(x/10);\n\tputchar(x%10+'0');\n}\nil void swap(int &q,int &p) //\u52a0 & \u540e\u53d8\u91cf\u53ef\u4fee\u6539(\u9700\u6ce8\u610f)\n{\n\tint temp=p; p=q;\n\tq=temp;\n}\nil void push_max(int x) //\u4e22\u8fdb\u5927\u6839\u5806\n{\n\tmax_heap[++Max_n]=x; int now=Max_n;\n\twhile((now>>1)>=1)\n\t{\n\t\tint ne=now>>1;\n\t\tif(max_heap[ne]>=max_heap[now]) return;\n\t\tswap(max_heap[now],max_heap[ne]);\n\t\tnow=ne;\n\t}\n}\nil void push_min(int x) //\u4e22\u8fdb\u5c0f\u6839\u5806\n{\n\tmin_heap[++Min_n]=x; int now=Min_n;\n\twhile((now>>1)>=1)\n\t{\n\t\tint ne=now>>1;\n\t\tif(min_heap[ne]<=min_heap[now]) return;\t\t\t\n\t\tswap(min_heap[now],min_heap[ne]);\n\t\tnow=ne;\n\t}\n}\nil int getmax() //\u53d6\u5927\u6839\u5806\u7684\u503c\u5e76\u7ef4\u62a4\n{\n\tint ans=max_heap[1];\n\tmax_heap[1]=max_heap[Max_n--];\n\tint now=1;\n\twhile((now<<1)<=Max_n)\n\t{\n\t\tint ne=now<<1;\n\t\tif(max_heap[ne+1]>max_heap[ne]&&ne<Max_n) ++ne;\n\t\tif(max_heap[ne]<=max_heap[now]) return ans;\n\t\tswap(max_heap[now],max_heap[ne]);\n\t\tnow=ne;\n\t}\n\treturn ans;\n}\nil int getmin() //\u53d6\u5c0f\u6839\u5806\u7684\u503c\u5e76\u7ef4\u62a4\n{\n\tint ans=min_heap[1];\n\tmin_heap[1]=min_heap[Min_n--];\n\tint now=1;\n\twhile((now<<1)<=Min_n)\n\t{\n\t\tint ne=now<<1;\n\t\tif(min_heap[ne+1]<min_heap[ne]&&ne<Min_n) ++ne;\n\t\tif(min_heap[ne]>=min_heap[now]) return ans;\t\n\t\tswap(min_heap[now],min_heap[ne]);\n\t\tnow=ne;\n\t}\n\treturn ans;\n}\nil void solve()\n{\n\tfp(i,1,n)\n\t{\n\t\tif(a[i]>=max_heap[1]) push_min(a[i]); // \u5982\u679c\u5927\u4e8e\u7b49\u4e8e\u5927\u6839\u5806\u7684\u6700\u5927\u503c,\u5c31\u4e22\u8fdb\u5c0f\u6839\u5806\n\t\tif(a[i]< max_heap[1]) push_max(a[i]); // \u53cd\u4e4b,\u4e22\u8fdb\u5927\u6839\u5806\n\t\tif(Min_n-Max_n > 1){ // \u82e5\u5c0f\u6839\u5806\u5143\u7d20 \u7684\u6570\u91cf\u591a\u4e8e\u5927\u6839\u5806\u5143\u7d20\u6570\u91cf 1 \u4e2a\u4ee5\u4e0a \u53d6\u5c0f\u6839\u5806\u6700\u5c0f\u5143\u7d20\u4e22\u8fdb\u5927\u6839\u5806\n\t\t\tint t=getmin();\n\t\t\tpush_max(t);\n\t\t}\n\t\tif(Max_n-Min_n > 1){ // \u540c\u7406\uff0c\u53d6\u5927\u6839\u5806\u6700\u5927\u5143\u7d20\u4e22\u8fdb\u5c0f\u6839\u5806\n\t\t\tint t=getmax();\n\t\t\tpush_min(t);\n\t\t}\n\t\tif(i%2!=0) { \n\t\t\tif(Max_n>Min_n) we(max_heap[1]),printf(\"\\n\"); \n\t\t\tif(Max_n<Min_n) we(min_heap[1]),printf(\"\\n\");\n\t\t\t}\n\t}\n}\nint main()\n{\n\tn=gi(); fp(i,1,n) a[i]=gi();\n\tsolve();\n\treturn 0;\n}\n\n```",
        "postTime": 1517999404,
        "uid": 69862,
        "name": "Sky_valley",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168  \u4e2d\u4f4d\u6570"
    },
    {
        "content": "\u770b\u4e86\u9898\u76ee\uff0c\u53d1\u73b0 Splay \u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\u3002\u3002\n\n\uff08\u666e\u53ca\u7ec4\u5de8\u4f6c\u7684 \u5927\u6839\u5806+\u5c0f\u6839\u5806 \u8868\u793a\u61d2\u5f97\u5199\uff0c\u592a\u70e6\u4e86\u3002\u3002\u3002\u666e\u53ca\u5de8\u4f6c\u4e0d\u8981\u6253\u6211\u3002\u3002\u3002\uff09\n\n\u5934\u4e00\u6b21\u5199 Splay \u6ca1\u6709 RE\uff0c\u5f00\u68ee\u3002\u3002\u3002\n\n\u60f3\u5b66 Spaly \u81ea\u884c\u53f3\u8f6c \u8bd5\u70bc\u573a\\_\u7701\u9009\u6597\u517d\u573a\\_\u5e73\u8861\u6811\\_Treap\u6811\n\n\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#define MAXN 100010\nusing namespace std;\nint n,root=0,c=1;\nstruct node{//\u5e26\u7236\u4eb2Splay\u6811\u7ed3\u6784\u4f53\n    int son[2];\n    int f,v,s,flag;\n}a[MAXN];\ninline int read(){//\u8bfb\u4f18\n    int date=0,w=1;char c=0;\n    while(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n    while(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n    return date*w;\n}\ninline void pushup(int rt){//\u7ef4\u62a4\n    if(!rt)return;//\u4e0d\u8981\u5fd8\u4e86\u5224\u65ad\u7a7a\u8282\u70b9\u3002\u3002\u3002\n    a[rt].s=a[rt].flag;\n    if(a[rt].son[0])a[rt].s+=a[a[rt].son[0]].s;\n    if(a[rt].son[1])a[rt].s+=a[a[rt].son[1]].s;\n}\ninline void turn(int rt,int k){//\u6b63\u5e38\u7684\u65cb\u8f6c\n    int x=a[rt].f,y=a[x].f;\n    a[x].son[!k]=a[rt].son[k];\n    if(a[rt].son[k])a[a[rt].son[k]].f=x;\n    a[rt].f=y;\n    if(y)a[y].son[a[y].son[1]==x]=rt;\n    a[x].f=rt;\n    a[rt].son[k]=x;\n    pushup(x);pushup(rt);//\u522b\u5fd8\u4e86\u7ef4\u62a4\n}\nvoid splay(int rt,int ancestry){//\u6b63\u5e38\u7684\u4f38\u5c55\n    while(a[rt].f!=ancestry){\n        int x=a[rt].f,y=a[x].f;\n        if(y==ancestry)turn(rt,a[x].son[0]==rt);\n        else{\n            int k=a[y].son[0]==x?1:0;\n            if(a[x].son[k]==rt){turn(rt,!k);turn(rt,k);}\n            else{turn(x,k);turn(rt,k);}//\u538b\u7f29\u4e866\u79cd\u60c5\u51b5\n        }\n    }\n    if(ancestry==0)root=rt;//\u8d4b\u5230\u6839\n}\nvoid insert(int rt,int x){//\u63d2\u5165\n    int fa=0;\n    while(rt&&x!=a[rt].v){\n        fa=rt;\n        rt=a[rt].son[a[rt].v<x];//\u4e00\u76f4\u5411\u4e0b\u627e\n    }\n    if(rt)a[rt].flag++;//\u627e\u5230\n    else{//\u672a\u627e\u5230\n        rt=c++;//\u65b0\u5efa\n        if(fa)a[fa].son[a[fa].v<x]=rt;//\u4e0e\u7236\u4eb2\u8fde\u4e00\u6761\u8fb9\n        a[rt].son[0]=a[rt].son[1]=0;\n        a[rt].f=fa;a[rt].v=x;\n        a[rt].s=a[rt].flag=1;//\u521d\u59cb\u5316\n    }\n    splay(rt,0);//\u4f38\u5c55\u5230\u6839\n}\nint kth(int rt,int x){//kth\u57fa\u672c\u5957\u8def\u3002\u3002\u3002\n    if(x>a[rt].s)return 0;//\u5224\u65ad\uff0c\u597d\u50cf\u662f\u591a\u4f59\u7684\uff0c\u7b97\u4e86\uff0c\u4e0d\u7ba1\u4e86\n    while(1){\n        int y=a[rt].son[0];\n        if(x>a[y].s+a[rt].flag){//\u5728\u53f3\u8fb9\n            x-=a[y].s+a[rt].flag;\n            rt=a[rt].son[1];\n        }\n        else if(a[y].s>=x)rt=y;//\u5728\u5de6\u8fb9\n        else return a[rt].v;//\u5df2\u627e\u5230\n    }\n}\nint main(){\n    n=read();\n    for(int i=1;i<=n;i++){//\u4e3b\u8fc7\u7a0bSo easy!\n        int x=read();\n        insert(root,x);\n        if(i%2)printf(\"%d\\n\",kth(root,i/2+1));//Splay\u5927\u6cd5\u597d\u3002\u3002\u3002\n    }\n    return 0;\n}\n\n```",
        "postTime": 1514727264,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "# P1168\u4e2d\u4f4d\u6570\n\n### --\u7b2cK\u5927\u7684\u6570\u95ee\u9898\n\n\u5148\u4e0a\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n#define N 230000\nint a[N],b[N];\nint n,m;\nstruct node\n{\n    int l,r,ls;\n    int val;\n}t[N*4];\ninline void build(int p,int l,int r)\n{\n    t[p].l=l,t[p].r=r;\n    if(l==r)return;\n    int m=(l+r)>>1;\n    build(p<<1,l,m);build(p<<1|1,m+1,r);\n}\nvoid query(int p,int pos)\n{\n    if(t[p].l==t[p].r&&t[p].ls>=pos){printf(\"%d\\n\",t[p].val);return;}\n    if(t[p].ls>=pos)query(p<<1,pos);\n    else query(p<<1|1,pos-t[p].ls);\n}\nvoid Insert(int p,int &pos,int &val)\n{\n    if(t[p].l==t[p].r&&t[p].l==pos){t[p].val=val;t[p].ls++;return;}\n    int m=(t[p].l+t[p].r)>>1;\n    if(pos>m)Insert(p<<1|1,pos,val);\n    else {Insert(p<<1,pos,val);t[p].ls++;}\n}\nint main()\n{\n    //freopen(\"out.txt\",\"w\",stdout);\n    //ios::sync_with_stdio(false);\n    cin>>n;\n    m=(n+1)>>1;\n    build(1,1,n);\n    for(int i=1;i<=n;i++){scanf(\"%d\",&a[i]);b[i]=a[i];}\n    sort(b+1,b+1+n);\n    for(int i=1;i<=n;i++)\n        if(b[i]!=b[i+1])b[++b[0]]=b[i];\n    n=b[0];\n    int k=lower_bound(b+1,b+n+1,a[1])-b;\n    Insert(1,k,a[1]);\n    query(1,1);\n    for(int i=1;i<m;i++)\n    {\n        k=lower_bound(b+1,b+n+1,a[i<<1])-b;\n        Insert(1,k,a[i<<1]);\n        k=lower_bound(b+1,b+n+1,a[i<<1|1])-b;\n        Insert(1,k,a[i<<1|1]);\n        query(1,i+1);\n    }\n    return 0;\n}\n```\n\u601d\u8def\uff1a[lwc](http://vixbob-lwc.pw)\u548c[xlj](http://edgration.com)\u795e\u7287\u6559\u6211\u7684\u3002\n\n\u5148sort\u4e00\u904d\uff0c\u6bcf\u6b21\u8be2\u95ee\u5411\u6811\u4e0a\u5bf9\u5e94\u4f4d\u7f6e\u52a0\u5165\u5bf9\u5e94\u5927\u5c0f\u7684\u6570\u3002\u56e0\u4e3a\u5bfb\u627e\u7b2ck\u5927\u7684\u6570\u9700\u8981\u4e00\u4e2a\u5927\u5c0f\u987a\u5e8f\uff0c\u6240\u4ee5\u6bcf\u4e2a\u6570\u7684\u4f4d\u7f6e\u90fd\u662f\u786e\u5b9a\u7684\u3002\n\n\u5982\u679c\u8282\u70b9p\u7684\u5de6\u513f\u5b50\u4e0b\u6709li\u4e2a\u6570\uff0ck>li\uff0c\u5219k\u662f\u4f4d\u4e8e\u53f3\u513f\u5b50\u7684\u7b2ck-li\u4e2a\u6570\u3002\u5426\u5219\u8fdb\u5165\u5de6\u5b50\u6811\u5bfb\u627e\u7b2ck\u4e2a\u3002\uff08k\u662f\u4ec0\u4e48\u6211\u60f3\u601d\u8003\u8fc7\u7684\u90fd\u77e5\u9053\u5427\uff09\n\n\u5176\u5b9e\u7528\u5806\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u800c\u4e14\u5f88\u4f18\u826f\u3002\u8bf8\u4f4d\u5de8\u4f6c\u5df2\u7ecf\u5199\u8fc7\u4e86\uff0c\u6211\u5c31\u4e0d\u73ed\u95e8\u5f04\u65a7\u4e86\u3002\n\n\n------------\n\n\n------------\n\n\u8fd9\u9898\u8ba9\u6211\u5b66\u4f1a\u4e86\u5bf9\u62cd\u3002\u7136\u800c\u4e0d\u77e5\u662f\u5199\u9519\u4e86\u8fd8\u662f\u6ca1\u6709\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0clonglong\u6539\u4e3aint\u540e\u5c31AC\u4e86\u3002\u3002\u3002\n\n\u9644\u4e00\u7ec4\u6570\u636e\u3002\n\n```cpp\n/*100\n796 354 743 791 1054 1036 115 391 727 784 1027 273 45 937 384 504 29 180 307 219 944 857 325 1003 229 18 34 20 68 92 79 81 63 79 41 59 6 49 7 93 39 54 94 9 93 56 75 32 28 2 49 59 57 17 3 65 66 68 85 38 95 67 53 61 81 94 24 87 77 31 17 20 20 14 60 47 71 38 79 2 71 62 92 31 79 29 96 49 1 18 21 30 20 8 91 4 5 18 25 83*/```",
        "postTime": 1513956208,
        "uid": 55459,
        "name": "ZhYic",
        "ccfLevel": 0,
        "title": "\u4e2d\u4f4d\u6570"
    },
    {
        "content": "\u5176\u5b9e\uff0c\u8fd9\u9053\u9898\u4e5f\u53ef\u4ee5\u7528STL\u6c34\u8fc7\uff1a\n\n\u867d\u7136\u4e0d\u5efa\u8bae\u8fd9\u6837\u505a\uff0c\u4f46\u4e5f\u662f\u4e00\u79cd\u65b9\u6cd5\uff1a\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nint n,x;\nvector<int> a;\ninline int read()\n{\n    int x=0,f=1; char ch=getchar();\n    while ((ch<'0' || ch>'9')&&ch!='-') ch=getchar();\n    if (ch=='-')\n    {\n        f=0; ch=getchar();\n    }\n    while (ch>='0' && ch<='9')\n    {\n        x=(x<<3)+(x<<1)+ch-48; ch=getchar();\n    }\n    return f?x:-x;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    a.reserve(n);\n    for (int i=1; i<=n; ++i)\n    {\n        scanf(\"%d\",&x);\n        a.insert(upper_bound(a.begin(),a.end(),x),x);\n        if (i&1) printf(\"%d\\n\", a[i>>1]);\n    }\n}\n\u4e3a\u4e86\u6c34\u8fc7\uff0c\u5fc5\u987b\u8981\u8bfb\u5165\u4f18\u5316\u4e00\u4e0b\uff0c\u4e0d\u7136\u53ef\u80fd\u4f1aTLE\n```",
        "postTime": 1505034882,
        "uid": 22841,
        "name": "Right",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "pb\\_ds\u5927\u6cd5\u597d\uff0c$p14y\\_7r33\u628a\u4f60\u4fdd\n\n\u8fd9\u9053\u9898\u53ef\u4ee5\u4f7f\u7528splay\u505a\uff0c\u7ef4\u62a4size\uff0c\u8fb9\u63d2\u8fb9\u67e5\uff0c\u4f7f\u7528pb\\_ds\u5185\u5d4c\u7684splay\u9700\u8981\u6ce8\u610ftree\\_tag\u7684\u7528\u6cd5\uff0c\u4e00\u5b9a\u8981\u6302tree\\_order\\_statistics\\_node\\_update\uff01\u4e00\u5b9a\u8981\u6302tree\\_order\\_statistics\\_node\\_update\uff01\u4e00\u5b9a\u8981\u6302tree\\_order\\_statistics\\_node\\_update\uff01\n\n\u5927\u6982\u6bd4\u624b\u5199\u7684slpay\u8981\u6162\u4e0a2500ms+\u4f46\u662f\u7f16\u7a0b\u65f6\u95f4\u8981\u5feb\u4e0d\u5c11\uff0c\u80fdac\u5c31\u884c\u2026\u2026\n\n```cpp\n#include<iostream>\n#include<stdio.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#define Node pair<int,int>\n#pra\\\ngma GCC optimize(\"-O2\")\nusing namespace std;\nusing namespace __gnu_pbds;\nmap<int,int>s;\ntree<Node,null_type,less<Node>,splay_tree_tag,tree_order_statistics_node_update>T;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    int n,t,x;\n    cin>>n;\n    for(register int i=1;i<=n;i++)\n    {\n    cin>>x;\n    T.insert(Node(x,s[x]++));\n    if(i==1||i%2) printf(\"%d\\n\",T.find_by_order(((i+1)>>1)-1)->first);\n    }            \n    return 0;\n}\n```",
        "postTime": 1499224600,
        "uid": 22816,
        "name": "\u82ac\u7279",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u770b\u5230\u8fd9\u9053\u9898,\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2aO(N2*logN)\u7684\u60f3\u6cd5:\n```cpp\n#include<bits/stdc++.h>//\u4e07\u80fd\u5934\u4e07\u5c81\nusing namespace std;\nint a,b[100005];\nint main(){\n\tcin>>a;\n  \tfor(int i=1;i<=a;i++){\n   \t\tcin>>b[i];\n   \t\tsort(b+1,b+i+1);\n  \t\tif(i&1)cout<<b[(i+1)/2]<<endl;\n  \t}\n  \treturn 0;\n}\n```\n\u5176\u4e2d\u53ef\u4ee5\u975e\u5e38~~\u4e00\u70b9\u4e5f\u4e0d\u5bb9\u6613~~\u5bb9\u6613\u53d1\u73b0\u53ef\u4ee5\u628asort()\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u7ed9\u4f18\u5316\u4e0b\u6765\n\n\u6211\u4e3a\u4e86~~\u5077\u61d2~~\u65b9\u4fbf,\u4f7f\u7528\u4e86STL\u91cc\u7684set,\u6bcf\u6b21\u6dfb\u52a0\u8fdb\u4e00\u4e2a\u6570,\u5c31\u4f1a\u81ea\u52a8\u6392\u597d\u5e8f\uff0c\u4f46\u56e0\u4e3aset\u65e0\u6cd5\u76f4\u63a5\u8bfb\u53d6\u5230\u5176\u4e2d\u5177\u4f53\u7684\u6570,\u53ea\u80fd\u901a\u8fc7\u6307\u9488\u8bbf\u95ee.\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5~~\u4e00\u70b9\u4e5f\u4e0d\u81ea\u7136~~\u81ea\u7136\u5730\u60f3\u5230\u63a7\u5236\u6307\u9488\u5728set\u7684\u4e2d\u95f4,\u5176\u4e2d\u6211\u4eec\u5728set\u5185\u4e3a\u5076\u6570\u4e2a\u6570\u65f6,\u63a7\u5236\u6307\u9488\u5904\u5728i/2\u7684\u4f4d\u7f6e;\n\n\u4e00\u5171\u6709\u56db\u79cd\u60c5\u51b5\uff1a\n\n **1:set\u91cc\u9762\u4e3a\u5947\u6570\u4e2a\u6570,\u63d2\u5165\u4e00\u4e2a\u6bd4\u4e2d\u4f4d\u6570\u5c0f\u7684\u6570,\u56e0\u4e3a\u8981\u63a7\u5236\u6307\u9488\u5728i/2\u7684\u4f4d\u7f6e,\u6240\u4ee5\u6307\u9488\u5411\u5de6\u79fb\u4e00\u4f4d,it--;**\n\n  **2:set\u91cc\u9762\u4e3a\u5076\u6570\u4e2a\u6570,\u63d2\u5165\u4e00\u4e2a\u6bd4\u4e2d\u4f4d\u6570\u5c0f\u7684\u6570,\u56e0\u4e3a\u6307\u9488\u539f\u672c\u5728i/2\u7684\u4f4d\u7f6e,\u524d\u9762\u52a0\u8fdb\u53bb\u4e00\u4e2a\u6570,\u539f\u672c\u7684\u6307\u9488\u4f4d\u7f6e\u521a\u597d\u5c31\u662f\u4e2d\u4f4d\u6570,\u6240\u4ee5\u4e0d\u53d8**\n\n  **3:set\u91cc\u9762\u4e3a\u5076\u6570\u4e2a\u6570,\u63d2\u5165\u4e00\u4e2a\u6bd4\u4e2d\u4f4d\u6570\u5927\u7684\u6570,\u56e0\u4e3a\u6307\u9488\u539f\u672c\u5728i/2\u7684\u4f4d\u7f6e,\u540e\u9762\u52a0\u8fdb\u53bb\u4e00\u4e2a\u6570,\u539f\u672c\u7684\u6307\u9488\u4f4d\u7f6e\u662f\u4e2d\u4f4d\u6570\u540e\u9762\u4e00\u4f4d,\u6240\u4ee5\u8981\u628a\u6307\u9488\u5411\u53f3\u79fb\u4e00\u4f4d,it++;**\n\n**4:set\u91cc\u9762\u4e3a\u5947\u6570\u4e2a\u6570,\u63d2\u5165\u4e00\u4e2a\u6bd4\u4e2d\u4f4d\u6570\u5927\u7684\u6570,\u4e0d\u53d8;**\n\n\n\u4ee5\u4e0b\u662f\u7b80\u5316\u540e\u7684\u4ee3\u7801:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,s;\nmultiset<int>a;//\u56e0\u4e3a\u6709\u53ef\u80fd\u6709\u91cd\u590d\u6570\u636e\u6240\u4ee5\u5f97\u5f00multiset \nmultiset<int>::iterator it;\nint main(){\n\tcin>>n;\n\tit=a.begin();\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>s;\n\t\ta.insert(s);//\u63d2\u5165\u6570\u636e \n\t\tif(s>*it&&!((i-1)&1))it++; //set\u91cc\u9762\u4e3a\u5076\u6570\u4e2a\u6570,\u63d2\u5165\u4e00\u4e2a\u6bd4\u4e2d\u4f4d\u6570\u5927\u7684\u6570,\u6307\u9488\u53f3\u79fb \n\t\telse if(s<*it&&(i-1)&1)it--;//\u5224\u65adset\u91cc\u9762\u4e3a\u5947\u6570\u4e2a\u6570,\u63d2\u5165\u4e00\u4e2a\u6bd4\u4e2d\u4f4d\u6570\u5c0f\u7684\u6570,\u6307\u9488\u5de6\u79fb \n\t\tif(i&1)cout<<*it<<endl;//\u5224\u65ad\u8f93\u51fa \n\t}\n\treturn 0;\n}\n```\n\nPS:[i&1](https://zdgodzzz.blog.luogu.org/guan-yu-i1-pan-duan-ji-ou-xing)\u89e3\u91ca;\n\n\u5b8c\u7ed3\u6492\u82b1zzz;\n\n",
        "postTime": 1578727511,
        "uid": 186063,
        "name": "b_f_small_cow",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "### \u5bf9\u9876\u5806\n\n\uff08\u4e2a\u4eba\u8ba4\u4e3a\u8f83\u6613\u7406\u89e3\u7684\u4e00\u7bc7\u9898\u89e3\uff09\n\n\u7ef4\u62a4\u4e24\u4e2a\u5806\uff1a\n\n1.\t\u5927\u6839\u5806\u5b58\u50a8\u8f83\u5c0f\u7684\u4e00\u534a\n\n2.\t\u5c0f\u6839\u5806\u5b58\u50a8\u8f83\u5927\u7684\u4e00\u534a\n\n3.\t\u9ed8\u8ba4\u5927\u6839\u5806\u7684$size\\geq $\u5c0f\u6839\u5806\n\n4.\t\u5728\u8bfb\u5165\u65f6\uff0c\u82e5\u8be5\u6570\u4e3a\u7b2c\u5947\u6570\u4e2a\uff0c\u5219\u5c06\u5b83\u5165\u5927\u6839\u5806\n\n5.\t\u82e5\u4e3a\u7b2c\u5076\u6570\u4e2a\uff0c\u5219\u5165\u5c0f\u6839\u5806\n\n6.\t\u4e00\u65e6\u5927\u6839\u5806\u5806\u9876$>$\u5c0f\u6839\u5806\u5806\u9876\uff0c\u5219\u4ea4\u6362\n\n7.\t\u9022\u7b2c\u5947\u6570\u4e2a\u8f93\u51fa\u5927\u6839\u5806\u5806\u9876\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\nusing namespace std;\nint read()\n{\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile(ch>'9'||ch<'0')\n\t{\n\t\tif(ch=='-')f=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch<='9'&&ch>='0')\n\t{\n\t\tx=(x<<3)+(x<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn f*x;\n}\nint a,b,c,n;\npriority_queue<int>Max;\npriority_queue<int,vector<int>,greater<int> >Min;\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\ta=read();\n\t\tif(i&1)\n\t\t{\n\t\t\tMax.push(a);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tMin.push(a);\n\t\t}\n\t\tif(!Max.empty()&&!Min.empty()&&Max.top()>Min.top())\n\t\t{\n\t\t\ta=Max.top();\n\t\t\tb=Min.top();\n\t\t\tMax.pop();\n\t\t\tMin.pop();\n\t\t\tMax.push(b);\n\t\t\tMin.push(a);\n\t\t}\n\t\tif(i&1)printf(\"%d\\n\",Max.top());\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1572685741,
        "uid": 126030,
        "name": "uniquantum",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "~~\u5c1d\u8bd5\u5728\u4e00\u4e2a\u5927\u4f6c\u4f17\u591a\u7684\u9898\u89e3\u533a\u5199\u52a8\u6001\u4e2d\u4f4d\u6570QAQ~~  \n\n-------\n\n\u9996\u5148\u5148\u60f3\u60f3\u6211\u4eec\u80fd\u600e\u4e48\u505a\n\n\u6700\u66b4\u529b\u7684\u5927\u6982\u662f\u6bcf\u6b21\u52a0\u5165\u6570\u5b57\uff0csort\uff0c\u5947\u6570\u8f93\u51fa\n\n\u7136\u540e\u590d\u6742\u5ea6\u662f$O(n^2logn)$\n\n\u518d\u60f3\u60f3\n\n\u6211\u4eec\u4f1a\u4e8c\u5206\n\n\u90a3\u4e48vector\u5c31\u53ef\u4ee5\u505a\n\n\u590d\u6742\u5ea6$O(nlogn)$\n\n\u4f46\u662f\u6ce8\u610f\u5e38\u6570\u6709\u70b9\u5927\n\n\u53e6\u5916\u80fd\u8fc7\u666e\u901a\u5e73\u8861\u6811\u90a3\u4e2a\u9898\u7684\u7b97\u6cd5\u57fa\u672c\u90fd\u884c\n\n\u7ebf\u6bb5\u6811\uff08\u52a8\u6001\u5f00\u70b9\u6216\u8005\u4e0d\u5f00\u70b9\u79bb\u6563\u5316\u90fd\u884c\uff09\uff0c\u5e73\u8861\u6811\uff0c\u6811\u72b6\u6570\u7ec4\u5e94\u8be5\u90fd\u662f$O(nlogn)$\n\n\u7136\u800c\u56de\u5f52\u672c\u5fc3\n\n\u52a8\u6001\u4e2d\u4f4d\u6570\uff0c\u7ecf\u5178\u505a\u6cd5\u662f**\u5bf9\u9876\u5806**\n\n--------\n\n\u5bf9\u9876\u5806\uff0c\u987e\u540d\u601d\u4e49\uff0c\u4e24\u4e2a\u5806\u7684\u9876\u7aef\u76f8\u5bf9\u6784\u6210\u539f\u5148\u7684\u6570\u5217\n\n\u5de6\u8fb9\u4e00\u4e2a\u5806\u662f\u5927\u6839\u5806\uff0c\u5b58\u653e\u5c0f\u7684\u4e00\u534a\u6570\u5b57  \n\u53f3\u8fb9\u4e00\u4e2a\u5806\u662f\u5c0f\u6839\u5806\uff0c\u5b58\u653e\u5927\u7684\u4e00\u534a\u6570\u5b57  \n\n\u4e2d\u95f4\u4e24\u4e2a\u6570\u5b57\u4fdd\u8bc1\u5176\u4e2d\u4e00\u4e2a\u6216\u8005\u4e24\u4e2a\u5806\u9876\u7684\u5e73\u5747\u503c\u6784\u6210\u4e2d\u4f4d\u6570\n\n\u6bcf\u6b21\u62ff\u5230\u4e00\u4e2a\u65b0\u7684\u6570\u5b57\u5bf9\u5e94\u63d2\u5165\u5806\u91cc  \n\u6ce8\u610f\u63d2\u5165\u7684\u5806\u8981\u5224\u65ad\u4e00\u4e0b\uff1a  \n1. \u5982\u679c\u6bd4\u53f3\u9762\u5806\u9876\u8981\u5927\uff0c\u90a3\u5c31\u63d2\u5165\u5230\u53f3\u8fb9  \n2. \u5982\u679c\u6bd4\u5de6\u9762\u5806\u9876\u5c0f\uff0c\u90a3\u5c31\u63d2\u5165\u5230\u5de6\u8fb9   \n3. \u5982\u679c\u4ecb\u4e8e\u4e24\u8005\u4e4b\u95f4\uff0c\u90a3\u5c31\u968f\u5fc3\u60c5\u6311\u4e00\u4e2a\n\n\u7136\u540e\u6839\u636e\u5806\u5185\u5143\u7d20\u7684\u4e2a\u6570\u8fdb\u884c\u5e73\u8861  \n\u5982\u679c\u4e2a\u6570\u5dee\u5927\u4e8e1\uff0c\u90a3\u4e48\u4ece\u591a\u7684\u91cc\u9762\u53d6\u51fa\u9876\u6765\u653e\u5230\u53e6\u5916\u4e00\u4e2a\u91cc\u9762\n\n\u7136\u540e\u4e8c\u53c9\u5806\u3001\u5de6\u504f\u6811\u3001\u914d\u5bf9\u5806....\u90fd\u884c...  \n~~\u7531\u4e8e\u5c0f\u91d1\u7f8a\u592a\u83dc\u4e86\u5c31\u53ea\u80fd\u5199\u4e8c\u53c9\u5806~~  \n\u53cd\u6b63\u4fdd\u8bc1\u5f39\u51fa\u548c\u63d2\u5165\u6700\u591a$O(logn)$\u7684\u5806\u90fd\u53ef\u4ee5\u80dc\u4efb  \n\u4e0d\u8fc7STL\u7684\u4f18\u5148\u961f\u5217\u5e38\u6570\u5b9e\u5728\u662f\u592a\u5927\u4e86QAQ  \n~~\u518d\u52a0\u4e0aRE\u65e0\u6570\u904d\uff0c\u5c0f\u91d1\u7f8a\u7684\u5185\u5fc3\u6536\u5230\u7684`\u6253\u51fb*n`~~  \n\u5c31\u624b\u5199\u4e8c\u53c9\u5806\u4e86QAQ\n\n--------\n\ncode:\n```cpp\n#include <iostream>\n#include <string>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\ntypedef long long int lli;\ntemplate <class Tp>\ninline void Read(Tp &num)\n{\n    num = 0;\n    char ch = getchar();\n    bool flag = false;\n    while (!isdigit(ch))\n        flag |= ch == '-', ch = getchar();\n    while (isdigit(ch))\n        num = (num << 1) + (num << 3) + (ch ^ 48), ch = getchar();\n    if (flag)\n        num *= -1;\n}\nstruct Heap1\n{ // \u5c0f\u6839\u5806\uff0c\u662f\u5927\u7684\u4e00\u8fb9\n    lli data[250043];\n    int cnt;\n    lli Top()\n    {\n        return data[1];\n    }\n    lli Size()\n    {\n        return cnt;\n    }\n    void update(int pos)\n    {\n        while (true)\n        {\n            if (pos == 1)\n                break;\n            if (data[pos] < data[pos >> 1])\n            {\n                swap(data[pos], data[pos >> 1]);\n                pos >>= 1;\n            }\n            else\n                break;\n        }\n    }\n    void downdate(int pos)\n    {\n        while (true)\n        {\n            if ((pos << 1) > cnt)\n                break;\n            int son = pos << 1;\n            if ((pos << 1 | 1) <= cnt && data[pos << 1 | 1] < data[son])\n                son = pos << 1 | 1;\n            if (data[pos] > data[son])\n            {\n                swap(data[son], data[pos]);\n                pos = son;\n            }\n            else\n                break;\n        }\n    }\n    void Push(lli val)\n    {\n        data[++cnt] = val;\n        update(cnt);\n    }\n    void Pop()\n    {\n        if (cnt == 0)\n            return;\n        swap(data[1], data[cnt]);\n        cnt--;\n        downdate(1);\n    }\n};\nstruct Heap2\n{ // \u5927\u6839\u5806\uff0c\u662f\u5c0f\u7684\u4e00\u8fb9\n    lli data[250043];\n    int cnt;\n    lli Top()\n    {\n        return data[1];\n    }\n    lli Size()\n    {\n        return cnt;\n    }\n    void update(int pos)\n    {\n        while (true)\n        {\n            if (pos == 1)\n                break;\n            if (data[pos] > data[pos >> 1])\n            {\n                swap(data[pos], data[pos >> 1]);\n                pos >>= 1;\n            }\n            else\n                break;\n        }\n    }\n    void downdate(int pos)\n    {\n        while (true)\n        {\n            if ((pos << 1) > cnt)\n                break;\n            int son = pos << 1;\n            if ((pos << 1 | 1) <= cnt && data[pos << 1 | 1] > data[son])\n                son = pos << 1 | 1;\n            if (data[pos] < data[son])\n            {\n                swap(data[son], data[pos]);\n                pos = son;\n            }\n            else\n                break;\n        }\n    }\n    void Push(lli val)\n    {\n        data[++cnt] = val;\n        update(cnt);\n    }\n    void Pop()\n    {\n        if (cnt == 0)\n            return;\n        swap(data[1], data[cnt]);\n        cnt--;\n        downdate(1);\n    }\n};\nHeap2 little; //\u5c0f\u7684\u534a\u8fb9\nHeap1 big;    //\u5927\u7684\u534a\u8fb9\n\nvoid stabler() //\u5e73\u8861\u4e24\u4e2a\u5806\n{\n    while (big.Size() - little.Size() > 1)\n    {\n        little.Push(big.Top());\n        big.Pop();\n    }\n    while (little.Size() - big.Size() > 1)\n    {\n        big.Push(little.Top());\n        little.Pop();\n    }\n}\n\ninline void Print() //\u8f93\u51fa\n{\n    if (little.Size() > big.Size())\n        printf(\"%lld\\n\", little.Top());\n    else if (big.Size() > little.Size())\n        printf(\"%lld\\n\", big.Top());\n    else\n    {\n        if ((little.Top() + big.Top()) & 1)\n            printf(\"%lld.5\\n\", (little.Top() + big.Top()) >> 1);\n        else\n            printf(\"%lld\\n\", (little.Top() + big.Top()) >> 1);\n    }\n}\n\nint main()\n{\n    // freopen(\"mid.in\",\"r\",stdin);\n    // freopen(\"mid.out\",\"w+\",stdout);\n    int n;\n    Read(n);\n    for (int i = 1; i <= n; i++)\n    {\n        int num;\n        Read(num);\n        if (num < big.Top())\n        {\n            little.Push(num);\n        }\n        else\n        {\n            big.Push(num);\n        }\n        stabler();\n        if (i & 1) // \u5947\u6570\u4e2a\u6570\u5b57\u8f93\u5165\u540e\u8f93\u51fa\n            Print();\n    }\n    return 0;\n}\n```\n\n------\n\n\u5173\u4e8e\u8fd9\u4e2a\u9898\u6ca1\u6709\u63d0\u53ca\u7684\n\n\u662f\u5982\u679c\u4e24\u4e2a\u5806\u4e2a\u6570\u4e00\u6837\u591a\u65f6  \n\n\u8f93\u51fa\u4e24\u4e2a\u5806\u9876\u7684\u5e73\u5747\u6570\uff08\u5e26\u5c0f\u6570`.5`\uff09  \n\n\u8fd9\u4e2a\u6211\u4e5f\u5199\u5230`print()`\u91cc\u9762\u4e86\n\n~~\u5077\u5077\u6492\u82b1~~",
        "postTime": 1569579564,
        "uid": 122927,
        "name": "Jelly_Goat",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u6211\u6765\u7528\u901a\u4fd7\u6613\u61c2\u7684\u8bed\u8a00\u6765\u8bb2\u8bb2\u5bf9\u9876\u5806~\n\n\n\u8fd9\u4e2a\u73a9\u610f\u662f\u53ef\u4ee5\u52a8\u6001\u7ef4\u62a4\u7b2ck\u5927\u7684\u503c\uff0c\u6bcf\u6b21\u64cd\u4f5clogn\u3002\n\n\u5927\u6839\u5806q1\uff1a\u7ef4\u62a4\u96c6\u5408\u4e2d\u8f83\u5c0f\u503c\u7684\u90e8\u5206\u7684\u6700\u5927\u503c\u3002\n\n\u5c0f\u6839\u5806q2\uff1a\u7ef4\u62a4\u96c6\u5408\u4e2d\u8f83\u5927\u503c\u7684\u90e8\u5206\u7684\u6700\u5c0f\u503c\u3002\n\n \n\n\u542c\u4e0d\u61c2\uff1f\u6ca1\u5173\u7cfb\uff0c\u63a5\u7740\u770b\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u7528\u9e21\u548c\u51e4\u6765\u6bd4\u55bb\u8fd9\u4e24\u4e2a\u5806\n\n\u6362\u53e5\u8bdd\u6765\u8bf4\uff0c\u4ee5\u9e21\u5934\u51e4\u5c3e\u6765\u6bd4\u55bb\u8fd9\u4e24\u4e2a\u5806\uff0cq1\u7684\u5806\u9876\u5c31\u662f\u9e21\u5934\uff0cq2\u7684\u5806\u9876\u5c31\u662f\u51e4\u5c3e\uff1b\n\n\u7531\u6b64\u53ef\u89c1\uff0cq2.top()>q1.top();\n\n\u5173\u4e8e\u63d2\u5165\uff1a\n\n     \u5982\u679c\u65b0\u6765\u7684\u5c0f\u5d3d\u6bd4\u9e21\u5934\u8fd8\u5389\u5bb3\uff0c\u90a3\u4e48\u5b83\u5c31\u8fdb\u5165\u51e4\u5806(\u5426\u5219\u5b83\u4f1a\u5bf9\u4e0a\u5929\u7684\u9009\u62e9\u4e0d\u6ee1)\uff1b\u5426\u5219\u8fdb\u5165\u9e21\u5806\uff1b\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u6837\u64cd\u4f5c\u5e76\u4e0d\u7834\u574f\u539f\u6709\u7684\u7279\u6027\uff1b\n\n\u5173\u4e8e\u8c03\u6574\uff1a\n\n     \u6709\u65f6\u5c0f\u9e21\u7684\u6570\u91cf\u6bd4\u51e4\u7684\u6570\u91cf\u8981\u5c0f\u5f97\u591a\uff0c\u90a3\u4e48\u4e3a\u4e86\u8ba9\u51e4\u5f97\u5230\u4f18\u8d8a\u611f\uff0c\u5979\u4eec\u4f1a\u5c06\u51e4\u7fa4\u4e2d\u7684\u5f31\u8005\u6253\u56de\u5c0f\u9e21(\u522b\u95ee\u6211\u600e\u4e48\u6253\u7684)\uff0c\u4e5f\u5c31\u662f\u628a\u51e4\u5806\u7684\u5c3e\u5df4\u6539\u6210\u9e21\u5934\uff0c\u76f4\u5230\u4e24\u8005\u7684\u6570\u91cf\u5904\u4e8e\u5e73\u8861\u6001(\u76ee\u524d\u4f60\u4e0d\u9700\u8981\u7406\u89e3\u4ec0\u4e48\u662f\u5e73\u8861\u6001\uff0c\u4e0b\u9762\u4f1a\u8bf4\u5230)\uff1b\u5982\u679c\u53cd\u4e4b\uff0c\u90a3\u4e48\u5c0f\u9e21\u4e2d\u7684\u4f7c\u4f7c\u8005\u4fbf\u4f1a\u7ecf\u5386\u6d85\u69c3\u6210\u51e4\uff0c\u6210\u4e3a\u51e4\u5c3e\u3002\n\n\u5173\u4e8e\u8be2\u95ee:\n\n     \u5982\u679c\u95ee\u7b2ck\u5927\u7684\u503c\uff0c\u6211\u4eec\u53d1\u73b0,\u5982\u679c\u51e4\u5806\u4e2d\u4e00\u5171\u6709k\u53ea\u51e4\uff0c\u90a3\u4e48\u51e4\u5c3e(\u5806\u9876)\u4fbf\u662f\u7b54\u6848,\u90a3\u4e48\u4e4b\u524d\u6240\u8bf4\u7684\u8c03\u6574\u4e2d\u7684\u5e73\u8861\u6001\u4fbf\u662f\u7ef4\u6301\u51e4\u5806\u4e2d\u7684\u51e4\u7684\u6570\u91cf\u7b49\u4e8ek\uff1b\n\n \n\n\u770b\u61c2\u51e4\u9e21\u4e4b\u95f4\u7684\u5173\u7cfb\u4e86\u5417\uff1f\u5982\u679c\u770b\u61c2\u4e86\u90a3\u4e48\u4f60\u5c31\u4f1a\u5bf9\u9876\u5806\u4e86\uff1b\n\n\u4e0b\u9762\u7b80\u8ff0\u5bf9\u9876\u5806:\n\n\u7ef4\u62a4\u5c0f\u6839\u5806\u7684\u6570\u91cf\u662fk\uff0c\u901a\u8fc7\u548c\u5927\u6839\u5806\u4e4b\u95f4\u7684\u5143\u7d20\u8f6c\u79fb\u6765\u7ef4\u62a4\u8fd9\u4e2a\u6027\u8d28\uff1b\n\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u5c0f\u6839\u5806\u7684\u5806\u9876\u4fbf\u662f\u7b54\u6848\uff1b\n\n\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u52a8\u6001\u6539\u53d8k\uff0c\u4f7fk=\u76ee\u524d\u7684\u603b\u5143\u7d20-1\uff1b\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\npriority_queue<int> q1;\npriority_queue<int, vector<int>, greater<int> > q2;\nint main()\n{\n\tint n;\n\tcin>>n;\n\tint x;\n\tcin>>x;\n\tq1.push(x);\n\tcout<<x<<endl;\n\tfor(int i=2;i<=n;i++){\n\t\tint tmp;\n\t\tscanf(\"%d\",&tmp);\n\t\tif(tmp>q1.top()){\n\t\t\tq2.push(tmp);\n\t\t}\n\t\telse{\n\t\t\tq1.push(tmp);\n\t\t}\n\t\twhile (abs((int)q1.size()-(int)q2.size())>1){\n\t\t\tif (q1.size()>q2.size()){\n\t\t\t\tq2.push(q1.top());\n\t\t\t\tq1.pop();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tq1.push(q2.top());\n\t\t\t\tq2.pop();\n\t\t\t}\n\t\t}               \n\t\tif(q2.size()>q1.size()){\n\t\t\tcout<<q2.top()<<endl;\n\t\t}\n\t\telse if(i%2!=0){\n\t\t\tcout<<q1.top()<<endl;\n\t\t}\n\t}\n}\n```\n",
        "postTime": 1568021244,
        "uid": 119189,
        "name": "\u795e\u4e4b\u53f3\u5927\u81e3",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "#### \u521a\u521a\u5b66\u4e86priority_queue\uff0c\u5c31\u62ff\u8fd9\u9053\u9898\u6765\u7ec3\u7ec3\u624b\u5427\uff01\n\u4e00\u822c\u7684\u5c0f\u6839\u5806\u6216\u5927\u6839\u5806\u90fd\u662f\u5b58\u4e00\u7ec4\u6570\u7684\u6700\u5927\u6216\u6700\u5c0f\u503c\uff0c\u53ef\u662f\u8fd9\u9053\u9898\u8981\u6c42\u7684\u662f\u8f93\u51fa\u4e2d\u4f4d\u6570\uff0c\u600e\u4e48\u529e\u5462\uff1f\n# \u628a\u5806\u5207\u5f00\u6765\uff01\nhhh\u522b\u614c\uff0c\u5c31\u662f\u7b2c\u4e00\u7bc7\u9898\u89e3\u6240\u8bf4\u7684\u5efa\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u662f\u5927\u6839\u5806\uff0c\u4e00\u4e2a\u662f\u5c0f\u6839\u5806\n\n\u5c0f\u6839\u5806\u7684\u5806\u9876\u662f\u8f83\u5927\u7684\u6570\u4e2d\u6700\u5c0f\u7684\uff0c\u5927\u6839\u5806\u7684\u5806\u9876\u662f\u8f83\u5c0f\u7684\u6570\u4e2d\u6700\u5927\u7684\n\n\u8fd9\u6837\u4e00\u6765\u7b54\u6848\u5c31\u662f\u5c0f\u6839\u5806\u7684\u5806\u9876\uff0c\u56e0\u4e3a\u5c0f\u6839\u5806\u5185\u7684\u5143\u7d20\u4e2a\u6570\u8981\u4e0d\u5c31\u662f\u7b49\u4e8e\u5927\u6839\u5806\u7684\u5143\u7d20\u4e2a\u6570\uff08\u5f53i\u4e3a\u5076\u6570\u65f6\uff09\uff0c\u8981\u4e0d\u5c31\u662f\u6bd4\u5927\u6839\u5806\u7684\u5143\u7d20\u4e2a\u6570\u591a1\uff08\u5f53i\u4e3a\u5947\u6570\u65f6\uff09\n\n\u5f53\u4e24\u4e2a\u5806\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u7684\u65f6\u5019\uff0c\u5c31\u628a\u591a\u7684\u90a3\u5806\u7684\u5806\u9876\u5206\u7ed9\u5c11\u7684\u90a3\u5806\u7684\u5806\u9876\n\n#### code:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n;\npriority_queue <int> q1;//\u5927\u6839\u5806 \npriority_queue <int ,vector<int>,greater<int> > q2;//\u5c0f\u6839\u5806 \nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tint a;\n\t\tscanf(\"%d\",&a);\n\t\tif (i==1) //\u7279\u5224 \n\t\t{\n\t\t\tq1.push(a);\n\t\t\tprintf(\"%d\\n\",a);\n\t\t\tcontinue;\n\t\t}\n\t\tif (a<=q1.top()) q1.push(a);\n\t\telse q2.push(a); \n\t\t /*q1\u5c0f\u6839\u5806\u7684\u5806\u9876\u662f\u8f83\u5927\u7684\u6570\u4e2d\u6700\u5c0f\u7684\uff0cq2\u5927\u6839\u5806\u7684\u5806\u9876\u662f\u8f83\u5c0f\u7684\u6570\u4e2d\u6700\u5927\u7684\n\t\t   \u6240\u4ee5\u5f53a\u5c0f\u4e8e\u7b49\u4e8eq1\u7684\u5806\u9876\u65f6\uff0c\u4e5f\u5c31\u662fa\u6bd4q1\u4e2d\u6240\u6709\u7684\u6570\u90fd\u5c0f\uff0c\u5c31\u653e\u8fdbq1\u4e2d\n\t\t   \u5426\u5219a\u6bd4q2\u7684\u5806\u9876\u5927\uff0c\u653e\u8fdbq2 \n\t\t */\n\t\twhile (q2.size()>q1.size()) \n\t\t{\n\t\t\tq1.push(q2.top());\n\t\t\tq2.pop();\n\t\t}\n\t\twhile (q1.size()>q2.size()+1) \n\t\t//q2.size()+1\u662f\u56e0\u4e3a\u5f53i\u4e3a\u5947\u6570\u7684\u65f6\u5019q1\u7684\u5143\u7d20\u4e2a\u6570\u603b\u662f\u8981\u6bd4q2\u7684\u5143\u7d20\u4e2a\u6570\u59271 \n\t\t{\n\t\t\tq2.push(q1.top());\n\t\t\tq1.pop();\n\t\t} \n\t\tif (i%2!=0) printf(\"%d\\n\",q1.top()); //i\u4e3a\u5947\u6570\u7684\u65f6\u5019q1\u7684\u5806\u9876\u5c31\u662f\u7b54\u6848 \n\t}\n\treturn 0;\n}\n```\n\n\u6700\u540e\u6b22\u8fce\u6765\u5eb7\u5eb7\u4ffa\u7684[CSDN](https://blog.csdn.net/weixin_45485187/article/list/1)\u535a\u5ba2\u554a\u2605~\u2605",
        "postTime": 1566474574,
        "uid": 78568,
        "name": "\u8521\u4fca\u9ee0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "## \u601d\u8def\n\n\u7528\u4e24\u4e2a\u4f18\u5148\u961f\u5217\uff0c\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u4e00\u4e2a\u5c0f\u6839\u5806\n\n\u8fd9\u91cc\u6211\u4eec\u8981\u4fdd\u8bc1\u5c0f\u6839\u5806\u91cc\u7684\u6570\u90fd\u6bd4\u5927\u6839\u5806\u91cc\u7684\u6570\u8981\u5927\uff0c\u6bcf\u6b21\u8f93\u5165\u4e00\u4e2a\u6570\uff0c\u770b\u8fd9\u4e2a\u6811\u662f\u5426\u6bd4\u5927\u6839\u5806\u7684\u5806\u9876\u8981\u5927\uff0c\u5982\u679c\u6bd4\u5927\u6839\u5806\u5806\u9876\u5927\u7684\u8bdd\u653e\u8fdb\u5c0f\u6839\u5806\u4e2d\uff0c\u5426\u5219\u653e\u5165\u5927\u6839\u5806\u4e2d\n\n\u5982\u679c\u4e24\u4e2a\u5806\u4e2d\u5143\u7d20\u4e2a\u6570\u5dee\u5927\u4e8e\u4e861\uff0c\u90a3\u5c31\u770b\u770b\u662f\u54ea\u4e2a\u5806\u7684\u5143\u7d20\u66f4\u591a\u4e00\u4e9b\uff0c\u5c06\u8fd9\u4e2a\u5143\u7d20\u7684\u5806\u9876\u653e\u5230\u53e6\u4e00\u4e2a\u5806\u4e2d\uff0c\u4fdd\u8bc1\u4e86\u4e24\u4e2a\u5806\u7684\u5806\u9876\u4e4b\u4e2d\u4e00\u5b9a\u6709\u4e00\u4e2a\u6570\u662f\u76ee\u524d\u4e2d\u4f4d\u6570\uff0c\u7136\u540e\u8f93\u51fa\u7684\u65f6\u5019\u770b\u770b\u54ea\u4e2a\u5806\u5143\u7d20\u591a\u8f93\u51fa\u54ea\u4e2a\u5806\u7684\u5806\u9876\u5c31\u597d\u4e86\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7b2c\u4e00\u4e2a\u6570\u9700\u8981\u7279\u6b8a\u5904\u7406\uff0c\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\n\n\u8fd8\u6709\u5c31\u662f\uff0c\u5728\u6d1b\u8c37\u4e0a\u7528$size()$\u51fd\u6570\u4e0d\u884c\uff0c\u4f1a$CE$\uff0c\u6240\u4ee5\u8fd9\u91cc\u7528\u4e86\u4e24\u4e2a$cnt$\n\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int read() {\n\tchar c = getchar();\n\tint x = 0, f = 1;\n\tfor( ; !isdigit(c); c = getchar()) if(c == '-') f = -1;\n\tfor( ; isdigit(c); c = getchar()) x = (x << 3) + (x << 1) + (c ^ 48);\n\treturn x * f;\n}\n\npriority_queue<int> qb;\npriority_queue<int, vector<int>, greater<int> > qs;\nint n, topp, a, cnts, cntb;\n\nint main() {\n\tn = read();\n\ttopp = read();\n\tqb.push(topp);\n\tcntb++;\n\tcout << qb.top() << '\\n';\n\tfor(int i = 2; i <= n; i++) {\n\t\ta = read();\n\t\tif(a > qb.top()) qs.push(a), cnts++;\n\t\telse qb.push(a), cntb++;\n\t\twhile(abs(cntb - cnts) > 1) {\n\t\t\tif(cntb > cnts) {\n\t\t\t\tqs.push(qb.top());\n\t\t\t\tcnts++;\n\t\t\t\tqb.pop();\n\t\t\t\tcntb--;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tqb.push(qs.top());\n\t\t\t\tcntb++;\n\t\t\t\tqs.pop();\n\t\t\t\tcnts--;\n\t\t\t}\n\t\t}\n\t\tif(i & 1) printf(\"%d\\n\", cntb > cnts ? qb.top() : qs.top());\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1564397616,
        "uid": 198323,
        "name": "loceaner",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u5e73\u8861\u6811\u53ef\u4ee5\u67e5\u8be2\u6392\u540d\u4e3ak\u7684\u5143\u7d20,\u4e2d\u4f4d\u6570\u5c31\u662f\u6392\u540d\u4e3a\uff08\u5f53\u524di\uff09i/2+1\u7684\u5143\u7d20\u561b;\n~~Slay~~Splay\u662f\u4e00\u79cd\u5f88\u7a33\u7684\u5e73\u8861\u6811,\u5f53\u7136\u5176\u4ed6\u5e73\u8861\u6811\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4e0d\u4f1a\u7684\u540c\u5b66\u53ef\u4ee5\u53bb[\u5b66\u4e60\u4e00\u4e2a\uff0c\u63d0\u9ad8\u4e00\u4e0b\u81ea\u5df1\u7684\u59ff\u52bf\u6c34\u5e73](https://www.luogu.org/problem/P3369)\n\n\u6240\u4ee5\u76f4\u63a5\u6309\u7167\u9898\u610f\u6a21\u62df\u5c31\u5b8c\u4e8b\u4e86:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint n;\n\nclass Splaybuild{\n\n    private:\n\n        #define root tree[0].ch[1]\n        \n        struct Splaynode{\n            int v,fa,rec,size;\n            int ch[2];\n        }tree[1000001];\n        int ni;\n\n        inline void Connect(int id,int fid,int son){\n            tree[fid].ch[son]=id;\n            tree[id].fa=fid;\n        }\n\n        inline void update(int p){\n            tree[p].size=tree[tree[p].ch[0]].size+tree[tree[p].ch[1]].size+tree[p].rec;\n        }\n\n        inline void Rotate(int x){\n            int y=tree[x].fa,z=tree[y].fa;\n            int p,q;\n            if(x==tree[y].ch[1]){p=1;}\n            else{p=0;}\n            if(y==tree[z].ch[1]){q=1;}\n            else{q=0;}\n            Connect(tree[x].ch[p^1],y,p);\n            Connect(y,x,p^1);\n            Connect(x,z,q);update(y);update(x);\n        }\n\n        inline void Splay(int x,int to){\n            int father=tree[to].fa;\n            while(tree[x].fa!=father){\n                int y=tree[x].fa,z=tree[y].fa;\n                int p,q;\n                if(x==tree[y].ch[1]){p=1;}\n                else{p=0;}\n                if(y==tree[z].ch[1]){q=1;}\n                else{q=0;}\n                if(to==y){Rotate(x);}//\u5230\u4efb\u610f\u70b9to;\n                else if(p==q){\n                    Rotate(y);Rotate(x);\n                }else{\n                    Rotate(x);Rotate(x);\n                }\n            }\n        }\n\n        inline int find(int v){\n            int p=root;\n            while(p!=0){\n                if(tree[p].v==v){Splay(p,root);return p;}\n                if(tree[p].v<v){p=tree[p].ch[1];}\n                else{p=tree[p].ch[0];}\n            }return 0;\n        }\n\n        inline void addnode(int fa,int v){\n            tree[++ni].v=v;\n            tree[ni].fa=fa;\n            tree[ni].rec++;\n            tree[ni].size++;\n        }\n\n    public:\n\n        inline void insert(int v){\n            int p=root,nodeid;\n            if(root==0){addnode(0,v);root=ni;return;}\n            while(p!=0){\n                tree[p].size++;\n                if(v==tree[p].v){nodeid=p;tree[p].rec++;break;}\n                if(v<tree[p].v){\n                    if(tree[p].ch[0]==0){\n                        addnode(p,v);nodeid=tree[p].ch[0]=ni;break;\n                    }else{p=tree[p].ch[0];}\n                }else if(v>tree[p].v){\n                    if(tree[p].ch[1]==0){\n                        addnode(p,v);nodeid=tree[p].ch[1]=ni;break;\n                    }else{p=tree[p].ch[1];}\n                }\n            }Splay(nodeid,root);\n        }\n\n        inline void erase(int v){\n            int id=find(v);if(id==0){return;}\n            if(tree[id].rec>1){tree[id].rec--;tree[id].size--;}\n            else if(id!=0){\n                if(tree[id].ch[0]==0&&tree[id].ch[1]==0){\n                    root=0;\n                }else if(tree[id].ch[0]&&tree[id].ch[1]==0){\n                    Connect(tree[id].ch[0],0,1);\n                }else if(tree[id].ch[1]&&tree[id].ch[0]==0){\n                    Connect(tree[id].ch[1],0,1);\n                }else{\n                    int maxson=tree[id].ch[0];\n                    while(tree[maxson].ch[1]!=0){\n                        tree[maxson].size--;\n                        maxson=tree[maxson].ch[1];\n                    }Splay(maxson,root);\n                    Connect(tree[id].ch[1],maxson,1);\n                    Connect(maxson,0,1);//\u63a5\u5230\u6839\u4e0a;\n                    update(maxson);\n                }\n            }\n        }\n\n        inline int levelquery(int v){\n            int id=find(v);\n            return tree[tree[id].ch[0]].size+1;\n        }\n\n        inline int valquery(int i){\n            int p=root;\n            while(p!=0){\n                int size=tree[tree[p].ch[0]].size;\n                if(size<i&&size+tree[p].rec>=i){\n                    Splay(p,root);return tree[p].v;\n                }else if(size+tree[p].rec<i){\n                    i-=size+tree[p].rec;p=tree[p].ch[1];\n                }else{\n                    p=tree[p].ch[0];\n                }\n            }return 0;\n        }\n\n        inline int frontsearch(int v){\n            int p=root,re=0x80000000;\n            while(p!=0){\n                if(tree[p].v>=v){\n                    p=tree[p].ch[0];\n                }else{\n                    re=max(re,tree[p].v);\n                    p=tree[p].ch[1];\n                }\n            }return re;\n        }\n\n        inline int backsearch(int v){\n            int p=root,re=0x7fffffff;\n            while(p!=0){\n                if(tree[p].v>v){\n                    re=min(re,tree[p].v);\n                    p=tree[p].ch[0];\n                }else{\n                    p=tree[p].ch[1];\n                }\n            }return re;\n        }\n\n        inline int frontquery(int v){//\u975e\u4e25\u683c\u524d\u9a71;\n            if(find(v)){return v;}\n            else{return Frontsearch(v);}\n        }\n\n        inline int backquery(int v){//\u975e\u4e25\u683c\u540e\u9a71;\n            if(find(v)){return v;}\n            else{return Backsearch(v);}\n        }\n}s;//\u5c01\u88c5\u4e86\u4e00\u53d1\n\ninline int read(){\n\tint x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){\n        if(ch=='-'){f=-1;}ch=getchar();\n    }while(ch>='0'&&ch<='9'){\n        x=(x<<1)+(x<<3)+(ch^48);ch=getchar();\n    }return x*f;\n}\n\nint main(){\n\tn=read();\n\tfor(int i=1;i<=n;i++){\n\t\ts.insert(read());\n\t\tif(i&1){printf(\"%d\\n\",s.valquery(i/2+1));}\n\t}return 0;\n}\n```\n",
        "postTime": 1564055541,
        "uid": 117068,
        "name": "Zofia",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u5440  \n\u8fd9\u9053\u9898  \n\u4e00\u770b\u5c31\u662f  \n\u6211\u4eec\u719f\u77e5\u7684  **\u4e3b\u5e2d\u6811**  \u554a\uff01  \n\u6c42\u4e2d\u4f4d\u6570\u4e5f\u5c31\u662f\u6c42\u5728\u4e00\u6bb5\u533a\u95f4\u4e2d\u7b2ck\u4f4d\u6570  \n~~\u9a9a\u6c14\u51b2\u5929~~\u7684\u4e3b\u5e2d\u6811\u4fbf\u53ef\u4ee5\u89e3\u51b3\u8bf8\u7c7b\u95ee\u9898  \n\u597d\u5427\uff0c\u4e0aAC\u4ee3\u7801 \n```cpp\n//\u8fd9\u5c31\u662f\u4e3b\u5e2d\u6811\u6a21\u677f\uff0c\u6211\u8ba4\u4e3a\u6ca1\u6709\u4ec0\u4e48\u8981\u89e3\u91ca\u7684\uff0c\u76f4\u63a5\u5957\u6a21\u677f\u5c31\u80fd\u51fa\u6765\n#include<algorithm>\n#include<iostream>\n#include<cstdio>\n#define N 100010\nusing namespace std;\nint n,tot,size,a[N],b[N],rt[N],lc[N<<5],rc[N<<5],sum[N<<5];\nint build(int l,int r)//\u5efa\u6811\n{\n    int now=++tot;\n    sum[now]=0;\n    if(l==r)\n\treturn now;\n    int mid=(l+r)>>1;\n    lc[now]=build(l,mid);\n    rc[now]=build(mid+1,r);\n    return now;\n}\nint fun(int x)\n{\n\treturn lower_bound(b+1,b+1+size,x)-b;\n    //\u4e0d\u4e86\u89e3lower_bound\u7684\uff0c\u6233\u672c\u6587\u672b\u5c3e\u7684\u8be1\u5f02\u84dd\u5b57\n}\nvoid modify(int l,int r,int x,int &y,int t)\n{\n    y=++tot;\n    sum[y]=sum[x]+1;\n    if(l==r)\n\treturn;\n    lc[y]=lc[x];\n    rc[y]=rc[x];\n    int mid=(l+r)>>1;\n    if(t<=mid)\n\tmodify(l,mid,lc[x],lc[y],t);\n    else\n\tmodify(mid+1,r,rc[x],rc[y],t);\n}\nint query(int l,int r,int x,int y,int k)\n{\n    if(l==r) return l;\n    int mid=(l+r)>>1;\n    if(sum[lc[y]]-sum[lc[x]]>=k)\n\treturn query(l,mid,lc[x],lc[y],k);\n    else\n\t{\n\t\tk-=sum[lc[y]]-sum[lc[x]];\n\t\treturn query(mid+1,r,rc[x],rc[y],k);\n\t} \n}\nint main()\n{\n\tint i;\n    cin>>n;\n    for(i=1;i<=n;++i)\n\tcin>>a[i],b[i]=a[i];\n    sort(b+1,b+1+n);\n    size=unique(b+1,b+1+n)-b-1;//\u79bb\u6563b\n    rt[0]=build(1,size);\n    for(i=1;i<=n;++i)\n\tmodify(1,size,rt[i-1],rt[i],fun(a[i]));\n    for(i=1;i<=n;i+=2)\n    cout<<b[query(1,size,rt[0],rt[i],i/2+1)]<<endl;\n    return 0;\n}\n```\nhttps://baike.so.com/doc/5146817-5376788.html",
        "postTime": 1550504757,
        "uid": 51135,
        "name": "\u661f\u4e4b\u6d77",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "###     \u8fd9\u4e2a\u9898\u7b2c\u4e00\u773c\u770b\uff0c\u597d\u50cf\u6bd4\u8f83\u5bb9\u6613\uff0c\u4f46\u4e00\u5f00\u59cb\u5b9e\u73b0\u8d77\u6765\u5e76\u6ca1\u6709\u5f88\u597d\u7684\u601d\u8def        ~~\u6211\u592a\u5f31\u4e86~~\n  \n  \u4e3b\u8981\u601d\u8def\u8fd8\u662f\u5148\u5efa\u7acb\u4e24\u4e2aqueue\uff08STL\u7684\u5806\uff09\uff0c\u6bcf\u6b21\u8fdb\u6765\u4e24\u4e2a\u6570\uff0c\u5c0f\u7684\u7ed9A\uff0c\u5927\u7684\u7ed9B\uff0c\u7136\u540e\u5982\u679cA\u6700\u5927\u7684\u6570\u6bd4B\u6700\u5c0f\u7684\u6570\u5927,\u6267\u884c\u66ff\u6362\u8bed\u53e5\u3002\n   #### \u5176\u5b9e\u8fd9\u4e0d\u662f\u4e00\u4e2a\u65b0\u9896\u7684\u601d\u8def\u4e86\uff01\uff0c\u597d\u51e0\u4e2a\u5927\u4f6c\u5df2\u7ecf\u5728\u9898\u89e3\u4e86\u63d0\u5230\u4e86\u8fd9\u79cd\u65b9\u6cd5\uff01\n   \u4f46STL\u7684\u7cbe\u9ad3\u8fd8\u662f\u6ca1\u6709\u5168\u90e8\u5c55\u73b0\u51fa\u6765\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u51b3\u5b9a\u5728\u53d1\u4e00\u7bc7\u8fd9\u6837\u7684\u9898\u89e3\uff0c\u7b97\u662f\u849f\u84bb\u798f\u5229\u4e86\u5427\u3002\n   ![](http://m.qpic.cn/psb?/V11EH39W1MoxbF/APVeXPttd4KlGJxi8FEyp1tUqnuyv8GlpR8yvuGDpcA!/b/dEABAAAAAAAA&bo=LAGoAAAAAAACd9Y!&rf=viewer_4)\n   \n  \n  # \u4ee3\u7801\uff1a\n   ```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<iostream>\nusing namespace std;\nstruct cmp    \n{\n    inline bool operator () (int &a,int &b)//stl\u81ea\u5e26\u5927\u6839\u5806\uff0c\u6240\u4ee5\u5c0f\u6839\u5806\u9700\u8981\u5199\u6bd4\u8f83\u51fd\u6570\n    {\n        return a>b;\n    }\n};\npriority_queue<int,vector<int> >big1;//\u5927\u6839\u5806\npriority_queue<int,vector<int>,cmp>small2;//\u5c0f\u6839\u5806\nint n,x,y;\nint main()\n{\n    cin>>n;\n    cin>>x;\n    big1.push(x);\n    cout<<x<<endl;\n    for(int i=3;i<=n;i+=2)//\u5f00\u59cb\u8f93\u5165\n    {\n        cin>>x>>y;\n        if(x>y)\n        {\n            int t=x;x=y;y=t;\n        }\n        big1.push(x);\n        small2.push(y);\n        if(big1.top()>=small2.top())\n        {\n            int a=big1.top(),b=small2.top();\n            big1.pop();\n            big1.push(b);\n            small2.pop();\n            small2.push(a);\n        }\n        cout<<big1.top()<<endl;//\u8f93\u51fa\u7ed3\u679c\n    }\n    return 0;\n}\n```\n\u590d\u6742\u5ea6\u7ea6\u4e3aO\uff08nlgn\uff09",
        "postTime": 1540213422,
        "uid": 29384,
        "name": "KING__Arthur",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u9898\u76ee\u8bf4\u660e\u5f88\u7b80\u5355\uff0c\u80fd\u7528\u4e0a\u7684\u6570\u636e\u7ed3\u6784\u4e5f\u633a\u591a\uff0c\u6211\u770b\u5230\u697c\u4e0b\u5927\u4f6c\u6709\u7528\u5355\u8c03\u961f\u5217\u7684\uff0c\u6211\u4e5f\u6ca1\u770b\u61c2\u600e\u4e48\u64cd\u4f5c\uff0c\u8fd8\u6709\u5e73\u8861\u6811\u554a\uff0c\u90fd\u5199\u4e0d\u6765(\u4f60\u4eec\u90fd\u592a\u5f3a\u4e86)\n\n\u4f46\u662f\u53ef\u4ee5\u5199\u5e73\u8861\u6811\u7684\u9000\u5316\u7248\u4e8c\u53c9\u6392\u5e8f\u6811\u3002\n\u4e2d\u4f4d\u6570\u5c31\u662f\u6c42\u7b2c\uff08i+1\uff09 div 2 \u5927\u7684\u6570\uff0c\u6240\u4ee5\u5f88\u663e\u7136\u5c31\u60f3\u5230\u4e86\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u3002\n\n\u627e\u7b2cK\u5927\u7684\u6570\u5c31\u662f\u8981\u7d2f\u8ba1\u5de6\u53f3\u5b50\u6811\u8282\u70b9\u7684\u4e2a\u6570\n\n\u5982\u679ck<=\u5de6\u5b50\u6811\u4e2a\u6570\u5c31\u8bf4\u660e\u5728\u5de6\u5b50\u6811\u91cc\n\n\u5982\u679ck<=\u5de6\u5b50\u6811\u4e2a\u6570\u52a0\u8be5\u8282\u70b9\u4e2a\u6570\uff0c\u8bf4\u660e\u7b54\u6848\u5c31\u662f\u8be5\u8282\u70b9\n\n\u5426\u5219\u5c31\u5728\u53f3\u5b50\u6811\u91cc\u627e\uff08\u7b80\u5355\u7c97\u66b4\uff09\n\n\u4e8c\u53c9\u6392\u5e8f\u6811\u597d\u50cf\u4e0d\u80fd\u5904\u7406\u6709\u76f8\u540c\u7684\u6570\uff0c\u4f46\u53ea\u8981\u6ca1\u6709\u5220\u9664\u64cd\u4f5c\u5c31\u6ca1\u6709\u95ee\u9898\n\n\u6709\u4e9b\u4eba\u4f1a\u8bf4\u4e8c\u53c9\u6392\u5e8f\u6811\u4f1a\u9000\u5316\u6210\u4e00\u4e2a\u7ebf\u6027\u7ed3\u6784\uff0c\u4e0d\u8fc7\u6839\u636e\u6211\u7684\u4eb2\u8eab\u8bd5\u9a8c\u4e0d\u4f1a\u70b8\uff0c\u6570\u636e\u8fd8\u662f\u6709\u70b9\u6c34\n\n\u4e0b\u9762\u770b\n```\nvar\n  len:longint;\n  i,j,m,n,k:longint;\n  f,numl,numr,l,r,num:array[0..1000005]of longint;\nprocedure put(now,p:longint);\nbegin\n  if f[now]=p then inc(num[now])\n  else if f[now]>p then\n    begin\n      inc(numl[now]);\n      if l[now]<>0 then put(l[now],p)\n      else\n        begin\n          inc(len); l[now]:=len; f[len]:=p;\n          num[len]:=1;\n        end;\n    end\n  else\n    begin\n      inc(numr[now]);\n      if r[now]<>0 then put(r[now],p)\n      else\n        begin\n          inc(len); r[now]:=len; f[len]:=p;\n          num[len]:=1;\n        end;\n    end;\nend;\nfunction get(now,tot:longint):longint;\nbegin\n  if tot<=numl[now] then exit(get(l[now],tot))\n  else if tot<=numl[now]+num[now] then exit(f[now])\n  else\n    exit(get(r[now],tot-numl[now]-num[now]));\nend;\nbegin\n  readln(n);\n  read(k); writeln(k);\n  len:=1; f[1]:=k; num[1]:=1;\n  for i:=2 to n do\n    begin\n      read(k);\n      put(1,k);\n      if i mod 2=1 then\n        writeln(get(1,(i+1) div 2));\n    end;\nend.\n```\n\n\n",
        "postTime": 1526562224,
        "uid": 39488,
        "name": "\u56af\u5440\u56af\u5440",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9898\u6838\u5fc3\u5728\u4e8e\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u7528\u5806\u505a\uff0c\u4e0b\u9762\u7684\u5927\u4f6c\u4eec\u8c8c\u4f3c\u5e76\u6ca1\u6709\u4eba\u8be6\u7ec6\u5730\u8bf4\u660e\u539f\u56e0\uff1a\n\n\u8fd9\u9053\u9898\u91cd\u70b9\u5728\u4e8e\uff1a\u6570\u636e\u91cf\u5927\uff0c\u6570\u636e\u65e0\u5e8f\uff0c\u6392\u5e8f\u4e00\u822c\u8d85\u65f6\u3002\n\n\u5047\u8bbe\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u6b64\u9898\u53ef\u4ee5\u7528\u5806\u53bb\u505a\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u81f3\u5c11\u53ef\u4ee5\u77e5\u9053\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u80af\u5b9a\u662f\u4e00\u4e2a\u4e2d\u4f4d\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u7f6e\u4e3a\u7b2c\u4e00\u4e2a\u4e2d\u4f4d\u6570\n\n\u5728\u4e00\u4e32\u5347\u5e8f\u6570\u5217\u4e2d\uff0c\u4efb\u610f\u4e00\u4e2a\u6570\u5b83\u5de6\u8fb9\u7684\u6570\u603b\u662f\u5c0f\u4e8e\u7b49\u4e8e\u5b83\uff0c\u53f3\u8fb9\u7684\u6570\u603b\u662f\u5927\u4e8e\u7b49\u4e8e\u5b83\n\n\u53c8\u56e0\u4e3ak\u59cb\u7ec8\u4e3a\u4e00\u4e2a\u5947\u6570\uff0c\u6240\u4ee5\uff0c\u5176\u4efb\u610f\u4e00\u4e2a\u4e2d\u4f4d\u6570,\u5de6\u8fb9\u6570\u7684\u4e2a\u6570\u6052\u7b49\u4e8e\u53f3\u8fb9\u6570\u7684\u4e2a\u6570\n\n\u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u53bb\u7ef4\u62a4\u5b83\uff0c\u4ece\u4e0a\u9762\u7684\u5e9f\u8bdd\u4e2d\u6458\u53d6\u51e0\u4e2a\u6709\u6548\u6761\u4ef6\uff1a\n\n1.\u4efb\u610f\u4e00\u4e2a\u6570\u5b83\u5de6\u8fb9\u7684\u6570\u603b\u662f\u5c0f\u4e8e\u7b49\u4e8e\u5b83\uff0c\u53f3\u8fb9\u7684\u6570\u603b\u662f\u5927\u4e8e\u7b49\u4e8e\u5b83\n\n2.\u4efb\u610f\u4e00\u4e2a\u4e2d\u4f4d\u6570,\u5de6\u8fb9\u6570\u7684\u4e2a\u6570\u6052\u7b49\u4e8e\u53f3\u8fb9\u6570\u7684\u4e2a\u6570\n\n\u7ecf\u8fc7\u4e00\u7cfb\u5217\u66b4\u529b\u641c\u7d22\u6240\u6709\u6570\u636e\u7ed3\u6784\u7684\u5b9a\u4e49\uff0c\u5806\u663e\u7136\u662f\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\uff1a\n\n1.\u5927\u6839\u5806\u4e2d\uff0c\u6839\u6c38\u8fdc\u662f\u6700\u5927\u7684\uff0c\u7b26\u5408\uff1a\u5de6\u8fb9\u7684\u6570\u603b\u662f\u5c0f\u4e8e\u7b49\u4e8e\u5b83\n\n2.\u5c0f\u6839\u5806\u4e2d\uff0c\u6839\u6c38\u8fdc\u662f\u6700\u5c0f\u7684\uff0c\u7b26\u5408\uff1a\u53f3\u8fb9\u7684\u6570\u603b\u662f\u5927\u4e8e\u7b49\u4e8e\u5b83\n\n\u4e3a\u4e86\u66f4\u597d\u5730\u4fdd\u8bc1\u5de6\u8fb9\u6570\u7684\u4e2a\u6570\u6052\u7b49\u4e8e\u53f3\u8fb9\u6570\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u4e00\u6b21\u5faa\u73af\u8bfb\u5165\u4e24\u4e2a\u6570\n\n\u5f53\u5176\u4e2d\u67d0\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u5f53\u524d\u4e2d\u4f4d\u6570\u65f6\uff0c\u628a\u5b83\u653e\u5165\u5c0f\u6839\u5806\uff0c\u53cd\u4e4b\u4ea6\u53cd\n\n\u5f53\u7136\uff0c\u7531\u4e8ek\u6052\u4e3a\u4e00\u5947\u6570\uff0c\u6240\u4ee5\uff0c\u4e0d\u53ef\u80fd\u4f7f\u5f97\u5de6\u8fb9\u6570\u7684\u4e2a\u6570\u6052\u7b49\u4e8e\u53f3\u8fb9\u6570\u7684\u4e2a\u6570\uff0c\u4f46\u8fd9\u5e76\u4e0d\u8981\u7d27\n\n\u6211\u4eec\u53ef\u4ee5\u4ee4\u5927\u6839\u5806\u7684\u6839\u4e3a\u4e2d\u4f4d\u6570\uff08\u5176\u5b9e\u4e5f\u53ef\u4ee5\u4ee4\u5c0f\u6839\u5806\u7684\u6839\u4e3a\u4e2d\u4f4d\u6570 PS\uff1a\u4e0b\u9762\u6709\u5927\u4f6c\u5199\u4e86\uff09\n\n\u4ee4big\\_heap\u4e3a\u5927\u6839\u5806\uff0clit\\_heap\u4e3a\u5c0f\u6839\u5806\uff0c\u5bf9\u5e94\u7684\uff0clit\\_heap\\_size = big\\_heap\\_size - 1\n\n\u63a5\u4e0b\u6765\u8981\u505a\u7684\uff0c\u5c31\u662f\u7ee7\u7eed\u7ef4\u62a4\u8fd9\u4e24\u4e2a\u5806\uff0c\u4f7f\u5f97\uff1alit\\_heap\\_size = big\\_heap\\_size - 1\n\n\u5f53lit\\_heap\\_size > big\\_heap\\_size - 1(lit\\_heap\\_size >= big\\_heap\\_size)\u65f6\uff1a\n\n\u5c06\u5c0f\u6839\u5806\u4e2d\u7684\u6700\u5c0f\u503c\u79fb\u5411\u5927\u6839\u5806\u3002\n\n\u5f53lit\\_heap\\_size < big\\_heap\\_size - 1\u65f6\uff1a\n\n\u5c06\u5927\u6839\u5806\u4e2d\u7684\u6700\u5927\u503c\u79fb\u5411\u5c0f\u6839\u5806\u3002\n\n\u5219\u4e0a\u8ff0\u8fc7\u7a0b\u8fc7\u540e\uff0c\u5927\u6839\u5806\u4e2d\u7684\u6839\uff0c\u5373\u4e3a\u7b54\u6848\u3002\n\n```cpp\n#include<cstdio>\nvoid swap(int &a,int &b){int tmp = a;a = b;b = tmp;}\nint n,value,val,big_heap[100010],lit_heap[100010],big_heap_size,lit_heap_size,mid;\nvoid big_put(int v){\n    big_heap[++big_heap_size] = v;\n    int now = big_heap_size,next;\n    while(now > 1){\n        next = now >> 1;\n        if(big_heap[now] <= big_heap[next]) return;\n        swap(big_heap[next],big_heap[now]);\n        now = next;\n    }\n}\nint big_get(){\n    int now = 1,next,v = big_heap[1];\n    big_heap[1] = big_heap[big_heap_size--];\n    while(now << 1 <= big_heap_size){\n        next = now << 1;\n        if(next < big_heap_size && big_heap[next + 1] > big_heap[next]) next++;\n        if(big_heap[now] >= big_heap[next]) break;\n        swap(big_heap[next],big_heap[now]);\n        now = next;\n    }\n    return v;\n}\nvoid lit_put(int v){\n    lit_heap[++lit_heap_size] = v;\n    int now = lit_heap_size,next;\n    while(now > 1){\n        next = now >> 1;\n        if(lit_heap[now] >= lit_heap[next]) return;\n        swap(lit_heap[next],lit_heap[now]);\n        now = next;\n    }\n} \nint lit_get(){\n    int now = 1,next,v = lit_heap[1];\n    lit_heap[1] = lit_heap[lit_heap_size--];\n    while(now << 1 <= lit_heap_size){\n        next = now << 1;\n        if(next < lit_heap_size && lit_heap[next + 1] < lit_heap[next]) next++;\n        if(lit_heap[now] <= lit_heap[next]) break;\n        swap(lit_heap[next],lit_heap[now]);\n        now = next;\n    }\n    return v;\n}\n//\u65e5\u5e38\u5806\u64cd\u4f5c \nint main(){\n    scanf(\"%d %d\",&n,&value);\n    big_put(value);//\u5c06\u7b2c\u4e00\u4e2a\u4e2d\u4f4d\u6570\u7f6e\u5165\u5927\u6839\u5806\u4e2d \n    printf(\"%d\",mid = value);//\u5de7\u5999\u5730\u8f93\u51fa \n    //i << 1 < n\u8868\u793ai * 2 <= n - 1\n    for(int i = 1;i << 1 < n;i++){\n        scanf(\"%d %d\",&value,&val);\n        if(value > mid) lit_put(value); else big_put(value);\n        if(val > mid) lit_put(val); else big_put(val);\n        if(lit_heap_size >= big_heap_size) big_put(lit_get());\n        if(lit_heap_size < big_heap_size - 1) lit_put(big_get());\n        printf(\"\\n%d\",mid = big_heap[1]);//\u5c06\u5927\u6839\u5806\u4e2d\u7684\u6839\u7f6e\u4e3a\u65b0\u7684\u4e2d\u4f4d\u6570\n        //\u8be6\u60c5\u8bf7\u89c1\u5206\u6790 \n    }\n    return 0;\n}\n```\n\u3010\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u4e0d\u5efa\u8bae\u5927\u5bb6\u98df\u7528\u3011STL\u7248\u672c\n\n```cpp\n#include<cstdio>\n#include<iterator>\n#include<algorithm>\nvoid swap(int &a,int &b){int tmp = a;a = b;b = tmp;}\nint n,value,val,big_heap[100010],lit_heap[100010],big_heap_size,lit_heap_size,mid;\nvoid big_put(int v){\n    big_heap[++big_heap_size] = v;\n    std::push_heap(big_heap + 1,big_heap + big_heap_size + 1);\n}\nint big_get(){\n    std::pop_heap(big_heap + 1,big_heap + big_heap_size + 1);\n    return big_heap[big_heap_size--];\n}\nvoid lit_put(int v){\n    lit_heap[++lit_heap_size] = v;\n    std::push_heap(lit_heap + 1,lit_heap + lit_heap_size + 1,std::greater<int>());\n} \nint lit_get(){\n    std::pop_heap(lit_heap + 1,lit_heap + lit_heap_size + 1,std::greater<int>());\n    return lit_heap[lit_heap_size--];\n}\n//STL\u5806\u64cd\u4f5c \nint main(){\n    scanf(\"%d %d\",&n,&value);\n    big_put(value);//\u5c06\u7b2c\u4e00\u4e2a\u4e2d\u4f4d\u6570\u7f6e\u5165\u5927\u6839\u5806\u4e2d \n    printf(\"%d\",mid = value);//\u5de7\u5999\u5730\u8f93\u51fa \n    //i << 1 < n\u8868\u793ai * 2 <= n - 1\n    for(int i = 1;i << 1 < n;i++){\n        scanf(\"%d %d\",&value,&val);\n        if(value > mid) lit_put(value); else big_put(value);\n        if(val > mid) lit_put(val); else big_put(val);\n        if(lit_heap_size >= big_heap_size) big_put(lit_get());\n        if(lit_heap_size < big_heap_size - 1) lit_put(big_get());\n        printf(\"\\n%d\",mid = big_heap[1]);//\u5c06\u5927\u6839\u5806\u4e2d\u7684\u6839\u7f6e\u4e3a\u65b0\u7684\u4e2d\u4f4d\u6570\n        //\u8be6\u60c5\u8bf7\u89c1\u5206\u6790 \n    }\n    return 0;\n}\n```",
        "postTime": 1500473254,
        "uid": 19778,
        "name": "water_mi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u67d0\u849f\u84bb\u4e0d\u4f1a\u5e73\u8861\u6811\u3002\u3002\n\n\u624b\u5199BIT+Binary\u8fd8\u70b8\u6389\u4e86\u3002\u3002\n\n\u4e8e\u662f\u5199heap\uff0c\u8dd1\u5f97\u8d3c\u5feb\uff0c\u5171150ms\u4e0a\u4e0b\u3002\n\n\u53c2\u7167\u697c\u4e0b\u4e00\u4f4d\u5927\u4f6c\u7684\u601d\u8def\uff0c\u73b0\u5728\u8be6\u7ec6\u7684\u9610\u91ca\u4e00\u4e0b\u3002\n\n\u5c31\u662f\u7ef4\u62a4\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u5e76\u4fdd\u8bc1\u5982\u4e0b\u51e0\u70b9\uff1a\n\n1\u3001\u5f00\u59cb\u65f6\u5c0f\u6839\u5806\u6709\u4e00\u4e2a\u5143\u7d20a[1]\uff0c\u5927\u6839\u5806\u4e3a\u7a7a\uff1b\n\n2\u3001\u6bcf\u6b65\u63d2\u5165\u5171\u4e24\u4e2a\u5143\u7d20\uff1b\n\n3\u3001\u6bcf\u6b65\u64cd\u4f5c\u540e\uff0c\u4fdd\u8bc1\u5c0f\u6839\u5806\u89c4\u6a21\u6bd4\u5927\u6839\u5806\u89c4\u6a21\u59271\uff0c\u4e14\u5c0f\u6839\u5806\u9876>=\u5927\u6839\u5806\u9876\u3002\n\n\u8fd9\u6837\u6bcf\u6b21\u4e2d\u4f4d\u6570\u5c31\u662f\u5c0f\u6839\u5806\u9876\u3002\n\n ![](https://cdn.luogu.com.cn/upload/pic/6273.png) \n\n\u63d2\u5165\u6570\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u4e00\u4e2a\uff0c\u4e0e\u5c0f\u3001\u5927\u6839\u5806\u9876\u6bd4\u8f83\uff0c\u51b3\u5b9a\u63d2\u5165\u54ea\u4e2a\u5806\u3002\n\n\uff08\u8fd9\u662f\u672c\u849f\u84bb\u60f3\u5230\u7684\u529e\u6cd5\uff0c\u53ef\u80fd\u8fd8\u6709\u66f4\u4f18\u65b9\u5f0f\uff0c\u4e0d\u559c\u52ff\u55b7\uff09\n\n\u00b7\u00b7\u00b7cpp\n\n```cpp\n#include<bits/stdc++.h>\n#define mem(a) memset(a,0,sizeof(a))\nusing namespace std;\nint t;\nvoid Swap(int &x,int &y){\n    t=x;\n    x=y;\n    y=t;\n}//STL\u7684swap\u6162\u5f97\u6709\u7406\u6709\u636e\uff0c\u6240\u4ee5\u624b\u5199\nstruct b_heap{\n    int a[50010],top,i,k;//\u5f00\u4e00\u534a\u5c31\u591f\n    int getop(){\n        return a[1];\n    }\n    void up(int x){\n        while (x>1){\n            i=x>>1;\n            if (a[i]<a[x]){\n                Swap(a[i],a[x]);\n                x=i;\n            }else break;\n        }\n    }\n    int maxi(int x,int y){\n        if (y>top||a[x]>a[y]) return x;\n        return y;\n    }\n    void down(){\n        k=1;\n        while (k<<1<=top){\n            i=maxi(k<<1,k<<1|1);\n            if (a[i]>a[k]){\n                Swap(a[i],a[k]);\n                k=i;\n            }else break;\n        }\n    }\n    void ins(int x){\n        a[++top]=x;\n        up(top);\n    }\n    void del(){\n        a[1]=a[top];\n        a[top--]=0;\n        down();\n    }\n    void clear(){\n        mem(a);\n        top=0;\n    }\n    void print(){\n        for (i=1;i<=top;i++) printf(\"%d \",a[i]);\n        printf(\"\\n\");\n    }\n}bd;\nstruct s_heap{\n    int a[50010],top,i,k;\n    int getop(){\n        return a[1];\n    }\n    void up(int x){\n        while (x>1){\n            i=x>>1;\n            if (a[i]>a[x]){\n                Swap(a[i],a[x]);\n                x=i;\n            }else break;\n        }\n    }\n    int mini(int x,int y){\n        if (y>top||a[x]<a[y]) return x;\n        return y;\n    }\n    void down(){\n        k=1;\n        while (k<<1<=top){\n            i=mini(k<<1,k<<1|1);\n            if (a[i]<a[k]){\n                Swap(a[i],a[k]);\n                k=i;\n            }else break;\n        }\n    }\n    void ins(int x){\n        a[++top]=x;\n        up(top);\n    }\n    void del(){\n        a[1]=a[top];\n        a[top--]=0;\n        down();\n    }\n    void clear(){\n        mem(a);\n        top=0;\n    }\n    void print(){\n        for (i=1;i<=top;i++) printf(\"%d \",a[i]);\n        printf(\"\\n\");\n    }\n}sd;\nint n,a[100001],i,x,y;\nint main(){\n    scanf(\"%d\",&n);\n    for (i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n    sd.ins(a[1]);\n    printf(\"%d\\n\",a[1]);\n    for (i=3;i<=n;i+=2){\n        x=a[i-1],y=sd.getop();\n        if (x>y){\n            sd.ins(x);\n            sd.del();\n            bd.ins(y);\n        }else bd.ins(x);\n        x=a[i],y=bd.getop();\n        if (x<y){\n            bd.ins(x);\n            bd.del();\n            sd.ins(y);\n        }else sd.ins(x);//\u795e\u5947\u64cd\u4f5c\n        printf(\"%d\\n\",sd.getop());\n    }\n    return 0;\n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1499866000,
        "uid": 13940,
        "name": "pupuvovovovovo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u5c31\u6ca1\u6709\u6b63\u5e38\u70b9\u7684\u9898\u89e3\u5417\uff1f\n\n\n\u4e0d\u8981\u603b\u7528stl\n\n\n\u8fd9\u9898\u4e5f\u6ca1\u6709\u90a3\u4e48\u9ebb\u70e6\n\n\n\u76f4\u63a5\u79bb\u6563\u5316\n\n\n\u7136\u540e\u7528\u6743\u503c\u7ebf\u6bb5\u6811\n\n\u53ea\u8981\u63d2\u5165\n\n\u548c\u7c7b\u4f3c\u4e8e\u5e73\u8861\u6811\u7684\u67e5\u8be2\u7b2ck\u4e2a\u6570\n\n\n\u7528zkw\u5b9e\u73b0\u6bd4\u8f83\u65b9\u4fbf\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\n\n#define For( i , _Begin , _End ) for( int i = (_Begin) , i##END = (_End) ; i <= (i##END) ; i++ )\n\ntemplate< typename Type >inline void Read( Type &In ){\n    In = 0;char ch = getchar();\n    for( ;ch> '9'||ch< '0';ch=getchar() );\n    for( ;ch>='0'&&ch<='9';ch=getchar() )In = In*10 + ch-'0';\n}\n\nstatic const int MAXN = 1e6;\n\nint n;\nint A[MAXN];\npair< int , int >pt[MAXN];\n\nnamespace Zkw{\n    \n    int M;\n    int Sz[MAXN];\n    \n    void Insert( int x ){ for( x += M ; x ; x >>= 1 )Sz[x]++; }\n    \n    int Query( int x ){\n        int rt = 1;\n        while( rt < M )\n            if( x <= Sz[ rt<<1 ] )rt <<= 1;\n            else x -= Sz[ rt<<1 ] , rt = rt<<1|1;\n        return pt[ rt - M ].first;\n    }\n    \n}using namespace Zkw;\n\nint main(){\n    \n    Read( n );\n    For( i , 1 , n )Read( pt[i].first ) , pt[i].second = i;\n    \n    for( M = 1 ; M < n + 2 ; M <<= 1 );\n    sort( 1 + pt , 1 + n + pt );\n    For( i , 1 , n )A[ pt[i].second ] = i;\n    \n    For( i , 1 , n ){\n        Insert( A[i] );\n        if( i & 1 )printf(\"%d\\n\",Query( ( i >> 1 ) + 1 ));\n    }\n    \n    return 0;\n}\n```",
        "postTime": 1498396068,
        "uid": 20116,
        "name": "never_see",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u7528\u4e86\u8d85\u7eb2\u7684SBT\u505a\u51fa\u6765\u7684==\n\n\u65e2\u7136\u662fBST(\u4e8c\u53c9\u641c\u7d22\u6811) \u53ef\u4ee5\u8f7b\u6613\u505a\u5230logn\u7684\u52a0\u5165\u5143\u7d20\n\n\u7136\u540e\u901a\u8fc7size\u57df\u6765\u627e\u5230\u4e2d\u4f4d\u6570\n\n\u53cd\u6b63\u4e0d\u7528\u91cd\u5408\u76f8\u540c\u5143\u7d20\u4e5f\u4e0d\u7528\u5220\u9664\u5c31\u7b80\u5355\u591a\u4e86(x(\u221a)\n\n\u4ee5\u4e0b\u4ee3\u7801\n\n\u867d\u8bf4\u5de6\u65cb\u53f3\u65cb\u4e0d\u9700\u8981\u4f46\u8fd8\u662f\u4e60\u60ef\u6027\u5199\u4e0a\u4e86 \u6b63\u597d\u590d\u4e60\u4e00\u4e0b\n\n\n\n    \n\n```cpp\n#include <stdio.h>\n#define L_ROTATE(b) {bfa=b->R;b->R=bfa->L;bfa->L=b;bfa->Size=b->Size;b->Size=b->R->Size+b->L->Size+1;b=bfa;}\n#define R_ROTATE(b) {bfa=b->L;b->L=bfa->R;bfa->R=b;bfa->Size=b->Size;b->Size=b->L->Size+b->R->Size+1;b=bfa;}\nint N,Ns[110000];\ntypedef struct Node\n{\n    int Value;\n    int Size;\n    Node*R,*L;\n    Node* AutoRotate(int yl);\n}ND,*LPND;\nLPND bfa;\nLPND ND::AutoRotate(int yl)\n{\n    LPND d=this;\n    if(yl)\n    {\n        if(d->L->L->Size>d->R->Size)\n            R_ROTATE(d)\n        else\n            if(d->L->R->Size>d->R->Size)\n            {\n                L_ROTATE(d->L);\n                R_ROTATE(d);\n            }\n    }\n    else\n    {\n        if(d->R->R->Size>d->L->Size)\n            L_ROTATE(d)\n        else\n            if(d->R->L->Size>d->L->Size)\n            {\n                R_ROTATE(d->R);\n                L_ROTATE(d);\n            }\n    }\n    return d;\n}\ntypedef struct SBTree\n{\n    LPND Null;\n    LPND Root;\n    SBTree(){Null=new ND;Null->R=Null->L=0;Null->Size=0;Root=Null;}\n    void Insert(int a){Root=Insert_(Root,a);}\n    int GetMid(){return GetMid_(Root,0,0);}\n```\nprivate:\n\n\n\n\n    \n\n```cpp\n    LPND Insert_(LPND P,int a);\n    int GetMid_(LPND p,int lw,int rw);\n}SBT;\nLPND SBT::Insert_(LPND P,int a)\n{\n    if(P==Null)\n    {\n        LPND p=new ND;\n        p->Value=a;\n        p->Size=1;\n        p->L=p->R=Null;\n        return p;\n    }\n    ++P->Size;\n    if(a>P->Value)\n    {\n        P->R=Insert_(P->R,a);\n        P=P->AutoRotate(0);\n    }\n    else\n    {\n        P->L=Insert_(P->L,a);\n        P=P->AutoRotate(1);\n    }\n    return P;\n}\nint SBT::GetMid_(LPND p,int lr,int rr)\n{\n    if(lr+p->L->Size==rr+p->R->Size)\n        return p->Value;\n    if(lr+p->L->Size<rr+p->R->Size)\n        return GetMid_(p->R,lr+p->L->Size+1,rr);\n    else return GetMid_(p->L,lr,rr+p->R->Size+1);\n}\nvoid Input()\n{\n    scanf(\"%d\",&N);\n    int wi;\n    for(wi=1;wi<=N;++wi)\n        scanf(\"%d\",Ns+wi);\n}\nSBT Tr;\nint main()\n{\n    Input();\n    int wi;\n    for(wi=1;wi<=N;++wi)\n    {\n        Tr.Insert(Ns[wi]);\n        if(wi%2)\n            printf(\"%d\\n\",Tr.GetMid());\n    }\n    return 0;\n}\n\n```",
        "postTime": 1488701149,
        "uid": 25508,
        "name": "Night_Aurora",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u7ef4\u62a4\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5927\u6839\u5806\u5b58\u653e<=\u4e2d\u4f4d\u6570\u7684\u503c\uff0c\u5c0f\u6839\u5806\u5b58\u653e>=\u4e2d\u4f4d\u6570\u7684\u503c\uff0c\u4fdd\u8bc1\u5c0f\u6839\u5806\u6bd4\u5927\u6839\u5806\u89c4\u6a21\u59271\u3002\n\n\u7ef4\u62a4\u7684\u65f6\u5019\u53ef\u4ee5\u5148\u6839\u636e\u4e0a\u6b21mid\u66b4\u529b\u63d2\u5165\uff0c\u518d\u8c03\u6574\u89c4\u6a21\u3002\u590d\u6742\u5ea6\u663e\u7136\u662fO(nlogn)\u7684\u3002\n\n\u653e\u4e24\u4e2a\u7248\u672c\u7684\n\n\u624b\u5199\u5806\n\n```cpp\n\n#include<cstdio>\n#include<algorithm>\n#define maxn 200009\nusing namespace std;\nint a[maxn], b[maxn], len = 0, len2 = 0;\nvoid add(int x){\n    a[++len] = x; int p = len;\n    while (p > 1 && a[p >> 1] > a[p]) {swap(a[p], a[p >> 1]);p >>= 1;}\n}\nint put(){\n    int x = a[1], p = 1, son; a[1] = a[len--];\n    while ((p << 1) <= len){\n        son = p << 1;\n        if (son < len && a[son + 1] < a[son]) ++son;\n        if (a[son] < a[p]) {\n            swap(a[p], a[son]);\n            p = son;\n        }\n        else p = len + 1;\n    }\n    return x;\n}\nvoid add2(int x){\n    b[++len2] = x; int p = len2;\n    while (p > 1 && b[p >> 1] < b[p]) {swap(b[p], b[p >> 1]);p >>= 1;}\n}\nint put2(){\n    int x = b[1], p = 1, son; b[1] = b[len2--];\n    while ((p << 1) <= len2){\n        son = p << 1;\n        if (son < len2 && b[son + 1] > b[son]) ++son;\n        if (b[son] > b[p]) {\n            swap(b[p], b[son]);\n            p = son;\n        }\n        else p = len2 + 1;\n    }\n    return x;\n}\nint main(){\n    int n, x1, x2, mid;\n    scanf(\"%d\", &n);\n    scanf(\"%d\", &x1);\n    add(x1); printf(\"%d\\n\", mid = x1);\n    for (int i = 1; i <= ((n-1)>>1); i++){\n        scanf(\"%d%d\", &x1, &x2);\n        if (x1 < mid)add2(x1); else add(x1);\n        if (x2 < mid)add2(x2); else add(x2);\n        while (len2 >= len) add(put2());\n        while (len2 < len - 1) add2(put());\n        printf(\"%d\\n\", mid = a[1]);\n    }\n    return 0;\n}\n\n\n```\n\n\nSTL\u5927\u6cd5\u597d\n\n```cpp\n\n#include<cstdio>\n#include<queue>\n#define ins(x) ((x) < mid ? L.push(x) : R.push(x))\nusing namespace std;\npriority_queue<int> L;\npriority_queue<int, vector<int>, greater<int> > R;\nint main(){\n    int n, x1, x2, mid;\n    scanf(\"%d%d\", &n, &x1);\n    R.push(x1);\n    printf(\"%d\\n\", mid = x1);\n    for (int i = 1; i <= ((n-1)>>1); i++){\n        scanf(\"%d%d\", &x1, &x2);\n        ins(x1); ins(x2);\n        while (L.size() >= R.size()) {R.push(L.top()); L.pop();}\n        while (L.size() < R.size() - 1){L.push(R.top()); R.pop();}\n        printf(\"%d\\n\", mid = R.top());\n    }\n    return 0;\n}\n\n\n```",
        "postTime": 1462957166,
        "uid": 6553,
        "name": "why_always_china",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7528\u4e8c\u53c9\u6392\u5e8f\u6811\u53ef\u5f9780\u5206\u3002\u6bcf\u6b21\u63d2\u5165\u4e24\u4e2a\u6570\uff0c\u7686\u6bd4\u73b0\u4e2d\u4f4d\u6570\u5927\u5219\u6c42\u540e\u7ee7\uff0c\u82e5\u7686\u5c0f\u5219\u6c42\u524d\u9a71\u3002\u90a3\u4e48\u4e07\u4e00\u7b49\u4e8e\u5462\uff1f\u7528\u4e86\u4e00\u4e2a\u6bd4\u8f83\u7325\u7410\u7684\u529e\u6cd5\uff0c\u5927\u5bb6\u81ea\u5df1\u770b\u5427\u2026\u2026\n\n```delphi\n\ntype tree=^node;\n     node=record\n     k:real;\n     l,r,f:tree;\nend;\nvar bst,p,mid:tree;\n    n,i:longint;\n    a,b:real;\nprocedure insert(var bst:tree;p:tree);\nbegin\n  if bst=nil then bst:=p\n  else\n  begin\n    p^.f:=bst;\n    if bst^.k<=p^.k then\n    insert(bst^.r,p)\n    else insert(bst^.l,p);\n  end;\nend;\n\nfunction min(bst:tree):tree;\nvar p:tree;\nbegin\n  p:=bst;\n  while p^.l<>nil do p:=p^.l;\n  min:=p;\nend;\n\nfunction max(bst:tree):tree;\nvar p:tree;\nbegin\n  p:=bst;\n  while p^.r<>nil do p:=p^.r;\n  max:=p;\nend;\n\nfunction pre(t:tree):tree;\nvar p:tree;\nbegin\n  if t^.l<>nil then pre:=max(t^.l) else\n  begin\n    p:=t^.f;\n    while(p^.f<>nil)and(t=p^.l)do\n    begin t:=p;p:=p^.f;end;\n    pre:=p;\n  end;\nend;\n\nfunction suc(t:tree):tree;\nvar p:tree;\nbegin\n  if t^.r<>nil then suc:=min(t^.r) else\n  begin\n    p:=t^.f;\n    while(p^.f<>nil)and(t=p^.r)do\n    begin t:=p;p:=p^.f;end;\n    suc:=p;\n  end;\nend;\n\nfunction search(bst,t:tree):tree;\nbegin\n  if bst^.k=t^.k then exit(bst) else\n  if bst^.k<=t^.k then search:=search(bst^.r,t)\n  else search:=search(bst^.l,t);\nend;\n\nbegin\n  readln(n);\n  read(a);writeln(trunc(a));\n  new(bst);bst^.k:=a;\n  bst^.f:=nil;bst^.l:=nil;bst^.r:=nil;\n  mid:=bst;\n  for i:=2 to (n+1)div 2 do\n  begin\n    read(a,b);\n    new(p);p^.k:=a+2*(i-1)/(n+1);\n    p^.f:=nil;p^.l:=nil;p^.r:=nil;\n    insert(bst,p);\n    new(p);p^.k:=b+(2*i-1)/(n+1);\n    p^.f:=nil;p^.l:=nil;p^.r:=nil;\n    insert(bst,p);\n    mid:=search(bst,mid);\n    if(a>mid^.k)and(b>mid^.k)then mid:=suc(mid)\n    else if(a<mid^.k)and(b<mid^.k) then mid:=pre(mid);\n    writeln(trunc(mid^.k));\n  end;\n  if not odd(n)then read(a);\nend.\n\n```",
        "postTime": 1445093369,
        "uid": 2248,
        "name": "\u6c47\u6587\u5ba2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u9898\u89e3\u533a\u91cc\u9762\u533a\u95f4\u7b2cK\u5927\u6c42\u6cd5\u597d\u50cf\u90fd\u662f\u7528\u4e3b\u5e2d\u6811\u5199\u7684\uff0c\u5176\u5b9e\u7ebf\u6bb5\u6811\u4e5f\u662f\u80fd\u6c42\u533a\u95f4\u7b2cK\u5927\u7684\uff0c\u53ea\u662f\u901f\u5ea6\u4e0a\u4e0d\u5982\u4e3b\u5e2d\u6811\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u7b2cK\u5927\u6c42\u6cd5\u3002\n\n\u5efa\u6811\u90e8\u5206\u548c\u5f52\u5e76\u6392\u5e8f\u5f88\u50cf\uff0c\u628a\u6bcf\u4e2a\u5b50\u533a\u95f4\u7684\u7b2cK\u5927\u6c42\u51fa\u6765\n```cpp\nvoid build(int p,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tq[p].push_back(0);\n\t\tq[p].push_back(a[l]);\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(p<<1,l,mid);\n\tbuild(p<<1|1,mid+1,r);\n\tint ls=q[p<<1].size()-1,rs=q[p<<1|1].size()-1;\n\tq[p].push_back(0);\n\tint i=1,j=1;\n\twhile(i<=ls&&j<=rs)\n\t{\n\t\tif(q[p<<1][i]<q[p<<1|1][j])\t\t\n\t\tq[p].push_back(q[p<<1][i++]);\t\t\n\t\telse\n\t\tq[p].push_back(q[p<<1|1][j++]);\n\t}\n\twhile(i<=ls)\n\tq[p].push_back(q[p<<1][i++]);\n\twhile(j<=rs)\n\tq[p].push_back(q[p<<1|1][j++]);\n\treturn ;\n}\n```\n\n\u67e5\u627e\u7684\u8bdd\u5c31\u662f\u4e8c\u5206\u67e5\u627e\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u7b97\u597d\u4e86\u6bcf\u4e2a\u533a\u95f4\u5185\u7684\u6570\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u5df2\u7ecf\u6392\u597d\u5e8f\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u901a\u8fc7\u5224\u65ad\u5c0f\u4e8e\u4ed6\u7684\u6570\u6709\u6ca1\u6709K\u4e2a\u6765\u5224\u65ad\u5c31\u884c\u4e86\uff0c\u6709\u7684\u8bdd\u53f3\u79fb\uff0c\u6ca1\u6709\u7684\u8bdd\u5de6\u79fb\u3002\n```cpp\nint serch(int l,int r,int k)\n{\n\tint L=0,R=0x7fffffff;\n\tint num=a[l];\n\twhile(L<=R)\n\t{\n\t\tint mid=(L+R)>>1;\n\t\tif(query(1,1,n,l,r,mid)>=k)\n\t\t{\n\t\t\tnum=mid;\n\t\t\tR=mid-1;\n\t\t}\n\t\telse\n\t\tL=mid+1;\n\t}\n\treturn num;\n}\n```\n\n\u6ce8\u610f\u6570\u7ec4\u8981\u7528\u4e0d\u5b9a\u957f\u6570\u7ec4\uff0c\u4e0d\u7136n^2\u7684\u7a7a\u95f4\u5f00\u4e0d\u4e86\u90a3\u4e48\u5927\u3002\n\n\u6700\u540e\u9644\u4e0a\u5b8c\u6574\u4ee3\u7801\u56e0\u4e3a\u6570\u636e\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5\u901a\u8fc7\u7684\u975e\u5e38\u6781\u9650\uff0c~~\u6211\u540c\u4e00\u4efd\u4ee3\u7801\u7b2c\u4e00\u6b21T\u4e862\u4e2a\u70b9\uff0c\u7b2c\u4e8c\u6b21\u624d\u901a\u8fc7\u7684~~\n\n```cpp\n#include<bits/stdc++.h>\n#define N 555555\nusing namespace std;\nint n,m;\nint a[N];\nvector<int>q[N];\nint read()//\u52a0\u5feb\u8bfb\uff0c\u4e0d\u52a0\u5feb\u8bfb\u53ef\u80fd\u90fd\u8fc7\u4e0d\u53bb\u3002\n{\n\tint s=0,f=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tif(c=='-')f=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\ts=(s<<3)+(s<<1)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn s*f;\n}\nvoid build(int p,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tq[p].push_back(0);\n\t\tq[p].push_back(a[l]);\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(p<<1,l,mid);\n\tbuild(p<<1|1,mid+1,r);\n\tint ls=q[p<<1].size()-1,rs=q[p<<1|1].size()-1;\n\tq[p].push_back(0);\n\tint i=1,j=1;\n\twhile(i<=ls&&j<=rs)\n\t{\n\t\tif(q[p<<1][i]<q[p<<1|1][j])\t\t\n\t\tq[p].push_back(q[p<<1][i++]);\t\t\n\t\telse\n\t\tq[p].push_back(q[p<<1|1][j++]);\n\t}\n\twhile(i<=ls)\n\tq[p].push_back(q[p<<1][i++]);\n\twhile(j<=rs)\n\tq[p].push_back(q[p<<1|1][j++]);\n\treturn ;\n}\nint low_bound(int p,int k)\n{\n\tint l=1,r=q[p].size()-1,ans=0;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(q[p][mid]<=k)\n\t\t{\n\t\t\tl=mid+1;\n\t\t\tans=mid;\n\t\t}\n\t\telse\n\t\tr=mid-1;\n\t}\n\treturn ans;\n}\nint query(int p,int l,int r,int L,int R,int k)\n{\n\tif(R<l||r<L)\n\treturn 0;\n\tif(l>=L&&R>=r)\n\t{\n\t\treturn low_bound(p,k);\n\t}\n\tint mid=(l+r)>>1;\n\treturn query(p<<1,l,mid,L,R,k)+query(p<<1|1,mid+1,r,L,R,k);\n}\nint serch(int l,int r,int k)\n{\n\tint L=0,R=0x7fffffff;//\u53ef\u80fd\u628aR\u5f00\u5c0f\u70b9\u80fd\u5feb\u70b9\uff1f\uff1f\u6570\u636e1e9\n\tint num=a[l];\n\twhile(L<=R)\n\t{\n\t\tint mid=(L+R)>>1;\n\t\tif(query(1,1,n,l,r,mid)>=k)\n\t\t{\n\t\t\tnum=mid;\n\t\t\tR=mid-1;\n\t\t}\n\t\telse\n\t\tL=mid+1;\n\t}\n\treturn num;\n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\ta[i]=read();\n\tbuild(1,1,n);\n\tfor(int i=1;i<=n;i+=2)\n\t{\n\t\tprintf(\"%d\\n\",serch(1,i,((i>>1)+1)));\n\t}\n\treturn 0;\n}\n```\n~~\u8fd9\u4e2a\u4e0d\u662f\u672c\u9898\u6b63\u89e3\uff0c\u5efa\u8bae\u5927\u5bb6\u8fd8\u662f\u53bb\u5199\u6b63\u89e3\uff0c\u6bd5\u7adf\u9898\u76ee\u6570\u636e\u6709\u70b9\u5927~~",
        "postTime": 1575376174,
        "uid": 155626,
        "name": "\u8001\u54b8\u9c7c\u4e86",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u6c421~2k+1\u8303\u56f4\u5185\u7684\u4e2d\u4f4d\u6570\uff0c\u4e5f\u5c31\u662f\u6c421~2k+1\u8303\u56f4\u5185\u7b2ck+1\u5c0f\u7684\u6570\u3002\r\n\r\n\u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e3b\u5e2d\u6811\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\r\n\r\n```cpp\r\n#include <cstdio>\r\n#include <algorithm>\r\n#define maxn 100010\r\nusing namespace std;\r\nint n,m,cnt,p;\r\nint a[maxn],b[maxn];\r\nint ls[maxn<<5],rs[maxn<<5],rt[maxn],sum[maxn<<5];\r\nvoid build(int &now,int l,int r)\r\n{\r\n\tnow=++cnt;\r\n\tif(l==r)return;\r\n\tint mid=(l+r)>>1;\r\n\tbuild(ls[now],l,mid);\r\n\tbuild(rs[now],mid+1,r);\r\n}\r\nint modify(int oldroot,int l,int r)\r\n{\r\n\tint newroot=++cnt;\r\n\tls[newroot]=ls[oldroot];\r\n\trs[newroot]=rs[oldroot];\r\n\tsum[newroot]=sum[oldroot]+1;\r\n\tif(l==r)return newroot;\r\n\tint mid=(l+r)>>1;\r\n\tif(p<=mid)ls[newroot]=modify(ls[newroot],l,mid);\r\n\telse rs[newroot]=modify(rs[newroot],mid+1,r);\r\n\treturn newroot;\r\n}\r\nint query(int lef,int rig,int l,int r,int k)\r\n{\r\n\tint ans;\r\n\tint mid=(l+r)>>1;\r\n\tint x=sum[ls[rig]]-sum[ls[lef]];\r\n\tif(l==r)return l;\r\n\tif(x>=k)ans=query(ls[lef],ls[rig],l,mid,k);\r\n\telse ans=query(rs[lef],rs[rig],mid+1,r,k-x);\r\n\treturn ans;\r\n}\r\nint main()\r\n{\r\n\tscanf(\"%d\",&n);\r\n\tfor(int i=1;i<=n;i++)\r\n\t{\r\n\t\tscanf(\"%d\",&a[i]);\r\n\t\tb[i]=a[i];\r\n\t}\r\n\tsort(b+1,b+n+1);\r\n\tint q=unique(b+1,b+n+1)-b-1;       //q\u8bb0\u5f55\u79bb\u6563\u5316\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\r\n\tbuild(rt[0],1,q);\r\n\tfor(int i=1;i<=n;i++)\r\n\t{\r\n\t\tp=lower_bound(b+1,b+q+1,a[i])-b;\r\n\t\trt[i]=modify(rt[i-1],1,q);\r\n\t}\r\n\tfor(int i=1;i<=n;i+=2)\r\n\t{\r\n\t\tint l=1,r=i,k=(l+r)>>1;\r\n\t\tprintf(\"%d\\n\",b[query(rt[l-1],rt[r],1,q,k)]);\r\n\t}\r\n\treturn 0;\r\n}\r\n```\r\n",
        "postTime": 1571313421,
        "uid": 109182,
        "name": "MakotoTSK",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u5168\u65b0\u9605\u8bfb\u4f53\u9a8c\uff1a[\u8bf7\u70b9\u51fb\u6b64\u5904](https://blog.csdn.net/qq_40960885/article/details/102052330)\n\n#### [\u3010\u9898\u76ee\u63cf\u8ff0\u3011](https://www.luogu.org/problem/P1168)\n\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u975e\u8d1f\u6574\u6570\u5e8f\u5217Ai\uff0c\u5bf9\u4e8e\u6240\u67091\u2264k\u2264(N+1)/2\uff0c\u8f93\u51faA1, A3, \u2026, A2k-1\u7684\u4e2d\u4f4d\u6570\u3002\u5373\u524d1,3,5,\u2026\u4e2a\u6570\u7684\u4e2d\u4f4d\u6570\u3002\nn<=100000\n\n#### \u3010\u601d\u8def\u3011\n\n\u7b2c\u4e00\u6b65\uff1a\u8003\u8651\u6c421~n\u7684\u4e2d\u4f4d\u6570,\u628a\u6570\u7ec4\u6392\u5e8f\u6700\u4e2d\u95f4\u7684\u6570\u5c31\u662f\u7b54\u6848.\n\n\u21d2\u8003\u8651\u600e\u4e48\u7528\u5806\u6765\u7ef4\u62a4\u8fd9\u4e2a\u7b54\u6848.\n\n\u5bf9\u4e8e\u4e00\u4e2a\u957f\u4e3ai\u7684\u5e8f\u5217,\uff08i\u4e3a\u5947\u6570.\uff09\n\n\u8bb0x\u8868\u793a\u8fd9\u4e2a\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570,\u7136\u540e\u6211\u4eec\u7528\u5927\u6839\u5806\u7ef4\u62a4\u524d\u4e00\u534a\u5c0f\u7684\u6570,\u7528\u5c0f\u6839\u5806\u7ef4\u62a4\u540e\u4e00\u534a\u5c0f\u7684\u6570,\u8fd9\u6837\u5e8f\u5217\u5206\u4e3a\u4e86[1,(i-1)/2]\u222a[(i+1)/2,i]\uff08x\u653e\u5728\u54ea\u4e00\u534a\u90fd\u53ef\u4ee5\uff09\n\n\u73b0\u5728\u8003\u8651\u52a0\u8fdb\u53bb\u4e00\u4e2a\u6570w\n\u8ba9w\u548c\u524d\u4e00\u534a\u5927\u6839\u5806\u7684\u5806\u9876\u5143\u7d20\u6bd4\u8f83\uff0c\u5927\u653e\u5165\u540e\u534a\u90e8\u5206\u5c0f\u6839\u5806\u4e2d\uff0c\u53cd\u4e4b\uff0c\u653e\u5230\u524d\u534a\u90e8\u5206\u5927\u6839\u5806\u4e2d\n\n\u7ef4\u62a4\u4e24\u4e2a\u5806\u5927\u5c0f\u5dee\u57281\u4ee5\u5185\uff0c\u7136\u540e\u8f93\u51fa\u5927\u5c0f\u8f83\u5927\u7684\u5806\u9876\u7684\u5143\u7d20\uff0c\u5c31\u662f\u4e2d\u4f4d\u6570\n\n#### \u3010\u4ee3\u7801\u3011\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cmath>//abs\u5934\u6587\u4ef6\nusing namespace std;\npriority_queue<int,vector<int> >q1;\npriority_queue<int,vector<int>,greater<int> >q2;\nint main(){\n    int n,x;\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&x);\n\tq1.push(x);\n    printf(\"%d\\n\",x); \n    for (int i=2;i<=n;i++){\n        scanf(\"%d\",&x);\n        if (x>q1.top()) q2.push(x);//\u65b0\u52a0\u5165\u7684x\u653e\u8fdb\u53bb\n            else q1.push(x);\n        while(abs((int)q1.size()-(int)q2.size())>1){ //\u7ef4\u62a4\u4e24\u4e2a\u5927\u5c0f\u5dee1\u4ee5\u5185\uff0cabs\u2014\u2014\u53d6\u7edd\u5bf9\u503c\u51fd\u6570\n            if (q1.size()>q2.size()){\n\t\t\t    q2.push(q1.top());q1.pop();\n\t\t\t}\n            else{\n\t\t\t   q1.push(q2.top());q2.pop();\n\t\t\t}\n\t\t}\n        if(i%2==1) printf(\"%d\\n\",q1.size()>q2.size()?q1.top():q2.top());//\u8f93\u51fa\u5927\u5c0f\u5927\u7684\u90a3\u4e2a\u5806\u7684\u5806\u5b9a\u5143\u7d20\n    }\n    return 0;\n}\n```\n\nP.S\u4ee3\u7801\u5b9e\u73b0\u53ca\u8bc4\u6d4b\u4e2d\u7684\u4e00\u70b9\u5c0f\u95ee\u9898\uff0cabs\u5728\u672c\u673a\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u662f\u5728\u6d1b\u8c37\u4e0a\u4f1a\u51fa\u73b0CE\u60c5\u51b5\n\n\n\u8fd9\u662f\u7531\u4e8esize()\u51fd\u6570\u8fd4\u56de\u7684\u662f\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u6240\u4ee5\u4f7f\u7528int\u8f6c\u6362\u4e00\u4e0b\u5373\u53ef\u3010\u5361\u4e86\u5f88\u4e45\u3011\n",
        "postTime": 1570183776,
        "uid": 48888,
        "name": "\u4e09\u91d1Elsa",
        "ccfLevel": 0,
        "title": "Luogu1168\u4e2d\u4f4d\u6570"
    },
    {
        "content": "**\u4e2d\u4f4d\u6570\uff1a\u4e00\u6bb5\u533a\u95f4\u5185\u6392\u5e8f\u540e\u6392\u5728\u6700\u4e2d\u95f4\u7684\u6570**\n\n\u9898\u76ee\u91cc\u8981\u6c42\u662f\u6c42\u524d**1,3,5...**\u5947\u6570\u533a\u95f4\u7684\u4e2d\u4f4d\u6570\uff0c\u56e0\u6b64\u4e2d\u4f4d\u6570\u53ea\u6709\u4e00\u4e2a\n\n\u5f88\u5bb9\u6613\u60f3\u5230\u4e2d\u4f4d\u6570\u662f\u6c42\u7b2ck\u5927\n\n\u6240\u4ee5\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\uff0c\u6bcf\u6b21\u63d2\u5165$ \\ a[i] \\ $\n\n\u5f53 $ \\ i \\ $\u4e3a\u5947\u6570\u7684\u65f6\u5019\uff0c\u67e5\u8be2\u7b2c$ \\ (i \\ / \\ 2 \\ + 1) \\ $\u5927\u5373\u53ef\n\n**\u6ce8\u610f\u5f00long long**\n\ncode:\n\n```cpp\n\n#include <bits/stdc++.h>\n#define pushup(u) if(u -> ls -> siz) u -> siz = u -> ls -> siz + u -> rs -> siz, u -> val = u -> rs -> val \n#define new_Node(a, b, c, d) (&(*st[cnt++] = Node(a, b, c, d)))\n#define merge(a, b) new_Node(a -> siz + b -> siz, b -> val, a, b)\n#define ratio 4\n#define int long long \nusing namespace std;\nconst int N = 200005 * 4;\nint a[N];\n\ntemplate <typename T>\ninline void read(T &t) {\n    t = 0; T m = 1; char ch = getchar();\n    while(ch < '0' || ch > '9') { if(ch == '-') m = -1; ch = getchar(); }\n    while(ch >= '0' && ch <= '9') { t = (t << 3) + (t << 1) + (ch & 15); ch = getchar(); }\n    t *= m;\n}\n\nstruct Node {\n    int siz, val;\n    Node *ls, *rs;\n    Node () {}\n    Node (int a, int b, Node *c, Node *d) : siz(a), val(b), ls(c), rs(d) {}\n}*root, *null, *st[N], t[N], *father;\n\nint n, cnt = 0;\n\nvoid maintain(Node *u) {\n    if(u -> ls -> siz > u -> rs -> siz * ratio) u -> rs = merge(u -> ls -> rs, u -> rs), st[--cnt] = u -> ls, u -> ls = u -> ls -> ls;\n    if(u -> rs -> siz > u -> ls -> siz * ratio) u -> ls = merge(u -> ls, u -> rs -> ls), st[--cnt] = u -> rs, u -> rs = u -> rs -> rs;\n}\nvoid ins(Node *u, int x) {\n    if(u -> siz == 1) u -> ls = new_Node(1, min(x, u -> val), null, null), u -> rs = new_Node(1, max(x, u -> val), null, null);\n    else ins(x > u -> ls -> val ? u -> rs : u -> ls, x);\n    pushup(u); maintain(u);\n}\n\nint kth(Node *u, int x) {\n    if(u -> siz == 1) return u -> val;\n    return x > u -> ls -> siz ? kth(u -> rs, x - u -> ls -> siz) : kth(u -> ls, x);\n}\n\nsigned main() {\n    null = new Node(0, 0, 0, 0);\n    root = new Node(1, 999999999999, null, null);\n    for(int i = 0; i < 200005; i++) st[i] = &t[i];\n    read(n);\n    for(int i = 1; i <= n; i++) {\n        read(a[i]);\n        ins(root, a[i]);\n        if(i % 2 == 1) {\n            printf(\"%lld\\n\", kth(root, i / 2 + 1));\n        }\n    }\n    return 0;\n}\n\n\n```",
        "postTime": 1545987240,
        "uid": 76527,
        "name": "Chloris",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "              \u5806\n  [1168](https://www.luogu.org/problemnew/show/P1168)   \n  \u8fd9\u9053\u9898\u505a\u6cd5\u7c7b\u4f3c\u4e8e\u9ed1\u5323\u5b50    \n  [1801](https://www.luogu.org/problemnew/show/P1801)    \n  \u9996\u5148\u6211\u4eec\u53d1\u73b0\u8fd9\u9053\u9898\u53ea\u6709\u67e5\u8be2\uff0c\u6ca1\u6709\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u7528\u5462\u4e9b\u9ad8\u96be\u7684\u6570\u636e\u7ed3\u6784\u3002        \n  \n  \u6211\u4eec\u53d1\u73b0\u6211\u4eec\u6bcf\u6b21\u662f\u5728\u57fa\u6570\u65f6\u67e5\u8be2\uff0c\u800c\u4e14\u6b64\u65f6\u7684\u6570\u4e00\u5b9a\u662f\u5947\u6570\u4e2a\uff0c\u800c\u4e14\u8fd8\u8981\u53d6\u4e2d\u4f4d\u6570\u6211\u4eec\u7b2c\u4e00\u53cd\u5e94\u4e00\u5b9a\u662f\u6392\u5e8f\uff0c\u4f46\u6bcf\u6b21\u6392\u5e8f\u80af\u5b9a\u4f1a\u88ab\u641e\u5230n^2logn\uff0c\u663e\u7136\u8fc7\u4e0d\u4e86,\u6211\u4eec\u80af\u5b9a\u53c8\u4f1a\u60f3\u5230\u7528\u5806\u6765\u641e\uff0c\u56e0\u4e3a\u8fd9\u6837\u6bcf\u4e2a\u6570\uff0c\u53ef\u4ee5\u8fbe\u5230logn\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u7528\u5806\u5c31\u5f88ok\u3002  \n  \u4f46\u662f\u6211\u4eec\u8981\u67e5\u8be2\u4e2d\u95f4\u503c\uff0c\u8fd9\u6837\u5806\u6ca1\u6709\u81ea\u5e26\u51fd\u6570\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u7528\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u7136\u540e\u5462\uff0c\u6211\u4eec\u5c31\u5148\u628a\u5927\u6839\u5806\u91cc\u5b58\u7684\u662f\u524d1~n/2+1,\u5c0f\u6839\u5806\u91cc\u5b58\u7684\u662f\u540e\u9762\u7684\uff0c     \n  \u4e8e\u662f\u6211\u4eec\u53d1\u73b0\u5927\u6839\u5806\u91cc\u6709n/2+1\u4e2a\u6570\uff0c\u5176\u4f59\u7684\u5728\u5c0f\u6839\u5806\u4e2d\uff0c\u6211\u4eec\u6bcf\u6b21\u6bd4\u8f83\u4e24\u4e2a\u5806\u7684\u5806\u9876\uff0c\u5982\u679c\u5927\u6839\u5806\u7684\u5806\u9876\u5927\u4e8e\u5c0f\u6839\u5806\u7684\u5806\u9876\uff0c\u5c31\u4ea4\u6362\u4e00\u4e0b\u3002\u4f46\u6709\u4e9b\u5c0f\u7ec6\u8282\u8981\u6ce8\u610f\u4e00\u4e0b\u3002   \n  ```cpp\n#include<iostream> \n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n\npriority_queue<int,vector<int>,greater<int> >q;//xiao\npriority_queue<int,vector<int>,less<int> >Q; //da\n\nint n;\n\nint a[500001];\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n    \tscanf(\"%d\",&a[i]);\n    }\n    if(a[1]>a[2])\n    {\n    \tQ.push(a[2]);\n    \tq.push(a[1]);\n    }\n    else \n    {\n    \tQ.push(a[1]);\n    \tq.push(a[2]);\n    }\n    printf(\"%d\\n\",a[1]);\n    if(n>=3)\n    {\n    \tQ.push(a[3]);\n    \twhile(Q.top()>q.top())\n    \t{\n    \t\tint tmp=Q.top();\n    \t\tQ.pop();\n    \t\tint tmp2=q.top();\n    \t\tq.pop();\n    \t\tQ.push(tmp2);\n    \t\tq.push(tmp);\n    \t}\n    }\n    printf(\"%d\\n\",Q.top());\n    for(int i=4;i<=n;i+=2)\n    {\n    \tif(i==n)\n    \t{\n    \t\treturn 0;\n    \t}\n    \tif(a[i]>a[i+1])\n    \t{\n    \t\tQ.push(a[i+1]);\n    \t\tq.push(a[i]);\n    \t}\n    \telse\n    \t{\n    \t\tQ.push(a[i]);\n    \t\tq.push(a[i+1]);\n    \t}\n    \twhile(Q.top()>q.top())\n    \t{\n    \t\tint tmp=Q.top();\n    \t\tQ.pop();\n    \t\tint tmp2=q.top();\n    \t\tq.pop();\n    \t\tQ.push(tmp2);\n    \t\tq.push(tmp);\n    \t}\n    \tprintf(\"%d\\n\",Q.top());\n    }\n    return 0;\n}\n```\n\u9ed1\u5323\u5b50\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cstdio>\n#include<queue>\nusing namespace std;\n\npriority_queue<int,vector<int>,greater<int> >q2;\npriority_queue<int,vector<int>,less<int> >q1;\n\nint n,m;\nint a[200403];\nint b[200403];\n\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d\",&b[i]);\t\t\n    }\n    \n    sort(b+1,b+m+1); \n    int now=1;\n    int V=0;\n    for(int i=1;i<=n;i++)\n    {\n        q1.push(a[i]);\n        if(q1.size()>V)\n        {\n            int x=q1.top();\n            q1.pop();\n            q2.push(x);\n        } \n        while(i==b[now])\n        {\n            int x=q2.top();\n            printf(\"%d\\n\",x);\n            \n            q2.pop();\n            q1.push(x);\n            V++;\n            now++;\n            if(now==m+1)\n            break; \n        }\n    }\n        \n    return 0;\n        \n    \n}\n\n\n\n```",
        "postTime": 1536826405,
        "uid": 102786,
        "name": "Sym_Je",
        "ccfLevel": 0,
        "title": "P1168 \u4e2d\u4f4d\u6570"
    },
    {
        "content": "\u672c\u6765\u60f3\u627e\u4e2a\u6811\u72b6\u6570\u7ec4\u7684\u9898\u7ec3\u7ec3\u6765\u7740\u3002\u3002\u3002\n\n\u627e\u5230\u4e86\u8fd9\u9898\u3002\u3002\u3002\n\n\u7136\u540e\u53d1\u73b0\u3002\u3002\u3002\n\n\u55ef\uff0c\u4e0d\u4f1a\u505a\uff0c\u6211\u679c\u7136\u662f\u4e2a\u53ea\u4f1a\u6253\u677f\u5b50\u7684\u849f\u84bbTAT\u3002\u3002\u3002\n\n\u4e8e\u662f\u3002\u3002\u3002\u53ea\u597d\u7528\u5e73\u8861\u6811\u4e86QwQ\u3002\u3002\u3002\n\n\u8fdb\u5165\u6b63\u9898\uff1a\n\n\u8fd9\u9898\u8981\u6c42\u4ee5\u9012\u589e\u987a\u5e8f\u8f93\u51fa\u90a3\u4e9b\u4e2a\u533a\u95f4\u7684\u4e2d\u4f4d\u6570\uff1b\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fb9\u8bfb\u8fb9\u5c06\u503c\u63d2\u5165\u5e73\u8861\u6811\uff0c\u5982\u679c\u5f53\u524d\u6570\u662f\u5947\u6570\u4e2a\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u5bf9\u6574\u68f5\u6811\u6c42\u4e00\u6b21\u533a\u95f4\u7b2ck\u5927\u5e76\u8f93\u51fa\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u4f20\u7edf\u65cb\u8f6c\u5f0fTreap\uff09\uff1a\n\n\n\n\n    \n    \n    \n\n\n\n\n\n    \n        \n        \n    \n\n    \n    \n    \n\n    \n    \n    \n\n    \n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<ctime>\n#include<cstdlib>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<map>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvoid read(int &x){\n    x=0;\n    char t=getchar();\n    bool f=0;\n    while(t<'0' || t>'9'){\n        if(t=='-')f=1;\n        t=getchar();\n    }\n    while(t>='0' && t<='9'){\n        x=(x<<3)+(x<<1)+t-'0';\n        t=getchar();\n    }\n    if(f)x=-x;\n}\nstruct node{\n    int key,yx;\n    int size,num;\n    node *ch[2];\n};\nvoid rotate(node* &,bool);\nvoid insert(node* &,int);\nint kth(node *,int);\nnode *root=NULL;\nint n,t,i;\nint main(){\n    read(n);\n    for(i=1;i<=n;i++){\n        read(t);\n        insert(root,t);\n        if(i&1)printf(\"%d\\n\",kth(root,(i>>1)+1));\n    }\n    return 0;\n}\nvoid rotate(node* &p,bool f){\n    node *t=p->ch[f^1];\n    p->ch[f^1]=t->ch[f];\n    t->ch[f]=p;\n    p->size=p->num;\n    if(p->ch[0]!=NULL)p->size+=p->ch[0]->size;\n    if(p->ch[1]!=NULL)p->size+=p->ch[1]->size;\n    t->size=t->num;\n    if(t->ch[0]!=NULL)t->size+=t->ch[0]->size;\n    if(t->ch[1]!=NULL)t->size+=t->ch[1]->size;\n    p=t;\n}\nvoid insert(node* &p,int x){\n    if(p==NULL){\n        p=(node *)malloc(sizeof(node));\n        p->key=x;\n        p->yx=rand();\n        p->size=p->num=1;\n        p->ch[0]=p->ch[1]=NULL;\n        return;\n    }\n    if(x==p->key){\n        p->size++;\n        p->num++;\n        return;\n    }\n    if(x<p->key){\n        insert(p->ch[0],x);\n        if(p->ch[0]->yx<p->yx)rotate(p,1);\n        else p->size++;\n    }\n    else{\n        insert(p->ch[1],x);\n        if(p->ch[1]->yx<p->yx)rotate(p,0);\n        else p->size++;\n    }\n}\nint kth(node *p,int x){\n    int s=0;\n    if(p->ch[0]!=NULL)s=p->ch[0]->size;\n    if(x<=s)return kth(p->ch[0],x);\n    else if(x<=s+p->num)return p->key;\n    else return kth(p->ch[1],x-s-p->num);\n}\n```",
        "postTime": 1500093780,
        "uid": 22630,
        "name": "Running_Coder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4e5f\u53ef\u4ee5\u7528Treap\u505a \u5927\u6982\u5c31\u662f\u7ef4\u62a4size \u8fb9\u8bfb\u8fb9\u63d2\u5165\uff0c\u7136\u540e\u8bfb\u52301\uff0c3\uff0c5\uff0c7\u2026\u2026\u4e2a\u6570\u7684\u65f6\u5019\u5c31\u67e5\u627e\u4e2d\u4f4d\u6570\u5e76\u8f93\u51fa\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08nlogn\uff09.\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <ctime>\n#include <cstdlib>\n#include <cstring>\n    using namespace std;\nstruct Node{\n    Node *ch[2];\n    int r,v,s;\n    int cmp(int x) const {\n        return x<v?0:1;\n    }\n    void maintain(){\n        s=ch[0]->s+ch[1]->s+1;\n    }\n}*null,*root;\n\nvoid rot(Node* &o,int d) {\n    Node* k=o->ch[d^1];\n    o->ch[d^1]=k->ch[d];\n    o->maintain();\n    k->maintain();\n    k->ch[d]=o;\n    o=k;\n}\nvoid insert(Node* &o,int x){\n    if (o==null) {\n        o=new Node();\n        o->ch[0]=o->ch[1]=null;\n        o->v=x;\n        o->r=rand();\n        o->maintain();\n    }\n    else {\n        int d=o->cmp(x);\n        insert(o->ch[d],x); if (o->ch[d]->r > o->r ) rot(o,d^1);\n        o->maintain();\n    }\n}\nvoid init(){\n    null=new Node(); null->s=0; root=null;\n}\nvoid print(Node *o){\n    if (o==null) return;\n    print(o->ch[0]);\n    printf(\"%d %d\\n\",o->v,o->s);\n    print(o->ch[1]);\n}\nvoid find(Node* o,int x) {\n    if (o==null) return;\n    int d=o->ch[0]->s;\n    if (x==d+1) {\n        printf(\"%d\\n\",o->v);\n        return;\n    }\n    if (x<d+1) find(o->ch[0],x);\n    else find(o->ch[1],x-d-1);\n}\nint main(){\n    srand(time(NULL));\n    int n;\n    cin>>n;\n    int k;\n    init();\n    for (int i=1;i<=n;i++) {\n        cin>>k;\n        insert(root,k);\n        if (i&1) find(root,i/2+1);\n    }\n    return 0;\n}\n```",
        "postTime": 1478350959,
        "uid": 5063,
        "name": "YouAreMySunshine",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    },
    {
        "content": "## \u533a\u95f4\u67e5\u8be2\u5e73\u8861\u6811\u662f\u4e00\u4e2a\u9ad8\u6548\u7684\u65b9\u6cd5\n## \u4e0b\u9762\u662f\u5e73\u8861\u6811\u505a\u6cd5\n\n------------\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<queue>\n#include<vector>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nconst int INF=0x4f4f4f4f;\nint pool,rt;\nstruct tree{\n    int lc,rc,key,pri,cnt,sze;\n    #define lc(x)t[x].lc\n    #define rc(x)t[x].rc\n    #define v(x)t[x].key\n    #define p(x)t[x].pri\n    #define c(x)t[x].cnt\n    #define s(x)t[x].sze\n}t[1000010];\ninline int read(){\n    int out=0,flag=1;\n    char c=getchar();\n    while(c<'0'||c>'9'){\n        if(c=='-')flag=-1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9'){\n        out=out*10+c-'0';\n        c=getchar();\n    }\n    return flag*out;\n}\ninline void Upt(const int &k){\n    s(k)=s(lc(k))+s(rc(k))+c(k);\n}\ninline void Zig(int &k){    //\u53f3\u65cb\n    int y=lc(k);\n    lc(k)=rc(y);\n    rc(y)=k;\n    s(y)=s(k);\n    Upt(k);\n    k=y;\n}\ninline void Zag(int &k){    //\u5de6\u65cb\n    int y=rc(k);\n    rc(k)=lc(y);\n    lc(y)=k;\n    s(y)=s(k);\n    Upt(k);\n    k=y;\n}\ninline void Insert(int &k,const int &key){    //\u63d2\u5165\n    if(!k){\n        k=++pool;\n        v(k)=key;\n        p(k)=rand();\n        c(k)=1;\n        s(k)=1;\n        lc(k)=0;\n        rc(k)=0;\n        return ;\n    }\n    else ++s(k);\n    if(v(k)==key) ++c(k);\n    else if(key<v(k)){\n        Insert(lc(k),key);\n        if(p(lc(k))<p(k)) Zig(k);\n    }\n    else {\n        Insert(rc(k),key);\n        if(p(rc(k))<p(k)) Zag(k);\n    }\n    return ;\n}\ninline int Kth(int k){     //\u67e5\u8be2\u6392\u540d\u4e3aK\u7684\u6570\uff0c\u6c42\u4e2d\u4f4d\u6570\u3002\n    int x=rt;\n    while(x){\n        if(s(lc(x))<k&&s(lc(x))+c(x)>=k) return v(x);\n        if(s(lc(x))>=k) x=lc(x);\n        if(s(lc(x))+c(x)<k){\n            k-=s(lc(x))+c(x);\n            x=rc(x);\n        }\n    }\n    return 0;\n}\nint main(){\n    int n,m,x=1;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&m);\n        Insert(rt,m);\n        if(i%2==1){      //\u4e2a\u6570\u4e3a\u5947\u6570\n            printf(\"%d\\n\",Kth(x));\n            x++;       //\u6bcf\u4e2a\u533a\u95f4\u7684\u4e2d\u4f4d\u6570\u3002\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1537249132,
        "uid": 73875,
        "name": "life_w_back",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1168 \u3010\u4e2d\u4f4d\u6570\u3011"
    }
]