[
    {
        "content": "# \u89e3\u6cd5\uff1a\u7f51\u7edc\u6d41 - \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe $\\times$ \u62d3\u6251\u6392\u5e8f\n\n\u611f\u89c9\u5927\u5bb6\u7684\u9898\u89e3\u90fd\u6ca1\u6709\u8bb2\u5f97\u5f88\u6e05\u695a\u5462\u3002\n\n\u9274\u4e8e\u5927\u5bb6\u53ef\u80fd\u4f1a\u4ee5\u8fd9\u9053\u9898\u4f5c\u4e3a **\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe** \u7684\u5165\u95e8\u9898\uff0c\u6211\u5c31\u5728\u8fd9\u91cc\u7ed9\u5927\u5bb6\u8bb2\u4e00\u4e9b\u6709\u5173\u7684\u6982\u5ff5\uff0c\u5e2e\u52a9\u5927\u5bb6\u5feb\u901f\u5165\u95e8\u5427\uff01\n\n- \u5982\u679c\u4f60\u65e9\u5c31\u77e5\u9053\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u662f\u4ec0\u4e48\uff0c\u8bf7\u76f4\u63a5\u7ffb\u5230**\u9898\u76ee\u5206\u6790** QwQ\n- \u5982\u679c\u4f60\u662f\u5f88\u5f3a\u5f88\u5f3a\u7684\u5927\u4f6c\uff0c\u8bf7\u76f4\u63a5\u7ffb\u5230\u4e0b\u4e00\u7bc7\u9898\u89e3 QwQ\n\n# \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe::\u6982\u5ff5\n\n\u4ec0\u4e48\u662f **\u95ed\u5408\u5b50\u56fe** \uff1f\n\n1. \u5b83\u662f\u4e00\u79cd\u5b50\u56fe \uff08\u9003\n2. \u5b83\u8fd8\u662f\u6709\u5411\u56fe\u7684\u5b50\u56fe\u3002\u3002\n3. \u5b83\u8fd8\u53ef\u4ee5\u4e00\u8def\u8d70\u5230\u5e95\uff0c\u4e0d\u649e\u5357\u5899\u4e0d\u56de\u5934\u3002\u3002\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u4ece\u5b83\u51fa\u53d1\uff0c**\u80fd\u591f\u8d70\u5230\u7684\u6240\u6709\u70b9\u90fd\u5c5e\u4e8e\u95ed\u5408\u5b50\u56fe\u4e2d**\n\n\u4e3e\u4e2a\u6817\u5b50\uff0c\u5bf9\u4e8e\u4e0b\u9762\u8fd9\u5f20\u56fe\uff0c $\\{b, c, d\\}$ \u3001 $\\{b, d\\}$ \u90fd\u662f\u5b83\u7684\u95ed\u5408\u5b50\u56fe\u3002\u4f46\u662f $\\{a, b, d\\}$ \u5374\u4e0d\u662f\uff0c\u56e0\u4e3a\u4ece a \u53ef\u4ee5\u8d70\u5230 c \uff0c c \u5374\u4e0d\u5728 $\\{a, b, d\\}$ \u4e2d\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/47002.png)\n\n> $\\text{\u5f62\u5f0f\u5316\u5730\uff08\u5982\u679c\u4f60\u60f3\u770b\u7684\u8bdd\uff09\uff0c\u82e5} G'(V', E') \\text{\u662f} G(V, E) \\text{\u7684\u4e00\u4e2a\u95ed\u5408\u5b50\u56fe\uff0c\u90a3\u4e48\uff1a}$\n\n> 1. $V' \\in V, E' \\in E$\n\n> 1. $\\forall (u, v) \\in E, \\text{\u90fd\u6709} u \\in V' \\text{ \u4e14 } v \\in V'$\n\n\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u5c31\u662f\u539f\u56fe\u4e2d\u70b9\u6743\u548c\u6700\u5927\u7684\u95ed\u5408\u5b50\u56fe\u3002\n\n\u8fd9\u4e2a\u6a21\u578b\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u5f85\u6211\u6162\u6162\u9053\u6765\u3002\n\n# \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe::\u5b9e\u73b0\n\n\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528**\u6700\u5c0f\u5272**\u89e3\u51b3OVO\uff01\u3002\n\n#### \u8fde\u8fb9\u65b9\u5f0f\n\n- \u5bf9\u4e8e\u6240\u6709\u539f\u56fe\u4e2d\u7684\u8fb9 $(u, v)$ \uff0c\u8fde\u8fb9 $u \\rightarrow v$ \uff0c\u5bb9\u91cf\u4e3a $INF$ \u3002\n- \u5bf9\u4e8e\u6bcf\u4e2a\u539f\u56fe\u4e2d\u7684\u70b9 $u$ \uff0c\u8bbe $u$ \u7684\u6743\u503c\u4e3a $val[u]$ \uff1a\n  1. \u82e5 $val[u] > 0$ \uff08\u6b63\u6743\u70b9\uff09\uff0c\u8fde\u8fb9 $S \\rightarrow u$ \uff0c\u5bb9\u91cf\u4e3a $val[u]$ \u3002\n  2. \u82e5 $val[u] < 0$ \uff08\u8d1f\u6743\u70b9\uff09\uff0c\u8fde\u8fb9 $u \\rightarrow T$ \uff0c\u5bb9\u91cf\u4e3a $-val[u]$ \u3002\n\n\u81f3\u4e8e $val[u] = 0$ \uff08\u96f6\u6743\u70b9\uff09\u7684\u60c5\u51b5\uff0c\u5411 $S$ \u8fd8\u662f $T$ \u8fde\u8fb9\u5bf9\u7b54\u6848\u5e76\u6ca1\u6709\u5f71\u54cd\uff08\u89c1\u4e0b\u89e3\u91ca\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u505a\u7279\u5224\u3002\n\n\u5982\u56fe\u6240\u793a\uff0c\u53f3\u8fb9\u662f\u539f\u56fe\uff0c\u7f51\u7edc\u6d41\u8fde\u8fb9\u5982\u5de6\u56fe\u6240\u793a\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/47103.png)\n\n\u76f4\u63a5\u5728\u56fe\u4e0a\u8dd1\u6700\u5c0f\u5272\u5373\u53ef\uff0c\u6700\u5927\u6743 = \u6b63\u70b9\u6743\u548c - \u6700\u5c0f\u5272 \uff0c\u800c\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u8282\u70b9\u5c31\u662f\u4e0e $S$ \u8054\u901a\u7684\u90e8\u5206\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u5efa\u6a21\u662f\u6b63\u786e\u7684\u5462\uff1f\u8ba9\u6211\u4eec\u5206\u6790\u4e00\u4e0b\uff1a\n\n> \u9996\u5148\uff0c\u6240\u6709\u4e0d\u8fde\u5411 $S$ \u6216 $T$ \u7684\u8fb9\u5bb9\u91cf\u90fd\u662f $INF$ \uff0c\u4e0d\u53ef\u80fd\u88ab\u5272\u6389\u3002\n\n> \u8fd9\u6837\uff0c\u80fd\u88ab\u5272\u6389\u7684\u8fb9\u53ea\u6709\u8fde\u5411 $S$ \u6216 $T$ \u7684\u8fb9\uff08\u8fd9\u6837\u7684\u5272\u88ab\u79f0\u4e3a **\u7b80\u5355\u5272** \uff09\u3002\n\n> \u8bbe\u4e0e $S$ \u8054\u901a\u7684\u8282\u70b9\u96c6\u4e3a $X$ \uff0c\u4e0e $T$ \u8054\u901a\u7684\u8282\u70b9\u96c6\u4e3a $Y$ \uff0c\u90a3\u4e48\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u8282\u70b9\u5c31\u662f $X$ \u96c6\u3002\n\n> \u4e00\u5f00\u59cb\u5047\u8bbe\u6240\u6709\u6b63\u6743\u70b9\u90fd\u5728\uff08\u6700\u5927\u6743\uff09\u95ed\u5408\u5b50\u56fe\u4e2d\uff0c\n\n> \u5bf9\u4e8e\u67d0\u4e00\u4e2a\u6b63\u6743\u70b9 $u$ \uff0c\u5982\u679c\u5272\u6389\u5b83\u4e0e $S$ \u7684\u8fde\u8fb9\uff0c\u610f\u5473\u7740\u5c06\u5b83\u5206\u5230 $Y$ \u96c6\u5408\u4e2d\uff0c\u4e0d\u9009\u5b83\u4f5c\u4e3a\u95ed\u5408\u5b50\u56fe\u7684\u8282\u70b9\uff0c\u6545\u95ed\u5408\u5b50\u56fe\u6743\u503c\u5e94\u51cf\u53bb $val[u]$ \u3002\n\n> \u5bf9\u4e8e\u67d0\u4e00\u4e2a\u8d1f\u6743\u70b9 $u$ \uff0c\u5982\u679c\u5272\u6389\u5b83\u4e0e $T$ \u7684\u8fde\u8fb9\uff0c\u610f\u5473\u7740\u5c06\u5b83\u5206\u5230 $X$ \u96c6\u5408\u4e2d\uff0c\u90a3\u4e48\u95ed\u5408\u5b50\u56fe\u6743\u503c\u5e94\u52a0\u4e0a $val[u]$ \uff0c\u5373\u51cf\u53bb $-val[u]$\u3002\n\n\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5047\u8bbe\u8fd9\u662f\u7f51\u7edc\u56fe\u4e2d\u7684\u4e00\u6761\u8def\u5f84\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/47138.png)\n\n\u8fd9\u4e2a\u56fe\u6709\u4e24\u79cd\u5272\u6cd5\uff0c\u5176\u4e2d\u5272\u6389\u84dd\u8272\u7684\u8fb9\u82b1\u8d39\u6700\u5c0f\uff0c\u9700\u8981\u4ed8\u51fa 1 \u7684\u8d39\u7528\u3002\n\n\u6545\u8fd9\u4e2a\u56fe\u4e2d\u95ed\u5408\u5b50\u56fe\u7684\u6700\u5927\u6743\u503c\u662f $2 - 1 = 1$ \u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/47139.png)\n\n\u8fd9\u9898\u8ddf **\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe** \u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\u60f3\u5fc5\u5927\u5bb6\u5df2\u7ecf\u80fd\u591f\u53d1\u73b0\u4e00\u4e9b\u89c4\u5f8b\u4e86\uff01\n\n# \u9898\u76ee\u5206\u6790\n\n#### \u89c4\u5f8b\uff1a\n\n\u6211\u4eec\u770b\u4e00\u4e0b\u9898\u76ee\u63cf\u8ff0\uff1a\n\n```\n\u5bf9\u4e8e\u7b2cr\u884c\u7684\u8fdb\u653b\uff0cZombies\u5fc5\u987b\u9996\u5148\u653b\u51fbPr, M-1\uff1b\u82e5\u9700\u8981\u5bf9Pr, c\uff080\u2264c<M-1\uff09\u653b\u51fb\uff0c\u5fc5\u987b\u5c06Pr,M-1, Pr, M-2 \u2026 Pr, c+1\u5148\u51fb\u6e83\uff0c\u5e76\u79fb\u52a8\u5230\u4f4d\u7f6e(r, c)\u624d\u53ef\u8fdb\u884c\u653b\u51fb\u3002\n```\n\n```\n\u5373\u4fbfZombie\u8fdb\u5165\u4e86\u4e00\u4e2aPlant\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u4f46\u8be5\u4f4d\u7f6e\u5c5e\u4e8e\u5176\u4ed6\u690d\u7269\u7684\u653b\u51fb\u4f4d\u7f6e\u96c6\u5408\uff0c\u5219Zombie\u4f1a\u88ab\u77ac\u95f4\u6d88\u706d\u800c\u6240\u5728\u4f4d\u7f6e\u7684\u690d\u7269\u5219\u5b89\u7136\u65e0\u6059\n```\n\n\u9898\u76ee\u63cf\u8ff0\u6697\u793a\u7740\uff1a **\u5982\u679c\u4f60\u8981\u653b\u51fb\u690d\u7269 $i$ \uff0c\u90a3\u4e48\u4f60\u5c31\u5fc5\u987b\u628a $i$ \u7684\u53f3\u8fb9\u4e00\u68f5\u690d\u7269\u3001\u4ee5\u53ca\u4fdd\u62a4\u7740\u5b83\u7684\u6240\u6709\u690d\u7269\u90fd\u4e00\u8d77\u653b\u51fb\u6389** \u3002\n\n\u8fd9\u4e0e\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u4e2d **\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u4ece\u5b83\u51fa\u53d1\uff0c\u80fd\u591f\u8d70\u5230\u7684\u6240\u6709\u70b9\u90fd\u5c5e\u4e8e\u95ed\u5408\u5b50\u56fe\u4e2d** \u521a\u597d\u5951\u5408\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5efa\u56fe\uff1a\n\n1. \u690d\u7269 $i$ \u7684\u70b9\u6743\u8bbe\u4e3a $val[i]$\n2. \u6240\u6709\u690d\u7269 $i$ \u5411\u5b83\u7684\u53f3\u8fb9\u8fde\u8fb9\n3. \u5982\u679c\u4e00\u4e2a\u690d\u7269 $j$ \u4fdd\u62a4\u7740 $i$ \uff0c $i$ \u5411 $j$ \u8fde\u8fb9\n\n\u5728\u8fd9\u4e2a\u56fe\u4e0a\u6c42\u51fa\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff0c\u7b54\u6848\u5c31\u662f\u6700\u5927\u6536\u76ca\uff0c\u4e5f\u5c31\u662f\u95ee\u9898\u7684\u7b54\u6848\u3002\n\n# \u4e00\u4e2a\u95ee\u9898\n\n\u7b49\u7b49\uff0c\u5982\u679c\u4f60\u76f4\u63a5\u5199\u51fa\u4ee3\u7801\uff0c\u4f60\u4f1a\u53d1\u73b0\u4f60\u53ea\u80fd\u62ff\u5230\u53ef\u601c\u7684\u5206\u6570\uff08\u751a\u81f3\u8fde\u6837\u4f8b\u90fd\u8fc7\u4e0d\u4e86\uff09\n\n\u6211\u4eec\u6f0f\u4e86\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u4e24\u68f5\u690d\u7269\u4e92\u76f8\u4fdd\u62a4\uff08\u73af\uff09\uff0c\u90a3\u4e48\u50f5\u5c38\u65e0\u8bba\u5982\u4f55\u90fd\u65e0\u6cd5\u653b\u51fb\u5230\u5b83\u4eec\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/47142.png)\n\n\uff08\u4e0a\u9762\u8fd9\u4e2a\u56fe\u5c55\u793a\u7684\u662f\u8282\u70b9\u4e4b\u95f4\u7684\u4fdd\u62a4\u5173\u7cfb\uff0c\u4e8b\u5b9e\u4e0a\u5728\u7f51\u7edc\u56fe\u4e2d\uff0c\u8fb9\u521a\u597d\u76f8\u53cd\uff09\n\n\u540c\u7406\uff0c\u88ab\u73af\u6240\u4fdd\u62a4\u7684\u8282\u70b9\u4e5f\u65e0\u6cd5\u88ab\u653b\u51fb\u5230\u3002\n\n\u6240\u6709\u51fa\u73b0\u5728\u73af\u4e2d\u4ee5\u53ca\u88ab\u73af\u4fdd\u62a4\u7684\u8282\u70b9\u90fd\u5e94\u8be5\u88ab\u53bb\u9664\u3002\u6211\u4eec\u53ef\u4ee5\u5148\u5efa\u4e00\u4e2a\u53cd\u5411\u56fe\uff08\u8fd9\u91cc\u662f\u6307\u76f8\u5bf9\u4e8e\u7f51\u7edc\u56fe\u7684\u53cd\u5411\u56fe\uff09\uff0c\u5e76\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u80fd\u591f\u88ab\u62d3\u6251\u6392\u5e8f\u904d\u5386\u5230\u7684\u8282\u70b9\u624d\u80fd\u7528\u6765\u5efa\u56fe\u3002\n\n\u8bb2\u5230\u8fd9\u91cc\uff0c\u95ee\u9898\u7ec8\u4e8e\u89e3\u51b3\u4e86\uff01\n\n# \u4ee3\u7801\n\n\u6fc0\u52a8\u4eba\u5fc3\u7684\u4ee3\u7801\u65f6\u523b\uff01\uff08\u5047\u7684\uff0c\u5199\u5f97\u8d85\u4e11 2333 \uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define POINT(X, Y)  ((X) * 31 + (Y))\nconst int MAXN = POINT(30, 30) + 10;\nconst int INF = 2000000000;\nconst int MAXM = MAXN * MAXN + 10;\nstruct Graph {\n\tstruct Node {\n\t\tint to, cap;\n\t\tint next;\n\t} node[MAXM * 2];\n\tint top, head[MAXN];\n\tGraph() {\n\t\ttop = 1;\n\t}\n\tvoid add(int u, int v, int cap) {\n\t\ttop ++;\n\t\tnode[top].to = v;\n\t\tnode[top].cap = cap;\n\t\tnode[top].next = head[u];\n\t\thead[u] = top;\n\t\ttop ++;\n\t\tnode[top].to = u;\n\t\tnode[top].cap = 0;\n\t\tnode[top].next = head[v];\n\t\thead[v] = top;\n\t}\n\tqueue<int> Q;\n\tint dis[MAXN];\n\tint s, t;\n\tbool bfs() {\n\t\tmemset(dis, -1, sizeof(dis));\n\t\tdis[s] = 0;\n\t\tQ.push(s);\n\t\twhile(!Q.empty()) {\n\t\t\tint u = Q.front();\n\t\t\tQ.pop();\n\t\t\tfor(int i = head[u]; i; i = node[i].next) {\n\t\t\t\tint v = node[i].to;\n\t\t\t\tif(dis[v] == -1 && node[i].cap) {\n\t\t\t\t\tdis[v] = dis[u] + 1;\n\t\t\t\t\tQ.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dis[t] != -1;\n\t}\n\tint dfs(int u, int flow) {\n\t\tif(u == t)\n\t\t\treturn flow;\n\t\telse {\n\t\t\tint ret = flow;\n\t\t\tfor(int i = head[u]; i && ret; i = node[i].next) {\n\t\t\t\tint v = node[i].to;\n\t\t\t\tif(dis[v] == dis[u] + 1 && node[i].cap) {\n\t\t\t\t\tint k = dfs(v, min(ret, node[i].cap));\n\t\t\t\t\tnode[i].cap -= k;\n\t\t\t\t\tnode[i ^ 1].cap += k;\n\t\t\t\t\tret -= k;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(ret == flow)\n\t\t\t\tdis[u] = -1;\n\t\t\treturn flow - ret;\n\t\t}\n\t}\n\tint dinic() {\n\t\tint ans = 0;\n\t\twhile(bfs())\n\t\t\tans += dfs(s, INF);\n\t\treturn ans;\n\t}\n} G;\nint n, m;\nint score[MAXN];\nvector<int> out[MAXN];\nint in[MAXN];\nbool vis[MAXN];\nqueue<int> Q;\nvoid toposort() {\n\tfor(int i = 1; i <= n; i ++) {\n\t\tfor(int j = 1; j <= m; j ++) {\n\t\t\tif(!in[POINT(i, j)]) {\n\t\t\t\tQ.push(POINT(i, j));\n\t\t\t\tvis[POINT(i, j)] = true;\n\t\t\t}\n\t\t}\n\t}\n\twhile(!Q.empty()) {\n\t\tint u = Q.front();\n\t\tQ.pop();\n\t\tfor(int i = 0; i < out[u].size(); i ++) {\n\t\t\tint v = out[u][i];\n\t\t\tin[v] --;\n\t\t\tif(!vis[v] && !in[v]) {\n\t\t\t\tQ.push(v);\n\t\t\t\tvis[v] = true;\n\t\t\t}\n\t\t}\n\t}\n}\nint main() {\n\tcin>>n>>m;\n\tfor(int i = 1; i <= n; i ++) {\n\t\tfor(int j = 1; j <= m; j ++) {\n\t\t\tint cnt;  //  \u4fdd\u62a4\u690d\u7269\u7684\u68f5\u6570\n\t\t\tcin>>score[POINT(i, j)]>>cnt;\n\t\t\tfor(int k = 1; k <= cnt; k ++) {\n\t\t\t\tint x, y;\n\t\t\t\tcin>>x>>y;\n\t\t\t\t//  POINT(i, j) <- POINT(x, y)\n\t\t\t\tx ++;\n\t\t\t\ty ++;\n\t\t\t\tout[POINT(i, j)].push_back(POINT(x, y));\n\t\t\t\tin[POINT(x, y)] ++;\n\t\t\t}\n\t\t\tif(j < m) {\n\t\t\t\tout[POINT(i, j + 1)].push_back(POINT(i, j));\n\t\t\t\tin[POINT(i, j)] ++;\n\t\t\t}\n\t\t}\n\t}\n\ttoposort();\n\tG.s = MAXN - 1;\n\tG.t = MAXN - 2;\n\tint sum = 0;\n\tfor(int i = 1; i <= n; i ++) {\n\t\tfor(int j = 1; j <= m; j ++) {\n\t\t\tint u = POINT(i, j);\n\t\t\tif(!vis[u])\n\t\t\t\tcontinue;\n\t\t\tif(score[u] >= 0) {\n\t\t\t\tG.add(G.s, u, score[u]);\n\t\t\t\tsum += score[u];\n\t\t\t\t// printf(\"S -> [%d, %d] : %d\\n\", i, j, score[u]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tG.add(u, G.t, -score[u]);\n\t\t\t\t// printf(\"[%d, %d] -> T : %d\\n\", i, j, -score[u]);\n\t\t\t}\n\t\t\tfor(int k = 0; k < out[u].size(); k ++) {\n\t\t\t\tint v = out[u][k];\n\t\t\t\tif(vis[v]) {\n\t\t\t\t\tG.add(v, u, INF);\n\t\t\t\t\t// printf(\"[%d, %d] -> [%d, %d] : INF\\n\", v / 31, v % 31, i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcout<<sum - G.dinic()<<endl;\n\treturn 0;\n}\n```\n\n\u5185\u5bb9\u4f1a\u9646\u7eed\u642c\u8fd0\u5230\u535a\u5ba2\u91cc......",
        "postTime": 1545536061,
        "uid": 57525,
        "name": "longlongzhu123",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2805 \u3010[NOI2009]\u690d\u7269\u5927\u6218\u50f5\u5c38\u3011"
    },
    {
        "content": "# \u7b97\u6cd5\u601d\u60f3\u6982\u8ff0\n\n\u672c\u9898\u662f\u4e00\u9053\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u6a21\u578b\uff0c\u5e94\u7528\u7684\u7b97\u6cd5\u4e3a\u6700\u5927\u6d41(BFS\u589e\u5e7f\u5373\u53ef)\uff0c\u5b9a\u7406\u4e3a\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\uff0c\u8f85\u52a9\u7b97\u6cd5\u4e3a\u62d3\u6251\u6392\u5e8f\u3002\n\n\n------------\n\n# \u95ee\u9898\u521d\u59cb\u5efa\u6a21\n\n\u9996\u5148\u6211\u4eec\u6211\u5efa\u7acb\u56fe\u8bba\u6a21\u578b\uff0c\u628a\u6bcf\u4e2a\u690d\u7269\u5f53\u505a\u4e00\u4e2a\u9876\u70b9\uff0c\u690d\u7269\u643a\u5e26\u7684\u8d44\u6e90\u6570\u76ee\u4e3a\u9876\u70b9\u7684\u6743\u503c\u3002\u5982\u679c\u4e00\u4e2a\u690d\u7269b\u5728\u53e6\u4e00\u4e2a\u690d\u7269a\u7684\u653b\u51fb\u8303\u56f4\u5185\uff0c\u8fde\u63a5\u4e00\u6761\u6709\u5411\u8fb9<a,b>\uff0c\u8868\u793aa\u53ef\u4ee5\u4fdd\u62a4b\u3002\u7531\u4e8e\u50f5\u5c38\u4ece\u53f3\u5411\u5de6\u8fdb\u653b\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u4e2a\u690d\u7269\u90fd\u88ab\u5b83\u53f3\u8fb9\u76f8\u90bb\u7684\u690d\u7269\u4fdd\u62a4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u690d\u7269a\uff08\u9664\u6700\u5de6\u8fb9\u4e00\u5217\uff09\uff0c\u5411\u5176\u5de6\u8fb9\u7684\u76f8\u90bb\u690d\u7269b\uff0c\u8fde\u63a5\u4e00\u6761\u6709\u5411\u8fb9<a,b>\u3002\n\n\n\n###   1.\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u53bb\u9664\u56fe\u4e2d\u7684\u73af\uff0c\u4ece\u800c\u4f7f\u56fe\u5f97\u5230\u7b80\u5316\u3002\n\u7531\u672c\u9898\u6837\u4f8b\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u6709\u4e00\u4e9b\u690d\u7269\u662f\u76f8\u4e92\u4f9d\u8d56\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u7b97\u6cd5\u5b9e\u73b0\u7684\u7b2c\u4e00\u6b65\uff1a\n\n- 1.\u5c31\u662f\u641c\u4e00\u904d\u5165\u5ea6\u4e3a\u96f6\u7684\u52a0\u5165\u961f\u5217\u3002\n- 2.\u628a\u961f\u5217\u4e2d\u7684\u690d\u7269\u53d6\u51fa\u6765\uff0c\u627e\u5230\u8fd9\u4e2a\u690d\u7269\u4fdd\u62a4\u7684\u70b9\u5165\u5ea6\u51cf\u4e00\uff0c\u51cf\u5230\u96f6\u5c31\u5165\u5217\u3002\u91cd\u590d\u8fd9\u4e00\u6b65\u3002\u6700\u540e\u8bbf\u95ee\u5230\u7684\u5c31\u662f\u6ca1\u6709\u5728\u73af\u5185\u7684\u3002\n\n ###  2.\u5bf9\u7b2c\u4e00\u6b65\u4e2d\u5f97\u5230\u7684\u56fe\u8fdb\u884c\u8f6c\u7f6e\u64cd\u4f5c(\u628a\u6240\u6709\u8fb9\u53cd\u5411)\uff0c\u4ece\u800c\u5f97\u5230\u6700\u5927\u5b50\u6743\u95ed\u5408\u56fe\u3002\n\n\n![](http://www.lydshy.com:3389/wordpress/wp-content/uploads/2016/08/e462b012986ea203f819b8b9.png)\n\n   \u5176\u4e2d\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u4e3a(1,2,4) \n\n\u4e0b\u9762\u8fdb\u884c\u7b97\u6cd5\u5b9e\u73b0\u7684\u7b2c3\u30014\u6b65\uff1a\n\n### 3.\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u7f51\u7edc\u6d41\u5efa\u6a21\uff1a\n\n- 1.\u5efa\u7acb\u9644\u52a0\u6e90S\u548c\u9644\u52a0\u6c47T\u3002\n\n- 2.\u56fe\u4e2d\u539f\u6709\u7684\u8f6c\u7f6e\u540e\u7684\u8fb9\u5bb9\u91cf\u8bbe\u4e3a\u221e\u3002\n\n- 3.\u4eceS\u5411\u6bcf\u4e2a\u6743\u503c\u4e3a\u6b63\u7684\u70b9\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a\u8be5\u70b9\u6743\u503c\u7684\u6709\u5411\u8fb9\u3002\n\n- 4.\u4ece\u6bcf\u4e2a\u6743\u503c\u4e0d\u4e3a\u6b63\u7684\u70b9\u5411T\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a\u8be5\u70b9\u6743\u503c\u7edd\u5bf9\u503c\u7684\u6709\u5411\u8fb9\u3002\n\n####    \u5efa\u8fb9\u540e\u56fe\u5982\u4e0b\uff1a\n\n![](http://www.lydshy.com:3389/wordpress/wp-content/uploads/2016/08/fe0e3951d56c944a367abeb9-130x300.png)\n\n### 4.\u6c42\u89e3\uff1a\n   \u6c42S\u5230T\u7684\u6700\u5927\u6d41Maxflow\uff0c\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6743\u503c\u5c31\u662f(\u6240\u6709\u6b63\u6743\u70b9\u6743\u503c\u4e4b\u548c \u2013 Maxflow)\uff0c\u4e5f\u5c31\u662f\u9700\u8981\u8f93\u51fa\u7684\u7b54\u6848\u3002\u56e0\u4e3a\u6211\u4eec\u8981\u5403\u4e00\u4e2a\u690d\u7269\uff0c\u5c31\u8981\u5403\u6389\u4fdd\u62a4\u5b83\u7684\u690d\u7269\uff0c\u800c\u5728\u6700\u5927\u6d41\u4e2d\u7684\u610f\u4e49\u5c31\u662f\u4f60\u8981\u6d41\u8fc7**s->\u4e00\u4e2a\u690d\u7269**\uff0c\u5c31\u8981\u6d41\u8fc7**\u4fdd\u62a4\u5b83\u7684\u690d\u7269->t**\u3002\n    \n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u60f3\uff0c\u5f53\u6211\u4eec**\u4eces\u5230t\u7684\u4e00\u6761\u8def**\u4e0a \u5f97\u5230\u4e86**Ws** \u82b1\u8d39\u4e86**min(Ws,Wt\uff09**,\u5982\u679c**Wt>Ws** \u5f97\u5230\u6536\u76ca\u4e3a **Ws - Ws = 0**\uff08\u76f8\u5f53\u4e8e\u4e0d\u8d70\uff09;\u5982\u679c**Wt<Ws**,\u6536\u76ca\u4e3a**Ws - Wt**\u3002\n\n   \u800c**\u6240\u6709\u6b63\u6743\u70b9\u6743\u503c\u4e4b\u548c**\u5c31\u662f\n   $\\begin{matrix}\\underbrace{Ws1+Ws2+\\cdots+Wsn}\\\\n\\end{matrix}=\\sum\\limits_{i=1}^nW_i$    \uff0c\n   \u800c**S\u5230T\u7684\u6700\u5927\u6d41Maxflow**\u5c31\u662f\n  $\\begin{matrix}\\underbrace{min(Wt1,Ws1)+min(Wt2,Ws2)+\\cdots+min(Wtn,Wsn)}\\\\n\\end{matrix}=\\sum\\limits_{i=1}^nmin(Wti,Wsi)$    \n$ $\n \u4e5f\u5c31\u662f\u7b54\u6848    $  \\sum\\limits_{i=1}^nW_i-\\sum\\limits_{i=1}^nmin(Wti,Wsi) =$  sum-dinic()\n \n \n   \n\n------------\n\n   \n# Coding\n   \n```cpp\n#include<bits/stdc++.h>\n#define POINT(X, Y)  ((X) * 31 + (Y))\nusing namespace std;\nconst int MAXN = POINT(30,30)+10;\nconst int INF = 1<<28;\n\nint read(){\n    int flag=1,sum=0;char c;\n    for(;c>'9'||c<'0';c=getchar())if(c=='-')flag=-1;\n    for(;c<='9'&&c>='0';c=getchar())sum=(sum<<3)+(sum<<1)+c-'0';\n    return flag*sum;\n}\n\nstruct node{\n    int to, val;\n    int next=-1;\n}edge[MAXN*MAXN*2];int top=1, head[MAXN];\nvector<int> out[MAXN];int vis[MAXN],in[MAXN],score[MAXN];\nint dep[MAXN],s=MAXN-1,t=MAXN-2;int n,m;\n\nvoid add(int u, int v, int val) \n{\n    top++;edge[top].to = v;edge[top].val = val;edge[top].next = head[u];head[u] = top;\n    top++;edge[top].to = u;edge[top].val = 0;edge[top].next = head[v];head[v] = top;\n}\n// dinic\u90e8\u5206\nint bfs()\n{\n\tmemset(dep,0,sizeof(dep));\n\tqueue<int> q;\n\twhile(!q.empty()) \n\t\tq.pop();\n\tq.push(s);\n\tdep[s]=1;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u];i!=-1;i=edge[i].next)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif(dep[v]==0&&edge[i].val>0)\n\t\t\t{\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tq.push(v);\n\t\t\t\tif(v==t)return 1;\n\t\t\t}\n\t\t}\n\t}\n    return 0;\n}\nint dfs(int u,int flow)\n{\n\tif(u==t)\n\t\treturn flow;\n\tfor(int i=head[u];i!=-1;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(dep[v]==dep[u]+1&&edge[i].val>0)\n\t\t{\n\t\t\tint k=dfs(v,min(edge[i].val,flow));\n\t\t\tif(k==0)\n\t\t\t{\n\t\t\t\tdep[v]=0;\n\t\t\t} \n\t\t\telse\n\t\t\t{\n\t\t\t\tedge[i].val-=k;\n\t\t\t\tedge[i^1].val+=k;\n\t\t\t\treturn k;\t\t\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint dinic()\n{\n\tint flow,maxflow=0;\n\twhile(bfs())\n\t{\n\t\twhile(flow=dfs(s,INF))\n\t\t{\n\t\t\tmaxflow+=flow;\n\t\t}\n\t}\n\treturn maxflow;\n}\n\n// \u6784\u9020\u56fe\u90e8\u5206\nvoid topsort()\n{\n    queue<int> q;\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n        {\n            if(in[POINT(i,j)]==0)\n            {\n                q.push(POINT(i,j));\n                vis[POINT(i,j)]=1;\n            }\n        }\n    while(!q.empty())\n    {\n        int u=q.front();q.pop();\n        int len=out[u].size();\n        for(int i=0;i<len;i++)\n        {\n            int v=out[u][i];\n            in[v]--;\n            if(vis[v]==0&&in[v]==0)\n            {\n                q.push(v);\n                vis[v]=1;\n            }\n        }    \n    }\n}\nint main(){\n//\tfreopen(\"B.in\",\"r\",stdin);\n//\tfreopen(\"B.out\",\"w\",stdout);\n    n=read();m=read();\n    for(int i=1;i<=n;i++){\n        int flag,x,y;\n        for(int j=1;j<=m;j++)\n        {\n            score[POINT(i,j)]=read();\n            flag=read();\n            while(flag--)\n            {\n                x=read();y=read();x++,y++;\n                out[POINT(i,j)].push_back(POINT(x,y));\n                in[POINT(x,y)]++;\n            }\n            if(j < m) \n            {\n                out[POINT(i, j + 1)].push_back(POINT(i, j));\n                in[POINT(i, j)] ++;\n            }\n        }\n    }\n    topsort();\n    int sum=0;\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            if(in[POINT(i,j)]==0)\n            {\n                int u = POINT(i, j);\n                if(!vis[u])\n                    continue;\n                if(score[u] >= 0) {\n                    add(s,u,score[u]);\n                    sum += score[u];//cout<<sum<<\" \";\n                } else \n                \tadd(u,t,-score[u]);   \n                for(int k = 0; k < out[u].size(); k ++)\n                {\n                    int v = out[u][k];\n                    if(vis[v]) \n                        add(v, u, INF);\n                    \n                }\n            }\n        }\n    }\n    cout<<sum-dinic();\n    return 0;\n}\n```\n\u600e\u4e48\u5c31\u62cd\u677f\u4e0d\u6574\u9f50\u4e86QAQ...",
        "postTime": 1562590390,
        "uid": 46303,
        "name": "Freddie",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2805 \u3010[NOI2009]\u690d\u7269\u5927\u6218\u50f5\u5c38\u3011"
    },
    {
        "content": "\u770b\u5f88\u591a\u5927\u4f6c\u90fd\u8bf4\u7684\u662f\u201c\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u201d\uff0c\u849f\u84bb\u4e0d\u662f\u5f88\u61c2\uff0c\u8fd9\u91cc\u7528\u4e00\u79cd\u6bd4\u8f83\u901a\u4fd7\u7684\u65b9\u6cd5\u89c1\u4e00\u4e0b\u8fd9\u9053\u9898\u3002\n\n\u4e0d\u7528tarjan,\u4e0d\u7528\u626b\u73af\u3002\n\n\u73a9\u8fc7\u539f\u6e38\u620f\u4e2d\u201c\u6211\u662f\u50f5\u5c38\u201d\u6a21\u5f0f\u7684\u4eba\u5e94\u8be5\u90fd\u6709\u7ecf\u9a8c\uff0c\u6211\u4eec\u6bcf\u6b21\u90fd\u8ba9\u50f5\u5c38\u53bb\u5403\u6ca1\u6709\u4fdd\u62a4\u7684\u690d\u7269\u5373\u53ef\u3002\u56e0\u6b64\u6211\u4eec\u76f4\u89c2\u7684\u8ba9\u4fdd\u62a4\u8005\u5411\u88ab\u4fdd\u62a4\u8005\u8fde\u8fb9\uff0c\u5728\u4efb\u610f\u65f6\u523b\uff0c\u5047\u5982\u67d0\u682a\u690d\u7269\u6ca1\u6709\u8fde\u5411\u5b83\u7684\u8fb9\u4e86\uff0c\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u6210\u4e3a\u6211\u4eec\u653b\u51fb\u7684\u5bf9\u8c61\u3002\u6211\u4eec\u4ece\u4e00\u5f00\u59cb\u5165\u5ea6\u4e3a0\u7684\u70b9\u5f00\u59cb\u641c\u7d22\uff0c\u5bf9\u5b83\u7684\u6240\u6709\u5904\u8fb9\u4e0a\u7684\u70b9\u5165\u5ea6\u51cf\u4e00\uff0c\u5982\u679c\u51cf\u5230\u96f6\u5c31\u628a\u5b83\u5165\u961f\u3002\n\n\u8fd9\u5341\u5206\u7c7b\u4f3c\u4e8e\u6211\u4eec\u6240\u5b66\u8fc7\u7684\u62d3\u6251\u6392\u5e8f\uff0c\u800c\u4e14\u8fd9\u6837\u505a\u5de7\u5999\u5730\u628a\u53ef\u80fd\u88ab\u6211\u4eec\u653b\u51fb\u7684\u690d\u7269\u90fd\u7b5b\u51fa\u6765\u4e86\u3002\u6700\u540e\u4e0b\u56fe\u4e2d\u6a59\u8272\u7684\u690e\u4f53\u5c31\u662f\u6211\u4eec\u7b5b\u51fa\u6765\u7684\u53ef\u884c\u70b9\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/27216.png )\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5957\u8def\u4e86\uff0c\u6211\u4eec\u8fd8\u662f\u5c06\u6b63\u6743\u8fde\u6e90\u70b9\uff0c\u8d1f\u6743\u8fde\u6c47\u70b9\uff0c\u62d3\u6251\u5e8f\u5c0f\u7684\u8fde\u4e0a\u62d3\u6251\u5e8f\u5927\uff0c\u8dd1\u4e00\u904ddinic\u6216isap\u5c31\u884c\u4e86\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define REP1(u) for(int   i=hd[u],v=e[i].v,c=e[i].c;i;i=e[i].n,v=e[i].v,c=e[i].c)\n#define REP2(u) for(int &i=cur[u],v=e[i].v,c=e[i].c;i;i=e[i].n,v=e[i].v,c=e[i].c)\n#define REPTP(u) for(int i=hd1[u],v=ed[i].v;i;i=ed[i].n,v=ed[i].v)\nusing namespace std;\nconst int N=300,TO=100100,M=1000100,INF=1000010000;\nstruct edge{int n,v,c;}e[M];\nstruct tpeg{int n,v;}ed[M];\nint n,m,ans,x,y,u,S,T,fl=1,cnt,tot,id[TO],tp[TO],su,fl1,sum;\nint hd[TO],dep[TO],cur[TO],a[N][N],b[N][N],pt[TO],d[TO],hd1[TO];\nqueue<int>q;\nvoid add(int u,int v,int c){e[++fl]=(edge){hd[u],v,c};hd[u]=fl;}\nvoid adde(int u,int v,int c){add(u,v,c),add(v,u,0);}\nvoid addTP(int u,int v){ed[++fl1]=(tpeg){hd1[u],v};hd1[u]=fl1;d[v]++;}\nbool bfs(){\n    while(!q.empty()) q.pop();\n    FOR(i,S,T) dep[i]=-1,cur[i]=hd[i];\n    q.push(S),dep[S]=0;\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        REP1(u)if(dep[v]==-1 && c>0){\n            q.push(v),dep[v]=dep[u]+1;\n            if(v==T) return 1;\n        }\n    }return dep[T]!=-1;\n}\nint dfs(int u,int exp){\n    if(u==T) return exp;\n    int flw=0,tmp;\n    REP2(u)if(dep[v]==dep[u]+1 && c>0){\n        tmp=dfs(v,min(exp,c));\n        if(!tmp) continue;\n        e[i].c-=tmp;e[i^1].c+=tmp;\n        flw+=tmp,exp-=tmp;\n        if(!exp) break;\n    }return flw;\n}\nvoid dinic(){while(bfs()) ans+=dfs(S,INF);}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    FOR(i,1,n)FOR(j,1,m) a[i][j]=++tot;\n    FOR(i,1,n)FOR(j,1,m){\n        u=a[i][j];\n        if(j>1) addTP(u,a[i][j-1]);\n        scanf(\"%d%d\",&pt[u],&su);\n        while(su--) scanf(\"%d%d\",&x,&y),addTP(u,a[x+1][y+1]);\n    }\n    FOR(i,1,tot) if(!d[i]) q.push(i);\n    S=++cnt;\n    while(!q.empty()){\n        u=q.front();q.pop();\n        id[u]=++cnt,tp[cnt]=u;\n        REPTP(u)if(!--d[v]) q.push(v);\n    }\n\tT=++cnt;\n    FOR(p,2,cnt-1){\n        u=tp[p];\n        if(pt[u]>0) adde(S,p,pt[u]),sum+=pt[u];\n        if(pt[u]<0) adde(p,T,-pt[u]);\n        REPTP(u) adde(id[v],p,INF); \n    }\n    dinic();\n    printf(\"%d\",sum-ans);\n}\n```",
        "postTime": 1533645307,
        "uid": 62267,
        "name": "BJpers2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2805 \u3010[NOI2009]\u690d\u7269\u5927\u6218\u50f5\u5c38\u3011"
    },
    {
        "content": "\u5c31\u662f\u4e00\u4e2a\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6a21\u578b\u3002\u9996\u5148\u7531\u6e90\u70b9\u5411\u6240\u6709\u6b63\u6743\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u5176\u6743\u503c\u7684\u8fb9\uff0c\u6709\u6240\u6709\u8d1f\u6743\u70b9\u5411\u6c47\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a-\uff08\u6743\u503c\uff09\u7684\u8fb9\uff0c\u7136\u540e\u7531\u88ab\u4fdd\u62a4\u70b9\u5411\u4fdd\u62a4\u70b9\u8fde\u4e00\u6761\u221e\u7684\u8fb9\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u6c42\u6700\u5c0f\u5272S\u96c6\u5c31\u662f\u6240\u653b\u51fb\u5230\u7684\u70b9\uff0c\u7528\uff08sum\uff08\u603b\u6b63\u6743\u70b9\u503c\uff09-\u6700\u5c0f\u5272\uff09\u5c31\u662f\u7b54\u6848\u3002\u56e0\u4e3a\uff081\uff09\u3001\u221e\u4e0d\u53ef\u80fd\u88ab\u9009\u5165\u6700\u5c0f\u5272\uff0c\u6240\u4ee5\u5982\u679c\u4e00\u4e2a\u690d\u7269\u7684\u5206\u6570\u5728S\u96c6\u4e00\u5b9a\u4e5f\u4f1a\u628a\u4fdd\u62a4\u4ed6\u7684\u690d\u7269\u9009\u8fdbS\u96c6\uff0c\u8fd9\u6837\u786e\u4fdd\u89e3\u662f\u53ef\u884c\u7684\u3002\uff082\uff09\u3001\u6b64\u65f6\u6700\u5c0f\u5272\u7684\u6570\u503c\u4e3asum\uff08\u672a\u9009\u7684\u6b63\u6743\u70b9\u503c\uff09+sum\uff08\u5df2\u9009\u7684\u8d1f\u6743\u70b9\u503c\uff09=\uff08sum\uff08\u603b\u6b63\u6743\u70b9\u503c\uff09-sum\uff08\u5df2\u9009\u6b63\u6743\u70b9\u503c\uff09\uff09+sum\uff08\u5df2\u9009\u8d1f\u6743\u70b9\u503c\uff09\uff0c\u6240\u4ee5sum\uff08\u603b\u6b63\u6743\u70b9\u503c\uff09-\u6700\u5c0f\u5272=sum\uff08\u603b\u6b63\u6743\u70b9\u503c\uff09-[\uff08sum\uff08\u603b\u6b63\u6743\u70b9\u503c\uff09-sum\uff08\u5df2\u9009\u6b63\u6743\u70b9\u503c\uff09\uff09+sum\uff08\u5df2\u9009\u8d1f\u6743\u70b9\u503c\uff09]=sum\uff08\u5df2\u9009\u6b63\u6743\u70b9\u503c\uff09-sum\uff08\u5df2\u9009\u8d1f\u6743\u70b9\u503c\uff09=\u9898\u76ee\u6240\u6c42\uff0c\u53c8\u56e0\u4e3asum\uff08\u603b\u6b63\u6743\u70b9\u503c\uff09\u4e0d\u53d8\uff0c\u8981\u60f3\u6700\u540e\u7684\u503c\u6700\u5927\uff0c\u5c31\u8981\u8ba9\u5272\u6700\u5c0f\u5373\u6700\u5c0f\u5272\u3002\u5728\u672c\u9898\u4e2d\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u6709\u53ef\u80fd\u51fa\u73b0\u201c\u65e0\u654c\u8282\u70b9\u201d\u2014\u2014\u5728\u6784\u9020\u7684\u7f51\u7edc\u4e2d\u51fa\u73b0\u73af\uff0c\u6b64\u65f6\u73af\u5185\u6240\u6709\u8282\u70b9\u90fd\u4e0d\u53ef\u80fd\u53d6\u5230\uff0c\u540c\u65f6\u88ab\u73af\u5185\u8282\u70b9\u4fdd\u62a4\u7684\u6240\u6709\u8282\u70b9\u4e5f\u4e0d\u53ef\u53d6\u6240\u4ee5\u8981\u5148\u53bb\u6389\u8fd9\u4e9b\u70b9\u3002\u65b9\u6cd5\u662f\uff1a\u628a\u7f51\u7edc\u4e2d\u6240\u6709\u8fb9\u53cd\u5411\u8fdb\u884c\u62d3\u6251\uff0c\u62d3\u6251\u5230\u7684\u70b9\u5c31\u662f\u8981\u4fdd\u7559\u7684\u70b9\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u53cd\u5411\uff0c\u56e0\u4e3a\u5982\u679c\u4e0d\u53cd\u5411\u90a3\u5220\u6389\u7684\u70b9\u662f\u73af\u5185\u7684\u70b9\u548c\u4fdd\u62a4\u73af\u7684\u70b9\uff0c\u4f46\u660e\u663e\u4fdd\u62a4\u73af\u7684\u70b9\u662f\u53ef\u4ee5\u53d6\u5230\u7684\uff0c\u800c\u771f\u6b63\u56e0\u8be5\u53bb\u6389\u7684\u88ab\u73af\u4fdd\u62a4\u7684\u70b9\u5374\u8fd8\u5b58\u5728\uff0c\u6240\u4ee5\u5fc5\u987b\u53cd\u5411\u3002\n\n```cpp\n  1 #include<iostream>\n  2 #include<cstdio>\n  3 #include<cstdlib>\n  4 #include<cstring>\n  5 #include<algorithm>\n  6 #include<queue>\n  7 #define INF 10000000\n  8 using namespace std;\n```\n9\n```cpp\n 10 struct edge\n 11 {\n 12        int y,d,next,op;\n 13 } e[1000000],e2[1000000];\n 14 int now=0,tot=0,tot2=0,n,m,s,t,N=0,sum=0;\n 15 int map[200][200],sc[1000],r[1000],first[1000],first2[1000];\n 16 int h[1000],num[1000];\n 17 bool v[1000];\n```\n18\n```cpp\n 19 int inss(int x,int y)\n 20 {\n 21     tot++;\n 22     e[tot].y=y;\n 23     e[tot].next=first[x];\n 24     first[x]=tot;\n 25     return 0;\n 26 }\n```\n27\n```cpp\n 28 int add(int x,int y,int d)\n 29 {\n 30     tot2++;\n 31     e2[tot2].y=y;\n 32     e2[tot2].d=d;\n 33     e2[tot2].next=first2[x];\n 34     e2[tot2].op=tot2+1;\n 35     first2[x]=tot2;\n 36     tot2++;\n 37     e2[tot2].y=x;\n 38     e2[tot2].d=0;\n 39     e2[tot2].next=first2[y];\n 40     e2[tot2].op=tot2-1;\n 41     first2[y]=tot2;\n 42     return 0;\n 43 }\n```\n44\n```cpp\n 45 int init()\n 46 {\n 47     scanf(\"%d%d\",&n,&m);\n 48     for (int i=0;i<n;i++)\n 49         for (int j=0;j<m;j++) map[i][j]=++now; \n 50     for (int i=0;i<n;i++)\n 51         for (int j=0;j<m;j++)\n 52         {\n 53             int num,x,y;\n 54             scanf(\"%d%d\",&sc[map[i][j]],&num);\n 55             for (int k=0;k<num;k++)\n 56             {\n 57                 scanf(\"%d%d\",&x,&y);\n 58                 r[map[x][y]]++;\n 59                 inss(map[i][j],map[x][y]);             \n 60             }\n 61         }        \n 62     for (int i=0;i<n;i++)\n 63         for (int j=0;j<m-1;j++) \n 64         {\n 65             r[map[i][j]]++;\n 66             inss(map[i][j+1],map[i][j]);\n 67         }\n 68     return 0;\n 69 }\n```\n70\n```cpp\n 71 int SSSP()\n 72 {\n 73     queue<int> q;\n 74     memset(v,0,sizeof(v));\n 75     for (int i=1;i<=now;i++) \n 76         if (r[i]==0)\n 77         {\n 78                     q.push(i);\n 79                     v[i]=1;\n 80         }\n 81     while (!q.empty())\n 82     {\n 83           int u=q.front();\n 84           q.pop();\n 85           for (int p=first[u];p;p=e[p].next)\n 86           {\n 87               r[e[p].y]--;\n 88               if (r[e[p].y]==0) \n 89                  {q.push(e[p].y); v[e[p].y]=1;}\n 90           }\n 91     }\n 92     return 0;\n 93 }\n```\n94\n```cpp\n 95 int find(int u,int flow)\n 96 {\n 97     if (u==t) return flow;\n 98     int temp=flow,pos=N-1;\n 99     for (int p=first2[u];p;p=e2[p].next)\n100     {\n101         if (h[u]==h[e2[p].y]+1 && e2[p].d>0)\n102         {\n103                               int f=find(e2[p].y,min(e2[p].d,temp));\n104                               temp-=f;\n105                               e2[p].d-=f;\n106                               e2[e2[p].op].d+=f;\n107                               if (temp==0 || h[s]==N) return flow-temp;\n108         }\n109         if (e2[p].d>0 && pos>h[e2[p].y]) pos=h[e2[p].y];\n110     }\n111     if (temp==flow)\n112     {\n113                    num[h[u]]--;\n114                    if (num[h[u]]==0) h[s]=N;\n115                    else\n116                    {\n117                        h[u]=pos+1;\n118                        num[h[u]]++;\n119                    }\n120     }\n121     return flow-temp;\n122 }\n```\n123\n```cpp\n124 int solve()\n125 {\n126     s=0;\n127     t=n*m+1;\n128     for (int i=1;i<=now;i++)\n129     {\n130         if (v[i] && sc[i]>0) {add(s,i,sc[i]); sum+=sc[i];}\n131         if (v[i] && sc[i]<0) add(i,t,-sc[i]);\n132     }\n133     for (int i=1;i<=now;i++)\n134         if (v[i]) \n135            for (int p=first[i];p;p=e[p].next)\n136                if (v[e[p].y])\n137                   add(e[p].y,i,INF);\n138     for (int i=1;i<=now;i++) N++;\n139     N+=2;\n140     memset(h,0,sizeof(h));\n141     memset(num,0,sizeof(num));   \n142     num[0]=N;\n143     int ans=0;\n144     while (h[s]<N) ans+=find(s,INF);\n145     return ans;\n146 }\n```\n147\n```cpp\n148 int main()\n149 {    \n150     freopen(\"pvz.in\",\"r\",stdin); \n151     freopen(\"pvz.out\",\"w\",stdout);\n152     init();\n153     SSSP();\n154     printf(\"%d\",max(sum-solve(),0));\n155     //system(\"pause\");\n156     fclose(stdin);fclose(stdout);\n157     return 0;\n158 }\n```",
        "postTime": 1470753102,
        "uid": 10291,
        "name": "fighter_OI",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2805 \u3010\u690d\u7269\u5927\u6218\u50f5\u5c38\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u3002\u3002\u5927\u5bb6\u597d\u50cf\u90fd\u662f\u7528\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u505a\u7684\u554a\u3002\u3002\n\n\u849f\u84bb\u4e0d\u4f1a\uff0c\u6240\u4ee5\u81ea\u5df1yy\u51fa\u4e86\u4e00\u4e2a\u4e0d\u7528\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u5947\u602a\u7684\u505a\u6cd5(\u8dd1\u5f97\u6709\u70b9\u6162)\u3002\u3002\u867d\u7136\u672c\u8d28\u4e0a\u8fd8\u662f\u4e00\u4e2a\u6700\u5c0f\u5272\u3002\n\n\u5148\u62ff\u6837\u4f8b\u5f00\u4e2a\u5200\u3002\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u51fa\u4e00\u4e2a\u5982\u4e0b\u56fe\u7684\u7f51\u683c\u56fe\uff1a\n\n![](https://i.loli.net/2019/01/10/5c372990a04d3.png)\n\n\u7136\u540e\u6211\u4eec\u4ee4\u5272\u5b8c\u8fb9\u540e\u5c5e\u4e8eS\u96c6\u5408\u7684\u70b9\u4ee3\u8868\u88ab\u5403\u4e86\u7684\u690d\u7269\uff0cT\u96c6\u5408\u8868\u793a\u6ca1\u6709\u88ab\u5403\u7684\u690d\u7269\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u7528\u524d\u7f00\u548c\u6765\u4ee3\u8868\u4e00\u6761\u8fb9\u7684\u6d41\u91cf\uff0c\u8fd9\u6837\u7684\u8bdd\u5272\u6389\u4e00\u6761\u8fb9\u5c31\u662f\u628a\u524d\u9762\u7684\u690d\u7269\u90fd\u5403\u6389\u7684\u4ee3\u4ef7\u3002\u5c31\u50cf\u8fd9\u6837\u3002\n\n![](https://i.loli.net/2019/01/10/5c372e8e7382d.png)\n\n\u663e\u7136\u8fd9\u4e2a\u56fe\u6709\u51e0\u4e2a\u5927bug\uff1a\n\n1. \u6709\u8d1f\u6743\u8fb9\u3002\n\n2. \u5c31\u7b97\u80fd\u8dd1\u51fa\u6765\uff0c\u6700\u5c0f\u5272\u4e5f\u8fd8\u662f\u6700\u5c0f\u7684\u4ef7\u503c\u3002\u672c\u9898\u8981\u6c42\u7684\u662f\u6700\u5927\u7684\u4ef7\u503c\u3002\n\n\u89e3\u51b3\u7684\u65b9\u6848\u4e5f\u5f88\u7b80\u5355\uff1a\n\n1. \u5728\u6c42\u524d\u7f00\u548c\u524d\u52a0\u4e0a\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6b63\u6574\u6570\u3002\n\n2. \u628a\u539f\u6765\u7684\u6240\u6709\u6743\u503c\u4e58\u4e0a-1\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u8dd1\u51fa\u6765\u7684\u6700\u5c0f\u5272\u53ea\u8981\u51cf\u53bb \u539f\u56fe\u7684\u884c\u6570 * \u90a3\u4e2a\u975e\u5e38\u5927\u7684\u6b63\u6574\u6570 \uff0c\u7136\u540e\u4e58\u56de-1\u5c31\u662f\u6700\u5927\u4ef7\u503c\u4e86\u3002\n\n\u6539\u8fdb\u540e\u7684\u56fe\u957f\u8fd9\u6837\uff1a\n\n![](https://i.loli.net/2019/01/10/5c372e8e71acd.png)\n\n\u7136\u540e\u5982\u679c\u6ca1\u6709\u653b\u51fb\u7684\u9650\u5236\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u5230\u8fd9\u4e5f\u5c31\u5b8c\u4e86\u3002\n\n\u4f46\u662f\u8fd9\u9053\u9898\u5e76\u4e0d\u662f\u3002\n\n\u5bf9\u4e8e\u653b\u51fb\u7684\u9650\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u8fd9\u6837\u4e00\u79cd\u65b9\u5f0f\u7ef4\u62a4\uff1a\n\n\u7531\u88ab\u4fdd\u62a4\u70b9\u5411\u4fdd\u62a4\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3aINF\u7684\u8fb9\u3002\n\n\u8fd9\u4e2a\u7684\u542b\u4e49\u5c31\u662f\uff1a\u5982\u679c\u4f60\u5272\u4e86\u88ab\u4fdd\u62a4\u70b9\u7684\u524d\u9762\u7684\u8fb9\uff0c\u90a3\u5c31\u5e76\u6ca1\u6709\u4ec0\u4e48\u5f71\u54cd\u3002\u5982\u679c\u5272\u4e86\u540e\u9762\u7684\u8fb9\uff0c\u90a3\u4e48\u4f60\u5c31\u9700\u8981\u5728\u4fdd\u62a4\u70b9\u90a3\u4e00\u884c\u4e00\u76f4\u5403\u5230\u4fdd\u62a4\u70b9\u4e4b\u540e\u3002\n\n\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5efa\u51fa\u4e0b\u9762\u7684\u56fe\uff1a\n\n![](https://i.loli.net/2019/01/10/5c372e8e63d98.png)\n\n(\u8fd9\u91cc\u7684(2,1)\u5230(2,0)\u8fde\u4e86\u4e00\u6761\u5bb9\u91cf\u4e3aINF\u7684\u8fb9(\u4fdd\u62a4\u5173\u7cfb)\u540e\u5bb9\u91cf\u5c31\u53d8\u6210INF\u4e86\u3002)\n\n\u7136\u540e\u4f60\u5c31\u53d1\u73b0\u4e86\u4e00\u4e2a\u66f4\u5927\u7684bug\uff1a\u7b2c\u4e09\u884c\u4f1a\u5272\u6389(2,0)\u5230T\u7684\u8fb9\uff01\uff01\n\n\u663e\u7136\u4f60\u662f\u6ca1\u6709\u529e\u6cd5\u5148\u5403\u6389(2,1)\u518d\u5403\u6389(2,0)\u7684\u3002\u56e0\u4e3a\u4f60\u8981\u5403\u6389(2,1)\uff0c\u9996\u5148\u5148\u5f97\u51fb\u6e83(2,0)\u6765\u53bb\u6389(2,1)\u7684\u9632\u62a4\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709\u5403\u6389(2,1)\u4f60\u5c31\u5403\u4e0d\u6389(2,0)\u3002\n\n\u7136\u540e\u3002\u3002\u4f60\u5c31\u6ce8\u610f\u5230\u4e86\u8fd9\u91cc\u662f\u73af\u7684\u5173\u7cfb\u3002\u3002\n\n\u679c\u65ad\u62d3\u6251\u6392\u5e8f\uff0c\u627e\u51fa\u6240\u6709\u5728\u73af\u4e2d\u7684\u70b9\uff0c\u4e00\u884c\u4e2d\u4e00\u65e6\u6709\u4e00\u4e2a\u70b9\u5728\u73af\u4e2d\uff0c\u90a3\u4e48\u5b83\u5c31\u80af\u5b9a\u4e0d\u80fd\u88ab\u5403\u6389\u4e86\u3002\n\n\u81f3\u4e8e\u8fde\u8fb9\uff0c\u5c31\u662f\u6309\u7167\u5403\u7684\u987a\u5e8f\uff0c\u4ece\u4e00\u884c\u7684\u524d\u9762\u7684\u70b9\u8fde\u5411\u540e\u9762\u7684\u70b9\uff0c\u4fdd\u62a4\u70b9\u8fde\u5411\u88ab\u4fdd\u62a4\u70b9\u5c31\u597d\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u6ce8\u610f\u5230\u5982\u679c\u4e00\u4e2a\u70b9\u5728\u73af\u4e0a\uff0c\u90a3\u4e48\u5b83\u540e\u9762\u7684\u70b9\u5c31\u80af\u5b9a\u4e0d\u80fd\u88ab\u5403\u6389\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u7b2c\u4e00\u4e2a\u5728\u73af\u4e2d\u7684\u70b9\u5411T\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3aINF\u7684\u8fb9\uff0c\u7136\u540e\u7531\u4e8e\u6700\u5c0f\u5272\u7684\u6027\u8d28\uff0c\u5b83\u5c31\u4e0d\u5f97\u4e0d\u5272\u524d\u9762\u7684\u8fb9\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e0b\u9762\u8fd9\u6837\u4e00\u5f20\u56fe\uff1a\n\n![](https://i.loli.net/2019/01/10/5c372e8e75a60.png)\n\n\u7136\u540e\u4f60\u53ef\u4ee5\u8bd5\u7740\u624b\u52a8\u5272\u8fb9\uff0c\u53d1\u73b0\u5272\u6389\u7684\u662f(0,0)\u5230T\u7684\u8fb9\u3001(1,1)\u5230(1,0)\u7684\u8fb9\uff0cS\u5230(2,1)\u7684\u8fb9\u3002\u7ed3\u679c\u662f3e9-((1e9-30)+(1e9+5)+1e9)=25\uff0c\u975e\u5e38\u6b63\u786e\u3002\n\n\u7136\u540e\u5c31\u662f\u7801\u7684\u4e8b\u60c5\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define reg register\n#define ge getchar()\n#define Re read()\n#define id(x, y) ((x - 1) * m + y)//\u70b9\u7684\u7f16\u53f7\u8f6c\u5316\n#define FI \"Network.in\"\n#define FO \"Network.out\"\n#define MAXN 1010\n#define MAXM 363636\n#define Inf 2147483647\n#define Add 50000000 //\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570\uff0c\u8fd9\u4e48\u5927\u8db3\u591f\u4e86\u3002\n\ninline int read();\ninline void Link(reg int, reg int, reg int);\ninline void check();\ninline int solve(reg int, reg int);\ninline int DFS(reg int, reg int, reg int);\ninline int BFS(reg int, reg int);\n\nint n;\nint m;\nint tot;\nint fi[MAXN + 1];\nint la[MAXN + 1];\nint V[MAXM + 1];\nint to[MAXM + 1];\nint ne[MAXM + 1];\nint Arrive[MAXN + 1];\n\nqueue<int>q;\nbitset<MAXN + 1>OK; //\u4e00\u4e2a\u70b9\u662f\u4e0d\u662f\u5728\u73af\u4e0a\nvector<int>To[MAXN + 1];\nint in[MAXN + 1];\nint val[MAXN + 1];\n\nint main() {\n#ifndef ONLINE_JUDGE\n\tfreopen(FI, \"r\", stdin);\n\tfreopen(FO, \"w\", stdout);\n#endif\n\tn = Re, m = Re;\n\treg int S = n * m + 1;\n\treg int T = n * m + 2;\n\tfor(reg int i = 1; i <= n; i++) {//\u8fd9\u4e00\u4e2a\u90e8\u5206\u5efa\u7684\u8fb9\u662f\u4e3a\u4e86\u8dd1\u62d3\u6251\u6392\u5e8f\u3002\n\t\tfor(reg int j = m; j >= 1; j--) {//\u4ecem\u5f00\u59cb\u662f\u4e3a\u4e86\u6309\u7167\u6bcf\u4e00\u884c\u5403\u690d\u7269\u7684\u987a\u5e8f\u3002\n\t\t\tif(j > 1) { //\u5982\u679c\u4e0d\u662f\u6700\u5f00\u5934\u7684\u70b9\uff0c\u5c31\u9700\u8981\u5148\u5403\u5b8c\u524d\u9762\u7684\u518d\u5403\u540e\u9762\u7684\u3002\n\t\t\t\tLink(id(i, j - 1), id(i, j), 0);\n\t\t\t\tin[id(i, j)]++;\n\t\t\t}\n\t\t\tval[id(i, j)] = Re;\n\t\t\treg int k = Re;\n\t\t\twhile(k--) {\n\t\t\t\treg int x = Re + 1, y = m - Re;//\u4e0a\u9762\u7684\u987a\u5e8f\u6539\u4e86\uff0c\u8fd9\u91cc\u4e5f\u8981\u6539\u4f4d\u7f6e\u3002\n\t\t\t\tLink(id(i, j), id(x, y), 0);\n\t\t\t\tin[id(x, y)]++;\n\t\t\t\tTo[id(i, j)].push_back(id(x, y));//\u5b58\u4e0b\u4fdd\u62a4\u7684\u70b9\u3002\n\t\t\t}\n\t\t}\n\t}\n\tfor(reg int i = 1; i <= n; i++)\n\t\tfor(reg int j = 1; j <= m; j++)\n\t\t\tif(!in[id(i, j)])\n\t\t\t\tq.push(id(i, j));//\u5982\u679c\u5165\u5ea6\u4e0d\u4e3a\u96f6\u5c31\u63d2\u5165\u3002\n\tcheck();\n\ttot = 1;\n\tmemset(fi, 0, sizeof(fi));//\u6e05\u7a7a\u90bb\u63a5\u94fe\u8868\n\tfor(reg int i = 1; i <= n; i++) {\n\t\treg int sum = Add;//\u4e00\u5f00\u59cb\u4ece\u6e90\u70b9S\u8fde\u51fa\u4e00\u6761\u975e\u5e38\u5927\u7684\u6b63\u6574\u6570\u7684\u8fb9\u3002\n\t\tLink(S, id(i, 1), sum);\n\t\tLink(id(i, 1), S, 0);\n\t\tfor(reg int j = 1; j <= m; j++) {\n\t\t\tif(OK[id(i, j)]) {//\u5982\u679c\u8fd9\u4e2a\u70b9\u5728\u73af\u4e0a\uff0c\u90a3\u4e48\u540e\u9762\u7684\u8fb9\u5c31\u53ef\u4ee5\u4e0d\u7528\u8fde\u4e86\uff0c\u53cd\u6b63\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\u3002\n\t\t\t\tLink(id(i, j), T, Inf);\n\t\t\t\tLink(T, id(i, j), 0);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsum -= val[id(i, j)];\n\t\t\treg int to = j == m ? T : id(i, j + 1);\n\t\t\tLink(id(i, j), to, sum);\n\t\t\tLink(to, id(i, j), 0);\n\t\t\treg int si = To[id(i, j)].size();\n\t\t\tfor(reg int k = 0; k < si; k++) {//\u8fde\u4fdd\u62a4\u70b9\u548c\u88ab\u4fdd\u62a4\u70b9\u3002\n\t\t\t\tLink(To[id(i, j)][k], id(i, j), Inf);\n\t\t\t\tLink(id(i, j), To[id(i, j)][k], 0);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\", Add * n - solve(S, T));//\u6700\u5c0f\u5272\u3002\n\treturn 0;\n}\n\ninline int read() {\n\treg int x = 0, t = 0, ch;\n\twhile(!isdigit(ch = ge)) t |= ch == '-';\n\twhile(isdigit(ch)) x = (x << 1) + (x << 3) + (ch ^ 48), ch = ge;\n\treturn t ? -x : x;\n}\n\ninline void Link(reg int u, reg int v, reg int w) {\n\ttot++;\n\tV[tot] = w;\n\tto[tot] = v;\n\tne[tot] = fi[u];\n\tfi[u] = tot;\n}\n\ninline void check() {\n\tOK.set();\n\twhile(!q.empty()) {\n\t\treg int x = q.front(); q.pop();\n\t\tOK[x] = 0;\n\t\tfor(reg int i = fi[x]; i; i = ne[i]) {\n\t\t\treg int u = to[i];\n\t\t\tin[u]--;\n\t\t\tif(!in[u]) q.push(u);\n\t\t}\n\t}\n}\n\ninline int solve(reg int S, reg int T) {\n\treg int res = 0;\n\twhile(BFS(S, T)) res += DFS(S, T, Inf);\n\treturn res;\n}\n\ninline int BFS(reg int S, reg int T) {\n\tmemset(Arrive, 0, sizeof(Arrive));\n\tmemcpy(la, fi, sizeof(la));\n\tq.push(S);\n\tArrive[S] = 1;\n\twhile(!q.empty()) {\n\t\treg int x = q.front(); q.pop();\n\t\tfor(reg int i = fi[x]; i; i = ne[i]) {\n\t\t\treg int u = to[i];\n\t\t\tif(!Arrive[u] && V[i]) {\n\t\t\t\tArrive[u] = Arrive[x] + 1;\n\t\t\t\tq.push(u);\n\t\t\t}\n\t\t}\n\t}\n\treturn Arrive[T];\n}\n\ninline int DFS(reg int x, reg int T, reg int Max) {\n\tif(x == T) return Max;\n\treg int sum = 0;\n\tfor(reg int &i = la[x]; i; i = ne[i]) {\n\t\treg int u = to[i];\n\t\tif(Arrive[u] == Arrive[x] + 1 && V[i]) {\n\t\t\treg int k = DFS(u, T, min(Max - sum, V[i]));\n\t\t\tV[i] -= k;\n\t\t\tV[i ^ 1] += k;\n\t\t\tsum += k;\n\t\t\tif(sum == Max) return sum;\n\t\t}\n\t}\n\treturn sum;\n}\n```",
        "postTime": 1547121207,
        "uid": 20782,
        "name": "CYJian",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2805 \u3010[NOI2009]\u690d\u7269\u5927\u6218\u50f5\u5c38\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7b2c\u4e00\u773c\u770b\u5230\u5c31\u8ba4\u4e3a\u662f\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002\n\n\u4e8e\u662f\u5efa\u56fe\uff0c\u4ece\u4e00\u4e2a\u690d\u7269\u5411\u4fdd\u62a4\u5b83\u7684\u690d\u7269\u8fde\u8fb9\u3002\n\n\u4e4b\u540e\u7528DINIC\u8dd1\u6700\u5927\u6d41\u6765\u6c42\u6700\u5c0f\u5272\u3002\n\n\u7136\u800c\u5199\u5b8c\u540e\u53d1\u73b0\u8fde\u6837\u4f8b\u90fd\u8fc7\u4e0d\u53bb\u3002\n\n\u539f\u56e0\u662f\uff1a**\u6709\u73af**\uff01**\u6709\u73af**\uff01**\u6709\u73af**\uff01\uff08\\_\u8fd9\u662f\u5751\\_\uff09\n\n\uff08\u60f3\u50cf\u4e00\u4e0b\u4e00\u4e2a\u65e0\u51b7\u5374\u7684\u98df\u4eba\u82b1\u524d\u653e\u4e00\u4e2a\u575a\u679c\uff09\n\n\u6240\u4ee5\u5148\u62d3\u6251\u6392\u5e8f\u6c42\u73af\uff0c\u628a\u73af\u5220\u6389\u3002\n\n\uff08\u8fd9\u9898\u597d\u50cf\u4e0d\u80fd\u7528tarjan\uff0c\u4e0d\u77e5\u4e3a\u4f55\u3002\uff09\n\n\u8fd8\u6709\u6700\u540e\u7684\u5751\u70b9\uff1a\u867d\u7136\u70b9\u53ea\u6709600\u4e2a\uff0c\u4f46\u8fb9\u8db3\u67098\\*(10^5)\u6761\u3002\u7528\u90bb\u63a5\u8868\u7684\u540c\u5fd7\u4eec\u8bb0\u5f97\u628a\u6570\u7ec4\u5f00\u591f\u3002\n\n\u8d34\u4e0a\u4ee3\u7801\uff1a\n\n\n\u3010code/c\u3011\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<cstdlib>\n#include<iomanip>\n#include<cassert>\n#include<climits>\n#include<functional>\n#include<bitset>\n#include<vector>\n#include<list>\n#define F(i,j,k) for(int i=j;i<=k;++i)\n#define M(a,b) memset(a,b,sizeof(a))\n#define FF(i,j,k) for(int i=j;i>=k;i--)\n#define inf 0x3f3f3f3f\n#define maxm 1001\n#define mod 998244353\n//#define LOCAL\nusing namespace std;\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nint n,m;\nint mp[2000];\nstruct EDGE\n{\n    int from;\n    int to;\n    int value;\n    int next;\n}e[800005];\nint head[4001];\nint v[4001],in[4001],out[4001];\nint tot=1;\ninline void addedge(int u,int v,int w)\n{\n    e[++tot].from=u;\n    e[tot].to=v;\n    e[tot].value=w;\n    e[tot].next=head[u];\n    head[u]=tot;\n}\nint ans=0;\ninline void add(int u,int v,int w)\n{\n    addedge(u,v,w);\n    addedge(v,u,0);\n    ++in[u];\n    return;\n}\nint map[4001];\nint S,T;\nbool ok()\n{  \n    F(i,S,T) if(map[i]!=-2) map[i]=-1;\n    int que[4001];  \n    int hd=0,tl=0;  \n    que[tl++]=S;  \n    map[S]=1;  \n    while (hd<tl){  \n        int u=que[hd++];  \n        for(int i=head[u];i;i=e[i].next)\n        {  \n            if(map[e[i].to]==-1&&e[i].value)\n            {  \n                map[e[i].to]=map[u]+1;  \n                que[tl++]=e[i].to;  \n            }  \n        }  \n    }  \n    return map[T]>0;\n}  \nint cur[4000];\nint zeng(int k,int now)\n{  \n    if (k==T) return now;  \n    int r=0;  \n    for (int i=cur[k];i&&now>r;i=e[i].next)\n    {  \n        if (map[k]+1==map[e[i].to]&&e[i].value)\n        {  \n            int t=zeng(e[i].to,min(now-r,e[i].value));  \n            e[i].value-=t;e[i^1].value+=t;r+=t;  \n            if(e[i].value) cur[k]=i;\n//            cout<<e[i].from<<\" ---> \"<<e[i].to<<\" $ \"<<t<<endl;\n        }  \n    }  \n    if (!r) map[k]=-1;  \n    return r;  \n}  \nint dinic()  \n{  \n    int r=0,t;  \n    M(cur,0);\n    while (ok()){\n        for(int i=S;i<=T;++i) cur[i]=head[i];\n        r+=zeng(S,inf);\n    }\n    return r;   \n}\nint main()\n{\n    std::ios::sync_with_stdio(false);//cout<<setiosflags(ios::fixed)<<setprecision(1)<<y;\n    #ifdef LOCAL\n    freopen(\"111.in\",\"r\",stdin);\n    freopen(\"data.out\",\"w\",stdout);\n    #endif\n    cin>>n>>m;\n    S=0;T=m*n+1;\n    M(mp,0);M(head,0);\n    F(i,1,n*m){\n        int temp;\n        cin>>mp[i];\n        if(mp[i]>0) add(S,i,mp[i]);\n        else add(i,T,-mp[i]);\n        cin>>temp;\n        while(temp--){\n            int x,y;\n            cin>>x>>y;\n            add(x*m+y+1,i,inf);\n        }\n        if(i%m) add(i,i+1,inf);\n    }\n    int q[4000];M(q,0);\n    int cur1=0,cur2=0;\n    for(int i=S;i<=T;++i){\n        if(!in[i]) q[cur2++]=i;\n        map[i]=-2;\n    } \n    int sum=0; \n    while(cur1<cur2){\n        int cnt=q[cur1++];map[cnt]=0;\n        if(mp[cnt]>0) sum+=mp[cnt];\n        for(int i=head[cnt];i;i=e[i].next)\n        {\n            if(i&1) if(!--in[e[i].to]) q[cur2++]=e[i].to;\n        }\n    }\n    cout<<sum-dinic()<<endl;\n    return 0;\n}\n```",
        "postTime": 1476201107,
        "uid": 11380,
        "name": "SBS\u82cf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2805 \u3010\u690d\u7269\u5927\u6218\u50f5\u5c38\u3011"
    },
    {
        "content": "\u9898\u76ee\u5730\u5740\uff1a[P2805 [NOI2009]\u690d\u7269\u5927\u6218\u50f5\u5c38](https://www.luogu.org/problemnew/show/P2805)\n\n### \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\n\n\u82e5\u6709\u5411\u56fe $G$ \u7684\u5b50\u56fe $V$ \u6ee1\u8db3\uff1a $V$ \u4e2d\u9876\u70b9\u7684\u6240\u6709\u51fa\u8fb9\u5747\u6307\u5411 $V$ \u5185\u90e8\u7684\u9876\u70b9\uff0c\u5219\u79f0 $V$ \u662f $G$ \u7684\u4e00\u4e2a**\u95ed\u5408\u5b50\u56fe**\u3002\n\n\u82e5 $G$ \u4e2d\u7684\u70b9\u6709\u70b9\u6743\uff0c\u5219**\u70b9\u6743\u548c\u6700\u5927**\u7684\u95ed\u5408\u5b50\u56fe\u79f0\u4e3a\u6709\u5411\u56fe $G$ \u7684**\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe**\u3002\n\n#### \u6784\u56fe\u65b9\u6cd5\n\n\u5efa\u7acb\u6e90\u70b9 $S$ \u548c\u6c47\u70b9 $T$ \uff0c\u6e90\u70b9 $S$ \u8fde\u6240\u6709\u70b9\u6743\u4e3a\u6b63\u7684\u70b9\uff0c\u5bb9\u91cf\u4e3a\u8be5\u70b9\u70b9\u6743\uff1b\u5176\u4f59\u70b9\u8fde\u6c47\u70b9 $T$ \uff0c\u5bb9\u91cf\u4e3a\u8be5\u70b9\u70b9\u6743\u7684\u76f8\u53cd\u6570\uff0c\u5bf9\u4e8e\u539f\u56fe\u4e2d\u7684\u8fb9 $(x,y)$ \uff0c\u8fde\u8fb9 $(x,y,+inf)$\u3002\n\n#### \u5b9a\u7406\n\n* \u6700\u5927\u6743\u95ed\u5408\u56fe\u7684\u70b9\u6743\u548c $=$ \u6240\u6709\u6b63\u6743\u70b9\u6743\u503c\u548c $\u2013$ \u6700\u5c0f\u5272\u3002\n* \u4e0a\u8ff0\u56fe\u7684\u6700\u5c0f\u5272\u5305\u542b $S$ \u5230**\u4e0d\u5728\u6700\u5927\u6743\u95ed\u5408\u56fe\u5185\u7684\u6b63\u6743\u8282\u70b9**\u7684\u8fb9\u548c**\u5728\u6700\u5927\u6743\u95ed\u5408\u56fe\u5185\u7684\u8d1f\u6743\u8282\u70b9**\u5230 $T$ \u7684\u8fb9\u3002\n\n#### \u63a8\u8bba\uff08\u6700\u5927\u6743\u95ed\u5408\u56fe\u65b9\u6848\uff09\n\n\u5728**\u6b8b\u91cf\u7f51\u7edc**\u4e2d\u7531\u6e90\u70b9 $S$ \u80fd\u591f\u8bbf\u95ee\u5230\u7684\u70b9\uff0c\u5c31\u6784\u6210\u4e00\u4e2a**\u70b9\u6570\u6700\u5c11**\u7684\u6700\u5927\u6743\u95ed\u5408\u56fe\u3002\n\n#### \u672c\u9898\u9898\u89e3\n\n\u628a\u6bcf\u4e2a\u690d\u7269\u5f53\u505a\u4e00\u4e2a\u9876\u70b9\uff0c\u690d\u7269\u643a\u5e26\u7684\u80fd\u6e90\u6570\u76ee\u4e3a\u9876\u70b9\u7684\u6743\u503c\u3002\n\n\u5982\u679c\u690d\u7269 $b$ \u5728\u690d\u7269 $a$ \u7684\u653b\u51fb\u8303\u56f4\u5185\uff0c\u8fde\u63a5\u4e00\u6761\u6709\u5411\u8fb9 $(a,b)$ \uff0c\u8868\u793a $a$ \u53ef\u4ee5\u4fdd\u62a4 $b$ \u3002\n\n\u7531\u4e8e\u50f5\u5c38\u4ece\u53f3\u5411\u5de6\u8fdb\u653b\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u4e2a\u690d\u7269\u90fd\u88ab\u5b83\u53f3\u8fb9\u76f8\u90bb\u7684\u690d\u7269\u4fdd\u62a4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u690d\u7269 $a$ \uff08\u9664\u6700\u5de6\u8fb9\u4e00\u5217\uff09\uff0c\u5411\u5176\u5de6\u8fb9\u7684\u76f8\u90bb\u690d\u7269 $b$ \uff0c\u8fde\u63a5\u4e00\u6761\u6709\u5411\u8fb9 $(a,b)$ \u3002\n\n**\u6b64\u65f6\u53ef\u80fd\u6709\u4e00\u4e9b\u690d\u7269\u662f\u4e92\u76f8\u4fdd\u62a4\u7684\uff0c\u90fd\u4e0d\u80fd\u88ab\u5403\u6389\uff0c\u8fd9\u6837\u7684\u70b9\uff08\u548c\u4e0e\u5176\u76f8\u8fde\u7684\u8fb9\uff09\u5e94\u8be5\u5168\u90e8\u5220\u6389\uff0c\u62d3\u6251\u6392\u5e8f\u4e00\u904d\u5373\u53ef\u3002**\n\n\u5982\u679c\u8981\u5403\u6389\u4e00\u4e2a\u690d\u7269\uff0c\u5c31\u5e94\u8be5\u628a\u6240\u6709\u4fdd\u62a4\u5b83\u7684\u690d\u7269\u5168\u90e8\u5403\u6389\u3002\n\n\u5bf9\u5e94\u5728\u56fe\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u5c06\u56fe**\u8f6c\u7f6e**\uff08\u5373\u6240\u6709\u8fb9\u8f6c\u6210\u5176\u53cd\u5411\u8fb9\uff09\uff0c\u90a3\u4e48\u53ef\u4ee5\u5403\u6389\u7684\u690d\u7269\u5e94\u8be5\u6784\u6210\u4e00\u4e2a\u95ed\u5408\u5b50\u56fe\uff0c\u800c\u6700\u4f18\u89e3\u5c31\u662f\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e4 + 6, M = 1e6 + 6, inf = 1e9;\nint n, m, s, t, a[N], ans, d[N], deg[N], v[N];\nint Head[N], Edge[M], Leng[M], Next[M], tot = 1;\nqueue<int> q;\nvector<int> e[N];\n\ninline void add(int x, int y, int z) {\n    Edge[++tot] = y;\n    Leng[tot] = z;\n    Next[tot] = Head[x];\n    Head[x] = tot;\n}\n\ninline bool bfs() {\n    memset(d, 0, sizeof(d));\n    queue<int> q;\n    q.push(s);\n    d[s] = 1;\n    while (q.size()) {\n        int x = q.front();\n        q.pop();\n        for (int i = Head[x]; i; i = Next[i]) {\n            int y = Edge[i], z = Leng[i];\n            if (deg[y] || d[y] || !z) continue;\n            q.push(y);\n            d[y] = d[x] + 1;\n            if (y == t) return 1;\n        }\n    }\n    return 0;\n}\n\nint dinic(int x, int flow) {\n    if (x == t) return flow;\n    int rest = flow;\n    for (int i = Head[x]; i && rest; i = Next[i]) {\n        int y = Edge[i], z = Leng[i];\n        if (d[y] != d[x] + 1 || !z) continue;\n        int k = dinic(y, min(rest, z));\n        if (!k) d[y] = 0;\n        else {\n            Leng[i] -= k;\n            Leng[i^1] += k;\n            rest -= k;\n        }\n    }\n    return flow - rest;\n}\n\nint main() {\n    cin >> n >> m;\n    s = n * m, t = s + 1;\n    for (int i = 0; i < s; i++) {\n        scanf(\"%d\", &a[i]);\n        int k;\n        scanf(\"%d\", &k);\n        while (k--) {\n            int x, y;\n            scanf(\"%d %d\", &x, &y);\n            e[i].push_back(x * m + y);\n            ++deg[x*m+y];\n        }\n    }\n    for (int i = 0; i < n; i++)\n        for (int j = 1; j < m; j++) {\n            e[i*m+j].push_back(i * m + j - 1);\n            ++deg[i*m+j-1];\n        }\n    for (int i = 0; i < s; i++)\n        if (!deg[i]) q.push(i), v[i] = 1;\n    while (q.size()) {\n        int x = q.front();\n        q.pop();\n        for (unsigned int i = 0; i < e[x].size(); i++) {\n            int y = e[x][i];\n            if (!v[y] && !--deg[y]) q.push(y), v[y] = 1;\n        }\n    }\n    for (int x = 0; x < s; x++) {\n    \tif (!v[x]) continue;\n        for (unsigned int i = 0; i < e[x].size(); i++) {\n            int y = e[x][i];\n            if (!v[y]) continue;\n            add(y, x, inf);\n            add(x, y, 0);\n        }\n        if (a[x] > 0) add(s, x, a[x]), add(x, s, 0), ans += a[x];\n        if (a[x] < 0) add(x, t, -a[x]), add(t, x, 0);\n\t}\n    int now = 0;\n    while (bfs())\n        while ((now = dinic(s, inf)))\n            ans -= now;\n    cout << ans << endl;\n    return 0;\n}\n```",
        "postTime": 1552406036,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "P2805 [NOI2009]\u690d\u7269\u5927\u6218\u50f5\u5c38"
    },
    {
        "content": "\u60f3\u5230\u4e86\u4e00\u79cd\u4e0d\u4f7f\u7528\u666e\u901a\u7684\u6c42\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u65b9\u6cd5\uff0c\u8c8c\u4f3c\u4e5f\u53ef\u4ee5\u63a8\u5e7f\u5230\u6c42\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u4e0a\uff0c~~\u4e0d\u8fc7\u5c31\u662f\u5efa\u6a21\u66f4\u590d\u6742\u8ba1\u7b97\u66f4\u9ebb\u70e6\u7136\u540e\u4e5f\u6ca1\u6709\u4ec0\u4e48\u4f18\u52bf\u7f62\u4e86\u3002~~\n\n> \u672c\u9898\u7684\u76ee\u6807\u4e3a\uff0c\u5236\u5b9a\u4e00\u5957 Zombies \u7684\u8fdb\u653b\u65b9\u6848\uff0c\u9009\u62e9\u8fdb\u653b\u54ea\u4e9b\u690d\u7269\u4ee5\u53ca\u8fdb\u653b\u7684\u987a\u5e8f\uff0c\u4ece\u800c\u83b7\u5f97\u6700\u5927\u7684\u80fd\u6e90\u6536\u5165\u3002\n\n\u8003\u8651\u6784\u5efa\u6700\u5c0f\u5272\u6a21\u578b\uff0c\u5c06\u6240\u6709\u6b63\u6570\u548c\u8d1f\u6570\u5206\u5f00\u8003\u8651\uff0c\u5982\u679c\u4e00\u4e2a\u6b63\u6570\u4e0d\u9009\u5c31\u4f1a\u9020\u6210\u635f\u5931\uff0c\u5982\u679c\u9009\u4e00\u4e2a\u8d1f\u6570\u5c31\u4f1a\u9020\u6210\u5176\u7edd\u5bf9\u503c\u7684\u635f\u5931\uff0c\u8fd9\u6837\u6c42\u6700\u5c0f\u635f\u5931\uff0c\u518d\u7528\u6240\u6709\u6b63\u6570\u4e4b\u548c\u51cf\u53bb\u6700\u5c0f\u635f\u5931\u5c31\u662f\u6700\u5927\u6536\u5165\u4e86\u3002\n\n~~\u63a5\u4e0b\u6765\u5c31\u662f\u6211\u7684\u5947\u602a\u5efa\u6a21\u4e86~~\n\n\u56e0\u4e3a\u53d1\u73b0\uff0c\u5982\u679c\u8981\u51fb\u6e83\u4e00\u4e2a\u4f4d\u7f6e\u7684 Plant\uff0c\u90a3\u4e48\u5728\u5b83\u53f3\u9762\u7684\u6240\u6709 Plant \u90fd\u8981\u88ab\u51fb\u6e83\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6bcf\u4e00\u884c\u4e0a\u88ab\u51fb\u6e83\u4e86\u7684 Plant \u7684\u533a\u95f4\u5de6\u7aef\u70b9\u3002\u90a3\u4e48\u8fd9\u4e00\u884c\u7684\u635f\u5931\uff0c\u5c31\u662f\u8fd9\u4e2a\u5de6\u7aef\u70b9\u5411\u53f3\uff08\u5305\u62ec\u5de6\u7aef\u70b9\uff09\u7684\u6240\u6709\u8d1f\u6570\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\u52a0\u4e0a\u5de6\u7aef\u70b9\u5411\u5de6\uff08\u4e0d\u5305\u62ec\u5de6\u7aef\u70b9\uff09\u7684\u6240\u6709\u6b63\u6570\u4e4b\u548c\u3002\n\n\u53d1\u73b0\u8fd9\u4e2a\u6743\u503c\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u5229\u7528\u524d\u7f00\u548c\u548c\u540e\u7f00\u548c\u5904\u7406\u51fa\u6765\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u6784\u5efa\u8fd9\u6837\u4e00\u4e2a\u6a21\u578b\uff1a\n\n\u8bbe $r_{i,j}$ \u4e3a\u4ece $(i,j)$ \u5f00\u59cb\u5411\u53f3\u7684\u6240\u6709\u8d1f\u6570\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\uff0c$l_{i,j}$ \u4e3a\u4ece $(i,j)$ \u5f00\u59cb\u5411\u5de6\u7684\u6b63\u6570\u4e4b\u548c\uff0c\u5219\u53ef\u4ee5\u8fde\u8fb9\uff1a\n\n$$\n(i,j)\\xrightarrow{\\normalsize r_{i,j}+l_{i,j-1}}(i,j-1)\n$$\n\n$$\nS\\xrightarrow{\\normalsize l_{i,m}}(i,m)\n$$\n\n$$\n(i,1)\\xrightarrow{\\normalsize r_{i,1}}T\n$$\n\n\u7136\u540e\u8003\u8651\u5982\u4f55\u89e3\u51b3 Plant \u653b\u51fb\u7684\u95ee\u9898\u3002\n\nPlant \u653b\u51fb\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff1f\u5b9e\u9645\u4e0a\u5c31\u662f\u5982\u679c $(i,j)$ \u4fdd\u62a4 $(x,y)$\uff0c\u90a3\u4e48\u5982\u679c $(i,j)$ \u8fd9\u4e2a\u690d\u7269\u4e0d\u88ab\u51fb\u6e83\uff0c$(x,y)$ \u53ca\u5411\u5de6\u7684\u6240\u6709\u690d\u7269\u5c31\u4e5f\u90fd\u4e0d\u80fd\u88ab\u51fb\u6e83\u3002\n\n\u653e\u5230\u6211\u4eec\u7684\u6700\u5c0f\u5272\u6a21\u578b\u4e0a\u5462\uff1f\u6211\u4eec\u5c06 $(x,y)$ \u5411 $(i,j)$ \u8fde\u4e00\u6761\u8fb9\uff0c\u5176\u5b9e\u5c31\u662f\uff1a\u5982\u679c $(x,y)$ \u5411\u53f3\u7684\u8fb9 $A$ \u88ab\u5272\uff0c\u90a3\u4e48 $(i,j)$ \u5411\u5de6\u7684\u8fb9 $D$ \u5c31\u6ca1\u5fc5\u8981\u5272\uff1b\u53cd\u4e4b\uff0c\u5982\u679c $(x,y)$ \u5411\u5de6\u8fb9\u7684\u8fb9 $B$ \u88ab\u5272\uff0c\u90a3\u4e48 $(i,j)$ \u5411\u5de6\u7684\u8fb9 $D$ \u5c31\u4e5f\u5fc5\u987b\u5272\u6389\u3002\n\n![](https://s2.loli.net/2022/02/12/zIZogRhFsPk8yjS.png)\n\n\uff08\u82e5\u8fd8\u4e0d\u660e\u767d\uff0c\u53ef\u4ee5\u8f6c\u5411 [[HNOI2013]\u5207\u7cd5](https://www.luogu.com.cn/problem/P3227)\uff0c\u8fd9\u9053\u9898\u9898\u7684\u8ddd\u79bb\u9650\u5236\u4e0e\u672c\u9898\u7684 Plant \u653b\u51fb\u6bd4\u8f83\u76f8\u4f3c\u3002\uff09\n\n\u8fd9\u6837\uff0c\u5c31\u5b9e\u73b0\u4e86 Plant \u653b\u51fb\u7684\u9650\u5236\u3002\n\n\u53ef\u662f\u8fd9\u6837\u8fde\u6837\u4f8b\u90fd\u8fc7\u4e0d\u4e86\u3002\u4e3a\u4ec0\u4e48\uff1f\n\n\u6837\u4f8b\u4e2d\uff0c$(3,1)$ \u80fd\u653b\u51fb\u5230 $(3,2)$\uff0c\u8fd9\u5bfc\u81f4\u7b2c\u4e09\u884c\u7684 Plant \u4e0d\u53ef\u80fd\u88ab\u653b\u51fb\u5230\uff0c\u4f46\u662f\u5982\u679c\u7528\u4e0a\u56fe\u7684\u9650\u5236\u65b9\u5f0f\uff0c\u90a3\u4e48\u4ed6\u53ea\u9700\u8981\u5c06 $(3,1)\\rightarrow T$ \u7684\u8fb9\u5272\u6389\u5c31\u597d\u4e86\uff0c\u800c\u8fd9\u663e\u7136\u662f\u4e0d\u5408\u6cd5\u7684\u3002~~\u4f60\u4e0d\u80fd\u5148\u8df3\u8fc7\u53bb\u628a\u690d\u7269\u9ca8\u4e86\u7136\u540e\u518d\u8df3\u56de\u6765\u561b~~\n\n~~\u7136\u540e\u6211\u5c31\u50bb\u4e4e\u4e4e\u7684\u53bb\u7279\u5224\u4e86\u4e0b\u8fd9\u79cd\u60c5\u51b5\uff0c\u7136\u540e\u62ff\u5230\u4e86 90 \u5206\u7684\u597d\u6210\u7ee9~~\n\n\u8fd9\u79cd\u60c5\u51b5\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff1f\u5b9e\u9645\u4e0a\u662f**\u51fa\u73b0\u4e86\u4e00\u4e2a\u73af**\u3002\u9664\u4e86\u6837\u4f8b\u4e2d\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd8\u53ef\u80fd\u6709\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\n\n![](https://s2.loli.net/2022/02/12/uHXEdUfnyOL4Akc.png)\n\n\uff08\u8fd9\u91cc\u7bad\u5934\u662f\u6307 Plant \u80fd\u653b\u51fb\u5230\u7684\u4f4d\u7f6e\uff09\n\n\u90a3\u4e48\u8fd9\u663e\u7136\u5c31\u662f\u4e00\u4e2a\u73af\u4e86\u3002\u5982\u679c\u51fa\u73b0\u4e86\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u5c31\u5c06\u73af\u4e2d\u6240\u6709\u7684\u70b9\u90fd\u5411 $T$ \u8fde\u4e00\u6761 $\\infty$ \u7684\u8fb9\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5b83\u4e0d\u88ab\u5272\u6389\u4e86\u3002\n\n\u5224\u73af\u6211\u4f7f\u7528\u7684\u662f Tarjan\uff0c\u4e8e\u662f\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 1209, MAXM = 1000005;\nconst int inf = INT_MAX / 2;\nstruct Graph { // \u7f51\u7edc\u6d41\u677f\u5b50\n    int fst[MAXN], to[MAXM], f[MAXM], now[MAXN], d[MAXN], nxt[MAXM], tot;\n    Graph() : tot(1) {}\n    void add(int u, int v, int w) {\n        to[++tot] = v, nxt[tot] = fst[u], f[tot] = w, fst[u] = tot;\n        to[++tot] = u, nxt[tot] = fst[v], f[tot] = 0, fst[v] = tot;\n    }\n    int s, t;\n    bool bfs() {\n        memset(d, 0, sizeof d);\n        queue<int> q; q.push(s); d[s] = 1, now[s] = fst[s];\n        while (!q.empty()) {\n            int u = q.front(); q.pop();\n            for (int i = fst[u], v = to[i]; i; i = nxt[i], v = to[i]) {\n                if (f[i] && !d[v]) {\n                    q.push(v);\n                    d[v] = d[u] + 1;\n                    now[v] = fst[v];\n                    if (v == t) return true;\n                }\n            }\n        }\n        return false;\n    }\n    int dinic(int u, int flow) {\n        if (u == t) return flow;\n        int rest = flow;\n        for (int &i = now[u], v = to[i]; i; i = nxt[i], v = to[i]) {\n            if (f[i] && d[v] == d[u] + 1) {\n                int k = dinic(v, min(f[i], rest));\n                if (!k) d[v] = 0;\n                f[i] -= k;\n                f[i ^ 1] += k;\n                rest -= k;\n            }\n            if (!rest) break;\n        }\n        return flow - rest;\n    }\n    int solve() {\n        int flow, maxflow = 0;\n        while (bfs())\n            while (flow = dinic(s, inf)) maxflow += flow;\n        return maxflow;\n    }\n}g;\nint n, m;\nint s[55][55], a[55][55][55];\nint l[55][55], r[55][55], sum;\nint ids(int x, int y) { // \u70b9 ID\n    return (x - 1) * m + y;\n}\nint ide(int x, int y) { // \u70b9\u7684\u5de6\u8fb9\u4e00\u4e2a\u70b9\u7684 ID\n    if (y == 1) return g.t;\n    return ids(x, y - 1);\n}\nstruct Graph2 {\n    int fst[MAXN], nxt[MAXM], to[MAXM], tot;\n    int degree[MAXN];\n    void add(int u, int v) {\n        to[++tot] = v;\n        nxt[tot] = fst[u];\n        fst[u] = tot;\n        degree[v]++;\n    }\n    int dfn[MAXN], low[MAXN], dcnt;\n    bool inStack[MAXN], vis[MAXN];\n    stack<int> st;\n    void tarjan(int u) {\n        vis[u] = 1;\n        dfn[u] = low[u] = ++dcnt;\n        inStack[u] = 1;\n        st.push(u);\n        for (int i = fst[u], v = to[i]; i; i = nxt[i], v = to[i]) {\n            if (!dfn[v]) {\n                tarjan(v);\n                low[u] = min(low[u], low[v]);\n            } else if (inStack[v]) {\n                low[u] = min(low[u], dfn[v]);\n            }\n        }\n        if (dfn[u] == low[u]) {\n            int cnt = 0;\n            vector<int> pts;\n            while (1) {\n                int t = st.top(); st.pop();\n                inStack[t] = 0;\n                cnt++;\n                pts.push_back(t);\n                if (t == u) break;\n            }\n            if (cnt > 1) {\n                for (int t : pts) \n                    g.add(t, g.t, inf);\n            }\n        }\n    }\n}g2;\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    g.s = 2 * n * m + 1, g.t = 2 * n * m + 2;\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            int w;\n            scanf(\"%d%d\", &s[i][j], &w);\n            if (s[i][j] > 0) sum += s[i][j], l[i][j] = s[i][j];\n            else r[i][j] = -s[i][j];\n            while (w--) {\n                int x, y; scanf(\"%d%d\", &x, &y); x++, y++;\n                g2.add(ids(i, j), ids(x, y));\n                a[i][j][x] = max(a[i][j][x], y);\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= m; j++)\n            l[i][j] += l[i][j - 1];\n    for (int i = 1; i <= n; i++)\n        for (int j = m; j >= 1; j--)\n            r[i][j] += r[i][j + 1];\n    for (int i = 1; i <= n; i++)\n        g.add(g.s, ids(i, m), l[i][m]);\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= m; j++)\n            g.add(ids(i, j), ide(i, j), r[i][j] + l[i][j - 1]);\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= m; j++)\n            for (int k = 1; k <= n; k++) {\n                int p = a[i][j][k];\n                if (p) {\n                    g.add(ids(k, p), ids(i, j), inf);\n                }\n            }\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j < m; j++) g2.add(ids(i, j + 1), ids(i, j));\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= m; j++)\n            if (!g2.vis[ids(i, j)]) g2.tarjan(ids(i, j));\n    printf(\"%d\\n\", sum - g.solve());\n    return 0;\n}\n```",
        "postTime": 1644637875,
        "uid": 279652,
        "name": "APJifengc",
        "ccfLevel": 9,
        "title": "\u300c\u89e3\u9898\u62a5\u544a\u300d[NOI2009] \u690d\u7269\u5927\u6218\u50f5\u5c38"
    },
    {
        "content": "\u5ba3\u4f20\u535a\u5ba2 $\\to$ [link](https://blog.csdn.net/BWzhuzehao/article/details/117524734)\n\n\u8fd9\u9053\u9898\u662f\u4e00\u9053\u597d\u9898\u76ee\uff0c\u8003\u5bdf\u4e86\u5efa\u6a21\u80fd\u529b\u3002\n\n~~\u4f46\u662f\u56e0\u4e3a\u6570\u636e\u8fc7\u6c34\u5bfc\u81f4\u5efa\u6a21\u5efa\u9519\u90fd\u80fd\u6709 80 \u5206~~\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e00\u4e2a\u6982\u5ff5\uff1a\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002\n\n---------\n\n\u4ec0\u4e48\u662f\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff1f\n\n\u5bf9\u4e8e\u4e00\u5f20\u6709\u5411\u56fe $G=<V,E>$\uff0c\u6211\u4eec\u4ece\u4e2d\u9009\u51fa\u4e00\u4e9b\u70b9\uff0c\u5982\u679c\u8fd9\u4e9b\u70b9\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u5c31\u79f0\u8fd9\u4e9b\u70b9\u7ec4\u6210\u7684\u56fe\u4e3a\u95ed\u5408\u5b50\u56fe\uff1a\n\n- \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u88ab\u9009\u51fa\u6765\u7684\u70b9\uff0c\u5176\u5728\u56fe $G$ \u4e2d\u80fd\u591f\u5230\u8fbe\u7684\u70b9\u90fd\u5df2\u7ecf\u88ab\u9009\u51fa\u6765\u4e86\u3002\n\n\u6bd4\u5982\u8bf4\u4e0b\u9762\u8fd9\u5f20\u56fe\uff0c$(a,b,c,d),(b,c,d)$ \u662f\u95ed\u5408\u5b50\u56fe\uff0c\u4f46\u662f $(a,c,d)$ \u4e0d\u662f\uff0c\u56e0\u4e3a $a$ \u80fd\u5230 $b$\uff0c\u4f46\u662f $b$ \u5e76\u6ca1\u6709\u88ab\u9009\u51fa\u6765\u3002\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210603153930601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JXemh1emVoYW8=,size_16,color_FFFFFF,t_70)\n\n\u90a3\u4e48\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff0c\u5c31\u662f\u6240\u6709\u95ed\u5408\u5b50\u56fe\u4e2d\u70b9\u6743\u6700\u5927\u7684\u95ed\u5408\u5b50\u56fe\u3002\n\n---------\n\n\u6240\u4ee5\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u8981\u600e\u4e48\u6c42\u5462\uff1f\u91c7\u7528\u6700\u5c0f\u5272\u6a21\u578b\u3002\n\n\u8bbe\u70b9 $i$ \u7684\u6743\u503c\u4e3a $val_i$\uff0c$s,t$ \u662f\u8d85\u6e90\u8d85\u6c47\u3002\n\n- \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9 $u$\uff1a\n\t- \u5982\u679c $val_u>0$\uff0c\u90a3\u4e48 $s$ \u5411 $u$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $val_u$ \u7684\u8fb9\u3002\n\t- \u5982\u679c $val_u<0$\uff0c\u90a3\u4e48 $u$ \u5411 $t$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $-val_u$ \u7684\u8fb9\u3002\n\t- \u5982\u679c $val_u=0$\uff0c\u4e0a\u8ff0\u4e24\u79cd\u8fde\u8fb9\u65b9\u5f0f\u968f\u610f\u9009\u62e9\u4e00\u79cd\u5373\u53ef\u3002\n- \u5bf9\u4e8e\u539f\u56fe\u4e2d\u5b58\u5728\u7684\u6bcf\u6761\u8fb9 $u \\to v$\uff0c\u4ece $u$ \u5411 $v$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $INF$ \u7684\u8fb9\u3002\n\n\u5728\u8be5\u56fe\u4e0a\u8dd1\u6700\u5c0f\u5272\u5373\u53ef\u3002\n\n\u8be5\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u8bc1\u660e\u53ef\u4ee5\u53c2\u89c1\u6d1b\u8c37\u7528\u6237 @[longlongzhu123](https://www.luogu.com.cn/user/57525) \u7684[\u9898\u89e3](https://www.luogu.com.cn/blog/longlongzhu123/solution-p2805)\uff0c\u8fd9\u7bc7\u9898\u89e3\u7ed9\u51fa\u4e86\u8be6\u7ec6\u7684\u8bc1\u660e\u8fc7\u7a0b\u3002\n\n\u90a3\u4e48\u6700\u540e\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u70b9\u6743\u548c\u5c31\u662f\u6240\u6709 $val_i>0$ \u7684\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u3002\n\n---------\n\n\u90a3\u4e48\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u8ddf\u8fd9\u9053\u9898\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\n\n- \u89c4\u5b9a $(i,j)$ \u8868\u793a\u7b2c $i$ \u884c\u7b2c $j$ \u5217\u7684\u690d\u7269\u3002\n\n\u5206\u6790\u9898\u610f\u53ef\u4ee5\u53d1\u73b0\uff0c\u8981\u5403\u6389\u4e00\u682a\u690d\u7269\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u682a\u690d\u7269\u53f3\u8fb9\u7684\u6240\u6709\u690d\u7269\u90fd\u88ab\u5403\u6389\u5e76\u4e14\u4fdd\u62a4\u5b83\u7684\u690d\u7269\u4e5f\u88ab\u5403\u6389\u624d\u884c\u3002\n\n\u800c\u6211\u4eec\u9700\u8981\u4ece\u4e2d\u9009\u51fa\u70b9\u6743\u548c\u6700\u5927\u7684\u690d\u7269\u4eec\u5403\u6389\uff0c\u8fd9\u521a\u597d\u4e0e\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u543b\u5408\u3002\n\n\u56e0\u6b64\u6211\u4eec\u7684\u5efa\u6a21\u65b9\u5f0f\u51fa\u6765\u4e86\uff1a\n\n- \u5bf9\u4e8e $(u,v)$\uff0c\u5411 $(u,v+1)$ \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a $INF$\uff0c\u5176\u4e2d $1 \\leq u \\leq n,1 \\leq v < m$\u3002\n- \u5982\u679c $(u,v)$ \u4fdd\u62a4\u7740 $(x,y)$\uff0c\u90a3\u4e48 $(x,y)$ \u5411 $(u,v)$ \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a $INF$\u3002\n- \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9 $(u,v)$\uff0c\u6309\u7167\u5176\u70b9\u6743\u7684\u6b63\u8d1f\uff0c\u4ece\u8d85\u6e90\u8fde\u8fb9/\u5411\u8d85\u6c47\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a $|val_{(u,v)}|$\u3002\n\n\u4e3a\u4ec0\u4e48\u662f $(u,v) \\to (u,v+1)$ \u800c\u4e0d\u662f $(u,v+1) \\to (u,v)$\uff1f\u56e0\u4e3a\u5982\u679c\u8981\u5230 $(u,v)$ \u5c31\u5fc5\u987b\u5230 $(u,v+1)$\u3002\n\n\u5728\u5efa\u56fe\u5b8c\u6bd5\u540e\uff0c\u6c42\u51fa\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u5373\u53ef\u3002\n\n---------\n\n\u4f46\u662f\u5982\u679c\u4f60\u770b\u5230\u8fd9\u91cc\u5c31\u5df2\u7ecf\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\uff0c\u90a3\u4e48\u4f60\u4f1a\u53d1\u73b0\u4f60\u8fde\u6837\u4f8b\u90fd\u8fc7\u4e0d\u53bb\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e24\u4e2a\u690d\u7269\u4e92\u76f8\u4fdd\u62a4\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u690d\u7269\u662f\u9700\u8981\u8e22\u51fa\u6211\u4eec\u5efa\u7684\u56fe\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6839\u672c\u4e0d\u53ef\u80fd\u5403\u6389\u8fd9\u4e24\u4e2a\u690d\u7269\u3002\n\n\u540c\u7406\uff0c\u6210\u73af\u7684\u690d\u7269\u6211\u4eec\u5403\u4e0d\u6389\uff0c\u88ab\u73af\u4e0a\u7684\u70b9\u4fdd\u62a4\u6211\u4eec\u4e5f\u5403\u4e0d\u6389\u3002\n\n~~\u6bd4\u5982\u51e0\u4e2a\u65e0 CD \u7389\u7c73\u52a0\u519c\u70ae\u4e92\u76f8\u5bf9\u51c6\u5bf9\u65b9\u4e0d\u65ad\u5f00\u70ae~~\n\n\u56e0\u6b64\u6211\u4eec\u9996\u5148\u9700\u8981\u4e00\u904d\u62d3\u6251\u6392\u5e8f\u53bb\u9664\u8fd9\u4e9b\u70b9\u3002\n\n---------\n\nCode\uff1a\n\n```cpp\n/*\n========= Plozia =========\n    Author:Plozia\n    Problem:P2805 [NOI2009] \u690d\u7269\u5927\u6218\u50f5\u5c38\n    Date:2021/6/1\n========= Plozia =========\n*/\n\n#include <bits/stdc++.h>\nusing std::queue;\n\ntypedef long long LL;\nconst int MAXM = 1000000 + 10, MAXN = 10000 + 10, INF = 0x7f7f7f7f;\nint n, m, val[MAXN], cnt_Edge = 1, Head[MAXN], cnt_tp = 1, tp_Head[MAXN], cnt[MAXN], s, t, cur[MAXN];\nint dep[MAXN], gap[MAXN];\nstruct node { int to, val, Next; } tp[MAXM], Edge[MAXM];\nbool book[MAXN];\n//\u8d85\u6e90\uff1an * m + 1, \u8d85\u6c47\uff1an * m + 2\n\nint Read()\n{\n    int sum = 0, fh = 1; char ch = getchar();\n    for (; ch < '0' || ch > '9'; ch = getchar()) fh -= (ch == '-') << 1;\n    for (; ch >= '0' && ch <= '9'; ch = getchar()) sum = (sum << 3) + (sum << 1) + (ch ^ 48);\n    return sum * fh;\n}\nint Max(int fir, int sec) { return (fir > sec) ? fir : sec; }\nint Min(int fir, int sec) { return (fir < sec) ? fir : sec; }\nvoid add_Edge(int x, int y, int z) { ++cnt_Edge; Edge[cnt_Edge] = (node){y, z, Head[x]}; Head[x] = cnt_Edge; }\nvoid tp_add(int x, int y, int z) { ++cnt_tp; tp[cnt_tp] = (node){y, z, tp_Head[x]}; tp_Head[x] = cnt_tp; }\nint Change(int x, int y) { return (x - 1) * m + y; }\n\nvoid Top_sort()\n{\n    queue <int> q;\n    for (int i = 1; i <= n * m; ++i)\n        if (cnt[i] == 0) { q.push(i); book[i] = 1; }\n    while (!q.empty())\n    {\n        int x = q.front(); q.pop();\n        for (int i = tp_Head[x]; i; i = tp[i].Next)\n        {\n            int u = tp[i].to; --cnt[u];\n            if (cnt[u] == 0) { q.push(u); book[u] = 1; }\n        }\n    }\n}\n\nvoid bfs()\n{\n    queue <int> q;\n    memset(dep, -1, sizeof(dep));\n    q.push(t); dep[t] = 0; ++gap[0];\n    while (!q.empty())\n    {\n        int x = q.front(); q.pop();\n        for (int i = Head[x]; i; i = Edge[i].Next)\n        {\n            int u = Edge[i].to;\n            if (dep[u] != -1) continue ;\n            dep[u] = dep[x] + 1; ++gap[dep[u]]; q.push(u);\n        }\n    }\n}\n\nint dfs(int now, int Flow)\n{\n    if (now == t) return Flow;\n    int used = 0;\n    for (int i = cur[now]; i; i = Edge[i].Next)\n    {\n        cur[now] = i; int u = Edge[i].to;\n        if (Edge[i].val && dep[now] == dep[u] + 1)\n        {\n            int Minn = dfs(u, Min(Flow - used, Edge[i].val));\n            if (Minn)\n            {\n                Edge[i].val -= Minn; Edge[i ^ 1].val += Minn; used += Minn;\n                if (used == Flow) return used;\n            }\n        }\n    }\n    --gap[dep[now]];\n    if (gap[dep[now]] == 0) dep[s] = n * m + 3;\n    ++dep[now]; ++gap[dep[now]];\n    return used;\n}\n\nint ISAP()\n{\n    int ans = 0; bfs();\n    while (dep[s] < n * m + 2) { for (int i = 1; i <= n * m + 5; ++i) cur[i] = Head[i]; ans += dfs(s, INF); }\n    return ans;\n}\n\nint main()\n{\n    n = Read(), m = Read(); s = n * m + 1, t = n * m + 2;\n    int sum = 0;\n    for (int i = 1; i <= n * m; ++i)\n    {\n        val[i] = Read();\n        int w = Read();\n        while (w--)\n        {\n            int x = Read() + 1, y = Read() + 1;\n            tp_add(i, Change(x, y), 0); ++cnt[Change(x, y)];\n        }\n    }\n    for (int i = 1; i <= n; ++i)\n        for (int j = m; j > 1; --j)\n            { tp_add(Change(i, j), Change(i, j - 1), 0); ++cnt[Change(i, j - 1)]; }\n    Top_sort();\n    for (int i = 1; i <= n * m; ++i)\n    {\n        if (val[i] > 0 && book[i]) { add_Edge(s, i, val[i]); add_Edge(i, s, 0); }\n        else if (book[i]) { add_Edge(i, t, -val[i]); add_Edge(t, i, 0); }\n    }\n    for (int i = 1; i <= n * m; ++i)\n        if (book[i] && val[i] > 0) sum += val[i];\n    for (int i = 1; i <= n * m; ++i)\n    {\n        if (book[i] == 0) continue ;\n        for (int j = tp_Head[i]; j; j = tp[j].Next)\n        {\n            int u = tp[j].to;\n            if (book[u] == 0) continue ;\n            add_Edge(u, i, INF); add_Edge(i, u, 0);\n        }\n    }\n    printf(\"%d\\n\", sum - ISAP());\n    return 0;\n}\n```",
        "postTime": 1622707055,
        "uid": 134000,
        "name": "Plozia",
        "ccfLevel": 7,
        "title": "P2805 [NOI2009] \u690d\u7269\u5927\u6218\u50f5\u5c38 \u9898\u89e3"
    },
    {
        "content": "\u7ed9\u5b9a\u4e00\u4e2a $n$ \u884c $m$ \u5217\u7684\u56fe\uff0c\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u4fdd\u62a4\u4e00\u4e9b\u70b9\u3002\n\n\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c\uff08\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff09\u3002\n\n\u5982\u679c\u8981\u9009\u53d6\u4e00\u4e2a\u70b9\u5219\u5fc5\u987b\u9009\u53d6\u4fdd\u62a4\u5b83\u7684\u70b9\u4ee5\u53ca\u5b83\u53f3\u8fb9\u7684\u70b9\u3002\n\n\u8bd5\u6c42\u6700\u5927\u6743\u503c\u548c\uff08\u53ef\u4ee5\u4e00\u4e2a\u70b9\u4e5f\u4e0d\u9009\uff09\u3002\n\n$1 \\leq n \\leq 20,1\\leq m\\leq 30$\uff0c\u65f6\u9650 $1\\text{s}$\uff0c\u7a7a\u9650 $125\\text{MB}$\u3002\n\n#### sol\n\n\u5bb9\u6613\u53d1\u73b0\u8fd9\u5176\u5b9e\u662f\u4e00\u9053\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u9898\u3002\n\n\u4f46\u662f\u9700\u8981\u6ce8\u610f\uff1a\u56fe\u53ef\u80fd\u6709\u73af\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u4f60\u9047\u5230\u4e00\u4e9b\u690d\u7269\u76f8\u4e92\u4fdd\u62a4\u7684\u8bdd\uff0c\u662f\u65e0\u89e3\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u62d3\u6251\u6392\u5e8f\u6765\u627e\u51fa\u6240\u6709\u7684\u73af\uff0c\u5728\u62d3\u6251\u6392\u5e8f\u8fc7\u7a0b\u4e2d\u8bbf\u95ee\u5230\u7684\u70b9\u624d\u6709\u5b9e\u9645\u610f\u4e49\u3002\n\n\u6700\u540e\u8dd1\u4e00\u904d\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ninline int read()\n{\n\tint x = 0, f = 1;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9')\n\t{\n\t\tif (c == '-')\n\t\t\tf = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9')\n\t{\n\t\tx = x * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline void write(int x)\n{\n\tif (x < 0)\n\t{\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif (x > 9)\n\t\twrite(x / 10);\n\tputchar(x % 10 + '0');\n}\n\ntypedef int tp;\n\nconst int _ = 5e5 + 10;\n\nint n, m, s, t, lv[_], cur[_];\n\nint tot = 1, head[_], to[_ << 1], nxt[_ << 1];\n\ntp w[_ << 1];\n\ninline void add(int u, int v, tp dis)\n{\n\tto[++tot] = v;\n\tnxt[tot] = head[u];\n\tw[tot] = dis;\n\thead[u] = tot;\n}\n\ninline void Add(int u, int v, tp dis)\n{\n\tadd(u, v, dis);\n\tadd(v, u, 0);\n}\n\ninline bool bfs()\n{\n\tmemset(lv, -1, sizeof(lv));\n\tlv[s] = 0;\n\tmemcpy(cur, head, sizeof(head));\n\tqueue<int> q;\n\tq.push(s);\n\twhile (!q.empty())\n\t{\n\t\tint p = q.front();\n\t\tq.pop();\n\t\tfor (int eg = head[p]; eg; eg = nxt[eg])\n\t\t{\n\t\t\tint v = to[eg];\n\t\t\ttp vol = w[eg];\n\t\t\tif (vol > 0 && lv[v] == -1)\n\t\t\t\tlv[v] = lv[p] + 1, q.push(v);\n\t\t}\n\t}\n\treturn lv[t] != -1;\n}\n\ntp dfs(int p = s, tp flow = 2e9)\n{\n\tif (p == t)\n\t\treturn flow;\n\ttp rmn = flow;\n\tfor (int eg = cur[p]; eg && rmn; eg = nxt[eg])\n\t{\n\t\tcur[p] = eg;\n\t\tint v = to[eg];\n\t\ttp vol = w[eg];\n\t\tif (vol > 0 && lv[v] == lv[p] + 1)\n\t\t{\n\t\t\ttp c = dfs(v, min(vol, rmn));\n\t\t\trmn -= c;\n\t\t\tw[eg] -= c;\n\t\t\tw[eg ^ 1] += c;\n\t\t}\n\t}\n\treturn flow - rmn;\n}\n\ninline tp dinic()\n{\n\ttp ans = 0;\n\twhile (bfs())\n\t\tans += dfs();\n\treturn ans;\n}\n\nint id(int x, int y)\n{\n\treturn (x - 1) * m + y;\n}\n\nbool vis[_];\n\nint in[_], score[_];\n\nvector<int> out[_];\n\nvoid toposort()\n{\n\tqueue<int> Q;\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tif (!in[id(i, j)])\n\t\t\t{\n\t\t\t\tQ.push(id(i, j));\n\t\t\t\tvis[id(i, j)] = 1;\n\t\t\t}\n\twhile (!Q.empty())\n\t{\n\t\tint u = Q.front();\n\t\tQ.pop();\n\t\tfor (int i = 0; i < out[u].size(); i++)\n\t\t{\n\t\t\tint v = out[u][i];\n\t\t\tin[v]--;\n\t\t\tif (!vis[v] && !in[v])\n\t\t\t{\n\t\t\t\tQ.push(v);\n\t\t\t\tvis[v] = true;\n\t\t\t}\n\t\t}\n\t}\n}\n\nsigned main()\n{\n\tint x, y, z;\n\tn = read(), m = read();\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t{\n\t\t\tscore[id(i, j)] = read(), z = read();\n\t\t\tfor (int k = 1; k <= z; k++)\n\t\t\t{\n\t\t\t\tint x = read() + 1, y = read() + 1;\n\t\t\t\tout[id(i, j)].push_back(id(x, y));\n\t\t\t\tin[id(x, y)]++;\n\t\t\t}\n\t\t\tif (j < m)\n\t\t\t{\n\t\t\t\tout[id(i, j + 1)].push_back(id(i, j));\n\t\t\t\tin[id(i, j)]++;\n\t\t\t}\n\t\t}\n\ttoposort();\n\ts = 0, t = _ - 1;\n\tint sum = 0;\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tfor (int j = 1; j <= m; j++)\n\t\t{\n\t\t\tint u = id(i, j);\n\t\t\tif (!vis[u])\n\t\t\t\tcontinue;\n\t\t\tif (score[u] >= 0)\n\t\t\t{\n\t\t\t\tAdd(s, u, score[u]);\n\t\t\t\tsum += score[u];\n\t\t\t}\n\t\t\telse\n\t\t\t\tAdd(u, t, -score[u]);\n\t\t\tfor (int k = 0; k < out[u].size(); k++)\n\t\t\t{\n\t\t\t\tint v = out[u][k];\n\t\t\t\tif (vis[v])\n\t\t\t\t\tAdd(v, u, 2e9);\n\t\t\t}\n\t\t}\n\t}\n\twrite(sum - dinic());\n\treturn 0;\n}\n```\n\n",
        "postTime": 1645788365,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "P2805 [NOI2009] \u690d\u7269\u5927\u6218\u50f5\u5c38"
    },
    {
        "content": "\u6bd4\u8f83\u7b80\u5355\u7684\u7f51\u7edc\u6d41\u9898\n\n\u8fd9\u9898\u5206\u4e3a\u4e24\u6b65\uff1a\u62d3\u6251\u6392\u5e8f\u548c\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002\n\n\u9996\u5148\u8fd9\u9898\u4f1a\u53d1\u73b0\u662f\u975e\u5e38\u50cf\u4e00\u4e2a\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u677f\u5b50\u7684\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u5730\u65b9\u6709\u533a\u522b\uff1a\u8fd9\u4e2a\u9898\u5982\u679c\u6709\u5faa\u73af\u4fdd\u62a4\uff0c\u8fd9\u4e9b\u90fd\u4e0d\u80fd\u9009\uff0c\u800c\u4e0d\u50cf\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u4e00\u6837\uff08\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u8bdd\u53ef\u4ee5\u4e00\u8d77\u9009\u4e86\uff09\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u62d3\u6251\u6392\u5e8f\u4e00\u4e0b\uff0c\u5c06\u6240\u6709\u4e0d\u5728\u73af\u4e0a\u7684\u70b9\u627e\u5230\uff0c\u53ea\u6709\u8fd9\u4e9b\u70b9\u662f\u53ef\u4ee5\u88ab\u53d6\u7684\u3002\u7136\u540e\u76f4\u63a5\u5957\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u5c31\u597d\u4e86\u3002\n\n\u6ce8\u610f\u4e00\u4e0b\uff1a\u62d3\u6251\u548c\u7f51\u7edc\u6d41\u8fd9\u4e24\u6b65\u7684\u5efa\u56fe\u662f\u6709\u533a\u522b\u7684\uff0c\u5047\u8bbe $A$ \u4fdd\u62a4 $B$\uff0c\u90a3\u4e48\u5728\u62d3\u6251\u7684\u65f6\u5019\u8981 $A\\rightarrow B$\uff0c\u800c\u7f51\u7edc\u6d41\u7684\u65f6\u5019\u8981 $B\\rightarrow A$\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int NR=1005;\nconst int MR=NR*NR;\nconst int INF=0x3f3f3f3f;\nvoid Min(int& x,int y){x=min(x,y);}\nvoid Max(int& x,int y){x=max(x,y);}\nint n,m,S,T,ans;\nint to[MR<<1],nxt[MR<<1],val[MR<<1];\nint head[NR];\nint tot=1;\nvoid add(int x,int y,int z)\n{\n\tto[tot]=y;\n\tval[tot]=z;\n\tnxt[tot]=head[x];\n\thead[x]=tot++;\n}\nint Num(int x,int y){return (x-1)*m+y;}\nint va[NR];\nbool d[NR][NR];\nbool flag[NR];\nint rd[NR];\nint dep[NR],now[NR];\nbool bfs()\n{\n\tmemset(dep,0,sizeof(dep));\n\tdep[S]=1;now[S]=head[S];\n\tqueue<int>q;q.push(S);\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=head[x];i;i=nxt[i])\n\t\t{\n\t\t\tint y=to[i];\n\t\t\tif(val[i]&&!dep[y])\n\t\t\t{\n\t\t\t\tdep[y]=dep[x]+1;\n\t\t\t\tnow[y]=head[y];q.push(y);\n\t\t\t\tif(y==T)return 1; \n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint dinic(int x,int flow)\n{\n\tif(x==T)return flow;\n\tint mxflow=0;\n\tfor(int i=head[x];i;i=nxt[i])\n\t{\n\t\tint y=to[i];now[x]=nxt[i];\n\t\tif(flow==mxflow)return flow;\n\t\tif(val[i]&&dep[y]==dep[x]+1)\n\t\t{\n\t\t\tint num=dinic(y,min(val[i],flow-mxflow));\n\t\t\tmxflow+=num;val[i]-=num;val[i*2-(i^1)]+=num;\n\t\t\tif(!num)dep[y]=0;\n\t\t}\n\t}\n\treturn mxflow;\n}\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch<='9'&&ch>='0'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nint main()\n{\n//\tfreopen(\"1.in\",\"r\",stdin);\n//\tfreopen(\"1.out\",\"w\",stdout);\n\tn=read(),m=read();S=0,T=n*m+1;\n\tfor(int i=1;i<=n;i++)for(int j=1;j<=m;j++)\n\t{\n\t\tva[Num(i,j)]=read();int k=read();if(j>1)d[Num(i,j)][Num(i,j-1)]=1;\n\t\twhile(k--){int x=read()+1,y=read()+1;d[Num(i,j)][Num(x,y)]=1;}\n\t}\n\tfor(int i=1;i<=n*m;i++)for(int j=1;j<=n*m;j++)rd[j]+=d[i][j];\n\tqueue<int>q;for(int i=1;i<=n*m;i++)if(!rd[i])q.push(i);\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();q.pop();flag[x]=1;\n\t\tfor(int i=1;i<=n*m;i++)if(d[x][i])\n\t\t\tif(!(--rd[i]))q.push(i);\n\t}\n\tfor(int i=1;i<=n*m;i++)for(int j=1;j<=n*m;j++)\n\t\tif(flag[i]&&flag[j]&&d[i][j])add(j,i,INF),add(i,j,0);\n\tfor(int i=1;i<=n*m;i++)if(flag[i])\n\t{\n\t\tans+=max(va[i],0);\n\t\tif(va[i]>=0)add(S,i,va[i]),add(i,S,0);\n\t\telse add(i,T,-va[i]),add(T,i,0);\n\t}\n\twhile(bfs())ans-=dinic(S,INF);printf(\"%d\\n\",ans);\n\treturn 0;\n}\n/*\n1 3\n10 1 0 1\n10 0\n10 0\n*/",
        "postTime": 1611912256,
        "uid": 97136,
        "name": "chenzida",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2805 \u3010[NOI2009] \u690d\u7269\u5927\u6218\u50f5\u5c38\u3011"
    },
    {
        "content": "\u672c\u9898\u6709\u4e24\u4e2a\u9650\u5236\uff1a\u653b\u51fb\u4e0e\u540c\u4e00\u884c\u7684\u5de6\u53f3\u4f4d\u7f6e\u5173\u7cfb\u3002\n\n\u5c06\u5fc5\u987b\u5148\u5403\u6389\u7684\u690d\u7269\u5411\u540e\u5403\u6389\u7684\u8fde\u8fb9\uff0c\u5f97\u5230\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8dd1\u62d3\u6251\u6392\u5e8f\u80fd\u5f97\u5230\u90a3\u4e9b\u4f4d\u7f6e\u662f\u6709\u53ef\u80fd\u8ba1\u5165\u8d21\u732e\u7684\uff08\u82e5\u67d0\u4e2a\u95ed\u5408\u5b50\u56fe\u6ca1\u6709\u5165\u5ea6\u4e3a $0$ \u7684\u70b9\uff0c\u5219\u8fd9\u4e9b\u4f4d\u7f6e\u90fd\u65e0\u6cd5\u4ea7\u751f\u8d21\u732e\uff09\u3002\n\n\u8fd9\u6837\u4e00\u6765\u5c31\u662f\u6c42\u4e00\u4e2a\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u4e86\u3002\n\n\u5148\u5047\u5b9a\u9009\u62e9\u5168\u90e8\u7684\u6b63\u6743\uff0c\u5f97\u5230\u4e00\u4e2a\u548c $sum$\u3002\u6b63\u6743\u70b9\u4e0e\u6e90\u70b9\u8fde\u8fb9\uff0c\u8d1f\u6743\u70b9\u4e0e\u6c47\u70b9\u8fde\u8fb9\uff0c\u4e4b\u540e\u8003\u8651\u6bcf\u5bf9\u653b\u51fb\u5173\u7cfb\u3002\u5f53\u4e14\u4ec5\u5f53\u88ab\u9650\u5236\u7684\u70b9\u662f\u6b63\u6743\u65f6\uff0c\u624d\u9700\u8981\u6700\u5c0f\u5272\u7684\u5224\u65ad\uff0c\u4e8e\u662f\u5e94\u5f53\u662f\u88ab\u9650\u5236\u70b9\u5411\u9650\u5236\u70b9\u8fde\u65e0\u9650\u5927\u5bb9\u91cf\u7684\u8fb9\uff0c\u8fd9\u6837\u5982\u679c\u88ab\u9650\u5236\u4e3a\u6b63\uff0c\u9650\u5236\u4e3a\u8d1f\uff0c\u5c31\u4ea7\u751f\u4e86\u4e00\u6761\u589e\u5e7f\u8def\u800c\u9700\u8981\u88ab\u5272\u6389\u3002\n\n```cpp\nint n,m;\nint a[maxn];\n#define x first\n#define y second\npii p[maxn];\nint sum;\nstruct Graph{\n    vector<int> E[maxn];\n    int now[25],deg[maxn];\n    bool vis[maxn];\n    bool chk[maxn];\n    int S,T;\n    struct edge{\n        int to,nxt,lim;\n    }e[maxm<<1];\n    int head[maxn],cnt=1;\n    inline void add_edge(int u,int v,int w){\n        // printf(\"%d %d %d\\n\",u,v,w);\n        e[++cnt].to=v,e[cnt].nxt=head[u];e[cnt].lim=w,head[u]=cnt;\n        e[++cnt].to=u,e[cnt].nxt=head[v],e[cnt].lim=0,head[v]=cnt;\n    }\n    inline void build_graph(){\n        for(int i=1;i<=n*m;++i){\n            a[i]=read();\n            p[i].x=(i-1)/m+1,p[i].y=i-(p[i].x-1)*m;\n            if(p[i].y>1){\n                E[i].push_back(i-1);\n                ++deg[i-1];\n            }\n            int siz=read();\n            for(int j=1;j<=siz;++j){\n                int vx=read(),vy=read();\n                E[i].push_back(vx*m+vy+1);\n                ++deg[vx*m+vy+1];\n            }\n        }\n        for(int i=1;i<=n;++i) now[i]=m;\n        queue<int> q;\n        for(int i=1;i<=n*m;++i){\n            if(!deg[i]) q.push(i);\n        }\n        while(!q.empty()){\n            int u=q.front();\n            q.pop();\n            chk[u]=1;\n            for(int v:E[u]){\n                --deg[v];\n                if(!deg[v]){\n                    q.push(v);\n                }\n            }\n        }\n        S=n*m+1,T=n*m+2;\n        for(int u=1;u<=n*m;++u){\n            // if(!chk[u]) printf(\"***%d***\\n\",u);\n            if(!chk[u]) continue;\n            if(a[u]>0){\n                sum+=a[u];\n                add_edge(S,u,a[u]);\n            }\n            else add_edge(u,T,-a[u]);\n            for(int v:E[u]){\n                if(!chk[v]) continue;\n                add_edge(v,u,1e9);\n            }\n        }\n        // printf(\"\\n\");\n    }\n    int cur[maxn],dis[maxn];\n    int dfs(int u,int rest){\n        if(u==T) return rest;\n        int flow=0;\n        for(int i=cur[u];i&&rest;i=e[i].nxt){\n            cur[u]=i;\n            int v=e[i].to,C=min(rest,e[i].lim);\n            if(dis[u]+1==dis[v]&&C){\n                int k=dfs(v,C);\n                flow+=k,rest-=k;\n                e[i].lim-=k,e[i^1].lim+=k;\n            }\n        }\n        if(!flow) dis[u]=-1;\n        return flow;\n    }\n    inline int max_flow(){\n        int flow=0;\n        while(1){\n            queue<int> q;\n            memcpy(cur,head,sizeof(head));\n            memset(dis,-1,sizeof(dis));\n            dis[S]=0;\n            q.push(S);\n            while(!q.empty()){\n                int u=q.front();\n                q.pop();\n                for(int i=head[u];i;i=e[i].nxt){\n                    int v=e[i].to;\n                    if(dis[v]==-1&&e[i].lim){\n                        dis[v]=dis[u]+1;\n                        q.push(v);\n                    }\n                }\n            }\n            if(dis[T]==-1) return flow;\n            flow+=dfs(S,1e9);\n        }\n    }\n}G;\nint main(){\n    n=read(),m=read();\n    G.build_graph();\n    printf(\"%d\\n\",max(sum-G.max_flow(),0));\n    return 0;\n}\n\n```",
        "postTime": 1670670446,
        "uid": 321177,
        "name": "SoyTony",
        "ccfLevel": 6,
        "title": "P2805 \u9898\u89e3"
    },
    {
        "content": "[\u535a\u5ba2\u56ed\u67e5\u770b](https://www.cnblogs.com/AIskeleton/p/16496473.html)\n#### \u524d\u7f6e\u77e5\u8bc6\uff1a$\\text{tarjan}$ \u7f29\u70b9\u6216\u62d3\u6251\u6392\u5e8f\u5224\u73af\n\u81f3\u5c11\u8981\u6709\u4e00\u79cd\u65b9\u6cd5\u5224\u73af\u3002\n#### \u524d\u7f6e\u77e5\u8bc6\uff1a\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\n\u53ef\u4ee5\u770b\u7b2c\u4e00\u7bc7\u9898\u89e3\u7684\u8bb2\u8ff0\u6216\u8005\u5148\u5199\u4e00\u4e0b[\u6a21\u677f\u9898](https://www.luogu.com.cn/problem/P3410)\u3002\n\n### \u9898\u610f\uff1a\n> [P2805 [NOI2009] \u690d\u7269\u5927\u6218\u50f5\u5c38](https://www.luogu.com.cn/problem/P2805)\n\n> \u5728\u5927\u5c0f\u4e3a $N\\times M$ \u7684\u7f51\u683c\u56fe\u4e0a\uff0c\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e00\u682a\u690d\u7269\u3002\n> \u6bcf\u682a\u690d\u7269\u90fd\u6709\u4e00\u4e2a\u80fd\u6e90\u503c\uff0c\u4ee5\u53ca\u5176\u9632\u5fa1\u4f4d\u7f6e\u96c6\u5408\uff0c\u80fd\u6e90\u4e0d\u4fdd\u8bc1\u975e\u8d1f\u3002\n> \u53ef\u4ee5\u4ece\u5730\u56fe\u53f3\u4fa7\u5f00\u59cb\u653b\u51fb\uff0c\u4e0d\u80fd\u7ecf\u8fc7\u672a\u88ab\u6d88\u706d\u7684\u690d\u7269\u7684\u9632\u5fa1\u96c6\u5408\u3002\n> \u6c42\u95ee\u653b\u51fb\u6700\u5927\u6536\u76ca\u3002\n\n\n> $1\\le N\\le 20,1\\le M\\le 30,\\left|\\text{Score}\\right| \\le 4000$\u3002\n\n### \u9898\u89e3\uff1a\n\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6700\u5c0f\u5272\u5efa\u56fe\u53ef\u4ee5\u5f15\u7533\u5230\u6b64\u9898\u4e0a\u3002\n\n\u8bbe\u70b9 $i$ \u6743\u503c\u4e3a $v_i$\uff0c\u6e90\u70b9\u548c\u6c47\u70b9 $s,t$\u3002\n- \u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $u$\n  + \u82e5 $v_u>0$\uff0c\u4ece\u6e90\u70b9\u5411 $u$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $s_u$ \u7684\u8fb9\u3002$s \\xrightarrow{v_u} u$\u3002\n  + \u82e5 $v_u<0$\uff0c\u4ece $u$ \u5411\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $s_u$ \u7684\u8fb9\u3002$u \\xrightarrow{v_u} t$\u3002\n- \u5bf9\u4e8e\u56fe\u4e2d\u539f\u6709\u7684\u8fb9 $u \\to v$\uff0c\u4e24\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u5bb9\u91cf\u65e0\u9650\u5927\u7684\u8fb9\u3002$u \\xrightarrow{\\text{inf}} v$\u3002\n\n\u7531\u6b64\u9898\u7684\u6761\u4ef6\uff1a\u653b\u51fb\u4e00\u682a\u690d\u7269\u8981\u5148\u6d88\u706d\u5176\u53f3\u8fb9\u548c\u4fdd\u62a4\u6b64\u690d\u7269\u7684\u6240\u6709\u690d\u7269\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u548c\u6700\u5927\u95ed\u5408\u5b50\u56fe\u7c7b\u4f3c\u3002\n\n\u6240\u4ee5\uff0c\u5148\u5c06\u6240\u6709\u690d\u7269\u6309\u5176\u80fd\u6e90\u503c\u6b63\u8d1f\u5206\u522b\u5411\u6e90\u70b9\u6216\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a\u80fd\u6e90\u503c\u7edd\u5bf9\u503c\u7684\u8fb9\u3002\n\u518d\u5c06\u6bcf\u682a\u690d\u7269\u5411\u4fdd\u62a4\u5176\u7684\u6240\u6709\u690d\u7269\u8fde\u5bb9\u91cf\u65e0\u9650\u5927\u7684\u8fb9\uff0c\u8dd1\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u5373\u53ef\u3002\n\n\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f\u6240\u6709**\u6b63\u80fd\u6e90\u503c\u4e4b\u548c\u51cf\u53bb\u6700\u5927\u6d41**\u3002\n\n\u4f46\u662f\u53ef\u80fd\u4f1a\u51fa\u73b0\u690d\u7269\u65e0\u654c\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u4e24\u682a\u690d\u7269\u4e92\u76f8\u4fdd\u62a4\u3002\n\n\u6240\u4ee5\u8981\u5148\u5728\u5efa\u51fa\u7684\u56fe\u7684**\u53cd\u56fe**\u4e0a\u8dd1\u62d3\u6251\u6392\u5e8f\uff0c\u6216\u662f $\\text{tarjan}$ \u627e\u73af\u540e\u4ece\u73af\u4e0a\u70b9\u51fa\u53d1\u8dd1 $\\text{BFS}$\uff0c\u627e\u5230\u65e0\u654c\u7684\u70b9\u3002\n\n\u5728\u7f51\u7edc\u6d41\u5efa\u56fe\u65f6\uff0c\u9664\u53bb\u65e0\u654c\u7684\u70b9\uff0c\u800c\u4e14**\u6b63\u80fd\u6e90\u503c\u4e4b\u548c**\u4e2d\u4e5f\u4e0d\u5305\u62ec\u65e0\u654c\u70b9\u7684\u80fd\u6e90\u503c\u3002\n\n### \u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\n#define id(x,y) ((x-1)*m+y)\n#define V e[i].v\nusing namespace std;\nint rd(){\n  int w=0,v=1;\n  char c=getchar();\n  while(c<'0'||c>'9'){\n    if(c=='-')\n      v=-1;\n    c=getchar();\n  }while(c>='0'&&c<='9'){\n    w=(w<<1)+(w<<3)+(c&15);\n    c=getchar();\n  }return w*v;\n}const int N=2e5,INF=2e9;\nint n,m,st,ed,ans;\nint a[1001][1001];\nstruct E{int v,w,nt;}e[N];\nint fir[N],c=1;\nvoid I(int u,int v,int w){\n  e[++c]=(E){v,w,fir[u]};\n  fir[u]=c;\n  e[++c]=(E){u,0,fir[v]};\n  fir[v]=c;\n}int cur[N],d[N];\nqueue <int>q;\nvector <int>g[N];\nbool bfs(){\n  for(int i=0;i<=ed;i++){\n    cur[i]=fir[i];\n    d[i]=0;\n  }q.push(st);\n  d[st]=1;\n  while(!q.empty()){\n    int u=q.front();\n    q.pop();\n    for(int i=fir[u];i;i=e[i].nt)\n      if(e[i].w&&!d[V]){\n        q.push(V);\n        d[V]=d[u]+1;\n      }\n  }return d[ed];\n}int dfs(int u,int fl){\n  if(u==ed) \n    return fl;\n  int f,s=0;\n  for(int i=cur[u];i;i=e[i].nt){\n    cur[u]=i;\n    if(e[i].w&&d[V]==d[u]+1){\n      f=dfs(V,min(e[i].w,fl));\n      e[i].w-=f;\n      e[i^1].w+=f;\n      fl-=f;s+=f;\n      if(!fl) break;\n    }\n  }if(!s) d[u]=0;\n  return s;\n}int dinic(){\n  int ans=0;\n  while(bfs())\n    ans+=dfs(st,INF);\n  return ans;\n}int dfn[N],low[N];\nint tim,xs,si[N];\nbool in[N],tag[N];\nint sta[N],tp,now;\nvoid tarjan(int u){\n  dfn[u]=low[u]=++tim;\n  in[sta[++tp]=u]=1;\n  for(auto v:g[u])\n    if(!dfn[v]){\n      tarjan(v);\n      low[u]=min(low[u],low[v]);\n    }else if(in[v])\n      low[u]=min(low[u],dfn[v]);\n  if(dfn[u]==low[u]){\n    xs++;now=tp;\n    while(sta[tp+1]!=u){\n      in[sta[tp--]]=0;\n      si[xs]++;\n    }if(si[xs]<=1) return ;\n    for(int i=tp+1;i<=now;i++){\n      tag[sta[i]]=1;\n      q.push(sta[i]);\n    }\n  }\n}int main(){\n  freopen(\"test.in\",\"r\",stdin);\n  n=rd(),m=rd();\n  ed=n*m*2;\n  for(int i=1;i<=n;i++)\n    for(int j=2;j<=m;j++)\n      g[id(i,j)].push_back(id(i,j-1));\n  for(int i=1;i<=n;i++)\n    for(int j=1,k,x,y;j<=m;j++){\n      a[i][j]=rd();k=rd();\n      while(k--){\n        x=rd()+1,y=rd()+1;\n        g[id(i,j)].push_back(id(x,y));\n      }\n    }\n  for(int i=1;i<=n;i++)\n    for(int j=1;j<=m;j++)\n      if(!dfn[id(i,j)])\n        tarjan(id(i,j));\n  while(!q.empty()){\n    int u=q.front();\n    q.pop();\n    for(auto i:g[u]){\n      if(!tag[i]){\n        tag[i]=1;\n        q.push(i);\n      }\n    }\n  }for(int i=1;i<=n;i++)\n    for(int j=1;j<=m;j++){\n      if(tag[id(i,j)])\n        continue;\n      if(a[i][j]>0)\n        I(st,id(i,j),a[i][j]),ans+=a[i][j];\n      if(a[i][j]<0)\n        I(id(i,j),ed,-a[i][j]);\n    }\n  for(int i=1;i<=n;i++)\n    for(int j=1;j<=m;j++)\n      if(!tag[id(i,j)])\n        for(int k:g[id(i,j)])\n          if(!tag[k])\n            I(k,id(i,j),INF);\n  cout<<ans-dinic();\n  return 0;\n}\n```",
        "postTime": 1658273746,
        "uid": 540715,
        "name": "A_I_Skeleton",
        "ccfLevel": 0,
        "title": "P2805"
    },
    {
        "content": "\u5224\u5f3a\u8fde\u901a\u73af+\u6700\u5927\u70b9\u6743\u95ed\u5408\u56fe\u3002\n\n\u6211\u4eec\u5c06\u6bcf\u4e2a\u690d\u7269\u770b\u505a\u4e00\u4e2a\u8282\u70b9\uff0c\u5176\u6743\u503c\u4e3ascore[p]\u3002\u6bcf\u4e2a\u8282\u70b9\u5411\u5176\u53f3\u4fa7\u7684\u8282\u70b9\u8fde\u8fb9\uff0c\u82e5\u8282\u70b9i\u4fdd\u62a4\u8282\u70b9j\uff0c\u5219\u8fde\u8fb9j->i\uff0c\u8868\u793a\uff1a\u5982\u679c\u9009\u53d6\u8282\u70b9j\uff0c\u5c31\u5fc5\u987b\u9009\u53d6\u8282\u70b9i\u3002\u70b9\u6743\u503c\u6709\u6b63\u6709\u8d1f\u3001\u8282\u70b9\u95f4\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\uff0c\u8fd9\u4e24\u4e2a\u6761\u4ef6\u63d0\u793a\u6211\u4eec\u8003\u8651\u6700\u5927\u6743\u95ed\u5408\u56fe\u3002\u4e8e\u662f\u8dd1\u4e00\u4e2a\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n\u7136\u800c\u4e0d\u80fd\u76f4\u63a5\u5f00\u59cb\u8dd1\uff0c\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u9884\u5904\u7406\u8fc7\u7a0b\uff1a\u5047\u8bbe\u5b58\u5728\u4e24\u4e2a\u8282\u70b9u\u3001v\u4e92\u76f8\u4fdd\u62a4\uff0c\u90a3\u4e48\u6211\u4eec\u6c38\u8fdc\u4e0d\u53ef\u80fd\u653b\u4e0bu\u6216v\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\uff08\u56e0\u4e3a\u653b\u51fbu\u9700\u8981\u5148\u653b\u51fbv\uff0c\u800c\u653b\u51fbv\u53c8\u9700\u8981\u5148\u653b\u51fbu\uff0c\u663e\u7136\u505a\u4e0d\u5230\uff09\u3002\u82e5\u653b\u4e0d\u4e0bu\u3001v\uff0c\u5219\u5728u\u3001v\u5de6\u8fb9\u7684\u8282\u70b9\u4e5f\u4e00\u5b9a\u653b\u4e0d\u4e0b\uff08\u50f5\u5c38\u4e0d\u80fd\u8d8a\u8fc7u\u3001v\u8282\u70b9\uff09\uff1b\u63a8\u800c\u5e7f\u4e4b\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u70b9\u6570>=2\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u53ca\u5176\u5de6\u8fb9\u7684\u6240\u6709\u8282\u70b9\uff0c\u6211\u4eec\u90fd\u65e0\u6cd5\u653b\u51fb\uff0c\u5728\u6c42\u6700\u5927\u6743\u95ed\u5408\u56fe\u65f6\u5e94\u5c06\u8fd9\u4e9b\u8282\u70b9\u5220\u9664\u3002\n\u5173\u4e8e\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\uff1a\u4e3a\u4e86\u5220\u9664\u4e0d\u53ef\u8fbe\u8282\u70b9\uff0c\u6211\u5148\u53cd\u5411\u5efa\u56fegg\uff1a\u6240\u6709\u70b9\u5bf9\u5176\u5de6\u4fa7\u8282\u70b9\u8fde\u8fb9\uff0c\u82e5i\u4fdd\u62a4j\u5219\u8fde\u8fb9i->j\uff1b\u7136\u540e\u7528tarjan\u7b97\u6cd5\u6c42\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\uff1b\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6570>=2\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u53d6\u51fa\u5176\u4e2d\u4efb\u610f\u4e00\u70b9\u8fdb\u884cDFS\uff0c\u7ed9\u6240\u6709\u5230\u8fbe\u7684\u8282\u70b9\u6253\u4e0a\u5220\u9664\u6807\u8bb0\u3002\u7136\u540e\uff0c\u91cd\u65b0\u5efa\u56feg\uff1a\u6240\u6709\u70b9\u5411\u53f3\u8fde\u8fb9\uff0c\u82e5i\u4fdd\u62a4j\u5219\u8fdej->i\uff0c\u5f53\u7136\u5982\u679ci\u6216j\u88ab\u5220\u9664\u4e86\u5c31\u4e0d\u8fde\u3002\u8fd9\u4e9b\u8fb9\u5bb9\u91cf\u5747\u8bbe\u4e3aINF\uff0c\u4e4b\u540e\u7684\u64cd\u4f5c\u5c31\u548c\u6c42\u6700\u5927\u6743\u95ed\u5408\u56fe\u4e00\u6837\u4e86.\n\nDINIC\u7b97\u6cd5\u6211\u76f4\u63a5\u7c98\u4e86\u6a21\u677f\uff0ctarjan\u662f\u7b2c\u4e00\u6b21\u624b\u5199\uff0c\u5199\u5f97\u5f88\u7d2f\u3002\u3002\u3002\ncode:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=20000;\nconst int INF=INT_MAX;\nstruct edge\n{\n\tint from,to,flow,cap;\n};\nstruct edge2 //\u539f\u56fe\n{\n\tint from,to;\n};\nvector<edge> edges;\nvector<edge2> edges2;\nvector<int> g[maxn],gg[maxn],scc[maxn];\nint cur[maxn],d[maxn],w[maxn],p[maxn],sccno[maxn],scc_cnt=0,s=0,t,n,m;\nbool vis[maxn],demark[maxn];\nstack<int> stk;\nint dfs_clock=0;\nint dfn[maxn];\n\nvoid addedge(int u,int v,int c)\n{\n\tedges.push_back((edge){u,v,0,c});\n\tedges.push_back((edge){v,u,0,0});\n\tint m=edges.size();\n\tg[u].push_back(m-2);\n\tg[v].push_back(m-1);\n}\n\nbool bfs() //bfs\u6784\u5efa\u5c42\u6b21\u56fe\n{\n\tmemset(vis,false,sizeof(vis));\n\tmemset(d,-1,sizeof(d));\n\tqueue<int> q;\n\tq.push(s);\n\tvis[s]=true;\n\td[s]=0;\n\twhile(!q.empty()){\n\t\tint x=q.front(); q.pop();\n\t\tfor(int i=0;i<g[x].size();i++){\n\t\t\tedge& e=edges[g[x][i]];\n\t\t\t\tif((!vis[e.to]) && e.cap>e.flow){\n\t\t\t\t\tvis[e.to]=true;\n\t\t\t\t\td[e.to]=d[x]+1;\n\t\t\t\t\tq.push(e.to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\treturn vis[t];\n}\n\nint dfs(int x,int a) //dfs\u6cbf\u963b\u585e\u6d41\u589e\u5e7f,\u8fd4\u56de\u53ef\u589e\u5e7f\u503c\n{\n\tif(x==t||a==0)\n\t\treturn a;\n\tint flow=0,f;\n\tfor(int& i=cur[x];i<g[x].size();i++){\n\t\tedge& e=edges[g[x][i]];\n\t\tif(d[x]+1==d[e.to]&&(f=dfs(e.to,min(a,e.cap-e.flow)))>0){\n\t\t\te.flow+=f;\n\t\t\tedges[g[x][i]^1].flow-=f;\n\t\t\tflow+=f;\n\t\t\ta-=f;\n\t\t\tif(a==0) break;\n\t\t\t}\n\t\t}\n\treturn flow;\n}\n\nint tarjan(int u)\n{\nint lowu=dfn[u]=++dfs_clock;\n\tstk.push(u);\n\tfor(int i=0;i<gg[u].size();i++){\n\t\tedge2& e=edges2[gg[u][i]];\n\t\tif(!dfn[e.to]){\n\t\t\tint lowv=tarjan(e.to);\n\t\tlowu=min(lowu,lowv);\n\t\t}\n\t\telse if(!sccno[e.to]){\n\t\t\tlowu=min(lowu,dfn[e.to]);\n\t}\n}\nif(lowu==dfn[u]){\n\tscc_cnt++;\n\tint y;\n\tdo{\n\t\ty=stk.top(); stk.pop();\n\t\tsccno[y]=scc_cnt;\n\t\tscc[scc_cnt].push_back(y);\n\t}while(y!=u);\n\t}\n\treturn lowu;\n}\n\nvoid mark(int u)\n{\n\tdemark[u]=true;\n\tfor(int i=0;i<gg[u].size();i++){\n\t\tedge2& e=edges2[gg[u][i]];\n\t\tif(!demark[e.to])\n\t\tmark(e.to);\n\t}\n}\n\nint main()\n{\n\tcin>>n>>m;\n\tt=n*m+1;\n\tfor(int i=1;i<=m*n;i++)\n\t{\n\t\tint num;\n\t\tscanf(\"%d%d\",&w[i],&num);\n\t\tif((i-1)%m!=0){\n\t\t\tint x=edges2.size();\n\t\t\tgg[i].push_back(x);\n\t\t\tedges2.push_back((edge2){i,i-1}); //\u6bcf\u4e2a\u70b9\u5411\u5de6\u8fb9\u7684\u70b9\u8fde\u8fb9\n\t\t}\n\t\tfor(int j=0;j<num;j++){\n\t\t\tint r,c,tmp,x=edges2.size();\n\t\t\tscanf(\"%d%d\",&r,&c);\n\t\t\ttmp=r*m+c+1;\n\t\t\tgg[i].push_back(x);\n\t\t\tedges2.push_back((edge2){i,tmp});\n\t\t}\n\t}\n\t/*\u8dd1\u5f3a\u8fde\u901a\u5206\u91cf*/\n\tfor(int i=0;i<stk.size();i++)\n\t\tstk.pop();\n\tmemset(dfn,0,sizeof(dfn));\n\tmemset(sccno,0,sizeof(sccno));\n\tfor(int i=0;i<maxn;i++)\n\t\tscc[i].clear();\n\tfor(int i=1;i<=m*n;i++){\n\t\tif(!dfn[i]){\n\t\t\ttarjan(i);\n\t\t}\n\t}\n\tmemset(demark,false,sizeof(demark));\n\tfor(int i=1;i<=scc_cnt;i++){\n\t\tif(scc[i].size()==1)\n\t\t\tcontinue;\n\t\tint x=scc[i][0];\n\t\tmark(x);\n\t}\n\t/*\u5efa\u65b0\u56fe*/\n\tint tot=0;\n\tfor(int i=1;i<=m*n;i++){\n\t\tif(demark[i])\n\t\t\tcontinue;\n\t\tif(w[i]>=0){\n\t\t\taddedge(s,i,w[i]);tot+=w[i];\n\t\t}\n\telse \n\t\taddedge(i,t,-w[i]);\n\tfor(int j=0;j<gg[i].size();j++){\n\t\tedge2& e=edges2[gg[i][j]];\n\t\tif(demark[e.to])\n\t\t\tcontinue;\n\t\taddedge(e.to,i,INF); //\u53cd\u8fde\u8fb9\n\t\t}\n\t}\n\tint flow=0;\n\twhile(bfs()){\n\t\tmemset(cur,0,sizeof(cur));\n\t\tflow+=dfs(s,INF);\n\t}\n\tcout<<tot-flow<<endl;\n\treturn 0;\n} maxn=20000;\nconst int INF=INT_MAX;\nstruct edge\n{\n\tint from,to,flow,cap;\n};\nstruct edge2 //\u539f\u56fe\n{\n\tint from,to;\n};\nvector<edge> edges;\nvector<edge2> edges2;\nvector<int> g[maxn],gg[maxn],scc[maxn];\nint cur[maxn],d[maxn],w[maxn],p[maxn],sccno[maxn],scc_cnt=0,s=0,t,n,m;\nbool vis[maxn],demark[maxn];\nstack<int> stk;\nint dfs_clock=0;\nint dfn[maxn];\n\nvoid addedge(int u,int v,int c)\n{\n\tedges.push_back((edge){u,v,0,c});\n\tedges.push_back((edge){v,u,0,0});\n\tint m=edges.size();\n\tg[u].push_back(m-2);\n\tg[v].push_back(m-1);\n}\n\nbool bfs() //bfs\u6784\u5efa\u5c42\u6b21\u56fe\n{\n\tmemset(vis,false,sizeof(vis));\n\tmemset(d,-1,sizeof(d));\n\tqueue<int> q;\n\tq.push(s);\n\tvis[s]=true;\n\td[s]=0;\n\twhile(!q.empty()){\n\t\tint x=q.front(); q.pop();\n\t\tfor(int i=0;i<g[x].size();i++){\n\t\t\tedge& e=edges[g[x][i]];\n\t\t\t\tif((!vis[e.to]) && e.cap>e.flow){\n\t\t\t\t\tvis[e.to]=true;\n\t\t\t\t\td[e.to]=d[x]+1;\n\t\t\t\t\tq.push(e.to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\treturn vis[t];\n}\n\nint dfs(int x,int a) //dfs\u6cbf\u963b\u585e\u6d41\u589e\u5e7f,\u8fd4\u56de\u53ef\u589e\u5e7f\u503c\n{\n\tif(x==t||a==0)\n\t\treturn a;\n\tint flow=0,f;\n\tfor(int& i=cur[x];i<g[x].size();i++){\n\t\tedge& e=edges[g[x][i]];\n\t\tif(d[x]+1==d[e.to]&&(f=dfs(e.to,min(a,e.cap-e.flow)))>0){\n\t\t\te.flow+=f;\n\t\t\tedges[g[x][i]^1].flow-=f;\n\t\t\tflow+=f;\n\t\t\ta-=f;\n\t\t\tif(a==0) break;\n\t\t\t}\n\t\t}\n\treturn flow;\n}\n\nint tarjan(int u)\n{\nint lowu=dfn[u]=++dfs_clock;\n\tstk.push(u);\n\tfor(int i=0;i<gg[u].size();i++){\n\t\tedge2& e=edges2[gg[u][i]];\n\t\tif(!dfn[e.to]){\n\t\t\tint lowv=tarjan(e.to);\n\t\tlowu=min(lowu,lowv);\n\t\t}\n\t\telse if(!sccno[e.to]){\n\t\t\tlowu=min(lowu,dfn[e.to]);\n\t}\n}\nif(lowu==dfn[u]){\n\tscc_cnt++;\n\tint y;\n\tdo{\n\t\ty=stk.top(); stk.pop();\n\t\tsccno[y]=scc_cnt;\n\t\tscc[scc_cnt].push_back(y);\n\t}while(y!=u);\n\t}\n\treturn lowu;\n}\n\nvoid mark(int u)\n{\n\tdemark[u]=true;\n\tfor(int i=0;i<gg[u].size();i++){\n\t\tedge2& e=edges2[gg[u][i]];\n\t\tif(!demark[e.to])\n\t\tmark(e.to);\n\t}\n}\n\nint main()\n{\n\tcin>>n>>m;\n\tt=n*m+1;\n\tfor(int i=1;i<=m*n;i++){\n\tint num;\n\tscanf(\"%d%d\",&w[i],&num);\n\tif((i-1)%m!=0){\n\tint x=edges2.size();\n\tgg[i].push_back(x);\n\tedges2.push_back((edge2){i,i-1}); //\u6bcf\u4e2a\u70b9\u5411\u5de6\u8fb9\u7684\u70b9\u8fde\u8fb9\n\t}\n\tfor(int j=0;j<num;j++){\n\tint r,c,tmp,x=edges2.size();\n\tscanf(\"%d%d\",&r,&c);\n\ttmp=r*m+c+1;\n\tgg[i].push_back(x);\n\tedges2.push_back((edge2){i,tmp});\n\t}\n\t}\n\t/*\u8dd1\u5f3a\u8fde\u901a\u5206\u91cf*/\n\tfor(int i=0;i<stk.size();i++)stk.pop();\n\tmemset(dfn,0,sizeof(dfn));\n\tmemset(sccno,0,sizeof(sccno));\n\tfor(int i=0;i<maxn;i++)scc[i].clear();\n\tfor(int i=1;i<=m*n;i++){\n\tif(!dfn[i]){\n\ttarjan(i);\n\t}\n\t}\n\tmemset(demark,false,sizeof(demark));\n\tfor(int i=1;i<=scc_cnt;i++){\n\tif(scc[i].size()==1)continue;\n\tint x=scc[i][0];\n\tmark(x);\n\t}\n\t/*\u5efa\u65b0\u56fe*/\n\tint tot=0;\n\tfor(int i=1;i<=m*n;i++){\n\tif(demark[i])continue;\n\tif(w[i]>=0){addedge(s,i,w[i]);tot+=w[i];}\n\telse addedge(i,t,-w[i]);\n\tfor(int j=0;j<gg[i].size();j++){\n\tedge2& e=edges2[gg[i][j]];\n\tif(demark[e.to])continue;\n\taddedge(e.to,i,INF); //\u53cd\u8fde\u8fb9\n\t}\n\t}\n\tint flow=0;\n\twhile(bfs()){\n\t\tmemset(cur,0,sizeof(cur));\n\t\tflow+=dfs(s,INF);\n\t}\n\tcout<<tot-flow<<endl;\n\treturn 0;\n}\n\n```\n\n# \u8f6c\u81eaLofter",
        "postTime": 1576156281,
        "uid": 220889,
        "name": "Wind_Shear",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2805 \u3010[NOI2009]\u690d\u7269\u5927\u6218\u50f5\u5c38\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u66f4\u4f73](https://tle666.github.io/2019/11/28/[NOI2009]%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/)\n\n# **Description**\n\n\u6e38\u620f\u7684\u5730\u56fe\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4e00\u4e2a $N$ \u884c $M$ \u5217\u7684\u77e9\u9635\uff0c\u884c\u4ece\u4e0a\u5230\u4e0b\u7528 $0$ \u5230 $N - 1$ \u7f16\u53f7\uff0c\u5217\u4ece\u5de6\u5230\u53f3\u7528 $0$ \u5230 $M - 1$ \u7f16\u53f7\uff1b\u5728\u5730\u56fe\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u90fd\u653e\u6709\u4e00\u4e2a $\\text{Plant}$ \uff0c\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u628a\u4f4d\u4e8e\u7b2c $r$ \u884c\u7b2c $c$ \u5217\u7684\u690d\u7269\u8bb0\u4e3a $P_{r, c}$ \u3002\n\n$\\text{Plants}$ \u5206\u5f88\u591a\u79cd\uff0c\u6709\u653b\u51fb\u7c7b\u3001\u9632\u5b88\u7c7b\u548c\u7ecf\u6d4e\u7c7b\u7b49\u7b49\u3002\u4e3a\u4e86\u7b80\u5355\u7684\u63cf\u8ff0\u6bcf\u4e2a $\\text{Plant}$ \uff0c\u5b9a\u4e49 $\\text{Score}$ \u548c $\\text{Attack}$ \u5982\u4e0b\uff1a\n\n$\\text{Score} [P_{r, c}]$\n\n$\\text{Zombie}$ \u51fb\u6e83\u690d\u7269 $P_{r, c}$ \u53ef\u83b7\u5f97\u7684\u80fd\u6e90\u3002\u82e5 $\\text{Score} [P_{r, c}]$ \u4e3a\u975e\u8d1f\u6574\u6570\uff0c\u5219\u8868\u793a\u51fb\u6e83\u690d\u7269 $P_{r, c}$ \u53ef\u83b7\u5f97\u80fd\u6e90 $\\text{Score} [P_{r, c}]$ \uff0c\u82e5\u4e3a\u8d1f\u6570\u8868\u793a\u51fb\u6e83 $P_{r, c}$ \u9700\u8981\u4ed8\u51fa\u80fd\u6e90 $- \\text{Score} [P_{r, c}]$ \u3002\n\n$\\text{Attack} [P_{r, c}]$\n\n\u690d\u7269 $P_{r, c}$ \u80fd\u591f\u5bf9 $\\text{Zombie}$ \u8fdb\u884c\u653b\u51fb\u7684\u4f4d\u7f6e\u96c6\u5408\u3002\n\n$\\text{Zombies}$ \u5fc5\u987b\u4ece\u5730\u56fe\u7684\u53f3\u4fa7\u8fdb\u5165\uff0c\u4e14\u53ea\u80fd\u6cbf\u7740\u6c34\u5e73\u65b9\u5411\u8fdb\u884c\u79fb\u52a8\u3002 $\\text{Zombies}$ \u653b\u51fb\u690d\u7269\u7684\u552f\u4e00\u65b9\u5f0f\u5c31\u662f\u8d70\u5230\u8be5\u690d\u7269\u6240\u5728\u7684\u4f4d\u7f6e\u5e76\u5c06\u690d\u7269\u5403\u6389\u3002\u56e0\u6b64 $\\text{Zombies}$ \u7684\u8fdb\u653b\u603b\u662f\u4ece\u5730\u56fe\u7684\u53f3\u4fa7\u5f00\u59cb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u7b2cr\u884c\u7684\u8fdb\u653b\uff0c $\\text{Zombies}$ \u5fc5\u987b\u9996\u5148\u653b\u51fbPr, M-1\uff1b\u82e5\u9700\u8981\u5bf9 $P_{r, c}$ \uff08 $0 \\leq c < M - 1$ \uff09\u653b\u51fb\uff0c\u5fc5\u987b\u5c06 $P_{r, M - 1}, P_{r, M - 2} \\cdots P_{r, c + 1}$ \u5148\u51fb\u6e83\uff0c\u5e76\u79fb\u52a8\u5230\u4f4d\u7f6e $(r, c)$ \u624d\u53ef\u8fdb\u884c\u653b\u51fb\u3002\n\n\u5728\u672c\u9898\u7684\u8bbe\u5b9a\u4e2d\uff0c $\\text{Plants}$ \u7684\u653b\u51fb\u529b\u662f\u65e0\u7a77\u5927\u7684\uff0c\u4e00\u65e6 $\\text{Zombie}$ \u8fdb\u5165\u67d0\u4e2a $\\text{Plant}$ \u7684\u653b\u51fb\u4f4d\u7f6e\uff0c\u8be5 $\\text{Zombie}$ \u4f1a\u88ab\u77ac\u95f4\u6d88\u706d\uff0c\u800c\u8be5 $\\text{Zombie}$ \u6ca1\u6709\u65f6\u95f4\u8fdb\u884c\u4efb\u4f55\u653b\u51fb\u64cd\u4f5c\u3002\u56e0\u6b64\uff0c\u5373\u4fbf $\\text{Zombie}$ \u8fdb\u5165\u4e86\u4e00\u4e2a $\\text{Plant}$ \u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u4f46\u8be5\u4f4d\u7f6e\u5c5e\u4e8e\u5176\u4ed6\u690d\u7269\u7684\u653b\u51fb\u4f4d\u7f6e\u96c6\u5408\uff0c\u5219 $\\text{Zombie}$ \u4f1a\u88ab\u77ac\u95f4\u6d88\u706d\u800c\u6240\u5728\u4f4d\u7f6e\u7684\u690d\u7269\u5219\u5b89\u7136\u65e0\u6059\uff08\u5728\u6211\u4eec\u7684\u8bbe\u5b9a\u4e2d\uff0c $\\text{Plant}$ \u7684\u653b\u51fb\u4f4d\u7f6e\u4e0d\u5305\u542b\u81ea\u8eab\u6240\u5728\u4f4d\u7f6e\uff0c\u5426\u5219\u4f60\u5c31\u4e0d\u53ef\u80fd\u51fb\u6e83\u5b83\u4e86\uff09\u3002\n\n$\\text{Zombies}$ \u7684\u76ee\u6807\u662f\u5bf9 $\\text{Plants}$ \u7684\u9635\u5730\u53d1\u8d77\u8fdb\u653b\u5e76\u83b7\u5f97\u6700\u5927\u7684\u80fd\u6e90\u6536\u5165\u3002\u6bcf\u4e00\u6b21\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u53ef\u8fdb\u653b\u7684\u690d\u7269\u8fdb\u884c\u653b\u51fb\u3002\u672c\u9898\u7684\u76ee\u6807\u4e3a\uff0c\u5236\u5b9a\u4e00\u5957 $\\text{Zombies}$ \u7684\u8fdb\u653b\u65b9\u6848\uff0c\u9009\u62e9\u8fdb\u653b\u54ea\u4e9b\u690d\u7269\u4ee5\u53ca\u8fdb\u653b\u7684\u987a\u5e8f\uff0c\u4ece\u800c\u83b7\u5f97\u6700\u5927\u7684\u80fd\u6e90\u6536\u5165\u3002\n\n\u5bf9\u4e8e $100 \\%$ \u7684\u6570\u636e\uff0c\u6709 $1 \\leq N \\leq 20,\\ 1 \\leq M \\leq 30,\\ -10^4 \\leq \\text{Score} \\leq 10^4$\n\n[\u9898\u76ee\u94fe\u63a5\u6233\u8fd9\u91cc](https://www.luogu.com.cn/problem/P2805)\n\n# **Solution**\n\n\u53ef\u4ee5\u901a\u8fc7\u5efa\u56fe\u6765\u8868\u793a\u9650\u5236\u6761\u4ef6\uff0c\u5373\u5f53\u4e14\u4ec5\u5f53\u300c\u4e00\u4e2a $\\text{Plant}$ \u53f3\u4fa7\u6240\u6709\u7684 $\\text{Plants}$ \u90fd\u88ab\u6d88\u706d\u300d\u4e14\u300c\u6240\u6709\u80fd\u591f\u4fdd\u62a4\u8fd9\u4e2a $\\text{Plant}$ \u7684 $\\text{Plants}$ \u90fd\u88ab\u6d88\u706d\u300d\u65f6\uff0c\u8be5 $\\text{Plant}$ \u624d\u80fd\u591f\u88ab\u6d88\u706d\u3002\n\n\u5c06\u6bcf\u4e2a $\\text{Plant}$ \u5411\u5b83\u6240\u6709\u80fd\u591f\u4fdd\u62a4\u7684 $\\text{Plants}$ \u8fde\u5355\u5411\u8fb9\u3002\n\n\u8fd9\u6837\uff0c\u53ea\u6709\u5728\u4e00\u4e2a $\\text{Plant}$ \u7684\u5165\u5ea6\u4e3a $0$ \u65f6\u624d\u80fd\u88ab\u6d88\u706d\u3002\n\n\u8fd9\u6837\u907f\u514d\u4e86\u4e24\u4e2a $\\text{Plants}$ \u4e92\u76f8\u4fdd\u62a4\uff0c\u6c38\u8fdc\u65e0\u6cd5\u88ab\u6d88\u706d\u7684\u60c5\u51b5\u3002\n\n\u4e0d\u96be\u60f3\u5230\u7528\u62d3\u6251\u6392\u5e8f\u9009\u51fa\u90a3\u4e9b\u80fd\u88ab\u6d88\u706d\u7684 $\\text{Plants}$ \u3002\n\n\u63a5\u4e0b\u6765\u53ea\u9700\u5224\u65ad\u600e\u4e48\u6d88\u706d\u7684\u5229\u76ca\u6700\u5927\u5373\u53ef\u3002\n\n\u901a\u8fc7 $\\text{Plants}$ \u80fd\u88ab\u6d88\u706d\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u60f3\u5230\u95ed\u5408\u5b50\u56fe\uff1a\u6709\u5411\u56fe\u7684\u4e00\u4e2a\u5b50\u56fe\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u4ece\u5b83\u51fa\u53d1\uff0c\u80fd\u591f\u8d70\u5230\u7684\u6240\u6709\u70b9\u90fd\u5728\u8fd9\u4e2a\u5b50\u56fe\u4e2d\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b50\u56fe\u5c31\u662f\u4e00\u4e2a\u95ed\u5408\u5b50\u56fe\u3002\n\n\u8003\u8651\u6309\u7167\u4ee5\u4e0b\u89c4\u5219\u5efa\u56fe\uff1a\n\n- \u4e00\u4e2a $\\text{Plant}$ \u7684\u70b9\u6743\u662f\u5b83\u7684 $\\text{Score}$ \uff1b\n\n- \u6bcf\u4e2a $\\text{Plant}$ \u90fd\u5411\u5176\u53f3\u4fa7\u7684 $\\text{Plant}$ \u8fde\u8fb9\uff1b\n\n- \u6bcf\u4e2a $\\text{Plant}$ \u90fd\u5411\u4fdd\u62a4\u81ea\u5df1\u7684 $\\text{Plants}$ \u8fde\u8fb9\u3002\n\n\u90a3\u4e48\u4ee5\u4e0a\u8fd9\u4e2a\u56fe\u6c42\u51fa\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6536\u76ca\u5373\u53ef\u3002\n\n# **Code**\n\n\uff08\u8fd9\u91cc\u7684\u7f29\u8fdb\u53d8\u6210\u4e86 4 \u683c\uff0c\u4f46\u6211\u539f\u6765\u662f 2 \u683c\uff0c\u6240\u4ee5\u770b\u8d77\u6765\u53ef\u80fd\u6709\u70b9\u602a\u5f02\uff0c [\u535a\u5ba2](https://tle666.github.io/2019/11/28/[NOI2009]%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/) \u98df\u7528\u66f4\u4f73\uff09\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define rep(i, a, b) for (int i = (a); i <= (b); i++)\n#define trv(p, u) for (edg *p = h[u]; p; p = p->nxt)\n#define id(x, y) ((x - 1) * m + y)\nconst int N = 1e6 + 100;\nconst int inf = 0x3f3f3f3f;\n\nint n, m, s, t, ind[N], lev[N], sco[N];\nbool inGra[N];\nvector <int> e[N];\n\nstruct edg {\n\tint v, c;\n\tedg *nxt, *rev;\n} pol[N << 1], *h[N], *cur = pol;\n\nvoid add(int u, int v, int c) {\n\tedg *p = ++cur, *q = ++cur;\n\tp->rev = q, q->rev = p;\n\tp->v = v, p->c = c, p->nxt = h[u], h[u] = p;\n\tq->v = u, q->c = 0, q->nxt = h[v], h[v] = q;\n}\n\nvoid topo() {\n\tqueue <int> Q;\n\trep(i, 1, n) {\n\t\trep(j, 1, m) {\n\t\t\tif (ind[id(i, j)]) continue ;\n\t\t\tinGra[id(i, j)] = true;\n\t\t\tQ.push(id(i, j));\n\t\t}\n\t}\n\twhile (!Q.empty()) {\n\t\tint u = Q.front();\n\t\tQ.pop();\n\t\trep(i, 0, (int) e[u].size() - 1) {\n\t\t\tint v = e[u][i];\n\t\t\tind[v]--;\n\t\t\tif (!ind[v] && !inGra[v]) {\n\t\t\t\tQ.push(v);\n\t\t\t\tinGra[v] = true;\n\t\t\t}\n\t\t}\n\t}\n}\n\nbool makelev() {\n\tqueue <int> Q;\n\tmemset(lev, -1, sizeof(lev));\n\tlev[s] = 1;\n\tQ.push(s);\n\twhile (!Q.empty()) {\n\t\tint u = Q.front();\n\t\tQ.pop();\n\t\ttrv(p, u) {\n\t\t\tint v = p->v;\n\t\t\tif (p->c && lev[v] == -1) {\n\t\t\t\tlev[v] = lev[u] + 1;\n\t\t\t\tQ.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn lev[t] != -1;\n}\n\nint dfs(int u, int flo) {\n\tint res = 0;\n\tif (u == t) return flo;\n\ttrv(p, u) {\n\t\tint v = p->v;\n\t\tif (p->c && lev[v] == lev[u] + 1) {\n\t\t\tint f = dfs(v, min(flo, p->c));\n\t\t\tp->c -= f, p->rev->c += f;\n\t\t\tflo -= f, res += f;\n\t\t\tif (!flo) break ;\n\t\t}\n\t}\n\tif (!res) lev[u] = -1;\n\treturn res;\n}\n\nint dinic() {\n\tint res = 0;\n\twhile (makelev()) res += dfs(s, inf);\n\treturn res;\n}\n\nint main() {\n\tscanf(\"%d %d\", &n, &m);\n\ts = 0, t = n * m + 1;\n\trep(i, 1, n) {\n\t\trep(j, 1, m) {\n\t\t\tint tot, u = id(i, j);\n\t\t\tscanf(\"%d %d\", &sco[u], &tot);\n\t\t\trep(k, 1, tot) {\n\t\t\t\tint x, y;\n\t\t\t\tscanf(\"%d %d\", &x, &y);\n\t\t\t\tx++, y++;\n\t\t\t\te[u].push_back(id(x, y));\n\t\t\t\tind[id(x, y)]++;\n\t\t\t}\n\t\t\tif (j < m) {\n\t\t\t\te[id(i, j + 1)].push_back(u);\n\t\t\t\tind[u]++;\n\t\t\t}\n\t\t}\n\t}\n\ttopo();\n\tint sum = 0;\n\trep(i, 1, n) {\n\t\trep(j, 1, m) {\n\t\t\tint u = id(i, j);\n\t\t\tif (!inGra[u]) continue ;\n\t\t\tif (sco[u] >= 0) {\n\t\t\t\tadd(s, u, sco[u]);\n\t\t\t\tsum += sco[u];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tadd(u, t, -sco[u]);\n\t\t\t}\n\t\t\trep(k, 0, (int) e[u].size() - 1) {\n\t\t\t\tint v = e[u][k];\n\t\t\t\tif (inGra[v]) add(v, u, inf);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\", sum - dinic());\n\treturn 0;\n}\n```",
        "postTime": 1574929449,
        "uid": 54628,
        "name": "eros1on",
        "ccfLevel": 0,
        "title": "\u300cNOI2009\u300d\u690d\u7269\u5927\u6218\u50f5\u5c38"
    },
    {
        "content": "~~\u849f\u84bb\u7b2c\u4e00\u7bc7\u9898\u89e3~~\n\n\n**\u601d\u8def\u501f~~chao~~\u9274~~xi~~**  **BJpers2** \u5de8\u4f6c[(\u539f\u6587)](https://www.luogu.org/blog/contributation/solution-p2805)\n\u53ea\u662f~~\u4e5f\u8bb8~~\u4ee3\u7801\u66f4\u6613\u61c2 dalao\u8bf7\u8df3\u8fc7~~QAQ~~\n\n\n\u770b\u5f88\u591a\u5927\u4f6c\u90fd\u8bf4\u7684\u662f\u201c\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u201d\uff0c\u849f\u84bb\u4e0d\u662f\u5f88\u61c2\uff0c\u8fd9\u91cc\u7528\u4e00\u79cd\u6bd4\u8f83\u901a\u4fd7\u7684\u65b9\u6cd5\u89c1\u4e00\u4e0b\u8fd9\u9053\u9898,\u4e0d\u7528tarjan,\u4e0d\u7528\u626b\u73af\u3002\n\n \u73a9\u8fc7\u539f\u6e38\u620f\u4e2d\u201c\u6211\u662f\u50f5\u5c38\u201d\u6a21\u5f0f\u7684\u4eba\u5e94\u8be5\u90fd\u6709\u7ecf\u9a8c\uff0c\u6211\u4eec\u6bcf\u6b21\u90fd\u8ba9\u50f5\u5c38\u53bb\u5403\u6ca1\u6709\u4fdd\u62a4\u7684\u690d\u7269\u5373\u53ef\u3002\n - \u56e0\u6b64\u6211\u4eec\u76f4\u89c2\u7684\u8ba9**\u4fdd\u62a4\u8005**\u5411**\u88ab\u4fdd\u62a4\u8005**\u8fde\u8fb9\uff0c.\n - **\u5728\u4efb\u610f\u65f6\u523b**\uff0c\u5047\u5982\u67d0**\u682a\u690d\u7269\u6ca1\u6709\u8fde\u5411\u5b83\u7684\u8fb9**\u4e86(\u6ca1\u6709\u4fdd\u62a4\u4e86)\uff0c\u90a3\u4e48\u5b83\u5c31**\u53ef\u4ee5\u6210\u4e3a\u6211\u4eec\u653b\u51fb\u7684\u5bf9\u8c61**\u3002\n - \u6211\u4eec\u4ece\u4e00\u5f00\u59cb\u4ece**\u5165\u5ea6\u4e3a0\u7684\u70b9\u5f00\u59cb\u641c\u7d22**(\u56e0\u4e3a\u8fb9\u7684\u65b9\u5411\u662f\u4fdd\u62a4\u8005-->\u88ab\u4fdd\u62a4\u8005)\uff0c\u5bf9**\u5b83\u7684\u6240\u6709\u5904\u8fb9\u4e0a\u7684\u70b9\u5165\u5ea6\u51cf\u4e00**\uff0c\u5982\u679c\u51cf\u5230\u96f6\u5c31\u628a\u5b83\u5165\u961f\u3002\n\n\u8fd9\u5341\u5206\u7c7b\u4f3c\u4e8e\u6211\u4eec\u6240\u5b66\u8fc7\u7684\u62d3\u6251\u6392\u5e8f\uff0c\u800c\u4e14\u8fd9\u6837\u505a\u5de7\u5999\u5730\u628a\u53ef\u80fd\u88ab\u6211\u4eec\u653b\u51fb\u7684\u690d\u7269\u90fd\u7b5b\u51fa\u6765\u4e86\u3002\n\n\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5957\u8def\u4e86\uff0c\u6211\u4eec\u8fd8\u662f\u5c06\u6b63\u6743\u8fde\u6e90\u70b9\uff0c\u8d1f\u6743\u8fde\u6c47\u70b9\uff0c\u62d3\u6251\u5e8f\u5c0f\u7684\u8fde\u4e0a\u62d3\u6251\u5e8f\u5927\uff0c\u8dd1\u4e00\u904ddinic\u6216isap\u5c31\u884c\u4e86\u3002\n\n\ncode:\n\n```cpp\n//\u849f\u84bb\u4e0d\u4f1a\u6700\u5927\u95ed\u5408\u5b50\u56fe\u3001\u62d3\u6251\u6392\u5e8f\u3002\u3002\u3002\u53ea\u80fd\u819c\u9898\u89e3\u5199\u4e86\u4e2a\u3002\u3002\u3002emm\n//\u53c2(chao)\u8003(xi)\u535a\u5ba2from:    BJpers2 \n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint n,m;\nint ys[21][31],c[610];//\u5c06\u56fe\u8f6c\u5316\u6210\u70b9 \nstruct edge//\u8fde\u63a5\u521d\u59cb\u7684\u8fb9 (\u4ee3\u66ff\u62d3\u6251\u6392\u5e8f) \n{\n\tint to,next;\n}e[1110000]; int elen,elast[610];//\u5f00\u5927\u70b9\u603b\u6ca1\u574f\u5904(\u96fe)\nint rd[610];//\u5165\u5ea6\uff0c\u76f8\u5f53\u4e8e\u6b64\u690d\u7269\u88ab\u591a\u5c11\u4e2a\u690d\u7269\u4fdd\u62a4\u7740 \nint list[610],head,tail;//\u961f\u5217,\u5904\u7406\u4f2a\u62d3\u6251\n\nvoid addTP(int from,int to)//(\u4f2a)\u62d3\u6251 \u5efa\u8fb9 \n{//\u628a\u5f53\u524d\u690d\u7269\u8fde\u5411\u88ab\u4fdd\u62a4\u7684\u690d\u7269\uff0c(\u4f2a)\u62d3\u6251\u65f6\u8981\u7528 \n\telen++; e[elen].to=to;\n\te[elen].next=elast[from]; elast[from]=elen;\n\trd[to]++;\n}\n\nint id[610];//\u50a8\u5b58\u6bcf\u4e2a\u70b9\u7f51\u7edc\u6d41\u7684\u7f16\u53f7(\u82e5\u503c\u4e3a0\u53ef\u80fd\u662f\u4e0d\u5728\u56fe\u5185)\nint tp[610];//\u8bb0\u5f55\u7f51\u7edc\u6d41\u8282\u70b9\u7684\u539f\u59cb\u7f16\u53f7 \nstruct node\n{\n\tint x,y,c,next,other;\n}a[1110000]; int alen,alast[610];\nint st,ed;\n\nvoid ins(int x,int y,int c)\n{\n\talen++; int len1=alen;\n\ta[alen].x=x; a[alen].y=y; a[alen].c=c;\n\ta[alen].next=alast[x]; alast[x]=alen;\n\t\n\talen++; int len2=alen;\n\ta[alen].x=y; a[alen].y=x; a[alen].c=0;\n\ta[alen].next=alast[y]; alast[y]=alen;\n\t\n\ta[len1].other=len2;\n\ta[len2].other=len1;\n}\n\nint h[610];//\u5c42\u6b21\uff0clist\u5df2\u8bbe \nbool bfs()\n{\n\thead=tail=1; list[1]=st;\n\tmemset(h,0,sizeof(h)); h[st]=1;\n\twhile(head<=tail)\n\t{\n\t\tint x=list[head++];\n\t\tfor(int k=alast[x];k;k=a[k].next)\n\t\t{\n\t\t\tint y=a[k].y;\n\t\t\tif(h[y]==0 && a[k].c>0)\n\t\t\t{\n\t\t\t\th[y]=h[x]+1;\n\t\t\t\tlist[++tail]=y;\n\t\t\t}\n\t\t}\n\t}\n\tif(h[ed])return true;\n\telse return false;\n}\n\nint dfs(int x,int f)//\u5728x\u70b9\u643a\u5e26\u7740f\u7684\u6d41\u91cf \n{\n\tif(x==ed)return f;\n\tint s=0,t;\n\tfor(int k=alast[x];k;k=a[k].next)\n\t{\n\t\tint y=a[k].y;\n\t\tif(h[y]==h[x]+1 && a[k].c>0 && s<f)\n\t\t{\n\t\t\ts+=( t=dfs(y,min(a[k].c,f-s)) );\n\t\t\ta[k].c-=t; a[ a[k].other ].c+=t;\n\t\t}\n\t\tif(s==f)break; \n\t}\n\tif(s==0)h[x]=0;//\u6ca1\u6d41\u91cf\uff0cx\u4ece\u6b64\u4e0d\u53ef\u8d70 \n\treturn s;\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tint tot=0;\n\tfor(int i=0;i<n;i++)\n\t\tfor(int j=0;j<m;j++)\n\t\t\tys[i][j]=++tot; //\u8f6c\u5316\u4e3a\u70b9 \n\t\n\tint now,x,y,cnt; elen=0; memset(elast,0,sizeof(elast));\n\tfor(int i=0;i<n;i++)\n\t\tfor(int j=0;j<m;j++)\n\t\t{\n\t\t\tnow=ys[i][j];\n\t\t\tif(j)addTP(now,ys[i][j-1]);\n\t\t\tscanf(\"%d%d\",&c[now],&cnt);\n\t\t\twhile(cnt--)\n\t\t\t{\n\t\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\t\taddTP(now,ys[x][y]);\n\t\t\t}\n\t\t}\n\t\n\thead=1,tail=0; memset(id,0,sizeof(id)); cnt=0;//\u91cd\u590d\u5229\u7528cnt,\u6b64\u5904\u662f\u7f51\u7edc\u6d41\u7684\u7f16\u53f7 \n\tfor(int i=1;i<=tot;i++)if(rd[i]==0)list[++tail]=i;//\u521d\u59cb\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9 \n\twhile(head<=tail)//(\u4f2a)\u62d3\u6251\uff0c\u627e\u51fa(\u50f5\u5c38\u4e0d\u62e9\u624b\u6bb5\u7684\u8fdb\u653b\u540e)\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\uff0c\u907f\u514d\u5904\u7406\u73af\n\t{\n\t\tnow=list[head++];\n\t\tid[now]=++cnt; tp[cnt]=now;//\u5904\u7406\u7f16\u53f7\uff0c\u8be6\u89c1\u5b9a\u4e49\n\t\tfor(int k=elast[now];k;k=e[k].next)\n\t\t{\n\t\t\tint to=e[k].to;\n\t\t\trd[to]--;//\u65e2\u7136now\u690d\u7269\u53ef\u4ee5\u88ab\u5543\u6389,to\u690d\u7269\u5c31\u5c11\u4e86\u4e00\u4e2a\u5c4f\u969c\n\t\t\tif(rd[to]==0)list[++tail]=to;//\u591a\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5403\u7684\u690d\u7269 \n\t\t}\n\t}\n\talen=0; memset(alast,0,sizeof(alast)); st=cnt+1,ed=cnt+2;//\u8bbe\u7acb\u7ec8\u6781\u6e90\u70b9\u548c\u7ec8\u6781\u6c47\u70b9\n\tint sum=0;\n\t//\u6ce8\u610f\u4e00\u4e0b\u7f16\u53f7(\u6709\u70b9\u8ff7), ins\u5efa\u7f51\u7edc\u6d41\u8981\u7528\u4e0a\u9762(\u4f2a\u62d3\u6251)\u627e\u51fa\u7684\u7f16\u53f7,c\u6570\u7ec4\u7528\u7684\u662f\u539f\u6765\u7684\u7f16\u53f7 \n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\tnow=tp[i];//\u627e\u56de\u539f\u6765\u7684\u7f16\u53f7,\u56e0\u4e3ac\u7684\u4e0b\u6807\u5b58\u7684\u8fd8\u662f\u539f\u6765\u7684\u7f16\u53f7\n\t\tif(c[now]>0)\n\t\t{\n\t\t\tins(st,i,c[now]);//\u6b63\u503c\u70b9\u548c\u6e90\u70b9\u8fde\u4e00\u6761\u6b63\u503c\u7684\u8fb9 \n\t\t\tsum+=c[now];//\u80fd\u5230\u8fbe\u7684\u70b9 \u7684\u6b63\u6743\u503c\u548c \n\t\t}\n\t\telse if(c[now]<0)ins(i,ed,-c[now]);//\u8d1f\u6743\u503cc\u8981\u53d6\u53cd\uff0c\u56e0\u4e3a\u8fd9\u662f\u6700\u5c0f\u5272(\u96fe)\n\t\t/*\n\t\t\u53ea\u6709c\u4e3a\u8d1f\u503c\u624d\u8981\u4ed8\u51fa\u4ee3\u4ef7 \u5426\u5219\u5df2\u88ab\u7b97\u5728sum\u91cc \n\t\t\u6e90\u70b9\u548c\u6b63\u503c\u70b9\u8fde\u4e00\u6761\u8fb9\u7684\u76ee\u7684\u4e4b\u4e00\u662f\u9650\u5236\u6d41\u91cf\uff0c\u76f8\u5f53\u4e8e\u4ed8\u51fa\u7684\u4ee3\u4ef7\u5927\u4e8e\u5f97\u5230\u7684\u65f6\u907f\u514d\u4e8f\u672c\n\t\t\u7f51\u7edc\u6d41\u8dd1\u51fa\u6765\u7684\u7ed3\u679c\u76f8\u5f53\u4e8e\u8981\u5f97\u5230sum\u6240\u4ed8\u51fa\u7684\u4ee3\u4ef7 \n\t\t*/\n\t\tfor(int k=elast[now];k;k=e[k].next)//\u904d\u5386now\u6240\u4fdd\u62a4\u7684\u690d\u7269 \n\t\t{\n\t\t\tint to=e[k].to;\n\t\t\tins(id[to],i,999999999);//\u5728\u88ab\u4fdd\u62a4\u7684\u70b9\u548cnow\u4e4b\u95f4\u5efa\u7acb\u4e00\u6761\u503c\u4e3aINF\u7684\u8fb9 \n\t\t}\n\t}\n\tint js=0;//dicnic \n\twhile( bfs() )js+=dfs(st,999999999);\n\t\n\tprintf(\"%d\\n\",sum-js);\n\treturn 0;\n}\n```\n",
        "postTime": 1569733706,
        "uid": 120905,
        "name": "\u0421\u0442\u0430\u043b\u0438\u043d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2805 \u3010[NOI2009]\u690d\u7269\u5927\u6218\u50f5\u5c38\u3011"
    },
    {
        "content": "## \u5206\u6790\uff1a\n\u6487\u5f00\u4e71\u4e03\u516b\u7cdf\u7684\u64cd\u4f5c\uff0c\u63d0\u4f9b\u4e00\u4efd\u5341\u5206\u6e05\u723d\u7684\u9898\u89e3\u3002\n\n\u8fd9\u9898\u7684\u96be\u70b9\uff0c\u4ec5\u4ec5\u662f**\u5efa\u56fe\uff01\u5efa\u56fe\uff01\uff01\u5efa\u56fe\uff01\uff01\uff01**\n\n- ### \u7b2c\u4e00\u5f20\u56fe\uff1a\n\n\u8d85\u6e90\u8fde\u5411\u6240\u6709\u884c\u7684\u53f3\u624b\u7b2c\u4e00\u683c\uff0c\u7136\u540e\u6309\u987a\u5e8f\u8fde\u63a5\u683c\u5b50\uff0c\u7531\u4e8e\u4e0d\u662f\u6700\u7ec8\u5efa\u56fe\u6240\u4ee5\u6ca1\u6709\u8fb9\u6743\uff0c\u70b9\u6743\u662f\u5f53\u524d\u7684\u80fd\u6e90\u4ef7\u503c\uff0c\u6700\u540e\u8fde\u5230\u8d85\u6c47\u3002\n\n\u5f53\u7136\uff0c\u53ef\u80fd\u70b9\u5bf9\u4e4b\u95f4\u5b58\u5728\u4fdd\u62a4\u5173\u7cfb\uff0c\u4e8e\u662f\u4ece\u4fdd\u62a4\u65b9\u5411\u88ab\u4fdd\u62a4\u65b9\u8fde\u8fb9\u3002\n\n- ### \u7b2c\u4e8c\u5f20\u56fe\uff1a\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2aDAG\u91cc\u51fa\u73b0\u672c\u8be5\u6ca1\u6709\u7684\u81ea\u73af\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u539f\u672c\u5b50\u73af\u5185\u4ee5\u53ca\u5b50\u73af\u540e\u53ef\u4ee5\u5230\u7684\u70b9\u73b0\u5728\u90fd\u5230\u4e0d\u4e86\u4e86\uff0c\u56e0\u4e3a\u5982\u679c\u8981\u5230\u8fbe\u5c31\u5fc5\u987b\u7ecf\u8fc7\u90a3\u4e2a\u73af\uff0c\u800c\u73af\u5185\u690d\u7269\u53ef\u4ee5\u4e24\u4e24\u4fdd\u62a4\u3002\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u7f29\u70b9\u4e86\uff0c\u522b\u60ca\u8bb6\uff0c\u7f29\u70b9\u662f\u56fe\u8bba\u91cc\u7684\u91cd\u8981\u7b97\u6cd5\uff0c\u8fd9\u6b63\u4f53\u73b0\u4e86\u672c\u9898\u6781\u9ad8\u7684\u7efc\u5408\u6027\u3002\n\n\u7f29\u5b8c\u70b9\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6df1\u641c\u6765\u6807\u8bb0\u5b50\u73af\u53ca\u5b50\u73af\u540e\u7684\u70b9\uff08\u9664\u8d85\u6c47\uff09\uff0c\u628a\u4ed6\u4eec\u901a\u8fc7\u6253\u6807\u8bb0\u7ed9\u5220\u6389\u3002\n\n- ### \u7b2c\u4e09\u5f20\u56fe\uff1a\n\n\u5982\u679c\u4f60\u8981\u5403\u4e86\u67d0\u4e2a\u690d\u7269\uff0c\u90a3\u9996\u5148\u4f60\u8981\u628a\u4fdd\u62a4\u5b83\u7684\u6240\u6709\u690d\u7269\u5403\u6389\u624d\u884c\uff0c\u8fd9\u8ba9\u4f60\u60f3\u5230\u5565\uff1f\n\n\u6ca1\u9519\uff0c\u6700\u5927\u6743\u72ec\u7acb\u5b50\u56fe\u7684\u5b9a\u4e49\u5373\u662f\u5982\u6b64\u3002\n\n\u4e8e\u662f\u6211\u4eec\u628a\u8fb9\u5168\u90e8\u53cd\u5411\uff0c\u6309\u7167\u6c42\u6700\u5927\u6743\u72ec\u7acb\u5b50\u56fe\u7684\u65b9\u6848\u5efa\u56fe\uff08\u6b63\u70b9\u6743\u8fde\u8d85\u6e90\uff0c\u8d1f\u70b9\u6743\u8fde\u8d85\u6c47\uff0c\u539f\u672c\u8fb9\u65e0\u9650\u6d41\uff09\uff0c\u7136\u540e\u8dd1\u5b8c\u76f4\u63a5\u6b63\u70b9\u6743\u548c-\u6700\u5c0f\u5272\u5373\u53ef\u3002\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u539f\u6765\u7684\u8d85\u6e90\u548c\u8d85\u6c47\u4f5c\u4e3a\u70b9\u6743\u4e3a0\u7684\u70b9\uff0c\u4ecd\u8981\u4f5c\u4e3a\u539f\u6765\u56fe\u7684\u4e00\u90e8\u5206\u53c2\u4e0e\u7f51\u7edc\u6d41\u3002\n\n\u7136\u540e\u5c31\u6ca1\u5566\uff0c\u4ee3\u7801\u53c8\u81ed\u53c8\u957f\u5c31\u4e0d\u653e\u4e86\u3002",
        "postTime": 1566793009,
        "uid": 15984,
        "name": "\u5929\u6cfd\u9f9f",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2805 \u3010[NOI2009]\u690d\u7269\u5927\u6218\u50f5\u5c38\u3011"
    },
    {
        "content": "\u4ece $s$ \u5411\u6b63\u6743\u70b9\u8fde\u8fb9\uff0c\u8d1f\u6743\u70b9\u5411 $t$ \u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u70b9\u6743\u7684\u7edd\u5bf9\u503c\u3002\u5982\u679c\u4e24\u4e2a\u70b9\u95f4\u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u5219\u4ece\u62d3\u6251\u5e8f\u5927\u7684\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $INF$ \u7684\u8fb9\u5230\u62d3\u6251\u5e8f\u5c0f\u7684\u70b9\n\n\u6ce8\u610f\u6709\u7684\u70b9\u662f\u4e0d\u53ef\u8fbe\u5230\u7684\uff0c\u9884\u5148\u505a\u4e00\u904d\u62d3\u6251\u6392\u5e8f\u53bb\u6389\u8fd9\u4e9b\u70b9\n\n\u8dd1\u4e00\u904d\u6700\u5927\u6d41\uff0c\u5219\u7b54\u6848\u4e3a**\u6240\u6709\u53ef\u5230\u8fbe\u6b63\u6743\u70b9\u6743\u503c\u548c-\u6700\u5927\u6d41**\n\n\u8003\u8651\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8fd9\u6837\u505a\n\n\u6211\u4eec\u77e5\u9053**\u6700\u5927\u6d41=\u6700\u5c0f\u5272**\n\n\u5bf9\u4e8e\u6211\u4eec\u5efa\u51fa\u6765\u7684\u8fd9\u5f20\u56fe\uff0c\u53ef\u4ee5\u53d1\u73b0\u5272\u6389\u6b63\u6743\u70b9\u8fde $s$ \u7684\u8fb9\u76f8\u5f53\u4e8e\u820d\u5f03\u8fd9\u4e2a\u70b9\u7684\u5206\u6570\uff0c\u5272\u6389\u8d1f\u6743\u70b9\u8fde $t$ \u7684\u8fb9\u76f8\u5f53\u4e8e\u4ed8\u51fa\u8fd9\u4e2a\u70b9\u7684\u4ee3\u4ef7\u3002\n\n\u540c\u65f6\u6211\u4eec\u4ece\u62d3\u6251\u5e8f\u5927\u7684\u70b9\u8fde\u4e86\u4e00\u6761\u8fb9\u5230\u62d3\u6251\u5e8f\u5c0f\u7684\u8fb9\uff0c\u8fd9\u6837\u505a\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8003\u8651\uff0c\u5982\u679c\u5728\u56fe\u4e2d\u6709 $s \\longrightarrow t$ \u7684\u8def\u5f84\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u4e0a\u80af\u5b9a\u6709\u62d3\u6251\u5e8f\u5927\u7684\u6b63\u6743\u70b9\u548c\u62d3\u6251\u5e8f\u5c0f\u7684\u8d1f\u6743\u70b9\uff0c\u6240\u4ee5\u6b64\u65f6\u4f60\u8981\u4e48\u653e\u5f03\u6b63\u6743\u70b9\u7684\u6536\u76ca\uff0c\u8981\u4e48\u4ed8\u51fa\u8d1f\u6743\u70b9\u7684\u4ee3\u4ef7~~\uff08\u4e0d\u7136\u4e0d\u7ed9\u524d\u9762\u7684\u94b1\u8fd8\u62ff\u540e\u9762\u7684\u5206\u4e0d\u5c31\u662f\u767dpiao\u5417qwq\uff09~~\uff0c\u4e8e\u662f\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u5408\u6cd5\u7684\u60c5\u51b5\u5fc5\u7136\u662f\u6ca1\u6709\u4ece $s$ \u5230 $t$ \u7684\u8def\u5f84\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u6210\u6c42\u8fd9\u5f20\u56fe\u7684\u6700\u5c0f\u5272\n\n\u4ee3\u7801\u5199\u7684\u4e0d\u592a\u597d\u770b~~\uff08\u4e0d\u8fc7\u660e\u767d\u4e86\u601d\u8def\u5199\u8d77\u6765\u4e5f\u5e76\u4e0d\u56f0\u96be\u5427qwq\uff09~~\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\ntypedef struct edge{\n    int from,to,cap,next;\n}edge;\n\ntypedef struct TP{\n    int to,next;\n}TP;\n\nconst int INF=1000000000;\nedge e[1000010];\nTP et[1000010];\nint n,m,s,t,head[610],tot=1,thead[610],ttot,d[610],cur[610],q[610],hd,tl,w,id[30][40],a[30][40],cnt,in[610],tq[610],thd=1,ttl,tag[610],ans;\n\ninline int read(){\n    int num=0,k=1; char c=getchar();\n    while(c>'9' || c<'0') k=(c=='-')?0:k,c=getchar();\n    while(c>='0' && c<='9') num=num*10+c-'0',c=getchar();\n    return k?num:-num;\n}\n\nvoid addedge(int u,int v,int cap){\n    e[++tot].from=u; e[tot].to=v; e[tot].cap=cap; e[tot].next=head[u]; head[u]=tot;\n    e[++tot].from=v; e[tot].to=u; e[tot].cap=0; e[tot].next=head[v]; head[v]=tot;\n}\n\nvoid addTP(int u,int v) {et[++ttot].to=v; et[ttot].next=thead[u]; thead[u]=ttot;}\n\nint bfs(){\n    for(int i=1;i<=n*m+2;i++) d[i]=0;\n    d[s]=1; hd=1; tl=0;\n    q[++tl]=s;\n    while(hd<=tl){\n        int x=q[hd++];\n        for(int i=head[x],to;i;i=e[i].next){\n            to=e[i].to;\n            if(!e[i].cap || d[to]) continue;\n            d[to]=d[x]+1; q[++tl]=to;\n        }\n    }\n    return d[t];\n}\n\nint dfs(int x,int flow){\n    if(x==t || !flow) return flow;\n    int used=0;\n    for(int i=cur[x],to,f;i;i=e[i].next){\n        to=e[i].to;\n        if(!e[i].cap || d[to]!=d[x]+1) continue;\n        f=dfs(to,min(e[i].cap,flow-used));\n        e[i].cap-=f; e[i^1].cap+=f; used+=f;\n        if(used==flow) break;\n        cur[x]=e[i].next;\n    }\n    return used;\n}\n\nint dinic(){\n    int ans=0;\n    while(bfs()){\n        for(int i=1;i<=n*m+2;i++) cur[i]=head[i];\n        ans+=dfs(s,INF);\n    }\n    return ans;\n}\n\nint main(){\n    n=read(); m=read();\n    for(int i=1;i<=n;i++) for(int j=1;j<=m;j++) id[i][j]=++cnt;\n    for(int i=1;i<=n;i++) for(int j=1;j<=m;j++){\n        a[i][j]=read();\n        int ds=read(),dx,dy;\n        while(ds--) {dx=read(); dy=read(); addTP(id[i][j],id[dx+1][dy+1]); in[id[dx+1][dy+1]]++;}\n        if(j<m) {addTP(id[i][j+1],id[i][j]); in[id[i][j]]++;}\n    }\n    for(int i=1;i<=cnt;i++) if(!in[i]) tq[++ttl]=i,tag[i]=1;\n    while(thd<=ttl){\n        int x=tq[thd++];\n        for(int i=thead[x],to;i;i=et[i].next){\n            to=et[i].to;\n            in[to]--;\n            if(!in[to]) tq[++ttl]=to,tag[to]=1;\n        }\n    }\n    s=++cnt; t=++cnt;\n    for(int i=1;i<=n;i++) for(int j=1;j<=m;j++) if(tag[id[i][j]]){\n        if(a[i][j]>=0) {addedge(s,id[i][j],a[i][j]); ans+=a[i][j];}\n        else addedge(id[i][j],t,-a[i][j]);\n        for(int k=thead[id[i][j]],to;k;k=et[k].next){\n            to=et[k].to;\n            addedge(to,id[i][j],INF);\n        }\n    }\n    printf(\"%d\",ans-dinic());\n    return 0;\n}\n```",
        "postTime": 1554439325,
        "uid": 100037,
        "name": "kkxhh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2805 \u3010[NOI2009]\u690d\u7269\u5927\u6218\u50f5\u5c38\u3011"
    },
    {
        "content": "# \u9898\u610f\n\u5728$n \\times m$\u7684\u573a\u5730\u4e0a\u653e\u6ee1\u4e86\u690d\u7269\uff0c\u6bcf\u4e2a\u690d\u7269\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u6709\u6b63\u6709\u8d1f\u3002\u6709\u4e9b\u690d\u7269\u53ef\u4ee5\u4fdd\u62a4\u4e00\u4e9b\u690d\u7269\u4e0d\u88ab\u5403\u3002\u50f5\u5c38\u53ea\u80fd\u4ece\u53f3\u8fb9\u8fdb\u5165\u573a\u5730\uff0c\u8981\u5403\u6389\u53f3\u8fb9\u7684\u624d\u80fd\u5403\u5de6\u8fb9\u7684\u3002\u6c42\u4e00\u4e2a\u5403\u690d\u7269\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u5403\u6389\u7684\u690d\u7269\u7684\u603b\u6743\u503c\u6700\u5927\u3002\n\n# \u5934\u8111\u98ce\u66b4\n\u9996\u5148\u53ef\u4ee5\u5f88\u660e\u663e\u5730\u53d1\u73b0\uff0c\u201c\u963b\u6321\u201d\u548c\u201c\u4fdd\u62a4\u201d\u7684\u6027\u8d28\u4e00\u6837\uff0c\u6211\u4eec\u628a\u201c\u963b\u6321\u201d\u4e5f\u770b\u505a\u201c\u4fdd\u62a4\u201d\u5373\u53ef\u3002\u8fd9\u6837\u4e00\u6765\u4ece\u53f3\u8fb9\u8fdb\u5165\u7684\u6761\u4ef6\u5c31\u6ca1\u7528\u4e86\u3002\n\n\u518d\u770b\u770b\u201c\u4fdd\u62a4\u201d\u7684\u5b9e\u8d28\uff1a\u5982\u679c$u$\u4fdd\u62a4$v$\uff0c\u90a3\u4e48\u8981\u5403$v$\uff0c\u5c31\u4e00\u5b9a\u8981\u5403$u$\u3002\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u8f6c\u5316\u5230\u201c\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u201d\u7684\u6a21\u578b\u4e0a\u6765\u3002\n\n\u4f46\u662f\u8fd8\u5dee\u4e00\u70b9\u3002\u770b\u6837\u4f8b\u5c31\u77e5\u9053\uff0c\u53ef\u80fd\u51fa\u73b0\u201c\u4e92\u76f8\u4fdd\u62a4\u201d\u7684\u60c5\u51b5\uff0c\u5373\u8fd9\u4e9b\u70b9\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u80fd\u5403\u3002\u800c\u5728\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u5efa\u56fe\u65b9\u5f0f\u4e2d\uff0c\u5df2\u7ecf\u5047\u8bbe\u6b63\u6743\u70b9\u9009\u4e86\uff0c\u8fd9\u6837\u5982\u679c\u6709\u4e00\u4e2a\u6b63\u6743\u70b9\u88ab\u201c\u4e92\u76f8\u4fdd\u62a4\u201d\uff0c\u4e0d\u80fd\u9009\u5b83\uff0c\u548c\u6211\u4eec\u7684\u5efa\u56fe\u77db\u76fe\u4e86\u3002\u4e0b\u9762\u6709\u4e24\u79cd\u601d\u8003\u65b9\u6cd5\n1. \u5728\u5efa\u56fe\u4e4b\u524d\u628a\u4e0d\u80fd\u5403\u7684\u70b9\u5220\u53bb\n2. \u5728\u5efa\u5b8c\u56fe\u540e\uff0c\u8fd9\u4e9b\u4e0d\u80fd\u9009\u7684\u6b63\u6743\u70b9\u4e00\u5b9a\u8981\u5272\u6389\uff0c\u4e0d\u80fd\u9009\u7684\u8d1f\u6743\u70b9\u4e00\u5b9a\u4e0d\u80fd\u5272\u6389\u3002\n\n\u5728\u5206\u6790\u8fd9\u4e24\u79cd\u65b9\u6cd5\u4e4b\u524d\uff0c\u5148\u770b\u770b\u201c\u4e92\u76f8\u4fdd\u62a4\u201d\u662f\u4ec0\u4e48\u60c5\u51b5\uff1a\u5982\u679cu\u4e0d\u80fd\u9009\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u88abv\u4fdd\u62a4\uff0cv\u4e00\u5b9a\u88ab\u53e6\u5916\u4e00\u4e2a\u70b9\u4fdd\u62a4\u2026\u2026\u8fd9\u6837\u4e00\u6765\u5982\u679c\u90fd\u88ab\u4fdd\u62a4\u4e86\uff0c\u5c31\u4e0d\u80fd\u9009\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u4fdd\u62a4\u5173\u7cfb\u6784\u6210\u4e86\u4e00\u4e2a\u73af\uff0c\u73af\u4e2d\u7684\u70b9\u90fd\u4e0d\u80fd\u9009\u3002\n\n\u5148\u770b\u770b\u5220\u53bb\u3002\u53ea\u8981\u627e\u5230\u6240\u6709\u73af\u4e0a\u7684\u7684\u6240\u6709\u70b9\uff0c\u7136\u540e\u5728\u5efa\u56fe\u7684\u65f6\u5019\u4e0d\u8003\u8651\u8fd9\u4e9b\u70b9\u5373\u53ef\u3002\u8fd9\u6837\u505a\u7684\u8bdd\u8981\u5efa\u4e24\u5f20\u56fe\uff0c\u7b2c\u4e00\u5f20\u627e\u73af\uff0c\u7b2c\u4e8c\u5f20\u5efa\u56fe\u3002\n\n\u518d\u6765\u770b\u770b\u5272\u6389\u548c\u4e0d\u5272\u6389\u3002\u600e\u4e48\u6837\u624d\u80fd\u628a\u4e00\u4e2a\u6b63\u6743\u70b9\u5272\u6389\u5462\uff1f\u6839\u636e\u6700\u5c0f\u5272\u7684\u6027\u8d28\uff0c\u5272\u6389\u4e00\u4e2a\u8fb9\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u662f\u67d0\u4e00\u6761s-t\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9(\u8fd9\u91cc\u53ea\u8003\u8651\u4e00\u6761\u8def\u5f84)\u3002\u90a3\u4e48\u6211\u53ea\u8981\u8ba9\u4ed6\u6210\u4e3a\u4e00\u6761s-t\u7684\u8def\u5f84\u4e0a\u6700\u5c0f\u7684\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u5f88\u597d\u529e\uff0c\u8fd9\u4e2a\u70b9\u5411t\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$\u221e$\u7684\u8fb9\u5373\u53ef\u3002\u90a3\u600e\u4e48\u6837\u624d\u80fd\u4e0d\u628a\u4e00\u4e2a\u8d1f\u6743\u70b9\u5272\u6389\u5462\uff1f\u8fd8\u662f\u6839\u636e\u6700\u5c0f\u5272\u7684\u6027\u8d28\uff0c\u4e00\u6761\u8fb9\u4e0d\u5272\u6389\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4e0d\u662f\u4e00\u6761s-t\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9(\u8fd8\u662f\u53ea\u8003\u8651\u4e00\u6761\u8def\u5f84)\u3002\u8fd9\u4e5f\u597d\u529e\uff0c\u628a\u8fd9\u6761\u8fb9\u7684\u5bb9\u91cf\u6539\u4e3a$\u221e$\u5c31\u884c\u4e86\u3002\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u5bb9\u91cf\uff0c\u4e5f\u53ef\u4ee5\u8fde\u4e00\u6761\u8fb9\u5230t\uff0c\u5bb9\u91cf\u4e3a$\u221e$\u3002\u7528\u540e\u4e00\u79cd\u65b9\u6cd5\u7684\u8bdd\u53ef\u4ee5\u548c\u6b63\u6743\u70b9\u7684\u64cd\u4f5c\u7edf\u4e00\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u53ea\u8981\u4e00\u4e2a\u70b9\u4e0d\u80fd\u88ab\u5403\uff0c\u5c31\u628a\u4ed6\u8fde\u4e00\u6761\u5230t\u7684\u8fb9\uff0c\u5bb9\u91cf\u4e3a$\u221e$\u3002\u8fd9\u6837\u505a\u6211\u4eec\u53ea\u8981\u5728\u7f51\u7edc\u4e0a\u627e\u73af\uff0c\u627e\u5230\u5c31\u4fee\u6539\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7531\u4e8e\u7b2c\u4e8c\u79cd\u53ea\u7528\u5efa\u4e00\u5f20\u56fe\uff0c\u6240\u4ee5\u8fd9\u91cc\u7528\u7684\u662f\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u3002\n\n# \u505a\u6cd5\u603b\u7ed3\n\n\u5148\u5efa\u56fe\uff0c\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u5efa\u56fe\u65b9\u6cd5\u3002\u7136\u540e\u5728\u56fe\u4e0a\u8dd1Tarjan\u627e\u73af\uff0c\u628a\u73af\u4e2d\u7684\u6240\u6709\u70b9\u8fde\u4e00\u6761\u5411t\u7684$\u221e$\u8fb9\u3002\u6700\u540e\u8dd1\u6700\u5927\u6d41\u3002\n\n\u6ce8\u610f\u5728\u7f51\u7edc\u4e2d\uff0c\u8fb9\u662f\u6709\u53cd\u5411\u8fb9\u7684\uff0c\u8dd1Tarjan\u65f6\u8981\u7528\u6b63\u5411\u8fb9\uff0c\u5373\u4e0b\u6807\u4e3a\u5076\u6570\u7684\u8fb9\u3002\u8fd8\u8981\u6ce8\u610fTarjan\u6c42\u7684\u662fscc\uff0cscc\u4e2d\u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u4e0d\u662f\u73af\u3002\n\n# \u65b9\u6cd5\u6316\u6398\n1. \u8f6c\u5316\u6210\u7f51\u7edc\u6d41\u6a21\u578b\n2. \u4e00\u70b9\u4e00\u70b9\u5206\u6790\uff0c\u603b\u4f1a\u5206\u6790\u51fa\u6765\u7684(\u6bcf\u6b21\u5199\u603b\u7ed3\u65f6\u5206\u6790\u90fd\u6bd4\u505a\u9898\u65f6\u597d\u5f97\u591a\u5f97\u591a\u7684\u591a\u5f97\u591a\uff0c\u5982\u679c\u5199\u9898\u65f6\u4e5f\u53ef\u4ee5\u505a\u5230\u8fd9\u4e48\u5206\u6790\u5c31\u597d\u4e86T_T)\n\n# \u4ee3\u7801\u5b9e\u73b0\n```\n#include <bits/stdc++.h>\n#define VI vector<int>\n#define ALL(x) x.begin(), x.end()\n#define PB push_back\n#define PII pair<int, int>\n#define ST first\n#define ND second\n#define MP make_pair\n#define LL long long\n#define LD long double\n#define FOR(i, n, m) for (int i = n; i <= m; i++)\n#define FORN(i, n, m) for (int i = n; i >= m; i--)\n#define MEM(x, y) memset(x, y, sizeof(x))\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\nconst int P = 1e9+7;\nconst int maxn = 610;\nconst int maxm = 4e5+10;\n\nint n, m, s, t, sum = 0;\n\nint read() {\n\tint ans = 0, neg = 1;\n\tchar c = getchar();\n\twhile (!isdigit(c) && c != '-') \n\t\tc = getchar();\n\tif (c == '-') {\n\t\tneg = -1;\n\t\tc = getchar();\n\t}\n\twhile (isdigit(c)) {\n\t\tans = ans * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\treturn ans * neg;\n}\n\nstruct Edge {\n\tint to, next, flow, cap;\n} edges[maxm];\nint first[maxn], mm = 0;\n\nvoid AddEdge(int u, int v, int cap) {\n\tedges[mm] = Edge{v, first[u], 0, cap};\n\tfirst[u] = mm++;\n}\n\nvoid AddNet(int u, int v, int cap) {\n\tAddEdge(u, v, cap);\n\tAddEdge(v, u, 0);\n}\n\nvoid Init() {\n\tMEM(first, -1);\n\ts = 0, t = n*m+1;\n}\n\nint id(int r, int c) {\n\treturn r * m + c + 1;\n}\n\nint dfn[maxn], low[maxn], ind = 0, ins[maxn];\nstack<int> stk;\nvoid Tarjan(int u) {\n\tdfn[u] = low[u] = ++ind;\n\tstk.push(u), ins[u] = 1;\n\tfor (int i = first[u]; ~i; i = edges[i].next) if (!(i&1)) {\n\t\tEdge &e = edges[i];\n\t\tif (!dfn[e.to]) {\n\t\t\tTarjan(e.to);\n\t\t\tlow[u] = min(low[u], low[e.to]);\n\t\t}\n\t\telse if (ins[e.to])\n\t\t\tlow[u] = min(low[u], low[e.to]);\n\t}\n\tif (low[u] == dfn[u]) {\n\t\tif (stk.top() != u) {\n\t\t\tAddNet(u, t, INF);\n\t\t\twhile (!stk.empty() && stk.top() != u) {\n\t\t\t\tint v = stk.top();\n\t\t\t\tstk.pop(), ins[v] = 0;\n\t\t\t\tAddNet(v, t, INF);\n\t\t\t}\n\t\t}\n\t\tstk.pop();\n\t\tins[u] = 0;\n\t}\n}\n\nint d[maxn];\nbool bfs() {\n\tqueue<int> Q;\n\tMEM(d, INF);\n\td[s] = 0;\n\tQ.push(s);\n\twhile (!Q.empty()) {\n\t\tint u = Q.front();\n\t\tQ.pop();\n\t\tfor (int i = first[u]; ~i; i = edges[i].next) {\n\t\t\tEdge &e = edges[i];\n\t\t\tif (d[e.to] >= INF && e.cap > e.flow) {\n\t\t\t\td[e.to] = d[u] + 1;\n\t\t\t\tQ.push(e.to);\n\t\t\t}\n\t\t}\n\t}\n\treturn d[t] < INF;\n}\n\nint cur[maxn];\nint dfs(int u, int a) {\n\tif (u == t || 0 == a)\n\t\treturn a;\n\tint f = 0, flow = 0;\n\tfor (int &i = cur[u]; ~i; i = edges[i].next) {\n\t\tEdge &e = edges[i];\n\t\tif (d[e.to] == d[u] + 1) {\n\t\t\tf = dfs(e.to, min(a, e.cap - e.flow));\n\t\t\tif (f > 0) {\n\t\t\t\te.flow += f;\n\t\t\t\tedges[i^1].flow -= f;\n\t\t\t\ta -= f;\n\t\t\t\tflow += f;\n\t\t\t\tif (a <= 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (a)\n\t\td[u] = -1;\n\treturn flow;\n}\n\nint Dinic() {\n\tint flow = 0;\n\twhile (bfs()) {\n\t\tFOR (i, s, t) cur[i] = first[i];\n\t\tflow += dfs(s, INF);\n\t}\n\treturn flow;\n}\n\nint main() {\n\tn = read(), m = read();\n\tInit();\n\tFOR (i, 0, n-1) FOR (j, 0, m-1) {\n\t\tint w = read(), p = read();\n\t\tif (w >= 0) {\n\t\t\tAddNet(s, id(i, j), w);\n\t\t\tsum += w;\n\t\t}\n\t\telse \n\t\t\tAddNet(id(i, j), t, -w);\n\t\tFOR (k, 1, p) {\n\t\t\tint r = read(), c = read();\n\t\t\tAddNet(id(r, c), id(i, j), INF);\n\t\t}\n\t\tif (j < m-1) \n\t\t\tAddNet(id(i, j), id(i, j+1), INF);\n\t}\n\tTarjan(s);\n\tprintf(\"%d\", sum - Dinic());\n\treturn 0;\n}\n```",
        "postTime": 1549437817,
        "uid": 101901,
        "name": "Wings",
        "ccfLevel": 0,
        "title": "\u65b9\u6cd5\u6316\u6398\u2014\u2014P2805 [NOI2009]\u690d\u7269\u5927\u6218\u50f5\u5c38"
    },
    {
        "content": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**\u5206\u6790\u4e0e\u9898\u89e3\uff1a**\u8fd9\u9053\u9898\u76ee\u662f\u4e00\u9053\u7ecf\u5178\u7684\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u690d\u7269\u6211\u4eec\u9996\u5148\u60f3\u5230\u5e94\u8be5\u662f\u5411\u4e0a\u4e00\u9053\u9898\u4e00\u6837\uff0c\u6b63\u8fde$S$\uff0c\u8d1f\u8fde$T$\uff0c\u690d\u7269\u4e4b\u95f4\u4e92\u76f8\u8fde\u3002\u73b0\u5728\u8ba8\u8bba\u4e00\u4e0b\u690d\u7269\u4e4b\u95f4\u8fde\u8fb9\u7684\u60c5\u51b5\u3002\u5bf9\u4e8e\u4e24\u4e2a\u690d\u7269$x$\u548c$y$\uff0c\u5982\u679c$x$\u4fdd\u62a4$y$\uff0c\u5219\u5728\u5403\u6389$y$\u4e4b\u524d\u4e00\u5b9a\u8981\u5403\u6389$x$\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u4ece$y$\u5411$x$\u8fde\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u4e3a$inf$\u3002\u9898\u4e2d\u8bf4\u4e86\uff0c\u50f5\u5c38\u53ea\u80fd\u4ece\u53f3\u4fa7\u8fdb\u5165\uff0c\u5e76\u4e14\u5403\u80fd\u6a2a\u7740\u8d70\uff0c\u6240\u4ee5\u8fd9\u76f8\u5f53\u4e8e\u8981\u5403\u6389\u5f53\u524d\u7684\u690d\u7269\uff0c\u5c31\u5fc5\u987b\u8981\u5403\u6389\u5f53\u524d\u690d\u7269\u53f3\u9762\u7684\u690d\u7269\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u5c06\u5f53\u524d\u690d\u7269\u5411\u4ed6\u53f3\u9762\u7684\u690d\u7269\u8fde\u4e0a\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u4e3a$inf$\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u5efa\u5b8c\u7684\u56fe\u4e0a\u8dd1\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4f46\u662f\u8fd9\u6837\u5efa\u56fe\u6709\u95ee\u9898\uff0c\u73b0\u5728\u6709\u4e00\u79cd\u60c5\u51b5\uff1a$x$\u690d\u7269\u4fdd\u62a4$y$\u690d\u7269\uff0c\u5e76\u4e14$y$\u690d\u7269\u8fd8\u4fdd\u62a4$x$\u690d\u7269\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c$x$\u548c$y$\u90fd\u662f\u4e0d\u80fd\u88ab\u5403\u6389\u7684\uff0c\u5e76\u4e14\u4ed6\u4eec\u4fdd\u62a4\u7684\u6240\u6709\u690d\u7269\u90fd\u4e0d\u80fd\u88ab\u5403\u6389\u3002\u4f46\u662f\u5728\u6211\u4eec\u4e0a\u8ff0\u7684\u5efa\u56fe\u4e2d\uff0c\u8fd9\u79cd\u60c5\u51b5\u662f\u4e0d\u80fd\u5224\u65ad\u51fa\u6765\u7684\uff0c\u8fd9\u4e2a\u73af\u548c\u4e4b\u540e\u7684\u70b9\u662f\u80fd\u591f\u88ab\u5403\u6389\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u66f4\u6539\u4e00\u4e0b\u5efa\u56fe\u3002\u6211\u4eec\u5728\u5efa\u56fe\u4e4b\u524d\u5e94\u8be5\u5148\u5224\u65ad\u8fd9\u4e2a\u70b9\u662f\u5426\u6709\u8d44\u683c\u88ab\u5403\u6389\u3002\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5bf9\u4e8e$x$\u4fdd\u62a4$y$\uff0c\u6211\u4eec\u4ece$x$\u5411$y$\u8fde\u4e00\u6761\u6709\u5411\u8fb9\u3002\u5728\u8fde\u5b8c\u6240\u6709\u7684\u8fb9\u4e4b\u540e\uff0c\u8dd1\u62d3\u6251\u5e8f\uff0c\u82e5\u5f53\u524d\u70b9\u80fd\u8fdb\u5165\u5230\u961f\u5217\u91cc\uff0c\u8fd9\u4e2a\u70b9\u624d\u80fd\u88ab\u5efa\u5230\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u5168\u56fe\u4e2d\uff0c\u53cd\u4e4b\u5219\u4e0d\u80fd\u3002\u8fd9\u6837\u66f4\u6539\u540e\u7684\u56fe\u624d\u662f\u4e00\u4e2a\u53ef\u4ee5\u8fd0\u7528\u7684\u56fe\u3002\n\n```c++\n// luogu-judger-enable-o2\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define N 1010\n#define inf 1000000000\nint n,m,s,t,idx,num[N],belong[N],have[N][N],dis[N],ans;\nint cur[N],head[N],to[N*N],nxt[N*N],val[N*N],in[N];bool is[N];\nint pla(int a,int b) {return (a-1)*m+b;}\nvoid add(int a,int b,int c)\n    {nxt[++idx]=head[a],to[idx]=b,val[idx]=c,head[a]=idx;}\nvoid build()\n{\n    queue <int> q;\n    for(int i=1;i<=n*m;i++) for(int j=1;j<=belong[i];j++)\n        add(i,have[i][j],0),in[have[i][j]]++;\n    for(int i=1;i<=n*m;i++) if(!in[i]) q.push(i),is[i]=true;\n    while(!q.empty())\n    {\n        int p=q.front();q.pop();\n        for(int i=head[p];i;i=nxt[i])\n            {in[to[i]]--; if(!in[to[i]]) q.push(to[i]),is[to[i]]=true;}\n    } idx=1;\n    memset(head,0,sizeof head),memset(to,0,sizeof to);\n    memset(nxt,0,sizeof nxt),memset(val,0,sizeof val);\n}\nvoid init()\n{\n    for(int i=1;i<=n*m;i++)\n    {\n        if(!is[i]) continue;\n        if(num[i]<0) add(i,t,-num[i]),add(t,i,0);\n        else add(s,i,num[i]),add(i,s,0),ans+=num[i];\n    }\n    for(int i=1;i<=n*m;i++)\n    {\n        if(!is[i]) continue;\n        for(int j=1;j<=belong[i];j++)\n            if(is[have[i][j]]) add(i,have[i][j],0),add(have[i][j],i,inf);\n    }\n}\nbool bfs()\n{\n    memset(dis,-1,sizeof dis);\n    queue <int> q; q.push(s),dis[s]=0;\n    while(!q.empty())\n    {\n        int p=q.front();q.pop();\n        if(p==t) return true;\n        for(int i=head[p];i;i=nxt[i])\n            if(val[i]>0&&dis[to[i]]==-1)\n                dis[to[i]]=dis[p]+1,q.push(to[i]);\n    } return false;\n}\nint dfs(int p,int flow)\n{\n    int now,temp=flow;\n    if(p==t) return flow;\n    for(int i=cur[p];i;i=nxt[i])\n        if(val[i]>0&&dis[to[i]]==dis[p]+1)\n        {\n            now=dfs(to[i],min(val[i],temp));\n            if(!now) dis[to[i]]=-1;\n            temp-=now,val[i]-=now,val[i^1]+=now;\n            if(val[i]) cur[p]=i;\n            if(!temp) break;\n        } return flow-temp;\n}\nvoid dinic() {while(bfs()) memcpy(cur,head,sizeof cur),ans-=dfs(s,inf);}\nint main()\n{\n    scanf(\"%d%d\",&n,&m),s=n*m+1,t=n*m+2;\n    for(int i=1;i<=n;i++) for(int j=1;j<=m;j++)\n    {\n        scanf(\"%d%d\",&num[pla(i,j)],&belong[pla(i,j)]);\n        for(int k=1,a,b;k<=belong[pla(i,j)];k++)\n            scanf(\"%d%d\",&a,&b),have[pla(i,j)][k]=pla(a+1,b+1);\n        if(j>1) have[pla(i,j)][++belong[pla(i,j)]]=pla(i,j-1);\n    } build(),init(),dinic(),printf(\"%d\\n\",max(ans,0));\n}\n```",
        "postTime": 1545619063,
        "uid": 52851,
        "name": "ysy20021208",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2805 \u3010[NOI2009]\u690d\u7269\u5927\u6218\u50f5\u5c38\u3011"
    },
    {
        "content": "## \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\n\n\u9996\u5148\u690d\u7269\u4e4b\u95f4\u662f\u6709\u4fdd\u62a4\u5173\u7cfb\u7684\uff0c\u6211\u4eec\u8981\u5148\u628a\u54ea\u4e9b\u690d\u7269\u80fd\u88ab\u5403\u627e\u51fa\u6765\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6bcf\u4e00\u5217\u7684\u690d\u7269\u4f1a\u4fdd\u62a4\u5de6\u8fb9\u4e00\u5217\u7684\u690d\u7269\uff0c\u518d\u52a0\u4e0a\u9898\u76ee\u8f93\u5165\u7684\u4fdd\u62a4\u5173\u7cfb\u3002\u5982\u679c\u690d\u7269 $A$ \u4fdd\u62a4\u690d\u7269 $B$ \uff0c\u5c31\u4ee3\u8868\u5fc5\u987b\u5148\u5403\u6389 $A$ \u518d\u5403 $B$ \uff0c\u5c31\u8ba9 $A$ \u5411 $B$ \u8fde\u4e00\u6761\u8fb9\u3002\n\n\u7136\u540e\u4fdd\u62a4\u662f\u80fd\u6210\u73af\u7684\uff0c\u6240\u4ee5\u6709\u4e9b\u690d\u7269\u662f\u65e0\u654c\u7684\u3002\u73b0\u7528 $Tarjan$ \u7f29\u4e00\u4e0b\u73af\uff0c\u5982\u679c\u5f3a\u8054\u901a\u5206\u91cf\u7684 $size>1$ \u90a3\u4e48\u8fd9\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u91cc\u7684\u70b9\u90fd\u662f\u65e0\u654c\u7684\uff0c\u8fd9\u4e9b\u70b9\u80fd\u5230\u8fbe\u7684\u6240\u6709\u70b9\u4e5f\u662f\u65e0\u654c\u7684\uff0c $bfs$ \u4e00\u4e0b\u5373\u53ef\u3002 \n\n\u7136\u540e\u5c31\u662f\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6a21\u677f\u4e86\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u8981\u9009\uff0c\u90a3\u4e48\u4fdd\u62a4\u4ed6\u7684\u70b9\u5fc5\u987b\u9009\u3002\u76f4\u63a5\u7f51\u7edc\u6d41\u5373\u53ef\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define s 601\n#define t 602\n#define N 605\n#define pb push_back\n#define num(i,j) ((i-1)*m+j)\n#define INF 1<<29\nusing namespace std;\n\ninline void rd(int &X){\n    X=0;int w=0;char ch=0;\n    while(!isdigit(ch))w|=ch=='-',ch=getchar();\n    while(isdigit(ch))X=(X<<3)+(X<<1)+(ch^48),ch=getchar();\n    X=w?-X:X;\n}\n\nqueue<int> q;\nvector<int> g[N];\nint n,m,ans,f,k,tot;\nstruct nd{int nxt,to,v;}e[500000];\nint dfn[N],low[N],stk[N],top,ok[N];\nint head[N],cnt=1,d[N],val[N],in[N];\n#define For(x) for(int y,i=head[x];(y=e[i].to);i=e[i].nxt)\n\nvoid add(int x,int y,int w){\n    e[++cnt]=(nd){head[x],y,w};head[x]=cnt;\n    e[++cnt]=(nd){head[y],x,0};head[y]=cnt;\n}\nbool bfs()\n{\n    queue<int> q; q.push(s);\n    memset(d,0,sizeof d); d[s]=1;\n    while(!q.empty()){\n        int x=q.front();q.pop();\n        For(x) if(e[i].v&&!d[y]){\n            q.push(y); d[y]=d[x]+1;\n            if(y==t) return 1;\n        }\n    } return 0;\n}\n\nint dinic(int x,int flow)\n{\n    if(x==t) return flow; int re=flow;\n    for(int y,i=head[x];(y=e[i].to)&&re;i=e[i].nxt)\n        if(e[i].v&&d[y]==d[x]+1)\n        {\n            k=dinic(y,min(re,e[i].v));\n            if(!k) d[y]=0;\n            e[i].v-=k;e[i^1].v+=k;re-=k; \n        }\n    return flow-re;\n}\nvoid tarjan(int x)\n{\n\tlow[x]=dfn[x]=++tot;\n\tstk[++top]=x;in[x]=1;\n\tfor(int y:g[x]) \n\t\tif(!dfn[y]) tarjan(y),low[x]=min(low[x],low[y]);\n\t\telse if(in[y]) low[x]=min(low[x],dfn[y]);\n\tif(low[x]==dfn[x]){\n\t\tint y,now=top,num=0;\n\t\tdo{\n\t\t\ty=stk[top--];num++;in[y]=0;\n\t\t}while(x!=y);\n\t\tif(num==1) return ;\n\t\tfor(int i=top+1;i<=now;i++)\n\t\t\tok[stk[i]]=1,q.push(stk[i]);\n\t}\n\t\t\n}\nvoid build()\n{\n\trd(n);rd(m);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=2;j<=m;j++)\n\t\t\tg[num(i,j)].pb(num(i,j-1));\n\tn*=m;\n\tfor(int x,y,l,i=1;i<=n;i++){\n\t\trd(val[i]);rd(l);\n\t\twhile(l--) rd(x),rd(y),x++,y++,g[i].pb(num(x,y));\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(!dfn[i]) tarjan(i);\n\twhile(!q.empty()){\n\t\tint x=q.front();q.pop();\n\t\tfor(int y:g[x]) if(!ok[y])\n\t\t\tok[y]=1,q.push(y);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(!ok[i]) {\n\t\t\tif(val[i]>0) add(s,i,val[i]),ans+=val[i];\n\t\t\tif(val[i]<0) add(i,t,-val[i]);\n\t\t}\n\tfor(int x=1;x<=n;x++) if(!ok[x])\n\t\tfor(int y:g[x]) if(!ok[y])\n\t\t\tadd(y,x,INF);\n\t\t\t\n}\nint main()\n{\n    build();\n    while(bfs())\n        while(f=dinic(s,INF))\n            ans-=f;\n    cout<<ans;\n}\n```",
        "postTime": 1544963438,
        "uid": 56659,
        "name": "AubRain",
        "ccfLevel": 0,
        "title": "[NOI2009]\u690d\u7269\u5927\u6218\u50f5\u5c38\u2014\u2014\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe"
    },
    {
        "content": "\u5206\u6790\uff1a\n\n\u5f88\u5bb9\u6613\u60f3\u5230\u628a\u9898\u76ee\u8f6c\u5316\u4e3a\u56fe\u8bba\u6a21\u578b\uff1a\n\n\u9996\u5148\u628a\u539fn*m\u7684\u7f51\u683c\u7684\u6bcf\u4e00\u4e2a\u683c\u5b50\u90fd\u62bd\u8c61\u6210\u70b9\n\n\u6bcf\u4e2a\u70b9\u6709\u70b9\u6743\uff0c\u88ab\u4fdd\u62a4\u7684\u70b9\u5411\u4fdd\u62a4\u5b83\u7684\u70b9\u8fde\u8fb9(\u6709\u70b9\u50cf\u98df\u7269\u94fe)\n\n(\u6ce8\u610f\uff1a(i,j)\u662f\u8981\u5411(i,j+1)\u8fde\u8fb9\u7684)\n\n\u7136\u540e\u6211\u4eec\u8981\u4ece\u4e2d\u53d6\u4e00\u4e9b\u70b9\uff0c\u4f7f\u70b9\u6743\u548c\u6700\u5927\u3002\n\n\u6211\u4eec\u53d6\u70b9\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u4fdd\u8bc1\u5b50\u56fe\u4e2d\u6ca1\u6709\u5411\u5916\u8fde\u7684\u8fb9\u3002\n\n\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\uff0c\u53d6\u5230\u8fd9\u4e9b\u70b9\u7684\u65f6\u5019\uff0c\u4fdd\u62a4\u5b83\u4eec\u7684\u70b9\u90fd\u5df2\u7ecf\u88ab\u6d88\u706d\u3002\n\n\u8fd9\u5c31\u662f\u5178\u578b\u7684\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u95ee\u9898\u3002\n\n\u6211\u4eec\u7528\u7f51\u7edc\u6d41\u6700\u5c0f\u5272\u89e3\u51b3\u5b83\u3002\n\n\u5efa\u7acbS\u548cT\uff0cS\u5411\u56fe\u4e2d\u6240\u6709\u70b9\u6743\u4e3a\u975e\u8d1f\u7684\u70b9\u8fde\u5bb9\u91cf\u4e3a\u70b9\u6743\u7684\u8fb9\u3002\n\n\u56fe\u4e2d\u6240\u6709\u70b9\u6743\u4e3a\u8d1f\u7684\u70b9\u5411T\u8fde\u5bb9\u91cf\u4e3a\u70b9\u6743\u7684\u76f8\u53cd\u6570\u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u56fe\u4e2d\u539f\u6709\u7684\u8fb9\uff0c\u5728\u7f51\u7edc\u6d41\u7684\u56fe\u4e2d\u4e5f\u8fde\u76f8\u540c\u7684\u7684\u8fb9\uff0c\u5bb9\u91cf\u4e3ainf\u3002\n\n\u8fd9\u6837\u8dd1\u6700\u5c0f\u5272\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5272\u6389S\u8fde\u51fa\u7684\u8fb9\u5c31\u8868\u793a\u4e0d\u53d6\u8fd9\u4e2a\u70b9\uff0c\n\n\u5272\u6389\u8fde\u5411T\u7684\u8fb9\u5c31\u8868\u793a\u53d6\u8fd9\u4e2a\u70b9\uff0c\u5176\u4ed6\u8fb9\u56e0\u4e3a\u5bb9\u91cf\u4e3ainf\uff0c\u4e0d\u53ef\u80fd\u88ab\u5272\u6389\u3002\n\n\u6240\u4ee5\u6700\u540e\u6240\u6709\u70b9\u6743\u4e3a\u6b63\u7684\u70b9\u7684\u70b9\u6743\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4f46\u662f\u6ce8\u610f\u5230\u4e00\u4e2a\u95ee\u9898\uff1a\u539f\u56fe\u4e2d\u53ef\u80fd\u4f1a\u6709\u73af\uff0c\u6709\u73af\u610f\u5473\u7740\u8fd9\u4e9b\u70b9\u548c\u4ed6\u4eec\u4fdd\u62a4\u7684\u70b9\u90fd\u4e0d\u80fd\u53d6\u3002\n\n\u8fd9\u4f1a\u5bfc\u81f4\u6211\u4eec\u539f\u6765\u5efa\u7acb\u7684\u6a21\u578b\u51fa\u9519\uff0c\u600e\u4e48\u89e3\u51b3\u5462\uff1f\n\n\u6211\u4eec\u5148\u8dd1\u4e00\u8fb9tarjan\uff0c\u628a\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u6c42\u51fa\u6765\uff0c\n\n\u7531\u4e8e\u9898\u76ee\u4fdd\u8bc1\u6ca1\u6709\u81ea\u73af\uff0c\u6211\u4eec\u628a\u6240\u6709\u70b9\u6570\u5927\u4e8e1\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u70b9\u6743\u4e3a-inf\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u53d6\u4e0d\u5230\u8fd9\u4e9b\u70b9\u548c\u5b83\u4eec\u4fdd\u62a4\u7684\u70b9\u4e86\u3002\n\n\u81f3\u6b64\uff0c\u95ee\u9898\u5706\u6ee1\u89e3\u51b3\u3002\n\n\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n\nusing namespace std;\n\nconst int inf=1e9;\n\nint dfn[1001],low[1001],cur[1001],d[1001],gap[1001],e1=0,queue[1001][2],bb[1001][1001];\nint to[400001],w[400001],next[400001],first[1001],b[1001],n,m,S,T,sum=0,a1[1001][1001];\nint stack[1001],head,times=0,a[1001][1001],kuai[1001],whkuai[1001],kuais=0,b1[601];\nbool v[400001],f[400001];\n\nvoid insert(int o,int p,int q)\n{\n    to[e1]=p;w[e1]=q;next[e1]=first[o];first[o]=e1++;\n    to[e1]=o;w[e1]=0;next[e1]=first[p];first[p]=e1++;\n}\n\nvoid bfs()\n{\n    head=1;queue[1][0]=T;queue[1][1]=0;\n    d[T]=0;gap[0]=1;e1=1;\n    while(head<=e1)\n    {\n        for(int i=first[queue[head][0]];i!=-1;i=next[i])\n            if((!d[to[i]])&&(to[i]!=T))\n            {\n                e1++;\n                queue[e1][0]=to[i];\n                queue[e1][1]=queue[head][1]+1;\n                d[to[i]]=queue[e1][1];\n                gap[d[to[i]]]++;\n            }\n        head++;\n    }\n}\n\nvoid print(int o)\n{\n    kuais++;kuai[kuais]=0;\n    while(stack[head]!=o) \n    {\n        whkuai[stack[head]]=kuais;\n        f[stack[head]]=0;\n        kuai[kuais]++;\n        head--;\n    }\n    whkuai[stack[head]]=kuais;\n    f[stack[head]]=0;\n    kuai[kuais]++;\n    head--;\n}\n\nvoid tarjan(int o)\n{\n    times++;f[o]=1;\n    dfn[o]=low[o]=times;\n    stack[++head]=o;\n    for(int i=1;i<=a[o][0];i++)\n        if(!v[a[o][i]])\n        {\n            v[a[o][i]]=true;\n            tarjan(a[o][i]);\n            low[o]=min(low[o],low[a[o][i]]);\n        }else\n        if(f[a[o][i]]) low[o]=min(low[o],dfn[a[o][i]]);\n    if(dfn[o]==low[o]) print(o);\n}\n\nint dfs(int o,int flow)\n{\n    if(o==T) return flow;\n    int res=flow,ff;\n    for(int i=cur[o];i!=-1;i=next[i])\n        if((w[i]>0)&&(d[o]==(d[to[i]]+1)))\n        {\n            cur[o]=i;\n            ff=dfs(to[i],min(res,w[i]));\n            w[i]-=ff;w[i^1]+=ff;\n            if(!(res-=ff)) return flow;\n        }\n    if(!(--gap[d[o]])) d[S]=T;\n    cur[o]=first[o];\n    ++gap[++d[o]];\n    return flow-res;\n}\n\nint isap()\n{\n    int res=0;\n    for(int i=0;i<=T;i++) cur[i]=first[i];\n    while(d[S]<T) res+=dfs(S,inf);\n    return res;\n}\n\nint main()\n{\n    memset(first,-1,sizeof(first));\n    memset(bb,0,sizeof(bb));\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n*m;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        b[i]=x;\n        for(int j=1;j<=y;j++)\n        {\n            int x1,y1,ok;\n            scanf(\"%d%d\",&x1,&y1);\n            ok=x1*m+y1+1;\n            a[ok][++a[ok][0]]=i;\n            bb[ok][i]=true;\n        }\n    }\n    for(int i=1;i<=n*m;i++) if(i%m!=0) if(!bb[i][i+1]) a[i][++a[i][0]]=i+1;\n    memset(v,0,sizeof(v));\n    memset(f,0,sizeof(f));\n    for(int i=1;i<=n*m;i++) if(!v[i]) {v[i]=true;tarjan(i);}\n    memset(bb,0,sizeof(bb));\n    for(int i=1;i<=n*m;i++)\n    {\n        if(kuai[whkuai[i]]>1) b1[whkuai[i]]=-inf;else b1[whkuai[i]]=b[i];\n        for(int j=1;j<=a[i][0];j++)\n            if(!bb[whkuai[i]][whkuai[a[i][j]]])\n            {\n                a1[whkuai[i]][++a1[whkuai[i]][0]]=whkuai[a[i][j]];\n                bb[whkuai[i]][whkuai[a[i][j]]]=true;\n            }\n    }\n    S=kuais+1;T=S+1;\n    for(int i=1;i<=kuais;i++)\n    {\n        if(b1[i]>=0){sum+=b1[i];insert(S,i,b1[i]);}else insert(i,T,-b1[i]);\n        for(int j=1;j<=a1[i][0];j++) insert(i,a1[i][j],inf);\n    }\n    memset(d,0,sizeof(d));\n    memset(gap,0,sizeof(gap));\n    bfs();\n    cout<<sum-isap()<<endl;\n    return 0;\n}\n```",
        "postTime": 1527647052,
        "uid": 79044,
        "name": "\u7834\u58c1\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2805 \u3010[NOI2009]\u690d\u7269\u5927\u6218\u50f5\u5c38\u3011"
    }
]