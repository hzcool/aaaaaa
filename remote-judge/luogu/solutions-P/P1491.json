[
    {
        "content": "\u6b21\u77ed\u8def\u6a21\u7248\u9898\u3002\u9996\u5148\u627e\u51fa\u4e00\u6761\u6700\u77ed\u8def\uff0c\u4e4b\u540e\u4e00\u6b21\u53bb\u6389\u4e00\u6761\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u53bb\u6389\u4e00\u6761\u8fb9\u540e\u7684\u56fe\u90fd\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u5176\u4e2d\u6700\u5c0f\u7684\u7b54\u6848\u5c31\u662f\u6b21\u77ed\u8def\u3002\n\n\u4e3a\u4ec0\u4e48\u8981\u53bb\u6389\u6700\u77ed\u8def\u4e0a\u7684\u4e00\u6761\u8fb9\u5462\uff1f\u56e0\u4e3a\u6b21\u77ed\u8def\u548c\u6700\u77ed\u8def\u5fc5\u7136\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u4e0d\u662f\u5171\u6709\u7684\u3002\u4e3a\u4ec0\u4e48\u4e0d\u53bb\u6389\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u5462\uff1f\u56e0\u4e3a\u8fd9\u6837\u6700\u77ed\u8def\u662f\u6ca1\u6709\u53d8\u5316\u7684\u3002\n",
        "postTime": 1438084621,
        "uid": 4341,
        "name": "TsReaper",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011"
    },
    {
        "content": "**A*\u7b97\u6cd5**\n\n\u770b\u7740\u597d\u50cf\u6ca1\u6709A*\u7684\u9898\u89e3\n\n\u6211\u5c31\u6765~~\u6c34\u4e00\u6ce2~~\u53d1\u4e00\u7bc7\n\n\u7b2cK\u77ed\u8def\u6a21\u677f\n\u4f7f\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\uff0c\u6bcf\u6b21\u53d6f(x)+g(x)\u6700\u5c0f\u7684\u72b6\u6001\u8fdb\u884c\u62d3\u5c55\n\n\u5176\u4e2df(x)\u662f\u4ece\u8d77\u70b9\u5230\u5f53\u524d\u7684\u8ddd\u79bb\uff1b\n\ng(x)\u662f\u4f30\u4ef7\u51fd\u6570\uff0c\u662f\u4ece\u5f53\u524d\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\uff0c\u7b26\u5408\u4f30\u4ef7\u5c0f\u4e8e\u7b49\u4e8e\u5b9e\u9645\u503c\uff1b\n\n\u5f53\u7ec8\u70b9\u7b2ck\u6b21\u4ece\u961f\u4e2d\u88ab\u53d6\u51fa\uff0c\u5c31\u662fk\u77ed\u8def\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint head[40005],cnt;\nint n,m,tot;\ndouble x[205],y[205],dis[2052];\ndouble dist(double a,double b,double c,double d){return sqrt((a-c)*(a-c)+(b-d)*(b-d));}//\u8ba1\u7b97\u4e24\u70b9\u8ddd\u79bb\nstruct node\n{\n    int to,next;\n    double v;\n}edge[40005];\nvoid add(int x,int y,double w)\n{\n    cnt++;\n    edge[cnt].to=y;\n    edge[cnt].v=w;\n    edge[cnt].next=head[x];\n    head[x]=cnt;\n}//\u90bb\u63a5\u8868\nstruct nd\n{\n    double dist,g;\n    int id;\n    bool vis[205];\n    nd()\n    {\n        memset(vis,0,sizeof(vis));\n    }\n};//dist\u5c31\u662ff(x\uff09\uff0cg\u5c31\u662f\u4f30\u4ef7\uff0c\u8fd8\u8981\u5f00\u4e00\u4e2avis\u6570\u7ec4\u5224\u91cd\uff0c\u5426\u5219\u53ea\u670970\u5206\n\nbool in[205];\nint tot;\nqueue<int> qq;\npriority_queue<nd> q;\n\nbool operator<(nd x,nd y){ return x.dist+x.g>y.dist+y.g;}//\u4f18\u5148\u961f\u5217\u5927\u4e8e\u53f7\u662f\u5347\u5e8f\uff08\u548csort\u7684cmp\u51fd\u6570\u4e0d\u540c\uff09\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n        cin>>x[i]>>y[i]\uff1b \n    for(int i=1;i<=m;i++)\n    {\n        int u,v;\n        cin>>u>>v;\n        double di=dist(x[u],y[u],x[v],y[v]);\n        add(u,v,di);\n        add(v,u,di);\n    }\n     in[n]=1;\n    qq.push(n);\n    for(int i=1;i<=n;i++) dis[i]=1e9;\n    dis[n]=0;\n    while(!qq.empty())//\u5148\u4ee5\u7ec8\u70b9\u4e3a\u8d77\u70b9\uff0c\u8dd1\u4e00\u8fb9SPFA\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\uff0c\u5373\u4f30\u4ef7\n    {\n        int d=qq.front();\n        in[d]=0;\n        qq.pop();\n        for(int i=head[d];i>0;i=edge[i].next)\n        {\n            int t=edge[i].to;\n            if(dis[t]==dis[d]+edge[i].v&&t==1)\n            \ttot++;\n            if(dis[t]>dis[d]+edge[i].v)\n            {\n            \tif(t==1) tot=1;\n                dis[t]=dis[d]+edge[i].v;\n            \n                if(!in[t])\n                {\n                    qq.push(t);\n                    in[t]=1;\n                }\n            }\n        }\n    } //\u6a21\u677f\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\n    nd begin;\n    begin.dist=0;\n    begin.g=dis[1];\n    begin.id=1;//\u628a\u8d77\u59cb\u72b6\u6001\u5165\u961f\n    \n    q.push(begin);\n    tot=0;\n    while(!q.empty())\n    {\n    \tnd d=q.top();\n    \tq.pop();\n    \tif(d.id==n)\n         \ttot++\uff1b //tot\u8bb0\u5f55\u7ec8\u70b9\u51fa\u961f\u6b21\u6570\n    \tif(tot==2)//\u5982\u679c\u7b2c\u4e8c\u6b21\u51fa\u961f\uff0c\u5c31\u8f93\u51fa\u7b54\u6848\n    \t{\n    \t\tprintf(\"%.2lf\",d.dist);\n    \t\treturn 0;\n        }\n    \tint id=d.id;\n    \tnd next;//next\u5c31\u662f\u4e0b\u4e00\u4e2a\u72b6\u6001\n    \tfor(int i=head[id];i;i=edge[i].next)\n    \t{\n    \t\tint t=edge[i].to;\n    \t\tif(d.vis[t]) continue;//\u522b\u5fd8\u4e86\u5224\u91cd\n    \t\tnext=d;\n    \t\tnext.vis[t]=1;\n    \t\tnext.id=t;\n    \t\tnext.g=dis[t];\n    \t\tnext.dist=d.dist+edge[i].v;\n    \t\tq.push(next);\n        }\t\n    }\n    cout<<-1;\n    return 0;\n}\n\u6c42\u901a\u8fc7 (\u273a\u03c9\u273a)\n```",
        "postTime": 1517829176,
        "uid": 56659,
        "name": "AubRain",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011"
    },
    {
        "content": "# \u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011\n\n## \u4e3b\u8981\u601d\u60f3\uff1a\u6b21\u77ed\u8def\n\n### 1.\u4ec0\u4e48\u662f\u6b21\u77ed\u8def\uff1f\n\n\u987e\u540d\u601d\u4e49\uff0c\u6b21\u77ed\u8def\u5c31\u662f\u4ec5\u6b21\u4e8e\u56fe\u4e2d\u6700\u77ed\u8def\u7684\u6700\u77ed\u7684\u8def\u3002\n\n\u6216\u8005\u8bf4\uff0c\u7b2c\u4e8c\u77ed\u7684\u8def\u3002\n\n### 2.\u4f55\u4ee5\u89c1\u5f97\u662f\u6b21\u77ed\u8def\uff1f\n```\n\u73b0\u5728\u63d0\u51fa\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898\uff1a\n\u7ed9\u51fan\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u4e3a\u91ce\u732b\u7684\u51fa\u53d1\u4f4d\u7f6e\uff0c\n\u6700\u540e\u4e00\u4e2a\u4e3a\u5927\u5bb6\u7684\u96c6\u5408\u4f4d\u7f6e\uff0c\u5e76\u7ed9\u51fa\u54ea\u4e9b\u4f4d\u7f6e\u70b9\u662f\u76f8\u8fde\u7684\u3002\n\u91ce\u732b\u4ece\u51fa\u53d1\u70b9\u5230\u8fbe\u96c6\u5408\u70b9\uff0c\u603b\u4f1a\u6311\u4e00\u6761\u6700\u8fd1\u7684\u8def\u8d70\uff0c\n\u5982\u679c\u91ce\u732b\u6ca1\u627e\u5230\u6700\u8fd1\u7684\u8def\uff0c\u4ed6\u5c31\u4f1a\u8d70\u7b2c\u4e8c\u8fd1\u7684\u8def\u3002\n\u8bf7\u5e2e\u91ce\u732b\u6c42\u4e00\u4e0b\u8fd9\u6761\u7b2c\u4e8c\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\n```\n\u9898\u76ee\u5df2\u7ecf\u8bf4\u7684\u5f88\u660e\u663e\u4e86\uff0c\u7b2c\u4e8c\u6700\u77ed\u8def\u5f84\u3002\n\n### 3.\u5982\u4f55\u6c42\u6700\u77ed\u8def\uff1f\n\n\u6211\u4eec\u91c7\u7528\u5220\u8fb9\u7684\u601d\u60f3\uff0c\u5148\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u8bb0\u5f55\u8def\u5f84\u3002\n\n\u7136\u540e\u4f9d\u6b21\u5220\u53bb\u6700\u77ed\u8def\u5f84\u4e0a\u6bcf\u4e00\u6761\u8fb9\uff0c\u5206\u522b\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u53d6\u6240\u6709\u7b54\u6848\u4e2d\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n### 4.\u4e3a\u4ec0\u4e48\u662f\u6b63\u786e\u7684\uff1f\n\n\u5f15\u7528 @TsReaper \u7684\u8bdd\n\n>\u4e3a\u4ec0\u4e48\u8981\u53bb\u6389\u6700\u77ed\u8def\u4e0a\u7684\u4e00\u6761\u8fb9\u5462\uff1f\u56e0\u4e3a\u6b21\u77ed\u8def\u548c\u6700\u77ed\u8def\u5fc5\u7136\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u4e0d\u662f\u5171\u6709\u7684\u3002\n\n>\u4e3a\u4ec0\u4e48\u4e0d\u53bb\u6389\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u5462\uff1f\u56e0\u4e3a\u8fd9\u6837\u6700\u77ed\u8def\u662f\u6ca1\u6709\u53d8\u5316\u7684\u3002\n\n\u8bf4\u5b9e\u8bdd\uff0c\u5927\u4f6c\u5f52\u7eb3\u7684\u592a\u597d\u4e86\uff0c\u6211\u7a0d\u4f5c\u603b\u7ed3\u3002\n\n\u4f60\u4e0d\u53bb\u6389\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u6700\u77ed\u8def\u6ca1\u6709\u53d8\u5316\uff0c\u90a3\u4e48\u4f60\u518d\u8dd1\u6700\u77ed\u8def\uff0c\u7b54\u6848\u8fd8\u4f1a\u662f\u6700\u77ed\u8def\u7684\u957f\u5ea6\u3002\n\n\u4f60\u53ea\u6709\u53bb\u6389\u4e00\u6761\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u624d\u80fd\u4fdd\u8bc1\u4f60\u5f97\u5230\u7684\u65b0\u8def\u5f84\u4e00\u5b9a\u4e0d\u662f\u6700\u77ed\u8def\u5f84\u3002\n\n### 5.\u5982\u4f55\u5b9e\u73b0\u8bb0\u5f55\u8def\u5f84\n\n\u5728\u8dd1\u7b2c\u4e00\u904d\u6700\u77ed\u8def\u7684\u65f6\u5019\u8bb0\u5f55\u88ab\u66f4\u65b0\u7684\u70b9\u7684\u524d\u9a71\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53ea\u6709\u7b2c\u4e00\u6b21\u8dd1\uff0c\u624d\u8981\u8bb0\u5f55\u8def\u5f84\u3002\u8981\u4e0d\u7136\u540e\u9762\u6bcf\u8dd1\u4e00\u6b21\u90fd\u8bb0\u5f55\uff0c\u90a3\u5c31\u4e71\u5957\u4e86233\u3002\n\n### 6.\u5982\u4f55\u5b9e\u73b0\u5220\u8fb9\n\n\u96be\u9053\u6211\u4eec\u771f\u7684\u8981\u5728\u56fe\u91cc\u5220\u53bb\u4e00\u6761\u8fb9\u5417\uff1f\n\n\u7b54\u6848\u5f53\u7136\u662f\u4e0d\uff0c\u56e0\u4e3a\u90a3\u6837\u4e0d\u4ec5\u9ebb\u70e6\uff0c\u4e5f\u6ca1\u5fc5\u8981\u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u5728\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\uff0c\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u662f\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5728\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\uff0c\u53ea\u8981\u5f53\u524d\u8fb9\u76f8\u8fde\u7684\u662f\u8fd9\u4e24\u4e2a\u70b9\uff0c\u6211\u4eec\u76f4\u63a5\u5ffd\u7565\u5b83\uff0c\u5c31ok\u4e86\u3002\n\n#### \u90a3\u7b2c\u4e00\u904d\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u600e\u4e48\u529e\uff1f\n\n\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\n\n1. \u5199\u4e24\u79cd\u4e0d\u540c\u7684\u6700\u77ed\u8def\u51fd\u6570\uff1b\n\n2. \u7ed9\u7b2c\u4e00\u904d\u4f20\u53c2\u4e3a`(-1,-1)`\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u8fb9\u7edd\u5bf9\u4e0d\u4f1a\u6709\u7aef\u70b9\u4e3a`-1`\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u75280\u5927\u5bb6\u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\n\n~~\u6211\u9009\u62e9\u7b2c\u4e8c\u79cd~~\n\n### 7.\u5173\u4e8e\u9884\u5904\u7406\n\n\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u5982\u4f55\u8ba1\u7b97\uff1f\n\n\u6839\u636e\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u516c\u5f0f\uff0c\u5bf9\u4e8e\u5e73\u9762\u4e0a\u4e24\u70b9$(x1,y1)$\u548c$(x2,y2)$\uff0c\u5b83\u4eec\u7684\u8ddd\u79bb\u4e3a\n\n$$\\sqrt{(x1-x2)^2+(y1-y2)^2}$$\n\n\u8fd9\u4e5f\u53ef\u4ee5\u901a\u8fc7\u52fe\u80a1\u5b9a\u7406\u81ea\u884c\u63a8\u5bfc\n\n\u800c\u4e14\uff0c\u6ce8\u610f\u6570\u636e\u7c7b\u578b`double`.\n\n### 8.\u5173\u4e8e\u6700\u77ed\u8def\n\n\u672c\u9898\u6ca1\u6709\u8d1f\u8fb9\u6743\uff0c\u5efa\u8baeDijkstra+\u5806\u4f18\u5316\u3002\n\n~~\u5173\u4e8eSPFA\uff1a\u5b83\u6b7b\u4e86~~\n\n### 9.\u4ee3\u7801\u5b9e\u73b0\n\n\u8be6\u89c1\u6ce8\u91ca\n\n```cpp\n#include<queue>\n#include<cmath>\n#include<cstdio>\n#define INF 0x3f3f3f3f//\u6781\u5927\u503c\n#define pdi pair<double,int>//\u5b8f\u5b9a\u4e49\uff0c\u4e2a\u4eba\u4e60\u60ef\nusing namespace std;\nstruct Node\n{\n\tdouble x,y;//\u70b9\u5750\u6807 \n\tint head;\n\tdouble dis;\n\tint prev;//\u524d\u9a71 \n}node[205];\nstruct Edge\n{\n\tint next,to; \n\tdouble len;//\u6ce8\u610fdouble \n}edge[50005];\nint n,m,cnt;\ndouble ans=INF<<1;\ndouble calc(double a,double b,double c,double d)\n{\n\treturn (double)sqrt(double(a-c)*double(a-c)+double(b-d)*double(b-d));\n}\n//\u8ddd\u79bb\u516c\u5f0f\uff0c\u6ce8\u610f\u6570\u636e\u7c7b\u578b\nvoid addEdge(int u,int v,double w)\n{\n\tedge[++cnt].len=w;\n\tedge[cnt].to=v;\n\tedge[cnt].next=node[u].head;\n\tnode[u].head=cnt;\n}\n//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\nvoid Dijkstra(int x,int y)\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tnode[i].dis=INF;\n\t}\n\t//\u521d\u59cb\u5316\n\tnode[1].dis=0;\n\tpriority_queue<pdi,vector<pdi>,greater<pdi> >q;\n\tq.push({0,1});\n\t//\u5c0f\u6839\u5806\n\twhile(q.size())\n\t{\n\t\tpdi tmp=q.top();\n\t\tq.pop();\n\t\tdouble d=tmp.first;\n\t\tint u=tmp.second;\n\t\tif(node[u].dis!=d)continue;\n\t\tfor(int e=node[u].head;e;e=edge[e].next)\n\t\t{\n\t\t\tint v=edge[e].to;\n\t\t\tif((u==x&&v==y)||(u==y&&v==x))continue;\n\t\t\t//\u8fd9\u91cc\u5c31\u662f\u5220\u8fb9\u7684\u64cd\u4f5c\uff0c\u5c24\u5176\u6ce8\u610f\n\t\t\t//\u53e6\u5916\uff0c\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u8981\u5224\u65ad\u4e24\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\n\t\t\tif(node[v].dis<=d+edge[e].len) continue;\n\t\t\tif(x==-1&&y==-1)node[v].prev=u;\n\t\t\t//\u53ea\u6709\u7b2c\u4e00\u6b21\u8dd1\u6700\u77ed\u8def\u624d\u8bb0\u5f55\u8def\u5f84\n\t\t\tnode[v].dis=d+edge[e].len;\n\t\t\tq.push({node[v].dis,v});\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lf%lf\",&node[i].x,&node[i].y);\n\t}\n\n\tfor(int i=1,u,v;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tdouble w=calc(node[u].x,node[u].y,node[v].x,node[v].y);\n\t\t//\u6ce8\u610fdouble\n\t\taddEdge(u,v,w);\n\t\taddEdge(v,u,w);\n        \t//\u53cc\u5411\u8fb9\n\t}\n\n\tDijkstra(-1,-1);\n\t//\u7b2c\u4e00\u904d\u4f20\u5165\u4e24\u4e2a-1\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u5220\u8fb9\n\n\tfor(int i=n;i!=1;i=node[i].prev)\n\t{\n\t\t//i!=1\u7684\u5224\u65ad\u6761\u4ef6\uff0c\u662f\u56e0\u4e3a1\u662f\u8d77\u70b9\uff0c\u6ca1\u6709\u524d\u9a71\n\t\t//\u4f60\u603b\u4e0d\u80fd\u52200~1\u5427\u2026\u2026\n\t\tDijkstra(i,node[i].prev);\n\t\tans=min(ans,node[n].dis);\n\t\t//\u53d6\u6700\u5c0f\u503c\n\t}\n\tif(ans>=INF)puts(\"-1\");\n\t//n\u6ca1\u6709\u88ab\u66f4\u65b0\u5230\uff0c\u8bf4\u660e\u6ca1\u6709\u6b21\u77ed\u8def\uff08\u6216\u538b\u6839\u90fd\u4e0d\u8fde\u901a\uff09\n\telse printf(\"%.2lf\\n\",ans);\n\t//\u6ce8\u610f\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\n\treturn 0;\n}\n```\n\n\n\u5b8c\u6210\uff01\n\n**\u6e29\u99a8\u63d0\u793a\uff1a\u76f4\u63a5\u63d0\u4ea4\u8fd9\u4efd\u4ee3\u7801\u53ef\u80fd\u4f1aCE\u54e6**\n\n\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u671b\u8fc7\u5ba1\u3002\u5982\u679c\u5404\u4f4d\u8fd8\u6709\u4e0d\u7406\u89e3\u7684\uff0c\u53ef\u4ee5\u79c1\u4fe1\u6211\u6216\u8005at\u6211\uff0c\u6211\u4f1a\u5c3d\u4e00\u81c2\u4e4b\u529b",
        "postTime": 1585021086,
        "uid": 203102,
        "name": "Diamiko",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011"
    },
    {
        "content": "$emm...$\u8fd9~~\u663e\u7136~~\u662f\u4e00\u9053\u6b21\u77ed\u8def\u6a21\u677f\u9898\uff0c\u770b\u5230\u5927\u4f6c\u4eec\u90fd\u7528\u7684\u5220\u8fb9\u6cd5\uff0c\u6211\u8fd9\u91cc\u6765\u4e00\u53d1\u679a\u4e3e\u6cd5\u5427\n\n\u6211\u4eec\u8bbe\u6709\u56fe$G(V,E)$\uff0c$e(u,v)$\u662f\u5176\u4e2d\u7684\u4e00\u6761\u8fb9\u7684\uff0c$w(u,v)$\u662f\u5176\u6743\u503c\uff0c\u4ece$i$\u5230$j$\u7684\u6700\u77ed\u8def\u4e3a$dis[i][j]$\uff0c\u90a3\u4e48\u4ece$1$\u5230$n$\u7684\u6b21\u77ed\u8def\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a\n\n$$\\sum_{e(u,v)\\in G(v,e)}min(dis[1][u]+w(u,v)+dis[v][n])$$\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\u5373\u53ef\uff0c\u5b9e\u73b0\u9884\u5904\u7406\u6700\u77ed\u8def\uff0c\u4ee5$1$\u548c$n$\u4e3a\u8d77\u70b9\u5206\u522b\u8dd1\u4e00\u6b21\uff0c\u7136\u540e\u7b97\u6b21\u77ed\u8def\n\n\u4f46\u662f\u7531\u4e8e\u8fd9\u9053\u9898\u8981\u6c42\u6bcf\u4e2a\u70b9\u53ea\u80fd\u8d70\u4e00\u6b21\uff08\u4f46\u662f\u9898\u76ee\u5e76\u6ca1\u6709\u8bf4\uff09\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5bfb\u627e\u6700\u77ed\u8def\u5f84\u8d70\u5411\uff0c\u5e76\u4e14\u679a\u4e3e\u65f6\u5224\u65ad\uff0c\u7136\u540e\u518d\u7d2f\u52a0\u5373\u53ef\n\n\u4f46\u662f\u8fd9\u6837\u4f1a\u8d85\u65f6\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5728\u5224\u65ad\u662f\u52a0\u4e0a\u5c0f\u4f18\u5316\u6765\u8282\u7701\u65f6\u95f4\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<ext/pb_ds/priority_queue.hpp>\n#include<cmath>\n#include<cstring>\nusing namespace std;\nusing namespace __gnu_pbds;\nstruct edge\n{\n\tint node;\n\tdouble weight;\n\tedge(int node_,double weight_):\n\t\tnode(node_),weight(weight_){}\n};\nvector<edge> v[201];\nint n,m,a[201],b[201];\ndouble dis1[201],dis2[201],path1[201],path2[201];\nbool vis[201];\ninline int read()\n{\n\tint x=0,f=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tif(c=='-')\n\t\t\tf=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\t\tc=getchar();\n\t}\n\treturn x*f;\n}\ninline double clac(int a1,int b1,int a2,int b2)\n{\n\treturn sqrt((a1-a2)*(a1-a2)+(b1-b2)*(b1-b2));//\u8ba1\u7b97\u4e24\u70b9\u8ddd\u79bb\n}\ninline void dijkstra(int s,double dis[])\n{\n\tmemset(vis,0,sizeof(vis));\n\tregister __gnu_pbds::priority_queue<pair<double,int>,greater<pair<double,int> >,pairing_heap_tag> q;//\u5e73\u677f\u7535\u89c6\u5927\u6cd5\u597d\uff08\u5927\u96fe\n\tq.push(make_pair(0.00,s));\n\twhile(!q.empty())//\u677f\u5b50\n\t{\n\t\tregister pair<double,int> k=q.top();\n\t\tq.pop();\n\t\tif(vis[k.second])\n\t\t\tcontinue;\n\t\tvis[k.second]=1;\n\t\tdis[k.second]=k.first;\n\t\tfor(register vector<edge>::iterator it=v[k.second].begin();it!=v[k.second].end();++it)\n\t\t\tif(!vis[it->node])\n\t\t\t\tq.push(make_pair(it->weight+k.first,it->node));\n\t}\n}\ninline void findway()\n{\n\tfor(register int i=1;i<=n;++i)\n\t\tfor(register vector<edge>::iterator it=v[i].begin();it!=v[i].end();++it)//\u5bfb\u627e\u8def\u5f84\n\t\t{\n\t\t\t//if(!path1[it->node])\n\t\t\t\tif(dis1[it->node]==dis1[i]+it->weight)\n\t\t\t\tpath1[it->node]=i;\n\t\t\t//if(!path2[it->node])\n\t\t\t\tif(dis2[it->node]==dis2[i]+it->weight)\n\t\t\t\t\tpath2[it->node]=i;\n\t\t}\n}\ninline bool check(int s,int t)\n{\n\tbool qwq[201]={0};\n\tfor(register int i=s,j=t;i||j;i=path1[i],j=path2[j])\n\t\tif(qwq[i]||qwq[j])//\u4f18\u5316\uff1a\u9700\u8981\u4e24\u6761\u8def\u5f84\u540c\u65f6\u8fdb\u884c\u5224\u65ad\u8282\u7701\u65f6\u95f4\n\t\t\treturn 0;\n\t\telse\n\t\t\tqwq[i]=qwq[j]=1;\n\treturn 1;\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(register int i=1;i<=n;++i)\n\t\ta[i]=read(),b[i]=read();\n\twhile(m--)\n\t{\n\t\tregister int x=read(),y=read();\n\t\tv[x].push_back(edge(y,clac(a[x],b[x],a[y],b[y])));\n\t\tv[y].push_back(edge(x,clac(a[x],b[x],a[y],b[y])));\n\t\t//cout<<clac(a[x],a[y],b[x],b[y])<<endl;\n\t}//\u5efa\u56fe\n\tdijkstra(1,dis1);//\u9884\u5904\u7406\n\tdijkstra(n,dis2);\n\t//cout<<dis1[1]<<\" \"<<dis1[2]<<\" \"<<dis1[3]<<\" \"<<dis2[1]<<\" \"<<dis2[2]<<\" \"<<dis2[3]<<endl;\n\tregister double minn=dis1[n],ans=233333333333.00;\n\tfindway();//\u786e\u5b9a\u8def\u5f84\n\tfor(register int i=1;i<=n;++i)\n\t\tfor(register vector<edge>::iterator it=v[i].begin();it!=v[i].end();++it)//\u679a\u4e3e\u6bcf\u6761\u8fb9\n\t\t{\n\t\t\tregister double w=dis1[i]+it->weight+dis2[it->node];\n\t\t\tif(ans==233333333333.00||(w<ans&&w>minn&&check(i,it->node)))//\u5224\u65ad\u662f\u5426\u662f\u6b21\u77ed\u8def\u5e76\u4e14\u6ca1\u6709\u91cd\u590d\u7ecf\u8fc7\u67d0\u4e2a\u70b9\n\t\t\t\tans=w;//\u66f4\u65b0\u7b54\u6848\n\t\t}\n\tif(ans==233333333333.00)\n\t\tputs(\"-1\");\n\telse\n\t\tprintf(\"%.2lf\\n\",ans);//\u8f93\u51fa\n\treturn 0;\n}\n```\n",
        "postTime": 1565614814,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011"
    },
    {
        "content": "\u5927\u4f53\u601d\u8def\u5982\u4e0b\uff1a\u5148\u901a\u8fc7\u4e00\u904dspfa\u7b97\u51fa\u6700\u77ed\u8def\uff0c\u5e76\u8bb0\u5f55\u4e0b\u8be5\u6700\u77ed\u8def\u4e0a\u7684\u6240\u6709\u8fb9\u3002\u6bcf\u4e00\u6b21\u5220\u53bb\u5176\u4e2d\u7684\u4e00\u6761\u8fb9\uff0c\u6c42\u51fa\u6b64\u65f6\u7684\u6700\u77ed\u8def\u5f84\u3002\u6240\u6709\u7b54\u6848\u7684\u6700\u5c0f\u503c\u5373\u4e3a\u6240\u6c42\n\nps\uff1a\u7531\u4e8e\u6700\u77ed\u8def\u5f84\u6bcf\u4e00\u6b21\u90fd\u6709\u4e00\u6761\u8fb9\u88ab\u5220\u53bb\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6c42\u51fa\u7684\u6700\u77ed\u8def\u5f84\u5fc5\u5b9a\u5927\u4e8e\u7b49\u4e8e\u539f\u56fe\u7684\u6700\u77ed\u8def\n\npps\uff1a\u7ec6\u8282\u95ee\u9898\uff0c\u5173\u4e8e\u5982\u4f55\u8bb0\u5f55spfa\u7ecf\u8fc7\u7684\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u524d\u7f00\u6570\u7ec4pre\uff0c\u5f53\u66f4\u65b0d[y]\u65f6\uff0c\u5c06pre[y]=x\uff08\u51fa\u53d1\u70b9\uff09\u3002\u6700\u540e\u4ecen\u70b9\u4ece\u540e\u5f80\u524d\u5012\u641c\uff0c\u5373\u53ef\u5c06\u6bcf\u4e00\u6761\u8fb9\u90fd\u8bb0\u5f55\u4e0b\u6765\n\n\u5177\u4f53\u8bf7\u770b\u6ce8\u89e3\uff0c\u4e0a\u4ee3\u7801\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nconst int N=205,M=40050,INF=0x3f3f3f3f;\ntypedef long long LL;\nint ver[M],Next[M],head[N],used[N],Prev[N],x[N],y[N];\ndouble edge[M],d[N];\nint n,m,tot;\ndouble ans=INF;\ndouble num(int i,int j)\n{\n    return sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));\n}\nvoid add(int x,int y,double z)\n{\n    ver[++tot]=y,edge[tot]=z,Next[tot]=head[x],head[x]=tot;\n    return;\n}\nvoid spfa(int a,int b)\n{\n    for(int i=1;i<=n;i++) d[i]=INF;\n    memset(used,0,sizeof(used));\n    queue<int> q;\n    q.push(1);\n    d[1]=0,used[1]=1;\n    while(!q.empty())\n    {\n        int x=q.front();\n        q.pop();\n        used[x]=0;\n        for(int i=head[x];i;i=Next[i])\n        {\n            int y=ver[i];\n            double z=edge[i];\n            if(x==a&&y==b||x==b&&x==a) continue;\n            //\u5220\u8fb9\uff0c\u5373\u4f7f\u8fd9\u4e00\u6761\u8fb9\u4e0d\u80fd\u8d70\n            if(d[y]>d[x]+z)\n            {\n                if(a==-1&&b==-1) Prev[y]=x;\n                //\u5982\u679c\u662f\u7b2c\u4e00\u904d\u641c\uff0c\u8bb0\u5f55\u524d\u7f00\n                d[y]=d[x]+z;\n                if(!used[y]) q.push(y),used[y]=1;\n            }\n        }\n    }\n    return;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    scanf(\"%d%d\",&x[i],&y[i]);\n    for(int i=0;i<m;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        double z=num(x,y);\n        add(x,y,z);\n        add(y,x,z);\n    }\n    spfa(-1,-1);\n    //\u7b2c\u4e00\u904d\uff0c\u4e0d\u9700\u8981\u5220\u8fb9\n    for(int i=n;Prev[i];i=Prev[i])\n    {\n        spfa(Prev[i],i);\n        //\u5c06i\u548cpre[i]\u4e4b\u95f4\u7684\u8fb9\u5220\u53bb\n        ans=min(ans,d[n]);\n    }\n    if(ans==INF) printf(\"-1\");\n    else printf(\"%.2lf\",ans);\n    return 0;\n}\n```",
        "postTime": 1527849994,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011"
    },
    {
        "content": "\u4e00\u53e5\u8bdd\u9898\u610f\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6709n\u4e2a\u70b9\u7684\u5e73\u9762\u5750\u6807\u7cfb\uff0c\u67d0\u4e9b\u70b9\u4e4b\u95f4\u6709\u8fb9\uff0c\u8981\u6c42\u7b2c1\u4e2a\u70b9\u5230\u7b2cn\u4e2a\u70b9\u7684\u6b21\u77ed\u8def\u3002\n\n\u8fd9\u662f\u4e00\u9053k\u77ed\u8def\u7684\u6a21\u677f\u9898\uff0c\u4f46\u662f\u7531\u4e8e\u672c\u4eba\u592a\u5f31\u4e86\uff0c\u5e76\u4e0d\u4f1ak\u77ed\u8def........\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e9b\u6bd4\u8f83\u5de7\u7684\u7b97\u6cd5\u3002\n\n\u8fd9\u9053\u9898\u662f\u6b21\u77ed\u8def\uff0c\u800c\u6700\u77ed\u8def\u6211\u4eec\u662f\u5f88\u5bb9\u6613\u6c42\u51fa\u6765\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u5728\u6700\u77ed\u8def\u4e0a\u5904\u7406\u6765\u505a\u8fd9\u9053\u9898\u3002\n\n\u65e2\u7136\u4e0d\u80fd\u8d70\u548c\u6700\u77ed\u8def\u5b8c\u5168\u4e00\u6837\u7684\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u6bcf\u6b21\u628a\u6700\u77ed\u8def\u4e0a\u7684\u4e00\u6761\u8fb9\u5220\u53bb\uff0c\u518d\u8dd1spfa\u6216\u8005dijkstra\uff0c\u8dd1\u7684\u6b21\u6570\u53d6\u51b3\u4e8e\u6700\u77ed\u8def\u7ecf\u8fc7\u51e0\u6761\u8fb9\u3002\n\n\u8981\u627e\u5230\u6700\u77ed\u8def\u7684\u8fb9\u7684\u8bdd\uff0c\u9700\u8981\u8bb0\u5f55\u524d\u9a71\u3002\u6bcf\u6b21\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u7684\u65f6\u5019\u5982\u679cdis\u88ab\u66f4\u65b0\u4e86\uff0c\u5c31\u8bb0\u5f55\u524d\u9a71\u3002(\u601d\u8003\u4e00\u4e0b\u5e94\u8be5\u5c31\u80fd\u660e\u767d\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u8bb0\u5f55\u540e\u9a71)\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read()//\u5feb\u8bfb\n{\n    int x=0,w=1;char ch=getchar();\n    while(ch>'9'||ch<'0') {if(ch=='-')w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9') x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x*w;\n}\nint cnt;\nint x[210],y[210],head[210],vis[210],team[500010],from[210],bian[210],s[500010];\ndouble dis[210];//\u6ce8\u610f\u5f00double\nstruct node{\nint to,next;double v;\n}edge[500010];\nvoid add(int a,int b)\n{\n    cnt++;\n    edge[cnt].to=b;\n    edge[cnt].next=head[a];\n    edge[cnt].v=sqrt((x[a]-x[b])*(x[a]-x[b])+(y[a]-y[b])*(y[a]-y[b]));\n    head[a]=cnt;\n}\nvoid spfa()\n{\n    memset(dis,127,sizeof(dis));\n    int l=0,r=1,u,v;\n    team[1]=1;vis[1]=1;dis[1]=0;\n    while(l<r)\n    {\n        l++;\n        u=team[l];\n        vis[u]=0;\n        for(int i=head[u];i;i=edge[i].next)\n        {\n            v=edge[i].to;\n            if(dis[v]>dis[u]+edge[i].v)\n            {\n                dis[v]=dis[u]+edge[i].v;\n                from[v]=u;//\u8bb0\u5f55\u524d\u9a71\n                if(!vis[v])\n                {\n                    vis[v]=1;\n                    r++;\n                    team[r]=v;\n                }\n            }\n        }\n    }\n}\nvoid spfa2(int x,int y)// \u8fd9\u91cc\u6ce8\u610f\u662f\u8981\u5206spfa\u548cspfa2\u7684\uff0cpfa\u548cspfa2\u7684\uff0c\u56e0\u4e3a\u7b2c\u4e00\u6b21\u8981\u8bb0\u5f55\u524d\u9a71\u8282\u70b9\u3002\u800c\u540e\u51e0\u6b21\u5982\u679c\u4ecd\u7136\u8bb0\u5f55\u7684\u8bdd\u63a5\u4e0b\u6765\u7684\u9012\u5f52\u5c31\u4f1a\u51fa\u67dc\u4e86\uff01\uff01\uff01\u5177\u56e0\u4e3a\u7b2c\u4e00\u6b21\u8981\u8bb0\u5f55\u524d\u9a71\u8282\u70b9\u3002\u800c\u540e\u51e0\u6b21\u5982\u679c\u4ecd\u7136\u8bb0\u5f55\u7684\u8bdd\u63a5\u4e0b\u6765\u7684\u9012\u5f52\u5c31\u4f1a\u51fa\u67dc\u4e86\uff01\uff01\uff01\u5177\u4f53\u770b\u5199\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u7b2c\u4e00\u6b21spfa\u540e\u76f4\u63a5\u9012\u5f52\u628a\u8fb9\u7528\u6570\u7ec4\u5b58\u8d77\u6765\uff0c\u8fd9\u6837\u5c31\u4e0d\u5fc5\u8981\u5206\u5f00\u5199\u4e24\u4e2a\u3002_\n{\n    memset(dis,127,sizeof(dis));\n    int l=0,r=1,u,v;\n    team[1]=1;vis[1]=1;dis[1]=0;\n    while(l<r)\n    {\n        l++;\n        u=team[l];\n        vis[u]=0;\n        for(int i=head[u];i;i=edge[i].next)\n        {\n            v=edge[i].to;\n            if((v==y&&u==x)||(v==x&&u==y)) continue;\n            if(dis[v]>dis[u]+edge[i].v)\n            {\n                dis[v]=dis[u]+edge[i].v;\n                if(!vis[v])\n                {\n                    vis[v]=1;\n                    r++;\n                    team[r]=v;\n                }\n            }\n        }\n    }\n}\nint main()\n{\n    int n,m,xi,yi;\n    double minn=90000000;\n    n=read();m=read();\n    for(int i=1;i<=n;i++)\n    {\n        x[i]=read();y[i]=read();\n    }\n    for(int i=1;i<=m;i++)\n    {\n        xi=read();yi=read();\n        add(xi,yi);\n        add(yi,xi);\n    }\n    spfa();\n    int v=n;\n    double tmp;\n    while(v!=1)\n    {\n        spfa2(v,from[v]);\n        if(dis[n]<minn) minn=dis[n];\n        v=from[v];\n    }\n    if(minn==90000000)\n    {\n        printf(\"-1\");\n        return 0;\n    }\n    else\n    printf(\"%.2lf\\n\",minn);\n}\n```",
        "postTime": 1519826043,
        "uid": 45206,
        "name": "Frozen_Heart",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011"
    },
    {
        "content": "[\u672c\u4eba\u535a\u5ba2](https://prime.design.blog/)\n\n\u5148\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff08spfa\uff0c\u8fd9\u4e2a\u4e0d\u7528\u8bb2\u5427\uff0c\u4e0d\u4f1a\u7684\u53bb\u770b\u770b\u6a21\u7248\uff09\n\n\u7136\u540e\u679a\u4e3e\u77ed\u8fb9\uff0c\u6bcf\u6b21\u65ad\u6389\u4e00\u6761\u6700\u77ed\u8def\u4e2d\u7684\u8fb9\uff0c\u6807\u8bb0\u5b83\u4e0d\u80fd\u8d70\n\n\u63a5\u7740\u7ee7\u7eed\u8dd1\u6700\u77ed\u8def\uff0c\u8bb0\u5f55\u6bcf\u4e00\u6b21\u6700\u77ed\u8def\u7684\u957f\u5ea6\uff0c\u5176\u4e2d\u6700\u77ed\u7684\u4e00\u6761\u5c31\u662f\u7b54\u6848\n\n\u89c1\u4ee3\u7801\uff1a\n```\n#include<cmath>\n#include<cstdio>\n#include<iomanip>\n#include<cstring>\n#include<iostream>\nusing namespace std;\nstruct point{int x,y;}p[205];\nint dl[400005];\nint n,m,vis[205],used[205];\ndouble a[205][205],d[205];\ndouble jisuan(int i,int j)\n{\n\treturn sqrt((p[i].x-p[j].x)*(p[i].x-p[j].x)+(p[i].y-p[j].y)*(p[i].y-p[j].y));\n}\nint from[205];\nvoid Spfa(int s)\n{\n\tint l=1,r=1;\n\tfor(int i=1;i<=n;i++)d[i]=0x7fffffff/2;\n\tdl[1]=1;vis[1]=1;d[1]=0;\n\twhile(l<=r)\n\t{\n\t\tint x=dl[l];\n\t\tvis[x]=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(a[x][i]!=0&&d[x]+a[x][i]<d[i])\n\t\t\t{\n\t\t\t\td[i]=d[x]+a[x][i];\n\t\t\t\tused[i]++;\n\t\t\t\tif(s==1)from[i]=x;\n\t\t\t\tif(used[i]>=n)return;\n\t\t\t\tif(vis[i]==0)\n\t\t\t\t{\n\t\t\t\t\tvis[i]=1;\n\t\t\t\t\tdl[++r]=i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tl++;\n\t}\n\treturn ;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d%d\",&p[i].x,&p[i].y);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\ta[x][y]=a[y][x]=jisuan(x,y);\n\t}\n\tSpfa(1);\n\tint k=n;\n\tdouble ans=0x7fffffff/2;\n\twhile(from[k])\n\t{\n\t\tdouble bj=a[k][from[k]];\n\t\ta[k][from[k]]=a[from[k]][k]=0;\n\t\tSpfa(2);\n\t\tif(d[n]!=0x7fffffff/2)ans=min(ans,d[n]);\n\t\ta[k][from[k]]=a[from[k]][k]=bj;\n\t\tk=from[k];\n\t}\n\tif(ans==0x7fffffff/2)printf(\"-1\");\n\telse printf(\"%.2f\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1563174878,
        "uid": 88268,
        "name": "\u76d6\u77e3\u658c\u5ce5",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e\u3011"
    },
    {
        "content": "\u548c\u697c\u4e0b\u7684\u505a\u6cd5\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u7ed9\u51fac++\u7684spfa\u5199\u6cd5\u3002\n\n\u5148\u4e00\u6b21spfa\u8bb0\u5f55\u4e0b\u6700\u77ed\u8def\uff08\u7528\u524d\u9a71\uff09\n\n\u7136\u540e\u6bcf\u6b21\u5220\u53bb\u6700\u77ed\u8def\u4e2d\u7684\u4e00\u6761\u8fb9\u518d\u8dd1spfa\u3002\n\n\u6d0b\u6d0b\u6d12\u6d12\u7adf\u7136\u5199\u4e86113\u884c\u4ee3\u7801\u3002\n\n\u524d\u9a71\u8bb0\u5f55\u65b9\u6cd5\uff1a\u5f00\u4e00\u4e2af\u6570\u7ec4\uff0c\u5728\u6bcf\u6b21\u677e\u5f1b\u8fb9\u7684\u65f6\u5019\u5982\u679cd[i]\u88ab\u66f4\u65b0\u4e86\uff0c\u5c31\u5c06f[i]:=j,\u8868\u793a\u5f53\u524d\u5230i\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e2d\uff0cj\u662fi\u7684\u524d\u9a71\u7ed3\u70b9\u3002\n\n\u7ed3\u675f\u540e\u4ecei=n\u5f00\u59cb\uff0c\u5bf9\u4e8e\u7ed3\u70b9i,\u4e0d\u65ad\u5730i:=pre[i]\u76f4\u5230i=\u6e90\u70b9\uff0c\u8fd9\u9014\u4e2d\u7684\u70b9\u5373\u4e3a\u8def\u5f84\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<cmath>\n#include<queue>\nusing namespace std;\n\nstruct point{\n    int x,y;\n};\n\nstruct edge{\n    int t;\n    double c;\n};\n\ndouble dis(int a,int b,int x,int y){return(sqrt((a-x)*(a-x)+(b-y)*(b-y)));}\n\nint n,m;\npoint p[205];\nint f[205];//\u8bb0\u5f55\u524d\u9a71\nvector<edge>g[205];\n\n//\u7b2c\u4e00\u6b21spfa\nvoid qwq1(){\n    queue<int>q;\n    bool v[205];\n    double d[205];\n    memset(v,0,sizeof(v));\n    for(int i=2;i<=n;i++)d[i]=99999999;\n    d[1]=0,v[1]=1;\n    q.push(1);\n    \n    int u;\n    while(!q.empty()){\n        u=q.front();\n        q.pop();\n        v[u]=0;\n        for(int i=0;i<g[u].size();i++){\n            int t=g[u][i].t;double c=g[u][i].c;\n            if(d[t]>d[u]+c){\n                d[t]=d[u]+c;\n                f[t]=u;//\u66f4\u65b0\u524d\u9a71\n                if(!v[t]){\n                    q.push(t);\n                    v[t]=1;\n                }\n            }\n        }\n    }\n}\n\n//\u7b2c\u4e8c\u6b21spfa\ndouble qwq2(int a,int b){\n    queue<int>q;\n    bool v[205];\n    double d[205];\n    memset(v,0,sizeof(v));\n    for(int i=2;i<=n;i++)d[i]=99999999;\n    d[1]=0,v[1]=1;\n    q.push(1);\n    \n    int u;\n    while(!q.empty()){\n        u=q.front();\n        q.pop();\n        v[u]=0;\n        for(int i=0;i<g[u].size();i++){\n            int t=g[u][i].t;double c=g[u][i].c;\n            if((u==a&&t==b)||(u==b&&t==a))continue;\n            if(d[t]>d[u]+c){\n                d[t]=d[u]+c;\n                if(!v[t]){\n                    q.push(t);\n                    v[t]=1;\n                }\n            }\n        }\n    }\n    \n    return d[n];\n}\n\nint main(){\n    int i;\n    int a,b;\n    double c;\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=n;i++)scanf(\"%d%d\",&p[i].x,&p[i].y);\n    for(i=1;i<=m;i++){\n        scanf(\"%d%d\",&a,&b);\n        c=dis(p[a].x,p[a].y,p[b].x,p[b].y);\n        //cout<<a<<' '<<b<<' '<<c<<endl;\n        g[a].push_back((edge){b,c});\n        g[b].push_back((edge){a,c});\n    }\n    \n    memset(f,0,sizeof(f));\n    qwq1();\n    \n    double ans=99999999;\n    int pre=n;\n    while(f[pre]!=1){\n        double t=qwq2(pre,f[pre]);\n        if(ans>t)ans=t;\n        pre=f[pre];\n    }\n    double t=qwq2(pre,1);\n    if(ans>t)ans=t;\n    \n    if(ans==99999999)printf(\"-1\");\n    else printf(\"%.2f\",ans);\n    return 0;\n} \n```",
        "postTime": 1493613223,
        "uid": 6973,
        "name": "\u6613\u6781feng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011"
    },
    {
        "content": "### \u3010\u524d\u8a00\u3011\n\u524d\u9762\u7684\u9898\u89e3\u90fd\u662f\u7528\u6b21\u77ed\u8def\u89e3\u7684\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u201c\u526a\u679d\u6cd5\u201d\u7684\u601d\u8def\u3002\u5f53\u7136\uff0c\u5bf9\u4e8e\u8fd9\u9898\u6765\u8bf4\uff0c\u6211\u611f\u89c9\u526a\u679d\u6cd5\u6548\u7387\u5e94\u8be5\u662f\u4e0d\u5982\u6b21\u77ed\u8def\u7684\u3002\n#### \u3010\u601d\u8def\u3011\n1.\u9898\u76ee\u6c42\u6b21\u77ed\u8def\uff0c\u90a3\u4e48\u6211\u4eec\u6c42\u51fa\u6240\u6709\u7684\u8def\u5f84\uff0c\u4ece\u6240\u6709\u8def\u5f84\u4e2d\u9009\u62e9\u6b21\u77ed\u7684\u4e00\u6761\uff0c\u5c31\u662f\u6240\u6c42\u7684\u7b54\u6848\u3002\u8fd9\u4e00\u6b65DFS\u5373\u53ef\u3002\n\n2.\u4f46\u662f\u660e\u663e\uff0cDFS\u5fc5\u7136\u662f\u8d85\u65f6\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u51cf\u679d\u3002\u6211\u4eec\u8bb0\u5f55\u548c\u7ef4\u62a4\u4e24\u4e2a\u6700\u77ed\u7684\u957f\u5ea6\uff0c\u51cf\u679d\u6709\u4e24\u4e2a\u9014\u5f84\uff1a\n\n\t\t1\uff09\u7ed3\u679c\u51cf\u679d\uff1a\u5f53\u524d\u957f\u5ea6>=\u5f53\u524d\u8bb0\u5f55\u7684\u6b21\u77ed\u957f\u5ea6\uff0c\u51cf\u679d\uff1b\n\n\t\t2\uff09\u9884\u6d4b\u51cf\u679d\uff1a\u5f53\u524d\u957f\u5ea6+\u672a\u6765\u6700\u77ed\u7684\u957f\u5ea6>=\u5f53\u524d\u8bb0\u5f55\u7684\u6b21\u77ed\u957f\u5ea6\uff0c\u51cf\u679d\uff1b\n\n3.\u5982\u4f55\u83b7\u5f97\u672a\u6765\u6700\u77ed\u957f\u5ea6\u5462\uff1f\u4ee5\u7ec8\u70b9\u4e3a\u5f00\u5934\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u5f84\u5c31\u53ef\u4ee5\uff0cdijkstra\u6216\u8005SPFA\u90fd\u53ef\u4ee5\u3002\u8fd9\u91cc\u672a\u6765\u6700\u77ed\u957f\u5ea6\u662f\u4e00\u79cd\u4f30\u8ba1\u7684\u9884\u6d4b\u3002\n\n\u53e6\u5916\u591a\u89e3\u91ca\u4e00\u4e0b\uff0cdijkstra\u662f\u6c42\u4e00\u70b9\u5230\u591a\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5982\u679c\u8981\u6c42\u591a\u70b9\u5230\u4e00\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5c31\u662f\u53cd\u8dd1dijkstra\uff0c\u6d1b\u8c37\u6709\u4e00\u9053\u90ae\u9012\u5458\u9001\u4fe1\u7684\u9898\u76ee\u8003\u7684\u5c31\u662f\u8fd9\u91cc\u3002\n\n#### \u3010\u4ee3\u7801\u3011\n\n```c\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cmath>\n#include<iomanip>\nusing namespace std;\nconst int nA=205;\nconst double inf=1000000000;\n\nstruct NODE{\n\tdouble x,y;\n}node;\nint n,m;\nNODE P[nA];\ndouble G[nA][nA];\nbool VIS[nA]={false};\t//dijkstra\u548cDFS\u5171\u7528\u4e00\u4e2aVIS\u6570\u7ec4\ndouble aa=inf,bb=inf;\t//\u6700\u77ed\u957f\u5ea6\u548c\u6b21\u77ed\u957f\u5ea6\ndouble D[nA];\n\nvoid DIJ(int s){\t//dijkstra\u6a21\u677f\n\tfill(VIS,VIS+nA,false);\n\tfill(D,D+nA,inf);\n\tD[s]=0;\n\tfor(int i=1;i<=n;i++){\n\t\tint u=-1,MIN=inf;\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(VIS[j]==false&&D[j]<MIN){\n\t\t\t\tu=j;\n\t\t\t\tMIN=D[j];\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(u==-1)return ;\n\t\tVIS[u]=true;\n\t\tfor(int v=1;v<=n;v++){\n\t\t\tif(VIS[v]==false&&G[u][v]!=inf&&D[u]+G[u][v]<D[v]){\n\t\t\t\tD[v]=D[u]+G[u][v];\n\t\t\t}\n\t\t}\n\t}\n}\n\ndouble dis(int a,int b){\t//\u6c42\u4e24\u70b9\u95f4\u8ddd\u79bb\n\tdouble x2=P[a].x-P[b].x;\n\tdouble y2=P[a].y-P[b].y;\n\treturn sqrt(x2*x2+y2*y2);\n}\n\nvoid put(double path){\t//\u7ef4\u62a4\u6700\u77ed\u957f\u5ea6\u548c\u6b21\u77ed\u957f\u5ea6\u7684\u51fd\u6570\n\tif(aa<path&&path<=bb)bb=path;\n\tif(path<=aa){\n\t\tbb=aa;\n\t\taa=path;\n\t}\n}\n\nvoid DFS(int index,double path){\t//DFS\n\tif(path>=bb)return ;\t//\u7ed3\u679c\u51cf\u679d\n\t\n\tif(index==n){\n\t\tput(path);\n\t\treturn ;\n\t}\n\t\n\tfor(int i=1;i<=n;i++){\n\t\tif(VIS[i]==true)continue;\n\t\tif(G[index][i]==inf)continue;\n\t\tif(path+D[i]>=bb)continue;\t//\u9884\u6d4b\u51cf\u679d\n\t\t\n\t\tVIS[i]=true;\n\t\tDFS(i,path+G[index][i]);\n\t\tVIS[i]=false;\n\t}\n}\n\nvoid creat(){\t//\u8f93\u5165\u548c\u751f\u6210\u56fe\n\tfill(G[0],G[0]+nA*nA,inf);\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>P[i].x>>P[i].y;\n\t}\n\tfor(int i=0;i<m;i++){\n\t\tint a,b;\n\t\tcin>>a>>b;\n\t\tdouble t=dis(a,b);\n\t\tG[a][b]=t;G[b][a]=t;\n\t}\n}\n\nint main(){\n\tcreat();\t//\u8f93\u5165\u548c\u751f\u6210\u56fe\uff0c\u5b8c\u6210\u51c6\u5907\u5de5\u4f5c\n\t\n\tDIJ(n);\t\t//\u83b7\u5f97\u5404\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\n\tfill(VIS,VIS+nA,false);\t\t\n\tVIS[1]=true;\t//\u7b2c\u4e00\u70b9\u52a0\u5165DFS\n\tDFS(1,0);\t//\u7b2c\u4e00\u70b9\u52a0\u5165DFS\uff0c\u6b64\u65f6\u603b\u957f\u5ea6\u4e3a0\uff1b\n\t\n\tif(bb==inf)cout<<\"-1\"<<endl;\n\telse{\n\t\tcout<<fixed<<setprecision(2)<<bb<<endl;\n\t}\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1586013704,
        "uid": 325532,
        "name": "\u5e38\u6e05\u9759\u77e3",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011\u526a\u679d\u6cd5"
    },
    {
        "content": "# \u6b21\u77ed\u8def\u95ee\u9898\n\u8fd9\u9053\u9898\u4e0d\u5c11\u540c\u5b66\u7528dij\u4e5f\u88abtle\u4e86\n\u6ce8\u610f\u4e00\u4e0b\u5b58\u8fb9\u65b9\u5f0f \u8fd8\u6709\u53ea\u5728\u7b2c\u4e00\u6b21\u8dd1\u6700\u77ed\u8def\u65f6\u8bb0\u5f55\u8def\u5f84\n\n\u5927\u4f53\u601d\u8def\u5f88\u66b4\u529b\uff1a\n\n1.\u6c42\u6700\u77ed\u8def\u5e76\u8bb0\u5f55\u8def\u5f84\n\n2.\u5206\u522b\u679a\u4e3e\u8def\u5f84\u5e76\u65ad\u8fb9\n\n3.\u6bd4\u8f83\u5927\u5c0f\n\n\u6ce8\u610f\u5b58\u8fb9\u7684\u95ee\u9898\n```cpp\n   if(!flag||dd==-1&&bb==-1)   \n   per[y]=x; \n   \n   //\u4e0b\u9762\u662f\n   int now=n; \n     while(per[now]){ \n      dij(per[now],now); \n      ans=min(d[n],ans); \n        now=per[now]; \n    } \n\n\n```\n\u8d34\u4e0a\u4ee3\u7801\n```cpp\nusing namespace std;\n#define M(x,y) make_pair(x,y)\nint fr[1000010],to[2000010],nex[2000010],tl,f[4100010];\ndouble d[1000010],v[2000010];\nint x[100101],y[100100];\nbool b[1000010];int cnt,flag;\ndouble num(int i,int j)\n{\n    return sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));\n}\nconst int inf=14332230100;\nint per[1000000];\nvoid add(int x,int y,double w)\n{\n    to[++tl]=y;\n    v[tl]=w;\n    nex[tl]=fr[x];\n    fr[x]=tl;\n    f[tl]=x;\n}\ninline void read(int &x)\n{\n    x=0;int f(0);char ch(getchar());\n    while(ch<'0'||ch>'9')\n        f|=(ch=='-'),ch=getchar();\n    while(ch>='0'&&ch<='9')\n        x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    x=f?-x:x;\n}\nint n,m,z,s;\nvoid dij(int dd,int bb)\n{\n    memset(b,0,sizeof(b));\n    priority_queue< pair<int,int> > q;\n    int s=1;\n    for(int i=1;i<=n;i++) d[i]=123123123;\n    d[s]=0;\n    q.push(M(0,s));\n    while(!q.empty())\n    {\n        int x=q.top().second;\n        q.pop(); \n        if(b[x]) continue;\n        b[x]=1;\n        for(int i=fr[x];i;i=nex[i])\n        {\n            int y=to[i];\n        \tif((x==dd&&y==bb)||(x==bb&&y==dd)) continue;\n            double l=v[i];\n            if(d[y]>d[x]+l)\n            {\n                d[y]=d[x]+l;\n                if(!flag||dd==-1&&bb==-1)\n                per[y]=x;\n                q.push(M(-d[y],y)); \n            }\n        }\n    }\n}\nint main()\n{\n    read(n),read(m);\n    for(int i=1;i<=n;i++)\n    scanf(\"%d%d\",&x[i],&y[i]);\n    for(int i=0;i<m;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        double z=num(x,y);\n        add(x,y,z);\n        add(y,x,z);\n    }\t\n    dij(-1,-1);\n    flag=1;\n    double ans=14332230;\n    int now=n;\n     while(per[now]){\n        dij(per[now],now);\n        ans=min(d[n],ans);\n        now=per[now];\n    }\n    if(ans==14332230)printf(\"-1\\n\");\n    printf(\"%.2lf\",ans);\n}\n```\n\n\n",
        "postTime": 1561335240,
        "uid": 58064,
        "name": "COUPDETAT",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011"
    },
    {
        "content": "dj,\u597d\u50cf\u53ea\u6709\u4e24\u7bc7\u3002\u628a\u6ce8\u91ca\u5199\u5f97\u5168\u4e86\u70b9\u3002\u770b\u4ee3\u7801\u5427\u3002\n\n\u8fd9\u91cc\u5f15\u7528\u524d\u9762\u5927\u4f6c\u6240\u8bf4\u7684\uff1a\n\n>\u6b21\u77ed\u8def\u6a21\u7248\u9898\u3002\u9996\u5148\u627e\u51fa\u4e00\u6761\u6700\u77ed\u8def\uff0c\u4e4b\u540e\u4e00\u6b21\u53bb\u6389\u4e00\u6761\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u53bb\u6389\u4e00\u6761\u8fb9\u540e\u7684\u56fe\u90fd\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u5176\u4e2d\u6700\u5c0f\u7684\u7b54\u6848\u5c31\u662f\u6b21\u77ed\u8def\u3002\n\n>\u4e3a\u4ec0\u4e48\u8981\u53bb\u6389\u6700\u77ed\u8def\u4e0a\u7684\u4e00\u6761\u8fb9\u5462\uff1f\u56e0\u4e3a\u6b21\u77ed\u8def\u548c\u6700\u77ed\u8def\u5fc5\u7136\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u4e0d\u662f\u5171\u6709\u7684\u3002\u4e3a\u4ec0\u4e48\u4e0d\u53bb\u6389\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u5462\uff1f\u56e0\u4e3a\u8fd9\u6837\u6700\u77ed\u8def\u662f\u6ca1\u6709\u53d8\u5316\u7684\u3002\n\n```c++\n#include<cstdio>\n#include<cmath>\n#include<queue>\n#include<iostream>\nusing namespace std;\n\nconst int INF=1e9+7;\nconst int maxn=210;\nconst int maxm=50000;\n\nstruct edge{int to,next;double w;}map[maxm];\n\nint head[maxn],size,x[maxn],y[maxn],n,m,tot;\ntypedef pair<double,int>node;\ndouble d[maxn],ans=INF;\nint rem[maxn];\n//\u6c42\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff08\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\u516c\u5f0f\uff09 \ndouble far(int x1,int y1,int x2,int y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}\n\nvoid add(int from,int to,double w){\n    map[++size].to=to;\n\tmap[size].w=w;\n    map[size].next=head[from];\n    head[from]=size;\n    return ;\n}\n\nvoid dijkstra(int a,int b){//\u5220\u9664a\u548cb\u76f8\u8fde\u7684\u8fb9 \n    bool vis[maxn]={0};\n    for(int i=1;i<=n;i++) d[i]=INF;\n    d[1]=0;\n    priority_queue<node,vector<node>,greater<node> >Q;//\u5efa\u5806 \n    Q.push(node(0,1));//\u5c06\u7b2c\u4e00\u4e2a\u70b9\u52a0\u5230\u5806\u91cc \n    while(!Q.empty()){\n        int u=Q.top().second;\n        double w=Q.top().first;\n        Q.pop();\n        if(!vis[u]){//\u5982\u679c\u6ca1\u6709\u8bbf\u95ee\u8fc7 \n        \tvis[u]=true;\n        \tfor(int i=head[u];i;i=map[i].next){\n            \tedge e=map[i];\n            \tif((u==a&&e.to==b)||(u==b&&e.to==a)) continue;//\u82e5\u6b64\u8fb9\u88ab\u5220\uff0c\u5c31\u4e0d\u8d70\u4e86 \n            \tif(d[e.to]>w+e.w){\n                \tif(a==-1&&b==-1) rem[e.to]=u;//\u5f53\u627e\u6b21\u77ed\u8def\u65f6\uff0c\u4e0d\u8bb0\u5f55\u8def\u5f84 \n                \td[e.to]=w+e.w;//\u66f4\u65b0\u5f53\u524d\u8be5\u70b9\u6700\u77ed\u8def \n                \tif(!vis[e.to]) Q.push(node(d[e.to],e.to));//\u82e5\u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u5c06\u5b83\u6240\u8fde\u63a5\u7684\u70b9\u52a0\u5230\u5806\u91cc \n            \t}\n        \t}\n\t\t}\n    }\n    return ;\n}\n\nint main(){\n    double w=0.0;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++) scanf(\"%d%d\",&x[i],&y[i]);\n    for(int i=1;i<=m;i++){\n\t\tint from,to;\n        scanf(\"%d%d\",&from,&to);\n        w=far(x[from],y[from],x[to],y[to]);\n        add(from,to,w),add(to,from,w);//\u53cc\u5411\u8fb9 \n    }\n    dijkstra(-1,-1);\n    int now=n;\n    while(rem[now]){//\u4ece\u7ec8\u70b9\u5012\u5e8f\u5220\u8fb9\uff0c\u6bcf\u6b21\u5220\u9664\u6700\u77ed\u8def\u7684\u5176\u4e2d\u4e00\u6761\u8fb9\u3002\u8fb9\u754c\u5c31\u662f0\u3002 \n        dijkstra(rem[now],now);//\u5220\u9664 rem[now],now \u76f8\u8fde\u7684\u8fb9 \n        ans=min(d[n],ans);//\u66f4\u65b0\u6700\u5c0f\u503c \u5373\u4e3a \u6b21\u77ed\u8def \n        now=rem[now];//\u66f4\u65b0\u5f53\u524d\u70b9 \n    }\n    if(ans==INF) printf(\"-1\\n\");//\u5176\u5b9e\u7b49\u4e8e \u4e0d\u5b58\u5728\u4efb\u4f55\u6700\u77ed\u8def \u6216 \u53ea\u5b58\u5728\u4e00\u6761\u8def \n    else printf(\"%.2lf\",ans);\n    return 0;\n}\n```",
        "postTime": 1561110141,
        "uid": 70178,
        "name": "noall",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011"
    },
    {
        "content": "\u3010\u9898\u89e3\u3011\u6c42\u6b21\u77ed\u8def\uff0cdijkstra\u7b2c\u4e00\u904d\u7684\u65f6\u5019\u8bb0\u5f55\u8fb9\uff0c\u7136\u540e\u6309\u7167\u8bb0\u5f55\u7684\u8fb9\u8fd4\u56de\u8fdb\u884c\u5220\u8fb9\u64cd\u4f5c\u3002\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<queue>\n#include<utility>\n#include<vector>\n#include<cstring>\nusing namespace std;\n#define INF 1e9\nconst int maxn=210,maxm=50000;\nstruct Edge{\n    int to,next;\n    double dist;\n}edges[maxm];\nint head[maxn]={0},size=0,x[maxn],y[maxn];\nint n,m;\ndouble dst(int x1,int y1,int x2,int y2){\n    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\n}\ninline double min(double a,double b){\n    return a>b?b:a;\n}\nvoid AddEdge(int from,int to,double dist){\n    size++;\n    edges[size].to=to,edges[size].dist=dist;\n    edges[size].next=head[from];\n    head[from]=size;\n}\ntypedef pair<double,int> pii;\ndouble d[maxn],ans=INF;\nint Prev[maxn];//p\u5927\u5199\uff0c\u5426\u5219\u4e0e\u9ed8\u8ba4\u51fd\u6570\u51b2\u7a81 \nvoid dijkstra(int a,int b){//\u5220\u9664a\u4e0eb\u4e4b\u95f4\u7684\u8def \n    bool done[maxn]={0};\n    for(int i=1;i<=n;i++)d[i]=INF;\n    d[1]=0;\n    priority_queue<pii,vector<pii>,greater<pii> >Q;\n    Q.push(pii(0,1));\n    while(!Q.empty()){\n        int u=Q.top().second;\n        double w=Q.top().first;\n        Q.pop();\n        if(done[u])continue;\n        done[u]=true;\n        for(int i=head[u];i;i=edges[i].next){\n            Edge &e=edges[i];\n            if(u==a&&e.to==b||u==b&&e.to==a)continue;//\u662f\u4e2a\u65e0\u5411\u56fe \n            if(d[e.to]>w+e.dist){\n                if(a==-1&&b==-1)Prev[e.to]=u;//\u5728\u5220\u8fb9\u7684\u65f6\u5019\u4e0d\u80fd\u8bb0\u5f55 \n                d[e.to]=w+e.dist;\n                Q.push(pii(d[e.to],e.to));\n            }\n        }\n    }\n}\nint main()\n{\n    int from,to;\n    double dist=0.0;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)scanf(\"%d%d\",&x[i],&y[i]);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d\",&from,&to);\n        dist=dst(x[from],y[from],x[to],y[to]);\n        AddEdge(from,to,dist);AddEdge(to,from,dist);\n    }\n    dijkstra(-1,-1);\n    int now=n;\n    while(Prev[now]){//\u5220\u8fb9\u8fc7\u7a0b \n        dijkstra(Prev[now],now);\n        ans=min(d[n],ans);\n        now=Prev[now];\n    }\n    if(ans==INF)printf(\"-1\\n\");\n    else printf(\"%.2lf\",ans);\n    return 0;\n}\n```",
        "postTime": 1508993617,
        "uid": 22150,
        "name": "\u548c\u5176\u6b63",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011"
    },
    {
        "content": "\u6b21\u77ed\u8def\uff0c\u5148\u7528dijkstra\u6c42\u51fa\u6700\u77ed\u8def\uff0c\u663e\u7136\uff0c\u6b21\u77ed\u8def\u7684\u5927\u90e8\u5206\u548c\u6700\u77ed\u8def\u662f\u91cd\u5408\u7684\u3002\u6bcf\u6b21\u5220\u9664\u6700\u77ed\u8def\u8def\u5f84\u4e2d\u7684\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u5728\u8dd1\u4e00\u8fb9dijkstra\uff0c\u8fd9\u6837\u4e00\u5171\u80fd\u6c42\u51fa\u8def\u5f84\u957f\u5ea6\u4e2adis\u503c\uff0c\u6392\u5e8f\u8f93\u51fa\u6700\u5c0f\u7684\u5373\u53ef\u3002\n\n\u65e2\u7136\u540e\u9762\u9700\u8981\u5220\u9664\u6700\u77ed\u8def\u8def\u5f84\u4e2d\u7684\u8fb9\uff0c\u90a3\u4e48\u7b2c\u4e00\u6b21\u6c42\u6700\u77ed\u8def\u65f6\u5c31\u8981\u628a\u8def\u5f84\u4e5f\u6c42\u51fa\u6765\u3002\u8fd9\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u7528path[i]\u6570\u7ec4\u8bb0\u5f55i\u70b9\u4ece\u54ea\u4e2a\u70b9\u8d70\u8fc7\u6765\u3002\u4e00\u5f00\u59cbpath\u6570\u7ec4\u6e05\u7a7a\u4e3a-1\uff0c\u8868\u793a\u90fd\u65e0\u6cd5\u5230\u8fbe\uff0cpath[1]\u8bb0\u4e3a1\uff0c\u6bcf\u6b21v\u70b9\u7684\u6700\u5c0f\u503c\u66f4\u65b0\u65f6\uff0cpath\u6570\u7ec4\u8fde\u5e26\u66f4\u65b0\u5373\u53ef\u3002\u6700\u540e\u4ecepath[n]\u5012\u7740\u5f80\u524d\u627e\uff0c\u77e5\u9053path[i]==i\u5373\u53ef\u3002\n\n\uff08\u4ee3\u7801\u4e2ddijkstra\u4f7f\u7528\u4e86stl\u5806\u4f18\u5316\uff09\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<queue>\nusing namespace std;\npair<int,int>pa;\npriority_queue<pair<double,int>,vector<pair<double,int> >,greater<pair<double,int> > >Q;\nint n,m,a,b,wp1,wp2,cnt,num,len,x[205],y[205],nod[205],path[205],Next[100005],vet[100005],head[205];\ndouble vp1,vp2,value[100005],dis[100005],ans[205];\nbool vis[100005];\ndouble calc(int a,int b)\n{\n    return sqrt((x[b]-x[a])*(x[b]-x[a])+(y[b]-y[a])*(y[b]-y[a]));\n}\nvoid add(int x,int y,double z)\n{\n    vet[++num]=y;\n    value[num]=z;\n    Next[num]=head[x];\n    head[x]=num;\n}\nvoid dijkstra()\n{\n    for (int i=1; i<=n; i++)\n    {\n        dis[i]=1000000000;\n        vis[i]=false;\n        path[i]=-1;\n    }\n    dis[1]=0;\n    path[1]=1;\n    for (int i=1; i<=n; i++) Q.push(make_pair(dis[i],i));\n    while (!Q.empty())\n    {\n        pair<double,int> t=Q.top();\n        Q.pop();\n        int u=t.second;\n        if (vis[u]) continue;\n        vis[u]=true;\n        for (int i=head[u]; i; i=Next[i])\n            if (dis[u]+value[i]<dis[vet[i]])\n            {\n                dis[vet[i]]=dis[u]+value[i];\n                path[vet[i]]=u;\n                Q.push(make_pair(dis[vet[i]],vet[i]));\n            }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1; i<=n; i++)\n        scanf(\"%d%d\",&x[i],&y[i]);\n    for (int i=1; i<=m; i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        add(a,b,calc(a,b));\n        add(b,a,calc(b,a));\n    }\n    dijkstra();\n    if (dis[n]>=1e9)\n    {\n        printf(\"-1\");\n        return 0;\n    }\n    int now=n;\n    while (path[now]!=now)\n    {\n        nod[++len]=now;\n        now=path[now];\n    }\n    nod[++len]=1;\n    for (int i=1; i<=len-1; i++)\n    {\n        int u=nod[i];\n        int v=nod[i+1];\n        for (int j=head[u]; j; j=Next[j])\n            if (vet[j]==v)\n            {\n                wp1=j;\n                vp1=value[j];\n                value[j]=1e9;\n                break;\n            }\n        for (int j=head[v]; j; j=Next[j])\n            if (vet[j]==u)\n            {\n                wp2=j;\n                vp2=value[j];\n                value[j]=1e9;\n                break;\n            }\n        dijkstra();\n        ans[++cnt]=dis[n];\n        value[wp1]=vp1;\n        value[wp2]=vp2;\n    }\n    sort(ans+1,ans+cnt+1);\n    if (cnt==0) printf(\"-1\\n\");\n    else printf(\"%.2lf\\n\",ans[1]);\n    return 0;\n}\n```",
        "postTime": 1496494845,
        "uid": 31172,
        "name": "heheabc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011"
    },
    {
        "content": " ## Solve\n \n 1.\u6b21\u77ed\u8def+SPFA\u3002\n \n 2.SPFA\u627e\u6700\u77ed\u8def\uff0c\u5e76\u8bb0\u5f55\u8def\u5f84\u3002\n \n 3.\u5220\u53bb\u6700\u77ed\u8def\u5f84\u4e2d\u7684\u4e00\u6761\u8fb9\uff0c\u5e76\u7528SPFA\u5bfb\u627e\u6700\u77ed\u8def\u3002\n \n 4.\u91cd\u590d3\u7684\u6b65\u9aa4\uff0c\u5176\u4e2d\u6700\u5c0f\u503c\u5373\u4e3a\u7b54\u6848\u3002\n \n ## Tip\n \n 1.\u6b64\u9898\u5e76\u4e0d\u662f\u4e25\u683c\u6b21\u77ed\u8def\uff0c\u5373\u7b54\u6848\u53ef\u80fd\u4e0e\u6700\u77ed\u8def\u7684\u503c\u76f8\u540c\u3002\n \n 2.\u6b65\u9aa43\u4e2dSPFA\u5b8c\u6210\u4e4b\u540e\u522b\u5fd8\u4e86\u8fd8\u539f\u56de\u53bb\u3002\n \n ## Code\n ```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#define maxn 336860180  //\u5b9a\u4e49\u4e00\u4e2a\u6700\u5927\u8303\u56f4\n#define N 100000 \nusing namespace std;  //\u6807\u51c6\u5f00\u5934\nint n,m,len;  //n,m-\u540c\u9898\uff0clen-\u90bb\u63a5\u8868\u8fb9\u6570\ndouble x[N],y[N],dis[N],ans1,ans2=maxn;  //x,y-\u70b9\u7684\u5750\u6807\uff0cdis-\u6700\u77ed\u8def\uff0cans1-\u6700\u77ed\u8def\uff0cans2-\u6b65\u9aa43\u4e2d\u7684\u6700\u5c0f\u503c\nint e,r;  //\u8fb9\u7684\u4e24\u70b9\nint first[N],next[N],f[N][3];  //first,next-\u90bb\u63a5\u8868\uff0cf[i][1]-\u8282\u70b9i\u7684\u524d\u9a71\u8fb9\uff0cf[i][2]-\u8282\u70b9i\u7684\u524d\u9a71\u70b9\nbool vis[N];  //SPFA\u4e2d\u7684bool\u6570\u7ec4\nstruct note{  //\u90bb\u63a5\u8868\n\tint v;\n\tdouble w;\n\tbool fb;  //\u82e5fb\u4e3atrue,\u5219\u6b64\u8fb9\u5df2\u5220\n}d[N];\ndouble dist(double x1,double y1,double x2,double y2){  //\u4e24\u70b9\u6c42\u8ddd\u79bb\n\treturn sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\n}\nvoid add(int e,int r,double distt){  //\u5efa\u7acb\u90bb\u63a5\u8868\n\td[++len].v=r;\n\td[len].w=distt;\n\tnext[len]=first[e];\n\tfirst[e]=len;\n}\nvoid spfa()  //\u6b65\u9aa42\u7684SPFA\n{\n\tfor(int i=1;i<=n;i++) dis[i]=maxn;\n\tmemset(vis,false,sizeof(vis));\n\tdis[1]=0;\n\tqueue<int> q;\n\tq.push(1);\n\twhile(!q.empty()){\n\t\tint e=q.front();\n\t\tq.pop();\n\t\tvis[e]=false;\n\t\tfor(int i=first[e];i!=-1;i=next[i]){\n\t\t\tif(dis[d[i].v]>dis[e]+d[i].w){\n\t\t\t\tf[d[i].v][1]=e;\n\t\t\t\tf[d[i].v][2]=i;\n\t\t\t\tdis[d[i].v]=dis[e]+d[i].w;\n\t\t\t\tif(!vis[d[i].v]){\n\t\t\t\t\tvis[d[i].v]=true;\n\t\t\t\t\tq.push(d[i].v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid spfaa()  //\u6b65\u9aa43\u4e2d\u7684SFPA\n{\n\tfor(int i=1;i<=n;i++) dis[i]=maxn;\n\tmemset(vis,false,sizeof(vis));\n\tdis[1] = 0;\n\tqueue<int> q;\n\tq.push(1);\n\twhile(!q.empty()){\n\t\tint e=q.front();\n\t\tq.pop();\n\t\tvis[e]=false;\n\t\tfor(int i=first[e];i!=-1;i=next[i]){\n\t\t\tif(dis[d[i].v]>dis[e]+d[i].w&&!d[i].fb){\n\t\t\t\tdis[d[i].v]=dis[e]+d[i].w;\n\t\t\t\tif(!vis[d[i].v]){\n\t\t\t\t\tvis[d[i].v]=true;\n\t\t\t\t\tq.push(d[i].v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++) cin>>x[i]>>y[i],first[i]=-1;\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&e,&r);\n\t\tadd(e,r,dist(x[e],y[e],x[r],y[r]));\n\t\tadd(r,e,dist(x[e],y[e],x[r],y[r]));\n\t}\n\tspfa();\n\tint s=n;\n\tans1=dis[n];\n\tif(ans1==maxn){\n\t\tcout<<\"-1\";\n\t\treturn 0;\n\t}\n\twhile(s!=1){\n\t\td[f[s][2]].fb=true;\n\t\tspfaa();\n\t\tif(ans1==dis[n]){\n\t\t\tprintf(\"%.2lf\",ans1);\n\t\t\treturn 0;\n\t\t}\n\t\td[f[s][2]].fb=false;  //\u8fd8\u539f\n\t\ts=f[s][1];\n\t\tans2=min(ans2,dis[n]);\n\t}\n\tif(ans2==maxn) cout<<\"-1\";\n\telse printf(\"%.2lf\",ans2);\n\treturn 0;\n}\n```\n",
        "postTime": 1563797927,
        "uid": 70151,
        "name": "\u52a0\u52d2\u6bd4\u00b7\u53f2\u52aa\u6bd4",
        "ccfLevel": 0,
        "title": "P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011"
    },
    {
        "content": "\u5927\u4f53\u601d\u8def\u662f\u5148\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\uff0c\u7528last\u6570\u7ec4\u8868\u793a\u51fa\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u7528b\u6570\u7ec4\u4fdd\u5b58\uff0c\u7136\u540e\u679a\u4e3e\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u7528tis\u6570\u7ec4\u5c06\u6b64\u8fb9\u6807\u8bb0\uff0c\u8dd1\u6700\u77ed\u8def\uff0c\u8dd1\u5b8c\u4e4b\u540e\u8981\u5220\u9664\u6807\u8bb0\uff0c\u7528ans\u5b58\u6700\u5c0f\u7684\u5373\u4e3a\u7b2c\u4e8c\u77ed\u8def\u3002\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int N=1010101;\nint n,m,head[N],vis[N],cnt,tis[600][600],last[N],b[N],x[N],y[N];\ndouble dis[N],ans=0x7fffffff;\nstruct node{\n\tint next,to;\n\tdouble dis;\n}e[N];\nstruct edge{\n\tint l;\n\tdouble d;\n\tbool operator<(const edge&a)const{\n\treturn d>a.d;\n\t}\n};\nvoid add(int from,int to,double dis){\n\te[++cnt].next=head[from];\n\te[cnt].to=to;\n\te[cnt].dis=dis;\n\thead[from]=cnt;\n}\ndouble check(int l,int r){\n\treturn (double) sqrt(1.0*((x[l]-x[r])*(x[l]-x[r])+(y[l]-y[r])*(y[l]-y[r])));\n}\npriority_queue<edge>q;\nvoid dij(int x){\n\tfor(int i=1;i<=n;i++) dis[i]=0x7fffffff;\n\tdis[x]=0;\n\tmemset(vis,0,sizeof(vis));\n\tq.push((edge){x,0});\n\twhile(!q.empty()){\n\t\tedge p=q.top();\n\t\tq.pop();\n\t\tint u=p.l;\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(int i=head[u];i;i=e[i].next){\n\t\t\tint v=e[i].to;\n\t\t\tif(tis[u][v]||tis[v][u]) continue;\n\t\t\tif(dis[v]>dis[u]+e[i].dis){\n\t\t\t\tdis[v]=dis[u]+e[i].dis;\n\t\t\t\tlast[v]=u;\n\t\t\t\tq.push((edge){v,dis[v]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\tscanf(\"%d%d\",&x[i],&y[i]);\n\tfor(int i=1;i<=m;i++){\n\t\tint sx,sy;\n\t\tscanf(\"%d%d\",&sx,&sy);\n\t\tadd(sx,sy,check(sx,sy));\n\t\tadd(sy,sx,check(sx,sy));\n\t}\n\tdij(1);\n\tfor(int i=1;i<=n;i++) b[i]=last[i];\n\tint f=n;\n\twhile(f!=1){\n\t\ttis[b[f]][f]=tis[f][b[f]]=1;\n\t\tdij(1);\n\t\tans=min(ans,dis[n]);\n\t\ttis[b[f]][f]=tis[f][b[f]]=0;\n\t\tf=b[f];\n\t}\n\tif(ans==0x7fffffff) printf(\"-1\\n\");\n\telse \n\tprintf(\"%.2lf\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1557404320,
        "uid": 94973,
        "name": "\u51b0\u6868",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011"
    },
    {
        "content": "-> ->\u6b21\u77ed\u8def  \u7b2c\u4e00\u6b21\u5199  \u633a\u88f8\u7684\n\n-> ->\u672c\u6765\u4ee5\u4e3a\u8981\u52a0A\\*\u624d\u80fd\u8fc7  \u4f46\u90a3\u597d\u50cf\u662f\u7b2ck\u77ed\u8def\u4e13\u5c5e\u88c5bi\u7b97\u6cd5  \u5b66\u4e0d\u4f1a= =\n\n-> ->\u6211\u7528\u65b9\u6cd5\u7684\u662f \u5148\u4e00\u6b21dijkstra\u4e4b\u540e  \u8bb0\u5f55\u4e00\u4e0b\u524d\u9a71\n\n-> ->\u7136\u540e\u6bcf\u6b21\u53bb\u6389\u4e00\u6761\u8fb9\u518d\u8dd1dij   \u53bb\u6389\u8fb9\u7684\u8bdd \u6211\u7528\u7684\u662f\u5728dij\u91cc\u9762\u7279\u5224\u4e0d\u80fd\u8d70\u8fd9\u4e00\u6761\u8fb9\uff08\u56e0\u4e3a\u524d\u9a71\u53ea\u4f1a\u8bb0\u5f55\u70b9 \u4e0d\u4f1a\u8bb0\u5f55\u8fb9\uff09\n\n-> ->\u7136\u540e\u6ce8\u610f\u4e00\u4e0bint\u548cdouble\n\n-> ->\u7136\u540e\u5bf9\u4e8e\u7b2c\u4e8c\u6b21\u4ee5\u540e  \u7684dij\u53d6\u91cc\u9762\u6700\u5c0f\u7684\n\n-> ->\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u5e72  \u6211\u5f15\u7528\u4e00\u4e0b\u697c\u4e0b\u4e0b\u3002\u3002\u795e\u7287\u7684\u8bc1\u660e\n\n-> ->\u3010\u5f15\u7528\u3011\n\n-> ->\u4e3a\u4ec0\u4e48\u8981\u53bb\u6389\u6700\u77ed\u8def\u4e0a\u7684\u4e00\u6761\u8fb9\u5462\uff1f\u56e0\u4e3a\u6b21\u77ed\u8def\u548c\u6700\u77ed\u8def\u5fc5\u7136\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u4e0d\u662f\u5171\u6709\u7684\u3002\u4e3a\u4ec0\u4e48\u4e0d\u53bb\u6389\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u5462\uff1f\u56e0\u4e3a\u8fd9\u6837\u6700\u77ed\u8def\u662f\u6ca1\u6709\u53d8\u5316\u7684\u3002\n\n-> ->\u611f\u89c9\u597d\u6709\u9053\u7406\u7684\u6837\u5b50\n\n\u4ee3\u7801\uff1a\uff08\u60f3\u4e0d\u901a\u8fd9\u90fd\u6709100\u884c= =\uff09\n\n```cpp\n\n#include<queue>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int maxn=200+10;\nconst int maxm=40000+10;\nconst int INF=(1<<30);\nstruct Point{\n             int x,y;\n             Point(){}\n             Point(int x,int y):x(x),y(y){}\n             double dis(const Point &rhs) const{\n                          double ox=rhs.x-x,oy=rhs.y-y;\n                          return sqrt(ox*ox+oy*oy);\n             }\n             void input(){                                            //\u8fd9\u4e24\u4e2a\u51fd\u6570\u5c31\u662f\u770b\u7740\u597d\u73a9\u7684= =\n                          scanf(\"%d%d\",&x,&y);\n             }\n}p[maxn];\n\nstruct Node{\n             int u;\n             double d;\n             Node(){}\n             Node(int u,double d):u(u),d(d){}\n             bool operator < (const Node &rhs)const{  //\u4f18\u5148\u961f\u5217\u8981\u7528\n                          return d>rhs.d;\n             }\n};\n\nint n,m,first[maxn],next[maxm*2],u[maxm*2],v[maxm*2];\ndouble w[maxm*2];\n\nvoid init_data()\n{\n             cin>>n>>m;\n             for(int i=1;i<=n;i++) p[i].input(),first[i]=-1;\n             for(int i=1;i<=2*m;i+=2) \n             {\n                          scanf(\"%d%d\",u+i,v+i);\n                          w[i+1]=w[i]=p[u[i]].dis(p[v[i]]);\n                          next[i]=first[u[i]];\n                          first[u[i]]=i;\n                          u[i+1]=v[i];\n                          v[i+1]=u[i];\n                          next[i+1]=first[v[i]];\n                          first[v[i]]=i+1;\n             }\n}\n\ndouble d[maxn];\nint pre[maxn],vis[maxn];\nvoid Dijkstra(int f,int t)\n{\n             priority_queue<Node>q;\n             for(int i=2;i<=n;i++) d[i]=INF;\n             d[1]=0;\n             if(f==-1)pre[1]=-1;    //\u7279\u5224  \u53ea\u6709\u7b2c\u4e00\u6b21\u9700\u8981\u8bb0\u5f55pre\n             memset(vis,0,sizeof(vis));\n             q.push(Node(1,0));\n             while(!q.empty())\n             {\n                          Node x=q.top();q.pop();\n                          if(vis[x.u]) continue;\n                          vis[x.u]=1;\n                          for(int i=first[x.u];i!=-1;i=next[i])\n                          {\n                                       if(d[v[i]]>w[i]+d[x.u]&&!(x.u==f&&v[i]==t))//\u540e\u534a\u53e5\u7279\u5224\u4e0d\u80fd\u8d70\u7684\u8fb9\n                                       {\n                                                    d[v[i]]=w[i]+d[x.u];\n                                                    if(f==-1) pre[v[i]]=x.u;\n                                                    q.push(Node(v[i],d[v[i]]));\n                                       }\n                          }\n             }\n}\n\nint main()\n{\n             init_data();\n             Dijkstra(-1,-1);//\u9009-1\u660e\u663e\u662f\u4e3a\u4e86\u9632\u6b62\u51b2\u7a81-> ->\n             double ans=INF;\n             for(int t=n;t!=1;t=pre[t])\n             {\n                          Dijkstra(pre[t],t);\n                          ans=min(ans,d[n]);    \n             }\n             printf(\"%.2f\",ans);\n             return 0;\n}\n\n\n```",
        "postTime": 1451974021,
        "uid": 11280,
        "name": "QWsin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1491 \u3010\u96c6\u5408\u4f4d\u7f6e \u3011"
    }
]