[
    {
        "content": "### \u524d\u8a00\n\n\u2717\u2713OI TXDY\uff01\n\nNOIP \u524d\u4e00\u53d1\u9898\u89e3\uff0cRP++\uff01\n\n---\n### \u601d\u8def\n\n\u4e3a\u4e86\u5efa\u7acb\u76f4\u89c2\u7406\u89e3\uff0c\u6211\u4eec\u5c1d\u8bd5\u5bf9\u6811\u8fdb\u884c**\u91cd\u6784**\u3002\n\n\u4f60\u8003\u8651\u8fd9\u4e48\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5c31\u662f\u8bf4\uff1a\u6211\u4eec\u8003\u8651\u628a\u6811**\u4e09\u5ea6\u5316**\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u53d8\u6210**\u4e00\u6761\u5411\u53f3\u7684\u94fe**\uff0c**\u94fe\u4e0a\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5de6\u513f\u5b50\u662f\u539f\u6811\u8be5\u7ed3\u70b9\u7684\u5404\u4e2a\u513f\u5b50**\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u4e00\u9897**\u4e8c\u53c9\u6811**\u3002\u4e3a\u7b80\u4fbf\uff0c\u6211\u4eec\u4ee5\u4e0b\u79f0\u5176\u4e3a**\u91cd\u6784\u6811**\uff0c\u5411\u53f3\u7684\u94fe\u79f0\u4e3a**\u53f3\u94fe**\uff0c\u5411\u5de6\u7684\u94fe\u79f0\u4e3a**\u5de6\u94fe**\u3002\n\n\u6211\u4eec\u7ed9\u51fa\u6837\u4f8b 1 \u7684\u5176\u4e2d\u4e00\u9897\u91cd\u6784\u6811\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/zwstx2lq.png)\n\n\u6211\u4eec\u89c4\u5b9a\u91cd\u6784\u6811\u4e0a\u6bcf\u4e2a\u53f3\u94fe\u7684\u6839\u7ed3\u70b9\u4e3a**\u5b9e\u7ed3\u70b9**\uff0c\u6743\u503c\u4e3a\u539f\u6811\u4e0a\u8be5\u7ed3\u70b9\u7684\u6743\u503c\uff1b\u5176\u4f59\u70b9\u79f0\u4e3a**\u865a\u7ed3\u70b9**\uff0c\u6743\u503c $0$\u3002\u865a\u7ed3\u70b9\u4e2d\u6700\u4e0b\u9762\u7684\u79f0\u4e3a**\u6700\u672b\u865a\u7ed3\u70b9**\u3002\n\n\u5b9e\u7ed3\u70b9\u7684\u5de6\u513f\u5b50\u79f0\u4e3a**\u91cd\u5de6\u513f\u5b50**\uff0c\u865a\u7ed3\u70b9\u5de6\u513f\u5b50\u79f0\u4e3a**\u8f7b\u5de6\u513f\u5b50**\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u539f\u6811\u4e0a\u7684 2 \u64cd\u4f5c\uff0c\u5728\u91cd\u6784\u6811\u4e0a\u6709**\u7b80\u6d01\u7684\u8868\u793a**\uff01\n\n\u4f60\u8003\u8651\u8fd9\u4e48\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5c31\u662f\u8bf4\uff1a\u5728\u91cd\u6784\u6811\u4e0a\uff0c\u5b9e\u7ed3\u70b9\u6743\u503c\u5411\u7236\u4eb2\u5e73\u79fb\uff0c\u6839\u8282\u70b9\u6743\u503c\u6254\u6389\uff0c\u672a\u8d4b\u503c\u8005\u7528 $0$ \u8865\u9f50\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u663e\u7136\u865a\u7ed3\u70b9\u6743\u503c\u53ef\u80fd\u88ab\u8d4b\u503c\uff0c\u4e8e\u662f\u5c06\u5176\u6743\u503c\u518d\u9001\u7ed9\u5176\u5bf9\u5e94\u7684\u5b9e\u7ed3\u70b9\u3002\n\n\u8fd9\u5c31\u662f 2 \u64cd\u4f5c\u5728\u91cd\u6784\u6811\u4e0a\u7684\u8868\u793a\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u91cd\u6784\u6811 dfs \u5e8f\u7684\u533a\u95f4\u5de6\u79fb\u4e00\u4f4d\uff0c\u4e0e\u6211\u4eec\u4e0a\u8ff0\u63cf\u8ff0\u51e0\u4e4e\u7b49\u4ef7\uff01**\u56e0\u4e3a\u865a\u7ed3\u70b9\u6240\u5728\u7684\u6743\u503c $0$ \u6bb5\u521a\u597d\u8f6c\u79fb\u5230\u6700\u65b0\u53f6\u7ed3\u70b9\u4e0a\u4e86\uff01**\n\n\u5bf9\u88ab\u8d4b\u503c\u7684\u865a\u7ed3\u70b9\uff0c\u6211\u4eec\u5982\u4f55\u66f4\u65b0\uff1f\n\n\u4f60\u8003\u8651\u8fd9\u4e48\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5c31\u662f\u8bf4\uff1a\u865a\u7ed3\u70b9\u5fc5\u5b9a\u662f\u5176\u7236\u4eb2\u7684\u53f3\u513f\u5b50\uff0c\u4e14\u5fc5\u5b9a\u6709\u5de6\u513f\u5b50\uff0c\u56e0\u6b64\u5176**\u5fc5\u5b9a\u4f4d\u4e8e\u4e00\u6761\u5de6\u94fe\u7684\u9876\u7aef**\u3002\u800c\u4e14\uff0c\u8fd9\u6761\u5de6\u94fe\u4e0a**\u5fc5\u7136\u9664\u4e86\u5176\u5916\u90fd\u4e3a\u5b9e\u7ed3\u70b9**\u3002\u6211\u4eec\u79f0\u6700\u4f4e\u8005\u4e3a**\u6700\u672b\u5b9e\u7ed3\u70b9**\u3002\n\n\u56e0\u6b64\u6211\u4eec**\u52a8\u6001\u7ef4\u62a4\u6bcf\u6761\u5de6\u94fe\u4e0a\u8fd8\u6d3b\u7740\u7684\u6700\u672b\u5b9e\u7ed3\u70b9**\uff0c\u5e76\u5728\u4fee\u6539\u65f6\u52a8\u6001\u66f4\u65b0\u5176\u6240\u5728\u5de6\u94fe\u6839\u7ed3\u70b9\u5373\u53ef\u3002\n\n\u4e3a\u4e86\u5f97\u5230\u6bcf\u4e2a\u70b9\u6240\u5728\u5de6\u94fe\u6839\u7ed3\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u7c7b\u4f3c\u6811\u5256\u7684\u8fc7\u7a0b\uff1adfs \u4e00\u904d\u539f\u6811\uff0c\u53d6\u91cd\u5de6\u513f\u5b50\u6307\u5411\u6839\u8282\u70b9\u6307\u5411\u7684\u5de6\u94fe\u94fe\u9876\uff0c\u8ba9\u8f7b\u5de6\u513f\u5b50\u6307\u5411\u6839\u8282\u70b9\u7684\u5404\u4e2a\u865a\u7ed3\u70b9\u3002\n\n\u4e3a\u4e86\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u6211\u4eec**\u5fc5\u987b\u7528 `size` \u6765\u5b9a\u4e49\u91cd\u5de6\u513f\u5b50\u548c\u8f7b\u5de6\u513f\u5b50**\uff0c\u4ece\u800c\u83b7\u5f97\u5747\u644a\u7684\u590d\u6742\u5ea6\u3002\u50cf\u4e0a\u9762\u56fe\u4f8b\u90a3\u6837\u5c31\u662f\u4e0d\u53ef\u53d6\u7684\u3002\n\n\u901a\u8fc7\u4ee5\u4e0a\u63cf\u8ff0\uff0c\u6211\u4eec\u53d1\u73b0 2 \u64cd\u4f5c\u88ab\u63cf\u8ff0\u6210\u4e86\u91cd\u6784\u6811 dfs \u5e8f\u4e0a\u7684\u533a\u95f4\u5e73\u79fb\u4e0e\u82e5\u5e72\u6b21\u5355\u70b9\u4fee\u6539\u3002\n\n\u653e\u4e00\u90e8\u5206\u4ee3\u7801\u7406\u89e3\u4e00\u4e0b\u3002\n\n```cpp\nuint Fath[1000005];\nstd::set<uint>Leaf;\nstd::vector<uint>Insert,Erase,Son[1000005];\nuint Bgn[1000005],End[1000005],cnt=1,Belong[3000005],Heavy[1000005],Siz[1000005],Up[1000005],Deg[1000005];\nullt A[1000005];\nvoi get(uint p)\n{\n\tSiz[p]=1,Heavy[p]=-1,Deg[p]=Son[p].size();\n\tfor(auto s:Son[p]){get(s),Siz[p]+=Siz[s];if(Heavy[p]==-1u||Siz[s]>Siz[Heavy[p]])Heavy[p]=s;}\n}\nvoi dfs(uint p,uint user)\n{\n    Up[Belong[cnt]=p]=user,Splay::insert(cnt,A[Belong[cnt]]),Bgn[p]=cnt++;\n    if(~Heavy[p])dfs(Heavy[p],user);\n    for(auto s:Son[p])if(s!=Heavy[p])Splay::insert(cnt,0),Belong[cnt++]=p,dfs(s,cnt-1);\n    End[p]=cnt;if(Heavy[p]==-1u)Leaf.insert(Bgn[p]);\n}\n```\n\n```cpp\nif(!Splay::find(Bgn[p],End[p]))continue;\nSplay::erase(Bgn[p]),Splay::insert(End[p]-1,0);\nauto iter=Leaf.upper_bound(Bgn[p]);\nwhile(iter!=Leaf.end()&&*iter<End[p])\n{\n    uint u(Belong[*iter]);uint t(Up[u]);\n    Splay::kth(t);ullt v(Splay::rot->v);\n    Splay::rot->v=0,Splay::add(Bgn[Belong[t]],v);\n    if(!Deg[u])\n    {\n\t    Erase.push_back(*iter);\n        if(!--Deg[Fath[u]]||Up[Fath[u]]==t)Insert.push_back(Bgn[Fath[u]]);\n    }\n    ++iter;\n}\nfor(auto s:Erase)Leaf.erase(s);\nfor(auto s:Insert)Leaf.insert(s);\nInsert.clear(),Erase.clear();\n```\n\n\u89c2\u5bdf\u4e00\u4e0b\u91cd\u6784\u6811\u4e0a\u7684 dfs \u5e8f\uff0c\u53d1\u73b0\u8fd9\u672c\u8d28\u5c31\u662f**\u539f\u6811\u6b27\u62c9\u5e8f\u5bf9\u6bcf\u4e2a\u975e\u53f6\u7ed3\u70b9\u53bb\u6389\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u7684\u7ed3\u679c**\u3002\n\n\u56e0\u6b64\uff0c1 \u64cd\u4f5c\u88ab\u63cf\u8ff0\u6210\u4e86\u533a\u95f4\u67e5\u8be2 max\uff01\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86**\u533a\u95f4\u5e73\u79fb\u3001\u5355\u70b9\u4fee\u6539\u4e0e\u533a\u95f4\u67e5\u8be2 max \u7684\u9ad8\u6548\u5b9e\u73b0**\uff01\n\n\u6ce8\u610f\u5230\u6570\u636e\u8303\u56f4 $10^6$\uff0c\u5757\u72b6\u94fe\u8868\u4f3c\u4e4e\u4e0d\u662f\u5f88\u6709\u524d\u9014\uff0c\u4e8e\u662f\u6bc5\u7136\u5f03\u7597\u4e0a Splay\uff0c\u7ed3\u679c\u56e0\u4e3a\u5e38\u6570\u5927\u88ab\u5361\u5e38\u4e86\u2026\u2026\u542c\u8bf4 fhq treap \u505a\u6cd5\u4e0e\u8df3\u8868\u505a\u6cd5\u5e38\u6570\u5f88\u5c0f\uff1f~~\u5176\u5b9e\u662f\u56e0\u4e3a\u6211\u5e38\u6570\u5f88\u5927\u3002~~\n\n\u603b\u590d\u6742\u5ea6\u53ef\u4ee5\u8bc1\u660e\u662f $O((n+q)\\log n)$ \u7684\u3002\n\n---\n### Code\n\n\u8d85\u7ea7\u5feb\u8bfb\u5feb\u5199\u5565\u7684\u8fd9\u91cc\u5220\u6389\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u8d3a\u9898\u89e3\u4f1a CE\u2026\u2026\u52a0\u4e0a\u540e\u53ef\u4ee5\u7a33\u5b9a 57pts\u3002\n\n\u60f3 AC \u7684\u8bdd\u8981\u5361\u5e38\u3002~~\u6211\u4f1a\u8bf4\u6211\u662f\u6211\u81ea\u5df1\u5361\u5e38\u5361\u5230\u4e0d\u8ba9\u4ea4\u4e86\u8ba9 peterwuyihong \u5e2e\u6211\u5361\u5e38\u624d\u8fc7\u7684\u5417\uff1f~~\n\n```cpp\n#include <algorithm>\n#include <set>\n#include <stdio.h>\n#include <vector>\ntypedef long long llt;\ntypedef unsigned uint;typedef unsigned long long ullt;\ntypedef bool bol;typedef char chr;typedef void voi;\ntypedef double dbl;\ntemplate<typename T>bol _max(T&a,T b){return(a<b)?a=b,true:false;}\ntemplate<typename T>bol _min(T&a,T b){return(b<a)?a=b,true:false;}\ntemplate<typename T>T power(T base,T index,T mod){return((index<=1)?(index?base:1):(power(base*base%mod,index>>1,mod)*power(base,index&1,mod)))%mod;}\ntemplate<typename T>T lowbit(T n){return n&-n;}\ntemplate<typename T>T gcd(T a,T b){return b?gcd(b,a%b):a;}\ntemplate<typename T>T lcm(T a,T b){return(a!=0||b!=0)?a/gcd(a,b)*b:(T)0;}\ntemplate<typename T>T exgcd(T a,T b,T&x,T&y){if(!b)return y=0,x=1,a;T ans=exgcd(b,a%b,y,x);y-=a/b*x;return ans;}\nnamespace Splay\n{\n    struct node\n    {\n        uint siz;ullt v,max;node*fath,*son[2];\n        node(ullt v=0):siz(1),v(v),fath(NULL){son[0]=son[1]=NULL;}\n        voi pushup()\n        {\n            siz=1,max=v;\n            if(son[0]!=NULL)siz+=son[0]->siz,_max(max,son[0]->max);\n            if(son[1]!=NULL)siz+=son[1]->siz,_max(max,son[1]->max);\n        }\n        bol howson(){return this==fath->son[1];}\n        voi rotate()\n        {\n            if(fath==NULL)return;\n            node*f=fath,*ff=fath->fath;bol sk=howson();\n            if((fath=ff)!=NULL)ff->son[f->howson()]=this;\n            if((f->son[sk]=son[!sk])!=NULL)son[!sk]->fath=f;\n            (son[!sk]=f)->fath=this,f->pushup(),pushup();\n        }\n    };\n    node*rot;\n    voi splay(node*p)\n    {\n        if(p==NULL)return;\n        p->pushup();\n        while(p->fath!=NULL)\n        {\n            if(p->fath->fath!=NULL)(p->howson()==p->fath->howson()?p->fath:p)->rotate();\n            p->rotate();\n        }\n        rot=p;\n    }\n    voi splay2(node*p,node*to)\n    {\n        if(p==NULL)return;\n        p->pushup();\n        while(p->fath!=to)\n        {\n            if(p->fath->fath!=to)(p->howson()==p->fath->howson()?p->fath:p)->rotate();\n            p->rotate();\n        }\n        if(to==NULL)rot=p;\n    }\n    voi insert(ullt k,ullt v)\n    {\n        if(rot==NULL){rot=new node(v);return;}\n        node*p=rot;\n        while(true)\n        {\n            if(p->son[0]!=NULL)\n            {\n                if(p->son[0]->siz>k){p=p->son[0];continue;}\n                k-=p->son[0]->siz;\n            }\n            if(k<=1)\n            {\n            \tnode*w=new node(v);if((w->son[k]=p->son[k])!=NULL)p->son[k]->fath=w;\n            \tsplay((w->fath=p)->son[k]=w);return;\n            }\n            k--,p=p->son[1];\n        }\n    }\n    voi kth(ullt k,node*to=NULL)\n    {\n        node*p=rot;\n        while(true)\n        {\n            if(p->son[0]!=NULL)\n            {\n                if(p->son[0]->siz>k){p=p->son[0];continue;}\n                k-=p->son[0]->siz;\n            }\n            if(!k){splay2(p,to);return;}\n            k--,p=p->son[1];\n        }\n    }\n    voi pre()\n    {\n        if(rot==NULL||rot->son[0]==NULL)return;\n        node*p=rot->son[0];while(p->son[1]!=NULL)p=p->son[1];\n        splay(p);\n    }\n    voi erase(ullt k)\n    {\n    \tkth(k);node*p=rot;\n        if(p->son[0]==NULL){if((rot=p->son[1])!=NULL)rot->fath=NULL;}\n        else if(p->son[1]!=NULL)pre(),(p->son[1]->fath=rot)->son[1]=p->son[1];\n        else(rot=p->son[0])->fath=NULL;\n        delete p;splay(rot);\n    }\n    ullt find(uint l,uint r)\n    {\n\t\treturn kth(l-1),((r==rot->siz)?rot->son[1]->max:(kth(r,rot),rot->son[1]->son[0]->max));\n    }\n    voi add(uint k,ullt v)\n    {\n        node*p=rot;\n        while(true)\n        {\n            if(p->son[0]!=NULL)\n            {\n                if(p->son[0]->siz>k){p=p->son[0];continue;}\n                k-=p->son[0]->siz;\n            }\n            if(!k){p->v+=v,splay(p);return;}\n            k--,p=p->son[1];\n        }\n    }\n    // voi add(uint p,ullt v){kth(p),rot->v+=v,rot->pushup();}\n};\nuint Fath[1000005];\nstd::set<uint>Leaf;\nstd::vector<uint>Insert,Erase,Son[1000005];\nuint Bgn[1000005],End[1000005],cnt=1,Belong[3000005],Heavy[1000005],Siz[1000005],Up[1000005],Deg[1000005];\nullt A[1000005];\nvoi get(uint p)\n{\n\tSiz[p]=1,Heavy[p]=-1,Deg[p]=Son[p].size();\n\tfor(auto s:Son[p]){get(s),Siz[p]+=Siz[s];if(Heavy[p]==-1u||Siz[s]>Siz[Heavy[p]])Heavy[p]=s;}\n}\nvoi dfs(uint p,uint user)\n{\n    Up[Belong[cnt]=p]=user,Splay::insert(cnt,A[Belong[cnt]]),Bgn[p]=cnt++;\n    if(~Heavy[p])dfs(Heavy[p],user);\n    for(auto s:Son[p])if(s!=Heavy[p])Splay::insert(cnt,0),Belong[cnt++]=p,dfs(s,cnt-1);\n    End[p]=cnt;if(Heavy[p]==-1u)Leaf.insert(Bgn[p]);\n}\nuint read()\n{\n\tuint ans=0;chr c;do c=getchar();while(c>'9'||c<'0');\n\tdo ans=ans*10+c-'0',c=getchar();while(c>='0'&&c<='9');return ans;\n}\nint main()\n{\n    uint n,q,op,p;n=read(),q=read();for(uint i=0;i<n;i++)A[i]=read();\n    for(uint i=1;i<n;i++)Son[Fath[i]=read()-1].push_back(i);\n\tget(0),Splay::insert(0,0),dfs(0,0);\n    while(q--)\n    {\n        op=read(),p=read()-1;\n        if(op==1)cout<<Splay::find(Bgn[p],End[p])<<endl;\n        else\n        {\n            if(!Splay::find(Bgn[p],End[p]))continue;\n            Splay::erase(Bgn[p]),Splay::insert(End[p]-1,0);\n            auto iter=Leaf.upper_bound(Bgn[p]);\n            while(iter!=Leaf.end()&&*iter<End[p])\n            {\n            \tuint u(Belong[*iter]);uint t(Up[u]);\n            \tSplay::kth(t);ullt v(Splay::rot->v);\n            \tSplay::rot->v=0,Splay::add(Bgn[Belong[t]],v);\n                if(!Deg[u])\n                {\n                \tErase.push_back(*iter);\n\t                if(!--Deg[Fath[u]]||Up[Fath[u]]==t)Insert.push_back(Bgn[Fath[u]]);\n                }\n                ++iter;\n            }\n            for(auto s:Erase)Leaf.erase(s);\n            for(auto s:Insert)Leaf.insert(s);\n            Insert.clear(),Erase.clear();\n        }\n    }\n    return 0;\n}\n```\n\n---\n### \u5176\u4ed6\u601d\u8003\n\n\u6574\u7406\u4e00\u4e0b\uff0c\u57fa\u4e8e\u4e09\u5ea6\u5316\u7684\u91cd\u6784\u6811\u5177\u6709\u8fd9\u4e48\u51e0\u4e2a\u7279\u6027\uff1a\n* \u662f\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u7ed3\u70b9\u7684\u513f\u5b50\u88ab\u63cf\u8ff0\u6210\u4e86\u5176\u6240\u5728\u53f3\u94fe\u7684\u5404\u4e2a\u7ed3\u70b9\u7684\u5de6\u513f\u5b50\n* \u53f3\u94fe\u9876\u7aef\u662f\u5b9e\u7ed3\u70b9\uff0c\u5176\u4f59\u4e3a\u865a\u7ed3\u70b9\n* \u9664\u4e86\u6839\u8282\u70b9\u6240\u5728\u5de6\u94fe\uff0c\u5176\u4f59\u5de6\u94fe\u9876\u7aef\u5747\u865a\u7ed3\u70b9\uff0c\u5176\u5b83\u7ed3\u70b9\u4e3a\u5b9e\u7ed3\u70b9\n* \u91cd\u6784\u6811\u4e0a\u7684 dfs \u5e8f\u4e0e\u539f\u6811\u6b27\u62c9\u5e8f\u5bf9\u6bcf\u4e2a\u975e\u53f6\u7ed3\u70b9\u53bb\u6389\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u7684\u7ed3\u679c\u76f8\u540c\n* \u539f\u6811\u4e0a\u513f\u5b50\u540c\u65f6\u628a\u6743\u503c\u8d21\u732e\u7ed9\u7236\u4eb2\uff0c\u7b49\u4ef7\u4e8e\u91cd\u6784\u6811\u4e0a\u513f\u5b50\u5411\u7236\u4eb2\u5e73\u79fb\u6743\u503c\uff0c\u518d\u628a\u53f3\u94fe\u4e0a\u865a\u7ed3\u70b9\u6743\u503c\u8f6c\u79fb\u7ed9\u5b9e\u7ed3\u70b9\n\n\u6211\u4eec\u7ed9\u51fa\u4e86\u91cd\u6784\u6811\u7684\u6982\u5ff5\uff0c\u81f3\u4e8e\u6211\u4eec\u80fd\u5426\u7528\u6b64\u5b9e\u73b0\u5176\u4ed6\u529f\u80fd\u6291\u6216\u662f\u5efa\u7acb\u5176\u4ed6\u6a21\u578b\uff0c\u8fd8\u6709\u5f85\u601d\u8003\u3002\n",
        "postTime": 1636877792,
        "uid": 105050,
        "name": "myee",
        "ccfLevel": 7,
        "title": "7952"
    },
    {
        "content": "\u81ea\u5df1\u7684\u8d5b\u65f6\u505a\u6cd5\u548c\u5b98\u65b9\u505a\u6cd5\u7565\u6709\u4e0d\u540c\uff0c\u5c31\u6765\u53d1\u4e00\u4e0b\u3002\n\n\u8fd9\u9898\u64cd\u4f5c\u4e00\u6b21\u540e\uff0c\u5b50\u6811\u4e2d\u7684\u53f6\u5b50\u8282\u70b9\u4f1a\u53d8\u6210 0\uff0c\u8003\u8651\u590d\u6742\u5ea6\u5747\u644a\uff0c\u6bcf\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6\u4e0e \u5220\u53bb\u53f6\u5b50\u4e2a\u6570 \u76f8\u5173\uff0c\u590d\u6742\u5ea6\u5c31\u6b63\u786e\u3002\n\n\u89c2\u5bdf\u5230\u6bcf\u6b21\u5411\u4e0a\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u5982\u679c\u662f\u4e00\u6761\u94fe\u5c31\u76f8\u5f53\u4e8e\u94fe\u4e0a\u6240\u6709\u4e0b\u9762\u7684\u6743\u503c\u5411\u4e0a\u79fb\u52a8\uff0c\u53ea\u6709\u513f\u5b50\u4e2a\u6570 $\\ge 2$ \u7684\u65f6\u5019\u624d\u662f\u628a\u513f\u5b50\u52a0\u8d77\u6765\u3002\n\n\u8003\u8651\u4e00\u5f00\u59cb\u628a\u201c\u94fe\u201d\u5168\u90e8\u7f29\u8d77\u6765\uff0c\u76f8\u5f53\u4e8e\u5efa\u53f6\u5b50\u8282\u70b9\u7684\u865a\u6811\uff0c\u8fd9\u6837\u4fdd\u7559\u7684\u201c\u94fe\u201d\u6761\u6570\u5c31\u662f $O(\\text{\u53f6\u5b50\u8282\u70b9\u4e2a\u6570})$\u3002\n\n\u5bf9\u4e8e\u6bcf\u6761\u94fe\uff08\u865a\u6811\u4e0a\u7684\u4e00\u6761\u8fb9\uff09\uff0c\u5f00\u4e00\u4e2a FHQ-Treap \u7ef4\u62a4\u94fe\u4e0a\u7684\u6743\u503c\u3002\n\n\u4fee\u6539\u64cd\u4f5c\uff1a\u76f4\u63a5 dfs \u865a\u6811\u7684\u90a3\u4e2a\u5b50\u6811\uff0c\u5bf9\u4e8e\u4e0b\u9762\u6bcf\u6761\u94fe\u90fd\u662f\u5220\u6389\u6700\u4e0a\u9762\u4e00\u4e2a\u6743\u503c\uff0c\u5728\u6700\u4e0b\u9762\u52a0\u5165\u6bcf\u4e2a\u513f\u5b50\u8fb9\u7684\u6743\u503c\u548c\u3002\u5176\u5b9e\u5c31\u662f\u5728\u6a21\u62df\u64cd\u4f5c\uff0c\u90fd\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u5b9e\u73b0\u3002\n\n\u67e5\u8be2\u64cd\u4f5c\uff1a\u5bf9\u4e8e\u67e5\u8be2\u70b9\u6240\u5728\u7684\u90a3\u6761\u94fe\uff0c\u53ef\u4ee5 split \u51fa\u4e0b\u9762\u4e00\u6bb5\uff1b\u53e6\u5916\u5728\u5b50\u6811\u91cc\u7684\u6743\u503c\u53ef\u4ee5 dfs \u5e8f\u7ebf\u6bb5\u6811\uff0c\u5728\u524d\u9762\u4fee\u6539\u64cd\u4f5c\u7684\u65f6\u5019\u5c31\u7ef4\u62a4\u597d\u3002\n\n\u7136\u540e\u4f60\u5199\u4e86\uff0c\u4ea4\u4e86\uff0c\u53ea\u80fd\u62ff 28 \u5206\uff01\uff08\u94fe\uff0c\u83ca\u82b1\uff0c\u968f\u673a\u6811\uff09\n\n\u4e0a\u9762\u90a3\u4e2a\u505a\u6cd5\u662f\u6709\u590d\u6742\u5ea6\u95ee\u9898\u7684\uff0c\u5728\u4e00\u4e9b\u53f6\u5b50\u8282\u70b9\u88ab\u5220\u6389\u4e4b\u540e\uff0c\u53ef\u80fd\u51fa\u73b0\u4e86\u66f4\u591a\u513f\u5b50\u4e2a\u6570 = 1 \u7684\u70b9\uff0c\u90a3\u5c31\u8981\u7ee7\u7eed\u7f29\u8d77\u6765\uff0c\u624d\u80fd\u4fdd\u8bc1\u590d\u6742\u5ea6\u3002\n\n\u60f3\u4e86\u4e00\u4f1a\uff0c\u53d1\u73b0\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u94fe\u9876\uff0c\u6bcf\u6b21\u4fee\u6539\u6bcf\u4e2a\u70b9\u7684\u4e00\u4e2a\u513f\u5b50\u7684\u5e73\u8861\u6811\u5982\u679c\u88ab\u5220\u7a7a\u90a3\u5c31\u628a\u8fd9\u4e2a\u513f\u5b50\u4ece\u5b83\u7684\u513f\u5b50\u5217\u8868\u91cc\u5220\u6389\uff0c\u5982\u679c\u53ea\u5269\u4e00\u4e2a\u513f\u5b50\u4e86\u5c31\u8981\u628a\u513f\u5b50\u94fe\u7f29\u5230\u5b83\u81ea\u5df1\u94fe\u4e0a\uff0c\u76f8\u5f53\u4e8e\u4e24\u4e2a treap \u5408\u5e76\u4e00\u4e0b\u3002\uff08\u6709\u5f88\u591a\u7ec6\u8282\uff09\n\n\uff08\u6ce8\u610f\u6bcf\u6b21\u4fee\u6539\u5b8c\u5e73\u8861\u6811\u90fd\u8981\u5728 dfn \u7ebf\u6bb5\u6811\u91cc update \u4e00\u4e0b\uff09\n\n~~\u4ee3\u7801\u4e0d\u957f\uff0c\u624d 200 \u884c~~\uff0c\u4e0b\u9762\u662f\u5220\u53bb\u90e8\u5206\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#define fi first\n#define se second\n#define pb push_back\n#define mkp make_pair\ntypedef pair<int,int>pii;\ntypedef vector<int>vi;\n\n#define maxn 1000005\n#define inf 0x3f3f3f3f\n\nint n,m,a[maxn],fa[maxn];\nvi e[maxn],dw[maxn];\n\nint ftop[maxn],dep[maxn];\nint dfn[maxn],out[maxn],idx;\n\ninline int top(int u){\n\twhile(u!=ftop[u])u=ftop[u]=ftop[ftop[u]];\n\treturn u;\n}\n\nstruct sgt{\n\tll val[maxn<<2];\n\tvoid mdf(int p,int l,int r,int x,ll v){\n\t\tif(l==r)return val[p]=v,void();\n\t\tint mid=l+r>>1;\n\t\tx<=mid?mdf(p<<1,l,mid,x,v):mdf(p<<1|1,mid+1,r,x,v);\n\t\tval[p]=max(val[p<<1],val[p<<1|1]);\n\t}\n\tll ask(int p,int l,int r,int ql,int qr){\n\t\tif(ql>qr)return 0;\n\t\tif(l>=ql&&r<=qr)return val[p];\n\t\tint mid=l+r>>1;ll res=0;\n\t\tif(ql<=mid)res=max(res,ask(p<<1,l,mid,ql,qr));\n\t\tif(qr>mid)res=max(res,ask(p<<1|1,mid+1,r,ql,qr));\n\t\treturn res;\n\t}\n}T;\n\nint rt[maxn];\nll val[maxn],mx[maxn];\nint ls[maxn],rs[maxn],cnt,sz[maxn];\nunsigned int rnd[maxn];\nmt19937 qwqwq(1337); \ninline int newn(int x){\n\tint u=++cnt;\n\tval[u]=mx[u]=x;\n\tsz[u]=1;\n\treturn u;\n}\ninline void up(int p){\n\tmx[p]=max(mx[ls[p]],max(mx[rs[p]],val[p]));\n\tsz[p]=sz[ls[p]]+sz[rs[p]]+1;\n}\nint merge(int u,int v){\n\tif(!u||!v)return u|v;\n\tif(rnd[u]<rnd[v])return rs[u]=merge(rs[u],v),up(u),u;\n\treturn ls[v]=merge(u,ls[v]),up(v),v;\n}\nvoid split(int p,int k,int&x,int&y){\n\tif(!p)return x=y=0,void();\n\tif(sz[ls[p]]<k) x=p,split(rs[p],k-sz[ls[p]]-1,rs[x],y),up(x);\n\telse y=p,split(ls[p],k,x,ls[y]),up(y);\n}\ninline void upd(int u){\n\tT.mdf(1,1,n,dfn[u],mx[rt[u]]);\n}\n\nvoid dfs(int u,int tp)\n{\n\tftop[u]=tp;\n\tdep[u]=dep[fa[u]]+1;\n\tdfn[u]=++idx;\n\trt[tp]=merge(rt[tp],newn(a[u]));\n\tif(e[u].size()>=2){\n\t\tfor(auto v:e[u])\n\t\t\tdw[tp].pb(v),dfs(v,v);\n\t}\n\telse if(e[u].size()==1) dfs(e[u][0],tp);\n\tif(u==tp) upd(u);\n\tout[u]=idx;\n}\n\ninline ll ask(int u)\n{\n\tint t=top(u);\n\tint szl=dep[u]-dep[t],x,y;\n\tsplit(rt[t],szl,x,y);\n\tll res=mx[y];\n\tres=max(res,T.ask(1,1,n,dfn[u]+1,out[u]));\n\trt[t]=merge(x,y);\n\treturn res;\n}\n\nvoid suo(int u)\n{\n\tint v=dw[u][0];\n\tftop[v]=top(u);\n\trt[u]=merge(rt[u],rt[v]);\n\trt[v]=0;\n\tswap(dw[u],dw[v]),dw[v].clear();\n\tupd(v),upd(u);\n}\n\nvi del;\nll work(int u)\n{\n\tint x,y;\n\tsplit(rt[u],1,x,y);\n\tll ret=val[x];\n\tval[x]=0;\n\tif(!dw[u].size()){\n\t\trt[u]=y;\n\t\treturn upd(u),ret;\n\t}\n\tvi o;\n\tfor(auto v:dw[u]){\n\t\tll w=work(v);\n\t\tif(mx[rt[v]]) o.pb(v);\n\t\tval[x]+=w;\n\t}\n\tmx[x]=val[x];\n\tdw[u]=o;\n\trt[u]=merge(y,x);\n\tif(dw[u].size()==1) del.pb(u);\n\treturn upd(u),ret;\n}\nvoid shift(int u)\n{\n\tint x,y,z,szl=dep[u]-dep[top(u)];\n\tsplit(rt[top(u)],szl,x,y);\n\tsplit(y,1,y,z);\n\tdel.clear();\n\t\n\tint t=top(u);\n\tval[y]=0;\n\tvi o;\n\tfor(auto v:dw[t]){\n\t\tll w=work(v);\n\t\tval[y]+=w;\n\t\tif(mx[rt[v]]) o.pb(v);\n\t}\n\tmx[y]=val[y];\n\tdw[t]=o;\n\tif(dw[t].size()==1) del.pb(t);\n\trt[t]=merge(merge(x,z),y);\n\tupd(t);\n\t\n\tfor(auto x:del) suo(x);\n}\n\nsigned main()\n{\n//\tfreopen(\"my.out\",\"w\",stdout);\n\tn=read(),m=read();\n\tFor(i,1,n)a[i]=read(),rnd[i]=qwqwq();\n\tFor(i,2,n)fa[i]=read(),e[fa[i]].pb(i);\n\tdfs(1,1);\n\tFor(_,1,m){\n\t\tint op=read(),x=read();\n\t\tif(op==2)shift(x);\n\t\telse printf(\"%lld\\n\",ask(x));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1637229319,
        "uid": 151935,
        "name": "Rainbow_qwq",
        "ccfLevel": 0,
        "title": "[\u2717\u2713OI R1] T6 \u5929\u52a8\u4e07\u8c61"
    }
]