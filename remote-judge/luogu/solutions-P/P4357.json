[
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problemnew/show/P4357)\n\n\u9898\u76ee\u5927\u610f \uff1a\u7ed9\u5b9an\u4e2a\u70b9,\u6c42\u7b2ck\u8fdc\u70b9\u5bf9\u8ddd\u79bb$(n<=100000,k<=min(100,\\frac{n*(n+1)}{2}))$\n\nK-Dtree\u6a21\u677f\u9898\uff0c\u7528rand(),\u8f6e\u6362\u5206\u5272\uff0c\u65b9\u5dee\u5224\u65ad\u5206\u5272\u65b9\u5f0f\uff0c\u4ea6\u6216\u8005\u662f\u66ff\u7f6a\u7f8a\u6811\u66b4\u529b\u91cd\u6784\u90fd\u80fd\u6109\u5feb\u7684A\u4e86\u6b64\u9898\n\nK-D tree \u5176\u5b9e\u5c31\u662f\u5728k\u7ef4\u72b6\u6001\u4e0b\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4f46\u5173\u952e\u5728\u4e8e\u6211\u4eec\u5982\u4f55\u5c06k\u7ef4\u7684\u6570\u636e\u5212\u5206\u6210\u4e00\u4e2a\u5c3d\u91cf\u5e73\u8861\u7684\u4e8c\u53c9\u6811, \u5982splay\u7528rotate\u64cd\u4f5c\u7ef4\u62a4 \uff0c fhq-treap\u7528\u968f\u673a\u5316\u7684\u601d\u60f3\u5c3d\u91cf\u4fdd\u6301\u5de6\u53f3\u5e73\u8861 \uff0c\u66ff\u7f6a\u7f8a\u6811\u7528\u5de6\u53f3\u6811\u9ad8\u76f8\u5dee\u8fbe\u5230\u591a\u5c11\u500d(\u81ea\u5df1\u8bbe\u5b9a\u7684\u5e38\u6570)\u5c31\u66b4\u529b\u91cd\u6784 \n\n\u800c\u8fd9\u91cc\u7684 K-D tree \u5c31\u662f\u7528k\u7ef4\u65b9\u5dee\u6700\u5927\u7684\u8fdb\u884c\u6392\u5e8f,\u6bcf\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9\u662f\u6574\u9897\u5b50\u6811\u7ecf\u8fc7\u67d0\u4e00\u7ef4\u6392\u5e8f\u540e\u7684\u4e2d\u4f4d\u6570\uff08\u8fd9\u4e00\u7ef4\u65b9\u5dee\u6700\u5927\uff09,\u5173\u4e8e\u627emid\uff0c\u80af\u5b9a\u4e0d\u662fsort\uff0c\u7528nth_element\u5c31\u597d\uff0c\u56e0\u4e3a\u53ea\u8981\u6ee1\u8db3\u5de6\u8fb9<mid<\u53f3\u8fb9\uff0c\u4f46\u5de6\u53f3\u4e24\u8fb9\u4e0d\u7528\u6392\u5e8f\n\n\u5173\u4e8e\u4e3a\u4ec0\u4e48\u7528\u623f\u5dee\u6392\u5e8f(\u5b9e\u9645\u4e0ak\u7ef4O(knlogn)\u8fd8\u662f\u627f\u53d7\u4e0d\u4e86\u7684)$:$\n\n\u5047\u8bbe\u6211\u4eec\u5904\u7406\u5230\u533a\u95f4$[L,R]$,\u6211\u4eec\u9009\u4e86\u4e00\u4e2a\u65b9\u5dee\u4e0d\u662f\u6700\u5927\u7684\u7ef4\u5ea6\u8fdb\u884c\u6392\u5e8f\uff0c\u90a3\u4e48\u5f88\u5927\u6982\u7387\u5de6\u53f3\u513f\u5b50\u7684\u5f53\u524d$[L,R]$\u65b9\u5dee\u6700\u5927\u7684\u4e00\u7ef4\u7684\u65b9\u5dee\u8fd8\u662f\u5f88\u5927,\u90a3\u4e48\u5c31\u96be\u4ee5\u4fdd\u8bc1\u6811\u9ad8\uff0c\u6240\u4ee5\u6bcf\u6b21\u4ee5\u65b9\u5dee\u6700\u5927\u7684\u5212\u5206 \u8f83\u4f18\n\n\u4f46\u662f\u6b64\u9898\u53ea\u6709\u4e24\u4e2a\u7ef4\u5ea6,\u800c\u4e14\u6211\u4eec\u56e0\u4e3a\u6c42\u65b9\u5dee\u5c31\u8981$2nlogn$\u6b21\u4e58\u6cd5,$2nlogn$\u6b21\u52a0\u6cd5\uff08\u4e58\u6cd5,\u9664\u6cd5\u5f88\u6162\u7684\uff09\u6240\u4ee5...\uff08\u5b9e\u6d4b$300$\u4e07\u6b21\u9664\u6cd5\u7528\u4e8637ms\uff09\n\n\u5b9e\u9645\u4e0a\u8f6e\u6362\u7ef4\u5ea6\u5206\u5272\u5bf9\u6b64\u9898\u6765\u8bf4\u662f\u975e\u5e38\u597d\u7684\uff0c\u56e0\u4e3a\u6b64\u9898\u53ea\u6709\u4e24\u4e2a\u7ef4\u5ea6\uff0c\u800c\u4e14\u590d\u6742\u5ea6\u4e3b\u8981\u5206\u914d\u5728\u5efa\u6811\u800c\u4e0d\u662f\u67e5\u8be2\u4e0a\u9762,\u5982\u679c\u5bf9\u4e8e\u67e5\u8be2\u6b21\u6570\u591a,\u7ef4\u5ea6\u5927\u7684\u9898\uff0c\u5c31\u5e94\u8be5\u4f18\u5148\u8003\u8651\u66ff\u7f6a\u7f8a\u6811\u8fdb\u884c\u91cd\u6784\u7ef4\u62a4\u6811\u9ad8\n\n\u518d\u5c31\u662f\u67e5\u8be2\u4e86\uff0c\u6bcf\u6b21\u627e\u4e0e\u70b9u\u8ddd\u79bb>\u5df2\u627e\u5230\u4e2d\u8ddd\u79bb\u6700\u5c0f\u7684\u70b9\uff08\u5806\u4e2d\u6709k\u4e2a\u5143\u7d20,\u6700\u5c0f\u7684\u5c31\u662f\u7b2ck\u8fdc\u4e86\uff09\uff0c\u5982\u679c\u627e\u5230\u4e86 $x$\u8282\u70b9,\u5148\u5224\u65ad \uff08u,x\uff09\u7684\u8ddd\u79bb\u662f\u5426\u5927\u4e8e\u5806\u9876\uff0c\u7136\u540e\u5224\u65ad\u5de6\u53f3\u513f\u5b50 **\u662f\u5426\u53ef\u80fd\u5b58\u5728**\u5927\u4e8e\u5806\u9876\u7684\u70b9,\u56e0\u4e3a\u6211\u4eec\u53ea\u80fd\u8bb0\u4e0b\u4e00\u4e2a\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u70b9\u6240\u8986\u76d6\u7684\u4e00\u5757\u533a\u57df\u800c\u4e0d\u80fd\u8bb0\u4e0b\u79bbx\u6700\u8fdc\u7684\u70b9\u3002\n\n\u5982\u679c\u53ef\u80fd\u7684\u6700\u5927\u8ddd\u79bb\u90fd<\u5806\u9876\uff0c\u5c31\u4e0d\u7528\u9012\u5f52\u4e0b\u53bb\uff0c\u5426\u5219\u5c31\u9012\u5f52\u627e\n\n\u8fd9\u5217\u8fd8\u6709\u4e2a\u4f18\u5316\uff0c\u5c31\u662f\u5982\u679cdl>=dr,\u5c31\u5148\u641c\u5de6\u8fb9\uff0c\u518d\u641c\u53f3\u8fb9\uff0c\u5426\u5219\u5c31\u5148\u641c\u53f3\u8fb9\uff0c\u518d\u641c\u5de6\u8fb9\uff08\u526a\u679d\uff09\uff0c\u4e3a\u4ec0\u4e48\u81ea\u5df1\u60f3\u5427\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <ctime>\nusing namespace std;\ntypedef long long ll;\nconst int N=1000010,inf=(1<<30);\nint opt;\nstruct Pnt{\n\tint x[2];\n}G[N];\ninline ll sqr(int x){return x*1ll*x;}\ninline int get(int L,int R){\n\tdouble ax=0,ay=0,bx=0,by=0,mod=R-L+1;\n\tfor(int i=L;i<=R;++i){\n\t\tax+=G[i].x[0];bx+=G[i].x[1];\n\t\tay+=sqr(G[i].x[0]);by+=sqr(G[i].x[1]);\n\t}\n\tax=ay*mod-ax*ax;bx=by*mod-bx*bx;\n\tif(ax>bx)return 0;\n\treturn 1;\n}\ninline bool cmp(Pnt a,Pnt b){return a.x[opt]<b.x[opt];}\n#define max_(a,b) (a>b?a:b)\n#define min_(a,b) (a<b?a:b)\n#define lc l[x]\n#define rc r[x]\npriority_queue<ll>q;\nstruct Segment_tree{\n\tint maxn[N<<1][2],minn[N<<1][2],l[N<<1],r[N<<1],cnt;\n\tPnt d[N<<1];\n\tinline void pushup(int x){\n\t\tfor(int i=0;i<2;++i){maxn[x][i]=minn[x][i]=d[x].x[i];}\n\t\tif(lc){for(int i=0;i<2;++i){maxn[x][i]=max_(maxn[x][i],maxn[lc][i]);minn[x][i]=min_(minn[x][i],minn[lc][i]);}}\n\t\tif(rc){for(int i=0;i<2;++i){maxn[x][i]=max_(maxn[x][i],maxn[rc][i]);minn[x][i]=min_(minn[x][i],minn[rc][i]);}}\n\t}\n\tinline void build(int &x,int L,int R){\n\t\tif(L>R)return;\n\t\tx=++cnt;\n\t\tint mid=(L+R)>>1;\n\t\topt=get(L,R);//\u6216\u8005opt=rand()%2,\u6216\u8005\u8f6e\u6362\u7ef4\u5ea6\u5207\u5272\u4e5f\u597d \n\t\tnth_element(G+L,G+mid,G+R+1,cmp);d[x]=G[mid];\n\t\tbuild(lc,L,mid-1);build(rc,mid+1,R);\n\t\tpushup(x);\n\t}inline ll f(Pnt a,Pnt b){return sqr(a.x[0]-b.x[0])+sqr(a.x[1]-b.x[1]);}\n\tinline ll g(Pnt a,int b){return max_(sqr(a.x[0]-maxn[b][0]),sqr(a.x[0]-minn[b][0]))+max_(sqr(a.x[1]-maxn[b][1]),sqr(a.x[1]-minn[b][1]));}\n\tinline void query(int x,Pnt y){\n\t\tll dl=-inf,dr=-inf;\n\t\tif(lc)dl=g(y,lc);\n\t\tif(rc)dr=g(y,rc);\n\t\tll di=f(y,d[x]);\n\t\tif(-q.top()<di){q.pop();q.push(-di);}\n\t\tif(dl>dr){if(-q.top()<dl)query(lc,y);if(-q.top()<dr)query(rc,y);}\n\t\telse {if(-q.top()<dr)query(rc,y);if(-q.top()<dl)query(lc,y);}\n\t}\n}T;\nint n,m;\nint main(){srand(time(NULL));\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i){scanf(\"%d%d\",&G[i].x[0],&G[i].x[1]);}\n\tfor(int i=1;i<=2*m;++i)q.push(0);\n\tT.build(T.l[0],1,n);\n\tfor(int i=1;i<=n;++i)T.query(1,G[i]);\n\tprintf(\"%lld\\n\",-q.top());\n\treturn 0;\n}\n\n\n```",
        "postTime": 1551407986,
        "uid": 54113,
        "name": "ecnerwaIa",
        "ccfLevel": 0,
        "title": "P4357 K\u8fdc\u70b9\u5bf9 KD-tree"
    },
    {
        "content": "**\u9898\u610f:**\u7ed9\u5b9a\u5e73\u9762\u4e0a\u7684 $n(n\\le 10^5)$ \u4e2a\u70b9  \uff0c\u6c42\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u4e0b\u7684\u7b2c $k(k\\le 100)$ \u8fdc\u65e0\u5e8f\u70b9\u5bf9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\n\n\u8fd9\u9053\u9898\u662f\u4e00\u9053 `K-D Tree` \u7684\u677f\u5b50\u9898\uff0c~~\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u8981\u7528 `K-D Tree`~~ \u3002\n\n\u8ba9\u6211\u4eec\u6765\u8003\u8651\u66b4\u529b\u3002\n\n\u9996\u5148\u603b\u4f53\u601d\u8def\u6211\u4eec\u8981\u627e\u5230\u5c3d\u53ef\u80fd\u8fdc\u7684\u4e00\u4e9b\u70b9\u5bf9\u8ba1\u7b97\u8ddd\u79bb\uff0c\u7ef4\u62a4 $k$ \u8fdc\u8ddd\u79bb\u7684\u4e00\u4e2a\u5806\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5efa\u7acb\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u6bcf\u627e\u5230\u4e00\u4e2a\u8ddd\u79bb\uff0c\u82e5\u5806\u4e2d\u7684\u5143\u7d20\u5c0f\u4e8e $k$ \uff0c\u76f4\u63a5\u5c06\u8ddd\u79bb\u52a0\u5165\uff0c\u5426\u5219\u4e0e\u5806\u9876\u6bd4\u8f83\uff0c\u82e5\u5927\u4e8e\u5806\u9876\uff0c\u5219\u5c06\u5bf9\u9876\u5f39\u51fa\u5e76\u52a0\u5165\u627e\u5230\u7684\u8ddd\u79bb\u3002\n\n\u53d1\u73b0 $k$ \u5176\u5b9e\u6bd4\u8f83\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u627e\u5230\u4e00\u5b9a\u6570\u91cf\u7684\u8f83\u8fdc\u70b9\u5bf9\uff0c\u5c31\u6709\u8f83\u5927\u6982\u7387\u6b63\u786e\u5730\u627e\u51fa\u524d $k$ \u8fdc\u8ddd\u79bb\u3002\n\n\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u627e\u5230\u8f83\u8fdc\u7684\u70b9\u5bf9\u3002\n\n\u4e00\u4e2a\u8d2a\u5fc3\u7b56\u7565\u662f\u5c06\u6240\u6709\u70b9\u6309 $x$ \u5750\u6807\u6392\u5e8f\uff0c\u7528\u6392\u5728\u6700\u524d\u9762\u7684\u4e00\u4e9b\u70b9\u4e0e\u6392\u5728\u6700\u540e\u9762\u7684\u4e00\u4e9b\u70b9\u914d\u5bf9\u3002\n\n\u82e5\u6240\u6709\u70b9\u90fd\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\u663e\u7136\u8fd9\u4e2a\u8d2a\u5fc3\u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f\u5728\u4e8c\u7ef4\u5e73\u9762\uff0c\u6211\u4eec\u8fd8\u4f1a\u53d7\u5230 $y$ \u5750\u6807\u7684\u5f71\u54cd\u3002\n\n\u6bd4\u5982\u4e0b\u9762\u4e00\u79cd\u60c5\u51b5\uff1a\n\n![1596590635710](http://study.xndxfz.com/wp-content/uploads/2020/08/1596590635710.png)\n\n\u6309 $x$ \u5750\u6807\u6392\u5e8f\u540e\uff0c\u82e5\u6211\u4eec\u524d\u540e\u5747\u9009\u62e9 $4$ \u4e2a\u70b9\uff0c\u6392\u5728\u9760\u524d\u4f4d\u7f6e\u7684\u4e00\u4e9b\u70b9\uff08\u7eff\u70b9\uff09\u4e0e\u6392\u5728\u9760\u540e\u4f4d\u7f6e\u7684\u4e00\u4e9b\u70b9\uff08\u7070\u70b9\uff09\u914d\u5bf9\u7ec4\u6210\u8f83\u8fdc\u70b9\u5bf9\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u4e24\u4e2a\u6a59\u70b9\u4e4b\u95f4\u7ec4\u6210\u7684\u70b9\u5bf9\u4e5f\u662f\u8f83\u8fdc\u7684\u3002\n\n\u90a3\u4e48\u600e\u4e48\u89e3\u51b3\u5462\uff1f\u4e00\u4e2a\u5f88\u7b80\u5355\u4f46\u53c8\u5f88\u6709\u6548\u7684\u65b9\u6cd5\u5c31\u662f\u2014\u2014\u65cb\u8f6c\u3002\n\n\u5c06\u6240\u6709\u70b9\u7ed5\u539f\u70b9\u65cb\u8f6c\uff0c\u90a3\u4e48\u65cb\u8f6c\u5230\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u6a59\u70b9\u5c31\u53d8\u6210 $x$ \u5750\u6807\u4e24\u7aef\u7684\u70b9\u4e86\u3002\n\n![1596591051227](http://study.xndxfz.com/wp-content/uploads/2020/08/1596591051227.png)\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u70b9\u5728 $[0,\\pi]$ \u8303\u56f4\u5185\u5747\u5300\u65cb\u8f6c\uff0c\u6bcf\u6b21\u90fd\u6392\u4e00\u904d\u5e8f\uff0c\u627e\u65cb\u8f6c\u540e $x$ \u5750\u6807\u8f83\u5c0f\u7684\u70b9\u4e0e\u8f83\u5927\u7684\u70b9\u914d\u5bf9\uff0c\u66f4\u65b0\u5806\uff0c\u6ce8\u610f\u9700\u8981\u5224\u91cd\u3002\n\n\u8bbe\u4e00\u5171\u65cb\u8f6c\u4e86 $m$ \u6b21\uff0c\u6bcf\u6b21\u5728\u524d\u540e\u5747\u627e $p$ \u4e2a\u70b9\u4e92\u76f8\u914d\u5bf9\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u7ea6\u4e3a $O(m(n\\log n+p^2))$\u3002\n\n\u901a\u8fc7\u6d4b\u8bd5\uff0c\u672c\u9898\u5728\u53d6 $m=10 ,p=240 $ \u65f6\u5373\u53ef `AC` \uff0c\u4e0d\u8fc7\u4e0a\u8ff0\u53d6\u503c\u6bd4\u8f83\u6781\u9650\uff0c\u5efa\u8bae\u53d6 $m=60,p=500$ \u5de6\u53f3\u6bd4\u8f83\u4fdd\u9669\uff0c\u5728\u5f00\u542f `O2` \u4f18\u5316\u540e\u5927\u7ea6\u53ef\u4ee5\u8dd1 $m=200,p=1000$ \u3002\n\n\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 200020\nusing namespace std;\nstruct point {\n\tint x, y, id;  //\u8bb0\u5f55\u539f\u6765\u70b9\u7684\u5750\u6807\u548c\u7f16\u53f7(\u7528\u4e8e\u5224\u91cd)\n\tdouble val;    //\u8bb0\u5f55\u65cb\u8f6c\u540e\u70b9\u7684x\u5750\u6807\n\tbool operator < (const point& a)const {\n\t\treturn val < a.val;  //\u6309\u65cb\u8f6c\u540ex\u5750\u6807\u6392\u5e8f\n\t}\n\tlong long dis(const point a) {\n\t\treturn (long long)(x - a.x) * (x - a.x) + (long long)(y - a.y) * (y - a.y);  //\u5f97\u5230\u8ddd\u79bb\n\t}\n}p[maxn];\n\npriority_queue<long long>q;  //\u7ef4\u62a4k\u8fdc\u8ddd\u79bb\nset<int>d[maxn];  //\u5224\u91cd\nint main()\n{\n\tint n, k;\n\tscanf(\"%d%d\", &n, &k);\n\tfor (int i = 1; i <= n; i++)\n\t\tscanf(\"%d%d\", &p[i].x, &p[i].y), p[i].id = i;\n\tfor (int t = 1; t <= 60; t++) {\n\t\tdouble r = 3.14159265358979 * t / 60;    //\u5747\u5300\u65cb\u8f6c\n\t\tdouble s = cosl(r), c = sinl(r);\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tp[i].val = s * p[i].x - c * p[i].y;  //\u8ba1\u7b97\u65cb\u8f6c\u540e\u70b9\u7684x\u5750\u6807\n\t\tsort(p + 1, p + n + 1);\n\t\tfor (int i = 1; i <= 500 && i <= n; i++) //\u5728\u6700\u5de6\u7aef\u627e\u70b9\n\t\t\tfor (int j = max(i + 1, n - 500); j <= n; j++) { //\u5728\u6700\u53f3\u7aef\u627e\u70b9\uff0c\u4e24\u4e24\u914d\u5bf9\n\t\t\t\tint a = p[i].id, b = p[j].id;\n\t\t\t\tlong long dis = p[i].dis(p[j]);\n\t\t\t\tif (q.size() < k || q.top() > -dis) {\n\t\t\t\t\tif (a > b) swap(a, b);\n\t\t\t\t\tif (d[a].count(b)) continue; //\u5224\u91cd\n\t\t\t\t\td[a].insert(b);\n\t\t\t\t\tif (q.size() >= k) q.pop();  //\u7ef4\u62a4\u5806\n\t\t\t\t\tq.push(-dis);  //\u6211\u8fd9\u91cc\u5b9a\u4e49\u7684\u662f\u5927\u6839\u5806\uff0c\u5c06\u8ddd\u79bb\u53d6\u8d1f\u5373\u53ef\u53d8\u6210\u201c\u5c0f\u6839\u5806\u201d\n\t\t\t\t}\n\t\t\t}\n\t}\n\tprintf(\"%lld\\n\", -q.top());\n}\n```\n\n",
        "postTime": 1596592363,
        "uid": 148050,
        "name": "tuxiaobei",
        "ccfLevel": 7,
        "title": "[CQOI2016]K\u8fdc\u70b9\u5bf9 \u9898\u89e3"
    },
    {
        "content": "\u6574\u4e2a\u6b63\u7ecf\u505a\u6cd5\u3002\n\n\u6bcf\u6b21\u65cb\u8f6c\u5361\u58f3\u53d6\u76f8\u9694\u6700\u8fdc\u7684\u4e24\u4e2a\u70b9\uff0c\u628a\u6240\u6709\u70b9\u548c\u8fd9\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb\u4e22\u8fdb\u5c0f\u6839\u5806\u91cc\uff0c\u7136\u540e\u628a\u8fd9\u4e24\u4e2a\u70b9\u5220\u6389\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u91cd\u590d $k$ \u6b21\u3002\u5806\u7684\u5927\u5c0f\u56fa\u5b9a\u4e3a $k$\uff0c\u6700\u540e\u5806\u9876\u5c31\u662f\u7b54\u6848\u3002\n\n\u8fd9\u6837\u505a\u4e8b\u5bf9\u7684\u3002\u8003\u8651\u4e00\u5bf9\u6ca1\u6709\u88ab\u7b97\u8fc7\u7684\u70b9\uff0c\u5728\u6bcf\u4e00\u8f6e\u4e2d\u5982\u679c\u5b83\u7684\u4e24\u4e2a\u7aef\u70b9\u90fd\u6ca1\u6709\u88ab\u5220\u6389\uff0c\u90a3\u4e48\u5b83\u5fc5\u7136\u4e0d\u5927\u4e8e\u8fd9\u4e00\u8f6e\u627e\u51fa\u6765\u7684\u76f4\u5f84\uff0c\u5426\u5219\u5b83\u80af\u5b9a\u5df2\u7ecf\u88ab\u7b97\u8fc7\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u662f $O(nk\\log n)$\uff0c\u597d\u50cf\u6709\u4e00\u4e9b\u795e\u5947\u505a\u6cd5\u53ef\u4ee5\u4f18\u5316\u4f46\u662f\u6211\u61d2\u5f97\u5199\u4e86\u3002\n\n\u4ee3\u7801\u5c01\u88c5\u5c11\u6bd4\u8f83\u4e11\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int readint(){\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxn=1e5+5;\nint n,k,x[maxn],y[maxn];\ntypedef long long ll;\nll cross(int a,int b,int c){\n\treturn 1ll*(x[c]-x[a])*(y[b]-y[a])-1ll*(x[b]-x[a])*(y[c]-y[a]);\n}\nll dist(int a,int b){\n\treturn 1ll*(x[a]-x[b])*(x[a]-x[b])+1ll*(y[a]-y[b])*(y[a]-y[b]);\n}\nint s[maxn*2],tp;\nbool vis[maxn];\npair<int,int> calc(){\n\tvector<int> ord;\n\tfor(int i=1;i<=n;i++) if(!vis[i]) ord.push_back(i);\n\tsort(ord.begin(),ord.end(),[](int a,int b){\n\t\tif(x[a]!=x[b]) return x[a]<x[b];\n\t\treturn y[a]<y[b];\n\t});\n\ts[0]=ord[0];\n\ttp=1;\n\tfor(int i=1;i<(int)ord.size();i++){\n\t\twhile(s[tp-1]!=ord[0]&&1ll*(y[ord[i]]-y[s[tp-1]])*(x[ord[i]]-x[s[tp-2]])>=1ll*(y[ord[i]]-y[s[tp-2]])*(x[ord[i]]-x[s[tp-1]])) tp--;\n\t\ts[tp++]=ord[i];\n\t}\n\tfor(int i=(int)ord.size()-2;i>=0;i--){\n\t\twhile(s[tp-1]!=ord.back()&&1ll*(y[s[tp-1]]-y[ord[i]])*(x[s[tp-2]]-x[ord[i]])>=1ll*(y[s[tp-2]]-y[ord[i]])*(x[s[tp-1]]-x[ord[i]])) tp--;\n\t\ts[tp++]=ord[i];\n\t}\n\ttp--;\n\tif(tp==2) return {s[0],s[1]};\n\tint cur=0;\n\twhile(cross(s[tp-1],s[0],s[(cur+1)%tp])>cross(s[tp-1],s[0],s[cur])) cur=(cur+1)%tp;\n\tint a=s[cur],b;\n\tif(dist(s[cur],s[0])>dist(s[cur],s[tp-1])) b=s[0];\n\telse b=s[tp-1];\n\tfor(int i=0;i<tp-1;i++){\n\t\twhile(cross(s[i],s[i+1],s[(cur+1)%tp])>cross(s[i],s[i+1],s[cur])) cur=(cur+1)%tp;\n\t\tif(dist(s[cur],s[i])>dist(a,b)){\n\t\t\ta=s[cur];\n\t\t\tb=s[i];\n\t\t}\n\t\tif(dist(s[cur],s[i+1])>dist(a,b)){\n\t\t\ta=s[cur];\n\t\t\tb=s[i+1];\n\t\t}\n\t}\n\treturn {a,b};\n}\nint main(){\n\t#ifdef LOCAL\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tfreopen(\"out.txt\",\"w\",stdout);\n\t#endif\n\tn=readint();\n\tk=readint();\n\tfor(int i=1;i<=n;i++){\n\t\tx[i]=readint();\n\t\ty[i]=readint();\n\t}\n\tpriority_queue<ll,vector<ll>,greater<ll>> pq;\n\tfor(int i=0;i<min(k,n/2);i++){\n\t\tauto res=calc();\n\t\tint a=res.first,b=res.second;\n\t\tpq.push(dist(a,b));\n\t\tif((int)pq.size()>k) pq.pop();\n\t\tvis[a]=vis[b]=1;\n\t\tfor(int j=1;j<=n;j++) if(!vis[j]){\n\t\t\tpq.push(dist(a,j));\n\t\t\tif((int)pq.size()>k) pq.pop();\n\t\t}\n\t\tfor(int j=1;j<=n;j++) if(!vis[j]){\n\t\t\tpq.push(dist(b,j));\n\t\t\tif((int)pq.size()>k) pq.pop();\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",pq.top());\n\treturn 0;\n}\n```\n\u53e6\u5916\u8fd9\u9898 kdt \u590d\u6742\u5ea6\u5e94\u8be5\u662f\u9519\u7684\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u5361\uff0c\u6709\u6ca1\u6709\u8001\u54e5\u6559\u6559\u6211\u554a\u3002",
        "postTime": 1626260822,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4357 \u3010[CQOI2016]K \u8fdc\u70b9\u5bf9\u3011"
    },
    {
        "content": "K-D Tree \u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u662f\u4e3a\u4e86\u89e3\u51b3\u591a\u7ef4\u7a7a\u95f4\u95ee\u9898\uff0c**\u77e9\u5f62\u67e5\u8be2**\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230 $O(qn^{k-1/k})$\uff0c\u662f\u4e00\u79cd\u4e0d\u6298\u4e0d\u6263\u7684\u66b4\u529b\u6570\u636e\u7ed3\u6784\u3002[P4357](/problem/P4357) \u662f\u4e00\u9053 K-D Tree \u7684\u6a21\u677f\u9898\uff0c\u56e0\u4e3a\u6b64\u9898\u7ef4\u62a4\u7684\u4fe1\u606f\u662f\u4e8c\u7ef4\u7684\uff0c\u4e14\u6709 n \u6b21\u8be2\u95ee\uff0c\u6545\u5728\u6b64\u9898\u4e2d\u7ef4\u62a4\u7684\u662f 2-D Tree\u3002\n\nK-D Tree \u53ef\u4ee5\u7ef4\u62a4\u90bb\u503c\u67e5\u8be2\uff0c\u968f\u673a\u6570\u636e\u4e0b\u590d\u6742\u5ea6\u4e3a $O(n\\log_2n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\uff0c\u4f46\u8fd9\u79cd\u57fa\u4e8e\u66b4\u529b\u526a\u679d\u7684\u7b97\u6cd5\u9700\u8981\u4e00\u4e9b\u4f18\u5316\u3002\n\nK-D Tree \u7684\u5728\u533a\u95f4 $[l,r]$ \u5efa\u6811\u7684\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n1. \u4ee4 $mid=(l+r)/2$\uff0c\u5c06 mid \u7f6e\u4e8e\u6309\u7ef4\u5ea6 $a$ \u6392\u5e8f\u540e\u7684\u4f4d\u7f6e\uff0c\u8c03\u7528\u5982\u4e0b\u51fd\u6570\u5373\u53ef\uff1a\n```cpp\nstd::nth_element(a+l,a+mid,a+r+1,cmp)\n```\n2. \u9012\u5f52\u5efa\u6811 $[l,mid-1]$ \u548c $[mid+1,r]$\uff1b\n3. \u8bb0\u5f55\u4e24\u4e2a\u7ef4\u5ea6\u7684\u6781\u503c\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\ninline void Maintain(int x){\n    lx[x]=rx[x]=a[x].x;ly[x]=ry[x]=a[x].y;\n    if(lc[x])lx[x]=min(lx[x],lx[lc[x]]),rx[x]=max(rx[x],rx[lc[x]]),\n    ly[x]=min(ly[x],ly[lc[x]]),ry[x]=max(ry[x],ry[lc[x]]);\n    if(rc[x])lx[x]=min(lx[x],lx[rc[x]]),rx[x]=max(rx[x],rx[rc[x]]),\n    ly[x]=min(ly[x],ly[rc[x]]),ry[x]=max(ry[x],ry[rc[x]]);\n    return;\n}\nint build(int l,int r){\n    if(r<l)return 0;int mid=l+((r-l)>>1),i;\n    nth_element(a+l,a+mid,a+r+1,cmpx);\n    lc[mid]=build(l,mid-1);\n    rc[mid]=build(mid+1,r);\n    Maintain(mid);return mid;\n}\n```\n\u719f\u6089\u542f\u53d1\u5f0f\u641c\u7d22\u7684\u540c\u5b66\u5e94\u8be5\u4f1a\u53d1\u73b0\uff0c`fac` \u8fd9\u4e2a\u51fd\u6570\u4e0d\u4ec5\u8d77\u5230\u4e86\u526a\u679d\u4f5c\u7528\uff0c\u8fd8\u8d77\u5230\u4e86\u51b3\u5b9a\u641c\u7d22\u987a\u5e8f\u7684\u4f30\u4ef7\u4f5c\u7528\uff01\n\n\u4e8b\u5b9e\u4e0a\uff0cK-D Tree \u90bb\u503c\u67e5\u8be2\u7684\u6838\u5fc3\u5c31\u662f\u66b4\u529b\u548c\u526a\u679d\uff0c\u5982\u4e0a\u7684\u5efa\u6811\u8fc7\u7a0b\u60f3\u8981\u5361\u6389\u8fd8\u662f\u5f88\u5bb9\u6613\u7684\uff0c\u53ea\u8981\u90e8\u5206\u6570\u636e\u4e2d $x$ \u7ef4\u9694\u5f97\u5f88\u8fd1\uff0c$y$ \u7ef4\u9694\u5f97\u5f88\u8fdc\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u8fd8\u662f\u5f88\u5bb9\u6613\u9000\u5316\uff0c\u4f46\u9274\u4e8e\u6b64\u9898\u5e76\u4e0d\u9700\u8981\u8fdb\u884c\u4f18\u5316\uff0c\u6240\u4ee5\u5148\u4e0d\u8bb2\u3002\n\n\u89e3\u51b3\u4e86\u6570\u636e\u7ef4\u62a4\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u5982\u4f55\u6c42\u7b2c $K$ \u8fdc\u7684\u70b9\u5bf9\u4e86\u3002\n\u601d\u8003\u4e00\u4e0b\uff0c\u4efb\u610f\u4e24\u70b9\u7684\u8ddd\u79bb\u90fd\u4f1a\u88ab\u8ba1\u7b97\u4e24\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u6700\u5f00\u59cb\u653e\u5165 $2K$ \u4e2a $0$\uff0c\u6bcf\u6b21\u8ba1\u7b97\u70b9\u5bf9\u65f6\uff0c\u5982\u679c\u8ddd\u79bb\u8d85\u8fc7\u5806\u9876\uff0c\u5c31\u5c06\u5806\u9876\u5f39\u51fa\uff0c\u5c06\u5f53\u524d\u8ddd\u79bb\u63d2\u5165\uff0c\u6700\u540e\u7684\u5806\u9876\u5c31\u662f\u7b54\u6848\u3002\n\n\u6700\u540e\u653e\u4e0a\u4ee3\u7801\uff08\u751a\u81f3\u901a\u8fc7\u5361\u5e38\u5f97\u5230\u4e86\u6700\u4f18\u89e3\uff01\uff09\n```cpp\n#include<bits/stdc++.h>\n#define p2(x) ((x)*(x))\nusing namespace std;\nconst int N=1e5+5;\nchar buf[1<<23],*p1,*p2,c;\n#define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<22,stdin),p1==p2))?EOF:*p1++\ninline int read(){\n    int an=0;while(!isdigit(c=gc));\n    do an=(an<<3)+(an<<1)+(c^'0');\n    while(isdigit(c=gc));return an;\n}\ntypedef unsigned long long ll;\npriority_queue<ll,vector<ll>,greater<ll> >Set;\nstruct Node{int x,y;}a[N];\ninline bool cmpx(const Node &x,const Node &y){return x.x<y.x;}\ninline bool cmpy(const Node &x,const Node &y){return x.y<y.y;}\ninline ll dis(const int &x,const int &y){\n    return p2(ll(a[x].x-a[y].x))+p2(ll(a[x].y-a[y].y));\n}\nint lx[N],rx[N],ly[N],ry[N],lc[N],rc[N],n,k;\ninline ll fac(int d,int x){\n    ll ax=max(a[x].x-lx[d],rx[d]-a[x].x);\n    ll ay=max(a[x].y-ly[d],ry[d]-a[x].y);\n    return p2(ax)+p2(ay);\n}\ninline void Maintain(int x){\n    lx[x]=rx[x]=a[x].x;ly[x]=ry[x]=a[x].y;\n    if(lc[x])lx[x]=min(lx[x],lx[lc[x]]),rx[x]=max(rx[x],rx[lc[x]]),\n    ly[x]=min(ly[x],ly[lc[x]]),ry[x]=max(ry[x],ry[lc[x]]);\n    if(rc[x])lx[x]=min(lx[x],lx[rc[x]]),rx[x]=max(rx[x],rx[rc[x]]),\n    ly[x]=min(ly[x],ly[rc[x]]),ry[x]=max(ry[x],ry[rc[x]]);\n    return;\n}\nint build(int l,int r){\n    if(r<l)return 0;int mid=l+((r-l)>>1),i;\n    if(l&1)nth_element(a+l,a+mid,a+r+1,cmpx);\n    else nth_element(a+l,a+mid,a+r+1,cmpy);\n    lc[mid]=build(l,mid-1);\n    rc[mid]=build(mid+1,r);\n    Maintain(mid);return mid;\n}\ninline void asks(int l,int r,int x){\n    if(r<l)return;int mid=l+((r-l)>>1);ll w=dis(mid,x);\n    if(mid!=x)if((w=dis(mid,x))>Set.top())Set.pop(),Set.push(w);\n    if(l==r)return;\n    ll fl=fac(lc[mid],x),fr=fac(rc[mid],x),Min=Set.top();\n    if(fl>Min&&fr>Min){\n        if(fl>=fr){asks(l,mid-1,x);if(fr>Set.top())asks(mid+1,r,x);}\n        else{asks(mid+1,r,x);if(fl>Set.top())asks(l,mid-1,x);}\n    }else if(fl>Min)asks(l,mid-1,x);\n    else if(fr>Min)asks(mid+1,r,x);\n    return;\n}\nint main(){\n    n=read();k=read()<<1;int i;\n    for(i=1;i<=k;++i)Set.push(0);\n    for(i=1;i<=n;++i)a[i]={read(),read()};\n    build(1,n);for(i=1;i<=n;++i)asks(1,n,i);\n    printf(\"%llu\\n\",Set.top());\n    return 0;\n}\n```\n",
        "postTime": 1636806479,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "K-D Tree \u6c42\u89e3 K \u8fdc\u70b9\u5bf9"
    },
    {
        "content": "\u9996\u5148\u89c2\u5bdf\u6570\u636e\u8303\u56f4\uff0c$K$ \u6700\u5927\u4e5f\u53ea\u6709 $100$ \uff0c\u53ef\u4ee5\u8003\u8651\u4f9d\u6b21\u6c42\u51fa\u6700\u5927\u503c\uff0c\u7b2c\u4e8c\u5927\u503c\uff0c\u7b2c\u4e09\u5927\u503c\uff0c\u6700\u540e\u6c42\u51fa\u7b2c $K$ \u5927\u503c\u3002  \n\u6211\u4eec\u7528\u4e00\u4e2a\u5927\u6839\u5806\u6765\u8bb0\u5f55\u5f53\u524d\u7684\u6700\u5927\u503c\u3002  \n\u521d\u59cb\u65f6\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u70b9\u6c42\u51fa\u548c\u5b83\u8ddd\u79bb\u6700\u8fdc\u7684\u70b9\uff0c\u4f7f\u7528K-D tree\u5b9e\u73b0\uff0c\u5e76\u628a\u6bcf\u4e2a\u70b9\u5bf9\u90fd\u653e\u5165\u5927\u6839\u5806\u4e2d\uff0c\u8fd9\u65f6\uff0c\u6700\u8fdc\u70b9\u5bf9\u4e00\u5b9a\u662f\u5927\u6839\u5806\u7684\u5806\u9876\u3002  \n\u6211\u4eec\u53d6\u51fa\u5806\u9876\uff0c\u6c42\u51fa\u5806\u9876\u5143\u7d20\u7684\u6b21\u8fdc\u70b9\u5bf9\uff0c\u5e76\u628a\u6b21\u8fdc\u70b9\u5bf9\u653e\u5165\u5927\u6839\u5806\uff0c\u8fd9\u6837\u505a $K$ \u6b21\uff0c\u5c31\u6c42\u51fa\u4e86\u7b2c $K$ \u8fdc\u70b9\u5bf9\u3002  \n\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u628a $(x,y)$ \u548c $(y,x)$ \u770b\u505a\u4e0d\u540c\u7684\u70b9\u5bf9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4f7f $K=K * 2$\u5c31\u53ef\u4ee5\u6b63\u5e38\u8ba1\u7b97\u7b2c $K$ \u8fdc\u3002  \n\u8fd9\u4e2a\u7b97\u6cd5\u7c7b\u4f3c\u4e8e\u6c42 $n$ \u4e2a\u6570\u7ec4\u7684\u7b2c $K$ \u5927\u503c\uff0c\u53ea\u662f\u53d6\u51fa\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u64cd\u4f5c\u4f7f\u7528K-D tree \u6765\u5b9e\u73b0\u3002  \n\u8bb0\u5f97\u8bb0\u5f55\u957f\u5ea6\u65f6\u8981\u5f00long long  \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<unordered_map>\n#include<queue>\n#define ll long long\nusing namespace std;\nconst int maxn=1e5+10;\nint n,k;\nint comp;\nstruct point\n{\n\tint num;\n\tll d[2];\n\tfriend bool operator <(point a,point b){return a.d[comp]<b.d[comp];}\n\tfriend ll dis(point a,point b){return (a.d[0]-b.d[0])*(a.d[0]-b.d[0])+(a.d[1]-b.d[1])*(a.d[1]-b.d[1]);}//\u7edf\u4e00\u628a\u6839\u53f7\u53bb\u6389 \n};\nunordered_map<int,bool>ban[maxn];//\u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u5df2\u7ecf\u548c\u8c01\u914d\u5bf9 \nstruct par\n{\n\tpoint x,y;ll dis;\n\tfriend bool operator <(par a,par b){return a.dis<b.dis;}\n};\npriority_queue<par>q;\nstruct kdtree\n{\n\tstruct node\n\t{\n\t\tpoint p;ll minv[2],maxv[2];int l,r;\n\t};\n\tnode t[maxn];\n\tpoint sta[maxn];\n\tint rt,cnt;\n\tpar res;\n\tvoid update(int u)\n\t{\n\t\tint l=t[u].l,r=t[u].r;\n\t\tfor(int i=0;i<=1;i++)\n\t\t{\n\t\t\tt[u].minv[i]=t[u].maxv[i]=t[u].p.d[i];\n\t\t\tif(l)t[u].minv[i]=min(t[u].minv[i],t[l].minv[i]),t[u].maxv[i]=max(t[u].maxv[i],t[l].maxv[i]);\n\t\t\tif(r)t[u].minv[i]=min(t[u].minv[i],t[r].minv[i]),t[u].maxv[i]=max(t[u].maxv[i],t[r].maxv[i]);\n\t\t}\n\t}\n\tint build(int l,int r,int f)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tcomp=f;\n\t\tnth_element(sta+l,sta+mid,sta+r+1);\n\t\tint u=++cnt;\n\t\tt[u].p=sta[mid];\n\t\tif(l<mid)t[u].l=build(l,mid-1,f^1);\n\t\tif(r>mid)t[u].r=build(mid+1,r,f^1);\n\t\tupdate(u);return u;\n\t}\n\tll getmax(int u,point x)\n\t{\n\t\tll ret=0;\n\t\tfor(int i=0;i<=1;i++)ret+=max(x.d[i]-t[u].minv[i],t[u].maxv[i]-x.d[i])*max(x.d[i]-t[u].minv[i],t[u].maxv[i]-x.d[i]);\n\t\treturn ret;\n\t}\n\tvoid query(int u,point x)//\u5e38\u89c4 K-D tree \u8ba1\u7b97\u6700\u8fdc\u70b9 \n\t{\n\t\tif(ban[x.num].find(t[u].p.num)==ban[x.num].end()&&dis(t[u].p,x)>res.dis)//\u53ea\u6709\u5f53\u8be5\u70b9\u6ca1\u6709\u4e0e\u8be2\u95ee\u70b9\u914d\u8fc7\u5bf9\u65f6\u624d\u66f4\u65b0\u7b54\u6848 \n\t\t{\n\t\t\tres.y=t[u].p;res.dis=dis(t[u].p,x);\n\t\t}\n\t\tint l=t[u].l,r=t[u].r;\n\t\tll dl=0,dr=0;\n\t\tif(l)dl=getmax(l,x);if(r)dr=getmax(r,x);\n\t\tif(dl>dr)\n\t\t{\n\t\t\tif(dl>res.dis)query(l,x);if(dr>res.dis)query(r,x);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(dr>res.dis)query(r,x);if(dl>res.dis)query(l,x);\n\t\t}\n\t}\n}tr;\npar ans;\nint main()\n{\n\tscanf(\"%d%d\",&n,&k);k*=2;//\u4ee4 k=k*2 \n\tfor(int i=1;i<=n;i++)scanf(\"%lld%lld\",&tr.sta[i].d[0],&tr.sta[i].d[1]),tr.sta[i].num=i;\n\ttr.rt=tr.build(1,n,0);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\ttr.res.x=tr.res.y=tr.sta[i];tr.res.dis=0;\n\t\ttr.query(tr.rt,tr.sta[i]);//\u8ba1\u7b97\u6700\u8fdc\u70b9 \n\t\tq.push(tr.res); //\u653e\u5165\u5927\u6839\u5806 \n\t\tban[tr.res.x.num][tr.res.y.num]=1;//\u8bb0\u5f55\u5df2\u51fa\u73b0\u70b9\u5bf9 \n\t}\n\twhile(k--)\n\t{\n\t\tpar now=q.top();q.pop();//\u53d6\u51fa\u5f53\u524d\u6700\u8fdc\u70b9 \n\t\tans=now;\n\t\ttr.res.x=tr.res.y=now.x;tr.res.dis=0;\n\t\ttr.query(tr.rt,now.x);//\u653e\u5165\u6b21\u8fdc\u70b9 \n\t\tq.push(tr.res);ban[tr.res.x.num][tr.res.y.num]=1;\n\t}\n\tprintf(\"%lld\",ans.dis);\n\treturn 0;\n}\n```\n",
        "postTime": 1618812082,
        "uid": 174469,
        "name": "zero4338",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4357 [CQOI2016]K \u8fdc\u70b9\u5bf9"
    },
    {
        "content": "\u8fd9\u91cc\u6765\u4e00\u4e2a\u6162\u7684\u98de\u8d77\u4f46\u662f\u80fd\u8fc7\u7684\u505a\u6cd5~~\u7136\u540e\u6211\u5c31\u56e0\u6b64\u800c\u6210\u4e3a\u4e86\u6700\u5dee\u89e3233~~\n\n\u663e\u7136\u8fd9\u9898\u8981\u7528kd-tree\u7ef4\u62a4\u70b9\u96c6\uff0c\u4f46\u662f\u548c\u697c\u4e0b\u7684\u5806\u505a\u6cd5\u4e0d\u540c\u7684\u662f\uff0c\u6211\u662f\u76f4\u63a5\u4e8c\u5206\u505a\u7684\u3002\n\n\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u6211\u4eec\u7528\u67e5\u7b2ck\u5927\u7684\u5957\u8def\u4e8c\u5206\u7b54\u6848$d$\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u70b9\u5728kd-tree\u4e0a\u67e5\u8be2\u6709\u591a\u5c11\u70b9\u5230\u4ed6\u7684\u8ddd\u79bb\u4e0d\u5c0f\u4e8e$d$\uff0c\u5224\u5b9a\u662f\u4e0d\u662f\u4e0d\u5c11\u4e8ek\u4e2a\uff0c\u8fd9\u4e2a\u5728kd-tree\u4e0a\u7ef4\u62a4\u4e00\u4e0b$size$\u548c\u5750\u6807\u7684\u6700\u503c\u8fd8\u662f\u80fd\u67e5\u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u4e25\u683c\u6309\u7167\u8fd9\u4e2a\u601d\u8def\u5199\u51fa\u6765\u4e00\u4ea4\u53d1\u73b0T\u7684\u98de\u8d77\u2026\u2026\n\n\u5176\u5b9e\u5bf9\u4e8ekd-tree\u8fd9\u4e2a\u4e1c\u897f\uff0c\u5b83\u662f\u6570\u636e\u7ed3\u6784\u5417\uff1f\u662f\u3002\u4f46\u662f\u5bf9\u8fd9\u73a9\u610f\u6211\u4eec\u8fd8\u771f\u7684\u4e0d\u80fd\u6b7b\u677f\u7684\u6309\u7167\u4e00\u822c\u6570\u636e\u7ed3\u6784\u7684\u65b9\u5f0f\u5bf9\u5f85\u4ed6\uff0c\u5982\u679c\u6211\u4eec\u6b7b\u62a0\u5b83\u7684\u590d\u6742\u5ea6\u90a3\u53ef\u80fd\u5c31wei\u4e86\u3002\u6211\u4eec\u5e94\u8be5\u77e5\u9053\u8fd9\u73a9\u610f\u5c31\u662f\u4e2a\u641c\u7d22\u526a\u679d\uff0c\u5e94\u8be5\u7528\u641c\u7d22\u90a3\u6837\u600e\u4e48\u7384\u5b66\u600e\u4e48\u641e\u3002\n\n\u5bf9\u4e8e\u8fd9\u9898\u6211\u4eec\u53d1\u73b0k\u5f88\u5c0f\uff0c\u800c\u4e8c\u5206\u4e2d\u6211\u4eec\u53ea\u662f\u627e\u662f\u4e0d\u662f\u81f3\u5c11k\u4e2a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u641c\u7d22\u5230\u4e0d\u5c11\u4e8ek\u4e2a\u4e3a\u6b62\u5373\u53ef\uff0c\u7136\u540e\u5c31\u80fdAC\u4e86\u2026\u2026\n\n\u54e6\u5bf9\u4e86\u6ce8\u610f\u628a\u641c\u51fa\u6765\u7684\u8f6c\u5316\u6210\u6709\u5e8f\u70b9\u5bf9\u7684\u4e2a\u6570\u54e6~\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define ll long long\n#define abs(_o) ((_o<0)?-(_o):_o)\n#define upmax(_a,_b) _a=max(_a,_b)\n#define upmin(_a,_b) _a=min(_a,_b)\nusing namespace std;\nnamespace ywy{\n\tinline ll get(){\n\t\tll n=0;char c;while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')break;if(c=='-')goto s;\n\t\t}n=c-'0';while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10+c-'0';else return(n);\n\t\t}s:while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10-c+'0';else return(n);\n\t\t}\n\t}\n\ttypedef struct _pt{//\u70b9 \n\t\tll x;ll y;_pt(ll i,ll j){x=i;y=j;}_pt(){}\n\t}pt;\n\tinline ll getdis(pt a,pt b){//\u4e24\u70b9\u8ddd\u79bb \n\t\tll dx=a.x-b.x,dy=a.y-b.y;\n\t\treturn(dx*dx+dy*dy);\n\t}\n\tint cmpx(const pt &a,const pt &b){//\u6309x\u6392\u5e8f \n\t\treturn(a.x<b.x);\n\t}\n\tint cmpy(const pt &a,const pt &b){//\u6309y\u6392\u5e8f \n\t\treturn(a.y<b.y);\n\t}\n\tpt pts[100001],tmp[100001],data[100001];\n\tint ch[100001][2],size[100001],gn=1;\n\tll mx[100001][2],mn[100001][2];//\u5750\u6807\u6781\u503c \n\tint build(int l,int r,int d){//kd-tree\u5efa\u6811 \n\t\tif(l>r)return(0);\n\t\tint mid=(l+r)>>1;\n\t\tint tree=gn;gn++;\n\t\tnth_element(pts+1+l,pts+1+mid,pts+1+r,d?cmpx:cmpy);\n\t\tmx[tree][0]=mn[tree][0]=pts[mid].x;\n\t\tmx[tree][1]=mn[tree][1]=pts[mid].y;\n\t\tdata[tree]=pts[mid];\n\t\tsize[tree]=r-l+1;\n\t\tch[tree][0]=build(l,mid-1,d^1);\n\t\tch[tree][1]=build(mid+1,r,d^1);\n\t\tif(ch[tree][0]){\n\t\t\tupmax(mx[tree][0],mx[ch[tree][0]][0]);\n\t\t\tupmax(mx[tree][1],mx[ch[tree][0]][1]);\n\t\t\tupmin(mn[tree][0],mn[ch[tree][0]][0]);\n\t\t\tupmin(mn[tree][1],mn[ch[tree][0]][1]);\n\t\t}\n\t\tif(ch[tree][1]){\n\t\t\tupmax(mx[tree][0],mx[ch[tree][1]][0]);\n\t\t\tupmax(mx[tree][1],mx[ch[tree][1]][1]);\n\t\t\tupmin(mn[tree][0],mn[ch[tree][1]][0]);\n\t\t\tupmin(mn[tree][1],mn[ch[tree][1]][1]);\n\t\t}\n\t\treturn(tree);\n\t}\n\tint k;int tot;//\u5728\u5168\u5c40\u7ef4\u62a4\u641c\u5230\u4e86\u591a\u5c11\u4e2a\u65b9\u4fbf\u526a\u679d \n\tvoid query(int tree,ll dis,int d,pt me){//\u67e5\u8be2 \n\t\tif(!tree)return;\n\t\tll dx=max(abs(me.x-mx[tree][0]),abs(me.x-mn[tree][0]));\n\t\tll dy=max(abs(me.y-mx[tree][1]),abs(me.y-mn[tree][1]));\n\t\tll mxdis=dx*dx+dy*dy;\n\t\tif(mxdis<dis)return;\n\t\tdx=max(0ll,mn[tree][0]-me.x)+max(0ll,me.x-mx[tree][0]);\n\t\tdy=max(0ll,mn[tree][1]-me.y)+max(0ll,me.y-mx[tree][1]);\n\t\tll mndis=dx*dx+dy*dy;\n\t\tif(mndis>=dis){\n\t\t\ttot+=size[tree];return;\n\t\t}\n\t\ttot+=(getdis(data[tree],me)>=dis);\n\t\tif(tot>=k)return;\n\t\tquery(ch[tree][0],dis,d^1,me);\n\t\tif(tot>=k)return;\n\t\tquery(ch[tree][1],dis,d^1,me);\n\t}\n\tvoid ywymain(){\n\t\tint n=get();k=get()<<1;//\u56e0\u4e3a\u641c\u5230\u7684\u662f\u65e0\u5e8f\u70b9\u5bf9\u6240\u4ee5\u8981\u628ak*2 \n\t\tfor(register int i=1;i<=n;i++){\n\t\t\ttmp[i].x=pts[i].x=get();\n\t\t\tpts[i].y=tmp[i].y=get();\n\t\t}\n\t\tint tree=build(1,n,1);\n\t\tll ans=-1,l=0,r=0x3f3f3f3f3f3f3f3f;\n\t\twhile(l<=r){\n\t\t\tll mid=(l+r)>>1;tot=0;\n\t\t\tif(mid==0)tot-=n;//\u5f53d=0\u7684\u65f6\u5019\u4f1a\u628a\u6bcf\u4e2a\u70b9\u7684\u81ea\u8eab\u7b97\u4e00\u904d\u8981\u5148\u51cf\u53bb \n\t\t\tfor(register int i=1;i<=n;i++){\n\t\t\t\tquery(tree,mid,1,tmp[i]);\n\t\t\t\tif(tot>=k)break;\n\t\t\t}\n\t\t\tif(tot>=k)ans=mid,l=mid+1;\n\t\t\telse r=mid-1\uff1b \n\t\t}\n\t\tcout<<ans<<endl\uff1b \n\t}\n}\nint main(){\n\tywy::ywymain();return(0);//\u518d\u89c1\u7a0b\u5e8f \n}\n```",
        "postTime": 1544023684,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4357 \u3010[CQOI2016]K\u8fdc\u70b9\u5bf9\u3011"
    },
    {
        "content": "## [CQOI2016]K\u8fdc\u70b9\u5bf9\n### \u9898\u610f\n\n\u6c42\u7b2c $k$ \u8fdc\u7684\u70b9\u5bf9\u3002\n\n$n,m \\leq 1e5$ \n\n$1\\leq k\\le min(100,\\frac{n*(n-1)}{2})$\n\n$0\\le x_i,y_i < 2^{31}$\n\n----\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u8fd9\u662f\u4e00\u4e2a $Kd \\ Tree$ \u88f8\u9898\n\n\u4f46\u662f\u6211\u5e76\u4e0d\u4f1a $Kd \\ Tree$\n\n\u800c $k$ \u53c8\u8fd9\u4e48\u5c0f\uff0c\u8fd9\u4ee3\u8868\u7740\u6211\u4eec\u6216\u8bb8\u6709\u5176\u4ed6\u65b9\u6cd5\u3002\n\n### \u505a\u6cd5\n\n\u8ba1\u7b97**\u5f53\u524d\u6700\u8fdc\u70b9\u5bf9** \u7684\u503c\u548c\u4e24\u4e2a\u7aef\u70b9\u3002\u5220\u9664\u8fd9\u4e24\u4e2a\u70b9,\u5e76\u8ba1\u7b97\u8d21\u732e\n\n\u8d21\u732e\u4e5f\u5c31\u662f**\u6240\u6709**\u4e0e\u8fd9\u4e24\u4e2a\u70b9**\u76f8\u8fde\u7684\u70b9**\u4e4b\u95f4\u7684\u8ddd\u79bb\n\n\u4ee5\u4e0a\u6b65\u9aa4**\u91cd\u590d $k$ \u6b21**\n\n\u6211\u4eec\u7684\u7b54\u6848\u80af\u5b9a\u662f\u5176\u4e2d\u7b2c $k$ \u8fdc\u7684\u70b9\u5bf9\n\n### \u5206\u6790\n\n\u8fd9\u6837\u663e\u7136\u662f\u5bf9\u7684\uff0c\u7b54\u6848\u4e0d\u53ef\u80fd\u8dd1\u5230\u522b\u7684\u5730\u65b9\u3002\n\n\u6240\u4ee5\u6bcf\u6b21\u7528**\u65cb\u8f6c\u5361\u58f3**\u8ba1\u7b97\u6700\u8fdc\u70b9\u5bf9\uff0c\u5220\u70b9\u5c31\u6253\u4e2a\u6807\u8bb0\uff0c\u518d\u7528\u4e2a\u5806\u7ef4\u62a4\u7b54\u6848\u3002\n\n\u590d\u6742\u5ea6 $O(n\\log n+nk+nk\\log k)$\n\n\u611f\u89c9\u6709 $O(n\\log n+k^2\\log k)$ \u7684\uff0c\u4f46\u662f\u4e0a\u9762\u7684\u5df2\u7ecf\u80fd\u8fc7\u4e86\u3002\n\n### \u4ee3\u7801\n\n```\n#include<iostream>\n#include<cmath>\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\n#define int long long\n#define N 100010\nusing namespace std;\ninline int read()\n{\n\tint neg=1,num=0;char c=getchar();\n\tfor(;!isdigit(c);c=getchar())if(c=='-')neg=-1;\n\tfor(;isdigit(c);c=getchar())num=(num<<1)+(num<<3)+c-'0';\n\treturn neg*num;\n}\nstruct node\n{\n\tint x,y,id;\n}p[N],s[N];\nint n,k,siz,tmp,top,ans;\nbool alive[N];\npriority_queue<int,vector<int>,greater<int> >q;\ninline bool cmp(node a,node b){return a.x!=b.x?a.x<b.x:a.y<b.y;}\ninline int dist(node a,node b){return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);}\ninline int cross(node a,node b,node c){return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);}\ninline void Insert(int x)\n{\n\tif(siz<k)siz++,q.push(x);\n\telse if(siz>=k && q.top()<x)q.pop(),q.push(x);\n}\ninline void Delete(int x){alive[x]=1;for(int i=1;i<=n;i++)if(!alive[i])Insert(dist(p[i],p[x]));}\ninline void Init()\n{\n\ttop=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(alive[i])continue;\n\t\tfor(;top>=2 && cross(s[top-1],s[top],p[i])>=0;top--);\n\t\ts[++top]=p[i];\n\t}\n\tfor(int i=s[top].id-1,pre=top;i>=s[1].id;i--)\n\t{\n\t\tif(alive[i])continue;\n\t\tfor(;top-pre>=1 && cross(s[top-1],s[top],p[i])>=0;top--);\n\t\ts[++top]=p[i];\n\t}\n\ts[0]=s[--top];\n}\ninline node Find()\n{\n\tInit();int ans=0,a1,a2;\n\tif(top==2){return (node){s[1].id,s[2].id};}\n\tfor(int i=0,j=2;i<top;i++)\n\t{\n\t\twhile(cross(s[i],s[i+1],s[j])>cross(s[i],s[i+1],s[j+1]))j=(j+1)%top;\n\t\tif(dist(s[i],s[j])>ans)ans=dist(s[i],s[j]),a1=s[i].id,a2=s[j].id;\n\t\tif(dist(s[i+1],s[j])>ans)ans=dist(s[i+1],s[j]),a1=s[i+1].id,a2=s[j].id;\n\t}\n\treturn (node){a1,a2};\n}\nsigned main()\n{\n\tn=tmp=read();k=read();\n\tfor(int i=1;i<=n;i++)p[i].x=read(),p[i].y=read();\n\tsort(p+1,p+n+1,cmp);\n\tfor(int i=1;i<=n;i++)p[i].id=i;\n\tfor(;k && tmp>=2;k--,tmp-=2)\n\t{\n\t\tnode a=Find();\n\t\tDelete(a.x);Delete(a.y);\n\t}\n\tprintf(\"%lld\",q.top());\n\treturn 0;\n}\n```\n\n\n\n\n\n\n",
        "postTime": 1584059653,
        "uid": 60378,
        "name": "_szh_",
        "ccfLevel": 0,
        "title": "P4357 [CQOI2016]K\u8fdc\u70b9\u5bf9"
    },
    {
        "content": "\u7b97\u6cd5\u601d\u8def\uff1a\u9996\u5148\u5bf9\u6240\u6709\u7684\u70b9\u5efa\u4e00\u4e2a2-d\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u4fdd\u7559\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u6a2a\u3001\u7eb5\u5750\u6807\u7684\u6700\u5927\u4e0e\u6700\u5c0f\u503c\u3002\u7136\u540e\u679a\u4e3e\u6bcf\u4e2a\u70b9$P_i$\uff0c\u57282-d\u6811\u4e2d\u67e5\u8be2\u4ece\u5b83\u51fa\u53d1\u5230\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb\uff0c\u5e76\u4e14\u7528\u4e00\u4e2a\u5c0f\u6839\u5806\u7ef4\u62a4\u5f53\u524d\u5df2\u77e5\u7684\u524d$2K$\u5927\u8ddd\u79bb\uff08\u7531\u4e8e\u6211\u4eec\u67e5\u8be2\u7684\u662f\u201c\u6709\u5411\u201d\u8ddd\u79bb\u6240\u4ee5\u6bcf\u4e2a\u70b9\u5bf9\u7b97\u4e862\u904d\uff09\u3002\n\n\u5728\u9012\u5f52\u67e5\u8be2\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8bbe\u5f53\u524d2-d\u6811\u8282\u70b9\u5bf9\u5e94\u7684\u70b9\u4e3a$Q$\uff0c\u5982\u679c$\\lvert P_iQ \\rvert^2 >$\u5f53\u524d\u5df2\u77e5\u7684\u7b2c$2K$\u5927\u8ddd\u79bb\uff08\u4e5f\u5c31\u662f\u5806\u9876\u7684\u503c\uff09\uff0c\u5c06\u5806\u9876\u5f39\u51fa\u5e76\u5c06$\\lvert P_iQ \\rvert ^2$\u7684\u503c\u52a0\u5165\u5806\u4e2d\u3002\u7136\u540e\u8003\u8651\u5de6\u3001\u53f3\u4e24\u68f5\u5b50\u6811\u3002\u5bf9\u4e8e\u6bcf\u68f5\u5b50\u6811\uff0c\u5206\u522b\u8ba1\u7b97\u70b9$P_i$\u5230\u5176\u4e2d\u6240\u6709\u70b9**\u53ef\u80fd**\u7684\u6700\u5927\u8ddd\u79bb\uff08\u5982\u4e0b\u56fe\uff09\uff0c\u82e5\u5927\u4e8e\u5806\u9876\u5219\u8fdb\u5165\u8be5\u5b50\u6811\u9012\u5f52\u67e5\u627e\uff0c\u5426\u5219\u53ef\u4ee5\u76f4\u63a5\u526a\u679d\u3002\n\n![Pi\u5230\u5b50\u6811\u5185\u6240\u6709\u70b9\u7684\u6700\u5927\u53ef\u80fd\u8ddd\u79bb\u5c31\u662f4\u4e2a\u7bad\u5934\u957f\u5ea6\u7684\u6700\u5927\u503c](http://images.cnblogs.com/cnblogs_com/Onlynagesha/1394498/o_luogu4357-solution.png)\n\n\u590d\u6742\u5ea6\uff1aO(\u7384\u5b66)\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u4e0d\u4e00\u5b9a\u662f$\\text{O}(N \\sqrt{N})$\uff0c\u5355\u6b21$\\text{O}(\\sqrt{N})$\u7684\u6761\u4ef6\u662f\u5982\u679c\u67e5\u8be2\u70b9\u6216\u4e8c\u7ef4\u5b50\u533a\u95f4\u662f\u5f53\u524d2-d\u6811\u8282\u70b9\u7684\u5b50\u96c6\u5219\u505c\u6b62\u5411\u4e0b\u9012\u5f52\uff0c\u800c\u672c\u9898\u5e76\u4e0d\u662f\u8fd9\u4e2a\u6a21\u578b\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n#include <functional>\n#include <limits>\n\nusing LL = long long;\nconst int maxN = (int)1e5 + 10;\n\nchar buffer[500uLL * 1024 * 1024];\nint pos;\n\nvoid* operator new(std::size_t n)\n{\n    void* res = buffer + pos;\n    pos += n;\n    return res;\n}\nvoid operator delete(void*) noexcept\n{\n    //no-op\n}\n\nstruct Node\n{\n    int min_coord[2], max_coord[2];\n    int coord[2];\n    Node *left, *right;\n\n    Node(int x, int y)\n    {\n        coord[0] = min_coord[0] = max_coord[0] = x;\n        coord[1] = min_coord[1] = max_coord[1] = y;\n        left = right = nullptr;\n    }\n    template <class CoordType>\n    explicit Node(const CoordType& pt): Node(pt.coord[0], pt.coord[1]) {}\n};\n\nstruct Point\n{\n    int coord[2];\n} point[maxN];\n\ninline LL sqr(int x) { return 1LL * x * x; }\n\ntemplate <class CoordType1, class CoordType2>\ninline LL dist(const CoordType1& A, const CoordType2& B)\n{\n    return sqr(A.coord[0] - B.coord[0]) + sqr(A.coord[1] - B.coord[1]);\n}\n\ninline LL max_possible_dist(const Node& node, const Point& pt)\n{\n    return sqr(std::max(std::abs(node.min_coord[0] - pt.coord[0]), std::abs(node.max_coord[0] - pt.coord[0]))) +\n            sqr(std::max(std::abs(node.min_coord[1] - pt.coord[1]), std::abs(node.max_coord[1] - pt.coord[1])));\n}\n\nstruct CompareNode\n{\n    int dim;\n    template <class CoordType>\n    auto operator () (const CoordType& lhs, const CoordType& rhs) -> bool {\n        return lhs.coord[dim] < rhs.coord[dim];\n    }\n};\nint N, K;\n\nNode* build_kdtree(int first, int last, int layer_bit = 0)\n{\n    if (last - first <= 0)\n        return nullptr;\n    if (last - first == 1)\n        return new Node(point[first]);\n\n    int mid = (first + last) >> 1;\n    std::nth_element(point + first, point + mid, point + last, CompareNode{layer_bit});\n    Node* res = new Node(point[mid]);\n    res->left = build_kdtree(first, mid, !layer_bit);\n    res->right = build_kdtree(mid + 1, last, !layer_bit);\n\n    for (int i: {0, 1})\n    {\n        if (res->left)\n        {\n            res->min_coord[i] = std::min(\n                    res->min_coord[i],\n                    res->left->min_coord[i]\n                    );\n            res->max_coord[i] = std::max(\n                    res->max_coord[i],\n                    res->left->max_coord[i]\n                    );\n        }\n        if (res->right)\n        {\n            res->min_coord[i] = std::min(\n                    res->min_coord[i],\n                    res->right->min_coord[i]\n                    );\n            res->max_coord[i] = std::max(\n                    res->max_coord[i],\n                    res->right->max_coord[i]\n                    );\n        }\n    }\n    return res;\n}\n\nstd::priority_queue<LL, std::vector<LL>, std::greater<LL>> pque;\n\nvoid try_add_dist(LL value)\n{\n    if (pque.size() < 2u * K)\n        pque.push(value);\n    else\n    {\n        if (value <= pque.top())\n            return;\n        pque.pop();\n        pque.push(value);\n    }\n}\n\nvoid query_kdtree(const Point& cur_point, Node* cur_node)\n{\n    LL left_md = cur_node->left ?\n            max_possible_dist(*cur_node->left, cur_point) :\n            std::numeric_limits<LL>::min();\n    LL right_md = cur_node->right ?\n            max_possible_dist(*cur_node->right, cur_point) :\n            std::numeric_limits<LL>::min();\n\n    try_add_dist(dist(cur_point, *cur_node));\n\n    if (left_md > pque.top())\n        query_kdtree(cur_point, cur_node->left);\n    if (right_md > pque.top())\n        query_kdtree(cur_point, cur_node->right);\n}\n\nint main()\n{\n    scanf(\"%d%d\", &N, &K);\n    for (int i = 0; i < N; i++)\n    {\n        scanf(\"%d%d\", point[i].coord, point[i].coord + 1);\n    }\n#ifdef SPECIALIZE_BRUTE_FORCE\n    if (N <= 1000) //Brute force\n    {\n        std::vector<LL> dist_vec;\n        for (int i = 0; i < N; i++)\n        {\n            for (int j = i + 1; j < N; j++)\n                dist_vec.push_back(dist(point[i], point[j]));\n        }\n        std::sort(dist_vec.begin(), dist_vec.end(), std::greater<LL>());\n        printf(\"%lld\\n\", dist_vec[K - 1]);\n    }\n    else\n#endif\n    {\n        Node* root = build_kdtree(0, N);\n        constexpr int init_n = 0;\n        for (int i = 0; i < init_n; i++)\n        {\n            for (int j = 0; j < N; j++)\n            {\n                if (i == j)\n                    continue;\n                try_add_dist(dist(point[i], point[j]));\n            }\n        }\n        for (int i = init_n; i < N; i++)\n        {\n            query_kdtree(point[i], root);\n        }\n        printf(\"%lld\\n\", pque.top());\n    }\n    return 0;\n}\n```",
        "postTime": 1549881211,
        "uid": 49526,
        "name": "Orina_zju",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4357 \u3010[CQOI2016]K\u8fdc\u70b9\u5bf9\u3011"
    },
    {
        "content": "\u88c6\u71c3\uff08\u70c8\u7130\u88e4\u88c6\uff01\uff01\uff09\u662fkd-tree\u4e86\uff01  \nkdtree\u662f\u4ec0\u4e48\uff1f  \n\u5c31\u662f\u8f6e\u6d41\u5728k\u4e2a\u7ef4\u5ea6\u4e0a\u5206\u5272\u6570\u636e\u5b8c\u4e86\u7c7b\u4f3c\u4e8e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7ed3\u6784  \n\u8fd8\u4e0d\u4f1a\uff1f  \n\u767e\u5ea6\u4e00\u4e0b  \n.......  \n\u597d\u4e86\u5927\u5bb6\u90fd\u4f1a\u4e86\u5427  \n\u5b8c\u4e86\u6211\u4eec\u641e\u4e2a\u5c0f\u6839\u5806  \n\u5b8c\u4e86\u6211\u4eec\u5bf9\u8fd9n\u4e2a\u70b9\u5efa\u4e2akd-tree\u5b8c\u4e86\u6bcf\u4e2a\u70b9\u8be2\u95ee\u4e00\u6b21\u5b8c\u4e86\u7528\u6211\u4eec\u7684\u8be2\u95ee\u7ed3\u679c\u66f4\u65b0\u5c0f\u6839\u5806\u91cc\u7684\u7b54\u6848\uff0c\u5728\u5806\u91cc\u9884\u5148push\u8fdb\u53bbk\u4e2a0\u8868\u793a\u6211\u4eec\u8981\u6c42\u7b2ck\u5927\uff0c\u7136\u540e\u8be2\u95ee\u7ed3\u679c\u548c\u5806\u9876\uff08\u73b0\u5728\u7684\u7b2ck\u5927\uff09\u6bd4\u8f83\uff0c\u8981\u662f\u6bd4\u8f83\u5927\u5c31\u5220\u6389\u5806\u9876\u7136\u540epush\u8fdb\u8be2\u95ee\u7ed3\u679c  \n\u5b8c\u4e86\u6211\u4eec\u53d1\u73b0\u8fd9\u4e48\u641e\u4e00\u5bf9\u70b9\u4f1a\u88ab\u6211\u4eec\u7edf\u8ba12\u6b21  \n\u628ak\u6362\u62102k\u5b8c\u7f8e\u89e3\u51b3\u3002  \n\u5b8c\u4e86\u4f60~~\u628ap4169\u4ee3\u7801\u9b54\u6539\u4e00\u4e0b~~\u5199\u5199\u5c31\u8fc7\u4e86  \n\u4ee3\u7801\uff1a  \n```\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<iostream>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\ntypedef double ddf;\nconst int N=1000000+10;\nconst int inf=0x3f3f3f3f;\nconst ddf A=0.75;\nint n,m;\npriority_queue<ll,vector<ll>,greater<ll> > q;\ninline ll sqr(ll x){return x*x;}\nstruct pnt{\n\tint x[2];\n}p[N];\nint nwd;\nbool operator <(pnt a,pnt b){\n\treturn a.x[nwd]<b.x[nwd];\n}\nstruct node{\n\tint mx[2],mn[2],sz;\n\tint ls,rs;\n\tpnt p;\n}tr[N];\nint cnt,top,bin[N],root;\nint newnode(){\n\tif(top)return bin[top--];\n\telse return ++cnt;\n}\nvoid mat(int rt){\n\tint ls=tr[rt].ls,rs=tr[rt].rs;\n\tint k=rt,l=ls,r=rs;\n\tfor(int i=0;i<2;i++){\n\t\ttr[rt].mn[i]=tr[rt].mx[i]=tr[rt].p.x[i];\n\t\tif(ls){\n\t\t\ttr[rt].mn[i]=min(tr[rt].mn[i],tr[ls].mn[i]);\n\t\t\ttr[rt].mx[i]=max(tr[rt].mx[i],tr[ls].mx[i]);\n\t\t}\n\t\tif(rs){\n\t\t\ttr[rt].mn[i]=min(tr[rt].mn[i],tr[rs].mn[i]);\n\t\t\ttr[rt].mx[i]=max(tr[rt].mx[i],tr[rs].mx[i]);\n\t\t}\n\t}\n\ttr[rt].sz=tr[ls].sz+tr[rs].sz+1;\n}\nint build(int l,int r,int dim){\n\tif(l>r)return 0;\n\tint rt=newnode(),mid=(l+r)>>1;\n\tnwd=dim;\n\tnth_element(p+l,p+mid,p+r+1);\n\ttr[rt].p=p[mid];\n\ttr[rt].ls=build(l,mid-1,dim^1);\n\ttr[rt].rs=build(mid+1,r,dim^1);\n\tmat(rt);\n\treturn rt;\n}\nll dist(pnt tp,int rt){\n\treturn max(sqr(tr[rt].mx[0]-tp.x[0]),sqr(tr[rt].mn[0]-tp.x[0]))+max(sqr(tr[rt].mx[1]-tp.x[1]),sqr(tr[rt].mn[1]-tp.x[1]));\n}\nll dist(pnt a,pnt b){\n\treturn sqr(a.x[0]-b.x[0])+sqr(a.x[1]-b.x[1]);\n}\nll ass;\nvoid fuck(int rt,pnt tp){\n\tll dl=-inf,dr=-inf;\n\tif(tr[rt].ls)dl=dist(tp,tr[rt].ls);\n\tif(tr[rt].rs)dr=dist(tp,tr[rt].rs);\n\tll sb=dist(tp,tr[rt].p);\n\tif(sb>q.top()){\n\t\tq.pop();q.push(sb);\n\t}\n\tif(dl>dr){\n\t\tif(dl>q.top())fuck(tr[rt].ls,tp);\n\t\tif(dr>q.top())fuck(tr[rt].rs,tp);\n\t}\n\telse{\n\t\tif(dr>q.top())fuck(tr[rt].rs,tp);\n\t\tif(dl>q.top())fuck(tr[rt].ls,tp);\n\t}\n}\nint main(){\n\t//freopen(\"b\",\"r\",stdin);\n//\tfreopen(\"a\",\"w\",stdout);\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)scanf(\"%d%d\",&p[i].x[0],&p[i].x[1]);\n\troot=build(1,n,0);\n\tint op,x,y,z;\n\tpnt tp;\n\tfor(int i=1;i<=m*2;i++)q.push(0);\n\tfor(int i=1;i<=n;i++){\n\t\ttp=p[i];\n\t\tfuck(root,tp);\n\t}\n\tprintf(\"%lld\\n\",q.top());\n\treturn 0;\n}\n```",
        "postTime": 1529323567,
        "uid": 38725,
        "name": "xiwang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4357 \u3010[CQOI2016]K\u8fdc\u70b9\u5bf9\u3011"
    },
    {
        "content": "## Solution\n\nK-D Tree \u6a21\u677f . OI \u4e2d\u7684 K-D Tree \u5927\u591a\u4e3a 2-D Tree .\n\n\u4e0b\u9762\u5bf9 2-D Tree \u8fdb\u884c\u7b80\u5355\u7684\u4ecb\u7ecd .\n\n\u9996\u5148\u5e73\u9762\u4e0a\u6709\u5f88\u591a\u4e2a\u70b9 : ( \u8d3a\u4e00\u5f20\u56fe )\n\n![](https://oi-wiki.org/ds/images/kdt1.jpg)\n\n\u8003\u8651\u5efa\u7acb\u6811\u5f62\u5173\u7cfb .\n\n\u6211\u4eec\u5148\u4ee5 $x$ \u8f74\u5efa\u7acb 2-D Tree . \u8003\u8651\u5230\u65f6\u95f4\u590d\u6742\u5ea6 , \u6211\u4eec\u4ee5 $x$ \u8f74\u6b63\u4e2d\u95f4\u7684\u90a3\u4e2a\u6570\u4e3a\u6839 , \u5de6\u8fb9\u662f\u5de6\u5b50\u6811 , \u53f3\u8fb9\u662f\u53f3\u5b50\u6811 .\n\n\u7136\u540e\u5efa\u7b2c\u4e8c\u5c42\u7684\u65f6\u5019 , \u4e3a\u4e86\u80fd\u5b58\u4f4f\u66f4\u591a\u7684\u4fe1\u606f , \u4ee5 $y$ \u8f74\u5efa\u7acb 2-D Tree .\n\n\u6240\u4ee5\u8fd9\u6837\u641e\u4e0b\u6765 , \u6bcf\u4e00\u4e2a 2-D Tree \u90fd\u5bf9\u5e94\u4e00\u4e2a\u77e9\u9635 . \u4e00\u4e2a\u70b9\u5230\u77e9\u9635\u7684\u8ddd\u79bb\u5f88\u597d\u5224\u65ad !\n\n\u590d\u6742\u5ea6 : $O(n \\log n)$ .\n\n\u8003\u8651\u67e5\u8be2 . \u5f88\u5bb9\u6613\u77e5\u9053 , \u5f00\u4e00\u4e2a\u5c0f\u6839\u5806 , \u5927\u5c0f\u4e3a $2k$ ( \u6709\u91cd\u590d\u7684 ) .\n\n\u7136\u540e\u5728 2-D Tree \u4e0a\u641c\u7d22 .\n\n\u8fd9\u65f6\u5019\u53d1\u6325 2-D Tree \u7684\u5a01\u529b\u4e86 . \u8003\u8651\u5230\u5f80\u4e0b\u9012\u5f52 , \u77e9\u5f62\u662f\u53d8\u5c0f\u7684 . \u6240\u4ee5\u786e\u5b9a\u70b9\u5230\u5176\u6700\u8fdc\u8ddd\u79bb\u4e5f\u4f1a\u7f29\u77ed .\n\n\u6240\u4ee5\u5982\u679c\u786e\u5b9a\u70b9\u5230\u5f53\u524d\u77e9\u5f62\u7684\u8ddd\u79bb\u90fd\u4e0d\u53ef\u80fd\u6324\u8fdb\u524d $k$ \u5927 , \u5c31\u53ef\u4ee5\u526a\u7eb8\u4e86 .\n\n\u6ce8\u610f , \u8fd9\u4e2a\u6700\u5927\u8ddd\u79bb\u662f\u53ef\u80fd\u7684\u6700\u5927\u8ddd\u79bb , \u5c31\u50cf \"\u4f30\u4ef7\u51fd\u6570\" , \u6240\u4ee5\u6ce8\u610f\u4e0d\u8981\u548c\u5b9e\u9645\u6700\u5927\u8ddd\u79bb\u6df7\u4e3a\u4e00\u8c08 .\n\ncode :\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define ffor(i,a,b) for(int i=(a);i<=(b);i++)\n#define roff(i,a,b) for(int i=(a);i>=(b);i--)\nusing namespace std;\nconst int MAXN=100000+10;\nstruct KD_Tree {\n\tint x,y,lson,rson;\n\tint xmin,xmax,ymin,ymax;\n}kd[MAXN];\nint n,k,root;\npriority_queue<int,vector<int>,greater<int>> q;\nint build(int l,int r,int op) {\n\tif(l>r) return 0;\n\tint len=r-l+1,mid=len/2;\n\tint Root=l+mid;\n\tif(op) nth_element(kd+l,kd+l+mid,kd+r+1,[](KD_Tree a,KD_Tree b){return a.x<b.x;});\n\telse nth_element(kd+l,kd+l+mid,kd+r+1,[](KD_Tree a,KD_Tree b){return a.y<b.y;});\n\tkd[Root].lson=build(l,Root-1,op^1);\n\tkd[Root].rson=build(Root+1,r,op^1);\n\tint L=kd[Root].lson,R=kd[Root].rson;\n\tif(L+R==0) {\n\t\tkd[Root].xmin=kd[Root].xmax=kd[Root].x;\n\t\tkd[Root].ymin=kd[Root].ymax=kd[Root].y;\n\t\treturn Root;\n\t}\n\tif(!R) {\n\t\tkd[Root].xmin=min(kd[Root].x,kd[L].xmin);\n\t\tkd[Root].xmax=max(kd[Root].x,kd[L].xmax);\n\t\tkd[Root].ymin=min(kd[Root].y,kd[L].ymin);\n\t\tkd[Root].ymax=max(kd[Root].y,kd[L].ymax);\n\t\treturn Root;\n\t}\n\tif(!L) {\n\t\tkd[Root].xmin=min(kd[Root].x,kd[R].xmin);\n\t\tkd[Root].xmax=max(kd[Root].x,kd[R].xmax);\n\t\tkd[Root].ymin=min(kd[Root].y,kd[R].ymin);\n\t\tkd[Root].ymax=max(kd[Root].y,kd[R].ymax);\n\t\treturn Root;\n\t}\n\tkd[Root].xmin=min({kd[Root].x,kd[L].xmin,kd[R].xmin});\n\tkd[Root].xmax=max({kd[Root].x,kd[L].xmax,kd[R].xmax});\n\tkd[Root].ymin=min({kd[Root].y,kd[L].ymin,kd[R].ymin});\n\tkd[Root].ymax=max({kd[Root].y,kd[L].ymax,kd[R].ymax});\n\treturn Root;\n}\nint mx_dis(int x,int y,int xmin,int xmax,int ymin,int ymax) {\n\tint dis=0;\n\tint X[3]={0,xmin,xmax},Y[3]={0,ymin,ymax};\n\tffor(i,1,2) ffor(j,1,2) dis=max(dis,(x-X[i])*(x-X[i])+(y-Y[j])*(y-Y[j]));\n\treturn dis;\n}\nvoid dfs(int u,int id) {\n\tif(u==0) return ;\n\tint mx=mx_dis(kd[id].x,kd[id].y,kd[u].xmin,kd[u].xmax,kd[u].ymin,kd[u].ymax);\n\tif(mx>q.top()) {dfs(kd[u].lson,id),dfs(kd[u].rson,id);}\n\tint ndis=(kd[u].x-kd[id].x)*(kd[u].x-kd[id].x)+(kd[u].y-kd[id].y)*(kd[u].y-kd[id].y);\n\tif(ndis>q.top()) q.pop(),q.push(ndis);\n\treturn ;\n}\nsigned main() {\n\tios::sync_with_stdio(false),cin.tie(0),cout.tie(0);\n\tcin>>n>>k;\n\tffor(i,1,n) cin>>kd[i].x>>kd[i].y;\n\troot=build(1,n,0);\n\tffor(i,1,k+k) q.push(0);\n\tffor(i,1,n) dfs(root,i);\n\tcout<<q.top();\n\treturn 0;\n}\n```\n\n\u6211\u4eec\u5e94\u8be5\u6ce8\u610f\u5230 , \u8fd9\u6837\u7684\u505a\u6cd5\u662f\u76f8\u5f53\u66b4\u529b\u7684 . \u53ea\u662f\u4f18\u5316\u8fc7\u540e , \u5b83 TLE \u7684\u6982\u7387\u5c31\u5c0f\u5f97\u591a . \u6240\u4ee5\u603b\u590d\u6742\u5ea6\u4e3a : $O(\u80fd\u8fc7)$ .",
        "postTime": 1658480494,
        "uid": 120947,
        "name": "Purslane",
        "ccfLevel": 7,
        "title": "P4357"
    }
]