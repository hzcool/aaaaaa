[
    {
        "content": "109ms\uff0c\u6700\u5feb\u7684\u4e86\u5427\n\n\u9898\u610f\u80af\u5b9a\u662f\u6c42\u6700\u5c0f\u751f\u6210\u6811\u4e86\uff0c\u95ee\u9898\u5728\u4e8e\u600e\u6837\u51cf\u5c11\u65f6\u95f4\u6d88\u8017\u3002\n\n\u4e3b\u8981\u601d\u8def\u662f\u9006\u5e8f\u6c42\u89e3\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u51cf\u5c11\u4f7f\u7528Kruskal\u7684\u6b21\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u81ea\u7136\u5c31\u964d\u4e0b\u6765\u4e86\n\n\u6bcf\u6b21Kruskal\u8bb0\u5f55\u7528\u5230\u7684\u8fb9\uff0c\u5982\u679c(\u6bcf\u4e00\u5468)\u5220\u6389\u4e86\u4e00\u6761\u7528\u5230\u7684\u8fb9\uff0c\u90a3\u81ea\u7136\u9700\u8981\u91cd\u65b0\u6c42\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\uff1b\u5982\u679c\u6ca1\u7528\u5230\uff0c\u90a3\u5c31\u4e0d\u7528\u6c42\u4e86\uff0c\u76f4\u63a5\u8d4b\u503c\u4e3a\u4e0a\u4e00\u4e2a\u7ed3\u679c\u3002\n\n\u5982\u679c\u6709\u4e00\u5468\u51fa\u73b0\u4e86-1\uff0c\u90a3\u5b83\u7ee7\u7eed\u5220\u8fb9\u80af\u5b9a\u66f4\u4e0d\u8054\u901a\u4e86\uff0c\u6240\u4ee5\u4e4b\u540e\u6240\u6709\u7b54\u6848\u90fd\u662f-1\uff0cbreak\u5c31\u597d\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=205,M=6005;\n\nint n,w,Enum,H[M<<1],fa[N];\nlong long Ans[M];\nbool use[M<<1],cannot[M<<1];//use:\u8bb0\u5f55\u6700\u8fd1\u4e00\u6b21\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7528\u5230\u7684\u8fb9   cannot[ i ]:i\u8fd9\u6761\u8fb9\u4e0d\u80fd\u518d\u7528\u4e86(\u5df2\u5220)\nstruct Edge\n{\n    int fr,to,nxt,val,id;\n    bool operator <(const Edge &a)const\n    {\n        return val<a.val;\n    }\n}e[M<<1];\n\nint read()\n{\n    int now=0;bool f=false;char c=getchar();\n    while(c>'9'||c<'0')\n    {\n        if(c=='-')f=1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9')now=(now<<3)+(now<<1)+c-'0',c=getchar();\n    return f?-now:now;\n}\n\nvoid AddEdge(int u,int v,int w)\n{\n    e[++Enum].to = v;\n    e[Enum].fr = u;\n    e[Enum].nxt = H[u];\n    e[Enum].val = w;\n    H[u] = Enum;\n}\n\nint Find(int x)\n{\n    return x==fa[x]?x:fa[x]=Find(fa[x]);\n}\n\nlong long Kruskal()\n{\n    memset(use,0,sizeof use);\n    for(int i=1;i<=n;i++)\n      fa[i]=i;\n    int k=0;\n    long long tot=0;\n    for(int i=1;i<=Enum;i++)\n    {\n        if(cannot[e[i].id]) continue;\n        int r1=Find(e[i].fr),r2=Find(e[i].to);\n        if(r1!=r2)\n        {\n            ++k;tot+=e[i].val;\n            use[e[i].id]=1;//printf(\"use:%d\\n\",e[i].id);\n            fa[r1]=r2;\n        }\n        if(k==n-1)\n          break;\n    }\n    return k==n-1?tot:-1;\n}\n\nint main()\n{\n    n=read(),w=read();\n    for(int a,b,c,i=1;i<=w;i++)\n//      Fr[i]=read(),To[i]=read),Val[i]=read();\n      a=read(),b=read(),c=read(),AddEdge(a,b,c),e[i].id=i;\n    sort(e+1,e+Enum+1);\n    Ans[w]=Kruskal();\n    for(int i=w-1;i;i--)\n    {\n        cannot[i+1]=1;//printf(\"cannot:%d\\n\",i+1);\n        if(use[i+1])\n          Ans[i]=Kruskal();//printf(\"OK\\n\");\n        else\n          Ans[i]=Ans[i+1];\n        if(Ans[i]==-1)//\u4e0d\u8fde\u901a\uff0c\u90a3\u4e4b\u540e\u7684\u80af\u5b9a\u4e5f\u4e0d\u8fde\u901a \n        {\n            for(int j=1;j<i;j++)\n              Ans[j]=-1;\n            break;\n        }\n    }\n    for(int i=1;i<=w;i++)\n      printf(\"%lld\\n\",Ans[i]);\n    return 0;\n}\n```",
        "postTime": 1498640409,
        "uid": 39887,
        "name": "SovietPower\u2728",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "\u770b\u4e86\u770b\u5927\u4f6c\u4eec\u5199\u7684\u4ee3\u7801\uff0c\u611f\u5230\u5341\u5206\u61f5\u6bd4\u3002\u6bd5\u7adf\u662f\u521d\u5b66\u8005\u3002\u5199\u7684\u4ee3\u7801\u592a\u96be\u61c2\u4e86\u3002\u3002\u7ecf\u5178\u4f5c\u6cd5\uff1akruskal\u3002\u4ee3\u7801\u7b80\u5355\u6613\u61c2\uff0c\u5229\u4e8e\u521d\u5b66\u8005\u7406\u89e3\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nstruct node\n{\n    int u,v,w,p;\n}edge[1000000];                  //\u7ed3\u6784\u4f53\uff1a\u8d77\u70b9\u7ec8\u70b9\u8fb9\u6743\u3002\nbool mark[1000000];\nint fa[1000000];                 //\u8ba4\u7239\u6570\u7ec4\u3002\nint n,m,num=1;\nvoid add(int x,int y,int z)      //\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\uff0c\u4f60\u4eec\u5e94\u8be5\u5b66\u4e86\u3002\n{\n    edge[num].u=x;\n    edge[num].v=y;\n    edge[num].w=z;\n    edge[num].p=num;\n    num++;\n}\nint find(int x) \n{\n    if(fa[x]==x)\n        return x;                //\u8ba4\u4eb2\u7239\u55bd\uff01\uff01\n    return fa[x]=find(fa[x]);\n}\nvoid unionn(int x,int y)\n{\n    int fx=find(x);\n    int fy=find(y);\n    fa[fx]=fy;                 //kruskal\u6838\u5fc3\uff1a\u5e76\u67e5\u96c6\uff0c\u5fc5\u987b\u4f1a\uff01\uff01\n}\nvoid kruskal(int p)\n{\n    int ans=0;\n    int k=0;                  //\u8ba1\u6570\u5668\uff0c\u522b\u6f0f\u4e86\uff01\n    for(int i=1;i<=n;i++)\n        fa[i]=i;\n    for(int i=1;i<=num-1;i++)\n    {\n        if(find(edge[i].u)!=find(edge[i].v)&&edge[i].p<=p)\n        {\n            unionn(edge[i].u,edge[i].v);\n            ans+=edge[i].w;       //\u7d2f\u52a0\u8fb9\u6743\uff01\n            k++;\n        }\n        if(k==n-1)               //\u8ba1\u6570\u5668\u7684\u7528\u9014\uff01\n        {\n            cout<<ans<<endl;\n            return;\n        }\n    }\n    cout<<-1<<endl;           //\u4e0d\u80fd\u627e\u5230\u4e00\u7ec4\u53ef\u4ece\u4efb\u4e00\u8349\u5730\u901a\u8fbe\u53e6\u4e00\u8349\u5730\u7684\u517d\u5f84\uff0c\u8f93\u51fa \u201c-1\u201d\u3002\n}\nbool comp(node a,node b)\n{\n    return a.w<b.w;\n}\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n        fa[i]=i;\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        cin>>x>>y>>z;              //\u8f93\u5165\u5e76\u5b58\u56fe\u3002\n        add(x,y,z);\n    }\n    sort(edge+1,edge+num,comp);    //\u7ed3\u6784\u4f53\u6392\u5e8f\u3002\n    for(int i=1;i<=m;i++)\n    kruskal(i);\t\t\t\t\t   //\u5feb\u8981\u7ed3\u675f\u55bd\uff01\n    return 0;                      \n}\n```\n\u6700\u540e\uff0c\u795d\u7287\u7287\u4eec\u7701\u9009\u6210\u529f\uff01",
        "postTime": 1523178607,
        "uid": 68622,
        "name": "King\u4e28\u5e1d\u5fa1\u5a01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "# \u6700\u5c0f\u751f\u6210\u6811&Kruskal\n\n\u672c\u9898\u662f\u8981\u52a8\u6001\u6784\u9020\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff1b\n\n\u6240\u4ee5\u4f60\u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u60f3\u8c61\u6709\u4e00\u4e2a\u9ed1\u888b\u5b50\u91cc\u6709\u5f88\u591a\u6811\u679d\uff0c\u6bcf\u6761\u6811\u679d\u90fd\u6709\u957f\u5ea6\uff0c\u4f60\u53ef\u4ee5\u4ece\u888b\u5b50\u91cc\u5c06\u6811\u679d\u4e00\u4e2a\u4e00\u4e2a\u7684\u62ff\u51fa\u6765\uff0c\u7136\u540e\u73b0\u5728\u4f60\u60f3\u62fc\u51fa\u4e00\u68f5\u6709n\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u4e14\u6bcf\u4e2a\u8282\u70b9\u6709\u5e8f\u53f7\uff0c\u6bcf\u6761\u6811\u679d\u53ea\u80fd\u56fa\u5b9a\u7684\u5c06\u4e24\u4e2a\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u5f53\u4f60\u6bcf\u62ff\u51fa\u4e00\u6839\u6811\u679d\u7684\u65f6\u5019\uff0c\u4f60\u5c31\u8981\u770b\u770b\u662f\u5426\u80fd\u62fc\u51fa\u8fd9\u68f5\u6811\uff0c\u5982\u679c\u80fd\uff0c\u90a3\u95f2\u7684\u6ca1\u4e8b\u5e72\u7684\u4f60\u8fd8\u8981\u62fc\u51fa\u957f\u5ea6\u6700\u5c0f\u7684\u4e00\u9897\u6811\uff1b\n\n\u9898\u610f\u4e86\u89e3\u4e86\uff0c\u90a3\u6211\u4eec\u4e00\u8d77\u6765\u770b\u770b\u601d\u8def\uff1a\n\n1. \u9996\u5148\uff0c\u5728\u6811\u8fd8\u6ca1\u6709\u62fc\u51fa\u6765\u4e4b\u524d\uff0c\u6709\u4e00\u6839\u6811\u679d\u53ef\u4ee5\u5c06\u4e24\u4e2a\u8fd8\u6ca1\u6709\u76f4\u63a5\u6216\u95f4\u63a5\u8fde\u8d77\u6765\u7684\u8fde\u63a5\u8d77\u6765\uff0c\u90a3\u4e48\u6beb\u4e0d\u72b9\u8c6b\uff0c\u4e0d\u7ba1\u5b83\u591a\u957f\uff0c\u6211\u90fd\u4f1a\u5c06\u5b83\u9009\u4e0a\uff1b\u5f88\u660e\u663e\u8fd9\u79cd\u60c5\u51b5\u53ea\u5b58\u5728\u4e8e\u4f60\u8fd8\u6ca1\u6709\u5c06\u6811\u8fde\u8d77\u6765\u7684\u65f6\u5019\uff0c\u6240\u4ee5\u5728\u8fd9\u4e4b\u524d\u7684\u8f93\u51fa\u90fd\u662f-1\uff1b\n\n1. \u5982\u679c\u8fd9\u6839\u6811\u679d\u8fde\u63a5\u7684\u662f\u5df2\u7ecf\u53ef\u4ee5\u76f4\u63a5\u6216\u95f4\u63a5\u8fde\u8d77\u6765\u7684\u70b9\uff0c\u90a3\u4e48\u5c31\u8d70\u4e00\u904dKruskal\uff0c\u770b\u770b\u662f\u4e0d\u662f\u53ef\u4ee5\u5c06\u5176\u4e2d\u7684\u4e00\u6839\u6811\u679d\u66ff\u6362\u6389\uff0c\u4e0d\u8fc7\u5728\u8fd9\u4e4b\u524d\uff0c\u5b83\u9700\u8981\u6bd4\u8fd9\u4e9b\u6811\u679d\u4e2d\u6700\u957f\u7684\u90a3\u4e00\u6839\u8981\u77ed\uff0c\u8fd9\u662f\u663e\u800c\u6613\u89c1\u7684\uff1b\u6700\u540e\u5c31\u53ef\u4ee5\u5c06\u90a3\u6839\u88ab\u66ff\u6362\u7684\u6811\u679d\u6254\u6389\u4e86\uff0c**\u6254\u4e86\u4ee5\u540e\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u518d\u8003\u8651\u8fd9\u6839\u6811\u679d\u4e86\uff0c\u4f60\u6254\u6389\u7684\u6811\u679d\uff0c\u5728\u540e\u9762\u59cb\u7ec8\u90fd\u7528\u4e0d\u5230\uff0c\u8fd9\u65f6\u5019\u4f60\u53ef\u4ee5\u60f3\u60f3Kruskal\u662f\u5982\u4f55\u64cd\u4f5c\u7684\uff0c\u9996\u5148\u5047\u8bbe\u4f60\u4e0d\u628a\u5b83\u6254\u6389\uff0c\u90a3\u540e\u9762\u62ff\u51fa\u6765\u7684\u6811\u679d\u8981\u4e48\u6bd4\u5b83\u957f\u6216\u7b49\u4e8e\u5b83\uff0c\u56e0\u4e3a\u5728Kruskal\u65f6\u8fb9\u65f6\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u5728\u4e4b\u524d\u5c31\u5df2\u7ecf\u5c06\u8fd9\u6839\u6811\u679d\u6392\u9664\u4e86\uff0c\u90a3\u6bd4\u5b83\u77ed\u7684\u8bdd\uff0c\u90a3\u5c31\u66f4\u6ca1\u6709\u8fd9\u6839\u6811\u679d\u4ec0\u4e48\u4e8b\u4e86**\uff1b\n**\u6ce8\uff1a** \u8fd9\u65f6\u4e0d\u9700\u8981\u6ee1\u8db3\u6811\u5df2\u7ecf\u5efa\u597d\uff0c\u53ea\u9700\u8981\u6ee1\u8db3\u8fd9\u6839\u6811\u679d\u8fde\u63a5\u7684\u662f\u5df2\u7ecf\u53ef\u4ee5\u76f4\u63a5\u6216\u95f4\u63a5\u8fde\u8d77\u6765\u7684\u70b9\u5c31\u53ef\u4ee5\u4e86\uff1b\u800c\u4e14\u4e00\u5b9a\u4f1a\u6709\u4e00\u6839\u6811\u679d\u88ab\u6254\u6389\uff1b\n\n\u4ee3\u7801\u601d\u8def\uff1a\n\n- \u4e86\u89e3\u601d\u8def\u4ee5\u540e\u4ee3\u7801\u601d\u8def\u5e94\u8be5\u90fd\u4e0d\u6210\u95ee\u9898\uff0c\u9996\u5148\u5224\u65ad\u4e24\u70b9\u662f\u5426\u8fde\u63a5\u7528\u5e76\u67e5\u96c6\u5c31\u53ef\u4ee5\u4e86\uff1b\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u76f4\u63a5\u770b\u4ee3\u7801\u5427\uff1a\n```cpp\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint n,m;\nstruct pp{\n\tint x,y,z;\n}w[250],ww[250];//w\u7528\u6765\u52a0\u5165\u6811\u679d\uff1bww\u7528\u6765\u5b58\u6709\u7528\u7684\u6811\u679d\uff1b \nint f[205];//\u5e76\u67e5\u96c6 \nint sum;//\u8bb0\u5f55\u8fb9\u6743 \nint t=0;//\u8bb0\u5f55\u8fb9\u6570 \n```\n- \u5982\u4f55\u8f93\u5165\u5462?\u8fb9\u6570\u8bb0\u5f55\u7684\u662f\u6709\u7528\u7684\u8fb9\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\uff1a\n```cpp\nfor(int j=1;j<=m;j++){\n\t\tcin>>w[t+1].x>>w[t+1].y>>w[t+1].z;\n```\n\n\n------------\n\n- \u8fd9\u662f\u5bf9\u601d\u8def1\u7684\u5b9e\u73b0\uff1a\n```cpp\nint r1=find(w[t+1].x),r2=find(w[t+1].y);\n\t\tif(r1!=r2){\n\t\t\tt++;\n\t\t\tf[r2]=r1;\n\t\t\tsum+=w[t].z;\n\t\t\tww[t]=w[t];\n\t\t\tsort(w+1,w+1+t,cmp);//\u6392\u5e8f\u6211\u8fd9\u91cc\u6bd4\u8f83\u61d2\u76f4\u63a5\u5199\u4e86\u5feb\u6392\uff0c\u7528\u63d2\u5165\u6392\u5e8f\u4f1a\u66f4\u5feb\u4e00\u70b9\uff1b\n\t\t\tsort(ww+1,ww+1+t,cmp);\n\t\t}\n```\n\n\n------------\n\n- \u8fd9\u662f\u5bf9\u601d\u8def2\u7684\u5b9e\u73b0\uff1a\n```cpp\nelse{\n\tif(w[t+1].z<ww[t].z){\n\t\tfor(int i=1;i<=n;i++) f[i]=i;//\u91cd\u65b0\u8dd1\u4e00\u904dKruskal\uff1b\n\t\tint k=0;\n\t\tfor(int i=1;i<=t;i++){//\u63d2\u5165\u6392\u5e8f\uff1b\n\t\t\tif(w[i].z>w[t+1].z) {k=i;break;}\n\t\t}\n\t\tfor(int i=t;i>=k;i--)\n\t\t\tswap(w[i+1],w[i]);\n\t\tint tt=0;\n\t\tsum=0;\n\t\tfor(int i=1;i<=t+1;i++){\n\t\t\tint r3=find(w[i].x),r4=find(w[i].y);\n\t\t\tif(r3!=r4){\n\t\t\t\ttt++;\n\t\t\t\tww[tt]=w[i];//\u8bb0\u5f55\u6709\u7528\u8fb9\uff1b\n\t\t\t\tf[r4]=r3;\n\t\t\t\tsum+=w[i].z;\n\t\t\t}\n\t\t}\n\t}\n}\nfor(int i=1;i<=t;i++) w[i]=ww[i];//\u5b58\u5165\u6709\u7528\u8fb9\uff1b\n                \n```\n\n------------\n\n- \u6700\u540e\u8f93\u51fa\uff1a\n```cpp\nif(t==n-1){\n\tcout<<sum<<endl;\n}\nelse cout<<-1<<endl;\n```\n\n\n------------\n\n\u4e0b\u9762\u662f\u6ca1\u6709\u6ce8\u91ca\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint n,m;\nstruct pp{\n\tint x,y,z;\n}w[250],ww[250]; \nint f[205]; \nint sum; \nint t=0; \nint find(int x){\n\tif(f[x]!=x) f[x]=find(f[x]);\n\treturn f[x];\n}\nbool cmp(pp a,pp b){\n\treturn a.z<b.z;\n}\n\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)f[i]=i;\n\tfor(int j=1;j<=m;j++){\n\t\tcin>>w[t+1].x>>w[t+1].y>>w[t+1].z;\n\t\tint r1=find(w[t+1].x),r2=find(w[t+1].y);\n\t\tif(r1!=r2){\n\t\t\tt++;\n\t\t\tf[r2]=r1;\n\t\t\tsum+=w[t].z;\n\t\t\tww[t]=w[t];\n\t\t\tsort(w+1,w+1+t,cmp);\n\t\t\tsort(ww+1,ww+1+t,cmp);\n\t\t}\n\t\telse{\n\t\t\tif(w[t+1].z<ww[t].z){\n\t\t\t\tfor(int i=1;i<=n;i++) f[i]=i;\n\t\t\t\tint k=0;\n\t\t\t\tfor(int i=1;i<=t;i++){\n\t\t\t\t\tif(w[i].z>w[t+1].z) {k=i;break;}\n\t\t\t\t}\n\t\t\t\tfor(int i=t;i>=k;i--)\n\t\t\t\t\tswap(w[i+1],w[i]);\n\t\t\t\tint tt=0;\n\t\t\t\tsum=0;\n\t\t\t\tfor(int i=1;i<=t+1;i++){\n\t\t\t\t\tint r3=find(w[i].x),r4=find(w[i].y);\n\t\t\t\t\tif(r3!=r4){\n\t\t\t\t\t\ttt++;\n\t\t\t\t\t\tww[tt]=w[i];\n\t\t\t\t\t\tf[r4]=r3;\n\t\t\t\t\t\tsum+=w[i].z;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=t;i++) w[i]=ww[i];\n\t\tif(t==n-1){\n\t\t\tcout<<sum<<endl;\n\t\t}\n\t\telse cout<<-1<<endl;\n\t}\n\treturn 0;\n}\n```\n\n\n------------\n\u4ee3\u7801\u7ed9\u51fa\u6765\u4e86\uff0c\u7406\u89e3\u8fd8\u8981\u9760\u4f60\u81ea\u5df1\uff1b\u5e0c\u671b\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\u3002\n\n\n\n------------\n\n\n _\u5c3d\u7ba1\u8d70\u51fa\u534a\u751f\uff0c\u5f52\u6765\u4ecd\u662f\u5c11\u5e74_ \n\n _\u5341\u5e74OI\u4e00\u573a\u7a7a\uff0c\u4e0d\u5f00 l l\u89c1\u7956\u5b97_ \n\n _OI ER\u4e0d\u81ea\u54c0\uff0c\u7ba1\u7406AK   IOI_ \n\n _\u843d\u971e\u4e0e\u5b64\u9e5c\u9f50\u98de\uff0c\u79cb\u6c34\u5171\u957f\u5929\u4e00\u8272_ \n\n _\u5c71\u7a77\u6c34\u5c3d\u7591\u65e0\u8def\uff0c\u67f3\u6697\u82b1\u660e\u53c8\u4e00\u6751_ \n",
        "postTime": 1570285226,
        "uid": 224436,
        "name": "zfz04",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u5176\u5b9e\u5361\u7684\u662f\u6bcf\u6b21\u90fdsort\u7684\u65f6\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u653e\u5f03sort\n\n\u6539\u4e3a\u4e00\u6b21\u6027\u628a\u6240\u6709\u8fb9\u90fd\u8bb0\u5f55\u4e0b\u6765\uff08\u8bb0\u5f55\u8be5\u8fb9\u662f\u7b2c\u51e0\u6b21\u52a0\u7684\uff09\uff0c\u7136\u540e\u6392\u4e00\u904d\u5e8f\uff0c\u7136\u540e\u505a\n\nm\u904d\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6bcf\u6b21\u6700\u5c0f\u751f\u6210\u6811\u53ea\u7528\u6dfb\u52a0\u65f6\u95f4\u6bd4\u8be5\u6b21\u6700\u5c0f\u751f\u6210\u6811\u6b21\u6570\u5c0f\u7684\u8fb9\n\n2333\n\n\n------------\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint f[2002];\nint n,m,mins,ans;\nint val,a,b;\nstruct tree\n{\n    int s;\n    int e;\n    int v;\n    int si;\n};\nstruct tree A[60101];\nint cmp(tree x,tree y)\n{\n    return x.v<y.v;\n}\nint find(int x)\n{\n    if(f[x]==x)\n        return x;\n    return f[x]=find(f[x]);\n}\nvoid hb(int x,int y)\n{\n    f[x]=f[y];\n}\nvoid minset_tree(int cur)\n{\n    mins=0;ans=0;\n    /*if(edge<n-1)\n    {\n        printf(\"-1\\n\");\n        return ;\n    }*/\n    for(int i=1;i<=m;i++)\n    {\n        if(A[i].si<=cur)\n        {\n            int t1=find(A[i].s);\n            int t2=find(A[i].e);\n            if(t1!=t2)\n            {\n                hb(t1,t2);\n                ans++;\n                mins+=A[i].v;\n            }\n            //printf(\"%d \",ans);\n            if(ans==n-1)\n            {\n                printf(\"%d\\n\",mins);\n                return ;\n            }\n        }\n        else continue;\n    }\n    printf(\"-1\\n\");\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        /*for(int j=1;j<=n;j++)\n        {\n            f[j]=j;\n        }*/\n        scanf(\"%d%d%d\",&a,&b,&val);\n        A[i].s=a;\n        A[i].e=b;\n        A[i].v=val;            //\u4e00\u6b21\u6027\u8bb0\u5f55\u6240\u6709\u8fb9 \n        A[i].si=i;            //\u8bb0\u5f55\u6bcf\u6761\u8fb9\u7684\u6dfb\u52a0\u65f6\u95f4 \n        //insertsort(val);\n        //sort(A+1,A+1+i,cmp);\n        //zxscs(i);\n    }\n    sort(A+1,A+1+m,cmp);    //\u6392\u4e00\u6b21\u5e8f \n    for(int i=1;i<=m;i++)\n    {\n        if(i<n-1) \n        {\n            printf(\"-1\\n\");\n            continue;\n        }\n        for(int j=1;j<=n;j++)\n        {\n            f[j]=j;\n        }\n        minset_tree(i);\n    }\n    return 0;\n}\n```\n\n\n------------\n",
        "postTime": 1492693212,
        "uid": 21596,
        "name": "Forever\u4e36CIL",
        "ccfLevel": 6,
        "title": "P1340 \u517d\u5f84\u7ba1\u7406"
    },
    {
        "content": "\u5bf9\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u7684\u9009\u62e9\n\n\u9898\u76ee\u5927\u610f\uff1a\u6709N\u4e2a\u70b9\uff0cW\u6761\u8fb9\uff0c\u6bcf\u8f93\u5165\u4e00\u6761\u8fb9\u56de\u7b54\u4e00\u6b21\u5f53\u524d\u662f\u5426\u5b58\u5728\u6700\u5c0f\u751f\u6210\u6811\u53ca\u6700\u5c0f\u751f\u6210\u6811\u957f\u5ea6\u548c\u3002\n\n\u89e3\u9898\u601d\u8def\uff1a\u6211\u4eec\u6709\u4e24\u79cd\u5e38\u7528\u7684\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\n\nprim \uff1a\u901a\u8fc7\u679a\u4e3e\u70b9\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6bcf\u6b21\u7684\u590d\u6742\u5ea6\u4e3aO(N^2)\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8c\u53c9\u5806\u4f18\u5316\u3002\n\nkruskal\uff1a\u5148\u5c06\u6240\u6709\u8fb9\u6392\u5e8f\uff0c\u7136\u540e\u6309\u957f\u5ea6\u4ece\u5c0f\u5230\u5927\u9009\u62e9\uff0c\u9ed8\u8ba4\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u4e3b\u8981\u8017\u65f6\u4e3a\u8fb9\u7684\u6392\u5e8f\u8fc7\u7a0b\u3002\n\n\u672c\u9898\u7279\u70b9\uff1a\u9700\u8981\u6c42W\u6b21\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6bcf\u6b21\u4ec5\u589e\u52a01\u6761\u8fb9\u3002\n\n\u7b97\u6cd5\u9009\u62e9\uff1a\u8fd9\u9898\u663e\u7136\u5e94\u8be5\u9009\u62e9kruskal\u7b97\u6cd5\uff0c\u56e0\u4e3a\u6bcf\u6b21\u53ea\u589e\u52a0\u53e6\u4e00\u6761\u8fb9\uff0c\u53ea\u8981\u63d2\u5165\u4e4b\u524d\u5df2\u6392\u5e8f\u7684\u90e8\u5206\u5373\u53ef\u5b8c\u6210\u6392\u5e8f\u8fc7\u7a0b\u3002\n\n\u7531\u4e8e\u5229\u7528\u4e86\u524d\u4e00\u6b21\u7684\u8ba1\u7b97\uff0cW\u6b21kruskal\u7684\u603b\u65f6\u95f4\u964d\u5230\u4e86O(W^2)\uff0c\u53ef\u4ee5\u6f02\u4eae\u5730\u901a\u8fc7\u8be5\u9898\u3002\n\n\u5728\u672c\u9898\u4e2d\uff0cprim\u7b97\u6cd5\u6bcf\u6b21\u90fd\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\uff0c\u663e\u7136\u662f\u5341\u5206\u8d39\u529b\u7684\uff0c\u4e0d\u5b9c\u9009\u62e9\u3002\n\n```cpp\ntype rec=record\n u,v,w:longint;\nend;\nvar n,m,i,u,v,w,tot,t1,t2:longint;\n    a:array[0..200000]of rec;\n    f:array[0..200000]of longint;\nprocedure swap(var a,b:rec);\nvar t:rec;\nbegin\n t:=a; a:=b; b:=t;\nend;\nprocedure sort(u,v,w:longint);\nvar  node:rec;\n     i:longint;\nbegin\n node.u:=u; node.v:=v; node.w:=w;\n if node.w>=a[tot].w then\n begin inc(tot); a[tot]:=node; exit; end;\n inc(tot);\n a[tot]:=a[tot-1];\n a[tot-1]:=node;\n i:=tot-1;\n while (i>1)and(a[i-1].w>a[i].w)do begin\n  swap(a[i-1],a[i]);\n  dec(i);\n end;\nend;\nfunction father(x:longint):longint;\nbegin\n if f[x]=x then exit(x);\n f[x]:=father(f[x]);\n exit(father(f[x]));\nend;\nprocedure kruskal;\nvar ans,cnt,i,fx,fy,m:longint;\nbegin\n m:=tot;\n for i:=1 to m do f[i]:=i;\n cnt:=0;\n ans:=0;\n for i:=1 to m do begin\n  fx:=father(a[i].u);\n  fy:=father(a[i].v);\n  if fx<>fy then begin\n   f[fx]:=fy;\n   inc(cnt);\n   ans:=ans+a[i].w;\n  end;\n  if cnt=t1-1 then break;\n end;\n if cnt<>t1-1 then writeln('-1')\n else writeln(ans);\nend;\nbegin\n readln(t1,t2);\n for i:=1 to t2 do begin\n  readln(u,v,w);\n  sort(u,v,w);\n  kruskal;\n end;\nend.\n\n```",
        "postTime": 1502105289,
        "uid": 16456,
        "name": "ljc20020730",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "\u9898\u610f\u660e\u663e\u662f\u8981\u8dd1\u591a\u6b21kruskal\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8003\u8651\u8282\u7ea6\u65f6\u95f4\u7684\u65b9\u6cd5\n\n\u663e\u7136\u4ece\u7b2c\u4e00\u5468\u8dd1\u5230\u6700\u540e\u4e00\u5468\u592a\u8017\u65f6\u95f4\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u4f1a\u60f3\u5230\u4ece\u6700\u540e\u4e00\u5468\u5f00\u59cb\uff0c\u9006\u5e8f\u8dd1kruskal\n\n\u8fd9\u6837\u7684\u597d\u5904\u5728\u4e8e\uff0c\u4e00\u65e6\u53d1\u73b0\u67d0\u4e00\u5468\u4e0d\u80fd\u6784\u6210\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u90a3\u5468\u4e4b\u524d\u4e5f\u4e0d\u53ef\u80fd\u6784\u6210\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5c11\u8dd1\u5f88\u591a\u6b21kruskal\n\n\u56e0\u4e3a\u53ea\u80fd\u7528\u90a3\u4e00\u5468\u53ca\u4e4b\u524d\u7684\u517d\u5f84\u5efa\u6811\uff0c\u800c\u5728\u5feb\u6392\u7684\u65f6\u5019\u8fb9\u4f1a\u88ab\u6253\u4e71\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u7ed3\u6784\u4f53\u5b58\u8fb9\u65f6\u8981\u52a0\u4e00\u4e2a\u53c2\u6570\uff0c\u8bb0\u5f55\u8be5\u8fb9\u662f\u7b2c\u51e0\u5468\u7684\u517d\u5f84\n\n\u5269\u4e0b\u7684\u5c31\u662fkruskal\u7684\u57fa\u672c\u64cd\u4f5c\u4e86\n\n\u6ce8\u610f\u4e00\u70b9\uff1a\u6bcf\u6b21kruskal\u65f6\u5bf9\u4e8e\u5e76\u67e5\u96c6\u7528\u5230\u7684fa[]\u6570\u7ec4\u90fd\u8981\u5148\u521d\u59cb\u5316\u4e00\u6b21\uff08\u6211\u88ab\u8fd9\u4e2a\u5751\u4e86\u597d\u4e45\uff09\n\n\u63a5\u4e0b\u6765\u8bf7\u770b~~\u534e\u4e3d\u4e3d\u7684~~\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <algorithm>\n\nusing namespace std;\n\nstruct node\n{\n\tint u,v,w,p;//\u6dfb\u52a0\u4e00\u4e2ap\u8868\u793a\u8be5\u8fb9\u662f\u7b2cp\u5468\u7684\n}edge[6001];\n\nint n,m,num=1,ans[6001],fa[201];\n\nbool cmp(const node &a,const node &b)\n{\n\treturn a.w<b.w;//\u8d2a\u5fc3\uff0c\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n}\n\nint find(int x)\n{\n\tif(x==fa[x])\n\t   return x;\n\treturn fa[x]=find(fa[x]);\n}\n\nvoid merge(int x,int y)\n{\n\tfa[find(x)]=find(y);\n}\n\nint kruskal(int k)\n{\n\tint cnt=0,tot=0;\n\tfor(int i=1;i<=n;i++) fa[i]=i;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(cnt==n-1) break;\n\t\tif((find(edge[i].u)!=find(edge[i].v))&&(edge[i].p<=k))//\u53ea\u6709\u524dk\u5468\u7684\u624d\u7b26\u5408\n\t\t{\n\t\t\tmerge(edge[i].u,edge[i].v);\n\t\t\tcnt++;\n\t\t\ttot+=edge[i].w;\n\t\t}\n\t}\n\tif(cnt<n-1) return -1;//\u5982\u679c\u4e0d\u80fd\u6784\u6210\u6700\u5c0f\u751f\u6210\u6811\u5219\u8fd4\u56de-1\n\telse return tot;\n}\n\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>edge[i].u>>edge[i].v>>edge[i].w;\n\t\tedge[i].p=i;//\u6807\u8bb0\u5468\u6570\n\t}\n\tsort(edge+1,edge+m+1,cmp);\n\tfor(int i=m;i>=1;i--)//\u9006\u5e8f\u6c42\u89e3\n\t{\n\t\tans[i]=kruskal(i);\n\t\tif(ans[i]==-1)//\u4e00\u53d1\u73b0\u4e0d\u80fd\u5efa\u6811\u5c31\u8df3\u51fa\u5faa\u73af\uff0c\u540c\u65f6\u5c06\u524d\u9762\u7684\u5168\u8bbe\u4e3a-1\n\t\t{\n\t\t\tfor(int j=1;j<i;j++) ans[j]=-1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++) cout<<ans[i]<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1566051180,
        "uid": 130423,
        "name": "\u7edd\u827a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "## \u5206\u6790\n\u9898\u76ee\u5927\u610f\uff1a\n\u52a0m\u6b21\u8fb9\uff0c\u6bcf\u4e00\u6b21\u52a0\u8fb9\u8ba9\u4f60\u6c42\u6700\u5c0f\u751f\u6210\u6811\n\n\u5982\u679c\u6bcf\u52a0\u4e00\u6b21\u8fb9\u5c31\u8dd1\u4e00\u6b21 $Kruskal$ \u590d\u6742\u5ea6\u5c31\u4f1a\u9001\u4f60\u4e0a\u5929\n\n\u6211\u4eec\u8003\u8651\u5148\u628a\u8fb9\u5b58\u8d77\u6765\uff0c\u518d\u5012\u7740\u8f93\u51fa\n\n\u5f53\u6211\u4eec\u8981\u5220\u8fb9\u65f6\uff1a\n\n1. \u5728\u751f\u6210\u6811\u4e0a\uff1a\n\n\u6253\u4e0a\u6807\u8bb0\u5e76\u91cd\u65b0\u8dd1\u6700\u5c0f\u751f\u6210\u6811\n\n2. \u4e0d\u5728\u751f\u6210\u6811\u4e0a\uff1a\n\n\u76f4\u63a5\u5220\u53bb\n\n## \u4ee3\u7801\n\n$\\mathcal{Code:}$\n\n```cpp\n#include<cmath>\n#include<queue>\n#include<cstdio>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n#define int long long\n#define R register\n#define int long long\n#define N 1000010\nint n,m,num,t;\nint fa[N],ans[N];\ninline int read(){\n    int x=0,y=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')y=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*y;\n}\nstruct node{\n    int l,r,w,exist,use,id;\n    //exist:\u662f\u5426\u88ab\u5220\u53bb\n    //id:\u8fb9\u7684\u7f16\u53f7\n    //use:\u662f\u5426\u5728\u751f\u6210\u6811\u4e2d\n}a[N<<1];\nbool cmp(const node &a,const node &b){return a.w<b.w;}\nint cnt,head[N];\ninline int finds(int x){\n    if(x==fa[x])return x;\n    return fa[x]=finds(fa[x]);\n}\ninline void Kruskal(){\n    for(int i=1;i<=n;i++){fa[i]=i;head[i]=0;a[i].use=0;}//\u8bb0\u5f97\u8d4b\u521d\u503c\n    cnt=0;t=0;\n    int res=0;\n\tfor(int i=1;i<=m;i++){\n        int x=a[i].l,y=a[i].r;\n        if(finds(x)==finds(y)||a[i].exist==0) continue;\n        int fx=finds(x),fy=finds(y);\n        fa[fx]=fy;\n        t+=a[i].w;res++;\n        a[i].use=1;\n    }\n    if(res<n-1) t=-1;//\u5982\u679c\u9009\u62e9\u4e86\u4e0d\u591fn-1\u6761\u8def\u5f84\uff0c\u5c06t\u8d4b\u4e3a-1\n}\nsigned main(){\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tn=read();m=read();\n    for(int i=1,x,y,z;i<=m;i++){\n        x=read();y=read();z=read();\n        a[i].l=x;a[i].r=y;a[i].w=z;a[i].exist=1;a[i].id=i;\n    } \n    sort(a+1,a+1+m,cmp);\n    Kruskal();\n    ans[m]=t;\n    for(int i=m-1;i>=1;i--){\n    \tif(i<n-1){ans[i]=-1;continue;}//\u5982\u679c\u8def\u5f84\u4e0d\u591fn-1\u6761\uff0c\u5c06ans\u8d4b\u4e3a-1\n    \tint j=1;\n    \tfor(;j<=m;j++) if(a[j].id==i+1){a[j].exist=0;break;}\n\t\tif(a[j].use) Kruskal();\n\t\tans[i]=t;\n\t}\n\tfor(int i=1;i<=m;i++) cout<<ans[i]<<\"\\n\";\n\t\n//\tfclose(stdin);\n//\tfclose(stdout);\n\treturn 0;\n}\n```",
        "postTime": 1568878737,
        "uid": 123081,
        "name": "zh_dou",
        "ccfLevel": 7,
        "title": "[\u9898\u89e3]P1340 |\u517d\u5f84\u7ba1\u7406"
    },
    {
        "content": "### \u89e3\u9898\u62a5\u544a\uff1a\n\n\u9898\u610f\u6982\u8ff0\uff1a\n\n\u5728\u6bcf\u4e00\u6b21\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u6c42\u89e3\u8be5\u56fe\u662f\u5426\u5b58\u5728\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5982\u679c\u6709\u6700\u751f\u6210\u6811\uff0c\u8f93\u51fa\u8be5\u56fe\u6700\u5c0f\u751f\u6210\u6811\u6743\u503c\uff0c\u5982\u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa$-1$.\n\n\u7b97\u6cd5\u5206\u6790\uff1a\n\n\u9996\u5148\u6734\u7d20\u505a\u6cd5\u662f\u6bcf\u6b21\u52a0\u5165\u4e00\u6761\u8fb9 \u7136\u540e\u6bcf\u4e00\u6b21\u8fdb\u884c\u4e00\u6b21$Kruskal$ \u4f46\u662f\u6bcf\u4e00\u6b21\u90fd\u9700\u8981\u8fdb\u884c\u4e00\u6b21$sort$ \u53ef\u80fd\u4f1a\u88ab\u5361\u5e38\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u4f18\u5316\u65b9\u5f0f\uff0c\u80fd\u4e0d\u80fd\u51cf\u5c11\u4e43\u81f3\u4e8e\u4e0d\u9700\u8981\u8fdb\u884c\u591a\u6b21\u6392\u5e8f.\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u5728\u5b58\u8fb9\u7684\u65f6\u5019\uff0c\u5728\u6bcf\u6761\u8fb9\u50a8\u5b58\u7684\u4fe1\u606f\u7684\u57fa\u7840\u4e0a\u518d\u6dfb\u52a0\u4e00\u6761\u4fe1\u606f--\u8be5\u8fb9\u52a0\u5165\u7684\u65f6\u95f4 \u8fd9\u6837\u5728\u6bcf\u4e00\u6b21\u8fdb\u884c$Kruskal$\u65f6\uff0c\u5c31\u51cf\u5c11\u4e86$sort$\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u5b9e\u73b0\u4e86\u5c06\u5728\u7ebf\u505a\u6cd5\u8f6c\u53d8\u4e3a\u79bb\u7ebf\u505a\u6cd5\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,f[6005],px,py;\nstruct p{\n\tint x,y,z,tim;\n}a[6005];\nint find(int x){\n\tif (x==f[x]) return x;\n\treturn f[x]=find(f[x]);\n}\nbool cmp(p a,p b){\n\treturn a.z<b.z;\n}\nint Kruskal(int num){\n\tint cnt=0,tmp=0;\n\tfor (int i=1;i<=n;i++) f[i]=i;\n\tfor (int i=1;i<=m;i++){\n\t\tpx=find(a[i].x);\n\t\tpy=find(a[i].y);\n\t\tif (px==py) continue;\n\t\tif (a[i].tim<=num){\n\t\t\tcnt++;\n\t\t\ttmp+=a[i].z;\n\t\t\tf[px]=py;\n\t\t}\n\t}\n\tif (cnt!=n-1) return -1;\n\treturn tmp;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].z);\n\t\ta[i].tim=i;\n\t}\n\tsort(a+1,a+m+1,cmp);\n\tfor (int i=1;i<=m;i++)\tprintf(\"%d\\n\",Kruskal(i));\n\treturn 0;\n} \n```\n",
        "postTime": 1555313634,
        "uid": 99460,
        "name": "Hiraeth",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "\u849f\u84bb\u5728\u7ebf\u66b4\u529b\u8fc7\u4e86\uff01\uff01\uff01\n\n\u63d0\u4f9b\u4e00\u4e2a\u7070\u5e38\u66b4\u529b\u7684\u5728\u7ebf\u505a\u6cd5\n\n\u5c31\u50cf\u5176\u4ed6dalao\u6240\u8bf4\uff0c\u8fd9\u9898\u5c31\u662f\u4e00\u4e2a\u514b\u9c81\u65af\u5361\u5c14\u3002\n\n\u4f46\u4f3c\u4e4e\u4e0d\u7528\u79bb\u7ebf\uff0c\u76f4\u63a5\u5728\u7ebf\u66b4\u529b\u52a0\u8fb9\uff0c\u66b4\u529b\u5904\u7406\u5c31\u597d\u4e86\uff0c\u6bcf\u6b21\u5bf9\u4e8e\u8bfb\u5165\u7684\u8fb9\uff0c\n\n\u56e0\u4e3a\u8fd9\u6761\u8fb9\u7684\u4ef7\u503c\u53ef\u80fd\u5bf9\u5f53\u524d\u7b54\u6848\u4ea7\u751f\u5f71\u54cd\uff0c\u6240\u4ee5\u628a\u8fd9\u6761\u8fb9\u5165\u961f\uff0c\u5c31\u662f\u6bcf\u6b21\u91cd\u65b0\u8dd1\u4e00\u8fb9\u5feb\u6392\uff0c\u7136\u540e\u5728\u91cd\u65b0\u8dd1\u4e00\u8fb9\u514b\u9c81\u65af\u5361\u5c14\uff0c\u65f6\u95f4O(n lg n*w)\n\n\u91cd\u65b0\u5e76\u67e5\u96c6\u627e\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u662f\u56e0\u4e3a\u5df2\u7ecf\u6392\u597d\u4e86\u524d\u9762\u7684\u5e8f\u5217\uff0c\u6240\u4ee5\u63d2\u5f53\u524d\u8fb9\u7684\u65f6\u5019\u7528\u63d2\u5165\u6392\u5e8f\u5373\u53ef(\u6ca1\u8bd5\u8fc7)\n\n\u6700\u540e\u53ea\u8981\u5f53\u524d\u7684\u7b54\u6848\u4e0d\u4e3a-1\uff0c\u90a3\u4e48\u4e0b\u9762\u6240\u6709\u7684\u7b54\u6848\u4e5f\u80af\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u7b54\u6848\uff0c\u56e0\u4e3a\n\n\u80af\u5b9a\u80fd\u7528\u8fd9\u6b21\u7684\u51e0\u6761\u8fb9\u7ec4\u6210\u7b54\u6848\u3002\n\n\u53ea\u4e0d\u8fc7\u9700\u8981\u5361\u5361\u5e38(\u9003\n\n\u4ee3\u7801\uff1a\n```c++\n// luogu-judger-enable-o2//\u6d1b\u8c37\u81ea\u5e26\u7684O2\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"-fgcse\")\n#pragma GCC optimize(\"-fgcse-lm\")\n#pragma GCC optimize(\"-fipa-sra\")\n#pragma GCC optimize(\"-ftree-pre\")\n#pragma GCC optimize(\"-ftree-vrp\")\n#pragma GCC optimize(\"-fpeephole2\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-fsched-spec\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC optimize(\"-falign-jumps\")\n#pragma GCC optimize(\"-falign-loops\")\n#pragma GCC optimize(\"-falign-labels\")\n#pragma GCC optimize(\"-fdevirtualize\")\n#pragma GCC optimize(\"-fcaller-saves\")\n#pragma GCC optimize(\"-fcrossjumping\")\n#pragma GCC optimize(\"-fthread-jumps\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-fwhole-program\")\n#pragma GCC optimize(\"-freorder-blocks\")\n#pragma GCC optimize(\"-fschedule-insns\")\n#pragma GCC optimize(\"inline-functions\")\n#pragma GCC optimize(\"-ftree-tail-merge\")\n#pragma GCC optimize(\"-fschedule-insns2\")\n#pragma GCC optimize(\"-fstrict-aliasing\")\n#pragma GCC optimize(\"-fstrict-overflow\")\n#pragma GCC optimize(\"-falign-functions\")\n#pragma GCC optimize(\"-fcse-skip-blocks\")\n#pragma GCC optimize(\"-fcse-follow-jumps\")\n#pragma GCC optimize(\"-fsched-interblock\")\n#pragma GCC optimize(\"-fpartial-inlining\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"-freorder-functions\")\n#pragma GCC optimize(\"-findirect-inlining\")\n#pragma GCC optimize(\"-fhoist-adjacent-loads\")\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\n#pragma GCC optimize(\"inline-small-functions\")\n#pragma GCC optimize(\"-finline-small-functions\")\n#pragma GCC optimize(\"-ftree-switch-conversion\")\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\n#pragma GCC optimize(\"-fexpensive-optimizations\")\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\n#pragma GCC optimize(\"inline-functions-called-once\")\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")//24\u884c\u5927\u4f18\u5316(\u5361\u5e38)\np.s \u6b63\u5f0f\u6bd4\u8d5b\u6700\u597d\u4e0d\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u83ab\u540d\u7684CE\u5566\n#include<bits/stdc++.h>\nusing namespace std;\nstruct E {\n    int x,y,z;\n} a[500005];//\u7ed3\u6784\u4f53\u5b58\u56fe\u6392\u5e8f\u66f4\u65b9\u4fbf\nint n,m,t;\nint fa[500005],b[500005],c[500005];\n\ninline int read(){\n    register int x=0;register char ch=getchar();\n    for(;!isdigit(ch);ch=getchar());\n    for(;isdigit(ch);ch=getchar())x=x*10+(ch&15);\n    return x;\n}//\u5feb\u8bfb(\u5361\u5e38)\u8f93\u51fa\u5c31n\u4e2a\u6570\uff0c\u6240\u4ee5\u4e0d\u7528\u6253\u5feb\u8f93\nbool cmp(E x,E y) {\n    return x.z < y.z;//\u6309\u4ef7\u503c\u4ece\u5c0f\u5230\u5927\u6392\n}//\u514b\u9c81\u65af\u5361\u5c14\u6309\u8def\u7684\u957f\u5ea6\u6392\u5e8f\nint find(int x) {\n    if (fa[x] != x) fa[x] = find(fa[x]);//\u8def\u5f84\u538b\u7f29\uff0c\u5e76\u67e5\u96c6\u5e38\u7528\u6280\u5de7\n    return fa[x];\n}//\u5e76\u67e5\u96c6\u627e\u7956\u5b97\nint main() {\n    n=read();\n    m=read();\n    for (int i=1; i<=m; ++i) {\n        a[i].x=read();\n        a[i].y=read();\n        a[i].z=read();//\u8bfb\u5165\n        t++;//t\u4ee3\u8868\u5f53\u524d\u6709\u51e0\u4e2a\u6570(\u5176\u5b9e\u76f8\u5f53\u4e8ei,\u4e5f\u53ef\u4ee5\u5220\u4e86)\n        sort(a + 1,a + t + 1,cmp);//\u6bcf\u8bfb\u4e00\u6b21\u91cd\u65b0\u5feb\u6392\u4e00\u904d\n        for (int i=1; i<=n; ++i) fa[i]=i;//\u6bcf\u6b21\u521d\u59cb\u5316\n        int k=0, ans=0;\n        for (int j=1; j<=t; ++j)//\u5bf9\u5f53\u524d\u7684t\u4e2a\u6570\u505a\u514b\u9c81\u65af\u5361\u5c14\n            if (find(a[j].x)!=find(a[j].y)) {\n                fa[find(a[j].x)]=find(a[j].y);//\u8fde\u6839\n                ans+=a[j].z;//\u627e\u5230\u4e86\u7b54\u6848\u52a0\u4e0a\u4ef7\u503c\n                k++;//k\u4ee3\u8868\u5f53\u524d\u5df2\u9009\u62e9\u7684\u8fb9\u6761\u6570\uff0c\n            }//\u5e76\u67e5\u96c6\u627e+\u5408\u5e76\uff0c\u5176\u4e2dk\u4ee3\u8868\u6709\u51e0\u4e2a\u70b9\u80fd\u8d70\u5230\n        if (k==n-1) {//\u5982\u679c\u6240\u6709\u57ce\u5e02\u4e4b\u95f4\u90fd\u6709\u8fb9\u8054\u901a\n            printf(\"%d\\n\",ans);\n            continue;\n        }\n        cout<<-1<<endl;//\u8fd8\u6709\u70b9\u8d70\u4e0d\u5230\uff0c\u8f93-1\n    }\n}\n```",
        "postTime": 1559032712,
        "uid": 10601,
        "name": "shuiyuhan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "\u4eab\u53d7\u6700\u4f73\u9605\u8bfb\u4f53\u9a8c\u8bf7\u8fdb\u5165[\u4f20\u9001\u95e8](https://lu-anlai.github.io/2019/02/06/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%E3%80%90%E6%B4%9B%E8%B0%B7-P1340%E3%80%91-%E5%85%BD%E5%BE%84%E7%AE%A1%E7%90%86/)\u3002\n\n## \u539f\u9898\n\n\u9898\u9762\u8bf7\u67e5\u770b[\u6d1b\u8c37 P1340 \u517d\u5f84\u7ba1\u7406](https://www.luogu.org/problemnew/show/P1340)\u3002\n\n## \u9898\u89e3\n\n$\\text{Kruskal}$\u7b97\u6cd5\n\n### \u601d\u8def\n\n1. \u5148\u8bfb\u5165\u6240\u6709\u8fb9\uff0c\u6bcf\u6761\u8fb9\u4ee5\u65f6\u95f4\u4e3a\u7f16\u53f7`ID`\uff1b\n2. \u5bf9\u8fb9\u4ee5**\u8fb9\u6743**\u4e3a\u5173\u952e\u5b57\u8fdb\u884c\u6392\u5e8f\uff1b\n3. \u4ee5$1$~$w$\u4e3a\u53c2\u6570\u8fdb\u884c$\\text{Kruskal}$\u7b97\u6cd5\uff1a\n    - \u5982\u679c\u8fd9\u6761\u8fb9\u7684\u7f16\u53f7\u5927\u4e8e\u6240\u7ed9\u53c2\u6570\uff0c\u8fd9\u6761\u8fb9\u4e0d\u53c2\u4e0e\u7b97\u6cd5\uff1b\n    - \u5426\u5219\u5bfb\u627e\u6700\u5c0f\u751f\u6210\u6811\u3002\n4. \u8f93\u51fa\u7b54\u6848\u3002\n\n### \u4ee3\u7801\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n//\u5934\u6587\u4ef6\nusing std::sort;//\u5feb\u901f\u6392\u5e8f\n\nstruct Edge//\u5b9a\u4e49 \u8fb9 \u7684\u7ed3\u6784\u4f53\n{\n    int ID, f, t, val;\n    bool operator<(const Edge &a) const\n    {\n        return val < a.val;\n    }\n};\n\nstruct Union_Find//\u5b9a\u4e49 \u5e76\u67e5\u96c6 \u7684\u7ed3\u6784\u4f53\n{\n    int ID[201];\n    Union_Find(int);//\u6790\u6784\u51fd\u6570\uff0c\u7528\u4e8e\u5e76\u67e5\u96c6\u7684\u521d\u59cb\u5316\uff0c\u53c2\u6570\u4e3an\n    void connect(int, int);//\u5e76\n    bool search(int, int);//\u67e5\n    int find(int);//\u67e5\n};\n\nint n, w;\nEdge E[6001];\n\nint Kruskal(int);\n\nint main(void)\n{\n    register int i;\n    scanf(\"%d%d\", &n, &w);\n    for (i = 1; i <= w; ++i)\n    {\n        E[i].ID = i;//\u6bcf\u6761\u8fb9\u4ee5\u65f6\u95f4\u4e3a\u7f16\u53f7\n        scanf(\"%d%d%d\", &E[i].f, &E[i].t, &E[i].val);//\u8bfb\u5165\n    }\n    sort(E + 1, E + w + 1);//\u5feb\u901f\u6392\u5e8f\n    for (i = 1; i <= w; ++i)\n        printf(\"%d\\n\", Kruskal(i));//\u8c03\u7528\u51fd\u6570\u5e76\u8f93\u51fa\u7ed3\u679c\n    return 0;//\u5728\u4e3b\u51fd\u6570\u672b\u5c3e\u52a0\u4e0areturn 0;\u662f\u4e00\u4e2a\u597d\u4e60\u60ef\n}\n\nUnion_Find::Union_Find(int n)//\u6790\u6784\u51fd\u6570\uff0c\u7528\u4e8e\u5e76\u67e5\u96c6\u7684\u521d\u59cb\u5316\uff0c\u53c2\u6570\u4e3an\n{\n    register int i;\n    for (i = 1; i <= n; ++i)\n        ID[i] = i;\n    return;\n}\n\nvoid Union_Find::connect(int a, int b)\n{\n    register int ra = find(a), rb = find(b);\n    if (ra != rb)\n        ID[rb] = ra;\n    return;\n}\n\nbool Union_Find::search(int a, int b)\n{\n    return find(a) == find(b);\n}\n\nint Union_Find::find(int x)\n{\n    if (x == ID[x])\n        return x;\n    else\n        return ID[x] = find(ID[x]);//\u8def\u5f84\u538b\u7f29\n}\n\nint Kruskal(int time)\n{\n    register int i, cnt = 0, sum = 0;\n    //cnt\u4e3a\u8fde\u63a5\u8fb9\u7684\u6570\u91cf\n    Union_Find UF(n);//\u5148\u5b9a\u4e49\u4e00\u4e2a\u5e76\u67e5\u96c6UF\uff0c\u6790\u6784\u51fd\u6570\u7684\u53c2\u6570\u4e3an\n    for (i = 1; i <= w && cnt < n - 1; ++i)\n        if (E[i].ID > time)//\u5982\u679c\u8fd9\u6761\u8fb9\u7684\u7f16\u53f7\u5927\u4e8e\u6240\u7ed9\u53c2\u6570\uff0c\u8fd9\u6761\u8fb9\u4e0d\u53c2\u4e0e\u7b97\u6cd5\n            continue;\n        else if (!UF.search(E[i].f, E[i].t))//\u5982\u679c\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u5185\n        {\n            ++cnt;\n            sum += E[i].val;\n            UF.connect(E[i].f, E[i].t);\n        }//\u7edf\u8ba1\u7b54\u6848\n    if (cnt != n - 1)//\u5982\u679c\u65e0\u6cd5\u6784\u6210\u6811\n        return -1;//\u9898\u76ee\u8981\u6c42\u8f93\u51fa-1\n    else\n        return sum;//\u8fd4\u56de\u7b54\u6848\n}\n```\n\n### \u6211\u7684\u8bc4\u6d4b\u8bb0\u5f55\n\n- [\u6d1b\u8c37 R16089070](https://www.luogu.org/recordnew/show/16089070)\u3002\n",
        "postTime": 1549442283,
        "uid": 38502,
        "name": "agicy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "\u672c\u9898\u5c45\u7136\u6ca1\u6709\u9898\u89e3\uff01\n\n\u672c\u9898\u6700\u5feb\u7684\u6b63\u89e3\u505a\u6cd5\u4e3a: \u5f53\u6784\u5efa\u597d\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e4b\u540e\uff0c\u7ee7\u7eed\u52a0\u8fb9\u3002\u5fc5\u7136\u52a0\u8fb9\u540e\u4f1a\u4ea7\u751f\u4e00\u4e2a\u73af\uff0c\u51cf\u53bb\u6b64\u73af\u4e2d\u7684\u6700\u5927\u503c\u5373\u4e3a\u6b63\u89e3\u3002\n\n\u672c\u849f\u84bb\u7684\u4ee3\u7801\u505a\u6cd5\u4e3a\uff1a\u5f53\u6784\u5efa\u597d\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e4b\u540e\uff0c\u7ee7\u7eed\u52a0\u8fb9\uff0c\u91cd\u65b0\u6784\u9020\u6700\u5c0f\u751f\u6210\u6811\uff0c\u91cd\u65b0\u8ba1\u7b97\u6b63\u89e3\u3002\n\n\u53cd\u6b63\u672c\u9898\u8fc7\u4e86\uff0c\u5e0c\u671b\u5404\u4f4d\u5927\u4f6c\u80fd\u5728\u6211\u4ee3\u7801\u4e0a \u4f18\u5316\u4e3a\u6b63\u89e3\u505a\u6cd5\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nint father[505050];\nint w,i,j,x,m,n,ans,edge;\nint a,b;\nstruct Node\n{\n    int x;\n    int y;\n    int dis;\n}road[505050];\nvoid INSERT_SORT()  //\u5199\u8d77\u6765\u5f88\u96be\u53d7\u7684\u63d2\u5165\u6392\u5e8f \n{\n    int key_1=road[w].x;\n    int key_2=road[w].y;\n    int key_3=road[w].dis;\n    j=w-1;\n    while(j>0 && road[j].dis > key_3)\n    {\n        road[j+1].x=road[j].x;\n        road[j+1].y=road[j].y;\n        road[j+1].dis=road[j].dis;\n        j--;\n    }\n    road[j+1].x=key_1;\n    road[j+1].y=key_2;\n    road[j+1].dis=key_3;\n}\nint find(int a)   //\u5e76\u67e5\u96c6\u7684\u67e5 \n{\n    if(a==father[a])\n        return a;\n    else\n        return father[a]=find(father[a]);\n}\nvoid unite(int a,int b) //\u5e76\u67e5\u96c6\u7684\u5e76 \n{\n    a=find(a);\n    b=find(b);\n    father[a]=b;\n}\nvoid Kruscal()\n{\n    for(int i=1; i<=w; i++)\n        if( find(road[i].x) != find(road[i].y) )\n        {\n            unite(road[i].x,road[i].y);\n            ans+=road[i].dis;\n            edge++;\n            if(edge==m-1) // m\u4e2a\u70b9\uff0c\u53ea\u9700\u8981m-1\u6761\u8fb9\u5c31\u53ef\u4ee5\u6784\u6210\u6700\u5c0f\u751f\u6210\u6811 \n                return;\n        }\n}\nbool check()   //\u66b4\u529b\u68c0\u6d4b \u6240\u6709\u7684\u70b9\u6709\u6ca1\u6709\u5728\u6700\u5c0f\u751f\u6210\u6811\u91cc \n{\n    int s=find(father[1]);\n    for(int i=2; i<=m; i++)\n        if(s!=find(father[i]))\n            return false;\n    return true;\n}\nvoid INIT()\n{\n    for(int i=1; i<=m; i++)\n        father[i]=i;\n    ans=0;\n    edge=0;\n}\nint main()\n{\n    scanf(\"%d%d\",&m,&n);\n    while(n--)\n    {\n        INIT();  //\u521d\u59cb\u5316\uff0c\u4e3a\u66b4\u529b\u505a\u94fa\u57ab \n        w++; \n        scanf(\"%d %d %d\",&road[w].x,&road[w].y,&road[w].dis);\n        INSERT_SORT();   //\u63d2\u5165\u6392\u5e8f\uff0c\u672c\u9898\u63d2\u5165\u6392\u5e8f\u8981\u6bd4sort\u5feb\u5f97\u591a \n//        for(int i=1; i<=w; i++)\n//            cout<<road[i].x<<\" \"<<road[i].y<<\" \"<<road[i].dis<<endl;\n//        cout<<endl;\n        Kruscal();    //\u6b63\u5e38\u7684\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5 \n//        for(int i=1; i<=m; i++)\n//            cout<<father[i]<<\" \";\n//        cout<<endl;\n        if( check() )  //\u68c0\u9a8c\uff0c\u5f53\u6784\u6210\u4e00\u68f5\u6811\u65f6\uff0c\u6240\u6709\u70b9\u7684find(father[i]) \u5747\u4e3a\u540c\u4e00\u503c \n            printf(\"%d\\n\",ans);\n        else\n            printf(\"-1\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1492613259,
        "uid": 19215,
        "name": "OIer991215",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "\u5176\u4ed6\u9898\u89e3\u7528\u7684\u90fd\u662fkruskal\uff0c\u4e8e\u662f\u6211\u4fbf\u5199\u4e86\u4e00\u7bc7prim\u6765\u8865\u5145\u4e00\u4e0bprim\u7684\u7a7a\u767d\u3002\n\n\u8bb0\u5f97\u5f00o2\u4f18\u5316\uff01\uff01\uff01\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,x,y,z,num,head[5010],dis[5010],vis[5010];\nstruct Node{\t//\u8fb9\u7684\u7ed3\u6784\u4f53 \n\tint to,dis,next;\n}a[400010];\ninline void add(int from,int to,int dis){//\u52a0\u8fb9\u51fd\u6570 \n\tnum++;\n\ta[num].to=to;\n\ta[num].dis=dis;\n\ta[num].next=head[from];\n\thead[from]=num;\n}\npriority_queue<pair<int,int> >q;//\u4f18\u5148\u961f\u5217 \nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++){//\u6bcf\u6b21\u52a0\u8fb9\u65f6\u90fd\u627e\u4e00\u6b21 \n\t\tcin>>x>>y>>z;\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t\tmemset(vis,0,sizeof(vis));\n\t\tfor(int i=1;i<=n;i++)dis[i]=1e9;\n\t\tdis[1]=0;\n\t\tq.push(make_pair(0,1));\n\t\twhile(!q.empty()){\t//\u6a21\u677f\n\t\t\tint tmp=q.top().second;\n\t    \tq.pop();\n\t\t\tif(vis[tmp]==1)continue;\n\t\t\tvis[tmp]=1;\n\t\t\tfor(int i=head[tmp];i;i=a[i].next){\n\t\t\t\tint k=a[i].to,d=a[i].dis;\n\t\t\t\tif(dis[k]>d&&vis[k]==0){\n\t\t\t\t\tdis[k]=d;\n\t\t\t\t\tq.push(make_pair(-dis[k],k));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint maxn=0,cnt=0;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(dis[i]==1e9){\t//\u627e\u4e0d\u5230\u6700\u77ed\u751f\u6210\u6811 \n\t\t\t\tcout<<\"-1\"<<endl;\n\t\t\t\tcnt=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmaxn+=dis[i];\n\t\t}\n\t\tif(cnt==0)cout<<maxn<<endl;\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1552050475,
        "uid": 99247,
        "name": "\u5514\u554a\u5514",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "##  \u66b4\u529b\u6c42\u89e3\uff1a\n\n------------\n\n\u66b4\u529b\u64cd\u4f5c\uff1a\u5bf9\u4e8e\u6bcf\u52a0 1 \u6761\u8fb9\uff0c\u5c31\u66b4\u529b\u5730\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u3002\n\n**\u66b4\u529b\u4ee3\u7801\uff1a**\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<cstdlib>\n#include<string>\n#include<vector>\n#include<stack>\n#include<deque>\n#include<queue>\n#include<map>\n#include<set>\nusing namespace std;\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\n#define maxn 6001\ntypedef long long LL;\nLL n,w,cnt,ans;\nLL fa[maxn];\nstruct hh\n{\n\tLL l,r,w;\n}t[maxn];\ninline LL read()\n{\n\tLL xs=0,kr=1;char ls;\n\tls=getchar();\n\twhile(!isdigit(ls))\n\t{\n\t\tif(!(ls^45))\n\t\t\tkr=-1;\n\t\tls=getchar();\n\t}\n\twhile(isdigit(ls))\n\t{\n\t\txs=(xs<<1)+(xs<<3)+(ls^48);\n\t\tls=getchar();\n\t}\n\treturn xs*kr;\n}\ninline bool cmp(const hh&l,const hh&r)\n{\n\treturn l.w<r.w;\n}\ninline LL find(LL u)\n{\n\tif(u!=fa[u]) fa[u]=find(fa[u]);\n\treturn fa[u];\n}\ninline void kruskal(LL num)\n{\n\tsort(t+1,t+num+1,cmp);\n\tfor(LL i=1;i<=num;i++) fa[i]=i;\n\tfor(LL i=1;i<=num;i++)\n\t{\n\t\tLL r1=find(t[i].l),r2=find(t[i].r);\n\t\tif(r1!=r2)\n\t\t{\n\t\t\tfa[r1]=r2;\n\t\t\tans+=t[i].w;\n\t\t\tcnt++;\n\t\t}\n\t\tif(cnt==n-1) {printf(\"%lld\\n\",ans);return;}\n\t}\n\tprintf(\"-1\\n\");\n}\nint main()\n{\n\tn=read();w=read();\n\tfor(LL i=1;i<=w;i++)\n\t{\n\t\tans=0,cnt=0;\n\t\tt[i].l=read();t[i].r=read();t[i].w=read();\n\t\tkruskal(i);\n\t}\nreturn 0;\n}\n```\n\u7136\u540e\u5c31\u3002\u3002\u3002T\u6389\u4e86\uff08/(\u3112o\u3112)/~~\uff09\u3002\n## AC\u505a\u6cd5\uff1a\n\n\n------------\n\n\u9996\u5148\uff1a\u6211\u4eec\u53ef\u4ee5\u5206\u6790\uff0c\u66b4\u529b\u505a\u6cd5\u88ab\u5361\u6389\u7684\u539f\u56e0\u662f\u505a\u4e86 W \u6b21\u7684\u5feb\u6392\uff0c\u4f7f\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u5927\u63d0\u9ad8\u3002\n\n\u5176\u6b21\uff1a\u672c\u9898\uff0c\u5e76\u6ca1\u6709\u5f3a\u5236\u8981\u6c42\u5728\u7ebf\u6c42\u89e3\u3002\u4e3a\u4e86\u4f18\u5316\u66b4\u529b\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u79bb\u7ebf\u505a\u6cd5\uff1a\n\n\u2460 \u6bcf\u6b21\u52a0\u8fdb 1 \u6761\u8fb9\uff0c\u7ed9\u5b83\u6253\u4e0a\u4e00\u4e2a\u65f6\u95f4\u6807\u53f7\uff08\u8868\u793a\u8fd9\u6761\u8fb9\u662f\u7b2c\u51e0\u6b21\u52a0\u5165\u7684\uff09\u3002\n\n\u2461 \u5728\u6240\u6709\u7684\u8fb9\u90fd\u6dfb\u52a0\u5b8c\u6bd5\u540e\uff0c\u6309\u6743\u503c\u5927\u5c0f sort \u6392\u5e8f\u4e00\u904d\u3002\n\n\u2462 \u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u505a W \u904d\u7684\u6700\u5c0f\u751f\u6210\u6811\uff1a\u6bcf\u6b21\u679a\u4e3e\u7684\u8fb9\u53ea\u9700\u8981\u5224\u65ad\u8fd9\u6761\u8fb9\u7684\u65f6\u95f4\u6807\u53f7\u662f\u5426\u5927\u4e8e\u6b63\u5728\u505a\u6700\u5c0f\u751f\u6210\u6811\u6b21\u6570 i \uff0c\u5982\u679c\u5927\u4e8e\u5c31\u8df3\u8fc7\uff0c\u4e0d\u5927\u4e8e\u5c31\u6309\u7167\u666e\u901a\u7684\u6700\u5c0f\u751f\u6210\u6811\u5224\u65ad\u662f\u5426\u8981\u6dfb\u52a0\u3002\n\n**\u4f2a\u4ee3\u7801\uff1a**\n```cpp\nsort(t+1,t+w+1,cmp);//\u6309\u8fb9\u6743\u6392\u5e8f\uff0c\uff08\u5047\u88c5\u5df2\u7ecf\u7528 t \u6570\u7ec4\u5b58\u597d\u4e86\uff09 \nfor(i=1;i<=w;i++)//\u7b2c\u51e0\u6b21\u505a\u6700\u5c0f\u751f\u6210\u6811 \n{\n\tfor(j=1;j<=w;j++)//\u4f9d\u6b21\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9 \n\t{\n\t\tif(t[j].tim>i) continue;//\u5982\u679c\u679a\u4e3e\u5230\u7684\u8fb9\u7684\u65f6\u95f4\u6807\u5fd7\uff1ei\uff0c\u8df3\u8fc7\n\t\telse\n\t\t{\n\t\t\t\u2026\u2026//\u6309\u7167\u666e\u901a\u7684\u6700\u5c0f\u751f\u6210\u6811\u505a\u6cd5\uff0c\u52a0\u8fb9\u3002 \n\t\t}\n\t}\n}\n```\n**\u5b8c\u6574\u4ee3\u7801**\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<cstdlib>\n#include<string>\n#include<vector>\n#include<stack>\n#include<deque>\n#include<queue>\n#include<map>\n#include<set>\nusing namespace std;\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\n#define maxn 6001\ntypedef long long LL;\nLL n,w,cnt,ans;\nLL fa[maxn];\nstruct hh\n{\n\tLL l,r,w,tim;\n}t[maxn];\ninline LL read()\n{\n\tLL xs=0,kr=1;char ls;\n\tls=getchar();\n\twhile(!isdigit(ls))\n\t{\n\t\tif(!(ls^45))\n\t\t\tkr=-1;\n\t\tls=getchar();\n\t}\n\twhile(isdigit(ls))\n\t{\n\t\txs=(xs<<1)+(xs<<3)+(ls^48);\n\t\tls=getchar();\n\t}\n\treturn xs*kr;\n}\ninline bool cmp(const hh&l,const hh&r)\n{\n\treturn l.w<r.w;\n}\ninline LL find(LL u)\n{\n\tif(u!=fa[u]) fa[u]=find(fa[u]);\n\treturn fa[u];\n}\ninline void kruskal(LL num)\n{\n\tfor(LL i=1;i<=w;i++) fa[i]=i;\n\tfor(LL i=1;i<=w;i++)\n\t{\n\t\tif(t[i].tim>num) continue;\n\t\tLL r1=find(t[i].l),r2=find(t[i].r);\n\t\tif(r1!=r2)\n\t\t{\n\t\t\tfa[r1]=r2;\n\t\t\tans+=t[i].w;\n\t\t\tcnt++;\n\t\t}\n\t\tif(cnt==n-1) {printf(\"%lld\\n\",ans);return;}\n\t}\n\tprintf(\"-1\\n\");\n}\nint main()\n{\n\tn=read();w=read();\n\tfor(LL i=1;i<=w;i++)\n\t{\n\t\tt[i].l=read();t[i].r=read();t[i].w=read();t[i].tim=i;\n\t}\n\tsort(t+1,t+w+1,cmp);\n\tfor(LL i=1;i<=w;i++)\n\t{\n\t\tans=0,cnt=0;\n\t\tkruskal(i);\n\t}\nreturn 0;\n}\n```\n\n\n------------\n\u8fd9\u79cd\u79bb\u7ebf\u505a\u6cd5\u53ef\u80fd\u662f\u8fd9\u9053\u9898\u6700\u7b80\u5355\u7684\u505a\u6cd5\u4e86\uff0c\u9664\u4e86\u7ed9\u6bcf\u6761\u8fb9\u52a0\u4e2a\u65f6\u95f4\u6807\u53f7\uff0c\u5176\u5b83\u90fd\u53ea\u8981\u5957\u6700\u5c0f\u751f\u6210\u6811\u6a21\u677f\u3002d=====(\uffe3\u25bd\uffe3*)b",
        "postTime": 1539333991,
        "uid": 111501,
        "name": "\u5357\u82d1\u6c81\u9752",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "\u5e38\u89c1\u7684\u4e00\u79cd\u601d\u8def\u662f\u5148\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4e4b\u540e\u6bcf\u6b21\u51fa\u73b0\u4e00\u6761\u8fb9(u,v)\uff0c\u4e00\u5b9a\u4f1a\u5f62\u6210\u4e00\u4e2a\u5305\u542bu,v\u4e24\u70b9\u7684\u73af\uff0c\u6b64\u65f6\u7528\u65b0\u8fb9\u66f4\u65b0\u6362\u4e0a\u7684\u6700\u5927\u503c\uff0c\u6bcf\u6b21\u90fd\u80fd\u4fdd\u8bc1\u56fe\u7684\u8fde\u901a\u6027\uff0c\u4e14\u6ee1\u8db3\u5f53\u524d\u6700\u4f18\u89e3\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u662f\u5982\u4f55\u5feb\u901f\u66f4\u6362(u,v)\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\uff0c\u66fe\u7ecf\u60f3\u8fc7\u52a0\u8fb9\u6210\u73af\u4e4b\u540e\u53bb\u9664\u73af\u7684\u6700\u5927\u8fb9\uff0c\u4f46\u662f**\u6211\u592a\u83dc\u4e86**\uff0c\u4e0d\u4f1a\u5199\u3002\u3002\u3002\n\n\u60f3\u5230\u7528LCT\u7ef4\u62a4\u4e24\u70b9\u95f4\u8fb9\u6743\u6700\u5927\u503c\uff0c\u7136\u540e\uff0c\u5c31\u5199\u51fa\u6765\u4e86\u3002\u3002\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+5;\nint n,m,ans,mx[N],fa[N],val[N],s[N],num,js;\nstruct mst\n{\n    int u,v,w;\n    bool operator<(const mst &c)const{return w<c.w;}\n}e[N];\nstruct LCT\n{\n    int top,f[N],c[N][2],rev[N],q[N];\n    LCT()\n    {\n        top=0;\n        memset(f,0,sizeof(f));\n        memset(c,0,sizeof(c));\n        memset(rev,0,sizeof(rev));\n        memset(q,0,sizeof(q));\n    }\n    inline bool isroot(int x){return c[f[x]][1]!=x&&c[f[x]][0]!=x;}\n    inline void pushup(int x)\n    {\n        mx[x]=val[x],s[x]=x;\n        if(c[x][0]&&mx[c[x][0]]>mx[x]) mx[x]=mx[c[x][0]],s[x]=s[c[x][0]];\n        if(c[x][1]&&mx[c[x][1]]>mx[x]) mx[x]=mx[c[x][1]],s[x]=s[c[x][1]];\n    }\n    inline void pushdown(int x){if(rev[x]) swap(c[x][1],c[x][0]),rev[c[x][1]]^=1,rev[c[x][0]]^=1,rev[x]^=1;}\n    inline void rotate(int x)\n    {\n        int y=f[x],z=f[y],l=c[y][1]==x,r=l^1;\n        if(!isroot(y)) c[z][c[z][1]==y]=x;\n        if(c[x][r]) f[c[x][r]]=y;\n        c[y][l]=c[x][r],c[x][r]=y;\n        f[x]=z,f[y]=x;\n        pushup(y);\n    }\n    inline void splay(int x)\n    {\n        q[top=1]=x;\n        for(int i=x;!isroot(i);i=f[i]) q[++top]=f[i];\n        while(top) pushdown(q[top--]);\n        while(!isroot(x))\n        {\n            int y=f[x],z=f[y];\n            if(!isroot(y)) rotate((c[y][0]==x)^(c[z][0]==y)?x:y);\n            rotate(x);\n        }\n        pushup(x);\n    }\n    inline void access(int x){for(int t=0;x;x=f[t=x]) splay(x),c[x][1]=t;}\n    inline void makeroot(int x){access(x),splay(x),rev[x]^=1;}\n    inline void split(int x,int y){makeroot(x),access(y),splay(y);}\n    inline void link(int x,int y){makeroot(x),f[x]=y;}\n    inline void cut(int x,int y){split(x,y),c[y][0]=f[x]=0,pushup(y);}\n}T;\nint find(int x){return fa[x]=fa[x]==x?x:find(fa[x]);}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    js=m+1;\n    for(int i=1;i<=n;++i) fa[i]=i;\n    for(int i=1;i<=m;++i) scanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n    for(int i=1;i<=m;++i)\n    {\n        int fx=find(e[i].u),fy=find(e[i].v);\n        if(fx!=fy) fa[fx]=fy,++num;\n        if(num==n-1)\n        {\n            js=i;\n            break;\n        }\n    }\n    sort(e+1,e+js+1);\n    for(int i=1;i<=n;++i) fa[i]=i;\n    num=0;\n    for(int i=1;i<js;++i) printf(\"-1\\n\");\n    for(int i=1,u,v;i<=js;++i)\n    {\n        int fx=find(u=e[i].u),fy=find(v=e[i].v);\n        if(fx!=fy) fa[fx]=fy,T.link(u,i+n),T.link(v,i+n),mx[i+n]=val[i+n]=e[i].w,ans+=e[i].w,++num;\n    }\n    if(js!=m+1) printf(\"%d\\n\",ans);\n    for(int i=js+1;i<=m;++i)\n    {\n        int u=e[i].u,v=e[i].v;\n        T.split(u,v);\n        int now=s[v];\n        if(e[now-n].w>e[i].w)\n        {\n            ans=ans-e[now-n].w+e[i].w;\n            T.cut(e[now-n].u,now),T.cut(e[now-n].v,now);\n            val[i+n]=mx[i+n]=e[i].w;\n            T.link(u,i+n),T.link(v,i+n);\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```\n\u5176\u4e2d\u6709\u4e00\u4e9b\u871c\u6c41\u7e41\u7410\u64cd\u4f5c\uff0c\u89e3\u51b3\u4e86link\uff0ccut\u7684\u6b63\u786e\u6027\uff0c\u5927\u4f6c\u4eec\u90fd\u4f1a\u540a\u6253\u6211\u554a\uff0c\uff0c\u9003\uff01",
        "postTime": 1537708569,
        "uid": 54211,
        "name": "\u5bd2\u9165",
        "ccfLevel": 0,
        "title": "LCT\u7ef4\u62a4\u751f\u6210\u6811\uff0c\u8dd1\u7684\u8fd8\u53ef\u4ee5189ms"
    },
    {
        "content": "//\u63d2\u5165\u6392\u5e8f+SPFA+\u667a\u6167=AC;\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct D{\n    int a,b,c;\n}d[6001];\nint w,n,m,a,b,c,h[60001],v[60001],f[60001],k,ans,fg,gg,lll; \nint find(int x)\n{\n    if(f[x]!=x)\tf[x]=find(f[x]);\n    return f[x];\n}\nbool cmp(D x,D y)\n{\n    return x.c<y.c;\n}\nint wf(int x,int y)//\u4e8c\u5206\u627e\u7b2c\u4e00\u4e2a\u6bd4\u8981\u63d2\u5165\u7684\u503c\u5927\u7684\u5750\u6807\uff1b\n{\n    int l=1,r=x,mid;\n    while(l<r)\n    {\n        mid=(l+r)/2;\n        if(d[mid].c>y)\tr=mid;\n        else l=mid+1;\n    }\n    return l;\n}\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)/*\u56e0\u4e3a\u6bcf\u4e00\u7ec4\u89e3\u90fd\u5224\u65ad\u6240\u4ee5\u8fb9\u8f93\u5165\n    \u8fb9\u505a\uff1b*/\n    {\n        ans=0,k=0;\n        scanf(\"%d%d%d\",&d[i].a,&d[i].b,&d[i].c);\n        if(i*2<n)\n        {\n            cout<<\"-1\"<<endl;\n            continue;\n        }/*\u56e0\u4e3a\u5982\u679c\u8981\u6bcf\u4e2a\u70b9\u90fd\u8fde\u901a\uff0c\u8f93\u5165\u7684\u70b9\u6570\u4e00\u5b9a\u5927\u4e8en\u4e2a\n        \u70b9\uff08\u526a\u679d\uff09\uff1b*/\n        for(int j=1;j<=n;j++)\n        f[j]=j;//\u521d\u59cb\u5316\uff1b\n        if(!fg)//\u6807\u8bb0\uff1a\u7b2c\u4e00\u904d\u7528sort\u6392\uff1b\n        {\n            sort(d+1,d+1+i,cmp);\n            fg=1;\n        }\n        else//\u4e0d\u662f\u7b2c\u4e00\u6b21\u7528\u63d2\u5165\u6392\u5e8f\uff08sort\u4f1a\u8d85\u65f6\uff09\uff1b\n        {\n            int a1,b1,c1;//\u4e2d\u95f4\u53d8\u91cf\uff1b\n            a1=d[i].a;\n            b1=d[i].b;\n            c1=d[i].c;\n            gg=wf(i-1,d[i].c);//\u4e8c\u5206\uff1b\n            for(int j=i;j>gg;j--)/*\u5c06\u524d\u503c\u5411\u540e\u79fb\uff0c\u7a7a\u51fa\u8981\n            \u63d2\u5165\u7684\u4f4d\u7f6e\uff08\u8981\u4ece\u540e\u5411\u524d\u63d2\uff0c\u5426\u5219\u540e\u9762\u503c\u4f1a\u88ab\u8986\u76d6\uff09\uff1b*/\n            {\n                d[j].c=d[j-1].c;\n                d[j].a=d[j-1].a;\n                d[j].b=d[j-1].b;\n            }\n            d[gg].c=c1;//\u63d2\u5165\u8be5\u503c\uff1b\n            d[gg].b=b1;\n            d[gg].a=a1;\n        }\n        //SPFA\u6a21\u677f\uff1b\n        for(int j=1;j<=i;j++)\n        {\n            int x1=find(d[j].a),x2=find(d[j].b);/*\u6c42\u51fa\u4e24\n            \u70b9\u7684\u7956\u5148\u8282\u70b9*/\n            if(x1!=x2)\n            {\n                f[x1]=x2;//\u5408\u5e76\u4e24\u70b9\uff1b\n                ans+=d[j].c;\n                k++;\n            }\n            if(k==n-1)\n            {\n        \t\tcout<<ans<<endl;//\u627e\u5230\u4e00\u4e2a,\u76f4\u63a5\u8f93\u51fa\uff1b\n        \t\tlll=1;//\u6807\u8bb0\uff1b\n                break;\n            }\n        }\n        if(lll==0)//\u6ca1\u6807\u8bb0\u8f93\u51fa\u201c\u20141\u201d;\n        cout<<\"-1\"<<endl;\n        lll=0;\n    }\n    return 0;\n}\n```",
        "postTime": 1526959092,
        "uid": 87457,
        "name": "wshz",
        "ccfLevel": 0,
        "title": "\u517d\u5f84\u7ba1\u7406"
    },
    {
        "content": "   \u9996\u5148\u6211\u4eec\u8981\u5148\u660e\u786e\u4e00\u70b9,\u4f60\u65b0\u52a0\u5165\u4e00\u6761\u8fb9,\u53ea\u4f1a\u8ba9\u539f\u5148\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u88ab\u9876\u66ff,\u8981\u4e48\u4e0d\u51b2\u7a81\u7684\u6210\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9,\u5426\u5219\u5c31\u662f\u6ca1\u6210\u4e3a.\u5b9a\u4e0d\u4f1a\u8ba9\u5148\u524d\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u6210\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9.\n   \n   \u6839\u636e\u8fd9\u4e2a\u6027\u8d28,\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u5f53\u524d\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9,\u5e76\u628a\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u5ffd\u7565\u6389.\n   \n   \u63a5\u7740\u6211\u4eec\u65b0\u52a0\u5165\u7684\u8fb9\u4e0e\u5148\u524d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u6392\u5e8f,\u7531\u4e8e\u5148\u524d\u5b58\u50a8\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u5df2\u6709\u5e8f,\u6211\u4eec\u53efO(N)\u63d2\u5165\u5b8c\u6210\n   \n   \u7136\u540e\u6211\u4eec\u8dd1Kruskal,\u82e5\u5b58\u5728\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u5c31O(N)\u5220\u9664\u5373\u53ef\n   \n   \u4e8e\u662f\u6211\u4eec\u5c31\u7528O(4N)=O(N)\u7684\u65f6\u95f4\u7531\u524di-1\u6761\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u63a8\u5230\u4e86\u524di-1\u6761\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811,\u603b\u65f6\u95f4O(NM)\n   \n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m;\nstruct point\n{\n\tint u,v,d;\n}a[6005],team[205];\nint top,fa[201];\nlong long read()\n{\n\tlong long x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+c-'0';c=getchar();}\n\treturn x*f;\n}\nint find(int x)\n{\n\tif(fa[x]!=x)return fa[x]=find(fa[x]);\n\treturn fa[x];\n}\nvoid go(point a)\n{\n\tfor(int i=1;i<=n;i++)fa[i]=i;\n\t//O(N)\u63d2\u5165\n\tteam[++top]=a;\n\tfor(int i=top;i>=1;i--)if(team[i].d<team[i-1].d)swap(team[i],team[i-1]);\n\tint k=0,res=0;\n\t//\u7ecf\u5178Kruskal\n\tfor(int i=1;i<=top;i++)\n\t{\n\t\tint r1=find(team[i].u),r2=find(team[i].v);\n\t\tif(r1!=r2)\n\t\t{\n\t\t\tfa[r2]=r1;\n\t\t\tres+=team[i].d;\n\t\t}\n\t\telse k=i;//\u6807\u8bb0\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u4e66\u4e0a\u7684\u8fb9 \n\t}\n\tif(k)\n\t{\n\t\t//\u5220\u9664 \n\t\ttop--;\n\t\tfor(int i=k;i<=top;i++)\n\t\tswap(team[i],team[i+1]);\n\t}\n\tif(top!=n-1)res=-1;//\u6709n-1\u6761\u8fb9\u5c31\u6709\u89e3,\u53cd\u4e4b\u65e0\u89e3 \n\tprintf(\"%d\\n\",res); \n}\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<=m;i++)a[i].u=read(),a[i].v=read(),a[i].d=read();\n\tfor(int i=1;i<=m;i++)go(a[i]);//\u4f9d\u6b21\u63d2\u5165 \n}\n```\n",
        "postTime": 1568452158,
        "uid": 136928,
        "name": "20140408abcd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "- ~~\u8fd9\u9898\u5e9f\u8bdd\u8d3c\u591a~~\uff0c\u7b80\u8981\u9898\u610f\u662f\u8fd9\u6837\u7684\uff1aN\u4e2a\u70b9\uff0cW\u6761\u8fb9\uff0c\u6bcf\u8f93\u5165\u4e00\u6761\u8fb9\u56de\u7b54\u4e00\u6b21\u5f53\u524d\u662f\u5426\u5b58\u5728\u6700\u5c0f\u751f\u6210\u6811\u3002\u5b58\u5728\uff0c\u8f93\u51fa\u6700\u5c0f\u751f\u6210\u6811\u957f\u5ea6\u548c\u3002\uff1b\u4e0d\u5b58\u5728\uff0c\u8f93\u51fa-1\u3002\n\n- \u8003\u8651kruskal\u3002\u66b4\u529b\u601d\u8def\u5c31\u662f\u6bcf\u52a0\u4e00\u6b21\u8fb9\u5c31\u505a\u4e00\u904dkruskal\u3002\u8fd9\u6837\u505a\u7684\u65f6\u95f4\u74f6\u9888\u662f\u5728\u6bcf\u904d\u90fd\u8981sort\u6392\u5e8f\u4e00\u904d\uff0c\u603b\u4f53\u590d\u6742\u5ea6\u5927\u6982\u662fO(nlogn * m)\u3002\u5361\u5361\u5e38\u6216\u8bb8\u80fd\u8fc7\u53bb\uff1f\n\n- \u90a3\u4e48\u4f18\u5316\u6389sort\u8fd9\u4e00\u6b65\u4e0d\u5c31\u884c\u4e86\u5417\uff1f\u6211\u9009\u62e9\u7528\u5f52\u5e76\u6392\u5e8f\u3002\u56e0\u4e3a\u524d\u9762\u7684\u8fb9\u5df2\u7ecf\u662f\u6709\u5e8f\u7684\u4e86\uff0c\u6240\u4ee5\u6bcf\u6b21\u63d2\u5165\u4e00\u6761\u8fb9\u5c31\u4e0e\u524d\u9762\u7684\u8fb9\u5408\u5e76\u5c31\u884c\u4e86\u3002\u6bcf\u6b21\u6392\u5e8f\u7684\u590d\u6742\u5ea6\u662fO(n)\uff0c\u6240\u4ee5\u6574\u4f53\u590d\u6742\u5ea6\u662fO(nm)\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#define N 205\n#define M 6005\nusing namespace std;\n\nstruct E {int u, v, w;} e[M], t[M];\nint n, m, cnt, flag, ans;\nint fat[N];\n\nint getFat(int x)\n{\n    if(x == fat[x]) return x;\n    return fat[x] = getFat(fat[x]);\n}\n\nvoid merge(int s1, int e1, int s2, int e2)\n{\n    int p1 = s1, p2 = s2, dfn = 0;\n    while(p1 <= e1 && p2 <= s2)\n    {\n        if(e[p1].w < e[p2].w) t[++dfn] = e[p1], p1++;\n        else t[++dfn] = e[p2], p2++;\n    }\n    while(p1 <= e1) t[++dfn] = e[p1], p1++;\n    while(p2 <= e2) t[++dfn] = e[p2], p2++;\n    for(int i = 1; i <= e2; i++) e[i] = t[i];\n}\n\nint main()\n{\n    freopen(\"P1340.in\", \"r\", stdin);\n    freopen(\"P1340.out\", \"w\", stdout);\n\n    cin >> n >> m;\n    for(int i = 1; i <= m; i++)\n    {\n        cnt = flag = ans = 0;\n        for(int j = 1; j <= n; j++) fat[j] = j;\n        scanf(\"%d%d%d\", &e[i].u, &e[i].v, &e[i].w);\n        merge(1, i - 1, i, i);\n        for(int j = 1; j <= i; j++)\n        {\n            if(getFat(e[j].u) != getFat(e[j].v))\n            {\n                fat[getFat(e[j].u)] = getFat(e[j].v);\n                cnt++, ans += e[j].w;\n            }\n            if(cnt == n - 1) {flag = 1; break;}\n        }\n        if(!flag) printf(\"-1\\n\");\n        else printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1566357951,
        "uid": 91681,
        "name": "Error_666",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "\u8fd8\u662f\u6bd4\u8f83\u6c34\u7684\n\n\u4e00\u773c\u770b\u8d77\u6765\u662f\u4e00\u4e2a\u652f\u6301\u52a8\u6001\u52a0\u8fb9\u7684MST\n\n\n\u7136\u800c\u6570\u636e\u8303\u56f4\u5f88\u6c34\n\n$O(m^2)$\u7a33\u8fc7\n\n**\u5177\u4f53\u800c\u8a00,\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u6b21\u5efa\u597d\u7684\u6811\u9500\u6bc1,\u76f4\u63a5\u91cd\u6784\u4e00\u904d\u5373\u53ef,\u53ef\u4ee5\u4f7f\u7528$kruscal$\u7b97\u6cd5**\n\n\u7531\u4e8e\u6211\u4eec\u6bcf\u6b21\u4e4b\u52a0\u4e00\u6761\u8fb9,\u6240\u4ee5\u5feb\u6392\u5e76\u4e0d\u591f\u4f18\u79c0,\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6709\u5e8f\u7684,\u652f\u6301\u5b9e\u65f6\u63d2\u5165\u7684\u8fb9\u96c6,\u53ef\u4ee5\u7528vector\u5f88\u597d\u7684\u66ff\u4ee3,\u5185\u5b58,\u901f\u5ea6,\u7801\u91cf\u90fd\u5f88\u4f18\u79c0\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n    int x;scanf(\"%d\",&x);return x;\n}\nstruct Edge{\n    int from,to,w;\n};\ninline bool operator<(const Edge &x,const Edge &y){\n    return x.w < y.w;\n}\nconst int N =300;\nint fa[N],n;\ninline int find(int x){\n    return fa[x] =(x==fa[x]) ? x : find(fa[x]);\n}\ninline void merge(int x,int y){\n    fa[find(x)] =find(y);\n}\nvector<Edge> s;\ninline int kruscal(){\n    int ans =0,cnt =0;\n    for(int i=1;i<=n;++i)   fa[i] =i;//\u9500\u6bc1\u751f\u6210\u6811\n    for(const auto &p : s){\n        int u =p.from,v =p.to;\n        if(find(u)==find(v))    continue;\n        ans +=p.w;\n        cnt ++;\n        merge(u,v);\n        if(cnt==n-1)    return ans;    \n    }   return -1;\n}\n\nint main(){\n    n =read();  int T =read();\n    while(T--){\n        Edge p;\n        p.from =read();\n        p.to =read();\n        p.w =read();\n        s.insert(upper_bound(s.begin(),s.end(),p),p);//\u4e8c\u5206\u4f4d\u7f6e\u66b4\u529b\u63d2\u8fb9\n        printf(\"%d\\n\",kruscal());\n    }\n}\n\n```",
        "postTime": 1566235304,
        "uid": 104000,
        "name": "Kisaragi_77",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "\u4e3b\u8981\u601d\u8def\u4e5f\u662f\u9006\u5e8f\u6c42\u89e3\u6700\u5c0f\u751f\u6210\u6811  \n\u4f46\u5b9e\u73b0\u65b9\u5f0f\u4e0a\u7a0d\u5fae\u6709\u4e9b\u4e0d\u540c  \n\u6211\u4eec\u4f7f\u7528Tedge\u6765\u5b9e\u73b0\u6bcf\u6b21\u540ekruskal\u540e\u7684\u8fd8\u539f\u73b0\u573a  \n### \u53e6\u5916\u6709\u4e00\u70b9\u8981\u5f3a\u8c03  \n\u8ba8\u8bba\u91cc\u8bf4\u6570\u636e\u8303\u56f4\u9519\u8bef\u662f\u4e0d\u5bf9\u7684\uff0c\u4ed4\u7ec6\u7406\u89e3\u9898\u76ee\uff0c\u6211\u4eec\u662f\u5bf9\u8fb9m\u6392\u5e8f\uff0c\u6240\u4ee5\u4f7f\u7528\u7684vis,use\u6570\u7ec4\u7b49\u8303\u56f4\u5e94\u5e94\u8be5\u4e3amaxM\uff0c\u800c\u4e0d\u662fmaxN  \n\u6240\u4ee5  \n### 200*100>6000 ,\u624d\u6709\u4e86\u8ba8\u8bba\u91cc\u8981 *\u4e58100\u7684\u9519\u8bef\u8bf4\u6cd5  \n\u90a3\u4e48\u8d34\u4e0a\u4ee3\u7801\uff0c\u6ce8\u610f\u8fd8\u539f\u7684\u8fc7\u7a0b  \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define N 210\n#define M 6010\nusing namespace std;\nint n,m,fa[N],cnt,ans,t[M];\nbool vis[M];\nstruct Edge{\n\tint u,v,val,id;\n\tbool operator <(Edge s)const{return val<s.val;}\n}edge[M],tedge[M];\ninline int read(){\n\tint x=0,f=1;char ch=getchar();while(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();\n\t}while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();\n\t}return x*f;\n}\ninline int get(int x){return x==fa[x]?x:fa[x]=get(fa[x]);}\nint kruskal(int x){\n\tmemset(vis,0,sizeof(vis));int tans=0;cnt=0;\n\tfor(int i=1;i<=n;i++)fa[i]=i;\n\tsort(edge+1,edge+1+x);\n\tfor(int i=1;i<=x;i++){\n\t\tint u=edge[i].u,v=edge[i].v,z=edge[i].val,id=edge[i].id;\n\t\tint a=get(u),y=get(v);\n\t\tif(a!=y){fa[a]=y;tans+=z;cnt++;vis[id]=1;}\n\t\tif(cnt==n-1)return tans;\n\t}\n\treturn -1;\n}\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<=m;i++) {\n\t\tedge[i].u=read(),edge[i].v=read(),edge[i].val=read(),edge[i].id=i;\n\t}\n\tfor(int j=1;j<=m;j++)tedge[j].u=edge[j].u,tedge[j].v=edge[j].v,tedge[j].val=edge[j].val,tedge[j].id=edge[j].id;\n\tt[m]=kruskal(m);\n\tfor(int j=1;j<=m;j++)edge[j].u=tedge[j].u,edge[j].v=tedge[j].v,edge[j].val=tedge[j].val,edge[j].id=tedge[j].id;\n\tfor(int i=m-1;i;i--){\n\t\tfor(int j=1;j<=i;j++)tedge[j].u=edge[j].u,tedge[j].v=edge[j].v,tedge[j].val=edge[j].val,tedge[j].id=edge[j].id;    \n\t\tif(vis[i+1]){\n\t\t\tans=kruskal(i);\n\t\t\tif(ans!=-1)\n\t\t\t\tt[i]=ans;\n\t\t\telse{\n\t\t\t\tfor(int j=i;j;j--)t[j]=-1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse t[i]=t[i+1];\n\t\tfor(int j=1;j<=i;j++)edge[j].u=tedge[j].u,edge[j].v=tedge[j].v,edge[j].val=tedge[j].val,edge[j].id=tedge[j].id;            //\u8fd8\u539f\u73b0\u573a\n\t} \n\tfor(int j=1;j<=m;j++)\n\t\tprintf(\"%d\\n\",t[j]);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1554532577,
        "uid": 88733,
        "name": "Zekrom",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "### \u601d\u8def\n\n\u521d\u6b21\u5206\u6790\uff0c\u8ba4\u4e3a\u662f **KRUSKAL** \u7b97\u6cd5\u80fd\u591f\u89e3\u51b3\u7684\u4e8b\u60c5\u3002 **KRUSKAL** \u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5b9e\u9645\u4e0a\u975e\u5e38\u4f18\u79c0\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u8dd16000\u904d\u8fb9\u6570\u4e3a1~6000\u7684KRUSKAL\u7b97\u6cd5\u5176\u5b9e\u5e76\u4e0d\u4f1a\u8d85\u65f6\u3002\n\n\u672c\u9898\u5728\u65f6\u95f4\u4e0a\u6700\u5927\u7684\u6d88\u8017\u662f\u52a8\u6001\u7684\u6392\u5e8f\u3002\u5982\u679c\u6bcf\u6dfb\u52a0\u4e00\u6761\u8fb9\u5c31\u53bb\u8dd1\u4e00\u904dsort\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u662f **O(n\\*n\\*logn)** \uff0c\u4f46\u662f\u7531\u4e8e\u6dfb\u52a0\u4e00\u6761\u8fb9\u4e4b\u524d\u5c31\u5df2\u7ecf\u628a\u5176\u4ed6\u7684\u8fb9\u6392\u597d\u5e8f\u4e86\uff0c\u6240\u4ee5\u53ea\u8981\u5c06\u65b0\u7684\u8fb9\u63d2\u5165\u5230\u5408\u9002\u7684\u4f4d\u7f6e\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002\u6240\u4ee5 **\u4e8c\u5206\u67e5\u627e+\u63d2\u5165** \u5c31\u597d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 **O(nlog2)** \u3002\uff08\u5176\u5b9e\u672c\u9898\u7528\u5192\u6ce1\u6392\u5e8f\u90fd\u6bd4sort\u5feb...\u539f\u56e0\u662f\u5192\u6ce1\u4f1a\u4e00\u6b21\u5c06\u65b0\u6dfb\u52a0\u7684\u8fb9\u201c\u4e0a\u6d6e\u201d\u5230\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u6574\u4e2a\u5e8f\u5217\u4e3a\u975e\u964d\u5e8f\u7684\u5730\u65b9\uff0c\u540c\u65f6\u5c06\u6bd4\u8be5\u8fb9\u66f4\u5927\u7684\u8fb9\u4e00\u6b21\u201c\u4e0a\u6d6e\u201d\uff0c\u7b2c\u4e8c\u6b21\u626b\u63cf\u5e8f\u5217\u5c31\u6ee1\u8db3\u6761\u4ef6\u7ec8\u6b62\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 **O(n\\*n)** \uff0c\u90fd\u6bd4sort\u5feb...\u6240\u4ee5STL\u5feb\u901f\u6392\u5e8f\u5e76\u4e0d\u662f\u738b\u80fd\u7684\u3002\uff09\n\n\u6240\u4ee5\u672c\u9898\u7684\u505a\u6cd5\u662f\uff1a\u88f8\u7684 **KRUSKAL** + **\u4e8c\u5206\u67e5\u627e\u63d2\u5165\u6392\u5e8f** \uff01\n\n\u5c0f\u5c0f\u7684\u4f18\u5316\u6280\u5de7\uff1a\u5982\u679c\u65b0\u7684\u517d\u5f84\u63d2\u5165\u540e\uff0c\u4e14\u539f\u5148\u7684\u8def\u7ebf\u5df2\u7ecf\u80fd\u591f\u8fde\u901a\u6240\u6709\u7267\u573a\u65f6\uff0c\u65b0\u7684\u517d\u5f84\u5728\u4e4b\u524d\u6700\u540e\u9009\u62e9\u7684\u4e00\u6761\u8fb9\u4e4b\u540e\uff0c\u90a3\u4e48\u8fd9\u4e00\u6761\u517d\u5f84\u5fc5\u5b9a\u4e0d\u4f1a\u88ab\u8003\u8651\u3002\u76f4\u63a5\u8f93\u51fa\u4e0a\u6b21\u7684\u7b54\u6848\u3002\n\n### \u5b9e\u73b0\n\n\u8fd9\u4efd\u4ee3\u7801\u4f7f\u7528\u4e86 **vector** \u548c **lower_bound** \u6765\u5c55\u793a\u4e8c\u5206\u67e5\u627e\u548c\u63d2\u5165\u7684\u529f\u80fd\u3002\u5982\u679c\u4f7f\u7528 **set** \uff0c\u4ee3\u7801\u7f16\u5199\u8fd8\u4f1a\u66f4\u52a0\u7b80\u5355\u3002\uff08STL\u5927\u6cd5\u3002\uff09\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<algorithm>\n////////////////////////////////////////////////////////////////\nconst int N=205,M=6005;\n\nstruct typeEdge;\nstruct typeNode;\n\nint main();\n////////////////////////////////////////////////////////////////\nstruct typeEdge\n{\n\tint len;\n\ttypeNode * sub1,* sub2;\n\n\tfriend bool operator < (typeEdge pa1,typeEdge pa2)\n\t{\n\t\treturn pa1.len<pa2.len;\n\t}\n\n\tvoid fill(int,typeNode *,typeNode *);\n};\n\nstruct typeNode\n{\n\ttypeNode * pa;\n\n\ttypeNode * find();\n\tvoid merge(typeNode *);\n};\n////////////////////////////////////////////////////////////////\nint n,m,ccN,ans;\ntypeNode node[N];\nstd::vector<typeEdge> edgeV;\n////////////////////////////////////////////////////////////////\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tint i1,i2,i3;\n\t\ttypeEdge ed1;\n\t\tscanf(\"%d%d%d\",&i1,&i2,&i3);\n\t\ted1.fill(i3,node+i1,node+i2);\n\n\t\tstd::vector<typeEdge>::iterator it1;\n\t\tit1=std::lower_bound(edgeV.begin(),edgeV.end(),ed1);\n\t\tedgeV.insert(it1,ed1); //\u5c06\u8fb9\u6dfb\u52a0\u5230\u5408\u9002\u7684\u4f4d\u7f6e\u3002\n\n\t\tmemset(node,NULL,sizeof(node));\n\t\tccN=n,ans=0; //\u5c06\u6240\u6709\u70b9\u4ece\u5e76\u67e5\u96c6\u4e2d\u53d6\u51fa\uff0c\u8868\u793a\u4e0d\u80fd\u8fde\u901a\u3002\n\n\t\tstd::vector<typeEdge>::iterator it2,itE2;\n\t\tit2=edgeV.begin(),itE2=edgeV.end();\n\n\t\twhile(1<ccN&&it2<itE2)\n\t\t{\n\t\t\tif(it2->sub1->find()==it2->sub2->find()) it2++;\n\n\t\t\telse it2->sub1->merge(it2->sub2),ccN--,ans+=it2->len;\n\t\t}\n\n\t\tif(ccN==1) printf(\"%d\",ans),putchar('\\n');\n\t\telse putchar('-'),putchar('1'),putchar('\\n');\n\t}\n\treturn 0;\n}\n\nvoid typeEdge::fill(int pa1,typeNode * pa2,typeNode * pa3)\n{\n\tthis->len=pa1,this->sub1=pa2,this->sub2=pa3;\n}\n\ntypeNode * typeNode::find()\n{\n\tif(this->pa==NULL) return this;\n\telse return this->pa=this->pa->find();\n}\n\nvoid typeNode::merge(typeNode * pa1)\n{\n\tpa1->find()->pa=this;\n\treturn;\n}\n////////////////////////////////////////////////////////////////\n\n```",
        "postTime": 1537593310,
        "uid": 124664,
        "name": "voyage1969",
        "ccfLevel": 0,
        "title": "\u5c0f\u5495\u513f\u505aP1340"
    },
    {
        "content": "\u5176\u5b9e\u53ef\u4ee5\u7528stl\u6c34\u8fc7......\n\u9996\u5148\u6b63\u5e38\u7528kruskal\u7684\u6c42MST\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u6392\u597d\u5e8f\u7684\u8fb9\u96c6\u5408\uff0c\u73b0\u5728\u65f6\u523b\u90fd\u6709\u8fb9\u63d2\u8fdb\u6765\uff0c\u53ea\u8981\u80fd\u7ef4\u62a4\u597d\u8fd9\u4e2a\u96c6\u5408\uff0c\u4e0e\u6b63\u5e38\u7684kruskal\u5c31\u5b8c\u5168\u4e00\u6837\u3002\n\u7ef4\u62a4\u6392\u597d\u5e8f\u7684\u96c6\u5408?\u4e0aset\u3002\u5f53\u7136\u4e86\uff0c\u56e0\u4e3a\u6743\u503c\u53ef\u80fd\u91cd\u590d\uff0c\u6240\u4ee5\u9700\u8981\u7528multiset\u3002\n\u4e0d\u5f00\u4f18\u53161244ms\uff0c\u5f00\u4f18\u5316192ms\uff0c\u90fd\u8fd8\u8bf4\u7684\u8fc7\u53bb\u3002\u8fd9\u79cd\u9898\u76ee\u5c31\u6ca1\u5fc5\u8981\u624b\u5199\u5e73\u8861\u6811\u5566\u3002\n\n\u4ee5\u4e0b\u662f\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint p[210], r[210];\nvoid init(int n)\n{\n    for (int i = 1; i <= n; ++i)\n        p[i] = i;\n}\nint find(int x)\n{\n    return p[x] == x ? x : p[x] = find(p[x]);\n}\n\nbool connected(int x, int y)\n{\n    return find(x) == find(y);\n}\n\nvoid connect(int x, int y)\n{\n    int px = find(x), py = find(y);\n    if (px != py)\n    {\n        if (r[px] > r[py])\n            p[py] = px;\n        else\n        {\n            p[px] = py;\n            if (r[px] == r[py])\n                ++r[py];\n        }\n    }\n}\n\nstruct E\n{\n    int a, b, w;\n    bool operator<(const E &r) const\n    {\n        return w < r.w;\n    }\n};\n\ninline int read()\n{\n    static char ch;\n    bool sgn = false;\n    while ((ch = getchar()) < '0' || ch > '9')\n        if (ch == '-')\n            sgn = true;\n    int res = ch - 48;\n    while ((ch = getchar()) >= '0' && ch <= '9')\n        res = res * 10 + ch - 48;\n    return sgn ? -res : res;\n}\nconst int inf = 0x3f3f3f3f;\n//\u52a8\u6001\u6700\u5c0f\u751f\u6210\u6811,\u901f\u5ea6\u74f6\u9888\u5728\u6392\u5e8f\u800c\u975e\u9009\u8fb9\n//\u6240\u4ee5\u8003\u8651\u7528set\u7ef4\u62a4\u6392\u597d\u5e8f\u7684\u8fb9\nint main()\n{\n    int n = read(), w = read();\n    multiset<E> st;\n    while (w--)\n    {\n        init(n);\n        int a = read(), b = read(), w = read();\n        st.insert({a, b, w});\n        int tmp = n, ans = 0;\n        for (auto it = st.begin(), end = st.end(); it != end; ++it)\n            if (!connected(it->a, it->b))\n            {\n                connect(it->a, it->b);\n                ans += it->w;\n                if (--tmp == 1)\n                {\n                    printf(\"%d\\n\", ans);\n                    goto nxt;\n                }\n            }\n        puts(\"-1\");\n    nxt:;\n    }\n}\n\n```\n",
        "postTime": 1518923237,
        "uid": 68618,
        "name": "MashPlant",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    },
    {
        "content": "\u770b\u5230\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u9996\u5148\u60f3\u5230\u7684\u662f\u5bf9\u4e8e\u6bcf\u4e00\u5468\uff0c\u6c42\u8fd9\u4e2a\u7267\u573a\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\u7531\u4e8e\u8fd9\u5f20\u56fe\u662f\u7a00\u758f\u56fe\uff0c\u6240\u4ee5\u5e94\u7528Kruskal\u7b97\u6cd5\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(w\u00b7e\u00b7loge)\uff0c\u800c\u8fd9\u9053\u9898\u7684\u6570\u636e\u8303\u56f4\u4ec5\u652f\u6301O(w\u00b7e)\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5bf9\u8fd9\u4e2a\u7b97\u6cd5\u8fdb\u884c\u4f18\u5316\u3002\u4ed4\u7ec6\u89c2\u5bdf\u53d1\u73b0\uff0cKruskal\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u6392\u5e8f\u65f6\u95f4\uff0c\u7531\u4e8e\u6700\u5feb\u7684\u6392\u5e8f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n\u00b7logn)\uff0c\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n\u00b7logn)\u3002\u800c\u5bf9\u4e8e\u6bcf\u4e00\u6b21Kruskal\u7b97\u6cd5\uff0c\u90fd\u662f\u52a0\u4e00\u6761\u8fb9\u7136\u540e\u6392\u4e2a\u5e8f\uff0c\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230\u4e86\u63d2\u5165\u6392\u5e8f\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u63d2\u5165\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u964d\u5230O(w\u00b7e)\u3002\n",
        "postTime": 1440252564,
        "uid": 4865,
        "name": "Mr_Li",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1340 \u3010\u517d\u5f84\u7ba1\u7406\u3011"
    }
]