[
    {
        "content": "## \u6838\u5fc3\u7b97\u6cd5\uff1a$Tarjan$\u7f29\u70b9+\u6700\u77ed\u8def\n~~\u770b\u6807\u7b7e\u77e5\u9053\u7684~~\n\n#### \u6211\u5c3d\u91cf\u8bf4\u660e\u7684\u901a\u4fd7\u6613\u61c2\n\n\n------------\n\n### 1.\u4e3a\u4ec0\u4e48\u8981\u7f29\u70b9\n\n\u6765\u770b\u8fd9\u6837\u4e00\u4e2a\u56fe\n![\u968f\u4fbf\u753b\u7684](https://img39.pixhost.to/images/314/137831476_tarjan.png)\n\u6211\u4eec\u80fd\u770b\u5230$2-3-4$\u6784\u6210\u4e86\u4e00\u4e2a\u73af\uff0c\u8fd9\u4e2a\u73af\u5185\u6bcf\u4e2a\u70b9\u90fd\u80fd\u5230\u7684\u73af\u4e2d\u4efb\u610f\u4e00\u4e2a\u5176\u4ed6\u7684\u70b9\uff0c\u8fd9\u5c31\u53eb\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u53ea\u662f\u4e00\u4e2a\u901a\u4fd7\u7684\u8bb2\u6cd5\uff0c\u4e0d\u662f\u5f88\u4e25\u8c28\uff0c\u4f46\u61c2\u8fd9\u4e2a\u610f\u601d\u5c31\u597d\u4e86\uff09\n\n\u5728\u4e00\u4e2a\u6709\u5411\u6709\u73af\u56fe\u4e2d\u624d\u4f1a\u6709\u5f3a\u8fde\u901a\u5206\u91cf\uff0c**\u5728\u5b9e\u9645\u505a\u9898\u65f6\u6211\u4eec\u628a\u4e00\u4e2a\u5355\u70b9\u4e5f\u770b\u505a\u5f3a\u8fde\u901a\u5206\u91cf**\n\n\u7531\u4e8e\u672c\u9898\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u5c40\u57df\u7f51\uff09\u5185\u7684\u70b9\u4e4b\u95f4\u8ddd\u79bb\u4e3a$0$\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u8c61\u5230$2-3-4$\u91cd\u5408\u5728\u4e00\u8d77\u7684\u753b\u9762\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e4b\u95f4\u6ca1\u6709\u8ddd\u79bb\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5f53\u505a\u4e00\u4e2a\u70b9\u5efa\u56fe\uff0c\u5c31\u6784\u6210\u4e86\u4e00\u4e2aDAG\uff0c\u5373\u6709\u5411\u65e0\u73af\u56fe\uff0c\u8dd1\u6700\u77ed\u8def\n\n\u5728\u8fd9\u91cc\u5c31\u4e0d\u8be6\u7ec6\u4ecb\u7ecd$Tarjan$\u7b97\u6cd5\u4e86\uff0c\u672c\u9898\u89e3\u4e3b\u8981\u8bb2\u601d\u8def\n\n### 2.\u6700\u77ed\u8def\n$Dijkstra$+\u5806\u4f18\u5316\u5c31\u591f\u4e86\uff0c\u56e0\u4e3a$Floyd$\u4f1a\u70b8\uff0c$SPFA$\u6b7b\u4e86\uff0c\u522b\u7684\u6211\u4e5f\u4e0d\u77e5\u9053\u4e86\n\n\u7f29\u70b9\u540e\u7684\u7cbe\u9ad3\u6240\u5728\u5c31\u662f\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u4e0d\u662f\u6309\u70b9\u8dd1\uff0c\u800c\u662f\u6309\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u901a\u5e38\u7528\u989c\u8272color\u8868\u793a\uff09\n\n### 3.\u4ee3\u7801+\u6ce8\u91ca\n```cpp\n#include<bits/stdc++.h>\n#define INF 0x3f3f3f3f//\u4f2a\u6781\u5927\u503c\nusing namespace std;\ntypedef pair<int,int> pii;\nstruct Node\n{\n\tint head,dis;//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u50a8\n\tint dfn,low,color;\n   \t //dfn,low\u662ftarjan\u7b97\u6cd5\u4e2d\u56fa\u6709\u7684\uff0c\u60f3\u8be6\u7ec6\u4e86\u89e3\u53ef\u4ee5\u767e\u5ea6\uff0c\n         //color\u662f\u6307\u989c\u8272\uff0c\u4e5f\u5c31\u662f\u8be5\u70b9\u6240\u5c5e\u54ea\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n\tbool vis;//tarjan\u7b97\u6cd5\u4e2d\u8fd9\u4e2a\u70b9\u6709\u6ca1\u6709\u5728\u6808\u91cc\u7684\u6807\u5fd7\n}node[200005];\nstruct Edge\n{\n\tint next,len,to;//\u5b58\u8fb9\uff0c\u4e0d\u89e3\u91ca\u4e86\n}edge[10005];\nint n,m,cnt,color_cnt,x[1000005],y[1000005],l[1000005],deep;\n//n,m\u9898\u76ee\u4e2d\u7684\u610f\u601d\uff0ccolor_cnt\u8bb0\u5f55\u4e00\u5171\u6709\u51e0\u79cd\u989c\u8272\uff08\u5f3a\u8fde\u901a\u5206\u91cf\uff09\uff0c\n//x,y,l\u6570\u7ec4\u5b58\u50a8\u8f93\u5165\u7684\u8fb9\u8d77\u70b9\uff0c\u7ec8\u70b9\u548c\u957f\u5ea6\uff0c\ndeep\u8bb0\u5f55\u641c\u7d22\u6df1\u5ea6\nstack<int>s;//STL\u5927\u6cd5\u597d\ninline void init()\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tnode[i].head\n\t\t=node[i].dfn\n\t\t=node[i].dis\n\t\t=node[i].vis\n\t\t=node[i].low\n\t\t=0;\n\t}\n\tcnt=0;\n}//\u6e05\u7a7a\u539f\u56fe\uff0c\u4fbf\u4e8e\u5efa\u65b0\u56fe\ninline void addEdge(int u,int v,int w)\n{\n\tedge[++cnt]={node[u].head,w,v};\n\tnode[u].head=cnt;\n}\nvoid Tarjan(int u)\n{\n//\u7eaf\u6a21\u677f\n\ts.push(u);\n\tnode[u].dfn=node[u].low=++deep;\n\tnode[u].vis=1;\n\tfor(int e=node[u].head;e;e=edge[e].next)\n\t{\n\t\tint v=edge[e].to;\n\t\tif(!node[v].dfn)\n\t\t{\n\t\t\tTarjan(v);\n\t\t\tnode[u].low=min(node[u].low,node[v].low);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(node[v].vis)\n\t\t\t{\n\t\t\t\tnode[u].low=min(node[u].low,node[v].dfn);\n\t\t\t}\n\t\t}\n\t}\n\tif(node[u].dfn==node[u].low)\n\t{\n\t\tint tmp;\n\t\tcolor_cnt++;//\u6709\u65b0\u7684\u989c\u8272\u4e86\n\t\tdo\n\t\t{\n\t\t\ttmp=s.top();\n\t\t\ts.pop();\n\t\t\tnode[tmp].color=color_cnt;\n            //\u8bb0\u5f55\u70b9\u7684\u989c\u8272\n\t\t\tnode[tmp].vis=0;\n\t\t}while(tmp!=u);\n\t}\n}\nvoid Dijkstra()\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tnode[i].dis=INF;\n\t}//\u521d\u59cb\u5316\u5404\u70b9\n\tint S=node[1].color;//\u83b7\u53d61\u53f7\u70b9\u7684\u989c\u8272\n\tnode[S].dis=0;\n\tpriority_queue<pii,vector<pii>,greater<pii> >q;\n    //\u4e3a\u4ec0\u4e48\u662fstl\u7684\u4f18\u5148\u961f\u5217\uff0c\u56e0\u4e3a\u6211\u4e0d\u4f1a\u624b\u5199\u5806\u3002\u3002\n\tq.push({0,S});\n    //\u4ee5\u4e0b\u90fd\u662f\u6a21\u677f\n\twhile(q.size())\n\t{\n\t\tpii tmp=q.top();\n\t\tq.pop();\n\t\tint d=tmp.first,u=tmp.second;\n\t\tif(d!=node[u].dis)continue;\n\t\tfor(int e=node[u].head;e;e=edge[e].next)\n\t\t{\n\t\t\tint v=edge[e].to;\n\t\t\tif(node[v].dis>d+edge[e].len)\n\t\t\t{\n\t\t\t\tnode[v].dis=d+edge[e].len;\n\t\t\t\tq.push({node[v].dis,v});\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x[i],&y[i],&l[i]);\n        //\u628a\u8fb9\u5b58\u4e0b\u6765\uff0c\u5f85\u4f1a\u5efa\u65b0\u56fe\u8fd8\u4f1a\u6709\u7528\n\t\taddEdge(x[i],y[i],l[i]);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(!node[i].dfn)\n\t\t{\n\t\t\tTarjan(i);\n\t\t}\n\t}\n\tinit();\n    //\u8dd1\u5b8ctarjan\uff0c\u6e05\u7a7a\u539f\u56fe\n\tfor(int i=1;i<=m;i++)\n\t{//\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u989c\u8272\u4e0d\u540c\u8bf4\u660e\u4e0d\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\uff0c\u90a3\u4e48\u5c31\u8fde\u4e00\u6761\u8fb9\uff0c\u5426\u5219\u4e0d\u8fde\n\t\tint u=x[i],v=y[i],w=l[i];\n\t\tif(node[u].color!=node[v].color)\n\t\t{\n\t\t\taddEdge(node[u].color,node[v].color,w);\n\t\t}\n\t}\n\tDijkstra();//\u8dd1\u6700\u77ed\u8def\n\tcout<<node[node[n].color].dis<<endl;\n    //\u8fd9\u91cc\u7684\u8f93\u51fa\u5c24\u5176\u6ce8\u610f\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u65b0\u56fe\u662f\u6309\u989c\u8272\u5b58\u7684\uff0c\u6240\u4ee5\u8f93\u51fa\u4e0d\u5e94\u8be5\u76f4\u63a5\u8f93\u51fan\u7684dis\uff0c\u800c\u662fn\u7684\u989c\u8272\u7684dis\uff0c\uff08dis\u53731-n\u7684\u6700\u77ed\u8ddd\u79bb\uff09\n\treturn 0;\n}\n```\n\u5e0c\u671b\u672c\u849f\u84bb\u8bb2\u7684\u4f60\u4eec\u80fd\u542c\u61c2\uff0c\u4e0d\u61c2\u53ef\u4ee5at\u6211\u7559\u8a00\n\n\u8fd9\u662f\u6211\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u5199\u9898\u89e3\u771f\u662f\u592a\u7d2f\u4e86\uff0c\u6c42\u8fc7\u5ba1",
        "postTime": 1582518419,
        "uid": 203102,
        "name": "Diamiko",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "~~\u8fd9\u4e2a\u9898\u7684\u51fa\u9898\u4eba\u4e00\u5b9a\u662f\u6807\u9898\u515a\uff08\u6807\u9898\u515a\u7956\u5e08\uff09~~\n\n\u4e8b\u5b9e\u4e0a\u8fd9\u4e2a\u9898\u662f\u975e\u5e38\u7ecf\u5178\u7684**\u6a21\u677f**\u9898\u3002\n\n\u56e0\u4e3a\u7531\u4e92\u901a\u7684\u70b9\u8ddd\u79bb\u90fd\u4e3a0\u53ef\u4ee5\u60f3\u5230\u7f29\u70b9\uff0c\u7136\u540e\u539f\u56fe\u5c31\u53d8\u6210\u4e86\u4e00\u4e2aDAG\uff0c\u5c31\u53ef\u4ee5\u8dd1\u6700\u77ed\u8def\u4e86\u3002\n\n\u6240\u4ee5\u505a\u8fd9\u4e2a\u9898\u4f60\u5f97\u5148\u5b66\u4f1atarjan\u7f29\u70b9\u3001\u6700\u77ed\u8def\u3002\n\n\u81f3\u4e8e\u6700\u77ed\u8def\u7b97\u6cd5\u5728\u8fd9\u4e2a\u9898\u76ee\u524d\u53ef\u7528\u7684\u53ea\u6709dijkstra\uff08spfa\uff1a\u6b7b\u4e86\uff0cfloyd\uff1a\u4f1a\u70b8\u65f6\u95f4\uff09\u3002\uff08\u6211\u5199\u7684\u662fdijkstra\u5806\u4f18\u5316\n\n\u7136\u540e\u5c31\u662f\u4ee3\u7801\u5b9e\u73b0\u7684\u4e8b\u4e86\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int inf=2147483647;\nint nex[1000005],beg[1000005],to[1000005],w[1000005],s[1000005],low[1000005],dfn[1000005],ins[1000005],b[1000005],top,y,k,u[1000005],v[1000005],ww[1000005],d[1000005],p[1000005],n,m,cnt,e,dd,x,z;//\u4e00\u5927\u957f\u4e32\u7684\u5b9a\u4e49\npriority_queue<pair<int,int> >q;\nvoid add(int x,int y){\n    to[++e]=y;\n    nex[e]=beg[x];\n    beg[x]=e;\n}//tarjan\u52a0\u8fb9\nvoid add2(int x,int y,int z){\n    to[++e]=y;\n    nex[e]=beg[x];\n    beg[x]=e;\n    w[e]=z;\n}//dijkstra\u52a0\u8fb9\nvoid tarjan(int x){\n\tdfn[x]=low[x]=++dd;\n\ts[++top]=x;\n\tins[x]=1;\n    for(int i=beg[x];i;i=nex[i]){\n        int y=to[i];\n        if(dfn[y]==0){\n            tarjan(y);\n            low[x]=min(low[x],low[y]);\n        }\n        else if(ins[y])\n            low[x]=min(low[x],dfn[y]);\n    }\n\tif(low[x]==dfn[x]){\n\t\tcnt++;\n\t\tdo{\n\t\t\tk=s[top--];\n\t\t\tins[k]=0;\n\t\t\tb[k]=cnt;\n\t\t}while(x!=k);\n\t}\n}//tarjan\u6a21\u677f\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d%d%d\",&u[i],&v[i],&ww[i]),add(u[i],v[i]);//\u8f93\u5165\uff0c\u5e76\u5b58\u8d77\u6765\n\tfor(int i=1;i<=n;i++)\n\t\tif(dfn[i]==0)tarjan(i);//tarjan\n\tmemset(beg,0,sizeof(beg));\n\tmemset(nex,0,sizeof(nex));\n\tmemset(to,0,sizeof(to));\n    e=0;//\u6e05\u7a7a\u94fe\u5f0f\u524d\u5411\u661f\n    for(int i=1;i<=m;i++)\n        if(b[u[i]]!=b[v[i]])\n            add2(b[u[i]],b[v[i]],ww[i]);//\u7f29\u70b9\n    for(int i=1;i<=cnt;i++)\n        d[i]=inf;\n    d[b[1]]=0;\n    q.push(make_pair(0,b[1]));\n    while(!q.empty()){\n        int x=q.top().second;\n        q.pop();\n        if(p[x])\n            continue;\n        p[x]=1;\n        for(int i=beg[x];i;i=nex[i]){\n            int y=to[i],z=w[i];\n            if(d[y]>d[x]+z){\n                d[y]=d[x]+z;\n                q.push(make_pair(-d[y],y));\n            }\t\t\n        }\n    }//dijkstra\u6a21\u677f\n    printf(\"%d\",d[b[n]]);\n\treturn 0;\n}\n```\n",
        "postTime": 1573486741,
        "uid": 104662,
        "name": "PrincessQi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "### $\\text {\u7f29\u70b9\u518d\u52a0\u4e0a\u62d3\u6251\u6392\u5e8f\u53ef\u4ee5\u641e\u6389\u8fd9\u9053\u9898}$\n\n _\u8fd8\u4e0d\u77e5\u9053\u600e\u4e48\u7f29\u70b9\u7684\u8bf7\u5148\u505a\u4e00\u4e0b\u8fd9\u9053[\u7f29\u70b9\u677f\u5b50\u9898](https://www.luogu.org/problem/P3387)_ \n\n _\u91cc\u9762\u7684\u9898\u89e3\u4e5f\u5f88\u8be6\u7ec6\uff0c\u76f8\u4fe1\u60a8\u82b1\u4e00\u4e9b\u65f6\u95f4\u53ef\u4ee5\u5b66\u4f1a\u5b83qwq_ \n\n~~\u597d\uff0c\u65e2\u7136\u60a8\u5df2\u7ecf\u4f1a\u4e86\u7f29\u70b9\uff0c~~ \u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u5bb9\u6613\u4e86\n\n\u5148\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u770b\u5230\u8fd9\u9053\u9898\u4f1a\u60f3\u5230\u7f29\u70b9\n\n\u9898\u5e72\u539f\u8bdd\uff1a\n$\\text {\u5982\u679c\u5b58\u5728A\u5230B\u7684\u8fde\u63a5\u7684\u540c\u65f6\u4e5f\u5b58\u5728B\u5230A\u7684\u8fde\u63a5\u7684\u8bdd\uff0c\u90a3\u4e48A\u548cB\u5b9e\u9645\u4e0a\u5904\u4e8e\u540c\u4e00\u5c40\u57df\u7f51\u5185\uff0c}$\n$\\text {\u53ef\u4ee5\u901a\u8fc7\u672c\u5730\u4f20\u8f93\uff0c\u8fd9\u6837\u82b1\u8d39\u7684\u4f20\u8f93\u65f6\u95f4\u4e3a0}$ \n\n**\u4e5f\u5c31\u662f\u8bf4\u5728\u4e00\u4e2a\u73af\u4e2d\u968f\u4fbf\u8dd1\uff0c\u5b83\u7684\u82b1\u8d39\u662f0\u4e5f\u5c31\u662f\u4e00\u4e2a\u73af\u5185\u90e8\u7684\u8fb9\u6839\u672c\u4e0d\u7528\u7ba1\uff0c\u76f4\u63a5\u628a\u4e00\u4e2a\u73af\u5f53\u6210\u4e00\u4e2a\u70b9\u5c31\u884c**\n\n\u7ecf\u8fc7Tarjan\u7f29\u70b9\uff0c\u53ef\u4ee5**\u5c06\u73af\u53d8\u6210\u70b9**\n\n\u6b63\u597d\u5b9e\u73b0\u4e86\u5728\u73af\u4e2d\u4f20\u8f93\u82b1\u8d39\u4e3a$0$\u7684\u8981\u6c42\n\n\u4e8e\u662f\u8fd9\u4e2a\u56fe\u5c31\u53d8\u6210\u4e00\u4e2a **DAG**\u3000$\\text {\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ }$~~\u90a3\u6211\u4eec\u4e0d\u5c31\u53ef\u4ee5\u4e3a\u6240\u6b32\u4e3a\u4e86\u5417~~$qwqwq$\n\n\u628a$1$\u53f7\u70b9\u7684$dis$\u8d4b\u4e3a$0$\uff0c\u5176\u4ed6\u5168\u90e8\u8d4b\u4e3a\u4e00\u4e2a\u6700\u5927\u503c\n\n\u90a3\u4e48\u4e00\u4e2a\u7b80\u5355\u7684DP\u5c31\u53ef\u4ee5\u641e\u6389\u5b83$qwqwq$\n\n\u4ece$1$\u53f7\u70b9\u5411\u5916\u6269\u5c55 \u6700\u540e\u76f4\u63a5\u8f93\u51fa$n$\u53f7\u70b9\u7684$dis$\n\n\u7c7b\u4f3c\u4e8e\u62d3\u6251\u6392\u5e8f\uff0c\u4e0d\u8fc7\u4e0d\u7528\u7ba1$1$\u53f7\u70b9\u4e4b\u524d\u7684\u70b9\n\nCode:\n```cpp\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n\nusing namespace std;\n\ninline int read() {\n\tint op = 1, a = 0; char c = getchar();\n\tfor (; c < '0' || c > '9'; c = getchar()) if (c == '-') op = -1;\n\tfor (; c >= '0' && c <= '9'; c = getchar()) a = a * 10 + c - '0';\n\treturn op * a;\n}\n\nconst int maxn = 200003;\nconst int maxm = 1000003;\n\nint n, m;\n\nint cnt;\nint head[maxn];\nstruct Edge {int w, fr, to, nxt;} e[maxm];\n\ninline void add_edge(int u, int v, int w) {\n\te[++cnt].w = w;\n\te[cnt].fr = u;\n\te[cnt].to = v;\n\te[cnt].nxt = head[u];\n\thead[u] = cnt;\n}\n\nint Time;\nbool vis[maxn];\nint s[maxn], r; // \u6a21\u62df\u6808 \nint belong[maxn], num;\n\t// belong[i]\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u70b9\u5c5e\u4e8e\u54ea\u4e2a\u5927\u70b9\n\t// num\u4e3a\u5927\u70b9\u7684\u7f16\u53f7 \nint dfn[maxn], low[maxn];\n\nvoid Tarjan(int u) {\n\tdfn[u] = low[u] = ++Time;\n\ts[++r] = u; vis[u] = 1;\n\tint R = r;\n\t\t// \u6ce8\u610f R \u4e0d\u80fd\u5b9a\u4e49\u6210\u5168\u5c40\u53d8\u91cf\uff0c\n\t\t// \u8fd9\u91cc\u4fdd\u5b58\u4e00\u4e0b\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6700\u65e9\u904d\u5386\u5230\u7684\u70b9\u5728\u6808\u4e2d\u7684\u4f4d\u7f6e \n\t\t// \u540e\u8fb9\u53ef\u4ee5\u53d8\u5f97\u65b9\u4fbf\u4e00\u70b9 \n\tfor (int i = head[u]; i; i = e[i].nxt) {\n\t\tint v = e[i].to;\n\t\tif (!dfn[v]) {\n\t\t\tTarjan(v);\n\t\t\tlow[u] = min(low[u], low[v]);\n\t\t}\n\t\telse if (vis[v]) low[u] = min(low[u], dfn[v]);\n\t}\n\tif (dfn[u] == low[u]) {\n\t\tnum++;// \u4e00\u4e2a\u65b0\u7684\u5f3a\u8fde\u901a\u5206\u91cf \n\t\t// R \u5728\u8fd9\u91cc\u6d3e\u4e0a\u7528\u573a\uff0c\u5f20\u6d69\u5a01\u8001\u5e08\u7684\u5de7\u5999\u7684\u5199\u6cd5 \n\t\tfor (int i = R; i <= r; i++) {\n\t\t\tbelong[s[i]] = num;\n\t\t\tvis[s[i]] = 0;\n\t\t}\n\t\tr = R - 1;\n\t}\n}\n\n// \u91cd\u65b0\u5efa\u4e00\u4e0b\u56fe \nvoid rebuild() {\n\tcnt = 0;\n\tmemset(head, 0, sizeof head);\n\tfor (int i = 1; i <= m; i++) {\n\t\tint u = belong[e[i].fr], v = belong[e[i].to];\n\t\tif (u == v) continue;\n\t\t\t// \u5982\u679c\u4e24\u4e2a\u70b9\u5c5e\u4e8e\u540c\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fb9\u4e0d\u7528\u7ba1 \n\t\telse add_edge(u, v, e[i].w);\n\t}\n}\n\nint dis[maxn];\n\nvoid Topo(int s) {\n\tmemset(dis, 0x3f, sizeof dis);\n\tqueue<int> q;\n\tq.push(s);\n\tdis[s] = 0;// \u8bb0\u5f97\u8981\u628a\u8d77\u70b9\u7684dis\u8bbe\u4e3a0 \n\tfor (; q.size(); ) {\n\t\tint u = q.front();\n\t\tq.pop();// \u5341\u5e74 OI \u4e00\u573a\u7a7a\uff0c\u5fd8\u52a0 pop \u89c1\u7956\u5b97 \n\t\tfor (int i = head[u]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].to;\n\t\t\tdis[v] = min(dis[v], dis[u] + e[i].w);\n\t\t\tq.push(v);\n\t\t}\n\t}\n}\n\nint main() {\n\tn = read(), m = read();\n\tfor (int i = 1; i <= m; i++) {\n\t\tint u = read(), v = read(), w = read();\n\t\tadd_edge(u, v, w);\n\t}\n\tfor (int i = 1; i <= n; i++) if (!dfn[i]) Tarjan(i);\n\trebuild();\n\t// \u6ce8\u610f\u4e0b\u9762 1 \u548c n \u7684\u5916\u8fb9\u5957\u4e86belong[]\uff0c\u8fd9\u91cc\u624b\u8bef\u672c\u9898\u51c9 \n\tTopo(belong[1]); \n\tcout << dis[belong[n]] << '\\n';\n\treturn 0;\n}\n```\n",
        "postTime": 1567643532,
        "uid": 162865,
        "name": "NxtEcho",
        "ccfLevel": 0,
        "title": "P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "### $Tarjan$\u7f29\u70b9 + $dijkstra$\n\n\u663e\u7136\uff0c\u4f9d\u9898\u610f\u53ef\u5f97\uff0c~~\u8fd9\u9053\u9898\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u6ca1\u6709\u534a\u6bdb\u94b1\u5173\u7cfb~~\n\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u82e5\u4e00\u4e9b\u8fb9\u5f62\u6210\u73af\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e9b\u8fb9\u7684\u8fb9\u6743\u53ef\u5168\u90e8\u53d8\u6210$0$\u3002\n\n\u6240\u4ee5\u8fd9\u9898\u8981\u7f29\u70b9\uff0c\u628a\u73af\u7f29\u6210\u4e00\u4e2a\u5927\u70b9\uff0c\u5b8c\u7f8e\u89e3\u51b3\u8fb9\u6743\u6e05\u96f6\u7684\u95ee\u9898\u3002\u5269\u4e0b\u7684\u5c31\u662f\u4e00\u4e2a$DAG$\uff0c\u6211\u4eec\u5c31\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u627e\u5230$1$\u5230$n$\u7684\u6700\u77ed\u8def\u5f84\u3002\n\n\u5bf9\u4e8e\u6700\u77ed\u8def\uff0c\u6211\u66f4\u559c\u6b22\u7528$dijkstra$\u3002\u6211\u8ba4\u4e3a$dijkstra$\u6bd4$SPFA$\u4f1a\u66f4\u5feb\u4e00\u4e9b\u3002\n\n$Code:$\n```cpp\n#include<iostream>\n#include<cmath>\n#include<cstring>\n#include<cstdio>\n#include<stack>\n#include<queue>\nusing namespace std;\nconst int N=200005;\nstruct edge\n{\n\tint to,next,waste;\n}e[1000005];\nint n,m,tot,deep,summ;\nint dfn[N],low[N],head[N],color[N],dis[N];\nbool visited[N],f;\nstack <int> s;\npriority_queue <pair<int,int> > q;\ntemplate<class type>inline void read(type &k)\n{\n\tk=0;type t=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') t=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') {k=k*10+ch-'0';ch=getchar();}\n\tk*=t;\n}\ninline void add(int x,int y,int z)\n{\n\te[++tot].to=y;e[tot].next=head[x];e[tot].waste=z;head[x]=tot;\n}\ninline void tarjan(int u)\n{\n\tdfn[u]=low[u]=++deep;\n\tvisited[u]=1;s.push(u);\n\tfor(register int i=head[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(visited[v]) low[u]=min(low[u],low[v]);\n\t}\n\tif(dfn[u]==low[u])\n\t{\n\t\tcolor[u]=++summ;\n\t\tvisited[u]=0;\n\t\twhile(s.top()!=u)\n\t\t{\n\t\t\tcolor[s.top()]=summ;\n\t\t\tvisited[s.top()]=0;\n\t\t\ts.pop();\n\t\t}\n\t\ts.pop();\n\t}\n}\nvoid dijkstra()\n{\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(visited,false,sizeof(visited));\n\tq.push(make_pair(0,color[1]));dis[color[1]]=0;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.top().second;q.pop();\n\t\tif(visited[u]) continue;\n\t\tvisited[u]=1;\n\t\tfor(register int i=head[u];i;i=e[i].next)\n\t\t{\n\t\t\tint v=e[i].to;\n\t\t\tif(dis[v]>dis[u]+e[i].waste)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+e[i].waste;\n\t\t\t\tq.push(make_pair(-dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tint i;\n\tread(n);read(m);\n\tint x[m+1],y[m+1],z[m+1];\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tread(x[i]);read(y[i]);read(z[i]);\n\t\tadd(x[i],y[i],z[i]);\n\t}\n\tfor(i=1;i<=n;i++)\n\tif(!dfn[i]) tarjan(i);\n\ttot=0;memset(head,0,sizeof(head));\n//\tfor(i=1;i<=n;i++)\n//\tcout<<color[i]<<\" \";\n\tfor(i=1;i<=m;i++)\n\tif(color[x[i]]!=color[y[i]])\n//\tcout<<x[i]<<' '<<y[i]<<endl,\n\tadd(color[x[i]],color[y[i]],z[i]);\n\tdijkstra();\n\tprintf(\"%d\\n\",dis[color[n]]);\n\treturn 0;\n}",
        "postTime": 1571025689,
        "uid": 59980,
        "name": "lianliangyu",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7740\u5b9e\u662f\u4e00\u9053\u677f\u5b50\u9898\uff0c\u4e0d\u8fc7\u770b\u7740dalao\u4eec\u5199\u7684\u90fd~~\u597d\u9ebb\u70e6\u554a~~QAQ\n\n\u9898\u610f\uff1a\u7ed9\u4f60\u4e00\u4e2a\u5e26\u6743\u6709\u5411\u56fe\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e4b\u95f4\u7684\u8fb9\u6743\u4e3a$0$\uff0c\u6c42\u4ece\u8d77\u70b9$1$\u5230$n$\u7684\u6700\u77ed\u8def\u3002\n\n\u4e24\u70b9\u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\u5176\u5b9e\u5c31\u662f\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u610f\u601d\u8fa3\uff0c\u4e5f\u5c31\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u70b9\u7684\u8ddd\u79bb\u4e3a$0$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528$tarjan$\u7f29\u70b9\uff0c\u7136\u540e\u4ece\u8d77\u70b9\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u5c31\u597d\u4e86\uff0c\u81f3\u4e8e$tarjan$\u7f29\u70b9\uff0c\u53ef\u4ee5\u53bb\u505a\u4e00\u4e0b[P3387](https://www.luogu.org/problemnew/show/P3387)\uff0c\u4f60\u5c31\u80fd\u5bf9tarjan\u6709\u4e86\u6bd4\u8f83\u6df1\u5165\u7684\u7406\u89e3\u5566\u3002\n\n\u6ce8\u610f\u4e00\u4e0b\uff0c\u5728\u6211\u4eec\u7f29\u5b8c\u70b9\u540e\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u591a\u5224\u65ad\u4e0b\u8fd9\u4e24\u4e2a\u70b9\u662f\u4e0d\u662f\u5728\u540c\u4e00\u4e2a\u524d\u8fde\u901a\u5206\u91cf\u91cc\uff0c\u5728\u7684\u8bdd\u5c31\u628a\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u8bbe\u6210$0$\u3002\n\n**Code**\n``` cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#define N 250000\n#define INF 99999999\nusing namespace std;\nstruct edge\n{\n\tint to,cost;\n};\nvector <edge> a[N];\nqueue <int> q;\nint n,m,dfn[N],low[N],co[N],stk[N],top,num,cnt,dis[N],vis[N];\nvoid tarjan(int u)   //tarjan\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\n{\n\tlow[u]=dfn[u]=++cnt;\n\tstk[++top]=u;\n\tvector <edge>::iterator it;\n\tfor (it=a[u].begin();it!=a[u].end();it++)\n\t{\n\t\tint v=(*it).to;\n\t\tif (!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse\n\t\t\tif (!co[v])\n\t\t\t\tlow[u]=min(low[u],dfn[v]);\n\t}\n\tif (low[u]==dfn[u])\n\t{\n\t\tco[u]=++num;       //\u7ed9\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7\n\t\twhile (stk[top]!=u)\n\t\t\tco[stk[top]]=num,top--;\n\t\ttop--;\n\t}\n}\nvoid spfa()   //\u5355\u6e90\u6700\u77ed\u8def\n{\n\t\tfor (int i=1;i<=n;i++)\n\t\tdis[i]=INF;\n\tdis[1]=0;\n\tq.push(1);\n\tvis[1]=1;\n\tvector <edge>::iterator it;\n\twhile (!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tvis[u]=0;\n\t\tfor (it=a[u].begin();it!=a[u].end();it++)\n\t\t{\n\t\t\tint v=(*it).to,w=(*it).cost;\n\t\t\tif (co[u]==co[v])w=0;\n\t\t\tif (dis[v]>dis[u]+w)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\tif (!vis[v])\n\t\t\t\t\tq.push(v),vis[v]=1;\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tint x,y,z;\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\ta[x].push_back((edge){y,z});\n\t}\n\tfor (int i=1;i<=n;i++)\n\t\tif (!dfn[i])\n\t\t\ttarjan(i);\n\tspfa();\n\tprintf(\"%d\",dis[n]);\n\treturn 0;\n}\n```\n\u5077\u61d2\u5199\u7684$spfa$\u548c$vector$QAQ",
        "postTime": 1557631221,
        "uid": 73231,
        "name": "eee_hoho",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "## \u9898\u76ee\u94fe\u63a5\uff1a\n\n[P2169 \u6b63\u5219\u8868\u8fbe\u5f0f](<https://www.luogu.org/problem/P2169>)\n\n## \u9898\u76ee\u63cf\u8ff0\uff1a\n\n\u5728Internet\u7f51\u7edc\u4e2d\u7684\u6bcf\u53f0\u7535\u8111\u5e76\u4e0d\u662f\u76f4\u63a5\u4e00\u5bf9\u4e00\u8fde\u901a\u7684\uff0c\u800c\u662f\u67d0\u4e9b\u7535\u8111\u4e4b\u95f4\u5b58\u5728\u5355\u5411\u7684\u7f51\u7edc\u8fde\u63a5\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b58\u5728A\u5230B\u7684\u8fde\u63a5\u4e0d\u4e00\u5b9a\u5b58\u5728B\u5230A\u7684\u8fde\u63a5\uff0c\u5e76\u4e14\u6709\u4e9b\u8fde\u63a5\u4f20\u8f93\u901f\u5ea6\u5f88\u5feb\uff0c\u6709\u4e9b\u5219\u5f88\u6162\uff0c\u6240\u4ee5\u4e0d\u540c\u8fde\u63a5\u4f20\u8f93\u6240\u82b1\u7684\u65f6\u95f4\u662f\u6709\u5927\u6709\u5c0f\u7684\u3002\u53e6\u5916\uff0c\u5982\u679c\u5b58\u5728A\u5230B\u7684\u8fde\u63a5\u7684\u540c\u65f6\u4e5f\u5b58\u5728B\u5230A\u7684\u8fde\u63a5\u7684\u8bdd\uff0c\u90a3\u4e48A\u548cB\u5b9e\u9645\u4e0a\u5904\u4e8e\u540c\u4e00\u5c40\u57df\u7f51\u5185\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u5730\u4f20\u8f93\uff0c\u8fd9\u6837\u82b1\u8d39\u7684\u4f20\u8f93\u65f6\u95f4\u4e3a0\u3002\n\n\u73b0\u5728\u5c0fZ\u544a\u8bc9\u4f60\u6574\u4e2a\u7f51\u7edc\u7684\u6784\u6210\u60c5\u51b5\uff0c\u4ed6\u5e0c\u671b\u77e5\u9053\u4ece\u4ed6\u7684\u7535\u8111\uff08\u7f16\u53f7\u4e3a1\uff09\uff0c\u5230\u5c0fX\u7684\u7535\u8111\uff08\u7f16\u53f7\u4e3an\uff09\u6240\u9700\u8981\u7684\u6700\u77ed\u4f20\u8f93\u65f6\u95f4\u3002\n\n\u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c$1\\leq n\\leq200000, 1\\leq m\\leq 1000000$\n\n## \u89e3\u9898\u601d\u8def\uff1a\n\nTarjan \u7f29\u70b9 + SPFA/DP \n\n\u9996\u5148\u89c2\u5bdf\u6570\u636e\u8303\u56f4\uff0c\u663e\u7136\u8fd9\u4e48\u5927\u7684 $n,m$ \uff0c\u76f4\u63a5\u8dd1 $O(nm)$ \u7684 SPFA \u4f1a\u70b8\u6389\u3002\n\n\u89c2\u5bdf\u9898\u9762\uff0c\u53d1\u73b0\u5982\u679c\u6709 x \u548c y \u6784\u6210\u4e00\u4e2a\u73af\uff08\u5904\u5728\u540c\u4e00\u4e2a SCC \u4e2d\uff09\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e4b\u95f4\u7684\u8fb9\u957f\u5ea6\u4e3a 0 \n\n\u8fd9\u542f\u53d1\u6211\u4eec\u53ef\u4ee5\u7528\u7f29\u70b9\u540e\u518d\u6765\u8dd1 SPFA \uff0c\u4f46\u662f\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f\u4e0d\u591f\u4e25\u8c28\u7684\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u4ecd\u65e7\u662f $O(nm)$ \u7684\uff0c\u53ea\u662f\u7531\u4e8e\u8fd9\u9898\u6c34\u6240\u4ee5\u53ef\u4ee5\u8fc7\u3002\n\n## \u4ee3\u7801\uff1a\n\nSPFA \u7248\u672c \n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <stack>\n#include <cstring>\n#include <queue>\nusing namespace std;\ninline int read() {\n\tchar v = getchar();int x = 0,f = 1;\n\twhile (!isdigit(v)) {if (v == '-')f = -1;v = getchar();}\n\twhile (isdigit(v)) {x = x * 10 + v - 48;v = getchar();}\n\treturn x * f;\n}\nconst int N = 10010;\nconst int M = 5000010;\n\nint to[M],hd[N],nxt[M],tot,edg[M];\ninline void add(int u,int v,int w) {to[++tot] = v;edg[tot] = w;nxt[tot] = hd[u];hd[u] = tot;}\n\ninline int min(int x,int y) {return x<y?x:y;}\ninline int max(int x,int y) {return x>y?x:y;}\n\nusing std::stack;\n\nint dfn[N],low[N],ins[N],cnt,num,c[N],n,m,p[N],f[N];\nstack <int> s;\n\nvoid tarjan(int x) {\n\tdfn[x] = low[x] = ++cnt;\n\ts.push(x);ins[x] = 1;\n\tfor (int i = hd[x];i;i = nxt[i]) {\n\t\tif (!dfn[to[i]]) {\n\t\t\ttarjan(to[i]);\n\t\t\tlow[x] = min(low[x],low[to[i]]);\n\t\t}\n\t\telse if (ins[to[i]]) {\n\t\t\tlow[x] = min(low[x],dfn[to[i]]);\n\t\t}\n\t}\n\tif (dfn[x] == low[x]) {\n\t\tc[x] = ++num;int y;\n\t\tdo {\n\t\t\ty = s.top(),s.pop();\n\t\t\tins[y] = 0;c[y] = num;\n\t\t}while (x != y);\n\t}\n}\n\nint vis[N],dis[N];\n\nvoid SPFA(int s) {\n\tmemset(dis,0x3f,sizeof(dis));\n\tqueue <int> q;\n\tvis[s] = 1;dis[s] = 0;\n\tq.push(s);\n\twhile (!q.empty()) {\n\t\tint x = q.front();q.pop();\n\t\tvis[x] = 0;\n\t\tfor (int i = hd[x];i;i = nxt[i]) {\n\t\t\tint y = to[i],w = edg[i];\n\t\t\tif (c[x] == c[y]) w = 0;\n\t\t\tif (dis[y] > dis[x] + w) {\n\t\t\t\tdis[y] = dis[x] + w;\n\t\t\t\tif (!vis[y]) {\n\t\t\t\t\tq.push(y);\n\t\t\t\t\tvis[y] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tn = read(),m = read();\n\tfor (int i = 1;i <= m;++i) {\n\t\tint x = read(),y = read(),w = read();add(x,y,w);\n\t}\n\tfor (int i = 1;i <= n;++i) if (!dfn[i]) tarjan(i);\n\tSPFA(1);\n\tprintf(\"%d\",dis[n]);\n\treturn 0;\n}\n\n```",
        "postTime": 1570806784,
        "uid": 105230,
        "name": "Retired_Doubeecat",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4e3a\u4ec0\u4e48\u5927\u4f6c\u4eec\u90fd\u7528\u7684SPFA\u554a\uff0c\u7528\u7f29\u70b9+\u62d3\u6251\u6392\u5e8f\u5c31\u80fd\u8fc7\u4e86\u3002\n\n\u5176\u5b9e\u6211\u5df2\u5f00\u59cb\u4e5f\u60f3\u7528SPFA\u7684\uff0c\u4f46\u662f\u5b83\u6b7b\u4e86\u3002\u4e8e\u662f\u5c31\u770b\u770b\u80fd\u4e0d\u80fd\u7528\u62d3\u6251\u6392\u5e8f\u3002\u663e\u7136\uff0c\u7f29\u5b8c\u70b9\u4e4b\u540e\u7684\u65b0\u56fe\u6ca1\u73af\uff0c\u4e5f\u5c31\u662f\u8bf4\u7406\u8bba\u4e0a\u662f\u80fd\u7528\u62d3\u6251\u6392\u5e8f\u7684\u3002\u7136\u800c\u4ece\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\u5f00\u59cb\u62d3\u6251\u6392\u5e8f\u4f1a\u6b7b\u7684\u5f88\u60e8\uff0c\u4e0d\u8fc7\u76f4\u63a5\u4ece\u8d77\u70b9\u62d3\u6251\u6392\u5e8f\u5c31\u80fd\u8fc7\u4e86\u3002\u56e0\u4e3a\u8fd9\u6837\u62d3\u6251\u6392\u5e8f\u7684\u8bdd\u6c42\u51fa\u6765\u7684\u662f\u5728\u8d77\u70b9\u80fd\u7ecf\u8fc7\u7684\u6240\u6709\u70b9\u7684\u96c6\u548c\u8fb9\u7684\u96c6\u7ec4\u5408\u7684\u56fe\u4e2d\u7684\u6700\u77ed\u8def\u957f\u5ea6\uff0c\u663e\u7136\u8fd9\u4e2a\u957f\u5ea6\u5c31\u662f\u539f\u56fe\u7684\u6700\u77ed\u8def\u957f\u5ea6\uff08\u56e0\u4e3a\u5176\u4ed6\u7684\u70b9\u548c\u8fb9\u5230\u90fd\u5230\u4e0d\u4e86\u80af\u5b9a\u4e0d\u4f1a\u662f\u6700\u77ed\u8def\u7684\u4e00\u90e8\u5206\uff09\n\n\u8d34\u4e0a\u6211\u5de8\u4e11\u7684\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<queue>\n\nusing namespace std;\n\nconst int N = 2e5+5;\n\ninline int read(){//\u8bfb\u5165\u6302 \n\tint ans=0, w = 1;\n\tchar ch = ' ';\n\twhile(ch<'0'||ch>'9'){\n\t\tw = ch=='-'?-1:w;\n\t\tch = getchar();\n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\tans = ans*10 + ch - 48;\n\t\tch =  getchar();\n\t}\n\treturn ans*w;\n}\n\nstruct E{\n\tint v,w;\n};\n//\u5404\u4f4d\u5927\u4f6c\uff0c\u849f\u84bb\u6211\u592a\u83dc\u4e86\uff0c\u4e0d\u4f1a\u90bb\u63a5\u8868 \nvector<E> edge[N];//\u539f\u56fe \nvector<E> edge1[N];//\u7f29\u70b9\u540e\u7684\u56fe \n\nint dfn[N],low[N],Stack[N],inStack[N],top;\nint dfstime,SCCcnt;\nint belong[N],dp[N],inDegree[N];\nint n,m;\n\nvoid tarjan(int u){//tarjan\u5f3a\u8054\u901a\u5206\u91cf \n\tdfn[u] = low[u] = ++ dfstime;\n\tStack[++top] = u;\n\tinStack[u] = 1;\n\tfor(register int i=0;i<edge[u].size();++i){\n\t\tint v = edge[u][i].v;\n\t\tif(!dfn[v]){\n\t\t\ttarjan(v);\n\t\t\tlow[u] = min(low[u],low[v]);\n\t\t}\n\t\telse if(inStack[v]){\n\t\t\tlow[u] = min(low[u],dfn[v]);\n\t\t}\n\t}\n\tif(dfn[u]==low[u]){\n\t\t++ SCCcnt;\n\t\tint v = -1;\n\t\twhile(u!=v){\n\t\t\tv = Stack[top--];\n\t\t\tinStack[v] = 0;\n\t\t\tbelong[v] = SCCcnt;\n\t\t}\n\t}\n}\n\nvoid init(){\n\tn = read();\n\tm = read();\n\tint u;\n\tfor(register int i=1;i<=m;++i){\n\t\tu = read();\n\t\tE e;\n\t\te.v = read();\n\t\te.w = read();\n\t\tedge[u].push_back(e);\n\t}\n\tfor(register int i=1;i<=n;++i){\n\t\tif(!dfn[i]) tarjan(i);\n\t}\n}\n\nvoid new_graph(){//\u7f29\u70b9\u3001\u5efa\u56fe \n\tfor(register int u=1;u<=n;++u){\n\t\tfor(register int i=0;i<edge[u].size();++i){\n\t\t\tint v = edge[u][i].v;\n\t\t\tint w = edge[u][i].w;\n\t\t\tif(belong[u]==belong[v]){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tE e;\n\t\t\te.v = belong[v];\n\t\t\te.w = w;\n\t\t\tedge1[belong[u]].push_back(e);\n\t\t\t++ inDegree[belong[v]];\n\t\t}\n\t}\n}\nvoid topo(){//\u62d3\u6251\u6392\u5e8f \n\tmemset(dp,0x7f,sizeof dp);\n\tqueue<int> q;\n\tint s = belong[1]; \n\tq.push(s);\n\tdp[s] = 0;\n\twhile(!q.empty()){\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor(register int i=0;i<edge1[u].size();++i){\n\t\t\tint v = edge1[u][i].v;\n\t\t\tint w = edge1[u][i].w;\n\t\t\t-- inDegree[v];\n\t\t\tif(!inDegree[v]) q.push(v);\n\t\t\tdp[v] = min(dp[v],dp[u]+w);\n\t\t}\n\t}\n}\n\nint main(){\n\tinit();\n\t\n\tnew_graph();\n\t\n\ttopo();\n\t\n\tprintf(\"%d\\n\",dp[belong[n]]);\n\treturn 0;\n}\n```",
        "postTime": 1550568151,
        "uid": 104679,
        "name": "lovewz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "###\u592a\u6fc0\u52a8\u4e86\uff0c\u95f4\u8c0d\u7f51\u7edc45\u5206\u5361\u4e86\u4e24\u4e2a\u5c0f\u65f6\uff0c\u8fd9\u9898\u7adf\u7136\u4e00\u904d\u8fc7\uff01\n\n#\u8bf4\u4e00\u4e0b\u601d\u8def\uff1a\u8fd9\u4e0d\u662f\u4e2a\u5e38\u89c4\u7684\u6700\u77ed\u8def\uff0c\u4f46\u4f60\u53ef\u4ee5\u62ff\u5230\u90e8\u5206\u5206\uff1a\u56e0\u4e3a\u5f00\u4e8c\u7ef4\u6570\u7ec4\u6570\u636e\u8303\u56f4\u4f1a\u70b8\n\n##\u6ce8\u610f\u4e00\u4e0b\u662f\u5355\u5411\u8fb9\uff0c\u4e14\u5982\u679cA\u4e0eB\u8fde\u901a\uff08\u662f\u4e0d\u662f\u4e2a\u8d70\u4e86\u8d70\u53c8\u56de\u6765\u4e86\uff1f\u73af\uff1f\u5f3a\u8fde\u901a\uff1f\uff09\uff0c\u90a3\u4e48\u82b1\u8d39\u4e3a0.\u600e\u4e48\u505a\uff1ftarjan\uff01\n\n##\u8f93\u5165\u4e0d\u7d2f\u8ff0\uff0c\u5efa\u8fb9\u7684\u65f6\u5019\u6ce8\u610f\uff0c\u56e0\u4e3a\u8dd1\u6700\u666e\u901a\u7684\u6700\u77ed\u8def\u6570\u7ec4\u4e0d\u884c\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u8981\u62d8\u6ce5\u4e8etarjan\u7b97\u6cd5\u5efa\u8fb9\u65f6\u4e24\u4e2a\u53d8\u91cf\uff0c\u52a0\u4e0a\u4e24\u70b9\u95f4\u7684\u6743\u503c\n\n###\u8dd1\u4e00\u904dtarjan\uff0c\u6c42\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\n\n##\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u82e5\u8be5\u8fb9\u4e24\u9876\u70b9\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u90a3\u4e48\u65f6\u95f4\u6e05\u96f6\uff08\u9898\u610f\uff0c\u76f4\u63a5\u8d4b\u503c\u5373\u53ef\uff09\n\n##\u6bcf\u4e00\u6761\u8fb9\u90fd\u66f4\u65b0\u597d\u4e86\uff0c\u8dd1\u4e00\u904dspfa\u6a21\u677f\uff0cAC\uff01\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define maxn 1000010\n#define INF 0x7fffffff\nusing namespace std;\nint head[maxn],team[maxn],exist[maxn],dis[maxn],stack[maxn],qr;\nint n,m,color[maxn],top,dfn[maxn],low[maxn],cnt,cnum,vis[maxn];\nstruct EDGE\n{\n    int from;\n    int next;\n    int to;\n    int co;\n}edge[maxn*3];\nvoid add(int from,int to,int co)\n{\n    edge[++qr].next=head[from];\n    edge[qr].from=from;//\u8fd9\u6761\u8fb9\u7684\u5f00\u59cb\u70b9 \n    edge[qr].to=to;\n    edge[qr].co=co;//\u4e24\u70b9\u4e4b\u95f4\u8017\u8d39\u7684\u65f6\u95f4 \n    head[from]=qr;\n}\nvoid tarjan(int x)//\u6a21\u677f \n{\n    dfn[x]=low[x]=++cnt;\n    vis[x]=1;stack[++top]=x;\n    for(int i=head[x];i;i=edge[i].next)\n     {\n         int v=edge[i].to;\n         if(!dfn[v])\n          {\n              tarjan(v);\n              low[x]=min(low[x],low[v]);\n          }\n         else if(vis[v]) low[x]=min(low[x],dfn[v]);\n     }\n    if(dfn[x]==low[x])\n     {\n         cnum++;\n         do\n         {\n             color[stack[top]]=cnum;\n             vis[stack[top]]=0;\n         }while(stack[top--]!=x);\n     }\n}\nvoid spfa()\n{\n    for(int i=1;i<=n;++i)\n     {\n         dis[i]=INF;\n         exist[i]=0;\n```\n}//\u4e2a\u4eba\u4e0d\u63a8\u8350memset\uff0c\u53ef\u80fd\u4f1a\u6709\u83ab\u540d\u5176\u5999\u7684\u7ed3\u679c\n```cpp\n    dis[1]=0;exist[1]=1;team[1]=1;\n    int h=0,t=1;\n    while(h<t)\n     {\n         h++;\n         int u=team[h];exist[u]=0;\n         for(int i=head[u];i;i=edge[i].next)\n          {\n              int v=edge[i].to;\n              if(dis[v]>dis[u]+edge[i].co)\n               {\n                   dis[v]=dis[u]+edge[i].co;\n                   if(!exist[v])\n                    {\n                        t++;\n                        team[t]=v;\n                        exist[v]=1;\n                    }\n               }\n          }\n     }\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin>>n>>m;\n    for(int i=1;i<=m;++i)\n     {\n         int a,b,c;\n         cin>>a>>b>>c;\n         add(a,b,c);\n     }\n    for(int i=1;i<=n;++i)\n     if(!dfn[i]) tarjan(i);//\u5176\u5b9e\u6211A\u4e86\u4e0d\u5c11\u9898\u73b0\u5728\u90fd\u4e0d\u7406\u89e3\uff0c\u5c31\u662f\u6a21\u677f\u7684\u4e00\u90e8\u5206\uff0c\u80cc\u8fc7\u5c31\u597d \n    for(int i=1;i<=qr;++i)\n     {\n         if(color[edge[i].from]==color[edge[i].to])\n          {\n              edge[i].co=0;//\u8fd9\u4e24\u4e2a\u70b9\u5f3a\u8fde\u901a\uff0c\u4e0d\u8017\u8d39\u65f6\u95f4 \n          }\n     }\n    spfa();//\u8fb9\u90fd\u66f4\u65b0\u597d\u4e86\uff0c\u653e\u5fc3\u8dd1\u6700\u77ed\u8def \n    printf(\"%d\",dis[n]);//1\u5230n\u6700\u5c11\u65f6\u95f4 \n    return 0;\n}\n```",
        "postTime": 1508058437,
        "uid": 49851,
        "name": "\u777f\u5c7f\u9752\u886b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "\u697c\u4e0b\u5404\u4f4d\u5927\u4f6c\u592a\u5f3a\u4e86\u3002\u9898\u76ee\u4e2d\u8bf4\u5982\u679c\u80fd\u76f8\u4e92\u5230\u8fbe\u82b1\u8d39\u5c31\u4e3a0.\u8fd9\u6837\u6211\u4eec\u6c42\u4e00\u904d\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u4e4b\u540e\u7f29\u70b9\u5c31\u597d\u4e86\u3002\u5b8c\u4e86\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\u5c31\u597d\u4e86\u3002\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u4f7f\u7528tarjarn\u7b97\u6cd5\uff08\u9700\u8981\u6d88\u9664\u81ea\u73af\uff09\u3002\u6700\u77ed\u8def\u7b97\u6cd5\u9700\u8981\u4f7f\u7528dijkstra\u7b97\u6cd5\u3002\u770b\u697c\u4e0b\u5404\u4f4d\u4ee3\u7801\u90a3\u4e48\u77ed\uff0c\u592a\u5389\u5bb3\u4e86\u3002\n```c\n#include<stdio.h>\n#include<string.h>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<algorithm>\n#include<iostream>\n#define MAXN 200005\n#define INF 0x3f3f3f3f\nusing namespace std;\n\nstruct Edge\n{\n    int from,to,dist;\n    Edge(int from=0,int to=0,int dist=0):from(from),to(to),dist(dist){};\n};\nvector<Edge> edges;\nvector<int> G[MAXN];\nvector<Edge> mmp;                //\u91cd\u65b0\u6784\u56fe\nvector<int> Map[MAXN];     //\u91cd\u65b0\u5efa\u56fe\nstack<int> S;\nint pre[MAXN],sccno[MAXN],lowlink[MAXN],in[MAXN];\nint d[MAXN];\nint dfs_clock,scc_cnt;\nint n,m;\n\nvoid dfs(int u)\n{\n    S.push(u);\n    pre[u]=lowlink[u]=++dfs_clock;\n    for(int i=0;i<G[u].size();i++)\n    {\n        Edge &e=edges[G[u][i]];\n        int v=e.to;\n        if(!pre[v])\n        {\n            dfs(v);\n            lowlink[u]=min(lowlink[u],lowlink[v]);\n        }\n        else if(!sccno[v])\n        {\n            lowlink[u]=min(lowlink[u],pre[v]);\n        }\n    }\n    if(pre[u]==lowlink[u])\n    {\n        ++scc_cnt;\n        for(;;)\n        {\n            int x=S.top();\n            S.pop();\n            sccno[x]=scc_cnt;\n            if(u==x)\n                break;\n        }\n    }\n}\n\nvoid Find_Scc(int n)\n{\n    scc_cnt=dfs_clock=0;\n    memset(sccno,0,sizeof(sccno));\n    memset(pre,0,sizeof(pre));\n    memset(in,0,sizeof(in));              //\u7528\u6765\u7edf\u8ba1\u7f29\u70b9\u540e\u7684\u5165\u5ea6\n    for(int i=1;i<=n;i++)\n    {\n        if(!pre[i])\n           dfs(i);\n    }\n    for(int i=0;i<edges.size();i++)\n    {\n        int xx=edges[i].from;\n        int yy=edges[i].to;\n        if(sccno[xx]!=sccno[yy])\n        {\n            mmp.push_back({sccno[xx],sccno[yy],edges[i].dist});\n            //printf(\"test:%d->%d %d\\n\",sccno[xx],sccno[yy],edges[i].dist);\n            int mm=mmp.size();\n            Map[sccno[xx]].push_back(mm-1);\n        }\n    }\n}\n\nstruct Heapnode\n{\n    int u,dis;\n    Heapnode(int u=0,int dis=0):u(u),dis(dis){};\n    bool operator < (const Heapnode &rah) const\n    {\n        return dis>rah.dis;\n    }\n};\n\nvoid dijkstra(int n)\n{\n    priority_queue<Heapnode> Q;\n    Q.push({sccno[1],0});\n    for(int i=1;i<=scc_cnt;i++)\n        d[i]=INF;\n    d[sccno[1]]=0;\n    while(!Q.empty())\n    {\n        Heapnode X=Q.top();\n        Q.pop();\n        for(int i=0;i<Map[X.u].size();i++)\n        {\n            Edge &e=mmp[Map[X.u][i]];\n            //printf(\"ok\\n\");\n            if(d[e.to]>e.dist+X.dis)\n            {\n                d[e.to]=e.dist+X.dis;\n                //printf(\"ok\\n\");\n                Q.push({e.to,d[e.to]});\n            }\n        }\n    }\n    printf(\"%d\\n\",d[sccno[n]]);\n    //for(int i=1;i<=n;i++)\n        //printf(\"%d \",sccno[i]);\n}\n\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    int u,v,w;\n    for(int i=0;i<m;i++)\n    {\n        scanf(\"%d %d %d\",&u,&v,&w);\n        if(u==v)\n            continue;\n        edges.push_back({u,v,w});\n        int mm=edges.size();\n        G[u].push_back(mm-1);\n    }\n    Find_Scc(n);\n    dijkstra(n);\n    return 0;\n}\n\n```\n",
        "postTime": 1570462325,
        "uid": 210155,
        "name": "abandentsky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "\u9898\u610f\u7b80\u4ecb\u660e\u4e86\uff0c\u5927\u6982\u5c31\u662f\uff1a\u7ed9\u4f60n\u4e2a\u8282\u70b9\uff0cm\u6761\u6709\u5411\u8fb9\uff0c\u53ef\u4e92\u76f8\u5230\u8fbe\u7684\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u8def\u5f84\u4e3a0\uff0c\u8ba9\u4f60\u6c42\u51fa1\u5230n\u7684\u6700\u77ed\u8def\u3002\n\n**\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u5982\u679cA\u548cB\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\uff0c\u5373A\u548cB\u5728\u540c\u4e00\u73af\u91cc\uff0c\u73af\u91cc\u7684\u6240\u6709\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u90fd\u4e3a0**\n\n\u6240\u6709\uff0c\u6211\u4eec\u53ef\u4ee5\u7528**tarjan**\u6765\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u6240\u5728\u7684\u73af\uff0c\u5c06\u6bcf\u4e2a\u73af\u89c6\u4e3a\u4e00\u4e2a\u8282\u70b9\u3002\u7136\u540e\u5237\u4e00\u8d9f**1\u6240\u5728\u7684\u8282\u70b9**\u5230**n\u6240\u5728\u7684\u8282\u70b9**\u7684\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n\u4e0d\u4f1atarjan\u7684\u770b\u7740\uff1a[tarjan\u8be6\u89e3](https://blog.csdn.net/qq_34374664/article/details/77488976)\n\n\u81f3\u4e8e**\u5237\u6700\u77ed\u8def**\uff0cSPFA\uff08~~**\u5bf9\uff0c\u4ed6\u6ca1\u6b7b**~~\uff09\n\n\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\n#define maxn 200005\n#define maxm 1000005\nusing namespace std;\nint n,m,tot,son[maxm],lnk[maxn],nxt[maxm],w[maxm],TOT,SON[maxm],LNK[maxn],NXT[maxm],W[maxm],num,cnt,top,st[maxn],dfn[maxn],low[maxn],id[maxn],dis[maxn],que[maxn];\nbool vis[maxn];\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')f=-f;ch=getchar();}\n    while(ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline void add(int x,int y,int z){son[++tot]=y,nxt[tot]=lnk[x],lnk[x]=tot,w[tot]=z;}\ninline void ADD(int x,int y,int z){SON[++TOT]=y,NXT[TOT]=LNK[x],LNK[x]=TOT,W[TOT]=z;}\ninline int min(int x,int y){return x<y?x:y;}\ninline void Tarjan(int x){\n    dfn[x]=low[x]=++num;\n    st[++top]=x;\n    for(int j=lnk[x];j;j=nxt[j]){\n        int y=son[j];\n        if(!dfn[y]){\n            Tarjan(y);\n            low[x]=min(low[x],low[y]);\n        }else\n        if(!id[y]) low[x]=min(low[x],dfn[y]);\n    }\n    if(dfn[x]==low[x]){\n        id[x]=++cnt;\n        while(st[top]!=x) id[st[top--]]=cnt;\n        top--;\n    }\n}\ninline void SPFA(){\n    int hed=0,til=1;\n    memset(dis,63,sizeof dis);\n    que[1]=id[1];\n    dis[id[1]]=0;\n    vis[id[1]]=1;\n    while(hed!=til){\n        vis[que[hed=(hed+1)%maxn]]=0;\n        int x=que[hed];\n        for(int j=LNK[x];j;j=NXT[j]){\n            int y=SON[j];\n            if(dis[y]<=dis[x]+W[j]) continue;\n            dis[y]=dis[x]+W[j];\n            if(!vis[y]){\n                vis[y]=1;\n                que[til=(til+1)%maxn]=y;\n                int nt=(hed+1)%maxn;\n                if(dis[que[nt]]>dis[que[til]]) swap(que[til],que[nt]);\n            }\n        }\n    }\n}\nint main(){\n    n=read(),m=read();\n    for(int i=1;i<=m;i++){\n        int x=read(),y=read(),z=read();\n        add(x,y,z);\n    }\n    for(int i=1;i<=n;i++) if(!id[i]) Tarjan(i);\n    for(int i=1;i<=n;i++)\n    for(int j=lnk[i];j;j=nxt[j])\n    if(id[i]!=id[son[j]]) ADD(id[i],id[son[j]],w[j]);\n    SPFA();\n    printf(\"%d\\n\",dis[id[n]]);\n    return 0;\n}\n```\n",
        "postTime": 1565312160,
        "uid": 108047,
        "name": "LlLlCc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "\u7b97\u6cd5\uff1a\u7f29\u70b9+\u5355\u6e90\u6700\u77ed\u8def\n\n\u9996\u5148\u5904\u5728\u540c\u4e00\u4e2a\u73af\u5185\u7684\u70b9\u4e4b\u95f4\u8ddd\u79bb\u4e3a0\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u8dd1\u4e00\u4e2a\u7f29\u70b9\uff0c\u628a\u5904\u4e8e\u540c\u4e00\u4e2a\u73af\u5185\u7684\u70b9\u53d8\u6210\u4e00\u4e2a\u70b9\n\n\u8fd9\u6837\u5c31\u662f\u4e00\u4e2aDAG\u4e0a\u6c42\u5355\u6e90\u6700\u77ed\u8def\u7684\u6a21\u677f\u4e86\n\n\u7b97\u6cd5\uff1atarjan+dijkstra\n\n```cpp\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cstdio>\n#define ll long long\nusing namespace std;\n\nll n,m,ans,d[200010],x[2000010],y[2000010],z[2000010];\nll ver[2000010],edge[2000010],Next[2000010],head[2000010],tot;\n//\u7f29\u70b9\u524d\u7684\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\nll _ver[2000010],_edge[2000010],_Next[2000010],_head[2000010],_tot;\n//\u7f29\u70b9\u540e\u7684\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\nll dfn[200010],low[200010],deep,v[200010],colour[200010],color;\nstack<ll> st;\npriority_queue<pair<ll,ll> > q;\n\ninline ll read(){//\u8bfb\u5165\u4f18\u5316\n\tll x=0,tmp=1;\n\tchar ch=getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-') tmp=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tx=(x<<3)+(x<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn tmp*x;\n}\n\ninline void addEdge(ll x,ll y,ll z){//\u7f29\u70b9\u524d\u7684\u56fe\u52a0\u8fb9\n\tver[++tot]=y;\n\tedge[tot]=z;\n\tNext[tot]=head[x];\n\thead[x]=tot;\n}\n\ninline void _addEdge(ll x,ll y,ll z){//\u7f29\u70b9\u540e\u7684\u56fe\u52a0\u8fb9\n\t_ver[++_tot]=y;\n\t_edge[_tot]=z;\n\t_Next[_tot]=_head[x];\n\t_head[x]=_tot;\n}\n\nvoid tarjan(ll x){//tarjan\u627e\u51fa\u54ea\u4e9b\u70b9\u5728\u540c\u4e00\u4e2a\u73af\u5185\n\tdfn[x]=low[x]=++deep;\n\tv[x]=1; st.push(x);\n\tfor(ll i=head[x]; i; i=Next[i]){\n\t\tll y=ver[i];\n\t\tif(!dfn[y]){\n\t\t\ttarjan(y);\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t}\n\t\telse{\n\t\t\tif(v[y]) low[x]=min(low[x],low[y]);\n\t\t}\n\t}\n\tif(dfn[x]==low[x]){\n\t\tcolour[x]=++color;\n\t\tv[x]=0;\n\t\twhile(st.top()!=x){\n\t\t\tcolour[st.top()]=color;\n\t\t\tv[st.top()]=0;\n\t\t\tst.pop();\n\t\t}\n\t\tst.pop();\n\t}\n}\n\ninline void rebuild(){//\u7f29\u70b9\u540e\u91cd\u65b0\u5efa\u56fe\n\tfor(ll i=1; i<=m; i++){\n\t\tif(colour[x[i]]!=colour[y[i]]) _addEdge(colour[x[i]],colour[y[i]],z[i]);\n\t}\n}\n\ninline void dijkstra(ll s){//\u5355\u6e90\u6700\u77ed\u8def\n\tmemset(d,0x3f,sizeof(d));\n\tmemset(v,0,sizeof(v));\n\td[s]=0; q.push(make_pair(0,s));\n\twhile(!q.empty()){\n\t\tll x=q.top().second; q.pop();\n\t\tif(v[x]) continue;\n\t\tv[x]=1;\n\t\tfor(ll i=_head[x]; i; i=_Next[i]){\n\t\t\tll y=_ver[i],z=_edge[i];\n\t\t\tif(d[y]>d[x]+z){\n\t\t\t\td[y]=d[x]+z;\n\t\t\t\tq.push(make_pair(-d[y],y));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tn=read(); m=read();\n\tfor(ll i=1; i<=m; i++){\n\t\tx[i]=read(); y[i]=read(); z[i]=read();\n\t\taddEdge(x[i],y[i],z[i]);\n\t}\n\tfor(ll i=1; i<=n; i++){\n\t\tif(!dfn[i]) tarjan(i);\n\t}\n\trebuild();\n\tdijkstra(colour[1]);\n\tcout<<d[colour[n]]<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1564639750,
        "uid": 27924,
        "name": "xukuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "\u4e24\u6b65\uff1a   \n1.tarjan\u6c42\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u7531\u9898\u610f\u5f3a\u8054\u901a\u5206\u91cf\u5185\u7684\u70b90\u8ddd\u79bb  \n2.\u7f29\u70b9\u540e\u6c42\u6700\u77ed\u8def  \n\u6ce8\u610f\u7ec6\u8282\uff0c\u4e0a\u4ee3\u7801  \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#define N 200010\n#define M 1000010\n#define inf 0x3f3f3f3f \nusing namespace std;\nint n,m,top,num,cnt,dfn[N],low[N],stack[N],tot,head[N],c[N],all[N],ans,tot2,ru[N],H[N],d[N];\nbool ins[N],vis[N];\nstruct Edge{\n\tint v,u,next,val;\n}edge[M],E[M];\ninline int read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();\n\t}while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();\n\t}return  x*f;\n}\ninline void add(int x,int y,int z){edge[++tot].v=y;edge[tot].next=head[x];head[x]=tot;edge[tot].u=x;edge[tot].val=z;}\ninline void add2(int x,int y,int z){E[++tot2].v=y;E[tot2].next=H[x];H[x]=tot2;ru[y]++;E[tot2].val=z;} \nvoid tarjan(int x){\n\tdfn[x]=low[x]=++num;\n\tstack[++top]=x;ins[x]=1;\n\tfor(int i=head[x];i;i=edge[i].next){\n\t\tint y=edge[i].v;\n\t\tif(!dfn[y]){\n\t\t\ttarjan(y);\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t}\n\t\telse if(ins[y]){\n\t\t\tlow[x]=min(low[x],dfn[y]);\n\t\t}\n\t}\n\tif(dfn[x]==low[x]){\n\t\tcnt++;int z;\n\t\tdo{\n\t\t\tz=stack[top--];\n\t\t\tc[z]=cnt;\n\t\t\tins[z]=0;all[cnt]++;\n\t\t}while(z!=x); \n\t}\n}\nvoid spfa(int x){\n\tqueue<int>q;\n\tfor(int i=1;i<=cnt;i++)d[i]=inf;\n\tq.push(x);vis[x]=1;d[x]=0;\n\twhile(q.size()){\n\t\tint u=q.front();q.pop();vis[u]=0;\n\t\tfor(int i=H[u];i;i=E[i].next){\n\t\t\tint y=E[i].v,z=E[i].val;\n\t\t\tif(d[y]>d[u]+z){\n\t\t\t\td[y]=d[u]+z;\n\t\t\t\tif(!vis[y])q.push(y),vis[y]=1;\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=read(),y=read(),z=read();\n\t\tadd(x,y,z);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(!dfn[i])tarjan(i);\n\tfor(int i=1;i<=tot;i++)\n\t{\n\t\tint u=edge[i].u,v=edge[i].v;\n\t\tif(c[u]!=c[v])\tadd2(c[u],c[v],edge[i].val);  //\u7f29\u70b9\n\t}\n\tspfa(c[1]);//\u6700\u77ed\u8def\n\tprintf(\"%d\\n\",d[c[n]]); \n\treturn 0;\n}\n\n```\n",
        "postTime": 1554028241,
        "uid": 88733,
        "name": "Zekrom",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "###     tarjna\u7f29\u70b9\uff08\u6a21\u677f\uff09 + spfa\u677f\u5b50\n       \n       \u5206\u6790\u9898\u610f\u6211\u4eec\u77e5\u9053 \n       1 \u8be5\u56fe\u4e3a\u6709\u5411\u56fe\n       2 \u5982\u679c\u5904\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u4e2d \u4ef7\u503c\u5373\u4e3a0 \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5b9e\u884c\u7f29\u70b9\n     \n       \u7f29\u70b9\u7684\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6761\u4ef6\u5c31\u662f   \u7f29\u70b9\u540e\u5f62\u6210\u4f1a\u4e00\u4e2a\u70b9 \u9700\u8981\u4fdd\u8bc1\u539f\u6765\u7684\u70b9\u662f\u6ca1\u6709\u7528\u7684\u4e86\n       \n      \u672c\u4eba\u7f29\u70b9\u7684\u4e60\u60ef(\u6bd4\u8f83\u6c34... ...  \u56e0\u4e3a\u670975ms... ...)\n      \n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#include<stack>\nusing namespace std;\nconst int maxn = 200005;\nconst int maxm = 1000005;\nint n,m,head[maxn],cnt,dfn[maxn],low[maxn],top,indexx,belong[maxn];\nint head2[maxn],top2,dis[maxn];\nbool instack[maxn],vis[maxn];\nstruct edge{\n\tint to,next,value,from ;\n}e[maxm],e2[maxm];\nstack< int > s;\nvoid add_edge(int u,int v,int w) {\n\te[++top].to = v;\n\te[top].from = u;\n\te[top].next = head[u] ;\n\te[top].value = w ;\n\thead[u] = top ;\n}\n\nvoid add_edge2(int u,int v,int w) {\n\te2[++top2].to = v;\n\te2[top2].next = head2[u] ;\n\te2[top2].from = u;\n\te2[top2].value = w;\n\thead2[u] = top2;\n}\n\nvoid tarjan(int u) {\n\tdfn[u] = low[u] = ++indexx ;\n\ts.push(u) ; instack[u] = 1;\n\tfor(int i = head[u]; i ;i = e[i].next) {\n\t\tif(!dfn[e[i].to]) {\n\t\t\ttarjan(e[i].to) ;\n\t\t\tlow[u] = min(low[u] , low[e[i].to]) ;\n\t\t}\n\t\telse\n\t\t  if(instack[e[i].to])\n\t\t     low[u] = min(low[u] , low[e[i].to]) ;\n\t}\n\tif(dfn[u] == low[u]) {\n\t\tcnt++;\n\t\twhile(s.top() != u) {\n\t\t\tint k = s.top() ; s.pop();\n\t\t\tinstack[k] = 0;\n\t\t\tbelong[k] = cnt;\n\t\t}\n\t\ts.pop() ;\n\t\tinstack[u] = 0;\n\t\tbelong[u] = cnt;\n\t}\n}\n\nvoid spfa(int s) {\n\tqueue< int >q;\n\tfor(int i = 1;i <= cnt ;++i) dis[i] = 1e9 ;\n\tvis[s] = 1;  dis[s] = 0;\n\tq.push(s) ;\n\twhile(!q.empty()) {\n\t\tint u = q.front() ; q.pop() ;\n\t\tfor(int i = head2[u]; i ;i = e2[i].next) \n\t\t  if(dis[e2[i].to] > dis[u] + e2[i].value) {\n\t\t  \tdis[e2[i].to] = dis[u] + e2[i].value ;\n\t\t  \tif(!vis[e2[i].to]) {\n\t\t  \t\tq.push(e2[i].to) ;\n\t\t  \t\tvis[e2[i].to] = 1;\n\t\t\t  }\n\t\t  }\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i = 1;i <= m ;++i) {\n\t\tint x,y,z; scanf(\"%d%d%d\",&x,&y,&z) ;\n\t\tadd_edge(x,y,z) ;\n\t}\n\tfor(int i = 1;i <= n ;++i) \n       if(!dfn[i]) tarjan(i) ;\n\tfor(int i = 1;i <= m ;++i) {\n\t\tif(belong[e[i].to] == belong[e[i].from]) continue ;\n\t\tadd_edge2(belong[e[i].from],belong[e[i].to],e[i].value) ;\n\t}\n\tspfa(belong[1]) ;\n\tprintf(\"%d\",dis[belong[n]]) ;\n\treturn 0;\n}\n```",
        "postTime": 1535106674,
        "uid": 88340,
        "name": "Tiffany_Tendering",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "\u6c42\u5f3a\u8054\u901a\u5206\u91cf+\u6700\u77ed\u8def\n\n\u5f3a\u8fde\u901a\u5206\u91cf\u7528tarjan\uff0c\u7528pre\u548clow\u4e24\u4e2a\u6570\u7ec4\u6807\u8bb0\u4efb\u610f\u4e00\u4e2a\u5728dfs\u4e2d\u7684\u70b9\uff08\u521d\u59cb\u503c\u8d4b\u4e3a\u8bbf\u95ee\u5230\u7684\u987a\u5e8f\uff09\uff0c\u5e76\u7528\u6808\u8bb0\u5f55\u8d70\u8fc7\u7684\u70b9\u3002pre\u5b58\u8be5\u70b9\u521d\u6b21\u8bbf\u95ee\u7684\u6570\u636e\uff0c\u800clow\u5219\u50a8\u5b58\u8be5\u70b9\u7684\u76f4\u63a5\u8054\u901a\u8282\u70b9\u7684\u6700\u5c0f\u7684\u5148\u5e8f\u7f16\u53f7\uff0c\u5373\u8be5\u70b9\u7684\u6240\u6709\u6709\u56de\u8fb9\uff08\u5373\u5355\u5411\u8fb9\u7684\u7ec8\u70b9\u7684pre\u5c0f\u4e8e\u8d77\u70b9\uff09\u7684\u76f4\u63a5\u8fde\u901a\u8282\u70b9\u7684\u56de\u8fb9\u7684\u7ec8\u70b9\u7684pre\u7684\u6700\u5c0f\u503c\u3002\n\n\u82e5low[x]==pre[x]\uff0c\u5219\u4ece\u6808\u9876\u5230\u8be5\u70b9\u7684\u70b9\u90fd\u662f\u8be5\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u8282\u70b9\u3002\u800c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5185\u7684\u70b9\u4e4b\u95f4\u4e92\u76f8\u94fe\u63a5\u7684\u70b9\u90fd\u53ef\u4ee50\u65f6\u95f4\u4f20\u8f93\uff0c\u4fbf\u5c06\u5176t\u6539\u53d8\u4e3a0\n\n\u7136\u540e\u5c31\u662fSPFA\u4e86\u3002\n\nso easy\n\n```cpp\n#include<stdio.h>\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include <algorithm>\n#include<queue>\n#include<stack>\nusing namespace std;\n\nconst int INF=0x7fffffff;\nstruct Edge{\n\tint f,to,ti;\n\tbool operator <(const Edge b)const{\n\t\treturn ti>b.ti;\n\t}\n};\nvector<Edge> g[200010];\nEdge E;\nint n,m;\nstack<int> st;\nint vi[1000010];\nint vt[1000010];\nint d[200010];\nint pa[200010];\nint pre[200010];\nint low[200010];\nint tikd=0;\nint sccnt[200010];\nint scc_cnt=0;\n\nvoid dfs(int u){\n\tpre[u]=low[u]=++tikd;\n\tst.push(u);\n\tfor(int i=0;i<g[u].size();i++){\n\t\tint v=g[u][i].to;\n\t\tif(pre[v]==0){\n\t\t\tdfs(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(sccnt[v]==0){\n\t\t\tlow[u]=min(low[u],pre[v]);\n\t\t}\n\t}\n\tif(low[u]==pre[u]){\n\t\tscc_cnt++;\n\t\tint l=0;\n\t\twhile(l!=u){\n\t\t\tl=st.top();\n\t\t\tsccnt[l]=scc_cnt;\n\t\t\tst.pop();\n\t\t}\n\t}\n}\n\nvoid dfsd(){\n\tqueue<int> q;\n\td[1]=0;\n\tvi[1]=1;\n\tq.push(1);\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvi[u]=0;\n\t\tfor(int i=0;i<g[u].size();i++){\n\t\t\tEdge e=g[u][i];\n\t\t\tif(sccnt[e.f]==sccnt[e.to]){\n\t\t\t\te.ti=0;\n\t\t\t}\n\t\t\tif(d[e.to]>d[u]+e.ti){\n\t\t\t\td[e.to]=d[u]+e.ti;\n\t\t\t\tif(vi[e.to]==0){\n\t\t\t\t\tvi[e.to]=1;\n\t\t\t\t\tq.push(e.to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++) d[i]=INF;\n\tfor(int i=1;i<=m;i++){\n\t\tint f;\n\t\tscanf(\"%d%d%d\",&E.f,&E.to,&E.ti);\n\t\tg[E.f].push_back(E);\n\t}\n\tdfs(1);\n\tdfsd();\n\tprintf(\"%d\",d[n]);\n\treturn 0;\n}\n```",
        "postTime": 1527403549,
        "uid": 71080,
        "name": "\u8363\u4e00\u9e23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "\u9898\u610f\u6982\u8ff0\uff1a\n\n\u7ed9\u5b9a\u4e00\u5f20n\u4e2a\u70b9m\u6761\u8fb9\u7684\u65e0\u8d1f\u6743\u6709\u5411\u56fe\n\n\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u6240\u6709\u70b9\u65e0\u9700\u82b1\u8d39\n\n\u6c421\u5230n\u7684\u6700\u77ed\u8def\n\n\u7b97\u6cd5\uff1a\u5f3a\u8fde\u901a\u5206\u91cf+\u6700\u77ed\u8def\n\n\u91c7\u7528tarjan+dijkstra+heap\n\n\u697c\u4e0b\u4f3c\u4e4e\u6709\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u4ee3\u7801tql\n\n\u849f\u84bb\u518d\u7ed9\u4e2a\u4ee3\u7801\n\n\u5dee\u4e0d\u591a\u662f\u6a21\u7248\u9898\uff0c\u53ea\u9700\u5728dij\u7684\u66f4\u65b0\u4e2d\u6dfb\u52a0\u4e00\u6761\u5224\u5b9a\uff1a\n\n\u82e5\u4e24\u70b9\u5904\u4e8e\u540c\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5f53\u4e2d\uff0c\u5219\u8fb9\u6743\u4e3a0\n\n```cpp\n#include<queue>\n#include<stack>\n#include<cstdio>\n#include<climits>  //duliu\u5e93\\\\\\\u53ef\u4ee5\u65e0\u9700\u81ea\u5df1\u5b9a\u4e49INT_MAX \n#include<algorithm>\nusing namespace std;\ntemplate<class T>inline void read(T &x); //\u8bfb\u5165\u4f18\u5316 \nconst int N=200001,M=1000001;\nint n,m,cnt,head[N],low[N],dfn[N],num[N],dis[N];\n//num[i]\u4ee3\u8868i\u53f7\u70b9\u6240\u5904\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u7f16\u53f7 \nbool f[N]; //\u540c\u65f6\u4f5c\u4e3atarjan\u7684instack\u548cdijkstra\u7684visit \nstack<int>s;\nstruct edge{int to,w,next;}e[M];\nstruct heap //\u5b9a\u4e49\u5806 \n{\n\tint id,dis;\n\tbool operator<(const heap &fantasy)const //\u91cd\u8f7d\u8fd0\u7b97\u7b26 \n\t{\n\t\treturn dis>fantasy.dis;\n\t}\n};\npriority_queue<heap>q;\ninline void add(int a,int b,int c) //\u5efa\u8fb9 \n{\n\te[++cnt].next=head[a];\n\thead[a]=cnt;\n\te[cnt].to=b;\n\te[cnt].w=c;\n}\nvoid tarjan(int p) //tarjan\u6a21\u7248\uff0c\u4e0d\u89e3\u91ca \n{\n\tlow[p]=dfn[p]=++cnt;\n\ts.push(p);f[p]=1;\n\tfor (int x,i=head[p];i;i=e[i].next)\n\t\tif (!dfn[x=e[i].to])\n\t\t\ttarjan(x),low[p]=min(low[x],low[p]);\n\t\telse\n\t\t\tif (f[x])low[p]=min(low[x],low[p]);\n\tif (dfn[p]!=low[p])return;\n\twhile (s.size())\n\t{\n\t\tint x=s.top();s.pop();\n\t\tnum[x]=p;f[x]=0;\n\t\tif (p==x)break;\n\t}\n}\nvoid dijkstra() //dij\u6a21\u7248\uff0c\u7a0d\u6709\u6539\u52a8 \n{\n\tfill(dis+2,dis+n+1,INT_MAX); //fill\u2026\u8ddfmemset\u5dee\u4e0d\u591a\uff0c\u53ea\u4e0d\u8fc7\u662f\u6309\u5730\u5740\u586b\u5145\uff0c\u597d\u7406\u89e3 \n\tfill(f+1,f+n+1,0);\n\tq.push((heap){1,0});\n\twhile (q.size())\n\t{\n\t\tint p=q.top().id;q.pop();\n\t\tif (f[p])continue;f[p]=1;\n\t\tfor (int i=head[p];i;i=e[i].next)\n\t\t{\n\t\t\tint k=e[i].to;\n\t\t\tif (num[k]==num[p])e[i].w=0; //\u5982\u679c\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u8fb9\u6743\u4e3a0 \n\t\t\tif (dis[p]+e[i].w<dis[k])\n\t\t\t\tdis[k]=dis[p]+e[i].w,\n\t\t\t\tq.push((heap){k,dis[k]});\n\t\t}\n\t}\n}\nint main()\n{\n\tread(n);read(m);\n\twhile (m--)\n\t{\n\t\tint a,b,c;\n\t\tread(a);read(b);read(c);\n\t\tadd(a,b,c);\n\t}\n\tcnt=0;\n\tfor (int i=1;i<=n;i++)\n\t\tif (!dfn[i])tarjan(i);\n\tdijkstra();\n\tprintf(\"%d\",dis[n]);\n\treturn 0;\n}\ntemplate<class T>inline void read(T &x)\n{\n\tx=0;char ch=getchar();int fh=1;\n\twhile (ch<48||ch>57)\n\t\tfh=ch=='-'?-1:fh,ch=getchar();\n\twhile (ch>47&&ch<58)\n\t\tx=(x<<3)+(x<<1)+ch-48,ch=getchar();\n\tx*=fh;\n}\n```",
        "postTime": 1521714141,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "### \u601d\u8def\n\u7531\u9898\u5f97,\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u4e92\u76f8\u4f20\u9012\u4fe1\u606f\u662f\u4e0d\u9700\u8981\u65f6\u95f4\u7684\n\n\u6240\u4ee5\u6211\u4eec\u6c42\u51fa\u56fe\u4e2d\u7684\u6240\u6709\u5f3a\u8fde\u901a\u5206\u91cf,\u7f29\u70b9\u5efa\u4e00\u4e2a\u65b0\u56fe,\u5728\u65b0\u56fe\u4e2d\u8dd1\u6700\u77ed\u8def\u7b97\u6cd5\u5373\u53ef\n\n\u697c\u4e0b\u9898\u89e3\u6700\u77ed\u8def\u7b97\u6cd5\u5747\u4f7f\u7528\u7684`SPFA`,\u5728\u6b64\u7ed9\u51fa`Dijkstra`\u7b97\u6cd5\n\n### `CODE`\n```\n/*Do not go gentle into that good night*/\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <ext/pb_ds/priority_queue.hpp>\n#define ll long long\nusing namespace std;\ntypedef pair<ll,int> pii;\nstruct edge{int v,nxt;ll w;};\nedge e[1000005],E[1000005];\nint n,idx,cnt,top,k,head[200005],dfn[200005],low[200005];\nint k1,head1[200005],bel[200005],st[200005];\nbool ins[200005],vis[200005];ll dis[200005];\ninline int Min(int x,int y){return x < y ? x : y;}\ninline void add_edge(int u,int v,ll w)\n{\n\te[++k].v = v,e[k].w = w;\n\te[k].nxt = head[u],head[u] = k;\n}\ninline void add_edge1(int u,int v,ll w)\n{\n\tE[++k1].v = v,E[k1].w = w;\n\tE[k1].nxt = head1[u],head1[u] = k1;\n}\nvoid tarjan(int u)\n{\n\tint v;dfn[u] = low[u] = ++idx,ins[st[++top] = u] = 1;\n\tfor(register int i(head[u]);i;i = e[i].nxt)\n\t{\n\t\tif(!dfn[v = e[i].v]) tarjan(v),low[u] = Min(low[u],low[v]);\n\t\telse if(ins[v] && dfn[v] < low[u]) low[u] = dfn[v];\n\t}\n\tif(dfn[u] == low[u])\n\t{\n\t\t++cnt;\n\t\tdo\n\t\t{\n\t\t\tbel[v = st[top]] = cnt;\n\t\t\tins[v] = 0;\n\t\t}while(st[top--] != u);\n\t}\n}\ninline void build()//\u7528\u5f3a\u8fde\u901a\u5206\u91cf\u5efa\u56fe,\u6ce8\u610f\u53d8\u91cf\u540d\u522b\u6253\u9519\u4e86....\n{\n\tfor(register int u(1);u <= n;u++)\n\t\tfor(register int i(head[u]);i;i = e[i].nxt)\n\t\t\tif(bel[u] != bel[e[i].v]) add_edge1(bel[u],bel[e[i].v],e[i].w);\n}\ninline ll dijkstra()\n{\n\tint u(bel[1]),v;//\u8d77\u70b9\u662f\u70b91\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf,\u7ec8\u70b9\u540c\u7406\n\tmemset(dis,0x3f3f3f3f,sizeof(dis));\n\t__gnu_pbds::priority_queue<pii,greater<pii> > q;\n\tdis[u] = 0;q.push(make_pair(0,u));\n\twhile(!q.empty())\n\t{\n\t\tu = q.top().second,q.pop();\n\t\tif(vis[u]) continue;vis[u] = 1;\n\t\tfor(register int i(head1[u]);i;i = E[i].nxt)\n\t\t\tif(dis[v = E[i].v] > dis[u] + E[i].w) \n\t\t\t\tdis[v] = dis[u] + E[i].w,q.push(make_pair(dis[v],v));\n\t}\n\treturn dis[bel[n]];\n}\nint main()\n{\n\tint m,u,v;ll ans,w;\n\tcin>>n>>m;\n\tfor(register int i(1);i <= m;i++)\n\t\tscanf(\"%d%d%lld\",&u,&v,&w),add_edge(u,v,w);\n\tfor(register int i(1);i <= n;i++)\n\t\tif(!dfn[i]) tarjan(i);\n\tif(bel[1] == bel[n]) ans = 0;//\u5c5e\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\n\telse build(),ans = dijkstra();\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n`PrimeMinister of GE All Rights Reserved`\n\n`Feb 24th`",
        "postTime": 1519462984,
        "uid": 26781,
        "name": "\u9996\u76f8\u5927\u5927",
        "ccfLevel": 0,
        "title": "Solution for P2169 \"\u6b63\u5219\u8868\u8fbe\u5f0f\""
    },
    {
        "content": "\u601d\u8def\uff1a\n\n\u8fd9\u9898\u7684\u8bdd\uff0c\u5176\u5b9e\u4e0d\u96be\uff0c\u7c7b\u4f3c\u4e8e\u6a21\u677f\u9898\uff0c\u6211\u7684\u601d\u8def\u662fTarjan+spfa\uff0c\u5728\u7528Tarjan\u7b97\u6cd5\u8ba1\u7b97\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u540e\u5c31\u7f29\u70b9\u5e76\u5efa\u7acb\u4e00\u5f20\u65b0\u7684\u56fe\uff0c\u4e4b\u540e\u6211\u4eec\u518d\u7528spfa\u7b97\u6cd5\u7b97\u51fa\u6700\u77ed\u8def\u5373\u53ef\uff0c\u4ee3\u7801\u4e2d\u90e8\u5206\u7ec6\u8282\u5df2\u7ecf\u6ce8\u91ca\n\n\n\u4ee5\u4e0b\u4e3a\u4ee3\u7801\n\n\n\n\n\n\n\n\n\n    \n\n    \n      \n\n    \n        \n\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<stack>\n#include<queue>\n#include<cstring>\n#define N 200009 \n#define M 1000009\nusing namespace std;\nint en,en1,n,m;                                  //en\u4e3a\u65e7\u56fe\uff0cen1\u4e3a\u65b0\u56fe \uff0c\u4e0b\u9762\u540c\u7406 \nint t,cnt,low[N],dfn[N],belong[N];\nbool instack[N];\nstack<int> sta;\nint dist[N];\nbool inque[N];\nstruct edge{\n    int e,d;\n    edge *next;\n}*v[N],ed[M],*v1[N],ed1[M];\nvoid add_edge(int s,int e,int d){\n    en++;\n    ed[en].next = v[s],v[s] = ed+en,v[s]->e =e ;\n    ed[en].d = d;\n}\nvoid add_edge1(int s,int e,int d){\n    en1++;\n    ed1[en1].next = v1[s],v1[s] = ed1+en1,v1[s]->e = e;\n    ed1[en1].d = d;\n}\nvoid dfs(int now){                        //Tarjan\u7b97\u6cd5\uff0c\u8ba1\u7b97\u5f3a\u8fde\u901a\u5206\u91cf \n    t++;\n    low[now] = dfn[now] = t;\n    instack[now] = true;\n    sta.push(now);\n    for(edge *e = v[now];e;e = e->next)\n      if(!dfn[e->e]){\n            dfs(e->e);\n            low[now] = min(low[now],low[e->e]);\n      }\n      else if(instack[e->e])low[now] = min(low[now],dfn[e->e]);\n    if(dfn[now] == low[now]){\n        cnt++;\n        while(sta.top() != now){\n            instack[sta.top()] = false;\n            belong[sta.top()] = cnt;\n            sta.pop();\n        }\n        sta.pop();\n        belong[now] = cnt;\n        instack[now] = false;\n    }\n}\nvoid tarjan(){\n    for(int a = 1; a <= n; a++)\n      if(!dfn[a])dfs(a);\n    for(int a = 1; a <= n; a++)                    //\u7f29\u70b9\u8fc7\u7a0b \n      for(edge *e = v[a];e;e =e->next)\n         if(belong[a] != belong[e->e])\n            add_edge1(belong[a],belong[e->e],e->d);\n}\nvoid spfa(int s){                              //spfa\u7b97\u6cd5\uff0c\u6c42\u5355\u6e90\u6700\u77ed\u8def \n    memset(dist,0x3f,sizeof(dist));\n    dist[s] = 0;\n    queue<int>que;\n    inque[s] = true;\n    que.push(s);\n    while(que.size()){\n        int now = que.front();\n        que.pop();\n        inque[now] = false;\n        for(edge *e = v1[now];e;e=e->next)\n          if(dist[e->e] > dist[now] + e->d){\n                  dist[e->e] = dist[now] +e->d;\n                  if(!inque[e->e]){\n                      que.push(e->e);\n                      inque[e->e] = true;\n                  }\n          }\n    }\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i = 1; i <= m; i++){\n        int x,y,w;\n        scanf(\"%d%d%d\",&x,&y,&w);\n        add_edge(x,y,w);\n    }\n    tarjan();\n    spfa(belong[1]);                             //\u65b0\u56fe\u4e2d\u8d77\u70b9\u4e3a\u65e7\u56fe\u4e2d1\u70b9\u6240\u5904\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7 \n    printf(\"%d\\n\",dist[belong[n]]);              //\u7b54\u6848\u4e3a\u65e7\u56fe\u4e2dn\u70b9\u6240\u5904\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7\u7684\u8ddd\u79bb\u5373\u4e3a\u6700\u77ed\u8def \n    return 0;\n}\n\n```",
        "postTime": 1504793765,
        "uid": 32526,
        "name": "\u9648\u65b0\u6708",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "\u6807\u51c6\u7684SCC  Tarjan +spfa \uff08\u6216\u5176\u4ed6\u6700\u77ed\u8def\u7b97\u6cd5\uff09\u6a21\u7248\n\n\u90bb\u63a5\u8868\u8fd8\u662f\u5f88\u597d\u7528\u7684\uff0c\u81f3\u5c11\u4e0d\u4f1a\u4e00\u5806\u53d8\u91cf\u770b\u5f97\u5934\u76ae\u53d1\u9ebb\n\n\u5165\u95e8\u540c\u5b66\uff08\u50cf\u6211\u8fd9\u6837\uff09\u8fd8\u662f\u63a8\u8350\u8fd9\u6837\u5199\u6bd4\u8f83\u65b9\u4fbf\n\n\u8be6\u60c5\u770b\u4ee3\u7801\n\n\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,j,n) for(int i=j;i<=n;i++)\n#define R register\nusing namespace std;\ninline int read(){ //\u8bfb\u5165\u4f18\u5316\n    int x; char ch; \n    while(ch=getchar() , ch>'9'||ch<'0') ; x=ch-'0';\n    while(ch=getchar() ,ch>='0'&&ch<='9') x=(x<<1)+(x<<3)+ch-'0';\n    return x;\n}\nconst int N=200010, M=1000010;\nstruct edge{\n    int next,to,w;    //\u6807\u51c6\u90bb\u63a5\u8868\n}e[M];\nint n,m,x,y,tot,cnt,stk[N],belong[N],tim,top,dfn[N],low[N],head[N];  //belong\u8868\u793a\u70b9\u6240\u5c5e\u7684scc\u7f16\u53f7\nbool instk[N];   //\u5224\u65ad\u662f\u5426\u5728\u6808\u4e2d\uff0c\u5176\u5b9e\u6709\u4e9b\u7d2f\u8d58\u3002\u3002\u3002\ninline void ins(int x, int y,int w) {\n    tot++; e[tot]=edge{head[x],y,w} ; head[x]=tot;\n}\ninline void Tarjan(int now) {\n    dfn[now]=low[now]=++tim;\n    stk[++top]=now; instk[now]=true;\n    for(int i=head[now];i;i=e[i].next) {\n        int v=e[i].to;\n        if(instk[v]) low[now]=min(low[now],dfn[v]) ;\n        else if(!dfn[v]) Tarjan(v), low[now]=min(low[now],low[v]);\n    }\n    if(dfn[now]==low[now]) {\n        cnt++; belong[now]=cnt;\n        for( ; stk[top]!=now; top--) {\n            instk[top]=false;\n            belong[stk[top]]=cnt;\n        }\n        instk[now]=false; top--;\n    }\n}\nqueue<int> q;\nint dis[N];     bool vis[N];\ninline void spfa(){\n    memset(dis,0x7f,sizeof(dis));   //\u522b\u5fd8\u521d\u59cb\u5316\n    memset(vis,0,sizeof(vis));\n    dis[1]=0; q.push(1) ; vis[1]=true;\n    while(!q.empty()) {\n        int x=q.front() ; q.pop() ; vis[x]=false;\n        for(int i=head[x];i;i=e[i].next) {   //\u90bb\u63a5\u8868\u904d\u5386\u8fb9\n            int v=e[i].to;\n            if(belong[v]==belong[x]) e[i].w=0;  // \u82e5\u5904\u5728\u540c\u4e00scc\u4e2d\uff0c\u90a3\u5176\u8fb9\u6743\u53ef\u76f4\u63a5\u89c6\u4e3a0\n            if(dis[v]>dis[x]+e[i].w) {\n                dis[v]=dis[x]+e[i].w;\n                if(!vis[v]) {\n                    vis[v]=true;\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\nint main(){\n    n=read(); m=read();\n    int u,v,w;\n    rep(i,1,m) u=read(), v=read(), w=read() , ins(u,v,w) ;\n    Tarjan(1);\n    spfa();\n    printf(\"%d\\n\",dis[n]) ;\n    return 0;\n}\n```",
        "postTime": 1504099485,
        "uid": 27276,
        "name": "\u738b\u5c06\u98de\u626cCliffly",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "\u9996\u5148\u7f29\u70b9\uff0c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u70b9\u662f\u4e0d\u9700\u8981\u82b1\u8d39\u65f6\u95f4\uff0c\u53ea\u9700\u8981\u7528\u4e0d\u5728\u540c\u4e00\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u70b9\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\u5c31\u662f\u6b63\u786e\u7684\u7b54\u6848\u4e86\u3002\n\n\u7528\u6765\u7ec3\u624b\u8fd8\u662f\u4e0d\u9519\u7684\n\n\u00b7\u00b7\u00b7\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <algorithm>\nusing namespace std;\nint h[1000001],fr[1000001],w[1000001],ne[1000001],to[1000001],en=0;\nint dfn[200001],low[200001],ins[200001],sta[200001],idx=0,top=0;\nint bel[200001],vcnt=0;\nint h2[1000001],w2[1000001],to2[1000001],ne2[1000001],en2=0;\nint inq[1000001],dis[1000001];\nqueue<int>q;\nint n,m; \ninline void add2(int a,int b,int c)\n{to2[en2]=b;ne2[en2]=h2[a];w2[en2]=c;h2[a]=en2++;}\ninline void add(int a,int b,int c)\n{fr[en]=a;to[en]=b;ne[en]=h[a];w[en]=c;h[a]=en++;}\ninline void dfs(int k)\n{\n    dfn[k]=low[k]=++idx;\n    ins[k]=1;sta[++top]=k;\n    for (int i=h[k];i>=0;i=ne[i])\n    {\n        if (!dfn[to[i]])\n        {\n            dfs(to[i]);\n            low[k]=min(low[k],low[to[i]]);\n        }\n        else if (ins[to[i]]) low[k]=min(low[k],dfn[to[i]]);\n    }\n    if (dfn[k]==low[k])\n    {\n        int x=-1;\n        vcnt++;\n        while (x!=k)\n        {\n            x=sta[top--];\n            bel[x]=vcnt;\n            ins[x]=0;\n        }\n    }\n    return ;\n}\ninline void SPFA()\n{\n    memset(dis,0x3f,sizeof dis);\n    int S=bel[1],T=bel[n];\n    dis[S]=0;inq[S]=1;\n    q.push(S);\n    while (!q.empty())\n    {\n        int x=q.front();q.pop();inq[x]=0;\n        for (int i=h2[x];i>=0;i=ne2[i])\n        {\n            if (dis[to2[i]]>dis[x]+w2[i])\n            {\n                dis[to2[i]]=dis[x]+w2[i];\n                if (!inq[to2[i]])\n                {\n                    inq[to2[i]]=1;\n                    q.push(to2[i]);\n                }\n            }\n        }\n    }\n    printf(\"%d\\n\",dis[T]);\n    return ;\n}\nint main()\n{\n    memset(h,-1,sizeof h);\n    memset(h2,-1,sizeof h2);\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=m;++i)\n    {\n        int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(a,b,c);\n    }\n    dfs(1);\n    for (int i=0;i<en;++i)\n    if (bel[fr[i]]!=bel[to[i]]) add2(bel[fr[i]],bel[to[i]],w[i]);\n    SPFA();\n    return 0;\n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1474991807,
        "uid": 23943,
        "name": "Orion_Rigel",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    },
    {
        "content": "-------------------------------\u660e\u660e\u8981\u7528\u7f29\u70b9+\u6700\u77ed\u8def\uff0c\u5f3a\u884c\u88ab\u8bc4\u4ef7\u666e\u53ca-\uff0cAC\u7684\u4eba\u8fd8\u8fd9\u4e48\u5c11-------------------------------------------------------\n\n\u6839\u636e\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u6709\u5411\u56feG\uff0c\u6c42\u51fa1\uff0cn\u4e4b\u95f4\u7684\u6700\u77ed\u8def\uff0c\u5bf9\u4e8e\u4e00\u5bf9\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u4e4b\u95f4\u7684\u6743\u503c\u53ef\u4ee5\u4e3a0\u3002\n\n\u5177\u4f53\u601d\u8def\uff1a\u901a\u8fc7Kosaraju\u7b97\u6cd5\uff08\u5176\u5b83\u5206\u89e3\u7b97\u6cd5\u4e5f\u53ef\u4ee5\u5427\uff0c\u611f\u89c9\u8fd9\u4e2ascc\u7b97\u6cd5\u6bd4\u8f83\u5bb9\u6613\u8bb0\uff0c\u4e24\u4e2adfs\uff09\u5c06\u56fe\u5f3a\u8054\u901a\u5206\u89e3\uff0c\u6bcf\u4e00\u4e2a\u70b9\u4f1a\u5f97\u5230\u4e00\u4e2a\u81ea\u5df1\u8054\u901a\u7f16\u53f7\uff08\u4e0d\u5c5e\u4e8e\u5f3a\u8054\u901a\u5757\u7684\u70b9\u6709\u552f\u4e00\u7684\u7f16\u53f7\uff0c\u540c\u4e00\u4e2a\u8054\u901a\u5757\u5185\u7684\u70b9\u7f16\u53f7\u76f8\u540c\uff09\uff0c\u7136\u540e\u5bf9\u56fe\u505a\u4e00\u904d\u6700\u77ed\u8def\uff0c\u5bf9\u4e8e\u8981\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u7684\u4e24\u4e2a\u70b9\uff0c\u5982\u679c\u662f\u540c\u4e00\u8054\u901a\u5757\u5185\u7684\uff0cd[v]=min{d[v],d[u]},\u5426\u5219d[v]=min{d[v],d[u]+edge\\_w}\u3002\n\n---------------------------------------------\u4e2a\u4eba\u5410\u69fd\u6d1b\u8c37\u6570\u636e--------\u7ba1\u7406\u5458\u5ba1\u5b8c\u53ef\u4ee5\u5220\u6389\u4e0b\u9762\u7684\u5410\u69fd--------------------------------------------\n\n\u5728\u6211\u5199\u5b8c100\u884c\u7684\u4ee3\u7801\u540e\uff0c\u7ffb\u6b64\u9898\u7684AC\u8bb0\u5f55\u65f6\uff0c\u53d1\u73b0\u6700\u65e9AC\u7684\u6d1b\u8c37er\uff08luoguer\uff1f\uff09\u7528\u4e86\u9519\u8bef\u7684\u7b97\u6cd5\u8fc7\u4e86\u8fd9\u9898\uff08\u4ed4\u7ec6\u4e00\u770b\u624d\u53d1\u73b0\u4ed6\u6709\u5173\u4e8e\u7f29\u73af\u7684\u64cd\u4f5c\uff1a\u8bb0\u5f55\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6\uff0c\u5982\u679c\u8fd9\u4e00\u70b9\u7684\u5165\u5ea6\u8d85\u8fc71\u5c31\u628a\u5b83\u5224\u4e3a\u5728\u73af\u4e2d\u5c06\u4e4b\u540e\u7684\u8fb9\u6743\u503c\u5168\u5f520\uff09\uff0c\u8001\u5b9e\u4eba\u81ea\u5df1YY\u4e86\u4e00\u4e2a\u6570\u636e\u5206\u5206\u949f\u5361\u6389\u4e86\u4ed6\u7684\u7b97\u6cd5\uff08\u624b\u52a8\u7ed9\u4ed6\u52a0\u4e86\u4e2a\u8def\u5f84\u8fd8\u539f\u53d1\u73b0\u5b8c\u5168\u9519\u8bef\uff01\uff01\uff01\uff09\u3002\u5df2\u7ecf\u4e0d\u662f\u7b2c\u4e00\u6b21\u9047\u5230\u975e\u5e38\u6c34\u7684\u6570\u636e\u4e86\uff0c\u6d1b\u8c37\u5bf9\u4e8e\u9898\u76eedata\u7684\u5ba1\u6838\u4e5f\u9700\u8981\u6ce8\u610f\u554a\u3002\uff08\u53ef\u80fd\u6bd4\u8f83\u9ebb\u70e6\uff0c\u8ba9\u6211\u8fc7\u8fc7\u5410\u69fd\u763e\u3002\u3002\u3002\uff09\n\n\u9644\u4e0a\u4e2a\u4ebaYY\u7684\u6570\u636e\u3002\n\n13 18\n1 2 11\n1 11 16\n\n1 12 3\n2 3 5\n3 4 9\n4 5 5\n4 7 2\n5 6 1\n6 4 3\n7 8 3\n8 2 2\n8 3 7\n4 9 1\n9 10 5\n10 13 3\n\n11 12 4\n\n12 13 17\n\n11 13 5\n\n-------------------------------------------\u871c\u6c41code\u5206\u5272\u7ebf---------\u5927\u62ec\u53f7\u4e0d\u6362\u884c\u515a\uff0c\u4e0d\u559c\u52ff\u9605----------------------------------------------------\n\n/\\*804ms /  29.58MB \u7528\u65f6\u6bd4\u8f83\u957f\uff0c\u53ef\u80fd\u662f\u8bc4\u6d4b\u673a\u72b6\u6001\u4e0d\u597d\uff0c\u6216\u8005spfa\u6162\uff1f\u5e94\u8be5\u662f\u63d0\u4ea4\u7684\u59ff\u52bf\u4e0d\u5bf9\u3002\u3002\u3002\u3002\\*/\n\n\n\n\n    \n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <cmath>\n#include <queue>\n#include <algorithm>\nusing namespace std;\nconst int maxn=200000+50;\nstruct edge{int to, w;};\nvector<edge>G[maxn];\nvector<edge>rG[maxn];\nvector<int>vs;\nqueue<int>que;\nint used[maxn],n,m,tot,cmp[maxn],d[maxn];\nvoid add_edge(int u,int v,int w){\n    edge e;\n    e.to=v;e.w=w;\n    G[u].push_back(e);\n    e.to=u;\n    rG[v].push_back(e);\n    return;\n}\nvoid init(){\n    int u,v,w;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&u,&v,&w);\n        add_edge(u,v,w);\n    }\n    return;\n}\nvoid dfs(int v){\n    used[v]=1;\n    for(int i=0;i<G[v].size();i++){\n        if(!used[G[v][i].to]) \n            dfs(G[v][i].to);\n    }\n    vs.push_back(v);\n    return;\n}\nvoid rdfs(int v,int k){\n    used[v]=1;\n    cmp[v]=k;\n    for(int i=0;i<rG[v].size();i++){\n        if(!used[rG[v][i].to]) \n            rdfs(rG[v][i].to,k);\n    }\n    return;\n}\nvoid scc(){\n    memset(used,0,sizeof(used));\n    vs.clear();\n    for(int v=1;v<=n;v++){\n        if(!used[v]) dfs(v);\n    }\n    memset(used,0,sizeof(used));\n    int k=0;\n    for(int i=vs.size()-1;i>=0;i--)\n        if(!used[vs[i]]) rdfs(vs[i],++k);\n    return;\n}\nvoid spfa(){\n    for(int i=1;i<=n;i++) used[i]=0,d[i]=87654321;\n    que.push(1);d[1]=0;used[1]=1;\n    while(!que.empty()){\n        int u=que.front();que.pop();\n        used[u]=0;\n        for(int i=0;i<G[u].size();i++){\n            int v=G[u][i].to,w=G[u][i].w;\n            if(cmp[u]==cmp[v]) w=0;\n            int temp=d[u]+w;\n            if(temp<d[v]){\n                d[v]=temp;\n                if(!used[v]){\n                    used[v]=1;\n                    que.push(v);\n                }\n            }\n        }\n    }\n    printf(\"%d\",d[n]);    \n    return;\n}\nvoid solve(){\n    scc();\n    spfa();\n    return;\n}\nint main(){\n    freopen(\"1.txt\",\"r\",stdin);\n    freopen(\"2.txt\",\"w\",stdout);\n    init();\n    solve();\n    return 0;\n}\n```",
        "postTime": 1469873313,
        "uid": 8874,
        "name": "Kwork",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2169 \u3010\u6b63\u5219\u8868\u8fbe\u5f0f\u3011"
    }
]