[
    {
        "content": "\u55ef\u5450\u2026\u2026\u6211\u53d1\u73b0\u672c\u849f\u505a\u8fd9\u79cd\u9898\u603b\u4f1a\u88ab\u5361\u2026\u2026\u5e76\u4e14\u603b\u662f\u88ab\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u4e1c\u897f\u5361\u6b7b\u2026\u2026\u5443\u4e0d\u662f\u7b97\u6cd5\uff0c\u662f\u6253\u4ee3\u7801\u65f6\u4e0d\u7ec6\u5fc3\uff0c\u5bfc\u81f4\u8c03\u8bd5\u4e86\u597d\u957f\u65f6\u95f4 ORZ\u3002\n\n\u90a3\u4e48\uff0cSplay \u7684\u57fa\u7840\u64cd\u4f5c[\u6233\u8fd9\u91cc](https://www.luogu.org/blog/pks-LOVING/more-senior-data-structure-te-bie-qian-di-qian-tan-splay)\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u533a\u95f4\u53cd\u8f6c\u8fd9\u79cd\u64cd\u4f5c\uff0c\u6211\u4eec\u7531\u4e8e\u539f\u6570\u5217\u7684\u987a\u5e8f\u5df2\u7ecf\u7ed9\u5b9a\uff0c\u6240\u4ee5\u4e0d\u80fd\u6309\u7167\u6743\u503c\u6392\u5e8f\uff0c\u6240\u4ee5\u9009\u62e9\u6309\u7167\u70b9\u7684\u7f16\u53f7\u5efa\u7acb\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u3002\n\n\u8bf6\uff0c\u6240\u4ee5\u554a\uff0c\u4e0d\u7528\u4e00\u4e2a\u4e2a `insert` \u7f16\u53f7\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8fdb\u884c\u4e00\u4e0b\u9012\u5f52\u5efa\u6811\u5373\u53ef\u2014\u2014\u5efa\u6811\u53ef\u4ee5\u4eff\u7167\u7ebf\u6bb5\u6811\u7684\u5efa\u6811 qwq\u3002\n\n\u90a3\u4e48\u5c31\u7c7b\u4f3c\u8fd9\u6837\uff1a\n```cpp\nstruct Splay_tree{\n\tint f,sub_size,cnt,value,tag;\n\tint son[2];\n}s[MAXN];\ninline void update(int x){\n\tif(x){\n\ts[x].sub_size=s[x].cnt;\n\tif(s[x].son[0])s[x].sub_size+=s[s[x].son[0]].sub_size;\n    if(s[x].son[1])s[x].sub_size+=s[s[x].son[1]].sub_size;\n\t}\n}\nint build_tree(int l, int r, int fa) {\n        if(l > r) { return 0; }\n        int mid = (l + r) >> 1;\n        int now = ++ wz;\n        s[now].f=fa;\n\t    s[now].son[0]=s[now].son[1]=0;\n\t\ts[now].cnt++;\n    \ts[now].value=original[mid];\n\t\ts[now].sub_size++;\n        s[now].son[0] = build_tree(l, mid - 1, now);\n        s[now].son[1] = build_tree(mid + 1, r, now);\n        update(now);\n        return now;\n}\n```\nemmmm \u7801\u98ce\u8fd8\u7b97\u662f\u4e2d\u89c4\u4e2d\u77e9\u5427\u3002\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u6709\u4e00\u68f5\u7f16\u53f7\u6811\u4e86(\u5e76\u4e14\u7531\u4e8e\u9012\u5f52\u5efa\u6811\uff0c\u4e00\u5f00\u59cb\u662f\u5e73\u8861\u7684)\uff0c\u6211\u4eec\u8981\u5bf9\u5b83\u8fdb\u884c\u533a\u95f4\u7ffb\u8f6c\u64cd\u4f5c\u3002\u90a3\u4e48\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u53cd\u8f6c\u533a\u95f4 $l\\sim r$ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5229\u7528 Splay \u7684\u6027\u8d28\uff0c\u5c06 $l-1$ \u7ffb\u8f6c\u81f3\u6839\u8282\u70b9\uff0c\u518d\u5c06 $r+1$ \u7ffb\u8f6c\u81f3\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\uff0c\u7c7b\u4f3c\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/18083.png)\n\nemmm \u672c\u849f\u84bb\u7528\u82f1\u6587\u4f5c\u56fe\u53ea\u662f\u56e0\u4e3a\u4f1a\u4f7f\u98ce\u683c\u66f4\u7b80\u7ea6 $qwq$\u3002\n\n\u4f46\u5728\u8fd9\u91cc\u8fd8\u662f\u9700\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5728 $1$ \u53f7\u8282\u70b9\u4e4b\u524d\u548c $n$ \u53f7\u8282\u70b9\u4e4b\u540e\u53c8\u52a0\u4e86\u4e24\u4e2a\u8282\u70b9\u5e76\u8d4b\u503c\u4e3a $\\rm -INF$ \u548c $\\rm INF$\uff0c\u4f5c\u4e3a\u865a\u70b9\uff0c\u65e2\u6ee1\u8db3\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\uff0c\u53c8\u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u7ffb\u8f6c $1\\sim n$ \u65f6\u4e0d\u4f1a GG\u3002\n\n\u90a3\u4e48\u5b9e\u9645\u4e0a\uff0c\u5728\u6211\u4eec\u628a\u5f53\u524d\u533a\u95f4\u786e\u5b9a\u4e0b\u6765\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u8981\u5f00\u59cb\u8fdb\u884c\u53cd\u8f6c\u64cd\u4f5c\u3002\u800c\u5bf9\u4e8e\u53cd\u8f6c\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u65ad\u66ff\u6362\u5b50\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u8fbe\u5230\u6b64\u76ee\u7684\u3002\n\n\u6bd4\u5982\u5bf9\u4e8e $1\\sim 5$ \u8fd9\u4e2a\u5e8f\u5217\uff0c\u6211\u4eec\u53cd\u8f6c $2\\sim 4$ \u8fd9\u4e2a\u533a\u95f4\uff0c\u8fc7\u7a0b\u5c31\u662f\u8fd9\u6837\uff1a\n\n\u9996\u5148\u5efa\u6811\uff0c\u5728\u8fd9\u91cc\u7528\u4e00\u4e2a\u53ef\u884c\u7684\u6811\u6765\u4e3e\u4e2a\u6817\u5b50\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/18097.png)\n\n\u90a3\u4e48\u5b9e\u9645\u4e0a\u6211\u4eec\u5982\u679c\u53cd\u8f6c $2\\sim 4$ \u90a3\u4e48\u6211\u4eec\u9700\u8981\u5148\u5c06 $1$ \u548c $5$ \u65cb\u8f6c\u4e0a\u53bb\uff0c\u7c7b\u4f3c\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/18102.png)\n\n\u90a3\u4e48\u5b9e\u9645\u4e0a\u6211\u4eec\u7ffb\u8f6c\u4e24\u4e2a\u5b50\u6811\u5c31\u76f8\u5f53\u4e8e\u53cd\u8f6c $2\\sim 4$ qwq\u3002\n\n\u4f46\u5728\u8fd9\u4e2a\u5730\u65b9\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6253\u4e2a\u6807\u8bb0\uff0c\u6807\u8bb0\u7684\u5b58\u5728\u5c31\u53ea\u5728\u4e8e\u8bb0\u5f55\u73b0\u5728\u5bf9\u4e8e\u5f53\u524d\u8282\u70b9\u5e94\u4e0d\u5e94\u8be5\u7ffb\u8f6c\u4e24\u4e2a\u5b50\u6811\u3002\n\n$\\color{gold}Talk$ $is$ $\\color{silver}{cheap}$ $,\\color{gold}show$ $you$ $the$ $\\color{silver}{code}$ :\n\n\n```cpp\ninline void pushdown(int x){\n    if(x&&s[x].tag){\n    \ts[s[x].son[1]].tag^=1;\n    \ts[s[x].son[0]].tag^=1;\n    \tswap(s[x].son[1],s[x].son[0]);\n    \ts[x].tag=0;\n    }\t\n}\ninline int find(int x){\n\tint now=root;\n\twhile(1)\n\t{\n\t    pushdown(now);\n\t\tif(x<=s[s[now].son[0]].sub_size){\n\t\t\tnow=s[now].son[0];\n\t\t}\t\n\t\telse  {\n\t\tx-=s[s[now].son[0] ].sub_size + 1;\n\t    if(!x)return now;\n\t    now=s[now].son[1];\n\t\t}\n\t}\n}\ninline void reverse(int x,int y){\n\tint l=x-1,r=y+1;\n\tl=find(l),r=find(r);\n\tsplay(l,0);\n\tsplay(r,l);\n\tint pos=s[root].son[1];\n\tpos=s[pos].son[0];\n\ts[pos].tag^=1;//\u6807\u8bb0\u6700\u521d\u6253\u5728\u64cd\u4f5c\u533a\u95f4\u7684\u6839\u8282\u70b9\u4e0a\n}\n```\n\u7136\u540e\u8fd8\u6709\u4e9b\u9700\u8981\u6ce8\u610f\u7684\uff0c\u6ce8\u91ca\u4e86 qwq\u3002\n\n\u8fd8\u6709\uff0c$copy$ \u522b\u4eba\u7684 $code$ \u53ef\u803b qnq\u3002\n\n```cpp\n#include<iostream>\nusing namespace std;\n#define MAXN 1000007\n#define INF 100000089\nstruct Splay_tree{\n\tint f,sub_size,cnt,value,tag;\n\tint son[2];\n}s[MAXN];\nint original[MAXN],root,wz;\ninline bool which(int x){\n\treturn x==s[s[x].f].son[1];\n}\ninline void update(int x){\n\tif(x){\n\ts[x].sub_size=s[x].cnt;\n\tif(s[x].son[0])s[x].sub_size+=s[s[x].son[0]].sub_size;\n    if(s[x].son[1])s[x].sub_size+=s[s[x].son[1]].sub_size;\n\t}\n}\ninline void pushdown(int x){\n    if(x&&s[x].tag){\n    \ts[s[x].son[1]].tag^=1;\n    \ts[s[x].son[0]].tag^=1;\n    \tswap(s[x].son[1],s[x].son[0]);\n    \ts[x].tag=0;\n    }\t\n}\ninline void rotate(int x){\n\tint fnow=s[x].f,ffnow=s[fnow].f;\n\tpushdown(x),pushdown(fnow);\n\tbool w=which(x);\n\ts[fnow].son[w]=s[x].son[w^1];\n\ts[s[fnow].son[w]].f=fnow;\n\ts[fnow].f=x;\n\ts[x].f=ffnow;\n\ts[x].son[w^1]=fnow;\n\tif(ffnow){\n\t\ts[ffnow].son[s[ffnow].son[1]==fnow]=x;\n\t}\n\tupdate(fnow);\n}\ninline void splay(int x,int goal){\n\tfor(int qwq;(qwq=s[x].f)!=goal;rotate(x)){\n\t\tif(s[qwq].f!=goal){//\u8fd9\u4e2a\u5730\u65b9\u7279\u522b\u91cd\u8981\uff0c\u539f\u56e0\u662f\u9700\u8981\u5224\u65ad\u7684\u662f\u5f53\u524d\u7684\u7236\u4eb2\u6709\u6ca1\u6709\u5230\u76ee\u6807\u8282\u70b9\uff0c\u800c\u5982\u679c\u628a\u201cqwq\u201d\u6539\u6210\u201cx\u201d\u2026\u2026\u5c31\u4f1a\u70b8 \n\t\t\trotate(which(x)==which(qwq)?qwq:x);\n\t\t}\n\t}\n\tif(goal==0){\n\t\troot=x;\n\t}\n}\n\nint build_tree(int l, int r, int fa) {\n        if(l > r) { return 0; }\n        int mid = (l + r) >> 1;\n        int now = ++ wz;\n        s[now].f=fa;\n\t    s[now].son[0]=s[now].son[1]=0;\n\t\ts[now].cnt++;\n    \ts[now].value=original[mid];\n\t\ts[now].sub_size++;\n        s[now].son[0] = build_tree(l, mid - 1, now);\n        s[now].son[1] = build_tree(mid + 1, r, now);\n        update(now);\n        return now;\n}\ninline int find(int x){\n\tint now=root;\n\twhile(1)\n\t{\n\t    pushdown(now);\n\t\tif(x<=s[s[now].son[0]].sub_size){\n\t\t\tnow=s[now].son[0];\n\t\t}\t\n\t\telse  {\n\t\tx-=s[s[now].son[0] ].sub_size + 1;\n\t    if(!x)return now;\n\t    now=s[now].son[1];\n\t\t}\n\t}\n}\ninline void reverse(int x,int y){\n\tint l=x-1,r=y+1;\n\tl=find(l),r=find(r);\n\tsplay(l,0);\n\tsplay(r,l);\n\tint pos=s[root].son[1];\n\tpos=s[pos].son[0];\n\ts[pos].tag^=1;\n}\ninline void dfs(int now){\n\tpushdown(now);\n\tif(s[now].son[0])dfs(s[now].son[0]);\n\tif(s[now].value!=-INF&&s[now].value!=INF){\n\t\tcout<<s[now].value<<\" \";\n\t}\n\tif(s[now].son[1])dfs(s[now].son[1]);\n}\nint main(){\n\tint n,m,x,y;\n\tcin>>n>>m;\n\toriginal[1]=-INF,original[n+2]=INF;\n\tfor(int i=1;i<=n;i++){\n\t\toriginal[i+1]=i;\n\t}\n\troot=build_tree(1,n+2,0);//\u6709\u4e00\u4e2a\u826f\u597d\u7684\u5b9a\u4e49\u53d8\u91cf\u4e60\u60ef\u5f88\u91cd\u8981\u2026\u2026\u91cd\u590d\u5b9a\u4e49\u540c\u4e00\u4e2a\u53d8\u91cf\uff08\u6bd4\u5982\u5168\u5c40\u7684\u548c\u5c40\u90e8\u7684\u540c\u540d\uff09\u90a3\u4e48\u5c31\u4f1a\u53d1\u751f\u8986\u76d6\u3002 \n\tfor(int i=1;i<=m;i++){\n\t\tcin>>x>>y;\n\t\treverse(x+1,y+1);\n\t}\n\tdfs(root);\n}\n```",
        "postTime": 1524714950,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "Splay\u5904\u7406\u533a\u95f4\u64cd\u4f5c\u2014\u2014\u7ffb\u8f6c\u64cd\u4f5c(Reverse)"
    },
    {
        "content": "\u8bf6\uff0c\u505a\u4e86\u9898\u8fd8\u662f\u5199\u4e00\u4efd\u9898\u89e3\u5427\u3002\u3002\u3002\u3002\n\n\u8fd9\u91cc\u7684Splay\u7ef4\u62a4\u7684\u663e\u7136\u4e0d\u518d\u662f\u6743\u503c\u6392\u5e8f\n\n\u73b0\u5728\u6309\u7167\u7684\u662f\u5e8f\u5217\u4e2d\u7684\u7f16\u53f7\u6392\u5e8f\uff08\u4e0d\u8fc7\u5728\u8fd9\u9053\u9898\u76ee\u91cc\u9762\u5c31\u662f\u6743\u503c\u8bf6\u3002\u3002\u3002\uff09\n\n\u90a3\u4e48\uff0c\u7ee7\u7eed\u8003\u8651\uff0c\u5176\u5b9e\u6700\u7ec8\u7684\u7ed3\u679c\u4e5f\u5c31\u662f\u6574\u9897Splay\u7684\u4e2d\u5e8f\u904d\u5386\uff08\u5e73\u8861\u6811\u7684\u6027\u8d28\u8bf6\uff09\n\n\u90a3\u4e48\uff0c\u73b0\u5728\u5982\u679c\u6309\u7167\u6743\u503c\u6765\u7ef4\u62a4\u663e\u7136\u662f\u4e0d\u6b63\u786e\u7684\n\n\u7ee7\u7eed\u627e\u627e\u89c4\u5f8b\uff0c\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u4e3a\u7b2cK\u4e2a\n\n\u90a3\u4e48\uff0c\u4ed6\u5c31\u662f\u5e73\u8861\u6811\u7684\u7b2cK\u5927\uff08\u5c31\u5f53\u505a\u666e\u901a\u7684Splay\u6765\u770b\u7684\u8bdd\uff09\n\n\u6240\u4ee5\uff0c\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u5c31\u53d8\u6210\u4e86\u533a\u95f4\u7684\u7b2cK\u5927\u70b9\n\n\u7ee7\u7eed\u8003\u8651\u5982\u4f55\u7ffb\u8f6c\n\n\u7ffb\u8f6c\u4e5f\u5c31\u662f\u6574\u9897\u5b50\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u4ea4\u6362\n\n\u56e0\u6b64\uff0c\u53ea\u8981\u5728\u6839\u8282\u70b9\u7684\u5730\u65b9\u6253\u4e00\u4e2a\u6807\u8bb0\n\n\u5728\u65cb\u8f6c\u4e4b\u524d\u4e0b\u65b9\u4e00\u4e0b\u6807\u8bb0\u5c31\u884c\u4e86\n\n\u6700\u540e\u8f93\u51fa\u7684\u65f6\u5019\u8f93\u51fa\u7684\u5c31\u662fSplay\u7684\u4e2d\u5e8f\u904d\u5386\n\n\u81f3\u4e8e\u521d\u59cb\u7684Splay\u600e\u4e48\u5efa\u7acb\uff0c\u53ef\u4ee5\u76f4\u63a5\u6784\u9020\u5b8c\u7f8e\u7684Splay\n\n\u50cf\u6211\u8fd9\u79cd\u6bd4\u8f83\u61d2\u5f97\uff0c\u76f4\u63a5\u5f04\u4e86\u4e00\u4e2ainsert\u3002\u3002\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n#define MAX 200000\ninline int read()\n{\n    int x=0,t=1;char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-')t=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-48,ch=getchar();\n    return x*t;\n}\nstruct Node\n{\n    int ch[2];\n    int ff,v;\n    int size;\n    int mark;\n    void init(int x,int fa)\n        {\n            ff=ch[0]=ch[1]=0;\n            size=1;v=x;ff=fa;\n        }\n}t[MAX];\nint N,root,M,tot;\ninline void pushup(int x)\n{\n    t[x].size=t[t[x].ch[0]].size+t[t[x].ch[1]].size+1;\n}\ninline void pushdown(int x)\n{\n    if(t[x].mark)\n    {\n        t[t[x].ch[0]].mark^=1;\n        t[t[x].ch[1]].mark^=1;\n        t[x].mark=0;\n        swap(t[x].ch[0],t[x].ch[1]);\n    }\n}\ninline void rotate(int x)\n{\n    int y=t[x].ff;\n    int z=t[y].ff;\n    int k=t[y].ch[1]==x;\n    t[z].ch[t[z].ch[1]==y]=x;\n    t[x].ff=z;\n    t[y].ch[k]=t[x].ch[k^1];\n    t[t[x].ch[k^1]].ff=y;\n    t[x].ch[k^1]=y;\n    t[y].ff=x;\n    pushup(y);pushup(x);\n}\ninline void Splay(int x,int goal)\n{\n    while(t[x].ff!=goal)\n    {\n        int y=t[x].ff;int z=t[y].ff;\n        if(z!=goal)\n            (t[z].ch[1]==y)^(t[y].ch[1]==x)?rotate(x):rotate(y);\n        rotate(x);\n    }\n    if(goal==0)root=x;\n}\ninline void insert(int x)\n{\n    int u=root,ff=0;\n    while(u)ff=u,u=t[u].ch[x>t[u].v];\n    u=++tot;\n    if(ff)t[ff].ch[x>t[ff].v]=u;\n    t[u].init(x,ff);\n    Splay(u,0);\n}\ninline int Kth(int k)\n{\n    int u=root;\n    while(233)\n    {\n        pushdown(u);\n        if(t[t[u].ch[0]].size>=k)u=t[u].ch[0];\n        else if(t[t[u].ch[0]].size+1==k)return u;\n        else k-=t[t[u].ch[0]].size+1,u=t[u].ch[1];\n    }\n}\nvoid write(int u)\n{\n    pushdown(u);\n    if(t[u].ch[0])write(t[u].ch[0]);\n    if(t[u].v>1&&t[u].v<N+2)printf(\"%d \",t[u].v-1);\n    if(t[u].ch[1])write(t[u].ch[1]);\n}\ninline void Work(int l,int r)\n{\n    l=Kth(l);\n    r=Kth(r+2);\n    Splay(l,0);\n    Splay(r,l);\n    t[t[t[root].ch[1]].ch[0]].mark^=1;\n}\nint main()\n{\n    N=read();M=read();\n    for(int i=1;i<=N+2;++i)insert(i);\n    while(M--)\n    {\n        int l=read(),r=read();\n        Work(l,r);\n    }\n    write(root);\n    printf(\"\\n\");\n    return 0;\n}\n\n```",
        "postTime": 1505318672,
        "uid": 21283,
        "name": "yybyyb",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "# $\\texttt{FHQ-Treap yyds}$\n\n### \u524d\u8a00\n\n\u8fd9\u9898\u641e\u5f97\u6211\u5410\u4e86![/px](https://cdn.luogu.com.cn/upload/pic/62246.png)\n\n\u4e0d\u8fc7\u7b2c\u4e00\u6b21\u5199\u6a21\u677f\u9898\u9898\u89e3\u8fd8\u662f\u5f88\u5f00\u5fc3\u7684\u5440![/cy](https://cdn.luogu.com.cn/upload/pic/62225.png)\n\n\u611f\u89c9\u8fd9\u9053\u9898\u9898\u89e3\u8d28\u91cf\u90fd\u4e0d\u9ad8\u554a\u2026\u2026\n\n\u8fd9\u91cc\u4e5f\u4f1a\u8bb2\u6e05\u695a\u6b64\u9898\u9898\u89e3\u5e76\u6ca1\u6709\u63d0\u53ca\u7684\u4e00\u4e9b\u91cd\u8981\u95ee\u9898\u3002\n\n\u770b\u61c2\u672c\u7bc7\u9898\u89e3\uff0c\u4f60\u9700\u8981\u4e86\u89e3 $\\texttt{FHQ-Treap}$ \u7684\u524d\u7f6e\u829d\u58eb\u3002\n\n\u9898\u76ee\u8fde\u63a5\uff1a[$\\text{Link}$](https://www.luogu.com.cn/problem/P3391)\n\n### \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u5e8f\u5217\uff0c\u7b2c $i$ \u9879\u521d\u59cb\u4e3a $i$\u3002\n\n\u652f\u6301\u533a\u95f4\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u5373\u7ffb\u8f6c\u533a\u95f4 $[l,r]$\u3002\n\n\u8f93\u51fa $m$ \u6b21\u7ffb\u8f6c\u64cd\u4f5c\u540e\u7684\u5e8f\u5217\u3002\n\n$1\\le n,m\\le 10^5$\u3002\n\n### \u9898\u76ee\u89e3\u6790\n\n\u8fd9\u9053\u9898\u6211\u662f\u7528\u7684 $\\texttt{FHQ-Treap}$\uff0c\u6bd5\u7adf\u5f88\u597d\u5199\u3002\n\n\u65e2\u7136\u90fd\u7528 $\\texttt{FHQ-Treap}$\uff0c\u90a3\u4e48\u5927\u6982\u7387\u4f1a\u6709\u7684\u4e00\u4e2a\u60f3\u6cd5\u5c31\u662f\uff1a\u628a $[l,r]$ \u8fd9\u6bb5\u533a\u95f4\u5728\u8fd9\u68f5\u5e73\u8861\u6811\u4e0a\u88c2\u51fa\u6765\uff0c\u7136\u540e\u518d\u641e\u3002\n\n\u5148\u522b\u7740\u6025\u600e\u4e48\u88c2\uff0c\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u88c2\u51fa\u6765\u8fd9\u68f5\u6811\u4e86\uff0c\u90a3\u4e48\uff0c\u8fd9\u68f5\u6811\u91cc\u6bcf\u4e2a\u5b50\u8282\u70b9\u7684\u6743\u503c $v$ \u80af\u5b9a\u6709 $l\\le v\\le r$\u3002\n\n\u5047\u8bbe\u6211\u4eec\u5206\u88c2\u51fa\u5982\u4e0b\u7684\u4e00\u68f5\u6839\u8282\u70b9\u4e3a $u$ \u7684\u4e00\u68f5\u6811\uff08\u56fe\u4e2d\u5b57\u6bcd\u4e3a\u7f16\u53f7\uff09\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/1jndp39v.png)\n\n\u5982\u679c\u4e0d\u8003\u8651\u7ffb\u8f6c\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u68f5\u6811\u662f\u8981\u6309\u7167**\u4e2d\u5e8f\u904d\u5386**\u6765\u8f93\u51fa\uff0c\u5373 $\\texttt{c-a-d-u-b}$\n\n\u4f46\u5982\u679c\u7ffb\u8f6c\u4e86\u5462\uff1f\u5c31\u628a\u4e2d\u5e8f\u904d\u5386\u7ed9\u7ffb\u8fc7\u6765\uff0c\u4e5f\u5c31\u662f $\\texttt{b-u-d-a-c}$\u3002\n\n\u8003\u8651\u6211\u4eec\u5230\u5e95\u809d\u4e86\u4e2a\u4ec0\u4e48\u4e8b\u3002\n\n\u53d1\u73b0\uff0c\u5176\u5b9e\u5c31\u662f\u628a\u8fd9\u68f5\u6811\u91cc\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u4e24\u4e2a\u5de6\u53f3\u5b69\u5b50\u8c03\u6362\u540e\uff0c\u5f97\u5230\u7684\u65b0\u6811\u518d\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u8fd9\u68f5\u6811\u5c31\u53d8\u6210\u4e86\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/z7b670bt.png)\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u4e00\u4e2a\u521d\u6b65\u7684\u601d\u8def\u5c31\u662f\uff1a\u5206\u88c2\u51fa\u5bf9\u5e94\u7684\u6811\u540e\uff0c\u4ece\u6839\u5f00\u59cb\uff0c\u6bcf\u4e00\u5c42\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u5c06\u4e24\u4e2a\u513f\u5b50\u8c03\u6362\u3002\n\n\u4f46\u662f\u8003\u8651\u6211\u4eec\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff0c\u6211\u4eec\u8981\u8fdb\u884c\u5206\u88c2\u51fa\u6765\u7684\u6811\u7684\u8282\u70b9\u7684\u4e2a\u6570\u6b21\u8c03\u6362\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u5c31\u662f $\\mathcal{O}(r-l+1)$\uff0c\u6700\u574f\u60c5\u51b5 $\\mathcal{O}(n)$\uff0c\u8ddf\u6734\u7d20\u66b4\u529b\u4e00\u4e2a\u5fb7\u884c\uff0c\u76f4\u63a5\u4e0a\u5929\u3002\n\n\u8003\u8651\u4f18\u5316\uff0c\u5f15\u5165\u7ebf\u6bb5\u6811\u90a3\u91cc\u7684\u61d2\u6807\u8bb0\u7684\u601d\u60f3\u3002\n\n\u8fd8\u4ee5\u8fd9\u68f5\u6811\u4e3a\u4f8b\uff0c\u524d\u63d0\u8fd9\u68f5\u6811\u662f\u5206\u88c2\u597d\u7684\u4e86\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/1jndp39v.png)\n\n\u73b0\u5728\u60f3\u5bf9\u8fd9\u68f5\u6811\u8fdb\u884c\u7ffb\u8f6c\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u4e0d\u7ffb\u8f6c\uff0c\u800c\u662f\u8bb0\u4e0a\u8981\u7ffb\u8f6c\u7684\u540d\u4e49\uff0c\u90a3\u4e48\u5728\u54ea\u8bb0\uff1f\u5f53\u7136\u662f\u8fd9\u68f5\u6811\u7684\u6839\u8282\u70b9\u4e5f\u5c31\u662f $u$ \u4e86\u3002\u8fd9\u91cc\u7684\u6807\u8bb0\u662f\u9700\u8981\u5c06\u539f\u6709\u7684\u61d2\u6807\u8bb0**\u53d6\u53cd**\u7684\uff0c\u56e0\u4e3a\u5047\u8bbe\u8fd9\u540c\u4e00\u4e2a\u533a\u95f4\u7ffb\u8f6c\u4e86\u4e24\u6b21\uff0c\u5c31\u76f8\u5f53\u4e8e\u5565\u90fd\u6ca1\u5e72\uff0c\u53d6\u53cd\u4e24\u6b21\u7ffb\u8f6c\u7684\u540d\u4e49\u4e5f\u5c31\u6ca1\u4e86\u3002\u8fd9\u6837\u65e2\u7701\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u53c8\u7701\u4e86\u4ee3\u7801\u590d\u6742\u5ea6\u3002\n\n\u73b0\u5728\u95ee\u9898\u53c8\u6765\u4e86\uff0c\u6211\u4eec\u5149\u77e5\u9053\u54ea\u4e2a\u6811\u9700\u8981\u7ffb\u8f6c\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u6ca1\u6709\u771f\u6b63\u5730\u66f4\u6539\u513f\u5b50\uff0c\u8f93\u51fa\u7684\u65f6\u5019\u600e\u4e48\u529e\u3002\n\n\u8fd9\u4e5f\u662f\u61d2\u6807\u8bb0\u7684\u7cbe\u9ad3\uff0c\u7528\u5b83\u7684\u65f6\u5019\u518d\u66f4\u65b0\u3002\u5f53\u6211\u4eec\u8981\u8fdb\u884c\u5206\u88c2\u3001\u5408\u5e76\u65f6\uff0c\u5bf9\u4e8e\u76ee\u524d\u7684\u8282\u70b9 $u$\uff0c\u5982\u679c\u5b83\u6709\u7ffb\u8f6c\u7684\u540d\u4e49\uff0c\u4e5f\u5c31\u662f\u88ab\u6807\u6709\u61d2\u6807\u8bb0\u4e86\uff0c\u90a3\u4e48\uff0c\u5b83\u7684\u4e24\u4e2a\u513f\u5b50\u5176\u5b9e\u5c31\u8981\u8c03\u6362\u4e86\uff0c\u800c\u70b9 $u$ \u7684\u61d2\u6807\u8bb0\u4e5f\u5c31\u968f\u4e4b\u6d88\u5931\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5b83\u7684\u513f\u5b50\u5df2\u7ecf\u8c03\u6362\u4e86\u3002\n\n\u800c\u5b83\u7684\u4e24\u4e2a\u513f\u5b50\u8c03\u6362\u4e4b\u540e\uff0c\u4e0d\u5149\u5b83\u4eec\u8981\u8c03\u6362\uff0c\u5b83\u4eec\u7684\u540e\u4ee3\u4e5f\u90fd\u8981\u8c03\u6362\uff0c\u6240\u4ee5\u5b83\u4eec\u4e5f\u4f1a\u627f\u63a5\u7236\u4eb2\u7684\u61d2\u6807\u8bb0\uff0c\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u627f\u63a5\u662f\u6307\u7684\u53d6\u53cd\uff0c\u4e5f\u8ddf\u4e0a\u9762\u8bb2\u8ff0\u7684\u540c\u7406\uff0c\u662f\u4e3a\u4e86\u8282\u7701\u7ffb\u591a\u6b21\u7684\u65f6\u95f4\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u6545\u5230\u6b64\uff0c\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86\u6807\u8bb0\u4e0b\u4f20\uff1a\n\n```cpp\ninline void push_down(int u)\n{\n\ttag[u]=false;\n\tSwap(ch[u][0],ch[u][1]);\n\ttag[ch[u][0]]^=1;\n\ttag[ch[u][1]]^=1; \n\treturn;\n}\n```\n\u4e4b\u540e\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u5728\u5206\u88c2\u6216\u5408\u5e76\u65f6\u4ec0\u4e48\u65f6\u5019\u4e0b\u4f20\u6807\u8bb0\u3002\n\n\u8fd9\u4e2a\u95ee\u9898\u6211\u60f3\u4e86\u534a\u5929\uff0c\u56e0\u4e3a\u6211\u592a $\\texttt{naive}$ \u4e86\u3002\u56e0\u4e3a\u6211\u4eec\u5728\u5206\u88c2\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 $u$\uff0c\u5b83\u7684\u4e24\u4e2a\u513f\u5b50\u5c31\u53ef\u80fd\u4f1a\u6539\u53d8\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u5047\u8bbe\u6211\u4eec\u5728\u5206\u88c2\u4e4b\u540e\u6765\u4e0b\u4f20\uff0c\u53ef\u80fd\u4f1a\u4f20\u5230\u4e24\u4e2a\u5047\u513f\u5b50\uff0c\u5c31\u5bfc\u81f4\u4e86 [$\\texttt{\\color{red}WA}$](https://www.luogu.com.cn/record/51863995)\u3002~~\u6ca1\u4eba\u53d1\u73b0\u8fd9\u4e2a\u53ef\u4ee5\u70b9\u5417~~\n\n\u6240\u4ee5\uff0c\u53ea\u6709\u6211\u4eec\u5728\u5206\u88c2\u4e4b\u524d\u4e0b\u4f20\uff0c\u624d\u80fd\u4f20\u5230\u771f\u513f\u5b50\u4e2d\u3002\u5f53\u7136\uff0c\u5408\u5e76\u4e5f\u662f\u540c\u7406\u7684\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u53c8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5728\u8fdb\u884c `push_down` \u65f6\uff0c\u4f1a\u8c03\u6362\u4e24\u4e2a\u513f\u5b50\uff0c\u90a3\u8fd9\u6837\u600e\u4e48\u80fd\u4fdd\u8bc1 $\\texttt{treap}$ \u7684\u6027\u8d28\uff1f\n\n\u5176\u5b9e\uff0c\u8fd9\u9053\u9898\uff0c\u5b83\u8ddf\u6743\u503c\u662f\u6ca1\u6709\u5173\u7cfb\u7684\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u6bcf\u4e2a\u5b50\u6811\u5185\u8282\u70b9\u7684\u987a\u5e8f\u5982\u4f55\uff0c\u6211\u4eec\u7ef4\u62a4\u7684\u5176\u5b9e\u5c31\u662f\u7ffb\u8f6c\u540e\u7684\u4e2d\u5e8f\u904d\u5386\uff08\u4e2a\u4eba\u7406\u89e3\uff09\u3002\n\n\u6240\u4ee5\u8bf4\u6211\u4eec\u56de\u5230\u672c\u6587\u5f00\u5934\u7b14\u8005\u672a\u89e3\u7b54\u7684\u95ee\u9898\uff0c\u600e\u4e48\u5206\u88c2\u51fa\u90a3\u68f5\u9700\u8981\u7ffb\u8f6c\u7684\u5b50\u6811\uff1f\n\n\u7531\u4e8e\u6211\u5f88 $\\texttt{naive}$\uff0c\u4e00\u76f4\u90fd\u662f\u6309\u7167\u6743\u503c\u6765\u5206\u88c2\uff0c\u7136\u540e\u4e00\u76f4\u7206\u86cb\u3002\u56e0\u4e3a\u5f53\u4f60\u4e0b\u4f20\u6807\u8bb0\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u6811\u5c31\u5df2\u7ecf\u6ee1\u8db3\u4e0d\u4e86**\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28**\u4e86\u3002\n\n~~\u90a3\u548b\u529e\uff0c\u5206\u88c2\u4e0d\u4e86\u5565\u90fd\u73a9\u5b8c\u4e86\u4e86\uff0c\u6d17\u6d17\u7761\u5427\u3002~~![/youl](https://cdn.luogu.com.cn/upload/pic/69020.png)\n\n\u65e2\u7136\u6211\u4eec\u4e0d\u80fd\u6309\u6743\u503c\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5b50\u6811\u7684\u5927\u5c0f\u6765\u5206\uff01\u4e5f\u5c31\u662f $\\texttt{FHQ-Treap}$ \u53e6\u4e00\u79cd\u7ecf\u5178\u5206\u88c2\u9014\u5f84\u3002\n\n\u8fd9\u6837\u5206\u88c2\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u5206\u51fa\u6743\u503c\u7684\u6548\u679c\uff0c\u4f46\u53c8\u4e0d\u9700\u8981\u6743\u503c\u3002\n\n\u7136\u540e\u5047\u8bbe\u6211\u4eec\u6709\u5982\u4e0b\u7684\u4e00\u68f5\u6811\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/h5tjccjf.png)\n\n\u5708\u5185\u4ee3\u8868\u8282\u70b9\u7f16\u53f7\uff0c\u7ea2\u5b57\u4ee3\u8868\u8282\u70b9\u7684\u503c\u3002\n\n\u5b83\u663e\u7136\u4e0d\u6ee1\u8db3 $\\texttt{BST}$ \u7684\u6027\u8d28\uff0c\u56e0\u4e3a\u6211\u4eec\u7ef4\u62a4\u7684\u662f\u4e2d\u5e8f\u904d\u5386\u3002\n\n\u90a3\u4e48\u76ee\u524d\uff0c\u6b64\u5e8f\u5217\u5373\u4e3a $\\texttt{2-3-5-1-4}$ \u8fd9\u662f\u6309\u7167\u5bf9\u6b64\u6811\u4e2d\u5e8f\u904d\u5386\u5f97\u6765\u7684\u3002\n\n\u6709\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u6027\u8d28\uff1a\u5bf9\u4e8e\u76ee\u524d\u5e8f\u5217\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u5728\u8fd9\u68f5\u6811\u4e2d\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u4e5f\u662f\u76f8\u8fde\u7684\u3002\n\n\u90a3\u4e48\u4e5f\u5f88\u663e\u7136\uff0c\u6211\u4eec\u53ea\u8981\u5206\u88c2\u4e24\u6b21\u5c31\u80fd\u5206\u88c2\u51fa\u6211\u4eec\u5148\u8981\u7684\u533a\u95f4\u3002\n\n\u90a3\u4e48\u5206\u88c2\u5c31\u663e\u800c\u6613\u89c1\u4e86\uff0c\u5bf9\u4e8e\u7ffb\u8f6c $[l,r]$\uff0c\u6211\u4eec\u5148\u628a $[1,l-1]$ \u8fd9\u4e2a\u533a\u95f4\u5206\u88c2\uff0c\u4e5f\u5c31\u662f\u5927\u5c0f\u4e3a $l-1$ \u7684\u5b50\u6811\u5206\u88c2\uff0c\u7136\u540e\u5bf9\u4e8e\u8fd9\u4e2a $[l,n]$ \u7684\u8fd9\u4e2a\u6811\uff0c\u6211\u4eec\u5206\u88c2\u51fa\u5927\u5c0f $r-l+1$ \u7684\u4e00\u68f5\u6811\u3002\u8fd9\u4e2a\u53ea\u8981\u4f60\u77e5\u9053\u5565\u662f\u6309\u5927\u5c0f\u5206\u88c2\u90fd\u80fd\u60f3\u6e05\u695a\u5427\u3002\n\n\u4e4b\u540e\u5c31\u662f\u8f93\u51fa\u4e86\uff0c\u5f53\u7136\u5c31\u662f\u6309\u7167\u4e2d\u5e8f\u904d\u5386\u8f93\u51fa\uff0c\u4f46\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6709\u4e9b\u8282\u70b9\u53ef\u80fd\u6807\u8bb0\u6ca1\u4e0b\u4f20\u4e0b\u53bb\uff0c\u904d\u5386\u7684\u65f6\u5019\u4e5f\u8981\u4e0b\u4f20\u3002\n\n\u547c\uff0c\u8bb2\u5b8c\u4e86\uff0c\u6b64\u751f\u6700\u957f\u7684\u4e00\u7247\u9898\u89e3\u4e86![/cy](https://cdn.luogu.com.cn/upload/pic/62225.png)\n\n[$code$](https://paste.ubuntu.com/p/bwpzbrf6HG/)\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\mathcal{O}(n\\log n)$\uff0c\u6811\u7684\u6df1\u5ea6\u7ea6\u4e3a $\\log n$\u3002\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$\\mathcal{O}(n)$\u3002\n\n\u6c42\u8d5e![/kel](https://cdn.luogu.com.cn/upload/pic/62226.png)\n\n$$\\texttt{The End.by UF}$$\n\n\n",
        "postTime": 1623933458,
        "uid": 360511,
        "name": "UperFicial",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "Splay\u53ef\u4ee5\u7528\u6765\u7ef4\u62a4\u5e8f\u5217\u3002\u8fd9\u6837\u7684\u8bdd\u662f\u628aSplay\u5f53\u4f5c\u4e00\u68f5\u533a\u95f4\u6811\u3002\n\n\u6240\u8c13\u533a\u95f4\u6811\u548c\u6743\u503c\u6811\u7684\u533a\u522b\uff0c\u5927\u6982\u5c31\u662f\u533a\u95f4\u6811\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u662f\u4e00\u6bb5\u533a\u95f4\uff08\u5178\u578b\u4ee3\u8868\u5c31\u662f\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\uff09\n\n\u6743\u503c\u6811\u597d\u7406\u89e3\u4e00\u70b9\uff0c\u5c31\u662f\u6bcf\u4e2a\u70b9\u771f\u7684\u4ee3\u8868\u4e00\u4e2a\u70b9\u3002\n\n\u81f3\u4e8e\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528Splay\u7684\u8fc7\u7a0b\u5b9e\u73b0\u3002\u8be6\u89c1\u4ee3\u7801\u3002\uff08Splay\u80fd\u7ef4\u62a4\u5e8f\u5217\u53cd\u8f6c\u4e5f\u662f\u5b83\u4f5c\u4e3a**LCT**\u7684\u8f85\u52a9\u6811\u7684\u6761\u4ef6\u4e4b\u4e00\uff09\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<bits/stdc++.h>\n#define N 100005\nusing namespace std;\nint n,m; \nint fa[N],ch[N][2],size[N],rev[N],rt;\ninline void pushup(int x){\n    size[x]=size[ch[x][0]]+size[ch[x][1]]+1;\n}\nvoid pushdown(int x){\n    if(rev[x]){\n        swap(ch[x][0],ch[x][1]);\n        rev[ch[x][0]]^=1;rev[ch[x][1]]^=1;rev[x]=0;\n    }\n}\nvoid rotate(int x,int &k){\n    int y=fa[x],z=fa[y],kind;\n    if(ch[y][0]==x)kind=1;else kind=0;\n    if(y==k)k=x;\n    else{if(ch[z][0]==y)ch[z][0]=x;else ch[z][1]=x;}\n    ch[y][kind^1]=ch[x][kind];fa[ch[y][kind^1]]=y;\n    ch[x][kind]=y;fa[y]=x;fa[x]=z;\n    pushup(x);pushup(y);\n}\nvoid splay(int x,int &k){\n    while(x!=k){\n        int y=fa[x],z=fa[y];\n        if(y!=k){\n            if((ch[y][0]==x)^(ch[z][0]==y))rotate(x,k);\n            else rotate(y,k);\n        }\n        rotate(x,k);\n    }\n}\nvoid build(int l,int r,int f){\n    if(l>r)return;\n    int mid=(l+r)/2;\n    if(mid<f)ch[f][0]=mid;else ch[f][1]=mid;\n    fa[mid]=f;size[mid]=1;\n    if(l==r)return;\n    build(l,mid-1,mid);build(mid+1,r,mid);\n    pushup(mid);\n}\nint find(int x,int k){\n    pushdown(x);int s=size[ch[x][0]];\n    if(k==s+1)return x;\n    if(k<=s)return find(ch[x][0],k);\n    else return find(ch[x][1],k-s-1);\n}\nvoid rever(int l,int r){\n    int x=find(rt,l),y=find(rt,r+2);\n    splay(x,rt);splay(y,ch[x][1]);int z=ch[y][0];\n    rev[z]^=1;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    rt=(n+3)/2;build(1,n+2,rt);\n    for(int i=1;i<=m;i++){\n        int L,R;scanf(\"%d%d\",&L,&R);\n        rever(L,R);\n    }\n    for(int i=2;i<=n+1;i++)printf(\"%d \",find(rt,i)-1);\n    return 0;\n}\n```",
        "postTime": 1493460179,
        "uid": 2978,
        "name": "zcysky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u7528\u975e\u65cb\u8f6cTreap\u5199\u7684\u3002\u3002\u3002\n\n\u8d77\u521d\u5b66\u5e73\u8861\u6811\u65f6\u8868\u793aSplay\u770b\u4e0d\u61c2\u554a\u3002\u3002\u3002\n\n\u4e8e\u662f\u5b66\u4e86\u4ee3\u7801\u7b80\u5355\u7684Treap\n\n\u987a\u6c34\u63a8\u821f\u7684\u5b66\u4e86\u975e\u65cb\u8f6cTreap\uff08\u7136\u800c\u73b0\u5728\u505a\u9898\u8fd8\u5f97\u770b\u677f\u5b50\uff09\n\n\u4f3c\u4e4eLCT\u4e5f\u6709\u7528\u975e\u65cb\u8f6cTreap\u5199\u7684\uff1f\n\n\u8fd9\u9898\u5c31\u662f\u628a\u6bcf\u4e2a\u67e5\u8be2\u533a\u95f4\u5206\u4e3a[1~l-1][l~r][r+1~n]\u4e09\u4e2a\u533a\u95f4(split)\n\n\u518d\u628a[l~r]\u533a\u95f4\u6807\u8bb0\n\n\u518d\u628a\u4e09\u4e2a\u533a\u95f4\u5408\u5e76(merge)\n\n\u8bb0\u5f97\u4e0b\u63a8\u6807\u8bb0\u5c31\u884c\u4e86\n\n\u7528\u975e\u6307\u9488\u5199\u7684~~\u6307\u9488\u849f\u84bb\u8868\u793a\u4e0d\u4f1a\u554a~~\n\n\u5f53\u65f6\u627e\u975e\u6307\u9488\u7684\u677f\u5b50\u53ef\u662f\u627e\u4e86\u597d\u957f\u65f6\u95f4\u3002\u3002\u3002\n\n```cpp\n# include<iostream>\n# include<cstdio>\n# include<cstring>\n# include<cstdlib>\nusing namespace std;\nconst int MAX=1e5+1;\nint n,m,tot,rt;\nstruct Treap{\n    int pos[MAX],siz[MAX],w[MAX];\n    int son[MAX][2];\n    bool fl[MAX];\n    void pus(int x)\n    {\n        siz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n    }\n    int build(int x)\n    {\n        w[++tot]=x,siz[tot]=1,pos[tot]=rand();\n        return tot;\n    }\n    void down(int x)\n    {\n        swap(son[x][0],son[x][1]);\n        if(son[x][0]) fl[son[x][0]]^=1;\n        if(son[x][1]) fl[son[x][1]]^=1;\n        fl[x]=0;\n    }\n    int merge(int x,int y)\n    {\n        if(!x||!y) return x+y;\n        if(pos[x]<pos[y])\n        {\n            if(fl[x]) down(x);\n            son[x][1]=merge(son[x][1],y);\n            pus(x);\n            return x;\n        }\n        if(fl[y]) down(y);\n        son[y][0]=merge(x,son[y][0]);\n        pus(y);\n        return y;\n    }\n    void split(int i,int k,int &x,int &y)\n    {\n        if(!i)\n        {\n            x=y=0;\n            return;\n        }\n        if(fl[i]) down(i);\n        if(siz[son[i][0]]<k)\n        x=i,split(son[i][1],k-siz[son[i][0]]-1,son[i][1],y);\n        else\n        y=i,split(son[i][0],k,x,son[i][0]);\n        pus(i);\n    }\n    void coutt(int i)\n    {\n        if(!i) return;\n        if(fl[i]) down(i);\n        coutt(son[i][0]);\n        printf(\"%d \",w[i]);\n        coutt(son[i][1]);\n    }\n}Tree;\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n      rt=Tree.merge(rt,Tree.build(i));\n    for(int i=1;i<=m;i++)\n      {\n          int l,r,a,b,c;\n          scanf(\"%d%d\",&l,&r);\n          Tree.split(rt,l-1,a,b);\n        Tree.split(b,r-l+1,b,c);\n        Tree.fl[b]^=1;\n        rt=Tree.merge(a,Tree.merge(b,c));\n      }\n    Tree.coutt(rt);\n    return 0;\n}\n```",
        "postTime": 1516942442,
        "uid": 49206,
        "name": "Dispwnl",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u63a8\u5e7f\u4e00\u4e0b\u5427\uff1f\uff1ahttp://blog.csdn.net/no1\\_terminator/article/details/77639045\n\n\u849f\u84bb\u80fd\u529b\u6709\u9650\uff0cdalao\u8bf7\u5ffd\u89c6\uff0c\u53ea\u662f\u8ddf\u840c\u65b0\u8bb2\u4e00\u4e0b\u600e\u4e48\u7528splay\u641e\u533a\u95f4\u95ee\u9898\u3002\n\n\n\u6ce8\u610f\uff0c\u8fd9\u65f6\u7684splay\u4e0d\u518d\u662f\u4e00\u4e2a\u4e8c\u53c9\u6743\u503c\u67e5\u627e\u6811\uff0c\u8fd9\u65f6\u7ed9\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2asize\u503c\u8868\u793a\u5b50\u6811\u4e2d\u8282\u70b9\u7684\u4e2a\u6570\u3002\n\n\u5728\u5b66\u4e60splay\u7ef4\u62a4\u533a\u95f4\u65f6\uff0c\u4e00\u5b9a\u8981\u6452\u5f03\u6743\u503c\u6811\u7684\u601d\u7ef4\u5b9a\u5f0f\u3002\u8fd9\u65f6\u7684splay\u7684\u6bcf\u4e00\u4e2akey\u952e\u503c\u5bf9\u5e94\u539f\u5e8f\u5217\u7684a[i]\uff0c\u4f46\u662f\u6ce8\u610f\u8fd9\u4e2akey\u5728splay\u4e2d\u4e0d\u662f\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811,\u5373\u4e0d\u4e00\u5b9a\u6ee1\u8db3key\u7684\u5de6\u5b69\u5b50\u90fd\u5c0f\u4e8ekey\uff0c\u53f3\u5b69\u5b50\u90fd\u5927\u4e8ekey\uff0c\u90a3\u6211\u4eec\u6839\u636e\u4ec0\u4e48\u53bb\u5efa\u4e00\u4e2asplay\u5462\uff1f\u6211\u4eec\u6839\u636e\u539f\u5e8f\u5217\u7684\u4e0b\u6807\u53bb\u5efa\u4e00\u4e2a\u5c3d\u91cf\u5e73\u8861\u7684\u4e8c\u53c9\u6811\uff08\u6bcf\u6b21\u53d6\u4e2d\u70b9\u4f5c\u6839\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u65e0\u8bba\u600e\u4e48\u65cb\u8f6c\uff0c\u4e00\u4e2akey[u]\u4e0b\u6807\u5bf9\u5e94size[left[u]]+1\u603b\u662f\u5bf9\u5e94\u8fd9\u4e2akey[u]\u5728\u539f\u5e8f\u5217\u4e2d\u7684\u4e0b\u6807\uff0c\u4f8b\u5982\u6211\u4eec\u9700\u8981\u67e5\u627ea[k]\uff08select(root,k)\uff09,\u90a3\u4e48\u6211\u4eec\u4ece\u6839\u505a\u8d77\uff0c\u82e5size[left[root]]+1>=k\uff0c\u8bf4\u660e\u6211\u4eec\u9700\u8981\u7684a[k]\u5728\u5de6\u5b50\u6811\u4e2d\uff0c\u9012\u5f52select(left[root],k),\u82e5size[left[root]]+1<k,\u8bf4\u660e\u6211\u4eec\u9700\u8981\u7684a[k]\u5728\u53f3\u5b50\u6811\u4e2d\uff0c\u9012\u5f52select(right[root],k-size[left[root]]+1)\n\n\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u6ca1\u6709\u4ee5\u6743\u503c\u7684\u5f62\u5f0f\u53bb\u67e5\u627ea[k]\uff0c\u800c\u662f\u4ee5\u6392\u540d\u7684\u5f62\u5f0f\u67e5\u627ek\u3002\n\n\u6211\u4eec\u5148\u628a\u539f\u5e8f\u5217\u6309\u7167\u4e0b\u6807\u5efa\u6210\u4e00\u4e2a\u5b8c\u7f8e\u7684\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u90a3\u4e48\u8fd9\u65f6\u5bf9\u4e8e\u4e00\u4e2au\uff0c\u5b83\u7684size[left[u]]+1\u5bf9\u5e94\u7684\u5728\u539f\u5e8f\u5217\u4e2d\u7684\u4e0b\u6807\uff0c\n\n\n\u8fd9\u65f6\u6211\u4eec\u53d1\u73b0\u4e0d\u8bba\u600e\u4e48\u65cb\u8f6c\uff0c\u6bcf\u4e2au\u7684size[left[u]]+1\u662f\u4e0d\u4f1a\u53d8\u7684\uff0c\n\n\n\u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u539f\u5e8f\u5217\u7684[l,r]\u5e8f\u5217\u7684\u7ffb\u8f6c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5bf9\u5e94\u7684size[left[u]]+1=l-1\u7684\u5148\u65cb\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u7136\u540e\u628a\u5bf9\u5e94size[left[u]]+1=r+1\u7684\u65cb\u8f6c\u5230\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\uff0c\u90a3\u4e48\u6b64\u65f6\u8fd9\u4e2a\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u5c31\u662fl<=size[left[u]]+1<=r\uff0c\u7136\u540e\u6211\u4eec\u7ed9\u8fd9\u4e2a\u8282\u70b9\u6253\u4e0alazy\u6807\u8bb0\uff0c\u5728\u6bcf\u6b21\u67e5\u627esize[left[u]]=k\u65f6\u82e5u\u4e0a\u6709\u6807\u8bb0\uff0c\u5c06u\u7684\u5de6\u53f3\u5b50\u6811\u4ea4\u6362\uff0c\u5e76\u4e0b\u4f20\u6807\u8bb0\uff0c\u5728\u8f93\u51fa\u7ed3\u679c\u65f6\u4e5f\u4e0b\u4f20\u6807\u8bb0\u5c31\u884c\u4e86\u3002\n\n\n\u4e00\u5b9a\u8981\u7406\u89e3\uff1asplay\u4e0d\u518d\u662f\u4e00\u4e2a\u4e8c\u53c9\u6743\u503c\u67e5\u627e\u6811\uff0c\u5b83\u7ef4\u62a4\u7684key\u662f\u539f\u5e8f\u5217\u5bf9\u5e94\u4e0b\u6807\u7684\u503c\uff0c\u5b83\u7684\u4e2d\u5e8f\u904d\u5386\u5c31\u5bf9\u5e94\u4e86\u539f\u5e8f\u5217\uff0c\u5b83\u6839\u636esize\u8fdb\u884c\u67e5\u627e\u539f\u5e8f\u5217\u7684\u4e0b\u6807\uff0c\u6b64\u65f6\u6211\u4eec\u8981\u7ef4\u62a4\u533a\u95f4\u65f6\u5c31\u53ef\u4ee5\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684\u5ef6\u8fdf\u64cd\u4f5c\u6253\u4e0alazy\u6807\u8bb0\u3002\u7136\u540e\u4e0b\u4f20\u5230\u5de6\u53f3\u5b50\u6811\u5c31\u884c\u4e86\u3002\n\n\n\u8fd9\u4e2a\u5077\u6881\u6362\u67f1\u5f88\u5de7\u5999\uff0c\u56e0\u4e3asplay\u72ec\u7279\u7684\u4f38\u5c55\u64cd\u4f5c\u4f7f\u5b83\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u3002\u82e5\u4ec5\u4ec5\u662f\u9700\u8981\u4e00\u4e2a\u5e73\u8861\u6811\uff0c\u90a3\u4e48splay\u662f\u6ca1\u6709\u4f7f\u7528\u7684\u5fc5\u8981\u7684\uff0c\u56e0\u4e3aTreap\u4e5f\u652f\u6301\u5408\u5e76\u5206\u88c2\uff0c\u800cSBT\u53ef\u4ee5\u6700\u5feb\u6700\u7a33\u5b9a\u7684\u5b8c\u6210\u6240\u6709\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u64cd\u4f5c\u3002\n\n\n\u849f\u84bb\u80fd\u529b\u6709\u9650\uff0c\u5927\u4f6c\u52ff\u55b7\u3010\u624b\u52a8\u5bb3\u7f9e(\u273f\u25e1\u203f\u25e1)\u3011\n\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=101000;\nint ch[N][2];\nint size[N],rev[N],fa[N];\nint n,m,rt=0;\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while (ch<'0' || ch>'9'){if (ch=='-')f=-1;ch=getchar();}\n    while ('0'<=ch && ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*f;\n}\nvoid pushup(int x){\n    size[x]=size[ch[x][0]]+size[ch[x][1]]+1;\n}\nvoid pushdown(int x){\n    if (rev[x]){\n        int &lc=ch[x][0],&rc=ch[x][1];\n        swap(lc,rc);\n        rev[lc]^=1;rev[rc]^=1;rev[x]=0;\n    }\n}\nvoid build(int l,int r,int &rt){\n    if (l>r) return;\n    int mid=(l+r)>>1;\n    if (mid<rt)ch[rt][0]=mid;else ch[rt][1]=mid;\n    fa[mid]=rt;size[mid]=1;\n    if (l==r)return;\n    build(l,mid-1,mid);build(mid+1,r,mid);\n    pushup(mid);\n}\nvoid rotate(int x,int &k){\n    int y=fa[x],z=fa[y],d=ch[y][1]==x;\n    if (y==k)k=x;\n    else ch[z][ch[z][1]==y]=x;\n    fa[ch[x][d^1]]=y;fa[y]=x;fa[x]=z;\n    ch[y][d]=ch[x][d^1];ch[x][d^1]=y;\n    pushup(x);pushup(y);\n}\nvoid splay(int x,int &k){\n    while (x!=k){\n        int y=fa[x],z=fa[y];\n        if (y!=k){\n            if ((ch[z][0]==y)^(ch[y][0]==x))rotate(x,k);\n                else rotate(y,k);\n        }\n        rotate(x,k);\n    }\n}\nint select(int &rt,int k){\n    pushdown(rt);\n    int sum=size[ch[rt][0]]+1;\n    if (sum==k)return rt;\n    if (sum>k)return select(ch[rt][0],k);\n        else return select(ch[rt][1],k-sum);\n}\nvoid rever(int L,int R){\n    splay(L,rt);splay(R,ch[L][1]);\n    rev[ch[R][0]]^=1;\n}\nvoid print(int rt){\n    pushdown(rt);\n    if (ch[rt][0])print(ch[rt][0]);\n    if (2<=rt && rt<=n+1)printf(\"%d \",rt-1);\n    if (ch[rt][1])print(ch[rt][1]);\n}\nint main(){\n    n=read(),m=read();\n    rt=(3+n)>>1;build(1,n+2,rt);\n    for (int i=1;i<=m;i++){\n        int L=read(),R=read();\n        L=select(rt,L);R=select(rt,R+2);\n        rever(L,R);\n    }\n    print(rt);\n    return 0;\n}\n```",
        "postTime": 1505393079,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e00\u5708\u53d1\u73b0\u5927\u5bb6\u90fd\u662f\u7528\u7684\u5f88\u6e05\u771f\u7684splay\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u7528STL\u5f3a\u884c\u6df7\u5206\u7684\u505a\u6cd5\n\n`rope`\u662fSTL\u5185\u7f6e\u7684\u4e00\u9897\u5e73\u8861\u6811\uff0c\u8be6\u7ec6\u7684\u6587\u6863\u53ef\u4ee5\u89c1[\u8fd9\u91cc](https://www.sgi.com/tech/stl/Rope.html)~~\u867d\u7136\u662f\u6d0b\u6587\u7248\u7684~~\n\n`rope`\u4e00\u822c\u7528\u6765\u7ef4\u62a4\u5b57\u7b26\u4e32\uff0c\u5f53\u7136\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u9898\uff0c\u6211\u4eec\u8ba9\u5b83\u7ef4\u62a4\u5e8f\u5217\n\n`rope`\u76f8\u6bd4\u4e0e`string`\uff0c\u53ef\u4ee5\u5b9e\u73b0\u9ad8\u6548\u7684\u5206\u88c2\u548c\u5408\u5e76\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u6765\u8fdb\u884c\u4e00\u6ce2\u64cd\u4f5c\n\n\u4f46\u662f\u3002\u3002\u5b83\u5c01\u88c5\u7684\u8fd9\u4e48\u4e25\uff0c\u600e\u4e48\u6253\u6807\u8bb0\u5462\uff1f\n\n\u5176\u5b9e\u662f\u4e0d\u7528\u6253\u6807\u8bb0\u7684\n\n\u6211\u4eec\u7ef4\u62a4\u4e00\u6b63\u4e00\u53cd\u4e24\u4e2a`rope`\uff0c\u7ffb\u8f6c\u64cd\u4f5c\u5c31\u662f\u4ea4\u6362\u5b83\u4eec\u7684\u5bf9\u5e94\u533a\u95f4\n\n\u7136\u540e\u5c31\u6ca1\u6709\u4e86\u3002\u3002\u7f3a\u70b9\u662f\u5e38\u6570\u5f88\u5927\u3002\u3002\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801qwq\n\n\n``` cpp\n//\n// Created by margatroid on 17-9-17.\n//\n\n#include<bits/stdc++.h>\n#include<ext/rope>\nusing namespace std;\nusing namespace __gnu_cxx;\ninline char getc()\n{\n    static char buf[1 << 18], *fs, *ft;\n    return (fs == ft && (ft = (fs = buf) + fread(buf, 1, 1 << 18, stdin)), fs == ft) ? EOF : *fs++;\n}\ninline int gn()\n{\n    register int k = 0, f = 1;\n    register char c = getc();\n    for(; !isdigit(c); c = getc()) if(c == '-') f = -1;\n    for(; isdigit(c); c = getc()) k = k * 10 + c - '0';\n    return k * f;\n}\nrope<int> str, rstr;\nint n, m;\ninline void rev(int st, int ed)\n{\n    if (st >= ed + 1) return;\n    ed++;\n    rope<int> tmp = str.substr(st + str.begin(), ed + str.begin());\n    str = str.substr(0 + str.begin(), st + str.begin()) + rstr.substr(n - ed + rstr.begin(), n - st + rstr.begin()) + str.substr(ed + str.begin(), str.length() + str.begin());\n    rstr = rstr.substr(rstr.begin(), n - ed + rstr.begin()) + tmp + rstr.substr(n - st + rstr.begin(), rstr.length() + rstr.begin());\n}\nint main()\n{\n    n = gn(), m = gn();\n    for (int i = 1; i <= n; ++i)\n        str.append(i), rstr.append(n - i + 1);\n    for (int i = 1; i <= m; ++i)\n    {\n        int l, r;\n        l = gn(), r = gn();\n        rev(l - 1, r - 1);\n    }\n    for (int i = 0; i < str.length(); ++i)\n        printf(\"%d \", str[i]);\n    puts(\"\");\n}\n```",
        "postTime": 1507989610,
        "uid": 51529,
        "name": "Margatroid",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "# \u65e2\u7136\u5927\u5bb6\u90fd\u5199\u7684\u662fsplay\uff0c\u90a3\u6211\u5c31\u53d1\u4e00\u7bc7FHQ\uff08\u8303\u6d69\u5f3a\uff09treap\u7684\u9898\u89e3\u5427\uff01\uff01\uff01\n###### FHQ\u4e3b\u8981\u6709\u4e24\u79cd\u64cd\u4f5c\uff0c\u4e00\u79cd\u53eb\u5408\u5e76\uff0c\u53e6\u4e00\u79cd\u53eb\u5206\u88c2\uff0c\u5c31\u8fd9\u4e24\u79cd\u64cd\u4f5c\u53ef\u4ee5\u5e72\u5f88\u591a\u4e8b\u60c5\n\u5173\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u60f3\u60f3\u770b\uff0c\u5c31\u662f\u533a\u95f4\u4fee\u6539\uff0c\u5bf9\u5427\uff1f\uff1f\u6211\u4eec\u53ef\u4ee5\u6765\u4e00\u4e2alazy\u6807\u8bb0\u6765\u5b58\u6b64\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u662f\u5426\u9700\u8981\u4ea4\u6362\uff0c\u8fd9\u6837\u5c31\u5dee\u4e0d\u591a\u4e86\uff0c\u6ce8\u91ca\u5728\u4ee3\u7801\u91cc\uff0c\u5982\u679c\u770b\u4e0d\u61c2\u8fd9\u4ee3\u7801\uff0c\u6765\u8fd9\u91cc\n\n[3369\u5e73\u8861\u6811\u7684\u64cd\u4f5c](https://www.luogu.org/blog/specialflag/solution-p3369)\n\n\u8fd9\u91cc\u7684\u89e3\u91ca\u66f4\u8be6\u7ec6\uff0c\n\n\n------------\n\n\n#### \u4e0a\u4ee3\u7801\n```cpp\n#include<map>\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int M=1e6+10;\nint n,m,root,l,r,p,cnt;\n\nstruct node{\n\tint l,r,size,val,lazy,key;\n}tree[M];\n\nvoid adde(int x){//\u5efa\u6811,\u7531\u4e8e\u5b83\u662f\u4f9d\u6b21\u589e\u52a0\u7684,\u6240\u4ee5\u53ef\u4ee5\u7528x,\u4e0d\u9700\u8981cnt \n\ttree[x].val=x;\n\ttree[x].size=1;\n\ttree[x].key=rand();\n\ttree[x].l=tree[x].r=0;\n}\n\nvoid pushdown(int u){//\u4e0b\u4f20\u61d2\u6807\u8bb0,\u6ce8\u610f\u5148\u4ea4\u6362,\u518d\u4e0b\u4f20,\u539f\u56e0\u81ea\u5df1\u609f \n\tswap(tree[u].l,tree[u].r);//\u4ea4\u6362\u8282\u70b9\n\t//\u4e0b\u4f20\u61d2\u6807\u8bb0 \n\ttree[tree[u].l].lazy^=1;\n\ttree[tree[u].r].lazy^=1;\n\ttree[u].lazy=0;//\u6e05\u9664\u6807\u8bb0 \n}\n\nvoid update(int u){//\u66f4\u65b0\u64cd\u4f5c \n\ttree[u].size=tree[tree[u].l].size+tree[tree[u].r].size+1;\n}\n\nvoid split(int u,int x,int &l,int &r){\n\tif(!u){\n\t\tl=r=0;\n\t\treturn ;\n\t}\n\tif(tree[u].lazy)//\u5904\u7406\u5f53\u65f6\u7684\u61d2\u6807\u8bb0 \n\t\tpushdown(u);//\u4e0b\u4f20\u61d2\u6807\u8bb0 \n\t//\u6309\u7167\u533a\u95f4\u5206\u5272 \n\tif(tree[tree[u].l].size+1<=x){//\u786e\u5b9a\u5de6\u513f\u5b50 \n\t\tl=u;\n\t\tsplit(tree[u].r,x-tree[tree[u].l].size-1,tree[u].r,r);//!\u6ce8\u610f\u53f3\u513f\u5b50\u7684\u6b64\u65f6\u7684size\u6ee1\u8db3\u7684\u503c\u9700\u8981\u51cf\u53bb\u5de6\u513f\u5b50\u7684\u4e2a\u6570  \n\t}\n\telse{//\u786e\u5b9a\u53f3\u513f\u5b50 \n\t\tr=u;\n\t\tsplit(tree[u].l,x,l,tree[u].l);//!\u6ce8\u610f\u5de6\u513f\u5b50\u6b64\u65f6\u7684size\u4e0d\u9700\u8981\u51cf\u53bb,\u7406\u7531\u5efa\u8303\u6d69\u5f3a\u5e73\u8861\u6811\u6a21\u677f \n\t}\n\tupdate(u);//\u540c\u6a21\u677f\u4e00\u6837,\u66f4\u65b0size\u7684\u503c \n}\n\nint merge(int l,int r){//\u5408\u5e76\u64cd\u4f5c \n\tif(!l || !r)\n\t\treturn l+r;\n\t//\u6309\u7167\u952e\u503c\u7ef4\u62a4\u4e00\u4e2a\u5c0f\u6839\u5806 \n\tif(tree[l].key<tree[r].key){//l\u5f53\u7236\u8282\u70b9 \n\t\tif(tree[l].lazy)//\u4e0b\u4f20\u61d2\u6807\u8bb0 \n\t\t\tpushdown(l);\n\t\ttree[l].r=merge(tree[l].r,r);//\u786e\u5b9al\u7684\u53f3\u513f\u5b50 \n\t\tupdate(l);return l;\n\t}\n\telse{//r\u5f53\u7236\u8282\u70b9 \n\t\tif(tree[r].lazy)//\u4e0b\u4f20\u61d2\u6807\u8bb0 \n\t\t\tpushdown(r);\n\t\ttree[r].l=merge(l,tree[r].l);//\u786e\u5b9ar\u7684\u5de6\u513f\u5b50 \n\t\tupdate(r);return r;\n\t}\t\n}\n\nvoid print(int u){//\u6309\u7167\u4e2d\u5e8f\u904d\u5386 \n\tif(tree[u].lazy)//\u5982\u679c\u8fd8\u5b58\u5728\u61d2\u6807\u8bb0\u5219\u4e0b\u4f20 \n\t\tpushdown(u);\n\tif(tree[u].l)//\u5148\u904d\u5386\u5de6\u513f\u5b50 \n\t\tprint(tree[u].l);\n\tprintf(\"%d \",tree[u].val);//\u518d\u904d\u5386\u7236\u8282\u70b9  \n\tif(tree[u].r)//\u6700\u540e\u904d\u5386\u53f3\u513f\u5b50 \n\t\tprint(tree[u].r);\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tadde(i);//\u5efa\u7acb\u65b0\u7684\u8fb9 \n\t\troot=merge(root,i);//\u5408\u5e76\u66f4\u65b0\u6839\u8282\u70b9 \n\t}\n\tfor(int i=1,x,y;i<=m;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\t//\u5206\u6210\u5206\u522b\u4ee5l,p,r\u4e3a\u6839\u8282\u70b9\u7684\u4e09\u68f5\u6811 \n\t\tsplit(root,y,l,r);\n\t\tsplit(l,x-1,l,p);\n\t\ttree[p].lazy^=1;//\u66f4\u65b0\u61d2\u6807\u8bb0,\u6bcf\u6b21\u7684p\u503c\u4f1a\u53d1\u751f\u6539\u53d8,\u53ea\u6709\u76f8\u540c\u7684\u533a\u95f4p\u503c\u624d\u4f1a\u4e0d\u540c,\u4e0d\u7528\u62c5\u5fc3 (:^_^:) \n\t\troot=merge(merge(l,p),r);//\u5408\u5e76 \n\t}\n\tprint(root);//\u8f93\u51fa \n\treturn 0;\n} \n```\n\u597d\u4e86\uff0c\u6109\u5feb\u7684AC;\n\n",
        "postTime": 1551427075,
        "uid": 111956,
        "name": "king_storm",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "# \u5927\u5bb6\u597d\uff0c\u6211\u975e\u5e38\u559c\u6b22\u7528\u66b4\u529b\u6570\u636e\u7ed3\u6784\uff0c\u4e8e\u662f\u6211\u5c31\u7528~~\u5206\u5757~~\u5757\u72b6\u94fe\u8868\u8fc7\u4e86\u8fd9\u9053\u9898\n\n**\u6211\u5c31\u5f88\u5947\u602a\u4e86\uff0c\u4e3a\u4ec0\u4e48\u4e8c\u903c\u5e73\u8861\u6811\u6ee1\u5730\u5206\u5757\u9898\u89e3\uff0c\u6587\u827a\u5e73\u8861\u6811\u6ca1\u6709\u5757\u94fe\u9898\u89e3\u554a**\n\n\u561b..\u5757\u94fe\u5c31\u662f\u628a\u6570\u7ec4\u548c\u94fe\u8868\u7ed3\u5408\u5728\u4e00\u8d77\u7684\u4ea7\u7269...\n\n\u94fe\u8868\u652f\u6301O(1)\u63d2\u5165\u5220\u9664O(n)\u67e5\u8be2\uff0c\u6570\u7ec4\u652f\u6301O(1)\u67e5\u8be2O(n)\u63d2\u5165\u5220\u9664\n\n\u90a3\u7528\u5206\u5757\u7684\u5f62\u5f0f\u7ed3\u5408\u8d77\u6765\u5c31\u662fO(sqrt(n))\u67e5\u8be2\u548cO(sqrt(n))\u63d2\u5165\u5220\u9664\u4e86.\n\n### \u5757\u94fe\u5b8f\u89c2\u4e0a\u662f\u94fe\u8868\uff0c\u6bcf\u4e2a\u5757\u662f\u6570\u7ec4\n\n\u561b...\u533a\u95f4\u7ffb\u8f6c\u7684\u8bdd\uff0c\u6574\u5757\u8c03\u6362\u4e00\u4e0b\u5148\u540e\u6b21\u5e8f \u6253\u4e0a\u7ffb\u8f6c\u6807\u8bb0\n\n~~\u4e24\u8fb9\u7684\u96f6\u6563\u5757\u5927\u529bswap\u4e00\u4e0b......~~\n\n\u6807\u8bb0\u4f3c\u4e4e\u53ef\u4ee5\u4e0d\u4e0b\u653e \u4f46\u662f\u4f1a\u5f88\u70e6 \u5c31\u61d2\u5f97\u5199\u4e86\uff08\n\n\u5177\u4f53\u770b\u4ee3\u7801\u5427......\n\n```c\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n    register int x=0;char ch=getchar();while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();return x;\n}\nint q[200000],t,e;\nstruct block{\n    int l,n,s,r,a[2000];\n}b[2000];\nint n,m,num,block;\ninline void Swap(int &a,int &b){\n    if(a^b)a^=b^=a^=b;\n}\ninline void clear(int id){\n    q[++t]=id;\n    b[id].l=b[id].n=b[id].s=b[id].r=0;\n    memset(b[id].a,0,sizeof(b[id].a));\n}\ninline int init(){\n    n=read(),m=read();\n    block=sqrt(n);num=(n-1)/block+1;\n    for(register int i=1;i<=n;i++){\n        int bl=(i-1)/block+1;\n        b[bl].a[++b[bl].s]=i;\n    }\n    for(register int i=1;i<=(n-1)/block+1;i++)\n        b[i].l=i-1,b[i].n=i+1;\n    b[num].n=0;\n}\ninline void reset(int id){\n    if(b[id].r){\n        int m=(1+b[id].s)>>1;\n        for(register int i=1;i<=m;i++)\n            Swap(b[id].a[i],b[id].a[b[id].s+1-i]);\n        b[id].r=0;\n    }\n}\ninline void merge(int i1){\n    int i2=b[i1].n;\n    reset(i1),reset(i2);\n    for(register int i=1;i<=b[i2].s;i++)\n        b[i1].a[i+b[i1].s]=b[i2].a[i];\n    b[i1].s+=b[i2].s;\n    b[i1].n=b[i2].n,b[b[i1].n].l=i1;\n    clear(i2);\n}\ninline void split(int id){\n    reset(id); int i2;\n    if(t!=e) i2=q[++e]; else i2=++num;\n    for(register int i=block+1;i<=b[id].s;i++)\n        b[i2].a[i-block]=b[id].a[i];\n    b[i2].s=b[id].s-block,b[id].s=block;\n    b[i2].n=b[id].n,b[b[i2].n].l=i2;\n    b[id].n=i2,b[i2].l=id;\n}\ninline void reverse(int l,int r){\n    int bl=1,br=1;\n    while(l>b[bl].s){\n        l-=b[bl].s,r-=b[bl].s;\n        bl=br=b[bl].n;\n    }\n    while(r>b[br].s)\n        r-=b[br].s,br=b[br].n;\n    if(bl==br){\n        reset(bl); int m=(l+r)>>1; \n        for(register int i=l;i<=m;i++)\n            Swap(b[bl].a[i],b[bl].a[l+r-i]);\n        return;\n    } else {\n        reset(bl),reset(br);\n        register int t=b[bl].s-l+1;\n        if(t==r){\n            for(register int i=1;i<=r;i++)\n                Swap(b[br].a[i],b[bl].a[b[bl].s-i+1]);\n        }\n        else\n            {\n            if(t>r){\n                register int tmp=t-r;\n                for(register int i=b[br].s;i>=1;i--)\n                    b[br].a[i+tmp]=b[br].a[i];\n                tmp=b[bl].s+1;\n                for(register int i=b[bl].s;i>=l;i--)\n                    Swap(b[bl].a[i],b[br].a[tmp-i]);\n            }\n            else\n            {\n                register int tmp=b[bl].s+r-t+1;\n                for(register int i=r-t+1;i<=r;i++)\n                    Swap(b[br].a[i],b[bl].a[tmp-i]);\n                tmp=b[bl].s+r-t+1;\n                for(register int i=1;i<=r-t;i++)\n                    b[bl].a[tmp-i]=b[br].a[i];\n                tmp=b[br].s+r-t;\n                for(register int i=1;i<=tmp;i++)\n                    b[br].a[i]=b[br].a[i+r-t];\n            }\n            b[bl].s-=t-r,b[br].s+=t-r;\n        }\n        if(b[bl].n!=br){\n            for(register int i=b[bl].n;i!=br;i=b[i].l)\n                Swap(b[i].l,b[i].n),b[i].r^=1;\n            Swap(b[bl].n,b[br].l);\n            b[b[bl].n].l=bl; b[b[br].l].n=br;\n        }\n        if(b[bl].s>2*sqrt(n)) split(bl);\n        if(b[br].s>2*sqrt(n)) split(br);\n        if(b[br].s+b[b[br].n].s<sqrt(n)&&b[br].n) merge(br);\n        if(b[bl].s+b[b[bl].n].s<sqrt(n)) merge(bl);\n    }\n}\ninline void print(){\n    for(register int i=1;i!=0;i=b[i].n){\n        if(!b[i].r)\n            for(register int j=1;j<=b[i].s;j++)\n                printf(\"%d \",b[i].a[j]);\n        else\n            for(register int j=b[i].s;j>=1;j--)\n                printf(\"%d \",b[i].a[j]);\n    }\n}\ninline void solve(){\n    while(m--){\n        int L=read(),R=read();\n        reverse(L,R);\t\n    }\n}\nint main(){\n    //freopen(\"1.in\",\"r\",stdin);\n    //freopen(\"F.out\",\"w\",stdout);\n    init(); solve(); print();\n    return 0;\n}\n```",
        "postTime": 1521794799,
        "uid": 65376,
        "name": "\u6829\u7b19\u4e36",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u5047\u5982\u6211\u4eec\u8981\u5728Splay\u4e2d\u4fee\u6539\u533a\u95f4\u7684\u8bdd\uff0c\u53ef\u4ee5\u5148\u67e5\u627esiz\u503c\u4e3al\u4e0er+2\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u5c06\u4e00\u4e2a\u65cb\u8f6c\u5230\u6839\uff0c\u53e6\u4e00\u4e2a\u65cb\u8f6c\u5230\u6839\u7684\u5de6\u513f\u5b50\u4e0a\uff0c\u5219\u8981\u4fee\u6539\u7684\u533a\u95f4\u5c31\u662f\u6839\u7684\u53f3\u5b69\u5b50\u7684\u5de6\u5b50\u6811\uff0c\u76f4\u63a5\u6253\u6807\u8bb0\u5373\u53ef\n\n\u6ce8\u610f\n1.\u6807\u8bb0\u662f\u5728\u6bcf\u4e00\u6b21\u8bbf\u95ee\u5230\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\u662f\u5c31\u8981pushdown\u7684\n\n2.\u533a\u5206\u4e00\u4e2a\u8282\u70b9\u7684\u6392\u540d\u548c\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\uff1a\u8fd9\u4e2a\u8282\u70b9\u7684\u6392\u540d\u662f\u5b83\u662f\u5f53\u524d\u6570\u7ec4\u4e2d\u7684\u7b2c\u51e0\u4e2a\uff0c\u7528\u5de6\u513f\u5b50\u7684size+1\u8868\u793a\uff1b\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\u662f\u9898\u76ee\u4e2d\u8f93\u5165\u7684\u6570\u5b57\uff0c\u5728\u672c\u9898\u4e2d\u662f1~n\n\n3.\u589e\u52a0\u6570\u5b57\u4e3a1\u548cn+2\u7684\u4e24\u4e2a\u54e8\u5175\u8282\u70b9\uff0c\u56e0\u4e3a\u5982\u679c\u5bf9\u533a\u95f41~x\u6216 x~n\u64cd\u4f5c\uff0c\u7528\u5230\u524d\u540e\u7684\u8282\u70b9\u5c31\u9700\u89811\u548cn+2\u3002\n\n4.\u6ce8\u610fbuild\u7684\u5199\u6cd5\uff0c\u8fd4\u56de\u533a\u95f4[l,r]\u7684\u6839\u8282\u70b9\u7684\u7f16\u53f7\n\n\n\u6709\u7f29\u8fdb\u89c1[\u8fd9\u91cc](http://www.yhzq-blog.cc/bzoj-3223-\u6587\u827a\u5e73\u8861\u6811/)\n\n\n```cpp\n#include <cstdio>\n#define Maxn 100010\n#define INF 0x3f3f3f3f\nusing namespace std;\nint f[Maxn],ch[Maxn][2],siz[Maxn],mark[Maxn],key[Maxn],root,sz;\nint data[Maxn];\nint R() {int x=0,F=1;char C=getchar();while(C<'0'||C>'9'){if(C=='-')F=-F;C=getchar();}while(C>='0'&&C<='9')x=x*10-'0'+C,C=getchar();return x*F;}\ninline int get(int x){return ch[f[x]][1]==x;}\ninline void update(int x){siz[x]=siz[ch[x][1]]+siz[ch[x][0]]+1;}\ninline void swap(int &x,int &y){int t=x;x=y;y=t;}\ninline int pushdown(int x)\n{\n    if (x && mark[x])\n    {\n        mark[ch[x][0]]^=1;\n        mark[ch[x][1]]^=1;\n        swap(ch[x][0],ch[x][1]);\n        mark[x]=0;\n    }\n}\ninline int rot(int x)\n{\n    int k=get(x),fa=f[x],fafa=f[fa];\n    pushdown(fa);pushdown(x);\n    ch[fa][k]=ch[x][!k];f[ch[x][!k]]=fa;\n    ch[x][!k]=fa;f[fa]=x;\n    f[x]=fafa;\n    if (fafa) ch[fafa][ch[fafa][1]==fa]=x;\n    update(fa);update(x);\n}\ninline int splay(int x,int tar)\n{\n    for (int fa;(fa=f[x])!=tar;rot(x))\n        if (f[fa]!=tar)\n            rot(get(fa)==get(x)?fa:x);\n    if (!tar) root=x;\n}\ninline int build(int fa,int l,int r)\n{\n    if (l>r) return 0;\n    int mid=(l+r)>>1;\n    int now=++sz;\n    key[now]=data[mid],f[now]=fa,mark[now]=0;\n    ch[now][0]=build(now,l,mid-1);\n    ch[now][1]=build(now,mid+1,r);\n    update(now);\n    return now;\n}\ninline int findx(int k)\n{\n    int now=root;\n    while(1)\n    {\n        pushdown(now);\n        if (k<=siz[ch[now][0]])\n            now=ch[now][0];\n        else\n        {\n            k-=siz[ch[now][0]]+1;\n            if (!k) return now;\n            now=ch[now][1];\n        }\n    }\n}\ninline void print(int now)\n{\n    pushdown(now);\n    if (ch[now][0]) print(ch[now][0]);\n    if (key[now]!=-INF && key[now]!=INF)\n      printf(\"%d \",key[now]);\n    if (ch[now][1]) print(ch[now][1]);\n}\nmain()\n{\n    int n,m,x,y;\n    scanf(\"%d %d\",&n,&m);\n    for (int i=1;i<=n;i++)\n        data[i+1]=i;\n    data[1]=-INF,data[n+2]=INF;\n    root=build(0,1,n+2);\n    for (int i=1;i<=m;i++)\n    {\n        x=R();\n        y=R();\n        int x1=findx(x),y1=findx(y+2);\n        splay(x1,0);\n        splay(y1,x1);\n        mark[ch[ch[root][1]][0]]^=1;\n    }\n    print(root);\n}\n```",
        "postTime": 1482625482,
        "uid": 17689,
        "name": "\u8fdc\u822a\u4e4b\u66f2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u8bb2\u7684\u66f4\u8be6\u7ec6\uff1ahttp://blog.csdn.net/A_Comme_Amour/article/details/79382104\nSplay\u7684\u533a\u95f4\u7ffb\u8f6c\uff1a\n**\u3010\u5efa\u6811\u64cd\u4f5c\u3011**\n\u6ce8\u610f\u5efa\u6811\u6bcf\u6b21\u8fd4\u56de\u6839\u8282\u70b9\u7684\u7f16\u53f7\n\u533a\u5206\u4e00\u4e2a**\u8282\u70b9\u7684\u6392\u540d**\u548c**\u8fd9\u4e2a\u8282\u70b9\u7684\u503c**\uff1a\u8fd9\u4e2a\u8282\u70b9\u7684\u6392\u540d\u662f\u5b83\u662f\u5f53\u524d\u6570\u7ec4\u4e2d\u7684\u7b2c\u51e0\u4e2a\uff0c\u7528\u5de6\u513f\u5b50\u7684size+1\u8868\u793a\uff1b\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\u662f\u9898\u76ee\u4e2d\u8f93\u5165\u7684\u6570\u5b57\uff0c\u5728\u672c\u9898\u4e2d\u662f1~n\uff1b\n\u589e\u52a0\u6570\u5b57\u4e3a1\u548cn+2\u7684\u4e24\u4e2a\u54e8\u5175\u8282\u70b9\uff0c\u56e0\u4e3a\u5982\u679c\u5bf9\u533a\u95f41~x\u6216 x~n\u64cd\u4f5c\uff0c\u7528\u5230\u524d\u540e\u7684\u8282\u70b9\u5c31\u9700\u89811\u548cn+2\u3002\n\n\u5728**main**\u51fd\u6570\u4e2d\n```\n\tfor (int i=1; i<=n; i++) data[i+1]=i;\n\tdata[1]=-inf; data[n+2]=inf;\n\trt=build_tree(0,1,n+2);\n```\n**build_tree:**\n```\nint build_tree(int fa,int l,int r)\n{\n\tif (l>r) return 0;\n\tint mid=(l+r)>>1;\n\tint now=++sz;\n\tkey[now]=data[mid]; f[now]=fa; tag[now]=0;\n\tch[now][0]=build_tree(now,l,mid-1);\n\tch[now][1]=build_tree(now,mid+1,r);\n\tpushup(now);\n\treturn now;\n}\n```\n**\u3010\u4e0b\u4f20\u6807\u8bb0\u3011**\n\u6bcf\u5230\u4e00\u4e2a\u65b0\u8282\u70b9\u90fd\u8981pushdown\n```\nvoid pushdown(int x)\n{\n\tif (x && tag[x])\n\t{\n\t\ttag[ch[x][0]]^=1;\n\t\ttag[ch[x][1]]^=1;\n\t\tswap(ch[x][0],ch[x][1]);\n\t\ttag[x]=0;\n\t}\n}\n```\n**\u3010splay\u64cd\u4f5c\u3011**\n\u4e0e\u666e\u901a\u7684splay\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u6bd4\u4e0a\u9762\u7684goal\u52a0\u4e86\u4e00\u4e2a\u76ee\u6807goal\u800c\u5df2 \n```\nvoid splay(int x,int goal)//\u6bd4\u4e0a\u9762\u7684goal\u52a0\u4e86\u4e00\u4e2a\u76ee\u6807goal\u800c\u5df2 \n{\n\tfor (int fa; (fa=f[x])!=goal; rotate(x))\n\t\tif (f[fa]!=goal)\n\t\t\trotate((get(x)==get(fa))?fa:x);\n\tif (!goal) rt=x;\n}\n```\n\u6700\u91cd\u8981\u7684\u6765\u4e86\n**\u3010turn\u7ffb\u8f6c\u533a\u95f4\u3011**\n  \u9996\u5148\uff0c\u4e5f\u662f\u6700\u91cd\u8981\u7684\uff0c\u6211\u4eec\u8ba4\u4e3a\u4f38\u5c55\u6811\u4e2d\u5e8f\u904d\u5386\u5373\u662f\u6211\u4eec\u7ef4\u62a4\u7684\u5e8f\u5217\uff01\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u6bd4\u5982\u6709\u6570\u636e\u5728\u6570\u7ec4\u4e2d\u8fd9\u6837\u5b58\u653e\uff1aa[5]={5,4,3,1,2};\u90a3\u4e48\u5b58\u5165\u4f38\u5c55\u6811\u540e\uff0c\u518d\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u5e94\u8be5\u8fd8\u662f\uff1a{5\uff0c4\uff0c3\uff0c1\uff0c2}\u3002\u5373\u4e0b\u6807\u4ece\u5c0f\u5230\u5927\uff0c\u800c\u4e0d\u662f\u91cc\u9762\u7684\u503c\u4ece\u5c0f\u5230\u5927\uff01\u8fd9\u662f\u4e0eSBT\u6811\u6700\u5927\u7684\u4e0d\u540c\uff01\n**\u539f\u7406**\uff1a\u82e5\u8981\u7ffb\u8f6c[l+1, r+1]\uff0c\u5c06r+2 Splay\u5230\u6839\uff0c\u5c06l Splay\u5230 r+2 \u7684\u5de6\u513f\u5b50\uff0c\u7136\u540e[l+1, r+1]\u5c31\u5728\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u4f4d\u7f6e\u4e86\uff0c\u7ed9\u5b83\u6253\u4e0a\u6807\u8bb0\uff08\u7406\u89e3\u662f\u5426\u6709\u8bef\uff1f\uff09\n\n\u6765\u770b\u56fe\u7247\uff1a\n#####step1\n\u5148\u4f7fl\u65cb\u8f6c\u5230\u6839\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180227133817847?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV9Db21tZV9BbW91cg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n#####step2\n\u4f7fr+2\u65cb\u8f6c\u5230\u6839\uff0c\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180227133846184?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV9Db21tZV9BbW91cg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\u7531\u4e8el < r+2,\u6b64\u65f6l\u6210\u4e86r+2\u7684\u5de6\u5b50\u6811\uff0c\u90a3\u4e48r+2\u7684\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u5373\u4e3a\u6240\u6c42\u5f97\u533a\u95f4\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u8fd9\u68f5\u5b50\u6811\u968f\u610f\u64cd\u4f5c\u4e86\uff01\u6bd4\u5982\u5220\u9664\u6574\u4e2a\u533a\u95f4\uff0c\u533a\u95f4\u5185\u7684\u6bcf\u4e2a\u6570\u90fd\u52a0\u4e0ax\uff0c\u533a\u95f4\u7ffb\u8f6c\uff0c\u533a\u95f4\u65cb\u8f6c\u7b49\u3002\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180227133854331?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV9Db21tZV9BbW91cg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n###\u5176\u4ed6\u64cd\u4f5c\nJoin(S1,S2)\uff1a\u5c06\u4e24\u4e2a\u4f38\u5c55\u6811S1\u4e0eS2\u5408\u5e76\u6210\u4e3a\u4e00\u4e2a\u4f38\u5c55\u6811\u3002\u5176\u4e2dS1\u7684\u6240\n\u6709\u5143\u7d20\u90fd\u5c0f\u4e8eS2\u7684\u6240\u6709\u5143\u7d20\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u627e\u5230\u4f38\u5c55\u6811S1 \u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u5143\u7d20x\uff0c\u518d\u901a\u8fc7Splay(x,S1)\u5c06x \u8c03\n\u6574\u5230\u4f38\u5c55\u6811S1 \u7684\u6839\u3002\u7136\u540e\u518d\u5c06S2 \u4f5c\u4e3ax \u8282\u70b9\u7684\u53f3\u5b50\u6811\u3002\u8fd9\u6837\uff0c\u5c31\u5f97\u5230\u4e86\u65b0\u7684\n\u4f38\u5c55\u6811S\u3002\u5982\u56fe\u6240\u793a\n\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](https://images2015.cnblogs.com/blog/804048/201703/804048-20170327182805404-507639980.png)\n\nSplit(x,S)\uff1a\u4ee5x \u4e3a\u754c\uff0c\u5c06\u4f38\u5c55\u6811S \u5206\u79bb\u4e3a\u4e24\u68f5\u4f38\u5c55\u6811S1 \u548cS2\uff0c\u5176\u4e2dS1\n\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u5c0f\u4e8ex\uff0cS2\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u5927\u4e8ex\u3002\n\u9996\u5148\u6267\u884cFind(x,S)\uff0c\u5c06\u5143\u7d20x \u8c03\u6574\u4e3a\u4f38\u5c55\u6811\u7684\u6839\u8282\u70b9\uff0c\u5219x \u7684\u5de6\u5b50\u6811\u5c31\u662f\nS1\uff0c\u800c\u53f3\u5b50\u6811\u4e3aS2\u3002\u5982\u56fe\u6240\u793a\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](https://images2015.cnblogs.com/blog/804048/201703/804048-20170327182824545-225252186.png)\n\nCode\uff1a\n-\n\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\nusing namespace std;\nconst int MAXN=1000007;\nconst int inf=1e9;\n\nint f[MAXN],cnt[MAXN],ch[MAXN][2],size[MAXN],key[MAXN],tag[MAXN],sz,rt;\nint n,m,x,y,data[MAXN];\n\nbool get(int x)\n{\n\treturn ch[f[x]][1]==x;\n}\n\nvoid pushup(int x)\n{\n\tsize[x]=size[ch[x][0]]+size[ch[x][1]]+1;\n}\n\nvoid pushdown(int x)\n{\n\tif (x && tag[x])\n\t{\n\t\ttag[ch[x][0]]^=1;\n\t\ttag[ch[x][1]]^=1;\n\t\tswap(ch[x][0],ch[x][1]);\n\t\ttag[x]=0;\n\t}\n}\n\nvoid rotate(int x)\n{\n\tint old=f[x],oldf=f[old],which=get(x);\n\tpushdown(old); pushdown(x);//\u4e0d\u8981\u5fd8\u8bb0pushdown \n\tch[old][which]=ch[x][which^1]; f[ch[old][which]]=old;\n\tch[x][which^1]=old; f[old]=x;\n\tf[x]=oldf;\n\tif (oldf) ch[oldf][ch[oldf][1]==old]=x;\n\tpushup(old); pushup(x);\n}\n\nvoid splay(int x,int goal)//\u6bd4\u4e0a\u9762\u7684goal\u52a0\u4e86\u4e00\u4e2a\u76ee\u6807goal\u800c\u5df2 \n{\n\tfor (int fa; (fa=f[x])!=goal; rotate(x))\n\t\tif (f[fa]!=goal)\n\t\t\trotate((get(x)==get(fa))?fa:x);\n\tif (!goal) rt=x;\n}\n\nint build_tree(int fa,int l,int r)\n{\n\tif (l>r) return 0;\n\tint mid=(l+r)>>1;\n\tint now=++sz;\n\tkey[now]=data[mid]; f[now]=fa; tag[now]=0;\n\tch[now][0]=build_tree(now,l,mid-1);\n\tch[now][1]=build_tree(now,mid+1,r);\n\tpushup(now);\n\treturn now;\n}\n\nint rnk(int x)//\u8fd9\u91cc\u7684x\u6210\u4e86\u540d\u6b21 \n{\n\tint now=rt;\n\twhile (1)\n\t{\n\t\tpushdown(now);//\u6b21\u5904\u5fd8\u8bb0pushdown \n\t\tif (x<=size[ch[now][0]]) now=ch[now][0];\n\t\telse\n\t\t{\n\t\t\tx-=size[ch[now][0]]+1;\n\t\t\tif (!x) return now;\n\t\t\tnow=ch[now][1];\n\t\t}\n\t}\n}\n\nvoid turn(int l,int r)\n{\n\tl=rnk(l);\n\tr=rnk(r+2);//\u67e5\u8be2\u6392\u540d\uff0c\u7b2c\u51e0\u4e2a\u70b9 \n\tsplay(l,0);//\u5148\u8ba9l\u5360\u4e0b\u6839\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u8ba9r+2\u628a\u4ed6\u6324\u5230\u5de6\u5b50\u6811\u4e0a\u53bb \n\tsplay(r,l);\n\tpushdown(rt);\n\ttag[ch[ch[rt][1]][0]]^=1;//\u6839\u7684\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811 \n}\n\nvoid write(int now)\n{\n\tpushdown(now);\n\tif (ch[now][0]) write(ch[now][0]);\n\tif (key[now]!=-inf && key[now]!=inf) printf(\"%d \",key[now]);\n\tif (key[ch[now][1]]) write(ch[now][1]);\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1; i<=n; i++) data[i+1]=i;\n\tdata[1]=-inf; data[n+2]=inf;\n\trt=build_tree(0,1,n+2);\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tturn(x,y);\n\t}\n\twrite(rt);\n\treturn 0;\n}\n```",
        "postTime": 1519710568,
        "uid": 48036,
        "name": "\u79cb\u65e5\u79c1\u8bed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "## \u5927\u5bb6\u597d\uff0c\u6211\u975e\u5e38\u559c\u6b22\u66b4\u529b\u6570\u636e\u7ed3\u6784\uff0c\u4e8e\u662f\u6211\u5c31\u7528\u5206\u5757\u8fc7\u4e86\u8fd9\u9053\u9898\u3002\r\n\r\n## \u800c\u4e14\u6bd4\u5927\u591a\u6570\u5e73\u8861\u6811\u8dd1\u5f97\u5feb\u3002\r\n\r\n\u8fd9\u4e2a\u9898\u5bf9\u5e8f\u5217\u5206\u5757\u80af\u5b9a\u662f\u4e0d\u53ef\u53d6\u7684\u3002\r\n\r\n\u5757\u72b6\u94fe\u8868\u53c8\u96be\u5199\u53c8\u6162\u3002\r\n\r\n\u6240\u4ee5\u8003\u8651\u5bf9\u65f6\u95f4\u5206\u5757\uff0c\u6839\u53f7\u91cd\u6784\u3002\uff08\u867d\u7136\u5757\u72b6\u94fe\u8868\u597d\u50cf\u7c7b\u4f3c\uff0c\u4f46\u662f\u6211\u7684\u505a\u6cd5\u597d\u5199\u5f97\u591a\uff09\r\n\r\n\u8003\u8651\u539f\u5e8f\u5217\u7ecf\u8fc7\u51e0\u6b21\u7ffb\u8f6c\u4e4b\u540e\u5f97\u5230\u7684\u5e8f\u5217\uff0c**\u662f\u7531\u539f\u5e8f\u5217\u7684\u4e00\u4e9b\u5b50\u533a\u95f4\uff0c\u6b63\u5e8f\u6216\u8005\u9006\u5e8f\u62fc\u6210\u7684**\uff0c\u6bd4\u5982:\r\n\r\n\u539f\u5e8f\u5217\uff1a$[1,2,3,4,5,6,7,8,9,10,11,12]$\r\n\r\n\u7ffb\u8f6c $[5,11]$\uff1a$[1,2,3,4,11,10,9,8,7,6,5,12]$\r\n\r\n\u7ffb\u8f6c $[1,7]$\uff1a$[9,10,11,4,3,2,1,8,7,6,5,12]$\r\n\r\n\u5728\u539f\u5e8f\u5217\u4e0a\u7684\u5b50\u533a\u95f4\u662f $[9,10,11]$\uff0c$[4,3,2,1]$\uff0c$[8,7,6,5]$\uff0c$[12]$\u3002\r\n\r\n\u800c\u4e14\u6709\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u6027\u8d28\u5c31\u662f**\u6bcf\u6b21\u64cd\u4f5c\u6700\u591a\u589e\u52a0\u5e38\u6570\u4e2a\u5b50\u533a\u95f4**\u3002\r\n\r\n\u56e0\u4e3a\u5bf9\u4e8e\u4e0a\u4e2a\u72b6\u6001\u7684\u67d0\u4e2a\u5b50\u533a\u95f4\uff0c\u5982\u679c\u5b83\u548c\u8fd9\u6b21\u7ffb\u8f6c\u7684\u533a\u95f4\u6ca1\u6709\u4ea4\uff0c\u90a3\u4e48\u5b83\u4e0d\u4f1a\u52a8\u3002\r\n\r\n\u5982\u679c\u5b83\u88ab\u8fd9\u6b21\u7ffb\u8f6c\u7684\u533a\u95f4\u5305\u542b\uff0c\u90a3\u4e48\u5b83\u4f1a\u88ab\u7ffb\u8f6c\uff0c\u5e76\u4e14\u6362\u4e2a\u4f4d\u7f6e\uff0c\u6570\u91cf\u4e0d\u4f1a\u589e\u52a0\u3002\r\n\r\n\u5982\u679c\u5b83\u4e0e\u8fd9\u6b21\u7ffb\u8f6c\u7684\u76f8\u4ea4\uff0c\u90a3\u4e48\u5b83\u4f1a\u6700\u591a\u88c2\u5f00\u6210 $3$ \u4e2a\u533a\u95f4\uff08\u5373\u5b83\u5305\u542b\u7ffb\u8f6c\u7684\u533a\u95f4\u7684\u60c5\u51b5\uff0c\u522b\u7684\u60c5\u51b5\u90fd\u4f1a\u88c2\u5f00\u6210\u4e24\u4e2a\uff09\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u533a\u95f4\u88ab\u7ffb\u8f6c\uff0c\u6362\u4f4d\u7f6e\uff0c\u5269\u4e0b\u7684\u533a\u95f4\u4e0d\u52a8\u3002\r\n\r\n\u4e00\u4e2a\u533a\u95f4\u6700\u591a\u4e0e $2$ \u4e2a\u4e0d\u76f8\u4ea4\u7684\u533a\u95f4\u76f8\u4ea4\u4e14\u6ca1\u6709\u5305\u542b\u5173\u7cfb\uff0c\u6240\u4ee5\u6bcf\u6b21\u6700\u591a\u589e\u52a0\u4e24\u4e2a\u533a\u95f4\u3002\r\n\r\n\u56de\u5230\u8fd9\u4e2a\u9898\u4e0a\uff0c\u8003\u8651\u7ef4\u62a4\u6bcf\u4e2a\u5b50\u533a\u95f4\uff0c\u800c\u4e0d\u662f\u539f\u5e8f\u5217\u3002\r\n\r\n\u6bcf\u6b21\u4fee\u6539\u66b4\u529b\u679a\u4e3e\u6240\u6709\u5b50\u533a\u95f4\uff0c\u770b\u4e00\u4e0b\u5b83\u4eec\u4f1a\u53d8\u6210\u4ec0\u4e48\uff0c\u8fd9\u4e2a\u7684\u590d\u6742\u5ea6\u662f $O(\\text{\u533a\u95f4\u4e2a\u6570})$ \u7684\u3002\r\n\r\n\u4f46\u662f\u6bcf\u6b21\u64cd\u4f5c\u540e\u90fd\u6709\u53ef\u80fd\u589e\u52a0\u51e0\u4e2a\u5b50\u533a\u95f4\uff0c\u5230\u540e\u9762\u6bcf\u6b21\u64cd\u4f5c\u5c31\u8d8b\u8fd1 $O(n)$ \u4e86\uff0c\u6240\u4ee5\u8003\u8651**\u6839\u53f7\u91cd\u6784**\u3002\r\n\r\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u65e6\u5f53\u524d\u533a\u95f4\u4e2a\u6570\u8d85\u8fc7\u4e86\u67d0\u4e2a\u9608\u503c $B$\uff0c\u5c31 $O(n)$ \u6c42\u4e00\u4e0b\u5f53\u524d\u7684\u5e8f\u5217\uff0c\u8fd9\u6837\u73b0\u5728\u8fd9\u4e2a\u5e8f\u5217\u5c31\u53c8\u80fd\u7528 $1$ \u4e2a\u533a\u95f4\u8868\u793a\u5566\u3002\r\n\r\n\u6bd4\u5982\uff1a\r\n\r\n$[1,2,3,4,5,6,7,8,9,10,11,12]$\r\n\r\n\u7ffb\u8f6c $[4,10]$\r\n\r\n$[1,2,3],[10,9,8,7,6,5,4],[11,12]$\r\n\r\n\u7ffb\u8f6c $[7,10]$\r\n\r\n$[1,2,3],[10,9,8],[4,5,6,7],[11,12]$\r\n\r\n\u7ffb\u8f6c $[2,11]$\r\n\r\n$[1],[11],[7,6,5,4],[8,9,10],[3,2],[12]$\r\n\r\n\u8fd9\u65f6\u5019\u89c9\u5f97\u533a\u95f4\u6709\u70b9\u591a\uff0c\u91cd\u6784\u4e00\u4e0b\u3002\r\n\r\n$[1,11,7,6,5,4,8,9,10,3,2,12]$\r\n\r\n\u6ce8\u610f\u8fd9\u4e2a\u65f6\u5019\u539f\u5e8f\u5217\u5df2\u7ecf\u6ca1\u5173\u7cfb\u4e86\uff0c\u53ea\u7528\u628a\u5f53\u524d\u5e8f\u5217\u8868\u793a\u6210**\u4e0a\u4e00\u6b21\u91cd\u6784\u65f6\u7684\u4e00\u4e9b\u5b50\u533a\u95f4\uff0c\u6b63\u5e8f\u6216\u9006\u5e8f\u62fc\u6210\u7684\u3002**\r\n\r\n\u7ffb\u8f6c $[3,7]$\r\n\r\n$[1,11],[8,4,5,6,7],[9,10,3,2,12]$\r\n\r\n\r\n\u7ffb\u8f6c $[7,8]$\r\n\r\n$[1,11],[8,4,5,6],[9],[7],[10,3,2,12]$\r\n\r\n\u8fd9\u4e2a\u505a\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(mB+\\frac{m}{B}n)$ \u7684\uff08\u56e0\u4e3a\u6bcf\u6b21\u64cd\u4f5c\u8981\u904d\u5386 $O(B)$ \u4e2a\u533a\u95f4\uff0c\u6bcf $B$ \u4e2a\u8be2\u95ee\u8981 $O(n)$ \u6c42\u4e00\u8fb9\u5f53\u524d\u5e8f\u5217\uff09\r\n\r\n\u53d6 $B=\\sqrt{n}$ \u65f6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8fbe\u5230 $O(m\\sqrt n)$\uff0c\u800c\u4e14\u5e38\u6570\u975e\u5e38\u5c0f\uff0c\u5b9e\u6d4b $B\\in [200,800]$ \u7684\u65f6\u5019\u8dd1\u7684\u901f\u5ea6\u90fd\u5dee\u4e0d\u591a\u3002\r\n\r\n\u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\u9700\u8981\u8bb0\u4e00\u4e0b\u6bcf\u4e2a\u5b50\u533a\u95f4\u5728\u5f53\u524d\u5e8f\u5217\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u5b83\u4eec\u5728\u4e0a\u4e00\u6b21\u91cd\u6784\u65f6\u7684\u4f4d\u7f6e\uff0c\u8fd8\u6709\u662f\u5426\u88ab\u53d6\u53cd\u3002\r\n\r\n\u5206\u88c2\u5b50\u533a\u95f4\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u52a0\u5230\u540e\u9762\u3002\r\n\r\n\u91cd\u6784\u7684\u65f6\u5019\u76f4\u63a5\u628a\u6240\u6709\u533a\u95f4\u90fd\u5220\u4e86\uff0c\u6362\u6210 $[1,n]$\u3002\r\n\r\n### \u4ee3\u7801\uff08\u8fd8\u633a\u597d\u5199\u7684\uff09\uff1a\r\n\r\n```cpp\r\n#include <iostream>\r\nusing namespace std;\r\nconst int bl=400;//\u9608\u503c\u5927\u5c0f\r\nint a[100005],b[100005],cnt,n,q;//cnt\u8868\u793a\u5b50\u533a\u95f4\u4e2a\u6570\r\nstruct node{//\u5b50\u533a\u95f4\r\n\tint l1,l2,r2,f;//l1\u662f\u539f\u5e8f\u5217\u4e0a\u5de6\u7aef\u70b9\u7684\u4f4d\u7f6e\uff0c\r\n\t//l2,r2\u662f\u73b0\u5e8f\u5217\u4e0a\u7684\u4f4d\u7f6e\uff0cf\u662f\u662f\u5426\u7ffb\u8f6c\uff0c\u7531\u4e8er1-l1\u4e00\u5b9a=r2-l2\uff0c\u6240\u4ee5r1\u5c31\u4e0d\u8bb0\u4e86\r\n}s[405];\r\ninline void rev(int l,int r){//\u7ffb\u8f6c\u533a\u95f4 [l,r]\r\n\tfor(int i=1;i<=cnt;i++){//\u904d\u5386\u6240\u6709\u5b50\u533a\u95f4\r\n\t\tif(s[i].r2<l||s[i].l2>r) continue;//\u6ca1\u6709\u4ea4\u76f4\u63a5\u8df3\u8fc7\r\n\t\tif(l>s[i].l2){//\u53f3\u8fb9\u76f8\u4ea4\uff0c\u8981\u5206\u88c2\r\n\t\t\tif(!s[i].f) s[++cnt]={l-s[i].l2+s[i].l1,l,s[i].r2,0},s[i]={s[i].l1,s[i].l2,l-1,0};\r\n\t\t\telse s[++cnt]={s[i].l1,l,s[i].r2,1},s[i]={s[i].l1+s[i].r2-l+1,s[i].l2,l-1,1};\r\n\t\t\t//\u8ba1\u7b97\u5206\u88c2\u5b8c\u7684\u4e24\u4e2a\u533a\u95f4\u7684\u4fe1\u606f\r\n\t\t}\r\n\t\tif(r<s[i].r2){//\u5de6\u8fb9\u76f8\u4ea4\uff0c\u540c\u7406\uff0c\u4ee3\u7801\u4e0a\u53ea\u662f\u628al\u6362\u6210\u4e86r+1\r\n\t\t\tif(!s[i].f) s[++cnt]={r+1-s[i].l2+s[i].l1,r+1,s[i].r2,0},s[i]={s[i].l1,s[i].l2,r+1-1,0};\r\n\t\t\telse s[++cnt]={s[i].l1,r+1,s[i].r2,1},s[i]={s[i].l1+s[i].r2-r,s[i].l2,r,1};\r\n\t\t}\r\n\t\tif(s[i].r2<l||s[i].l2>r) continue;//\u5206\u88c2\u5b8c\u4e0d\u76f8\u4ea4\r\n\t\ts[i].l2=r-s[i].l2+l,s[i].r2=r-s[i].r2+l,swap(s[i].l2,s[i].r2),s[i].f^=1;\r\n\t\t//\u8ba1\u7b97\u7ffb\u8f6c\u540e\u533a\u95f4\u7684\u4fe1\u606f\r\n\t}\r\n}\r\ninline void qwq(){//\u91cd\u6784\r\n\tfor(int i=1;i<=cnt;i++){//\u628a\u6bcf\u4e2a\u533a\u95f4\u7684\u503c\u66b4\u529b\u8d4b\u8fc7\u53bb\r\n\t\tif(s[i].f) for(int j=s[i].r2;j>=s[i].l2;j--) b[j]=a[s[i].l1++];\r\n\t\telse for(int j=s[i].l2;j<=s[i].r2;j++) b[j]=a[s[i].l1++];\r\n\t}\r\n\tcnt=1,s[cnt]={1,1,n,0},swap(a,b);//\u5220\u6389\u539f\u6765\u6240\u6709\u533a\u95f4\r\n}\r\nint main(int argc, char** argv) {\r\n\tscanf(\"%d%d\",&n,&q);\r\n\tfor(int i=1;i<=n;i++) a[i]=i;\r\n\ts[++cnt]={1,1,n,0};//\u4e00\u5f00\u59cb\u53ea\u6709\u6574\u4e2a\u4e00\u4e2a\u533a\u95f4\r\n\twhile(q--){\r\n    \tint l,r;\r\n\t\tscanf(\"%d%d\",&l,&r),rev(l,r);\r\n\t\tif(cnt>bl) qwq();//\u5982\u679c\u533a\u95f4\u6570\u5927\u4e8e\u9608\u503c\uff0c\u5c31\u91cd\u6784\r\n\t}\r\n\tqwq();//\u7b97\u6700\u7ec8\u7684\u7b54\u6848\uff0c\u76f8\u5f53\u4e8e\u4e00\u6b21\u91cd\u6784\r\n\tfor(int i=1;i<=n;i++) printf(\"%d \",a[i]);\r\n\treturn 0;\r\n}\r\n```\r\n\r\n\u6709\u8bc4\u8bba\u7684\u8bdd\u6211\u53ef\u80fd\u534a\u5e74\u4e4b\u5185\u56de\u4e0d\u4e86\uff0c\u56e0\u4e3a\u88ab\u7981\u8a00\u4e86/cy\r\n\r\n\u6709\u4ec0\u4e48 bug \u6216\u8005\u5047\u4e86\u6216\u8005\u88ab\u8e29\u4e86\u79c1\u4fe1\u8054\u7cfb\u6211\r\n\r\n\u6c42\u8fc7\u5ba1",
        "postTime": 1601734684,
        "uid": 101734,
        "name": "\u8fdd\u89c4\u7528\u6237\u540d76G!ihcm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3391\u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u666e\u901a\u5e73\u8861\u6811\u5b9e\u73b0\u7684\u5404\u79cd\u64cd\u4f5c\u90fd\u662f\u57fa\u4e8e\u5927\u5c0f\u5173\u7cfb\uff0c\u56de\u60f3\u4e00\u4e0b\uff0c\u5b83\u4e4b\u6240\u4ee5\u80fd\u5b9e\u73b0\u90a3\u4e48\u591a\u64cd\u4f5c\uff0c\u6700\u672c\u8d28\u7684\u539f\u56e0\u662f\u5b83\u5de7\u5999\u5730\u4f9d\u636e\u5143\u7d20\u7684\u5927\u5c0f\u5173\u7cfb\u5efa\u6811\uff0c\u5c0f\u7684\u5143\u7d20\u653e\u5728\u5de6\u5b50\u6811\uff0c\u5927\u7684\u5143\u7d20\u653e\u5728\u53f3\u5b50\u6811\uff0c\u8fd9\u6837\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u5c31\u6070\u6070\u662f\u4e00\u4e2a\u9012\u589e\u5e8f\u5217\u3002\u800c\u8fd9\u9898\u8981\u5b9e\u73b0\u7684\u53d8\u6210\u4e86\u5bf9\u7ed9\u5b9a\u5e8f\u5217\u7684\u82e5\u5e72\u4e2a\u533a\u95f4\u8fdb\u884c\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u800c\u7ffb\u8f6c\u64cd\u4f5c\u5b9e\u9645\u4e0a\u6539\u53d8\u7684\u662f**\u524d\u540e\u5173\u7cfb**\u3002\u8fd9\u5c31\u542f\u53d1\u6211\u4eec\u5bf9\u666e\u901a\u5e73\u8861\u6811\u505a\u4e00\u4e9b\u4fee\u6539\uff0c\u6539\u4e3a**\u4f9d\u9760\u5143\u7d20\u7684\u524d\u540e\u5173\u7cfb\u5efa\u6811\uff0c\u9760\u524d\u7684\u5143\u7d20\u5728\u5de6\u5b50\u6811\uff0c\u9760\u540e\u7684\u5143\u7d20\u5728\u53f3\u5b50\u6811**\uff0c\u7136\u540e\u5728\u8fdb\u884c\u533a\u95f4\u7ffb\u8f6c\u65f6\u7ef4\u62a4\u8fd9\u4e00\u6027\u8d28\uff0c\u90a3\u4e48\u6700\u540e\u5f97\u5230\u7684\u4e2d\u5e8f\u904d\u5386\u5c31\u662f\u6574\u4e2a\u5e8f\u5217\u7ecf\u8fc7\u82e5\u5e72\u6b21\u533a\u95f4\u7ffb\u8f6c\u64cd\u4f5c\u540e\u7684\u7ed3\u679c\u3002\n\n\u8fd9\u6837\u505a\u7684\u96be\u70b9\u5c31\u5728\u4e8e\u5982\u4f55\u5728\u8fdb\u884c\u533a\u95f4\u7ffb\u8f6c\u65f6\u7ef4\u62a4\u6574\u68f5\u6811\u7684\u6027\u8d28\u4e0d\u53d8\u3002\u6211\u4eec\u5148\u4ece\u6700\u7279\u6b8a\u7684\u60c5\u51b5\u60f3\u8d77\uff0c\u5982\u679c\u8bf4\u6574\u68f5\u6811\u7684\u9ad8\u5ea6\u4e3a $2$\uff0c\u6bd4\u5982\u53ea\u6709 $3$ \u4e2a\u7ed3\u70b9\uff1a\u6839\u3001\u5de6\u513f\u5b50\u3001\u53f3\u513f\u5b50\uff0c\u90a3\u4e48\u7ffb\u8f6c\u6574\u4e2a\u533a\u95f4\u663e\u7136\u76f8\u5f53\u4e8e\u628a\u6839\u7ed3\u70b9\u7684\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u4e92\u6362\u3002\u5982\u679c\u9ad8\u5ea6\u5927\u4e8e $2$\uff0c\u6211\u4eec\u53ea\u9700\u8981**\u81ea\u4e0a\u800c\u4e0b\u5730\u628a\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u4e92\u6362**\u3002\u8bc1\u660e\u5982\u4e0b\uff1a\n\n\u8bbe\u6574\u68f5\u6811\u7684\u6df1\u5ea6\u4e3a $n$\uff0c\u5df2\u77e5\u5f53 $n=2$ \u65f6\u7ed3\u8bba\u6210\u7acb\uff0c\u6c42\u8bc1\uff1a\u5047\u8bbe $n=k-1$ \u65f6\u7ed3\u8bba\u6210\u7acb\uff0c\u5219 $n=k$ \u65f6\u7ed3\u8bba\u4e5f\u6210\u7acb\u3002\u8bbe\u8be5\u6811\u7684\u9ad8\u5ea6\u4e3a $k$\uff0c\u6839\u7ed3\u70b9\u4e3a $b$\uff0c\u5de6\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u4e3a $A$\uff0c\u53f3\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u4e3a $C$\uff0c\u90a3\u4e48\u4e92\u6362\u524d\u7684\u4e2d\u5e8f\u904d\u5386\u5c31\u662f $AbC$\uff0c\u4e92\u6362\u540e\u662f $C'bA'$\uff0c\u7531\u4e8e $n=k-1$ \u65f6\u7ed3\u8bba\u6210\u7acb\uff0c\u56e0\u6b64 $C'$ \u662f $C$ \u7ffb\u8f6c\u7684\u7ed3\u679c\uff0c$B'$ \u662f $B$ \u7ffb\u8f6c\u7684\u7ed3\u679c\uff0c\u6545 $C'bA'$ \u662f $AbC$ \u7ffb\u8f6c\u7684\u7ed3\u679c\uff0c\u7ed3\u8bba\u5f97\u8bc1\u3002\n\n\u56e0\u6b64\u5bf9\u6574\u4e2a\u5e8f\u5217\u505a\u7ffb\u8f6c\u5c31\u76f8\u5f53\u4e8e\u81ea\u4e0a\u800c\u4e0b\u5730\u628a\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u4e92\u6362\u3002\u4f46\u5982\u679c\u662f\u5bf9\u533a\u95f4 $[l,r]$ \u505a\u7ffb\u8f6c\u5462\uff1f\u6211\u4eec\u8be5\u5982\u4f55\u4f7f\u8fd9\u6bb5\u533a\u95f4\u6070\u597d\u5bf9\u5e94\u7740\u4e00\u68f5\u5b8c\u6574\u7684\u5b50\u6811\uff1f\u8fd9\u91cc Splay \u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981**\u5c06\u5e8f\u5217\u91cc\u7684\u7b2c $l-1$ \u4e2a\u5143\u7d20\u65cb\u8f6c\u5230\u6839\u7ed3\u70b9\uff0c\u628a\u7b2c $r+1$ \u4e2a\u5143\u7d20\u65cb\u8f6c\u5230\u6839\u7ed3\u70b9\u7684\u53f3\u513f\u5b50\u5904**\uff0c\u7531\u4e8e\u6211\u4eec\u662f\u6309\u7167\u524d\u540e\u5173\u7cfb\u5efa\u6811\u7684\uff0c\u5e76\u4e14 $[l,r]$ \u8fd9\u6bb5\u533a\u95f4\u7684\u5143\u7d20\u90fd\u5728 $a_{l-1}$ \u7684\u540e\u9762\u3001$a_{r+1}$ \u7684\u524d\u9762\uff0c\u6240\u4ee5\u5728\u65cb\u8f6c\u7ed3\u675f\u540e**\u6839\u7ed3\u70b9\u7684\u53f3\u513f\u5b50\u7684\u5de6\u5b50\u6811\u5c31\u6070\u597d\u5bf9\u5e94\u7740 $[l,r]$ \u8fd9\u6bb5\u533a\u95f4**\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684 Splay \u63d0\u53d6\u533a\u95f4\uff08\u4e8b\u5b9e\u4e0a\u666e\u901a\u5e73\u8861\u6811\u7684\u5220\u9664\u64cd\u4f5c\u5c31\u662f\u63d0\u53d6\u533a\u95f4\u7684\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\uff09\u3002\u90a3\u7ffb\u8f6c\u533a\u95f4 $[l,r]$ \u5c31\u76f8\u5f53\u4e8e\u5bf9\u8fd9\u68f5\u5b50\u6811\u81ea\u4e0a\u800c\u4e0b\u5730\u8fdb\u884c\u4e92\u6362\u64cd\u4f5c\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u627e\u5230\u7b2c $l-1$ \u548c\u7b2c $r+1$ \u4e2a\u5143\u7d20\uff0c\u8fd9\u76f8\u5f53\u4e8e\u67e5\u627e\u7b2c $k$ \u524d\u7684\u5143\u7d20\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u4e2d\u5e8f\u904d\u5386\u4e0a\u6392\u7b2c $k$ \u7684\u5143\u7d20\uff0c\u76f4\u63a5\u5957\u7528 splay \u7684\u67e5\u627e\u7b2c $k$ \u5c0f\u7684\u51fd\u6570\u5373\u53ef \u3002\u8fd8\u6709\u4e00\u70b9\u8981\u6ce8\u610f\uff0c\u5c31\u662f\u5f53 $l=1$ \u6216 $r=n$ \u65f6\u7b2c $l-1$ \u6216\u7b2c $r+1$ \u4e2a\u5143\u7d20\u4f1a\u4e0d\u5b58\u5728\uff0c\u4e3a\u4e86\u9632\u7206\uff0c\u6211\u4eec\u9700\u8981\u4e8b\u5148\u628a\u6b63\u65e0\u7a77\u548c\u8d1f\u65e0\u7a77\u63d2\u5165\u6811\u4e2d\u3002\n\n\u4e0d\u8fc7\uff0c\u5982\u679c\u4f60\u6bcf\u6b21\u90fd\u628a\u8981\u8fdb\u884c\u4e92\u6362\u64cd\u4f5c\u7684\u5b50\u6811\u76f4\u63a5\u4ece\u5934\u5230\u5c3e\u4e92\u6362\u4e00\u904d\uff0c\u90a3\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u7206\u70b8\u3002\u8fd9\u91cc\u6211\u4eec\u8981\u501f\u9274\u4e00\u4e0b\u7ebf\u6bb5\u6811\u7684 lazy tag \u601d\u60f3\uff0c\u7ed9\u6bcf\u4e2a\u7ed3\u70b9\u6253\u4e00\u4e2a\u61d2\u6807\u8bb0\u8868\u793a\u4ee5\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u88ab\u4e92\u6362\u4e86\u591a\u5c11\u6b21\u3002\u5982\u679c\u6211\u7528\u4e0d\u5230\u5b83\u7684\u5b50\u7ed3\u70b9\uff0c\u90a3\u5b83\u7684\u61d2\u6807\u8bb0\u5c31\u5728\u90a3\u653e\u7740\uff0c\u7b49\u5230\u6211\u7528\u5230\u5b83\u7684\u5b50\u7ed3\u70b9\u65f6\u518d\u628a\u6807\u8bb0\u4e0b\u653e\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u5bf9\u4e00\u9897\u5b50\u6811\u4e92\u6362\u4e24\u6b21\u7b49\u4e8e\u4e0d\u4e92\u6362\uff0c\u56e0\u6b64\u61d2\u6807\u8bb0\u53ea\u9700\u8981\u8bb0\u5f55 $0/1$ \u503c\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u70b9\u4e2a\u8d5e\u518d\u8d70\u5427QAQ\uff0c\u8c22\u8c22\u60a8\uff01\uff09\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#define ll long long\n#define fo(i,x,y) for(register int i=x;i<=y;++i)\n#define go(i,x,y) for(register int i=x;i>=y;--i)\nusing namespace std;\ninline int read(){ int x=0,fh=1; char ch=getchar(); while(!isdigit(ch)){ if(ch=='-') fh=-1; ch=getchar(); } while(isdigit(ch)){ x=(x<<1)+(x<<3)+ch-'0'; ch=getchar(); } return x*fh; }\n\nconst int N=1e5+5,inf=1e9;\nint data[N],ch[N][2],fa[N],siz[N],root,tag[N],tot,a[N],cnt[N];\n\ninline int son(int &x){return x==ch[fa[x]][1];}\ninline void push_up(int &x){siz[x]=siz[ch[x][0]]+siz[ch[x][1]]+cnt[x];}\n\ninline void push_down(int x){//\u628ax\u7684\u61d2\u6807\u8bb0\u4e0b\u653e\u5230\u5b83\u7684\u4e24\u4e2a\u513f\u5b50 \n\tif(tag[x]==0) return;\n\tint lt=ch[x][0],rt=ch[x][1];\n\ttag[lt]^=tag[x];\n\tswap(ch[lt][0],ch[lt][1]);\n\ttag[rt]^=tag[x];\n\tswap(ch[rt][0],ch[rt][1]);\n\ttag[x]=0;\n}\n\ninline void rotate(int x){//rotate\u51fd\u6570 \n\tint y=fa[x],z=fa[y],sx=son(x),sy=son(y),b=ch[x][!sx];\n\tpush_down(y);push_down(x);\n\t//\u6ce8\u610f\uff0crotate\u51fd\u6570\u4f1a\u6539\u53d8\u4ee5y\u4e3a\u6839\u548c\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u7684\u7ed3\u6784\uff0c\u56e0\u6b64\u8981\u5728\u65cb\u8f6c\u4e4b\u524d\u5148\u628a\u5b83\u4eec\u7684\u61d2\u6807\u8bb0\u4e0b\u653e\n\t//\u5176\u4f59\u7684\u4e0esplay\u6a21\u677f\u4e00\u81f4 \n\tif(z) ch[z][sy]=x; else root=x;fa[x]=z;\n\tch[x][!sx]=y;fa[y]=x;\n\tch[y][sx]=b;if(b) fa[b]=y;\n\tpush_up(y);push_up(x);\n}\n\ninline void splay(int x,int aim){//splay\u51fd\u6570\uff0c\u4e0e\u6a21\u677f\u65e0\u5f02 \n\twhile(fa[x]!=aim){\n\t\tint y=fa[x],z=fa[y];\n\t\tif(z==aim) rotate(x);\n\t\telse if(son(x)^son(y)) rotate(x),rotate(x);\n\t\telse rotate(y),rotate(x);\n\t}\n}\n\ninline int get_kth(int k){//\u67e5\u627e\u7b2ck\u524d\u7684\u51fd\u6570\uff0c\u4e0e\u6a21\u677f\u65e0\u5f02 \n\tk--;\n\tint now=root;\n\twhile(now){\n\t\tif(siz[ch[now][0]]>k) push_down(now),now=ch[now][0];\n\t\telse if(siz[ch[now][0]]+cnt[now]>k) return now;\n\t\telse k-=siz[ch[now][0]]+cnt[now],push_down(now),now=ch[now][1];\n\t}\n}\n\ninline void reverse(int L,int R){//\u7ffb\u8f6c[L,R]\u8fd9\u6bb5\u533a\u95f4 \n\tint p1=get_kth(L),p2=get_kth(R+2);\n\t//printf(\"reverse(%d,%d)\\n\",L,R);\n\t//printf(\"p1=%d p2=%d\\n\",p1,p2);\n\tsplay(p1,0);splay(p2,root);//splay\u63d0\u53d6\u533a\u95f4 \n\tint p3=ch[p2][0];\n\ttag[p3]^=1;//\u6253\u6807\u8bb0 \n\tswap(ch[p3][0],ch[p3][1]);\n}\n\nint build(int L,int R){//\u6839\u636e\u521d\u59cb\u7684\u5e8f\u5217\u5efa\u6811 \n\tif(L>R) return 0;\n\t//printf(\"build(%d,%d)\\n\",L,R);\n\tint mid=(L+R)>>1,now=a[mid];\n\tif(now==-inf||now==inf) now=++tot;\n\tdata[now]=a[mid];\n\tcnt[now]=siz[now]=1;\n\tif(L==R) return now;\n\tint lt=build(L,mid-1);\n\tch[now][0]=lt;fa[lt]=now;\n\tint rt=build(mid+1,R);\n\tch[now][1]=rt;fa[rt]=now;\n\tpush_up(now);\n\treturn now;\n}\n\nvoid get_ans(int now){//\u8f93\u51fa\u4e2d\u5e8f\u904d\u5386 \n\tpush_down(now);\n\tif(ch[now][0]) get_ans(ch[now][0]);\n\tif(data[now]!=-inf&&data[now]!=inf) printf(\"%d \",data[now]);\n\tif(ch[now][1]) get_ans(ch[now][1]);\n}\n\nint main(){\n\tint n=read(),m=read();\n\ta[1]=-inf;a[n+2]=inf;//\u4e3a\u4e86\u9632\u7206\uff0c\u63d0\u53d6\u5c06\u8d1f\u65e0\u7a77\u548c\u6b63\u65e0\u7a77\u63d2\u5165\u6811\u4e2d \n\tfo(i,2,n+1) a[i]=i-1;\n\ttot=n;\n\troot=build(1,n+2);\n\tfo(i,1,m){\n\t\t//printf(\"root=%d\\n\",root);\n\t\t//fo(j,1,tot) printf(\"%d:data=%d,fa=%d,ch0=%d,ch1=%d,siz=%d,tag=%d\\n\",j,data[j],fa[j],ch[j][0],ch[j][1],siz[j],tag[j]);\n\t\tint l=read(),r=read();\n\t\treverse(l,r);\n\t} \n\t//printf(\"root=%d\\n\",root);\n\t//fo(j,1,tot) printf(\"%d:data=%d,fa=%d,ch0=%d,ch1=%d,siz=%d,tag=%d\\n\",j,data[j],fa[j],ch[j][0],ch[j][1],siz[j],tag[j]);\n\tget_ans(root);\n\treturn 0;\n}\n/*\n-------------------------------------------------\n*/\n```\n",
        "postTime": 1611306273,
        "uid": 238408,
        "name": "vectorwyx",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "## fhq-treap\n\n\u7531\u4e8e\u8fd9\u9898\u662f\u8981\u6c42\u7ef4\u62a4\u5e8f\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u7528 fhq-treap \u7ef4\u62a4\u4e0b\u6807\uff0c\n\n\u800c\u533a\u95f4\u7ffb\u8f6c\u64cd\u4f5c\u6211\u4eec\u53ef\u4ee5\u7528\u7ffb\u8f6c\u6807\u8bb0\u6765\u89e3\u51b3\uff0c\u4e5f\u5c31\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u8bb0\u5f55\u4e00\u4e2a\u6807\u8bb0\u8868\u793a\u5b83\u6240\u7ef4\u62a4\u7684\u533a\u95f4\u662f\u5426\u88ab\u6574\u4f53\u7ffb\u8f6c\u4e86\uff0c\u800c\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u88ab\u6574\u4f53\u7ffb\u8f6c\n\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u524d\u9762\u7684\u6240\u6709\u6570\u90fd\u5230\u4e86\u540e\u8fb9\uff0c\u540e\u8fb9\u7684\u6240\u6709\u6570\u90fd\u5230\u4e86\u524d\u9762\uff0c\n\n\u4e3e\u4f8b\uff0c\u5982\u679c\u6211\u4eec\u7ef4\u62a4\u7684\u5e8f\u5217\u662f\u8fd9\u6837\u7684$\\{ a_4,a_2,a_1,a_5,a_3,a_6\\}$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/c2blydwi.png)\n\n\u6211\u4eec\u9700\u8981\u628a$\\{a_2,a_4\\}$\u653e\u5230$a_1$\u7684\u540e\u9762\uff0c$\\{a_3,a_5,a_6\\}$\u653e\u5230$a_1$\u7684\u524d\u9762\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4ea4\u6362$a_1$\u7684\u4e24\u4e2a\u513f\u5b50\n![](https://cdn.luogu.com.cn/upload/image_hosting/kzqy2ewi.png)\n\n\u4f46\u6211\u4eec\u53d1\u73b0$a_3,a_2$\u6240\u5bf9\u5e94\u7684\u5b50\u6811\u8fd8\u662f\u53cd\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6807\u8bb0\u4e0b\u4f20\uff0c\u5bf9\u5b83\u4eec\u6267\u884c\u540c\u6837\u7684\u64cd\u4f5c\uff0c\u5f97\u5230\u6700\u7ec8\u7ed3\u679c$\\{a_6,a_3,a_5,a_1,a_2,a_4\\}$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/qx208d5m.png)\n\n\u800c\u7531\u4e8e\u8fd9\u9053\u9898\u662f\u533a\u95f4\u7ffb\u8f6c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u8fd9\u6bb5\u533a\u95f4\u5206\u88c2\u5f00\uff0c\u6253\u5b8c\u6807\u8bb0\u4e4b\u540e\u518d\u5408\u5e76\u56de\u53bb\u5373\u53ef\u3002\n\n\u6700\u540e\u8f93\u51fa\u6574\u9897\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5373\u53ef\u3002\n\n__code__:\n```cpp\n//\n// Created by swift on 2020/7/21.\n//\n\n\n#include<bits/stdc++.h>\nusing namespace std;\n#define inf 10000000\nstruct fhq_treap{\n    struct fhq{\n        int son[2];\n        int rnd,val,siz;\n        int tag;\n    }a[200000];\n    int tot,root;\n    void upd(int x){\n        a[x].siz=a[a[x].son[0]].siz+a[a[x].son[1]].siz+1;\n    }\n    int New(int x){\n        a[++tot].rnd=rand();\n        a[tot].val=x;\n        a[tot].siz=1;\n        return tot;\n    }\n    int mem(int x,int y){\n        if(!x||!y){\n            return x|y;\n        }\n        if(a[x].rnd<a[y].rnd){\n            pushdown(x);\n            a[x].son[1]=mem(a[x].son[1],y);\n            upd(x);\n            return x;\n        }\n        else{\n            pushdown(y);\n            a[y].son[0]=mem(x,a[y].son[0]);\n            upd(y);\n            return y;\n        }\n    }\n    void spl(int now,int k,int &x,int &y){\n        if(!now){\n            x=0;\n            y=0;\n            return;\n        }\n        pushdown(now);\n        if(k>a[a[now].son[0]].siz){\n            x=now;\n            spl(a[now].son[1],k-a[a[now].son[0]].siz-1,a[now].son[1],y);\n        }\n        else{\n            y=now;\n            spl(a[now].son[0],k,x,a[now].son[0]);\n        }\n        upd(now);\n    }\n    void pushdown(int now){\n        if(!now)return;\n        if(!a[now].tag)return;\n        if(a[now].son[0])\n            a[a[now].son[0]].tag^=1;\n        if(a[now].son[1])\n            a[a[now].son[1]].tag^=1;//\u4e0b\u653e\u6807\u8bb0\n        swap(a[now].son[0],a[now].son[1]);//\u4ea4\u6362\u513f\u5b50\n        a[now].tag=0;\n    }\n    void ins(int t){\n        int x,y;\n        spl(root,t,x,y);\n        root=mem(mem(x,New(t)),y);\n    }\n    void print(int now=-1){\n        if(now==-1)now=root;\n        pushdown(now);\n        if(a[now].son[0])print(a[now].son[0]);\n        if(a[now].son[1])print(a[now].son[1]);\n    }//\u4e2d\u5e8f\u904d\u5386\n    void rev(int l,int r){\n        int A,B,C;\n        spl(root,l-1,A,B);\n        spl(B,r-l+1,B,C);\n        a[B].tag^=1;//\u7531\u4e8e\u591a\u6b21\u7ffb\u8f6c\u5c31\u76f8\u5f53\u4e8e\u6ca1\u7ffb\u8f6c\uff0c\u6240\u4ee5\u76f4\u63a5\u5f02\u6216\u5373\u53ef\n        root=mem(mem(A,B),C);\n    }\n};\nfhq_treap treap;\nint n,m;\nint ans=0;\nsigned main(){\n    srand(time(0));\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++){\n        //treap.ins(i);\n        treap.root=treap.mem(treap.root,treap.New(i));\n    }\n    for(int i=1;i<=m;i++){\n        int l,r;\n        scanf(\"%d%d\",&l,&r);\n        treap.rev(l,r);\n    }\n    treap.print();\n    return 0;\n}\n```",
        "postTime": 1606465215,
        "uid": 350415,
        "name": "swiftqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "# \u601d\u8def\n\n\u4f7f\u7528 FHQTreap \u8bb0\u5f55\u6807\u8bb0\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7528 FHQTreap \u8fdb\u884c\u533a\u95f4\u4fee\u6539\uff0c\u6807\u8bb0\u4e0b\u653e\u3002\n\n---\n\n# \u524d\u7f6e\u77e5\u8bc6\n\n- ## FHQTreap\n\n### \u4ec0\u4e48\u662fFHQtreap\n\nFHQTreap\uff0c\u53c8\u79f0\u975e\u65cb\u5e73\u8861\u6811 ~~\u6216\u8005\u8303\u6d69\u5f3a\u5e73\u8861\u6811~~ \uff0c\u662f\u4f7f\u7528\u6811 **\u5206\u88c2** \u4e0e **\u5408\u5e76**\uff0c\u652f\u6301\u57fa\u672c\u5e73\u8861\u6811\u7684\u6240\u6709\u64cd\u4f5c\u548c**\u533a\u95f4\u5e8f\u5217**\u95ee\u9898\u3002\n\u5982\u679c\u60a8\u60f3\u66f4\u6df1\u5c42\u6b21\u5730\u5b66\u4e60\uff0c\u53ef\u4ee5\u7814\u7a76[\u8fd9\u7bc7\u535a\u5ba2](https://www.luogu.com.cn/blog/85514/fhq-treap-xue-xi-bi-ji)\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u8fd8\u662f\u8bb2\u7684\u5f88\u597d\u7684\u3002\u8fd9\u91cc\u53ea\u662f\u521d\u6b65\u4ecb\u7ecd\u4e00\u4e0b\uff0c\u5bf9\u6b63\u786e\u6027\u4e0d\u52a0\u8bc1\u660e\u3002\n\n### \u6240\u9700\u53d8\u91cf\n\n```cpp\n#define lc tree[i].l\n#define rc tree[i].r\n```\n\u5b8f\u5b9a\u4e49\uff0c\u6211\u5f88\u61d2\u3002\n\n```cpp\nint root,cnt;\nint l,r;//pop\u64cd\u4f5c\u5c06\u7528\u5230\nstruct FHQtree{\n\tint l,r;\n\tint size,key;\n\tint val;\n}tree[MAXN*4];\n```\n\n### \u66f4\u65b0\u64cd\u4f5c\u2014\u2014update\n\n\u548c\u7ebf\u6bb5\u6811\u76f8\u4f3c\uff0c `update` \u64cd\u4f5c\u66f4\u65b0\u4e86\u6bcf\u4e2a\u8282\u70b9\u7531\u5b83\u5b50\u8282\u70b9\u7684\u5927\u5c0f\uff0c\u4e0d\u8fc7\uff0c\u7ebf\u6bb5\u6811\u4e3b\u8981\u7ef4\u62a4\u7684\u662f\u6743\u503c\uff0c\u800c Treap \u7ef4\u62a4\u7684\u662f\u8282\u70b9\u513f\u5b50\u6570\u3002\n\n```cpp\nvoid update(int i){\n\ttree[i].size=tree[lc].size+tree[rc].size+1;\n}\n```\n\n### \u6dfb\u52a0\u8282\u70b9\u2014\u2014add\n\n`add` \u5c31\u662f\u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\u7684\u8fc7\u7a0b\uff0c\u7ed9\u8282\u70b9\u8d4b\u503c\u4e0e\u968f\u673a\u5316\u6392\u5e8f\u3002\n\n```cpp\nint add(int i){\n\ttree[++cnt].val=i;\n\ttree[cnt].key=rand();\n\ttree[cnt].size=1;\n\treturn cnt;\n}\n```\n`cnt` \u8bb0\u5f55\u7684\u662f\u603b\u6570\uff0c\u56e0\u6b64\u5f00\u5728\u4e3b\u51fd\u6570\u5916\u3002\n\n### \u5206\u88c2\u64cd\u4f5c\u2014\u2014split\n\n\u5206\u88c2\u64cd\u4f5c\u662f\u975e\u65cb\u5e73\u8861\u6811\u4e2d\u6700\u91cd\u8981\u7684\u64cd\u4f5c\u4e4b\u4e00\uff0c\u5b83\u7684\u5177\u4f53\u7528\u5904\u662f\u5c06\u7ed9\u5b9a\u8282\u70b9\u5de6\u3001\u53f3\u62c6\u4e3a\u4e24\u68f5\u6811\uff0c\u4ee5\u6b64\u5b9e\u73b0\u5269\u4e0b\u7684\u5e73\u8861\u6811\u64cd\u4f5c\u3002\n\n```cpp\nvoid split(int i,int k,int &l,int &r){\n\tif(!i){\n\t\tl=r=0;\n\t\treturn;\n\t}\n\tif(tree[i].val<=k){\n\t\tl=i;\n\t\tsplit(rc,k,rc,r);\n\t}\n\telse{\n\t\tr=i;\n\t\tsplit(lc,k,l,lc);\n\t}\n\tupdate(i);\n}\n```\n\n### \u5408\u5e76\u64cd\u4f5c\u2014\u2014merge\n\n`merge` \u6700\u9700\u6ce8\u610f\u7684\u4e00\u70b9\uff0c\u662f\u786e\u4fdd BST \u7684\u7279\u6027\uff0c\u540c\u65f6\u5408\u5e76\u540e\u5de6\u533a\u95f4\u6811\u8282\u70b9\u7684\u4e2d\u5e8f\u904d\u5386\u6b21\u5e8f\u4e0d\u53d8\u3002\n\n```cpp\nint merge(int l,int r){\n\tif(!l||!r){\n\t\treturn l+r;//\u5982\u679c\u6709\u7a7a\u7684\u5b50\u6811\uff0c\u8fd4\u56de\u975e\u7a7a\u5b50\u6811\n\t}\n\tif(tree[l].key<=tree[r].key){\n\t\ttree[l].r=merge(tree[l].r,r);\n\t\tupdate(l);\n\t\treturn l;\n\t}\n\telse if(tree[l].key>tree[r].key){\n\t\ttree[r].l=merge(l,tree[r].l);\n\t\tupdate(r);\n\t\treturn r;\n\t}\n}\n```\n\n### \u63d2\u5165\u548c\u5220\u9664\u2014\u2014insert & pop\n\n`Insert` \u662f\u5c06\u65b0\u5efa\u7684\u8282\u70b9\u4e0e\u4e4b\u524d\u5206\u88c2\u5f00\u7684\u4e24\u68f5\u5b50\u6811\u5408\u5e76\u5728\u4e00\u8d77\u3002\n\n```cpp\nvoid insert(int i){\n\tsplit(root,i,l,r);//\u5206\u88c2\n\troot=merge(merge(l,add(i)),r);//\u5408\u5e76\u4e09\u68f5\u6811\n}\n```\n\n`pop` \u6b63\u597d\u76f8\u53cd\uff0c\u5c06\u5206\u88c2\u540e\u7684\u5de6\u53f3\u4e24\u68f5\u5b50\u6811\u5408\u5e76\uff0c\u820d\u5f03\u4e2d\u95f4\u5b50\u6811\u3002\n\n```cpp\nvoid pop(int i){\n\tsplit(root,i,l,p);\n\tsplit(l,i-1,l,r);\n\tr=merge(tree[r].l,tree[r].r);\n\troot=merge(merge(l,r),p);\n}\n```\n---\n\u6240\u4ee5\u6700\u6700\u6700\u6700\u57fa\u672c\u7684\u64cd\u4f5c\u5c31\u8bb2\u5b8c\u4e86\uff0c\u76f8\u4fe1\u5927\u5bb6\u4e5f\u6709\u4e86\u57fa\u672c\u7684\u4e86\u89e3\u3002\n\n# \u672c\u9898\u8bb2\u89e3\n\n\n- ## FHQTreap \u4e2d\u7684\u6807\u8bb0\u4e0b\u653e\u64cd\u4f5c\n\n### \u53d8\u91cf\n\n```cpp\n#define lc tree[i].l\n#define rc tree[i].r\n```\n\u5b8f\u5b9a\u4e49\uff0c\u6211\u5f88\u61d2\u3002\n\n```cpp\nstruct FHQtree{\n\tint l,r;\n\tint val,size;\n\tint key,lazy;\n}tree[MAXN*4];\nint root,cnt,p,l,r;\n```\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd8\u662f\u5dee\u4e0d\u591a\u7684\u53d8\u91cf\u3002\n\n### push_down\u64cd\u4f5c\n\n~~\u9010\u6e10\u7ebf\u6bb5\u6811\u5316~~ push_down\u64cd\u4f5c\u56e0\u9898\u800c\u5f02\uff0c\u8fd9\u91cc\u662f\u4ea4\u6362\u5b50\u6811\uff0c\u6240\u4ee5\u8fd8\u662f\u5f88\u7b80\u5355\u7684\u3002\n\n```cpp\nvoid push_down(int i){\n\tswap(lc,rc);\n\ttree[lc].lazy^=1;\n\ttree[rc].lazy^=1;\n\ttree[i].lazy=0;//\u522b\u5fd8\u4e86\u5904\u7406\u61d2\u6807\u7b7e\n}\n```\n\n### \u52a0\u5165\u4e0b\u653e\u6807\u8bb0\u7684\u5408\u5e76\u4e0e\u5206\u88c2\n\n\u603b\u4f53\u6765\u8bf4\uff0c\u4e5f\u6ca1\u4ec0\u4e48\u533a\u522b\uff0c\u5c31\u662f\u52a0\u4e86\u4e00\u4e2a\u5bf9\u61d2\u6807\u7b7e\u7684\u5224\u65ad\uff0c\u5982\u679c\u61d2\u6807\u7b7e\u4e0d\u4e3a\u7a7a\uff0c\u5c31\u4e0b\u653e\u4e00\u4e0b\uff0c\u518d\u64cd\u4f5c\u3002\n\n```cpp\nvoid split(int i,int k,int &l,int &r){\n\tif(!i){\n\t\tl=r=0;\n\t\treturn;\n\t}\n\tif(tree[i].lazy){\n\t\tpush_down(i);\n\t}\n\tif(tree[tree[i].l].size+1<=k){\n\t\tl=i;\n\t\tsplit(tree[i].r,k-tree[tree[i].l].size-1,tree[i].r,r);\n\t}\n\telse{\n\t\tr=i;\n\t\tsplit(tree[i].l,k,l,tree[i].l);\n\t}\n\tupdate(i);\n}\n```\n```cpp\nint merge(int l,int r){\n\tif(!l||!r){\n\t\treturn l|r;\n\t}\n\tif(tree[l].key<tree[r].key){\n\t\tif(tree[l].lazy){\n\t\t\tpush_down(l);\n\t\t}\n\t\ttree[l].r=merge(tree[l].r,r);\n\t\tupdate(l);\n\t\treturn l;\n\t}\n\telse{\n\t\tif(tree[r].lazy){\n\t\t\tpush_down(r);\n\t\t}\n\t\ttree[r].l=merge(l,tree[r].l);\n\t\tupdate(r);\n\t\treturn r;\n\t}\n}\n```\n\n### \u4e2d\u5e8f\u904d\u5386\n\n\u9898\u76ee\u8981\u6c42\uff0c\u5bf9\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\u3002\u4f46\u662f\u6ce8\u610f\uff0c\u4e5f\u8981\u52a0\u5165\u5bf9\u61d2\u6807\u7b7e\u7684\u5224\u65ad\u3002\n\n```cpp\nvoid dfs(int i){\n\tif(tree[i].lazy){\n\t\tpush_down(i);\n\t}\n\tif(tree[i].l){\n\t\tdfs(tree[i].l);\n\t}\n\tprintf(\"%d \",tree[i].val);\n\tif(tree[i].r){\n\t\tdfs(tree[i].r);\n\t}\n}\n```\n\n- ## \u5b8c\u6574\u4ee3\u7801\n\n[link](https://www.luogu.com.cn/paste/gx4qqar9)\n\n--\n\n\u9898\u89e3\u5230\u8fd9\u91cc\u7ed3\u675f\u4e86\uff0c\u5e0c\u671b\u5927\u5bb6\u7684\u5b9e\u529b\u4e0e\u65e5\u4ff1\u589eqwq\u3002",
        "postTime": 1621060926,
        "uid": 352464,
        "name": "JJA_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3P3391 \u3010\u6a21\u677f\u3011\u3010\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "## \u6b64\u89e3\u6cd5\u4e3a\u4e00\u79cd\u57fa\u4e8e\u590d\u6742\u5ea6\u5e73\u8861\u601d\u60f3\u7684\u94fe\u8868\u4fe1\u606f\u7ef4\u62a4\u7b97\u6cd5\n\n### \u5173\u4e8e\u6b64\u7c7b\u95ee\u9898\u7684\u53e6\u4e00\u79cd\u540c\u590d\u6742\u5ea6\u7b97\u6cd5\uff1a\u5757\u72b6\u94fe\u8868 \u5728\u6b64\u4e0d\u505a\u9610\u8ff0\u3002\n\n### [\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.com.cn/problem/P3391)\n\n\u53ef\u4ee5\u53d1\u73b0\u5047\u4f7f\u6b64\u5e8f\u5217\u4e3a\u4e00\u4e2a\u94fe\u8868,\u7b2c\u4e00\u4e2ac\u70b9\u8868\u793a\u4e3a\u89c2\u5bdf\u70b9\uff0cr\u70b9\u4e3a\u53e6\u4e00\u4e2a\u89c2\u5bdf\u70b9\uff0cd\u70b9\u4e3a\u7b2c\u4e00\u4e2a\u5e8f\u5217\u70b9\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/00b4nlis.png)\n\n\u5047\u4f7f\u8fdb\u884c\u4e00\u6bb5\u533a\u95f4\u7684\u53cd\u8f6c\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lptgd5qd.png)\n\n\u53ef\u4ee5\u5c06\u76f8\u5173\u4e24\u6761\u94fe\u5220\u9664\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ez9h7tnb.png)\n\n\u8fde\u4e0a\u65b0\u94fe\uff0c\u5982\u56fe\u6240\u793a:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/mw83s7a3.png)\n\n\u663e\u7136\uff0c\u7531\u4e8e\u89c2\u5bdf\u70b9\u7684\u4f4d\u7f6e\u5fc5\u5b9a\u4e0d\u53d8\uff0c\u81ea\u89c2\u5bdf\u70b9\u5f00\u59cb\u5411\u540e\u904d\u5386\u8f93\u51fa\u5373\u4e3a\u7b54\u6848\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u6b21\u4fee\u6539\uff0c\u5bfb\u627e\u5230\u533a\u95f4\u4e24\u5934\u7684\u786e\u5207\u70b9\u5c31\u662f\u5fc5\u8981\u7684\u3002\n\n\u663e\u7136\u6bcf\u6b21\u4ece\u89c2\u5bdf\u70b9\u4f9d\u6b21\u5411\u540e\u8df3\u7684\u590d\u6742\u5ea6\u4e3aO\uff08n\uff09\uff0c\u90a3\u4e48\u5982\u4f55\u5feb\u901f\u627e\u5230\u67d0\u4f4d\u7f6e\u7684\u70b9\u5c31\u662f\u89e3\u51b3\u95ee\u9898\u7684\u5173\u952e\u3002\n\n\u5047\u82e5\u8fdb\u884c\u500d\u589e\u7684\u8df3\u8dc3\u65b9\u5f0f\uff0c\u90a3\u4e48\u6bcf\u6b21\u5bfb\u627e\u7684\u590d\u6742\u5ea6\u662fO\uff08logn\uff09\u7684\uff0c\u4f46\u8fdb\u884c\u4fee\u6539\u540e\u7684\u66f4\u65b0\u590d\u6742\u5ea6\u5374\u662fO\uff08nlogn\uff09\u7684\uff0c\u663e\u7136\u65e0\u6cd5\u4f7f\u7528\u3002\n\n\u6b64\u65f6\u5047\u82e5\u6bcf\u4e2a\u70b9\u4e0d\u518d\u5b58\u50a8logn\u4e2a\u5411\u540e\u8df3\u7684\u8fb9\uff08\u5373\u500d\u589e\u6570\u7ec4\uff09\uff0c\u6539\u4e3a\u53ea\u5b58\u50a8\u7b2c\u4e00\u4e2a\u76f8\u90bb\u7684\u70b9\u548c\u8ddd\u79bb\u81ea\u5df1k\uff08\u5e38\u6570\uff09\u8ddd\u79bb\u7684\u70b9\uff0c\u4ee5\u89c2\u5bdf\u70b9\u4e3a\u4f8b\uff0c\u4e14\u6b64\u65f6k=3\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/g63wm69j.png)\n\n\u6b64\u65f6\u5bfb\u627e\u64cd\u4f5c\u53ea\u9700\u5148\u6bcf\u6b21\u8df3\u5230\u8ddd\u79bb\u81ea\u5df1\u4e3ak\u7684\u70b9\uff0c\u76f4\u5230\u8ddd\u79bb\u4e0d\u8d85\u8fc7k\u65f6\u518d\u4f9d\u6b21\u5411\u540e\u8df3\uff0c\u6b64\u65f6\u590d\u6742\u5ea6\u4e3aO(max(n/k,k))\u3002\n\n\u5173\u4e8e\u4fee\u6539\uff0c\u5047\u82e5\u5bf9\u5982\u4e0b\u533a\u95f4\u53cd\u8f6c\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/w7gssi9d.png)\n\n\u90a3\u4e48\u6d89\u53ca\u5230\u76f8\u90bb\u70b9\u7684\u8fb9\u53ea\u6709\u4e24\u4e2a\u4fee\u6539\uff0c\u800c\u5173\u4e8e\u957f\u5ea6\u4e3ak\u7684\u8fb9\uff08\u6b64\u65f6k=3\uff09\u5bf9\u4e8e\u53cd\u8f6c\u533a\u95f4\u5185\u9700\u8981\u4fee\u6539\u7684\u70b9\u4ec5\u4e3a\u5982\u56fe\u6a2a\u7ebf\u4e0b\u6240\u793a6\uff08min(2*k,r-l+1)\uff09\u4e2a\u70b9\uff0c\u6613\u8bc1\u533a\u95f4\u5916\u9700\u8981\u4fee\u6539\u7684\u70b9\u6570\u4e5f\u4e0d\u8d85\u8fc72*k\u4e2a\u3002\n\n\u56e0\u4e3a\u76f8\u8ddd\u4fee\u6539\u533a\u95f4\u8ddd\u79bb\u8d85\u8fc7k\u7684\u70b9\u5fc5\u5b9a\u4e0d\u4f1a\u88ab\u6d89\u53ca\uff0c\u6240\u4ee5\u53ef\u77e5\u4fee\u6539\u590d\u6742\u5ea6\u4e3aO(k)\u3002\n\n\u6b64\u65f6\u53d1\u73b0\u4e24\u79cd\u64cd\u4f5c\u5448\u4e58\u79ef\u76f8\u5173\uff0c\u6839\u636e\u590d\u6742\u5ea6\u5e73\u8861\u53ef\u77e5k\u53d6sqrt(n)\u65f6\u7406\u8bba\u590d\u6742\u5ea6\u6700\u4f4e\uff0c\u603b\u4f53\u4e3aO(n*sqrt(n))\u3002\n\n\u6700\u540e\u81ea\u89c2\u5bdf\u70b9\u5411\u540e\u904d\u5386\u8f93\u51fa\u5373\u4e3a\u672c\u9898\u6700\u7ec8\u7b54\u6848\u3002\n\n\u672c\u4ee3\u7801\u7531\u4e8e\u5e38\u6570\u95ee\u9898\u65e0\u6cd5\u901a\u8fc7\u672c\u9898\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,k,nxt[100007][2],f[100007][2];\ninline void init(){\n\tmemset(nxt,-1,sizeof(nxt));memset(f,-1,sizeof(f));\n\tnxt[0][1]=1;f[0][1]=k;\n\tfor(int i=1;i<=n;i++){\n\t\tnxt[i][0]=i-1;nxt[i][1]=i+1;\n\t\tif(i-k>=0)f[i][0]=i-k;if(i+k<=n)f[i][1]=i+k;\n\t\t}\n\tnxt[n+1][0]=n;f[n+1][0]=n-k;\n}\ninline void go_slow(int &x,bool &to){int u=nxt[x][to];to^=(nxt[u][to^1]!=x);x=u;}\ninline void go_fast(int &x,bool &to){int u=f[x][to];to^=(f[u][to^1]!=x);x=u;}\ninline int find(int x,bool &to){\n\tif(x>n||x<0)return -1;\n\tint now=0;to=1;register int i;\n\tfor(i=1;i<=x/k;i++)go_fast(now,to);\n\tfor(i=1;i<=x%k;i++)go_slow(now,to);\n\treturn now;\n}\ninline void update(int x,bool tox,int y,bool toy,int len){\n\tfor(int i=1;i<=min(k,len);i++){\n\t\tint g=x;bool tt=tox^1;\n\t\tgo_fast(g,tt);f[g][tt^1]=y;\n\t\tg=y;tt=toy^1;\n\t\tgo_fast(g,tt);f[g][tt^1]=x;\n\t\tswap(f[x][tox^1],f[y][toy^1]);\n\t\tgo_slow(x,tox);go_slow(y,toy);\n\t}\n}\nsigned main(){\n\tscanf(\"%d%d\",&n,&m);k=sqrt(n);init();\n\tint x,y,len,g;bool tox,toy,tt;\n\twhile(m--){tox=1;toy=1;\n\t\tscanf(\"%d%d\",&x,&y);len=y-x+1;\n\t\tx=find(x,tox);y=find(y,toy);\n\t\tupdate(x,tox,y,toy^1,len);\n\t\tg=x;tt=tox^1;\n\t\tgo_slow(g,tt);nxt[g][tt^1]=y;\n\t\tg=y;tt=toy;\n\t\tgo_slow(g,tt);nxt[g][tt^1]=x;\n\t\tswap(nxt[x][tox^1],nxt[y][toy]);\n\t\t}\n\tint now=0;bool tonow=1;\n\tfor(int i=1;i<=n;++i)go_slow(now,tonow),printf(\"%d \",now);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1572257470,
        "uid": 121612,
        "name": "\u5728\u60f3Peach",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u9996\u5148\u4f60\u9700\u8981\u4f1a\u7528 fhqtreap \u505a\u666e\u901a\u5e73\u8861\u6811\u90a3\u9053\u9898\uff0c\u4f46\u8fd9\u9053\u9898 fhqtreap \u7ef4\u62a4\u987a\u5e8f\u7684\u4e0d\u662f\u5b89\u88c5\u6743\u503c\u6765\u6392\u7684\uff0c\u800c\u662f\u6309\u7167**\u5728\u5e8f\u5217\u4e2d\u7684\u987a\u5e8f**\u6765\u6392\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u4e2d\u5e8f\u904d\u5386\u540e\u7684\u7ed3\u679c\u5c31\u662f\u8fd9\u4e2a\u5e8f\u5217\u3002\n\n\u5efa\u6811\u7684\u8bdd\u5c31\u76f4\u63a5\u5efa\u5427\uff0c\u867d\u7136\u53ef\u4ee5\u9009\u62e9\u5148\u7ed9\u6bcf\u4e2a\u70b9\u4ed8\u4e2a\u968f\u673a\u5806\u6743\u503c\uff0c\u518d\u7b1b\u5361\u5c14\u6811\u5efa\u6811\uff0c\u4f46\u4e0d\u592a\u597d\u5199\uff0c\u6240\u4ee5\u6211\u5c31\u5199\u7684\u50cf\u7ebf\u6bb5\u6811\u5efa\u6811\u4e00\u6837\u5efa\uff0c\u7136\u540e\u5806\u6743\u503c\u4ed8\u4e3a\u5b83\u7684\u9ad8\u5ea6\u3002\n\n\u5206\u88c2\u64cd\u4f5c\u662f\u6309\u7167\u6392\u540d\u5206\u88c2\u7684\uff0c\u8be6\u60c5\u89c1\u4ee3\u7801\uff1a\n```cpp\nvoid rank_split(int rt,int x,int &a,int &b) {\n    if(!rt) {\n        a=b=0;\n        return ;\n    }\n    pushdown(rt);//\u8fd9\u4e2a\u5f85\u4f1a\u518d\u8bf4\n    int tmp=tree[tree[rt].lc].size+1;\n    if(tmp<=x) {//\u5982\u679c\u6839\u8282\u70b9\u5728\u8fd9\u9897\u5b50\u6811\u91cc\u7684\u6392\u540d\u5c0f\u4e8e\u7b49\u4e8ex\uff0c\u5c31\u610f\u5473\u7740\u5b83\u7684\u5de6\u5b50\u6811\u548c\u5b83\u90fd\u5c5e\u4e8ea\uff0c\u800c\u53f3\u5b50\u6811\u4e00\u90e8\u5206\u5c5e\u4e8ea\uff0c\u53e6\u4e00\u90e8\u5206\u5c5e\u4e8eb\uff0c\u8fd8\u9700\u8981\u7ee7\u7eed\u9012\u5f52\u4e0b\u53bb\u5206\u88c2\n        a=rt;\n        rank_split(tree[rt].rc,x-tmp,tree[a].rc,b);\n    }\n    else {//\u4e0d\u7136\u7684\u8bdd\u5de6\u5b50\u6811\u8981\u5206\u88c2\n        b=rt;\n        rank_split(tree[rt].lc,x,a,tree[b].lc);\n    }\n    pushup(rt);\n}\n```\n\u5408\u5e76\u64cd\u4f5c\u548c\u6b63\u5e38\u7684\u57fa\u672c\u4e00\u6837\uff1a\n```cpp\nvoid merge(int &rt,int a,int b) {\n    if(!a||!b) {\n        rt=a^b;\n        return ;\n    }\n    if(tree[a].key>=tree[b].key) {\n        pushdown(a);\n        rt=a;\n        merge(tree[a].rc,tree[a].rc,b);\n    }\n    else {\n        pushdown(b);\n        rt=b;\n        merge(tree[b].lc,a,tree[b].lc);\n    }\n    pushup(rt);\n}\n```\n\u7136\u540e\u6211\u4eec\u518d\u770b\u8fd9\u9053\u9898\u7684\u533a\u95f4\u7ffb\u8f6c\uff0c\u6211\u4eec\u9996\u5148\u8981\u628a\u90a3\u4e2a\u533a\u95f4\u4ece\u6574\u4e2a\u5e8f\u5217\u4e2d\u5206\u88c2\u51fa\u6765\uff0c\u7136\u540e\u50cf\u7ebf\u6bb5\u6811\u4e00\u6837\u7ed9\u5b83\u5728\u6839\u8282\u70b9\u4e0a\u6253\u4e2a\u61d2\u60f0\u6807\u8bb0\uff0c\u6bcf\u6b21 split \u548c build \u65f6\u90fd\u8981 pushdown \u4e00\u4e0b\u3002\n```cpp\ninline void pushdown(int rt) {\n    if(tree[rt].tag) {\n        tree[rt].tag=false;\n        tree[tree[rt].lc].tag^=1;\n        tree[tree[rt].rc].tag^=1;\n        swap(tree[rt].lc,tree[rt].rc);\n    }\n}\nvoid reverse(int &rt,int l,int r) {\n    int a=0,b=0,c=0;\n    rank_split(rt,l-1,a,b);\n    rank_split(b,r-l+1,b,c);\n    tree[b].tag^=1;\n    merge(b,b,c);\n    merge(rt,a,b);\n}\n```\n\u8f93\u51fa\u7684\u8bdd\u5c31\u76f4\u63a5\u4e2d\u5e8f\u904d\u5386\uff0c\u8bb0\u5f97\u8981 pushdown\u3002\n```cpp\nvoid print(int rt) {\n    if(!rt)\n        return ;\n    pushdown(rt);\n    print(tree[rt].lc);\n    std::printf(\"%d \",tree[rt].val);\n    print(tree[rt].rc);\n}\n```\n\u5b8c\u6574\u7a0b\u5e8f\uff1a\n```cpp\n#include<cstdio>\nstruct tree_node{\n    bool tag;\n    short key;\n    int val;\n    int size;\n    int lc,rc;\n    tree_node() {\n        tag=false;\n        key=0;\n        val=0;\n        size=0;\n        lc=rc=0;\n    }\n    tree_node(int a) {\n        tag=false;\n        key=1;\n        val=a;\n        size=1;\n        lc=rc=0;\n    }\n}tree[100001];\nint cnt;\ninline int newnode(int a) {\n    tree[++cnt]=tree_node(a);\n    return cnt;\n}\ninline void swap(int &a,int &b) {\n    int tmp=a;\n    a=b;\n    b=tmp;\n}\ninline void pushup(int rt) {\n    tree[rt].size=tree[tree[rt].lc].size+tree[tree[rt].rc].size+1;\n}\ninline void pushdown(int rt) {\n    if(tree[rt].tag) {\n        tree[rt].tag=false;\n        tree[tree[rt].lc].tag^=1;\n        tree[tree[rt].rc].tag^=1;\n        swap(tree[rt].lc,tree[rt].rc);\n    }\n}\nvoid rank_split(int rt,int x,int &a,int &b) {\n    if(!rt) {\n        a=b=0;\n        return ;\n    }\n    pushdown(rt);\n    int tmp=tree[tree[rt].lc].size+1;\n    if(tmp<=x) {\n        a=rt;\n        rank_split(tree[rt].rc,x-tmp,tree[a].rc,b);\n    }\n    else {\n        b=rt;\n        rank_split(tree[rt].lc,x,a,tree[b].lc);\n    }\n    pushup(rt);\n}\nvoid merge(int &rt,int a,int b) {\n    if(!a||!b) {\n        rt=a^b;\n        return ;\n    }\n    if(tree[a].key>=tree[b].key) {\n        pushdown(a);\n        rt=a;\n        merge(tree[a].rc,tree[a].rc,b);\n    }\n    else {\n        pushdown(b);\n        rt=b;\n        merge(tree[b].lc,a,tree[b].lc);\n    }\n    pushup(rt);\n}\nvoid reverse(int &rt,int l,int r) {\n    int a=0,b=0,c=0;\n    rank_split(rt,l-1,a,b);\n    rank_split(b,r-l+1,b,c);\n    tree[b].tag^=1;\n    merge(b,b,c);\n    merge(rt,a,b);\n}\ninline int max(int a,int b) {\n    return a>b?a:b;\n}\nvoid build(int &rt,int l,int r) {\n    if(l>r) {\n        rt=0;\n        return ;\n    }\n    if(l==r) {\n        rt=newnode(l);\n        return ;\n    }\n    int mid=l+r>>1;\n    rt=newnode(mid);\n    build(tree[rt].lc,l,mid-1);\n    build(tree[rt].rc,mid+1,r);\n    pushup(rt);\n    tree[rt].key=max(tree[tree[rt].lc].key,tree[tree[rt].rc].key)+1;\n}\nvoid print(int rt) {\n    if(!rt)\n        return ;\n    pushdown(rt);\n    print(tree[rt].lc);\n    std::printf(\"%d \",tree[rt].val);\n    print(tree[rt].rc);\n}\nint main() {\n    int n,m;\n    std::scanf(\"%d%d\",&n,&m);\n    int root=0;\n    build(root,1,n);\n    int l,r;\n    while(m--) {\n        std::scanf(\"%d%d\",&l,&r);\n        reverse(root,l,r);\n    }\n    print(root);\n    return 0;\n}\n```\n\u7136\u540e\u7559\u9053\u4f8b\u9898\uff1a[\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.com.cn/problem/P5055)\uff08\u6ce8\u610f\u7531\u4e8e\u53ef\u6301\u4e45\u5316\u6bcf\u6b21\u4e0b\u4f20\u6807\u8bb0\u5de6\u53f3\u513f\u5b50\u90fd\u8981\u590d\u5236\u4e00\u904d\uff09\uff0c[\u8fd9\u662f\u83dc\u9e21\u7684\u9898\u89e3](https://www.luogu.com.cn/blog/huaerxiao-nuo0930/solution-p5055)\u3002",
        "postTime": 1621090686,
        "uid": 203008,
        "name": "toaru",
        "ccfLevel": 5,
        "title": "P3391 \u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811 \u9898\u89e3"
    },
    {
        "content": "\u6211\u89c9\u5f97\u5427\uff0c\u65e0\u65cbtreap\u4f5c\u4e3a\u4e00\u79cd\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u4e1c\u4e1c\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u8dd1dalao\u53e3\u4e2d\u7684\u4ec0\u4e48\u53ef\u6301\u4e45\u5316\uff0c\u5199\u8d77\u6765\u4e5f\u4e0d\u9ebb\u70e6\uff0c\u4e3a\u5565\u5c31\u6ca1\u51e0\u4e2a\u4eba\u7528\u5462\u3002\u3002\u832b\u832b\u9898\u89e3\u4e2d\u5c31\u770b\u5230\u4e00\u4e24\u4e2a\uff0c\u8fd8\u90fd\u662f\u6307\u9488\u3002\u3002\u3002\u90a3\u6211\u5c31\u732e\u4e11\u5199\u4e2a\u6570\u7ec4\u7248\u65e0\u65cbtreap\u3002\u3002\u3002\u6211\u89c9\u5f97\u8fd9\u4e2a\u73a9\u610f\u8fd8\u662f\u76f8\u5f53\u5389\u5bb3\u7684\uff0c\u4e5f\u5c31\u5f53\u79d1\u666e\u4e00\u4e0b\uff0c\u6ca1\u5199\u8fc7\u7684\u53ef\u4ee5\u5199\u4e0b\uff0c\u8fd8\u662f\u5f88\u597d\u5199\u7684\u3002\n\u603b\u4e4b\u65e0\u65cbtreap\u4e0e\u666e\u901a\u7684\u5e73\u8861\u6811\u4e0d\u540c\uff0c\u5b83\u6ca1\u6709**\u65cb\u8f6c**\u8fd9\u79cd\u86c7\u76ae\u64cd\u4f5c~~\uff08\u5e9f\u8bdd\u4e0d\u7136\u4e3a\u5565\u53eb\u65e0\u65cbtreap\uff09~~\uff0c\u800c\u4e14\u5b83\u7528\u6765\u7ef4\u6301\u5e73\u8861\u7684\u662f\u968f\u673a\u7ed9\u7684\u4e00\u4e2a\u6743\u503c\uff0c\u5229\u7528\u5806\u7684\u6027\u8d28\u6765\u7ef4\u62a4\uff0c\u53cd\u6b63\u81ea\u5df1\u6a21\u62df\u4e0byy\u4e0b\u5c31\u4f1a\u53d1\u73b0\u5b83\u5b9e\u73b0\u4e86**\u65e0\u5173\u6570\u636e\u672c\u8eab\u63d2\u5165\u987a\u5e8f**\u7684\u5efa\u6811\uff0c\u4e8e\u662f\u5c31\u5bfc\u81f4\u6570\u636e\u5361\u4e0d\u52a8\u8fd9\u73a9\u610f\uff0c\u56e0\u4e3a\u4f60\u4e0d\u8bba\u600e\u4e48\u51fa\u6570\u636e\uff0c\u53cd\u6b63\u6700\u540e\u8fd8\u662f\u6309\u6743\u503c\u6765\u7b972333\u3002\n\u5176\u4e2d\u65e0\u65cbtreap\u6700\u91cd\u8981\u7684\u4e24\u4e2a\u64cd\u4f5c\u4e00\u4e2a\u662fmerge\uff0c\u4e00\u4e2a\u662fsplit\uff0c\u7136\u540e\u5176\u4ed6\u4e0e\u65cb\u8f6ctreap\u76f8\u540c\u3002\n\n\u9996\u5148\u662fsplit\uff0c\u8bb2\u4e00\u68f5\u6811\u62c6\u6210\u524dk\u4e2a\u70b9\u7ec4\u6210\u7684\u4e00\u68f5\u6811\uff0c\u548c\u540e\u9762\u70b9\u7ec4\u6210\u7684\u4e00\u68f5\u6811\uff0c\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u5427\uff0c\u6211\u89c9\u5f97\u5199\u7684\u8fd8\u662f\u633a\u6e05\u6670\u7684\u3002\n\n\u7136\u540e\u662fmerge\uff0c\u6b64\u5904\u7684merge\u53ef\u4e0d\u80fd\u968f\u4fbf\u5c31\u5408\u5e76\u4e24\u9897\u5b50\u6811\uff0c\u4e00\u5b9a\u8981\u4fdd\u8bc1\u7b2c\u4e00\u9897\u6811\u4e2d\u6240\u6709\u7684\u6811\u90fd\u5c0f\u4e8e\u7b2c\u4e8c\u9897\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u6839\u636e\u8d4b\u4e88\u7684\u968f\u673a\u6743\u503c\u8fdb\u884c\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u5c0f\u6839\u5806\uff0c\u65e2\u7136\u80fd\u62c6\uff0c\u90a3\u81ea\u7136\u5c31\u597d\u505a\u4e86\uff0c\u6211\u4eec\u5c06\u533a\u95f4\u62c6\u5f00\uff0c\u53d8\u6210(1,l-1),(l,r),(r+1,n),\u7136\u540e\uff08l,r\uff09\u6253\u4e2a\u6807\u8bb0\uff0c\u5b8c\u4e8b\uff0c\u4e0b\u4f20\u6807\u8bb0\u4e0e\u7ebf\u6bb5\u6811\u76f8\u4f3c\uff0c\u6ce8\u610f\u4e0d\u8981\u628a\u7a7a\u8282\u70b9\u4e5f\u6253\u4e0a\u5c31\u884c\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define mp make_pair\ntypedef pair<int,int> par; \nint cnt = 0,root = 0;\nstruct treap\n{\n\tint key,pri,size,ls,rs;\n\tbool rev;\n}T[100005];\nint n,m;\nvoid update(int rt){T[rt].size = T[T[rt].ls].size + T[T[rt].rs].size + 1;}\nvoid pushdown(int rt)\n{\n\tif(T[rt].ls)T[T[rt].ls].rev = (T[T[rt].ls].rev^1);\n\tif(T[rt].rs)T[T[rt].rs].rev = (T[T[rt].rs].rev^1);\n\tint tmp = T[rt].ls;\n\tT[rt].rev = 0;\n\tT[rt].ls = T[rt].rs;T[rt].rs = tmp;\n}\nint merge(int a,int b)\n{\n\tif(a == 0||b == 0)return a+b;\n\tif(T[a].pri<T[b].pri){if(T[a].rev) pushdown(a);return T[a].rs = merge(T[a].rs,b),update(a),a;}\n\telse {if(T[b].rev)pushdown(b);return T[b].ls = merge(a,T[b].ls),update(b),b;}\n}\npar split(int k,int rt)\n{\n\tif(k == 0)return mp(0,rt);\n\tif(T[rt].rev)pushdown(rt);\n\tint ls = T[rt].ls,rs = T[rt].rs; \n\tif(k == T[ls].size) {T[rt].ls = 0,update(rt);return mp(ls,rt);}\n\tif(k == T[ls].size+1){T[rt].rs = 0,update(rt);return mp(rt,rs);}\n\tif(k<T[ls].size){\n\t\tpar tmp = split(k,ls);\n\t\tT[rt].ls = tmp.second;update(rt);return mp(tmp.first,rt);\n\t}\n\telse{\n\t\tpar tmp = split(k-T[ls].size-1,rs);\n\t\tT[rt].rs = tmp.first;update(rt);return mp(rt,tmp.second);\n\t}\n}\nvoid print(int rt)\n{\n\tif(!rt)return ;\n\tif(T[rt].rev)pushdown(rt);\n\tprint(T[rt].ls);printf(\"%d \",T[rt].key);print(T[rt].rs);\n}\nint main()\n{\n \tsrand(19970502);\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i = 1; i <= n; i++)\n\t{T[i] = (treap){i,rand(),1};root = merge(root,i);}\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint l,r;scanf(\"%d %d\",&l,&r);\n\t\tpar x = split(l-1,root);par y = split(r-l+1,x.second);\n\t\tT[y.first].rev = T[y.first].rev^1;\n\t\troot = merge(x.first,merge(y.first,y.second));\n\t}\n\tprint(root);\n} \n```",
        "postTime": 1517918721,
        "uid": 52576,
        "name": "moye\u5230\u7897\u91cc\u6765",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u65e0\u65cbtreap\u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "~~\u6211\u6b7b\u4e5f\u4e0d\u5199\u5e26\u7236\u6307\u9488\u7684Splay!~~\n\n\u7c97\u7565\u7684\u7ffb\u4e86\u7ffb\u9898\u89e3\u533aemmm\n\n\u53d1\u73b0\u5927\u90e8\u5206\u90fd\u662f\u8981\u7ef4\u62a4\u7236\u6307\u9488\u7684Splay\u3002\n\n\u90a3\u4e48\u8fd9\u91cc\u53d1\u4e00\u4e2a\u4e0d\u7ef4\u62a4\u7236\u6307\u9488\u7684Splay\uff01\n\n\u98ce\u683c\u7c7b\u4f3clrj\u7684\u84dd\u4e66\u6a21\u7248\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a\n\n1.\u8bbf\u95ee\u5230\u7684\u70b9\u90fd\u8981\u4e0b\u4f20\u6807\u8bb0\u3002\n\n2.\u6ce8\u610f\u8003\u8651\u8fb9\u754c\u60c5\u51b5\u3002\n\n3.insert\u7684\u65f6\u5019\u8981\u987a\u4fbfSplay\uff0c\u52a0\u901f\u63d2\u5165\u3002\n\n4.\u4f7f\u7528Node\u6307\u9488\u65f6\uff0c\u9664\u975e\u4e0d\u53ef\u80fd\u51fa\u73b0NULL\u7684\u60c5\u5f62\uff0c\u6ce8\u610f\u5224\u65ad\u662f\u5426\u4e3aNULL\u3002\n\n5.\u5404\u4e2a\u6d89\u53ca\u4fee\u6539\u6307\u9488\u7684\u64cd\u4f5c\u51fd\u6570\u90fd\u8981\u4f20\u6307\u9488\u7684\u5f15\u7528\u3002\n\n\n\u5177\u4f53\u5206\u6790\u8be6\u89c1\u4ee3\u7801\u3002\n\n\n```cpp\n#include <cstdio>\n\nstruct Node {\n    int v, s, t; // v:value s:size t:tag\n    Node *ch[2];\n    Node (int v = 0) : v(v), s(1), t(0) {ch[0] = ch[1] = NULL;}\n} *root;\n\nvoid maintain(Node* o) { //\u7ef4\u62a4size\u503c\n    o->s = 1;\n    if(o->ch[0]) o->s += o->ch[0]->s;\n    if(o->ch[1]) o->s += o->ch[1]->s;\n}\n\nvoid pushdown(Node* o) { //\u540e\u7eed\u8c03\u7528\u4fdd\u8bc1o\u4e0d\u4f1a\u662fNULL\uff0c\u65e0\u9700\u5224\u65ad\n    if(o->t) { //\u5982\u679c\u6709\u6807\u8bb0\u90a3\u4e48\u4e0b\u653e\n        Node *t = o->ch[0]; //\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\n        o->ch[0] = o->ch[1];\n        o->ch[1] = t;\n        if(o->ch[0]) o->ch[0]->t ^= 1; //\u82e5\u4e0d\u4e3aNULL\u5219\u4e0b\u4f20\u6807\u8bb0\n        if(o->ch[1]) o->ch[1]->t ^= 1;\n        o->t = 0; //\u6e05\u6807\u8bb0\n    }\n}\n// t ? \u5de6\u65cb : \u53f3\u65cb\nvoid rotate(Node* &o, int t) { //\u540e\u7eed\u8c03\u7528\u4fdd\u8bc1\u4e0d\u4e3aNULL\n    Node* u = o->ch[t];\n    pushdown(u); //\u540e\u7eed\u8c03\u7528\u4fdd\u8bc1o\u7684\u6807\u8bb0\u5df2\u4e0b\u4f20\uff0c\u53ea\u9700\u4e0b\u4f20u\u3002\n    o->ch[t] = u->ch[t^1];\n    u->ch[t^1] = o;\n    maintain(o);\n    maintain(u);\n    o = u;\n}\n\nvoid insert(Node* &o, int v) {\n    if(!o) o = new Node(v);\n    else {\n        insert(o->ch[v < o->v ? 0 : 1], v);\n        maintain(o);\n    }\n}\n// o:\u5f53\u524d\u8282\u70b9\uff0c k:\u6392\u540d\uff0c\u5c06o\u7684\u5b50\u6811\u4e2d\u6392\u540d\u4e3ak\u7684\u70b9\u65cb\u8f6c\u81f3o\nvoid splay(Node* &o, int k) { //\u540e\u7eed\u8c03\u7528\u4fdd\u8bc1\u4e0d\u4e3aNULL\n    pushdown(o); // \u8bbf\u95eeo\u7684\u5b50\u6811\u4e4b\u524d\u52a1\u5fc5\u5148\u4e0b\u4f20\n    int l = (o->ch[0] ? o->ch[0]->s : 0); //\u83b7\u53d6\u5de6\u5b50\u6811\u5927\u5c0f\uff0c\u4e00\u5b9a\u8981\u5224\u65ad\u662f\u5426\u4e3aNULL\n    if(l + 1 == k) return; // \u5df2\u7ecf\u65cb\u8f6c\u5230o\u4e86\n    int d = k <= l ? 0 : 1; // \u4e0b\u4e00\u6b65\u5f80(d?\u53f3:\u5de6)\u8d70\u3002\n    int k2 = d ? k - l - 1 : k; // \u4e0b\u4e00\u6b65\u7684k\n    Node* &c = o->ch[d];\n    pushdown(c); //\u4e0b\u4f20c\u7684\u6807\u8bb0\uff0c\u4ee5\u4e0b\u64cd\u4f5c\u7c7b\u4f3c\u4e0a\u9762\n    int l2 = (c->ch[0] ? c->ch[0]->s : 0);\n    if(l2 + 1 != k2) {\n        int d2 = k2 <= l2 ? 0 : 1;\n        splay(c->ch[d2], d2 ? k2 - l2 - 1 : k2);\n        if(d == d2) rotate(o, d); //\u53cc\u65cb\n        else rotate(c, d2);\n    }\n    rotate(o, d);\n}\n// \u6c42\u7b2ck\u5927\uff0c\u5728\u672c\u9898\u4e2d\u5373\u4e3a\u83b7\u53d6\u5e8f\u5217\u4e2d\u7684\u7b2ck\u4e2a\u5143\u7d20\nint kth(Node* &o, int k) {\n    splay(o, k);\n    return o->v;\n}\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for(int i = 1; i <= n; i++) {\n        insert(root, i);\n        splay(root, i); //\u987a\u4fbfSplay\u4e00\u4e0b\u52a0\u901f\u63d2\u5165\u3002\n    }\n    //\u6bcf\u6b21Splay\u5b8c\u4e4b\u540eroot->ch[1]\u4e3aNULL\uff0c\u56e0\u6b64\u53ef\u4ee5\u770b\u6210O(1)\u63d2\u5165\uff0c\u603b\u7684\u9884\u5904\u7406\u65f6\u95f4\u662fO(n)\uff0c\u867d\u7136\u8fd9\u6837\u5f62\u6210\u7684\u6811\u662f\u94fe\u7ed3\u6784\u4f46\u662f\u540e\u7eed\u64cd\u4f5c\u4f1a\u4f7f\u5176\u4fdd\u6301\u5747\u644aO(nlogn)\u7684\u590d\u6742\u5ea6\u3002\n    for(int i = 1; i <= m; i++) {\n        int l, r;\n        scanf(\"%d%d\", &l, &r);\n        if(l == 1 && r == n) root->t ^= 1;\n        else if(l == 1) {\n            splay(root, r+1);\n            root->ch[0]->t ^= 1;\n        }\n        else if(r == n) {\n            splay(root, l-1);\n            root->ch[1]->t ^= 1;\n        }\n        else {\n            splay(root, l-1);\n            splay(root->ch[1], r - (root->ch[0] ? root->ch[0]->s : 0));\n            root->ch[1]->ch[0]->t ^= 1;\n        }\n    }\n    for(int i = 1; i <= n; i++) printf(\"%d%c\", kth(root, i), i == n ? '\\n' : ' ');\n    return 0;\n}\n```",
        "postTime": 1515086581,
        "uid": 21421,
        "name": "pantw",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u56e0\u4e3a$leafytree$\u652f\u6301\u533a\u95f4\u5206\u88c2\u4e0e\u5408\u5e76\uff0c\u56e0\u6b64\u6240\u6709$FHQ$\u80fd\u505a\u7684\u9898$leafytree$\u4e5f\u80fd\u505a\u3002\n\n\u81f3\u4e8e\u8fd9\u9053\u9898\uff0c\u80af\u5b9a\u662f\u76f4\u63a5\u63d0\u53d6\u533a\u95f4\uff0c\u7136\u540e\u6253\u4e0a\u53cd\u8f6c\u6807\u8bb0\u540e\u5408\u5e76\u5373\u53ef\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5728\u4e8e$merge$\u548c$split$\u7684\u5199\u6cd5\u3002\n\n$merge$\u7684\u5199\u6cd5\u770b\u4f3c\u590d\u6742\uff0c\u5176\u5b9e\u5341\u5206\u7b80\u5355\u3002\u53ef\u4ee5\u6309\u7167$leafytree$\u7684$maintain$\u7684\u5199\u6cd5\u9b54\u6539$FHQ$\u7684$merge$\u3002\u8fd9\u91cc\u6211\u4eec\u5206\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u5206\u7c7b\u8ba8\u8bba\u3002\n\n1. $\\min\\{sz[u],sz[v]\\}\\ge \\frac{\\alpha}{1-\\alpha}\\max\\{sz[u],sz[v]\\}$:\n\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u53d1\u73b0\u76f4\u63a5\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5c06$u$\u548c$v$\u63a5\u5728\u4e0b\u9762\uff0c\u6574\u68f5\u6811\u4ecd\u7136\u5e73\u8861\u3002\n\n\u63a5\u4e0b\u6765\u7684$2$\u79cd\u60c5\u51b5\u9ed8\u8ba4$sz[u]\\ge sz[v]$\uff0c$sz[u]<sz[v]$\u7684\u5bf9\u79f0\u5199\u4e00\u4e0b\u5373\u53ef\u3002\n\n2.$sz[lson[u]]\\ge \\alpha(sz[u]+sz[v])$:\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u5c06$rson[u]$\u548c$v$\u5408\u5e76\uff0c\u8fd9\u68f5\u6811\u548c\u5de6\u8fb9\u7684$lson[u]$\u4e24\u68f5\u6811\u6ee1\u8db3\u7b2c\u4e00\u79cd\u60c5\u51b5\u3002\n\n3.\u5176\u4ed6\u60c5\u51b5:\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u5c06$rson[u]$\u62c6\u5f00\u5f62\u6210\u5de6\u53f3\u4e24\u68f5\u5b50\u6811\uff0c\u7136\u540e\u6211\u4eec\u5206\u522b\u5c06\u8fd9\u4e24\u68f5\u5b50\u6811\u548c$lson[u]$\u4ee5\u53ca$v$\u5206\u522b\u5408\u5e76\uff0c\u7136\u540e\u518d\u505a\u5224\u65ad\u3002\u53ef\u4ee5\u77e5\u9053\uff0c\u8fd9\u6837\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\u540e\uff0c\u5de6\u53f3\u4e24\u68f5\u6811\u7684\u76f8\u5bf9\u5927\u5c0f\u5dee\u4f1a\u51cf\u5c0f(\u81f3\u4e8e\u591a\u5c11\u5c31\u6709\u70b9\u96be\u7b97)\u3002\n\n\u7ecf\u8fc7\u67d0\u79cd\u795e\u79d8\u7684\u8bc1\u660e\uff0c\u53ef\u4ee5\u5f97\u5230\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u7a33\u5b9a$\\log(\\frac{\\max\\{sz[u],sz[v]\\}}{\\min\\{sz[u],sz[v]\\}})$\u7684\u3002\u8fd9\u4e2a\u590d\u6742\u5ea6\u8bc1\u660e\u975e\u5e38\u5947\u5999\uff0c\u56e0\u6b64\u8bba\u6587\u5185\u5e76\u6ca1\u6709\u8bc1\u660e\u3002\n\n$split$\u4e0e$FHQ$\u7684\u4e00\u6a21\u4e00\u6837\u3002\u590d\u6742\u5ea6\u4e3a$O(sz[u])$\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u7a33\u5b9a\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\uff0c\u5728\u6811\u5f88\u5e73\u8861\u7684\u60c5\u51b5\u4e0b\u901f\u5ea6\u6781\u5feb\u3002\n\n\u4ee3\u7801:\n\n```cpp\n#include<bits/stdc++.h>\n#define Rep(i,a,b) for(register int i=(a);i<=(b);++i)\n#define Repe(i,a,b) for(register int i=(a);i>=(b);--i)\n#define pb push_back\n#define mp make_pair\n#define eb emplace_back\n#define ef emplace_front\n#define ob pop_back\n#define of pop_front\n#define Chkmax(a,b) a=a>b?a:b\n#define Chkmin(a,b) a=a<b?a:b\ntypedef unsigned long long uint64;\ntypedef unsigned int uint32;\ntypedef long long ll;\n\nusing namespace std;\n\nnamespace IO\n{\n    const uint32 Buffsize=1<<15,Output=1<<23;\n    static char Ch[Buffsize],*S=Ch,*T=Ch;\n    inline char getc()\n    {\n        return((S==T)&&(T=(S=Ch)+fread(Ch,1,Buffsize,stdin),S==T)?0:*S++);\n    }\n    static char Out[Output],*nowps=Out;\n    \n    inline void flush(){fwrite(Out,1,nowps-Out,stdout);nowps=Out;}\n\n    template<typename T>inline void read(T&x)\n    {\n        x=0;static char ch;T f=1;\n        for(ch=getc();!isdigit(ch);ch=getc())if(ch=='-')f=-1;\n        for(;isdigit(ch);ch=getc())x=x*10+(ch^48);\n        x*=f;\n    }\n\n    template<typename T>inline void write(T x,char ch='\\n')\n    {\n        if(!x)*nowps++='0';\n        if(x<0)*nowps++='-',x=-x;\n        static uint32 sta[111],tp;\n        for(tp=0;x;x/=10)sta[++tp]=x%10;\n        for(;tp;*nowps++=sta[tp--]^48);\n        *nowps++=ch;\n    }\n}\nusing namespace IO;\n\ninline void file()\n{\n#ifndef ONLINE_JUDGE\n    FILE*DSA=freopen(\"water.in\",\"r\",stdin);\n    FILE*SDU=freopen(\"water.out\",\"w\",stdout);\n#endif\n}\n\nconst int MAXN=1e5+7;\n\nstatic int n,m;\n\nvoid init(){read(n),read(m);}\n\nnamespace leafy_tree\n{\n\tconst double alp=1-sqrt(2)/2,lim=(1-2*alp)/(1-alp),spl=alp/(1-alp);\n\tconst int NODE=2e5+7;\n\tstatic int sz[NODE],nm[NODE],son[NODE][2],rt,e,rev[NODE],sta[NODE],fa[NODE];\n\n\tvoid refresh(int h){if(son[h][1]){sz[h]=sz[son[h][0]]+sz[son[h][1]];}}\n\n\tvoid make_tree(int&h,int l,int r)\n\t{\n\t\th=++e;\n\t\tif(l==r){sz[h]=1,nm[h]=l;return;}\n\t\tint mid=(l+r)>>1;\n\t\tmake_tree(son[h][0],l,mid);\n\t\tmake_tree(son[h][1],mid+1,r);\n\t\trefresh(h);\n\t}\n\n\tvoid pushdown(int h)\n\t{\n\t\tif(son[h][0]&&rev[h])\n\t\t{\n\t\t\tswap(son[h][0],son[h][1]);\n\t\t\trev[son[h][0]]^=1,rev[son[h][1]]^=1;\n\t\t\trev[h]=0;\n\t\t}\n\t}\n\n\tinline int newnode(){return sta[e--];}\n\n\tinline void del(int u)\n\t{\n\t\tfa[son[u][0]]=fa[son[u][1]]=0;\n\t\tnm[u]=fa[u]=son[u][0]=son[u][1]=rev[u]=sz[u]=0;\n\t\tsta[++e]=u;\n\t}\n\n\tint merge(int u,int v)\n\t{\n\t\tif(!u||!v)return u|v;\n\t\tpushdown(u),pushdown(v);\n\t\t\n\t\tif(sz[u]>=sz[v]&&sz[v]>=sz[u]*spl||sz[v]>=sz[u]&&sz[u]>=sz[v]*spl)\n\t\t{\n\t\t\tregister int cur=newnode();\n\t\t\tson[cur][0]=u,son[cur][1]=v;\n\t\t\trefresh(cur);\n\t\t\treturn cur;\n\t\t}\n\t\tif(sz[u]>=sz[v])\n\t\t{\n\t\t\tpushdown(u);\n\t\t\tregister int ls=son[u][0],rs=son[u][1];\n\t\t\tdel(u);\n\t\t\tif(sz[ls]>=alp*(sz[ls]+sz[rs]+sz[v]))\n\t\t\t\treturn merge(ls,merge(rs,v));\n\t\t\telse\n\t\t\t{\n\t\t\t\tpushdown(rs);\n\t\t\t\tregister int lls=son[rs][0],rrs=son[rs][1];\n\t\t\t\tdel(rs);\n\t\t\t\treturn merge(merge(ls,lls),merge(rrs,v));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpushdown(v);\n\t\t\tregister int ls=son[v][0],rs=son[v][1];\n\t\t\tdel(v);\n\t\t\tif(sz[rs]>=alp*(sz[u]+sz[ls]+sz[rs]))\n\t\t\t\treturn merge(merge(u,ls),rs);\n\t\t\telse\n\t\t\t{\n\t\t\t\tpushdown(ls);\n\t\t\t\tregister int lls=son[ls][0],rrs=son[ls][1];\n\t\t\t\tdel(ls);\n\t\t\t\treturn merge(merge(u,lls),merge(rrs,rs));\n\t\t\t}\n\t\t}\n\t}\n\n\ttypedef pair<int,int>PII;\n\n\tPII split(int h,int x)\n\t{\n\t\tif(!x)return mp(0,h);\n\t\tif(!son[h][0])return mp(h,0);\n\t\tregister PII y;\n\t\tpushdown(h);\n\t\tint ls=son[h][0],rs=son[h][1];\n\t\tdel(h);\n\t\tif(sz[ls]>=x)\n\t\t{\n\t\t\ty=split(ls,x);\n\t\t\treturn mp(y.first,merge(y.second,rs));\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty=split(rs,x-sz[ls]);\n\t\t\treturn mp(merge(ls,y.first),y.second);\n\t\t}\n\t}\n\n\tvoid dfout(int u)\n\t{\n\t\tpushdown(u);\n\t\tif(son[u][0])dfout(son[u][0]),dfout(son[u][1]);\n\t\telse write(nm[u],' ');\n\t}\n\n\tinline void reverse(int l,int r)\n\t{\n\t\tregister PII y,z;\n\t\ty=split(rt,l-1);\n\t\tz=split(y.second,r-l+1);\n\t\trev[z.first]^=1;\n\t\trt=merge(y.first,merge(z.first,z.second));\n\t}\n}\nusing namespace leafy_tree;\n\ninline void solve()\n{\n\tmake_tree(rt,1,n),e=0;\n\tstatic int l,r;\n\tRep(i,1,m)\n\t{\n\t\tread(l),read(r);\n\t\treverse(l,r);\n\t}\n\tdfout(rt);\n\tflush();\n}\n\nint main()\n{\n\tfile();\n    init();\n    solve();\n    return 0;\n}\n```",
        "postTime": 1540438851,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u4e0d\u61c2Splay\u539f\u7406\u7684\u53ef\u4ee5\u5148\u770b\u4e0b\u6211\u7684\u535a\u5ba2\uff1a[five20](http://www.cnblogs.com/five20/p/8313385.html \"five20\")\n\n### \u601d\u8def\uff1a\n\n\u8be6\u7ec6\u89e3\u91ca\u89c1\u4ee3\u7801\u53ea\u8981\u6211\u4eec\u5f04\u61c2Splay\uff0c\u5176\u5b9e\u672c\u9898\u5f88\u7b80\u5355\uff1a\u9996\u5148\u6309\u7167\u4e2d\u5e8f\u904d\u5386\u5efa\u6811\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u6b21\u4fee\u6539\u533a\u95f4l,r\uff0c\u9996\u5148\u5f97\u63d0\u51fa\u8fd9\u6bb5\u533a\u95f4\uff0c\u65b9\u6cd5\u662f\u5c06l\u7684\u524d\u8d8bl-1\u65cb\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u5c06r\u7684\u540e\u8d8br+1\u65cb\u8f6c\u5230\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\u8bd5\u8bd5\uff0c\u5bb9\u6613\u53d1\u73b0\u7ecf\u8fc7\u8fd9\u4e2a\u64cd\u4f5c\u540e\uff0c\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\u7684\u5de6\u5b50\u6811\uff08\u5177\u4f53\u5e94\u8be5\u8bf4\u662f\u8fd9\u4e2a\u5de6\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff09\u5c31\u662f\u533a\u95f4l-r\u3002\u5173\u952e\u7684\u7ffb\u8f6c\u65f6\uff0c\u56e0\u4e3a\u6811\u662f\u4e2d\u5e8f\u904d\u5386\uff08\u5de6\u6839\u53f3\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u5c06l-r\uff08\u524d\u9762\u6240\u8bf4\u7684\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\u7684\u5de6\u5b50\u6811\uff09\u8fd9\u4e2a\u533a\u95f4\u5b50\u6811\u5de6\u53f3\u513f\u5b50\u7684\u8282\u70b9\u4ea4\u6362\u4f4d\u7f6e\uff08\u8fd9\u6837\u518d\u4e2d\u5e8f\u904d\u5386\u76f8\u5f53\u4e8e\u53f3\u6839\u5de6\uff0c\u5373\u505a\u5230\u4e86\u7ffb\u8f6c\u64cd\u4f5c\uff09\u3002\u5173\u952e\u662f\u7ffb\u8f6c\u7684\u4f18\u5316\uff0c\u6211\u4eec\u7528\u5230\u61d2\u60f0\u6807\u8bb0lazy[x]\uff08\u8868\u793ax\u662f\u5426\u7ffb\u8f6c\uff09\uff0c\u6bcf\u6b21\u7ffb\u8f6c\u65f6\u53ea\u8981\u67d0\u4e2a\u8282\u70b9\u6709\u6807\u8bb0\u4e14\u5728\u7ffb\u8f6c\u7684\u533a\u95f4\u5185\uff0c\u5219\u5c06\u6807\u8bb0\u4e0b\u653e\u7ed9\u5b83\u7684\u4e24\u4e2a\u513f\u5b50\u8282\u70b9\u4e14\u5c06\u81ea\u8eab\u6807\u8bb0\u6e050\uff0c\u8fd9\u6837\u4fbf\u907f\u514d\u4e86\u591a\u4f59\u7684\u91cd\u590d\u7ffb\u8f6c\u3002**\u8be6\u7ec6\u89e3\u91ca\u89c1\u4ee3\u7801**\n\n### \u4ee3\u7801\uff1a\n\n/\\*Splay\u53ea\u8bb0\u6a21\u677f\u662f\u5f88\u56f0\u96be\u7684\uff0c\u800c\u4e14\u771f\u6b63\u8fd0\u7528\u65f6\u6613\u751f\u758f\u51fa\u9519\uff0c\u6240\u4ee5\u5fc5\u987b\u7406\u89e3\uff0c\u5728\u770b\u4ee3\u7801\u524d\u5148\u5f04\u61c2\n\nSplay\u7684\u539f\u7406\uff0c\u8fd9\u7bc7\u4ee3\u7801\u662f\u5e26\u6ce8\u91ca\u7684Splay\u6a21\u677f\uff0c\u9898\u76ee\u6765\u81ea\u6d1b\u8c37P3391 \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014by 520\\*/\n\n    \n```cpp\n    #include<bits/stdc++.h>\n    #define il inline\n    #define debug printf(\"%d %s\\n\",__LINE__,__FUNCTION__)\n    using namespace std;\n    const int N=100005;\n    il int gi()\n    {\n        int a=0;char x=getchar();bool f=0;\n        while((x<'0'||x>'9')&&x!='-')x=getchar();\n        if(x=='-')x=getchar(),f=1;\n        while(x>='0'&&x<='9')a=a*10+x-48,x=getchar();\n        return f?-a:a;\n    }\n    int n,m,tot,root,siz[N],fa[N],lazy[N],key[N],tree[N][2],ans[N];\n```\n/\\*root\u4e3a\u6839\u8282\u70b9,siz\u5b58\u50a8\u5b50\u6811\u8282\u70b9\u6570\uff0cfa\u5b58\u50a8\u7236\u8282\u70b9\uff0clazy\u662f\u61d2\u60f0\u6807\u8bb0\u7528\u6765\u6807\u8bb0\u533a\u95f4\u7ffb\u8f6c\u64cd\u4f5c\uff0ckey\u6570\u7ec4\u5b58\u50a8\u539f\u6570\u5217\uff0ctree\u4e3a\nsplay\u6811\uff0cans\u5b58\u50a8\u7b54\u6848\\*/\n\n    \n    \n```cpp\n    il void pushup(int rt)  //\u4f5c\u7528\u7c7b\u4f3c\u4e0e\u7ebf\u6bb5\u6811\n    {\n        int l=tree[rt][0],r=tree[rt][1];         //pushup\u4f5c\u7528\u662f\u5c06\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\u66f4\u65b0\u7ed9\u6839\u8282\u70b9\n        siz[rt]=siz[l]+siz[r]+1;\n    }\n    il void pushdown(int now)\n    {\n        if(lazy[now]){\n            lazy[tree[now][0]]^=1;\n            lazy[tree[now][1]]^=1;               /*pushdown\u4f5c\u7528\u662f\u4e0b\u653e\u61d2\u60f0\u6807\u8bb0\uff0c\u82e5\u67d0\u4e00\u8282\u70b9\u6240\u5728\u5b50\u6811\uff08\u5373\u67d0\u4e00\u533a\u95f4\uff09\u88ab\u7ffb\u8f6c\n```\n\uff0c\u5219\u5c06\u61d2\u60f0\u6807\u8bb0\u4e0b\u653e\u7ed9\u4e24\u4e2a\u513f\u5b50\u8282\u70b9\uff0c\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\u4f4d\u7f6e\uff08\u4e2d\u5e8f\u904d\u5386\uff0c\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\u540e\u76f8\u5f53\u4e8e\u7ffb\u8f6c\uff09\u5e76\u5bf9\u6240\u5728\u5b50\u6811\u6839\u8282\n\u70b9\u7684\u6807\u8bb0\u6e050,\\*/\n\n    \n    \n```cpp\n            swap(tree[now][0],tree[now][1]);\n            lazy[now]=0;\n        }\n    }\n    il int getson(int x){return tree[fa[x]][1]==x;}  //getson\u5224\u65adx\u662f\u5176\u7236\u4eb2\u7684\u53f3\u513f\u5b50\u8fd8\u662f\u5de6\u513f\u5b50\n    il void rotate(int x)       //\u65cb\u8f6c\u64cd\u4f5c\uff0c\u76f4\u63a5\u5199\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\uff0c\u53ef\u4ee5\u79f0\u4e3a\u4e0a\u65cb\n    {\n        int y=fa[x],z=fa[y],b=getson(x),c=getson(y),a=tree[x][!b];  /*y\u662fx\u7684\u7236\u8282\u70b9\uff0cz\u662fy\u7684\u7236\u8282\u70b9\uff0cgetson\u89e3\u91ca\u8fc7\u4e86\u3002\n```\n\u7279\u522b\u89e3\u91ca\u4e00\u4e0ba\uff0ca\u4e3a\u65cb\u8f6c\u65f6\u9700\u8981\u79fb\u52a8\u7684\u5b50\u6811\uff0c\u82e5x\u4e3a\u5de6\u513f\u5b50\u5219\u53f3\u65cb\u65f6\u8981\u5c06x\u7684\u53f3\u5b50\u6811\u79fb\u52a8\uff0c\u540c\u7406\u82e5x\u4e3a\u53f3\u513f\u5b50\u5219\u5de6\u65cb\u65f6\u8981\n\u5c06x\u7684\u5de6\u5b50\u6811\u79fb\u52a8\uff0c\u6240\u4ee5\u8fd9\u91cca=tree[x][!b]\\*/\n\nif(z)tree[z][c]=x;else root=x;fa[x]=z; /\\*\u82e5z\u4e0d\u4e3a\u6839\u8282\u70b9\uff0c\u5219\u7528x\u66ff\u4ee3y\u7684\u4f4d\u7f6e;\u82e5z\u4e3a\u6839\u8282\u70b9\uff0c\u5219\u5c06x\u53d8\u4e3a\u6839\u8282\u70b9\u3002\\*/\n\nif(a)fa[a]=y;tree[y][b]=a; /\\*\u82e5\u5b58\u5728\u8981\u79fb\u52a8\u7684\u5b50\u6811a\uff0c\u5219\u628aa\u548cy\u76f8\u8fde\uff0c\u53d6\u4ee3\u539f\u6765x\u7684\u4f4d\u7f6e\\*/\n\ntree[x][!b]=y;fa[y]=x;  /\\*!b\u7684\u539f\u56e0\uff1a\u82e5x\u4e3a\u5de6\u513f\u5b50\u5219\u65cb\u8f6c\u540ey\u4e3ax\u7684\u53f3\u513f\u5b50\uff0c\u82e5x\u4e3a\u53f3\u513f\u5b50\u5219\u65cb\u8f6c\u540ey\u4e3ax\u7684\u5de6\u513f\u5b50\u3002\u8bb0\u5f97\u5c06y\n\n\u6307\u5411x\\*/\n\npushup(y);pushup(x);   /\\*\u65cb\u8f6c\u540e\uff0c\u5bf9\u88ab\u79fb\u52a8\u4e86\u7684y\u548cx\u66f4\u65b0\u5b83\u4eec\u5404\u81ea\u7684\u5b50\u6811\u8282\u70b9\u6570\\*/\n\n    \n```cpp\n    }\n    il void splay(int x,int i)\n    {\n        while(fa[x]!=i){          //\u53ea\u8981x\u6ca1\u6709\u65cb\u8f6c\u5230\u9700\u8981\u7684\u70b9\u4e0b\u9762\uff0c\u5219\u4e00\u76f4\u65cb\uff0c\u6ce8\u610f\u6839\u8282\u70b9\u7684\u7236\u4eb2\u4e3a\u865a\u70b90\n            int y=fa[x],z=fa[y];\n            if(z==i)rotate(x);     //\u82e5x\u7684\u7237\u7237\u662fi\uff0c\u5219\u53ea\u9700\u65cb\u4e00\u6b21\n            else {    \n                if(getson(x)==getson(y)){rotate(y);rotate(x);}   /*\u82e5x\u548cy\u4e3a\u76f8\u540c\u504f\u5411\uff0c\u5219\u8fdb\u884cZig-Zig\u6216Zag-Zag\u64cd\u4f5c*/\n                else {rotate(x);rotate(x);}   /*\u5426\u5219\u8fdb\u884cZig-Zag\u6216Zag-Zig\u64cd\u4f5c*/\n```\n/\\*\u6ce8\u610frotate\u51fd\u6570\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u8fd9\u56db\u79cd\u64cd\u4f5c\u60c5\u51b5\u4e86\\*/\n    \n    \n    \n    \n```cpp\n            }\n        }\n    }\n    il int find(int x)    //\u67e5\u627ex\u7684\u4f4d\u7f6e\n    {\n        int now=root;    //\u4ece\u6839\u8282\u70b9\u5f80\u4e0b\n        while(1){\n            pushdown(now);    //\u672c\u6b21\u64cd\u4f5c\u8981\u5c06\u524d\u9762\u7684\u6807\u8bb0\u8fdb\u884c\u7ffb\u8f6c\n            if(tree[now][0]&&x<=siz[tree[now][0]])now=tree[now][0];   //\u82e5\u5b58\u5728\u5de6\u5b50\u6811\u4e14x\u5c0f\u4e8e\u7b49\u4e8e\u5de6\u5b50\u6811\u7684\u8282\u70b9\u6570\uff0c\u5219x\u5728\u5de6\u5b50\u6811\u4e0a\n            else {\n                int tmp=(tree[now][0]?siz[tree[now][0]]:0)+1;   //\u5f80\u53f3\u5b50\u6811\u627e\uff0c+1\u4ee3\u8868\u52a0\u4e0a\u8fd9\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9\n                if(x==tmp)return now;      //\u82e5\u627e\u5230\u4e86x\uff0c\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e\n                x-=tmp;      //\u5426\u5219x\u51cf\u53bb\u6839\u8282\u70b9\u53f3\u5b50\u6811\u4ee5\u5916\u7684\u8282\u70b9\u6570\uff0c\u8fd9\u4e2a\u753b\u56fe\u80fd\u7406\u89e3\uff0c\u56e0\u4e3asiz\u503c\u5e76\u4e0d\u662f\u76f4\u63a5\u7684x\u7684\u503c\n                now=tree[now][1];  //\u5c06\u539f\u6765\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\u8d4b\u4e3a\u65b0\u7684\u6839\u8282\u70b9\uff0c\u7ee7\u7eed\u9012\u5f52\u67e5\u627ex\u4f4d\u7f6e\n            }\n        }\n    }\n    il int build(int l,int r,int rt)   //\u5efa\u6811\u8fc7\u7a0b\u548c\u7ebf\u6bb5\u6811\u7c7b\u4f3c\n    {\n        int now=l+r>>1;\n        fa[now]=rt;\n        key[now]=ans[now];        //key\u5b58\u539f\u6570\u7ec41\u5230n\uff0c\u51c6\u786e\u8bf4\u662f0\u5230n+1,\u539f\u56e0\u662f\u4e3b\u51fd\u6570\u91cc\u7684\u9884\u5904\u7406\n        if(l<now)tree[now][0]=build(l,now-1,now);\n        if(r>now)tree[now][1]=build(now+1,r,now);\n        pushup(now);   //\u8bb0\u5f97pushup\n        return now;\n    }\n    il void print(int now)   //\u8f93\u51fa\u65f6\u4e2d\u5e8f\u904d\u5386\uff0c\u6309\u5de6\u6839\u53f3\u8f93\u51fa\n    {\n        pushdown(now);   //\u8bb0\u5f97\u8981\u7ffb\u8f6c\n        if(tree[now][0])print(tree[now][0]);   //\u56e0\u4e3a\u4e2d\u5e8f\u904d\u5386\u5de6\u6839\u53f3\uff0c\u6240\u4ee5\u9012\u5f52\u6839\u8282\u70b9\u5de6\u5b50\u6811\u5230\u7b2c\u4e00\u4e2a\u6570\u7684\u4f4d\u7f6e\n        ans[++tot]=key[now];   //\u56de\u6eaf\u65f6\u5b58\u50a8\u7b54\u6848,\u6ce8\u610f\u6211\u4eec\u7ffb\u8f6c\u64cd\u4f5c\u7684\u662f\u539f\u6570\u7ec4\u4e0b\u6807\n        if(tree[now][1])print(tree[now][1]);   //\u540c\u7406\u9012\u5f52\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\n    }\n    int main()\n    {\n        n=gi(),m=gi();int x,y;\n        for(int i=1;i<=n+2;i++)ans[i]=i-1;    /*\u56e0\u4e3a\u53d6\u51fa\u64cd\u4f5c\u533a\u95f4\u65f6\u65cb\u8f6c\u7684\u662fx\u7684\u524d\u9a71\u548cy\u7684\u540e\u9a71\uff0c\u6240\u4ee5\u9884\u5904\u7406\u65f6\u7b2ci\u4e2a\u70b9\n```\n\u5b58\u7684\u662fi\u7684\u524d\u9a71\\*/\n```cpp\n        root=build(1,n+2,0);\n        while(m--)\n        {\n            x=gi(),y=gi();\n            x=find(x),y=find(y+2);  /*\u67e5\u627ex\u7684\u524d\u9a71\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u548cy\u540e\u9a71\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u9884\u5904\u7406\u65f6ans\u5b58\u7684\u662f\u524d\u8d8b\uff0c\n```\n\u6240\u4ee5\u76f4\u63a5\u67e5\u627ex\uff0c\u800cy\u7684\u540e\u9a71\u53d8\u6210\u4e86y+2\\*/\nsplay(x,0);splay(y,x);  /\\*\u5c06x\u524d\u9a71\u4e0a\u65cb\u81f3\u6839\u8282\u70b9\uff0cy\u7684\u540e\u9a71\u4e0a\u65cb\u6210\u6839\u8282\u70b9\u53f3\u513f\u5b50\u7684\u5de6\u5b50\u6811\\*/\n\nlazy[tree[tree[root][1]][0]]^=1;//\u7ecf\u8fc7\u65cb\u8f6c\u540e\uff0c\u6b64\u65f6\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\u7684\u5de6\u5b50\u6811\u5c31\u662f\u9700\u8981\u7ffb\u8f6c\u7684\u533a\u95f4\uff0c\u6240\u4ee5lazy\u6807\u8bb0\n\n```cpp\n        }\n        print(root);\n        for(int i=1;i<=n;i++)printf(\"%d \",ans[i+1]);   //\u8f93\u51fa\u65f6\u5c06\u524d\u9a71\u8fd8\u539f\u4e3a\u539f\u6570\n        return 0;\n}\n```",
        "postTime": 1516443562,
        "uid": 44000,
        "name": "\u6d45\u8272\u8c03",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "# Splay\n\n\u9996\u5148\u8fd9\u662f\u4e00\u4e2a[\u4e8c\u53c9\u641c\u7d22\u6811](https://oi-wiki.org/ds/bst/)\u3002\n\n\u7c7b\u4f3c\u7684\u8fd8\u6709\uff0c\u7ea2\u9ed1\u6811\uff0ctreap\uff0cAVL\uff0cSBT ~~(\u50bbx\u6811)~~ \u7b49\u7b49\n\n Splay \u56e0\u5176\u4ee3\u7801\u9002\u4e2d\uff0c\u4f7f\u7528\u7075\u6d3b\uff0c~~\u6df1\u53d7\u5e7f\u5927OIer\u559c\u7231(~~\n\n### \u5de6\u65cb\u4e0e\u53f3\u65cb\n\n Splay \u6709\u4e00\u4e2a\u5de6\u65cb\u548c\u53f3\u65cb\u7684\u7684\u64cd\u4f5c\uff0c\u662f\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u6838\u5fc3\n\n\u8ba9\u6211\u4eec\u76f4\u63a5\u6765\u770b\u8fc7\u7a0b\u3002\n\n\u5047\u8bbe\u6211\u4eec\u6709\u68f5\u8fd9\u6837\u7684\u6811\uff1a\n\n![](https://img.imgdb.cn/item/6039f0f45f4313ce25f3bae1.png)\n\n\u628a $x$ \u53f3\u65cb\u4e4b\u540e:\n\n![](https://img.imgdb.cn/item/6039f2bc5f4313ce25f56da0.png)\n\n\u5de6\u65cb\u4e5f\u662f\u540c\u6837\u7684\u9053\u7406\u3002\n\n Splay \u5c31\u662f\u901a\u8fc7\u65cb\u8f6c\u6765\u4fdd\u6301\u5e73\u8861\uff0c\u5e76\u8fdb\u884c\u63d2\u5165\uff0c\u67e5\u8be2\u7684\u3002\n\n\u6211\u4eec\u6bcf\u6b21\u64cd\u4f5c\u4e00\u4e2a\u8282\u70b9\uff0c\u5747\u5c06\u8be5\u8282\u70b9\u65cb\u8f6c\u5230\u6811\u6839\u3002\n\n\u542c\u8d77\u6765\u9ebb\u70e6\uff0c\u4f46\u6309\u7167 Splay \u7684\u64cd\u4f5c\u65b9\u5f0f\u5355\u6b21\u64cd\u4f5c\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u6709 $O(log\\ n)$ \u7ea7\u522b\u3002\n\n\u6211\u4eec\u5982\u4f55\u5c06\u4e00\u4e2a\u8282\u70b9\u8f6c\u81f3\u6839\u8282\u70b9\uff1f\n\n\u5b9a\u4e49\u4e00\u4e2a Splay \u64cd\u4f5c `Splay(x,k)` \u4e3a\u5c06\u70b9 $x$ \u65cb\u8f6c\u5230\u70b9 $k$ \u7684\u4e0b\u9762\u3002\n\n\u5411\u4e0a\u65cb\u8f6c\u5206\u56db\u79cd\u60c5\u51b5\uff1a\n![](https://img.imgdb.cn/item/603a05a25f4313ce250ad372.png)\n\n\u6211\u4eec\u53ea\u8ba8\u8bba\u524d\u4e24\u79cd\u60c5\u51b5\uff0c\u540e\u9762\u7684\u60c5\u51b5\u90fd\u662f\u524d\u9762\u7684\u955c\u50cf\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5148\u53f3\u65cb $y$ \uff0c\u518d\u53f3\u65cb $x$\uff0c\u5f97\u5230\u4e0b\u9762\u7684\u4e1c\u897f\u3002\n\n![](https://img.imgdb.cn/item/603a07495f4313ce250c7f0e.png)\n\n\u6bcf\u6b21\u65cb\u8f6c\uff0c$x$ \u8282\u70b9\u5411\u4e0a\u8df3 $2$ \u5c42\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u8fde\u7eed\u8f6c\u4e24\u6b21 $x$ \u5c31\u53ef\u4ee5\u4e86,\u5148\u5de6\u65cb\u4e00\u6b21\u518d\u53f3\u65cb\u4e00\u6b21\u3002\n\n![](https://img.imgdb.cn/item/603a0a0b5f4313ce250f3593.png)\n\n**\u6ce8\u610f**\uff1a\u4e0d\u8981\u968f\u4fbf\u778e\u8f6c\uff0c\u53ea\u6709\u8fd9\u6837\u8f6c\u624d\u80fd\u4fdd\u8bc1 $log$ \u7ea7\u7684\u590d\u6742\u5ea6\u3002\n\n\u5b9e\u9645\u4e0a\u8fd9\u4e2a $k$ \uff0c\u4e00\u822c\u5c31\u4e24\u4e2a\u503c\uff0c\u4e00\u4e2a\u662f $0$ (\u8868\u793a\u8f6c\u5230\u6839\u8282\u70b9\u4e0b\u9762)\uff0c\u4e00\u4e2a\u662f\u6839\u8282\u70b9\u3002\n\n### \u63d2\u5165\n\n\u4e00\u822c\u7684\u63d2\u5165\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06 Splay \u5f53\u505a\u4e00\u822c\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u63d2\u5165\u5230\u5b83\u8be5\u88ab\u63d2\u5165\u7684\u5730\u65b9\u3002\n\n\u7136\u800c\u8fd8\u6709\u5176\u4ed6\u60c5\u51b5\u3002\n\n\u6bd4\u5982\u8ba9\u6211\u4eec\u628a\u4e00\u4e2a\u5e8f\u5217\u63d2\u5728 $y$ \u540e\u9762\u3002\u4e5f\u5c31\u662f\u8bf4\u5728\u4e2d\u5e8f\u904d\u5386\u91cc\u9762\u5e8f\u5217\u5728 $y$ \u7684\u540e\u9762\u3002\n\n\u6211\u4eec\u7b2c\u4e00\u6b65\u5148\u627e\u5230 $y$ \u7684\u540e\u7ee7\u3002\n\n\u7b2c\u4e8c\u6b65\uff0c\u6211\u4eec\u5c06 $y$ \u8f6c\u5230\u6839\u4e0a\uff0c\u5373 `Splay(y,0)`\u3002\n\n\u7b2c\u4e09\u6b65\uff0c\u5c06 $z$ \u8f6c\u5230 $y$ \u7684\u540e\u9762\u3002\n\n\u6709\u5e73\u8861\u6811\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u6211\u4eec\u77e5\u9053 $z$ \u7684\u5de6\u5b50\u6811\u4e00\u5b9a\u662f\u7a7a\u7684\u3002\n\n\u6211\u4eec\u628a\u8981\u63d2\u5165\u7684\u5e8f\u5217\u6784\u9020\u6210\u4e8c\u53c9\u641c\u7d22\u6811\u76f4\u63a5\u63a5\u4e0a\u53bb\u5c31\u597d\u4e86\u3002\n\n### \u5220\u9664\n\n\u6211\u4eec\u5e0c\u671b\u5220\u9664 $L,R$ \u5185\u7684\u6240\u6709\u6570\u3002\n\n\u7b2c\u4e00\u6b65\uff0c\u627e\u5230 $L$ \u7684\u524d\u9a71 $L-1$ \u548c $R$ \u7684\u540e\u7f00 $R+1$\u3002\n\n\u7b2c\u4e8c\u6b65\uff0c\u5c06 $L-1$ \u8f6c\u5230\u6839\u8282\u70b9\uff0c $R+1$ \u8f6c\u5230\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\u4e0a\u3002\n\n\u7b2c\u4e09\u6b65\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u8981\u5220\u9664\u7684\u533a\u95f4\u5c31\u662f\u53f3\u513f\u5b50\u7684\u5de6\u5b50\u6811\u3002\u76f4\u63a5\u6e05\u7a7a\u5de6\u5b50\u6811\u5373\u53ef\u3002\n\n### \u7ef4\u62a4\u4fe1\u606f\n\n Splay \u5982\u4f55\u53d6\u7ef4\u62a4\u4e00\u4e2a\u4fe1\u606f\u5462?\n\n\u4ee5\u4e0b\u9762\u7684\u6a21\u677f\u9898\u4e3a\u4f8b\u3002\n\n\u6211\u4eec\u8981\u6c42\u627e\u5230\u7b2c $k$ \u4e2a\u6570\uff0c\u6240\u4ee5\u8981\u7ef4\u62a4\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570  $size$\u3002\n\n\u7b2c\u4e8c\u4e2a\u662f\u533a\u95f4\u7ffb\u8f6c\u7684\u61d2\u6807\u8bb0 $flag$ \u3002\n\n\u9996\u5148\u662f `pushup` \u64cd\u4f5c\uff1a\n\n\u5f53\u524d\u8282\u70b9\u6240\u5728\u5b50\u6811\u7684 $size=$ \u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u7684 $size+$ \u53f3\u5b50\u6811\u7684 $size+1$ \u3002\n\n\u53e6\u5916\u4e00\u4e2a\u5c31\u662f `pushdown` \u64cd\u4f5c\uff0c\u5c31\u662f\u4e0b\u4f20\u61d2\u6807\u8bb0\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u9898\u7684\u533a\u95f4\u7ffb\u8f6c\uff0c\u6211\u4eec\u9996\u5148\u8981\u4ea4\u6362\u5de6\u53f3\u4e24\u4e2a\u513f\u5b50\u3002\n\n\u7136\u540e\u5c06 $flag$ \u4e0b\u4f20\u5230\u5de6\u53f3\u513f\u5b50\uff0c\u6e05\u7a7a\u5f53\u524d\u70b9\u7684 $flag$\u3002\n\n`pushup` \u51fd\u6570\u5e94\u9053\u653e\u5728\u65cb\u8f6c\u7684\u6700\u540e\u3002\n\n`pushdown` \u5e94\u8be5\u653e\u5728\u6240\u6709\u5411\u4e0b\u904d\u5386\u8fc7\u7a0b\u7684\u5f00\u5934\u3002\n\n Splay \u5e94\u4fdd\u8bc1\u4e2d\u5e8f\u904d\u5386\u662f\u5f53\u524d\u5e8f\u5217\u7684\u987a\u5e8f\u3002\n\n\n## \u4f8b\u9898\n\n### [\u6a21\u677f] \u6587\u827a\u5e73\u8861\u6811\n\n\u60a8\u9700\u8981\u5199\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff08\u53ef\u53c2\u8003\u9898\u76ee\u6807\u9898\uff09\uff0c\u6765\u7ef4\u62a4\u4e00\u4e2a\u6709\u5e8f\u6570\u5217\u3002\n\n\u5176\u4e2d\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u64cd\u4f5c\uff1a\u7ffb\u8f6c\u4e00\u4e2a\u533a\u95f4\uff0c\u4f8b\u5982\u539f\u6709\u5e8f\u5e8f\u5217\u662f $5\\ 4\\ 3\\ 2\\ 1$\uff0c\u7ffb\u8f6c\u533a\u95f4\u662f $[2,4]$ \u7684\u8bdd\uff0c\u7ed3\u679c\u662f $5\\ 2\\ 3\\ 4\\ 1$\u3002\n\n#### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u4e24\u4e2a\u6b63\u6574\u6570 $n,m$\uff0c\u8868\u793a\u5e8f\u5217\u957f\u5ea6\u4e0e\u64cd\u4f5c\u4e2a\u6570\u3002\u5e8f\u5217\u4e2d\u7b2c $i$ \u9879\u521d\u59cb\u4e3a $i$\u3002\n\n\u63a5\u4e0b\u6765 $m$ \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570 $l,r$\uff0c\u8868\u793a\u7ffb\u8f6c\u7684\u533a\u95f4\u3002\n\n#### \u8f93\u51fa\u683c\u5f0f\n\u8f93\u51fa\u4e00\u884c $n$ \u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u539f\u59cb\u5e8f\u5217\u7ecf\u8fc7 $m$ \u6b21\u53d8\u6362\u540e\u7684\u7ed3\u679c\u3002\n\n#### \u8f93\u5165\u6837\u4f8b\uff1a\n```\n6 3\n2 4\n1 5\n3 5\n```\n#### \u8f93\u51fa\u6837\u4f8b\uff1a\n```\n5 2 1 4 3 6\n```\n\n#### \u89e3\u6790\n\n Splay \u677f\u5b50\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N=100010;\n\nint n,m;\nstruct node\n{\n\tint s[2],p,v;\n\tint size,flag;\n\n\tvoid init(int _v,int _p)\n\t{\n\t\tv=_v, p=_p;\n\t\tsize=1;\n\t}\n} tree[N];\n\nint root,idx=0;\n\n#define lnode tree[node].s[0]\n#define rnode tree[node].s[1]\n\nvoid push_up(int node)\n{\n\ttree[node].size=tree[lnode].size+tree[rnode].size+1;\n}\n\nvoid push_down(int node)\n{\n\tif(tree[node].flag)\n\t{\n\t\tswap(lnode,rnode);\n\t\ttree[lnode].flag^=1;\n\t\ttree[rnode].flag^=1;\n\t\ttree[node].flag=0;\n\t}\n}\n\nvoid rotate(int x)//\u65cb\u8f6c(\u5de6\u65cb\u548c\u53f3\u65cb\u5408\u5e76\u5728\u4e00\u8d77)\n{\n\tint y=tree[x].p,z=tree[y].p;\n\tint k=tree[y].s[1]==x;// k=1 \u53f3\u513f\u5b50 k=0 \u5de6\u513f\u5b50\n\n\ttree[z].s[tree[z].s[1]==y]=x;\n\ttree[x].p=z;\n\n\ttree[y].s[k]=tree[x].s[k^1];\n\ttree[tree[x].s[k^1]].p=y;\n\n\ttree[x].s[k^1]=y; tree[y].p=x;\n\tpush_up(y); push_up(x);\n}\n\nvoid splay(int x,int k)\n{\n\twhile(tree[x].p!=k)\n\t{\n\t\tint y=tree[x].p,z=tree[y].p;\n\t\tif(z!=k)\n\t\t{\n\t\t\tif((tree[y].s[1]==x)^(tree[z].s[1]==y))//\u662f\u5426\u4e3a\u6298\u7ebf\u5173\u7cfb\n\t\t\t\trotate(x);\n\t\t\telse rotate(y);\n\t\t}\n\t\trotate(x);\n\t}\n\tif(!k) root=x;\n}\n\nvoid insert(int v)//\u4e00\u822c\u4e8c\u53c9\u6811\u63d2\u5165\n{\n\tint u=root,p=0;\n\twhile(u) p=u,u=tree[u].s[v>tree[u].v];\n\tu=++idx;\n\tif(p) tree[p].s[v>tree[p].v]=u;\n\ttree[u].init(v,p);\n\tsplay(u,0);\n}\n\nint get_(int k)//\u627e\u5230\u4e2d\u5e8f\u904d\u5386\u4e0b\u7b2ck\u4e2a\u6570\n{\n\tint u=root;\n\twhile(1)\n\t{\n\t\tpush_down(u);\n\t\tif(tree[tree[u].s[0]].size>=k) u=tree[u].s[0];\n\t\telse if(tree[tree[u].s[0]].size+1==k) return u;\n\t\telse k-=tree[tree[u].s[0]].size+1,u=tree[u].s[1];\n\t}\n\treturn -1;\n}\n\nvoid output(int node)//\u4e2d\u5e8f\u904d\u5386\n{\n\tpush_down(node);\n\tif(lnode) output(lnode);\n\tif(tree[node].v>=1 && tree[node].v <= n) printf(\"%d \",tree[node].v);\n\tif(rnode) output(rnode);\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\t/*\u7531\u4e8e\u6211\u4eec\u5728\u64cd\u4f5c\u7684\u65f6\u5019\u8981\u53d6\u533a\u95f4\u7684\u524d\u4e00\u4e2a\u70b9\u6216\u540e\u4e00\u4e2a\u70b9\uff0c\n\t  \u6240\u4ee5\u8981\u5728\u5e8f\u5217\u9996\u5c3e\u6dfb\u52a0\u4e24\u4e2a\u54e8\u5175\u9632\u6b62\u8d8a\u754c*/\n\tfor(int i=0;i<=n+1;i++) insert(i);//\u63d2\u5165\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint l,r;\n\t\tscanf(\"%d%d\",&l,&r);\n\t\tl=get_(l),r=get_(r+2);//\u6211\u4eec\u52a0\u4e86\u54e8\u5175\uff0c\u6240\u4ee5\u5e8f\u53f7\u8981\u5e73\u79fb\u4e00\u4f4d\n\t\tsplay(l,0),splay(r,l);\n\t\ttree[tree[r].s[0]].flag^=1;\n\t}\n\toutput(root);\n\treturn 0;\n}\n\n```",
        "postTime": 1614591116,
        "uid": 278259,
        "name": "RemiliaScarlet\u25ce",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3391 \u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811"
    },
    {
        "content": "##### $FHQ$_$treap$(\u7801\u91cf\u5c0f\u8d85\u597d\u7406\u89e3)\n**\u4fee\u6539\u4e86\u4e00\u4e9b\u9519\u522b\u5b57\uff0c\u7ba1\u7406\u5458\u6c42\u901a\u8fc7**\n\n\n\u5982\u679c\u4e0d\u4f1a\u7528$FHQ$\u505aP3369\u7684\u8bf7[\u5de6\u8f6c](https://www.luogu.com.cn/blog/zxjMCMF/p3369-mu-ban-pu-tong-ping-heng-shu)\n>\u524d\u8a00\uff1a\u603b\u611f\u89c9\u8fd9\u4e48\u505a\u6ca1\u6709\u90a3\u4e48\u5f3a\u5e73\u8861\u6811\u7684\u611f\u89c9(\u6211\u592a\u83dc\u4e86)\uff0c\u56e0\u4e3a\u4f5c\u4e3a\u6743\u503c\u7684pos\u5e76\u6ca1\u6709\u5728\u7a0b\u5e8f\u4e2d\u76f4\u63a5\u4f53\u73b0\uff0c\u4f46\u597d\u597d\u60f3\u60f3\u4e5f\u53ef\u4ee5\u7406\u89e3\u4ee5$size$\u4e3a\u6bd4\u8f83\u65b9\u6848\u7684$Split$\u3002\u56e0\u6b64\u4f1a\u4ee5\u6b64\u6bd4\u8f83\u65b9\u6848\u53ca\u5176\u539f\u56e0\u4f5c\u4e3a\u91cd\u70b9\n\n**\u6ce8\u610f\uff1a** \u4e0eP3369\u666e\u901a\u5e73\u8861\u6811\u7684\u533a\u522b\n\n\u51fd\u6570|\u5728\u666e\u901a\u5e73\u8861\u6811\u4e2d|\u5728\u6587\u827a\u5e73\u8861\u6811\u4e2d\n:--:|:--:|:--:\n$Split$|\u4ee5v\u4f5c\u4e3a\u6bd4\u8f83\u65b9\u6848|\u4ee5size\u4f5c\u4e3a\u6bd4\u8f83\u65b9\u6848\uff0cv\u53ea\u4f5c\u4e3a\u8be5\u8282\u70b9\u5728\u539f\u5e8f\u5217\u4e2d\u5bf9\u5e94\u7684\u503c\n$Merge$|\u76f4\u63a5\u5408|\u5148\u8981\u628a\u7ffb\u8f6c\u6807\u8bb0\u4e0b\u4f20\n$pushdown$|\u65e0|\u5982\u679c\u81ea\u5df1\u6807\u8bb0\u4e3a1\uff0c\u628a\u81ea\u5df1\u6807\u8bb0\u6e05\u7a7a\uff0c\u628a\u6807\u8bb0^\u7ed9\u4e24\u4e2a\u513f\u5b50,\u6362\u4e00\u4e0b\u5de6\u53f3\u513f\u5b50\n\n**$Split$\u7406\u89e3**\n\n```cpp\nvoid split(int now,int &a,int &b,int k){\n\tif(now==0){a=0;b=0;return;}\n\tpushdown(now);\n\tif(si[t[now][0]]<k){\n\t\ta=now;\n\t\tsplit(t[now][1],t[now][1],b,k-si[t[now][0]]-1);\n\t}\n\telse{\n\t\tb=now;\n\t\tsplit(t[now][0],a,t[now][0],k);\n\t}\n\tpushup(now);\n}\n```\n~~\u611f\u89c9\u602a\u602a\u7684\uff1f~~\n\n+ \u6211\u4eec\u4ee5\u8be5\u70b9\u5bf9\u5e94\u7684\u6570\u5728**\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u4e3a\u6743\u503c**\u5efa\u6811\u3002\n\n+ \u4f46\u5982\u679c\u771f\u7528\u4e00\u4e2a\u6743\u503c\u8868\u793a\u4f4d\u7f6e\uff0c\u7136\u540e\u50cfp3369\u4e2d\u4e00\u6837\u5224\u65ad\uff0c\u6bcf\u6b21\u7ffb\u8f6c\u6700\u591a\u4f1a\u6709n\u4e2a\u6811\u8282\u70b9\u7684\u6743\u503c\u53d1\u751f\u53d8\u5316\u3002\u800c\u4e14\u5f88\u96be\u4f18\u5316\uff0c\u8003\u8651\u6362\u79cd\u65b9\u6cd5\u3002\n\n+ \u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u6309**\u4f4d\u7f6e**\u5efa\u4e86\u4e00\u68f5\u6811\uff0c\u90a3\u4e48\u70b9now\u5bf9\u5e94\u7684\u6570\u5728**\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e**\u5e94\u8be5\u662f**size[l_son]+1**\u3002\u56e0\u4e3a**\u5de6\u5b50\u6811**\u7684\u6743\u503c\u5168\u90fd\u5c0f\u4e8e\u5b83(\u56e0\u4e3a\u503c\u662f\u4f4d\u7f6e\uff0c\u6545\u503c\u90fd\u4e0d\u76f8\u540c)\u3002\n\n+ \u6bcf\u6b21\u7ffb\u8f6c\uff0c\u5c31\u5728\u7ffb\u8f6c\u533a\u95f4\u5bf9\u5e94\u5b50\u6811(\u5355\u72ec\u88c2\u5f00\u6210\u4e00\u4e2a\u5b50\u6811)\u7684\u6839\u6253\u4e00\u4e2a**\u6807\u8bb0**\uff0c\u7136\u540e\u53ea\u6709\u5728$Split$\u6216$Merge$\u8be5\u70b9\u65f6\u5c06**\u6807\u8bb0\u4e0b\u4f20**\u3002\u56e0\u4e3a\u7ffb\u8f6c\u540e\u5de6\u5b50\u6811\u7684\u6743\u503c\u90fd\u4f1a\u6bd4\u6839\u5927\uff0c\u53f3\u5b50\u6811\u90fd\u4f1a\u6bd4\u6839\u5c0f\uff0c\u6545**\u628a\u5de6\u53f3\u513f\u5b50\u6362\u4e00\u4e0b**(\u5de6\u513f\u5b50\u6307\u9488\u6307\u5411\u53f3\u513f\u5b50\uff0c\u53f3\u513f\u5b50\u6307\u9488\u6307\u5411\u5de6\u513f\u5b50)\u3002\u56de\u6eaf\u65f6\u518d\u7edf\u8ba1\u73b0\u5728\u7684$size$\u5b8c\u6210\u66f4\u65b0\u5373\u53ef\\\n~~\u8fd8\u4e0d\u7406\u89e3\u753b\u4e2a\u6811\u7ffb\u4e00\u4e0b\u5427~~\n\n\u6700\u540e\uff0c\u56e0\u4e3a\u662f\u4ee5$pos$\u4e3a\u6743\u503c(\u867d\u7136\u672a\u76f4\u63a5\u4f53\u73b0)\u7684\u5e73\u8861\u6811\uff0c\u4e14v[]\u8868\u793a\u8be5\u8282\u70b9\u5bf9\u5e94\u5e8f\u5217\u4e2d\u7684\u503c\uff0c\u76f4\u63a5\u4eceroot\u4e2d\u5e8f\u904d\u5386\u8f93\u51fav\u5373\u53ef\n#### \u5404\u6570\u7ec4\u610f\u4e49\n+ v[ ]\uff1a\u8be5\u70b9\u5bf9\u5e94\u5e8f\u5217\u4e2d\u6570\u7684\u503c\n+ key[ ]:\u7c7b\u4f3ctreap\u7528\u6765\u7ef4\u62a4\u5e73\u8861\u7684\u5173\u952e\u5b57\n+ t[ ][ ]:\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u3002\u5de6:0 \u53f3:1\n+ f[ ]:\u7ffb\u8f6c\u6807\u8bb0\u6570\u7ec4\u30020\u8868\u793a\u4e0d\u7ffb\uff0c1\u8868\u793a\u7ffb\n+ si[ ]:\u5b50\u6811\u5927\u5c0f\n#### \u5404\u51fd\u6570\u4ee3\u7801\n+ ##### $new$_$node$\n```cpp\ninline int new_node(int x){\n\tv[++cnt]=x; key[cnt]=rand(); si[cnt]=1; f[cnt]=0;\n\treturn cnt;\n}\n```\n+ ##### $pushdown$\n```cpp\ninline void pushdown(int x){\n\tif(f[x]){\n\t\tswap(t[x][0],t[x][1]); f[t[x][0]]^=1; f[t[x][1]]^=1; f[x]^=1;\n\t}\n}\n```\n+ ##### $pushup$\n```cpp\ninline void pushup(int x){\n\tsi[x]=si[t[x][0]]+si[t[x][1]]+1;\n}\n```\n+ ##### $Split$\n```cpp\nvoid split(int now,int &a,int &b,int k){\n\tif(now==0){a=0;b=0;return;}\n\tpushdown(now);\n\tif(si[t[now][0]]<k){\n\t\ta=now;\n\t\tsplit(t[now][1],t[now][1],b,k-si[t[now][0]]-1);\n\t}\n\telse{\n\t\tb=now;\n\t\tsplit(t[now][0],a,t[now][0],k);\n\t}\n\tpushup(now);\n}\n```\n+ ##### $Merge$\n```cpp\nint merge(int a,int b){\n\tif(!a||!b) return a+b;\n\tif(key[a]<=key[b]){\n\t\tpushdown(a);\n\t\tt[a][1]=merge(t[a][1],b);\n\t\tpushup(a);\n\t\treturn a;\n\t}\n\telse{\n\t\tpushdown(b);\n\t\tt[b][0]=merge(a,t[b][0]);\n\t\tpushup(b);\n\t\treturn b;\n\t}\n}\n```\n+ ##### $out$\n```cpp\nvoid out(int now){\n\tpushdown(now);\n\tif(t[now][0]) out(t[now][0]);\n\tprintf(\"%d \",v[now]);\n\tif(t[now][1]) out(t[now][1]);\n}\n```\n+ ##### $main$\n```cpp\nint main(){\n\tn=rd(); m=rd();\n\trt=new_node(1);\n\tfor(ri i=2;i<=n;i++) rt=merge(rt,new_node(i));\n\tint l,r,a,b,c;\n\twhile(m--){\n\t\tl=rd(); r=rd();\n\t\tsplit(rt,a,b,l-1); split(b,b,c,r-l+1); f[b]^=1;\n\t\trt=merge(merge(a,b),c);\n\t}\n\tout(rt);\n\treturn 0;\n}\n```",
        "postTime": 1605314394,
        "uid": 108111,
        "name": "Lumos\u58f9\u7396\u8d30\u58f9",
        "ccfLevel": 0,
        "title": "P3391 \u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811"
    },
    {
        "content": "\u8fd9\u9898\u76ee\u8c03\u4e86\u6211\u597d\u4e45\uff0c\u6700\u540e\u53d1\u73b0\u662f\u5168\u5c40\u53d8\u91cf\u7684\u9505qwq\u3002\n\n\u6700\u8fd1\u521a\u5b66Splay\uff0c\u603b\u7b97\u641e\u660e\u767d\u4e86Splay\u7ef4\u62a4\u5e8f\u5217\u7684\u539f\u7406\u3002\u5c31\u6765\u53d1\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\u3002\n\n\u9996\u5148\u6211\u4eec\u7684\u8fd9\u4e00\u9897Splay\u7684\u4e2d\u5e8f\u904d\u5386\u5373\u4e3a\u6211\u4eec\u8981\u6c42\u7684\u7ed3\u679c\u3002\u8fd9\u91cc\u7684Splay\u5e76\u4e0d\u662f\u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u5e73\u8861\u4e8c\u53c9\u6811\uff08\u5373\u67d0\u4e2a\u8282\u70b9\u7684\u5de6\u513f\u5b50\u7684\u6743\u503c\u5c0f\u4e8e\u8be5\u8282\u70b9\u7684\u6743\u503c\uff0c\u53f3\u513f\u5b50\u8282\u70b9\u7684\u6743\u503c\u5927\u4e8e\u8be5\u8282\u70b9\u7684\u6743\u503c\uff09\u8282\u70b9\u6743\u503c\u5728\u8fd9\u91cc\u9664\u4e86\u6700\u540e\u8f93\u51fa\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u6211\u4eec\u5176\u5b9e\u662f\u7528\u4e00\u4e2a\u6570\u5728Splay\u4e2d\u7684\u6392\u540d\uff08\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u6392\u540d\u7684\u8bdd\uff0c\u53ef\u4ee5\u53c2\u8003\u201c[\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.org/problem/P3369)\u201d\uff09\u6765\u4ee3\u8868\u539f\u5e8f\u5217\u4e0a\u8fd9\u4e2a\u6392\u540d\u7684\u6240\u5728\u4f4d\u7f6e\u7684\uff08\u6ce8\u610f\u662f\u6240\u5728\u4f4d\u7f6e\uff0c\u5e76\u4e0d\u4ee3\u8868\u67d0\u4e00\u7279\u5b9a\u503c\uff09\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u5982\u4f55\u627e\u51fa\u533a\u95f4$[l,r]$\uff0c\u6211\u4eec\u9996\u5148\u5c06\u6392\u540d\u4e3a$l-1$\u7684\u8282\u70b9\u4e00\u8def\u65cb\u8f6c\u5230\u6839\uff0c\u7136\u540e\u5c06\u6392\u540d\u4e3a$r+1$\u7684\u8282\u70b9\u65cb\u8f6c\u4e3a\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\uff08\u6b64\u65f6\u5b83\u4e00\u5b9a\u5728\u6839\u8282\u70b9\u53f3\u5b50\u6811\u4e2d\uff0c\u56e0\u4e3a\u6392\u540d\u6bd4\u6839\u8282\u70b9\u7684\u6392\u540d$l-1$\u66f4\u5927\uff09\u3002\u7136\u540e\u6b64\u65f6\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\u7684\u5de6\u5b50\u6811\u5185\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u533a\u95f4$[l,r]$\u7684\u4f4d\u7f6e\u4e86\uff08\u56e0\u4e3a\u8fd9\u91cc\u9762\u7684\u6570\u90fd\u662f\u6392\u540d\u5927\u4e8e$l-1$\u4e14\u5c0f\u4e8e$r+1$\u7684\uff0c\u53ef\u4ee5\u8003\u8651\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\uff09\u3002\u7136\u540e\u5c06\u5de6\u53f3\u5b50\u6811\u4e92\u6362\u5c31\u597d\u4e86(\u4e5f\u662f\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28)\uff0c\u6ce8\u610f\u4ea4\u6362\u540e\u8282\u70b9\u7684\u6743\u503c\u53d8\u4e86\uff0c\u4f46\u662f\u6240\u4ee3\u8868\u7684\u4f4d\u7f6e\u662f\u4e0d\u53d8\u7684\u3002\n\n\u6700\u540e\u7528\u4e24\u4e2a\u54e8\u5175$(0$\u4e0e$n+1)$\u4ec0\u4e48\u7684\u6765\u9632\u6b62\u627e\u4e0d\u5230$l-1$\u4e0e$r+1$\uff0c\u5efa\u6811\u65e0\u6240\u8c13\uff0c\u50cf\u7ebf\u6bb5\u6811\u90a3\u6837\u5efa\u6ca1\u5173\u7cfb\u3002\u7136\u540e\u5728\u52a0\u4e0a\u5ef6\u8fdf\u6807\u8bb0\uff0c\u7b49\u8981\u8bbf\u95ee\u8fd9\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u518d\u4ea4\u6362\u5de6\u53f3\u5b50\u8282\u70b9\u3002\n\n\u9644\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int inf=1<<30;\nconst int N=100005;\nint w[N],f[N],size[N],value[N],tag[N],tr[N][2];\nint n,m,sz,root;\n\nint read(){\n\tint x=0;\n\tchar ch=getchar();\n\twhile(ch<'0' || ch>'9') ch=getchar();\n\twhile(ch>='0' && ch<='9'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n\treturn x;\n}\n\nint get(int x){return tr[f[x]][1]==x;}\nvoid updata(int x){if(x) size[x]=size[tr[x][0]]+size[tr[x][1]]+1;}\n\nvoid pushdown(int x){\n\tif(x && tag[x]){\n\t\ttag[tr[x][0]]^=1;\n\t\ttag[tr[x][1]]^=1;\n\t\tswap(tr[x][0],tr[x][1]);\n\t\ttag[x]=0;\n\t}\n}\n\nvoid rotate(int x){//\u6b63\u5e38\u65cb\u8f6c\u51fd\u6570\n\tint fa=f[x],gfa=f[fa];\n\tint now=get(x);\n\ttr[fa][now]=tr[x][now^1],f[tr[fa][now]]=fa;\n\ttr[x][now^1]=fa,f[fa]=x;\n\tf[x]=gfa;\n\tif(gfa) tr[gfa][tr[gfa][1]==fa]=x;\n\tupdata(x),updata(fa);\n}\n\nvoid Splay(int x,int goal){//Splay\u52a0\u4e86\u76ee\u6807\n\tfor(int fa;(fa=f[x])!=goal;rotate(x)){\n\t\tif(f[fa]!=goal){\n\t\t\trotate(get(fa)==get(x) ? fa : x);\n\t\t}\n\t}\n\tif(!goal) root=x;\n}\n\nint build(int l,int r,int fa){//\u5efa\u6811\n\tif(l>r) return 0;\n\tint mid=(l+r)>>1;\n\tint now=++sz;\n\tf[now]=fa;\n\tvalue[now]=w[mid];\n\ttr[now][0]=build(l,mid-1,now);\n\ttr[now][1]=build(mid+1,r,now);\n\tupdata(now);\n\treturn now;\n}\n\nint find(int x){//\u67e5\u627e\u6392\u540d\u51fd\u6570\n\tint now=root;\n\twhile(1){\n\t\tpushdown(now);\n\t\tif(x<=size[tr[now][0]]) now=tr[now][0];\n\t\telse{\n\t\t\tx-=size[tr[now][0]]+1;\n\t\t\tif(!x) return now;\n\t\t\tnow=tr[now][1];\n\t\t} \n\t}\n}\n\nvoid reserve1(int l,int r){\n\tl=find(l),r=find(r);//\u5148\u627e\u6392\u540d\n\tSplay(l,0),Splay(r,l);//\u628al\u8f6c\u79fb\u5230\u6839\u8282\u70b9\uff0cr\u8f6c\u79fb\u5230l\u7684\u53f3\u513f\u5b50\n\ttag[tr[tr[root][1]][0]]^=1;//\u6253\u4e0a\u6807\u8bb0\n}\n\nvoid dfs(int x){//\u6700\u540e\u4e2d\u5e8f\u904d\u5386\u8f93\u51fa\u7b54\u6848\n\tpushdown(x);\n\tif(tr[x][0]) dfs(tr[x][0]);\n\tif(value[x]!=inf && value[x]!=-inf){\n\t\tprintf(\"%d \",value[x]);\n\t}\n\tif(tr[x][1]) dfs(tr[x][1]);\n}\n\nint main(){\n\tn=read(),m=read();\n\tw[0]=-inf,w[n+1]=inf;\n\tfor(int i=1;i<=n;++i) w[i]=i;\n\troot=build(0,n+1,0);//\u5efa\u6811\n\tfor(int i=1,l,r;i<=m;++i){\n\t\tl=read(),r=read();\n\t\treserve1(l,r+2);//\u56e0\u4e3a\u7528\u4e86\u54e8\u5175\n\t}\n\tdfs(root);\n\treturn 0;\n}\n```",
        "postTime": 1572440166,
        "uid": 202048,
        "name": "Asika391",
        "ccfLevel": 0,
        "title": "\u6587\u827a\u5e73\u8861\u6811\uff08Splay)"
    },
    {
        "content": "\u9898\u89e3\u91cc\u6709\u4eba\u8bb2\u8fc7\u53ef\u4ee5\u5206\u5757\u505a\uff0c\u4f46\u662f\u4e00\u7bc7\u8bf4\u5e38\u6570\u5927\u8fc7\u4e0d\u4e86\uff08\u660e\u660e\u53ef\u4ee5\u8fc7\uff01\uff09\uff0c\u4e00\u7bc7\u8bb2\u7684\u4e00\u70b9\u4e5f\u4e0d\u6e05\u695a\uff0c\u4ee3\u7801\u4e5f\u6ca1\u6709\u6ce8\u91ca\uff0c\u6211\u5c31\u6765\u8865\u4e00\u7bc7\u8be6\u7ec6\u7684\u5206\u5757\u9898\u89e3\u3002\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/zaza-zt/p/14939974.html)\n\n# \u6587\u827a\u5206\u5757\u672f\n\n\u6ca1\u9519\uff0c\u4e0d\u662f\u6587\u827a\u5e73\u8861\u6811\uff0c\u800c\u662f\u6587\u827a\u5206\u5757\u672f\uff01\uff01\uff01\n\n## Part 1 Problem\n\n\u60a8\u9700\u8981\u5199\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u6765\u7ef4\u62a4\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6709\u5e8f\u6570\u5217 $A$\uff0c\u5176\u4e2d $A_i=i$ \u3002\n\n\u5176\u4e2d\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u64cd\u4f5c\uff1a\u53cd\u8f6c\u4e00\u4e2a\u533a\u95f4\uff0c\u4f8b\u5982\u539f\u6709\u5e8f\u5217\u662f 5 4 3 2 1 \uff0c\u53cd\u8f6c\u533a\u95f4\u662f [2,4] \u7684\u8bdd\uff0c\u7ed3\u679c\u662f 5 2 3 4 1 \u3002\n\n\u4e00\u5171\u6709 $m$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 $l,r(l<r)$ \u8868\u793a\u53cd\u8f6c $[l,r]$ \u7684\u5143\u7d20\u3002\n\n\u8f93\u51fa $m$ \u6b21\u64cd\u4f5c\u540e\u7684\u5e8f\u5217\u3002 \n\n## Part 2 Solution\n\n\u6b63\u89e3\u663e\u7136\u662f\u6587\u827a\u5e73\u8861\u6811\uff0c\u7136\u800c\u5757\u72b6\u94fe\u8868\u4e5f\u53ef\u4ee5\u7ef4\u62a4\u8fd9\u6837\u7684\u4e00\u4e2a\u5e8f\u5217\uff0c\u6765\u770b\u770b\u6b64\u9898\u7684\u5757\u72b6\u94fe\u8868\u89e3\u6cd5\u3002\n\n\u6839\u636e\u5206\u5757\u601d\u60f3\u7684\u201c\u5927\u6bb5\u7ef4\u62a4\uff0c\u5c40\u90e8\u66b4\u529b\u201d\u7684\u601d\u60f3\uff0c\u53ef\u4ee5\u5206\u5f00\u8003\u8651 $[l,r]$ \u5728\u540c\u4e00\u5757\u5185\u548c\u4e0d\u5728\u540c\u4e00\u5757\u5185\u7684\u60c5\u51b5\u3002\n\n\u82e5 $[l,r]$ \u5728\u540c\u4e00\u5757\u5185\uff0c\u76f4\u63a5\u66b4\u529b swap \uff0c\u590d\u6742\u5ea6 $O(\\sqrt n)$  \u3002\n\n\u82e5 $[l,r]$ \u4e0d\u5728\u540c\u4e00\u5757\u5185\uff0c\u90a3\u4e48\u9700\u8981\u8003\u8651\u6574\u6bb5\u5982\u4f55\u7ef4\u62a4\uff08\u8bbe\u8ba1\u6807\u8bb0\uff09\uff0c\u5c40\u90e8\u5982\u4f55\u66b4\u529b\u3002\n\n\u5728\u6b64\u4e4b\u524d\uff0c\u4e0d\u59a8\u5148\u6765\u770b\u770b\u94fe\u8868\u3001\u5757\u72b6\u94fe\u8868\u662f\u5982\u4f55\u652f\u6301\u533a\u95f4\u7ffb\u8f6c\u7684\uff1a\n\n\u5047\u8bbe\u73b0\u5728\u6709\u4e00\u4e2a\u5305\u542b 1 2 3 4 5 \u7684\u94fe\u8868\uff0c\u73b0\u5728\u8981\u7ffb\u8f6c\u533a\u95f4 [2,4] \uff0c\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3u1zf9nt.png)\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u771f\u7684\u201c\u7ffb\u8f6c\u201d\uff0c\u53ea\u8981\u9002\u5f53\u6539\u53d8\u524d\u9a71\u540e\u7ee7\u5c31\u53ef\u4ee5\u6ee1\u8db3\u8981\u6c42\uff0c\u50cf\u4e0a\u56fe\uff0c\u7ffb\u8f6c [2,4] \u7684\u5b9e\u8d28\u5c31\u662f\uff1a\u7ffb\u8f6c\u533a\u95f4\u7b2c\u4e00\u4e2a\u5143\u7d20 (2) \u7684\u524d\u9a71 (1) \u7684\u540e\u7ee7\u53d8\u4e3a\u7ffb\u8f6c\u533a\u95f4\u6700\u540e\u4e00\u4e2a\u5143\u7d20 (4) \uff0c\u7ffb\u8f6c\u533a\u95f4\u7b2c\u4e00\u4e2a\u5143\u7d20 (2) \u7684\u540e\u7ee7\u53d8\u4e3a\u7ffb\u8f6c\u533a\u95f4\u6700\u540e\u4e00\u4e2a\u5143\u7d20 (4) \u7684\u540e\u7ee7\uff0c\u4e2d\u95f4\u5143\u7d20\u7684\u524d\u9a71\u53d8\u540e\u7ee7\uff0c\u540e\u7ee7\u53d8\u524d\u9a71\u3002\n\n\u5bf9\u4e8e\u5757\u72b6\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u8282\u70b9\u5185\u6709\u591a\u4e2a\u5143\u7d20\uff0c\u53cd\u8f6c\u540e\uff0c\u4e0d\u4ec5\u524d\u9a71\u540e\u7ee7\u6539\u53d8\uff0c\u5757\u5185\u5143\u7d20\u4e5f\u8981\u6539\u53d8\u8bbf\u95ee\u987a\u5e8f\u3002\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ffb\u8f6c\u6807\u8bb0\u6765\u7ef4\u62a4\uff0c\u6bcf\u6b21\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u628a\u8fd9\u4e2a\u6807\u8bb0\u5f02\u6216 1 \uff0c\u5f97\u5230\u8fd9\u4e2a\u5757\u7684\u72b6\u6001\u3002\n\n\u5bf9\u4e8e\u5de6\u53f3\u96f6\u6563\u5757\uff0c\u5148\u4e0b\u4f20\u5757\u5185\u7ffb\u8f6c\u6807\u8bb0\uff0c\u5904\u7406\u51fa\u8981\u7ffb\u8f6c\u7684\u5143\u7d20\u662f\u8c01\u3002\n\n\u8fd9\u91cc\u663e\u7136\u4e0d\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b swap \uff0c\u56e0\u4e3a\u5de6\u53f3\u6bb5\u8981\u7ffb\u8f6c\u7684\u5143\u7d20\u4e0d\u4e00\u5b9a\u4e00\u6837\u591a\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ynbhy826.png)\n\n\u6b64\u65f6\u5982\u679c\u7ed9\u4e2d\u95f4\u6bb5\u6574\u6bb5\u6253 tag \u6807\u8bb0\u7684\u8bdd\uff0c\u7531\u4e8e\u5de6\u53f3\u5143\u7d20\u4e0d\u4e00\u6837\u591a\uff0c\u66b4\u529b swap \u4e4b\u540e\u8fd8\u9700\u8981\u518d\u8fdb\u884c\u8c03\u6574\uff0c\u5f88\u9ebb\u70e6\u3002\u6b64\u65f6\u5e94\u8be5\u4e0b\u4f20\u4e2d\u95f4\u6bb5\u7684\u6807\u8bb0\uff0c\u8c03\u6574\u5de6\u53f3\u7ffb\u8f6c\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u518d\u6574\u4f53\u6253\u6807\u8bb0\u3002\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/t0tn8llw.png)\n\n\u5269\u4e0b\u7684\u5de6\u53f3\u7ffb\u8f6c\u5143\u7d20\u6570\u91cf\u4e00\u6837\uff0c\u66b4\u529b swap \u5373\u53ef\u3002\n\n\u6216\u8005\u76f4\u63a5\u628a\u6240\u6709\u5143\u7d20\u5168\u585e\u5230\u522b\u7684\u5757\uff08\u4e5f\u9700\u8981\u5148\u4e0b\u4f20\u6807\u8bb0\uff0c\u5426\u5219\u63d2\u5165\u4f4d\u7f6e\u4e0d\u5bf9\uff09\u91cc\uff0c\u518d\u6574\u4f53\u6253\u6807\u8bb0\u3002\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lwmw6jvk.png)\n\n\u8fd9\u91cc\u7b2c\u4e8c\u79cd\u529e\u6cd5\u5b9e\u73b0\u8d77\u6765\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0d\u9700\u8981\u8ba8\u8bba\u5de6\u53f3\u5757\u4e2d\uff0c\u54ea\u4e00\u4e2a\u5757\u8981\u8c03\u6574\u7684\u5143\u7d20\u591a\u3002\uff08\u5982\u679c\u91c7\u7528\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u5982\u679c\u5de6\u5757\u7ffb\u8f6c\u5143\u7d20\u591a\uff0c\u5219\u9700\u8981\u5de6\u5757\u540e\u63d2\uff0c\u53f3\u5757\u5143\u7d20\u591a\uff0c\u5219\u9700\u8981\u53f3\u5757\u524d\u63d2\uff0c\u7ec6\u8282\u5904\u7406\u8f83\u7e41\u7410\uff0c\u5e76\u4e14\u5b9e\u6d4b\u4ee3\u7801\u6bd4\u7b2c\u4e8c\u79cd\u957f2.5k\u3002\u5f53\u7136\u53e6\u5916\u4e00\u79cd\u505a\u6cd5\u662f\u628a\u4e2d\u95f4\u7684\u5757\u91cc\u7684\u5143\u7d20\u8865\u5230\u96f6\u6563\u5757\u91cc\uff0c\u53ea\u662f\u6bd4\u7b2c\u4e00\u79cd\u8fd8\u8981\u9ebb\u70e6\u4e00\u4e9b\u3002\uff09\n\n\u8c03\u6574\u5b8c\u4e86\u4e4b\u540e\u8981\u6ce8\u610f\u5408\u5e76\u3001\u7ef4\u62a4\u5757\u957f\u6b63\u786e\uff0c\u603b\u590d\u6742\u5ea6 $O(n\\sqrt n)$ \u3002\n\n## Part 3 Code\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n//using namespace std;\n\nconst int maxn=200005;\nconst int maxblock=2005;\n\nint Trashcan[maxn],top,used;\nint n,m,tot,len;\nstruct Node{\n    int pre,nxt;//\u524d\u9a71\u540e\u7ee7\n    int tag;//\u7ffb\u8f6c\u6807\u8bb0\n    int lenth;//\u5757\u957f\n    int a[maxblock];\n}Block[maxblock];\n\ninline int read(){\n    int x=0,fh=1;\n    char ch=getchar();\n    while(!isdigit(ch)){\n        if(ch=='-')\n            fh=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch)){\n        x=(x<<3)+(x<<1)+ch-'0';\n        ch=getchar();\n    }\n    return x*fh;\n}//\u5feb\u8bfb\n\ninline void swap(int &a,int &b){\n    if(a^b) a^=b^=a^=b;\n}//\u5feb\u6362\n\ninline void Init(){\n    n=read(),m=read();\n    len=sqrt(n);//\u8bbe\u5b9a\u6807\u51c6\u5757\u957flen\n    tot=(n-1)/len+1;//\u8bbe\u5b9a\u521d\u59cb\u603b\u5757\u6570tot\n    for(int i=1;i<=n;++i){\n        int belong=(i-1)/len+1;\n        Block[belong].a[++Block[belong].lenth]=i;//\u9884\u5904\u7406\u5757\u5185\u5143\u7d20\n    }\n    for(int i=1;i<=tot;++i)\n        Block[i].pre=i-1,Block[i].nxt=i+1;//\u94fe\u63a5\u4e3a\u94fe\u8868\n    Block[tot].nxt=0;\n}\n\ninline void reset(int id){//\u4e0b\u4f20id\u5757\u6807\u8bb0\n    if(Block[id].tag){\n        int mid=(Block[id].lenth+1)>>1;\n        for(int i=1;i<=mid;++i)\n            swap(Block[id].a[i],Block[id].a[Block[id].lenth+1-i]);\n        Block[id].tag=0;\n    }\n}\n\ninline void clear(int id){//\u5f7b\u5e95\u6e05\u9664\u3001\u56de\u6536id\u5757\n    Trashcan[++top]=id;\n    Block[id].lenth=Block[id].nxt=Block[id].pre=Block[id].tag=0;\n    memset(Block[id].a,0,sizeof Block[id].a);\n}\n\ninline void build(const int id){//\u5728id\u540e\u9762\u65b0\u5efa\u4e00\u4e2a\u5757\n    int ip;\n    if(used<top) ip=Trashcan[++used];\n    else ip=++tot;\n    Block[ip].nxt=Block[id].nxt;\n    Block[Block[id].nxt].pre=ip;\n    Block[id].nxt=ip;\n    Block[ip].pre=id;\n}\n\ninline void merge(int id){//\u5408\u5e76id\u548c\u5176\u540e\u9762\u7684\u5757\n    int ip=Block[id].nxt;\n    reset(id);reset(ip);\n    for(int i=1;i<=Block[ip].lenth;++i)\n        Block[id].a[i+Block[id].lenth]=Block[ip].a[i];\n    Block[id].lenth+=Block[ip].lenth;\n    Block[id].nxt=Block[ip].nxt;\n    Block[Block[id].nxt].pre=id;\n    clear(ip);\n}\n\ninline void split(int id){//\u5206\u88c2id\u5757\n    reset(id);build(id);\n    int ip=Block[id].nxt;\n    for(int i=len+1;i<=Block[id].lenth;++i)\n        Block[ip].a[i-len]=Block[id].a[i];\n    Block[ip].lenth=Block[id].lenth-len;\n    Block[id].lenth=len;\n}\n\ninline void Print(){//\u904d\u5386\u94fe\u8868\uff0c\u8f93\u51fa\u7b54\u6848\n    for(int i=1;i!=0;i=Block[i].nxt){\n        if(!Block[i].tag)\n            for(int j=1;j<=Block[i].lenth;++j)\n                printf(\"%d \",Block[i].a[j]);\n        else\n            for(int j=Block[i].lenth;j>=1;--j)\n                printf(\"%d \",Block[i].a[j]);\n    }\n}\n\nint belongL,belongR;\ninline void Getpoistion(int &l,int &r){//\u627e\u5230l,r\u7684\u4f4d\u7f6e\n    belongL=1,belongR=1;\n    while(l>Block[belongL].lenth){\n        l-=Block[belongL].lenth,r-=Block[belongL].lenth;\n        belongL=belongR=Block[belongL].nxt;\n    }\n    while(r>Block[belongR].lenth){\n        r-=Block[belongR].lenth;\n        belongR=Block[belongR].nxt;\n    }\n}\n\ninline void reverse(int l,int r){//\u6700\u91cd\u8981\u7684\u7ffb\u8f6c\u64cd\u4f5c\n    Getpoistion(l,r);\n    if(belongL==belongR){//\u5728\u540c\u4e00\u6bb5\u5185\uff0c\u76f4\u63a5\u66b4\u529b\n        reset(belongL);\n        int mid=(l+r)>>1;\n        for(int i=l,j=r;i<=mid;++i,--j)\n            swap(Block[belongL].a[i],Block[belongL].a[j]);\n        return;\n    }else{\n        reset(belongL);reset(belongR);//\u4e0b\u4f20\u96f6\u6563\u6bb5\u6807\u8bb0\n        if(Block[belongL].nxt==belongR)\n//\u5982\u679cl\u6240\u5904\u6bb5\u540e\u7ee7\u4e3ar\u6240\u5904\u6bb5\uff0c\u4e0d\u80fd\u76f4\u63a5\u5f80\u4e2d\u95f4\u6bb5\u585e\u5143\u7d20\uff08\u56e0\u4e3a\u5b83\u4e0d\u5b58\u5728\uff09\u8981\u5148\u65b0\u5efa\u4e00\u4e2a\n            build(belongL);\n        int revL=Block[belongL].lenth-l+1;//\u5de6\u7aef\u96f6\u6563\u7ffb\u8f6c\u5143\u7d20\u6570\u91cf\n        int Nxt=Block[belongL].nxt;\n        int Pre=Block[belongR].pre;\n        reset(Nxt);reset(Pre);//\u627e\u5230\u5373\u5c06\u88ab\u585e\u8fdb\u5143\u7d20\u7684\u5757\uff0c\u4e0b\u4f20\u4ed6\u4eec\u7684\u6807\u8bb0\n        for(int i=Block[Nxt].lenth;i>=1;--i)\n            Block[Nxt].a[i+revL]=Block[Nxt].a[i];\n        for(int i=l,j=1;i<=Block[belongL].lenth;++i,++j)\n            Block[Nxt].a[j]=Block[belongL].a[i];//\u5de6\u7aef\u5f80\u540e\u585e\u96f6\u6563\u5143\u7d20\n        Block[belongL].lenth-=revL;\n        Block[Nxt].lenth+=revL;//\u91cd\u65b0\u5904\u7406\u6bb5\u957f\n        for(int i=Block[Pre].lenth+1,j=1;j<=r;++i,++j)\n            Block[Pre].a[i]=Block[belongR].a[j];\n        for(int i=1;i<=Block[belongR].lenth;++i)\n            Block[belongR].a[i]=Block[belongR].a[i+r];//\u53f3\u7aef\u5f80\u524d\u585e\u96f6\u6563\u5143\u7d20\n        Block[Pre].lenth+=r;\n        Block[belongR].lenth-=r;//\u91cd\u65b0\u5904\u7406\u6bb5\u957f\n        for(int i=Block[belongL].nxt;i!=belongR;i=Block[i].pre)\n            swap(Block[i].pre,Block[i].nxt),Block[i].tag^=1;//\u6539\u53d8\u524d\u9a71\u540e\u7ee7\uff0c\u6574\u4f53\u6807\u8bb0\n        swap(Block[belongL].nxt,Block[belongR].pre);\n        Block[Block[belongL].nxt].pre=belongL;\n        Block[Block[belongR].pre].nxt=belongR;\n        if(Block[Nxt].lenth>(len<<1)) split(Nxt);\n        if(Block[Pre].lenth>(len<<1)) split(Pre);\n        if(Block[belongL].lenth+Block[Block[belongL].pre].lenth<len && Block[belongL].pre) merge(Block[belongL].pre);\n        if(Block[belongR].lenth+Block[Block[belongR].nxt].lenth<len && Block[belongR].nxt) merge(belongR);//\u53ca\u65f6\u5206\u88c2\u3001\u5408\u5e76\u7ef4\u62a4\u5757\u957f\u5927\u7ea6\u4e3alen\n    }\n}\n\nsigned main(){\n    Init();\n    while(m--){\n        int L=read(),R=read();\n        reverse(L,R);          \n    } \n    Print(); \n    return 0;\n}\n```",
        "postTime": 1625897063,
        "uid": 307143,
        "name": "\u4e00\u94ed\u541b\u4e00",
        "ccfLevel": 6,
        "title": "\u6587\u827a\u5206\u5757\u672f"
    },
    {
        "content": "\u4f9b\u66fe\u7ecfA\u8fc7\u6b64\u9898\uff0c\u5fd8\u5f97\u5dee\u4e0d\u591a\u7684\u540c\u5b66\u8fc5\u901f\u56de\u5fc6splay\u3002\n\n\u5728\u4e8c\u53c9\u6811\u4e0a\u64cd\u4f5c\u3002splay(x, pa)\u8fd9\u4e2a\u51fd\u6570\u628ax\u65cb\u8f6c\u6210pa\u7684\u513f\u5b50\uff0c\u4e14\u8fd9\u68f5\u6811\u548c\u539f\u6765\u7b49\u4ef7\uff08\u65cb\u8f6c\u662f\u53ef\u4ee5\u7b49\u4ef7\u65cb\u8f6c\u7684\uff09\u3002\n\nsplay()\u5185\u7528\u5230rotate(x)\u51fd\u6570\uff0crotate(x)\u5c31\u662f\u7b49\u4ef7\u5730\u628ax\u5f80\u4e0a\u8f6c\u4e00\u5c42\u3002splay\u4e2d\u5bf9rotate\u6709\u5173\u7167\uff1a\u5047\u79f0x\u7684\u7236\u4eb2\u662fy\uff0cy\u7684\u7236\u4eb2\u662fz\uff0c\u5219\u5bf9\u4e8ex\uff0cy\uff0cz\u8fde\u63a5\u65b9\u5411\u4e0d\u540c\u7684\u60c5\u51b5\u8fdb\u884c\u4e0d\u540c\u5904\u7406\uff0c\u5199\u8d77\u6765\u8fd8\u662f\u5f88\u7b80\u5355\u660e\u4e86\u7684\u3002\n\n### \u6587\u827a\u5e73\u8861\u6811 \u533a\u95f4\u53cd\u8f6c\n\u524d\u540e\u63d2\u51650\u548cn+1\uff0c\u65cb\u8f6cl\uff0cr\u65f6\uff0c\u628arank\uff08\u6ce8\u610f\u662f\u52a0\u51650\u540e\u7684rank\u4e0d\u662f\u539f\u6392\u540d\uff09l\u63d0\u5230root\uff0c\u628arank r+2\u63d0\u5230root\u7684\u53f3\u513f\u5b50\uff0c\u7136\u540e\u7ed9root\u7684\u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50\u4e0a\u53cd\u8f6c\u6807\u8bb0\u3002\n\n### \u6587\u827a\u5e73\u8861\u6811\u4ee3\u7801\n\u6ce8\u610f\uff01insert\u4e2d\u5fc5\u987b\u6709splay(x, 0)\uff0c\u4ee5\u66f4\u65b0\u521d\u59cbroot\u4fe1\u606f\u3001\u7ef4\u6301\u5e73\u8861\u3002\n\n\u4f1a\u51fa\u73b0y\u548cz\u90fd\u662f0\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u8bb0\u7262\u8fd9\u4e48\u5199\u6ca1\u95ee\u9898\u5c31\u884c\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n, m, rt;\nstruct Node {\n  int val;\n  int fa;\n  int ch[2];\n  int siz;\n  int tag;\n  void init(int xval, int xfa) {\n    val = xval;\n    fa = xfa;\n    ch[0] = ch[1] = 0;\n    siz = 1;\n    tag = 0;\n  }\n} node[100010]; int cnt = 0;\n\nvoid pushdown(int x) {\n  if (node[x].tag) {\n    node[node[x].ch[0]].tag ^= 1;\n    node[node[x].ch[1]].tag ^= 1;\n    swap(node[x].ch[0], node[x].ch[1]);\n    node[x].tag = 0;\n  }\n}\n\nvoid update(int x) {\n  node[x].siz = node[node[x].ch[0]].siz + node[node[x].ch[1]].siz + 1;\n}\n\nvoid rotate(int x) {\n  int y = node[x].fa, z = node[y].fa;\n  int xid = node[y].ch[1] == x, yid = node[z].ch[1] == y;\n  node[z].ch[yid] = x;\n  node[x].fa = z;\n  node[y].ch[xid] = node[x].ch[xid ^ 1];\n  node[node[x].ch[xid ^ 1]].fa = y;\n  node[x].ch[xid ^ 1] = y;\n  node[y].fa = x;\n  update(x), update(y);\n}\n\nvoid splay(int x, int pa) { // let x be a son of pa\n  while (node[x].fa != pa) {\n    int y = node[x].fa, z = node[y].fa;\n    if (z != pa) \n      (y == node[z].ch[1]) == (x == node[y].ch[1]) ? rotate(y) : rotate(x);\n    rotate(x);\n  }\n  if (pa == 0)\n    rt = x;\n}\n\nvoid insert(int val) {\n  int p = rt, fa = 0;\n  while (p)\n    fa = p, p = node[p].ch[val > node[p].val];\n  int x = ++cnt;\n  if (fa != 0)\n    node[fa].ch[val > node[fa].val] = x;\n  node[x].init(val, fa);\n  splay(x, 0); // i dont know why\n}\n\nint findk(int k) {\n  int x = rt;\n  while (1) {\n    pushdown(x);\n    if (k == node[node[x].ch[0]].siz + 1) break;\n    if (k <= node[node[x].ch[0]].siz) x = node[x].ch[0];\n    else k -= node[node[x].ch[0]].siz + 1, x = node[x].ch[1];\n  }\n  return x;\n}\n\nvoid print(int x) {\n  if (x == 0) return;\n  pushdown(x);\n  print(node[x].ch[0]);\n  if (1 <= node[x].val and node[x].val <= n)\n    printf(\"%d \", node[x].val);\n  print(node[x].ch[1]);\n}\n\nint main() {\n  scanf(\"%d %d\", &n, &m);\n  for (int i = 0; i <= n + 1; ++i)\n    insert(i);\n  while (m--) {\n    int l, r; scanf(\"%d %d\", &l, &r);\n    l = findk(l);\n    // it's actually node l - 1\n    r = findk(r + 2); \n    // cuz there is 0 in the tree\n    splay(l, 0);\n    splay(r, l);\n    node[node[node[rt].ch[1]].ch[0]].tag ^= 1;\n    // yep\n  }\n  print(rt);\n  return 0;\n}\n```",
        "postTime": 1625214826,
        "uid": 49474,
        "name": "\u5b66\u59d4",
        "ccfLevel": 7,
        "title": "splay\u56de\u5fc6\u63d0\u7eb2"
    },
    {
        "content": "### $\\mathtt{Description:}$\n\n\u7ed9\u5b9a $1$ \u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u533a\u95f4\uff0c\u6709 $m$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u53cd\u8f6c\u533a\u95f4 $[l,r]$ \uff0c\n\n\u6c42\u6700\u540e\u7684\u5e8f\u5217\u3002\n\n### $\\mathtt{Solution:}$\n\n\u533a\u95f4\u64cd\u4f5c\uff0c\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u4e2d\u7684 Splay \u6765\u89e3\u51b3\u3002\n\n\u4e0d\u4f1a\u5e73\u8861\u6811\u7684\u540c\u5b66\u53ef\u4ee5\u70b9\u8fd9\u91cc\uff1a\n\n1. [$\\mathtt{BST}$ \u5b66\u4e60\u7b14\u8bb0](https://www.luogu.com.cn/blog/147441/bst-xue-xi-bi-ji)\n\n2. [$\\mathtt{Splay}$](https://blog.csdn.net/ModestCoder_/article/details/90139481#t7)\n\n3. [$\\mathtt{Treap}$](https://blog.csdn.net/ModestCoder_/article/details/91470412?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162149933716780255234281%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=162149933716780255234281&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-91470412.pc_v2_rank_blog_default&utm_term=treap)\n\n   \u4e0b\u6587\u9ed8\u8ba4\u4f1a Splay \u7684\u57fa\u7840\u64cd\u4f5c\uff0c`Rotate` , `Splay` \uff0c$0$ \u8868\u793a\u5de6\u513f\u5b50\uff0c $1$ \u8868\u793a\u53f3\u513f\u5b50\u3002\n\n\u5efa\u6811\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u6309\u7167\u6743\u503c\u6392\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167\u5e8f\u5217\u6392\u5e8f\u3002\n\n\u7531\u4e8e\u8fd9\u91cc\u662f\u533a\u95f4\u53cd\u8f6c\uff0c\u90a3\u4e48\u5c31\u8981\u6309\u7167\u533a\u95f4\u6392\u5e8f\uff0c\u4e5f\u5c31\u662f\u539f\u5e8f\u5217\u6392\u5e8f\u3002\n\n`Build`\n\n```c++\nint Build(int l,int r,int fa){\n\tint mid=(l+r)>>1,now=++cnt;//cnt\u8282\u70b9\u7f16\u53f7+1\n\tf[now]=fa;Val(now)=d[mid];\n\tSon(now,0)=Son(now,1)=0;\n\tif(l<=mid-1){Son(now,0)=Build(l,mid-1,now);}//\u9012\u5f52\u5de6\u513f\u5b50\n\tif(r>=mid+1){Son(now,1)=Build(mid+1,r,now);}//\u9012\u5f52\u53f3\u513f\u5b50\n\tUpdate(now);//\u66f4\u65b0\n\treturn now;\n}\n```\n\n\u8003\u8651\u5982\u4f55 $O(\\log n)$ \u8fdb\u884c\u533a\u95f4\u53cd\u8f6c\u64cd\u4f5c\u3002\u53ef\u4ee5\u4eff\u7167\u7ebf\u6bb5\u6811\uff0c\u8fdb\u884c\u6807\u8bb0\u3002\n\n\u7531\u4e8e Splay \u8282\u70b9\u4ee3\u8868\u7684\u4e0d\u662f\u533a\u95f4\uff0c\u90a3\u95ee\u9898\u5c31\u662f\u5982\u4f55\u628a\u533a\u95f4 $[l,r]$ \u53d8\u5230 $1$ \u68f5\u5b50\u6811\u4e0a\u5462\uff1f\n\n\u5c06 $l-1$ \u65cb\u8f6c\u5230 $rt$ \uff0c\u5c06 $r+1$ \u65cb\u8f6c\u5230 $l-1$ \u7684\u53f3\u513f\u5b50\uff0c\u90a3\u4e48\u533a\u95f4 $[l,r]$ \u5c31\u662f $r+1$ \u7684\u5de6\u513f\u5b50\u3002\n\n\u8bc1\u660e\uff1a\n\n\u5c06 $l-1$ \u65cb\u8f6c\u5230 $rt$ \uff0c\u90a3\u4e48 $[l,r]$ \u5fc5\u7136\u5728 $l-1$ \u7684\u53f3\u513f\u5b50\u4e0a\u3002\n\n\u53c8\u56e0\u4e3a\u5c06 $r+1$ \u65cb\u8f6c\u5230 $rt$ \u7684\u53f3\u513f\u5b50\uff0c\u90a3\u4e48 $[l,r]$ \u53ea\u53ef\u80fd\u662f $r+1$ \u7684\u5de6\u513f\u5b50\u3002\n\n\u5bf9\u5e94\u7684\u64cd\u4f5c\uff1a\n\n`Splay(l-1,0)` , `Splay(r+1,0)` \u3002\n\n$\\mathtt{Ps:}$ \u7531\u4e8e\u4e0b\u6587\u7684\u4ee3\u7801\u4f1a\u63d2\u5165\u4e24\u4e2a\u65e0\u7528\u7684\u8282\u70b9\uff0c\u90a3\u4e48 `l-1` \u548c `r+1` \u4f1a\u53d8\u6210 `l` \u548c `r+2` \u3002\n\n$r+1$ \u662f\u6cbf\u7740\u7956\u5148\u65cb\u8f6c\u7684\uff0c\u90a3\u4e48\u5982\u4f55\u4fdd\u8bc1 $r+1$ \u521a\u597d\u65cb\u8f6c\u5230 $l-1$ \u7684\u53f3\u513f\u5b50\u5462\uff1f\n\n\u56e0\u4e3a\u5728\u539f\u6811\u4e0a\uff0c $r+1$ \u6bd4 $l-1$ \u5927\uff0c\u90a3\u4e48\u5fc5\u5b9a\u5728 $l-1$ \u7684\u53f3\u5b50\u6811\u4e0a\uff0c\u90a3\u4e48\u65cb\u8f6c\u5c31\u5fc5\u7136\u5728 $l-1$ \u7684\u53f3\u513f\u5b50\u4e86\u3002\n\n\u90a3\u5c06 $[l,r]$ \u79fb\u5230 $1$ \u68f5\u5b50\u6811\u4e0a\u540e\uff0c \u5c31\u53ef\u4ee5\u5728\u5b50\u6811\u7684\u6839\u4e0a\u7684 `Tag` \u6253\u4e0a\u6807\u8bb0\uff0c\u5982\u679c\u540e\u9762\u6709\u64cd\u4f5c\u4f1a\u6539\u53d8\u8be5\u5b50\u6811\u53ca\u5176\u5b50\u5b59\u7684\u5f62\u6001\uff0c\u90a3\u4e48\u5c31\u8981\u5148\u4e0b\u4f20\u6807\u8bb0\uff0c\u8fd9\u5c31\u5728 `Splay` \u4e2d\u5b9e\u73b0\u3002\n\n`Update`\n\n```c++\nvoid Update(int p){\n\tSiz(p)=1;//\u5f53\u524d\u8282\u70b9\n\tif(Son(p,0)){Siz(p)+=Siz(Son(p,0));}//\u52a0\u5165\u5de6\u5b50\u6811\u7684\u8282\u70b9\n\tif(Son(p,1)){Siz(p)+=Siz(Son(p,1));}//\u52a0\u5165\u53f3\u5b50\u6811\u7684\u8282\u70b9\n}\n```\n\n\u66f4\u65b0\u8282\u70b9\u7684\u4fe1\u606f\u3002\n\n`P_d`\n\n```c++\nvoid P_d(int p){\n\tif(Tag(p)){\n\t\tTag(Son(p,0))^=1;//\u4e0b\u4f20\u6807\u8bb0\n\t\tTag(Son(p,1))^=1;//\u4e0b\u4f20\u6807\u8bb0\n\t\tTag(p)=0;//\u6e05\u7a7a\u5f53\u524d\u8282\u70b9\u7684\u6807\u8bb0\n\t\tswap(Son(p,0),Son(p,1));//\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\n\t}\n}\n```\n\n\u610f\u4e3a `Push_down` \uff0c\u8868\u793a\u4e0b\u4f20\u6807\u8bb0\uff0c\u5c06 `Tag` \u5f53\u4e2d\u7684\u7ffb\u8f6c\u6807\u8bb0\u4e0b\u4f20\u7ed9\u513f\u5b50\uff0c\u8bb0\u4f4f\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\u4e14\u6e05\u7a7a `Tag` \u3002\n\n`Get`\n\n```c++\nint Get(int p){\n\treturn Son(f[p],1)==p;//\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u662f\u5176\u7236\u4eb2\u7684\u5de6\u513f\u5b50\u8fd8\u662f\u53f3\u513f\u5b50\n}\n```\n\n`Rotate`\n\n```c++\nvoid Rotate(int p){\n\tint fa=f[p],ffa=f[fa],m=Get(p),n=Get(fa);\n\tCon(p,ffa,n);\n\tCon(Son(p,m^1),fa,m);\n\tCon(fa,p,m^1);\n\tUpdate(fa);Update(p);//\u66f4\u65b0\u65cb\u8f6c\u540e\u7684\u5f53\u524d\u8282\u70b9\u548c\u7236\u4eb2\u8282\u70b9\n}\n```\n\n\u65cb\u8f6c\u64cd\u4f5c\u3002\n\n`Splay`\n\n```c++\nvoid Splay(int x,int goal){\n\tint len=0;\n\tfor(int i=x;i;i=f[i]){q[++len]=i;}\n\tfor(int i=len;i;--i){P_d(q[i]);}//\u4e0b\u4f20\u6807\u8bb0\n\twhile(f[x]!=goal){\n\t\tint fa=f[x];\n\t\tif(f[fa]!=goal){\n\t\t\tRotate(Get(x)==Get(fa)?fa:x);\n\t\t}\n\t\tRotate(x);\n\t}\n\tif(!goal){rt=x;}\n}\n```\n\n\u7b2c $2$ ~ $4$ \u884c\u5c31\u662f\u5728\u6709\u533a\u95f4\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u9700\u8981\u5728 `Splay` \u4e4b\u524d\u4e0b\u4f20\u6807\u8bb0\u3002\n\n`Fip`\n\n```c++\nvoid Fip(int x,int y){\n\tint l=Rank(x),r=Rank(y+2);\n\tSplay(l,0);Splay(r,l);\n\tTag(Son(r,0))^=1;\n}\n```\n\n\u7531\u4e8e\u63d2\u5165\u4e86\u4e24\u4e2a\u65e0\u7528\u8282\u70b9\uff0c`kInf` \u548c `-kInf`\uff0c\u4fdd\u8bc1 `l-1` \u4e0e `r+1` \u7684\u5b58\u5728\uff0c\u90a3\u4e48\u5c31\u8981\u6539\u53d8\u6210 `l` \u548c `r+2` \u3002\n\n### $\\mathtt{Code:}$\n\n```c++\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <cstdlib>\n#include <ctime>\n\n#define PR pair<int,int>\n#define LL long long\n\nusing namespace std;\n\nconst int kN=1e5+5;\nconst int kInf=1e9;\n\nstruct Splay{\n\tint son[2],val,siz;\n\tbool tag;\n\t#define Son(p,k) spy[p].son[k]\n\t#define Tag(p) spy[p].tag\n\t#define Val(p) spy[p].val\n\t#define Siz(p) spy[p].siz\n}spy[kN];\n\nint n,m;\nint d[kN],f[kN],q[kN];\nint rt,cnt;\n\nvoid Update(int p){\n\tSiz(p)=1;//\u5f53\u524d\u8282\u70b9\n\tif(Son(p,0)){Siz(p)+=Siz(Son(p,0));}//\u52a0\u5165\u5de6\u5b50\u6811\u7684\u8282\u70b9\n\tif(Son(p,1)){Siz(p)+=Siz(Son(p,1));}//\u52a0\u5165\u53f3\u5b50\u6811\u7684\u8282\u70b9\n}\n\nint Build(int l,int r,int fa){\n\tint mid=(l+r)>>1,now=++cnt;//cnt\u8282\u70b9\u7f16\u53f7+1\n\tf[now]=fa;Val(now)=d[mid];\n\tSon(now,0)=Son(now,1)=0;\n\tif(l<=mid-1){Son(now,0)=Build(l,mid-1,now);}//\u9012\u5f52\u5de6\u513f\u5b50\n\tif(r>=mid+1){Son(now,1)=Build(mid+1,r,now);}//\u9012\u5f52\u53f3\u513f\u5b50\n\tUpdate(now);//\u66f4\u65b0\n\treturn now;\n}\n\nvoid P_d(int p){\n\tif(Tag(p)){\n\t\tTag(Son(p,0))^=1;//\u4e0b\u4f20\u6807\u8bb0\n\t\tTag(Son(p,1))^=1;//\u4e0b\u4f20\u6807\u8bb0\n\t\tTag(p)=0;//\u6e05\u7a7a\u5f53\u524d\u8282\u70b9\u7684\u6807\u8bb0\n\t\tswap(Son(p,0),Son(p,1));//\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\n\t}\n}\n\nint Get(int p){\n\treturn Son(f[p],1)==p;//\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u662f\u5176\u7236\u4eb2\u7684\u5de6\u513f\u5b50\u8fd8\u662f\u53f3\u513f\u5b50\n}\n\nvoid Con(int x,int y,int z){\n\tf[x]=y;\n\tSon(y,z)=x;\n}\n\nvoid Rotate(int p){\n\tint fa=f[p],ffa=f[fa],m=Get(p),n=Get(fa);\n\tCon(p,ffa,n);\n\tCon(Son(p,m^1),fa,m);\n\tCon(fa,p,m^1);\n\tUpdate(fa);Update(p);//\u66f4\u65b0\u65cb\u8f6c\u540e\u7684\u5f53\u524d\u8282\u70b9\u548c\u7236\u4eb2\u8282\u70b9\n}\n\nvoid Splay(int x,int goal){\n\tint len=0;\n\tfor(int i=x;i;i=f[i]){q[++len]=i;}\n\tfor(int i=len;i;--i){P_d(q[i]);}//\u4e0b\u4f20\u6807\u8bb0\n\twhile(f[x]!=goal){\n\t\tint fa=f[x];\n\t\tif(f[fa]!=goal){\n\t\t\tRotate(Get(x)==Get(fa)?fa:x);\n\t\t}\n\t\tRotate(x);\n\t}\n\tif(!goal){rt=x;}\n}\n\nint Rank(int k){\n\tint now=rt;\n\twhile(1){\n\t\tP_d(now);\n\t\tif(Siz(Son(now,0))>=k){now=Son(now,0);}\n\t\telse if(Siz(Son(now,0))+1==k){return now;}\n\t\telse{\n\t\t\tk-=Siz(Son(now,0))+1;\n\t\t\tnow=Son(now,1);\n\t\t}\n\t}\n}\n\nvoid Fip(int x,int y){\n\tint l=Rank(x),r=Rank(y+2);\n\tSplay(l,0);Splay(r,l);\n\tTag(Son(r,0))^=1;\n}\n\nvoid Out(int p){\n\tP_d(p);\n\tif(Son(p,0)){Out(Son(p,0));}\n\tif(Val(p)>0&&Val(p)<n+1){printf(\"%d \",Val(p));}\n\tif(Son(p,1)){Out(Son(p,1));}\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\td[1]=-kInf;d[n+2]=kInf;\n\tfor(int i=2;i<=n+1;++i){d[i]=i-1;}\n\trt=Build(1,n+2,0);\n\tfor(int i=1;i<=m;++i){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tFip(x,y);\n\t}\n\tOut(rt);\n\treturn 0;\n}\n```\n\n$\\mathtt{Ps:}$ \u60f3\u5b66 Treap \u7684\u540c\u5b66\uff0c\u53ef\u4ee5\u70b9\u5f00\u4e0a\u6587\u7684\u8fde\u63a5\u3002",
        "postTime": 1621816138,
        "uid": 147441,
        "name": "Godzilla",
        "ccfLevel": 0,
        "title": "P3391 \u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811 \u9898\u89e3"
    },
    {
        "content": "### \u6587\u827a\u5e73\u8861\u6811\n\n[\u5982\u679c\u4f60\u4e0d\u4f1a Splay](https://www.luogu.com.cn/problem/solution/P3369)\n\n\u597d\uff0c\u6211\u8bb2\u7684\u662f Splay \u7684\u533a\u95f4\u7ffb\u8f6c\u64cd\u4f5c\u3002\n\n- \u533a\u95f4\u7ffb\u8f6c\u5c31\u662f\u7ffb\u8f6c\u4e00\u6bb5\u533a\u95f4\uff0c\u56e0\u4e3a\u539f\u5e8f\u5217\u662f $[1,n]$ \u7684\u4e00\u4e2a\u6392\u5217\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ee5\u7f16\u53f7\u4e3a\u5173\u952e\u5b57\u5efa\u4e00\u68f5 Splay \u3002\n- \u5047\u5982\u6211\u4eec\u8981\u7ffb\u8f6c\u533a\u95f4 $[l,r]$, \u6211\u4eec\u628a $l-1$ \u65cb\u8f6c\u5230\u6839\u7684\u4f4d\u7f6e\uff0c$r+1$ \u65cb\u8f6c\u5230\u6839\u7684\u53f3\u513f\u5b50\u3002\n- \u8fd9\u65f6 $r+1$ \u7684\u5de6\u5b50\u6811\u5c31\u662f\u533a\u95f4 $[l,r]$ \uff0c\u5728\u5de6\u5b50\u6811\u4e0a\u7684\u7ffb\u8f6c\u6807\u8bb0\uff0c\u7136\u540e\u50cf\u7ebf\u6bb5\u6811\u4e00\u6837 `pushdown` \u5373\u53ef \u3002\n\n$\\sf{Code}$\n\n```cpp\n#include<bits/stdc++.h>\n#include<tr1/unordered_map>\n#define re register\n#define N 2001001\n#define MAX 30\n#define inf 1e18\nusing namespace std; \ntypedef long long ll;\ntypedef double db;\nconst ll mod=1000000007;\ninline void read(re ll &ret)\n{\n\tret=0;re char c=getchar();re bool pd=false;\n\twhile(!isdigit(c)){pd|=c=='-';c=getchar();}\n\twhile(isdigit(c)){ret=(ret<<1)+(ret<<3)+(c&15);c=getchar();};\n\tret=pd?-ret:ret;\n\treturn;\n}\nll n,m,a[N],root,num;\nstruct node\n{\n\tll son[2],key,val,fa,siz;\n\tbool tag;\n}spy[N]; \n#define fa(x) spy[x].fa\n#define ls(x) spy[x].son[0]\n#define rs(x) spy[x].son[1]\n#define reverse(x) swap(ls(x),rs(x)),spy[x].tag^=1;\ninline void pushdown(re ll ver)\n{\n\tif(spy[ver].tag)\n\t{\n\t\tif(ls(ver))\n\t\t\treverse(ls(ver));\n\t\tif(rs(ver))\n\t\t\treverse(rs(ver));\n\t\tspy[ver].tag^=1;\n\t}\n\treturn;\n}\ninline void update(re ll ver)\n{\n\tspy[ver].siz=(ls(ver)?spy[ls(ver)].siz:0)+(rs(ver)?spy[rs(ver)].siz:0)+1;\n\treturn;\n}\ninline bool getson(re ll ver)\n{\n\treturn rs(fa(ver))==ver;\n}\ninline void connect(re ll son,re ll f,re bool s)\n{\n\tspy[f].son[s]=son;\n\tfa(son)=f;\n\tupdate(son);\n\tupdate(f);\n\treturn;\n}\ninline void rotate(re ll ver)\n{\n\tre ll g=fa(ver);\n\tre ll gg=fa(g);\n\tre bool g1=getson(ver),g2=getson(g);\n\tconnect(spy[ver].son[!g1],g,g1);\n\tconnect(g,ver,!g1);\n\tconnect(ver,gg,g2);\n\tupdate(ver);\n\tupdate(g);\n\treturn;\n}\ninline void splay(re ll ver,re ll to)\n{\n\twhile(fa(ver)!=to)\n\t{\n\t\tre ll g=fa(ver);\n\t\tif(fa(g)!=to)\n\t\t{\n\t\t\tif(getson(ver)==getson(g))\n\t\t\t\trotate(g);\n\t\t\telse\n\t\t\t\trotate(ver);\n\t\t}\n\t\trotate(ver);\n\t}\n\tif(!to)\n\t\troot=ver;\n\treturn;\n}\ninline void insert(re ll key,re ll val)\n{\n\tif(!num)\n\t{\n\t\tnum++;\n\t\tspy[num].val=val;\n\t\tspy[num].key=key;\n\t\tspy[num].fa=spy[num].son[0]=spy[num].son[1]=0;\n\t\tspy[num].siz=1;\n\t\troot=num;\n\t\treturn;\n\t}\n\tre ll now=root;\n\twhile(true)\n\t{\n\t\tpushdown(now);\n\t\tre ll tmp=now;\n\t\tif(spy[now].key>key)\n\t\t{\n\t\t\tnow=ls(now);\n\t\t\tif(!now)\n\t\t\t{\n\t\t\t\tnum++;\n\t\t\t\tconnect(num,tmp,0);\n\t\t\t\tspy[num].val=val;\n\t\t\t\tspy[num].key=key;\n\t\t\t\tspy[num].siz=1;\n\t\t\t\tupdate(tmp);\n\t\t\t\tsplay(num,0);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnow=rs(now);\n\t\t\tif(!now)\n\t\t\t{\n\t\t\t\tnum++;\n\t\t\t\tconnect(num,tmp,1);\n\t\t\t\tspy[num].val=val;\n\t\t\t\tspy[num].key=key;\n\t\t\t\tspy[num].siz=1;\n\t\t\t\tupdate(tmp);\n\t\t\t\tsplay(num,0);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\ninline ll findnum(re ll tt)\n{\n\tre ll now=root;\n\twhile(now)\n\t{\n\t\tpushdown(now);\n\t\tif(ls(now)&&spy[ls(now)].siz>=tt)\n\t\t\tnow=ls(now);\n\t\telse\n\t\t{\n\t\t\tre ll tmp=ls(now)?spy[ls(now)].siz+1:1;\n\t\t\tif(tt<=tmp)\n\t\t\t\treturn now;\n\t\t\ttt-=tmp;\n\t\t\tnow=rs(now);\t\n\t\t}\n\t}\n}\nbool flag;\ninline void dfs(re ll ver)\n{\n\tif(!ver)\n\t\treturn;\n\tpushdown(ver);\n\tdfs(ls(ver));\n\tif(spy[ver].val&&spy[ver].val!=n+1)\n\t{\n\t\tif(flag)\n\t\t\tputchar(' ');\n\t\tif(!flag)\n\t\t\tflag=true;\n\t\tprintf(\"%lld\",spy[ver].val);\n\t}\n\tdfs(rs(ver));\n\treturn;\n}\nll l,r;\nsigned main()\n{\n\tread(n);\n\tread(m);\n\tinsert(0,0);\n\tinsert(n+1,n+1);\n\tfor(re int i=1;i<=n;i++)\n\t\tinsert(i,i);\n/*\tfor(re int i=1;i<=num;i++)\n\t{\n\t\tcout<<i<<\" \"<<fa(i)<<\" \"<<ls(i)<<\" \"<<rs(i)<<endl;\n\t\tcout<<spy[i].siz<<endl;\n\t}*/\n\tfor(re int i=1;i<=m;i++)\n\t{\n\t\tread(l);\n\t\tread(r);\n\t\tl++;\n\t\tr++;\n\t\tre ll x=findnum(l-1),y=findnum(r+1);\n\t\tsplay(x,0);\n\t\tsplay(y,root);\n\t\treverse(ls(y));\n\t}\n\tdfs(root);\n\texit(0);\n}\n```",
        "postTime": 1606461882,
        "uid": 176990,
        "name": "Celtic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u5927\u7ea6\u662f\u6b63\u89e3\u91cc\u6700\u77ed\u7684\u4e00\u7bc7\uff081.1k\uff09\u4f60\u4eec\u7684\u975e\u65cbTreap\u4e3a\u4ec0\u4e48\u90fd\u5199\u90a3\u4e48\u957f\u3002\u3002\n\n\u5148\u8d34\u4e00\u4efd\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#define LS M[rt].ls\n#define RS M[rt].rs\n#define SZ M[rt].sz\n#define MAXN 100001\nstruct Node{ int ls,rs,sz,val,rnd; bool flag; }M[MAXN]; int cnt;\nvoid Reverse(int rt){ if(rt) LS^=RS^=LS^=RS, M[rt].flag^=true; }\nvoid Pushdown(int rt){ if(M[rt].flag) M[rt].flag=false, Reverse(LS), Reverse(RS); }\nint Update(int rt){ return SZ=M[LS].sz+M[RS].sz+1, rt; }\nint Create(int v){ M[++cnt]=(Node){0,0,1,v,rand(),false}; return cnt; }\nint Merge(int u,int v){\n\treturn (u&&v)?(Pushdown(u), Pushdown(v), (M[u].rnd>M[v].rnd)\n\t?(M[u].rs=Merge(M[u].rs,v), Update(u))\n\t:(M[v].ls=Merge(u,M[v].ls), Update(v))):(u|v);\n}\nvoid Split(int rt,int k,int &u,int &v){\n\trt?(Pushdown(rt), (M[LS].sz<k)\n\t?(u=rt, Split(RS,k-M[LS].sz-1,RS,v), Update(rt))\n\t:(v=rt, Split(LS,k,u,LS), Update(rt))):(u=v=0);\n}\nvoid Print(int rt){ if(rt) Pushdown(rt), Print(LS), printf(\"%d \",M[rt].val), Print(RS); }\nint main(){\n\tint n,m,rt=0; scanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++) rt=Merge(rt,Create(i));\n\twhile(m--){\n\t\tint l,r,a,b,c; scanf(\"%d%d\",&l,&r);\n\t\tSplit(rt,r,a,c), Split(a,l-1,a,b), Reverse(b);\n\t\trt=Merge(a,Merge(b,c));\n\t}\n\tPrint(rt); puts(\"\");\n\treturn 0;\n}\n```\n\n\u5b9e\u9645\u4e0a\u5c31\u662f\u628a`Merge`\u548c`Split`\u4e2d\u7684`if`\u90fd\u6362\u6210\u4e86\u4e09\u76ee\u8fd0\u7b97\u7b26\u8fbe\u5230\u538b\u884c\u7684\u76ee\u7684\u3002\n\n\u7136\u540e\u5b9e\u73b0\u4e0a\u6709\u4e00\u4e9b\u7ec6\u8282\u8981\u6ce8\u610f\uff1a\n\n\u7b2c\u4e00\uff1a\u5728\u6253Tag\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u4ea4\u6362\u4e24\u5b50\u6811\u3002\n\n\u7b2c\u4e8c\uff1a`Merge`\u7684\u65f6\u5019\u5728\u5916\u9762`Pushdown`\u800c\u4e0d\u662f\u5728\u91cc\u9762\uff0c\u5373\u5199\u6210\n\n```cpp\nint Merge(int u,int v){\n\treturn (u&&v)?(Pushdown(u), Pushdown(v), (M[u].rnd>M[v].rnd)\n\t?(M[u].rs=Merge(M[u].rs,v), Update(u))\n\t:(M[v].ls=Merge(u,M[v].ls), Update(v))):(u|v);\n}\n```\n\n\u800c\u4e0d\u662f\n\n```cpp\nint Merge(int u,int v){\n\treturn (u&&v)?((M[u].rnd>M[v].rnd)\n\t?(Pushdown(u), M[u].rs=Merge(M[u].rs,v), Update(u))\n\t:(Pushdown(v), M[v].ls=Merge(u,M[v].ls), Update(v))):(u|v);\n}\n```\n\n\u8fd9\u4e24\u4e2a\u95ee\u9898\u5728\u5f88\u591a\u9898\u89e3\u91cc\u90fd\u6709\uff0c\u867d\u7136\u5728\u8fd9\u4e2a\u9898\u76ee\u91cc\u9762\u6ca1\u6709\u4ec0\u4e48\u5f71\u54cd\uff0c\u4f46\u662f\u5982\u679c\u505a\u4e00\u4e9b\u8981\u5728\u8282\u70b9\u4e2d\u5b58\u50a8\u5176\u5b83\u4fe1\u606f\u7684\u9898\u76ee\u5982[[NOI2005]\u7ef4\u62a4\u6570\u5217](https://www.luogu.com.cn/problem/P2042)\uff0c\u8fd9\u4e48\u5199\u5c31\u4f1a\u51fa\u9505\u3002\u6240\u4ee5\u6700\u597d\u5728\u4e00\u5f00\u59cb\u5c31\u517b\u6210\u8fd9\u79cd\u4e60\u60ef\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u9ebb\u70e6\u3002",
        "postTime": 1582511591,
        "uid": 52024,
        "name": "\u9648\u741b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u53c8\u4e00\u9053\u7d2b\u9898\uff08~~\u6076\u5fc3\u5230\u6211\u4e86~~\uff09\n\n# \u8fd9\u91cc\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0b\u65e0\u65cb\u5e73\u8861\u6811\u7684\u505a\u6cd5\n\n\uff08~~\u6211\u4e00\u5b9a\u4e0d\u4f1a\u544a\u8bc9\u4f60\uff0c\u6211\u662f\u770b\u4e86\u522b\u4eba\u535a\u5ba2\u624d\u4f1a\u7684~~\uff09\n\n[\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.org/blog/Treapcjoier/solution-p3369)\uff0c\u6211\u4eec\u4e0d\u5728\u8d58\u8ff0\u666e\u901a\u5e73\u8861\u6811\n\n\u65e0\u65cb\u5e73\u8861\u6811\uff08~~\u53ef\u80fd\u5f88\u591a\u4eba\u90fd\u60f3\u95ee\uff0c\u65e0\u65cb\u548b\u4fdd\u8bc1\u5e73\u8861\uff1f~~\uff09\uff0c\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u89e3\u7b54\uff1a\u8fd9\u91cc\u7684\u5e73\u8861\u6811\u5e73\u8861\u7684\u6761\u4ef6\u5c31\u662f\u90a3\u4e2a\u9644\u52a0\u6743\u503c\uff08~~\u5c31\u662frand~~\uff09\n\n## \u548c\u666e\u901a\u5e73\u8861\u6811\u4e00\u6837\u7684\u65b0\u8282\u70b9\n\n\u6211\u4eec\u9700\u8981\u8fdb\u884c\u4e00\u7cfb\u5217\u521d\u59cb\u5316\u7b49\u64cd\u4f5c\uff0c\u5373\u53ef\u5b8c\u6210\n\n```cpp\nll New(ll v)\n{\n    size(++tot)=1; v(tot)=v; rnd(tot)=rand(); qz(tot)=0;//\u6bd4\u8f83\u5e73\u5e38\u7684\u65b0\u5efa\u8282\u70b9\u5de5\u4f5c\uff0c\u521d\u59cb\u5316\u5f04\u8d77\u6765\uff01 \n    return tot;\n}\n```\n\n## \u548c\u666e\u901a\u5e73\u8861\u6811\u6709\u70b9\u50cf\u7684\u8fd0\u7b97\n\n\u7528\u513f\u5b50\u66f4\u65b0\u7236\u4eb2\uff0c\u628a\u662f\u5426\u7ffb\u8f6c\u5f02\u6216\uff0c\u5728\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\u50cf\u7236\u8282\u70b9\u4e00\u6837\u5f02\u6216\u5373\u53ef\uff08\u5176\u5b9e\u7ffb\u8f6c\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u7528bool\uff09\n\n\u4ee3\u7801\uff1a\n\n```cpp\nvoid update(ll x)//\u8ba1\u7b97 \n{\n    size(x)=size(l(x))+size(r(x))+1;//\u7528\u513f\u5b50\u66f4\u65b0\u7236\u4eb2   \n    if(x&&qz(x))\n    {\n        qz(x)^=1;\n        swap(l(x),r(x));//\u4ea4\u6362\u5de6\u53f3\u513f\u5b50 \n        qz(l(x))^=1,qz(r(x))^=1;//\u513f\u5b50\u7684\u4e5f\u4e00\u6837\u4ea4\u6362 \n    }\n}\n```\n\n\n## \u548c\u7ebf\u6bb5\u6811\u6709\u70b9\u50cf\u7684\u5efa\u6811\n\n1.\u5982\u679c\u5de6\u7aef\u70b9\u5927\u4e8e\u53f3\u7aef\u70b9\uff0creturn \u6389\uff08~~\u533a\u95f4\u90fd\u6ca1\u4e86\uff0c\u5982\u6b64\u7684\u663e\u7136~~\uff09\n\n2.\u53c8\u4e0e\u7ebf\u6bb5\u6811\u6709\u70b9\u50cf\uff08~~\u53d6mid\uff0c\u5de6\u53f3\u5efa\u4e00\u6ce2~~\uff09\n\n3.\u518d\u628a\u4ed6\u8ba1\u7b97\u4e00\u4e0b\u5373\u53ef\uff01\uff01\uff01\uff08~~\u548b\u53c8\u6709\u70b9\u50cf\u666e\u901atreap\u4e86\u5462\uff1f~~\uff09\n\n\u4ee3\u7801\uff1a\n```cpp\nll build(ll l,ll r)//\u5efa\u7acb fhq-treap \n{\n    if(l>r) return 0;//\u8fd9\u5de6\u513f\u5b50\u6bd4\u53f3\u513f\u5b50\u5927return\u6ca1\u95ee\u9898\u5427 \n    ll mid=(l+r)/2,v=mid-1,now=New(v);//\u603b\u611f\u89c9\u6709\u70b9\u50cf\u7ebf\u6bb5\u6811\u7684\u5efa\u6811 \n    l(now)=build(l,v);\n    r(now)=build(v+2,r);\n    update(now);//\u8ba1\u7b97\u4e00\u4e0b \n    return now;\n}\n```\n\n# \u63a5\u4e0b\u6765\u771f\u7684\u662f\u65e0\u65cb\u539f\u521b\u4e86\n\n## \u5408\u5e76\u5e73\u8861\u6811\u64cd\u4f5c\n\n\u7531\u6211\u4eec\u6587\u9996\u7684\u660e\u786e\uff0c\u6bd4\u8f83\u4e00\u4e0b\u9644\u52a0\u6743\u503c\u5728\u5de6\u8fd8\u662f\u5728\u53f3\u5373\u53ef\uff0c\u5408\u5e76\u5de6\uff08\u6216\u53f3\uff09\u5b50\u6811\uff0c\u518d\u8bf4\u4e00\u904d\uff0c\u9644\u52a0\u6743\u503c\u662ffhq treap\u7684\u5e73\u8861\u6807\u51c6\n\n\u4ee3\u7801\uff1a\n```cpp\nll merge(ll x,ll y)//\u9ed8\u8ba4x<y \n{\n    if(!x||!y) return x+y;\n    update(x),update(y);//\u51c6\u5907\u5408\u5e76\uff1f \n    if(rnd(x)<rnd(y))//\u7528rand\u503c\u6765\u7ef4\u62a4\u5806\u8fdb\u800c\u7ef4\u62a4\u5e73\u8861\u6027 \n    {\n        r(x)=merge(r(x),y);//\u53f3\u513f\u5b50\u7684\u6811\u5408\u5e76 \n        update(x);//\u8ba1\u7b97\u4e00\u6ce2 \n        return x;\n    }\n    else\n    {\n        l(y)=merge(x,l(y));//\u548c\u524d\u6587\u4e00\u6837 \n        update(y);\n        return y;   \n    }\n}\n```\n\n## \u5206\u79bb\u5e73\u8861\u6811\u64cd\u4f5c\n\n\u5f15\u7528\u4e00\u6bb5\uff08~~\u67d0\u56db\u5927\u540d\u8457\u7684\u540d\u53e5~~\uff09\uff1a\u201c\u5929\u4e0b\u5927\u52bf\uff0c\u5206\u4e45\u5fc5\u5408\uff0c\u5408\u4e45\u5fc5\u5206\u201d\n\n\u5e73\u8861\u6811\u4eff\u4f5b\u4e5f\u548c\u6b64\u4e00\u6837\uff1a\u6709\u5408\u5fc5\u6709\u5206\n\n\u8fd9\u91cc\u6211\u4eec\u63a8\u8350\u7528size\u5206\uff08\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u662f\u7528\u6743\u503c\u5206\uff09\n\n### \u4e0b\u9762\u53c8\u548cSplay\u7684\u627e\u7b2ck\u5927\u5b50\u6811\u6709\u70b9\u50cf\u4e86\n\n\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u90a3\u4e2ak\u5c0f\u4e8e\u5de6\u5b50\u6811\u7684size\uff0c\u5c31\u53bb\u5206\u4e00\u4e0b\u5de6\u5b50\u6811\n\n\u5426\u5219\u5c31\u53bb\u5206\u53f3\u5b50\u6811\n\n```cpp\nvoid split(ll now,ll k,ll &x,ll &y)\n{\n    if(!now) x=y=0;\n    else\n    {\n        update(now);\n         if (k<=size(l(x))) y=now,split(l(now),k,x,l(now));\n        else x=now,split(r(now),k-size(l(now))-1,r(now),y);//\u53c8\u611f\u89c9\u6709\u70b9\u50cf\u90a3\u4e2a\u666e\u901a\u5e73\u8861\u6811\u4e86 \uff0c\u611f\u89c9\u81ea\u5df1\u7684\u611f\u89c9\u5947\u5947\u602a\u602a\n        update(now);\n    }\n}\n```\n\n\n## \u63d2\u5165\n\n\u5047\u8bbe\u63d2\u5165\u8282\u70b9\u7684\u6743\u503c\u4e3av,\u53ea\u9700\u4ee5\u6b64\u4e3a~~\u5408\u79bb\u7684\u5206\u6bb5\u70b9~~\uff0c\u5148\u5206\u79bb\u4e00\u6ce2\uff0c\u518d\u5efa\u7acb\u65b0\u8282\u70b9\u5408\u5e76\uff08~~\u8fd9\u7834\u64cd\u4f5c~~\uff09\n\nsplit(root,a,x,y\uff09\u518dmerge\u65b0\u5efa\u8282\u70b9\uff08~~\u4ee3\u7801\u592a\u7b80\u5355\u4e86\uff0c\u4e0d\u653e~~\uff09\n\n## \u5220\u9664\n\n\u5c31\u662f\u5206\u79bb\u518d\u5206\u79bb\uff0c\u6b64\u65f6v\u4e00\u5b9a\u662f\u5176\u4e2d\u4e00\u6811\u7684\u6839\uff08~~\u4e0d\u8bc1~~\uff09\uff0c\u518d\u628a\u90a3\u6811\u4e24\u5b50\u6811merge\u4e00\u4e0b\uff08~~v\u795e\u5947\u7684\u4e0d\u89c1\u4e86\uff01~~\uff09\n\n## \u627e\u503cv\u7684\u6392\u540d\n\n\u5c06\u6574\u9897\u6811\u4ee5v-1\u5206\u79bb\u4e00\u4e0b\uff0c\u7531\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\u90a3\u4e48\u6bd4v\u5c0f\u7684\u5c31\u5728\u5de6\u8fb9\uff0c\u518d\u8f93\u51fasize\n\n## \u627e\u6392\u540dv\u7684\u503c\n\n\u548c\u666e\u901a\u5e73\u8861\u6811\u4e00\u6837(~~\u5077\u4e2a\u61d2\uff0c\u5f88\u5f00\u5fc3~~)\n\n## \u524d\u9a71\u540e\u7ee7\n\u4ee5\u524d\u9a71\u4e3a\u4f8b\uff0c\u611f\u89c9\u548c\u6392\u540d\u5dee\u4e0d\u591a\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u662f\u8f93\u51fasize\uff0c\u662f\u5f80\u5de6\u8fb9\u627e\uff0c\u518d\u8f93\u51fa\u6743\u503c\n\n# \u5212\u91cd\u70b9\uff01\uff01\uff01\n\n\u65e2\u7136\u662fSplay\u6811\u6a21\u677f\uff0c\u4e00\u5b9a\u6709\u533a\u95f4\u53cd\u8f6c\uff0c\u65e0\u65cbtreap\u7c7b\u4f3c\uff0c\u6709\u4e00\u4e2a\u533a\u95f4\u64cd\u4f5c\u3002\uff08\u5bf9l-r\u7684\uff09\n\n\u9996\u5148split r\u4e2a\uff0c\u5219\u5de6\u5b50\u6811\u662f\u4ece1-r\u7684\uff0c\u518d\u628a\u5de6\u6811split\uff08\u4ecel\u5f00\u59cb\uff09\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u4f1a\u53d1\u73b0l-r\u5728split\u7684\u53f3\u5b50\u6811\u4e2d\uff08~~\u9707\u60ca\uff01\u867d\u7136\u6211\u8bc1\u4e0d\u4e86~~\uff09\n\n\u4e00\u6ce2\u53c8\u4e00\u6ce2\u7684Split\u8ba9\u6211\u773c\u82b1\u7f2d\u4e71\uff0c\u533a\u95f4\u53cd\u8f6c\u6210\u529f\uff01\uff01\uff01\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n//\u4e0d\u5f00long long\u89c1\u7956\u5b97 \nusing namespace std;\nconst int N=100010;\nstruct trnode\n{\n    ll l,r,v,rnd,size,qz;\n    #define l(x) tr[x].l\n    #define r(x) tr[x].r\n    #define v(x) tr[x].v\n    #define rnd(x) tr[x].rnd\n    #define size(x) tr[x].size\n    #define qz(x) tr[x].qz\n    //\u8fdb\u4e00\u6b65\u7b80\u5316\u4ee3\u7801 \n}tr[N]; \nll tot=0,root=0,n;\nvoid update(ll x)//\u8ba1\u7b97 \n{\n    size(x)=size(l(x))+size(r(x))+1;//\u7528\u513f\u5b50\u66f4\u65b0\u7236\u4eb2   \n    if(x&&qz(x))\n    {\n        qz(x)^=1;\n        swap(l(x),r(x));//\u4ea4\u6362\u5de6\u53f3\u513f\u5b50 \n        qz(l(x))^=1,qz(r(x))^=1;//\u513f\u5b50\u7684\u4e5f\u4e00\u6837\u4ea4\u6362 \n    }\n}\nll New(ll v)\n{\n    tot++;\n    size(tot)=1; v(tot)=v; rnd(tot)=rand(); qz(tot)=0;//\u6bd4\u8f83\u5e73\u5e38\u7684\u65b0\u5efa\u8282\u70b9\u5de5\u4f5c\uff0c\u521d\u59cb\u5316\u5f04\u8d77\u6765\uff01 \n    return tot;\n}\nll build(ll l,ll r)//\u5efa\u7acb fhq-treap \n{\n    if(l>r) return 0;//\u8fd9\u5de6\u513f\u5b50\u6bd4\u53f3\u513f\u5b50\u5927return\u6ca1\u95ee\u9898\u5427 \n    ll mid=(l+r)/2,v=mid-1,now=New(v);//\u603b\u611f\u89c9\u6709\u70b9\u50cf\u7ebf\u6bb5\u6811\u7684\u5efa\u6811 \n    l(now)=build(l,mid-1);\n    r(now)=build(mid+1,r);\n    update(now);//\u8ba1\u7b97\u4e00\u4e0b \n    return now;\n}\nll merge(ll x,ll y)//\u9ed8\u8ba4x<y \n{\n    if(!x||!y) return x+y;\n    update(x),update(y);//\u51c6\u5907\u5408\u5e76\uff1f \n    if(rnd(x)<rnd(y))//\u7528rand\u503c\u6765\u7ef4\u62a4\u5806\u8fdb\u800c\u7ef4\u62a4\u5e73\u8861\u6027 \n    {\n        r(x)=merge(r(x),y);//\u53f3\u513f\u5b50\u7684\u6811\u5408\u5e76 \n        update(x);//\u8ba1\u7b97\u4e00\u6ce2 \n        return x;\n    }\n    else\n    {\n        l(y)=merge(x,l(y));//\u548c\u524d\u6587\u4e00\u6837 \n        update(y);\n        return y;   \n    }\n}\nvoid split(ll now,ll k,ll &x,ll &y)\n{\n    if(!now) x=y=0;\n    else\n    {\n        update(now);\n         if (k<=size(l(now))) y=now,split(l(now),k,x,l(now));\n        else x=now,split(r(now),k-size(l(now))-1,r(now),y);//\u53c8\u611f\u89c9\u6709\u70b9\u50cf\u90a3\u4e2a\u666e\u901a\u5e73\u8861\u6811\u4e86 \n        update(now);\n    }\n}\nvoid rev(ll l,ll r)//\u8fd9\u91cc\u8fdb\u884c\u65cb\u8f6c\u64cd\u4f5c \n{\n    ll a,b,c,d;\n    split(root,r+1,a,b);\n    split(a,l,c,d);\n    qz(d)^=1;\n    root=merge(merge(c,d),b);\n}\nll read()\n{\n\tll r=0,f=1;char c=getchar();\n\twhile((c<'0'||c>'9')&&(c!='-')) c=getchar();\n\tif(c=='-') f=-1,c=getchar();\n\twhile(c>='0'&&c<='9') r=r*10+c-'0',c=getchar();\n\treturn r*f;\n}\nll pri[N],len=0;\nvoid print(int x)\n{\n    if (!x) return;\n    update(x);\n    print(l(x));//\u5c31\u8f93\u51fa\u5de6\u513f\u5b50 \n    if (v(x)>=1 &&v(x)<=n) printf(\"%lld \",v(x));\n    print(r(x));//\u518d\u6765\u53f3\u513f\u5b50 \n}\nint main()\n{\n    srand((unsigned)time(NULL));//\u968f\u673a\u4e00\u4e0b\u5f88\u5f00\u5fc3 \n    ll m;\n\tn=read(),m=read();\n    root=build(1,n+2);//fhq-treap\u5efa\u6811\u8981+2 \n    for(int i=1;i<=m;i++)\n    {\n        ll l=read(),r=read();\n        rev(l,r);\n    }\n    print(root);\n    return 0;\n}\n```\n",
        "postTime": 1572421592,
        "uid": 138649,
        "name": "\u7237\uff0c\u65e0\u9650\u9738\u6c14",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u5199\u975e\u65cbtreap\u7684\u4eba\u597d\u5c11\uff0c\u975e\u65cbtreap\u597d\u5199\u53c8\u597d\u5403\uff0c\u4e3a\u4ec0\u4e48\u6ca1\u4eba\u5199\uff1f\n\n\u975e\u65cbtreap\u7ef4\u62a4\u5e8f\u5217\u975e\u5e38\u65b9\u4fbf\uff0c\u548csplay\u7ef4\u62a4\u533a\u95f4\u540c\u7406\u3002\u6bcf\u6b21\u628a\u533a\u95f4\u8f6c\u5230\u4e2d\u5e8f\uff0c\u5c06\u6807\u8bb0\u6253\u5728\u533a\u95f4\u4e0a\uff0c\u6700\u540e\u4e2d\u5e8f\u904d\u5386\u8f93\u51fa\u5e8f\u5217\u5c31\u884c\u4e86\u3002\n\n\u6ce8\u610f\u6807\u8bb0\u4e00\u5b9a\u8981\u4e0b\u4f20\u3002\u548c\u7ebf\u6bb5\u6811\u4e00\u6837\u3002\n\n\u5b89\u5229\u535a\u5ba2\uff1ahttp://blog.csdn.net/fy_23forever/article/details/79122928\n\n\u535a\u5ba2\u91cc\u7684\u57fa\u7840\u975e\u65cbtreap\u8bb2\u89e3\u5f97\u6bd4\u8f83\u8be6\u7ec6\n\nAC\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm> \nconst int MAXN = 100000 ;\nconst int INF = 0x3f3f3f3f ;\nusing namespace std ;\n\ninline int read ( ) {\n    int x = 0 , w = 1 ; char c = ' ' ;\n    while ( c < '0' || c > '9' ) { c = getchar ( ) ; if ( c == '-' ) w = -1 ; }\n    while ( c >= '0' && c <= '9' ) x = ( x << 1 ) + ( x << 3 ) + ( c ^ 48 ) , c = getchar ( ) ;\n    return x * w ;\n}\n\nstruct Node {\n    int x , y ;\n    Node ( int a , int b ) { x = a , y = b ; }\n} ;\n\nint root ;\n\nclass FhqTreap {\n    struct Treap {\n        int ls , rs , sz , data , key , delta ;\n        #define lson t[x].ls \n        #define rson t[x].rs\n    } t[MAXN + 5] ;\n    public :\n        FhqTreap () { tot = 0 ; root = 0 ; memset ( t , 0 , sizeof ( t ) ) ; }  \n        void PushDown ( int x ) {\n            if ( t[x].delta ) {\n                t[lson].delta ^= t[x].delta , t[rson].delta ^= t[x].delta ;\n                t[x].delta = 0 , swap ( lson , rson ) ;\n            }\n        }\n        void PushUp ( int x ) {\n            t[x].sz = t[lson].sz + t[rson].sz + 1 ;\n        }\n        Node split ( int x , int n ) ; int merge ( int x , int y ) ; \n        void insert ( int &now , int x ) ; \n        void rev ( int L , int R ) ;\n        void dfs ( int x ) ; void print ( ) ;\n    private :\n        int tot ;\n} T ;\n\nNode FhqTreap :: split ( int x , int n ) {\n    if ( !n ) return Node ( 0 , x ) ;\n    PushDown ( x ) ;\n    int m = t[lson].sz ;\n    if ( n == m ) {\n        int tmp = lson ; lson = 0 , PushUp ( x ) ;\n        return Node ( tmp , x ) ;\n    }\n    else if ( n == m + 1 ) {\n        int tmp = rson ; rson = 0 , PushUp ( x ) ;\n        return Node ( x , tmp ) ;\n    }\n    else if ( n < m ) {\n        Node tmp = split ( lson , n ) ;\n        lson = tmp.y , PushUp ( x ) ;\n        return Node ( tmp.x , x ) ;\n    }\n    Node tmp = split ( rson , n - m - 1 ) ;\n    rson = tmp.x , PushUp ( x ) ;\n    return Node ( x , tmp.y ) ;\n}\n\nint FhqTreap :: merge ( int x , int y ) {\n    if ( !x || !y ) return x + y ;\n//  PushDown ( x ) , PushDown ( y ) ;\n    if ( t[x].key < t[y].key ) {\n        PushDown ( x ) ;\n        rson = merge ( rson , y ) , PushUp ( x ) ;\n        return x ;\n    }\n    else {\n        PushDown ( y ) ;\n        t[y].ls = merge ( x , t[y].ls ) , PushUp ( y ) ;\n        return y ;\n    }\n}\n\nvoid FhqTreap :: insert ( int &now , int x ) {\n    t[++tot].data = x , t[tot].key = rand ( ) , t[tot].sz = 1 , t[tot].delta = 0 ;\n    PushDown ( now ) ;\n    now = merge ( now , tot ) ;\n}\n\nvoid FhqTreap :: rev ( int L , int R ) {\n    Node tmp1 = split ( root , L - 1 ) , tmp2 = split ( tmp1.y , R - L + 1 ) ; \n    t[tmp2.x].delta ^= 1 ;\n    root = merge ( tmp1.x , tmp2.x ) , root = merge ( root , tmp2.y ) ;\n}\n\nvoid FhqTreap :: dfs ( int x ) {\n    if ( !x ) return ;\n    PushDown ( x ) , dfs ( lson ) ;\n    printf ( \"%d \" , t[x].data ) ;\n    dfs ( rson ) ;\n}\n\nvoid FhqTreap :: print ( ) {\n    dfs ( root ) ;\n    printf ( \"\\n\" ) ;\n}\n\nint main ( ) {\n    srand ( 40720 ) ;\n    int n = read ( ) , m = read ( ) ;\n    for ( int i = 1 ; i <= n ; ++i )\n        T.insert ( root , i ) ;\n    while ( m-- ) {\n        int L = read ( ) , R = read ( ) ;\n        T.rev ( L , R ) ;\n    }\n    T.print ( ) ;\n    return 0 ;\n}\n```",
        "postTime": 1520044392,
        "uid": 53567,
        "name": "23forever",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u4f3c\u4e4e\u5927\u591a\u6570\u90fd\u662f\u7528\u6570\u7ec4\u5efa\u6811\u7684\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u653e\u4e00\u4e2a\u7eaf\u7cb9\u7528\u6307\u9488\u64cd\u4f5c\u7684\u542b\u6709\u6570\u636e\u5206\u5757\u7684splay\u5b9e\u73b0\u5427\uff08\u6ca1\u9519\u5c31\u8fdestruct\u90fd\u6ca1\u6709\uff0c\u9664\u4e86\u5355\u4e2a\u6570\u636e\u672c\u8eab\u5916\u7eaf\u9760\u5f15\u7528\u7c7b\u578b\u548c\u6307\u9488\u53d8\u91cf\u95f4\u63a5\u5bfb\u5740\uff09\u3002\n\n\u5148\u6765\u8ba8\u8bba\u4e0b\u6570\u636e\u5206\u5757\u7684\u95ee\u9898\uff0c\u91c7\u7528\u4e00\u79cd\u6d88\u6781\u7684\u7b56\u7565\uff1a\u5148\u4ea7\u751f\u4e00\u4e2a\u5305\u542b\u4e86\u6240\u6709\u6570\u636e\u7684\u533a\u5757\uff0c\u4f5c\u4e3a\u6811\u6839\uff0c\u6bcf\u6b21\u8981\u7ffb\u8f6c\u67d0\u4e00\u533a\u57df\u65f6\uff0c\u5982\u679c\u8be5\u533a\u57df\u8fb9\u754c\u4e0d\u662f\u5df2\u7ecf\u4ea7\u751f\u7684\u533a\u5757\u7684\u8fb9\u754c\uff0c\u90a3\u4e48\u5c31\u5206\u5272\u533a\u5757\u4ea7\u751f\u65b0\u7684\u533a\u5757,\u8981\u6c42\u65b0\u533a\u5757\u7684\u5de6\u754c\u4ee3\u8868\u7684\u5e8f\u53f7\u6070\u597d\u662f\u7ffb\u8f6c\u7684\u5de6\u8fb9\u754c\uff0c\u53f3\u754c\u4ee3\u8868\u7684\u5e8f\u53f7\u5219\u6070\u597d\u662f\u7ffb\u8f6c\u7684\u53f3\u8fb9\u754c\u3002\u6bd4\u5982\u539f\u533a\u5757[1,10]\uff0c\u8981\u7ffb\u8f6c\u4e0b\u68073~7\uff0c\u5219\u5148\u5206\u5272\u4ea7\u751f[1,2]\uff0c[3,7]\uff0c[8,10]\uff0c\u7136\u540e\u5c06[2,7]\u533a\u5757\u6807\u8bb0\u4e3a\u53cd\u5411\u3002\u5206\u5272\u65f6\u65b0\u533a\u5757\u7684\u65b9\u5411\uff08\u6b63\u5411\u6216\u53cd\u5411\uff09\u4e0e\u5206\u5272\u524d\u7684\u6574\u4f53\u533a\u5757\u4e00\u81f4\u3002\n\n\u5982\u679c\u539f\u533a\u5757\u6709[1,5]\uff0c[6,10]\uff0c\u8981\u7ffb\u8f6c\u4e0b\u68073~7\uff0c\u5219\u5206\u5272\u5c06\u4f1a\u4ea7\u751f[1,2]\uff0c[3,5]\uff0c[6,7]\uff0c[8,10]\uff0c\u5373\u7ffb\u8f6c\u8fb9\u754c\u5206\u522b\u5904\u4e8e\u4e24\u4e2a\u4e0d\u540c\u533a\u5757\u65f6\uff0c\u5c06\u4f1a\u65b0\u4ea7\u751f\u4e24\u4e2a\u533a\u5757\uff0c\u5176\u4e2d\u5de6\u4fa7\u533a\u5757\u7684\u5de6\u754c\u662f\u7ffb\u8f6c\u7684\u5de6\u8fb9\u754c\uff0c\u53f3\u533a\u5757\u7684\u53f3\u754c\u5219\u662f\u7ffb\u8f6c\u7684\u53f3\u8fb9\u754c\u3002\u5982\u679c\u4e24\u4e2a\u65b0\u533a\u5757\u95f4\u5305\u542b\u4e86\u5f88\u591a\u5176\u4ed6\u533a\u5757\uff0c\u90a3\u4e48\u5c31\u5229\u7528\u5927\u5bb6\u90fd\u5f88\u719f\u6089\u7684\u65cb\u8f6c\u81f3\u4e00\u9897\u5b50\u6811\u7136\u540e\u5b50\u6811\u7684\u6839\u6253\u4e0a\u6807\u8bb0\u7684\u65b9\u6cd5\u5904\u7406\u4e86\u3002\u6211\u7684\u5904\u7406\u662f\u5c06\u5de6\u533a\u5757splay\u81f3\u6839\uff0c\u53f3\u533a\u5757splay\u81f3\u5de6\u533a\u5757\u7684\u53f3\u5b50\u8282\u70b9\uff0c\u7136\u540e\u5de6\u53f3\u533a\u5757\u5404\u81ea\u53cd\u5411\u540e\uff0c\u53f3\u533a\u5757\u7684\u5de6\u5b50\u8282\u70b9\u6253\u4e0a\u5ef6\u8fdf\u66f4\u65b0\u7684\u6807\u8bb0\u3002\n\n\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\uff0c\u7ffb\u8f6c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(mlogm)$\uff0c\u8f93\u51fa\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(n)$\uff0c\u5728m\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\u53ef\u4ee5\u6210\u529f\u5077\u9e21\uff0c\u7406\u8bba\u4e0a\u6bd4\u4e0d\u5206\u5757\u4f1a\u5feb\u4e00\u4e9b\u3002\n\uff08\u5176\u5b9e\u771f\u5b9e\u539f\u56e0\u662f\u6211\u628a\u505a\u67d0\u4e9b\u4e0d\u5f97\u4e0d\u5206\u5757\u7684\u9898\u7684\u4ee3\u7801\u6539\u4e00\u6539\u642c\u8fc7\u6765\u5c31\u7528\uff09\u3002\n\u6bd4\u5982\u5bf9\u4e8e\u8ba8\u8bba\u533a\u63d0\u5230\u7684\u6b64\u9898\u7684\u6c11\u95f4\u52a0\u5f3a\u7248[U70453](https://www.luogu.com.cn/problem/U70453)\uff0c\u5206\u5757\u7b56\u7565\u5c31\u6bd4\u8f83\u6709\u7528\u4e86\u3002\n\n\u4e0b\u9762\u662fAC\u4ee3\u7801\uff0c\u6ce8\u610f\u6b64\u4ee3\u7801\u4f7f\u7528\u4e86C++ 11\u7684\u7279\u6027\u7a7a\u6307\u9488\u53d8\u91cfnullptr\uff1a\n```cpp\n#include<iostream>\ninline int read()\n{\n\tint s = 0, f = 1;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch>'9') {\n\t\tif (ch == '-')\n\t\t\tf = -1;\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0' && ch <= '9') {\n\t\ts = s * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn s * f;\n}\n\ninline void write(int x)\n{\n\tif (x < 0) {\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif (x > 9)\n\t\twrite(x / 10);\n\tputchar(x % 10 + '0');\n}\n\nclass Node {\npublic:\n\tint delay, isReversed;\n\tint lNum, rNum, valueStart, num;\n\tint direction = 0;\n\tNode* left = nullptr;\n\tNode* right = nullptr;\n\tNode* father = nullptr;\n\tNode(int number, int value) {\n\t\tvalueStart = value;\n\t\tisReversed = 0;\n\t\tdelay = 0;\n\t\tlNum = 0;\n\t\trNum = 0;\n\t\tnum = number;\n\t}\n};\nclass SplayTree {\npublic:\n\tstatic const int mod = 1000000000;\n\tNode* root = nullptr;\n\tint size = 0;\n\tint totalsum = 0;\n\tint index = 0;\n\tint leftPart = 0;\n\tvoid RR(Node* input);\n\tvoid LR(Node* input);\n\tvoid splay(Node* input);\n\tvoid splayR(Node* input);\n\tvoid exchange(Node* ipt);\n\tNode* findNode(int index);\n\tvoid inorder(Node* node);\n\tvoid reverse(int indexStart, int indexEnd);\n\tvoid insertR(Node* pre, Node* node);\n};\nvoid SplayTree::RR(Node* input) {\n\tNode* a = input, * fa = a->father, * b = input->left;\n\tif (b->right != nullptr) {\n\t\tb->right->direction = 1;\n\t\tb->right->father = a;\n\t}\n\ta->left = b->right;\n\ta->lNum = b->rNum;\n\tb->rNum = a->rNum + a->lNum + a->num;\n\tb->father = fa;\n\tif (a->direction == 1) {\n\t\tfa->left = b;\n\t}\n\tif (a->direction == -1) {\n\t\tfa->right = b;\n\t}\n\tif (a->direction == 0) {\n\t\troot = b;\n\t}\n\ta->father = b;\n\tb->right = a;\n\tb->direction = a->direction;\n\ta->direction = -1;\n}\nvoid SplayTree::LR(Node* input) {\n\tNode* b = input, * fa = b->father, * a = input->right;\n\tif (a->left != nullptr) {\n\t\ta->left->direction = -1;\n\t\ta->left->father = b;\n\t}\n\tb->right = a->left;\n\tb->rNum = a->lNum;\n\ta->lNum = b->rNum + b->lNum + b->num;\n\ta->father = fa;\n\tif (b->direction == 1) {\n\t\tfa->left = a;\n\t}\n\tif (b->direction == -1) {\n\t\tfa->right = a;\n\t}\n\tif (b->direction == 0) {\n\t\troot = a;\n\t}\n\tb->father = a;\n\ta->left = b;\n\ta->direction = b->direction;\n\tb->direction = 1;\n}\nvoid SplayTree::splay(Node* input) {\n\tif (&input == nullptr) return;\n\twhile (true) {\n\t\tif (input->father == nullptr) break;\n\t\tif (input->father->father != nullptr && input->father->direction == input->direction) {\n\t\t\tif (input->direction == 1) {\n\t\t\t\tRR(input->father->father);\n\t\t\t\tRR(input->father);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (input->direction == -1) {\n\t\t\t\tLR(input->father->father);\n\t\t\t\tLR(input->father);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t}\n\t\tif (input->direction == 1) {\n\t\t\tRR(input->father);\n\t\t\tcontinue;\n\t\t}\n\t\tif (input->direction == -1) {\n\t\t\tLR(input->father);\n\t\t\tcontinue;\n\t\t}\n\t}\n}\nvoid SplayTree::splayR(Node* input) {\n\tif (input == nullptr) return;\n\twhile (true) {\n\t\tif (input == root->right) break;\n\t\tif (input->father->father != root && input->father->direction == input->direction) {\n\t\t\tif (input->direction == 1) {\n\t\t\t\tRR(input->father->father);\n\t\t\t\tRR(input->father);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (input->direction == -1) {\n\t\t\t\tLR(input->father->father);\n\t\t\t\tLR(input->father);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t}\n\t\tif (input->direction == 1) {\n\t\t\tRR(input->father);\n\t\t\tcontinue;\n\t\t}\n\t\tif (input->direction == -1) {\n\t\t\tLR(input->father);\n\t\t\tcontinue;\n\t\t}\n\t}\n}\nvoid SplayTree::exchange(Node* ipt) {\n\tif (ipt == nullptr) return;\n\tif (ipt->delay == 1) {\n\t\tNode* temp = ipt->left;\n\t\tipt->left = ipt->right;\n\t\tipt->isReversed = ipt->isReversed == 1 ? 0 : 1;\n\t\tipt->right = temp;\n\t\tint tmp = ipt->lNum;\n\t\tipt->lNum = ipt->rNum;\n\t\tipt->rNum = tmp;\n\t\tif (ipt->right != nullptr) {\n\t\t\tipt->right->father = ipt;\n\t\t\tipt->right->direction = -1;\n\t\t\tipt->right->delay = ipt->right->delay == 1 ? 0 : 1;\n\t\t}\n\t\tif (ipt->left != nullptr) {\n\t\t\tipt->left->father = ipt;\n\t\t\tipt->left->direction = 1;\n\t\t\tipt->left->delay = ipt->left->delay == 1 ? 0 : 1;\n\t\t}\n\t\tipt->delay = 0;\n\t}\n}\nNode* SplayTree::findNode(int index) {\n\tNode* node = root;\n\twhile (true) {\n\t\texchange(node);\n\t\tif (leftPart + node->lNum + node->num <= index) {\n\t\t\tleftPart += node->lNum + node->num;\n\t\t\tnode = node->right;\n\t\t\tcontinue;\n\t\t}\n\t\tif (leftPart + node->lNum > index) {\n\t\t\tnode = node->left;\n\t\t\tcontinue;\n\t\t}\n\t\tif (leftPart + node->lNum + node->num > index&& leftPart + node->lNum <= index) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn node;\n}\n\nvoid SplayTree::reverse(int indexStart, int indexEnd) {\n\tif (indexStart == indexEnd) return;\n\tif (indexStart > indexEnd) {\n\t\tint temp = indexStart;\n\t\tindexStart = indexEnd;\n\t\tindexEnd = temp;\n\t}\n\tNode* node = root;\n\tleftPart = 0;\n\tint leftPart1, leftPart2;\n\tnode = findNode(indexStart);\n\tleftPart1 = leftPart;\n\tleftPart = 0;\n\tNode* node2 = findNode(indexEnd);\n\tleftPart2 = leftPart;\n\tNode* startNode;\n\tNode* endNode;\n\tint iss = 0;\n\tNode* endNode2 = nullptr;\n\tif (indexEnd == leftPart2 + node2->lNum + node2->num - 1) {\n\t\tiss = 1;\n\t\tendNode = node2;\n\t\tendNode2 = node2;\n\t}\n\telse {\n\t\tint nxtNum = leftPart2 + node2->lNum + node2->num - 1 - indexEnd, nxtv;\n\t\tif (node2->isReversed == 0) {\n\t\t\tnxtv = node2->valueStart + node2->num - nxtNum;\n\t\t\tendNode = new Node(nxtNum, nxtv);\n\t\t\tendNode->isReversed = 0;\n\t\t\tinsertR(node2, endNode);\n\t\t\tnode2->rNum += nxtNum;\n\t\t\tnode2->num -= nxtNum;\n\t\t}\n\t\telse {\n\t\t\tnxtv = node2->valueStart;\n\t\t\tendNode = new Node(nxtNum, nxtv);\n\t\t\tendNode->isReversed = 1;\n\t\t\tinsertR(node2, endNode);\n\t\t\tnode2->rNum += nxtNum;\n\t\t\tnode2->valueStart += nxtNum;\n\t\t\tnode2->num -= nxtNum;\n\t\t}\n\t}\n\tint iss2 = 0;\n\tif (indexStart == leftPart1 + node->lNum) {\n\t\tiss2 = 1;\n\t\tstartNode = node;\n\t}\n\telse {\n\t\tint nxtNum = leftPart1 + node->lNum + node->num - indexStart, nxtv;\n\t\tif (node->isReversed == 0) {\n\t\t\tnxtv = node->valueStart + node->num - nxtNum;\n\t\t\tstartNode = new Node(nxtNum, nxtv);\n\t\t\tstartNode->isReversed = 0;\n\t\t\tinsertR(node, startNode);\n\t\t\tnode->rNum += nxtNum;\n\t\t\tnode->num -= nxtNum;\n\t\t}\n\t\telse {\n\t\t\tnxtv = node->valueStart;\n\t\t\tstartNode = new Node(nxtNum, nxtv);\n\t\t\tstartNode->isReversed = 1;\n\t\t\tinsertR(node, startNode);\n\t\t\tnode->rNum += nxtNum;\n\t\t\tnode->valueStart += nxtNum;\n\t\t\tnode->num -= nxtNum;\n\t\t}\n\n\t}\n\tif (iss == 0) endNode2 = endNode->father;\n\telse if (node == node2 && iss == 1 && iss2 == 0) {\n\t\tendNode2 = endNode->right;\n\t}\n\tif (startNode == endNode2) {\n\t\tstartNode->isReversed = startNode->isReversed == 0 ? 1 : 0;\n\t\treturn;\n\t}\n\n\telse {\n\t\tsplay(startNode);\n\t\tsplayR(endNode2);\n\t\tint tmp = startNode->isReversed;\n\t\tstartNode->isReversed = endNode2->isReversed == 0 ? 1 : 0;\n\t\tendNode2->isReversed = tmp == 0 ? 1 : 0;\n\t\tint temp = startNode->valueStart;\n\t\tstartNode->valueStart = endNode2->valueStart;\n\t\tendNode2->valueStart = temp;\n\t\tstartNode->rNum = startNode->rNum - endNode2->num + startNode->num;\n\t\ttemp = startNode->num;\n\t\tstartNode->num = endNode2->num;\n\t\tendNode2->num = temp;\n\t\tif (endNode2->left != nullptr) endNode2->left->delay = endNode2->left->delay == 0 ? 1 : 0;\n\t}\n}\nvoid SplayTree::insertR(Node* pre, Node* node) {\n\tNode* temp = pre->right;\n\tpre->right = node;\n\tnode->father = pre;\n\tnode->rNum = pre->rNum;\n\tif (temp != nullptr) temp->father = node;\n\tnode->right = temp;\n\tnode->direction = -1;\n\tsize++;\n}\n\nvoid SplayTree::inorder(Node* node) {\n\tif (node == nullptr) return;\n\texchange(node);\n\tinorder(node->left);\n\tif (node->isReversed == 0) {\n\t\tfor (int i = 0; i < node->num; i++) {\n\t\t\twrite(node->valueStart + i + 1);\n\t\t\tputchar(32);\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = node->num - 1; i >= 0; i--) {\n\t\t\twrite(node->valueStart + i + 1);\n\t\t\tputchar(32);\n\t\t}\n\t}\n\tindex += node->num;\n\tinorder(node->right);\n}\n\nint main() {\n\tint N;\n\tint m;\n\tN = read();\n\tm = read();\n\tSplayTree t;\n\tNode* rt =new Node(N, 0);\n\tt.root = rt;\n\tt.root->direction = 0;\n\tt.size++;\n\tint a, b;\n\tfor (int i = 0; i < m; i++) {\n\t\ta = read();\n\t\tb = read();\n\t\tt.reverse(a - 1, b - 1);\n\t}\n\tt.totalsum = 0;\n\tt.index = 0;\n\tt.inorder(t.root);\n\treturn 0;\n}\n```\n",
        "postTime": 1584785572,
        "uid": 217446,
        "name": "Apeiria",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u4e3b\u8981\u63d0\u4e00\u4e0b\u5751\u70b9\u548c\u5173\u6ce8\u70b9\u3002  \n\u5173\u6ce8\u70b9:   \n\u7528Splay\u7ef4\u62a4\u5e8f\u5217\uff0c\u9996\u5148\u8981\u660e\u786e\uff0c\u4e00\u4e2a\u8282\u70b9\u7684rank\u4ee3\u8868\u8be5\u8282\u70b9\u5728\u5e8f\u5217\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u4e5f\u5c31\u662f\u4e2d\u5e8f\u904d\u5386\u7684\u5e8f\u3002\u8fd9\u4e2arank\u662f\u901a\u8fc7Splay\u7ef4\u62a4\u7684size\u57df\u6765\u6c42\u7684\u3002\u7136\u540e\uff0c\u8fd9\u4e2arank\u4e0e\u952e\u503c\u672c\u8eab\u65e0\u5173\uff0c\u56e0\u4e3a\u65cb\u8f6c\u64cd\u4f5c\u5e76\u4e0d\u6539\u53d8rank\u7684\u76f8\u5bf9\u5148\u540e\u3002  \n\u7136\u540e\u8bf4\u7ffb\u8f6c\u64cd\u4f5c\u3002\u5c31\u662f\u5728\u6811\u4e0a\u4e0d\u65adswap\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u3002\u8fd9\u6837\u5c31\u628a\u5e8f\u5217\u5de6\u8fb9\u548c\u53f3\u8fb9\u4e92\u6362\u3002\u8fed\u4ee3\u4ea4\u6362\u5230\u53f6\u5b50\u8282\u70b9\u5373\u53ef\u5b8c\u6210\u4e00\u4e2a\u5b50\u6811\u7ef4\u62a4\u3002\u901a\u5e38\u6211\u4eec\u7528lazy\u6807\u8bb0\u5ef6\u8fdf\u8fd9\u4e2a\u7ffb\u8f6c\u64cd\u4f5c\u3002\u7136\u540e\u6211\u4eec\u53ea\u8981\u628a\u4e00\u6bb5\u533a\u95f4\u7684\u524d\u9a71splay\u5230\u6839\uff0c\u540e\u7ee7splay\u5230\u524d\u9a71\uff0c\u90a3\u4e48\u4ee3\u8868\u8fd9\u4e2a\u533a\u95f4\u7684\u8282\u70b9\u4e00\u5b9a\u5728\u5b83\u7684\u540e\u7ee7\u7684\u5de6\u5b50\u6811\u4e2d\u3002\u7ffb\u8f6c\u8fd9\u4e2a\u5b50\u6811\u5373\u53ef\u3002  \n\u5751\u70b9:  \n\u7528\u4e8e\u7ef4\u62a4\u5e8f\u5217\u7684lazy\u6807\u8bb0\u4e00\u822c\u662f\u8868\u793a\u5f53\u524d\u8282\u70b9\u53ca\u5176\u5b50\u6811\u672a\u7ffb\u8f6c, \u8fd9\u4e0d\u540c\u4e8e\u7ebf\u6bb5\u6811(\u5f53\u524d\u8282\u70b9\u7684\u513f\u5b50\u5df2\u66f4\u65b0\uff0c\u4f46\u5b83\u4eec\u7684\u5b50\u6811\u672a\u66f4\u65b0)\u3002\u8fd9\u5927\u6982\u662f\u7531\u4e8e\u6211\u4eec\u5728\u7ef4\u62a4Splay\u7684size\u57df\u5373\u4e00\u4e9b\u5e38\u89c1\u7684\u57df\u65f6\u4e0d\u9700\u8981\u77e5\u9053\u533a\u95f4\u662f\u5426\u7ffb\u8f6c\u7684\u4fe1\u606f\u3002\u800c\u7ebf\u6bb5\u6811\u7684update\u662f\u9700\u8981\u7531\u4e24\u4e2a\u5b69\u5b50\u7684\u533a\u95f4\u5408\u5e76\u5f97\u5230\u7684\u3002  \n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct node {\n\tint ch[2], fa, size, rev, dat;\n\tnode() { size = fa = ch[0] = ch[1] = rev = dat = 0; }\n};\n\nvector<node> tre;\nint tot = 1, root;\n\nint chr(int x) {\n\treturn tre[tre[x].fa].ch[1]==x;\n}\n\nvoid update(int x) {\n\ttre[x].size = tre[tre[x].ch[0]].size + tre[tre[x].ch[1]].size + 1;\n}\n\nvoid maintain(int x) {\n\t\tswap(tre[x].ch[0], tre[x].ch[1]);\n\t\ttre[x].rev ^= 1;\n\t\ttre[tre[x].ch[0]].rev ^= 1;\n\t\ttre[tre[x].ch[1]].rev ^= 1;\n}\n\nvoid rotate(int x) {\n\tint y = tre[x].fa, z = tre[y].fa, k = chr(x), s = tre[x].ch[k^1];\n\ttre[y].ch[k] = s; tre[s].fa = y;\n\ttre[z].ch[chr(y)] = x; tre[x].fa = z;\n\ttre[x].ch[k^1] = y; tre[y].fa = x;\n\tupdate(y); update(x);\n}\n\nvoid splay(int x, int tar = 0) {\n\twhile(tre[x].fa != tar) {\n\t\tif(tre[tre[x].fa].fa != tar) rotate(chr(tre[x].fa)==chr(x) ? tre[x].fa : x);\n\t\trotate(x);\n\t}\n\tif(!tar) root = x;\n}\n\nint build(int l, int r, int f) {\n\tint mid = (l + r) >> 1, id = tot++;\n\ttre[id].dat = mid;\n\ttre[id].fa = f;\n\tif(l == r) {\n\t\ttre[id].size = 1;\n\t\treturn id;\n\t}\n\tif(l < mid) tre[id].ch[0] = build(l, mid-1, id);\n\tif(mid < r) tre[id].ch[1] = build(mid+1, r, id);\n\tupdate(id);\n\treturn id;\n}\n\nint findkth(int k) {\n\tint cur = root;\n\twhile(true) {\n\t\tif(tre[cur].rev) maintain(cur);\n\t\tif(tre[tre[cur].ch[0]].size == k) break;\n\t\tif(tre[tre[cur].ch[0]].size < k) k -= tre[tre[cur].ch[0]].size + 1, cur = tre[cur].ch[1];\n\t\telse cur = tre[cur].ch[0];\n\t}\n\treturn cur;\n}\n\nvoid reverse(int l, int r) {\n\tint pre = findkth(l - 1), post = findkth(r + 1);\n\tsplay(pre); splay(post, pre);\n\tint cur = tre[post].ch[0];\n\ttre[cur].rev ^= 1;\n}\n\nvector<int> stk;\n\nvoid dfs(int cur) {\n\tif(tre[cur].rev) maintain(cur);\n\tif(tre[cur].ch[0]) dfs(tre[cur].ch[0]);\n\tstk.push_back(tre[cur].dat);\n\tif(tre[cur].ch[1]) dfs(tre[cur].ch[1]);\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint n, m, l, r;\n\tcin >> n >> m;\n\ttre.resize(n + 3);\n\troot = build(0, n+1, 0);\n\twhile(m--) {\n\t\tcin >> l >> r;\n\t\treverse(l, r);\n\t}\n\tdfs(root);\n\tfor(int cur = 1; cur < stk.size() - 1; ++cur) cout << stk[cur] << ' ';\n\tcout << '\\n';\n\treturn 0;\n}\n```",
        "postTime": 1584333794,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u8fdePascal\u9898\u89e3\u4e00\u7bc7\u90fd\u6ca1\u6709\u2026\u2026\n\n\u6240\u4ee5\u8ba9\u6211\u6765\u53d1\u4e00\u7bc7\u5427\u3002/\u6ed1\u7a3d\n\n\u7531\u4e8e\u6211\u592a\u5f31\u4e86\uff0c\u53ea\u80fd\u5199\u6b63\u89e3splay\u3002\u3002\u3002\n\n\u5177\u4f53\u7684\u539f\u7406\uff0c\u767e\u5ea6\u4e00\u4e0b\uff0c\u90a3\u4e9bC++\u5927\u4f6c\u5df2\u7ecf\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\u3002\n\n\u8fd9\u91cc\u5949\u4e0a\u8c03\u4e86\u597d\u51e0\u5929\u7684\u4ee3\u7801\uff1a\n\n```pas\n//Splay Tree\nvar\n  a,s,l,r,f:array[0..100002]of longint;//a\u662f\u539f\u503c\uff0cs\u662f\u5b50\u6811\u7684\u8282\u70b9\u6570\uff0cl\u548cr\u8868\u793a\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\uff0cf\u8868\u793a\u7236\u4eb2\n  o:array[0..100002]of boolean;//\u6807\u8bb0\n  n,m,i,x,y,root:longint;\nprocedure pushup(x:longint);\nbegin\n  s[x]:=s[l[x]]+s[r[x]]+1;\nend;\nprocedure pushdown(x:longint); //\u6807\u8bb0\u4e0b\u4f20\nvar\n  t:longint;\nbegin\n  if o[x] then\n  begin\n    o[l[x]]:=not o[l[x]];\n    o[r[x]]:=not o[r[x]];\n    t:=l[x];\n    l[x]:=r[x];\n    r[x]:=t;\n    o[x]:=false;\n  end;\nend;\nprocedure rotate(x:longint);   //\u65cb\u8f6c\nvar\n  y,z:longint;\nbegin\n  y:=f[x];\n  z:=f[y];\n  if l[z]=y then\n    l[z]:=x\n  else\n    r[z]:=x;\n  f[x]:=z;\n  if l[y]=x then\n  begin\n    l[y]:=r[x];\n    f[r[x]]:=y;\n    r[x]:=y;\n  end\n  else\n  begin\n    r[y]:=l[x];\n    f[l[x]]:=y;\n    l[x]:=y;\n  end;\n  f[y]:=x;\n  pushup(x);\n  pushup(y);\nend;\nprocedure splay(x,t:longint);  //\u4f38\u5c55\nbegin\n  while f[x]<>t do\n  begin\n    if f[f[x]]<>t then\n      if (l[f[x]]=x) xor (l[f[f[x]]]=f[x]) then\n        rotate(x)\n      else\n        rotate(f[x]);\n    rotate(x);\n  end;\n  if t=0 then\n    root:=x;\nend;\nprocedure insert(x,k,n:longint);//\u63d2\u5165\u8282\u70b9\uff0cn\u8868\u793a\u7b2c\u51e0\u4e2a\u8282\u70b9\nvar\n  t:longint;\nbegin\n  t:=0;\n  while x>0 do\n  begin\n    t:=x;\n    if k<a[x] then\n      x:=l[x]\n    else\n      x:=r[x];\n  end;\n  if t>0 then\n    if k<a[t] then\n      l[t]:=k\n    else\n      r[t]:=k;\n  a[n]:=k;\n  l[n]:=0;\n  r[n]:=0;\n  s[n]:=1;\n  f[n]:=t;\n  o[n]:=false;\n  splay(n,0);\nend;\nfunction kth(k:longint):longint;//\u67e5\u8be2\u7b2ck\u5c0f\nvar\n  x:longint;\nbegin\n  x:=root;\n  while true do\n  begin\n    pushdown(x);\n    if s[l[x]]+1=k then\n      exit(x);\n    if s[l[x]]>=k then\n      x:=l[x]\n    else\n    begin\n      dec(k,s[l[x]]+1);\n      x:=r[x];\n    end;\n  end;\nend;\nprocedure reverse(x,y:longint);//\u7ffb\u8f6c\nbegin\n  x:=kth(x);\n  y:=kth(y+2);\n  splay(x,0);\n  splay(y,x);\n  o[l[r[x]]]:=not o[l[r[x]]];\nend;\nbegin\n  read(n,m);\n  root:=0;\n  for i:=1 to n+2 do           //build\n    insert(root,i,i);\n  for i:=1 to m do\n  begin\n    read(x,y);\n    reverse(x,y);\n  end;\n  for i:=2 to n+1 do\n    write(kth(i)-1,' ');\n  writeln;\nend.\n```",
        "postTime": 1544876255,
        "uid": 40241,
        "name": "dblark",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u7a81\u7136\u89c9\u5f97splay\u633a\u6709\u610f\u601d\u7684\u2026\u2026\n\n\u8fd9\u9053\u9898\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\uff1a\u533a\u95f4\u7ffb\u8f6c\u3002\n\n\u9996\u5148\u5e94\u8be5\u77e5\u9053\u7684\u662f\uff0csplay\u548c\u7ebf\u6bb5\u6811\u4e00\u6837\uff0c\u90fd\u53ef\u4ee5\u6253\u6807\u8bb0\uff0c\u7136\u540e\u8d70\u5230\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e4b\u524d\u5148\u4e0b\u4f20\u3002\n\n\u90a3\u600e\u4e48\u6253\u6807\u8bb0\u5462\uff1f\u8fd8\u5e94\u8be5\u6709\u201c\u533a\u95f4\u201d\u7684\u601d\u60f3\u3002\n\n\u5bf9\u4e8e\u533a\u95f4$[L, R]$\uff0c\u60f3\u529e\u6cd5\u628a\u8fd9\u4e2a\u533a\u95f4\u6240\u5728\u7684\u5b50\u6811\u63d0\u53d6\u51fa\u6765\uff0c\u7136\u540e\u6253\u4e2a\u6807\u8bb0\u5373\u53ef\u3002\n\n\u90a3\u600e\u4e48\u63d0\u53d6\u5462\uff1f\u5176\u5b9e\u4e5f\u4e0d\u96be\u3002\u53ea\u8981\u627e\u51fa$L$\u7684\u524d\u9a71$a = L - 1$\u548c$R$\u7684\u540e\u7ee7$b = R  + 1$\uff0c\u7136\u540e\u628a$a$\u65cb\u5230\u6839\uff0c\u518d\u628a$b$\u65cb\u5230\u6839\u7684\u53f3\u5b50\u8282\u70b9\uff0c\u8fd9\u6837$b$\u7684\u5de6\u5b50\u6811\u5c31\u662f\u5f53\u524d\u533a\u95f4\u4e86\u3002\n\n\u4f46\u662f\u627e\u524d\u9a71\u548c\u540e\u7ee7\u53ea\u80fd\u50cfbst\u90a3\u4e48\u627e\uff0c\u56e0\u4e3a\u8fd9\u68f5splay\u7684key\u503c\u662f\u4e0b\u6807\uff0c\u800c\u4e0b\u6807\u5e76\u6ca1\u6709\u5b58\u8d77\u6765\uff0c\u800c\u662f\u901a\u8fc7\u5b50\u6811\u5927\u5c0f\u4f53\u73b0\u7684\u3002\u6240\u4ee5\u4e0a\u8ff0\u627e\u524d\u9a71\u548c\u540e\u7ee7\u64cd\u4f5c\u76f8\u5f53\u4e8e\u67e5\u8be2\u7b2c$k$\u5927\u3002\u56e0\u4e3a\u4e8b\u5148\u52a0\u4e86$-INF$\u548c$INF$\u9632\u6b62\u8d8a\u754c\uff0c\u6240\u4ee5\u627e\u524d\u9a71\u5c31\u662f\u67e5\u8be2\u7b2c$L$\u5927\u7684\uff0c\u540e\u7ee7\u5c31\u662f\u7b2c$R + 2$\u5927\u7684\u3002\n```c++\nint getRank(int k)\n{\n  int now = root;\n  while(1)\n    {\n      pushdown(now);\n      if(t[t[now].ch[0]].siz >= k) now = t[now].ch[0];\n      else if(t[t[now].ch[0]].siz + 1 == k) return now;\n      else k -= t[t[now].ch[0]].siz + 1, now = t[now].ch[1];\n    }\n}\nvoid update(int L, int R)\n{\n  int a = getRank(L), b = getRank(R + 2); //pre(L), nxt(R)\n  splay(a, 0); splay(b, a); //\u73b0\u5728b\u7684\u5de6\u5b50\u6811\u5c31\u662f\u5f53\u524d\u533a\u95f4\n  pushdown(root); pushdown(t[root].ch[1]);\n  int now = t[t[root].ch[1]].ch[0];\n  t[now].lzy ^= 1;\n}\n```\n\n\u8fd8\u6709\u4e00\u4ef6\u4e8b\u5c31\u662f\u5efa\u6811\uff0c\u867d\u7136\u53ef\u4ee5\u50cf[\u8fd9\u9053\u9898](https://www.luogu.org/problemnew/show/P2596)\u4e00\u6837\u6bcf\u4e00\u6b21\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u4e0d\u8fc7\u6709\u66f4\u53ef\u7231\u7684\u65b9\u6cd5\u3002\n\n\u4eff\u7167\u7ebf\u6bb5\u6811\u7684\u5efa\u6811\u65b9\u6cd5\uff0c\u4f46\u6709\u4e00\u4e2a\u663e\u8457\u7684\u533a\u522b\u662f\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u533a\u95f4\uff0c\u800csplay\u5c31\u8868\u793a\u4e00\u4e2a\u70b9\uff0c\u6240\u4ee5\u9012\u5f52\u7684\u65f6\u5019\u628a\u5f53\u524d\u533a\u95f4\u7684$a[mid]$\u4f5c\u4e3a\u7ebf\u6bb5\u6811\u8be5\u8282\u70b9\u7684\u6743\u503c\uff0c\u7136\u540e\u5230$[L, mid - 1]$\u548c$[mid + 1, R]$\u4e2d\u5efa\u7acb\u5de6\u53f3\u5b50\u6811\u3002\n```c++\nint build(int L, int R, int f)\n{\n  if(L > R) return 0;\n  int mid = (L + R) >> 1, now = ++ncnt;\n  t[now].val = a[mid]; t[now].fa = f;\n  t[now].ch[0] = build(L, mid - 1, now);\n  t[now].ch[1] = build(mid + 1, R, now);\n  pushup(now);\n  return now;\n}\n```\n\n\u6700\u540e\u4e00\u4ef6\u4e8b\u5c31\u662f\u8f93\u51fa\u3002\u5229\u7528splay\u81ea\u8eab\u7684\u6027\u8d28\uff0c\u4e2d\u5e8f\u904d\u5386\u5c31\u662f\u7b54\u6848\u3002\n\n\u5b8c\u6574\u4ee3\u7801\n```c++\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<cctype>\n#include<vector>\n#include<stack>\n#include<queue>\nusing namespace std;\n#define enter puts(\"\") \n#define space putchar(' ')\n#define Mem(a, x) memset(a, x, sizeof(a))\n#define rg register\ntypedef long long ll;\ntypedef double db;\nconst int INF = 0x3f3f3f3f;\nconst db eps = 1e-8;\nconst int maxn = 1e5 + 5;\ninline ll read()\n{\n  ll ans = 0;\n  char ch = getchar(), last = ' ';\n  while(!isdigit(ch)) last = ch, ch = getchar();\n  while(isdigit(ch)) ans = (ans << 1) + (ans << 3) + ch - '0', ch = getchar();\n  if(last == '-') ans = -ans;\n  return ans;\n}\ninline void write(ll x)\n{\n  if(x < 0) x = -x, putchar('-');\n  if(x >= 10) write(x / 10);\n  putchar(x % 10 + '0');\n}\n\nint n, m, a[maxn];\nstruct Tree\n{\n  int ch[2], fa;\n  int val, siz, lzy;\n}t[maxn];\nint root, ncnt = 0;\nvoid _PrintTr(int now)\n{\n  if(!now) return;\n  printf(\"nd:%d val:%d ls:%d rs:%d\\n\", now, t[now].val, t[t[now].ch[0]].val, t[t[now].ch[1]].val);\n  _PrintTr(t[now].ch[0]); _PrintTr(t[now].ch[1]);\n}\nvoid pushdown(int now)\n{\n  if(now && t[now].lzy)\n    {\n      t[t[now].ch[0]].lzy ^= 1; t[t[now].ch[1]].lzy ^= 1;\n      swap(t[now].ch[0], t[now].ch[1]);\n      t[now].lzy = 0;\n    }\n}\nvoid pushup(int now)\n{\n  t[now].siz = t[t[now].ch[0]].siz + t[t[now].ch[1]].siz + 1;\n}\nvoid rotate(int x)\n{\n  int y = t[x].fa, z = t[y].fa, k = (t[y].ch[1] == x);\n  t[z].ch[t[z].ch[1] == y] = x; t[x].fa = z;\n  t[y].ch[k] = t[x].ch[k ^ 1]; t[t[y].ch[k]].fa = y;\n  t[x].ch[k ^ 1] = y; t[y].fa = x;\n  pushup(y); pushup(x);\n}\nvoid splay(int x, int s)  //\u65cb\u8f6c\u7684\u65f6\u5019\u4e0d\u7528pushdown.(\u56e0\u4e3a\u662f\u81ea\u5e95\u5411\u4e0a\u7684)\n{\n  while(t[x].fa != s)\n    {\n      int y = t[x].fa, z = t[y].fa;\n      if(z != s)\n\t{\n\t  if((t[z].ch[0] == y) ^ (t[y].ch[0] == x)) rotate(x);\n\t  else rotate(y);\n\t}\n      rotate(x);\n    }\n  if(s == 0) root = x;\n}\nint build(int L, int R, int f)\n{\n  if(L > R) return 0;\n  int mid = (L + R) >> 1, now = ++ncnt;\n  t[now].val = a[mid]; t[now].fa = f;\n  t[now].ch[0] = build(L, mid - 1, now);\n  t[now].ch[1] = build(mid + 1, R, now);\n  pushup(now);\n  return now;\n}\nint getRank(int k)\n{\n  int now = root;\n  while(1)\n    {\n      pushdown(now);\n      if(t[t[now].ch[0]].siz >= k) now = t[now].ch[0];\n      else if(t[t[now].ch[0]].siz + 1 == k) return now;\n      else k -= t[t[now].ch[0]].siz + 1, now = t[now].ch[1];\n    }\n}\nvoid update(int L, int R)\n{\n  int a = getRank(L), b = getRank(R + 2); //pre(L), nxt(R)\n  splay(a, 0); splay(b, a); //\u73b0\u5728b\u7684\u5de6\u5b50\u6811\u5c31\u662f\u5f53\u524d\u533a\u95f4\n  pushdown(root); pushdown(t[root].ch[1]);\n  int now = t[t[root].ch[1]].ch[0];\n  t[now].lzy ^= 1;\n}\nvoid print(int now)\n{\n  pushdown(now);\n  if(t[now].ch[0]) print(t[now].ch[0]);\n  if(t[now].val != INF && t[now].val != -INF) write(t[now].val), space;\n  if(t[now].ch[1]) print(t[now].ch[1]);\n}\n\nint main()\n{\n  n = read(); m = read();\n  a[1] = -INF; a[n + 2] = INF;\n  for(int i = 1; i <= n; ++i) a[i + 1] = i;\n  root = build(1, n + 2, 0);\n  //_PrintTr(root);\n  for(int i = 1, L, R; i <= m; ++i) L = read(), R = read(), update(L, R);\n  print(root), enter;\n  return 0;\n}\n```",
        "postTime": 1543839141,
        "uid": 55965,
        "name": "mrclr",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u6b63\u89e3\u5f53\u7136\u662fsplay\uff0c\u4e0d\u8fc7\u6211\u521a\u624d\u8bd5\u4e86\u4e00\u79cd\u76f8\u5f53\u597d\u5199\u7684\u5199\u6cd5\u2014\u2014\u968f\u673a\u5316+Spaly\u4e5fA\u4e86\u8fd9\u9053\u9898\u3002\u6ca1\u5f00O2\u4f18\u5316\uff0c\u8dd1\u4e86441ms\uff0c\u65f6\u95f4\u76f8\u5f53\u4f18\u79c0\u3002\n\n\u6bcf\u6b21\u63d0\u53d6\u533a\u95f4\u65f6\uff0c\u628a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u53f3\u4fa7\u7684\u4f4d\u7f6e\u5355\u65cb\u5230\u6839\u8282\u70b9\uff0c\u628a\u533a\u95f4\u5de6\u7aef\u70b9\u5de6\u4fa7\u7684\u4f4d\u7f6e\u5355\u65cb\u5230\u6839\u8282\u70b9\u7684\u5de6\u5b50\u3002\u8fd9\u6837\u6839\u8282\u70b9\u7684\u5de6\u5b50\u7684\u53f3\u5b50\u6811\uff0c\u5c31\u662f\u4f60\u60f3\u8981\u64cd\u4f5c\u7684\u5e8f\u5217\u4e86\u3002\u4e3a\u4e86\u907f\u514d\u5173\u4e8e\u5bf9\u6574\u4e2a\u5e8f\u5217\u7684\u7ffb\u8f6c\u4ee5\u53ca\u5e8f\u5217\u524d\u7f00\u6216\u540e\u7f00\u7684\u7ffb\u8f6c\u7684\u7279\u5224\uff0c\u6211\u5728\u6574\u4e2a\u5e8f\u5217\u7684\u6700\u524d\u9762\u548c\u6700\u540e\u9762\u5206\u522b\u52a0\u4e860\u548c-1\u4e24\u4e2a\u5143\u7d20\uff0c\u8fd9\u4e24\u4e2a\u5143\u7d20\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u3002\n\n\u968f\u673a\u5316\u5176\u5b9e\u662f\u5341\u5206\u597d\u5199\u7684\uff0c\u53ea\u9700\u8981\u5199\u4e00\u4e2atreap\u5f0f\u7684\u63d2\u5165\uff0c\u628atreap\u7684\u6709\u6761\u4ef6rotate\u6539\u4e3a\u4e8c\u5206\u4e4b\u4e00\u6982\u7387\u7684\u968f\u673arotate\u5c31\u53ef\u4ee5\u4e86\u3002\u56e0\u4e3a\u6811\u7684\u521d\u59cb\u5f62\u6001\u5c31\u662f\u968f\u673a\u7684\uff0c\u800c\u6bcf\u6b21\u7684\u64cd\u4f5c\u5176\u5b9e\u53ea\u662f\u5c06\u67d0\u4e2a\u70b9\u65cb\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u611f\u6027\u7406\u89e3\u6811\u7684\u968f\u673a\u6027\u4e0d\u4f1a\u88ab\u7834\u574f\u3002\n\n\u7a0d\u5fae\u7406\u6027\u4e00\u70b9\u7684\u8bf4\uff0c\u867d\u7136\u6839\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u53ef\u80fd\u5728\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u53d8\u5f97\u4e0d\u5e73\u8861\uff0c\u4f46\u662f\u56e0\u4e3a\u5176\u4ed6\u8282\u70b9\u7684\u5e73\u8861\u4ecd\u662f\u968f\u673a\u7684\uff0c\u6240\u4ee5\u6811\u9ad8\u7684\u53d8\u5316\u5728O(1)\u8303\u56f4\u3002\n\n\u89c9\u5f97\u6709\u5f02\u8bae\u7684\u540c\u5b66\u53ef\u4ee5\u8bc4\u8bba\u6216\u79c1\u4fe1\u544a\u8bc9\u6211\uff0c\u5e0c\u671b\u6709\u4eba\u613f\u610f\u8ba8\u8bba\u4e00\u4e0b\u8fd9\u79cd\u505a\u6cd5\uff0c\u56e0\u4e3a\u5b83\u5b9e\u5728\u592a\u597d\u5199\u4e86\u4ee3\u7801\u53ea\u6709\u4e0d\u523070\u884c\u3002\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\nusing namespace std;\n\nconst int maxn = 100000 + 6;\nnamespace RandTree {\n\tint ch[maxn][2], siz[maxn], val[maxn], rev[maxn], ncnt;\n\tvoid maintain(int rt) {\n\t\tsiz[rt] = 1 + siz[ch[rt][0]] + siz[ch[rt][1]];\n\t}\n\tvoid setrev(int rt) {\n\t\trev[rt] ^= 1; swap(ch[rt][0], ch[rt][1]);\n\t}\n\tvoid pushdown(int rt) {\n\t\tif(rev[rt]) {\n\t\t\trev[rt] = 0; setrev(ch[rt][0]); setrev(ch[rt][1]);\n\t\t}\n\t}\n\tvoid rotate(int& x, int d) { /// d = 0 \u5de6\u65cb, d = 1 \u53f3\u65cb\n\t\tpushdown(x); int k = ch[x][d^1]; pushdown(k);\n\t\tch[x][d^1] = ch[k][d]; ch[k][d] = x; maintain(x); x = k; maintain(x);\n\t}\n\tvoid insert(int& rt, int v) { /// \u5728\u5f53\u524d\u4e32\u7ed3\u5c3e\u63d2\u5165\u6570\u503c \n\t\tif(rt == 0) {\n\t\t\trt = ++ ncnt;\n\t\t\tsiz[rt] = 1; val[rt] = v; return;\n\t\t}\n\t\tinsert(ch[rt][1], v); maintain(rt); /// \u5728\u53f3\u5b50\u4e2d\u63d2\u5165 \n\t\tif(rand()&1) rotate(rt, 0); /// \u5b8c\u5168\u968f\u673a \n\t}\n\tvoid makeroot(int& rt, int k) {\n\t\tpushdown(rt);\n\t\tint lsiz = 1 + siz[ch[rt][0]];\n\t\tif(k == lsiz) return; /// \u627e\u5230\u8fd9\u4e2a\u70b9 \n\t\tif(k <  lsiz) {\n\t\t\tmakeroot(ch[rt][0], k); rotate(rt, 1);\n\t\t}else {\n\t\t\tmakeroot(ch[rt][1], k - lsiz);rotate(rt, 0);\n\t\t}\n\t}\n\tvoid revnow(int rt) {\n\t\tint t = ch[ch[rt][0]][1]; /// \u5f53\u524d\u63d0\u53d6\u51fa\u7684\u5e8f\u5217 \n\t\tsetrev(t);\n\t}\n\tvoid dfs(int rt) {\n\t\tif(!rt) return;\n\t\tpushdown(rt);\n\t\tdfs(ch[rt][0]);\n\t\tif(val[rt] > 0) printf(\"%d \", val[rt]);\n\t\tdfs(ch[rt][1]);\n\t}\n}\n\nint RT;\nint main() {\n\tint n, m; scanf(\"%d%d\", &n, &m);\n\tfor(int i = 0; i <= n; i ++) RandTree::insert(RT, i);\n\tRandTree::insert(RT, -1); /// \u53f3\u7aef\u70b9 \n\tfor(int i = 1; i <= m; i ++) {\n\t\tint l, r; scanf(\"%d%d\", &l, &r); r += 2;\n\t\tRandTree::makeroot(RT, l);\n\t\tRandTree::makeroot(RT, r);\n\t\tRandTree::revnow(RT);\n\t}\n\tRandTree::dfs(RT); putchar('\\n');\n\treturn 0;\n}\n```",
        "postTime": 1535519044,
        "uid": 36456,
        "name": "GGN_2015",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "Splay\u7684\u533a\u95f4\u95ee\u9898\u7b2c\u4e00\u9053\uff01\n\n\u8bf4\u8d77\u6765\u4e5f\u6709\u610f\u601d\uff0c \u672c\u6765Splay\u7684\u521d\u8877\u662f\u4f5c\u4e3a\u6743\u503c\u641c\u7d22\u6811\u6765\u7528\u7684\uff0c\u6ca1\u60f3\u5230\u6700\u5e7f\u6cdb\u7684\u7528\u9014\u5374\u53d8\u6210\u4e86\u89e3\u51b3\u533a\u95f4\u5e8f\u5217\u64cd\u4f5c\u7684\u95ee\u9898\u3002\n\n\n----------------------------------------------------\n\n\u60f3\u4e00\u4e0b\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n# \u539f\u7406\n\n-\n\u5176\u5b9e\u7ffb\u8f6c\u533a\u95f4\u5c31\u662f\u7ffb\u8f6c\u5de6\u53f3\u7684\u5b50\u8282\u70b9\u3002\n\n\u5047\u5982\u6211\u4eec\u628a l-1\u7ffb\u8f6c\u5230\u6839\u8282\u70b9\u4e0a\u53bb r+1\u7ffb\u8f6c\u5230 \u6839\u8282\u70b9\u7684\u53f3\u8282\u70b9\u4e0a\u53bb\n\n\u90a3\u4e48 **l-r** \u8fd9\u6bb5\u533a\u95f4\u5c31\u4f1a\u96c6\u4e2d\u5728\u6839\u8282\u70b9\u53f3\u8282\u70b9\u7684\u5de6\u8282\u70b9\u91cc\u9762\u3002\n\n~~\u4e0d\u61c2\u7684\u53ef\u4ee5\u753b\u4e0b\u56fe~~\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u8fd9\u68f5\u5b50\u6811\u7684\u5de6\u53f3\u8282\u70b9\u5168\u90e8\u7ffb\u8f6c\u8fc7\u6765\u5566\u3002\n\n## \u4f18\u5316\n\n-\n\u4f46\u662f \u8fd9\u6837\u4f1a\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898 \u3002\n\n\u5047\u5982\u6211\u4eec\u5148\u7ffb\u8f6c\u4e86 **2-4** \u8fd9\u4e2a\u533a\u95f4\n\n\u7136\u540e\u53c8\u7ffb\u8f6c\u4e86 **2-4** \u8fd9\u4e2a\u533a\u95f4\uff0c\u524d\u524d\u540e\u540e\u64cd\u4f5c\u4e86\u4e24\u6b21\uff0c\u4f46\u6700\u540e\u4e00\u70b9\u6548\u679c\u90fd\u6ca1\u6709\uff0c\u5c82\u4e0d\u662f\u5f88\u4e8f\uff1f\n\n\u4e8e\u662f\u5f15\u5165lazy\u6807\u8bb0\n\n\u6211\u4eec\u53ea\u9700\u5728\u7236\u8282\u70b9\u4e0a\u6253\u6807\u8bb0\uff0c\u7136\u540e\u8fdb\u884c\u4e0b\u653e\u5c31\u53ef\u4ee5\u4e86\uff0c\u5982\u679c\u8fdb\u884c\u4e86\u4e24\u6b21\u76f8\u53cd\u7684\u7ffb\u8f6c\uff0clazy\u6807\u8bb0\u5c31\u4f1a\u6d88\u5931 \uff0c\u8fd9\u6837\u5c31\u51cf\u5c11\u4e86\u7ffb\u8f6c\u7684\u6b21\u6570\uff01\n\n### \u5efa\u6811\n\n-\n\u5982\u679c\u6211\u4eec\u8fd8\u50cf\u5e73\u5e38\u7684Splay\u4e00\u6837\uff0c\u4e00\u4e2a\u4e00\u4e2a\u8282\u70b9insert\u63d2\u5165\u5efa\u6811\uff0c\u786e\u5b9e\u5f88\u6162\u3002\n\n\u60f3\u4e00\u4e0b\u4e4b\u524d\u5b66\u8fc7\u7684\u6570\u636e\u7ed3\u6784\u91cc\uff0c\u54ea\u4e00\u4e2a\u8ddf\u8fd9\u4e2a\u6bd4\u8f83\u76f8\u4f3c\uff1f\n\n**\u7ebf\u6bb5\u6811**\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u50cf\u7ebf\u6bb5\u6811\u5efa\u6811\u4e00\u6837\u5bf9Splay\u8fdb\u884c\u5efa\u6811\u3002\n\n\u5176\u5b9e\u5728\u66ff\u7f6a\u7f8a\u6570\u91cc\uff0c\u91cd\u65b0\u5efa\u6811\u4e5f\u662f\u7528\u7684\u8fd9\u6837\u7684\u65b9\u6cd5\u3002\n\n#### \u8f93\u51fa\n\n-\n\u7531\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u53ef\u4ee5\u77e5\u9053\uff0c\u6700\u540e\u7684\u5e8f\u5217\u5c31\u662f\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u7684\u5e8f\u5217\u3002\n\n##### \u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\n\n-\n\u8fd9\u68f5Splay\u4e0d\u662f\u6743\u503c\u641c\u7d22\u6811\uff0c\u800c\u662f\u533a\u95f4\u7ffb\u8f6c\uff0c\u6240\u4ee5\u67e5\u8be2\u65f6\u7684\u5173\u952e\u5b57\u4e0d\u662f\u6743\u503c\uff0c\u800c\u662f\u4f4d\u7f6e\uff01\n\n\u53ea\u662f\u5728\u8fd9\u9053\u9898\u91cc\uff0c\u6743\u503c\u8ddf\u4f4d\u7f6e\u4e00\u6837\u7f62\u4e86\uff01\n\n\u5982\u679c\u7ffb\u8f6c **1-n** \u600e\u4e48\u529e\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e24\u4e2a\u54e8\u5175\u8282\u70b9~~\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u8c01\u8d77\u7684\u8fd9\u540d\u5b57\uff09~~\n\n\u5206\u522b\u5728 1\u4f4d\u7f6e\u548cn+2\u4f4d\u7f6e \u8fd9\u6837\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e0a\u9762\u7684\u95ee\u9898\u4e86\n\n\u6ce8\u610f\uff0c\u8f93\u51fa\u65f6\u4e0d\u8981\u8f93\u51fa\u54e8\u5175\u8282\u70b9~\n\n\u4e0b\u9762\u7ed9\u51fa\u4ee3\u7801\n\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#define il inline\n#define lson l,mid-1,now\n#define rson mid+1,r,now \nusing namespace std;\nconst int maxm=1e6+1;\nconst int inf=1e8;\nint size[maxm],val[maxm],rev[maxm],key[maxm];\nint f[maxm],son[maxm][2];\nint root,tot;\nil void pushdown(int x)\n{\n    if(x&&rev[x])\n    {\n        rev[son[x][0]]^=1;\n        rev[son[x][1]]^=1;\n        swap(son[x][0],son[x][1]);\n        rev[x]=0;\n    }\n}\nil bool get(int x)\n{\n    return son[f[x]][1]==x;\n}\nil void update(int x)\n{\n    if(x)\n    {\n        size[x]=1;\n        if(son[x][0]) size[x]+=size[son[x][0]];\n        if(son[x][1]) size[x]+=size[son[x][1]];\n    }\n}\nil void rorate(int x)\n{\n    int fa=f[x],ffa=f[fa],which=get(x);\n    bool fx=get(fa);\n    son[fa][which]=son[x][which^1]; \n    f[son[fa][which]]=fa;  \n    son[x][which^1]=fa;\n    f[fa]=x;  \n    f[x]=ffa;\n\n    if(ffa)  \n     son[ffa][fx]=x; \n    update(fa),update(x);  \n}\nil void splay(int x,int who)\n{\n    for (int fa;(fa=f[x])!=who;rorate(x))\n        if (f[fa]!=who)\n            rorate(get(fa)==get(x)?fa:x);\n    if (!who) root=x;\n}\nint build(int l,int r,int fa)\n{\n    if(l>r) return 0;\n    int mid=(l+r)>>1;\n    int now=++tot;\n    key[now]=val[mid];\n    f[now]=fa;\n    son[now][0]=build(lson);\n    son[now][1]=build(rson);\n    update(now);\n    return now;\n}\ninline int findx(int kth)\n{\n    int now=root;\n    while(1)\n    {\n       pushdown(now);\n       if(kth<=size[son[now][0]]) now=son[now][0];\n       else\n       {\n            kth-=size[son[now][0]]+1;\n            if(!kth) return now;\n            now=son[now][1];\n       }\n    }\n}\nvoid print(int now)\n{\n    pushdown(now);\n    if(son[now][0]) print(son[now][0]);\n    if(key[now]!=inf&&key[now]!=-inf) printf(\"%d \",key[now]);\n    if(son[now][1]) print(son[now][1]);\n}\nil int read()\n{\n    int x=0;\n    char ch=0;\n    while(ch<'0'||ch>'9') ch=getchar();\n    while(ch>='0'&&ch<='9') x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x;\n}\nint main()\n{\n    int n,m;\n    n=read(),m=read();\n    val[1]=-inf,val[n+2]=inf;\n    for(int i=2;i<=n+1;i++)\n     val[i]=i-1;\n    root=build(1,n+2,0);\n    //printf(\"%d\\n\",findx(m));\n    for(int i=1;i<=m;i++)\n    {\n        int l,r;\n        l=read(),r=read();\n        int lx=findx(l),rx=findx(r+2);\n        splay(lx,0);\n        splay(rx,lx);\n        rev[son[son[root][1]][0]]^=1;\n    }\n    print(root);\n    return 0;\n}\n```",
        "postTime": 1515053351,
        "uid": 19842,
        "name": "\u534a\u4ed9\u80e1\u5c0f\u6843",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u4e3a\u5565\u5168\u662fSplay\uff0c\u53ea\u6709\u6211\u7528fhq-Treap\u5417\n\nfhq-Treap\uff08\u65e0\u65cbTreap\uff09\n\n\u901a\u8fc7\u4e24\u4e2a\u8282\u70b9\uff08\u5b50\u6811\uff09\u7684merge\u64cd\u4f5c\u4e0e\u5355\u4e2a\u5b50\u6811\u7684split\u64cd\u4f5c\u6765\u89e3\u51b3\u533a\u95f4\u95ee\u9898\u7684\u5e73\u8861\u6811\uff0c\u4e0d\u50cf\u666e\u901a\u7684Treap\u9700\u8981\u4e00\u4e2afix\u503c\u6765\u7ef4\u62a4\u5e73\u8861\uff0c\u7ee7\u800c\u4e5f\u4e0d\u9700\u8981\u65cb\u8f6c\uff0c\u6240\u4ee5\u53eb\u65e0\u65cbTreap\n\n\u4e0a\u4ee3\u7801\n\n###c++\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\ninline int read(){\n    int sum(0);\n    char ch(getchar());\n    for(;ch<'0'||ch>'9';ch=getchar());\n    for(;ch>='0'&&ch<='9';sum=sum*10+(ch^48),ch=getchar());\n    return sum;\n}\n#define get_size(x) (x?x->size:0)\nstruct node{\n    node *lch,*rch;\n    int key,size,mark;\n    node(int x=0):lch(NULL),rch(NULL),key(x),size(1),mark(0){}\n    inline void revs(){\n        swap(lch,rch);\n        mark^=1;\n    }\n    inline void pushdown(){\n        if(this->mark){\n            if(this->lch)\n                this->lch->revs();\n            if(this->rch)\n                this->rch->revs();\n            this->mark=0;\n        }\n    }\n    inline void pushup(){\n        this->size=get_size(this->lch)+get_size(this->rch)+1;\n    }\n}*root,*st[100005];\ntypedef pair<node*,node*> pii;\nint n,m,top;\ninline node* build(){\n    node *x,*las;\n    for(int i=1;i<=n;++i){\n        x=new node(i);\n        las=NULL;\n        while(top&&st[top]->key>x->key){\n            st[top]->pushup();\n            las=st[top];\n            st[top--]=NULL;\n        }\n        if(top)\n            st[top]->rch=x;\n        x->lch=las;\n        st[++top]=x;\n    }\n    while(top)\n        st[top--]->pushup();\n    return st[1];\n}\ninline node* merge(node *x,node *y){\n    if(!x)return y;\n    if(!y)return x;\n    if(x->key<y->key){\n        x->pushdown();\n        x->rch=merge(x->rch,y);\n        x->pushup();\n        return x;\n    }\n    else{\n        y->pushdown();\n        y->lch=merge(x,y->lch);\n        y->pushup();\n        return y;\n    }\n}\ninline pii split(node *x,int k){\n    if(!x)\n        return pii(NULL,NULL);\n    pii y;\n    x->pushdown();\n    if(get_size(x->lch)>=k){\n        y=split(x->lch,k);\n        x->lch=y.second;\n        x->pushup();\n        y.second=x;\n    }\n    else{\n        y=split(x->rch,k-get_size(x->lch)-1);\n        x->rch=y.first;\n        x->pushup();\n        y.first=x;\n    }\n    return y;\n}\ninline void print(node *x){\n    if(!x)return;\n    x->pushdown();\n    print(x->lch);\n    printf(\"%d \",x->key);\n    print(x->rch);\n}\nint main(){\n    n=read(),m=read();\n    root=build();\n    while(m--){\n        int x(read()),y(read());\n        pii tp1(split(root,x-1)),tp2(split(tp1.second,y-x+1));\n        tp2.first->revs();\n        tp1.second=merge(tp2.first,tp2.second);\n        root=merge(tp1.first,tp1.second);\n    }\n    print(root);\n}\n###\n```",
        "postTime": 1507252448,
        "uid": 51617,
        "name": "hzoi_mafia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "Splay\u7ecf\u5178\u533a\u95f4\u9898\u76ee\u3002\n\n\u505a\u8fd9\u9053\u9898\u7684\u65f6\u5019\u53ef\u4ee5\u6ce8\u610f\uff0c\u5982\u679c\u662f\u6574\u6bb5\u8981\u7ffb\u8f6c\u7684\u8bdd\uff0c\u5176\u5b9e\u5c31\u662f\u6574\u68f5\u6811\u7684\u5de6\u53f3\u513f\u5b50\u5168\u90e8\u4ea4\u6362\u5c31\u884c\u4e86\u3002\u5982\u679c\u53ea\u662f\u90e8\u5206\u7ffb\u8f6c\u7684\u8bdd\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u4fdd\u8bc1\u5de6\u6bb5\u548c\u53f3\u6bb5\u4e0d\u5728\u9700\u8981\u7ffb\u8f6c\u7684\u5b50\u6811\u4e2d\u5c31\u884c\u4e86\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u5c06\u5de6\u7aef\u7ffb\u8f6c\u81f3\u6839\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u4ee5\u5de6\u7684\u8282\u70b9\u4f1a\u5728\u4ed6\u7684\u5de6\u5b50\u6811\u4e2d\u3002\u5982\u679c\u518d\u5c06\u53f3\u7aef\u7ffb\u8f6c\u81f3\u6839\u7684\u53f3\u513f\u5b50\uff0c\u90a3\u4e48\u8be5\u8282\u70b9\u4ee5\u53f3\u7684\u8282\u70b9\u90fd\u4f1a\u5728\u5b83\u7684\u53f3\u5b50\u6811\u4e2d\u3002\u5269\u4f59\u8282\u70b9\u4e5f\u5c31\u662f\u9700\u8981\u7ffb\u8f6c\u7684\u8282\u70b9\u5168\u90e8\u90fd\u4f1a\u5728\u6839\u7684\u53f3\u513f\u5b50\u7684\u5de6\u5b50\u6811\u4e2d\u3002\u8fd9\u65f6\u53ea\u8981\u7ed9\u8fd9\u4e2a\u5b50\u6811\u7684\u6839\u6253\u4e0a\u7ffb\u8f6c\u6807\u8bb0\u5c31\u53ef\u4ee5\u4e86\u3002\u6ce8\u610f\u8981\u591a\u51fa2\u4e2a\u8282\u70b9\uff0c\u65b9\u4fbf\u6700\u5de6\u8fb9\u8282\u70b9\u6216\u6700\u53f3\u8fb9\u8282\u70b9\u7ffb\u8f6c\u3002\n\n\u987a\u5e26\u4e00\u63d0\uff0cSpaly\u7b80\u5316\u4e86\u4ee3\u7801\uff0c\u52a0\u5feb\u4e86\u65f6\u95f4\uff0c\u4e3a\u4ec0\u4e48\u90fd\u6ca1\u6709\u4eba\u6253\u5462\uff1f\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#include<cctype>\n#define For(i,a,b) for(i=(a);i<=(b);++i)\nusing namespace std;\ntemplate<typename T>\ninline void read(T &x)//\u5feb\u8bfb\n{\n    T s=0,f=1;\n    char k=getchar();\n    while(!isdigit(k)&&(k^'-'))k=getchar();\n    if(!isdigit(k))\n    {\n        f=-1;\n        k=getchar();\n    }\n    while(isdigit(k))\n    {\n        s=s*10+(k^48);\n        k=getchar();\n    }\n    x=s*f;\n}\nconst int MAXN=100010;\nstruct node//\u8282\u70b9\u5b9a\u4e49\n{\n    int size,son[2],f,rev;//\u5206\u522b\u662f\u5b50\u6811\u5927\u5c0f\uff0c\u4e24\u4e2a\u513f\u5b50\uff0c\u7236\u8282\u70b9\uff0c\u548c\u662f\u5426\u6253\u6807\u8bb0\u53cd\u8f6c\n}p[MAXN];\nint n,m,root;//root\u662f\u6839\u8282\u70b9\u4f60\u4eec\u5e94\u8be5\u90fd\u61c2\u5427\nvoid refresh(int x)//\u66f4\u65b0\u5b50\u6811\u5927\u5c0f\n{\n    if(x)\n    {\n        int size=1;\n        if(p[x].son[0])size+=p[p[x].son[0]].size;\n        if(p[x].son[1])size+=p[p[x].son[1]].size;\n        p[x].size=size;\n    }\n}\nbool get(int x)//\u5224\u65adx\u662f\u5176\u7236\u8282\u70b9\u7684\u5de6\u513f\u5b50\u8fd8\u662f\u53f3\u513f\u5b50\n{\n    return x==p[p[x].f].son[1];\n}\nvoid build_tree(int l,int r,int f)//\u5efa\u6811\u3002\u4f60\u4ed4\u7ec6\u770b\u7684\u8bdd\u5176\u5b9e\u53c2\u8003\u4e86\u4e0b\u9762\u4e00\u7bc7\u9898\u89e3\u7684\u5efa\u6811\u65b9\u5f0f\u3002\u8fd9\u6837\u5efa\u6811\u7684\u8bdd\u53ef\u4ee5\u76f4\u63a5\u5efa\u51fa\u4e00\u9897\u5b8c\u5168\u4e8c\u53c9\u6811\n{\n    if(l>r)return;\n    int mid=(l+r)>>1;\n    if(mid<f)p[f].son[0]=mid;else p[f].son[1]=mid;\n    if(f!=mid)p[mid].f=f;                                                                                   //\u8fd9\u91cc\u591a\u4e86\u4e00\u4e2aif\uff0c\u662f\u4e3a\u4e86\u4f7f\u6839\u8282\u70b9\u7684\u7236\u8282\u70b9\u6307\u54110\n    p[mid].size=1;\n    if(l==r)return;\n    build_tree(l,mid-1,mid);\n    build_tree(mid+1,r,mid);\n    refresh(mid);\n}\nvoid rever(int x)//\u7ffb\u8f6c\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u5c31\u662f\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\u3002\u8bb0\u5f97\u4e0b\u653e\u6807\u8bb0\n{\n    swap(p[x].son[0],p[x].son[1]);\n    p[p[x].son[0]].rev^=1;\n    p[p[x].son[1]].rev^=1;\n    p[x].rev^=1;\n}\nint find(int x)//\u627e\u5230\u6392\u540dx\u7684\u8282\u70b9\n{\n    int now=root;\n    while(1)\n    {\n        //printf(\"%d %d\\n\",x,now);\n        if(p[now].rev)rever(now);//\u8bb0\u5f97\u6807\u8bb0\u8981\u968f\u65f6\u8bb0\u5f97\u4e0b\u653e\n        if(p[p[now].son[0]].size>=x)now=p[now].son[0];\n        else\n        {\n            if(p[p[now].son[0]].size==x-1)return now;\n            x-=p[p[now].son[0]].size+1;\n            now=p[now].son[1];\n        }\n    }\n}\nvoid rotate(int x)//\u7ffb\u8f6c\n{\n    int f=p[x].f,ff=p[p[x].f].f,opt=get(x);\n    p[f].son[opt]=p[x].son[opt^1];\n    p[p[x].son[opt^1]].f=f;\n    if(ff)p[ff].son[get(f)]=x;\n    else root=x;\n    p[x].f=ff;\n    p[f].f=x;\n    p[x].son[opt^1]=f;\n    refresh(f);\n    refresh(x);\n}\nvoid dfout(int x)//\u8f93\u51fa\n{\n    if(p[x].rev)rever(x);\n    if(p[x].son[0])dfout(p[x].son[0]);\n    if(x>1&&x<n+2)printf(\"%d \",x-1);\n    if(p[x].son[1])dfout(p[x].son[1]);\n}\nvoid spaly(int x,bool k)//spaly(\u5355\u65cb)\n{\n    if(!k)\n    {\n        while(p[x].f)\n        {\n            rotate(x);\n            root=x;\n        }\n        root=x;\n    }\n    else\n    {\n        while(p[p[x].f].f)rotate(x);\n        p[root].son[1]=x;\n    }\n}\nint main(void)\n{\n    read(n);\n    read(m);\n    root=(n+3)>>1;\n    build_tree(1,n+2,root);//\u5148\u5efa\u51fa\u6ee1\u4e8c\u53c9\u6811\n    int l,r;\n    while(m--)\n    {\n        read(l);\n        read(r);\n        if(l==r)continue;//\u5982\u679c\u5de6\u53f3\u533a\u95f4\u76f8\u540c\u7684\u8bdd\uff0c\u90a3\u4e48\u53ea\u662f\u8f6c1\u4e2a\u70b9\uff0c\u4e0d\u9700\u8981\u8f6c\n        l=find(l);\n        r=find(r+2);//\u5148\u627e\u5230\u533a\u95f4\u5de6\u8fb9\u7684\u70b9\u548c\u53f3\u8fb9\u7684\u70b9\uff0c\u5728\u5c06\u4ed6\u4eec\u5206\u522b\u7ffb\u8f6c\u5230\u6839\u548c\u6839\u7684\u53f3\u513f\u5b50\u3002\n        spaly(l,0);\n        spaly(r,1);\n        p[p[p[root].son[1]].son[0]].rev^=1;//\u76f4\u63a5\u6253\u6807\u8bb0\n    }\n    dfout(root);//\u76f4\u63a5\u8f93\u51fa\n    putchar('\\n');\n    return 0;\n}\n\n```",
        "postTime": 1505908277,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "# Solution\n\n## ->\u9898\u9762\uff1a\uff08\u6a21\u62df+\u79bb\u7ebf\u95ee\u8be2\uff09 ~~\u4e00\u7ef4\u5e8f\u5217\u6298\u817e\u95ee\u9898\u7cfb\u5217~~\n\n\u66b4\u529b\u7b97\u6cd5\uff1aO(nm)\n\n\u81ea\u7136\u662f\u5e73\u8861\u6811\u6765\u89e3\u7b54\u3002\u3002\u3002\uff08\u5e9f\u8bdd\uff09\n\n\u7ef4\u62a4\u4e2d\u5e8f\u904d\u5386\u662f\u5f53\u524d\u5e8f\u5217\n\n```cpp\nint build(int l,int r){\n    if (l==r) return s[l]=1,l;\n    int m=(l+r)>>1;\n    if (m-1>=l) ch[m][0]=build(l,m-1);\n    if (m+1<=r) ch[m][1]=build(m+1,r);\n    //\u8fd9\u91cc\u4e0d\u662f\u7ebf\u6bb5\u6811\u54e6qwq\n    s[m]=r-l+1;\n    return m;\n}\n\n//\u5148\u5efa\u4e00\u68f5\u521d\u59cb\u6811\u597d\u4e86\u3002\n//\u8fd9\u4e2a\u9898\u53ea\u6709\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u7ef4\u62a4\u91cd\u6570\u4e4b\u7c7b\u7684\u3002\n\n```\n\n## ->\u5982\u679c\u7ffb\u8f6c\u7684\u662f\u5b8c\u6574\u5b50\u6811\uff0c\u53ea\u8981\u5bf9\u79f0\u5c31\u597d\uff08\u5de6\u53f3\u513f\u5b50\u4e92\u6362\uff09\n\n## ->\u5982\u679c\u7ffb\u8f6c\u975e\u5b8c\u6574\u5b50\u6811\uff0c\u8bbe\u4f4d[L,R];\n\n## STEP1. \u5c06L-1\u5411\u4e0a\u65cb\u8f6c\u5230\u6839\u8282\u70b9\n\n## STEP2: \u5c06R+1\u5411\u4e0a\u8fde\u7eed\u65cb\u8f6c\u5230\u6839\u7684\u53f3\u513f\u5b50\n\n## ->\u6b64\u65f6[L,R]\u88ab\u8c03\u6574\u5230\u540c\u4e00\u68f5\u5b50\u6811\u4e0a\uff08\u6839\u8282\u70b9\u7684\u5de6\u53f3\u5b59\u5b50\uff09\n\n```cpp\nvoid rotateKth(int k,int x,int &p,bool toRt) {\n    if (rev[x]) flip(x);\n    if (k==s[ch[x][0]]+1) return;\n    int d=k>(s[ch[x][0]]+1);\n    rotateKth(k-d*(s[ch[x][0]]+1),ch[x][d],ch[x][d],toRt);\n    if (toRt || x!=rt) p=rotate(x,d^1);\n}\n\n//\u5c06\u4e2d\u5e8f\u904d\u5386k\u53f7\u5143\u7d20\u4e00\u987f\u64cd\u4f5c\uff0ctoRt=1\u8868\u793a\u65cb\u8f6c\u5230\u6839\uff0c=0\u8868\u793a\u5230\u6839\u7684\uff08\u53f3\uff09\u513f\u5b50\n//\u5148\u627ek\u53f7\u5143\u7d20\uff0c\u7136\u540e\u5f80\u5b50\u6811\u91cc\u627e\uff0c\u56de\u6eaf\u65f6\u6bcf\u6b21\u5411\u4e0a\u65cb\u8f6c\n```\n\n## ->\u5982\u4f55\u65cb\u8f6c\u5b8c\u6574\u5b50\u6811\uff1a\u76f4\u63a5\u5bf9\u79f0\uff0c\u590d\u6742\u5ea6O(n)\n\n## \u5982\u679c\u5b50\u6811\u6ca1\u6709\u88ab\u67e5\u8be2\u5230...\u90a3\u4e48\u4e0d\u9700\u8981\u7ffb\u8f6c\uff08\u6709\u70b9\u50cf\u7ebf\u6bb5\u6811QWQ\uff09\n\n```cpp\nrt=build(1,n+2);\nfor (int i=1,l,r;i<=m;i++) {\n    cin>>l>>r,l++,r++;\n    if (l==r) continue;\n    rotateKth(l-1,rt,rt,true);\n    rotateKth(r+1,rt,rt,false);\n    rev[ch[ch[rt][1]][0]]^=1;\n}\nprint(rt); cout<<endl;\n```\n\n```cpp\nvoid flip(int x) { \n    swap(ch[x][0],ch[x][1]);\n    rev[ch[x][0]]^=1;\n    rev[ch[x][1]]^=1;\n    rev[x]^=1;\n}\n\nvoid print(int x) { \n    if (rev[x]) flip(x);  \n    if (ch[x][0]) print(ch[x][0]); \n    if (x>=2 && x<=n+1) cout<<x-1<<\" \";\n    if (ch[x][1]) print(ch[x][1]);\n}\n```\n\n## \u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=100009;\nint m,n,tot=1,rt=1,ch[N][2],s[N],rev[N];\nint rotate(int o,int d) {\n    int k=ch[o][d^1];\n    ch[o][d^1]=ch[k][d];\n    ch[k][d]=o;\n    s[o]=1+s[ch[o][0]]+s[ch[o][1]];\n    s[k]=1+s[ch[k][0]]+s[ch[k][1]];\n    return k;\n}\nint build(int l,int r){\n    if (l==r) return s[l]=1,l;\n    int m=(l+r)>>1;\n    if (m-1>=l) ch[m][0]=build(l,m-1);\n    if (m+1<=r) ch[m][1]=build(m+1,r);\n    s[m]=r-l+1;\n    return m;\n}\nvoid flip(int x) { \n    swap(ch[x][0],ch[x][1]);\n    rev[ch[x][0]]^=1;\n    rev[ch[x][1]]^=1;\n    rev[x]^=1;\n}\nvoid print(int x) { \n    if (rev[x]) flip(x);  \n    if (ch[x][0]) print(ch[x][0]); \n    if (x>=2 && x<=n+1) cout<<x-1<<\" \";\n    if (ch[x][1]) print(ch[x][1]);\n}\nvoid rotateKth(int k,int x,int &p,bool toRt) {\n    if (rev[x]) flip(x);\n    if (k==s[ch[x][0]]+1) return;\n    int d=k>(s[ch[x][0]]+1);\n    rotateKth(k-d*(s[ch[x][0]]+1),ch[x][d],ch[x][d],toRt);\n    if (toRt || x!=rt) p=rotate(x,d^1);\n}\nint main(){\n    cin>>n>>m;\n    rt=build(1,n+2);\n    for (int i=1,l,r;i<=m;i++) {\n        cin>>l>>r,l++,r++;\n        if (l==r) continue;\n        rotateKth(l-1,rt,rt,true);\n        rotateKth(r+1,rt,rt,false);\n        rev[ch[ch[rt][1]][0]]^=1;\n    }\n    print(rt); cout<<endl;\n    return 0;\n}\n```\n\nAC\u8bb0\u5f55\uff1a [qwqwq](https://www.luogu.org/record/19419725)\n\n\n## \u81f4\u8c22\uff1a @distantlight \u8001\u5e08",
        "postTime": 1568347050,
        "uid": 91204,
        "name": "Fatalis_Lights",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "[CSDN\u94fe\u63a5](https://blog.csdn.net/Liang_Si_FFF/article/details/84190616)\n\n\u6700\u8fd1\u5728\u5b66\u4e60splay\uff0c\u7ec8\u4e8e\u505a\u5bf9\u4e86\u8fd9\u9053\u6a21\u7248\u9898\uff0c\u867d\u7136\u4e0d\u662f\u5f88\u96be\u7684\u6837\u5b50\u3002~~\u4f46\u662f\u6211\u4e00\u5f00\u59cb\u5e76\u4e0d\u4f1a\u505a\uff0c\u800c\u4e14\u770b\u5b8c\u9898\u89e3\u4e4b\u540e\u8fd8\u6253\u9519\u4e00\u76f4\u6253\u4e0d\u5bf9\uff0c\u8c03\u8bd5\u4e86\u5f88\u4e45~~\n\u4e0b\u9762\u662f\u9898\u76ee\u7b80\u8ff0\n\n\u9996\u5148\u6211\u4eec\u60f3\u4e00\u4e0bsplay\u7684\u6811\u7684\u6027\u8d28\u3002\n### \u6027\u8d28\n1. \u5982\u679c\u6211\u4eec\u7ed9\u6bcf\u4e00\u4e2a\u70b9\u6dfb\u52a0\u4e00\u4e2a\u952e\u503c\uff0c\u8fd9\u4e2a\u952e\u503c\u8868\u793a\u7684\u662f\u8fd9\u4e2a\u70b9\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9splay\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\u4e4b\u540e\uff0c\u5f97\u5230\u7684\u5e8f\u5217\u5c31\u662f\u539f\u6765\u5bf9\u5e94\u7684\u5e8f\u5217\u3002\n2. \u5bf9\u4e8esplay\u6811\uff0c\u65e0\u8bba\u662f\u8fdb\u884czip\u8fd8\u662fzap\u64cd\u4f5c\uff0c\u90fd\u4e0d\u4f1a\u5f71\u54cd\u6700\u7ec8\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u56e0\u4e3azip\u548czap\u90fd\u662f\u5728\u4fdd\u8bc1\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\u7684\u524d\u63d0\u4e0b\u8fdb\u884c\u7684\u3002\n3. \u5047\u5982\u6211\u4eecsplay(L-1,root),\u7136\u540e\uff0csplay(R+1,root->right_child),\u90a3\u4e48\u6211\u4eec\u5c31\u4f1a\u60ca\u5947\u5730\u53d1\u73b0\uff0c\u533a\u95f4[L,R]\u5185\u7684\u6240\u6709\u70b9\u90fd\u5728R+1\u8fd9\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u79cd\u3002\n4. \u5047\u5982\u6211\u4eec\u628a\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u90fd\u6362\u8fb9\uff0c\uff08\u5305\u62ec\u81ea\u5df1\uff09\u90a3\u4e48\u6700\u7ec8\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u5c31\u662f\u2014\u2014**\u9664\u4e86\u88ab\u7ffb\u8f6c\u7684\u5b50\u6811\u4ee5\u5916\uff0c\u5176\u4ed6\u6240\u6709\u70b9\u7684\u4e2d\u5e8f\u904d\u5386\u90fd\u6ca1\u6709\u53d8\u5316\uff0c\u800c\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\uff08\u5305\u62ec\u5b50\u6811\u6839\u8282\u70b9\uff09\u7684\u4e2d\u5e8f\u904d\u5386\u521a\u521a\u597d\u53cd\u4e86\u8fc7\u6765\u3002**\uff08\u4f60\u4eec\u53ef\u4ee5\u81ea\u5df1\u753b\u4e00\u4e2a\u56fe\u8bd5\u4e00\u4e0b\uff0c\u6216\u8005\u8bf4\uff0c\u5982\u4e0b\u56fe\uff09\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20181118083042899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpYW5nX1NpX0ZGRg==,size_16,color_FFFFFF,t_70)\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20181118081759473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpYW5nX1NpX0ZGRg==,size_16,color_FFFFFF,t_70)\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20181118081816115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpYW5nX1NpX0ZGRg==,size_16,color_FFFFFF,t_70)\n### \u601d\u8def\n### \u7b2c\u4e00\u79cd\u7b80\u964b\u7684\u60f3\u6cd5\n1. \u4ee51,2,3,4...n\u4e3a\u952e\u503c\u63d2\u5165splay\u6811\uff08\u6216\u8005\u76f4\u63a5\u6784\u5efa\u4e00\u68f5\u5e73\u8861\u6811\u5c31\u884c\uff0c\u56e0\u4e3a\u4f60\u5df2\u7ecf\u77e5\u9053\u4f1a\u6709\u54ea\u4e9b\u5143\u7d20\u63d2\u5165\u6811\u4e2d\uff09\u3002\u4e4b\u540e\uff0c\u6211\u4eec\u5bf9\u6811\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u4e0d\u9700\u8981\u7528\u5230\u952e\u503c\uff0c\u76f4\u63a5\u6839\u636ezip\u548czap\u4e0d\u4f1a\u6539\u53d8\u4e2d\u5e8f\u904d\u5386\u7684\u7279\u6027\u8fdb\u884c\u6539\u53d8\u3002\n2. \u7ffb\u8f6c\u533a\u95f4\u7684\u65f6\u5019\uff0c\u5148splay(l-1,root),splay(r+1,root->right_child)\uff0c\u7136\u540e\u518d\u628ar+1\u8fd9\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u7684\u6240\u6709\u5de6\u53f3\u5b69\u5b50\u4ea4\u6362\u5373\u53ef\u3002\n\n\u867d\u7136\u8fd9\u4e48\u505a\u786e\u5b9e\u53ef\u4ee5\u505a\u5bf9\u9898\u76ee\uff0c\u4f46\u662f\u8fd9\u6837\u4f1a\u6709\u51e0\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u3002\n\n1 . \u5047\u5982\u8981reserve(1,n),\u90a3\u4e48\u6211\u4eec\u5c06\u4f1asplay(0,root)\u548csplay(n+1,root->left_child),\u4f46\u662f\u6811\u4e2d\u6ca1\u67090\u548cn+1\u8fd9\u4e24\u4e2a\u7ed3\u70b9\u3002\u56e0\u6b64\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u6211\u4eec\u5c31\u5e94\u8be5\u52a0\u5165INF\u548c-INF\uff0c\u5145\u5f53\u536b\u5175\u7684\u4f5c\u7528\u3002\n\n2 . \u4ea4\u6362\u5b50\u6811\u4e2d\u6240\u6709\u7ed3\u70b9\u7684\u901f\u5ea6\u5b9e\u5728\u662f\u592a\u6162\u4e86\uff0c\u548co(n)\u538b\u6839\u6ca1\u6709\u533a\u522b\u3002\u8fd9\u6837\u6839\u672c\u5c31\u6ca1\u6709\u53d8\u5feb\u3002\n### \u4f18\u5316\u7684\u65b9\u6cd5\n1. \u7ffb\u8f6c\u6811\u7684\u65f6\u5019\u4e0d\u9700\u8981\u628a\u6574\u4e2a\u5b50\u6811\u90fd\u4ea4\u6362\uff0c\u53ea\u8981\u91c7\u53d6\u7ebf\u6bb5\u6811\u7684\u61d2\u6807\u8bb0\u7684\u65b9\u6cd5\u505a\u4e00\u4e2a\u6807\u8bb0\u5373\u53ef\u3002\n- \u6807\u8bb0\u5b8c\u4e4b\u540e\uff0c\u5047\u5982\u7b49\u4e00\u4e0b\u518d\u6807\u8bb0\u540c\u6837\u7684\u533a\u95f4\uff0c\u53ea\u8981\u5f02\u6216\u4e00\u4e0b1\u5c31\u53ef\u4ee5\u4e86\n- \u5047\u5982\u8981splay\u7684\u70b9\u5728\u5df2\u7ecf\u7ffb\u8f6c\u8fc7\u7684\u5b50\u6811\u91cc\u9762\uff0c\u90a3\u4e48\u6211\u4eec\u5230\u65f6\u5019\u53ea\u8981\u5728\u5bfb\u627e\u7ed3\u70b9\u7684\u8fc7\u7a0b\u4e2d\u8fdb\u884cpush_down\u5c31\u53ef\u4ee5\u4e86\u3002\n- \u5728\u8f93\u51fa\u6574\u68f5splay\u6811\u7684\u65f6\u5019\uff0c\u4e5f\u6ce8\u610f\u4e00\u4e0bpush_down\u5c31\u53ef\u4ee5\u4e86\u3002\n\n### \u5177\u4f53\u65b9\u6cd5\n\n1. \u628a\u6240\u6709\u7684\u5143\u7d20\u90fd\u585e\u8fdbsplay\u91cc\u9762\u3002\u7531\u4e8e\u4e00\u5f00\u59cb\u5c31\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u4f60\u65e2\u53ef\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u5730**insert**\u8fdb\u53bb\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c31\u6784\u5efa\u4e00\u4e2a\u5341\u5206\u5e73\u8861\u7684splay\u6811\n\n2. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u9996\u5148splay(l-1,root),splay(r+1,root->right_child),\u7136\u540e\u518d\u628ar+1\u7684\u5de6\u5b50\u6811\u6253\u4e0a\u6807\u8bb0\u5373\u53ef\n\n3. **\u8981\u70b9**\uff1a\u6bcf\u6b21\u5728find\u4e00\u4e2a\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u5148push_down,\u7136\u540e\u518d\u8fdb\u884c\u64cd\u4f5c\u3002\n\n4. \u6700\u540e\u8f93\u51fa\u6574\u68f5\u6811\u7684\u65f6\u5019\u4e5f\u6ce8\u610f\u4e00\u4e0bpush_down\n\u4e0b\u9762\u662f\u6211\u7684\u4ee3\u7801\uff0c\u53ef\u80fd\u4e0d\u662f\u5f88\u770b\u5f97\u660e\u767d\u3002\n```cpp\n#include<cstdio>\nusing namespace std;\nconst int N=100010;\nconst int INF=100000000;\nstruct node\n{\n    int lc,rc,fa,size,val,mark;//mark\u5c31\u662f\u61d2\u6807\u8bb0\uff0cval\u662f\u672c\u6765\u7684\u503c,size\u662f\u5b50\u6811\uff08\u5305\u62ec\u81ea\u5df1\uff09\u7684\u5927\u5c0f \n    node()\n    {\n        lc=rc=fa=size=val=mark=0;\n    }\n}tree[N];\nint root=1,tot=1,FIRST=1;\nvoid build(int,int,int,int);//\u76f4\u63a5\u7528\u9012\u5f52\u5728\u521a\u5f00\u59cb\u7684\u65f6\u5019\u5efa\u7acb\u4e00\u68f5\u6bd4\u8f83\u5e73\u8861\u7684\u6811 \nvoid push_down(int);\nvoid zip(int);//\u5de6\u65cb \nvoid zap(int);//\u53f3\u65cb\nvoid initailize();//\u653e\u5165INT\u548c-INF\u4f5c\u4e3a\u536b\u5175 \nvoid splay(int,int);\nint find(int);//\u7528\u4e8e\u5bfb\u627esplay\u6811\u4e2d\u7684\u7b2c\u51e0\u5927\u7684\u6570\u3002\u6bd5\u7adf\u5728\u5e8f\u5217\u4e2d\u6392\u7b2ck\u7684\u6570\u5c31\u662f\u5728splay\u4e2d\u7b2ck\u5927\u7684\u6570 \nvoid reverse(int,int);\nvoid print(int);//\u7528\u9012\u5f52\u8f93\u51fa\u6574\u68f5\u6811 \nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    build(1,1,n,0);\n    initailize();\n    while(m--)\n    {\n        int l,r;\n        scanf(\"%d%d\",&l,&r);\n        reverse(l+1,r+1);//\u7531\u4e8e\u6709-INF\u7684\u5b58\u5728\uff0c\u6240\u4ee5\u7ffb\u8f6c[l,r]\u533a\u95f4\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u662f\u7ffb\u8f6c[l+1,r+1]\u533a\u95f4 \n    }\n    print(root);\n    return 0;\n}\nvoid build(int x,int l,int r,int father)\n{\n    tree[x].fa=father;\n    tree[x].size=1;\n    if(l==r)\n    {\n        tree[x].val=l;\n        return;\n    }\n    int mid=(l+r)/2;\n    tree[x].val=mid;\n    if(mid==l)\n    {\n        tree[x].rc=++tot;\n        build(tot,r,r,x);\n        tree[x].size+=tree[tree[x].rc].size;\n    }\n    else\n    {\n        tree[x].lc=++tot;\n        build(tot,l,mid-1,x);\n        tree[x].rc=++tot;\n        build(tot,mid+1,r,x);\n        tree[x].size+=tree[tree[x].lc].size+tree[tree[x].rc].size;\n    }\n}\nvoid initailize()\n{\n    int p=root;\n    while(tree[p].lc!=0) tree[p].size++,p=tree[p].lc;\n    tree[p].size++;\n    tree[p].lc=++tot;\n    tree[tot].fa=p;\n    tree[tot].size=1;\n    tree[tot].val=-INF;\n    p=root;\n    while(tree[p].rc!=0) tree[p].size++,p=tree[p].rc;\n    tree[p].size++;\n    tree[p].rc=++tot;\n    tree[tot].fa=p;\n    tree[tot].size=1;\n    tree[tot].val=INF;\n}\nvoid inline push_down(int x)\n{\n    if(tree[x].mark)\n    {\n        int L=tree[x].lc,R=tree[x].rc;\n        tree[L].mark^=1;\n        tree[R].mark^=1;\n        tree[x].mark=0;\n        tree[x].lc=R;\n        tree[x].rc=L;\n    }\n}\nvoid zip(int x)\n{\n    int y=tree[x].fa;\n    tree[y].rc=tree[x].lc;\n    tree[x].lc=y;\n    tree[x].fa=tree[y].fa;\n    tree[y].fa=x;\n    if(tree[x].fa)\n        if(tree[tree[x].fa].lc==y)\n            tree[tree[x].fa].lc=x;\n        else tree[tree[x].fa].rc=x;\n    else root=x;\n    if(tree[y].rc)\n        tree[tree[y].rc].fa=y;\n    tree[y].size=tree[tree[y].lc].size+tree[tree[y].rc].size+1;\n    tree[x].size=tree[tree[x].lc].size+tree[tree[x].rc].size+1;\n}\nvoid zap(int x)\n{\n    int y=tree[x].fa;\n    tree[y].lc=tree[x].rc;\n    tree[x].rc=y;\n    tree[x].fa=tree[y].fa;\n    tree[y].fa=x;\n    if(tree[x].fa)\n        if(tree[tree[x].fa].lc==y)\n            tree[tree[x].fa].lc=x;\n        else tree[tree[x].fa].rc=x;\n    else root=x;\n    if(tree[y].lc)\n        tree[tree[y].lc].fa=y;\n    tree[y].size=tree[tree[y].lc].size+tree[tree[y].rc].size+1;\n    tree[x].size=tree[tree[x].lc].size+tree[tree[x].rc].size+1;\n}\nvoid splay(int x,int aim)\n{\n    aim=tree[aim].fa;\n    while(tree[x].fa!=aim)\n    {\n        int y=tree[x].fa;\n        int z=tree[y].fa;\n        if(z==aim)\n            if(tree[y].lc==x)\n                zap(x);\n            else zip(x);\n        else if(tree[z].lc==y&&tree[y].lc==x)\n            zap(x),zap(x);\n        else if(tree[z].rc==y&&tree[y].rc==x)\n            zip(x),zip(x);\n        else if(tree[z].lc==y)\n            zip(x),zap(x);\n        else zap(x),zip(x);\n    }\n}\nint find(int k)\n{\n    int p=root;\n    while(1)\n    {\n        push_down(p);\n        if(tree[tree[p].lc].size>=k)\n            p=tree[p].lc;\n        else\n        {\n            k-=tree[tree[p].lc].size;\n            if(k==1) return p;\n            k-=1;\n            p=tree[p].rc;\n        }\n    }\n}\nvoid reverse(int l,int r)\n{\n    int L=find(l-1);\n    splay(L,root);\n    int R=find(r+1);\n    splay(R,tree[L].rc);\n    tree[tree[R].lc].mark^=1;\n}\nvoid print(int x)\n{\n    if(x==0) return;\n    push_down(x);\n    print(tree[x].lc);\n    if(tree[x].val!=INF&&tree[x].val!=-INF)\n    {\n        if(FIRST)\n        {\n            FIRST=0;\n            printf(\"%d\",tree[x].val);\n        }\n        else printf(\" %d\",tree[x].val);\n    }\n    print(tree[x].rc);\n}\n```",
        "postTime": 1544857604,
        "uid": 78751,
        "name": "ls623820778",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u53d1\u5e03\u4e00\u7bc7\u65e0\u65cbtreap\u7684\u9898\u89e3~~\u867d\u7136\u6709\u4eba\u53d1\u8fc7\u4e86~~\n\n\u9274\u4e8e\u6211\u4e0d\u4f1asplay,\u53ea\u80fd\u7528\u65e0\u65cbtreap\u6765\u6c34\u9898~~\u636e\u8bf4\u5e38\u6570\u6bd4\u8f83\u5927~~\n\n\u65e0\u65cbtreap\u662f\u4e00\u4e2a\u57fa\u4e8e\u5206\u88c2\u548c\u5408\u5e76\u7684\u5e73\u8861\u6811\uff0c\u5229\u7528\u968f\u673a\u751f\u6210\u7684\u503c\u6765\u4fdd\u8bc1\u590d\u6742\u5ea6\n\n\u5bf9\u4e8e\u533a\u95f4\u7ffb\u8f6c\u7684\u64cd\u4f5c\n\n\u5982\u679c\u6211\u4eec\u8981\u7ffb\u8f6c(l,r)\u8fd9\u4e2a\u533a\u95f4\n\n\u5219\u5148\u4ecert\u91cc\u9762\u5206\u88c2\u51fax(1,r),z(r+1,sz)\n\n\u518d\u4ecex\u4e2d\u5206\u88c2\u51fax(1,l-1),y(l,r)\n\n\u7ed9y\u6253\u4e0a\u6807\u8bb0\uff0c\u7136\u540e\u518d\u539f\u8def\u5408\u5e76\u5373\u53ef\n\n\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u82df\u8fc7\u5f88\u591asplay\u7684\u9898\u76ee\n\n\u4e2a\u4eba\u611f\u89c9\u6211\u7684\u7801\u98ce\u8fd8\u662f\u80fd\u770b\u7684\n\n```cpp\n#include<bits/stdc++.h>\n#define lch c[now].ls\n#define rch c[now].rs\nusing namespace std;\nconst int size=1e5+527;\nint rt;\nint n,m;\nint cnt;\nint l,r,x;\nstruct node{\n\tint ls,rs;\n\tint key,val,sz;\n\tbool tag;\n}c[size];\nint newnode(int val){\n\tcnt++;\n\tc[cnt].key=rand()|rand()<<15;\n\tc[cnt].val=val;\n\tc[cnt].sz=1;\n\treturn cnt;\n}\nvoid pushdown(int now){\n\tif(!c[now].tag) return;\n\tswap(lch,rch);\n\tc[lch].tag^=1;\n\tc[rch].tag^=1;\n\tc[now].tag=0; \n}\nvoid merge(int &now,int a,int b){\n\tif(!a||!b) return (void)(now=a^b);\n\tpushdown(a),pushdown(b);\n\tif(c[a].key>=c[b].key)\n\t\tnow=a,merge(rch,rch,b);\n\telse\n\t\tnow=b,merge(lch,a,lch);\n\tc[now].sz=c[lch].sz+c[rch].sz+1;\n}\nvoid split(int now,int &a,int &b,int k){\n\tpushdown(now); \n\tif(!k) return (void)(a=0,b=now);\n\tif(k<=c[lch].sz)\n\t\tb=now,split(lch,a,lch,k);\n\telse\n\t\ta=now,split(rch,rch,b,k-c[lch].sz-1);\n\tc[now].sz=c[lch].sz+c[rch].sz+1;\n}\nvoid insert(int rank,int val){\n\tint x=0,y=0;\n\tsplit(rt,x,y,rank-1);\n\tmerge(x,x,newnode(val));\n\tmerge(rt,x,y);\n}\nvoid reverse(int l,int r){\n\tint x=0,y=0,z=0;\n\tsplit(rt,x,z,r);\n\tsplit(x,x,y,l-1);\n\tc[y].tag^=1;\n\tmerge(x,x,y);\n\tmerge(rt,x,z);\n}\nvoid out(int now){\n\tif(!now) return;\n\tpushdown(now);\n\tout(lch);\n\tprintf(\"%d \",c[now].val);\n\tout(rch);\n}\nint main(){\n\tsrand(time(0));\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++) insert(i,i);\n\twhile(m--){\n\t\tscanf(\"%d%d\",&l,&r);\n\t\treverse(l,r);\n\t}\n\tout(rt);\n} \n```",
        "postTime": 1544161528,
        "uid": 76045,
        "name": "\u5f71\u8fb0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.org/problemnew/show/P3391)\n\n\u63d0\u4f9b\u4e00\u79cd\u975e\u5e38\u7b80\u5355\u4f46\u662f\u5e38\u6570\u8f83\u5927\u7684\u65e0\u65cbTreap\u89e3\u6cd5\n\n\u76f4\u63a5\u7528\u6309size\u5206\u88c2\u7684\u65b9\u6cd5\u5927\u529b\u7ef4\u62a4\u5e8f\u5217\uff0c\u600e\u4e48\u4e2a\u5927\u529b\u6cd5\u5462\uff1f\n\n\u9996\u5148\u6211\u4eec\u5728\u5e8f\u5217\u540e\u9762\u628a\u5e8f\u5217\u53cd\u8fc7\u6765\u63a5\u5728\u540e\u9762\uff0c\u4ee5\u4e0b\u9762\u8fd9\u4e2a\u5e8f\u5217\u4e3a\u4f8b\n\n1 2 3 4 5 6 6 5 4 3 2 1\n\n\u7136\u540e\u4fee\u6539\u64cd\u4f5c\u662f\u8fd9\u6837\u7684\uff0c\u4ee5\u7ffb\u8f6c$[2,3]$\u4e3a\u4f8b\uff0c\u76f4\u63a5\u628a\u524d\u540e\u5bf9\u79f0\u7684\u4f4d\u7f6e\u5206\u88c2\u51fa\u6765\uff0c\u7136\u540e\u5e8f\u5217\u4f1a\u65ad\u6210\u4e94\u6bb5\n\n1 | 2 3 | 4 5 6 6 5 4 | 3 2 | 1\n\n\u4e5f\u5c31\u662f\u8bf4\u7ffb\u8f6c$[l,r]$\uff0c\u5c31\u628a\u5e8f\u5217\u88c2\u6210$[1,l-1],[l,r],[r+1,2*n-r],[2*n-r+1,2*n-l+1],[2*n-l+2,2*n]$\u8fd9\u4e94\u6bb5\n\n\u4ee3\u7801\u957f\u8fd9\u6837(\u6211\u4ee3\u7801\u91cc\u5199\u7684\u662f$[t1,t2]$,\u7136\u540e\u88c2\u51fa\u6765\u7684\u4e94\u4e2a\u6bb5\u5206\u522b\u53eb$v,w,x,y,z$)\n\n```cpp\nSplit(root,v,w,t1-1);\nSplit(w,w,x,t2-t1+1);\nSplit(x,x,y,2*(n-t2));\nSplit(y,y,z,t2-t1+1);\n```\n\n\u63a5\u4e0b\u6765\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u76f4\u63a5\u628a$[l,r]$\u548c$[2*n-r+1,2*n-l+1]$\u6362\u4e00\u6362\u7136\u540e\u4e00\u4e2a\u4e2a\u628a\u88c2\u51fa\u6765\u7684\u51e0\u6bb5\u62fc\u8d77\u6765\uff0c\n\n1 | 3 2 | 4 5 6 6 5 4 | 2 3 | 1\n\n\u4ee3\u7801\u91cc\u957f\u8fd9\u6837\n```cpp\nroot=Merge(Merge(Merge(Merge(v,y),x),w),z);\n```\n\n\u6700\u540e\u8dd1\u4e00\u904d\u4e2d\u5e8f\u904d\u5386\u8f93\u51fa\u5c31\u884c\u4e86\uff0c\u662f\u4e0d\u662f\u5f88\u7b80\u5355\u5f88\u66b4\u529b=\u3002=(\u7136\u540e\u56e0\u4e3a\u5e38\u6570\u592a\u5927\u8dd1\u4e86800ms)\n\n~~\u6211\u597d\u50cf\u5fd8\u8bb0srand\u4e86\uff0c\u4e0d\u8fc7\u8fd9\u4e0d\u91cd\u8981~~\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=200005;\nint n,m,v,w,x,y,z,t1,t2,tot,dfn,root;\nint val[N],siz[N],son[N][2],rnk[N];\nvoid Pushup(int nde)\n{\n\tsiz[nde]=siz[son[nde][0]]+siz[son[nde][1]]+1;\n}\nint Create(int tsk)\n{\n    siz[++tot]=1;\n\tval[tot]=tsk;\n\trnk[tot]=rand();\n    return tot;\n}\nint Merge(int x,int y)\n{\n\tif(!x||!y) return x+y;\n\telse if(rnk[x]<=rnk[y])\n\t{\n\t\tson[x][1]=Merge(son[x][1],y);\n\t\tPushup(x); return x;\t\n\t}\n\telse\n\t{\n\t\tson[y][0]=Merge(x,son[y][0]);\n\t\tPushup(y); return y;\n\t}\n}\nvoid Split(int nde,int &x,int &y,int tsk)\n{\n\tif(!nde) x=y=0;\n\telse\n\t{\n\t\tif(siz[son[nde][0]]<tsk)\n\t\t\tx=nde,Split(son[nde][1],son[nde][1],y,tsk-siz[son[nde][0]]-1);\n\t\telse\t\n\t\t\ty=nde,Split(son[nde][0],x,son[nde][0],tsk);\n\t\tPushup(nde); \n\t}\n}\nvoid DFS(int nde)\n{\n\tif(son[nde][0]) DFS(son[nde][0]);\n\tif(++dfn<=n) printf(\"%d \",val[nde]);\n\tif(son[nde][1]) DFS(son[nde][1]);\n}\nint main ()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    \troot=Merge(root,Create(i)); \n    for(int i=n+1;i<=2*n;i++)\n\t\troot=Merge(root,Create(2*n-i+1));\n\twhile(m--)\n\t{\t\n\t\tscanf(\"%d%d\",&t1,&t2);\n\t\tSplit(root,v,w,t1-1);\n\t\tSplit(w,w,x,t2-t1+1);\n\t\tSplit(x,x,y,2*(n-t2));\n\t\tSplit(y,y,z,t2-t1+1);\n\t\troot=Merge(Merge(Merge(Merge(v,y),x),w),z);\n\t}\n\tdfn=0,DFS(root);\n    return 0;\n}\n```",
        "postTime": 1542331280,
        "uid": 56967,
        "name": "ydnhaha",
        "ccfLevel": 0,
        "title": "\u6a21\u677f\uff1a\u6587\u827a\u5e73\u8861\u6811"
    },
    {
        "content": "\nsplay \u533a\u95f4\u7ffb\u8f6c\n\n    \n\u6bcf\u6b21\u7ffb\u8f6c\u533a\u95f4[l,r]\u90fd\u662f\u628al\u65cb\u5230\u6839\u8282\u70b9\u4e0a\uff0c r\u65cb\u5230\u6839\u8282\u70b9\u7684\u53f3\u8282\u70b9\u4e0a\n\n\u90a3\u4e48\u8981\u4fee\u6539\u7684\u533a\u95f4\u5c31\u662f\u6839\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u7684\u5de6\u5b50\u6811\n\n\u7136\u540e\u6253\u6807\u8bb0\u3002\u3002\n\n\u4e4b\u540e\u6bcf\u6b21\u67e5\u5230\u65f6\u5c31\u4e0b\u653e\u6807\u8bb0\n\n    \n\u539f\u533a\u95f4\u4e3a1 ~ N\n\n\u589e\u52a0\u4e24\u4e2a\u54e8\u5175\u8282\u70b9 0 \u548c N + 1\uff0c \u56e0\u4e3a\u662f\u907f\u514d\u7ffb\u8f6c1~N\u7684\u533a\u95f4\u4ea7\u751f\u9ebb\u70e6\n\n     \n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#define Max 200009\ninline int swap (int &a, int &b)\n{\n    int now = a;\n    a = b;\n    b = now;\n}\ninline void read (int &now)\n{\n    now = 0;\n    register char word = getchar ();\n    while (word < '0' || word > '9')\n        word = getchar ();\n    while (word >= '0' && word <= '9')\n    {\n        now = now * 10 + word - '0';\n        word = getchar ();\n    }\n}\nint value[Max];\nint N, M;\nclass Splay_Tree_Type\n{\n```\nprivate :\n        \n        \n        \n        \n        \n        \n        \n        \n        \n```cpp\n        struct Splay_Tree_Date\n        {\n            int size;\n            int key;\n            int father;\n            int child[2];\n            int Flandre;\n        }\n        tree[Max]; \n        inline int Get_Son (int now)\n        {\n            return tree[tree[now].father].child[1] == now;\n        }\n        inline void Update (int now)\n        {\n            tree[now].size = 1;\n            if (tree[now].child[0])\n                tree[now].size += tree[tree[now].child[0]].size;\n            if (tree[now].child[1])\n                tree[now].size += tree[tree[now].child[1]].size;\n        }\n        int Root;\n        int Answer[Max];\n        int Count;\n        inline void Down (int now)\n        {\n            tree[now].Flandre = 0;\n            swap (tree[now].child[0], tree[now].child[1]);\n            if (tree[now].child[0])\n                tree[tree[now].child[0]].Flandre ^= 1;\n            if (tree[now].child[1])\n                tree[tree[now].child[1]].Flandre ^= 1;\n        }\n        inline void Rotate (int now)\n        {\n            int father = tree[now].father;\n            int Grand = tree[father].father;\n            int pos = Get_Son (now);\n            if (tree[father].Flandre && father) // \u6ce8\u610f\u8fd9\u91cc\u6807\u8bb0\u4e0b\u653e\u7684\u6b21\u5e8f \n                Down (father);\n            if (tree[now].Flandre && now)\n                Down (now);\n            tree[father].child[pos] = tree[now].child[pos ^ 1];\n            tree[tree[father].child[pos]].father = father;\n            tree[now].child[pos ^ 1] =  father;\n            tree[father].father = now;\n            tree[now].father = Grand;\n            if (Grand)\n                tree[Grand].child[tree[Grand].child[1] == father] = now;\n            Update (father);\n            Update (now);\n        }\n        void Get_Answer (int now) // \u628a\u6574\u68f5\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\u540e\u7684\u5e8f\u5217\u5c31\u662f\u7b54\u6848 \n        {\n            if (tree[now].Flandre)\n                Down (now);\n            if (tree[now].child[0])\n                Get_Answer (tree[now].child[0]);\n            Answer[++Count] = tree[now].key;\n            if (tree[now].child[1])\n                Get_Answer (tree[now].child[1]);\n        }\n        int Build (int l, int r, int father)\n        {\n            int now = l + r >> 1;\n            tree[now].father = father;\n            tree[now].key = value[now];\n            if (now > l)\n                tree[now].child[0] = Build (l, now - 1, now);\n            if (now < r)\n                tree[now].child[1] = Build (now + 1, r, now);\n            Update (now);\n            return now;\n        }\n```\npublic :\n        \n        \n        \n        \n            \n\n\n```cpp\n        void Prepare ()\n        {\n            Root = 1;\n            Root = Build(1, N + 2, 0);\n        }\n        void Splay (int now, int to)\n        {\n            for (int father; (father = tree[now].father) != to; Rotate (now))\n                if (tree[father].father != to)\n                    Rotate (Get_Son (now) == Get_Son (father) ? father : now);\n            if (!to)\n                Root = now;\n        }\n        int Get_Pos (int x)\n        {\n            int now = Root;\n            for (; ; )\n            {\n                if (tree[now].Flandre)\n                    Down (now);\n                if (x <= tree[tree[now].child[0]].size)\n                    now = tree[now].child[0];\n                else \n                {\n                    x -= tree[tree[now].child[0]].size + 1;\n                    if (!x)\n                        return now;\n                    now = tree[now].child[1];\n                }\n            }\n        }\n        inline void Print ()\n        {\n            Get_Answer (Root);\n            for (int i = 1; i <= N; i++)\n                printf (\"%d \", Answer[i + 1]);\n        }\n        inline void Hit_flag ()\n        {\n            tree[tree[tree[Root].child[1]].child[0]].Flandre ^= 1;\n        }\n};\nSplay_Tree_Type Make;\nint main (int argc, char *argv[])\n{\n    read (N);\n    read (M); // 0\u53f7\u70b9\u548c N+1 \u53f7\u70b9\u4ee3\u8868\u662f\u54e8\u5175\u8282\u70b9 \n    for (int i = 1; i <= N + 2; i++) // \u9884\u5148\u5904\u7406\u51fa\u503c \n        value[i] = i - 1;\n    int l, r;\n    Make.Prepare ();  // splay\u5efa\u6811\uff0c \u8981\u5efa\u6ee1\u4e8c\u53c9\u6811 \n    for (; M--; )\n    {\n        read (l);\n        read (r);\n        r += 2;\n        l = Make.Get_Pos (l); // \u627e\u5230\u5728\u6811\u4e2d\u5bf9\u5e94\u7684\u4f4d\u7f6e \n        r = Make.Get_Pos (r);   \n        Make.Splay (l, 0);\n        Make.Splay (r, l); \n        Make.Hit_flag ();  // \u6253\u4e0a\u6807\u8bb0 \n    }\n    Make.Print (); \n    return 0;\n}\n```",
        "postTime": 1495267624,
        "uid": 21123,
        "name": "ZlycerQan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u7528\u975e\u65cb\u8f6ctreap\u4e5f\u53ef\u4ee5\u7ef4\u62a4\uff0c\u65b9\u6cd5\u662f\u5c06treap\u5206\u88c2\u62101~(l-1),l~r,(r+1)~n\u4e09\u5757\uff0c\u7ed9l~r\u6253\u6807\u8bb0\u5c31\u884c\u4e86\u3002\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\nstruct Node{\n    Node *l,*r; int v,u,s; bool rev;\n    void update(){s=(l?l->s:0)+(r?r->s:0)+1;}\n    void push_down(){\n        if(l) l->rev^=1; if(r) r->rev^=1; rev=0;\n        Node *t=l; l=r; r=t;\n    }\n}*root;\nvoid split(Node *p,int k,Node *&x,Node *&y){\n    if(!p) x=y=NULL;\n    else{\n        if(p->rev) p->push_down();\n        int ln=p->l?p->l->s:0;\n        if(k<=ln) y=p,split(p->l,k,x,p->l);\n        else x=p,split(p->r,k-ln-1,p->r,y);\n        p->update();\n    }\n}\nNode* merge(Node *x,Node *y){\n    if(!x) return y;else if(!y) return x;\n    else if(x->u<y->u){\n        if(x->rev) x->push_down();\n        x->r=merge(x->r,y);\n        x->update(); return x;\n    }else{\n        if(y->rev) y->push_down();\n        y->l=merge(x,y->l);\n        y->update(); return y;\n    }\n}\nvoid count(Node *p){\n    if(!p) return; if(p->rev) p->push_down();\n    count(p->l); printf(\"%d \",p->v); count(p->r);\n}\nint main(){\n    int n,m; scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++) root=merge(root,new Node({NULL,NULL,i,rand(),1,0}));\n    for(int i=1;i<=m;i++){\n        int l,r; Node *t1,*t2,*t3; scanf(\"%d%d\",&l,&r);\n        split(root,l-1,t1,t2); split(t2,r-l+1,t2,t3);\n        t2->rev^=1;\n        root=merge(t1,merge(t2,t3));\n    }\n    count(root); return 0;\n}\n```",
        "postTime": 1494567166,
        "uid": 43425,
        "name": "Oyarden",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "### \u672c\u9898\u662f\u4e00\u9053\u6807\u51c6\u7684Splay\u9898\uff0c\u81f3\u4e8e\u6211\u4e3a\u4ec0\u4e48\u4e0d\u7528Splay\u505a\uff0c~~\u8981\u7559\u7ed9\u5386\u53f2\u53bb\u89e3\u91ca\u4e86~~\n\n\n------------\n#### \u975e\u65cb\u8f6cTreap\n\n**Treap**\u662f\u4e00\u79cd\u5341\u5206\u5b9e\u7528\uff08jilei\uff09\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b9e\u8d28\u662fBST\uff0c\u4f46\u662f\u52a0\u5165\u4e86\u5806\u6392\u5e8f\u3002\u5b83\u4e0eSpaly\u7684\u4e0d\u540c\u4e4b\u5904\uff0c\u5c31\u662f\u7531\u4e8e\u5b83\u4f7f\u7528\u5806\u6392\u5e8f\uff0c\u6240\u4ee5\u9700\u8981\u4e24\u4e2a\u6743\u503c\uff0c\u4e00\u822c\u6765\u8bf4\u4e00\u4e2a\u4e3a\u7ed3\u70b9\u539f\u503c\uff0c\u4e00\u4e2a\u4e3a\u968f\u673a\u503c\u3002\n\n\u76f8\u5bf9Splay\uff0cTreap\u7684\u5e38\u6570\u76f8\u5bf9\u8f83\u5c0f\uff0c\u800c\u4e14Splay\u80fd\u5b9e\u73b0\u7684\uff0cTreap\u57fa\u672c\u4e0a\u90fd\u80fd\u5b9e\u73b0\uff08\u7136\u5e76\u5375\uff09\u3002\u867d\u7136\u4e5f\u5c31\u662f\u8bf4\u5b66\u4e86Splay\uff0cTreap\u7684\u9898\u57fa\u672c\u4e0a\u90fd\u80fdA\uff0c\u4f46\u662f\uff0c~~\u5b66\u65e0\u6b62\u5883~~\u3002\n\n\u975e\u65cb\u8f6cTreap\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5728\u65cb\u8f6cTreap\u7684\u57fa\u7840\u4e0a\uff0c~~\u4e0d\u65cb\u8f6c~~\u3002\u65cb\u8f6cTreap\u7528\u7c7b\u4f3cSplay\u7684\u539f\u7406\u6765\u5b9e\u73b0BST\u548cHeap\uff0c\u975e\u65cbTreap\u4f7f\u7528**\u6811\u7684\u5408\u5e76\u548c\u62c6\u5206**\u3002\u8fd9\u4e24\u79cdTreap\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u4f3c\uff0c\u4f46\u975e\u65cbTreap\u7684\u5e38\u6570\u66f4\u5927\uff08\u5206\u5206\u5408\u5408\uff09\u3002\u4f46\u662f\u4f5c\u4e3a\u8865\u507f\uff0c\u975e\u65cbTreap\u80fd\u5b9e\u73b0\u65cb\u8f6cTreap\u4e0d\u80fd\u5b9e\u73b0\u7684\uff0c\u800c\u4e14\u652f\u6301\u53ef\u6301\u4e45\uff01\uff01\uff01\uff08~~\u7136\u800c\u5bf9\u8fd9\u9053\u9898\u4e00\u65e0\u6240\u7528~~\uff09\n\n\u672c\u9898\u6d89\u53ca\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u57fa\u672c\u601d\u60f3\u662f\u628a\u5bf9\u5e94\u533a\u95f4\u7ffb\u8f6c\u51fa\u6765\uff0c\u6253\u4e0a\u6807\u8bb0\u3002~~\u7136\u540e\u8fd8\u8981\u5408\u5e76~~\u3002\n\n------------\n\u8bf4\u4e86\u8fd9\u4e48\u591a\u5e9f\u8bdd\uff0c\u5176\u5b9e\u505a\u8fd9\u9053\u6a21\u677f\u9898\u8fd8\u6765\u770b\u8fd9\u79cd\u7b97\u6cd5\u9898\u89e3\u7684\u5927\u4f6c\u80af\u5b9a\u6bd4\u6211\u61c2\u5f97\u591a\u5f97\u591a\uff08\u771f\u5b9e\uff09\u3002\u800c\u4e14\u975e\u65cbTreap\u80af\u5b9a\u4e0d\u662f\u8fd9\u9053\u9898\u7684\u6700\u4f18\u89e3\uff0c\u8ffd\u6c42\u6548\u7387\u7684\u5404\u4f4d\u53ef\u4ee5\u81ea\u52a8\u5ffd\u7565\u4e86\u3002\n\n####  _Talk is Cheap.Show me the code._\n\n```cpp\n// \u5df2\u5c3d\u529b\u5199\u5f97\u597d\u770b,\u5948\u4f55\u4eba\u592a\u4e11\n#include<bits/stdc++.h>\n#define mn 100005\n#define inf INT_MAX\n#define lc t[x].son[0]\n#define rc t[x].son[1]\nusing namespace std;\n\nnamespace Tree{\n\tint root;\n\tstruct dr{\n\t\tint rd;\n\t\tint size;\n\t\tint son[2];\n\t\tbool rev;\n\t}t[mn];\n\tinline void up(int x){\n\t\tt[x].size=t[lc].size+t[rc].size+1;\n\t}\n\tinline void down(int x){ //\u6309\u6807\u8bb0\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\n\t\tif(t[x].rev){\n\t\t\tswap(lc,rc);\n\t\t\tt[x].rev=0;\n\t\t\tt[lc].rev^=1;//\u4e0d\u80fd\u76f4\u63a5\u4fee\u6539\n\t\t\tt[rc].rev^=1;\n\t\t}\n\t}\n\tpair<int,int> split(int x,int k){ //\u6838\u5fc3\u7a0b\u5e8f(\u4e4b\u4e00)\n\t\tif(!x) return make_pair(0,0);\n\t\tdown(x);int ls=t[lc].size;\n\t\tpair<int,int> tmp;\n\t\tif(k>ls){ //\u6309\u513f\u5b50\u4e2a\u6570\u6784\u9020(\u4e2a\u4eba\u63a8\u8350)\n\t\t\ttmp=split(rc,k-ls-1); //\u5728\u53f3\u5b50\u6811\u4e2d\u5bfb\u627e\u5bf9\u5e94\u533a\u95f4\n\t\t\trc=tmp.first;up(x);\n\t\t\treturn make_pair(x,tmp.second);\n\t\t}\n\t\telse{\n\t\t\ttmp=split(lc,k);\n\t\t\tlc=tmp.second;up(x);\n\t\t\treturn make_pair(tmp.first,x);\n\t\t}\n\t}\n\tint merge(int a,int b){ //\u6838\u5fc3\u7a0b\u5e8f(\u4e4b\u4e8c)\n\t\tif(!a||!b) return a+b; //\u53ea\u6709\u4e00\u90e8\u5206,\u7701\u5fc3\u7684\u64cd\u4f5c\n\t\tdown(a);down(b);\n\t\tif(t[a].rd<t[b].rd){ //\u6309rand\u6392\n\t\t\tt[a].son[1]=merge(t[a].son[1],b);\n\t\t\tup(a);\n\t\t\treturn a;\n\t\t}\n\t\telse{\n\t\t\tt[b].son[0]=merge(a,t[b].son[0]);\n\t\t\tup(b);\n\t\t\treturn b;\n\t\t}\n\t}\n\tinline void insert(int x){\n\t\tt[x].size=1;\n\t\tt[x].rd=rand()%mn;\n\t\troot=merge(root,x); //\u63d2\u5165\u76f8\u5f53\u4e8e\u628a\u65b0\u589e\u7684\u4e00\u5757\u548c\u539f\u6811\u5408\u5e76\n\t}\n\tvoid put(int x){ //\u8f93\u51fa\u4e2d\u5e8f\u904d\u5386,\u8bc1\u660e\u7e41\u800c\u4e0d\u96be,\u7565\u53bb\n\t\tif(!x) return;\n\t\tdown(x);put(lc);\n\t\tprintf(\"%d \",x);\n\t\tput(rc);\n\t}\n\tvoid Rev(int l,int r){\n\t\tpair<int,int> t1,t2;\n\t\tt1=split(root,l-1);//\u62c6\n\t\tt2=split(t1.second,r-l+1); //\u5bf9\u5e94\u533a\u95f4\u4e00\u5b9a\u5728\u53f3\u5b50\u6811\n\t\tt[t2.first].rev^=1;\n\t\tt2.first=merge(t2.first,t2.second); //\u6709\u5173\u5bf9\u5e94\u533a\u95f4\u7684\u5408\u5e76\n\t\troot=merge(t1.first,t2.first); //\u5bf9\u5e94\u533a\u95f4\u53ca\u4e4b\u524d\u7684\u5408\u5e76\n\t}\n}\nusing namespace Tree;\n\ninline int read(){ //\u753b\u9f99\u70b9\u775b\u4e4b\u7b14,\u7528\u67d0\u79cd\u673a\u5236\u5927\u5927\u63d0\u9ad8\u4e86\u6548\u7387\n   int s=0,w=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\n\nint main(){\n\tint n=read();\n\tint m=read();\n\tint l,r;\n\tsrand(time(0));\n\tfor(int i=1;i<=n;i++) insert(i);\n\twhile(m--){\n\t\tl=read();\n\t\tr=read();\n\t\tRev(l,r);\n\t}\n\tput(root);\n\treturn 0;\n}\n```\n",
        "postTime": 1582622582,
        "uid": 236099,
        "name": "H_D_NULL",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\u3011"
    },
    {
        "content": "$$\\color{cornflowerblue}{\\mathcal{Treaker}}$$\n# \n\u8fd9\u4e2a\u9898\u8c03\u7684\u4ee4\u6211\u7edd\u671b\u3002\u3002\n\n\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u4e1c\u897f\uff0c\u5c31\u662f\u6211\u4eec\u8981\u53cd\u8f6c\u7684\u533a\u95f4\u53ef\u80fd\u4e03\u96f6\u516b\u843d\uff08\u53ef\u80fd\u8868\u8ff0\u4e0d\u5f53\uff0c\u5c31\u90a3\u4e2a\u610f\u601d\u4e86\uff09\uff0c\u4f46\u662f\u6211\u4eec\u600e\u4e48\u5b8c\u6574\u7684\u53d6\u51fa\u4e00\u4e2a\u533a\u95f4\u6765\u6253\u6807\u8bb0\u5462\uff08\u6253\u6807\u8bb0\u5e94\u8be5\u662f\u663e\u7136\u5427\uff08\u4e0d\u7136\u590d\u6742\u5ea6\u65e0\u6cd5\u4fdd\u8bc1\uff09\uff09\u3002\n\n\u6211\u4eec\u53c8\u53d1\u73b0\uff0c\u5f53\u5148\u628al-1\u8f6c\u5230\u6839\uff0c\u518d\u628ar+1\u8f6c\u5230\u6839\u7684\u53f3\u513f\u5b50\uff0c\u7136\u540e\uff0c\u8fd9\u6bb5\u533a\u95f4\u5c31\u5f88\u5b8c\u6574\u4e86(\uff1f\uff1f\uff1f\uff1f\uff09\uff0c\u600e\u4e48\u8bc1\u660e\u5462\uff1f\n\n~~\u4e0d\u4f1a~~\uff0c\u53ef\u4ee5\u624b\u73a9\uff0c~~\u4f46\u8be6\u7ec6\u8bc1\u660e\u6ca1\u6709-.-~~\n\n\u7136\u540e\u5f53\u6211\u4eec\u9700\u8981\u5411\u4e0b\u8d70\u65f6\uff0c\u628a\u6807\u8bb0\u4e0b\u653e\u5e76\u7ffb\u8f6c\u5de6\u53f3\u513f\u5b50\u3002\n\n\u8c03\u4e86\u4e00\u5929\u7684\u539f\u56e0\u662f\u975e\u9012\u5f52\u51fa\u9505\u4e86\u3002\n\n\u539f\u6765\u7684\u662f\uff1a\n```cpp\nwhile(p && p -> rk() != k)\n{\n\tif(p -> tag) p -> down();\n\tif(p -> rk() > k)\tp = p -> ch[0];\n\telse k -= p -> rk() , p = p -> ch[1];\n}\n```\n\u6539\u4e4b\u540e\uff1a\n```cpp\nwhile(p)\n{\n\tp -> down();\n\tif(p -> rk() == k)\tbreak;\n\tif(p -> rk() > k)\tp = p -> ch[0];\n\telse k -= p -> rk() , p = p -> ch[1];\n}\n```\n\u5e94\u8be5\u662f\u5c11\u4e0b\u653e\u6807\u8bb0\u4e86\u3002\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nconst int N = 100005;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nint n , m , cnt;\nstruct Splay\n{\n\tstruct node\n\t{\n\t\tnode *ch[2] , *fa;\n\t\tint val , size , tag;\n\t\tnode(node *fa = NULL,int val = 0,int size = 0) : fa(fa) , val(val) , size(size) {ch[0] = ch[1] = NULL;tag = 0;}\n\t\tinline bool isr() {return this == fa -> ch[1];}\n\t\tinline int rk() {return 1 + (ch[0] ? ch[0] -> size : 0);}\n\t\tinline void up() {size = (ch[0] ? ch[0] -> size : 0) + (ch[1] ? ch[1] -> size : 0) + 1;}\n\t\tinline void down()\n\t\t{\n\t\t\tif(!tag)\treturn;\n\t\t\tswap(ch[0],ch[1]);\n\t\t\tif(ch[0])\tch[0] -> tag ^= 1;\n\t\t\tif(ch[1])\tch[1] -> tag ^= 1;\n\t\t\ttag = 0;\n\t\t}\n\t}*root;\n\tinline void rot(node *x)\n\t{\n\t\tbool k = x -> isr();\n\t\tnode *y = x -> fa; node *z = y -> fa; node *w = x -> ch[!k];\n\t\tif(y == root)\troot = x;\n\t\telse z -> ch[y -> isr()] = x;\n\t\tx -> ch[!k] = y; y -> ch[k] = w;\n\t\ty -> fa = x;x -> fa = z;\n\t\tif(w) w -> fa = y;\n\t\ty -> up(); x -> up();\n\t}\n\tinline void splay(node *x,node *goal)\n\t{\n\t\twhile(x -> fa != goal)\n\t\t{\n\t\t\tif(x -> fa -> fa != goal)\trot(x -> isr() ^ x -> fa -> isr() ? x -> fa: x);\n\t\t\trot(x);\n\t\t}\n\t\tif(goal == NULL)\troot = x;\n\t}\n\tvoid build(int l,int r,node *&p,node *fa)\n\t{\n\t\tif(l > r)\treturn;\n\t\tint mid = (l + r) >> 1;\n\t\tp = new node(fa,mid,1);\n\t\tbuild(l,mid-1,p -> ch[0],p);\n\t\tbuild(mid+1,r,p -> ch[1],p);\n\t\tp -> up();\n\t}\n\tinline node *kth(int k)\n\t{\n\t\tnode *p = root;\n\t\twhile(p)\n\t\t{\n\t\t\tp -> down();\n\t\t\tif(p -> rk() == k)\tbreak;\n\t\t\tif(p -> rk() > k)\tp = p -> ch[0];\n\t\t\telse k -= p -> rk() , p = p -> ch[1];\n\t\t}\n\t\tsplay(p,NULL);\n\t\treturn p;\n\t}\n\tinline void reverse(int l,int r)\n\t{\n\t\tnode *x = kth(l); node *y = kth(r+2);\n\t\tsplay(x,NULL);\n\t\tsplay(y,root);\n\t\ty -> ch[0] -> tag ^= 1;\n\t}\n\tvoid dfs(node *p)\n\t{\n\t\tif(p == NULL)\treturn;\n\t\tp -> down();\n\t\tif(p -> ch[0])\tdfs(p -> ch[0]);\n\t\tif(p -> val >= 1 && p -> val <= n) printf(\"%d \",p -> val);\n\t\tif(p -> ch[1])\tdfs(p -> ch[1]);\n\t}\n\tinline void LOL()\n\t{\n\t\tn = read(); m = read();\n\t\tbuild(0,n+1,root,NULL);\n\t\tfor(int i = 1 , l , r;i <= m;i ++)\n\t\t{\n\t\t\t++cnt ;\n\t\t\tl = read(); r = read();\n\t\t\treverse(l,r);\n\t\t}\n\t\tdfs(root);\n\t}\n}DNF;\nint main()\n{\n\tDNF.LOL();\n\treturn 0;\n}\n```\n",
        "postTime": 1569146589,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9898\u548c$P3369$\u5dee\u4e0d\u591a\uff0c\u65e0\u975e\u591a\u4e86\u4e00\u4e2a\u533a\u95f4\u7ffb\u8f6c\n\n\u4e5f\u5c31\u662f\u591a\u4e86\u4e00\u4e2a\u533a\u95f4\u6807\u8bb0\u7684\u8fc7\u7a0b\n\n$Splay$\u662f\u5148\u628a$L$\u65cb\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u518d\u628a$R$\u65cb\u8f6c\u5230\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\n\n\u6700\u540e\u518d\u7ed9\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50\u6253\u4e0a\u6807\u8bb0\n\n$Treap$\u5219\u53ea\u8981\u5206\u522b\u6309\u7167$L$\u548c$R$\u5206\u79bb\u533a\u95f4\u518d\u6253\u4e0a\u6807\u8bb0\u5373\u53ef\n\n\u7136\u540e\u5c31\u662f\u4e00\u4e2a\u5957\u6a21\u677f\u7684\u8fc7\u7a0b\uff0c\u4e4b\u524d\u7684\u535a\u5ba2\u8bb2\u8fc7\n\n[\u4e0d\u61c2\u7684\u6233\u8fd9\u91cc](https://www.luogu.org/blog/kakakak/solution-p3369),\u8fd9\u91cc\u5c31\u53ea\u8d34\u4ee3\u7801\n\n$Splay$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct sakura\n{\n    int fa,tot;\n    int son[2];\n    bool rev;\n}\ntree[100001];\nint m,n,l,r,pl,pr,tot,root;\ninline void connect(int x,int fa,bool tpe)\n{\n    tree[x].fa=fa;\n    tree[fa].son[tpe]=x;\n}\ninline bool ident(int x)\n{ return tree[tree[x].fa].son[1]==x; }\ninline void update(int x)\n{ tree[x].tot=tree[tree[x].son[0]].tot+tree[tree[x].son[1]].tot+1; }\ninline int read()\n{\n    char ch=getchar();\n    int c=0;int f=1;\n    while(ch<'0'||ch>'9')\n    {\n        if(f=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        c=c*10+ch-'0';\n        ch=getchar();\n    }\n    return c*f;\n}\ninline int BuildTree(int l,int r)\n{\n    if(l>r) return 0;\n    int mid=(l+r)>>1;\n    connect(BuildTree(l,mid-1),mid,0);\n    connect(BuildTree(mid+1,r),mid,1);\n    tree[mid].rev=0;\n    update(mid);return mid;\n}\ninline void pushdown(int x)\n{\n    if(tree[x].rev)\n    {\n        swap(tree[x].son[0],tree[x].son[1]);\n        tree[tree[x].son[0]].rev^=1;\n        tree[tree[x].son[1]].rev^=1;\n        tree[x].rev=0;\n    }\n}\ninline void rotate(int x)\n{\n    int y=tree[x].fa;\n    if(y==root) root=x;\n    int z=tree[y].fa;\n    bool Y=ident(x);\n    bool Z=ident(y);\n    int w=tree[x].son[Y^1];\n    connect(w,y,Y);\n    connect(y,x,Y^1);\n    connect(x,z,Z);\n    update(y);update(x);\n}\ninline void Splay(int x,int to)\n{\n\twhile(tree[x].fa!=to)\n    {\n        if(tree[tree[x].fa].fa==to) rotate(x);\n        else if(ident(x)==ident(tree[x].fa))\n            rotate(tree[x].fa),rotate(x);\n        else rotate(x),rotate(x);\n    }\n    update(x);\n}\ninline int find(int x)\n{\n    int now=root;--x;\n    pushdown(now);\n    while(x!=tree[tree[now].son[0]].tot)\n    {\n        if(tree[tree[now].son[0]].tot<x)\n            x-=tree[tree[now].son[0]].tot+1,now=tree[now].son[1];\n        else now=tree[now].son[0];\n        pushdown(now);\n    }\n    return now;\n}\ninline void print(int now)\n{\n    if(!now) return ;\n    pushdown(now);\n    print(tree[now].son[0]);\n    if(now!=1&&now!=n+2) printf(\"%d \",now-1);\n    print(tree[now].son[1]);\n}\nint main()\n{\n    n=read();m=read();\n    root=BuildTree(1,n+2);\n    for(register int i=1;i<=m;++i)\n    {\n        l=read();r=read();\n        pl=find(l);\n        Splay(pl,0);\n        pr=find(r+2);\n        Splay(pr,root);\n        tree[tree[pr].son[0]].rev^=1;\n    }\n    print(root);\n    return 0;\n}\n```\n\n$Treap$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct sakura\n{\n    int pri,val;\n    int mark,size;\n    int son[2];\n}\ntree[200002];\nint a,b,c,d,m,n,l,r,tot,root;\ninline void update(int x)\n{ tree[x].size=tree[tree[x].son[0]].size+tree[tree[x].son[1]].size+1; }\ninline int read()\n{\n    char ch=getchar();\n    int c=0;int f=1;\n    while(ch<'0'||ch>'9')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        c=c*10+ch-'0';\n        ch=getchar();\n    }\n    return c*f;\n}\ninline int new_node(int x)\n{\n    tree[++tot].size=1;\n    tree[tot].val=x;\n    tree[tot].pri=rand();\n    return tot;\n}\ninline int BuildTree(int l,int r)\n{\n    if(l>r) return 0;\n    int mid=(l+r)>>1;\n    int now=new_node(mid-1);\n    tree[now].son[0]=BuildTree(l,mid-1);\n    tree[now].son[1]=BuildTree(mid+1,r);\n    update(now);return now;\n}\ninline void pushdown(int now)\n{\n    if(now&&tree[now].mark)\n    {\n        swap(tree[now].son[0],tree[now].son[1]);\n        if(tree[now].son[0]) tree[tree[now].son[0]].mark^=1;\n        if(tree[now].son[1]) tree[tree[now].son[1]].mark^=1;\n        tree[now].mark=0;\n    }\n}\ninline void split(int now,int k,int &x,int &y)\n{\n    if(!now){ x=y=0;return ; }\n    pushdown(now);\n    if(tree[tree[now].son[0]].size<k)\n        x=now,split(tree[now].son[1],k-tree[tree[now].son[0]].size-1,tree[now].son[1],y);\n    else y=now,split(tree[now].son[0],k,x,tree[now].son[0]);\n    update(now);\n}\ninline int merge(int x,int y)\n{\n    if(!x||!y) return x+y;\n    pushdown(x);pushdown(y);\n    if(tree[x].pri<tree[y].pri)\n    {\n        tree[x].son[1]=merge(tree[x].son[1],y);\n        update(x);return x;\n    }\n    else\n    {\n        tree[y].son[0]=merge(x,tree[y].son[0]);\n        update(y);return y;\n    }\n}\ninline void print(int now)\n{\n    pushdown(now);\n    if(tree[now].son[0]) print(tree[now].son[0]);\n    if(tree[now].val>=1&&tree[now].val<=n) printf(\"%d \",tree[now].val);\n    if(tree[now].son[1]) print(tree[now].son[1]);\n}\nint main()\n{\n    srand((unsigned)time(NULL));\n    n=read();m=read();\n    root=BuildTree(1,n+2);\n    for(register int i=1;i<=m;++i)\n    {\n        l=read();r=read();\n        split(root,r+1,a,b);\n        split(a,l,c,d);\n        tree[d].mark^=1;\n        root=merge(merge(c,d),b);\n    }\n    print(root);\n    return 0;\n}\n```",
        "postTime": 1547881659,
        "uid": 110198,
        "name": "RicardoShips",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u5c3d\u7ba1\u9898\u8ff0\u4e2d\u63d0\u53ca\u4e86Splay\u2026\u2026\n\n\u7136\u800c\uff0c\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u4f7f\u7528Splay\u5462\uff1f\n\u3010\u5176\u5b9e\u662f\u6211\u4e0d\u4f1a\u4f38\u5c55\u6811\u3011\n\nfhq treap\u591a\u4e48\u597d\uff0c\u57fa\u672c\u64cd\u4f5c\u5c31\u662fmerge split\uff1b\u7528\u5b83\u6765\u5199\u5e26reverse\u64cd\u4f5c\u7684\u5e73\u8861\u6811\uff0c\u4ee3\u7801\u7b80\u76f4\u6d51\u7136\u5929\u6210\uff01\n\n//\u5174\u8bb8fhq treap\uff08\u6211\u53d1\u73b0\u7684\uff09\u552f\u4e00\u7684\u7f3a\u70b9\u5c31\u662fLCT\u505a\u4e0d\u5230O(n log n)\uff1f\n\n\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u8d34\u4ee3\u7801\uff1a\n\n```cpp\nint RAND_VAL[1048576], CUR, ERROR;\nstruct node\n{\n\tint data, prior, siz;\n\tbool rev;\n\tnode* left;\n\tnode* right;\n\tnode(int dat = 0, int sz = 1, bool r = false)\n\t{\n\t\tdata = dat; siz = sz; prior = RAND_VAL[CUR ++];\n\t\tleft = right = NULL;\n\t\trev = r;\n\t}\n};\nnode* NERR;\ninline int getsize(node* v)\n{\n\treturn v == NULL ? 0 : v -> siz;\n}\ninline void pushup(node* v)\n{\n\tif(v != NULL) v -> siz = getsize(v -> left) + getsize(v -> right) + 1;\n}\ninline void reverse(node* v)\n{\n\tif(v != NULL) v -> rev ^= 1;\n}\nvoid pushdown(node* v)\n{\n\tif(v == NULL || !v -> rev) return;\n\treverse(v -> left);\n\treverse(v -> right);\n\tswap(v -> left, v -> right);\n\tv -> rev = false;\n}\nvoid merge(node* u, node* v, node*& ans)\n{\n\tif(u == NULL) ans = v;\n\telse if(v == NULL) ans = u;\n\telse {\n\t\tif(u -> prior < v -> prior) {\n\t\t\tpushdown(u);\n\t\t\tans = u;\n\t\t\tmerge(u -> right, v, ans -> right);\n\t\t} else {\n\t\t\tpushdown(v);\n\t\t\tans = v;\n\t\t\tmerge(u, v -> left, ans -> left);\n\t\t}\n\t\tpushup(ans);\n\t}\n}\nvoid split(node*& u, node*& v, node* ori, int szu)\n{\n\tif(ori == NULL) u = v = NULL;\n\telse {\n\t\tpushdown(ori);\n\t\tif(getsize(ori -> left) < szu) {\n\t\t\tu = ori;\n\t\t\tsplit(u -> right, v, ori -> right, szu - getsize(ori -> left) - 1);\n\t\t\tpushup(u);\n\t\t} else {\n\t\t\tv = ori;\n\t\t\tsplit(u, v -> left, ori -> left, szu);\n\t\t\tpushup(v);\n\t\t}\n\t}\n}\nvoid insertV(node*& ori, int pos, int val)\n{\n\tnode* u;\n\tnode* v;\n\tsplit(u, v, ori, pos);\n\tmerge(u, new node(val), u);\n\tmerge(u, v, ori);\n}\nvoid eraseV(node*& ori, int pos)\n{\n\tnode* u;\n\tnode* v;\n\tsplit(u, v, ori, pos);\n\tsplit(NERR, v, v, 1);\n\tNERR->data = ERROR;\n\tmerge(u, v, ori);\n}\nvoid reverseV(node*& ori, int l, int r)\n{\n\tnode* u;\n\tnode* v;\n\tsplit(u, v, ori, r + 1);\n\tsplit(u, ori, u, l);\n\treverse(ori);\n\tmerge(u, ori, ori);\n\tmerge(ori, v, ori);\n}\nnode* getkth(node* ori, int pos)\n{\n\tif(ori == NULL) return NERR;\n\tpushdown(ori);\n\tif(getsize(ori -> left) == pos) return ori;\n\telse if(getsize(ori -> left) < pos) return getkth(ori -> right, pos - getsize(ori -> left) - 1);\n\telse return getkth(ori -> left, pos);\n}\nint lesscnt(node* ori, int dat)\n{\n\tif(ori == NULL) return 0;\n\tpushdown(ori);\n\tif(ori -> data >= dat) return lesscnt(ori->left, dat);\n\telse return getsize(ori -> left) + 1 + lesscnt(ori -> right, dat);\n}\nvoid init()\n{\n\tsrand(time(0));\n\trep(k, 1048576) RAND_VAL[k] = k;\n\trandom_shuffle(RAND_VAL, RAND_VAL + 1048576);\n\tERROR = (-1) << 31;\n\tNERR = new node(ERROR);\n}\n\ntypedef node* treap;\n```",
        "postTime": 1522507391,
        "uid": 30853,
        "name": "djq_cpp",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "splay\u7ef4\u62a4\u533a\u95f4\u7684\u57fa\u7840\u3002\n\n# \u601d\u8def\n\n1.\u4e0d\u62ff\u6743\u503c\u5efasplay\uff0c\u62ff\u6570\u5217\u6807\u53f7\u5efasplay\u3002\n\n2.\u8981\u77e5\u9053\u4e8c\u53c9\u67e5\u627e\u6811\u5176\u5b9e\u7ef4\u62a4\u7684\u662f\u8fd9\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5373\u53ef\u3002\n\n3.\u7531\u4e8e\u4e2d\u5e8f\u904d\u5386\u7684\u4e00\u4e9b\u6027\u8d28\u53ef\u77e5\uff0c\u5e8f\u5217\u533a\u95f4\u7ffb\u8f6c\u4e0e\u4ea4\u6362\u5f53\u524d\u533a\u95f4\u5b50\u6811\u7684\u6240\u6709\u5de6\u53f3\u5b50\u6811\u7684\u6743\u503c\u7b49\u4ef7\u3002\u8003\u8651\u67d0\u4e00\u4f4d\uff0c\u7ffb\u8f6c\u533a\u95f4\u7b49\u4e8e\u662f\u5c06\u533a\u95f4\u5de6\u6570\u7b2c\u4e00\u4e2a\u4e0e\u53f3\u6570\u7b2c\u4e00\u4e2a\u4ea4\u6362\u800c\u5728\u6807\u53f7\u5e8f\u5217\u4e2d\u8fd9\u6837\u5bf9\u5e94\u5173\u7cfb\u7684\u4f4d\u7f6e\u4e00\u5b9a\u5728\u540c\u4e00\u6839\u7ed3\u70b9\u7684\u5de6\u53f3\u8282\u70b9\u4e0a\u3002\n\n4.\u75311\u77e5\uff0c\u65e0\u8bba\u600e\u6837\u65cb\u8f6c\uff0c\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0d\u53d8\uff0c\u5728\u6807\u53f7splay\u4e2d\uff0c\u67d0\u4e00\u6839\u8282\u70b9\u7684\u5de6\u513f\u5b50\u6807\u53f7\u4e00\u5b9a\u5c0f\u4e8e\u5176\u6839\u8282\u70b9\uff0c\u53f3\u513f\u5b50\u7684\u6807\u53f7\u4e00\u5b9a\u5927\u4e8e\u5176\u6839\u8282\u70b9\u3002\u6839\u636e\u8fd9\u4e00\u5173\u7cfb\u6211\u4eec\u67e5\u627e\u533a\u95f4L~R\u65f6\uff0c\u628aL-1splay\u5230\u6839\uff0c\u628aR+1splay\u5230L-1\u4e0b\u65b9\uff0c\u5219R+1\u7684\u5de6\u5b50\u6811\u5373\u4e3aL~R\uff0c\u67e5\u627e1~N\u65f6\uff0c\u6211\u4eec\u6dfb\u52a00\uff0c\u548cN+1\u7684\u865a\u70b9\u3002\n\n5.\u75313\u30014\uff0c\u627e\u5230L~R\u5c06\u6574\u4e2a\u5b50\u6811\u5de6\u53f3\u5b50\u6811\u7ffb\u8f6c\u5373\u53ef\uff0c\u8fd9\u91cc\u5229\u7528\u5230\u7ebf\u6bb5\u6811\u61d2\u6807\u8bb0\u7684\u65b9\u6cd5\uff0c\u6807\u8bb0\u4e00\u4e2a\u7ffb\u8f6c\u6807\u8bb0\u3002\n\n6.4\u64cd\u4f5c\u4e2d\u5bf9\u4e8eL-1,R+1\u7684\u67e5\u627e\uff0c\u8981\u8bb0\u4f4f\u6211\u4eec\u662f\u6309\u7167\u6807\u53f7\u5efaSplay\uff0c\u5373\u4f7f\u800c\u7ffb\u8f6c\u64cd\u4f5c\u53ea\u6539\u53d8\u4e86\u6743\u503c\uff0c\u5373\u6807\u53f7\u7684\u5927\u5c0f\u5173\u7cfb\u4e0d\u53d8\uff0c\u90a3\u4e48\u5bf9\u4e8esplay\u67e5\u8be2\u7b2cL-1\uff0cR+1\u540d\u5c31\u53ef\u4ee5\u627e\u5230\u8fd9\u4e24\u4e2a\u8282\u70b9\u3002\n\n7.\u7531\u4e8esplay\u4e2d\u9ed8\u8ba4\u628a0\u6807\u53f7\u4f5c\u4e3aNULL\u6307\u9488\uff0c\u90a3\u4e48\u52a0\u5165\u865a\u70b90\u4f1a\u4f7f\u6574\u68f5splay\u9519\u4e71\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u533a\u95f4\u53f3\u79fb\u4ee5\u4e3a\u6216\u8005\u66f4\u6539NULL\u7684\u6807\u53f7\u3002\u8fd9\u91cc\u6211\u91c7\u7528\u53f3\u79fb\u3002\n\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define Lson(k) (nodes[k].ch[0])\n#define Rson(k) (nodes[k].ch[1])\n#define fa(k) (nodes[k].fa)\nconst int MAXN = 1e5;\nusing namespace std;\nstruct node{\n\tint val,size,lazy;\n\tint fa;\n\tint ch[2];\n}nodes[MAXN+10];\nint e,root;\ninline void pushdown(int k){\n\tif(nodes[k].lazy){\n\t\tnodes[Lson(k)].lazy^=1;\n\t\tnodes[Rson(k)].lazy^=1;\n\t\tswap(Lson(k),Rson(k));\n\t\tnodes[k].lazy^=1;\n\t}\n}\ninline bool id(int k){\n\treturn k==nodes[fa(k)].ch[1];\n}\ninline void link(int fa,int son,int sp){\n\tif(fa)nodes[fa].ch[sp]=son;\n\tnodes[son].fa=fa;\n}\ninline void update(int k){\n\tnodes[k].size=nodes[Lson(k)].size+nodes[Rson(k)].size+1;\n}\ninline void rotate(int k){\n\tint fa=fa(k);\n\tint gra=fa(fa);\n\tint spk=id(k);\n\tint spfa=id(fa);\n\tlink(fa,nodes[k].ch[spk^1],spk);\n\tlink(k,fa,spk^1);\n\tlink(gra,k,spfa);\n\tnodes[k].size=nodes[fa].size;\n\tupdate(fa);\n}\ninline void splay(int k,int p){\n\twhile(nodes[k].fa!=p){\n\t\tint fa = fa(k);\n\t\tif(fa(fa)!=p)id(fa)==id(k)?rotate(fa):rotate(k);\n\t\trotate(k);\n\t}\n\tif(!p)root=k;\n}\ninline void insert(int &k,int x,int fa){\n\tif(!k){\n\t\tk=++e;\n\t\tnodes[e].fa=fa;\n\t\tnodes[e].size=1;\n\t\tnodes[e].val=x;\n\t\tsplay(k,0);\n\t\treturn ;\n\t}\n\tnodes[k].size++;\n\tif(x>nodes[k].val)insert(Rson(k),x,k);\n\telse if(x<nodes[k].val)insert(Lson(k),x,k);\n}\ninline int atRank(int k,int x){\n\tif(!k)return 0;\n\tpushdown(k);\n\tif(x>nodes[Lson(k)].size+1)return atRank(Rson(k),x-nodes[Lson(k)].size-1);\n\tif(x<=nodes[Lson(k)].size)return atRank(Lson(k),x);\n\treturn k;\n}\nint N,M;\ninline void solve(int l,int r){\n\tint lch = atRank(root,l);\n\tint rch = atRank(root,r+2);\n\t//cout<<\"```\"<<lch<<\" \"<<rch<<\"```\"<<endl;\n\tsplay(lch,0);\n\tsplay(rch,root);\n\tnodes[Lson(rch)].lazy^=1;\n}\ninline void out(int k){\n\t//cout<<k<<endl;\n\tif(!k)return ;\n\tpushdown(k);\n\tout(Lson(k));\n\tif(nodes[k].val>1&&nodes[k].val-1<=N)printf(\"%d \",nodes[k].val-1);\n\tout(Rson(k));\n}\nint main(){\n\tscanf(\"%d%d\",&N,&M);\n\tfor(int i=1;i<=N+2;i++)insert(root,i,0);\n\t//cout<<root<<endl;\n\t//out(root);\n\twhile(M--){\n\t\tint l,r;\n\t\tscanf(\"%d%d\",&l,&r);\n\t\tsolve(l,r);\n\t\t//out(root);\n\t\t//cout<<endl;\n\t}\n\tout(root);\n}\n```",
        "postTime": 1518233412,
        "uid": 55644,
        "name": "shadow__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "#\u6307\u9488\u5927\u6cd5\u597d\n\n#\u65e0\u7236\u6307\u9488Splay\u5927\u6cd5\u597d\n\n\u5927\u4f6c\u4eec\u7684\u201c\u6539\u53d8\u65cb\u8f6c\u65b9\u5411\u201d\u840c\u65b0\u8868\u793a\u4e0d\u61c2\uff0c\u4e8e\u662f\u5c31\u81ea\u5df1\u4e71\u641e\u51fa\u4e86\u4e0b\u9762\u7684\u641e\u6cd5\u3002\u3002\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff0c\u840c\u65b0\u5199\u7684\u4e11\uff0c\u8bf8\u4f4d\u5927\u4f6c\u89c1\u8c05QwQ~\n\n\n\n\n    \n    \n        \n\n\n\n\n    \n    \n        \n            \n            \n            \n        \n        \n    \n    \n\n    \n    \n\n    \n    \n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n        \n        \n\n\n    \n    \n    \n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<ctime>\n#include<cstdlib>\n#include<ctime>\n#include<string>\n#include<stack>\n#include<queue>\n#include<vector>\n#include<algorithm>\n#include<map>\nusing namespace std;\nstruct node{\n    int key;  //\u7ed3\u70b9\u952e\u503c \n    int size;  //\u4ee5\u672c\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf \n    bool lazy;  //\u61d2\u6807\u8bb0\uff0c\u8bb0\u5f55\u5bf9\u4ee5\u672c\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u64cd\u4f5c\uff0c0\u8868\u793a\u4e0d\u65cb\u8f6c\uff0c1\u8868\u793a\u5f85\u65cb\u8f6c \n    node *ch[2];  //\u5de6\u53f3\u5b50\u6811\u6307\u9488 \n    void maintain(){  //\u7ef4\u62a4\u7ed3\u70b9\u4fe1\u606f\uff08size\uff09 \n        size=1;\n        if(ch[0]!=NULL)size+=ch[0]->size;\n        if(ch[1]!=NULL)size+=ch[1]->size;\n    }\n    int cmp(int x){  //\u6c42\u5728\u4ee5\u672c\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u6392\u540d\u4e3ax\u7684\u8282\u70b9\u76f8\u5bf9\u4e8e\u672c\u8282\u70b9\u7684\u4f4d\u7f6e \n        int s=0;\n        if(ch[0]!=NULL)s=ch[0]->size;\n        if(x<=s)return 0;  //\u5728\u5de6\u5b50\u6811 \n        else if(x==s+1)return -1;  //\u672c\u7ed3\u70b9\u5373\u4e3a\u6240\u6c42 \n        else return 1;  //\u5728\u53f3\u5b50\u6811 \n    }\n};\nvoid pushdown(node *);  //\u61d2\u6807\u8bb0\u4e0b\u653e \nvoid rotate(node* &,bool);  //\u65cb\u8f6c \nvoid splay(node* &,int);  //\u6309\u7167\u6392\u540d\u4f38\u5c55 \nvoid insert(node *&,int);  //\u6ca1\u6709\u81ea\u5e26\u4f38\u5c55 \nvoid travel(node *);  //\u904d\u5386 \nnode *root=NULL;  //\u6839\u8282\u70b9\u6307\u9488 \nint n,m,i;\nint l,r;\nint r_x;  //\u5f85\u4f38\u5c55\u7684\u603b\u6392\u540d\u4e3ar+1\u7684\u8282\u70b9\u5728\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e2d\u7684\u6392\u540d\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=n;i++){\n        insert(root,i);\n        splay(root,i);\n    }  //\u63d2\u5165\u5e76\u4f38\u5c55 \n    for(i=1;i<=m;i++){\n        scanf(\"%d%d\",&l,&r);\n        if(l>1 && r<n){  //\u4e00\u822c\u60c5\u51b5 \n            splay(root,l-1);\n            r_x=r;\n            if(root->ch[0]!=NULL)r_x-=root->ch[0]->size;  //\u8ba1\u7b97r_x \n            splay(root->ch[1],r_x);  //\u5df2\u5c06\u5f85\u7ffb\u8f6c\u533a\u95f4\u63d0\u53d6\u81f3root->ch[1]->ch[0] \n            root->ch[1]->ch[0]->lazy^=1;  //\u6253\u6807\u8bb0 \n        }\n        else if(l==1 && r==n)root->lazy^=1;  //\u82e5\u5f85\u7ffb\u8f6c\u533a\u95f4\u4e3a\u6574\u4e2a\u5e8f\u5217\uff0c\u5219\u53ea\u9700\u5c06\u6839\u8282\u70b9\u6253\u4e0a\u6807\u8bb0\u5373\u53ef \n        else{\n            if(l==1){\n                splay(root,r+1);\n                root->ch[0]->lazy^=1;\n            }  //\u82e5\u5f85\u7ffb\u8f6c\u533a\u95f4\u4e3a[1,r]\uff0c\u4e14r<n,\u5219\u5c06\u7ed3\u70b9r+1\u4f38\u5c55\u81f3\u6839\u8282\u70b9\uff0c\u5219\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5373\u4e3a\u5f85\u7ffb\u8f6c\u533a\u95f4 \n            else{\n                splay(root,l-1);\n                root->ch[1]->lazy^=1;\n            }  //\u540c\u7406 \n        }    \n    }\n    travel(root);  //\u904d\u5386\u6574\u68f5\u6811 \n    return 0;\n}\nvoid pushdown(node *p){\n    swap(p->ch[0],p->ch[1]);  //\u4ea4\u6362\u5de6\u53f3\u5b50\u6811 \n    if(p->ch[0]!=NULL)p->ch[0]->lazy^=1;\n    if(p->ch[1]!=NULL)p->ch[1]->lazy^=1;  //\u4e0b\u653e\u5230\u5de6\u53f3\u5b50\u6811 \n    p->lazy=0;  //\u6e05\u7a7a\u672c\u8282\u70b9\u7684\u61d2\u6807\u8bb0 \n}\nvoid rotate(node* &p,bool f){\n    if(p->lazy)pushdown(p);  //\u4e0b\u653e\u987a\u5e8f\uff1a\u81ea\u4e0a\u800c\u4e0b \n    node *t=p->ch[f^1];\n    if(t->lazy)pushdown(t);\n    p->ch[f^1]=t->ch[f];\n    t->ch[f]=p;\n    p->maintain();  //\u7ef4\u62a4\u987a\u5e8f\uff1a\u81ea\u5e95\u5411\u4e0a \n    t->maintain();\n    p=t;\n}\nvoid splay(node* &p,int x){\n    if(p->lazy)pushdown(p);  //\u7531\u4e8e\u8981\u64cd\u4f5cp\u7684\u5b50\u6811\uff0c\u6545\u9700\u4e0b\u653e\uff0c\u4e0b\u9762\u540c\u7406 \n    int d1=p->cmp(x);  //d1\uff1a\u5f85\u4f38\u5c55\u8282\u70b9\u76f8\u5bf9\u4e8ep\u7684\u4f4d\u7f6e \n    if(d1==-1 || p->ch[d1]==NULL)return;  //\u82e5\u5f53\u524d\u8282\u70b9\u5373\u4e3a\u5f85\u4f38\u5c55\u8282\u70b9\uff0c\u6216d1\u6307\u5411\u7684\u5b50\u6811\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u8fd4\u56de \n    if(p->ch[d1]->lazy)pushdown(p->ch[d1]);\n    int x2;\n    if(d1==0)x2=x;\n    else{\n        if(p->ch[0]==NULL)x2=x-1;\n        else x2=x-p->ch[0]->size-1;\n    }  //x2\uff1a\u5f85\u4f38\u5c55\u8282\u70b9\u5728d1\u6307\u5411\u7684\u5b50\u6811\u4e2d\u7684\u6392\u540d \n    int d2=p->ch[d1]->cmp(x2);  //d2\uff1a\u5f85\u4f38\u5c55\u8282\u70b9\u76f8\u5bf9\u4e8ed1\u6307\u5411\u7684\u8282\u70b9\u7684\u4f4d\u7f6e \n    if(d2==-1 || p->ch[d1]->ch[d2]==NULL){\n        rotate(p,d1^1);\n        return;\n    }  //\u82e5d1\u6307\u5411\u7684\u8282\u70b9\u5373\u4e3a\u5f85\u4f38\u5c55\u8282\u70b9\uff0c\u6216d2\u6307\u5411\u7684\u5b50\u6811\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u5c06d1\u6307\u5411\u7684\u8282\u70b9\u4e0a\u65cb\uff0c\u7136\u540e\u8fd4\u56de\u5373\u53ef \n    else{\n        int x3;  //\u5728\u6b64\u5904\uff0c\u7531\u4e8esplay\u51fd\u6570\u5728\u5f00\u59cb\u6267\u884c\u65f6\u4f1apushdown\uff0c\u6545\u4e0d\u9700\u5728\u6b64\u5904pushdown \n        if(d2==0)x3=x2;\n        else{\n            if(p->ch[d1]->ch[0]==NULL)x3=x2-1;\n            else x3=x2-p->ch[d1]->ch[0]->size-1;\n        }  //x3\uff1a\u5f85\u4f38\u5c55\u8282\u70b9\u5728d2\u6307\u5411\u7684\u5b50\u6811\u4e2d\u7684\u6392\u540d \n        splay(p->ch[d1]->ch[d2],x3);  //\u5c06\u5f85\u4f38\u5c55\u8282\u70b9\u9012\u5f52\u4f38\u5c55\u81f3d2\u6307\u5411\u7684\u70b9 \n        if(d1==d2){  //\u4e00\u5b57\u578b\u65cb\u8f6c \n            rotate(p,d1^1); \n            rotate(p,d2^1);\n        }\n        else{  //\u4e4b\u5b57\u5f62\u65cb\u8f6c \n            rotate(p->ch[d1],d1);  //d2^1==d1\n            rotate(p,d2);  //d1^1==d2\n        }\n    }\n}\nvoid insert(node* &p,int x){\n    if(p==NULL){\n        p=(node *)malloc(sizeof(node));\n        p->key=x;\n        p->size=1;\n        p->lazy=0;\n        p->ch[0]=p->ch[1]=NULL;\n        return;\n    }  //\u65b0\u5efa\u8282\u70b9 \n    else{\n        if(p->lazy)pushdown(p);  //\u7531\u4e8e\u8981\u64cd\u4f5cp\u7684\u5b50\u6811\uff0c\u6545\u9700\u4e0b\u653e \n        insert(p->ch[1],x);  //\u7531\u4e8e\u6309\u5de6\u53f3\u987a\u5e8f\u6392\u540d\uff0c\u6545\u9700\u63d2\u5165\u81f3\u6700\u53f3\u7aef \n        p->size++;  //\u7ef4\u62a4\u672c\u8282\u70b9\u4fe1\u606f \n    }\n}\nvoid travel(node *p){\n    if(p->lazy)pushdown(p);  //\u5148\u8fdb\u884c\u4e0b\u653e\uff0c\u4e8e\u662f\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u987a\u5e8f\uff0c\u7136\u540e\u904d\u5386\u5373\u53ef \n    if(p->ch[0]!=NULL)travel(p->ch[0]);  //\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811 \n    printf(\"%d \",p->key);  //\u904d\u5386\u672c\u8282\u70b9 \n    if(p->ch[1]!=NULL)travel(p->ch[1]);  //\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811 \n}\n```",
        "postTime": 1500714754,
        "uid": 22630,
        "name": "Running_Coder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u662f\u5e73\u8861\u6811\u575a\u51b3\u4e0d\u52a0\u7236\u6307\u9488\u515a\n\n\u9996\u5148\u53ef\u4ee5\u53c2\u8003lrj\u8bad\u7ec3\u6307\u5357\uff08\u9694\u58c1\u666e\u901a\u5e73\u8861\u6811\u9898\u89e3\u91cc\u6211\u4e5f\u5199\u6709\uff09\u7684\u9012\u5f52\u627eK\u5927\u5e76\u4f38\u5c55\u5230\u6839\u7684\u65b9\u6cd5\uff0c\u5e76\u4e14\u6bcf\u6b21\u8bbf\u95ee\u5230\u4e00\u4e2a\u8282\u70b9\u90fd\u8981\u4e0b\u63a8\u6807\u8bb0\u3002\n\n\u5148\u7ed9\u51fa\u8282\u70b9\u7ed3\u6784\u7684\u5b9a\u4e49\uff1a\n\n\u6ce8\uff1anode\u7684\u6210\u5458\u91cc\uff1a**mark**\u8868\u793a\u8be5\u8282\u70b9\u662f\u5426\u6253\u4e0b\u4e86\u6807\u8bb0\u3002**size**\u4e3a\u5b50\u6811\u5305\u542b\u8282\u70b9\u6570\u3002**ch[0]**\u4e3a\u5de6\u5b69\u5b50\u6307\u9488\uff0c**ch[1]**\u4e3a\u53f3\u5b69\u5b50\u6307\u9488\u3002**cmp(k)**\u8868\u793a\u5728\u8be5\u8282\u70b9\u5bfb\u627e\u7b2ck\u5927\u4e0b\u4e00\u6b65\u5e94\u8be5\u5411\u5de6(0)\u8fd8\u662f\u5411\u53f3(1)\uff0c\u82e5\u8be5\u8282\u70b9\u5df2\u7ecf\u662f\u7b2ck\u5927\u5219\u8fd4\u56de-1\u3002\n\n**rotate(t,d)**\u8868\u793a\u5c06\u4ee5t\u4e3a\u6839\u7684\u5b50\u6811\u5411\u65b9\u5411d\u65cb\u8f6c\u3002\n\n\u540c\u65f6\u4e3a\u4e86\u589e\u5f3a\u4ee3\u7801\u53ef\u8bfb\u6027\uff0c\u5b9a\u4e49**l=0,r=1**\u3002\n\n```cpp\nvoid splay(node*& t, int k1)\n    {\n        **t->push_down();**\n        int d1=t->cmp(k1);\n        if(d1==r) k1-=(t->ch[l]->size+1);\n        if(d1!=-1)\n        {\n            **t->ch[d1]->push_down();**\n            int d2=t->ch[d1]->cmp(k1);\n            if(d2!=-1)\n            {\n                int k2=(d2==r)?(k1-(t->ch[d1]->ch[l]->size+1)):k1;\n                splay(t->ch[d1]->ch[d2], k2);\n                if(d1==d2) { rotate(t, d2^1); rotate(t, d1^1); }\n                else { rotate(t->ch[d1], d2^1); rotate(t, d1^1); }\n            }\n            else rotate(t, d1^1);\n        }\n    }\n```\n\u5176\u4e2dpush\\_down()\u7684\u5b9e\u73b0\u5982\u4e0b\n```cpp\n void push_down()\n        {\n            if(mark)\n            {\n                ch[l]->mark=!ch[l]->mark;\n                ch[r]->mark=!ch[r]->mark;\n                swap(ch[l],ch[r]);\n                mark=false;\n            }\n        }\n```\n\u5728rotate(t,d)\u91cc\u9762\u4e5f\u8981\u6ce8\u610f\u4e0b\u63a8\u6807\u8bb0\uff0c\u800c\u4e14\u8981\u4e0b\u63a8\u4e24\u5c42\u3002\u4e00\u65e6\u4e0b\u63a8\u4e86\u6807\u8bb0\uff0c\u65cb\u8f6c\u7684\u65b9\u5411\u5c31\u8981\u6539\u53d8\u3002\n\n```cpp\nvoid rotate(node*& t, int d)\n    {\n        if(t->mark) \n        {\n            t->push_down();\n            t->ch[l]->push_down();\n            t->ch[r]->push_down();\n            d=d^1;\n        }\n        node* k=t->ch[d^1];\n        t->ch[d^1]=k->ch[d];\n        k->ch[d]=t;\n        t->pull_up(); k->pull_up();\n        t=k;\n    }\n```\n\u6700\u540e\u7ed9\u4e00\u4e2aAC\u4ee3\u7801\n\u5f00\u59cb\u9020\u6811\u65f6\u9020\u4e00\u6761\u94fe\uff0c\u4e3a\u4e86\u65b9\u4fbf\u64cd\u4f5c\uff0c\u5728\u5934\u548c\u5c3e\u5404\u52a0\u4e0a\u4e00\u4e2a\u54e8\u5175\u7ed3\u70b9\u3002\n\n\u6bcf\u6b21\u9009\u62e9\u533a\u95f4[left, right]\u65f6\uff0c\u5148\u628aright+1\u4f38\u5c55\u5230\u6839\uff0c\u6b64\u65f6\u6839\u7684\u5de6\u5b50\u6811\u4e3a[1,right]\u3002\u518d\u628aleft-1\u65cb\u8f6c\u5230\u6839\u7684\u5de6\u513f\u5b50\uff0c\u6b64\u65f6\u6839\u7684\u5de6\u513f\u5b50\u7684\u53f3\u5b50\u6811\u4e3a[left, right]\uff0c\u64cd\u4f5c\u8fd9\u68f5\u5b50\u6811\u5373\u53ef\u3002\n\n```cpp\n#include <iostream>\n#define maxn 100010\nusing namespace std;\nint n,m;\n```\nnamespace splay\n        \n    \n```cpp\n{\n    enum direction {l=0,r};\n    struct node;\n    node *nil, *root;\n    struct node\n    {\n        bool mark;\n        int val, size;\n        node* ch[2];\n        node(int v) : val(v), size(1), mark(false) {ch[l]=ch[r]=nil;}\n        int cmp(int k)\n        {\n            if(this==nil || k==ch[l]->size+1) return -1;\n            else return k<=ch[l]->size?0:1;\n        }\n        void push_down()\n        {\n            if(mark)\n            {\n                ch[l]->mark=!ch[l]->mark;\n                ch[r]->mark=!ch[r]->mark;\n                swap(ch[l],ch[r]);\n                mark=false;\n            }\n        }\n    };\n    void init()\n    {\n        if(!nil) nil=new node(0);\n        nil->ch[l]=nil->ch[r]=nil;\n        nil->size=0;\n        root=new node(0);\n        node* k=root;\n        k->size=n+2;\n        for(int i=1;i<=n;i++)\n        {\n            k->ch[r]=new node(i);\n            k->size=n+3-i;\n            k=k->ch[r];\n        }\n        k->ch[r]=new node(0);\n        k->size=2;\n    }\n    void rotate(node*& t, int d)\n    {\n        if(t->mark) \n        {\n            t->push_down();\n            t->ch[l]->push_down();\n            t->ch[r]->push_down();\n            d=d^1;\n        }\n        node* k=t->ch[d^1];\n        t->ch[d^1]=k->ch[d];\n        k->ch[d]=t;\n        t->pull_up(); k->pull_up();\n        t=k;\n    }\n    void splay(node*& t, int k1)\n    {\n        t->push_down();\n        int d1=t->cmp(k1);\n        if(d1==r) k1-=(t->ch[l]->size+1);\n        if(d1!=-1)\n        {\n            t->ch[d1]->push_down();\n            int d2=t->ch[d1]->cmp(k1);\n            if(d2!=-1)\n            {\n                int k2=(d2==r)?(k1-(t->ch[d1]->ch[l]->size+1)):k1;\n                splay(t->ch[d1]->ch[d2], k2);\n                if(d1==d2) { rotate(t, d2^1); rotate(t, d1^1); }\n                else { rotate(t->ch[d1], d2^1); rotate(t, d1^1); }\n            }\n            else rotate(t, d1^1);\n        }\n    }\n    node* select(int left, int right)\n    {\n        splay(root, right+1);\n        splay(root->ch[l], left-1);\n        return root->ch[l]->ch[r];\n    }\n    void print(node* t = root)\n    {\n        if(t==nil) return;\n        t->push_down();\n        print(t->ch[l]);\n        if(t->val!=0) cout<<t->val<<' ';\n        print(t->ch[r]);\n    }\n}\nint main()\n{\n    using namespace splay;\n    cin>>n>>m;\n    init();\n    int a,b;\n    while(m--)\n    {\n        cin>>a>>b;\n        node* k=select(a+1,b+1);\n        k->mark=!k->mark;\n    }\n    print();\n    return 0;\n}\n```",
        "postTime": 1498187631,
        "uid": 22890,
        "name": "huangwenlong",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    },
    {
        "content": "\n\u770b\u4e86\u8bb8\u591a\u4ee3\u7801\uff0c\u53c8\u8bf7\u6559\u4e86\u5b66\u957f\u540e\u5199\u7684\uff08c++,\u5e73\u8861\u6811\u90fd\u4e0d\u600e\u4e48\u4f1a\uff09\uff0c\u5e94\u8be5\u53ef\u4ee5\u505a\u6a21\u677f\u4e86\u3002\n\n\u8981\u641e\u6e05\u695a\uff0c\u5e73\u8861\u6811\u4e2d\u7684\u4e0b\u6807\u5bf9\u5e94\u539f\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u4f46\u5e73\u8861\u6811\u7684\u5927\u5c0f\u987a\u5e8f\u624d\u662f\u5f53\u524d\u6570\u7ec4\u3002\n\n\u7ffb\u8f6c\u533a\u95f4[l,r],\u5c31\u662f\u627e\u5230p1=\u7b2cl-1\u5927\u7684\uff0c\u65cb\u8f6c\u5230\u6839\uff1b\u627e\u5230p2=\u7b2cr+1\u5927\u7684\uff0c\u65cb\u8f6c\u5230\u6839\u7684\u53f3\u513f\u5b50\u3002\n\n\u6b64\u65f6p2\u7684\u5de6\u513f\u5b50\u7684\u5b50\u6811\uff0c\u5c31\u6ee1\u8db3l-1<,<r+1,\u4e5f\u5c31\u662f\u533a\u95f4[l,r]\uff0c\u6240\u4ee5\u7ed9p2\u7684\u5de6\u513f\u5b50\u6253\u6807\u8bb0\u5c31\u884c\u4e86\u3002\n\n\u5f53\u7528\u5230\u4e00\u4e2a\u70b9\u7684\u513f\u5b50\u7684\u4fe1\u606f\u65f6\u5019\uff0c\u5fc5\u987b\u5148\u4e0b\u653e\u5176\u6807\u8bb0\uff1b\n\n\u540c\u65f6\u4e5f\u53ea\u6709\u5728\u8fd9\u79cd\u60c5\u51b5\u9700\u8981\u4e0b\u653e\u6807\u8bb0\u3002\n\n\u56e0\u4e3al-1,r+1\u5f53l=1,r=n\u65f6\u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u52a0\u4e24\u4e2a\u865a\u62df\u7684\u8fb9\u754c\u70b9\u3002(\u4e5f\u53ef\u4ee5\u7279\u5224)\n\n\u4ee3\u7801\u6709\u6ce8\u89e3\n\n```cpp\n#include<bits/stdc++.h>\nconst int max_n=100000+10;\nstruct node\n{\n int sz,f,c[2];//\u8fd9\u9898\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0b\u6807\u5c31\u4ee3\u8868\u503c\uff0c\u4e5f\u4e0d\u7528\u62c5\u5fc3\u6709\u91cd\u590d\u3002\u6240\u4ee5\u53ea\u7528\u8bb0\u5927\u5c0f\uff0c\u7236\u5b50\u3002 \n               //\u5426\u5219\u8fd8\u8981\u8bb0\u503c\uff0c\u8ba1\u6570\u5668\u3002   \n bool rev;//\u7ffb\u8f6c\u6807\u8bb0\n}t[max_n];\nint root;\nint n,m,p2;\n\nvoid sc(int f,int c,bool d)//set child \u7236\u4eb2 \u513f\u5b50 \u5173\u7cfb\n{\n    t[c].f=f;t[f].c[d]=c;\n}\nvoid upd(int x)//update\u66f4\u65b0sz \n{\n    t[x].sz=1+t[t[x].c[0]].sz+t[t[x].c[1]].sz;\n}\n\nvoid swap(int &x,int &y)\n{\n    int t=x;x=y;y=t;\n}\n\nvoid pushdown(int x)//\u4e0b\u653erev\u6807\u8bb0\n{\n   if (t[x].rev)\n   {    \n    swap(t[x].c[0],t[x].c[1]);\n    t[t[x].c[0]].rev^=1;t[t[x].c[1]].rev^=1;\n    t[x].rev=0;    \n   }\n}\n\nbool get(int x)//\u5f97\u5230\u4ed6\u662f\u7236\u4eb2\u7684\u54ea\u4e2a\u513f\u5b50\n{\n    return x==t[t[x].f].c[1];\n}\n\nvoid rot(int x)//rotate\u65cb\u8f6c\uff0c\u628ax\u8f6c\u5230\u5176\u7238\u7238\n{  \n   int f=t[x].f;bool d=get(x); //\u987a\u5e8f\u5f88\u91cd\u8981\uff0c\u5fc5\u987b\u5148\u8bb0\u5f55\u5173\u7cfb\uff0c\u518d\u4fee\u6539\u4e0e\u7237\u7237\u7684\u5173\u7cfb   \n    if (f==root) {root=x;t[x].f=0; }//\u7236\u4eb2\u662f\u6839\n    else sc(t[f].f,x,get(f));    \n       sc(f,t[x].c[!d],d);sc(x,f,!d);//\u7136\u540e\u4fee\u6539\u7238\u7238\u4e0e\u53cd\u5411\u513f\u5b50\u7684\u5173\u7cfb\uff0c\u6700\u540e\u4fee\u6539\u4e0e\u7238\u7238\u7684\u5173\u7cfb\n   upd(f);//\u53ea\u6709\u7238\u7238\u548cx\u7684\u5b50\u6811\u88ab\u4fee\u6539\n//\u4f46\u662f\u7531\u4e8erot\u662f\u5728splay\u4e2d\u7528\u5230\u7684\uff0c\u800cx\u5fc5\u5b9a\u4f1a\u88ab\u7ee7\u7eed\u65cb\u8f6c\uff0c\n//\u6216\u8005\u5728splay\u4e2d\u505c\u6b62\uff0c\u6240\u4ee5\u7559\u5728splay\u4e2d\u66f4\u65b0x        \n}\n\nvoid splay(int x,int r)//\u5c06x\u65cb\u8f6c\u5230r\u7684\u513f\u5b50\n{\n   if (x==r) return; //\u4fdd\u9669\u4e00\u4e9b   \n    for (int f;(f=t[x].f)!=r; )\n    {\n     if (t[f].f==r) {rot(x);break;}  //\u4e0d\u7528\u8f6c\u7237\u7237\n     rot( (get(x)==get(f))?f:x );//\u4e09\u70b9\u4e00\u7ebf\u5219\u5148\u8f6c\u7238\u7238\n     //\u4e2a\u4eba\u8ba4\u4e3a\u662f\u4e3a\u4e86\u9632\u6b62\u65cb\u8f6c\u540ex\u7684\u53cd\u5411\u513f\u5b50\u6df1\u5ea6\u8fc7\u5927\uff0c\u56e0\u4e3a\u53cd\u5411\u5b50\u6811\u53ef\u80fd\u4f1a\u5f88\u5927\u3002\u6ca1\u6709\u770b\u5230\u8fc7\u8bc1\u660e\n     rot(x); \n    }\n  upd(x);  \n}\n\nint findk(int x)//\u67e5\u627ek\u5927\n{\n    --x;//\u5373\u6709x-1\u4e2a\u6570\u6bd4\u4e4b\u5c0f\n    int now=root;pushdown(now);//\u5728\u8c03\u7528\u513f\u5b50\u4e4b\u524d\u4e0b\u653e\u6807\u8bb0\n    while (x!=t[t[now].c[0]].sz)\n    {    \n      if (t[t[now].c[0]].sz<x) \n      { x-=t[t[now].c[0]].sz+1; now=t[now].c[1];}\n      else now=t[now].c[0];\n        pushdown(now);\n    }    \n   return now;    \n}\n\nint build(int l,int r)//\u5efa\u6811\uff0c\u4e0d\u80fd\u4e00\u4e2a\u4e00\u4e2ainsert\uff0c\u800c\u5e94\u8be5\u4e8c\u5206\uff0c\u4f7f\u5f97\u521d\u59cb\u6811\u5c31\u5e73\u8861\n{\n   if (l>r) return 0;     \n    int mid=(l+r)>>1;\n    sc(mid,build(l,mid-1),0);\n    sc(mid,build(mid+1,r),1);\n    t[mid].rev=0;\n    upd(mid);    \n   return mid;\n}\n\nvoid print(int x)//\u4e2d\u5e8f\u904d\u5386\u6765\u8f93\u51fax\u7684\u5b50\u6811\n{\n   if (!x) return;    \n    pushdown(x);\n    print(t[x].c[0]);\n   if (x!=1&&x!=n+2)    printf(\"%d \",x-1);\n    print(t[x].c[1]);\n}\n\nint main()\n{ //freopen(\"1.in\",\"r\",stdin);    \n    scanf(\"%d%d\",&n,&m);\n    root=build(1,n+2);\n    \n    int l,r;\n    for (int i=1;i<=m;++i)\n    {\n        scanf(\"%d%d\",&l,&r);\n        splay(findk(l),0);\n        p2=findk(r+2);\n        splay(p2,root);\n        t[t[p2].c[0]].rev^=1;\n    }\n    print(root);\n}\n```",
        "postTime": 1476948590,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3391 \u3010\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09\u3011"
    }
]