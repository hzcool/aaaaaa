[
    {
        "content": "## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u7b80\u5355\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u95ee\uff1a\u662f\u5426\u80fd\u5b9e\u73b0\u4ee5\u4e0b\u4e24\u4e2a\u64cd\u4f5c\u4e2d\u7684\u4e00\u4e2a\uff1a\n\n1. \u627e\u5230**\u6070\u597d $\\lceil\\frac{n}{6}\\rceil$\u200b\u200b\u200b \u6761\u4e0d\u540c\u7684**\u8def\u5f84\uff0c\u200b\u4f7f\u6bcf\u4e2a\u70b9\u90fd\u81f3\u5c11\u88ab\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u3002\uff08**\u6bcf\u6761\u8def\u5f84\u4e0a**\uff0c\u6bcf\u4e2a\u70b9\u81f3\u591a\u7ecf\u8fc7\u4e00\u6b21\uff09\n2. \u627e\u5230**\u6070\u597d $\\lfloor\\frac{n}{3}\\rfloor$\u200b\u200b\u200b\u200b \u4e2a**\u70b9\uff0c\u4f7f\u5176\u4e2d**\u4e24\u4e24\u6ca1\u6709\u8fb9**\u3002\n\n\u82e5\u80fd\u5b9e\u73b0\u64cd\u4f5c1\uff0c\u8f93\u51fa\u6bcf\u6761\u8def\u5f84\uff1b\u82e5\u80fd\u5b9e\u73b0\u64cd\u4f5c2\uff0c\u8f93\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u8fd9\u4e9b\u70b9\u3002\n\n\u5bf9\u4e8e $100\\%$ \u7684\u6570\u636e\uff0c$3\\leq n\\leq 10^3$\uff0c$3\\leq m\\leq \\dfrac{n(n-1)}{2}$.\n\n## $\\rm{Subtask}$\u200b $1$\u200b\n\n\u5bf9\u4e8e $20\\%$ \u7684\u6570\u636e\uff0c$n, m\\leq 10$.\n\n\u66b4\u529b\u641c\u7d22\u5373\u53ef\u3002\u671f\u671b\u5f97\u5206 20 \u5206\u3002\n\n```cpp\nfor(int sta = 0; sta < (1 << n); sta++) {\n    int cnt = 0; bool wrong = false;\n    for(int i = 1; i <= n; i++) {\n        if(sta & (1 << (i - 1))) cnt++;\n    }\n    if(cnt != n / 3) continue;\n    for(int i = 1; i <= n; i++) if(sta & (1 << (i - 1))) {\n        for(int j = 1; j <= n; j++) if(sta & (1 << (j - 1))) {\n            if(i == j) continue;\n            if(mapp[i][j]) {wrong = true; break;}\n        }\n        if(wrong) break;\n    }\n    if(!wrong) {\n        cout << 2 << endl;\n        for(int i = 1; i <= n; i++) {\n            if(sta & (1 << (i - 1))) cout << i << \" \";\n        } cout << endl;\n        return 0;\n    }\n}\n```\n\n## $\\rm{Subtask}$ $2$\n\n\u5bf9\u4e8e\u53e6\u5916 $20\\%$\u200b \u7684\u6570\u636e\uff0c\u56fe\u662f\u4e00\u68f5\u6811\u3002\n\n#### \u7b97\u6cd5\u4e00\n\n\u5c06\u6811\u4e0a\u7684\u70b9\u6309\u6df1\u5ea6\u5947\u5076\u6027\u5206\u7c7b\uff0c\u7136\u540e\u9009\u62e9\u8fd9\u4e24\u7c7b\u4e2d\u8f83\u5927\u7684\u90a3\u4e00\u4e2a\u4f5c\u4e3a\u72ec\u7acb\u96c6\u3002\n\n\u663e\u7136\u8fd9\u4e2a\u72ec\u7acb\u96c6\u5927\u5c0f\u5927\u4e8e $n/2$\uff0c\u6ee1\u8db3\u8981\u6c42\u3002\n\n\u5f88\u597d\u5199\uff0c\u5c31\u4e0d\u7ed9\u4ee3\u7801\u4e86\u3002\n\n#### \u7b97\u6cd5\u4e8c\n\n\u8003\u8651\u6ee1\u8db3\u64cd\u4f5c\u4e8c\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u8fd9\u66f4\u63a5\u8fd1\u6b63\u89e3\u3002\n\n\u4efb\u610f\u627e\u4e00\u4e2a\u70b9\u4e3a\u6839\uff0c\u627e\u51fa\u6240\u6709 $x$ \u4e2a\u53f6\u5b50\u3002\n\n\u5982\u679c $x\\leq \\lfloor\\frac{n}{3}\\rfloor$\u200b\uff0c\u90a3\u4e48\u6ee1\u8db3\u64cd\u4f5c\u4e00\u3002\n\n\u5426\u5219\uff0c\u6784\u9020\u51fa\u4e00\u4e9b\u4ee5\u8fd9\u4e9b\u53f6\u5b50\u4e3a\u4e24\u7aef\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u8def\u5f84\u8986\u76d6\u5230\u56fe\u4e0a\u6240\u6709\u7684\u70b9\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u6837\u7684\u8def\u5f84\u4e00\u5b9a\u5b58\u5728\uff0c\u5e76\u4e14\u6700\u5c0f\u8986\u76d6\u6570\u662f $\\lceil\\frac{x}{2}\\rceil$. \u4e0b\u9762\u7ed9\u51fa\u53ef\u884c\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5373\u53ef\u8bc1\u660e\u3002\n\n#### \u6784\u9020\u65b9\u6848\n\n\u9996\u5148\uff0c\u5c06\u53f6\u5b50\u4efb\u610f\u4e24\u4e24\u914d\u5bf9\u3002\u82e5 $x$ \u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u52a0\u4e00\u4e2a\u70b9\u7f16\u53f7\u4e3a $n+1$\uff0c\u76f4\u63a5\u8fde\u5728\u6839\u8282\u70b9 $1$ \u4e0b\u9762\u3002\n\n\u663e\u7136\u914d\u5bf9\u4e0d\u4e00\u5b9a\u80fd\u8986\u76d6\u6240\u6709\u7684\u70b9\uff0c\u6240\u4ee5\u8003\u8651\u8fdb\u884c\u82e5\u5e72\u6b21\u8c03\u6574\u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21\u8c03\u6574\uff0c\u6211\u4eec**\u627e\u5230\u4e00\u4e2a\u6ca1\u6709\u88ab\u8986\u76d6\u7684\u70b9 $p$\uff0c\u4e4b\u540e\u627e $p$ \u7684\u4efb\u610f\u4e24\u4e2a\u5b50\u6811\uff0c\u4ece\u8fd9\u4e24\u4e2a\u5b50\u6811\u4e2d\u5206\u522b\u627e\u5230\u4efb\u610f\u4e24\u4e2a\u53f6\u5b50**\uff0c\u8bb0\u4e3a $(u, v)$\uff0c$(u', v')$.\n\n\u76f4\u63a5\u628a\u8fd9\u4e24\u6761\u8def\u5f84\u53d8\u6362\u4e00\u4e0b\u914d\u5bf9\u987a\u5e8f\uff0c\u53d8\u4e3a $(u, v')$ \u548c $(v, u')$\u200b. \u8fd9\u6837\u4e00\u5b9a\u53ef\u4ee5\u4f7f $p$ \u88ab\u8986\u76d6\u5230\uff0c\u81f3\u5c11\u591a\u8986\u76d6\u4e86\u4e00\u4e2a\u70b9\u3002\n\n\u7531\u4e8e\u6bcf\u6b21\u64cd\u4f5c\uff0c\u90fd\u4f1a\u591a\u8986\u76d6 $\\geq 1$ \u4e2a\u70b9\uff0c\u6240\u4ee5\u6700\u591a\u8fdb\u884c $n$ \u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n^2)$\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\u64cd\u4f5c\u56db\u4e2a\u70b9\u4e00\u5b9a\u80fd\u627e\u5230\uff0c\u64cd\u4f5c\u4e00\u5b9a\u53ef\u884c\u3002\n\n```cpp\nfor(int i = 1; i <= n; i++) if(!covered[i]) {\n    int son_cnt = 0, leaf1, leaf2, leaf3, leaf4;\n    for(int j = head[i]; j; j = edge[j].nxt) {\n        int v = edge[j].to;\n        son_cnt++;\n        if(son_cnt == 1) {\n            leaf1 = Get_leaf(v);\n            leaf2 = Pair[leaf1];\n        } else if(son_cnt == 2) {\n            leaf3 = Get_leaf(v);\n            leaf4 = Pair[leaf3];\n            break;\n        }\n    }\n    Make_pair(leaf1, leaf3); Make_pair(leaf2, leaf4);\n}\n```\n\n#### \u64cd\u4f5c\u4e00\u5b9a\u53ef\u884c\u7684\u8bc1\u660e\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6ca1\u6709\u88ab\u8986\u76d6\u7684\u70b9 $p$\uff0c\u5176\u6bcf\u4e2a\u5b50\u6811\u5185\u53f6\u5b50\u4e2a\u6570\u4e00\u5b9a $\\geq 2$\uff0c\u4e0b\u9762\u7ed9\u51fa\u8bc1\u660e\u3002\n\n\u7531\u4e8e\u6ca1\u6709\u88ab\u8986\u76d6\uff0c\u6240\u4ee5\u5b50\u6811\u5185\u7684\u6bcf\u6761\u8def\u5f84\uff0c\u90fd\u4ec5\u5728\u513f\u5b50\u7684\u5b50\u6811\u5185\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![\u4f8b - \u56fe.jpeg](https://cdn.tonyyin.top/2021/08/24/7b095d67e8e61.jpeg)\n\n$\\rm{y}$ \u5b58\u5728\u4e00\u68f5\u5b50\u6811\u4ec5\u6709\u4e00\u4e2a\u53f6\u5b50\u3002\u7ea2\u8272\u8282\u70b9\u76f8\u5173\u7684\u8def\u5f84\uff0c\u5fc5\u5b9a\u4f1a\u8986\u76d6\u5230 $\\rm{y}$.\n\n$\\rm{x}$ \u662f\u4e00\u79cd\u4e0d\u88ab\u8986\u76d6\u7684\u53ef\u884c\u60c5\u51b5\u3002\n\n## $\\rm{Subtask}$ $3$\u200b\n\n\u5bb9\u6613\u60f3\u5230\uff0c\u5728\u65e0\u5411\u56fe\u4e2d\u627e\u4e00\u68f5\u751f\u6210\u6811\uff0c\u5c1d\u8bd5\u7ee7\u7eed\u4f7f\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u8fdb\u884c\u6784\u9020\u3002\n\n\u6ce8\u610f\u5230\uff0c$\\rm{Subtask}$ $2$ \u4e2d\uff0c\u5229\u7528\u4e86\u6811\u7684\u91cd\u8981\u6027\u8d28\uff1a\u53f6\u5b50\u4e4b\u95f4\u6ca1\u6709\u8fb9\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u539f\u56fe\u4e0a\u627e\u5230DFS\u6811\u3002\u8fd9\u6837\u80fd\u6ee1\u8db3\u53f6\u5b50\u8282\u70b9\u4e4b\u95f4\uff0c\u5728\u539f\u56fe\u4e0a\u6ca1\u6709\u8fb9\u3002\n\n\u4f7f\u7528 $\\rm{Subtask}$ $2$ \u7684\u7b97\u6cd5\u4e8c\u89e3\u51b3\u5373\u53ef\u3002\n\n## $\\rm{Code}$\n\n\u4ee3\u7801\u6ca1\u6709\u7ed9\u51fa\u5934\u6587\u4ef6\u548c `read()` \u51fd\u6570\u3002\n\n`dfs1(int)`\uff0c`dfs2(int, int)`\uff0c`get_lca(int, int)` \u5b9e\u73b0\u4e86\u6811\u5256LCA\u3002\n\n\u7531\u4e8e\u672c\u9898\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n^2)$\uff0c\u53ef\u4ee5\u4e0d\u7528\u8fd9\u79cd\u65b9\u6cd5\u6c42 LCA\uff0c\u66b4\u529b\u627e LCA \u4e5f\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u4ee3\u7801\u7ec6\u8282\u8f83\u591a\uff09\n\n```cpp\nusing namespace std;\nconst int MAXN = 1e3 + 10, MAXM = 2e6 + 10;\n\nint n, m, extra;\nvector<int> mp[MAXN];\nstruct Edge{\n\tint from, to, nxt;\n} edge[MAXM];\nint head[MAXN], e_cnt = 0;\nvoid add_edge(int u, int v) {\n\tedge[++e_cnt] = (Edge){u, v, head[u]};\n\thead[u] = e_cnt;\n}\nint vis[MAXN], dep[MAXN], fa[MAXN], deg[MAXN];\nvoid Get_DFS_Tree(int u, int father) {\n\tvis[u] = true;\n\tdep[u] = dep[father] + 1; fa[u] = father;\n\tfor(int i = 0; i < mp[u].size(); i++) {\n\t\tint v = mp[u][i]; if(vis[v]) continue;\n\t\tGet_DFS_Tree(v, u);\n\t\tdeg[u]++; deg[v]++;\n\t\tadd_edge(u, v); add_edge(v, u);\n\t}\n}\nint siz[MAXN], son[MAXN], dfn[MAXN], top[MAXN], tot;\nvoid dfs1(int u) {\n\tsiz[u] = 1;\n\tfor(int i = head[u]; i; i = edge[i].nxt) {\n\t\tint v = edge[i].to; if(v == fa[u]) continue;\n\t\tdfs1(v);\n\t\tif(!son[u] || siz[v] > siz[son[u]]) son[u] = v;\n\t\tsiz[u] += siz[v];\n\t}\n}\nvoid dfs2(int u, int topf) {\n\ttop[u] = topf; dfn[u] = ++tot;\n\tif(!son[u]) return;\n\tdfs2(son[u], topf);\n\tfor(int i = head[u]; i; i = edge[i].nxt) {\n\t\tint v = edge[i].to; if(v == fa[u] || v == son[u]) continue;\n\t\tdfs2(v, v);\n\t}\n}\nint get_lca(int u, int v) {\n\twhile(top[u] != top[v]) {\n\t\tif(dep[top[u]] < dep[top[v]]) swap(u, v);\n\t\tu = fa[top[u]];\n\t}\n\tif(dep[u] < dep[v]) swap(u, v);\n\treturn v;\n}\nint leaf[MAXN], leaf_cnt;\nint Pair[MAXN], covered[MAXN];\nvoid Cover(int x, int y) {\n\tif(x == y) {covered[x] = 1; return;}\n\tdo{\n\t\tcovered[x] = covered[y] = 1;\n\t\tif(dep[x] > dep[y]) x = fa[x];\n\t\telse y = fa[y];\n\t} while(x != y);\n}\nvoid Make_pair(int x, int y) {\n\tPair[x] = y; Pair[y] = x;\n\tCover(x, y);\n}\nint Get_leaf(int u) {\n\twhile(deg[u] != 1) {\n\t\tfor(int i = head[u]; i; i = edge[i].nxt) {\n\t\t\tint v = edge[i].to; if(v != fa[u]) {u = v; break;}\n\t\t}\n\t}\n\treturn u;\n}\nvoid print_path(int u, int v) {\n\tif(u == extra) u = fa[u];\n\tif(v == extra) v = fa[v];\n\tint lca = get_lca(u, v);\n\tvector<int> p1, p2;\n\tint x = u; while(x != lca) {p1.push_back(x); x = fa[x];}\n\tx = v; while(x != lca) {p2.push_back(x); x = fa[x];}\n\tprintf(\"%d \", p1.size() + p2.size() + 1);\n\tfor(int i = 0; i < p1.size(); i++) printf(\"%d \", p1[i]);\n\tprintf(\"%d \", lca);\n\tfor(int i = p2.size() - 1; i >= 0; i--) printf(\"%d \", p2[i]);\n\tputchar('\\n');\n}\nint main() {\n\tsrand(time(0));\n\tn = read(); m = read();\n\tint rest = (n + 5) / 6;\n\tfor(int i = 1; i <= m; i++) {\n\t\tint u = read(), v = read();\n\t\tmp[u].push_back(v); mp[v].push_back(u);\n\t}\n\tGet_DFS_Tree(1, 0);\n\tdfs1(1); dfs2(1, 1);\n\tfor(int i = 2; i <= n; i++) if(deg[i] == 1) leaf[++leaf_cnt] = i;\n\tif(leaf_cnt >= n / 3) {\n\t\tputchar('2'); putchar('\\n');\n\t\tfor(int i = 1; i <= n / 3; i++) printf(\"%d \", leaf[i]);\n\t\treturn 0;\n\t}\n\tif(deg[1] == 1) leaf[++leaf_cnt] = 1;\n\tif(leaf_cnt & 1) {\n\t\tn++; fa[n] = 1; deg[n] = 1; leaf[++leaf_cnt] = n;\n\t\textra = n;\n\t\tadd_edge(1, n); add_edge(n, 1);\n\t}\n\tfor(int i = 2; i <= leaf_cnt - 1; i += 2) Make_pair(leaf[i], leaf[i + 1]);\n\tMake_pair(leaf[1], leaf[leaf_cnt]);\n\tfor(int i = 1; i <= n; i++) if(!covered[i]) {\n\t\tint son_cnt = 0, leaf1, leaf2, leaf3, leaf4;\n\t\tfor(int j = head[i]; j; j = edge[j].nxt) {\n\t\t\tint v = edge[j].to;\n\t\t\tson_cnt++;\n\t\t\tif(son_cnt == 1) {\n\t\t\t\tleaf1 = Get_leaf(v);\n\t\t\t\tleaf2 = Pair[leaf1];\n\t\t\t} else if(son_cnt == 2) {\n\t\t\t\tleaf3 = Get_leaf(v);\n\t\t\t\tleaf4 = Pair[leaf3];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tMake_pair(leaf1, leaf3); Make_pair(leaf2, leaf4);\n\t}\n\tputchar('1'); putchar('\\n');\n\tfor(int i = 1; i <= leaf_cnt; i++) {\n\t\tint u = leaf[i], v = Pair[leaf[i]];\n\t\tif(u > v) continue; //\u4fdd\u8bc1\u6bcf\u6761\u8def\u5f84\u53ea\u88ab\u8f93\u51fa\u4e00\u6b21\n\t\tprint_path(u, v); rest--;\n\t}\n\tfor(int i = 1; i <= rest; i++) {\n\t\tprint_path(rand() % n + 1, i);//\u8fd9\u4e2a\u6211\u4e5f\u4e0d\u6e05\u695a\u548b\u89e3\u51b3\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1629767885,
        "uid": 166535,
        "name": "TonyYin",
        "ccfLevel": 0,
        "title": "P7842 \u300cPMOI-4\u300d\u53ef\u601c\u7684\u56e2\u4e3b"
    },
    {
        "content": "# Subtask 1\r\n\r\n\u5bf9\u4e8e 20% \u7684\u6570\u636e $n , m \\leq 10$\r\n\r\n\u76f4\u63a5\u641c\u7d22\u5373\u53ef\uff0c\u6ca1\u6709\u592a\u591a\u7684\u7ec6\u8282\r\n\r\n\u671f\u671b\u5f97\u5206\uff1a$20$\r\n\r\n# Subtask 2\r\n\r\n\u6570\u636e\u4fdd\u8bc1\u4e3a\u4e00\u68f5\u6811\r\n\r\n\u8fd9\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u53f6\u5b50\u8282\u70b9\u968f\u673a\u914d\u5bf9\u3002\u968f\u673a\u914d\u5bf9\u5e76\u4e0d\u80fd\u591f\u4fdd\u8bc1\u8986\u76d6\u6240\u6709\u7684\u70b9\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u6211\u4eec\u8fdb\u884c\u8c03\u6574\r\n\r\n\u5bf9\u4e8e\u6bcf\u6b21\u8c03\u6574\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u672a\u88ab\u8986\u76d6\u7684\u70b9\u4f5c\u4e3a root\uff08\u7ec6\u8282\uff1a\u8be5\u70b9\u4e0d\u4e3a\u53f6\u5b50\u8282\u70b9\u4e14\u81f3\u5c11\u6709\u4e24\u4e2a\u5b50\u6811\uff0c\u5426\u5219\u5b83\u4e00\u5f00\u59cb\u5c31\u80fd\u88ab\u8986\u76d6\u5230\uff09\r\n\r\n\u4efb\u610f\u53d6\u5b83\u7684\u4e24\u4e2a\u5b50\u6811\uff0c\u5e76\u4ece\u4e2d\u5206\u522b\u6311\u9009\u4e24\u6761\u8def\u5f84 $(u,v)$ $(u^,,v^,)$ \u5c06\u5176\u8c03\u6574\u6210 $(u,v^,)$ $(v,u^,)$ \u3002\r\n\r\n\u753b\u56fe\u53ef\u77e5\uff0c\u8fd9\u65f6 $root$ \u4e00\u5b9a\u88ab\u8986\u76d6\u5230\uff0c\u6545\u53ef\u77e5\u5728\u4e0d\u8d85\u8fc7 $n$ \u6b65\u5185\u53ef\u4ee5\u5b8c\u6210\u8c03\u6574\r\n\r\n\u7ed3\u5408\u7b97\u6cd5 $1$ \uff0c\u671f\u671b\u5f97\u5206\uff1a$40$\r\n\r\n# Subtask 3\r\n\r\n\u4ece Subtask2 \u6269\u5c55\u5230\u4e00\u822c\u60c5\u51b5\r\n\r\n\u6211\u4eec\u627e\u51fa\u56fe\u4e2d\u7684 dfs \u6811\uff08\u4e0d\u5b58\u5728\u6a2a\u63d2\u8fb9\uff09\uff0c\u7136\u540e\u518d\u7ed3\u5408\u7b97\u6cd52\u5373\u53ef\r\n\r\n\u671f\u671b\u5f97\u5206\uff1a$100$\r\n\r\n\r\n\u611f\u8c22 **ducati** \u8001\u5e08\u6559\u4f1a\u4e86\u6211\r\n## \u53c2\u8003\u4ee3\u7801\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int MAXN = 1010;\r\n\r\ninline int read() { //\u901f\u8bfb \r\n\tint f = 1 , ret = 0;\r\n\tchar c = getchar();\r\n\twhile(c < '0' || c > '9') {\r\n\t\tif(c == '-') f = -1;\r\n\t\tc = getchar();\r\n\t}\r\n\twhile(c <= '9' && c >= '0') {\r\n\t\tret = (ret << 3) + (ret << 1) + c - 48;\r\n\t\tc = getchar();\r\n\t}\r\n\treturn ret * f;\r\n}\r\n\r\nint cnt , Head[MAXN];\r\n\r\nstruct Edge {\r\n\tint Next , To;\r\n}Edge[MAXN << 1]; \r\n\r\nvoid Add(int u , int v) {\r\n\tcnt++;\r\n\tEdge[cnt].To = v;\r\n\tEdge[cnt].Next = Head[u];\r\n\tHead[u] = cnt;\r\n} //\u524d\u5411\u661f\u5b58\u56fe (20 ~ 31)\r\n\r\nvector<int> G[MAXN] , res;\r\n\r\nbool Vis[MAXN] , Covered[MAXN] , book[MAXN];\r\nint Leaf[MAXN] , Deg[MAXN]; //\u5b58\u53f6\u8282\u70b9\u548c\u6bcf\u4e2a\u70b9\u7684\u5ea6\r\nint N , M , Len , Rest , Extra; \r\nint Pair[MAXN];\r\n//Pair[i] = j\u8868\u793a\u628a\uff08i \uff0c j\uff09\u914d\u6210\u4e00\u5bf9\r\n//\u914d\u5bf9\u662f\u4e92\u76f8\u7684 \r\n\r\nvoid Get_Dfs_Tree(int now) { //\u627edfs\u6811 \r\n\tVis[now] = true; //\u6807\u8bb0\r\n\tfor(int i = 0;i < G[now].size();i++) { //vector\u5b58\u56fe \r\n\t\tint v = G[now][i];\r\n\t\tif(!Vis[v]) {\r\n\t\t\tGet_Dfs_Tree(v);//\u4ee5v\u4e3aroot\u7684\u5b50\u6811\u9012\u5f52\u6c42\u89e3\r\n\t\t\tDeg[now]++;\r\n\t\t\tDeg[v]++; //\u66f4\u65b0\u4e24\u70b9\u7684\u5ea6\r\n\t\t\tAdd(now , v);\r\n\t\t\tAdd(v , now); //\u52a0\u5165\u524d\u5411\u661f \r\n\t\t}\r\n\t} \r\n}\r\n\r\nbool Dfs(int now , int dv , int father , int flag) {\r\n\tif(now == dv) {\r\n\t\tCovered[now] = true;\r\n\t\tif(flag == true && now != Extra) res.push_back(now);\r\n\t\treturn true;\r\n\t}\r\n\tbool Val = false;\r\n\tfor(int u = Head[now] ; u ; u = Edge[u].Next) {\r\n\t\tint v = Edge[u].To;\r\n\t\tif(v == father) continue;\r\n\t\tif(Dfs(v , dv , now , flag)) {\r\n\t\t\tVal = true;\r\n\t\t\tCovered[now] |= 1;\r\n\t\t}\r\n\t}\r\n\tif(flag == 1 && Val == 1 && now != Extra) res.push_back(now);//\u7279\u5224now \uff01= Extra \r\n\treturn Val;\r\n}\r\n\r\nint Get_Leaf(int now , int father) {\r\n\tif(Deg[now] == 1) return now; // \u5ea6\u4e3a\u4e00\u7684\u70b9\u2014\u2014\u53f6\u5b50 \r\n\tfor(int u  = Head[now] ; u ; u = Edge[u].Next) {\r\n\t\tint v = Edge[u].To;\r\n\t\tif(v != father) return Get_Leaf(v , now); //\u9012\u5f52\u5b50\u6811 \r\n\t}\r\n}\r\n\r\nvoid Make_Pair(int u , int v) {\r\n\tPair[u] = v;\r\n\tPair[v] = u;\r\n\t//\u914d\u5bf9\u662f\u4e92\u76f8\u7684 \r\n\tDfs(u , v, 0 , 0);\r\n} \r\n\r\nvoid print(int u,int v){\r\n\tres.clear();\r\n\tDfs(u , v , 0 , 1);\r\n\tRest--;\r\n\tprintf(\"%d \",res.size());\r\n\tfor (int i = 0 ; i < res.size() ; i++){\r\n\t\tprintf(\"%d \",res[i]);\r\n\t}\r\n\tputs(\"\");\r\n}\r\n\r\nint main() {\r\n\tN = read();\r\n\tM = read();\r\n\tRest = (N + 5) / 6;\r\n\tfor(int i = 1;i <= M;i++) {\r\n\t\tint u = read();\r\n\t\tint v = read();\r\n\t\tG[u].push_back(v);\r\n\t\tG[v].push_back(u); //vector\u5b58\u56fe \r\n\t}\r\n\tGet_Dfs_Tree(1); //\u5c061\u4f5c\u4e3a\u6839 \r\n\tfor(int i = 2;i <= N;i++) { //\u7ec6\u8282\uff1a\u4ecei : 2 -> N \uff0c\u56e0\u4e3a1\u662f\u6839\uff0c\u53ef\u80fd\u5b58\u57281->\u53f6\u5b50\u7684\u8fb9 \r\n\t\tif(Deg[i] == 1)\r\n\t\t\tLeaf[++Len] = i; //\u53f6\u5b50\u8282\u70b9\u96c6\u5408 \r\n\t}\r\n\tif(Len >= N / 3) { //\u5904\u7406 b6e0 \r\n\t\tputs(\"2\");\r\n\t\tfor(int i = 1;i <= N / 3;i++) {\r\n\t\t\tcout << Leaf[i] << \" \";\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\tif(Deg[1] == 1) Leaf[++Len] = 1;  //\u5355\u72ec\u5904\u7406root \r\n\tif(Len % 2 == 1) { // \u82e5Len\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u8fde\u4e00\u6761\u4ece 1 \u5230 n+1 \u7684\u8fb9\uff0c\u589e\u52a0\u4e00\u4e2a\u53f6\u8282\u70b9\uff0c\u8f93\u51fa\u65f6\u7279\u5224 \r\n\t\tAdd(1 , ++N);\r\n\t\tDeg[N] = 1;\r\n\t\tLeaf[++Len] = N;\r\n\t\tExtra = N; //\u7279\u5224\u65f6\u4f7f\u7528 \r\n\t}\r\n\tfor(int i = 1;i <= Len;i += 2) { //\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5199124\u884c \r\n\t\tMake_Pair(Leaf[i] , Leaf[i + 1]); //\u914d\u5bf9 \r\n\t}\r\n\twhile(true) {\r\n\t\tint now , Cnt_Son = 0 , u1 , v1 , u2 , v2 , done = 1;\r\n\t\tfor(int i = 1;i <= N;i++) {\r\n\t\t\tif(!Covered[i]) {\r\n\t\t\t\tnow = i;\r\n\t\t\t\tdone = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(done) break;\r\n\t\tfor(int i = Head[now] ; i ; i = Edge[i].Next) {\r\n\t\t\tint j = Edge[i].To;\r\n\t\t\tCnt_Son++;\r\n\t\t\tif(Cnt_Son == 1) {\r\n\t\t\t\tu1 = Get_Leaf(j , now);\r\n\t\t\t\tv1 = Pair[u1]; \r\n\t\t\t}\r\n\t\t\telse if(Cnt_Son == 2) {\r\n\t\t\t\tu2 = Get_Leaf(j , now);\r\n\t\t\t\tv2 = Pair[u2]; \r\n\t\t\t}\r\n\t\t\telse break;\r\n\t\t}\r\n\t\tMake_Pair(u1 , v2);\r\n\t\tMake_Pair(v1 , u2);\r\n\t} \r\n\tputs(\"1\");\r\n\tfor(int i = 1;i <= Len;i++) {\r\n\t\tint u = Leaf[i];\r\n\t\tint v = Pair[Leaf[i]];\r\n\t\tif(u < v) print(u , v);\r\n\t}\r\n\tfor(int i = 1;i <= Rest;i++)\r\n\t\tcout << 1 << \" \" << i << endl; \r\n\treturn 0;\r\n} \r\n```\r\n",
        "postTime": 1629980528,
        "uid": 461426,
        "name": "CmsMartin",
        "ccfLevel": 6,
        "title": "\u300cPMOI-4\u300d\u53ef\u601c\u7684\u56e2\u4e3b"
    },
    {
        "content": "## [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P7320)\n\n\u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u5f20\u7b80\u5355\u65e0\u5411\u8fde\u901a\u56fe\u3002\n\n\u95ee\u662f\u5426\u80fd\u627e\u5230 $\\lceil \\frac{n}{6}\\rceil$ \u6761\u8def\u5f84\u8d70\u5b8c\u6240\u6709\u70b9\uff0c\u6216\u5927\u5c0f\u4e3a $\\lfloor \\frac{n}{3} \\rfloor$ \u4e2a\u72ec\u7acb\u96c6\u5e76\u627e\u5230\u5176\u4e2d\u4e00\u4e2a\u3002\n\n\u82e5\u6ca1\u6709\u5219   ```Poor lnlhm```\n\n---\n~~\u901a\u8fc7\u5957\u53d6\u6570\u636e~~ \u5f97\u51fa\u5e76\u4e0d\u5b58\u5728\u6ca1\u6709\u7684\u60c5\u51b5\uff08\u7ed3\u5c3e\u7ed9\u51fa\u8bc1\u660e\uff09\n\n\n\u8003\u8651 dfs \u6811\uff0c\u5c06\u6574\u5f20\u56fe dfs \u540e\uff0c\u56de\u6eaf\u65f6\u5904\u7406\u51fa\u72ec\u7acb\u96c6\u3002\n\n\u5982\u679c\u53ef\u4ee5\u5c06 $x$ \u8282\u70b9\u653e\u5165\uff0c\u5c31\u5c06\u5176\u6240\u8054\u7684\u70b9\u90fd\u6807\u8bb0\u4e3a\u4e0d\u53ef\u653e\u5165\u3002\n```cpp\nif(!ind[x])\n{\n\tans.push_back(x);\n\tfor(int i=fir[x];i;i=nex[i])\n\t\tind[poi[i]]=1;\n\tif(ans.size()==n/3)\tPrint_2();\n}\n```   \n\n\u518d\u5904\u7406\u540e\u7684\u4e00\u9897\u6811\u4e0a\uff0c\u5b58\u4e0b\u53f6\u5b50\u8282\u70b9\uff0c\u5c06\u6240\u6709\u53f6\u5b50\u8fdb\u884c\u5339\u914d\uff0c\u5982\u679c\u4e0d\u80fd\u8fdb\u884c\u5b8c\u7f8e\u7684\u5339\u914d\uff0c\u5c31\u53ef\u4ee5\u628a\u6839\u8282\u70b91\u770b\u505a\u53f6\u5b50\u8282\u70b9\u3002\n\n\u5c06\u6240\u6709\u53f6\u5b50\u8282\u70b9\u6309\u7167 dfs \u5e8f\u6392\u5e8f\uff0c\u5339\u914d\u65f6\u53ef\u4ee5\u5c06 $lef_i$ \u548c  $lef_{i+\\frac{num}{2}}$ \u5f53\u505a\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u518d\u7528 dfs \u6811\u65f6\u5904\u7406\u7684\u7236\u4eb2\u8282\u70b9\u4e00\u4e2a\u4e00\u4e2a\u5411\u4e0a\u8df3\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5904\u7406\u540e\u5982\u679c\u4e0d\u80fd\u8fbe\u5230 $\\lceil \\frac{n}{6}\\rceil$ , \u5c31\u8865\u4e0a\u5355\u4e2a\u70b9\u5c31\u597d\u3002\n\n**\u4ee3\u7801\u5982\u4e0b\uff1a**\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<map>\n#define N 1000010\nusing namespace std;\nint re() {\n\tint p=0,f=1; char i=getchar();\n\twhile(i<'0'||i>'9')\t{if(i=='-')  f=-1;i=getchar();}\n\twhile(i>='0'&&i<='9')\tp=p*10+i-'0',i=getchar();\n\treturn f*p;\n}\nint n,m,sum,cnt,num,lit;\nint fir[N],nex[N],poi[N];\nint dfn[N],dep[N],f[N],loc[N];\nbool ind[N];\nint lef[N];\nvector<int> ans;\nvoid ins(int x,int y) {\n\tnex[++sum]=fir[x];\n\tpoi[sum]=y;\n\tfir[x]=sum;\n}\nbool cmp(int x,int y) {\n\treturn dfn[x]<dfn[y];\n}\nint a[N],b[N];\nvoid Jump(int x,int y)\n{\n\tlit++;\n\tint step_a=0,step_b=0;\n\twhile(x!=y)\n\t{\n\t\tif(dep[x]>dep[y])\n\t\t\ta[++step_a]=x,x=f[x];\n\t\telse\n\t\t\tb[++step_b]=y,y=f[y];\n\t}\n\ta[++step_a]=x;\n\tprintf(\"%d \",step_a+step_b);\n\tfor(int i=1;i<=step_a;i++)\n\t\tprintf(\"%d \",a[i]);\n\tfor(int i=step_b;i>=1;i--)\n\t\tprintf(\"%d \",b[i]);\n}\nvoid Print_1() {\n\tprintf(\"1\\n\");\n\tfor(int i=1;i<=num/2;i++)\n\t{\n\t\tint u=lef[i],v=lef[i+num/2];\n\t\tJump(u,v);\n\t\tputs(\"\");\n\t}\n\tint lim=n/6;\n\tif(n%6)\tlim++;\n\tfor(int i=lit;i<lim;i++)\n\t\tprintf(\"1 %d\\n\",i);\n}\nvoid Print_2() {\n\tprintf(\"2\\n\");\n\tfor(int i=0;i<ans.size();i++)\n\t\tprintf(\"%d \",ans[i]);\n\texit(0);\n}\nvoid dfs(int x,int fa)\n{\n\tint flag=0;\n\tdfn[x]=++cnt;\n\tdep[x]=dep[fa]+1;\n\tloc[cnt]=x;\n\tf[x]=fa;\n\tfor(int i=fir[x];i;i=nex[i]) {\n\t\tint p=poi[i];\n\t\tif(dep[p])\tcontinue;\n\t\tdfs(p,x);\n\t\tflag++;\n\t}\n\tif(flag==0||(flag==1&&x==1))\n\t\tlef[++num]=x;\n\tif(!ind[x]) {\n\t\tans.push_back(x);\n\t\tfor(int i=fir[x];i;i=nex[i])\n\t\t\tind[poi[i]]=1;\n\t\tif(ans.size()==n/3)\tPrint_2();\n\t}\n}\nint main()\n{\n\tn=re(); m=re();\n\tfor(int i=1;i<=m;i++) {\n\t\tint u,v;\n\t\tu=re(); v=re();\n\t\tins(u,v);\n\t\tins(v,u);\n\t}\n\tdfs(1,0);\n\tsort(lef+1,lef+num+1,cmp);\n\tPrint_1();\n\treturn 0;\n}\n```\n- \u8bc1\u660e\uff1a\n\n\u5982\u679c\u6700\u5927\u72ec\u7acb\u96c6\u5c0f\u4e8e $\\lfloor \\frac{n}{3} \\rfloor$ \uff0c\u5c06\u6bcf\u4e24\u4e2a\u72ec\u7acb\u96c6\u9700\u8981\u4e00\u6761\u8fb9\uff0c\u81f3\u591a\u9700\u8981 $\\lceil \\frac{n}{6} \\rceil$ \u8fb9\u5c31\u53ef\u4ee5\u4f7f\u72ec\u7acb\u96c6\u8054\u901a\uff0c\u4e5f\u5373\u6574\u5f20\u56fe\u8054\u901a\u3002\n\n\u5982\u679c $\\lceil \\frac{n}{6} \\rceil$ \u6761\u8fb9\u4e0d\u80fd\u4f7f\u56fe\u8054\u901a\uff0c\u90a3\u4e48\u540c\u7406\uff0c\u6700\u5927\u72ec\u7acb\u96c6\u4e00\u5b9a\u5927\u4e8e $\\lfloor \\frac{n}{3} \\rfloor$ \u3002\n\n**\u6545\u4e0d\u5b58\u5728\u6700\u5927\u72ec\u7acb\u96c6\u65e2\u5c0f\u4e8e $\\lfloor \\frac{n}{3}\\rfloor$ \u65f6 $\\lceil \\frac{n}{6} \\rceil$ \u6761\u8fb9\u4e0d\u80fd\u4f7f\u56fe\u8054\u901a\u3002**\n\n----------\n\n\u5982\u6709\u4e0d\u59a5\u4e4b\u5904\uff0c\u8bf7\u4e0d\u8981\u541d\u556c\u60a8\u7684\u8bc4\u8bba~\n\n$qwq$\n\n ",
        "postTime": 1629770163,
        "uid": 233816,
        "name": "_zy_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P7320\u3010\u53ef\u601c\u7684\u56e2\u4e3b\u3011"
    },
    {
        "content": "\u6211\u4eec\u8003\u8651\u5982\u4e0b\u4e00\u79cd\u65b9\u5f0f\u6784\u9020\uff1a\n\n\u9996\u5148\u627e\u4e00\u68f5\u539f\u56fe\u7684 dfs \u751f\u6210\u6811\uff0c\u7136\u540e\u8bbe\u53f6\u5b50\u6570\u91cf\u4e3a $t$\uff0c\u663e\u7136\u53f6\u5b50\u4e4b\u95f4\u4e0d\u4f1a\u6709\u8fde\u8fb9\u3002\n\n\u663e\u7136\u82e5 $t\\geq \\lfloor\\frac{n}{3}\\rfloor$\uff0c\u6211\u4eec\u76f4\u63a5\u5728\u8fd9 $t$ \u4e2a\u53f6\u5b50\u4e2d\u968f\u4fbf\u9009\u53d6 $\\lfloor\\frac{n}{3}\\rfloor$ \u4e2a\u4e3a\u72ec\u7acb\u96c6\u5373\u53ef\u3002\n\n\u5426\u5219\u82e5 $t<\\lfloor\\frac{n}{3}\\rfloor$\uff0c\u6211\u4eec\u8003\u8651\u8fd9 $t$ \u4e2a\u53f6\u5b50\u4e24\u4e24\u914d\u5bf9\u8fde\u6210\u8def\u5f84\uff0c\u5e76\u8986\u76d6\u6240\u6709\u7684\u70b9\u3002\n\n\u6709\u9898\u89e3\u7ed9\u7684\u662f\u8c03\u6574\u6cd5\uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u7b80\u5355\u76f4\u89c2\u7684\u6784\u9020\u6cd5\uff1a\n\n\u6211\u4eec\u628a\u8fd9\u4e9b\u53f6\u5b50\u6309\u987a\u5e8f\u7f16\u53f7\u4e3a $1,2,\\cdots,t$\uff0c\u7136\u540e\u6309\u5982\u4e0b\u65b9\u5f0f\u5c06\u5b83\u4eec\u4e24\u4e24\u914d\u5bf9\u8fde\u6210\u8def\u5f84\uff1a$(1,\\lfloor\\frac{t}{2}\\rfloor+1),(2,\\lfloor\\frac{t}{2}\\rfloor+2),\\cdots,(\\lceil\\frac{t}{2}\\rceil,t)$\uff0c\u5171 $\\lceil\\frac{t}{2}\\rceil$ \u7ec4\u3002\u76f4\u89c2\u5730\u6765\u8bf4\u5c31\u662f\u628a\u53f6\u5b50\u5206\u4e3a\u5de6\u53f3\u4e24\u7ec4\uff0c\u4e24\u7ec4\u53f6\u5b50\u4e4b\u95f4\u6309\u5e8f\u914d\u5bf9\u3002\n\n\u8bc1\u660e\u6bd4\u8f83\u7b80\u5355\uff0c\u5177\u4f53\u6765\u8bf4\u53ef\u4ee5\u4f7f\u7528\u53cd\u8bc1\u6cd5\uff0c\u5373\u8bc1\u660e\u67d0\u4e2a\u70b9\u4e0d\u88ab\u4efb\u4f55\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u7684\u60c5\u51b5\u4e0d\u5b58\u5728\u3002\n\n\u6ce8\u610f\u5230 $\\lceil\\frac{t}{2}\\rceil<\\left\\lceil\\dfrac{\\lfloor\\frac{n}{3}\\rfloor}{2}\\right\\rceil$\uff0c\u90a3\u4e48 $\\lceil\\frac{t}{2}\\rceil\\leq \\lceil\\frac{n}{6}\\rceil$\uff0c\u7b26\u5408\u9898\u610f\u3002\n\n\u6ce8\u610f\u7279\u5224\u6839\u4e5f\u4e3a\u53f6\u5b50\u7684\u60c5\u51b5\u3002",
        "postTime": 1629792710,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P7842\u3010\u300cPMOI-4\u300d\u53ef\u601c\u7684\u56e2\u4e3b\u3011"
    },
    {
        "content": ">*\u539f\u6587\u89c1[\u8fd9\u91cc](https://www.cnblogs.com/Arextre/p/15168461.html)*\n\n\u627e\u51fa\u539f\u6811\u7684 $\\rm dfs$ \u6811\uff0c\u663e\u7136\u53f6\u5b50\u4e4b\u95f4\u4e0d\u5b58\u5728\u6a2a\u53c9\u53d8\uff0c\u90a3\u4e48\u53f6\u5b50\u6784\u6210\u72ec\u7acb\u96c6\uff0c\u5224\u65ad\u8be5\u72ec\u7acb\u96c6\u5927\u5c0f\u662f\u5426\u5927\u4e8e\u7b49\u4e8e $\\udiv{n}{3}$\uff0c\u5982\u679c\u662f\uff0c\u90a3\u4e48\u663e\u7136\u627e\u5230\u7b54\u6848\u4e86\uff0c\u5982\u679c\u5426\uff0c\u5c06\u53f6\u5b50\u6309\u7167 $\\rm dfs$ \u5e8f\u6392\u5e8f\uff0c\u5e76**\u5728\u6700\u540e\u653e\u5165\u4e00\u4e2a\u6839**\uff0c\u5047\u8bbe\u53f6\u5b50\u6709 $m$ \u4e2a\uff0c\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u5927\u5c0f $m+1$ \u7684\u96c6\u5408\uff0c\u5982\u679c $2\\nmid (m+1)$ \u4e0d\u80fd\u6574\u9664\uff0c\u5219\u518d\u653e\u5165\u4e00\u4e2a\u6839\uff1b\n\n\u8bbe\u6211\u4eec\u6700\u7ec8\u5f97\u5230\u96c6\u5408\u5927\u5c0f\u4e3a $M(2\\mid M)$\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u96c6\u5408\uff0c\u5c06\u7b2c $i$ \u4e2a\u5143\u7d20\u4e0e $i+\\frac{M}{2}$ \u4e2a\u5143\u7d20\u5339\u914d\u6784\u6210\u4e00\u6761\u6811\u4e0a\u8def\u5f84\uff0c\u8fd9\u6837\u663e\u7136\u53ef\u4ee5\u5c06\u6240\u6709\u8282\u70b9\u8986\u76d6\u5230\uff0c\u8bc1\u660e\u5982\u4e0b\uff1a\n\n>\u5bf9\u4e8e\u53f6\u5b50\u5728\u6bcf\u4e2a\u70b9\u7684\u5206\u5e03\u60c5\u51b5\u8fdb\u884c\u8ba8\u8bba\uff1a\n>\n>- \u5f53\u53f6\u5b50\u5168\u90e8\u5206\u5e03\u5728\u8fd9\u4e2a\u70b9\u7684\u67d0\u4e2a\u53f6\u5b50\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u70b9\u52bf\u5fc5\u4f1a\u88ab\u67d0\u4e2a\u53f6\u5b50\u4e0e\u6839\u7684\u8def\u5f84\u8986\u76d6\uff0c\u6240\u4ee5\u8be5\u65b9\u6848\uff0c\u65e0\u8bba\u6839\u662f\u4e0d\u662f\u53f6\u5b50\uff0c\u52a0\u5165\u4e00\u4e2a\u6839\u8282\u70b9\u662f\u5fc5\u8981\u7684\uff1b\n>- \u5f53\u53f6\u5b50\u5206\u5e03\u5728\u81f3\u5c11\u4e24\u4e2a\u513f\u5b50\u4e2d\u65f6\uff0c\u7531\u4e8e\u662f $i$ \u4e0e $i+mid$ \u5339\u914d\uff0c\u90a3\u4e48\u4e0d\u8bba\u53f6\u5b50\u662f\u5982\u4f55\u5206\u5e03\uff0c\u8fd9\u79cd\u5339\u914d\u65b9\u5f0f\u4e00\u5b9a\u4f1a\u5b58\u5728\u67d0\u5b83\u5b50\u6811\u4e2d\u7684\u4e2a\u53f6\u5b50\u548c\u5b83\u7684\u5339\u914d\u8282\u70b9\u8fde\u6210\u7684\u8def\u5f84\u8de8\u51fa\u8be5\u53f6\u5b50\u6240\u5728\u5b50\u6811\uff0c\u8fd9\u65f6\u8be5\u8282\u70b9\u4ea6\u88ab\u8986\u76d6\uff1b\n>\n>\u7c7b\u4f3c\u5730\uff0c\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u8bf4\u660e\u9664\u6b64\u6784\u9020\u65b9\u6848\u4ee5\u5916\uff0c\u5176\u4ed6\u7684\u65b9\u6848\u90fd\u6709\u53cd\u4f8b\uff08\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4e00\u4e9b\u9519\u8bef\u7684\u6784\u9020\u65b9\u6848\u6216\u8bb8\u53ef\u4ee5\u4f7f\u7528 $\\tt random\\_shuffle()$ \u5361\u8fc7\u53bb\uff1f\uff09\n\n\u7531\u4e8e\u6784\u9020\u8f93\u51fa\u662f $\\mathcal O(n^2)$ \u7684\uff0c\u6545\u590d\u6742\u5ea6\u5c31\u662f $\\mathcal O(n^2)$ \u7684\u54af......\n\n\u7136\u9e45\u5e76\u6ca1\u6709\u4ee3\u7801QAQ",
        "postTime": 1629890993,
        "uid": 125355,
        "name": "Vladilena",
        "ccfLevel": 0,
        "title": "\u300cPMOI-4\u300d\u53ef\u601c\u7684\u56e2\u4e3b"
    }
]