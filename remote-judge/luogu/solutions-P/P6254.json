[
    {
        "content": "\u5bf9\u4e8e\u6bcf\u4e2a\u57fa\u56e0\u7c7b\uff0c\u628a $s$ \u770b\u4f5c `(`\uff0c$t$ \u770b\u4f5c `)`\u3002\n\n\u5982\u679c\u5728 `(` \u5904 $+1$\uff0c\u5728 `)` \u5904 $-1$\uff0c\u5219\u6574\u4e2a\u5e8f\u5217\u4f1a\u53d8\u6210\u4e00\u6bb5\u6298\u7ebf\uff0c\u800c\u6298\u7ebf\u53d6\u5230\u6700\u5c0f\u503c\u7684\u90a3\u4e9b\u4f4d\u7f6e\u5bf9\u4e8e\u8fd9\u4e2a\u57fa\u56e0\u7c7b\u6765\u8bf4\u90fd\u662f\u5408\u6cd5\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ea\u8981\u627e\u5230\u90a3\u4e9b\u4f4d\u7f6e\u533a\u95f4\u4fee\u6539\u4e00\u4e0b\u5373\u53ef\uff0c\u53ef\u4ee5\u5dee\u5206\u5b9e\u73b0\u3002\n\n```cpp\n// ====================================\n//   author: M_sea\n//   website: https://m-sea-blog.com/\n// ====================================\n#include <bits/stdc++.h>\n#define file(x) freopen(x\".in\",\"r\",stdin); freopen(x\".out\",\"w\",stdout)\nusing namespace std;\ntypedef long long ll;\n\nint read() {\n\tint X=0,w=1; char c=getchar();\n\twhile (c<'0'||c>'9') { if (c=='-') w=-1; c=getchar(); }\n\twhile (c>='0'&&c<='9') X=X*10+c-'0',c=getchar();\n\treturn X*w;\n}\n\nconst int N=1000000+10;\n\nint n,tp[N],id[N],s[N],dlt[N];\nvector<int> v[N];\n\nint main() {\n\tn=read(); int lim=0;\n\tfor (int i=1;i<=n;++i) {\n\t\ttp[i]=(getchar()=='s')?1:-1;\n\t\tid[i]=read(),lim=max(lim,id[i]);\n\t\tv[id[i]].emplace_back(i);\n\t}\n\tfor (int i=1;i<=lim;++i) {\n\t\tif (!v[i].size()) continue;\n\t\tint sum=0,mn=2e9;\n\t\tfor (int j=0;j<v[i].size();++j)\n\t\t\tsum+=tp[v[i][j]],s[j]=sum,mn=min(mn,s[j]);\n\t\tif (sum) continue;\n\t\tfor (int j=0;j<v[i].size();++j) {\n\t\t\tif (s[j]!=mn) continue;\n\t\t\tif (j<v[i].size()-1) ++dlt[v[i][j]+1],--dlt[v[i][j+1]+1];\n\t\t\telse ++dlt[v[i][j]+1],++dlt[1],--dlt[v[i][0]+1];\n\t\t}\n\t}\n\tfor (int i=2;i<=n;++i) dlt[i]+=dlt[i-1];\n\tint p=1;\n\tfor (int i=2;i<=n;++i) if (dlt[i]>dlt[p]) p=i;\n\tprintf(\"%d %d\\n\",p,dlt[p]);\n\treturn 0;\n}\n```",
        "postTime": 1591105989,
        "uid": 38370,
        "name": "M_sea",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6254 \u3010[ICPC2019 WF]Circular DNA\u3011"
    },
    {
        "content": "\u6821\u5185 ICPC \u6a21\u62df\u8d5b\u8003\u5230\u4e86\u6b64\u9898\uff0c\u8003\u5b8c\u540e\u53d1\u73b0\u8003\u573a\u4ee3\u7801\u559c\u63d0\u672c\u4f53\u6700\u4f18\u89e3 \uff08\u867d\u7136\u672c\u6765\u5c31\u6ca1\u51e0\u4e2a\u63d0\u4ea4\uff09\u3002\u8fd9\u9053\u9898\u5f88\u591a\u4eba\u90fd\u662f\u7528 `<set>` \u8bbe\u8ba1\u7684 $O(nlogn)$ \u7684\u7b97\u6cd5\uff0c\u8fd9\u91cc\u5c31\u4ecb\u7ecd**\u4e00\u4e2a $O(n)$ \u7684\u7b97\u6cd5**\u3002\n\n## \u9898\u76ee\u5206\u6790\n\n\u8fd9\u4e2a\u9898\u9762\u4e0d\u662f\u5f88\u597d\u61c2\uff0c\u6821\u5185\u8d5b\u4e2d\u56e0\u4e3a\u4e0d\u660e\u786e $s$\uff0c$e$ \u540e\u9762\u6570\u5b57\u7684\u610f\u601d\u803d\u8bef\u4e86\u5f88\u957f\u65f6\u95f4\u3002\u5b57\u6bcd\u540e\u9762\u8ddf\u7684\u8fd9\u4e2a\u6570\u5b57\u662f\u57fa\u56e0\u7684\u7f16\u53f7\uff0c\u7f16\u53f7\u76f8\u540c\u7684\u57fa\u56e0\u662f\u540c\u79cd\u57fa\u56e0\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u79cd\u57fa\u56e0\u90fd\u662f\u72ec\u7acb\u7684\uff0c$s1$\uff0c$e1$ \u4e4b\u95f4\u5c31\u7b97\u6709\u518d\u591a\u5176\u5b83\u79cd\u7c7b\u7684\u57fa\u56e0\u4e5f\u4e0d\u5f71\u54cd $s1$ \u548c $e1$ \u7684\u5339\u914d\u3002\n\n\u6ce8\u610f\u65ad\u5f00\u7684\u4f4d\u7f6e $p$ \u7684\u610f\u601d\u662f\u5728\u7b2c $p$ \u4e2a\u57fa\u56e0\u524d\u9762\u5207\u5272\u3002\n\n\u987a\u7740\u5f53\u65f6\u505a\u8fd9\u9053\u9898\u7684\u601d\u8def\uff0c\u6211\u4eec\u6765\u5faa\u5e8f\u6e10\u8fdb\u5730\u505a\u8fd9\u9053\u9898\u3002\n\n## \u771f\u6838\u751f\u7269\n\n\u4f17\u6240\u5468\u77e5\uff0c\u539f\u6838\u751f\u7269\u7684 DNA \u662f\u73af\u72b6\u7684\uff0c\u4f46\u662f\u663e\u7136\u73af\u72b6 DNA \u6bd4\u771f\u6838\u751f\u7269\u7684\u94fe\u72b6 DNA \u590d\u6742\uff0c\u6240\u4ee5\u5148\u8003\u8651\u94fe\u72b6 DNA \u7684\u5b8c\u7f8e\u5339\u914d\u79cd\u6570\u3002\n\n\u5c06 $s$ \u770b\u51fa\u4e0a\u62ec\u53f7\uff0c\u6743\u503c\u4e3a $1$\uff0c$e$ \u770b\u6210\u4e0b\u62ec\u53f7\uff0c\u6743\u503c\u4e3a $-1$\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u62ec\u53f7\u5339\u914d\u95ee\u9898\u3002\u5c06\u540c\u79cd\u57fa\u56e0\u6c42\u6743\u503c\u7684\u524d\u7f00\u548c\u3002\u7531\u4e8e\u6bcf\u4e2a\u7f16\u53f7\u7684\u57fa\u56e0\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u4e0d\u540c\u7f16\u53f7\u57fa\u56e0\u7684\u524d\u7f00\u548c\u5206\u522b\u8bb0\u5f55\u3002\n\n\u5bf9\u4e8e\u6743\u503c\u603b\u548c\u4e0d\u7b49\u4e8e $0$ \u7684\u7f16\u53f7\uff0c\u65e0\u8bba\u600e\u4e48\u5207\u90fd\u5207\u4e0d\u51fa\u5b8c\u7f8e\u5339\u914d\u7684\u60c5\u51b5\u3002\u5bf9\u4e8e\u603b\u548c\u7b49\u4e8e $0$ \u7684\u7f16\u53f7\uff0c\u81f3\u5c11\u6709\u4e00\u79cd\u5207\u6cd5\u53ef\u4ee5\u4f7f\u5b83\u5b8c\u7f8e\u5339\u914d\u3002\n\n\u4e00\u4e2a\u7f16\u53f7\u7684\u57fa\u56e0\u662f\u5b8c\u7f8e\u5339\u914d\u7684\u6761\u4ef6\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u662f\u603b\u548c\u7b49\u4e8e\u96f6\uff0c\u53e6\u4e00\u4e2a\u662f\u4efb\u4f55\u65f6\u5019\u524d\u7f00\u548c\u5927\u4e8e\u7b49\u4e8e $0$\uff0c\u53ea\u8981\u7ef4\u62a4\u8fd9\u4e2a\u7f16\u53f7\u7684\u524d\u7f00\u548c\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u6240\u4ee5\u5bf9\u4e8e\u771f\u6838\u751f\u7269\uff0c\u53ea\u8981\u626b\u4e00\u904d DNA \u94fe\uff0c\u8fc7\u7a0b\u4e2d\u7edf\u8ba1\u6743\u503c\u603b\u548c\u548c\u524d\u7f00\u548c\u6700\u5c0f\u503c\uff0c\u6700\u540e\u679a\u4e3e\u6240\u6709\u7f16\u53f7\uff0c\u7edf\u8ba1\u6ee1\u8db3\u4e0a\u9762\u4e24\u4e2a\u6761\u4ef6\u7684\u7f16\u53f7\u6570\u91cf\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n## $O(n^2)$\n\n\u5728\u8003\u573a\u4e0a\uff0c\u6709\u65f6\u9700\u8981\u5148\u6253\u590d\u6742\u5ea6\u9ad8\u7684\u7b97\u6cd5\u7136\u540e\u518d\u5c1d\u8bd5\u4f18\u5316\uff0c\u65e2\u51cf\u5c11\u4e86\u601d\u8003\u66f4\u4f18\u7b97\u6cd5\u7684\u96be\u5ea6\uff0c\u4e5f\u80fd\u7ed9\u8fd9\u4e2a\u9898\u7684\u5f97\u5206\u515c\u5e95\uff08\u5f53\u7136 ACM \u6ca1\u6709\u90e8\u5206\u5206\uff09\u3002\n\n\u5bf9\u4e8e\u73af\u5f62\u95ee\u9898\u4e00\u822c\u89e3\u6cd5\u662f\u65ad\u73af\u4e3a\u94fe\uff0c\u5c06\u73af\u65ad\u6210\u94fe\u540e\u590d\u5236\u4e00\u4efd\u63a5\u5728\u539f\u6765\u7684\u94fe\u540e\u9762\u3002\n\n\u5177\u4f53\u64cd\u4f5c\u662f\u5728\u5916\u5c42\u5faa\u73af\u679a\u4e3e\u65ad\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u65ad\u70b9 $i$\uff0c\u90fd\u6709 $[i, i + n - 1]$ \u662f\u4ee5 $i$ \u4e3a\u65ad\u70b9\u5207\u5f00\u7684 DNA \u94fe\u3002\u6bcf\u4e2a\u65ad\u70b9\u8dd1\u4e00\u904d\u94fe\u5f0f DNA \u7684\u7b97\u6cd5\u5373\u53ef\uff0c\u590d\u6742\u5ea6 $O(n^2)$\u3002\n\n## \u9012\u63a8\n\n\u5148\u8dd1\u4e00\u904d\u771f\u6838\u751f\u7269\u7684\u7b97\u6cd5\uff0c\u8003\u8651\u5982\u4f55\u9012\u63a8\u5730\u6c42\u51fa\u6bcf\u4e2a\u65ad\u70b9\u7684\u60c5\u51b5\u3002\n\n\u8003\u8651\u65ad\u70b9\u5411\u53f3\u79fb\u52a8\uff0c\u4f1a\u6709\u54ea\u4e9b\u5f71\u54cd\uff1f\n\n\u663e\u7136\u662f DNA \u5de6\u7aef\u57fa\u56e0\u63a5\u5230\u53f3\u7aef\u53bb\u3002\u5047\u8bbe\u8fd9\u4e2a\u57fa\u56e0\u7f16\u53f7\u662f $x$\uff0c\u5219\u5bb9\u6613\u77e5\u9053\u8fd9\u6b21\u65ad\u70b9\u7684\u79fb\u52a8\u53ea\u5f71\u54cd $x$ \u8fd9\u4e00\u79cd\u7f16\u53f7\u7684\u57fa\u56e0\uff0c\u56e0\u4e3a\u5176\u4ed6\u7f16\u53f7\u7684\u57fa\u56e0\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002\n\n\u524d\u9762\u5df2\u7ecf\u8bf4\u660e\uff0c\u5982\u679c $x$ \u7f16\u53f7\u7684\u6240\u6709\u57fa\u56e0\u6743\u503c\u603b\u548c\u4e0d\u662f $0$\uff0c\u65e0\u8bba\u65ad\u70b9\u5982\u4f55\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u5b8c\u7f8e\u5339\u914d\uff0c\u6240\u4ee5\u53ea\u8981\u8fd9\u65f6\u5de6\u7aef\u57fa\u56e0\u7684\u6743\u503c\u603b\u548c\u4e0d\u662f $0$\uff0c\u76f4\u63a5\u8df3\u5230\u4e0b\u4e00\u4e2a\u65ad\u70b9\u5373\u53ef\u3002\n\n\u89c4\u5b9a\u7f16\u53f7 $x$ \u7684\u57fa\u56e0\u7684\u6743\u503c\u603b\u548c\u4e3a $Sum_x$\uff0c\u672c\u65ad\u70b9\uff08\u7aef\u70b9\u4e0d\u540c\u524d\u7f00\u548c\u6700\u5c0f\u503c\u4e0d\u540c\uff09\u7684\u524d\u7f00\u548c\u6700\u5c0f\u503c\u4e3a $Low_x$\uff0c\u5f53\u524d\u5b8c\u7f8e\u5339\u914d\u6570\u91cf\u4e3a $Tmp$\u3002\n\n\u5982\u679c $Sum_x = 0$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7f16\u53f7\u7684\u57fa\u56e0\u6709\u53ef\u80fd\u662f\u5b8c\u7f8e\u5339\u914d\uff08\u7b2c\u4e00\u4e2a\u6761\u4ef6\u7b26\u5408\uff09\u3002\u4e00\u4e2a\u57fa\u56e0\u7684\u4f4d\u7f6e\u79fb\u52a8\u4e0d\u5f71\u54cd\u8fd9\u4e2a\u7f16\u53f7\u7684\u57fa\u56e0\u7684\u6743\u503c\u603b\u548c\u3002\u6240\u4ee5\u53ea\u8981\u770b\u79fb\u52a8\u8fd9\u4e2a\u57fa\u56e0\u540e\u5bf9 $Low_x$ \u7684\u5f71\u54cd\u5982\u4f55\u5373\u53ef\u3002\n\n\u5bf9\u5de6\u7aef\u7684\u57fa\u56e0\u5206\u7c7b\u8ba8\u8bba\u3002\n\n- \u8fd9\u4e2a\u57fa\u56e0\u662f $sx$\n\n  \u8fd9\u662f\u4e00\u4e2a\u5de6\u62ec\u53f7\uff0c\u5b83\u5728\u5de6\u7aef\u65f6\u7ed9\u6240\u6709\u524d\u7f00\u548c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u52a0\u6570 $1$\uff0c\u6240\u4ee5\u53bb\u6389\u5b83\u540e\uff0c\u6240\u6709\u4f4d\u7f6e\u4e0a\uff0c\u7f16\u53f7 $x$ \u7684\u57fa\u56e0\u6743\u503c\u524d\u7f00\u548c\u90fd\u51cf\u5c11 $1$\uff0c$Low_x$ \u4e5f\u5fc5\u7136\u51cf\u5c11 $1$\u3002\n\n  \u56e0\u4e3a $Sum_x = 0$\uff0c\u6240\u4ee5\u524d\u7f00\u548c\u6700\u5c0f\u503c\u6700\u5927\u60c5\u51b5\u662f $0$\uff0c\u6240\u4ee5\u79fb\u52a8\u540e\u7684\u7b2c $x$ \u79cd\u57fa\u56e0\u7684\u524d\u7f00\u548c\u6700\u5c0f\u503c\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e $-1$\uff0c\u4e0d\u53ef\u80fd\u5b8c\u7f8e\u5339\u914d\u3002\n\n  \u4fee\u6539 $Low_x$ \u4e4b\u524d\uff0c\u5bf9\u4e8e\u539f\u672c $Low_x = 0$ \u7684\u60c5\u51b5\uff0c\u5931\u53bb\u4e86\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d\uff0c\u6240\u4ee5\u8fd9\u4e00\u8f6e\u7684\u6700\u591a\u5339\u914d\u6570\u91cf\u662f $Tmp - 1$\u3002\n\n- \u8fd9\u4e2a\u57fa\u56e0\u662f $ex$\n\n  \u8fd9\u662f\u4e00\u4e2a\u53f3\u62ec\u53f7\uff0c\u5b83\u5728\u5de6\u7aef\u65f6\u7ed9\u6240\u6709\u524d\u7f00\u548c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u52a0\u6570 $-1$\uff0c\u6240\u4ee5\u53bb\u6389\u5b83\u540e\uff0c\u6240\u6709\u4f4d\u7f6e\u4e0a\uff0c\u7f16\u53f7 $x$ \u7684\u57fa\u56e0\u6743\u503c\u524d\u7f00\u548c\u90fd\u589e\u52a0 $1$\uff0c$Low_x$ \u4e5f\u5fc5\u7136\u589e\u52a0 $1$\u3002\n\n  \u7ed9 $Low_x$ \u52a0 $1$ \u540e\uff0c\u5c31\u6709\u53ef\u80fd\u51fa\u73b0 $Low_x = 0$ \u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u51fa\u73b0\u4e00\u4e2a\u65b0\u7684\u5b8c\u7f8e\u5339\u914d $x$\uff08\u5728\u6b64\u4e4b\u524d $Low_x = -1$\uff0c\u4e0d\u662f\u5b8c\u7f8e\u5339\u914d\uff09\uff0c\u53ca\u65f6\u66f4\u65b0 $Tmp$ \u4e3a $Tmp + 1$\u3002\n\n\u679a\u4e3e\u65ad\u70b9\u540c\u65f6\u7edf\u8ba1 $Tmp$\uff0c\u5e76\u4e14\u5bf9\u4e8e\u6bcf\u4e2a\u65ad\u70b9\uff0c\u5c1d\u8bd5\u66f4\u65b0\u6240\u6709\u65ad\u70b9\u4e2d\u6700\u4f18\u7684\u5339\u914d\u6570\u91cf $Ans$ \u548c\u65ad\u70b9 $Pos$\u3002\u56e0\u4e3a\u5728 $Tmp$ \u76f8\u540c\u65f6\uff0c\u4f18\u5148\u8f93\u51fa\u5c0f\u7684\u65ad\u70b9\uff0c\u6240\u4ee5\u53ea\u6709 $Tmp > Ans$ \u65f6\u66f4\u65b0\u4e24\u4e2a\u53d8\u91cf\uff0c\u6700\u540e\u76f4\u63a5\u8f93\u51fa $Pos$ \u548c $Ans$ \u5373\u53ef\u3002\n\n\u56e0\u4e3a\u53ea\u662f\u7b80\u5355\u5730\u626b\u4e0a\u5e38\u6570\u6b21\u5e8f\u5217\uff0c\u6240\u4ee5\u663e\u7136\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n)$\u3002\n\n## \u6ce8\u610f\n\n- \u5728 $sx$ \u60c5\u51b5\uff0c\u5148\u5224\u65ad $Low_x = 0$\uff0c\u518d\u4fee\u6539 $Low_x$\uff1b\u5728 $ex$ \u7684\u60c5\u51b5\uff0c\u5148\u66f4\u65b0 $Low_x$\uff0c\u518d\u5224\u65ad $Low_x = 0$\u3002\n\n- \u679a\u4e3e\u65ad\u70b9\u65f6\u53ea\u8003\u8651\u5de6\u7aef\u70b9\uff0c\u6240\u4ee5\u8fd9\u79cd\u7b97\u6cd5\u4e0d\u7528\u590d\u5236\u4e00\u904d\u539f\u5e8f\u5217\u63a5\u5728\u540e\u9762\uff0c\u76f4\u63a5\u5728\u539f\u5e8f\u5217\u4e2d\u627e\u5de6\u7aef\u70b9\u5373\u53ef\u3002\n\n- \u4ee3\u7801\u4e2d\u4e3a\u4e86\u65b9\u4fbf\u8bbe\u8ba1\u7a0b\u5e8f\uff0c\u679a\u4e3e\u7684\u65ad\u70b9 $i$ \u7684\u610f\u4e49\u548c $p$ \u4e0d\u540c\u3002$i$ \u7684\u610f\u4e49\u662f\u5728\u7b2c $i$ \u4e2a\u57fa\u56e0\u540e\u9762\u65ad\uff0c$p$ \u7684\u610f\u4e49\u662f\u5728\u7b2c $p$ \u4e2a\u57fa\u56e0\u524d\u9762\u65ad\u3002\n\n## \u4ee3\u7801\n\n\u4e00\u4e9b\u7ec6\u8282\u90fd\u5728\u4ee3\u7801\u6ce8\u91ca\u4e2d\uff0c\u5e94\u8be5\u4f1a\u5f88\u597d\u61c2\u5427\u3002\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#define Wild_Donkey 0\nusing namespace std;\nunsigned n, Cnt(0), Ans(0), Tmp(0), List[1000005], Pos(0);\nchar Character;\nint Sum[1000005], Low[1000005];\nstruct DNA {\n  unsigned Number;  // \u7f16\u53f7 \n  int SE;           // s or e, \u5373\u6743\u503c \n}a[1000005];\nint main() {\n  scanf(\"%u\", &n);\n  for (register unsigned i(1); i <= n; ++i) { // \u8bfb\u5165 \n    Character = getchar();\n    while (Character != 's' && Character != 'e') {\n      Character = getchar();\n    }\n    if(Character == 's') {                    // \u4e0a\u62ec\u53f7 \n      a[i].SE = 1;\n    }\n    else {                                    // \u4e0b\u62ec\u53f7 \n      a[i].SE = -1;\n    }\n    scanf(\"%u\", &a[i].Number);\n    if(!Low[a[i].Number]) {                   // \u8fd9\u4e2a\u7f16\u53f7\u7684\u57fa\u56e0\u9996\u6b21\u51fa\u73b0\n      Low[a[i].Number] = 1;                   // \u6253\u6807\u8bb0\u8868\u793a\u8fd9\u4e2a\u7f16\u53f7\u7684\u57fa\u56e0\u51fa\u73b0\u8fc7 \n      List[++Cnt] = a[i].Number;              // \u8bb0\u5f55\u5728\u57fa\u56e0\u5217\u8868\u4e2d \n    }\n  }\n  Pos = 1;\n  for (register unsigned i(1); i <= n; ++i) {\n    Sum[a[i].Number] += a[i].SE;              // \u7d2f\u8ba1\u603b\u548c \n    Low[a[i].Number] = min(Low[a[i].Number], Sum[a[i].Number]); // \u66f4\u65b0\u524d\u7f00\u548c\u5386\u53f2\u6700\u5c0f\u503c \n  }\n  for (register unsigned i(1); i <= Cnt; ++i) {// \u771f\u6838\u751f\u7269  (\u679a\u4e3e\u57fa\u56e0\u7f16\u53f7)\n    if(Low[List[i]] == 0 && Sum[List[i]] == 0) {// \u540c\u65f6\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6 \n      ++Tmp;\n    }\n  }\n  Pos = 1, Ans = Tmp;                         // \u5bf9\u4e8e\u771f\u6838\u751f\u7269\u7684\u8fd0\u884c\u7ed3\u679c\n  for (register unsigned i(1); i < n; ++i) {  // \u679a\u4e3e\u65ad\u70b9, \u8fd9\u91cc\u662f\u4ece i \u540e\u9762\u5207\u65ad, \u6240\u4ee5\u539f\u5de6\u7aef\u57fa\u56e0\u662f a[i] \n    if(!(Sum[a[i].Number] ^ 0)) {             // \u4f18\u5316\u5e38\u6570, \u7b49\u4ef7\u4e8e if(Sum[a[i].Number] == 0) \n      if(a[i].SE ^ (-1)) {                    // \u4f18\u5316\u540c\u4e0a, \u8fd9\u662f sx \u7684\u60c5\u51b5 \n        if(!(Low[a[i].Number] ^ 0)) {         // \u539f\u672c\u5b8c\u7f8e, \u4fee\u6539\u540e\u4e0d\u5b8c\u7f8e\u4e86 \n          --Tmp;\n        }\n        --Low[a[i].Number];                   // \u6700\u540e\u4fee\u6539 Low[x] \n      }\n      else {                                  // \u8fd9\u662f ex \u7684\u60c5\u51b5 \n        ++Low[a[i].Number];                   // \u5148\u4fee\u6539 Low[x] \n        if(!(Low[a[i].Number] ^ 0)) {         // \u539f\u672c\u4e0d\u662f\u5b8c\u7f8e\u5339\u914d, \u4f46\u662f\u73b0\u5728\u5b8c\u7f8e\u4e86 \n          ++Tmp;\n        }\n      }\n    }\n    if(Tmp > Ans) {                           // \u65b0\u65ad\u70b9\u4e25\u683c\u4f18\u4e8e\u539f\u5148\u624d\u66f4\u65b0 \n      Pos = i + 1;\n      Ans = Tmp;\n    }\n  }\n  printf(\"%u %u\", Pos, Ans);\n  return Wild_Donkey;\n}\n```\n\n## \u9e23\u8c22 & \u540e\u8bb0\n\n\u611f\u8c22 [@\u5df4\u83f2\u7279](https://www.luogu.com.cn/user/171851) \u8e29\u4e86\u6211\u7684\u8003\u573a\u4ee3\u7801\uff0c\u4f46\u662f\u5e78\u597d\u6211\u7528\u4e00\u53d1\u65b0\u7684\u63d0\u4ea4\u5b88\u4f4f\u4e86\u6700\u4f18\u89e3\uff08\u5f53\u7136\u8fd9\u79cd\u9898\u7684\u6700\u4f18\u89e3\u6ca1\u4ec0\u4e48\u7528\uff0c\u662f\u4e2a\u4eba\u968f\u4fbf\u5361\u5361\u5e38\u5c31\u80fd\u6bd4\u6211\u5feb\uff09\u3002\u7b97\u6cd5\u7ade\u8d5b\u4e2d\u4eba\u4eec\u4ee5 A \u9898\u4e3a\u76ee\u7684\uff0c\u5f88\u5c11\u6709\u4eba\u6709\u80fd\u5feb\u5219\u5feb\u80fd\u7701\u5219\u7701\u7684\u5de5\u7a0b\u7cbe\u795e\u3002\u4f46\u662f\u8ffd\u6c42\u5b8c\u7f8e\u7684\u7cbe\u795e\u5374\u8ba9\u6211\u53d7\u76ca\u532a\u6d45\uff0c\u5e0c\u671b OI \u80fd\u7ed9\u6bcf\u4e2a\u4eba\u7559\u4e0b\u53d7\u76ca\u7ec8\u8eab\u7684\u8d22\u5bcc\u800c\u4e0d\u4ec5\u662f\u540d\u6821\u7684\u57ab\u811a\u77f3\u3002",
        "postTime": 1618682179,
        "uid": 143771,
        "name": "\u6bd4\u5229\u2642\u6d77\u7075\u987f",
        "ccfLevel": 8,
        "title": "P6254 [ICPC2019 WF]Circular DNA"
    },
    {
        "content": "### \u9898\u76ee:\n\n\u4e00\u4e2a\u957f\u5ea6\u4e3a\u00a0n\u00a0\u7684\u73af\u5f62 DNA \u5e8f\u5217\uff0c\u4ee5\u987a\u65f6\u9488\u987a\u5e8f\u7ed9\u51fa\uff0c\u5176\u4e2d\u6bcf\u4e2a\u57fa\u56e0\u6709\u7c7b\u578b\u548c\u7f16\u53f7\u4e24\u4e2a\u5c5e\u6027\uff0c\u7c7b\u578b\u662f\u00a0s\uff08\u5934\uff09\u6216\u00a0e\uff08\u5c3e\uff09\u4e2d\u7684\u4e00\u79cd\uff0c\u800c\u7f16\u53f7\u662f\u00a01\u00a0\u5230\u00a0106\u200b\u00a0\u4e2d\u7684\u6574\u6570\u3002 \u4f60\u9700\u8981\u5728\u67d0\u4e2a\u5730\u65b9\u5207\u65ad\uff0c\u6309\u7167\u987a\u65f6\u9488\u987a\u5e8f\u62c9\u6210\u94fe\u540e\uff0c\u6700\u5927\u5316\u80fd\u591f\u5b8c\u7f8e\u5339\u914d\u7684\u57fa\u56e0\u7f16\u53f7\u4e2a\u6570\u3002\n\n\u4e00\u4e2a\u57fa\u56e0\u7f16\u53f7\u00a0i\u00a0\u662f\u80fd\u591f\u5b8c\u7f8e\u5339\u914d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u5728\u94fe\u4e2d\u5bf9\u5e94\u7684\u6240\u6709\u57fa\u56e0\uff0c\u5c06\u00a0s\u00a0\u770b\u4f5c\u5de6\u62ec\u53f7\uff0ce\u00a0\u770b\u4f5c\u53f3\u62ec\u53f7\uff0c\u53ef\u4ee5\u5339\u914d\u6210\u975e\u7a7a\u7684\u5408\u6cd5\u62ec\u53f7\u5e8f\u5217\u3002\n\n\u5982\u679c\u6709\u591a\u4e2a\u4f4d\u7f6e\u6ee1\u8db3\u6700\u5927\u5316\u7684\u6761\u4ef6\uff0c\u8f93\u51fa\u6700\u5c0f\u7684\u4f4d\u7f6e\u3002\n\n\u8f93\u5165\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570\u00a0n\u00a0(1\u2264n\u2264106)\uff0c\u8868\u793aDNA\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u7b2c\u4e8c\u884c\u662fDNA\u5e8f\u5217\uff0c\u5305\u542b\u00a0nn\u00a0\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u6709\u4e00\u4e2a\u5b57\u7b26\u00a0c\u2208\\{s,e\\}\uff08s\u00a0\u8868\u793a\u5207\u5272\u65f6\u4ee5\u8fd9\u4e2a\u5143\u7d20\u4e3a\u5f00\u59cb\u8fd8\u662f\u7ed3\u675f\uff0cs\u00a0\u8868\u793a\u5f00\u59cb,e\u00a0\u8868\u793a\u7ed3\u675f\uff09\u548c\u4e00\u4e2a\u6574\u6570\u00a0i (1 \\le i \\le 10^6) \u8868\u793a\u57fa\u56e0\u7c7b\u578b\u3002\u53ef\u4ee5\u901a\u8fc7\u5728\u4efb\u610f\u4f4d\u7f6e\u5207\u5272\uff0c\u4ece\u73af\u72b6DNA\u83b7\u5f97\u7ed9\u5b9a\u7684DNA\u5e8f\u5217\u3002\n\n\u8f93\u51fa\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570\u00a0p\u00a0\u548c\u00a0m ,\u00a0p\u662f\u5207\u5272\u4f4d\u7f6e\uff0c\u53ef\u6700\u5927\u5316\u80fd\u591f\u5b8c\u7f8e\u5339\u914d\u7684\u57fa\u56e0\u7f16\u53f7\u4e2a\u6570\uff0cm\u00a0\u662f\u80fd\u591f\u5b8c\u7f8e\u5339\u914d\u57fa\u56e0\u7c7b\u578b\u7684\u6700\u5927\u6570\u91cf\u5982\u679c\u591a\u4e2a\u5207\u5272\u4f4d\u7f6e\u4ea7\u751f\u76f8\u540c\u7684\u6700\u5927\u503c\u00a0m\uff0c\u8f93\u51fa\u6700\u5c0f\u7684\u00a0p\u3002\n\n### \u9898\u76ee\u5927\u610f:\u00a0 \n\u5c06\u73af\u72b6\u5e8f\u5217\u62bd\u51fa\u4e00\u6761\u957f\u5ea6\u4e3an\u7684\u94fe,\u4f7f\u5176\u5b8c\u7f8e\u5339\u914d\u7684\u4e2a\u6570\u5c3d\u53ef\u80fd\u591a\n\n\u9996\u5148\u5bf9\u6709\u73af\u72b6\u7684\u95ee\u9898\u4e00\u822c\u6765\u8bf4\u5c31\u662f\u5c06\u957f\u5ea6\u4e3an\u7684\u73af\u53d8\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a2n,3n\u7684\u4e00\u6761\u94fe,\u7136\u540e\u6c42\u89e3\n\n\u6216\u8005\u5411\u7c7b\u4f3c\u4e8e\u8fd9\u9053\u9898\u7684\n\n\u9996\u5148\u7b97\u51fa\u67651~n\u8fd9\u6761\u94fe\u7684\u7b26\u5408\u9898\u610f\u7684\u7b54\u6848,\u8fd9\u4e2a\u662f\u53ef\u4ee5O(n)\u6c42\u89e3\u7684,\u7136\u540e\u6bcf\u6b21O(1)\u8f6c\u79fb\u7b97\u51fa\u6765\u5bf9\u4e8e\u6bcf\u4e2ai~(i+n)%n\u7684\u7ed3\u679c\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6bcf\u4e00\u4e2ae\u548cs\u4e4b\u95f4\u7684\u7ed1\u5b9a\u5173\u7cfb,0\u8868\u793a\u6ca1\u6709\u7ed1\u5b9a,\u975e0\u8868\u793a\u7ed1\u5b9a\u7684\u90a3\u4e2a\u4f4d\u7f6e\u5750\u6807,\n\n\u5bf9\u4e8e\u4e00\u4e2as\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u653e\u5230\u5bf9\u5e94\u7684set\u4e2d,\u9047\u5230\u4e00\u4e2a\u5bf9\u5e94\u7684e\u6211\u4eec\u53ef\u4ee5\u53d6\u51fa\u5bf9\u5e94\u7684set\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u76f8\u4e92\u7ed1\u5b9a\n\n\u5f53\u7136\u6211\u662f\u63d0\u524d\u5224\u65ad\u4e86\u4e00\u4e0b\u5bf9\u4e8e\u67d0\u4e9b\u5143\u7d20\u662f\u6709\u53ef\u80fd\u5339\u914d\u6210\u529f\u7684\u548c\u6ca1\u6709\u53ef\u80fd\u5339\u914d\u6210\u529f\u7684,\n\n\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2as,\u8981\u653e\u5230\u6700\u540e\u80af\u5b9a\u53ea\u6709\u4e24\u79cd\u60c5\u51b5,\u4e00\u79cd\u662f\u672c\u8eab\u7ed1\u5b9a\u4e86\u4e00\u4e2ae,\u4e00\u79cd\u662f\u6ca1\u6709\u7ed1\u5b9ae,\n\n\u7136\u540e\u5982\u679c\u7ed1\u5b9a\u7684\u90a3\u4e2a\u653e\u5230\u6700\u540e\u4e00\u5b9a\u662f\u6210\u4e3a\u4e00\u4e2a\u672a\u7ed1\u5b9ae\u7684\u5b58\u5728,\u56e0\u6b64\u5982\u679c\u4e4b\u524d\u7ed1\u5b9a\u7684\u90a3\u4e2ae\u5bfb\u627e\u4e00\u4e9b\u5bf9\u5e94\u7684set\u4e2d\u7684\u9996\u5143\u7d20\u662f\u5426\u6ee1\u8db3\u60c5\u51b5\u5982\u679c\u6709\u7684\u8bdd,\u8fd9\u90e8\u5bf9\u7b54\u6848\u7684\u64cd\u4f5c\u662f\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u7684\n\n\u5bf9\u5e94e\u7684\u8bdd,\u672c\u8eab\u4e00\u5b9a\u4e0d\u662f\u4e00\u4e2a\u7ed1\u5b9a\u7684\u5b58\u5728,\u56e0\u6b64\u5411\u540e\u65b9\u4e00\u5b9a\u4f1a\u9047\u5230\u548c\u5728set\u91cc\u9762\u672a\u7ed1\u5b9a\u5bf9\u5e94e\u7684s\u7ed1\u5b9a,\u6216\u8005\u4e0d\u5f71\u54cd\u4efb\u4f55\u5b58\u5728\n```cpp\n//\u4e0b\u5217\u4ee3\u7801\u82e5\u4e3a\u58f0\u660e\u7684\u8bdd\u51fa\u73b0s\u548ce\u8868\u793a\u7684\u662f\u5bf9\u5e94\u503c\u76f8\u540c\u6539\u7684s\u548ce\n\n#include <bits/stdc++.h>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <ext/pb_ds/assoc_container.hpp>\n\n#define eps 1e-9\n#define endl '\\n'\n#define gcd __gcd\n#define pi acos(-1)\n#define ll long long\n#define LL long long\n#define IDX(x) x - 'A'\n#define idx(x) x - 'a'\n#define idz(x) x - '0'\n#define ld long double\n#define lowebit(x) x&(-x)\n#define rint register int\n#define Len(x) (int)(x).size()\n#define all(s) (s).begin(), (s).end()\nusing namespace std;\ninline int read()\n{\n\tregister int x = 0, f = 1, ch = getchar();\n\twhile( !isdigit(ch) ){if(ch == '-') f = -1; ch = getchar();}\n\twhile( isdigit(ch) ){x = x * 10 + ch - '0'; ch = getchar();}\n\treturn x * f;\n}\nset <int> a[3000005]; // a[i]\u8868\u793a\u7f16\u53f7i\u4e2d\u672a\u80fd\u5b8c\u6210\u914d\u5bf9\u7684s(\u5de6\u62ec\u53f7)\u7684\u5b58\u5728\nint p[3000005]; // p\u4e2d\u8bb0\u5f55\u4efb\u610f\u4e00\u4e2a\u6570\u5bf9\u5e94\u88ab\u7ed1\u5b9a\u7684\u53e6\u4e00\u4e2a\u6570\u7684\u4f4d\u7f6e,\u672a\u88ab\u7ed1\u5b9a\u503c\u672a0\npair<int, bool> //c[3000005]; c[i]\u4e2d\u8bb0\u5f55\u7b2ci\u4e2a\u8bfb\u53d6\u503c\u7684\u4fe1\u606f\nbool kt[3000005]; //\u8bb0\u5f55i\u662f\u5426\u53ef\u80fd\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\u7684\u60c5\u51b5\nset<int> k[3000005]; // \u8ba1\u7b97\u6700\u5f00\u59cb\u7684\u5e8f\u5217\u7b54\u6848\nint ff[3000005]; // \u8bb0\u5f55e\u548cs\u662f\u5426\u76f8\u7b49\nint32_t main()\n{\n\tios_base::sync_with_stdio(false);\n    cin.tie(0); cout.tie(0);\n    clock_t c1ockck = clock();\n    int n; cin >> n;\n    int ans = 0, res = 1;// \u8bb0\u5f55\u6700\u540e\u7b54\u6848\n    int mmm = -1;\n    for(int i = 1 ; i <= n ; i ++)\n    {\n        string s; cin >> s;\n        rint t = 0;\n        for(int j = 1 ; j < Len(s) ; j ++) t = t * 10 + idz(s[j]); // \u8bfb\u5165\u4fe1\u606f\n        kt[t] = true; // \u5728\u8fd9\u4e2a\u65f6\u5019\u8868\u793at\u662f\u51fa\u73b0\u8fc7\u7684\u503c\n        mmm = max(t, mmm); // \u6c42\u4e00\u4e0b\u7ed9\u51fa\u7684\u6700\u5927\u503c\n        if(s[0] == 'e')\n        {   \n            ff[t] --; // \u4f1a\u62b5\u6d88\u4e00\u4e2as,\u53ef\u4ee5\u662f\u672a\u51fa\u73b0\u7684s,\u503c\u53ef\u4ee5\u4e3a\u8d1f\n            if(Len(a[t])) // \u5982\u679c\u96c6\u5408a[t]\u4e2d\u6709\u5143\u7d20(\u8868\u660e\u6709\u4e4b\u524d\u914d\u5bf9\u7684s\u51fa\u73b0)\n            {\n                auto x = *(--a[t].end()); // \u63d0\u53d6\u6700\u540e\u4e00\u4e2a\u672a\u51fa\u73b0\u7684\u4fe1\u606f\n                p[i] = x;\n                p[x] = i; // \u8bb0\u5f55\u5bf9\u5e94\u7684\u7ed1\u5b9a\u4fe1\u606f\n                a[t].erase(x); // \u5220\u9664\u672a\u7ed1\u5b9a\u7684s\u7684\u4fe1\u606f\n                \n            }\n            else\n            {\n                k[t].insert(i); /\n            }\n        }\n        else\n        {\n            ff[t] ++; // \u4f1a\u62b5\u6d88\u4e00\u4e2ae,\u53ef\u4ee5\u662f\u672a\u51fa\u73b0\u7684e,\u8fd9\u4e2a\u6570\u7ec4\u6709\u7528\u7684\u4fe1\u606f\u53ea\u67090\u7684\u503c\n            a[t].insert(i); //\u65b0\u52a0\u5165\u7684s\u4e00\u5b9a\u662f\u672a\u914d\u5bf9\u7684s\n        }\n        c[i] = make_pair(t, s[0] != 'e'); // \u8bb0\u5f55\u503c\u7684\u4fe1\u606f\n    }\n    for(int i = 1 ; i <= mmm ; i ++)\n    {\n        if(kt[i] && !Len(a[i]) && !Len(k[i])) ans ++; // \u8bb0\u5f551~n\u5b58\u5728\u7684\u7b54\u6848\n        if(!ff[i] && kt[i]) kt[i] = false; // \u5c06\u53ef\u4ee5\u8fbe\u6210\u7684\u4fe1\u606f\u6807\u8bb0\u672afalse,\u4e0d\u80fd\u8fbe\u6210\u7684\u6807\u8bb0\u4e3atrue\n        else kt[i] = true;\n    }\n    int t_ans = ans; //\u8f6c\u79fb\u6700\u591a\u53ea\u4f1a\u4eceans\u6539\u53d8\u4e00\u4e2a\n    for(int i = 1 ; i <= n ; i ++) // i\u8868\u793a\u7b2ci\u4e2a\u662f\u94fe\u7684\u672b\u5c3e,i+1\u4e3a\u94fe\u9996 \n    {\n        if(c[i].second == 0)  // \u5982\u679c\u5f53\u524d\u662fe\n        {\n            if(Len(a[c[i].first])) // \u5e76\u4e14\u5b58\u5728\u672a\u5339\u914d\u7684s, \u56e0\u4e3a\u5f53\u524d\u7684e\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20,\u56e0\u6b64\u5bf9\u4e8e\u5b58\u5728\u7684s\u4e00\u5b9a\u4f1a\u5339\u914d\u4e0a\n            {\n                auto x = *(--a[c[i].first].end()); // \u4e3a\u4e86\u65b9\u4fbf\u53d6\u51fa\u6765\u7684\u662f\u6700\u540e\u4e00\u4e2a\u653e\u8fdb\u53bb\u7684s\n                 p[x] = i + n; \n                p[i + n] = x; //\u6b64\u65f6\u7684s\u5bf9\u5e94\u7684\u6070\u597d\u662f\u76f8\u5f53\u4e8e\u591a\u4e86\u4e00\u5708\u7684i,\u56e0\u6b64\u5bf9\u5e94\u65b9\u5f0f\u672ai+n\n                a[c[i].first].erase(x); // \u5339\u914d\u6210\u529f\u7684\u5220\u9664\n                if(!Len(a[c[i].first]) && !kt[c[i].first])t_ans ++; // \u51d1\u6210\u65b0\u7684\u5b8c\u7f8e\u5339\u914d\u7b54\u6848+1\n            }\n        }\n        else\n        {\n            if(p[i]) // \u5982\u679c\u88ab\u914d\u5bf9\u7684\u662f\n            {\n                p[p[i]] = 0; // \u5bf9\u5e94\u7684e\u4f1a\u88ab\u89e3\u9664\u914d\u5bf9\u5173\u7cfb\n                a[c[i].first].insert(i + n); // \u4e00\u5b9a\u662f\u672a\u88ab\u914d\u5bf9\u7684\u5b58\u5728\n                auto x = *a[c[i].first].begin();\n                if(p[i] > x && Len(a[c[i].first])) // \u4e3a\u4e86\u65b9\u4fbf\u53d6\u51fa\u6765\u5bf9\u5e94\u7684\u6700\u5c0f\u7684\u503c\u5224\u65ad\u5c31ok\n                {\n                    p[p[i]] = x;\n                    p[x] = p[i];\n                    a[c[i].first].erase(x); // \u6210\u7acb\u65b0\u7684\u7ed1\u5b9a\u5173\u7cfb,\n                }else\n                {\n                    if(!kt[c[i].first] && Len(a[c[i].first]) == 1) t_ans --; // \u4e0a\u9762\u7684\u60c5\u51b5\u4e00\u5b9a\u4e0d\u4f1a\u8fbe\u6210\u4e00\u4e2a\u65b0\u7684\u5b8c\u7f8e\u5339\u914d\u548c\u63a5\u89e6\u5b8c\u7f8e\u5339\u914d\u7684\u72b6\u6001,\u53ea\u6709\u8fd9\u79cd\u60c5\u51b5\u624d\u80fd\u89e3\u9664\u5b8c\u7f8e\u5339\u914d\u7684\u72b6\u51b5\n                }\n            }\n        }\n        if(t_ans > ans) // \u66f4\u65b0\u7b54\u6848\n        {\n            res = i + 1;\n            ans = t_ans;\n        }\n       //cout << i + 1<< \" : T_ans = \" << t_ans << \" ans = \" << ans << \" res = \" << res << endl;\n    }\n    cout << res << \" \" << ans << endl;\n    cerr << endl << \"Time:\" << clock() - c1ockck << \"ms\" <<endl;\n    /**srO**/return 0;/**Orz**/\n}\n```",
        "postTime": 1600172994,
        "uid": 132994,
        "name": "lzx1999",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P6254 \u3010[ICPC2019 WF]Circular DNA\u3011"
    },
    {
        "content": "ps\uff1a\u505a\u6cd5\u53ef\u80fd\u6709\u70b9\u590d\u6742\u5e76\u4e14\u7ec6\u8282\u6bd4\u8f83\u591a\uff0c\u4f46\u662f\u601d\u8def\u603b\u5f52\u662f\u6b63\u786e\u7684\u3010\n\n\u56e0\u4e3a\u6bcf\u4e2ai\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\uff0c\u6240\u4ee5\u80af\u5b9a\u662f\u5206\u522b\u63d0\u51fa\u6765\u505a\u3002\n\n\u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\u8fd9\u8ddf\u62ec\u53f7\u5339\u914d\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2a\u73af\u5f62\u3002\n\n\u4e00\u4e2a\u65ad\u5f00\u540e\u7684\u94fe\u5408\u6cd5\uff0c\u5f53\u4e14\u4ec5\u5f53**\u6bcf\u4e2a\u62ec\u53f7\u7684\u5b58\u5728\u90fd\u5408\u6cd5**\uff0c\u6240\u4ee5\u5f00\u5934\u4e00\u5b9a\u662f\u4e00\u4e2asi\uff0c\u7ed3\u5c3e\u4e00\u5b9a\u662fei\uff0c\u671f\u95f4\u4e0d\u4f1a\u51fa\u73b0cnt[si]<cnt[ei]\u7684\u60c5\u51b5\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u590d\u5236\u4e00\u904d\u5e8f\u5217\u6765\u65ad\u73af\u3002\u4ee5\u524d\u62ec\u53f7\u5339\u914d\u7684\u65f6\u5019\u7528\u5230\u7684\u662f\u6808\uff0c\u8fd9\u91cc\u56e0\u4e3a\u590d\u5236\u4e86\u4e00\u904d\u6240\u4ee5\u6709\u957f\u5ea6\u9650\u5236\uff0c\u6240\u4ee5\u7528\u53cc\u7aef\u961f\u5217\u6765\u7ef4\u62a4\u3002\u5982\u679c\u5f00\u5934\u7684\u8d85\u51fa\u4e86\u5f53\u524d\u7ed3\u5c3e\u5bf9\u5e94\u7684\u533a\u95f4\u957f\u5c31head++\uff0c\u5982\u679c\u5f53\u524d\u662fe\u5e76\u4e14\u961f\u5217\u91cc\u6709\u6570\u5c31tail--\u3002\u5982\u679c\u5f53\u524d\u662fe\u800c\u4e14\u5f53\u524d\u957f\u5ea6\u6709\u4e00\u4e2a\u5468\u671f\u5e76\u4e14\u64cd\u4f5c\u8fc7\u540e\u961f\u5217\u7a7a\u4e86\uff0c\u5219\u4ee5\u5f53\u524de\u7ed3\u5c3e\u7684\u5c31\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u5e8f\u5217\u3002\u56de\u5230\u73af\u4e0a\u7684\u8bdd\uff0c\u5728\u5f53\u524de\u5230\u4e0b\u4e00\u4e2as/e\u4e4b\u95f4\u65ad\u73af\u90fd\u662f\u5408\u6cd5\u7684\u3002\n\n\u7528\u6811\u72b6\u6570\u7ec4\u6807\u8bb0\u5bf9\u4e8e\u6bcf\u4e2ai\u7684\u5408\u6cd5\u533a\u95f4\uff0c\u6700\u540e\u67e5\u8be2\u524d\u7f00\u548c\u770b\u54ea\u4e2a\u70b9\u88ab\u8986\u76d6\u7684\u6b21\u6570\u6700\u591a\u5e76\u4e14\u6700\u9760\u524d\u5373\u53ef\u3002\u56e0\u4e3a\u500d\u957f\u4e86\u5e8f\u5217\u6240\u4ee5\u603b\u957f\u8981\u5f00\u52303e6\u3010\u5f006e6\u662f\u56e0\u4e3a\u6015\u70b8\u2026\u2026\u3011\u3002\u8be6\u7ec6\u89e3\u91ca\u770b\u4ee3\u7801\u3002\n\n\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#include<cmath>\n#include<queue>\n#include<map>\n#define maxn 6000006\nusing namespace std;\ntypedef long long ll;\nconst int mx = 3e6;\nint read() {\n\tint x = 0, f = 1, ch = getchar();\n\twhile(!isdigit(ch)) {if(ch == '-') f = -1; ch = getchar();}\n\twhile(isdigit(ch)) x = (x << 1) + (x << 3) + ch - '0', ch = getchar();\n\treturn x * f;\n}\n\nint n;\nchar a[maxn][10];\nint t[maxn], sum[maxn];\nint q[maxn << 1], head, tail;//\u5f80\u6b7b\u91cc\u5f00\u5927\u4e86\u2026\u2026\nvoid add(int x, int d) {for(; x <= mx; x += (x & -x)) t[x] += d;}\nint ask(int x) {int res = 0; for(; x; x -= (x & -x)) res += t[x]; return res;}\n\nstruct node {int num, p;};\nvector<node> v[maxn];\nsigned main() {\n\tn = read();\n\tfor(int i = 1; i <= n; i++) scanf(\"%s\", a[i]);\n\tfor(int i = 1; i <= n; i++) {\n\t\tregister int x = 0;\n\t\tfor(int j = 1; j < strlen(a[i]); j++) x = (x << 1) + (x << 3) + a[i][j] - '0';\n\t\tv[x].push_back({a[i][0] == 's'? 1 : -1, i});\n\t}//v[i]\u653e\u7684\u662fsi\u548cei\u3002\n\t\n\tfor(int i = 1; i <= mx; i++) {\n\t\tregister int lim = v[i].size(), tmp = 0, len; len = lim;\n\t\tif(!lim) continue;//\u6ca1\u6709se\uff0c\u8df3\u8fc7\n\t\tfor(int j = 0; j < lim; j++) tmp += v[i][j].num;\n\t\tif(tmp != 0) continue;//se\u6570\u91cf\u4e0d\u7b49\uff0c\u8df3\u8fc7\n\t\tfor(int j = 0; j < lim; j++) v[i].push_back({v[i][j].num, v[i][j].p + n});//\u500d\u957f\n\t\tv[i].push_back({v[i][0].num, v[i][0].num + n * 2});//\u52a0\u4e00\u4e2a\u5c3e\n\t\t\n\t\tlim = v[i].size(); head = 1, tail = 0;\n\t\tfor(int j = 0; j < lim - 1; j++) {\n\t\t\twhile(head <= tail && q[head] < j - len + 1) head++;\n\t\t\tif(head > tail && v[i][j].num < 0) continue;//e\u6bd4s\u591a\u4e86\n\t\t\tif(v[i][j].num < 0) tail--; else q[++tail] = j;//\u6b63\u5e38\u64cd\u4f5c\n\t\t\t\n\t\t\tif(head > tail && j >= len - 1 && v[i][j - len + 1].num > 0) \n\t\t\t\tadd(v[i][j].p, 1), add(v[i][j + 1].p, -1);//\u8fd9\u4e2a\u533a\u95f4\u5185\u65ad\u73af\u5bf9\u8fd9\u4e2a\u5e8f\u5217\u90fd\u662f\u5408\u6cd5\u7684\n\t\t}\n\t}\n\t\n\tregister int ans_p = 0, ans_x = n * 2;\n\tfor(int i = 1; i <= n * 2 + 1; i++) sum[i] = ask(i), ans_p = max(ans_p, sum[i]);\n\tfor(int i = 1; i <= n * 2 + 1; i++) if(sum[i] == ans_p) ans_x = min(ans_x, (i % n) + 1);\n\tprintf(\"%d %d\\n\", ans_x, ans_p);\n\treturn 0;\n}\n```\n",
        "postTime": 1599819399,
        "uid": 116824,
        "name": "YingLi",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6254 \u3010[ICPC2019 WF]Circular DNA\u3011"
    },
    {
        "content": "\n\u8fd9\u9053\u9898\u633a\u6709\u610f\u601d\u7684\uff0c\u800c\u4e14\u81ea\u5df1\u641e\u4e86\u4e00\u4e2a\u548c\u5927\u591a\u6570\u9898\u89e3\u4e0d\u4e00\u6837\u7684\u89e3\u6cd5\uff0c\u4e0d\u7528\u8bc1\u660e\u90a3\u4e2a\u5947\u602a\u7684\u7ed3\u8bba\u3002\n\n\u9996\u5148\u6211\u4eec\u679a\u4e3e\u65ad\u73af\u4e3a\u94fe\u7684\u5730\u65b9$i$\u3002\u5bf9\u4e8e\u4ece$i-1$\u5230$i$\uff0c\u76f8\u5f53\u4e8e\u53ea\u628a\u5143\u7d20$a_i$\u632a\u5230\u4e86\u5e8f\u5217\u6700\u540e\uff0c\u56e0\u6b64\u6700\u591a\u53ea\u4f1a\u5f71\u54cd\u4e00\u4e2a\u57fa\u56e0\u7f16\u53f7\u6240\u5728\u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e00\u4e2a\u57fa\u56e0\u7f16\u53f7\u5355\u72ec\u8003\u8651\uff0c\u5206\u522b\u6c42\u51fa\u628a\u5f53\u524d\u6700\u524d\u9762\u7684\u62ec\u53f7\u632a\u5230\u4e86\u540e\u9762\u540e\uff0c\u8fd9\u4e2a\u62ec\u53f7\u5e8f\u5217\u662f\u5426\u662f\u5408\u6cd5\u7684\u3002\u6700\u540e\u626b\u4e00\u904d\u5c31\u80fd\u5f97\u51fa\u7b54\u6848\u3002\n\n\u5177\u4f53\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u6392\u9664\u5de6\u53f3\u62ec\u53f7\u603b\u6570\u4e0d\u76f8\u7b49\u7684\u57fa\u56e0\u7f16\u53f7\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u62ec\u53f7\u5e8f\u5217\u4e00\u5b9a\u662f\u4e0d\u5408\u6cd5\u7684\u3002\n\n\u5bf9\u4e8e\u5269\u4e0b\u7684\u5e8f\u5217\uff0c\u4ee5\u5176\u4e2d\u57fa\u56e0\u7f16\u53f7\u4e3a$x$\u7684\u5e8f\u5217\u4e3a\u4f8b\uff1a\n\n\u5224\u65ad\u62ec\u53f7\u5e8f\u5217\u662f\u5426\u5408\u6cd5\uff0c\u5c31\u662f\u8981\u4fdd\u8bc1\u4efb\u4f55\u65f6\u523b\u5de6\u62ec\u53f7\u6570\u76ee\u4e0d\u5c11\u4e8e\u53f3\u62ec\u53f7\u6570\u76ee\uff0c\u8fd9\u4e2a\u628a\u5de6\u62ec\u53f7\u770b\u62101\uff0c\u53f3\u62ec\u53f7\u770b\u6210-1\uff0c\u6c42\u4e00\u904d\u524d\u7f00\u548c$sum$\u5c31\u884c\u3002\u5982\u679c$min\\{sum_i\\} \\geqslant 0$\uff0c\u90a3\u4e48\u62ec\u53f7\u5e8f\u5217\u5c31\u5408\u6cd5\uff08\u7ecf\u8fc7\u7b2c\u4e00\u6b65\u7b5b\u9009\u5df2\u7ecf\u4fdd\u8bc1\u4e86\u5de6\u53f3\u62ec\u53f7\u6570\u76ee\u76f8\u7b49\uff09\n\n\u73b0\u5728\u8981\u5c06\u7b2c\u4e00\u4e2a\u62ec\u53f7\u632a\u5230\u6700\u540e\uff0c\u6211\u4eec\u8003\u8651\u5bf9\u4ed6\u540e\u9762\u7684$sum_i$\u7684\u5f71\u54cd\uff1a\u5982\u679c\u7b2c\u4e00\u4e2a\u62ec\u53f7\u4e3a\u5de6\u62ec\u53f7\uff0c\u90a3\u4e48\u540e\u9762\u7684$sum_i$\u90fd\u8981-1\uff1b\u5982\u679c\u7b2c\u4e00\u4e2a\u62ec\u53f7\u4e3a\u53f3\u62ec\u53f7\uff0c\u90a3\u4e48\u540e\u9762\u7684$sum_i$\u90fd\u8981+1\uff0c\u8fd9\u6837\u64cd\u4f5c\u5b8c\u540e\u5c31\u80fd\u7528\u540c\u6837\u7684\u65b9\u6cd5\u5224\u65ad\u62ec\u53f7\u5e8f\u5217\u662f\u5426\u5408\u6cd5\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u8981\u7528\u5355\u6b21$O(1)$\u6216\u8005$O(logn)$\u7684\u590d\u6742\u5ea6\u6765\u5b9e\u73b0\u4e00\u4e0b\u64cd\u4f5c\uff1a\n\n1.\u5220\u9664\u961f\u9996\u5143\u7d20\n\n2.\u5411\u961f\u5c3e\u6dfb\u52a0\u5143\u7d20\n\n3.\u961f\u5217\u4e2d\u7684\u6240\u6709\u5143\u7d20+1/-1.\n\n4.\u67e5\u627e\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u3002\n\n\u64cd\u4f5c1\u548c2\u597d\u529e\uff1b\u5148\u4e0d\u8003\u86513\u64cd\u4f5c\uff0c\u64cd\u4f5c4\u53ef\u4ee5\u7528set\u7ef4\u62a4\uff0c\u53ea\u4e0d\u8fc7\u53d6set\u9996\u5143\u7d20\u7684\u65f6\u5019\u8981\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u88ab\u5f53\u505a\u961f\u9996\u5220\u9664\uff0c\u82e5\u5220\u9664\u4e86\u5c31\u4e0d\u8981\uff0c\u76f4\u5230\u53d6\u5230\u4e00\u4e2a\u6ca1\u88ab\u5220\u9664\u7684\u6216\u8005\u5f53\u505a\u961f\u5c3e\u65b0\u6dfb\u52a0\u7684\u5143\u7d20\u3002\n\n\u73b0\u5728\u6709\u4e86\u64cd\u4f5c3\uff0c\u6211\u4eec\u53ef\u4ee5\u6362\u4e00\u4e2a\u601d\u8def\uff1a\u4fdd\u6301\u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e0d\u53d8\uff0c\u5355\u72ec\u5f00\u4e00\u4e2a\u53d8\u91cf$A$\u8bb0\u5f55\u961f\u5217\u6240\u6709\u5143\u7d20\u53d8\u5316\u4e86\u591a\u5c11\uff0c\u90a3\u4e48\u6700\u540e\u5224\u65ad\u662f\u5426\u5c0f\u4e8e0\u7684\u65f6\u5019\u53ea\u8981\u8ddf$A$\u6bd4\u8f83\u800c\u4e0d\u662f0\u5c31\u597d\u4e86\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5728\u5355\u6b21$O(logn)$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b9e\u73b0\u4e86\u4e0a\u8ff0\u64cd\u4f5c\uff1a\u5373\u52a8\u6001\u5224\u65ad\u4e00\u4e2a\u5e8f\u5217\u662f\u5426\u5408\u6cd5\u3002\n\n\u6700\u540e\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u65ad\u70b9$x$\uff0c\u8bb0$ans[x]$\u8868\u793a\u5c06$a_x$\u632a\u5230\u540e\u9762\u540e\u4ed6\u6240\u5728\u7684\u57fa\u56e0\u7f16\u53f7\u7684\u62ec\u53f7\u5e8f\u5217\u7684\u53d8\u5316\u60c5\u51b5\uff1a\u662f\u4ece\u5408\u6cd5\u53d8\u6210\u4e0d\u5408\u6cd5\uff0c\u8fd8\u662f\u4ece\u4e0d\u5408\u6cd5\u53d8\u6210\u4e86\u5408\u6cd5\uff0c\u8fd8\u662f\u6ca1\u6709\u6539\u53d8\u3002\u8fd9\u6837\u6211\u4eec\u626b\u4e00\u904d\u5c31\u80fd\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u65ad\u70b9\u5bf9\u5e94\u7684\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u4e2a\u6570\u4e86\u3002\n\n```c++\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<cctype>\n#include<vector>\n#include<queue>\n#include<set>\n#include<assert.h>\n#include<ctime>\nusing namespace std;\n#define enter puts(\"\") \n#define space putchar(' ')\n#define Mem(a, x) memset(a, x, sizeof(a))\n#define In inline\n#define forE(i, x, y) for(int i = head[x], y; ~i && (y = e[i].to); i = e[i].nxt)\ntypedef long long ll;\ntypedef double db;\nconst int INF = 0x3f3f3f3f;\nconst db eps = 1e-8;\nconst int maxn = 1e6 + 5;\nIn ll read()\n{\n\tll ans = 0;\n\tchar ch = getchar(), las = ' ';\n\twhile(!isdigit(ch)) las = ch, ch = getchar();\n\twhile(isdigit(ch)) ans = (ans << 1) + (ans << 3) + ch - '0', ch = getchar();\n\tif(las == '-') ans = -ans;\n\treturn ans;\n}\nIn void write(ll x)\n{\n\tif(x < 0) x = -x, putchar('-');\n\tif(x >= 10) write(x / 10);\n\tputchar(x % 10 + '0');\n}\n\nint n, N = 0, Max = 0, pos = 1;\nbool vis[maxn];\nstruct Node\n{\n\tint flg, id;\t\n}t[maxn];\n\nchar ss[20];\nIn void change(int x)\n{\n\tt[x].flg = (ss[0] == 's') ? 1 : -1;\n\tint tp = 0, len = strlen(ss);\n\tfor(int i = 1; i < len; ++i) tp = tp * 10 + ss[i] - '0';\n\tN = max(N, tp), vis[t[x].id = tp] = 1;\n}\n\nstruct Set\n{\n\tint val, p, New;\t\t//val\u662f\u5bf9\u5e94\u7684\u524d\u7f00\u548c\uff0cp\u8868\u793a\u7b2c\u51e0\u4e2a\u5143\u7d20\uff0cNew\u8868\u793a\u662f\u5426\u662f\u5f53\u505a\u961f\u5c3e\u65b0\u52a0\u5165\u7684 \n\tIn bool operator < (const Set& oth)const\n\t{\n\t\tif(val ^ oth.val) return val < oth.val;\n\t\tif(New ^ oth.New) return New < oth.New;\n\t\treturn p < oth.p;\n\t}\n};\n#define sSet set<Set>::iterator\nvector<int> v[maxn];\nset<Set> s;\nint sum, las = 1;\nIn int init(int ID)\n{\n\ts.clear();\n\tsum = 0, las = 1;\n\tfor(int i = 0; i < (int)v[ID].size(); ++i) \n\t{\n\t\tsum += t[v[ID][i]].flg;\n\t\ts.insert((Set){sum, v[ID][i], 0});\n\t\tif(sum < 0) las = 0;\n\t}\n\tif(sum) las = 0;\n\treturn las;\n}\n\nint ans[maxn];\nbool ha[maxn];                                                      \t       //\u8868\u793a\u8fd9\u4e2a\u5143\u7d20\u662f\u5426\u5df2\u7ecf\u88ab\u5f53\u505a\u961f\u9996\u5220\u9664\nIn void solve(int ID)\n{\n\tint A = 0;\n\tfor(int i = 0; i < (int)v[ID].size(); ++i)\n\t{\n\t\tint p = v[ID][i];\n\t\tA += t[p].flg, ha[p] = 1;\n\t\ts.insert((Set){A, p, 1});\n\t\twhile(1)\n\t\t{\n\t\t\tsSet it = s.begin(); Set tp = *it;\n\t\t\tif(ha[tp.p] && !tp.New) s.erase(it);\t\t      //\u5f53\u524dset\u9996\u5143\u7d20\u65e0\u6548 \n\t\t\telse \n\t\t\t{\n\t\t\t\tbool flg = (tp.val - A) >= 0;\n\t\t\t\tif(las ^ flg)\t\t\t\t      //\u5224\u65ad\u62ec\u53f7\u5e8f\u5217\u7684\u53d8\u5316\u60c5\u51b5 \n\t\t\t\t{\n\t\t\t\t\tans[p] = las ? -1 : 1;\n\t\t\t\t\tlas ^= 1;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tn = read();\n\tfor(int i = 1; i <= n; ++i)\n\t{\n\t\tscanf(\"%s\", ss);\n\t\tchange(i);\n\t}\n\tfor(int i = 1; i <= n; ++i) v[t[i].id].push_back(i);\t//\u5b58\u6bcf\u4e00\u4e2a\u57fa\u56e0\u7f16\u53f7\u5bf9\u5e94\u7684\u62ec\u53f7\u5e8f\u5217 \n\tfor(int i = 1; i <= N; ++i) if(v[i].size())\n\t{\n\t\tMax += init(i);\n\t\tif(!sum) solve(i);\n\t}\n\tint Ans = Max, pos = 1;\n\tfor(int i = 1; i <= n; ++i) \n\t{\n\t\tMax += ans[i];\n\t\tif(Max > Ans) Ans = Max, pos = i + 1;\n\t}\n\twrite(pos), space, write(Ans), enter;\n\treturn 0;\n}\n```",
        "postTime": 1607259742,
        "uid": 55965,
        "name": "mrclr",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6254 \u3010[ICPC2019 WF]Circular DNA\u3011"
    }
]