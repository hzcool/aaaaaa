[
    {
        "content": "\u4eca\u5929CSP\u521a\u62a5\u597d\u540d\uff0c\u521a\u597d$\\color{green}AC$ \u8fd9\u9898\u3002\u542c\u8bf4\u6bd4\u8d5b\u524d\u5199\u9898\u89e3\u53ef\u4ee5\uff0brp\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u8fd9\u7bc7\u9898\u89e3\u3002\n\n[**\u539f\u9898\u4f20\u9001\u95e8**](https://www.luogu.com.cn/problem/P1265)\n\n[**\u535a\u5ba2\u98df\u7528~~\u4e0d\u77e5\u9053\u4f1a\u4e0d\u4f1a~~\u66f4\u4f73**](https://www.luogu.com.cn/blog/nizhuan/solution-p1265)\n\n---\n## 0.\u5ba1\u9898\n\u9898\u9762\u524d\u9762\u4e00\u5927\u5806\u6709\u7684\u6ca1\u7684\uff0c\u86cb\u662f\n\n`\u5f53\u6240\u6709\u57ce\u5e02\u88ab\u7ec4\u5408\u6210\u4e00\u4e2a\u201c\u57ce\u5e02\u8054\u76df\u201d\u65f6\uff0c\u4fee\u5efa\u5de5\u7a0b\u4e5f\u5c31\u5b8c\u6210\u4e86\u3002`\n\n\u4e00\u8bed\u9053\u7834\u76ee\u7684\uff1a\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n~~\u5176\u5b9e\u4f60\u4e0d\u5206\u6790\u9898\u9762\u7684\u8bdd\u4e5f\u4e0d\u77e5\u9053\u3002~~\n\n**\u6700\u5c0f\u751f\u6210\u6811\u662f\u4ec0\u4e48\u5462\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u7ed9\u60a8\u4e00\u4e2a\u56fe\uff0c\u8981\u6c42\u628a\u56fe\u53d8\u6210\u4e00\u4e2a\u7531n-1\uff08n\u4e3a\u70b9\u6570\uff09\u6761\u8fb9\u7ec4\u6210\u7684\u56fe\uff0c\u4f7f\u5f97\u603b\u8fb9\u6743\u6700\u5c0f\u3002**\n\n~~\u8be5\u4e0d\u4f1a\u771f\u7684\u6709\u4eba\u4e0d\u77e5\u9053\u6700\u5c0f\u751f\u6210\u6811\u662f\u4ec0\u4e48\u5c31\u6765\u505a\u8fd9\u9898\u5427\uff0c\u4e0d\u4f1a\u5427\u4e0d\u4f1a\u5427\uff08\u5927\u96fe~~\n## 1.\u601d\u8def\n\u7b2c\u4e00\u53cd\u5e94Kruskal\uff0c\u4e8e\u662f\u5199\u5b8c\u4e00\u63d0\u4ea4\u76f4\u63a5\u7206\u70b8\u3002\n\n### $\\color{black}TLE+MLE$\n\n[\u8840\u7684\u6559\u8bad](https://www.luogu.com.cn/record/list?user=240191&pid=P1265&page=1)\n\n$\\color{black}MLE$\uff1a\u5b58\u8fb9\u6570\u7ec4\u7206\u70b8\n\n$\\color{black}TLE$\uff1a$O(mlogm)$\u7206\u70b8\n\n---\n\u4e8e\u662fPrim\u5927\u6cd5\u597d\u554a\uff01\uff01\uff01\n\n**Prim\u7b97\u6cd5\u6d41\u7a0b\uff1a**\n1. \u5f00\u59cb\u5c06\u8d77\u70b9\uff08\u672c\u9898\u968f\u610f\uff09\u6807\u8bb0\u4e3a\u84dd\u70b9\uff1b\n2. \u627e\u4e00\u6761\u8fde\u63a5**\u84dd\u70b9\u96c6\u5408\u4e2d\u4e00\u70b9**\u548c\u767d\u70b9\u96c6\u5408\u4e2d\u4e00\u70b9\u6700\u77ed\u7684\u8fb9\uff1b\n3. \u5c06\u8be5\u8fb9\u8fde\u63a5\u7684\u767d\u70b9\u52a0\u5165\u84dd\u70b9\uff1b\n4. \u5c06\u8be5\u65b0\u52a0\u5165\u7684\u84dd\u70b9\u6240\u6709\u8fde\u63a5\u7684\u767d\u70b9\u6700\u77ed\u8fb9\u66f4\u65b0\uff1b\n5. \u8fd4\u56de\u7b2c\u4e8c\u6b65\uff0c\u76f4\u5230n\u4e2a\u70b9\u90fd\u88ab\u9009\u5165\u6700\u5c0f\u751f\u6210\u6811\u4e3a\u6b62\u3002\n\n**\u6ce8\uff1a\u84dd\u70b9\u4e3a\u5df2\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u70b9\uff0c\u767d\u70b9\u53cd\u4e4b\u3002**\n## 2.\u4ee3\u7801\u5b9e\u73b0\n\u76f8\u4fe1\u5927\u5bb6\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u6d41\u7a0b\u8ddf`Dijkstra`\u5dee\u4e0d\u591a\uff0c\u4e8e\u662f\u4ee3\u7801\u5b9e\u73b0\u4e5f\u5f88\u76f8\u4f3c\u3002\n\n\u56e0\u4e3a\u7b97\u6cd5\u6d41\u7a0b\u5df2\u7ecf\u7ed9\u51fa\uff0c\u4ee3\u7801\u6ce8\u91ca\u5c06\u4e0d\u518d\u8d58\u8ff0\u3002\n\n### code:\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\nint n;\ntypedef double dou;\ndou x[5010],y[5010],dis[5010],book[5010],ans;\n\ndou get_e(dou x1,dou y1,dou x2,dou y2)\n{//\u6c42\u4e24\u70b9\u95f4\u8ddd\u79bb\u51fd\u6570\n\treturn sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\n}\n\nvoid init()//\u521d\u59cb\u5316\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lf%lf\",&x[i],&y[i]);\n\t\tdis[i]=1e12*1.0;//double\u7c7b\u5f88\u5927\uff0c\u70b8\u4e0d\u4e86\n\t}\n\treturn ;\n}\n\nvoid Prim()\n{\n\tdis[1]=0.0;\n\tbook[1]=true;\n\tint curr;\n\tdouble minn;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcurr=1;\n\t\tminn=1e9*1.0;\n\t\tfor(int j=1;j<=n;j++)//\u627e\u6700\u77ed\u8fb9\n\t\t\tif(!book[j] && dis[j] < minn)\n\t\t\t\tminn=dis[j],curr=j;\n\t\tbook[curr]=true;\n\t\tans+=dis[curr];\n\t\tfor(int j=1;j<=n;j++)//\u73b0\u7528\u73b0\u7b97\n\t\t\tdis[j]=min(dis[j],get_e(x[curr],y[curr],x[j],y[j]));\n\t}\n\tprintf(\"%.2lf\",ans);\n\treturn ;\n}\n\nint main()\n{\n//\tfreopen(\"work.in\",\"r\",stdin);freopen(\"work.out\",\"w\",stdout);\n\tinit();\n\tPrim();\n//\tfclose(stdin);fclose(stdout);\n\treturn 0;\n}\n```\n\n## Thank you for your reading!\n\n~~\u62d2\u7edd\u767d\u5ad6\uff0c\u4ece\u6211\u505a\u8d77\u3002\u70b9\u4e2a\u8d5e\u518d\u8d70\u561b\u3002~~",
        "postTime": 1599895282,
        "uid": 240191,
        "name": "MY\uff08\u4e00\u540d\u849f\u84bb\uff09",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "\u65e2\u7136\u8fd9\u9898\u672c\u8d28\u4e0a\u5c31\u662fPrim\u7b97\u6cd5, \u6211\u5c31\u5728\u8fd9\u91cc\u5199\u4e00\u5199\u6211\u5bf9Prim\u7b97\u6cd5\u7684\u7406\u89e3.\n\n\u4e24\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5, \u90fd\u6709\u4e00\u4e2a\u5171\u540c\u7684\u601d\u60f3: \u8fd9\u68f5\u6811\u662f\u4e00\u70b9\u4e00\u70b9\u957f\u5927\u7684; \u5e76\u4e14\u6bcf\u6b21\u751f\u957f, \u90fd\u662f\u8d2a\u5fc3\u7684.\n\n\u4e0d\u540c\u4e4b\u5904\u662f: Kruscal\u7b97\u6cd5\u662f\u4ee5\u8fb9\u4e3a\u4e2d\u5fc3\u7684, \u6bcf\u6b21\u627e\u6700\u5c0f\u7684\u5e76\u4e14\u6709\u7528\u7684\u8fb9\u6dfb\u52a0\u5230\u6811\u4e0a;\n\nPrim\u7b97\u6cd5\u662f\u4ee5\u70b9\u4e3a\u4e2d\u5fc3\u7684, \u6bcf\u6b21\u627e\u79bb\u6811\u6700\u8fd1\u7684\u70b9\u6dfb\u52a0\u5230\u6811\u4e0a.\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u68f5\u6811\u7406\u89e3\u6210\u4e00\u4e2a\u6709\u667a\u80fd\u7684\u751f\u547d, \u53ef\u4ee5\u611f\u77e5\u5b83\u9644\u8fd1\u7684\u70b9\u5230\u5b83\u7684\u8ddd\u79bb. \u6bcf\u6b21\u751f\u957f\u679d\u6761, \u5b83\u90fd\u9009\u62e9\u79bb\u5b83\u6700\u8fd1\u7684\u90a3\u4e2a\u70b9.\n\n\u70b9\u5230\u6811\u7684\u8ddd\u79bb, \u662f\u6307\u6811\u5916\u4e00\u4e2a\u70b9\u5230\u6811\u4e0a\u7684\u4efb\u610f\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb.\n\n\u6240\u4ee5,\u5728\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u5019, \u9700\u8981\u7ef4\u62a4\u8fd9\u6837\u4e00\u4e2a\u6570\u7ec4: \u6811\u5916\u7684\u70b9\u5230\u6811\u7684\u8ddd\u79bb. \u6240\u4ee5, \u8fd8\u9700\u8981\u533a\u5206\u4e00\u4e0b\u70b9\u7a76\u7adf\u5728\u6811\u4e0a\u8fd8\u5728\u6811\u5916.\n\n\u7ef4\u62a4\u6570\u7ec4\u5c31\u662f\u8981\u505a\u4e24\u4ef6\u4e8b: \u66f4\u6539\u6570\u7ec4\u548c\u8c03\u7528\u6570\u7ec4.\n\n\u4f55\u65f6\u66f4\u6539: \u6811\u5916\u7684\u70b9\u5230\u6811\u7684\u8ddd\u79bb\u53d1\u751f\u53d8\u5316. \u8fd9\u79cd\u4e8b\u53ea\u80fd\u5728\u6811\u751f\u957f\u4e86\u65b0\u7684\u679d\u6761\u7684\u65f6\u5019\u53d1\u751f, \u56e0\u4e3a\u65b0\u52a0\u5165\u7684\u90a3\u4e2a\u70b9\u53ef\u80fd\u66f4\u65b0\u4e86\u6811\u5230\u6811\u5916\u7684\u67d0\u4e2a\u70b9\u7684\u8ddd\u79bb. \u540c\u65f6, \u65b0\u52a0\u5165\u7684\u90a3\u4e2a\u70b9\u53d8\u6210\u4e86\u6811\u4e0a\u7684\u70b9.\n\n\u4f55\u65f6\u8c03\u7528: \u60f3\u6269\u5f20\u7684\u65f6\u5019, \u627e\u6700\u8fd1\u7684\u6811\u5916\u70b9.\n\n\u4e00\u5f00\u59cb, \u6211\u4eec\u8ba4\u4e3a1\u53f7\u7ed3\u70b9\u5728\u6811\u4e0a, \u628a\u5b83\u5230\u6811\u7684\u8ddd\u79bb\u8bbe\u4e3a0; \u5176\u5b83\u7ed3\u70b9\u7684\u8ddd\u79bb\u662fINF.\n\n\n\u5728\u8c03\u7528\u5b8c\u6574\u4e2a\u7b97\u6cd5\u4e4b\u540e, \u56e0\u4e3a\u5f53\u4e00\u4e2a\u8282\u70b9\u53d8\u6210\u6811\u4e0a\u8282\u70b9\u540e, \u6211\u4eec\u5c31\u4e0d\u518d\u66f4\u65b0\u5b83\u5230\u6811\u7684\u8ddd\u79bb, \u6240\u4ee5, \u539f\u6765\u7684\u6570\u7ec4\u8bb0\u5f55\u7684\u5c31\u662f\u5b83\u52a0\u5165\u5230\u6811\u4e0a\u65f6\u7684\u8fde\u8fb9\u957f\u5ea6. \u5bf9\u4e4b\u6c42\u548c, \u5c31\u662f\u6811\u4e0a\u6240\u6709\u8fb9\u6743\u4e4b\u548c.\n\nPrim\u7b97\u6cd5\u7684\u4f18\u52bf: \u7a20\u5bc6\u56fe, \u5c24\u5176\u662f\u5b8c\u5168\u56fe. \u56e0\u4e3a\u5728Kurscal\u7b97\u6cd5\u4e2d, \u5fc5\u987b\u4e8b\u5148\u6c42\u51fa\u6240\u6709\u8fb9\u7684\u957f\u5ea6\u624d\u80fd\u5bf9\u4e4b\u6392\u5e8f. \u4f46\u662f\u4e00\u4e2a\u67095000\u8282\u70b9\u7684\u5b8c\u5168\u56fe, \u8fd9\u6837\u505a\u7684\u7a7a\u95f4\u5f00\u9500\u662f\u5de8\u5927\u7684. Prim\u7b97\u6cd5\u53ea\u5728\u66f4\u65b0\u70b9\u5230\u6811\u7684\u8ddd\u79bb\u65f6\u9700\u8981\u7528\u5230\u8fb9\u957f, \u56e0\u6b64\u5bf9\u4e8e\u8fd9\u79cd\u7ed9\u5750\u6807\u7684\u5b8c\u5168\u56fe, \u53ef\u4ee5\u73b0\u7528\u73b0\u7b97. \n\n```cpp\n#include<bits/stdc++.h>\n#define For(i, m) for(register int i=1; i<=m; i++)\n#define INF 0x3f\n#define N 5123\n#define M\nusing namespace std;\nstruct POINT{\n\tlong long x;\n\tlong long y;\n\t\n\tlong long operator* (const POINT &b) const {\n\t\treturn (x-b.x)*(x-b.x)+(y-b.y)*(y-b.y);\n\t}\n}city[N];\n\ninline long long read(){\n    long long x=0, sign=1; char c=getchar();\n    while(c>'9' || c<'0') {if (c=='-') sign=-1;c=getchar();}\n    while(c>='0' && c<='9'){x=(x<<3)+(x<<1)+c-'0';c=getchar();}\n    return x*sign;\n}\nint n, m;\nbool v[N]; long long d[N];\n\nvoid prim(){\n\tmemset(d, INF, sizeof(d));\n\tmemset(v, 0, sizeof(v));\n\td[1]=0;\n\tFor(i, n-1){\n\t\tint x=0;\n\t\tFor(j, n){\n\t\t\tif (!v[j] && (x==0 || d[j]<d[x])) x=j;\n\t\t}\n\t\tv[x]=1;\n\t\tFor(y, n){\n\t\t\tif (!v[y]) d[y]=min(d[y], city[x]*city[y]);\n\t\t}\n\t}\n}\nint main(){\n#ifdef ERIC\n\tfreopen(\"city.cpp\", \"r\", stdin);\n#endif\n\tn=read();\n\tFor(i, n){\n\t\tcity[i].x=read();\n\t\tcity[i].y=read();\n\t}\n\tprim();\n\tdouble ans=0;\n\tFor(i, n) ans+=sqrt((double)d[i]);\n\tprintf(\"%.2f\\n\", ans);\n\treturn 0;\n}\n\n\n```",
        "postTime": 1541330103,
        "uid": 81690,
        "name": "EricWay1024",
        "ccfLevel": 6,
        "title": "Prim\u7b97\u6cd5"
    },
    {
        "content": "\u9996\u5148\u8003\u8651\u6700\u5c0f\u751f\u6210\u6811\u7684\u6a21\u578b\uff0c\u552f\u4e00\u4e0d\u540c\u7684\u662f\u7b2c\u4e8c\u79cd\u60c5\u5f62\u3002\n\n\u5373**\u201c\u4e09\u4e2a\u6216\u4e09\u4e2a\u4ee5\u4e0a\u7684\u57ce\u5e02\u7533\u8bf7\u4fee\u5efa\u7684\u516c\u8def\u6210\u73af\u201d**\n\n\u8003\u8651\u8be5\u60c5\u5f62\uff0c\u56e0\u4e3a\u4fee\u8def\u7684\u7533\u8bf7\u662f\u7533\u8bf7\u79bb\u5b83\u6700\u8fd1\u7684\u57ce\u5e02\uff0c\u6240\u4ee5\u4e0a\u8ff0\u6761\u4ef6\u5b9e\u8d28\u4e0a\u4e3a\n\n**\u201c\u5b58\u5728\u4e09\u4e2a\u6216\u4e09\u4e2a\u4ee5\u4e0a\u7684\u57ce\u5e02\uff0c\u4ed6\u4eec\u4e24\u4e24\u95f4\u7684\u6700\u8fd1\u57ce\u5e02\u8fde\u8d77\u6765\u6210\u73af\u201d**\n\n\u663e\u7136\u8fd9\u6837\u7684\u60c5\u5f62\u662f\u4e0d\u5b58\u5728\u7684\u3002\n\n\u5269\u4e0b\u5c31\u662f\u7b80\u5355\u7684\u6700\u5c0f\u751f\u6210\u6811\u95ee\u9898\u3002\n\n\u672c\u9898\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u5728\u4e8e\u7a7a\u95f4\u7684\u9650\u5236\u4e0a\uff0c 5000 \\* 5000\u7684\u7a7a\u95f4\u5927\u5c0f\u4f1aMLE\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u9898\u76ee\u7ed9\u7684\u662f\u5750\u6807\uff0c\u6240\u4ee5\u6211\u4eec\u60f3\u5230\u53ef\u4ee5\u4e0d\u76f4\u63a5\u5b58\u50a8\u8ddd\u79bb\uff0c\u800c\u662f\u5728Prim\u7684\u8fd0\u884c\u6d41\u7a0b\u4e2d\u628a\u8ddd\u79bb\u5373\u65f6\u8ba1\u7b97\u51fa\u6765\u5373\u53ef\u3002\n\n\n\u00b7\u00b7\u00b7cpp\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <cmath>\nusing namespace std;\nconst int MAXN = 5000 + 10;\ninline int read() {\n    int x = 0, f = 1; char ch = getchar();\n    while(ch < '0' || ch > '9') {if(ch == '-') f = -1; ch = getchar();}\n    while(ch >= '0' && ch <= '9') {x = x * 10 + ch - '0'; ch = getchar();}\n    return x * f;\n}\nstruct node { int x, y; }point[MAXN];\ndouble ans, dis[MAXN];\nbool vis[MAXN];\nint n;\ndouble calc(int a, int b) {\n    return sqrt((double)(point[a].x - point[b].x) * (point[a].x - point[b].x) + (double)(point[a].y - point[b].y) * (point[a].y - point[b].y));\n}\nint main() {\n    n = read();\n    for(int i = 1; i <= n; ++i) {\n        point[i].x = read(), point[i].y = read();\n        dis[i] = 1e8;\n    }\n    int pos; dis[1] = 0;\n    for(int i = 1; i <= n; ++i) {\n        double minn = 1e8;\n        for(int j = 1; j <= n; ++j) if(!vis[j] && dis[j] < minn) {\n            minn = dis[j]; pos = j;\n        }\n        ans += minn; vis[pos] = true;\n        for(int j = 1; j <= n; ++j) {\n            double d = calc(pos, j);\n            if(d < dis[j])  dis[j] = d;\n        }\n    }\n    printf(\"%.2lf\\n\", ans);\n    return 0;\n}\n```\n```cpp",
        "postTime": 1476410595,
        "uid": 18480,
        "name": "Sci_M3",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "EMST: Delaunay Triangulation + Kruskal\n--------------------------------------\n\n\u5f88\u5bb9\u6613\u5f97\u51fa\u8fd9\u9053\u9898\u672c\u8d28\u5c31\u662f\u8003\u5bdf\u6700\u5c0f\u751f\u6210\u6811\u3002  \n\u5728\u6b64\u4e4b\u4e0a\u53ef\u4ee5\u6ce8\u610f\u5230\u8fd9\u9053\u9898\u6240\u6709\u70b9\u90fd\u662f\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\uff0c\u56e0\u6b64\u8be5\u9898\u5b9e\u9645\u4e0a\u8003\u5bdf\u7684\u662f[\u5e73\u9762\u6b27\u51e0\u91cc\u5f97\u6700\u5c0f\u751f\u6210\u6811\uff08EMST\uff09](https://en.wikipedia.org/wiki/Euclidean_minimum_spanning_tree)\u3002  \nWiki\u4e2d\u63d0\u5230\uff1a\u6c42EMST\u53ef\u4ee5\u5148\u6c42\u51fa\n[Delaunay\u4e09\u89d2\u5256\u5206\uff08Delaunay Triangulation\uff0cDT\uff09](https://en.wikipedia.org/wiki/Delaunay_triangulation)\n\uff0c\u7136\u540e\u5728DT\u7ed3\u679c\u4e0a\u76f4\u63a5\u8dd1\u4e00\u822c\u7684MST\u7b97\u6cd5\u5c31\u53ef\u4ee5\u4e86\u3002  \n\u4e0b\u9762\u7684\u4ee3\u7801\u4f7f\u7528\u4e86\u5206\u6cbb\u6cd5\u6765\u6c42DT\uff0cKruskal\u7b97\u6cd5\u6765\u6c42MST\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(NlogN)\uff0cC++11 85ms\uff0cO2 42ms\u3002  \n\uff08\u4ee3\u7801\u662f\u4ece\u4e4b\u524d\u5df2\u7ecf\u5199\u597d\u7684DT\u6a21\u677f\u91cc\u6539\u7684\uff0c\u6240\u4ee5\u7a0d\u5fae\u6709\u70b9\u4e11\uff0c\u6c42\u8f7b\u55b7\u3002\u3002  \n```cpp\n// LGOJ1265\n\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstdint>\n#include <utility>\n\nusing namespace std;\n\nusing Coord = int32_t;\nusing SqrCoord = int64_t;\n\nstruct Vec {\n    Coord x, y;\n    inline Vec() noexcept = default;\n    constexpr Vec(Coord x_, Coord y_) noexcept : x(x_), y(y_) {}\n    constexpr bool operator <(const Vec& rhs) const noexcept {\n        return x < rhs.x ? true : x > rhs.x ? false : y < rhs.y;\n    }\n    constexpr Vec operator +(const Vec& rhs) const noexcept {\n        return {x + rhs.x, y + rhs.y};\n    }\n    constexpr Vec operator -(const Vec& rhs) const noexcept {\n        return {x - rhs.x, y - rhs.y};\n    }\n    constexpr SqrCoord operator *(const Vec& rhs) const noexcept {\n        return (SqrCoord) x * rhs.x + (SqrCoord) y * rhs.y;\n    }\n    constexpr SqrCoord operator %(const Vec& rhs) const noexcept {\n        return (SqrCoord) x * rhs.y - (SqrCoord) y * rhs.x;\n    }\n    constexpr SqrCoord Len2() const noexcept {\n        return *this * *this;\n    }\n    inline bool IsInCircumCircle(const Vec& A, const Vec& B, const Vec& C) const noexcept {\n        auto AP = *this - A;\n        auto BP = *this - B;\n        auto CP = *this - C;\n        return double(AP % BP) * CP.Len2() + double(BP % CP) * AP.Len2() + double(CP % AP) * BP.Len2() > 0;\n    }\n    inline bool IsLeftOfVector(const Vec& A, const Vec& B) const noexcept {\n        auto AB = B - A;\n        auto AP = *this - A;\n        return AB % AP > 0;\n    }\n};\n\nconstexpr size_t DtMaxV = 5000;\nconstexpr size_t DtMaxE = DtMaxV * 400;\nconstexpr size_t DtMaxF = DtMaxV * 3;\n\nusing DtVertex = Vec;\nusing DtVPtr = DtVertex*;\nstruct DtEdge;\nusing DtEPtr = DtEdge*;\n\nDtVertex DtVtcs[DtMaxV];\n\nstruct DtEdge {\n    DtVPtr orig;\n    DtEPtr twin;\n    DtEPtr prev;\n    DtEPtr next;\n    inline DtEdge& operator >>(DtEPtr rhs) noexcept {\n        next = rhs;\n        rhs->prev = this;\n        return *rhs;\n    }\n} DtEBuf[DtMaxE];\nsize_t DtECnt;\n\ninline DtEPtr DtENew(DtVPtr A, DtVPtr B) noexcept {\n    auto AB = &DtEBuf[DtECnt + 0];\n    auto BA = &DtEBuf[DtECnt + 1];\n    DtECnt += 2;\n    AB->orig = A;\n    BA->orig = B;\n    AB->twin = BA;\n    BA->twin = AB;\n    return AB;\n}\n\ninline void DtEDel(DtEPtr AB) noexcept {\n    AB->twin->twin = nullptr;\n    AB->twin = nullptr;\n}\n\ninline DtEPtr DtConnect(DtEPtr le, DtEPtr re) noexcept {\n    auto LR = DtENew(le->orig, re->orig), RL = LR->twin;\n    *le->prev >> LR;\n    *re->prev >> RL;\n    *LR >> re;\n    *RL >> le;\n    return LR;\n}\n\ninline DtEPtr DtTangent(DtEPtr le, DtEPtr re) noexcept {\n    for (auto e = le->next; e != le; e = e->next)\n        if (*le->orig < *e->orig)\n            le = e;\n    for (auto e = re->next; e != re; e = e->next)\n        if (*e->orig < *re->orig)\n            re = e;\n    DtEPtr xle, xre;\n    do {\n        xle = le;\n        xre = re;\n        while (le->next->orig->IsLeftOfVector(*re->orig, *le->orig))\n            le = le->next;\n        while (re->prev->orig->IsLeftOfVector(*re->orig, *le->orig))\n            re = re->prev;\n    } while (le != xle || re != xre);\n    return DtConnect(le, re);\n}\n\ninline bool DtFindLeft(DtEPtr base) noexcept {\n    auto L = base->orig;\n    auto R = base->twin->orig;\n    auto fst = base->prev;\n    if (!fst->orig->IsLeftOfVector(*L, *R))\n        return false;\n    auto snd = fst->twin->prev;\n    while (snd != base->twin && snd->orig->IsInCircumCircle(*L, *R, *fst->orig)) {\n        *fst->prev >> fst->twin->next;\n        *snd >> base;\n        DtEDel(fst);\n        fst = snd;\n        snd = fst->twin->prev;\n    }\n    return true;\n}\n\ninline bool DtFindRight(DtEPtr base) noexcept {\n    auto L = base->orig;\n    auto R = base->twin->orig;\n    auto fst = base->next->twin;\n    if (!fst->orig->IsLeftOfVector(*L, *R))\n        return false;\n    auto snd = fst->next->twin;\n    while (snd != base && snd->orig->IsInCircumCircle(*L, *R, *fst->orig)) {\n        *fst->prev >> fst->twin->next;\n        *base >> snd->twin;\n        DtEDel(fst);\n        fst = snd;\n        snd = fst->next->twin;\n    }\n    return true;\n}\n\n// Divide and Conquer\nDtEPtr DtWork(size_t beg, size_t end) noexcept {\n    auto size = end - beg;\n    // size >= 2\n    if (size == 2) {\n        auto A = &DtVtcs[beg + 0];\n        auto B = &DtVtcs[beg + 1];\n        auto AB = DtENew(A, B), BA = AB->twin;\n        *AB >> BA >> AB;\n        return AB;\n    }\n    if (size == 3) {\n        auto A = &DtVtcs[beg + 0];\n        auto B = &DtVtcs[beg + 1];\n        auto C = &DtVtcs[beg + 2];\n        auto AB = DtENew(A, B), BA = AB->twin;\n        auto BC = DtENew(B, C), CB = BC->twin;\n        auto det = (*B - *A) % (*C - *A);\n        if (!det) {\n            // Collinear\n            *AB >> BC >> CB >> BA >> AB;\n            return AB;\n        }\n        auto CA = DtENew(C, A), AC = CA->twin;\n        *AB >> BC >> CA >> AB;\n        *AC >> CB >> BA >> AC;\n        return det > 0 ? AC : CA;\n    }\n    auto mid = beg + size / 2;\n    auto base = DtTangent(DtWork(beg, mid), DtWork(mid, end));\n    auto flag = (int) DtFindLeft(base) << 1 | (int) DtFindRight(base);\n    while (flag) {\n        auto L = base->orig;\n        auto R = base->twin->orig;\n        auto le = base->prev;\n        auto re = base->next->next;\n        if (flag == 3)\n            flag = le->orig->IsInCircumCircle(*L, *R, *re->orig) ? 2 : 1;\n        base = flag == 2 ? DtConnect(le, base->next) : DtConnect(base, re);\n        flag = (int) DtFindLeft(base) << 1 | (int) DtFindRight(base);\n    }\n    return base;\n}\n\nstruct GVertex;\nstruct GEdge;\nusing GVPtr = GVertex*;\nusing GEPtr = GEdge*;\n\nstruct GVertex {\n    GVPtr ufsParent = nullptr;\n    size_t ufsSize = 1;\n    GVPtr UfsRoot() noexcept {\n        return ufsParent ? ufsParent = ufsParent->UfsRoot() : this;\n    }\n    friend inline void UfsUnion(GVPtr lhs, GVPtr rhs) noexcept {\n        if (lhs->ufsSize < rhs->ufsSize)\n            swap(lhs, rhs);\n        rhs->ufsParent = lhs;\n        lhs->ufsSize += rhs->ufsSize;\n    }\n} GVtcs[DtMaxV];\n\nstruct GEdge {\n    GVPtr U, V;\n    double weight;\n    constexpr bool operator <(const GEdge& rhs) const noexcept {\n        return weight < rhs.weight;\n    }\n} GEBuf[DtMaxE];\nsize_t GECnt;\n\ninline void GENew(DtEPtr e) noexcept {\n    auto c = GEBuf + GECnt++;\n    auto U = e->orig;\n    auto V = e->twin->orig;\n    c->U = &GVtcs[U - DtVtcs];\n    c->V = &GVtcs[V - DtVtcs];\n    c->weight = sqrt((*V - *U).Len2());\n}\n\ninline int ReadVoid() noexcept {\n    auto ch = getchar();\n    while (ch < '-')\n        ch = getchar();\n    return ch;\n}\n\ntemplate<class Integral>\ninline Integral ReadDigits(int ch) noexcept {\n    auto res = (Integral) (ch & 0x0f);\n    for (ch = getchar(); ch >= '0'; ch = getchar())\n        res = res * 10 + (Integral) (ch & 0x0f);\n    return res;\n}\n\ntemplate<class Unsigned>\ninline Unsigned ReadUnsigned() noexcept {\n    return ReadDigits<Unsigned>(ReadVoid());\n}\n\ntemplate<class Signed>\ninline Signed ReadSigned() noexcept {\n    auto ch = ReadVoid();\n    if (ch == '-')\n        return -ReadDigits<Signed>(getchar());\n    return ReadDigits<Signed>(ch);\n}\n\nint main() {\n    auto N = ReadUnsigned<size_t>();\n    for (size_t i = 0; i < N; ++i) {\n        DtVtcs[i].x = ReadSigned<int32_t>();\n        DtVtcs[i].y = ReadSigned<int32_t>();\n    }\n    if (N < 2) {\n        puts(\"0.00\");\n        return 0;\n    }\n    sort(DtVtcs, DtVtcs + N);\n    DtWork(0, N);\n    for (size_t i = 0; i < DtECnt; i += 2)\n        if (DtEBuf[i].twin)\n            GENew(&DtEBuf[i]);\n    sort(GEBuf, GEBuf + GECnt);\n    double res = 0;\n    for (size_t i = 0; i < GECnt; ++i) {\n        auto e = &GEBuf[i];\n        auto U = e->U->UfsRoot();\n        auto V = e->V->UfsRoot();\n        if (U != V) {\n            res += e->weight;\n            UfsUnion(U, V);\n        }\n    }\n    printf(\"%.2f\\n\", res);\n    return 0;\n}\n\n```  \n\uff08\u7a0d\u5fae\u6709\u70b9\u957f\uff0c\u611f\u8c22\u5927\u5bb6\u7684\u8010\u5fc3\u3002\u3002  \nP. S. 1. \u5176\u5b9e\u662f\u56e0\u4e3a\u81ea\u5df1\u6700\u8fd1\u5728\u770bDT\uff0c\u7136\u540e\u77e5\u9053DT\u53ef\u4ee5\u7528\u6765\u89e3EMST\uff0c\u6240\u4ee5\u627e\u4e86\u8fd9\u4e2a\u9898\u6765\u5f53\u6a21\u677f\u9898\u7ec3\u624b\u3002\u3002  \nP. S. 2. \u7136\u800cA\u4e86\u4e4b\u540e\u53d1\u73b0\u6ca1\u4eba\u53d1\u4e09\u89d2\u5256\u5206\u7684\u9898\u89e3\uff0c\u4e8e\u662f\u6765\u6c34\u4e00\u7bc7\u3002\u3002  ",
        "postTime": 1537903388,
        "uid": 132096,
        "name": "Radiata",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011EMST: Delaunay Triangulation + Kruskal"
    },
    {
        "content": "\u9996\u5148\u53ef\u4ee5\u8bc1\u660e\uff0c\u89c4\u5219\uff082\uff09\u662f\u6beb\u65e0\u7528\u5904\u7684\uff0c\u56e0\u4e3a\u4e09\u4e2a\u4ee5\u4e0a\u57ce\u5e02\u6210\u73af\u7684\u60c5\u51b5\u662f\u4e0d\u53ef\u80fd\u51fa\u73b0\u7684\uff08\u53cd\u8bc1\u6cd5\uff09\u3002\u63a5\u4e0b\u6765\u53ef\u4ee5\u8bc1\u660e\uff0c\u6309\u201c\u8f6e\u201d\u8fdb\u884c\u5904\u7406\u4e5f\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u56e0\u6b64\u53ea\u9700\u76f4\u63a5\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\u3002\u5e73\u65b9\u9636\u7684Prim\u5728\u65f6\u95f4\u4e0a\u662f\u53ef\u4ee5\u901a\u8fc7\u7684\uff0c\u4f46\u5982\u679c\u5f005000\\*5000\u90bb\u63a5\u77e9\u9635\u7684\u8bdd\u4f1aMLE\uff0c\u56e0\u6b64\u6ca1\u6709\u5fc5\u8981\u628a\u8fb9\u6743\u9884\u5904\u7406\u51fa\u6765\u4fdd\u5b58\u5728\u77e9\u9635\u91cc\uff0c\u6bcf\u6b21\u9700\u8981\u7528\u5230\u7684\u65f6\u5019\u76f4\u63a5\u8ba1\u7b97\u5373\u53ef\u3002\n\n\n```cpp\n\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#define INF 1e9\n#define MN 5001\nusing namespace std;\n\nint p[MN][2];\ndouble dis[MN];\nbool vis[MN];\n\ndouble dist(int x1,int y1,int x2,int y2)\n{\n    return sqrt((double)(x1-x2)*(x1-x2)+(double)(y1-y2)*(y1-y2));\n}\n\nint main()\n{\n    int n,i,j;\n    scanf(\"%d\",&n);\n    for (i=1;i<=n;i++)\n        scanf(\"%d%d\",&p[i][0],&p[i][1]);\n    for (i=2;i<=n;i++)\n        dis[i]=INF;\n    int mj;\n    double mi;\n    double ans=0;\n    for (i=1;i<=n;i++)\n    {\n        mi=INF;\n        for (j=1;j<=n;j++)\n            if (!vis[j]&&dis[j]<mi)\n            {\n                mj=j;\n                mi=dis[j];\n            }\n        ans+=mi;\n        vis[mj]=true;\n        for (j=1;j<=n;j++)\n        {\n            double t=dist(p[mj][0],p[mj][1],p[j][0],p[j][1]);\n            if (t<dis[j])\n                dis[j]=t;\n        }\n    }\n    printf(\"%.2lf\\n\",ans);\n    return 0;\n}\n\n```\n\n\u4ee3\u7801\u5199\u7684\u5f88\u4e11\u2026\u2026\n",
        "postTime": 1436759781,
        "uid": 2031,
        "name": "xizeroplus",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "## \u6700\u5c0f\u751f\u6210\u6811\u6a21\u677f\u9898\n\n\u6211\u4e00\u5f00\u59cb\u5f00\u4e865000*5000\u7684\u90bb\u63a5\u77e9\u9635\uff0cMLE\u662f\u5fc5\u987b\u7684\n\n\u56e0\u6b64\u6ca1\u6709\u5fc5\u8981\u628a\u8fb9\u6743\u9884\u5904\u7406\u51fa\u6765\u4fdd\u5b58\u5728\u77e9\u9635\u91cc\uff0c\u6bcf\u6b21\u9700\u8981\u7528\u5230\u7684\u65f6\u5019\u76f4\u63a5\u8ba1\u7b97\u5373\u53ef\u3002//\u501f\u7528\uff0c\u6211\u8fd9\u9898\u53d7\u5230\u4e86 xizeroplus  dalao\u7684\u542f\u53d1\n\n\u800csqrt\u5f88\u6162\uff0c\u53ef\u4ee5\u5728\u8ba1\u7b97\u7b54\u6848\u65f6\u518d\u5f00\u65b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u4e00\u5b9a\u65f6\u95f4\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u6c42\u89e3\uff0c\u6211\u81ea\u5df1\u4e5f\u641e\u4e0d\u660e\u767d\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <string>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\ndouble x[5005],y[5005],d[5005],ans;\nint n;\nbool v[5005];\ndouble qq(double x,double x1,double y,double y1)\n{\n\treturn (x-x1)*(x-x1)+(y-y1)*(y-y1);\n}\n\nint main()\n{\n\tint i,j,k;\n\tscanf (\"%d\",&n);\n\tfor (i=1; i<=n; i++) scanf (\"%lf%lf\",&x[i],&y[i]);\n\tmemset(d,0x7f,sizeof(d)); d[1]=0;\n\tfor (i=1; i<=n; i++)\n\t{\n\t\tk=0;\n\t\tfor (j=1; j<=n; j++)\n\t\t\tif (!v[j]&&d[j]<d[k]) k=j;\n\t\tv[k]=true;\n\t\tfor (j=1; j<=n; j++)\n\t\t\tif (!v[j]&&qq(x[k],x[j],y[k],y[j])<d[j]) d[j]=qq(x[k],x[j],y[k],y[j]);\n\t}\n\tfor (i=1; i<=n; i++) ans+=sqrt(d[i]);\n\tprintf (\"%.2lf\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1564479207,
        "uid": 171826,
        "name": "\u9006\u65f6\u9488\u7684\u8bb0\u5fc6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "## \u672c\u9898\u91cd\u70b9\u662f\u5bf9\u4e8e\u7b2c\u4e8c\u6761\u89c4\u5219\u7684\u7406\u89e3\uff1a\n\n\u5982\u56fe\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u70b9A\uff0c\u56e0\u4e3a\u5b83\u7533\u8bf7\u4fee\u5efaAB\u9053\u8def\uff0c\u56e0\u6b64\u79bbA\u6700\u8fd1\u7684\u70b9\u4e00\u5b9a\u662fB\n\n![](https://cdn.luogu.com.cn/upload/pic/48906.png)\n\n\u540c\u7406\uff0cB\u7533\u8bf7\u4fee\u5efaBC\u9053\u8def\uff0c\u56e0\u6b64C\u4e00\u5b9a\u6bd4A\u79bbB\u66f4\u8fd1\uff08\u5373C\u5728\u5706B\u5185\uff0c\u4e0d\u5305\u542b\u8fb9\u754c\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/48907.png)\n\n\u540c\u65f6\uff0cC\u7533\u8bf7\u4fee\u5efaCA\u9053\u8def\uff0c\u5373A\u79bbC\u6bd4A\u79bbB\u66f4\u8fd1\n\n![](https://cdn.luogu.com.cn/upload/pic/48908.png)\n\n\u6ee1\u8db3\u9898\u610f\u7684\u8bdd\uff0cABC\u53ea\u80fd\u7ec4\u6210\u6b63\u4e09\u89d2\u5f62\uff0c\u56e0\u6b64\u6392\u9664\u6700\u77ed\u8fb9\u6709\u4e09\u79cd\u60c5\u51b5\n\n\u56e0\u4e3a\u9898\u76ee\u6709\uff1a\n\n```\n\u4e00\u4e2a\u5b9e\u6570\uff0c\u56db\u820d\u4e94\u5165\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\uff0c\u8868\u793a\u516c\u8def\u603b\u957f\u3002\uff08\u4fdd\u8bc1\u6709\u60df\u4e00\u89e3\uff09\n```\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff1a\n\n### \u89c4\u52192\u662f\u6ca1\u6709\u7528\u7684\n\n\u4e8e\u662f\uff0c\u9898\u76ee\u7684\u7b2c\u4e00\u6761\u89c4\u5219\n\n```\n\u5982\u679c\u4e24\u4e2a\u6216\u4ee5\u4e0a\u57ce\u5e02\u7533\u8bf7\u4fee\u5efa\u540c\u4e00\u6761\u516c\u8def\uff0c\u5219\u8ba9\u5b83\u4eec\u5171\u540c\u4fee\u5efa\n```\n\n\u660e\u663e\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u88f8\u7684\u677f\u5b50\n\n```c\nfor (int i=1;i<=n;i++)\n\t{\n\t\tfor (int j=1;j<=n;j++) if(!vis[j]&&dis[j]<MIN) MIN=dis[j],pos=j;\n\t\tans+=MIN; vis[pos]=1;MIN=oo;\n\t\tfor (int j=1;j<=n;j++) dis[j]=min(dis[j],Distance(pos,j));\n\t}\n```\n\n\u518d\u6709\uff0c\u7531\u4e8e\u5750\u6807\u8303\u56f4\u5f88\u5927\uff0c\u56e0\u6b64\u76f4\u63a5\u7528\u51fd\u6570\u6c42\u51fa\u8ddd\u79bb\u5373\u53ef\n\n```c\ndouble Distance(int a,int b)\n{return sqrt((double)(point[a].x-point[b].x)*(point[a].x-point[b].x)+\n\t\t\t (double)(point[a].y-point[b].y)*(point[a].y-point[b].y));\n}\n\n```\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u5f97\u51fa\u4ee3\u7801= =\n```c\n#include<bits/stdc++.h>\n#define oo 99999999\nusing namespace std;\n\nint n,pos;\nbool vis[5005];\ndouble ans,MIN=oo,dis[5005];\nstruct tqr{int x,y;}point[5005];\n\ndouble Distance(int a,int b){return sqrt((double)(point[a].x-point[b].x)*(point[a].x-point[b].x)+(double)(point[a].y-point[b].y)*(point[a].y-point[b].y));}\n\ntemplate<class T> inline void read(T &re){re=0;T sign=1;char tmp;while((tmp=getchar())&&(tmp<'0'||tmp>'9')) if(tmp=='-') sign=-1;re=tmp-'0';while((tmp=getchar())&&(tmp>='0'&&tmp<='9')) re=re*10+(tmp-'0');re*=sign;}\n\nint main()\n{\n\t// freopen(\"road.in\",\"r\",stdin);\n\t// freopen(\"road.out\",\"w\",stdout);\n\tread(n);\n\tfor (int i=1;i<=n;i++){read(point[i].x);read(point[i].y);dis[i]=oo;}//\u8bfb\u5165\u548c\u521d\u59cb\u5316\n\tdis[1]=0;\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tfor (int j=1;j<=n;j++) if(!vis[j]&&dis[j]<MIN) MIN=dis[j],pos=j;\n\t\tans+=MIN; vis[pos]=1;MIN=oo;\n\t\tfor (int j=1;j<=n;j++) dis[j]=min(dis[j],Distance(pos,j));\n\t}\n\tprintf(\"%.2lf\\n\",ans);\n\treturn 0;\n}\n\n```\n\n\n------------\n\n# $$\\text{over}$$",
        "postTime": 1547818486,
        "uid": 117842,
        "name": "\u65e0\u610f\u8bc6\u8eba\u67aa\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "\u6211\uff0cwater and vegetable\u7684\u4e0d\u8981\u4e0d\u8981\u7684\uff0c\n\u770b\u89c1\u9898\u89e3\u5927\u4f6c\u4eec\u6ca1\u6709\u8bb2\u89e3prim\u4ee3\u7801\uff0c\u849f\u84bb\u8fd9\u91cc\u521a\u5b66\u4e60\uff0c\u987a\u4fbf\u81ea\u5df1\u8bb2\u89e3\u4e00\u6ce2\n\u7ba1\u7406\u5927\u5927\u53ef\u522b\u7ed9\u9a73\u56de\uff0cQVQ\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nconst long long maxn=1e4+5;\nconst long long inf=1e9+5;\nlong long n,x[maxn],y[maxn],vis[maxn];\ndouble d[maxn],ans;\ndouble get(long long i,long long j){\n\treturn sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j])); \n}\nvoid prim(){\n\tfor(long long i=1;i<=n;i++) d[i]=get(1,i);//\u5728prim\u4e2d\uff0c\t\u6211\u4eecd\u6570\u7ec4\u8868\u793a\u7684\u662f\u7b2ci\u4e2a\u70b9\u5230\u56fe\u4e2d\u5df2\u7ecf\u6709\u7684\u6240\u6709\u7684\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u56e0\u4e3a\u7528\u4e8c\u7ef4\u5b58\u8ddd\u79bb\u7684\u8bdd\u4f1a\u76f4\u63a5\u70b8\u7a7a\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u7684\u65f6\u5019\u5728\u53bb\u5904\u7406\uff1b\n\td[0]=inf;\n\tfor(long long i=1;i<n;i++){//\u6211\u4eec\u56fe\u4e2d\u7684\u7b2c\u4e00\u4e2a\u70b9\u662f1\uff0c\u5df2\u7ecf\u6c42\u5f97\u4e86\u6240\u6709\u548c1\u76f8\u8fde \u7684\u70b9\u7684\u8ddd\u79bb\uff0c\u6211\u4eec\u6c42\u51fa\u8fd9\u4e2a\u70b9\u5177\u4f53\u662f\u54ea\u4e2a\u70b9\uff0c\u548c\u8fd9\u6761\u6700\u77ed\u7684\u8fb9\u662f\u591a\u5c11\uff0c\u5c06\u5f53\u524d\u8fd9\u4e2a\u70b9\u52a0\u5165\u6211\u4eec\u6700\u5c0f\u751f\u6210\u6811\u7684\u70b9\u96c6\u4e2d\u53bb\uff0c\u6b64\u65f6\u6811\u4e0a\u5c31\u5df2\u7ecf\u67092\u4e2a\u70b9\u4e86\uff0c\u4e0b\u4e00\u6b65\uff0c\u6211\u4eec\u8981\u6c42\u7684\u662f\u4e0e\u8fd9\u4e24\u4e2a\u70b9\u76f8\u90bb\u7684\u6240\u6709\u7684\u70b9\u5230\u8fd9\u4e24\u4e2a\u70b9\u8ddd\u79bb\u6700\u77ed\u7684\u4e00\u4e2a\u70b9\uff0c\u56e0\u4e3a\u7684d[i]\u4e4b\u524d\u8868\u793a\u7684\u662f\u52301\u7684\u8ddd\u79bb\uff0c\u6b64\u65f6\u5728\u4e0e\u5230\u8fd9\u4e2a\u65b0\u7684\u70b9\u7684\u8ddd\u79bb\u4f5c\u6bd4\u8f83\uff0c\u51b3\u5b9a\u66f4\u4e0d\u66f4\u65b0\u8fd9\u4e2a\u70b9\uff0c\u66f4\u65b0\u5b8c\u4e4b\u540e\uff0cd[i]\u8868\u793a\u7684\u662fi\u8fd9\u4e2a\u70b9\u5230\u76ee\u524d\u5df2\u7ecf\u6784\u6210\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u6211\u4eecprim\u6240\u9700\u8981\u7684\u4e1c\u897f\uff0c\u7136\u540e\u5c31\u4f9d\u6b21\u627e\u70b9\u5c31\u884c\u4e86\n\t\tlong long xi=0;\n\t\tfor(long long j=1;j<=n;j++){\n\t\t\tif(!vis[j]&&(xi==0||d[j]<d[xi])) xi=j;//\u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684\u90a3\u4e2a\u70b9\n\t\t}\n\t\tvis[xi]=1;//\u5f80\u6811\u4e0a\u52a0\u4e00\u4e2a\u70b9\n\t\tans+=d[xi];\n\t\tfor(long long j=1;j<=n;j++){\n\t\t\tif(!vis[j]) d[j]=min(d[j],get(xi,j));//\u66f4\u65b0\u70b9\u8ddd\u79bb\u90e8\u5206\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%lld\",&n);\n\tfor(long long i=1;i<=n;i++){\n\t\tscanf(\"%lld%lld\",&x[i],&y[i]);\n\t} \n\tvis[1]=1;\n\tprim();\n\tprintf(\"%.2lf\",ans);//\u8f93\u51fa\u7b54\u6848\n\treturn 0;\n}\n```",
        "postTime": 1538990684,
        "uid": 46743,
        "name": "loaky",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "#\u5806\u4f18\u5316prime+\u62d3\u6251\u5173\u7cfb\u5224\u65ad\n\n\u5176\u5b9e\u5c31\u662f\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6ce8\u610f\u89c4\u5219\uff082\uff09\u662f\u4e0d\u4f1a\u6709\u5f71\u54cd\u7684\uff0c\u8bc1\u660e\u5982\u4e0b\uff1a\n\n\n\u56e0\u4e3aA\u7533\u8bf7\u4fee\u5efa\u516c\u8defAB\uff0c\u6240\u4ee5AB<=AC,B\u7533\u8bf7\u4fee\u5efa\u516c\u8defBC,\u6240\u4ee5BC<=AB,C\u7533\u8bf7\u4fee\u5efa\u516c\u8defCA,\u6240\u4ee5AC<=BC,\u800c\u8fd9\u4e09\u4e2a\u6761\u4ef6\u540c\u65f6\u6210\u7acb\u5f53\u4e14\u4ec5\u5f53AB=BC=AC\uff0c\u65e2\u7136\u8fd9\u6837\uff0c\u53bb\u6389\u90a3\u6761\u8fb9\u90fd\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u4e0e\u6c42\u89e3\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u51b2\u7a81\u3002\n\n\n\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u5b8c\u5168\u56fe\uff0c\u8fb9\u6570\u8f83\u591a\uff0c\u6240\u4ee5\u6211\u7528\u4e86\u5806\u4f18\u5316\u7684prime\u7b97\u6cd5\uff0c\u901f\u5ea6\u975e\u5e38\u5feb\uff0c600ms\u3002\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<iomanip>\n#define f(i,l,r) for(i=(l);i<=(r);i++)\nusing namespace std;\nconst int MAXN=5005;\nstruct Node{\n    int x,y;\n}a[MAXN];\nint n,vis[MAXN],num;\ndouble d[MAXN],ans=0,heap0[10000000];\nint heap1[10000000],sz;\ninline double cal(int u,int v)\n{\n    return sqrt((double)(a[u].x-a[v].x)*(a[u].x-a[v].x)+(double)(a[u].y-a[v].y)*(a[u].y-a[v].y));\n}\ninline void pushup(int p)\n{\n    int fa=p>>1,id=heap1[p];\n    double a=heap0[p];\n    while(fa&&a<heap0[fa]){\n        heap0[p]=heap0[fa];\n        heap1[p]=heap1[fa];\n        p=fa;\n        fa>>=1;\n    }\n    heap0[p]=a;\n    heap1[p]=id;\n}\ninline void pushdown(int p)\n{\n    int son=p<<1,id=heap1[p];\n    double a=heap0[p];\n    while(son<=sz){\n        if(son<sz&&heap0[son]>heap0[son+1]) son++;\n        if(heap0[son]>=a) break;\n        heap0[p]=heap0[son];\n        heap1[p]=heap1[son];\n        p=son;\n        son<<=1;\n    }\n    heap0[p]=a;\n    heap1[p]=id;\n}\ninline void insert(double a,int id)\n{\n    heap0[++sz]=a;\n    heap1[sz]=id;\n    pushup(sz);\n}\ninline void Pop()\n{\n    heap0[1]=heap0[sz];\n    heap1[1]=heap1[sz--];\n    pushdown(1);\n}\ninline void Prime()\n{\n    int i;\n    d[1]=0;\n    insert(0.0,1);\n    while(sz){\n        int u=heap1[1];\n        double w=heap0[1];\n        Pop();\n        if(vis[u]) continue;\n        vis[u]=1;\n        ans+=w;\n        num++;\n        if(num==n) break;\n        f(i,1,n){\n            if(vis[i]||i==u) continue;\n            double tmp=cal(i,u);\n            if(d[i]>tmp){\n                d[i]=tmp;\n                insert(d[i],i);\n            }\n        }\n    }\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    memset(d,127,sizeof(d));\n    int i,j;\n    cin>>n;\n    f(i,1,n){\n        cin>>a[i].x>>a[i].y;\n    }\n    Prime();\n    cout<<fixed<<setprecision(2)<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1503458805,
        "uid": 18601,
        "name": "\u6770\u68ee\u7684\u4f2f\u6069",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": " \n \n \u4e0a\u5348\u521a\u542c\u5b66~~\u957f~~\u59d0=\u8bb2\u5b8c\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4e8e\u662f\u8dd1\u6765\u5237\u9053\u7eff\u9898\n\n#### \u8fd9\u9053\u9898\u6709\u70b9\u5361\u7a7a\u95f4\u548c\u65f6\u95f4\uff0c\u6240\u4ee5\u8017\u4e86\u62112h\uff0c\u7ed5\u4e86\u5f88\u591a\u5f2f\uff0c\uff08~~\u5176\u5b9e\u662f\u6211\u83dc~~\uff09\uff0c\u56e0\u6b64\u6765\u53d1\u4e00\u624b\u9898\u89e3\n\n\n------------\n\n\n# [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P1265)\n\n\n------------\n\n\u597d\uff0c\u73b0\u5728\u5f00\u59cb\n\n\u770b\u4e00\u4e0b\u9898\u9762\uff0c\u9898\u76ee\u4e2d\u8bf4\u6bcf\u4e2a\u57ce\u5e02\u9009\u9053\u8def\u8981\u4ece\u6700\u8fd1\u7684\u5f00\u59cb\u9009\uff0c\u5e76\u4e14\u7ed9\u51fa\u4e86\u653f\u5e9c\u5bf9\u4e8e\u4fee\u8def\u7684\u4e09\u6761\u63aa\u65bd\uff1a\n\n```cpp\n1\u3001\u5982\u679c\u4e24\u4e2a\u6216\u4ee5\u4e0a\u57ce\u5e02\u7533\u8bf7\u4fee\u5efa\u540c\u4e00\u6761\u516c\u8def\uff0c\n\u5219\u8ba9\u5b83\u4eec\u5171\u540c\u4fee\u5efa\uff1b\n\n2\u3001\u5982\u679c\u4e09\u4e2a\u6216\u4ee5\u4e0a\u7684\u57ce\u5e02\u7533\u8bf7\u4fee\u5efa\u7684\u516c\u8def\u6210\u73af\u3002\n\u5982\u4e0b\u56fe\uff0cA\u7533\u8bf7\u4fee\u5efa\u516c\u8defAB\uff0cB\u7533\u8bf7\u4fee\u5efa\u516c\u8defBC\uff0c\nC\u7533\u8bf7\u4fee\u5efa\u516c\u8defCA\u3002\n\u5219\u653f\u5e9c\u5c06\u5426\u51b3\u5176\u4e2d\u6700\u77ed\u7684\u4e00\u6761\u516c\u8def\u7684\u4fee\u5efa\u7533\u8bf7\uff1b\n\n3\u3001\u5176\u4ed6\u60c5\u51b5\u7684\u7533\u8bf7\u4e00\u5f8b\u540c\u610f\u3002\n```\n\n\n------------\n\n1\u7b80\u5316\u4e00\u4e0b\u7406\u89e3\u5c31\u662f\u8fde\u63a5\u4e24\u4e2a\u70b9\n\n2\u611f\u89c9\u633a\u9ebb\u70e6\uff0c\u4f46\u7a0d\u5fae\u8fc7\u4e00\u4e0b\u8111\u5b50\u54b1\u5c31\u80fd\u53d1\u73b0\uff0c\u8fd9\u79cd\u60c5\u51b5\u6839\u672c\u4e0d\u53ef\u80fd\u51fa\u73b0\uff08~~\u8fd9\u9898\u76ee\u660e\u663e\u662f\u6df7\u6dc6\u89c6\u542c~~\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/oifzghgw.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u5047\u8bbe\u6709\u4e09\u4e2a\u57ce\u5e02A\uff0cB\uff0cC\uff0cAB\u8ddd\u79bb\u4e3aa\uff0cBC\u8ddd\u79bb\u4e3ab\uff0cAC\u8ddd\u79bb\u4e3ac\n\n\u5982\u679cA\u8981\u8fdeB\uff0c\u90a3\u4e48\u6709a < c;\n\n\u5982\u679cB\u8981\u8fdeC\uff0c\u90a3\u4e48\u6709b < a;\n\n\u5982\u679cC\u8981\u8fdeA\uff0c\u90a3\u4e48\u6709c < b;\n\n\u663e\u7136\u4e0d\u53ef\u80fd\u6210\u7acb\n\n\n------------\n\n\u73b0\u5728\u5c31\u56de\u53d1\u73b0\u8fd9\u5c31\u662f\u4e2a~~\u7b80\u5355~~\u7684\n### \u6700\u5c0f\u751f\u6210\u6811\u6c42\u8fb9\u6743\u548c\u7684\u95ee\u9898\n\n\n------------\n\n\u5fc3\u6f6e\u6f8e\u6e43\u7684\u6253\u4e86\u4e00\u4e2akruskal\n\n\u5f88\u597d\uff0c\u53ea\u7ed9\u4e86\u621160\u5206\uff0cT\u4e86\u4e09\u4e2a\u70b9\uff0c\u8fd8\u7206\u7a7a\u95f4\u4e86\n\n\n------------\n\n### \u539f\u56e0\u662f\u5efa\u7684\u8fd9\u4e2a\u56fe\u662f\u4e2a\u7a20\u5bc6\u56fe\uff0c5000\u7684\u6570\u636e\uff0c\u7b97\u4e00\u4e0b\u6709\u591a\u5c11\u8fb9\u5c31\u77e5\u9053\u5b83\u4f1a\u7206\uff0c\u7528kruskal\u8dd1\u592a\u6162\u4e86\uff0c\u663e\u7136\u7528prim\u4f1a\u66f4\u5feb\u4e00\u70b9\uff08kruskal\u662f\u904d\u5386\u8fb9\uff0cprim\u662f\u904d\u5386\u70b9\uff09\n\n\u65e2\u7136\u6253prim\uff0c\u7ed9\u5b83\u52a0\u4e0a\u70b9\u4f18\u961f\u5427\n\n\u8fd9\u5f88\u597d\uff0c\u53ef\u662f\u53ea\u7ed9\u4e86\u621170\u5206\n\n#### \u8003\u8651\u5230\u7528priority_queue\u7684\u5e38\u6570\u592a\u5927\uff0c\u8fd8\u662f\u4f1a\u7206\u7a7a\u95f4\uff0c\u53ea\u80fd\u9009\u62e9\u521a\u5f00\u59cb\u5b66\u751f\u6210\u6811\u5c31\u88ab\u6211\u4eec\u629b\u5f03\u7684prim\u66b4\u529b\u6c42\u6cd5\u4e86\n\n\n------------\n\n\u6700\u540e\u5728\u66b4\u529bprim\u4e4b\u4e0b\uff0c\u7ec8\u4e8e\u5c06\u8fd9\u9053\u9898\u7eff\u4e86\n\n\u4e0b\u9762\u9644\u4e0aAC\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\nusing namespace std;\nconst int MAXN=5001;\n\nint n,cnt;\nint ctx[MAXN],cty[MAXN];\ndouble ans;\nbool vis[MAXN];\ndouble dis[MAXN];\n\ninline double getlen(int u,int v){\n\tlong long a=pow(ctx[u]-ctx[v],2)+pow(cty[u]-cty[v],2);\n\treturn sqrt(a);\n}\n\ninline void prim(){\n\tfor(int i=1;i<=n;++i) dis[i]=2100000000;\n\tdis[1]=0;\n\tint qs=1;\n\tfor(int k=1;k<n;k++){\n\t\tint wz;double mmin=2100000000;\n\t\tvis[qs]=1;\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tif(vis[i])continue;\n\t\t\tdouble len=getlen(qs,i);\n\t\t\tif(dis[i] > len) dis[i]=len;\n\t\t}\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tif(mmin > dis[i] && !vis[i]){\n\t\t\t\t\tmmin = dis[i];\n\t\t\t\t\twz = i;\n\t\t\t\t}\n\t\t}\n\t\tqs=wz;\n\t}\n\t\t\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%d%d\",&ctx[i],&cty[i]);\n\t}\n\tprim();\n\tfor(int i=1;i<=n;++i)ans+=dis[i];\n\tprintf(\"%.2lf \",ans);\n\treturn 0;\n}\n```\n\n~~\u53ef\u80fd\u6709dalao\u4f1a\u7528kruskal\u548cprim\u4f18\u961f\uff0c\u8fd8\u662f\u6211\u592a\u5f31\u4e86~~\n\n## \u6709\u4ec0\u4e48\u4e0d\u61c2\u7684~~\u6216\u8005\u6211\u81ea\u5df1\u72af\u7684sb\u9519\u8bef~~\uff0c\u8bf7\u6307\u51fa\n\n\n",
        "postTime": 1600515402,
        "uid": 230580,
        "name": "Suzt_ilymtics",
        "ccfLevel": 6,
        "title": "P1265 \u516c\u8def\u4fee\u5efa \u9898\u89e3"
    },
    {
        "content": "#### \u53d1\u73b0\u5176\u4ed6\u7684\u9898\u89e3\u90fd\u6ca1\u6709\u7ed9\u51fa\u5408\u7406\u7684\u8bc1\u660e\u8bf4\u5b83\u4e3a\u4ec0\u4e48\u662f\u6700\u5c0f\u751f\u6210\u6811\r\n\r\n~~\u5426\u5219\u5b83\u600e\u4e48\u96be\u5ea6\u6807\u7b7e\u4f1a\u66f4\u6a21\u677f\u9898\u4e0d\u4e00\u6837~~\r\n\r\n##### \u9996\u5148\u8bc1\u660e\uff081\uff09\u7684\u786e\u5b9e\u662f\u7b26\u5408\u6700\u5c0f\u751f\u6210\u6811\u7684\r\n\r\n![](https://cdn.luogu.com.cn/upload/image_hosting/o6cy0hnr.png)\r\n\r\n\u8fd9\u91ccC\u4ee3\u8868\u4e86\u9664\u4e86A\uff0cB\u5269\u4e0b\u7684\u8282\u70b9\uff0c\u7531\u9898\u610f\u53ef\u4ee5\u77e5\u9053$\u57081\\le\u57082,\u57083$\u90a3\u8fd9\u4e09\u5768\u8981\u60f3\u6784\u6210\u6700\u5c0f\u751f\u6210\u6811\uff0c\u80af\u5b9a\u662f\u8981\u9009\u57081\u548c\u57082\uff0c\u57083\u4e2d\u8f83\u5c0f\u7684\u4e00\u4e2a\uff0c\u800c\u4e0d\u9009\u57082\u548c\u57083\r\n\r\n##### \u6211\u4eec\u6765\u770b\u770b\u7b2c\u4e8c\u4e2a\r\n\r\n![](https://cdn.luogu.com.cn/upload/image_hosting/9ph55la6.png)\r\n\r\n\u8981\u60f3\u4ea7\u751f\uff082\uff09\u8fd9\u79cd\u60c5\u51b5\uff0c\u5fc5\u5b9a\u6709$\u57081\\le\u57082$,$\u57082\\le\u57083$,$\u57083\\le\u57081$\u90a3\u4e5f\u5c31\u662f\u4e09\u6761\u8fb9\u90fd\u662f\u4e00\u6837\u957f\u7684\uff0c\u90a3\u968f\u4fbf\u9009\u4e24\u6761\u90fd\u662f\u53ef\u4ee5\u7684\u3002\r\n\r\n#### \u7efc\u4e0a\uff0c\u8fd9\u6837\u624d\u80fd\u770b\u51fa\u5b83\u786e\u5b9e\u662f\u6700\u5c0f\u751f\u6210\u6811\r\n\r\n\u4ee3\u7801\u96be\u5ea6\u6bd4\u8f83\u4f4e\uff0c\u5c31\u662f\u4e00\u4e2a\u6a21\u677f\r\n\r\n#### \u4f46\u662f\u6ce8\u610f\u5047\u5982\u5f3a\u884c\u52a0$n^2$\u6761\u8fb9\u4f1aMLE\uff0c\u5176\u5b9e\u6211\u4eec\u4e0d\u7528\u5b58\u6bcf\u6761\u8fb9\uff0c\u56e0\u4e3a\u53ef\u4ee5$O(1)$\u8ba1\u7b97\u4efb\u610f\u4e24\u70b9\u7684\u8ddd\u79bb\r\n\r\n```cpp\r\n#include<cstdio>\r\n#include<cmath>\r\n#include<cstring>\r\nusing namespace std;\r\n\r\n#define N 5103\r\n\r\ntemplate<class TT> inline void read(TT &xx)\r\n\r\n{\r\n\r\n\u200b\txx=0;char cc=getchar();bool ff=false;\r\n\r\n\u200b\twhile(cc<'0'||cc>'9'){if(cc=='-')ff=true; cc=getchar();}\r\n\r\n\u200b\twhile(cc>='0'&&cc<='9'){xx=(xx<<3)+(xx<<1)+cc-'0';cc=getchar();}\r\n\r\n\u200b\tif(ff) xx=-xx;\r\n\r\n}\r\n\r\nint x[N],y[N],n;\r\n\r\ndouble dis[N],ans;\r\n\r\nbool v[N];\r\n\r\n#define d(i,j) sqrt((double)(x[i]-x[j])*(x[i]-x[j])+(double)(y[i]-y[j])*(y[i]-y[j]))\r\n\r\n#define min(i,j) (i<j)?i:j\r\n\r\nint main()\r\n\r\n{\r\n\r\n\u200b    freopen(\"road.in\",\"r\",stdin);\r\n\r\n\u200b    read(n);\r\n\r\n\u200b    for(int i=1;i<=n;i++) read(x[i]),read(y[i]),dis[i]=(double)100000008;\r\n\r\n\u200b    dis[1]=0;\r\n\r\n\u200b    for(int k=1;k<=n;k++)\r\n\r\n\u200b    {\r\n\r\n\u200b        double w=(double)100000008;\r\n\r\n\u200b        int pos=666;//w\u8bb0\u5f55\u6700\u77ed\u8ddd\u79bb\uff0cpos\u8bb0\u5f55\u6700\u8fd1\u8282\u70b9\r\n\r\n\u200b        for(int j=1;j<=n;j++)\r\n\r\n\u200b            if(!v[j] && w>dis[j])\r\n\r\n\u200b                pos=j,w=dis[j];\r\n\r\n\u200b        //printf(\"get- dis[%d]=%lf\\n\",pos,dis[pos]);\r\n\r\n\u200b        v[pos]=true;\r\n\r\n\u200b        ans+=dis[pos];\r\n\r\n\u200b        for(int j=1;j<=n;j++)\r\n\r\n\u200b            if(!v[j]) dis[j]=min(dis[j],d(pos,j));\r\n\r\n\u200b    }\r\n\r\n\u200b    printf(\"%.2lf\\n\",ans);\r\n\r\n\u200b    return 0;\r\n\r\n}\r\n```\r\n\r\n\r\n\r\n",
        "postTime": 1596257568,
        "uid": 70533,
        "name": "\u725b\u74dc\u74dc",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "\u60ca\u4e86\u90fd\u6ca1\u6709\u4e00\u4e2a\u5806\u4f18\u5316\u7684PRIM\u5417~~\u65f6\u95f4\u5b9d\u8d35~~\n\n\u672c\u9898\u7684\u6761\u4ef6\u4e8c\u771f\u7684\u662f\u6709\u6bd2\n~~\u770b\u4e86\u9898\u89e3\u60ca\u9192~~\n\n\u5047\u5982\u6709\u8fd9\u6837\u4e00\u4e2a\u73af\uff0c\u90a3\u5c31\u53ea\u80fd\u662f\u4e2a\u7b49\u8fb9\u4e09\u89d2\u5f62\u4e86\uff0c\u56e0\u4e3a\u662f\u4fee\u6700\u77ed\u7684\u8def\u561b\uff0c\u8fd9\u6837\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u88f8\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e86\uff0c\u4f46\u53c8\u662f\u4e00\u4e2a\u5b8c\u5168\u56fe\uff0c\u6240\u4ee5\u8fd8\u662f\u8981\u7528PRIM\u3002\n\n\u8981\u6ce8\u610f\uff0c\u65e2\u7136\u56fe\u592a\u5927\u5b58\u5750\u6807\u73b0\u7b97\u8ddd\u79bb\uff0c\u5c31\u8981\u8003\u8651\u5230\u8303\u56f4\uff0c\u672c\u9898\u7684\u6570\u636e\u8303\u56f4int\u4f1a\u7206\u7684\uff0c\u6240\u4ee5\u8981\u5728\u6c42\u8ddd\u79bb\u65f6\u8f6c\u5316\u4e3adouble\uff0c\u9632\u6b62\u6570\u636eboom\n\ncode\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,cnt,xy[2][10001],vist[10000];\ndouble ans,dis[10001];\npriority_queue<int,vector<pair<double,int> >,greater<pair<double,int> > > q;\ndouble jl(int x,int y)\n{return sqrt((double)abs(xy[0][x]-xy[0][y])*abs(xy[0][x]-xy[0][y])+(double)abs(xy[1][x]-xy[1][y])*abs(xy[1][x]-xy[1][y]));}\nvoid prim(){\n\tfor(int i=2;i<=n;i++)dis[i]=1e9+7;\n\tq.push(make_pair(0,1));\n\twhile(!q.empty()){\n\t\tint u=q.top().second;q.pop();\n\t\tif(vist[u])continue;\n\t\tvist[u]=1;\n\t\t++cnt;\n\t\tans+=dis[u];\n\t\tfor(int i=1;i<=n;i++)\n\t\t{double jll=jl(u,i);\n\t\tif(jll<dis[i]){dis[i]=jll;q.push(make_pair(dis[i],i));}\n\t\t}\n\t\tif(cnt==n)break;\n\t}\n}\nint main(){\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)cin>>xy[0][i]>>xy[1][i];\n\tprim();\n\tprintf(\"%.2lf\",ans);\n} \n```\n\u7801\u98ce\u5de8\u4e11",
        "postTime": 1549703062,
        "uid": 116388,
        "name": "SFWR",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "## \u4e00\u9053\u7ed5\u4e86\u51e0\u4e2a\u5f2f\u7684\u677f\u5b50\u9898\n### \u4ec5\u6b64\u800c\u5df2\n\u4e4d\u4e00\u770b\u8fd9\u9898\u597d\u5413\u4eba\u554a\uff0c\u53c8\u662f\u5206\u8f6e\u6765\u4fee\u5efa\u53c8\u662f\u53ef\u80fd\u4e0d\u540c\u57ce\u5e02\u7533\u8bf7\u4fee\u5efa\u540c\u4e00\u6761\u7ebf\u8def\u53c8\u662f\u5982\u679c\u6210\u73af\u514d\u6389\u6700\u77ed\u4e00\u6761\u8def\u7684\uff0c\u770b\u7740\u5c31\u6655\uff0c\u4e0d\u8fc7\u5dee\u4e0d\u591a\u77e5\u9053\u8fd9\u662f\u4e2a\u6700\u5c0f\u751f\u6210\u6811\n\n\u5148\u4ece\u770b\u8d77\u6765\u6700\u9ebb\u70e6\u7684\u4e0b\u624b\uff1a\u5982\u679c\u6210\u73af\u514d\u6389\u6700\u77ed\u7684\u4e00\u6761\u8def\uff0c\u597d\u597d\u7528\u7528\u4f60\u5343\u5e74\u8d2a\u5fc3\u7684\u505a\u3010\u6c34\u3011\u9898\u4e60\u60ef\uff0c\u53ef\u80fd\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u5417\uff1f\uff01\u663e\u7136\u3010\u539f\u8c05\u6211\u4f7f\u7528\u8fd9\u4e48\u6076\u52a3\u7684\u8bcd\u6c47\u3011\u5982\u679c\u4f60\u7528Prim\u6216\u8005Kruskal\u7b97\u6cd5\u7b49\u6b63\u5e38\u7b97\u6cd5\u662f\u4e0d\u7528\u7279\u6b8a\u8003\u8651\u4e5f\u4e0d\u7528\u52a0\u5224\u65ad\u6761\u4ef6\u7684\n\n\u7136\u540e\uff0c\u5982\u679c\u4e0d\u540c\u57ce\u5e02\u7533\u8bf7\u4fee\u5efa\u540c\u4e00\u6761\u7ebf\u8def\u5c31\u5171\u540c\u4fee\u5efa\uff0c\u8fd9\u4e2a\u66f4\u660e\u663e\u662f\u53e5\u5e9f\u8bdd\n\n\u518d\u6b21\uff0c\u5f88\u591a\u540c\u5fd7\u4e00\u770b\u5206\u8f6e\u4fee\u5efa\u5c31\u60f3\u614c\uff1a\u201c\u5206\u8f6e\u4fee\u5efa\u662f\u4e0d\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u9ad8\uff1f\u201d\u201c\u662f\u4e0d\u662f\u8981\u591a\u5faa\u73af\uff1f\u201d\u201c\u662f\u4e0d\u662f\u52a0\u4e86\u5c31\u5f88\u96be\uff1f\u201d\n\nBut\uff0c\u5728\u8fd9\u4e2a\u9898\u91cc\u5206\u8f6e\u4fee\u5efa\u4e5f\u662f\u5e9f\u8bdd\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u8fd9\u5c31\u662f\u4e00\u9053\u2026\u2026\u9898\u9762\u7ed5\u4e86\u65e0\u6570\u4e2a\u5f2f\u3010\u8bf4\u4e86\u65e0\u6570\u53e5\u5e9f\u8bdd\u3011\u7684\u6700\u5c0f\u751f\u6210\u6811\u677f\u5b50\u9898\n\n\u6211\u4f1aPrim\uff01\u6211\u4f1aKruskal\uff01\n\n\u9644\uff1aPrim\u4e0d\u7528\u4f18\u5316\u8fd9\u9898\u4e5f\u80fd\u8fc7\n\n```c\n#include<cstdio>\n#include<cmath>\nusing namespace std;\ndouble x[5001],y[5001];\ndouble e[5001][5001],dis[5001],book[5001]={0};\ndouble max(double x,double y)\n{\n\tif(x>y)\n\treturn x;\n\treturn y;\n}\ndouble min(double x,double y)\n{\n\tif(x>y)\n\treturn y;\n\treturn x;\n}\ndouble jvli(double x1,double y1,double x2,double y2)\n{\n\tif(x1==x2)\n\treturn max(y1,y2)-min(y1,y2);\n\tif(y1==y2)\n\treturn max(x1,x2)-min(x1,x2);\n\tdouble hehe=max(y1,y2)-min(y1,y2);\n\tdouble haha=max(x1,x2)-min(x1,x2);\n\treturn sqrt(hehe*hehe+haha*haha);\n}\nint main()\n{\n\tdouble n,m,minn,t1,t2,t3;\n\tint i,j,k;\n\tdouble inf=9999999;\n\tint cnt=0;\n\tdouble sum=0;\n\tscanf(\"%lf\",&n);\n\tfor(i=1;i<=n;i++)//\u521d\u59cb\u5316\n\tfor(j=1;j<=n;j++)\n\tif(i==j)\n\te[i][j]=0;\n\telse\n\te[i][j]=inf;\n\tfor(i=1;i<=n;i++)\n\tscanf(\"%lf%lf\",&x[i],&y[i]);\n\tfor(i=1;i<=n;i++)\n\tfor(j=1;j<=n;j++)\n\t{\n\t\tt3=jvli(x[i],y[i],x[j],y[j]);//\u8ddd\u79bb\u5b58\u50a8\u3010\u7206MLE\u3011\n\t\te[i][j]=t3;\n\t\te[j][i]=t3;\n\t}\n\t//\u8dd1\u677f\u5b50\n    for(i=1;i<=n;i++)\n\tdis[i]=e[1][i];\n\tbook[1]=1;\n\tcnt++;\n\twhile(cnt<n)\n\t{\n\t\tminn=inf;\n\t\tfor(i=1;i<=n;i++)\n\t\t{\n\t\t\tif(book[i]==0&&dis[i]<minn)\n\t\t\t{\n\t\t\t\tminn=dis[i];\n\t\t\t\tj=i;\n\t\t\t}\n\t\t}\n\t\tbook[j]=1;cnt++;\n\t\tsum+=dis[j];\n\t\tfor(k=1;k<=n;k++)\n\t\t{\n\t\t\tif(book[k]==0&&dis[k]>e[j][k])\n\t\t\tdis[k]=e[j][k];\n\t\t}\n\t}\n\tprintf(\"%.2lf\",sum);\n\treturn 0;\n} \n```\n\u671f\u671b100\uff0c\u60b2\u5267\u53d1\u751f\uff0c\u53ea\u670980\n\n#### \u6ce8\u610f\u770b\u770b\u6570\u636e\u8303\u56f4\n\nn<5000\u5982\u679c\u5f005000*5000\u7684\u6570\u7ec4\u80af\u5b9a\u4f1aMLE\u554a\uff01\n\n\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4e0b\u4e0d\u7528\u6570\u7ec4\u5b58\u50a8\u6570\u636e\uff0c\u5728\u8dd1\u677f\u5b50\u7684\u65f6\u5019\u987a\u4fbf\u7b97\u51fa\u6765\u5c31\u53ef\u4ee5\n\n### Prim AC\u4ee3\u7801\n\n```c\n#include<cstdio>\n#include<cmath>\nusing namespace std;\ndouble x[5001],y[5001];\ndouble dis[5001],book[5001]={0};\ndouble max(double x,double y)\n{\n\tif(x>y)\n\treturn x;\n\treturn y;\n}\ndouble min(double x,double y)\n{\n\tif(x>y)\n\treturn y;\n\treturn x;\n}\ndouble jvli(double x1,double y1,double x2,double y2)//\u8ba1\u7b97\u8ddd\u79bb\u51fd\u6570\n{\n\tif(x1==x2)\n\treturn max(y1,y2)-min(y1,y2);\n\tif(y1==y2)\n\treturn max(x1,x2)-min(x1,x2);\n\tdouble hehe=max(y1,y2)-min(y1,y2);\n\tdouble haha=max(x1,x2)-min(x1,x2);\n\treturn sqrt(hehe*hehe+haha*haha);//\u5229\u7528\u52fe\u80a1\u5b9a\u7406\n}\nint main()\n{\n\tdouble n,m,minn,t1,t2,t3;\n\tint i,j,k;\n\tdouble inf=9999999;//\u6b63\u65e0\u7a77\n\tint cnt=0;\n\tdouble sum=0;\n\tscanf(\"%lf\",&n);\n\tfor(i=1;i<=n;i++)\n\tscanf(\"%lf%lf\",&x[i],&y[i]);//\u8bfb\u5165\u5750\u6807\n\t//\u8dd1\u677f\u5b50ing\n    for(i=1;i<=n;i++)\n\tdis[i]=jvli(x[1],y[1],x[i],y[i]);//\u6b64\u5904\u7701\u7565\u8c03\u7528\u6570\u7ec4\uff0c\u76f4\u63a5\u8ba1\u7b97\u8ddd\u79bb\n\tbook[1]=1;\n\tcnt++;\n\twhile(cnt<n)\n\t{\n\t\tminn=inf;\n\t\tfor(i=1;i<=n;i++)\n\t\t{\n\t\t\tif(book[i]==0&&dis[i]<minn)\n\t\t\t{\n\t\t\t\tminn=dis[i];\n\t\t\t\tj=i;\n\t\t\t}\n\t\t}\n\t\tbook[j]=1;cnt++;\n\t\tsum+=dis[j];\n\t\tfor(k=1;k<=n;k++)\n\t\t{\n\t\t\tif(book[k]==0&&dis[k]>jvli(x[j],y[j],x[k],y[k]))//\u8ddd\u79bb\u76f4\u63a5\u8ba1\u7b97\n\t\t\tdis[k]=jvli(x[j],y[j],x[k],y[k]);\n\t\t}\n\t}\n\tprintf(\"%.2lf\",sum);\n\treturn 0;//\u7a0b\u5e8f\u7684\u7ed3\u675f\uff0c\u4e16\u754c\u7684\u6d88\u901d\n} \n```\n\u770b\u5230\u6709\u67d0\u540c\u5b66\u7528\u7684Kruskal\uff0c\u7b2c\u4e00\u904d70\uff0c\u4e24\u4e2a\u70b9MLE\u4e00\u4e2a\u70b9TLE\n\n\u5f88\u60f3\u4e0d\u660e\u767dPrim\u65e0\u4f18\u5316\u90fd\u80fd\u8fc7Kruskal\u4e3a\u4ec0\u4e48\u4f1a\u8d85\u65f6\n\nHis Code\n```\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\nlong long n,cnt=0;\nlong long x[5050],y[5050],s[5050];\nstruct edge\n{\n\tlong long u,v;\n\tdouble w;\n}a[12500050];\nvoid addedge(int u,int v)\n{\n\ta[++cnt].u=u;\n\ta[cnt].v=v;\n\ta[cnt].w=sqrt((x[u]-x[v])*(x[u]-x[v])+(y[u]-y[v])*(y[u]-y[v]));\n}\ndouble comp(const edge &a,const edge &b)\n{\n\treturn a.w<b.w;\n}\nint search(int l)\n{\n\tif(s[l]==l)\n\t\treturn l;\n\telse \n\t\treturn s[l]=search(s[l]);\n}\nvoid linkl(int l,int m)\n{\n\ts[search(l)]=search(m);\n}\nint main()\n{\n\tint i,j,z=0;\n\tdouble result=0;\n\tscanf(\"%lld\",&n);\n\tfor(i=1;i<=n;i++)\n\t\tscanf(\"%lld%lld\",&x[i],&y[i]);\n\tfor(i=1;i<=n-1;i++)\n\t\tfor(j=i+1;j<=n;j++)\n\t\t\taddedge(i,j);\n\tfor(i=1;i<=n;i++)\n\t\ts[i]=i;\n\tsort(a+1,a+1+cnt,comp);\n\tfor(i=1;i<=cnt;i++)\n\t{\n\t\tif(search(a[i].u)!=search(a[i].v))\n\t\t{\n\t\t\tz++;\n\t\t\tlinkl(a[i].u,a[i].v);\n\t\t\tresult+=a[i].w;\n\t\t}\n\t\tif(z==n-1)\n\t\t\tbreak;\n\t}\n\tprintf(\"%0.2lf\",result);\n\treturn 0;\n} \n```\n\u5f52\u6839\u7ed3\u5e95\u8fd8\u662f\u6570\u7ec4\u5f00\u5927\u4e86\uff0c\u628a\u6570\u636e\u5728\u8dd1\u677f\u5b50\u7684\u65f6\u5019\u7b97\u5c31\u884c\uff0c\u8fd8\u80fd\u5c11\u7b97\u4e0d\u5c11\u6ca1\u7528\u7684\n\n\u5728\u8fd9\u91cc\uff0c\u672c\u4eba\u8877\u5fc3\u5e0c\u671b\u5927\u5bb6\u4e0d\u8981\u91cd\u8e48\u8986\u8f99\n\n\u5ba1\u6838\u771f\u597d\u770b\uff01\u7ed9\u8fc7\u5427QwQ",
        "postTime": 1579003252,
        "uid": 224579,
        "name": "FXY\u662f\u849f\u84bb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "### \u672c\u8d28\u662f\u6c42\u6700\u5c0f\u751f\u6210\u6811\u3002\u5bf9\u4e8e\u89c4\u52192\uff0c\u6784\u6210\u73af\u5219\u7533\u8bf7\u65f6\u53bb\u6389\u6700\u5927\u8fb9\u3002\n\n~~\u56e0\u4e3a\u6700\u591a\u67095000\u4e2a\u70b9\uff0c\u53c8\u662f\u5b8c\u5168\u56fe\uff0c\u6545\u4e0d\u91c7\u7528Kruskal\u7b97\u6cd5\u3002~~\n\n\u6240\u4ee5\u5c31\u4f7f\u7528prim\u7b97\u6cd5\n\n\u5148\u4ecb\u7ecd\u4e00\u4e0b\u5427\uff1a\n\n\u666e\u91cc\u59c6\u7b97\u6cd5\uff0c\u56fe\u8bba\u4e2d\u7684\u4e00\u79cd\u7b97\u6cd5\uff0c\u53ef\u5728\u52a0\u6743\u8fde\u901a\u56fe\u91cc\u641c\u7d22\u6700\u5c0f\u751f\u6210\u6811\u3002\u610f\u5373\u6b64\u7b97\u6cd5\u641c\u7d22\u5230\u7684\u8fb9\u5b50\u96c6\u6240\u6784\u6210\u7684\u6811\u4e2d\uff0c\u4e0d\u4f46\u5305\u62ec\u8fde\u901a\u56fe\u91cc\u7684\u6240\u6709\u9876\u70b9\uff0c\u4e14\u5176\u6240\u6709\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u4ea6\u4e3a\u6700\u5c0f\u3002\n\n \u4ece\u5355\u4e00\u9876\u70b9\u5f00\u59cb\uff0c\u666e\u91cc\u59c6\u7b97\u6cd5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u9010\u6b65\u6269\u5927\u6811\u4e2d\u6240\u542b\u9876\u70b9\u7684\u6570\u76ee\uff0c\u76f4\u5230\u904d\u53ca\u8fde\u901a\u56fe\u7684\u6240\u6709\u9876\u70b9\u3002\n    \n    \uff081\uff09\u8f93\u5165\uff1a\u4e00\u4e2a\u52a0\u6743\u8fde\u901a\u56fe\uff0c\u5176\u4e2d\u9876\u70b9\u96c6\u5408\u4e3aV\uff0c\u8fb9\u96c6\u5408\u4e3aE\uff1b\n    \uff082\uff09\u521d\u59cb\u5316\uff1aVnew = {x}\uff0c\u5176\u4e2dx\u4e3a\u96c6\u5408V\u4e2d\u7684\u4efb\u4e00\u8282\u70b9\uff08\u8d77\u59cb\u70b9\uff09\uff0cEnew = {}\uff1b\n    \uff083\uff09\u91cd\u590d\u4e0b\u5217\u64cd\u4f5c\uff0c\u76f4\u5230Vnew = V\uff1a\n            \u5728\u96c6\u5408E\u4e2d\u9009\u53d6\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff08u, v\uff09\uff0c\u5176\u4e2du\u4e3a\u96c6\u5408Vnew\u4e2d\u7684\u5143\u7d20\uff0c\u800cv\u5219\u4e0d\u662f\uff08\u5982\u679c\u5b58\u5728\u6709\u591a\u6761\u6ee1\u8db3\u524d\u8ff0\u6761\u4ef6\u5373\u5177\u6709\u76f8\u540c\u6743\u503c\u7684\u8fb9\uff0c\u5219\u53ef\u4efb\u610f\u9009\u53d6\u5176\u4e2d\u4e4b\u4e00\uff09\uff1b\n            \u5c06v\u52a0\u5165\u96c6\u5408Vnew\u4e2d\uff0c\u5c06\uff08u, v\uff09\u52a0\u5165\u96c6\u5408Enew\u4e2d\uff1b\n    \uff084\uff09\u8f93\u51fa\uff1a\u4f7f\u7528\u96c6\u5408Vnew\u548cEnew\u6765\u63cf\u8ff0\u6240\u5f97\u5230\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u7136\u540e\u53d1\u73b0\u4e86\u4e00\u4e2a\u5f88\u6709\uff08keng\uff09\u8da3\uff08ren\uff09\u7684\u73b0\u8c61\uff1a\n\u8ba1\u7b97\u4e24\u70b9\u95f4\u8ddd\u79bb\u65f6\uff0c\u56e0\u4e3a\u70b9\u7684\u5750\u6807\u662f\u6574\u6570\uff0c\u56e0\u6b64\u8981\u5c06\u5750\u6807\u5e73\u65b9\u8fdb\u884c\u7c7b\u578b\u5f3a\u5236\u8f6c\u6362\u3002\n```cpp\ndouble value(int i,int j){\n        return sqrt( (double)(x[i]-x[j])*(x[i]-x[j]) + (double)(y[i]-y[j])*(y[i]-y[j]) );\n    }\n```\n\n\u5982\u679c\u5199\u6210\n```cpp\ndouble value(int i,int j){\n        return sqrt( (x[i]-x[j])*(x[i]-x[j]) + (y[i]-y[j])*(y[i]-y[j]) );\n    }\n\n```\n\u5c31\u4f1a\u6b7b9\u4e2a\u70b9\uff08\u67e5\u4e86\u5f88\u4e45\uff09\n\nac\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint m,x[5001],y[5001];\nint vis[5001];\ndouble dis[5001],dist;\ndouble ans=0;\ndouble value(int i,int j){\n    return sqrt( (double)(x[i]-x[j])*(x[i]-x[j]) + (double)(y[i]-y[j])*(y[i]-y[j]) );\n}\nvoid prim(){\n    for(int i=1;i<=m;i++)dis[i]=1e20;\n    dis[1]=0;\n    int V=1;\n    for(int i=1;i<=m;i++){\n        double minn=1e20;\n        for(int j=1;j<=m;j++)\n            if(!vis[j])\n                if(minn>dis[j]){\n                    minn=dis[j];\n                    V=j;\n                }\n        vis[V]=1;\n        ans+=dis[V];\n        for(int j=1;j<=m;j++)\n            if(!vis[j]){\n                dist=value(V,j);\n                if(dis[j]>dist)dis[j]=dist;\n            }\n    }\n}\nint main(){\n    cin>>m;\n    for(int i=1;i<=m;i++)cin>>x[i]>>y[i];\n    prim();\n    printf(\"%.2f\\n\",ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1558077300,
        "uid": 132947,
        "name": "xmh060606",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "prim\u7b97\u6cd5\u7684\u601d\u60f3\uff0c\u4f46\u662f\u662fdfs\u7684\u5199\u6cd5\uff0c\uff08\u6211\u7adf\u7136\u81ea\u5df1\u5c31\u5199\u51fa\u6765prim\u7b97\u6cd5\u4e86\uff1f\uff09\u3002\n\n\u4e3a\u4e86\u4e0d\u53bb\u8dd1\u6392\u5e8f\uff0c\u6bcf\u6b21\u52a0\u8fb9\u7684\u65f6\u5019\uff0c\u548c\u73b0\u5728\u7684\u8054\u901a\u5757\u5df2\u5b58\u5728\u7684\u8fb9\u8fdb\u884c\u6bd4\u8f83\uff0c\u7136\u540e\u66f4\u77ed\u7684\u53d6\u4ee3\u6389\u957f\u7684\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a\u8054\u901a\u5757\u5f53\u4e00\u4e2a\u70b9\u6765\u770b\u3002\n\n\u5199\u6cd5\u7c97\u7cd9\uff0ca[i]\u8868\u793a\u4ece\u73b0\u5728\u7684\u8054\u901a\u5757\u5230i\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0cb[i]\u8868\u793a\u8fd9\u4e2a\u6700\u77ed\u8ddd\u79bb\u662f\u4ece\u8054\u901a\u5757\u91cc\u90a3\u4e2a\u70b9\u6c42\u51fa\u6765\u7684\uff0c\u8fd9\u6837\u65b9\u4fbf\u8ba1\u7b97\u7b54\u6848\uff0c\u7b54\u6848\u6bcf\u6b21\u5c31\u52a0\u4e0ai\u5230b[i]\u7684\u8ddd\u79bb\u3002\u81f3\u4e8e\u8fd9\u4e2a\u6700\u77ed\u7684i\uff0c\u5faa\u73af\u4e00\u8fb9\uff0c\u8fb9\u770b\u8fb9\u5b58\u3002\n\n\u4ee3\u7801\u5f88\u4e11\uff0c\u968f\u4fbf\u770b\u770b\u3002\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n;\nlong long x[500000];\nlong long y[500000];\nlong long a[500000];\nint b[500000];\ndouble ans;\nint pr[500000];\n\nint findfa(int x)\n{\n    if(pr[x]==x)\n        return x;\n    return pr[x]=findfa(pr[x]);\n}\n\nvoid dfs(int d,int k)\n{\n    if(k==n)\n    {\n        printf(\"%.2f\\n\",ans);\n        exit(0);\n    }\n    int mind;\n    long long minn=1e17;\n    for(int i=1;i<=n;i++)\n    {\n        if(d==i);\n        if(findfa(i)==findfa(d))continue;\n        long long h=(x[d]-x[i])*(x[d]-x[i])+(y[d]-y[i])*(y[d]-y[i]);\n        if(a[i]>h)\n        {\n            a[i]=h;\n            b[i]=d;\n        }\n        if(minn>a[i])\n        {\n            mind=i;\n            minn=a[i];\n        }\n    }\n    d=b[mind];\n    ans+=sqrt((double)((x[d]-x[mind])*(x[d]-x[mind])+(y[d]-y[mind])*(y[d]-y[mind])));\n    pr[findfa(mind)]=findfa(d);\n    dfs(mind,k+1);\n}\n\nint main()\n{\n    scanf(\"%d\",&n);\n    memset(a,0x3f,sizeof(a));\n    for(int i=1;i<=n;i++)\n    {\n        pr[i]=i;\n        scanf(\"%lld%lld\",&x[i],&y[i]);\n    }\n    dfs(1,1);\n    printf(\"%.2f\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1532144423,
        "uid": 34663,
        "name": "redegg",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "## \u9898\u610f\n\u7ed9\u51fa\u5e73\u9762\u4e0a\u7684$n(\u22645000)$\u4e2a\u70b9\uff0c \u70b9\u4e0e\u70b9\u4e4b\u95f4\u53ef\u4ee5\u8fde\u8fb9\uff0c\u8ddd\u79bb\u4e3a\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n## \u5206\u6790\n\u6211\u4eec\u53d1\u73b0\uff0c\u8fb9\u6570\u81f3\u591a\u4e3a$n^2$\uff0c\u5982\u679c\u7528\u5806\u4f18\u5316\u7684$Prim$\u6216$Kruskal$\u5fc5\u7136\u4e0d\u5982\u6734\u7d20\u7684$Prim$\u6765\u7684\u8981\u5feb\u3002\n\n\u8003\u8651\u5982\u4f55\u5efa\u56fe\u3002\u6211\u4eec\u5c06\u6bcf\u4e24\u4e2a\u70b9\u90fd\u8fde\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743\u4e3a\u4e24\u70b9\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff0c\u7136\u540e\u8dd1$Prim$\u3002\n\n\u4f46\u662f\u8fd9\u6837\u5efa\u56fe\u592a\u8d39\u65f6\u95f4\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4e0d\u628a\u56fe\u5efa\u51fa\u6765\uff0c\u53ea\u5b58$n$\u4e2a\u70b9\uff0c\u6bcf\u6b21\u8dd1$Prim$\u65f6\u66f4\u65b0\u4e0e\u5f53\u524d\u70b9\u6240\u8fde\u63a5\u7684\u70b9\u65f6\uff0c\u518d\u4f9d\u6b21\u904d\u5386\u9664\u4e86\u5f53\u524d\u70b9\u4ee5\u5916\u7684\u6240\u6709\u70b9\u66f4\u65b0$Dist$\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u8dd1$Prim$\u8fa3\u3002\n\n```cpp\ninline void prim(){\n        ans = 0;\n        for (int i = 1; i <= n; i++) dist[i] = inf;\n        dist[1] = 0;\n        for (int i = 0; i < n; i++){\n            int min_d = inf,x = 0;\n            for (int j = 1; j <= n; j++){\n                if (!vis[j] && dist[j] < min_d){\n                    min_d = dist[j];\n                    x = j;\n                }\n            }\n            vis[x] = true;\n            for (int j = 1; j <= n; j++){\n                if (j == x || vis[j]) continue;\n                dist[j] = std::min(dist[j],get(loc[x],loc[j]));\n            }\n        }\n        for (int i = 1; i <= n; i++) ans += dist[i];\n    }\n```\n",
        "postTime": 1598595435,
        "uid": 317459,
        "name": "RyexAwl",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "\u5927\u5bb6\u5927\u6982\u770b\u770b\u9898\u76ee\u5c31\u4f1a\u53d1\u73b0\u5927\u6982\u662f\u6700\u5c0f\u751f\u6210\u6811\u95ee\u9898\u3002\n\n\u5728\u5ba1\u6279\u89c4\u5219(2)\u90a3\u4e00\u5757\u6211\u81ea\u5df1\u5dee\u70b9\u7ed5\u6655\u81ea\u5df1\u4e86\uff0c\u6240\u4ee5\u6211\u5f97\u8bf4\u4e00\u4e0b\u3002\n\n\u89c4\u5219\u5199\u7684\u662f\uff1a\u5982\u679c\u4e09\u4e2a\u6216\u4ee5\u4e0a\u7684\u57ce\u5e02\u7533\u8bf7\u4fee\u5efa\u7684\u516c\u8def\u6210\u73af\u3002\u5982\u4e0b\u56fe\uff0cA\u7533\u8bf7\u4fee\u5efa\u516c\u8defAB\uff0cB\u7533\u8bf7\u4fee\u5efa\u516c\u8defBC\uff0cC\u7533\u8bf7\u4fee\u5efa\u516c\u8defCA\u3002\u5219\u653f\u5e9c\u5c06\u5426\u51b3\u5176\u4e2d\u6700\u77ed\u7684\u4e00\u6761\u516c\u8def\u7684\u4fee\u5efa\u7533\u8bf7\uff1b\n\n![](https://cdn.luogu.com.cn/upload/pic/80.png)\n\n\u4e4d\u4e00\u770b\uff0c\u53bb\u6389\u6700\u77ed\u7684\u4e00\u6761\uff0c\u90a3\u4e48\u53c8\u597d\u50cf\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e86\uff1f\u5176\u5b9e\u5e76\u4e0d\u662f\uff0c\u6211\u4eec\u53ea\u8981\u4e0d\u5efa\u6210\u73af\uff0c\u5c31\u53ef\u4ee5\u9009\u6700\u77ed\u7684\u4e24\u6761\u6765\u4fee\u5efa\uff0c\u81ea\u7136\u8fd8\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u5e38\u89c1\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u6709\u4e09\u4e2a\uff0cprim\u3001\u5806\u4f18\u5316prim\u3001Kruscal\uff0c\u590d\u6742\u5ea6\u662fO(n^2)\u3001O(nloge)\u3001O(eloge)\uff0cprim\u5e38\u5e38\u662f\u88ab\u4eba\u9057\u5fd8\u7684\uff0c\u56e0\u4e3an^2\u901a\u5e38\u6570\u91cf\u8fc7\u5927\u3002\u800c\u8fd9\u9898\u70b9\u4e4b\u95f4\u4e24\u4e24\u6709\u8fb9\uff0c\u8fb9\u6570\u4e3a5000 * 5000\uff0c\u8fbe\u5230\u4e862.5 * 10^7\u3002\n\n\u8fd9\u9898\u5f00\u7684\u7a7a\u95f4\u662f125MB\uff0c\u5148\u8bf4\u4e00\u4e0b\u7a7a\u95f4\u5927\u6982\u600e\u4e48\u7b97\u3002\u6bd4\u5982\u8fd9\u9898\uff0c\u6211\u4eec\u5f00\u4e00\u4e2a2e7\u5de6\u53f3\u7684double\u6570\u7ec4\u7684\u8bdd\uff0c\u6211\u4eec\u77e5\u9053double\u53608\u5b57\u8282\uff0c\u6240\u4ee5\u7a7a\u95f4\u5c31\u662f8 * 2e7 / (1024 * 1024)\u2248190MB\u3002\n\n\u5355\u770b\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e09\u4e2a\u7b97\u6cd5\u90fd\u662f\u6ee1\u8db3\u7684\u3002\u800c\u5806\u4f18\u5316prim\u548cKruscal\u90fd\u9700\u8981\u5b58\u8fb9\uff0c\u7ecf\u8fc7\u521a\u624d\u7684\u8ba1\u7b97\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u662f\u6ca1\u6709\u90a3\u4e48\u591a\u7a7a\u95f4\u7ed9\u6211\u4eec\u5b58\u4e0b\u7684\u3002\n\n\u666e\u901a\u7684prim\u5c31\u4e0d\u4e00\u6837\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u7ed9\u5750\u6807\u7684\u56fe\uff0c\u6211\u4eec\u662f\u4e0d\u9700\u8981\u5b58\u8fb9\u7684\uff0c\u53ef\u4ee5\u73b0\u7b97\u3002\n\nprim\u7684\u6a21\u677f\u662f\u8fd9\u6837\u7684\n```\nint ans=0,End=-1;\n    for(i=1;i<=n;i++)\n    {\n        End=-1;\n        for(j=1;j<=n;j++)\n        {\n            if(!vis[j]&&(End==-1||d[End]>d[j]))//\u6bcf\u6b21\u90fd\u5148\u52a0\u5165\u4e00\u4e2a\u6ca1\u52a0\u5165\u7684\u70b9\uff0c\u4e4b\u540e\u9009\u62e9\u5f53\u524d\u5230\u70b9\u96c6\u6700\u8fd1\u7684\u70b9\u52a0\u5165\n                End=j;\n        }\n        vis[End]=1;\n        ans+=d[End];\n        for(j=1;j<=n;j++)\n        {\n            if(!vis[j]&&d[j]>road[End][j])//\u5224\u65ad\u6bcf\u4e2a\u70b9\u5230\u65b0\u7684\u70b9\u8ddd\u79bb\u662f\u5426\u5c0f\u4e8e\u5230\u4e4b\u524d\u70b9\u96c6\u7684\u8ddd\u79bb\n            d[j]=road[End][j]; //\u4fdd\u8bc1\u6bcf\u6b21\u66f4\u65b0\u4ee5\u540e\uff0c\u6bcf\u4e2ad\u3010i\u3011\u90fd\u662f\u5230\u8fd9\u4e2a\u70b9\u96c6\u7684\u6700\u77ed\uff1b\n        }\n    }\n```\n\u5728\u6b64\u4e5f\u662f\u7528road[][]\u6765\u5b58\u4e86\u8fb9\uff0c\u5982\u679c\u662f\u5750\u6807\uff0c\u6211\u4eec\u53ef\u4ee5\u66ff\u6362\u6210\u8fd9\u6837\u3002\n\n```\n    db ans=0.0;\n    int End=-1;\n    for(int i=1;i<=n;i++)\n    {\n        End=-1;\n        for(int j=1;j<=n;j++)\n        {\n            if(!vis[j]&&(End==-1||d[End]>d[j]))\n                End=j;\n        }\n        vis[End]=1;\n        ans+=d[End];\n         for(int j=1;j<=n;j++)\n        {\n            db f=sqrt((x[End]-x[j])*(x[End]-x[j])+(y[End]-y[j])*(y[End]-y[j]));\n            if(!vis[j]&&d[j]>f)\n                d[j]=f;\n        }\n    }\n```\n\u6ce8\u610f\u770b\uff0c\u6211\u5728\u540e\u9762\u7684for\u5faa\u73af\u4e2d\uff0c\u7528f\u53d8\u91cf\u6765\u4fdd\u5b58\u5e76\u8ba1\u7b97\u8ddd\u79bb\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u73b0\u7528\u73b0\u7b97\uff0c\u5b8c\u5168\u4e0d\u9700\u8981\u5b58\u8fb9\uff0c\u53ea\u9700\u8981\u7528x[],y[]\u6570\u7ec4\u5b58\u4e00\u4e0b\u5750\u6807\u5373\u53ef\uff0c\u5f005000\u7684\u4e00\u7ef4\u6570\u7ec4\u7a7a\u95f4\u662f\u975e\u5e38\u5c0f\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u4e86\u3002\n\n\u4e0b\u9762\u4e0aAC\u4ee3\u7801\uff0c\u9644\u5e26\u4e86\u4e00\u4e9b\u6211\u7528\u5f97\u6bd4\u8f83\u987a\u624b\u4e14\u6613\u61c2\u7684\u5b8f\u5b9a\u4e49\uff0c\u4e0d\u4f1a\u5f71\u54cd\u9605\u8bfb\u3002\u5982\u679c\u8fd8\u662f\u89c9\u5f97\u96be\u8bfb\uff0c\u4e5f\u53ef\u4ee5\u53ea\u770b\u770b\u4e0a\u9762\u601d\u8def\u5c31\u884c\u4e86\uff0c\u522b\u7684\u5927\u4f6c\u5df2\u7ecf\u7ed9\u51fa\u4e86\u5f88\u591a\u975e\u5e38\u5b8c\u7f8e\u7684\u4ee3\u7801\u3002\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,k,n) for(int i=k;i<=n;i++)\n#define per(i,n,k) for(int i=n;i>=k;i--)\n#define pb push_back\n#define fi first\n#define se second\n#pragma GCC optimize(3,\"Ofast\",\"inline\")//\u5f00\u542fO3\u52a0\u901f\ntypedef long long ll;\ntypedef double db;\n int intread()//\u5feb\u901f\u8bfb\u5165\n{\n    int x=0,f=1;\n    char c=getchar();\n    while(c<'0'||c>'9')\n    {\n        if(c=='-')\n            f=-1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9')\n    {\n        x=x*10+c-'0';\n        c=getchar();\n    }\n    return x*f;\n}\ndb d[5005];\nbool vis[5005];\ndb x[5005],y[5005];\nint main()\n{\n    int n=intread();\n    rep(i,1,n)\n    {\n        scanf(\"%lf%lf\",&x[i],&y[i]);\n        cout<<x[i]<<' '<<y[i]<<endl;\n        d[i]=1e18;\n    }\n    d[1]=0.0;\n    db ans=0.0;\n    int End=-1;\n    rep(i,1,n)\n    {\n        End=-1;\n        rep(j,1,n)\n        {\n            if(!vis[j]&&(End==-1||d[End]>d[j]))\n                End=j;\n        }\n        vis[End]=1;\n        ans+=d[End];\n        rep(j,1,n)\n        {\n            db f=sqrt((x[End]-x[j])*(x[End]-x[j])+(y[End]-y[j])*(y[End]-y[j]));\n            if(!vis[j]&&d[j]>f)\n                d[j]=f;\n        }\n    }\n    printf(\"%.2f\",ans);\n    return 0;\n}\n```\n\u8fd8\u6709\u4e0d\u7406\u89e3\u53ef\u4ee5\u5728\u8bc4\u8bba\u53bb\u63d0\u95ee\uff0c\u5982\u679c\u6709\u4ec0\u4e48\u5efa\u8bae\u4e5f\u6b22\u8fce\u63d0\u51fa!",
        "postTime": 1594712536,
        "uid": 277023,
        "name": "YuanZhizheng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "\u9996\u5148\u5bf9\u4e8e\u4e09\u4e2a\u70b9\u7684\u73af\u6700\u5c0f\u7684\u4e00\u6761\u8fb9\u4e00\u5b9a\u662f\u5b83\u4e24\u4e2a\u9876\u70b9\u6240\u8fde\u7684\u6700\u5c0f\u8fb9\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u5b58\u5728\u89c4\u5219\u4e8c\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u5176\u6b21\u8fd9\u9898\u8fb9\u6570\u592a\u591a\uff0cPrim\u901f\u5ea6\u8981\u6bd4Kruskal\u5feb\u5f88\u591a\u3002\n\n\u7b2c\u4e09\uff0c\u5f00double\u7684\u4e8c\u7ef4\u6570\u7ec4\u5185\u5b58\u662f200\u591aMB,\u8fd9\u9898\u9650\u5236128\uff0c\u4e0d\u884c\u3002\u6240\u4ee5\u7528\u5230\u5c31\u73b0\u7b97\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\uff08\u6838\u5fc3\u4ee3\u7801\u53ea\u6709\u51e0\u884c\uff09\n\n//\u8fb9\u6570\u8f83\u5c11\u53ef\u4ee5\u7528Kruskal,\u56e0\u4e3aKruskal\u7b97\u6cd5\u6bcf\u6b21\u67e5\u627e\u6700\u77ed\u7684\u8fb9.\n\n//\u8fb9\u6570\u8f83\u591a\u53ef\u4ee5\u7528Prim,\u56e0\u4e3a\u5b83\u662f\u6bcf\u6b21\u52a0\u4e00\u4e2a\u9876\u70b9,\u5bf9\u8fb9\u6570\u591a\u7684\u9002\u7528.\n\n\n\n\n\n\n        \n\n```cpp\n// P1265 \u516c\u8def\u4fee\u5efa\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\nconst int maxn = 5010;\nint n;\ndouble x[maxn],y[maxn],d[maxn],ans=0;\nbool vis[maxn]={false,true};\ninline double cal(int i,int j)\n{\n    return sqrt((x[i]-x[j])*(x[i]-x[j]) + (y[i]-y[j])*(y[i]-y[j]));\n}\nvoid Prim()\n{\n    int Dis=0x7fffffff,p=0;\n    for(int i=1;i<=n;i++) d[i] = cal(1,i);\n    for(int k=1;k<n;k++,p=0,Dis=0x7fffffff) {\n        for(int i=1;i<=n;i++) if(!vis[i] && Dis > d[i]) p = i,Dis = d[i];//\u627e\u51fa\u8ddd\u79bb\u6811\u6700\u8fd1\u7684\u70b9\n        vis[p] = true;//\u6302\u5230\u6811\u4e0a\n        ans += d[p];\n        for(int i=1;i<=n;i++) if(!vis[i] && d[i] > cal(i,p)) d[i] = cal(i,p);//\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb \n    }\n}\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++) cin>>x[i]>>y[i];\n    Prim();\n    printf(\"%.2lf\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1509937950,
        "uid": 17326,
        "name": "\u6797\u5fd7\u6770",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "\u770b\u89c1\u8ba8\u8bba\u6709\u4eba\u53d1\u5173\u4e8epascal\u7684\uff0c\u5c31\u662f\u6b63\u5e38\u7684prim\uff0c\u4e0d\u7528\u4f18\u5316\u5427...\n\n```cpp\nvar\n q,b,c:array[1..5001]of real;\n ok:array[1..5001]of boolean;\n total,min:real;\n i,j,n,k,w:longint;\nfunction len(l1,l2:longint):real;\nvar\n l3,l4:real;\nbegin\n l3:=sqr(b[l1]-b[l2]);\n l4:=sqr(c[l1]-c[l2]);\n len:=sqrt(l3+l4);\nend;\nbegin\n readln(n);\n fillchar(ok,sizeof(ok),true);\n fillchar(q,sizeof(q),$7F);\n ok[1]:=false;\n for i:=1 to n do\n  read(b[i],c[i]);\n k:=1;\n for i:=1 to n-1 do\n  begin\n   min:=maxlongint;\n   for j:=1 to n do\n    if ok[j] then\n     if len(k,j)<q[j] then q[j]:=len(k,j);\n   for j:=1 to n do\n    if ok[j]=true then\n     if q[j]<min then\n      begin\n       min:=q[j]; w:=j;\n      end;\n   if min<>maxlongint then\n    begin\n     total:=total+min;\n     ok[w]:=false;\n     k:=w;\n    end;\n end;\n write(total:0:2);\nend.\n\n```",
        "postTime": 1467543728,
        "uid": 12988,
        "name": "rAIn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "## \u3010\u9898\u76ee\u63cf\u8ff0\u3011\n\u67d0\u56fd\u6709n\u4e2a\u57ce\u5e02\uff0c\u5b83\u4eec\u4e92\u76f8\u4e4b\u95f4\u6ca1\u6709\u516c\u8def\u76f8\u901a\uff0c\u56e0\u6b64\u4ea4\u901a\u5341\u5206\u4e0d\u4fbf\u3002\u4e3a\u89e3\u51b3\u8fd9\u4e00\u201c\u884c\u8def\u96be\u201d\u7684\u95ee\u9898\uff0c\u653f\u5e9c\u51b3\u5b9a\u4fee\u5efa\u516c\u8def\u3002\u4fee\u5efa\u516c\u8def\u7684\u4efb\u52a1\u7531\u5404\u57ce\u5e02\u5171\u540c\u5b8c\u6210\u3002\n\n\u4fee\u5efa\u5de5\u7a0b\u5206\u82e5\u5e72\u8f6e\u5b8c\u6210\u3002\u5728\u6bcf\u4e00\u8f6e\u4e2d\uff0c\u6bcf\u4e2a\u57ce\u5e02\u9009\u62e9\u4e00\u4e2a\u4e0e\u5b83\u6700\u8fd1\u7684\u57ce\u5e02\uff0c\u7533\u8bf7\u4fee\u5efa\u901a\u5f80\u8be5\u57ce\u5e02\u7684\u516c\u8def\u3002\u653f\u5e9c\u8d1f\u8d23\u5ba1\u6279\u8fd9\u4e9b\u7533\u8bf7\u4ee5\u51b3\u5b9a\u662f\u5426\u540c\u610f\u4fee\u5efa\u3002\n\n\u653f\u5e9c\u5ba1\u6279\u7684\u89c4\u5219\u5982\u4e0b\uff1a\n\n\uff081\uff09\u5982\u679c\u4e24\u4e2a\u6216\u4ee5\u4e0a\u57ce\u5e02\u7533\u8bf7\u4fee\u5efa\u540c\u4e00\u6761\u516c\u8def\uff0c\u5219\u8ba9\u5b83\u4eec\u5171\u540c\u4fee\u5efa\uff1b\n\n\uff082\uff09\u5982\u679c\u4e09\u4e2a\u6216\u4ee5\u4e0a\u7684\u57ce\u5e02\u7533\u8bf7\u4fee\u5efa\u7684\u516c\u8def\u6210\u73af\u3002\u5982\u4e0b\u56fe\uff0cA\u7533\u8bf7\u4fee\u5efa\u516c\u8defAB\uff0cB\u7533\u8bf7\u4fee\u5efa\u516c\u8defBC\uff0cC\u7533\u8bf7\u4fee\u5efa\u516c\u8defCA\u3002\u5219\u653f\u5e9c\u5c06\u5426\u51b3\u5176\u4e2d\u6700\u77ed\u7684\u4e00\u6761\u516c\u8def\u7684\u4fee\u5efa\u7533\u8bf7\uff1b\n\n\uff083\uff09\u5176\u4ed6\u60c5\u51b5\u7684\u7533\u8bf7\u4e00\u5f8b\u540c\u610f\u3002\n\n\u4e00\u8f6e\u4fee\u5efa\u7ed3\u675f\u540e\uff0c\u53ef\u80fd\u4f1a\u6709\u82e5\u5e72\u57ce\u5e02\u53ef\u4ee5\u901a\u8fc7\u516c\u8def\u76f4\u63a5\u6216\u95f4\u63a5\u76f8\u8fde\u3002\u8fd9\u4e9b\u53ef\u4ee5\u4e92\u76f8\uff1a\u8fde\u901a\u7684\u57ce\u5e02\u5373\u7ec4\u6210\u201c\u57ce\u5e02\u8054\u76df\u201d\u3002\u5728\u4e0b\u4e00\u8f6e\u4fee\u5efa\u4e2d\uff0c\u6bcf\u4e2a\u201c\u57ce\u5e02\u8054\u76df\u201d\u5c06\u88ab\u770b\u4f5c\u4e00\u4e2a\u57ce\u5e02\uff0c\u53d1\u6325\u4e00\u4e2a\u57ce\u5e02\u7684\u4f5c\u7528\u3002\n\n\u5f53\u6240\u6709\u57ce\u5e02\u88ab\u7ec4\u5408\u6210\u4e00\u4e2a\u201c\u57ce\u5e02\u8054\u76df\u201d\u65f6\uff0c\u4fee\u5efa\u5de5\u7a0b\u4e5f\u5c31\u5b8c\u6210\u4e86\u3002\n\n\u4f60\u7684\u4efb\u52a1\u662f\u6839\u636e\u57ce\u5e02\u7684\u5206\u5e03\u548c\u524d\u9762\u8bb2\u5230\u7684\u89c4\u5219\uff0c\u8ba1\u7b97\u51fa\u5c06\u8981\u4fee\u5efa\u7684\u516c\u8def\u603b\u957f\u5ea6\u3002\n\n## \u3010\u8f93\u5165\u683c\u5f0f\u3011\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570n\uff0c\u8868\u793a\u57ce\u5e02\u7684\u6570\u91cf\u3002(n\u22645000)\n\n\u4ee5\u4e0bn\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570x\u548cy\uff0c\u8868\u793a\u4e00\u4e2a\u57ce\u5e02\u7684\u5750\u6807\u3002(-1000000\u2264x\uff0cy\u22641000000)\n\n## \u3010\u8f93\u51fa\u683c\u5f0f\u3011\n\u4e00\u4e2a\u5b9e\u6570\uff0c\u56db\u820d\u4e94\u5165\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\uff0c\u8868\u793a\u516c\u8def\u603b\u957f\u3002\uff08\u4fdd\u8bc1\u6709\u60df\u4e00\u89e3\uff09\n\n## \u3010\u89e3\u9898\u601d\u8def\u3011\n\u8fd9\u9898\u5f88\u663e\u7136\u662f\u4e00\u9053\u6c42\u89e3MST\u7684\u9898\u76ee\uff0c\u5148\u770b\u6570\u636e\u89c4\u6a21\uff0cn\u22645000\uff0c\u55ef\uff0c\u7a20\u5bc6\u56fe\uff0cPrim\uff0c\u7136\u540e\u8003\u8651\u90bb\u63a5\u77e9\u9635\uff0cn\u592a\u5927\u5b58\u4e0d\u4e86\uff0c\u518d\u8003\u8651\u90bb\u63a5\u8868\uff0c5000\u4e58\u4ee55000\u4e58\u4ee52\uff08* 2\u662f\u7b97\u4e0a\u53cd\u5411\u8fb9\uff09\uff0c\uff1f\uff1f\uff1f\uff1f\uff1fMLE\u8b66\u544a\n\n\u4e00\u9053\u56fe\u8bba\u9898\u4f60\u544a\u8bc9\u6211\u4e0d\u80fd\u5b58\u56fe\uff1f\uff1f\n\n\u76f4\u63a5\u770b\u6807\u7a0b\uff0c\u54e6\uff0c\u4e00\u8fb9\u627e\u8fb9\u4e00\u8fb9\u7b97\u8ddd\u79bb\uff0c\u597d\u7684\uff0c\u4e00\u53d1AC\n\n**Prim\u597d\u9898**\n\n~~\uff08\u522b\u5fd8\u4e86\u5f00long long\uff09~~\n\n## \u3010AC\u4ee3\u7801\u3011\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream> \n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\nconst double INF = 0x3f3f3f3f / 1.00;\nstruct node\n{\n\tll x, y;\n}a[5010];\nll cal(int x, int y)\n{\n\tll xx = a[x].x - a[y].x;\n\tll yy = a[x].y - a[y].y;\n\tll temp = xx * xx + yy * yy;\n\treturn temp;\n}\ndouble dis[5010];\nbool vis[5010];\nint main()\n{\n\tint n;\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%lld%lld\", &a[i].x, &a[i].y);\n\t\tdis[i] = INF;\n\t}\n\tfor (int i = 1; i <= n; i++)  //\u9884\u5904\u7406\u6e90\u70b9\n\t{\n\t\tdis[i] = double(sqrt(cal(1, i)));\n\t}\n\tvis[1] = true;\n\tdouble sum = 0;\n\tfor (int i = 1; i <= n - 1; i++)  //\u6807\u51c6\u7684Prim\u7b97\u6cd5\n\t{\n\t\tdouble Min = INF / 1.00;\n\t\tint k = 0;\n\t\tfor (int j = 1; j <= n; j++)\n\t\t{\n\t\t\tif (!vis[j] && dis[j] < Min)\n\t\t\t{\n\t\t\t\tMin = dis[j];\n\t\t\t\tk = j;\n\t\t\t}\n\t\t}\n\t\tvis[k] = true;\n\t\tsum += Min;\n\t\tfor (int j = 1; j <= n; j++)\n\t\t{\n\t\t\tdouble d = double(sqrt(cal(k, j)));  //\u8ba1\u7b97\u8ddd\u79bb\n\t\t\tif (!vis[j] && dis[j] > d)\n\t\t\t{\n\t\t\t\tdis[j] = d;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%.2f\\n\", sum);\n\treturn 0;\n}\n```\n",
        "postTime": 1568274129,
        "uid": 226316,
        "name": "YZL11111",
        "ccfLevel": 0,
        "title": "P1265 \u516c\u8def\u4fee\u5efa \u89e3\u9898\u62a5\u544a\uff08Prim\u597d\u9898\uff09"
    },
    {
        "content": "\u57fa\u672c\u4e0a\u662f\u88f8\u6700\u5c0f\u751f\u6210\u6811\u9898\uff0c\u800c\u8fd9\u662f\u7a20\u5bc6\u56fe\uff0c\u8fb9\u5f88\u591a\uff0c\u7528prim\u6548\u7387\u4f1a\u6bd4kruskal\u5feb\u3002\u53e6\u5916\u8fd9\u91cc\u7b97\u8ddd\u79bb\u5750\u6807\u4e00\u5e73\u65b9int\u4f1a\u6ea2\u51fa\uff0c\u6240\u4ee5\u6211\u5750\u6807\u7528\u7684\u662flong\n\nlong \u50a8\u5b58\u3002\u53e6\u5916\u50a8\u5b58\u8fb95000\\*5000\u5185\u5b58\u4f1a\u70b8\uff0c\u6240\u4ee5\u5728prim\u7684\u8fc7\u7a0b\u4e2d\u7b97\u8ddd\u79bb\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee5\u4e0bAC\u7a0b\u5e8f\n\n\n```cpp\n#include<iostream>\n#include<stdio.h>\n#include<string.h>\n#include<math.h>\nusing namespace std;\nint n,m,u,v;\ndouble l[5001],na[5001],INF=99999999,mi,sum=0;\nlong long x[5001],y[5001];\nvoid prim(int v0)\n{\n    sum=0;\n    for(int i=1;i<=n;i++)\n    {\n        na[i]=v0;\n        l[i]=sqrt((x[v0]-x[i])*(x[v0]-x[i])+(y[v0]-y[i])*(y[v0]-y[i]));\n    }\n    na[v0]=-1;\n    for(int i=1;i<n;i++)\n    {\n        v=-1;\n        mi=INF;\n        for(int j=1;j<=n;j++)\n            if(na[j]!=-1&&mi>l[j])\n            {\n                mi=l[j];\n                v=j;\n            }\n        if(v!=-1)\n        {\n            na[v]=-1;\n            sum+=l[v];\n            for(int j=1;j<=n;j++)\n            {\n               double kk=sqrt((x[v]-x[j])*(x[v]-x[j])+(y[v]-y[j])*(y[v]-y[j]));\n              if(na[j]!=-1&&kk<l[j])\n              {\n                  l[j]=kk;\n                  na[j]=v;\n              }\n            }\n        }\n    }\n    printf(\"%.2f\\n\",sum);\n}\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++)\n       cin>>x[i]>>y[i];\n    prim(1);\n    return 0;\n}\n```",
        "postTime": 1499313549,
        "uid": 48424,
        "name": "Alex_Su",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    },
    {
        "content": "\u9996\u5148\u8fd9\u4e2a\u98985000\u4e2a\u70b9\uff0c5000\\*5000log(5000^2)\u7edd\u903c\u7206\u70b8\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528kruskal,\u4e8e\u662f\u53ef\u4ee5\u7528prim\uff0c\u8fd9\u91cc\u7684prim\u53ef\u4ee5\u50cfDJ(\u5fd8\u6389\u4e86)\u4e00\u6837\u4f18\u5316\u5230nlogn\uff0c\u7136\u800c\u6211\u8fd8\u662f\u653e\u51fa\u597d\u7406\u89e3\u7684n^2\u505a\u6cd5\uff085000\u662f\u53ef\u4ee5\u8fc7\u7684\uff09\uff0c\u6ce8\u610f\u8981\u8fb9\u7b97\u8fb9prim(\u5410\u69fdvector\u6162\u7684\u771f\u7684\u662f\u53ef\u4ee5\uff0cTLE\u7684\u540c\u5b66\u4e00\u5b9a\u8981\u6ce8\u610f)\uff0c\u653e\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cmath>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint x[5010][2];double z[5010];\nbool y[5010];\nint n,i,j,k,a,b;double s,min1,t;\ndouble dt(int a,int b)\n{\n  double e1,e2;\n  e1=abs(x[a][0]-x[b][0]);e2=abs(x[a][1]-x[b][1]);\n  return sqrt(e1*e1+e2*e2);\n}      \nint main()\n{\n  s=0.0;  \n  memset(y,true,sizeof(y));  \n  scanf(\"%d\",&n);\n  for (i=1;i<=n;i++)\n     scanf(\"%d%d\",&x[i][0],&x[i][1]);\n  y[1]=false;\n  for (i=2;i<=n;i++)  z[i]=dt(1,i); //printf(\"%.2lf\",z[j]);}\n  for (i=2;i<=n;i++)\n     {\n        min1=1e+300;\n        for (j=1;j<=n;j++)\n           if (y[j] && z[j]<min1) {k=j;min1=z[j];}         \n       s=s+min1;y[k]=false;\n       for (j=1;j<=n;j++)\n         {\n           t=dt(k,j);              \n           if (y[j] && t<z[j])  z[j]=t;   \n         }\n     }  \n  printf(\"%.2lf\\n\",s);\n  return 0;                       \n}\n```",
        "postTime": 1476279361,
        "uid": 14410,
        "name": "Ghost_lzy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1265 \u3010\u516c\u8def\u4fee\u5efa\u3011"
    }
]