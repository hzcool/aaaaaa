[
    {
        "content": "[$\\Large\\color{#FFBBFF}\\textit{Tian-Xing's blog}$](https://Tian-Xing.github.io)\n\n------------\n\n# Description\n\n[\u4f20\u9001\u95e8](https://loj.ac/problem/3118)\n\n------------\n\n# Solution\n\n\u975e\u5e38\u5999\u7684\u4e00\u9053\u9898\u3002\n\n\u9996\u5148\u9898\u76ee\u4e2d\u7684\u5224\u5b9a\u6761\u4ef6\u201c\u8d70\u5230\u62e5\u6709\u5173\u952e\u70b9\u7684\u73af\u201d\u662f\u4e00\u4e2a\u4e0d\u597d\u5224\u5b9a\u7684\u6761\u4ef6\uff0c\u90a3\u4e48\u8003\u8651\u5c06\u95ee\u9898\u8f6c\u5316\u53d8\u4e3a\u597d\u5224\u5b9a\u7684\u3002\n\n\u5c06\u539f\u6765\u7684\u64cd\u4f5c\u201c\u4fdd\u7559\u4e00\u6761\u8fb9\u5176\u5b83\u8fb9\u5168\u90e8\u5220\u9664\u201d\u53d8\u4e3a\u201c\u9009\u62e9\u4e00\u6761\u8fb9\u8d70\u51fa\u53bb\u201d\uff0c\u540c\u65f6\uff0c\u5c06\u83b7\u80dc\u6761\u4ef6\u4ece\u201c\u8d70\u5230\u62e5\u6709\u5173\u952e\u70b9\u7684\u73af\u201d\u53d8\u4e3a\u201c\u53ef\u4ee5\u65e0\u9650\u6b21\u7ecf\u8fc7\u5173\u952e\u70b9\u201d\u3002\n\n\u5982\u679c\u80fd\u65e0\u9650\u6b21\u8d70\u5230\u73af\u4e0a\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u4e4b\u524d\u7684\u8d70\u5230\u6709\u5173\u952e\u70b9\u7684\u73af\u4e0a\uff0c\u9664\u975e\u540e\u624b\u9009\u62e9\u4e00\u6761\u8fb9\u79bb\u5f00\u73af\uff0c\u706b\u8f66\u5c06\u4e00\u76f4\u5728\u73af\u4e0a\u7ed5\u5708\u4e0d\u505c\u7684\u8d70\u5173\u952e\u70b9\uff0c\u4f46\u662f\u5982\u679c\u540e\u624b\u9009\u62e9\u4e86\u4e00\u6761\u79bb\u5f00\u73af\u7684\u8fb9\uff0c\u90a3\u4ed6\u5728\u7b2c\u4e00\u6b21\u7ecf\u8fc7\u90a3\u4e2a\u70b9\u7684\u65f6\u5019\u5c31\u4e0d\u5e94\u8be5\u9009\u62e9\u8d70\u4e0a\u73af\u7684\u8fb9\uff0c\u4f46\u662f\u4ed6\u8d70\u4e0a\u73af\u662f\u56e0\u4e3a\u5728\u90a3\u4e2a\u70b9\u8d70\u4e0a\u73af\u6700\u4f18\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751f\u77db\u76fe\uff0c\u90a3\u4e48\u8f6c\u5316\u540e\u7684\u95ee\u9898\u548c\u8f6c\u5316\u524d\u7684\u95ee\u9898\u5c31\u662f\u7b49\u4ef7\u7684\u4e86\u3002\n\n\u8003\u8651\u201c\u5148\u624b\u53ef\u4ee5\u65e0\u9650\u6b21\u8d70\u5173\u952e\u70b9\u201d\u5982\u4f55\u5224\u5b9a\uff0c\u5982\u679c\u5148\u624b\u80fd\u8d70\u65e0\u9650\u6b21\u5173\u952e\u70b9\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u8d70\u5230\u7684\u70b9\uff0c\u5148\u624b\u90fd\u80fd\u8feb\u4f7f\u540e\u624b\u8d70\u5230\u5173\u952e\u70b9\u3002\n\n\u5373\u6211\u4eec\u6c42\u51fa\u56fe\u4e0a\u5148\u624b\u80fd\u8feb\u4f7f\u540e\u624b\u8d70\u4e0a\u5173\u952e\u70b9\u7684\u70b9\uff0c\u5982\u679c\u8fd9\u4e9b\u70b9\u662f\u5168\u96c6\uff0c\u5219\u540e\u624b\u5728\u8fd9\u4e9b\u70b9\u5fc5\u987b\u65e0\u9650\u6b21\u7684\u8d70\u4e0a\u5173\u952e\u70b9\u3002\n\n\u5982\u679c\u8fd9\u4e9b\u70b9\u4e0d\u662f\u5173\u952e\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e9b\u70b9\u7684\u8865\u96c6\uff0c\u4e00\u5b9a\u662f\u540e\u624b\u83b7\u80dc\uff0c\u4ee5\u4e3a\u540e\u624b\u603b\u53ef\u4ee5\u4e0d\u8d70\u5230\u5173\u952e\u70b9\u3002\n\n\u540c\u65f6\uff0c\u5148\u624b\u80fd\u8feb\u4f7f\u540e\u624b\u8d70\u4e0a\u5173\u952e\u70b9\u7684\u70b9\u53ef\u80fd\u4e0d\u80fd\u65e0\u9650\u6b21\u7684\u8d70\u4e0a\uff0c\u5f53\u4e14\u4ec5\u5f53\u540e\u624b\u5728\u8fd9\u4e9b\u70b9\u53ef\u4ee5\u8fdb\u5165\u4e4b\u524d\u6c42\u8fc7\u7684\u540e\u624b\u5fc5\u80dc\u7684\u70b9\u96c6\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u5148\u624b\u53ef\u80fd\u83b7\u80dc\u7684\u70b9\u96c6\u53c8\u7f29\u5c0f\u4e86\uff0c\u7ee7\u7eed\u5728\u8fd9\u4e2a\u7f29\u5c0f\u540e\u7684\u7684\u70b9\u96c6\u4e0a\u641c\u51fa\u5148\u624b\u53ef\u80fd\u83b7\u80dc\u7684\u70b9\u96c6\uff0c\u76f4\u5230\u6ee1\u8db3\u8be5\u70b9\u96c6\u5c31\u662f\u5168\u96c6\u7684\u6761\u4ef6\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u5c31\u662f\u5148\u624b\u5fc5\u80dc\u7684\u70b9\u96c6\u3002\n\n\u7531\u4e8e\u6bcf\u6b21\u8fed\u4ee3\u603b\u4f1a\u4f7f\u5148\u624b\u53ef\u80fd\u83b7\u80dc\u7684\u70b9\u96c6\u53d8\u5c0f\uff0c\u6240\u4ee5\u6700\u591a\u8fed\u4ee3$O(n)$\u6b21\uff0c\u6bcf\u6b21\u65f6\u95f4\u590d\u6742\u5ea6$O(n + m)$\uff0c\u603b\u4f53\u6700\u574f\u662f$O(n ^ 2 + nm)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n------------\n\n# Code\n\n```cpp\n#include \"train.h\"\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 5000;\n\nint vis[N + 50], res;\n\nvector<int> edge1[N + 50], edge2[N + 50];\n\nvector<int> Get(vector<int> a, vector<int> res, vector<int> r, int typ)\n{\n    int n = a.size();\n    memset(vis, 0, sizeof(vis));\n    vector<int> ans(N + 50), deg(N + 50);\n    queue<int> q;\n    for (int i = 0; i < n; i++) if (r[i] && res[i]) q.push(i), ans[i] = 1;\n    for (int i = 0; i < n; i++) for (int j = 0; j < edge1[i].size(); j++) if (res[edge1[i][j]]) if (typ ^ a[i]) deg[i]++; else deg[i] = 1;\n    while (!q.empty())\n    {\n        int u = q.front(); q.pop();\n        for (vector<int>::iterator it = edge2[u].begin(); it != edge2[u].end(); it++)\n        {   \n            int v = *it;\n            if (!ans[v] && res[v])\n            {\n                deg[v]--;\n                if (!deg[v]) ans[v] = 1, q.push(v);\n            }\n        }\n    }\n    return ans;\n}\n\nvector<int> who_wins(vector<int>a, vector<int>r, vector<int>u, vector<int>v)\n{\n    int n = a.size(), m = u.size();\n    vector<int> res(N + 50);\n    for (int i = 0; i < n; i++) res[i] = 1;\n    for (int i = 0; i < m; i++) edge1[u[i]].push_back(v[i]), edge2[v[i]].push_back(u[i]);\n    while (1)\n    {\n        int flag = 1;\n        vector<int> fa = Get(a, res, r, 1);\n        for (int i = 0; i < n; i++)\n            if (!fa[i] && res[i])\n            {\n                flag = 0;\n                break;\n            }\n        if (flag) return res;\n        for (int i = 0; i < n; i++) fa[i] ^= 1;\n        vector<int> fb = Get(a, res, fa, 0);\n        for (int i = 0; i < n; i++) if (fb[i]) res[i] = 0;\n    }\n    return res;\n}\n```",
        "postTime": 1604242282,
        "uid": 73983,
        "name": "Infiltrator",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3838 \u3010Toy Train \u73a9\u5177\u706b\u8f66\u3011"
    }
]