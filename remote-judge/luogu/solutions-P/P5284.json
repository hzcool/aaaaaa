[
    {
        "content": "\u521a\u8bf4\u5b8cd1t1\u662f\u9053\u4e0d\u9519\u7684\u6e29\u6696\u9898\uff0c\u7d27\u63a5\u7740\u5c31\u6765\u4e86\u4e00\u4e2a\u4ee4\u4eba\u53d1\u6307\u7684\u91cd\u5de5\u4e1a\u3002\n\n\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u5b57\u7b26\u4e32s\u4ee5\u53ca\u4e24\u7c7b\u533a\u95f4\uff0c\u518d\u7ed9\u5b9a\u4e00\u4e9b\u4ece\u7b2c\u4e00\u7c7b\u533a\u95f4\u8fde\u5411\u7b2c\u4e8c\u7c7b\u533a\u95f4\u7684\u8fb9\uff0c\u4e00\u4e2a\u7b2c\u4e8c\u7c7b\u533a\u95f4\u80fd\u8fde\u5411\u4e00\u4e2a\u7b2c\u4e00\u7c7b\u533a\u95f4\u5f53\u4e14\u4ec5\u5f53\u524d\u8005\u662f\u540e\u8005\u7684\u524d\u7f00\u3002\u6bcf\u4e2a\u7b2c\u4e00\u7c7b\u533a\u95f4\u7684\u4ef7\u503c\u662f\u533a\u95f4\u957f\u5ea6\uff0c\u6c42\u8fd9\u5f20\u56fe\u4e0a\u7684\u6700\u957f\u8def\uff08\u6216\u5224\u65ad\u65e0\u9650\u957f\uff09\u3002\n\nemmmm...\u8bf4\u9053\u6700\u957f\u8def\uff0c\u8fd9\u663e\u7136\u662f\u4e00\u4e2a\u56fe\u8bba\u95ee\u9898\u3002\u5982\u679c\u8fd9\u5f20\u56fe\u662f\u7ed9\u5b9a\u7684\u8bdd\uff0c\u8fd9\u5c31\u662f\u4e00\u9053\u5c0f\u6e05\u65b0\u7684noip\u9898\u4e86\uff1a\u53ea\u9700\u5148\u8dd1\u4e2atarjan\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u80fd\u56de\u5230\u81ea\u5df1\uff08\u80fd\u7684\u8bdd\u5c31\u662f-1\uff09\uff0c\u7136\u540e\u5728dag\u4e0adp\u5373\u53ef\u3002\n\n\u7136\u800c...\u54ea\u6709\u8fd9\u4e48\u7b80\u5355\u7684\u4e8b\u554a\uff01\u8fd9\u660e\u660e\u662f\u4e00\u9053\u5b57\u7b26\u4e32\u9898\u597d\u4f10\uff01\n\n\u6211\u4eec\u9700\u8981\u8003\u8651\u7684\u5c31\u662f\uff0c\u7b2c\u4e8c\u7c7b\u533a\u95f4\u5411\u7b2c\u4e00\u7c7b\u533a\u95f4\u7684\u8fb9\u8be5\u600e\u4e48\u8fde\uff1f\n\n\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e2a\u6211\u5728\u8003\u573a\u4e0a\u5b9e\u73b0\u7684\u540e\u7f00\u6811\u505a\u6cd5\uff1a\n\n\u6bcf\u4e00\u4e2a\u5b50\u4e32\u5728\u540e\u7f00\u6811\u4e0a\u90fd\u5bf9\u5e94\u4e00\u4e2a\u8282\u70b9\uff0c\u4e00\u4e2a\u70b9\u7684\u7956\u5148\u5bf9\u5e94\u7684\u5b50\u4e32\u5c31\u662f\u5f53\u524d\u5b50\u4e32\u7684\u524d\u7f00\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u6bcf\u4e2a\u5b50\u4e32\u90fd\u5728\u540e\u7f00\u6811\u4e0a\u5b9a\u4f4d\u5230\u8282\u70b9\uff0c\u518d\u5bf9\u4e8e\u6bcf\u4e2a\u7b2c\u4e8c\u7c7b\u5b50\u4e32\uff0c\u5411\u5176\u5b50\u6811\u5185\u6240\u6709\u70b9\u8fde\u8fb9\u5373\u53ef\u3002\n\n\u4ec0\u4e48\uff1f\u540e\u7f00\u6811\u600e\u4e48\u5efa\uff1fsam\u603b\u4f1a\u5427\uff08\u4e0d\u4f1a\u81ea\u884c\u53f3\u8f6c\u6a21\u677f\uff09\uff0c\u53cd\u4e32\u7684sam\u7684parent\u6811\u5c31\u662f\u6b63\u4e32\u7684\u540e\u7f00\u6811\u5566\u3002\n\n\u5b50\u4e32\u5b9a\u4f4d\u7684\u8fc7\u7a0b\u662f\u901a\u8fc7\u500d\u589e\u6765\u5b9e\u73b0\u7684\uff0c\u5148\u627e\u5230\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u5bf9\u5e94\u540e\u7f00\u7684\u8282\u70b9\uff0c\u518d\u500d\u589e\u5730\u5f80\u4e0a\u8df3\uff0c\u76f4\u5230\u8fd9\u4e2a\u70b9\u7684len>=\u533a\u95f4\u957f\u5ea6\uff0c\u5b83\u7684fa\u7684len<\u533a\u95f4\u957f\u5ea6\u5373\u53ef\u3002\n\n\u81f3\u4e8e\u8fde\u8fb9\uff0c\u5f53\u7136\u53ef\u4ee5dfs\u5e8f\u4e0a\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff08\u6ca1\u9519\u6211\u8003\u573a\u4e0a\u8111\u5b50\u4e00\u70ed\u5199\u7684\u5c31\u662f\u8fd9\u4e2a\uff09\uff0c\u4e0d\u8fc7\u4ed4\u7ec6\u60f3\u60f3\u53d1\u73b0\u8fd9\u5176\u5b9e\u4e5f\u6ca1\u5fc5\u8981\uff1a\u4f60\u7684\u540e\u7f00\u6811\u672c\u8eab\u5c31\u80fd\u76f4\u63a5\u5e2e\u4f60\u4f18\u5316\u5efa\u56fe\u561b\u3002\n\n\u4e8e\u662f\u4f60\u7801\u554a\u7801\uff0c\u7ec8\u4e8e\u5728\u594b\u62182\u5c0f\u65f6\u540e\uff0c\u4e00\u4efd5k+\u7684\u4ee3\u7801\u65b0\u9c9c\u51fa\u7089\u4e86\uff01\n\n\u7136\u800c\u4e00\u6d4b\u6837\u4f8b......\u86e4\uff1f\u600e\u4e48\u8fde\u5c0f\u6837\u4f8b\u90fd\u8fc7\u4e0d\u53bb\uff1f\uff01\uff08\u5c0f\u6837\u4f8b\u7684\u6700\u540e\u4e00\u4e2a\u70b9\u4f1a\u88ab\u5224\u6210-1\uff09\n\n\u4f60\u51b7\u9759\u4e0b\u6765\u7ec6\u7ec6\u601d\u8003......\u7b49\u7b49\uff0c\u6570\u636e\u8303\u56f4\u91cc\u7684\u90a3\u4e2aai>=bj\u662f\u5e72\u561b\u7684\uff1f\n\n\u6d4b\u4e00\u4e0bai>=bj\u7684\u6837\u4f8b......\u5c45\u7136\u8fc7\u4e86......\n\n\u90a3\u4e48ai<bj\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u4ec0\u4e48bug\u5462\uff1f\n\n\u95ee\u9898\u5c31\u51fa\u5728\u540e\u7f00\u6811\u4e0a\u3002\u4e00\u4e2a\u540e\u7f00\u6811\u4e0a\u7684\u8282\u70b9\u53ef\u80fd\u5bf9\u5e94\u591a\u4e2a\u957f\u5ea6\u4e0d\u540c\u7684\u4e32\uff0c\u6b64\u65f6\u5982\u679c\u6211\u4eec\u5355\u7eaf\u5730\u5c06\u6bcf\u4e2a\u7b2c\u4e8c\u7c7b\u533a\u95f4\u5411\u5176\u5b50\u6811\u8fde\u8fb9\uff0c\u5c31\u4f1a\u9519\u8bef\u5730\u628a\u5f53\u524d\u8282\u70b9\u4e0a\u53ef\u80fd\u66f4\u77ed\u7684\u7b2c\u4e00\u7c7b\u533a\u95f4\u7684\u70b9\u5f53\u6210\u53ef\u4ee5\u8f6c\u79fb\u7684\u70b9\uff01\n\n\u90a3\u600e\u4e48\u529e\uff1f\u62c6\u70b9\uff01\n\n\u4e00\u65e6\u6709\u8fd9\u79cd\u60c5\u51b5\u7684\u51fa\u73b0\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u628a\u8fd9\u4e2a\u70b9\u8fde\u5411fa\u7684\u8fb9\u4e2d\u95f4\u5f3a\u884c\u585e\u8fdb\u53bb\u4e00\u5806\u70b9\uff0c\u6b64\u65f6\u518d\u8fde\u8fb9\u663e\u7136\u5c31\u662f\u5bf9\u7684\u4e86\u3002\n\n\u603b\u590d\u6742\u5ea6\uff1a\u9664\u4e86\u5b50\u4e32\u5b9a\u4f4d\u90e8\u5206\u662fn log n\uff0c\u5176\u5b83\u90e8\u5206\u90fd\u662f\u7ebf\u6027\u7684\uff08\u5982\u679c\u4f60\u6ca1\u50cf\u6211\u4e00\u6837\u8822\u5230\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u7684\u8bdd\uff09\u3002\n\n\u53e6\u5916\u6211\u611f\u89c9\u5176\u5b9e\u8dd1tarjan\u4e5f\u662f\u4e0d\u9700\u8981\u7684\uff0c\u53ea\u9700\u8981\u5224\u4e00\u4e0b\u662f\u5426\u6709\u73af\u5373\u53ef\uff0c\u6709\u73af\u4e00\u5b9a\u662f-1\u3002\n\n\u4e8e\u662f\uff0c\u4e00\u4efd\u8fd19k\u7684\u4ee3\u7801\u5c31\u8fd9\u6837\u8bde\u751f\u4e86......\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<ctime>\n#include<vector>\nusing namespace std;\n#define li long long\n#define gc getchar()\n#define pc putchar\ninline li read(){\n\tli x = 0,y = 0,c = gc;\n\twhile(c < '0' || c > '9') y = c,c = gc;\n\twhile(c >= '0' && c <= '9') x = x * 10 + c - '0',c = gc;\n\treturn y == '-' ? -x : x;\n}\ninline void print(li x){\n\tif(x < 0) pc('-'),x = -x;\n\tif(x >= 10) print(x / 10);\n\tpc(x % 10 + '0');\n}\ninline void file(){\n\tfreopen(\"string.in\",\"r\",stdin);\n\tfreopen(\"string.out\",\"w\",stdout);\n}\nchar s[1000010];\nint t,n,p1,p2,m;\nstruct node{\n\tint l,r,x;\n}a[1000010],b[1000010];\nint tot = 1,lst = 1,son[400010][26],len[1000010],fa[1000010],wz[1000010];\ninline int inss(int x){\n\tint p = lst,np = ++tot;lst = np;len[np] = len[p] + 1;\n\tfor(;p && !son[p][x];p = fa[p]) son[p][x] = np;\n\tif(!p) fa[np] = 1;\n\telse{\n\t\tint q = son[p][x];\n\t\tif(len[q] == len[p] + 1) fa[np] = q;\n\t\telse{\n\t\t\tint nq = ++tot;\n\t\t\tlen[nq] = len[p] + 1;\n\t\t\tmemcpy(son[nq],son[q],sizeof(son[nq]));\n\t\t\tfa[nq] = fa[q];\n\t\t\tfa[q] = fa[np] = nq;\n\t\t\tfor(;son[p][x] == q;p = fa[p]) son[p][x] = nq;\n\t\t}\n\t}\n\treturn np;\n}\n\nint wei[1000010],nw,ed[1000010];\nint val[3000010];\nstruct edge{\n\tint to,nxt;\n}e[20000010];\nint cnt,fir[3000010],mx;\nint fsts[1000010],nxts[1000010];\ninline void dfs(int q){\n\twei[q] = ++nw;\n\tfor(int i = fsts[q];i;i = nxts[i]) dfs(i);\n\ted[q] = nw;\n}\ninline void dfs3(int q){\n\twei[q] = ++nw;\n\tfor(int i = fsts[q];i;i = nxts[i]) dfs3(i);\n\ted[q] = nw;\n}\nint st[20][1000010];\ninline void buildst(){\n\tregister int i,j;\n\tfor(i = 1;i <= tot;++i) st[0][i] = fa[i];\n\tfor(i = 1;i <= 18;++i){\n\t\tfor(j = 1;j <= tot;++j) st[i][j] = st[i - 1][st[i - 1][j]];\n\t} \n}\ninline int fd(int l,int r){\n\tint nw = wz[l];\n\tfor(int i = 18;i >= 0;--i) if(len[st[i][nw]] >= r - l + 1) nw = st[i][nw];\n\treturn nw;\n}\ninline void ins(int u,int v){\n\t//cerr<<u<<\" \"<<v<<\"&\"<<endl;\n\te[++cnt].to = v;e[cnt].nxt = fir[u];fir[u] = cnt;\n\tmx = max(mx,max(u,v));\n}\n#define ls (q << 1)\n#define rs (q << 1 | 1)\n#define ln ls,l,mid\n#define rn rs,mid + 1,r\n#define md int mid = l + r >> 1\nint www[1000010];\ninline void build(int q,int l,int r){\n\tif(l == r){\n\t\twww[l] = q;\n\t\treturn;\n\t}\n\tmd;\n\tins(q + p1 + p2,ls + p1 + p2);ins(q + p1 + p2,rs + p1 + p2);\n\tbuild(ln);build(rn);\n}\ninline void xg(int q,int l,int r,int ax,int x){\n\tif(l == r){\n\t\tins(q + p1 + p2,x);\n\t\treturn;\n\t}\n\tmd;\n\tif(mid >= ax) xg(ln,ax,x);\n\telse xg(rn,ax,x);\n}\ninline void xg2(int q,int l,int r,int al,int ar,int x){\n\tif(l >= al && r <= ar){\n\t\tins(x + p1,q + p1 + p2);\n\t\treturn;\n\t}\n\tmd;\n\tif(mid >= al) xg2(ln,al,ar,x);\n\tif(mid < ar) xg2(rn,al,ar,x);\n}\nint dfn[3000010],low[3000010],bel[3000010],pp,sc;\nvector<int> scc[3000010],qwq1[500010],qwq2[500010];\nint pwp;\nli an[3000010];\nbool inst[3000010];\nint stt[3000010],ft;\nint qu[3000010],hh,tt,dus[3000010];\n\ninline void tar(int q){\n\tdfn[q] = low[q] = ++pp;\n\tstt[++ft] = q;inst[q] = 1;\n\tfor(int i = fir[q];i;i = e[i].nxt){\n\t\tif(!dfn[e[i].to]){\n\t\t\ttar(e[i].to);low[q] = min(low[q],low[e[i].to]);\n\t\t}\n\t\telse if(inst[e[i].to]) low[q] = min(low[q],dfn[e[i].to]);\n\t}\n\tif(low[q] == dfn[q]){\n\t\tint j;\n\t\t++sc;\n\t\tdo{\n\t\t\tj = stt[ft--];\n\t\t\tbel[j] = sc;\n\t\t\tinst[j] = 0;\n\t\t\tscc[sc].push_back(j);\n\t\t}while(j != q);\n\t}\n}\ninline void wk(){\n\tint i,j,l;\n\tfor(i = 1;i <= sc;++i) if(scc[i].size() > 1){\n\t\tli vl = 0;\n\t\tfor(j = 0;j < scc[i].size();++j) vl += val[scc[i][j]];\n\t\tif(vl > 0){\n\t\t\tputs(\"-1\");\n\t\t\treturn;\n\t\t}\n\t}\n\tfor(i = 1;i <= sc;++i){\n\t\tfor(j = 0;j < scc[i].size();++j){\n\t\t\tfor(l = fir[scc[i][j]];l;l = e[l].nxt) if(bel[e[l].to] != i) ++dus[bel[e[l].to]];\n\t\t}\n\t}\n\thh = tt = 0;\n\tfor(i = 1;i <= sc;++i) if(!dus[i]) qu[++tt] = i;\n\twhile(hh < tt){\n\t\ti = qu[++hh];\n\t\tfor(j = 0;j < scc[i].size();++j){\n\t\t\tan[i] += val[scc[i][j]];\n\t\t\tfor(l = fir[scc[i][j]];l;l = e[l].nxt) if(bel[e[l].to] != i){\n\t\t\t\tan[bel[e[l].to]] = max(an[bel[e[l].to]],an[i]);\n\t\t\t\t--dus[bel[e[l].to]];\n\t\t\t\tif(!dus[bel[e[l].to]]) qu[++tt] = bel[e[l].to]; \n\t\t\t} \n\t\t}\n\t}\n\tli ans = 0;\n\tfor(i = 1;i <= sc;++i) ans = max(ans,an[i]);\n\tprint(ans);pc('\\n');\n}\ninline bool cmp1(int q,int w){\n\treturn a[q].r - a[q].l > a[w].r - a[w].l;\n}\ninline bool cmp2(int q,int w){\n\treturn b[q].r - b[q].l > b[w].r - b[w].l;\n}\nvoid dfs2(int q){\n\t//cerr<<q<<\" \"<<len[q]<<endl;\n\tif(q != 1 && (qwq1[q].size() != 0 || qwq2[q].size() != 0)){\n\t\tint nwq = q,i = 0,j = 0,lst = len[q],nxt,nxtq;\n\t\twhile(i < qwq1[q].size() && j < qwq2[q].size()){\n\t\t\t//cerr<<i<<\" \"<<j<<\"()\"<<\" \"<<qwq1[q].size()<<\" \"<<qwq2[q].size()<<endl;\n\t\t\tif(a[qwq1[q][i]].r - a[qwq1[q][i]].l > b[qwq2[q][j]].r - b[qwq2[q][j]].l){\n\t\t\t\tnxt = a[qwq1[q][i]].r - a[qwq1[q][i]].l + 1;\n\t\t\t\tif(nxt == lst) a[qwq1[q][i]].x = nwq;\n\t\t\t\telse{\n\t\t\t\t\tnxtq = ++tot;\n\t\t\t\t\tfa[nxtq] = fa[nwq];\n\t\t\t\t\tfa[nwq] = nxtq;\n\t\t\t\t\tlen[nxtq] = nxt;\n\t\t\t\t\ta[qwq1[q][i]].x = nxtq;\n\t\t\t\t\tnwq = nxtq;\n\t\t\t\t}\n\t\t\t\tlst = nxt;++i;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tnxt = b[qwq2[q][j]].r - b[qwq2[q][j]].l + 1;\n\t\t\t\tif(nxt == lst) b[qwq2[q][j]].x = nwq;\n\t\t\t\telse{\n\t\t\t\t\tnxtq = ++tot;\n\t\t\t\t\tfa[nxtq] = fa[nwq];\n\t\t\t\t\tfa[nwq] = nxtq;\n\t\t\t\t\tlen[nxtq] = nxt;\n\t\t\t\t\tb[qwq2[q][j]].x = nxtq;\n\t\t\t\t\tnwq = nxtq;\n\t\t\t\t}\n\t\t\t\tlst = nxt;++j;\n\t\t\t}\n\t\t}\n\t\t//cerr<<\"*\"<<endl;\n\t\twhile(i < qwq1[q].size()){\n\t\t\tnxt = a[qwq1[q][i]].r - a[qwq1[q][i]].l + 1;\n\t\t\tif(nxt == lst) a[qwq1[q][i]].x = nwq;\n\t\t\telse{\n\t\t\t\tnxtq = ++tot;\n\t\t\t\tfa[nxtq] = fa[nwq];\n\t\t\t\tfa[nwq] = nxtq;\n\t\t\t\tlen[nxtq] = nxt;\n\t\t\t\ta[qwq1[q][i]].x = nxtq;\n\t\t\t\tnwq = nxtq;\n\t\t\t}\n\t\t\tlst = nxt;++i;\n\t\t}\n\t\twhile(j < qwq2[q].size()){\n\t\t\tnxt = b[qwq2[q][j]].r - b[qwq2[q][j]].l + 1;\n\t\t\tif(nxt == lst) b[qwq2[q][j]].x = nwq;\n\t\t\telse{\n\t\t\t\tnxtq = ++tot;\n\t\t\t\tfa[nxtq] = fa[nwq];\n\t\t\t\tfa[nwq] = nxtq;\n\t\t\t\tlen[nxtq] = nxt;\n\t\t\t\tb[qwq2[q][j]].x = nxtq;\n\t\t\t\tnwq = nxtq;\n\t\t\t}\n\t\t\tlst = nxt;++j;\n\t\t}\n\t}\n\tfor(int i = fsts[q];i;i = nxts[i]) dfs2(i);\n}\nint main(){\n\t//file();\n\tint i,j,u,v,mx1,mx2;\n\tt = read();\n\twhile(t--){\n\t\tscanf(\"%s\",s + 1);n = strlen(s + 1);\n\t\tfor(i = n;i;--i) wz[i] = inss(s[i] - 'a');\n\t\t\n\t\t//cerr<<tot<<\"*\"<<endl;\n\t\t//for(i = 1;i <= tot;++i) cerr<<fa[i]<<\" \";cerr<<endl;\n\t\t//for(i = 1;i <= tot;++i) cerr<<len[i]<<\" \";cerr<<endl;\n\t\t//for(i = 1;i <= n;++i) cerr<<wz[i]<<\" \";cerr<<endl;\n\t\tfor(i = 2;i <= tot;++i) nxts[i] = fsts[fa[i]],fsts[fa[i]] = i;\n\t\tdfs(1);buildst();\n\t\t//for(i = 1;i <= tot;++i) cerr<<wei[i]<<\" \";cerr<<endl;\n\t\t//for(i = 1;i <= tot;++i) cerr<<ed[i]<<\" \";cerr<<endl;\n\t\t\n\t\tmx1 = n;\n\t\tmx2 = 0;\n\t\tp1 = read();\n\t\tfor(i = 1;i <= p1;++i){\n\t\t\ta[i].l = read();a[i].r = read();mx1 = min(mx1,a[i].r - a[i].l + 1);\n\t\t\ta[i].x = fd(a[i].l,a[i].r);val[i] = a[i].r - a[i].l + 1;\n\t\t}\n\t\tp2 = read();\n\t\tfor(i = 1;i <= p2;++i){\n\t\t\tb[i].l = read();b[i].r = read();mx2 = max(mx2,b[i].r - b[i].l + 1);\n\t\t\tb[i].x = fd(b[i].l,b[i].r);\n\t\t}\n\t\tpwp = tot;\n\t\t\n\t\tif(mx1 < mx2){\n\t\t\t//cerr<<\"***\"<<endl;\n\t\t\t\n\t\t\tfor(i = 1;i <= p1;++i) qwq1[a[i].x].push_back(i);\n\t\t\tfor(i = 1;i <= p2;++i) qwq2[b[i].x].push_back(i);\n\t\t\tfor(i = 1;i <= tot;++i) sort(qwq1[i].begin(),qwq1[i].end(),cmp1),sort(qwq2[i].begin(),qwq2[i].end(),cmp2);\n\t\t\t//cerr<<\"&&&\"<<tot<<endl;\n\t\t\tdfs2(1);\n\t\t\t//cerr<<\"()\"<<endl;\n\t\t\tfor(i = 1;i <= tot;++i) nxts[i] = fsts[i] = 0;\n\t\t\tnw = 0;\n\t\t\tfor(i = 2;i <= tot;++i) nxts[i] = fsts[fa[i]],fsts[fa[i]] = i;\n\t\t\tdfs3(1);\n\t\t\t//cerr<<tot<<endl;\n\t\t}\n\t\tbuild(1,1,tot);\n\t\t\n\t\tfor(i = 1;i <= p1;++i){\n\t\t\tins(www[wei[a[i].x]] + p1 + p2,i);\n\t\t\t//cerr<<a[i].l<<\" \"<<a[i].r<<\" \"<<a[i].x<<\" \"<<wei[a[i].x]<<\"()\"<<endl;\n\t\t\t//xg(1,1,tot,wei[a[i].x],i);\n\t\t}\n\t\tfor(i = 1;i <= p2;++i){\n\t\t\t\n\t\t\t//cerr<<b[i].l<<\" \"<<b[i].r<<\" \"<<b[i].x<<\" \"<<wei[b[i].x]<<\" \"<<ed[b[i].x]<<\"&&\"<<endl;\n\t\t\txg2(1,1,tot,wei[b[i].x],ed[b[i].x],i);\n\t\t}\n\t\tm = read();\n\t\tfor(i = 1;i <= m;++i) u = read(),v = read(),ins(u,v + p1);\n\t\t//return 0;\n\t\tfor(i = 1;i <= mx;++i) if(!dfn[i]) tar(i);\n\t\t\n\t\twk();\n\t\t//cerr<<mx<<\" \"<<pwp<<\" \"<<tot<<endl;return 0;\n\t\tfor(i = 1;i <= n;++i) s[i] = wz[i] = 0;\n\t\tfor(i = 1;i <= pwp;++i) memset(son[i],0,sizeof(son[i]));\n\t\tfor(i = 1;i <= tot;++i) fa[i] = len[i] = wei[i] = ed[i] = fsts[i] = nxts[i] = www[i] = 0;\n\t\tfor(i = 1;i <= mx;++i) fir[i] = val[i] = dfn[i] = low[i] = bel[i] = an[i] = 0;\n\t\tfor(i = 1;i <= sc;++i) scc[i].clear();\n\t\tfor(i = 1;i <= pwp;++i) qwq1[i].clear(),qwq2[i].clear();\n\t\ttot = lst = 1;\n\t\tcnt = mx = nw = pp = sc = hh = tt = ft = pwp = 0;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1554553999,
        "uid": 45775,
        "name": "liuzhangfeiabc",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5284 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u601d\u7ef4\u96be\u5ea6\u4e0d\u7b97\u5f88\u5927\uff0c\u53ef\u662f\u7ec6\u8282\u548c\u7a0b\u5e8f\u5b9e\u73b0\u5f88\u6076\u5fc3\u3002\u53bb\u5e74\u53bb\u7701\u9009\u7684\u5b66\u957f\u5168\u90fd\u53e3\u80e1\u51fa\u4e8680\u5206\u505a\u6cd5\uff0c\u4f46\u662f\u5f97\u5206\u60c5\u51b5\u5c31\u6ca1\u8fd9\u4e48\u7406\u60f3\u3002\n\n## \u7b80\u8ff0\u9898\u610f\n\n\u7ed9\u51fa\u4e00\u4e2a\u6bcd\u4e32$S$\u3002\n\n\u6709\u4e00\u4e9b$A$\u7c7b\u4e32\u548c\u4e00\u4e9b$B$\u7c7b\u4e32\uff0c\u90fd\u662f$S$\u7684\u5b50\u4e32\uff0c\u4ee5\u5de6\u53f3\u7aef\u70b9\u7684\u65b9\u5f0f\u7ed9\u51fa\u3002\n\n\u7ed9\u51fa\u4e00\u4e9b$A$\u7c7b\u4e32\u5bf9$B$\u7c7b\u4e32\u7684\u652f\u914d\u5173\u7cfb\u3002\n\n\u6211\u4eec\u9700\u8981\u7528\u82e5\u5e72\u4e2a$A$\u7c7b\u4e32\u9996\u4f4d\u987a\u6b21\u76f8\u8fde\uff0c\u8981\u6c42\u5bf9\u4e8e\u6bcf\u76f8\u90bb\u4e24\u4e2a$A$\u7c7b\u4e32\uff0c\u5fc5\u987b\u5b58\u5728\u4e00\u4e2a$B$\u7c7b\u4e32\u88ab\u524d\u4e00\u4e2a\u4e32\u652f\u914d\uff0c\u4e14\u662f\u540e\u4e00\u4e2a\u4e32\u524d\u7f00\u3002\u6211\u4eec\u60f3\u8ba9\u8fde\u63a5\u540e\u7684\u4e32\u5c3d\u91cf\u957f\uff0c\u8f93\u51fa\u8fd9\u4e2a\u957f\u5ea6\u3002\u5982\u679c\u53ef\u4ee5\u65e0\u9650\u957f\uff0c\u8f93\u51fa\"-1\"\u3002\n\n## \u89e3\u6cd5\n\n\u9996\u5148\u6709\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u66b4\u529b\u601d\u8def\u3002\n\n\u5bf9\u4e8e\u6240\u6709$A$\u5bf9$B$\u7684\u652f\u914d\uff0c\u4ece$A$\u4e32\u5230$B$\u4e32\u8fde\u63a5\u4e00\u6761\u6709\u5411\u8fb9\u3002\u904d\u5386\u6240\u6709$B$\u4e32\uff0c\u5bf9\u4e8e\u6bcf\u4e2a$A$\u4e32\uff0c\u5982\u679c\u8fd9\u4e2a$B$\u4e32\u662f\u4ed6\u7684\u524d\u7f00\uff0c\u90a3\u4e48\u4ece$B$\u4e32\u5f80$A$\u4e32\u8fde\u63a5\u4e00\u6761\u6709\u5411\u8fb9\u3002\u6bcf\u4e2a$A$\u4e32\u70b9\u7684\u70b9\u6743\u662f\u5b83\u7684\u957f\u5ea6\uff0c\u73b0\u5728\u9700\u8981\u6c42\u51faDAG\u7684\u6700\u957f\u8def\u3002\u5982\u679c\u51fa\u73af\u4e86\uff0c\u5c31\u662f-1\u3002\n\n\u8fd9\u4e2a\u66b4\u529b\u7b97\u6cd5\u8fc7\u4e0d\u4e86\u7684\u539f\u56e0\u663e\u7136\u662f$B$\u5230$A$\u7684\u8fb9\u6570\u6700\u574f\u53ef\u4ee5\u8fbe\u5230$n^2$\uff0c\u6211\u4eec\u9700\u8981\u51cf\u5c11\u8fd9\u4e00\u90e8\u5206\u7684\u8fb9\u6570\u3002\n\n\u8003\u8651\u540e\u7f00\u6570\u7ec4\u7684\u7ecf\u5178\u5957\u8def\uff1a\u5bf9\u6bcd\u4e32\u5efa\u7acbSA\uff0c\u518d\u5efa\u7acb`height`\u6570\u7ec4\u548c\u5b83\u7684ST\u8868\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5$O(1)$\u6c42\u51fa\u6765\u4ee5$l_1$\u548c$l_2$\u4e3a\u5de6\u7aef\u70b9\u7684\u6bcd\u4e32\u540e\u7f00\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\uff08LCP\uff09\u3002\u6240\u4ee5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$B$\u7c7b\u4e32\uff0c\u6211\u4eec\u8c03\u7528\u5b83\u5de6\u7aef\u70b9\u4f4d\u7f6e\u7684\u6392\u540d$p$\uff0c\u5728SA\u4e0a\u5206\u522b\u5f80\u5de6\u53f3\u500d\u589e\u51fa\u79bb$p$\u6700\u8fdc\u7684$l$\u548c$r$\uff0c\u6ee1\u8db3$LCP(l, p),LCP(r, p)$ \u90fd\u4e0d\u5c0f\u4e8e\u8fd9\u4e2a$B$\u7c7b\u4e32\u7684\u957f\u5ea6\u3002\u90a3\u4e48\u6240\u6709\u5de6\u7aef\u70b9\u6392\u540d\u5728$[l, r]$\u7684$A$\u4e32\u90fd\u6709$B$\u8fd9\u4e2a\u524d\u7f00\u3002\n\n\u65e2\u7136$B$\u4e32\u7684\u51fa\u8fb9\u5728SA\u4e0a\u662f\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4\uff0c\u90a3\u4e48\u53ef\u4ee5\u5bf9SA\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u7236\u4eb2\u5f80\u513f\u5b50\u8fde\u8fb9\uff0c\u53f6\u5b50\u5411\u4ee5\u5b83\u4e3a\u5de6\u7aef\u70b9\u7684$A$\u4e32\u8fde\u8fb9\u3002$A$\u4e32\u5bf9$B$\u4e32\u7684\u652f\u914d\u8fb9\u4e0d\u7528\u53d8\u3002\u5bf9\u4e8e\u6bcf\u4e2a$B$\u4e32\uff0c\u7528\u524d\u9762\u7684\u65b9\u6cd5\u500d\u589e\u51fa$l$\u548c$r$\uff0c\u5230\u7ebf\u6bb5\u6811\u67e5\u8be2\uff0c\u5411\u521a\u597d\u8986\u76d6$[l, r]$\u7684\u8282\u70b9\u8fde\u8fb9\u3002\u8fd9\u6837\uff0c\u8fb9\u6570\u5c31\u4f18\u5316\u5230\u4e86$n \\log n$\u3002\u5982\u679c\u4fdd\u8bc1\u6240\u6709$B$\u4e32\u6bd4$A$\u4e32\u77ed\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u662f\u6b63\u786e\u7684\u3002\u8fd9\u6837\uff0c\u5c31\u6709\u4e8680\u5206\u3002\n\n\u5982\u679c\u4e0d\u4fdd\u8bc1$B$\u6bd4$A$\u77ed\u600e\u4e48\u529e\uff1f\u5f88\u591a\u5e26\u4f6c\u8bf4\u4ee5\u957f\u5ea6\u4e3a\u7248\u672c\u5efa\u4e3b\u5e2d\u6811\uff0c\u4f46\u662f\u6211\u4eec\u6709\u66f4\u7b80\u5355\u7684\u529e\u6cd5\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u6709\u4e86\u6bcd\u4e32\u7684SA\u3001`height`\u548cST\u8868\uff0c\u53ef\u4ee5$O(1)$\u6c42\u4e24\u4e2a\u4f4d\u7f6e\u7684LCP\u3002\u90a3\u4e48\uff0c\u8003\u8651\u5145\u5206\u5229\u7528\u5df2\u7ecf\u5f97\u5230\u7684\u6570\u636e\uff0c\u5982\u679c\u7ed9\u5b9a\u6bcd\u4e32\u7684\u4e24\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5**\u6839\u636e\u533a\u95f4\u957f\u5ea6\u3001\u5de6\u7aef\u70b9\u7684\u540e\u7f00\u6392\u540d\u3001\u4e24\u4e2a\u5de6\u7aef\u70b9\u7684LCP\uff0c\u6765$O(1)$\u5f97\u5230\u8fd9\u4e24\u4e2a\u5b50\u4e32\u7684\u5b57\u5178\u5e8f\u5927\u5c0f**\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5$O(n)$\u6876\u6392\u51fa$A$\u4e32\u7684\u5927\u5c0f\u987a\u5e8f\uff08\u76f4\u63a5\u5199\u6210\u6bd4\u8f83\u51fd\u6570\u7136\u540e`sort`\u4e5f\u53ef\uff09\u3002\u5728\u6709\u5e8f\u7684$A$\u4e32\u6570\u7ec4\u4e0a\uff0c\u4ee5\u67d0\u4e2a$B$\u4e32\u4e3a\u524d\u7f00\u7684$A$\u4e32\u663e\u7136\u662f\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u628a80\u5206\u601d\u8def\u4e2d\u7684SA\u7684\u7ebf\u6bb5\u6811\u6362\u6210$A$\u4e32\u6709\u5e8f\u6570\u7ec4\u7684\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a$B$\u4e32\u7684\u652f\u914d\u533a\u95f4\u4e5f\u53ef\u4ee5\u7528\u524d\u9762\u5199\u7684\u6bd4\u8f83\u51fd\u6570\u548c\u500d\u589e\u6c42\u51fa\uff0c\u5176\u4f59\u90e8\u5206\u6cbf\u752880\u5206\u601d\u8def\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230100\u5206\u3002\n\n## \u4ee3\u7801\n\n\u7ec6\u8282\u975e\u5e38\u591a\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\ntypedef long long LL;\nconst int MAXN = 2e5 + 5;\n\nchar S[MAXN];\nint na, la[MAXN], ra[MAXN];\nint nb, lb[MAXN], rb[MAXN];\nint tot;\n\nnamespace SA{\n\tint n, m;\n\tint sa[MAXN], rk[MAXN], tx[MAXN], tp[MAXN], ht[MAXN];\n\tint lg[MAXN], stt[21][MAXN];\n\t\n\tvoid Clear() {\n\t\tfor (int i = 0; i <= max(n, m); i++)\n\t\t\tsa[i] = rk[i] = tx[i] = tp[i] = ht[i] = 0;\n\t\tn = m = 0;\n\t}\n\t\n\tvoid RSort() {\n\t\tfor (int i = 0; i <= m; i++) tx[i] = 0;\n\t\tfor (int i = 1; i <= n; i++) tx[rk[i]]++;\n\t\tfor (int i = 1; i <= m; i++) tx[i] += tx[i - 1];\n\t\tfor (int i = n; i >= 1; i--) sa[tx[rk[tp[i]]]--] = tp[i];\n\t}\n\t\n\tvoid Build() {\n\t\tRSort();\n\t\tfor (int w = 1, p = 1; p < n; m = p, w <<= 1) {\n\t\t\tp = 0;\n\t\t\tfor (int i = 1; i <= w; i++)\n\t\t\t\ttp[++p] = n - w + i;\n\t\t\tfor (int i = 1; i <= n; i++)\n\t\t\t\tif (sa[i] > w)\n\t\t\t\t\ttp[++p] = sa[i] - w;\n\t\t\tRSort();\n\t\t\tswap(tp, rk);\n\t\t\trk[sa[1]] = p = 1;\n\t\t\tfor (int i = 2; i <= n; i++)\n\t\t\t\trk[sa[i]] = (tp[sa[i]] == tp[sa[i - 1]] && tp[sa[i] + w] == tp[sa[i - 1] + w]) ? p : ++p;\n\t\t}\n\t}\n\t\n\tvoid GetH() {\n\t\tfor (int i = 1; i <= n; i++) rk[sa[i]] = i;\n\t\tint k = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (rk[i] == 1) continue;\n\t\t\tif (k) k--;\n\t\t\tint j = sa[rk[i] - 1];\n\t\t\twhile (i + k <= n && j + k <= n && S[i + k] == S[j + k]) k++;\n\t\t\tht[rk[i]] = k;\n\t\t}\n\t}\n\t\n\tvoid GetST() {\n\t\tfor (int i = 1; i <= n; i++) stt[0][i] = ht[i];\n\t\tfor (int i = 1; (1 << i) <= n; i++) {\n\t\t\tint w = (1 << i);\n\t\t\tfor (int j = 1; j + w - 1 <= n; j++)\n\t\t\t\tstt[i][j] = min(stt[i - 1][j], stt[i - 1][j + w / 2]);\n\t\t}\n\t}\n\t\n\tint Query(int x, int y) {\n\t\tif (x == y) return n - x + 1;\n\t\tx = rk[x]; y = rk[y];\n\t\tif (x > y) swap(x, y);\n\t\tx++;\n\t\tint i = lg[y - x + 1], w = (1 << i);\n\t\treturn min(stt[i][x], stt[i][y - w + 1]);\n\t}\n}\n\nnamespace G{\n\tconst int MAXN = 5e6;\n\t\n\tint n, ecnt;\n\tint to[MAXN], nx[MAXN], head[MAXN], deg[MAXN], val[MAXN];\n\tLL f[MAXN], ans;\n\tint q[MAXN], hd, tl;\n\t\n\tvoid Clear() {\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tdeg[i] = val[i] = f[i] = head[i] = 0;\n\t\tn = ecnt = ans = hd = tl = 0;\n\t}\n\t\n\tvoid Add(int x, int y) {\n\t\tto[++ecnt] = y;\n\t\tnx[ecnt] = head[x];\n\t\thead[x] = ecnt;\n\t\tdeg[y]++;\n\t}\n\t\n\tvoid Topo() {\n\t\thd = 1, tl = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (!deg[i])\n\t\t\t\tq[++tl] = i;\n\t\t\tf[i] = val[i];\n\t\t}\n\t\twhile (hd <= tl) {\n\t\t\tint u = q[hd++];\n\t\t\tans = max(ans, f[u]);\n\t\t\tfor (int i = head[u]; i; i = nx[i]) {\n\t\t\t\tint v = to[i];\n\t\t\t\tf[v] = max(f[v], f[u] + val[v]);\n\t\t\t\tdeg[v]--;\n\t\t\t\tif (!deg[v]) q[++tl] = v;\n\t\t\t}\n\t\t}\n\t\tif (tl != n) ans = -1;\n\t}\n}using G::Add;\n\nnamespace Seg{\n\tconst int MAXN = 1e6;\n\t\n\tint id[MAXN];\n\t\n\tvoid Clear() {\n\t\tmemset(id, 0, sizeof(id));\n\t}\n\t\n\tvoid InsA(int now, int p, int x, int l, int r) {\n\t\tif (!id[now]) {\n\t\t\tid[now] = ++tot;\n\t\t\tAdd(id[now >> 1], id[now]);\n\t\t}\n\t\tif (l == r) {\n\t\t\tAdd(id[now], x);\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tif (p <= mid) InsA(now << 1, p, x, l, mid);\n\t\telse InsA(now << 1 | 1, p, x, mid + 1, r);\n\t}\n\t\n\tvoid InsB(int now, int l, int r, int x, int nl, int nr) {\n\t\tif (!id[now]) return;\n\t\tif (l == nl && r == nr) {\n\t\t\tAdd(x, id[now]);\n\t\t\treturn;\n\t\t}\n\t\tint mid = (nl + nr) >> 1;\n\t\tif (r <= mid) InsB(now << 1, l, r, x, nl, mid);\n\t\telse if (l > mid) InsB(now << 1 | 1, l, r, x, mid + 1, nr);\n\t\telse InsB(now << 1, l, mid, x, nl, mid), InsB(now << 1 | 1, mid + 1, r, x, mid + 1, nr);\n\t}\n}\n\nstruct Seq{\n\tint l, r, len, id;\n\tSeq() {}\n\tSeq(int l, int r, int id) : l(l), r(r), id(id) {len = r - l + 1;}\n}stra[MAXN];\n\nint Comp(Seq a, Seq b) {\n\tint lcp = SA::Query(a.l, b.l);\n\tif (lcp >= min(a.len, b.len)) return a.len < b.len;\n\telse return S[a.l + lcp] < S[b.l + lcp];\n}\n\nint n, m;\n\nvoid Work() {\n\tscanf(\"%s\", S + 1);\n\tn = strlen(S + 1);\n\tscanf(\"%d\", &na);\n\tfor (int i = 1; i <= na; i++) scanf(\"%d%d\", la + i, ra + i);\n\tscanf(\"%d\", &nb);\n\tfor (int i = 1; i <= nb; i++) scanf(\"%d%d\", lb + i, rb + i);\n\tfor (int i = 1; i <= n; i++) {\n\t\tSA::rk[i] = S[i];\n\t\tSA::tp[i] = i;\n\t}\n\tSA::n = n;\n\tSA::m = 127;\n\tSA::Build();\n\tSA::GetH();\n\tSA::GetST();\n\tfor (int i = 1; i <= na; i++) stra[i] = Seq(la[i], ra[i], i);\n\ttot = na + nb;\n\tSeg::id[1] = ++tot;\n\tsort(stra + 1, stra + na + 1, Comp);\n\tfor (int i = 1; i <= na; i++) Seg::InsA(1, i, stra[i].id, 1, na);\n\tfor (int i = 1; i <= nb; i++) {\n\t\tSeq strb(lb[i], rb[i], i + na);\n\t\tint liml = 0;\n\t\tfor (int j = 20; j >= 0; j--) {\n\t\t\tint w = (1 << j);\n\t\t\tif (liml + w > na) continue;\t\n\t\t\tif (Comp(stra[liml + w], strb)) \n\t\t\t\tliml += w;\n\t\t}\n\t\tliml++;\n\t\tif (liml > na) continue;\n\t\tif (SA::Query(strb.l, stra[liml].l) < strb.len) continue;\n\t\tint limr = liml;\n\t\tfor (int j = 20; j >= 0; j--) {\n\t\t\tint w = (1 << j);\n\t\t\tif (limr + w > na) continue;\n\t\t\tif (SA::Query(stra[limr + w].l, strb.l) >= strb.len)\n\t\t\t\tlimr += w;\n\t\t}\n\t\tSeg::InsB(1, liml, limr, na + i, 1, na);\n\t}\n\tscanf(\"%d\", &m);\n\tfor (int i = 1, x, y; i <= m; i++) {\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tG::Add(x, y + na);\n\t}\n\tfor (int i = 1; i <= na; i++) G::val[i] = ra[i] - la[i] + 1;\n\tG::n = tot;\n\tG::Topo();\n\tprintf(\"%lld\\n\", G::ans);\n\tSA::Clear();\n\tG::Clear();\n\tSeg::Clear();\n}\n\nint main() {\n\tfor (int i = 2; i <= 200000; i++) SA::lg[i] = SA::lg[i >> 1] + 1;\n\tint T;\n\tscanf(\"%d\", &T);\n\twhile (T--) Work();\n\treturn 0;\n}\n```\n\n\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u4e3b\u5e2d\u6811\u4e86\u3002\n\n\u8fd8\u89c9\u5f97\u9ebb\u70e6\uff1f\u6ca1\u4e8b\uff0c\u8fd8\u53ef\u4ee5\u7528ST\u8868\u5efa\u56fe\uff0c\u53cd\u6b63\u65f6\u9650\u957f\uff0c\u653e\u5f00\u8dd1\uff0cT\u4e0d\u4e86\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\ntypedef long long LL;\nconst int MAXN = 2e5 + 5;\n\nchar S[MAXN];\nint na, la[MAXN], ra[MAXN];\nint nb, lb[MAXN], rb[MAXN];\nint tot;\nint lg[MAXN];\n\nnamespace SA{\n\tint n, m;\n\tint sa[MAXN], rk[MAXN], tx[MAXN], tp[MAXN], ht[MAXN];\n\tint stt[21][MAXN];\n\t\n\tvoid Clear() {\n\t\tfor (int i = 0; i <= max(n, m); i++)\n\t\t\tsa[i] = rk[i] = tx[i] = tp[i] = ht[i] = 0;\n\t\tn = m = 0;\n\t}\n\t\n\tvoid RSort() {\n\t\tfor (int i = 0; i <= m; i++) tx[i] = 0;\n\t\tfor (int i = 1; i <= n; i++) tx[rk[i]]++;\n\t\tfor (int i = 1; i <= m; i++) tx[i] += tx[i - 1];\n\t\tfor (int i = n; i >= 1; i--) sa[tx[rk[tp[i]]]--] = tp[i];\n\t}\n\t\n\tvoid Build() {\n\t\tRSort();\n\t\tfor (int w = 1, p = 1; p < n; m = p, w <<= 1) {\n\t\t\tp = 0;\n\t\t\tfor (int i = 1; i <= w; i++)\n\t\t\t\ttp[++p] = n - w + i;\n\t\t\tfor (int i = 1; i <= n; i++)\n\t\t\t\tif (sa[i] > w)\n\t\t\t\t\ttp[++p] = sa[i] - w;\n\t\t\tRSort();\n\t\t\tswap(tp, rk);\n\t\t\trk[sa[1]] = p = 1;\n\t\t\tfor (int i = 2; i <= n; i++)\n\t\t\t\trk[sa[i]] = (tp[sa[i]] == tp[sa[i - 1]] && tp[sa[i] + w] == tp[sa[i - 1] + w]) ? p : ++p;\n\t\t}\n\t}\n\t\n\tvoid GetH() {\n\t\tfor (int i = 1; i <= n; i++) rk[sa[i]] = i;\n\t\tint k = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (rk[i] == 1) continue;\n\t\t\tif (k) k--;\n\t\t\tint j = sa[rk[i] - 1];\n\t\t\twhile (i + k <= n && j + k <= n && S[i + k] == S[j + k]) k++;\n\t\t\tht[rk[i]] = k;\n\t\t}\n\t}\n\t\n\tvoid GetST() {\n\t\tfor (int i = 1; i <= n; i++) stt[0][i] = ht[i];\n\t\tfor (int i = 1; (1 << i) <= n; i++) {\n\t\t\tint w = (1 << i);\n\t\t\tfor (int j = 1; j + w - 1 <= n; j++)\n\t\t\t\tstt[i][j] = min(stt[i - 1][j], stt[i - 1][j + (w >> 1)]);\n\t\t}\n\t}\n\t\n\tint Query(int x, int y) {\n\t\tif (x == y) return n - x + 1;\n\t\tx = rk[x]; y = rk[y];\n\t\tif (x > y) swap(x, y);\n\t\tx++;\n\t\tint i = lg[y - x + 1], w = (1 << i);\n\t\treturn min(stt[i][x], stt[i][y - w + 1]);\n\t}\n}\n\nnamespace G{\n\tconst int MAXN = 1e7;\n\t\n\tint n, ecnt;\n\tint to[MAXN], nx[MAXN], head[MAXN], deg[MAXN], val[MAXN];\n\tLL f[MAXN], ans;\n\tint q[MAXN], hd, tl;\n\t\n\tvoid Clear() {\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tdeg[i] = val[i] = f[i] = head[i] = 0;\n\t\tn = ecnt = ans = hd = tl = 0;\n\t}\n\t\n\tvoid Add(int x, int y) {\n\t\tto[++ecnt] = y;\n\t\tnx[ecnt] = head[x];\n\t\thead[x] = ecnt;\n\t\tdeg[y]++;\n\t}\n\t\n\tvoid Topo() {\n\t\thd = 1, tl = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (!deg[i])\n\t\t\t\tq[++tl] = i;\n\t\t\tf[i] = val[i];\n\t\t}\n\t\twhile (hd <= tl) {\n\t\t\tint u = q[hd++];\n\t\t\tans = max(ans, f[u]);\n\t\t\tfor (int i = head[u]; i; i = nx[i]) {\n\t\t\t\tint v = to[i];\n\t\t\t\tf[v] = max(f[v], f[u] + val[v]);\n\t\t\t\tdeg[v]--;\n\t\t\t\tif (!deg[v]) q[++tl] = v;\n\t\t\t}\n\t\t}\n\t\tif (tl != n) ans = -1;\n\t}\n}using G::Add;\n\nstruct Seq{\n\tint l, r, len, id;\n\tSeq() {}\n\tSeq(int l, int r, int id) : l(l), r(r), id(id) {len = r - l + 1;}\n}stra[MAXN];\nint gid[20][MAXN];\n\nvoid InsA() {\n\tfor (int i = 1; i <= na; i++) gid[0][i] = stra[i].id;\n\tfor (int i = 1; (1 << i) <= na; i++) {\n\t\tint w = (1 << i);\n\t\tfor (int j = 1; j + w - 1 <= na; j++) {\n\t\t\tgid[i][j] = ++tot;\n\t\t\tAdd(gid[i][j], gid[i - 1][j]);\n\t\t\tAdd(gid[i][j], gid[i - 1][j + (w >> 1)]);\n\t\t}\n\t}\n}\n\nvoid InsB(int id, int l, int r) {\n\tint i = lg[r - l + 1], w = (1 << i);\n\tAdd(id, gid[i][l]);\n\tAdd(id, gid[i][r - w + 1]);\n}\n\nint Comp(Seq a, Seq b) {\n\tint lcp = SA::Query(a.l, b.l);\n\tif (lcp >= min(a.len, b.len)) return a.len < b.len;\n\telse return S[a.l + lcp] < S[b.l + lcp];\n}\n\nint n, m;\n\nvoid Work() {\n\tscanf(\"%s\", S + 1);\n\tn = strlen(S + 1);\n\tscanf(\"%d\", &na);\n\tfor (int i = 1; i <= na; i++) scanf(\"%d%d\", la + i, ra + i);\n\tscanf(\"%d\", &nb);\n\tfor (int i = 1; i <= nb; i++) scanf(\"%d%d\", lb + i, rb + i);\n\tfor (int i = 1; i <= n; i++) {\n\t\tSA::rk[i] = S[i];\n\t\tSA::tp[i] = i;\n\t}\n\tSA::n = n;\n\tSA::m = 127;\n\tSA::Build();\n\tSA::GetH();\n\tSA::GetST();\n\tfor (int i = 1; i <= na; i++) stra[i] = Seq(la[i], ra[i], i);\n\ttot = na + nb;\n\tsort(stra + 1, stra + na + 1, Comp);\n\tInsA();\n\tfor (int i = 1; i <= nb; i++) {\n\t\tSeq strb(lb[i], rb[i], i + na);\n\t\tint liml = 0;\n\t\tfor (int j = 20; j >= 0; j--) {\n\t\t\tint w = (1 << j);\n\t\t\tif (liml + w > na) continue;\t\n\t\t\tif (Comp(stra[liml + w], strb)) \n\t\t\t\tliml += w;\n\t\t}\n\t\tliml++;\n\t\tif (liml > na) continue;\n\t\tif (SA::Query(strb.l, stra[liml].l) < strb.len) continue;\n\t\tint limr = liml;\n\t\tfor (int j = 20; j >= 0; j--) {\n\t\t\tint w = (1 << j);\n\t\t\tif (limr + w > na) continue;\n\t\t\tif (SA::Query(stra[limr + w].l, strb.l) >= strb.len)\n\t\t\t\tlimr += w;\n\t\t}\n\t\tInsB(na + i, liml, limr);\n\t}\n\tscanf(\"%d\", &m);\n\tfor (int i = 1, x, y; i <= m; i++) {\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tG::Add(x, y + na);\n\t}\n\tfor (int i = 1; i <= na; i++) G::val[i] = ra[i] - la[i] + 1;\n\tG::n = tot;\n\tG::Topo();\n\tprintf(\"%lld\\n\", G::ans);\n\tSA::Clear();\n\tG::Clear();\n}\n\nint main() {\n\tfor (int i = 2; i <= 200000; i++) lg[i] = lg[i >> 1] + 1;\n\tint T;\n\tscanf(\"%d\", &T);\n\twhile (T--) Work();\n\treturn 0;\n}\n\u00b7\u00b7\u00b7",
        "postTime": 1585485677,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5284 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u7bc7 `\u540e\u7f00\u6570\u7ec4` \u7684\u9898\u89e3\u3002\n\n\u9996\u5148\u7406\u89e3\u9898\u610f\uff0c\u6784\u5efa\u51fa\u56fe\u8bba\u6a21\u578b\uff1a\n- \u6309\u7167\u9898\u610f\u7684\u652f\u914d\u5173\u7cfb\u8fde\u8fb9\uff0c\u82e5 $x$ \u652f\u914d $y$ \u5219\u5c06 $A_x$ \u5411 $B_y$ \u8fde\u8fb9\uff1b\n- \u82e5 $B_j$ \u662f $A_i$ \u7684\u524d\u7f00\uff0c\u5c06 $B_j$ \u5411 $A_i$ \u8fde\u8fb9\u3002\n\n\u5219\u8fd9\u65f6\u9898\u76ee\u8981\u6c42\u7684\u5373\u4e3a\u8fd9\u4e2a\u56fe\u7684\u6700\u957f\u8def\uff08\u82e5\u6709\u73af\u8f93\u51fa $-1$\uff09\u3002\u53ea\u9700\u8981\u62d3\u6251\u6392\u5e8f\u7136\u540e DP \u5373\u53ef\u3002\n\n\u66b4\u529b\u5efa\u8fb9\u8fb9\u6570\u4e3a $O(m+n_an_b)$\uff0c\u80fd\u5f97\u5230 $\\rm 40pts$\u3002\u6211\u4eec\u9700\u8981\u4f18\u5316\u5efa\u56fe\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u7c7b\u8fb9\uff0c\u663e\u7136\u53ea\u6709 $O(m)$ \u6761\uff0c\u65e0\u9700\u4f18\u5316\u3002\u6211\u4eec\u53ea\u9700\u8003\u8651\u5982\u4f55\u4f18\u5316\u7b2c\u4e8c\u7c7b\u8fb9\u5373\u53ef\u3002\n\n\u5148\u8003\u8651 $\\rm 80pts$ \u5982\u4f55\u4f7f\u7528\u540e\u7f00\u6570\u7ec4\u3002\n\n\u6c42\u51fa\u540e\u7f00\u6570\u7ec4\u540e\uff0c\u5bf9\u4e8e $\\mathrm{SA}_l\\dots\\mathrm{SA}_r$ \u8fd9\u4e9b\u540e\u7f00\uff0c\u4ed6\u4eec\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u957f\u5ea6\u5373\u4e3a $\\mathrm{LCP}(\\mathrm{SA}_l, \\mathrm{SA}_r)$\u3002\u5bf9\u4e8e\u4e00\u4e2a B \u7c7b\u4e32 $S(lb_i,rb_i)$\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u6700\u5c0f\u7684 $l$ \u548c\u6700\u5927\u7684 $r$ \u6ee1\u8db3 $l \\le \\mathrm{rank}_{lb_i} \\le r$\uff0c\u4e14 $\\mathrm{LCP}(\\mathrm{SA}_l, \\mathrm{SA}_r) \\ge rb_i - lb_i + 1$\uff0c\u6b64\u65f6 $B_i$ \u5c31\u662f $\\mathrm{SA}_l\\dots\\mathrm{SA}_r$ \u8fd9\u4e9b\u540e\u7f00\u7684\u524d\u7f00\u3002\u800c\u7531\u4e8e $\\rm 80pts$ \u6ee1\u8db3 $|A_i| \\ge |B_j|$\uff0c\u6240\u4ee5\u53ea\u8981 $l \\le \\mathrm{rank}_{la_j} \\le r$\uff0c$B_i$ \u5c31\u662f $A_j$ \u7684\u524d\u7f00\u3002\u4e8e\u662f\u6c42\u51fa\u540e\u7f00\u6570\u7ec4\u540e\uff0c\u7b2c\u4e8c\u7c7b\u8fb9\u76f8\u5f53\u4e8e\u4e00\u4e2a B \u4e32\u8fde\u5411\u4e00\u4e2a\u533a\u95f4\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$\uff08$n$ \u4e0e\u9898\u76ee\u4e2d $|S|,n_a,n_b$ \u540c\u9636\uff0c\u4e0b\u540c\uff09\u3002\n\n\u8003\u8651\u7531\u6b64\u505a\u6cd5\u6269\u5c55 $\\rm 100pts$ \u7684\u505a\u6cd5\u3002\n\n\u6b64\u505a\u6cd5\u4e0d\u80fd\u62ff\u5230 $\\rm 100pts$ \u7684\u539f\u56e0\u4e3a\uff0c\u53ef\u80fd\u5b58\u5728 $|B_i| \\gt |A_j|$ \u800c $B_i$ \u5411 $A_j$ \u8fde\u8fb9\u7684\u60c5\u51b5\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u628a\u7ebf\u6bb5\u6811\u6539\u6210\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u3002\u6309\u7167 A \u4e32\u7684\u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u5efa\u7acb\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a A \u4e32\u53ea\u5728\u76f8\u5e94\u957f\u5ea6\u52a0\u5165\u3002B \u4e32\u8fde\u8fb9\u7684\u533a\u95f4\u4e5f\u662f B \u4e32\u957f\u5ea6\u7684\u5386\u53f2\u7248\u672c\u4e0a\u7684\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1 $|B_i| \\le |A_j|$ \u65f6 $B_i$ \u624d\u4f1a\u5411 $A_j$ \u8fde\u8fb9\u4e86\u3002\u65f6\u7a7a\u590d\u6742\u5ea6\u90fd\u662f $O(n \\log n)$\u3002\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <cstring>\n#include <algorithm>\n\nconst int maxN = 200005, maxV = 5000005;\n\nchar S[maxN];\nint Na, La[maxN], Ra[maxN], Nb, Lb[maxN], Rb[maxN], N, M;\nint SA[maxN], Rank[maxN], ST[18][maxN], Lg[maxN];\n\nvoid getSA()\n{\n\tstatic int buffer[maxN];\n\tfor (int i = 1; i <= N; ++i)\n\t\t++buffer[S[i]];\n\tfor (int i = 1; i <= 255; ++i)\n\t\tbuffer[i] += buffer[i - 1];\n\tfor (int i = 1; i <= N; ++i)\n\t\tSA[buffer[S[i]]--] = i;\n\tRank[SA[1]] = 1;\n\tfor (int i = 2; i <= N; ++i)\n\t\tRank[SA[i]] = S[SA[i - 1]] == S[SA[i]] ? Rank[SA[i - 1]] : Rank[SA[i - 1]] + 1;\n\tstd::fill(buffer + 1, buffer + 1 + 255, 0);\n\n\tfor (int l = 1; Rank[SA[N]] != N; l <<= 1)\n\t{\n\t\tstatic int temp[maxN];\n\t\tint cnt = 0;\n\n\t\tfor (int i = 1; i <= l; ++i)\n\t\t\ttemp[++cnt] = N - i + 1;\n\t\tfor (int i = 1; i <= N; ++i)\n\t\t\tif (SA[i] > l)\n\t\t\t\ttemp[++cnt] = SA[i] - l;\n\t\tfor (int i = 1; i <= N; ++i)\n\t\t\t++buffer[Rank[i]];\n\t\tfor (int i = 1; i <= N; ++i)\n\t\t\tbuffer[i] += buffer[i - 1];\n\t\tfor (int i = N; i; --i)\n\t\t\tSA[buffer[Rank[temp[i]]]--] = temp[i];\n\t\tstd::copy(Rank + 1, Rank + 1 + N, temp + 1);\n\t\tstd::fill(buffer + 1, buffer + 1 + N, 0);\n\t\tRank[SA[1]] = 1;\n\t\tfor (int i = 2; i <= N; ++i)\n\t\t\tRank[SA[i]] = SA[i] + l <= N && SA[i - 1] + l <= N && temp[SA[i - 1]] == temp[SA[i]] && temp[SA[i - 1] + l] == temp[SA[i] + l] ? Rank[SA[i - 1]] : Rank[SA[i - 1]] + 1;\n\t}\n\n\tfor (int i = 1, h = 0; i <= N; ++i)\n\t{\n\t\tif (h)\n\t\t\t--h;\n\t\tif (Rank[i] == 1)\n\t\t\tcontinue;\n\t\twhile (S[i + h] == S[SA[Rank[i] - 1] + h])\n\t\t\t++h;\n\t\tST[0][Rank[i]] = h;\n\t}\n\tLg[0] = -1;\n\tfor (int i = 1; i <= N; ++i)\n\t\tLg[i] = Lg[i >> 1] + 1;\n\tfor (int i = 1; i <= Lg[N]; ++i)\n\t\tfor (int j = 1; j + (1 << i) - 1 <= N; ++j)\n\t\t\tST[i][j] = std::min(ST[i - 1][j], ST[i - 1][j + (1 << (i - 1))]);\n}\n\nstd::vector<int> G[maxV], A[maxN];\nint Val[maxV], Deg[maxV];\n\nconst size_t _M_size = 500 << 20;\nchar _M_pool[_M_size], *_M_cur(_M_pool + _M_size);\ninline void *operator new(size_t size) { return _M_cur -= size; }\ninline void operator delete(void *) {}\n\ninline void addEdge(int u, int v)\n{\n\t++Deg[v];\n\tG[u].push_back(v);\n}\n\nint tot;\nstruct node\n{\n\tint id;\n\tnode *lc, *rc;\n\tnode(int _id) : id(_id), lc(nullptr), rc(nullptr) {}\n} * root[maxN];\n\nint insert(node *&o, int l, int r, int pos)\n{\n\tif (!o)\n\t{\n\t\to = new node(++tot);\n\t\tstd::vector<int>().swap(G[tot]);\n\t\tVal[tot] = 0, Deg[tot] = 0;\n\t}\n\telse\n\t{\n\t\to = new node(*o);\n\t\t++tot;\n\t\tstd::vector<int>().swap(G[tot]);\n\t\taddEdge(tot, o->id);\n\t\to->id = tot;\n\t\tVal[tot] = 0, Deg[tot] = 0;\n\t}\n\tif (l == r)\n\t\treturn o->id;\n\tint m = (l + r) >> 1, res;\n\tif (pos <= m)\n\t\tres = insert(o->lc, l, m, pos);\n\telse\n\t\tres = insert(o->rc, m + 1, r, pos);\n\tif (o->lc)\n\t\taddEdge(o->id, o->lc->id);\n\tif (o->rc)\n\t\taddEdge(o->id, o->rc->id);\n\treturn res;\n}\n\nvoid linkEdge(node *o, int l, int r, int tl, int tr, int s)\n{\n\tif (!o)\n\t\treturn;\n\tif (l >= tl && r <= tr)\n\t{\n\t\taddEdge(s, o->id);\n\t\treturn;\n\t}\n\tint m = (l + r) >> 1;\n\tif (tl <= m)\n\t\tlinkEdge(o->lc, l, m, tl, tr, s);\n\tif (tr > m)\n\t\tlinkEdge(o->rc, m + 1, r, tl, tr, s);\n}\n\nint Que[maxV];\nlong long F[maxV];\n\nvoid work()\n{\n\t_M_cur = _M_pool + _M_size;\n\n\tscanf(\"%s\", S + 1);\n\tN = std::strlen(S + 1);\n\tscanf(\"%d\", &Na);\n\tfor (int i = 1; i <= Na; ++i)\n\t\tscanf(\"%d%d\", La + i, Ra + i);\n\tscanf(\"%d\", &Nb);\n\tfor (int i = 1; i <= Nb; ++i)\n\t\tscanf(\"%d%d\", Lb + i, Rb + i);\n\n\tgetSA();\n\n\ttot = Na + Nb;\n\tfor (int i = 1; i <= tot; ++i)\n\t\tstd::vector<int>().swap(G[i]), Val[i] = 0, Deg[i] = 0;\n\n\tfor (int i = 1; i <= N; ++i)\n\t\tstd::vector<int>().swap(A[i]);\n\n\tfor (int i = 1; i <= Na; ++i)\n\t\tA[Val[i] = Ra[i] - La[i] + 1].push_back(i);\n\troot[N + 1] = nullptr;\n\tfor (int i = N; i; --i)\n\t{\n\t\troot[i] = root[i + 1];\n\t\tfor (auto x : A[i])\n\t\t\taddEdge(insert(root[i], 1, N, Rank[La[x]]), x);\n\t}\n\tscanf(\"%d\", &M);\n\tfor (int x, y; M--;)\n\t{\n\t\tscanf(\"%d%d\", &x, &y);\n\t\taddEdge(x, y + Na);\n\t}\n\n\tfor (int i = 1; i <= Nb; ++i)\n\t{\n\t\tint lb = Rank[Lb[i]], rb = Rank[Lb[i]], len = Rb[i] - Lb[i] + 1;\n\t\tint d;\n\t\tfor (d = 0; lb - (1 << d) >= 1 && ST[d][lb - (1 << d) + 1] >= len; ++d)\n\t\t\t;\n\t\tfor (--d; ~d; --d)\n\t\t\tif (lb - (1 << d) >= 1 && ST[d][lb - (1 << d) + 1] >= len)\n\t\t\t\tlb -= 1 << d;\n\t\tfor (d = 0; rb + (1 << d) <= N && ST[d][rb + 1] >= len; ++d)\n\t\t\t;\n\t\tfor (--d; ~d; --d)\n\t\t\tif (rb + (1 << d) <= N && ST[d][rb + 1] >= len)\n\t\t\t\trb += 1 << d;\n\t\tlinkEdge(root[len], 1, N, lb, rb, Na + i);\n\t}\n\n\tint *qs = Que, *qe = Que;\n\tfor (int i = 1; i <= tot; ++i)\n\t\tif (!Deg[i])\n\t\t\t*qe++ = i;\n\n\twhile (qs != qe)\n\t{\n\t\tint i = *qs++;\n\t\tfor (auto to : G[i])\n\t\t\tif (!--Deg[to])\n\t\t\t\t*qe++ = to;\n\t}\n\n\tif (qe - Que != tot)\n\t{\n\t\tputs(\"-1\");\n\t\treturn;\n\t}\n\n\tfor (int j = tot - 1; ~j; --j)\n\t{\n\t\tint i = Que[j];\n\t\tF[i] = Val[i];\n\t\tfor (auto to : G[i])\n\t\t\tF[i] = std::max(F[i], F[to] + Val[i]);\n\t}\n\n\tprintf(\"%lld\\n\", *std::max_element(F + 1, F + 1 + Na));\n}\n\nint main()\n{\n\tint T;\n\n\tfor (scanf(\"%d\", &T); T--;)\n\t\twork();\n\n\treturn 0;\n}\n```",
        "postTime": 1554706904,
        "uid": 3144,
        "name": "\u6d6e\u5c18ii",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5284 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898\u3011"
    },
    {
        "content": "\u5728\u535a\u5ba2\u56ed\u98df\u7528\u66f4\u4f73\uff1a[https://www.cnblogs.com/PinkRabbit/p/SHOI2019D1T2.html](https://www.cnblogs.com/PinkRabbit/p/SHOI2019D1T2.html)\u3002\n\n### \u9898\u610f\u7b80\u8ff0\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6bcd\u4e32 $S$\u3002\n\n\u6709 $n_a$ \u4e2a A \u7c7b\u4e32\uff0c\u90fd\u662f $S$ \u7684\u5b50\u4e32\uff0c\u4ee5\u533a\u95f4\u7684\u5f62\u5f0f\u7ed9\u51fa\u3002\n\n\u6709 $n_b$ \u4e2a B \u7c7b\u4e32\uff0c\u90fd\u662f $S$ \u7684\u5b50\u4e32\uff0c\u4ee5\u533a\u95f4\u7684\u5f62\u5f0f\u7ed9\u51fa\u3002\n\n\u6709 $m$ \u4e2a\u652f\u914d\u5173\u7cfb\uff0c\u5f62\u5f0f\u4e3a\u7b2c $i$ \u4e2a A \u7c7b\u4e32\u652f\u914d\u7b2c $j$ \u4e2a B \u7c7b\u4e32\u3002\n\n\u4f60\u9700\u8981\u6c42\u51fa\u6700\u957f\u7684\u5b57\u7b26\u4e32 $T$ \u7684\u957f\u5ea6\uff0c\u4f7f\u5f97 $T$ \u53ef\u4ee5\u88ab\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a A \u7c7b\u4e32\u7684\u62fc\u63a5\uff0c\u5e76\u4e14\u76f8\u90bb\u4e24\u4e2a A \u7c7b\u4e32 $t_i$ \u548c $t_{i+1}$ \u6ee1\u8db3 $t_i$ \u652f\u914d\u67d0\u4e2a B \u7c7b\u4e32 $j$\uff0c\u800c $j$ \u662f $t_{i+1}$ \u7684\u524d\u7f00\u3002\n\n\u5982\u679c $T$ \u53ef\u4ee5\u65e0\u9650\u957f\uff0c\u8f93\u51fa `-1`\u3002\n\n### \u9898\u89e3\uff1a\n\n\u5982\u679c\u6211\u4eec\u8bbe\u6cd5\u4ece\u6bcf\u4e2a B \u7c7b\u4e32\u5411\u5b58\u5728\u524d\u7f00\u4e3a\u8fd9\u4e2a B \u7c7b\u4e32\u7684 A \u7c7b\u4e32\u8fde\u8fb9\uff0c\u5219\u663e\u7136\u82e5\u6709\u73af\u5219\u7b54\u6848\u53ef\u4ee5\u65e0\u9650\u5927\uff0c\u82e5\u65e0\u73af\u5219\u53ef\u4ee5\u505a\u4e00\u904d DAG DP \u5f97\u5230\u7b54\u6848\u3002\n\n\u7136\u800c\u6211\u4eec\u5e76\u4e0d\u80fd\u76f4\u63a5\u5b9e\u73b0\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u4e14\u4e0d\u8bba\u80fd\u5426\u5feb\u901f\u786e\u5b9a\u524d\u7f00\u4ece\u5c5e\u5173\u7cfb\uff0c\u8fd9\u7c7b\u8fb9\u7684\u6761\u6570\u5c31\u80fd\u8fbe\u5230 $\\mathcal{O}(n_an_b)$ \u7ea7\u522b\u3002\n\n\u5f53\u8fb9\u6570\u592a\u591a\u65f6\uff0c\u9996\u5148\u5e94\u8be5\u60f3\u5230\u7684\u5c31\u662f\u6570\u636e\u7ed3\u6784\u4f18\u5316\u5efa\u8fb9\uff0c\u5178\u578b\u7684\u4f8b\u5b50\u662f\u6811\u72b6\u7ed3\u6784\u4f18\u5316\u5efa\u8fb9\uff0c\u4f8b\u5982\u7ebf\u6bb5\u6811\u548c\u540e\u7f00\u6811\u3002\n\n\u5b9e\u9645\u4e0a\u8fd9\u9898\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u540e\u7f00\u6811\u4f18\u5316\u5efa\u8fb9\uff0c\u8fb9\u6570\u53ea\u6709\u7ebf\u6027\u7ea7\u522b\uff0c\u4f46\u662f\u8fc7\u7a0b\u8fd8\u662f $\\mathcal{O}(n\\log n)$ \u7684\u3002\u81f3\u4e8e\u5efa\u540e\u7f00\u6811\u53ef\u4ee5\u76f4\u63a5\u5efa\u4e5f\u53ef\u4ee5\u5bf9\u53cd\u4e32\u5efa SAM\u3002\n\n\u5bf9\u4e8e\u6211\u8fd9\u79cd\u4e0d\u4f1a\u540e\u7f00\u6811\uff0cSAM \u7406\u89e3\u4e5f\u4e0d\u6df1\u7684\u83dc\u5154\uff0c\u8fd8\u662f\u9009\u62e9\u4e86\u540e\u7f00\u6570\u7ec4\u3002\n\n\u9996\u5148\u5efa\u51fa\u540e\u7f00\u6570\u7ec4\uff0c\u8fd9\u4e2a\u5927\u5bb6\u90fd\u4f1a\u3002\u7136\u540e\u5bf9\u6bcf\u4e2a B \u7c7b\u4e32\u8003\u8651\u5982\u4f55\u8fde\u8fb9\u3002\n\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5bf9\u6bcf\u4e2a A \u7c7b\u548c B \u7c7b\u4e32\u5728\u6bcd\u4e32\u4e0a\u5b9a\u4f4d\u4e86\uff0c\u90a3\u4e48\u5305\u542b\u67d0\u4e2a B \u7c7b\u4e32\u4f5c\u4e3a\u524d\u7f00\u7684 A \u7c7b\u4e32\u9700\u8981\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a  \n\u8be5 A \u4e32\u7684\u5de6\u7aef\u70b9\u5bf9\u5e94\u7684\u540e\u7f00\u548c B \u4e32\u7684\u5de6\u7aef\u70b9\u5bf9\u5e94\u7684\u540e\u7f00\u7684 LCP \u957f\u5ea6\u5e94\u8be5\u5927\u4e8e B \u4e32\u7684\u957f\u5ea6\uff0c\u5e76\u4e14\u8be5 A \u4e32\u7684\u957f\u5ea6\u4e5f\u5e94\u8be5\u5927\u4e8e B \u4e32\u7684\u957f\u5ea6\u3002\n\n\u7b2c\u4e00\u4e2a\u6761\u4ef6\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5bf9\u5e94\u7740\u540e\u7f00\u6570\u7ec4\u4e0a\u7684\u4e00\u6bb5\u533a\u95f4\uff0c\u5177\u4f53\u6839\u636e Height \u6570\u7ec4\u786e\u5b9a\uff0c\u8fd9\u4e00\u6b65\u5efa\u51fa ST \u8868\u540e\u4e8c\u5206\u53ef\u4ee5\u5728 $\\mathcal{O}(\\log n)$ \u7684\u65f6\u95f4\u5185\u89e3\u51b3\u3002\n\n\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u4f3c\u4e4e\u6ca1\u6709\u4ec0\u4e48\u5de7\u5999\u7684\u529e\u6cd5\u3002\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6309\u7167\u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u52a0\u5165\u6bcf\u4e2a\u4e32\uff0c\u8fd9\u6837\u5c31\u80fd\u591f\u6254\u6389\u7b2c\u4e8c\u4e2a\u9650\u5236\u4e86\u3002\n\n\u6240\u4ee5\u5177\u4f53\u7684\u601d\u8def\u5c31\u662f\u6309\u7167\u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u63d2\u5165 A \u7c7b\u4e32\uff0c\u5728 B \u7c7b\u4e32\u548c\u6570\u636e\u7ed3\u6784\u4e4b\u95f4\u5efa\u8fb9\uff0c\u4f7f\u7528\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u5386\u53f2\u7248\u672c\u548c\u533a\u95f4\u3002\n\n\u5f88\u663e\u7136\uff0c\u4e3b\u5e2d\u6811\u4fbf\u662f\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e3b\u5e2d\u6811\u4f18\u5316\u5efa\u8fb9\uff0c\u6811\u5185\u8fb9\u6570 $\\mathcal{O}(n_a\\log n)$\uff0c\u6811\u5916\u8fb9\u6570 $\\mathcal{O}(n_b\\log n)$\u3002\n\n\u63a5\u4e0b\u6765\u662f\u4ee3\u7801\uff0c\u590d\u6742\u5ea6 $\\mathcal{O}((n+n_a+n_b)\\log n)$\uff1a\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <cstring>\n#include <algorithm>\n\ntypedef long long LL;\nconst int MN = 200005;\nconst int MS = 4200005;\n\nchar str[MN];\nint N, Sig, rk[MN], SA[MN], SA2[MN], buk[MN], tmp[MN];\nint Height[MN];\ninline void getHeight() {\n\tfor (int i = 1, k = 0; i <= N; ++i) {\n\t\tif (rk[i] == 1) { Height[rk[i]] = k = 0; continue; }\n\t\tif (k) --k;\n\t\tint j = SA[rk[i] - 1];\n\t\twhile (i + k <= N && j + k <= N && str[i + k] == str[j + k]) ++k;\n\t\tHeight[rk[i]] = k;\n\t}\n}\ninline void RSort() {\n\tfor (int i = 1; i <= Sig; ++i) buk[i] = 0;\n\tfor (int i = 1; i <= N; ++i) ++buk[rk[i]];\n\tfor (int i = 1; i <= Sig; ++i) buk[i] += buk[i - 1];\n\tfor (int i = N; i >= 1; --i) SA[buk[rk[SA2[i]]]--] = SA2[i];\n}\ninline void getSA(char *str) {\n\tSig = 127, rk[N + 1] = 0;\n\tfor (int i = 1; i <= N; ++i) rk[i] = str[i], SA2[i] = i;\n\tRSort();\n\tfor (int j = 1; j <= N; j <<= 1) {\n\t\tint p = 0;\n\t\tfor (int i = N - j + 1; i <= N; ++i) SA2[++p] = i;\n\t\tfor (int i = 1; i <= N; ++i) if (SA[i] > j) SA2[++p] = SA[i] - j;\n\t\tRSort();\n\t\ttmp[SA[1]] = p = 1;\n\t\tfor (int i = 2; i <= N; ++i) {\n\t\t\tint lst = SA[i - 1], now = SA[i];\n\t\t\tif (rk[lst] != rk[now] || rk[lst + j] != rk[now + j]) ++p;\n\t\t\ttmp[SA[i]] = p;\n\t\t}\n\t\tfor (int i = 1; i <= N; ++i) rk[i] = tmp[i];\n\t\tif ((Sig = p) == N) break;\n\t}\n\tgetHeight();\n}\n\nint Lg[MN];\ninline void Log(int N) {\n\tLg[0] = -1;\n\tfor (int i = 1; i <= N; ++i) Lg[i] = Lg[i >> 1] + 1;\n}\nint ST[MN][18];\ninline void InitST() {\n\tfor (int i = 2; i <= N; ++i) ST[i][0] = Height[i];\n\tfor (int j = 1; j <= Lg[N - 1]; ++j) {\n\t\tfor (int i = 1; i <= 1 << j; ++i) ST[i][j] = 0;\n\t\tfor (int i = 1 << j | 1; i <= N; ++i)\n\t\t\tST[i][j] = std::min(ST[i - (1 << (j - 1))][j - 1], ST[i][j - 1]);\n\t}\n}\n\nint NA, la[MN], ra[MN];\nint NB, lb[MN], rb[MN];\nstruct sub {\n\tint lb, len, typ, id;\n\tsub() {}\n\tsub(int lb, int len, int typ, int id) : lb(lb), len(len), typ(typ), id(id) {}\n\tinline friend bool operator <(sub i, sub j) {\n\t\treturn i.len == j.len ? i.typ < j.typ : i.len > j.len;\n\t}\n} substrs[MN * 2];\n\nint d[MS];\nstd::vector<int> G[MS];\ninline void addEdge(int x, int y) { ++d[y]; G[x].push_back(y); }\n\nint rt[MN], lc[MS], rc[MS], wgh[MS], cnt;\nvoid Mdf(int &rt, int l, int r, int p, int x) {\n\tlc[++cnt] = lc[rt], rc[cnt] = rc[rt];\n\tif (rt) addEdge(cnt, rt);\n\twgh[rt = cnt] = 0;\n\tif (l == r) { addEdge(rt, x); return ; }\n\tint mid = (l + r) >> 1;\n\tif (p <= mid) Mdf(lc[rt], l, mid, p, x), addEdge(rt, lc[rt]);\n\telse Mdf(rc[rt], mid + 1, r, p, x), addEdge(rt, rc[rt]);\n}\nvoid Edg(int rt, int l, int r, int a, int b, int x) {\n\tif (!rt || r < a || b < l) return ;\n\tif (a <= l && r <= b) { addEdge(x, rt); return ; }\n\tint mid = (l + r) >> 1;\n\tEdg(lc[rt], l, mid, a, b, x);\n\tEdg(rc[rt], mid + 1, r, a, b, x);\n}\n\nint que[MS], l, r;\nLL f[MS];\n\nint main() {\n\tint T; scanf(\"%d\", &T);\n\tLog(200000);\n\twhile (T--) {\n\t\tscanf(\"%s\", str + 1);\n\t\tN = strlen(str + 1);\n\t\tgetSA(str);\n\t\tInitST();\n\t\tscanf(\"%d\", &NA);\n\t\tfor (int i = 1; i <= NA; ++i)\n\t\t\tscanf(\"%d%d\", &la[i], &ra[i]),\n\t\t\tsubstrs[i] = sub(rk[la[i]], ra[i] - la[i] + 1, 0, i);\n\t\tscanf(\"%d\", &NB);\n\t\tfor (int i = 1; i <= NB; ++i)\n\t\t\tscanf(\"%d%d\", &lb[i], &rb[i]),\n\t\t\tsubstrs[NA + i] = sub(rk[lb[i]], rb[i] - lb[i] + 1, 1, i);\n\t\tstd::sort(substrs + 1, substrs + NA + NB + 1);\n\t\tcnt = NA + NB;\n\t\tfor (int i = 1; i <= NA; ++i) wgh[i] = ra[i] - la[i] + 1;\n\t\tfor (int i = 1; i <= NB; ++i) wgh[NA + i] = 0;\n\t\tfor (int i = 1, gen = 0; i <= NA + NB; ++i) {\n\t\t\tsub p = substrs[i];\n\t\t\tif (!p.typ) ++gen, Mdf(rt[gen] = rt[gen - 1], 1, N, p.lb, p.id);\n\t\t\telse {\n\t\t\t\tint Lb = p.lb, Rb = p.lb;\n\t\t\t\tfor (int j = Lg[p.lb - 1]; ~j; --j)\n\t\t\t\t\tif (ST[Lb][j] >= p.len) Lb -= 1 << j;\n\t\t\t\tfor (int j = Lg[N - p.lb]; ~j; --j)\n\t\t\t\t\tif (Rb + (1 << j) <= N && ST[Rb + (1 << j)][j] >= p.len) Rb += 1 << j;\n\t\t\t\tEdg(rt[gen], 1, N, Lb, Rb, NA + p.id);\n\t\t\t}\n\t\t}\n\t\tint M; scanf(\"%d\", &M);\n\t\tfor (int i, j; M--; ) {\n\t\t\tscanf(\"%d%d\", &i, &j);\n\t\t\taddEdge(i, NA + j);\n\t\t}\n\t\tLL Ans = 0;\n\t\tl = 1, r = 0;\n\t\tfor (int i = 1; i <= cnt; ++i) {\n\t\t\tf[i] = wgh[i];\n\t\t\tif (!d[i]) que[++r] = i;\n\t\t}\n\t\twhile (l <= r) {\n\t\t\tint u = que[l++];\n\t\t\tAns = std::max(Ans, f[u]);\n\t\t\tfor (auto v : G[u]) {\n\t\t\t\tf[v] = std::max(f[v], f[u] + wgh[v]);\n\t\t\t\tif (!--d[v]) que[++r] = v;\n\t\t\t}\n\t\t}\n\t\tif (r != cnt) puts(\"-1\");\n\t\telse printf(\"%lld\\n\", Ans);\n\t\tfor (int i = 1; i <= cnt; ++i) d[i] = 0, G[i].clear();\n\t}\n\treturn 0;\n}\n```\n\n\u5b9e\u9645\u4e0a\uff0c\u540c\u6837\u662f\u540e\u7f00\u6570\u7ec4\u9884\u5904\u7406\uff0c\u5173\u4e8e\u5efa\u8fb9\u6709\u66f4\u597d\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982\u7528\u540e\u7f00\u6570\u7ec4\u5efa\u51fa\u540e\u7f00\u6811\uff0c\u7136\u540e\u5728\u540e\u7f00\u6811\u4e0a\u4e71\u641e\u5efa\u8fb9\uff0c\u8fd9\u6837\u662f\u7ebf\u6027\u7684\u3002",
        "postTime": 1554997238,
        "uid": 10703,
        "name": "\u5c0f\u7c89\u5154",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5284 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898\u3011"
    },
    {
        "content": "\u81ea\u5df1\u62ff\u5230\u9898\u76ee\u53e3\u80e1\u4e86\u4e00\u4e0b\u540e\u7f00\u6570\u7ec4\u7684\u505a\u6cd5\uff0c\u540e\u7f00\u6570\u7ec4 + \u500d\u589e + \u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe + $DAG$ \u4e0a\u62d3\u6251\uff0c\u6211\u7801\u529b\u4e0d\u591f\u5c31\u6ca1\u6253\u4e86\u3002\u3002\u3002\n\n\u7136\u540e\u6211 $yy$ \u4e86\u4e00\u4e0b\u540e\u7f00\u81ea\u52a8\u673a\u7684\u505a\u6cd5\uff0c\u867d\u7136\u4e5f\u5f88\u9ebb\u70e6\uff0c\u4f46\u662f\u601d\u8def\u7406\u6e05\u4e86\u5c31\u6ca1\u4ec0\u4e48\u95ee\u9898\u4e86\u3002\n\n### \u540e\u7f00\u81ea\u52a8\u673a + \u6811\u4e0a\u500d\u589e + \u5b57\u5178\u6811\u4f18\u5316\u5efa\u56fe + $DAG$ \u4e0a\u62d3\u6251\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u66b4\u529b $O(n^3)$ \u5339\u914d+\u8fde\u8fb9\uff0c\u7136\u540e\u5728 $DAG$ \u4e0a\u62d3\u6251\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u83b7\u5f97 $10pts$ \u7684\u597d\u6210\u7ee9\u3002\n\n\u6211\u4eec\u5148\u5efa\u51fa**\u53cd\u4e32**\u7684\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u6ce8\u610f\u662f**\u53cd\u4e32**\uff0c**\u53cd\u4e32**\uff0c**\u53cd\u4e32**\uff01\n\n\u6211\u4eec\u8981\u5728\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u627e\u5230\u4e00\u6bb5\u5b50\u4e32\uff0c\u90a3\u4e48\u8bb0\u5f55\u4e00\u4e0b\u53cd\u4e32\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u5728\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u500d\u589e\u4e0a\u53bb\u3002\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u540e\u7f00\u81ea\u52a8\u673a\u7684\u7ed3\u70b9\u5f00\u4e00\u4e2a $vector$\uff0c\u6309\u7167**\u5b50\u4e32\u957f\u5ea6**\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c**\u662f\u5426\u4e3a $A$ \u7c7b\u4e32**\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u8fde\u8fb9\u3002\n\n\u7531\u4e8e\u53cd\u4e32\u4e24\u4e2a\u524d\u7f00\u4e00\u5b9a\u6709\u4e00\u4e2a\u524d\u7f00\u662f\u53e6\u4e00\u4e2a\u524d\u7f00\u7684\u524d\u7f00\uff08\u597d\u50cf\u6709\u70b9\u62d7\u53e3\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u540e\u7f00\u81ea\u52a8\u673a\u7236\u4eb2\u7ed3\u70b9\u6302\u4e0b\u6765\u7684\u7ed3\u70b9\u5411\u5f53\u524d\u7ed3\u70b9\u8fde\u4e00\u6761\u8fb9\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u5728 $DAG$ \u4e0a\u62d3\u6251\u4e86\uff01\n\n\u6bcf\u4e2a\u6570\u7ec4\u7a7a\u95f4\u5f00\u591a\u5927\u8981\u7b97\u4e00\u4e0b\u4ee5\u53ca\u5e38\u6570\u5199\u7684\u7a0d\u5fae\u597d\u4e00\u70b9\uff0c\u4e0d\u7136\u4e0d\u5f00 $O_2$ \u53ef\u80fd\u4f1a $T$ \u98de\u6389\u3002\n\n\u5176\u5b9e\u7a7a\u95f4\u4e0d\u7b97\u4e5f\u53ef\u4ee5\u554a\uff0c\u76f4\u63a5\u65e0\u8111\u5f00 $8\\times 10^5$ \u7edd\u5bf9\u4e0d\u4f1a\u70b8\u3002\u3002\u3002\n\n\u8fd8\u6709\u5c31\u662f\u7b54\u6848\u8981\u5f00 $\\text{long\\ long}$\uff01\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u9053\u9898\u5728\u968f\u673a\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u7b54\u6848\u975e\u5e38\u5c0f\uff0c\u90a3\u4e48\u4f60\u5c31\u5927\u9519\u7279\u9519\u4e86\u3002\u867d\u7136\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u51fa\u9898\u4eba\u9020\u6570\u636e\u7684\u672c\u4e8b\u5982\u6b64\u7684\u5f3a\uff0c\u4f46\u662f\u7406\u8bba\u4e0a\u7b54\u6848\u53ef\u4ee5\u8fbe\u5230 $10^{10}$ \u7ea7\u522b\u3002\n\n$Code\\ Below:$\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int maxn=200000+10;\nint n,na,nb,m,sz,a[maxn],b[maxn],isa[maxn<<2];char s[maxn];\nint last,cnt,id[maxn],lst[maxn<<1],f[maxn<<1][20],ch[maxn<<1][26],fa[maxn<<1],len[maxn<<2];\nint in[maxn<<2],head[maxn<<2],to[maxn<<3],nxt[maxn<<3],tot;\nvector<int> g[maxn<<2];ll dis[maxn<<2];\n\ninline void insert(int c)\n{\n    int p=last,q=++cnt;last=q;len[q]=len[p]+1;\n    for(;p&&!ch[p][c];p=fa[p]) ch[p][c]=q;\n    if(!p) fa[q]=1;\n    else\n    {\n        int r=ch[p][c];\n        if(len[p]+1==len[r]) fa[q]=r;\n        else\n        {\n            int s=++cnt;len[s]=len[p]+1;\n            memcpy(ch[s],ch[r],sizeof(ch[r]));\n            fa[s]=fa[r];fa[r]=fa[q]=s;\n            for(;p&&ch[p][c]==r;p=fa[p]) ch[p][c]=s;\n        }\n    }\n}\n\ninline void judge(int b)\n{\n    int l,r;\n    scanf(\"%d%d\",&l,&r);\n    r=r-l+1;l=id[l];\n    for(int i=19;i>=0;i--)\n        if(f[l][i]&&len[f[l][i]]>=r) l=f[l][i];\n    isa[++sz]=b;len[sz]=r;g[l].push_back(sz);\n}\n\ninline bool cmp(const int &x,const int &y)\n{\n    return len[x]>len[y]||(len[x]==len[y]&&isa[x]>isa[y]);\n}\n\ninline void addedge(int x,int y)\n{\n    to[++tot]=y;\n    nxt[tot]=head[x];\n    head[x]=tot;\n    in[y]++;\n}\n\ninline void solve()\n{\n    scanf(\"%s\",s+1);n=strlen(s+1);last=cnt=1;\n    for(int i=n;i>=1;i--) insert(s[i]-'a'),id[i]=last;\n    for(int i=1;i<=cnt;i++) f[i][0]=fa[i];\n    for(int j=1;j<=19;j++)\n        for(int i=1;i<=cnt;i++) f[i][j]=f[f[i][j-1]][j-1];\n    scanf(\"%d\",&na);sz=cnt;\n    for(int i=1;i<=na;i++) judge(1),a[i]=sz;\n    scanf(\"%d\",&nb);\n    for(int i=1;i<=nb;i++) judge(0),b[i]=sz;\n    for(int i=1;i<=cnt;i++) sort(g[i].begin(),g[i].end(),cmp);\n    for(int i=1;i<=cnt;i++)\n    {\n        int last=i;\n        for(int j=g[i].size()-1;j>=0;j--)\n        {\n            int now=g[i][j];addedge(last,now);\n            if(!isa[now]) last=now;\n        }\n        lst[i]=last;\n    }\n    for(int i=2;i<=cnt;i++) addedge(lst[fa[i]],i);\n    for(int i=1;i<=sz;i++)\n        if(!isa[i]) len[i]=0;\n    scanf(\"%d\",&m);\n    int x,y,f=0;ll ans=0;\n    for(int i=1;i<=m;i++) scanf(\"%d%d\",&x,&y),addedge(a[x],b[y]);\n    queue<int> q;\n    for(int i=1;i<=sz;i++)\n        if(!in[i]) q.push(i);\n    while(!q.empty())\n    {\n        x=q.front(),q.pop();\n        ans=max(ans,dis[x]+len[x]);\n        for(int i=head[x];i;i=nxt[i])\n        {\n            y=to[i];dis[y]=max(dis[y],dis[x]+len[x]);\n            if(!--in[y]) q.push(y);\n        }\n    }\n    for(int i=1;i<=sz;i++)\n        if(in[i]){f=1;break;}\n    if(f) printf(\"-1\\n\");\n    else printf(\"%lld\\n\",ans);\n    while(!q.empty()) q.pop();\n    for(int i=1;i<=cnt;i++) fa[i]=0,memset(ch[i],0,sizeof(ch[i]));\n    for(int i=1;i<=sz;i++) g[i].clear(),isa[i]=len[i]=head[i]=dis[i]=in[i]=0;\n    last=cnt=sz=tot=0;\n}\n\nint main()\n{\n    int T;\n    scanf(\"%d\",&T);\n    while(T--) solve();\n    return 0;\n}\n```",
        "postTime": 1554716658,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5284 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898\u3011"
    },
    {
        "content": "\u540e\u7f00\u6811\u4f18\u5316\u5efa\u56fe\u6a21\u677f\u9898\u3002\n\n\u9996\u5148\uff0c\u201c\u6700\u957f\u5355\u8bcd\u201d\u4e0e\u5bf9\u65e0\u9650\u957f\u7684\u5224\u5b9a\u5f88\u660e\u663e\u662f\u4e00\u4e2a\u56fe\u8bba\u7684\u6700\u957f\u8def\u95ee\u9898\uff0c\u5bb9\u6613\u60f3\u5230\u8f6c\u5316\u4e3a\u56fe\u7136\u540e\u62d3\u6251dp\u3002\u800c\u9700\u8981\u5efa\u7684\u8fb9\u5c31\u7b49\u540c\u4e8eA\u4e32\u5411B\u4e32\u6309\u652f\u914d\u5173\u7cfb\u8fde\u8fb9\u800cB\u4e32\u5411\u4ee5\u5176\u4e3a\u524d\u7f00\u7684A\u4e32\u8fde\u8fb9\uff0c\u8fd9\u6837\u4efb\u610f\u4e24\u4e2a\u76f8\u8fde\u7684A\u4e32\u90fd\u4e0d\u91cd\u4e0d\u6f0f\u5730\u88ab\u8003\u8651\u5230\u4e86\u3002\n\n\u8003\u8651\u5efa\u51fa\u540e\u7f00\u6811\uff0c\u5e76\u5c06AB\u4e32\u5728\u540e\u7f00\u6811\u4e0a\u5b9a\u4f4d\uff08\u5b9a\u4f4d\uff1a\u5373\u4ece\u6839\u51fa\u53d1\u5339\u914d\uff09\uff0c\u7136\u540e\u76f4\u63a5A\u4e32\u8fdeB\u4e32\u5373\u53ef\uff0c\u800c\u540e\u7f00\u6811\u672c\u8eab\u7684\u6811\u8fb9\u5c31\u662fB\u4e32\u8fde\u5411A\u4e32\u7684\u8fb9\u3002\u66b4\u529b\u4ece\u6839\u5339\u914d\u5b9a\u4f4d\u662f\u80af\u5b9aTLE\u7684\uff0c\u8003\u8651\u9700\u8981\u5339\u914d\u7684\u90fd\u662f\u539f\u4e32\u7684\u5b50\u4e32$[l,r]$\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5b9a\u4f4d\u6240\u6709\u540e\u7f00\u4f4d\u7f6e$ys[n]$\uff08\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u770b\u53f6\u5b50\u8282\u70b9\u7684\u6df1\u5ea6\u5b9e\u73b0\uff09\uff0c\u5219\u9700\u8981\u5b9a\u4f4d\u7684\u70b9\u53ef\u4ee5\u76f4\u63a5\u4ece$ys[r]$\u5411\u4e0a\u500d\u589e\u627e\u5230\u3002\n\n\u7136\u800c\uff0c\u627e\u5230\u7684\u70b9\u53ef\u80fd\u662f\u88ab\u538b\u7f29\u7684\u8def\u5f84\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u62c6\u8fb9\uff0c\u7c7b\u4f3c\u4e8e\u6709\u6d3b\u8dc3\u534a\u5f84\u65f6\u7684\u5931\u914d\u60c5\u51b5\uff0c\u628a$a->b$\u62c6\u4e3a$a->c->b$\u5373\u53ef\u3002\u5efa\u56fe\u5b8c\u6210\u540e\u8dd1\u4e00\u904d\u6700\u957f\u8def\u5373\u53ef\u3002\n\n\u7ec6\u8282\uff1a\n\n1.\u867d\u7136\u53ea\u6709\u4e00\u4e2a\u4e32\uff0c\u4f46\u7528ukk\u5efa\u56fe\u7684\u8fd8\u662f\u8981\u5728\u6700\u540e\u52a0\u7279\u6b8a\u5b57\u7b26\n\n2.\u62c6\u8fb9\u65f6\u4e3a\u4e86\u65b9\u4fbf\u5efa\u8bae\u6309\u7167\u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u52a0\u5165\uff0c\u6ce8\u610f\u7279\u5224\u4e24\u4e2a\u4e32\u5339\u914d\u5230\u540c\u4e00\u4e2a\u65b0\u589e\u8282\u70b9\u60c5\u51b5\n\n3.\u6700\u957f\u8def\u7684\u7ed3\u675f\u70b9\u53ea\u80fd\u662fA\u4e32\u7684\u5b9a\u4f4d\u70b9\uff0c\u4e0d\u80fd\u7528\u4efb\u610f\u53f6\u5b50\n\n4.A\u5411B\u7684\u8fde\u8fb9\u957f\u5ea6\u4e0d\u662f0\uff0c\u800c\u662fB\u7684\u6df1\u5ea6\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int N=2e5+10,Q=4e5+10,M=8e5+10,O=1e6+10,P=7e7;\nchar cc[P+10];\nll g[M],ans;\nint t[M],f[M],zd[M],c[M][27],fa[M],lj[O],nxt[O],fir[M],s[M],rd[M],dl[M],bz[M][20],ub[M];\nint len[O],dep[M],la[N],ra[N],lb[N],rb[N],pos[Q],cd[Q],id[Q],ys[N],lf[O],eg[Q];\nint posa[N],posb[N];\nint n,m,na,nb,bs,fbs,ds,ad,point,r,edge,remain,T,dtp,tou,wei,i,j,x,y;\ninline void read(int &x)\n{\n\t++dtp;\n\twhile ((cc[dtp]<48)||(cc[dtp]>57)) ++dtp;\n\tx=cc[dtp++]^48;\n\twhile ((cc[dtp]>=48)&&(cc[dtp]<=57)) x=x*10+(cc[dtp++]^48);\n}\ninline void add(int x,int y)\n{\n\tlj[++fbs]=y;\n\tnxt[fbs]=fir[x];\n\tfir[x]=fbs;\n}\ninline void add(int x,int y,int z)\n{\n\tlj[++fbs]=y;\n\tlen[fbs]=z;\n\tnxt[fbs]=fir[x];\n\tfir[x]=fbs;\n}\ninline void add(int a,int b,int cc,int d)\n{\n\tzd[++bs]=b;\n\tt[bs]=d;\n\tf[bs]=cc;\n\tc[a][s[cc]]=bs;\n}\nvoid qs(int l,int r)\n{\n\tint i=l,j=r,m=cd[l+r>>1];\n\twhile (i<=j)\n\t{\n\t\twhile (cd[i]>m) ++i;\n\t\twhile (cd[j]<m) --j;\n\t\tif (i<=j)\n\t\t{\n\t\t\tswap(cd[i],cd[j]);\n\t\t\tswap(eg[i],eg[j]);\n\t\t\tswap(pos[i],pos[j]);\n\t\t\tswap(id[i++],id[j--]);\n\t\t}\n\t}\n\tif (i<r) qs(i,r);\n\tif (l<j) qs(l,j);\n}\nint main()\n{\n\tx=fread(cc+1,1,P,stdin);cc[x+1]=0;;\n\tread(T);\n\twhile (T--)\n\t{\n\t\tmemset(g+1,0,ds<<3);\n\t\tmemset(rd+1,0,ds<<2);\n\t\tmemset(fir+1,0,ds<<2);\n\t\tds=tou=point=fa[1]=1;n=r=fbs=bs=remain=wei=0;\n\t\t++dtp;\n\t\twhile ((cc[dtp]<'a')||(cc[dtp]>'z')) ++dtp;\n\t\twhile ((cc[dtp]>='a')&&(cc[dtp]<='z')) s[++n]=cc[dtp++]-'a';\n\t\ts[++n]=26;\n\t\tfor (i=1;i<=n;i++)\n\t\t{\n\t\t\t++remain;ad=0;\n\t\t\twhile (remain)\n\t\t\t{\n\t\t\t\tif (r==0) edge=i;\n\t\t\t\tif ((j=c[point][s[edge]])==0)\n\t\t\t\t{\n\t\t\t\t\tfa[ad]=point;\n\t\t\t\t\tfa[++ds]=1;\n\t\t\t\t\tadd(point,ad=ds,edge,n);\n\t\t\t\t\tadd(point,s[edge]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ((t[j]!=n)&&(t[j]-f[j]+1<=r))\n\t\t\t\t\t{\n\t\t\t\t\t\tr-=t[j]-f[j]+1;\n\t\t\t\t\t\tpoint=zd[j];\n\t\t\t\t\t\tedge+=t[j]-f[j]+1;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (s[f[j]+r]==s[i]) {++r;fa[ad]=point;break;}\n\t\t\t\t\tfa[fa[ad]=++ds]=1;\n\t\t\t\t\tadd(ad=ds,zd[j],f[j]+r,t[j]);add(ds,s[f[j]+r]);\n\t\t\t\t\tzd[j]=ds;t[j]=f[j]+r-1;\n\t\t\t\t\tadd(ds,s[i]);fa[++ds]=1;add(ds-1,ds,i,n);\n\t\t\t\t}\n\t\t\t\t--remain;\n\t\t\t\tif ((r)&&(point==1))\n\t\t\t\t{\n\t\t\t\t\t--r;\n\t\t\t\t\tedge=i-remain+1;\n\t\t\t\t} else point=fa[point];\n\t\t\t}\n\t\t}\n\t\tfor (i=1;i<=ds;i++) for (j=fir[i];j;j=nxt[j])\n\t\t{\n\t\t\tx=c[i][lj[j]];\n\t\t\tif (t[x]==n) --t[x];\n\t\t\tlen[j]=t[x]-f[x]+1;\n\t\t\tlj[j]=zd[x];\n\t\t}\n\t\tmemset(c+1,0,108*ds);\n\t\tdl[tou=wei=1]=1;--n;\n\t\twhile (tou<=wei)\n\t\t{\n\t\t\tx=dl[tou++];\n\t\t\tfor (i=1;bz[x][i-1];i++) bz[x][i]=bz[bz[x][i-1]][i-1];\n\t\t\tub[x]=i-2;\n\t\t\tif (!fir[x]) {ys[dep[x]]=x;continue;}\n\t\t\tfor (i=fir[x];i;i=nxt[i])\n\t\t\t{\n\t\t\t\tdep[lj[i]]=dep[x]+len[i];\n\t\t\t\tbz[lj[i]][0]=x;\n\t\t\t\tlf[lj[i]]=i;\n\t\t\t\tdl[++wei]=lj[i];\n\t\t\t}\n\t\t}\n\t\tread(na);\n\t\tfor (i=1;i<=na;i++) {read(la[i]);read(ra[i]);}\n\t\tread(nb);\n\t\tfor (i=1;i<=nb;i++) {read(lb[i]);read(rb[i]);}\n\t\tfor (i=1;i<=na;i++)\n\t\t{\n\t\t\tx=ys[n-la[i]+1];y=ra[i]-la[i]+1;\n\t\t\tif (dep[x]==y) {if (dep[bz[x][0]]==y) x=bz[x][0];pos[i]=x;;cd[i]=0;id[i]=i;continue;}\n\t\t\tfor (j=ub[x];~j;j--) if (dep[bz[x][j]]>y) x=bz[x][j];\n\t\t\tpos[i]=bz[x][0];cd[i]=y-dep[bz[x][0]];id[i]=i;eg[i]=lf[x];\n\t\t}\n\t\tfor (i=1;i<=nb;i++)\n\t\t{\n\t\t\tx=ys[n-lb[i]+1];y=rb[i]-lb[i]+1;\n\t\t\tif (dep[x]==y) {if (dep[bz[x][0]]==y) x=bz[x][0];pos[i+na]=x;cd[i+na]=0;id[i+na]=i+na;continue;}\n\t\t\tfor (j=ub[x];~j;j--) if (dep[bz[x][j]]>y) x=bz[x][j];\n\t\t\tpos[i+na]=bz[x][0];cd[i+na]=y-dep[bz[x][0]];id[i+na]=i+na;eg[i+na]=lf[x];\n\t\t}\n\t\tmemset(bz+1,0,80*ds);\n\t\tqs(1,na+nb);\n\t\tfor (i=1;i<=na+nb;i++) if (cd[i])\n\t\t{\n\t\t\tif (cd[i]==len[eg[i]]) {if (id[i]<=na) posa[id[i]]=lj[eg[i]]; else posb[id[i]-na]=lj[eg[i]];continue;}\n\t\t\tadd(++ds,lj[eg[i]],len[eg[i]]-cd[i]);dep[ds]=dep[pos[i]]+cd[i];\n\t\t\tlen[eg[i]]=cd[i];lj[eg[i]]=ds;\n\t\t\tif (id[i]<=na) posa[id[i]]=ds; else posb[id[i]-na]=ds;\n\t\t} else {if (id[i]<=na) posa[id[i]]=pos[i]; else posb[id[i]-na]=pos[i];}\n\t\tread(m);\n\t\twhile (m--)\n\t\t{\n\t\t\tread(x);read(y);add(posa[x],posb[y],dep[posb[y]]);\n\t\t}\n\t\tfor (i=1;i<=fbs;i++) ++rd[lj[i]];\n\t\ttou=1;wei=0;\n\t\tfor (i=1;i<=ds;i++) if (!rd[i]) dl[++wei]=i;\n\t\twhile (tou<=wei) for (i=fir[x=dl[tou++]];i;i=nxt[i])\n\t\t{\n\t\t\tg[lj[i]]=max(g[lj[i]],g[x]+len[i]);\n\t\t\tif (--rd[lj[i]]==0) dl[++wei]=lj[i];\n\t\t}\n\t\tif (wei!=ds) puts(\"-1\"); else\n\t\t{\n\t\t\tans=0;\n\t\t\tfor (i=1;i<=na;i++) ans=max(ans,g[posa[i]]);\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n\t}\n}\n```\n",
        "postTime": 1555565241,
        "uid": 29826,
        "name": "SSerxhs",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5284 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898\u3011"
    },
    {
        "content": "#### \u8fd9\u662f\u4e00\u9053\u6db5\u76d6\u4e86**\u5b57\u7b26\u4e32**\u3001**\u56fe\u8bba**\u3001**\u6570\u636e\u7ed3\u6784**\u4e09\u4e2a\u65b9\u9762\u7684\u7efc\u5408\u5927\u9898\u3002\n\n#### ~~\u628a\u8fd9\u9053\u9898\u653e\u5728D1T2\u7684\u4eba\u5e94\u8be5\u62d6\u51fa\u53bb\u6253~~\n\n## \u524d\u7f6e\u829d\u58eb\n\n\u9996\u5148\uff0c\u60a8\u81f3\u5c11\u8981\u4f1a**topsort**\u3002\n\n\u5176\u6b21\uff0c\u5982\u679c\u60a8\u53ea\u60f3\u62ff\u4e2a\u66b4\u529b\u5206\uff0c\u5b57\u7b26\u4e32**Hash**\u5c31\u8db3\u591f\u4e86\uff1b\u5982\u679c\u60a8\u60f3\u62ff\u6ee1\u5206\uff0c**SA**\u548c**SAM**\u60a8\u81f3\u5c11\u8981\u4f1a\u4e00\u79cd\uff08\u672c\u6587\u91c7\u7528**SA**\uff09\u3002\n\n\u6700\u540e\uff0c\u6b63\u89e3\u8fd8\u9700\u8981\u60a8\u4e86\u89e3**\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u8fb9**\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u7528\u4e3b\u5e2d\u6811\u5b9e\u73b0\u3002\n\n## \u66b4\u529b\u7b97\u6cd5\u4e00\n\n\u5bf9\u4e8e\u6d4b\u8bd5\u70b91~4\uff0c\u66b4\u529b\u5efa\u56fe\uff0cHash\u4f18\u5316\uff0c\u53ef\u4ee5\u62ff\u523040\u5206\u7684\u9ad8\u5206\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define ull unsigned long long\nusing namespace std;\nconst int N = 2e5 + 6;\nchar s[N];\nint n, na, la[N], ra[N], nb, lb[N], rb[N], nm, ma[N], mb[N];\n\nnamespace Hash {\n\tconst int P = 13331;\n\tull h[N], p[N];\n\n\tinline void main() {\n\t\tp[0] = 1;\n\t\tfor (int i = 1; i <= n; i++) h[i] = h[i-1] * P + s[i], p[i] = p[i-1] * P;\n\t}\n\n\tinline ull get(int l, int r) {\n\t\treturn h[r] - h[l-1] * p[r-l+1];\n\t}\n}\n\nnamespace Graph {\n\tvector<int> e[N<<1];\n\tint a[N<<1], d[N<<1], f[N<<1];\n\tqueue<int> q;\n\n\tinline void init() {\n\t\tfor (int i = 1; i <= na + nb; i++) e[i].clear(), a[i] = d[i] = f[i] = 0;\n\t\tfor (int i = 1; i <= na; i++) a[i] = ra[i] - la[i] + 1;\n\t}\n\n\tinline void add(int x, int y) {\n\t\te[x].push_back(y), ++d[y];\n\t}\n\n\tinline void topsort() {\n\t\tfor (int i = 1; i <= na + nb; i++) if (!d[i]) q.push(i);\n\t\twhile (q.size()) {\n\t\t\tint x = q.front();\n\t\t\tq.pop();\n\t\t\tfor (unsigned int i = 0; i < e[x].size(); i++) {\n\t\t\t\tint y = e[x][i];\n\t\t\t\tf[y] = max(f[y], f[x] + a[x]);\n\t\t\t\tif (!--d[y]) q.push(y);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= na + nb; i++)\n\t\t\tif (d[i]) {\n\t\t\t\tputs(\"-1\");\n\t\t\t\treturn;\n\t\t\t}\n\t\tll ans = 0;\n\t\tfor (int i = 1; i <= na + nb; i++) ans = max(ans, (ll)f[i] + a[i]);\n\t\tcout << ans << endl;\n\t}\n\n\tinline void main() {\n\t\tHash::main();\n\t\tinit();\n\t\tfor (int i = 1; i <= nm; i++) add(ma[i], mb[i] + na);\n\t\tfor (int j = 1; j <= nb; j++) {\n\t\t\tull now = Hash::get(lb[j], rb[j]);\n\t\t\tint len = rb[j] - lb[j];\n\t\t\tfor (int i = 1; i <= na; i++)\n\t\t\t\tif (len < a[i] && Hash::get(la[i], la[i] + len) == now) add(j + na, i);\n\t\t}\n\t\ttopsort();\n\t}\n}\n\ninline void work() {\n\tscanf(\"%s\", s + 1);\n\tn = strlen(s + 1);\n\tscanf(\"%d\", &na);\n\tfor (int i = 1; i <= na; i++) scanf(\"%d %d\", &la[i], &ra[i]);\n\tscanf(\"%d\", &nb);\n\tfor (int i = 1; i <= nb; i++) scanf(\"%d %d\", &lb[i], &rb[i]);\n\tscanf(\"%d\", &nm);\n\tfor (int i = 1; i <= nm; i++) scanf(\"%d %d\", &ma[i], &mb[i]);\n\tGraph::main();\n}\n\nint main() {\n\tint T;\n\tcin >> T;\n\twhile (T--) work();\n\treturn 0;\n}\n```\n\n## \u66b4\u529b\u7b97\u6cd5\u4e8c\n\n\u5bf9\u4e8e\u6d4b\u8bd5\u70b91\u30014\u30015\u30016\uff0c\u6240\u6709A\u4e32\u7684\u524d\u7f00\u603b\u6570\u662f\u53ef\u63a5\u53d7\u7684\uff0c\u5168\u90e8\u679a\u4e3e\u51fa\u6765\uff0c\u66b4\u529b\u5efa\u56fe\uff0c\u53ef\u4ee5\u62ff\u523040\u5206\u7684\u9ad8\u5206\u3002\n\n## \u66b4\u529b\u7b97\u6cd5\u4e09\n\n\u7ed3\u5408\u66b4\u529b\u7b97\u6cd5\u4e00\u548c\u4e8c\uff0c\u9762\u5411\u6570\u636e\u5206\u6cbb\uff0c\u53ef\u4ee5\u62ff\u523060\u5206\u7684\u9ad8\u5206\u3002\n\n~~\uff08\u6ed1\u7a3d~~\n\n## \u9519\u8bef\u7b97\u6cd5\n\n\u6211\u4eec\u5bf9\u5b57\u7b26\u4e32\u8dd1\u4e00\u904d**SA**\uff0c\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u4e8b\u5b9e\u662f\uff0c\u6bcf\u4e2a $b$ \u4e32\u4e00\u5b9a\u4f1a\u8fde\u5411**SA**\u4e0a\u7684\u4e00\u4e2a\u533a\u95f4\u3002\n\n\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u5373\u53ef\u3002\n\n\u867d\u7136\u662f\u9519\u8bef\u7b97\u6cd5\uff0c\u4f46\u53ef\u4ee5\u62ff\u523080\u5206\u7684\u9ad8\u5206\u3002\n\n## \u6b63\u786e\u7b97\u6cd5\n\n\u9519\u8bef\u7b97\u6cd5\u4e2d\u6709\u8fd9\u6837\u4e00\u53e5\u8bdd\uff1a\n\n> \u6bcf\u4e2a $b$ \u4e32\u4e00\u5b9a\u4f1a\u8fde\u5411**SA**\u4e0a\u7684\u4e00\u4e2a\u533a\u95f4\u3002\n\n\u4f46\u662f\uff0c\u663e\u7136\uff0c\u5982\u679c $b$ \u4e32\u957f\u5ea6\u5927\u4e8e $a$ \u4e32\uff0c\u90a3\u4e48 $b$ \u4e32\u4e00\u5b9a\u4e0d\u4f1a\u662f $a$ \u4e32\u7684\u524d\u7f00\u3002\n\n\u56e0\u6b64\uff0c\u6bcf\u4e2a $b$ \u4e32\u4e00\u5b9a\u4f1a\u8fde\u5411**SA**\u4e0a\u7684\u4e00\u4e2a\u533a\u95f4\u4e2d\u7684\u82e5\u5e72\u4e2a\u70b9\u3002\n\n\u8003\u8651\u7528\u4e3b\u5e2d\u6811\u4ee3\u66ff\u7ebf\u6bb5\u6811\u3002\n\n\u6309\u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u5c06 $a$ \u4e32\u4f9d\u6b21\u63d2\u5165\u4e3b\u5e2d\u6811\u4e2d\u3002\n\n\u5728\u5927\u4e8e $b$ \u4e32\u957f\u5ea6\u7684\u4e3b\u5e2d\u6811\u5386\u53f2\u7248\u672c\u4e0a\u4f18\u5316\u5efa\u56fe\u3002\n\n**\u4e0b\u9762\u4ee3\u7801\u7684\u5b9e\u73b0\u7ec6\u8282\u53c2\u8003\u4e86\u5c0f\u7c89\u5154\u5728[https://www.cnblogs.com/PinkRabbit/p/SHOI2019D1T2.html](https://www.cnblogs.com/PinkRabbit/p/SHOI2019D1T2.html)\u4e2d\u7684\u601d\u8def\uff0c\u4f46\u5e76\u4e0d\u96f7\u540c**\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define mid ((l + r) >> 1)\nusing namespace std;\nconst int N = 2e5 + 6;\nchar s[N];\nint T, n, na, la[N], ra[N], nb, lb[N], rb[N], nm, ma[N], mb[N], tot;\nstruct Str {\n\tint l, len, id;\n\tinline Str() {}\n\tinline Str(int l, int len, int id) : l(l), len(len), id(id) {}\n\tinline bool operator < (const Str o) const {\n\t\treturn (len ^ o.len) ? len > o.len : id < o.id;\n\t}\n} str[N<<1];\n\nnamespace SA {\n\tint m = 26, sa[N], rk[N], tp[N], tx[N], he[N], st[N][20];\n\n\tinline void tsort() {\n\t\tfor (int i = 1; i <= m; i++) tx[i] = 0;\n\t\tfor (int i = 1; i <= n; i++) ++tx[rk[i]];\n\t\tfor (int i = 1; i <= m; i++) tx[i] += tx[i-1];\n\t\tfor (int i = n; i; i--) sa[tx[rk[tp[i]]]--] = tp[i];\n\t}\n\n\tinline bool pd(int i, int w) {\n\t\treturn tp[sa[i-1]] == tp[sa[i]] && tp[sa[i-1]+w] == tp[sa[i]+w];\n\t}\n\n\tinline void main() {\n\t\tfor (int i = 1; i <= n; i++) rk[i] = s[i] - 'a' + 1, tp[i] = i;\n\t\ttsort();\n\t\tfor (int w = 1, p = 0; p < n; w <<= 1, m = p) {\n\t\t\tp = 0;\n\t\t\tfor (int i = 1; i <= w; i++) tp[++p] = n - w + i;\n\t\t\tfor (int i = 1; i <= n; i++) if (sa[i] > w) tp[++p] = sa[i] - w;\n\t\t\ttsort(), swap(rk, tp), rk[sa[1]] = p = 1;\n\t\t\tfor (int i = 2; i <= n; i++) rk[sa[i]] = pd(i, w) ? p : ++p;\n\t\t}\n\t\tint p = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (p) --p;\n\t\t\tint j = sa[rk[i]-1];\n\t\t\twhile (s[i+p] == s[j+p]) ++p;\n\t\t\the[rk[i]] = p;\n\t\t}\n\t\tfor (int i = 1; i <= n; i++) st[i][0] = he[i];\n\t\tint w = log(n) / log(2);\n\t\tfor (int k = 1; k <= w; k++)\n\t\t\tfor (int i = 1; i + (1 << k) - 1 <= n; i++)\n\t\t\t\tst[i][k] = min(st[i][k-1], st[i+(1<<(k-1))][k-1]);\n\t}\n\n\tinline int get(int l, int r) {\n\t\tint k = log(r - l + 1) / log(2);\n\t\treturn min(st[l][k], st[r-(1<<k)+1][k]);\n\t}\n}\n\nnamespace Graph {\n\tvector<int> e[N<<5];\n\tll a[N<<5], d[N<<5], f[N<<5];\n\tqueue<int> q;\n\n\tinline void add(int x, int y) {\n\t\te[x].push_back(y), ++d[y];\n\t}\n\n\tinline void topsort() {\n\t\tfor (int i = 1; i <= tot; i++) if (!d[i]) q.push(i);\n\t\twhile (q.size()) {\n\t\t\tint x = q.front();\n\t\t\tq.pop();\n\t\t\tfor (unsigned int i = 0; i < e[x].size(); i++) {\n\t\t\t\tint y = e[x][i];\n\t\t\t\tf[y] = max(f[y], f[x] + a[x]);\n\t\t\t\tif (!--d[y]) q.push(y);\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= tot; i++)\n\t\t\tif (d[i]) {\n\t\t\t\tputs(\"-1\");\n\t\t\t\treturn;\n\t\t\t}\n\t\tll ans = 0;\n\t\tfor (int i = 1; i <= tot; i++) ans = max(ans, f[i] + a[i]);\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n}\n\nnamespace Seg {\n\tstruct T {\n\t\tint l, r;\n\t} t[N<<5];\n\tint rt[N];\n\n\tint ins(int o, int l, int r, int x, int k) {\n\t\tint p = ++tot;\n\t\tt[p] = t[o];\n\t\tif (o) Graph::add(p, o);\n\t\tif (l == r) Graph::add(p, k);\n\t\telse if (x <= mid) Graph::add(p, t[p].l = ins(t[o].l, l, mid, x, k));\n\t\telse Graph::add(p, t[p].r = ins(t[o].r, mid + 1, r, x, k));\n\t\treturn p;\n\t}\n\n\tvoid add(int p, int l, int r, int L, int R, int k) {\n\t\tif (!p || r < L || l > R) return;\n\t\tif (L <= l && r <= R) Graph::add(k, p);\n\t\telse add(t[p].l, l, mid, L, R, k), add(t[p].r, mid + 1, r, L, R, k);\n\t}\n}\n\ninline void work() {\n\tscanf(\"%s\", s + 1);\n\tn = strlen(s + 1);\n\tSA::main();\n\tscanf(\"%d\", &na);\n\tfor (int i = 1; i <= na; i++) scanf(\"%d %d\", &la[i], &ra[i]);\n\tscanf(\"%d\", &nb);\n\tfor (int i = 1; i <= nb; i++) scanf(\"%d %d\", &lb[i], &rb[i]);\n\tscanf(\"%d\", &nm);\n\tfor (int i = 1; i <= nm; i++) scanf(\"%d %d\", &ma[i], &mb[i]);\n\tfor (int i = 1; i <= na; i++) Graph::a[i] = ra[i] - la[i] + 1;\n\tfor (int i = 1; i <= na; i++) str[i] = Str(la[i], ra[i] - la[i] + 1, i);\n\tfor (int i = 1; i <= nb; i++) str[na+i] = Str(lb[i], rb[i] - lb[i] + 1, na + i);\n\tsort(str + 1, str + na + nb + 1);\n\ttot = na + nb;\n\tint now = 0;\n\tfor (int i = 1; i <= na + nb; i++)\n\t\tif (str[i].id <= na) ++now, Seg::rt[now] = Seg::ins(Seg::rt[now-1], 1, n, SA::rk[str[i].l], str[i].id);\n\t\telse {\n\t\t\tint k = SA::rk[str[i].l], l = 1, r = k, L, R;\n\t\t\twhile (l < r)\n\t\t\t\tif (SA::get(mid + 1, k) >= str[i].len) r = mid;\n\t\t\t\telse l = mid + 1;\n\t\t\tL = l, l = k + 1, r = n + 1;\n\t\t\twhile (l < r)\n\t\t\t\tif (SA::get(k + 1, mid) >= str[i].len) l = mid + 1;\n\t\t\t\telse r = mid;\n\t\t\tSeg::add(Seg::rt[now], 1, n, L, R = l - 1, str[i].id);\n\t\t}\n\tfor (int i = 1; i <= nm; i++) Graph::add(ma[i], mb[i] + na);\n\tGraph::topsort();\n\tfor (int i = 1; i <= tot; i++) Graph::e[i].clear(), Graph::a[i] = Graph::d[i] = Graph::f[i] = 0;\n}\n\nint main() {\n\tcin >> T;\n\twhile (T--) work();\n\treturn 0;\n}\n```",
        "postTime": 1555243623,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "P5284 [\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898"
    },
    {
        "content": "\u4e0b\u9762\u662f\u6211\u7684\u540e\u7f00\u6570\u7ec4\u89e3\u6cd5\u3002\n\n\u9996\u5148\u8003\u8651\u524d80\u5206\u7684\u505a\u6cd5\uff0c\u548c\u5176\u4ed6\u6240\u6709\u9898\u89e3\u4e00\u6837\uff0c\u662f\u8981\u628a\u201cT\u7684\u5206\u5272\u4e2d\uff0cy\u53ef\u4f5c\u4e3ax\u7684\u540e\u4e00\u4e2a\u4e32\u201d\u8fd9\u4e2a\u5173\u7cfb\u7528\u6709\u5411\u56fe\u8868\u793a\u51fa\u6765\uff0c\u7136\u540e\u53ea\u8981\u5224\u65ad\u662f\u4e0d\u662fDAG\u3002\u5982\u679c\u662f\u90a3\u4e48\u8dd1\u6700\u957f\u8def\uff0c\u5426\u5219-1\u3002\u8fd9\u91cc\u5224DAG\u5176\u5b9e\u53ef\u4ee5\u548c\u6c42\u62d3\u6251\u5e8f\u4e00\u8d77\u505a\uff0c\u5982\u679c\u8dd1\u5b8c\u62d3\u6251\u5e8f\u4e4b\u540e\u8fd8\u6709\u672a\u5230\u8fbe\u7684\u70b9\u7684\u8bdd\u5c31\u4e0d\u662fDAG\u3002\n\n\u7136\u540e\u8003\u8651\u5efa\u56fe\u65b9\u6cd5\u3002\u679a\u4e3e\u4e00\u4e2aA\u4e32\uff0c\u679a\u4e3e\u88abA\u4e32\u652f\u914d\u7684\u6240\u6709B\u4e32\uff0c\u7531\u4e8e\u524d80\u5206\u4e2d\u7684$\\forall{i,j},|A_i|\\ge|B_j|$\u9650\u5236\uff0c\"\u5b58\u5728\u4e00\u4e2a\u524d\u7f00\u662fB\u7684\u4e32\u7ec4\u6210\u7684\u96c6\u5408\"\u662f\u540e\u7f00\u6570\u7ec4\u4e0a\u7684\u4e00\u4e2a\u533a\u95f4\uff0c\u8d77\u59cb\u70b9\u5728\u533a\u95f4\u4e2d\u7684\u6240\u6709A\u4e32\u90fd\u662f\u5408\u6cd5\u7684\u3002\u53ea\u8981\u5bf9\u8fd9\u4e2a\u533a\u95f4\u4e2d\u6240\u6709\u7684A\u4e32\u8fde\u8fb9\u5373\u53ef\u3002\u627e\u533a\u95f4\u7684\u65f6\u5019\u53ef\u4ee5\u5728height\u6570\u7ec4\u4e0a\u5efaST\u8868\u500d\u589e\uff08\u6216\u4e8c\u5206\uff09\uff0c\u590d\u6742\u5ea6\u90fd\u662f\u4e00\u4e2alog\u7684\u3002\n\n\u7136\u540e\u662f\u5efa\u8fb9\uff0c\u66b4\u529b\u5efa\u8fb9\u7684\u8bdd\u8fb9\u6570\u662f$n^2$\u7ea7\u522b\u7684\u80af\u5b9a\u4e0d\u884c\u3002\u7136\u800c\u53ef\u4ee5\u5229\u7528ST\u8868\u5efa\u8fb9\uff0c\u6bd4\u5982\u533a\u95f4\u662f$[l,r]$\uff0c$k=\\lfloor\\log_2{(r-l+1)}\\rfloor$\uff0c\u5c31\u5411\u8868\u793a$[l,l+2^k),[r+1-2^k,r]$\u7684\u4e24\u4e2a\u70b9\u8fde\u8fb9\u5373\u53ef\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f97\u523080\u5206\u3002\n\n\u7136\u540e\u662f\u6ee1\u5206\u7b97\u6cd5\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u5f00\u59cb\u4f4d\u7f6e\u76f8\u540c\u7684\u4e00\u4e9bA\u4e32\u4e2d\uff0c\u53ea\u6709\u8f83\u957f\u7684\u4e00\u90e8\u5206\u4e32\u53ef\u4ee5\u8fde\u8fb9\u3002\u8fd9\u5c31\u662f\u4e8c\u7ef4\u504f\u5e8f\u4e86\uff0c\u6211\u5728\u8003\u573a\u4e0a\u4ee5\u4e3a\u8981\u6811\u5957\u6811\u6240\u4ee5\u4e0d\u53ef\u505a\u3002\u540e\u6765\u53d1\u73b0\u7528\u4e0d\u7740\uff0c\u53ef\u4ee5\u4ea4\u6362\u4e00\u4e0b\u4e24\u7ef4\uff0c\u4f7f\u5f97\u7b2c\u4e00\u7ef4\u662fA\u4e32\u957f\u5ea6\uff0c\u7b2c\u4e8c\u7ef4\u662fA\u4e32\u5f00\u59cb\u4f4d\u7f6e\u7684rank\u3002\u8fd9\u6837\u7b2c\u4e00\u7ef4\u5c31\u53d8\u6210\u4e86\u524d\u7f00\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u70b9\u6570\u548c\u8fb9\u6570\u7684\u89c4\u6a21\u90fd\u662f\u4e00\u4e2alog\u7684\u3002\n\n\u53ef\u60dc\u7531\u4e8e\u5e38\u6570\u8fdc\u5927\u4e8eSAM\uff0c\u6d1b\u8c37\u8fc7\u4e0d\u53bb\u3002loj\u4e0a\u53ef\u4ee5\u901a\u8fc7\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\nconst int maxn=200010;\nchar s[maxn];ll dis[maxn*25];\nint n,sa[maxn],nr[maxn*2],rnk[maxn*2],st[maxn][20],hd[maxn*25],p[maxn],ind[maxn*25];\nint T,tot,m,na,nb,w[maxn*25],l[maxn],r[maxn],que[maxn*25],rt[maxn],ps[maxn];\nstruct stt{int l,r,id;}a[maxn];vector<stt> u;\nbool operator<(stt a,stt b){return a.r-a.l>b.r-b.l;}\nvector<int> v[maxn];\nstruct edge{int v,nxt;}e[maxn*100];\nvoid adde(int a,int b){e[++m]={b,hd[a]};hd[a]=m;ind[b]++;}\nint qry1(int p,int vl){\n\tfor(int k=19;~k;k--)if(p>=1<<k&&st[p-(1<<k)+1][k]>=vl)p-=1<<k;\n\treturn p;\n}\nint qry2(int p,int vl){\n\tfor(int k=19;~k;k--)if(p+(1<<k)<=n+1&&st[p][k]>=vl)p+=1<<k;\n\treturn p-1;\n}\nstruct segTree{\n\tint L[maxn*25],R[maxn*25];\n\tvoid ins(int id,int p,int tl=1,int tr=n){\n\t\tif(tl==tr){adde(++tot,p);u.push_back({tot,id});return;}\n\t\tint mid=tl+tr>>1;\n\t\tif(rnk[a[id].l]<=mid)ins(id,L[p],tl,mid),R[++tot]=R[p],L[tot]=tot-1;\n\t\telse ins(id,R[p],mid+1,tr),L[++tot]=L[p],R[tot]=tot-1;\n\t\tadde(tot,p),adde(tot,tot-1);\n\t}\n\tvoid add(int l,int r,int x,int p,int tl=1,int tr=n){\n\t\tif(l<=tl&&tr<=r){adde(x,p);return;}\n\t\tint mid=tl+tr>>1;\n\t\tif(l<=mid)add(l,r,x,L[p],tl,mid);\n\t\tif(r>mid)add(l,r,x,R[p],mid+1,tr);\n\t}\n}tr;\nint main(){\n\tscanf(\"%d\",&T);\n\twhile(T--){\n\t\tscanf(\"%s\",s+1);n=strlen(s+1);\n\t\tmemset(nr,0,sizeof nr),memset(rnk,0,sizeof rnk);\n\t\tfor(int i=1;i<=n;i++)rnk[i]=s[i],sa[i]=i;\n\t\tfor(int i=1;i<=n;i<<=1){\n\t\t\tsort(sa+1,sa+1+n,[&](int a,int b){\n\t\t\t\treturn rnk[a]<rnk[b]||rnk[a]==rnk[b]&&rnk[a+i]<rnk[b+i];\n\t\t\t});\n\t\t\tfor(int j=1,t=0;j<=n;nr[sa[j++]]=t)\n\t\t\t\tt+=rnk[sa[j]]!=rnk[sa[j-1]]||rnk[sa[j]+i]!=rnk[sa[j-1]+i];\n\t\t\tmemcpy(rnk,nr,sizeof nr);\n\t\t}\n\t\tfor(int i=1,k=0;i<=n;i++){\n\t\t\tif(k)k--;\n\t\t\tfor(;s[i+k]==s[sa[rnk[i]-1]+k];k++);\n\t\t\t*st[rnk[i]]=k;\n\t\t}\n\t\tmemset(hd,0,sizeof hd);\n\t\tmemset(w,0,sizeof w);\n\t\tmemset(ind,0,sizeof ind);\n\t\ttot=m=0;u.clear();\n\t\tmemset(&tr,0,sizeof tr);\n\t\tfor(int i=1;(1<<i)<=n;i++)\n\t\t\tfor(int j=0;j+(1<<i)<=n+1;j++)\n\t\t\t\tst[j][i]=min(st[j][i-1],st[j+(1<<i-1)][i-1]);\n\t\tscanf(\"%d\",&na);\n\t\tfor(int i=1;i<=n;i++)v[i].clear();\n\t\tfor(int i=1;i<=na;i++)\n\t\t\tscanf(\"%d%d\",&a[i].l,&a[i].r),a[i].id=i;\n\t\tsort(a+1,a+1+na);\n\t\tfor(int i=1;i<=na;i++)\n\t\t\tps[a[i].id]=i,tr.ins(i,rt[i-1]),rt[i]=tot;\n\t\tfor(int i=1;i<=na;i++)w[p[i]=++tot]=a[i].r-a[i].l+1;\n\t\tfor(stt&s:u)adde(s.l,p[s.r]);\n\t\tscanf(\"%d\",&nb);\n\t\tfor(int i=1;i<=nb;i++)scanf(\"%d%d\",l+i,r+i);\n\t\tint x;scanf(\"%d\",&x);\n\t\tfor(int i=1;i<=x;i++){\n\t\t\tint x,y;scanf(\"%d%d\",&x,&y);\n\t\t\tv[ps[x]].push_back(y);\n\t\t}\n\t\tfor(int i=1;i<=na;i++)for(int j:v[i]){\n\t\t\tint x=qry1(rnk[l[j]],r[j]-l[j]+1),y=qry2(rnk[l[j]]+1,r[j]-l[j]+1);\n\t\t\ttr.add(x,y,p[i],rt[upper_bound(a+1,a+1+na,stt{l[j],r[j]})-a-1]);\n\t\t}\n\t\tmemset(dis,0,sizeof dis);\n\t\tint l=1,r=0;\n\t\tfor(int i=1;i<=tot;i++)if(!ind[i])que[++r]=i,dis[i]=w[i];\n\t\twhile(l<=r){\n\t\t\tint p=que[l++];\n\t\t\tfor(int x=hd[p];x;x=e[x].nxt){\n\t\t\t\tdis[e[x].v]=max(dis[e[x].v],dis[p]+w[e[x].v]);\n\t\t\t\tif(!--ind[e[x].v])que[++r]=e[x].v;\n\t\t\t}\n\t\t}\n\t\tif(r!=tot+1)puts(\"-1\");else printf(\"%lld\\n\",*max_element(dis+1,dis+1+tot));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1554700854,
        "uid": 30093,
        "name": "cosmicAC",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5284 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898\u3011"
    },
    {
        "content": "[\u5728\u535a\u5ba2\u67e5\u770b](https://www.cnblogs.com/chenxiaoran666/p/Luogu5284.html )\n\n**\u5927\u81f4\u9898\u610f\uff1a** \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ece\u4e2d\u5212\u51fa$n_a$\u4e2a\u5b50\u4e32\u4f5c\u4e3a$A$\u7c7b\u4e32\uff0c$n_b$\u4e2a\u5b50\u4e32\u4f5c\u4e3a$B$\u7c7b\u4e32\u3002\u5df2\u77e5$m$\u7ec4\u652f\u914d\u5173\u7cfb\uff0c\u8ba9\u4f60\u6c42\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f7f\u5f97\u5b83\u7531\u82e5\u5e72$A$\u7c7b\u4e32\u4f9d\u6b21\u76f8\u63a5\u7ec4\u6210\uff0c\u4e14\u6bcf\u4e2a$A$\u7c7b\u4e32\u5b58\u5728\u4e00\u4e2a\u88ab\u5176\u652f\u914d\u7684$B$\u7c7b\u4e32\u662f\u5b83\u7684\u540e\u4e00\u4e2a\u4e32\u7684\u524d\u7f00\u3002\u8f93\u51fa\u6700\u957f\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u65e0\u9650\u957f\u8f93\u51fa$-1$\u3002\n\n### \u6838\u5fc3\u601d\u8def\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u60f3\u4e00\u4e0b\u8fd9\u9898\u7684\u6838\u5fc3\u601d\u8def\u5e94\u8be5\u662f\u4ec0\u4e48\u3002\n\n\u663e\u7136\uff0c\u4e0d\u96be\u60f3\u5230\u53ef\u4ee5\u628a\u5b83\u770b\u6210\u4e00\u5f20$DAG$\uff0c\u5219\u6bcf\u4e2a$A$\u7c7b\u4e32\u5411\u5176\u652f\u914d\u7684$B$\u7c7b\u4e32\u8fde\u8fb9\uff0c\u6bcf\u4e2a$B$\u7c7b\u4e32\u5411\u4ee5\u5176\u4e3a\u524d\u7f00\u7684$A$\u7c7b\u4e32\u8fde\u8fb9\u3002\u6bcf\u4e2a$A$\u7c7b\u4e32\u6743\u503c\u4e3a\u81ea\u8eab\u957f\u5ea6\uff0c\u6bcf\u4e2a$B$\u7c7b\u4e32\u6743\u503c\u4e3a$0$\uff0c\u6700\u540e\u62d3\u6251\u6392\u5e8f\u6c42\u4e00\u904d\u6743\u503c\u548c\u6700\u5927\u7684\u8def\u5f84\u7684\u6743\u503c\u548c\u5373\u4e3a\u7b54\u6848\u3002\n\n\u4f46\u8fd9\u6837\u5177\u4f53\u5b9e\u73b0\u8d77\u6765\u6709\u4e9b\u56f0\u96be\u3002\n\n\u4ed4\u7ec6\u89c2\u5bdf\u4e0a\u8ff0\u5185\u5bb9\uff0c\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u5171\u8981\u8fde\u4e24\u79cd\u8fb9\uff1a\n\n- \u6bcf\u4e2a$A$\u7c7b\u4e32\u5411\u5176\u652f\u914d\u7684$B$\u7c7b\u4e32\u8fde\u8fb9\u3002\n- \u6bcf\u4e2a$B$\u7c7b\u4e32\u5411\u4ee5\u5176\u4e3a\u524d\u7f00\u7684$A$\u7c7b\u4e32\u8fde\u8fb9\u3002\n\n\u5176\u4e2d\u7b2c\u4e00\u79cd\u8fb9\u8fb9\u6570\u5df2\u77e5\u4e3a$m$\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fde\u3002\n\n\u4f46\u7b2c\u4e8c\u79cd\u8fb9\u8be5\u5982\u4f55\u5904\u7406\uff0c\u5c31\u662f\u6211\u4eec\u4e3b\u8981\u8ba8\u8bba\u7684\u95ee\u9898\u3002\n\n### \u5229\u7528\u540e\u7f00\u6570\u7ec4\u8fdb\u884c\u8f6c\u5316\n\n\u9996\u5148\uff0c\u6211\u4eec\u5bf9\u7ed9\u51fa\u7684\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5efa\u4e00\u4e2a[\u540e\u7f00\u6570\u7ec4](https://www.cnblogs.com/chenxiaoran666/p/SuffixArray.html)\u3002\n\n\u8003\u8651\u5982\u679c\u4e00\u4e2a$B$\u7c7b\u4e32\u662f\u4e00\u4e2a$A$\u7c7b\u4e32\u7684\u524d\u7f00\uff0c\u5219\u8fd9\u4e24\u4e2a\u4e32\u7684$LCP$\u5fc5\u7136\u4f1a\u7b49\u4e8e$len_B$\u3002\n\n\u800c\u79fb\u5230\u540e\u7f00\u6570\u7ec4\u4e0a\uff0c\u5c31\u7b49\u4ef7\u4e8e\u540e\u7f00$_{l_B}$\u4e0e\u540e\u7f00$_{l_A}$\u7684$LCP\\ge len_B$\u3002\n\n\u53c8\u56e0\u4e3a\u5173\u4e8e$LCP$\u7684\u4e00\u4e2a\u5b9a\u7406\uff1a$LCP(i,j)=min_{k=i+1}^jLCP(k,k-1)$\uff0c\u6240\u4ee5\u540e\u7f00$_{l_B}$\u5728\u540e\u7f00\u6392\u5e8f\u540e\u4e0e\u5176\u4ed6\u540e\u7f00\u7684$LCP$\u662f**\u5411\u5de6\u53f3\u4e24\u4fa7\u9012\u51cf**\u7684\u3002\n\n\u800c\u540e\u7f00$_{l_B}$\u5728\u540e\u7f00\u6392\u5e8f\u540e\u7684\u4f4d\u7f6e\u662f$rk_{l_B}$\uff0c\u56e0\u6b64\u6211\u4eec\u8003\u8651\u5728$1\\sim rk_{l_B}$\u548c$rk_{l_B}\\sim n$\u4e24\u4e2a\u8303\u56f4\u5185\u5404\u4e8c\u5206\u6c42\u51fa\u79bb$l_B$\u6700\u8fdc\u4e14\u6ee1\u8db3\u4e0e\u540e\u7f00$_{l_B}$\u7684$LCP\\ge len_B$\u7684\u4f4d\u7f6e$L,R$\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u8981\u4ece\u8fd9\u4e2a$B$\u7c7b\u4e32\u5411$[L,R]$\u533a\u95f4\u5185\u6240\u6709\u70b9\u8fde\u8fb9\u3002\n\n\u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u53ef\u4ee5\u76f4\u63a5**\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe**\u3002\n\n\u4f46\u662f\uff0c\u6211\u4eec\u8981\u8003\u8651\uff0c\u5f53$A$\u7c7b\u4e32\u4e0e$B$\u7c7b\u4e32\u7684\u957f\u5ea6\u6ee1\u8db3$|A|<|B|$\u65f6\uff0c\u8fd9\u4e2a$B$\u7c7b\u4e32\u662f\u4e0d\u80fd\u7b97\u4f5c\u8fd9\u4e2a$A$\u7c7b\u4e32\u7684\u524d\u7f00\u7684\uff01\n\n\u95ee\u9898\u4e00\u4e0b\u68d8\u624b\u4e86\u8bb8\u591a\u3002\n\n\u56e0\u6b64\uff0c\u5c31\u9700\u8981**\u4e3b\u5e2d\u6811\u4f18\u5316\u5efa\u56fe**\u4e86\u3002\n\n### \u4e3b\u5e2d\u6811\u4f18\u5316\u5efa\u56fe\n\n\u5173\u4e8e\u4e3b\u5e2d\u6811\uff0c\u53ef\u4ee5\u770b\u8fd9\u7bc7\u535a\u5ba2\uff1a[\u53ef\u6301\u4e45\u5316\u4e13\u9898\uff08\u4e00\uff09\u2014\u2014\u6d45\u8c08\u4e3b\u5e2d\u6811\uff1a\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811](https://www.cnblogs.com/chenxiaoran666/p/ChairmanTree.html)\u3002\n\n\u6211\u4eec\u8003\u8651\uff0c\u4ee5**\u5b57\u7b26\u4e32\u7684\u957f\u5ea6**\u4e3a\u7248\u672c\u5efa\u4e3b\u5e2d\u6811\u3002\n\n\u5bf9\u4e8e$A$\u7c7b\u4e32\uff0c\u4ece\u5b83\u5728\u7248\u672c$len_A$\u7684\u6811\u4e2d\u5176$rk$\u503c\u5bf9\u5e94\u7684\u8282\u70b9\u5411\u5176\u8fde\u4e00\u6761\u8fb9\u3002\n\n\u5bf9\u4e8e$B$\u7c7b\u4e32\uff0c\u4ece\u5b83\u5411\u7248\u672c$len_B$\u7684\u6811\u4e2d$[L,R]$\u5185\u7684\u8282\u70b9\u8fde\u8fb9\uff08\u6ce8\u610f\u8fd9\u91cc\u53ef\u4ee5\u91c7\u53d6\u7c7b\u4f3c\u61d2\u60f0\u6807\u8bb0\u7684\u5f62\u5f0f\u5411\u533a\u95f4\u8fde\u8fb9\uff0c\u4f7f\u5f97\u8fb9\u6570\u88ab\u63a7\u5236\u5728$2*logN$\uff09\u3002\n\n\u4e3b\u5e2d\u6811\u4e0e\u4e3b\u5e2d\u6811\u4e4b\u95f4\uff0c\u6211\u4eec\u6309$len$\u4ece\u5927\u5230\u5c0f\u5efa\u6811\uff0c\u7136\u540e\u540c\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u8282\u70b9\u6bcf\u6b21\u4ece$len$\u5c0f\u7684\u5411$len$\u5927\u7684\u8fde\u8fb9\uff08\u56e0\u4e3a\u6211\u4eec\u8981$|A|\\ge|B|$\uff0c\u6240\u4ee5\u53ea\u80fd\u5411$|A|$\u66f4\u5927\u7684\u8d70\uff09\u3002\n\n\u540c\u4e00\u68f5\u4e3b\u5e2d\u6811\u4e0a\uff0c\u6211\u4eec\u4ece\u7236\u8282\u70b9\u5411\u5b50\u8282\u70b9\u8fde\u8fb9\u3002\n\n\u518d\u52a0\u4e0a\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u6bcf\u4e2a$A$\u7c7b\u4e32\u5411\u5176\u652f\u914d\u7684$B$\u7c7b\u4e32\u8fde\u8fb9\uff0c\u5efa\u56fe\u5c31\u5b8c\u6210\u4e86\u3002\n\n### \u590d\u6742\u5ea6\u5206\u6790\n\n\u6700\u540e\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u590d\u6742\u5ea6\uff0c\u7531\u4e8e$|S|,na,nb,m$\u5168\u90e8\u540c\u9636\uff0c\u6211\u4eec\u7528$N$\u6765\u66ff\u4ee3\u5b83\u4eec\u3002\n\n- \u70b9\u6570\uff1a$A$\u7c7b\u4e32\u4e2a\u6570$N+B$\u7c7b\u4e32\u4e2a\u6570$N+$\u4e3b\u5e2d\u6811\u4e0a\u70b9\u7684\u4e2a\u6570$NlogN=2N+NlogN$\u3002\n- \u8fb9\u6570\uff1a$A$\u7c7b\u4e32\u5411$B$\u7c7b\u4e32$N+$\u4e3b\u5e2d\u6811\u5411$A$\u7c7b\u4e32$N+B$\u7c7b\u4e32\u5411\u4e3b\u5e2d\u6811$2NlogN+$\u4e3b\u5e2d\u6811\u95f4$NlogN+$\u4e3b\u5e2d\u6811\u4e0a$NlogN=2N+4NlogN$\u3002\n- \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(TNlogN)$\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u8be6\u89c1\u4ee3\u7801\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define Tp template<typename Ty>\n#define Ts template<typename Ty,typename... Ar>\n#define Reg register\n#define RI Reg int\n#define Con const\n#define CI Con int&\n#define I inline\n#define W while\n#define N 200000\n#define Log 20\n#define LL long long\n#define min(x,y) ((x)<(y)?(x):(y))\n#define Gmax(x,y) (x<(y)&&(x=(y)))\n#define add(x,y) (e[++ee].nxt=lnk[x],++deg[e[lnk[x]=ee].to=y])\n#define Pt (N*2+N*Log)\n#define Et (N*2+N*Log*4)\n#define mem(x,v) memset(x,v,sizeof(x))\nusing namespace std;\nint na,nb,m,ee,tot,la[N+5],ra[N+5],lb[N+5],rb[N+5],lnk[Pt+5],deg[Pt+5],q[Pt+5],v[Pt+5];\nLL f[Pt+5];struct edge {int to,nxt;}e[Et+5];string s;\nstruct Pr\n{\n\tint len,id;I Pr(CI x=0,CI y=0):len(x),id(y){}\n\tI bool operator < (Con Pr& o) Con {return len>o.len;}\n}p[N+5];\nclass FastIO\n{\n\tprivate:\n\t\t#define FS 100000\n\t\t#define tc() (A==B&&(B=(A=FI)+fread(FI,1,FS,stdin),A==B)?EOF:*A++)\n\t\t#define pc(c) (C^FS?FO[C++]=c:(fwrite(FO,1,C,stdout),FO[(C=0)++]=c))\n\t\t#define tn (x<<3)+(x<<1)\n\t\t#define D isdigit(c=tc())\n\t\tint T,C;char c,*A,*B,FI[FS],FO[FS],S[FS];\n\tpublic:\n\t\tI FastIO() {A=B=FI;}\n\t\tTp I void read(Ty& x) {x=0;W(!D);W(x=tn+(c&15),D);}\n\t\tTp I void write(Ty x) {x<0&&(pc('-'),x=-x);W(S[++T]=x%10+48,x/=10);W(T) pc(S[T--]);}\n\t\tTs I void read(Ty& x,Ar&... y) {read(x),read(y...);}\n\t\tTp I void writeln(Con Ty& x) {write(x),pc('\\n');}\n\t\tI void reads(string& x) {x=\"\";W(isspace(c=tc()));W(x+=c,!isspace(c=tc())&&~c);}\n\t\tI void clear() {fwrite(FO,1,C,stdout),C=0;} \n}F;\nclass ChairmanTree//\u4e3b\u5e2d\u6811\u4f18\u5316\u5efa\u56fe\n{\n\tprivate:\n\t\t#define L l,mid,O[rt].S[0]\n\t\t#define R mid+1,r,O[rt].S[1]\n\t\tint n,v,Rt_[N+5],Rt[N+5];struct node {int S[2];}O[Pt+5];\n\t\tI int ins(CI l,CI r,int& rt,CI lst,CI x)//\u63d2\u5165\u65b0\u8282\u70b9\n\t\t{\n\t\t\tif(O[rt=++tot]=O[lst],lst&&add(rt,lst),!(l^r)) return rt;RI mid=l+r>>1;//\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\u8fde\u8fb9\uff1b\u8fd4\u56de\u53f6\u8282\u70b9\u7f16\u53f7\n\t\t\tRI g=x<=mid?ins(L,O[lst].S[0],x):ins(R,O[lst].S[1],x);//\u5904\u7406\u5b50\u8282\u70b9\n\t\t\treturn O[rt].S[0]&&add(rt,O[rt].S[0]),O[rt].S[1]&&add(rt,O[rt].S[1]),g;//\u5411\u5b50\u8282\u70b9\u5efa\u8fb9\n\t\t}\n\t\tI void adde(CI l,CI r,CI rt,CI p,CI tl,CI tr)//\u5efa\u8fb9\n\t\t{\n\t\t\tif(!rt) return;if(tl<=l&&r<=tr) return (void)add(p,rt);RI mid=l+r>>1;//\u7a7a\u8282\u70b9\u76f4\u63a5\u8fd4\u56de\uff1b\u5efa\u8fb9\u7c7b\u4f3c\u4e8e\u61d2\u60f0\u6807\u8bb0\uff0c\u5411\u8fd9\u4e00\u533a\u95f4\u5efa\u8fb9\n\t\t\ttl<=mid&&(adde(L,p,tl,tr),0),tr>mid&&(adde(R,p,tl,tr),0);//\u5904\u7406\u5b50\u8282\u70b9\n\t\t}\n\tpublic:\n\t\tI void Init(CI x) {n=x;}I void CopyRoot(CI x,CI y) {Rt[x]=Rt[y];}\n\t\tI void Clear() {v=0,mem(Rt_,0),mem(Rt,0);for(RI i=1;i<=tot;++i) O[i].S[0]=O[i].S[1]=0;}//\u6e05\u7a7a\uff08\u6ce8\u610f\u6e05\u7a7a\u7248\u672c\u6570\uff01\uff09\n\t\tI int Insert(CI t,CI x) {RI g;return ++v,g=ins(1,n,Rt_[v],Rt_[v-1],x),Rt[t]=Rt_[v],g;}\n\t\tI void AddEdge(CI t,CI p,CI l,CI r) {adde(1,n,Rt[t],p,l,r);}\n\t\t#undef R\n}C;\nclass SuffixArray//\u540e\u7f00\u6570\u7ec4\n{\n\tprivate:\n\t\t#define LCP(x,y) (x<y?R.GetMn(x+1,y):R.GetMn(y,x+1))//LCP\uff0c\u6ce8\u610f\u6bd4\u8f83\u5de6\u53f3\u8fb9\u754c\u5927\u5c0f\n\t\tint n,SA[N+5],H[N+5],p[N+5],t[N+5];\n\t\tclass RMQ//\u533a\u95f4\u6700\u503c\u7528\u4e8e\u6c42LCP\n\t\t{\n\t\t\tprivate:\n\t\t\t\tint Lg[N+5],Mn[N+5][Log+5];\n\t\t\tpublic:\n\t\t\t\tI void Init(CI x,int *v)\n\t\t\t\t{\n\t\t\t\t\tRI i,j;for(Lg[0]=-1,i=1;i<=x;++i) Mn[i][0]=v[i],Lg[i]=Lg[i>>1]+1;\n\t\t\t\t\tfor(j=1;(1<<j)<=x;++j) for(i=1;i+(1<<j)-1<=x;++i)\n\t\t\t\t\t\tMn[i][j]=min(Mn[i][j-1],Mn[i+(1<<j-1)][j-1]);\n\t\t\t\t}\n\t\t\t\tI int GetMn(CI l,CI r) {RI k=Lg[r-l+1];return min(Mn[l][k],Mn[r-(1<<k)+1][k]);}\n\t\t}R;\n\t\tI void Rsort(CI S)//\u57fa\u6570\u6392\u5e8f\n\t\t{\n\t\t\tRI i;for(i=0;i<=S;++i) t[i]=0;for(i=1;i<=n;++i) ++t[rk[i]];\n\t\t\tfor(i=1;i<=S;++i) t[i]+=t[i-1];for(i=n;i;--i) SA[t[rk[p[i]]]--]=p[i];\n\t\t}\n\t\tI void GetSA(Con string& s)//\u6c42SA\u6570\u7ec4\n\t\t{\n\t\t\tRI i,k,S=122,t=0;for(i=1;i<=n;++i) rk[p[i]=i]=s[i-1];\n\t\t\tfor(Rsort(S),k=1;t^n;k<<=1)\n\t\t\t{\n\t\t\t\tfor(S=t,t=0,i=1;i<=k;++i) p[++t]=n-k+i;\n\t\t\t\tfor(i=1;i<=n;++i) SA[i]>k&&(p[++t]=SA[i]-k);\n\t\t\t\tfor(Rsort(S),i=1;i<=n;++i) p[i]=rk[i];\n\t\t\t\tfor(rk[SA[1]]=t=1,i=2;i<=n;++i) rk[SA[i]]=\n\t\t\t\t\t(p[SA[i-1]]^p[SA[i]]||p[SA[i-1]+k]^p[SA[i]+k])?++t:t;\n\t\t\t}\n\t\t}\n\t\tI void GetH(Con string& s)//\u6c42Height\u6570\u7ec4\u7528\u4e8eLCP\n\t\t{\n\t\t\tRI i,j,k=0;for(i=1;i<=n;++i) rk[SA[i]]=i;\n\t\t\tfor(i=1;i<=n;++i)\n\t\t\t{\n\t\t\t\tif(k&&--k,rk[i]==1) continue;j=SA[rk[i]-1];\n\t\t\t\tW(i+k<=n&&j+k<=n&&!(s[i+k-1]^s[j+k-1])) ++k;H[rk[i]]=k;\n\t\t\t}\n\t\t}\n\tpublic:\n\t\tint rk[N+5];\n\t\tI void Init(CI x,Con string& s) {n=x,GetSA(s),GetH(s),R.Init(n,H);}\n\t\tI void Work(CI x)//\u5904\u7406\u7b2cx\u4e2aB\u7c7b\u4e32\n\t\t{\n\t\t\tRI i,t=rk[lb[x]],l1,r1,l2,r2,mid,len=rb[x]-lb[x]+1;\n\t\t\tl1=1,r1=t;W(l1<r1) mid=l1+r1-1>>1,LCP(mid,t)>=len?r1=mid:l1=mid+1;//\u4e8c\u52061~t\n\t\t\tl2=t,r2=n;W(l2<r2) mid=l2+r2+1>>1,LCP(t,mid)>=len?l2=mid:r2=mid-1;//\u4e8c\u5206t~n\n\t\t\tC.AddEdge(len,na+x,r1,l2);//\u5411\u533a\u95f4\u8fde\u8fb9\n\t\t}\n}S;\nI LL Topo()//\u62d3\u6251\u6392\u5e8f+DP\u6c42\u7b54\u6848\n{\n\tRI i,k,H=1,T=0;Reg LL ans=0;for(i=1;i<=na;++i) f[i]=v[i]=ra[i]-la[i]+1;//\u521d\u59cb\u5316\u6743\u503c\n\tfor(i=1;i<=tot;++i) !deg[i]&&(q[++T]=i);//\u521d\u59cb\u5316\u961f\u5217\n\tW(H<=T) for(i=lnk[k=q[H++]],Gmax(ans,f[k]);i;i=e[i].nxt)//\u53d6\u51fa\u961f\u9996\uff0c\u7edf\u8ba1\u7b54\u6848\uff0c\u679a\u4e3e\u8f6c\u79fb\n\t\tGmax(f[e[i].to],f[k]+v[e[i].to]),!--deg[e[i].to]&&(q[++T]=e[i].to);//\u8f6c\u79fb\uff0c\u5224\u65ad\u662f\u5426\u52a0\u5165\u961f\u5217\n\treturn T^tot?-1:ans;//\u5982\u679c\u961f\u5217\u4e2d\u70b9\u6570\u4e0e\u603b\u70b9\u6570\u4e0d\u7b26\uff0c\u8fd4\u56de-1\uff0c\u5426\u5219\u8fd4\u56deans\n}\nint main()\n{\n\tRI Ttot,i,t,x,y,l;F.read(Ttot);W(Ttot--)\n\t{\n\t\tee=0,mem(lnk,0),mem(deg,0),mem(f,0),mem(v,0),C.Clear(),//\u6ce8\u610f\u6e05\u7a7a\n\t\tF.reads(s),C.Init(l=s.length()),S.Init(l,s);//\u521d\u59cb\u5316\n\t\tfor(F.read(na),i=1;i<=na;++i) F.read(la[i],ra[i]),p[i]=Pr(ra[i]-la[i]+1,i);//\u8bfb\u5165\uff0c\u5c06\u6bcf\u4e2aA\u7c7b\u4e32\u6309\u957f\u5ea6\u548c\u7f16\u53f7\u5b58\u4e0b\u6765\n\t\tfor(F.read(nb),tot=na+nb,sort(p+1,p+na+1),t=1,i=l;i;--i)//\u6392\u5e8f\uff0c\u679a\u4e3e\u7248\u672c\n\t\t{\n\t\t\tC.CopyRoot(i,i+1);W(t<=na&&p[t].len==i)//\u5efa\u8be5\u7248\u672c\u7684\u6811\n\t\t\t\tx=C.Insert(p[t].len,S.rk[la[p[t].id]]),add(x,p[t].id),++t;//\u5efa\u5b8c\u540e\u8bb0\u5f97\u8fde\u8fb9\n\t\t}\n\t\tfor(i=1;i<=nb;++i) F.read(lb[i],rb[i]),S.Work(i);//\u5904\u7406B\u7c7b\u4e32\n\t\tfor(F.read(m),i=1;i<=m;++i) F.read(x,y),add(x,na+y);F.writeln(Topo());//\u6839\u636e\u652f\u914d\u5173\u7cfb\u8fde\u8fb9\uff0c\u7136\u540e\u8f93\u51fa\u7b54\u6848\n\t}return F.clear(),0;\n}\n```",
        "postTime": 1555392319,
        "uid": 28382,
        "name": "TheLostWeak",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5284 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898\u3011"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problemnew/show/P5284)\n\n\u5176\u5b9e\u662f\u4e00\u9053\u719f\u7ec3\u7684\u5957\u8def\u9898\u554a\n\n\u9996\u5148$SA$\u505a\u8fd9\u9053\u9898\u662f\u80af\u5b9a\u53ef\u4ee5\u7684\uff0c\u6211\u4eec\u4e8c\u5206+$St$\u8868\u5c31\u53ef\u4ee5\u6c42\u51fa\u6bcf\u4e00\u4e2a$B$\u4e32\u7684\u6269\u5c55\u533a\u95f4(\u5c31\u662f\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u540e\u7f00\u548c\u8fd9\u4e2a\u4e32\u7684$lcp$\u90fd\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u4e32\u7684\u957f\u5ea6)\uff0c\u4e4b\u540e\u76f4\u63a5\u4e3b\u5e2d\u6811\u4f18\u5316\u5efa\u56fe\u5c31\u597d\u4e86\n\n\u4e4b\u540e\u5c31\u4f1a\u6536\u83b7$TLE$\u7684\u597d\u6210\u7ee9\n\n\u663e\u7136\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u90a3\u4e48\u9ebb\u70e6\uff0c\u6211\u4eec\u53d1\u73b0$SAM$\u7684$parent$\u662f\u4e00\u4e2a\u5929\u7136\u7684\u6811\u5f62\u7ed3\u6784\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u6765\u5e2e\u52a9\u6211\u4eec\u4f18\u5316\u5efa\u56fe\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728$SAM$\u4e0a\u5229\u7528\u6811\u4e0a\u500d\u589e\u76f4\u63a5\u5b9a\u4f4d\u597d\u5b50\u4e32\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$A$\u4e32\uff0c\u5411\u5bf9\u5e94\u7684$B$\u4e32\u8fde\u8fb9\u5c31\u597d\u4e86\uff0c\u8fb9\u6743\u5c31\u662f$A$\u4e32\u7684\u957f\u5ea6\n\n\u4e4b\u540e\u4e00\u6ce2\u7801\u7801\u7801\u5c31\u4f1a\u53d1\u73b0\u8fc7\u4e0d\u4e86\u7b2c\u4e09\u4e2a\u6837\u4f8b\uff0c\u8c03\u4e00\u8c03\u53d1\u73b0\u6709\u4e00\u4e9b\u5b50\u4e32\u5b9a\u4f4d\u5728\u4e00\u8d77\u4e86\n\n\u4e8e\u662f\u8003\u8651\u6211\u4eec\u820d\u5f03\u540e\u7f00\u81ea\u52a8\u673a\u7684\u6700\u5c0f\u6027\uff0c\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u88ab\u5b9a\u4f4d\u4e86\u591a\u6b21\u7684\u4f4d\u7f6e\u62c6\u51fa\u591a\u4e2a\u70b9\u6765\uff0c\u6bd5\u7adf$SAM$\u4e0a\u4e00\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u672c\u6765\u4e5f\u5c31\u4e0d\u662f\u4e00\u4e2a\u5b50\u4e32\n\n\u4e4b\u540e\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u5efa\u56fe\u8dd1\u4e00\u6ce2\u62d3\u6251\u6392\u5e8f\u5c31\u591f\u4e86\n\n\u4ee3\u7801\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#include<set>\n#define re register\n#define mp std::make_pair\n#define LL long long\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\nconst int maxn=4e5+16;\ntypedef std::pair<int,int> pii;\nstd::set<pii> s;\ninline int read() {\n\tchar c=getchar();int x=0;while(c<'0'||x>'9') c=getchar();\n\twhile(c>='0'&&c<='9') x=(x<<3)+(x<<1)+c-48,c=getchar();return x;\n}\nstruct E{int v,nxt,w;}e[maxn<<1];\nint T,n,m,lst,cnt,num,K,tmp;\nchar S[maxn>>1];\nint pos[maxn>>1];\nint l[maxn],r[maxn],p[maxn],deep[maxn],lg[maxn>>1],g[maxn];\nint len[maxn],son[maxn][26],fa[maxn],A[maxn],f[maxn][20],head[maxn<<1];\nint c[maxn<<1],tax[maxn>>1],q[maxn<<1],a[maxn<<1];\nstd::vector<pii> d[maxn];\nstd::vector<int> v[maxn];\nLL ans,dp[maxn<<1];\ninline void add(int x,int y,int w) {\n\te[++num].v=y;e[num].nxt=head[x];\n\thead[x]=num;c[y]++;e[num].w=w;\n}\ninline void ins(int c,int o) {\n\tint p=++cnt,f=lst;lst=p;\n\tlen[p]=len[f]+1,pos[o]=p;\n\twhile(f&&!son[f][c]) son[f][c]=p,f=fa[f];\n\tif(!f) {fa[p]=1;return;}\n\tint x=son[f][c];\n\tif(len[x]==len[f]+1) {fa[p]=x;return;}\n\tint y=++cnt;\n\tlen[y]=len[f]+1,fa[y]=fa[x],fa[p]=fa[x]=y;\n\tfor(re int i=0;i<26;i++) son[y][i]=son[x][i];\n\twhile(f&&son[f][c]==x) son[f][c]=y,f=fa[f];\n}\ninline void Pre(int L) {\n\tfor(re int i=1;i<=cnt;i++) tax[len[i]]++;\n\tfor(re int i=1;i<=L;i++) tax[i]+=tax[i-1];\n\tfor(re int i=cnt;i;--i) A[tax[len[i]]--]=i;\n\tfor(re int i=1;i<=cnt;i++) {\n\t\tint x=A[i];\n\t\tdeep[x]=deep[fa[x]]+1;\n\t\tv[fa[x]].push_back(x);\n\t}\n\tfor(re int i=1;i<=L;i++) tax[i]=0;\n}\ninline int jump(int x,int l) {\n\tfor(re int j=lg[deep[x]];j>=0;--j) \n\tif(len[f[x][j]]>=l) x=f[x][j];\n\tpii t=mp(x,l);\n\tif(s.find(t)==s.end()) g[x]++,s.insert(t);\n\treturn x;\n}\nvoid dfs(int x,int fa) {\n\tif(fa) add(fa,x,0);\n\tint h=0;\n\tstd::sort(d[x].begin(),d[x].end());\n\tif(d[x].size()) {\n\t\tp[d[x][0].second]=x;\n\t\tfor(re int i=1;i<d[x].size();i++) {\n\t\t\tif(d[x][i].first!=d[x][i-1].first) {h=i;break;}\n\t\t\tp[d[x][i].second]=x;\n\t\t}\n\t}\n\tint pre=x;\n\twhile(g[x]>1) {\n\t\t++cnt;g[x]--;\n\t\tp[d[x][h].second]=cnt;\n\t\tfor(re int i=h+1;i<d[x].size();i++) {\n\t\t\tif(d[x][i].first!=d[x][i-1].first) {h=i;break;}\n\t\t\tp[d[x][i].second]=cnt;\n\t\t}\n\t\tadd(pre,cnt,0);pre=cnt;\n\t}\n\tfor(re int i=0;i<v[x].size();i++) dfs(v[x][i],pre);\n}\nint main() {\n\tT=read();\n\tfor(re int i=2;i<=200005;i++) lg[i]=lg[i>>1]+1;\n\twhile(T--) {\n\t\ts.clear();\n\t\tfor(re int i=1;i<=cnt;i++) deep[i]=head[i]=c[i]=a[i]=dp[i]=0;\n\t\tfor(re int i=1;i<=tmp;i++) v[i].clear(),d[i].clear();\n\t\tfor(re int i=1;i<=tmp;i++) memset(son[i],0,sizeof(son[i])),fa[i]=0,g[i]=0;\n\t\tnum=0;lst=cnt=1;\n\t\tscanf(\"%s\",S+1);int L=strlen(S+1);\n\t\tfor(re int i=L;i;--i) ins(S[i]-'a',i);\n\t\tPre(L);\n\t\tfor(re int i=2;i<=cnt;i++) \n\t\t\tf[i][0]=fa[i];\n\t\tfor(re int j=1;j<=lg[L];j++)\n\t\t\tfor(re int i=2;i<=cnt;i++) \n\t\t\t\tf[i][j]=f[f[i][j-1]][j-1];\n\t\tn=read();\n\t\tfor(re int i=1;i<=n;i++) \n\t\t\tl[i]=read(),r[i]=read(),p[i]=jump(pos[l[i]],r[i]-l[i]+1);\n\t\tm=read();\n\t\tfor(re int i=n+1;i<=n+m;i++) \n\t\t\tl[i]=read(),r[i]=read(),p[i]=jump(pos[l[i]],r[i]-l[i]+1);\n\t\tfor(re int i=1;i<=n+m;i++) \n\t\t\td[p[i]].push_back(mp(r[i]-l[i]+1,i));\n\t\ttmp=cnt;\n\t\tdfs(1,0);\n\t\tfor(re int i=1;i<=n;i++) a[p[i]]=r[i]-l[i]+1;\n\t\tK=read();\n\t\tfor(re int x,y,i=1;i<=K;i++) {\n\t\t\tx=read(),y=read();\n\t\t\tadd(p[x],p[y+n],r[x]-l[x]+1);\n\t\t}\n\t\tint tot=0;ans=0;\n\t\tq[++tot]=1;\n\t\tfor(re int i=1;i<=tot;i++) {\n\t\t\tint x=q[i];\n\t\t\tans=max(ans,dp[x]+a[x]);\n\t\t\tfor(re int j=head[x];j;j=e[j].nxt) {\n\t\t\t\tc[e[j].v]--;\n\t\t\t\tdp[e[j].v]=max(dp[e[j].v],dp[x]+e[j].w);\n\t\t\t\tif(!c[e[j].v]) q[++tot]=e[j].v;\n\t\t\t}\n\t\t} \n\t\tif(tot<cnt) puts(\"-1\");\n\t\telse printf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1554704335,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5284 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898\u3011"
    },
    {
        "content": "\u795e\u4ed9\u9898$orz$\u3002\n\ndalao\u7684\u9898\u89e3\u5199\u5f97\u90fd\u5f88\u7b80\u6d01\uff0c\u672c\u849f\u84bb\u78e8\u4e86\u597d\u4e45\u624d\u770b\u61c2$orz$\u3002\n\n\u5e0c\u671b\u8fd9\u7bc7\u9898\u89e3\u80fd\u5e2e\u52a9\u5230\u50cf\u6211\u4e00\u6837\u7684\u849f\u84bb\u3002\n\n#\u9996\u5148\uff0c\u6839\u636e\u9898\u610f\uff0c\u6784\u5efa\u51fa\u56fe\u8bba\u6a21\u578b\u3002\n\n\u628a\u6bcf\u4e2a$A$\u7c7b\u4e32\u548c\u6bcf\u4e2a$B$\u7c7b\u4e32\u770b\u6210\u4e00\u4e2a\u70b9\uff0c$A$\u7c7b\u4e32\u70b9\u6743\u4e3a\u5176\u957f\u5ea6\uff0c$B$\u7c7b\u4e32\u70b9\u6743\u4e3a$0$\u3002\u5982\u679c$B_j$\u662f$A_i$\u7684\u524d\u7f00\uff0c\u5c31\u4ece$B_j$\u5411$A_i$\u8fde\u4e00\u6761\u8fb9\uff0c\u5982\u679c$A_i$\u652f\u914d$B_j$\uff0c\u5c31\u4ece$A_i$\u5411$B_j$\u8fde\u4e00\u6761\u8fb9\u3002\u5728\u8fd9\u5f20\u56fe\u4e0a\u4ece$A_i$\u8d70\u5411$B_j$\u518d\u8d70\u5411$A_k$\uff0c\u4ee3\u8868$A_i$\u540e\u7d27\u63a5\u7740\u8fde\u4e0a$A_k$\u3002\n\n#\u5176\u6b21\uff0c\u4f18\u5316\u5efa\u8fb9\n\n\u66b4\u529b\u5efa\u8fb9\u590d\u6742\u5ea6\u4e09\u6b21\u65b9\uff0c\u6211\u4eec\u5148\u8003\u8651\u4f18\u5316\u524d\u7f00\u5339\u914d\u3002\u6ce8\u610f\u5230\u4e24\u4e2a\u5b50\u4e32\u7684$lcp$\uff08\u6700\u957f\u516c\u5171\u524d\u7f00\uff09\u5c31\u662f\u6bcd\u4e32\u53cd\u4e32\u7684\u540e\u7f00\u81ea\u52a8\u673a\u7684$parent$\u6811\u4e0a\u7684$LCA$\u8282\u70b9\u6240\u63a5\u53d7\u7684\u6700\u957f\u5b50\u4e32\uff08\u8fd9\u53e5\u8bdd\u6bd4\u8f83\u957f\uff0c\u8bf7\u786e\u4fdd\u5b8c\u5168\u7406\u89e3\u540e\u518d\u5f80\u4e0b\u770b\uff09\u3002\u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u500d\u589e\u5b9a\u4f4d\u5b50\u4e32\uff0c\u6c42$LCA$\uff0c\u62ff\u5230$40$\u5206\u7684\u597d\u6210\u7ee9\uff08\u65f6\u95f4\u590d\u6742\u5ea6$O(n^2logn)$\uff09\u3002\n\n\u500d\u589e\u5b9a\u4f4d\u5b50\u4e32\u65b9\u6cd5\u5982\u4e0b\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u53cd\u4e32\u7684\u524d\u7f00\uff0c\u8bb0\u5f55\u63a5\u53d7\u5b83\u7684\u8282\u70b9$id[i]$\u3002\u5b9a\u4f4d\u5b50\u4e32$s[l,r]$\u65f6\uff0c\u4ece$id[r]$\u5f80\u4e0a\u500d\u589e\uff0c\u627e\u5230\u53ef\u63a5\u53d7\u5b50\u4e32\u6700\u957f\u957f\u5ea6\u5927\u4e8e\u8be5\u5b50\u4e32\u957f\u5ea6\uff0c\u4e14\u5b83\u7684\u540e\u7f00\u94fe\u63a5\u6307\u5411\u8282\u70b9\u53ef\u63a5\u53d7\u5b50\u4e32\u6700\u957f\u957f\u5ea6\u5c0f\u4e8e\u8be5\u5b50\u4e32\u957f\u5ea6\u7684\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u5c31\u662f\u63a5\u53d7$s[l,r]$\u7684\u8282\u70b9\u3002\n\n\u7528\u4ee5\u4e0a\u65b9\u6cd5\u5efa\u8fb9\u4f1a\u6709$m+n_an_b$\u6761\u8fb9\uff0c\u8003\u8651\u7ee7\u7eed\u4f18\u5316\u3002\u6ce8\u610f\u5230\u4e24\u4e2a\u4e32\u540c\u4e3a\u53e6\u4e00\u4e2a\u4e32\u7684\u524d\u7f00\uff0c\u4e00\u5b9a\u6709\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u524d\u7f00\u3002\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u628a\u5b83\u63a5\u53d7\u7684\u5b50\u4e32\u6309\u957f\u5ea6\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5bf9\u4e8e\u957f\u5ea6\u76f8\u540c\u7684\uff0c\u5148\u6392$B$\u7c7b\u4e32\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u8bb0\u5f55$lastB$\u8868\u793a\u5b83\u6240\u63a5\u53d7\u7684\u6700\u957f$B$\u7c7b\u4e32\uff0c\u5e76\u4ece\u5b83\u7956\u5148\u7ee7\u627f\u4e0b\u6765\u7684$lastB$\u5411\u5b83\u63a5\u53d7\u7684\u6700\u77ed\u5b50\u4e32\u8fde\u8fb9\uff0c\u6700\u540e\u628a\u5b83\u7684$lastB$\u4f20\u7ed9\u5b83\u7684\u513f\u5b50\u3002\u5bf9\u4e8e\u8282\u70b9\u5185\uff0c\u6211\u4eec\u6309\u987a\u5e8f\u8bbf\u95ee\u5b83\u63a5\u53d7\u7684\u6bcf\u4e00\u4e2a\u5b50\u4e32\uff0c\u5e76\u4ece$lastB$\u5411\u8be5\u5b50\u4e32\u8fde\u8fb9\uff0c\u7136\u540e\u66f4\u65b0$lastB$\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u6837\u8fde\u8fb9\uff0c\u8fb9\u6570\u662f\u7ebf\u6027\u7684\u3002\n\n#\u6700\u540e\uff0c\u6c42\u7b54\u6848\n\n\u5728\u8fd9\u5f20\u56fe\u4e0a\u8dd1\u6700\u957f\u8def\u5f97\u51fa\u7b54\u6848\uff08\u7b54\u6848\u5c31\u662f\u6700\u957f\u8def\uff0c\u5982\u679c\u6709\u73af\u8f93\u51fa$-1$\uff09\u3002\n\n\u4e0a\u4ee3\u7801\uff08\u4e0a\u9762\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u6240\u4ee5\u6ce8\u91ca\u4e0d\u591a\uff09\uff1a\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define ll long long int\n\nstruct Graph{\n    \u62d3\u6251\u6392\u5e8f\u6c42\u6700\u957f\u8def\n    int cur_cnt,edge_cnt;\n    int fir[400000],val[400000];\n    int to[800000],nxt[800000];\n    int deg_in[400000];\n    ll dp[400000];\n    queue<int> q,empty;\n    Graph(void){cur_cnt=400000;return;}\n    void Clear(void)\n    {\n        q=empty;\n        for(int i=0;i<cur_cnt;i++){\n            fir[i]=-1;\n            dp[i]=deg_in[i]=0;\n        }\n        edge_cnt=-1;\n        return;\n    }\n    \n    void add(int a,int b)\n    {\n        deg_in[b]++;\n        to[++edge_cnt]=b;\n        nxt[edge_cnt]=fir[a];\n        fir[a]=edge_cnt;\n        return;\n    }\n    \n    ll solve(void)\n    {\n        ll res=0;\n        int p,pp,t=cur_cnt;\n        for(int i=0;i<cur_cnt;i++){\n            dp[i]=val[i];\n            if(deg_in[i]==0){\n                q.push(i);\n                t--;\n            }\n        }\n        while(q.size()>0){\n            p=q.front();\n            q.pop();\n            res=max(res,dp[p]);\n            for(int i=fir[p];i!=-1;i=nxt[i]){\n                pp=to[i];\n                dp[pp]=max(dp[pp],dp[p]+val[pp]);\n                deg_in[pp]--;\n                if(deg_in[pp]==0){\n                    q.push(pp);\n                    t--;\n                }\n            }\n        }\n        if(t!=0)\n            return -1;\n        else return res;\n    }\n}graph;\n\nint n,na,nb,m,cnt,last;\nint len[400005],fa[20][400005];\nint ch[26][400005],id[200000];\nint Fir[400005],lst[400005];\nint To[400005],Nxt[400005];\nchar str[200000];\nvoid build(void)\n{\n    \u5efaparent\u6811\n    for(int i=2;i<=cnt;i++){\n        To[i]=i;\n        Nxt[i]=Fir[fa[0][i]];\n        Fir[fa[0][i]]=i;\n    }\n    return;\n}\n\nstruct substr{\n    int l,r,ID,pos;\n    char type;\n}sub[400000],temp;\nint start[400005],End[400005];\ninline bool comp(substr a,substr b)\n{\n    \u6392\u5e8f\u7528\n    if(a.pos!=b.pos)\n        return a.pos<b.pos;\n    if(a.r-a.l==b.r-b.l)\n        return a.type=='b';\n    return a.r-a.l<b.r-b.l;\n}\n\nvoid clear_SAM(void)\n{\n    for(int i=1;i<=cnt;i++){\n        for(int j=0;j<26;j++)\n            ch[j][i]=0;\n        Fir[i]=lst[i]=0;\n    }\n    fa[0][1]=len[1]=0;\n    len[0]=-99999999;\n    cnt=last=1;\n    return;\n}\nint find(int p,int Len)\n{\n\t\u5b50\u4e32\u5b9a\u4f4d\n    for(int i=19;i>=0;i--)\n        if(len[fa[i][p]]>=Len)\n            p=fa[i][p];\n    return p;\n}\n\nvoid dfs(int i)\n{\n    if(start[i]<End[i]){\n        if(lst[fa[0][i]]!=0)\n            graph.add(lst[fa[0][i]],sub[start[i]].ID);\n        if(sub[start[i]].type=='b')\n            lst[i]=sub[start[i]].ID;\n        for(int j=start[i]+1;j<End[i];j++){\n            temp=sub[j];\n            if(lst[i]!=0)\n                graph.add(lst[i],temp.ID);\n            \u4ecelastB\u5411\u8be5\u5b50\u4e32\u8fde\u8fb9\n            \n            if(temp.type=='b')\n                lst[i]=temp.ID;\n            \u66f4\u65b0lastB\n        }\n    }\n    for(int j=Fir[i];j!=0;j=Nxt[j]){\n        lst[To[j]]=lst[i];\n        dfs(To[j]);\n    }\n    return;\n}\n\nvoid insert(int c)\n{\n    int p=last,cur=last=++cnt;\n    len[cur]=len[p]+1;\n    while(p!=0&&ch[c][p]==0){\n        ch[c][p]=cur;\n        p=fa[0][p];\n    }\n    if(p==0)\n        fa[0][cur]=1;\n    else{\n        int d=ch[c][p];\n        if(len[d]==len[p]+1)\n            fa[0][cur]=d;\n        else{\n            int clone=++cnt;\n            len[clone]=len[p]+1;\n            fa[0][clone]=fa[0][d];\n            for(int i=0;i<26;i++)\n                ch[i][clone]=ch[i][d];\n            while(p!=0&&ch[c][p]==d){\n                ch[c][p]=clone;\n                p=fa[0][p];\n            }\n            fa[0][d]=fa[0][cur]=clone;\n        }\n    }\n    return;\n}\n\nvoid hahaha(void)\n{\n    graph.Clear();\n    clear_SAM();\n    scanf(\"%s\",str);\n    n=strlen(str);\n    for(int i=n-1;i>=0;i--){\n        insert(str[i]-'a');\n        id[i]=last;\n    }\n    for(int i=1;i<20;i++){\n        fa[i][0]=0;\n        for(int j=1;j<=cnt;j++)\n            fa[i][j]=fa[i-1][fa[i-1][j]];\n    }\n    scanf(\"%d\",&na);\n    for(int i=0;i<na;i++){\n        scanf(\"%d%d\",&sub[i].l,&sub[i].r);\n        sub[i].pos=find(id[sub[i].l-1],sub[i].r-sub[i].l+1);\n        graph.val[i]=sub[i].r-sub[i].l+1;\n        sub[i].type='a';\n        sub[i].ID=i;\n    }\n    scanf(\"%d\",&nb);\n    for(int i=na;i<na+nb;i++){\n        scanf(\"%d%d\",&sub[i].l,&sub[i].r);\n        sub[i].pos=find(id[sub[i].l-1],sub[i].r-sub[i].l+1);\n        graph.val[i]=0;\n        sub[i].type='b';\n        sub[i].ID=i;\n    }\n    graph.cur_cnt=na+nb;\n    build();\n    sort(sub,sub+na+nb,comp);\n    End[cnt]=na+nb;\n    int p=0;\n    for(int i=1;i<=cnt;i++){\n        while(sub[p].pos==i)\n            p++;\n        start[i+1]=End[i]=p;\n    }\n    \u627e\u51fa\u6bcf\u4e2a\u8282\u70b9\u63a5\u53d7\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u7ed3\u675f\u4f4d\u7f6e\n    \n    dfs(1);\n    \u5efa\u56fe\n    \n    int x,y;\n    scanf(\"%d\",&m);\n    while(m--){\n        scanf(\"%d%d\",&x,&y);\n        graph.add(x-1,na+y-1);\n    }\n    \u5efa\u56fe\n    printf(\"%lld\\n\",graph.solve());\n    return;\n}\n\nint main(void)\n{\n    int T;\n    scanf(\"%d\",&T);\n    while(T--)\n        hahaha();\n    return 0;\n}\n```",
        "postTime": 1559091059,
        "uid": 60202,
        "name": "csyakuoi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5284 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898\u3011"
    },
    {
        "content": "### [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/10678771.html)\n\n### [\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P5284)\n\n### \u6211\u7528sa\u505a\u7684\u672c\u9898 ~~\uff08\u7801\u91cf\u4f3c\u4e4e\u6709\u70b9\u5927\uff09~~\n\n#### \u5148\u5bf9\u539f\u4e32\u5efasa\n\n#### \u8003\u8651\u5982\u4f55\u5efa\u56fe\uff1a\n\n#### \u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u957f\u5ea6len\n\n#### \u5148\u5c06height\u4e2d\u7b49\u4e8elen\u7684\u4e24\u4e2a\u4f4d\u7f6e\u5728\u5e76\u67e5\u96c6\u5408\u5e76\u8d77\u6765\uff0c\u5c06lst\u4e5f\u5408\u5e76\uff08lst\u662f\u94fe\u8868\uff09\n\n#### \u518d\u5c06\u957f\u5ea6\u4e3alen\u7684a\u4e32\u7684\u7f16\u53f7\u52a0\u5165\u6240\u5728\u5e76\u67e5\u96c6\u7684lst\n\n#### \u7136\u540e\u5c31\u73c2\u4ee5\u67e5\u8be2\u51fa\u6bcf\u4e2a\u957f\u5ea6\u4e3alen\u7684b\u4e32\u6240\u5bf9\u5e94a\u4e32\u7f16\u53f7\u7684\u94fe\u8868\u5934\u5c3e\n\n#### \u5904\u7406\u5b8c\u6240\u6709\u540e\u6309\u52a0\u5165\u94fe\u8868\u7684\u987a\u5e8f\u91cd\u65b0\u7f16\u53f7\n\n#### \uff08\u4e0a\u9762\u8fd9\u6bb5\u89c1merging\u51fd\u6570\uff0c~~\u8bed\u6587\u4e0d\u597d\u8bf4\u4e0d\u6e05~~\uff09\n\n#### \u73b0\u5728\u6bcf\u4e2ab\u5bf9\u5e94\u7684a\u7684\u7f16\u53f7\u90fd\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\n\n#### \u73c2\u4ee5\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\n\n#### \u6700\u540e\u8dd1\u4e00\u4e0b\u62d3\u6251\u6392\u5e8f\u5373\u53ef\u5f97\u51fa\u7b54\u6848\n\n\n```cpp\n#include <bits/stdc++.h>\n#define N 1000005\n#define M 16000005\n#define ll long long\nusing namespace std;\ninline int read()\n{\n    register int x=0,f=1;register char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x*f;\n}\ninline void write(register ll x)\n{\n    if(!x)putchar('0');if(x<0)x=-x,putchar('-');\n    static int sta[20];register int tot=0;\n    while(x)sta[tot++]=x%10,x/=10;\n    while(tot)putchar(sta[--tot]+48);\n}\ninline ll Max(register ll a,register ll b)\n{\n    return a>b?a:b;\n}\nstruct edge{\n    int to,next;\n}e[M];\nint head[N],cnte=1,degree[N],w[N],nt;\ninline void add_edge(register int u,register int v)\n{\n    e[++cnte]=(edge){v,head[u]};\n    head[u]=cnte;\n    ++degree[v];\n}\ninline void cleargraph()\n{\n    memset(w,0,sizeof(w));\n    memset(degree,0,sizeof(degree));\n    memset(head,0,sizeof(head));\n    cnte=1;\n}\nll dp[N];\nint q[N],qh,qt;\ninline ll topsort()\n{\n    qh=qt=0;\n    memset(dp,0,sizeof(dp));\n    for(register int i=1;i<=nt;++i)\n        if(!degree[i])\n            q[++qt]=i;\n    ll ans=0;\n    while(qh<qt)\n    {\n        int u=q[++qh];\n        dp[u]+=w[u];\n        ans=Max(ans,dp[u]);\n        for(register int i=head[u];i;i=e[i].next)\n        {\n            int v=e[i].to;\n            dp[v]=Max(dp[v],dp[u]);\n            if(!--degree[v])\n                q[++qt]=v;\t\n        }\n    }\n    return qt<nt?-1LL:ans;\n}\nint n,sizem;\nchar s[N];\nint rak[N],sa[N],tp[N],tex[N],height[N];\ninline void Qsort()\n{\n    for(register int i=0;i<=sizem;++i)\n        tex[i]=0;\n    for(register int i=1;i<=n;++i)\n        ++tex[rak[i]];\n    for(register int i=1;i<=sizem;++i)\n        tex[i]+=tex[i-1];\n    for(register int i=n;i>=1;--i)\n        sa[tex[rak[tp[i]]]--]=tp[i];\n}\ninline void sa_build()\n{\n    memset(tp,0,sizeof(tp));\n    memset(rak,0,sizeof(rak));\n    sizem=30;\n    for(register int i=1;i<=n;++i)\n        rak[i]=s[i]-'a'+1,tp[i]=i;\n    Qsort();\n    for(register int w=1,p=0;p<n;sizem=p,w<<=1)\n    {\n        p=0;\n        for(register int i=1;i<=w;++i)\n            tp[++p]=n-w+i;\n        for(register int i=1;i<=n;++i)\n            if(sa[i]>w)\n                tp[++p]=sa[i]-w;\n        Qsort();\n        swap(tp,rak);\n        rak[sa[1]]=p=1;\n        for(register int i=2;i<=n;++i)\n            rak[sa[i]]=(tp[sa[i-1]]==tp[sa[i]]&&tp[sa[i-1]+w]==tp[sa[i]+w])?p:++p;\n    }\n}\ninline void getheight()\n{\n    int k=0;\n    for(register int i=1;i<=n;++i)\n    {\n        if(k)\n            --k;\n        int j=sa[rak[i]-1];\n        while(s[i+k]==s[j+k])\n            ++k;\n        height[rak[i]]=k;\n    }\n}\nstruct Unionset{\n    int f[N];\n    inline void makeset(register int n)\n    {\n        for(register int i=1;i<=n;++i)\n            f[i]=i;\n    }\n    inline int find(register int x)\n    {\n        return f[x]==x?f[x]:f[x]=find(f[x]);\n    }\n    inline void merge(register int x,register int y)\n    {\n        if(find(x)!=find(y))\n            f[f[x]]=f[y];\n    }\n};\nstruct ListNode{\n    int l,r;\n    ListNode():l(-1),r(-1){}\n};\nListNode* listNode=nullptr;\ninline void clearListNodes()\n{\n    if(listNode!=nullptr) \n        delete[] listNode;\n    listNode=new ListNode[N];\n}\nstruct List{\n    int head,tail;\n    List():head(-1),tail(-1){}\n    List(int node):head(node),tail(node){}\n    List(int l,int r):head(l),tail(r){}\n    List operator +(const List& other){\n        if(tail==-1)\n            return other;\n        if(other.head==-1)\n            return *this;\n        listNode[tail].r=other.head;\n        listNode[other.head].l=tail;\n        return List(head,other.tail);\n    }\n};\nint na,nb,la[N],ra[N],lb[N],rb[N];\nList lst[N];\nvector<int> merges[N],alen[N],blen[N];\nUnionset us;\nint invl[N],invr[N],ppos[N],seq[N];\ninline void merging()\n{\n    clearListNodes();\n    for(register int i=1;i<=n;++i)\n        lst[i]=List();\n    for(register int i=0;i<=n;++i)\n    {\n        merges[i].clear();\n        alen[i].clear();\n        blen[i].clear();\n    }\n    for(register int i=1;i<n;++i)\n        merges[height[i+1]].push_back(i);\n    for(register int i=1;i<=na;++i)\n        alen[ra[i]-la[i]+1].push_back(i);\n    for(register int i=1;i<=nb;++i)\n        blen[rb[i]-lb[i]+1].push_back(i);\n    us.makeset(n);\n    for(register int len=n;len>=0;--len)\n    {\n        for(register int i=0;i<merges[len].size();++i)\n        {\n            int k=merges[len][i];\n            int u=us.find(k),v=us.find(k+1);\n            List tmp=lst[u]+lst[v];\n            us.merge(u,v);\n            lst[us.find(u)]=tmp;\n        }\n        for(register int i=0;i<alen[len].size();++i)\n        {\n            int a=alen[len][i];\n            int u=us.find(rak[la[a]]);\n            lst[u]=List(a)+lst[u];\n        }\n        for(register int i=0;i<blen[len].size();++i)\n        {\n            int b=blen[len][i];\n            int v=us.find(rak[lb[b]]);\n            invl[b]=Max(0,lst[v].head);\n            invr[b]=Max(0,lst[v].tail);\t\n        }\n    }\n    for(register int i=1,u=lst[us.find(1)].head;i<=na;++i,u=listNode[u].r)\n    {\n        if(u==-1)\n            break;\n        seq[i]=u;\n        ppos[u]=i;\n    }\n    ppos[0]=-1;\n    for(register int i=1;i<=nb;++i)\n    {\n        invl[i]=ppos[invl[i]];\n        invr[i]=ppos[invr[i]];\n    }\n}\ninline void input()\n{\n    scanf(\"%s\",s+1);\n    n=strlen(s+1);\n    na=read();\n    for(register int i=1;i<=na;++i)\n        la[i]=read(),ra[i]=read();\n    nb=read();\n    for(register int i=1;i<=nb;++i)\n        lb[i]=read(),rb[i]=read();\n    cleargraph();\n    int m=read();\n    for(register int i=1;i<=m;++i)\n    {\n        int x=read(),y=read();\n        add_edge(x,na+y);\n    }\n}\nint tot=0,ls[N],rs[N];\ninline void seg_build(register int &x,register int l,register int r)\n{\n    if(l==r)\n    {\n        x=seq[l];\n        return;\n    }\n    else\n        x=++tot;\n    int mid=l+r>>1;\n    seg_build(ls[x],l,mid);\n    seg_build(rs[x],mid+1,r);\n    add_edge(x,ls[x]),add_edge(x,rs[x]);\n}\ninline void seg_addedge(register int x,register int l,register int r,register int b,register int L,register int R)\n{\n    if(L<=l&&r<=R)\n    {\n        add_edge(b+na,x);\n        return;\n    }\n    int mid=l+r>>1;\n    if(L<=mid)\n        seg_addedge(ls[x],l,mid,b,L,R);\n    if(R>mid)\n        seg_addedge(rs[x],mid+1,r,b,L,R);\n}\ninline void buildsegtr()\n{\n    tot=na+nb;\n    int root;\n    seg_build(root,1,na);\n    for(register int i=1;i<=nb;++i)\n    {\n        if(invl[i]<0)\n            continue;\n        seg_addedge(root,1,na,i,invl[i],invr[i]);\n    }\n    nt=tot;\n}\ninline ll solve()\n{\n    input();\n    sa_build();\n    getheight();\n    merging();\n    buildsegtr();\n    for(register int i=1;i<=na;++i)\n        w[i]=ra[i]-la[i]+1;\n    return topsort();\n}\nint T;\nint main()\n{\n    T=read();\n    while(T--)\n        write(solve()),puts(\"\");\n    return 0;\n}\n```",
        "postTime": 1554805110,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5284 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898\u3011"
    },
    {
        "content": "### [\u539f\u9898\u94fe\u63a5](/problem/P5284)\n\n\u4e0d\u4f1a$\\text{SAM}$\u7684\u849f\u84bb\u53ea\u597d\u7528$\\text{SA}$\u6765\u6c34\u4e86\u3002\n\n\u5148\u8bfb\u61c2\u9898\u610f(\u7a9d\u5728\u8bfb\u9898\u610f\u8fd9\u513f\u82b1\u4e86\u5feb$20$min).\n\n\u7b80\u5355\u6765\u8bf4\uff0c\u662f\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u7ed9\u4f60\u4e24\u4e2a\u533a\u95f4\u7684\u96c6\u5408$A,B$\uff0c\u4e00\u5171\u6709$m$\u7ec4$A_i$\u5230$B_j$\u7684\u652f\u914d\u5173\u7cfb\u3002\u82e5$A_i,B_j$\u6709\u652f\u914d\u5173\u7cfb\uff0c\u5219\u4ece$A_i$\u5230$B_j$\u8fde\u8fb9\uff1b\u82e5$B_j$\u662f$A_i$\u7684\u524d\u7f00\uff0c\u5219\u73c2\u4ee5\u4ece$B_j$\u8fde\u5411$A_i$\u3002\u6bcf\u4e2a$A_i$\u6709\u6743\u503c\uff0c\u662f$A_i$\u533a\u95f4\u7684\u957f\u5ea6\u3002\u5f53\u4f60\u628a\u4e0a\u8ff0\u7684\u56fe\u5efa\u597d\u540e\uff0c\u5979\u8981\u4f60\u6c42\u56fe\u4e2d\u7684\u6700\u957f\u8def\u3002\u5982\u679c\u73c2\u4ee5\u65e0\u9650\u957f\uff0c\u8f93\u51fa`-1`\u3002\n\n~~\u4e00\u770b\u5c31\u61f5\u903c\u7684\u795e\u4ed9\u5b57\u7b26\u4e32\u56fe\u8bba\u9898~~\n\n\u6765\u809d\u8fd9\u9898\u7684\u795e\u4ed9\u4eec\u5e94\u8be5\u90fd\u77e5\u9053\u6700\u957f\u8def\u548b\u6c42\u5427\uff1f\u5c31\u662f\u5148\u62d3\u6251\u6392\u5e8f\u4e00\u4e0b\uff0c\u7136\u540e\u4ece\u540e\u5f80\u524d$\\text{dp}$\u3002\u8fd9\u91cc\u5c31\u4e0d\u8bb2\u4e86\u3002\n\n\u5206\u6790\u4e00\u4e0b\uff0c\u8fd9\u5f20\u56fe\u4e0a\u4e00\u5171\u7684\u70b9\u6570\u662f\u4e0d\u8d85\u8fc7$|A|+|B|$\uff0c\u5373\u662f\u7ebf\u6027\u7684\u3002\u4f46\u8fb9\u6570\u73c2\u80fd\u9ad8\u8fbe$m+|A|\\cdot|B|$\u3002\u518d\u4ed4\u7ec6\u5730\u5206\u6790\u4e00\u4e0b\uff0c\u4ece$A_i$\u5230$B_j$\u8fde\u7684\u8fb9\u6570\u662f$m$\uff0c\u662f\u7ebf\u6027\u7684\u3002\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u4f18\u5316$B_j$\u5411$A_i$\u8fde\u8fb9\u7684\u8fc7\u7a0b\u3002\n\n\u7ed3\u5408$B_j$\u662f$A_i$\u7684\u524d\u7f00\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u7528$\\text{SA}$\u3002\u6211\u4eec\u627e\u5230$B_j$\u5728$\\text{sa}$\u4e0a\u7684\u4f4d\u7f6e\uff0c\u8bbe\u4e3a$\\text{pos}$\u3002$B_j$\u8fde\u5411\u7684\u6240\u6709$A_i$\u5fc5\u987b\u6ee1\u8db3$\\text{lcp}$\u662f$\\ge|B_j|$\u7684\uff0c\u5728$\\text{sa}$\u4e0a\u5fc5\u987b\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u4e14\u5305\u542b$\\text{pos}$\u3002\u8bbe\u8fd9\u4e2a\u533a\u95f4\u4e3a$[l,r]$\uff0c\u90a3\u4e48\u5fc5\u987b\u6ee1\u8db3\uff1a$\\min\\limits_{l+1\\le i\\le r}height_i\\ge |B_j|$\uff0c\u4e14$l$\u5c3d\u91cf\u5fd8\u5de6\uff0c$r$\u5c3d\u91cf\u5f80\u53f3\u3002\u627e$l,r$\u7684\u8fc7\u7a0b\u73c2\u4ee5\u901a\u8fc7\u5728$\\text{height}$\u6570\u7ec4\u4e0a\u5efa\u51fa$\\text{ST}$\u8868\u4e4b\u540e\u4e8c\u5206\u6c42\u51fa\u3002\u7136\u540e\u53ea\u8981\u518d\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u5c31\u73c2\u4ee5\u4e86\u3002\n\n\u4f46\u8fd9\u6837\u6709\u4e2a\u95ee\u9898\uff1a\u4f60\u4e0d\u80fd\u4fdd\u8bc1\u5728$[l,r]$\u533a\u95f4\u5185\u7684$|A_i|\\ge |B_j|$\u3002\u8fd9\u6837\u53ea\u80fd\u5f97\u5230$80$\u5206\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8003\u8651\u66f4\u597d\u7684\u505a\u6cd5\uff1a\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u3002\u6309\u7167$|A_i|$\u4ece\u5927\u5230\u5c0f\u5efa\u6811\uff0c\u6bcf\u4e2a$A_i$\u53ea\u5728\u7b2c$n-|A_i|$\u68f5\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5efa\u6811\u65f6\u52a0\u5165\u3002\u5728\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e0a\uff0c\u7b2c$i$\u68f5\u6811\u4e0a\u7684\u70b9\u8981\u5411\u7b2c$i-1$\u68f5\u6811\u4e0a\u7684\u5bf9\u5e94\u70b9\u8fde\u8fb9(\u9664\u975e\u6ca1\u6709)\uff0c\u8fd9\u6837\u73c2\u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u6b21\u52a0\u5165\u7684$B_j$\u7684\u957f\u5ea6$\\le |A_i|$\u3002\u5177\u4f53\u7ec6\u8282\u5c31\u5eb7\u4ee3\u7801\u5427\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(N\\log N)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(N\\log N)$\n\n\u4ee3\u7801\uff1a\n\n```\n// Code by H~$~C\n#include <bits/stdc++.h>\nusing namespace std;\n\n#ifndef LOCAL_JUDGE\nstatic char _in_buf[100000], *_in_p1 = _in_buf, *_in_p2 = _in_buf;\n#define gc (__builtin_expect(_in_p1 == _in_p2, 0) && (_in_p2 = (_in_p1 = _in_buf) + \\\n        fread(_in_buf, 1, 100000, stdin), _in_p1 == _in_p2) ? -1 : *_in_p1++)\n#else\n#define gc getchar()\n#endif\ninline int read() {\n  register char ch = gc;\n  register int x = 0;\n  while (ch < 48 || ch > 57) ch = gc;\n  while (ch > 47 && ch < 58) x = (x << 3) + (x << 1) + (ch ^ 48), ch = gc;\n  return x;\n}\n\nstatic const int Maxn = 200005;\nstatic const int Maxs = 5000005;\n\nint n, na, nb, N, m;\nchar str[Maxn];\nint la[Maxn], ra[Maxn], lb[Maxn], rb[Maxn];\nvector<int> A[Maxn];\nint ST[Maxn][20];\n\nint wa[Maxn], wb[Maxn], wc[Maxn], _s[Maxn];\nint sa[Maxn], rnk[Maxn], height[Maxn];\ntemplate<typename T>\nvoid build_SA(T *ss, int n, int m) {\n  register int *x = wa, *y = wb, *tmp;\n  register int i, j, w;\n  for (i = 1; i <= n; ++i) _s[i] = ss[i];\n  for (i = 1; i <= n; ++i) x[i] = _s[i], y[i] = i;\n  for (i = 1; i <= m; ++i) wc[i] = 0;\n  for (i = 1; i <= n; ++i) wc[x[i]]++;\n  for (i = 2; i <= m; ++i) wc[i] += wc[i - 1];\n  for (i = n; i >= 1; --i) sa[wc[x[y[i]]]--] = y[i];\n  for (w = 1; w <= n; w <<= 1) {\n    register int tot = 0;\n    for (i = n - w + 1; i <= n; ++i) y[++tot] = i;\n    for (i = 1; i <= n; ++i) if (sa[i] > w) y[++tot] = sa[i] - w;\n    for (i = 1; i <= m; ++i) wc[i] = 0;\n    for (i = 1; i <= n; ++i) wc[x[i]]++;\n    for (i = 2; i <= m; ++i) wc[i] += wc[i - 1];\n    for (i = n; i >= 1; --i) sa[wc[x[y[i]]]--] = y[i];\n    tmp = x, x = y, y = tmp, x[sa[1]] = 1, tot = 1;\n    for (i = 2; i <= n; ++i)\n      x[sa[i]] = ((y[sa[i]] == y[sa[i - 1]] && y[sa[i] + w] == y[sa[i - 1] + w]) ? tot : ++tot);\n    if (tot == n) break; m = tot;\n  }\n  for (i = 1; i <= n; ++i) rnk[sa[i]] = i;\n  for (i = 1, w = 0; i <= n; ++i) {\n    if (rnk[i] == 1) continue;\n    if (w) --w;\n    int j = sa[rnk[i] - 1];\n    while (i + w <= n && j + w <= n && _s[i + w] == _s[j + w]) w++;\n    height[rnk[i]] = w;\n  }\n}\n// sa[rank] = name, rnk[name] = rank\n// height[i] = lcp(suffix(sa[i - 1]), suffix(sa[i]))\n\nvector<int> g[Maxs];\nint deg[Maxs], val[Maxs];\ninline void clear_all(int u) { g[u].clear(), deg[u] = val[u] = 0; }\ninline void add_edge(int u, int v) { g[u].push_back(v), deg[v]++; }\n\nstruct Node {\n  int id;\n  Node *l, *r;\n  Node() { }\n  Node(int id, Node *l, Node *r)\n  : id(id), l(l), r(r) { }\n} *root[Maxn], pool[Maxs], *cur_pointer = pool;\ninline Node *newnode(int id, Node *l = NULL, Node *r = NULL) {\n  return &(*++cur_pointer = Node(id, l, r));\n}\nint insert(Node *&p, int l, int r, int pos) {\n  if (!p) {\n    p = newnode(++N);\n    clear_all(N);\n  }\n  else {\n    p = newnode(p->id, p->l, p->r);\n    clear_all(++N);\n    add_edge(N, p->id);\n    p->id = N;\n  }\n  if (l == r) return p->id;\n  int mid = (l + r) >> 1, res;\n  if (pos <= mid) res = insert(p->l, l, mid, pos);\n  else res = insert(p->r, mid + 1, r, pos);\n  if (p->l) add_edge(p->id, p->l->id);\n  if (p->r) add_edge(p->id, p->r->id);\n  return res;\n}\nvoid link_edge(Node *p, int l, int r, int L, int R, int u) {\n  if (!p) return ;\n  if (L == l && r == R) return add_edge(u, p->id);\n  int mid = (l + r) >> 1;\n  if (R <= mid) return link_edge(p->l, l, mid, L, R, u);\n  if (L > mid) return link_edge(p->r, mid + 1, r, L, R, u);\n  link_edge(p->l, l, mid, L, mid, u);\n  link_edge(p->r, mid + 1, r, mid + 1, R, u);\n}\n\nint que[Maxs], qh, qe;\nlong long dp[Maxs];\n\nvoid solve() {\n  cur_pointer = pool;\n  register int i, j;\n  register char ch;\n  while ((ch = gc) < 33);\n  for (n = 0; ch > 32; ch = gc) str[++n] = ch;\n  for (na = read(), i = 1; i <= na; ++i)\n    la[i] = read(), ra[i] = read();\n  for (nb = read(), i = 1; i <= nb; ++i)\n    lb[i] = read(), rb[i] = read();\n  N = na + nb;\n  build_SA<char>(str, n, 128);\n  for (i = 1; i <= n; ++i) ST[i][0] = height[i];\n  for (j = 1; j < 20; ++j)\n    for (i = 1; i + (1 << j) - 1 <= n; ++i)\n      ST[i][j] = min(ST[i][j - 1], ST[i + (1 << (j - 1))][j - 1]);\n  \n  for (i = 1; i <= N; ++i) clear_all(i);\n  for (m = read(), i = 1; i <= m; ++i) {\n    int x = read(), y = read();\n    add_edge(x, y + na);\n  }\n  for (i = 1; i <= n; ++i) A[i].clear();\n  for (i = 1; i <= na; ++i) {\n    val[i] = ra[i] - la[i] + 1;\n    A[val[i]].push_back(i);\n  }\n  \n  root[n + 1] = NULL;\n  for (i = n; i >= 1; --i) {\n    root[i] = root[i + 1];\n    for (int &x: A[i]) {\n      int id = insert(root[i], 1, n, rnk[la[x]]);\n      add_edge(id, x);\n    }\n  }\n  for (i = 1; i <= nb; ++i) {\n    int l = rnk[lb[i]], r = rnk[lb[i]];\n    int len = rb[i] - lb[i] + 1;\n    /* get the leftest position */ {\n      for (j = 0; l - (1 << j) + 1 >= 2; ++j);\n      for (; ~--j; ) {\n        if (l - (1 << j) + 1 >= 2 && ST[l - (1 << j) + 1][j] >= len) {\n          l -= (1 << j);\n        }\n      }\n    }\n    /* get the rightest position */ {\n      for (j = 0; r + (1 << j) <= n; ++j);\n      for (; ~--j; ) {\n        if (r + (1 << j) <= n && ST[r + 1][j] >= len) {\n          r += (1 << j);\n        }\n      }\n    }\n    link_edge(root[len], 1, n, l, r, i + na);\n  }\n  \n  qh = qe = 0;\n  for (i = 1; i <= N; ++i) {\n    if (!deg[i]) que[qe++] = i;\n  }\n  while (qh < qe) {\n    int u = que[qh++];\n    for (int &v: g[u]) {\n      if (!--deg[v]) {\n        que[qe++] = v;\n      }\n    }\n  }\n  if (qe != N) {\n    puts(\"-1\");\n    return ;\n  }\n  \n  for (i = N - 1; ~i; --i) {\n    int u = que[i];\n    dp[u] = 0;\n    for (int &v: g[u]) {\n      dp[u] = max(dp[u], dp[v]);\n    }\n    dp[u] += val[u];\n  }\n  printf(\"%lld\\n\", *max_element(dp + 1, dp + N + 1));\n}\n\nint main() {\n  int tests = read();\n  while (tests--) solve();\n  return 0;\n}\n```\n\n\u8dd1\u5f97\u7092\u9e21\u6162$\\ldots$\u6700\u5927\u7684\u70b9\u7528\u4e86$7.40$\u79d2",
        "postTime": 1582642819,
        "uid": 290488,
        "name": "ycx_girlfriend",
        "ccfLevel": 0,
        "title": "[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898"
    },
    {
        "content": "upd:\u53d1\u73b0\u4ee3\u7801\u6c42SA\u51fa\u9519\u4e86\uff0c\u5bfc\u81f4\u6548\u7387\u6781\u4f4e\uff0c\u66f4\u65b0\u4e00\u4e0b\n\n~~\u4fee\u590d\u540e\u53d1\u73b0\u53d8\u6210\u7b2c\u4e00\u4e86~~\n\n\u5199\u7bc7\u9898\u89e3\u7eaa\u5ff5SDOI R1D1\u56e0\u5931\u8bef\u800c\u4e22\u7684100\u5206\n\n\uff08T1 60->0 T2 80->40\uff09\n\n\u63d0\u4f9b\u4e00\u79cd\u8d3c\u7701\u5185\u5b58\u4e14\u8dd1\u5f97\u8d3c\u5feb\u7684\u505a\u6cd5\n\n\u5b9e\u9645\u5e76\u4e0d\u9700\u8981\u7528\u4e3b\u5e2d\u6811\n\n~~\u5176\u5b9e\u662f\u56e0\u4e3a\u6211\u770b\u5230\u8ba8\u8bba\u7248\u91cc\u8bf4\u4e3b\u5e2d\u6811\u8fc7\u4e0d\u53bb\uff0c\u88ab\u5413\u5230\u4e86~~\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u505a\u5230$O(n)$\uff0c\u65f6\u95f4\u8dd1\u4e0d\u6ee1\uff0c\u540c\u65f6\u5e38\u6570\u4f1a\u5f88\u5c0f\n\n\u9996\u5148\u628a\u540e\u7f00\u6570\u7ec4\u6c42\u51fa\u6765\n\n\u7136\u540e\u8003\u8651\u4ec0\u4e48\u60c5\u51b5\u4e0bA\u4e32\u53ef\u4ee5\u76f8\u8fde\n\n\u7b2c\u4e00\uff0c\u524d\u9762\u7684A\u4e32\u652f\u914d\u67d0\u4e2aB\u4e32\n\n\u7b2c\u4e8c\uff0c\u8fd9\u4e2aB\u4e32\u662f\u540e\u9762A\u4e32\u7684\u524d\u7f00\n\n\u8fd9\u6837\u53ef\u4ee5\u53d1\u73b0\uff0c\u6ee1\u8db3\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u7684A\u4e32\u548cB\u4e32\u4e4b\u95f4\u7684height\u503c\u8981\u8db3\u591f\u5927\uff0c\u5fc5\u987b\u6bd4B\u4e32\u957f\u5ea6\u5927\n\n\u800c\u4e14\uff0c\u8fd9\u4e2aB\u4e32\u4e0d\u80fd\u6bd4\u540e\u9762\u7684A\u4e32\u66f4\u957f\n\n\u8fd9\u4e00\u9650\u5236\u5bf9\u524d80\u5206\u6ca1\u6709\u5f71\u54cd\n\n\u8fd9\u90e8\u5206\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\n\n\u628aA\u4e32\u548cB\u4e32\u6309\u7167\u5bf9\u5e94\u524d\u7f00\u7684\u6392\u540d\u6392\u5e8f\n\n\u6c42\u51fa\u6bcf\u4e2aB\u4e32\u7684\u63a7\u5236\u8303\u56f4\uff0c\u4e5f\u5c31\u662f\u5b83\u80fd\u4e0e\u54ea\u6bb5\u533a\u95f4\u5185\u7684A\u4e32\u76f8\u8fde\n\n\u6c42\u8303\u56f4\u53ef\u4ee5\u7528ST\u8868+\u4e8c\u5206\n\n\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0cB\u7c7b\u4e32\u8fde\u4e00\u6bb5\u533a\u95f4\uff0cA\u7c7b\u4e32\u8fde\u53f6\u5b50\u8282\u70b9\uff0c\u5c31\u80fd\u6bd4\u8f83\u5bb9\u6613\u5730\u5f97\u523080\u5206\n\n\u518d\u8003\u8651\u957f\u5ea6\u9650\u5236\n\n\u5f88\u76f4\u63a5\u7684\u60f3\u6cd5\u5c31\u662f\u7528\u4e3b\u5e2d\u6811\u5927\u529b\u5efa\u56fe\n\n\u4f46\u8fd9\u6837\u7a7a\u95f4\u590d\u6742\u5ea6\u662f$O(n \\log n)$\u7684\n\n\u8003\u8651\u5176\u5b83\u505a\u6cd5\n\n\u9996\u5148\uff0c\u6c42\u8303\u56f4\u65f6\u6709\u4e00\u79cd$O(n\\log n)$\u65f6\u95f4\uff0c$O(n)$\u7a7a\u95f4\u7684\u505a\u6cd5\n\n\u5bf9\u6bcf\u4e2aB\u4e32\uff0c\u8003\u8651\u5411\u524d\u548c\u5411\u540e\u63a7\u5236\u7684\u8303\u56f4\n\n![](https://cdn.luogu.com.cn/upload/pic/56524.png)\n\n\u9664\u4e86\u53ef\u4ee5\u76f4\u63a5RMQ+\u4e8c\u5206\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528\u5355\u8c03\u6808+\u4e8c\u5206\n\n\u5177\u4f53\u5b9e\u73b0\uff1a\n\n\u9996\u5148\u7528\u5355\u8c03\u6808\u7ef4\u62a4\u5230\u76ee\u524d\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\n\n\u5927\u6982\u662f\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/56526.png)\n\n\uff08\u6bcf\u6b21\u7ef4\u62a4\u90fd\u662f\u4e00\u6bb5\u6cbf\u7ea2\u8272\u7ebf\u7684\u6298\u7ebf\uff09\n\n\u7136\u540e\uff0c\u5728\u5355\u8c03\u6808\u4e0a\u4e8c\u5206\uff0c\u6c42\u51fa\u5411\u524d\u6700\u8fdc\u80fd\u5230\u8fbe\u54ea\u91cc\n\n~~\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u8fd9\u6837\u662f\u5bf9\u7684~~\n\n\u5411\u540e\u63a7\u5236\u7684\u8303\u56f4\u540c\u7406\uff0c\u6ce8\u610fheight\u6570\u7ec4\u7684\u5b9a\u4e49\n\n\u63a5\u4e0b\u6765\uff0c\u8003\u8651\u4ec0\u4e48\u60c5\u51b5\u4e0bB\u7c7b\u4e32\u53ef\u4ee5\u4e0eA\u7c7b\u4e32\u76f8\u8fde\n\n\u9996\u5148\uff0c\u4e24\u4e2aB\u7c7b\u4e32\u63a7\u5236\u533a\u95f4\u53ea\u80fd\u662f\u5305\u542b\u6216\u76f8\u79bb\n\n~~\u4e5f\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u5427~~\n\n\u7136\u540e\uff0c\u5982\u679c\u4e24\u4e2aB\u7c7b\u4e32\u76f8\u5305\u542b\uff0c\u5219\u957f\u5ea6\u8f83\u957f\u7684\u88ab\u957f\u5ea6\u8f83\u77ed\u7684\u5305\u542b\uff08\u5305\u62ec\u5b8c\u5168\u76f8\u540c\u7684\u60c5\u51b5\uff09\n\n\u8fd9\u6837\u53ef\u4ee5\u53d1\u73b0\uff1a\u5982\u679c\u4e00\u4e2aB\u7c7b\u4e32\u662f\u67d0\u4e2aA\u7c7b\u4e32\u7684\u524d\u7f00\uff0c\u90a3\u4e48\u5305\u542b\u5b83\u63a7\u5236\u8303\u56f4\u7684\u4e32\u4e5f\u662f\u8fd9\u4e2aA\u7c7b\u4e32\u7684\u524d\u7f00\uff0c~~\u8fd8\u662f\u611f\u6027\u7406\u89e3\u4e00\u4e0b~~\n\n\u628a\u533a\u95f4\u8303\u56f4\u548c\u957f\u5ea6\u4e00\u8d77\u5728\u5750\u6807\u7cfb\u4e0a\u753b\u51fa\u6765\uff0c\u5c31\u662f\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/56527.png)\n\n\u7136\u540e\u5728\u8fd9\u5f20\u56fe\u4e0a\u770b\u4ec0\u4e48\u65f6\u5019B\u7c7b\u4e32\u53ef\u4ee5\u5411A\u7c7b\u4e32\u8fde\u8fb9\n\n![](https://cdn.luogu.com.cn/upload/pic/56528.png)\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u53ea\u8981\u76f8\u4ea4\uff0c\u5c31\u80fd\u8fde\u8fb9\n\n\u56e0\u4e3a\u76f8\u4ea4\u5c31\u610f\u5473\u7740A\u7c7b\u4e32\u5728\u63a7\u5236\u533a\u95f4\u5185\uff0c\u800c\u4e14\u957f\u5ea6\u9650\u5236\u6ee1\u8db3\u6761\u4ef6\n\n\u53ef\u4ee5\u8003\u8651\u626b\u63cf\u7ebf\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u6bcf\u6b21\u79fb\u52a8\u540e\u66f4\u65b0\u6808\uff0c\u968f\u540e\u628a\u8fd9\u4e2aA\u7c7b\u4e32\u5411\u6808\u5185\u7684B\u7c7b\u4e32\u8fde\u8fb9\n\n\u4f46\u8fd9\u6837\u590d\u6742\u5ea6\u4f1a\u7206\u70b8\n\n\u4e0d\u8fc7\u53d1\u73b0\uff0c\u53ef\u4ee5\u8fde\u8fb9\u7684\u8303\u56f4\u5177\u6709\u5355\u8c03\u6027\n\n\u53ef\u4ee5\u5728\u6808\u91cc\u4e8c\u5206\u51fa\u8fd9\u4e2a\u8303\u56f4\uff0c~~\u4f46\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528~~\n\n\u7a81\u7136\u53d1\u73b0\uff1aB\u7c7b\u4e32\u7684\u4f5c\u7528\u53ea\u662f\u4f7f\u5bf9\u5e94A\u7c7b\u4e32\u4e4b\u95f4\u53ef\u4ee5\u5230\u8fbe\n\n\u6240\u4ee5\u53ea\u8981B\u7c7b\u4e32\u5bf9A\u7c7b\u4e32\u7684\u8fde\u901a\u6027\u4e0d\u53d8\u5c31\u53ef\u4ee5\n\n\u53ea\u9700\u8981\u5c06A\u7c7b\u4e32\u5411\u6700\u4e0a\u9762\u7684B\u7c7b\u4e32\u8fde\u8fb9\uff0c\u7136\u540eB\u7c7b\u4e32\u5411\u4e0b\u9762\u7684B\u7c7b\u4e32\u8fde\u8fb9\u5c31\u53ef\u4ee5\uff0c\u8fd9\u6837\u4ece\u67d0\u4e2aA\u7c7b\u4e32\u51fa\u53d1\u5c31\u80fd\u5230\u8fbe\u6240\u6709\u5408\u6cd5B\u7c7b\u4e32\n\n\u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u679a\u4e3eA\u7c7b\u4e32\uff0c\u7136\u540e\u66f4\u65b0\u6808\uff0c\u5165\u6808\u7684B\u7c7b\u4e32\u4e0e\u6808\u9876\u8fde\u8fb9\n\n\u7136\u540e\u5c31\u662f\u56fe\u8bba\u90e8\u5206\u4e86\n\n\u5bf9\u8fd9\u5f20\u56fe\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\n\n\u5982\u679c\u6709\u672a\u5230\u8fbe\u8282\u70b9\uff0c\u5219\u8bf4\u660e\u6709\u73af\n\n\u6839\u636e\u5efa\u56fe\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u5f97\u77e5\u4e0d\u662fB\u7c7b\u4e32\u4e4b\u95f4\u7684\u73af\n\n\u6240\u4ee5\u5b58\u5728\u65e0\u9650\u957f\u7684\u4e32\n\n\u5982\u679c\u6240\u6709\u8282\u70b9\u90fd\u80fd\u5230\u8fbe\uff0c\u5219\u76f4\u63a5\u6309\u6c42\u51fa\u7684\u62d3\u6251\u5e8fDP\u4e00\u904d\uff0c\u6c42\u51fa\u6743\u503c\u6700\u5927\u7684\u8def\u5f84\u957f\u5ea6\u5373\u53ef\uff0c\u6743\u503c\u5c31\u662f\u5bf9\u5e94A\u7c7b\u4e32\u7684\u957f\u5ea6\n\n\u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u8fd9\u9053\u9898\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\n\n\u540e\u7f00\u6570\u7ec4$O(n \\log n)$\uff0c\u53ef\u4ee5\u6362\u6210DC3\u7b97\u6cd5\uff0c\u4e5f\u8bb8\u4f1a\u53d8\u5feb\uff0c\u7136\u800c\u6211\u4e0d\u4f1aDC3\n\n\u6392\u5e8f$O(n \\log n)$\n\n\u5728\u6808\u5185\u4e8c\u5206$O(n \\log n)$\uff0c\u4f46\u662f\u8dd1\u4e0d\u6ee1\n\n\u800c\u4e14\u53ef\u4ee5\u53d1\u73b0\u8fb9\u6570\u662f$O(n)$\u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u56fe\u8bba\u90e8\u5206\u662f$O(n)$\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\n\n\u540e\u7f00\u6570\u7ec4\uff0c\u6392\u5e8f\uff0c\u7ef4\u62a4\u6808\u90fd\u662f$O(n)$\u7684\n\n\u8fb9\u6570\u4e5f\u662f$O(n)$\u7ea7\u522b\u7684\n\n\u6240\u4ee5\u6700\u540e\u5f97\u5230\u4e86\u4e00\u4e2a\u7a7a\u95f4\u590d\u6742\u5ea6$O(n)$\u7684\u7b97\u6cd5\n\n\u4e0d\u8fc7\u8fd9\u6837~~\u6bd4\u8f83~~\u76f8\u5f53\u96be\u5199\n\n\u53d1\u73b0\u4e4b\u524d\u8dd1\u5f97\u6162\u7684\u539f\u56e0\u662fSA\u5199\u9519\n\n[\u8fd9\u662f\u539f\u6765\u7684\u8bb0\u5f55](https://www.luogu.org/recordnew/show/18179642)\n\n\u56e0\u4e3aSA\u5199\u51fa\u9519\uff0c\u5bfc\u81f4\u6548\u7387\u6781\u4f4e\uff0c\u7528\u65f645445ms(\u6c27\u5316)\uff0c\u9700\u8981\u518d\u52a0\u4e0a\u8bfb\u5165\u4f18\u5316\u624d\u80fd\u5361\u8fc7\u53bb\uff0c\u6700\u574f\u590d\u6742\u5ea6\u53d8\u6210$O(n^2)$\n\n~~\u5947\u602a\u7684\u662f\uff0c\u600e\u4e48\u5361\u8fc7\u53bb\u7684~~\n\n\u4e3b\u8981\u9519\u8bef\u662f\u500d\u589e\u65f6\u957f\u5ea6\u4e3a\u6bcf\u6b21\u52a01\n\n[\u8fd9\u662f\u66f4\u65b0\u540e\u7684\u8bb0\u5f55](https://www.luogu.org/recordnew/show/18663521)\n\n7112ms\u8dd1\u5b8c\uff0c\u800c\u4e14\u5185\u5b58\u53ea\u670928772KB\uff0c\u6700\u6162\u7684\u70b91176ms\n\n~~\u7a81\u7136\u53d1\u73b0\u53d8\u6210\u6700\u4f18\u89e3\u4e86~~\n\n~~\u4f30\u8ba1\u5f88\u5feb\u5c31\u4f1a\u88ab\u540a\u6253\u4e86~~\n\n~~\u5173\u4e8e\u63d0\u4ea4\u8bb0\u5f55\u4e2ddefine\u540e\u9762\u7684\u4e1c\u897f\u5c31\u4e0d\u8981\u5728\u610f\u4e86~~\n\n\u4ee3\u7801\uff1a\n\n~~\u76ae\u4e00\u4e0b\u5f88\u5f00\u5fc3~~\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define next val1\n#define rank val2\nconst int N=200007;\nconst bool debug=0;\nchar str[N];\nint n;\nnamespace SA{\n    int ga[N],gb[N],cnt[N],sa[N],rank[N],height[N];\n    void calc(){\n        int m=256,p;\n        int*x=ga,*y=gb;\n        for(int i=0;i<m;i++)cnt[i]=0;\n        for(int i=0;i<n;i++)cnt[x[i]=str[i]]++;\n        for(int i=1;i<m;i++)cnt[i]+=cnt[i-1];\n        for(int i=n-1;i>=0;i--)sa[--cnt[x[i]]]=i;\n        for(int j=1;j<n;j*=2){\n            p=0;\n            for(int i=n-j;i<n;i++)y[p++]=i;\n            for(int i=0;i<n;i++)if(sa[i]>=j)y[p++]=sa[i]-j;\n            \n            for(int i=0;i<m;i++)cnt[i]=0;\n            for(int i=0;i<n;i++)cnt[x[y[i]]]++;\n            for(int i=1;i<m;i++)cnt[i]+=cnt[i-1];\n            for(int i=n-1;i>=0;i--)sa[--cnt[x[y[i]]]]=y[i];\n            \n            swap(x,y);\n            p=1;\n            x[sa[0]]=0;\n            for(int i=1;i<n;i++){\n                if(y[sa[i]]==y[sa[i-1]]&&y[sa[i]+j]==y[sa[i-1]+j]){\n                    x[sa[i]]=p-1;\n                }else{\n                    x[sa[i]]=p++;\n                }\n            }\n            if(p>=n)break;\n            m=p;\n        }\n        for(int i=0;i<n;i++)rank[sa[i]]=i;\n        int k=0;\n        for(int i=0;i<n;i++){\n            if(k)k--;\n            int j=sa[rank[i]-1];\n            while(str[i+k]==str[j+k])k++;\n            height[rank[i]]=k;\n        }\n    }\n}\nint na,nb,m;\nnamespace graph{\n    int head[N*2],next[N*6],ver[N*6],tot;\n    int val[N*2];\n    int que[N*2],he,ta;\n    int deg[N*2];\n    bool vis[N*2];\n    long long dp[N*2];\n    int maxid;\n    void clr(){\n        for(int i=0;i<=maxid;i++)head[i]=0;\n        for(int i=0;i<=maxid;i++)val[i]=0;\n        for(int i=0;i<=maxid;i++)deg[i]=0;\n        for(int i=0;i<=maxid;i++)vis[i]=0;\n        for(int i=0;i<=maxid;i++)dp[i]=0;\n        maxid=0;\n        tot=0;\n    }\n    void add(int a,int b){\n        if(a==0||b==0)return;\n        tot++;\n        ver[tot]=b;\n        next[tot]=head[a];\n        head[a]=tot;\n        deg[b]++;\n    }\n    void topsort(){\n        he=ta=0;\n        for(int i=1;i<=maxid;i++){\n            if(deg[i]==0)que[ta++]=i;\n        }\n        int cur;\n        while(he!=ta){\n            cur=que[he++];\n            vis[cur]=1;\n            for(int i=head[cur];i;i=next[i]){\n                deg[ver[i]]--;\n                if(deg[ver[i]]==0)que[ta++]=ver[i];\n            }\n        }\n    }\n    \n    long long solve(){\n        maxid=na+nb;\n        topsort();\n        \n        for(int i=1;i<=na+nb;i++){\n            if(!vis[i])return -1;\n        }\n        int cur;\n        for(int i=0;i<he;i++){\n            cur=que[i];\n            if(cur<=na)dp[cur]+=val[cur];\n            for(int i=head[cur];i;i=next[i]){\n                dp[ver[i]]=max(dp[cur],dp[ver[i]]);\n            }\n        }\n        long long ans=0;\n        for(int i=1;i<=maxid;i++)ans=max(ans,dp[i]);\n        return ans;\n    }\n}\nstruct sub{\n    int l,r;\n    int id;\n};\nint blen[N];\nbool cmp1(sub a,sub b){\n    if(a.l==b.l){\n        if(a.r==b.r)return blen[a.id]<blen[b.id];\n        return a.r>b.r;\n    }\n    return a.l<b.l;\n}\nbool cmp2(sub a,sub b){\n    if(a.l==b.l)return (a.r-a.l)<(b.r-b.l);\n    return SA::rank[a.l]<SA::rank[b.l];\n}\n\nsub la[N*2],lb[N*2];\nint llim[N],rlim[N];\nvoid readstr(){\n\tn=0;\n\tchar c=getchar();\n\twhile(c<'a'||c>'z')c=getchar();\n\twhile(c>='a'&&c<='z'){\n\t\tstr[n]=c;\n\t\tc=getchar();\n\t\tn++;\n\t}\n\tstr[n]=0;\n\tn++;\n\tstr[n]=0;\n}\nlong long read(){\n\tlong long n=0;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')c=getchar();\n\twhile(c>='0'&&c<='9'){\n\t\tn=n*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn n;\n}\nchar res[30];\nvoid output(long long n){\n\tif(n==0){\n\t\tputchar('0');\n\t\tputchar('\\n');\n\t\treturn;\n\t}\n\tif(n<0){\n\t\tputchar('-');\n\t\tn=-n;\n\t}\n\tint t=0;\n\twhile(n){\n\t\tres[t++]=n%10+'0';\n\t\tn=n/10;\n\t}\n\twhile(t--){\n\t\tputchar(res[t]);\n\t}\n\tputchar('\\n');\n\treturn;\n}\nint st[N],top;\nstruct work{\n    work(){\n        readstr();\n        SA::calc();\n        na=read();\n        for(int i=0;i<na;i++){\n            la[i].l=read();\n\t\t\tla[i].r=read();\n            la[i].l--;\n            la[i].r--;\n            la[i].id=i+1;\n            graph::val[i+1]=la[i].r-la[i].l+1;\n        }\n        nb=read();\n        for(int i=0;i<nb;i++){\n            lb[i].l=read();lb[i].r=read();\n            lb[i].l--;\n            lb[i].r--;\n            lb[i].id=i+1;\n            blen[i+1]=lb[i].r-lb[i].l+1;\n        }\n        int m,a,b;\n        m=read();\n        while(m--){\n            a=read();b=read();\n            graph::add(a,b+na);\n        }\n        sort(la,la+na,cmp2);\n        sort(lb,lb+nb,cmp2);\n        top=0;\n        m=0;\n        \n        //\u8fd9\u90e8\u5206\u770b\u8d77\u6765\u5f88\u77ed\uff0c\u5f88\u597d\u5199\n        //\u4f46\u5b9e\u9645\u4e0a\uff0c\u9700\u8981\u8ba8\u8bba\u5f88\u591a\u8fb9\u754c\u60c5\u51b5\n        //\u8fd9\u90e8\u5206\u82b1\u4e86\u6211\u5c06\u8fd1\u4e00\u6574\u5929\u7684\u65f6\u95f4\n        for(int i=1;i<n;i++){\n            while(top&&SA::height[st[top-1]]>=SA::height[i])top--;\n            st[top++]=i;\n            while(m<nb&&SA::rank[lb[m].l]==i){\n                int l=0,r=top,mid;\n                while(l!=r){\n                    mid=((l+r)>>1);\n                    if(SA::height[st[mid]]>=lb[m].r-lb[m].l+1)r=mid;\n                    else l=mid+1;\n                }\n                llim[m]=((l!=0)?st[l-1]:0);\n                m++;\n            }\n        }\n        top=0;\n        m=nb-1;\n        for(int i=n-1;i>=1;i--){\n            while(top&&SA::height[st[top-1]]>=SA::height[i+1])top--;\n            st[top++]=i+1;\n            while(m>=0&&SA::rank[lb[m].l]==i){\n                int l=0,r=top,mid;\n                while(l!=r){\n                    mid=((l+r)>>1);\n                    if(SA::height[st[mid]]>=lb[m].r-lb[m].l+1)r=mid;\n                    else l=mid+1;\n                }\n                rlim[m]=((l!=0)?st[l-1]-1:n);\n                m--;\n            }\n        }\n        for(int i=0;i<nb;i++){\n            lb[i].l=llim[i];\n            lb[i].r=rlim[i];\n        }\n        sort(lb,lb+nb,cmp1);\n        top=0;\n        m=0;\n        for(int i=0;i<na;i++){\n            while(top&&lb[st[top-1]].r<SA::rank[la[i].l])top--;\n            while(m<nb){\n                if(lb[m].r<SA::rank[la[i].l])m++;\n                else if(lb[m].l<=SA::rank[la[i].l]){\n                    if(top)graph::add(lb[st[top-1]].id+na,lb[m].id+na);\n                    st[top++]=m;\n                    m++;\n                }else break;\n            }\n            if(top){\n                int l=0,r=top,mid;\n                int len=la[i].r-la[i].l+1;\n                while(l!=r){\n                    mid=((l+r)>>1);\n                    if(blen[lb[st[mid]].id]>len)r=mid;\n                    else l=mid+1;\n                }\n                if(l!=0)graph::add(lb[st[l-1]].id+na,la[i].id);\n            }\n        }\n        output(graph::solve());\n        graph::clr();\n    }\n};\nstruct qwq{\n    ~qwq(){\n        int t;\n        t=read();\n        while(t--){\n            work a;\n        }\n    }\n};\n\nint main(){qwq a;}\n\n\n```",
        "postTime": 1555147427,
        "uid": 86649,
        "name": "Hope2075",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5284 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898\u3011"
    },
    {
        "content": "\u4e00\u4e2aNaive\u81f3\u6781\u7684\u9898\u89e3\n\n\u660e\u663e\u53ef\u4ee5\u5229\u7528\u53cd\u4e32\u7684\u540e\u7f00\u81ea\u52a8\u673a\u5b9a\u4f4d\n\n\u7136\u540e\u5c31\u5f00\u59cb\u6a21\u4eff\u5929\u624d\u9ed1\u5ba2\u7684\u7ebf\u6bb5\u6811\u5efa\u8fb9\u7684\u5927\u6bd2\u7624\u505a\u6cd5\uff08\u4e3b\u8981\u662f\u83dc\uff09\n\n\u6211\u8ba4\u4e3a\u8fd9\u9053\u9898\u548c\u5929\u624d\u9ed1\u5ba2\u6ca1\u6709\u672c\u8d28\u533a\u522b\uff08Trie\u53d8\u6210\u4e86SAM\u800c\u5df2\uff09\n\n\u7136\u540e\u5c31\u4f7f\u7528\u5929\u624d\u9ed1\u5ba2\u7684\u6bd2\u7624\u4ee3\u7801\u91cf\u7684\u90a3\u4e2a\u89e3\u6cd5\uff1a\uff08\u7ebf\u6bb5\u6811+\u865a\u6811\u4f18\u5316\u5efa\u56fe\uff09\n\n\u672c\u9898\u53d1\u73b0Trie\u53d8\u6210\u4e86SAM\u7684parent\u6811 \u5b9e\u9645\u4e0a\u548cLCP\u7684\u5173\u7cfb\u90fd\u662fLCA\n\n\u90a3\u4e48\u505a\u8fc7\u5929\u624d\u9ed1\u5ba2\u7684\u670b\u53cb\u5c31\u5f88\u723d\u4e86 \u56e0\u4e3a\u5e72\u6d89\u7684\u5b50\u6811\u4f9d\u65e7\u662f\u90a3\u4e48\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\n\n\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u5c31\u5b8c\u4e8b\u4e86\n\n\u4f46\u662fRush\u5b8c\u4e86\u540e \u5927\u5bb6\u591a\u534a\u4e00\u4e0b\u5c31\u8fc7\u6837\u4f8b1 \u7684Cas1 2 \n\nCas3\u5c31\u8f93\u51fa-1\u5566 \u539f\u56e0\u662f\u8fd9\u4e48\u4e00\u56de\u4e8bTrie\u6811\u4e0a\u4e00\u4e2a\u8282\u70b9\u53ea\u5bf9\u5e94\u4e00\u4e2a\u4e32 \u4f46\u662fParent\u6811\uff08\u540e\u7f00\u6811\u5c31\u4e0d\u662f\u7684\u5566\uff09\n\n\u601d\u8003\u5728\u6392\u5e8f\u7684\u65f6\u5019\u591a\u52a0\u4e00\u7ef4\uff08\u4e32\u957f\u7ef4\uff09 \u90a3\u4e48\u5c31\u53ef\u4ee5\u4e8c\u5206DFS\u5e8f\u7684\u65f6\u5019\u628a\u8fd9\u4e2a\u9650\u5236\u52a0\u8fdb\u53bb\u4e86\n\n\u56e0\u4e3aGG\u7684\u53ea\u6709\u4e00\u4e2a\u8282\u70b9 \u8fd9\u8fd8\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\n\n\u63a5\u7740\u8fd9\u9053\u9898\u5c31\u548c\u90a3\u4e2aGDKOI2018\u7684\u90a3\u4e2a\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe+Tarjan+Topsort DP\u7684\u9898\u6ca1\u6709\u672c\u8d28\u533a\u522b\u5566\n\n\u7528Tarjan\u5224\u73af Top\u5e8f\u5e7c\u513f\u56edDP\u4e00\u4e0b\n\n\u6240\u4ee5\u8fd9\u9053\u9898\u672c\u8d28\u5c31\u662f\u539f\u9898\u548c\u539f\u9898\u7ec4\u5408\uff1f\uff08SDOI2017+GDOI2018\uff1f\uff09\n\n\u677f\uff08\u539f\uff09\u9898\u5927\u6218\u554a\n\n\u4ee3\u7801\u7565\u957f\uff087K\uff09\u4f46\u662f\u5168\u662f\u5c01\u88c5\u7684\u677f 2\u4e2a\u5c0f\u65f6\u8fde\u60f3\u5e26\u5199\u5e26\u8c03\u5f88\u7b80\u5355\uff08SAM+\u500d\u589e 20min SGT 10 min Tarjan+Topsort 15min \u8c03\u8bd520min \u601d\u800320min \u6e05\u7a7a\u591a\u6d4b10 min\uff08\u6bd2\u7624\uff09\u8003\u573aDebuff 20min\uff09\u5dee\u4e0d\u591a\u5c31\u8fd9\u4e48\u957f\u65f6\u95f4\n\n\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL; \nconst int N=7e5+100;\nchar S[N];\nint posb[N];\nint posa[N];\nint dfn[N<<1];\nint low[N<<1];\nint mmpcnt;\npair<int,int> mmp[N<<1];\nint Val[N<<1];\nint Len[N<<1];\nint Id[N];\nbool cmpA(int A,int B){\n    return dfn[posa[A]]<dfn[posa[B]]||(dfn[posa[A]]==dfn[posa[B]]&&Val[A]<Val[B]);\n}\nint Nodecnt;\nstruct Graph{\n    struct Front_Star{\n        int u,v,nxt;\n    }e[N<<3];\n    int post[N<<3];\n    int cnt;\n    int first[N<<3];\n    int Du[N<<3];\n    LL F[N<<3];\n    void add(int u,int v){\n        ++cnt;\n        e[cnt].u=u;\n        e[cnt].v=v;\n        Du[v]++;\n        e[cnt].nxt=first[u];\n        first[u]=cnt;\n    }\n    int dfn[N<<3];\n    int low[N<<3];\n    int dfn_cnt;\n    stack<int>S;\n    int instack[N<<3];\n    int scc;\n    #define lc (p<<1)\n    #define rc (p<<1|1)\n    void Build(int p,int l,int r){\n        post[p]=++Nodecnt;\n        if(l==r){\n            add(post[p],Id[l]);\n            return;\n        }\n        int mid=(l+r)>>1;\n        Build(lc,l,mid);\n        Build(rc,mid+1,r);\n        add(post[p],post[lc]);\n        add(post[p],post[rc]);\n    }\n    void Update(int p,int l,int r,int dl,int dr,int pos){\n        if(dl<=l&&r<=dr){\n            add(pos,post[p]);\n            return;\n        }\n        int mid=(l+r)>>1;\n        if(dl<=mid)Update(lc,l,mid,dl,dr,pos);\n        if(mid< dr)Update(rc,mid+1,r,dl,dr,pos);\n    }\n    #undef lc \n    #undef rc\n    void Tarjan(int x){\n        dfn[x]=low[x]=++dfn_cnt;\n        S.push(x);\n        instack[x]=1;\n        for(int i=first[x];i;i=e[i].nxt){\n            int v=e[i].v;\n            if(!dfn[v]){\n                Tarjan(v);\n                low[x]=min(low[x],low[v]);\n            }\n            else{\n                if(instack[v]){\n                    low[x]=min(low[x],dfn[v]);\n                }\n            }\n        }\n        if(low[x]==dfn[x]){\n            int u;\n            ++scc;\n            do{\n                u=S.top();\n                S.pop();\n                instack[u]=0;\n            }while(u!=x);\n        }\n    }\n    void Solve(){\n        for(int i=1;i<=Nodecnt;++i){\n            if(!dfn[i]){\n                Tarjan(i);\n            }\n        }\n        if(scc!=Nodecnt){\n            cout<<-1<<'\\n';\n            return;\n        }\n        while(!S.empty())S.pop();\n//\t\tfor(int i=1;i<=Nodecnt;++i)instack[i]=0;\n        for(int i=1;i<=Nodecnt;++i){\n            if(!Du[i]){\n                S.push(i);\n                F[i]=Val[i];\n            }\n        }\n        LL ans=0;\n        while(!S.empty()){\n            int x=S.top();\n            S.pop();\n            for(int i=first[x];i;i=e[i].nxt){\n                int v=e[i].v;\n                F[v]=max(F[v],F[x]+Val[v]);\n                Du[v]--;\n                if(!Du[v]){\n                    S.push(v);\n                }\n            }\n            ans=max(ans,F[x]);\n        }\n        cout<<ans<<'\\n';\n    }\n    void Clr(){\n        while(!S.empty())S.pop();\n        cnt=0;\n        for(int i=1;i<=Nodecnt;++i){\n            F[i]=0;\n            Val[i]=Len[i]=0;\n            dfn[i]=low[i]=instack[i]=0;\n            Du[i]=0;\n            first[i]=post[i]=posa[i]=posb[i]=0;\n        }\n        dfn_cnt=0;\n        scc=0;\n    }\n}G;\t\nbool GG=0;\nstruct Suffix_AutoMation{\t\n    struct Front_Star{\n        int u,v,nxt;\n    }e[N<<1];\n    int ecnt,dfn_cnt;\n    int first[N<<1];\n    int fa[N<<1][21];\n    void add(int u,int v){\n        ++ecnt;\n        e[ecnt].u=u;\n        e[ecnt].v=v;\n        e[ecnt].nxt=first[u];\n        first[u]=ecnt;\n    }\n    void DFS1(int u,int fat){\n        fa[u][0]=fat;\n        dfn[u]=++dfn_cnt;\n        for(int i=1;i<=20;++i)fa[u][i]=fa[fa[u][i-1]][i-1];\n        for(int i=first[u];i;i=e[i].nxt){\n            int v=e[i].v;\n            if(v==fat)continue;\n            DFS1(v,u);\n        }\n        low[u]=dfn_cnt;\n    }\n    //\n    struct Suffix_Node{\n        int vis[26];\n        int pre,step;\n    }SA[N<<2];\n    int cnt,last;\n    int pos[N<<1];\n    void Insert(char C,int Id){\n        int p=last;\n        int np=++cnt;\n        last=np;\n        SA[np].step=SA[p].step+1;\n        for(;!SA[p].vis[C-'a'];p=SA[p].pre)SA[p].vis[C-'a']=np;\n        if(!p){\n            SA[np].pre=1;\n        }\n        else{\n            int q=SA[p].vis[C-'a'];\n            if(SA[q].step==SA[p].step+1){\n                SA[np].pre=q;\n            }\n            else{\n                int nq=++cnt;\n                SA[nq].step=SA[p].step+1;\n                memcpy(SA[nq].vis,SA[q].vis,sizeof(SA[nq].vis));\n                SA[nq].pre=SA[q].pre;\n                SA[np].pre=SA[q].pre=nq;\n                for(;SA[p].vis[C-'a']==q;p=SA[p].pre)SA[p].vis[C-'a']=nq;\n            }\n        }\n        pos[Id]=np;\n    }\n    void Build(){\n        for(int i=1;i<=cnt;++i){\n            add(SA[i].pre,i);\n        }\n        DFS1(1,0);\n    }\n    int Jump(int x,int len){\n        for(int i=20;i>=0;--i){\n            if(fa[x][i]&&SA[fa[x][i]].step>=len){\n                x=fa[x][i];\n            }\n        }\n        return x;\n    }\n    void Solve(){\n        scanf(\"%s\",S+1);\n        int len=strlen(S+1);\n        cnt=last=1;\n        for(int i=len;i>=1;--i){\n            Insert(S[i],i);\n        }\n        Build();\n        int na;\n        scanf(\"%d\",&na);\n        for(int i=1;i<=na;++i){\n            int l,r;\n            scanf(\"%d%d\",&l,&r);\n            int now=Jump(pos[l],r-l+1);\n            posa[i]=now;\n            Val[i]=r-l+1;\n            mmp[++mmpcnt]=make_pair(dfn[now],Val[i]);\n        }\n        sort(mmp+1,mmp+1+mmpcnt);\n        for(int i=1;i<=na;++i){\n            Id[i]=i;\n        }\n        sort(Id+1,Id+1+na,cmpA);\n        Nodecnt=na;\n        G.Build(1,1,na);\n        int nb;\n        scanf(\"%d\",&nb);\n        for(int i=1;i<=nb;++i){\n            int l,r;\n            scanf(\"%d%d\",&l,&r);\n            int now=Jump(pos[l],r-l+1);\n            posb[i]=now;\n            Len[i]=r-l+1;\n        }\n        int tot;\n        scanf(\"%d\",&tot);\n        for(int i=1;i<=tot;++i){\n            int A,B;\n            scanf(\"%d%d\",&A,&B);\n            int L=lower_bound(mmp+1,mmp+1+mmpcnt,make_pair(dfn[posb[B]],Len[B]))-mmp;\n            int R=lower_bound(mmp+1,mmp+1+mmpcnt,make_pair(low[posb[B]]+1,0))-mmp-1;\n            if(L<=R){\n                G.Update(1,1,na,L,R,A);\n            }\n        }\n        G.Solve();\n    }\n    void Clr(){\n        for(int i=1;i<=cnt;++i)first[i]=0;\n        ecnt=0;\n        dfn_cnt=0;\n        for(int i=1;i<=cnt*2;++i){\n            for(int j=0;j<=20;++j){\n                fa[i][j]=0;\n            }\n            SA[i].pre=SA[i].step=0;\n            memset(SA[i].vis,0,sizeof(SA[i].vis));\n            pos[i]=0;\n            dfn[i]=low[i]=0;\n        }\n        mmpcnt=0;\n        cnt=last=1;\n    }\n}SAM;\nvoid Clr(){\n    SAM.Clr();\n    G.Clr();\n    Nodecnt=0;\n}\nint main(){\n//\tfreopen(\"P5284.in\",\"r\",stdin);\n//\tfreopen(\"string.out\",\"w\",stdout);\n//\tsystem(\"size.exe P5284.exe\");\n//\texit(0);\n    int Cas;\n    scanf(\"%d\",&Cas);\n    while(Cas--){\n        Clr();\n        SAM.Solve();\n    }\n    return 0;\n}\n```\n\n\n",
        "postTime": 1554709788,
        "uid": 28147,
        "name": "\u5289\u5b50\u98ba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5284 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898\u3011"
    },
    {
        "content": "\u601d\u535a\u9898\uff0c\u6a21\u62df\u9898\u610f\u5c31\u884c\u4e86\uff0c\u7136\u800c\u6bd2\u7624\u51fa\u9898\u4eba\u5361\u5e38\u6570\u3002\u3002\u3002\uff08\u591a\u6d4b\u4ec0\u4e48\u9b3c\u554a\uff09\n\n\u8003\u8651\u6a21\u62df\u9898\u610f\uff1a\n\n\u663e\u7136\u4f60\u662f\u8981\u628a $A_x \\to B_y$\uff0c\u5728\u8fd9 $m$ \u6761\u9650\u5236\u4e0b\n\n\u7136\u540e\u5982\u679c $B_x$ \u662f $A_y$ \u7684\u524d\u7f00\u7684\u8bdd\uff0c\u8fde\u63a5\u4e00\u6761 $B_x \\to A_y$ \u7684\u8fb9\n\n\u4e4b\u540e\u8dd1\u6700\u957f\u8def\u5c31\u662f\u7b54\u6848\u54af\uff0c\u6ce8\u610f\u5224\u65ad\u662f\u5426\u6709\u73af\n\n\u90a3\u4e48\u5982\u4f55\u901a\u8fc7 $100pts$ \u5462\uff1f\n\n\u6628\u5929\u521a\u521a\u5b66\u4e60\u4e86\u4e00\u6ce2 $sam$\uff0c\u90a3\u4e48\u9047\u5230\u8fd9\u79cd\u53c8\u662f\u5b50\u4e32\u53c8\u662f $lcp$ \u80af\u5b9a\u5c31\u662f $sam$ \u4e4b\u7c7b\u7684\u73a9\u610f\u5957\u4e00\u5957\u4e86\n\n\u8003\u8651\u5efa\u7acb\u53cd\u4e32\u7684 $parent$ \u6811\uff0c\u90a3\u4e48\u524d\u7f00\u548c\u4f18\u5316\u5efa\u56fe\u5c31\u597d\u4e86\n\n**\u6ce8\u610f\u5361\u5e38\uff01\uff01\uff01**\n\n**\u6ce8\u610f\u5361\u5e38\uff01\uff01\uff01**\n\n**\u6ce8\u610f\u5361\u5e38\uff01\uff01\uff01**",
        "postTime": 1554551620,
        "uid": 47111,
        "name": "nekko",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5284 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5b57\u7b26\u4e32\u95ee\u9898\u3011"
    }
]