[
    {
        "content": "~~\u5728\u8bb2\u9898\u4e4b\u524d\uff0c\u5148\u53d1\u4e00\u53d1\u7262\u9a9a\uff1a\u5f3a\u70c8\u8c34\u8d23\u51fa\u9898\u4eba\u8bed\u4e49\u4e0d\u6e05QAQ\uff01\uff01\uff01~~\n\n\u5728\u770b\u5230\u8fd9\u4e00\u9053\u9898\u7684\u4e00\u5f00\u59cb\uff0c\u6211\u5bf9\u7167\u6837\u4f8b\u548c\u9898\u76ee\u770b\u4e86\u8001\u4e45\uff0c\u4ee5\u4e3a\u51fa\u9898\u4eba\u7684\u610f\u601d\u662f\u9009\u62e9\u4e00\u6761\u6700\u77ed\u8def\uff0c\u4f7f\u5f97\u9664\u4e86\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\uff0c\u8fd9\u6761\u8def\u4e0a\u7684\u5176\u4ed6\u70b9\u7684\u5176\u4ed6\u51fa\u8fb9\u90fd\u8981\u88ab\u635f\u6bc1\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u662f\u4e00\u4e2a\u8d39\u7528\u8ba1\u7b97\u65b9\u5f0f\u6bd4\u8f83\u4e0e\u4f17\u4e0d\u540c\u7684\u6700\u5c0f\u8d39\u7528\u6700\u77ed\u8def\uff0c\u4e3a\u6b64\u6211\u8fd8\u63a8\u4e861\u4e2a\u5c0f\u65f6\u8d39\u7528\u8ba1\u7b97\u516c\u5f0f\u3002\u6ee1\u6000\u4fe1\u5fc3\u7684\u4ea4\u4e0a\u53bb\uff0c\u7ed3\u679c......20\u5206?!\u4ec5\u8fc7\u4e86\u6837\u4f8b\uff01\uff01\uff01\n\n\u628a\u6570\u636e\u70b92\u4e0b\u4e0b\u6765\u4e00\u770b\uff1a\u539f\u6765\u4e0d\u662f\u8def\u5f84\u4e0a\u7684\u7ecf\u8fc7\u70b9\u7684\u51fa\u8fb9\uff0c\u800c\u662f\u6240\u6709\u975e\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u90fd\u8981\u6c42\u635f\u6bc1\uff01\uff01\uff01\n\n\u4e8e\u662f\u8fd9\u5c31\u53d8\u6210\u4e00\u4e2a\u6781\u5176\u5bb9\u6613\u7684\u6700\u5c0f\u8d39\u7528\u6700\u77ed\u8def\u95ee\u9898\u4e86\u3002\u5148\u628a\u6240\u6709\u672a\u635f\u6bc1\u7684\u8fb9\u7684\u6570\u91cf\u7edf\u8ba1\u4e0b\u6765\uff0c\u8bb0\u4e00\u4e2aans\uff0c\u63a5\u7740\u628a\u635f\u6bc1\u8fb9(0)\u7684\u8d39\u7528\u8bbe\u4e3a1\uff08\u5bb9\u6613\u7406\u89e3\uff09\uff0c\u628a\u672a\u635f\u6bc1\u8fb9(1)\u7684\u8d39\u7528\u8bbe\u4e3a-1\uff08\u770b\u4e0b\u53bb\u5c31\u7406\u89e3\u4e86\uff09\uff0c\u6700\u7ec8\u7b54\u6848\u5c31\u662f$ans+cost[t]$;\n\n\u63a5\u4e0b\u6765\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read(){\n\tint x=0;\n\tchar c=getchar();\n\twhile(!isdigit(c))c=getchar();\n\twhile(isdigit(c))x=x*10+c-48,c=getchar();\n\treturn x;\n}\nconst int N=1e5+5,INF=1061109567;\nstruct edge{\n\tint next,to,opt;\n}e[N];\nint n,m,tot,ans;\nint dis[N],head[N],cost[N];\nbool vis[N];\nvoid add(int x,int y,int opt){\n\te[++tot]=(edge){head[x],y,opt};\n\thead[x]=tot;\n\te[++tot]=(edge){head[y],x,opt};\n\thead[y]=tot;\n}\nvoid Spfa(){\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(cost,0x3f,sizeof(cost));\n\tqueue<int>q;\n\tq.push(1);\n\tdis[1]=0;\n\tvis[n]=true;\n\tcost[1]=0;\n\twhile(!q.empty()){\n\t\tint now=q.front();\n\t\tq.pop();\n\t\tvis[now]=false;\n\t\tfor(int i=head[now],nxt;i;i=e[i].next){\n\t\t\tif(dis[nxt=e[i].to]>dis[now]+1){\n\t\t\t\tdis[nxt]=dis[now]+1;\n\t\t\t\tif(e[i].opt)cost[nxt]=cost[now]-1;\n\t\t\t\telse cost[nxt]=cost[now]+1;\n\t\t\t\tif(!vis[nxt])vis[nxt]=true,q.push(nxt);\n\t\t\t}\n\t\t\telse if(dis[nxt]==dis[now]+1){\n\t\t\t\tif(e[i].opt){\n\t\t\t\t\tif(cost[nxt]>cost[now]-1){\n\t\t\t\t\t\tcost[nxt]=cost[now]-1;\n\t\t\t\t\t\tif(!vis[nxt])vis[nxt]=true,q.push(nxt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(cost[nxt]>cost[now]+1){\n\t\t\t\t\t\tcost[nxt]=cost[now]+1;\n\t\t\t\t\t\tif(!vis[nxt])vis[nxt]=true,q.push(nxt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tn=read();m=read();\n\tint a,b,c;\n\tfor(int i=1;i<=m;++i){\n\t\ta=read();b=read();c=read();\n\t\tadd(a,b,c);\n\t\tans+=c;\n\t}\n\tSpfa();\n\tprintf(\"%d\",ans+cost[n]);\n\treturn 0;\n}\n```\n\u6570\u636e\u6bd4\u8f83\u6c34\uff0c\u8dd1\u4e2aSPFA\u53ea\u898115ms...",
        "postTime": 1565619267,
        "uid": 179927,
        "name": "\u5929\u5357\u6708",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3753 \u3010\u56fd\u4e8b\u8bbf\u95ee\u3011"
    },
    {
        "content": "\u6700\u77ed\u8def\u597d\u9898\uff0c\u5177\u4f53\u601d\u8def\u5c31\u662f\u786e\u4fdd\u8ddd\u79bb\u6700\u5c0f\u7684\u524d\u63d0\u4e0b\u8ba9\u82b1\u8d39\u5c3d\u53ef\u80fd\u5c0f\u3002\u6211\u4eec\u5728\u6c42\u6700\u77ed\u8def\u65f6\u6ca1\u6709\u5fc5\u8981\u5173\u5fc3\u8fd9\u6761\u8fb9\u662f $0$ \u6216 $1$ \uff0c\u5148\u8dd1\u51fa\u4e00\u4e2a\u6700\u77ed\u8def\u5f84\uff0c\u4e0d\u7ba1\u4ef7\u503c\u662f\u591a\u5c11\u3002\u56e0\u4e3a\u7b54\u6848\u6210\u7acb\u7684\u524d\u63d0\u6761\u4ef6\u662f\u8d70\u7684\u662f\u6700\u77ed\u8def\u3002\u7136\u540e\u5728spfa\u5185\u66f4\u65b0\u4ef7\u503c\u3002\u5982\u679c\u6211\u4eec\u5728\u5b9e\u9645\u8def\u5f84\u4e2d\u8d70\u8fc7\u4e86\u4e00\u6761 $0$ \u8fb9\uff0c\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u9700\u8981\u4fee\u5b83\u4e4b\u540e\u624d\u80fd\u8d70\uff0c\u6240\u4ee5\u8fd9\u6761\u8fb9\u4ef7\u503c\u8bbe\u4e3a $1$ \uff0c\u800c\u5982\u679c\u5b9e\u9645\u8def\u5f84\u4e2d\u8d70\u8fc7\u4e86\u4e00\u6761 $1$ \u8fb9\uff0c\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u4e0d\u7528\u4fee\u5b83\u5c31\u53ef\u4ee5\u8d70\u5e76\u4e14\u5982\u679c\u4e0d\u8d70\u5b83\u5c31\u9700\u8981\u70b8\u6bc1\uff0c\u90a3\u4e48\u8fb9\u6743\u5c31\u8bbe\u4e3a $-1$ \u3002\u7531\u4e8e\u6700\u540e\u6240\u6709\u4e0d\u5728\u8def\u5f84\u5185\u7684 $1$ \u8fb9\u9700\u8981\u88ab\u70b8\u6bc1\uff0c\u5148\u7edf\u8ba1\u51fa1\u8fb9\u6709 $tot$ \u4e2a\uff0c\u8fd9\u6837 $val[n]+tot$ \u5c31\u662f\u6700\u7ec8\u7b54\u6848\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,idx,cnt;\nint dis[1010],val[1010],vis[1010],head[1010];//dis\u4e3a\u8ddd\u79bb\u6570\u7ec4\uff0cval\u4e3a\u4ef7\u503c\u6570\u7ec4 \nstruct node{\n\tint nxt,to,w;\n}edge[1000010];\nvoid add(int u,int v,int w)\n{\n\tedge[++idx].nxt=head[u];\n\tedge[idx].to=v;\n\tif(w==1)\n\tedge[idx].w=-1;\n\tif(w==0)\n\tedge[idx].w=1;\n\thead[u]=idx;\n}\nvoid spfa(int s)\n{\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(val,0x3f,sizeof(val));\n\tqueue<int> q;\n\tq.push(s);\n\tvis[s]=1;\n\tdis[s]=0;//\n\tval[s]=0;//\n\twhile(q.size())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tvis[x]=0;\n\t\tfor(int i=head[x];i;i=edge[i].nxt)\n\t\t{\n\t\t\tint y=edge[i].to;\n\t\t\tif(dis[x]+1<dis[y])\n\t\t\t{\n\t\t\t\tdis[y]=dis[x]+1;//\u8ddd\u79bb\u53ef\u4ee5\u66f4\u65b0\uff0c\u4ef7\u503c\u4e0d\u7ba1\u591a\u5927\u90fd\u8981\u66f4\u65b0 \n\t\t\t\tval[y]=val[x]+edge[i].w;\n\t\t\t\tif(!vis[y])\n\t\t\t\t{\n\t\t\t\t\tq.push(y);\n\t\t\t\t\tvis[y]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(dis[x]+1==dis[y])//\u6700\u77ed\u8def\u76f8\u540c\u65f6\u6bd4\u8f83\u4ef7\u503c\n\t\t\t{\n\t\t\t\tif(val[x]+edge[i].w<val[y])\n\t\t\t\tval[y]=val[x]+edge[i].w;\n\t\t\t} \n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tif(w==1)\n\t\tcnt++;\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\tspfa(1);\n\tcout<<val[n]+cnt;\n\treturn 0;\n} \n```",
        "postTime": 1602760042,
        "uid": 250699,
        "name": "Herkaii",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3753 \u3010\u56fd\u4e8b\u8bbf\u95ee\u3011"
    },
    {
        "content": "~~\u9898\u89e3\u533a\u751a\u81f3\u6ca1\u6709\u4eba\u613f\u610f\u5199\u5e7f\u641c\u5c31\u79bb\u8c31~~\n\n\u5e7f\u641c\u677f\u5b50\uff1f\uff1f\uff1f\n\n\u53cd\u6b63\u8fd9\u9898\u5c31\u662f\u5f88\u79bb\u8c31\u3002\n\n\u9898\u610f\u6709\u4e00\u4e2a\u5751\u70b9\u5c31\u662f\u9664\u4e86\u6700\u77ed\u8def\u4e0a\u7684\u70b9\u90fd\u8981\u6bc1\u6389\uff0c\u6211\u5f00\u59cb\u7406\u89e3\u9519\u4e86\uff08\u88ab\u9898\u76ee\u96be\u5ea6\u8ff7\u60d1\u4e86\uff09\u3002\n\n\u672c\u9898\u7684\u9633\u95f4\u7ffb\u8bd1\uff1a\u7ed9\u4f60\u4e00\u526f\u65e0\u5411\u56fe\uff0c\u8fb9\u7684\u8fb9\u6743\u90fd\u662f $1$\uff0c\u8fb9\u6709 $1$ \u8fb9\u548c $0$ \u8fb9\u4e24\u79cd\uff08\u548c\u8fb9\u6743\u65e0\u5173\uff09\uff0c\u6c42\u70b9 $1$ \u5230\u70b9 $n$ \u7684\u6700\u77ed\u8def\u7684\u540c\u65f6\u6ee1\u8db3\u8def\u4e0a $1$ \u8fb9\u5c3d\u91cf\u591a\u3002\n\n\u5982\u679c\u4f60\u719f\u7ec3\u638c\u63e1\u5e7f\u641c\u4f60\u53ef\u4ee5\u5199\u51fa\u5982\u4e0b $O(m)$ \u4ee3\u7801\uff1a\n\n```cpp\nwhile(!q.empty()){\n\t\tint x = q.front();\n\t\tq.pop();\n\t\tfor(int i = 0;i < e[x].size();i++){\n\t\t\tnode tmp = e[x][i];\n\t\t\tif(dis[tmp.to] > dis[x] + 1){\n\t\t\t\tdis[tmp.to] = dis[x] + 1;\n\t\t\t\tq.push(tmp.to);\n\t\t\t}\n\t\t}\n\t}\n```\n\n\uff08Ps\uff1a\u56e0\u4e3a\u8fb9\u6743\u90fd\u4e3a $1$ \u6240\u4ee5\u8fd9\u4e48\u505a\u662f $O(m)$ \u7684\u3002\uff09\n\n\u7136\u540e\u548c\u8fd9\u9898\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\n\n\u4f60\u4f1a\u53d1\u73b0\uff0c\u6211\u4eec\u4ee4 $ans$ \u4e3a $1$ \u8fb9\u7684\u603b\u6570\u3002\u5f53\u6211\u4eec\u4e0d\u9700\u8981\u8d70\u65f6\uff0c\u7b54\u6848\u4e3a $ans$\uff0c\u6bcf\u8d70\u4e00\u6761 $1$ \u8fb9\u7b54\u6848 $-1$\uff0c\u6bcf\u8d70\u4e00\u6761 $0$ \u8fb9\u7b54\u6848 $+1$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u4ee4 $1$ \u8fb9\u4ef7\u503c\u4e3a $-1$\uff0c$0$ \u8fb9\u4ef7\u503c\u4e3a $1$\u3002\n\n$num[i]$ \u8868\u793a\u4ece $1$ \u5230 $i$ \u6700\u77ed\u8def\u7684\u540c\u65f6\u6700\u5c0f\u4ef7\u503c\uff0c\u6700\u540e\u7b54\u6848\u5c31\u662f $ans + num[n]$\u3002\n\n\u8fd9\u9898\u7406\u89e3\u540e\u4e5f\u4e0d\u96be\uff0c\u96be\u70b9\u5728\u9634\u95f4\u9898\u610f\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\u5427\uff1a\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int N = 1005; \nstruct node{\n\tint to,p;\n\tnode(int _to = 0,int _p = 0):to(_to),p(_p){}\n};\nvector<node>e[N];\nint n,m,ans,num[N],dis[N];\nqueue<int>q;\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i = 1,x,y,z;i <= m;i++){\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tans += z;\n\t\tz = z?-1:1;\n\t\te[x].push_back(node(y,z));\n\t\te[y].push_back(node(x,z));\n\t}\n\tfor(int i = 1;i <= n;i++) num[i] = 1e9,dis[i] = 1e9;\n\tnum[1] = 0,dis[1] = 0;\n\tq.push(1);\n\twhile(!q.empty()){\n\t\tint x = q.front();\n\t\tq.pop();\n\t\tfor(int i = 0;i < e[x].size();i++){\n\t\t\tnode tmp = e[x][i];\n\t\t\tif(dis[tmp.to] > dis[x] + 1){\n\t\t\t\tdis[tmp.to] = dis[x] + 1;\n\t\t\t\tnum[tmp.to] = num[x] + tmp.p;\n\t\t\t\tq.push(tmp.to);\n\t\t\t}\n\t\t\tif(dis[tmp.to] == dis[x] + 1)\n\t\t\t\tif(num[tmp.to] > num[x] + tmp.p){\n\t\t\t\t\tnum[tmp.to] = num[x] + tmp.p;\n\t\t\t\t\tq.push(tmp.to);\n\t\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans + num[n]);\n\treturn 0;\n}\n```\n",
        "postTime": 1633440580,
        "uid": 239433,
        "name": "WZKQWQ",
        "ccfLevel": 7,
        "title": "P3753 \u56fd\u4e8b\u8bbf\u95ee"
    },
    {
        "content": "[\u70b9\u6211\u4f20\u9001\u81f3\u539f\u9898](https://www.luogu.com.cn/problem/P3753)\n\n\u9898\u9762\u7ffb\u8bd1\uff1a\u6c42\u6700\u77ed\u8def\u5f84\u4e2d\u4e0d\u53ef\u901a\u8fc7\u7684\u8def\u5f84\u4e2a\u6570\u52a0\u4e0a\u5176\u4ed6\u8def\u5f84\u7684\u4e2a\u6570\u3002\n\n\u770b\u5927\u4f6c\u4eec\u90fd\u662f\u8dd1\u7684 spfa\uff0c\u8eab\u4e3a\u849f\u84bb\u7684\u6211\u53ea\u4f1a\u5199 Dijkstra\uff0c\u4e8e\u662f\u6211\u5c31\u6765\u4e00\u53d1 Dijkstra \u7684\u9898\u89e3\u3002\n\nDijkstra \u662f\u57fa\u4e8e\u8d2a\u5fc3\u5b9e\u73b0\u7684\u6700\u77ed\u8def\u4ee3\u7801\uff08\u8fd9\u9053\u9898\u6ca1\u8fb9\u6743\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8d2a\u5fc3\uff09\uff0c\u56e0\u4e3a\u8fd9\u9053\u9898\u662f\u7a20\u5bc6\u56fe\uff0c\u6240\u4ee5 Dijkstra \u5728\u8fd9\u9053\u9898\u7684\u901f\u5ea6\u5e94\u8be5\u6bd4 SPFA \u597d\u4e00\u70b9\uff0c\u5982\u679c\u8fd8\u4e0d\u77e5\u9053 Dijkstra \u600e\u4e48\u5199\uff0c\u53ef\u4ee5\u70b9\u4e0b\u65b9\u4f20\u9001\u81f3\u535a\u5ba2\u5b66\u5b66\u3002\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a [\u70b9\u6211](https://blog.csdn.net/qq_39521554/article/details/79333690?ops_request_misc=&request_id=&biz_id=102&utm_term=dijkstra%E7%AE%97%E6%B3%95&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-7-79333690.first_rank_v2_pc_rank_v29)\n\n\u521d\u6b21\u63d0\u4ea4\uff0c~~\u83b7\u5f97\u4e8620\u5206\u7684\u597d\u6210\u7ee9~~\uff0c\u4e00\u770b\uff0c\u53d1\u73b0\u6ca1\u5efa\u53cc\u5411\u8fb9\uff0c\u4e8e\u662f\u5efa\u4e86\u53cc\u5411\u8fb9\u3002\n```\nfor(i=1;i<=m;i++){\n  ll j,k,l;\n  scanf(\"%lld%lld%lld\",&j,&k,&l);\n  if(j==k) continue;\n  Add_edge(j,k,l);\n  Add_edge(k,j,l);\n  if(l==0) orz++; \n}\n```\n~~\u83b7\u5f97\u4e8640\u5206\u7684\u597d\u6210\u7ee9~~\n\n\u4e8e\u662f\u6211\u53c8\u5f00\u59cb DeBug \u7684\u65c5\u9014\u3002\n\n\u7ecf\u8fc7\u6211\u957f\u8fbe $10$ \u5206\u949f\u7684\u601d\u8003\uff0c\u6211\u53d1\u73b0\u53ef\u4ee5\u5f00\u59cb\u7528 $ans$ \u8bb0\u5f55\u4e0b\u53ef\u901a\u8fc7\u7684\u8def\uff0c\u7136\u540e\u7528 $pre$ \u6570\u7ec4\u8bb0\u5f55\u4e86\u6700\u77ed\u8def\u4e0a\u4e0d\u53ef\u901a\u8fc7\u7684\u8def\u7684\u4e2a\u6570\uff0c\u5c06 $pre_n$ \u52a0\u4e0a $ans$ \u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002\n\n\u63d0\u4ea4\u540e\uff0c\u53d1\u73b0\u53ea\u6709 $80$ \u5206\uff0c\u6211\u53c8\u4ed4\u7ec6\u601d\u8003\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u8fd9\u4e2a\u601d\u8def\u5e76\u4e0d\u5b8c\u5168\u5bf9\uff0c\u6211\u8bb0\u5f55\u4e86\u6240\u6709\u53ef\u901a\u8fc7\u7684\u8def\uff0c\u4f46\u6709\u4e00\u4e9b\u53ef\u901a\u8fc7\u7684\u8def\u662f\u5728\u6700\u77ed\u8def\u4e0a\u7684\uff0c\u5e76\u4e0d\u9700\u8981\u6bc1\u6389\uff0c\u6240\u4ee5\u6211\u5728\u7edf\u8ba1 $pre$ \u6570\u7ec4\u65f6\uff0c\u9047\u5230\u53ef\u901a\u8fc7\u7684\u8def\uff0c\u5c31\u51cf\u6389\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6c42\u51fa\u771f\u6b63\u7684\u7b54\u6848\u3002\n\nAC \u4ee3\u7801\u5982\u4e0b\uff0c\u4ec5\u4f9b\u53c2\u8003\uff1a\n```\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nstruct node{\n  ll e,v,next;\n}edge[1005];\nll n,m,u,dis[1005],head[1005],cnt=0,vis[1005],ans,fuckccf,pre[1005];\nqueue<int>q;\nvoid Add_edge(ll j,ll k,ll l){\n  edge[++cnt].e=k;\n  edge[cnt].v=l;\n  edge[cnt].next=head[j];\n  head[j]=cnt;\n}//\u9886\u63a5\u94fe\u8868\u5b58\u56fe\nvoid Dij(){\n  q.push(1);\n  ll j,x=1;\n  dis[1]=0;\n  pre[1]=0;\n  while (!q.empty()){\n    int x=q.front();\n    q.pop();\n    if(vis[x]) continue;//\u5982\u679c\u8fb9\u62d3\u5c55\u8fc7\uff0c\u5c31\u4e0d\u62d3\u5c55\n    vis[x]=1;\n    for(j=head[x];j;j=edge[j].next){\n      ll w=edge[j].e;\n      if(dis[w]>dis[x]+1){\n        dis[w]=dis[x]+1;\n        if(edge[j].v==0) pre[w]=pre[x]+1;//\u5982\u679c\u8fb9\u4e0d\u5b58\u5728\uff0c\u5c31\u8981\u52a0\u8fb9\n        else pre[w]=pre[x]-1;//\u5982\u679c\u8fb9\u5b58\u5728\uff0c\u5c31\u51cf\u5c11\u6539\u53d8\u6b21\u6570\n        q.push(w);\n      }\n    }\n  }\n}//Dijkstra\u6c42\u6700\u77ed\u8def\nint main(){\n  ll i;\n  scanf(\"%lld%lld\",&n,&m);\n  for(i=0;i<=n;i++) dis[i]=1e17;\n  for(i=1;i<=m;i++){\n    ll j,k,l;\n    scanf(\"%lld%lld%lld\",&j,&k,&l);\n    Add_edge(j,k,l);\n    Add_edge(k,j,l);\n    ans+=l;//\u7edf\u8ba1\u53ef\u901a\u8fc7\u7684\u8def\u5f84\u7684\u6570\u91cf\n  }//\u521d\u59cb\u5b58\u56fe\n  Dij(); \n  printf(\"%d\\n\",ans+pre[n]);//\u8f93\u51fa\u66f4\u6539\u6b21\u6570\u3002\n  return 0;\n}\n```\n",
        "postTime": 1631196885,
        "uid": 470194,
        "name": "VectorChange",
        "ccfLevel": 0,
        "title": "P3753\u9898\u89e3"
    }
]