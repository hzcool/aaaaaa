[
    {
        "content": "**\u770b\u5927\u5bb6\u90fd\u662fN^4\u6216N\u00b3\u7b97\u6cd5\uff0cN\u00b2\u7b97\u6cd5\u8fd8\u6ca1\u6709\uff0c~~\u8d76\u7d27\u6c34\u4e00\u53d1~~**\n\n\u57fa\u672c\u601d\u8def:\n\n\u628a\u6240\u6709\u4e32\u8fde\u63a5\u8d77\u6765\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u4e32\u7684\u5c3e\u540e\u4f4d\u7f6e\uff0c\n\n\u8bbef[k][i]\u8868\u793a\u73b0\u5728\u5728\u5904\u7406\u7f29\u5199\u7684\u7b2cK\u4e2a\u5b57\u7b26\uff0c\u5728\u5927\u5b57\u7b26\u4e32\u4e2d\u7b2cI\u4e2a\u4f4d\u7f6e\u5bf9\u524d\u9762\u5b57\u7b26\u7684\u603b\u8d21\u732e\u6570\uff0c\u5219f[k][i]=\u03a3f[k-1][j]\uff0c\n\n\u5176\u4e2dj\u8868\u793a\u6ee1\u8db3\u6761\u4ef6\u7684\u524d\u4e00\u4e2a\u7f29\u5199\u5b57\u7b26\u3002\u5176\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684\u5b9a\u4e49\u4e3a\u201c\u65e0\u7a7a\u7f3a\u5355\u8bcd\uff0c\u4e14\u662f\u524d\u4e00\u4e2a\u5b57\u6bcd\u201d\u3002\u5219\u7b54\u6848\u4e3a\u03a3f[\u6700\u540e\u4e00\u4e2a\u5b57\u7b26][j],(1<=j<=n)\u3002\n\n\u4e3a\u907f\u514d\u51fa\u73b0\u540c\u4e00\u5b57\u6bcd\u51fa\u73b0\u4f4d\u7f6e\u7684\u4e0d\u540c\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4\u8fdb\u884c\u6807\u8bb0\u5373\u53ef\u3002\n\n###\u6807\u8bb0\u8981\u4e00\u6b21\u6253\u5b8c\u624d\u80fd\u66f4\u65b0\uff01\uff01\uff01\n\n```cpp\n#include<bits/stdc++.h>\n#define RG register\nusing namespace std;\n\nint n;\nchar a[110][200];//\u65e0\u6548\u5355\u8bcd\nchar c1[200];\nchar c[200];\nchar all[200][200];//\u6709\u6548\u5355\u8bcd\nint ma[26][200];//\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6709\u6548\u4f4d\u7f6e\nint tag[200];\nint tag1[200];//\u4e24\u4e2a\u6807\u8bb0\nint cut[200];//\u5355\u8bcd\u7684\u5c3e\u540e\u4f4d\u7f6e\nint sum[26];//\u51fa\u73b0\u7684\u6b21\u6570\nint f[200][200];//dp\u6570\u7ec4\n\nint main()\n{\n    scanf(\"%d\\n\",&n);\n    for(RG int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",a[i]);\n    }\n    scanf(\"%s\",c1);\n    while(1)\n    {\n        RG int i_1_1=1;\n        strcpy(c,c1);\n        if(strcmp(c,\"LAST\")==0)\n        {\n            scanf(\"%s\",all[i_1_1++]);\n            if(strcmp(all[i_1_1-1],\"CASE\")==0) break;\n        }\n        while(cin>>all[i_1_1++])\n        {\n            RG int j=0;\n            int len=strlen(all[i_1_1-1]);\n            while(all[i_1_1-1][j]<'a'&&j<len) j++;\n            if(j>=len)\n            {\n                strcpy(c1,all[i_1_1-1]);\n                i_1_1--;\n                break;\n            }\n            else\n            {\n                for(RG int i=1;i<=n;i++)\n                {\n                    if(strcmp(a[i],all[i_1_1-1])==0)\n                    {\n                        i_1_1--;\n                        break;\n                    }\n                }\n            }\n        }\n        i_1_1--;\n        printf(\"%s \",c);\n        int len=strlen(c);\n        for(RG int i=0;i<len;i++)\n        {\n            c[i]=c[i]+32;\n        }\n        //\u8bfb\u5165\n        if(len<i_1_1)//\u5206\u7c7b\u8ba8\u8bba\n        {\n            puts(\"is not a valid abbreviation\");\n        }\n        else if(len==i_1_1)\n        {\n            int ans=1;\n            for(RG int i=0;i<len;i++)\n            {\n                int len2=strlen(all[i+1]);\n                RG int tmp=0;\n                for(RG int j=0;j<len2;j++)\n                {\n                    if(all[i+1][j]==c[i]) tmp++;\n                }\n                if(tmp) ans*=tmp;\n                else\n                {\n                    puts(\"is not a valid abbreviation\");\n                    break;\n                }\n            }\n            printf(\"can be formed in %d ways\\n\",ans);\n        }\n        else //\u91cd\u70b9\n        {\n            memset(sum,0,sizeof(sum));\n            memset(f,0,sizeof(f));\n            memset(tag,0,sizeof(tag));\n            memset(cut,0,sizeof(cut));\n            memset(ma,0,sizeof(ma));\n            int cz=strlen(all[1]);\n            for(int i=2;i<=i_1_1;i++)\n            {\n                 strcpy(all[1]+cz,all[i]);\n                 cut[i-1]=cz;\n                 cz=strlen(all[1]);\n            }\n            //\u8fde\u4e32\n            cut[i_1_1]=cz;\n            for(int i=0;i<cz;i++)\n            {\n                int j=all[1][i]-'a';\n                ma[j][++sum[j]]=i;\n            }\n            //\u8bb0\u5b57\u6bcd\u4f4d\u7f6e\n            for(int k=0;k<len;k++)\n            {\n                int id=c[k]-'a';\n                int ci=min(k+1,i_1_1);\n                int ti=1;\n                for(int i=0;i<cz;i++)\n                {\n                    tag1[i]=tag[i];\n                }//\u5907\u4efd\n                for(int i=1;i<=sum[id]&&ma[id][i]<cut[ci];i++)\n                {\n                    while(ma[id][i]>=cut[ti]) ti++;\n                    if(i_1_1-ti>len-k-1) continue;\n                    if(k==0)\n                    {\n                        tag1[ma[id][i]]=0;//\u6807\u8bb0\n                        f[k][i]=1;//\u521d\u59cb\u503c\n                    }\n                    else\n                    {\n                        int t=c[k-1]-'a';\n                        for(int j=1;j<=sum[t];j++)\n                        {\n                            if(ma[t][j]<ma[id][i]&&ma[t][j]>=cut[ti-2]&&tag[ma[t][j]]==k-1)\n                            {\n                                f[k][i]+=f[k-1][j];//\u8f6c\u79fb\n                                tag1[ma[id][i]]=k;//\u6807\u8bb0\u00d72\n                            }\n                        }\n                    }\n                }\n                for(int i=0;i<cz;i++)\n                {\n                    tag[i]=tag1[i];//\u5907\u4efd\n                }\n            }\n            int ans=0;\n            for(int i=1;i<=sum[c[len-1]-'a'];i++)\n            {\n                ans+=f[len-1][i];//\u6c42\u548c\n            }\n            if(ans)\n            {\n                printf(\"can be formed in %d ways\\n\",ans);\n            }\n            else puts(\"is not a valid abbreviation\");\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1506167981,
        "uid": 46800,
        "name": "xgzc",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1624 \u3010\u5355\u8bcd\u7f29\u5199\u3011"
    },
    {
        "content": "\u849f\u84bb\u4e5f\u80fd\u5199\u51fa\u6765\u7684AC\u4ee3\u7801\uff01\u8fd9\u9898\u597d\u5751\u554aQAQ\uff0c\u6211\u5199\u7684\u65f6\u5019\u8f93\u5165\u5199\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff0ctoo many or too few lines\u53c8\u8c03\u4e86\u597d\u4e45\u597d\u4e45\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u8fd8\u662f\u6284\u7684\u4e66\u3002\n\n\n\u8bbe\u8ba1\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u7684\u65f6\u5019\uff0c\u5982\u679c\u662f\u6839\u636e\u5df2\u77e5\u6c42\u5f53\u4e0b\u4f1a\u6bd4\u8f83\u96be\u8bbe\u8ba1\uff0c\u5982\u679c\u6839\u636e\u5df2\u77e5\u66f4\u65b0\u672a\u77e5\u5c31\u76f8\u5bf9\u597d\u8bbe\u8ba1\u4e00\u4e9b\u3002\u6211\u4eec\u62ff$\\ dp[i][j][k]$\n\n\u8868\u793a\u505a\u5230\u7f29\u5199\u4e2d\u7684\u524d$\\ i$\u4f4d\uff0c\u5355\u8bcd\u4e2d\u7684\u524d$\\ j-1$\u4e2a\u5355\u8bcd\u5916\u5e26\u7b2c$\\ j$\u4e2a\u5355\u8bcd\u7684\u524d$\\ k$\u4f4d\u7684\u5408\u6cd5\u7684\u65b9\u6848\u6570\uff0c\u5176\u4e2d\u7f29\u5199\u4e2d\u7684\u7b2c$\\ i$\u4f4d\u4e0e\u7b2c$\\ j$\u4e2a\u5355\u8bcd\u7684\u7b2c$\\ k$\u4f4d\u5339\u914d\u3002\n\n\n\u663e\u7136\u4ece$\\ dp[i][j][k]$\u53ef\u4ee5\u505a\u51fa\u4e24\u79cd\u8f6c\u79fb\uff1a\n\n\n- \u8f6c\u79fb\u5230\u8fd9\u4e2a\u5355\u8bcd\u7684\u7b2c$\\ l$\u4f4d\uff0c\u5176\u4e2d$\\ l>k$\uff0c\u4e14\u7b2c$\\ j$\u4e2a\u5355\u8bcd\u7684\u7b2c$\\ l$\u4f4d\u662f\u4e0e\u7f29\u5199\u7684\u7b2c$\\ i+1$\u4f4d\u5339\u914d\u7684\u3002\u5373`dp[i+1][j][l]+=dp[i][j][k];`\n\n\n- \u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u5355\u8bcd\u7684\u7b2c$\\ l$\u4f4d\uff0c\u5176\u4e2d\u7b2c$\\ j+1$\u4e2a\u5355\u8bcd\u7684\u7b2c$\\ l$\u4f4d\u662f\u4e0e\u7f29\u5199\u7684\u7b2c$\\ i+1$\u4f4d\u5339\u914d\u7684\u3002\u5373`dp[i+1][j+1][k]+=dp[i][j][k];`\n\n\n\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u5408\u6cd5\u72b6\u6001\u90fd\u7531\u5408\u6cd5\u72b6\u6001\u8f6c\u79fb\u800c\u6765\u3002\n\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\nusing namespace std;\nstruct Words{\n    int len;\n    char a[155];\n}words[155], useless[105], e[2];\nint n, cnt, dp[155][155][155], sum;\nchar ch[250];\nbool deng(Words &x, Words &y){\n    if(x.len!=y.len)    return false;\n    for(int i=1; i<=x.len; i++)\n        if(x.a[i]!=y.a[i])    return false;\n    return true;\n}//\u5224\u65ad\u4e24\u4e2a\u5355\u8bcd\u662f\u5426\u76f8\u7b49\nbool work(){\n    cnt = 0;//\u8868\u793a\u5355\u8bcd\u6570\n    char c=getchar();\n    int len=0;\n    while (!((c>='a'&&c<='z') || (c>='A'&&c<='Z') || c==' ')) c=getchar();\n    while ((c>='a'&&c<='z') || (c>='A'&&c<='Z') || c==' '){\n        ch[len++] = c;\n        c = getchar();\n    }\n    memset(words[0].a, 0, sizeof(words[0].a));\n    words[0].len = 0;\n    for(int i=0; i<len; i++){\n        if((ch[i]>='a' && ch[i]<='z') || (ch[i]>='A' && ch[i]<='Z'))\n            words[cnt].a[++words[cnt].len] = ch[i];\n        else{\n            for(int i=1; i<=n; i++)\n                if(deng(words[cnt], useless[i])){\n                    cnt--;\n                    break;\n                }\n            cnt++;\n            words[cnt].len = 0;\n            memset(words[cnt].a, 0, sizeof(words[cnt].a));\n        }\n    }\n    for(int i=1; i<=n; i++)\n        if(deng(words[cnt], useless[i])){\n            cnt--;\n            break;\n        }\n    //\u5bf9\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u5408\u6cd5\u6027\u8fdb\u884c\u68c0\u9a8c\n    if(deng(words[0], e[0]) && deng(words[1], e[1]))    return false;\n    memset(dp, 0, sizeof(dp));\n    char check[155];\n    int checklen=words[0].len;\n    for(int i=1; i<=words[0].len; i++)\n        check[i] = words[0].a[i] - 'A' + 'a';\n    dp[0][0][1] = 1;\n    for(int i=0; i<checklen; i++)\n        for(int j=0; j<=cnt; j++)\n            for(int k=1; k<=words[j].len; k++)\n                if(dp[i][j][k]){//\u5c0f\u5c0f\u4f18\u5316\n                    for(int l=k+1; l<=words[j].len; l++)\n                        if(words[j].a[l]==check[i+1])\n                            dp[i+1][j][l] += dp[i][j][k];\n                    if(j<cnt)//\u8981\u662fj=cnt\u5c31\u80af\u5b9a\u4e0d\u7528\u518d\u5f80\u4e0b\u4e00\u4e2a\u5355\u8bcd\u6269\u5c55\u4e86\uff0c\u56e0\u4e3a\u4e0b\u4e00\u4e2a\u5355\u8bcd\u90fd\u6ca1\u4e86\u2026\u2026\n                        for(int l=1; l<=words[j+1].len; l++)\n                            if(words[j+1].a[l]==check[i+1])\n                                dp[i+1][j+1][l] += dp[i][j][k];\n                }\n    sum = 0;\n    for(int i=1; i<=words[cnt].len; i++)\n        if(check[checklen]==words[cnt].a[i])\n            sum += dp[checklen][cnt][i];//\u7edf\u8ba1\u7b54\u6848\n    if(sum)    printf(\"%s can be formed in %d ways\\n\", words[0].a+1, sum);\n    else    printf(\"%s is not a valid abbreviation\\n\", words[0].a+1);\n    return true;\n}\nint main(){\n    cin>>n;\n    e[0].a[1] = 'L';e[0].a[2] = 'A';e[0].a[3] = 'S';e[0].a[4] = 'T';\n    e[1].a[1] = 'C';e[1].a[2] = 'A';e[1].a[3] = 'S';e[1].a[4] = 'E';\n    e[0].len = e[1].len = 4;\n    for(int i=1; i<=n; i++){\n        scanf(\"%s\", useless[i].a+1);\n        useless[i].len = strlen(useless[i].a+1);\n    }\n    while(work())    ;\n    return 0;\n}\n```",
        "postTime": 1509110472,
        "uid": 44733,
        "name": "poorpool",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1624 \u3010\u5355\u8bcd\u7f29\u5199\u3011"
    },
    {
        "content": "### ~~\u53d1\u9898\u89e3\u7684\u76ee\u7684\u5176\u5b9e\u662f\u5b89\u5229stringstream~~\n### \u6700\u5f00\u59cb$O(N)$\u66b4\u529b\u5224\u6709\u6ca1\u6709\u65e0\u7528\u4e32\n### DP\u72b6\u6001\uff1a\u8bbe$f_{i,j}$\u4e3a\u5339\u914d\u5230\u7b2c$i$\u4e2a\u5168\u79f0\u5b57\u7b26\u4e32\uff0c\u7f29\u5199\u4e32\u5339\u914d\u5230$j$\u65f6\u7684\u65b9\u6848\u6570\uff0c\u4ece\u524d\u5f80\u540e\u626b\uff0c\u7f29\u5199\u4e2d\u7b2c$j$\u4e2a\u4e0e\u5168\u7a0b\u4e32\u4e2d\u67d0\u4e00\u4e2a\u76f8\u540c\uff0c\u72b6\u8f6c\u5c31\u662f$f_{i,j}+=f_{i-1,j-1}+f_{i,j-1}$\uff0c\u6700\u540e\u7b54\u6848\u5c31\u662f$f_{num,size}$\uff0c$num$\u662f\u6709\u6548\u4e32\u4e2a\u6570\uff0c$size$\u662f\u5339\u914d\u4e32\u957f\u5ea6\u3002~~\u6613\u77e5~~\u590d\u6742\u5ea6\u4e3a$O(size^3)$\uff0c\u5339\u914d\u73af\u8282\u53ef\u4ee5\u4f7f\u7528$vector$\u6a21\u62df\u6876\u964d\u4f4e\u590d\u6742\u5ea6\n### \u5173\u4e8e$stringstream$\u7528\u6cd5\u4e0e$cin$\u76f8\u4f3c\uff0c\u53ef\u4ee5\u6a21\u62df$cin$\u7c7b\u578b\u7684\u8f93\u5165\u8f93\u51fa\u6d41\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u5947\u8469\u8f93\u5165\u4ee5\u53ca$UVA,USACO$\u7684\u5404\u79cd\u5947\u602a\u8f93\u5165\u6570\u636e\u6709\u5947\u6548$qwq$\uff08\u8981\u6ce8\u610f$getline$\u4f1a\u8bfb\u5165'\\r'\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u675f\u5224\u65ad\u9700\u8981\u5728\u6700\u540e\u52a0\u4e0a'\\r'\uff09\n### \u51cc\u4e71\u7684\u4ee3\u7801$qwq$\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\nstring com[201] , no[201] , mod;\nint ans[201][201];\nvector < int > pot[26];\n\nint main(){\n    int N;\n    cin >> N;\n    for(int i = 1 ; i <= N ; i++)\n        cin >> no[i];\n    string s;\n    stringstream ss;\n    getline(cin , s);\n    while(getline(cin , s) && s != \"LAST CASE\" && s != \"LAST CASE\\r\"){\n    //\u6ce8\u610f\"LAST CASE\\r\"\u7684\u5224\u65ad\uff01\n\t\tss.clear();\n        //\u6e05\u7a7a\u8f93\u5165\u8f93\u51fa\u6d41\n        ss.str(s);\n        //\u5c06\u8f93\u5165\u8f93\u51fa\u6d41ss\u8d4b\u503c\u4e3as\n        ss >> mod;\n        //\u8fd9\u6837\u5b50\u53ef\u4ee5\u7528stringstream\u6a21\u62dfcin\u64cd\u4f5c\uff01\n        for(int i = 0 ; i < 26 ; i++)\n            pot[i].clear();\n        for(int i = 0 ; i < mod.size() ; i++)\n            pot[mod[i] - 'A'].push_back(i);\n        int dir = 0;\n        while(ss >> com[dir]){\n            bool f = 0;\n            for(int i = 1 ; !f && i <= N ; i++)\n                if(com[dir] == no[i])\n                    f = 1;\n            if(!f)\n                dir++;\n        }\n        memset(ans , 0 , sizeof(ans));\n        ans[0][0] = 1;\n        //DP!\n        for(int i = 0 ; i < dir ; i++)\n            for(int j = 0 ; j < com[i].size() ; j++)\n                for(int k = pot[com[i][j] - 'a'].size() - 1 ; k >= 0 ; k--)\n                    ans[i + 1][pot[com[i][j] - 'a'][k] + 1] += ans[i][pot[com[i][j] - 'a'][k]] + ans[i + 1][pot[com[i][j] - 'a'][k]];\n        if(ans[dir][mod.size()])\n            cout << mod << \" can be formed in \" << ans[dir][mod.size()] << \" ways\" << endl;\n        else\n            cout << mod << \" is not a valid abbreviation\" << endl;\n    }\n    return 0;\n}\n```",
        "postTime": 1537261754,
        "uid": 96296,
        "name": "Itst",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1624 \u3010\u5355\u8bcd\u7f29\u5199\u3011"
    },
    {
        "content": "\u5148\u66b4\u529b\u53bb\u6389\u6240\u6709\u7684\u5355\u8bcd\uff0c\u53ea\u5bf9\u6709\u6548\u5355\u8bcd\u8fdb\u884c\u8ba1\u7b97\u3002\n\ndp[i][j]\u8868\u793a\u524di\u4e2a\u5355\u8bcd\u4f7f\u7528\u4e86\u524dj\u4e2a\u5927\u5199\u5b57\u6bcd\u7684\u65b9\u6848\u6570\n\n\u521d\u59cb\u6761\u4ef6dp[0][0]=1\n\n\u8f6c\u79fb\uff1a\u82e5\u7b2ci\u4e2a\u5355\u8bcd\u4f7f\u7528\u7b2cj\u5230\u7b2cj+k\u4e2a\u5927\u5199\u5b57\u6bcd\u7684\u65b9\u6848\u6570\u4e3atemp[k]\n\n\u5219dp[i][j+k]=dp[i-1][j-1]\\*temp[k]\n\n\u6700\u7ec8ans=dp[n][m]\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff2f\uff08\uff2c\uff11\uff0a\uff2e\uff0a\uff2c\uff12\uff0a\uff2c\uff12\uff09\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff2f(\uff2c\uff11\\*\uff2e\\*\uff2c\uff12)\n\nL1\u7f29\u5199\u957f\u5ea6   N\u5168\u79f0\u4e2d\u5355\u8bcd\u7684\u4e2a\u6570   L2\u5168\u79f0\u4e2d\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nchar w[101][150];\nchar s[150],let[150];\nchar over[9]={'L','A','S','T',' ','C','A','S','E'};\nstruct word\n{\n    char c[150];\n    int l;\n}a[150];\nint t,n,m,len;\nint dp[100][150],temp[150];\nbool Case_is_Over()\n{\n    for (int i=0;i<=8;i++)\n        if (s[i]!=over[i]) return false;\n    return true;\n}\nint main()\n{\n    freopen(\"abbr.in\",\"r\",stdin);\n    freopen(\"abbr.out\",\"w\",stdout);\n    scanf(\"%d\\n\",&t);\n    for (int i=1;i<=t;i++) scanf(\"%s\",w[i]);\n    while (233)\n    {\n        char ch=getchar();len=0;\n        while ( ! ( (ch>='a'&&ch<='z') || (ch>='A'&&ch<='Z') || ch==' ' ) ) ch=getchar();\n        while ( (ch>='a'&&ch<='z') || (ch>='A'&&ch<='Z') || ch==' ' ) s[len++]=ch,ch=getchar();\n        n=m=0;//\u8bbe\u6bcf\u4e2a\u8be2\u95ee\u6709n\u4e2a\u5355\u8bcd\uff0cm\u4e2a\u5927\u5199\u5b57\u6bcd\n        if (Case_is_Over()) break;\n        int p=0;\n        for (int i=1;i<150;i++) memset(a[i].c,0,sizeof(a[i].c)),a[i].l=0;\n        while (s[p]>='A'&&s[p]<='Z')\n        {\n            printf(\"%c\",s[p]);\n            let[++m]=s[p]+32;\n            p++;\n        }\n        p++;\n        while (p<len)\n        {\n            n++;\n            while (s[p]>='a'&&s[p]<='z')\n            {\n                a[n].c[a[n].l++]=s[p];\n                p++;\n            }\n            for (int i=1;i<=t;i++)\n                if (strcmp(w[i],a[n].c)==0)\n                {\n                    memset(a[n].c,0,sizeof(a[n].c));\n                    a[n].l=0;\n                    n--;break;\n                }\n            p++;\n        }\n        memset(dp,0,sizeof(dp));\n        dp[0][0]=1;\n        for (int i=1;i<=n;i++) //\u679a\u4e3e\u5355\u8bcd\n            for (int j=i;j<=i+m-n;j++) //\u679a\u4e3e\u5f53\u524d\u5355\u8bcd\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u7684\u8d77\u59cb\u4f4d\u7f6e\n            {\n                memset(temp,0,sizeof(temp));\n                for (int p=0;p<a[i].l;p++) //\u7b2ci\u4e2a\u5355\u8bcd\u7684\u7b2cp\u4e2a\u4f4d\u7f6e\n                    for (int k=min(i+m-n-j,p);k>=0;k--) //\u6070\u597d\u7b49\u4e8e\u7b2cj+k\u4e2a\u5927\u5199\u5b57\u6bcd\n                        if (let[j+k]==a[i].c[p])\n                            if (k) temp[k]+=temp[k-1];\n                            else temp[k]++;\n                for (int k=i+m-n-j;k>=0;k--)\n                    dp[i][j+k]+=dp[i-1][j-1]*temp[k];\n            }\n        if (dp[n][m]) printf(\" can be formed in %d ways\\n\",dp[n][m]);\n        else printf(\" is not a valid abbreviation\\n\");\n    }\n    return 0;\n}\n\n```",
        "postTime": 1505546426,
        "uid": 21534,
        "name": "ysner",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1624 \u3010\u5355\u8bcd\u7f29\u5199\u3011"
    }
]