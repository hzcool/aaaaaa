[
    {
        "content": "## Solution\n\n\u770b\u5230\u4efb\u610f\u4e24\u70b9\u5747\u4e0d\u4e92\u8fde\uff0c\u60f3\u5230\u4e0e\u4e4b\u7c7b\u4f3c\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u9884\u793a\u7740\u8fd9\u9898\u5c06\u4f7f\u7528 $\\text{Tarjan}$ \u6765\u5b8c\u6210\u3002\n\n\u5148\u8003\u8651\u628a\u8fb9\u7684\u65b9\u5411\u786e\u5b9a\u4e0b\u6765\u3002\n\n\u6ce8\u610f\u5230\u6709\u8d21\u732e\u7684\u8fde\u6cd5\u53ea\u6709\u4ee5\u4e0b\u4e09\u79cd\uff1a\n\n![](https://s1.ax1x.com/2022/07/02/j1I3X8.png) ![](https://s1.ax1x.com/2022/07/02/j1IJ0g.png) ![](https://s1.ax1x.com/2022/07/02/j1IGnS.png)\n\n\u89c2\u5bdf\u53d1\u73b0\uff0c\u8fd9\u4e09\u79cd\u8fde\u6cd5\u4e2d\u53f3\u4e0b\u7684\u70b9\u4e00\u5b9a\u662f\u5411\u5de6\u4e0a\u8fde\u51fa\u7684\u3002\n\n\u6839\u636e\u8fd9\u4e2a\u53d1\u73b0\uff0c\u6211\u4eec\u6709\u4e86\u4ee5\u4e0b\u601d\u8def\uff1a\n\n1. \u5c06\u8fb9\u6392\u5e8f\uff0c\u7b2c\u4e00\u5173\u952e\u5b57 x \u4ece\u5c0f\u5230\u5927\uff08\u4e0a\u6cb3\u5cb8\uff09\uff0c\u7b2c\u4e8c\u5173\u952e\u5b57 y \u4ece\u5927\u5230\u5c0f\uff08\u4e0b\u6cb3\u5cb8\uff09\u3002\n\n2. \u679a\u4e3e\u6bcf\u6761\u8fb9\uff0c\u5982\u679c\u5f53\u524d\u8fb9\u4e0b\u6cb3\u5cb8\u7684\u70b9\u5728\u76ee\u524d\u6240\u6709\u8fb9\u7684\u6700\u53f3\u7aef\uff0c\u90a3\u4e48\u8bf4\u660e\u8fd9\u4e2a\u70b9\u5728\u67d0\u79cd\u8fde\u6cd5\u4e2d\u4e00\u5b9a\u5904\u5728\u53f3\u4e0b\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u6b64\u8fb9\u7684\u7c7b\u578b\u4e3a 1\u3002\n\n3. \u5176\u4f59\u8fb9\u7c7b\u578b\u4e3a 0\u3002\n\n\u73b0\u5728\u5df2\u7ecf\u786e\u5b9a\u4e86\u8fb9\u7684\u65b9\u5411\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u6a21\u677f\u9898\uff1a\u6709\u5411\u56fe\u4e2d\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\u3002\n\n## Code\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define N 400005\nusing namespace std;\nint na,nb,n,m,tot,num,mx,cnt,ans,sum[N],sta[N*10],dfn[N<<1],low[N<<1];\nbool bj[N<<1];\nstruct node {int x,y,id;} edg[N];\nstruct edge {int to,next,head;} a[N*3];\nbool cmp(node x,node y)\n{\n    if (x.x<y.x) return true;\n    if (x.x>y.x) return false;\n    return x.y>y.y;\n}\nvoid add(int x,int y) {a[++tot].to=y;a[tot].next=a[x].head;a[x].head=tot;}\nvoid dfs(int x)\n{\n    dfn[x]=low[x]=++cnt;\n    sta[++num]=x;\n    bj[x]=true;\n    for (int i=a[x].head;i;i=a[i].next)\n    {\n        int y=a[i].to;\n        if (!dfn[y]) dfs(y),low[x]=min(low[x],low[y]);\n        else if (bj[y]) low[x]=min(low[x],dfn[y]);\n    }\n    if (dfn[x]==low[x])\n    {\n        ++ans;\n        while (sta[num]!=x) bj[sta[num--]]=false;\n        bj[sta[num--]]=false;\n    }\n}\nint main()\n{\n    freopen(\"neverland.in\",\"r\",stdin);\n    freopen(\"neverland.out\",\"w\",stdout);\n    scanf(\"%d%d\",&na,&nb);\n    for (int i=1;i<na;++i)\n        add(i,i+1);\n    for (int i=1;i<nb;++i)\n        add(i+na,i+na+1);\n    scanf(\"%d\",&m);\n    for (int i=1;i<=m;++i)\n        scanf(\"%d%d\",&edg[i].x,&edg[i].y),edg[i].id=i;\n    sort(edg+1,edg+m+1,cmp);\n    for (int i=1;i<=m;++i)\n    {\n        if (edg[i].y>mx) mx=edg[i].y,add(edg[i].y+na,edg[i].x),sum[edg[i].id]=1;\n        else add(edg[i].x,edg[i].y+na),sum[edg[i].id]=0;\n    }\n    n=na+nb;\n    for (int i=1;i<=n;++i)\n        if (!dfn[i]) dfs(i);\n    printf(\"%d\\n\",ans);\n    for (int i=1;i<=m;++i)\n        printf(\"%d \",sum[i]);\n    return 0;\n}\n```",
        "postTime": 1656748763,
        "uid": 166078,
        "name": "Thunder_S",
        "ccfLevel": 6,
        "title": "P8328 [COCI2021-2022#5] Usmjeravanje"
    }
]