[
    {
        "content": "UPD in 2020/12/26\uff1a\u66f4\u6362\u4e86\u56fe\u5e8a\u3002\n\nUPD in 2020/8/12\uff1a\u4fee\u6539\u6392\u7248\u4e0e\u4e00\u4e9b\u8bed\u8a00\u3002\u539f\u6765\u7684\u771f\u662f\u592a\u4e11\u4e86\u3002\n\n\u9898\u76ee\u8981\u6c42\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e2a\u6570\u3002\n\n\u770b\u8d77\u6765\u65e0\u4ece\u4e0b\u624b\uff0c\u8fde\u66b4\u529b\u4e5f\u60f3\u4e0d\u51fa\u6765\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u7684\u6027\u8d28\u3002\n\n**\u5b9a\u7406\uff1a** \u540c\u4e00\u4e2a\u56fe\u7684\u6bcf\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u8fb9\u6743\u76f8\u7b49\u7684\u8fb9\u6570\u91cf\u76f8\u7b49\u3002\n\n**\u8bc1\u660e\uff1a**\uff08\u4e0d\u4e25\u8c28\uff09\n\n\u8003\u8651kruskal\u7b97\u6cd5\u7684\u8fc7\u7a0b\uff0c\u5148\u6392\u5e8f\uff0c\u540e\u679a\u4e3e\u6240\u6709\u8fb9\u3002\n\n\u5bf9\u4e8e\u540c\u4e00\u8fb9\u6743\u7684\u8fb9\uff0c\u5982\u679c\u4e24\u7aef\u70b9\u4e0d\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u603b\u4f1a\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u52a0\u5165\u8be5\u8fb9\u3002\n\n\u64cd\u4f5c\u7b49\u4ef7\u4e8e\uff1a\u52a0\u5165\u6240\u6709\u540c\u4e00\u8fb9\u6743\u7684\u8fb9\uff0c\u540e\u6d88\u9664\u5176\u4e2d\u6240\u6709\u7684\u7b80\u5355\u73af\u3002\n\n\u53d1\u73b0\u6d88\u73af\u64cd\u4f5c\u4e0d\u5f71\u54cd\u5bf9\u4e8e\u9876\u70b9\u7684\u8fde\u901a\u6027\uff0c\u4e14\u6d88\u9664\u4e00\u4e2a\u7b80\u5355\u73af\u7b49\u4ef7\u4e8e\u5220\u6389\u73af\u4e2d\u4e00\u6761\u8fb9\u3002\n\n\u6240\u4ee5\uff0c\u65e0\u8bba\u5982\u4f55\u6d88\u73af\uff0c\u6700\u7ec8\u5269\u4f59\u603b\u8fb9\u6570\u4e00\u5b9a\u3002\u5176\u4ed6\u8fb9\u6743\u4ee5\u6b64\u7c7b\u63a8\u3002\n___\n\n### \u7b97\u6cd51.\u679a\u4e3e\n\n\u9898\u76ee\u4e2d\u9650\u5236\u6761\u4ef6\uff1a\u76f8\u7b49\u8fb9\u6743\u7684\u8fb9\u6570\u4e0d\u8d85\u8fc7 10\u3002\n\n\u8003\u8651\u5148\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u5bf9\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u51fa\u73b0\u7684\u6bcf\u79cd\u8fb9\u6743\uff0c\u7528\u66b4\u529b\u679a\u4e3e\u7684\u65b9\u5f0f\u7edf\u8ba1\u5728\u540c\u4e00\u8fb9\u6743\u7684\u8fb9\u4e2d\u9009\u53d6\u54ea\u51e0\u6761\u4e5f\u53ef\u4fdd\u8bc1\u6700\u5c0f\u751f\u6210\u6811\u8fde\u901a\u6027\u3002\n\n\u4e3e\u4f8b\u8bf4\u660e\uff1a\n\n\u8fd9\u662f\u4e00\u4e2a\u56fe\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/clvsiofe.png)\n\n\u8fd9\u662f\u539f\u56fe\u7684\u67d0\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/mrrt6xj0.png)\n\n\u52a0\u4e0a\u539f\u56fe\u4e0a\u7684\u6240\u6709\u8fb9\u6743\u4e3a3\u7684\u8fb9\uff0c\u65b0\u56fe\u957f\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/kzojqvdl.png)\n\n\u4e8e\u662f\u4f60\u53ef\u4ee5\u679a\u4e3e\u4efb\u610f\u4e0d\u6210\u73af\u7684\u4e09\u8fb9\uff0c\u4ed6\u4eec\u90fd\u53ef\u4ee5\u5f62\u6210\u4e00\u79cd\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4f8b\u5982\u4ee5\u4e0b\u4e24\u79cd\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hgncvv12.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tekbr8o0.png)\n\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u8fb9\u6743\u5747\u662f\u5982\u6b64\uff0c\u4f8b\u5982\u8fb9\u6743\u4e3a 4\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/xcoi4bfu.png)\n\n\u679a\u4e3e\u7c7b\u4f3c\u8fb9\u6743\u4e3a 3 \u7684\u60c5\u51b5\uff0c\u6b64\u5904\u4e0d\u518d\u5217\u4e3e\u3002\n\n\u5bf9\u4e8e\u540c\u4e00\u8fb9\u6743\uff0c\u6781\u9650 $2^{10}$ \u679a\u4e3e\uff0c\u7edf\u8ba1\u5f53\u524d\u8fb9\u6743\u7b54\u6848\u540e $O(m)$ \u679a\u4e3e\u5176\u4ed6\u8fb9\u6743\uff0c\u4e58\u6cd5\u539f\u7406\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u6781\u9650\u65f6\u95f4\u590d\u6742\u5ea6 $O(2^{10}m)$\uff08\u4e0d\u597d\u8868\u793a\u5c31\u76f4\u63a5\u628a\u679a\u4e3e\u590d\u6742\u5ea6\u7b97\u8fdb\u53bb\u4e86\uff09\uff0c\u4e14\u5b9e\u9645\u590d\u6742\u5ea6\u4e0d\u53ef\u80fd\u8fbe\u5230\u6b64\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n___\n\n### \u7b97\u6cd52.\u751f\u6210\u6811\u8ba1\u6570\n\n\u7531\u5b9a\u7406\u4ee5\u53ca\u679a\u4e3e\u505a\u6cd5\u7684\u542f\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u6307\u5b9a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u4e00\u79cd\u8fb9\u6743\u3002\n\n\u4e0d\u8fc7\uff0c\u76f8\u8f83\u4e8e\u679a\u4e3e\u5e76\u5224\u73af\uff0c\u6211\u4eec\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u4fdd\u8bc1\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fde\u901a\u6027\u3002\n\n\u5c06\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u975e\u8be5\u8fb9\u6743\u7684\u8fb9\u90fd\u52a0\u5728\u4e00\u4e2a\u65b0\u56fe\u4e0a\uff0c\u5229\u7528\u5e76\u67e5\u96c6\u7f29\u70b9\u3002\n\n\u4e4b\u540e\u5c06\u539f\u56fe\u4e2d\u8fb9\u6743\u4e3a\u9009\u5b9a\u503c\u7684\u8fb9\u90fd\u52a0\u5728\u65b0\u56fe\u4e0a\uff0c\u6ce8\u610f\u7f29\u70b9\u540e\u8fb9\u7684\u5904\u7406\u3002\n\n\u8fd8\u7528\u4ee5\u524d\u7684\u4f8b\u5b50\u8bf4\u660e\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/z8bcluyp.png)\n\n\u5bf9\u9ed1\u70b9\u4ee5\u53ca\u9ed1\u8fb9\u7f29\u70b9\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/mfmlixs6.png)\n\n\u76f4\u63a5\u5bf9\u8be5\u65b0\u56fe\u6c42\u751f\u6210\u6811\u4e2a\u6570\uff0c\u5373\u53ef\u7edf\u8ba1\u7b54\u6848\u5e76\u4fdd\u8bc1\u8fde\u901a\u6027\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u7edf\u8ba1\u51fa\u53d6\u540c\u4e00\u6743\u503c\u8fb9\u7684\u65b9\u6848\u4e2a\u6570\u3002\u679a\u4e3e\u6bcf\u79cd\u8fb9\u6743\u5229\u7528\u4e58\u6cd5\u539f\u7406\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n\u4f46\u662f\uff0c\u7531\u4e8e\u751f\u6210\u6811\u8ba1\u6570\u662f $O(n^3)$ \u7684\u7b97\u6cd5\uff0c\u4e4d\u773c\u4e00\u770b\u590d\u6742\u5ea6\u903c\u8fd1 $O(m n^3)$\uff0c\u662f\u4e0d\u53ef\u884c\u7684\u3002\n\n\u4ee5\u4e0b\u4e25\u8c28\u8bc1\u660e\u590d\u6742\u5ea6\u4e3a $O(n^3)$\u3002\n\n\u9996\u5148\u5bb9\u6613\u53d1\u73b0\uff0c\u5728\u4e00\u68f5\u6811\u4e0a\uff0c\u6bcf\u5220\u9664\u4e00\u6761\u8fb9\u4f1a\u4f7f\u8fde\u901a\u5757\u4e2a\u6570 +1\u3002\n \n\u8bbe\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u6709 $k$ \u79cd\u8fb9\u6743\uff0c\u6bcf\u79cd\u8fb9\u6743\u8fb9\u6570\u4e3a $c_1$ \u5230 $c_k$\u3002\n\n\u5bf9\u4e8e\u7b2c $i$ \u79cd\u8fb9\u6743\uff0c\u6bcf\u6b21\u5220\u6389 $c_i$ \u6761\u8fb9\uff0c\u5f62\u6210 $c_i+1$ \u4e2a\u8fde\u901a\u5757\uff0c\u5bf9\u65b0\u56fe\u6c42\u751f\u6210\u6811\u4e2a\u6570\u65f6\u95f4\u4e3a $O(c_i^3)$\u3002\u603b\u65f6\u95f4 $O(\\sum\\limits_{i=1}^k c_i^3)$\u3002\n\n\u6709\u4e0d\u7b49\u5f0f\uff1a\n\n$$\n\\sum_{i=1}^{k} c_i^3 \\leq \\left(\\sum_{i=1}^k c_i\\right)^3\n$$\n\n\u8bc1\u660e\u53ef\u4ee5\u76f4\u63a5\u628a\u53f3\u8fb9\u62c6\u5f00\uff0c\u9664\u4e86\u5de6\u8fb9\u90a3\u4e9b\u4e09\u6b21\u9879\u8fd8\u6709\u4e00\u5806\u975e\u8d1f\u9879\u3002\n\n\u6ce8\u610f\u5230 $\\sum\\limits_{i=1}^k c_i = n-1$\uff0c\u4e8e\u662f\u590d\u6742\u5ea6 $O(n^3)$\u3002\n\n\u4ee5\u4e0b\u662f\u7b97\u6cd5 2 \u7684\u4ee3\u7801\u3002\u7b97\u6cd5 1 \u7684\u4ee3\u7801\u8bf7\u53c2\u770b\u5176\u4ed6\u9898\u89e3\u3002\n\n\u53e6\uff0c\u7531\u4e8e\u672c\u4eba\u4f7f\u7528\u7684\u662f\u6700\u88f8\u7684\u8f97\u8f6c\u76f8\u9664\u6cd5\u884c\u5217\u5f0f\u6c42\u503c\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f $O(n^3\\log n)$\u3002\u4f7f\u7528\u4e00\u4e9b\u5176\u4ed6\u6280\u5de7\u5c31\u80fd\u8fbe\u5230 $O(n^3)$ \u7684\u6548\u7387\uff0c\u8be6\u60c5\u8bf7\u67e5\u770b\u5176\u4ed6\u884c\u5217\u5f0f\u6c42\u503c\u76f8\u5173\u535a\u5ba2\u3002\n\n___\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nconst int N=101,M=1001,MOD=31011;\n\n//\u539f\u56fe\uff0c\u8fb9\u6743\u79bb\u6563\u5316\u5e76\u6309\u76f8\u7b49\u8fb9\u6743\u5b58\u50a8 \nstruct e\n{\n    int x,y,v;\n} tp[M],mst[M];\nvector<e> edge[M]; \nint cmp(e a,e b)\n{\n    return a.v<b.v;\n}\n\nbool is[M];\n\n//\u5e76\u67e5\u96c6 \nint bcj[N],bel[N];\nvoid init(int a)\n{\n\tfor(int i=1;i<=a;i++) bcj[i]=i;\n}\nint rt(int a)\n{\n    if(bcj[a]==a) return a;\n    return bcj[a]=rt(bcj[a]);\n}\nbool uni(int a,int b)\n{\n    int p=rt(a),q=rt(b);\n    if(p==q) return true;\n    bcj[p]=q;\n    return false;\n}\n\n//\u4e09\u4e2a\u77e9\u9635 \u5ea6\u6570\u3001\u90bb\u63a5\u3001\u57fa\u5c14\u970d\u592b \nint n,deg[N][N],g[N][N],mat[N][N];\n\nint treecnt()//\u751f\u6210\u6811\u8ba1\u6570\uff0c\u8f97\u8f6c\u76f8\u9664\u9ad8\u65af\u6d88\u5143 \n{\n    int i,j,k,ans=1;\n    for(i=1;i<n;i++)\n    {\n        for(j=i+1;j<n;j++)\n        {\n            while(mat[j][i])\n            {\n                int div=mat[i][i]/mat[j][i];\n                for(k=i;k<n;k++) mat[i][k]=(mat[i][k]-1ll*mat[j][k]*div%MOD+MOD)%MOD;\n                swap(mat[i],mat[j]);\n                ans*=-1;\n            }\n            if(mat[i][i]==0) return 0;\n        }\n        ans=1ll*ans*mat[i][i]%MOD;\n    }\n    return (ans+MOD)%MOD;\n}\n\nint main()\n{\n    int a,b,i,j,k,tl=0,tmp=0,cnt=0;\n    scanf(\"%d%d\",&a,&b);\n    init(a);\n    for(i=0;i<b;i++) scanf(\"%d%d%d\",&tp[i].x,&tp[i].y,&tp[i].v);\n    sort(tp,tp+b,cmp);\n\n    //kruskal \n    for(i=0;i<b;i++)\n    {\n        if(tp[i].v!=tmp) tl++,tmp=tp[i].v;\n        edge[tl].push_back(tp[i]);\n        if(uni(tp[i].x,tp[i].y)) continue;\n        is[tl]=1,mst[cnt]=tp[i],mst[cnt++].v=tl;\n    }\n    if(cnt!=a-1)\n    {\n        printf(\"0\");\n        return 0;\n    }\n\n    //\u7edf\u8ba1\u7b54\u6848 \n    int ans=1;\n    for(i=1;i<=tl;i++)\n    {\n        //\u5982\u679c\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u6ca1\u6709\u7528\u5230\u6b64\u8fb9\u6743 \n        if(!is[i]) continue;\n\n\t\tinit(a);\n        int siz=edge[i].size();\n\t\tn=0;\n\t\t\n\t\t//\u5c06\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u5168\u90e8\u8fde\u4e0a\u5e76\u7f29\u70b9\n\t\tfor(j=0;j<cnt;j++)\n\t\t{\n\t\t\tif(mst[j].v==i) continue;\n\t\t\tuni(mst[j].x,mst[j].y);\n\t\t}\n\t\tfor(j=1;j<=a;j++)\n\t\t{\n\t\t\tif(bcj[j]==j) bel[j]=++n;\n\t\t}\n\t\tfor(j=1;j<=a;j++) bel[j]=bel[rt(j)];\n\t\t\n        //\u5c06\u539f\u56fe\u4e2d\u6b64\u8fb9\u6743\u7684\u8fb9\u5168\u90e8\u8fde\u4e0a \n        for(j=0;j<siz;j++)\n        {\n            int bx=bel[edge[i][j].x],by=bel[edge[i][j].y];\n            deg[bx][bx]++,deg[by][by]++;\n            g[bx][by]++,g[by][bx]++;\n        }\n\n        for(j=1;j<=n;j++)\n            for(k=1;k<=n;k++)\n                mat[j][k]=deg[j][k]-g[j][k];\n        ans=ans*treecnt()%MOD;\n\n        //\u5220\u9664\u8fde\u4e0a\u7684\u8fb9 \n        for(j=0;j<siz;j++)\n        {\n            int bx=bel[edge[i][j].x],by=bel[edge[i][j].y];\n            deg[bx][bx]--,deg[by][by]--;\n            g[bx][by]--,g[by][bx]--;\n        }\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1555339995,
        "uid": 103732,
        "name": "smarthehe",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011"
    },
    {
        "content": "\u5927\u6982\u7684\u601d\u8def\uff1a\n\n\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6bcf\u79cd\u8fb9\u6743\u7684\u8fb9\u6570\u662f\u4e00\u6837\u7684\u3002\n\n\u90a3\u5c31\u53ef\u4ee5\u9996\u5148\u627e\u5230\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u79cd\u8fb9\u6743w\uff0c\u628a\u5176\u5b83\u8fb9\u6743\uff0c\u5728\u751f\u6210\u6811\u91cc\u7684\u8fb9\u52a0\u4e0a\uff0c\u7136\u540e\u6c42\u6709\u51e0\u79cd\u65b9\u6848\u9009\u51fa\u8fb9\u6743\u4e3aw\u7684\u8fb9\uff0c\u628a\u4ed6\u4eec\u52a0\u4e0a\uff0c\u4f7f\u5f97\u5f97\u5230\u4e86\u4e00\u68f5\u6811\u3002\n\n\u7136\u540e\u4e58\u8d77\u6765\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u65b9\u6848\u6570\u5c31\u53ef\u4ee5\u7528Matrix-Tree\u5b9a\u7406\u8ba1\u7b97\u3002\n\n\u77e9\u9635\u6c42\u884c\u5217\u5f0f\uff0c\u57fa\u672c\u65b9\u6cd5\u5c31\u662f\u9ad8\u65af\u6d88\u5143\u3002\n\n\n--- \n\u4ee5\u4e0b\u662f\u4e4b\u524d\u7684\u505a\u6cd5\uff0c\u6b63\u89e3\u5728\u4e0b\u9762\n\n\u7531\u4e8e\u6211\u592a\u83dc\u4e86\uff0c\u4e0d\u4f1a\u6a21\u6570\u4e0d\u4e3a\u8d28\u6570\u65f6\u7684\u9ad8\u65af\u6d88\u5143\uff0c\u6240\u4ee5\u6211\u662f\u76f4\u63a5\u6d6e\u70b9\u6570\u5f3a\u7b97\u884c\u5217\u5f0f\u7136\u540e\u8f6cint\u4e58\u8d77\u6765\u7684\u3002\n\n\u8fd9\u4e2a\u4e3a\u4ec0\u4e48\u80fd\u5bf9\u5462\uff1f\n\n\u56e0\u4e3a\u540c\u6837\u6743\u503c\u7684\u8fb9\u6570\u4e0d\u8d85\u8fc710\uff0c\u518d\u600e\u4e48\u65b9\u6848\u6570\u90fd\u6ca1\u67091024\uff0c\u4e0d\u4f1a\u51fa\u73b0\u592a\u5927\u7684\u60c5\u51b5\u3002\n\n//\u53e6\uff1a\u5bf9\u4e8e\u8fd9\u4e2a\u9650\u5236\uff0c\u4f7f\u5f97\u66b4\u529b\u8ba1\u7b97\u800c\u4e0d\u7528Matrix-Tree\u590d\u6742\u5ea6\u6b63\u786e\u751a\u81f3\u53ef\u80fd\u8fd8\u8dd1\u5f97\u5feb\u4e9b\u6211\u65e0\u8bdd\u53ef\u8bf4\uff0c\u53cd\u6b63\u6211\u6ca1\u8dd1\u8fc7\u66b4\u529b\n\n```C++\n/*\nAuthor: CNYALI_LK\nLANG: C++\nPROG: 4208.cpp\nMail: cnyalilk@vip.qq.com\n*/\n#include<bits/stdc++.h>\n#define debug(...) fprintf(stderr,__VA_ARGS__)\n#define DEBUG printf(\"Passing [%s] in LINE %lld\\n\",__FUNCTION__,__LINE__)\n#define Debug debug(\"Passing [%s] in LINE %lld\\n\",__FUNCTION__,__LINE__)\n#define all(x) x.begin(),x.end()\nusing namespace std;\nconst double eps=1e-8;\nconst double pi=acos(-1.0);\ntypedef long long ll;\ntypedef pair<ll,ll> pii;\ntemplate<class T>ll chkmin(T &a,T b){return a>b?a=b,1:0;}\ntemplate<class T>ll chkmax(T &a,T b){return a<b?a=b,1:0;}\ntemplate<class T>T sqr(T a){return a*a;}\ntemplate<class T>T mmin(T a,T b){return a<b?a:b;}\ntemplate<class T>T mmax(T a,T b){return a>b?a:b;}\ntemplate<class T>T aabs(T a){return a<0?-a:a;}\n#define min mmin\n#define max mmax\n#define abs aabs\nll read(){\n\tll s=0,base=1;\n\tchar c;\n\twhile(!isdigit(c=getchar()))if(c=='-')base=-base;\n\twhile(isdigit(c)){s=s*10+(c^48);c=getchar();}\n\treturn s*base;\n}\nstruct edge{\n\tll u,v,w;\n};\nedge e[102424];\nll fa[102424],use[102424];\nll is[102424];\nll find(ll x){return x==fa[x]?x:fa[x]=find(fa[x]);}\nll e_cmp(edge a,edge b){return a.w<b.w;}\nconst ll p=31011;\ndouble a[128][128];\nll inv[31015];\nll det(ll n){\n\tdouble k,s=1;\n\tfor(ll i=1;i<=n;++i){\n\t\tif(fabs(a[i][i])<eps){\n\t\t\tll hv=0;\n\t\t\tfor(ll j=i+1;j<=n;++j)if(fabs(a[j][i])>=eps){\n\t\t\t\thv=1;\n\t\t\t\ts=-s;\n\t\t\t\tfor(ll l=1;l<=n;++l)swap(a[i][l],a[j][l]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(!hv)return 0;\n\t\t}\n\t\tk=1/a[i][i];\n\t\ts=s*a[i][i];\n\t\tfor(ll j=i;j<=n;++j)a[i][j]=a[i][j]*k;\n\t\tfor(ll j=i+1;j<=n;++j){\n\t\t\tk=a[j][i];\n\t\t\tfor(ll l=1;l<=n;++l){\n\t\t\t\ta[j][l]-=a[i][l]*k;\n\t\t\t}\n\t\t}\n\t}\n\tll ans=(ll)(s+eps+eps);\n\treturn ans;\n}\nint main(){\n#ifdef cnyali_lk\n\tfreopen(\"4208.in\",\"r\",stdin);\n\tfreopen(\"4208.out\",\"w\",stdout);\n#endif\n\tll n,m;\n\tinv[1]=1;\n\tfor(ll i=2;i<p;++i)inv[i]=(p-p/i)*inv[p%i]%p;\n\tn=read();m=read();\n\tfor(ll i=1;i<=m;++i){\n\t\te[i].u=read();\n\t\te[i].v=read();\n\t\te[i].w=read();\n\t}\n\tsort(e+1,e+m+1,e_cmp);\n\tfor(ll i=1;i<=n;++i)fa[i]=i;\n\tll g=n;\n\tfor(ll i=1;i<=m&&g>1;++i)if(find(e[i].u)!=find(e[i].v)){\n\t\tuse[i]=1;\t\n\t\tfa[find(e[i].u)]=find(e[i].v);\n\t\t--g;\n\t}\n\tif(g>1){printf(\"0\\n\");return 0;}\n\tll u=1,v=1;\n\tll ans=1;\n\twhile(v<=m){\n\t\tfor(ll i=1;i<=n;++i){\n\t\t\tfa[i]=i;\n\t\t\tis[i]=0;\n\t\t}\n\t\tfor(ll i=1;i<=m;++i)if(use[i]&&e[i].w!=e[u].w){\n\t\t\tfa[find(e[i].u)]=find(e[i].v);\t\n\t\t}\t\n\t\tg=0;\n\t\tfor(ll i=1;i<=n;++i){\n\t\t\tif(!is[find(i)]){\n\t\t\t\tis[find(i)]=++g;\n\t\t\t}\n\t\t\tis[i]=is[find(i)];\n\t\t}\n\t\tfor(ll i=1;i<=g;++i)for(ll j=1;j<=g;++j)a[i][j]=0;\n\t\twhile(e[u].w==e[v].w){\n\t\t\ta[is[e[v].u]][is[e[v].v]]-=1;\n\t\t\ta[is[e[v].v]][is[e[v].u]]-=1;\n\t\t\ta[is[e[v].u]][is[e[v].u]]+=1;\n\t\t\ta[is[e[v].v]][is[e[v].v]]+=1;\n\t\t\t++v;\n\t\t}\n\n\t\t--g;\n\t\tans=ans*det(g)%p;\n\t\tu=v;\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n\n\n```\n---\nupd\uff1a\u6b63\u89e3\uff1a\n\n\u6211\u4eec\u73b0\u5728\u8981\u7528$a_{i,i}$\u628a$a_{j,i}$\u5728\u6a21\u610f\u4e49\u4e0b\u6d88\u4e3a0\uff0c\u5f53\u6a21\u6570\u4e3a\u8d28\u6570\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528\u9006\u5143\uff0c\u4f46\u662f\u975e\u8d28\u6570\u7684\u65f6\u5019\u600e\u4e48\u529e\u5462\uff1f\n\n\u8003\u8651\u6c42$\\gcd(a,b)$\u7684\u8fc7\u7a0b\uff1a\n\n```C++\nint gcd(int a,int b){\n\twhile(b){\n\t\ta-=(a/b)*b;//a%=b;\n\t    swap(a,b);\n\t}\n\treturn a;\n}\n```\n\n\u7136\u540ea\u5c31\u662fgcd\u4e86\uff0cb\u5c31\u88ab\u6d88\u6ca1\u4e86\u3002\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u7c7b\u4f3c\u7684\u5bf9\u6574\u884c\u8fdb\u884c\u76f8\u51cf\uff0c\u4ea4\u6362\u76f4\u5230\u8981\u6d88\u7684\u5143\u7d20\u6d88\u6389\u4e3a\u6b62\uff0c\u663e\u7136$a_{i,i},a_{j,i}$\u6d88\u6389\u90fd\u6ca1\u4e8b\uff0c\u53ea\u8981\u6d88\u6389\u7684\u5143\u7d20\u90a3\u884c\u4ea4\u6362\u5230\u7b2cj\u884c\u5c31\u884c\u3002\n\n\u6ce8\u610f\u4efb\u4f55\u4e00\u6b21\u4ea4\u6362\u90fd\u4f1a\u4f7f\u884c\u5217\u5f0f\u503c\u53d6\u53cd\u3002\n\n\u8fd9\u6837\u5c31\u662f$O(n^3 \\log n)$\u7684\u4e86\uff08\u51cf\u6b21\u6570\u662f$O(\\log n)$\uff0c\u5355\u6b21$O(n)$\n\n\u600e\u4e48\u628alog\u6d88\u6389\u5462\uff1f\n\n\u5c31\u76f4\u63a5\u5355\u72ec\u5bf9\u8fd9\u4e24\u4e2a\u5143\u7d20\u76f8\u6d88\uff08\u5f53\u7136\u4e5f\u8981\u5bf9\u884c\u5217\u5f0f\uff0c\u7136\u540e\u8bb0\u5f55a,b,c,d\uff0c\u8bbe\u539f\u6765\u4e24\u4e2a\u5143\u7d20\u662fu,v\uff0c\u4e4b\u540e\u5206\u522b\u53d8\u6210\u4e86$au+bv,cu+dv$\uff0c\u4e4b\u540e\u5bf9\u4e8e\u6bcf\u4e00\u5217\u5bf9\u5e94\u7684\u5143\u7d20u,v\uff0c\u76f4\u63a5\u66f4\u65b0\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n^3)$\n\n```C++\n/*\nAuthor: CNYALI_LK\nLANG: C++\nPROG: 4208.cpp\nMail: cnyalilk@vip.qq.com\n*/\n#include<bits/stdc++.h>\n#define debug(...) fprintf(stderr,__VA_ARGS__)\n#define DEBUG printf(\"Passing [%s] in LINE %lld\\n\",__FUNCTION__,__LINE__)\n#define Debug debug(\"Passing [%s] in LINE %lld\\n\",__FUNCTION__,__LINE__)\n#define all(x) x.begin(),x.end()\nusing namespace std;\nconst double eps=1e-8;\nconst double pi=acos(-1.0);\ntypedef long long ll;\ntypedef pair<ll,ll> pii;\ntemplate<class T>ll chkmin(T &a,T b){return a>b?a=b,1:0;}\ntemplate<class T>ll chkmax(T &a,T b){return a<b?a=b,1:0;}\ntemplate<class T>T sqr(T a){return a*a;}\ntemplate<class T>T mmin(T a,T b){return a<b?a:b;}\ntemplate<class T>T mmax(T a,T b){return a>b?a:b;}\ntemplate<class T>T aabs(T a){return a<0?-a:a;}\n#define min mmin\n#define max mmax\n#define abs aabs\nll read(){\n    ll s=0,base=1;\n    char c;\n    while(!isdigit(c=getchar()))if(c=='-')base=-base;\n    while(isdigit(c)){s=s*10+(c^48);c=getchar();}\n    return s*base;\n}\nstruct edge{\n    ll u,v,w;\n};\nedge e[102424];\nll fa[102424],use[102424];\nll is[102424];\nll find(ll x){return x==fa[x]?x:fa[x]=find(fa[x]);}\nll e_cmp(edge a,edge b){return a.w<b.w;}\nconst ll p=31011;\nll a[128][128];\nll inv[31015];\nvoid kill(ll a,ll b,ll &aii,ll &aij,ll &aji,ll &ajj,ll &sign){\n\tsign=1;\n\taii=ajj=1;\n\taij=aji=0;\n\twhile(b){\n\t\taii-=a/b*aji;\n\t\taij-=a/b*ajj;\n\t\taij=(aij%p+p)%p;\n\t\taii=(aii%p+p)%p;\n\t\ta%=b;\n\t\tswap(a,b);\n\t\tswap(aii,aji);\n\t\tswap(aij,ajj);\n\t\tsign=-sign;\n\t}\n}\nll det(ll n){\n    ll k,s=1,_a,b,c,d,pa,ans=1,nxa,nxb;\n\tfor(ll i=1;i<=n;++i)for(ll j=1;j<=n;++j)if(a[i][j]<0)a[i][j]+=p;\n    for(ll i=1;i<=n;++i){\n        for(ll j=i+1;j<=n;++j){\n\t\t\tkill(a[i][i],a[j][i],_a,b,c,d,pa);\n\t\t\ts*=pa;\n\t\t\tfor(ll k=1;k<=n;++k){\n\t\t\t\tnxa=(a[i][k]*_a+a[j][k]*b)%p;\t\n\t\t\t\tnxb=(a[i][k]*c+a[j][k]*d)%p;\t\n\t\t\t\ta[i][k]=nxa;\n\t\t\t\ta[j][k]=nxb;\n\t\t\t}\n        }\n\t\tans=ans*a[i][i]%p;\n    }\n\n    return ans*(s+p)%p;\n}\nint main(){\n#ifdef cnyali_lk\n    freopen(\"4208.in\",\"r\",stdin);\n    freopen(\"4208.out\",\"w\",stdout);\n#endif\n    ll n,m;\n    inv[1]=1;\n    for(ll i=2;i<p;++i)inv[i]=(p-p/i)*inv[p%i]%p;\n    n=read();m=read();\n    for(ll i=1;i<=m;++i){\n        e[i].u=read();\n        e[i].v=read();\n        e[i].w=read();\n    }\n    sort(e+1,e+m+1,e_cmp);\n    for(ll i=1;i<=n;++i)fa[i]=i;\n    ll g=n;\n    for(ll i=1;i<=m&&g>1;++i)if(find(e[i].u)!=find(e[i].v)){\n        use[i]=1;\t\n        fa[find(e[i].u)]=find(e[i].v);\n        --g;\n    }\n    if(g>1){printf(\"0\\n\");return 0;}\n    ll u=1,v=1;\n    ll ans=1;\n    while(v<=m){\n        for(ll i=1;i<=n;++i){\n            fa[i]=i;\n            is[i]=0;\n        }\n        for(ll i=1;i<=m;++i)if(use[i]&&e[i].w!=e[u].w){\n            fa[find(e[i].u)]=find(e[i].v);\t\n        }\t\n        g=0;\n        for(ll i=1;i<=n;++i){\n            if(!is[find(i)]){\n                is[find(i)]=++g;\n            }\n            is[i]=is[find(i)];\n        }\n        for(ll i=1;i<=g;++i)for(ll j=1;j<=g;++j)a[i][j]=0;\n        while(e[u].w==e[v].w){\n            a[is[e[v].u]][is[e[v].v]]-=1;\n            a[is[e[v].v]][is[e[v].u]]-=1;\n            a[is[e[v].u]][is[e[v].u]]+=1;\n            a[is[e[v].v]][is[e[v].v]]+=1;\n            ++v;\n        }\n\n        --g;\n        ans=ans*det(g)%p;\n        u=v;\n    }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n\n\n```\n",
        "postTime": 1525142234,
        "uid": 8943,
        "name": "\u8001K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011"
    },
    {
        "content": "[$$\\Large\\texttt{My Blog}$$](https://hydingsy.github.io/articles/problem-JSOI-2008-MST-Count/)\n\n---\n\n## Description\n\n> \u9898\u76ee\u94fe\u63a5\uff1a[Luogu 4208](https://www.luogu.org/problemnew/show/P4208)\n\n\u7ed9\u51fa\u4e00\u4e2a\u7531 $n$ \u4e2a\u70b9\u548c $m$ \u6761\u8fb9\u6784\u6210\u7684\u7b80\u5355\u65e0\u5411\u52a0\u6743\u56fe\u3002\u4f60\u4e0d\u6ee1\u8db3\u4e8e\u6c42\u51fa\u8fd9\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u800c\u5e0c\u671b\u77e5\u9053\u8fd9\u4e2a\u56fe\u4e2d\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\uff08\u4e24\u68f5\u6700\u5c0f\u751f\u6210\u6811\u662f\u4e0d\u540c\u7684\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u6709\u81f3\u5c11\u6709\u4e00\u6761\u8fb9\u4e0d\u540c\uff09\u3002\u65b9\u6848\u6570\u5bf9 $31011$ \u53d6\u6a21\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1\\le n\\le 100$\uff0c$1\\le m\\le 1000$\n\n------\n\n## Solution\n\n### \u7b80\u5316\u7248\n\n\u7531\u4e8e\u5728 $\\text{MST}$ \u4e2d\uff0c**\u6bcf\u79cd\u6743\u503c\u7684\u8fb9\u7684\u6570\u91cf\u662f\u56fa\u5b9a\u7684**\uff0c\u90a3\u4e48\u6211\u4eec\u5148\u7edf\u8ba1\u51fa\u6bcf\u79cd\u6743\u503c\u9700\u8981\u591a\u5c11\u6761\u8fb9\uff0c\u8bb0\u4e3a $c_i$\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5177\u6709\u76f8\u540c\u6743\u503c\u7684\u8fb9\u7684\u6570\u91cf\u4e0d\u8d85\u8fc7 $10$ \u6761\uff0c\u90a3\u4e48\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u7b2c $i$ \u79cd\u6743\u503c\u7684\u8fb9\u9009\u62e9\u54ea $c_i$ \u6761\uff0c\u7136\u540e\u6839\u636e\u4e58\u6cd5\u539f\u7406\u6765\u7edf\u8ba1\u7b54\u6848\u3002\uff08\u8fd9\u4e2a\u7b97\u6cd5\u5df2\u7ecf\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\uff09\n\n**\u6ce8\u610f**\uff1a\u6211\u4eec\u4e3a\u4e86\u80fd\u591f\u5feb\u901f\u5206\u5f00\u8fde\u901a\u5757\uff0c\u5e76\u67e5\u96c6\u4e2d**\u4e0d\u80fd\u4f7f\u7528\u8def\u5f84\u538b\u7f29**\uff01\n\n**\u65f6\u95f4\u590d\u6742\u5ea6**\uff1a$O(2^{10}m)$\n\n### \u52a0\u5f3a\u7248\n\n\u6211\u4eec\u8003\u8651**\u52a0\u5f3a\u7248**\uff1a\u6bcf\u79cd\u6743\u503c\u7684\u8fb9\u4e0d\u8d85\u8fc7 $100$ \u6761\u3002\u6211\u4eec\u5c31\u9700\u8981**\u77e9\u9635\u6811\u5b9a\u7406**\u4e86\u3002\n\n\u6ce8\u610f\u5230 $\\text{MST}$ \u6709\u5982\u4e0b\u6027\u8d28\uff1a\n\n1. \u6bcf\u79cd\u6743\u503c\u7684\u8fb9\u7684\u6570\u91cf\u662f\u56fa\u5b9a\u7684\u3002\n2. \u4e0d\u540c\u7684\u751f\u6210\u6811\u4e2d\uff0c\u67d0\u4e00\u79cd\u6743\u503c\u7684\u8fb9\u4efb\u610f\u52a0\u5165\u9700\u8981\u7684\u6570\u91cf\u540e\uff0c**\u5f62\u6210\u7684\u8054\u901a\u5757\u72b6\u6001\u662f\u4e00\u6837\u7684**\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6811\u8fb9\u7684\u6743\u503c $i$\uff0c\u628a**\u6743\u503c\u4e0d\u662f $i$ \u7684\u6811\u8fb9**\u90fd\u52a0\u5165\u56fe\u4e2d\u540e\u8fdb\u884c\u7f29\u70b9\uff1b\u5bf9\u4e8e**\u6743\u503c\u4e3a $i$ \u7684\u539f\u56fe\u4e2d\u7684\u8fb9**\uff0c\u5728\u7f29\u70b9\u540e\u7684\u56fe\u4e2d\u6784\u9020**\u57fa\u5c14\u970d\u592b\u77e9\u9635**\uff0c\u7528\u77e9\u9635\u6811\u5b9a\u7406\u6c42\u51fa\u65b9\u6848\u6570\u3002\n\n\u6700\u7ec8\u7684\u7b54\u6848\u4e5f\u662f\u6839\u636e\u4e58\u6cd5\u539f\u7406\u8ba1\u7b97\u3002\n\n**\u65f6\u95f4\u590d\u6742\u5ea6**\uff1a$O(n^3\\log n)$\uff08\u5927\u6982\u662f\u8fd9\u6837\u5427\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u6211\u4e0d\u600e\u4e48\u4f1a\u7b97\u5440 QAQ\uff09\n\n------\n\n## Code\n\n### \u7b80\u5316\u7248\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nconst int N=105,M=1e3+5;\nconst int mod=31011;\nint n,m,cnt,sum,l[M],r[M],c[M],fa[N];\nstruct Edge {\n\tint u,v,w;\n\tbool operator < (const Edge &b) const {\n\t\treturn w<b.w;\n\t}\n}e[M];\n\nint find(int x) {\n\treturn fa[x]==x?x:find(fa[x]);\n}\nvoid dfs(int now,int x,int num) {\n\tif(now>r[x]) {\n\t\tsum+=(num==c[x]);\n\t\treturn;\n\t}\n\tint fu=find(e[now].u),fv=find(e[now].v);\n\tif(fu!=fv) {\n\t\tfa[fu]=fv;\n\t\tdfs(now+1,x,num+1);\n\t\tfa[fu]=fu,fa[fv]=fv;\n\t}\n\tdfs(now+1,x,num);\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;++i) scanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n\tstd::sort(e+1,e+m+1);\n\tfor(int i=1;i<=n;++i) fa[i]=i;\n\tint tot=0;\n\tfor(int i=1;i<=m;++i) {\n\t\tif(e[i].w!=e[i-1].w) r[cnt]=i-1,l[++cnt]=i;\n\t\tint fu=find(e[i].u),fv=find(e[i].v);\n\t\tif(fu!=fv) ++c[cnt],fa[fu]=fv,++tot;\n\t}\n\tr[cnt]=m;\n\tif(tot!=n-1) return puts(\"0\"),0;\n\tfor(int i=1;i<=n;++i) fa[i]=i;\n\tint ans=1;\n\tfor(int i=1;i<=cnt;++i) {\n\t\tsum=0,dfs(l[i],i,0),ans=ans*sum%mod;\n\t\tfor(int j=l[i];j<=r[i];++j) fa[find(e[j].u)]=find(e[j].v);\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n### \u52a0\u5f3a\u7248\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nconst int N=105,M=1e3+5;\nconst int mod=31011;\nint n,m,tot,fa[N],a[N][N],bel[N],val[N];\nstruct Edge {\n\tint u,v,w;\n\tbool operator < (const Edge &b) const {\n\t\treturn w<b.w;\n\t}\n}e[M],tr[N];\n\nint find(int x) {\n\treturn fa[x]==x?x:fa[x]=find(fa[x]);\n}\nvoid init() {\n\tfor(int i=1;i<=n;++i) fa[i]=i;\n}\nvoid add(int u,int v) {\n\t--a[u][v],--a[v][u],++a[u][u],++a[v][v];\n}\nvoid merge(int x,int y) {\n\tfa[find(x)]=find(y);\n}\nint Gauss(int n) {\n\tint ans=1;\n\tfor(int i=1;i<=n;++i) {\n\t\tfor(int k=i+1;k<=n;++k) {\n\t\t\twhile(a[k][i]) {\n\t\t\t\tint d=a[i][i]/a[k][i];\n\t\t\t\tfor(int j=i;j<=n;++j) a[i][j]=(a[i][j]-1LL*d*a[k][j]%mod+mod)%mod;\n\t\t\t\tstd::swap(a[i],a[k]),ans=-ans;\n\t\t\t}\n\t\t}\n\t\tans=1LL*ans*a[i][i]%mod,ans=(ans+mod)%mod;\n\t}\n\treturn ans;\n}\nbool kruskal() {\n\tstd::sort(e+1,e+m+1);\n\tinit();\n\tint cnt=0;\n\tfor(int i=1;i<=m;++i) {\n\t\tint fu=find(e[i].u),fv=find(e[i].v);\n\t\tif(fu==fv) continue;\n\t\tfa[fu]=fv,tr[++cnt]=e[i];\n\t\tif(e[i].w!=val[tot]) val[++tot]=e[i].w;\n\t}\n\treturn cnt==n-1;\n}\nvoid addTreeEdge(int v) {\n\tfor(int i=1;i<n&&tr[i].w!=v;++i) merge(tr[i].u,tr[i].v);\n\tfor(int i=n-1;i&&tr[i].w!=v;--i) merge(tr[i].u,tr[i].v);\n}\nint getblock() {\n\tint blo=0;\n\tfor(int i=1;i<=n;++i) if(find(i)==i) bel[i]=++blo;\n\tfor(int i=1;i<=n;++i) bel[i]=bel[find(i)];\n\treturn blo;\n}\nvoid rebuild(int v) {\n\tmemset(a,0,sizeof(a));\n\tfor(int i=1;i<=m;++i) if(e[i].w==v) add(bel[e[i].u],bel[e[i].v]);\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;++i) scanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n\tif(!kruskal()) return puts(\"0\"),0;\n\tint ans=1;\n\tfor(int i=1;i<=tot;++i) {\n\t\tinit();\n\t\taddTreeEdge(val[i]);\n\t\tint blo=getblock();\n\t\trebuild(val[i]);\n\t\tans=1LL*ans*Gauss(blo-1)%mod;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1549595713,
        "uid": 49725,
        "name": "Siyuan",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011"
    },
    {
        "content": "\u6b64\u9898\u521a\u770b\u5230\uff08$n \\leq100$\uff09\uff0c\u9996\u5148\u60f3\u5230\u7684\u662f\u66b4\u529b\u641c\u7d22\uff0c\u5c06\u6240\u6709\u7684\u60c5\u51b5\u90fd\u641c\u51fa\u6765\uff0c\u518d\u627e\u5230\u6700\u5c0f\u7684\u51e0\u4e2a\u6570\uff0c\u53d6\u6a21\u3002\n\n\u5728\u770b\u5230\u53d6\u6a21\u65f6\u5c31\u53ef\u610f\u8bc6\u5230\u7206\u641c\u6050\u6015$TLE$\u6ee1\u6ee1\u7684\uff0c\u6240\u4ee5\u518d\u6839\u636e\u6570\u636e\u6765\u5224\u65ad\uff0c\u5e94\u8be5\u641c\u7d22\u662f\u8fc7\u7684\u4e86\u7684\uff0c\u4e0d\u9700\u8981\u9ad8\u7ea7\u7b97\u6cd5\u3002\n\n\u8003\u8651\u4e00\u70b9\uff1a\u5982\u679c\u641c\u7d22\u65f6\u53d1\u73b0\u8be5\u751f\u6210\u6811\u5df2\u7ecf\u5927\u4e8e\u4e86\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e86\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u518d\u964d$n$\n\n\u4f46\u662f\uff08$n \\leq100$\uff09\u7684\u8303\u56f4\u8fd8\u662f\u52c9\u5f3a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7531\u4e0a\u53d1\u73b0\u4e00\u4e2a\u89c4\u5f8b\uff1a\n\n\u5728\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u540c\u4e00\u6743\u503c\u8fb9\u7684\u4e2a\u6570\u662f\u4e0d\u53d8\u7684\u3002\n\n\u51e0\u4e4e\u6240\u6709\u7684\u9898\u89e3\u76f4\u63a5\u5ffd\u7565\u4e86\u8bc1\u660e\uff0c\u5305\u62ec\u697c\u9876\u7684\u90a3\u4e2a\uff0c\u6240\u4ee5\u6211\u6765\u7b80\u5355\u8bc1\u4e00\u4e0b\u3002\n\n\u9996\u5148\u660e\u767d\u6700\u5c0f\u751f\u6210\u6811\u7684\u505a\u6cd5\uff0c\u7528k\u7684\u8bdd\uff0c\u662f\u4ece\u5c0f\u5230\u5927\u9009\u7684\uff0c\u6bcf\u4e00\u6b65\u90fd\u662f\u6700\u4f18\u7684\uff0c\u7136\u800c\u518d\u9009\u4e00\u79cd\u65b9\u6848\uff0c\u7531\u4e8e\u751f\u6210\u6811\u7684\u8fb9\u5fc5\u7136\u662f$n-1$\uff0c\u6240\u4ee5\u8981\u60f3\u4ecd\u6700\u4f18\uff0c\u5f53\u524d\u8fd9\u4e00\u6b65\u7684\u6743\u503c\u5fc5\u7136\u662f\u5c0f\u4e8e\u7b49\u4e8e\u6211\u4eec\u5148\u524d\u627e\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u8be5\u6b65\u6743\u503c\uff0c\u4f46\u662f\u901a\u8fc7\u5012\u8bc1\uff0c\u5982\u679c\u51fa\u73b0\u5c0f\u4e8e\u7684\u60c5\u51b5\uff0c\u5fc5\u7136\u4f1a\u51fa\u73b0\u66f4\u4f18\u7684\u751f\u6210\u6811\uff0c\u4f46\u662f\u663e\u7136\u4e0d\u4f1a\u5b58\u5728\uff0c\u6240\u4ee5\u5728\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u540c\u4e00\u6743\u503c\u8fb9\u7684\u4e2a\u6570\u662f\u4e0d\u53d8\u7684\u3002\n\n\u4e8e\u662f\u4e4e\u6211\u4eec\u53ef\u4ee5\u7206\u641c\u4e86\u3002\n\n\u901a\u8fc7\u4f18\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u641c\u7d22\u6bcf\u4e00\u79cd\u6743\u503c\u7684\u641c\u7d22\u65b9\u6848\uff0c\u518d\u8fd0\u7528\u4e58\u6cd5\u539f\u7406\u76f8\u4e58\uff0c\u53d6\u6a21\u518d\u5f97\u5230\u6700\u4f18\u89e3\u3002\n\n\u56e0\u4e3a\u6a21\u6570\u5c0f\u4e14\u6743\u503c$\\leq 10^9$\u6240\u4ee5\u53ef\u4ee5\u4e0d\u5f00$long long$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node {\n\tint x,y,z;\n}a[1001],b[1001];\nint n,m,i,t,f[1001],d[1001],c[1001],cnt,ans,xx,yy;\nint find(int x)//k\u7b97\u6cd5\n{\n\tif (f[x]==x) return x;\n\tf[x]=find(f[x]);\n\treturn f[x];\n}\nvoid dfs(int now,int k,int x)//now\u8868\u5f53\u524d\u4f4d\u7f6e\uff0ck\u8868\u793a\u52a0\u5165\u8fb9\u6570\uff0cx\u8868\u6743\u503c\u79cd\u7c7b\u5728d\u6570\u7ec4\u4e2d\u4f4d\u7f6e\n{ \n\tif (now>b[x].y)//\u5982\u679c\u641c\u8fc7\u53f3\u7aef\u70b9\n\t  {\n\t  \tif (k==d[x]) cnt++;//\u7b26\u5408\u60c5\u51b5\u5219+1\n\t  \treturn;\n\t  }\n\tint p[101];\n\tfor (int i=1;i<=n;i++) p[i]=f[i];//\u5b58\u50a8\n\txx=find(a[now].x);yy=find(a[now].y);\n\tif (xx!=yy)//\u5982\u679c\u53ef\u4ee5\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\n\t    {\n\t  \tf[xx]=yy;\n\t  \tdfs(now+1,k+1,x);\n\t\t}\n\tfor (int i=1;i<=n;i++) f[i]=p[i];//\u8fd8\u539f\n\tdfs(now+1,k,x);\n\t\n}\nint cmp(node a,node b){return a.z<b.z;}\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tfor (int i=1;i<=m;i++)//\u8f93\u5165\n\t  scanf(\"%d %d %d\",&a[i].x,&a[i].y,&a[i].z);\n\tsort(a+1,a+1+m,cmp);//\u5feb\u6392\u7528\u4e8ek\u7b97\u6cd5\u53ca\u641c\u7d22\u540c\u4e00\u6743\u503c\n\tfor (int i=1;i<=n;i++)//k\u7b97\u6cd5\u521d\u59cb\u5316\n\t  f[i]=i;\n\ta[0].z=-INT_MAX;t=0;\n\tfor (int i=1;i<=m;i++)\n\t  if (a[i].z==a[i-1].z)//\u641c\u7d22\u540c\u4e00\u6743\u503c\u7684\u5de6\u53f3\u4f4d\u7f6e\uff0c\u65b9\u4fbf\u641c\u7d22\n\t    {\n\t    \tb[t].y++;c[i]=t;//y\u8868\u662f\u53f3\u7aef\u70b9\n\t\t}\n\telse {\n\t\tt++;b[t].x=i;b[t].y=i;c[i]=t;//x\u8868\u793a\u5de6\u7aef\u70b9\uff0ct\u8868\u793a\u6743\u503c\u79cd\u6570\n\t    }\n\tcnt=0;\n\tfor (int i=1;i<=m;i++)\n\t  {\n\t  \txx=find(a[i].x);yy=find(a[i].y);//\u5bfb\u627e\u6700\u5c0f\u751f\u6210\u6811\n\t  \tif (xx!=yy) \n\t  \t  {\n\t  \t  \tf[xx]=yy;\n\t  \t  \td[c[i]]++; //d\u5b58\u50a8\u8be5\u6743\u503c\u9700\u8981\u7684\u8fb9\u6570\n\t\t\tcnt++;\n\t\t\t}\n\t\tif (cnt==n-1) break;//\u6700\u5c0f\u751f\u6210\u6811\u627e\u5230\n\t  }\n\tif (cnt!=n-1) {printf(\"0\");exit(0);}//\u6ca1\u627e\u5230\n  for (int i=1;i<=n;i++) f[i]=i;//\u521d\u59cb\n  ans=1;\n  for (int i=1;i<=t;i++)\n    if (d[i]>0)\n    {\n    \tcnt=0;\n    \tdfs(b[i].x,0,i);//\u641c\u7d22\n    \tans=(ans*cnt)%31011;//\u4e58\u6cd5\u539f\u7406\n    \tfor (int j=b[i].x;j<=b[i].y;j++)/\u66f4\u65b0\n    \t  {\n    \t  \txx=find(a[j].x);yy=find(a[j].y);\n    \t  \tif (xx!=yy)\n    \t  \t  {\n    \t  \t  \tf[xx]=yy;\n\t\t\t\t}\n\t\t  } \n\t\n    }\nprintf(\"%d\\n\",ans);\n } \n```",
        "postTime": 1545745797,
        "uid": 119685,
        "name": "Kevin_Wa",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011"
    },
    {
        "content": "#### \u524d\u7f6e\u6280\u80fd:\n#### \u5b9a\u7406\uff1a\u4e00\u5f20\u56fe\u7684\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u6743\u503c\u76f8\u7b49\u7684\u8fb9\u7684\u4e2a\u6570\u4e00\u5b9a\u76f8\u540c\n#### \u8bc1\u660e\uff1a\u4e00\u5f00\u59cb\u96c6\u5408\u4e2d\u4e3a\u7a7a\uff0c\u7136\u540e\u5411\u96c6\u5408\u4e2d\u52a0\u8fb9\uff0c\u5148\u52a0\u6700\u5c0f\u7684\u8fb9\uff0c\u65e0\u8bba\u600e\u6837\u90fd\u4f1a\u52a0\u5230\u4e0d\u80fd\u518d\u52a0\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a\u8fb9\u90fd\u52a0\u5165\u540e\u628a\u73af\u5220\u9664\uff0c\u6b64\u65f6\u51e1\u662f\u80fd\u7528\u8fd9\u79cd\u8fb9\u8fde\u901a\u7684\u70b9\u90fd\u8054\u901a\u4e86\uff0c\u4e4b\u540e\u628a\u76f8\u8fde\u901a\u7684\u70b9\u7f29\u4e3a\u4e00\u4e2a\u70b9\u8003\u8651\uff0c\u7b2c\u4e8c\u6b21\u540c\u7406\u52a0\u5f53\u524d\u6700\u5c0f\u7684\u8fb9\uff08\u6574\u4f53\u7b2c\u4e8c\u5c0f\u7684\u8fb9\uff09......\u7136\u540e\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u5457qwq\n\u4e4b\u540e\u53d1\u73b0\u672c\u9898\u601d\u8def\uff1a\n\n\u5148\u8981\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7edf\u8ba1\u6bcf\u4e00\u79cd\u6743\u503c\u7684\u8fb9\u7684\u4e2a\u6570ha2[i]\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u79cd\u6743\u503c\u7684\u8fb9\uff0c\u53ea\u8981\u5728\u6240\u6709\u8be5\u6743\u503c\u7684\u8fb9\u4e2d\u627e\u51fa\u6709\u591a\u5c11\u79cdha2[i]\u6761\u8fb9\u7684\u7ec4\u5408\u80fd\u751f\u6210\u6700\u5c0f\u751f\u6210\u6811\u3002\n\u7531\u4e8e\u672c\u9898 \n##### \u201c\u6ce8\u610f\uff1a\u5177\u6709\u76f8\u540c\u6743\u503c\u7684\u8fb9\u4e0d\u4f1a\u8d85\u8fc710\u6761\u3002\u201d\n\u6240\u4ee5\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u662f\u54eaha2[i]\u6761\u8fb9\uff0c\u5c06\u5176\u52a0\u5165\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u5f53\u53d1\u73b0\u67d0\u8fb9\u4e24\u9876\u70b9\u5df2\u5728\u540c\u4e00\u5e76\u67e5\u96c6\u4e2d\uff0c\u5219\u6709\u73af\uff0c\u4e0d\u5408\u6cd5\uff0c\u5c06\u5176\u5220\u53bb\u3002\u6700\u540e\u4e58\u6cd5\u539f\u7406\u7edf\u8ba1\u4e00\u4e0b\u7b54\u6848\u5373\u53ef\u3002\n\n##### \u4ee3\u7801\u5982\u4e0b\uff0c\u53ef\u80fd\u4e0d\u5927\u597d\u770b ~~\u975e\u5e38\u4e11\u964b,\u5b83\u53ef\u771f\u957f~~  qwq\uff1a\n\n```\n#include<bits/stdc++.h>\n#define F(x,y,z) for (int x=y;x<=z;++x)\n#define LL long long\n#define ct continue\n#define pb 31011\nusing namespace std;\nLL cnt,n,m,f[105],ans=1,yd[1005],vv[105],s[1005],k,wx[1005],f2[105];\nmap<int,int>ha2;\nmap<int,int>vis;\nstruct edg\n{\n\tint u,v,w;\n}e[1005];\nbool cmp(const edg &aa,const edg &bb)\n{\n\treturn aa.w<bb.w;\n}\nint ask(int x)\n{\n\tif (x==f[x])\n\t\treturn x;\n\tf[x]=ask(f[x]);\n\treturn f[x];\n}\nvoid mer(int x,int y)\n{\n\tf[ask(x)]=ask(y);\n} \nint ask2(int x)\n{\n\tif (x==f2[x])\n\t\treturn x;\n\tf2[x]=ask2(f2[x]);\n\treturn f2[x];\n}\nvoid mer2(int x,int y)\n{\n\tf2[ask2(x)]=ask2(y);\n} \nvoid dfs(int de,int fi)\n{\n\tif (de==fi+1)\n\t\t{\n\t\t\tF(i,1,n)\n\t\t\t\tf2[i]=f[i];\n\t\t\tF(j,1,de-1)\n\t\t\t\t{\n\t\t\t\t\tint i=vv[j];\n\t\t\t\t\tif (ask2(e[wx[i]].u)==ask2(e[wx[i]].v))\n\t\t\t\t\t\treturn;\n\t\t\t\t\telse mer2(e[wx[i]].u,e[wx[i]].v);\n\t\t\t\t}\n\t\t\ts[e[wx[1]].w]++; \n\t\t\ts[e[wx[1]].w]%=pb;\n\t\t\treturn;\n\t\t}\n\tfor (int i=vv[de-1]+1;i<=k;++i)\n\t\tvv[de]=i,dfs(de+1,fi);\n}\nvoid work(int x)\n{\n\tF(i,1,n)\n\t\tf[i]=i;\n\tF(i,1,m)\n\t\tif (e[i].w!=x)\n\t\t\tif (yd[i])\n\t\t\t\tmer(e[i].v,e[i].u);\n\tk=0;\n\tF(i,1,m)\n\t\tif (e[i].w==x)\n\t\t\twx[++k]=i;\n\ts[x]=0;\n\tdfs(1,ha2[x]);\n\tans*=s[x];\n\tans%=pb;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tF(i,1,m)\n\t\t{\n\t\t\tscanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n\t\t} \n\tsort(e+1,e+m+1,cmp);\n\tint i=1;\n\tF(i,1,n)\n\t\tf[i]=i;\n\twhile (i<=m)\n\t\t{\n\t\t\tif (cnt==n-1)\n\t\t\t\tbreak; \n\t\t\tif (ask(e[i].u)!=ask(e[i].v))\n\t\t\t\t{\n\t\t\t\t\tmer(e[i].u,e[i].v);\n\t\t\t\t\tcnt++;\n\t\t\t\t\tha2[e[i].w]++;\n\t\t\t\t\tyd[i]=1;\n\t\t\t\t}\n\t\t\ti++;\n\t\t}\n\tif (cnt!=n-1)\n\t\t{\n\t\t\tprintf(\"0\\n\");\n\t\t\treturn 0;\n\t\t}\n\tF(i,1,m)\n\t\t{\n\t\t\tif (!vis[e[i].w])\n\t\t\t\t{\n\t\t\t\t\tvis[e[i].w]=1;\n\t\t\t\t\twork(e[i].w);\n\t\t\t\t}\t\n\t\t} \n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1536383083,
        "uid": 39223,
        "name": "taoran",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011"
    },
    {
        "content": "### P4208 [JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\n\n\n#### \u5e94\u8be5\u4e86\u89e3\u5230\u7684\uff1a\n - \u5bf9\u4e8e\u4e00\u5f20\u6ca1\u6709\u76f8\u540c\u8fb9\u6743\u7684\u56fe $G$ \u6765\u8bf4\uff0c\u4ed6\u7684\u6700\u5c0f\u751f\u6210\u6811\u662f\u552f\u4e00\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5bfc\u81f4\u56fe $G$ \u7684\u6700\u5c0f\u751f\u6210\u6811 $T$ \u4e0d\u552f\u4e00\u7684\u56e0\u7d20\u662f\u8fb9\u6743\u91cd\u590d\u7684\u8fb9\u3002\u5bf9\u5e94 `kruskal` \u7684\u8fd0\u884c\u8fc7\u7a0b\u6765\u8bf4\uff0c\u5c31\u662f\u5728\u8fb9\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u76f8\u540c\u6743\u503c\u7684\u8fb9\u5185\u90e8\u7684\u5904\u7406\u987a\u5e8f\u3002\n - \u5c3d\u7ba1\u76f8\u540c\u6743\u503c\u7684\u8fb9\u5904\u7406\u987a\u5e8f\u4e0d\u540c\uff0c\u4f46\u662f\u4e0d\u7ba1\u6309\u4ec0\u4e48\u987a\u5e8f\u5904\u7406\u8fd9\u4e9b\u8fb9\uff0c\u6700\u7ec8\u5904\u7406\u5b8c\u8fd9\u79cd\u6743\u503c\u7684\u8fb9\u540e\uff0c\u56fe\u7684\u8054\u901a\u5173\u7cfb\u662f\u76f8\u540c\u7684\u3002\n - \u56e0\u4e3a\u5bf9\u4e8e\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\u5904\u7406\u987a\u5e8f\u5e76\u4e0d\u5f71\u54cd\u540e\u9762\u6bd4\u8fd9\u4e9b\u8fb9\u5927\u7684\u8fb9\u7684\u51b3\u7b56\u60c5\u51b5\u3002\u6240\u4ee5 \u6bcf\u4e00\u7ec4\u6743\u503c\u76f8\u540c\u7684\u8fb9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u662f\u72ec\u7acb\u7684\u3002\u53ef\u4ee5\u5206\u522b\u8003\u8651\u6bcf\u4e00\u7ec4\u6743\u503c\u76f8\u540c\u7684\u8fb9 \u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff0c\u6700\u7ec8\u4e58\u6cd5\u539f\u7406\u7edf\u8ba1\u5373\u53ef\u3002\n\n\n#### \u4e24\u79cd\u89e3\u6cd5\uff1a\n - \u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6743\u503c\u76f8\u540c\u7684\u8fb9\uff0c\u8003\u8651\u5176\u8d21\u732e\u7684\u65b9\u6cd5\n - \u66b4\u529b\u679a\u4e3e\u6bcf\u4e00\u7ec4\u8fb9\n - \u5173\u4e8e\u5176\u4ed6\u9898\u89e3\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\uff1a\n    - \u4f8b\u5982 \u5f53\u524d\u8ba1\u7b97\u8d21\u732e\u7684\u4e00\u7ec4\u5177\u6709\u76f8\u540c\u8fb9\u6743\u7684\u8fb9\uff0c\u5148\u5c06\u4e0e\u5176\u6743\u503c**\u4e0d\u540c**\u7684\u8fb9\u52a0\u5165\u56fe\u4e2d\uff0c\u5f62\u6210\u4e00\u5806\u8fde\u901a\u5757\uff0c\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u518d\u52a0\u5165\u8fd9\u7ec4\u8fb9\uff0c\u5bf9\u5f62\u6210\u7684\u56fe\u505a\u751f\u6210\u6811\u8ba1\u6570\uff0c\u7136\u540e\u8fd9\u5f20\u56fe\u7684\u751f\u6210\u6811\u4e2a\u6570\u5c31\u662f\u8fd9\u7ec4\u8fb9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\n - \u800c\u6211\u60f3\u5230\u7684\u662f\uff1a\n    - \u5982\u679c\u8003\u8651 `kruskal` \u7684\u8fd0\u884c\u8fc7\u7a0b\uff0c\u5bf9\u4e8e\u4e00\u7ec4\u5177\u6709\u76f8\u540c\u6743\u503c\u7684\u8fb9\uff0c\u5176\u8d21\u732e\u7684\u8ba1\u7b97\u65b9\u6cd5\u5e94\u8be5\u662f\u52a0\u5165\u6bd4\u8fd9\u7ec4\u8fb9\u7684\u8fb9\u6743**\u5c0f**\u7684\u6240\u6709\u8fb9\uff0c\u5f62\u6210\u8fde\u901a\u5757 \u7f29\u70b9\uff0c\u518d\u52a0\u5165\u8fd9\u7ec4\u8fb9\uff0c\u5bf9\u5f62\u6210\u7684\u56fe \u901a\u8fc7\u77e9\u9635\u6811\u5b9a\u7406 \u6c42\u751f\u6210\u6811\u8ba1\u6570\u3002\n\n\n#### \u4e24\u79cd\u89e3\u6cd5\u7684\u5f02\u540c\n  - \u5fc5\u987b\u662f\u52a0\u5165\u9664\u4e86\u9009\u5b9a\u7684\u90a3\u4e00\u7ec4\u4ee5\u5916**\u5168\u90e8**\u7684\u8fb9\u4e4b\u540e\uff0c\u5bf9\u6bcf\u4e2a\u8054\u901a\u5757\u7f29\u70b9\uff0c\u518d\u52a0\u5165\u9009\u5b9a\u7684\u90a3\u4e00\u7ec4\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\uff0c\u7edf\u8ba1\u751f\u6210\u6811\u8ba1\u6570\uff0c\u5373\u8fd9\u7ec4\u70b9\u7684\u8d21\u732e\u3002\n  - \u56e0\u4e3a\u5982\u679c\u53ea\u52a0\u5165\u6bd4\u8fd9\u7ec4\u8fb9\u7684\u8fb9\u6743\u5c0f\u7684\u8fb9\uff0c\u53ef\u80fd\u8fd9\u5f20\u56fe\u5e76\u4e0d\u8054\u901a\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u7528\u77e9\u9635\u6811\u5b9a\u7406\u6c42\u5176\u751f\u6210\u6811\u7684\u6570\u91cf\uff0c\u7b54\u6848\u5c06\u4f1a\u662f $0$\u3002\n  - \u66b4\u529b\u7b97\u6cd5\u53ef\u4ee5\u6c42\u51fa\u53ea\u52a0\u5165\u6bd4\u8fd9\u7ec4\u8fb9\u7684\u8fb9\u6743\u5c0f\u7684\u8fb9\u540e\uff0c\u6309\u7167\u4e0d\u540c\u987a\u5e8f\u52a0\u5165\u5f53\u524d\u8fd9\u7ec4\u8fb9\u540e\u5f62\u6210\u7684\u68ee\u6797\u6570\u91cf\uff0c\u800c\u77e9\u9635\u6811\u5b9a\u7406\u53ea\u80fd\u6c42\u51fa\u751f\u6210\u6811\u6570\u91cf\u3002\n  - \u6240\u4ee5\u5982\u679c\u4f7f\u7528\u77e9\u9635\u6811\u5b9a\u7406\u6c42\u6bcf\u7ec4\u8fb9\u8d21\u732e\uff0c\u5fc5\u987b\u52a0\u5165\u8fd9\u7ec4\u4e4b\u5916\u7684\u5168\u90e8\u8fb9\u540e\u624d\u80fd\u8ba1\u6570\u3002\n  - \u53ef\u4ee5\u8bc1\u660e\uff0c\u52a0\u5165\u90e8\u5206\u8fb9\uff0c\u6c42\u4e0b\u4e00\u7ec4\u8fb9\u6309\u4e0d\u540c\u987a\u5e8f\u52a0\u5165\u6c42\u5176\u68ee\u6797\u6570  \u548c  \u52a0\u5165\u9664\u8fd9\u7ec4\u8fb9\u4ee5\u5916\u7684\u6240\u6709\u8fb9\u540e\u6c42\u8054\u901a\u751f\u6210\u6811\u6570 \u8fd9\u4e24\u79cd\u65b9\u6cd5\u662f\u7b49\u4ef7\u7684\u3002\u53ea\u4e0d\u8fc7\u6c42\u68ee\u6797\u6570\u6ca1\u6709\u4ec0\u4e48\u591a\u9879\u5f0f\u89e3\u6cd5\uff0c\u4e0d\u80fd\u50cf\u6c42\u751f\u6210\u6811\u6570\u91cf\u90a3\u6837\u7528\u77e9\u9635\u6811\u5b9a\u7406\u4f18\u5316\u590d\u6742\u5ea6\u3002\n\n#### \u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\n\u53ef\u4ee5\u8003\u8651\u5148\u5efa\u51fa\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u8003\u8651\u67d0\u7ec4\u6743\u503c\u4e3a $w$ \u7684\u8fb9\u65f6\uff0c`dfs` \u6c42\u51fa\u5220\u53bb\u8fd9\u6761\u8fb9\u540e \u6240\u6709\u8fde\u901a\u5757\uff0c\u5bf9\u6240\u6709\u8fde\u901a\u5757\u7f29\u70b9\uff0c\u7136\u540e\u7528 `Matrix-tree` \u6c42\u51fa\u8fd9\u4e00\u7ec4\u8fb9\u52a0\u5165\u540e\u7684\u56fe\u5f62\u6210\u7684\u751f\u6210\u6811\u6570\u91cf\u3002\n\n#### \u4ee3\u7801\n```cpp\n#include <climits>\n#include <cstring>\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\nint read() { int x; scanf(\"%d\", &x); return x; }\nusing namespace std;\nconst int _N = 2e2 + 10;\nconst int _M = 2e3 + 10;\nconst int MOD = 31011;\nint n, m;\nstruct edges{\n    int u, v, w;\n}edge[_M];\nbool CMP(const edges & A, const edges & B) { return A.w < B.w; }\nnamespace Tree{\n    int head[_N];\n    struct edges{\n        int node;\n        int w;\n        int nxt;\n    }edge[_M];\n    int tot = 0;\n    void add(int u, int v, int w) {\n        tot++;\n        edge[tot].node = v;\n        edge[tot].nxt  = head[u];\n        edge[tot].w    = w;\n        head[u]        = tot;\n    }\n    int nodetot = 0;\n    int SCC[_N]; // \u8fd9\u91cc\u7684SCC\u547d\u540d\u5e76\u4e0d\u4e25\u8c28\uff0c\u8fd9\u91cc\u7684SCC\u53ea\u662f\u6307\u7f29\u70b9\u540e\uff0c\u67d0\u4e2a\u539f\u56fe\u70b9\u6240\u5728\u7684\u7f29\u70b9\u7f16\u53f7\u3002\u5982 SCC[i] \u8868\u793a\u539f\u56fe\u4e2d\u7684\u70b9 i \u7f29\u5165\u7684\u70b9\u3002\n    void dfs(int now, int W){\n        SCC[now] = nodetot;\n        for(int i = head[now]; i ;i = edge[i].nxt) {\n            int ex = edge[i].node;\n            if(SCC[ex]) continue; if(edge[i].w == W) continue;\n            dfs(ex, W);\n        }\n    }\n    void initDfs(int x) {\n        nodetot = 0;\n        fill(SCC + 1, SCC + 1 + n, 0);\n        for(int i = 1; i <= n; i++){\n            if(!SCC[i]) ++nodetot, dfs(i, x);\n        }\n    }\n} using Tree::add; using Tree::nodetot; using Tree::SCC; using Tree::initDfs;\n\nint fa[_N];\nvoid init(int n) { for(int i = 1; i <= n; i++) fa[i] = i; }\nint find(int x) { return fa[x] == x ? x : fa[x] = find(fa[x]); }\nvoid merge(int x, int y) { x = find(x); y = find(y); fa[x] = y; }\nbool ask(int x, int y)  { return find(x) == find(y); }\n\nint matrix[_N][_N];\nint det(int n){\n    int ans = 1;\n    for(int i = 1; i <= n; i++) {\n        for(int j = i + 1; j <= n; j++) {\n            while(matrix[j][i]) {\n                int x = matrix[i][i] / matrix[j][i];\n                for(int k = i; k <= n; k++){\n                    matrix[i][k] = (matrix[i][k] -0ll- (matrix[j][k] *1ll* x % MOD) + MOD) % MOD;\n                    swap(matrix[i][k], matrix[j][k]);\n                } ans *= -1;\n            }\n        }\n    }\n    for(int i = 1; i <= n; i++) ans = (ans *1ll* matrix[i][i]) % MOD;\n    return ( ans % MOD + MOD ) % MOD;\n}\nint main(){\n    n = read(), m = read();\n    for(int i = 1; i <= m; i++) {\n        edge[i].u = read();\n        edge[i].v = read();\n        edge[i].w = read();\n    }\n    init(n);\n    sort(edge + 1, edge + 1 + m, CMP);\n    for(int i = 1; i <= m; i++) {\n        edges &now = edge[i];\n        if(ask(now.u, now.v)) continue;\n        add(now.u, now.v, now.w); add(now.v, now.u, now.w);\n        merge(now.u, now.v);\n    }\n    int ans = 1; edge[m + 1].w = INT_MAX;\n    for(int i = 1; i <= m; i++) {\n        int L = i, R;\n        for(R = i; edge[R + 1].w == edge[L].w; R++);\n        cerr << L << \" \" << R << \" \" << edge[L].w << endl;\n        initDfs(edge[L].w);\n        for(int j = L; j <= R; j++) {\n            edges &now = edge[j];\n            matrix[ SCC[now.u] ][ SCC[now.u] ] ++;\n            matrix[ SCC[now.v] ][ SCC[now.v] ] ++;\n            matrix[ SCC[now.u] ][ SCC[now.v] ] --;\n            matrix[ SCC[now.v] ][ SCC[now.u] ] --;\n        }\n        ans = (ans *1ll* det(nodetot - 1)) % MOD;\n        for(int k = 1; k <= nodetot; k++) for(int j = 1; j <= nodetot; j++) matrix[k][j] = 0;        \n        i = R;\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```\n  ",
        "postTime": 1599792836,
        "uid": 44615,
        "name": "ShuYuMo",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011"
    },
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff0c\u5728\u6d1b\u8c37\u535a\u5ba2\u548c[\u535a\u5ba2\u56ed](https://www.cnblogs.com/InductiveSorting-QYF/p/11742332.html)\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\u5bf9\u4e8e\u540c\u4e00\u4e2a\u56fe\u7684\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6743\u503c\u76f8\u7b49\u7684\u8fb9\u7684\u6570\u91cf\u76f8\u540c\u3002\n\n\u3000\u3000\u53ef\u4ee5\u7b80\u5355\u8bc1\u660e\u4e00\u4e0b\uff1a\n\n\uff5c\u3000\u3000\u6211\u4eec\u53ef\u4ee5\u4ecekruskal\u7684\u8fc7\u7a0b\u8003\u8651\u3002\u8fd9\u4e2a\u7b97\u6cd5\u628a\u6240\u6709\u8fb9\u6309\u6743\u503c\u5927\u5c0f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u6309\u987a\u5e8f\u770b\u6bcf\u6761\u8fb9\uff0c\u53ea\u8981\u52a0\u4e0a\u8fd9\u6761\u8fb9\u540e\u4e0d\u4f1a\u5f62\u6210\u8fde\u901a\u5757\uff0c\u5c31\u52a0\u4e0a\u3002\n\n\uff5c\u3000\u3000\u4ee5\u4e0a\u8fc7\u7a0b\u5176\u5b9e\u7b49\u4ef7\u4e8e\u5148\u5c06\u6240\u6709\u6743\u503c\u7b49\u4e8e\u7b2c\u4e00\u6761\u8fb9\u7684\u8fb9\u90fd\u52a0\u8fdb\u56fe\u4e2d\uff0c\u7136\u540e\u4e00\u4e2a\u4e2a\u5220\u8fb9\uff0c\u4f7f\u56fe\u4e2d\u65e0\u73af\u3002\u8bbe\u6743\u503c\u7b49\u4e8e\u7b2c\u4e00\u6761\u8fb9\u7684\u8fb9\u6570\u4e3ai\uff0c\u4e0b\u6b21\u518d\u5c06\u6240\u6709\u6743\u503c\u7b49\u4e8e\u7b2ci+1\u6761\u8fb9\u7684\u8fb9\u90fd\u52a0\u8fdb\u56fe\u4e2d\u3002\u3002\u3002\u76f4\u81f3\u7b97\u8fc7\u6700\u540e\u4e00\u6761\u8fb9\uff0c\u6216\u56fe\u4e2d\u521a\u597d\u5269\u4e0b\u4e86n-1\u6761\u8fb9\uff08n\u4e3a\u56fe\u7684\u70b9\u7684\u4e2a\u6570\uff09\u3002\n\n\uff5c\u3000\u3000\u53d1\u73b0\u52a0\u5b8c\u4e00\u6279\u8fb9\u540e\u8981\u5220\u7684\u8fb9\u7684\u4e2a\u6570\u7b49\u4e8e\u5f62\u6210\u7684\u201c\u6700\u5c0f\u73af\u201d\u7684\u4e2a\u6570\uff08\u8fd9\u91cc\u6700\u5c0f\u73af\u662f\u6307\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6700\u5c0f\u73af\uff0c\u4e0d\u5b58\u5728\u4e00\u7ec4\u8fb9\u4f7f\u5f97\u901a\u8fc7\u8fd9\u7ec4\u8fb9\u628a\u73af\u201c\u4ece\u4e2d\u95f4\u5207\u5f00\u201d\u540e\uff0c\u88ab\u5207\u5f00\u7684\u73af\u7684\u4e24\u90e8\u5206\u53ef\u4e0e\u8fd9\u7ec4\u8fb9\u5f62\u6210\u4e24\u4e2a\u65b0\u73af\uff08\u5373\u4e0d\u662f\u4f9d\u7167\u56fd\u9645\u6807\u51c6\u7684\u5b9a\u4e49\uff0c\u800c\u662f\u4e3a\u4e86\u65b9\u4fbf\u5728\u672c\u6587\u73b0\u5b9a\u4e49\u7684\uff09\uff1b\u540c\u65f6\u6700\u5c0f\u73af\u8fb9\u6570\u4e0d\u4e00\u5b9a\u5c0f\uff09\u3002\n\n\uff5c\u3000\u3000\u3000\u3000\u4e3a\u4ec0\u4e48\u5462\uff1f\u4ece\u4e00\u4e2a\u6700\u5c0f\u73af\u5f00\u59cb\u8003\u8651\uff1a\n\n\uff5c\u3000\u3000\u3000\u3000\u3000\u3000\u82e5\u4e0d\u5b58\u5728\u5176\u4ed6\u7684\u67d0\u4e2a\u6700\u5c0f\u73afv\u4e0e\u8fd9\u4e2a\u73afu\u6709\u516c\u5171\u8fb9\uff0c\u90a3\u4e48\u53ea\u8981\u4efb\u610f\u5220\u4e00\u6761\u8fb9\u5c31\u80fd\u51cf\u5c11\u4e00\u4e2a\u6700\u5c0f\u73af\u3002\n\n\uff5c\u3000\u3000\u3000\u3000\u3000\u3000\u82e5\u5b58\u5728\uff0c\u8fd9\u65f6\u5220\u8fb9\u5c31\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n\uff5c\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u5220\u516c\u5171\u8fb9\uff1a\u9996\u5148u\u548cv\u539f\u6765\u7684\u6700\u5c0f\u73af\u5f62\u6001\u90fd\u4f1a\u88ab\u7834\u574f\uff0c\u6700\u5c0f\u73af\u6570\u76ee-2\u3002\u7136\u540e\uff0c\u53d1\u73b0u\u548cv\u5269\u4e0b\u7684\u90e8\u5206\u53c8\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2a\u65b0\u7684\u6700\u5c0f\u73af\uff0c\u6240\u4ee5\u6700\u5c0f\u73af\u7684\u6570\u76ee\u53c8+1\u3002\u6240\u4ee5\u6700\u5c0f\u73af\u6570\u76ee-1\uff1b\n\n\uff5c\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u4e0d\u5220\u516c\u5171\u8fb9\uff1au\u7684\u6700\u5c0f\u73af\u5f62\u6001\u88ab\u7834\u574f\uff0c\u4e14\u4e0d\u4f1a\u751f\u6210\u65b0\u7684\u6700\u5c0f\u73af\uff0c\u6240\u4ee5\u6700\u5c0f\u73af\u6570\u76ee-1\u3002\n\n\uff5c\u3000\u3000\u3000\u3000\u3000\u3000\u7efc\u4e0a\uff0c\u53ef\u77e5\u8981\u5220\u7684\u8fb9\u7684\u6570\u76ee==\u6700\u5c0f\u73af\u7684\u6570\u76ee\uff0c\u4e14\u8981\u5220\u7684\u8fb9\u53ef\u662f\u6700\u5c0f\u73af\u4e0a\u7684\u4efb\u610f\u8fb9\u3002\n\n\uff5c\u3000\u3000\u3000\u3000\u7531\u4e8e\u52a0\u5b8c\u4e00\u6279\u8fb9\u540e\uff0c\u6700\u5c0f\u73af\u7684\u6570\u76ee\u786e\u5b9a\uff0c\u6240\u4ee5\u5220\u7684\u8fb9\u7684\u6570\u76ee\u4e5f\u786e\u5b9a\u3002\u6545\u56fe\u751f\u6210\u7684\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u76f8\u7b49\u7684\u8fb9\u6570\u76ee\u4e5f\u76f8\u7b49\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u8dd1\u4e00\u6b21\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8bb0\u5f55\u4e0b\u6bcf\u79cd\u8fb9\u6743\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\n\n\uff5c\u3000\u3000\u540c\u65f6\u6211\u4eec\u8fd8\u53d1\u73b0\uff0c\u5f53\u5904\u7406\u5b8c\u4e00\u6279\u6743\u503c\u7b49\u4e8ex\u7684\u8fb9\u540e\uff0c\u8fd9\u4e2a\u56fe\u7684\u8fde\u901a\u6027\uff08\u5373\u90fd\u6709\u54ea\u4e9b\u70b9\u8fde\u901a\uff09\u662f\u552f\u4e00\u7684\u3002\u5373\u4f7f\u4e0d\u7528kruskal\u505a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8bbe\u7528\u4e86\u7b97\u6cd5A\u505a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5982\u679c\u53ea\u4fdd\u7559\u6743\u503c\u7b49\u4e8ex\u7684\u8fb9\uff0c\u90a3\u4e48\u4fdd\u7559\u7684\u56fe\u7684\u8fde\u901a\u6027\u4e0e\u7528kruskal\u505a\u5230\u5904\u7406\u5b8c\u6743\u503c\u7b49\u4e8ex\u7684\u8fb9\u65f6\u662f\u4e00\u6837\u7684\u3002\u5426\u5219\uff0c\u53ea\u53ef\u80fd\u8fde\u901a\u7684\u70b9\u6570\u5c0f\u4e8e\u7528kruskal\u505a\u5230\u65f6\u7684\u8fde\u901a\u7684\u70b9\u6570\uff08\u56e0\u4e3akruskal\u5168\u90e8\u5730\u8003\u8651\u8fc7\u4e86\u6743\u503c\u7b49\u4e8ex\u7684\u8fb9\uff0c\u5176\u4ed6\u7b97\u6cd5\u4e0d\u53ef\u80fd\u6bd4\u5168\u90e8\u8fd8\u591a\u5427\uff09\u3002\u4f46\u8fd9\u662f\u4e0d\u6210\u7acb\u7684\uff0c\u56e0\u4e3a\u82e5\u6210\u7acb\uff0c\u5c31\u8bf4\u660e\u7528kruskal\u505a\u7684\u6700\u5c0f\u751f\u6210\u6811X\u4e2d\u6743\u503c\u7b49\u4e8ex\u7684\u8fb9\u6bd4A\u7b97\u6cd5\u5f97\u5230\u7684\u6700\u5c0f\u751f\u6210\u6811Y\u4e2d\u6743\u503c\u7b49\u4e8ex\u7684\u8fb9\u7684\u8fb9\u6570\u591a\u4e00\u3002\u7531\u4e8ekruskal\u662f\u4ece\u5c0f\u8fb9\u5f00\u59cb\u8d2a\u5fc3\u8003\u8651\u6240\u6709\u8fb9\u7684\uff0c\u90a3\u4e48X\u7684\u6743\u503c\u548c\u4e00\u5b9a\u5c0f\u4e8eY\uff0c\u4e0eY\u662f\u6700\u5c0f\u751f\u6210\u6811\u77db\u76fe\uff1b\u5e76\u4e14\u8fd9\u4e5f\u4e0e\u4e0a\u6587\u7684\u5b9a\u7406\u77db\u76fe\u3002\n\n\uff5c\u3000\u3000\u8bbe\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u7684\u6743\u503c\u4ece\u5c0f\u5230\u5927\u5206\u522b\u4e3ax1,x2,...,xk\uff0c\u90a3\u4e48\u6784\u9020\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u53ea\u9700\u8981\u5206k\u6b65\uff0c\u6bcf\u6b65\u90fd\u662f\u5728\u524d\u9762\u6b65\u9aa4\u90fd\u505a\u4e86\u7684\u57fa\u7840\u4e0a\uff0c\u9009\u62e9\u4e00\u4e2a\u5bf9\u6240\u6709\u6743\u503c\u7b49\u4e8ex\u7684\u8fb9\u7684\u4fdd\u7559\u65b9\u6848\u3002\u7531\u4e8e\u6bcf\u6b65\u9020\u6210\u7684\u5bf9\u8fde\u901a\u6027\u7684\u5f71\u54cd\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5373\u6bcf\u6b65\u7684\u7ed3\u679c\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e58\u6cd5\u539f\u7406\uff0c\u5c06\u6bcf\u6b65\u7684\u4fdd\u7559\u65b9\u6848\u6570\u4e58\u8d77\u6765\u518d\u53bb\u6a21\u5c31\u662f\u7b54\u6848\u4e86\u3002\n\n\uff5c\u3000\u3000\u600e\u4e48\u6c42\u6bcf\u6b65\u7684\u4fdd\u7559\u65b9\u6848\u6570\u5462\uff1f\u7531\u4e8e\u9898\u76ee\u9650\u5236\u6743\u503c\u76f8\u7b49\u7684\u8fb9\u4e0d\u8d85\u8fc710\u6761\uff0c\u6240\u4ee5\u7528dfs\u679a\u4e3e\u5c31\u662f\u4e86\uff0c\u540c\u65f6\u53ef\u7528\u5e76\u67e5\u96c6\u9a8c\u8bc1\u53ef\u884c\u6027\u3002\u6ce8\u610f\uff1a\u5982\u679cdfs\u8981\u56de\u6eaf\u5230\u4e4b\u524d\u72b6\u6001\uff0c\u90a3\u4e48\u5e76\u67e5\u96c6\u4e0d\u80fd\u8def\u5f84\u538b\u7f29\uff0c\u5426\u5219\u5e76\u67e5\u96c6\u7684\u72b6\u6001\u96be\u4ee5\u56de\u6eaf\u5230\u4e4b\u524d\u7684\u72b6\u6001\u3002\n  \n\uff5c \u65f6\u95f4\u590d\u6742\u5ea6:O(2^n\u3000*m\uff09\n  \n \u6ee1\u5206\u4ee3\u7801\uff1a\n ```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N=105,M=1005,mod=31011;\n\nstruct Edge{\n    int from,to,len;\n}e[M];\n\nint n,m,f[N],l[M],r[M],cnt,tot,ecnt[M];\nint x;\n\nchar ch;\n\ninline int read()\n{\n    x=0;\n    ch=getchar();\n    while(!isdigit(ch)) ch=getchar();\n    while(isdigit(ch)) x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n    return x;\n}\n\ninline bool cmp(const Edge &a,const Edge &b)\n{\n    return a.len<b.len;\n}\n\nint yfa(int u)\n{\n    if(u==f[u]) \n        return u;\n    else \n        return f[u]=yfa(f[u]);\n}    \n\nint fa(int u)\n{\n    if(u==f[u])\n        return u;\n    else\n        return fa(f[u]);\n}\n//\u80fd/\u4e0d\u80fd\u8def\u5f84\u538b\u7f29\u7684\u5e76\u67e5\u96c6\u67e5\u627e \nvoid dfs(int wei,int kin,int had)//\u5f53\u524d\u770b\u7684\u8fb9\u6570\u7ec4\u7684\u4f4d\u7f6e\uff0c\u5f53\u524d\u770b\u7684\u8fb9\u7684\u79cd\u7c7b\uff0c\u5f53\u524d\u5df2\u7ecf\u53d6\u7684\u8fb9\u7684\u6570\u76ee \n{\n    int b1,b2;\n    b1=fa(e[wei].from);//dfs\u8981\u56de\u6eaf\u72b6\u6001\uff0c\u6240\u4ee5dfs\u91cc\u5e76\u67e5\u96c6\u67e5\u627e\u64cd\u4f5c\u4e0d\u80fd\u8def\u5f84\u538b\u7f29 \n    b2=fa(e[wei].to);\n    if(r[kin]-wei+1+had==ecnt[kin])//\u5982\u679c\u5df2\u7ecf\u53d6\u7684\u8fb9\u7684\u6570\u76ee+\u8fd8\u80fd\u53d6\u7684\u6570\u76ee=\u8981\u53d6\u7684\u8fb9\u7684\u6570\u76ee\uff0c\u5c31\u53ea\u80fd\u53d6\u4e86 \n    {\n        if(b1==b2) return;\n        if(had==ecnt[kin]-1) \n        {\n            cnt++;\n            return;\n        }\n        f[b1]=b2;\n        dfs(wei+1,kin,had+1);\n        f[b1]=b1;\n        return;\n    }\n    if(b1!=b2)\n    {\n        if(had+1==ecnt[kin])\n            cnt++;\n        else\n        {\n            f[b1]=b2;\n            dfs(wei+1,kin,had+1);\n            f[b1]=b1;\n        }\n    }\n        dfs(wei+1,kin,had);\n}\n\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=m;++i)\n        e[i].from=read(),e[i].to=read(),e[i].len=read();\n    sort(e+1,e+m+1,cmp);\n    for(int i=1;i<=n;++i)\n        f[i]=i;\n    int u,v;\n    for(int i=1;i<=m;++i)\n    {\n        if(e[i].len==e[i-1].len)\n        {\n            r[tot]++;\n        }\n        else\n        {\n            ++tot;\n            l[tot]=r[tot]=i;\n        }\n        if(cnt<n-1)\n        {\n            u=yfa(e[i].from),v=yfa(e[i].to);\n            if(u!=v)\n            {\n                ecnt[tot]++;\n                f[u]=v;\n                cnt++;\n            }\n        }\n    }\n    if(cnt<n-1)//\u6ce8\u610f\u65e0\u89e3\u65f6\u7684\u5224\u65ad \n    {\n        printf(\"0\");\n        return 0;\n    }\n    long long ans=1;\n    for(int i=1;i<=n;++i) f[i]=i;\n    for(int i=1;i<=tot;++i) \n        if(ecnt[i])\n        {\n            cnt=0;\n            dfs(l[i],i,0);\n            ans=(ans*cnt)%mod;\n            for(int j=l[i];j<=r[i];++j)//\u66f4\u65b0\u5f53\u524d\u6b65\u9aa4\u505a\u5b8c\u65f6\u56fe\u7684\u8fde\u901a\u6027 \n            {\n                u=yfa(e[j].from);\n                v=yfa(e[j].to);\n                if(u!=v) \n                    f[u]=v;\n            }\n        }\n    printf(\"%lld\",ans);\n    return 0;\n}\n```\n\u6b22\u8fce\u63d0\u95ee\u3002\n\n\uff08\u5199\u7684\u6709\u70b9\u591a\uff0c\u5e94\u8be5\u80fd\u61c2\u5427\uff09\n\n\uff08\u61c2\u4e86\u7684\u8bdd\u4e0d\u59a8\u70b9\u4e2a\u8d5e\uff0c\u8ba9\u66f4\u591a\u7684\u4eba\u770b\u5230\uff09\n\uff08\u6ca1\u6709\u61c2\u7684\u8bdd\uff0c\u4e0d\u7528\u541d\u556c\u8bc4\u8bba\u529f\u80fd\u7684\u4f7f\u7528\uff0c\u4f5c\u8005\u4f1a\u79ef\u6781\u7b54\u7591\uff09",
        "postTime": 1572061748,
        "uid": 45543,
        "name": "YHASDY",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5c31\u662f\u8981\u6c42\u4f60\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e2a\u6570\n\n\u4f46\u662f\u5982\u4f55\u624d\u80fd\u6c42\u51fa\u4e2a\u6570\u5462?\n\n\u6211\u4eec\u9996\u5148\u660e\u786e\u4e00\u4e2a\u5b9a\u7406\n\n\u5bf9\u4e8e\u6240\u6709\u7684\u6700\u5c0f\u751f\u6210\u6811,\u5b83\u4eec\u7684\u6743\u503c\u76f8\u540c\u7684\u8fb9\u7684\u4e2a\u6570\u662f\u4e00\u6837\u7684\n\n\u6211\u4eec\u5982\u4f55\u8bc1\u660e\u8fd9\u4e2a\u5b9a\u7406\u5462?\n\n\u6211\u4eec\u9996\u5148\u6c42\u51fa\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\n\n\u6211\u4eec\u968f\u4fbf\u52a0\u4e00\u6761\u8fb9\n\n\u6211\u4eec\u5c31\u5fc5\u987b\u5728\u8fd9\u4e2a\u73af\u4e0a\u5220\u53bb\u4e00\u6761\u8fb9\n\n\u4f46\u662f\u5982\u679c\u6211\u4eec\u5220\u53bb\u7684\u8fb9\u6bd4\u52a0\u5165\u7684\u8fb9\u5c0f\n\n\u5c82\u4e0d\u662f\u5c31\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e86?\n\n\u4f46\u662f\u5982\u679c\u76f8\u53cd,\u90a3\u4e48\u6700\u5f00\u59cb\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u5c31\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e86?\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u5b9a,\u6211\u4eec\u5220\u53bb\u4e00\u6761\u8fb9,\u518d\u52a0\u4e0a\u4e00\u6761\u8fb9\n\n\u8fd9\u4e24\u4e2a\u8fb9\u4e00\u5b9a\u662f\u76f8\u7b49\u7684\n\n\u90a3\u4e48\u5f88\u663e\u7136,\u6700\u5c0f\u751f\u6210\u6811\u4e2d,\u6743\u503c\u4e0d\u76f8\u540c\u7684\u8fb9\u662f\u4e0d\u4f1a\u4e92\u76f8\u5e72\u6270\u7684\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u51fa\u6bcf\u4e2a\u6743\u503c\u76f8\u540c\u7684\u8fb9\u6709\u591a\u5c11\u4e2a\u4e0d\u6210\u73af\u7684\u7ec4\u5408\u65b9\u5f0f\n\n\u7136\u540e\u4e58\u6cd5\u539f\u7406\u641e\u4e00\u4e0b,\u4e0d\u5c31\u884c\u4e86\u5417?\n\n\u4f46\u662f\u6709\u4e00\u4e9b\u5c0f\u7ec6\u8282\n\n\u6bd4\u5982\u4e0d\u80fd\u8def\u5f84\u538b\u7f29,\u56e0\u4e3a\u538b\u7f29\u4e86\u5c82\u4e0d\u662f\u5c31\u4e0d\u80fd\u56de\u6eaf\u4e86?\n\n\u56e0\u4e3a\u56de\u6eaf\u6211\u4eec\u7528\u7684\u662f\u5c06\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u8bbe\u4e3a\u81ea\u5df1\n\n```\n#include<bits/stdc++.h>\n#define MOD 31011\n#define M 1011\n#define N 111\nusing namespace std;\nstruct Edge{\n\tint x,y,z;\n\tinline bool operator<(const Edge &p)const{\n\t\treturn z<p.z;\n\t}\n}ed[M];\nstruct remember{\n\tint st,ed,ci;\n}re[M];\nint cnt;\nint fa[N];\ninline int find(int k){\n\treturn k==fa[k]?k:find(fa[k]);\n}\ninline void un(int x,int y){\n\tx=find(x);y=find(y);\n\tfa[x]=y;\n}\nint sum;\ninline void dfs(int k,int now,int s){\n\tif(now==re[k].ed+1){\n\t\tif(s==re[k].ci)++sum;\n\t\treturn;\n\t}\n\tint x=find(ed[now].x),y=find(ed[now].y);\n\tif(x!=y){\n\t\tfa[x]=y;\n\t\tdfs(k,now+1,s+1);\n\t\tfa[x]=x;fa[y]=y;\n\t}\n\tdfs(k,now+1,s);\n}\nint main( ){\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tint i,j,x,y,z;\n\tfor(i=1;i<=m;++i){\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\ted[i]=Edge{x,y,z};\n\t}\n\tfor(i=1;i<=n;++i)fa[i]=i;\n\tsort(ed+1,ed+m+1);\n\tint tot(0);\n\tfor(i=1;i<=m;i++)re[i].ci=0;\n\tfor(i=1;i<=m;++i){\n\t\tif(ed[i].z!=ed[i-1].z){re[cnt].ed=i-1;re[++cnt].st=i;}\n\t\tx=ed[i].x;y=ed[i].y;\n\t\tif(find(x)!=find(y)){++re[cnt].ci;un(x,y);++tot;}\n\t}\n\tre[cnt].ed=m;\n\tif(tot!=n-1){puts(\"0\");return 0;}\n\tint ans(1);\n\tfor(i=1;i<=n;++i)fa[i]=i;\n\tfor(i=1;i<=cnt;++i){\n\t\tsum=0;\n\t\tdfs(i,re[i].st,0);\n\t\tans=ans*sum%MOD;\n\t\tfor(j=re[i].st;j<=re[i].ed;++j)\n\t\tif(find(ed[j].x)!=find(ed[j].y))un(ed[j].x,ed[j].y);\n\t}\n\tprintf(\"%d\",ans);\n}\n```",
        "postTime": 1595471286,
        "uid": 117658,
        "name": "Space_Gold_Trash",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011"
    },
    {
        "content": "### [\u9898\u610f](https://blog.csdn.net/BeNoble_/article/details/79745850)\n\n\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\n\n---\n\n### \u9898\u89e3\n\n\u8003\u8651\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e24\u4e2a\u6027\u8d28\uff1a \n\n>$1.$\u4e0d\u540c\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d,\u6bcf\u79cd\u6743\u503c\u7684\u8fb9\u51fa\u73b0\u7684\u4e2a\u6570\u662f\u786e\u5b9a\u7684 \n>$2.$\u4e0d\u540c\u7684\u751f\u6210\u6811\u4e2d,\u67d0\u4e00\u79cd\u6743\u503c\u7684\u8fb9\u8fde\u63a5\u5b8c\u6210\u540e,\u5f62\u6210\u7684\u8054\u901a\u5757\u72b6\u6001\u662f\u4e00\u6837\u7684 \n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\u653e\u5728\u4e00\u8d77\u5904\u7406\n\n\u4e3e\u4e2a\u4f8b\u5b50~~(\u56fe\u7247\u662f\u7f51\u4e0a\u4e0b\u7684)~~\n\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdn.net/20180329153140581?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlTm9ibGVf/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\u5176\u4e2d\u865a\u7ebf\u8fb9\u8868\u793a\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\n\n\u5047\u8bbe\u5176\u4e2d\u6bcf\u4e2a\u8054\u901a\u5757\u5185\u7684\u7b54\u6848\u5df2\u7ecf\u7b97\u5b8c\u4e86,\u8003\u8651\u7f29\u70b9\n\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdn.net/20180329153324470?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JlTm9ibGVf/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\u90a3\u4e48\u6211\u4eec\u7528\u77e9\u9635\u6811\u5b9a\u7406\u53ef\u4ee5\u7b97\u51fa\u4e0a\u56fe\u7684\u751f\u6210\u6811\u7684\u4e2a\u6570\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u5728$Kruskal$\u4e2d\u5904\u7406\u5b8c\u4e00\u79cd\u8fb9\u6743\u7684\u8fb9\u540e\u505a\u4e00\u904d\u5f53\u524d\u8fd9\u4e9b\u8054\u901a\u5757\u7684\u751f\u6210\u6811\u8ba1\u6570\u5c31\u597d\u4e86\n\n\u7136\u540e\u6839\u636e\u4e58\u6cd5\u539f\u7406\u628a\u6bcf\u4e00\u79cd\u8fb9\u6743\u7684\u7b54\u6848\u4e58\u5c31\u597d\u4e86\n\n\u5177\u4f53\u600e\u4e48\u5904\u7406\u8054\u901a\u5757\n\n\u6211\u4eec\u7528$belong$\u8868\u793a\u5408\u5e76\u4e4b\u524d\u7684\u8fd9\u4e2a\u70b9\u6240\u5c5e\u7684\u8054\u901a\u5757(\u5373$s_1,s_2,s_3$),$fa$\u8868\u793a\u8fde\u4e86\u5f53\u524d\u8fd9\u79cd\u957f\u7684\u8fb9\u540e\u8fd9\u4e2a\u70b9\u6240\u5c5e\u7684\u8054\u901a\u5757(\u6574\u4e2a\u4e00\u5768)\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6574\u7684\u8054\u901a\u5757$fa$,\u6211\u4eec\u8bb0\u5f55\u5176\u4e2d\u5f53\u524d\u6240\u6709\u957f\u5ea6\u7684\u8fb9$(u,v)$\n\n\u7f29\u70b9\u4e4b\u540e\u5c31\u662f$(belong_u,belong_v)$,\u4e5f\u5c31\u662f\u53ea\u8981\u6c42\u5f53\u524d\u7684$belong$\u5f62\u6210\u7684\u57fa\u5c14\u970d\u592b\u77e9\u9635\u7684\u503c\u5c31\u597d\u4e86\n\n\u56e0\u4e3a\u8fd9\u9898\u7684\u6a21\u6570\u4e0d\u662f\u8d28\u6570\u6240\u4ee5\u8981\u7528\u5230\u8f97\u8f6c\u76f8\u9664\u6765\u89e3\u884c\u5217\u5f0f\n```\n#include<bits/stdc++.h>\n#define fp(i,a,b) for(register int i=a,I=b+1;i<I;++i)\n#define fd(i,a,b) for(register int i=a,I=b-1;i>I;--i)\n#define go(u) for(register int i=fi[u],v=e[i].to;i;v=e[i=e[i].nx].to)\n#define file(s) freopen(s\".in\",\"r\",stdin),freopen(s\".out\",\"w\",stdout)\ntemplate<class T>inline bool cmax(T&a,const T&b){return a<b?a=b,1:0;}\ntemplate<class T>inline bool cmin(T&a,const T&b){return a>b?a=b,1:0;}\nusing namespace std;\nconst int N=105,M=1005,P=31011;\ntypedef int arr[N];\nstruct eg{int u,v,w;}e[M];\nint n,m,ans=1;arr fa,bl,vis,g[N],G[N];vector<int>s[N];\nint gf(int u,int*fa){return fa[u]==u?u:fa[u]=gf(fa[u],fa);}\ninline int pls(int a,int b){return a+=b,a>=P?a-P:a;}\ninline int sub(int a,int b){return a-=b,a<0?a+P:a;}\ninline int det(int n){\n    int a,b,t,f=1,tp=1;\n    fp(i,1,n)fp(j,1,n)G[i][j]=pls(P,G[i][j]);\n    fp(i,1,n){\n        fp(j,i+1,n){\n            a=G[i][i],b=G[j][i];\n            while(b){\n                t=a/b;a%=b;swap(a,b);\n                fp(k,i,n)G[i][k]=sub(G[i][k],t*G[j][k]%P);\n                fp(k,i,n)swap(G[i][k],G[j][k]);f=-f;\n            }\n        }\n        if(!G[i][i])return 0;\n        tp=tp*G[i][i]%P;\n    }\n    return pls(P,f*tp);\n}\ninline void calc(){\n    fp(i,1,n)if(vis[i]){s[gf(i,fa)].push_back(i);vis[i]=0;}\n    fp(i,1,n)if(s[i].size()>1){\n        int t=s[i].size(),*a=s[i].data();\n        memset(G,0,sizeof G);\n        fp(j,1,t)fp(k,j+1,t){\n            int u=a[j-1],v=a[k-1];\n            if(g[u][v]){\n                G[j][k]=G[k][j]=-g[u][v];\n                G[j][j]+=g[u][v],G[k][k]+=g[u][v];\n            }\n        }\n        ans=ans*det(t-1)%P;\n        fp(j,1,t)bl[a[j-1]]=i;\n    }\n    fp(i,1,n)s[i].clear(),fa[i]=bl[i]=gf(i,bl);\n}\ninline bool cmp(const eg&a,const eg&b){return a.w<b.w;}\nint main(){\n    #ifndef ONLINE_JUDGE\n        file(\"s\");\n    #endif\n    scanf(\"%d%d\",&n,&m);\n    fp(i,1,n)fa[i]=bl[i]=i;\n    fp(i,1,m)scanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n    sort(e+1,e+m+1,cmp);e[0]=e[1];\n    fp(i,1,m){\n        if(e[i].w^e[i-1].w)calc();\n        int u=gf(e[i].u,bl),v=gf(e[i].v,bl);\n        if(u^v){\n            vis[u]=vis[v]=1;\n            ++g[u][v],++g[v][u];\n            fa[gf(u,fa)]=gf(v,fa);\n        }\n    }calc();\n    fp(i,2,n)if(bl[i]^bl[i-1])return puts(\"0\"),0;\n    printf(\"%d\",ans);\nreturn 0;\n}\n```",
        "postTime": 1522314664,
        "uid": 20156,
        "name": "Kelin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011"
    },
    {
        "content": "# \u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011\n\n\u200b\t\u5148\u8bf4\u660e\u4e00\u4e0b\uff0c\u6211\u662f\u770b\u4e86 foreverlastnig\u5927\u795e\u7684\u9898\u89e3\u540e\u624d\u5199\u7684\u8fd9\u9053\u9898\uff0c\u6240\u4ee5\u4ee3\u7801\u6bd4\u8f83\u76f8\u4f3c\u3002\u8fd9\u91cc\u4e5f\u4ec5\u4ec5\u662f\u5bf9\u5404\u4f4d\u5927\u4f6c\u7684\u9898\u89e3\u7684\u4e00\u4e9b\u5c0f\u5c0f\u7684\u8865\u5145\u3002\n\n\u200b\t\u5173\u4e8e\u5177\u4f53\u7684\u601d\u8def\u548c\u5b9a\u7406\u7684\u8bc1\u660e\uff0c\u5f88\u591a\u5927\u4f6c\u90fd\u5b8c\u6574\u7684\u8bb2\u89e3\u8fc7\u4e86\uff0c\u6211\u9488\u5bf9\u6211\u81ea\u5df1\u5728\u601d\u8003\u8fd9\u9053\u9898\u65f6\u7684\u4e00\u4e9b\u7591\u60d1\u505a\u4e00\u4e9b\u8865\u5145\u3002\n\n1. \u4e3a\u4ec0\u4e48\u6309\u7167\u5404\u79cd\u6743\u503c\u56fa\u5b9a\u7684\u6b21\u6570\u9009\u53d6\u4e00\u5b9a\u80fd\u6210\u4e3a\u6700\u5c0f\u751f\u6210\u6811\uff1f\u5f88\u591a\u4eba\u8bc1\u660e\u4e86\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u76f8\u540c\u6743\u503c\u7684\u8fb9\u51fa\u73b0\u7684\u6b21\u6570\u4e00\u5b9a\u662f\u76f8\u7b49\u7684\u3002\u4f46\u53cd\u8fc7\u6765\u5728\u9009\u53d6\u4e86\u8fd9\u4e9b\u8fb9\u4e4b\u540e\u4e3a\u4ec0\u4e48\u4f1a\u5f62\u6210\u5b8c\u6574\u7684\u6811\u5462\uff1f\u5176\u5b9e\u8fd9\u662f\u4e00\u4e2a\u5f88\u5f31\u667a\u7684\u95ee\u9898\uff0c\u4f46\u5374\u8ba9\u6211\u60f3\u4e86\u534a\u5929~~\uff08\u8fd8\u662f\u592a\u5f31\u4e86\uff09~~\u3002\u5b9e\u9645\u4e0a\u9009\u53d6\u4e86\u8fd9\u4e9b\u8fb9\u4e4b\u540e\uff0c\u8fb9\u6570\u4e00\u5b9a\u8fbe\u5230\u4e86n-1\u6761\uff0c\u800c\u6211\u4eec\u5728\u9009\u53d6\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u901a\u8fc7\u5224\u65ad\u4f7f\u5f97\u8fd9\u4e9b\u8fb9\u4e0d\u53ef\u80fd\u6784\u6210\u73af\uff0c\u90a3\u4e0d\u5c31\u521a\u597d\u6784\u6210\u4e00\u68f5\u6811\u5417\uff1f\n\n2. \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u5bf9dfs\u4e2d\u4f7f\u7528\u7684\u5e76\u67e5\u96c6\u8fdb\u884c\u8def\u5f84\u538b\u7f29\uff1f\u6211\u8ba4\u4e3a\u662f\u56e0\u4e3a\u5728dfs\u8fc7\u7a0b\u4e2d\u641c\u7d22\u5b8c\u540e\u9700\u8981\u8fd8\u539f\uff0c\u4ee5\u4fdd\u8bc1\u641c\u7d22\u7684\u6b63\u786e\u6027\uff0c\u800c\u8fd9\u79cd\u8fd8\u539f\u8981\u4fdd\u8bc1\u5e76\u67e5\u96c6\u7684\u7ed3\u6784\u5b8c\u6574\u5730\u88ab\u8fd8\u539f\uff0c\u5982\u679c\u8fdb\u884c\u8def\u5f84\u538b\u7f29\uff0c\u90a3\u4e48\u5f53\u524d\u7684\u6839\u8282\u70b9\uff0c\u5728dfs\u540e\u53ef\u80fd\u5df2\u7ecf\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u539f\u5148\u4ed6\u7684\u5b50\u8282\u70b9\u7ecf\u8fc7\u8def\u5f84\u538b\u7f29\u540e\uff0c\u90fd\u6307\u5411\u4e86\u5f53\u524d\u201c\u7ea7\u522b\u201d\u66f4\u9ad8\u7684\u6839\u8282\u70b9\uff0c\u8fd9\u65f6\u5019\u5982\u679c\u8981\u8fd8\u539f\u5e76\u67e5\u96c6\u7684\u7ed3\u6784\u5c31\u4f1a\u5341\u5206\u56f0\u96be\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define MAXN 105\n#define MAXM 1005\n#define P 31011\n#define ll long long\nusing namespace std;\n\nstruct Edge{\n    int v1,v2, w;\n    Edge(){\n        v1 = v2 = w = 0;\n    }\n}g[MAXM];\nbool cmp(Edge e1, Edge e2){\n    return e1.w < e2.w;\n}\nstruct node{\n    int l, r, v;    //\u8d77\u70b9,\u7ec8\u70b9,\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u6240\u5305\u542b\u7684\u6570\u91cf\n}a[MAXM];\n\nint n, m, cnt, sum;\nint par[MAXN];\n\nint find(int x){\n    if(par[x] == x){\n        return x;\n    }\n    return find(par[x]);       //\u4e3a\u4e86\u4e0d\u7834\u574f\u5e76\u67e5\u96c6\u7ed3\u6784,\u4e0d\u8fdb\u884c\u8def\u5f84\u538b\u7f29\n}\n\nvoid init(){\n    for (int i = 1; i <= n; ++i) {\n        par[i] = i;\n    }\n}\n\nbool kruskal(){     //\u5176\u5b9ekruskal\u4e2d\u7684\u5e76\u67e5\u96c6\u53ef\u4ee5\u8def\u5f84\u538b\u7f29\n    int tot = 0;\n    sort(g+1, g+m+1, cmp);\n    for (int i = 1; i <= m; ++i) {\n        if(g[i].w != g[i-1].w){\n            cnt++;\n            a[cnt].l = i;\n            a[cnt-1].r = i-1;\n        }\n        int x = find(g[i].v1), y = find(g[i].v2);\n        if(x == y){\n            continue;\n        }\n        tot++;\n        a[cnt].v++;\n        par[x] = y;\n    }\n    a[cnt].r = m;\n    return (tot == n-1);\n}\n\nvoid dfs(int x, int now, int tot){ //\u5728\u7b2c\u51e0\u5c42(\u6309\u6743\u503c\u5206\u5c42),\u8fb9\u96c6\u4e2d\u7684\u4f4d\u7f6e,\u5f53\u524d\u5c42\u5df2\u9009\u62e9\u7684\u6570\u91cf\n    if(now > a[x].r){\n        if(tot == a[x].v){\n            sum++;\n        }\n        return;\n    }\n    int a = find(g[now].v1), b = find(g[now].v2);\n    if(a != b){\n        par[a] = b;\n        dfs(x, now+1, tot+1);\n        par[a] = a, par[b] = b;\n    }\n    dfs(x, now+1, tot);\n}\n\nint main()\n{\n    cin >> n >> m;\n    for (int i = 1; i <= m; ++i) {\n        scanf(\"%d%d%d\", &g[i].v1, &g[i].v2, &g[i].w);\n    }\n    init();\n    if(!kruskal()){\n        cout << 0 << endl;\n        return 0;\n    }\n    init();\n    ll ans = 1;\n    for (int i = 1; i <= cnt; ++i) {\n        sum = 0;\n        dfs(i, a[i].l, 0);\n        ans = ans*sum % P;\n        for (int j = a[i].l; j <= a[i].r; ++j) {\n            int x = find(g[j].v1), y = find(g[j].v2);\n            if(x != y){\n                par[x] = y;\n            }\n        }\n    }\n    cout << ans << endl;\n\n    return 0;\n}\n```\n\n",
        "postTime": 1549109802,
        "uid": 22991,
        "name": "fighter",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011"
    },
    {
        "content": "# \u65b9\u6cd5\n\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\uff1a   \n$$\n\\begin{aligned}\n&w_e: e\\text{\u7684\u6743}\\\\\n&\\text{Tree}(G): G\\text{\u7684\u751f\u6210\u6811\u96c6\u5408}\\\\\n&f(T,w)\\triangleq \\sum_{e\\in T}[w_e=w]\\\\\n\\Rightarrow& \\forall T_1,T_2\\in \\text{Tree}(G),\\forall w, f(T_1,w)=f(T_2,w)\n\\end{aligned}\n$$   \n   \n~~\u7ffb\u8bd1\u6210\u4eba\u8bdd~~\u5c31\u662f\uff0c\u540c\u4e00\u4e2a\u56fe\u4e0a\u4efb\u610f\u4e24\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6307\u5b9a\u4efb\u610f\u6743\u503c\uff0c**\u4e24\u68f5\u6811\u4e0a\u8fb9\u6743\u7b49\u4e8e\u8fd9\u4e2a\u6743\u503c\u7684\u8fb9\u7684\u6570\u91cf\u90fd\u662f\u76f8\u7b49\u7684**\u3002  \n   \n\u9053\u7406\u975e\u5e38\u7b80\u5355\u3002\u5bf9\u4e8e\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u5b83\u4e00\u5b9a\u5bf9\u5e94\u4e86\u6811\u4e0a\u7684\u4e00\u6761\u94fe\uff0c**\u8fd9\u6761\u94fe\u4e0a\u6700\u5927\u8fb9\u6743\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u8fd9\u6761\u8fb9\u7684\u6743**\u3002\u5982\u679c\u76f8\u7b49\uff0c\u6211\u4eec\u53ef\u4ee5\u66ff\u6362\uff0c\u5f97\u5230\u4e00\u68f5\u65b0\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002     \n   \n\u7136\u540e\u6211\u4eec\u5c31\u53ea\u9700\u8981\u8003\u8651\u76f8\u540c\u6743\u503c\u7684\u8fb9\u7684\u60c5\u51b5\uff0c\u6700\u7ec8\u7b54\u6848\u5c31\u662f\u6240\u6709\u6743\u503c\u7684\u65b9\u6848\u6570\u7684\u79ef\u3002   \n    \n\u6309\u7167\u6743\u503c\u4ece\u5c0f\u5230\u5927\u3002\u53d6\u51fa\u5f53\u524d\u6743\u503c\u7684\u6240\u6709\u8fb9\uff0c\u5f97\u5230\u8fb9\u96c6$E'$\u3002\u5047\u5982\u6211\u4eec\u5c06\u8fde\u901a\u5757\u7f29\u6210\u70b9\uff0c\u5f97\u5230\u65b0\u70b9\u96c6$V'$\u3002\u5b9a\u4e49\u65b0\u56fe$G'=(V',E')$\uff0c\u90a3\u4e48\u6211\u4eec**\u80fd\u4e14\u4ec5\u80fd\u5728\u4fdd\u8bc1\u4e0d\u8fde\u6210\u73af\u7684\u60c5\u51b5\u4e0b\u53d6\u5c3d\u53ef\u80fd\u591a\u7684\u8fb9**\u3002\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u6837\u53d6\u51fa\u6765\u4e00\u5b9a\u4f1a\u5f97\u5230\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff08\u56e0\u4e3a\u8fd9\u5c31\u662f Kruskal \u7684\u8fc7\u7a0b\uff09\u3002\u8ba1\u7b97\u8fd9\u6837\u53d6\u7684\u65b9\u6848\u6570\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u5f53\u524d\u9636\u6bb5\u7684\u65b9\u6848\u6570\u3002   \n   \n\u7136\u540e\u6211\u4eec\u52a0\u5165$E'$\u4e2d\u7684\u6240\u6709\u8fb9\u5e76\u7f29\u70b9\uff0c\u8fdb\u5165\u4e0b\u4e00\u9636\u6bb5\u8ba1\u7b97\u3002   \n   \n\u5f53\u76f8\u540c\u6743\u503c\u7684\u8fb9\u7684\u6570\u91cf\u8f83\u5c0f\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e\u8ba1\u7b97\uff08\u6bd4\u5982\uff09\uff0c\u5426\u5219\u9700\u8981\u7528 Matrix-Tree \u8ba1\u7b97\u3002   \n# \u4f8b\u9898\n[[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570](https://www.luogu.com.cn/problem/P4208)\uff0c\u76f8\u540c\u6743\u503c\u7684\u8fb9\u6bd4\u8f83\u5c11\uff0c\u6240\u4ee5\u76f4\u63a5\u679a\u4e3e\u8ba1\u7b97\u6bcf\u4e2a\u9636\u6bb5\u7684\u8d21\u732e\u3002   \n  \n\u4ee3\u7801\u89c1\u4e0b\uff1a   \n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nconst int mod = 31011;\nconst int MAXN = 105, MAXE = 1005;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\nstruct edge\n{\n\tint u, v, w;\n\tedge() { u = v = w = 0; }\n\tedge( const int U, const int V, const int W ) { u = U, v = V, w = W; }\n\tbool operator < ( const edge & b ) const { return w < b.w; }\n}E[MAXE];\n\nstruct dsu\n{\n\tint fa[MAXN] = {}, s;\n\tdsu() { s = 0, memset( fa, 0, sizeof fa ); }\n\tdsu( const int n ) { s = n; for( int i = 1 ; i <= s ; i ++ ) fa[i] = i; }\n\tdsu( const dsu &t ) { s = t.s; for( int i = 1 ; i <= s ; i ++ ) fa[i] = t.fa[i]; }\n\tint findSet( const int u ) { return fa[u] = ( fa[u] == u ? u : findSet( fa[u] ) ); }\n\tbool unionSet( int u, int v ) { u = findSet( u ), v = findSet( v ); fa[u] = v; return u ^ v; }\n}cur;\n\nint N, M;\n\nint main()\n{\n\tread( N ), read( M );\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t\tread( E[i].u ), read( E[i].v ), read( E[i].w );\n\tstd :: sort( E + 1, E + 1 + M );\n\tcur = dsu( N ); int ans = 1;\n\tfor( int l = 1, r ; l <= M ; )\n\t{\n\t\tfor( r = l ; r <= M && E[r].w == E[l].w ; r ++ );\n\t\tint siz = r - l, cnt = 0, tot, mx = 0;\n\t\tfor( int S = 0 ; S < 1 << siz ; S ++ )\n\t\t{\n\t\t\tdsu tmp( cur ); tot = 0;\n\t\t\tfor( int i = 0 ; i < siz ; i ++ )\n\t\t\t\tif( S & ( 1 << i ) )\n\t\t\t\t{\n\t\t\t\t\tif( ! tmp.unionSet( E[i + l].u, E[i + l].v ) ) { tot = -1; break; }\n\t\t\t\t\ttot ++;\n\t\t\t\t}\n\t\t\tif( tot > mx ) mx = tot, cnt = 1;\n\t\t\telse if( tot == mx ) cnt ++;\n\t\t}\n\t\tans = 1ll * ans * cnt % mod;\n\t\tfor( ; l < r ; l ++ ) cur.unionSet( E[l].u, E[l].v );\n\t}\n\tint cnt = 0;\n\tfor( int i = 1 ; i <= N ; i ++ ) cnt += cur.fa[i] == i;\n\tif( cnt > 1 ) puts( \"0\" );\n\telse write( ans ), putchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1593408631,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570"
    },
    {
        "content": "\u8003\u8651\u6027\u8d28\u3010\u5177\u6709\u76f8\u540c\u6743\u503c\u7684\u8fb9\u4e0d\u4f1a\u8d85\u8fc7 $10$ \u6761\u3011\n\n\u4ece\u4e00\u822c\u5957\u8def\u6765\u770b\uff0c$10$ \u53ef\u80fd\u6d89\u53ca\u6307\u6570\u7ea7\u7b97\u6cd5\u3002\n\n|$n^n\u2248$|$n!\u2248$|$2^n\u2248$|\n|:-:|:-:|:-:|\n|$1\\times10^{10}$|$3.63\\times10^6$|$1.02\\times 10^3$|\n\n~~\u6240\u4ee5\u6211\u4eec\u7528\u731c\u590d\u6742\u5ea6\u7684\u65b9\u6cd5\u77e5\u9053\u4e86\u5b9e\u9645\u590d\u6742\u5ea6\u4e0e $O(2^n)$ \u6709\u5173~~\n\n\u8003\u8651 $O(2^n)$ \u4e00\u822c\u7684\u505a\u6cd5\uff1a\u6309\u4f4d\u679a\u4e3e\u3002\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u53e3\u80e1\u51fa\u4e00\u79cd\u505a\u6cd5\uff0c**\u8bc1\u660e\u5728\u540e**\n\n> \u505a\u6cd5\uff1a  \n> \u300c\u4e00\u300d\u5bf9\u4e8e **``mst`` \u4e0a\u6709\u7684\u8fb9** \u7684\u6743\u503c\uff08\u8bbe\u6743\u503c\u4e3a $k$\uff0c\u4e14\u8fd9\u6837\u7684\u8fb9\u5728 **\u539f\u56fe** \u4e0a\u6709 $c$ \u6761\uff09\uff0c\u5148\u8fde\u63a5 **``mst``** \u4e0a **\u6743\u503c\u975e $k$** \u7684\u8fb9\uff08\u5c24\u6307**\u5e76\u67e5\u96c6\u5408\u5e76**\u64cd\u4f5c\uff09  \n> \u300c\u4e8c\u300d\u5bf9\u4e8e\u5269\u4e0b\u7684 **\u539f\u56fe\u4e0a\u7684\u6743\u503c\u4e3a $k$** \u7684\u8fb9\uff0c**\u679a\u4e3e\u5b50\u96c6**\uff08\u5373\uff1a\u4e8c\u8fdb\u5236\u4ece $0$ \u5230 $2^c$ \u679a\u4e3e\uff09  \n> \u300c\u4e09\u300d\u5bf9\u4e8e\u679a\u4e3e\u5f97\u5230\u7684\u4e00\u79cd\u5b50\u96c6\uff0c**\u9996\u5148\u8981\u4fdd\u8bc1**\u82e5\u8fd9\u4e9b\u5b50\u96c6\u4e2d\u7684\u8fb9\u5168\u90e8\u52a0\u5165\uff0c\u5f97\u5230\u7684\u56fe\u7684\u8fb9\u6570\u4e3a $n-1$\u3002  \n>> \u5f62\u5f0f\u5316\u7684\u8bf4\uff0c\u6211\u4eec\u8981\u4fdd\u8bc1 **``mst`` \u4e0a\u6743\u503c\u975e $k$ \u7684\u8fb9\u7684\u6761\u6570 + $sizeof\\{subset\\}(subset \\subset E_{edge.val==k}) = n-1$**   \n\n> \u300c\u56db\u300d\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u4fdd\u8bc1\u82e5\u8fd9\u4e9b\u5b50\u96c6\u4e2d\u7684\u8fb9\u5168\u90e8\u52a0\u5165\uff0c\u5f97\u5230\u7684\u662f\u4e00\u68f5**\u6811**\uff08\u800c\u4e0d\u662f\u975e\u8fde\u901a\u56fe\uff09\u3002\u8fd9\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c ``kruskal`` \u7684\u65b9\u5f0f\u5229\u7528**\u5e76\u67e5\u96c6**\u7ef4\u62a4\u70b9\u8054\u901a\u5173\u7cfb\u3002\u53ea\u8981\u6709\u4efb\u610f\u4e00\u6761\u8fb9\u5728\u8fde\u63a5\u65f6\u5bfc\u81f4\u4e86\u73af\u7684\u5f62\u6210\uff08\u5373\uff1a\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u65e9\u5df2\u8054\u901a\uff09\u5219\u8fd9\u79cd\u5b50\u96c6\u4e0d\u6784\u6210\u5bf9\u7b54\u6848\u7684\u8d21\u732e  \n>> \u6ce8\u610f\uff0c\u7531\u4e8e\u5e76\u67e5\u96c6\u7684**\u65ad\u8fb9**\u64cd\u4f5c\u5341\u5206\u56f0\u96be\uff0c\u800c\u4e14\u82e5\u5b9e\u73b0\u5c06\u53ea\u80fd**\u6309\u79e9\u5408\u5e76**\u800c\u4e0d\u80fd**\u8def\u5f84\u538b\u7f29**\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u679a\u4e3e\u5b50\u96c6\u4e4b\u524d**\u5bf9 ``fa`` \u6570\u7ec4\u8fdb\u884c\u5907\u4efd**\uff0c\u8fd9\u6837\u53ef\u4ee5\u5feb\u901f\u5730\u5c06 ``fa`` \u6570\u7ec4\u8fd8\u539f\u5230**\u5bf9\u8fd9\u79cd\u5b50\u96c6\u68c0\u9a8c\u4e4b\u524d\u7684\u60c5\u51b5**\n\n\u8bc1\u660e\uff1a\u5173\u952e\u70b9\u5728\u4e8e\u8bc1\u660e\u201c\u5728\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u6743\u503c\u76f8\u7b49\u7684\u8fb9\u51fa\u73b0\u7684\u6b21\u6570\u76f8\u7b49\u201d\n\n\u73b0\u5728\u6211\u4eec\u8003\u8651\u4e00\u9897 ``mst`` \u4e2d\u7684\u4e24\u6761\u8fb9 $e_1,e_2$\u3002$e_1$ \u8fde\u63a5 $u_1,v_1$\uff0c\u6743\u503c\u4e3a $w_1$\uff1b$e_2$ \u8fde\u63a5 $u_2,v_2$\uff0c\u6743\u503c\u4e3a $w_2$\u3002\u6839\u636e ``mst`` \u6027\u8d28\u6613\u77e5 $u_1,v_1,u_2,v_2$ \u4e2d\u5fc5\u5b9a\u6709\u4e24\u70b9\u53ef\u4ee5\u4e0d\u7ecf\u8fc7 $e_1,e_2$ \u5230\u8fbe\uff0c\u4e0d\u59a8\u8bbe\u4e3a $v_1,u_2$\n\n![P4208-sol.PNG](https://i.loli.net/2020/06/08/PpM1yHOqJE8Ieub.png)\n\n**\u524d\u63d0** $e_1,e_2$ \u4e0e\u56fe\u4e0a**\u4e09\u4e2a\u84dd\u6846\u4ee3\u8868\u7684\u70b9\u96c6\u5408**\u6784\u6210\u4e00\u9897 ``mst``  \n**\u5047\u8bbe 1** \u6709\u4e24\u6761\u4e0d\u5c5e\u4e8e ``mst`` \u7684\u8fb9 $e_3,e_4$ \u6ee1\u8db3\u5176\u6743\u503c\u5747\u4e0d\u7b49\u4e8e $e_1,e_2$ \u7684\u6743\u503c  \n**\u5047\u8bbe 2** $e_3,e_4$ \u4e0e\u56fe\u4e0a**\u4e09\u4e2a\u84dd\u6846\u4ee3\u8868\u7684\u70b9\u96c6\u5408**\u80fd\u6784\u6210\u4e00\u9897 ``mst``  \n\n\u4e0d\u59a8\u8bbe $val_{e_1}<val_{e_2}$ \u548c $val_{e_3}<val_{e_4}$\u3002\n1. \u5982\u679c\u6709 $val_{e_3}<val_{e_1}$ \uff0c\u53ef\u77e5\u5728 ``kruskal`` \u4e2d $e_3$ \u5148\u4e8e $e_1$ \u8bbf\u95ee\u3002\u800c $e_3$ \u65e2\u7136\u80fd\u6ee1\u8db3**\u5047\u8bbe 2**\uff0c\u5219 $e_3$ \u4e00\u5b9a\u4f1a\u88ab\u52a0\u5165\u5230 ``mst`` \u4e2d\uff0c\u4e0e**\u5047\u8bbe 1**\u77db\u76fe\n2. \u5982\u679c\u6709 $val_{e_1}<val_{e_3}$\uff0c\u7531 **\u524d\u63d0** \u4e0e **\u5047\u8bbe 2** \u53ef\u77e5 $val_{e_1}+val_{e_2}=val_{e_3}+val_{e_4}$\uff0c\u6240\u4ee5\u6613\u5f97 $val_{e_1}<val_{e_3}<val_{e_4}<val_{e_2}$\u3002\u6b64\u65f6\u5728 ``kruskal`` \u4e2d $e_3,e_4$ \u5148\u4e8e $e_2$ \u8bbf\u95ee\u3002\u800c $e_3,e_4$ \u65e2\u7136\u80fd\u6ee1\u8db3**\u5047\u8bbe 2**\uff0c\u5219 $e_3$ \u6216 $e_4$ \u4e00\u5b9a\u4f1a\u88ab\u52a0\u5165\u5230 ``mst`` \u4e2d\uff08\u4e14 $e_2$ \u5c06\u4e0d\u4f1a\u88ab\u52a0\u5165\u5230 ``mst`` \u4e2d\uff09\uff0c\u5219\u53ef\u4ee5\u5f97\u51fa\u4e00\u9897 ``mst`` \uff0c\u5176\u6743\u503c\u5c0f\u4e8e\u539f ``mst``\uff0c\u77db\u76fe\u3002\n\n\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u5f97\u51fa\u8fd9\u9898\u7684\u5168\u90e8\u89e3\u6cd5\u3002  \n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff08$D$ \u4e3a\u201c\u5177\u6709\u76f8\u540c\u6743\u503c\u7684\u8fb9\u201d\u7684\u6700\u591a\u4e2a\u6570\uff09\uff1a  \n- \u679a\u4e3e\u6240\u6709 **``mst`` \u4e0a\u6709\u7684\u8fb9** \u7684\u6743\u503c\uff1a $\\Theta(n)$\n- \u5bf9\u4e8e **\u539f\u56fe\u4e0a\u7684\u6743\u503c\u4e3a $k$** \u7684\u8fb9 **\u679a\u4e3e\u5b50\u96c6** \uff1a$\\Theta(2^{D})$  \n- \u68c0\u9a8c\u65b9\u6848\u6b63\u786e\u6027 \uff1a$\\Theta(D)$  \n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\Theta(nD2^D)$\n\n\u4ee3\u7801\uff1a[\u89c1\u6211\u7684 gitee \u4ed3\u5e93](https://gitee.com/hkxa/mycode/blob/master/luogu/P4208.cpp)",
        "postTime": 1591617029,
        "uid": 63720,
        "name": "brealid",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011"
    },
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u70b9[\u8fd9\u91cc](https://wa-automaton.github.io/2019/03/08/BZOJ1016/)~\n# \u5927\u610f\uff1a\n\u7ed9\u4f60\u4e00\u4e2a\u8054\u901a\u65e0\u5411\u56fe\uff0c\u6c42\u5176\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e2a\u6570\u3002\u7b54\u6848\u5bf931011\u53d6\u6a21\u3002\uff08\u9b3c\u77e5\u9053\u4e3a\u5565\u662f\u8fd9\u4e2a\u6570\uff09\n# \u5206\u6790\uff1a\n\u8fd9\u9053\u9898\u6709\u4e2a\u5f88\u6709\u8da3\u4e5f\u5f88\u5947\u5999\u7684\u7ed3\u8bba...\n> \u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\u6765\u8bf4\uff0c\u5b83\u7684\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u76f8\u7b49\u8fb9\u6743\u7684\u8fb9\u7684\u6570\u91cf\u90fd\u662f\u76f8\u7b49\u7684\uff0c\u4e14\u5728\u53bb\u6389\u8fd9\u4e9b\u76f8\u7b49\u8fb9\u6743\u7684\u8fb9\u4e4b\u540e\uff0c\u56fe\u7684\u8fde\u901a\u6027\u4e5f\u662f\u76f8\u540c\u7684\u3002\n\n\u8fd9\u4e2a\u7ed3\u8bba\u600e\u4e48\u8bc1\u660e\u5462\uff1f~~\u5927\u80c6\u731c\u60f3\uff0c\u65e0\u9700\u8bc1\u660e~~\n> \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u8bc1\u660e~~\u611f\u6027\u7406\u89e3~~\uff1a\u8003\u8651kruskal\u7684\u8fc7\u7a0b,\u4e0d\u59a8\u628a\u52a0\u5165\u76f8\u540c\u6743\u503c\u7684\u8fb9\u770b\u505a\u4e00\u4e2a\u201c\u9636\u6bb5\u201d\u3002\u6bcf\u6b21\u52a0\u8fb9\u90fd\u662f\u52a0\u5230\u52a0\u5165\u56fe\u4e2d\u4f1a\u5f62\u6210\u73af\u4e3a\u6b62\u3002\u7136\u540e\u8fdb\u5165\u4e0b\u4e00\u4e2a\u9636\u6bb5\u3002\u90a3\u4e48\uff0c\u628a\u524d\u9762\u5df2\u7ecf\u88ab\u66f4\u5c0f\u6743\u503c\u7684\u8fb9\u8054\u901a\u7684\u8054\u901a\u5757\u770b\u505a\u4e00\u4e9b\u70b9\uff0c\u5219\u6211\u4eec\u5c31\u662f\u5728\u8fd9\u4e9b\u70b9\u4e4b\u95f4\u968f\u4fbf\u8fde\u8fb9\u3002\u5982\u679c\u5f62\u6210\u73af\uff0c\u6211\u4eec\u9009\u62e9\u4e0d\u52a0\u5165\u8fd9\u6761\u8fb9\u8fd8\u662f\u4ece\u73af\u4e0a\u5220\u9664\u4e00\u6761\u8fb9\u5e76\u52a0\u5165\u8fd9\u6761\u8fb9\uff0c\u5bf9\u8fde\u901a\u6027\u548c\u751f\u6210\u6811\u4e2d\u8be5\u79cd\u8fb9\u6743\u8fb9\u7684\u6761\u6570\u663e\u7136\u90fd\u6ca1\u6709\u5f71\u54cd\u3002\u6240\u4ee5\uff0c\u4e0a\u8ff0\u7ed3\u8bba\u6210\u7acb\u3002\n\n\u6709\u4e86\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u6211\u4eec\u91cd\u65b0\u6765\u5ba1\u89c6\u8fd9\u9053\u9898\u3002\u6211\u4eec\u8981\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e2a\u6570\u3002\u4e0d\u59a8\u4ecd\u7136\u628a\u76f8\u540c\u6743\u503c\u7684\u8fb9\u770b\u6210\u9636\u6bb5\u3002\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u6211\u4eec\u8981\u6c42\u7684\u7b54\u6848\u5c31\u662f\u6bcf\u4e2a\u9636\u6bb5\u8fde\u8fb9\u7684\u65b9\u6848\u6570\u4e4b\u79ef\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5148\u6c42\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\u3002\u5e76\u5f97\u5230\u4e00\u79cd\u65b9\u6848\u3002\u7136\u540e\u518d\u6b21\u8dd1\u4e00\u904dkruskal\uff0c\u5728\u6bcf\u4e2a\u9636\u6bb5\uff0c\u5c06\u539f\u5148\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u9664\u4e86\u8be5\u9636\u6bb5\u7684\u8fb9\u7684\u5176\u4ed6\u8fb9\u8fde\u8fdb\u8fd9\u5f20\u56fe\uff0c\u7136\u540e\u5c06\u56fe\u8fdb\u884c\u7f29\u70b9\uff08\u8fd9\u4e2a\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u5b9e\u73b0\uff09\u7136\u540e\u5728\u7f29\u70b9\u540e\u7684\u65b0\u56fe\u4e0a\uff0c\u52a0\u5165\u8fd9\u4e2a\u9636\u6bb5\u7684\u6240\u6709\u8fb9\u3002\u6b64\u65f6\u6c42\u65b0\u56fe\u7684\u751f\u6210\u6811\u65b9\u6848\u6570\uff0c\u6bcf\u4e00\u79cd\u65b9\u6848\u90fd\u5bf9\u5e94\u7740\u539f\u56fe\u4e2d\u8fd9\u4e2a\u9636\u6bb5\u7684\u4e00\u79cd\u52a0\u8fb9\u65b9\u6848\u3002\u91c7\u7528\u77e9\u9635\u6811\u5b9a\u7406\u6c42\u751f\u6210\u6811\u5c31\u53ef\u4ee5\u4e86\u3002\n# \u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n\nusing std::sort;\nusing std::swap;\nusing std::fabs;\n\nconst int P=31011;\nconst int maxn=(1e3+100)*2;\nconst double eps=1e-6;\n\nbool used[maxn];\n\nnamespace MST\n{\n    int fa[maxn];\n    int u[maxn],v[maxn],w[maxn],r[maxn],tot;\n    long double K[maxn][maxn];\n    inline int find(int u){return u==fa[u]?u:fa[u]=find(fa[u]);}\n    inline void add(int _u,int _v,int _w){u[++tot]=_u,v[tot]=_v,w[tot]=_w;}\n    struct cmp{bool operator() (const int a,const int b){return w[a]<w[b];}};\n    inline long double determinant(long double (*A)[maxn],int n)\n    {\n        for (int i=1,c=1,j;i<=n;++i)\n        {\n            for (j=c;j<=n && fabs(A[j][i])<eps;++j);\n            if (j==n+1) continue;\n            for (int k=1;k<=n;++k) swap(A[c][k],A[j][k]);\n            for (int j=c+1;j<=n;++j)\n                if (fabs(A[j][i])>eps)\n                {\n                    long double t=A[j][i]/A[c][i];\n                    for (int k=i;k<=n;++k)\n                        A[j][k]-=A[c][k]*t;\n                }\n            ++c;\n        }\n        long double ans=1;\n        for (int i=1;i<=n;++i) ans*=A[i][i];\n        return fabs(ans);//\u8fd9\u91cc\u8981\u53d6\u7edd\u5bf9\u503c\n    }\n    inline void Kruskal(int n,int m)\n    {\n        for (int i=1;i<=n;++i) fa[i]=i;\n        for (int i=1;i<=m;++i) r[i]=i;\n        sort(r+1,r+m+1,cmp());\n        for (int i=1;i<=m;++i)\n        {\n            int x=r[i];\n            if (find(u[x])!=find(v[x]))\n            {\n                fa[find(u[x])]=find(v[x]);\n                used[x]=true;\n            }\n        }\n    }\n    int index[maxn];\n    inline void Add_edge(int idx)\n    {\n        int x=index[find(u[idx])],y=index[find(v[idx])];\n        ++K[x][x];++K[y][y];\n        --K[x][y];--K[y][x];\n    }\n    inline void merge(int idx)\n    {\n        if (find(u[idx])!=find(v[idx]))\n            fa[find(u[idx])]=find(v[idx]);\n    }\n    inline int Build_Graph(int n,int m,int L,int R)\n    {\n        int tot=0;\n        for (int i=1;i<=n;++i)\n            for (int j=1;j<=n;++j)\n                K[i][j]=0;\n        for (int i=1;i<=n;++i) fa[i]=i;\n        for (int i=1;i<=m;++i)\n            if (used[r[i]] && (i<L || i>R)) merge(r[i]);\n        memset(index,0,sizeof(index));\n        for (int i=1;i<=n;++i) if (!index[find(i)]) index[find(i)]=++tot;\n        for (int i=L;i<=R;++i) Add_edge(r[i]);\n        return tot;\n    }\n    inline int Kruskal_cal(int n,int m)\n    {\n        int ans=1;\n        for (int L=1,R=1;R<=m;L=R)\n        {\n            bool ok=false;\n            while (w[r[L]]==w[r[R]] && R<=m)\n                if (used[r[R++]]) ok=true;\n            if (!ok) continue;\n            int tot=Build_Graph(n,m,L,R-1);\n            ans=((long long)ans*(int)std::round(determinant(K,tot-1)))%P;\n        }\n        return ans;\n    }\n} // Kruskal\n\nint main()\n{\n    // freopen(\"1016/1.in\",\"r\",stdin);\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1,u,v,w;i<=m;++i)\n        scanf(\"%d%d%d\",&u,&v,&w),MST::add(u,v,w);\n    MST::Kruskal(n,m);\n    printf(\"%d\",MST::Kruskal_cal(n,m));\n}\n```",
        "postTime": 1552951907,
        "uid": 48711,
        "name": "_WA\u81ea\u52a8\u673a",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011"
    },
    {
        "content": "\u5728\u540c\u4e00\u4e2a\u56fe\u4e2d\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u76f8\u540c\u6743\u503c\u7684\u8fb9\u7684\u8fb9\u6570\u662f\u76f8\u540c\u7684\u3002\n\n\u8bc1\u660e\uff1a\u6bcf\u4e2a\u76f8\u540c\u6743\u503c\u7684\u8fb9\u6784\u6210\u56fe\u4e0a\u7684\u4e00\u4e9b\u8054\u901a\u5757\uff0c\u6211\u4eec\u5148\u628a\u6bcf\u4e2a\u8fb9\u6743\u503c\u7ec4\u6210\u7684\u8054\u901a\u5757\u5185\u90e8\u53bb\u6389\u73af\uff0c\u6bcf\u4e2a\u8fde\u901a\u5757\u4e4b\u95f4\u76f8\u4e92\u8fde\u63a5\u3002\u5982\u679c\u8981\u4ece\u4e00\u4e2a\u8054\u901a\u5757\u5185\u90e8\u8fde\u4e00\u6761\u73af\u5230\u522b\u7684\u8054\u901a\u5757\uff0c\u80af\u5b9a\u4e0d\u5982\u6743\u503c\u66f4\u5c0f\u7684\u8054\u901a\u5757\u5185\u90e8\u8fde\u63a5\u66f4\u4f18\u3002\n\n\u6240\u4ee5\u76f8\u5f53\u4e8e\u6bcf\u4e00\u4e2a\u76f8\u540c\u6743\u503c\u7684\u8fb9\u7684\u8054\u901a\u5757\u5185\u6c42\u6784\u6210\u751f\u6210\u56fe\u7684\u65b9\u6848\u6570\u3002\n\n\u56e0\u4e3a\u6bcf\u4e2a\u65b9\u6848\u76f8\u5bf9\u72ec\u7acb\uff0c\u5bf9\u7ed3\u679c\u8fdb\u884c\u76f8\u4e58\u3002\n\n\u56e0\u4e3a\u540c\u4e00\u6743\u503c\u7684\u8fb9\u4e0d\u4f1a\u8d85\u8fc7\u5341\u6761\uff0c\u5bb9\u6613\u8bc1\u660e\u5f53\u6bcf\u4e2a\u6743\u503c\u8fb9\u6570\u90fd\u4e3a10\u65f6\u590d\u6742\u5ea6\u6700\u5927\uff0c\u6b64\u65f6\u590d\u6742\u5ea6\u4e3a36000000\u5de6\u53f3\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898~~\u5982\u679c\u52a0\u5f3a\u7248\u7684\u8bdd\u5404\u4f4d\u8fd8\u662f\u597d\u597d\u5b66\u77e9\u9635\u6811\u5427~~\n\n\u6ce8\u610f\u5e76\u67e5\u96c6\u5e76\u4e0d\u80fd\u8def\u5f84\u5408\u5e76\uff0c\u5426\u5219\u4f1a\u5931\u53bb\u8def\u5f84\u4e0a\u7684\u4e00\u4e9b\u4fe1\u606f\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<string>\n#include<cstring>\n#include<cmath>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst ll size=1e3+10;\nconst ll mod=31011;\nstruct node{ll x,y,z;}a[size];\nstruct sege{ll l,r,cnt;}b[size];\nll n,m,q,ans,res,fa[size];\ninline bool operator<(const node&x,const node&y){\n\treturn x.z<y.z;\n}\ninline ll get(ll x){\n\tif(x==fa[x]) return x;return get(fa[x]);\n}\ninline ll read(){\n\tll x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n\treturn x*f;\n}\ninline void dfs(ll x,ll i,ll sum){\n\tif(i==b[x].r+1){\n\t\tif(sum==b[x].cnt) res++;return;\n\t}\n\tll fx=get(a[i].x),fy=get(a[i].y);\n\tif(fx!=fy){\n\t\tfa[fx]=fy;dfs(x,i+1,sum+1);fa[fx]=fx;fa[fy]=fy;\n\t}\n\tdfs(x,i+1,sum);\n}\nint main(){\n\tn=read();m=read();\n\tfor(ll i=1;i<=m;i++){a[i].x=read();a[i].y=read();a[i].z=read();}\n\tsort(a+1,a+1+m);\n\tfor(ll i=1;i<=n;i++) fa[i]=i;\n\tfor(ll i=1;i<=m;i++){\n\t\tif(a[i].z!=a[i-1].z) b[++q].l=i,b[q-1].r=i-1,b[q].cnt=0;\n\t\tll x=get(a[i].x),y=get(a[i].y);\n\t\tif(x==y) continue;\n\t\tfa[x]=y;ans++;b[q].cnt++;\n\t}\n\tb[q].r=m;\n\tif(ans!=n-1){printf(\"0\\n\");return 0;}\n\telse{\n\t\tans=1;\n\t\tfor(ll i=1;i<=n;i++) fa[i]=i;\n\t\tfor(ll i=1;i<=q;i++){\n\t\t\tres=0;dfs(i,b[i].l,0);ans=ans*res%mod;\n\t\t\tfor(ll j=b[i].l;j<=b[i].r;j++){\n\t\t\t\tll x=get(a[j].x),y=get(a[j].y);\n\t\t\t\tif(x==y) continue;fa[x]=y;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n} \n```\n",
        "postTime": 1546086932,
        "uid": 53032,
        "name": "\u5c0f\u5858\u7a7a\u660e",
        "ccfLevel": 0,
        "title": "P4208 [JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570"
    },
    {
        "content": "## \u5b9a\u7406\n\n\u9996\u5148\u5f15\u5165\u51e0\u4e2a\u5b9a\u7406\n\n- \u5bf9\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u6700\u5c0f\u751f\u6210\u6811$A,B$(\u8fd9\u91cc\u7684\u4e0d\u540c\u6307\u4e25\u683c\u610f\u4e49\u4e0b\u7684\u8fb9\u4e0d\u540c)\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u957f\u5ea6\u4e3a$w$\u7684\u8fb9\uff0c$A,B$\u6240\u62e5\u6709\u7684\u4e2a\u6570\u76f8\u7b49\n- \u53ea\u8fde\u63a5\u957f\u5ea6$\\leq w$\u7684\u8fb9\uff0c$A,B$\u8fde\u901a\u6027\u76f8\u540c\n\n\u8bc1\u660e\u7565\n\n## \u601d\u8def\n\n\u6839\u636e\u8fd9\u51e0\u4e2a\u5b9a\u7406\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u601d\u8def\n\n- \u5c06\u8fb9\u957f$w_i$\u79bb\u6563\u5316\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u6765\u8bf4\u53ea\u9700\u8003\u8651\u5927\u5c0f\u5173\u7cfb\n\n- \u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811$A$\uff0c\u8bb0\u5f55\u957f\u5ea6$w_i$\u7684\u8fb9\u4f7f\u7528\u7684\u6b21\u6570$cnt[w_i]$\n- \u8003\u8651Kruscal\u7b97\u6cd5\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u6bcf\u6b21\u52a0\u8fb9\u6765\u8054\u901a\u4e24\u4e2a\u8054\u901a\u5757\uff0c\u6240\u4ee5\u5047\u8bbe\u5f53\u524d\u8003\u8651\u5230\u957f\u5ea6\u4e3a$w$\u7684\u8fb9\uff0c\u6211\u4eec\u76f4\u63a5\u7528\u66b4\u641c\u8003\u8651\u52a0\u8fb9\u7684\u65b9\u6848\u6570\n- \u4e58\u6cd5\u539f\u7406\u8ba1\u6570\n\n```cpp\n/***************************************************************\n    File name: I.cpp\n    Author: ljfcnyali\n    Create time: 2019\u5e7405\u670824\u65e5 \u661f\u671f\u4e94 08\u65f638\u520649\u79d2\n***************************************************************/\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i, a, b) for ( int i = (a), _end_ = (b); i <= _end_; ++ i ) \n#define mem(a) memset ( (a), 0, sizeof ( a ) ) \n#define str(a) strlen ( a ) \n\nconst int maxn = 2010;\nconst int INF = 0x3f3f3f3f;\nconst int Mod = 31011;\n\nstruct node\n{\n    int u, v, w;\n} a[maxn];\n\nint n, m, f[maxn], cnt[maxn], sum, ans, W;\n\ninline int cha(int x)\n{\n    return f[x] == x ? x : cha(f[x]);\n}\n\ninline int cmp(node x, node y)\n{\n    return x.w < y.w;\n}\n\ninline void Kruscal()\n{\n    ans = sum = 0;\n    REP(i, 1, m)\n    {\n        int fx = cha(a[i].u), fy = cha(a[i].v);\n        if ( fx != fy ) \n        {\n            f[fx] = fy; cnt[a[i].w] ++; ++ sum;\n//\t\t\tprintf(\"%d %d %d\\n\", a[i].u, a[i].v, a[i].w);\n        }\n        if ( sum == n - 1 ) { ans = 1; return ; }\n    }\n}\n\ninline int dfs(int x, int w, int s)\n{\n    if ( s == cnt[w] ) return 1;\t\n    if ( a[x].w != w ) return 0;\n    int fx = cha(a[x].u), fy = cha(a[x].v), sum = 0;\n    if ( fx != fy ) { f[fx] = fy; sum = dfs(x + 1, w, s + 1); f[fx] = fx; }\n    return sum + dfs(x + 1, w, s);\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n    while ( ~scanf(\"%d%d\", &n, &m) )\n    {\n        mem(a); mem(cnt); W = 1; REP(i, 1, n) f[i] = i;\n        REP(i, 1, m) scanf(\"%d%d%d\", &a[i].u, &a[i].v, &a[i].w);\n        sort ( a + 1, a + m + 1, cmp ); a[m + 1].w = INF;\n        REP(i, 1, m)\n        {\n            if ( a[i].w != a[i + 1].w ) a[i].w = W ++;\n            else a[i].w = W;\n        }\n        Kruscal();\n        if ( ans == 0 ) { printf(\"0\\n\"); continue ; }\n        REP(i, 1, n) f[i] = i;\n        REP(i, 1, m)\n        {\n            if ( !cnt[a[i].w] || a[i - 1].w == a[i].w ) continue ;\n            sum = dfs(i, a[i].w, 0);\n            ans = (ans * sum) % Mod;\n            for ( int j = i; j; ++ j )\n            {\n                if ( a[j].w != a[i].w ) break ;\n                int fx = cha(a[j].u), fy = cha(a[j].v);\n                if ( fx != fy ) f[fx] = fy;\n            }\n        }\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1558660947,
        "uid": 8618,
        "name": "\u6c34\u5e93\u4e2d\u7684\u6c34\u5e93",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011"
    },
    {
        "content": "### \u4e00\u5f20\u56fe\u7684\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\u6743\u503c\u76f8\u7b49\u7684\u8fb9\u7684\u4e2a\u6570\u4e00\u5b9a\u76f8\u540c\n\n---\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint n,m,cnt,tot,sum,ans;\nint father[1010];\nconst int mod=31011;  \n\nstruct Edge{\n    int from,to,dis;\n}edge[1010];    //\u7ed3\u6784\u4f53\uff1afrom,to\u662f\u8fb9\u7684\u4e24\u7aef\u70b9\uff0cdis\u6743\u503c\n\nstruct E{\n    int left,right,choose;\n}bian[1010];    //left,right\u6743\u503c\u76f8\u7b49\u7684\u8fb9\u7684\u5de6\u53f3\u7f16\u53f7\uff0c\n//choose\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u4e2a\u6570\n\nbool cmp(Edge a,Edge b){\n    return a.dis<b.dis;\n}    \n\nint find(int x){\n    return x==father[x]?x:find(father[x]);\n}     //\u5e76\u67e5\u96c6\n     //\u5f88\u5947\u602a\u4e0d\u80fd\u8def\u5f84\u538b\u7f29\u4f18\u5316\uff0c\n    //\u54ea\u4f4d\u5927\u4f6c\u8bb2\u4e00\u4e0b\u4e3a\u4ec0\u4e48\uff01\uff01\uff01\n\nvoid dfs(int x,int now,int k)//\u6838\u5fc3\n{\n     if(now==bian[x].right+1){\n         if(k==bian[x].choose) sum++;\n         return;\n     }\n     int xx=find(edge[now].from);\n     int yy=find(edge[now].to);\n     if(xx!=yy){\n         father[xx]=yy;\n         dfs(x,now+1,k+1);\n         father[xx]=xx;\n         father[yy]=yy;\n     }\n     dfs(x,now+1,k);\n}    \n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n      father[i]=i;\n    for(int i=1;i<=m;i++)\n  scanf(\"%d%d%d\",&edge[i].from,&edge[i].to,&edge[i].dis);\n    sort(edge+1,edge+1+m,cmp);  //\u6309\u8fb9\u7684\u6743\u503c\u6392\u5e8f\n    tot=0;\n    for(int i=1;i<=m;i++){\n      if(edge[i].dis!=edge[i-1].dis){ //\u8fb9\u7684\u6743\u503c\u4e0d\u76f8\u7b49 \n            cnt++;   //\u8fb9\u7684\u6743\u503c\u4e00\u5171\u6709cnt\u79cd\n            bian[cnt].left=i;\n            bian[cnt-1].right=i-1;\n      }\t\n        int xx=find(edge[i].from);\n        int yy=find(edge[i].to);\n        if(xx!=yy){\n            father[xx]=yy;\n            bian[cnt].choose++;\n            tot++;\n        }\n    }\n    if(tot!=n-1){\n        printf(\"0\");\n        return 0;\n    } //\u7279\u5224\u65e0\u6cd5\u6784\u6210\u6700\u5c0f\u751f\u6210\u6811\n    bian[cnt].right=m;\n    ans=1;\n    for(int i=1;i<=n;i++)\n      father[i]=i;\n    for(int i=1;i<=cnt;i++)\n    {\n        sum=0;\n        dfs(i,bian[i].left,0);\n        ans=(ans*sum)%mod;\n        for(int j=bian[i].left;j<=bian[i].right;j++)\n        {\n            int xx=find(edge[j].from);\n            int yy=find(edge[j].to);\n            if(xx!=yy) father[xx]=yy;\n        }\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1538813905,
        "uid": 112164,
        "name": "PPXppx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4208 \u3010[JSOI2008]\u6700\u5c0f\u751f\u6210\u6811\u8ba1\u6570\u3011"
    }
]