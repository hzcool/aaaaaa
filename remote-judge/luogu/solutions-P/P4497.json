[
    {
        "content": "> [P4497 [WC2011]\u62fc\u70b9\u6e38\u620f](https://www.luogu.com.cn/problem/P4497)\n>\n> [\u5728\u6211\u7684 cnblogs \u4e2d\u67e5\u770b](https://www.cnblogs.com/alex-wei/p/P4497_WCNM2011.html)\n\n\u6570\u636e\u7ed3\u6784\u5927\u6742\u70e9 +  \u963f\u5df4\u7ec6\u8282\u9898\u3002\n\n\u8c03\u4e86\u4e09\u4e2a\u5c0f\u65f6\u3002\n\n---\n\n\u9996\u5148\u8003\u8651\u7b2c\u4e00\u5c0f\u95ee\u7684\u7b54\u6848\u3002\n\n\u6ce8\u610f\u5230\u70b9\u6570\u7684\u8ba1\u7b97\u65b9\u5f0f\u662f\u5148\u8d1f\u540e\u6b63\u7684\u5f62\u5f0f\uff0c\u4e0d\u59a8\u770b\u505a\u9009\u51fa $2k$ \u4e2a\u6570 $p_1,p_2,\\cdots,p_{2k}$\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u8ba1\u7b97 $\\sum u_{p_{2i}-p_{2i-1}}$\u3002\u518d\u6839\u636e\u9898\u76ee\u7684\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\uff0c\u4e0d\u96be\u60f3\u5230\u4f7f\u7528**\u5dee\u5206**\uff1a\n\n\u8bbe $d_i=u_i-u_{i-1}$\uff0c\u820d\u53bb $d_1$ \u540e\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a $n-1$ \u7684\u5e8f\u5217 $d_2,d_3,\\cdots,d_n$\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u9009\u62e9\u4e00\u6bb5\u8fde\u7eed\u7684 $d$ \u5e76\u6c42\u548c\u5c31\u76f8\u5f53\u4e8e\u9009\u62e9\u4e24\u4e2a\u7aef\u70b9\u5bf9\u5e94\u7684 $u$ \u6c42\u5dee\uff0c\u5373 $d_l+d_{l+1}+\\cdots+d_r=u_r-u_{l-1}$\u3002\u53ef\u4ee5\u8bc1\u660e\u4efb\u4f55\u4e00\u79cd $d$ \u4e2d\u7684\u9009\u6570\u65b9\u5f0f\u90fd\u5bf9\u5e94\u4e86 $u$ \u4e2d\u7684\u4e00\u79cd\u9009\u6570\u65b9\u5f0f\uff0c\u6545\u9898\u76ee\u8f6c\u5316\u4e3a\u5728 $d$ \u4e2d\u9009\u51fa\u82e5\u5e72\u4e0d\u76f8\u90bb\u5b50\u6bb5\uff0c\u6c42\u9009\u51fa\u7684\u6570\u7684\u548c\u7684\u6700\u5927\u503c\u3002\n\n\u56e0\u6b64\uff0c\u4e3a\u4e86\u8ba9\u5f97\u5206\u6700\u5927\uff0c\u6211\u4eec\u53ea\u9009\u53d6\u6240\u6709\u5927\u4e8e $0$ \u7684 $d$ \u5373\u53ef\uff0c\u5373 $\\sum_{i=2}^n\\max(0,d_i)$\u3002\n\n---\n\n\u4e0d\u59a8\u8bbe\u6700\u7ec8\u9009\u53d6\u7684 $d$ \u4e2d\u7684\u6570\u7684\u533a\u95f4\u4e3a $[l_1,r_1],[l_2,r_2],\\cdots,[l_m,r_m]$\u3002\u8003\u8651\u5c0f Y\uff08\u4e0d\u662f\u5c0f W\uff09\u7684\u4fee\u6539\u64cd\u4f5c\u7684\u672c\u8d28\uff1a\u9009\u53d6\u4e24\u4e2a**\u7f16\u53f7**\u76f8\u90bb\uff08\u4e0d\u662f\u5728 $d$ \u4e2d\u76f8\u90bb\uff09\u7684\u533a\u95f4 $[a,b],[c,d]\\ (a\\leq b<c\\leq d,b+1<c)$\uff0c\u5c06 $b,c$ \u5206\u522b\u6362\u6210**\u4efb\u610f** $z_1,z_2\\in [b,c]$ \u6ee1\u8db3 $z_1+1<z_2$\u3002\n\n\u4e3a\u4e86\u8ba9\u51cf\u5c0f\u7684\u5f97\u5206\u6700\u591a\u4e14\u6700\u7ec8\u4e24\u533a\u95f4\u7aef\u70b9\u4e0d\u76f8\u90bb\uff0c\u53c8\u56e0\u4e3a $(b,c)$ \u4e2d\u5168\u662f\u975e\u6b63\u6570\uff0c\u6545\u7559\u4e0b\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u6570\u5373\u53ef\u3002\u5f97\u5206\u7684\u51cf\u5c11\u91cf\u5373\u4e3a\u533a\u95f4 $(b,c)$ \u7684\u548c\u51cf\u53bb\u5b83\u7684**\u6700\u5927\u503c**\uff0c\u5373 $\\left(\\sum_{i=b+1}^{c-1}d_i\\right)-\\left(\\max_{i=b+1}^{c-1}d_i\\right)$\u3002\n\n\u4f8b\u5982 `positive integer | -6 | -5 | -7 | -8 | positive integers`\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06 $b\\gets b+1$\uff0c$c\\gets c-2$\uff0c\u6b64\u65f6\u5f97\u5206**\u51cf\u5c0f** $6+7+8=21$\uff0c\u662f\u6700\u4f18\u7684\u3002\n\n\u5982\u679c\u6211\u4eec\u9009\u4e86 $m$ \u4e2a\u8fd9\u6837\u7684\u533a\u95f4\uff0c\u90a3\u4e48\u5b83\u4eec\u4e4b\u95f4\u5c31\u6709 $m-1$ \u4e2a\u7a7a\u9699\u53ef\u4ee5\u7528\u6765\u51cf\u5c0f\u5206\u6570\u3002\u5bf9\u4e8e\u8fd9 $m-1$ \u4e2a\u7a7a\u9699\uff0c\u5206\u522b\u8ba1\u7b97\u5b83\u7684\u5f97\u5206\u6700\u5927\u51cf\u5c11\u91cf\u5e76\u4e22\u5230\u5e73\u8861\u6811 or \u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4e0a\u3002\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u843d\u5728\u8be5\u533a\u95f4\u7684\u6570\u7684\u4e2a\u6570\u4ee5\u53ca\u5b83\u4eec\u7684\u548c\uff0c\u5219\u6700\u7ec8\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\uff08\u539f\u7406\u7c7b\u4f3c\u4e3b\u5e2d\u6811\u6c42\u533a\u95f4\u7b2c k \u5c0f\uff09\u6c42\u51fa\u7b54\u6848\u3002\n\n\u540c\u65f6\uff0c\u5bf9\u4e8e\u64cd\u4f5c $1$\uff0c\u6211\u4eec\u901a\u8fc7\u5dee\u5206\u5c06\u5176\u8f6c\u5316\u4e3a\u4e86\u4e24\u6b21\u5355\u70b9\u4fee\u6539\uff0c\u800c\u5355\u70b9\u4fee\u6539\u5bf9\u4e8e\u9009\u62e9\u7684\u533a\u95f4\u7684\u5f71\u54cd\u662f $\\mathcal{O}(1)$ \u7684\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u66b4\u529b $\\log n$ \u91cd\u65b0\u8ba1\u7b97\u88ab\u5f71\u54cd\u7684\u533a\u95f4\u7684\u7b54\u6848\u5373\u53ef\u3002\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3 \u201c\u88ab\u9009\u62e9\u533a\u95f4\u201d \u4e4b\u95f4\u5f62\u6210\u7684 \u201c\u7a7a\u9699\u533a\u95f4\u201d \u7684\u4fe1\u606f\uff0c\u524d\u8005\u53ea\u9700\u6c42\u548c\uff0c\u6240\u4ee5\u8bb0\u5f55\u540e\u8005\u5373\u53ef\u3002\u5177\u4f53\u5730\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\u4e0e\u533a\u95f4\u548c\uff0c\u5e76\u7528 `set` \u7ef4\u62a4 \u201c\u7a7a\u9699\u533a\u95f4\u201d \u7684\u7aef\u70b9\u4fe1\u606f\uff0c\u65b9\u4fbf\u4fee\u6539\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $Tn\\log n\\sim Tn\\log w$\uff0c\u5176\u4e2d $w$ \u4e3a\u503c\u57df\u3002\n\n\u5f53\u7136\uff0c\u8bf4\u8d77\u6765\u8f7b\u5de7\uff0c\u5b9e\u73b0\u5374\u5e76\u4e0d\u7b80\u5355\u3002\u6709\u4ebf\u4e9b\u7ec6\u8282\u9700\u8981\u6ce8\u610f\uff1a\u90fd\u662f\u8e29\u8fc7\u7684\u5751\u554a\u3002\n\n- \u6700\u540e\u67e5\u8be2\u7b54\u6848\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u8dd1\u5230\u53f6\u5b50\u7ed3\u70b9\u65f6\uff0c\u8fd4\u56de\u7684\u4e0d\u662f\u8be5\u53f6\u5b50\u7ed3\u70b9\u7ef4\u62a4\u7684\u6570\u7684\u4e2a\u6570\uff0c\u800c\u5e94\u8be5\u662f \u201c\u5269\u4f59\u9700\u8981\u51cf\u5c11\u7684\u5f97\u5206\u201d \u9664\u4ee5 \u201c\u8be5\u8282\u70b9\u6240\u8868\u793a\u7684\u5f97\u5206\u51cf\u5c11\u503c\u201d \u4e0a\u53d6\u6574\u3002~~\u8fd9\u4e2a\u9519\u8bef\u592a\u7ecf\u5178\u4e86\u3002~~\n\n- \u533a\u95f4\u7aef\u70b9\u4e3a $2$\uff08\u4ee3\u7801\u4e2d\u4e3a $1$\uff09\u201c\u975e\u6b63\u6574\u6570\u503c\u533a\u95f4\u201d \u5c3d\u7ba1\u4e0d\u5728\u4e24\u4e2a \u201c\u88ab\u9009\u62e9\u533a\u95f4\u201d \u7684\u4e2d\u95f4\uff0c\u4f46\u4e5f\u9700\u8981\u7ef4\u62a4\uff0c\u56e0\u4e3a\u82e5\u533a\u95f4\u5185\u90e8\u6709\u4e00\u4e2a\u4f4d\u7f6e\u53d8\u4e3a\u6b63\u6570\uff0c\u5219\u8be5\u533a\u95f4\u4f1a~~\u88c2\u5f00\u6765~~\u5206\u88c2\u6210\u5de6\u8fb9\u7684\u7aef\u70b9\u4e3a $2$ \u7684\u533a\u95f4\u548c\u53f3\u8fb9\u7684 \u201c\u7a7a\u9699\u533a\u95f4\u201d\u3002\u7aef\u70b9\u4e3a $n$ \u7684\u60c5\u51b5\u540c\u7406\u3002\n\n- \u8001\u8001\u5b9e\u5b9e\u66f4\u65b0\u7b2c\u4e00\u95ee\u7684\u7b54\u6848\uff01\u4e0d\u8981\u6295\u673a\u53d6\u5de7\uff0c\u8e0f\u8e0f\u5b9e\u5b9e\u5730\u51cf\u53bb\u539f\u8d21\u732e\uff0c\u52a0\u4e0a\u65b0\u8d21\u732e\u3002\n\n- \u82e5\u4e00\u4e2a\u4f4d\u7f6e\u4ece\u975e\u6b63\u6574\u6570\u53d8\u4e3a\u4e86\u975e\u6b63\u6574\u6570\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4e0d\u9700\u8981\u4fee\u6539\uff0c\u56e0\u4e3a\u5305\u542b\u8be5\u4f4d\u7f6e\u7684\u533a\u95f4\u7684\u548c\u4e0e\u6700\u5927\u503c\u90fd\u6539\u53d8\u4e86\uff0c\u6240\u4ee5 \u201c\u5f97\u5206\u51cf\u5c11\u91cf\u6700\u5927\u503c\u201d \u4e5f\u6539\u53d8\u4e86\u3002\n\n- Testcase 6,7 \u53ef\u80fd\u4f1a\u51fa\u73b0\u76f8\u90bb\u4e24\u4e2a\u6570\u76f8\u7b49\u7684\u60c5\u51b5\uff0c\u5373\u51fa\u73b0 $d_i=0$\u3002~~\u8fa3\u9e21\u51fa\u9898\u4eba\u7528\u811a\u9020\u6570\u636e\u3002~~\u601d\u8003\u4e00\u4e0b\u8fd9\u79cd\u60c5\u51b5 $d_i$ \u7a76\u7adf\u8981\u4e0d\u8981\u9009\u4e0a\u3002\n\n  \u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u8981\u4f7f\u7b2c\u4e8c\u95ee\u7b54\u6848\u6700\u5c0f\uff0c\u662f\u4e0d\u5e94\u8be5\u9009 $0$ \u7684\u3002\u8003\u8651 $5$ \u4e2a\u76f8\u90bb\u7684\u6570 $a,b,c,d,e$\uff0c\u5176\u4e2d $a,e>0$\uff0c$b,d<0$\uff0c$c=0$\u3002\u5982\u679c $c$ \u4e0d\u88ab\u9009\uff0c\u90a3\u4e48 $b,c,d$ \u4e3a\u4e00\u4e2a\u7a7a\u9699\u533a\u95f4\uff0c\u5f97\u5206\u51cf\u5c11\u91cf\u4e3a $|b+d|$\u3002\u4f46\u5982\u679c $c$ \u88ab\u9009\uff0c\u90a3\u4e48\u5c3d\u7ba1\u4e0d\u5f71\u54cd\u7b2c\u4e00\u95ee\u7b54\u6848\uff0c\u4f46\u4f1a\u5bfc\u81f4\u7a7a\u9699\u533a\u95f4\u5206\u88c2\u4e3a $b$ \u548c $d$ \u4e24\u4e2a\uff0c\u6b64\u65f6\u5f97\u5206\u51cf\u5c11\u91cf\u4e3a $0$\uff08\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u6570\u7684\u533a\u95f4\u7684\u548c\u4e0e\u6700\u5927\u503c\u5c31\u662f\u533a\u95f4\u6240\u542b\u7684\u8fd9\u4e2a\u6570\u672c\u8eab\uff0c\u76f8\u51cf\u5373\u4e3a $0$\uff09\uff0c\u663e\u7136\u4e0d\u4f18\u3002\u56e0\u6b64 $0$ \u4e0d\u5e94\u8be5\u9009\u3002\n\n  \u5410\u69fd\u4e00\u53e5\uff1a\u9009\u4e0d\u9009 $0$ \u4e0d\u5e94\u8be5\u662f\u5c0f X \u7684\u4e8b\u60c5\u4e48\uff1f\u4ec0\u4e48\u65f6\u5019\u8f6e\u5230\u5c0f Y \u6765\u51b3\u5b9a\u9009\u4ec0\u4e48\u4e86\uff08\u7b11\uff09\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll long long\n#define mem(x,v) memset(x,v,sizeof(x))\n#define pii pair <int,int>\n#define fi first\n#define se second\n\nconst int N=1e5+5;\nconst ll W=1ll<<31;\n\nll n,q,ans,u[N],d[N];\n\n// SegTree 1\nll mval[N<<2];\nvoid build(int l,int r,int x){\n\tif(l==r)return mval[x]=d[l],void();\n\tint m=l+r>>1;\n\tbuild(l,m,x<<1),build(m+1,r,x<<1|1);\n\tmval[x]=max(mval[x<<1],mval[x<<1|1]);\n}\nvoid modify(int l,int r,int p,int x,ll v){\n\tif(l==r)return mval[x]=v,void();\n\tint m=l+r>>1;\n\tif(p<=m)modify(l,m,p,x<<1,v);\n\telse modify(m+1,r,p,x<<1|1,v);\n\tmval[x]=max(mval[x<<1],mval[x<<1|1]);\n}\nll query(int l,int r,int ql,int qr,int x){\n\tif(ql<=l&&r<=qr)return mval[x];\n\tll m=l+r>>1,ans=-W;\n\tif(ql<=m)ans=max(ans,query(l,m,ql,qr,x<<1));\n\tif(m<qr)ans=max(ans,query(m+1,r,ql,qr,x<<1|1));\n\treturn ans;\n}\n\n// BIT\nll c[N];\nvoid add(int x,ll v){while(x<=n)c[x]+=v,x+=x&-x;}\nll query(int x){ll s=0; while(x)s+=c[x],x-=x&-x; return s;}\nll query(int l,int r){return query(r)-query(l-1);}\n\n// end points\nset <pii> s;\nll cont[N];\n\n// SegTree 2\nll R,node,ls[N<<6],rs[N<<6],val[N<<6],sum[N<<6];\nvoid insert(ll l,ll r,ll p,ll &x,bool tp){\n\tif(!x)x=++node;\n\tif(tp)sum[x]++,val[x]+=p-W;\n\telse sum[x]--,val[x]-=p-W;\n\tif(l==r)return;\n\tll m=l+r>>1;\n\tif(p<=m)insert(l,m,p,ls[x],tp);\n\telse insert(m+1,r,p,rs[x],tp);\n}\nll query(ll l,ll r,ll k,ll x){\n\tif(!x)return -W;\n\tif(l==r)return k+val[x]<=0?((k-1)/(W-l)+1):-W;\n\tll m=l+r>>1;\n\tif(k+val[ls[x]]<=0)return query(l,m,k,ls[x]);\n\treturn sum[ls[x]]+query(m+1,r,k+val[ls[x]],rs[x]);\n}\n\nvoid clear(pii x){\n\tif(x.fi==1||x.se==n-1)return;\n\tinsert(1,W,cont[x.fi]+W,R,0),cont[x.fi]=0;\n}\nvoid update(int l,int r){\n\tif(l==1||r==n-1)return;\n\tcont[l]=query(l,r)-query(1,n,l,r,1);\n\tinsert(1,W,cont[l]+W,R,1);\n}\n\n// update changes\nvoid change(int pos,ll &val,ll add){\n\tauto it=s.upper_bound({pos,N});\n\t\n\t// update end points and contribution\n\tif(val<=0&&val+add>0){\n\t\tans+=val+add;\n\t\tpii x=*--it; clear(x),s.erase(x);\n\t\tif(x.fi==x.se)return val+=add,void();\n\t\telse if(x.fi==pos)s.insert({++x.fi,x.se}),update(x.fi,x.se);\n\t\telse if(pos==x.se)s.insert({x.fi,--x.se}),update(x.fi,x.se);\n\t\telse{\n\t\t\ts.erase(x);\n\t\t\ts.insert({x.fi,pos-1}),update(x.fi,pos-1);\n\t\t\ts.insert({pos+1,x.se}),update(pos+1,x.se);\n\t\t}\n\t}\n\telse if(val>0&&val+add<=0){\n\t\tans-=val;\n\t\tpii x={pos,pos};\n\t\tif(it!=s.begin()){\n\t\t\tpii tmp=*(--it); it++;\n\t\t\tif(tmp.se==pos-1)clear(tmp),s.erase(tmp),x.fi=tmp.fi;\n\t\t} if(it!=s.end()){\n\t\t\tpii tmp=*it;\n\t\t\tif(tmp.fi==pos+1)clear(tmp),s.erase(tmp),x.se=tmp.se;\n\t\t} s.insert(x),update(x.fi,x.se);\n\t} else if(val<=0&&val+add<=0)it--,clear(*it),update((*it).fi,(*it).se);\n\telse ans+=add; val+=add;\n}\n\nvoid solve(){\n\t// empty\n\tmem(c,0),mem(cont,0),s.clear(),ans=0;\n\tR=node,mem(ls,0),mem(rs,0),mem(val,0),mem(sum,0);\n\t\n\t// read\n\tcin>>n>>q>>u[0];\n\tfor(int i=1;i<n;i++){\n\t\tcin>>u[i],d[i]=u[i]-u[i-1];\n\t\tif(d[i]>0)ans+=d[i];\n\t\tadd(i,d[i]);\n\t} build(1,n,1);\n\t\n\t// find end points [l,r)\n\tfor(int i=1,pre=1;i<n;i++){\n\t\tif(d[i]<=0&&d[i-1]>0)pre=i;\n\t\tif(d[i]>0&&d[i-1]<=0){\n\t\t\ts.insert({pre,i-1});\n\t\t\tif(pre!=1)update(pre,i-1);\n\t\t} if(i==n-1&&d[i]<=0)s.insert({pre,n-1});\n\t}\n\t\n\t// answer all the queries\n\tfor(int i=1;i<=q;i++){\n\t\tint op; cin>>op;\n\t\tif(op==0){\n\t\t\tll l,r,c; cin>>l>>r>>c,l--,r--;\n\t\t\t\n\t\t\t// modify SegTree 1 & BIT then update answer\n\t\t\tif(l)add(l,c),modify(1,n,l,1,d[l]+c),change(l,d[l],c);\n\t\t\tif(r+1<n)add(r+1,-c),modify(1,n,r+1,1,d[r+1]-c),change(r+1,d[r+1],-c);\n\t\t}\n\t\telse cout<<ans<<\" \"<<(ans?max(-1ll,query(1,W,ans,R)):0)<<endl;\n\t}\n}\nint main(){\n\tint T; cin>>T;\n\twhile(T--)solve();\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1624971979,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "P4497 [WC2011]\u62fc\u70b9\u6e38\u620f"
    },
    {
        "content": "[\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4497)\n\n\u795e\u4ed9 DS\u3002\n\n\u9996\u5148\u5173\u4e8e\u7b2c\u4e00\u95ee\u53ef\u4ee5\u8f7b\u677e\u60f3\u5230\u4e00\u4e2a DP\uff0c$dp_{i,j}$ \u8868\u793a\u8003\u8651\u5230\u7b2c $i$ \u4f4d\uff0c\u8fd9\u4e00\u4f4d\u5947\u5076\u6027\u4e3a $j$ \u7684\u6700\u5927\u6743\u503c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $n^2q$\uff0c\u53ef\u4ee5\u62ff\u5230 $3$ \u5206\u7684\u597d\u6210\u7ee9\uff08\u5927\u96fe\uff09\uff0c\u5982\u679c\u7a0d\u5fae\u52a8\u70b9\u8111\u5b50\u4f7f\u7528\u524d\u7f00\u548c\u4f18\u5316\u8fd8\u53ef\u4ee5\u62ff\u5230 $9$ \u5206\u7684\u597d\u6210\u7ee9\uff0c\u4f46\u662f\u663e\u7136\u8fd9\u4e2a\u505a\u6cd5\u662f\u6ca1\u6709\u524d\u9014\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e2a DP \u5bf9\u7b2c\u4e8c\u95ee\u6ca1\u6709\u4efb\u4f55\u542f\u53d1\u4f5c\u7528\uff0c\u5e76\u4e14\u4e5f\u65e0\u6cd5\u5c06\u5b83\u4f18\u5316\u5230\u6bcf\u6b21\u8be2\u95ee\u90fd\u53ef\u4ee5\u5728\u4f4e\u4e8e $\\mathcal O(n)$ \u5185\u5904\u7406\u7684\u590d\u6742\u5ea6\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u597d\u653e\u5f03\u8fd9\u4e2a\u601d\u8def\u3002\n\n\u6309\u7167\u6211\u4eec\u505a\u9898\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u8003\u8651\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u6743\u503c\u6700\u5927\u7684\u5e8f\u5217\u6709\u4ec0\u4e48\u6027\u8d28\uff0c\u624b\u73a9\u51e0\u7ec4\u6570\u636e\u540e\u4f60\u5c31\u80fd\u53d1\u73b0\u4ee5\u4e0b\u6027\u8d28\uff1a\n\n> Observation 1. \u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217 $a$\uff0c\u6211\u4eec\u5982\u679c\u5c06 $a$ \u5212\u5206\u6210\u4e00\u6bb5\u6bb5\u4e0a\u5347\u6bb5\u548c\u4e0b\u964d\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u9009\u62e9\u7684\u5b50\u5e8f\u5217\u7684\u7b2c $2k+1$ \u4e2a\u5143\u7d20\u4e00\u5b9a\u662f\u7b2c $k$ \u4e2a\u6781\u5c0f\u503c\u70b9\uff0c\u7b2c $2k+2$ \u4e2a\u5143\u7d20\u4e00\u5b9a\u662f\u7b2c $k$ \u4e2a\u6781\u5927\u503c\u70b9\n\n\u5177\u4f53\u8bc1\u660e\u53ef\u7528\u8c03\u6574\u6cd5\uff0c\u7559\u7ed9\u8bfb\u8005\u81ea\u5df1\u601d\u8003\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c $2k+1$ \u548c\u7b2c $2k+2$ \u4e2a\u5143\u7d20\u4e00\u5b9a\u662f\u7b2c $k$ \u4e2a\u4e0a\u5347\u6bb5\u7684\u5f00\u5934\u548c\u7ed3\u5c3e\uff0c\u8fd9\u4e2a\u5e8f\u5217\u7684\u6743\u503c\u5c31\u662f\u6240\u6709\u4e0a\u5347\u6bb5\u7684\u7ed3\u5c3e\u503c\u51cf\u53bb\u5f00\u5934\u7684\u503c\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u4e2a\u4e0a\u5347\u6bb5\u3001\u4e0b\u964d\u6bb5\u7ef4\u62a4\u8d77\u6765\u6709\u70b9\u68d8\u624b\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u59a8\u6362\u4e2a\u89d2\u5ea6\uff0c\u7528\u4e0e\u5176\u8054\u7cfb\u7d27\u5bc6\u7684**\u5dee\u5206\u5e8f\u5217** $b_i=a_{i+1}-a_i$ \u6765\u770b\u5f85\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u5dee\u5206\u5e8f\u5217\u7684\u6b63\u8d1f\u6027\u5373\u6697\u793a\u4e86\u8be5\u5143\u7d20\u4f4d\u4e8e\u4e0a\u5347\u6bb5\u4e2d\u8fd8\u662f\u4e0b\u964d\u6bb5\u4e2d\u3002\u6ce8\u610f\u5230\u5bf9\u4e8e\u4e00\u6bb5\u4e0a\u5347\u5e8f\u5217\uff0c\u5176\u672b\u5c3e\u5143\u7d20\u4e0e\u5f00\u5934\u5143\u7d20\u7684\u5dee\u5c31\u662f\u8fd9\u4e2a\u5dee\u5206\u5e8f\u5217\u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c\uff0c\u800c\u5bf9\u4e8e\u4e0b\u964d\u5e8f\u5217\uff0c\u5176\u5dee\u5206\u5e8f\u5217\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u975e\u6b63\uff0c\u56e0\u6b64\u6211\u4eec\u7a0d\u5fae\u8f6c\u5316\u4e00\u4e0b\u5373\u53ef\u5f97\u5230\u4ee5\u4e0b\u6027\u8d28\uff1a\n\n> Observation 2. \u5bf9\u4e8e\u5e8f\u5217 $a$\uff0c\u5176\u5b50\u5e8f\u5217\u70b9\u503c\u7684\u6700\u5927\u503c\u5c31\u662f\u5176\u5dee\u5206\u5e8f\u5217\u4e2d\u6240\u6709\u6b63\u6570\u7684\u548c\n\n\u8fd9\u6837\u7b2c\u4e00\u95ee\u5c31\u89e3\u51b3\u4e86\uff0c\u56e0\u4e3a\u6bcf\u6b21\u533a\u95f4\u52a0\u64cd\u4f5c\u6700\u591a\u5f71\u54cd\u5dee\u5206\u5e8f\u5217\u4e2d\u4e24\u4e2a\u5143\u7d20\u7684\u6743\u503c\uff0c\u56e0\u6b64\u8fd9\u4e2a\u8d21\u732e\u662f\u53ef\u4ee5 $\\mathcal O(1)$ \u8ba1\u7b97\u7684\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u7b2c\u4e8c\u95ee\uff0c\u6bcf\u6b21\u64cd\u4f5c\u76f8\u5f53\u4e8e\u79fb\u52a8\u6700\u4f18\u5e8f\u5217\u4e2d\u4e0b\u6807 $2k,2k+1$ \u5143\u7d20\uff0c\u800c\u6839\u636e\u4e4b\u524d\u7684\u63a8\u8bba\u8fd9\u4e24\u4e2a\u5143\u7d20\u5fc5\u7136\u662f\u540c\u4e00\u4e2a\u4e0b\u964d\u6bb5\u7684\u9996\u5c3e\u5143\u7d20\uff0c\u800c\u663e\u7136\u5bf9\u4e8e\u4e0b\u964d\u6bb5\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20 $x$\uff0c\u5c06 $x$ \u79fb\u81f3 $x+1$ \u4f1a\u4f7f\u5f97\u6743\u503c\u52a0\u4e0a $b_x$\uff0c\u56e0\u6b64\u64cd\u4f5c\u7b49\u4ef7\u4e8e\u9009\u62e9\u67d0\u4e2a\u4e0b\u964d\u6bb5\u4e2d\u7684\u67d0\u4e2a\u4e0d\u76f8\u4ea4\u7684\u524d\u7f00\u548c\u540e\u7f00\uff0c\u5e76\u4ee4\u6743\u503c\u52a0\u4e0a\u8fd9\u6bb5\u524d\u7f00\u548c\u540e\u7f00\u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c\uff0c\u95ee\u6700\u5c11\u51e0\u6b21\u64cd\u4f5c\u80fd\u4f7f\u6743\u503c $\\le 0$\u3002\n\n\u7531\u4e8e\u4e0b\u964d\u6bb5\u7684\u5dee\u5206\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd $\\le 0$\uff0c\u56e0\u6b64\u6211\u4eec\u80af\u5b9a\u4f1a\u8d2a\u5fc3\u5730\u9009\u62e9\u957f\u5ea6\u52a0\u8d77\u6765\u7b49\u4e8e\u4e0b\u964d\u6bb5\u51cf $1$ \u7684\u524d\u540e\u7f00\uff0c\u4e5f\u5c31\u662f\u5c06\u4e0b\u6807 $2k,2k+1$ \u5143\u7d20\u79fb\u81f3\u67d0\u5bf9\u76f8\u90bb\u4f4d\u7f6e $p,p+1$\uff0c\u8fd9\u6837\u8d21\u732e\u5c31\u662f\u8fd9\u4e2a\u76f8\u90bb\u6bb5\u4e2d\u5dee\u5206\u5e8f\u5217\u6743\u503c\u4e4b\u548c\u52a0\u4e0a $b_p$\uff0c\u800c\u6211\u4eec\u663e\u7136\u4f1a\u9009\u62e9 $b_p$ \u6700\u5927\u7684 $p$ \u4f5c\u4e3a\u76ee\u6807\u4f4d\u7f6e\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\uff1a\n\n> Observation 3. \u5bf9\u4e8e\u5dee\u5206\u5e8f\u5217\u4e0a\u6bcf\u4e2a\u975e\u6b63\u6bb5\uff0c\u5176\u79fb\u52a8\u4e00\u6b21\u6743\u503c\u6700\u5927\u51cf\u5c11\u91cf\u5c31\u662f\u8fd9\u6bb5\u5dee\u5206\u5e8f\u5217\u6743\u503c\u4e4b\u548c\u51cf\u53bb\u8fd9\u6bb5\u4e2d $b_i$ \u7684\u6700\u5927\u503c\u3002\n\n\u56e0\u6b64\u5bf9\u4e8e\u6bcf\u4e2a\u975e\u6b63\u6574\u6570\u7684\u6bb5\uff0c\u5176\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\u6743\u503c\u7684\u6700\u5927\u51cf\u5c11\u91cf\u662f\u786e\u5b9a\u7684\uff0c\u800c\u6211\u4eec\u80af\u5b9a\u4f1a\u4f18\u5148\u9009\u62e9\u51cf\u5c11\u91cf\u6700\u5927\u7684\u4e0b\u964d\u6bb5\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u8fde\u7eed\u6bb5\u6743\u503c\u6700\u5927\u51cf\u5c11\u91cf\u6254\u8fdb\u4e00\u4e2a\u5e73\u8861\u6811\uff0c\u6bcf\u6b21\u8be2\u95ee\u5728\u5e73\u8861\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u5bfc\u81f4\u8fde\u7eed\u6bb5\u7684\u53d8\u5316\u91cf\u662f $\\mathcal O(1)$ \u7ea7\u522b\u7684\uff0c\u7528\u4e2a `set` \u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\uff0c\u5dee\u5206\u6570\u7ec4\u7684\u533a\u95f4\u6700\u5c0f\u503c\u53ef\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u4e8e\u662f\u8fd9\u9898\u5c31\u88ab\u6211\u4eec\u62c6\u5206\u6210\u51e0\u6b65\u89e3\u51b3\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $n\\log n$\u3002\n\n\u6ce8\u610f\u70b9\uff1a\u6ce8\u610f\u7279\u6b8a\u5224\u65ad\u7b2c\u4e00\u6bb5\u548c\u6700\u540e\u4e00\u6bb5\u4e0b\u964d\u6bb5\u3002\n\n~~\u7801\u4e86 188 \u884c~~\n\n```cpp\nconst int MAXN=1e5;\nint n,qu,a[MAXN+5];ll b[MAXN+5],sum=0;\nstruct segtree{\n\tstruct node{int l,r;ll sum,mx;} s[MAXN*4+5];\n\tvoid clear(int k){\n\t\tif(s[k].l==s[k].r) return s[k].l=s[k].r=s[k].sum=s[k].mx=0,void();\n\t\tclear(k<<1);clear(k<<1|1);s[k].l=s[k].r=s[k].sum=s[k].mx=0;\n\t}\n\tvoid pushup(int k){\n\t\ts[k].mx=max(s[k<<1].mx,s[k<<1|1].mx);\n\t\ts[k].sum=s[k<<1].sum+s[k<<1|1].sum;\n\t}\n\tvoid build(int k,int l,int r){\n\t\ts[k].l=l;s[k].r=r;if(l==r) return s[k].mx=s[k].sum=b[l],void();\n\t\tint mid=l+r>>1;build(k<<1,l,mid);build(k<<1|1,mid+1,r);pushup(k);\n\t}\n\tvoid modify(int k,int p,ll x){\n\t\tif(s[k].l==s[k].r) return s[k].mx=s[k].sum=x,void();int mid=s[k].l+s[k].r>>1;\n\t\t(p<=mid)?modify(k<<1,p,x):modify(k<<1|1,p,x);pushup(k);\n\t}\n\tll getmax(int k,int l,int r){\n\t\tif(l<=s[k].l&&s[k].r<=r) return s[k].mx;int mid=s[k].l+s[k].r>>1;\n\t\tif(r<=mid) return getmax(k<<1,l,r);else if(l>mid) return getmax(k<<1|1,l,r);\n\t\telse return max(getmax(k<<1,l,mid),getmax(k<<1|1,mid+1,r));\n\t}\n\tll getsum(int k,int l,int r){\n\t\tif(l<=s[k].l&&s[k].r<=r) return s[k].sum;int mid=s[k].l+s[k].r>>1;\n\t\tif(r<=mid) return getsum(k<<1,l,r);else if(l>mid) return getsum(k<<1|1,l,r);\n\t\telse return getsum(k<<1,l,mid)+getsum(k<<1|1,mid+1,r);\n\t}\n} st;\nstruct fhqtreap{\n\tstruct node{int ch[2],key,siz;ll sum,val;} s[MAXN*3+5];\n\tint rt,ncnt;\n\tfhqtreap(){rt=ncnt=0;}\n\tvoid init(){\n\t\tfor(int i=1;i<=ncnt;i++) s[i].ch[0]=s[i].ch[1]=s[i].key=s[i].siz=s[i].sum=s[i].val=0;\n\t\trt=ncnt=0;\n\t}\n\tvoid pushup(int k){\n\t\ts[k].sum=s[s[k].ch[0]].sum+s[s[k].ch[1]].sum+s[k].val;\n\t\ts[k].siz=s[s[k].ch[0]].siz+s[s[k].ch[1]].siz+1;\n\t}\n\tvoid split(int k,ll v,int &a,int &b){\n\t\tif(!k) return a=b=0,void();\n\t\tif(s[k].val<=v) return a=k,split(s[k].ch[1],v,s[k].ch[1],b),pushup(k),void();\n\t\telse return b=k,split(s[k].ch[0],v,a,s[k].ch[0]),pushup(k),void();\n\t}\n\tint merge(int x,int y){\n\t\tif(!x||!y) return x+y;\n\t\tif(s[x].key<s[y].key) return s[x].ch[1]=merge(s[x].ch[1],y),pushup(x),x;\n\t\telse return s[y].ch[0]=merge(x,s[y].ch[0]),pushup(y),y;\n\t}\n\tvoid insert(ll x){\n//\t\tprintf(\"insert %lld\\n\",x);\n\t\ts[++ncnt].sum=x;s[ncnt].val=x;s[ncnt].key=rand();s[ncnt].siz=1;\n\t\tint k1,k2;split(rt,x-1,k1,k2);rt=merge(merge(k1,ncnt),k2);\n//\t\tprintf(\"%d\\n\",rt);\n\t}\n\tvoid del(ll x){\n//\t\tprintf(\"del %lld\\n\",x);\n\t\tint k1,k2,k3;split(rt,x-1,k1,k2);split(k2,x,k2,k3);\n\t\trt=merge(merge(k1,s[k2].ch[0]),merge(s[k2].ch[1],k3));\n\t}\n\tint walk(int k,ll v){\n\t\tif(v<=0) return 0;\n\t\tif(s[k].sum+v>0) return -1;\n//\t\tprintf(\"%d %lld %lld %lld %lld\\n\",k,v,s[s[k].ch[0]].sum,s[s[k].ch[1]].sum);\n\t\tif(s[s[k].ch[0]].sum+v<=0) return walk(s[k].ch[0],v);\n\t\telse if(s[s[k].ch[0]].sum+s[k].val+v<=0) return s[s[k].ch[0]].siz+1;\n\t\telse return s[s[k].ch[0]].siz+1+walk(s[k].ch[1],v+(s[s[k].ch[0]].sum+s[k].val));\n\t}\n} trp;\nll getval(int l,int r){return st.getsum(1,l,r)-st.getmax(1,l,r);}\nset<pii> itv;\nvoid delitv(int l,int r){\n\tassert(l<=r);\n//\tprintf(\"delitv %d %d\\n\",l,r);\n\titv.erase(itv.find(mp(l,r)));\n\tif((l^1)&&(r^(n-1))) trp.del(getval(l,r));\n}\nvoid insitv(int l,int r){\n\tassert(l<=r);\n//\tprintf(\"insitv %d %d\\n\",l,r);\n\titv.insert(mp(l,r));\n\tif((l^1)&&(r^(n-1))) trp.insert(getval(l,r));\n}\nvoid chg(int x,ll v){\n\tsum-=max(b[x],0ll);sum+=max(v,0ll);\n\tif(b[x]>0&&v<=0){\n\t\tpii nxt=*itv.upper_bound(mp(x,n+1));\n\t\tpii pre=*--itv.lower_bound(mp(x,0));\n\t\tint l=x,r=x;\n\t\tif(nxt.fi==x+1) delitv(nxt.fi,nxt.se),r=nxt.se;\n\t\tif(pre.se==x-1) delitv(pre.fi,pre.se),l=pre.fi;\n\t\tst.modify(1,x,v);insitv(l,r);\n\t} else if(b[x]<=0&&v>0){\n\t\tpii lrg=*--itv.lower_bound(mp(x,n+1));\n\t\tdelitv(lrg.fi,lrg.se);st.modify(1,x,v);\n\t\tif(lrg.se^x) insitv(x+1,lrg.se);\n\t\tif(lrg.fi^x) insitv(lrg.fi,x-1);\n\t} else if(b[x]<=0){\n\t\tpii t=*--itv.lower_bound(mp(x,n+1));\n\t\tdelitv(t.fi,t.se);st.modify(1,x,v);\n\t\tinsitv(t.fi,t.se); \n\t} else st.modify(1,x,v);\n\tb[x]=v;\n}\nvoid clear(){\n\tmemset(a,0,sizeof(a));memset(b,0,sizeof(b));\n\tsum=0;itv.clear();trp.init();st.clear(1);\n}\nvoid solve(){\n\tscanf(\"%d%d\",&n,&qu);clear();\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tfor(int i=1;i<n;i++) b[i]=a[i+1]-a[i],sum+=max(b[i],0ll);\n\tst.build(1,1,n-1);itv.insert(mp(-1,-1));itv.insert(mp(n+1,n+1));\n\tint pre=0;\n\tfor(int i=1;i<n;i++) if(b[i]>0){\n\t\tif(pre^(i-1)) insitv(pre+1,i-1);\n\t\tpre=i;\n\t} if(pre^(n-1)) insitv(pre+1,n-1);\n\twhile(qu--){\n\t\tint opt;scanf(\"%d\",&opt);\n\t\tif(opt==0){\n\t\t\tint l,r,v;scanf(\"%d%d%d\",&l,&r,&v);\n\t\t\tif(l^1) chg(l-1,b[l-1]+v);\n\t\t\tif(r^n) chg(r,b[r]-v);\n\t\t} else {\n\t\t\tprintf(\"%lld %d\\n\",sum,trp.walk(trp.rt,sum));\n\t\t}\n\t}\n}\nint main(){int qu;scanf(\"%d\",&qu);while(qu--) solve();return 0;}\n```\n\n",
        "postTime": 1624955198,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4497 [WC2011]\u62fc\u70b9\u6e38\u620f"
    },
    {
        "content": "> Situation 1.\u8003\u8651\u5148\u56de\u7b54\u7b2c\u4e00\u95ee\uff0c\u5373\u9009\u62e9\u6700\u4f18\u7684\u4e00\u7ec4\u4e0b\u6807\u96c6\u3002\n\n> Observation 1.\u6211\u4eec\u9009\u62e9\u7684\u4e1c\u897f\u80af\u5b9a\u662f\u4e2a\u6298\u7ebf\u5f62\u7684\u4e1c\u897f\uff0c\u5176\u4e2d\u5947\u6570\u4f4d\u7684\u5143\u7d20\u5c0f\u4e8e\u7d27\u63a5\u7740\u5b83\u7684\u5076\u6570\u4f4d\u5143\u7d20\u3002\n\n\u8fd9\u5f88\u663e\u7136\uff0c\u56e0\u4e3a\u5982\u679c\u4e00\u4e2a\u5947\u6570\u4f4d\u7684\u5143\u7d20\u5927\u4e8e\u7b49\u4e8e\u7d27\u63a5\u7740\u5b83\u7684\u5076\u6570\u4f4d\u5143\u7d20\uff0c\u663e\u7136\u53ef\u4ee5\u5220\u6389\u8fd9\u5bf9\u5143\u7d20\u4f7f\u5f97\u7b54\u6848\u4e0d\u66f4\u52a3\u3002\n\n> Definition 1.\u6211\u4eec\u628a\u76f8\u90bb\u7684\u524d\u4e00\u4e2a\u5947\u6570\u4f4d\u548c\u540e\u4e00\u4e2a\u5076\u6570\u4f4d\u79f0\u4f5c\u201c**\u4e00\u5bf9**\u201d\u3002\n\n> Observation 2.\u5047\u5982\u76f8\u90bb\u7684\u4e24\u5bf9\u6570\u4e2d\uff0c\u524d\u4e00\u5bf9\u7684\u5076\u6570\u4f4d\u4e0d\u5927\u540e\u4e00\u5bf9\u7684\u5947\u6570\u4f4d\uff0c\u5219\u663e\u7136\u8fd9\u4e24\u4e2a\u5143\u7d20\u53ef\u4ee5\u88ab\u540c\u65f6\u5220\u6389\u4f7f\u5f97\u7b54\u6848\u4e0d\u66f4\u52a3\u3002\n>\n> $\\rightarrow$ Deduction 2.1.\u5bf9\u4e8e\u4e00\u6bb5\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e $2$ \u7684\u8fde\u7eed\u4e0d\u964d\u5e8f\u5217\uff0c\u6700\u4f18\u9009\u62e9\u65b9\u6cd5\u5e94\u8be5\u662f\u5c06\u4e00\u5bf9\u6570\u7f6e\u4e8e\u8be5\u6bb5\u7684\u5f00\u5934\u4e0e\u7ed3\u5c3e\uff0c\u8fd9\u6837\u8d21\u732e\u5c31\u662f\u8fd9\u6bb5\u5e8f\u5217\u201c\u5347\u9ad8\u201d\u7684\u9ad8\u5ea6\u3002\u8bc1\u660e\u53ef\u4ee5\u5148\u7531 Observation 2 \u5f97\u5230\u8be5\u6bb5\u5e8f\u5217\u4e2d\u6700\u591a\u53ea\u6709\u4e00\u5bf9\u6570\uff0c\u518d\u8d2a\u5fc3\u5730\u5de6\u53f3\u79fb\u52a8\u8fd9\u4e24\u4e2a\u6570\u5f97\u51fa\u3002\n\n\u73b0\u5728\u6211\u4eec\u6765\u8003\u8651\u4e0d\u540c\u7684\u8fde\u7eed\u4e0d\u964d\u5e8f\u5217\u95f4\u5e94\u8be5\u5982\u4f55\u5408\u5e76\u3002\n\n> Lemma 1.\u76f8\u90bb\u7684\u4e24\u4e2a\u957f\u5ea6\u4e0d\u5c0f\u4e8e $2$ \u7684\u6781\u957f\u8fde\u7eed\u4e0d\u964d\u5e8f\u5217\uff0c\u524d\u4e00\u4e2a\u5e8f\u5217\u7684\u7ed3\u5c3e\u5fc5\u5b9a\u5927\u4e8e\u540e\u4e00\u4e2a\u5e8f\u5217\u7684\u5f00\u5934\u3002\n\n\u8003\u8651\u53cd\u8bc1\u3002\u5047\u5982\u524d\u4e00\u4e2a\u5e8f\u5217\u7684\u7ed3\u5c3e\u5c0f\u4e8e\u7b49\u4e8e\u540e\u4e00\u4e2a\u5e8f\u5217\u7684\u5f00\u5934\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5e8f\u5217\u6ca1\u6709\u5408\u5e76\u53ea\u80fd\u662f\u56e0\u4e3a\u5728\u4e24\u4e2a\u5e8f\u5217\u4e4b\u95f4\u8fd8\u5939\u4e86\u4e00\u4e9b\u5c0f\u4e8e\u524d\u4e00\u4e2a\u5e8f\u5217\u7ed3\u5c3e\u7684\u6570\uff0c\u4f46\u8fd9\u65f6\u540e\u4e00\u4e2a\u5e8f\u5217\u5c31\u53ef\u4ee5\u524d\u79fb\uff08\u56e0\u4e3a\u5c0f\u4e8e\u524d\u4e00\u4e2a\u5e8f\u5217\u7ed3\u5c3e\u7684\u6570\u5fc5\u5b9a\u5c0f\u4e8e\u540e\u4e00\u4e2a\u5e8f\u5217\u7684\u5f00\u5934\uff09\uff0c\u4e0e\u201c\u6781\u957f\u201d\u7684\u524d\u63d0\u4e92\u65a5\u3002\n\n> Algorithm 1.\u6700\u4f18\u89e3\u6cd5\u4e2d\uff0c\u6bcf\u4e00\u5bf9\u6570\u90fd\u662f\u67d0\u4e2a\u957f\u5ea6\u4e0d\u5c0f\u4e8e $2$ \u7684\u6781\u957f\u8fde\u7eed\u4e0d\u964d\u5e8f\u5217\u7684\u5f00\u5934\u7ed3\u5c3e\u3002\n\n\u7531 Deduction 2.1\uff0c\u8be5\u7b97\u6cd5\u5728\u957f\u5ea6\u4e0d\u5c0f\u4e8e $2$ \u7684\u6781\u957f\u8fde\u7eed\u4e0d\u964d\u5e8f\u5217\u5185\u90e8\u662f\u6b63\u786e\u7684\uff1b\u7531 Lemma 1 \uff0c\u8be5\u7b97\u6cd5\u6ca1\u6709 Observation 2 \u53d1\u52a8\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u5728\u5e8f\u5217\u95f4\u4e5f\u662f\u6b63\u786e\u7684\uff1b\u4e24\u8005\u7ed3\u5408\uff0c\u5c31\u8868\u660e\u8be5\u7b97\u6cd5\u5728\u5168\u5c40\u90fd\u662f\u6b63\u786e\u7684\u3002\n\n> Definition 2.\u5b9a\u4e49 $sum$ \u8868\u793a\u7b2c\u4e00\u95ee\u7684\u7b54\u6848\u3002\n\n> Situation 2.\u8003\u8651\u56de\u7b54\u7b2c\u4e8c\u95ee\u3002\n\n> Definition 3.\u5b9a\u4e49\u76f8\u90bb\u7684\u524d\u4e00\u4e2a\u5076\u6570\u4f4d\u4e0e\u540e\u4e00\u4e2a\u5947\u6570\u4f4d\u4e3a\u201c**\u4e00\u7ec4**\u201d\u3002\n\n\u663e\u7136\uff0c\u7531 Algorithm 1\uff0c\u6bcf\u4e00\u7ec4\u5fc5\u7136\u662f\u5728\u4e00\u4e2a\u6781\u957f\u8fde\u7eed\u4e0b\u964d\u5e8f\u5217\u7684\u5f00\u5934\u4e0e\u7ed3\u5c3e\u2014\u2014\u56e0\u4e3a\u4e0d\u5b58\u5728\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e $2$ \u7684\u8fde\u7eed\u4e0d\u964d\u5e8f\u5217\u5f53\u4e14\u4ec5\u5f53\u5176\u662f\u4e00\u4e2a\u8fde\u7eed\u4e0b\u964d\u5e8f\u5217\uff0c\u800c\u56e0\u4e3a\u4e0d\u964d\u5e8f\u5217\u6781\u957f\uff0c\u6240\u4ee5\u4e0b\u964d\u5e8f\u5217\u4e5f\u6781\u957f\u3002\n\n> Observation 3.\u5728\u79fb\u52a8\u4e00\u7ec4\u7684\u65f6\u5019\uff0c\u663e\u7136\u6211\u4eec\u5fc5\u7136\u8981\u79fb\u5230\u8be5\u6781\u957f\u4e0b\u964d\u5e8f\u5217\u4e2d\u76f8\u90bb\u4e24\u4e2a\u6570\u5dee\u6700\u5c0f\u7684\u4f4d\u7f6e\u4e0a\uff0c\u8fd9\u6837\u5bf9\u7b54\u6848\u7684\u51cf\u5c11\u5c31\u662f\u539f\u672c\u4e24\u4e2a\u6570\u7684\u5dee\u518d\u51cf\u53bb\u8fd9\u4e00\u6700\u5c0f\u5dee\u3002\n\n\u663e\u7136\uff0c\u4e0d\u53ef\u80fd\u6709\u5176\u5b83\u65b9\u6848\u6bd4\u8fd9\u4e2a\u529e\u6cd5\u51cf\u5c11\u7684\u66f4\u591a\u4e86\u3002\n\n> Algorithm 2.\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u6570\uff0c\u6211\u4eec\u5904\u7406\u51fa\u79fb\u52a8\u5b83\u7684\u6700\u4f18\u51cf\u5c11\u7ed3\u679c\uff0c\u7136\u540e\u4ea4\u7531\u67d0\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u627e\u5230\u5176\u4e2d\u9009\u53d6\u6700\u5c11\u6570\u5373\u53ef\u5c06 $sum$ \u51cf\u4e3a\u975e\u6b63\u7684\u65b9\u6848\u5373\u53ef\u3002\n\n\u73b0\u5728\u6211\u4eec\u8003\u8651\u600e\u4e48\u5904\u7406\u4f1a\u66f4\u4f18\u3002\n\n> Observation 4.\u6211\u4eec\u53ef\u4ee5\u5c06\u5e8f\u5217\u5dee\u5206\u3002\n\n\u8bf4\u5b9e\u8bdd\u8fd9\u4e2a Observation \u662f\u6211\u89c9\u5f97\u4e0d\u592a\u81ea\u7136\u7684\u4e00\u4e2a\uff0c\u4f46\u662f\u5176\u4ecd\u7136\u53ef\u4ee5\u7531 Observation 3 \u4e2d\u201c\u76f8\u90bb\u4e24\u4e2a\u6570\u7684\u5dee\u201d\u8fdb\u800c\u60f3\u5230\u3002\n\n> Description 1.\u8003\u8651\u73b0\u5728\u7684\u60c5\u666f\u3002\n>\n> \u5dee\u5206\u540e\uff0c\u6781\u957f\u8fde\u7eed\u4e0d\u964d\u5e8f\u5217\u5c31\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u975e\u8d1f\u6570\uff0c\u800c\u8fd9\u6bb5\u975e\u8d1f\u6570\u7684\u8d21\u732e\u5c31\u662f\u6bb5\u5185\u6240\u6709\u6570\u7684\u548c\u3002\n>\n> \u4e5f\u5373\uff0c$sum$ \u5c31\u662f\u5dee\u5206\u5e8f\u5217\u4e2d\u6240\u6709\u975e\u8d1f\u6570\u7684\u548c\u3002\n>\n> \u7136\u540e\uff0cObservation 3 \u4e2d\u7684\u201c\u6700\u5c0f\u5dee\u201d\u5c31\u662f\u5dee\u5206\u5e8f\u5217\u4e2d\u8fde\u7eed\u8d1f\u6570\u4e2d\u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u5bf9\u7b54\u6848\u7684\u51cf\u5c11\u5c31\u662f\u8be5\u6bb5\u8fde\u7eed\u8d1f\u6570\u7684\u5143\u7d20\u4e4b\u548c\u51cf\u53bb\u8be5\u6700\u5927\u503c\u3002\uff08\u4e3a\u4ec0\u4e48\u662f\u6700\u5927\u503c\u5462\uff1f\u56e0\u4e3a\u8fd9\u662f\u8d1f\u6570\u554a\uff01\uff09\n\n\u800c\u8fd9\u4e2a\u60c5\u666f\u660e\u663e\u662f\u8981\u8f7b\u677e\u5f88\u591a\u7684\u3002\n\n> Observation 5.\u4e00\u6b21\u4fee\u6539\u5bf9\u4e8e\u79fb\u52a8\u67d0\u7ec4\u6570\u7684\u7ed3\u679c\u6240\u6784\u6210\u7684\u96c6\u5408\u7684\u5f71\u54cd\u662f\u5f88\u8f7b\u5fae\u7684\u2014\u2014\u51c6\u786e\u5730\u8bf4\uff0c\u662f $O(1)$ \u7684\u3002\n\n\u56e0\u4e3a\u5dee\u5206\u4e86\uff0c\u6240\u4ee5\u533a\u95f4\u52a0\u5c31\u662f\u5355\u70b9\u52a0\u3002\u5355\u70b9\u52a0\u5bf9\u8d1f\u6570\u8fde\u7eed\u6bb5\u7684\u5f71\u54cd\uff0c\u8981\u4e48\u662f\u672a\u6539\u53d8\u6b63\u8d1f\u6027\uff0c\u53ea\u6539\u53d8\u4e86\u6b64\u6bb5\u7684\u7b54\u6848\uff0c\u8fd9\u65f6\u6539\u53d8\u662f $O(1)$ \u7684\uff1b\u8981\u4e48\u662f\u6539\u53d8\u4e86\u6b63\u8d1f\u6027\uff0c\u4e00\u6bb5\u8fde\u7eed\u6bb5\u62c6\u6210\u4e24\u6bb5\u6216\u8005\u4e24\u6bb5\u5e76\u4e00\u6bb5\uff0c\u4f46\u662f\u603b\u800c\u8a00\u4e4b\u6539\u53d8\u4ecd\u662f $O(1)$ \u7684\u3002\n\n> Final Algorithm.\n>\n> \u5dee\u5206\u3002\u7136\u540e\uff0c\u7ef4\u62a4 $sum$ \u8868\u793a\u6240\u6709\u975e\u8d1f\u6570\u7684\u548c\uff08\u53ef\u4ee5 $O(1)$ \u7b80\u5355\u5904\u7406\uff09\u3002\u7528\u4e00\u4e2a `set<pair<int,int> >` \u6765\u7ef4\u62a4\u6240\u6709\u6781\u957f\u8d1f\u6570\u8fde\u7eed\u6bb5\uff08\u7c7b\u73c2\u6735\u8389\u6811\u7ed3\u6784\uff09\uff0c\u8fd9\u6837\u4fbf\u53ef\u4ee5\u65b9\u4fbf\u8fde\u7eed\u6bb5\u7684\u5206\u88c2\u4e0e\u5408\u5e76\u3002\n>\n> \u7ef4\u62a4\u7ebf\u6bb5\u6811\u6765\u8ba1\u7b97\u6bcf\u6bb5\u8fde\u7eed\u6bb5\u7684\u7b54\u6848\uff08\u5177\u4f53\u53ea\u9700\u4e00\u68f5\u533a\u95f4\u548c\u3001\u533a\u95f4 $\\max$ \u4ee5\u53ca\u5355\u70b9\u4fee\u6539\u7684\u7ebf\u6bb5\u6811\u5373\u53ef\uff09\u3002\n>\n> \u5c06\u6240\u6709\u8fde\u7eed\u6bb5\u7684\u7b54\u6848\u6295\u5165\u5e73\u8861\u6811\u7ef4\u62a4\u3002\u8be2\u95ee\u65f6\uff0c\u53ea\u9700\u8981\u5728\u5e73\u8861\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\n>\n> \u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nint T,n,m;\nll sum,a[100100];\nnamespace BT{\n\t#define lson t[x].ch[0]\n\t#define rson t[x].ch[1] \n\tint cnt,bin[100100],tp,rt;\n\tstruct Treap{int ch[2],rd,sz;ll sum,val;}t[100100];\n\tvoid init(){for(int x=1;x<=cnt;x++)lson=rson=0;tp=rt=cnt=0;}\n\tvoid pushup(int x){t[x].sum=t[lson].sum+t[rson].sum+t[x].val;t[x].sz=t[lson].sz+t[rson].sz+1;}\n\tint merge(int x,int y){\n\t\tif(!x||!y)return x+y;\n\t\tif(t[x].rd<t[y].rd)return t[x].ch[1]=merge(t[x].ch[1],y),pushup(x),x;\n\t\telse return t[y].ch[0]=merge(x,t[y].ch[0]),pushup(y),y;\n\t}\n\tvoid splitbyval(int x,int k,int&u,int&v){\n\t\tif(!x)return u=v=0,void();\n\t\tif(k<=t[x].val)v=x,splitbyval(lson,k,u,lson);else u=x,splitbyval(rson,k,rson,v);\n\t\tpushup(x);\n\t}\n\tvoid splitbysize(int x,int k,int&u,int&v){\n\t\tif(!x)return u=v=0,void();\n\t\tif(k<=t[lson].sz)v=x,splitbysize(lson,k,u,lson);else u=x,splitbysize(rson,k-t[lson].sz-1,rson,v);\n\t\tpushup(x);\n\t}\n\tvoid splitbysum(int x,int k,int&u,int&v){\n\t\tif(!x)return u=v=0,void();\n\t\tif(k>=t[lson].sum)v=x,splitbysum(lson,k,u,lson);else u=x,splitbysum(rson,k-t[lson].sum-t[x].val,rson,v);\n\t\tpushup(x);\n\t}\n\tint newnode(ll val){int x=(tp?bin[tp--]:++cnt);t[x].val=t[x].sum=val,t[x].sz=1,t[x].rd=rand()*rand();return x;}\n\tvoid Insert(ll val){int u,v;splitbyval(rt,val,u,v),rt=merge(merge(u,newnode(val)),v);}\n\tvoid Delete(ll val){int u,v,w;splitbyval(rt,val,u,v),splitbysize(v,1,v,w),bin[++tp]=v,rt=merge(u,w);}\n\tint query(ll sum){\n\t\tif(t[rt].sum+sum>0)return -1;if(!sum)return 0;\n\t\tint u,v;splitbysum(rt,-sum,u,v);int ret=t[u].sz;\n\t\trt=merge(u,v);return ret;\n\t}\n\tvoid iterate(int x){if(!x)return;if(lson)iterate(lson);printf(\"%lld \",t[x].val);if(rson)iterate(rson);}\n\t#undef lson\n\t#undef rson\n}\nusing BT::Insert;\nusing BT::Delete;\nusing BT::query;\nnamespace ST{\n\t#define lson x<<1\n\t#define rson x<<1|1\n\t#define mid ((l+r)>>1)\n\tstruct SegTree{ll sum,mx;}seg[400100];\n\tvoid pushup(int x){seg[x].sum=seg[lson].sum+seg[rson].sum,seg[x].mx=max(seg[lson].mx,seg[rson].mx);}\n\tvoid modify(int x,int l,int r,int P,ll val){\n\t\tif(l==r)return seg[x].sum=seg[x].mx=val,void();\n\t\tif(P<=mid)modify(lson,l,mid,P,val);else modify(rson,mid+1,r,P,val);pushup(x);\n\t}\n\tll querysum(int x,int l,int r,int L,int R){\n\t\tif(l>R||r<L)return 0;\n\t\tif(L<=l&&r<=R)return seg[x].sum;\n\t\treturn querysum(lson,l,mid,L,R)+querysum(rson,mid+1,r,L,R);\n\t}\n\tll querymx(int x,int l,int r,int L,int R){\n\t\tif(l>R||r<L)return -0x3f3f3f3f3f3f3f3f;\n\t\tif(L<=l&&r<=R)return seg[x].mx;\n\t\treturn max(querymx(lson,l,mid,L,R),querymx(rson,mid+1,r,L,R));\n\t}\n\tvoid build(int x,int l,int r){\n\t\tif(l==r)seg[x].sum=seg[x].mx=a[l];\n\t\telse build(lson,l,mid),build(rson,mid+1,r),pushup(x);\n\t}\n\tll Q(int L,int R){return querysum(1,2,n,L,R)-querymx(1,2,n,L,R);}\n\tvoid M(int P,ll val){modify(1,2,n,P,val);}\n\tvoid B(){build(1,2,n);}\n\t#undef lson\n\t#undef rson\n\t#undef mid\n}\nusing ST::Q;\nusing ST::M;\nusing ST::B;\nvoid Ins(int L,int R){if(L!=2&&R!=n)Insert(Q(L,R));} \nvoid Del(int L,int R){if(L!=2&&R!=n)Delete(Q(L,R));}\nset<pair<int,int> >s;\nvoid Set(int x,ll val){\n\tif(x==1||x>n)return;\n\tint L=-1,R=-1;\n\tif(a[x]<=0){\n\t\tauto it=--s.lower_bound(make_pair(x,0x3f3f3f3f));\n\t\tDel(L=it->first,R=it->second),s.erase(it);\n\t}\n\tsum-=max(a[x],0ll);\n\tM(x,val),a[x]=val;\n\tsum+=max(a[x],0ll);\n\tif(a[x]>0){\n\t\tif(L!=-1&&L<x)Ins(L,x-1),s.emplace(L,x-1);\n\t\tif(R!=-1&&R>x)Ins(x+1,R),s.emplace(x+1,R);\n\t}else{\n\t\tif(L!=-1&&R!=-1)s.emplace(L,R),Ins(L,R);\n\t\telse{\n\t\t\tL=R=x;\n\t\t\tauto it=s.lower_bound(make_pair(x,0x3f3f3f3f));\n\t\t\tif(it!=s.end()&&it->first==x+1)R=it->second,Del(x+1,R),it=s.erase(it);\n\t\t\tif(it!=s.begin()&&(--it)->second==x-1)L=it->first,Del(L,x-1),s.erase(it);\n\t\t\tIns(L,R),s.emplace(L,R);\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d\",&T);\n\twhile(T--){\n\t\tBT::init(),s.clear(),sum=0;\n\t\tscanf(\"%d%d\",&n,&m);\n\t\tfor(int i=1;i<=n;i++)scanf(\"%lld\",&a[i]);\n\t\tfor(int i=n;i;i--)a[i]-=a[i-1];\n\t\tfor(int i=2;i<=n;i++)sum+=max(a[i],0ll);\n//\t\tfor(int i=2;i<=n;i++)printf(\"%d \",a[i]);puts(\"\");\n\t\tB();\n\t\tfor(int i=2,j=2;i<=n;i=j){\n\t\t\twhile(i<=n&&a[i]>0)i++;\n\t\t\tif(i>n)break;\n\t\t\tj=i;while(j<=n&&a[j]<=0)j++;\n\t\t\tIns(i,j-1),s.emplace(i,j-1);\n\t\t}\n\t\tfor(int i=1,tp,l,r,c;i<=m;i++){\n\t\t\tscanf(\"%d\",&tp);\n\t\t\tif(tp==0)scanf(\"%d%d%d\",&l,&r,&c),r++,Set(l,a[l]+c),Set(r,a[r]-c);\n\t\t\telse printf(\"%lld %d\\n\",sum,query(sum));\n//\t\t\tfor(auto I:s)printf(\"<%d,%d>\",I.first,I.second);puts(\"\");\n//\t\t\tprintf(\"[\");BT::iterate(BT::rt),puts(\"]\");\n\t\t}\n\t}\n\treturn 0;\n} \n```\n\n",
        "postTime": 1624950534,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4497\u3010[WC2011]\u62fc\u70b9\u6e38\u620f\u3011"
    }
]