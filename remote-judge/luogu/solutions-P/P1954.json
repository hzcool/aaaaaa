[
    {
        "content": "\u849f\u84bb\u4eba\u751f\u4e2d\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u3002\n\n\u53d1\u73b0\u5927\u4f6c\u4eec\u7684\u9898\u89e3\u90fd\u662f\u7528\u5806\u6765\u505a\u7684\u8d2a\u5fc3\uff0c\u90a3\u6211\u5c31\u6765\u4e00\u7bc7\u4e0d\u7528\u5806\uff0c\u7eaf $DFS$ \u7684\u9898\u89e3\u5427\u3002\u672c\u9898\u89e3\u6781\u5176\u8be6\u7ec6\uff0c\u4fdd\u8bc1\u5404\u4f4d\u770b\u5b98\u770b\u5b8c\u5373\u770b\u61c2\u3002\n\n### 1. \u6734\u7d20\u601d\u8def\u7684\u4ea7\u751f\n\n\u8003\u8651\u9898\u76ee\u4e2d\u7684\u4e24\u79cd\u6761\u4ef6\uff1a\n\n- \u822a\u73ed\u4e4b\u95f4\u7684\u4f9d\u8d56\u987a\u5e8f\uff1b\n- \u822a\u73ed\u8d77\u98de\u7684\u6700\u665a\u65f6\u95f4\uff1b\n\n\u5982\u679c\u53ea\u6709\u7b2c\u4e00\u79cd\uff0c\u90a3\u4e48\u662f\u4e00\u9053\u6807\u51c6\u7684**\u62d3\u6251\u6392\u5e8f**\u95ee\u9898\uff1b\u5982\u679c\u53ea\u6709\u7b2c\u4e8c\u79cd\u6761\u4ef6\uff0c\u90a3\u4e48\u662f\u4e00\u9053\u6807\u51c6\u7684**\u8d2a\u5fc3**\u95ee\u9898\u3002\u6240\u4ee5\u6211\u4eec\u5f88\u81ea\u7136\u5730\u5f80**\u62d3\u6251\u6392\u5e8f\u548c\u8d2a\u5fc3\u76f8\u7ed3\u5408**\u7684\u601d\u8def\u4e0a\u60f3\u3002\n\n### 2. \u66f4\u65b0\u822a\u73ed\u7684 $k$ \u503c\n\n\u6bcf\u4e2a\u822a\u73ed\u90fd\u6709\u4e00\u4e2a\u6700\u665a\u8d77\u98de\u65f6\u95f4\uff0c\u5373 $k$ \u503c\u3002\u8fd9\u4e2a\u503c\u7531\u7b2c\u4e8c\u79cd\u6761\u4ef6\u7ed9\u51fa\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a $k$ \u503c\u8fd8\u53d7\u5230\u7b2c\u4e00\u79cd\u6761\u4ef6\u7684\u7ea6\u675f\u3002\u663e\u7136\uff0c\u82e5\u822a\u73ed $B$ \u4f9d\u8d56\u4e8e\u822a\u73ed $A$\uff08\u5373 $A\u2192B$\uff09\uff0c\u5219\u5fc5\u6709 $k[A]\\leq k[B]-1$\uff0c\u6240\u4ee5\u822a\u73ed $A$ \u7684\u771f\u5b9e $k$ \u503c\u53ef\u7531\u5982\u4e0b\u8868\u8fbe\u5f0f\u6c42\u51fa\uff1a$k[A] = min($\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684 $k[A] ,$  \u6240\u6709\u4f9d\u8d56\u4e8e $A$ \u7684\u822a\u73ed\u7684 $k$ \u503c $-1)$\u3002\n\n\n\u6211\u4eec\u901a\u8fc7\u4e00\u6b21 $DFS$ \u5373\u53ef\u6c42\u89e3\uff08\u5b9e\u9645\u4e0a\u662f\u4e00\u6b21 $DAG$ \u4e0a\u7684\u52a8\u6001\u89c4\u5212\uff09\u3002\n\n### 3. \u7b2c\u4e00\u95ee\u7684\u89e3\n\n\u65e2\u7136\u6240\u6709\u4f9d\u8d56\u5173\u7cfb\u4e2d\uff0c\u540e\u98de\u7684\u822a\u73ed $k$ \u503c\u73b0\u5728\u4e00\u5b9a\u5927\u4e8e\u5148\u98de\u7684\u822a\u73ed\uff0c\u90a3\u4e48\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u4e00\u79cd\u5408\u6cd5\u5b89\u6392\uff1a\u6839\u636e $k$ \u503c\u4ece\u5927\u5230\u5c0f\uff0c\u4ece\u540e\u5f80\u524d\u5b89\u6392\u822a\u73ed\u3002**\u5373\u5148\u5b89\u6392 $k$ \u503c\u4e3a $n$ \u7684\u822a\u73ed\uff0c\u518d\u5b89\u6392 $k$ \u503c\u4e3a $n-1$ \u7684\u822a\u73ed\u2026\u2026\u6700\u540e\u5b89\u6392 $k$ \u503c\u4e3a $1$ \u7684\u822a\u73ed\u3002**\n\n\u8fd9\u6837\u505a\u4e00\u5b9a\u662f\u5408\u6cd5\u7684\u3002\u7531\u4e8e\u540e\u98de\u7684\u822a\u73ed $k$ \u503c\u4e00\u5b9a\u5927\u4e8e\u5148\u98de\u7684\u822a\u73ed\uff0c\u6240\u4ee5\u6240\u6709\u4f9d\u8d56\u5173\u7cfb\u4e2d\uff0c\u540e\u98de\u7684\u822a\u73ed\u4e00\u5b9a\u4f1a\u5b89\u6392\u5728\u5148\u98de\u7684\u822a\u73ed\u4e4b\u540e\u3002\u6545\u7b2c\u4e00\u79cd\u6761\u4ef6\u4e00\u5b9a\u88ab\u6ee1\u8db3\u3002\n\n\u7528\u53cd\u8bc1\u6cd5\u53ef\u8bc1\u7b2c\u4e8c\u79cd\u6761\u4ef6\u4e00\u5b9a\u88ab\u6ee1\u8db3\uff1a\u82e5\u67d0\u822a\u73ed\u4e0d\u7b26\u5408\u6761\u4ef6\u4e8c\uff0c\u8bbe\u5176 $k$ \u503c\u4e3a $p$\uff0c\u88ab\u5b89\u6392\u7684\u65f6\u95f4\u4e3a $q$\uff0c\u6709 $p<q$\u3002\u7531\u4e8e $k$ \u503c\u662f\u4ece\u540e\u5f80\u524d\u6392\u7684\uff0c\u5219\u8be5\u822a\u73ed\u4e0e\u4e4b\u524d\u6240\u6709\u822a\u73ed\uff08\u5171 $q$ \u4e2a\uff09\u7684 $k$ \u503c\u90fd $\\leq p$\uff1b\u5373\u6709 $q$ \u4e2a\u822a\u73ed $k$ \u503c $\\leq p$\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u8981\u5728 $p$ \u65f6\u95f4\u5185\u8d77\u98de $q$ \u67b6\u822a\u73ed\uff0c\u800c $p<q$\uff0c\u4e0e\u4e00\u5b9a\u5b58\u5728\u89e3\u4e0d\u7b26\u3002\n\n\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e48\u505a\u5373\u4e3a\u6309\u7167 $k$ \u503c\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u6240\u6709\u822a\u73ed\u3002\u6b64\u5373\u7b2c\u4e00\u95ee\u6240\u6c42\u7684\u4e00\u79cd\u53ef\u884c\u89e3\u3002\n\n### 4. \u7b2c\u4e8c\u95ee\u7684\u89e3\n\n\u7b2c\u4e00\u95ee\u7684\u505a\u6cd5\u5b9e\u9645\u4e0a\u662f\u4ece\u540e\u5f80\u524d\uff0c\u5c3d\u91cf\u8ba9\u6bcf\u4e00\u67b6\u822a\u73ed\u90fd\u5c3d\u91cf\u665a\u98de\u3002\u8ba9\u822a\u73ed $A$ \u65e9\u98de\uff0c\u5373\u8ba9 $A$ \u548c $A$ \u7684\u6240\u6709\u7956\u5148\uff08\u4f9d\u8d56\u5173\u7cfb\u4e2d\u65e9\u98de\u7684\u822a\u73ed\uff09\u5c3d\u91cf\u65e9\u98de\uff0c\u8fd9\u7b49\u4ef7\u4e8e\u8ba9\u5176\u4ed6\u822a\u73ed\u5c3d\u91cf\u665a\u98de\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bf9\u53cd\u56fe\u8fdb\u884c\u4e00\u6b21 $DFS$\uff0c\u6807\u8bb0\u51fa $A$ \u548c $A$ \u7684\u7956\u5148\uff0c\u7136\u540e\u4eff\u7167\u7b2c\u4e00\u95ee\uff0c\u5728\u4e0d\u5b89\u6392 $A$ \u548c $A$ \u7684\u7956\u5148\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636e $k$ \u503c\u4ece\u5927\u5230\u5c0f\uff0c\u4ece\u540e\u5f80\u524d\u5b89\u6392\u5176\u4ed6\u822a\u73ed\u3002\n\n\u7531\u4e8e\u5176\u4ed6\u822a\u73ed\u662f\u4ece\u540e\u5f80\u524d\u5b89\u6392\u7684\uff0c\u5373**\u8fd9\u4e9b\u822a\u73ed\u5360\u636e\u4e86\u53ef\u80fd\u7684\u3001\u6700\u665a\u7684\u8d77\u98de\u65f6\u95f4**\u3002\u90a3\u4e48**\u7a7a\u51fa\u6765\u7684\u8d77\u98de\u65f6\u95f4\u4e00\u5b9a\u662f\u53ef\u80fd\u60c5\u51b5\u4e0b\u6700\u65e9\u7684**\u3002\u800c $A$ \u6700\u65e9\u7684\u8d77\u98de\u65f6\u95f4\uff0c\u5c31\u662f\u8fd9\u4e9b\u7a7a\u51fa\u6765\u7684\u8d77\u98de\u65f6\u95f4\u4e2d**\u6700\u540e\u4e00\u4e2a**\uff08\u5176\u4f59\u7a7a\u51fa\u6765\u7684\u65f6\u95f4\u5fc5\u987b\u5b89\u6392 $A$ \u7684\u7956\u5148\uff09\u3002\u6211\u4eec\u5728\u4ece\u540e\u5f80\u524d\u5b89\u6392\u5176\u4ed6\u822a\u73ed\u7684\u8fc7\u7a0b\u4e2d\u5373\u53ef\u987a\u4fbf\u6c42\u89e3\u3002\n\n### 5. \u65f6\u95f4\u590d\u6742\u5ea6\n\n\u7531\u4e8e\u672c\u505a\u6cd5\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u90fd\u6c42\u4e86\u4e00\u6b21 $DFS$\uff0c\u6545\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n(m+n))$\uff0c\u4e0d\u5f00 $O2$ \u8017\u65f6 $311ms$\uff0c\u8f83\u4e3a\u9ad8\u6548\u3002\n\n### 6. \u4ee3\u7801\u5b9e\u73b0\n\n```c++\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n#define MAXN 2005\n#define MAXM 10005\nint n, m;\nint k[MAXN];\nstruct Edge\n{\n    int v, nxt;\n} e[MAXM << 1];\nint head[MAXN], rhead[MAXN], cnt = 1;\n// \u5efa\u56fe\nvoid add(int u, int v)\n{\n    e[cnt].v = v;\n    e[cnt].nxt = head[u];\n    head[u] = cnt++;\n    // \u987a\u4fbf\u5b58\u53cd\u8fb9\uff0c\u65b9\u4fbf\u540e\u7eed\u53cd\u56fe\u4e0a\u7684DFS\n    e[cnt].v = u;\n    e[cnt].nxt = rhead[v];\n    rhead[v] = cnt++;\n}\nint vis[MAXN], rvis[MAXN];\nint num[MAXN][MAXN], ccnt[MAXN];\n// DFS\u6c42\u822a\u73ed\u771f\u5b9ek\u503c\nint dfs(int cur)\n{\n    if (vis[cur])\n        return k[cur];\n    vis[cur] = 1;\n    for (int i = head[cur]; i; i = e[i].nxt)\n    {\n        int res = dfs(e[i].v);\n        if (k[cur] > res - 1)\n            k[cur] = res - 1;\n    }\n    // \u5c06\u822a\u73ed\u653e\u5230\u5bf9\u5e94k\u503c\u7684\u822a\u73ed\u96c6\u5408\u4e2d\n    num[k[cur]][ccnt[k[cur]]++] = cur;\n    return k[cur];\n}\n// \u53cd\u56feDFS\u6807\u8bb0\u822a\u73ed\u53ca\u5176\u7956\u5148\nvoid rdfs(int cur)\n{\n    rvis[cur] = 1;\n    for (int i = rhead[cur]; i; i = e[i].nxt)\n        if (!rvis[e[i].v])\n            rdfs(e[i].v);\n}\nint main()\n{\n    scanf(\"%d %d\", &n, &m);\n    for (int i = 1; i <= n; i++)\n        scanf(\"%d\", &k[i]);\n    while (m--)\n    {\n        int u, v;\n        scanf(\"%d %d\", &u, &v);\n        add(u, v);\n    }\n    // \u6c42\u6240\u6709\u822a\u73ed\u771f\u5b9ek\u503c\n    for (int i = 1; i <= n; i++)\n        dfs(i);\n    // \u6309\u7167k\u503c\u4ece\u5c0f\u5230\u5927\uff0c\u4ece\u524d\u5f80\u540e\u8f93\u51fa\u6240\u6709\u822a\u73ed\n    for (int i = 1; i <= n; i++)\n        for (int j = 0; j < ccnt[i]; j++)\n            printf(\"%d \", num[i][j]);\n    printf(\"\\n\");\n    // \u6c42\u89e3\u6bcf\u4e2a\u822a\u73ed\u7684\u6700\u65e9\u8d77\u98de\u65f6\u95f4\n    for (int i = 1; i <= n; i++)\n    {\n        // \u53cd\u56feDFS\u6807\u8bb0\u7956\u5148\n        memset(rvis, 0, sizeof(rvis));\n        rdfs(i);\n        // p\u4e3a\u5f53\u524d\u6240\u8003\u8651\u7684\u8d77\u98de\u65f6\u95f4\n        int p = n;\n        // \u6309\u7167\u822a\u73edk\u503c\u4ece\u5927\u5230\u5c0f\uff0c\u4ece\u540e\u5f80\u524d\u5b89\u6392\u6240\u6709\u5176\u4ed6\u822a\u73ed\n        for (int j = n; j >= 1; j--)\n        {\n            // \u4ece\u540e\u5f80\u524d\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u65e0\u6cd5\u5b89\u6392\u5176\u4ed6\u822a\u73ed\u7684\u8d77\u98de\u65f6\u95f4\n            // \u5373\u4e3a\u7a7a\u51fa\u6765\u7684\u6700\u540e\u4e00\u4e2a\u8d77\u98de\u65f6\u95f4\n            // \u6b64\u5373\u4e3a\u6240\u6c42\n            if (p > j)\n                break;\n            for (int t = 0; t < ccnt[j]; t++)\n                if (!rvis[num[j][t]])\n                    p--;\n        }\n        // \u8f93\u51fa\u822a\u73edi\u7684\u6700\u65e9\u8d77\u98de\u65f6\u95f4\n        printf(\"%d \", p);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```\n",
        "postTime": 1597247991,
        "uid": 219978,
        "name": "SBofGaySchool",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1954 \u3010[NOI2010]\u822a\u7a7a\u7ba1\u5236\u3011"
    },
    {
        "content": "\u7b80\u5355\u9898\u3002\n\n\u9996\u5148\u770b\u5230\u6bcf\u4e00\u4e2a\u822a\u73ed\u6709 deadline\uff0c\u5230\u67d0\u4e00\u4e2a\u65f6\u523b\u5f00\u59cb\u5c31\u98de\u4e0d\u4e86\u4e86\uff0c\u7acb\u523b\u60f3\u5230\u65f6\u5149\u5012\u6d41\uff0c\u53d8\u6210\u6bcf\u4e00\u4e2a\u822a\u73ed\u67d0\u4e00\u4e2a\u65f6\u523b\u5f00\u59cb\u53ef\u4ee5\u98de\uff0c\u9650\u5236\u53d8\u4e3a\u67d0\u4e00\u4e2a\u822a\u73ed\u5fc5\u987b\u5728\u53e6\u4e00\u4e2a\u822a\u73ed\u4e4b\u540e\u98de\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u7b2c\u4e00\u95ee\uff0c\u53ef\u4ee5\u5012\u7740\u679a\u4e3e\u65f6\u95f4\uff0c\u7ef4\u62a4\u4e00\u4e2a\u822a\u73ed\u96c6\u5408\u8868\u793a\u679a\u4e3e\u5230\u5f53\u524d\u65f6\u95f4\u65f6\u53ef\u4ee5\u98de\u7684\u822a\u73ed\uff0c\u6bcf\u4e00\u6b21\u968f\u4fbf\u62bd\u51fa\u4e00\u4e2a\u822a\u73ed\u8ba9\u5b83\u8d77\u98de\uff0c\u7136\u540e\u7528\u7c7b\u4f3c\u62d3\u6251\u6392\u5e8f\u7684\u65b9\u5f0f\u66f4\u65b0\u96c6\u5408\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u8981\u6c42\u53d8\u4e3a\u8ba9\u67d0\u4e00\u4e2a\u822a\u73ed $i$ \u5c3d\u91cf\u665a\u98de\uff0c\u601d\u60f3\u7c7b\u4f3c\uff0c\u53ea\u662f\u4e0d\u80fd\u968f\u4fbf\u62bd\u4e00\u4e2a\uff0c\u5982\u679c\u822a\u73ed\u96c6\u5408\u4e2d\u6709\u4e0d\u662f $i$ \u7684\u822a\u73ed\uff0c\u5219\u8ba9\u5b83\u98de\uff1b\u5426\u5219\u5982\u679c\u53ea\u6709 $i$ \u53ef\u4ee5\u98de\u4e86\uff0c\u5c31\u8ba9 $i$ \u98de\uff0c\u5f97\u5230\u7b54\u6848\u3002\n\n\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u961f\u5217\u7ef4\u62a4\u96c6\u5408\uff0c\u505a\u7b2c\u4e8c\u95ee\u65f6\u5224\u4e00\u4e0b\u961f\u5c3e\uff0c\u5c31\u53ef\u4ee5\u505a\u5230\u603b\u590d\u6742\u5ea6 $O(nm)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[(1<<21)+5], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n    char c = getchar();\n    int x = 0, f = 1;\n    while (c < '0' || c > '9') {\n        if (c == '-') f = -1;\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9') {\n        x = x * 10 + c - '0';\n        c = getchar();\n    }\n    return x * f;\n}\n\nstruct Edge {\n\tint to, nxt;\n\tEdge() {\n\t\tnxt = -1;\n\t}\n};\nEdge e[10005];\nint n, m, hd[2005], pnt, k[2005], ans[2005], seq[2005], indgr[2005], tmp[2005], que2[2005];\nvector <int> v[2005];\n\ninline void AddEdge(int u, int v) {\n\te[++pnt].to = v;\n\te[pnt].nxt = hd[u];\n\thd[u] = pnt;\n\tindgr[v]++;\n}\n\ninline void Read() {\n\tn = qread(); m = qread();\n\tfor (int i = 1;i <= n;i++) v[k[i] = qread()].push_back(i);\n\tfor (int i = 1;i <= m;i++) {\n\t\tint u = qread(), v = qread();\n\t\tAddEdge(v, u);\n\t}\n}\n\ninline void Solve1() {\n\tfor (int i = 1;i <= n;i++) tmp[i] = indgr[i] + 1;\n\tqueue <int> que;\n\tfor (int t = n;t >= 1;t--) {\n\t\tint siz = v[t].size();\n\t\tfor (int j = siz - 1;j >= 0;j--) {\n\t\t\ttmp[v[t][j]]--;\n\t\t\tif (!tmp[v[t][j]]) que.push(v[t][j]);\n\t\t}\n\t\tint u = que.front();\n\t\tque.pop();\n\t\tseq[t] = u;\n\t\tfor (int i = hd[u];~i;i = e[i].nxt) {\n\t\t\ttmp[e[i].to]--;\n\t\t\tif (!tmp[e[i].to]) que.push(e[i].to);\n\t\t}\n\t}\n\tfor (int i = 1;i <= n;i++) printf(\"%d \", seq[i]);\n\tputs(\"\");\n}\n\ninline void Solve2(int u) {\n\t//printf(\"u=%d \", u);\n\tint qhd = 1, qtl = 1;\n\tfor (int i = 1;i <= n;i++) tmp[i] = indgr[i] + 1;\n\tfor (int t = n;t >= 1;t--) {\n\t\tint siz = v[t].size();\n\t\tfor (int j = siz - 1;j >= 0;j--) {\n\t\t\ttmp[v[t][j]]--;\n\t\t\tif (!tmp[v[t][j]]) {\n\t\t\t\tque2[qtl++] = v[t][j];\n\t\t\t\tif (qhd < qtl - 1 && que2[qtl - 2] == u) swap(que2[qtl - 2], que2[qtl - 1]);\n\t\t\t}\n\t\t}\n\t\t//for (int i = qhd;i < qtl;i++) printf(\"%d \", que2[i]); puts(\"\");\n\t\tint x = que2[qhd++];\n\t\tif (x == u) {\n\t\t\tprintf(\"%d \", t);\n\t\t\tbreak;\n\t\t}\n\t\tfor (int i = hd[x];~i;i = e[i].nxt) {\n\t\t\ttmp[e[i].to]--;\n\t\t\tif (!tmp[e[i].to]) {\n\t\t\t\tque2[qtl++] = e[i].to;\n\t\t\t\tif (qhd < qtl - 1 && que2[qtl - 2] == u) swap(que2[qtl - 2], que2[qtl - 1]);\n\t\t\t}\n\t\t}\n\t}\n\t//puts(\"\");\n}\n\nint main() {\n\tmemset(hd, -1, sizeof(hd));\n\tRead();\n\tSolve1();\n\tfor (int i = 1;i <= n;i++) Solve2(i);\n\treturn 0;\n}\n```",
        "postTime": 1631195092,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1954 \u3010[NOI2010] \u822a\u7a7a\u7ba1\u5236\u3011"
    },
    {
        "content": "\u505a\u9898\u65f6\u5076\u7136\u60f3\u5230\u7684\u4e00\u4e2a\u590d\u6742\u5ea6\u66f4\u4f18\u7684\u505a\u6cd5\uff0c\u5199\u4e00\u4e0b\u9898\u89e3\u3002\n\n\u9996\u5148\u7b2c\u4e00\u95ee\uff0c\u5efa\u53cd\u56fe\u505a\u7c7b\u4f3c\u4e8e HNOI2015 \u83dc\u80b4\u5236\u4f5c\u7684\u8d2a\u5fc3\uff0c\u5373\u53ef\u6784\u9020\u4e00\u79cd\u65b9\u6848\u3002\n\n\u7b2c\u4e8c\u95ee\u5927\u5bb6\u5f88\u591a $O(nm+n^2\\log n)$ \u7684\u9898\u89e3\u90fd\u662f\u4e4b\u540e\u679a\u4e3e\u4e00\u4e2a\u70b9\u5f3a\u5236\u4e0d\u9009\uff0c\u8d2a\u5fc3\u7684\u9009\u5176\u4ed6\u70b9\uff0c\u91cd\u65b0\u505a\u4e00\u6b21\u62d3\u6251\u6392\u5e8f\uff0c\u76f4\u5230\u51fa\u73b0\u4e0d\u5408\u6cd5\u60c5\u51b5\u8bf4\u660e\u5fc5\u987b\u4f7f\u7528\u5f53\u524d\u70b9\uff0c\u6bcf\u6b21\u62d3\u6251\u6392\u5e8f\u662f $O(m+n\\log n)$ \u7684\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5047\u8bbe\u5f53\u524d\u679a\u4e3e\u70b9\u662f $x$\uff0c\u90a3\u4e48\u6240\u6709\u5728 DAG \u4e0a\u53ef\u4ee5\u7531 $x$ \u5230\u8fbe\u7684\u70b9\u90fd\u6c38\u8fdc\u65e0\u6cd5\u5230\u8fbe\uff0c\u4f46\u662f\u5bf9\u4e8e\u5176\u4ed6\u70b9\u7684\u76f8\u5bf9\u62d3\u6251\u5e8f\u6ca1\u6709\u6539\u53d8\uff0c\u53ef\u76f4\u63a5\u679a\u4e3e\u539f\u6765\u7684\u62d3\u6251\u5e8f\uff0c\u518d\u5f3a\u5236\u5220\u6389\u7531 $x$ \u53ef\u8fbe\u7684\u70b9\u3002\n\n\u800c\u627e\u5230 DAG \u4e0a\u53ef\u4ee5\u7531 $x$ \u5230\u8fbe\u7684\u70b9\u8fd9\u4e00\u6b65\u53ef\u4ee5\u7528 bitset \u4f18\u5316\uff0c\u505a\u5230\u603b\u590d\u6742\u5ea6 $O(n^2+\\frac{nm}{\\omega})$\uff0c\u662f\u76ee\u524d\u7684 Rank 1\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\nusing namespace std;\nint n,p[2002],head[2002],cnt,m,a[2002],d[2002];\nstruct edge{int to,next;}e[10002];\nbitset<2002>B[2002];\ninline void add(re int x,re int y){e[++cnt]=(edge){y,head[x]},head[x]=cnt,++d[y];}\nstruct node{int x,y;bool operator <(const node a)const{return y<a.y;}};\npriority_queue<node>q;\ninline int calc(re int z){\n\tcnt=0;\n\tfor(re int i=1;i<=n;++i){\n\t\tre int x=p[i];\n\t\tif(B[x][z])continue;\n\t\t++cnt;\n\t\tif(a[x]<=n-cnt)return n-cnt+1;\n\t}\n\treturn n-cnt;\n}\ninline int read(){\n\tre int t=0;re char v=getchar();\n\twhile(v<'0')v=getchar();\n\twhile(v>='0')t=(t<<3)+(t<<1)+v-48,v=getchar();\n\treturn t;\n}\nsigned main(){\n\tn=read(),m=read();\n\tfor(re int i=1;i<=n;++i)a[i]=read();\n\tfor(re int i=1,x,y;i<=m;++i)x=read(),y=read(),add(y,x);\n\tfor(re int i=1;i<=n;++i)if(!d[i])q.push((node){i,a[i]});cnt=0;\n\twhile(!q.empty()){\n\t\tre int x=q.top().x;q.pop();p[++cnt]=x;\n\t\tfor(re int i=head[x];i;i=e[i].next)if(!(--d[e[i].to]))q.push((node){e[i].to,a[e[i].to]});\n\t}\n\tfor(re int i=1;i<=n;++i){\n\t\tre int x=p[i];\n\t\tB[x][x]=1;\n\t\tfor(re int j=head[x];j;j=e[j].next)B[e[j].to]|=B[x];\n\t}\n\tfor(re int i=n;i;--i)printf(\"%d \",p[i]);puts(\"\");\n\tfor(re int i=1;i<=n;++i)printf(\"%d \",calc(i));\n}\n```\n",
        "postTime": 1621337752,
        "uid": 41476,
        "name": "gyh20",
        "ccfLevel": 10,
        "title": "\u9898\u89e3\uff1aNOI2010 \u822a\u7a7a\u7ba1\u5236"
    },
    {
        "content": "### ~~**\u7ebf\u6bb5\u6811\u5927\u6cd5\u597d**~~\n\n\u9996\u5148\u90a3\u4e2a\u7b2c\u4e00\u95ee\u5c31\u662f\u5efa\u53cd\u56fe\u7136\u540e\u7528\u5806\u62d3\u6251\u6392\u5e8f\uff0c\u8fd9\u4e2a\u53e6\u5916\u4e24\u7bc7\u9898\u89e3\u5df2\u7ecf\u8bf4\u8fc7\u4e86\u3002\u8fd9\u91cc\u91cd\u70b9\u4ecb\u7ecd\u4e00\u4e0b\u7b2c\u4e8c\u95ee\u7684\u7ebf\u6bb5\u6811\u505a\u6cd5\u3002\n\n\u7136\u540e\u7b2c\u4e8c\u95ee\u6211\u4eec\u8981\u679a\u4e3e\u6bcf\u4e2a\u70b9$i$\uff0c\u6211\u4eec\u60f3\u8ba9\u8fd9\u4e2a\u70b9\u7684\u4f4d\u7f6e\u5c3d\u91cf\u9760\u524d\uff0c\u6ce8\u610f\u5230\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u53ef\u884c\u7684\u5e8f\u5217\uff0c\u6211\u4eec\u8003\u8651\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e0a\u8fdb\u884c\u8d2a\u5fc3\u7684\u8c03\u6574\u3002\n\n\u5f88\u663e\u7136\uff0c\u5728\u539f$DAG$\u4e0a\uff08\u8fd9\u91cc\u7684$DAG$\u6307\u7684\u90fd\u662f\u53cd\u56fe\uff09\u62d3\u6251\u5e8f\u5728$i$\u4e4b\u524d\u7684\u70b9\u5fc5\u987b\u8fd8\u5728$i$\u524d\u9762\uff0c\u6211\u4eec\u5e72\u8106\u5c31\u628a\u8fd9\u4e2a\u5b50\u5e8f\u5217\u62ff\u51fa\u6765\uff08\u8fd9\u4e2a\u70b9\u662f\u5b50\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\uff09\uff0c\u7136\u540e\u4e00\u4f4d\u4e00\u4f4d\u7684\u8ba9\u4ed6\u4eec\u5c3d\u91cf\u5f80\u524d\u63d2\u5165\u5269\u4e0b\u7684\u5e8f\u5217\u4e2d\uff0c\u9996\u5148\u8fd9\u6837\u8d2a\u5fc3\u662f\u5bf9\u7684\uff0c\u5047\u5982\u5728\u6700\u7ec8\u6784\u9020\u51fa\u7684\u5e8f\u5217\u4e2d\uff0c\u8fd9\u4e2a\u5b50\u5e8f\u5217\u4e2d\u7684\u67d0\u4e00\u4e2a\u53ef\u4ee5\u5f80\u524d\u653e\u800c\u4e14\u4e0d\u4f1a\u9020\u6210\u975e\u6cd5\u7684\u5f71\u54cd\uff0c\u53ef\u4ee5\u8ba9\u540e\u9762\u7684\u8fd9\u4e2a\u5b50\u5e8f\u5217\u7684\u70b9\u90fd\u5f80\u524d\u79fb\uff0c\u7b54\u6848\u4f1a\u53d8\u5f97\u66f4\u4f18\u3002\u800c\u4e14\u8fd9\u6837\u80af\u5b9a\u4e0d\u4f1a\u5f71\u54cd$DAG$\u62d3\u6251\u5e8f\u7684\u5173\u7cfb\uff0c\u56e0\u4e3a\u5269\u4e0b\u7684\u70b9\u7684\u62d3\u6251\u5e8f\u4e00\u5b9a\u4e0d\u4f1a\u5728\u4ed6\u4eec\u4e2d\u7684\u67d0\u4e2a\u70b9\u4e4b\u524d\uff08\u5426\u5219\u5c31\u4f1a\u5728\u8fd9\u4e2a\u5b50\u5e8f\u5217\u91cc\u4e86\uff09\uff0c\u4f46\u662f\u4f1a\u5f71\u54cd\u5230\u5269\u4e0b\u7684\u70b9\u7684\u6700\u9760\u540e\u4f4d\u7f6e\u7684\u9650\u5236\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u5728\u4e0d\u5f71\u54cd\u5269\u4e0b\u5e8f\u5217\u7684\u4f4d\u7f6e\u9650\u5236\u7684\u60c5\u51b5\u4e0b\u505a\u8fd9\u4e2a\u8d2a\u5fc3\uff0c\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u628a\u8fd9\u4e2a\u5b50\u5e8f\u5217\u62ff\u6389\u4e86\uff0c\u5c31\u6682\u4e14\u8ba9\u5269\u4e0b\u7684\u5e8f\u5217\u7684\u4f4d\u7f6e\u5c31\u662f\u73b0\u5728\u7684\u4f4d\u7f6e\uff0c\u663e\u7136\u8fd9\u4e00\u5b9a\u662f\u5408\u6cd5\u7684\u56e0\u4e3a\u5e76\u6ca1\u6709\u5f80\u540e\u79fb\u3002\u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u5730\u65b9\u4e4b\u540e\u7684\u4e1c\u897f\u7684\u4f4d\u7f6e\u5e76\u6ca1\u6709\u5230\u8fbe\u4ed6\u4eec\u7684\u9650\u5236\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5730\u65b9\u4e4b\u540e\u63d2\u5165\u4e00\u4e2a\u4e1c\u897f\uff0c\u6211\u4eec\u627e\u5230\u6700\u9760\u524d\u7684\u8fd9\u6837\u4e00\u4e2a\u4f4d\u7f6e\u5c31\u884c\u4e86\u3002\n\n\u5f88\u663e\u7136\uff0c\u5728\u5408\u6cd5\u7684\u524d\u63d0\u4e0b\u6bcf\u4e00\u9879\u7684\u5f53\u524d\u4f4d\u7f6e$pos_i$\u90fd\u662f\u4e0d\u8d85\u8fc7\u9650\u5236$lim_i$\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u6700\u5c0f\u7684$lim_i-pos_i$\uff0c\u5982\u679c\u4ed6\u662f0\u7684\u8bdd\u8bf4\u660e\u6709\u4e2a\u5730\u65b9\u5df2\u7ecf\u8fbe\u5230\u9650\u5236\uff0c\u6211\u4eec\u4e0d\u80fd\u5728\u4ed6\u524d\u9762\u63d2\u4e1c\u897f\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u627e\u5230\u5e8f\u5217\u4e0a\u6700\u9760\u53f3\u7684$lim_i-pos_i=0$\u7684\u4f4d\u7f6e\u4e4b\u540e\u63d2\u5c31\u884c\u4e86\uff08\u5f53\u7136\u8981\u662f\u6ca1\u6709\u7684\u8bdd\u5c31\u5728\u6700\u524d\u9762\u63d2\u5c31\u884c\u4e86\uff09\uff0c\u6ce8\u610f\u5230\u63d2\u5165\u4e00\u4e2a\u6570\u4f1a\u8ba9\u540e\u9762\u7684\u5f53\u524d\u4f4d\u7f6e$+1$\uff0c\u4e5f\u5c31\u662f\u8bf4$lim_i-pos_i$\u4f1a$-1$\uff0c\u8fd9\u76f8\u5f53\u4e8e\u4e00\u4e2a\u533a\u95f4\u51cf\uff0c\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u505a\u8fd9\u4e2a\u4e1c\u897f\u5c31\u884c\u4e86\uff0c\u7ef4\u62a4\u4e00\u4e0b\u533a\u95f4\u5185\u7684\u6700\u5c0f\u503c\u4e0e\u6700\u9760\u53f3\u7684\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\uff0c\u590d\u6742\u5ea6$O(nm+n^2logn)$\uff08\u89e3\u91ca\u4e00\u4e0b\uff0c\u6211\u4eec$O(n)$\u679a\u4e3e\u6bcf\u4e2a\u70b9\u7edf\u8ba1\u7b54\u6848\uff0c\u7136\u540e$O(m)bfs$\u627e\u51fa\u62d3\u6251\u5e8f\u5728$i$\u4e4b\u524d\u7684\u6240\u6709\u70b9\u4e5f\u5c31\u662f\u8fd9\u4e2a\u5b50\u5e8f\u5217\uff0c\u518d$O(n)$\u7684\u626b\u63cf\u8fd9\u4e2a\u88ab\u62ff\u51fa\u7684\u5b50\u5e8f\u5217\uff0c\u52a0\u4e0a\u7ebf\u6bb5\u6811\u4e4b\u540e\u6bcf\u6b21\u64cd\u4f5c$O(logn)$\uff09\u3002\u6ce8\u610f\u5e8f\u5217\u540e\u9762\u7684\u7a7a\u4f4d\u7f6e\u6211\u4eec\u628a\u4ed6\u4eec\u8bbe\u4e3a$inf$\u5c31\u884c\u4e86\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define ls(_o) (_o<<1)\n#define rs(_o) ((_o<<1)|1)\nusing namespace std;\ninline int get() {//\u6211\u7684\u5783\u573e\u5feb\u8bfb \n\tint n=0;\n\tchar c;\n\twhile((c=getchar())||23333) {\n\t\tif(c>='0'&&c<='9')break;\n\t\tif(c=='-')goto s;\n\t}\n\tn=c-'0';\n\twhile((c=getchar())||23333) {\n\t\tif(c>='0'&&c<='9')n=n*10+c-'0';\n\t\telse return(n);\n\t}\ns:\n\twhile((c=getchar())||23333) {\n\t\tif(c>='0'&&c<='9')n=n*10-c+'0';\n\t\telse return(n);\n\t}\n}\ntypedef struct _n {//\u8fd9\u4e2a\u7ed3\u6784\u4f53\u662f\u7528\u6765\u8fdb\u884c\u7b2c\u4e00\u95ee\u7684\u5806\u62d3\u6251\u6392\u5e8f\u7684 \n\tint pt;\n\tint cnt;//\u70b9\u7684\u9650\u5236 \n\t_n(int a,int b) {\n\t\tpt=a;\n\t\tcnt=b;\n\t}\n\tfriend bool operator <(const _n &a,const _n &b) {//\u9650\u5236\u9760\u540e\u7684\u4f18\u5148 \n\t\treturn(a.cnt<b.cnt);\n\t}\n} node;\npriority_queue<node> que2;//\u5806\uff08\u4e0d\u8981\u95ee\u6211que1\u5728\u54ea\u6211\u4e5f\u4e0d\u77e5\u9053\u2026\u2026\uff09 \nint lim[2001];//\u9650\u5236 \nint ints[2001];//\u6211\u4eec\u5f97\u5230\u7684\u53ef\u884c\u5e8f\u5217 \nint tmp[2001];//\u62ff\u6389\u90a3\u4e2a\u5b50\u5e8f\u5217\u7684\u5e8f\u5217 \nint deg[2001];//\u70b9\u7684\u5165\u5ea6 \ntypedef struct _b {\n\tint dest;\n\tint nxt;\n} bian;\nbian memchi[20001];//\u8fb9 \nint gn=1;\ninline void add(int s,int t) {\n\tmemchi[gn].dest=t;\n\tmemchi[gn].nxt=heads[s];\n\theads[s]=gn;\n\tgn++;\n}\nint que[2001];//\u7528\u4e8ebfs\u7684\u961f\u5217 \nunsigned char bv[2001];//bfs\u7684\u65f6\u5019\u8bb0\u5f55\u662f\u5426\u5df2\u7ecf\u5230\u8fbe\u8fc7 \nint heads[2001];\ntypedef struct _res {//\u8fd9\u4e2a\u7ed3\u6784\u4f53\u628a\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u7684\u6700\u5c0f\u503c\u4e0e\u6700\u5c0f\u503c\u4f4d\u7f6e\u5c01\u88c5\u4e86\u8d77\u6765 \n\tint minn;//\u6700\u5c0f\u503c \n\tint pos;//\u6700\u9760\u53f3\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e \n\tfriend _res operator +(const _res &a,const _res &b) {\n\t\tif(a.minn<b.minn)return(a);\n\t\treturn(b);\n\t}\n} res;\nint adds[100001];//\u51cf\u6cd5\u6807\u8bb0 \nres data[100001];//\u7ef4\u62a4\u7684\u4fe1\u606f \ninline void up(int tree) {//\u4e0a\u653e \n\tdata[tree]=data[ls(tree)]+data[rs(tree)];\n}\ninline void down(int tree) {//\u6807\u8bb0\u4e0b\u4f20 \n\tif(adds[tree]) {\n\t\tint cjr=adds[tree];\n\t\tadds[tree]=0;\n\t\tadds[ls(tree)]+=cjr;\n\t\tadds[rs(tree)]+=cjr;\n\t\tdata[ls(tree)].minn-=cjr;\n\t\tdata[rs(tree)].minn-=cjr;\n\t}\n}\nvoid add(int rl,int rr,int l,int r,int tree) {//\u533a\u95f4\u51cf \n\tif(rl==l&&rr==r) {\n\t\tadds[tree]++;\n\t\tdata[tree].minn--;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tdown(tree);\n\tif(rl>mid)add(rl,rr,mid+1,r,rs(tree));\n\telse {\n\t\tif(rr<=mid)add(rl,rr,l,mid,ls(tree));\n\t\telse {\n\t\t\tadd(rl,mid,l,mid,ls(tree));\n\t\t\tadd(mid+1,rr,mid+1,r,rs(tree));\n\t\t}\n\t}\n\tup(tree);\n}\nres query(int rl,int rr,int l,int r,int tree) {//\u67e5\u8be2\u533a\u95f4\u6700\u5c0f\u503c\u662f\u5565\uff0c\u5728\u54ea \n\tif(rl==l&&rr==r)return(data[tree]);\n\tint mid=(l+r)>>1;\n\tdown(tree);\n\tif(rl>mid)return(query(rl,rr,mid+1,r,rs(tree)));\n\tif(rr<=mid)return(query(rl,rr,l,mid,ls(tree)));\n\treturn(query(rl,mid,l,mid,ls(tree))+query(mid+1,rr,mid+1,r,rs(tree)));\n}\nvoid build(int l,int r,int tree) {//\u5efa\u6811 \n\tadds[tree]=0;//\u6ce8\u610f\u6e05\u7a7a\u6807\u8bb0 \n\tif(l==r) {\n\t\tdata[tree].minn=tmp[l]-l;//\u7ef4\u62a4\u7684\u662flim_i-pos_i \n\t\tdata[tree].pos=l;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,ls(tree));\n\tbuild(mid+1,r,rs(tree));\n\tup(tree);\n}\nint main() {\n\tint n=get(),m=get();\n\tfor(register int i=1; i<=n; i++)lim[i]=get();\n\tfor(register int i=1; i<=m; i++) {\n\t\tint s=get(),t=get();\n\t\tdeg[s]++;\n\t\tadd(t,s);\n\t}\n\tregister int ptr=n;\n\tfor(register int i=1; i<=n; i++) {\n\t\tif(!deg[i])que2.push(_n(i,lim[i]));\n\t}\n\twhile(!que2.empty()) {//\u62d3\u6251\u6392\u5e8f \n\t\tint me=que2.top().pt;\n\t\tque2.pop();\n\t\tints[ptr]=me;//\u6ce8\u610f\u8981\u53cd\u7740\u5b58\u5e8f\u5217 \n\t\tptr--\uff1b \n\t\tfor(register int i=heads[me]; i; i=memchi[i].nxt) {\n\t\t\tdeg[memchi[i].dest]--;\n\t\t\tif(!deg[memchi[i].dest])que2.push(_n(memchi[i].dest,lim[memchi[i].dest]));\n\t\t}\n\t}\n\tfor(register int i=1; i<=n; i++)printf(\"%d \",ints[i]);\n\tcout<<endl;\n\tfor(register int a=1; a<=n; a++) {//\u679a\u4e3e\u70b9 \n\t\tmemset(bv,0,sizeof(bv));\n\t\tptr=1;\n\t\tbv[a]=1;\n\t\tregister int head=0,tail=1;\n\t\tque[0]=a;\n\t\tdo {//bfs \n\t\t\tint me=que[head];\n\t\t\thead++;\n\t\t\tfor(register int i=fheads[me]; i; i=memchi[i].nxt) {\n\t\t\t\tif(bv[memchi[i].dest])continue;\n\t\t\t\tbv[memchi[i].dest]=1;\n\t\t\t\tque[tail]=memchi[i].dest;\n\t\t\t\ttail++;\n\t\t\t}\n\t\t} while(head<tail);\n\t\tfor(register int i=1; i<=n; i++) {\n\t\t\tif(!bv[ints[i]])tmp[ptr]=lim[ints[i]],ptr++;//\u628a\u8fd9\u4e2a\u5b50\u5e8f\u5217\u62ff\u51fa\u6765\uff0c\u91cd\u6784\u5269\u4e0b\u7684\u5e8f\u5217 \n\t\t}\n\t\tfor(register int i=ptr; i<=n; i++)tmp[i]=123456789;//\u7a7a\u4f4d\u7f6e\u8bbe\u4e3ainf \n\t\tbuild(0,n,1);\n\t\tptr=1;//\u7ef4\u62a4\u5f53\u524d\u5728\u54ea\u63d2 \n\t\tint cnt=0;//\u7edf\u8ba1\u5b50\u5e8f\u5217\u957f\u5ea6 \n\t\tfor(register int i=1; i<=n; i++) {\n\t\t\tif(bv[ints[i]]) {\n\t\t\t\tres w=query(ptr,n,0,n,1);\n\t\t\t\tint dst;\n\t\t\t\tif(w.minn!=0)dst=ptr;//\u540e\u9762\u6ca1\u6709\u8fbe\u5230\u9650\u5236\u7684\u5c31\u63a5\u7740\u5728\u8fd9\u63d2 \n\t\t\t\telse dst=w.pos+1;//\u5426\u5219\u5728\u6700\u540e\u4e00\u4e2a\u8fbe\u5230\u9650\u5236\u7684\u540e\u9762\u63d2 \n\t\t\t\tadd(dst-1,n,0,n,1);//\u5728\u8fd9\u91cc\u63d2\uff0c\u628a\u540e\u9762\u90fd\u533a\u95f4\u51cf \n\t\t\t\tptr=dst;\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d \",ptr-1+cnt);\n\t}\n\treturn(0);\n}\n```",
        "postTime": 1540286129,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1954 \u3010[NOI2010]\u822a\u7a7a\u7ba1\u5236\u3011"
    },
    {
        "content": "\u5173\u4e8e\u62d3\u6251\u6392\u5e8f\u7684\u53cd\u5efa\u56fe\u8fd8\u662f\u4e00\u4e2a\u975e\u5e38\u5957\u8def\u7684\u4e1c\u897f\n\n\u6bd4\u5982\u8bf4[[HNOI2015]\u83dc\u80b4\u5236\u4f5c](https://www.luogu.org/problemnew/show/P3243)\n\n\u6211\u4eec\u5e0c\u671b\u4f7f\u5f97\u67d0\u4e00\u4e2a\u4e1c\u897f\u5728\u62d3\u6251\u5e8f\u4e2d\u51fa\u73b0\u7684\u5c3d\u53ef\u80fd\u65e9\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u5efa\u51fa\u4e00\u5f20\u53cd\u56fe\u6765\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u4e1c\u897f\u5728\u53cd\u56fe\u4e2d\u7684\u62d3\u6251\u5e8f\u5c3d\u91cf\u9760\u540e\uff0c\u4ece\u800c\u4f7f\u5f97\u5176\u51fa\u73b0\u7684\u5c3d\u53ef\u80fd\u5730\u65e9\n\n\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff0c\u6bd4\u5982\u8bf4\u6211\u4eec\u5e0c\u671b$1$\u51fa\u73b0\u7684\u5c3d\u53ef\u80fd\u65e9\uff0c\u76f4\u63a5\u5728\u6b63\u56fe\u4e0a\u5f00\u4e00\u4e2a\u5c0f\u6839\u5806\u6765\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\u663e\u7136\u9519\u7684\n\n\u4e3a\u4ec0\u4e48\u5462\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ea\u80fd\u4f7f\u5b57\u5178\u5e8f\u5c3d\u53ef\u80fd\u5c0f\uff0c\u800c\u4e0d\u662f\u4f7f\u5f97$1$\u5c3d\u53ef\u80fd\u9760\u524d\n\n\u4f46\u662f\u6211\u4eec\u5efa\u51fa\u53cd\u56fe\u6765\u5462\uff0c\u663e\u7136\u53cd\u56fe\u4e0a\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\u6765\u8dd1\u7684\u8bdd\u4f1a\u4f7f\u5f97\u53cd\u5411\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u800c\u6700\u5c0f\u7684\u53cd\u5411\u5b57\u5178\u5e8f\u4e00\u5b9a\u662f$1$\u6700\u9760\u540e\u7684\n\n\u8fd9\u9053\u9898\u53ef\u4ee5\u5efa\u51fa\u4e00\u4e2a\u53cd\u56fe\u6765\uff0c\u4ece\u800c\u4f7f\u5f97\u9650\u5236\u6761\u4ef6\u53d8\u6210\u4e86\u6bcf\u4e00\u4e2a\u822a\u73ed\u5728\u62d3\u6251\u5e8f\u4e2d\u7684\u4f4d\u7f6e$>n-k[i]$\uff0c\u4e8e\u662f\u6211\u4eec\u76f4\u63a5\u7528\u5c0f\u6839\u5806\u6765\u7ef4\u62a4$n-k[i]$\u5c31\u597d\u4e86\n\n\u81f3\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u5728\u6bcf\u4e00\u4e2a\u70b9\u5165\u5ea6\u4e3a$0$\u53ef\u4ee5\u8fdb\u5806\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5148\u4e0d\u8ba9\u5b83\u8fdb\u53bb\uff0c\u800c\u662f\u7b49\u67d0\u4e00\u4e2a\u5143\u7d20\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u662f\u5e94\u8be5\u8fdb\u5806\u4e86\n\n\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#define re register\n#define mp std::make_pair\n#define maxn 2005\nstruct E\n{\n    int v,nxt;\n}e[10005];\nint head[maxn],r[maxn],d[maxn];\nint c[maxn];\nint ans[maxn],tot;\nint n,m,num;\ntypedef std::pair<int,int> pii;\nstd::priority_queue<pii,std::vector<pii>,std::greater<pii> > q;\ninline void add_edge(int x,int y)\n{\n    e[++num].v=y;\n    e[num].nxt=head[x];\n    head[x]=num;\n}\ninline int read()\n{\n    char c=getchar();\n    int x=0;\n    while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9')\n        x=(x<<3)+(x<<1)+c-48,c=getchar();\n    return x;\n}\ninline int work(int x)\n{\n    tot=0;\n    while(!q.empty()) q.pop();\n    for(re int i=1;i<=n;i++) r[i]=c[i];\n    for(re int i=1;i<=n;i++)\n    if(!r[i]) q.push(mp(n-d[i],i));\n    while(!q.empty())\n    {\n        int k=q.top().second;\n        q.pop();\n        if(k==x) continue;\n        if(n-tot>d[k]) return n-tot;\n        tot++;\n        for(re int i=head[k];i;i=e[i].nxt)\n        {\n            r[e[i].v]--;\n            if(!r[e[i].v]) q.push(mp(n-d[e[i].v],e[i].v));\n        }\n    }\n    return n-tot;\n}\nint main()\n{\n    n=read(),m=read();\n    for(re int i=1;i<=n;i++)\n        d[i]=read();\n    int x,y;\n    for(re int i=1;i<=m;i++)\n        x=read(),y=read(),add_edge(y,x),r[x]++;\n    for(re int i=1;i<=n;i++) c[i]=r[i];\n    for(re int i=1;i<=n;i++)\n        if(!r[i]) q.push(mp(n-d[i],i));\n    while(!q.empty())\n    {\n        int k=q.top().second;\n        q.pop();\n        ans[++tot]=k;\n        for(re int i=head[k];i;i=e[i].nxt)\n        {\n            r[e[i].v]--;\n            if(!r[e[i].v]) q.push(mp(n-d[e[i].v],e[i].v));\n        }\n    }\n    for(re int i=n;i;i--)\n        printf(\"%d \",ans[i]);\n    puts(\"\");\n    for(re int i=1;i<=n;i++)\n        printf(\"%d \",work(i));\n    return 0;\n}\n\n```",
        "postTime": 1539495205,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1954 \u3010[NOI2010]\u822a\u7a7a\u7ba1\u5236\u3011"
    },
    {
        "content": "\u6210\u529f\u62a2\u5230`luogu`\u6700\u52a3\u89e3+`bzoj`\u6700\u52a3\u89e3\uff08\u81f3\u5c11\u6211\u63d0\u4ea4\u7684\u65f6\u5019\u662f\u8fd9\u6837\uff09\u2026\u2026\n\n\u9898\u610f\u662f\u7ed9\u4f60\u4e00\u5f20\u62d3\u6251\u56fe\uff0c\u6c42\u51fa\u4e00\u4e2a\u62d3\u6251\u5e8f\u4f7f\u5f97\u7b2c$i$\u4e2a\u70b9\u5728\u7b2c$k_i$\u4e2a\u4f4d\u7f6e\u4e4b\u524d\u3002\u5148\u6784\u9020\u4e00\u7ec4\u89e3\uff0c\u7136\u540e\u8f93\u51fa\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u5230\u7684\u6700\u5c0f\u7684\u4f4d\u7f6e\u3002\n\n\u6784\u9020\u4e00\u7ec4\u89e3\u5f88\u7b80\u5355\uff0c\u5efa\u4e2a\u53cd\u56fe\u4e4b\u540e\u6309$k_i$\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\u4e00\u4e0b\uff0c\u4ece\u5c0f\u5230\u5927\u4e00\u4e2a\u4e00\u4e2a\u904d\u5386\u5373\u53ef\u3002\u56e0\u4e3a\u5982\u679c$k_i$\u5c0f\u7684\u822a\u73ed\u90fd\u6ca1\u6709\u5f00\u51fa\uff0c\u5f00$k_i$\u5927\u7684\u663e\u7136\u6ca1\u6709\u610f\u4e49\u3002\n\n```cpp\ninline void shan(int now) // \u904d\u5386now\u70b9\uff0c\u4f46\u5728\u904d\u5386now\u70b9\u65f6\u663e\u7136\u5148\u8981\u904d\u5386now\u4e4b\u524d\uff08\u5373\u53cd\u56fe\u4e4b\u540e\uff09\u7684\u70b9\n{\n    for(int i = ff[now]; i; i = ee[i].nxt)\n    {\n        int to = ee[i].to; // ee\u662f\u53cd\u56fe\u4e2d\u7684\u8fb9\n        if(!vis[to])\n            shan(to);\n    }\n    printf(\"%d \", now);\n    vis[now] = true;\n}\n\nint main()\n{\n    for(int i = 1; i <= n; ++i)\n        kkk[i] = mp(k[i], i); // #define mp make_pair\n    sort(kkk + 1, kkk + n + 1);\n    for(int i = 1; i <= n; ++i)\n        if(!vis[kkk[i].second])\n            shan(kkk[i].second);\n}\n```\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u5982\u679c\u7ed9\u51fa\u7684$k$\u5e8f\u5217\u65e0\u89e3\uff0c\u90a3\u4e48\u8f93\u51fa\u7684\u5e8f\u5217\u4e00\u5b9a\u4e0d\u5408\u6cd5\uff08\u600e\u4e48\u53ef\u80fd\u5408\u6cd5\uff1f\uff09\uff0c\u7136\u540e\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u4e8c\u5206\u3002\n\n\u590d\u6742\u5ea6\uff1f$O(nm\\log n)$\u2026\u2026\u663e\u7136T\uff0cT\u4e864\u4e2a\u70b9\u3002\n\n\u7136\u540e\u5f00\u59cb$O(\\text{\u677e})$\u5361\u5e38\u3002\n\n\u7136\u540e\u53d1\u73b0\u5b83\u8fc7\u4e86\u3002\n\n~~\u867d\u7136\u6211\u5361\u4e86\u4e00\u5e74\u2026\u2026~~\n\n\u4e0b\u9762\u662f\u5361\u5b8c\u7684\u4ee3\u7801\uff1a\n\n```cpp\n// luogu-judger-enable-o2 \u5f00O2\u8fd8\u662f\u6700\u52a3\u89e3\u2026\u2026\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn = 2005;\nconst int maxm = 10005;\n\nint n, m;\n\n// \u5feb\u8bfb\u5feb\u8f93\u663e\u7136\u5f97\u52a0\n\ninline char gc()\n{\n    static char sxd[1 << 16], *sss = sxd, *ttt = sxd;\n    return (sss == ttt) && (ttt = (sss = sxd) + fread(sxd, 1, 1 << 16, stdin), sss == ttt) ? EOF : *sss++;\n}\n\n#define dd c = gc()\ninline int read(int &x)\n{\n    char dd;\n    x = 0;\n    bool f = false;\n    for(; !isdigit(c); dd)\n    {\n        if(c == '-')\n            f = true;\n        if(c == EOF)\n            return -1;\n    }\n    for(; isdigit(c); dd)\n        x = (x << 1) + (x << 3) + (c ^ 48);\n    if(f)\n        x = -x;\n    return 1;\n}\n#undef dd\n\ninline void write(register int x)\n{\n    int c[10];\n    *c = 0;\n    while(x)\n    {\n        c[++(*c)] = x % 10;\n        x /= 10;\n    }\n    if(!(*c))\n        x = 1;\n    while(*c)\n        putchar(c[(*c)--] | 48);\n    putchar(' ');\n}\n\nstruct pii // \u5e76\u4e0d\u77e5\u9053\u624b\u6253pair\u4f1a\u4e0d\u4f1a\u5feb\u4e00\u70b9\n{\n    int first, second;\n    inline bool operator < (const pii& other) const\n    {\n        return this->first < other.first;\n    }\n};\n\npii kkk[maxn];\n\nstruct EDGE\n{\n    int to, nxt;\n} ee[maxm]; // \u6ce8\u610f\u662f\u53cd\u56fe\u7684\u8fb9\uff0c\u539f\u56fe\u7684\u8fb9\u4f3c\u4e4e\u4e0d\u7528\u5efa\n\nint du[maxn];\nint first[maxn];\nint ff[maxn];\nint dz[maxn];\n\ninline void add_edge(register int from, register int to)\n{\n    static int cnt = 0;\n    ee[++cnt].nxt = ff[to];\n    ff[to] = cnt;\n    ee[cnt].to = from;\n}\n\nint k[maxn];\nint top;\nint vis[maxn];\n\ninline void shan(register int now) // \u56de\u7b54\u7b2c\u4e00\u4e2a\u95ee\u9898 \n{\n    for(register int i = ff[now]; i; i = ee[i].nxt)\n        if(!vis[ee[i].to])\n            shan(ee[i].to);\n    write(now);\n    dz[now] = ++top; // \u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u81f3\u5c11\u53ef\u4ee5\u5728\u90a3\u4e2a\u65f6\u523b\u88ab\u904d\u5386\uff0c\u8fd9\u6837\u7f29\u5c0f\u7684\u4e8c\u5206\u7684\u8303\u56f4 \n    vis[now] = true;\n}\n\npii kx[maxn];\nbool viss[maxn];\nint X, KK;\n\ninline bool shann(register int now)\n{\n    for(register int i = ff[now]; i; i = ee[i].nxt)\n        if(!viss[ee[i].to])\n            if(!shann(ee[i].to))\n                return false;\n    if(++top > ((now != X) ? k[now] : KK)) // \u76f4\u63a5\u8fb9\u8dd1\u8fb9\u5224\u65ad\uff0c\u5e38\u6570\u5e94\u8be5\u4f1a\u5c0f\u4e00\u70b9 \n        return false;\n    return viss[now] = true;\n}\n\ninline bool pan(register int x, register int kk)\n{\n    KK = kk;\n    register int now = 0;\n    for(register int i = 1; i <= n; ++i)\n    {\n        kx[i] = kkk[i];\n        if(kx[i].second == x)\n        {\n            kx[i].first = kk;\n            now = i;\n        }\n    }\n    pii T;\n    // \u672c\u6765\u4e0b\u9762\u4e00\u6bb5\u53ea\u662f\u4e00\u53e5sort\uff0c\u4f46\u90a3\u4e2a\u5e38\u6570\u662f\u5728\u592a\u5927\u4e86\uff0c\u53ea\u80fd\u63d2\u6392\n    while(now > 1 && kx[now].first < kx[now - 1].first) \n    {\n        T = kx[now];\n        kx[now] = kx[now - 1];\n        kx[now - 1] = T;\n        now--;\n    }\n    while(now <= n && kx[now].first > kx[now + 1].first)\n    {\n        T = kx[now];\n        kx[now] = kx[now + 1];\n        kx[now + 1] = T;\n        now++;\n    }\n    memset(viss, 0, sizeof(viss));\n    top = 0;\n    for(register int i = 1; i <= n; ++i)\n        if(!viss[kx[i].second])\n            if(!shann(kx[i].second))\n                return false;\n    return true;\n}\n\ninline int solve(const register int x)\n{\n    X = x;\n    register int l = 1, r = dz[x], mid; // \u4e8c\u5206\uff0cr\u76f4\u63a5\u5c31\u662f\u4e0a\u9762\u7684dz\u4e86\uff0c\u5373\u7b2c\u4e00\u4e2a\u95ee\u9898x\u5728\u90a3\u4e2a\u4f4d\u7f6e \n    while(l < r)\n    {\n        mid = (l + r) >> 1;\n        if(!pan(x, mid))\n            l = mid + 1;\n        else\n            r = mid;\n    }\n    return r;\n}\n\nint main()\n{\n    read(n), read(m);\n    for(register int i = 1; i <= n; ++i)\n    {\n        read(k[i]);\n        kkk[i].first = k[i];\n        kkk[i].second = i;\n    }\n    sort(kkk + 1, kkk + n + 1);\n    int f, t;\n    for(register int i = 1; i <= m; ++i)\n    {\n        read(f), read(t);\n        add_edge(f, t);\n    }\n    for(register int i = 1; i <= n; ++i)\n        if(!vis[kkk[i].second])\n            shan(kkk[i].second);\n    puts(\"\");\n    for(register int i = 1; i <= n; ++i)\n        write(solve(i));\n    return 0;\n}\n```",
        "postTime": 1550406182,
        "uid": 84088,
        "name": "pufanyi",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1954 \u3010[NOI2010]\u822a\u7a7a\u7ba1\u5236\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u9650\u5236\u6761\u4ef6 \u7b2c $i$ \u67b6\u98de\u673a\u8d77\u98de\u5e8f\u53f7 $\\leq k_i$\uff0c\u6211\u4eec\u600e\u4e48\u770b\u600e\u4e48\u89c9\u5f97\u522b\u626d\u3002\u8003\u8651\u5012\u7740\u679a\u4e3e\u65f6\u95f4\uff0c\u5373\u65f6\u5149\u5012\u6d41\u3002\u4e24\u7c7b\u9650\u5236\u6761\u4ef6\u5c31\u53d8\u4e3a\u4e86\n- \u7b2c $i$ \u67b6\u98de\u673a\u5728 $k_i$ \u4e4b\u524d\u4e0d\u5f97\u8d77\u98de\uff08\u5012\u5e8f\uff0c\u4f7f\u65f6\u95f4 $i$ \u5728 $i-1$ \u524d\u9762\u3002\uff09\n- $a$ \u5fc5\u987b\u5728 $b$ \u540e\u8d77\u98de\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4e00\u904d\u62d3\u6251\u89e3\u51b3\u4efb\u52a1\u4e00\u3002\u5bf9\u4e8e\u4efb\u52a1\u4e8c\u8d2a\u5fc3\u9009\u53d6\u6bcf\u6b21\u8d77\u98de\u7684\u822a\u73ed\uff0c\u5373\u4e3a\u5728\u80fd\u4e0d\u9009\u5c31\u4e0d\u9009 $i$ \u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u62d3\u6251\u3002\u76f4\u63a5 $n$ \u904d\u62d3\u6251\u6c42\u7b54\u6848\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u8d77\u98de\u7684\u65f6\u95f4\u9650\u5236\uff0c\u53ef\u4ee5\u5c06\u5165\u5ea6\u4e3a\u96f6\u4f46\u6682\u65f6\u6ca1\u6709\u5230\u8d77\u98de\u65f6\u95f4\u9650\u5236\u7684\u822a\u73ed\u7f16\u53f7\u653e\u5230\u4f18\u5148\u961f\u5217\u91cc\uff0c\u6bcf\u6b21\u5f39\u51fa\u53ef\u4ee5\u8d77\u98de\u7684\u822a\u73ed\u7f16\u53f7\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2 \\log n + nm)$\u3002\n\n$\\text{Code}$\uff1a\n\n```cpp\ndef(N, int, 2e3 + 5)\n\nint n, m;\nint k[N];\nvector<int> e[N];\nint deg[N], ans[N];\nint Deg[N];\nint lst[N];\n\nvoid topo() {\n\tpriority_queue<pii> q;\n\tqueue<int> Q;\n\trep(i, 1, n) if(!deg[i]) {\n\t\tif(k[i] == n) Q.push(i);\n\t\telse q.push(mp(k[i], i));\n\t}\n\tper(i, n, 1) {\n\t\t//assert(Q.size());\n\t\twhile(!q.empty() && q.top().fi >= i) {\n\t\t\tQ.push(q.top().se);\n\t\t\tq.pop();\n\t\t}\n\t\tint u = Q.front();\n\t\tQ.pop();\n\t\tans[i] = u;\n\t\tfor(int v : e[u]) {\n\t\t\t--deg[v];\n\t\t\tif(!deg[v]) {\n\t\t\t\tif(k[v] >= i) Q.push(v);\n\t\t\t\telse q.push(mp(k[v], v));\n\t\t\t}\n\t\t}\n\t}\n\trep(i, 1, n) printf(\"%d%c\", ans[i], \" \\n\"[i == n]);\n}\n\nvoid solve(int x) {\n\trep(i, 1, n) deg[i] = Deg[i];\n\tpriority_queue<pii> q;\n\tqueue<int> Q;\n\trep(i, 1, n) if(!deg[i]) {\n\t\tif(k[i] == n) Q.push(i);\n\t\telse q.push(mp(k[i], i));\n\t}\n\tper(i, n, 1) {\n\t\t//assert(Q.size());\n\t\twhile(!q.empty() && q.top().fi >= i) {\n\t\t\tQ.push(q.top().se);\n\t\t\tq.pop();\n\t\t}\n\t\tint u = Q.front();\n\t\tQ.pop();\n\t\tif(u == x) {\n\t\t \tif(!Q.empty()) {\n\t\t \t\tQ.push(x);\n\t\t\t\tu = Q.front();\n\t\t\t\tQ.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprintf(\"%d \", i);\n\t\t\t\treturn ;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(int v : e[u]) {\n\t\t\t--deg[v];\n\t\t\tif(!deg[v]) {\n\t\t\t\tif(k[v] >= i) Q.push(v);\n\t\t\t\telse q.push(mp(k[v], v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tqread(n, m);\n\trep(i, 1, n) qread(k[i]);\n\trep(i, 1, m) {\n\t\tint u, v;\n\t\tqread(u, v);\n\t\t++deg[u];\n\t\te[v].pb(u);\n\t}\n\trep(i, 1, n) Deg[i] = deg[i];\n\ttopo();\n\trep(i, 1, n) solve(i);\n\tputs(\"\");\n\treturn 0;\n}\n```\n",
        "postTime": 1631791988,
        "uid": 242543,
        "name": "BreezeEnder",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1954 [NOI2010] \u822a\u7a7a\u7ba1\u5236"
    },
    {
        "content": "\u8fd9\u9898\u7684\u601d\u60f3\u662f\u5f88\u597d\u7684\uff0c\u6b63\u56fe\u96be\u505a\u7684\u60c5\u51b5\u4e0b\u8003\u8651\u8fd4\u56fe\u3002\n\n\u7b2c\u4e00\u95ee\u6bd4\u8f83\u597d\u505a\uff0c\u62d3\u6251\u6392\u5e8f\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7b2c\u4e8c\u95ee\u7684\u8bdd\uff0c\u601d\u60f3\u975e\u5e38\u5de7\u5999\uff0c\u9996\u5148\u56e0\u4e3a\u662f\u53cd\u56fe\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u662f\u8981\u627e\u4e00\u4e2a\u70b9\u5728\u8fd4\u56fe\u4e2d\u6700\u665a\u4ec0\u4e48\u65f6\u5019\u8d77\u98de\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u9996\u5148\u8fd8\u662f\u6309\u62d3\u6251\u6392\u5e8f\u7684\u601d\u60f3\uff0c\u5f53\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u9996\u5148\u4e0d\u7ba1\u5b83(\u5373\u4f7f\u5b83\u6ca1\u6709\u5ea6\u4e86\u4e5f\u4e0d\u653e\u8fdb\u53bb)\uff0c\u7136\u540e\u5f53\u4ec0\u4e48\u65f6\u5019\u6211\u4eec\u53d1\u73b0\u5176\u5b83\u7684\u70b9\u5df2\u7ecf\u4e0d\u6ee1\u8db3\u60c5\u51b5\u4e86\uff0c\u90a3\u4e48\u5c31\u662f\u8fd9\u4e2a\u70b9\u5fc5\u987b\u8981\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u6b63\u56fe\u4e2d\u7684\u6700\u65e9\u4f4d\u7f6e\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n```cpp\n#include <queue>\n#include <cstdio>\n#include <algorithm>\n#define Rep( i , _begin , _end ) for(int i=(_begin),i##_END=(_end);i<=(i##_END);i++)\n#define For( i , _begin , _end ) for(int i=(_begin),i##_END=(_end);i!=(i##_END);i++)\n#define Lop( i , _begin , _end ) for(int i=(_begin),i##_END=(_end);i>=(i##_END);i--)\n#define Dnt( i , _begin , _end ) for(int i=(_begin),i##_END=(_end);i!=(i##_END);i--)\nusing std :: max;\nusing std :: min;\nconst int maxx = 2000 + 25;\nconst int maxm = 10000 + 25;\ntypedef std :: pair<int,int> iii;\nstd :: priority_queue<iii> quq;\nint n,m,x,y,z,num,tot,cnt;\nint idx[maxx],c[maxx],idx1[maxx],ans[maxx];\nint head[maxm],nxt[maxm<<1],to[maxm<<1];\nnamespace top_sort{\n    void Ins(int x,int y){\n        to[++num] = y;nxt[num] = head[x];head[x] = num;\n        idx[y] ++;\n    }\n    int Get(int x){\n        while(!quq.empty()) quq.pop();\n        Rep( i , 1 , n ) idx1[i] = idx[i];\n        Rep( i , 1 , n ) if(i != x && !idx1[i]) quq.push(iii(c[i],i));\n        Lop( i , n , 1 ){\n            if(quq.empty()) return i;\n            iii tmp = quq.top();quq.pop();\n            if(tmp.first < i) return i;\n            for(int k = head[tmp.second];k;k = nxt[k]){\n                idx1[to[k]] --;\n                if(to[k] != x && !idx1[to[k]]) quq.push(iii(c[to[k]],to[k]));\n            }        \n        }\n    }\n    void GG(){\n        Rep( i , 1 , n ) idx1[i] = idx[i];\n        Rep( i , 1 , n ) if(!idx1[i]) quq.push(iii(c[i],i));\n        Lop( i , n , 1 ){\n            iii tmp = quq.top();quq.pop();\n            ans[i] = tmp.second;\n            for(int k = head[tmp.second];k;k = nxt[k]){\n                idx1[to[k]] --;\n                if(!idx1[to[k]]) quq.push(iii(c[to[k]],to[k]));\n            }\n        }\n    }\n}\nusing namespace top_sort;\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    Rep( i , 1 , n ) scanf(\"%d\",&c[i]);\n    while( m-- ){\n        scanf(\"%d%d\",&x,&y);\n        Ins(y,x);\n    }\n    GG();\n    Rep( i , 1 , n ) printf(\"%d \",ans[i]);\n    putchar(10);\n    Rep( i , 1 , n ) printf(\"%d \",Get(i));\n    return 0;\n}\n```",
        "postTime": 1498113647,
        "uid": 21673,
        "name": "Sor4",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1954 \u3010\u822a\u7a7a\u7ba1\u5236\u3011"
    }
]