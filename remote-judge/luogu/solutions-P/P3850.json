[
    {
        "content": "\u5199\u5728\u524d\u9762\u7684\u8bdd\uff1a\n\n\u8fd9\u7bc7\u9898\u89e3\u7684\u505a\u6cd5\u662f$fhq-Treap$\uff0c\u5176\u5b9e\u697c\u4e0a\uff08\u5e94\u8be5\u662f\uff09\u5df2\u7ecf\u6709\u4e00\u7bc7$fhq-Treap$\u7684\u9898\u89e3\u4e86\uff0c\u4f46\u90a3\u4f4d$DALAO$\u662f\u7528\u6307\u9488\u5199\u7684\uff0c\u4e3a\u4e86\u8ba9\u5927\u5bb6\u66f4\u5feb\u7684\u770b\u61c2\uff0c\u4e8e\u662f\u5c31\u5199\u4e86\u4e00\u7bc7\u7528\u975e\u6307\u9488\u53d8\u91cf\u7684$fhq-Treap$\uff0c\u81ea\u6211\u611f\u89c9~~\u901a\u4fd7\u6613\u61c2\uff0c\u5112\u96c5\u968f\u548c~~\u3002\n\n\u5927\u5bb6\u53ef\u4ee5\u5728\u6211\u7684[blog](https://dyrisingsunlight.github.io/2019/08/17/TJOI2007-%E4%B9%A6%E6%9E%B6/)\u4e2d\u8fdb\u884c\u67e5\u770b\u3002\n\n\u4e0b\u9762\u8fdb\u5165\u6b63\u6587\u3002\n\n------------\n\n\n## $Problem's$ $Website$\n[TJOI2007 \u4e66\u67b6](https://www.luogu.org/problem/P3850)\n\n## $Solution$\n\u8fd9\u662f\u4e00\u9053\u5e73\u8861\u6811\u7684\u597d\u9898\uff0c\u56e0\u4e3a\u6211\u6682\u65f6\u4e0d\u4f1a$Splay$\uff0c\u6240\u4ee5\u6211\u5c31\u7528$fhq-Treap$\u6765\u5199\u3002\n\n\u9996\u5148\u5173\u4e8e$fhq-Treap$\u7684\u4e00\u4e9b\u89e3\u91ca\u5728\u6211\u7684\u53e6\u5916\u4e00\u7bc7[blog](https://dyrisingsunlight.github.io/2019/08/10/%E6%B5%85%E8%B0%88fhq-Treap/)\u4e2d\u5df2\u7ecf\u8be6\u7ec6\u8bf4\u660e\u4e86\uff0c\u4e0d\u61c2\u7684\u7ae5\u978b\u53ef\u4ee5\u5148\u53bb\u5b66\u4e60\u4e00\u4e0b\u3002\n\n\u8fd9\u9053\u9898\u8981\u7528\u5230**\u6392\u540d\u5206\u88c2**\uff0c\u540c\u6837\u7528\u5230\u8fd9\u79cd\u65b9\u6cd5\u7684\u8fd8\u6709\u53e6\u5916\u4e00\u9053[\u540c\u540d\u9898](https://www.luogu.org/problem/P2596)\u3002\n\n~~\u4e0a\u9762\u597d\u50cf\u90fd\u662f\u5e9f\u8bdd\uff0c\u4e0b\u9762\u662f\u5e72\u8d27\u3002~~\n\n##### \u4e0b\u9762\u8be6\u7ec6\u5730\u8bf4\u4e00\u4e0b\u64cd\u4f5c\u3002\n\n> 1.\u5904\u7406\u4e66\u7684\u540d\u79f0:\n\n>> \u56e0\u4e3a\u662f\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u4e2a$string$\u7c7b\u578b\u7684\u6570\u7ec4\u8bb0\u5f55\uff0c\u7528\u4e00\u4e2a\u53d8\u91cf\u5f53\u505a\u7f16\u53f7**\u6620\u5c04**\u5230\u6bcf\u672c\u4e66\u7684\u540d\u79f0\u3002\n\n>> \u6e29\u99a8\u63d0\u793a\uff1a\u6ce8\u610f\u6570\u636e\u8303\u56f4\uff0c\u5426\u5219\u5c06\u60e8\u906d$RE$\u3002\u3002\u3002\uff08\u597d\u50cf\u5c31\u6211\u8fd9\u4e2a\u83dc\u9e21$RE$\u4e86\uff09\n\n> 2.\u5904\u7406\u4e00\u5f00\u59cb\u5c31\u5728\u4e66\u67b6\u4e0a\u7684\u4e66:\n\n>> \u6211\u4eec\u6240\u8bf4\u7684\u201c**\u6392\u540d**\u201d\u5373**\u5f53\u524d\u8fd9\u672c\u4e66\u7684\u4e0a\u9762\u6709\u51e0\u672c\u4e66**\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6700\u5f00\u59cb\u7684\u4e66\u7c4d\uff0c\u6211\u4eec\u53ea\u8981$insert(i - 1, cnt);$\u5373\u53ef\uff08cnt\u5373\u4e3a\u6620\u5c04\u7684\u53d8\u91cf\uff09\n\n> 3.\u5904\u7406\u540e\u6765\u653e\u5165\u7684\u4e66\u7c4d:\n\n>> \u7ecf\u8fc7\u7814\u7a76\u6837\u4f8b\uff0c\u6211\u4eec\u53d1\u73b0\uff1a\u63d2\u5165\u4e00\u4e2a\u4f4d\u7f6e\u4e3a$x$\u7684\u4e66\uff0c\u539f\u672c\u7684\u7b2c$x$\u672c\u5230\u6700\u540e\u4e00\u672c\u7684\u4f4d\u7f6e\u90fd\u4f1a$+1$\uff0c\u4e5f\u5c31\u662f![](https://cdn.luogu.com.cn/upload/pic/72965.png)\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u63d2\u5165\u540e\u8fd9\u672c\u4e66\u7684\u6392\u540d\u5c31\u4e3a$x$\uff0c\u6240\u4ee5\u5c31$insert(x, cnt);$\n\n> 4.\u5904\u7406\u8be2\u95ee\n\n>> \u8981\u8f93\u51fa\u7b2c$x$\u4e2a\u4f4d\u7f6e\u4e66\u7684\u540d\u79f0\uff0c\u6211\u4eec\u5c31\u76f8\u5f53\u4e8e\u627e\u5230\u7b2c$x$\u4e2a\u4f4d\u7f6e\u4e66\u6620\u5c04\u7684\u7f16\u53f7\u3002\n\n>> \u65b9\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u9996\u5148\u4ee5$x$\u4e3a\u6392\u540d\u5c06\u6811\u5206\u88c2\u6210\u4ee5$r1, r2$\u4e3a\u6839\u7684\u4e24\u68f5\u6811\uff0c\u518d\u5bf9$r2$\u4ee5$1$\u4e3a\u6392\u540d\u5206\u88c2\u6210\u4ee5$r3, r4$\u4e3a\u6839\u7684\u4e24\u68f5\u6811\uff0c\u8fd9\u6837$r3$\u5c31\u6210\u4e86\u4e00\u4e2a\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u8981\u6c42\u7684\u7b54\u6848\u3002\n\n>> \u7ed9\u4e2a\u56fe\u8ba9\u5927\u5bb6\u7406\u89e3\u4e00\u4e0b\uff08\u5bf9\u4e8e$fhq-Treap$\uff0c\u4e0d\u7406\u89e3\u7684\u65f6\u5019\u753b\u4e2a\u56fe\u6709\u4e8b\u534a\u529f\u500d\u7684\u6548\u679c\uff09:![](https://cdn.luogu.com.cn/upload/pic/72966.png\n)\n\n>> \u522b\u5fd8\u4e86\u6700\u540e\u5408\u5e76\u56de\u53bb\u3002\n\n\u76f8\u4fe1\u5927\u5bb6\u5bf9$fhq-Treap$\u53c8\u52a0\u6df1\u4e86\u7406\u89e3\u3002\n\n\u6240\u4ee5\u4e0b\u9762\u4ee3\u7801\u5c31\u4e0d\u89e3\u91ca\u4e86 ~~(\u9003~~\n\n## $Code$\n```cpp\n//Coded by dy.\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define gc getchar()\n#define pc(x) putchar(x)\n#define re register\nconst int Maxn = 1e5 + 200 + 10;\nusing std :: string;\nusing std :: cin;\nusing std :: cout;\nusing std :: endl;\ninline int sc() {\n    int xx = 0, ff = 1; char cch = gc;\n    while(!isdigit(cch)) {\n        if(cch == '-') ff = -1; cch = gc;\n    }\n    while(isdigit(cch)) {\n        xx = (xx << 1) + (xx << 3) + (cch ^ '0'); cch = gc;\n    }\n    return xx * ff;\n}\ninline void out(int x) {\n    if(x < 0)\n\t\tpc('-'), x = -x;\n    if(x >= 10)\n        out(x / 10);\n    pc(x % 10 + '0');\n}\nstruct fhq_Treap {\n\tint ch[2];\n\tint siz, val, dat;\n}t[Maxn];\nint n, m, cnt;\nint rt, r1, r2, r3, r4, tot;\nstring s[Maxn];\ninline void pushup(int id) {\n\tt[id].siz = t[t[id].ch[0]].siz + t[t[id].ch[1]].siz + 1;\n}\ninline int cre(int r) {\n\tt[++tot].siz = 1, t[tot].val = r, t[tot].dat = rand();\n\treturn tot;\n}\ninline void split(int id, int r, int &x, int &y) {\n\tif(!id)\n\t\tx = y = 0;\n\telse {\n\t\tif(r <= t[t[id].ch[0]].siz) {\n\t\t\ty = id;\n\t\t\tsplit(t[id].ch[0], r, x, t[id].ch[0]);\n\t\t}\n\t\telse {\n\t\t\tx = id;\n\t\t\tsplit(t[id].ch[1], r - t[t[id].ch[0]].siz - 1, t[id].ch[1], y);\n\t\t}\n\t\tpushup(id);\n\t}\n}\ninline int merge(int x, int y) {\n\tif(!x || !y)\n\t\treturn x + y;\n\tif(t[x].dat < t[y].dat) {\n\t\tt[x].ch[1] = merge(t[x].ch[1], y);\n\t\tpushup(x);\n\t\treturn x;\n\t}\n\tt[y].ch[0] = merge(x, t[y].ch[0]);\n\tpushup(y);\n\treturn y;\n}\ninline void insert(int r, int id) {\n\tsplit(rt, r, r1, r2);\n\trt = merge(r1, merge(cre(id), r2));\n}\ninline void query(int r) {\n\tsplit(rt, r, r1, r2);\n\tsplit(r2, 1, r3, r4);\n\tcout << s[t[r3].val] << endl;\n\trt = merge(r1, merge(r3, r4));\n}\nint main() {\n\tsrand(20041029);\n\tn = sc();\n\tfor(re int i = 1; i <= n; ++i) {\n\t\tcin >> s[++cnt];\n\t\tinsert(i - 1, cnt);\n\t}\n\tm = sc();\n\twhile(m--) {\n\t\tcin >> s[++cnt];\n\t\tint x = sc();\n\t\tinsert(x, cnt);\n\t}\n\tm = sc();\n\twhile(m--) {\n\t\tint x = sc();\n\t\tquery(x);\n\t}\n    return 0;\n}\n```\n$rp++$",
        "postTime": 1566053766,
        "uid": 43383,
        "name": "Sunlight9",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3850 \u3010[TJOI2007]\u4e66\u67b6\u3011"
    },
    {
        "content": "\u8fd9\u9898\u611f\u89c9\u7528\u5565\u65b9\u6cd5\u90fd\u80fd\u6c34\u8fc7\u53bb\u3002\n\n\u6bd4\u5982 vector\uff0c\u5757\u94fe\u3002\n\n\u4ecb\u7ecd\u4e00\u79cd\u795e\u4ed9\u7ea7\u522b\u7684 STL \u6570\u636e\u7ed3\u6784\uff1arope\u3002\n\n\uff08\u8868\u9762\u4e0a\u5927\u6982\u53ef\u4ee5\u7406\u89e3\u4e3a\u8fdb\u9636\u7248\u7684 vector\uff09\n\n\u8fd9\u4e2a\u4e27\u5fc3\u75c5\u72c2\u7684\u4e1c\u897f\u652f\u6301 $\\log n$ \u7ea7\u522b\u7684\u5927\u90e8\u5206 vector \u64cd\u4f5c\u3002\n\n\u7136\u540e\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\uff0c\uff0c\n\n\u60a8\u4ee5\u4e3a\u8fd9\u662f\u57fa\u4e8e\u5e73\u8861\u6811\u7684\uff1f\n\nno\uff0c\u662f\u57fa\u4e8e**\u53ef\u6301\u4e45\u5316**\u5e73\u8861\u6811\u7684\uff0c\u5e95\u5c42\u662f\u7ea2\u9ed1\u6811\u3002\n\n\u6240\u4ee5\u652f\u6301 $O(1)$ \u7684 copy\uff0c\uff0c\uff0c\n\n\u53ef\u4ee5\u6c34\u5927\u90e8\u5206\u7684\u53ef\u6301\u4e45\u5316\u9898\u76ee\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#include<ext/rope>\nusing namespace std;\nusing namespace __gnu_cxx;\nrope<int> a; \nstring t[200005];\nint main()\n{\n\tint n,x;\n\tstring p;\n\tscanf(\"%d\",&n);\n\twhile(n--)\n\t{\n\t\tcin>>t[a.size()];\n\t\ta.push_back(a.size());\n\t}\t\n\tscanf(\"%d\",&n);\n\twhile(n--)\n\t{\n\t\tcin>>t[a.size()];\n\t\tscanf(\"%d\",&x);\n\t\ta.insert(x,a.size());\n\t}\n\tscanf(\"%d\",&n);\n\twhile(n--)\n\t{\n\t\tscanf(\"%d\",&x);\n\t\tcout<<t[a[x]]<<endl;\n\t}\t\n}\n```\n",
        "postTime": 1589268969,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3850 \u3010[TJOI2007]\u4e66\u67b6\u3011"
    },
    {
        "content": "\u8fd9\u9898   \u66b4\u529ba\u4e86   \u7136\u540e\u662fvector\u7684\u6027\u8d28 \u76f4\u63a5\u66b4\u529b  \u4ee3\u7801\u4e2d\u7528\u4e86map\u5176\u5b9e\u53ef\u4ee5\u6362\u6210\u6570\u7ec4       \u7136\u540e\u63a5\u7ed3\u675f\u4e86\n\n\n```c\n#include <bits/stdc++.h>\nusing namespace std;\n\nvector <int> self;\nmap <int,string> book;\nint n,m,len,q,x;\n\nint read()\n{\n  int x=0;\n  char c=getchar();\n  while(c<'0'||c>'9')  c=getchar();\n  while(c>='0'&&c<='9')\n  {\n    x=(x<<3) + (x<<1) + c - '0' ;\n    c=getchar();\n  }\n  return x;\n}\n\nint main()\n{\n  string str;\n  n=read();\n  for(int i=1; i<=n; i++)\n  {\n    cin>>str;\n    book[++len]=str;\n    self.push_back(len);\n  }\n  m=read();\n  for(int i=1; i<=m; i++)\n  {\n    cin>>str>>x;\n    book[++len]=str;\n    self.insert(self.begin()+x,len);\n  }\n  q=read();\n  while(q--)\n  {\n    x=read();\n    cout<<book[self[x]]<<endl;\n  }\n  return 0;\n}\n\n```",
        "postTime": 1524470408,
        "uid": 42727,
        "name": "PiCaHor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3850 \u3010[TJOI2007]\u4e66\u67b6\u3011"
    },
    {
        "content": "# \u8fd9\u9898\u662f\u4e00\u9053\u6bd4\u8f83\u57fa\u7840\u7684\u5e73\u8861\u6811\u95ee\u9898  \n\u56e0\u4e3a\u6211\u4e0d\u4f1a\u5199treap  \n\u6240\u4ee5\u6211\u5199\u4e86splay  \n\n### ~~\u601d\u8def\u5f88\u7b80\u5355~~  \n### \u601d\u8def\uff1a  \n\u9488\u5bf9\u4e00\u5f00\u59cb\u7684\u6bcf\u4e00\u4e2a\u5df2\u7ecf\u6392\u597d\u7684\u4e66\uff0c\u6b63\u5e38\u5730\u5efa\u6811\uff0c\u8282\u70b9\u7684\u6743\u503c\u53ef\u4ee5\u8bbe\u4e3a\u8be5\u4e66\u7684\u7f16\u53f7\uff08\u5176\u5b9e\u5728\u8fd9\u9053\u9898\u91cc\uff0c\u8282\u70b9\u7684\u6743\u503c\u5e76\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\uff09  \n\u5bf9\u4e8e\u65b0\u63d2\u5165\u7684\u8282\u70b9\uff0c\u5047\u8bbe\u8be5\u8282\u70b9\u63d2\u5165\u5728k\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5148\u5c06\u5e73\u8861\u6811\u7684\u7b2ck\u4e2a\u8282\u70b9\u4f38\u5c55\u5230\u6811\u9876\uff0c\u7136\u540e\u518d\u628a\u5e73\u8861\u6811\u7684\u7b2ck-1\u4e2a\u8282\u70b9\u4f38\u5c55\u5230\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u3002\u6b64\u65f6\uff0c\u5f88\u663e\u7136\u7b2ck-1\u4e2a\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e00\u5b9a\u4e3a\u7a7a\uff0c\u8fd9\u65f6\u5019\u628a\u65b0\u6765\u7684\u4e66\u63d2\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u3002  \n\u6700\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff0c\u76f4\u63a5\u67e5\u7b2ck\u4e2a\u8282\u70b9\u5c31\u884c\u4e86\u3002  \n\u4e3a\u4e86\u9632\u6b62\u5404\u79cd\u5947\u602a\u7684\u95ee\u9898\uff0c\u6211\u5728\u5efa\u6811\u7684\u65f6\u5019\u8fd8\u7279\u610f\u63d2\u5165\u4e86\u6700\u5c0f\u8282\u70b9\u548c\u6700\u5927\u8282\u70b9   \n### \u4ee5\u4e0b\u662f\u4ee3\u7801\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define MAXN 1000010\nint ch[MAXN][2],val[MAXN],par[MAXN],cnt[MAXN],sizes[MAXN];\nchar names[MAXN][15];\nint i,j,k,m,n,ncnt,root,q;\nint chk(int x){\n\treturn ch[par[x]][1]==x;\n}\nvoid pushup(int x){\n\tsizes[x]=sizes[ch[x][0]]+sizes[ch[x][1]]+cnt[x];\n}\nvoid rotate(int x){\n\tint y=par[x],z=par[y],k=chk(x),w=ch[x][!k];\n\tch[y][k]=w,par[w]=y;\n\tch[z][chk(y)]=x,par[x]=z;\n\tch[x][!k]=y,par[y]=x;\n\tpushup(y),pushup(x);\n}\nvoid splay(int x,int goal=0){\n\twhile(par[x]!=goal){\n\t\tint y=par[x],z=par[y];\n\t\tif(z!=goal){\n\t\t\tif(chk(x)==chk(y)) rotate(y);\n\t\t\telse rotate(x);\n\t\t}\n\t\trotate(x);\n\t}\n\tif(!goal) root=x;\n}\nvoid find(int v){\n\tif(!root) return;\n\tint cur=root;\n\twhile(val[ch[cur][v>val[cur]]]&&v!=val[cur]){\n\t\tcur=ch[cur][v>val[cur]];\n\t}\n\tsplay(cur);\n}\nvoid insert(int v){\n\tint cur=root,p=0;\n\twhile(cur&&val[cur]!=v){\n\t\tp=cur;\n\t\tcur=ch[cur][v>val[cur]];\n\t}\n\tif(cur){\n\t\tcnt[cur]++;\n\t}else{\n\t\tcur=++ncnt;\n\t\tif(p) ch[p][v>val[p]]=cur;\n\t\tch[cur][0]=ch[cur][1]=0;\n\t\tval[cur]=v,par[cur]=p;\n\t\tcnt[cur]=sizes[cur]=1;\n\t}\n\tsplay(cur);\n}\nint kth(int k){\n\tint cur=root;\n\twhile(true){\n\t\tif(ch[cur][0]&&sizes[ch[cur][0]]>=k){\n\t\t\tcur=ch[cur][0];\n\t\t}else{\n\t\t\tif(sizes[ch[cur][0]]+cnt[cur]<k){\n\t\t\t\tk-=sizes[ch[cur][0]]+cnt[cur];\n\t\t\t\tcur=ch[cur][1];\n\t\t\t}else{\n\t\t\t\treturn cur;\n\t\t\t}\n\t\t}\n\t}\n}\nint ranks(int v){\n\tfind(v);\n\treturn sizes[ch[root][0]]+1;\n}\nint pre(int v){\n\tfind(v);\n\tif(val[root]<v) return root;\n\tint cur=ch[root][0];\n\twhile(ch[cur][1]) cur=ch[cur][1];\n\treturn cur;\n}\nint succ(int v){\n\tfind(v);\n\tif(val[root]>v) return root;\n\tint cur=ch[root][1];\n\twhile(ch[cur][0]) cur=ch[cur][0];\n\treturn cur;\n}\nvoid remove(int v){\n\tint last=pre(v),Next=succ(v);\n\tsplay(last),splay(Next,last);\n\tint del=ch[Next][0];\n\tif(cnt[del]>1){\n\t\tcnt[del]--;\n\t\tsplay(del);\n\t}else{\n\t\tch[Next][0]=0;\n\t\tsplay(Next);\n\t}\n}\nint main(){\n\tncnt=0; root=0;\n\tinsert(-1),insert(1000000000);\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<=n;i++) {\n\t\tscanf(\"%s\",names[i]);\n\t\tinsert(i);\n\t}\n\tscanf(\"%d\",&m);\n\tfor(i=1;i<=m;i++){\n\t\tscanf(\"%s%d\",names[n+i],&k);\n\t\tk=k+2;\n\t\tint id=kth(k);\n\t\tsplay(id);\n\t\tint sid=kth(k-1);\n\t\tsplay(sid,id);\n\t\tch[sid][1]=++ncnt;\n\t\tch[ncnt][0]=ch[ncnt][1]=0;\n\t\tpar[ncnt]=sid;\n\t\tval[ncnt]=k;\n\t\tcnt[ncnt]=sizes[ncnt]=1;\n\t\tpushup(sid),pushup(id);\n\t}\n\tscanf(\"%d\",&q);\n\tfor(i=1;i<=q;i++){\n\t\tscanf(\"%d\",&k);\n\t\tint id=kth(k+2);\n\t\tprintf(\"%s\\n\",names[id-2]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1541168743,
        "uid": 73035,
        "name": "Eternal_Blue",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3850 \u3010[TJOI2007]\u4e66\u67b6\u3011"
    },
    {
        "content": "2019.1.30\u66f4\u65b0\uff1a\u52a0\u5165\u4e86$LateX$\uff0c\u7b80\u5316\u4e86$Split$\u51fd\u6570\n\n## ~~\u8fd9\u9898\u6211\u89c9\u5f97\u5c31\u662f\u4e2a\u65e0\u65cbTreap\u7684\u677f\u5b50\uff0c\u4e3a\u4ec0\u4e48\u6ca1\u6709\u65e0\u65cbTreap\u7684\u9898\u89e3~~  \n\u65e0\u65cb$Treap$\u968f\u4fbf\u641e\u641e\u5c31\u8fc7\u4e86\u8fd9\u9053\u9898\uff0c\u6211\u6765\u53d1\u4e00\u4e2a\u9898\u89e3  \n\n### \u524d\u7f6e\u77e5\u8bc6\uff1a\u65e0\u65cbTreap\n\n\u65e0\u65cb$Treap$\u7684\u8be6\u7ec6\u4ecb\u7ecd\u6211[\u535a\u5ba2](https://www.cnblogs.com/Juruo1103/p/10281403.html)\u91cc\u9762\u6709\uff0c\u8fd9\u91cc\u5148\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u3002\u65e0\u65cb$Treap$\u7684\u4e3b\u8981\u64cd\u4f5c\u662f\u5206\u88c2\u548c\u5408\u5e76\uff0c\u5206\u88c2\u65f6\u53ef\u4ee5\u5206\u88c2\u51fa\u4efb\u610f\u5927\u5c0f\u7684\u5b50\u6811\uff0c\u8fd9\u6837\uff0c\u5b83\u5c31\u6210\u4e86\u9664\u4e86$Splay$\u4e4b\u5916\uff0c\u652f\u6301\u533a\u95f4\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u7684\u5e38\u7528\u6570\u636e\u7ed3\u6784\u3002\n  \n### \u5173\u4e8e\u672c\u9898\n\n\u8fd9\u9053\u9898\u662f\u8ba9\u6211\u4eec\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u548c\u5355\u70b9\u67e5\u8be2\uff0c\u90a3\u4e48\u6211\u4eec\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u7531\u539f\u5e8f\u5217\u987a\u5e8f\u4fdd\u6301\uff0c\u8fd9\u6837\u4e2d\u5e8f\u904d\u5386\u5c31\u662f\u539f\u5e8f\u5217\u3002\n\n#### \u64cd\u4f5c\uff081\uff09\uff1a\u63d2\u5165\n\n\u52a0\u5165\u6211\u4eec\u60f3\u628a\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u540e\uff0c\u8ba9\u5b83\u5728\u5e8f\u5217\u7684\u7b2c$k$\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6211\u4eec\u5206\u88c2\u51fa\u5927\u5c0f\u4e3a$k-1$\u7684\u5b50\u6811\uff0c\u628a\u5b83\u4e0e\u65b0\u7ed3\u70b9\u5408\u5e76\uff0c\u518d\u548c\u5269\u4f59\u90e8\u5206\u5408\u5e76\uff0c\u5c31$OK$\u4e86\uff0c\u4ee3\u7801\u5982\u4e0b\n\n```\nvoid Insert(Node *x, int k) {\n    Node *t1, *t2;\n    Split(root, k - 1, t1, t2);//\u5206\u51fak - 1\u4e2a\u5143\u7d20\u5b58\u5728t1\u4e2d\uff0c\u5269\u4f59\u5b58\u5728t2\u4e2d\n    root = Merge(t1, Merge(x, t2));//\u65b0\u7ed3\u70b9\u63d2\u8fdb\u53bb\uff0c\u539f\u6837\u62fc\u56de\u53bb\n}\n\n```\n\n#### \u64cd\u4f5c\uff082\uff09\uff1a\u5355\u70b9\u67e5\u8be2\n\n\u65e2\u7136\u5b83\u6309\u7167\u539f\u5e8f\u5217\u4fdd\u6301\u4e8c\u53c9\u641c\u7d22\u6811\u6027\u8d28\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u5b83\u5f53\u505a\u67e5\u8be2\u7b2c$k$\u5c0f\u3002\u5148\u62c6\u51fa\u5927\u5c0f\u4e3a$k - 1$\u7684\u5b50\u6811\uff0c\u518d\u5728\u5269\u4f59\u90e8\u5206\u62c6\u51fa\u5927\u5c0f\u4e3a$1$\u7684\u5b50\u6811\uff0c\u53d6\u8fd9\u4e2a\u7ed3\u70b9\u7684$val$\uff0c\u518d\u539f\u6837\u62fc\u56de\u53bb\uff0c\u4ee3\u7801\u5982\u4e0b\n\n```\nstring FindKth(int pos) {\n    Node *lt, *tmp;\n    Split(root, pos - 1, lt, tmp);//\u7b2c\u4e00\u6b21\u62c6\n    Node *rt, *midt;\n    Split(tmp, 1, midt, rt);//\u7b2c\u4e8c\u6b21\u62c6\n    string res = midt->name;//\u5b58\u7b54\u6848\n    root = Merge(lt, Merge(midt, rt));//\u62fc\u56de\u53bb\n    return res;\n}\n```\n\n _\u5b8c\u6574\u4ee3\u7801_   \n ```\n // luogu-judger-enable-o2\n#include <string>\n#include <iostream>\n\nconst int MAXN = 205;\nconst int MAXM = 1e5 + 5;\nconst int MAXQ = 1e4 + 5;\n\nusing std::cin;\nusing std::cout;\nusing std::string;\n\nint Rand() {\n    static int seed = 39444;\n    return seed = (((seed ^ 810872ll) + 1433223ll) * 19260817ll) % 2147483647;\n}\n\nstruct Node{\n    int key, siz;\n    string name;\n    Node *child[2];\n    Node(string name):name(name), key(Rand()), siz(1) {\n        child[0] = child[1] = NULL;\n    }\n    Node():key(Rand()), siz(1) {\n        child[0] = child[1] = NULL;\n    }\n};\n\nNode *root = NULL;\n\n//Node book[MAXN];\n\nint n, m, q;\n\nvoid Update(Node *now) {\n    now->siz = 1;\n    now->siz += now->child[0] ? now->child[0]->siz : 0;\n    now->siz += now->child[1] ? now->child[1]->siz : 0;\n}\n\nvoid Split(Node *now, int k, Node *&t1, Node *&t2) {\n    if (!now) {\n        t1 = t2 = NULL; return;\n    } \n    if (!k) {\n        t1 = NULL; t2 = now; return;\n    }\n    if (k >= now->size) {\n        t1 = now; t2 = NULL; return;\n    }\n    int ls = now->child[0] ? now->child[0]->size : 0;\n    if (ls >= k) {\n        Node *temp;\n        Split(now->child[0], k, t1, temp);\n        t2 = now; t2->child[0] = temp; \n        t2->Update(); return;\n    } else {\n        Node *temp;\n        Split(now->child[1], k - ls - 1, temp, t2);\n        t1 = now; t1->child[1] = temp;\n        t1->Update(); return;\n    }\n}\n\nNode *Merge(Node *a, Node *b) {\n    if (!a) return b;\n    if (!b) return a;\n    if (a->key < b->key) {\n        a->child[1] = Merge(a->child[1], b);\n        Update(a);\n        return a;\n    } else {\n        b->child[0] = Merge(a, b->child[0]);\n        Update(b);\n        return b;\n    }\n}\n\nvoid Insert(Node *x, int k) {\n    Node *t1, *t2;\n    Split(root, k - 1, t1, t2);\n    root = Merge(t1, Merge(x, t2));\n}\n\nstring FindKth(int pos) {\n    Node *lt, *tmp;\n    Split(root, pos - 1, lt, tmp);\n    Node *rt, *midt;\n    Split(tmp, 1, midt, rt);\n    string res = midt->name;\n    root = Merge(lt, Merge(midt, rt));\n    return res;\n}\n\nint main() {\n    cin >> n;\n    string temp;\n//\tfor (int i = 1; i <= n; i++) cin >> (book + i)->name;\n//\tfor (int i = 1; i <= n; i++) Insert(book + i, i);\n    for (int i = 1; i <= n; i++) {\n        cin >> temp;\n        Insert(new Node(temp), i);\n    }\n    cin >> m;\n    int pos;\n    for (int i = 1; i <= m; i++) {\n        cin >> temp >> pos; pos++;\n        Insert(new Node(temp), pos);\n    }\n    cin >> q;\n    for (int i = 1; i <= q; i++) {\n        cin >> pos; pos++;\n        cout << FindKth(pos) << '\\n';\n    }\n    return 0;\n}\n```",
        "postTime": 1547856849,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3850 \u3010[TJOI2007]\u4e66\u67b6\u3011"
    },
    {
        "content": "## \u524d\u7f6e\u829d\u58eb\uff1a\u6811\u72b6\u6570\u7ec4\n\u86e4\uff0c\u4f60\u4e0d\u77e5\u9053\uff1f\u597d\u5427\uff0c\u6253\u4e2a\u677f\u5b50\u5c31\u77e5\u9053\u4e86[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P3374)\n\n------------\n\n\n\u6211\u4eec\u5148\u89c2\u5bdf\u89c2\u5bdf\u6570\u636e,\u53d1\u73b0\u6700\u4e0b\u9762\u7684\u4e66\u63d2\u5165\u7684\u4f4d\u7f6e\u80af\u5b9a\u662f\u5b83\u7684\u76ee\u6807\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5b83\u4e4b\u524d\u4e00\u672c\u653e\u7f6e\u7684\u4f4d\u7f6e\u5462\uff0c\u6211\u4eec\u53d1\u73b0\u80fd\u5f71\u54cd\u5b83\u76ee\u6807\u4f4d\u7f6e\u7684\u53ea\u53ef\u80fd\u662f\u4e4b\u540e\u4e66\u7684\u76ee\u6807\u4f4d\u7f6e\u5728\u5b83\u4e4b\u524d\u7684\u4f1a\u4f7f\u5b83\u5f80\u540e\u632a\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u5728\u5df2\u7ecf\u653e\u5b8c\u4f4d\u7f6e\u4e4b\u540e\u7684\u7a7a\u4f4d\u627e\u4f4d\u7f6e\uff0c\u6240\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e00\u4e0b\u5230\u8fd9\u4e2a\u70b9\u7684\u7a7a\u4f4d\u6570\uff0c\u63d2\u5165\u7684\u65f6\u5019\u4e8c\u5206\u4e00\u4e0b\u4f4d\u7f6e\u770b\u662f\u5426\u80fd\u63d2\u5165\u5373\u53ef\u3002\n\n------------\n\n\u4e0a\u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int N=110000;\nint n,m,k,x,bin[N],ans[N];\nstruct node{\n\tint p,k;\n}d[N];\nstruct node1{\n\tchar s[20];\n}a[N];\nint lowbit(int x){\n\treturn x&-x;\n}\nvoid add(int x,int y){\n\twhile(x<=n+m){\n\t\tbin[x]+=y;\n\t\tx+=lowbit(x);\n\t}\n}\nint sum(int x){\n\tint cnt=0;\n\twhile(x!=0){\n\t\tcnt+=bin[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn cnt;\n}\nint query(int x,int y,int k){\n\tint ans1;\n\twhile(x<=y){\n\t\tint mid=(x+y)>>1;\n\t\tint t=sum(mid);\n\t\tif(t>k)y=mid-1;\n\t\telse if(t<k)x=mid+1;\n\t\telse{ans1=mid;y=mid-1;}\n\t}\n\treturn ans1;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tmemset(bin,0,sizeof bin);\n\tfor(int i=1;i<=n;i++){scanf(\"%s\",a[i].s);d[i].k=i;d[i].p=i;}\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++){scanf(\"%s%d\",a[i+n].s,&k);d[i+n].p=i+n;d[i+n].k=k+1;}\n\tfor(int i=1;i<=n+m;i++)add(i,1);\n\tfor(int i=n+m;i>=1;i--){\n\t\tk=query(1,n+m,d[i].k);\n\t\tans[k]=d[i].p;\n\t\tadd(k,-1);\n\t}\n\tscanf(\"%d\",&k);\n\tfor(int i=1;i<=k;i++){\n\t\tscanf(\"%d\",&x);\n\t\tint t=ans[x+1];\n\t\tfor(int j=0;j<strlen(a[t].s);j++)printf(\"%c\",a[t].s[j]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1558622363,
        "uid": 53333,
        "name": "liuqy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3850 \u3010[TJOI2007]\u4e66\u67b6\u3011"
    },
    {
        "content": "\u5143\u65e6\u653e\u5047\u7684\u524d\u51e0\u4e2a\u5c0f\u65f6\u505a\u7684\n\n\u5728\u6d1b\u8c37\u641c\u5e73\u8861\u6811\u7684\u6807\u7b7e\n\n\u53ea\u505a$STL$\u53ef\u4ee5\u6c34\u7684<(\uffe3\u02c7\uffe3)/\n\n\u7136\u540e\u5c31\u78b0\u5230\u4e86\u8fd9\u4e2a\u9898\n\n\u8fd9\u4e48\u597d\u5199\uff01\n\n\u7136\u540e\u5c31\u6709\u4e86\u4e0b\u9762\u7684\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <complex>\n#include <algorithm>\n#include <climits>\n#include <queue>\n#include <map>\n#include <ctime>\n#include <set>\n#include <vector>\n#include <iomanip>\n#define A 1000010\n#define B 2010\n\nusing namespace std;\ntypedef long long ll;\nvector<string> v;\nint n, m, x;\nchar opt[11];\n\nint main(int argc, char *argv[]) {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%s\", opt);\n        v.push_back(opt);\n    }\n    scanf(\"%d\", &m);\n    while (m--) {\n        scanf(\"%s %d\", opt, &x);\n        v.insert(v.begin() + x, opt);\n    }\n    scanf(\"%d\", &m);\n    while (m--) {\n        scanf(\"%d\", &x);\n        string s = v[x];\n        printf(\"%s\\n\", s.c_str());\n    }\n    return 0;\n}\n```\n\u5f53\u7136\u8fd9\u662f\u6700\u540e\u6362\u4e86\u8f93\u5165\u8f93\u51fa\u7684\n\n\u7136\u540e\u5c31$T$\u4e86\u4e03\u4e2a\n\n\u5f88\u61f5\u903c\n\n\u6211\u8fd9\u4e2a\u590d\u6742\u5ea6\u81f3\u4e8e\uff1f\uff1f\uff1f\n\n$vector$\u5957$string$\u6709\u591a\u6162\uff1f\uff1f\uff1f\n\n\u61c2\u7684\u8bf7\u544a\u8bc9\u6211(*-\u03c9-)\n\n\u9042\u53bb\u770b\u9898\u89e3\uff08PiCaHor\u7684\uff09\n\n\u4e5f\u5f88\u5999\u554a\n\n\u6015\u6570\u7ec4\u5bfb\u5740\u6162\u5f00\u6b63\u597d\u7684\u6570\u7ec4\uff08\u8fd9\u91cc\u7684\u6b63\u597d\u662f$n+m$\uff09\n\n\u53c8\u6709\u4e86\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u4e5f\u5c31\u662f\u4ed6\u8bf4\u7684\u6570\u7ec4\u7248\n\n\u4e00\u5b9a\u8981\u719f\u6089$STL$\u4e2d\u5404\u79cd\u51fd\u6570\n\n\u901a\u8fc7\u8fed\u4ee3\u5668\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u548c\u6307\u5b9a\u4f4d\u7f6e\u5220\u9664\n\n$T$\u6015\u4e86\uff0c\u4e0d\u6562$cin$ $cout$\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <complex>\n#include <algorithm>\n#include <climits>\n#include <queue>\n#include <map>\n#include <ctime>\n#include <set>\n#include <vector>\n#include <iomanip>\n#define A 100010\n#define B 2010\n\nusing namespace std;\ntypedef long long ll;\nvector<int> v;\nstring tmp[A];\nint n, m, x, cnt;\nchar opt[12];\n\nint main(int argc, char *argv[]) {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%s\", opt);\n        tmp[++cnt] = opt;\n        v.push_back(cnt);\n    }\n    scanf(\"%d\", &m);\n    while (m--) {\n        scanf(\"%s %d\", opt, &x);\n        tmp[++cnt] = opt;\n        v.insert(v.begin() + x, cnt);\n    }\n    scanf(\"%d\", &m);\n    while (m--) {\n        scanf(\"%d\", &x);\n        string s = tmp[v[x]];\n        printf(\"%s\\n\", s.c_str());\n    }\n    return 0;\n}\n```",
        "postTime": 1546419272,
        "uid": 78064,
        "name": "\u826f\u6708\u6faa\u4e8c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3850 \u3010[TJOI2007]\u4e66\u67b6\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053fhq_Treap(fhq,\u4e0d\u662ffhp,\u624b\u6b8b\u515a,\u611f\u8c22\u63d0\u9192)\u7684\u9898, \u6211\u53d1\u73b0\u9898\u89e3\u91cc\u90fd\u4e0d\u662f\u6309\u7167lazy\u6807\u8bb0\u5f80\u4e0b\u4f20\u7684, \u6211\u4e0b\u610f\u8bc6\u7684\u5199\u7684\u662f\u7528lazy\u7684\u6807\u8bb0\u53bb\u4fee\u6539rank\u7684\u503c, \u6bcf\u6b21\u5728x\u5904\u653e\u4e00\u672c\u4e66,x\u5230\u6700\u540e\u7684\u4e66\u7684rank\u7684\u6392\u540d\u90fd\u4f1a+1 \u6240\u4ee5\u6211\u7684\u67e5\u627e\u5b8c\u5168\u53ef\u4ee5\u6309\u7167\u503crnk\u6765\u67e5\u627e,\u6bcf\u6b21\u63d2\u5165\u4e00\u672c\u4e66\u5c31\u4fee\u6539lazy\u6807\u8bb0\n```cpp\n#include <bits/stdc++.h>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <ext/pb_ds/assoc_container.hpp>\n\n#define eps 1e-9\n#define endl '\\n'\n#define gcd __gcd\n#define ll long long\n#define LL long long\n#define IDX(x) x - 'A'\n#define idx(x) x - 'a'\n#define idz(x) x - '0'\n#define ld long double\n#define lowebit(x) x&(-x)\n#define rint register int\n#define Len(x) (int)(x).size()\n#define all(s) (s).begin(), (s).end()\nusing namespace std;\nstruct node\n{\n    int l, r, lazy, rnd, sie, rnk;\n    string val;\n}tr[110000];\nmt19937 rnd(116551);\nint root, tot;\ninline int newnode(string val, int rnk)\n{\n    int now = ++ tot;\n    tr[now].val = val;\n    tr[now].sie = 1;\n    tr[now].rnd = rnd();\n    tr[now].rnk = rnk;\n    return now;\n}\ninline void update(int now)\n{\n    tr[now].sie = tr[tr[now].l].sie + tr[tr[now].r].sie + 1;\n}\ninline void updown(int now) // \u4e0b\u653elazy\u6807\u8bb0\n{\n    if(tr[now].lazy)\n    {\n        tr[tr[now].l].rnk += tr[now].lazy;\n        tr[tr[now].r].rnk += tr[now].lazy;\n        tr[tr[now].l].lazy += tr[now].lazy;\n        tr[tr[now].r].lazy += tr[now].lazy;\n        tr[now].lazy = 0;\n    }\n}\nvoid split(int now, int val, int& x, int& y)\n{\n    if(!now) x = y = 0;\n    else\n    {\n        updown(now); // \u5728\u6267\u884c\u5206\u88c2\u64cd\u4f5c\u524d\u4e00\u5b9a\u8981\u4e0b\u653elazy,\u56e0\u4e3a\u62c6\u5206\u4f1a\u7834\u4f1a\u4e00\u68f5\u6811,\u6240\u4ee5\u5fc5\u987b\u9898\u524d\u5c06lazy\u6807\u8bb0\u4e0b\u653e,\u5426\u5219\u5c31\u4f1a\u9519\n        if(tr[now].rnk < val)\n        {\n            x = now;\n            split(tr[now].r, val, tr[now].r, y);\n        }\n        else\n        {\n            y = now;\n            split(tr[now].l, val, x, tr[now].l);\n        }\n        update(now);\n    }\n}\nint Merge(int x, int y)\n{\n    if(!x || !y) return x + y;\n    if(tr[x].rnd < tr[y].rnd)\n    {\n        updown(x);// \u540c\u7406\u5728\u5408\u5e76\u524d\u4e5f\u4e00\u5b9a\u8981\u4e0b\u653elazy\u6807\u8bb0\n        tr[x].r = Merge(tr[x].r, y);\n        update(x);\n        return x;\n    }\n    else\n    {\n        updown(y);\n        tr[y].l = Merge(x, tr[y].l);\n        update(y);\n        return y;\n    }\n}\nint32_t main()\n{\n\tios_base::sync_with_stdio(false);\n    cin.tie(0); cout.tie(0);\n    clock_t c1ockck = clock();\n    int n; cin >> n;\n    string s;\n    for(int i = 0 ; i < n ; i ++)\n    {\n        cin >> s;\n        root = Merge( root ,newnode(s, i)); //\u521d\u59cb\u503c\u6309\u7167\u6700\u521d\u7ed9\u7684\u987a\u5e8f\u63d2\u5165, \u6392\u540d\u4e3ai\n    }\n    cin >> n;\n    int rnk;\n    int x, y, z;\n    for(int i = 1 ; i <= n ; i ++)\n    {\n        cin >> s >> rnk;\n        split(root, rnk, x, y);//\u5c06\u4ee5root\u4e3a\u6839\u7684\u4e00\u68f5\u6811\u6309\u7167rank\u5206\u88c2\u6210x\u548cy, \u4ee5y\u4e3a\u6839\u7684\u6811\u7684\u6392\u540d\u90fd\u662f>= rank\u7684, \u6240\u4ee5\u4ee5y\u4e3a\u6839\u7684\u6811\u8981rank\u90fd\u8981+1\n        tr[y].rnk += 1;\n        tr[y].lazy += 1;//\u9632\u6b62TLE\n        x = Merge(x, newnode(s, rnk));//\u6309\u7167rank\u5148\u548cx\u5408\u5e76,\u5148\u548cy\u5408\u5e76\u4e5f\u884c\n        root = Merge(x, y);\n    }\n    cin >> n;\n    for(int i = 1 ; i <= n ; i ++)\n    {\n        cin >> rnk;\n        split(root, rnk, x, y);\n        split(y, rnk + 1, y, z);//\u62c6\u5206\u6210\u4e09\u68f5\u6811, rank< rnk\u7684x, rank==rnk\u7684y\u548crank>rnk\u7684z\n        cout << tr[y].val << endl;//\u76f4\u63a5\u8f93\u51fa\u6839y\u7684\u503c\u5c31\u597d\n        root = Merge(Merge(x, y), z);//\u4e0d\u80fd\u5fd8\u8bb0\u5408\u5e76\u8fd9\u4e9b\u6811\n    }\n    cerr << \"Time:\" << clock() - c1ockck << \"ms\" <<endl;//\u4ec0\u4e48\u90fd\u6ca1\u6709\u7528\u7684\u4e1c\u897f\n    /**srO**/return 0;/**Orz**/\n}\n\n```\n",
        "postTime": 1576635338,
        "uid": 132994,
        "name": "lzx1999",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P3850 \u3010[TJOI2007]\u4e66\u67b6\u3011"
    },
    {
        "content": "## \u601d\u8def\n\u9996\u5148\u8fd9\u662f\u4e00\u4e2a\u5e73\u8861\u6811\u88f8\u9898\uff0c\u5f88\u5bb9\u6613\u770b\u51fa\u6765\u3002\n\n\u4f46\u8fd9\u4e2a\u6570\u636e\u8303\u56f4\u8c8c\u4f3c$\\to(n\\sqrt{n})$\u548c$\\to(n\\log{n})$\u90fd\u53ef\u4ee5\u8dd1\u3002\n\n\u4e8e\u662f\u89c9\u5f97\u5199\u4e2a\u5e73\u8861\u6811\u592a\u9ebb\u70e6\u4e86\uff0c\u5199\u4e86\u5206\u5757\uff0c\u601d\u8def\u5e76\u4e0d\u96be\u60f3\n\n\u968f\u673a\u6570\u636e\u53ea\u9700\u8981$vector$\u4e71\u641e\u4e00\u6ce2,\u63d2\u5165\u5747\u644a\u4f9d\u7136\u662f$O(\\sqrt {n})$\u3002\n\n\u4f46\u5982\u679c\u6570\u636e\u4e0d\u968f\u673a\uff0c\u90a3\u4e48\u4e00\u4e2a\u5757\u4e5f\u8bb8\u4f1a\u5927\u5927\u8d85\u8fc7$\\sqrt {n}$\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u91cd\u5efa\u64cd\u4f5c\uff0c\u6bcf\u6b21\u91cd\u5efa$O(n)$\uff0c\u91cd\u5efa\u6700\u591a$\\sqrt {n}$\u6b21\n\n\u4f46\u662f\u6211WA\u4e86\u4e00\u4e07\u53d1\u3002\u6211\u5f88\u4e0d\u5f00\u5fc3\uff0c\u60f3\u4e86\u5f88\u4e45\uff0c\u505a\u4e86\u5927\u80c6\u7684\u731c\u6d4b\uff0c7\uff0c8\u70b9\u6709\u8bef\uff0c\u7136\u540e\u5728\u67e5\u8be2\u63d2\u5165\u4e2d$min(x+1,id-1)$\u7136\u540e\u8fc7\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5176\u5b9e\u6570\u636e\u5e76\u672a\u4fdd\u8bc1\u6bcf\u6b21\u63d2\u5165\u7684\u4f4d\u7f6e\u5747\u4e0d\u8d85\u8fc7\u5f53\u65f6\u4e66\u67b6\u4e0a\u4e66\u7684\u6570\u91cf\u3002\n\n\u6240\u4ee5\u8fd9\u4e2a\u5206\u5757\u5f00$O2$\u5c45\u7136\u8dd1\u4e86\u7b2c\u4e00\u3002\u8fd9\u8db3\u4ee5\u8bc1\u660e\u5e73\u8861\u6811\u5e38\u6570\u4e4b\u5927\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5199\u5206\u5757\u5462\uff1f~~\u55b5\u55b5\u55b5~~\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=2e5+1000,md=400+10;\nvector<int>v[md];\nint a[maxn];\nchar b[maxn][10+5];\nint n,m,q,nuit,tot,bl,id;\nvoid pre(){\n    scanf(\"%d\",&n);\n    int bl=sqrt(n);\n    for(int i=1;i<=n;i++){\n    \tscanf(\"%s\",b[++id]);\n        v[(i-1)/bl+1].push_back(id);\n    }\n    nuit=(n-1)/bl+1;\n}\nvoid rebuild(){\n    int cnt=0;\n    for(int i=1;i<=nuit;i++){\n        for(vector<int>::iterator j=v[i].begin();j!=v[i].end();j++)\n        a[++cnt]=*j;\n        v[i].clear();\n    }\n    int blo=sqrt(cnt);\n    for(int i=1;i<=cnt;i++)\n     v[(i-1)/blo+1].push_back(a[i]);\n    nuit=(cnt-1)/blo+1;\n}\npair<int,int> query(int rk){\n    int x=1;\n    while(rk>v[x].size())\n\trk-=v[x].size(),x++;\n    return make_pair(x,rk-1);\n}\nvoid insert(int s,int x){\n    pair<int,int> t=query(x);\n    v[t.first].insert(v[t.first].begin()+t.second,s);\n    if(v[t.first].size()>bl*20)rebuild();\n}\nvoid work(){\n    scanf(\"%d\",&m);\n    bl=max(bl,(int)sqrt(m));\n    for(int i=1;i<=m;i++){\n       scanf(\"%s\",b[++id]);\n       int x;\n       scanf(\"%d\",&x);\n       insert(id,min(x+1,id-1));\n    }\n    scanf(\"%d\",&q);\n    for(int i=1;i<=q;i++){\n        int x;\n        scanf(\"%d\",&x);\n        pair<int,int> t=query(min(id,x+1));\n        printf(\"%s\\n\",b[v[t.first][t.second]]);\n    }\n}\nint main(){\n    pre();\n    work();\n    return 0;\n}\n```\n",
        "postTime": 1563535866,
        "uid": 58707,
        "name": "Edward_Elric",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3850 \u3010[TJOI2007]\u4e66\u67b6\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u6307\u9488Splay\n\n\u9898\u89e3\u539f\u6709\u7684\u90a3\u4efdSplay\u4ee3\u7801\u521d\u59cb\u5efa\u6811\u662fn log n\u63d2\u5165\uff0c\u7ef4\u62a4\u201c\u6743\u503c\u7684\u5de6\u5c0f\u53f3\u5927\u201d\n\n\u8fd9\u4efd\u4ee3\u7801\u91c7\u7528O(n)\u5efa\u6811\uff0c\u5e73\u8861\u6811\u7ef4\u62a4\u5e8f\u5217\uff0c\u5176\u5b9e\u8fd9\u6837\u624d\u662fSplay\u5b9e\u73b0\u8fd9\u79cd\u9898\u578b\u7684\u6b63\u7edf\u505a\u6cd5\n\n\u82e5\u5f53\u524d\u8981\u5728pos\u4f4d\u7f6e\u524d\u63d2\u5165\uff0c\u4ee4A\u4e3apos\u4f4d\u7f6e\u7684\u8282\u70b9\uff0cB\u4e3apos\u4f4d\u7f6e\u524d\u4e00\u4e2a\u7684\u8282\u70b9\n\n\u5148\u628aB splay\u5230\u6839\uff0c\u8fd9\u6837\u6839\u7684\u5de6\u5b50\u6811\u4fbf\u662f\u533a\u95f4[pos,end]\n\n\u518d\u5c06A splay\u5230\u6839\u7684\u53f3\u513f\u5b50\uff0c\u8fd9\u6837A\u7684\u53f3\u5b50\u6811\u4fbf\u662f\u533a\u95f4[pos+1,end]\uff0cA\u6ca1\u6709\u5de6\u5b50\u6811\uff0c\u4fbf\u53ef\u4ee5\u628a\u8981\u63d2\u5165\u7684\u8282\u70b9\u63a5\u5728A\u7684\u5de6\u513f\u5b50\u5904\n```cpp\n#include<cstdio>\n#include<string>\n#include<iostream>\nusing std::cin;\nusing std::cout;\nusing std::endl;\nusing std::string;\ntemplate<class type>inline void read(type &in)\n{\n\tin=0;char ch=getchar();short fh=1;\n\twhile (ch<48||ch>57)fh=ch=='-'?-1:fh,ch=getchar();\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+ch-48,ch=getchar();\n\tin*=fh;\n}\nconst int N=210,M=1e5+10;\nint n,m,q;\nstring book[N];\nclass Splay\n{\n\tprivate:\n\t\tstruct tree\n\t\t{\n\t\t\tint size;\n\t\t\tstring key;\n\t\t\ttree *fa,*son[2];\n\t\t\tinline void pushup()\n\t\t\t{\n\t\t\t\tsize=son[0]->size+son[1]->size+1;\n\t\t\t}\n\t\t\tinline bool identity()\n\t\t\t{\n\t\t\t\treturn fa->son[1]==this;\n\t\t\t}\n\t\t};\n\tpublic:\n\t\ttree *null,*root;\n\tprotected:\n\t\ttree memory_pool[N+M],*tail;\n\t\tinline void init()\n\t\t{\n\t\t\ttail=memory_pool;null=tail++;\n\t\t\tnull->size=0;null->key=\"\";\n\t\t\tnull->son[0]=null->fa=null->son[1]=null;\n\t\t\troot=null;\n\t\t}\n\t\tinline tree *newtree(string key)\n\t\t{\n\t\t\ttree *p=tail++;\n\t\t\tp->key=key;p->size=1;\n\t\t\tp->son[0]=p->fa=p->son[1]=null;\n\t\t\treturn p;\n\t\t}\n\t\tinline void connect(tree *p,tree *fa,bool which)\n\t\t{\n\t\t\tif (p!=null)p->fa=fa;\n\t\t\tif (fa!=null)fa->son[which]=p,fa->pushup();\n\t\t}\n\t\tinline void rotate(tree *p)\n\t\t{\n\t\t\ttree *fa=p->fa;\n\t\t\tbool id=p->identity();\n\t\t\tconnect(p,fa->fa,fa->identity());\n\t\t\tconnect(p->son[id^1],fa,id);\n\t\t\tconnect(fa,p,id^1);\n\t\t}\n\t\tinline void splay(tree *p,tree *goal)\n\t\t{\n\t\t\tfor (tree *fa;(fa=p->fa)!=goal;rotate(p))\n\t\t\t\tif (fa->fa!=goal)\n\t\t\t\t\trotate(p->identity()^fa->identity()?p:fa);\n\t\t\tif (goal==null)root=p;\n\t\t}\n\t\tinline tree *findrank(int ranking)\n\t\t{\n\t\t\tranking++;tree *now=root;\n\t\t\twhile (1)\n\t\t\t\tif (ranking<=now->son[0]->size)now=now->son[0];\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tranking-=now->son[0]->size+1;\n\t\t\t\t\tif (!ranking)return now;\n\t\t\t\t\tnow=now->son[1];\n\t\t\t\t}\n\t\t}\n\t\tinline tree *split(int pos)  //\u5c06\u7b2cpos\u4e2a\u4f4d\u7f6e\u63d0\u53d6\u51fa\u6765\uff0c\u5de6\u513f\u5b50\u7a7a\u51fa\n\t\t{\n\t\t\ttree *pre=findrank(pos-1),*now=findrank(pos);\n\t\t\tsplay(pre,null);splay(now,pre);\n\t\t\treturn now;\n\t\t}\n\tpublic:\n\t\tinline Splay(){init();}\n\t\tinline tree *build(int l,int r,tree *fa) //\u9012\u5f52\u5efa\u6811\n\t\t{\n\t\t\tif (l>r)return null;\n\t\t\tint mid=l+r>>1;\n\t\t\ttree *p=newtree(book[mid]);p->fa=fa;\n\t\t\tif (l==r)return p;\n\t\t\tp->son[0]=build(l,mid-1,p);\n\t\t\tp->son[1]=build(mid+1,r,p);\n\t\t\treturn p->pushup(),p;\n\t\t}\n\t\tinline void insert(int pos,string key)\n\t\t{\n\t\t\ttree *now=newtree(key);\n\t\t\tconnect(now,split(pos),0); //\u628a\u65b0\u5efa\u7684\u8282\u70b9\u63a5\u4e0a\u539f\u6765\u7684pos\u4f4d\u7f6e\u524d\n\t\t\tsplay(now,null);\n\t\t}\n\t\tinline string query(int pos)\n\t\t{\n\t\t\treturn findrank(pos)->key;\n\t\t}\n}S;\nint main()\n{\n\tread(n);\n\tfor (int i=1;i<=n;i++)cin>>book[i];\n\tbook[0]=book[n+1]=\"\";\n\tS.root=S.build(0,n+1,S.null); //\u6dfb\u52a00\u548cn+1\u54e8\u5175\u8282\u70b9\n\tread(m);\n\tstring name;int pos;\n\twhile (m--)cin>>name,read(pos),S.insert(pos+1,name); //\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5c06\u9898\u4e2d\u4f4d\u7f6e\u4ece0\u5f00\u59cb\u7f16\u53f7\u8f6c\u62101\u5f00\u59cb\u7f16\u53f7\n\tread(q);\n\twhile (q--)read(pos),cout<<S.query(pos+1)<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1542891631,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3850 \u3010[TJOI2007]\u4e66\u67b6\u3011"
    }
]