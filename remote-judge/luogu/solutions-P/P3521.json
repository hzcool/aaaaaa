[
    {
        "content": "\n\u6b63\u5982\u524d\u9762\u5927\u4f6c\u4eec\u6240\u8bf4\u7684\uff1a **\u6743\u503c\u7ebf\u6bb5\u6811**\u548c**\u7ebf\u6bb5\u6811\u5408\u5e76**\u3002\n\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff0c\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\u5bf9\u5f53\u524d\u8282\u70b9\u548c\u524d\u9762\u7684\u6240\u6709\u8282\u70b9**\u6ca1\u6709\u5f71\u54cd**\u3002\n\n\u56e0\u4e3a\u8fd9\u662f**\u524d\u5e8f\u904d\u5386**\uff1a\u6839\u8282\u70b9->\u5de6\u5b50\u6811->\u53f3\u5b50\u6811\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u4ea4\u6362\u5de6\u53f3\u5b50\u6811**\u5bf9\u524d\u9762\u7684\u8282\u70b9\u65e0\u5f71\u54cd**\u3002\n\n\u6211\u4eec\u8981\u6c42\u7684\u662f\u9006\u5e8f\u5bf9\u6700\u5c0f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u9006\u5e8f\u5bf9\u6709\u4e09\u79cd\uff1a\n\n+ \u5728\u5de6\u5b50\u6811\u4e2d\u3002\n+ \u5728\u53f3\u5b50\u6811\u4e2d\u3002\n+ \u8de8\u8d8a\u4e86\u5de6\u53f3\u5b50\u6811\u3002\n\n\u6211\u4eec\u6e05\u695a\uff0c\u4ea4\u6362\u5b50\u6811\u53ea\u4f1a\u5bf9**\u7b2c\u4e09\u79cd\u60c5\u51b5**\u4ea7\u751f\u5f71\u54cd\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728**\u5408\u5e76\u7ebf\u6bb5\u6811**\u7684\u8fc7\u7a0b\u4e2d\u7edf\u8ba1\u4ea4\u6362\u5b50\u6811\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570u\u548c\u4e0d\u4ea4\u6362\u5b50\u6811\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570v\uff0c\u53d6 **min(u,v)** \u7d2f\u52a0\u5230\u7b54\u6848\u4e2d\u5c31\u884c\u4e86\u3002\n\n\u73b0\u5728\u7684\u95ee\u9898\u662f\u5982\u4f55\u627e**\u7b2c\u4e09\u79cd\u60c5\u51b5\u4e0b\u7684\u9006\u5e8f\u5bf9**\u3002\n\n\u4e0a\u56fe\uff1a\n\n![](https://i.loli.net/2019/05/13/5cd96945b450241844.png)\n\n\n\u7528p\u8868\u793a\u5de6\u5b50\u6811\uff0cq\u8868\u793a\u53f3\u5b50\u6811\u3002ls\u8868\u793a\u5de6\u5b50\u8282\u70b9\uff0crs\u8868\u793a\u53f3\u5b50\u8282\u70b9\u3002\n\n\n\u5f88\u660e\u663e\uff0c\u5bf9\u4e8e\u9664\u4e86**\u53f6\u8282\u70b9**\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff1a\n\n1. \u5982\u679c\u4e0d\u4ea4\u6362\uff1a $u+=[p.rs].size*[q.ls].size$ \u3002\n2. \u5982\u679c\u4ea4\u6362\uff1a $v+=[p.ls].size*[q.rs].size$\u3002\n\n\u91cd\u70b9\uff1a\u6bcf\u4e00\u6b21\u5408\u5e76\u7ebf\u6bb5\u6811\u65f6\uff0c\u9012\u5f52\u5230\u9664\u4e86\u53f6\u8282\u70b9\u7684\u6240\u6709\u8282\u70b9\uff0c\u90fd\u8981\u7d2f\u52a0\u9006\u5e8f\u5bf9\u4e2a\u6570**u,v**\u3002\n\n\u770b\u56fe\u6a21\u62df\u4e00\u8fb9\u5f88\u5bb9\u6613\u5c31\u660e\u767d\u4e86\u3002\n\n\u6bd4\u5982\uff0c\u9012\u5f52\u5230[1~4]\u8fd9\u4e2a\u8282\u70b9\u65f6\uff0c\u7d2f\u52a0u:\u6211\u4eec\u53ea\u7d2f\u52a0\u4e863\u30014\u5bf91\u30012\u884c\u6210\u7684 $2*2=4$ \u7ec4\u9006\u5e8f\u5bf9\u3002\u4f46\u662f\u7ee7\u7eed\u5411\u4e0b\u9012\u5f52\u5230[3~4]\u65f6\uff0c4\u5bf93\u8fd8\u6709\u4e00\u7ec4\u9006\u5e8f\u5bf9\u3002\n\n**\u56e0\u6b64\uff0c\u9012\u5f52\u5230\u9664\u4e86\u53f6\u8282\u70b9\u7684\u6240\u6709\u8282\u70b9\u65f6\uff0c\u90fd\u8981\u8fdb\u884c\u7d2f\u52a0 u,v \u7684\u64cd\u4f5c**\u3002\n\n\u8bb2\u5b8c\u4e86\u3002\n\n### \u8865\u5145------\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\n\n\u6211\u4eec\u5bf9\u6bcf\u4e2a\u53f6\u8282\u70b9\u90fd\u9700\u8981\u8fdb\u884c\u5efa\u6811\u64cd\u4f5c\uff0c\u8be5\u5efa\u6811\u64cd\u4f5c\u7684\u503c\u57df\u662f $[1,n]$ \uff0c\u800c\u6211\u4eec\u6bcf\u6b21\u5efa\u6811\u90fd\u5f97\u5230\u4e00\u6761\u94fe\uff0c\u8fd9\u6761\u94fe\u7684\u957f\u5ea6\u5c31\u662f $logn$ \uff0c\u56e0\u4e3a\u6709 $logn$ \u5c42\u3002\n\u8003\u8651\u6781\u9650\u60c5\u51b5\uff0c\u6709\u5927\u7ea6 n \u4e2a\u53f6\u8282\u70b9\uff0c\u90a3\u4e48\u603b\u7684\u7a7a\u95f4\u5c31\u662f $nlogn$ \u3002\n\n\u6ce8\u610f\uff1a **\u7ebf\u6bb5\u6811\u5408\u5e76\u4e0d\u9700\u8981\u65b0\u5f00\u8282\u70b9**\u3002\n\n### \u901a\u4fd7\u6613\u61c2\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int N=2e5+5;\nint n,top;//top\uff1a\u521b\u5efa\u8282\u70b9\u4e2a\u6570 \nll ans,u,v;//u,v\uff1a\u9006\u5e8f\u5bf9\u4e2a\u6570 \nstruct Tree{\n\tint ls,rs,size;\n}da[22*N];//N*logN\u7684\u7a7a\u95f4 \n\nint in(){//\u5feb\u8bfb \n\tint x=0;char ch=getchar();\n\twhile(ch>'9'||ch<'0') ch=getchar();\n\twhile(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn x;\n}\n\nint update(int l,int r,int val){//\u521b\u5efa\u6743\u503c\u7ebf\u6bb5\u6811 \n\tint pos=++top;\n\tda[pos].size++;\n\tif(l==r) return pos;\n\tint mid=(l+r)>>1;\n\tif(val<=mid) da[pos].ls=update(l,mid,val);\n\telse da[pos].rs=update(mid+1,r,val);\n\treturn pos;\n}\n\nint merge(int p,int q,int l,int r){//\u5408\u5e76\u7ebf\u6bb5\u6811 \n\tif(!q||!p) return (!p)?q:p;//\u5982\u679c\u6709\u8282\u70b9\u4e3a\u7a7a\uff0c\u8fd4\u56de\u53e6\u4e00\u4e2a\u8282\u70b9 \n\tif(l==r){ da[p].size+=da[q].size; return p; }//\u53f6\u8282\u70b9\uff0c\u5408\u5e76\uff0c\u8fd4\u56de \n\tu+=(ll)da[da[p].rs].size*da[da[q].ls].size;//\u4ea4\u6362\u524d \n\tv+=(ll)da[da[p].ls].size*da[da[q].rs].size;//\u4ea4\u6362\u540e \n\tint mid=(l+r)>>1;\n\tda[p].ls=merge(da[p].ls,da[q].ls,l,mid);//\u7ee7\u7eed\u5408\u5e76\u5de6\u5b50\u8282\u70b9 \n\tda[p].rs=merge(da[p].rs,da[q].rs,mid+1,r);//\u53f3\u5b50\u8282\u70b9 \n\tda[p].size=da[da[p].ls].size+da[da[p].rs].size;//\u91cd\u7f6e\u66f4\u65b0\u5f53\u524d\u8282\u70b9 \n\treturn p;\n} \n\nint dfs(){\n\tint pos,val=in();\n\tif(val==0){//\u4e0d\u662f\u53f6\u8282\u70b9 \n\t\tint ls=dfs(),rs=dfs();//ls:\u5de6\u5b50\u6811\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\uff0crs\u540c\u7406 \n\t\tu=0;v=0;//\u8bb0\u5f97\u6bcf\u6b21\u6e05\u96f6 \n\t\tpos=merge(ls,rs,1,n);//pos\uff1a\u5408\u5e76\u540e\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9 \n\t\tans+=min(u,v);//\u7d2f\u52a0\u7b54\u6848 \n\t}\n\telse pos=update(1,n,val);//\u53f6\u8282\u70b9\uff0c\u5efa\u6811 \n\treturn pos;//\u8fd4\u56de\u8fd9\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9 \n}\n\nint main(){\n\tn=in();\n\tdfs();\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1557752255,
        "uid": 123159,
        "name": "IC_QQQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3521 \u3010[POI2011]ROT-Tree Rotations\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u91c7\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u89e3\u6cd5\u3002\n\n------------\n\n\u9996\u5148\u8bb2\u4e00\u4e0b\u89e3\u6cd5\u4e2d\u51fa\u73b0\u7684\u4e24\u4e2a\u6982\u5ff5\uff1a\u6743\u503c\u7ebf\u6bb5\u6811\u4e0e\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\u6240\u8c13\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u7ef4\u62a4\u7684\u4fe1\u606f\u53cd\u8fc7\u6765\u7684\u666e\u901a\u7ebf\u6bb5\u6811\uff0c\u6211\u4e2a\u4eba\u8ba4\u4e3a\u503c\u57df\u7ebf\u6bb5\u6811\u8fd9\u4e2a\u540d\u5b57\u5176\u5b9e\u8981\u51c6\u786e\u4e00\u4e9b\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5c06\u5e8f\u5217$1,1,2,3,4,4,4,5,6,6$\u4e2d\u7684\u6570\u4f9d\u6b21\u63d2\u5165\uff0c\u90a3\u4e48\u63d2\u5165\u5b8c\u6210\u4e4b\u540e\u7684\u6548\u679c\u56fe\u5927\u6982\u662f\u4e0b\u9762\u8fd9\u6837\u7684\uff1a\n\n![](https://i.loli.net/2018/10/21/5bcbf9c356256.png)\n\n\uff08\u5176\u4e2d\u7ea2\u8272\u4e3a\u8282\u70b9\u7684\u503c\uff09\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u503c\u662f\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u6570\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n\u5728\u5b9e\u73b0\u6743\u503c\u7ebf\u6bb5\u6811\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u91c7\u7528\u52a8\u6001\u5f00\u70b9\u7684\u65b9\u5f0f\uff0c\u4e5f\u5c31\u662f\u4e0d\u521b\u5efa\u65e0\u5173\u7684\u8282\u70b9\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u79bb\u6563\u5316\u6570\u636e\uff0c\u5426\u5219\u5fc5\u7136\u4f1a\u7a7a\u95f4\u8d85\u9650\u3002\n\n\u800c\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u539f\u7406\u5219\u662f\u57fa\u4e8e\u7ebf\u6bb5\u6811\u8f83\u4e3a\u7a33\u5b9a\u7684\u7ed3\u6784\u3002\n\n\u5728\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4e24\u9897\u7ebf\u6bb5\u6811\u5bf9\u5e94\u4f4d\u7f6e\u7684\u8282\u70b9\u7684\u503c\u5408\u5728\u4e00\u8d77\uff0c\u521b\u5efa\u4e00\u9897\u65b0\u7684\u7ebf\u6bb5\u6811\u3002\n\n\u8fc7\u7a0b\u5927\u81f4\u5982\u4e0b\uff1a\n\n![](https://i.loli.net/2018/10/21/5bcbfaafa537c.png)\n\n------------\n\n\u8fd9\u9053\u9898\u8ba9\u6211\u4eec\u6c42\u51fa\u9006\u5e8f\u5bf9\u4e2a\u6570\u6700\u5c0f\u503c\uff0c\u5e76\u4e14\u5141\u8bb8\u6211\u4eec\u968f\u610f\u4ea4\u6362\u4e00\u4e2a\u8282\u70b9\u7684\u4e24\u68f5\u5b50\u6811\u3002\n\n\u8003\u8651\u4e00\u4e2a\u4efb\u610f\u7684\u8282\u70b9\uff0c\u5b83\u7684\u5b50\u6811\u5148\u5e8f\u904d\u5386\u540e\u7684\u9006\u5e8f\u5bf9\u663e\u7136\u53ea\u6709\u4e09\u79cd\u7ec4\u6210\uff1a\n\n1. \u5de6\u5b50\u6811\u4e2d\n\n2. \u53f3\u5b50\u6811\u4e2d\n\n3. \u8de8\u8d8a\u5de6\u53f3\u5b50\u6811\n\n\u5bf9\u5b50\u6811\u7684\u4ea4\u6362\u663e\u7136\u4e0d\u4f1a\u5f71\u54cd\u7b2c1,2\u7c7b\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97\u51fa\u7b2c\u4e09\u7c7b\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u81f3\u4e8e\u8ba1\u7b97\u5219\u6ca1\u6709\u4ec0\u4e48\u96be\u5ea6\u3002\u7531\u4e8e\u6211\u4eec\u7ef4\u62a4\u7684\u662f\u503c\u57df\uff0c\u56e0\u6b64\u5de6\u513f\u5b50\u5fc5\u5b9a\u6bd4\u53f3\u513f\u5b50\u5927\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u7528\u5de6\u513f\u5b50\u5927\u5c0f\u4e58\u4ee5\u53f3\u513f\u5b50\u5927\u5c0f\u5373\u53ef\u5f97\u51fa\u4ea4\u6362\u524d\u9006\u5e8f\u5bf9\u4e2a\u6570\u3002\u4ea4\u6362\u540e\u540c\u7406\u4e4b\u3002\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u80fd\u591f\u8fd9\u6837\u8ba1\u7b97\u662f\u56e0\u4e3a\u65e0\u8bba\u5de6\u53f3\u513f\u5b50\u600e\u4e48\u4ea4\u6362\uff0c\u5f71\u54cd\u7684\u90fd\u53ea\u6709\u5f53\u524d\u90e8\u5206\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u6df1\u5ea6\u66f4\u6d45\u7684\u8282\u70b9\u7684\u503c\u3002\n\n\u53e6\uff1a\u8fd9\u9053\u9898\u5904\u7406\u8f93\u5165\u5341\u5206\u7a92\u606f\uff0c\u53ef\u53c2\u8003\u697c\u4e0b\u5199\u6cd5\u3002\n\n------------\n\nAC\u4ee3\u7801\u5982\u4e0b\uff1a\n\n`509ms 57236kb`\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nnamespace StandardIO {\n\n\ttemplate<typename T>inline void read (T &x) {\n\t\tx=0;T f=1;char c=getchar();\n\t\tfor (; c<'0'||c>'9'; c=getchar()) if (c=='-') f=-1;\n\t\tfor (; c>='0'&&c<='9'; c=getchar()) x=x*10+c-'0';\n\t\tx*=f;\n\t}\n\n\ttemplate<typename T>inline void write (T x) {\n\t\tif (x<0) putchar('-'),x*=-1;\n\t\tif (x>=10) write(x/10);\n\t\tputchar(x%10+'0');\n\t}\n\n}\n\nusing namespace StandardIO;\n\nnamespace Solve {\n\t\n\tconst int N=200200;\n\t\n\tint n;\n\tlong long ans,ans1,ans2;\n\tint tot_node;\n\tstruct node {\n\t\tint ls,rs;\n\t\tlong long val;\n\t} tree[N*20];\n\t\n\tvoid update (int l,int r,int v,int &pos) {\n\t\tif (!pos) pos=++tot_node;\n\t\ttree[pos].val++;\n\t\tif (l==r) return;\n\t\tint mid=(l+r)>>1;\n\t\tif (v<=mid) update(l,mid,v,tree[pos].ls);\n\t\telse update(mid+1,r,v,tree[pos].rs);\n\t}\n\tvoid merge (int &x,int y) {\n\t\tif (!x||!y) {\n\t\t\tx=x+y;return;\n\t\t}\n\t\ttree[x].val+=tree[y].val;\n\t\tans1+=(long long)tree[tree[x].rs].val*tree[tree[y].ls].val;\n\t\tans2+=(long long)tree[tree[x].ls].val*tree[tree[y].rs].val;\n\t\tmerge(tree[x].ls,tree[y].ls);\n\t\tmerge(tree[x].rs,tree[y].rs);\n\t}\n\tvoid dfs (int &x) {\n\t\tint tmp,ls,rs;x=0;\n\t\tread(tmp);\n\t\tif (!tmp) {\n\t\t\tdfs(ls),dfs(rs);\n\t\t\tans1=ans2=0;\n\t\t\tx=ls,merge(x,rs);\n\t\t\tans+=min(ans1,ans2);\n\t\t} else update(1,n,tmp,x);\n\t}\n\n\tinline void solve () {\n\t\tread(n);\n\t\tint tmp=0;\n\t\tdfs(tmp);\n\t\twrite(ans);\n\t}\n}\n\nusing namespace Solve;\n\nint main () {\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tsolve();\n}\n\n```",
        "postTime": 1540095033,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3521 \u3010[POI2011]ROT-Tree Rotations\u3011"
    },
    {
        "content": "~~\u8f93\u5165\u683c\u5f0f\u771f\u7684\u6bd2\u7624~~\n\n\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\u6211\u4eec\u5148\u5bf9\u6bcf\u4e00\u4e2a\u53f6\u5b50\u5efa\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5e76\u628a\u5b83\u81ea\u5df1\u7684\u6743\u503c\u63d2\u5165\u5230\u91cc\u9762\u3002\u7136\u540e\u4e0d\u65ad\u7684\u5411\u4e0a\u5408\u5e76\u3002\n\n\u6211\u4eec\u4e0d\u59a8\u8bbe**\u539f\u6811**\u4e2d\u5f53\u524d\u8282\u70b9\u4e3a $u$\uff0c\u7238\u7238 $fa$\uff0c\u5de6\u513f\u5b50 $lc$\uff0c\u53f3\u513f\u5b50 $rc$\uff0c\u90a3\u4e48\u663e\u7136\u8fd9\u68f5\u6811\u4e2d\u7684\u9006\u5e8f\u5bf9\u5206\u4e3a $3$ \u4e2a\u90e8\u5206\uff1a$lc$ \u91cc\u7684\u9006\u5e8f\u5bf9\uff0c$rc$ \u91cc\u7684\u9006\u5e8f\u5bf9\u548c\u8de8 $lc$ \u548c $rc$ \u7684\u9006\u5e8f\u5bf9\u3002\n\n\u800c\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u628a $lc$ \u91cc\u7684\u9006\u5e8f\u5bf9\u548c $rc$ \u91cc\u7684\u9006\u5e8f\u5bf9\u7b97\u597d\u4e86\uff0c\u73b0\u5728\u9700\u8981\u6c42\u51fa\u8de8 $lc$ \u548c $rc$ \u7684\u9006\u5e8f\u5bf9\uff0c\u4e5f\u5c31\u662f\u5408\u5e76 $lc$ \u548c $rc$ \u3002\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u65e0\u8bba $lc$ \u5185\u7684\u5b50\u6811\u600e\u4e48\u6362\u6765\u6362\u53bb\uff0c$rc$\u5185\u7684\u5b50\u6811\u600e\u4e48\u6362\u6765\u6362\u53bb\uff0c\u90fd\u662f\u5bf9\u8de8 $lc$ \u548c $rc$ \u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\u6ca1\u6709\u5f71\u54cd\u7684\u3002\n\n\u540c\u7406\uff0c\u65e0\u8bba\u6211\u4eec\u4ea4\u4e0d\u4ea4\u6362 $lc$ \u548c $rc$\uff0c\u5bf9 $fa$ \u90a3\u4e00\u5c42\u7684\u5408\u5e76\u4e5f\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002\n\n\u6240\u4ee5\u5bf9\u4e8e\u8de8 $lc$ \u548c $rc$ \u7684\u9006\u5e8f\u5bf9\uff0c\u6211\u4eec\u5206\u4ea4\u6362 $lc$\u3001$rc$ \u548c\u4e0d\u4ea4\u6362\u7684\u60c5\u51b5\u7b97\u51fa\u4e24\u79cd\u60c5\u51b5\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\uff0c\u518d\u53d6\u8f83\u5c0f\u503c\u5c31\u597d\u4e86\u3002\n\n\u6211\u4eec\u904d\u5386\u4e24\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u6765\u66b4\u529b\u5408\u5e76\u4e24\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e $lc$ \u548c $rc$ **\u6743\u503c\u7ebf\u6bb5\u6811**\u4e2d\u540c\u4e00\u4f4d\u7f6e\u7684\u70b9 $a$\u3001$b$\uff0c\u82e5\u4e0d\u4ea4\u6362 $lc$ \u548c $rc$\uff0c\u663e\u7136 $lc$ \u4e2d\u7684\u70b9\u7684\u7f16\u53f7\uff08\u8fd9\u91cc\u7684\u7f16\u53f7\u662f\u6307\u524d\u5e8f\u904d\u5386\u7684\u5148\u540e\u987a\u5e8f\uff09\u80af\u5b9a\u90fd\u5728 $rc$ \u524d\uff0c$a$ \u53f3\u513f\u5b50\u7684\u6743\u503c\u5fc5\u5b9a\u5927\u4e8e $b$ \u5de6\u513f\u5b50\u7684\u6743\u503c\uff0c\u6240\u4ee5 $size[ch[a][1]]*size[ch[b][0]]$ \u5c31\u662f\u8fd9\u4e00\u4f4d\u7f6e\u7684\u7b54\u6848\u4e86\u3002\n\n\u540c\u7406\uff0c\u5982\u679c\u4ea4\u6362 $lc$ \u548c $rc$\uff0c\u8fd9\u4e00\u4f4d\u7f6e\u7684\u7b54\u6848\u5c31\u662f $size[ch[a][0]]*size[ch[b][1]]$\u3002\n\n\u6700\u540e\u5408\u5e76\u5b8c\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n\n#define N 200010\n#define int long long\n\nusing namespace std;\n\nstruct Tree\n{\n\tint ch[2],size;\n}t[N<<5];\n\nint n,tot,ans,num1,num2;\n\nint update(int l,int r,int val)\n{\n\tint u=++tot;\n\tt[u].size=1;\n\tif(l==r) return u;\n\tint mid=(l+r)>>1;\n\tif(val<=mid) t[u].ch[0]=update(l,mid,val);\n\telse t[u].ch[1]=update(mid+1,r,val);\n\treturn u;\n}\n\nint merge(int a,int b,int l,int r)//\u628ab\u5408\u5e76\u81f3a\n{\n\tif(!a||!b) return a+b;\n\tif(l==r)\n\t{\n\t\tt[a].size+=t[b].size;\n\t\treturn a;\n\t}\n\tnum1+=t[t[a].ch[1]].size*t[t[b].ch[0]].size;//\u4e0d\u4ea4\u6362\u7684\u7b54\u6848\n\tnum2+=t[t[b].ch[1]].size*t[t[a].ch[0]].size;//\u4ea4\u6362\u540e\u7684\u7b54\u6848\n\tint mid=(l+r)>>1;\n\tt[a].ch[0]=merge(t[a].ch[0],t[b].ch[0],l,mid);\n\tt[a].ch[1]=merge(t[a].ch[1],t[b].ch[1],mid+1,r);\n\tt[a].size+=t[b].size;\n\treturn a;\n}\n\nint dfs()\n{\n\tint u,val;\n\tscanf(\"%lld\",&val);\n\tif(!val)\n\t{\n\t\tint lc=dfs(),rc=dfs();\n\t\tnum1=num2=0;\n\t\tu=merge(lc,rc,1,n);\n\t\tans+=min(num1,num2);//ans\u52a0\u4e0a\u8f83\u5c0f\u503c\n\t}\n\telse u=update(1,n,val);\n\treturn u;\n}\n\nsigned main()\n{\n\tscanf(\"%lld\",&n);\n\tdfs();\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1577499152,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3521 \u3010[POI2011]ROT-Tree Rotations\u3011"
    },
    {
        "content": "\u770b\u5230\u5927\u4f6c\u4eec\u90fd\u5728\u8bf4\u8f93\u5165\u6bd2\u7624\n\n\u4f46\u662f\u56e0\u4e3a\u8f93\u5165\u662f\u4ece\u4e0a\u5f80\u4e0b\u9012\u5f52\u7684\n\n\u5408\u5e76\u591a\u9897\u7ebf\u6bb5\u6811\u4e5f\u662f\u9012\u5f52\u7684 \uff08\u5148\u5408\u5e76\u4e0b\u9762\u7684\u518d\u5f80\u4e0a\uff09\n\n\u6240\u4ee5\u53ef\u4ee5\u8f93\u5165\u7684\u65f6\u5019\u5c31\u6c42\u7b54\u6848\u4e86\n\n\u5927\u6982\u5c31\u662f\n```cpp\nint dfs(){\n\tint x;\n\tscanf(\"%d\",&x);\n\tif(x!=0) return new_node(x);//\u53f6\u5b50\u8282\u70b9\u5c31\u76f4\u63a5\u52a0\u4e00\u4e2a\u70b9\n\treturn merge(dfs(),dfs());//\u4e0d\u7136\u5c31\u9012\u5f52\u5408\u5e76\u4e24\u4e2a\u5b50\u6811\n}\nint main(){\n\tcin>>n;\n\tcout<<tree[dfs()].ans;\n}\n```\n\u7136\u540e\u8865\u5168new_node()\u548cmerge()\u4e24\u4e2a\u51fd\u6570 \u5c31\u6ca1\u4e86\n```cpp\n#include <bits/stdc++.h>\n#define N 50000100\n#define mid ((l+r)>>1)\nusing namespace std;\nint n,nn;\nstruct node{\n\tint lson,rson,sum;\n\tlong long ans;\n}tree[N];\ninline int new_node(int x,int l=1,int r=n){\n\tint k=++nn;\n\ttree[nn].sum=1;\n\tif(l==r) return nn;\n\tif(x<=mid) tree[nn].lson=new_node(x,l,mid);\n\telse tree[nn].rson=new_node(x,mid+1,r);\n\treturn k;\n}\nlong long res0,res1;\ninline int merge(int x,int y,int l=1,int r=n){\n\tif(!y||!x){ res0=res1=0; return x|y; }\n\ttree[x].ans=tree[x].ans+tree[y].ans;\n\tlong long aa=1ll*tree[tree[x].rson].sum*tree[tree[y].lson].sum,bb=1ll*tree[tree[x].lson].sum*tree[tree[y].rson].sum;\n\ttree[x].lson=merge(tree[x].lson,tree[y].lson,l,mid);//\u5408\u5e76\u5de6\u5b50\u6811 \n\taa+=res0; bb+=res1;\n\ttree[x].rson=merge(tree[x].rson,tree[y].rson,mid+1,r);//\u5408\u5e76\u53f3\u5b50\u6811 \n\taa+=res0; bb+=res1;\n\ttree[x].ans+=min(aa,bb);\n\ttree[x].sum=tree[tree[x].lson].sum+tree[tree[x].rson].sum; \n\tres0=aa,res1=bb;\n\treturn x;\n}\ninline int dfs(){\n\tint x;\n\tscanf(\"%d\",&x);\n\tif(x!=0) return new_node(x);\n\treturn merge(dfs(),dfs());\n}\nint main(){\n\tcin>>n;\n\tcout<<tree[dfs()].ans;\n}\n```\n\u5361\u7a7a\u95f4\u5361\u4e86\u597d\u4e45\uff08\u6211\u592a\u83dc\u4e86\u4e0d\u4f1a\u5199\u5185\u5b58\u6c60\n\n",
        "postTime": 1603098734,
        "uid": 48110,
        "name": "\u7f19\u4e91\u5c71\u8f66\u795e",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3521 \u3010[POI2011]ROT-Tree Rotations\u3011"
    },
    {
        "content": "\u6ce8\u610f\u5230\u5982\u679c\u6211\u4eec\u7528\u7c7b\u4f3c cdq \u5206\u6cbb\u7684\u601d\u60f3\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7edf\u8ba1\u201c\u5de6\u5b50\u6811\u7684\u53f6\u5b50\u548c\u53f3\u5b50\u6811\u7684\u53f6\u5b50\u8fdb\u884c\u5339\u914d\u7684\u9006\u5e8f\u5bf9\u6570\u201d\u4ece\u800c\u6c42\u548c\u5f97\u5230\u603b\u4f53\u9006\u5e8f\u5bf9\u6570\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u8282\u70b9\uff0c\u4ed6\u4eec\u5404\u81ea\u7684\u4e24\u4e2a\u5b50\u6811\u4ea4\u4e0d\u4ea4\u6362\u4f4d\u7f6e\u5bf9\u7b54\u6848\u7684\u5f71\u54cd\u662f\u4e92\u76f8\u72ec\u7acb\u7684\u3002\n\n\u6240\u4ee5\u53ea\u9700\u8981\u6c42\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u662f\u5426\u4ea4\u6362\u4f18\u5373\u53ef\u3002\n\n\u8003\u8651\u5728\u6bcf\u4e2a\u53f6\u8282\u70b9\u5f00\u6743\u503c\u7ebf\u6bb5\u6811\u7136\u540e\u5411\u4e0a\u5408\u5e76\uff0c\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5c31\u80fd\u4ee5\u540c\u6837\u7c7b\u4f3c cdq \u5206\u6cbb\u601d\u60f3\u7684\u505a\u6cd5\uff0c\u628a \u9006\u5e8f\u5bf9/\u987a\u5e8f\u5bf9 \u6c42\u51fa\u6765\uff0c\u53d6\u6700\u5c0f\u503c\u52a0\u5165\u5230\u7b54\u6848\u4e2d\u5373\u53ef\u3002\n\n\u5177\u4f53\u6c42\u6cd5\u662f\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u4ece\u4e2d\u95f4\u65ad\u5f00\u9012\u5f52\u7684\u65f6\u5019\uff0c\u7b97\u51fa\u5de6\u533a\u95f4\u548c\u53f3\u533a\u95f4\u5339\u914d\u51fa\u7684\u9006\u5e8f\u5bf9\uff0c\u7136\u540e\u518d\u9012\u5f52\u4e0b\u53bb\u7684\u65f6\u5019\u7b97\u5de6\u533a\u95f4\u548c\u53f3\u533a\u95f4\u5185\u90e8\u7684\u9006\u5e8f\u5bf9\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n\\log n)$\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\ntypedef long long ll;\ntemplate <typename T> T Max(T x, T y) { return x > y ? x : y; }\ntemplate <typename T> T Min(T x, T y) { return x < y ? x : y; }\ntemplate <typename T>\nT &read(T &r) {\n\tr = 0; bool w = 0; char ch = getchar();\n\twhile(ch < '0' || ch > '9') w = ch == '-' ? 1 : 0, ch = getchar();\n\twhile(ch >= '0' && ch <= '9') r = (r << 3) + (r <<1) + (ch ^ 48), ch = getchar();\n\treturn r = w ? -r : r;\n}\n#define ls(x) tree[x].lson\n#define rs(x) tree[x].rson\nconst int N = 3.8e6;\nconst int INF = 0x7fffffff;\nint n, trnt;\nstruct SGT {\n\tint lson, rson, sum;\n}tree[N];\nvoid modify(int &x, int tl, int tr, int pos) {\n\tif(!x)\n\t\tx = ++trnt;\n\t++tree[x].sum;\n\tif(tl == tr) return ;\n\tint mid = (tl + tr) >> 1;\n\tif(pos <= mid) modify(ls(x), tl, mid, pos);\n\telse modify(rs(x), mid+1, tr, pos);\n}\nll s1, s2, ans;\nvoid merge(int &x, int y, int tl, int tr) {\n\tif(!x || !y) {\n\t\tx = x + y;\n\t\treturn ;\n\t}\n\ttree[x].sum += tree[y].sum;\n\tif(tl == tr) return ;\n\ts1 += 1ll * tree[rs(x)].sum * tree[ls(y)].sum;\n\ts2 += 1ll * tree[rs(y)].sum * tree[ls(x)].sum;\n\tint mid = (tl + tr) >> 1;\n\tmerge(ls(x), ls(y), tl, mid);\n\tmerge(rs(x), rs(y), mid+1, tr);\n}\nvoid dfs(int &x) {\n\tint t; read(t);\n\tif(!t) {\n\t\tint lson = 0, rson = 0;\n\t\tdfs(lson);\n\t\tdfs(rson);\n\t\ts1 = 0; s2 = 0;\n\t\tx = lson; merge(x, rson, 1, n);\n\t\tans += Min(s1, s2);\n\t}\n\telse modify(x, 1, n, t);\n}\n#undef ls\n#undef rs\nsigned main() {\n//\tfreopen(\"in.txt\", \"r\", stdin);\n\tread(n); int root = 0;\n\tdfs(root);\n\tprintf(\"%lld\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1625050510,
        "uid": 223298,
        "name": "do_while_true",
        "ccfLevel": 8,
        "title": "\u300c\u9898\u89e3\u300dP3521 [POI2011]ROT-Tree Rotations"
    },
    {
        "content": "# P3521 \u9898\u89e3\n## \u9898\u610f\n\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6240\u6709\u975e\u53f6\u5b50\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b69\u5b50\u3002\u5728\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u4e0a\u6709\u4e00\u4e2a\u6743\u503c(\u6709 $n$ \u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u6ee1\u8db3\u8fd9\u4e9b\u6743\u503c\u4e3a $1 ...... n$ \u7684\u4e00\u4e2a\u6392\u5217)\u3002\u53ef\u4ee5\u4efb\u610f\u4ea4\u6362\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u7684\u5de6\u53f3\u5b69\u5b50\u3002\n\n\u8981\u6c42\u8fdb\u884c\u4ea4\u6362\u4f7f\u6700\u7ec8\u6240\u6709\u53f6\u5b50\u8282\u70b9\u7684\u6743\u503c\u6309\u904d\u5386\u5e8f\u5199\u51fa\u6765\u9006\u5e8f\u5bf9\u4e2a\u6570\u6700\u5c11\u3002\n\n## \u5efa\u6a21\n\u5f88\u663e\u7136\u5185\u90e8\u7ed3\u6784\u4e0d\u4f1a\u5f71\u54cd\u9006\u5e8f\u5bf9\u4e2a\u6570\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u7edf\u8ba1**\u6bcf\u4e2a\u8282\u70b9\u5de6\u53f3\u5b50\u6811\u4e4b\u95f4\u7684\u9006\u5e8f\u5bf9**\u5373\u53ef\uff0c\u4e8e\u662f\uff1a\n\n$$ans=\\sum\\limits_{u=1}^{2n-1}\\text{Count}(x,y)|x \\in \\text{ls}(u),y \\in \\text{rs}(u),a_x>a_y$$\n\n\u5176\u4e2d $\\text{ls}(u),\\text{rs}(u)$ \u5206\u522b\u4ee3\u8868 $u$ \u7684\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u3002  \n\u90a3\u4e48\u5c31\u4ee5\u8f93\u5165\u7684 $dfs$ \u5e8f\u8ba1\u7b97 $u$ \u5373\u53ef\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u89e3\u51b3 $x,y$ \u3002\n\n1. \u66b4\u529b\u679a\u4e3e $x,y$  \n\u590d\u6742\u5ea6 $\\Theta(|\\text{ls}(u)||\\text{rs}(u)|)=\\Theta(n^2)$ \u3002\n\n2. \u5f52\u5e76\u6392\u5e8f  \n\u590d\u6742\u5ea6 $\\Theta(|\\text{ls}(u)|+|\\text{rs}(u)|)=\\Theta(n \\log n)\\ /\\ \\Theta(n^2)$ \uff0c\u56e0\u4e3a\u6811\u7684\u7ed3\u6784\u7ed9\u5b9a\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u5f52\u5e76\u6392\u5e8f\u4e0d\u9000\u5316\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u503c\u57df\u7684\u89d2\u5ea6\u8003\u8651\uff0c**\u5408\u5e76\u5de6\u53f3\u5b50\u6811 $x,y$ \u7684\u8ba1\u6570\u5668\u6570\u7ec4 $C_x,C_y$ \u540c\u6837\u4e5f\u80fd\u7d2f\u8ba1\u9006\u5e8f\u5bf9\u6570**\u3002\n\n\u6b64\u65f6\uff1a\n\n$$ans(u)=\\sum\\limits_{i=1}^nC_x(i) \\times \\sum\\limits_{j=1}^{i-1}C_y(j)$$\n\n$$C_{x+y}(i)=C_x(i)+C_y(i)$$\n\n$C_y(j)$ \u7684\u524d\u7f00\u548c\u53ef\u4ee5\u9884\u8ba1\u7b97\u3002\n\n## \u4f18\u5316\n\n\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u8fd9\u6837\u505a\u590d\u6742\u5ea6\u8fd8\u6ca1\u53d8\u3002  \n\u4e00\u79cd\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u542f\u53d1\u5f0f\u5408\u5e76 $+\\texttt{ BIT}$ \uff0c\u590d\u6742\u5ea6 $\\Theta(n (\\log n)^2)$ \u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5b50\u6811 $u$ \uff0c $C_u$ \u53ea\u6709 $\\text{size}(u)$ \u4e2a\u4f4d\u7f6e\u975e $0$ \uff0c\u5982\u679c\u904d\u5386\u6574\u4e2a\u8ba1\u6570\u5668\u5c31\u5f88\u6d6a\u8d39\u3002  \n\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $u$ \u90fd\u8fdb\u884c\u6807\u51c6\u7684\u79bb\u6563\u5316\u663e\u7136\u975e\u5e38\u4e8f\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u5230**\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811**\u3002\n\n### \u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\n\u5927\u81f4\u7684\u8bf4\u5c31\u662f\u4e00\u6b21\u4e0d\u628a\u6574\u4e2a\u7ebf\u6bb5\u6811\u5efa\u8d77\u6765\uff0c\u800c\u662f\u6839\u636e\u8f93\u5165\u53ea\u5efa\u4e00\u90e8\u5206\u8282\u70b9\uff0c\u5269\u4e0b\u7684\u90a3\u4e9b\u7528\u4e0d\u5230\u7684\u8282\u70b9\u5c31\u5148\u4e0d\u5efa\u3002\u800c\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u5730\u65b9\u5c31\u662f\u8fd9\u6837**\u52a8\u6001\u5f00\u70b9**\u540e $x$ \u7684**\u5de6\u53f3\u513f\u5b50\u7f16\u53f7**\u4e0d\u518d\u662f $2x,2x+1$ \u4e86\uff0c\u9700\u8981\u7528\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u7ec4\u8fdb\u884c\u5b58\u50a8\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u8981\u5728\u539f\u6811\u7684\u6bcf\u4e2a $C_u$ \u4e0a\u5efa\u4e00\u4e2a**\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811**\uff0c\u7236\u7ebf\u6bb5\u6811\u5c31\u662f\u5408\u5e76\u5de6\u53f3\u5b50\u7ebf\u6bb5\u6811\uff0c\u5373\uff1a\n\n$$ans(u)=\\sum\\limits_{i=1}^nsz_x(\\text{rs}(i)) \\times sz_y(\\text{ls}(i))$$\n\n\u5176\u4e2d $i$ \u662f\u6743\u503c\u7ebf\u6bb5\u6811\u8282\u70b9\u7f16\u53f7\uff0c $sz$ \u662f\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u76ee\u6807\u51fd\u6570\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5feb\u4e50\u5730\u5199\u4ee3\u7801\u5566~\n\n## Code\n```cpp\n#include<bits/stdc++.h>\n#define N \u6284\u88ad\u5dee\u8bc4\nusing namespace std;\ntypedef long long ll;\nstruct node{ll left_son,right_son,siz;}\nsegment_tree[N*30];\nll n,tot,ans,ans1,ans2;\nll create_Tree(ll l,ll r,ll x)\n{\nsegment_tree[++tot].siz=1;\nif(l==r)\n  return tot;\n  ll mid=(l+r)>>1,now=tot;\nif(x<=mid)\n  segment_tree[now].left_son=create_Tree(l,mid,x);\n  else segment_tree[now].right_son=create_Tree(mid+1,r,x);\n  return now;\n}\nvoid combine_Tree(ll l,ll r,ll x,ll y)\n{\n  if(l==r)\n  segment_tree[x].siz+=segment_tree[y].siz;\n  ll mid=(l+r)>>1;\nans1+=1ll*segment_tree[segment_tree[x].right_son].siz*segment_tree[segment_tree[y].left_son].siz;\nans2+=1ll*segment_tree[segment_tree[x].left_son].siz*segment_tree[segment_tree[y].right_son].siz;\n  if(segment_tree[y].left_son)\n  {\n  if(segment_tree[x].left_son)\n  combine_Tree(l,mid,segment_tree[x].left_son,segment_tree[y].left_son);\n  else\n  segment_tree[x].left_son=segment_tree[y].left_son;\n  }\n  if(segment_tree[y].right_son)\n  {\n  if(segment_tree[x].right_son)\n  combine_Tree(l,mid,segment_tree[x].right_son,segment_tree[y].right_son);\n  else\n  segment_tree[x].right_son=segment_tree[y].right_son;\n  }\n  segment_tree[x].siz=segment_tree[segment_tree[x].left_son].siz\n  +segment_tree[segment_tree[x].right_son].siz;\n}\nll solve(){\n  ll v;v=read();\n  if(v)\n  return create_Tree(1,n,v);\n  ll x=solve(),y=solve();\nans1=ans2=0;\ncombine_Tree(1,n,x,y);\nans+=min(ans1,ans2);\n  return x;\n}\nint main(){\n  scanf(\"%lld\",&n);\n  solve();\n  return 0;\n}//\u7f29\u8fdb\u6709\u4e9b\u5947\u602a\n```\n",
        "postTime": 1601033787,
        "uid": 291706,
        "name": "GspTools",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3521 \u3010[POI2011]ROT-Tree Rotations\u3011"
    },
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa\u4e00\u9897\u6709 $n$ \u4e2a\u53f6\u8282\u70b9\u7684\u4e8c\u53c9\u6811,\u4e14\u5bf9\u4e8e\u6240\u6709\u975e\u53f6\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u513f\u5b50,\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u4ea4\u6362\u4efb\u610f\u8282\u70b9\u7684\u4e24\u4e2a\u513f\u5b50,\u6700\u7ec8\u8981\u4f7f\u5f97\u5148\u5e8f\u904d\u5386\u540e\u53f6\u8282\u70b9\u7684\u9006\u5e8f\u5bf9\u6700\u5c11,\u8f93\u51fa\u8fd9\u4e2a\u6700\u5c0f\u503c.\n\n# \u5206\u6790\n\n\u8003\u8651\u4ea4\u6362\u67d0\u4e2a\u8282\u70b9\u7684\u4e24\u4e2a\u513f\u5b50\u5bf9\u6700\u7ec8\u7b54\u6848\u7684\u5f71\u54cd,\u4ea4\u6362\u4e4b\u540e\u5bf9\u4e8e\u5b50\u6811\u5185\u7684\u9006\u5e8f\u5bf9\u5e76\u4e0d\u4f1a\u4ea7\u751f\u5f71\u54cd,\u5bf9\u8fd9\u9897\u5b50\u6811\u6811\u4ee5\u5916\u7684\u9006\u5e8f\u5bf9\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u5f71\u54cd,\u6240\u4ee5\u4ea7\u751f\u7684\u5f71\u54cd\u53ea\u6709\u4e24\u9897\u5b50\u6811.\u90a3\u4e48\u53ea\u9700\u8981\u8003\u8651\u54ea\u68f5\u5b50\u6811\u653e\u524d\u9762\u66f4\u4f18\u5c31\u597d\u4e86.\n\n\u8003\u8651\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570,\u8003\u8651\u5408\u5e76\u7684\u65f6\u5019\u540c\u65f6\u8ba1\u7b97\u51fa\u4e24\u79cd\u60c5\u51b5\u6240\u4ea7\u751f\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570.\n\n\u90a3\u4e48\u8003\u8651\u5982\u4f55\u5feb\u901f\u8ba1\u7b97\u5de6\u53f3\u5b50\u6811\u7684\u4e24\u79cd\u6446\u653e\u65b9\u5f0f\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570.\u53ef\u4ee5\u53d1\u73b0\u5728\u5408\u5e76\u7684\u65f6\u5019\u4f1a\u904d\u5386\u4e24\u5b50\u6811\u4e2d\u533a\u95f4\u5185\u90fd\u975e\u7a7a\u5f88\u591a\u533a\u95f4,\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u4e58\u6cd5\u539f\u7406\u6765\u8ba1\u7b97\u9006\u5e8f\u5bf9.\n\n# \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\nconst int MAXN=2e5+5;\nconst int MAX_NUM=2e5;\nconst int INF=1e9;\nint n;\nlong long answer=0;\nlong long minll(long long a,long long b)\n{\n\tif(a<b)\n\t{\n\t\treturn a;\n\t}\n\treturn b;\n}\nstruct SegmentTree\n{\n\tint lson,rson,sum;\n}sgt[MAXN*32];\nint sgt_cnt=0;\nint rubbish[MAXN*32],rubbish_cnt=0;\n#define LSON sgt[now].lson\n#define RSON sgt[now].rson\n#define MIDDLE ((left+right)>>1)\n#define LEFT LSON,left,MIDDLE\n#define RIGHT RSON,MIDDLE+1,right\nint NewPoint()//\u9632\u6b62\u7a7a\u95f4\u4e0d\u8db3,\u5199\u4e00\u4e2a\u7a7a\u95f4\u56de\u6536\n{\n\tif(rubbish_cnt)\n\t{\n\t\treturn rubbish[rubbish_cnt--];\n\t}\n\treturn ++sgt_cnt;\n}\nvoid DeletePoint(int &now)\n{\n\tsgt[now].lson=sgt[now].rson=0;\n\tsgt[now].sum=0;\n\trubbish[++rubbish_cnt]=now;\n\tnow=0;\n}\nvoid PushUp(int now)//\u5408\u5e76\u6807\u8bb0\n{\n\tsgt[now].sum=sgt[LSON].sum+sgt[RSON].sum;\n}\nvoid Updata(int place,int &now,int left=1,int right=MAX_NUM)//\u5355\u70b9\u4fee\u6539\n{\n\tif(place<left||right<place)\n\t{\n\t\treturn;\n\t}\n\tif(!now)\n\t{\n\t\tnow=NewPoint();\n\t}\n\tif(left==right)\n\t{\n\t\tsgt[now].sum++;\n\t\treturn;\n\t}\n\tUpdata(place,LEFT);\n\tUpdata(place,RIGHT);\n\tPushUp(now);\n}\nlong long add_1,add_2;\nvoid Merge(int &tree1,int &tree2,int left=1,int right=MAX_NUM,bool first=1)//\u7ebf\u6bb5\u6811\u5408\u5e76\n{\n\tif(first)\n\t{\n\t\tadd_1=add_2=0;\n\t}\n\tif(!tree1||!tree2)\n\t{\n\t\ttree1+=tree2;\n\t\ttree2=0;\n\t\treturn;\n\t}\n\tif(left==right)\n\t{\n\t\tsgt[tree1].sum+=sgt[tree2].sum;\n\t\tDeletePoint(tree2);\n\t\treturn;\n\t}\n\tadd_1+=1ll*sgt[sgt[tree1].rson].sum*sgt[sgt[tree2].lson].sum;//\u901a\u8fc7\u4e58\u6cd5\u539f\u7406\u8ba1\u7b97\u9006\u5e8f\u5bf9\n\tadd_2+=1ll*sgt[sgt[tree1].lson].sum*sgt[sgt[tree2].rson].sum;\n\tMerge(sgt[tree1].lson,sgt[tree2].lson,left,MIDDLE,0);//\u7ee7\u7eed\u5408\u5e76\u5de6\u53f3\u5b50\u6811\n\tMerge(sgt[tree1].rson,sgt[tree2].rson,MIDDLE+1,right,0);\n\tDeletePoint(tree2);\n\tPushUp(tree1);\n}\n#undef LSON\n#undef RSON\n#undef MIDDLE\n#undef LEFT\n#undef RIGHT\nstruct Tree\n{\n\tint lson,rson,now;\n}tree[MAXN];\nint tree_cnt=0;\n#define LSON tree[now].lson\n#define RSON tree[now].rson\nvoid DFS(int &root)//\u904d\u5386\u5168\u6811\n{\n\tint val;\n\tscanf(\"%d\",&val);\n\tif(val)\n\t{\n\t\tUpdata(val,root);//\u53f6\u8282\u70b9\u53ea\u8981\u5355\u70b9\u4fee\u6539\u5c31\u597d\u4e86\n\t\treturn;\n\t}\n\tint now=++tree_cnt;\n\tDFS(LSON);\n\tDFS(RSON);\n\tMerge(LSON,RSON);//\u975e\u53f6\u8282\u70b9\u9700\u8981\u5408\u5e76\u5b50\u6811\n\troot=LSON;\n\tanswer+=minll(add_1,add_2);//\u5e76\u4e14\u52a0\u4e0a\u9006\u5e8f\u5bf9\u66f4\u5c11\u7684\u60c5\u51b5\n}\n#undef LSON\n#undef RSON\nint main()\n{\n\tscanf(\"%d\",&n);\n\tint root=0;\n\tDFS(root);\n\tprintf(\"%lld\",answer);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1585980298,
        "uid": 86625,
        "name": "Limit",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3521 \u3010[POI2011]ROT-Tree Rotations\u3011"
    },
    {
        "content": "## \u3010$Analysis$\u3011\n\u53d1\u73b0\u4ea4\u6362\u4e24\u4e2a\u5b50\u6811\u5bf9\u5176\u4ed6\u7684\u9006\u5e8f\u4e0d\u5f71\u54cd\uff0c\u53ea\u5bf9\u8de8\u4e24\u9897\u6811\u7684\u9006\u5e8f\u5bf9\u6709\u5f71\u54cd\uff0c\u4e8e\u662f\u5c31\u6709\u4e00\u4e2a\u8d2a\u5fc3\uff1b\n\n>### 1.\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\n>\u4ece\u5e95\u81f3\u4e0a\uff0c\u4f9d\u6b21\u5408\u5e76\u7ebf\u6bb5\u6811\uff0c\u5408\u5e76\u7684\u65f6\u5019\u53ef\u4ee5\u987a\u4fbf\u7b97\u4e00\u4e0b\u4ea4\u6362\u548c\u4e0d\u4ea4\u6362\u4ea7\u751f\u7684\u9006\u5e8f\u5bf9\u6570\uff0c\u6700\u540e\u53d6$min$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog_2n)$\u5e38\u6570\u8f83\u5927\u7684$log_2$\n\n>### 2.Dsu on Tree\n>\u5bf9\u4e8e\u8de8\u5b50\u6811\u7684\u9006\u5e8f\u5bf9\u66b4\u529b\u7b97\u5c31\u597d\u4e86\uff0c\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\uff1b\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog_2^2n)$\u5e38\u6570\u8f83\u5c0f\u7684$log_2^2$\n\n## \u3010$Code1$\u3011\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\ninline int read()\n{\n\tint res = 0; bool f = 0; char c = getchar();\n\twhile ((c<'0')|(c>'9')) f ^= !(c^'-'), c = getchar();\n\twhile ((c>='0')&(c<='9')) res = (res<<1)+(res<<3)+(c^'0'),c = getchar();\n\treturn f ? -res : res;\n}\n\ntypedef long long int64;\n\nconst int MaxN = 3e5 + 11;\n\nstruct Tree\n{\n\tint ls, rs, val;\n} T[MaxN * 55];\n\nint n, t, f;\n\nint64 ans, ans1, ans2;\n\nbool Is[MaxN];\n\ninline void Mo(int& o, int v, int l = 1, int r = n)\n{\n\tT[(!o) ? (o = ++t) : o].val ++;\n\tif (l == r) return ;\n\tint mid = l + r >> 1;\n\tv <= mid ? Mo(T[o].ls, v, l, mid) : Mo(T[o].rs, v, mid + 1, r);\n}\n\ninline void Merge(int &u, int v)\n{\n\tif (!u || !v) u = u | v;\n\telse\n\t{\n\t\tT[u].val += T[v].val, ans1 += (int64)T[T[u].rs].val * T[T[v].ls].val,\n\t\tans2 += (int64)T[T[u].ls].val * T[T[v].rs].val,\n\t\tMerge(T[u].ls, T[v].ls), Merge(T[u].rs, T[v].rs);\n\t}\n}\n\nvoid Find(int& u)\n{\n\tint x = read(), ls, rs; u = 0;\n\tif (!x)\n\t{\n\t\tFind(ls), Find(rs); ans1 = ans2 = 0;\n\t\tMerge(ls, rs), u = ls, ans += ans1 < ans2 ? ans1 : ans2;\n\t} else Mo(u, x);\n}\n\nint main(void) { n = read(), Find(f = 0), printf(\"%lld\\n\", ans); return 0; }\n```\n\n\n## \u3010$Code2$\u3011\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\ninline char gc()\n{\n    static char s[1<<20|1]={0},*p1=s,*p2=s;\n    return (p1==p2)&&(p2=(p1=s)+fread(s,1,1<<20,stdin),p1==p2)?EOF:*(p1++);\n}\n\ninline int read()\n{\n\tint res = 0; bool f = 0; char c = gc();\n\twhile ((c<'0')|(c>'9')) f ^= !(c^'-'), c = gc();\n\twhile ((c>='0')&(c<='9')) res = (res<<1)+(res<<3)+(c^'0'),c = gc();\n\treturn f ? -res : res;\n}\n\ntypedef long long int64;\n\nconst int MaxN = 4e5 + 11;\n\nint T[MaxN>>1], Size[MaxN], Hs[MaxN], L[MaxN], R[MaxN], Num[MaxN], Dfn[MaxN];\n\nint n, t, son;\n\nint64 ans, ans1, ans2;\n\ninline void Mo(int p, int v) { for (;p <= n;) T[p] += v, p += p & -p; }\n\ninline int Qu(int p) { int v = 0; for (;p;) v += T[p], p -= p & -p; return v; }\n\ninline void Input(int id)\n{\n\tint x = read();\n\tif (!x)\n\t{\n\t\tDfn[id] = ++t, Input(L[id] = t + 1), Input(R[id] = t + 1),\n\t\tHs[id] = (Size[L[id]] >= Size[R[id]]) ? L[id] : R[id];\n\t\tSize[id] = Size[L[id]] + Size[R[id]] + 1;\n\t} else Num[id] = x, Size[id] = 1, Dfn[id] = ++t, Hs[id] = -1;\n}\n\ninline void Add(int u)\n{\n\tint v = Qu(n); ans1 = ans2 = 0;\n\tfor (int i = Dfn[u];i < Dfn[u] + Size[u]; ++i) if (Num[i])\n\t{\n\t\tint g = Qu(Num[i]);\n\t\tans1 += g, ans2 += v - g;\n\t} for (int i = Dfn[u];i < Dfn[u] + Size[u]; ++i) if (Num[i]) Mo(Num[i], 1);\n}\n\ninline void Del(int u) { for (int i = Dfn[u];i < Dfn[u] + Size[u]; ++i) if (Num[i]) Mo(Num[i], -1); }\n\ninline void Solve(int u, int is)\n{\t\n\tif (!~Hs[u]) { if (is) Mo(Num[u], 1); return ; }\n\t\n\tif (Hs[u] != L[u])\n\t{\n\t\tSolve(L[u], 0), Solve(R[u], 1), son = R[u], Add(L[u]), ans += (ans1 < ans2) ? ans1 : ans2;\n\t\tif (!is) Del(u);\n\t}\n\telse\n\t{\n\t\tSolve(R[u], 0), Solve(L[u], 1), son = L[u], Add(R[u]), ans += (ans1 < ans2) ? ans1 : ans2;\n\t\tif (!is) Del(u);\n\t} \n}\n\nint main(void)\n{\n\tn = read();\n\tInput(1);\n\tSolve(1, 1);\n\tprintf(\"%lld\\n\", ans);\n   return 0;\n}\n```",
        "postTime": 1576937903,
        "uid": 75093,
        "name": "Awdrgysxc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3521 \u3010[POI2011]ROT-Tree Rotations\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c$QwQ$](https://ctz45562.github.io/2019/03/07/%E9%A2%98%E8%A7%A3-bzoj-2212-%E3%80%90-POI2011-ROT-Tree-Rotations%E3%80%91/)\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P3521)\n\n[\u80fd\u770b\u5f97\u61c2\u9898\u9762\u7684\u4f20\u9001\u95e8](https://www.lydsy.com/JudgeOnline/problem.php?id=2212)\n\n\u524d\u5e8f\u904d\u5386\u53f6\u5b50\u8282\u70b9\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u628a\u53f6\u5b50\u8282\u70b9\u4ece\u5de6\u5230\u53f3\u8f93\u51fa\u3002\n\n\n\u90a3\u4e48\u9996\u5148\u8003\u8651\u4e00\u4e2a\u6027\u8d28\uff1a**\u4ea4\u6362\u67d0\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\uff0c\u4ec5\u4f1a\u5bf9\u8fd9\u4e24\u68f5\u5b50\u6811\u4e4b\u95f4\u7684\u9006\u5e8f\u5bf9\u9020\u6210\u5f71\u54cd\uff0c\u800c\u5bf9\u67d0\u68f5\u5b50\u6811\u5185\u90e8\u3001\u5b83\u7956\u5b97\u5341\u516b\u4ee3\u4e4b\u95f4\u7684\u9006\u5e8f\u5bf9\u6ca1\u6709\u5f71\u54cd\u3002**\n\n\u67d0\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u6709\u54ea\u4e9b\u6570\u6362\u5b8c\u4e4b\u540e\u8fd8\u662f\u6709\u54ea\u4e9b\u6570\uff0c\u4ea4\u6362\u540e\u76f8\u5bf9\u4f4d\u7f6e\u53d8\u5316\u7684\u53ea\u6709\u8fd9\u4e24\u68f5\u5b50\u6811\uff0c\u6240\u4ee5\u4ec5\u5bf9\u8fd9\u4e24\u68f5\u5b50\u6811\u6709\u5f71\u54cd\u3002\n\n\u8fd9\u6837\u5c31\u6709\u4e00\u4e2a\u8d2a\u5fc3\u7684\u601d\u8def\uff1a\u5982\u679c\u67d0\u4e2a\u8282\u70b9\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\u66f4\u4f18\u5219\u4ea4\u6362\u3002\n\n\u600e\u4e48\u53eb\u66f4\u4f18\uff1f\u4ea4\u6362\u540e\u5de6\u3001\u53f3\u5b50\u6811\u4e4b\u95f4\u9006\u5e8f\u5bf9\u5c0f\u4e8e\u4ea4\u6362\u524d\u7684\u5c31\u7b97\u66f4\u4f18\u3002\uff08\u6ce8\u610f\u8fd9\u91cc\u7684\u9006\u5e8f\u5bf9\u5c31\u9488\u5bf9\u4e8e\u8fd9\u4e24\u68f5\u5b50\u6811\u4e4b\u95f4\u7684\u503c\uff0c\u4e0d\u7b97\u4e0a\u5b50\u6811\u5185\u90e8\u4ea7\u751f\u7684\u9006\u5e8f\u5bf9\uff09\n\n\u73b0\u5728\u95ee\u9898\u8f6c\u5316\u6210\u4e86\uff1a\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u5de6\u3001\u53f3\u5b50\u6811\u4e4b\u95f4\u7684\u9006\u5e8f\u5bf9\u6570\u3002\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u5408\u5e76\u3002\u5176\u5b9e\u5e73\u8861\u6811\u542f\u53d1\u5f0f\u5408\u5e76\u548c\u7ebf\u6bb5\u6811\u5408\u5e76\u90fd\u73c2\u4ee5\uff0c\u4e0d\u8fc7\u5e73\u8861\u6811$O(nlog^2n)$\u592a\u6162\u4e86\uff0c\u8fd9\u91cc\u9009\u62e9\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\u5bf9\u6811\u8fdb\u884c$dfs$\uff0c\u4f7f\u7528\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4ece\u5e95\u90e8\u5c06\u53f6\u5b50\u8282\u70b9\u7684\u6743\u503c\u4e00\u6b65\u6b65\u5408\u5e76\u4e0a\u6765\uff0c\u5728\u4efb\u610f\u8282\u70b9\u5c31\u80fd\u5f97\u5230\u5176\u5de6\u53f3\u513f\u5b50\u7684\u7ebf\u6bb5\u6811\u3002\u5bf9\u4e8e\u6c42\u4e24\u68f5\u5b50\u6811\u95f4\u7684\u9006\u5e8f\u5bf9\uff0c\u73c2\u4ee5\u5728\u5408\u5e76\u65f6\u6c42\u51fa\u3002\u653e\u56fe\u4e3e\u4e2a\u6817\u5b50\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/53393.png )\n\n\u6bd4\u5982\u73b0\u5728\u5408\u5e76\u5230\u4e86\u84dd\u8272\u8282\u70b9\uff0c\u5c31\u8ba9\u8ba1\u6570\u53d8\u91cf\u52a0\u4e0a**\u5de6\u513f\u5b50\u7ebf\u6bb5\u6811\u4e2d\u8be5\u8282\u70b9\u7684\u53f3\u513f\u5b50\u7684\u503c x \u53f3\u513f\u5b50\u7ebf\u6bb5\u6811\u4e0a\u8be5\u8282\u70b9\u7684\u5de6\u513f\u5b50\u7684\u503c**\uff0c\u4e5f\u5c31\u662f\u4e0a\u56fe\u4e2d\u7ea2\u8272\u8282\u70b9\u7684\u503c\u4e58\u7eff\u8272\u8282\u70b9\u7684\u503c\u3002\u7136\u540e\u5728\u9012\u5f52\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\u3002\n\n\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u4e0d\u8003\u8651\u67d0\u4e2a\u8282\u70b9\u5185\u90e8\u7684\u9006\u5e8f\u5bf9\u60c5\u51b5\uff0c**\u7ea2\u8272\u8282\u70b9\u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u80fd\u4e0e\u7eff\u8272\u8282\u70b9\u4e2d\u7684\u6bcf\u4e2a\u503c\u4ea7\u751f\u9006\u5e8f\u5bf9**\uff0c\u4e8e\u662f\u6709\u4e24\u503c\u76f8\u4e58\u4e3a\u7b54\u6848\u3002\u81f3\u4e8e\u8282\u70b9\u5185\u90e8\u5c31\u53ef\u4ee5\u7ee7\u7eed\u9012\u5f52\u6c42\u51fa\u3002\n\n\u4ea4\u6362\u540e\u7684\u9006\u5e8f\u5bf9\u6570\uff1a\u8bb0$sizl$\u4e3a\u5de6\u5b50\u6811\u6743\u503c\uff08\u53f6\u5b50\u8282\u70b9\uff09\u7684\u4e2a\u6570\uff0c$sizr$\u4e3a\u53f3\u5b50\u6811\u6743\u804c\u7684\u4e2a\u6570\uff0c\u4ea4\u6362\u524d\u6709$x$\u5bf9\u9006\u5e8f\u5bf9\u3002\u5219\u4ea4\u6362\u540e\u5c31\u6709$sizl*sizr-x$\u5bf9\u9006\u5e8f\u5bf9\u3002\n\n\u8fd9\u4e2a\u5bb9\u6613\u7406\u89e3\uff1a\u5171\u6709$sizl*sizr$\u79cd\u7ec4\u5408\uff0c\u6bcf\u4e2a\u4e4b\u524d\u4e0d\u7b26\u5408\u9006\u5e8f\u5bf9\u7684\u7ec4\u5408\uff0c\u4ea4\u6362\u540e\u5c31\u7b26\u5408\u4e86\u3002\u540c\u7406\u4e4b\u524d\u7b26\u5408\u7684\u4ea4\u6362\u540e\u5c31\u4e0d\u7b26\u5408\u4e86\u3002\n\n\u7b54\u6848\u7684\u7edf\u8ba1\uff1a\u73c2\u4ee5$dfs$\u5b8c\u4e4b\u540e\u76f4\u63a5\u524d\u5e8f\u904d\u5386\u7528\u5f52\u5e76\u6392\u5e8f\u6216\u6811\u72b6\u6570\u7ec4\u6c42\u51fa\u3002\u4f46\u662f\u5728$dfs$\u4e2d\u5df2\u7ecf\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u5de6\u53f3\u513f\u5b50\u95f4\u9006\u5e8f\u5bf9\u6570\uff0c\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u503c\u52a0\u8d77\u6765\u4f5c\u4e3a\u7b54\u6848\uff0c\u6548\u7387\u9ad8\u5f88\u591a\u3002\n\n\u8fd8\u6709\u6ce8\u610f\u5f00$long\\ long$\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n\n#define maxn 200005\n#define inf 0x3f3f3f3f\n#define pn putchar('\\n')\n#define px(x) putchar(x)\n#define ps putchar(' ')\n#define pd puts(\"======================\")\n#define pj puts(\"++++++++++++++++++++++\")\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,y=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn y?-x:x;\n}\ntemplate<typename T>\ninline T read(){\n\tT x=0;\n\tint y=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn y?-x:x;\n}\nstruct Tree{\n\tint ls,rs,root,d;\n    //\u5de6\u513f\u5b50\u3001\u53f3\u513f\u5b50\u3001\u7ebf\u6bb5\u6811\u7684\u6839\u3001\u6743\u503c\n}t[maxn<<1];\n//\u8282\u70b9\u6570\u8981\u5f00\u4e24\u500d\nint num=1,n;\nlong long ans,all;\n//all\u662f\u6700\u7ec8\u7b54\u6848\uff0cans\u662f\u4e2d\u95f4\u7edf\u8ba1\u5de6\u53f3\u5b50\u6811\u95f4\u9006\u5e8f\u5bf9\u7684\u8ba1\u6570\u5668\nstruct Segment_Tree{\n\tint dat[maxn<<5],ls[maxn<<5],rs[maxn<<5],cnt;\n#define ls(x) ls[x]\n#define rs(x) rs[x]\n\tvoid add(int poi,int l,int r,int &node){\n\t\tnode=++cnt;\n\t\tdat[node]=1;\n\t\tif(l==r)return;\n\t\tint mid=l+r>>1;\n\t\tif(poi<=mid)add(poi,l,mid,ls(node));\n\t\telse add(poi,mid+1,r,rs(node));\n\t}\n\tint merge(int l,int r,int x,int y){\n\t\tif(!x||!y)return x|y;//\u6709\u7a7a\u8282\u70b9\u8fd4\u56de\u53e6\u4e00\u4e2a\n\t\tdat[x]+=dat[y];//\u5408\u5e76\u4e24\u4e2a\u8282\u70b9\u4fe1\u606f\n\t\tif(l==r)return x;//\u9012\u5f52\u5230\u5e95\u5c42\u8fd4\u56de\n\t\tint mid=l+r>>1;\n\t\tans+=1ll*dat[rs(x)]*dat[ls(y)];\n        //\u8fd9\u91ccx\u4e3a\u5de6\u513f\u5b50\u7684\u8282\u70b9\uff0cy\u4e3a\u53f3\u513f\u5b50\u7684\u8282\u70b9\uff0c\u5c31\u6709\u4e0a\u9762\u63d0\u5230\u7684\u7edf\u8ba1\u65b9\u6cd5\n\t\tls(x)=merge(l,mid,ls(x),ls(y));\n\t\trs(x)=merge(mid+1,r,rs(x),rs(y));\n\t\treturn x;\n\t}//\u7ebf\u6bb5\u6811\u5408\u5e76\n}st;\nvoid dfs(int node=1){\n\tif(!t[node].ls)return;\n\tdfs(t[node].ls);\n\tdfs(t[node].rs);\n    //\u5148\u5904\u7406\u5de6\u53f3\u513f\u5b50\uff0c\u5f97\u5230\u5de6\u53f3\u513f\u5b50\u7684\u60c5\u51b5\n\tans=0;\n    //\u8ba1\u6570\u5668\u6e05\u96f6\n\tlong long siz=1ll*st.dat[t[t[node].ls].root]*st.dat[t[t[node].rs].root];\n\tt[node].root=st.merge(1,n,t[t[node].ls].root,t[t[node].rs].root);\n\tif(ans>siz-ans)swap(t[node].ls,t[node].rs),all+=siz-ans;\n\telse all+=ans;\n    //\u76f4\u63a5\u7528\u4e2d\u95f4\u8fc7\u7a0b\u6c42\u7684\u503c\u7edf\u8ba1\u6700\u7ec8\u7b54\u6848\n}\nvoid Get(int node=1){\n\tt[node].d=read();\n\tif(!t[node].d)Get(t[node].ls=++num),Get(t[node].rs=++num);\n\telse st.add(t[node].d,1,n,t[node].root);\n}//\u9012\u5f52\u8bfb\u5165\nint main(){\n\tn=read();\n\tGet();\n\tdfs();\n\tprintf(\"%lld\\n\",all);\n}\n\n```\n\n",
        "postTime": 1552022337,
        "uid": 111762,
        "name": "_ctz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3521 \u3010[POI2011]ROT-Tree Rotations\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u4e00\u79cd\u53d8\u5f62\u5e94\u7528\u3002\n\n\u6ca1\u7ffb\u9898\u89e3\u505a\u51fa\u6765\u4e86\uff0c\u611f\u52a8\u3002\n\n\u672c\u9898\u5e8f\u5217\u4e2d\u7684\u7ed3\u6784\u5b9e\u9645\u5c31\u662f\u591a\u4e2a\u5355\u70b9\u6309\u7167\u6b21\u5e8f\u5408\u5e76\u3002\n\n\u800c\u6211\u4eec\u6c42\u7684\u9006\u5e8f\u5bf9\uff0c\u8054\u60f3 CDQ \u5206\u6cbb\uff0c\u6b63\u662f\u53ef\u4ee5\u62c6\u5206\u533a\u95f4\u89e3\u51b3\u7684\u95ee\u9898\u3002\n\n\u6c42\u9006\u5e8f\u5bf9\u6700\u5c0f\u503c\uff0c\u53d1\u73b0\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u5408\u5e76\u8003\u8651\u5de6\u53f3\u4e24\u4e2a\u533a\u95f4\u4e4b\u95f4\u7684\u8d21\u732e\u5373\u53ef\u3002\n\n\u663e\u7136\uff0c\u4e0d\u89e3\u91ca\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u8d2a\u5fc3\u53d6\u5de6\u53f3\u4e24\u533a\u95f4\u4e4b\u95f4\u4ea4\u6362\u4e0e\u4e0d\u4ea4\u6362\u6240\u5f97\u9006\u5e8f\u5bf9\u6570\u7684\u8f83\u5c0f\u503c\u3002\n\n\u6c42\u9006\u5e8f\u5bf9\u82e5\u6734\u7d20 $\\mathcal O(n)$ \u5f52\u5e76\u5408\u5e76\uff0c\u590d\u6742\u5ea6\u662f $\\mathcal O(n^2)$ \u7684\uff0c\u4f1a TLE 80pts\u3002\n\n\u53ef\u4ee5\u6784\u9020\u6bcf\u6b21\u5408\u5e76\u4e00\u4e2a\u5355\u70b9\u7684\u6570\u636e\uff0c\u8fd9\u6837\u6bcf\u4e2a\u70b9\u4f1a\u5408\u5e76 $\\mathcal O(n)$ \u6b21\u3002\n\n[\u8bb0\u5f55](https://www.luogu.com.cn/record/40348932)\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n\ntypedef long long ll;\nconst int N = 200001;\n\ninline int read() {\n\tint x = 0, f = 1; char ch = getchar();\n\twhile(ch > '9' || ch < '0') { if(ch == '-') f = -1; ch = getchar(); }\n\tdo x = x * 10 + ch - 48, ch = getchar(); while(ch >= '0' && ch <= '9');\n\treturn x * f;\n}\n\nint n,p[N],q1[N],q2[N],t; ll ans;\n\nvoid Solve() {\n\tint x = read();\n\tif(x != 0) return void(p[++t] = x);\n\tint l = t + 1;\n\tSolve(); int m = t;\n\tSolve(); int r = t;\n\n\tint i = l, j = m + 1, c = l; ll s1 = 0;\n\twhile(i <= m && j <= r) if(p[i] <= p[j]) q1[c++] = p[i++];\n\telse q1[c++] = p[j++], s1 += m - i + 1;\n\twhile(i <= m) q1[c++] = p[i++];\n\twhile(j <= r) q1[c++] = p[j++], s1 += m - i + 1;\n\n\ti = l, j = m + 1, c = l; ll s2 = 0;\n\twhile(i <= m && j <= r) if(p[j] <= p[i]) q2[c++] = p[j++];\n\telse q2[c++] = p[i++], s2 += r - j + 1;\n\twhile(j <= r) q2[c++] = p[j++];\n\twhile(i <= m) q2[c++] = p[i++], s2 += r - j + 1;\n\n\tif(s1 < s2) {\n\t\tans += s1;\n\t\tfor(int i = l;i <= r;i++) p[i] = q1[i];\n\t} else {\n\t\tans += s2;\n\t\tfor(int i = l;i <= r;i++) p[i] = q2[i];\n\t}\n\treturn;\n}\n\nint main() {\n\tn = read();\n\tSolve();\n\tstd::printf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n\n\u4e8e\u662f\uff0c\u95ee\u9898\u53d8\u6210\u4e86\u5982\u4f55\u5feb\u901f\u7ef4\u62a4\u4e00\u5b9a\u4fe1\u606f\uff0c\u4f7f\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u5bf9\u4e8e\u4e24\u4e2a\u5e8f\u5217\uff0c\u6c42\u51fa\u4e24\u4e2a\u5e8f\u5217\u5206\u522b\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u5e8f\u5217\u7684\u9006\u5e8f\u5bf9\u6570\u3002\n\n\u6811\u4e0a\u9012\u5f52\u5730\u5408\u5e76\u548c\u503c\u6709\u5173\u7684\u4fe1\u606f\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\n\n\u90a3\u4e48\u6211\u4eec\u7ef4\u62a4\u4e86\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u3002\n\n\u4f46\u662f\u600e\u4e48\u6c42\u5462\uff1f\n\n\u5728\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u3002\n\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u70b9\uff0c\u7ef4\u62a4\u5176\u5927\u5c0f $s$\uff0c\u5176\u4e2d\u5de6\u533a\u95f4\u8282\u70b9\u6570\u91cf $s1$\uff0c\u548c\u53f3\u533a\u95f4\u8282\u70b9\u6570\u91cf $s2$\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5408\u5e76\u5b8c\u6210\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u5c06\u5176\u5de6\u513f\u5b50\u4e2d $s2$ \u7684\u503c\u548c\u53f3\u513f\u5b50\u4e2d $s1$ \u7684\u503c\u4e4b\u79ef\u52a0\u5165\u8d21\u732e\u5373\u53ef\u3002\n\n\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5b9e\u8d28\u662f\u5728\u6743\u503c\u4e00\u7ef4\u4e0a\u518d\u5c06\u5e8f\u5217\u5206\u6cbb\u3002\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u5728 $\\mathcal O(n\\log n)$ \u65f6\u95f4\u4e2d\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\n\n---\n\n\u4e0b\u9762\u8bb2\u8bb2\u5b9e\u73b0\u4e2d\u7684\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u70b9\u7684 $s1$ \u548c $s2$ \u503c\uff0c\u90fd\u53ea\u662f\u6682\u65f6\u7684\u3002\u5728\u6bcf\u4e00\u6b21\u5408\u5e76\u4e2d\u90fd\u4e00\u5b9a\u4f1a\u88ab\u91cd\u65b0\u8ba1\u7b97\u3002\n\n\u8be5\u89e3\u6cd5\u4e2d\u4f3c\u4e4e\u9700\u8981\u4e24\u6b21\u6309\u4e0d\u540c\u987a\u5e8f\u5408\u5e76\u53d6\u5c0f\u503c\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5408\u5e76\u4e4b\u540e\u7684\u7ebf\u6bb5\u6811\u7ed3\u6784\u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u4e00\u6b21\u5408\u5e76\u5206\u522b\u7ef4\u62a4\u4e24\u4e2a\u503c\uff0c\u5e76\u76f4\u63a5\u4f7f\u7528\u539f\u6765\u7684\u7ed3\u70b9\u3002\n\n\u8fd9\u6837\u7a7a\u95f4\u662f $\\mathcal O(n\\log n)$ \u7684\uff0c\u4f46\u662f\u987b\u7a0d\u5927\u3002\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n\ntypedef long long ll;\nconst int N = 200001;\nconst int LOGN = 19;\nconst int NODE = N * LOGN;\n\ninline int read() {\n\tint x = 0, f = 1; char ch = getchar();\n\twhile(ch > '9' || ch < '0') { if(ch == '-') f = -1; ch = getchar(); }\n\tdo x = x * 10 + ch - 48, ch = getchar(); while(ch >= '0' && ch <= '9');\n\treturn x * f;\n}\n\nint n,cnt; ll ans;\nint s[NODE],s1[NODE],s2[NODE],lc[NODE],rc[NODE];\n\nvoid New(int &rt,int x,int l,int r) {\n\ts[rt = ++cnt] = 1;\n\tif(l == r) return;\n\tint m = (l + r) >> 1;\n\tif(x <= m) New(lc[rt],x,l,m);\n\telse New(rc[rt],x,m + 1,r);\n\treturn;\n}\n\nstruct Pair {\n\tll x,y;\n\tPair(ll _x = 0,ll _y = 0) : x(_x), y(_y) {}\n\tfriend Pair operator +(const Pair &x,const Pair &y) {\n\t\treturn Pair(x.x + y.x,x.y + y.y);\n\t}\n};\n\nPair Merge(int &x,int y,int l,int r) {\n\tif(!x || !y) {\n\t\tif(x) s1[x] = s[x], s2[x] = 0;\n\t\telse x = y, s2[x] = s[x], s1[x] = 0;\n\t\treturn Pair();\n\t}\n\tif(l == r) return s1[x] += s1[y], s2[x] += s2[y], s[x] += s[y], Pair();\n\tint m = (l + r) >> 1;\n\tPair r1 =  Merge(lc[x],lc[y],l,m);\n\tPair r2 = Merge(rc[x],rc[y],m + 1,r);\n\ts1[x] = s1[lc[x]] + s1[rc[x]];\n\ts2[x] = s2[lc[x]] + s2[rc[x]];\n\ts[x] = s[lc[x]] + s[rc[x]];\n\treturn Pair(r1.x + r2.x + 1ll * s2[lc[x]] * s1[rc[x]],r1.y + r2.y + 1ll * s1[lc[x]] * s2[rc[x]]);\n}\n\nint Solve() {\n\tint x = read();\n\tif(x != 0) {\n\t\tint rt = 0; New(rt,x,1,n);\n\t\treturn rt;\n\t}\n\tint lc = Solve(), rc = Solve();\n\tPair s = Merge(lc,rc,1,n);\n\tans += std::min(s.x,s.y);\n\treturn lc;\n}\n\nint main() {\n\tn = read();\n\tSolve();\n\tstd::printf(\"%lld\\n\",ans);\n\treturn 0;\n}\n\n```",
        "postTime": 1603456680,
        "uid": 219595,
        "name": "Vocalise",
        "ccfLevel": 9,
        "title": "\u7ebf\u6bb5\u6811\u5408\u5e76---\u9898\u89e3 P3521 \u3010[POI2011]ROT-Tree Rotations\u3011"
    },
    {
        "content": "\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u53f6\u5b50\u8282\u70b9\u6709\u6743\u503c\uff0c\u53ef\u4ee5\u8fdb\u884c\u82e5\u5e72\u6b21\u4ea4\u6362\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u7684\u64cd\u4f5c\uff0c\u4f7f\u524d\u5e8f\u904d\u5386\u53f6\u5b50\u7684\u9006\u5e8f\u5bf9\u6700\u5c11\u3002\n\n\u8003\u8651\u4e00\u4e2a\u8282\u70b9\u4e0b\u5b50\u6811\u9006\u5e8f\u5bf9\u7684\u4ea7\u751f\uff1a\n\n\u2460 \u53ea\u5728\u5de6\u5b50\u6811\u4e2d\u4ea7\u751f\u3002\n\n\u2461 \u53ea\u5728\u53f3\u5b50\u6811\u4e2d\u4ea7\u751f\u3002\n\n\u2462 \u5728\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u4e2d\u4ea4\u53c9\u4ea7\u751f\u3002\n\n\u56e0\u4e3a\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff0c\u6240\u4ee5 \u2460 \u2461 \u4e24\u79cd\u60c5\u51b5\u53ea\u9700\u9012\u5f52\u4e0b\u53bb\u6c42\u89e3\uff0c\u53ea\u9700\u8003\u8651\u60c5\u51b5 \u2462 \u3002\n\n\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u6765\u8bb0\u5f55\u4fe1\u606f\uff0c\u901a\u8fc7\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u770b\u4ee3\u7801\u5427\u3002\n\n\u8bb0\u5f97\u5f00$long\\ long$\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 10000010\nusing namespace std;\ntypedef long long ll;\ntemplate<typename T> inline void read(T &x)\n{\n\tx=0;char c=getchar();bool flag=false;\n\twhile(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n\twhile(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n\tif(flag)x=-x;\n}\nint n,root,tree_cnt;\nll s1,s2,ans;\nbool vis[maxn];\nint ls[maxn],rs[maxn],rt[maxn];\nll siz[maxn];\nvoid pushup(int cur)\n{\n    siz[cur]=siz[ls[cur]]+siz[rs[cur]];\n}\nvoid modify(int L,int R,int pos,int &cur)\n{\n    if(!cur) cur=++tree_cnt;\n    if(L==R)\n    {\n        siz[cur]++;\n        return;\n    }\n    int mid=(L+R)>>1;\n    if(pos<=mid) modify(L,mid,pos,ls[cur]);\n    if(pos>mid) modify(mid+1,R,pos,rs[cur]);\n    pushup(cur);\n}\nint merge(int x,int y)\n{\n    if(!x||!y) return x+y;\n    s1+=siz[ls[x]]*siz[rs[y]];\n    s2+=siz[ls[y]]*siz[rs[x]];\n    ls[x]=merge(ls[x],ls[y]);\n    rs[x]=merge(rs[x],rs[y]);\n    pushup(x);\n    return x;\n}\nvoid dfs(int &x)\n{\n    int val;\n    read(val);\n    x=++tree_cnt;\n    if(!val) dfs(ls[x]),dfs(rs[x]);\n    else vis[x]=true,modify(1,n,val,rt[x]);\n}\nvoid work(int x)\n{\n    if(vis[x]) return;\n    work(ls[x]),work(rs[x]),s1=s2=0;\n    rt[x]=merge(rt[ls[x]],rt[rs[x]]);\n    ans+=min(s1,s2);\n}\nint main()\n{\n\tread(n);\n    dfs(root);\n    work(root);\n    printf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1576484877,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3521 \u3010[POI2011]ROT-Tree Rotations\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u68f5\u9898\n\n\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7236\u4eb2\u7684\u7ebf\u6bb5\u6811\u7531\u513f\u5b50\u7684\u5408\u5e76\u800c\u6765\uff0c\u5728\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\u5373\u53ef\u8ba1\u7b97\u7b54\u6848\n\n\u8fd9\u6837\u6211\u4eec\u9012\u5f52\u5904\u7406\uff0c\u6bcf\u4e00\u5c42\u53ea\u8003\u8651\u8de8\u8d8a\u4e24\u9897\u5b50\u6811\u7684\u7b54\u6848\n\n\u8003\u8651\u5408\u5e76lx,rx\u4e24\u9897\u6811\uff0c\u5728\u4ea4\u6362\u4e4b\u524d\uff0c\u7b54\u6848\u662f\n```\nsum[rs[lx]] * sum[ls[rx]]\n```\n\u5728\u4ea4\u6362\u4e4b\u540e\uff0c\u7b54\u6848\u662f\n```\nsum[ls[lx]] * sum[rs[rx]]\n```\n\u53ef\u4ee5\u624b\u63a8\uff0c\u5341\u5206\u6613\u5f97\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u9898\u5361\u5185\u5b58\uff0c\u90a3\u4e48\u53ef\u4ee5\u5199\u4e2a\u5185\u5b58\u6c60\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<queue>\n#include<vector>\n#include<map>\n#include<climits>\n#include<algorithm>\nusing namespace std;\ntypedef int mainint;\ntypedef double db;\ntypedef long long ll;\n#define il inline \n#define pii pair<ll,int>\n#define mp make_pair\n#define B cout << \"breakpoint\" << endl;\n#define O(x) cout << #x << \"  \" << x << endl;\ninline int read()\n{\n    int ans = 0,op = 1;\n    char ch = getchar();\n    while(ch < '0' || ch > '9')\n    {\n        if(ch == '-') op = -1;\n        ch = getchar();\n    }\n    while(ch >= '0' && ch <= '9')\n    {\n        (ans *= 10) += ch - '0';\n        ch = getchar();\n    }\n    return ans * op;\n}\nconst int maxn = 5e5 + 5;\nint ls[maxn],rs[maxn],tot;\nint sum[maxn];\nint n;\nll ans1,ans2,ans;\nint st[maxn],top;\nil void trash(int i)\n{\n\tls[i] = rs[i] = sum[i] = 0; st[++top] = i;\n}\nil void up(int i)\n{\n\tsum[i] = sum[ls[i]] + sum[rs[i]];\n}\nvoid update(int &i,int l,int r,int x,int d)\n{\n\tif(!i) i = !top ? ++tot : st[top--];\n\tif(l == r && l == x)\n\t{\n\t\tsum[i] += d;\n\t\treturn;\n\t}\n\tint mid = l + r >> 1;\n\tif(x <= mid) update(ls[i],l,mid,x,d);\n\telse update(rs[i],mid + 1,r,x,d);\n\tup(i);\n}\nvoid merge(int &lx,int rx)\n{\n\tif(!lx || !rx)  \n\t{ \n\t\tlx = lx + rx; \n\t\t//if(rx) trash(rx);\n\t\treturn; \n\t}\n\tsum[lx] = sum[lx] + sum[rx];\n\tans1 += 1ll * sum[rs[lx]] * sum[ls[rx]];\n\tans2 += 1ll * sum[ls[lx]] * sum[rs[rx]];\n\tmerge(ls[lx],ls[rx]);\n\tmerge(rs[lx],rs[rx]);\n\ttrash(rx);\n}\nvoid solve(int &x)\n{\n\tint t = read();\n\tint leftson,rightson;\n\tx = 0;\n\tif(t)\n\t\tupdate(x,1,n,t,1);\n\telse\n\t{\n\t\tsolve(leftson); solve(rightson);\n\t\tans1 = ans2 = 0;\n\t\tx = leftson; \n\t\tmerge(x,rightson);\n\t\tans += min(ans1,ans2);\n\t}\n}\nint main()\n{\n\tn = read();\n\tint x = 0;\n\tsolve(x);\n\tcout << ans;\n}\n\n\n```\n\n\n\n\n",
        "postTime": 1560650298,
        "uid": 86721,
        "name": "L_M_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3521 \u3010[POI2011]ROT-Tree Rotations\u3011"
    },
    {
        "content": "# \u9898\u76ee\u94fe\u63a5\n[\u3010BZOJ\u3011](https://www.lydsy.com/JudgeOnline/problem.php?id=2212)  \n[\u3010\u6d1b\u8c37\u3011](https://www.luogu.org/problemnew/show/P3521)  \n[\u3010LOJ\u3011](https://loj.ac/problem/2163)  \n# \u5410\u69fd\n~~\u7c97\u9119\u4e4b\u8bed~~  \nBZOJ\u7684\u65f6\u95f4\u9650\u5236\u548c\u7a7a\u95f4\u9650\u5236\u90fd\u662f\u6d1b\u8c37\u768410\u500d\uff0c\u6d1b\u8c37\u5361\u7a7a\u95f4\uff0cLOJ\u5361\u65f6\u95f4\u3002  \nawsl~~\n# \u9898\u89e3\n\u7531\u4e8e\u662f\u524d\u5e8f\u904d\u5386\uff0c\u90a3\u4e48\u8ba8\u8bba\u4e00\u68f5\u6811\u4e0a\u7684\u9006\u5e8f\u5bf9\u7684\u60c5\u51b5\u3002    \n* \u4e24\u4e2a\u8282\u70b9\u90fd\u5728\u5de6\u5b50\u6811\u4e0a  \n* \u4e24\u4e2a\u8282\u70b9\u90fd\u5728\u53f3\u5b50\u6811\u4e0a  \n* \u4e24\u4e2a\u8282\u70b9\u5206\u522b\u5728\u4e0d\u540c\u7684\u5b50\u6811\u4e0a\u3002  \n\n\u524d\u4e24\u79cd\u60c5\u51b5\u5176\u5b9e\u4e5f\u53ef\u4ee5\u5f52\u7ed3\u4e8e\u7b2c\u4e09\u79cd\u60c5\u51b5\u3002  \n## \u539f\u56e0\n\u56e0\u4e3a\u4e24\u4e2a\u8282\u70b9\u4e0d\u53ef\u80fd\u5360\u636e\u4e00\u4e2a\u4f4d\u7f6e\u3002    \n\u6839\u636e\u5bb9\u65a5\u539f\u7406\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u7b54\u6848\u7684\u6b63\u786e\u6027\uff0c\u6211\u4eec\u9012\u5f52\u6c42\u89e3\u4e0d\u80fd\u8ba1\u7b97\u4e24\u904d\u76f8\u540c\u7684\u7b54\u6848\u3002   \n\n-----\n\u56de\u5230\u6b63\u9898  \n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8ba8\u8bba\u8de8\u8d8a\u4e24\u4e2a\u5b50\u6811\u7684\u60c5\u51b5\u3002  \n\u5f88\u663e\u7136\uff0c\u5de6\u5b50\u6811\u4e2d\u7684\u6240\u6709\u70b9\u7684$dfs$\u5e8f\u90fd\u6bd4\u53f3\u5b50\u6811\u7684\u5b50\u6811\u4e2d\u7684\u5c0f\u3002  \n\u90a3\u4e48\u5982\u679c\u8981\u4ea4\u6362\uff0c\u5c31\u662f\u76f8\u53cd\u4e00\u4e0b\u3002  \n\u6bd4\u8f83\u5bb9\u6613\u53ef\u4ee5\u60f3\u5230\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u5148\u5efa\u7acb\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u3002  \n\u90a3\u4e48\u6bcf\u4e00\u6b21\u7684\u7b54\u6848\u5c31\u4ece\u7ebf\u6bb5\u6811\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u4e2d\u53d6\u6700\u5c0f\u503c\u5c31\u53ef\u4ee5\u4e86\u3002  \n# \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nnamespace IOstream {\n\t#define gc getchar\n\ttemplate <typename T> \n\tinline void read(T &x) {\n\t\tx = 0; T fl = 1; char c = 0; \n\t\tfor (; c < '0' || c > '9'; c = gc()) \n\t\t\tif (c == '-') fl = -1;\n\t\tfor (; c >= '0' && c <= '9'; c = gc()) \n\t\t\tx = (x << 1) + (x << 3) + (c ^ 48);\n\t\tx *= fl;\n\t}\n\t#undef gc\n} using namespace IOstream;\ntypedef long long ll;\nconst int N = 4000005 + 6;\nint n, cnt = 0, tot = 0; \nint rt[N]; \nll ans, f, g;\nstruct node {\n\tint lc, rc, sz;\n} tr[N];\nint merge(int x, int y) {\n\tif (!x || !y) return x + y;\n\tf += 1ll * tr[tr[x].lc].sz * 1ll * tr[tr[y].rc].sz;\n\tg += 1ll * tr[tr[y].lc].sz * 1ll * tr[tr[x].rc].sz; \n\ttr[x].lc = merge(tr[x].lc, tr[y].lc);\n\ttr[x].rc = merge(tr[x].rc, tr[y].rc);\n\ttr[x].sz += tr[y].sz; \n\treturn x; \n}\nvoid ins(int nod, int l, int r, int k) {\n\ttr[nod].sz ++; \n\tif (l == r) return;\n\tint mid = (l + r) >> 1;\n\tif (k <= mid) tr[nod].lc = ++ tot, ins(tr[nod].lc, l, mid, k);\n\telse tr[nod].rc = ++ tot, ins(tr[nod].rc, mid + 1, r, k); \n}\n#undef ls\n#undef rs \nint dfs() {\n\tint w; read(w);\n\tif (w) {\n\t\trt[++ cnt] = ++ tot; \n\t\tins(rt[cnt], 1, n, w);\n\t\treturn rt[cnt]; \n\t} else {\n\t\tint nod = merge(dfs(), dfs());\n\t\tans += min(f, g);\n\t\tf = g = 0; \n\t\treturn nod; \n\t}\n}\nint main() {\n\tread(n); ans = 0ll; \n\tdfs();\n\tprintf(\"%lld\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1556436694,
        "uid": 35567,
        "name": "Ayers",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3521 \u3010[POI2011]ROT-Tree Rotations\u3011"
    },
    {
        "content": "\u975e\u7ebf\u6bb5\u6811\u5408\u5e76\u505a\u6cd5\u3002\u590d\u6742\u5ea6\u591a\u4e00\u53ea `log`\uff0c\u4f46\u662f\u597d\u5199\u3002\u6d1b\u8c37\u8fc7\u5f97\u53bb\uff0cloj \u8fc7\u4e0d\u53bb\u3002\n\n\u8df3\u8fc7\u4e0d\u91cd\u8981\u7684\u90e8\u5206\uff0c\u76f4\u8fbe\u6838\u5fc3 \u2014\u2014 \u5982\u4f55\u5728\u9012\u5f52\u65f6\u8ba1\u7b97\u4e24\u68f5\u5b50\u6811\u4e92\u76f8\u7684\u8d21\u732e\uff1f\n\n\u9898\u89e3\u533a\u6e05\u4e00\u8272\u7ebf\u6bb5\u6811\u5408\u5e76\u4ece\u503c\u57df\u89d2\u5ea6\u8003\u8651\u3002\u4f46\u662f\u663e\u7136\u542f\u53d1\u5f0f\u5408\u5e76\u4e5f\u80fd\u505a\u554a\u3002\n\n\u8003\u8651 dfs \u5b8c\u4e24\u4e2a\u5b50\u8282\u70b9\u540e\u628a\u5c0f\u7684\u5408\u5e76\u5230\u5927\u7684\u4e0a\u3002\u5bf9\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u4ece\u4e0b\u5f80\u4e0a\u5408\u5e76\u65f6\uff0c\u628a\u5c0f\u6811\u5408\u5e76\u8fdb\u5927\u6811\u4e2d\u7684\u540c\u65f6\u8ba1\u7b97\u7b54\u6848\uff0c\u7136\u540e**\u76f4\u63a5\u8ba9\u7236\u4eb2\u7ee7\u627f\u5927\u6811**\u3002\u8fd9\u91cc\u6211\u7684\u505a\u6cd5\u662f\u76f4\u63a5\u4f20\u6307\u9488\uff0c\u76f4\u63a5\u628a\u6307\u5411\u539f\u5927\u6811\u7684\u6307\u9488\u4f20\u4e0a\u53bb\u5f53\u4f5c\u8be5\u6811\u7684\u6307\u9488\u3002\u8fd9\u6837\u5c31\u505a\u5b8c\u4e86\uff0c\u7ec6\u8282\u770b\u4ee3\u7801\u3002\n\n\u8003\u8651\u590d\u6742\u5ea6\u3002\u4e00\u4e2a\u8282\u70b9\u88ab\u4ece\u4e00\u68f5\u6811\u590d\u5236\u5230\u53e6\u4e00\u68f5\u6811\u65f6\u6240\u5728\u5b50\u6811\u5927\u5c0f\u81f3\u5c11\u52a0\u500d\u3002\u56e0\u6b64\u4e00\u4e2a\u8282\u70b9\u81f3\u591a\u88ab\u590d\u5236 $\\log n$ \u6b21\uff0c\u5355\u6b21\u590d\u6742\u5ea6 $O(\\log n)$\uff0c\u56e0\u6b64\u590d\u6742\u5ea6 $O(n \\log^2 n)$\u3002\n\n\u6ce8\u610f\u5230\u4f60\u9700\u8981\u5728\u5408\u5e76\u65f6\u6c42\u51fa\u67d0\u4e2a\u5e73\u8861\u6811\u6709\u591a\u5c11\u6570\u5c0f\u4e8e\u7ed9\u5b9a\u6570\u3002\u8fd9\u4e2a\u7528 `set` \u4e0d\u884c\uff0c\u8981\u4e0a `pbds`\u3002\n\n\u4ee3\u7801\u4e0d\u5230 `1k`\uff0c\u5927\u90e8\u5206\u662f `pb_ds`\u3002\n\n[\u8fd9\u7bc7\u9898\u89e3](https://www.luogu.com.cn/blog/vocalise/solution-p3521) \u7684\u5f52\u5e76\u505a\u6cd5\u548c\u6211\u672c\u8d28\u4e00\u81f4\u3002\u4f46\u662f\u5fc5\u987b\u8981\u4fdd\u8bc1**\u5408\u5e76\u7b54\u6848\u65f6\u590d\u6742\u5ea6\u4ec5\u4e0e\u5c0f\u6811\u6709\u5173**\u624d\u80fd\u505a\u5230 $O(n \\log^2 n)$\u3002\n\n[\u8fd9\u7bc7\u9898\u89e3](https://www.luogu.com.cn/blog/75093/solution-p3521) \u7684 `dsu on tree` \u662f\u6211\u7684\u505a\u6cd5\uff0c\u5199\u5f97\u597d\u4e11\uff0c\u4f46\u8dd1\u5f97\u597d\u5feb\u3002\u6811\u72b6\u6570\u7ec4\u5e38\u6570\u5c0f `pbds` \u592a\u591a\u4e86\u3002\n\n```cpp\n#include <cstdio>\n#include <set>\n#include <algorithm>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n#define LL long long\nusing namespace std;\nusing namespace __gnu_pbds;\nconst int M = 5e5 + 5;\ntree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> s[M];\nint cnt;\nLL ans;\nint build() {\n    int x; scanf(\"%d\", &x);\n    int rt = ++cnt;\n    if(x != 0) return s[rt].insert(x), rt;\n    else {\n        int l = build(), r = build();\n        if(s[l].size() < s[r].size()) swap(l, r);\n        LL tmp = 0, tot = 1ll * s[l].size() * s[r].size();\n        for(auto u : s[r]) {\n            if(s[l].lower_bound(u) == s[l].end()) tmp += s[l].size();\n            else tmp += 1ll * s[l].order_of_key(*s[l].lower_bound(u));\n        }\n        for(auto u : s[r]) s[l].insert(u);\n        ans += min(tmp, tot - tmp);\n        return l;\n    }\n}\nint main() {\n    int n; scanf(\"%d\", &n); build();\n    printf(\"%lld\\n\", ans);\n}\n```",
        "postTime": 1673340583,
        "uid": 443664,
        "name": "Missa",
        "ccfLevel": 0,
        "title": "\u591a\u4e00\u53ea log \u4f46\u663e\u8457\u51cf\u5c11\u4ee3\u7801\u91cf\u7684\u505a\u6cd5"
    },
    {
        "content": "[\u6b22\u8fce\u8bbf\u95ee\u6211\u7684\u535a\u5ba2](https://zcdhj.org/)\n\n\u7ebf\u6bb5\u6811\u5408\u5e76 + \u8d2a\u5fc3\uff08\u5206\u6cbb\uff1f\n\n\u56e0\u4e3a\u4ea4\u6362\u67d0\u4e2a\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u53ea\u4f1a\u6539\u53d8\u5f53\u524d\u5b50\u6811\u4e2d\u7684\u53f6\u5b50\u7ed3\u70b9\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u8bf4\u6b64\u65f6\u9006\u5e8f\u5bf9\u6570\u53ea\u6709\u5b50\u6811\u4e2d\u7684\u8fd9\u90e8\u5206\u6539\u53d8\u4e86\uff0c\u4e0e\u5176\u4ed6\u53f6\u5b50\u7ed3\u70b9\u7684\u9006\u5e8f\u5bf9\u90fd\u6ca1\u6709\u53d1\u751f\u6539\u53d8\u3002\u6240\u4ee5\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5b50\u6811\u4e2d\u7684\u9006\u5e8f\u5bf9\u6570\u6700\u5c11\u662f\u4e00\u4e2a\u6b63\u786e\u7684\u8d2a\u5fc3\u7b56\u7565\u3002\n\n\u90a3\u4e48\u5982\u4f55\u8ba1\u7b97\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\u4e0e\u4e0d\u4ea4\u6362\u7684\u9006\u5e8f\u5bf9\u6570\uff1f\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u4e00\u4e2a\u503c\u57df\u7ebf\u6bb5\u6811\uff0c\u5728\u5411\u4e0a\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u524d\u7ebf\u6bb5\u6811\u4e0a\u7ed3\u70b9\u8303\u56f4 $[l,r]$ \u4f1a\u6709\u5de6\u513f\u5b50\u7ebf\u6bb5\u6811\u7684 $[l,mid]$ \u533a\u95f4\u4e0e\u53f3\u513f\u5b50\u7684 $[mid + 1, r]$ \u6784\u6210\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\u7684\u9006\u5e8f\u5bf9\uff0c\u5de6\u513f\u5b50 $[mid + 1, r]$ \u4e0e\u53f3\u513f\u5b50 $[l,mid]$ \u4f1a\u6784\u6210\u4e0d\u4ea4\u6362\u60c5\u51b5\u4e0b\u7684\u9006\u5e8f\u5bf9\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5728\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u4e24\u79cd\u60c5\u51b5\u7684\u9006\u5e8f\u5bf9\u6570\u3002\n\n\u5341\u5206\u6076\u5fc3\u7684\u662f\u8fd9\u9898\u5361\u7a7a\u95f4\uff0c\u6240\u4ee5\u8981\u8bb0\u5f97\u5783\u573e\u56de\u6536\u548c\u5f00 `long long`\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n\ntypedef long long LL;\n#define int LL\n\nconst int MAXN = 2e5;\n\nint n, ans, res1, res2;\n\nstruct Segtree {\n    int sumv;\n    Segtree *ch[2];\n    Segtree() : sumv(0) {\n        ch[0] = ch[1] = NULL;\n    }\n    Segtree(Segtree *ch1, Segtree *ch2, int _val) : sumv(_val) {\n        ch[0] = ch1;\n        ch[1] = ch2;\n    }\n};\n\ninline int read() {\n    register int x = 0;\n    register char ch = getchar();\n    while(!isdigit(ch)) ch = getchar();\n    while(isdigit(ch)) {\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x;\n}\n\nvoid insert(int pos, Segtree *&o, int l = 1, int r = n) {\n    if(o == NULL) o = new Segtree;\n    o -> sumv = o -> sumv + 1;\n    if(l == r) return;\n    int mid = (l + r) >> 1;\n    if(pos <= mid) insert(pos, o -> ch[0], l, mid);\n    else insert(pos, o -> ch[1], mid + 1, r);\n}\n\nSegtree *merge(Segtree *x, Segtree *y, int l = 1, int r = n) {\n    if(x == NULL) return y;\n    if(y == NULL) return x;\n    if(l == r) return new Segtree(NULL, NULL, x -> sumv + y -> sumv);\n    int mid = (l + r) >> 1;\n    if((x -> ch[1] != NULL) && (y -> ch[0] != NULL)) res1 += x -> ch[1] -> sumv * y -> ch[0] -> sumv;\n    if((x -> ch[0] != NULL) && (y -> ch[1] != NULL)) res2 += x -> ch[0] -> sumv * y -> ch[1] -> sumv;\n    Segtree *res = new Segtree;\n    res -> ch[0] = merge(x -> ch[0], y -> ch[0], l, mid);\n    res -> ch[1] = merge(x -> ch[1], y -> ch[1], mid + 1, r);\n    res -> sumv = x -> sumv + y -> sumv;\n    delete x;\n    delete y;\n    return res;\n}\n\nSegtree *dfs() {\n    int tmp = read();\n    Segtree *t;\n    if(tmp != 0) {\n        t = new Segtree;\n        insert(tmp, t);\n    } else {\n        t = merge(dfs(), dfs());\n        ans += std::min(res1, res2);\n        res1 = res2 = 0;\n    }\n    return t;\n}\n\nsigned main() {\n    n = read();\n    dfs();\n    printf(\"%lld\\n\", ans);\n    return 0;\t\n}\n```\n\n",
        "postTime": 1543334452,
        "uid": 24878,
        "name": "iodwad",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3521 \u3010[POI2011]ROT-Tree Rotations\u3011"
    }
]