[
    {
        "content": "[P3224\u6c38\u65e0\u4e61](https://www.luogu.org/problemnew/show/P3224)\n\n\u4e3b\u4f53\u601d\u8def\uff1a\u6743\u503c\u7ebf\u6bb5\u6811+\u7ebf\u6bb5\u6811\u5408\u5e76\uff08\u65e0\u6307\u9488\uff09~~\u592a\u84bb\u4e0d\u4f1a\u6307\u9488QAQ~~\n\n[\u4ee3\u7801\u6548\u7387\uff1a859ms](https://www.luogu.org/recordnew/show/20083009)\n\u5373\u4f7f\u7528\u4e86O2\u548c\u5e38\u6570\u4f18\u5316\uff0c\u8fd8\u662f\u5dee\u4e0d\u591a\u662f\u6700\u52a3\u89e3\u7684\u7a0b\u5ea6\uff0c\u6240\u4ee5\u8bf7\u8c28\u614e\u53c2\u8003QAQ\n\n\n------------\n\u5ffd\u7136\u53d1\u73b0\uff1a\u8fd9\u91cc\u8fd8\u6ca1\u6709\u65e0\u6307\u9488\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u5199\u6cd5\u55f7\uff01\u4e8e\u662f\u6211\u5c31\u6765\u5566QWQ\n\n\u867d\u7136\u6bd4\u5e73\u8861\u6811\u8981\u6162\uff0c\u4f46\u662f\u6bd4\u5e73\u8861\u6811\u597d\u5b66\u591a\u5566QWQ\n\n\u9898\u76ee\u4e2d\u8981\u6c42\u6211\u4eec\u652f\u6301\u67e5\u8be2\u7b2ck\u5c0f\u503c\uff0c\u6240\u4ee5\u5bb9\u6613\u60f3\u5230**\u6743\u503c\u7ebf\u6bb5\u6811**\n\n\u7136\u540e\u53c8\u6709\u5408\u5e76\u64cd\u4f5c\uff0c\u5bb9\u6613\u60f3\u5230**\u7ebf\u6bb5\u6811\u5408\u5e76**\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u505a\u7684\u65f6\u5019\u9700\u8981\u7ef4\u62a4\u4e00\u4e0b\u8fde\u901a\u6027\uff0c\u5bb9\u6613\u60f3\u5230**\u5e76\u67e5\u96c6**\n\n\u55ef\uff0c\u7136\u540e\u6211\u4eec\u5c31\u80fd\u901a\u8fc7\u672c\u9898\u4e86\uff01\n\n\u8fd8\u6709\u51e0\u70b9\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a\n\n- **\u5e76\u67e5\u96c6\u7684\u5408\u5e76**\u548c**\u7ebf\u6bb5\u6811\u7684\u5408\u5e76**\u65b9\u5411\u8981\u4e00\u81f4\n\n\u6bd4\u5982\u8bf4\u5e76\u67e5\u96c6\u662ff[b]=a,\u90a3\u4e48\u5408\u5e76\u7ebf\u6bb5\u6811\u4e5f\u9700\u8981b\u5411a\u5408\u5e76\u7684\u6837\u5b50\u3002\n\n- \u67e5\u8be2\u7684\u65f6\u5019\uff0c\u8bb0\u5f97\u6c42\u51fa**\u5e76\u67e5\u96c6\u7684\u6839**\u518d\u67e5\u8be2\n\n\u55ef\uff0c\u6ca1\u5566\uff01\u6765\u770b\u4ee3\u7801QWQ\n\n\u5982\u679c\u6709\u5e2e\u5230\u4f60\uff0c\u8bb0\u5f97\u70b9\u8d5e\u54e6qwq\n\n```cpp\n#include <stdio.h>\n#include <algorithm>\nusing namespace std;\nconst int N=100010;\nconst int M=3200010;\nint n,m,q,cnt,rt[N],f[N];\nint ls[M],rs[M],id[M],sum[M];\nchar ch[5];\ninline int read(){\n    int x=0,w=1;\n    char ch;ch=getchar();\n    while(ch<'0'||ch>'9') {if(ch=='-') w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9') {x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n    return x*w;\n}\ninline int getf(int x){return x==f[x]?x:f[x]=getf(f[x]);}\ninline void update(int a){sum[a]=sum[ls[a]]+sum[rs[a]];}\ninline int add(int a,int x,int y,int pos,int idx){\n\tif(!a) a=++cnt;\n\tif(x==y) {id[a]=idx;sum[a]++;return a;}\n\tint mid=(x+y)>>1;\n\tif(pos<=mid) ls[a]=add(ls[a],x,mid,pos,idx);\n\telse rs[a]=add(rs[a],mid+1,y,pos,idx);\n\tupdate(a);\n\treturn a;\n}\ninline int merge(int a,int b,int x,int y){\n\tif(!a) return b;\n\tif(!b) return a;\n\tif(x==y) {if(id[b]) {id[a]=id[b];sum[a]+=sum[b];}return a;}\n\tint mid=(x+y)>>1;\n\tls[a]=merge(ls[a],ls[b],x,mid);\n\trs[a]=merge(rs[a],rs[b],mid+1,y);\n\tupdate(a);\n\treturn a;\n}\ninline int query(int a,int k,int x,int y){\n\tint ans;\n\tif(sum[a]<k||!a) return 0;\n\tif(x==y) return id[a];\n\tint mid=(x+y)>>1;\n\tif(k<=sum[ls[a]]) ans=query(ls[a],k,x,mid);\n\telse ans=query(rs[a],k-sum[ls[a]],mid+1,y);\n\treturn ans;\n}\nint main()\n{\n\tint x,y;\n\tn=read();m=read();\n\tfor(register int i=1;i<=n;i++){\n\t\tf[i]=i;\n\t\tx=read();\n\t\trt[i]=add(rt[i],1,n,x,i);\n\t}\n\tfor(register int i=1;i<=m;i++){\n\t\tx=read();y=read();\n\t\tx=getf(x);y=getf(y);\n\t\tf[y]=x;\n\t\trt[x]=merge(rt[x],rt[y],1,n);\n\t}\n\tq=read();\n\twhile(q--){\n\t\tscanf(\"%s\",ch);\n\t\tif(ch[0]=='B'){\n\t\t\tx=read();y=read();\n\t\t\tx=getf(x);y=getf(y);\n\t\t\tif(x==y) continue;\n\t\t\tf[y]=x;\n\t\t\trt[x]=merge(rt[x],rt[y],1,n);\n\t\t}\n\t\telse{\n\t\t\tx=read();y=read();\n\t\t\tx=getf(x);\n\t\t\tint ans=query(rt[x],y,1,n);\n\t\t\tif(!ans) printf(\"-1\\n\");\n\t\t\telse printf(\"%d\\n\",ans);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n \n\n------------\n\u540e\u8bb0\uff1a\n\n\u6211\u662f\u4eca\u5929\u624d\u53d1\u73b0\u81ea\u5df1\u4e0d\u4f1a\u6743\u503c\u7ebf\u6bb5\u6811\u7684\uff0c\u8fd9\u4e2a\u5199\u6cd5\u4e5f\u662f\u81ea\u5df1\u6478\u7d22\u51fa\u6765\u7684\uff0c\u5982\u679c\u6709\u5199\u7684\u4e0d\u51c6\u786e\u7684\u5730\u65b9\uff0c\u8bf7\u5927\u4f6c\u591a\u591a\u6307\u6b63\u5566QAQ",
        "postTime": 1561562154,
        "uid": 101526,
        "name": "\u6f5c\u7fce",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "~~\u6211\u7684splay\u4e0d\u7528\u6307\u9488\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u5757\uff1f\uff1f\uff1f\uff08\u5176\u5b9e\u4e5f\u4e0d\u662f\u5f88\u5feb\uff09~~\n\n\u9996\u5148\u5bf9\u4e8e\u8fde\u901a\u6027\uff0c\u5f88\u663e\u7136\u7ef4\u62a4\u4e00\u4e2a\u5e76\u67e5\u96c6\u6765\u8003\u8651\u3002\n\n\u90a3\u4e48\uff0c\u73b0\u5728\u7684\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u67e5\u8be2\u8054\u901a\u5757\u7b2ck\u5927\n\n\u8fd9\u4e2a\u73a9\u610f\u663e\u7136\u662f\u4e2a\u52a8\u6001\u533a\u95f4\uff0c\u800c\u4e14\u5927\u5c0f\u8fd8\u4f1a\u53d8\u5316\uff0c\u6240\u4ee5\u8003\u8651\u4f7f\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u3002\n\n\u90a3\u4e48\uff0c\u6784\u5efaN\u68f5splay\uff0c\u6bcf\u6b21\u8054\u901a\u4e24\u4e2a\u4e0d\u8fde\u901a\u7684\u5757\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u542f\u53d1\u5f0f\u5408\u5e76\u66b4\u529b\u5408\u5e76\uff0c\u6bcf\u4e2a\u70b9\u6700\u591a\u88ab\u5408\u5e76logn\u6b21\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u662f\u6b63\u786e\u7684\u3002\n\n\u5982\u679c\u4e24\u4e2a\u70b9\u5df2\u7ecf\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u90a3\u4e48\u4e0d\u9700\u8981\u518d\u6b21\u5408\u5e76\uff0c\u53ef\u4ee5\u76f4\u63a5\u5ffd\u7565\u64cd\u4f5c\u3002\n\n~~\u662f\u4e0d\u662f\u8fd8\u6709\u542f\u53d1\u5f0f\u5408\u5e76\u4ee5\u5916\u7684\u5408\u5e76\u65b9\u6cd5\uff1f\uff1f\uff1f\u6b22\u8fce\u5927\u4f6c\u6307\u6559orz~~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#define MAX 500000\ninline int read()\n{\n    register int x=0,t=1;\n    register char ch=getchar();\n    while(ch!='-'&&(ch<'0'||ch>'9'))ch=getchar();\n    if(ch=='-'){t=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-48;ch=getchar();}\n    return x*t;\n}\nstruct Node\n{\n    int ch[2];\n    int val,ff,size;\n}t[MAX];\nint f[MAX];\nint root[MAX],tot;\nint hh[MAX];\nint N,M;\nint getf(int x)\n{\n    return x==f[x]?x:f[x]=getf(f[x]);\n}\ninline void pushup(int x)\n{\n    t[x].size=t[t[x].ch[0]].size+t[t[x].ch[1]].size+1;\n}\n//1..N\u5206\u522b\u4e3aN\u68f5splay\u76840\u8282\u70b9\n//\u6bcf\u6b21\u90fd\u5bf9splay\u8fdb\u884c\u5408\u5e76\ninline void rotate(int x)\n{\n    int y=t[x].ff;\n    int z=t[y].ff;\n    int k=t[y].ch[1]==x;\n    t[z].ch[t[z].ch[1]==y]=x;t[x].ff=z;\n    t[y].ch[k]=t[x].ch[k^1];t[t[x].ch[k^1]].ff=y;\n    t[x].ch[k^1]=y;t[y].ff=x;\n    pushup(y);pushup(x);\n}\ninline void splay(int x,int goal)\n{\n    while(t[x].ff!=goal)\n    {\n        int y=t[x].ff,z=t[y].ff;\n        if(z!=goal)\n            (t[z].ch[0]==y)^(t[y].ch[0]==x)?rotate(x):rotate(y);\n        rotate(x);\n    }\n    if(goal<=N)root[goal]=x;//\u5982\u679c\u662f\u67d0\u4e00\u4e2a0\u8282\u70b9\u7684\u4e0b\u65b9\uff0c\u5219\u66f4\u65b0\u5f53\u524dsplay\u7684\u6839\u8282\u70b9\n}\ninline void insert(int x,int bh)\n{\n    int u=root[bh],ff=bh;\n    while(u&&t[u].val!=x)\n        ff=u,u=t[u].ch[x>t[u].val];\n    u=++tot;\n    t[u].size=1;\n    t[u].ff=ff;\n    if(ff>N)\n        t[ff].ch[x>t[ff].val]=u;\n    t[u].val=x;t[u].ch[0]=t[u].ch[1]=0;\n    splay(u,bh);\n}\nvoid DFS(int u,int kk)//\u904d\u5386\u6574\u9897splay\n{\n    if(t[u].ch[0])DFS(t[u].ch[0],kk);\n    if(t[u].ch[1])DFS(t[u].ch[1],kk);\n    insert(t[u].val,kk);//\u5408\u5e76\u5230\u53e6\u5916\u4e00\u9897splay\u4e2d\n}\ninline void Merge(int a,int b)\n{\n    int x=getf(a),y=getf(b);\n    if(x==y)return;//\u5df2\u7ecf\u5728\u4e00\u4e2a\u96c6\u5408\u5185\n    if(t[root[x]].size>t[root[y]].size)swap(x,y);//\u5f3a\u5236\u5c06\u5c0f\u7684\u5408\u5e76\u5230\u5927\u7684\n    f[x]=y;\n    DFS(root[x],y);\n}\nint kth(int bh,int k)\n{\n    int u=root[bh];\n    if(t[u].size<k)return -1;\n    while(233)\n    {\n        if(t[t[u].ch[0]].size+1<k)//\u5728\u53f3\u5b50\u6811\u4e2d\u627e\n        {\n            k-=t[t[u].ch[0]].size+1;\n            u=t[u].ch[1];\n        }\n        else\n            if(t[t[u].ch[0]].size>=k)//\u5728\u5de6\u5b50\u6811\u4e2d\u627e\n                u=t[u].ch[0];\n            else\n                return t[u].val;//\u5f53\u524d\u8282\u70b9\n    }\n}\nint main()\n{\n    N=read();M=read();\n    for(int i=1;i<=N;++i)root[i]=i+N,f[i]=i;\n    tot=N+N;\n    for(int i=1;i<=N;++i)\n    {\n        int x=read();\n        hh[x]=i;\n        t[i+N].val=x;t[i+N].size=1;t[i+N].ff=i;\n    }\n    for(int i=1;i<=M;++i)\n    {\n        int x=read(),y=read();\n        Merge(x,y);\n    }\n    int Q=read();\n    while(Q--)\n    {\n        char ch[3];int a,b;\n        scanf(\"%s\",ch);a=read(),b=read();\n        if(ch[0]=='B')\n        {\n            Merge(a,b);\n        }\n        else\n        {\n            int ans=kth(getf(a),b);\n            printf(\"%d\\n\",ans==-1?ans:hh[ans]);\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1503662654,
        "uid": 21283,
        "name": "yybyyb",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u91cc\u9762\u4e00\u5806\u6743\u503c\u7ebf\u6bb5\u6811\u3002\u3002\u3002\n\n\n\u4e0d\u884c\u6211\u8981\u544a\u8bc9\u81ea\u5df1\u8fd9\u662f\u4e00\u9053\u5e73\u8861\u6811\u7684\u9898\uff01\n\n\n\u4e8e\u662f\u6211\u5c31\u662f\u8981\u5199\u5e73\u8861\u6811\uff01\n\n\n\u7136\u800c\u53c8\u4e00\u770b\u9898\u89e3\n\n\n\u7adf\u7136\u6ca1\u6709\u7528fhq Treap\u505a\u7684\n\n\n\u4e8e\u662f\u8d76\u7d27\u6765\u4e0a\u4e00\u53d1\n\n\n\u601d\u8def\uff1a\n\n\nfhq Treap\u52a0\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u6bcf\u6b21\u628a\u5c0f\u6811\u8282\u70b9\u62c6\u4e0b\u6765\u52a0\u5230\u5927\u6811\u4e0a\n\n\n\u4f46\u662f\u5176\u5b9e\u4e0d\u7528\u65b0\u5efa\u8282\u70b9\uff0c\u4e5f\u4e0d\u7528\u5199\u961f\u5217\uff0c\u76f4\u63a5\u628ason\u6e05\u7a7a\u5373\u53ef\uff0c\u7136\u540e\u518d\u52a0\u8fdb\u53bb\n\n\n\u4ee3\u7801\uff1a\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n//by \u51cf\u7ef4\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<queue>\n#include<cstdlib>\n#include<ctime>\n#include<cmath>\n#include<map>\n#include<bitset>\n#include<algorithm>\n#define ll long long\n#define maxn 100005\nusing namespace std;\nint n,m,asd,cnt,rt[maxn],sz[maxn],siz[maxn],son[maxn][2],pri[maxn],val[maxn],ys[maxn];\nint find(int x)\n{\n    if(rt[x]==x)return x;\n    rt[x]=find(rt[x]);\n    return rt[x];\n}\nvoid upda(int x)\n{\n    siz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n}\nvoid spli(int now,int k,int &x,int &y)\n{\n    if(!now)x=y=0;\n    else{\n        if(val[now]<=k)\n            x=now,spli(son[now][1],k,son[now][1],y);\n        else\n            y=now,spli(son[now][0],k,x,son[now][0]);\n        upda(now);\n    }\n}\nint merge(int x,int y)\n{\n    if(!x||!y)return x+y;\n    if(pri[x]<pri[y])\n    {\n        son[x][1]=merge(son[x][1],y);\n        upda(x);\n        return x;\n    }else{\n        son[y][0]=merge(x,son[y][0]);\n        upda(y);\n        return y;\n    }\n}\nvoid insert(int &root,int x)\n{\n    int a,b;\n    int v=val[x];\n    spli(root,v,a,b);\n    root=merge(merge(a,x),b);\n}\nvoid dfs(int x,int &y)\n{\n    if(!x)return ;\n    dfs(son[x][0],y);\n    dfs(son[x][1],y);\n    son[x][0]=son[x][1]=0;\n    insert(y,x);\n}\nint hebing(int x,int y)\n{\n    if(siz[x]>siz[y])swap(x,y);\n    dfs(x,y);\n    return y;\n}\nint kth(int now,int k)\n{\n    while(1)\n    {\n        if(k<=siz[son[now][0]])\n            now=son[now][0];\n        else if(k==siz[son[now][0]]+1)\n            return now;\n        else\n            k-=siz[son[now][0]]+1,now=son[now][1];\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)scanf(\"%d\",&val[i]),rt[i]=i,pri[i]=rand(),siz[i]=sz[i]=1,ys[val[i]]=i;\n    cnt=n;\n    for(int i=1,a,b,c;i<=m;++i)\n    {\n        scanf(\"%d%d\",&a,&b);\n        if(find(a)==find(b))continue;\n        c=hebing(rt[a],rt[b]);\n        rt[find(a)]=rt[find(b)]=c;\n        rt[c]=c;\n    }\n    scanf(\"%d\",&asd);\n    char ch[5];\n    for(int i=1,a,b,c;i<=asd;++i)\n    {\n        scanf(\"%s%d%d\",ch,&a,&b);\n        if(ch[0]=='B'){\n            if(find(a)==find(b))continue;\n            c=hebing(rt[a],rt[b]);\n            rt[find(a)]=rt[find(b)]=c;\n            rt[c]=c;\n        }else{\n            if(siz[find(a)]<b){\n                printf(\"-1\\n\");\n                continue;\n            }\n            printf(\"%d\\n\",ys[val[kth(find(a),b)]]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1511582609,
        "uid": 35870,
        "name": "\u51cf\u7ef4",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u5404\u4e2a\u70b9\u7684\u8054\u901a\u5173\u7cfb\uff0c\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u5404\u4e2a\u8054\u901a\u5757\u7684\u6240\u6709\u91cd\u8981\u7a0b\u5ea6\uff0c\u8fde\u63a5\u4e24\u4e2a\u8054\u901a\u5757\u65f6\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n\u9020\u8f6e\u5b50\u4ec0\u4e48\u7684\u6700\u8ba8\u538c\u4e86\uff0c\u76f4\u63a5\u4e0apb_ds\u554a\n\n\u867d\u7136pb_ds\u662f\u6709join\u8fd9\u4e2a\u65b9\u6cd5\u7684\uff0c\u7136\u800c\u4e24\u68f5\u6811\u80fd\u5408\u5e76\u7684\u5fc5\u8981\u6761\u4ef6\u662f\u5408\u5e76\u7684\u6811\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u5c0f\u4e8e\u88ab\u5408\u5e76\u7684\u6811\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5982\n\u679c\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u89c4\u5219\uff0c\u90a3\u4e48\u5408\u5e76\u7684\u65f6\u5019\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\n\n\u6240\u4ee5\u8fd8\u9700\u8981\u624b\u52a8\u628a\u5c0f\u6811\u542f\u53d1\u5f0f\u5408\u5e76\u5230\u5927\u6811\u4e0a\u3002\n\n```\n#include<cstdio>\n#include<cctype>\n#include<algorithm>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/tree_policy.hpp>\n//\u628a\u8fd9\u4e24\u4e2a\u4e1c\u897f\u80cc\u4e0b\u6765\nint Read()\n{\n\tint x=0;char c=getchar();\n\twhile(!isdigit(c))\n\t\tc=getchar();\n\twhile(isdigit(c))\n\t{\n\t\tx=x*10+(c^48);\n\t\tc=getchar();\n\t}\n\treturn x;\n}\n\nusing namespace __gnu_pbds;\n//\u628a\u8fd9\u4e2a\u547d\u540d\u7a7a\u95f4\u80cc\u4e0b\u6765\nint imp[100005],fa[100005];\n//\u91cd\u8981\u7a0b\u5ea6\uff0c\u5e76\u67e5\u96c6\nvoid init_set(int n)\n{\n\tfor(int i=1;i<=n;++i)\n\t\tfa[i]=i;\n}\n\nint find(int x)\n{\n\treturn x==fa[x]?x:fa[x]=find(fa[x]);\n}\n\nvoid uni_set(int x,int y)\n{\n\tx=find(x),y=find(y);\n\tfa[x]=y;\n}\n\ntypedef tree<int,int,std::greater<int>,rb_tree_tag,\n\t tree_order_statistics_node_update> Tree;\nTree block[100005];\n//\u6bcf\u4e2a\u70b9\u4e00\u68f5\u7ea2\u9ed1\u6811\uff0c\u8d44\u74f7\u67e5\u8be2\u7b2ck\u5927\nvoid init_tree(int n)\n{\n\tfor(int i=1;i<=n;++i)\n\t\tblock[find(i)].insert(std::pair<int,int>(imp[i],i));\n}//\u4ee5\u91cd\u8981\u5ea6\u4e3a\u5173\u952e\u5b57\n\nvoid uni_tree(int x,int y)\n{//\u542f\u53d1\u5f0f\u5408\u5e76\n\tx=fa[x],y=fa[y];\n\tif(x==y)//\u5982\u679c\u5df2\u5728\u540c\u4e00\u8054\u901a\u5757\u4e2d\uff0c\u76f4\u63a5\u8fd4\u56de\n\t\treturn;\n\tint size_x=block[x].size(),size_y=block[y].size();\n\tif(size_x>size_y)\n\t\tstd::swap(x,y);//x\u66f4\u5c0f\n\tTree::point_iterator it=block[x].begin();\n\tfor(;it!=block[x].end();++it)\n\t{\n\t\tblock[y].insert(std::pair<int,int>(it->first,it->second));\n\t\tblock[x].erase(it);\n\t}\n\tuni_set(x,y);\n}\n\nint main()\n{\n\tint n=Read(),m=Read();\n\tinit_set(n);\n\tfor(int i=1;i<=n;++i)\n\t\timp[i]=Read();\n\tfor(int i=0;i<m;++i)\n\t\tuni_set(Read(),Read());\n\tinit_tree(n);\n\tint q=Read();\n\tchar opt[5];\n\tfor(int i=0;i<q;++i)\n\t{\n\t\tscanf(\"%s\",opt);\n\t\tif(opt[0]=='B')\n\t\t\tuni_tree(Read(),Read());\n\t\telse\n\t\t{\n\t\t\tint father=find(Read());\n\t\t\tint k=Read();\n\t\t\tif(k>block[father].size())\n\t\t\t\tputs(\"-1\");\n\t\t\telse//\u6ce8\u610f\uff0cfind_by_order\u627e\u7684\u662f\u7b2ck\u5927\uff0c\u800c\u4e14\u4ece0\u5f00\u59cb\u6392\n\t\t\t\tprintf(\"%d\\n\",block[father].find_by_order(block[father].size()-k)->second);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1529563867,
        "uid": 53374,
        "name": "SuperJvRuo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "\u4e3a\u5565\u8fd9\u4e48\u591a\u9898\u89e3\u6ca1\u4e00\u4e2a\u6839\u53f7\u554a\uff0c\u6811\u636e\u7ed3\u6784\u4e13\u9898\u7684\u9898\u76ee\u6211\u5c31\u4e0d\u7528\u6811\u636e\u7ed3\u6784\u548b\u4e86\u3002\n\n\u8003\u8651\u6309\u7167\u503c\u5206\u5757\uff0c\u5b9a\u4e49\u5757\u957f $p$\uff0c\u5c06\u9664 $p$ \u503c\u76f8\u540c\u7684\u8ba1\u5165\u540c\u4e00\u4e2a $siz$ \u6570\u7ec4\u4e2d\uff0c\u5408\u5e76\u65f6\u5c06\u6240\u6709 $siz$ \u52a0\u4e0a\u3002\n\n\u67e5\u8be2\u65f6\uff0c\u5148\u679a\u4e3e\u5757\u7684\u4f4d\u7f6e\uff08\u5373\u9664\u4ee5 $p$ \u540e\u7684\u503c\uff09\uff0c\u7136\u540e\u5728\u5f53\u524d\u5757\u4e2d\u4e00\u4e2a\u4e00\u4e2a\u679a\u4e3e\u662f\u5426\u4e0e\u5f53\u524d\u70b9\u8054\u901a\u5373\u53ef\uff0c\u590d\u6742\u5ea6 $O(n\\sqrt{n})$\u3002\n\n$p = 300$ \u65f6\u9700\u8981\u5f00 $3.3\\times 10^7$ \u4e2a $\\operatorname{int}$\uff0c\u4f7f\u7528\u7a7a\u95f4\u7565\u5927\u4e8e $125\\operatorname{MB}$\u3002\u6240\u4ee5\u9002\u5f53\u4e0a\u8c03 $p$ \u51cf\u5c11\u5757\u6570\u5373\u53ef\uff0c\u6216\u8005\u4f7f\u7528 $\\operatorname{short}$ \u5b58\u50a8\u3002\n\n\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define pii pair<int, int>\n#define fi first\n#define se second\n#define mp make_pair\nusing namespace std;\nconst int N = 1e5 + 7, mod = 320;\nint n, m, q, w[N], o[N], fa[N];\nshort siz[N][mod + 7];\nlong long cnt;\nint find(int x){\n\tif(fa[x] == x) return x;\n\treturn fa[x] = find(fa[x]);\n}\nvoid merge(int x, int y){\n\tint fx = find(x), fy = find(y);\n\tfa[fy] = fx;\n\tfor(int i = 0; i < mod; i++) siz[fx][i] += siz[fy][i], siz[fy][i] = 0;\n\treturn;\n}\nint query(int x, int y){\n\tfor(int i = 0; i < mod; i++){\n\t\tif(siz[x][i] < y) y -= siz[x][i];\n\t\telse{\n\t\t\tfor(int j = i * mod; ; j++){\n\t\t\t\tif(find(o[j]) == x){\n\t\t\t\t\tif(y == 1) return j;\n\t\t\t\t\ty--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0), cout.tie(0);\n\tcin >> n >> m;\n\to[0] = -1;\n\tfor(int i = 1; i <= n; i++) cin >> w[i], o[w[i]] = i, fa[i] = i, siz[i][w[i] / mod] = 1;\n\tfor(int x, y, i = 1; i <= m; i++){\n\t\tcin >> x >> y;\n\t\tmerge(x, y);\n\t}\n\tcin >> q;\n\tchar op;\n\tfor(int x, y, i = 1; i <= q; i++){\n\t\tcin >> op >> x >> y;\n\t\tif(op == 'Q') cout << o[query(find(x), y)] << '\\n';\n\t\telse merge(x, y);\n\t}\n}\n```\n",
        "postTime": 1663559986,
        "uid": 297894,
        "name": "NaOH_Frog",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5b9e\u9645\u4e0a\u4e00\u6ce2\u7ebf\u6bb5\u6811\u5408\u5e76+\u5e76\u67e5\u96c6\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5f53\u5c9bx\u5230\u5c9by\u6709\u4e00\u6761\u8def\u65f6\uff0c\u5c31\u5c06\u5c9bx\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u5230\u5c9by\uff0c\u5e76\u96c6\u3002\n\n\u5408\u5e76\u65b9\u6cd5\u548c\u5efa\u6811\u65b9\u6cd5\u5b9e\u9645\u548cP3834\u4e3b\u5e2d\u6811\u6a21\u677f\u5dee\u4e0d\u591a\uff0c\u533a\u522b\u5982\u4e0b\uff1a\n\n\u4e00\u4e2a\u662f\u4e0e\u524d\u4e00\u4e2a\u70b9\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u4e00\u4e2a\u662f\u4e0e\u6709\u8def\u7684\u70b9\u5408\u5e76\uff1b\n\n\u4e00\u4e2a\u662f\u67e5\u8be2\u533a\u95f4\u4e00\u4e2a\u662f\u67e5\u8be2\u4e00x\u7684\u7956\u5148\u4e3a\u6839\u7684\u7ebf\u6bb5\u6811\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u8be2\u95ee\uff0c\u5408\u5e76\uff0c\u5efa\u6811\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<string>\n#define rep(x,a,b) for (int x=int(a);x<=(int)(b);x++)\n#define maxn 100005\nusing namespace std;\ninline int rd(){\n    int x=0;int ch=getchar(),f=1;\n    while (!isdigit(ch)&&(ch!='-')&&(ch!=EOF)) ch=getchar();\n    if (ch=='-'){f=-1;ch=getchar();}\n    while (isdigit(ch)){x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n    return x*f;\n}\ninline void rt(int x){\n    if (x<0) putchar('-'),x=-x;\n    if (x>=10) rt(x/10),putchar(x%10+'0');\n        else putchar(x+'0');\n}   //\u6765\u81ea\u5927\u4f6c\u7684\u8bfb\u4f18\u8f93\u4f18\nstruct zxy\n{\n    int ls,rs,sum;\n}tr[6000000];\nint root[maxn],n,m,f[maxn],cnt,a[maxn],num[maxn];\nint find(int v)\n{\n    if (f[v]!=v) f[v]=find(f[v]);\n    return f[v];\n```\n}//\u5e76\u67e5\u96c6\u6c42\u7956\u5148\u51fd\u6570\n```cpp\nvoid Link(int &u,int l,int r,int p)\n{\n    if (!u) u=++cnt;//\u52a8\u6001\u5f00\u70b9\n    tr[u].sum++;\n    if (l==r) return;\n    int mid=(l+r)>>1;\n    if (p<=mid) Link(tr[u].ls,l,mid,p);\n    else Link(tr[u].rs,mid+1,r,p);\n```\n}//\u5f00\u70b9\n```cpp\nvoid Merge(int &u1,int u2)\n{\n    if (!u1) {u1=u2; return ;}//u1\u4e3a\u7a7a\uff0c\u76f4\u63a5\u4ee5u2\u4e3a\u513f\u5b50\n    if (!u2) return ;//u2\u4e3a\u7a7a\uff0c\u76f4\u63a5\u9000\u51fa\n    tr[u1].sum+=tr[u2].sum;//\u6743\u503c\u76f8\u52a0\n    Merge(tr[u1].ls,tr[u2].ls);\n    Merge(tr[u1].rs,tr[u2].rs);\n```\n}//\u7ebf\u6bb5\u6811u2\u5408\u5e76\u5230u1\n```cpp\nint query(int l,int r,int u,int k)\n{\n    if (l==r) return num[l];\n    int c=tr[tr[u].ls].sum;//\u5de6\u513f\u5b50\u7684\u6743\u503c\n    int mid=l+r>>1;\n    if (k<=c) return query(l,mid,tr[u].ls,k);\n    //\u82e5\u6bd4K\u5927\uff0ck\u5c31\u5728\u5de6\u513f\u5b50\uff0c\u9012\u5f52\u5de6\u513f\u5b50\n    else return query(mid+1,r,tr[u].rs,k-c);\n    //\u5426\u5219\u5728\u53f3\u513f\u5b50\uff0ck\u5148\u51cf\u53bb\u5de6\u513f\u5b50\u90e8\u5206\uff0c\u518d\u9012\u5f52\u53f3\u513f\u5b50\n}\nint main()\n{\n    n=rd(),m=rd();\n    rep(i,1,n) f[i]=i;\n    rep(i,1,n) {\n        a[i]=rd();num[a[i]]=i;\n        Link(root[i],1,n,a[i]);\n```\n}//\u8bfb\u5165\u4e00\u4e2a\u70b9\u5c31\u52a0\u4e00\u4e2a\uff0c\u5efa\u4e00\u9897\u6811\uff08\u5b9e\u9645\u4e0a\u662f\u4e00\u6761\u94fe\uff09\n```cpp\n    rep(i,1,m) \n    {\n        int x=rd(),y=rd();\n        Merge(root[find(y)],root[find(x)]);\n        f[find(x)]=f[find(y)];\n```\n}//\u539f\u6765\u7684\u9053\u8def\u5408\u5e76\n```cpp\n    int que=rd();\n    rep(i,1,que)\n    {\n        char ch[500];\n        scanf(\"%s\",ch);\n        //\u7279\u522b\u6ce8\u610f\uff1a\u4e0d\u80fd\u7528\u5b57\u7b26\u8bfb\uff08~~\u5751\u4e86\u6211\u4e09\u904d\u63d0\u4ea4~~\uff09\n        //P\u515a\u6ce8\u610f\uff1a\u540e\u9762\u7684\u4e24\u4e2a\u6570\u5b57\u4e5f\u4f1a\u88ab\u4e00\u8d77\u8bfb\u5165\n        int x=rd(),y=rd();\n        if (ch[0]=='B')\n        Merge(root[find(y)],root[find(x)]),f[find(x)]=f[find(y)];\n        if (ch[0]=='Q') \n        if (tr[root[find(x)]].sum<y) rt(-1),putchar('\\n');\n        //\u5982\u679c\u603b\u6743\u503c\u5c0f\u4e8e\u9700\u6c42\u7684\u6743\u503c\uff0c\u8f93-1\n        else rt(query(1,n,root[find(x)],y)),putchar('\\n');\n    }\n    return 0;\n}\n\u521a\u8fc7pj\u7684\u849f\u84bb\u7684\u4e00\u7bc7\u9898\u89e3\uff0c\u5927\u4f6c\u52ff\u55b7\n```",
        "postTime": 1514706437,
        "uid": 32404,
        "name": "zxy_hhhh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "\n>\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u4f60n\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6709\u6743\u503ck\uff0c\u73b0\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\u5c06\u4e24\u4e2a\u70b9\u6240\u5728\u8054\u901a\u5757\u5408\u5e76\uff0c\u67e5\u8be2\u67d0\u4e2a\u70b9\u6240\u5728\u8054\u901a\u5757\u6743\u503c\u7b2ck\u5c0f\u662f\u54ea\u4e2a\u6570\n\n\u4e2a\u4ebaBlog\u5728[\u8fd9\u91cc](http://blog.csdn.net/WADuan2/article/details/78932253)\n\n\n###\u7ebf\u6bb5\u6811\u89e3\u6cd5\n\n\n\u8fd9\u9898\u8f93\u51fa\u7684\u662f\u70b9\u7684\u7f16\u53f7\u4e0d\u662f\u70b9\u7684\u503c....\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5f00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5408\u5e76\u64cd\u4f5c\u7528\u5e76\u67e5\u96c6\u67e5\u627e\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\n\n\u67e5\u8be2\u64cd\u4f5c\u662f\u6743\u503c\u7ebf\u6bb5\u6811\u57fa\u672c\u64cd\u4f5c\uff0c\u627e\u7b2c$k$\u5c0f\u7684\u6570\u65f6\uff0c\u5982\u679c\u5de6\u513f\u5b50\u7684\u6570\u8d85\u8fc7k\u4e2a\u5c31\u5728\u5de6\u513f\u5b50\u91cc\uff0c\u5426\u5219\u53bb\u53f3\u513f\u5b50\u627e\u7b2c$k-ls->siz$\u7684\u6570\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<ctype.h>\n#include<cstdio>\n#define N 100050\nusing namespace std;\nconst int INF=10000000;\ninline int read(){\n    int x=0,f=1;char c;\n    do c=getchar(),f=c=='-'?-1:f; while(!isdigit(c));\n    do x=(x<<3)+(x<<1)+c-'0',c=getchar(); while(isdigit(c));\n    return x*f;\n}\nint n,m,x,y,fx,fy,t;\nint f[N],pre[N];\nchar s[25];\nstruct Node{\n    int l,r,siz;\n    Node *ls,*rs;\n    Node();\n    inline void maintain(){\n        siz=ls->siz+rs->siz;\n    }\n}*root[N],*null;\nNode::Node(){\n    ls=rs=null;\n}\nint Find(int x){\n    return f[x]==x?f[x]:f[x]=Find(f[x]);\n}\ninline void init(){\n    null=new Node;\n    null->l=null->r=-1;\n    null->siz=0;\n    null->ls=null->rs=null;\n}\nvoid Merge(Node *&x,Node *&y){///\u7ebf\u6bb5\u6811\u5408\u5e76\n    if(y==null) return;\n    if(x==null){\n        x=y;\n        return;\n    }\n    x->siz+=y->siz;\n    Merge(x->ls,y->ls);Merge(x->rs,y->rs);\n}\nvoid Add(int x,int l,int r,Node *&k){\n    if(k==null){\n        k=new Node;\n        k->l=l;k->r=r;\n    }\n    if(k->l==k->r){k->siz++;return;}\n    int mid=k->l+k->r>>1;\n    if(x<=mid) Add(x,l,mid,k->ls);\n    else Add(x,mid+1,r,k->rs);\n    k->maintain();\n}\nint Rank(int x,Node *k){\n    if(k->siz<x) return -1;\n    if(k->l==k->r) return k->l;\n    if(x<=k->ls->siz) return Rank(x,k->ls);\n    else return Rank(x-k->ls->siz,k->rs);\n}\nvoid print(Node *x){\n    if(x==null) return;\n    printf(\"%d  %d    %d\\n\",x->l,x->r,x->siz);\n    print(x->ls);print(x->rs);\n}\nint main(){\n    init();\n    n=read();m=read();\n    for(int i=1;i<=n;i++){\n        f[i]=i;\n        x=read();\n        pre[x]=i;\n        Add(x,1,INF,root[i]=null);\n    }\n    for(int i=1;i<=m;i++){\n        x=read();y=read();\n        fx=Find(x),fy=Find(y);\n        if(fx==fy) continue;\n        Merge(root[fx],root[fy]);\n        f[fy]=fx;\n    }\n    m=read();\n    for(int i=1;i<=m;i++){\n        scanf(\"%s\",s+1);\n        if(s[1]=='B'){\n            x=read();y=read();\n            fx=Find(x),fy=Find(y);\n            if(fx==fy) continue;\n            Merge(root[fx],root[fy]);\n            f[fy]=fx;\n        }\n        else{\n            x=read();y=read();\n            fx=Find(x);\n            t=Rank(y,root[fx]);\n            printf(\"%d\\n\",!~t?-1:pre[t]);\n        }\n    }\nreturn 0;\n}\n\n```\n\n###Splay\u89e3\u6cd5###\n\n\n\u6bcf\u5408\u5e76\u4e24\u4e2a\u70b9\uff0c\u5c06\u5b83\u4fe9\u542f\u53d1\u5f0f\u5408\u5e76\n\n\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5373\u628a\u5c0f\u7684\u66b4\u529b\u5f80\u5927\u7684\u90a3\u91cc\u63d2\n\n\u8bf4\u6309\u524d\u5e8f\u904d\u5386\u63d2\u590d\u6742\u5ea6\u4f1a\u6781\u5176\u4f18\u8d8a\uff1f\uff1f\n\n\n\u800c\u6c42\u7b2ck\u5927\u662f\u5e73\u8861\u6811\u57fa\u672c\u64cd\u4f5c\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<algorithm>\n#include<ctype.h>\n#include<cstdio>\n#define N 100050\nusing namespace std;\ninline int read(){\n    int x=0,f=1;char c;\n    do c=getchar(),f=c=='-'?-1:f; while(!isdigit(c));\n    do x=(x<<3)+(x<<1)+c-'0',c=getchar(); while(isdigit(c));\n    return x*f;\n}\nint n,m,x,y,fx,fy,t;\nint f[N],pre[N];\nchar s[26];\nint Find(int x){\n    return f[x]==x?f[x]:f[x]=Find(f[x]);\n}\nstruct Node{\n    Node *ch[2],*fa;\n    int x,siz;\n    Node(int);\n    inline int dir(){\n        if(fa->ch[0]==this) return 0;\n        if(fa->ch[1]==this) return 1;\n        return -1;\n    }\n    inline void maintain(){\n        siz=ch[0]->siz+ch[1]->siz+1;\n        return;\n    }\n    inline int cmp(int k){\n        if(k==x) return -1;\n        return k<x?0:1;\n    }\n}*null,*root[N],*tmp;\nNode::Node(int _):x(_){\n    siz=1;\n    fa=ch[0]=ch[1]=null;\n}\ninline void init(){\n    null=new Node(-1);\n    null->ch[0]=null->ch[1]=null->fa=null;\n    null->siz=0;\n}\nvoid print(Node *x){///Debug\n    if(x==null) return;\n    printf(\"%d  \",x->x);\n    print(x->ch[0]);\n    print(x->ch[1]);\n}\ninline void Rotate(Node *x,int d){\n    Node *k=x->ch[d^1];\n    x->ch[d^1]=k->ch[d];\n    if(x->ch[d^1]!=null) x->ch[d^1]->fa=x;\n    k->ch[d]=x;\n    if(x->fa!=null) x->fa->ch[x->dir()]=k;\n    k->fa=x->fa;x->fa=k;\n    x->maintain();k->maintain();\n}\ninline void Splay(Node *x,Node *y,int num){\n    while(x->fa!=y){\n        if(x->fa->fa!=y && x->dir()==x->fa->dir())\n            Rotate(x->fa->fa,x->dir()^1);\n        Rotate(x->fa,x->dir()^1);\n    }\n    x->maintain();\n    if(y==null) root[num]=x;\n}\nvoid Insert(Node *&x,int k,Node *fa){\n    if(x==null){\n        x=new Node(k);\n        x->fa=fa;tmp=x;\n        return;\n    }\n    int d=x->cmp(k);\n    Insert(x->ch[d],k,x);\n    x->maintain();\n}\ninline void AddNew(int x,int k){\n    Insert(root[x],k,null);\n    Splay(tmp,null,x);\n}\nint K_th(int k,Node *x){\n    if(k==x->ch[0]->siz+1) return x->x;\n    int d=k<=x->ch[0]->siz?0:1;\n    return K_th(k-(d?x->ch[0]->siz+1:0),x->ch[d]);\n}\nNode *LowerPointer(Node *x,int k){\n    if(x==null) return null;\n    if(k>=x->x) return LowerPointer(x->ch[0],k);\n    Node *t=LowerPointer(x->ch[1],k);\n    return t==null?x:t;\n}\nNode *UpperPointer(Node *x,int k){\n    if(x==null) return null;\n    if(k<=x->x) return UpperPointer(x->ch[1],k);\n    Node *t=UpperPointer(x->ch[0],k);\n    return t==null?x:t;\n}\ninline void Delete(int k,int x){\n    Node *a=LowerPointer(root[x],k),*b=UpperPointer(root[x],k);\n    if(a==null && b==null){\n        root[x]=null;\n        return;\n    }\n    if(a==null){\n        Splay(b,null,x);\n        root[x]->ch[0]=null;\n        root[x]->maintain();\n        return;\n    }\n    if(b==null){\n        Splay(a,null,x);\n        root[x]->ch[1]=null;\n        root[x]->maintain();\n        return;\n    }\n    Splay(a,null,x);\n    Splay(b,a,x);\n    root[x]->ch[1]->ch[0]=null;\n    root[x]->ch[1]->maintain();\n    root[x]->maintain();\n}\ninline void Merge(int tx,int ty){\n    if(tx==ty) return;\n    int x=tx,y=ty;\n    if(root[x]->siz<root[y]->siz) swap(x,y);\n    while(root[y]->siz){\n        int k=K_th(1,root[y]);\n        Delete(k,y);\n        AddNew(x,k);\n    }\n    f[y]=x;\n}\nint main(){\n    init();\n    n=read();m=read();\n    for(int i=1;i<=n;i++){\n        f[i]=pre[x=read()]=i;\n        root[i]=null;\n        AddNew(i,x);\n    }\n    for(int i=1;i<=m;i++){\n        x=read();y=read();\n        x=Find(x),y=Find(y);\n        Merge(x,y);\n    }\n    m=read();\n    for(int i=1;i<=m;i++){\n        scanf(\"%s\",s+1);\n        if(s[1]=='B'){\n            x=read();y=read();\n            Merge(Find(x),Find(y));\n        }\n        else{\n            x=read();y=read();\n            fx=Find(x);\n            if(root[fx]->siz<y) printf(\"-1\\n\");\n            else printf(\"%d\\n\",pre[K_th(y,root[fx])]);\n        }\n    }\nreturn 0;\n}\n\n```",
        "postTime": 1514534656,
        "uid": 21682,
        "name": "Duan2baka",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "**\u9996\u5148\u89e3\u91ca\u4e3a\u4ec0\u4e48\u8981\u4e3a\u4e00\u4e2a\u670925\u7bc7\u9898\u89e3\u7684\u9898\u76ee\u5199\u9898\u89e3**\n\n1.\u53ef\u4ee5\u770b\u5230\uff0c\u9898\u89e3\u533a\u7edd\u5927\u591a\u6570$dalao$\u9009\u62e9\u4e86**\u6307\u9488**\uff0c\u800c\u60f3\u5fc5\u5f88\u591a\u9009\u624b\uff08\u5305\u62ec\u6211\u8fd9\u4e2a$juruo$\uff09\u66f4\u4e60\u60ef\u4e8e\u7528\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u6240\u4ee5\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u8ba9\u7a7a\u95f4\u4e0d\u7206\u70b8\u7684\u6570\u7ec4\u5b9e\u73b0\u65b9\u6cd5\uff01\n\n2.~~\u4e3a\u4ec0\u4e48\u6ca1\u6709$Treap$\u7684\u9898\u89e3\u554a\uff0c\u4e00\u5b9a\u8981\u6709\u4e00\u7bc7\uff01~~\n\n\n\n------------\n\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P3224)\n\n\u4e0b\u9762\u5f00\u59cb\u8bb2\u8fd9\u9053\u9898\u3002\n\n\u9898\u76ee\u4e2d\u53ea\u8981\u6c42\u6211\u4eec\u7ef4\u62a4\u5c9b\u5c7f\u7684\u8fde\u901a\u6027\uff0c\u53ef\u4ee5\u8003\u8651\u7528**\u5e76\u67e5\u96c6**\u7ef4\u62a4\uff0c\u4e00\u5f00\u59cb\u6240\u6709\u5c9b\u5c7f\u662f\u5b64\u7acb\u7684\uff0c\u6bcf\u6b21$B$\u64cd\u4f5c\u5c31\u5c06\u4e24\u4e2a\u8fde\u901a\u5757\u8fde\u63a5\u8d77\u6765\uff0c\u6bcf\u6b21$Q$\u64cd\u4f5c\u67e5\u8be2$fa[x]$\u7684\u5c9b\u5c7f\u8fde\u63a5\u7684\u7b2c$k$\u91cd\u8981\u7684\u5c9b\u5c7f\u662f\u90a3\u4e00\u5ea7\u3002\n\n\u663e\u7136\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230**\u542f\u53d1\u5f0f\u5408\u5e76**\uff0c\u5373\u628a\u5c0f\u7684\u8fde\u901a\u5757\u63d2\u5165\u5230\u5927\u7684\u8fde\u901a\u5757\u4e2d\u3002\u611f\u6027\u7406\u89e3\uff0c\u5982\u679c\u53cd\u8fc7\u6765\u505a\uff0c\u80af\u5b9a\u662f\u4e0d\u4f18\u7684\u3002\u5408\u5e76\u53ea\u9700\u66b4\u529b\u5408\u5e76\u5373\u53ef\u6ee1\u8db3\u65f6\u95f4\u9700\u6c42\u3002\n\n\u90a3\u4e3a\u4ec0\u4e48\u9898\u89e3\u533a\u6307\u9488\u5c45\u591a\u5462\uff1f~~\u5927\u6982~~\u662f\u56e0\u4e3a\u7a7a\u95f4\u65e0\u6cd5\u6ee1\u8db3\u5427\u3002\n\n\u5176\u5b9e\u6211\u4eec\u53ea\u8981\u5728\u5220\u9664\u4e86\u67d0\u4e2a\u8282\u70b9\u540e\uff0c\u5728\u5c06\u5b83\u63d2\u5165\u5230\u4e00\u4e2a\u65b0\u7684\u6811\u7684\u65f6\u5019\uff0c**\u7ee7\u7eed\u4f7f\u7528\u90a3\u4e2a\u4e0b\u6807**\u5373\u53ef\u3002\n\n\u7136\u540e\u5c31\u662f\u666e\u901a\u7684$Treap$\u6a21\u677f\u4e86\u3002\n\n\n\n------------\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\n#define chk_digit(c) (c>='0'&&c<='9')\ninline int read() {\n\treg int x=0,f=1;reg char c=getchar();\n\twhile(!chk_digit(c)) { if(c=='-') f=-1;c=getchar(); }\n\twhile(chk_digit(c)) x=x*10+c-'0',c=getchar();\n\treturn x*f;\n} \ninline char get_char() {\n\treg char c=getchar();\n\twhile(c!='B'&&c!='Q') c=getchar();\n\treturn c;\n} \n#define maxsize 2000000\n#define MAXN 100005\n#define inf 2000000000\nstruct treap{ int l,r,rand_num,times,size,val; }tr[maxsize];\nint tot,root[MAXN],num[MAXN],id[MAXN],n,m,fa[MAXN],s[MAXN],q;\ninline int New(int val) { tr[++tot].val=val,tr[tot].rand_num=rand(),tr[tot].size=tr[tot].times=1;return tot; }\ninline void update(int p) { tr[p].size=tr[tr[p].l].size+tr[tr[p].r].size+tr[p].times; }\ninline void build(int bel) { int now=tot+1;New(-inf),New(inf),root[bel]=now,tr[now].r=now+1,update(root[bel]); }\ninline int get_val(int p,int rank) {\n\tif(!p) return inf;\n\tif(tr[tr[p].l].size>=rank) return get_val(tr[p].l,rank);\n\tif(tr[tr[p].l].size+tr[p].times>=rank) return tr[p].val;\n\treturn get_val(tr[p].r,rank-tr[p].times-tr[tr[p].l].size);\n}\ninline void zig(int &p) { int q=tr[p].l;tr[p].l=tr[q].r,tr[q].r=p,p=q,update(tr[p].r),update(p); }\ninline void zag(int &p) { int q=tr[p].r;tr[p].r=tr[q].l,tr[q].l=p,p=q,update(tr[p].l),update(p); }\ninline void insert(int &p,int val) {\n\tif(!p) { p=New(val);return; }\n\tif(val==tr[p].val) { ++tr[p].times,update(p);return; }\n\tif(val<tr[p].val) {\n\t\tinsert(tr[p].l,val);\n\t\tif(tr[p].rand_num<tr[tr[p].l].rand_num) zig(p);\n\t}\n\telse {\n\t\tinsert(tr[p].r,val);\n\t\tif(tr[p].rand_num<tr[tr[p].r].rand_num) zag(p); \n\t}\n\tupdate(p);\n}\ninline void renew(int p) { tr[p].size=tr[p].times=1,tr[p].l=tr[p].r=0; }//\u63d2\u5165\u4e4b\u524d\u5148\u628a\u539f\u5148\u7684\u4fe1\u606f\u9664\u53bb\ninline void add(int &p,int val,int where) {//\u8fd9\u6bb5\u4ee3\u7801\u6709\u4e00\u70b9\u5197\u4f59\u4e86\uff0c\u4f46\u662f\u5b83\u5374\u80fd\u591f\u8fdb\u884c\u5185\u5b58\u7684\u5faa\u73af\u5229\u7528\n\tif(!p) { p=where;return; } \n\tif(val<tr[p].val) {\n\t\tadd(tr[p].l,val,where);\n\t\tif(tr[p].rand_num<tr[tr[p].l].rand_num) zig(p);\n\t}\n\telse {\n\t\tadd(tr[p].r,val,where);\n\t\tif(tr[p].rand_num<tr[tr[p].r].rand_num) zag(p);\n\t}\n\tupdate(p);\n}\ninline void dfs(int p,int bel) {//\u5bf9\u8981\u88ab\u5408\u5e76\u8fdb\u5927\u7684\u8fde\u901a\u5757\u7684\u5c0f\u8fde\u901a\u5757dfs\uff0c\u5e76\u628a\u5b83\u63d2\u5165\u5927\u7684\u8fde\u901a\u5757\u4e2d\n\tif(tr[p].l) dfs(tr[p].l,bel);\n\tif(tr[p].r) dfs(tr[p].r,bel);\n\tif(tr[p].val!=inf&&tr[p].val!=-inf)\n\trenew(p),add(root[bel],tr[p].val,p);\n}\ninline int szfind(int x) { return x==fa[x]?x:fa[x]=szfind(fa[x]); }\ninline int szunion(int x,int y) { fa[y]=x,s[x]+=s[y]; } /\u5e76\u67e5\u96c6\u6a21\u677f\nint main() {\n\tn=read(),m=read(),srand(time(0)),id[0]=-1;\n\tfor(reg int i=1;i<=n;++i) {\n\t\tint x=read();\n\t\tnum[i]=x,id[x]=i,fa[i]=i,build(i),s[i]=1,insert(root[i],x);\n\t}\n\tfor(reg int i=1;i<=m;++i) {\n\t\tint x=read(),y=read();\n\t\tif(szfind(x)==szfind(y)) continue;\n\t\tif(s[fa[x]]<s[fa[y]]) x^=y,y^=x,x^=y;\n\t\tdfs(root[fa[y]],fa[x]),szunion(fa[x],fa[y]);\n\t}\n\tq=read();\n\tfor(reg int i=1;i<=q;++i) {\n\t\tchar opt=get_char();int x=read(),y=read();\n\t\tif(opt=='Q') {\n\t\t\tint z=get_val(root[szfind(x)],y+1);\n\t\t\tif(z==inf||z==0) printf(\"-1\\n\");\n\t\t\telse printf(\"%d\\n\",id[z]);\n\t\t}\n\t\tif(opt=='B') {\n\t\t\tif(szfind(x)==szfind(y)) continue;\n\t\t\tif(s[fa[x]]<s[fa[y]]) x^=y,y^=x,x^=y;//\u542f\u53d1\u5f0f\u5408\u5e76\n\t\t\tdfs(root[fa[y]],fa[x]),szunion(fa[x],fa[y]);\n\t\t}\n\t}\n}\n```\n\n\u5f53\u7136\uff0c$insert$\u8fd8\u53ef\u4ee5\u6539\u6210\u8fd9\u6837\u5199\uff0c\u76f8\u5bf9\u7b80\u6d01\n\n```\ninline void insert(int &p,int val,int rem=0) {\n\tif(!p) { rem?p=rem,tr[rem].val=val,tr[rem].l=tr[rem].r=0:p=New(val);return; }\n\tif(val==tr[p].val) { ++tr[p].times,update(p);return; }\n\tif(val<tr[p].val) {\n\t\tinsert(tr[p].l,val,rem);\n\t\tif(tr[p].rand_num<tr[tr[p].l].rand_num) zig(p); \n\t}\n\telse {\n\t\tinsert(tr[p].r,val,rem);\n\t\tif(tr[p].rand_num<tr[tr[p].r].rand_num) zag(p);\n\t}\n\tupdate(p);\n}\n```\n",
        "postTime": 1582206709,
        "uid": 134640,
        "name": "zsaskk",
        "ccfLevel": 0,
        "title": "[HNOI2012]\u6c38\u65e0\u4e61"
    },
    {
        "content": "## Spaly+\u5e76\u67e5\u96c6\n\n\u5728\u539f\u6765\u5e73\u8861\u6811\u7684\u57fa\u7840\u4e0a\uff0c\u5c06 $root$ \u8bbe\u4e3a\u4e00\u4e2a\u6570\u7ec4\uff0c$root[i]$ \u4e3a\u7b2c $i$ \u4e2a\u8282\u70b9\u6240\u5728\u8fde\u901a\u5757\u7684\u6811\u6839\n\n$find(x)$ \u5c31\u662f\u67e5\u627e $x$ \u6240\u5728\u8fde\u901a\u5757\u7684\u6811\u6839\uff0c\u7528\u5e76\u67e5\u96c6\u5b9e\u73b0\n\n$insert(y,x)$ \u5c06 $x$ \u8282\u70b9\u63d2\u5165\u5230\u4ee5 $y$ \u4e3a\u6839\u7684\u6811\u4e0b\u9762\uff0c\u5982\u679c\u53d1\u73b0 $x,y$ \u5df2\u7ecf\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u4e86\uff08\u5c31\u662f $find(x)==find(y)$\uff09\u5c31\u5ffd\u7565\u8be5\u64cd\u4f5c\n\n\u7136\u540e\u63a5\u4e0b\u6765\u5c31\u662f\u666e\u901a\u7684 $splay$ \u4e86\n\n**\u6ce8\u610f\uff1a\u65cb\u8f6c\u7684\u65f6\u5019\u4e0d\u8981\u5fd8\u8bb0\u66f4\u65b0 $root[x]$\uff0c\u67e5\u627e\u65f6\u4e0d\u8981\u5fd8\u8bb0\u8fd4\u56de $-1$**\n\n### \u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define N 4000010\n\nusing namespace std;\n\nint size[N],t[N],fa[N],son[N][2],root[N];\nint n,m,x,y,k,cnt;\nchar c;\n\nvoid add(int x){t[++cnt]=x,size[cnt]=1;}  //\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\n\nvoid update(int x)\n{\n\tsize[x]=size[son[x][0]]+size[son[x][1]]+1;\n}\n\nint whichson(int x)\n{\n\treturn son[fa[x]][1]==x;\n}\n\nvoid rotate(int x)\n{\n\tint fat=fa[x],gfa=fa[fat];\n\tint whichx=whichson(x),whichfa=whichson(fat);\n\tfa[son[x][!whichx]]=fat;\n\tson[fa[x]][whichx]=son[x][!whichx];\n\tson[x][!whichx]=fat;\n\tson[gfa][whichfa]=x;\n\tfa[x]=gfa,fa[fat]=x;\n\tupdate(fat),update(x);\n}\n\nvoid splay(int x,int y)   //\u666e\u901a\u7684splay\n{\n\tif (x==y) return;\n\tint fat,gfa;\n\twhile (fa[x]!=y)\n\t{\n\t\tfat=fa[x],gfa=fa[fat];\n\t\tif (gfa!=y)\n\t\t\tif (whichson(x)==whichson(fat)) rotate(fat);\n\t\t\telse rotate(x);\n\t\trotate(x);\n\t}\n\tif (!y) root[root[x]]=x,root[x]=x;\n}\n\nvoid insert(int i,int x,int fat)\n{\n\tif (!i)\n\t{\n\t\tson[fat][t[fat]<t[x]]=x;\n\t\tfa[x]=fat;\n\t\treturn;\n\t}\n\tinsert(son[i][t[i]<t[x]],x,i);\n\tupdate(i);\n}\n\nint findnum(int now,int x)\n{\n\tif (now==0) return -1;\n\tif (size[son[now][0]]+1==x) return now;\n\tif (size[son[now][0]]>=x) return findnum(son[now][0],x);\n\telse return findnum(son[now][1],x-size[son[now][0]]-1);\n}\n\nint find(int x)\n{\n\treturn (root[x]==x) ? x : root[x]=find(root[x]);\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&x),add(x);  //\u6bcf\u8bfb\u5165\u4e00\u4e2a\u503c\u5c31\u65b0\u5f00\u4e00\u4e2a\u8282\u70b9\u50a8\u5b58\n\tfor (int i=1;i<=n;i++)\n\t\troot[i]=i;     \t\t//\u521d\u59cb\u5316\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tif (find(x)!=find(y))\n\t\t{\n\t\t\tsplay(x,0);\n\t\t\tinsert(find(y),x,0);\n\t\t\troot[x]=find(y);\t\t//\u522b\u5fd8\u8bb0\u66f4\u65b0 root[x] \u503c\t\n\t\t\tsplay(x,0);\t\t\t\t//\u6bcf\u6b21splay(x,0)\uff0c\u4fdd\u8bc1\u5176\u5e73\u8861\n\t\t}\n\t}\n\tscanf(\"%d\",&m);\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tc=getchar();\n\t\twhile (c<'A'||c>'Z') c=getchar();\n\t\tif (c=='Q')\n\t\t{\n\t\t\tscanf(\"%d%d\",&x,&k);\n\t\t\tprintf(\"%d\\n\",findnum(find(x),k));\n\t\t\tsplay(x,0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tif (find(x)!=find(y))\n\t\t\t{\n\t\t\t\tsplay(x,0);\n\t\t\t\tinsert(find(y),x,0);\n\t\t\t\troot[x]=find(y);\n\t\t\t\tsplay(x,0);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1559564322,
        "uid": 67718,
        "name": "G\u6211\u5c31\u662f\u83dcG",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011P3224 [HNOI2012]\u6c38\u65e0\u4e61"
    },
    {
        "content": "\u8fd9\u9053\u9898\u663e\u7136\u53ef\u4ee5\u7528$Treap$\u5408\u5e76\u5440\uff0c\u4e3a\u4ec0\u4e48\u8981\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\u5462\uff1f\uff08~~\u5b9e\u9645\u4e0a\u662f\u6211\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u5408\u5e76~~\uff09\n\n$Treap$\u5408\u5e76\u5c31\u662f\u666e\u901a\u7684\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5c06$size$\u5c0f\u7684$Treap$\u7684\u6240\u6709\u8282\u70b9\u90fd\u63d2\u5165\u5230\u5927\u7684$Treap$\u91cc\u9762\u3002\n\n\u590d\u6742\u5ea6\u5206\u6790\uff1a\n\n\u56e0\u4e3a\u6bcf\u6b21\u5408\u5e76\u90fd\u662f\u5c06\u5c0f\u7684$Treap$\u63d2\u5165\u5927\u7684\uff0c\u6240\u4ee5$size$\u81f3\u5c11\u4f1a\u53d8\u6210\u539f\u6765\u5c0f$Treap$\u7684\u5927\u5c0f\u7684$2$\u500d\uff0c\u6240\u4ee5\u81f3\u591a\u4f1a\u88ab\u5408\u5e76$O(\\log n)$\u6b21\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log^2n$)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(n\\log n)$\u3002\n\n\u6ca1\u4e86\uff1f\u6ca1\u4e86\u3002\n\n\u800c\u4e14\u8bf7\u7ba1\u7406\u5458\u68c0\u67e5\u4e00\u4e0b\u8fd9\u9053\u9898\u7684\u6570\u636e\uff0c#10\u6d4b\u8bd5\u70b9\u6709$x=0$\u6216$y=0$\u7684\u8fb9\uff0c\u7ed3\u679c\u6211\u63d0\u4ea4\u4e86$n$\u591a\u904d90\u5206RE\u3002\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define Rint register int\nusing namespace std;\nconst int N = 100003, INF = 2147483647;\nint n, m, q, fa[N];\ninline int getfa(int x){\n    return x == fa[x] ? x : fa[x] = getfa(fa[x]);\n}\nstruct Treap {\n    int id, key, prio, size, cnt;\n    Treap *ch[2];\n} *root[N], *top, *null;\ninline int rand(){\n    static int seed = 20050915;\n    return seed = (((seed * 19260817ll) % 2147483647 ^ 20050818) + 998244353) % 2147483647;\n}\ninline void init(){\n    top = null = new Treap [N * 20];\n    null -> key = null -> prio = INF;\n    null -> size = null -> cnt = 0;\n    null -> ch[0] = null -> ch[1] = null;\n    for(Rint i = 1;i <= n;i ++) root[i] = null;\n}\ninline void pushup(Treap *&x){\n    x -> size = x -> ch[0] -> size + x -> ch[1] -> size + x -> cnt;\n}\ninline Treap* crepoint(int key, int id){\n    top ++;\n    top -> key = key; top -> id = id; top -> prio = rand();\n    top -> cnt = top -> size = 1;\n    top -> ch[0] = top -> ch[1] = null;\n    return top;\n}\ninline void rotate(Treap *&x, int d){\n    Treap *y = x -> ch[d ^ 1];\n    x -> ch[d ^ 1] = y -> ch[d];\n    y -> ch[d] = x;\n    y -> size = x -> size;\n    pushup(x);\n    x = y;\n}\ninline void insert(Treap *&x, int key, int id){\n    if(x == null){x = crepoint(key, id); return;}\n    if(x -> key == key){x -> cnt ++; pushup(x); return;}\n    int d = key > x -> key;\n    insert(x -> ch[d], key, id);\n    if(x -> prio > x -> ch[d] -> prio) rotate(x, d ^ 1);\n    pushup(x);\n}\ninline int atrank(int i, int x){\n    Treap *now = root[i];\n    if(x > now -> size) return -1;\n    while(true){\n        int minused = now -> ch[0] -> size + now -> cnt;\n        if(x > now -> ch[0] -> size && x <= minused) return now -> id;\n        else if(x <= now -> ch[0] -> size) now = now -> ch[0];\n        else {\n            x -= minused;\n            now = now -> ch[1];\n        }\n    }\n}\ninline void dfs(int i, Treap *x){\n    if(x == null) return;\n    insert(root[i], x -> key, x -> id);\n    dfs(i, x -> ch[0]);\n    dfs(i, x -> ch[1]);\n}\ninline void comb(int a, int b){\n    if(!a || !b) return; // \u8fd9\u91cc\u5982\u4e0a\u6240\u8ff0\n    int fa1 = getfa(a), fa2 = getfa(b);\n    if(root[fa1] -> size < root[fa2] -> size) swap(fa1, fa2);\n    dfs(fa1, root[fa2]);\n    fa[fa2] = fa1;\n}\nint main(){\n    scanf(\"%d%d\", &n, &m);\n    init();\n    for(Rint i = 1;i <= n;i ++){\n        int x;\n        scanf(\"%d\", &x);\n        insert(root[i], x, i);\n        fa[i] = i;\n    }\n    while(m --){\n        int a, b;\n        scanf(\"%d%d\", &a, &b);\n        comb(a, b);\n    }\n    scanf(\"%d\", &q);\n    while(q --){\n        int x, y;\n        char opt[5];\n        scanf(\"%s%d%d\", opt, &x, &y);\n        if(opt[0] == 'Q')\n            printf(\"%d\\n\", atrank(getfa(x), y));\n        else\n            comb(x, y);\n    }\n}\n```",
        "postTime": 1544764569,
        "uid": 68148,
        "name": "watermoon",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "\u542f\u53d1\u5f0f\u5408\u5e76SBT\u5427\uff0c\u5dee\u4e0d\u591a\u4e86\uff0c\u4e3a\u4ec0\u4e48\u8981\u7528treap\u548csplay\u5462\uff0cSBT\u5199\u5f97\u597d\u6bd4\u8bb8\u591a\u7ebf\u6bb5\u6811\u90fd\u8981\u5feb\u554a\u3002\u867d\u7136\u591a\u4e86\u4e2a$logn$\u7684\u7cfb\u6570\u597d\u50cf\u662f\u3002\n\n\u800c\u4e14\uff0c\u8fd9\u4e9b\u9898\u89e3\u7684\u4ee3\u7801\uff0c\u5927\u90e8\u5206\u90fd\u662f\u5b58\u5728bug\u7684\uff0c\u6211\u7684\u968f\u673a\u6570\u636e\u751a\u81f3hack\u6389\u4e86hzwer\u5927\u4f6c\u7684\u7a0b\u5e8f\u3002\n\n\u81f3\u4e8e\u4ec0\u4e48\u662f\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5c31\u662f\u7c7b\u4f3c\u5e76\u5dee\u96c6\u4e2d\u90a3\u4e2a\u6309\u79e9\u5408\u5e76\u554a\uff0c\u6211\u4eec\u8bb0\u5f55\u4e00\u4e2asize\uff0c\u7136\u540e\u628asize\u5c0f\u7684\u90a3\u4e2a\u5e73\u8861\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u76f4\u63a5\u66b4\u529b\u63d2\u5165\u5230\u5927\u7684\u90a3\u4e2a\u5e73\u8861\u6811\u4e2d\u5c31\u884c\u4e86\uff0c\u7136\u540e\u5c31\u662f\u5e76\u5dee\u96c6\u5408\u5e76\u8054\u901a\u5757\uff0c\u51e0\u4e4e\u5c31\u662f\u677f\u5b50\u9898\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define rint register int\nusing namespace std;\nconst int N=6e5+5;\nint f[N],key[N],root[N],c[N][2],id[N];\nint n,m,s[N],w[N],NodeCnt;\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while (ch<'0' || ch>'9'){if (ch=='-')f=-1;ch=getchar();}\n    while ('0'<=ch && ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*f;\n}\ninline int find(int x){\n    return f[x]==x?x:f[x]=find(f[x]);\n}\ninline void rotate(int &t,int p){\n    rint k=c[t][!p];\n    c[t][!p]=c[k][p];\n    c[k][p]=t;\n    s[k]=s[t];\n    s[t]=s[c[t][0]]+s[c[t][1]]+1;\n    t=k;\n}\ninline void maintain(int &t,int p){\n    if (s[c[c[t][p]][p]]>s[c[t][!p]])\n        rotate(t,!p);else\n    if (s[c[c[t][p]][!p]]>s[c[t][!p]])\n        rotate(c[t][p],p),rotate(t,!p);\n    else return;\n    maintain(c[t][0],0);\n    maintain(c[t][1],1);\n    maintain(t,0);\n    maintain(t,1);\n}\ninline void insert(int &t,int u,int idx){\n    if (!t){\n        key[t=++NodeCnt]=u;id[t]=idx,s[t]=1;\n        return;\n    }\n    ++s[t];\n    if (u<key[t])insert(c[t][0],u,idx);\n        else insert(c[t][1],u,idx);\n    maintain(t,u>=key[t]);\n}\ninline int select(int &t,int k){\n    rint lc=c[t][0];\n    if (s[lc]+1==k)return id[t];\n    if (s[lc]+1<k)return select(c[t][1],k-s[lc]-1);\n        else return select(c[t][0],k);\n}    \ninline void dfs(int &p,int &q){\n    if (!p)return;\n    f[id[p]]=id[q];\n    insert(q,key[p],id[p]);\n    dfs(c[p][0],q);\n    dfs(c[p][1],q);\n}\ninline void merge(int &p,int &q){\n    if (s[p]>s[q])swap(p,q);\n    dfs(p,q);\n    p=q;\n}\nint main(){\n    n=read(),m=read();\n    for (rint i=1;i<=n;++i)\n        w[i]=read();\n    for (rint i=1;i<=n;++i)\n        f[i]=i;\n    for (rint i=1;i<=m;++i){\n        rint u=read(),v=read();\n        rint p=find(u),q=find(v);\n        f[q]=p;\n    }\n    for (rint i=1;i<=n;++i)\n        insert(root[f[i]=find(i)],w[i],i);\n    rint T=read();\n    char op[5];\n    for (rint i=1;i<=T;++i){\n        scanf(\"%s\",op);\n        if (op[0]=='Q'){\n            rint u=read(),k=read();\n            rint p=root[find(u)];\n            printf(\"%d\\n\",s[p]>=k?select(p,k):-1);\n        }else{\n            rint u=read(),v=read();\n            rint &p=root[find(u)],&q=root[find(v)];\n            if (p!=q) merge(p,q);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1512140478,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "\u4e3b\u8981\u662f\u81ea\u5df1mark\u4e00\u6ce2\u9a97\u5206\u7b97\u6cd5\uff0c\u5efa\u8bae\u8ffd\u6c42\u6781\u81f4\u7684\u540c\u5b66\u8fd8\u662f\u4e0d\u8981\u770b\u4e86\uff0c\u4f46\u662f\u8054\u8d5b\u524d\u8fd8\u662f\u8981\u770b\u4e00\u6ce2\u7684\u9632\u6b62\u6570\u636e\u7ed3\u6784\u8c03\u4e0d\u51fa\u6765gg\u7684\u60c5\u51b5\uff0c\u6bd5\u7adf\u7528STL\u8fc7\u6570\u636e\u7ed3\u6784\u9898\u4e0d\u9700\u8981\u667a\u5546\n\n\u8fd9\u9053\u9898\u662f\u5e76\u67e5\u96c6\u542f\u53d1\u5f0f\u5408\u5e76\uff0b\u5e73\u8861\u6811\n\n\u5176\u5b9e\u4e5f\u53ef\u4ee5\u7528vector+upper_bound\u6765\u6a21\u62dfset\u7684\u64cd\u4f5c\n\n\u6211\u4eec\u7528\u5e73\u8861\u6811\u6765\u5b9e\u73b0\u975e\u533a\u95f4\u64cd\u4f5c\u7684\u65f6\u5019\u5176\u5b9e\u662f\u901a\u8fc7\u6392\u5e8f\u6811\u7684\u7ed3\u6784\u6765\u4fdd\u6301\u5143\u7d20\u7684\u6709\u5e8f\u6027\n\n\u56e0\u6b64\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6a21\u62df\u8fd9\u4e2a\u6570\u7ec4\u6765\u4f7f\u5143\u7d20\u53d8\u5f97\u6709\u5e8f\uff3e\uff0d\uff3e\n\nvector \u3000\n\n\u4e0d\u4ec5\u53ef\u4ee5\u652f\u6301STL\u7684\u4e8c\u5206\u67e5\u627e(lower_bound(),upper_bound())\n       \n\u8fd8\u53ef\u4ee5\u652f\u6301\u60f3\u94fe\u8868\u4e00\u6837\u7684\u4e2d\u95f4\u63d2\u5165\n      \n\u8fd8\u53ef\u4ee5\u76f4\u63a5\u50cf\u6570\u7ec4\u4e00\u6837\u8bbf\u95ee\u5143\u7d20\n         \n\u8fd8\u662f\u5206\u914d\u7684\u52a8\u6001\u5185\u5b58\n         \n\u5728\u5408\u5e76\u5b8c\u4e4b\u540e\u8fd8\u53ef\u4ee5\u76f4\u63a5\u9500\u6bc1\uff0c\u91ca\u653e\u5185\u5b58\n\n\u6240\u4ee5\u5c31\u662f\u5b83\u4e86\uff01\uff01\uff01\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nint rk[100002],n,m,fa[100002],op[100002];\nint getfa(int k){if(fa[k]==k) return k;return fa[k]=getfa(fa[k]);}\ninline int read(){int x=0,y=1;char k;while(k<'0'||k>'9'){if(k=='-')y=-1;k=getchar();}while(k>='0'&&k<='9'){x=(x<<3)+(x<<1)+k-'0';k=getchar();}return x*y;}\nvector<int>c[100001];\nint main(){\n    n=read(),m=read();\n    for(int i=1;i<=n;i++) rk[i]=read(),fa[i]=i,op[rk[i]]=i;\n    for(int i=1;i<=m;i++){\n        int a=read(),b=read();\n        int f1=getfa(a),f2=getfa(b);\n        fa[f2]=f1;\n    }for(int i=1;i<=n;i++){int f=getfa(i);c[f].insert(upper_bound(c[f].begin(),c[f].end(),rk[i]),rk[i]);}\n    int T=read();\n    while(T--){\n        char con[10];scanf(\"%s\",con);\n        int a=read(),b=read();\n        if(con[0]=='Q'){\n            int f=getfa(a);\n            if((unsigned int)b>c[f].size()){printf(\"-1\\n\");continue;}            \n            printf(\"%d\\n\",op[c[f][b-1]]);\n        }else{\n            int f1=getfa(a),f2=getfa(b);\n            if(c[f1].size()<c[f2].size()){swap(f1,f2);swap(a,b);}\n            for(vector<int>::iterator it=c[f2].begin();it!=c[f2].end();it++){\n                int t=*it;\n                c[f1].insert(upper_bound(c[f1].begin(),c[f1].end(),t),t);\n            }vector<int>().swap(c[f2]);\n            fa[f2]=f1;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1538056225,
        "uid": 47378,
        "name": "\u67cf\u6728\u7531\u7eaaAKB48",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "**\u57fa\u672c\u601d\u8def\uff1a**\n\n- \u6743\u503c\u7ebf\u6bb5\u6811+\u7ebf\u6bb5\u6811\u5408\u5e76+\u5e76\u67e5\u96c6. \n\n**\u7c7b\u4f3c\u9898\u76ee\uff1a**\n\n- \u96e8\u5929\u7684\u5c3e\u5df4\n\n------------\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nconst int MAXN=1e7,INF=2e9;\nstruct Node{\n    int ls,rs;\n    int cnt;//\u88ab\u52a0\u6b21\u6570\n    int pos;//\u5c9b\u5c7f\u7f16\u53f7\n}tr[MAXN];\nint nodeCnt=0;//\u6743\u503c\u7ebf\u6bb5\u6811\nint root[MAXN];\nvoid insert(int &now,int l,int r,int x,int pos){\n    if(!now)now=++nodeCnt;\n    if(l==r){\n        tr[now].cnt++;\n        tr[now].pos=pos;\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(x<=mid)insert(tr[now].ls,l,mid,x,pos);\n    else insert(tr[now].rs,mid+1,r,x,pos);\n    tr[now].cnt=tr[tr[now].ls].cnt+tr[tr[now].rs].cnt;\n}\nint merge(int p,int q,int l,int r){\n    if(!p)return q;\n    if(!q)return p;\n    if(l==r){\n        tr[p].cnt+=tr[q].cnt;\n        tr[p].pos=tr[q].pos;\n        return p;\n    }\n    int mid=(l+r)>>1;\n    tr[p].ls=merge(tr[p].ls,tr[q].ls,l,mid);\n    tr[p].rs=merge(tr[p].rs,tr[q].rs,mid+1,r);\n    tr[p].cnt=tr[tr[p].ls].cnt+tr[tr[p].rs].cnt;\n    return p;\n}\nint query(int now,int l,int r,int k){\n    if(l==r)return tr[now].pos;\n    if(tr[now].cnt<k)return -1;//\u4e0d\u5b58\u5728\n    int mid=(l+r)>>1;\n    int lsum=tr[tr[now].ls].cnt;\n    if(k<=lsum)return query(tr[now].ls,l,mid,k);\n    else return query(tr[now].rs,mid+1,r,k-lsum);\n}\nint fa[MAXN];\nint get(int x){\n    while(x!=fa[x])x=fa[x]=fa[fa[x]];\n    return x;\n}\nint b_merge(int a,int b){//\u96c6\u5408\u5408\u5e76\n    fa[get(a)]=get(b);\n    return get(b);\n}\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        fa[i]=i;\n    for(int i=1;i<=n;i++){\n        int rank;//\u91cd\u8981\u5ea6\n        scanf(\"%d\",&rank);\n        insert(root[i],-INF,INF,rank,i);\n    }\n    for(int i=1;i<=m;i++){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        a=get(a),b=get(b);\n        int rt=merge(root[a],root[b],-INF,INF);\n        b_merge(a,b);\n        root[a]=root[b]=rt;\n    }\n    int q;\n    scanf(\"%d\",&q);//q\u4e2a\u64cd\u4f5c\n    for(int i=1;i<=q;i++){\n        char opt;\n        cin>>opt;\n        if(opt=='B'){\n            int x,y;\n            scanf(\"%d%d\",&x,&y);//\u4fee\u4e00\u6761\u65b0\u6865\n            x=get(x),y=get(y);\n            int rt=merge(root[x],root[y],-INF,INF);\n            b_merge(x,y);\n            root[x]=root[y]=rt;\n        }else if(opt=='Q'){\n            int x,k;\n            scanf(\"%d%d\",&x,&k);\n            cout<<query(root[get(x)],-INF,INF,k)<<endl;\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1572161613,
        "uid": 115758,
        "name": "Object_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "\u672c\u849f\u84bb\u559c\u6b22\u5199\u6307\u9488+\u4e0d\u8bb0\u5f55\u7236\u8282\u70b9\u7684splay\uff0c\u597d\u50cf\u559c\u6b22\u8fd9\u6837\u5199\u7684\u4eba\u4e0d\u591a\u54c7\u3002\n\n\u5173\u4e8e\u672c\u9898\u601d\u8def\uff1a\n\u5c31\u662f\u7528splay\u7ef4\u62a4\u4e00\u4e0b\u4e00\u4e2a\u8054\u901a\u5757\u4e2d\u7684\u540d\u6b21\uff0c\u56e0\u4e3a\n\u9898\u76ee\u4fdd\u8bc1\u91cd\u8981\u5ea6\u4e92\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5\u5148\u5728\u8bfb\u5165\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u91cd\u8981\u5ea6\u5bf9\u5e94\u7684\u7f16\u53f7\uff0csplay\u91cc\u9762\u76f4\u63a5\u63d2\u5165\u8fd9\u4e2a\u91cd\u8981\u5ea6\u5c31\u884c\u4e86\u3002\u5408\u5e76\u7684\u8bdd\u663e\u7136\u662f\u5e76\u67e5\u96c6+\u542f\u53d1\u5f0f\u5408\u5e76\u5427\uff0c\u628a\u5c0f\u5f97\u6811\u7684\u6240\u6709\u503c\u4e00\u4e2a\u4e00\u4e2a\u76f4\u63a5\u63d2\u5165\u5230\u5927\u7684\uff0c\u7136\u540e\u628a\u5c0f\u7684\u6811\u5220\u6389\u5c31\u884c\u4e86\n\n~~\u603b\u7684\u6765\u8bf4\u8fd8\u662f\u5f88easy\u7684\u9e2d~~\uff0c\u7ec6\u8282\u89c1\u4ee3\u7801\u5427\uff0c\uff08\u6700\u8fd1\u6709\u70b9\u5c0f\u5c0f\u7684\u538b\u884c\u75c5\uff0c\u6342\u8138\uff09\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=1e5+10;\nint n,m,fa[MAXN],a[MAXN],x,u,v,q;\nchar c[10];\ninline int findset(int x){return fa[x]==x?x:fa[x]=findset(fa[x]);}\nstruct node{\n\tnode* ch[2];int v,s;\n\tnode(int x){v=x;s=1;ch[0]=ch[1]=NULL;}\n\tinline int sz(int d){if (ch[d]) return ch[d]->s;return 0;}\n\tinline int cmp(int k){if (k==v) return -1;return k>v;}\n\tinline int cmp2(int k){if (k==sz(0)+1) return -1;if (k<=sz(0)) return 0;return 1;}\n\tinline void update(){s=sz(0)+sz(1)+1;}\n} *root[MAXN];\ninline void rot(node* &o,int d){node *k=o->ch[d^1];o->ch[d^1]=k->ch[d];k->ch[d]=o;o->update();k->update();o=k;}\ninline void splay(node* &o,int k){\n    int d=o->cmp2(k); if(d==1) k-=o->sz(0)+1;\n    if(d!=-1){\n        node* &p=o->ch[d];int d2=p->cmp2(k);int k2= (d2==0?k:k-(p->sz(0))-1);\n\t\tif(d2!=-1){splay(p->ch[d2],k2); if(d==d2) rot(o,d^1);else rot(o->ch[d],d2^1);}\n        rot(o,d^1);\n    }\n}\ninline void insert(node* &o,int v){if (o==NULL){o=new node(v);return;}int d=o->cmp(v);insert(o->ch[d],v);o->update();}\ninline void merge(node* &p,node* &o){if (p->ch[0]) merge(p->ch[0],o);if (p->ch[1]) merge(p->ch[1],o);insert(o,p->v); delete p;p=NULL;}\ninline void mergeset(int u,int v){\n\tint x=findset(u),y=findset(v);\n\tif (x!=y){\n\t\tif (root[x]->s<root[y]->s){fa[x]=y;merge(root[x],root[y]);}\n\t\telse{fa[y]=x;merge(root[y],root[x]);}\n\t}\n}\ninline int kth(node* &o,int k){if (k>o->s) return -1;splay(o,k);return o->v;}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1;i<=n;i++) scanf(\"%d\",&x),a[x]=i,insert(root[i],x),fa[i]=i;\n\tfor (int i=1;i<=m;i++){scanf(\"%d%d\",&u,&v);mergeset(u,v);} \n\tscanf(\"%d\",&q);\n\tfor (int i=1;i<=q;i++){\n\t\tscanf(\"%s %d%d\",c,&u,&v);\n\t\tif (c[0]=='B') mergeset(u,v);\n\t\telse{int t=kth(root[findset(u)],v);if (t==-1) printf(\"-1\\n\");else printf(\"%d\\n\",a[t]);}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1550839068,
        "uid": 41003,
        "name": "LMB_001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "\u53ef\u4ee5\u7ebf\u6bb5\u6811\u5408\u5e76\u554aQwQ\n\n\u4e3a\u4ec0\u4e48\u8981Splay\u554a\n\n\u591a\u96be\u5199QwQ\n\n\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u91cd\u8981\u5ea6\u3002\u7136\u540e\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8054\u901a\u6027\uff0c\u6bcf\u6b21\u8fde\u8fb9\u6216\u8005Build\u5c31\u628a\u4e24\u68f5\u7ebf\u6bb5\u6811\u5408\u5e76\u5c31\u597d\u4e86\u554aQwQ\n\n\u81f3\u4e8eQuery\u64cd\u4f5c\uff0c\u5c31\u770b\u770b\u5de6\u513f\u5b50\u7684sum\u4e0ek\u7684\u5173\u7cfb\u5c31\u597d\u4e86\n\n\u8dd1\u5f97\u8fd8\u633a~~\u5feb~~\n\n\u4e0b\u9762\u662f\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#define N (200010)\nusing namespace std;\ninline int read(int &data){\n    data=0;char ch=0;\n    while(ch<'0' || ch>'9') ch=getchar();\n    while(ch>='0' && ch<='9') data=data*10+ch-'0',ch=getchar();\n    return data;\n}\nstruct xds{\n\tint l,r,sum,ch[2];\n}t[N<<5];\nint n,m,ind,T[N],fa[N],ans[N];\nint ask(int x){return (fa[x]==x)?x:fa[x]=ask(fa[x]);}\nint insert(int p,int l,int r){\n\tint rt=++ind;\n\tt[rt].l=l,t[rt].r=r,t[rt].sum=1;\n\tif(l==r)return rt; int mid=(l+r)>>1;\n\tif(p>mid)t[rt].ch[1]=insert(p,mid+1,r);\n\telse t[rt].ch[0]=insert(p,l,mid);\n\treturn rt;\n}\nint unite(int L,int R,int l,int r){\n\tif(!L&&!R)return 0;\n\tif(!L)return R; if(!R)return L;\n\tint rt=++ind,mid=(l+r)>>1;\n\tt[rt].l=l,t[rt].r=r,t[rt].sum=t[L].sum+t[R].sum;\n\tt[rt].ch[0]=unite(t[L].ch[0],t[R].ch[0],l,mid);\n\tt[rt].ch[1]=unite(t[L].ch[1],t[R].ch[1],mid+1,r);\n\treturn rt;\n}\nint query(int x,int k){\n\tif(t[x].sum<k)return -1;\n\tif(t[x].l==t[x].r)return ans[t[x].l];\n\tif(t[t[x].ch[0]].sum>=k)return query(t[x].ch[0],k);\n\telse return query(t[x].ch[1],k-t[t[x].ch[0]].sum);\n}\nint main(){\n\tread(n),read(m);\n\tfor(int i=1;i<=n;i++){fa[i]=i; int x;read(x),T[i]=insert(x,1,n),ans[x]=i;}\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y; read(x),read(y);\n\t\tint p=ask(x),q=ask(y);\n\t\tif(p!=q)fa[p]=q,T[q]=unite(T[p],T[q],1,n);\n\t}\n\tint Q; read(Q);\n\twhile(Q--){\n\t\tint x,y; char c;\n\t\tc=getchar(); while(c!='B'&&c!='Q')c=getchar();\n\t\tread(x),read(y); if(c=='Q')printf(\"%d\\n\",query(T[ask(x)],y));\n\t\telse{int p,q;p=ask(x),q=ask(y);if(p!=q)fa[p]=q,T[q]=unite(T[p],T[q],1,n);}\n\t}\n}\n```\n",
        "postTime": 1536911722,
        "uid": 14763,
        "name": "Romeolong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8 [>Here<](https://www.luogu.org/problemnew/show/P3224)\n\n\u8fd9\u9053\u9898\u57fa\u672c\u5c31\u662f\u4e00\u9053\u5e73\u8861\u6811\u6c34\u9898\u3002\n\n\u5efa\u6865\u5c31\u76f8\u5f53\u4e8e\u5408\u5e76\u4e24\u68f5\u5e73\u8861\u6811\uff0c\u67e5\u8be2\u65f6\u67e5\u627e\u6811\u4e2d\u7b2cK\u5c0f\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4e8e\u662f\u53ea\u5269\u4e0b\u5982\u4f55\u5408\u5e76\u4e24\u68f5\u5e73\u8861\u6811\u7684\u95ee\u9898\u4e86\u3002\u8bdd\u8bf4\u8fd9\u9053\u9898\u771f\u7684\u5f88\u7384\u5b66\uff0c\u6211\u672c\u6765\u4ee5\u4e3a\u6709\u4e00\u79cd\u4e0d\u660e\u89c9\u5389\u7684\u65b9\u6cd5\u53ef\u4ee5\u8fc5\u901f\u6574\u4f53\u5408\u5e76\u4e24\u68f5\u5e73\u8861\u6811\uff0c\u4f46\u662f\u60f3\u4e86\u5f88\u4e45\u4e5f\u6ca1\u6709\u60f3\u51fa\u6765\u3002\u770b\u4e86\u5404\u4f4ddalao\u7684\u535a\u5ba2\u624d\u53d1\u73b0\u539f\u6765\u53ef\u4ee5\u66b4\u529b\u628a\u4e00\u68f5\u5e73\u8861\u6811\u7684\u70b9\u5168\u90e8\u62c6\u51fa\u6765\u63d2\u5165\u5230\u53e6\u4e00\u68f5\u6811\u4e0a\uff0c\u5e76\u4e14\u6bcf\u6b21\u5408\u5e76\u4e24\u68f5\u6811\u65f6\u9009\u53d6\u8282\u70b9\u6570\u5c11\u7684\u6811\u62c6\uff0c\u636e\u8bf4\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u6700\u591a\u66f4\u65b0logn\u6b21\uff08\u4e5f\u5c31\u662f\u542f\u53d1\u5f0f\u5408\u5e76\uff09\u3002\n        \n\u7136\u540e\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\u3002\u3002\n        \n\u849f\u84bb\u4ee3\u7801\uff08\u7528\u7684\u662fsplay\uff09\uff1a\n\n```cpp\n#include <cstdio>\n\nint lson[100001],rson[100001],father[100001],n,m,q,A,B,l,r,root[100001],size[100001],cnt,now,val[100001];\nint belong[100001],faz,R,LS,L,RS,last;\nchar ch;\n//lson,rson,father,val,size\u4e3asplay\u6811\u7684\u4fe1\u606f\uff0cbelong\u5b58\u50a8\u6bcf\u4e2a\u70b9\u5728\u54ea\u9897\u6811\u91cc\uff0croot\u5b58\u50a8\u6bcf\u68f5\u6811\u7684\u6839\u8282\u70b9\ninline void get(){\n    ch=getchar();\n    while(ch!='B'&&ch!='Q')ch=getchar();\n}\ninline bool son(int a,int b){return lson[a]==b;}\ninline void LR(int x){\n    if(!rson[x])return;\n    faz=father[x],R=rson[x],LS=lson[R];\n    if(!father[x])root[belong[x]]=R;\n    father[R]=faz;\n    size[R]=size[x];\n    size[x]=size[lson[x]]+size[LS]+1;\n    if(son(faz,x))lson[faz]=R;\n    else if(faz)rson[faz]=R;\n    father[x]=R,lson[R]=x,father[LS]=x,rson[x]=LS;\n}\ninline void RR(int x){\n    if(!lson[x])return;\n    faz=father[x],L=lson[x],RS=rson[L];\n    if(!father[x])root[belong[x]]=L;\n    father[L]=faz;\n    size[L]=size[x];\n    size[x]=size[rson[x]]+size[RS]+1;\n    if(son(faz,x))lson[faz]=L;\n    else rson[faz]=L;\n    father[x]=L,rson[L]=x,father[RS]=x,lson[x]=RS;\n}\nvoid splay(int node,int ance){\n    while(father[node]!=ance){\n        if(father[father[node]]==ance){\n            if(son(father[node],node))RR(father[node]);\n            else LR(father[node]);\n        }\n        else{\n            if(son(father[node],node)){\n                if(son(father[father[node]],father[node]))RR(father[node]),RR(father[node]);\n                else RR(father[node]),LR(father[node]);\n            }\n            else{\n                if(son(father[father[node]],father[node]))LR(father[node]),RR(father[node]);\n                else LR(father[node]),LR(father[node]);\n            }\n        }\n    }\n}\nint findKth(int k,int node){\n    if(size[node]<k||!node)return -1;\n    while(size[lson[node]]!=k-1){\n    \tif(size[lson[node]]>=k)node=lson[node];\n    \telse k=k-size[lson[node]]-1,node=rson[node];\n\t} \n\treturn node;\n}\nvoid insert(int x,int t){\n    cnt=root[t],last;\n    while(cnt){\n        size[cnt]++;\n        last=cnt;\n        if(val[cnt]>val[x])cnt=lson[cnt];\n        else cnt=rson[cnt];\n    }\n    if(val[last]>val[x])lson[last]=x; else rson[last]=x;\n    lson[x]=rson[x]=0;\n    father[x]=last;\n    belong[x]=t;\n    size[x]=1;\n    splay(x,0);\n}\nvoid MergeIn(int x,int t){\n    if(!x)return;\n    MergeIn(lson[x],t);\n    MergeIn(rson[x],t);\n    insert(x,t);\n}\nvoid merge(int a,int b){\n    if(size[root[a]]>size[root[b]])a^=b^=a^=b;\n    MergeIn(root[a],b);\n}\nint read(){\n    int x=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x;\n}\nint main(){\n    n=read(),m=read();\n    for(register int i=1;i<=n;i++)root[i]=i,belong[i]=i,size[i]=1;\n    for(register int i=1;i<=n;i++)val[i]=read();\n    for(register int i=1;i<=m;i++)A=read(),B=read(),merge(belong[A],belong[B]);\n    q=read();\n    for(register int i=1;i<=q;i++){\n    \tget();\n    \tA=read(),B=read();\n    \tif(ch=='B')merge(belong[A],belong[B]);\n    \telse printf(\"%d\\n\",findKth(B,root[belong[A]]));\n    }\n    return 0;\n}\n```",
        "postTime": 1533451212,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP3224 [HNOI2012]\u6c38\u65e0\u4e61"
    },
    {
        "content": "\u542f\u53d1\u5f0f\u5408\u5e7601\u5b57\u5178\u6811\uff08\u672c\u8d28\u4e0a\u5c31\u662f\u6743\u503c\u7ebf\u6bb5\u6811\uff09\u597d\u50cf\u4e5f\u633a\u597d\u5199\u7684\u3002\u3002\u3002\uff08\u4e8b\u5b9e\u4e0a\u7531\u4e8e\u7a7a\u95f4\u5f00\u9500\u592a\u5927\u8981\u624b\u5199GC\u5bfc\u81f4new node\u51fd\u6570\u957f\u5ea6\u7206\u70b8\u3002\u3002\u3002\uff09\n\n\u5177\u4f53\u7ec6\u8282\u770b\u8fd9\u91cc\uff1ahttp://www.cnblogs.com/KingSann/articles/7351284.html\n\n``` cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <list>\n \nusing namespace std;\n \nconst int N = 100010;\n \nint n, m, q, x, y, id[N];\nchar op[10];\n \nint GC[N], gcp;\n \nint keys[N], hd[N], nxt[N], lst[N];\n \nint root[N], ch[N * 20][2], sum[N * 20];\n \nint New() {\n    static int cnt = 0;\n    if(gcp) {\n        int rt =GC[gcp --];\n        if(rt[ch][0]) {\n            GC[++ gcp] = rt[ch][0];\n        }\n        if(rt[ch][1]) {\n            GC[++ gcp] = rt[ch][1];\n        }\n        rt[ch][0] = rt[ch][1] = 0;\n        rt[sum] = 0;\n        return rt;\n    } else {\n        return ++ cnt;\n    }\n}\n \n#define walk for(int i = 16, t ; (t = (val >> i) & 1), ~i ; i --)\n \nvoid ins(int rt, int val) {\n    walk {\n        if(rt[ch][t] == 0) rt[ch][t] = New();\n        (rt = rt[ch][t])[sum] ++;\n    }\n}\n \nint kth(int rt, int val) {\n    int ret = 0;\n    walk {\n        if(val > rt[ch][0][sum]) {\n            val -= rt[ch][0][sum];\n            ret |= 1 << i;\n            rt = rt[ch][1];\n        } else {\n            rt = rt[ch][0];\n        }\n    }\n    return ret;\n}\n \nint acc[N], size[N];\n \nvoid init(int n) {\n    for(int i = 1 ; i <= n ; i ++) {\n        i[acc] = i;\n        i[size] = 1;\n    }\n}\n \nint find(int x) {\n    return x == x[acc] ? x : x[acc] = find(x[acc]);\n}\n \nvoid uni(int x, int y) {\n    x = find(x);\n    y = find(y);\n    if(x != y) {\n        y[size] += x[size];\n        x[acc] = y;\n    }\n}\n \nvoid merge(int x, int y) {\n    x = find(x);\n    y = find(y);\n    if(x != y) {\n        if(x[size] > y[size]) {\n            swap(x, y);\n        }\n        for(int i = x[hd] ; i ; i = nxt[i]) {\n            ins(y, keys[i]);\n            if(nxt[i] == 0) {\n                y[lst][nxt] = x;\n                y[lst] = x[lst];\n            }\n        }\n        GC[++ gcp] = x;\n        uni(x, y);\n    }\n}\n \nint ask(int rt, int k) {\n    rt = find(rt);\n    if(rt[size] < k) {\n        return -1;\n    } else {\n        int res = kth(rt, k);\n        return res[id];\n    }\n}\n \nint main() {\n    scanf(\"%d%d\", &n, &m);\n    init(n);\n    for(int i = 1 ; i <= n ; i ++) {\n        i[root] = New();\n    }\n    for(int i = 1 ; i <= n ; i ++) {\n        scanf(\"%d\", &x);\n        x[id] = i;\n        ins(i[root], x);\n        i[keys] = x;\n        i[hd] = i;\n        i[lst] = i;\n    }\n    for(int i = 1 ; i <= m ; i ++) {\n        scanf(\"%d%d\", &x, &y);\n        merge(x, y);\n    }\n    scanf(\"%d\", &q);\n    for(int i = 1 ; i <= q ; i ++) {\n        scanf(\"%s%d%d\", op, &x, &y);\n        if(op[0] == 'B') {\n            merge(x, y);\n        } else {\n            printf(\"%d\\n\", ask(x, y));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1509449686,
        "uid": 47111,
        "name": "nekko",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "~~HN\u4e0d\u6127\u4e3a\u5f3a\u7701\uff0c\u7701\u9009\u9898\u5751\u6211\u4e00\u9875\u63d0\u4ea4.....wtcl~~   \r\n\u8a00\u5f52\u6b63\u4f20\uff0c\u8fd9\u662f\u4e00\u9053FHQ Treap/\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u7ec3\u624b\u597d\u9898\u3002   \r\n\u5206\u6790\u4e0b\u9898\u76ee\uff1a  \r\n*  \u64cd\u4f5c1\uff1a`B x y`\u8868\u793a\u5728\u5c9b`x`\u4e0e\u5c9b`y`\u4e4b\u95f4\u4fee\u5efa\u4e00\u5ea7\u65b0\u6865\u3002  \r\n*  \u64cd\u4f5c2\uff1a`Q x k`\u8868\u793a\u8be2\u95ee\u5f53\u524d\u4e0e\u5c9b`x`\u8fde\u901a\u7684\u6240\u6709\u5c9b\u4e2d\u7b2c`k`\u91cd\u8981\u7684\u662f\u54ea\u5ea7\u5c9b\uff0c\u5373\u6240\u6709\u4e0e\u5c9b`x`\u8fde\u901a\u7684\u5c9b\u4e2d\u91cd\u8981\u5ea6\u6392\u540d\u7b2c`k`\u5c0f\u7684\u5c9b\u662f\u54ea\u5ea7\uff0c\u8bf7\u4f60\u8f93\u51fa\u90a3\u4e2a\u5c9b\u7684\u7f16\u53f7\u3002  \r\n \r\n\u64cd\u4f5c1\uff1a  \r\n* \u5e76\u67e5\u96c6 ~~\u8fd9\u4e0d\u9700\u8981\u6211\u591a\u8bb2\u4e86\u5427~~\r\n* \u5c06\u4e24\u4e2a\u96c6\u5408\u5408\u5e76(\u2460)  \r\n\u64cd\u4f5c2\uff1a  \r\n* \u67e5\u8be2\u96c6\u5408\u4e2d\u7b2ck\u5c0f\u7684\u6570(\u6743\u503c\u7ebf\u6bb5\u6811/Treap\u5747\u53ef)  \r\n\u2460\u9700\u8981\u5c06\u4e24\u4e2a\u96c6\u5408\u91cc\u7684\u6811\u5408\u5e76  \r\n* FHQ Treap+\u542f\u53d1\u5f0f\u5408\u5e76\r\n* \u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76     \r\n\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u53ef\u4ee5\u89e3\u51b3\u2460  \r\n\u4e24\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f`O(nlogn)` \r\n\u6ce8\u610f\uff1a\r\n* \u4f46\u662fFHQ Treap\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f`O(n)`\u7684  \r\n* \u7136\u9e45\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u7a7a\u95f4\u662f`O(nlogn)`\u7684  \r\n\u56e0\u4e3a\u6743\u503c\u7ebf\u6bb5\u6811\u7a7a\u95f4\u5927\uff0c\u6240\u4ee5\u8981\u590d\u7528\u7a7a\u95f4  \r\n\u5199\u6210\u8fd9\u6837\u4f1aMLE\uff1a \r\n```cpp\r\nint merge(int x,int y,int l,int r){\r\n      if(!x||!y)return x+y;\r\n      if(!id)id=++tot;\r\n      if(l==r){\r\n          t[id].maxa=t[x].size+t[y].size;\r\n          return x;\r\n      }\r\n      int mid=(l+r)>>1;\r\n      t[id].ch[0]=merge(t[id].ch[0],t[y].ch[0],l,mid);\r\n      t[id].ch[1]=merge(t[id].ch[1],t[y].ch[1],mid+1,r);\r\n      update(id);\r\n      return id;\r\n}\r\n```\r\n\u8fd9\u6837\u624d\u80fdAC\uff1a  \r\n```cpp\r\nint merge(int x,int y,int l,int r){\r\n      if(!x||!y)return x+y;\r\n      if(l==r){\r\n          t[x].maxa+=t[y].maxa;\r\n          return x;\r\n      }\r\n      int mid=(l+r)>>1;\r\n      t[x].ch[0]=merge(t[x].ch[0],t[y].ch[0],l,mid);\r\n      t[x].ch[1]=merge(t[x].ch[1],t[y].ch[1],mid+1,r);\r\n      update(x);\r\n      return x;\r\n}\r\n```\r\nTreap\u7684\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u53ea\u9700\u628a`Tree1`\u91cc\u7684\u8282\u70b9\u4e00\u4e2a\u4e2a\u63d2\u5230`Tree2`\u91cc\u5c31\u884c\u3002  \r\n\u6548\u679c\u5982\u4e0b\uff1a  \r\n```cpp\r\nvoid dfs(int id,int &target){\r\n      if(!id)return;\r\n      dfs(t[id].ch[0],target);\r\n      dfs(t[id].ch[1],target);\r\n      t[id].ch[0]=t[id].ch[1]=0;\r\n      t[id].size=1;\r\n      int x=t[id].val;\r\n      int rt1,rt2;\r\n      split(target,x,rt1,rt2);\r\n      target=merge(rt1,merge(id,rt2));\r\n}\r\n```\r\n\u6b64\u9898\u5e76\u67e5\u96c6\u4e5f\u6709\u5751\uff1a  \r\n\u5982\u679c\u76f4\u63a5\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\uff0c\u96c6\u5408\u91cc\u6240\u6709\u5143\u7d20\u76f8\u5f53\u4e8e\u51fa\u73b0\u4e86\u4e24\u6b21\u3002  \r\nWA\u5199\u6cd5\uff1a\r\n```cpp\r\nvoid mergeSet(int x,int y){\r\n      if(t[rt[x]].size>t[rt[y]].size)swap(x,y);\r\n      fa[x]=y;\r\n      dfs(rt[x],rt[y]);\r\n}\r\n```\r\n\u8fd9\u6837\u624d\u80fdAC\uff1a\r\n```cpp\r\nvoid mergeSet(int x,int y){\r\n      if(check(x,y))return;\r\n      if(t[rt[x]].size>t[rt[y]].size)swap(x,y);\r\n      fa[x]=y;\r\n      dfs(rt[x],rt[y]);\r\n  }\r\n```\r\n~~\u4e00\u5b9a\u8981\u5feb\u8bfb~~  \r\nGet\u5230\u4e86\u4ee5\u4e0a\u6280\u5de7\uff0c\u4f60\u5c31\u80fd\u5728`800ms~1000ms`A\u6389\u672c\u9898  \r\n\u4e0a\u4ee3\u7801(`FHQ Treap+\u542f\u53d1\u5f0f\u5408\u5e76`)\r\n```cpp\r\n#pragma optimize(5, \"inline\", \"Ofast\")\r\n#include <iostream>\r\n#include <algorithm>\r\n#include <cstdio>\r\n#include <cmath>\r\n#include <queue>\r\n#include <cstring>\r\nusing namespace std;\r\nconst int NR=1e5+10;\r\nint fa[NR];\r\nint n,m,q;\r\n//------FHQ Treap--------\r\nstruct node{\r\n\tint ch[2];\r\n\tint val;\r\n\tint rnd;\r\n\tint size;\r\n\tint id;\r\n}t[NR];\r\nint tot;\r\nvoid update(int id){\r\n          t[id].size=t[t[id].ch[0]].size+t[t[id].ch[1]].size+1;\r\n}\r\nint newNode(int val,int id){\r\n      tot++;\r\n      t[tot].val=val;\r\n      t[tot].size=1;\r\n      t[tot].rnd=rand();\r\n      t[tot].id=id;\r\n      return tot;\r\n}\r\nvoid split(int id,int val,int &x,int &y){\r\n      if(!id){\r\n          x=y=0;\r\n          return;\r\n      }\r\n      if(val>=t[id].val){\r\n          y=id;\r\n          split(t[id].ch[0],val,x,t[id].ch[0]);\r\n      }\r\n      else{\r\n          x=id;\r\n          split(t[id].ch[1],val,t[id].ch[1],y);\r\n      }\r\n      update(id);\r\n}\r\nint merge(int x,int y){\r\n      if(!x||!y)return x+y;\r\n      if(t[x].rnd<t[y].rnd){\r\n          t[x].ch[1]=merge(t[x].ch[1],y);\r\n          update(x);\r\n          return x;\r\n      }\r\n      else{\r\n          t[y].ch[0]=merge(x,t[y].ch[0]);\r\n          update(y);\r\n          return y;\r\n      }\r\n}\r\nvoid splitk(int id,int k,int &x,int &y){\r\n      if(!id){\r\n          x=y=0;\r\n          return;\r\n      }\r\n      int lsize=t[t[id].ch[0]].size;\r\n      if(k<=lsize){\r\n          y=id;\r\n          splitk(t[id].ch[0],k,x,t[id].ch[0]);\r\n      }\r\n      else{\r\n          x=id;\r\n          splitk(t[id].ch[1],k-lsize-1,t[id].ch[1],y);\r\n      }\r\n      update(id);\r\n}\r\n//-------\u5e76\u67e5\u96c6--------\r\nint rt[NR];\r\nvoid init(){\r\n      for(int i=1;i<=n;i++)\r\n          fa[i]=i;\r\n}\r\nint get(int x){\r\n      if(fa[x]==x)\r\n          return x;\r\n      return fa[x]=get(fa[x]);\r\n}\r\nbool check(int &x,int &y){\r\n      x=get(x);\r\n      y=get(y);\r\n      return x==y;\r\n}\r\nvoid dfs(int id,int &target){\r\n      if(!id)return;\r\n      dfs(t[id].ch[0],target);\r\n      dfs(t[id].ch[1],target);\r\n      t[id].ch[0]=t[id].ch[1]=0;\r\n      t[id].size=1;\r\n      int x=t[id].val;\r\n      int rt1,rt2;\r\n      split(target,x,rt1,rt2);\r\n      target=merge(rt1,merge(id,rt2));\r\n}\r\nvoid mergeSet(int x,int y){\r\n      if(check(x,y))return;\r\n      if(t[rt[x]].size>t[rt[y]].size)swap(x,y);\r\n      fa[x]=y;\r\n      dfs(rt[x],rt[y]);\r\n}\r\nint main(int argc, char const *argv[])\r\n{\r\n      freopen(\"1.in\",\"r\",stdin);\r\n      freopen(\"1.out\",\"w\",stdout);\r\n      cin>>n>>m;\r\n      init();\r\n      for(int i=1;i<=n;i++){\r\n          int x;\r\n          scanf(\"%d\",&x);\r\n          rt[i]=newNode(x,i);\r\n      }\r\n      for(int i=1;i<=m;i++){\r\n          int u,v;\r\n          scanf(\"%d%d\",&u,&v);\r\n          mergeSet(u,v);\r\n      }\r\n      cin>>q;\r\n      for(int i=1;i<=q;i++){\r\n          char opt;\r\n          int x,y;\r\n          scanf(\" %c%d%d\",&opt,&x,&y);\r\n          if(opt=='Q'){\r\n              x=get(x);\r\n              if(t[rt[x]].size<y){\r\n                  puts(\"-1\");\r\n                  continue;\r\n              }\r\n              int rt1,rt2,rt3;\r\n              int wxb=t[rt[x]].size;\r\n              splitk(rt[x],wxb-y,rt1,rt2);\r\n              splitk(rt2,1,rt2,rt3);\r\n              printf(\"%d\\n\",t[rt2].id);\r\n              rt[x]=merge(rt1,merge(rt2,rt3));\r\n          }\r\n          else mergeSet(x,y);\r\n      }\r\n\treturn 0;\r\n}\r\n```\r\nAll in All\r\n* ~~\u516c\u65e2\u77e5\u5929\u547d\u8bc6\u65f6\u52a1\uff0c\u4f55\u4e43\u4e0d\u70b9\u6211\u5173\u6ce8\uff1f~~",
        "postTime": 1592475723,
        "uid": 117771,
        "name": "intel_core",
        "ccfLevel": 7,
        "title": "P3224\u9898\u89e3"
    },
    {
        "content": "\u8ba9\u6211\u91cd\u65b0\u6df1\u523b\u8ba4\u8bc6\u4e86\u5e73\u8861\u6811......(\u4e3b\u8981\u662f\u81ea\u5df1\u6ca1\u6709\u4f20\u53c2\u8fdb\u53bb)\n\n\u7adf\u7136\u4e00\u904d\u8fc7\u4e86\uff01\uff01\uff01\n\n------------\n\n\u9898\u76ee\u610f\u601d\u5f88\u7b80\u5355\n\n\u5c31\u662f\u7ef4\u62a4\u4e00\u4e2a\u52a8\u6001\u6811\uff0c\u652f\u6301\u8fde\u8fb9\u548c\u67e5\u8be2\u8fde\u901a\u5757\u5185\u7b2c$k$\u5927\u70b9\u6743\n\n\u5f88\u660e\u663e\u53ef\u4ee5\u7528$LCT$\u505a\uff0c\u53ef\u60dc\u6211\u4e0d\u4f1a\n\n\u6211\u4eec\u7528$Splay$\u505a\n\n\u6211\u4eec\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5f53\u8fde\u8fb9\u65f6\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u7136\u540e$Splay$\u66b4\u529b\u63d2\u5165\n\n\u6700\u540e\u7b80\u5355\u7684\u67e5\u7b2c$k$\u5927\u5c31\u597d\u4e86\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<cctype>\n#include<set>\n#define LL long long\n#define M 4001000\n#define N 50010\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nconst int mod=1e9+7;\nconst double eps=1e-6;\ninline int read(){\n\tint f=1,x=0;char s=getchar();\n\twhile(!isdigit(s)){if (s=='-')f=-1;s=getchar();}\n\twhile(isdigit(s)){x=(x<<1)+(x<<3)+(s^48);s=getchar();}\n\treturn x*f;\n}\nstruct node{\n\tint fa,cnt,v,son[2],siz;\t\n};\nint cnte; \nnode t[M];\nstruct Splay{\n\tint root;\n\tinline void connect(int x,int fa,int d){\n\t\tt[x].fa=fa,t[fa].son[d]=x;\n\t}\n\tinline void update(int x){\n\t\tt[x].siz=t[x].cnt+t[t[x].son[0]].siz+t[t[x].son[1]].siz;\n\t}\n\tinline int get_son(int x){\n\t\treturn t[t[x].fa].son[0]==x?0:1;\n\t}\n\tinline void rotate(int x){\n\t\tint f=t[x].fa,gf=t[f].fa;\n\t\tint fson=get_son(x),gfson=get_son(f);\n\t\tconnect(t[x].son[fson^1],f,fson);\n\t\tconnect(x,gf,gfson);\n\t\tconnect(f,x,fson^1);\n\t\tupdate(f);update(x);\n\t}\n\tinline void splay(int x,int to){\n\t\tint tmp=to;\n\t\tto=t[to].fa;\n\t\twhile (t[x].fa!=to){\n\t\t\tint f=t[x].fa,gf=t[f].fa;\n\t\t\tif (gf!=to)\n\t\t\t\tget_son(x)^get_son(f)?rotate(x):rotate(f);\n\t\t\trotate(x);\n\t\t}\n\t\tif (tmp==root)\n\t\t\troot=x;\n\t}\n\tinline int New(int a,int fa){\n\t\tt[++cnte].v=a;\n\t\tt[cnte].cnt=t[cnte].siz=1;\n\t\tt[cnte].fa=fa;\n\t\treturn cnte;\n\t}\n\tinline void insert(int x){\n\t\tint now=root;\n\t\tif (!root)\n\t\t\troot=New(x,0);\n\t\telse\n\t\t\twhile (1){\n\t\t\t\tt[now].siz++;\n\t\t\t\tif (x==t[now].v){\n\t\t\t\t\tt[now].cnt++;splay(now,root);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tint nxt=(t[now].v>x)?0:1;\n\t\t\t\tif (!t[now].son[nxt]){\n\t\t\t\t\tt[now].son[nxt]=New(x,now);\n\t\t\t\t\tsplay(t[now].son[nxt],root);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tnow=t[now].son[nxt];\n\t\t\t}\n\t}\n\tinline int find(int x){\n\t\tint now=root;\n\t\twhile (1){\n\t\t\tif (!now) return 0;\n\t\t\tif (t[now].v==x){\n\t\t\t\tsplay(now,root);\n\t\t\t\treturn now;\n\t\t\t}\n\t\t\tint nxt=(t[now].v>x)?0:1;\n\t\t\tnow=t[now].son[nxt];\n\t\t}\t\n\t}\n\tinline int ranks(int x){\n\t\tint now=root;\n\t\tif (x>t[now].siz)\n\t\t\treturn -1;\n\t\t while (1){\n\t\t \tint rank=t[now].siz-t[t[now].son[1]].siz;\n\t\t \tif (x>t[t[now].son[0]].siz&&x<=rank){\n\t\t \t\tsplay(now,root);return t[now].v;\n\t\t \t}\n\t\t \tif (x<rank) now=t[now].son[0];\n\t\t \telse x-=rank,now=t[now].son[1];\n\t\t}\n\t}\n\n}tree[M];\nint fa[M],ranks[M];\ninline int find(int a){\n\treturn fa[a]==a?fa[a]:fa[a]=find(fa[a]);\t\n}\ninline void merge(int rt,Splay&r){\n\tif (!rt) return;\n\tmerge(t[rt].son[0],r);\n\tr.insert(t[rt].v);\n\tmerge(t[rt].son[1],r);\n}\nsigned main(){\n\tint n=read(),m=read();\n\tfor (int i=1;i<=n;i++){\n\t\tint x=read();\n\t\ttree[i].root=0,tree[i].insert(x);\n\t\tranks[x]=i,fa[i]=i;\n\t}\n\tfor (int i=1;i<=m;i++){\n\t\tint u=read(),v=read();\n\t\tint U=find(u),V=find(v);\n\t\tif (U==V) continue;\n\t\tint minx=t[tree[U].root].siz>t[tree[V].root].siz?V:U;\n\t\tint maxx=minx==V?U:V;\n\t\tmerge(tree[minx].root,tree[maxx]);\n\t\tfa[minx]=maxx;\n\t}\n\tint q=read();\n\tfor (int i=1;i<=q;i++){\n\t\tchar c;cin>>c;\n\t\tif (c=='Q'){\n\t\t\tint rt=read(),rank=read(),RT=find(rt);\n\t\t\tint ans=tree[RT].ranks(rank);\n\t\t\tif (ans==-1) printf(\"-1\\n\");\n\t\t\telse printf(\"%d\\n\",ranks[ans]);\n\t\t}\n\t\telse{\n\t\t\tint u=read(),v=read();\n\t\t\tint U=find(u),V=find(v);\n\t\t\tif (U==V) continue;\n\t\t\tint minx=t[tree[U].root].siz>t[tree[V].root].siz?V:U;\n\t\t\tint maxx=minx==V?U:V;\n\t\t\tmerge(tree[minx].root,tree[maxx]);\n\t\t\tfa[minx]=maxx;\n\t\t}\n\t}\n\treturn 0;\t\n}\n```\n",
        "postTime": 1573309844,
        "uid": 78290,
        "name": "Polaris_Dane",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "_\u8fd9\u4e48\u597d\u7684\u4e00\u9053\u5e73\u8861\u6811\u9898\uff0c\u600e\u4e48\u6ca1\u4eba\u5199\u66ff\u7f6a\u7f8a\u554a\uff0c\u660e\u660e\u662f\u6700\u597d\u5199\u7684\u5e73\u8861\u6811_\n\n## \u672c\u9898\u7b2c\u4e00\u7bc7\u66ff\u7f6a\u7f8a\u6811\u9898\u89e3\n\n\u601d\u8def\u633a\u597d\u60f3\uff0c\u7528$n$\u4e2a\u5e73\u8861\u6811\u548c\u5e76\u67e5\u96c6\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u8054\u901a\u5757\u5185\u5404\u4e2a\u5c9b\u5c7f\u7684\u4f18\u5148\u7ea7\u3002\u6ce8\u610f\u4e8c\u53c9\u6392\u5e8f\u6811\u4e2d\u8282\u70b9\u7684\u4f18\u5148\u7ea7\u3002\n\n\u5408\u5e76\u65f6\uff0c\u76f4\u63a5\u628a\u8282\u70b9\u5c11\u7684\u5e73\u8861\u6811\u91cc\u9762\u6bcf\u4e2a\u8282\u70b9\u66b4\u529b\u585e\u5230\u8282\u70b9\u591a\u7684\u5e73\u8861\u6811\u4e2d\uff0c\u5747\u644a\u590d\u6742\u5ea6\u662f\u5bf9\u7684\u3002\n\n### \u4ee3\u7801\n\n\u66ff\u7f6a\u7f8a\u6811+\u542f\u53d1\u5f0f\u5408\u5e76\n\n```cpp\n// luogu-judger-enable-o2\n#include <iostream>\n#include <utility>\n#include <vector>\n\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int, int> poi;\n\nconst float Alpha = 0.7;\nconst int MAXN = 1e5 + 5;\n\nint n, m;\n\nclass SGTree{\nprivate :\n    struct Node{\n        poi val;\n        int cnt;\n        int siz, cov;\n        Node *ch[2];\n\n        Node(poi val) : val(val) {\n            cnt = true;\n            siz = 1;\n            cov = 1;\n            ch[0] = NULL;\n            ch[1] = NULL;\n        }\n\n        void Update() {\n            siz = cnt + (ch[0] ? ch[0]->siz : 0) + (ch[1] ? ch[1]->siz : 0);\n            cov = 1 + (ch[0] ? ch[0]->cov : 0) + (ch[1] ? ch[1]->cov : 0);\n        }\n\n        bool Bad() {\n            int ls = (ch[0] ? ch[0]->cov : 0), rs = (ch[1] ? ch[1]->cov : 0);\n            return (float)ls > (float)cov * Alpha || (float)rs > (float)cov * Alpha;\n        }\n    };\n\n    Node *rt;\n    vector<Node*> vec;\n\n    void Dfs(Node *now) {\n        if (!now) return;\n        Dfs(now->ch[0]);\n        if (now->cnt) vec.push_back(now);\n        Dfs(now->ch[1]);\n        now->ch[0] = now->ch[1] = NULL;\n        now->Update();\n    }\n\n    void Rebuild(Node *&now, int l, int r) {\n        if (l > r) return;\n        int mid = l + r >> 1;\n        now = vec[mid];\n        Rebuild(now->ch[0], l, mid - 1);\n        Rebuild(now->ch[1], mid + 1, r);\n        now->Update();\n    }\n\n    void Insert(Node *&now, poi k) {\n        if (!now) {\n            now = new Node(k);\n            return;\n        }\n        if (k < now->val) Insert(now->ch[0], k);\n        else if (k == now->val) now->cnt++;\n        else Insert(now->ch[1], k);\n        now->Update();\n        if (now->Bad()) {\n            vec.clear();\n            Dfs(now);\n            int sz = vec.size();\n            Rebuild(now, 0, sz - 1);\n        }\n    }\n\n    void Remove(Node *now, poi k) {\n        if (!now) return;\n        if (k < now->val) {\n            Remove(now->ch[0], k);\n        } else if (k == now->val) {\n            if (now->cnt) now->cnt--;\n        } else {\n            Remove(now->ch[1], k);\n        }\n        now->Update();\n    }\n\n    poi Kth(Node *now, int k) {\n        if (!now) return make_pair(0, 0);\n        int ls = (now->ch[0] ? now->ch[0]->siz : 0);\n        if (k <= ls) return Kth(now->ch[0], k);\n        else if (k == ls + 1) return now->val;\n        else return Kth(now->ch[1], k - now->cnt - ls);\n    }\n\n    void PopInto(SGTree &tree, Node *now) {\n        if (!now) return;\n        for (int i = 1; i <= now->cnt; i++) tree.Insert(now->val);\n        PopInto(tree, now->ch[0]);\n        PopInto(tree, now->ch[1]);\n        delete now;\n    }\n\npublic :\n    SGTree() {\n        rt = NULL;\n        vec.clear();\n    }\n\n    void Insert(poi k) {\n        Insert(rt, k);\n    }\n\n    void Join(SGTree &tree) {\n        tree.PopInto(*this, tree.rt);\n    }\n\n    poi Kth(int k) {\n        return Kth(rt, k);\n    }\n\n    int Size() {\n        return rt ? rt->siz : 0;\n    }\n};\n\nSGTree tr[MAXN];\n\nint bel[MAXN];\n\nint Find(int x) {\n    if (bel[x] == x) return x;\n    return bel[x] = Find(bel[x]);\n}\n\nvoid Build(int a, int b) {\n    int u = Find(a), v = Find(b);\n    if (tr[u].Size() > tr[v].Size()) swap(u, v);\n    bel[u] = v;\n    tr[v].Join(tr[u]);\n}\n\nint main() {\n    cin >> n >> m;\n    int x, y, k, u, v;\n    char op[5];\n    for (int i = 1; i <= n; i++) bel[i] = i;\n    for (int i = 1; i <= n; i++) {\n        cin >> k;\n        tr[i].Insert(make_pair(k, i));\n    }\n    for (int i = 1; i <= m; i++) {\n        cin >> x >> y;\n        Build(x, y);\n    }\n    int q;\n    cin >> q;\n    for (int i = 1; i <= q; i++) {\n        cin >> op;\n        if (op[0] == 'Q') {\n            cin >> x >> k;\n            u = Find(x);\n            if (tr[u].Size() < k) {\n                cout << -1 << endl;\n                continue;\n            }\n            cout << tr[u].Kth(k).second << endl;\n        } else {\n            cin >> x >> y;\n            Build(x, y);\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1559102544,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "\u7528\u7ebf\u6bb5\u6811\u542f\u53d1\u5f0f\u5408\u5e76\u4ee3\u66ff\u5e73\u8861\u6811\u5f88\u65b9\u4fbf\u554a\n\n\u800c\u4e14\u8fd8\u597d\u5199\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,kk,a[1000000],f[1000000],q,x,y,sum[5000000],ff[5000000],l[5000000],r[5000000];\nchar c;\nint fa(int x){return f[x]==x?x:f[x]=fa(f[x]);}//\u5947\u602a\u7684\u5e76\u67e5\u96c6\u7ef4\u62a4\nvoid putit(int d,int x,int y,int ll,int rr){//\u52a0\u5165\u4e00\u4e2a\u5143\u7d20\n    if (ll==rr){sum[d]++;ff[d]=y;return;}\n    int m=(ll+rr)/2;\n    if (x<=m){\n        if (!l[d])l[d]=++kk;\n        putit(l[d],x,y,ll,m);\n    }else{\n        if (!r[d])r[d]=++kk;\n        putit(r[d],x,y,m+1,rr);\n    }sum[d]=sum[l[d]]+sum[r[d]];\n    if (r[d])ff[d]=ff[r[d]];else ff[d]=ff[l[d]];\n}int hb(int x,int y){//\u5408\u5e76\u4e24\u4e2a\u5143\u7d20\n    if (x==y)return x;\n    if (x==0)return y;if (y==0)return x;\n    sum[x]+=sum[y];l[x]=hb(l[x],l[y]);r[x]=hb(r[x],r[y]);\n    if (r[x])ff[x]=ff[r[x]];else ff[x]=ff[l[x]];\n    return x;\n}int findit(int x,int y){//\u5bfb\u627e\u4e00\u4e2a\u96c6\u5408\u5185\u7b2cy\u5927\u7684\u5143\u7d20\n    if (y>sum[x])return -1;\n    if (y==sum[x])return ff[x];\n    if (y>sum[l[x]])return findit(r[x],y-sum[l[x]]);\n        else return findit(l[x],y);\n}\nint main(){\n    ios::sync_with_stdio(false);\n    cin>>n>>m;kk=n;\n    for (int i=1;i<=n;i++)cin>>a[i],f[i]=i,putit(i,a[i],i,1,n);\n    for (int i=1;i<=m;i++)cin>>x>>y,x=fa(x),y=fa(y),f[y]=f[x]=hb(x,y);\n    cin>>q;while (q--){\n        cin>>c>>x>>y;\n        if (c=='Q')cout<<findit(fa(x),y)<<endl;\n            else x=fa(x),y=fa(y),f[y]=f[x]=hb(x,y);\n    }\n}\n```",
        "postTime": 1506334947,
        "uid": 44165,
        "name": "Starria\u7684\u8111\u6b8b\u7c89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n\u8bd5\u7ef4\u62a4\u82e5\u5e72\u4e2a\u96c6\u5408\u548c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\uff0c\u67e5\u8be2\u96c6\u5408\u4e2d\u7b2c $k$ \u5927\u5143\u7d20\u7684\u7f16\u53f7\u3002\n\n### Sol\n\n\u73b0\u6709\u9898\u89e3\u4e2d\u6700\u5feb\u7684\u3002\n\n\u663e\u7136\u624b\u5199\u5e73\u8861\u6811\u66b4\u529b\u5408\u5e76\u52a0\u4e0a\u6309\u79e9\u5408\u5e76\u7684\u4f18\u5316\u53ef\u4ee5\u8fc7\uff0c\u4f46\u662f\u624b\u5199\u5e73\u8861\u6811\u5f88\u5bb9\u6613\u6302\u6389\u3002\n\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd 28 \u7bc7\u9898\u89e3\u90fd\u6ca1\u6709\u63d0\u5230\u8fc7\u7684\u5168\u65b0\u505a\u6cd5\uff1a\u6811\u72b6\u6570\u7ec4\u3002\n\n\u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u79bb\u6563\u5316\u4e4b\u540e\u7ef4\u62a4\u5e73\u8861\u6811\uff0c\u800c\u4e14\u5e38\u6570\u8f83\u5c0f\u3002\n\n\u5f88\u663e\u7136\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u6811\u72b6\u6570\u7ec4\u662f $O(\\text{\u503c\u57df})$ \u7684\u7a7a\u95f4\uff0c\u5982\u679c\u521a\u5f00\u59cb\u6240\u6709\u5143\u7d20\u90fd\u76f8\u4e92\u9694\u79bb\u5c31\u9700\u8981 $O(n^2)$ \u7684\u7a7a\u95f4\u76f4\u63a5 MLE\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u663e\u7136\u6bcf\u4e2a\u96c6\u5408\u90fd\u5f88\u5c0f\uff0c\u90a3\u4e48\u7528\u5e73\u8861\u6811\u66b4\u529b\u67e5\u627e\u7b2c $k$ \u5927\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\text{\u5f88\u5c0f})$\u3002\n\n\u4e8e\u662f\u4eba\u7c7b\u667a\u6167\u505a\u6cd5\u51fa\u73b0\u4e86\uff1a\n\n\u53d6\u4e00\u4e2a $k$ \uff08\u6211\u5927\u6982\u53d6\u7684\u662f $500$ \u4f30\u8ba1\u8c03\u4e00\u8c03\u8fd8\u80fd\u66f4\u5feb\uff0c\u4e0d\u8fc7\u4e5f\u61d2\u5f97\u8c03\u4e86\uff09\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u96c6\u5408\u7684\u5927\u5c0f\u5c0f\u4e8e $k$ \u90a3\u4e48\u7528 set \u66b4\u529b\u7ef4\u62a4\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u96c6\u5408\u7684\u5927\u5c0f\u5927\u4e8e $k$ \uff0c\u90a3\u4e48\u518d\u641e\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7b2c $k$ \u5927\u3002\n\n\u5408\u5e76\u8fd8\u662f\u66b4\u529b\u5408\u5e76\u3002\n\n\u8fd9\u6837\u5b50\u7684\u590d\u6742\u5ea6\u662f $O(n\\log n+k\\log k)$ \u5de6\u53f3\u7684\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(\\dfrac{n^2}{k}+n)$\u3002\n\n\u4e00\u70b9\u90fd\u6ca1\u6709\u5361\u5e38\uff0c\u968f\u624b\u53d6\u4e00\u4e2a $k$ \u5c31\u603b\u8ba1\u7b2c $8$ \u5feb\uff0c\u9898\u89e3\u7b2c $1$ \u5feb\u3002\n\n### Code\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<stdio.h>\n#include<set>\n#include<numeric>\nusing namespace std;\nconst int K=500,_=100005;\nint n,m,q,u,v,fwtrs[205][_],top=0,f[_],c[_],cc[_];\nvoid readln(int&I){\n    I=0;char C=getchar();\n    while(!isdigit(C)) C=getchar();\n    while( isdigit(C)) (I*=10)+=(C-'0'),C=getchar();\n}\nvoid readln(char&C){\n    C='#';while(!isalpha(C))C=getchar();\n}\nvoid add(int*t,int pos,int val){\n    while(pos<=n)t[pos]+=val,pos+=(pos&-pos); \n}\nint kth(int*t,int val){\n    int res=0,ans=0;\n    for(int i=(1<<19);i;i>>=1)\n        if(ans+i<=n&&res+t[ans+i]<=val) res+=t[ans+=i];\n    return ans;\n}\nstruct hugeset{\n    int*trs;\n    set<int>st;\n    void insert(int val){\n        st.insert(val);\n        if(st.size()==K){\n            trs=fwtrs[++top];\n            for(int x:st)add(trs,x,1);\n        }\n        else if(st.size()>K)\n            add(trs,val,1);\n    }\n    int ukth(int val){\n        if(val>st.size()) return n+1;\n        else if(st.size()>=K) return kth(trs,val-1)+1;\n        auto it=st.begin();while(--val)++it;\n        return*it;\n    }\n}p[_];\nint fi(int&o){\n    if(f[o]==o) return o;\n    else return f[o]=fi(f[o]);\n}\nvoid mer(int x,int y){\n    x=fi(x),y=fi(y);\n    if(x==y)return;\n    if(p[x].st.size()>p[y].st.size()) swap(x,y); f[x]=y;\n    for(int pxx:p[x].st) p[y].insert(pxx); p[x].st.clear();\n}\nchar op;\nint main(){\n    readln(n),readln(m),iota(f+1,f+n+1,1),cc[n+1]=-1;\n    for(int i=1;i<=n;i++)\n        readln(c[i]),cc[c[i]]=i;\n    for(int i=1;i<=m;i++)\n        readln(u),readln(v),f[fi(u)]=fi(v);\n    for(int i=1;i<=n;i++)\n        p[fi(i)].insert(c[i]);\n    readln(q);\n    while (q--){\n        readln(op),readln(u),readln(v);\n        if(op=='Q') printf(\"%d\\n\",cc[p[fi(u)].ukth(v)]);\n        else mer(u,v);\n    }\n}\n```",
        "postTime": 1667524558,
        "uid": 217300,
        "name": "Error_Eric",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3224 [HNOI2012]\u6c38\u65e0\u4e61"
    },
    {
        "content": "\u9898\u76ee\u4e2d\u8981\u6c42\u6211\u4eec\u652f\u6301\u67e5\u8be2\u7b2ck\u5c0f\u503c\uff0c\u6240\u4ee5\u5bb9\u6613\u60f3\u5230\u6743\u503c\u7ebf\u6bb5\u6811\n\n\u7136\u540e\u53c8\u6709\u5408\u5e76\u64cd\u4f5c\uff0c\u5bb9\u6613\u60f3\u5230\u7ebf\u6bb5\u6811\u5408\u5e76\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u505a\u7684\u65f6\u5019\u9700\u8981\u7ef4\u62a4\u4e00\u4e0b\u8fde\u901a\u6027\uff0c\u5bb9\u6613\u60f3\u5230\u5e76\u67e5\u96c6\n\n\u55ef\uff0c\u7136\u540e\u6211\u4eec\u5c31\u80fd\u901a\u8fc7\u672c\u9898\u4e86\uff01\n\n\u8fd8\u6709\u51e0\u70b9\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a\n\n1.\u5e76\u67e5\u96c6\u7684\u5408\u5e76\u548c\u7ebf\u6bb5\u6811\u7684\u5408\u5e76\u65b9\u5411\u8981\u4e00\u81f4\n\u6bd4\u5982\u8bf4\u5e76\u67e5\u96c6\u662ff[b]=a,\u90a3\u4e48\u5408\u5e76\u7ebf\u6bb5\u6811\u4e5f\u9700\u8981b\u5411a\u5408\u5e76\u7684\u6837\u5b50\u3002\n\n2.\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u8bb0\u5f97\u6c42\u51fa\u5e76\u67e5\u96c6\u7684\u6839\u518d\u67e5\u8be2\n\n\u53ef\u4ee5\u8bf4\u9898\u76ee\u7531\u6b64\u7ed3\u675f\u4e86\uff0c\u6ce8\u610f\u7b2ck\u5c0f\u7684\u5b58\u5728\uff0c\u8fd9\u4e2a\u624d\u662f\u89e3\u9898\u7684\u5173\u952e\n\n```cpp\n#include <bits/stc++.h>\n\nusing namespace std;\n\nconst int N = 100010;\nconst int M = 3200010;\nint n , m , q , cnt , rt[N] , f[N];\nint ls[M] , rs[M] , id[M] , sum[M];\nchar ch[5];\n\ninline int read(){\n    int num = 0 , x = 1;\n    char c = getchar();\n    while(c < '0' || c > '9'){\n        if(c == '-')\n            x = -x;\n        c = getchar();\n    }\n    while(c <= '9' && c >= '0'){\n        num = (num << 1) + (num << 3) + c - '0';\n        c = getchar();\n    }\n    return num * x;\n}\n\ninline int getf(int x){\n    return x == f[x] ? x : f[x] = getf(f[x]);\n}\n\ninline void update(int a){\n    sum[a] = sum[ls[a]] + sum[rs[a]];\n}\n\ninline int add(int a , int x , int y , int pos , int idx){\n    if(!a)\n        a = ++cnt;\n    if(x == y){\n        id[a] = idx;\n        sum[a]++;\n        return a;\n    }\n    int mid = (x + y) >> 1;\n    if(pos <= mid)\n        ls[a] = add(ls[a] , x , mid , pos , idx);\n    else    \n        rs[a] = add(rs[a] , mid + 1 , y , pos , idx);\n    update(a);\n    return a;\n}\n\ninline int merge(int a , int b , int x , int y){\n    if(!a)\n        return b;\n    if(!b)\n        return a;\n    if(x == y){ \n        if(id[b]){\n            id[a] = id[b];\n            sum[a] += sum[b];\n        }\n        return a;\n    }\n    int mid = (x + y) >> 1;\n    ls[a] = merge(ls[a] , ls[b] , x , mid);\n    rs[a] = merge(rs[a] , rs[b] , mid + 1 , y);\n    update(a);\n    return a;\n}\n\ninline int query(int a , int k , int x , int y){\n    int ans;\n    if(sum[a] < k || !a)\n        return 0;\n    if(x == y)\n        return id[a];\n    int mid = (x + y) >> 1;\n    if(k <= sum[ls[a]])\n        ans = query(ls[a] , k , x , mid);\n    else\n        ans = query(rs[a] , k - sum[ls[a]] , mid + 1 , y);\n    return ans;\n}\n\nint main(){\n    int x , y;\n    n = read();\n    m = read();\n    for(register int i = 1 ; i <= n ; ++i){\n        f[i] = i;\n        x = read();\n        rt[i] = add(rt[i] , 1 , n , x , i);\n    }\n    for(register int i = 1 ; i <= m ; ++i){\n        x = read();\n        y = read();\n        x = getf(x);\n        y = getf(y);\n        f[y] = x;\n        rt[x] = merge(rt[x] , rt[y] , 1 , n);\n    }      \n    q = read();\n    while(q--){\n        scanf(\"%s\" , ch);\n        if(ch[0] == 'B'){\n            x = read();\n            y = read();\n            x = getf(x);\n            y = getf(y);\n            if(x == y)\n                continue;\n            f[y] = x;\n            rt[x] = merge(rt[x] , rt[y] , 1 , n);\n        }\n        else{\n            x = read();\n            y = read();\n            x = getf(x);\n            int ans = query(rt[x] , y , 1 , n);\n            if(!ans)\n                printf(\"-1\\n\");\n            else\n                printf(\"%d\\n\",ans);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1577605047,
        "uid": 68288,
        "name": "zyh2333",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "$$\\color{cornflowerblue}{\\mathcal{Treaker}}$$\n# \u5e73\u8861\u6811\n## Splay\n\u4e00\u773c\u9898\u9762\uff0c\u7ef4\u62a4\u8fde\u901a\u6027\u3002\n\n\u83ab\u975e\u662fLCT\uff1f\uff1f\uff1f\n\n\u4f46LCT\u53ea\u80fd\u7ef4\u62a4\u4e00\u6761\u5b9e\u8def\u5f84~~\u5982\u679c\u53ef\u4ee5\u5c31\u5f53\u6211\u6ca1\u8bf4~~\u3002\n\n\u90a3\u4e48\u4ec0\u4e48\u8fd8\u53ef\u4ee5\u7ef4\u62a4\u8fde\u901a\u6027\u5462\u3002\n\n\u5e76\u67e5\u96c6\u554a\u3002\u3002\u3002\n\n\u6392\u540d\u7b2ck\u5c0f\u3002\u5e73\u8861\u6811\u57fa\u672c\u64cd\u4f5c\u554a\n\n\u4e8e\u662f\u6211\u4eec\u51b3\u5b9a\u5199\u5e73\u8861\u6811\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5e76\u4e14\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\u3002\n\n\u4ec0\u4e48\u662f\u5e73\u8861\u6811\u542f\u53d1\u5f0f\u5408\u5e76\u5462\uff1f\uff1f\uff1f~~\u542c\u8d77\u6765\u633a\u9ad8\u5927\u4e0a\u7684\u6837\u5b50~~\n\n\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u66b4\u529b\u63d2\u5165\u3002\u3002\u3002\n\n\u4f46\u662f\u5b83\u7684\u590d\u6742\u5ea6\u5c31\u662f$~O(nlogn)~$\u3002\u636e\u8bf4\u662f\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u5408\u5e76$~logn~$\u6b21\uff0c\u4f46\u849f\u84bb\u4e0d\u4f1a\u8bc1\u3002\n\n\u8fd8\u6709\uff0c\u8fd9\u91cc\u7684\u542f\u53d1\u5f0f\u5408\u5e76\u4e00\u5b9a\u8981\u4ece\u5c0f\u7684\u5411\u5927\u7684\u5408\u5e76\uff0c\u4e0d\u7136\u4f1a\u70b8\u7a7a\u95f4\u3002\n\n\u524d\u540e\u4e24\u6b21[\u7b2c\u4e00\u6b21](https://www.luogu.org/record/24352682)[\u7b2c\u4e8c\u6b21](https://www.luogu.org/record/24361549)\n\n\u76f8\u5dee100\u591aMB\uff0c\u60e8\u65e0\u4eba\u9053\u3002\u3002\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nconst int N = 100005 , inf = 2147483647;\ninline int read()\n{\n    int x = 0 , f = 1;  char ch = getchar();\n    while(ch < '0' || ch > '9') {if(ch == '-')  f = -1; ch = getchar();}\n    while(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n    return x * f;\n}\nint n , m;\nint fa[N] , id[N];\nchar s[5];\nstruct Splay\n{\n\tstruct node\n\t{\n\t\tnode *ch[2] , *fa;\n\t\tint val , size;\n\t\tnode(node *fa = NULL,int val = 0) : fa(fa) , val(val) {ch[0] = ch[1] = NULL;size = 1;}\n\t\tinline bool isr() {return this == fa -> ch[1];}\n\t\tinline int rk() {return 1 + (ch[0] ? ch[0] -> size : 0);}\n\t\tinline void up() {size = 1 + (ch[0] ? ch[0] -> size : 0) + (ch[1] ? ch[1] -> size : 0);}\n\t}*root[N];\n\tinline void rot(int l,node *x)\n\t{\n\t\tbool k = x -> isr();\n\t\tnode *y = x -> fa , *z = y -> fa , *w = x -> ch[!k];\n\t\tif(y != root[l]) z -> ch[y -> isr()] = x;\n\t\telse root[l] = x;\n\t\tx -> fa = z; y -> fa = x;\n\t\tx -> ch[!k] = y; y -> ch[k] = w;\n\t\tif(w) w -> fa = y;\n\t\ty -> up(); x -> up();\n\t}\n\tinline void splay(int y,node *x)\n\t{\n\t\twhile(x != root[y])\n\t\t{\n\t\t\tif(x -> fa != root[y]) rot(y,x -> isr() ^ x -> fa -> isr() ? x : x -> fa);\n\t\t\trot(y,x);\n\t\t}\n\t}\n\tinline void insert(int x,int val)\n\t{\n\t\tnode *p = root[x] , *fa = NULL;\n\t\twhile(p)\n\t\t{\n\t\t\tfa = p;\n\t\t\tp = p -> ch[val > p -> val];\n\t\t}\n\t\tp = new node(fa,val);\n\t\tfa -> ch[val > fa -> val] = p;\n\t\tsplay(x,p);\n\t}\n\tinline int rank(int x,int val)\n\t{\n\t\tnode *p = root[x] , *lst = NULL; int res = 0;\n\t\twhile(p)\n\t\t{\n\t\t\tlst = p;\n\t\t\tif(val <= p -> val) p = p -> ch[0];\n\t\t\telse res += p -> rk() , p = p -> ch[1];\n\t\t}\n\t\tsplay(x,lst);\n\t\treturn res + 1;\n\t}\n\tinline int kth(int x,int k)\n\t{\n\t\tnode *p = root[x];\n\t\twhile(p && p -> rk() != k)\n\t\t{\n\t\t\tif(k < p -> rk()) p = p -> ch[0];\n\t\t\telse k -= p -> rk() , p = p -> ch[1];\n\t\t}\n\t\treturn splay(x,p) , p -> val;\n\t}\n\tint find(int x) {return fa[x] == x ? fa[x] : fa[x] = find(fa[x]);}\n\tinline void dfs(int x,node *p)\n\t{\n\t\tinsert(x,p -> val);\n\t\tif(p -> ch[0]) dfs(x,p -> ch[0]);\n\t\tif(p -> ch[1]) dfs(x,p -> ch[1]);\n\t}\n\tinline void Union(int u,int v) \n\t{\n\t\tif(root[u] -> size < root[v] -> size) swap(u,v);\n\t\tdfs(u,root[v]); fa[v] = u;\n\t}\n\tinline void League_of_Legends()\n\t{\n\t\tn = read(); m = read();\n\t\tfor(int i = 1 , x;i <= n;i ++)\n\t\t{\n\t\t\tx = read(); fa[i] = i; id[x] = i;\n\t\t\troot[i] = new node(NULL,x);\n\t\t}\t\n\t\tfor(int i = 1 , u , v;i <= m;i ++)\n\t\t{\n\t\t\tu = read(); v = read();\n\t\t\tif(u == 0 || v == 0) continue;\n\t\t\tu = find(u); v = find(v);\n\t\t\tUnion(u,v);\n\t\t}\n\t\tint Q = read();\n\t\tfor(int i = 1 , u , v;i <= Q;i ++)\n\t\t{\n\t\t\tchar s;\n\t\t\tcin >> s; u = read(); v = read();\n\t\t\tif(s == 'Q') \n\t\t\t{\n\t\t\t\tu = find(u);\n\t\t\t\tif(rank(u,inf) - 1 < v) printf(\"-1\\n\");\n\t\t\t\telse printf(\"%d\\n\",id[kth(u,v)]);\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tu = find(u); v = find(v);\n\t\t\t\tif(u != v) Union(u,v);\n\t\t\t}\n\t\t}\n\t}\n}Dungeon_Fighter;\nint main()\n{\n\tDungeon_Fighter.League_of_Legends();\n\treturn 0;\n}\n```\n",
        "postTime": 1569479346,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "**\u9898\u610f**\n\n\u4f60\u9700\u8981\u7ef4\u62a4\u82e5\u5e72\u8fde\u901a\u5feb\uff0c\u6709\u4e24\u4e2a\u64cd\u4f5c\n\n- \u5408\u5e76$x,y$\u6240\u5728\u7684\u8fde\u901a\u5757\n- \u8be2\u95ee$x$\u6240\u5728\u8fde\u901a\u5757\u4e2d\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u7b2c$k$\u7684\u7ed3\u70b9\u7f16\u53f7\n\n**\u9898\u89e3**\n\n\u53ef\u4ee5\u542f\u53d1\u5f0f\u5408\u5e76$splay$\uff0c\u611f\u89c9\u6bd4\u8f83\u597d\u5199qaq\n\n\u4e00\u4e2a\u8fde\u901a\u5757\u5c31\u662f\u4e00\u4e2a$splay$\uff0c\u6bcf\u6b21\u5408\u5e76\u6311\u5c0f\u7684$splay$\u904d\u5386\u4e00\u904d\u628a\u70b9\u6309\u4e2d\u5e8f\u904d\u5386\u5b58\u4e0b\u6765\uff0c\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u5927\u7684$splay$\u5c31\u884c\u4e86\uff1b\u67e5\u8be2\u5c31\u662f$splay$\u7684$kth$\u64cd\u4f5c\n\n\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6$O(n \\log n)$\uff0c\u5b83\u7684\u8bc1\u660e\u53ef\u4ee5\u89c12018\u8bba\u6587\u96c6 \uff1a**\u8463\u709c\u96bd\u300a\u6d45\u8c08Splay\u4e0eTreap\u7684\u6027\u8d28\u53ca\u5176\u5e94\u7528\u300b**\uff0c\u5176\u4e2d\u6709\u63d0\u4e00\u4e2a$\\text{Dynamic Finger Theorem}$\n\n\uff08\u5176\u5b9e\u968f\u4fbf\u63d2\u5165\u7684\u8bdd\u662f\u4e24\u4e2a$\\log$\uff0c\u4e5f\u80fd\u901a\u8fc7\uff0c\u5341\u5206\u7384\u5b66\uff09\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <vector>\nusing namespace std;\n\nconst int N = 2e5 + 10;\n\nint n, m, q, bel[N], rt[N], w[N];\nint ch[N][2], fa[N], sz[N];\n\nvoid upd(int u) { sz[u] = sz[ch[u][0]] + sz[ch[u][1]] + 1; }\nint dir(int u) { return ch[fa[u]][1] == u; }\n\nvoid rotate(int u) {\n    int d = dir(u), f = fa[u];\n    if(fa[u] = fa[f]) ch[fa[u]][dir(f)] = u;\n    if(ch[f][d] = ch[u][d ^ 1]) fa[ch[f][d]] = f;\n    fa[ch[u][d ^ 1] = f] = u;\n    upd(f); upd(u);\n}\nvoid ins(int &rt, int u, int f = 0) {\n    if(!rt) {\n        rt = u; fa[u] = f; sz[u] = 1;\n        ch[u][0] = ch[u][1] = 0;\n        return ;\n    }\n    ins(ch[rt][w[u] > w[rt]], u, rt);\n    upd(rt);\n}\nvoid splay(int u) {\n    for(; fa[u]; rotate(u)) if(fa[fa[u]])\n        rotate(dir(u) == dir(fa[u]) ? fa[u] : u);\n    rt[bel[u]] = u;\n}\nint kth(int u, int k) {\n    int v = u;\n    while(1) {\n        if(k <= sz[ch[v][0]]) v = ch[v][0];\n        else {\n            k -= sz[ch[v][0]] + 1;\n            if(k <= 0) break ;\n            v = ch[v][1];\n        }\n    }\n    splay(v);\n    return v;\n}\n\nint a[N], l;\nvoid dfs(int u) {\n    if(u) {\n        dfs(ch[u][0]);\n        a[++ l] = u;\n        dfs(ch[u][1]);\n    }\n}\n\nvoid link(int u, int v) {\n    u = bel[u]; v = bel[v];\n    if(u == v) return ;\n    if(sz[rt[u]] < sz[rt[v]]) swap(u, v);\n    l = 0; dfs(rt[v]);\n    for(int i = 1; i <= l; i ++) {\n        bel[a[i]] = u;\n        ins(rt[u], a[i]);\n        splay(a[i]);\n    }\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for(int i = 1; i <= n; i ++) scanf(\"%d\", w + i);\n    for(int i = 1; i <= n; i ++) {\n        bel[i] = rt[i] = i; sz[i] = 1;\n    }\n    int u, v;\n    for(int i = 1; i <= m; i ++) {\n        scanf(\"%d%d\", &u, &v);\n        link(u, v);\n    }\n    scanf(\"%d\", &q);\n    char op[5];\n    for(int i = 1; i <= q; i ++) {\n        scanf(\"%s%d%d\", op, &u, &v);\n        if(* op == 'Q') {\n            u = rt[bel[u]];\n            if(v > sz[u]) puts(\"-1\");\n            else printf(\"%d\\n\", kth(u, v));\n        }\n        if(* op == 'B') link(u, v);\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1550134316,
        "uid": 20375,
        "name": "hongzy",
        "ccfLevel": 9,
        "title": "P3224 \u300cHNOI 2012\u300d\u6c38\u65e0\u4e61\u300c\u542f\u53d1\u5f0f\u5408\u5e76\u300d"
    },
    {
        "content": "### Descriprition\n\n\u4e24\u79cd\u64cd\u4f5c\n1. \u628a\u4e24\u4e2a\u96c6\u5408\u5e76\u8d77\u6765\n2. \u6c42\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u7b2c $k$ \u5927\uff08\u7684\u7f16\u53f7\uff09\n\n$n \\leq 10^5$\n\n### Solution\n\n\u5e73\u8861\u6811\u7684\u677f\u5b50\u9898\u4e4b\u4e00\n\n\u7ef4\u62a4\u4e24\u4e2a\u70b9\u8fde\u4e0d\u8fde\u901a\u76f4\u63a5\u5e76\u67e5\u96c6\n\n\u8003\u8651\u600e\u4e48\u628a\u4e24\u4e2a\u96c6\u5408\u5408\u5e76\n\n\u542f\u53d1\u5f0f\u5408\u5e76\uff01\u5373\u628a siz \u5c0f\u7684\u90a3\u4e00\u9897\u5e73\u8861\u6811\u6bcf\u4e00\u4e2a\u70b9\u66b4\u529b\u5730\u52a0\u5165\u5230\u53e6\u4e00\u4e2a\n\n\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\uff1f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6bcf\u4e00\u6b21\u5408\u5e76\u4e4b\u540e\u96c6\u5408\u5927\u5c0f\u90fd\u81f3\u5c11\u662f\u539f\u6765\u7684\u4e24\u8fb9\uff0c\u6240\u4ee5\u6bcf\u4e00\u4e2a\u70b9\u90fd\u53ea\u4f1a\u88ab\u5408\u5e76 $\\log n$ \u6b21\u3002\u6240\u4ee5\u8fd9\u6837\u505a\u662f $O(n \\log n)$ \u7684\u3002\n\n\u5b9e\u73b0\u4e0a\u7684\u7ec6\u8282\u95ee\u9898\uff1a\n\n\u6211\u7528\u4e86 fhqtreap\uff08\u5927\u6cd5\u597d\uff01\uff09\u3002\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u8fc7\u7a0b\uff08\u501f\u9274\u4e86\u9898\u89e3\u533a\u91cc\u53e6\u5916\u4e00\u4e2adalao\u7684fhqtreap\uff09\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a\n\n```cpp\ninline void M(node *&r, node *p) { // p \u5408\u5e76\u5230 r \u4e2d \n  if(!p) return ; \n  M(r, p->ch[0]); M(r, p->ch[1]); // \u9012\u5f52\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\n  p->ch[0] = p->ch[1] = 0; // \u628a\u5b83\u5de6\u53f3\u5b50\u6e05\u7a7a\u7136\u540e\u63d2\u5230 r \u91cc\n  insert(r, p); \n}\n```\n\n### Code\n\n[\u770b\u4ee3\u7801\u6233\u8fd9\u91cc\uff08\u6307\u9488\u798f\u5229 =w=\uff09](https://www.cnblogs.com/acfunction/p/10171181.html)",
        "postTime": 1545659294,
        "uid": 54745,
        "name": "Gypsophila",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "\u5206\u6790\uff1a\n      \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u70b9\u7684\u8fde\u901a\u5173\u7cfb\u3002\n\n      \u5bf9\u4e8e\u8be2\u95ee\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u540c\u4e00\u8fde\u901a\u5757\u4e2d\u7684\u8282\u70b9\u90fd\u653e\u5728\u4e00\u9897splay\u4e2d\n\n      \u7136\u540e\u5c31\u662f\u6c42\u4e00\u9897splay\u4e2d\u7684\u7b2ck\u5c0f\u3002\n      \n      \u7136\u540e\u5efan\u68f5\u4e00\u4e2a\u8282\u70b9\u7684splay\uff0c\u5728\u8fde\u8fb9\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u5408\u5e76\u4e24\u9897splay(\u542f\u53d1\u5f0f\u5408\u5e76)\n      \n      \u6ce8\u610fsplay\u4e2d\u7684\u67e5\u8be2\u64cd\u4f5c\u8981\u5c3d\u91cf\u7528\u975e\u9012\u5f52\u5f62\u5f0f\uff0c\u5426\u5219\u4f1aT\u3002\n\n\n\u4ee3\u7801:\n```cpp\n#include<iostream>\n#include<cstdio>\n\nusing namespace std;\n\nstruct t\n{\n    int fa,ch[2],val,size;\n}sbt[500001];\n\nint n,m,ff[500001],a[500001],root[500001];\n\nvoid update(int o){sbt[o].size=sbt[sbt[o].ch[0]].size+sbt[sbt[o].ch[1]].size+1;}\n\nint find(int o) {return (o==ff[o])?o:ff[o]=find(ff[o]);}\n\nint Find(int o,int p)\n{\n    while(1)\n    {\n        if(o==0) return -1;\n        if(sbt[sbt[o].ch[0]].size<p) {p=p-sbt[sbt[o].ch[0]].size-1;o=sbt[o].ch[1];}else\n        if(sbt[sbt[o].ch[0]].size>p) o=sbt[o].ch[0];else return sbt[o].val;\n    }\n}\n\nvoid rotate(int o)\n{\n    int x=o,y=sbt[x].fa,z=sbt[y].fa;\n    int k=sbt[y].ch[1]==x;\n    sbt[z].ch[y==sbt[z].ch[1]]=x;\n    sbt[x].fa=z;sbt[y].fa=x;\n    sbt[y].ch[k]=sbt[x].ch[k^1];\n    sbt[sbt[x].ch[k^1]].fa=y;\n    sbt[x].ch[k^1]=y;\n    update(y);update(x);\n}\n\nvoid splay(int o,int p)\n{\n    while(sbt[o].fa!=p)\n    {\n        int x=o,y=sbt[x].fa,z=sbt[y].fa;\n        if(z!=p)\n            ((x==sbt[y].ch[0])==(y==sbt[x].ch[0]))?rotate(y):rotate(x);\n        rotate(x);\n    }\n    if(p==0) root[find(o)]=o;\n}\n\nvoid insert(int o,int p)\n{\n    int y=p,k1=0;\n    while(y!=0)\n        if(o<y) {k1=y;y=sbt[y].ch[0];}else {k1=y;y=sbt[y].ch[1];}\n    y=k1;\n    sbt[o].fa=y;sbt[o].ch[0]=sbt[o].ch[1]=0;\n    sbt[o].size=1;\n    if(y<o) sbt[y].ch[1]=o;else sbt[y].ch[0]=o;\n    update(y);\n    splay(o,0);\n}\n\nvoid charu(int o,int p)\n{\n    if(o==0) return;\n    charu(sbt[o].ch[0],p);\n    charu(sbt[o].ch[1],p);\n    insert(o,p);\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n        ff[a[i]]=a[i];\n        sbt[a[i]].fa=sbt[a[i]].ch[0]=sbt[a[i]].ch[1]=0;\n        sbt[a[i]].val=i;\n        sbt[a[i]].size=1;\n        root[a[i]]=a[i];\n    }\n    for(int i=1;i<=m;i++)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        int xx=find(a[x]),yy=find(a[y]);\n        if(sbt[root[xx]].size>sbt[root[yy]].size) swap(xx,yy);\n        charu(root[xx],root[yy]);ff[yy]=xx;\n    }\n    int Q;\n    cin>>Q;\n    while(Q--)\n    {\n        char ch[5];int x,y;\n        scanf(\"%s%d%d\",ch,&x,&y);\n        if(ch[0]=='Q') \n        {\n            int xc=find(a[x]);\n            splay(a[x],0);\n            printf(\"%d\\n\",Find(root[xc],y-1));\n        }\n        if(ch[0]=='B')\n        {\n            int xx=find(a[x]),yy=find(a[y]);\n            if(sbt[root[xx]].size>sbt[root[yy]].size) swap(xx,yy);\n            charu(root[xx],root[yy]);ff[yy]=xx;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1526870236,
        "uid": 79044,
        "name": "\u7834\u58c1\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "\u67e5\u8be2\u96c6\u5408\u5185\u7b2ck\u5c0f\uff0c\u5e73\u8861\u6811\u53ef\u4ee5\u641e\u3002\n\n\u5408\u5e76\u600e\u4e48\u529e\uff1f\n\n\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u66b4\u529b\u62c6\u89e3\u4e00\u4e2asize\u6bd4\u8f83\u5c0f\u7684\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u81f3\u591a\u88ab\u62c6log(n)\u6b21\u3002\n\n\uff08\u5982\u679c\u4fe9\u70b9\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\u5c31\u4e0d\u8981\u518d\u5408\u5e76\u5566\u67e5\u4e86\u4e00\u4e2a\u5c0f\u65f6QAQ\uff09\n\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#define N 100005\nusing namespace std;\nstruct Point {\n    int ord,val;\n    Point(int x=0,int y=0):ord(x),val(y){}\n    bool operator < (const Point &rhs) const {return val<rhs.val;}\n    bool operator == (const Point &rhs) const {return val==rhs.val;}\n};\nstruct Node {\n    Node* ch[2];\n    int s,r;\n    Point v;\n    int cmp(Point x) {\n        if(x==v) return -1;\n        return x < v ? 0 : 1;\n    }\n    void maintain() {\n        s=ch[0]->s+ch[1]->s+1;\n        return ;\n    }\n    Node(Point);\n}*null=new Node(Point(0,0)),*treap[N];\nNode :: Node(Point x):v(x){ r=rand(); s=null ? 1 : 0; ch[0]=ch[1]=null;}\nvoid Rotate(Node*& o,int d) {\n    Node* k=o->ch[d^1];\n    o->ch[d^1]=k->ch[d];\n    k->ch[d]=o;\n    o->maintain(); k->maintain();\n    o=k;\n    return ;\n}\nvoid Insert(Node*& o,Point x) {\n    if(o==null) {o=new Node(x); return ;}\n    int d=o->cmp(x);\n    Insert(o->ch[d],x);\n    if(o->ch[d]->r > o->r) Rotate(o,d^1);\n    o->maintain();\n    return ;\n}\nvoid Merge(Node*& o,Node*& x) {\n    if(o==null) return ;\n    Merge(o->ch[0],x); Merge(o->ch[1],x);\n    Insert(x,o->v);\n    delete o;\n    o=null;\n    return ;\n}\nint Kth(Node* o,int x) {\n    if(x > o->s || x<1 || o==null) return -1;\n    if(o->ch[0]->s+1 == x) return o->v.ord;\n    if(o->ch[0]->s+1 > x) return Kth(o->ch[0],x);\n    return Kth(o->ch[1],x-o->ch[0]->s-1);\n}\nint pa[N];\nint root(int x) {return pa[x]==x ? pa[x] : pa[x]=root(pa[x]);}\nint main() {\n    null->ch[0]=null->ch[1]=null;\n    int n,m,x,y;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++) scanf(\"%d\",&x) , treap[i]=new Node(Point(i,x)) , pa[i]=i;\n    while(m--) {\n        scanf(\"%d%d\",&x,&y);\n        int pa_x=root(x),pa_y=root(y);\n        if(pa_x==pa_y) continue;\n        if(treap[pa_x]->s > treap[pa_y]->s) Merge(treap[pa_y],treap[pa_x]) , pa[pa_y]=pa_x;\n        else Merge(treap[pa_x],treap[pa_y]) , pa[pa_x]=pa_y;\n    }\n    scanf(\"%d\",&m);\n    while(m--) {\n        char mode[2];\n        scanf(\"%s%d%d\",mode,&x,&y);\n        int pa_x=root(x);\n        if(mode[0]=='Q') printf(\"%d\\n\",Kth(treap[pa_x],y));\n        if(mode[0]=='B') {\n            int pa_y=root(y);\n            if(pa_x==pa_y) continue;\n            if(treap[pa_x]->s > treap[pa_y]->s) Merge(treap[pa_y],treap[pa_x]) , pa[pa_y]=pa_x;\n            else Merge(treap[pa_x],treap[pa_y]) , pa[pa_x]=pa_y;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1482721294,
        "uid": 20558,
        "name": "zyh2015",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    },
    {
        "content": "\u6307\u9488splay\u6765\u4e00\u53d1\n\n\u601d\u7ef4\u5404\u4f4ddalao\u90fd\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\n\n\u6bcf\u4e00\u4e2a\u5c9b\u90fd\u5efa\u7acb\u4e00\u4e2a\u5b58\u50a8\u91cd\u8981\u503c\u7684splay\n\n\u5408\u5e76\u76f4\u63a5\u628a\u5c0f\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fdinsert\u5230\u5927\u6811\u91cc\u5c31\u597d\u4e86\n\n\u67e5\u8be2\u5c31\u662f\u67e5\u6392\u540d(\u6ce8\u610f\u8f93\u51fa-1\u2026\n\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nconst int N=100001;\ninline int read()\n{\n\tint out=0;char ch=getchar();\n\twhile (ch<48||ch>57)ch=getchar();\n\twhile (ch>47&&ch<58)out=(out<<3)+(out<<1)+ch-48,ch=getchar();\n\treturn out;\n}\nnamespace Splay //Splay\n{\n\tstruct tree\n\t{\n\t\tint value,size;\n\t\ttree *fa,*son[2];\n\t\tinline tree(int key)\n\t\t{\n\t\t\tsize=1;\n\t\t\tvalue=key;\n\t\t\tfa=son[0]=son[1]=NULL;\n\t\t}\n\t\tinline void pushup()\n\t\t{\n\t\t\tsize=1;\n\t\t\tif (son[0])size+=son[0]->size;\n\t\t\tif (son[1])size+=son[1]->size;\n\t\t}\n\t}*root[N];\n\tinline bool connection(tree *p)\n\t{\n\t\tif (p&&p->fa)return p->fa->son[1]==p;\n\t}\n\tinline void connect(tree *&p,tree *&fa,bool which)\n\t{\n\t\tif (p)p->fa=fa;\n\t\tif (fa)fa->son[which]=p;\n\t}\n\tinline void rotate(tree *&p)\n\t{\n\t\ttree *fa=p->fa;\n\t\tbool lr=connection(p);\n\t\tconnect(p,fa->fa,connection(fa));\n\t\tconnect(p->son[lr^1],fa,lr);\n\t\tconnect(fa,p,lr^1);\n\t\tfa->pushup();p->pushup();\n\t}\n\tinline void splay(tree *&p,tree *&root)\n\t{\n\t\tfor (tree *fa;fa=p->fa;rotate(p))\n\t\t\tif (fa->fa)\n\t\t\t\trotate(connection(p)==connection(fa)?fa:p);\n\t\troot=p;\n\t}\n\tinline void insert(int insertion,tree *&root)\n\t{\n\t\tif (root==NULL)\n\t\t{\n\t\t\troot=new tree(insertion);\n\t\t\treturn;\n\t\t}\n\t\ttree *now=root;\n\t\twhile (1)\n\t\t{\n\t\t\tif (now->value==insertion)return;\n\t\t\ttree *fa=now;\n\t\t\tbool direction=fa->value<insertion;\n\t\t\tnow=fa->son[direction];\n\t\t\tif (now==NULL)\n\t\t\t{\n\t\t\t\tnow=new tree(insertion);\n\t\t\t\tconnect(now,fa,direction);\n\t\t\t\tfa->pushup();\n\t\t\t\tsplay(now,root);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tinline int find_rank(int ranking,tree *root)\n\t{\n\t\ttree *now=root;\n\t\tif (root->size<ranking)return 0;\n\t\twhile (1)\n\t\t\tif (now->son[0]&&ranking<=now->son[0]->size)\n\t\t\t\tnow=now->son[0];\n\t\t\telse\n\t\t\t{\n\t\t\t\tranking-=(now->son[0]?now->son[0]->size:0)+1;\n\t\t\t\tif (!ranking)return now->value;\n\t\t\t\tnow=now->son[1];\n\t\t\t}\n\t}\n\tvoid merge(tree *&p,tree *&root)\n\t{\n\t\tif (p->son[0])merge(p->son[0],root);\n\t\tif (p->son[1])merge(p->son[1],root);\n\t\tinsert(p->value,root);\n\t}\n}using namespace Splay;\nnamespace Set  //\u5e76\u67e5\u96c6\n{\n\tint fa[N];\n\tint find(int p)\n\t{\n\t\treturn fa[p]==p?p:fa[p]=find(fa[p]);\n\t}\n\tinline void Union(int a,int b)\n\t{\n\t\tint f1=find(a),f2=find(b);\n\t\tif (f1==f2)return;\n\t\tif (root[f1]->size>root[f2]->size)std::swap(f1,f2);\n        //\u9ed8\u8ba4\u5c0f\u6811\u5408\u5927\u6811\n\t\tfa[f1]=f2;\n\t\tmerge(root[f1],root[f2]);\n\t}\n}\nint n,m,q,num[N]={-1}; //num[x]\u8868\u793a\u91cd\u8981\u503c\u4e3ax\u7684\u5c9b\u5c7f\u7684\u7f16\u53f7\uff0c\u6ce8\u610f-1\nint main()\n{\n\tn=read();m=read();\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tSet::fa[i]=i; //\u8bb0\u5f97\u521d\u59cb\u5316\n\t\tint ranking=read();\n\t\tnum[ranking]=i;\n\t\tinsert(ranking,root[i]);\n\t}\n\twhile (m--)Set::Union(read(),read());\n\tq=read();\n\twhile (q--)\n\t{\n\t\tchar opt;scanf(\" %c\",&opt);\n\t\tint x=read(),y=read();\n\t\tif (opt==66)Set::Union(x,y);\n\t\telse printf(\"%d\\n\",num[find_rank(y,root[Set::find(x)])]); //\u6ce8\u610f\u662ffind(x) \u9700\u8981\u8bbf\u95ee\u96c6\u5408\u7684\u6839\n\t}\n}\n```",
        "postTime": 1532846402,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3224 \u3010[HNOI2012]\u6c38\u65e0\u4e61\u3011"
    }
]