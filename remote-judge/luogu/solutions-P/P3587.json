[
    {
        "content": "### Solution\uff1a\n\n\u3000\u3000\u672c\u9898\u601d\u7ef4\u9898\uff0cZYYS\u3002\n\n\u3000\u3000\u8fd8\u8bb0\u5f97\u524d\u9762HRZ\u5b66\u957f\u8bb2\u7684\u4e00\u9053\u5224\u65ad\u76f8\u4f3c\u5b57\u7b26\u4e32\u7684\u9898\u76ee\uff08\u90a3\u9898\u505a\u6cd5\u662f\u5904\u7406\u51fa26\u4e2a\u5b57\u6bcd\u5206\u522b\u4e3a\u5173\u952e\u5b57\u768401hash\u503c\uff0c\u6392\u5e8f\u540e\u5224\u65ad\u76f8\u7b49\uff09\uff0c\u672c\u9898\u505a\u6cd5\u7c7b\u4f3c\uff0c\u5148\u5c06\u539f\u6570\u5217\u7684\u65ad\u70b9\u6309\u6bcf\u79cd\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\u6c42\u73af\u5f62\u524d\u7f00\u548c\uff0c\u56e0\u4e3a\u662f\u73af\u5f62\uff0c\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u8be5\u989c\u8272\u7684\u540e\u9762\u7684\u65ad\u70b9\u524d\u7f00\u548c\u4e3a0\uff0c\u6211\u4eec\u4ee5\u6837\u4f8b\u4e3a\u4f8b\uff1a\n\n\u3000\u3000![](http://img2018.cnblogs.com/blog/1240891/201809/1240891-20180904131426927-757097226.jpg)\n~~\u7559\u56fe\u5e26\u753b~~\uff08\u624b\u7ed8\u52ff\u55b7\uff09\u3002\n\n\u3000\u3000\u4e0d\u96be\u53d1\u73b0\u80fd\u5207\u4e24\u5200\u7684\u4f4d\u7f6e\u6240\u5bf9\u5e94\u7684$k$\u5143\u7ec4\u4e00\u5b9a\u76f8\u7b49\uff0c\u8bc1\u660e\u5f88\u7b80\u5355\uff1a\u82e5\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684$k$\u5143\u7ec4\u76f8\u7b49\uff0c\u90a3\u4e48\u540c\u4e00\u989c\u8272\u7684\u73af\u5f62\u524d\u7f00\u548c\u662f\u76f8\u7b49\u7684\uff0c\u8fd9\u5c31\u8bf4\u660e\u5728\u8fd9\u4e24\u4f4d\u7f6e\u5207\u51fa\u7684\u4e24\u6bb5\u4e2d\u6709\u4e00\u6bb5\u4e00\u5b9a\u4e0d\u5305\u542b\u8be5\u989c\u8272\uff0c\u4e8e\u662f\u53e6\u4e00\u6bb5\u4e00\u5b9a\u5305\u542b\u6240\u6709\u7684\u8be5\u989c\u8272\u54af\u3002\n\n\u3000\u3000\u90a3\u4e48\u6211\u4eec\u5c06\u6bcf\u4e2a\u4f4d\u7f6e\u7684$k$\u5143\u7ec4\u5904\u7406\u51fa\u6765\uff0c\u7531\u4e8e$k\\leq 10^6$\u53c8\u8981\u6bd4\u8f83\u76f8\u7b49\uff0c\u6240\u4ee5\u8fd8\u5f97hash\u3002\n\n\u3000\u3000\u4e8e\u662f\u7b2c\u4e00\u95ee\u5c31\u8fce\u5203\u800c\u89e3\u4e86\uff0c\u53ea\u9700\u8981\u5bf9hash\u503c\u6392\u5e8f\uff0c\u7136\u540e\u7ec4\u5408\u8ba1\u6570\u3002\n\n\u3000\u3000\u7b2c\u4e8c\u95ee\u8981\u6c42\u5206\u51fa\u7684\u4e24\u6bb5\u7684\u5dee\u7684\u6700\u5c0f\u503c\uff0c\u8bbe\u65ad\u70b9\u4e3a$l,r$\uff0c\u90a3\u4e48\u5dee\u503c$=|n-2*(r-l)|$\uff08\u6ce8\u610f$(r-l)$\u4e0d\u7528+1\uff0c\u56e0\u4e3al\u3001r\u4e3a\u65ad\u70b9\u6807\u53f7\uff0c\u4e4b\u95f4\u6709r-l\u4e2a\u989c\u8272\uff09\uff0c\u663e\u7136\u8981\u4f7f\u7684\u5dee\u503c\u6700\u5c0f\uff0c\u5c31\u5f97\u4f7f$r-l$\u5c3d\u53ef\u80fd\u63a5\u8fd1$n/2$\uff0c\u6ee1\u8db3\u5355\u8c03\u6027\uff0c\u4e8e\u662f\u76f4\u63a5\u5355\u8c03\u961f\u5217\uff0c\u5b9e\u73b0\u65f6\u5728\u7b2c\u4e00\u95ee\u7684\u8fc7\u7a0b\u4e2d\u5bf9\u4e8ehash\u503c\u76f8\u7b49\u7684\u4e00\u6bb5\u5904\u7406\u5e76\u66f4\u65b0\u7b54\u6848\u5c31\u597d\u4e86\u3002\n\n\u3000\u3000\uff08\u5751\u70b9\uff1a\u5361\u5355hash\uff0c\u6240\u4ee5\u5f97\u53cchash\uff0c\u7136\u540e$k$\u5f88\u5927\uff0c\u6240\u4ee5\u57fa\u6570\u4e5f\u5f97\u9009\u5927\uff0c\u5206\u522b\u9009\u4e24\u7ec4\u5b6a\u751f\u7d20\u6570\u5c31OK\u5566\uff01>.^_^.<\uff09\n\n$\\quad\\;\\;$**\u6b22\u8fce\u6765\u8e29\u535a\u5ba2**\uff1a[five20](https://www.cnblogs.com/five20/p/9581552.html)\uff08\u849f\u84bb\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\uff0c\u4e07\u5206\u611f\u8c22\uff5e\uff01\uff09\n\n### \u4ee3\u7801\uff1a\n```cpp\n    /*Code by 520 -- 9.3*/\n    #include<bits/stdc++.h>\n    #define il inline\n    #define ll long long\n    #define RE register\n    #define For(i,a,b) for(RE int (i)=(a);(i)<=(b);(i)++)\n    #define Bor(i,a,b) for(RE int (i)=(b);(i)>=(a);(i)--)\n    using namespace std;\n    const int N=1000005,P1=200019,P2=200011,mod1=1e9+7,mod2=1e9+9;\n    ll s1[N],s2[N],h1[N],h2[N];\n    int n,k,a[N],b[N],c[N];\n    struct node{\n        int id;\n        ll sum1,sum2;\n        bool operator <(const node &a)const {\n            if(sum1!=a.sum1)return sum1<a.sum1;\n            if(sum2!=a.sum2)return sum2<a.sum2;\n            return id<a.id;    \n        }\n    }t[N];\n    int gi(){\n        int a=0;char x=getchar();\n        while(x<'0'||x>'9')x=getchar();\n        while(x>='0'&&x<='9')a=(a<<3)+(a<<1)+(x^48),x=getchar();\n        return a;\n    }\n    int main(){\n        n=gi(),k=gi();\n        For(i,1,n) a[i]=gi();\n        s1[0]=s2[0]=1;\n        For(i,1,k) s1[i]=s1[i-1]*P1%mod1,s2[i]=s2[i-1]*P2%mod2;\n        Bor(i,1,n) if(!b[a[i]]) b[a[i]]=i;\n        ll sum1=0,sum2=0;\n        For(i,1,n) {\n            c[a[i]]++;\n            sum1=(sum1+s1[a[i]])%mod1,sum2=(sum2+s2[a[i]])%mod2;\n            if(b[a[i]]==i) \n                sum1=(sum1-s1[a[i]]*c[a[i]]%mod1+mod1)%mod1,\n                sum2=(sum2-s2[a[i]]*c[a[i]]%mod2+mod2)%mod2;\n            t[i]=node{i,sum1,sum2};\n        }\n        sort(t+1,t+n+1);\n        int mid=n+1>>1,ans=n;\n        ll cnt=0;\n        for(RE int i=1;i<=n;){\n            RE int nxt=i;\n            while(nxt<=n&&t[nxt].sum1==t[i].sum1&&t[nxt].sum2==t[i].sum2) nxt++;\n            cnt+=1ll*(nxt-i)*(nxt-i-1)/2;\n            for(int l=i,r=i;r<nxt;r++){\n                while(l<r&&t[r].id-t[l].id>=mid)l++;\n                int tp1=abs(n-2*(t[r].id-t[l].id));\n                if(l>i){\n                    int tp2=abs(n-2*(t[r].id-t[l-1].id));\n                    if(tp2<tp1)tp1=tp2;\n                }\n                if(tp1<ans)ans=tp1;\n            }\n            i=nxt;\n        }\n        printf(\"%lld %d\\n\",cnt,ans);\n        return 0;    \n    }\n```",
        "postTime": 1536029838,
        "uid": 44000,
        "name": "\u6d45\u8272\u8c03",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3587 \u3010[POI2015]POD\u3011"
    },
    {
        "content": "## \u6211\u5341\u5206\u559c\u6b22\u6570\u636e\u7ed3\u6784\uff0c\u4e8e\u662f\u6211\u5c31\u7528\u7ebf\u6bb5\u6811+\u6808\u8fc7\u4e86\u6b64\u9898\n\n[\u9898\u76ee](https://www.luogu.org/problemnew/show/P3587)\uff08\u5173\u4e8e\u9898\u76ee\u610f\u601d\u6211\u5c31\u4e0d\u5570\u55e6\u4e86\uff09\n\n\u6b64\u9898\u8981\u6c42\u5c06\u4e00\u4e2a\u73af\u5f62\u5e8f\u5217\u5206\u6210\u4e24\u6bb5\u3002\u90a3\u4e48\u53ef\u4ee5\u662f$[1,L-1],[R+1,n]$\u548c$[L,R](L>1,R<n)$\u6216\u8005\u662f$[1,pos]$\u548c$[pos+1,n]$\u8fd9\u4e24\u79cd\u5212\u5206\n\n![](https://cdn.luogu.com.cn/upload/pic/53405.png)\n\n\u90a3\u4e48\u9ec4\u8272\u7684\u90a3\u5757\u5176\u5b9e\u4e24\u79cd\u60c5\u51b5\u90fd\u662f\u8fde\u7eed\u7684\uff0c\u90a3\u4e48\u6b64\u9898\u7b2c\u4e00\u95ee\u5c31\u8f6c\u5316\u4e3a\u4e86\u6c42\u6240\u6709\u5408\u6cd5\u533a\u95f4\u7684\u65b9\u6848\u6570\u3002\uff08\u5408\u6cd5\u533a\u95f4\u662f\u6307\u4e0d\u5b58\u5728\u4e00\u4e2a\u5728$[L,R]$\u7684\u989c\u8272\u51fa\u73b0\u5728$[1,L-1],[R+1,n]$\u4e2d\uff09\uff08\u4e5f\u8bb8\u4f60\u4f1a\u8bf4 **\"\u54c7\uff0c\u4e3a\u4ec0\u4e48\u626f\u5230\u8fd9\u554a\"** \uff0c\u4f46\u662f\u4f60\u770b\u4e86\u4e0b\u9762\u5c31\u4f1a\u660e\u767d\u4e86\uff09\n\n\u90a3\u4e48\u5c31\u662f[P4065 [JXOI2017]\u989c\u8272](https://www.luogu.org/problemnew/show/P4065) \u8fd9\u9898\u4e86\uff08[\u6211\u7684\u9898\u89e3](https://www.luogu.org/blog/wjr5082/p4065-jxoi2017-yan-se)\uff09\n\n\u5efa\u8bae\u5148\u770b\u4e0b\u90a3\u9898\uff0c\u518d\u770b\u6b64\u9898\uff0c\u4f1a\u6709\u79cd **\"\u54e6\uff0c\u539f\u6765\u90fd\u662f\u5957\u8def\uff01\"** \u7684\u611f\u89c9\n\n\u4e3a\u4ec0\u4e48\u8bf4\u8fd9\u4e24\u9898\u662f\u4e00\u4e2a\u5957\u8def\u5462\uff1f\u6b64\u9898\u8981\u6c42 **\"\u6bcf\u79cd\u989c\u8272\u7684\u73e0\u5b50\u53ea\u80fd\u51fa\u73b0\u5728\u5176\u4e2d\u4e00\u6761\u94fe\u4e2d\"** \u54a6\uff1f\u6211\u4eec\u770b\u5230\u989c\u8272\u8fd9\u9898\u8981\u6c42 **\"\u6bcf\u79cd\u989c\u8272\u8981\u4e48\u5220\u53bb\uff0c\u8981\u4e48\u4e0d\u5220\"** \uff0c\u4e0d\u5c31\u662f\u6bcf\u79cd\u989c\u8272\u53ea\u80fd\u90fd\u5728\u5220\u53bb\u989c\u8272\u96c6\u5408\uff0c\u6216\u8005\u662f\u672a\u88ab\u5220\u53bb\u7684\u989c\u8272\u96c6\u5408\u4e48?\u90a3\u4e0d\u662f\u4e00\u6837\u7684\u5417\n\n\u518d\u770b\u6b64\u9898\u8981\u6c42 **\"\u65ad\u6210\u4e24\u6761\u94fe\"** \uff0c\u800c\u989c\u8272\u6b64\u9898\u8981\u6c42 **\"\u5269\u4e0b\u7684\u5e8f\u5217\u662f\u8fde\u7eed\u7684\"** \uff1f\uff1f\u5269\u4e0b\u7684\u5e8f\u5217\u662f\u8fde\u7eed\u7684\uff0c\u90a3\u4e48\u5de6\u53f3\u4e24\u8fb9\u5982\u679c\u76f8\u8fde\uff0c\u90a3\u4e48\u5220\u53bb\u7684\u4e5f\u662f\u8fde\u7eed\u7684\u55bd\uff0c\u90a3\u4e0d\u662f\u53c8\u662f\u4e00\u6837\u7684\u4e48\uff1f\n\n\u4f46\u662f\u5047\u5982\u4f60\u771f\u7684\u628a\u4ee3\u7801\u7167\u642c\u8fc7\u6765\u4e0d\u8003\u8651\u7b2c\u4e8c\u95ee\u4f60\u7684\u7b2c\u4e00\u95ee\u8fd8\u662f\u9519\u7684\uff08\u4f46\u6211\u8bd5\u4e86\u4e0b\u8fc7\u4e8650pts\uff09\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u6b64\u9898\u6709\u4e00\u70b9\u70b9\u4e0d\u4e00\u6837\uff0c\u5047\u5982\u5212\u5206\u6210\u4e86$[L,R]$\u533a\u95f4,\u90a3\u4e48\u548c\u5212\u5206\u6210$[1,L-1],[L+1,R]$\u662f\u4e00\u6837\u7684,\u5212\u5206\u6210$[1,pos]$\u548c\u5212\u5206\u6210$[pos+1,n]$\u53c8\u662f\u4e00\u6837\u7684\uff0c\u5206\u522b\u5bf9\u5e94\u4e0a\u56fe\u4e24\u79cd\u60c5\u51b5\n\n\u4f46\u662f\u597d\u5728\u6211\u4eec\u7b2c\u4e00\u79cd\u662f\u4e0d\u4f1a\u7b97\u91cd\u590d\u7684\uff0c\u6211\u4eec\u5728\u7b97\u7684\u65f6\u5019\u53ea\u662f\u6c42 **\u533a\u95f4** \u5408\u4e0d\u5408\u6cd5\uff0c\u56e0\u4e3a\u53ea\u8981\u77e5\u9053\u4e00\u6761\u94fe\u7684\u4fe1\u606f\uff0c\u5c31\u80fd\u77e5\u9053\u53e6\u4e00\u6761\uff0c\u800c\u53ea\u6709\u4e0a\u56fe\u4e24\u79cd\u60c5\u51b5\uff0c\u603b\u662f\u80fd\u901a\u8fc7\u4e00\u4e2a\u533a\u95f4\u77e5\u9053\u8fd9\u6837\u5212\u5206\u662f\u5426\u5408\u6cd5\uff08\u53ea\u8981\u4e00\u6761\u94fe\u5408\u6cd5\uff0c\u53e6\u4e00\u6761\u4e00\u5b9a\u5408\u6cd5\uff09\n\n\u4f46\u662f\u7b2c\u4e8c\u79cd\u5462\uff1f$[1,pos]$\u548c$[pos+1,n]$\u662f\u4e00\u6837\u7684\u554a\uff0c\u6211\u4eec\u5c31\u4f1a\u7b97\u4e24\u6b21\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u6b64\u9898\u53ea\u8981\u6c42\u7b97\u4e00\u6b21...\u611f\u89c9\u4e0a\u597d\u50cf\u662f\u6ca1\u6cd5\u5904\u7406\uff0c\u4e0d\u597d\u53bb\u91cd\uff0c\u5b9e\u9645\u4e0a\u5982\u679c\u4f60~~\u8db3\u591f\u806a\u660e~~\uff0c\u4f60\u4f1a\u53d1\u73b0**\u53ea\u8981\u533a\u95f4\u5de6\u7aef\u70b9\u6c38\u8fdc\u4e0d\u53d6\u52301**\u5c31\u884c\u4e86\uff08\u6216\u8005\u53f3\u7aef\u70b9\u6c38\u8fdc\u4e0d\u53d6\u5230$n$\u4e5f\u884c\uff09\uff0c\u5b9e\u9645\u4e0a\u521a\u597d\u4e5f\u6ee1\u8db3\u4e86\u9898\u76ee\u8981\u6c42\u7684\u4e0d\u80fd\u4e0d\u5207\u6761\u4ef6\uff01\n\n\u56e0\u4e3a\u53f3\u7aef\u70b9\u5728$n$\u6211\u4eec\u6c42\u51fa\u4e86\u5de6\u7aef\u70b9\u4e0d\u5728$1$\u7684\u5408\u6cd5\u65b9\u6848\uff0c\u90a3\u4e48\u53d6\u8865\u96c6\uff0c\u4e5f\u5c31\u662f\u6c42\u51fa\u4e86\u5de6\u7aef\u70b9\u5728$1$\u7684\u6240\u6709\u53f3\u7aef\u70b9\u4e0d\u4e3a$n$\u7684\u5408\u6cd5\u65b9\u6848,\u8fd9\u6837\u5b50\u5c31\u4e0d\u4f1a\u91cd\u590d\u4e86\uff0c\u56e0\u4e3a\u53ea\u6709$[1,pos]$\u53ef\u80fd\u548c$[pos+1,n]$\u91cd\u590d\uff0c\u7ed3\u679c\u88ab\u6211\u4eec~~\u5de7\u5999~~\u5730\u5206\u6210\u4e86\u4e00\u79cd\u60c5\u51b5\n\n\u5173\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86$[pos,R](\\forall pos,1<=pos<=R)$\u7684\u5dee\u503c\uff0c\u8981\u63a8\u51fa$[pos,R+1](\\forall pos,1<=pos<=R+1)$\n\n$n\\&1==0 :$R-pos+1<(n>>1),R+1\u65f6\u5dee\u503c\u5c31-2\uff0c$R-pos+1>=(n>>1),R+1$\u65f6\u5dee\u503c+2\n\n\u4e3e\u4e2a\u6817\u5b50,$n=8,pos=2,R=5$,\u90a3\u4e48$R-pos+1=4$,\u5dee\u503c\u4e3a$abs(4-4)\uff0cR=6$\u65f6\uff0c$R-pos+1=5$,\u5dee\u503c\u4e3a$abs(5-3)=2$\u5c31\u8981$+2$\u6216\u8005\u662f$abs(3-5)$\u53d8\u4e3a$abs(4-4)$\u5c31\u8981$-2$\n\n\u800c\u5f53$n&1==1$\u662f\u4e5f\u597d\u529e\uff0c$R-pos+1==(n>>1)$\u7684\u4e0d\u8fb9\uff0c\u5176\u4f59\u7684\u90fd\u662f\u4e00\u6837\u7684\n\n\u6240\u4ee5\u4e0d\u5c31\u662f\u533a\u95f4$+2,-2$\u4e48\uff0c\u53ea\u4e0d\u8fc7\u662f\u53d6\u6700\u5c0f\u503c\u7684\u65f6\u5019\u4e0d\u80fd\u628a\u5408\u6cd5\u533a\u95f4\u7684\u5dee\u503c\u7b97\u8fdb\u53bb\u7f62\u4e86\n\n\u4e0b\u9762\u4e0a\u4ee3\u7801,\u4e0d\u61c2\u7684\u53ef\u4ee5\u770b\u4e0b\u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define min_(a,b) (a<b?a:b)\n#define max_(a,b) (a>b?a:b)\nusing namespace std;\ninline void read(int &x){x=0;int f=1;char ch=getchar();while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}while(isdigit(ch)){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}x=x*f;}\ntypedef long long LL;\nconst int N=1000010,M=N<<1,INF=1<<30;\nint stc[N],sti[N],r;//stc,sti\u5206\u522b\u5b58\u7684\u6808\u4e2d\u7684col\u989c\u8272,id\u7f16\u53f7 \nint a[N],fir[N],end[N],n,k;//fir,end\u5206\u522b\u662f\u8be5\u989c\u8272\u7b2c\u4e00\u6b21,\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e \nLL ans;//\u7b2c\u4e00\u95ee\u7b54\u6848 \nint ss,p,ans_2,c,G;//\u56e0\u4e3a\u4e00\u6b21\u66f4\u65b0\u4e24\u4e2a\u7b54\u6848,\u6211\u5c31\u5728\u5168\u5c40\u5b9a\u4e49\u4e86ss\u6ee1\u8db3\u6761\u4ef6\u53ef\u4ee5\u53d6\u7684\u5de6\u7aef\u70b9\u6570,p\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u5dee\u503c\n//c:n>>1,G=n&1,\u7528\u6765\u7b80\u5316modify(\u66f4\u65b0\u533a\u95f4\u5dee\u503c)\u4e66\u5199\u7684 \nstruct Segment_tree{\n    int l[M],r[M],minn[M],s[M],tag[M],rt,cnt;//tag:\u533a\u95f4\u4e0d\u80fd\u53d6\u6807\u8bb0\u3002rev:\u7b2c\u4e8c\u95ee\u4e2d\u7684\u533a\u95f4\u52a0\u51cf\u6807\u8bb0\n    #define lc l[x]\n    #define rc r[x]\n    inline void pushup(int x){minn[x]=min_(minn[lc],minn[rc]);s[x]=s[lc]+s[rc];}//\u5411\u4e0a\u66f4\u65b0 \n    inline void pushr(int x,int v){minn[x]+=v;tag[x]+=v;}\n    inline void pushdown(int x){if(tag[x]){pushr(lc,tag[x]);pushr(rc,tag[x]);tag[x]=0;}}\n  \tinline void build(int &x,int L,int R){//\u521d\u59cb\u5316 \n        x=++cnt;minn[x]=n;s[x]=R-L+1;\n        if(L==R)return;\n        int mid=(L+R)>>1;build(lc,L,mid);build(rc,mid+1,R);\n    }inline void Insert(int &x,int L,int R,int ll,int rr){//\u5982\u679c\u4e0d\u5b58\u5728x,\u8bf4\u660eL\u5230R\u5df2\u7ecf\u662f\u4e0d\u80fd\u9009\u7684\u4e86 \n    \tif(!x)return;\n        if(ll<=L&&R<=rr){x=0;return;}//\u5c06x\u6807\u8bb0\u4e3a\u4e0d\u80fd\u9009,\u90a3\u4e48x\u7684\u5dee\u503c\u5bf9\u7b54\u6848\u4e0d\u4f1a\u6709\u8d21\u732e,s[x]=0\u4e5f\u4e0d\u4f1a\u6709\u8d21\u732e,\u6240\u4ee5\u76f4\u63a5\u5220\u6389\u5c31\u597d \n        int mid=(L+R)>>1;\n        if(ll<=mid)Insert(lc,L,mid,ll,rr);\n        if(rr>mid)Insert(rc,mid+1,R,ll,rr);\n        if(!lc&&!rc){x=0;return;}//\u5c0f\u4f18\u5316,\u5de6\u53f3\u513f\u5b50\u90fd\u6ca1\u4e86,\u8fd9\u4e2a\u70b9\u81ea\u7136\u6ca1\u7528\u4e86 \n        pushup(x);\n    }inline void upd(int x,int L,int R,int ll,int rr,int v){\n        if(!x)return;//\u5c0f\u4f18\u5316\n        if(ll<=L&&R<=rr){pushr(x,v);return;}\n        int mid=(L+R)>>1;pushdown(x);\n        if(ll<=mid)upd(lc,L,mid,ll,rr,v);\n        if(rr>mid)upd(rc,mid+1,R,ll,rr,v);\n        pushup(x);\n    }inline void modify(int pos){//\u66f4\u65b0\u5dee\u503c,\u6b64\u5904\u5728\u4e4b\u524d\u53f3\u7aef\u70b9\u662fpos-1,\u73b0\u5728\u53f3\u7aef\u70b9\u4e3apos,\u56e0\u4e3a\u7b54\u6848\u662f\u7edd\u5bf9\u503c,\u6240\u4ee5\u8981\u5206\u4e24\u79cd+2\u6216\u8005\u662f-2 \n        int L=max_(1,pos-c+1);upd(1,1,n,L,pos,-2);\n        int R=L-G-1;\n        if(R>=1)upd(1,1,n,1,R,2);//R<1\u4e86\u5c31\u4e0d\u8981\u6267\u884c\u4e86 \n    }inline void query(int x,int L,int R,int ll,int rr){\n        if(!x)return;//\u540c\u4e0a\uff0c\u5c0f\u4f18\u5316 \n        if(ll<=L&&R<=rr){ss+=s[x];p=min_(p,minn[x]);return;}\n        int mid=(L+R)>>1;pushdown(x);\n        if(ll<=mid)query(lc,L,mid,ll,rr);\n        if(rr>mid)query(rc,mid+1,R,ll,rr);\n    }inline void get(int L,int R){ss=0;p=INF;query(rt,1,n,L,R);} //\u4e0d\u89e3\u91ca \n}T;\nint minn;\nvoid slove(){\n    read(n);read(k);for(int i=1;i<=n;++i){read(a[i]);fir[i]=0;}//\u521d\u59cb\u5316fir=0,\u61d2\u5f97\u6539\u4e86 \n    for(int i=1;i<=n;++i){if(!fir[a[i]])fir[a[i]]=i;end[a[i]]=i;}\n    T.minn[0]=INF;ans_2=n;T.build(T.rt,1,n);c=n>>1;G=n&1;//n\u7684\u5947\u5076\u6027\u662f\u548c\u6211\u4eec\u7684\u5dee\u503c\u66f4\u65b0\u6709\u5173\u7684,\u5efa\u8bae\u81ea\u5df1\u624b\u63a8\u4e00\u4e0b\u5173\u7cfb \n    int l;\n    for(int i=1;i<=n;++i){\n        if(!(i^end[a[i]])&&(end[a[i]]^fir[a[i]]))T.Insert(T.rt,1,n,fir[a[i]]+1,end[a[i]]); //\u8fd9\u91cc\u5199\u4e0d\u4e0b\uff0c\u5199\u5728\u4e0b\u4e00\u884c \n        else {stc[++r]=a[i];sti[r]=i;}//\u56e0\u4e3aend<=i\u4e86,\u90a3\u4e48\u6211\u4eec\u4e0d\u80fd\u53d6[fir+1,end]\u7684\u70b9,\u5426\u5219\u4f1a\u628afir\u653e\u5230\u53e6\u4e00\u6761\u94fe,\u662f\u4e0d\u5408\u6cd5\u7684,\u6240\u4ee5\u6253\u6807\u8bb0\u4e0d\u80fd\u9009 \n        while(r&&end[stc[r]]<=i)r--;//end>i&&fir<=i\u90a3\u4e48\u4f1a\u53d1\u73b0\u53ea\u80fd\u9009[last+1,i](last:max(pos(end[pos]>i&&pos<=i))\u8f6c\u4e0b\u884c \n        T.modify(i);//\u5426\u5219\u90fd\u4f1a\u9009\u5230\u81f3\u5c11\u4e00\u4e2a\u8be5\u989c\u8272,\u800c\u8be5\u989c\u8272\u6709\u81f3\u5c11\u4e00\u4e2a\u5728i\u53f3\u8fb9,\u90a3\u4e48\u5c31\u4e0d\u662f\u5408\u6cd5\u7684\u4e86 \n        l=(r?sti[r]:0);if(!l)l++;//\u6211\u4eec\u7b97\u7684\u662f[l+1,i]\u533a\u95f4\u4e2d\u5408\u6cd5\u7684,\u4e0d\u80fd\u7b97l+1==1\u7684,!l\u7684\u8bddl++\u5c31\u597d\u4e86 \n        if(i>l){T.get(l+1,i);ans+=ss;ans_2=min_(ans_2,p);}//l+1<=i\u624d\u884c,\u5426\u5219\u4f1a\u51fabug \n    }\n    printf(\"%lld %d\\n\",ans,ans_2);\n}\nint main(){\n    slove();\n    return 0;\n}\n\n```\n\nupd:\u672c\u6765\u4ee5\u4e3a\u8fd9\u6837\u5c31\u884c\u4e86\u7684\uff0c\u4f46\u662f\u53d1\u73b0\u8fd8\u53ef\u4ee5\u4f18\u5316\uff0c\u4e0d\u7528\u533a\u95f4+2,-2\u4e86\uff0c\u76f4\u63a5\u53d6min,max\u5c31\u597d\u4e86\uff0c<=n/2\u7684\u6700\u5c0f\u7684\u5408\u6cd5\u4f4d\u7f6e\uff0c>n/2\u7684\u6700\u5927\u7684\u5408\u6cd5\u4f4d\u7f6e\n\n\u8fd9\u662f\u4e0b\u9762\u5feb\u4e863\u500d\u7684\u4ee3\u7801\uff08\u4e0d\u5e94\u8be5\u554a\uff1f\u5e94\u8be5\u901f\u5ea6\u6700\u591a\u5feb1\u500d\u7684...\uff09\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define min_(a,b) (a<b?a:b)\n#define max_(a,b) (a>b?a:b)\nusing namespace std;\ninline void read(int &x){x=0;int f=1;char ch=getchar();while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}while(isdigit(ch)){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}x=x*f;}\ntypedef long long LL;\nconst int N=1000010,M=N<<1,INF=1<<30;\nint stc[N],sti[N],r;//stc,sti\u5206\u522b\u5b58\u7684\u6808\u4e2d\u7684col\u989c\u8272,id\u7f16\u53f7 \nint a[N],fir[N],end[N],n,k,p,tql;//fir,end\u5206\u522b\u662f\u8be5\u989c\u8272\u7b2c\u4e00\u6b21,\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e \nLL ans;//\u7b2c\u4e00\u95ee\u7b54\u6848 \nint ss,ans_2;//\u56e0\u4e3a\u4e00\u6b21\u66f4\u65b0\u4e24\u4e2a\u7b54\u6848,\u6211\u5c31\u5728\u5168\u5c40\u5b9a\u4e49\u4e86ss\u6ee1\u8db3\u6761\u4ef6\u53ef\u4ee5\u53d6\u7684\u5de6\u7aef\u70b9\u6570,p\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u5dee\u503c\nstruct Segment_tree{\n    int l[M],r[M],minn[M],maxn[M],s[M],rt,cnt;//tag:\u533a\u95f4\u4e0d\u80fd\u53d6\u6807\u8bb0\u3002rev:\u7b2c\u4e8c\u95ee\u4e2d\u7684\u533a\u95f4\u52a0\u51cf\u6807\u8bb0\n    #define lc l[x]\n    #define rc r[x]\n    inline void pushup(int x){minn[x]=min_(minn[lc],minn[rc]);maxn[x]=max_(maxn[lc],maxn[rc]);s[x]=s[lc]+s[rc];}//\u5411\u4e0a\u66f4\u65b0 \n    inline void build(int &x,int L,int R){//\u521d\u59cb\u5316 \n        x=++cnt;s[x]=R-L+1;maxn[x]=R;minn[x]=L;\n        if(L==R)return;\n        int mid=(L+R)>>1;build(lc,L,mid);build(rc,mid+1,R);\n    }inline void Insert(int &x,int L,int R,int ll,int rr){//\u5982\u679c\u4e0d\u5b58\u5728x,\u8bf4\u660eL\u5230R\u5df2\u7ecf\u662f\u4e0d\u80fd\u9009\u7684\u4e86 \n        if(!x)return;\n        if(ll<=L&&R<=rr){x=0;return;}//\u5c06x\u6807\u8bb0\u4e3a\u4e0d\u80fd\u9009,\u90a3\u4e48x\u7684\u5dee\u503c\u5bf9\u7b54\u6848\u4e0d\u4f1a\u6709\u8d21\u732e,s[x]=0\u4e5f\u4e0d\u4f1a\u6709\u8d21\u732e,\u6240\u4ee5\u76f4\u63a5\u5220\u6389\u5c31\u597d \n        int mid=(L+R)>>1;\n        if(ll<=mid)Insert(lc,L,mid,ll,rr);\n        if(rr>mid)Insert(rc,mid+1,R,ll,rr);\n        if(!lc&&!rc){x=0;return;}//\u5c0f\u4f18\u5316,\u5de6\u53f3\u513f\u5b50\u90fd\u6ca1\u4e86,\u8fd9\u4e2a\u70b9\u81ea\u7136\u6ca1\u7528\u4e86 \n        pushup(x);\n    }inline void get_max(int x,int L,int R,int ll,int rr){\n\t\tif(!x)return;\n\t\tif(ll<=L&&R<=rr){p=max_(p,maxn[x]);return;}\n\t\tint mid=(L+R)>>1;\n\t\tif(ll<=mid)get_max(lc,L,mid,ll,rr);\n\t\tif(rr>mid)get_max(rc,mid+1,R,ll,rr);\n\t}inline void get_min(int x,int L,int R,int ll,int rr){\n\t\tif(!x)return;\n\t\tif(ll<=L&&R<=rr){p=min_(p,minn[x]);return;}\n\t\tint mid=(L+R)>>1;\n\t\tif(ll<=mid)get_min(lc,L,mid,ll,rr);\n\t\tif(rr>mid)get_min(rc,mid+1,R,ll,rr);\n\t}inline void query(int x,int L,int R,int ll,int rr){\n\t\tif(!x)return;\n\t\tif(ll<=L&&R<=rr){ss+=s[x];return;}\n\t\tint mid=(L+R)>>1;\n\t\tif(ll<=mid)query(lc,L,mid,ll,rr);\n\t\tif(rr>mid)query(rc,mid+1,R,ll,rr);\n\t}inline void work(int L,int R){\n\t\tint rr=max_(R-tql+1,L),ll=rr-1;\n\t\tss=0;query(rt,1,n,L,R);ans+=ss;\n\t\tp=INF;get_min(rt,1,n,rr,R);if(p!=INF)ans_2=min_(ans_2,n-2*(R-p+1));\n\t\tif(ll>=L){p=-INF;get_max(rt,1,n,L,ll);if(p!=-INF)ans_2=min_(ans_2,2*(R-p+1)-n);}\n\t}\n}T;\nint minn;\nvoid slove(){\n    read(n);read(k);for(int i=1;i<=n;++i)read(a[i]);\n    for(int i=1;i<=n;++i){if(!fir[a[i]])fir[a[i]]=i;end[a[i]]=i;}\n    T.minn[0]=INF;ans_2=n;T.build(T.rt,1,n);\n    int l;tql=n>>1;p=n;\n    for(int i=1;i<=n;++i){\n        if(!(i^end[a[i]])&&(end[a[i]]^fir[a[i]]))T.Insert(T.rt,1,n,fir[a[i]]+1,end[a[i]]); //\u8fd9\u91cc\u5199\u4e0d\u4e0b\uff0c\u5199\u5728\u4e0b\u4e00\u884c \n        else {stc[++r]=a[i];sti[r]=i;}//\u56e0\u4e3aend<=i\u4e86,\u90a3\u4e48\u6211\u4eec\u4e0d\u80fd\u53d6[fir+1,end]\u7684\u70b9,\u5426\u5219\u4f1a\u628afir\u653e\u5230\u53e6\u4e00\u6761\u94fe,\u662f\u4e0d\u5408\u6cd5\u7684,\u6240\u4ee5\u6253\u6807\u8bb0\u4e0d\u80fd\u9009 \n        while(r&&end[stc[r]]<=i)r--;//end>i&&fir<=i\u90a3\u4e48\u4f1a\u53d1\u73b0\u53ea\u80fd\u9009[last+1,i](last:max(pos(end[pos]>i&&pos<=i))\u8f6c\u4e0b\u884c \n        l=(r?sti[r]:0);if(!l)l++;//\u6211\u4eec\u7b97\u7684\u662f[l+1,i]\u533a\u95f4\u4e2d\u5408\u6cd5\u7684,\u4e0d\u80fd\u7b97l+1==1\u7684,!l\u7684\u8bddl++\u5c31\u597d\u4e86 \n        if(i>l)T.work(l+1,i);\n    }\n    printf(\"%lld %d\\n\",ans,ans_2);\n}\nint main(){\n    slove();\n    return 0;\n}\n```\n\n",
        "postTime": 1552047630,
        "uid": 54113,
        "name": "ecnerwaIa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3587 \u3010[POI2015]POD\u3011"
    },
    {
        "content": "\u53d7 PKUSC D2T2 \u505a\u6cd5\u7684\u542f\u53d1\uff0c\u7ed9\u5927\u5bb6\u5e26\u6765\u4e00\u79cd\u5b8c\u5168\u4e0d\u540c\u7684\u89e3\u6cd5\u3002\n\n\u6211\u4eec\u5148**\u5bf9\u6bcf\u4e2a\u73e0\u5b50\u968f\u673a\u8d4b\u4e00\u4e2a\u6743\u503c\uff0c\u6ee1\u8db3\u6240\u6709\u76f8\u540c\u989c\u8272\u73e0\u5b50\u5f02\u6216\u548c\u4e3a** $0$\u3002\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u7684\u6743\u503c\u57df\u6781\u5927\u65f6\uff0c\u5927\u6982\u7387\u5730\uff0c\u6bcf\u79cd\u989c\u8272\u7684\u73e0\u5b50\u53ea\u80fd\u51fa\u73b0\u4e8e\u4e00\u6761\u94fe\u7b49\u4ef7\u4e8e\u6bcf\u6761\u94fe\u7684\u5f02\u6216\u548c\u4e3a $0$\u3002\u6240\u4ee5\u6211\u4eec\u5c06\u5f02\u6216\u8d4b\u503c\u4e3a $[0,2^{63}-1]$ \u4e2d\u7684\u968f\u673a\u6743\uff0c\u7136\u540e\u65ad\u73af\u4e3a\u94fe\uff0c\u590d\u5236\u4e00\u904d\uff0c\u6c42\u5f02\u6216\u524d\u7f00\u548c\u3002\u56e0\u4e3a\u6574\u4e2a\u533a\u95f4\u7684\u5f02\u6216\u548c\u5fc5\u5b9a\u4e3a $0$\uff0c\u6240\u4ee5\u5408\u6cd5\u7684\u5207\u5272\u4e00\u5b9a\u6ee1\u8db3\u4f4d\u7f6e $x,y$ \u4f7f\u5f97 $1\\le x-y < n$ \u4e14 $sum_x=sum_y$\u3002\n\n\u53f3\u8fb9\u4e0d\u53d6\u7b49\u7684\u5145\u8981\u539f\u56e0\u662f\u5f53 $x-y=n$ \u65f6\uff0c\u6839\u636e\u6c42\u524d\u7f00\u548c\u7684\u65b9\u5f0f\u53ef\u77e5\u6b64\u65f6\u5f97\u5230\u7684\u662f\u6574\u6761\u94fe\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u590d\u5236\u4e00\u904d\u7684\u5b58\u5728\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e24\u5200 $x,y$\uff0c\u7b2c\u4e00\u5200\u4e3a $x,y$ \u7684\u60c5\u51b5\u4f1a\u5206\u522b\u7edf\u8ba1\u4e00\u904d\uff0c\u6240\u4ee5\u6c42\u5f97\u7684\u65b9\u6848\u6570\u9700\u8981\u51cf\u534a\u3002\n\n\u7b2c\u4e00\u95ee\u5c31\u89e3\u51b3\u4e86\u3002\u6c42\u5b9a\u957f\u533a\u95f4\u76f8\u540c\u6570\u7684\u4e2a\u6570\u53ef\u4ee5\u5bf9\u5f02\u6216\u548c\u6570\u7ec4\u79bb\u6563\u5316\u540e\u4f7f\u7528\u6876\u6216\u961f\u5217\u5b58\u50a8\u5bf9\u5e94\u6570\u503c\u7684\u4e0b\u6807\u5b8c\u6210\u3002\n\n\u8003\u8651\u7b2c\u4e8c\u95ee\uff0c\u6c42\u6700\u5c0f\u957f\u5ea6\u5dee\u3002\n\n\u53d1\u73b0\u5bf9\u4e8e\u7b2c\u4e00\u5200\u786e\u5b9a\u7684\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u5200\u5207\u51fa\u6700\u5c0f\u957f\u5ea6\u5dee\uff0c\u4e00\u5b9a\u662f\u6700\u540e\u4e00\u4e2a\u524d\u4e00\u534a\u4e0d\u957f\u4e8e\u540e\u4e00\u534a\uff0c\u6216\u8005\u7b2c\u4e00\u4e2a\u524d\u4e00\u534a\u957f\u4e8e\u540e\u4e00\u534a\u7684\u4f4d\u7f6e\u3002\u6240\u4ee5\u6211\u4eec\u5bf9\u5b9a\u957f\u533a\u95f4\u4f7f\u7528\u961f\u5217\uff0c**\u7ef4\u62a4\u6bcf\u79cd\u524d\u7f00\u548c\u7684\u53d6\u503c\u4e2d\uff0c\u6700\u540e\u4e00\u4e2a\u524d\u4e00\u534a\u4e0d\u957f\u4e8e\u540e\u4e00\u534a\uff0c\u53ca\u8fd9\u4e2a\u4f4d\u7f6e\u4ee5\u540e\u7684\u4f4d\u7f6e**\u3002\u7136\u540e\u6bcf\u6b21\u79fb\u52a8\u65f6\uff0c\u53d6\u51fa\u7684\u5f53\u524d\u4f4d\u7f6e\u503c\u6240\u5bf9\u5e94\u7684\u961f\u5217\u7684\u961f\u9996\u548c\u961f\u9996\u7684\u4e0b\u4e00\u4f4d\uff0c\u5206\u522b\u8ba1\u7b97\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\n\u4f46\u6b63\u5e38\u7684\u961f\u5217\u4e0d\u652f\u6301\u627e\u961f\u9996\u7684\u4e0b\u4e00\u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u6876\u6a21\u62df\u961f\u5217\uff08\u6216\u53cc\u7aef\u961f\u5217\uff09\uff0c\u5177\u4f53\u800c\u8a00\u5c31\u662f\u5bf9\u6bcf\u4e2a\u6876\u989d\u5916\u8bb0\u5f55\u5f00\u5934\u4f4d\u7f6e\u5373\u53ef\u3002\n\n\u6700\u540e\u4e00\u4e2a\u524d\u4e00\u534a\u957f\u4e0d\u5927\u4e8e\u540e\u4e00\u534a\u957f\u7684\u4f4d\u7f6e\u53ef\u4ee5\u76f4\u63a5\u7b80\u5355\u8ba1\u7b97\u5f97\u51fa\uff0c\u5b83\u4e0e\u5e8f\u5217\u5c3e\u7684\u8ddd\u79bb\u5e94\u4e0d\u5c0f\u4e8e $\\lceil\\frac n2\\rceil$\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(n\\log n)$\uff0c\u74f6\u9888\u5728\u79bb\u6563\u5316\uff0c\u4ee3\u7801\u5982\u4e0b\u3002\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint a[1000001],n,k;\nlong long val[2000001],lastpos[1000001],xorsum[1000001];\n//lastpos \u8bb0\u5f55\u6bcf\u79cd\u989c\u8272\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0cxorsum \u8bb0\u5f55\u6bcf\u79cd\u989c\u8272\u7684\u6743\u503c\u5f02\u6216\u548c\u3002\n//\u8fd9\u6837\u5f53\u9047\u5230 lastpos \u65f6\uff0c\u76f4\u63a5\u8c03\u7528 xorsum \u91cc\u5bf9\u5e94\u7684\u503c\u5373\u53ef\u3002\nlong long sum[2000001],b[2000001];\n// b\u5355\u7eaf\u7528\u6765\u79bb\u6563\u5316\u7684\u3002\nvector<int>g[1000001];\nint minans,bgpos[1000001],pos[1000001];\n//\u4e00\u6876\u4e24\u7528\uff0cbgpos \u8d1f\u8d23\u7ef4\u62a4\u7b2c\u4e00\u95ee\uff0cpos \u8d1f\u8d23\u7ef4\u62a4\u7b2c\u4e8c\u95ee\u3002\nlong long ans;\nint abs(int x){\n\treturn x<0?-x:x;\n}\nint calc(int cut,int r){\n\treturn abs((r-cut)-(cut-r+n));\n}\nint main(){\n\tsrand(20060111);\n\tint i,j;\n\tscanf(\"%d%d\",&n,&k);\n\tminans=n;\n\tint dis=(n+1)/2;\n\tfor(i=1;i<=n;i++)scanf(\"%d\",&a[i]),lastpos[a[i]]=i;\n\tfor(i=1;i<=n;i++){\n\t\tif(lastpos[a[i]]!=i)val[i]=1ll*rand()*rand(),xorsum[a[i]]^=val[i];\n\t\telse val[i]=xorsum[a[i]];\n\t}\n\tfor(i=n+1;i<=n+n;i++)val[i]=val[i-n];\n\tfor(i=1;i<=n*2;i++)sum[i]=sum[i-1]^val[i],b[i]=sum[i];\n\tsort(b+1,b+n*2+1);\n\tint m=unique(b+1,b+n*2+1)-b-1;\n\tfor(i=1;i<=n*2;i++)sum[i]=lower_bound(b+1,b+m+1,sum[i])-b;\n\tfor(i=1;i<=n;i++)g[sum[i]].push_back(i);\n\tm=n*2; \n\tfor(i=n+1;i<=m;i++){\n\t\tint w=sum[i];\n\t\twhile(bgpos[w]<g[w].size()){\n\t\t\tif(g[w][bgpos[w]]<=i-n)bgpos[w]++;\n\t\t\telse break;\n\t\t}\n\t\tpos[w]=max(pos[w],bgpos[w]);\n\t\tans+=g[w].size()-bgpos[w];\n\t\twhile(pos[w]<g[w].size()-1){\n\t\t\tif(g[w][pos[w]+1]<=i-dis)pos[w]++;\n\t\t\telse break;\n\t\t}\n\t\tminans=min(minans,calc(g[w][pos[w]],i));\n\t\tif(pos[w]<g[w].size()-1)minans=min(minans,calc(g[w][pos[w]+1],i));;\n\t\t//\u5982\u679c\u7b2c\u4e8c\u95ee\u7684\u6876\u91cc\u8fd8\u6709\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff0c\u90a3\u5c31\u662f\u3010\u7b2c\u4e00\u4e2a\u524d>\u540e\u3011\u7684\u4f4d\u7f6e\u3002\n\t\tg[w].push_back(i);\n\t}\n\tprintf(\"%lld %d\",ans/2,minans);\n}\n```",
        "postTime": 1655645636,
        "uid": 128606,
        "name": "2018ljw",
        "ccfLevel": 7,
        "title": "P3587 \u9898\u89e3"
    },
    {
        "content": "\u7ebf\u6027\u505a\u6cd5\u3002\n\n\u7c7b\u4f3c\u4e8e `ABAB` \u8fd9\u6837\u7684\u4e32\u5982\u679c\u51fa\u73b0\uff0c\u5219\u663e\u7136\u5408\u6cd5\u7684\u5207\u5272\u65b9\u6848\u4e2d `AB` \u4e24\u79cd\u989c\u8272\u5fc5\u7136\u5728\u540c\u4fa7\uff0c\u8fdb\u800c\u5176\u53ef\u88ab\u770b\u4f5c\u76f8\u540c\u989c\u8272\u52a0\u4ee5\u5408\u5e76\u3002\n\n\u5168\u90e8\u5408\u5e76\u4e4b\u540e\uff0c\u6211\u4eec\u8003\u8651\u4e00\u79cd\u989c\u8272 `A`\uff0c\u5176\u5728\u73af\u4e0a\u7684\u51fa\u73b0\u5f62\u5982 `...A...A...A...A...`\uff0c\u5219\u5176\u4f59\u6240\u6709\u989c\u8272\u90fd\u4ec5\u4f1a\u5728\u76f8\u90bb\u4e24\u4e2a `A` \u95f4\u51fa\u73b0\u3002\n\n\u8003\u8651\u622a\u53d6\u4e00\u6bb5\u3002\u5219\u88ab\u622a\u51fa\u7684\u90e8\u5206\u5b9a\u5b58\u5728\u4e8e\u67d0\u6bb5 `A...A` \u95f4\u3002\u4e5f\u5373\uff0c\u6211\u4eec\u8003\u8651\u679a\u4e3e\u622a\u51fa\u90e8\u5206\u5f52\u5c5e\u7684\u6bb5\uff0c\u5373\u53ef\u8ba8\u8bba\u6240\u6709\u60c5\u5f62\u3002\n\n\u8003\u8651\u67d0\u6bb5\u5185\u7684\u60c5\u5f62\u3002\u5176\u662f\u5f62\u5982 `AB..B..BC..C..CD..D..DA` \u7684\u60c5\u5f62\uff0c\u5176\u4e2d `B..B..B` \u6bb5\u4e0e\u5176\u5b83\u6bb5\u4e00\u6837\uff0c\u90fd\u662f\u6b64\u79cd\u989c\u8272\u51fa\u73b0\u7684\u6240\u6709\u4f4d\u7f6e\u3002\n\n\u8003\u8651\u7ee7\u7eed\u8ba8\u8bba\u3002\u5bf9\u4e8e\u989c\u8272 `B`\uff0c\u622a\u53d6\u8981\u4e48\u53d1\u751f\u5728\u67d0\u6bb5 `B...B` \u4e2d\uff0c\u8981\u4e48\u53d1\u751f\u5728\u4e24\u7aef\u7684 `B` \u4ee5\u5916\u3002\u5bf9\u4e8e\u524d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u9012\u5f52\u5165\u5b50\u533a\u95f4\u8ba8\u8bba\uff0c\u4e14\u8fd9\u90e8\u5206\u590d\u6742\u5ea6\u5373\u4e3a\u7ebf\u6027\u3002\u5bf9\u4e8e\u540e\u8005\uff0c\u663e\u7136\u6211\u4eec\u53ea\u9700\u8003\u8651\u6240\u6709\u6781\u5927 `(B...B)(C...C)(D...D)...` \u7b49\u6bb5\u3002\n\n\u7528\u53cc\u9488\u4e4b\u7c7b\u5373\u53ef\u5904\u7406\u51fa\u6781\u4f18\u7b54\u6848\u3002\u65b9\u6848\u6570\u4ea6\u53ef\u7b80\u5355\u6c42\u51fa\u3002\u590d\u6742\u5ea6\u53ef\u4ee5\u505a\u5230\u7ebf\u6027\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nint n,m,a[1001000],nex[1001000],las[1001000],buc[1001000],mn,dsu[1001000],stk[1001000],tp,A,B;\nll res;\nint val(int x){return max(x,n-x)-min(x,n-x);}\nvoid solve(int x){\n//\tprintf(\"%d\\n\",x);\n\tfor(int i=(x+1)%n;i!=nex[x];){\n//\t\tprintf(\"%d:%d\\n\",x,i);\n\t\tfor(int j=i;nex[j]!=i;j=nex[j])solve(j);\n\t\ti=(las[i]+1)%n;\n\t}\n\tint num=0;\n\tfor(int i=(x+1)%n,j=(x+1)%n;i!=nex[x];i=(las[i]+1)%n){\n\t\tnum++;\n\t\twhile((las[i]+1+n-j)%n>(n>>1))j=(las[j]+1)%n;\n\t\tmn=min(mn,val((las[i]+1+n-j)%n));\n\t\tmn=min(mn,val((las[i]+1+n-nex[(j+n-1)%n])%n));\n\t}\n\tres+=1ll*num*(num+1)>>1;\n}\nint find(int x){return dsu[x]==x?x:dsu[x]=find(dsu[x]);}\nvoid merge(int x,int y){x=find(x),y=find(y);if(x!=y)dsu[y]=x;}\nvoid func(){\n\tmemset(buc,-1,sizeof(buc)),memset(nex,-1,sizeof(nex));\n\tfor(int i=0;i<n;i++){\n\t\tif(buc[a[i]]!=-1)nex[buc[a[i]]]=i;\n\t\tbuc[a[i]]=i;\n\t}\n\ttp=0;for(int i=0;i<n;i++){\n\t\tif(nex[i]==-1)continue;\n\t\twhile(tp&&nex[stk[tp]]<=i)tp--;\n\t\twhile(tp&&nex[stk[tp]]<nex[i])merge(a[i],a[stk[tp--]]);\n\t\tstk[++tp]=i;\n\t}\n\tfor(int i=0;i<n;i++)a[i]=find(a[i]);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m),mn=n;\n\tfor(int i=0;i<n;i++)scanf(\"%d\",&a[i]);\n\tfor(int i=1;i<=m;i++)dsu[i]=i;\n\tfunc(),reverse(a,a+n),func();\n\tmemset(buc,-1,sizeof(buc));\n\tfor(int i=0;i<(n<<1);i++)nex[buc[a[i%n]]]=i%n,buc[a[i%n]]=i%n;\n\tfor(int i=0;i<n;i++)las[nex[i]]=i;\n//\tfor(int i=0;i<n;i++)printf(\"%d \",nex[i]);puts(\"\");\n\tfor(int i=0;;){solve(i),i=nex[i];if(i==0)break;}\n\tprintf(\"%lld %d\\n\",res,mn);\n\treturn 0;\n}\n```",
        "postTime": 1639119968,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3587\u3010[POI2015]POD\u3011"
    },
    {
        "content": "> [P3587 [POI2015]POD](https://www.luogu.com.cn/problem/P3587)\n>\n> [POI \u5408\u96c6](https://www.cnblogs.com/alex-wei/p/POI.html)\u3002\n\n\u7c7b\u4f3c\u6c42\u5b50\u533a\u95f4\u4e2a\u6570\u7684\u9898\u76ee\u53ef\u8003\u8651\u4f7f\u7528\u589e\u91cf\u6cd5\u3002\u5c06\u8fd9\u79cd\u601d\u60f3\u8fd0\u7528\u5230\u672c\u9898\uff0c\u8003\u8651\u5bf9\u4e8e\u5207\u5728 $i$ \u7684\u4e00\u5200\u4ece $i$ \u632a\u5230 $i+1$ \u7684\u8fc7\u7a0b\u4e2d\u5408\u6cd5\u7684\u53e6\u4e00\u5200\u7684\u4f4d\u7f6e $p$ \u5982\u4f55\u53d8\u5316\u3002\n\n\u9996\u5148\uff0c\u5f53 $i=0$ \u65f6\uff0c$p$ \u4e00\u5b9a\u6ee1\u8db3\u5bf9\u4e8e\u4efb\u610f\u989c\u8272 $c$ \u90fd\u6709 $1\\sim p$ \u8981\u4e48\u5305\u542b\u6240\u6709\u989c\u8272\u4e3a $c$ \u7684\u73e0\u5b50\uff0c\u8981\u4e48\u4e0d\u5305\u542b\u4efb\u610f\u4e00\u4e2a\u3002\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u989c\u8272\uff0c\u5c06\u6240\u6709\u51fa\u73b0\u7684\u73e0\u5b50\u770b\u6210\u4e00\u4e2a\u73af\uff0c\u90a3\u4e48**\u5408\u6cd5\u7684\u53e6\u4e00\u5200\u4f4d\u7f6e\u4f4d\u4e8e\u7b2c\u4e00\u5200\u5288\u5f00\u7684\u76f8\u90bb\u4e24\u4e2a\u73e0\u5b50\u4e4b\u95f4**\u3002\n\n\u6839\u636e\u8fd9\u4e00\u6027\u8d28\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u975e\u5e38\u76f4\u63a5\u7684\u505a\u6cd5\uff1a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u6570\u91cf\uff0c\u4ee5\u53ca\u53d6\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff08\u8fd9\u4e24\u4e2a\u4e3a\u4e86\u7b2c\u4e8c\u95ee\uff09\uff0c\u8fd8\u9700\u8981\u652f\u6301\u533a\u95f4\u4fee\u6539\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u65ad\u70b9\uff0c\u627e\u5230\u6ca1\u6709\u88ab\u8986\u76d6 \u201c\u4e0d\u5408\u6cd5\u7ebf\u6bb5\u201d \u7684\u4f4d\u7f6e\u4e4b\u548c\uff0c\u5373 $[1,n]$ \u7b49\u4e8e $0$ \u7684\u4f4d\u7f6e\u4e2a\u6570\u3002\u7531\u4e8e\u65ad\u70b9\u5904\u4e00\u5b9a\u6ca1\u6709\u88ab\u4efb\u4f55\u4e0d\u5408\u6cd5\u7ebf\u6bb5\u8986\u76d6\uff0c\u6240\u4ee5\u5c31\u662f $[1,n]$ \u53d6\u5230\u533a\u95f4\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u6570\u91cf $-1$\u3002\u7b2c\u4e8c\u95ee\u901a\u8fc7\u5bf9\u5e94\u533a\u95f4\u7ef4\u62a4\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u8ba1\u7b97\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u5bf9\u6570\uff0c\u5e38\u6570\u975e\u5e38\u5927\u3002\n\n```cpp\nconst int N = 1e6 + 5;\nconst int inf = 1e9 + 7;\nint ql, qr, mnp[N << 2], mxp[N << 2], val[N << 2], cnt[N << 2], laz[N << 2];\nvoid build(int l, int r, int x) {\n\tmnp[x] = l, mxp[x] = r, cnt[x] = r - l + 1;\n\tif(l == r) return;\n\tint m = l + r >> 1;\n\tbuild(l, m, x << 1), build(m + 1, r, x << 1 | 1); \n}\nvoid push(int x) {\n\tval[x] = min(val[x << 1], val[x << 1 | 1]), cnt[x] = 0, mxp[x] = -inf, mnp[x] = inf;\n\tif(val[x << 1] == val[x]) cnt[x] += cnt[x << 1], mnp[x] = min(mnp[x], mnp[x << 1]), mxp[x] = max(mxp[x], mxp[x << 1]);\n\tif(val[x << 1 | 1] == val[x]) cnt[x] += cnt[x << 1 | 1], mnp[x] = min(mnp[x], mnp[x << 1 | 1]), mxp[x] = max(mxp[x], mxp[x << 1 | 1]);\n}\nvoid tag(int x, int v) {laz[x] += v, val[x] += v;}\nvoid down(int x) {if(laz[x]) tag(x << 1, laz[x]), tag(x << 1 | 1, laz[x]), laz[x] = 0;}\nvoid modify(int l, int r, int x, int v) {\n\tif(ql > qr) return;\n\tif(ql <= l && r <= qr) return tag(x, v), void();\n\tint m = l + r >> 1; down(x);\n\tif(ql <= m) modify(l, m, x << 1, v);\n\tif(m < qr) modify(m + 1, r, x << 1 | 1, v);\n\tpush(x); \n}\nint querymin(int l, int r, int x) {\n\tif(val[x] || ql > qr) return inf;\n\tif(ql <= l && r <= qr) return mnp[x];\n\tint m = l + r >> 1, ans = inf; down(x);\n\tif(ql <= m) cmin(ans, querymin(l, m, x << 1));\n\tif(m < qr) cmin(ans, querymin(m + 1, r, x << 1 | 1));\n\treturn ans;\n}\nint querymax(int l, int r, int x) {\n\tif(val[x] || ql > qr) return -inf;\n\tif(ql <= l && r <= qr) return mxp[x];\n\tint m = l + r >> 1, ans = -inf; down(x);\n\tif(ql <= m) cmax(ans, querymax(l, m, x << 1));\n\tif(m < qr) cmax(ans, querymax(m + 1, r, x << 1 | 1));\n\treturn ans;\n}\n\nint n, k, ans = N, col[N], pos[N], sz[N];\nll tot;\nvint buc[N];\nvoid update(int p) {\n\ttot += cnt[1] - 1;\n\tif(cnt[1] == 1) return;\n\tif(p <= n >> 1) {\n\t\tint q = p + (n >> 1); ql = p, qr = q;\n\t\tint res = querymax(1, n, 1);\n\t\tcmin(ans, n - (res - p << 1)), ql = q + 1, qr = n;\n\t\tres = querymin(1, n, 1);\n\t\tcmin(ans, (res - p << 1) - n), ql = 1, qr = p - 1;\n\t\tres = querymin(1, n, 1);\n\t\tcmin(ans, n - (p - res << 1));\n\t} else {\n\t\tint q = p - (n >> 1); ql = q, qr = p;\n\t\tint res = querymin(1, n, 1);\n\t\tcmin(ans, n - (p - res << 1)), ql = p + 1, qr = n;\n\t\tres = querymax(1, n, 1);\n\t\tcmin(ans, n - (res - p << 1)), ql = 1, qr = q - 1;\n\t\tres = querymax(1, n, 1);\n\t\tcmin(ans, (p - res << 1) - n);\n\t}\n}\nint main() {\n\tcin >> n >> k, build(1, n, 1);\n\tfor(int i = 1; i <= n; i++) col[i] = read(), pos[i] = sz[col[i]]++;\n\tfor(int i = 1; i <= k; i++) buc[i].resize(sz[i]), sz[i] = 0;\n\tfor(int i = 1; i <= n; i++) buc[col[i]][sz[col[i]]++] = i;\n\tfor(int i = 1; i <= k; i++) if(sz[i] > 1)\n\t\tql = buc[i][0], qr = buc[i][sz[i] - 1] - 1, modify(1, n, 1, 1);\n\tupdate(n);\n\tfor(int i = 1; i < n; i++) {\n\t\tif(sz[col[i]] > 1) {\n\t\t\tint p = pos[i];\n\t\t\tif(p) {\n\t\t\t\tif(p + 1 == sz[col[i]]) {\n\t\t\t\t\tql = 1, qr = buc[col[i]][p - 1] - 1, modify(1, n, 1, -1);\n\t\t\t\t\tql = i, qr = n, modify(1, n, 1, -1);\n\t\t\t\t\tql = buc[col[i]][0], qr = i - 1, modify(1, n, 1, 1);\n\t\t\t\t} else {\n\t\t\t\t\tql = buc[col[i]][p - 1], qr = i - 1, modify(1, n, 1, 1);\n\t\t\t\t\tql = i, qr = buc[col[i]][p + 1] - 1, modify(1, n, 1, -1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tql = i, qr = buc[col[i]][sz[col[i]] - 1] - 1, modify(1, n, 1, -1);\n\t\t\t\tql = 1, qr = i - 1, modify(1, n, 1, 1);\n\t\t\t\tql = buc[col[i]][p + 1], qr = n, modify(1, n, 1, 1);\n\t\t\t}\n\t\t} update(i);\n\t}\n\tcout << tot / 2 << \" \" << ans << \"\\n\";\n\treturn cerr << \"Time : \" << clock() << \" ms\" << endl, flush(), 0;\n}\n```",
        "postTime": 1639123561,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "P3587 [POI2015]POD"
    },
    {
        "content": "\u4e0d\u9700\u8981\u4efb\u4f55\u601d\u7ef4\u7684\u505a\u6cd5\u3002\n\n---\n\n\u5c06\u5de6\u7aef\u70b9\u4ece\u5de6\u5f80\u53f3\u79fb\uff0c\u52a8\u6001\u5730\u6709\u54ea\u4e9b\u53f3\u7aef\u70b9\u662f\u5408\u6cd5\u7684\u3002\u8003\u8651\u989c\u8272\u7ed9\u4e88\u4e86\u6211\u4eec\u4ec0\u4e48\u6837\u7684\u9650\u5236\u3002\u8bbe $lef_c,rig_c$ \u5206\u522b\u8868\u793a\u989c\u8272 $c$ \u51fa\u73b0\u7684\u6700\u9760\u5de6\u548c\u6700\u9760\u53f3\u7684\u4f4d\u7f6e\uff0c\u5f53\u524d\u5de6\u7aef\u70b9\u662f $l$\uff0c\u5206\u7c7b\u8ba8\u8bba\uff08\u8fd9\u91cc\u7684\u7b26\u53f7\u4f7f\u7528\u53ef\u80fd\u4e0d\u591f\u89c4\u8303\uff0c\u4f46\u662f\u8868\u8fbe\u7684\u5c31\u662f\u90a3\u4e2a\u610f\u601d\uff09\uff1a\n\n+ $l \\gt rig_c$ \u65f6\u989c\u8272 $c$ \u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u9650\u5236\u3002\n+ $l \\leq lef_c$ \u65f6\u53f3\u7aef\u70b9\u53ea\u80fd\u53d6 $[l,lef_c) \\cup [rig_c,n]$\u3002\n+ $l \\in (lef_c,rig_c]$ \u65f6\uff0c\u53f3\u7aef\u70b9\u53ea\u80fd\u53d6 $l$ \u5230\u989c\u8272 $c$ \u4e0b\u4e00\u4e2a\u51fa\u73b0\u7684\u4f4d\u7f6e\u51cf $1$ \u4e4b\u95f4\u3002\n\n\u8003\u8651\u7528\u6570\u636e\u7ed3\u6784\u5c06\u8fd9\u4e9b\u9650\u5236\u8868\u793a\u51fa\u6765\uff0c\u7531\u4e8e\u6211\u4eec\u8fd8\u8981\u505a\u7b2c\u4e8c\u95ee\uff0c\u4f18\u5148\u9009\u62e9\u5e38\u89c1\u6570\u636e\u7ed3\u6784\u3002\u8003\u8651\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48\u7b2c\u4e8c\u6761\u9650\u5236\u76f8\u5f53\u4e8e $[lef_c,rig_c)$ \u533a\u95f4\u8986\u76d6\u3002\u4f46\u662f\u6ce8\u610f\u5230\u6211\u4eec\u8981\u64a4\u9500\uff0c\u600e\u4e48\u529e\uff1f\u89c2\u5bdf\u5230\u6211\u4eec\u53ea\u9700\u8981\u67e5\u8be2\u5408\u6cd5\u7684\u4f4d\u7f6e\u7684\u4e2a\u6570\uff0c\u4e8e\u662f\u53ef\u4ee5\u5c06\u4e00\u6b21 $[l,r]$ \u7684\u8986\u76d6\u6539\u4e3a\u533a\u95f4\u52a0 $1$\uff0c\u64a4\u9500\u6539\u4e3a\u533a\u95f4\u51cf $-1$\uff0c\u90a3\u4e48\u5408\u6cd5\u7684\u4f4d\u7f6e\u7684\u503c\u4e00\u5b9a\u662f $0$\uff0c\u4e8e\u662f\u53ea\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u7684\u4e2a\u6570\u5373\u53ef\u3002\n\n\u7b2c\u4e09\u6761\u53ef\u4ee5\u76f4\u63a5\u52a8\u6001\u7ef4\u62a4\u6bcf\u4e2a\u989c\u8272\u4e0b\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u533a\u95f4\u4fee\u6539\uff0c\u4f46\u662f\u65f6\u9650\u53ea\u6709 $\\text{1s}$\uff0c$n$ \u53c8\u662f $10^6$ \u91cf\u7ea7\uff0c\u80fd\u4e0d\u80fd\u6362\u4e2a\u5e38\u6570\u5c0f\u4e00\u70b9\u7684\u7ef4\u62a4\uff1f\u89c2\u5bdf\u5230\u7b2c\u4e09\u6761\u9650\u5236\u5b9e\u9645\u4e0a\u53ea\u9650\u5236\u4e86\u53f3\u7aef\u70b9\u4e0d\u80fd\u53d6\u4e00\u4e2a\u540e\u7f00\uff0c\u90a3\u4e48\u6240\u6709\u9650\u5236\u5b9e\u9645\u4e0a\u6709\u7528\u7684\u53ea\u6709\u4e00\u4e2a\uff0c\u4e5f\u5c31\u662f\u4e0b\u4e00\u6b21\u51fa\u73b0\u6700\u65e9\u7684\u989c\u8272\u7684\u9650\u5236\uff0c\u4e8e\u662f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u6700\u5c0f\u503c\uff08\u5f53\u7136\u6211\u81ea\u5df1\u5199\u7684\u65f6\u5019\u8111\u62bd\u4e86\u5199\u4e86 $\\texttt{std::multiset}$\uff0c\u4f46\u662f\u65e0\u4f24\u5927\u96c5\uff09\uff0c\u6bcf\u6b21\u5de6\u7aef\u70b9\u548c\u961f\u9996\u91cd\u5408\u65f6\u53d6\u51fa\u961f\u9996\u5220\u6389\u52a0\u5165\u5bf9\u5e94\u989c\u8272\u4e0b\u4e00\u4e2a\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u67e5\u8be2\u65f6\u76f4\u63a5\u628a\u53f3\u7aef\u70b9\u8bbe\u4e3a\u961f\u9996\u51cf $1$ \u5373\u53ef\u3002\u90a3\u4e48\u7b2c\u4e00\u95ee\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u8003\u8651\u7b2c\u4e8c\u95ee\uff0c\u8fd9\u65f6\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u957f\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u6700\u5c0f\u503c\u3002\u7a0d\u5fae\u8f6c\u5316\u4e00\u4e0b\uff0c\u4e5f\u5c31\u662f\u6c42\u6700\u9760\u8fd1\u5de6\u7aef\u70b9\u52a0 $\\lfloor \\frac{n}{2} \\rfloor -1$ \u7684\u5408\u6cd5\u4f4d\u7f6e\u3002\u90a3\u4e48\u5206\u522b\u627e\u5728\u5176\u5de6\u8fb9\u6700\u9760\u53f3\u7684\u548c\u5728\u5176\u53f3\u8fb9\u6700\u9760\u5de6\u7684\u5408\u6cd5\u4f4d\u7f6e\u6c42\u51fa\u7b54\u6848\u53d6\u6700\u5c0f\u503c\u5373\u53ef\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u4e8c\u5206\u5b8c\u6210\u3002\n\n\u63a5\u4e0b\u6765\u662f\u51e0\u4e2a\u5c0f\u7ec6\u8282\u3002\n\n+ \u4e3a\u4e86\u5b9e\u73b0\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5728\u6700\u5f00\u59cb\u52a0\u5165\u6240\u6709\u9650\u5236\uff0c\u5728\u9650\u5236\u7684\u5de6\u7aef\u70b9 $+1$ \u5904\u64a4\u9500\u3002\n+ \u6ce8\u610f\u5230\u5f53 $1$ \u4f5c\u4e3a\u5de6\u7aef\u70b9\u65f6\uff0c\u65e0\u8bba\u53f3\u7aef\u70b9\u5728\u54ea\u91cc\u90fd\u53ea\u4f1a\u62c6\u6210\u4e0d\u8d85\u8fc7\u4e24\u6bb5\u3002\u4e00\u6bb5\u7684\u60c5\u51b5\u80af\u5b9a\u4e0d\u5408\u6cd5\uff0c\u4e24\u7aef\u7684\u60c5\u51b5\u8fd8\u4f1a\u88ab\u76f8\u5e94\u7684\u53f3\u7aef\u70b9 $+1$ \u5904\u7edf\u8ba1\u5230\uff0c\u4e8e\u662f\u6211\u4eec\u5728 $1$ \u5904\u4e0d\u8ba1\u7b97\u7b54\u6848\u5c31\u53ef\u4ee5\u907f\u514d\u7b97\u591a\u3002\n+ $\\text{128MB}$ \u7684\u7a7a\u95f4\u7a0d\u5fae\u6709\u70b9\u5361\uff0c\u4f60\u7684\u7ebf\u6bb5\u6811\u4e0d\u80fd\u628a\u5de6\u53f3\u7aef\u70b9\u5b58\u4e0b\u6765\uff0c\u800c\u53ea\u80fd\u5373\u65f6\u8ba1\u7b97\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n \\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u5927\u5e38\u6570 $\\mathcal{O}(n)$\u3002\n\n```\n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#include<set>\ntypedef long long ll;\nconst int maxn=1e6+5;\nstruct node{\n\tint tag;\n\tint mcou,mi;\n}tree[maxn*4];\nvoid build(int i,int l,int r){\n\ttree[i].mcou=r-l+1;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tbuild(i*2,l,mid),build(i*2+1,mid+1,r);\n\treturn;\n}\nvoid update(int i){\n\ttree[i].mi=std::min(tree[i*2].mi,tree[i*2+1].mi);\n\ttree[i].mcou=0;\n\tif(tree[i].mi==tree[i*2].mi)tree[i].mcou+=tree[i*2].mcou;\n\tif(tree[i].mi==tree[i*2+1].mi)tree[i].mcou+=tree[i*2+1].mcou;\n\treturn;\n}\nvoid pushdown(int i){\n\tif(!tree[i].tag)return;\n\tnode &ls=tree[i*2],&rs=tree[i*2+1],&now=tree[i];\n\tls.tag+=now.tag,ls.mi+=now.tag;\n\trs.tag+=now.tag,rs.mi+=now.tag;\n\tnow.tag=0;\n\treturn;\n}\nvoid modify(int i,int nl,int nr,int l,int r,int k){\n\tif(nl>=l&&nr<=r){\n\t\ttree[i].tag+=k,tree[i].mi+=k;\n\t\treturn;\n\t}\n\tpushdown(i);\n\tint mid=(nl+nr)>>1;\n\tif(mid>=l)modify(i*2,nl,mid,l,r,k);\n\tif(mid<r)modify(i*2+1,mid+1,nr,l,r,k);\n\tupdate(i);\n\treturn;\n}\nint qsum(int i,int nl,int nr,int l,int r){\n\tif(nl>=l&&nr<=r)return tree[i].mi==0?tree[i].mcou:0;\n\tpushdown(i);\n\tint ret=0,mid=(nl+nr)>>1;\n\tif(mid>=l)ret+=qsum(i*2,nl,mid,l,r);\n\tif(mid<r)ret+=qsum(i*2+1,mid+1,nr,l,r);\n\treturn ret;\n}\nint lef(int i,int nl,int nr,int l,int r){\n\tif(nr<l||nl>r||tree[i].mi!=0)return 4*maxn-2;\n\tif(nl==nr)return nl;\n\tpushdown(i);\n\tint mid=(nl+nr)>>1;\n\tif(tree[i*2].mi==0){\n\t\tint ret=lef(i*2,nl,mid,l,r);\n\t\treturn ret==4*maxn-2?lef(i*2+1,mid+1,nr,l,r):ret;\n\t}\n\telse return lef(i*2+1,mid+1,nr,l,r);\n}\nint rig(int i,int nl,int nr,int l,int r){\n\tif(nr<l||nl>r||tree[i].mi!=0)return 4*maxn-2;\n\tif(nl==nr)return nl;\n\tpushdown(i);\n\tint mid=(nl+nr)>>1;\n\tif(tree[i*2+1].mi==0){\n\t\tint ret=rig(i*2+1,mid+1,nr,l,r);\n\t\treturn ret==4*maxn-2?rig(i*2,nl,mid,l,r):ret;\n\t}\n\telse return rig(i*2,nl,mid,l,r);\n}\nstruct pii{\n\tint val,id;\n\tfriend bool operator<(pii now,pii oth){return now.val<oth.val;}\n};\nstd::multiset<pii>lim;\nint n,k;\nint col[maxn],fir[maxn],fin[maxn];\nstd::vector<int>apr[maxn],dec[maxn];\nint dt[maxn];\nint abs(int x){return x<0?-x:x;}\nint get(int x){return abs(n-2*x);}\nsigned main(){\n//\tfreopen(\"9.in\",\"r\",stdin);\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",col+i);\n\t\tapr[col[i]].push_back(i),fin[col[i]]=i;\n\t\tif(!fir[col[i]])fir[col[i]]=i;\n\t}\n\tbuild(1,1,n);\n\tfor(int i=1;i<=k;i++)if(fir[i]!=fin[i]){\n\t\tmodify(1,1,n,fir[i],fin[i]-1,1);\n\t\tdec[fir[i]+1].push_back(fin[i]);\n\t}\n\tll ans=0;\n\tint best=n;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int v:dec[i])modify(1,1,n,i-1,v-1,-1);\n\t\tif(lim.size()){\n\t\t\tpii now=*lim.begin();\n\t\t\tif(i!=1)ans+=qsum(1,1,n,i,now.val-1);\n\t\t\tint goal=std::min({n,i+n/2-1,now.val-1});\n\t\t\tif(i<=goal)best=std::min({best,get(rig(1,1,n,i,goal)-i+1),get(lef(1,1,n,goal,std::min(now.val-1,n))-i+1)});\n\t\t}\n\t\telse{\n\t\t\tif(i!=1)ans+=qsum(1,1,n,i,n);\n\t\t\tint goal=std::min(n,i+n/2-1);\n\t\t\tbest=std::min({best,get(rig(1,1,n,i,goal)-i+1),get(lef(1,1,n,goal,n)-i+1)});\n\t\t}\n\t\tif(dt[col[i]]){\n\t\t\tlim.erase(lim.find((pii){apr[col[i]][dt[col[i]]],col[i]}));\n\t\t\tif(dt[col[i]]!=(int)apr[col[i]].size()-1)lim.insert((pii){apr[col[i]][++dt[col[i]]],col[i]});\n\t\t}\n\t\telse if(apr[col[i]].size()!=1)lim.insert((pii){apr[col[i]][++dt[col[i]]],col[i]});\n\t}\n\tprintf(\"%lld %d\",ans,best);\n\treturn 0;\n}\n/*\n6 3\n1 2 3 2 3 1\n*/\n/*\n9 5\n2 5 3 2 2 4 1 1 3\nMinus the sequence start from 1 because that will be calculated later.\n*/\n//namespace burningContract\n```\n\n\u611f\u8c22\u4f60\u7684\u9605\u8bfb\u3002",
        "postTime": 1666508032,
        "uid": 293810,
        "name": "serene_analysis",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3587 \u3010[POI2015]POD\u3011"
    }
]