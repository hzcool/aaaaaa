[
    {
        "content": "# \u4e00\u4e2a\u5de7\u5999\u7684\u6700\u77ed\u8def\uff1a\n\n\n------------\n\n### \u9898\u76ee\u6982\u62ec\uff1a\n\u6c42 \u4e00\u4e2a\u5355\u6e90\u6700\u77ed\u8def + \u4e00\u4e2a\u5355\u7ec8\u70b9\u6700\u77ed\u8def \u7684\u6700\u5927\u503c\u3002\n### \u601d\u8def\uff1a\n- \u6211\u4eec\u9996\u5148\u60f3\u5230\u7684\u662f\u4ece\u6bcf\u4e2a\u70b9\u90fd\u6c42\u4e00\u904d\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\uff0c\u8fd9\u6837\u4f1a\u52a0\u5927\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n- \u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u53cd\u5411\u5efa\u56fe\uff0c\u76f4\u63a5\u628a\u5355\u7ec8\u70b9\u6700\u77ed\u8def\u8f6c\u4e3a\u5355\u6e90\u6700\u77ed\u8def\uff0c\u53ea\u9700\u8981\u8dd1\u4e24\u6b21\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u663e\u7136\u662f\u7a33\u8fc7\u7684\u3002\uff08\u53ef\u4ee5\u81ea\u5df1\u753b\u753b\u56fe\uff0c\u611f\u53d7\u4e00\u4e0b\uff09\n\nPS\uff1a\u8fd9\u91cc\u63a8\u8350dijkstra\u7b97\u6cd5\uff0c\u4e0d\u63a8\u8350spfa\uff0c\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5361\u6389spfa\uff0c\u5e73\u65f6\u7ec3\u4e60\u8981\u517b\u6210\u597d\u7684\u4e60\u60ef\uff0c\u907f\u514d\u8003\u8bd5\u65f6\u917f\u6210\u4e0d\u5fc5\u8981\u7684\u60e8\u5267\u3002\n### \u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll; // \u505a\u9898\u7684\u597d\u4e60\u60ef \n\nconst int maxn = 1005; //\u70b9\u6570 \nconst int maxm = 100005; //\u8fb9\u6570 \n\nint n, m, s, ans[maxn], sum;\n\nstruct Edge{\n\tint nxt, to, w;\n}e[maxm];\n\nint head[maxn], cnt;\n\nvoid addEdge(int u, int v, int w) {\n\te[++cnt].nxt = head[u];\n\te[cnt].w = w;\n\te[cnt].to = v;\n\thead[u] = cnt; \n}\n\nint dis[maxn], vis[maxn];\n\nvoid dijkstra(int s) {\n\tfor (int i = 1; i <= n; i++) dis[i] = 0x3f3f3f3f;  \n\tpriority_queue< pair<int, int> > q;\n\tq.push(make_pair(0, s));\n\tdis[s] = 0;\n\twhile (q.size()) {\n\t\tint u = q.top().second;\n\t\tq.pop();\n\t\tif (vis[u]) continue;\n\t\tvis[u] = 1;\n\t\tfor (int i = head[u]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].to;\n\t\t\tif (dis[v] > dis[u] + e[i].w) {\n\t\t\t\tdis[v] = dis[u] + e[i].w;\n\t\t\t\tq.push(make_pair(-dis[v], v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tint u[maxm], v[maxm], w[maxm];\n\tcin >> n >> m >> s;\n\tfor (int i = 1; i <= m; i++) {\n\t\tcin >> u[i] >> v[i] >> w[i]; //\u5148\u5b58\u4e0b\u6570\u636e\uff0c\u4fbf\u4e8e\u4ee5\u540e\u53cd\u5411\u5efa\u8fb9 \n\t\taddEdge(u[i], v[i], w[i]); //\u6b63\u5411\u5efa\u8fb9 \n\t}\n\tdijkstra(s);\n\tfor (int i = 1; i <= n; i++) ans[i] = dis[i]; //\u56de\u5bb6\u7684\u6700\u77ed\u8def\u5f84  \n\tcnt = 0;\n\tmemset(dis, 0, sizeof(dis));\n\tmemset(head, 0, sizeof(head));\n\tmemset(vis, 0, sizeof(vis));\n\tfor (int i = 1; i <= m; i++) addEdge(v[i], u[i], w[i]); //\u53cd\u5411\u5efa\u8fb9\n\tdijkstra(s);\n\tfor (int i = 1; i <= n; i++) {\n\t\tans[i] += dis[i]; //\u56de\u5bb6\u7684\u6700\u77ed\u8def+\u53bb\u6d3e\u5bf9\u7684\u6700\u77ed\u8def=\u5168\u7a0b\u7684\u6700\u77ed\u8def \n\t\tsum = max(sum, ans[i]); //\u6c42\u6700\u5927\u503c \n\t}\n\tcout << sum;//\u8f93\u51fa \n\treturn 0;\n}\n```\n\n\n------------\n# \u611f\u8c22\uff01",
        "postTime": 1564365228,
        "uid": 127608,
        "name": "My_666",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "# \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011\n\n_Tips:\u535a\u5ba2\u5185\u98df\u7528\u6548\u679c\u66f4\u4f73 [\u4f20\u9001\u95e8](https://dgsyrc.github.io/2019/08/16/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3%20P1821%20%E3%80%90[USACO07FEB]%E9%93%B6%E7%89%9B%E6%B4%BE%E5%AF%B9Silver%20Cow%20Party%E3%80%91/#more)_ \n\n### \u9898\u610f\uff1a\n\n\u6709$n$\u5934\u725b\uff0c$m$\u6761\u8def\uff0c\u6240\u6709\u725b\u8981\u524d\u5f80$X$\u725b\u7684\u5bb6\u5f00\u8db4\uff08\u5f53\u7136$X$\u725b\u4e0d\u7528\u52a8\uff09\uff0c\u6c42\u5176\u4ed6\u725b\u53bb\u5f00\u8db4\u6765\u56de\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u8f93\u51fa\u6700\u957f\u7684\u90a3\u6761\u3002\n\n### \u7b80\u5316\u7248\u9898\u610f\uff1a\n\n\u6709$n$\u4e2a\u8282\u70b9\uff0c$m$\u6761\u8fb9\uff0c\u7ed9\u51fa\u7ec8\u70b9$X$\uff0c\u6c42\u5176\u4ed6\u8282\u70b9\u5230\u7ec8\u70b9\u7684\u6765\u56de\u6700\u77ed\u8ddd\u79bb\uff0c\u8f93\u51fa\u6700\u957f\u7684\u8ddd\u79bb\u3002\n\n## \u6ce8\u610f\uff1a\u8be5\u9898\u6240\u7ed9\u7684\u8fb9\u4e3a\u6709\u5411\u8fb9\uff0c\u522b\u778e*2\u8f93\u51fa\n\n### \u4f7f\u7528\u7684\u7b97\u6cd5\uff1aSPFA\n\n### \u601d\u8def\uff1a\n\n\u9898\u76ee\u8981\u627e\u5176\u4ed6\u70b9\u5230\u7ec8\u70b9$X$\u7684\u6700\u77ed\u8def\u5f84\u548c\u7ec8\u70b9$X$\u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\u4e3a\u4fbf\u4e8e\u4ee3\u7801\u5b9e\u73b0\uff0c\u8981\u8fdb\u884c\u53cd\u5411\u5efa\u56fe\uff0c\u7528SPFA\u8dd1\u6b63\u5411\u7684\u56fe\u6c42\u7ec8\u70b9$X$\u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u518d\u7528\u8dd1\u53cd\u5411\u56fe\u6c42\u5176\u4ed6\u70b9\u5230\u7ec8\u70b9$X$\u7684\u6700\u77ed\u8def\u5f84\u3002\n\n\u53cd\u5411\u56fe\u5373\u5c06\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u53cd\u8fc7\u6765\uff0c\u8fb9\u6743\u4e0d\u53d8\u3002\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<vector>\nusing namespace std;\nstruct edge\n{\n\tint u,v;\t\n};\n\nvector<edge> G[3][1001];//\u52a8\u6001\u6570\u7ec4\u5b58\u8fb9\n\nqueue<int> Q;//\u961f\u5217\uff08STL\u5927\u6cd5\u597d\uff09\n\nint n,m,f[3][1001],l,ans;\nbool vis[1001];\n\nvoid spfa(int k)//k=1\u65f6\u6b63\u5411\u56fe\uff0ck=2\u65f6\u53cd\u5411\u56fe\n{\n\tmemset(vis,0,sizeof(vis));//\u521d\u59cb\u5316false\n\tvis[l]=true;\n\tf[k][l]=0;\n\tQ.push(l);\n\twhile(!Q.empty())\n\t{\n\t\tint news=Q.front();\n\t\tQ.pop();\n\t\tvis[news]=false;\n\t\tfor(int i=0;i<G[k][news].size();i++)\n\t\t{\n\t\t\tint v=G[k][news][i].v,u=G[k][news][i].u;\n\t\t\tif(f[k][v]>f[k][news]+u)\n\t\t\t{\n\t\t\t\tf[k][v]=f[k][news]+u;\n\t\t\t\tif(!vis[v])\n\t\t\t\t{\n\t\t\t\t\tvis[v]=true;\n\t\t\t\t\tQ.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&l);\n\tmemset(f,0x3f3f3f,sizeof(f));\n\tfor(int a=1;a<=m;a++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tedge cmp;\n\t\tcmp.v=y;\n\t\tcmp.u=z;\n\t\tG[1][x].push_back(cmp);//\u6b63\u5411\u5efa\u56fe\n\t\tcmp.v=x;\n\t\tG[2][y].push_back(cmp);//\u53cd\u5411\u5efa\u56fe\n\t}\n\tspfa(1);//\u8dd1\u6b63\u5411\u56fe\n\tspfa(2);//\u8dd1\u53cd\u5411\u56fe\n\tfor(int a=1;a<=n;a++)\n\t{\n\t\tif(a==l)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tans=max(f[1][a]+f[2][a],ans);//\u627e\u6700\u957f\u7684\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1565946127,
        "uid": 89910,
        "name": "C_Cong",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "# \u5957\u4e00\u5957spfa\u7684\u677f\u5b50\u5c31\u597d\u4e86\u3002\n\n# \u601d\u8def\uff1a\n\u4ece\u6bcf\u4e2a\u70b9\u505a\u4e00\u6b21spfa\uff0c\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u70b9\u5230x\u70b9\u7684\u8ddd\u79bb\uff08\u5373\u5976\u725b\u4eec\u53bb\u7684\u8ddd\u79bb\uff09\uff0c\u7136\u540e\u518d\u4ee5x\u70b9\u4e3a\u8d77\u70b9\u505a\u4e00\u6b21spfa\uff0c\u5728\u8bb0\u5f55\u4ecex\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\uff08\u5373\u5976\u725b\u4eec\u56de\u6765\u7684\u8ddd\u79bb\uff09\u3002\n\n# \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint b,e,p,m,n,t;\nint tot,now[100010],son[100010],pre[100010],V[100010];\nint dis[100010],ans[100010];\nbool flag[100010];\nint team[100010];\nvoid read(int &x) {\n    char ch; bool ok;\n    for(ok=0,ch=getchar(); !isdigit(ch); ch=getchar()) if(ch=='-') ok=1;\n    for(x=0; isdigit(ch); x=x*10+ch-'0',ch=getchar()); if(ok) x=-x;\n}//\u5feb\u8bfb\nvoid put(int x,int y,int z)\n{\n    pre[++tot]=now[x];\n    now[x]=tot;\n    son[tot]=y;\n    V[tot]=z;\n}//\u90bb\u63a5\u8868\u5b58\u50a8\nvoid spfa(int s,int *d)\n{\n    \n    for(int i=1;i<=n;i++)\n        d[i]=9999999;\n    int head=0,tail=1;\n    memset(flag,false,sizeof(flag));\n    flag[s]=true;\n    d[s]=0;\n    team[1]=s;\n    do\n    {\n        head++;\n        int u=team[head];\n        flag[u]=false;\n        for(int i=now[u];i;i=pre[i])\n        {\n            int v=son[i];\n            if(d[v]>d[u]+V[i])\n            {\n                d[v]=d[u]+V[i];\n                if(!flag[v])\n                {\n                    tail++;\n                    team[tail]=v;\n                    flag[v]=true;\n                }\n            }\n        }\n    } while (head<=tail);\n    \n}//spfa\u7684\u677f\u5b50\nint main()\n{\n    int x,y,z;\n    read(n),read(m),read(t);\n    for(int i=1;i<=m;i++)\n    {\n        read(x),read(y),read(z);\n        put(x,y,z);\n    }\n    for(int i=1;i<=n;i++)\n    {\n      spfa(i,dis);//\u6bcf\u4e2a\u70b9\u505a\u4e00\u6b21spfa\n      ans[i]=dis[t];//\u8bb0\u5f55\n    }\n    spfa(t,dis);//\u4ece\u7ec8\u70b9\u505a\u4e00\u6b21\n    int maxx=0;//\u8bb0\u5f55\u6700\u5927\u503c\n    for(int i=1;i<=n;i++)\n    {\n      ans[i]+=dis[i];//\u52a0\u4e0a\u6bcf\u5934\u725b\u56de\u5bb6\u7684\u8ddd\u79bb\n      maxx=max(ans[i],maxx);//\u627e\u6700\u5927\u503c\n    }\n    printf(\"%d\",maxx);//\u8f93\u51fa\u7b54\u6848\n}\n```\n\n",
        "postTime": 1550038813,
        "uid": 95392,
        "name": "zengxr",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "**\u5f88\u7ecf\u5178\u7684\u6700\u77ed\u8def\uff0c\u867d\u7136\u6570\u636e\u4e0d\u5751**\n\n\u601d\u8def\uff1a\u8fd9\u9898\u662f\u4e00\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u548c\u5355\u7ec8\u70b9\u6700\u77ed\u8def\uff0c\u524d\u8005\u5927\u5bb6\u90fd\u4f1a\uff0c\u4e00\u904dSPFA\u6216Dijkstra\u5c31\u884c\u4e86\uff08\u6570\u636e\u4e5f\u6ca1\u5361SPFA\uff09\uff1b\u53ef\u662f\u540e\u8005\u5355\u7ec8\u70b9\u6700\u77ed\u8def\u600e\u4e48\u529e\u5462\uff1f\u53ef\u4ee5\u628a\u8fb9\u53cd\u8fc7\u6765\uff08\u5177\u4f53\u53ef\u4ee5\u5728\u8f93\u5165\u65f6\u5c31\u5efa\u4e24\u4e2a\u56fe\uff0c\u4e00\u6b63\u4e00\u53cd\uff09\uff0c\u56e0\u4e3a\u5355\u6e90\u548c\u5355\u7ec8\u70b9\u53ea\u662f\u65b9\u5411\u6539\u53d8\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u53d1\u73b0\u8fd9\u4e48\u505a\u662f\u5bf9\u7684\u3002\n\n\u5177\u4f53\u505a\u6cd5\uff1a\u5f88\u7b80\u5355\u5462\uff0c\u4e24\u904dSPFA\uff0c\u4e0d\u8fc7\u8981\u5199\u4e24\u4e2a\u51fd\u6570\u3002\n\n\u6ce8\u610f\uff1a\u597d\u50cf\u6ca1\u4ec0\u4e48\u53ef\u4ee5\u6ce8\u610f\u7684\u3002\u3002\u3002\n\n\u63a5\u4e0b\u6765\u8d34\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define inf 2000000000\nusing namespace std;\nstruct edge{\n    int to,next,w;\n}e[100001],e2[100001];\nint n,m,s;\nint head[1001],head2[1001];\nint in[1001];\nint d1[1001];\nint d2[1001];\n\nvoid spfa(){\n    queue<int> q;\n    q.push(s);\n    in[s]=1;\n    d1[s]=0;\n    while(!q.empty()){\n        int t=q.front();\n        q.pop();\n        in[t]=0;\n        for(int i=head[t];i!=0;i=e[i].next){\n            if(d1[t]+e[i].w<d1[e[i].to]){\n                d1[e[i].to]=d1[t]+e[i].w;\n                if(!in[e[i].to]){\n                    in[e[i].to]=1;\n                    q.push(e[i].to);\n                }\n            }\n        }\n    }\n}\nvoid spfa2(){\n    queue<int> q;\n    q.push(s);\n    in[s]=1;\n    d2[s]=0;\n    while(!q.empty()){\n        int t=q.front();\n        q.pop();\n        in[t]=0;\n        for(int i=head2[t];i!=0;i=e2[i].next){\n            if(d2[t]+e2[i].w<d2[e2[i].to]){\n                d2[e2[i].to]=d2[t]+e2[i].w;\n                if(!in[e2[i].to]){\n                    in[e2[i].to]=1;\n                    q.push(e2[i].to);\n                }\n            }\n        }\n    }\n}\nint main(){\n    cin>>n>>m>>s;\n    for(int i=1;i<=n;i++){\n        d1[i]=inf;\n        d2[i]=inf;\n    }\n    for(int i=1;i<=m;i++){\n        int a,b,l;\n        scanf(\"%d %d %d\",&a,&b,&l);\n        e[i].to=b;\n        e[i].next=head[a];\n        head[a]=i;\n        e[i].w=l;\n        e2[i].to=a;\n        e2[i].next=head2[b];\n        e2[i].w=l;\n        head2[b]=i;\n    }\n    spfa();\n    memset(in,0,sizeof(in));\n    spfa2();\n    int mx=0;\n    for(int i=1;i<=n;i++){\n        mx=max(mx,d1[i]+d2[i]);\n    }\n    cout<<mx;\n    return 0;\n}\n```",
        "postTime": 1498709118,
        "uid": 39505,
        "name": "\u73ab\u8475\u4e4b\u8776",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "# \u8fd9\u9053\u9898\u4e00\u770b\u5c31\u662f\u4e2a\u6700\u77ed\u8def\u561b~\n## \u53ef\u662f\u662f\u7528SPFA\u5462\uff0c\u8fd8\u662fDijkstra\u5462\uff1f\n### \u5f53\u7136\u5566\uff0c\u672c\u4eba\u559c\u6b22\u5199SPFA\uff0c~~\u56e0\u4e3aDijkstra\u4e0d\u4f1a\u5199~~\n### \u54b3\u54b3\u54b3\uff0c\u8a00\u5f52\u6b63\u4f20\uff0c\u8fd9\u9053\u9898\u8be5\u600e\u4e48\u5199\u5462\uff1f\n\u5176\u5b9e\u561b\uff0c\u8fd9\u9053\u9898\u5c31\u662f\u8ba9\u4f60\u4ece$X$\u70b9\u5f00\u59cb\u6b63\u7740\u8dd1\u4e00\u904dSPFA\uff0c\u5012\u7740\u518d\u8dd1\u4e00\u904d\u3002\n### \u6ce8\u610f\u5566\uff01\u8fd9\u9053\u9898\u662f\u6709\u5411\u56fe\uff01\uff01\uff01\u4e0d\u8981\u778e\u4e58\u4e8c\uff01\n\u90a3\u4e48SPFA\u8be5\u600e\u4e48\u5199\u5462\uff1f\uff08\u6ce8\uff1a\u4f1a\u5199SPFA\u7684\u5927\u4f6c\u8bf7\u7701\u7565\u8fd9\u4e00\u90e8\u5206\uff0c\u76f4\u63a5\u8df3\u8f6c\u5230\u6700\u7ec8\u4ee3\u7801\u90e8\u5206\uff01\uff09\n\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u5b58\u56fe\uff01\u5b58\u56fe\u6709\u597d\u51e0\u79cd\u65b9\u6cd5\uff0c\u4e0d\u8fc7\u672c\u849f\u84bb\u8fd8\u662f\u6bd4\u8f83\u559c\u6b22\u7528\u90bb\u63a5\u8868\u7684\u3002\n\n### \u4e00\u3001\u90bb\u63a5\u8868\u5b58\u56fe\uff1a\n```\nstruct Tedge           //\u5148\u5f00\u4e00\u4e2a\u7528\u6765\u5b58\u8fb9\u7684\u7ed3\u6784\u4f53\n\t\t       //to\u662f\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9,len\u662f\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\n{\n\tint to, len;\n};\nvector<Tedge> edge[MAXN];    //\u7528vector\u52a8\u6001\u6570\u7ec4\u5b58\u8fb9\uff0c\u66f4\u8282\u7701\u7a7a\u95f4\nvoid add_edge(int u, int v, int w)\n{\n\tTedge temp;\n\ttemp.to = v;\n\ttemp.len = w;\n\tedge[u].push_back(temp);\n}\nfor (int i = 1, a, b, t; i <= m; ++i)\n{\n\tcin >> a >> b >> t;    //\u5206\u522b\u4ee3\u8868\u8d77\u70b9\u3001\u7ec8\u70b9\u3001\u957f\u5ea6\n\tadd_edge(a, b, t);    //\u8fd9\u9053\u9898\u662f\u6709\u5411\u56fe\uff01\uff01\n}\n//edge[i][j].to\u4ee3\u8868\u4e86\u8d77\u70b9\u4e3ai\u7684\u7b2cj\u6761\u8fb9\uff0c\u7ec8\u70b9\u4e3aedge[i][j].to\n//edge[i][j].len\u4ee3\u8868\u4e86\u8d77\u70b9\u4e3ai\u7684\u7b2cj\u6761\u8fb9\uff0c\u957f\u5ea6\u4e3aedge[i][j].len\uff0c\u5373i\u5230edge[i][j].to\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\u4e3aedge[i][j].len\u3002\n```\n\u597d\u4e86\uff0c\u5b58\u56fe\u5b58\u5b8c\u4e86\uff0c\u90a3\u4e48\u8be5\u600e\u4e48\u6c42\u6700\u77ed\u8def\u5462\uff1f\n### \u4e8c\u3001SPFA\nSPFA\u7684\u672c\u8d28\u5176\u5b9e\u5c31\u662f\u5728\u56fe\u4e2d\u505a\u5e7f\u641c\uff0c\u5e9f\u8bdd\u5c11\u8bf4\uff0c\u76f4\u63a5\u8d34\u4ee3\u7801\uff1a\n```\n//dist\u6570\u7ec4\u7528\u6765\u5b58\u50a8\u4ece\u8d77\u70b9\u5230i\u7684\u6700\u77ed\u8def\uff0cinq\u6570\u7ec4\u7528\u6765\u5b58\u50a8\u7b2ci\u4e2a\u70b9\u662f\u5426\u8d70\u8fc7\nvoid spfa1()\n{\n\tfor (int i = 1; i <= n; ++i) dist1[i] = 1e9, inq[i] = false;\n\tdist1[x] = 0;            //\u8fd9\u91cc\u5047\u8bbex\u70b9\u4e3a\u8d77\u70b9\n\tinq[x] = true;           //\u9996\u5148\uff0c\u4f5c\u4e3a\u8d77\u70b9\uff0cx\u70b9\u5df2\u7ecf\u88ab\u8d70\u8fc7\n\tq.push(x);\n\twhile (! q.empty())\n\t{\n\t\tint cur = q.front();    //cur\u662f\u5f53\u524d\u641c\u5230\u7684\u70b9\n\t\tinq[cur] = false;\n\t\tfor (int i = 0; i < edge1[cur].size(); ++i)  //\u904d\u5386\u6240\u6709cur\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\n\t\t{\n\t\t\tint to = edge1[cur][i].to;\n\t\t\tif (dist1[cur] + edge1[cur][i].len < dist1[to])  //\u66f4\u65b0\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\n\t\t\t{\n\t\t\t\tdist1[to] = dist1[cur] + edge1[cur][i].len;\n\t\t\t\tif (! inq[to])\n\t\t\t\t{\n\t\t\t\t\tinq[to] = true;\n\t\t\t\t\tq.push(to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tq.pop();\n\t}\n}\n```\n\u4ee5\u4e0a\u5c31\u662fSPFA\u6a21\u7248\u91cd\u8981\u7247\u6bb5\uff01\n### \u4e09\u3001\u6700\u540e\uff0c\u6709\u5173\u8fd9\u9053\u9898\uff1a\n\u8fd9\u9053\u9898\u7684\u601d\u8def\uff1a\n\n\u9996\u5148\u8981\u4ece\u70b9X\u51fa\u53d1\u7b97\u51fa\u6bcf\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u518d\u4ee5\u70b9X\u4e3a\u7ec8\u70b9\uff0c\u518d\u8dd1\u4e00\u904d\u6700\u77ed\u8def\n\n\u56e0\u6b64\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u5b58\u56fe\u65f6\u9700\u8981\u5b58\u4e24\u6b21\uff08\u4e00\u6b21\u6b63\u7740\u5b58\uff0c\u4e00\u6b21\u5012\u7740\u5b58\uff09\n\n\u5b58\u56fe\u4ee3\u7801\uff1a\n```\nstruct Tedge\n{\n\tint to, len;\n};\nvector<Tedge> edge1[MAXN], edge2[MAXN];\nvoid add_edge(int u, int v, int w)    //\u5b58\u4e24\u6b21\u56fe\uff0c\u5206\u522b\u5b58\u5728edge1\u548cedge2\u4e2d\n{\n\tTedge temp1, temp2;\n\ttemp1.to = v;\n\ttemp1.len = w;\n\tedge1[u].push_back(temp1);\n\ttemp2.to = u;\n\ttemp2.len = w;\n\tedge2[v].push_back(temp2);\n}\nfor (int i = 1, a, b, t; i <= m; ++i)\n{\n\tcin >> a >> b >> t;\n\tadd_edge(a, b, t);\n}\n```\n\u7136\u540e\u5462\uff0c\u7531\u4e8e\u9700\u8981\u505a\u4e24\u6b21SPFA\uff0c\u56e0\u6b64\u5c31\u8981\u5199\u4e24\u4e2aSPFA\u7684\u51fd\u6570\u4e86\uff0c\u4e0d\u8fc7\u6ca1\u5565\u533a\u522b\uff0c\u53ea\u9700\u8981\u6539\u4e00\u4e0b\u6570\u7ec4\u540d\u5c31\u597d\u4e86\n\n### \u56db\u3001\u9001\u4e0a\u7ec8\u6781AC\u4ee3\u7801\uff1a\n\n```\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\n#include <vector>\nusing namespace std;\nconst int MAXN = 2020 ;\nstruct Tedge\n{\n\tint to, len;\n};\nint n, m, x;\nint dist1[MAXN], dist2[MAXN];\nbool inq[MAXN];\nvector<Tedge> edge1[MAXN], edge2[MAXN];\nqueue<int> q;\nvoid add_edge(int u, int v, int w)    //\u5b58\u8fb9\n{\n\tTedge temp1, temp2;\n\ttemp1.to = v;\n\ttemp1.len = w;\n\tedge1[u].push_back(temp1);\n\ttemp2.to = u;\n\ttemp2.len = w;\n\tedge2[v].push_back(temp2);\n}\nvoid spfa1()                  //\u6b63\u7740\u505aSPFA\n{\n\tfor (int i = 1; i <= n; ++i) dist1[i] = 1e9, inq[i] = false;\n\tdist1[x] = 0;\n\tinq[x] = true;\n\tq.push(x);\n\twhile (! q.empty())\n\t{\n\t\tint cur = q.front();\n\t\tinq[cur] = false;\n\t\tfor (int i = 0; i < edge1[cur].size(); ++i)\n\t\t{\n\t\t\tint to = edge1[cur][i].to;\n\t\t\tif (dist1[cur] + edge1[cur][i].len < dist1[to])\n\t\t\t{\n\t\t\t\tdist1[to] = dist1[cur] + edge1[cur][i].len;\n\t\t\t\tif (! inq[to])\n\t\t\t\t{\n\t\t\t\t\tinq[to] = true;\n\t\t\t\t\tq.push(to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tq.pop();\n\t}\n}\nvoid spfa2()                  //\u5012\u7740\u505aSPFA\n{\n\tfor (int i = 1; i <= n; ++i) dist2[i] = 1e9, inq[i] = false;\n\tdist2[x] = 0;\n\tinq[x] = true;\n\tq.push(x);\n\twhile (! q.empty())\n\t{\n\t\tint cur = q.front();\n\t\tinq[cur] = false;\n\t\tfor (int i = 0; i < edge2[cur].size(); ++i)\n\t\t{\n\t\t\tint to = edge2[cur][i].to;\n\t\t\tif (dist2[cur] + edge2[cur][i].len < dist2[to])\n\t\t\t{\n\t\t\t\tdist2[to] = dist2[cur] + edge2[cur][i].len;\n\t\t\t\tif (! inq[to])\n\t\t\t\t{\n\t\t\t\t\tinq[to] = true;\n\t\t\t\t\tq.push(to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tq.pop();\n\t}\n}\nint main()\n{\n\tcin >> n >> m >> x;\n\tfor (int i = 1, a, b, t; i <= m; ++i)\n\t{\n\t\tcin >> a >> b >> t;\n\t\tadd_edge(a, b, t);\n\t}\n\tspfa1(); spfa2();        //\u6c42\u4e24\u904dSPFA\n\tint ans = 0;\n\tfor (int i = 1; i <= n; ++i)\n\t\tans = max(ans, dist1[i] + dist2[i]);   //\u6c42\u6700\u7ec8\u7ed3\u679c\n\tcout << ans << endl;\n\treturn 0;\n}\n```\n\n\u547c~\u597d\u4e86\uff0c\u7ec8\u4e8e\u5199\u5b8c\u9898\u89e3\u4e86\uff0c\u5e0c\u671b\u80fd\u901a\u8fc7\n\n~~\u53e6\u5916\uff0c\u89c9\u5f97\u9898\u89e3\u597d\u5c31\u8d5e\u4e00\u4e2a\u5457~~~~~",
        "postTime": 1567338628,
        "uid": 86319,
        "name": "tjztjz",
        "ccfLevel": 0,
        "title": "P1821 [USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party"
    },
    {
        "content": "\u770b\u904d\u4e86\u6240\u6709\u9898\u89e3\uff0c\u5927\u5bb6\u90fd\u6ca1\u6709\u5199\u7ed3\u6784\u4f53\u7248\u5806\u4f18\u5316dijkstra\u7684\uff0c\u800c\u6070\u6070\u8fd9\u4e2a\u7b97\u6cd5\u8dd1\u6700\u77ed\u8def\u662f\u6700\u5b9e\u7528\u7684(\u90a3\u4e9b\u7ebf\u6bb5\u6811\u4f18\u5316dijkstra\u7684dalao\u5148\u522b\u8bf4\u8bdd\u3002\u3002\u3002(noip\u4e5f\u7528\u4e0d\u5230))\u3002spfa\u590d\u6742\u5ea6\u4e0d\u7a33\u5b9a\uff0c\u53ef\u4ee5\u88ab\u51fa\u9898\u4eba\u8f7b\u677e\u5361\u6389\uff0c\u6240\u4ee5\uff0c\u6211\u6765\u7ed9\u5404\u4f4d\u53d1\u4e00\u904d\u5806\u4f18\u5316dijkstra\u7684\u9898\u89e3\uff0c\u5177\u4f53\u5b9e\u73b0\u548c\u601d\u8def\u770b\u4ee3\u7801\u5427\u3002\n\n\u5982\u679c\u60f3\u7ec3\u4e60\u505a\u5806\u4f18\u5316\u6a21\u677f\u9898\u8054\u7cfb\u4e00\u4e0b\u7684\u8bdd\uff1a\u8bf7  [luogu P4779](https://www.luogu.org/problemnew/show/P4779)\n\n\u4e0b\u9762\u732e\u4e0a\u6211~~\u9999\u55b7\u55b7~~\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<algorithm>\n#define ll long long\n#define maxn 1000+1\n#define maxn1 100000+1\nusing namespace std;\ninline ll qread()             //\u5feb\u8bfb(\u4e0d\u4f1a\u7684\u540c\u5b66\u4e5f\u53ef\u4ee5\u7528scanf,\u4e0d\u63a8\u8350\u7528cin,\u592a\u6162\u4e86\u3002\u3002\u3002)\n{\n\tchar c=getchar();ll num=0,f=1;\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) num=num*10+c-'0';\n\treturn num*f;\n}\nll n,m,dis[maxn],head[maxn],ans,num,zdl[maxn],t,s,maxx=-1;                 //dis\u8868\u793a\u8d77\u70b9\u5230\u67d0\u4e2a\u70b9\u7684\u6700\u77ed\u8def\uff0czdl\u4e3a\u6700\u540e\u7edf\u8ba1\u7684\u6700\u7ec8\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\uff0cmaxx\u7528\u6765\u66f4\u65b0\u6700\u5927\u503c\u3002\nstruct Edge\n{\n\tll v,w,nxt;\n}edge[maxn1];\ninline void ct(ll u,ll v,ll w)   //\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u3002\n{\n\tedge[++num].v=v;\n\tedge[num].w=w;\n\tedge[num].nxt=head[u];\n\thead[u]=num;\n}\nstruct node\n{\n\tll x,y;\n\tbool operator < (const node &a) const   //\u628a\u5927\u6839\u5806\u91cd\u8f7d\u6210\u5c0f\u6839\u5806\u3002\n\t{\n\t\treturn y>a.y;\n\t}\n};\ninline void dijkstra()        //\u4ece\u67d0\u4e2a\u70b9\u5230\u7ec8\u70b9\u3002\n{\n\tmemset(dis,0x3f,sizeof(dis));  //\u521d\u59cb\u5316\u6700\u77ed\u8def\u6570\u7ec4\u4e3a\u6781\u5927\u503c\u3002\n\tdis[s]=0;\n\tpriority_queue<node>q;\n\tq.push((node){s,0});            //\u52a0\u5165\u8d77\u70b9\u3002\n\twhile(!q.empty())\n\t{\n\t\tll u=q.top().x,d=q.top().y;\n\t\tq.pop();\n\t\tif(d!=dis[u]) continue;\n\t\tfor(ll i=head[u];i;i=edge[i].nxt)\n\t\t{\n\t\t\tll v=edge[i].v;\n\t\t\tif(dis[v]>dis[u]+edge[i].w)  //dijkstra\u57fa\u672c\u64cd\u4f5c\u3002\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+edge[i].w;\n\t\t\t\tq.push((node){v,dis[v]});\n\t\t\t}\n\t\t}\n\t}\n}\ninline void dijkstra2()     //\u4ece\u7ec8\u70b9\u5230\u67d0\u4e2a\u70b9\u3002\n{\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[t]=0;                     //\u52a0\u5165\u7ec8\u70b9\u3002\n\tpriority_queue<node>q;\n\tq.push((node){t,0});\n\twhile(!q.empty())\n\t{\n\t\tll u=q.top().x,d=q.top().y;\n\t\tq.pop();\n\t\tif(d!=dis[u]) continue;\n\t\tfor(ll i=head[u];i;i=edge[i].nxt)\n\t\t{\n\t\t\tll v=edge[i].v;\n\t\t\tif(dis[v]>dis[u]+edge[i].w)     //\u5957\u8def\u540c\u4e0a\u3002\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+edge[i].w;\n\t\t\t\tq.push((node){v,dis[v]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tn=qread(),m=qread(),t=qread();\n\tfor(int i=1,u,v,w;i<=m;++i)\n\t{\n\t\tu=qread(),v=qread(),w=qread();\n\t\tct(u,v,w);           \n\t}\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\ts=i;\n\t\tdijkstra();\n\t\tzdl[i]=dis[t];           //\u66f4\u65b0\u6bcf\u4e2a\u70b9\u7684\u5f53\u524d\u6700\u77ed\u8def\u3002\n\t}\n\tdijkstra2();\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tzdl[i]+=dis[i];        //\u8fd8\u8981\u4ece\u7ec8\u70b9\u8dd1\u56de\u5bb6\u3002\n\t\tmaxx=max(maxx,zdl[i]);  //\u66f4\u65b0\u6700\u5927\u503c\u3002\n\t}\n\tcout<<maxx<<'\\n';\n\treturn 0;                 //\u8f93\u51fa\uff0c\u5b8c\u7f8e\u843d\u5e55\uff01\n}\n```\n\n\u5927\u5bb6\u6709\u4ec0\u4e48\u4e0d\u61c2\u7684\u5730\u65b9\u53ef\u4ee5\u5728\u6211\u7684\u535a\u5ba2\u7559\u8a00\u6216\u79c1\u4fe1\u95ee\u6211\u54e6\uff01",
        "postTime": 1539871453,
        "uid": 68622,
        "name": "King\u4e28\u5e1d\u5fa1\u5a01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "# \u9898\u76ee\u63cf\u8ff0\uff1a\n\u5bd2\u5047\u5230\u4e86\uff0cN\u5934\u725b\u90fd\u8981\u53bb\u53c2\u52a0\u4e00\u573a\u5728\u7f16\u53f7\u4e3aX\uff081\u2264X\u2264N\uff09\u7684\u725b\u7684\u519c\u573a\u4e3e\u884c\u7684\u6d3e\u5bf9\uff081\u2264N\u22641000\uff09\uff0c\u519c\u573a\u4e4b\u95f4\u6709M\uff081\u2264M\u2264100000\uff09\u6761\u6709\u5411\u8def\uff0c\u6bcf\u6761\u8def\u957fTi\uff081\u2264Ti\u2264100\uff09\u3002\n\n\u6bcf\u5934\u725b\u53c2\u52a0\u5b8c\u6d3e\u5bf9\u540e\u90fd\u5fc5\u987b\u56de\u5bb6\uff0c\u65e0\u8bba\u662f\u53bb\u53c2\u52a0\u6d3e\u5bf9\u8fd8\u662f\u56de\u5bb6\uff0c\u6bcf\u5934\u725b\u90fd\u4f1a\u9009\u62e9\u6700\u77ed\u8def\u5f84\uff0c\u6c42\u8fd9N\u5934\u725b\u7684\u6700\u77ed\u8def\u5f84\uff08\u4e00\u4e2a\u6765\u56de\uff09\u4e2d\u6700\u957f\u7684\u4e00\u6761\u8def\u5f84\u957f\u5ea6\u3002\n\n# \u5206\u6790\uff1a\n\u5176\u5b9e\u8fd9\u9053\u9898\u7684\u8003\u70b9\u5c31\u662f\u5355\u5143\u6700\u77ed\u8def\u5f84\u548c\u5355\u7ec8\u70b9\u6700\u77ed\u8def\u5f84\u3002\n\n\u5355\u7ec8\u70b9\u6700\u77ed\u8def\u5f84\u5176\u5b9e\u5c31\u53ef\u4ee5\u628a\u6240\u6709\u7684\u8fb9\u53cd\u8fc7\u6765\uff0c\u76f4\u63a5\u5c31\u8f6c\u6362\u4e3a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u4e86\u3002\n\n\u4e8e\u662f\u6b64\u9898\u7684\u6838\u5fc3\u5c31\u662f\u8dd1\u4e24\u904ddijkstra\u6216spfa\u4e86\uff08\u672c\u4eba\u504f\u597ddijkstra\uff09\u3002\n\n**\u8fd8\u6709\u5c31\u662f\u6ce8\u610f\u53d8\u91cf\u4e0d\u8981\u91cd\u590d**\n\n# [\u4ee3\u7801](https://blog.csdn.net/kkkksc03/article/details/83050450)",
        "postTime": 1539520173,
        "uid": 45475,
        "name": "ShineEternal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "~~\u8fd9\u4e00\u9898\u5c31\u662f\u57fa\u7840\u7684\u6700\u77ed\u8def\u6a21\u677f\u5427~~\n\n\u9644\u4e0a\u6700\u77ed\u8def\u6a21\u677f\u4f20\u9001\u95e8\n\n[\u6700\u77ed\u8def](https://www.luogu.org/problem/P3371)\n\n\u90a3\u4e48\u8fd9\u4e00\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u7406\u89e3\u4e00\u4e0b\u9898\u610f\uff0c\u5f88\u660e\u663e\u8981\u6211\u4eec\u53cd\u5411\u5efa\u56fe\uff0c\u56e0\u4e3a\u672c\u849f\u84bb\u7528\u7684\u662fdijkstra\uff0c\u53ea\u9700\u8981\u7b2c\u4e00\u6b21\u6b63\u7740\u8dd1\u4e00\u8fb9\u6240\u6709\u70b9\u5230x\u70b9\u7684\u8ddd\u79bb\uff0c\u53cd\u7740\u5faa\u73af1~n\u6765\u6c42\u51fax\u70b9\u5230i\u70b9\u7684\u8ddd\u79bb,\u7528\u4e24\u4e2a\u6570\u7ec4\u6765\u8bb0\u5f55\u4e00\u4e0b\u6743\u503c\uff0c\u7c7b\u4f3c++tot\u7684\u65b9\u6cd5\u8bb0\u5f55\u4e00\u4e0b\u4e0b\u6807\uff0c\u6700\u540e\u76f8\u52a0\u6c42\u6700\u5927\u5e94\u8be5\u5c31\u884c\u4e86\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int N=50010;\nint ver[N<<1],head[N<<1],next[N<<1],edge[N<<1],d[N<<1],v[N];\nint tot,x,n,m,tot1,tot2,maxx;\nint a[N],b[N];\npriority_queue< pair<int,int > > q;\nvoid add(int x,int y,int z)\n{\n\tver[++tot]=y;\n\tnext[tot]=head[x];\n\thead[x]=tot;\n\tedge[tot]=z;\n}\nvoid dijkstra(int S)\n{\n\tmemset(d,0x3f,sizeof(d));\n\tmemset(v,0,sizeof(v));\n\td[S]=0;\n\tq.push(make_pair(0,S));\n\twhile(q.size())\n\t{\n\t\tint x=q.top().second; q.pop();\n\t\tif(v[x]) continue;\n\t\tv[x]=1;\n\t\tfor(int i=head[x];i;i=next[i])\n\t\t{\n\t\t\tint y=ver[i],z=edge[i];\n\t\t\tif(d[y]>d[x]+z)\n\t\t\t{\n\t\t\t\td[y]=d[x]+z;\n\t\t\t\tq.push(make_pair(-d[y],y));\t\n\t\t\t}\t\n\t\t}\t\n\t}\n}\nint main()\n{\n\tscanf(\"%d %d %d\",&n,&m,&x);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d %d %d\",&x,&y,&z);\n\t\tadd(x,y,z);\n\t}\n\tdijkstra(x);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\ta[++tot1]=d[i];\n\t}\n\tmemset(d,0x3f,sizeof(d));\n\tmemset(v,0,sizeof(v));\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tdijkstra(i);\n\t\tb[++tot2]=d[x];\n\t}\n\tfor(int i=1;i<=tot1;i++)\n\t{\n\t\tmaxx=max(maxx,a[i]+b[i]);\n\t}\n\tprintf(\"%d\",maxx);\n\treturn 0;\n}\n```\n\u5982\u6709\u4e0d\u5bf9\u7684\u5730\u65b9\uff0c\u8bf7\u5404\u4f4d\u5de8\u4f6c\u65a7\u6b63qwq\n\n~~\u597d\u50cf\u6570\u636e\u4e0d\u600e\u4e48\u6bd2\u7624\u5462~~",
        "postTime": 1571149025,
        "uid": 164233,
        "name": "\u5730\u8868\u6700\u840c\u732b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "\u660e\u660e\u53ef\u4ee5\u5199\u4e00\u6b21SPFA\uff08\u6216dij\uff09\u4e3a\u4ec0\u4e48\u8981\u5199\u4e24\u6b21\u5462\uff1f\n\n\u4ee5\u4e0b\u4ee3\u7801\u4e3b\u8981\u4f18\u8d8a\u5728\u62c6\u70b9\n\n###\u601d\u8def\n\n\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\uff0c\u53cc\u6570\u4e3a\u6b63\u5411\uff0c\u5355\u6570\u4e3a\u53cd\u5411\n\n\u4e0a\u4ee3\u7801\u03b5=\u03b5=\u03b5=(~\uffe3\u25bd\uffe3)~\n\n**SPFA\u7248**\n\n```cpp\ncpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int maxn=100100;\nconst int INF=0x3f3f3f3f;\nint x,a,b,c,n,m,d[maxn];\ninline int read(){\n    int k=0;char f=1;\n    char c=getchar();\n    while(c>'9'||c<'0'){\n        if(c=='-')f=-1;\n        c=getchar();\n    }\n    while(c<='9'&&c>='0'){\n        k=k*10+c-'0';\n        c=getchar();\n    }\n    return k*f;\n}\nint idx=0,e[maxn],ne[maxn],cost[maxn],h[maxn];\nbool in[maxn];\nvoid add(int a,int b,int c){\n    e[idx]=b;ne[idx]=h[a];cost[idx]=c;h[a]=idx++;\n}\nvoid SPFA(int s){\n    memset(in,false,sizeof(in));\n    queue<int>que;\n    que.push(s);\n    in[s]=true;\n    d[s]=0;\n    while(!que.empty()){\n        int u=que.front();que.pop();\n        in[u]=false;\n        for(int v=h[u];v!=-1;v=ne[v]){\n            if(d[e[v]]>d[u]+cost[v]){\n                d[e[v]]=d[u]+cost[v];\n                if(!in[e[v]]){\n                    in[e[v]]=true;\n                    que.push(e[v]);\n                }\n            }\n        }\n    }\n}\nint main(){\n    memset(h,-1,sizeof(h));\n    memset(d,INF,sizeof(d));\n    n=read();m=read();x=read();\n    for(register int i=1;i<=m;i++){\n        a=read();b=read();c=read();\n        add(a<<1,b<<1,c);add(b<<1|1,a<<1|1,c);\n    }\n    SPFA(x<<1|1);SPFA(x<<1);\n    int ans=-1;\n    for(register int i=1;i<=n;i++){\n        if(i==x)continue;\n        ans=max(d[i<<1]+d[i<<1|1],ans);\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n**dij\u7248**\n\n```cpp\ncpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int maxn=100100;\nconst int INF=0x3f3f3f3f;\nint x,a,b,c,n,m,d[maxn];\ninline int read(){\n    int k=0;\n    char f=1;\n    char c=getchar();\n    while(c>'9'||c<'0'){\n        if(c=='-')f=-1;\n        c=getchar();\n    }        \n    while(c<='9'&&c>='0'){\n        k=k*10+c-'0';\n        c=getchar();\n    }\n    return k*f;\n}\nint idx=0,e[maxn],ne[maxn],cost[maxn],h[maxn];\nvoid add(int a,int b,int c){\n    e[idx]=b;ne[idx]=h[a];cost[idx]=c;h[a]=idx++;\n}\nstruct node{\n    int pnt,dis;\n};\nstruct cmp{\n    bool operator () (const node &A,const node &B){\n        return A.dis<B.dis;\n    }\n};\nvoid dij(int s){\n    d[s]=0;\n    priority_queue<node,vector<node>,cmp>que;\n    que.push((node){s,0});\n    while(!que.empty()){\n        node q=que.top();que.pop();\n        int u=q.pnt,len=q.dis;\n        if(len>d[u])continue;\n        for(int v=h[u];v!=-1;v=ne[v]){\n            if(d[e[v]]>d[u]+cost[v]){\n                d[e[v]]=d[u]+cost[v];\n                que.push((node){e[v],d[e[v]]});\n            }\n        }\n    }\n    return;\n}\nint main(){\n    memset(h,-1,sizeof(h));\n    memset(d,INF,sizeof(d));\n    n=read();m=read();x=read();\n    for(register int i=1;i<=m;i++){\n        a=read();b=read();c=read();\n        add(a<<1,b<<1,c);add(b<<1|1,a<<1|1,c);\n    }\n    dij(x<<1|1);dij(x<<1);\n    int ans=-1;\n    for(register int i=1;i<=n;i++){\n        if(i==x)continue;\n        ans=max(d[i<<1]+d[i<<1|1],ans);\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1508329619,
        "uid": 35775,
        "name": "mjtlyzbsy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "\u5f88\u66b4\u529b\u5f88\u66b4\u529b\u7684\u5b8c\u5168\u4e24\u904dspfa\u6b63\u8dd1\u53cd\u8dd1\u3002\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nconst int MAXN=100000+5;\nstruct node1 {\n    int v,next,c;\n} a1[MAXN];\nstruct node2 {\n    int v,next,c;\n} a2[MAXN];\nqueue<int>q;\nint n,m,x,u,v,c,e1,e2,fa1,fa2,son1,son2,c1,c2;\nint head1[MAXN],head2[MAXN],dist1[MAXN],dist2[MAXN],fx1[MAXN],fx2[MAXN],ans[MAXN];\nbool pd1[MAXN],pd2[MAXN];\nvoid addnode(int u,int v,int c) {\n    e1++;\n    a1[e1].v=v;\n    a1[e1].c=c;\n    a1[e1].next=head1[u];\n    head1[u]=e1;\n}\nvoid addnodef(int u,int v,int c) {\n    e2++;\n    a2[e2].v=v;\n    a2[e2].c=c;\n    a2[e2].next=head2[u];\n    head2[u]=e2;\n}\nint spfa_1(int s,int t) {\n    memset(dist1,0x7f,sizeof(dist1));\n    memset(pd1,0,sizeof(pd1));\n    while(!q.empty()) q.pop();\n    q.push(s);\n    pd1[s]=true;\n    dist1[s]=0;\n    while(!q.empty()) {\n        int fa1=q.front();\n        q.pop();\n        pd1[fa1]=false;\n        for(int i=head1[fa1]; i; i=a1[i].next) {\n            int son1=a1[i].v;\n            int c1=a1[i].c;\n            if(dist1[fa1]+c1<dist1[son1]) {\n                dist1[son1]=dist1[fa1]+c1;\n                if(!pd1[son1]) {\n                    pd1[son1]=true;\n                    q.push(son1);\n                }\n            }\n        }\n    }\n    return dist1[t];\n}\nint spfa_2(int s,int t) {\n    memset(dist2,0x7f,sizeof(dist2));\n    memset(pd2,0,sizeof(pd2));\n    while(!q.empty()) q.pop();\n    q.push(s);\n    pd2[s]=true;\n    dist2[s]=0;\n    while(!q.empty()) {\n        int fa2=q.front();\n        q.pop();\n        pd2[fa2]=false;\n        for(int i=head2[fa2]; i; i=a2[i].next) {\n            int son2=a2[i].v;\n            int c2=a2[i].c;\n            if(dist2[fa2]+c2<dist2[son2]) {\n                dist2[son2]=dist2[fa2]+c2;\n                if(!pd2[son2]) {\n                    pd2[son2]=true;\n                    q.push(son2);\n                }\n            }\n        }\n    }\n    return dist2[t];\n}\nint main() {\n    cin>>n>>m>>x;\n    for(int i=1; i<=m; i++) {\n        cin>>u>>v>>c;\n        addnode(u,v,c);\n        addnodef(v,u,c);\n    }\n    for(int i=1; i<=n; i++)\n        fx1[i]=spfa_1(i,x);\n    while(!q.empty()) q.pop();\n    for(int i=1; i<=n; i++)\n        fx2[i]=spfa_2(i,x);\n    for(int i=1; i<=n; i++) ans[i]=fx1[i]+fx2[i];\n    cout<<*max_element(ans+1,ans+n+1)<<endl;\n    return 0;\n}\n```",
        "postTime": 1479278768,
        "uid": 26088,
        "name": "\u6807\u51c6\u975e\u6d32\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5728\u5bb6\u5199\u4e0d\u5bf9\u5728\u5b66\u6821\u5c31\u5199\u5bf9\u4e86233\n\n\u8fd9\u9053\u9898\u7b97\u6cd5\u660e\u663e\u662f\u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898\u3002\u5bf9\u4e8e\u5355\u7ec8\u70b9\u6700\u77ed\u8def\uff0c\u53ea\u9700\u8981\u5c06\u6bcf\u6761\u8fb9\u7ffb\u8f6c\u5c31\u53ef\u4ee5\u8f6c\u6362\u6210\u5355\u6e90\u6700\u77ed\u8def\u5f84\u95ee\u9898\n\n\u6211\u7528\u7684\u662fSPFA\u7b97\u6cd5\uff0c\u7ed9\u5927\u5bb6\u53c2\u8003\n\n\u00b7\u00b7\u00b7cpp\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\nusing namespace std;\nconst int N = 1005, M = 100005;\nint Head[N][2],Next[M][2],Adj[M][2],Weight[M],d[N][2],n,m,x,ans=-1;\nbool vis[N];\nqueue<int> Q;\nvoid addedge(int u, int v, int w, int i) { //\u52a0\u4e00\u6761\u6b63\u8fb9\u548c\u4e00\u6761\u53cd\u8f6c\u7684\u8fb9\n    Next[i][0] = Head[u][0];\n    Head[u][0]    = i;\n    Adj[i][0] = v;\n    Weight[i] = w;\n    Next[i][1] = Head[v][1];\n    Head[v][1] = i;\n    Adj[i][1] = u;\n}\nvoid SPFA(int t) {\n    d[x][t] = 0;\n    vis[x] = 1;\n    Q.push(x);\n    while(!Q.empty()) {\n        int f = Q.front();\n        Q.pop(); vis[f] = 0;\n        for(int e = Head[f][t]; e; e = Next[e][t]) {\n            int j = Adj[e][t];\n            if(d[j][t] > d[f][t] + Weight[e]) {\n                d[j][t] = d[f][t] + Weight[e];\n                if(!vis[j]) {\n                    vis[j] = 1;\n                    Q.push(j);\n                }\n            }\n        }\n    }\n}\nint main() {\n    scanf(\"%d%d%d\", &n, &m, &x);\n    for(int i = 1; i <= m; i++) {\n        int u, v, w;\n        scanf(\"%d%d%d\", &u, &v, &w);\n        addedge(u, v, w, i);\n    }\n    memset(d, 127/3, sizeof(d)); //\u521d\u59cb\u5316\u4e3a1<<30\n    SPFA(0); //\u5355\u6e90\u6700\u77ed\u8def\n    memset(vis, 0, sizeof(vis));\n    SPFA(1); //\u5355\u7ec8\u70b9\u6700\u77ed\u8def\n    for(int i = 1; i <= n; i++)\n        if(ans < d[i][0] + d[i][1])\n            ans = d[i][0] + d[i][1];\n    printf(\"%d\", ans);\n    return 0;\n}\n```\n\u00b7\u00b7\u00b7\n//\u5927\u6982\u5c31\u662f\u8fd9\u6837\u5427\n",
        "postTime": 1478400950,
        "uid": 9757,
        "name": "x_faraway_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "### \u8fd9\u662f\u4e00\u9053\u7ec3\u4e60\u6700\u77ed\u8def\u7684\u9898\u76ee\n\n\u7ed9p\u515a\u4e00\u4e2a\u6a21\u677f\u5427~\n\n\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e24\u79cd\u601d\u8def\n\n\n------------\n\n## 1. \u6700\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u66b4\u529b\u8dd1n\u904d\u6700\u77ed\u8def\u6765\u6a21\u62df\u9009\u62e9\u54ea\u4e2a\u7267\u573a\uff0c\u7136\u540e\u518d\u7edf\u8ba1\u7b54\u6848\n- \u8fd9\u6837\u505a\u7684\u8bdd\u5f88\u66b4\u529b\uff0c\u4e00\u822c\u4e0d\u53ef\u53d6\uff0c\u56e0\u4e3a\u666e\u901a\u7684dijkstra\u6216spfa\u80af\u5b9a\u4f1a\u8d85\u65f6\uff0c\u6240\u4ee5\u8981\u7528\u5806\u4f18\u5316\u7684dijkstra\u6216\u8005spfa\uff0c~~\u542c\u8bf4\u4f18\u5316\u540e\u7684\u6700\u77ed\u8def\u6bd4Floyd\u5feb\u3002\u3002\u3002~~\n\n\u6211\u8fd9\u91cc\u7528\u7684\u662f\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe+\u5806\u4f18\u5316\u7684dijkstra\n\n### p1821.pas\n------------\n```pascal\t\nvar\n        n,m,s,i,j,tot,v,head,bns,x,y,z:longint;\n        he,ne,t,w,cj,num,heap,bis,dis,ans:array[0..400010] of longint;\n        pd:array[0..1010,0..1010] of longint;\nfunction max(x,y:longint):longint;\nbegin\n        if x>y then exit(x) else exit(y);\nend;\nprocedure swap(var x,y:longint);\nvar\n        t:longint;\nbegin\n        t:=x;\n        x:=y;\n        y:=t;\nend;\nprocedure link(x,y,z:longint);\nbegin\n        inc(tot);\n        ne[tot]:=he[x];\n        he[x]:=tot;\n        t[tot]:=y;\n        w[tot]:=z;\nend;\nprocedure insert(a,x:longint);\nvar\n        i:longint;\nbegin\n        if cj[x]<>0 then begin\n                heap[cj[x]]:=a;\n                i:=cj[x];\n        end else begin\n                inc(heap[0]);\n                heap[heap[0]]:=a;\n                num[heap[0]]:=x;\n                i:=heap[0];\n                cj[x]:=heap[0];\n        end;\n        while (i>>1>0) and (heap[i]<heap[i>>1]) do begin\n                swap(cj[num[i]],cj[num[i>>1]]);\n                swap(heap[i],heap[i>>1]);\n                swap(num[i],num[i>>1]);\n                i:=i>>1;\n        end;\nend;\nprocedure del;\nvar\n        mid,i:longint;\nbegin\n        cj[num[1]]:=0;\n        heap[1]:=heap[heap[0]];\n        num[1]:=num[heap[0]];\n        dec(heap[0]);\n        i:=1;\n        if (heap[i<<1]<heap[i<<1+1]) or (i=heap[0]) then mid:=i<<1 else mid:=i<<1+1;\n        while (mid<=heap[0]) and (heap[mid]<heap[i]) do begin\n                swap(cj[num[i]],cj[num[mid]]);\n                swap(heap[i],heap[mid]);\n                swap(num[i],num[mid]);\n                i:=mid;\n                if (heap[i<<1]<heap[i<<1+1]) or (i<<1=heap[0]) then mid:=i<<1 else mid:=i<<1+1;\n        end;\nend;\nprocedure dij(x:longint);\nvar\n        i:longint;\nbegin\n        for i:=1 to n do dis[i]:=maxlongint;\n        dis[x]:=0;\n        head:=x;\n        heap[0]:=1;\n        heap[1]:=0;\n        num[1]:=x;\n        while heap[0]<>0 do begin\n                v:=he[head];\n                while v<>0 do begin\n                        if dis[t[v]]>dis[head]+w[v] then begin\n                                dis[t[v]]:=dis[head]+w[v];\n                                insert(dis[t[v]],t[v]);\n                        end;\n                        v:=ne[v];\n                end;\n                del;\n                head:=num[1];\n        end;\n        if x=s then for j:=1 to n do bis[j]:=dis[j] else ans[x]:=dis[s];\nend;\nbegin\n        readln(n,m,s);\n        for i:=1 to m do begin\n                read(x,y,z);\n                if (x=y) or (pd[x,y]=1) then continue;\n                pd[x,y]:=1;\n                link(x,y,z);\n        end;\n        for i:=1 to n do dij(i);\n        for i:=1 to n do bns:=max(bns,bis[i]+ans[i]);\n        writeln(bns);\nend.\n\n```\n\u603b\u5171\u8dd1\u4e86277ms\uff0c~~\u6570\u636e\u6709\u70b9\u3002\u3002\u3002~~\n\n\n------------\n2. \u7b2c\u4e8c\u79cd\u601d\u8def\u5c31\u662f\u6b63\u53cd\u5411\u5404\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u5c31\u884c\u4e86\n\n\u4e00\u6837\u7528\u7684\u662f\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe+\u5806\u4f18\u5316\u7684dijkstra\n\n### p1821(1).pas\n\n\n------------\n```pascal\nvar\n        n,m,s,i,j,tot,tot1,v,head,bns,x,y,z,ans:longint;\n        he,ne,t,w,cj,num,heap,bis,dis,he1,ne1,t1,w1,dis1:array[0..400010] of longint;\n        pd:array[0..1010,0..1010] of longint;\nfunction max(x,y:longint):longint;\nbegin\n        if x>y then exit(x) else exit(y);\nend;\nprocedure swap(var x,y:longint);\nvar\n        t:longint;\nbegin\n        t:=x;\n        x:=y;\n        y:=t;\nend;\nprocedure link1(x,y,z:longint);\nbegin\n        inc(tot);\n        ne[tot]:=he[x];\n        he[x]:=tot;\n        t[tot]:=y;\n        w[tot]:=z;\nend;\nprocedure link2(x,y,z:longint);\nbegin\n        inc(tot1);\n        ne1[tot1]:=he1[x];\n        he1[x]:=tot;\n        t1[tot1]:=y;\n        w1[tot1]:=z;\nend;\nprocedure insert(a,x:longint);\nvar\n        i:longint;\nbegin\n        if cj[x]<>0 then begin\n                heap[cj[x]]:=a;\n                i:=cj[x];\n        end else begin\n                inc(heap[0]);\n                heap[heap[0]]:=a;\n                num[heap[0]]:=x;\n                i:=heap[0];\n                cj[x]:=heap[0];\n        end;\n        while (i>>1>0) and (heap[i]<heap[i>>1]) do begin\n                swap(cj[num[i]],cj[num[i>>1]]);\n                swap(heap[i],heap[i>>1]);\n                swap(num[i],num[i>>1]);\n                i:=i>>1;\n        end;\nend;\nprocedure del;\nvar\n        mid,i:longint;\nbegin\n        cj[num[1]]:=0;\n        heap[1]:=heap[heap[0]];\n        num[1]:=num[heap[0]];\n        dec(heap[0]);\n        i:=1;\n        if (heap[i<<1]<heap[i<<1+1]) or (i=heap[0]) then mid:=i<<1 else mid:=i<<1+1;\n        while (mid<=heap[0]) and (heap[mid]<heap[i]) do begin\n                swap(cj[num[i]],cj[num[mid]]);\n                swap(heap[i],heap[mid]);\n                swap(num[i],num[mid]);\n                i:=mid;\n                if (heap[i<<1]<heap[i<<1+1]) or (i<<1=heap[0]) then mid:=i<<1 else mid:=i<<1+1;\n        end;\nend;\nprocedure dij(x:longint);\nvar\n        i:longint;\nbegin\n        for i:=1 to n do dis[i]:=maxlongint;\n        dis[x]:=0;\n        head:=x;\n        heap[0]:=1;\n        heap[1]:=0;\n        num[1]:=x;\n        while heap[0]<>0 do begin\n                v:=he[head];\n                while v<>0 do begin\n                        if dis[t[v]]>dis[head]+w[v] then begin\n                                dis[t[v]]:=dis[head]+w[v];\n                                insert(dis[t[v]],t[v]);\n                        end;\n                        v:=ne[v];\n                end;\n                del;\n                head:=num[1];\n        end;\nend;\nprocedure dij1(x:longint);\nvar\n        i:longint;\nbegin\n        for i:=1 to n do dis1[i]:=maxlongint;\n        dis1[x]:=0;\n        head:=x;\n        heap[0]:=1;\n        heap[1]:=0;\n        num[1]:=x;\n        while heap[0]<>0 do begin\n                v:=he1[head];\n                while v<>0 do begin\n                        if dis1[t1[v]]>dis1[head]+w1[v] then begin\n                                dis1[t1[v]]:=dis1[head]+w1[v];\n                                insert(dis1[t1[v]],t1[v]);\n                        end;\n                        v:=ne1[v];\n                end;\n                del;\n                head:=num[1];\n        end;\nend;\nbegin\n        readln(n,m,s);\n        for i:=1 to m do begin\n                read(x,y,z);\n                if (x=y) or (pd[x,y]=1) then continue;\n                pd[x,y]:=1;\n                link1(x,y,z);\n                link2(y,x,z);\n        end;\n        dij(s);\n        dij1(s);\n        for i:=1 to n do ans:=max(ans,dis[i]+dis1[i]);\n        writeln(ans);\nend.\n```\n60ms\n",
        "postTime": 1553438711,
        "uid": 113864,
        "name": "kfhkx",
        "ccfLevel": 0,
        "title": "P1821\u9898\u89e3"
    },
    {
        "content": "Bellman\u4ee3\u7801\u7b80\u77ed\uff0c\u6548\u7387\u4e5f\u4e0d\u7b97\u7279\u522b\u5dee\uff0c\u59a5\u59a5\u7684\u65b0\u4eba\u798f\u97f3\u554a~\n\n\u697c\u4e0a\u6709\u4f4d\u8001\u54e5\u7684\u60f3\u6cd5\u5f88\u68d2**\u53cd\u5411\u5b58\u8fb9\uff0c\u628a\u5355\u7ec8\u70b9\u95ee\u9898\u8f6c\u5316\u6210\u5355\u6e90\u95ee\u9898**\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e3+10,maxm=1e5+10;\nint n,m,X;\nint dis_tow[maxn],dis_bac[maxn];\nint tow_u[maxm],tow_v[maxm],tow_w[maxm];\nint bac_u[maxm],bac_v[maxm],bac_w[maxm];\n//toward\u8868\u793a\u53bb\uff0cback\u8868\u793a\u8fd4\u56de\nvoid Bell_F(int *dis,int *u,int *v,int *w,int St){\n    //\u6570\u7ec4\u6307\u9488\u505a\u53c2\u6570\uff0c\u4e0d\u5fc5\u5199\u4e24\u4efd\u51fd\u6570 \n    fill(dis+1,dis+n+1,0x3f3f3f3f);\n    dis[St]=0;\n    int k=n-1;\n    while(k--){\n        bool if_los=false;\n        for(int i=1;i<=m;i++){\n            int from=u[i],to=v[i],cost=w[i];\n            if(dis[to]>dis[from]+cost){\n                dis[to]=dis[from]+cost;\n                if_los=true;\n            }\n        }\n        if(!if_los) break;\n        //\u6ca1\u6709\u8fdb\u884c\u677e\u5f1b\uff0c\u5219\u9000\u51fa\u5faa\u73af \n    }\n}\nint main(){\n    cin>>n>>m>>X;\n    for(int i=1;i<=m;i++){\n        register int U,V,W;\n        scanf(\"%d%d%d\",&U,&V,&W);\n        tow_u[i]=bac_v[i]=U;\n        tow_v[i]=bac_u[i]=V;\n        //\u53cd\u5411\u5b58\u8fb9\uff0c\u628a\u5355\u7ec8\u70b9\u8f6c\u5316\u4e3a\u5355\u8d77\u70b9 \n        tow_w[i]=bac_w[i]=W;\n    }\n    Bell_F(dis_tow,tow_u,tow_v,tow_w,X);\n    Bell_F(dis_bac,bac_u,bac_v,bac_w,X);\n    int ans=0;\n    for(int i=1;i<=n;i++) ans=max(ans,dis_tow[i]+dis_bac[i]);\n    cout<<ans;\n    return 0;\n}\n\n```",
        "postTime": 1515678577,
        "uid": 38283,
        "name": "Dog_Two",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "**\u54e6\uff0c\u6700\u77ed\u8def\uff0c\u5927\u5bb6\u6700\u559c\u6b22\u5199\u4e86\uff0c\u65e9\u5c31\u660e\u767d\u8981\u60f3\u6210\u529f\u5c31\u5f97\u5199\u719f\u7ecf\u5178\u7b97\u6cd5\u3002**\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9i(i!=X)\uff0c\u5176\u5f80\u8fd4\u8ddd\u79bb\u4e3a(i,x)\u7684\u6700\u77ed\u8def+(x,i)\u7684\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u53ef\u4ee5\u6c42\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002 \u4f46\u7531\u4e8eN=1000\uff0c\u4f7f\u7528O(N^3)\u7684Floyd\u4f1a\u8d85\u65f6\u3002\u4ed4\u7ec6\u5206\u6790\u53d1\u73b0floyd\u4f1a\u6c42\u51fa\u5f88\u591a\u65e0\u7528\u7684\u4fe1\u606f\uff0c\u5176\u5b9e\u53ea\u8981\u5206\u522b\u6c42\u51fax\u5230\u5176\u4ed6\u6240\u6709\u70b9\u6cbf\u6b63\u5411\u8fb9\u548c\u53cd\u5411\u8fb9\u7684\u6700\u77ed\u8def\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f7f\u7528\u4e24\u6b21Dijkstra\u6216\u8005SPFA\uff0c\u80fd\u901a\u8fc7\u6240\u6709\u6d4b\u8bd5\u70b9\u3002\uff08\u5f53\u7136\u806a\u660e\u7684\u4f60\u80af\u5b9a\u80fd\u8003\u8651\u5230\u5176\u5b9e\u4e00\u6b21dj\u5185\u4e5f\u53ef\u4ee5\u6c42\u51fa\u4e24\u4e2a\u6700\u77ed\u8def\uff09\u3002\n\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <stdlib.h>\nusing namespace std;\nFILE *in = fopen(\"sparty.in\", \"r\"), *out = fopen(\"sparty.out\", \"w\");\nint n,m,p;\nint d[1000][1000];\n\nvoid store(int a, int b, int c) {\n    a--;b--;\n    if (d[a][b]==-1 || c<d[a][b]) d[a][b]=c;\n}\n\nbool visited[1000];\nint best1[1000];\nint best2[1000];\nvoid dijk1(void) {\n    int i,t,bt;\n    for (i=0;i<n;i++) {visited[i]=false; best1[i]=-1;}\n    best1[p]=0;\n    bool done;\n    while(true) {\n        done=true; bt=-1;\n        for (i=0;i<n;i++) {\n            if (!visited[i]&&best1[i]!=-1) {\n                if (bt==-1 || best1[i]<bt) {t=i;bt=best1[i];}\n                done=false;\n            }\n        }\n        if (done) break;\n        for (i=0;i<n;i++) {\n            if (d[t][i]!=-1)\n                if (best1[i]==-1 || best1[t]+d[t][i]<best1[i])\n                    best1[i]=best1[t]+d[t][i];\n        }\n        visited[t]=true;\n    }\n}\nvoid dijk2(void) {\n    int i,t,bt;\n    for (i=0;i<n;i++) {visited[i]=false; best2[i]=-1;}\n    best2[p]=0;\n    bool done;\n    while(true) {\n        done=true; bt=-1;\n        for (i=0;i<n;i++) {\n            if (!visited[i]&&best2[i]!=-1) {\n                if (bt==-1 || best2[i]<bt) {t=i;bt=best2[i];}\n                done=false;\n            }\n        }\n        if (done) break;\n        for (i=0;i<n;i++) {\n            if (d[i][t]!=-1)\n                if (best2[i]==-1 || best2[t]+d[i][t]<best2[i])\n                    best2[i]=best2[t]+d[i][t];\n        }\n        visited[t]=true;\n    }\n}\n\nint main(void) {\n    int i,j,a,b,c;\n    fscanf(in,\"%i %i %i\",&n,&m,&p); p--;\n    for (i=0;i<n;i++) for (j=0;j<n;j++) d[i][j]=-1;\n    for (i=0;i<m;i++) {\n        fscanf(in,\"%i %i %i\",&a,&b,&c);\n        store(a,b,c);\n    }\n    dijk1();\n    dijk2();\n    int r=0;\n    for (i=0;i<n;i++)\n    {\n        if (best1[i]+best2[i]>r)\n            r=best1[i]+best2[i];\n    }\n    fprintf(out,\"%i\\n\",r);\n    fclose(in); fclose(out); return 0;\n}\n```\n###\u91cd\u5728\u7406\u89e3\u9898\u610f\uff01\uff01\n",
        "postTime": 1479343366,
        "uid": 29095,
        "name": "Widerg",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "SPFA     \n## \u3010\u6ce8\u610f\u6ce8\u610f\u3011\n\u8fd9\u662f\u5355\u5411\u8def\u5355\u5411\u8def\u5355\u5411\u8def\uff01\uff01\uff01   \n\u91cd\u8981\u7684\u4e8b\u60c5\u8bf4\u4e09\u904d\uff01\uff01\uff01    \n\uff08\u9898\u76ee\u4e2d\u6ca1\u70b9\u51fa\u8fd9\u70b9\u4f46\u662f\u6211\u7684\u5168WA\u7ecf\u5386\u8ba9\u6211\u6df1\u523b\u7684\u8ba4\u8bc6\u5230\u4e86\u8fd9\u4e00\u70b9\uff09    \n## \u3010\u601d\u8def\u3011\n\u53bb\u548c\u6765\u8fd9\u662f\u4e24\u4e2a\u5b8c\u5168\u76f8\u53cd\u7684\u4e1c\u897f    \nSPFA\u8dd1\u4e00\u4e2a\u65b9\u5411\u662f\u5f88\u8f7b\u677e\u7684    \n\u7136\u540e\u53e6\u4e00\u4e2a\u65b9\u5411\u5c31\u5f88\u96be\u529e\u4e86    \n\u8be5\u600e\u4e48\u529e\u5462\uff1f    \nn\u904dSPFA\uff1f    \n\u4e0d\u592a\u53ef\u80fd\u8fd9\u5c31\u662f\u4e00\u9053\u9ec4\u9898    \n\u5bf9\u4e86\uff01\u53ef\u4ee5\u53cd\u5411\u5efa\u56fe\uff01    \n\u5c06\u65b9\u5411\u53cd\u8fc7\u6765\u5efa\u51fa\u6765\u7684\u56fe\u5c31\u662f\u5b8c\u5168\u76f8\u53cd\u7684    \n\u67d0\u4e2a\u70b9\u5230x\u7684\u8ddd\u79bb\u6070\u597d\u5c31\u662f\u56de\u5bb6\u7684\u6700\u77ed\u8ddd\u79bb    \n\u8fd9\u6837\u548c\u6b63\u5411\u5efa\u56fe\u4e00\u7ed3\u5408    \n\u5c31\u80fd\u6c42\u51fa\u53bb\u548c\u56de\u7684\u6700\u77ed\u8def\u5f84\u4e86    \n\u7136\u540e\u6bd4\u8f83\u6700\u5927\u7684\u548c    \n\u8f93\u51fa\u5c31\u597d\u4e86     \n## \u3010\u5b8c\u6574\u4ee3\u7801\u3011\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int Max = 100005;\nstruct node\n{\n\tint y;\n\tint ne;\n\tint z;\n}a1[Max << 1],a2[Max << 1];\nint n,m,x;\nconst int M = 1002;\nint head1[M],head2[M];\nint sum = 0;\nvoid add1(int x,int y,int z)\n{\n\ta1[++ sum].y = y;\n\ta1[sum].z = z;\n\ta1[sum].ne = head1[x];\n\thead1[x] = sum;\n}\nvoid add2(int x,int y,int z)\n{\n\ta2[++ sum].y = y;\n\ta2[sum].z = z;\n\ta2[sum].ne = head2[x];\n\thead2[x] = sum;\n}\n\nint d1[M],d2[M];\nbool use[M];\nvoid SPFA1()\n{\n\tmemset(use,false,sizeof(use));\n\tqueue<int>q;\n\tfor(register int i = 1;i <= n;++ i)\n\t\td1[i] = 999999;\n\td1[x] = 0;\n\tq.push(x);\n\twhile(!q.empty())\n\t{\n\t\tint qwq = q.front();\n\t\tq.pop();use[qwq] = false;\n\t\tfor(register int i = head1[qwq];i != 0;i = a1[i].ne)\n\t\t{\n\t\t\tint awa = a1[i].y;\n\t\t\tif(d1[awa] > d1[qwq] + a1[i].z)\n\t\t\t{\n\t\t\t\td1[awa] = d1[qwq] + a1[i].z;\n\t\t\t\tif(use[awa] == false)\n\t\t\t\t{\n\t\t\t\t\tuse[awa] = true;\n\t\t\t\t\tq.push(awa);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid SPFA2()\n{\n\tmemset(use,false,sizeof(use));\n\tqueue<int>q;\n\tfor(register int i = 1;i <= n;++ i)\n\t\td2[i] = 999999;\n\td2[x] = 0;\n\tq.push(x);\n\twhile(!q.empty())\n\t{\n\t\tint qwq = q.front();\n\t\tq.pop();use[qwq] = false;\n\t\tfor(register int i = head2[qwq];i != 0;i = a2[i].ne)\n\t\t{\n\t\t\tint awa = a2[i].y;\n\t\t\tif(d2[awa] > d2[qwq] + a2[i].z)\n\t\t\t{\n\t\t\t\td2[awa] = d2[qwq] + a2[i].z;\n\t\t\t\tif(use[awa] == false)\n\t\t\t\t{\n\t\t\t\t\tuse[awa] = true;\n\t\t\t\t\tq.push(awa);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&x);\n\tint xx,yy,zz;\n\tfor(register int i = 1;i <= m;++ i)\n\t{\n\t\tscanf(\"%d%d%d\",&xx,&yy,&zz);\n\t\tadd1(xx,yy,zz);\n\t\tadd2(yy,xx,zz);\n\t}\n\tSPFA1();\n\tSPFA2();\n\tint MM = 0;\n\tfor(register int i = 1;i <= n;++ i)\n\t\tMM = max(MM,d1[i] + d2[i]);\n\tcout << MM << endl;\n\treturn 0;\n}\n```",
        "postTime": 1571296332,
        "uid": 186489,
        "name": "EarthGiao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "\u6211\u7684\u601d\u8def\u662f\uff1a\u8dd1\u4e24\u904d\u6700\u77ed\u8def\uff0c\u7b2c\u4e00\u904d\u662f\u6309\u7167\u539f\u672c\u65b9\u5411\u7684\u8def\u7ebf\uff0c\u7b2c\u4e8c\u904d\u662f\u53cd\u8fc7\u6765\u7684\u8def\u7ebf\u3002\n\n\u5176\u5b9e\u5c31\u662f\u6572\u4e2aDijkstra+\u5806\u4f18\u7684\u677f\u5b50\uff0c\u52a0\u4e0a\u70b9\u7ec6\u8282\uff1a\u8bb0\u5f55\u8dd1\u7b2c\u4e00\u904d\u8def\u7ebf\u7684\u6bcf\u5934\u725b\u7684\u6700\u77ed\u8def\u7ebf\u4e3aans[]\uff0c\u7136\u540e\u6e05\u7a7a\u6570\u7ec4edge\uff0c\u4e0ehead\uff08\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u53cd\u8f6c\u4e00\u4e0b\u8fb9\u7684\u65b9\u5411\uff0c\u53ea\u9700\u8981\u628a\u539f\u6765\u7684\u8fb9\u90fd\u5220\u53bb\uff0c\u91cd\u65b0\u52a0\u4e0b\u8fb9\uff0c\u7136\u540e\u91cd\u65b0\u8dd1Dijkstra\uff0c\u6c42\u53cd\u8fc7\u6765\u65b9\u5411\u540e\u4ecest\u5230\u5404\u70b9\u7684\u6700\u77ed\u8def\u3002\n\u6700\u540e\u628aans[]\uff08\u53cd\u8f6c\u65b9\u5411\u4e4b\u524d\u6c42\u5f97\u7684\u6700\u77ed\u8def\uff09\u4e0edis[](\u53cd\u8f6c\u65b9\u5411\u7684\u6700\u77ed\u8def\uff09\u679a\u4e3e\u76f8\u52a0\u53d6max\u5373\u53ef\n```cpp\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <algorithm>\n#include <cstring>\nconst int maxn = 100010;\nconst int inf = 0x7fffffff;\nstruct node \n{\n\tint next,to,val;\n}edge[maxn];\nusing namespace std;\nint uu[maxn],head[1010],vv[maxn],ww[maxn],tot,n,m,st,ans[1010],dis[1010];\nbool vis[1010];\npriority_queue<pair<int,int> ,vector<pair<int,int> >,greater<pair<int,int> > >q;\nvoid add_edge(int u,int v,int w)\n{\n    edge[++tot].next=head[u];\n    edge[tot].to=v;\n    edge[tot].val=w;\n    head[u]=tot;\n}\nvoid Dijkstra()\n{\n\tfor(int i=1;i<=n;i++)dis[i]=inf,vis[i]=false;\n\tq.push(make_pair(0,st));\n\tdis[st]=0;\n\twhile(q.size())\n\t{\n\t\tint u = q.top().second;q.pop();\n\t\tif(vis[u])continue;\n\t\tvis[u]=true;\n\t\tfor(int i=head[u];i;i=edge[i].next)\n\t\t{\n\t\t\tint v = edge[i].to;\n\t\t\tif(!vis[v]&&dis[v]>dis[u]+edge[i].val)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+edge[i].val;\n\t\t\t\tq.push(make_pair(dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&st);\n\tfor(int i=1;i<=m;i++)\n\tscanf(\"%d%d%d\",&uu[i],&vv[i],&ww[i]),add_edge(uu[i],vv[i],ww[i]);\t\n\tDijkstra();\n\tfor(int i=1;i<=n;i++)ans[i]=dis[i];\n\ttot=0;\n\tmemset(head,0,sizeof(head));\n\tmemset(edge,0,sizeof(edge));\n\tfor(int i=1;i<=m;i++)add_edge(vv[i],uu[i],ww[i]);\n\tDijkstra();\n\tint maxs=0;\n\tfor(int i=1;i<=n;i++)maxs=max(dis[i]+ans[i],maxs);\n\tprintf(\"%d\",maxs);\n\treturn 0;\n } \n```\n\u5982\u6709\u4e0d\u61c2\uff0c\u8bf7\u79c1\u6211",
        "postTime": 1566961637,
        "uid": 116162,
        "name": "\u7fbd\u5107",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u76ee\u5b9e\u9645\u4e0a\u5df2\u7ecf\u6709\u8bb8\u591a\u597d\u7684\u9898\u89e3\u4e86\n\n~~\u6211\u518d\u53d1\u4e00\u7bc7\u4e5f\u53ea\u662f\u9526\u4e0a\u6dfb\u8471\u5495~~~~~\n\n\u5927\u591a\u6570\u4eba\u4f7f\u7528SPFA\u7684 \u4f46\u662f\u849f\u84bb\u5929\u5929\u542c\uff1aSPFA\u6b7b\u4e86\n\n\u4e8e\u662f\u7528\u7684\u662fDijkstra + \u5806\u4f18\u5316 \u548c vector\u5efa\u56fe \n\n~~\u8fd9\u4e2a\u7684\u597d\u5904\u662f\u5f00o2\u53ef\u4ee5\u5feb\u5f88\u591a~~\n\n\u6709\u7684\u4eba\u9700\u8981\u5199\u4e24\u4e2a\u51fd\u6570\u6765\u8dd1\n\n\u849f\u84bb\u7528\u7684\u662f\u5e26\u4e00\u4e2a\u53c2\u6570\uff08\u4e4b\u524d\u9898\u89e3\u4e5f\u6709\u4e86\uff09\n\n\u8fd9\u4e2a\u53c2\u6570\u8868\u793a\u7684\u662f\u8dd1\u6b63\u5411\u5efa\u56fe\u6216\u662f\u53cd\u5411\u5efa\u56fe\n\n\u8bf4\u8d77\u6765\u5f88\u62d7\u53e3 \u4f46\u662f\u53c2\u8003\u4ee3\u7801\u7406\u89e3\u5c31\u5f88\u7b80\u5355\u4e86\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u53cd\u5411\u5efa\u56fe \u849f\u84bb\u770b\u89c1\u6709\u4eba\u5728\u95ee\n\n\u8bb8\u591a\u9898\u89e3\u4e5f\u6ca1\u7ed9\u51fa\u5f88\u597d\u7684\u89e3\u91ca\n\n\u60f3\u4e00\u4e0b\uff1a\u4ece\u6240\u6709\u70b9\u5230x \u8ddf x\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \u4e3a\u4ec0\u4e48\u4f1a\u4e0d\u4e00\u6837\n\n\u663e\u7136\u56e0\u4e3a\u662f\u56fe\u662f\u6709\u5411\u7684 \uff08\u65e0\u5411\u7684\u5c31\u662f\u4e00\u6837\u7684 \u56e0\u4e3a\u53ef\u4ee5\u539f\u8def\u8fd4\u56de\uff09\n\n\u90a3\u4e48 \u60f3\u6c42\u6240\u6709\u70b9\u5230x\u7684\u8ddd\u79bb\u7684\u8bdd\n\n\u628a\u6240\u6709\u56fe\u53cd\u7740\u5efa\u4e00\u904d \u4ecex\u8dd1 \n\n\u5c31\u76f8\u5f53\u4e8e\u4ecex\u539f\u8def\u8fd4\u56de\u5230\u6240\u6709\u70b9\n\n\u6700\u540e\u8d34\u4e2a\u4ee3\u7801\n\n\u592a\u4e11\u52ff\u55b7\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvector <int> d[2][1005];\nvector <int> e[2][1005];\nint dis[2][1005];\nbool vis[1005];\nint n,m,s;\npriority_queue<pair<int,int> > q;\nvoid dj(int Q)\n{\n    int temp,y,z;\n    memset(vis,0,sizeof(vis));\n    dis[Q][s]=0;\n    q.push(make_pair(0,s));\n    while(!q.empty())\n    {\n        temp=q.top().second;\n        q.pop();\n        if(vis[temp]) continue;\n        vis[temp]=1;\n        for(int i=0;i<d[Q][temp].size();i++)\n        {\n            y=d[Q][temp][i]; z=e[Q][temp][i];\n            if(dis[Q][y]>dis[Q][temp]+z)\n            {\n                dis[Q][y]=dis[Q][temp]+z;\n                q.push(make_pair(-dis[Q][y],y));\n            }\n        } \n    }\n}\nint main() {\n    int x,y,z,ans=0;\n    cin>>n>>m>>s;\n    memset(dis,0x3f,sizeof(dis));\n    for(int i=1;i<=m;i++)\n    {\n        cin>>x>>y>>z;\n        d[0][x].push_back(y);\n        e[0][x].push_back(z);\n        d[1][y].push_back(x);\n        e[1][y].push_back(z);\n    }\n    dj(0); dj(1);\n    for(int i=1;i<=n;i++)\n    ans=max(dis[0][i]+dis[1][i],ans);\n    cout<<ans<<endl;\n    return 0;\n}\n```\n",
        "postTime": 1558328534,
        "uid": 100114,
        "name": "hater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "\u4e3b\u8981\u601d\u8def:\u5bf9\u4e8e\u6709\u5411\u56fe\uff0c\u53ea\u8981\u53cd\u5411\u5efa\u8fb9\u8dd1\u6700\u77ed\u8def\u5c31\u884c  \n~~\u65e2\u7136\u8981\u8dd1\u4e24\u6b21\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u4e00\u6b21dijk\uff0c\u4e00\u6b21spfa\u5462\uff08\u7ec3\u624b\uff09~~  \n\u4e0a\u4ee3\u7801  \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#define N 1010\n#define M 100010 \nusing namespace std;\nint n,m,head[N],rhead[N],tot,rtot,d1[N],d2[N],ans,s;\nbool vis[N];\nstruct Edge{\n\tint v,next,val;\n}edge[M],redge[M];\ninline int read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();\n\t}while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();\n\t}return  x*f;\n}\ninline void add1(int x,int y,int z){edge[++tot].v=y;edge[tot].val=z;edge[tot].next=head[x];head[x]=tot;}\ninline void add2(int x,int y,int z){redge[++rtot].v=y;redge[rtot].val=z;redge[rtot].next=rhead[x];rhead[x]=rtot;}\nvoid dijk(int x){\n\tpriority_queue<pair<int,int> >q;\n\tmemset(d1,0x3f,sizeof(d1));\n\tq.push(make_pair(0,x));d1[x]=0;\n\twhile(q.size()){\n\t\tint u=q.top().second;q.pop();\n\t\tif(vis[u])continue;\n\t\tvis[u]=1;\n\t\tfor(int i=head[u];i;i=edge[i].next){\n\t\t\tint v=edge[i].v,z=edge[i].val;\n\t\t\tif(d1[v]>d1[u]+z){\n\t\t\t\td1[v]=d1[u]+z;\n\t\t\t\tq.push(make_pair(-d1[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nvoid spfa(int x){\n\tqueue<int>q;\n\tmemset(d2,0x3f,sizeof(d2));\n\tmemset(vis,0,sizeof(vis));\n\tq.push(x);vis[x]=1;d2[x]=0;\n\twhile(q.size()){\n\t\tint u=q.front();q.pop();vis[u]=0;\n\t\tfor(int i=rhead[u];i;i=redge[i].next){\n\t\t\tint v=redge[i].v,z=redge[i].val;\n\t\t\tif(d2[v]>d2[u]+z){\n\t\t\t\td2[v]=d2[u]+z;\n\t\t\t\tif(!vis[v])q.push(v),vis[v]=1; \n\t\t\t} \n\t\t}\n\t}\n\t\n}\nint main()\n{\n\tn=read(),m=read(),s=read();\n\tfor(int i=1;i<=m;i++){\n\t\tint x=read(),y=read(),z=read();\n\t\tadd1(x,y,z);add2(y,x,z); \n\t} \n\tdijk(s);\n\tspfa(s);\n\tfor(int i=1;i<=n;i++)\n\t\tans=max(ans,d1[i]+d2[i]);\n\tprintf(\"%d\\n\",ans); \n\treturn 0;\n}\n\n```\n",
        "postTime": 1555063202,
        "uid": 88733,
        "name": "Zekrom",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "\u601d\u8def\u697c\u4e0b\u90fd\u8bf4\u7684\u5f88\u6e05\u695a\u4e86,\u5728\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bf4\u4e86,\u4e00\u4e2a\u5355\u6e90\u6700\u77ed\u8def,\u4e00\u4e2a\u5355\u91cd\u70b9\u6700\u77ed\u8def,\u6b63\u53cd\u56fe\u5404\u8dd1\u4e00\u904d.\u770b\u5230\u697c\u4e0b\u90fd\u662f\u5199\u4e24\u4e2a\u51fd\u6570\u7684\uff0c,\u6216\u8005\u62c6\u8fb9\uff0c\u5bf9\u4e8e\u672c\u849f\u84bb\u6765\u8bf4\u8fd9\u6837\u5199\u5bb9\u6613\u641e\u9519\u53d8\u91cf\u540d,\u6240\u4ee5\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u51cf\u5c0f\u4ee3\u7801\u91cf\u5e76\u4e14\u4e0d\u5bb9\u6613\u641e\u6df7\u53d8\u91cf\u540d\u7684\u5199\u6cd5:\u628a\u56fe\u505a\u6210\u7ed3\u6784\u4f53\uff0c\u5c01\u88c5\u4e00\u4e0b\uff0c\u8fd9\u6837\u5199\u4e00\u904d\u5c31\u591f\u4e86\uff0c\u5efa\u5b8c\u56fe\u76f4\u63a5\u8c03\u7528\uff0c\u8d3c\u65b9\u4fbf\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define INF 0x3f3f3f3f\n#define MAXN 1000+10\n#define MAXM 100000+10\nusing namespace std;\nint read(){\n\tint out=0;\n\tchar c=getchar();\n\twhile(c<48||c>57) c=getchar();\n\twhile(c<=57&&c>=48){\n\t\tout=(out<<1)+(out<<3)+c-48;\n\t\tc=getchar();\n\t}\n\treturn out;\n}\nvoid write(int x){\n\tif(x>9) write(x/10);\n\tputchar(x%10+48);\n}\nint n,m,x;\nstruct Edge{int v,w,next;};\nstruct Node{\n\tint id,d;\n\tbool operator<(const Node a)const{\n\t\treturn d>a.d;\n\t}\n};\nstruct G{//\u56fe\u7684\u7ed3\u6784\u4f53\n\tEdge edge[MAXM];\n\tint cnt;\n\tint dis[MAXN],head[MAXN];//\u4e0d\u7528\u62c5\u5fc3\u53d8\u91cf\u540d\u51b2\u7a81\n\tvoid init(){//\u94fe\u5f0f\u524d\u5411\u661f\u7684\u51c6\u5907\n\t\tcnt=0;\n\t\tmemset(head,-1,sizeof(head));\n\t}\n\tinline void addedge(int u,int v,int w){//\u52a0\u8fb9\n\t\tedge[++cnt].v=v;\n\t\tedge[cnt].w=w;\n\t\tedge[cnt].next=head[u];\n\t\thead[u]=cnt;\n\t}\n\tvoid dij(){//\u6700\u77ed\u8def\n\t\tmemset(dis,INF,sizeof(dis));\n\t\tpriority_queue<Node>q;\n\t\tq.push(Node{x,0});\n\t\tdis[x]=0;\n\t\twhile(!q.empty()){\n\t\t\tNode temp=q.top();\n\t\t\tq.pop();\n\t\t\tint u=temp.id;\n\t\t\tint d=temp.d;\n\t\t\tif(d!=dis[u]) continue;\n\t\t\tfor(int i=head[u];i!=-1;i=edge[i].next){\n\t\t\t\tint v=edge[i].v,w=edge[i].w;\n\t\t\t\tif(dis[v]>dis[u]+w){\n\t\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\t\tq.push(Node{v,dis[v]});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}g1,g2;//\u5efa\u4e24\u4e2a\u56fe,\u4e00\u4e2a\u6b63\u5411\u8fb9\u4e00\u4e2a\u53cd\u5411\nvoid init(){\n\tn=read();\n\tm=read();\n\tx=read();\n\tg1.init();\n\tg2.init();\n\tfor(int i=1;i<=m;++i){\n\t\tint u=read();\n\t\tint v=read();\n\t\tint w=read();\n\t\tg1.addedge(u,v,w);//g1\u662f\u6b63\u5411\u56fe\n\t\tg2.addedge(v,u,w);//g2\u662f\u53cd\u5411\u56fe\n\t}\n}\nint d[MAXN];\nint main(){\n\tinit();\n\tg1.dij();\n\tg2.dij();\n\tint ans=0;\n\tfor(int i=1;i<=n;++i){\n\t\td[i]=g1.dis[i]+g2.dis[i];//\u76f4\u63a5\u7d2f\u52a0\u5c31ok\n\t\tans=max(d[i],ans);\n\t}\n\twrite(ans);\n\treturn 0;\n}\n```",
        "postTime": 1540946246,
        "uid": 49756,
        "name": "Anakin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "SLF\u4f18\u5316\u7684SPFA\u53ef\u8fc7\u3002\n\n\u5efa\u7acb\u53cd\u56fe\u6c42\u725b\u53bb\u7a0b\u65f6\uff08\u4ee3\u7801\u4e2d\u4e3a\u4e0b\u6807\u4e3a1\u7684\u6570\u7ec4\uff09\u7684\u6700\u77ed\u8def\u5f84\n\n\u5efa\u7acb\u6b63\u56fe\u6c42\u725b\u8fd4\u7a0b\u65f6\uff08\u4ee3\u7801\u4e2d\u4e3a\u4e0b\u6807\u4e3a2\u7684\u6570\u7ec4\uff09\u7684\u6700\u77ed\u8def\u5f84\n\nopt\u4e3a\u76f8\u5e94\u7684\u64cd\u4f5c\u7b26\u53f7\uff0c\u7b49\u4e8e1\u65f6\u6c42\u53bb\u7a0b\uff0c\u7b49\u4e8e2\u65f6\u6c42\u8fd4\u7a0b\n\n```cpp\n//1\u4e3a\u53cd\u56fe\u6c42\u53bb\u65f6\uff0c2\u4e3a\u6b63\u56fe\u6c42\u56de\u65f6 \n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n#define MAXN 1005\n#define MAXM 500005\nusing namespace std;\nint n, m, X, num_edge[3], maxx = -2147483647; //1\u4e3a\u53cd\u56fe\uff0c2\u4e3a\u6b63\u56fe\nint head[3][MAXN], dis[5][MAXN];\nbool in_queue[MAXN];\nstruct add\n{\n\tint to, len ,next;\n}edge[3][MAXM];\ninline int read()\n{\n\tint sum = 0, flag = 1;\n\tchar c = getchar();\n\twhile(!isdigit(c))\n\t{\n\t\tif(c == '-') flag = -1;\n\t\tc = getchar();\n\t}\n\twhile(isdigit(c))\n\t{\n\t\tsum = (sum<<3)+(sum<<1)+(c&15);\n\t\tc = getchar();\t\n\t}\n\treturn sum*flag;\n}\ninline void add_edge(int from, int to, int len, int opt)\n{\n\tedge[opt][++num_edge[opt]].to = to;\n\tedge[opt][num_edge[opt]].len = len;\n\tedge[opt][num_edge[opt]].next = head[opt][from];\n\thead[opt][from] = num_edge[opt];\n}\ninline void spfa(int s, int opt)\n{\n\tmemset(in_queue, 0, sizeof in_queue);\n\tdis[opt][s] = 0;\n\tdeque<int> q;\n\tq.push_back(s);\n\tin_queue[s] = 1;\n\twhile(!q.empty())\n\t{\n\t\tint u = q.front(); q.pop_front();\n\t\tin_queue[u] = 0;\n\t\tfor(int i=head[opt][u]; i; i=edge[opt][i].next)\n\t\t{\n\t\t\tint v = edge[opt][i].to;\n\t\t\tif(dis[opt][v] > dis[opt][u]+edge[opt][i].len)\n\t\t\t{\n\t\t\t\tdis[opt][v] = dis[opt][u]+edge[opt][i].len;\n\t\t\t\tif(!in_queue[v])\n\t\t\t\t{\n\t\t\t\t\tif(!q.empty() && dis[opt][v] < dis[opt][q.front()])\n\t\t\t\t\t\tq.push_front(v);\n\t\t\t\t\telse q.push_back(v);\n\t\t\t\t\tin_queue[v] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tn = read(), m = read(), X = read();\n\tfor(int i=1; i<=m; ++i)\n\t{\n\t\tint x = read(), y = read(), z = read();\n\t\tadd_edge(y, x, z, 1);\n\t\tadd_edge(x, y, z, 2);\n\t}\n\tmemset(dis, 0x3f, sizeof dis);\n\tspfa(X, 1);\n\tspfa(X, 2);\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tdis[3][i] = dis[1][i]+dis[2][i];\n\t\tmaxx = max(maxx, dis[3][i]);\n\t} //dis3\u5b58\u5f80\u8fd4\u5168\u7a0b\u6700\u77ed\u8def\u5f84\n\tprintf(\"%d\\n\", maxx);\n\treturn 0;\t\n}\n```",
        "postTime": 1533387777,
        "uid": 68001,
        "name": "AugustineYang",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "\u524d\u6bb5\u65f6\u95f4\u5b66\u6821\u8003\u8bd5\u5199\u7684\u8fd9\u9053\u9898\u7684\u4ee3\u7801\u627e\u4e0d\u5230\u4e86QwQ,\u6211\u5f53\u65f6\u8fd8\u56e0\u4e3a\u628afreopen\u91cc\u7684party\u6253\u6210patry\u5c11\u5f97\u4e86100\u5206......\n\n\u597d\u4e86\u4e0d\u626f\u728a\u5b50\u4e86\u3002\u5404\u4e2a\u70b9\u725b\u4eec\u8981\u53bb\u5230\u67d0\u4e00\u4e2a\u70b9\u518d\u56de\u5230\u81ea\u5df1\u5bb6\uff08\u6709\u5411\u56fe\uff09\uff0c\u56de\u6765\u5f88\u663e\u7136\u5c31\u662f\u4e00\u4e2a\u88f8\u7684\u5355\u6e90\u6700\u77ed\u8def\uff0cdijkstra\u4e0d\u4f18\u5316\u90fd\u53ef\u4ee5\uff1b\u4f46\u662f\u53bb\u7684\u8bdd\u6709\u4e9b\u9ebb\u70e6\u3002\u4ed4\u7ec6\u60f3\u4e00\u4e0b\u4e4b\u540e\u53d1\u73b0\u53ea\u8981\u628a\u6240\u6709\u7684\u8fb9\u5168\u90e8\u53cd\u8fc7\u6765\uff0c\u518d\u4ece\u5f00party\u7684\u5730\u70b9\u8d70\u4e00\u904ddijkstra\u4e0d\u5c31\u662f\u725b\u4eec\u53bb\u5f00party\u7684\u603b\u8def\u5f84\u548c\u4e86\u5417\u3002\n\n\u524d\u540e\u4e24\u4e2a\u6700\u77ed\u8def\u5f84\u548c\u76f8\u52a0\u5373\u4e3a\u7b54\u6848\uff0c\u4ee3\u7801\u62bd\u7a7a\u5199\u4e0b\u518d\u8d34\u4e0a\u6765\u5427\uff0c\n",
        "postTime": 1478402898,
        "uid": 23431,
        "name": "\u539f\u5b50\u5206\u5b50\u5976\u5b50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "floyd\u7b97\u6cd5 O\uff08n3\uff09\u771f\u5047\u7684\u80fd\u8fc7\u5440\n\nn\u6b21heapdijkstra O(n m log n\uff09\u4e5f\u4e0d\u89c1\u5f97floyd\u5feb\n\n\u4ee5\u4e0a\u4e24\u79cd\u7b97\u6cd5\u80fd\u8fc7\u591a\u534a\u56e0\u4e3a\u662f\u6570\u636e\u6c34\n\n\u5176\u5b9e\u6211\u4eec\u6ce8\u610f\u5230\u56de\u5bb6\u7684\u6700\u77ed\u8def\u5f88\u597d\u627e\uff0c\u5173\u952e\u5c31\u662f\u53bb\u6d3e\u5bf9\u7684\u8def\u5f84\uff0c\u82e5\u662f\u4e00\u4e2a\u4e2a\u70b9dij\uff0c\u6216\u662ffloyd\uff0c\u90a3\u4e0d\u662f\u5927\u6750\u5c0f\u7528\u5417\n\n\u5176\u5b9e\u6211\u4eec\u53ea\u8981\u5c06\u6240\u6709\u8def\u5f84\u53cd\u8fc7\u6765\uff0c\u7136\u540e\u518d\u8dd1\u4e00\u6b21\u4ee5\u6d3e\u5bf9\u70b9\u4e3a\u6e90\u8282\u70b9\u7684\u6700\u77ed\u8def\uff0c\u5c31\u80fd\u8f7b\u677e\u7b97\u51fa\u6b63\u5e38\u60c5\u51b5\u4e0b\u6240\u6709\u70b9\u53bb\u6d3e\u5bf9\u7684\u6700\u77ed\u8def\n\n\u65f6\u95f4\u590d\u6742\u5ea6O\uff08n2\uff09\uff0c\u81ea\u6d4b\u80fd\u8dd1\u51fa\u51e0\u5341\u500d\u4e8e\u5f00\u5934\u7b97\u6cd5\u7684\u901f\u5ea6\n\n\n\n\n\n\n```cpp\n//adj list\ntype\n  adj=record\n    too,last,wei:longint;\n  end;\nvar\n  edge,unedge:array[1..100000] of adj;\n  unhead,head,a,min,sum:array[1..1000] of longint;\n  nedge,v,e,i,j,x,y,z,point,num,minw,minv,max:longint;\nprocedure add(a,b,w:longint);\nbegin\n  inc(nedge);\n  edge[nedge].last:=head[a];\n  edge[nedge].too:=b;\n  edge[nedge].wei:=w;\n  head[a]:=nedge;\nend;\nprocedure unadd(a,b,w:longint);\nbegin\n  unedge[nedge].last:=unhead[a];\n  unedge[nedge].too:=b;\n  unedge[nedge].wei:=w;\n  unhead[a]:=nedge;\nend;\nprocedure readin;\nbegin\n  read(v,e,point);\n  nedge:=0;\n  fillchar(head,sizeof(head),0);\n  for i:=1 to e do\n  begin\n    read(x,y,z);\n    add(x,y,z);\n    unadd(y,x,z);\n  end;\nend;\nbegin\n  readin;\n  fillchar(a,sizeof(a),0);\n  for i:=1 to v do\n  min[i]:=maxlongint;\n  a[point]:=1;\n  num:=1;\n  min[point]:=0;\n  x:=head[point];\n  while (x>0) do\n  begin\n    min[edge[x].too]:=edge[x].wei;\n    x:=edge[x].last;\n  end;\n  while num<v do\n  begin\n    minw:=maxlongint;\n    for i:=1 to v do\n    if (a[i]=0) and (min[i]<minw) then\n    begin\n      minv:=i;\n      minw:=min[i];\n    end;\n    x:=head[minv];\n    while (x>0) do\n    begin\n      if min[edge[x].too]>edge[x].wei+min[minv] then\n      min[edge[x].too]:=edge[x].wei+min[minv];\n      x:=edge[x].last;\n    end;\n    inc(num);\n    a[minv]:=1;\n  end;\n  for i:=1 to v do\n  sum[i]:=min[i];\n  fillchar(a,sizeof(a),0);\n  for i:=1 to v do\n  min[i]:=maxlongint;\n  a[point]:=1;\n  num:=1;\n  min[point]:=0;\n  x:=unhead[point];\n  while (x>0) do\n  begin\n    min[unedge[x].too]:=unedge[x].wei;\n    x:=unedge[x].last;\n  end;\n  while num<v do\n  begin\n    minw:=maxlongint;\n    for i:=1 to v do\n    if (a[i]=0) and (min[i]<minw) then\n    begin\n      minv:=i;\n      minw:=min[i];\n    end;\n    x:=unhead[minv];\n    while (x>0) do\n    begin\n      if min[unedge[x].too]>unedge[x].wei+min[minv] then\n      min[unedge[x].too]:=unedge[x].wei+min[minv];\n      x:=unedge[x].last;\n    end;\n    inc(num);\n    a[minv]:=1;\n  end;\n  for i:=1 to v do\n  sum[i]:=sum[i]+min[i];\n  max:=0;\n  for i:=1 to v do\n  if sum[i]>max then\n  max:=sum[i];\n  write(max);\nend.\n```",
        "postTime": 1472970519,
        "uid": 9791,
        "name": "\u6c5f\u6d77\u5bc4\u4f59\u751f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "\u4f7f\u7528n\u6b21Heap\u4f18\u5316\u7684Dijkstra\u7b97\u6cd5\u5373\u53ef\uff0c\u8fd9\u6837\u6548\u7387\u6bd4floyd\u8981\u9ad8\u3002\n\n```cpp\n\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<queue>\n#define maxn 1005\nusing namespace std;\ntypedef pair<int,int> pii;\nstruct Edge{\n    int from,to,dist;\n};\nvector<Edge> G[maxn];//\u5229\u7528vector\u6570\u7ec4\u6765\u50a8\u5b58\u6bcf\u4e00\u6761\u8fb9\nint d[maxn],dx[maxn],ans[maxn];\nbool vis[maxn];\npriority_queue<pii,vector<pii>,greater<pii> > q;//\u6709\u9650\u961f\u5217\nint main()\n{\n    int n,m,x,i,j,u,v,w,X=0;\n    scanf(\"%d%d%d\",&n,&m,&x);\n    for(i=0;i<m;i++)\n    {\n        scanf(\"%d%d%d\",&u,&v,&w);\n        G[u].push_back((Edge){u,v,w});\n    }\n    for(i=1;i<=n;i++)\n    {\n        memset(d,0x3f,sizeof(d));\n        memset(vis,0,sizeof(vis));\n        d[i]=0;\n        q.push(make_pair(0,i));\n        while(!q.empty())\n        {\n            u=q.top().second;\n            q.pop();\n            if(vis[u])continue;\n            vis[u]=1;//\u8bbf\u95ee\u6807\u8bb0\n            for(j=0;j<G[u].size();j++)\n            {\n                Edge &e=G[u][j];\n                if(d[e.to]>d[u]+e.dist)\n                {\n                    d[e.to]=d[u]+e.dist;\n                    q.push(make_pair(d[e.to],e.to));\n                }\n            }\n        }\n        if(i==x)\n            memcpy(dx,d,sizeof(d));\n        ans[i]=d[x];\n    }\n    for(i=1;i<=n;i++)\n        X=max(ans[i]+dx[i],X);//\u6bd4\u8f83\u7b54\u6848\n    printf(\"%d\",X);\n    return 0;\n}\n\n```",
        "postTime": 1446185161,
        "uid": 977,
        "name": "sfd158",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://xiaohuang888.github.io/2019/12/11/%E3%80%8CLuogu%201821%E3%80%8D[USACO07FEB]%E9%93%B6%E7%89%9B%E6%B4%BE%E5%AF%B9Silver%20Cow%20Party/)\n\n### Solution\n\n\u9898\u76ee\u8ba9\u6211\u4eec\u4e00\u4e9b\u5976\u725b\u8d70\u5230\u4e00\u4e2a\u70b9\uff0c\u518d\u4ece\u90a3\u4e2a\u70b9\u8d70\u56de\u6765\u7684\u6700\u77ed\u8def\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u7528`dijkstra`\u8ba1\u7b97\u4e24\u6b21\u6700\u77ed\u8def\uff08\u8d70\u8fc7\u53bb\uff0c\u8d70\u56de\u6765\uff09\u5c31\u53ef\u4ee5\u4e86\uff0c\u6700\u540e\u5224\u65ad\u4e00\u4e0b\uff0c\u90a3\u5934\u5976\u725b\u9700\u8981\u8d70\u7684\u8def\u662f\u6700\u957f\u7684\uff0c\u7136\u540e\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\u3002\n\n### Code\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<queue>\n\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f, MAXN = 200005;\nstruct EDGE {\n    int nxt, to, val;\n} edge[MAXN];\nint n, m, S, cnt, U[MAXN], V[MAXN], VAL[MAXN], dis[MAXN], dist[MAXN], head[MAXN];\nbool vis[MAXN];\ninline void addedge(int u, int v, int val) {//\u90bb\u63a5\u8868\u5b58\u56fe\n    edge[++cnt].to = v; edge[cnt].val = val; edge[cnt].nxt = head[u]; head[u] = cnt;\n}\ninline void dijkstra(int S) {//dijkstra\u6700\u77ed\u8def\n    memset(dis, INF, sizeof(dis));\n    priority_queue< pair<int, int> > Q;\n    Q.push(make_pair(0, S));\n    dis[S] = 0;\n    while (!Q.empty()) {\n        int u = Q.top().second;\n        Q.pop();\n        if (vis[u]) continue;\n        vis[u] = 1;\n        for (int i = head[u]; ~i; i = edge[i].nxt) {\n            int v = edge[i].to;\n            if (dis[v] > dis[u] + edge[i].val) {\n                dis[v] = dis[u] + edge[i].val;\n                Q.push(make_pair(-dis[v], v));\n            }\n        }\n    }\n}\nint main() {\n    scanf(\"%d%d%d\", &n, &m, &S);\n    memset(head, -1, sizeof(head));\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%d%d%d\", &U[i], &V[i], &VAL[i]);\n        addedge(U[i], V[i], VAL[i]);//\u6b63\u5411\u5efa\u56fe\n    }\n    dijkstra(S);\n    for (int i = 1; i <= n; i++)\n        dist[i] = dis[i];//\u8bb0\u5f55\u8d70\u5230\u76ee\u6807\u70b9\u7684\u8def\u7a0b\n    cnt = 0;\n    memset(edge, 0, sizeof(edge));\n    memset(vis, 0, sizeof(vis));\n    memset(head, -1, sizeof(head));//\u6ce8\u610f\u6e05\u7a7a\u6570\u7ec4\n    for (int i = 1; i <= m; i++)\n        addedge(V[i], U[i], VAL[i]);//\u53cd\u5411\u5efa\u56fe\n    dijkstra(S);\n    int Max = -INF;\n    for (int i = 1; i <= n; i++)\n        Max = max(Max, dis[i] + dist[i]);//\u5224\u65ad\u90a3\u4e2a\u5976\u725b\u662f\u8d70\u5f97\u6700\u591a\u7684\n    printf(\"%d\\n\", Max);\n    return 0;\n}\n```",
        "postTime": 1569501879,
        "uid": 19729,
        "name": "xiaohuang",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1821 \u3010[USACO07FEB]\u94f6\u725b\u6d3e\u5bf9Silver Cow Party\u3011"
    }
]