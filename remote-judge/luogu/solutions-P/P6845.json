[
    {
        "content": "## \u9898\u610f\n\n\u4e00\u68f5\u6709 $N$ \u4e2a\u70b9\uff0c\u8fb9\u6743\u53ef\u4fee\u6539\u800c\u5f62\u6001\u4e0d\u53d8\u7684\u6811\uff0c\u5f3a\u5236\u5728\u7ebf\u6c42\u76f4\u5f84\u3002\u64cd\u4f5c\u6570\u4e3a $Q$ \u3002\n\n$$N,Q \\leq 10^5$$\n\n## \u9898\u89e3\n\n\t\u90a3\u4e00\u5929\uff0c\u4eba\u7c7b\u91cd\u65b0\u60f3\u8d77\u4e86\u88ab NOIP2018D2T3 \u652f\u914d\u7684\u6050\u60e7\n\n\u52a8\u6001dp\u5f53\u7136\u662f\u4e00\u79cd\u89e3\u6cd5\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u66f4\u591a\u5730\u662f\u8ba9\u6211\u5b66\u4f1a\u4e86\u6b27\u62c9\u5e8f\u548c\u7ebf\u6bb5\u6811\u7684\u9ad8\u7ea7\u4f7f\u7528\u65b9\u6cd5\u3002\n\n\u8fd9\u9053\u9898\u7684\u601d\u8def\u662f**\u7528\u6b27\u62c9\u5e8f\u5c06\u6811\u4e0a\u95ee\u9898\u8f6c\u4e3a\u533a\u95f4\u6700\u503c\u95ee\u9898**\u3002\n\n\u6b27\u62c9\u5e8f\u8c01\u90fd\u4f1a\uff0c\u96be\u70b9\u662f~~\u666e\u53ca\u77e5\u8bc6\u70b9~~\u7ebf\u6bb5\u6811\u554a\u3002\n\n\u6211\u4eec\u90fd\u77e5\u9053\u6b27\u62c9\u5e8f\u662f\u7528\u6765\u6c42 lca \u7684\uff0c\u4f46\u662f\u6bd4\u8f83\u5c11\u7528\u5b83\u6765\u5904\u7406\u5176\u4ed6\u7684\u6811\u4e0a\u95ee\u9898\u3002\n\n\u5bf9\u6709\u6839\u6811\uff0c\u5b9a\u4e49 $dis[u]$ \u4e3a**\u4ece $u$ \u5230\u6839\u7684\u8ddd\u79bb**\u3002\u90a3\u4e48\u4e24\u70b9 $(u,v)$ \u95f4\u7684\u8ddd\u79bb\u5c31\u662f\n\n$$dis[u]+dis[v]-2\\times dis[lca(u,v)]$$\n\n\u5bf9\u7ed9\u5b9a\u6811\u6c42\u51fa\u6b27\u62c9\u5e8f $Eul[i]$ \u3002\u8bbe\u70b9 $u,v$ \u5728\u6b27\u62c9\u5e8f\u4e0a\u7684\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e\u662f $l,r$ \uff0c\u90a3\u4e48\u6709\n\n$$dis[lca(u,v)]=\\min_{l \\leq k \\leq r}\\{dis[Eul[k]]\\}$$\n\n\u7ef4\u62a4\u4e00\u6761\u957f\u4e3a $2N-1$ \u7684\u5e8f\u5217 $A[i]= dis[Eul[i]]$ \u3002\u6240\u4ee5\u6c42\u76f4\u5f84\u7684\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6c42\n\n$$\\max_{1\\leq l\\leq r\\leq 2N-1} \\{A[l]+A[r]-2\\times\\min_{l \\leq k \\leq r}\\{A[k]\\}\\}$$\n\n\u90a3\u4e48\uff0c\u7528\u7ebf\u6bb5\u6811\u600e\u4e48\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u5462\uff1f\u8fd9\u5c31\u662f\u8fd9\u9053\u9898\u7684\u7cbe\u9ad3\u3002\n\n\u4e0a\u5f0f\u662f\u4e09\u4e2a\u53d8\u91cf\u7684\u6700\u503c\u5f0f\uff0c\u8003\u8651\u5206\u6cbb\u7b56\u7565\uff0c\u591a\u8bb0\u5f55\u4e00\u4e9b\u503c\u6765\u51cf\u5c11\u5f0f\u5b50\u7684\u53d8\u91cf\u3002\u7ebf\u6bb5\u6811\u5176\u5b9e\u5c31\u662f\u4e00\u79cd\u5206\u6cbb\u601d\u60f3\u7684\u4f53\u73b0\u3002\n\n\u8bbe\n\n$$Diameter[L,R]=\\max_{L\\leq l\\leq r\\leq R} \\{A[l]+A[r]-2\\times\\min_{l \\leq k \\leq r}\\{A[k]\\}\\}$$\n\n\u76f4\u5f84\u5c31\u662f $Diameter[1,2N-1]$\n\n\u8003\u8651\u56fa\u5b9a $l$ \uff0c\u5f0f\u5b50\u53ef\u4ee5\u53d8\u4e3a $(k,r)$ \u4e24\u4e2a\u53d8\u91cf\u3002\u5982\u679c\u80fd\u7ef4\u62a4\u533a\u95f4\u5185\u4e0b\u5f0f\u7684\u503c\n\n$$rmax[l,r]=A[i]-2\\times\\min_{i \\leq j}\\{A[j]\\},\\quad (l\\leq i \\leq j \\leq r)$$\n\n\u6839\u636e\u5bf9\u79f0\u6027\uff0c\u4e5f\u6784\u9020\u4e00\u4e2a\n\n$$lmax[l,r]=A[i]-2\\times\\min_{i \\geq j}\\{A[j]\\},\\quad (l\\leq j \\leq i \\leq r)$$\n\n\u8bbe $m$ \u4e3a $(l,r)$ \u4e2d\u70b9\uff0c\u8003\u8651 $(l,k,r)$ \u548c $m$ \u7684\u5173\u7cfb\uff0c\u90a3\u4e48\u5c31\u6709\n\n$$Diameter[L,R]=\\max\\begin{cases}\nDiameter[m+1,R] & (m<l\\leq k\\leq r)\\\\\nmax[L,m]+rmax[m+1,R] & (l\\leq m<k\\leq r)\\\\\nlmax[L,m]+max[m+1,R] & (l\\leq k\\leq m<r)\\\\\nDiameter[L,m] & (l\\leq k\\leq r\\leq m)\\\\\n\\end{cases}$$\n\n\u800c\u6211\u4eec\u6ce8\u610f\u5230 $rmax$ \u4e5f\u80fd\u7528\u8fd9\u79cd\u601d\u60f3\u6c42\u51fa\n\n\u8bbe $m$ \u4e3a $(l,r)$ \u4e2d\u70b9\uff0c\u8003\u8651 $(l,r)$ \u548c $m$ \u7684\u5173\u7cfb\uff0c\u90a3\u4e48\u5c31\u6709\n\n$$rmax[L,R]=\\max\\begin{cases}\nrmax[m+1,R] & (m<l\\leq r)\\\\\nmax[L,m]-2\\times min[m+1,R] & (l\\leq m<r)\\\\\nrmax[L,m] & (l\\leq r\\leq m)\\\\\n\\end{cases}$$\n\n$lmax$ \u540c\u7406\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u6784\u9020\u51fa\u4e86 $Diameter[L,R]$ \u968f\u7ebf\u6bb5\u6811\u7684\u7ef4\u62a4\u65b9\u6cd5\u3002\n\n\u56e0\u4e3a\u4fee\u6539\u8fb9\u6743\u53ea\u5bf9\u8fd9\u6761\u8fb9**\u6df1\u5ea6\u8f83\u6df1\u4e00\u6bb5\u7684\u5b50\u6811**\u9020\u6210\u5f71\u54cd\uff0c\u800c\u5b50\u6811\u53ef\u4ee5\u8f6c\u5316\u4e3a**\u6b27\u62c9\u5e8f\u4e0a\u7684\u4e00\u6bb5\u533a\u95f4**\u7684\u4fee\u6539\u3002\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684\u5b50\u6811\u533a\u95f4\uff0c\u4e5f\u5c31\u662f\u5728\u6b27\u62c9\u5e8f\u4e0a\u7684\u6700\u65e9\u548c\u6700\u665a\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5c31\u53ef\u4ee5\u5c06**\u8fb9\u6743\u4fee\u6539**\u4e5f\u8f6c\u5316\u4e3a**\u533a\u95f4\u64cd\u4f5c**\u3002\n\n\u53ea\u9700\u8981\u8bb0\u5f55 $min,max,lmax,rmax,Diameter$ \u4e94\u4e2a\u503c\uff0c\u518d\u8bb0\u5f55\u533a\u95f4\u4fee\u6539\u7684\u61d2\u6807\u8bb0 $Add$\uff0c\u5c31\u53ef\u4ee5\u5b8c\u7f8e\u5730\u7ef4\u62a4\u8fd9\u9053\u9898\u7684\u4fe1\u606f\u4e86\u3002\n\n\u5177\u4f53\u7ec6\u8282\u89c1\u4ee3\u7801\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\nusing namespace std;\n\nconst int MAXN= 800005;\n\nint N,M,head[MAXN],nex[MAXN],targ[MAXN],cur;\nint fa[MAXN],EO[MAXN],lb[MAXN],rb[MAXN],cnt;\nlong long dis[MAXN];\n\nint weig[MAXN],son[MAXN];\nlong long len[MAXN],MaxW,lastans;\nlong long minx[MAXN],maxx[MAXN],lmax[MAXN],rmax[MAXN],diam[MAXN],Add[MAXN];\n\nvoid editdata(int k,long long c){\n\tminx[k]+= c;\n\tmaxx[k]+= c;\n\tlmax[k]-= c;\n\trmax[k]-= c;\n\tAdd[k]+= c;\n\treturn;\n}\n\nvoid pushdown(int k){\n\tif(!Add[k]) return;\n\teditdata(k<<1,Add[k]);\n\teditdata(k<<1|1,Add[k]);\n\tAdd[k]= 0;\n\treturn;\n}\n\nvoid pushup(int k){\n\tminx[k]= min(minx[k<<1],minx[k<<1|1]);\n\tmaxx[k]= max(maxx[k<<1],maxx[k<<1|1]);\n\tlmax[k]= max(max(lmax[k<<1],lmax[k<<1|1]),maxx[k<<1]-2*minx[k<<1|1]);\n\trmax[k]= max(max(rmax[k<<1],rmax[k<<1|1]),maxx[k<<1|1]-2*minx[k<<1]);\n\tdiam[k]= max(max(diam[k<<1],diam[k<<1|1]),max(maxx[k<<1]+rmax[k<<1|1],lmax[k<<1]+maxx[k<<1|1]));\n\treturn;\n}\n\nvoid updateSegtree(int a,int b,long long c,int k,int l,int r){\n\tif(a<=l && r<=b){\n\t\teditdata(k,c);\n\t\treturn;\n\t}\n\tif(r<a || b<l) return;\n\tif(l<r) pushdown(k);\n\tint mid= (l+r)>>1;\n\tupdateSegtree(a,b,c,k<<1,l,mid);\n\tupdateSegtree(a,b,c,k<<1|1,mid+1,r);\n\tpushup(k);\n\treturn;\n}\n\nvoid buildSegtree(int k,int l,int r){\n\tif(l==r){\n\t\tmaxx[k]= minx[k]= dis[EO[l]];\n\t\tlmax[k]= rmax[k]= -dis[EO[l]];\n\t\tdiam[k]= 0;\n\t\treturn;\n\t}\n\tint mid= (l+r)>>1;\n\tbuildSegtree(k<<1,l,mid);\n\tbuildSegtree(k<<1|1,mid+1,r);\n\tpushup(k);\n\treturn;\n}\n\nvoid buildEO(int u){\n\tEO[++cnt]= u;\n\tlb[u]= cnt;\n\tfor(int e= head[u];e;e= nex[e]){\n\t\tint v= targ[e];\n\t\tif(fa[u]==v) continue;\n\t\tfa[v]= u;son[(e-1)/2]= v;\n\t\tdis[v]= dis[u]+weig[e];\n\t\tbuildEO(v);\n\t\tEO[++cnt]= u;\n\t}\n\trb[u]= cnt;\n\treturn;\n}\n\nvoid AddEdge(int u,int v,long long w){\n\tnex[++cur]= head[u];\n\thead[u]= cur;\n\ttarg[cur]= v;\n\tweig[cur]= w;\n\treturn;\n}\n\nvoid Input(){\n\tscanf(\"%d%d%lld\",&N,&M,&MaxW);\n\tfor(int i=0;i<N-1;++i){\n\t\tint x,y;long long z;\n\t\tscanf(\"%d%d%lld\",&x,&y,&z);\n\t\tAddEdge(x,y,z);\n\t\tAddEdge(y,x,z);\n\t\tlen[i]= z;\n\t}\n\treturn;\n}\n\nint main(){\n\tInput();\n\tbuildEO(1);\n\tbuildSegtree(1,1,cnt);\n\twhile(M--){\n\t\tint e;long long d;\n\t\tscanf(\"%d%lld\",&e,&d);\n\t\te= (e+lastans)%(N-1);\n\t\td= (d+lastans)%MaxW;\n\t\tupdateSegtree(lb[son[e]],rb[son[e]],d-len[e],1,1,cnt);\n\t\tlen[e]= d;\n\t\tprintf(\"%lld\\n\",lastans= diam[1]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1606575924,
        "uid": 102091,
        "name": "NashChen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6845 \u3010[CEOI2019] Dynamic Diameter\u3011"
    },
    {
        "content": "## P6845 [CEOI2019] Dynamic Diameter\n\n### \u9898\u610f\n\n\u4e00\u9897\u5e26\u6743\u6811\uff0c\u6bcf\u6b21\u66f4\u6539\u4e00\u6761\u8fb9\u7684\u6743\uff0c\u6bcf\u6b21\u4fee\u6539\u540e\u6c42\u51fa\u6700\u5927\u76f4\u5f84\u3002\u5f3a\u5236\u5728\u7ebf\u3002\n\n### \u601d\u8def\n\n$O(n\\log^2n)$ \u7684\u66b4\u529b\u505a\u6cd5\u3002\n\n\u6839\u636e\u7ecf\u5178\u7ed3\u8bba\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u70b9\u96c6\u7684\u6811\u4e0a\u6700\u5927\u76f4\u5f84\uff08\u6743\u503c\u975e\u8d1f\uff09\uff0c\u5e76\u96c6\u70b9\u96c6\u7684\u6811\u4e0a\u6700\u5927\u76f4\u5f84\u7684\u7aef\u70b9\u4e00\u5b9a\u662f\u539f\u56db\u4e2a\u7aef\u70b9\u4e2d\u7684\u4e24\u4e2a\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u70b9\u96c6\uff0c\u5408\u5e76\u65f6 $O(\\log n)$ \u67e5\u8be2\u4e24\u70b9\u95f4\u8ddd\u79bb\u5408\u5e76\u5c31\u53ef\u4ee5\u505a\u5230 $O(n\\log^2n)$ \u7684\u590d\u6742\u5ea6\u4e86\u3002\n\n\u601d\u8003\u5982\u4f55\u652f\u6301\u5728\u7ebf\u4fee\u6539\u8fb9\u6743\u3002\u4e24\u70b9\u95f4\u8ddd\u79bb\u4e3a $dis(x)+dis(y)-2*dis(lca(x,y))$ \u90a3\u4e48\u5148\u6811\u5256\u53d1\u73b0\u4fee\u6539\u4e00\u6761\u8fb9\u7684\u6743\u5b9e\u9645\u4e0a\u662f\u5c06\u5b50\u6811\u5185 $dis$ \u589e\u52a0\uff0c\u90a3\u4e48\u5b50\u6811\u5c31\u662f\u533a\u95f4\u52a0\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4fee\u6539\u3002\n\n\u8003\u8651\u54ea\u4e9b\u90e8\u5206\u7684\u7ebf\u6bb5\u6811\u4e0a\u7684\u70b9\u96c6\u6700\u5927\u76f4\u5f84\u88ab\u6539\u4e86\u3002\u53d1\u73b0\u5b50\u6811\u5185\u548c\u5b50\u6811\u5916\u7684\u6700\u5927\u76f4\u5f84\u4e0d\u4f1a\u53d8\u5316\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u66f4\u6539\u5b50\u6811\u5185\u4e0e\u5916\u4e4b\u95f4\u5408\u5e76\u7684\u6700\u5927\u76f4\u5f84\u5c31\u884c\u4e86\u3002\u6211\u4eec\u6309\u7167 $dfn$ \u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\uff0c\u90a3\u4e48\u6211\u4eec\u6bcf\u6b21\u53ea\u9700\u8981\u5c06\u5b50\u6811\u533a\u95f4\u91cd\u65b0 `pushup` \u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cctype>\n#include<cstdlib>\n#include<utility>\nusing namespace std;\ninline long long read(){\n\tlong long x=0;int w=0;char c=getchar();\n\twhile(!isdigit(c)) w|=c=='-',c=getchar();\n\twhile(isdigit(c)) x=x*10+(c^48),c=getchar();\n\treturn w?-x:x;\n}\nnamespace star\n{\n\tconst int maxn=1e5+10;\n\tint n,q;\n\tint ecnt=1,head[maxn],to[maxn<<1],nxt[maxn<<1],go[maxn];\n\tlong long W,w[maxn],dis[maxn];\n\tinline void addedge(){\n\t\tint a=read(),b=read();\n\t\tto[++ecnt]=b,nxt[ecnt]=head[a],head[a]=ecnt;\n\t\tto[++ecnt]=a,nxt[ecnt]=head[b],head[b]=ecnt;\n\t\tw[ecnt>>1]=read();\n\t}\n\tint dep[maxn],fa[maxn],top[maxn],siz[maxn],son[maxn],dfn[maxn],id[maxn];\n\tvoid dfs1(int x,int f){\n\t\tfa[x]=f,dep[x]=dep[f]+1,siz[x]=1;\n\t\tfor(int u,i=head[x];i;i=nxt[i]) if((u=to[i])!=f){\n\t\t\tdis[u]=dis[x]+w[i>>1],dfs1(u,x),go[i>>1]=u;\n\t\t\tif(siz[u]>siz[son[x]]) son[x]=u;\n\t\t\tsiz[x]+=siz[u];\n\t\t}\n\t}\n\tvoid dfs2(int x,int topf){\n\t\ttop[x]=topf,dfn[x]=++dfn[0],id[dfn[0]]=x;\n\t\tif(!son[x]) return;\n\t\tdfs2(son[x],topf);\n\t\tfor(int u,i=head[x];i;i=nxt[i]) if((u=to[i])!=fa[x] and u!=son[x]) dfs2(u,u);\n\t}\n\tinline int LCA(int x,int y){\n\t\twhile(top[x]!=top[y]) dep[top[x]]>dep[top[y]]?(x=fa[top[x]]):(y=fa[top[y]]);\n\t\treturn dep[x]<dep[y]?x:y;\n\t}\n\t#define ls (ro<<1)\n\t#define rs (ro<<1|1)\n\t#define mid ((l+r)>>1)\n\tnamespace S{\n\t\tlong long c[maxn];\n\t\tinline void upd(int x,long long k){for(;x<=n;x+=x&-x) c[x]+=k;}\n\t\tinline long long query(int x){long long ans=dis[id[x]];for(;x;x-=x&-x) ans+=c[x];return ans;}\n\t\tinline void update(int x,int y,long long w){upd(x,w),upd(y+1,-w);}\n\t}\n\tinline long long Dis(pair<int,int> a){return S::query(dfn[a.first])+S::query(dfn[a.second])-2*S::query(dfn[LCA(a.first,a.second)]);}\n\tnamespace T{\n\t\tpair<int,int> e[maxn<<2];\n\t\tinline pair<int,int> merge(const pair<int,int>& a,const pair<int,int>& b){\n\t\t\tpair<int,int> p[6]={a,b,make_pair(a.first,b.first),make_pair(a.first,b.second),make_pair(a.second,b.first),make_pair(a.second,b.second)};\n\t\t\tlong long dis[6];\n\t\t\tfor(int i=0;i<6;i++) dis[i]=Dis(p[i]);\n\t\t\treturn p[max_element(dis,dis+6)-dis];\n\t\t}\n\t\tvoid build(int ro=1,int l=1,int r=n){\n\t\t\tif(l==r) return e[ro]=make_pair(id[l],id[l]),void();\n\t\t\tbuild(ls,l,mid),build(rs,mid+1,r);\n\t\t\te[ro]=merge(e[ls],e[rs]);\n\t\t}\n\t\tvoid update(int x,int y,int ro=1,int l=1,int r=n){\n\t\t\tif(x==l and y==r) return;\n\t\t\tif(y<=mid) update(x,y,ls,l,mid);\n\t\t\telse if(x>mid) update(x,y,rs,mid+1,r);\n\t\t\telse update(x,mid,ls,l,mid),update(mid+1,y,rs,mid+1,r);\n\t\t\te[ro]=merge(e[ls],e[rs]);\n\t\t}\n\t}\n\t#undef ls\n\t#undef rs\n\t#undef mid\n\tinline void work(){\n\t\tn=read(),q=read(),W=read();\n\t\tfor(int i=1;i<n;i++) addedge();\t\n\t\tdfs1(1,0),dfs2(1,1);\n\t\tT::build();\n\t\tlong long ans=0;\n\t\twhile(q--){\n\t\t\tint e=(read()+ans)%(n-1)+1;\n\t\t\tlong long v=(read()+ans)%W;\n\t\t\tS::update(dfn[go[e]],dfn[go[e]]+siz[go[e]]-1,v-w[e]),w[e]=v;\n\t\t\tT::update(dfn[go[e]],dfn[go[e]]+siz[go[e]]-1);\n\t\t\tprintf(\"%lld\\n\",ans=Dis(T::e[1]));\n\t\t}\n\t}\n}\nsigned main(){\n\tstar::work();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1619164771,
        "uid": 280015,
        "name": "Star_Cried",
        "ccfLevel": 9,
        "title": "P6845 [CEOI2019] Dynamic Diameter"
    },
    {
        "content": "$\\text{Top-Tree}$ \u662f\u4e00\u4e2a\u7b80\u5355\u5b9e\u7528\u7684\u4e1c\u897f\uff0c\u81ea\u7136\u662f\u53ef\u4ee5\u7ef4\u62a4\u52a8\u6001\u76f4\u5f84\u7684\u3002\n\n\u5982\u679c\u4f60\u8fd8\u4e0d\u4f1a $\\text{Top-Tree}$\uff0c\u53ef\u4ee5\u5230[\u8fd9\u91cc](/blog/502410/sone1-imaglct-satt-develop-p5649)\u5b66\u4e60\u3002\n\n\u5bf9\u4e8e $\\text{Compress-Tree}$\uff0c\u6211\u4eec\u7ef4\u62a4\uff0c\u7c07\u4e2d\u76f4\u5f84\u3001\u7c07\u4e2d\u5230\u5de6\u53f3\u7aef\u70b9\u7684\u6700\u8fdc\u8ddd\u79bb\uff0c\u5373\u53ef\u505a\u5230\u8f7b\u677e\u5408\u5e76\uff0c\u6ce8\u610f\u8981\u8bb0\u5f55\u7c07\u94fe\u957f\u5ea6\u3002\n\n\u5bf9\u4e8e $\\text{Rake-Tree}$ \u4e5f\u5f88\u597d\u7ef4\u62a4\uff0c\u76f4\u63a5\u8003\u8651\u5c06\u4e24\u68f5\u5b50\u6811\u6700\u6df1\u70b9\uff08\u76f8\u5f53\u4e8e\u5230\u5de6\u7aef\u70b9\u6700\u8fdc\u8ddd\u79bb\uff09\u7ec4\u6210\u7684\u76f4\u5f84\uff0c\u5341\u5206\u65b9\u4fbf\u3002\n\n\u5408\u5e76\u90e8\u5206\u4ee3\u7801\uff1a\n```cpp\nstruct dat{\n    ll l,m,r,ln;//\u5de6\u7aef\u70b9\u8ddd\u79bb\uff0c\u76f4\u5f84\u957f\u5ea6\uff0c\u53f3\u7aef\u70b9\u8ddd\u79bb\uff0c\u7c07\u94fe\u957f\u5ea6\n    dat operator+(dat z){\n        return {max(l,ln+z.l),max({m,z.m,r+z.l}),max(r+z.ln,z.r),ln+z.ln};\n    }\n}sm[N];\ndat datad(dat x,dat y){\n    return {max(x.l,y.l),max({x.m,y.m,x.l+y.l})};\n    //rake-tree \u7684\u5408\u5e76\n}\ndat gdat(int x){\n    if(ms)return{sm[ms].l+w[x],max(sm[ms].m,sm[ms].l+w[x]),sm[ms].l,w[x]};\n    else return{w[x],w[x],0,w[x]};\n    //\u5c06 rake-data \u8f6c\u6362\u6210 compress-data\n}\nvoid pp(int x){\n    if(x>n){//rake-pushup\n        if(ls&&rs)sm[x]=datad(sm[ls],sm[rs]);\n        else sm[x]=sm[ls|rs];\n    }else{//compress-pushup\n        sm[x]=sm[ls]+gdat(x)+sm[rs];\n    }\n}\n```\n\n\u53d1\u73b0\u8fd9\u5c31\u662f\u666e\u901a\u7684 $\\text{Self-adjusting-Top-Tree}$ \u64cd\u4f5c\uff0c\u4e8e\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(q\\log_2n+n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\uff0c\u652f\u6301\u5728\u7ebf\u3002\n\n\u52a3\u52bf\uff1a\u5e38\u6570\u8f83\u5927\uff0c\u9700\u8981 $333ms$\uff0c\u800c\u6700\u4f18\u89e3\u53ea\u8981 $237ms$\uff0c\u53ef\u80fd\u5bf9\u4e8e\u5c11\u6570\u4eba\u6765\u8bf4\u5e76\u4e0d\u597d\u5199\uff0c\u4e5f\u4e0d\u597d\u8c03\u8bd5\uff0c\u5373\u4f7f\u6211\u53ea\u8981\u4e00\u5c0f\u65f6\u5199\uff0c\u534a\u5c0f\u65f6\u8c03\u3002\n\n\u4f18\u52bf\uff1a\u6269\u5c55\u6027\u5f3a\uff0c\u6b27\u62c9\u5e8f\u505a\u6cd5\u4f3c\u4e4e\u4e0d\u80fd\u652f\u6301\u8d1f\u8fb9\u6743\uff0c\u800c\u8fd9\u4e2a\u505a\u6cd5\u4e0d\u4ec5\u53ef\u4ee5\u652f\u6301\u8d1f\u6743\uff0c\u8fd8\u80fd\u6362\u7236\u4eb2\uff08\u6682\u65f6\u4e0d\u77e5\u9053\u600e\u4e48\u6362\u6839\uff09\u3002\n\n\u5e38\u6570\u5927\u662f $\\text{SATT}$ \u6700\u5927\u7684\u7f3a\u9677\uff0c\u4f46\u662f\u8fd9\u9898\u5e76\u4e0d\u9700\u8981\u66f4\u6539\u6811\u7684\u5f62\u6001\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u8fd9\u6837\u8ba9\u5e38\u6570\u53d8\u5f97\u4f18\u79c0\uff0c\u53ea\u9700\u8981 $213ms$\uff0c\u662f\u76ee\u524d\u7684\u6700\u4f18\u89e3\uff08$\\text{test on 2022-11-07}$\uff0c\u8d85\u8fc7\u4e86\u6240\u6709\u7ebf\u6bb5\u6811\u505a\u6cd5\uff09\u3002\n\n\u5176\u5b9e $\\text{SATT}$ \u66f4\u597d\u5199\uff01\u4e0d\u5230 $3.0K$\uff01\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\u7531\u4e8e\u9700\u8981\u9884\u5904\u7406\u5efa\u6811\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((n+q)\\log_2n)$\uff0c\u6bcf\u6b21\u4fee\u6539\u53ea\u8981\u4e0d\u505c\u5730\u8df3\u7236\u4eb2 `pushup`\uff0c\u5e38\u6570\u5f88\u5c0f\u3002",
        "postTime": 1667606032,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "Top Tree \u89e3\u51b3\u52a8\u6001\u76f4\u5f84\u95ee\u9898"
    },
    {
        "content": "\u6734\u7d20\u7684 dfs \u6c42\u76f4\u5f84\u597d\u50cf\u5f88\u96be\u62d3\u5c55\u7684\u6837\u5b50\u2026\u2026\n\nDP \u6c42\u76f4\u5f84\u597d\u50cf\u52a8\u6001 dp \u4e5f\u53ef\u4ee5\u641e\uff0c\u4f46\u5f88\u590d\u6742\u7684\u6837\u5b50\u2026\u2026\n\n\u6240\u4ee5\u8003\u8651\u7528\u6570\u636e\u7ed3\u6784\u4f18\u5316\u66b4\u529b\u6c42\u76f4\u5f84\uff01\n\n\u5373\u5feb\u901f\u4e14\u52a8\u6001\u5730\u6c42\u51fa\uff1a\n\n$$\\max_{x=1}^n\\max_{y=1}^ndis_{x,y}$$\n\n\u5229\u7528\u6811\u4e0a\u5dee\u5206\u57fa\u672c\u529f\u4e0d\u96be\u77e5\u9053\u5176\u7b49\u4ef7\u4e8e\uff1a\n\n$$=\\max_{x=1}^n\\max_{y=1}^n(dep_x+dep_y-2\\cdot dep_{lca(x,y)})$$\n\n\u65e2\u7136 $lca$ \u662f\u5173\u4e8e $x,y$ \u7684\u4e8c\u5143\u51fd\u6570\uff0c\u90a3\u53ef\u4e0d\u53ef\u4ee5\u628a\u5b83\u8f6c\u5316\u6210\u4ee3\u6570\u8bed\u8a00\u5462\uff1f\n\n\u8054\u60f3 [$O(1)$ \u6c42 lca \u7b97\u6cd5](https://oi-wiki.org/graph/lca/#%E7%94%A8%E6%AC%A7%E6%8B%89%E5%BA%8F%E5%88%97%E8%BD%AC%E5%8C%96%E4%B8%BA-rmq-%E9%97%AE%E9%A2%98)\uff0c\u5229\u7528\u6b27\u62c9\u5e8f\u53ef\u4ee5\u5c06 lca \u8f6c\u5316\u6210 RMQ \u95ee\u9898\u3002\u5373\uff1a\n\n$$\\mathrm{first}_{lca(x,y)}=\\min_{\\mathrm{any}_x\\leq i\\leq \\mathrm{any}_y}(\\mathrm{first}_{\\mathrm{eul}_i})$$\n\n\u5176\u4e2d\uff0c$\\mathrm{first}_x$ \u4e3a $x$ \u7684\u7b2c\u4e00\u4e2a\u6b27\u62c9\u5e8f\u7f16\u53f7\uff0c$\\mathrm{any}_x$ \u4e3a $x$ \u7684\u4efb\u610f\u4e00\u4e2a\u6b27\u62c9\u5e8f\u7f16\u53f7\uff0c$\\mathrm{eul}_x$ \u4e3a\u6b27\u62c9\u5e8f\u4e3a $x$ \u7684\u8282\u70b9\u7f16\u53f7\u3002\n\n\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f $\\mathrm{first}_x=\\min_{y\\in son(x)}\\mathrm{first}_y$\uff0c\u800c\u6ce8\u610f\u5230 $dep_x=\\min_{y\\in son(x)}dep_y$\uff08\u5176\u4e2d $son(x)$ \u8868\u793a $x$ \u7684\u5b50\u6811\uff09\u3002\u6240\u4ee5\u540c\u7406\u53ef\u5f97\uff1a\n\n$$dep_{lca(x,y)}=\\min_{\\mathrm{any}_x\\leq i\\leq \\mathrm{any}_y}(dep_{\\mathrm{eul}_i})$$\n\n\u4e8e\u662f\uff0c\u8003\u8651\u8bbe\u7f6e\u957f\u5ea6\u4e3a $2n-1$ \u7684\u5e8f\u5217 $a$\uff0c\u6ee1\u8db3 $a_i=dep_{\\mathrm{eul}_i}$\u3002\u5219\u539f\u5f0f\u7b49\u4ef7\u4e8e\uff1a\n\n$$=\\max_{x=1}^{2n-1}\\max_{y=x}^{2n-1}(a_x+a_y-2\\cdot (\\min_{x\\leq z\\leq y}a_z))$$\n\n\u8fd9\u662f\u663e\u7136\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u3002\n\n\u5177\u4f53\u800c\u8a00\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\uff1a\n\n$$\\begin{cases}ans=\\max_{l\\leq x\\leq y\\leq r}(a_x+a_y-2\\cdot (\\min_{x\\leq z\\leq y}a_z))\\\\\nlp=\\max_{l\\leq x\\leq r}(a_x-2\\cdot (\\min_{x\\leq z\\leq r}a_z))\\\\\nrp=\\max_{l\\leq y\\leq r}(a_y-2\\cdot (\\min_{l\\leq z\\leq y}a_z))\\\\\nmx=\\max_{l\\leq x\\leq r} a_x\\\\\nmn=\\min_{l\\leq x\\leq r} a_x\\end{cases}$$\n\n\u5219\u8f6c\u79fb\u663e\u7136\u4e3a\uff1a\n\n$$\\begin{cases}\nans=\\max\\{ans_{ls},\\ ans_{rs},\\ lp_{ls}+mx_{rs},\\ mx_{ls}+rp_{rs}\\}\\\\\nlp=\\max\\{lp_{ls},\\ lp_{rs},\\ mx_{ls}-2\\cdot mn_{rs}\\}\\\\\nrp=\\max\\{rp_{ls},\\ rp_{rs},\\ mx_{rs}-2\\cdot mn_{ls}\\}\n\\end{cases}$$\n\n\u5bf9\u4e8e\u8fb9\u5355\u70b9\u6539\uff0c\u76f8\u5f53\u4e8e\u662f $dep$ \u5b50\u6811\u52a0\uff0c\u8bb0\u5f55 $\\mathrm{last}_x$ \u4e3a $x$ \u7684\u6700\u540e\u4e00\u4e2a\u6b27\u62c9\u5e8f\u7f16\u53f7\uff0c\u5bf9 $\\mathrm{first}_x\\leq i\\leq \\mathrm{last}_x$ \u8fdb\u884c\u533a\u95f4\u52a0\u5373\u53ef\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\n#define N 200010\n#define int long long\nint n, m;\n\nint h[N], e[N << 1], ne[N << 1], id[N << 1], idx = -1;\nint u_[N], v_[N], w_[N];\n\nvoid add_edge(int x, int y, int id_)\n{\n\tne[++idx] = h[x];\n\th[x] = idx;\n\te[idx] = y;\n\tid[idx] = id_;\n}\n\nvoid add(int x, int y, int id_)\n{\n\tadd_edge(x, y, id_);\n\tadd_edge(y, x, id_);\n}\n\nint our[N], first[N], last[N], dis[N];\n\nvoid dfs(int k, int fa)\n{\n\tour[++our[0]] = k;\n\tfirst[k] = our[0];\n\tfor(int i = h[k]; ~i; i = ne[i])\n\t{\n\t\tint nx = e[i];\n\t\tif(nx == fa)\n\t\t\tcontinue;\n\t\tu_[id[i]] = k;\n\t\tv_[id[i]] = nx;\n\t\tdis[nx] = dis[k] + w_[id[i]];\n\t\tdfs(nx, k);\n\t\tour[++our[0]] = k;\n\t}\n\tlast[k] = our[0];\n}\n\nstruct Tree\n{\n\tint mx, mn;\n\tint lp, rp, ans;\n\tint lazy;\n\tvoid push(int z)\n\t{\n\t\tmx += z;\n\t\tmn += z;\n\t\tlazy += z;\n\t\tlp -= z;\n\t\trp -= z;\n\t}\n}tr[N << 2];\n\n#define lson k << 1\n#define rson k << 1 | 1\n\nvoid pushup(int k)\n{\n\ttr[k].mx = std::max(tr[lson].mx, tr[rson].mx);\n\ttr[k].mn = std::min(tr[lson].mn, tr[rson].mn);\n\ttr[k].lp = std::max({tr[lson].lp, tr[rson].lp, tr[lson].mx - 2 * tr[rson].mn});\n\ttr[k].rp = std::max({tr[lson].rp, tr[rson].rp, tr[rson].mx - 2 * tr[lson].mn});\n\ttr[k].ans = std::max({tr[lson].ans, tr[rson].ans, tr[lson].lp + tr[rson].mx, tr[lson].mx + tr[rson].rp});\n}\n\nvoid pushdown(int k)\n{\n\tif(tr[k].lazy)\n\t{\n\t\ttr[lson].push(tr[k].lazy);\n\t\ttr[rson].push(tr[k].lazy);\n\t\ttr[k].lazy = 0;\n\t}\n}\n\n#define inf 0x3f3f3f3f3f3f3f3f\n#define ls lson, l, mid\n#define rs rson, mid + 1, r\n\nvoid build(int k, int l, int r)\n{\n\tif(l == r)\n\t{\n\t\ttr[k].mn = tr[k].mx = dis[our[l]];\n\t\ttr[k].lp = tr[k].rp = -dis[our[l]];\n\t\ttr[k].ans = 0;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(ls);\n\tbuild(rs);\n\tpushup(k);\n}\n\nvoid change(int k, int l, int r, int ql, int qr, int z)\n{\n\tif(ql <= l && r <= qr)\n\t{\n\t\ttr[k].push(z);\n\t\treturn;\n\t}\n\tpushdown(k);\n\tint mid = (l + r) >> 1;\n\tif(ql <= mid)\n\t\tchange(ls, ql, qr, z);\n\tif(mid < qr)\n\t\tchange(rs, ql, qr, z);\n\tpushup(k);\n}\n\n#define root 1, 1, n * 2 - 1\n\nint W;\n\n#undef int\nint main()\n{\n#define int long long\n\tmemset(h, -1, sizeof(h));\n\tscanf(\"%lld%lld%lld\", &n, &m, &W);\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tscanf(\"%lld%lld%lld\", &u_[i], &v_[i], &w_[i]);\n\t\tadd(u_[i], v_[i], i);\n\t}\n\tdfs(1, 0);\n\tbuild(root);\n\tint lastans = 0;\n\tfor(int i = 1, x, y; i <= m; i++)\n\t{\n\t\tscanf(\"%lld%lld\", &x, &y);\n\t\tx = (x + lastans) % (n - 1) + 1;\n\t\ty = (y + lastans) % W;\n\t\tint v = v_[x];\n\t\tint w = w_[x];\n\t\tchange(root, first[v], last[v], y - w);\n\t\tprintf(\"%lld\\n\", tr[1].ans);\n\t\tw_[x] = y;\n\t\tlastans = tr[1].ans;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1681706635,
        "uid": 371968,
        "name": "ningago",
        "ccfLevel": 4,
        "title": "P6845"
    },
    {
        "content": "# $\\text{Foreword}$\n~~\u6c34\u4e00\u53d1\u9898\u89e3\u7684\u53cc\u500d\u7ecf\u9a8c~~  \n[\u53cc\u500d\u7ecf\u9a8c\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/CF1192B)  \n@zhengrunzhe \u5927\u4f6c\u7684\u77e9\u9635\u505a\u6cd5\u8fc7\u4e8e\u795e\u5947\uff0c\u849f\u84bb\u65e0\u6cd5\u7406\u89e3...   \n\u6b27\u62c9\u5e8f\u7684\u505a\u6cd5\u786e\u5b9e\u975e\u5e38\u5de7\u5999\uff0c\u4f46\u6211\u4e5f\u60f3\u4e0d\u5230\u8fd9\u4e48\u795e\u4ed9\u7684\u505a\u6cd5...  \n\u63d0\u4f9b\u4e00\u79cd\u53ef\u80fd\u7b80\u5355\u4e00\u4e9b\u7684 LCT \u505a\u6cd5\u3002  \n\u7531\u4e8e\u672c\u4eba LCT \u65e0\u6cd5\u50cf\u5927\u4f6c\u90a3\u4e48\u795e\uff0c\u8bb2\u7684\u4f1a\u6bd4\u8f83\u8be6\u7ec6\u4e00\u4e9b\uff0c\u4e5f\u8bb8\u5bf9\u5176\u4ed6 LCT \u5e73\u6c11\u73a9\u5bb6\u66f4\u52a0\u53cb\u597d\uff1f\n# $\\text{Solution}$\n\u672c\u9898\u6709\u4e00\u4e2a\u5f88\u5173\u952e\u7684\u6027\u8d28\uff1a**\u8fb9\u6743\u975e\u8d1f**\u3002\uff08\u6b27\u62c9\u5e8f\u7684\u505a\u6cd5\u4e5f\u8981\u57fa\u4e8e\u8fd9\u4e2a\u6027\u8d28\uff09  \n\u53c8\u53d1\u73b0\u4fee\u6539\u65e0\u975e\u6539\u5927/\u5c0f\uff0c\u5728/\u4e0d\u5728\u539f\u76f4\u5f84\u4e0a\uff0c\u5229\u7528\u975e\u8d1f\u7684\u6027\u8d28\u5206\u522b\u8ba8\u8bba\u4e00\u4e0b\uff0c\u5c31\u4f1a\u53d1\u73b0**\u65b0\u76f4\u5f84\u81f3\u5c11\u6709\u4e00\u4e2a\u8282\u70b9\u548c\u539f\u6765\u76f8\u540c**\u3002  \n\u6240\u4ee5\u6211\u4eec\u4e00\u5f00\u59cb\u66b4\u529b\u6c42\u51fa\u76f4\u5f84\u540e\uff0c\u53ea\u9700\u8981\u4e0d\u65ad\u628a\u539f\u76f4\u5f84\u7684\u4e24\u7aef\u70b9\u63d0\u51fa\u6765\uff0c\u7528\u4ece\u4e8c\u8005\u51fa\u53d1\u65b0\u7684\u6700\u957f\u8def\u5f84\u6765\u5c1d\u8bd5\u4f5c\u4e3a\u65b0\u76f4\u5f84\u5c31\u884c\u4e86\u3002  \n\u6240\u4ee5\u73b0\u5728\u53ea\u9700\u8981\u52a8\u6001\u7ef4\u62a4**\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\u7684\u6700\u957f\u8def\u5f84**\u3002  \n\n\u5e38\u89c4\u5957\u8def\uff0c\u5148\u8fb9\u5316\u70b9\uff0c\u8fb9\u6743\u5316\u70b9\u6743\u3002  \n\u8bbe $w_x$ \u8868\u793a $x$ \u7684\u70b9\u6743\uff0c$sum_x$ \u8868\u793a $x$ splay\u5b50\u6811\u5185\u70b9\u6743\u4e4b\u548c\uff0c$dis_x$ \u8868\u793a\u4ece $x$ **\u6240\u5728 splay \u5b50\u6811\u5185\u6df1\u5ea6\u6700\u6d45\u7684\u8282\u70b9\u51fa\u53d1**\u5f80\u5b50\u6811\u5ef6\u4f38\u7684\u6700\u957f\u8def\u5f84\u3002  \n\u5148\u4e0d\u8003\u8651 $x$ \u5b9e\u94fe\u7236\u4eb2\uff0c\u5c1d\u8bd5\u6c42\u51fa**\u4ece $x$ \u51fa\u53d1**\u5f80\u5b50\u6811\u5ef6\u4f38\u7684\u6700\u957f\u8def\u5f84 $res_x$\u3002    \n\n\u4e00\u5f00\u59cb\u6709\uff1a \n$$res_x=w_x$$\n\u5bf9\u4e8e $x$ \u7684\u865a\u513f\u5b50\uff0c\u5bf9\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a `std::set`  \u7ef4\u62a4\u865a\u5b50\u6811\uff0c\u8fdb\u884c\u8f6c\u79fb\uff1a\n$$res_x\\gets \\max_{son}dis_{son}+w_x$$\n\u8fd8\u6709\u4ece $x$ \u7684\u5b9e\u513f\u5b50\u8f6c\u79fb\uff0c\u4e0d\u96be\u53d1\u73b0\u5176\u5bf9\u5e94\u7684\u5c31\u662f $dis_{rs_x}$\uff1a\n$$res_x\\gets dis_{rs_x}+w_x$$\n\u6c42\u5b8c $res_x$ \u540e\uff0c\u5982\u679c $x$ \u6ca1\u6709\u5de6\u513f\u5b50\uff0c\u8bf4\u660e\u4ed6\u5c31\u662f\u94fe\u5934\uff0c\u76f4\u63a5\u8ba9 $dis_x=res_x$ \u5373\u53ef\uff1b\u5426\u5219\uff0c\u94fe\u5934\u53ef\u4ee5\u4e0d\u4f7f\u7528 $res_x$ \u7684\u8f6c\u79fb\uff0c\u6216\u8005\u4f7f\u7528 $res_x$ \u7684\u8f6c\u79fb\uff0c\u90a3\u4e48\u8fd8\u8981\u52a0\u4e0a $x$ \u5230\u94fe\u5934\u4e00\u6bb5\u7684\u6743\u503c\u548c\uff0c\u5206\u522b\u5bf9\u5e94 `max` \u7684\u524d\u540e\u4e24\u9879\uff1a\n$$dis_x=\\max(dis_{ls_x},res_x+sum_{ls_x})$$\n\n\u8fd9\u6837\u5c31\u505a\u5b8c\u4e86\u3002\u7531\u4e8e\u8f6c\u79fb\u4e0d\u5bf9\u79f0\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u955c\u50cf\u7684\u5904\u7406\u4e00\u4e2a $dis'x$\uff0c\u5728\u7ffb\u8f6c\u65f6\u76f4\u63a5\u4ea4\u6362\u4e24\u9879\u5373\u53ef\u3002\n# $\\text{Code}$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define ull unsigned long long\n#define debug(...) fprintf(stderr,__VA_ARGS__)\n#define ok debug(\"OK\\n\")\nusing namespace std;\n\nconst int N=2e5+100;\ninline ll read(){\n  ll x(0),f(1);char c=getchar();\n  while(!isdigit(c)) {if(c=='-')f=-1;c=getchar();}\n  while(isdigit(c)) {x=(x<<1)+(x<<3)+c-'0';c=getchar();}\n  return x*f;\n}\n\nint n,m;\n\n\n#define pr pair<ll,int>\n#define mkp make_pair\npr operator + (const pr &o,const ll &w){return mkp(o.first+w,o.second);}\n\nint tr[N][2],rev[N],f[N];\nll sum[N],w[N];\npr dis1[N],dis2[N];\nmultiset<pr>s[N];\n#define ls(x) tr[x][0]\n#define rs(x) tr[x][1]\ninline bool nroot(int x){return ls(f[x])==x||rs(f[x])==x;}\ninline bool which(int x){return rs(f[x])==x;}\n\ninline void pushup(int x){\n  sum[x]=w[x]+sum[ls(x)]+sum[rs(x)];\n  \n  dis1[x]=s[x].empty()?mkp(w[x],x<=n?x:-1):(*s[x].rbegin())+w[x];\n  if(rs(x)) dis1[x]=max(dis1[x],dis1[rs(x)]+w[x]);\n  if(ls(x)) dis1[x]=max(dis1[ls(x)],dis1[x]+sum[ls(x)]);\n  \n  dis2[x]=s[x].empty()?mkp(w[x],x<=n?x:-1):(*s[x].rbegin())+w[x];\n  if(ls(x)) dis2[x]=max(dis2[x],dis2[ls(x)]+w[x]);\n  if(rs(x)) dis2[x]=max(dis2[rs(x)],dis2[x]+sum[rs(x)]);\n  \n  return;\n}\ninline void Rev(int x){\n  if(x){\n    rev[x]^=1;\n    swap(ls(x),rs(x));\n    swap(dis1[x],dis2[x]);\n  }\n  return;\n}\ninline void pushdown(int x){\n  if(rev[x]){\n    rev[x]=0;\n    Rev(ls(x));\n    Rev(rs(x));\n  }\n  return;\n}\nvoid dfs(int x){\n  if(!x) return;\n  pushdown(x);\n  debug(\"x=%d f=%d ls=%d rs=%d w=%lld dis1=(%lld %d) s: \",x,f[x],ls(x),rs(x),w[x],dis1[x].first,dis1[x].second);\n  for(pr o:s[x]) debug(\"(%lld %d) \",o.first,o.second);\n  debug(\"\\n\");\n  dfs(ls(x));dfs(rs(x));\n}\nvoid print(){\n  for(int i=1;i<=n+n-1;i++){\n    if(!nroot(i)) dfs(i);\n  }\n}\ninline void rotate(int x){\n  int fa=f[x],gfa=f[fa];\n  int d=which(x),son=tr[x][d^1];\n  f[x]=gfa;if(nroot(fa)) tr[gfa][which(fa)]=x;\n  f[fa]=x;tr[x][d^1]=fa;\n  if(son) {f[son]=fa;}tr[fa][d]=son;\n  pushup(fa);pushup(x);\n  return;\n}\nint zhan[N];\ninline void splay(int x){\n  int top=0,y=x;\n  zhan[++top]=y;\n  while(nroot(y)) zhan[++top]=y=f[y];\n  while(top) pushdown(zhan[top--]);\n  for(int fa;fa=f[x],nroot(x);rotate(x)){\n    if(nroot(fa)) which(fa)==which(x)?rotate(fa):rotate(x);\n  }\n  return;\n}\ninline void access(int x){\n  for(int y=0;x;y=x,x=f[x]){\n    splay(x);\n    if(rs(x)){\n      s[x].insert(dis1[rs(x)]);\n    }\n    if(y){\n      s[x].erase(s[x].find(dis1[y]));\n    }\n    rs(x)=y;\n    pushup(x);\n  }\n  return;\n}\ninline void makeroot(int x){\n  access(x);splay(x);Rev(x);\n}\ninline void link(int x,int y){\n  makeroot(x);makeroot(y);\n  f[x]=y;\n  s[y].insert(dis1[x]);\n  pushup(y);\n  return;\n}\n\nll mod;\nll D;\nint a,b;\nsigned main(){\n  #ifndef ONLINE_JUDGE\n  freopen(\"a.in\",\"r\",stdin);\n  freopen(\"a.out\",\"w\",stdout);\n  #endif\n  n=read();m=read();mod=read();\n  for(int i=1;i<n;i++){\n    int x=read(),y=read();\n    w[n+i]=read();\n    link(x,n+i);\n    link(y,n+i);\n  }\n  for(int i=1;i<=n;i++){\n    makeroot(i);\n    if(dis1[i].first>D){\n      D=dis1[i].first;\n      a=i;b=dis1[i].second;\n    }\n  }\n  ll lst=0;\n  while(m--){\n    ll x=(read()+lst)%(n-1)+1 +n,ww=(read()+lst)%mod;    \n    makeroot(x);\n    w[x]=ww;pushup(x);\n    int u=a,v=b;\n    D=a=b=0;\n\n    makeroot(u);\n    if(dis1[u].first>=D){\n      D=dis1[u].first;\n      a=u;b=dis1[u].second;\n    }\n    \n    makeroot(v);\n    if(dis1[v].first>=D){\n      D=dis1[v].first;\n      a=v;b=dis1[v].second;\n    }\n\n    printf(\"%lld\\n\",lst=D);\n  }\n  return 0;\n}\n/*\n*/\n \n```\n",
        "postTime": 1649342857,
        "uid": 449265,
        "name": "wind_whisper",
        "ccfLevel": 10,
        "title": "P6845 [CEOI2019] Dynamic Diameter"
    },
    {
        "content": "\u849f\u84bb\u6765\u4e00\u53d1\u652f\u6301\u52a0\u8fb9\u5220\u8fb9\u7684LCT\u9898\u89e3\u3002\n\nLCT\u7684\u8f85\u52a9\u6811\u7ef4\u62a4\u6811\u5185\u7ef4\u62a4\u7684\u662f\u4e00\u6761\u94fe\uff0c\u8003\u8651\u7ef4\u62a4\u8fd9\u6761**\u5b9e\u94fe**\u4e0a\u7684\u6700\u6d45\u548c\u6700\u6df1\u7684\u8282\u70b9\u5230**\u5f53\u524d\u5b50\u6811\u5185**\u7684\u6700\u8fdc\u8ddd\u79bb\u3002\u7531\u4e8e\u8f7b\u8fb9\u5b9e\u9645\u4e0a\u662f\u7236\u4eb2\u4e0e\u8fd9\u68f5Splay\u4e0a\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u8fde\u7684\u8fb9\uff0c\u8bbe$lmx[i]$\u8868\u793a$i$\u8fd9\u68f5**Splay\u5b50\u6811**\u5185\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u5f80\u4e0b\u7684\u6700\u5927\u6df1\u5ea6\u3002\u5f53\u7136\u56e0\u4e3aSplay\u9700\u8981\u652f\u6301\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u7ef4\u62a4\u8fd9\u68f5Splay\u4e0a\u6df1\u5ea6\u6700\u5927\u7684\u70b9\u5f80\u4e0b\u7684\u6700\u5927\u6df1\u5ea6rmx\uff0c\u5f53\u5c06Splay\u7ffb\u8f6c\u8fc7\u6765\u65f6\u76f4\u63a5$swap(lmx,rmx)$\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651lmx\u548crmx\u5982\u4f55\u8f6c\u79fb\u3002\u4ee5lmx\u7684\u8f6c\u79fb\u4e3a\u4f8b\u3002\n\n\u5148\u8003\u8651\u5b9e\u94fe\u7684\u8f6c\u79fb\n\n\u6709\n$$\nlmx[x]=\\max(lmx[x],lmx[son[x][0]])\n$$\n\u5373\u76f4\u63a5\u4ece\u539f\u6811\u7684\u7956\u5148\u8f6c\u79fb\u4e0b\u6765\u3002\n\n\u4ee5\u53ca\n$$\nlmx[x]=\\max(lmx[x],lmx[son[x][1]]+sum[son[x][0]]+len[x])\n$$\n\u5373\u4fdd\u7559\u5b50\u6811\u7684\u7b54\u6848\u518d\u52a0\u4e0a\u7956\u5148\u548c\u81ea\u8eab\u8fd9\u6761\u8fb9\u7684\u8ddd\u79bb\u3002\n\n\u518d\u8003\u8651\u865a\u5b50\u6811\u7684\u8f6c\u79fb\u3002\u7531\u4e8e\u5b9e\u94fe\u4e0a\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u5b9e\u9645\u4e0a\u4e5f\u662f\u539f\u6811\u4e0a\u5b50\u6811\u7684\u6839\u8282\u70b9\u3002\u6240\u4ee5$lmx[x]$\u4e5f\u53ef\u4ee5\u8868\u793a\u4e3a**\u5b50\u6811\u5185\u6df1\u5ea6\u6700\u5c0f\u7684\u8282\u70b9**\u5230\u5b50\u6811\u5185\u4e00\u70b9\u6700\u8fdc\u8ddd\u79bb\uff0c\u90a3\u4e48\u6709\n$$\nlmx[x]=\\max(lmx[x],Chain.Fir+sum[son[x][0]]+len[x])\n$$\n\u5373\u4ece\u865a\u513f\u5b50\u4e2d\u6df1\u5ea6\u6700\u5927\u7684\u8282\u70b9\u8f6c\u79fb\u5373\u53ef\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u53ef\u5220\u5806\u6216\u8005multiset\u6765\u7ef4\u62a4\u3002\n\nrmx\u540c\u7406\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651$mxd[i]$\u6700\u957f\u94fe\u7684\u8f6c\u79fb\u3002\n\n\u4ecd\u7136\u5148\u8003\u8651\u5b9e\u94fe\u7684\u8f6c\u79fb\u6709\n$$\nmxd[x]=\\max(mxd[x],rmx[son[x][0]]+lmx[son[x][1]]+len[x])\n$$\n\u5373\u7956\u5148\u6df1\u5ea6\u6700\u5927\u7684\u70b9\u5230\u5b50\u6811\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u4ee5\u53ca\u81ea\u8eab\u8fd9\u6761\u8fb9\u7684\u8ddd\u79bb\u3002\n\n\u4ee5\u53ca\n$$\nmxd[x]=\\max(mxd[x],mxd[son[x][0]],mxd[son[x][1]])\n$$\n\u5373\u7956\u5148\u548c\u5b50\u6811\u672c\u6765\u5c31\u6709\u7684\u6700\u957f\u94fe\n\n\u518d\u8003\u8651\u865a\u5b50\u6811\u7684\u8f6c\u79fb\n\n\u6700\u957f\u94fe\u6709\u53ef\u80fd\u662f\u865a\u5b50\u6811\u4e2d\u672c\u6765\u5c31\u6709\u7684\u4e00\u6761\u6700\u957f\u94fe\uff0c\u8fd9\u540c\u6837\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53ef\u5220\u5806\u6216\u8005multiset\u7ef4\u62a4\u3002\n$$\nmxd[x]=\\max(mxd[x],Path.Fir)\n$$\n\u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u662f\u4e24\u6761\u865a\u5b50\u6811\u7684\u94fe\u548c\u81ea\u8eab\u8fd9\u6761\u8fb9\u62fc\u8d77\u6765\u7684\uff0c\u6240\u4ee5\u8fd8\u6709\uff1a\n$$\nmxd[x]=\\max(mxd[x],Chain.Fir+Chain.Sec+len[x])\n$$\n\u6700\u540e\u9644\u4e0a\u4ee3\u7801\n\n```cpp\nconst int N=4e5+10;\nint lmx[N],rmx[N],mxd[N];\nint fa[N],len[N],tag[N],son[N][2];\nint sum[N];\nint n,m,MXW,ans,lst_ans;\nvector<int>e[N];\nstruct inandelheap\n{\n\tpriority_queue<int>whl,del;\n\tinline void ist(int x){if(x!=-inf)whl.push(x);}\n\tinline void era(int x){if(x!=-inf)del.push(x);}\n\tinline int Top(){\n\t\twhile(1)\n\t\t{\n\t\t\tif(whl.empty()) return -inf;\n\t\t\tif(del.empty()) return whl.top();\n\t\t\tif(whl.top()==del.top()) whl.pop(),del.pop();\n\t\t\telse return whl.top();\n\t\t}\n\t}\n\tinline int Sec() {\n\t\tint tmp=Top();era(tmp);\n\t\tint tmp2=Top();ist(tmp);\n\t\treturn tmp2;\n\t}\n}chain[N],path[N];\ninline void INS(int u,int v) {chain[u].ist(lmx[v]),path[u].ist(mxd[v]);}\ninline void ERA(int u,int v) {chain[u].era(lmx[v]),path[u].era(mxd[v]);}\ninline int get(int x) {return x==son[fa[x]][1];}\t\ninline int isnotroot(int x) {return son[fa[x]][0]==x||son[fa[x]][1]==x;}\ninline void push_up(int x)\n{\n\tsum[x]=sum[son[x][0]]+sum[son[x][1]]+len[x];\n\tint oth=max(0ll,chain[x].Top());\n\tint up=max(oth,rmx[son[x][0]])+len[x];\n\tint dwn=max(oth,lmx[son[x][1]])+len[x];\n\tlmx[x]=max(lmx[son[x][0]],sum[son[x][0]]+dwn);\n\trmx[x]=max(rmx[son[x][1]],sum[son[x][1]]+up);\n\tmxd[x]=max(lmx[son[x][1]]+up,rmx[son[x][0]]+dwn);\n\tmxd[x]=max(mxd[x],max(mxd[son[x][0]],mxd[son[x][1]]));\n\tmxd[x]=max(mxd[x],path[x].Top());\n\tmxd[x]=max(mxd[x],oth+max(0ll,chain[x].Sec())+len[x]);\n}\n\ninline void rotate(int x){\n\tint f=fa[x],gf=fa[f],wh=get(x);\n\tif(isnotroot(f)) son[gf][get(f)]=x;\n\tson[f][wh]=son[x][wh^1];\n\tfa[son[x][wh^1]]=f;\n\tson[x][wh^1]=f;\n\tfa[f]=x;\n\tfa[x]=gf;\n\tpush_up(f);\n\tpush_up(x);\n}\n\ninline void splay(int x)\n{\n\tfor(int f;f=fa[x],isnotroot(x);rotate(x))\n\t\tif(isnotroot(f)) rotate(get(x)==get(f)?f:x);\n}\ninline int access(int x)\n{\n\tint y;\n\tfor(y=0;x;y=x,x=fa[x]) {splay(x);if(y)ERA(x,y);if(son[x][1])INS(x,son[x][1]);son[x][1]=y,push_up(x);}\n\treturn y;\n}\nvoid dfs1(int u) \n{\n\tfor(int v:e[u]) if(v^fa[u])\n\t{\n\t\tfa[v]=u;\n\t\tdfs1(v);\n\t\tINS(u,v);\n\t}\n\tpush_up(u);\n}\n\ninline void modify(int u,int d)\n{\t\n\taccess(u);\n\tsplay(u);\n\tlen[u]=d;\n\tpush_up(u);\n\tans=mxd[u];\n}\n\nsigned main()\n{\n\tn=read(),m=read(),MXW=read();\n\tint u,v,d;\n\tR(i,1,n-1)\n\t{\n\t\tu=read(),v=read(),d=read();\n\t\te[u].pb(i+n),e[i+n].pb(u);\n\t\te[v].pb(i+n),e[i+n].pb(v);\n\t\tlen[i+n]=d;\n\t}\n\tdfs1(1);\n\twhile(m--)\n\t{\n\t\tu=read(),d=read();\n\t\tu=(u+lst_ans)%(n-1)+1;\n\t\td=(d+lst_ans)%MXW;\n\t\t//printf(\"u:%lld val:%lld\\n\",u,d);\n\t\tmodify(u+n,d);\n\t\twriteln(lst_ans=ans);\n\t}\n}\n```\n\n\n",
        "postTime": 1617799668,
        "uid": 115779,
        "name": "\u6781\u5bd2\u795e\u51b0",
        "ccfLevel": 0,
        "title": "P6845 [CEOI2019] Dynamic Diameter \u9898\u89e3"
    },
    {
        "content": "### $\\text{[CEOI2019] Dynamic Diameter}$ \u9898\u89e3\n\n~~\u4e3a\u4ec0\u4e48\u6ca1\u6709\u4eba\u5199DDP\uff0c\u4e3a\u4ec0\u4e48\u6211\u7684DDP\u6bd4\u6b27\u62c9\u5e8f\u8fd8\u5feb\u3002~~\n\n\u9996\u5148\u5bf9\u4e8e\u6811\u7684\u76f4\u5f84\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u975e\u5e38\u66b4\u529b\u7684DP\uff0c\u8bbe $f_{u,0/1}$ \u8868\u793a\u5728 $u$ \u7684\u5b50\u6811\u5185\u9009\u62e9\u4e00\u6761\u5b8c\u6574\u7684\u94fe\u548c\u9009\u62e9\u4e00\u6761\u8fd8\u53ef\u4ee5\u5411\u4e0a\u8d70\u7684\u94fe(\u5e76\u4e14\u5305\u542b\u5411\u4e0a\u8d70\u7684\u90a3\u4e00\u6761\u8fb9)\u7684\u6700\u5927\u6743\u503c\uff0c\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a\n$$\nf_{u,0}=\\max{f_{v,0}+w_{fa_u,u}},f_{u,1}=\\max\\{f_{v,1},f_{v,0}+f_{u,0}\\}\n$$\n\u6211\u4eec\u8bbe $g_{u,0/1}$ \u662f\u9664\u4e86 $u$ \u7684\u91cd\u513f\u5b50\u7684\u8d21\u732e\u3002\n\n\u5bf9\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u52a8\u6001DP\uff0c\u6784\u9020\u8f6c\u79fb\u77e9\u9635\u5982\u4e0b\uff1a\n$$\n\\begin{bmatrix} 0 & -inf & g_{u,0} \\\\ g_{u,0} & 0 & g_{u,1} \\\\ -inf & -inf & 0 \\end{bmatrix}\n$$\n\u8f6c\u79fb\u5c31\u662f\uff1a\n$$\n\\begin{bmatrix} 0 & -inf & g_{u,0} \\\\ g_{u,0} & 0 & g_{u,1} \\\\ -inf & -inf & 0 \\end{bmatrix} \\times \\begin{bmatrix} f_{son_u},0 \\\\ f_{son_u},1 \\\\ 0 \\end{bmatrix}=\\begin{bmatrix} f_{u},0 \\\\ f_{u},1 \\\\ 0 \\end{bmatrix}\n$$\n\u6211\u4eec\u7528\u91cd\u94fe\u5256\u5206\u5957\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u4e2a\u77e9\u9635\uff0c\u5bf9\u4e8e\u4fee\u6539\u6211\u4eec\u5bf9\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e24\u4e2a`multiset`\u5206\u522b\u7ef4\u62a4\u4e0d\u4e3a\u91cd\u513f\u5b50\u7684\u70b9 $v$ \u7684 $f_{v,0},f_{v,1}$ \u7684\u503c\uff0c\u8fd9\u6837\u5c31\u65b9\u4fbf\u8f6c\u79fb\u4e86\uff08\u9009\u62e9\u4e24\u6761\u6700\u957f\u7684\u94fe\u6216\u8005\u9009\u62e9\u5b50\u6811\u5185\u6700\u957f\u7684\u94fe\uff09\u3002\n\n\u8fd9\u6837\u505a\uff0c\u7531\u4e8e\u6bcf\u6b21\u53ea\u4f1a\u5bf9\u6240\u6709\u8df3\u8fc7\u7684\u70b9\u7684`multiset`\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u4e3a $\\Theta(Tn\\log^2n)$ \uff08\u5176\u4e2dT\u4e3a\u77e9\u9635\u4e58\u6cd5\u7684\u590d\u6742\u5ea6\uff0c\u4e3a $3^3=27$\uff09 \u7684\uff0c\u867d\u7136\u770b\u8d77\u6765\u5f88\u4e0d\u53ef\u8fc7\u7684\u6837\u5b50\uff0c\u4f46\u662f\u8fd9\u53ea\u662f\u7406\u8bba\uff0c\u5b9e\u8df5\u8d77\u6765\u751a\u81f3\u6bd4\u6709\u7684\u5b9e\u73b0\u8f83\u52a3\u7684\u6b27\u62c9\u5e8f+\u7ebf\u6bb5\u6811\u8fd8\u8981\u5feb\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define FOR(i,a,b) for(int i=a;i<=b;++i)\n#define REP(u) for(int i=p[u];i!=-1;i=e[i].nxt)\n#define ll long long\n#define sz(x) (int)(x.size())\n#define PII pair<int,int>\n#define pb push_back\n#define rd (rand()<<16^rand())\n#define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++)\nusing namespace std;\nchar buf[100000],*p1=buf,*p2=buf;\ninline ll gi()\n{\n\tll x=0,f=1;char ch=gc;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=gc;}\n\twhile(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48),ch=gc;}\n\treturn (f==1)?x:-x;\n}\nconst int maxn=1e5+5;\nconst ll inf=1e18;\nint n,q,a,b;\nll W;\nint u[maxn],v[maxn];\nvector<pair<int,ll> >e[maxn];\nll dep[maxn],w[maxn];\nstruct Matrix\n{\n\tll a[3][3];\n\tinline void clear(){memset(a,0xcf,sizeof(a));}\n\tinline Matrix operator * (const Matrix &b)const\n\t{\n\t\tMatrix c;c.clear();\n\t\tFOR(k,0,2)FOR(i,0,2)FOR(j,0,2)c.a[i][j]=max(c.a[i][j],a[i][k]+b.a[k][j]);\n\t\treturn c;\n\t}\n};\n///HLD\nint dfn[maxn],tot,son[maxn];\nll f[maxn][2];\nint fa[maxn],tp[maxn],bot[maxn],siz[maxn],rk[maxn];\ninline void dfs(int u)\n{\n\tdep[u]=dep[fa[u]]+1;\n\tsiz[u]=1;f[u][0]=f[u][1]=0;\n\tfor(auto x:e[u])\n\t{\n\t\tint v=x.first;ll w=x.second;\n\t\tif(v==fa[u])continue;\n\t\tfa[v]=u,dfs(v),siz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])son[u]=v;\n\t\tf[u][1]=max(f[u][1],max(f[v][1],f[u][0]+f[v][0]+w));\n\t\tf[u][0]=max(f[u][0],f[v][0]+w);\n\t}\n\tf[u][1]=max(f[u][1],f[u][0]);\n}\nMatrix now[maxn];\nmultiset<ll>s[maxn],s2[maxn]; \nll val[maxn];\ninline void work(int u)\n{\n\tmemset(now[u].a,0,sizeof(now[u].a));\n\tif(!son[u])return now[u].a[0][0]=val[u],void();///special\n\tnow[u].a[0][0]=val[u];\n\tnow[u].a[0][1]=now[u].a[2][0]=now[u].a[2][1]=-inf;\n\tif(!s[u].empty())now[u].a[0][2]=*(--s[u].end());\n\tnow[u].a[1][0]=now[u].a[0][2],now[u].a[0][2]+=val[u];\n\tif(!s2[u].empty())now[u].a[1][2]=*(--s2[u].end());\n\tnow[u].a[1][2]=max(now[u].a[1][2],now[u].a[1][0]);\n\tif(s[u].size()>=2)now[u].a[1][2]=max(now[u].a[1][2],*(--s[u].end())+(*(--(--s[u].end()))));\n}\ninline void dfs2(int u,int topf)\n{\n\ts[u].clear();\n\tdfn[u]=++tot,rk[tot]=u;tp[u]=topf;\n\tif(son[u])dfs2(son[u],topf),bot[u]=bot[son[u]];\n\telse bot[u]=u;\n\t///g expect the heavy son\n\tfor(auto x:e[u])\n\t{\n\t\tint v=x.first;ll w=val[v];\n\t\tif(v==fa[u]||v==son[u])continue;\n\t\tdfs2(v,v);\n\t\ts[u].insert(f[v][0]+w);s2[u].insert(f[v][1]);\n\t}\n\twork(u);\n}\n///HLD \nstruct segmentree\n{\n\t#define ls u<<1\n\t#define rs u<<1|1\n\tstatic const int maxn=4e5+5;\n\tMatrix sum[maxn];\n\tinline void pushup(int u)\n\t{\n\t\tsum[u]=sum[ls]*sum[rs];\n\t}\n\tinline void build(int u,int l,int r)\n\t{\n\t\tif(l==r)return sum[u]=now[rk[l]],void();\n\t\tint mid=(l+r)>>1;\n\t\tbuild(ls,l,mid),build(rs,mid+1,r);\n\t\tpushup(u);\n\t}\n\tinline void update(int u,int l,int r,int x)\n\t{\n\t\tif(l==r)return sum[u]=now[rk[l]],void();\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid)update(ls,l,mid,x);\n\t\telse update(rs,mid+1,r,x);\n\t\tpushup(u);\n\t}\n\tinline Matrix query(int u,int l,int r,int x,int y)\n\t{\n\t\tif(x<=l&&y>=r)return sum[u];\n\t\tint mid=(l+r)>>1;\n\t\tif(y<=mid)return query(ls,l,mid,x,y);\n\t\tif(x>mid)return query(rs,mid+1,r,x,y);\n\t\treturn query(ls,l,mid,x,y)*query(rs,mid+1,r,x,y);\n\t}\n}tree;\ninline void update(int v,ll w)\n{\n\tnow[v].a[0][0]+=w,now[v].a[0][2]+=w;\n\twhile(v)\n\t{\n\t\tMatrix temp=tree.query(1,1,n,dfn[tp[v]],dfn[bot[v]]);\n\t\ttree.update(1,1,n,dfn[v]);\n\t\tif(tp[v]!=1)\n\t\t{\n\t\t\tint u=v;\n\t\t\tMatrix temp2=tree.query(1,1,n,dfn[tp[u]],dfn[bot[u]]);\n\t\t\ts[fa[tp[u]]].erase(s[fa[tp[u]]].find(temp.a[0][0]));\n\t\t\ts[fa[tp[u]]].insert(temp2.a[0][0]);\n\t\t\ts2[fa[tp[u]]].erase(s2[fa[tp[u]]].find(temp.a[1][0]));\n\t\t\ts2[fa[tp[u]]].insert(temp2.a[1][0]);\n\t\t\twork(fa[tp[u]]);\n\t\t}\n\t\tv=fa[tp[v]];\n\t}\n}\ninline void init()\n{\n\n}\ninline void input()\n{\n\tn=gi(),q=gi(),W=gi();\n\tFOR(i,1,n-1)\n\t{\n\t\tu[i]=gi(),v[i]=gi(),w[i]=gi();\n\t\te[u[i]].pb({v[i],w[i]});e[v[i]].pb({u[i],w[i]});\n\t}\n}\ninline void solve()\n{\n\tdfs(1);\n\tFOR(i,1,n-1)if(dep[u[i]]>dep[v[i]])swap(u[i],v[i]);\n\tFOR(i,1,n-1)val[v[i]]=w[i];\n\tdfs2(1,1);\n\ttree.build(1,1,n);\n\tll ans=0;\n\tFOR(i,1,q)\n\t{\n\t\tint d=gi();ll value=gi();\n\t\td=(d+ans)%(n-1)+1,value=(value+ans)%W;\n\t\tupdate(v[d],value-val[v[d]]);\n\t\tval[v[d]]=value;\n\t\tans=tree.query(1,1,n,dfn[1],dfn[bot[1]]).a[1][0];\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n}\nint main()\n{\n//\tfreopen(\"diameter.in\",\"r\",stdin);\n//\tfreopen(\"diameter.out\",\"w\",stdout);\n\tinit();\n\tinput();\n\tsolve();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1617370153,
        "uid": 333789,
        "name": "lory1608",
        "ccfLevel": 9,
        "title": "[CEOI2019] Dynamic Diameter\u9898\u89e3"
    },
    {
        "content": "[My Blog](https://www.cnblogs.com/lyttt/p/14075116.html)\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/CF1192B)\n\n### \u9898\u76ee\u89e3\u6790\n\n\u5514\uff0c\u9996\u5148\u6709\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684\u5927\u6982\u662f$nq$\u7ea7\u522b\u590d\u6742\u5ea6\u7684\u505a\u6cd5\uff0c\u5c31\u662f\u66b4\u529b\u4fee\u6539\uff0c\u7136\u540e$dfs$\u4e24\u6b21\u7b97\u51fa\u76f4\u5f84\u3002\n\n\uff08\u4e0d\u8fc7\u8fd9\u6ca1\u6709\u4ec0\u4e48\u7528\u5c31\u662f\u4e86\n\n\u56e0\u4e3a\u6709\u4fee\u6539\uff0c\u6211\u4eec\u5c1d\u8bd5\u628a\u6811\u4e0b\u4e0b\u6765\uff0c\u653e\u5230\u5e8f\u5217\u4e0a\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u6811\u94fe\u5256\u5206\uff1f\n\n\u4e0d\uff0c\u592a\u9ebb\u70e6\u558f\uff0c\u6211\u4eec\u77e5\u9053\u6b27\u62c9\u5e8f\u8fd9\u4e2a\u4e1c\u897f\u662f\u53ef\u4ee5\u529e\u5230\u7684\uff0c\u5e76\u4e14\u6211\u4eec\u4e4b\u524d\u5c31\u7528\u5b83\u7684\u6027\u8d28\u6c42\u8fc7$lca$\uff1a\u4e24\u4e2a\u70b9\u5bf9\u5e94\u7684\u6b27\u62c9\u5e8f\u533a\u95f4\u4e2d\uff0c\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u5c31\u662f\u8fd9\u4e24\u4e2a\u70b9\u7684$lca$\u3002\n\n\u5177\u4f53\u800c\u8a00\uff0c\u8bbe$u$\u5728\u6b27\u62c9\u5e8f\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e3a$l$\uff0c$v$\u5728\u6b27\u62c9\u5e8f\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e3a$r$\uff0c\u6b27\u62c9\u5e8f\u6570\u7ec4\u4e3a$E[]$\uff0c\u90a3\u4e48$lca=E[x],l<=x<=r,dep[E[x]]<=dep[E[l...r]]$\n\n\u5982\u679c\u4e0d\u77e5\u9053\u8fd9\u4e2a\u7ed3\u8bba\u53ef\u4ee5\u770b\u770b [\u8fd9\u4e2a](https://blog.csdn.net/CQBZLYTina/article/details/88660040)\n\n\u90a3\u4e48$dist(u,v)=dis[u]+dis[v]-2\\times dis[lca]$\uff0c$dis[i]$\u6307\u4ece$1$\u5230$i$\u7684\u8ddd\u79bb\u3002\n\n\u6839\u636e\u5b9a\u4e49\uff0c\u6811\u7684\u76f4\u5f84\u662f\u6240\u6709\u70b9\u5bf9$dist$\u7684\u6700\u5927\u503c\n\n\u5982\u679c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff08\u76f8\u5f53\u4e8e\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e0e\u6b27\u62c9\u5e8f\u6570\u7ec4\u5bf9\u5e94\u7684\u70b9\u7684$dis$\uff0c\u957f\u5ea6\u4e3a$2n-1$\uff0c\u5b8c\u6210\u628a\u6811\u53d8\u6210\u5e8f\u5217\u7684\u4efb\u52a1\uff09\uff0c\u90a3\u5bf9\u4e8e\u533a\u95f4$[l,r]$\u7684\u7b54\u6848\u957f\u8fd9\u4e2a\u6837\u5b50\uff1a\n\n$max\\{dis[i]+dis[j]-2\\times dis[lca(i,j)]\\},l<=i<=j<=r$\n\n\u6211\u4eec\u6ce8\u610f\u5230$lca$\u5bf9\u4e8e$i,j$\u6765\u8bf4\u662f\u4e00\u4e2a$rmq$\u95ee\u9898\uff0c\u90a3......\u7ebf\u6bb5\u6811\u5957\u7ebf\u6bb5\u6811\uff1f\n\n\u6ca1\u6709\u5fc5\u8981\u3002\n\n\u5177\u4f53\u5230\u8fd9\u9053\u9898\u800c\u8a00\uff0c\u7531\u4e8e\u8fb9\u6743\u90fd\u662f\u6b63\u6570\uff0c\u6240\u4ee5$lca$\u4e5f\u662f$dis$\u6700\u5c0f\u7684\u90a3\u4e2a\u70b9\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u7b54\u6848\u5316\u4e3a\u8fd9\u4e2a\u6837\u5b50\uff1a\n\n$max\\{dis[i]+dis[j]-2\\times dis[k] \\},l<=i<=k<=j<=r$\n\n\u56e0\u4e3a$dis$\u524d\u9762\u662f\u8d1f\u53f7\uff0c\u6240\u4ee5\u8ba9\u8fd9\u4e2a\u503c\u53d6$max$\u7684\u90a3\u4e2a\u4f4d\u7f6e\u4e00\u5b9a\u662f$dis[k]$\u6700\u5c0f\u7684\u90a3\u4e2a\u70b9\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u518d\u7ef4\u62a4$[i,j]$\u4e4b\u95f4\u7684\u6700\u5c0f\u503c\uff0c\u800c\u662f\u5728\u7ef4\u62a4\u4e0a\u8ff0\u7b54\u6848\u7684\u65f6\u5019\u81ea\u7136\u5c31\u5904\u7406\u4e86\uff08\u6211\u611f\u89c9\u8fd9\u91cc\u7f51\u4e0a\u5f88\u591a\u9898\u89e3\u90fd\u6ca1\u6709\u8bf4\u6e05\u695a\uff0c\u6211\u770b\u4e86\u597d\u4e45\uff09\n\n------\n\n\u63a5\u4e0b\u6765\u8003\u8651\u600e\u4e48\u7ef4\u62a4\u4e0a\u8ff0\u7b54\u6848\uff0c\u4e3b\u8981\u662f\u8981\u4fbf\u4e8e\u533a\u95f4\u5408\u5e76\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u7b54\u6848\u770b\u6210\u4e09\u90e8\u5206\uff1a$dis[i],dis[j],-2\\times dis[k]$\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\uff0c\u7ef4\u62a4\uff1a\n\n$mx=max(dis[i]),l<=i<=r$\n\n$mn=min(dis[i]),l<=i<=r$\uff0c\uff08\u4e3b\u8981\u662f\u4e3a\u4e86$-2\\times dis[k]$\uff0c\u7ef4\u62a4$max(-dis[i])$\u4e5f\u53ef\n\n$res=max\\{dis[i]+dis[j]-2\\times dis[k] \\},l<=i<=k<=j<=r$\n\n\u4e3a\u4e86\u65b9\u4fbf\u5de6\u53f3\u513f\u5b50\u5408\u5e76\uff0c\u4e5f\u5c31\u662f$i,j$\u53ef\u4ee5\u6765\u6e90\u4e8e\u5de6\u53f3\u4e0d\u540c\u513f\u5b50\uff0c\u5408\u5728\u4e00\u8d77\u662f\u4e00\u4e2a\u66f4\u6709\u7684\u7b54\u6848\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u7ef4\u62a4\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n$rmx=max(dis[i]-2\\times dis[j]),i<=j$\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u770b\u6210\u6211\u4eec\u8fd8\u9700\u8981\u5728\u53f3\u8fb9\u627e\u4e00\u4e2a\u53f3\u7aef\u70b9\u6765\u7ec4\u6210\u7b54\u6848\u3002\n\n\u540c\u7406\uff0c$lmx=max(dis[i]-2\\times dis[j]),i<=j$\n\n------\n\n\u7136\u540e\u7ef4\u62a4\u7ebf\u6bb5\u6811\uff1a\n\n$t.mx=max(lc.mx,rc.mx)$\n\n$t.mn=min(lc.mn,rc.mn)$\n\n$t.res=max(max(lc.res,rc.res),max(lc.rmx+rc.mx,rc.lmx+lc.mx))$\n\n$t.rmx=max(max(lc.rmx,rc.rmx),lc.mx-2rc.mn)$\n\n$t.lmx=max(max(lc.lmx,rc.lmx),rc.mx-2lc.mn)$\n\n\u6700\u540e\u67e5\u8be2\u7684\u65f6\u5019\u662f\u67e5\u8be2\u6574\u68f5\u6811\u7684\u76f4\u5f84\uff0c\u6240\u4ee5\u4e0d\u7528\u5199$query$\n\n------\n\n\u4fee\u6539\u7684\u65f6\u5019\uff0c\u7b54\u6848\u53ea\u4f1a\u5bf9\u8fd9\u6761\u8fb9\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u7684\u5b50\u6811\u7684\u7b54\u6848\u4ea7\u751f\u5f71\u54cd\uff0c\u6240\u4ee5\u5bf9\u5b50\u6811\u8fdb\u884c\u66f4\u65b0\u5373\u53ef\uff08\u5b50\u6811\u5728\u6b27\u62c9\u5e8f\u4e2d\u662f\u8fde\u7eed\u4e00\u6bb5\u533a\u95f4\n\n------\n\n### \u25baCode View\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\nusing namespace std;\n#define N 200005\n#define M 200005\n#define MOD 998244353\n#define INF 0x3f3f3f3f\n#define LL long long\nLL rd()\n{\n\tLL x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') f=-1; c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+(c^48); c=getchar();}\n\treturn f*x;\n}\nstruct edge{\n\tint nxt,v;LL w;\n}e[M<<1];\nint hd[N],cnt=1;\nvoid add(int u,int v,LL w)\n{\n\te[++cnt].nxt=hd[u];\n\te[cnt].v=v;\n\te[cnt].w=w;\n\thd[u]=cnt;\n}\n\nstruct node{\n\tLL res/*\u76f4\u5f84*/,mx/*dis\u6700\u5927*/,mn/*dis\u6700\u5c0f*/;\n\tLL rmx/*dis_i-2dis_j(i<=j)\u7684\u6700\u5927\u503c \u5dee\u4e00\u4e2a\u53f3\u7aef\u70b9*/,lmx/*\u540c\u7406 dis_i-2dis_j(i>=j)\u7684\u6700\u5927\u503c*/;\n}tree[N<<2];\nLL tag[N<<2];\nint n,Q;\nLL W;\nLL dis[N];\nint E[N<<1],tim;//\u6b27\u62c9\u5e8f \nint d1[N],d2[N];//\u51fa\u53bb\u8fdb\u6765\u7684\u65f6\u95f4 \u5373\u70b9i\u5728\u6b27\u62c9\u5e8f\u4e2d\u7684\u6700\u5de6/\u6700\u53f3\u4f4d\u7f6e \nvoid dfs(int u,int fa)\n{\n\tE[++tim]=u;\n\td1[u]=tim;\n\tfor(int i=hd[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;LL w=e[i].w;\n\t\tif(v==fa) continue;\n\t\tdis[v]=dis[u]+w;\n\t\tdfs(v,u);\n\t\tE[++tim]=u;\n\t}\n\td2[u]=tim;\n}\nnode Merge(node x,node y)\n{\n\tnode t;\n\tt.mx=max(x.mx,y.mx);\n\tt.mn=min(x.mn,y.mn);\n\tt.rmx=max(max(x.rmx,y.rmx),x.mx-2*y.mn);\n\tt.lmx=max(max(x.lmx,y.lmx),y.mx-2*x.mn);\n\tt.res=max(max(x.res,y.res),max(x.mx+y.lmx,y.mx+x.rmx));\n\treturn t;\n}\nvoid PushUp(int i)\n{\n\ttree[i]=Merge(tree[i<<1],tree[i<<1|1]);\n}\nvoid Build(int i,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tint u=E[l];\n\t\ttree[i].mx=tree[i].mn=dis[u];\n\t\ttree[i].rmx=tree[i].lmx=-dis[u];//dis_u-2*dis_u=-dis_u\n\t\ttree[i].res=0;//\u4e00\u4e2a\u70b9\u4e0d\u80fd\u6784\u6210\u76f4\u5f84\n\t\ttag[i]=0;\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tBuild(i<<1,l,mid);\n\tBuild(i<<1|1,mid+1,r);\n\tPushUp(i);\n\treturn ;\n}\nvoid Modify(int i,LL val)\n{\n\ttree[i].mx+=val,tree[i].mn+=val;\n\ttree[i].lmx-=val,tree[i].rmx-=val;//delta=(dis_i-val)-2*(dis_j-val)-(dis_i-2*dis_j)\n\ttag[i]+=val;\n}\nvoid PushDown(int i)\n{\n\tif(tag[i])\n\t{\n\t\tModify(i<<1,tag[i]);\n\t\tModify(i<<1|1,tag[i]);\n\t\ttag[i]=0;\n\t}\n}\nvoid Update(int i,int l,int r,int ql,int qr,LL val)\n{\n\tif(ql<=l&&r<=qr)\n\t{\n\t\tModify(i,val);\n\t\treturn ;\n\t}\n\tPushDown(i);\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) Update(i<<1,l,mid,ql,qr,val);\n\tif(qr>mid) Update(i<<1|1,mid+1,r,ql,qr,val);\n\tPushUp(i);\n}\nint main()\n{\n\tn=rd(),Q=rd(),W=rd();\n\tfor(int i=1;i<=n-1;i++)\n\t{\n\t\tint u=rd(),v=rd();LL w=rd();\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\tdfs(1,0);\n\tBuild(1,1,tim);\n\tLL ans=0;\n\twhile(Q--)\n\t{\n\t\tint id=rd(),u;LL d=rd();\n\t\tid=(id+ans)%(n-1)+1;\n\t\td=(d+ans)%W;\n\t\tif(dis[e[id<<1].v]<dis[e[id<<1|1].v]) id=(id<<1|1),u=e[id].v;\n\t\telse id=(id<<1),u=e[id].v;\n\t\tUpdate(1,1,tim,d1[u],d2[u],d-e[id].w);\n\t\te[id].w=e[id^1].w=d;\n\t\tans=tree[1].res;\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n/*\n\u4fee\u6539\u662f\u7ed9\u7684\u8fb9\u7684\u7f16\u53f7 \u8fd9\u4e2a\u65f6\u5019\u8fd8\u662f\u5199\u524d\u5411\u661f\u597d\u4e00\u70b9\u5427\n(\u600e\u4e48\u611f\u89c9vector\u4e00\u65e0\u662f\u5904\u4e86qwq \n*/\n```",
        "postTime": 1606901367,
        "uid": 41165,
        "name": "Starlight_Glimmer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6845 \u3010[CEOI2019] Dynamic Diameter\u3011"
    },
    {
        "content": "\u88f8\u7684\u52a8\u6001\u6811\u76f4\u5f84\uff0c\u8fd9\u9898\u4fee\u6539\u7684\u5219\u662f\u4e00\u68f5\u5f62\u6001\u56fa\u5b9a\u7684\u6811\u7684\u8fb9\u6743\uff0c\u5f3a\u5236\u5728\u7ebf\n\n\u8fd9\u91cc\u63d0\u4f9b\u4e24\u79cd\u601d\u8def\n\n# 1. ddp\n\n\u672c\u8eab\u6c42\u76f4\u5f84\u7684\u8fc7\u7a0b\u5c31\u662fdp\uff0c\u60f3\u5230\u52a8\u6001dp\u4e5f\u662f\u5f88\u81ea\u7136\u7684\u4e8b\u60c5\n\n~~\u800c\u4e14\u8fd9\u9898\u65f6\u9650\u8ddf\u7a7a\u95f4\u90fd\u5f88\u6709\u8ff7\u60d1\u6027~~\n\n\u4f46\u7531\u4e8e\u672c\u4eba\u4e0d\u4f1a $O(n\\log n)$ \u7684\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u7c97\u7565\u7b97\u4e86\u4e00\u4e0b\u6811\u5256\u7684\u590d\u6742\u5ea6\uff0c\u611f\u89c9\u8fc7\u4e0d\u4e86\u5c31\u6ca1\u6709\u518d\u63a8\u8f6c\u79fb\u77e9\u9635\u4e86\n\n\u7528ddp\u6700\u4f18\u590d\u6742\u5ea6\u4f3c\u4e4e\u662f $O(T(n+q\\log n))$\uff0cT \u662f\u77e9\u9635\u4e58\u7684\u590d\u6742\u5ea6\uff0c\u6b64\u9898\u4f3c\u4e4e $T=27$\n\n# 2. \u6b27\u62c9\u5e8f\n\n\u672c\u8d28\u8ddfddp\u7684\u601d\u60f3\u4e00\u6837\uff0c\u628a\u6811\u8f6c\u6362\u6210\u7ebf\u6027\u95ee\u9898\u7ef4\u62a4\n\n\u6811\u5256\u662f\u628a\u6811\u5256\u6210\u7ebf\u6027\u7684\u94fe\uff0c\u6b27\u62c9\u5e8f\u5219\u662f\u628a\u6574\u68f5\u6811\u62c9\u6210\u4e00\u4e2a\u5e8f\u5217\n\n\u4e0d\u61c2\u6b27\u62c9\u5e8f\u7684\u540c\u5b66\u53ef\u4ee5[\u6233\u8fd9\u91cc](https://blog.csdn.net/m0_37809890/article/details/82856158)\uff0c\u987a\u4fbf\u4e86\u89e3\u4e00\u4e0b\u600e\u6837\u7528\u6b27\u62c9\u5e8f $O(n \\log n) - O(1)$ \u6c42 LCA\n\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u628a\u6c42\u76f4\u5f84\u53d8\u6210\u4e86\u7ebf\u6027\u7ef4\u62a4\u533a\u95f4\u7684\u95ee\u9898\uff1a\n\n\u6c42\u4e00\u4e2a\u533a\u95f4 $[L,R]$\uff0c\u4f7f\u5f97 $ A_L+A_R-2\\min_{i=L}^{R} A_i $ \u6700\u5927\n\n\u5176\u4e2d $A$ \u662f\u6b27\u62c9\u5e8f\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u5bf9\u5e94\u7ed3\u70b9\u7684\u6df1\u5ea6\u6784\u6210\u7684\u6570\u5217\n\n\u6839\u636e\u6811\u7684\u6b27\u62c9\u5e8f\u7684\u6027\u8d28\uff0c$ \\min_{i=L}^{R} A_i $ \u5c31\u662f\u6b27\u62c9\u5e8f $L,R$ \u5bf9\u5e94\u7ed3\u70b9\u7684 LCA \u6df1\u5ea6\uff0c\u90a3\u4e48 $ A_L+A_R-2\\min_{i=L}^{R} A_i $ \u81ea\u7136\u5c31\u662f\u8fd9\u4e24\u4e2a\u7ed3\u70b9\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u6700\u5927\u5316\uff0c\u5b83\u5c31\u662f\u76f4\u5f84\n\n\u7531\u4e8e\u6709\u4fee\u6539+\u533a\u95f4\u95ee\u9898\uff0c\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u96be\u70b9\u81ea\u7136\u843d\u5728\u4e86\u7ef4\u62a4\u4ec0\u4e48\u3001\u600e\u4e48\u7ef4\u62a4\n\n\u6bcf\u4e2a\u7ed3\u70b9\u6211\u4eec\u7ef4\u62a4\u51e0\u4e2a\u4fe1\u606f\uff1a\n\n1. \u6574\u4e2a\u533a\u95f4\u7684\u76f4\u5f84\n\n2. \u6574\u4e2a\u533a\u95f4\u5185\u6df1\u5ea6\u6700\u5c0f\u7684\u7ed3\u70b9\n\n3. \u6574\u4e2a\u533a\u95f4\u5185\u6df1\u5ea6\u6700\u5927\u7684\u7ed3\u70b9\n\n4. \u533a\u95f4\u5185 $ A_i-2A_j $ \u7684\u6700\u5927\u503c\uff08$i\\leq j$\uff09\n\n5. \u533a\u95f4\u5185 $ A_i-2A_j $ \u7684\u6700\u5927\u503c\uff08$i\\geq j$\uff09\n\n6. \u533a\u95f4\u52a0\u61d2\u6807\u8bb0\n\n\u8fd9\u91cc\u8981\u7ef4\u62a4\u533a\u95f4\u52a0\u61d2\u6807\u8bb0\u7684\u539f\u56e0\u662f\uff0c\u5f53\u4e00\u6761\u8fb9\u7684\u6743\u503c\u88ab\u4fee\u6539\u4e86\uff0c\u4ec5\u4f1a\u5f71\u54cd\u5230\u4ee5\u6df1\u5ea6\u8f83\u5927\u7684\u7aef\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5185\u7684\u7ed3\u70b9\u7684\u6df1\u5ea6\uff0c\u5404\u4fe1\u606f\u81ea\u7136\u4e5f\u4f1a\u53d8\u5316\n\n\u8bbe\u53d8\u5316\u91cf\u4e3a $\\Delta $\uff0c\u5219\u5b50\u6811\u5185\u7ed3\u70b9\u7684\u6df1\u5ea6\u90fd\u8981 $ +\\Delta $\uff0c\u4e8e\u662f\u8981\u6253\u4e0a\u533a\u95f4\u52a0\u6807\u8bb0\n\n\u600e\u6837\u505a\u533a\u95f4\u5408\u5e76\u6807\u8bb0\u4e0b\u4f20\u5c31~~\u4f5c\u4e3a\u601d\u8003\u9898\u4e86~~\uff0c\u5e76\u4e0d\u662f\u5341\u5206\u5730\u96be\uff0c\u6ce8\u610f\u5206\u7c7b\u8ba8\u8bba\u5c31\u884c\u4e86\u3002\u5982\u679c\u8fd8\u662f\u4e0d\u4f1a\u7684\u8bdd\u2026\u2026\u53ef\u4ee5\u79c1\u4fe1\u95ee\u6211\n\n\u8be6\u7ec6\u65b9\u6cd5\u7684\u8bdd\u53ef\u4ee5\u770b\u6211\u7684\u4ee3\u7801\uff0c\u516d\u4e2a\u4fe1\u606f\u5728\u7ed3\u6784\u4f53\u91cc\u4f9d\u6b21\u88ab\u547d\u540d\u4e3a ans\uff0cminn\uff0cmaxn\uff0cRmax\uff0cLmax\n\n\u5408\u5e76\u65b9\u6cd5\u89c1\u7ed3\u6784\u4f53\u91cc\u7684\u52a0\u6cd5\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u6807\u8bb0\u4e0b\u653e\u65b9\u6cd5\u89c1 PushDown \u51fd\u6570\n\n\u590d\u6742\u5ea6 $O(n+q\\log n)$\n\n```cpp\n#include<bits/stdc++.h>\n#define Lson (now<<1)\n#define Rson (now<<1|1)\nusing namespace std;\n\ntypedef long long ll;\n\nconst int MAXN=1e5;\n\nstruct DE {int nxt;ll val;};\n\nstruct Tree\n{\n\tint father,Beg,End;\n\tll depth;\n\tvector<DE> E;\n}node[MAXN+5];\n\nstruct UE\n{\n\tint x,y;//x \u66f4\u6d45 \n\tll val;\n\tvoid Scan() {scanf(\"%d %d %lld\",&x,&y,&val);}\n}Edge[MAXN+5];\n\nstruct SegNode\n{\n\tll LT;\n\tll ans,maxn,minn;//\u7b54\u6848\u4e0e\u6700\u6df1\u6700\u6d45 \n\tll Lmax,Rmax;//\u6700\u5927\u7684 \u7aef\u70b9-2*LCA \n\tvoid Clean() {ans=maxn=Lmax=Rmax=LT=0;}\n\tSegNode operator + (const SegNode &ob)\n\t{\n\t\tSegNode cnt;cnt.Clean();\n\t\tcnt.maxn=max(maxn,ob.maxn);\n\t\tcnt.minn=min(minn,ob.minn);\n\t\tcnt.ans=max(max(ans,ob.ans),max(Rmax+ob.maxn,maxn+ob.Lmax));\n\t\tcnt.Lmax=max(max(Lmax,ob.Lmax),ob.maxn-2*minn);\n\t\tcnt.Rmax=max(max(Rmax,ob.Rmax),maxn-2*ob.minn);\n\t\treturn cnt;\n\t}\n\tvoid UpDate(ll x)\n\t{\n\t\tLT+=x;\n\t\tmaxn+=x;\n\t\tminn+=x;\n\t\tLmax-=x;\n\t\tRmax-=x;\n\t}\n}SegTree[((2*MAXN)<<2)+5];\n\nint n,q;\nll w,A[2*MAXN+5],lst;int num;\n\nvoid CalMsg(int now)\n{\n\tll cost;\n\tA[++num]=node[now].depth;\n\tnode[now].Beg=num;\n\tfor(int i=0,rear;i<node[now].E.size();i++)\n\t{\n\t\trear=node[now].E[i].nxt;\n\t\tcost=node[now].E[i].val;\n\t\tif(rear==node[now].father) continue;\n\t\tnode[rear].father=now;\n\t\tnode[rear].depth=node[now].depth+cost;\n\t\tCalMsg(rear);\n\t\tA[++num]=node[now].depth;\n\t}\n\tnode[now].End=num;\n}\n\nvoid Build(int now,int L,int R)\n{\n\tif(L==R)\n\t{\n\t\tSegTree[now].maxn=SegTree[now].minn=A[L];\n\t\tSegTree[now].Lmax=SegTree[now].Rmax=-A[L];\n\t\treturn;\n\t}\n\tint mid=(L+R)>>1;\n\tBuild(Lson,L    ,mid);\n\tBuild(Rson,mid+1,R  );\n\tSegTree[now]=SegTree[Lson]+SegTree[Rson];\n}\n\nvoid PushDown(int now)\n{\n\tif(!SegTree[now].LT) return;\n\tSegTree[Lson].UpDate(SegTree[now].LT);\n\tSegTree[Rson].UpDate(SegTree[now].LT);\n\tSegTree[now].LT=0;\n}\n\nvoid Plus(int now,int L,int R,int QL,int QR,ll v)\n{\n\tif(QR<L || R<QL) return;\n\tif(QL<=L && R<=QR) {SegTree[now].UpDate(v);return;}\n\tPushDown(now);\n\tint mid=(L+R)>>1;\n\tPlus(Lson,L    ,mid,QL,QR,v);\n\tPlus(Rson,mid+1,R  ,QL,QR,v);\n\tSegTree[now]=SegTree[Lson]+SegTree[Rson];\n}\n\nint main()\n{\n\tscanf(\"%d %d %lld\",&n,&q,&w);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tEdge[i].Scan();\n\t\tnode[Edge[i].x].E.push_back(DE{Edge[i].y,Edge[i].val});\n\t\tnode[Edge[i].y].E.push_back(DE{Edge[i].x,Edge[i].val});\n\t}\n\tCalMsg(1);\n\tfor(int i=1;i<n;i++)\n\t\tif(node[Edge[i].x].depth>node[Edge[i].y].depth)\n\t\t\tswap(Edge[i].x,Edge[i].y);\n\tBuild(1,1,num);\n\tfor(ll d,e;q--;)\n\t{\n\t\tscanf(\"%lld %lld\",&d,&e);\n\t\td=(d+lst)%(1ll*n-1)+1;\n\t\te=(e+lst)%w;\n\t\tPlus(1,1,num,node[Edge[d].y].Beg,node[Edge[d].y].End,e-Edge[d].val);\n\t\tprintf(\"%lld\\n\",(lst=SegTree[1].ans));\n\t\tEdge[d].val=e;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1602763040,
        "uid": 54591,
        "name": "Seauy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6845 \u3010[CEOI2019] Dynamic Diameter\u3011"
    },
    {
        "content": "\u8fb9\u6743\u8f6c\u70b9\u6743\uff0c\u518d\u653e\u5230\u6b27\u62c9\u5e8f\u4e0a\u4ee5\u540e\uff0c\u53d1\u73b0\u53d8\u6210\u4e00\u4e2a\u533a\u95f4\u95ee\u9898\u3002\u5176\u4e2d\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u539f\u6811\u4e0a\u5230\u6839\u8282\u70b9\u7684\u8fb9\u6743\u548c\u3002\u8bbe\u8fd9\u4e2a\u5e8f\u5217\u4e3a $\\{a\\}$\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u8fd9\u65f6\u67d0\u4e24\u4e2a\u70b9 $x,y$ \u7684 LCA \u5fc5\u7136\u5728\u5bf9\u5e94\u4e00\u4e2a\u5728\u5e8f\u5217\u4e0a\u7684\u6781\u5c0f\u5305\u542b\u8fd9\u4e24\u4e2a\u70b9\u7684\u533a\u95f4\u4e0a\uff0c\u5e76\u4e14\u6743\u503c\u6700\u5c0f\u3002\u6240\u4ee5\u94a6\u5b9a\u4e00\u4e2a\u6700\u5c0f\u503c\u3002\u82e5\u4e0d\u662f LCA \u8d21\u732e\u7684\uff0c\u5fc5\u7136\u6bd4\u7b54\u6848\u52a3\u3002\u4e8e\u662f\u8f6c\u6362\u6210 \n\n$$\\max_{l,r}\\{ a[l] +a[l]-2 \\min_{l\\le i\\le r} a[i]\\}$$\n\n\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\u3002\u4e8e\u662f\u7528\u7ebf\u6bb5\u6811\u7528\u7c7b\u4f3c\u6700\u5927\u5b50\u6bb5\u548c\u7684\u65b9\u6cd5\u5728 $[l,r]$ \u7ef4\u62a4\u8fd9\u6837\u51e0\u4e2a\u4fe1\u606f\u3002\u5176\u4e2d $mid = \\lfloor \\dfrac{l+r}{2}\\rfloor$\n\n- $\\max_{l\\le i \\le r}a[i]$\n- $\\min_{l\\le i \\le r}a[i]$\n- $\\max_{l\\le i\\le mid,mid+1 \\le j\\le r}a[i]-2a[j] $\n- $\\max_{l\\le i\\le mid,mid+1 \\le j\\le r}-2a[i]+a[j] $\n- $\\max_{l,r}\\{ a[l] +a[l]-2 \\min_{l\\le i\\le r} a[i]\\}$\n\n\u7531\u4e8e\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u7684\u662f\u70b9\u5230\u6839\u7684\u8def\u5f84\uff0c\u4e0d\u96be\u53d1\u73b0\u4fee\u6539\u4e00\u6761\u8fb9\uff0c\u4e5f\u5c31\u662f\u7ebf\u6bb5\u6811\u4e0a\u4e24\u4e2a\u8282\u70b9\uff0c\u4f1a\u5f71\u54cd\u6240\u8c13\u201c\u6781\u5c0f\u7684\u533a\u95f4\u201d\u91cc\u7684\u6743\u503c\u3002\u5177\u4f53\u4f53\u73b0\u4e3a\u533a\u95f4\u8986\u76d6\u3002\n\n\n\n",
        "postTime": 1658885590,
        "uid": 119062,
        "name": "Lates",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6845 [CEOI2019] Dynamic Diameter"
    }
]