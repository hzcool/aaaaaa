[
    {
        "content": "\u6211\u6765\u91cd\u590d\u4e00\u4e0b\u697c\u4e0b\u7684\u601d\u8def\uff0c\u987a\u4fbf\u8d34\u4e00\u4e2a\u53c8\u77ed\u53c8\u5feb\u7684\u4ee3\u7801\uff08\u6ed1\u7a3d\uff09\n\n30\u5206\u505a\u6cd5\uff1a\uff08\u8fb9\u6743\u4e3a0\uff09\n\n\u6211\u4e00\u5f00\u59cb\u5c31\u5728\u60f330\u5206\u505a\u6cd5\uff0c\u7136\u540e\u5c31\u60f3\u5230\u4e86\uff1a\n\n\u9996\u5148\u8001\u5957\u8def\uff0c\u6b63\u7740\u5220\u8fb9\u5c31\u662f\u5012\u7740\u52a0\u8fb9\u3002\n\n\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\u5927\u5c0f\uff0c\u6bcf\u6b21\u52a0\u8fb9\u540e\u5c06\u4e24\u4e2a\u7aef\u70b9\u7684size\u503c\u4e58\u8d77\u6765\u7d2f\u52a0\u7b54\u6848\u3002\n\n20\u5206\u505a\u6cd5\uff1a\n\n\u5f53n<=1000\u65f6\uff0c\u5229\u7528xor\u7684\u4e00\u4e2a\u6027\u8d28\uff1aa^x^x=a\uff1b\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u9009\u53d6\u4e00\u4e2a\u6839\uff0c\u4e00\u904ddfs\uff0c\u9884\u5904\u7406\u51fa\u6765\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u8fd9\u6837dist[x,y]=s[x]^s[y]\uff1b\n\n\u53ef\u4ee5\u6bcf\u6b21\u4fee\u6539\u540e\u66b4\u529b\u67e5\u627e\uff0c\u7136\u540e\u968f\u4fbf\u641e\u641e\u5c31\u597d\u4e86\u3002\n\n50\u5206\u505a\u6cd5\uff1a\n\n\u7ed3\u5408\u505a\u6cd51\u548c\u505a\u6cd52\u3002\n\n100\u5206\u505a\u6cd5\uff1a\n\n\u7ed9\u6bcf\u4e00\u4e2a\u5757\u90fd\u5efa\u4e00\u4e2a\u5e73\u8861\u6811\uff08\u7531\u4e8e\u6211\u592a\u849f\u84bb\u4e86\uff0c\u5c31\u4e0d\u81ea\u5df1\u624b\u5199\u4e86\uff0c\u6211\u5c31\u7528map\u4e86\uff0c\u867d\u7136map\u6162\u5230\u7206\u70b8\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5c06\u5c31\u7740\u7528\u5427\uff09\uff0c\u5728\u6bcf\u4e00\u6b21\u4fee\u6539\u7684\u65f6\u5019\u7528\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u4e00\u8fb9\u5408\u5e76\u4e00\u8fb9\u7edf\u8ba1\u7b54\u6848\uff0c\u5c31\u5b8c\u7f8e\u89e3\u51b3\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<map>\n#include<cstdio>\n#define ll long long\nusing namespace std;\ninline int read(){\n    int x=0;char ch=' ';\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x;\n}\nstruct edge{\n    int to,next,w;\n}e[200001];\nmap<int,int> mp[100001];\nmap<int,int>::iterator it;\nint n,tot,x[100001],y[100001],add[100001],fa[100001],z[100001],head[100001],s[100001];\nll sum[100001],ans;\n\nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\ninline void addedge(int x,int y,int w){e[++tot].to=y;e[tot].next=head[x];e[tot].w=w;head[x]=tot;}\nvoid dfs(int x,int fa){\n    for(int i=head[x];i;i=e[i].next){\n        int u=e[i].to;\n        if(u!=fa){\n            s[u]=s[x]^e[i].w;\n            dfs(u,x);\n        }\n    }\n}\n\nint main(){\n    n=read();\n    for(int i=1;i<=n;i++)fa[i]=i;\n    for(int i=1;i<n;i++){\n        x[i]=read();y[i]=read();z[i]=read();\n        addedge(x[i],y[i],z[i]);addedge(y[i],x[i],z[i]);\n    }\n    for(int i=1;i<n;i++){add[i]=read();}\n    dfs(1,0);\n    for(int i=1;i<=n;i++)mp[i][s[i]]=1;\n    for(int i=n-1;i>=1;i--){\n        int u=find(x[add[i]]);int v=find(y[add[i]]);\n        if(mp[u].size()>mp[v].size())swap(u,v);\n        fa[u]=v;\n        for(it=mp[u].begin();it!=mp[u].end();++it){\n            ans+=1ll*mp[v][it->first]*it->second;\n            mp[v][it->first]+=it->second;\n        }\n        sum[i]=ans;\n    }\n    for(int i=1;i<=n;i++)printf(\"%lld\\n\",sum[i]);\n    return 0;\n}\n```",
        "postTime": 1505699861,
        "uid": 39505,
        "name": "\u73ab\u8475\u4e4b\u8776",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3359 \u3010\u6539\u9020\u5f02\u6216\u6811\u3011"
    },
    {
        "content": "\u7ec8\u4e8e\u8fc7\u4e86\u3002\n\n1\u5bf9\u4e8ez=0\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u9006\u5e8f\u52a0\u8fb9\uff0c\u7528\u5e76\u67e5\u96c6\u8bb0\u5f55\u5757\u7684\u5927\u5c0fsz\uff0c\u6bcf\u6b21\u8d21\u732e\u5373sz[x]\\*sz[y]\u3002\n\n(30\u5206\u4e86)\n\n2\u5bf9\u4e8en=1000\u7684\u60c5\u51b5:\n\n\u9996\u5148\uff0csx,y=0<=>s[x,k]=s[y,k]\uff0c\u5176\u4e2dx,y,k\u90fd\u662f\u4efb\u610f\u7684\u3002\n\n\u7b80\u5355\u7684\u8bc1\u660e\u4e00\u4e0b\uff1a\n\n\u82e5k\u5728x,y\u8def\u5f84\u4e0a\uff0c\u8fd9\u663e\u7136\u6210\u7acb\uff1b\n\n\u5426\u5219s[x,k]\u4e0es[y,k]\u4e00\u5b9a\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u90e8\u5206(\u5e94\u8be5\u6709\u4e09\u79cd\u60c5\u51b5)\uff0c\n\n\u56e0\u4e3ax xor x=0,x xor 0=x,\u6240\u4ee5\u4e5f\u6210\u7acb\u3002(\u81ea\u5df1\u753b\u4e2a\u56fe\u5c31\u80fd\u61c2)\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u9009\u4e00\u4e2a\u6807\u51c6\u70b9\u505a\u6839\uff0c\u5148dfs\u51fa\u5230\u6240\u6709\u70b9\u7684s,\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u4e24\u70b9\u5c31\u53ef\u4ee5O(1)\u5224\u65ad\u4e86\u3002\n\n\u90a3\u4e48\u6211\u4eec\u9006\u5e8f\u52a0\u8fb9\uff0c\u8ba1\u7b97\u8d21\u732e\u65f6\u6bcf\u6b21\u66b4\u529b\u679a\u4e3e\u4e24\u4e2a\u5757\u7684\u6240\u6709\u70b9\uff0c\u5224\u65ads[x,root]\u662f\u5426=s[y,root]\u5c31\u884c\u4e86\u3002\n\n(50\u5206\u4e86)\n\n3\u5bf9\u4e8en=10^5:\n\n\u6211\u4eec\u57283\u7684\u57fa\u7840\u4e0a\uff0c\u5bf9\u6bcf\u4e2a\u5757\u5efa\u4e00\u4e2a\u5e73\u8861\u6811\u3002\n\n\u8ba1\u7b97\u8d21\u732e\u65f6\uff0c\u6211\u4eec\u9009\u62e9\u8f83\u5c0f\u7684\u6811x\uff0c\u679a\u4e3e\u6240\u6709\u70b9\uff0clogn\u67e5\u627e\u5b83\u5728y\u6811\u4e2d\u7684\u4e2a\u6570\uff0c\u5e76logn\u52a0\u5165y\u4e2d\u3002\n\n\u8fd9\u6837\u6700\u591a\u53ea\u6709nlogn\u6b21\u64cd\u4f5c(\u663e\u7136\u50cf\u5f52\u5e76\u6392\u5e8f\u4e00\u6837\u65f6\u6700\u5dee,\u867d\u7136\u6211\u4e5f\u4e0d\u4f1a\u8bc1\u660e),\n\n\u65f6\u95f4nlog^2n\u3002\n\n\u53ef\u4ee5\u81ea\u5df1\u5199splay(\u6211\u53ea\u4f1asplay),\u4e5f\u53ef\u4ee5\u7528map\u3002(\u6211\u7684splay\u6bd4map\u5feb\u4e863\u500d)\n\n\u8bb0\u5f97\u7528long long!\uff08\u6211\u6539\u6210long long\u7ed3\u679c\u5fd8\u4e86printf\u65f6\u7528lld\u3002\u3002\uff09\n\n\u521a\u521a\u770b\u4e86\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u8bba\u6587\uff0c\u53d1\u73b0\u8fd9\u9898\u5148\u79bb\u6563\u5316\uff0c\u4e4b\u540e\u7528\u52a8\u6001\u52a0\u70b9\u7ebf\u6bb5\u6811\u6765\u5b58\u50a8\uff0c\u5408\u5e76\uff0c\u5c31\u662fnlogn\u7684\u4e86(\u56e0\u4e3a\u8bba\u6587\u91cc\u8bf4n\u4e2a\u6811\u5408\u5e76\u8fd9\u4e00\u5b9a\u4e0d\u4f1a\u6bd4\u63d2\u5165n\u6b21\u5dee)\u3002\n\n\u8bba\u6587\u91cc\u89c9\u5f97\u592a\u663e\u7136\u6ca1\u6709\u8bc1\u660e\u590d\u6742\u5ea6\uff0c\u7136\u800c\u6211\u4e0d\u80fd\u7406\u89e3\uff0c\u4e8e\u662f\u81ea\u5df1\u60f3\u4e86\u4e2a\u8bc1\u660e\u3002\n\n\u5148\u53d9\u8ff0\u4e00\u4e0b\u5408\u5e76\u7684\u8fc7\u7a0b\u3002\n\n\u5bf9\u76f8\u540c\u7684\u8282\u70b9(\u6307\u90fd\u62e5\u6709\u7684\u8282\u70b9)\u662f\u52a0\u548c\uff0c\u4e4b\u540e\u9012\u5f52\u5904\u7406\u5de6\u53f3\u513f\u5b50\u7684\uff0c\n\n\u800c\u5bf9\u4e8e\u4e0d\u540c\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u6811\u6709\u5b83\u53e6\u4e00\u4e2a\u6811\u6ca1\u6709\u5b83\uff0c\u6216\u8005\u4e24\u4e2a\u6811\u90fd\u6ca1\u6709\u7684\uff0c\u6211\u4eec\u76f4\u63a5\u53d6\u5b58\u5728\u7684\u90a3\u4e00\u4e2a\u62ff\u6765\u7528\uff0c\u4e4b\u540eexit\u3002\n\n\u6839\u636e\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u4e00\u6b21\u7684\u65f6\u95f4=(\u4e24\u4e2a\u7ebf\u6bb5\u6811)\u76f8\u540c\u8282\u70b9\u4e2a\u6570+\u76f8\u540c\u8282\u70b9\u7684\u4e0d\u76f8\u540c\u513f\u5b50\u7684\u4e2a\u6570\u3002\n\n\u7531\u4e8e\u4e00\u4e2a\u76f8\u540c\u8282\u70b9\u6700\u591a\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u6240\u4ee5\u65f6\u95f4<=3\\*\u76f8\u540c\u8282\u70b9\u4e2a\u6570\u3002\n\n\u7531\u4e8e\u6bcf\u4e00\u6b21\u5408\u5e76\u76f8\u540c\u8282\u70b9\u540e\u7684\u7ebf\u6bb5\u6811\u76f8\u6bd4\u8f83\u4e8e\u4e4b\u524d\u4e24\u4e2a\u7ebf\u6bb5\u6811\uff0c\u76f8\u5f53\u4e8e\u5931\u53bb\u4e86\u76f8\u540c\u8282\u70b9\u4e2a\u6570\u7684\u8282\u70b9\uff1b\n\n\u800c\u521d\u59cb\u603b\u7ed3\u70b9\u6570=nlogn\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u5931\u53bb\u7684\u8282\u70b9\u603b\u6570<=nlogn\uff0c\u4e5f\u5c31\u662f\u76f8\u540c\u8282\u70b9\u603b\u4e2a\u6570<=nlogn\u3002\n\n\u6240\u4ee5\u603b\u65f6\u95f4<=nlogn\u3002\n\n(\u7136\u800c\u6bd4\u6211\u542f\u53d1\u5f0f\u5408\u5e76\u7684splay\u6162\uff0c\u53ef\u80fd\u662f\u6570\u636e\u95ee\u9898)\n",
        "postTime": 1484212560,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3359 \u3010\u6539\u9020\u5f02\u6216\u6811\u3011"
    },
    {
        "content": "\u5957\u8def\u9898\u3002\n\n\u5bb9\u6613\u60f3\u5230\u65f6\u5149\u5012\u6d41\uff0c\u5c06\u5220\u8fb9\u8f6c\u5316\u4e3a\u52a0\u8fb9\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5373\u4e3a\u5408\u5e76\u4e24\u4e2a\u8fde\u901a\u5757\u3002\n\n\u4e0d\u59a8\u4ee5 $1$ \u4e3a\u6839\uff0c\u8bbe $\\operatorname{val}(u)$ \u8868\u793a $u$ \u5230\u6839\u8def\u5f84\u6743\u503c\u5f02\u6216\u548c\uff0c\u90a3\u4e48\u540c\u4e00\u8fde\u901a\u5757\u5185\u7684\u4e24\u4e2a\u70b9 $u,v$ \u4e4b\u95f4\u8def\u5f84\u6743\u503c\u5f02\u6216\u548c\u4e3a $0$\uff0c\u5f53\u4e14\u4ec5\u5f53 $\\operatorname{val}(u)=\\operatorname{val}(v)$\u3002\n\n\u5982\u679c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u7ef4\u62a4\u4e00\u4e2a\u6876\uff0c\u90a3\u4e48\u5408\u5e76\u7684\u65f6\u5019\u53ea\u9700\u8981\u679a\u4e3e\u4e00\u4e2a\u6876\u4e2d\u7684\u5143\u7d20\uff0c\u5728\u53e6\u4e00\u4e2a\u6876\u4e2d\u7edf\u8ba1\u7b54\u6848\uff0c\u5e76\u628a\u4e24\u4e2a\u6876\u5408\u5e76\u5373\u53ef\u3002\u679a\u4e3e\u54ea\u4e2a\u6876\u90fd\u884c\uff0c\u6211\u4eec\u679a\u4e3e\u66f4\u5c0f\u7684\u6876\uff0c\u66f4\u65b0\u5b8c\u7b54\u6848\u518d\u66b4\u529b\u63d2\u5165\u66f4\u5927\u7684\u6876\u5373\u53ef\u3002\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u6bcf\u4e2a\u8fde\u901a\u5757\u7ef4\u62a4 map\uff0c\u5e76\u8fdb\u884c\u542f\u53d1\u5f0f\u5408\u5e76\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log^2n)$\u3002\n\n```cpp\n//By: OIer rui_er\n#include <bits/stdc++.h>\n#define rep(x,y,z) for(ll x=(y);x<=(z);x++)\n#define per(x,y,z) for(ll x=(y);x>=(z);x--)\n#define debug(format...) fprllf(stderr, format)\n#define fileIO(s) do{freopen(s\".in\",\"r\",stdin);freopen(s\".out\",\"w\",stdout);}while(false)\nusing namespace std;\ntypedef long long ll;\n\nmt19937 rnd(std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now().time_since_epoch()).count());\nll randll(ll L, ll R) {\n    uniform_int_distribution<int> dist(L, R);\n    return dist(rnd);\n}\n\ntemplate<typename T> void chkmin(T& x, T y) {if(x > y) x = y;}\ntemplate<typename T> void chkmax(T& x, T y) {if(x < y) x = y;}\n\nconst ll N = 1e5+5;\n\nll n, U[N], V[N], W[N], p[N], val[N], dsu[N], ans[N];\nvector<tuple<ll, ll>> e[N];\nmap<ll, ll> mp[N];\n\nll find(ll x) {return x == dsu[x] ? x : dsu[x] = find(dsu[x]);}\n\nvoid dfs(ll u, ll f) {\n    for(auto&& [v, w] : e[u]) {\n        if(v != f) {\n            val[v] = val[u] ^ w;\n            dfs(v, u);\n        }\n    }\n}\n\nint main() {\n    scanf(\"%lld\", &n);\n    rep(i, 1, n-1) {\n        scanf(\"%lld%lld%lld\", &U[i], &V[i], &W[i]);\n        e[U[i]].emplace_back(V[i], W[i]);\n        e[V[i]].emplace_back(U[i], W[i]);\n    }\n    rep(i, 1, n-1) scanf(\"%lld\", &p[i]);\n    dfs(1, 0);\n    rep(i, 1, n) dsu[i] = i;\n    rep(i, 1, n) mp[i][val[i]] = 1;\n    ll now = 0;\n    per(i, n-1, 1) {\n        ll u = find(U[p[i]]), v = find(V[p[i]]);\n        if((ll)mp[u].size() < (ll)mp[v].size()) swap(u, v);\n        for(auto&& [key, cnt] : mp[v]) {\n            now += cnt * mp[u][key];\n            mp[u][key] += cnt;\n        }\n        map<ll, ll>().swap(mp[v]);\n        dsu[v] = u;\n        ans[i] = now;\n    }\n    rep(i, 1, n) printf(\"%lld\\n\", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1685261395,
        "uid": 122461,
        "name": "rui_er",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3359\u3010\u6539\u9020\u5f02\u6216\u6811\u3011"
    }
]