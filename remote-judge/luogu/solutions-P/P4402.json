[
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff1a[https://oi.baoshuo.ren/cerc2007-sort/](https://oi.baoshuo.ren/cerc2007-sort/?utm_source=www.luogu.com.cn&utm_medium=uva1402_solution)\n\n---\n\n\u611f\u8c22\u8fd9\u9053\u9898\u6ca1\u6709\u5173\u95ed\u9898\u89e3\u901a\u9053\u3002\u770b\u5230\u6ca1\u6709\u6307\u9488 FHQ Treap \u7684\u9898\u89e3\uff0c\u4e8e\u662f\u6765\u8865\u4e00\u53d1\u7559\u7ed9\u540e\u4eba\u53c2\u8003\u3002\n\n\u5176\u4ed6\u9898\u89e3\u90fd\u8bb2\u5f97\u633a\u6e05\u695a\u7684\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u7ec6\u8bf4\u601d\u8def\u4e86\u3002\u8003\u8651\u6309\u7167\u6392\u540d\u5904\u7406\uff0c\u6bcf\u6b21\u627e\u5230\u6700\u5c0f\u503c\u7684\u6392\u540d $k$\uff0c\u7136\u540e\u7ffb\u8f6c\u533a\u95f4 $[1, k]$\uff0c\u518d\u5220\u53bb\u8fd9\u4e2a\u6700\u5c0f\u503c\u3002\u5bf9\u4e8e\u6bcf\u6b21\u64cd\u4f5c $k + i - 1$ \u5373\u4e3a\u7b54\u6848\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdlib>\n#include <limits>\n\nusing std::cin;\nusing std::cout;\nconst char endl = '\\n';\n\nconst int N = 1e5 + 5;\n\nstruct node {\n    node *lchild, *rchild;\n    size_t size;\n    unsigned key;\n    int value, min;\n    bool reversed;\n\n    node()\n        : lchild(nullptr),\n          rchild(nullptr),\n          size(0),\n          key(rand()),\n          value(0),\n          min(std::numeric_limits<int>::max()),\n          reversed(false) {}\n\n    node(int _value)\n        : lchild(nullptr),\n          rchild(nullptr),\n          size(1),\n          key(rand()),\n          value(_value),\n          min(_value),\n          reversed(false) {}\n\n    ~node() {\n        if (lchild != nullptr) delete lchild;\n        if (rchild != nullptr) delete rchild;\n    }\n\n    inline size_t lsize() {\n        return lchild == nullptr ? 0 : lchild->size;\n    }\n\n    inline size_t rsize() {\n        return rchild == nullptr ? 0 : rchild->size;\n    }\n\n    inline void pushup() {\n        size = lsize() + 1 + rsize();\n        min = value;\n\n        if (lchild != nullptr) {\n            min = std::min(min, lchild->min);\n        }\n\n        if (rchild != nullptr) {\n            min = std::min(min, rchild->min);\n        }\n    }\n\n    inline void pushdown() {\n        if (reversed) {\n            std::swap(lchild, rchild);\n            if (lchild != nullptr) lchild->reversed = !lchild->reversed;\n            if (rchild != nullptr) rchild->reversed = !rchild->reversed;\n            reversed = false;\n        }\n    }\n};\n\nint n, b[N];\nstd::pair<int, int> a[N];\nnode *root;\n\nstd::pair<node *, node *> split(node *u, int k) {\n    if (u == nullptr) return std::make_pair(nullptr, nullptr);\n\n    u->pushdown();\n\n    if (k <= u->lsize()) {\n        auto o = split(u->lchild, k);\n\n        u->lchild = o.second;\n        u->pushup();\n        o.second = u;\n\n        return o;\n    }\n\n    auto o = split(u->rchild, k - u->lsize() - 1);\n\n    u->rchild = o.first;\n    u->pushup();\n    o.first = u;\n\n    return o;\n}\n\nnode *merge(node *x, node *y) {\n    if (x == nullptr) return y;\n    if (y == nullptr) return x;\n\n    if (x->key < y->key) {\n        x->pushdown();\n        x->rchild = merge(x->rchild, y);\n        x->pushup();\n\n        return x;\n    }\n\n    y->pushdown();\n    y->lchild = merge(x, y->lchild);\n    y->pushup();\n\n    return y;\n}\n\nvoid reverse(int k) {\n    auto x = split(root, k);\n    auto y = split(x.first, k - 1);\n    if (y.first != nullptr) y.first->reversed = !y.first->reversed;\n    delete y.second;\n    root = merge(y.first, x.second);\n}\n\nint find(node *p) {\n    int k = 1;\n\n    while (p != nullptr) {\n        p->pushdown();\n\n        if (p->lchild != nullptr && p->min == p->lchild->min) {\n            p = p->lchild;\n        } else if (p->rchild != nullptr && p->min == p->rchild->min) {\n            k += p->lsize() + 1;\n            p = p->rchild;\n        } else {\n            return k + p->lsize();\n        }\n    }\n\n    return -1;\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    cin >> n;\n\n    for (int i = 1; i <= n; i++) {\n        cin >> a[i].first;\n\n        a[i].second = i;\n    }\n\n    std::sort(a + 1, a + 1 + n);\n\n    for (int i = 1; i <= n; i++) {\n        b[a[i].second] = i;\n    }\n\n    for (int i = 1; i <= n; i++) {\n        root = merge(root, new node(b[i]));\n    }\n\n    for (int i = 1; i <= n; i++) {\n        int k = find(root);\n\n        reverse(k);\n\n        cout << k + i - 1 << ' ';\n    }\n\n    cout << endl;\n\n    // Cleanup\n    delete root;\n\n    return 0;\n}\n```",
        "postTime": 1657842149,
        "uid": 168214,
        "name": "\u5b9d\u7855",
        "ccfLevel": 6,
        "title": "\u9898\u89e3\uff1aP4402 [Cerc2007]robotic sort \u673a\u68b0\u6392\u5e8f"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/xixike/p/15726570.html)\n\n## Description\n\n[Luogu\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4402)\n\n## Solution\n\n\u9898\u76ee\u8981\u6c42\u6211\u4eec\u627e\u5230\u7b2c $i$ \u7684\u6570\uff0c\u5176\u5b9e\u5c31\u7ef4\u62a4\u4e00\u4e0b\u5269\u4e0b\u7684\u6570\u4e2d\u6700\u5c0f\u503c\u5728\u54ea\u91cc\u5373\u53ef\u3002\n\n\u6211\u4eec\u8003\u8651\u4f7f\u7528 $fhq-treap$\u3002\n\n\u8bf4\u4e00\u4e0b\u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b\uff1a\n\n- \u627e\u5230\u5269\u4e0b\u7684\u70b9\u4e2d\u7684\u6700\u5c0f\u503c\uff08\u5176\u5b9e\u5c31\u662f\u6839\uff09\u3002\n- \u8f93\u51fa\u7b54\u6848\uff0c\u5220\u53bb\u5b83\uff0c\u5408\u5e76\u5b83\u7684\u4e24\u4e2a\u513f\u5b50\u3002\n- \u7ef4\u62a4\u533a\u95f4\u7ffb\u8f6c\u6807\u8bb0\u5e76\u4e0b\u4f20\u3002\n\n\u7136\u540e\u5c31\u6ca1\u4e86\u3002\u3002\u751a\u81f3\u8fde split \u90fd\u4e0d\u9700\u8981\uff08\n\n\u5e76\u4e14\u7ef4\u62a4\u7684\u8fd9\u4e2a\u6700\u5c0f\u503c\u6b63\u597d\u6ee1\u8db3\u5c0f\u6839\u5806\u7684\u6027\u8d28\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u8f93\u5165\u7684\u6570\u4ee3\u66ff rand \u7684\u503c\u3002\n\n\uff08\u4f46\u662f\u4f1a\u88ab\u5361\uff09\n\n\u6211\u4eec\u8003\u8651\u4f18\u5316\u5efa\u6811\uff0c\u4f7f\u7528\u5efa**\u7b1b\u5361\u5c14\u6811**\u7684\u601d\u60f3\u6765\u5efa\u6811\u3002\n\n\u5173\u4e8e\u7b1b\u5361\u5c14\u6811\uff0c\u6233[\u8fd9\u91cc](https://www.cnblogs.com/xixike/p/15544463.html)\u3002\n\n\u6211\u4eec\u628a\u6743\u503c\u5c0f\u4e8e\u5f53\u524d\u6743\u503c\u7684\u70b9\u6302\u5230\u5f53\u524d\u70b9\u7684\u5de6\u5b50\u6811\u4e0a\uff0c\u518d\u628a\u5f53\u524d\u70b9\u6302\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u5b83\u7684\u70b9\u7684\u53f3\u5b50\u6811\u4e0a\uff0c\u5373\u53ef\u6784\u5efa\u51fa\u4e00\u68f5\u76f8\u5bf9\u5e73\u8861\u7684\u5e73\u8861\u6811\uff08\u4e8b\u5b9e\u4e0a\u8dd1\u7684\u98de\u5feb\uff09\u3002\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u7528\u5355\u8c03\u6808\u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\u3002\n\n\uff08\u8fd9\u6837\u4e00\u6765\u53cd\u800c\u4e0d\u5982\u666e\u901a\u7684 $fhq-treap$ \u597d\u5199\u4e86 QwQ\uff09\n\n\u8fd8\u6709\u65e0\u5173\u7d27\u8981\u7684\u4e00\u70b9\uff0c**\u9898\u76ee\u4e2d\u53ef\u80fd\u4f1a\u8f93\u5165\u76f8\u540c\u7684\u6570\uff0c\u5982\u6709\u76f8\u540c\u5148\u8f93\u51fa\u6700\u9760\u5de6\u7684**\uff0c\u6240\u4ee5\u7a0d\u5fae\u5904\u7406\u4e00\u4e0b\u5373\u53ef\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n## Code\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define ls(x) t[x].l\n#define rs(x) t[x].r\n\nusing namespace std;\n\nnamespace IO{\n    inline int read(){\n        int x = 0;\n        char ch = getchar();\n        while(!isdigit(ch)) ch = getchar();\n        while(isdigit(ch)) x = (x << 3) + (x << 1) + ch - '0', ch = getchar();\n        return x;\n    }\n\n    template <typename T> inline void write(T x){\n        if(x > 9) write(x / 10);\n        putchar(x % 10 + '0');\n    }\n}\nusing namespace IO;\n\nconst int N = 1e5 + 10;\nint n;\nstruct fhq_treap{\n    int siz, val, l, r;\n    ll wei;\n    bool rev;\n}t[N];\nint rt, tot;\n\ninline void pushup(int x){\n    t[x].siz = t[ls(x)].siz + t[rs(x)].siz + 1;\n}\n\ninline void pushdown(int x){\n    if(t[x].rev){\n        swap(ls(x), rs(x));\n        if(ls(x)) t[ls(x)].rev ^= 1;\n        if(rs(x)) t[rs(x)].rev ^= 1;\n        t[x].rev = 0;\n    }\n}\n\ninline int merge(int x, int y){\n    if(!x || !y) return x | y;\n    if(t[x].wei <= t[y].wei){\n        pushdown(x);\n        rs(x) = merge(rs(x), y);\n        return pushup(x), x;\n    }else{\n        pushdown(y);\n        ls(y) = merge(x, ls(y));\n        return pushup(y), y;\n    }\n}\n\nint stk[N], top;\n\ninline void build(int x){\n    while(top && t[x].wei < t[stk[top]].wei) ls(x) = stk[top--], pushup(ls(x));\n    if(top) rs(stk[top]) = x;\n    stk[++top] = x;\n}\n\ninline void update(int x){\n    int l = ls(x), r = rs(x);\n    ls(x) = rs(x) = 0;\n    t[l].rev ^= 1;\n    rt = merge(l, r);\n}\n\nsigned main(){\n    n = read();\n    for(int i = 1; i <= n; ++i){\n        t[i].wei = 1ll * read() * n + i, t[i].val = i, t[i].siz = 1;\n        build(i);\n    }\n    while(top) pushup(stk[top--]);\n    rt = stk[1];\n    for(int i = 1; i <= n; ++i){\n        pushdown(rt);\n        write(t[ls(rt)].siz + i), putchar(' ');\n        update(rt);\n    }\n    return puts(\"\"), 0;\n}\n```\n\n$$\n\\_EOF\\_\n$$\n",
        "postTime": 1640315553,
        "uid": 158846,
        "name": "xixike",
        "ccfLevel": 0,
        "title": "P4402 [Cerc2007]robotic sort \u673a\u68b0\u6392\u5e8f \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u6bd4\u8f83\u88f8\u7684\u5e73\u8861\u6811\u6a21\u677f\u9898\uff0c\u8fd9\u662f\u4e00\u7bc7~~\u53ef\u80fd\u5bf9\u7ec6\uff08keng\uff09\u8282\uff08dian\uff09\u89e3\u91ca\u6bd4\u8f83\u8be6\u5c3d\u7684~~\u5c51\u9898\u89e3\u3002\n\n\u601d\u8def\u4e0e [\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.com.cn/problem/P3391) \u76f8\u4f3c\uff0c\u6211\u4eec\u9700\u8981\u5148\u589e\u52a0\u4e24\u4e2a\u54e8\u5175\u8282\u70b9\uff0c\u7136\u540e\u6bcf\u6b21\u6267\u884c\u533a\u95f4\u7ffb\u8f6c\u64cd\u4f5c\u65f6\uff0c\u5c31\u5bf9\u533a\u95f4\u5de6\u7aef\u70b9\u7684\u524d\u9a71\u548c\u53f3\u7aef\u70b9\u7684\u540e\u7ee7\u8fdb\u884c Splay \u5e76\u628a\u4e0d\u65ad\u4ea4\u6362\u4ed6\u4eec\u5b50\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u3002\u800c\u5bf9\u4e8e\u6c42\u89e3\u7b54\u6848\uff0c\u6211\u4eec\u8981\u6c42\u7684\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u6392\u540d\uff08\u5373\u5b83\u5728\u5f53\u524d\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u8282\u70b9\u63d0\u5230\u6839\uff0c\u7136\u540e\u7edf\u8ba1\u5b83\u7684\u5de6\u5b50\u6811\u7684\u5927\u5c0f size\uff08\u8fd9\u4e2a size \u6ca1\u6709\u7b97\u4e0a\u8fd9\u4e2a\u8282\u70b9\u672c\u8eab\uff0c\u4f46\u7b97\u4e0a\u4e86\u54e8\u5175\u8282\u70b9\uff0c\u6240\u6709\u4e24\u4e2a\u5f71\u54cd\u62b5\u6d88\uff09\u3002\u5177\u4f53\u5b9e\u73b0\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u4e2a\u6743\u503c\u5728\u5e73\u8861\u6811\u4e2d\u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7\u8bb0\u4e3a ``pos[i]``\uff0c\u7136\u540e\u6bcf\u6b21\u7ffb\u8f6c\u65f6\u627e\u5230\u5f53\u524d\u8282\u70b9 ``pos[i]`` \u7684\u540e\u7ee7\uff0c\u800c\u5728\u6211\u4eec\u8fdb\u884c\u8fd9\u4e00\u6b65\u64cd\u4f5c\u524d\uff0c\u5c06\u8981\u64cd\u4f5c\u7684\u503c\u524d\u9762\u7684\u6570\u5df2\u7ecf\u662f\u6709\u5e8f\u7684\u4e86\uff0c\u6240\u6709\u5b83\u7684\u524d\u9a71\u4fbf\u662f ``pos[i-1]``\u3002\n\n\u6ce8\u610f\uff1a\n\n1. \u6211\u4eec\u4e0d\u592a\u80fd\u76f4\u63a5\u4ee5\u7f16\u53f7\u4f5c\u4e3a\u5e73\u8861\u6811\u7684\u6743\u503c\u8fdb\u884c\u64cd\u4f5c\uff0c\u8fd9\u6837\u867d\u7136\u4ecd\u80fd\u5b9e\u73b0\u533a\u95f4\u7ffb\u8f6c\uff0c\u4f46\u67e5\u4e00\u4e2a\u6570\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u4f1a\u8f83\u4e3a\u9ebb\u70e6\u3002\n2. \u533a\u95f4\u7ffb\u8f6c\u9700\u8981\u63d0\u5230\u6839\u4e0a\u7684\u70b9\u65f6\u5de6\u7aef\u70b9\u7684\u524d\u9a71\u548c\u53f3\u7aef\u70b9\u7684\u540e\u7ee7\uff0c\u800c\u4e0d\u662f\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\uff08\u672c\u849f\u84bb\u5c31\u662f\u56e0\u4e3a\u8fd9\u91cc\u4e00\u76f4\u4e0d\u77e5\u9053\u54ea\u9519\u4e86\uff09\u3002\n3. \u7ed9\u5b9a\u6570\u7ec4\u7684\u503c\u53ef\u80fd\u4f1a\u6709\u76f8\u7b49\u800c\u6211\u4eec\u9700\u8981\u6309\u8f93\u5165\u7684\u539f\u59cb\u6b21\u5e8f\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u539f\u5e8f\u5217\u91cd\u65b0\u6309\u79bb\u6563\u7684\u65b9\u5f0f\u91cd\u65b0\u8d4b\u503c\u3002\n\n\u4e0b\u9762\u662f\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nint n,val[300005],tag[300005],ch[300005][2],tot,rt,fa[300005],si[300005],p[300005];//p\u8bb0\u5f55\u6743\u503c\u5728\u5e73\u8861\u6811\u4e2d\u5bf9\u5e94\u7684\u70b9\u7684\u7f16\u53f7\uff0ctag\u4f5c\u4e3a\u61d2\u6807\u8bb0\u8bb0\u5f55\u662f\u5426\u9700\u8981\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\nstruct object{\n    int val,num;\n}ob[300005];\ninline int read(){\n\tint x=0,f=1;\n\tchar ch;\n\tdo{\n\t\tch=getchar();\n\t\tif(ch=='-'){\n\t\t\tf=-1;\n\t\t}\n\t}while(!(ch>='0'&&ch<='9'));\n\twhile(ch>='0'&&ch<='9'){\n\t\tx=(x<<1)+(x<<3)+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn x*f;\n}\nstruct Splay{\n    void push_up(int cur){\n        si[cur]=si[ch[cur][1]]+si[ch[cur][0]]+1;\n    }\n    int get(int x){\n        return x==ch[fa[x]][1];\n    }\n    int build(int l,int r,int f){\n        if(l>r){\n            return 0;\n        }\n        int mid=(l+r)>>1;\n        int now=++tot;\n        fa[now]=f;\n        val[now]=ob[mid].val;\n        p[ob[mid].val]=now;\n        ch[now][0]=build(l,mid-1,now);\n        ch[now][1]=build(mid+1,r,now);\n        push_up(now);\n        return now;\n    }\n    void push_down(int cur){\n        if(tag[cur]){\n            tag[cur]=0;\n            swap(ch[cur][0],ch[cur][1]);\n            tag[ch[cur][0]]^=1;\n            tag[ch[cur][1]]^=1;\n        }\n    }\n    int nex(){//\u627e\u5230\u540e\u7ee7\n        push_down(rt);\n        int x=ch[rt][1];\n        while(1){\n            push_down(x);\n            if(!ch[x][0]){\n                break;\n            }\n            x=ch[x][0];\n        }\n        return x;\n    }\n    void rotate(int x){\n        int y=fa[x];\n        int z=fa[y];\n        push_down(y);\n        push_down(x);\n        int chk=get(x);\n        ch[y][chk]=ch[x][chk^1];\n        if(ch[x][chk^1]){\n            fa[ch[x][chk^1]]=y;\n        }\n        fa[y]=x;\n        ch[x][chk^1]=y;\n        fa[x]=z;\n        if(z){\n            ch[z][y==ch[z][1]]=x;\n        }\n        push_up(y);\n        push_up(x);\n    }\n    void splay(int x,int y){\n        for(int f;(f=fa[x])!=y;rotate(x)){\n            if(fa[f]==y){\n                continue;\n            }\n            if(get(x)==get(f)){\n                rotate(f);\n            }else{\n                rotate(x);\n            }\n        }\n        if(y==0){\n            rt=x;\n        }\n    }\n    void reverse(int l,int r){\n        splay(l,0);\n        splay(r,l);\n        tag[ch[r][0]]^=1;\n    }\n}tree;//Splay\u6a21\u677f\nbool cmp(object a,object b){\n    if(a.val<b.val){\n        return 1;\n    }else{\n        if(a.val==b.val){\n            return a.num<b.num;\n        }\n    }\n    return 0;\n}\nbool cmp2(object a,object b){\n    return a.num<b.num;\n}\nsigned main(){\n    n=read();\n    for(int i=1;i<=n;++i){\n        ob[i+1].val=read();\n        ob[i+1].num=i+1;\n    }\n    ob[1].val=0;\n    ob[n+2].val=n+1;\n    sort(ob+2,ob+n+2,cmp);\n    for(int i=2;i<=n+1;i++){\n        //\u79bb\u6563\n        ob[i].val=i-1;\n    }\n    sort(ob+2,ob+2+n,cmp2);\n    rt=tree.build(1,n+2,0);//\u4ee5\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684\u65b9\u5f0f\u5efa\u6570\n    for(int i=1;i<=n;++i){\n        int x=p[i];//\u627e\u5230\u8be5\u6743\u503c\u5bf9\u5e94\u7684\u70b9\u7684\u4f4d\u7f6e\n        tree.splay(x,0);\n        printf(\"%lld \",si[ch[x][0]]);\n        x=tree.nex();//\u8be5\u6743\u503c\u7684\u540e\u7ee7\n        int y=p[i-1];//\u8be5\u6743\u503c\u7684\u524d\u9a71\n        tree.reverse(y,x);//\u533a\u95f4\u7ffb\u8f6c\n    }\n    return 0;\n}\n```\n",
        "postTime": 1649126356,
        "uid": 360977,
        "name": "541forever",
        "ccfLevel": 0,
        "title": "P4402 [Cerc2007]robotic sort \u673a\u68b0\u6392\u5e8f"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u4f60\u8981\u901a\u8fc7\u5965\u5999\u91cd\u91cd\u7684\u624b\u6bb5\u628a\u5b83\u6392\u5e8f\uff0c\u5c31\u662f\u7b2c $i$ \u6b21\u627e\u5230 $[i,n]$ \u4e2d\u6700\u5c0f\u7684\uff0c\u628a\u5e8f\u5217\u7684\u7b2c\u4e00\u4f4d\u548c\u8fd9\u4e00\u4f4d\u4e4b\u95f4\u7684\u5e8f\u5217\u7ffb\u8f6c\uff0c\u64cd\u4f5c $n$ \u6b21\uff0c\u4f46\u4f60\u8fd8\u8981\u4fdd\u8bc1\u8fd9\u662f\u4e00\u4e2a\u7a33\u5b9a\u7684\u6392\u5e8f\uff0c\u5c31\u662f\u76f8\u540c\u5143\u7d20\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u7136\u540e\u4f60\u6bcf\u6b21\u8981\u8f93\u51fa\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u3002\n\n\u9996\u5148\u8fd9\u4e2a\u7a33\u5b9a\u6392\u5e8f\u6bd4\u8f83\u5965\u5999\u91cd\u91cd\uff0c\u6211\u4eec\u4f7f\u7528[[Ynoi2016] \u6389\u8fdb\u5154\u5b50\u6d1e](https://www.luogu.com.cn/problem/P4688)\u7684\u5957\u8def\uff0c\u628a\u6bcf\u4e2a\u5143\u7d20\u52a0\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u7136\u540e\u6392\u5e8f\uff0c\u4f46\u4e0d\u8981\u53bb\u91cd\uff0c\u79bb\u6563\u5316\u65f6\u6c42\u51fa\u6392\u540d\u52a0\u4e0a\u5df2\u7ecf\u51fa\u73b0\u8fc7\u7684\u6b21\u6570\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5b8c\u7f8e\u7684\u6620\u5c04\u3002\n\n\u7136\u540e\u786c\u4e0a\u4e07\u80fd fhq \u5373\u53ef\uff0c\u7ef4\u62a4\u533a\u95f4\u7ffb\u8f6c\u4e0e\u6700\u5c0f\u503c\uff0c\u7136\u540e\u6bcf\u6b21\u8f6c\u5b8c\u5c31\u628a\u6700\u5c0f\u7684\u70b9\u5220\u6389\u5373\u53ef\uff0c\u8981\u6ce8\u610f\u6bcf\u6b21\u8f93\u51fa\u6392\u540d\u8981\u52a0\u4e0a\u5220\u6389\u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u73b0\u5728\u662f $10:53$\uff0c\u6211\u770b\u6211\u4ec0\u4e48\u65f6\u5019\u5199\u5b8c\u3002\n\n\u73b0\u5728\u662f $11:17$\uff0c\u6211\u5199\u5b8c\u4e86\u3002\n\n```cpp\n#define maxn 100010\nint n;\nstruct prpr{\n\tint l,r,tag;\n\tint dat,val,siz;\n\tint mn;\n}tree[maxn];\nint tot,rt,x,y,z;\nmt19937 rnd(time(NULL));\nint Build(int val){\n\ttree[++tot].val=val;\n\ttree[tot].dat=rnd();\n\ttree[tot].siz=1;\n\ttree[tot].mn=val;\n\treturn tot;\n}\nvoid Pushdown(int x){\n\tif(tree[x].tag){\n\t\tif(tree[x].l)tree[tree[x].l].tag^=1;\n\t\tif(tree[x].r)tree[tree[x].r].tag^=1;\n\t\tswap(tree[x].l,tree[x].r);\n\t\ttree[x].tag=0;\n\t}\n}\nvoid Pushup(int x){\n\ttree[x].siz=tree[tree[x].l].siz+1+tree[tree[x].r].siz;\n\ttree[x].mn=tree[x].val;\n\tif(tree[x].l){\n\t\tif(tree[x].mn>tree[tree[x].l].mn){\n\t\t\ttree[x].mn=tree[tree[x].l].mn;\n\t\t}\n\t}\n\tif(tree[x].r){\n\t\tif(tree[x].mn>tree[tree[x].r].mn){\n\t\t\ttree[x].mn=tree[tree[x].r].mn;\n\t\t}\n\t}\n}\nvoid Split(int rt,int k,int &x,int &y){\n\tif(!rt)x=y=0;\n\telse{\n\t\tPushdown(rt);\n\t\tif(tree[tree[rt].l].siz+1<=k)x=rt,Split(tree[x].r,k-tree[tree[rt].l].siz-1,tree[x].r,y);\n\t\telse y=rt,Split(tree[y].l,k,x,tree[y].l);\n\t\tPushup(rt);\n\t}\n}\nint Merge(int x,int y){\n\tif(!x||!y)return x+y;\n\tif(tree[x].dat<tree[y].dat){\n\t\tPushdown(x);\n\t\ttree[x].r=Merge(tree[x].r,y);\n\t\tPushup(x);return x;\n\t}else{\n\t\tPushdown(y);\n\t\ttree[y].l=Merge(x,tree[y].l);\n\t\tPushup(y);return y;\n\t}\n}\nint G(int x){\n\tint k=1;\n\twhile(1){\n\t\tPushdown(x);\n\t\tif(tree[x].l&&tree[tree[x].l].mn==tree[x].mn)x=tree[x].l;\n\t\telse if(tree[x].r&&tree[tree[x].r].mn==tree[x].mn)k+=tree[tree[x].l].siz+1,x=tree[x].r;\n\t\telse return k+tree[tree[x].l].siz;\n\t}\n}\nint a[maxn],b[maxn],cnt[maxn];\nsigned main(){\n#ifndef ONLINE_JUDGE\n\tfreopen(\"testdata.in\",\"r\",stdin);\n#endif\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)cin>>a[i],b[i]=a[i];\n\tsort(b+1,b+n+1);\n\tfor(int i=1;i<=n;i++)a[i]=lower_bound(b+1,b+n+1,a[i])-b,a[i]+=cnt[a[i]]++;\n\tfor(int i=1;i<=n;i++)rt=Merge(rt,Build(a[i]));\n\tfor(int i=1;i<=n;i++){\n\t\tint rk=G(rt);\n\t\tSplit(rt,rk,x,y);\n\t\tSplit(x,rk-1,x,z);\n\t\ttree[x].tag^=1;\n\t\trt=Merge(x,y);\n\t\tcout<<rk+i-1<<' ';\n\t}\n#ifndef ONLINE_JUDGE\n\tcerr<<endl<<(double)clock()/CLOCKS_PER_SEC;\n#endif\n}\n```\n[\u4e00\u500d\u7ecf\u9a8c](https://www.luogu.com.cn/problem/P4402)[\u53cc\u500d\u7ecf\u9a8c](https://www.luogu.com.cn/problem/P3165)[\u4e09\u500d\u7ecf\u9a8c](https://www.luogu.com.cn/problem/UVA1402)[\u56db\u500d\u7ecf\u9a8c](https://www.luogu.com.cn/problem/SP2059)",
        "postTime": 1632624807,
        "uid": 100325,
        "name": "peterwuyihong",
        "ccfLevel": 7,
        "title": "P4402 [Cerc2007]robotic sort \u673a\u68b0\u6392\u5e8f \u8bb0\u5f55"
    },
    {
        "content": "### [\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/P4402)\n\n\u849f\u84bb\u521a\u5b66 Splay \u6765\u5199\u4e00\u4e2a\u9898\u89e3 qwq\u3002\n\n**~~\u8fd9\u662f\u4e00\u9053\u56db\u500d\u7ecf\u9a8c\u9898\uff08~~**\n\n## \u89e3\u9898\u601d\u8def\n\n\u56e0\u4e3a\u8981\u533a\u95f4\u7ffb\u8f6c\uff0c\u80af\u5b9a\u9700\u8981\u4f7f\u7528 Splay \u6765\u5904\u7406\u3002\u9996\u5148\u5c31\u6309\u7167\u4e0b\u6807\u9012\u5f52\u5efa Splay\uff0c\u5f53\u7136\u522b\u5fd8\u8bb0\u5728\u524d\u540e\u63d2\u5165\u4e00\u4e2a $\\mathrm{-INF}$ \u8282\u70b9\u548c\u4e00\u4e2a $\\mathrm{INF}$ \u8282\u70b9\uff08\u9632\u6b62\u7ffb\u8f6c $[1,n]$ \u65f6\u6302\u6389\uff09\u3002\n\n### Case 1\uff1a\u5982\u4f55\u5f97\u5230\u7b2c $i$ \u5c0f\u7684\u4f4d\u7f6e\n\n\u6211\u4eec\u53ef\u4ee5\u9996\u5148\u8bb0\u5f55\u4e0b\u6765\u6bcf\u4e2a\u6570\u7684\u4e0b\u6807\uff0c\u7136\u540e\u5bf9\u8fd9\u4e9b\u6570\u6392\u5e8f\u3002\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u76f8\u540c\u7684\u6570\u6309\u7167\u7f16\u53f7\u6392\u5217\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u503c\u548c\u4e0b\u6807\u653e\u8fdb\u4e00\u4e2a pair \u91cc\u9762\u6765\u6392\u5e8f\u5904\u7406\u3002\n\n\u5728\u5efa\u6811\u7684\u65f6\u5019\u8bb0\u5f55\u4e0b\u6765**\u6bcf\u4e2a\u539f\u59cb\u4e0b\u6807\u5bf9\u5e94\u7684\u8282\u70b9**\u3002\u7136\u540e\u5728\u5904\u7406\u7684\u65f6\u5019\u53ea\u9700\u8981\u904d\u5386\u4e00\u904d\u6392\u5e8f\u540e\u7684\u6570\u7ec4 $[1,n]$\uff0c\u627e\u5230\u8bb0\u5f55\u4e0b\u6765\u7684\u4e0b\u6807\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u5e76\u628a\u8fd9\u4e2a\u8282\u70b9 Splay \u5230\u6839\u3002\u6b64\u65f6\u6839\u7684\u5de6\u5b50\u6811\u5927\u5c0f\u5c31\u662f\u7b54\u6848\uff08\u56e0\u4e3a\u6211\u4eec\u63d2\u5165\u4e86 $\\mathrm{-INF}$ \u8282\u70b9\uff0c\u6240\u4ee5\u4e0d\u9700\u8981 $+1$\uff09\u3002\n\n### Case 2\uff1a\u5982\u4f55\u8fdb\u884c\u7ffb\u8f6c\u64cd\u4f5c\n\n\u4f7f\u7528\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u67e5\u6570\u503c\u64cd\u4f5c\u627e\u5230\u6392\u540d\u4e3a $i-1$ \u7684\u8282\u70b9\uff0c\u5373\u76ee\u524d\u5e8f\u5217\u7684\u7b2c $i-1$ \u4e2a\u6570\u3002\u56e0\u4e3a\u5728 $\\textbf{Case 1}$ \u4e2d\u5df2\u7ecf\u627e\u5230\u4e86\u7b2c $i$ \u5c0f\u6570\u7684\u4f4d\u7f6e\uff08\u5373 Splay \u4e2d\u7684\u6392\u540d\uff09\uff0c\u53ef\u4ee5\u4ee5\u540c\u6837\u64cd\u4f5c\u627e\u5230\u5176\u540e\u7ee7\u8282\u70b9\u3002\n\n\u627e\u5230\u4e86\u9700\u8981\u7ffb\u8f6c\u7684\u533a\u95f4\u5de6\u7aef\u70b9\u7684\u524d\u9a71\uff0c\u53f3\u7aef\u70b9\u7684\u540e\u7ee7\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c Splay \u533a\u95f4\u7ffb\u8f6c\u7684[\u6a21\u677f\u64cd\u4f5c](https://www.luogu.com.cn/problem/P3391)\u4e86\u3002\n\n## \u6ce8\u610f\u4e8b\u9879\n\n\u7ed9\u5927\u5bb6\u8bb2\u8bb2\u6211\u8fc7\u8fd9\u9898\u7684\u8f9b\u9178\u5386\u7a0b qAq\uff0c\u8b66\u793a\u540e\u4eba:\n\n* $n$ \u4e45\u524d\uff1a$\\color{red}\\texttt{0}$\uff0c\u6839\u672c\u4e0d\u7406\u89e3 Splay\uff1b\n* \u7b2c $2$ \u6b21\u63d0\u4ea4\uff1a$\\texttt{{\\color{#9d3dcf}RE}+{\\color{#052242}TLE}}$\uff0c\u5fd8\u8bb0\u5220\u9664\u8c03\u8bd5\u4ee3\u7801\u4e86\uff08\uff1b\n* \u7b2c $3$ \u6b21\u63d0\u4ea4\uff1a$\\texttt{{\\color{#9d3dcf}RE}+{\\color{#e74c3c}WA}}$\uff0c\u5728 rotate \u64cd\u4f5c\u4e2d**\u81ea\u5df1\u548c\u7236\u4eb2\u7684 pushdown\u3001pushup \u7684\u987a\u5e8f\u5199\u9519**\uff1b\n* \u540e\u6765\u7684\u63d0\u4ea4\uff1a\u5361\u5e38\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int INF=0x7fffffff;\nint n;\npair<int,int> a[100005];\ninline int read()\n{\n\tchar ch;int res=0;\n\tfor(ch=getchar();isspace(ch);ch=getchar());\n\tfor(;isdigit(ch);res=res*10+ch-'0',ch=getchar());\n\treturn res;\n}\nstruct TreeNode //Splay Tree\u8282\u70b9\n{\n\tint siz;\n\tbool tag;\n\tTreeNode *ch[2],*fa;\n\tTreeNode(): siz(1),tag(0)\n\t\t{ ch[0]=ch[1]=fa=nullptr; }\n}*rt;\ntypedef TreeNode *pNode;\ninline int which(pNode i) //\u5224\u65ad\u81ea\u5df1\u662f\u54ea\u4e00\u4e2a\u513f\u5b50\n\t{ return i==i->fa->ch[1]; }\ninline void pushup(pNode &i) //\u66f4\u65b0\u5b50\u6811\u5927\u5c0f\n{\n\tif(!i)\treturn;\n\ti->siz=1;\n\tif(i->ch[0])\ti->siz+=i->ch[0]->siz;\n\tif(i->ch[1])\ti->siz+=i->ch[1]->siz;\n}\ninline void pushdown(pNode &i) //\u7ffb\u8f6c\u6807\u8bb0\u4e0b\u4f20\n{\n\tif(i && i->tag)\n\t{\n\t\tif(i->ch[0])\ti->ch[0]->tag^=i->tag;\n\t\tif(i->ch[1])\ti->ch[1]->tag^=i->tag;\n\t\tswap(i->ch[0],i->ch[1]),i->tag=0;\n\t}\n}\ninline void rotate(pNode i) //rotate\u4e0esplay\uff0c\u7167\u642c\u6a21\u677f\n{\n\tif(i==rt)\treturn;\n\tpNode f=i->fa,gf=i->fa->fa;\n\tpushdown(f),pushdown(i); //\u6ce8\u610fpushup\u548cpushdown\u7684\u987a\u5e8f\n\tbool x=which(i);\n\ti->fa=gf;\n\tif(gf)\tgf->ch[which(f)]=i;\n\tf->ch[x]=i->ch[!x];\n\tif(f->ch[x])\tf->ch[x]->fa=f;\n\ti->ch[!x]=f,f->fa=i;\n\tpushup(f),pushup(i);\n}\ninline void splay(pNode x,pNode y=nullptr)\n{\n\tfor(pNode f;(f=x->fa)!=y;rotate(x))\n\t\tif(f->fa!=y)\n\t\t\trotate(which(x)==which(f)?f:x);\n\tif(!y)\trt=x;\n}\npNode findValue(int k) //\u6839\u636e\u6392\u540d\u627e\u8282\u70b9\n{\n\tpNode i=rt;\n\twhile(true)\n\t{\n\t\tpushdown(i);\n\t\tint siz=i->ch[0]?i->ch[0]->siz:0;\n\t\tif(k<=siz)\ti=i->ch[0];\n\t\telse if(k==siz+1)\treturn i;\n\t\telse\tk-=siz+1,i=i->ch[1];\n\t}\n}\npNode nd[100005]; //\u7528\u4e8e\u8bb0\u5f55\u6bcf\u4e2a\u539f\u59cb\u4e0b\u6807\u5bf9\u5e94\u7684\u8282\u70b9\nvoid build(int l,int r,pNode &i=rt,pNode f=nullptr)\n{\n\tif(l>r)\treturn;\n\tint mid=(l+r)>>1;\n\ti=new TreeNode,i->fa=f,nd[mid]=i;\n\tbuild(l,mid-1,i->ch[0],i);\n\tbuild(mid+1,r,i->ch[1],i);\n\tpushup(i);\n}\nint main()\n{\n\tn=read();\n\tfor(int i=2;i<=n+1;i++)\n\t\ta[i].first=read(),a[i].second=i; //\u8981\u8bb0\u5f55\u4e0b\u6807\n\tbuild(1,n+2); //\u5efa\u6811\n\ta[1]=make_pair(-INF,1);\n\ta[n+2]=make_pair(INF,n+2); //\u524d\u540e\u8fb9\u754c\u8282\u70b9\n\tsort(a+1,a+n+3);\n\tfor(int i=2;i<=n+1;i++)\n\t{\n\t\tauto &now=a[i];\n\t\tsplay(nd[now.second]); //\u5c06a[i]\u5bf9\u5e94\u7684\u8282\u70b9splay\u5230\u6839\n\t\tint zt=rt->ch[0]->siz; //\u5de6\u5b50\u6811\u5927\u5c0f\u4e3a\u7b54\u6848\n\t\tpNode x=findValue(i-1),y=findValue(zt+2); //\u627e\u5230\u7ffb\u8f6c\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n\t\tsplay(x),splay(y,x); //\u533a\u95f4\u7ffb\u8f6c\u64cd\u4f5c\n\t\ty->ch[0]->tag^=1;\n\t\tprintf(\"%d \",zt);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1628126880,
        "uid": 279800,
        "name": "ExplodingKonjac",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011P4402 Robotic Sort"
    },
    {
        "content": "### WBLT\n\u611f\u8c22\u8fd9\u9053\u9898\u6ca1\u6709\u5173\u95ed\u9898\u89e3\u3002\n\n\u5927\u5bb6\u597d\uff0c\u6211\u662f\u6c34\u6bcd\u54e5\uff0c\u6211\u7528\u4e86 WBLT \u6c34\u6389\u4e86\u8fd9\u9053\u9898\u3002\n\n\u6211\u5728\u7f51\u4e0a\u5e76\u6ca1\u6709\u770b\u5230 WBLT \u7ef4\u62a4\u533a\u95f4\u53cd\u8f6c\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u5176\u5b9e\u5b83\u53ef\u4ee5\uff0c\u800c\u4e14\u901f\u5ea6\u76f8\u5f53\u5feb\uff08\u582a\u6bd4 Spaly\uff09\u3002\n\nWBLT \u533a\u95f4\u7ffb\u8f6c\u7684\u65b9\u5f0f\u7c7b\u4f3c Treap\uff0c\u9700\u8981\u5c06\u7ffb\u8f6c\u7684\u533a\u95f4\u5206\u88c2\u51fa\u6765\uff0c\u518d\u6253\u4e0a\u6807\u8bb0\uff0c\u6700\u540e\u5c06\u8fd9\u6bb5\u533a\u95f4\u5408\u5e76\u56de\u53bb\u3002\n\nWBLT \u5206\u88c2\u65b9\u5f0f\u548c Treap \u57fa\u672c\u76f8\u540c\uff0c\u4e0d\u8fc7\u7531\u4e8e WBLT \u5fc5\u987b\u4e3a\u4e00\u9897 Leafy Tree\uff0c\u6240\u4ee5\u5728\u5206\u88c2\u540c\u65f6\u8981\u7ef4\u62a4\u8fd9\u4e2a\u6027\u8d28\u3002\n\n\u7531\u4e8e WBLT \u662f\u5176\u5bf9\u5e94\u6570\u5217\u5efa\u6210\u7684 Kruskal \u91cd\u6784\u6811\uff0c\u4e00\u68f5 WBLT \u975e\u53f6\u8282\u70b9\u7684\u4e2a\u6570\u4e3a\u5176\u53f6\u8282\u70b9\u4e2a\u6570 - 1\u3002WBLT \u5206\u88c2\u6210\u4e24\u4e2a\u540e\uff0c\u5e8f\u5217\u957f\u5ea6\u4e0d\u53d8\uff0c\u4f46\u662f\u6811\u5374\u53d8\u6210\u4e86\u4e24\u68f5\u3002\u6240\u4ee5\u975e\u53f6\u8282\u70b9\u7684\u4e2a\u6570\u4e3a\u5176\u53f6\u8282\u70b9\u4e2a\u6570 - 2\u3002\u8fd9\u6837\u5c31\u591a\u51fa\u4e86\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\u3002\u53ea\u9700\u8981\u5c06\u5b83\u53d8\u6210\u5b83\u7684\u513f\u5b50\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5408\u5e76\u7684\u8bdd\uff0c\u5c31\u7528\u91cd\u6784\u7684\u5408\u5e76\uff0c\u518d\u91cd\u6784\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\u4e0d\u8981\u5fd8\u4e86\u4e0a\u4f20\u6807\u8bb0\u3002\u8fd9\u4e2a\u64cd\u4f5c\u590d\u6742\u5ea6\u4e2a\u4eba\u8ba4\u4e3a\u4e0d\u53ef\u8bc1\uff0c\u4f46\u662f\u5b9e\u6d4b\u5f88\u96be\u5361\u3002\n\n\u5176\u4ed6\u64cd\u4f5c\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u4e0d\u8fc7\u4e0d\u8981\u5fd8\u4e86\u79bb\u6563\u5316\u3002\n\n```c\n#include <ctype.h>\n#include <stdio.h>\n#include <string.h>\n\n// IO\n\n#define IO 10000\nchar _ibuf[IO], _obuf[IO];\nchar *_i = _ibuf, *_o = _obuf;\n\nFILE *_is, *_os;\n#define IS stdin\n#define OS stdout\n\nvoid init_IO(void)\n{\n    fread(_ibuf, IO, sizeof(char), IS);\n}\n\nvoid end_IO(void)\n{\n    fwrite(_obuf, _o - _obuf, sizeof(char), OS);\n}\n\nstatic inline char getch(void)\n{\n    if (_i == _ibuf + IO)\n    {\n        memset(_ibuf, 0, sizeof(_ibuf));\n        fread(_ibuf, IO, sizeof(char), IS);\n        _i = _ibuf;\n    }\n\n    return *_i++;\n}\n\nstatic inline void putch(char ch)\n{\n    if (_o == _obuf + IO)\n    {\n        fwrite(_obuf, IO, sizeof(char), OS);\n        _o = _obuf;\n    }\n\n    *_o++ = ch;\n}\n\nstatic inline int getint(void)\n{\n    int num = 0, fac = 1;\n    char ch = getch();\n\n    while (!isdigit(ch))\n    {\n        if (ch == '-')\n            fac = -1;\n        ch = getch();\n    }\n\n    while (isdigit(ch))\n    {\n        num = num * 10 + ch - '0';\n        ch = getch();\n    }\n\n    return num * fac;\n}\n\nvoid putint(int num)\n{\n    if (num < 0)\n    {\n        putch('-');\n        num = -num;\n    }\n    if (num >= 10)\n        putint(num / 10);\n    putch(num % 10 + '0');\n}\n\n// Consts\n\n#define RPOOL 400005\n\n// Utility\n\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n#define SWAP(T, a, b) ({T t = a; a = b; b = t;})\n\n// Pools\n\ntypedef struct\n{\n    int val;\n    int siz;\n    int ch[2];\n    char tag;\n}\nWBLTNode;\n\nWBLTNode wblt_pool[RPOOL];\nint      wpsiz;\n\n#define RATIO 2\n\n#define wnode(x) wblt_pool[x]\n#define wval(x)  wblt_pool[x].val\n#define wsiz(x)  wblt_pool[x].siz\n#define wlch(x)  wblt_pool[x].ch[0]\n#define wrch(x)  wblt_pool[x].ch[1]\n#define wtag(x)  wblt_pool[x].tag\n\n// WBLT\n\nstatic inline int neww(int x)\n{\n    wnode(++wpsiz) = (WBLTNode)\n    {\n        x, 1, {0, 0}, 0\n    };\n    return wpsiz;\n}\n\nstatic inline void downw(int x)\n{\n    if (wtag(x))\n    {\n        wtag(wlch(x)) ^= 1;\n        wtag(wrch(x)) ^= 1;\n        SWAP(int, wlch(x), wrch(x));\n        wtag(x) = 0;\n    }\n}\n\nstatic inline void upw(int x)\n{\n    if (wlch(x))\n    {\n        wsiz(x) = wsiz(wlch(x)) + wsiz(wrch(x));\n        wval(x) = wval(wlch(x)) < wval(wrch(x))\n                ? wval(wlch(x)) : wval(wrch(x));\n    }\n}\n\nstatic inline int mergew(int ind, int a, int b)\n{\n    wlch(ind) = a;\n    wrch(ind) = b;\n    upw(ind);\n    return ind;\n}\n\nstatic inline void lcutw(int x)\n{\n    int tmp = wlch(wlch(x));\n    wrch(x) = mergew(wlch(x), wrch(wlch(x)), wrch(x));\n    wlch(x) = tmp;\n}\n\nstatic inline void rcutw(int x)\n{\n    int tmp = wrch(wrch(x));\n    wlch(x) = mergew(wrch(x), wlch(x), wlch(wrch(x)));\n    wrch(x) = tmp;\n}\n\nstatic inline void balancew(int x)\n{\n    if (wsiz(wlch(x)) > wsiz(wrch(x)) * 3)\n    {\n        downw(wlch(x));\n        if (wsiz(wrch(wlch(x))) > wsiz(wlch(wlch(x))) * 2)\n            downw(wrch(wlch(x))), rcutw(wlch(x));\n        lcutw(x);\n    }\n    else if (wsiz(wrch(x)) > wsiz(wlch(x)) * 3)\n    {\n        downw(wrch(x));\n        if (wsiz(wlch(wrch(x))) > wsiz(wrch(wrch(x))) * 2)\n            downw(wlch(wrch(x))), lcutw(wrch(x));\n        rcutw(x);\n    }\n}\n\nint buildw(int x, int l, int r, int *arr)\n{\n    if (l == r)\n    {\n        wval(x) = arr[l];\n        wsiz(x) = 1;\n        return x;\n    }\n    int mid = l + ((r - l) >> 1);\n    wlch(x) = buildw(++wpsiz, l, mid, arr);\n    wrch(x) = buildw(++wpsiz, mid + 1, r, arr);\n    upw(x);\n    return x;\n}\n\nvoid splitw(int x, int *l, int *r)\n{\n    if (wsiz(x) == 1)\n    {\n        *l = x;\n        *r = 0;\n        return;\n    }\n    downw(x);\n    \n    if (wval(wlch(x)) == wval(x))\n        *r = x, splitw(wlch(x), l, &wlch(x));\n    else\n        *l = x, splitw(wrch(x), &wrch(x), r);\n\n         if (wlch(x) == 0) wnode(x) = wnode(wrch(x));\n    else if (wrch(x) == 0) wnode(x) = wnode(wlch(x));\n\n    balancew(x);\n    upw(x);\n}\n\nvoid dellw(int x, int fa)\n{\n    if (wsiz(x) == 1)\n    {\n        x = wlch(fa) == x ? wrch(fa) : wlch(fa);\n        wnode(fa) = wnode(x);\n        return;\n    }\n    downw(x);\n    dellw(wlch(x), x);\n    balancew(x);\n    upw(x);\n}\n\nint mrgw(int x, int y)\n{\n    wlch(++wpsiz) = x;\n    wrch(wpsiz) = y;\n    balancew(wpsiz);\n    upw(wpsiz);\n    return wpsiz;\n}\n\nvoid outputw(int x)\n{\n    if (wsiz(x) == 1)\n    {\n        printf(\"%d \", wval(x));\n        return;\n    }\n    downw(x);\n    outputw(wlch(x));\n    outputw(wrch(x));\n}\n\n// Main\n\nint ai[RPOOL];\nint ind[RPOOL];\n\nvoid smallsort(int *a, int *b, int siz)\n{\n    for (int i = siz >> 1; i; i >>= 1)\n        for (int j = i; j < siz; j++)\n        {\n            int tmp1 = a[j], tmp2 = b[j], k = j - i;\n            while (k >= 0 && (a[k] > tmp1 || (b[k] > tmp2 && a[k] == tmp1)))\n                a[k + i] = a[k], b[k + i] = b[k], k -= i;\n            a[k + i] = tmp1, b[k + i] = tmp2;\n        }\n}\n\nint main()\n{\n    init_IO();\n\n    int n = getint();\n\n    for (int i = 1; i <= n; i++)\n    {\n        ai[i] = getint();\n        ind[i] = i;\n    }\n    smallsort(ai + 1, ind + 1, n);\n\n    for (int i = 1; i <= n; i++)\n    {\n        ai[ind[i]] = i;\n    }\n    \n    int root = buildw(++wpsiz, 1, n, ai);\n    root = mrgw(root, neww(2147483647));\n\n    for (int i = 1; i <= n; i++)\n    {\n        int rroot;\n\n        splitw(root, &root, &rroot);\n\n        putint(wsiz(root) + i - 1);\n        putch(' ');\n        \n        if (wsiz(root) >= 2)\n        {\n            wtag(root) ^= 1;\n            dellw(root, 0);\n            root = mrgw(root, rroot);\n        }\n        else\n            root = rroot;\n        //outputw(root);\n        //printf(\"\\n\");\n    }\n\n    end_IO();\n    return 0;\n}\n```\n",
        "postTime": 1634017785,
        "uid": 52381,
        "name": "CodingJellyfish",
        "ccfLevel": 6,
        "title": "Robotic sort WBLT"
    },
    {
        "content": "\n\u533a\u95f4\u7ffb\u8f6c\uff1f\u7b2c\u4e00\u53cd\u5e94Splay\n\n~~wtcl \u4e0d\u4f1aFHQtreap~~\n\n\u89c2\u5bdf\u9898\u610f\uff0c\u9898\u76ee\u8ba9\u6211\u4eec\u4f9d\u6b21\u8f93\u51fa\u7b2c $k$ \u5927\u6240\u5728\u4f4d\u7f6e $p_k$ \u5e76\u5c06 $[k,p_k]$ \u7ffb\u8f6c\u3002\u5e76\u4e14\u6211\u4eec\u81ea\u59cb\u81f3\u7ec8\u53ea\u5173\u5fc3\u4f4d\u7f6e\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\uff0c\u4ece\u6700\u5c0f\u7684\u4f9d\u6b21\u627e\u8d77\u3002\u6211\u4eec\u5c06\u6700\u521d\u59cb\u7684\u5e8f\u5217\u5143\u7d20\u4f9d\u6b21\u7f16\u53f7 $1,2,3 \\cdots$\uff0c\u95ee\u9898\u5c31\u843d\u5728\u4e86\u5982\u4f55\u5728\u5e8f\u5217\u4e2d\u67e5\u627e\u7b2c $k$ \u53f7\u5143\u7d20\uff0c\u5e26\u7ffb\u8f6c\u64cd\u4f5c\u3002\n\n\u6211\u4eec\u5229\u7528 Splay \u7684\u4e2d\u5e8f\u904d\u5386\u7ef4\u62a4\u5e8f\u5217\uff0c Splay \u7684\u65cb\u8f6c\u64cd\u4f5c\u4e0d\u4f1a\u6539\u53d8\u5176\u4e2d\u5e8f\u5e8f\u5217\u3002\u7136\u540e\u5f53\u6211\u4eec\u67e5\u8be2\u7b2c $i$ \u53f7\u5143\u7d20\u65f6\uff0c\u6211\u4eec\u5c31\u5c06 $i$ \u8f6c\u5230\u6839\uff0c\u6b64\u65f6\u6839\u636e\u5e73\u8861\u6811\u7684\u6027\u8d28\uff0c\u5b83\u7684\u5de6\u5b50\u6811\u5927\u5c0f $+1$ \u5c31\u662f\u7b54\u6848\u3002\u7ffb\u8f6c\u64cd\u4f5c\u8bf7\u53c2\u8003~~\u7167\u642c~~[P3391 \u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\n](https://www.luogu.com.cn/problem/P3391)\u3002\n\n\u603b\u4e4b\uff0c\u662f\u4e00\u9053\u4e0d\u9519\u7684 Splay \u7ec3\u624b\u9898\u3002~~\u5e76\u4e14\u4f60\u8fd8\u53ef\u4ee5\u591a\u505a\u51e0\u904d\u4ee5\u63d0\u9ad8\u719f\u7ec3\u5ea6(\u6307\u591a\u500d\u7ecf\u9a8c~~\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N=1e5+10,INF=1e8+10;\n\nstruct node\n{\n\tint s[2],p,v;\n\tint size,flag;\n\n\tvoid init(int _v)\n\t{\n\t\tv=_v;\n\t\tsize=1; flag=0;\n\t}\n} tree[N];\n\nint root,idx=0;\n\nint n;\nstruct pak\n{\n\tint x,no;\n} poi[N];\n\nbool cmp(pak a,pak b)\n{\n\tif(a.x==b.x) return a.no<b.no;\n\telse return a.x<b.x;\n}\n\ninline int ls(int x){return tree[x].s[0];}\ninline int rs(int x){return tree[x].s[1];}\n\nvoid push_up(int x)\n{\n\tif(!x) return;\n\ttree[x].size=tree[ls(x)].size+tree[rs(x)].size+1;\n}\n\nvoid push_down(int x)\n{\n\tif(!tree[x].flag) return ;\n\tswap(tree[x].s[0],tree[x].s[1]);\n\tif(ls(x)) tree[ls(x)].flag^=1;\n\tif(rs(x)) tree[rs(x)].flag^=1;\n\ttree[x].flag=0;\n}\n\nint build(int l,int r)//\u4e25\u683c\u5bf9\u7167\u4e2d\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\u5efa\u6811\n{\n\tint mid=l+r>>1;\n\tint la=0,ra=0;\n\tif(l<mid) la=build(l,mid-1);\n\tint u=++idx;\n\ttree[u].init(poi[mid].x);\n\tif(r>mid) ra=build(mid+1,r);\n\ttree[u].s[1]=ra; tree[u].s[0]=la;\n\ttree[ls(u)].p=tree[rs(u)].p=u;\n\tpush_up(u);\n\treturn u;\n}\n\nvoid rotate(int x)\n{\n\tint y=tree[x].p, z=tree[y].p;\n\tint k=tree[y].s[1]==x;\n\n\ttree[z].s[tree[z].s[1]==y]=x;\n\ttree[x].p=z;\n\n\ttree[y].s[k]=tree[x].s[k^1];\n\ttree[tree[x].s[k^1]].p=y;\n\n\ttree[x].s[k^1]=y; tree[y].p=x;\n\tpush_up(y), push_up(x);\n}\n\nvoid splay(int x,int k)\n{\n\twhile(tree[x].p!=k)\n\t{\n\t\tint y=tree[x].p,z=tree[y].p;\n\t\tpush_down(z); push_down(y); push_down(x);\n\t\tif(z!=k)\n\t\t{\n\t\t\tif((tree[y].s[1]==x)^(tree[z].s[1]==y)) rotate(x);\n\t\t\telse rotate(y);\n\t\t}\n\t\trotate(x);\n\t}\n\tif(!k) root=x;\n}\n\nint get_k(int k)\n{\n\tint u=root;\n\twhile(1)\n\t{\n\t\tpush_down(u);\n\t\tif(tree[tree[u].s[0]].size>=k) u=tree[u].s[0];\n\t\telse if(tree[tree[u].s[0]].size+1==k) return u;\n\t\telse k-=tree[tree[u].s[0]].size+1,u=tree[u].s[1];\n\t}\n\treturn -1;\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&poi[i].x);\n\t\tpoi[i].no=i;\n\t}\n\tpoi[0].x=-INF,poi[0].no=1;\n\tpoi[n+1].x=INF,poi[n+1].no=n+1;\n\tsort(poi+1,poi+1+n,cmp);\n\troot=build(0,n+1);//\u5efa\u6811\u65e0\u6240\u8c13\u5728\u54ea\u91cc\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u67d0\u68f5\u5b50\u6811\u7684\u5de6\u5b50\u6811\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tsplay(poi[i].no+1,0);//\u8bb0\u5f97\u52a0\u4e0a\u54e8\u5175\u8282\u70b9\n\t\tint s=tree[tree[root].s[0]].size;//\u7b54\u6848\u4e5f\u8981\u51cf\u53bb\u54e8\u5175\n\t\tprintf(\"%d \",s);\n\t\tint l=get_k(i),r=get_k(s+2);\n\t\tsplay(l,0); splay(r,l);\n\t\ttree[tree[r].s[0]].flag^=1;\n\t}\n\tprintf(\"%d\",n);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1615118659,
        "uid": 278259,
        "name": "RemiliaScarlet\u25ce",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4402 [Cerc2007]robotic sort \u673a\u68b0\u6392\u5e8f"
    },
    {
        "content": "## FHQ_Treap \u592a\u795e\u8fa3\n\n\u849f\u84bb\u521d\u5b66FHQ_Treap,\u4e8e\u662f\u6765\u5230\u4e86\u8fd9\u9053\u7565\u663e\u677f\u5b50\u7684\u9898\u76ee\n\n\u56e0\u4e3aTreap\u65e2\u6ee1\u8db3BST\u7684\u6027\u8d28\uff0c\u53c8\u6ee1\u8db3Heap\u7684\u6027\u8d28\uff0c\u6240\u4ee5\uff0c\u5bf9\u4e8e\u8fd9\u9053\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4ee5\u5f80**\u968f\u673a\u51fa\u7684\u989d\u5916\u6743\u503c\u8f6c\u5316\u4e3a\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684\u9ad8\u5ea6**\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u5c0f\u6839\u5806\u7684\u6027\u8d28\uff0c\u751a\u81f3\u8fde$Split$\u64cd\u4f5c\u90fd\u53ef\u4ee5\u7701\u7565\u6389\uff0c\u5c31\u53ef\u4ee5AC\u8fd9\u9053\u9898\u76ee\n\n\u6b65\u9aa4\uff1a\n1.\u9996\u5148\u627e\u5230\u73b0\u5728\u7684\u6839\u8282\u70b9\uff0c\u5373\u5f53\u524d\u9ad8\u5ea6\u6700\u4f4e\u7684\u4f4d\u7f6e\n\n2.\u6839\u636eTreap\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5176\u5de6\u5b50\u6811\u6253\u4e00\u4e2a\u53cd\u8f6c\u7684\u6807\u8bb0\uff0c\u7136\u540e\u5c06\u6839\u8282\u70b9\u5220\u9664\uff0c\u5c06\u5176\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u5408\u5e76\uff0c\u90a3\u4e48\uff0c\u65b0\u7684\u5b50\u8282\u70b9\u5c31\u662f\u6211\u4eec\u63a5\u4e0b\u6765\u9700\u8981\u7684\u7b2c2\u5c0f\u9ad8\u5ea6\u7684\u4f4d\u7f6e\n\n3.\u91cd\u590d1\uff0c2\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u9898\u76ee\u5c31\u5b8c\u7ed3\u6492\u82b1\u8fa3\uff01\uff01\n\n\u4f46\u662f\u9ad8\u5ea6\u6709\u53ef\u80fd\u662f\u76f8\u540c\u7684\uff0c\u9898\u76ee\u4e2d\u53c8\u8981\u6c42\u53d6\u9760\u524d\u7684\u90a3\u4e00\u4e2a\uff0c\u4e8e\u662f\u6211\u4eec\u5c06\u6240\u6709\u7684\u6570\u4e58\u4e0an\uff0c\u518d\u52a0\u4e0ai\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6709\u6548\u907f\u514d\u8fd9\u4e00\u4e2a\u95ee\u9898\u3002\n\n~~\u613f\u671b\u603b\u662f\u7f8e\u597d\u7684~~\n\n----\n\n[CQOI2014]\u6392\u5e8f\u673a\u68b0\u81c2\u6109\u5feb\u7684\u8fc7\u6389\u4e86\uff0c\u4f46\u53e6\u5916\u4e00\u9053\u76f8\u540c\u7684\u9898\u76ee\u5374\u8fc7\u4e0d\u4e86\uff08robotic sort\uff09\u3002\u7136\u540e\uff0c\u6709dalao\u6307\u51fa\uff0c\u8fd9\u6837\u7684\u505a\u6cd5\uff0c\u53ea\u8981\u6570\u636e\u662f\u5355\u8c03\u7684\uff0c\u5c31\u4f1a\u88ab\u5361\u6210$O(n^2)$\n\n\u4e8e\u662f\uff0c\u901a\u8fc7\u67e5\u9605\u8d44\u6599\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u795e\u5947\u7684\u65b9\u6cd5\u2014\u2014\u7b1b\u5361\u5c14\u6811\u4f18\u5316\u5efa\u6811\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6709\u6548\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u5bf9\u4e8e$Treap$\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u7b80\u5316\u4e3a\u4e00\u4e2a\u4e8c\u5143\u7ec4$(val,rand)$\uff0c\u610f\u4e49\u4e00\u770b\u4fbf\u77e5\n\n\u6211\u4eec\u6309\u7167val\u7684\u987a\u5e8f\u8fdb\u884c\u63d2\u5165\uff0c\u800c\u5728\u672c\u9898\u4e2d\uff0cval\u5373\u521d\u59cb\u4f4d\u7f6e1~n,\u6240\u4ee5\u4e0d\u7528\u91cd\u65b0\u6392\u5e8f\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u6808\uff0c\u4ece\u800c\u6709\u6548\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u5c06\u6808\u4e2d\u5927\u4e8e\u5f53\u524d\u8282\u70b9rand\u503c\u7684\u8282\u70b9\u5168\u90e8\u5f39\u51fa\uff0c\u5c06\u4ed6\u4eec\u6302\u5728\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\u4e0a\uff0c\u7136\u540e\u518d\u628a\u8fde\u540c\u5f53\u524d\u8282\u70b9\u4e00\u8d77\u7684\u8fd9\u4e00\u68f5\u6811\u6302\u5728\u5f39\u5b8c\u6240\u6709\u503c\u4e4b\u540e\u7684\u6808\u9876\u8282\u70b9\u7684\u53f3\u513f\u5b50\u4e0a\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6784\u5efa\u51fa\u4e00\u9897\u76f8\u5bf9\u5e73\u8861\u7684Treap\u3002\n\n\u7528\u901a\u4fd7\u7684\u8bdd\u8bb2\uff0c\u5bf9\u4e8e\u5f53\u524d\u8282\u70b9u\uff0c\u6211\u4eec\u53ea\u8003\u8651\u5c06\u5176\u653e\u5728\u6700\u53f3\u8fb9\u7684\u8fd9\u4e00\u6761\u94fe\u4e0a\uff0c\u5982\u679c\u4ed6\u6bd4\u6240\u6709\u8282\u70b9\u7684rand\u503c\u90fd\u5927\uff0c\u90a3\u4e48\u5f53\u7136\u987a\u7406\u6210\u7ae0\u7684\u653e\u5728\u6700\u53f3\u8fb9\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u6211\u4eec\u5c31\u8003\u8651\u540c\u65f6\u7ef4\u62a4BST\u4e0eHeap\u7684\u6027\u8d28\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u6211\u4eec\u4e0a\u9762\u7684\u505a\u6cd5\u3002\n\n### \u76ee\u524d\u662f\u672c\u9898~~\u6c27\u540e~~rank1\uff0c\u5f00\u68ee\n\n\u8d34\u4ee3\u7801\u5566~\n\n```cpp\n//\u77ed\u77ed70\u884c\u89e3\u51b3\u6218\u6597\n#include<bits/stdc++.h>\nusing namespace std;\nconst long long maxn=5e5+10;\nlong long inline read()\n{\n    long long x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nlong long son[maxn][2],val[maxn],rnd[maxn],siz[maxn],cnt,rt,tag[maxn];\ninline void upd(long long t){siz[t]=siz[son[t][0]]+siz[son[t][1]]+1;}\ninline void down(long long x)\n{\n    if(tag[x])\n    {\n        swap(son[x][0],son[x][1]);\n        if(son[x][0]) tag[son[x][0]]^=1;\n        if(son[x][1]) tag[son[x][1]]^=1;\n        tag[x]=0;\n    }\n}\ninline long long init(long long x,long long qaq)\n{\n    ++cnt,val[cnt]=x,siz[cnt]=1,rnd[cnt]=qaq;\n    return cnt;\n}\ninline long long merge(long long x,long long y)\n{\n    if(!x||!y) return x+y;\n    if(rnd[x]<rnd[y])\n    {\n        down(x),son[x][1]=merge(son[x][1],y),upd(x);\n        return x;\n    }\n    else\n    {\n        down(y),son[y][0]=merge(x,son[y][0]),upd(y);\n        return y;\n    }\n}\nstruct cc{\n    long long num,id;\n}a[maxn];\nint main()\n{\n    srand(time(0));\n    long long opt,n,m,l,r,x,y,z;\n    stack<int> q;\n    scanf(\"%lld\",&n);\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%lld\",&rnd[i]),rnd[i]=rnd[i]*n+i,val[i]=i,siz[i]=1;\n        while((!q.empty())&&rnd[i]<rnd[q.top()])\n            son[i][0]=q.top(),q.pop(),upd(son[i][0]);\n        if(!q.empty()) son[q.top()][1]=i;\n        q.push(i);\n    }\n    while(!q.empty()) rt=q.top(),upd(q.top()),q.pop();\n    for(int i=1;i<=n;++i)\n    {\n        down(rt);\n        printf(\"%lld \",siz[son[rt][0]]+i);\n        l=son[rt][0],r=son[rt][1];\n        son[rt][0]=son[rt][1]=0;\n        tag[l]^=1;\n        rt=merge(l,r);\n    }\n    return 0;\n}\n```",
        "postTime": 1559043212,
        "uid": 43957,
        "name": "HenryHuang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4402 \u3010[Cerc2007]robotic sort \u673a\u68b0\u6392\u5e8f\u3011"
    },
    {
        "content": "[\u5728\u535a\u5ba2\u67e5\u770b](https://www.cnblogs.com/chenxiaoran666/p/BZOJ3506.html)\n\n**\u5927\u81f4\u9898\u610f\uff1a** \u7ed9\u4f60$n$\u4e2a\u6570\u3002\u7b2c\u4e00\u6b21\u627e\u5230\u6700\u5c0f\u503c\u6240\u5728\u4f4d\u7f6e$P_1$\uff0c\u7ffb\u8f6c$[1,P_1]$\uff0c\u7b2c\u4e8c\u6b21\u627e\u5230\u5269\u4f59\u6570\u4e2d\u6700\u5c0f\u503c\u6240\u5728\u4f4d\u7f6e$P_2$\uff0c\u7ffb\u8f6c$[2,P_2]$\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u6c42$P_1,P_2,...,P_n$\u7684\u503c\u3002\n\n------\n\n### \u521d\u59cb\u5316\n\n\u8fd9\u9898\u5e94\u8be5\u662f\u4e00\u9053\u6bd4\u8f83\u88f8\u7684$Splay$\u9898\u3002\n\n\u5173\u4e8e$Splay$\u53ef\u4ee5\u67e5\u770b\u8fd9\u7bc7\u535a\u5ba2\uff1a[\u7b80\u6790\u5e73\u8861\u6811\uff08\u4e09\uff09\u2014\u2014\u6d45\u8c08Splay](https://www.cnblogs.com/chenxiaoran666/p/Splay.html)\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u5c06\u539f\u6570\u7ec4\u6392\u5e8f\u4e00\u904d\uff0c\u8bb0\u4e0b**\u6bcf\u4e00\u6b21\u64cd\u4f5c\u7684\u4f4d\u7f6e**\u3002\n\n\u6709\u4e00\u4e2a\u7ec6\u8282\uff0c\u9898\u76ee\u8981\u6c42**\u76f8\u540c\u503c\u8981\u5148\u53d6\u4f4d\u7f6e\u9760\u524d\u7684**\uff08\u6ca1\u6ce8\u610f\u5230\u8fd9\u70b9\u7ed3\u679c\u72c2$WA$\u4e0d\u6b62\uff09\u3002\n\n\u7136\u540e\u4fbf\u662f\u5efa\u6811\u3002\n\n\u6ce8\u610f\uff0c$Splay$\u5efa\u6811\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4e00\u822c\u4f1a\u5728\u5e8f\u5217\u5de6\u53f3\u5404\u52a0\u4e00\u4e2a\u591a\u4f59\u8282\u70b9\uff0c\u65b9\u4fbf\u540e\u9762\u53d6\u51fa\u4e00\u6bb5\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\u3002\n\n------\n\n### \u64cd\u4f5c\n\n\u6bcf\u4e00\u6b21\u64cd\u4f5c\uff0c\u6211\u4eec\u628a\u8981\u64cd\u4f5c\u7684\u4f4d\u7f6e\u5148$Splay$\u5230\u6839\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5f97\u51fa\u7b54\u6848\u5373\u4e3a\u6b64\u65f6**\u5de6\u5b50\u6811\u7684$Size$**\uff0c\u8bb0\u5176\u4e3a$ans$\u3002\n\n\u6ce8\u610f\u662f$Size$\u800c\u4e0d\u662f$Size+1$\uff0c\u8981\u8003\u8651\u5230\u6211\u4eec\u5728\u5e8f\u5217\u5de6\u8fb9\u52a0\u7684\u90a3\u4e2a\u591a\u4f59\u8282\u70b9\u5df2\u7ecf\u4f7f$Size$\u6bd4\u5b9e\u9645\u5b58\u5728\u7684\u8282\u70b9\u4e2a\u6570\u591a$1$\u4e86\u3002\n\n\u7136\u540e\uff0c\u6309\u7167\u9898\u76ee\u8981\u6c42\uff0c\u6211\u4eec\u8981\u7ffb\u8f6c\u533a\u95f4$[i,ans]$\u3002\uff08\u5173\u4e8e\u8fd9\u4e00\u64cd\u4f5c\u7684\u5177\u4f53\u8fc7\u7a0b\u53ef\u4ee5\u770b\u8fd9\u9053\u9898\uff1a[\u3010\u6d1b\u8c373391\u3011\u3010\u6a21\u677f\u3011\u6587\u827a\u5e73\u8861\u6811\uff08Splay\uff09](https://www.luogu.org/problemnew/show/P3391)\uff09\n\n\u76f4\u63a5\u5c06$i$\u53f7\u8282\u70b9\u548c$ans+2$\u53f7\u8282\u70b9\u5206\u522b\u65cb\u5230\u6839\u8282\u70b9\u548c\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\uff0c\u7136\u540e\u7ffb\u8f6c\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50\u5373\u53ef\u3002\n\n------\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define Type template<typename I>\n#define N 100000\n#define swap(x,y) (x^=y^=x^=y)\n#define INF 1e9\nusing namespace std;\nint n;\nstruct Data\n{\n    int pos,val;\n    inline friend bool operator < (Data x,Data y) {return x.val^y.val?x.val<y.val:x.pos<y.pos;}\n}a[N+5];\nclass Class_FIO\n{\n    private:\n        #define Fsize 100000\n        #define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,Fsize,stdin),A==B)?EOF:*A++)\n        #define pc(ch) (FoutSize^Fsize?Fout[FoutSize++]=ch:(fwrite(Fout,1,Fsize,stdout),Fout[(FoutSize=0)++]=ch))\n        #define Isi(x) (typeid(x).name()==typeid(1).name())\n        #define Isc(x) (typeid(x).name()==typeid('a').name())\n        int Top,FoutSize;char ch,*A,*B,Fin[Fsize],Fout[Fsize],Stack[Fsize];\n    public:\n        Class_FIO() {A=B=Fin;}\n        Type inline void read(I& x) {x=0;while(!isdigit(ch=tc()));while(x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));}\n        Type inline void write(I x)\n        {\n            if(Isi(x)) {while(Stack[++Top]=x%10+48,x/=10);while(Top) pc(Stack[Top--]);}\n            if(Isc(x)) pc(x);\n        }\n        template<typename I,typename... A> inline void read(I& x,A&... y) {read(x),read(y...);}\n        template<typename I,typename... A> inline void write(I x,A... y) {write(x),write(y...);}\n        inline void clear() {fwrite(Fout,1,FoutSize,stdout),FoutSize=0;}\n}F;\nclass Class_Splay//Splay\n{\n    private:\n        #define SIZE N\n        #define PushUp(x) (node[x].Size=node[node[x].Son[0]].Size+node[node[x].Son[1]].Size+1)\n        #define Rever(x) (swap(node[x].Son[0],node[x].Son[1]),node[x].Rev^=1)\n        #define PushDown(x) (node[x].Rev&&(Rever(node[x].Son[0]),Rever(node[x].Son[1]),node[x].Rev=0))\n        #define Which(x) (node[node[x].Father].Son[1]==x)\n        #define Connect(x,y,d) (node[node[x].Father=y].Son[d]=x)\n        #define Split(x,y) (Splay(get_pos(x),rt),Splay(get_pos((y)+2),node[rt].Son[1]),node[node[rt].Son[1]].Son[0])\n        int rt;\n        struct Tree\n        {\n            int Size,Rev,Father,Son[2];\n        }node[SIZE+5];\n        inline void Rotate(int x,int& k)\n        {\n            register int fa=node[x].Father,pa=node[fa].Father,d=Which(x);PushDown(fa),PushDown(x),\n            (fa^k?node[pa].Son[Which(fa)]=x:k=x),node[x].Father=pa,Connect(node[x].Son[d^1],fa,d),Connect(fa,x,d^1),PushUp(fa),PushUp(x);\n        }\n        inline void Splay(int x,int& k) {register int fa;while(x^k) fa=node[x].Father,fa^k&&(Rotate(Which(x)^Which(fa)?x:fa,k),0),Rotate(x,k);}\n        inline void Build(int l,int r,int& rt)\n        {\n            register int mid=l+r>>1;\n            if(node[rt=mid].Size=1,!(l^r)) return;\n            l<mid&&(Build(l,mid-1,node[rt].Son[0]),node[node[rt].Son[0]].Father=rt),\n            r>mid&&(Build(mid+1,r,node[rt].Son[1]),node[node[rt].Son[1]].Father=rt),\n            PushUp(rt);\n        }\n        inline int get_pos(int rk)\n        {\n            register int x=rt;\n            while(x) \n            {\n                if(PushDown(x),node[node[x].Son[0]].Size>=rk) x=node[x].Son[0];\n                else if(!(rk-=node[node[x].Son[0]].Size+1)) return x;\n                else x=node[x].Son[1];\n            }\n        }\n    public:\n        inline void Init(int len) {Build(1,len+2,rt);}\n        inline int GetAns(int x) \n        {\n            register int k,ans;\n            Splay(a[x].pos+1,rt),ans=node[node[rt].Son[0]].Size,k=Split(x,ans),Rever(k);//\u627e\u5230ans\uff0c\u7136\u540e\u7ffb\u8f6c\n            return ans;//\u8fd4\u56de\u7b54\u6848\n        }\n        #undef SIZE\n}Splay;\nint main()\n{\n    register int i,p;\n    for(F.read(n),i=1;i<=n;++i) F.read(a[a[i].pos=i].val);//\u8bfb\u5165\n    for(sort(a+1,a+n+1),Splay.Init(n),i=1;i<=n;++i) F.write(p=Splay.GetAns(i),' ');//\u521d\u59cb\u5316\u6392\u5e8f+\u4f9d\u6b21\u64cd\u4f5c\n    return F.clear(),0;\n}\n```\n\n\n\n",
        "postTime": 1546863826,
        "uid": 28382,
        "name": "TheLostWeak",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4402 \u3010[Cerc2007]robotic sort \u673a\u68b0\u6392\u5e8f\u3011"
    },
    {
        "content": "splay\u533a\u95f4\u64cd\u4f5c\u7684\u7ec3\u624b\u9898\uff0c\u5728\u7ef4\u62a4\u5e73\u8861\u7684\u65f6\u5019\u4e0d\u662f\u4ee5\u6570\u503c\uff0c\u800c\u662f\u4ee5\u4f4d\u7f6e\u4e3a\u6743\u503c\u7ef4\u62a4\u4e00\u9897splay\u3002\n\u7ffb\u8f6c\u7684\u65f6\u5019\u5c31\u628a\u7b2ci\u4e2a\u6570\u7684\u63d0\u5230\u6839\uff0c\u770b\u5b83\u7684\u5de6\u513f\u5b50\u7684\u5927\u5c0f\u5373\u5b83\u524d\u9762\u7684\u6570\u7684\u4e2a\u6570\u3002\n\u7136\u540e\u6a21\u62df\u9898\u76ee\u4e2d\u8bf4\u7684\u64cd\u4f5c\uff0c\u628ai-1\u63d0\u5230\u6839\uff0c\u518d\u628ai\u7684\u540e\u7ee7\u63d0\u5230i-1\u7684\u4e0b\u9762\u4e2d\u95f4\u5939\u7684\u5c31\u662f $i-1$ ~ $i$ \u4e86\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int N=100005;\nint n,fa[N],ch[N][2],val[N],siz[N],tot,pos[N],rt;\nstruct Node{\n\tint id,v;\n}a[N];\nbool cmp1(Node x,Node y) {return x.v==y.v?x.id<y.id:x.v<y.v;}\nbool cmp2(Node x,Node y) {return x.id<y.id;}\nbool rev[N];\ninline void pushup(int x) {siz[x]=siz[ch[x][0]]+siz[ch[x][1]]+1;}\nvoid pushdown(int x) {\n\tif(rev[x]) {\n\t\tswap(ch[x][0],ch[x][1]);\n\t\trev[ch[x][0]]^=1,rev[ch[x][1]]^=1;\n\t\trev[x]=0;\n\t}\n}\nint build(int f,int l,int r) {\n\tif(l>r) return 0;\n\tint now=++tot,mid=l+r>>1;\n\tval[now]=a[mid].v;fa[now]=f;\n\tpos[a[mid].v]=now;\n\tch[now][0]=build(now,l,mid-1);\n\tch[now][1]=build(now,mid+1,r);\n\tpushup(now);\n\treturn now;\n}\ninline void rotate(int x) {\n\tint f=fa[x],ff=fa[f];\n\tpushdown(f);pushdown(x);\n\tbool tag=ch[fa[x]][1]==x;\n\tch[f][tag]=ch[x][tag^1];\n\tfa[ch[f][tag]]=f;\n\tfa[f]=x;\n\tch[x][tag^1]=f;\n\tfa[x]=ff;\n\tif(ff) ch[ff][f==ch[ff][1]]=x;\n\tpushup(f);pushup(x);\n}\ninline void splay(int x,int tar){\n\tfor(int f;(f=fa[x])!=tar;rotate(x)) if(fa[f]!=tar)rotate((x==ch[fa[x]][0])==(f==ch[fa[f]][0])?f:x);\n\tif(!tar) rt=x;\n}\nint nxt(){\n\tpushdown(rt);\n\tint x=ch[rt][1];\n\twhile(pushdown(x),ch[x][0]) x=ch[x][0];\n\treturn x;\n}\nint main() {\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i+1].v),a[i+1].id=i+1;\n\ta[1].v=0;a[n+2].v=n+1;\n\tsort(a+2,a+2+n,cmp1);\n\tfor(int i=2;i<=n+1;i++) a[i].v=i-1;\n\tsort(a+2,a+2+n,cmp2);\n\trt=build(0,1,n+2);\n\tfor(int i=1;i<=n;i++) {\n\t\tint x=pos[i];splay(x,0);\n\t\tprintf(\"%d \",siz[ch[x][0]]);\t\t\n\t\tx=nxt();\n\t\tint y=pos[i-1];\n\t\tsplay(y,0);\n\t\tsplay(x,y);\n\t\trev[ch[x][0]]^=1;\n\t}\n}\n```",
        "postTime": 1537790018,
        "uid": 52191,
        "name": "swhsz",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4402 \u3010[Cerc2007]robotic sort \u673a\u68b0\u6392\u5e8f\u3011"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6709 $n$ \u4e2a\u6570\u7684\u5e8f\u5217\uff0c\u7136\u540e\u8fdb\u884c $n$ \u6b21\u64cd\u4f5c\u3002\u5bf9\u4e8e\u7b2c $i$ \u6b21\u64cd\u4f5c\uff0c\u8bb0\u7b2c $i$ \u5c0f\u503c\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u4e3a $k$\uff0c\u5148\u8f93\u51fa $k$\uff0c\u518d\u628a $[i,k]$ \u7684\u533a\u95f4\u7ffb\u8f6c\u4e00\u6b21\u3002\n\n---\n\u770b\u5230\u533a\u95f4\u7ffb\u8f6c\uff0c\u533a\u95f4\u7b2c $k$ \u5c0f\u8fd9\u4e24\u4e2a\u64cd\u4f5c\uff0c\u81ea\u7136\u800c\u7136\u5730\u5c31\u60f3\u5230\u4e86\u4f38\u5c55\u6811\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u64cd\u4f5c\u4e2d\uff0c\u5e76\u4e0d\u5173\u5fc3\u6bcf\u4e2a\u5143\u7d20\u7684\u5177\u4f53\u503c\uff0c\u800c\u662f\u5173\u5fc3\u6bcf\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u3002\u90a3\u4e48\u6211\u4eec\u8bb0\u5f55\u4e24\u4e2a\u503c\uff0c\u4e00\u4e2a\u662f\u5143\u7d20\u5728\u6570\u5217\u4e2d\u7684\u4e0b\u6807\uff0c\u53e6\u4e00\u4e2a\u662f\u5143\u7d20\u7684\u503c\uff0c\u7136\u540e\u6309\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u503c\u76f8\u540c\u7684\u6309\u4e0b\u6807\u6392\u5e8f\u5373\u53ef\u3002**\u6ce8\u610f\uff0c\u8bb0\u5f97\u63d2\u5165\u54e8\u5175\u3002**\n\n\u6392\u5b8c\u5e8f\u540e\uff0c\u503c\u5c31\u6ca1\u7528\u4e86\uff08\u56e0\u4e3a\u5df2\u7ecf\u5355\u8c03\u9012\u589e\u4e86\uff09\uff0c\u76f4\u63a5\u5efa\u6811\u5373\u53ef\u3002\u7136\u540e\uff0c\u6211\u4eec\u60f3\u4e00\u60f3\uff0c\u65e2\u7136\u5df2\u7ecf\u5355\u8c03\u9012\u589e\u4e86\uff0c\u90a3\u67e5\u8be2\u7b2c $k$ \u5c0f\u7684\u65f6\u5019\u662f\u4e0d\u662f\u628a\u5e8f\u5217\u4e2d\u5bf9\u5e94\u7684\u4e0b\u6807\u65cb\u8f6c\u5230\u6839\u4e4b\u540e\uff0c\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u52a0\u4e00\u5c31\u662f\u5c31\u662f\u7b54\u6848\u4e86\uff08\u6ce8\u610f\uff0c\u662f\u4e0b\u6807\uff0c\u4e0d\u662f\u5143\u7d20\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u6837\u505a\uff09\u3002\u6700\u540e\u5728\u627e\u5230\u4e4b\u540e\u628a\u8981\u53cd\u8f6c\u7684\u533a\u95f4\u53cd\u8f6c\u4e00\u4e0b\u4e00\u4e0b\u5373\u53ef\u3002\n\n### \u6ce8\u610f\uff1a\u5c3d\u53ef\u80fd\u7684\u591a\u4e0b\u4f20\u61d2\u60f0\u6807\u8bb0\uff0c\u80fd\u4e0b\u4f20\u5c31\u4e0b\u4f20\uff01\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define N 100005\n#define inf 1000000007\nusing namespace std;\nstruct Splay{\n    int f,s[2],sz,rev;\n}tr[N];\nstruct num{\n    int id,h;\n}a[N];\nint n,rt;\nbool cmp(num x,num y){\n    return x.h==y.h?x.id<y.id:x.h<y.h;\n}\nvoid push_up(int k){\n    tr[k].sz=tr[tr[k].s[0]].sz+tr[tr[k].s[1]].sz+1;\n}\nvoid push_down(int k){\n    if(!tr[k].rev) return;\n    if(tr[k].s[0]) tr[tr[k].s[0]].rev^=1;\n    if(tr[k].s[1]) tr[tr[k].s[1]].rev^=1;\n    swap(tr[k].s[1],tr[k].s[0]);\n    tr[k].rev=0;\n}\nvoid rotate(int x){\n    int y=tr[x].f,z=tr[y].f,k=(tr[y].s[1]==x);\n    push_down(y),push_down(x);\n    tr[x].f=z,tr[z].s[tr[z].s[1]==y]=x;\n    tr[y].s[k]=tr[x].s[k^1],tr[tr[x].s[k^1]].f=y;\n    tr[x].s[k^1]=y,tr[y].f=x;\n    push_up(y),push_up(x);\n}\nvoid splay(int x,int goal){\n    while(tr[x].f!=goal){\n        int y=tr[x].f,z=tr[y].f;\n        if(z!=goal) push_down(z);\n        push_down(y),push_down(x);\n        if(z!=goal) rotate((tr[y].s[1]==x)^(tr[z].s[1]==y)?x:y);\n        rotate(x);\n    }\n    if(!goal) rt=x;\n}\nvoid build(int l,int r,int fa){\n    if(l>r) return;\n    int mid=l+r>>1;\n    if(mid<fa) tr[fa].s[0]=mid;\n    else tr[fa].s[1]=mid;\n    tr[mid].sz=1,tr[mid].f=fa;\n    build(l,mid-1,mid);\n    build(mid+1,r,mid);\n    push_up(mid);\n}\nint find(int v){\n    int x=rt;\n    while(1){\n        push_down(x);\n        if(v<=tr[tr[x].s[0]].sz && tr[x].s[0]) x=tr[x].s[0];\n        else{\n            v-=tr[tr[x].s[0]].sz+1;\n            if(v==0) return x;\n            else x=tr[x].s[1];\n        }\n    }\n}\nvoid reverse(int l,int r){\n    l=find(l-1),r=find(r+1);\n    splay(l,0),splay(r,l);\n    tr[tr[tr[rt].s[1]].s[0]].rev^=1;\n}\nsigned main(){\n    scanf(\"%lld\",&n);\n    for(int i=2;i<=n+1;++i){\n        scanf(\"%lld\",&a[i].h);\n        a[i].id=i;\n    }\n    a[1].h=-inf,a[n+2].h=inf,a[1].id=1,a[n+2].id=n+2;\n    sort(a+1,a+n+3,cmp);\n    build(1,n+2,0);\n    rt=n+3>>1;\n    for(int i=2;i<=n;++i){\n        splay(a[i].id,0);\n        int ans=tr[tr[rt].s[0]].sz+1;\n        printf(\"%lld \",ans-1);\n        reverse(i,ans);\n    }\n    printf(\"%lld\",n);\n    return 0;\n}\n```\n",
        "postTime": 1659492712,
        "uid": 491321,
        "name": "Erotate",
        "ccfLevel": 0,
        "title": "P4402 [Cerc2007]robotic sort \u673a\u68b0\u6392\u5e8f \u9898\u89e3"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4402)\n\n## \u9898\u610f\n\n\u7ed9\u5b9a $n$ \u4e2a\u6574\u6570 $p_1, p_2, p_3 \\dots p_n $\uff0c$ n $ \u6b21\u64cd\u4f5c\u5206\u522b\u8f93\u51fa\u7b2c $i$ \u5c0f\u503c\u5728\u533a\u95f4\u5185\u7684\u4f4d\u7f6e $ k $\uff0c\u4e14\u7ffb\u8f6c\u533a\u95f4 $[i, k]$\u3002\n\n## \u601d\u8def\n\n\u4ece**\u533a\u95f4\u7ffb\u8f6c**\u80fd\u770b\u51fa\u662f\u7528 splay \u533a\u95f4\u6811\uff0c\u4f46 $k$ \u5c0f\u503c\u65e0\u6cd5\u5728\u533a\u95f4\u6811\u4e2d\u7ef4\u62a4\u3002\n\n\u53c8\u56e0\u4e3a\u9898\u76ee\u53ea\u8981\u6c42\u8f93\u51fa\u503c\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u8003\u8651\u5c06\u539f\u6570\u7ec4\u6309\u9ad8\u5ea6\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u7f16\u53f7\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u4e00\u904d\uff0c\u6309\u7167\u7f16\u53f7\u5efa\u6811\uff0c\u7136\u540e\u628a\u539f\u6570\u7ec4\u4e2d\u7b2c $k$ \u4e2a\u6570\u503c\u7684\u7f16\u53f7\u65cb\u8f6c\u5230\u6839\uff0c\u5b83\u7684\u5de6\u5b50\u6811\u7684 $ siz $\uff08\u5de6\u5b50\u6811\u7684 $siz + 1$ \u518d\u51cf\u53bb\u54e8\u5175\u7684 $1$\uff09\u5c31\u662f\u5b83\u7684\u4f4d\u7f6e\u4e86\uff08\u56e0\u4e3a\u6392\u5e8f\u540e\u662f\u5355\u8c03\u9012\u589e\u7684\uff09\u3002\n\n\u63a5\u7740\u662f\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u5c31\u662f\u4e2a splay \u7684\u6a21\u677f\u4e86\uff0c\u5c06\u6392\u540d\u4e3a $i$ \u7684\u503c\u8f6c\u5230\u6839\uff0c\u518d\u628a\u521a\u521a\u6c42\u51fa\u6765\u7684 $k+2$ \u8f6c\u5230\u6839\u7684\u53f3\u5b50\u6811\uff08\u56e0\u4e3a\u6709\u54e8\u5175\uff0c\u6240\u4ee5\u90fd\u8981\u52a0\u4e00\uff09\uff0c\u8fd9\u65f6\u6839\u7684\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u5c31\u662f\u533a\u95f4 $[i, k]$ \u4e86\uff0c\u7136\u540e\u4ea4\u6362\u4e00\u4e0b\u5b83\u7684\u5de6\u53f3\u513f\u5b50\uff0c\u6253\u4e2a\u6807\u8bb0\u5c31\u597d\u4e86\u3002\n\n**\u6ce8\u610f\uff1a\u6807\u8bb0\u4e00\u5b9a\u8981\u591a pushdown\uff0c\u5728 rotate \u548c getk \u4e2d\u90fd\u8981\u4e0b\u4f20\uff01\uff01\uff01**\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nnamespace fastio{\n    template<typename T> inline void read(T &t){\n        int x = 0, f = 1;\n        char c = getchar();\n        while(!isdigit(c)){\n            if(c == '-') f = -f;\n            c = getchar();\n        }\n        while(isdigit(c)) x = x * 10 + c - '0', c = getchar();\n        t = x * f;\n    }\n    template<typename T, typename ... Args> inline void read(T &t, Args&... args){\n        read(t);\n        read(args...);\n    }\n    template<typename T> void write(T t){\n        if(t < 0) putchar('-'), t = -t;\n        if(t >= 10) write(t / 10);\n        putchar(t % 10 + '0');\n    }\n    template<typename T> void writeln(T t){\n        write(t);\n        puts(\"\");\n    }\n};\nusing namespace fastio;\nconst int N = 100005, inf = 0x3f3f3f3f;\nint n, id[10000005];\nstruct node{\n    int x, id;\n    bool operator<(const node b)const{\n        if(x == b.x) return id < b.id;\n        return x < b.x;\n    }\n}w[N];\nint cnt, rt;\nstruct Tree{\n    int fa, son[2], val, rev, siz;\n    #define ls a[x].son[0]\n    #define rs a[x].son[1]\n}a[N];\nint New(int fa, int val){\n    a[++cnt] = Tree{fa, {0, 0}, val, 0, 1};\n    return cnt;\n}\nvoid update(int x){\n    a[x].siz = a[ls].siz + a[rs].siz + 1;\n}\nvoid pushr(int x){\n    swap(ls, rs);\n    a[x].rev ^= 1;\n}\nvoid pushdown(int x){\n    if(a[x].rev){\n        if(ls) pushr(ls);\n        if(rs) pushr(rs);\n        a[x].rev = 0;\n    }\n}\nvoid rotate(int x){\n    int y = a[x].fa, z = a[y].fa, k = a[y].son[1] == x;\n    pushdown(y), pushdown(x);\n    a[z].son[a[z].son[1] == y] = x, a[x].fa = z;\n    a[y].son[k] = a[x].son[k ^ 1], a[a[x].son[k ^ 1]].fa = y;\n    a[x].son[k ^ 1] = y, a[y].fa = x;\n    update(y), update(x);\n}\nvoid splay(int x, int goal){\n    while(a[x].fa != goal){\n        int y = a[x].fa, z = a[y].fa;\n        if(z != goal) rotate((a[z].son[1] == y) ^ (a[y].son[1] == x) ? x : y);\n        rotate(x);\n    }\n    if(!goal) rt = x;\n}\nint getk(int k){\n    int x = rt;\n    while(1){\n        pushdown(x);\n        if(k <= a[ls].siz) x = ls;\n        else if(k <= a[ls].siz + 1){\n            splay(x, 0);\n            return x;\n        }\n        else k -= a[ls].siz + 1, x = rs;\n    }\n}\nvoid build(int &x, int l, int r, int fa){\n    if(l > r) return;\n    int mid = l + r >> 1;\n    x = mid, a[x] = Tree{fa, {0, 0}, w[mid].id, 0, 1};\n    build(ls, l, mid - 1, x);\n    build(rs, mid + 1, r, x);\n    update(x);\n}\nint Find(int val){\n    int x = rt;\n    while(1){\n        if(val == a[x].val){\n            splay(x, 0);\n            return x;\n        }\n        if(val < a[x].val) x = ls;\n        else x = rs;\n    }\n}\nvoid Reverse(int l, int r){\n    int x = getk(l), y = r;\n    splay(x, 0), splay(y, x);\n    // cout << x << ' ' << y << endl;\n    pushr(a[y].son[0]);\n}\nvoid debug(int x, bool f = 1){\n    pushdown(x);\n    if(f) cout << \"=================\" << '\\n';\n    printf(\"num: %d, val: %d, ls: %d, rs: %d, fa: %d\\n\", x, a[x].val, a[ls].val, a[rs].val, a[a[x].fa].val);\n    if(ls) debug(ls, 0);\n    if(rs) debug(rs, 0);\n}\nvoid dfs(int x){\n    pushdown(x);\n    if(ls) dfs(ls);\n    if(a[x].val != inf && a[x].val != -inf) putchar(' ');\n    if(rs) dfs(rs);\n}\n\nint main(){\n    read(n);\n    for(int i = 2; i <= n + 1; ++i){\n        read(w[i].x), w[i].id = i;\n    }\n    w[1].x = -inf, w[n + 2].x = inf, w[1].id = 1, w[n + 2].id = n + 2;\n    sort(w + 1, w + 3 + n);\n    build(rt, 1, n + 2, 0);\n    // debug(rt);\n    for(int i = 2; i <= n + 1; ++i){\n        splay(w[i].id, 0);\n        // cout << id[w[i].id] << endl;\n        int k = a[a[rt].son[0]].siz + 1;\n        // debug(rt);\n        write(k - 1), putchar(' ');\n        int x = getk(i - 1), y = getk(k + 1);\n        splay(x, 0), splay(y, x);\n        pushr(a[y].son[0]);\n        // debug(rt);\n        // puts(\"\");\n    }\n    return 0;\n}\n```",
        "postTime": 1659491764,
        "uid": 573341,
        "name": "MiniLong",
        "ccfLevel": 0,
        "title": "P4402 [Cerc2007]robotic sort \u673a\u68b0\u6392\u5e8f \u9898\u89e3"
    },
    {
        "content": "## $\\texttt{Content}$\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217\uff0c\u7b2c $i$ \u6b21\u64cd\u4f5c\u627e\u5230 $[i,n]$ \u4e2d\u6700\u5c0f\u503c $p_j$\uff0c\u5e76\u5c06\u533a\u95f4 $[i,j]$ \u7ffb\u8f6c\uff0c\u4f7f\u5f97\u5b9e\u73b0\u4e00\u79cd**\u7a33\u5b9a**\u6392\u5e8f\u7684\u6548\u679c\u3002\u8f93\u51fa\u6bcf\u6b21\u67e5\u8be2\u51fa\u7684 $j$\u3002\n\n## $\\texttt{Solution}$\n\n\u5f88\u663e\u7136\u7684 splay \u677f\u5b50\u3002~~\u4f46\u662f\u5f88\u96be\u8c03~~\n\n\u56e0\u4e3a\u8981\u5b9e\u73b0\u7684\u662f\u533a\u95f4\u53cd\u8f6c\u64cd\u4f5c\uff0c\u90a3\u4e48\u5efa\u6811\u7684\u65f6\u5019\u5c31\u4e0d\u662f\u4ee5\u5f53\u524d\u70b9\u7684\u6743\u503c\u5efa\u4e86\uff0c\u800c\u662f\u4ee5\u5f53\u524d\u70b9\u7684\u4f4d\u7f6e\u6765\u5efa\u3002\n\n\u6240\u4ee5\u5c31\u53ef\u4ee5\u628a\u8f93\u8fdb\u53bb\u7684\u503c\uff0c\u6392\u4e00\u4e0b\u5e8f\uff0c\u7136\u540e\u5c31\u6309\u7167\u4e0b\u6807\u63d2\u5165\u5230\u6811\u91cc\u3002\u7531\u4e8e\u6211\u4eec\u6309\u7167\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u77e5\u9053\u4e86\u6bcf\u6b21\u64cd\u4f5c\u7684 $P_j$ \u662f\u591a\u5c11\u3002\n\n\u83b7\u53d6\u7ed3\u679c\u7684\u65f6\u5019\uff0c\u5c31\u628a\u76ee\u6807\u4f4d\u7f6e\u8f6c\u5230\u6811\u9876\uff0c\u7136\u540e\u8f93\u51fa\u4e00\u4e0b\u5de6\u5b50\u6811\u5927\u5c0f\u5373\u53ef\u3002\uff08\u52a0\u4e0a\u81ea\u5df1\uff0c\u518d\u51cf\u53bb\u54e8\u5175\u8282\u70b9\u76f8\u5f53\u4e8e\u6ca1\u6709\u52a0\uff09\n\n\u7136\u540e\u533a\u95f4\u7ffb\u8f6c\u5c31\u662f\u5f88 naive \u7684\u6587\u827a\u5e73\u8861\u6811\u64cd\u4f5c\u4e86\u3002\n\n\u4e0d\u77e5\u9053\u4e3a\u5565\u6211 cout \u8dd1\u7684\u8d85\u7ea7\u6162\uff0c\u7136\u540e\u5c31\u6302\u4e86\u5f88\u591a\u6b21\u3002\n\n## $\\texttt{Code}$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nvoid qread(int &x) {\n\tint sum = 0;char c = getchar();\n\twhile(c >= '0' && c <= '9') sum = sum * 10 + c -'0', c = getchar();\n\tx = sum;\n}\n\nconst int N = 1e6+5, MAXN = 1e8;\n//\u8f93\u5165\u7684\u5e8f\u5217\nstruct node {\n\tint v, id;\n\tnode(){}\n\tnode(int _v, int _id){\n\t\tv = _v, id = _id;\n\t}\n}num[N];\nstruct spl{\n\tnode v;\n\tint s[2], p, minn;\n\tint size, cnt, fl;\n}g[N];\nint n ,rt, idx;\n\n//\u5411\u4e0a\u5408\u5e76\nvoid pushup(int u) {\n\tg[u].size = g[g[u].s[0]].size + g[g[u].s[1]].size + 1; \n\tg[u].minn = min(g[u].v.v, min(g[g[u].s[0]].minn, g[g[u].s[1]].minn));\n}\n\n//\u4f20\u4e0b\u7ffb\u8f6c\u6807\u8bb0\nvoid pushdown(int u) {\n\tif(g[u].fl) {\n\t\tswap(g[u].s[0], g[u].s[1]);\n\t\tg[g[u].s[0]].fl ^= 1;\n\t\tg[g[u].s[1]].fl ^= 1;\n\t\tg[u].fl = 0;\n\t}\n}\n\n//splay \u677f\u5b50\nvoid ro(int u) {\n\tint x = g[u].p, y = g[x].p;\n\tint k = g[x].s[1] == u;\n\tg[y].s[g[y].s[1] == x] = u, g[u].p = y;\n\tg[x].s[k] = g[u].s[k^1], g[g[u].s[k^1]].p = x;\n\tg[u].s[k^1] = x, g[x].p = u;\n\tpushup(x); pushup(u);\n}\n\nvoid splay(int u, int k) {\n\twhile(g[u].p != k) {\n\t\tint x = g[u].p;\n\t\tint y = g[x].p;\n\t\tif(y != k) {\n\t\t\tif((g[x].s[1] == u) ^ (g[y].s[1] == x)) ro(u);\n\t\t\telse ro(x);\n\t\t}\n\t\tro(u);\n\t}\n\tif(!k) rt = u;\n}\n\n//\u63d2\u5165\nvoid insert(node v) {\n\tint u = rt, p = 0;\n\twhile(u) p = u, u = g[u].s[v.id > g[u].v.id];\n\tif(u) {\n\t\tg[u].cnt ++;\n\t}else {\n\t\tu = ++ idx;\n\t\tif(p) g[p].s[v.id > g[p].v.id] = u;\n\t\tg[u].p = p;\n\t\tg[u].minn = v.v;\n\t\tg[u].size = 1;\n\t\tg[u].v = v;\n\t}\n\tsplay(u, 0);\n}\n\nint find_min(int u) {\n\twhile(true) {\n\t\tpushdown(u);\n\t\tif(g[u].minn == g[u].v.v) return u;\n\t\tif(g[u].minn == g[g[u].s[0]].minn) u = g[u].s[0];\n\t\telse u = g[u].s[1];\n\t}\n}\n\nint get_k(int k) {\n\tint u = rt;\n\twhile(true) {\n\t\tpushdown(u);\n\t\tif(k > g[g[u].s[0]].size + 1) k -= g[g[u].s[0]].size + 1, u = g[u].s[1];\n\t\telse if(k == g[g[u].s[0]].size + 1) return u;\n\t\telse u = g[u].s[0];\n\t} \n\treturn u;\n}\n\nbool cmp(node a, node b) {\n\tif(a.v == b.v) return a.id < b.id;\n\treturn a.v < b.v; \n}\n\nint main() {\n\t\tqread(n);\n\t\tif(n == 0) {\n\t\t\tbreak;\n\t\t}\n\t\tidx = rt= 0;\n\t\t//\u5efa\u6811\n\t\t//\u63d2\u5165\u54e8\u5175\u8282\u70b9\n\t\tinsert(node(MAXN, 1));\n\t\tinsert(node(MAXN, n+2));\n\t\tg[0].minn = g[0].v.v = MAXN;\n\t\tfor(int i = 1;i <= n;i ++) {\n\t\t\tqread(num[i].v);\n\t\t\tnum[i].id = i;\n\t\t}\n\t\t\n\t\tsort(num+1, num+1+n, cmp);\n\t\tfor(int i = 1;i <= n;i ++) insert(node(i, num[i].id+1)); \n\t\t\n\t\tfor(int i = 1;i <= n;i ++) {\n\t\t\t//\u627e\u5230\u76ee\u6807\u8282\u70b9\n\t\t\tint l = get_k(i), r = get_k(n+2);\n\t\t\tsplay(l, 0); splay(r, l); \n\t\t\tint x = find_min(g[r].s[0]);\n\t\t\tsplay(x, 0);\n\t\t\tprintf(\"%d \", g[g[rt].s[0]].size);\n\t\t\tl = get_k(i), r = get_k(g[g[rt].s[0]].size + 2);\n\t\t\tsplay(l, 0);splay(r, l);\n\t\t\tg[g[r].s[0]].fl ^= 1; \n\t\t}\n\t\tputs(\"\");\n\t\t//\u6e05\u7a7a\u6570\u7ec4\n\treturn 0;\n}\n```",
        "postTime": 1636434616,
        "uid": 195388,
        "name": "alvis",
        "ccfLevel": 5,
        "title": "P4402"
    },
    {
        "content": "\u4e00\u9053\u7ecf\u5178\u7684\u533a\u95f4\u5e73\u8861\u6811\u9898\uff0c\u7528 fhq Treap \u548c Splay \u5747\u53ef\u5b9e\u73b0\u3002\u4e0b\u9762\u63d0\u4f9b\u4e24\u8005\u7684\u601d\u8def\uff0c\u8be6\u7ec6\u89e3\u91ca\u524d\u8005\u5e76\u63d0\u4f9b\u4ee3\u7801\u3002\n\n## \u9898\u76ee\u5927\u610f\n\u6709 $n$ \u4e2a\u6570\u5b57\uff0c$1\\le n\\le 10^5$\uff0c\u7528\u4e00\u4e2a\u673a\u68b0\u81c2\u6392\u5e8f\uff0c\u65b9\u6cd5\u5982\u56fe\u6240\u793a\uff0c\u6bcf\u6b21\u7528\u673a\u68b0\u81c2\u5939\u4f4f\u7b2c $i$ \u4e2a\u6570\u548c\u7b2c $i$ \u5c0f\u7684\u6570\u7ffb\u8f6c\uff0c\u91cd\u590d\u6b64\u8fc7\u7a0b\u76f4\u5230\u7ed3\u675f\uff0c\u6c42\u7b2c $i$ \u6b21\u7ffb\u8f6c\u4e4b\u524d\u7b2c $i$ \u5927\u7684\u6570\u7684\u4f4d\u7f6e\u3002\n\n## \u5927\u4f53\u601d\u8def\n\u9996\u5148\u4ecb\u7ecd Splay \u7684\u601d\u8def\u3002\u5229\u7528\u5176\u80fd\u5c06\u7ed3\u70b9\u65cb\u8f6c\u5230\u6839\u7684\u529f\u80fd\uff0c\u8003\u8651\u533a\u95f4\u7ffb\u8f6c\u65f6\u627e\u5230\u6700\u5c0f\u7684\u6570\uff0c\u5c06\u5176\u65cb\u8f6c\u5230\u6839\uff0c\u5219\u5176\u5de6\u5b50\u6811\u5927\u5c0f\u5c31\u662f\u6570\u5217\u4e2d\u6392\u5728\u5176\u5de6\u8fb9\u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u5bf9\u4e8e\u533a\u95f4\u7ffb\u8f6c\uff0c\u7528\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684\u61d2\u6807\u8bb0\u8bb0\u5f55\u53cd\u8f6c\u60c5\u51b5\uff0c\u8fdb\u884c\u533a\u95f4\u7ffb\u8f6c\u65f6\u4ee4\u6807\u8bb0 `rev ^= 1`\uff0c\u6bcf\u6b21\u64cd\u4f5c\u65f6\u6807\u8bb0\u4e0b\u653e\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e4b\u540e\uff0c\u5f97\u5230\u7684\u7b2c $i$ \u5c0f\u503c\u5c06\u4e0d\u53c2\u4e0e\u540e\u7eed\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u5c06\u5176\u76f4\u63a5\u4ece\u6811\u4e2d\u5220\u9664\u3002\u8ba1\u7b97\u7b2c $i$ \u4e2a\u6392\u540d\u65f6\u52a0\u4e0a\u5220\u53bb\u6570\u7684\u4e2a\u6570 $i-1$ \u5373\u53ef\u3002\n________\n\n\u4e0b\u9762\u4ecb\u7ecd fhqTreap \u7684\u601d\u8def\u3002\u7531\u4e8e\u5176\u80fd\u591f\u5206\u88c2\u5408\u5e76\uff0c\u8003\u8651\u6309\u7167\u6392\u540d\u8fdb\u884c\u5206\u88c2\u5408\u5e76\uff0c\u6bcf\u6b21\u64cd\u4f5c\u65f6\u627e\u5230\u6700\u5c0f\u503c\u7684\u6392\u540d $k$\uff0c\u5e76\u5c06\u533a\u95f4 $[1, k]$ \u7ffb\u8f6c\uff0c\u968f\u540e\u5220\u53bb\u8be5\u503c\u3002\u6bcf\u6b21\u7684\u7b54\u6848\u5373\u4e3a $k+i-1$\u3002\n\n\u4e3b\u8981\u64cd\u4f5c\u6d89\u53ca `split`, `merge`, `insert`, `remove`, `pushdown` \u7b49\uff0c\u5bf9\u4e8e\u5176\u4e0d\u719f\u6089\u8bf7\u81f3\u6a21\u677f\u9898\u300a\u666e\u901a\u5e73\u8861\u6811\u300b\u4ee5\u53ca\u300a\u6587\u827a\u5e73\u8861\u6811\u300b\u3002\n\n## \u4ee3\u7801 Code\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n#define rep(ii,aa,bb) for(re int ii = aa; ii <= bb; ii++)\n#define Rep(ii,aa,bb) for(re int ii = aa; ii >= bb; ii--)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair<int, int> PII;\nconst int maxn = 1e5 + 5;\nnamespace IO_ReadWrite {\n\t#define re register\n\t#define gg (p1 == p2 && (p2 = (p1 = _buf) + fread(_buf, 1, 1<<21, stdin), p1 == p2) ? EOF :*p1++)\n\tchar _buf[1<<21], *p1 = _buf, *p2 = _buf;\n\ttemplate <typename T>\n\tinline void read(T &x){\n\t\tx = 0; re T f=1; re char c = gg;\n\t\twhile(c > 57 || c < 48){if(c == '-') f = -1;c = gg;}\n\t\twhile(c >= 48 &&c <= 57){x = (x<<1) + (x<<3) + (c^48);c = gg;}\n\t\tx *= f;return;\n\t}\n\tinline void ReadChar(char &c){\n\t\tc = gg;\n\t\twhile(!isalpha(c)) c = gg;\n\t}\n\ttemplate <typename T>\n\tinline void write(T x){\n\t\tif(x < 0) putchar('-'), x = -x;\n\t\tif(x > 9) write(x/10);\n\t\tputchar('0' + x % 10);\n\t}\n\ttemplate <typename T>\n\tinline void writeln(T x){write(x); putchar('\\n');}\n}\nusing namespace IO_ReadWrite;\n// <------------------ \u5feb\u8bfb ----------------->\nint n, root, seed = 1, tot; \n// root: \u6839, tot: \u52a8\u6001\u5f00\u70b9 \nstruct node{\n\tint l, r;\n\tint val, sz, wei, mi, rev;\n    //wei: \u968f\u673a\u6743\u503c\uff0crev: \u61d2\u6807\u8bb0\n} a[maxn];\n// <--------------- \u53d8\u91cf\u7533\u660e ---------------->\ninline int rand1() { return seed *= 19491001; } // \u968f\u673a\u6743\u503c\ntemplate <typename T>\ninline T Min(T x, T y) {\n\treturn x < y ? x : y;\n}\ntemplate <typename T>\ninline void Swap(T &x, T &y) {\n\tT t = x; x = y; y = t;\n}\ninline void pushup(int p) { //\u5411\u4e0a\u66f4\u65b0\n\ta[p].sz = a[a[p].l].sz + a[a[p].r].sz + 1;\n\ta[p].mi = Min(a[p].val, Min(a[a[p].l].mi, a[a[p].r].mi));\n}\ninline void pushdown(int p) { //\u6807\u8bb0\u4e0b\u653e\n\tif (!a[p].rev) return;\n\tSwap(a[p].l, a[p].r);\n\ta[a[p].l].rev ^= 1;\n\ta[a[p].r].rev ^= 1;\n\ta[p].rev = 0;\n}\ninline PII split(int p, int k) { \n\t//\u5206\u88c2\uff0c \u8fd4\u56de pair \u8868\u793a\u4e24\u68f5\u6811\u7684\u6839\n\tif(!p) return {0, 0};\n\tpushdown(p);\n\tif(a[a[p].l].sz < k) {// \u5206\u88c2\u53f3\u5b50\u6811\n\t\tk -= (a[a[p].l].sz + 1);\n\t\tPII t = split(a[p].r, k);\n\t\ta[p].r = t.first;\n\t\tpushup(p);\n\t\treturn {p, t.second};\n\t} else {//\u7ee7\u7eed\u5206\u88c2\u5de6\u5b50\u6811\n\t\tPII t = split(a[p].l, k);\n\t\ta[p].l = t.second;\n\t\tpushup(p);\n\t\treturn {t.first, p};\n\t}\n}\ninline int merge(int u, int v) {//\u5408\u5e76\n\tif(!u || !v) return u | v;\n\tif(a[u].wei < a[v].wei) {//u \u4f18\u5148\u7ea7\u9ad8\uff0c\u4f5c\u4e3a\u7236\u8282\u70b9\n\t\tpushdown(u);\n\t\ta[u].r = merge(a[u].r, v);\n\t\tpushup(u); return u;\n\t} else {\n\t\tpushdown(v);\n\t\ta[v].l = merge(u, a[v].l);\n\t\tpushup(v); return v;\n\t}\n}\ninline void insert(int k) {\n\ta[++tot].wei = rand1(); a[tot].sz = 1; a[tot].val = a[tot].mi = k;\n    //\u52a8\u6001\u5f00\u70b9\n\troot = merge(root, tot);//\u5408\u5e76\n    //\u7531\u4e8e\u4e3b\u51fd\u6570\u5df2\u7ecf\u6309\u503c\u6392\u5e8f\uff0c\u6b64\u5904\u76f4\u63a5\u5408\u5e76\u81f3\u53f3\u5b50\u6811\u5373\u53ef\n}\ninline int find(int p) {//\u627e\u6700\u5c0f\u503c\n\tint k = 1;\n\twhile(p) {\n\t\tpushdown(p);\n\t\tif(a[p].l && a[p].mi == a[a[p].l].mi) p = a[p].l;//\u5de6\u5b50\u6811\n\t\telse if(a[p].r && a[p].mi == a[a[p].r].mi)//\u53f3\u5b50\u6811\n\t\t\tk += a[a[p].l].sz + 1,\n\t\t\tp = a[p].r;\n\t\telse return k + a[a[p].l].sz;//\u5f53\u524d\u8282\u70b9 \n\t}\n}\ninline void reverse(int k) {\n\tPII x = split(root, k);\n\tPII y = split(x.first, k - 1);//\u5206\u79bb\u51fa\u533a\u95f4 [1,k]\n\ta[y.first].rev ^= 1;//\u6807\u8bb0\n\troot = merge(y.first, x.second);//\u5220\u9664\u5e76\u5408\u5e76\n}\n\nstruct Node {\n\tint num, pos;\n\tbool operator <(const Node &x)const {\n\t\tif(num != x.num) return num < x.num;\n\t\treturn pos < x.pos;\n\t}\n} p[maxn];\nint v[maxn];\n\nint main () {\n\ta[0].mi = (1 << 30);//\u8fb9\u754c\n\tread(n);\n\trep(i, 1, n) \n\t\tread(p[i].num), p[i].pos = i;\n\tsort(p + 1, p + n + 1);//\u6309\u503c\u6392\u5e8f\n\trep(i, 1, n)\n\t\tv[p[i].pos] = i;\n\trep(i, 1, n) insert(v[i]);//\u63d2\u5165\n\trep(i, 1, n) {\t\t\n\t\tint k = find(root);//\u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\n\t\treverse(k);//\u533a\u95f4\u7ffb\u8f6c\u5e76\u5220\u9664\n\t\twrite(k + i - 1), putchar(' ');//\u8f93\u51fa\n\t}\n\t\n\treturn 0;\n}\n```\n## \u540e\u8bb0\n\u672c\u9898\u6709\u56db\u500d\u7ecf\u9a8c\uff1aP3165\uff0cP4402\uff0cSP2059\uff0cUVA1402\u3002",
        "postTime": 1621518303,
        "uid": 279197,
        "name": "Mars_Dingdang",
        "ccfLevel": 6,
        "title": "P4402 Robotic Sort"
    },
    {
        "content": "\u8fd9\u9898\u4f5c\u4e3a\u4e00\u9053\u5341\u5206\u7ecf\u5178\u7684**\u5e73\u8861\u6811\u7ef4\u62a4\u5e8f\u5217**\u7684\u95ee\u9898\uff0c\u81ea\u7136\u662f\u503c\u5f97\u4e00\u505a\u7684\u4e86\u3002\n\n\u5199\u5b8c\u7ffb\u4e86\u4e0b\u9898\u89e3\u53d1\u73b0\u90fd\u662f\u5199**Splay**\u7684dalao\uff0c\u5c11\u6709\u7684\u66b4\u529b**FHQ_Treap**\u515a\u8fd8\u662f\u7528**\u6307\u9488**\u5b9e\u73b0\u7684\u3002\n\n\u6240\u4ee5\u8fd9\u91cc\u7565\u5fae\u8bb2\u89e3\u4e0b\u6570\u7ec4\u5b9e\u73b0\u7684FHQ_Treap\u597d\u4e86\uff0c\u611f\u89c9\u5199\u8d77\u6765\u6bd4Splay\u8212\u670d\u4e9b\u3002\n\n\u9996\u5148\u6211\u4eec\u8981\u62bd\u8c61\u5316\u4e00\u4e0b\u9898\u610f\uff1a\u7ed9\u4f60$n$\u4e2a\u6570\uff0c\u7b2c$i$\u6b21\u64cd\u4f5c\u5728$[i,n]$\u4e2d\u627e\u5230\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e$p_i$\uff0c\u5e76**\u7ffb\u8f6c**$[i,p_i]$\u3002\u6700\u540e\u8f93\u51fa\u6240\u6709$p_i$\u7684\u503c\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u8f6c\u5316\u95ee\u9898\uff08\u56e0\u4e3a\u8c8c\u4f3cFHQ_Treap\u4e0d\u80fd\u540c\u65f6\u652f\u6301**\u57fa\u4e8e\u6743\u503c**\u7684```split```\u548c**\u57fa\u4e8e\u6392\u540d**\u7684\u5206\u88c2\uff09\u3002\n\n\u6240\u4ee5\u79bb\u6563\u5316\u662f\u5fc5\u987b\u7684\uff0c\u5c24\u5176\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u76f4\u63a5\u5bf9\u6570\u7ec4\u6392\u5e8f\uff08\u56e0\u4e3a\u4f1a\u6709**\u6743\u503c\u76f8\u7b49**\u7684\u70b9\uff09\u3002\n\n\u7136\u540e\u6211\u4eec\u8bb0\u4e00\u4e0b\u6bcf\u4e2a\u503c\u539f\u6765\u7684\u4f4d\u7f6e\uff0c\u518d\u8003\u8651\u5bf9\u4e00\u4e2a**\u57fa\u672c\u5e8f\u5217**\uff08\u5373\u521d\u59cb\u65f6\u4e3a$1,2,3,\\dots,n$\uff09\u8fdb\u884c\u7ffb\u8f6c\u3002\n\n\u624b\u52a8\u63a8\u5bfc\u4e00\u4e0b\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u5148\u627e\u51fa\u6bcf\u6b21\u64cd\u4f5c\u4f4d\u7f6e\u7684**\u6392\u540d**\uff0c\u7136\u540e\u518d\u57fa\u672c\u5e8f\u5217\u4e0a\u4e0d\u505c\u7ffb\u8f6c\u533a\u95f4\u5373\u53ef\u3002\n\n\u7531\u4e8eFHQ_Treap\u6811\u9ad8\u671f\u671b$\\log$\u7684\u7279\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u67e5\u8be2\u6392\u540d\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u4ece\u4e00\u4e2a\u70b9\u8df3\u5230\u6839\u7136\u540e\u53cd\u7740\u7b97\u56de\u6765\u3002\n\n\u6700\u540e\u63d0\u4e00\u4e0b\u90a3\u79cd\u4ee5\u6743\u503c\u4e3a\u4fdd\u8bc1\u5806\u6027\u8d28\u7684\u503c\u7684\u505a\u6cd5\u662f**\u9519\u8bef**\u7684\uff01\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6811\u9ad8\u4e0d\u5e73\u8861\uff0c\u4e00\u65e6\u9047\u5230\u5355\u8c03\u7684\u6570\u636e\u5c31\u5361\u5230$O(n^2)$\u4e86\u3002\n\nCODE\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<algorithm>\n#define RI register int\n#define CI const int&\n#define Tp template <typename T>\nusing namespace std;\nconst int N=100005;\nstruct data\n{\n    int val,id;\n    inline friend bool operator <(const data& A,const data& B)\n    {\n        return A.val<B.val||(A.val==B.val&&A.id<B.id);\n    }\n}a[N]; int n,rk;\nclass FileInputOutput\n{\n    private:\n        static const int S=1<<21;\n        #define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,S,stdin),A==B)?EOF:*A++)\n        #define pc(ch) (Ftop<S?Fout[Ftop++]=ch:(fwrite(Fout,1,S,stdout),Fout[(Ftop=0)++]=ch))\n        char Fin[S],Fout[S],*A,*B; int Ftop,pt[15];\n    public:\n        Tp inline void read(T& x)\n        {\n            x=0; char ch; while (!isdigit(ch=tc()));\n            while (x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));\n        }\n        Tp inline void write(T x)\n        {\n            if (!x) return (void)(pc('0'),pc(' ')); RI ptop=0;\n            while (x) pt[++ptop]=x%10,x/=10; while (ptop) pc(pt[ptop--]+48); pc(' ');\n        }\n        inline void Fend(void)\n        {\n            fwrite(Fout,1,Ftop,stdout);\n        }\n        #undef tc\n        #undef pc\n}F;\nclass FHQ_Treap\n{\n    private:\n        struct treap\n        {\n            int ch[2],size,dat,fa; bool rev;\n            inline treap(CI Dat=0,CI Size=0)\n            {\n                ch[0]=ch[1]=rev=fa=0; dat=Dat; size=Size;\n            }\n        }node[N]; int tot,rt,seed,stack[N],top;\n        #define lc(x) node[x].ch[0]\n        #define rc(x) node[x].ch[1]\n        #define fa(x) node[x].fa\n        inline int rand(void)\n        {\n            return seed=(int)seed*482711LL%2147483647;\n        }\n        inline void swap(int& x,int& y)\n        {\n            int t=x; x=y; y=t;\n        }\n        inline void rever(CI x)\n        {\n            swap(lc(x),rc(x)); node[x].rev^=1;\n        }\n        inline void pushup(CI x)\n        {\n            node[x].size=node[lc(x)].size+node[rc(x)].size+1; fa(lc(x))=fa(rc(x))=x;\n        }\n        inline void pushdown(CI x)\n        {\n            if (node[x].rev) rever(lc(x)),rever(rc(x)),node[x].rev=0;\n        }\n        inline void merge(int& now,int x,int y)\n        {\n            if (!x||!y) return (void)(now=x|y); if (node[x].dat>node[y].dat)\n            pushdown(x),now=x,merge(rc(now),rc(x),y),pushup(x); else\n            pushdown(y),now=y,merge(lc(now),x,lc(y)),pushup(y);\n        }\n        inline void split(int now,int& x,int& y,int rk)\n        {\n            if (!now) return (void)(x=y=0); pushdown(now); if (node[lc(now)].size<rk)\n            x=now,split(rc(now),rc(x),y,rk-node[lc(now)].size-1); else\n            y=now,split(lc(now),x,lc(y),rk); pushup(now);\n        }\n    public:\n        FHQ_Treap() { seed=233; }\n        inline void insert(CI val)\n        {\n            node[++tot]=treap(rand(),1); merge(rt,rt,tot);\n        }\n        inline void reverse(RI l,RI r)\n        {\n            int x,y,z; split(rt,x,y,l-1); split(y,y,z,r-l+1);\n            rever(y); merge(y,y,z); merge(rt,x,y);\n        }\n        inline int get_rk(int now)\n        {\n            stack[top=1]=now; for (int t=now;fa(t);t=fa(t))\tstack[++top]=fa(t);\n            while (top) pushdown(stack[top--]); int ret=node[lc(now)].size;\n            for (;now;now=fa(now)) if (now==rc(fa(now))) ret+=node[lc(fa(now))].size+1;\n            return ret+1;\n        }\n        #undef lc\n        #undef rc\n}T;\nint main()\n{\n    //freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n    RI i; for (F.read(n),i=1;i<=n;++i) F.read(a[i].val),a[i].id=i;\n    for (sort(a+1,a+n+1),i=1;i<=n;++i) T.insert(i); for (i=1;i<=n;++i)\n    rk=T.get_rk(a[i].id),F.write(rk),T.reverse(i,rk); return F.Fend(),0;\n}\n```\n\n",
        "postTime": 1547455360,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4402 \u3010[Cerc2007]robotic sort \u673a\u68b0\u6392\u5e8f\u3011"
    },
    {
        "content": "\u9898\u76ee\u8981\u6c42\u6211\u4eec\u5bf9\u4e00\u4e2a\u5e8f\u5217\u8fdb\u884c\u4e00\u7cfb\u5217\u53cd\u8f6c\u64cd\u4f5c\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u5e8f\u5217\u6700\u7ec8\u6709\u5e8f\u3002\n\n\u5bf9\u4e8e\u7b2c $i$ \u6b21\u65cb\u8f6c\uff0c\u6211\u4eec\u90fd\u9700\u8981\u627e\u5230\u7b2c $i$ \u5c0f\u7684\u6570\uff0c\u8bb0\u5176\u4f4d\u7f6e\u4e3a $p_i$\uff0c\u7136\u540e\u53cd\u8f6c $[i,p_i]$ \u8fd9\u6bb5\u533a\u95f4\u3002\n\n\u8bf4\u5230\u533a\u95f4\u53cd\u8f6c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u5230\u4f7f\u7528 Splay\u3002  \n\u8fd9\u6837\u5c31\u53ef\u4ee5\u501f\u9274[\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.com.cn/problem/P3391)\u7684\u601d\u8def\u4e86\u3002\n\n\u6211\u4eec\u6bcf\u4e00\u6b21\u67e5\u8be2\u4e00\u4e2a\u6743\u503c\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u3002\u627e\u5230\u6211\u4eec\u9700\u8981\u53cd\u8f6c\u7684\u533a\u95f4\u4e4b\u540e\uff0c\u5c06\u5176\u5de6\u7aef\u70b9\u7684\u524d\u9a71\u65cb\u81f3\u6839\uff0c\u7136\u540e\u5c06\u5176\u53f3\u7aef\u70b9\u7684\u540e\u7ee7\u65cb\u81f3\u5de6\u7aef\u70b9\u524d\u9a71\u7684\u4e0b\u9762\uff0c\u8fd9\u6837\u5c31\u62ce\u51fa\u6765\u4e86\u6574\u4e2a\u533a\u95f4\u4e86\u3002  \n\u7136\u540e\u76f4\u63a5\u6253\u53cd\u8f6c\u6807\u8bb0\u5373\u53ef\u3002\n\n\u4f46\u662f\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u3002\u5c31\u662f\u9898\u76ee\u7ed9\u51fa\u7684\u5e8f\u5217\u662f\u65e0\u5e8f\u7684\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u81ea\u5df1\u6392\u5e8f\u3002  \n\u540c\u65f6\u9898\u76ee\u8fd8\u8981\u6c42\u6211\u4eec\u505a\u5230\u7a33\u5b9a\u7684\u6392\u5e8f\u3002\u4e5f\u5c31\u662f\u4e24\u4e2a\u7269\u54c1\u5982\u679c\u9ad8\u5ea6\u76f8\u7b49\uff0c\u6392\u5e8f\u540e\u5b83\u4eec\u7684\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb\u9700\u8981\u4e0e\u521d\u59cb\u65f6\u76f8\u540c\u3002  \n\u90a3\u4e48\u6211\u4eec\u62ff\u4e00\u4e2a\u7ed3\u6784\u4f53\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u7269\u54c1\u7684\u9ad8\u5ea6\u548c\u4e00\u5f00\u59cb\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u6309\u7167\u6743\u503c\u6392\u5e8f\u3002\n\n\u7136\u540e\u6211\u4eec\u518d\u5efa\u7acb\u4e00\u9897 Splay\uff0c\u50cf\u4e0a\u9762\u8bf4\u7684\u90a3\u6837\u7ef4\u62a4\u3001\u53cd\u8f6c\u533a\u95f4\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u540c\u65f6\u9898\u76ee\u8981\u6c42\u8f93\u51fa\u7b2c $i$ \u4f4e\u7684\u7269\u54c1\u5728\u64cd\u4f5c\u4e4b\u524d\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u5c31\u5148\u5c06\u5176\u4ee3\u8868\u7684\u8282\u70b9\u65cb\u5230\u6839\uff0c\u5176\u5f53\u524d\u5728\u5e8f\u5217\u5185\u7684\u4f4d\u7f6e\u5c31\u662f\u5176\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u52a0\u4e0a 1\u3002  \n\u8fd9\u91cc\u6211\u5411\u5e8f\u5217\u4e2d\u52a0\u5165\u4e86\u4e24\u4e2a\u54e8\u5175\u8282\u70b9\uff0c\u8fd9\u6837\u4f1a\u4f7f\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u589e\u52a0 1\uff0c\u76f4\u63a5\u8f93\u51fa\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int N = 100010;\nconst int INF = 1e8;\nint n, m;\nstruct Node\n{\n\tint s[2], fa;\n\tint v, sz;\n\tint flag;\n};\nNode tr[N];\nint rt;\nvoid maintain(int p)\n{\n\ttr[p].sz = tr[tr[p].s[0]].sz + tr[tr[p].s[1]].sz + 1;\n}\nvoid pushdown(int p)\n{\n\tif(tr[p].flag)\n\t{\n\t\tif(tr[p].s[0])tr[tr[p].s[0]].flag ^= 1;\n\t\tif(tr[p].s[1])tr[tr[p].s[1]].flag ^= 1;\n\t\tswap(tr[p].s[0], tr[p].s[1]);\n\t\ttr[p].flag = 0;\n\t}\n}\nvoid rotate(int x)\n{\n\tint y = tr[x].fa, z = tr[y].fa;\n\tint k = (tr[y].s[1] == x) ? 1 : 0;\n\ttr[z].s[tr[z].s[1] == y] = x, tr[x].fa = z;\n\ttr[y].s[k] = tr[x].s[k ^ 1], tr[tr[x].s[k ^ 1]].fa = y;\n\ttr[x].s[k ^ 1] = y, tr[y].fa = x;\n\tmaintain(y); maintain(x);\n}\nvoid splay(int x, int k)\n{\n\twhile(tr[x].fa != k)\n\t{\n\t\tint y = tr[x].fa, z = tr[y].fa;\n\t\tpushdown(z), pushdown(y), pushdown(x);\n\t\tif(z != k)\n\t\t{\n\t\t\tif((tr[y].s[1] == x) ^ (tr[z].s[1] == y)) rotate(x);\n\t\t\telse rotate(y);\n\t\t}\n\t\trotate(x);\n\t}\n\tif(!k)rt = x;\n}\nvoid build(int &p, int l, int r)\n{\n\tif(l > r)return;\n\tint mid = (l + r) >> 1;\n\tp = mid;\n\tif(l == r)\n\t{\n\t\ttr[p].sz = 1;\n\t\treturn;\n\t}\n\tif(l < mid)\n\t{\n\t\tbuild(tr[p].s[0], l, mid - 1);\n\t\ttr[tr[p].s[0]].fa = p;\n\t}\n\tif(r > mid)\n\t{\n\t\tbuild(tr[p].s[1], mid + 1, r);\n\t\ttr[tr[p].s[1]].fa = p;\n\t}\n\tmaintain(p);\n}\nint get_k(int k)\n{\n\tint p = rt;\n\twhile(true)\n\t{\n\t\tpushdown(p);\n\t\tif(tr[tr[p].s[0]].sz >= k && tr[p].s[0])p = tr[p].s[0];\n\t\telse\n\t\t{\n\t\t\tk -= tr[tr[p].s[0]].sz + 1;\n\t\t\tif(k == 0)return p;\n\t\t\telse p = tr[p].s[1];\n\t\t}\n\t}\n}\nstruct TBS\n{\n\tint x, pos;\n\tbool operator < (const TBS &a)const\n\t{\n\t\treturn (x == a.x) ? pos < a.pos : x < a.x;\n\t}\n}p[N];\nint main()\n{\n\tscanf(\"%d\", &n);\n\tp[1] = { -INF,1 }, p[n + 2] = { INF,n + 2 };\n\tfor(int i = 2; i <= n + 1; i++)\n\t{\n\t\tscanf(\"%d\", &p[i].x);\n\t\tp[i].pos = i;\n\t}\n\tsort(p + 2, p + 2 + n);\n\tbuild(rt, 1, n + 2);\n\tfor(int i = 2; i <= n; i++)\n\t{\n\t\tsplay(p[i].pos, 0);\n\t\tint ans = tr[tr[rt].s[0]].sz;\n\t\tprintf(\"%d \", ans);\n\t\tint L = get_k(i - 1);\n\t\tint R = get_k(ans + 2);\n\t\tsplay(L, 0); splay(R, L);\n\t\ttr[tr[R].s[0]].flag ^= 1;\n\t}\n\tprintf(\"%d\\n\", n);\n\treturn 0;\n}\n```\n\n[\u56db](https://www.luogu.com.cn/problem/P4402) [\u500d](https://www.luogu.com.cn/problem/P3165) [\u7ecf](https://www.luogu.com.cn/problem/SP2059) [\u9a8c](https://www.luogu.com.cn/problem/UVA1402)\n",
        "postTime": 1657849332,
        "uid": 196903,
        "name": "\u5357\u9633\u5218\u5b50\u9aa5",
        "ccfLevel": 6,
        "title": "P4402 [Cerc2007] robotic sort \u673a\u68b0\u6392\u5e8f \u9898\u89e3"
    },
    {
        "content": "### \u4e0d\u77e5\u9053\u4e3a\u5565\u96be\u5ea6\u662f\u9ed1\u7684\u3002\u3002\u3002\n\n\u4e00\u76f4\u5bf9Splay\u7ef4\u62a4\u533a\u95f4\u64cd\u4f5c\u4e0d\u662f\u5f88\u719f\u7ec3\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u8ba9\u6211\u5b66\u5230\u4e86\u5f88\u591a\u4e1c\u897f\u6240\u4ee5\u5199\u7bc7\u9898\u89e3\u6765\u5de9\u56fa\u4e00\u4e0b\u3002\n\n\u9996\u5148\u6a21\u677f\u9898\u662f\u6bd4\u8f83\u597d\u5199\u7684\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u6743\u503c\u4e0d\u9700\u8981\u8f6c\u5316\uff0c\u76f4\u63a5\u8fdb\u884c\u533a\u95f4\u7ffb\u8f6c\u5373\u53ef\uff0c\u4e0d\u8fc7\u8981\u6ce8\u610f\u533a\u95f4\u53cd\u8f6c\u4e4b\u540e\u5143\u7d20\u7684\u5927\u5c0f\u5173\u7cfb\u5c31\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u5373\u5173\u952e\u5b57\u5927\u7684\u5c31\u4e0d\u4e00\u5b9a\u5728\u5f53\u524d\u7684\u5e73\u8861\u6811\u4e2d\u5927\uff0c\u56e0\u4e3a\u5e73\u8861\u6811\u7684\u5927\u5c0f\u5173\u7cfb\u5b9e\u9645\u4e0a\u6620\u5c04\u4e86\u6574\u4e2a\u5e8f\u5217\u3002\n\n\u90a3\u4e48\u8003\u8651\u8fd9\u9053\u9898\uff0c\u9996\u5148\u8981\u77e5\u9053\u9700\u8981\u5e72\u4ec0\u4e48\uff0c\u533a\u95f4\u7ffb\u8f6c\u64cd\u4f5c\u5f88\u597d\u5b9e\u73b0\uff0c\u6253\u4e2a\u6807\u8bb0\u5c31\u5b8c\u4e86\uff0c\u4f46\u662f\u627e\u5230\u7ffb\u8f6c\u7684\u533a\u95f4\u5c31\u4e0d\u90a3\u4e48\u5bb9\u6613\u4e86\uff0c\u53ef\u4ee5\u53d1\u73b0\u7b2c$i$\u5c0f\u503c\u662f\u5f53\u524d\u5e8f\u5217\u4e2d\u4ece$i-n$\u7684\u6700\u5c0f\u503c\uff0c\u56e0\u4e3a\u6bd4\u5b83\u5c0f\u7684\u90fd\u53bb\u4e86\u524d\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u5c31\u884c\u4e86\uff0c\u4f46\u662f\u5982\u679c\u6309\u7167\u9898\u76ee\u4e2d\u7ed9\u7684\u6743\u503c\uff0c\u6700\u5c0f\u503c\u53ef\u80fd\u4e0d\u552f\u4e00\uff0c\u4e8e\u662f\u5148\u5904\u7406\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a\u51fa\u73b0\u76f8\u7b49\u7684\u60c5\u51b5\uff0c\u800c\u9898\u76ee\u4e2d\u8981\u6c42\u76f8\u7b49\u7684\u6309\u7167\u4e0b\u6807\u6392\u5e8f\uff0c\u6309\u7167\u5b83\u7684\u8981\u6c42\u505a\u5c31\u884c\u4e86\u3002\n\n\u4e0b\u9762\u5982\u4f55\u8fdb\u884c\u64cd\u4f5c\u5462\uff1f\n\n\u9996\u5148\u8981\u628a\u6211\u5f53\u524d\u5904\u7406\u7684$i-n$\u533a\u95f4\u8f6c\u5230\u53f3\u5b50\u6811\uff0c\u7136\u540e\u627e\u5230\u5176\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u8fd9\u65f6\u6700\u5c0f\u503c\u4e00\u5b9a\u662f\u6211\u8981\u7ffb\u8f6c\u7684\u90a3\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff0c\u6240\u4ee5\u76f4\u63a5\u5bf9\u8fd9\u4e2a\u533a\u95f4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cSplay\u4e2d\u7b2c$k$\u5927\u7684\u5143\u7d20\u5c31\u662f\u5e8f\u5217\u4e2d\u7684\u7b2c$k$\u4e2a\u503c\uff0c\u6700\u5f00\u59cb\u8fd9\u91cc\u6ca1\u60f3\u660e\u767d\u7136\u540e\u5c31\u6302\u4e86\u3002\n\nSplay\u7ef4\u62a4\u5e8f\u5217\u7684\u672c\u8d28\u5c31\u662f\u7528k$\u5927\u7684\u5143\u7d20\u8868\u793a\u5e8f\u5217\u4e2d\u7684\u7b2c$k$\u4e2a\u503c\u3002\n\n```\n/*\n6\n3 4 5 1 6 2\n4\n3 3 2 1\n0\n*/\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=1e6+10;\nstruct Node{\n\tint id,x;\n\tNode(){}\n\tNode(int a,int b){id=a;x=b;}\n\tbool operator < (const Node&A)const{\n\t\tif(x==A.x)return id<A.id;\n\t\treturn x<A.x;\n\t}\n}a[N];\nstruct Splay_Tree{\n\tNode v[N];\n\tint fa[N],siz[N],Min[N],tag[N],ch[N][2],cnt,rt;\n\tvoid clear(){\n\t\tmemset(fa,0,sizeof(fa));\n\t\tmemset(siz,0,sizeof(siz));\n\t\tmemset(Min,0,sizeof(Min));\n\t\tmemset(tag,0,sizeof(tag));\n\t\tmemset(ch,0,sizeof(ch));\n\t\tcnt=rt=0;\n\t}\n\tvoid up(int x){\n\t\tsiz[x]=siz[ch[x][0]]+siz[ch[x][1]]+1;\n\t\tMin[x]=min(v[x].x,min(Min[ch[x][0]],Min[ch[x][1]]));\n\t}\n\tvoid down(int x){\n\t\tif(tag[x]){\n\t\t\ttag[ch[x][0]]^=1;\n\t\t\ttag[ch[x][1]]^=1;\n\t\t\tswap(ch[x][0],ch[x][1]);\n\t\t\ttag[x]=0;\n\t\t}\n\t}\n\tvoid rotate(int x){\n\t\tint y=fa[x];int z=fa[y];\n\t\tint k=ch[y][1]==x;\n\t\tch[z][ch[z][1]==y]=x;\n\t\tfa[x]=z;\n\t\tch[y][k]=ch[x][k^1];\n\t\tfa[ch[x][k^1]]=y;\n\t\tch[x][k^1]=y;\n\t\tfa[y]=x;\n\t\tup(y);up(x);\n\t}\n\tvoid splay(int x,int to){\n\t\twhile(fa[x]!=to){\n\t\t\tint y=fa[x];int z=fa[y];\n\t\t\tif(z!=to)\n\t\t\t\t(ch[y][1]==x)==(ch[z][1]==y)?rotate(y):rotate(x);\n\t\t\trotate(x);\n\t\t}\n\t\tif(!to)rt=x;\n\t}\n\tvoid insert(Node a){\n\t\tint u=rt,ff=0;\n\t\twhile(u)ff=u,u=ch[u][a.id>v[u].id];\n\t\tu=++cnt;\n\t\tfa[u]=ff;v[u]=a;siz[u]=1;Min[u]=v[u].x;\n\t\tif(ff)ch[ff][v[u].id>v[ff].id]=u;\n\t\tsplay(u,0);\n\t}\n\tint kth(int x){\n\t\tint u=rt;\n\t\twhile(1){\n\t\t\tdown(u);\n\t\t\tint y=ch[u][0];\n\t\t\tif(siz[y]+1<x)x-=siz[y]+1,u=ch[u][1];\n\t\t\telse if(x<=siz[y])u=y;\n\t\t\telse return u;\n\t\t}\n\t}\n\tint get(int u){\n\t\twhile(1){\n\t\t\tdown(u);\n\t\t\tif(Min[u]==v[u].x)return u;\n\t\t\tif(Min[u]==Min[ch[u][0]])u=ch[u][0];\n\t\t\telse u=ch[u][1];\n\t\t}\n\t}\n\tvoid solve(int x,int n){\n\t\tint l=kth(x),r=kth(n+2);\n\t\tsplay(l,0);\n\t\tsplay(r,l);\n\t\tint now=get(ch[r][0]);\n\t\tsplay(now,0);\n\t\tprintf(\"%d\",siz[ch[rt][0]]);\n\t\tl=kth(x);r=kth(siz[ch[rt][0]]+2);\n\t\tsplay(l,0);\n\t\tsplay(r,l);\n\t\ttag[ch[r][0]]^=1;\n\t}\n}s;\nint main(){\n\tint n;\n\twhile(~scanf(\"%d\",&n)){\n\t\tif(n==0)return 0;\n\t\ts.clear();\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tscanf(\"%d\",&a[i].x);\n\t\t\ta[i].id=i;\n\t\t}\n\t\tsort(a+1,a+n+1);\n\t\ts.insert(Node(1,0x7f7f7f7f));\n\t\ts.insert(Node(n+2,0x7f7f7f7f));\n\t\ts.v[0].x=s.Min[0]=0x7f7f7f7f;\n\t\t\tfor(int i=1;i<=n;i++)\n\t\t\ts.insert(Node(a[i].id+1,i));\n\t\tfor(int i=1;i<=n;i++){\n\t\t\ts.solve(i,n);\n\t\t\tif(i==n)printf(\"\\n\");\n\t\t\telse printf(\" \");\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1604202120,
        "uid": 305262,
        "name": "Su_Zipei",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4402 \u3010[Cerc2007]robotic sort \u673a\u68b0\u6392\u5e8f\u3011"
    }
]