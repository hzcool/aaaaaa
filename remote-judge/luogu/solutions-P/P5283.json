[
    {
        "content": "\u795e\u4ed9\u4eec\u90fd\u5199\u7684\u53ef\u6301\u4e45\u5316$Trie$\u7136\u800c\u6211\u5e76\u4e0d\u4f1a\u5199\n\n\u7ed9\u4e00\u4e2a\u7b80\u5355\u7684\u505a\u6cd5\u597d\u4e86QAQ\n\n\u9996\u5148\u505a\u524d\u7f00\u5f02\u6216\u548c\uff0c\u7136\u540e\u53d8\u6210\u6c42\u6700\u5927\u7684$k$\u5bf9\u5f02\u6216\u548c\u7684\u548c\n\n\u6ce8\u610f\u5230\u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e\u4e09\u89d2$(a_i\\ xor\\ a_j,0\\leq i\\leq j\\leq n)$\u7684\u6c42\u503c\uff0c\u5e76\u4e14\u6709$a_i\\ xor\\ a_j=a_j\\ xor\\ a_i$\u6240\u4ee5\u6211\u4eec\u5148\u628a\u7b54\u6848\u4e58\u4e8c\u7136\u540e\u518d\u9664\u56de\u53bb\uff0c\u8fd9\u6837\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u6700\u5927\u7684$2k$\u4e2a\u6709\u5e8f\u5bf9\uff0c\u8fd9\u4e2a\u5c31\u5f88\u597d\u5904\u7406\u4e86.\u5bf9\u89d2\u7ebf\u4e0a\u7684\u5143\u7d20\u5e76\u4e0d\u5f71\u54cd\uff0c\u56e0\u4e3a$a_i\\ xor\\ a_i=0$\u662f\u6700\u5c0f\u7684.\n\n\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u4e2a$i$\u6c42\u51fa\u7b2c$t$(\u521d\u59cb\u4e3a$1$)\u5927\u7684$a_i\\ xor\\ a_j$\uff0c\u7136\u540e\u628a\u7ed3\u679c\u6254\u5230\u5806\u91cc\uff0c\u6bcf\u6b21\u53d6\u5806\u9876\uff0c\u7136\u540e\u628a\u5806\u9876\u5bf9\u5e94\u7684$i$\u7684\u7b2c$t+1$\u5927\u7684$a_i\\ xor\\ a_j$\u6254\u8fdb\u5806\u91cc.\u5177\u4f53\u770b\u4ee3\u7801\u597d\u4e86QAQ.\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int N=20000000+10;\nstruct Node{int id,rk;long long w;bool operator <(const Node &a)const{return w<a.w;}};\npriority_queue<Node>q;\nlong long ans=1,x,s[N];\nint a[N][2],size[N],n,m,tot;\nvoid ins(long long x)\n{\n    int u=0;\n    for(int i=31;i>=0;i--)\n    {\n        int ch=(x>>i)&1;size[u]++;//\u63d2\u5165\u7684\u65f6\u5019\u7ef4\u62a4\u5b50\u6811\u5927\u5c0f\u4fbf\u4e8e\u5904\u7406\n        if(!a[u][ch])a[u][ch]=++tot;\n        u=a[u][ch];\n    }\n    size[u]++;\n}\nlong long query(long long x,int rk)\n{\n    int u=0;long long ans=0;\n    for(int i=31;i>=0;i--)\n    {\n        int ch=(x>>i)&1;//cout<<u<<\" \"<<ch<<\" \"<<size[a[u][1]]<<\"  \";\n        if(!a[u][ch^1])u=a[u][ch];//\u5982\u679c\u6ca1\u6709\u548c\u8fd9\u4e00\u4f4d\u76f8\u5f02\u7684\u5c31\u76f4\u63a5\u8d70\n        else if(rk<=size[a[u][ch^1]])u=a[u][ch^1],ans|=1LL<<i;//\u770b\u4e00\u4e0b\u76f8\u5f02\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u51b3\u5b9a\u8d70\u54ea\u8fb9.\u548c\u5e73\u8861\u6811\u7684\u64cd\u4f5c\u5dee\u4e0d\u591a\n        else rk-=size[a[u][ch^1]],u=a[u][ch];\n    }\n    return ans;\n}\nlong long getin()//\u4e0d\u5f00long long\u89c1\u7956\u5b97 \u6211\u5c31\u89c1\u7956\u5b97\u4e86QAQ\n{\n    long long x=0;char ch=getchar();\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-48,ch=getchar();\n    return x;\n}\nint main()\n{\n    n=getin(),m=getin();m<<=1;//\u524d2k\u4e2a\n    for(int i=1;i<=n;i++)x=getin(),s[i]=s[i-1]^x;\n    for(int i=0;i<=n;i++)ins(s[i]);//\u6ce8\u610f\u67090\n    for(int i=0;i<=n;i++)q.push((Node){i,1,query(s[i],1)});//\u5806\u4e2d\u8282\u70b9\u5b58\u7b2crk\u5927\u7684s[id]^s[j]\n    for(int i=1;i<=m;i++)\n    {\n        Node t=q.top();ans+=t.w;q.pop();//cout<<t.id<<\" \"<<t.rk<<\" \"<<t.w<<endl;\n        if(t.rk<n)q.push((Node){t.id,t.rk+1,query(s[t.id],t.rk+1)});\n    }\n    cout<<(ans>>1)<<endl;//\u6700\u540e\u628a\u7b54\u6848\u9664\u4ee5\u4e8c\n}\n```\n\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u4ee3\u7801\u53ea\u6709\u51e0\u5341\u884c\uff0c\u4f46\u662f\u8dd1\u5f97\u5f88\u5feb.\n\n\u6700\u540e\u4e00\u5b9a\u4e00\u5b9a\u8981\u5f00$long\\ long$\u554a$QAQ$.",
        "postTime": 1554727118,
        "uid": 22136,
        "name": "qwaszx",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u7ec4 $a_i$ \uff0c\u4f60\u6bcf\u6b21\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u533a\u95f4 $[l,r]$ \uff0c\u5176\u4ef7\u503c\u4e3a $val[l,r]=\\bigoplus_{i=l}^r a_i$ \u3002\u6c42\u4ef7\u503c\u6700\u5927\u7684 $k$ \u4e2a\u4e0d\u540c\u533a\u95f4\u7684\u4ef7\u503c\u548c\u3002\n\n$1\\le n\\le 5\\times 10^5,1\\le k\\le min\\{\\frac {n(n-1)} 2 ,2\\times 10^5 \\},0\\le a_i\\le 2^{32}-1$\n\n## \u89e3\u9898\u601d\u8def\n\n\u6b64\u9898\u662f\u6c42\u89e3\u5f02\u6216\u95ee\u9898\u7684\u5e38\u7528 trick \u7efc\u5408\u3002\n\n\u89c2\u5bdf\u5230\u4ef7\u503c\u662f $\\bigoplus_{i=l}^r a_i$ \uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49 $s_i=\\bigoplus_{j=1}^i a_j$ \uff0c\u90a3\u4e48 $val[l,r]=s_{l-1}\\oplus s_r$ \u3002\u7279\u522b\u7684\uff0c\u6709 $s_0=0$ \u3002\u8fd9\u6837\uff0c\u6211\u4eec\u4e0d\u540c\u7684 $i,j$ \u6ee1\u8db3 $0\\le i< j\\le n$ \uff0c\u5bf9\u5e94\u7684\u5c31\u662f\u4e0d\u540c\u7684\u533a\u95f4\u3002\n\n\u9898\u76ee\u8f6c\u5316\u4e3a\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n+1$ \u7684\u6570\u7ec4 $s_i$ \uff0c\u6c42 $i<j$ \u65f6\uff0c $s_i\\oplus s_j$ \u7684 $\\frac {n(n+1)} 2$ \u79cd\u53d6\u503c\u4e2d\u524d $k$ \u5927\u7684\u503c\u7684\u548c\u3002\n\n$i<j$ \u8fd9\u4e2a\u6761\u4ef6\u5f88\u4e0d\u7f8e\u89c2\uff0c\u662f\u4e00\u4e2a\u4e0a\u4e09\u89d2\u5f62\u7684\u5f62\u72b6\uff0c\u6211\u4eec\u4ea4\u6362 $i,j$ \uff0c\u6240\u6c42\u503c\u4e5f\u53ef\u4ee5\u8868\u793a\u4e3a $i\\ne j$ \u65f6\uff0c $s_i\\oplus s_j$ \u7684 $n(n+1)$ \u79cd\u53d6\u503c\u4e2d\u524d $2k$ \u5927\u7684\u503c\u7684\u548c\u9664\u4ee5 $2$ \u3002\u7531\u4e8e $i=j$ \u65f6 $s_i\\oplus s_j$ \u7684\u503c\u4e3a $0$ \uff0c\u800c $k\\le \\frac {n(n-1)} 2$ \uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u53ef\u4ee5\u5ffd\u7565 $i\\ne j$ \u8fd9\u4e2a\u6761\u4ef6\u3002\n\n\u6211\u4eec\u5c06 $s_i$ \u7684 $n+1$ \u4e2a\u503c\u63d2\u5165 01 Trie \uff0c\u7ed9\u5b9a\u4e00\u4e2a $k$ \uff0c\u6211\u4eec\u53ef\u4ee5\u5728 $O(log_2 a)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u627e\u5230\u4e0e $a$ \u5f02\u6216\u7ed3\u679c\u7b2c $k$ \u5927\u7684\u503c\u3002\u65b9\u6cd5\u7c7b\u4f3c\u4e8e\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u3002\n\n\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u5806\u4e2d\u521d\u59cb\u65f6\u52a0\u5165\u6bcf\u4e2a $s_i$ \u4e0e $s$ \u4e2d\u5143\u7d20\u5f02\u6216\u7684\u6700\u5927\u503c\u3002\u6bcf\u6b21\u6211\u4eec\u53d6\u51fa\u5806\u9876\uff0c\u7d2f\u52a0\u8fdb\u7b54\u6848\uff0c\u5982\u679c\u6211\u4eec\u53d6\u51fa\u7684\u662f $s_i$ \u4e0e $s$ \u4e2d\u5143\u7d20\u5f02\u6216\u7684\u7b2c $t$ \u5927\u503c\uff0c\u5c31\u5728\u5806\u4e2d\u63d2\u5165 $s_i$ \u4e0e $s$ \u4e2d\u5143\u7d20\u5f02\u6216\u7684\u7b2c $t+1$ \u5927\u503c\u3002\u8fd9\u6837\u8fdb\u884c $k$ \u6b21\u64cd\u4f5c\uff0c\u53d6\u51fa\u7684\u4f9d\u6b21\u5c31\u662f $s$ \u4e2d\u5143\u7d20\u4e24\u4e24\u5f02\u6216\u7684\u524d $k$ \u5927\u503c\u3002\n\n\u4ee4 $a=\\max \\{a_i\\}$\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((n+k)\\log_2 a\\log_2 n)$ \u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int maxn=500010;\ntypedef long long ll;\nint n,k,cnt=1;\nll a[maxn],ans;\nstruct Trie\n{\n    int ch[2],cnt;\n}st[maxn*34];\nvoid insert(ll v)\n{\n    int nww=1;st[nww].cnt++;\n    for(ll i=33;i>=0;i--)\n    {\n        ll t=(v>>i)&1ll;\n        if(!st[nww].ch[t])st[nww].ch[t]=++cnt;\n        nww=st[nww].ch[t];st[nww].cnt++;\n    }\n}\nll query(ll v,int k)\n{\n    int nww=1;\n    ll ans=0;\n    for(ll i=33;i>=0;i--)\n    {\n        ll t=(v>>i)&1ll;\n        if(st[st[nww].ch[t]].cnt>=k)nww=st[nww].ch[t];\n        else k-=st[st[nww].ch[t]].cnt,nww=st[nww].ch[t^1],ans|=(1ll<<i);\n    }\n    return ans;\n}\nstruct node\n{\n    int id,rnk;ll v;\n    bool operator<(node x)const{return v<x.v;}\n};\npriority_queue<node>q;\nint main()\n{\n    scanf(\"%d%d\",&n,&k);k*=2;\n    insert(0);for(int i=1;i<=n;i++)scanf(\"%lld\",a+i),a[i]^=a[i-1],insert(a[i]);\n    for(int i=0;i<=n;i++)q.push({i,n+1,query(a[i],n+1)});\n    while(k--)\n    {\n        node x=q.top();q.pop();\n        ans+=x.v;\n        if(x.rnk)q.push({x.id,x.rnk-1,query(a[x.id],x.rnk-1)});\n    }\n    printf(\"%lld\\n\",ans/2ll);\n    return 0;\n}\n```\n\n## \u89e3\u6cd5\u6269\u5c55\n\n\u8003\u8651\u7b80\u5316\u540e\u7684\u95ee\u9898\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 $a_i$ \uff0c\u6c42\u5176\u4e2d\u4e24\u4e24\u5f02\u7684\u524d $k$ \u5927\u503c\u7684\u548c\u3002\n\n\u4ee5\u4e0a\u7ed9\u51fa\u7684\u505a\u6cd5\u662f\u4e0e $k$ \u6709\u5173\u7684\uff0c\u6b64\u9898\u4e2d $k$ \u7684\u6570\u636e\u8303\u56f4\u662f\u548c $n$ \u540c\u9636\uff0c\u4f46\u662f $k$ \u7684\u8303\u56f4\u6700\u5927\u53ef\u4ee5\u8fbe\u5230 $O(n^2)$ \uff0c\u6b64\u65f6\u6709\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log_2^2 a)$ \u7684\u505a\u6cd5\u3002\uff08\u4e0e $k$ \u65e0\u5173\uff09\n\n\u5efa\u7acb Trie \uff0c\u5c06\u6bcf\u4e2a $a_i$ \u63d2\u5165 Trie\uff0c Trie \u4e0a\u4e00\u4e2a\u7ed3\u70b9\u5b50\u6811\u7684\u5927\u5c0f\u5b9a\u4e49\u4e3a\u5176\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u4e2a $a_i$ \u3002\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u5982\u4f55\u6c42\u4e24\u4e24\u5f02\u6216\u7684 **\u7b2c $k$ \u5927\u503c** \u3002\u8003\u8651\u4ece\u9ad8\u5230\u4f4e\u6309\u4f4d\u786e\u5b9a\u7b2c $k$ \u5927\u503c\u6bcf\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u7684\u503c\u3002\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86\u6240\u6c42\u7b2c $k$ \u7684\u503c\u7684\u524d\u82e5\u5e72\u4f4d\uff0c\u6b63\u5728\u786e\u5b9a\u5f53\u524d\u4f4d\u7684\u503c\u3002\u5bf9\u4e8e\u6bcf\u4e2a $a_i$ \uff0c\u5728 Trie \u4e0a\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u5b50\u6811\u4f7f\u5f97\u5b50\u6811\u4e2d\u7684\u53f6\u5b50\u7ed3\u70b9\u5bf9\u5e94\u7684\u503c\uff08\u5373\u4ece\u6839\u8282\u70b9\u5230\u8be5\u53f6\u5b50\u7ed3\u70b9\u7684\u8def\u5f84\u5bf9\u5e94\u7684\u503c\uff09\u4e0e $a_i$ \u5f02\u6216\u7684\u524d\u7f00\u7b49\u4e8e\u5df2\u7ecf\u786e\u5b9a\u7684\u7b2c $k$ \u5927\u503c\u7684\u524d\u82e5\u5e72\u4f4d\u3002\u6211\u4eec\u8bbe\u8fd9\u4e2a\u5b50\u6811\u662f $v$ \u7684\u5b50\u6811\u3002\u8bbe\u4e0e $v$ \u540c\u5c42\uff08\u6df1\u5ea6\u76f8\u540c\uff09\u4e14\u5728\u6839\u8282\u70b9\u5230 $a_i$ \u5bf9\u5e94\u53f6\u5b50\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u4e3a $u$ \u3002\n\n\u6211\u4eec\u6bcf\u6b21\u5c06 $u,v$ \u4e0b\u79fb\u4e00\u5c42\uff08\u59cb\u7ec8\u4fdd\u6301 $u$ \u5728\u6839\u8282\u70b9\u5230\u53f6\u5b50\u7ed3\u70b9 $a_i$ \u7684\u8def\u5f84\u4e0a \uff09\uff0c\u540c\u65f6\u786e\u5b9a\u7b2c $k$ \u5927\u503c\u5bf9\u5e94\u4f4d\u7684\u503c\u3002\u5047\u8bbe\u6211\u4eec\u5373\u5c06\u628a $u$ \u5f80\u4e00\u4e2a\u65b9\u5411\u7684\u513f\u5b50\u4e0b\u79fb\uff0c\u6211\u4eec\u7edf\u8ba1\u5bf9\u6bcf\u4e00\u4e2a $a_i$ \u628a $v$ \u5411\u53e6\u4e00\u4e2a\u65b9\u5411\u79fb\u52a8\u7684\u5b50\u6811\u7684\u5927\u5c0f\u4e4b\u548c $tot$ \u3002$tot$ \u5373\u4e3a\u7b2c $k$ \u5927\u503c\u7684\u8fd9\u4e00\u4f4d\u662f $1$ \u65f6\uff0c\u6ee1\u8db3 $a_i\\oplus a_j$ \u7684\u76f8\u540c\u4f4d\u4e5f\u662f $1$ \u4e14\u4e0e\u7b2c $k$ \u5927\u503c\u4e4b\u524d\u5df2\u7ecf\u786e\u5b9a\u7684\u4f4d\u6570\u4e5f\u76f8\u540c\u7684\u6570\u5bf9 $(i,j)$ \u7684\u7ec4\u6570\u3002\u5982\u679c $tot\\ge k$ \uff0c\u8bf4\u660e\u6709\u591a\u4e8e $k$ \u4e2a\u8fd9\u6837\u7684\u5bf9\uff0c\u7b2c $k$ \u5927\u503c\u7684\u8fd9\u4e00\u4f4d\u662f $1$ \uff0c\u53cd\u4e4b\u8fd9\u4e00\u4f4d\u662f $0$ \uff0c\u6b64\u65f6\u8fd8\u8981\u5c06 $k$ \u7684\u503c\u51cf\u53bb $tot$ \uff0c\u5373\u6c42\u7b26\u5408\u524d\u7f00\u76f8\u540c\u6761\u4ef6\u7684\u7b2c $k-tot$ \u5927\u503c\u3002\u6839\u636e\u6c42\u51fa\u7684 $k$ \u5bf9\u5e94\u4f4d\u7684\u503c\uff0c\u66f4\u65b0\u6240\u6709\u7684 $u,v$ \uff0c\u4fbf\u4e8e\u6c42\u89e3\u66f4\u4f4e\u4f4d\u3002\n\n\u6c42\u7b2c $k$ \u5927\u503c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log_2 a)$ \u3002\n\n\u6c42\u51fa\u7b2c $k$ \u5927\u503c\u540e\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u6c42\u524d $k$ \u5927\u503c\u7684\u548c\u3002\u5728\u4ee5\u4e0a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5269\u4e0b\u7684 $k$ \u7684\u503c\u5373\u4e3a\u524d $k$ \u5927\u503c\u4e2d\u4e0e\u7b2c $k$ \u5927\u503c\u76f8\u7b49\u7684\u6570\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u53ea\u9700\u6c42\u51fa\u4e24\u4e24\u5f02\u6216\u503c\u5927\u4e8e\u7b2c $k$ \u5927\u503c\u7684\u5f02\u6216\u503c\u7684\u548c\u5373\u53ef\u3002\n\n\u679a\u4e3e\u6bcf\u4e00\u4e2a $a_i$ \uff0c\u540c\u6837\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u6c42\u89e3\u3002\u82e5\u4e24\u4e24\u5f02\u6216\u7684\u7b2c $k$ \u5927\u503c\u7684\u8fd9\u4e00\u4f4d\u662f $0$ \uff0c\u5219 $a_i$ \u4e0e $\\{$\u4e0e $u$ \u8fd9\u4e00\u5c42\u4e0b\u79fb\u65b9\u5411\u76f8\u53cd\u7684\u5b50\u6811 $\\}$ \u4e2d\u53f6\u5b50\u7ed3\u70b9\u7684\u5bf9\u5e94\u503c\u7684\u5f02\u6216\u503c\u5927\u4e8e\u7b2c $k$ \u5927\u503c\u3002\u8fd9\u6837\u7684\u5b50\u6811\u6700\u591a\u6709 $O(\\log_2 a)$ \u4e2a\u3002\u73b0\u5728\u6211\u4eec\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u5982\u4f55\u6c42 $a_i$ \u4e0e\u67d0\u4e00\u5b50\u6811\u4e2d\u7684\u503c\u7684\u5f02\u6216\u503c\u4e4b\u548c\u3002\n\n\u5e76\u4e0d\u7528 $O(n\\log_2^2 a)$ \u7684\u7a7a\u95f4\u5904\u7406\u5b58\u50a8\uff0c Trie \u4e0a\u4e00\u5b50\u6811\u4e2d\u7684\u503c\u5728\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e2d\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\u3002\u6211\u4eec\u5c06 $a_i$ \u6570\u7ec4\u6392\u5e8f\uff0c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u4e4b\u524d\u7684\u5904\u7406\uff0c\u7136\u540e\u5904\u7406\u51fa\u5176\u6bcf\u4e00\u4f4d\u4e0a $1$ \u7684\u4e2a\u6570\u7684\u524d\u7f00\u548c\uff0c\u9700\u8981\u6c42\u503c\u65f6\u627e\u5230\u5b50\u6811\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u5bf9\u5e94\u6570\u7ec4\u4e2d\u7684\u5de6\u53f3\u7aef\u70b9\uff0c\u5dee\u5206\u6c42\u503c\u5373\u53ef\u3002\u7531\u4e8e\u6211\u4eec\u8981\u6309\u4f4d\u8ba1\u7b97\uff0c\u5355\u6b21\u6c42\u503c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\log_2 a)$ \u3002\n\n\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log_2^2 a)$ \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log_2 a)$ \u3002\n\n\u6ce8\u610f `long long` \uff0c\u7279\u522b\u662f\u79fb\u4f4d\u65f6\uff0c `(1<<i)` \u662f `int` \u578b\u7684\uff0c\u8981\u5199\u6210 `(1ll<<i)` \uff01\n\n## \u4ee3\u7801\u5c55\u793a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define int long long\nconst int maxn=500010;\nint n,k,a[maxn],kth,ans,tot;\nint cnt,ch[maxn*40][2],minn[maxn*40],maxx[maxn*40],siz[maxn*40],nww,t,p[maxn];\nint cnt1[maxn][40];\nint calc(int v,int l,int r)\n{\n    if(l==0)return 0;\n    int ret=0;\n    for(int i=33;i>=0;i--)\n    {\n        int chx=(v>>i)&1;\n        if(chx==0)ret+=(1ll<<i)*(cnt1[r][i]-cnt1[l-1][i]);\n        else ret+=(1ll<<i)*(r-l+1-cnt1[r][i]+cnt1[l-1][i]);\n    }\n    return ret;\n}\nmain()\n{\n    scanf(\"%lld%lld\",&n,&k);k*=2;\n    for(int i=1;i<=n;i++)scanf(\"%lld\",a+i);\n    sort(a+1,a+n+1);\n    for(int i=1;i<=n;i++)for(int j=0;j<=33;j++)if((a[i]>>j)&1)cnt1[i][j]=cnt1[i-1][j]+1;else cnt1[i][j]=cnt1[i-1][j];\n    cnt=1;\n    for(int i=1;i<=n;i++)\n    {\n        nww=1;siz[nww]++;\n        for(int j=33;j>=0;j--)\n        {\n            int chx=(a[i]>>j)&1;\n            if(!ch[nww][chx])ch[nww][chx]=++cnt,minn[cnt]=i;\n            nww=ch[nww][chx];maxx[nww]=i;siz[nww]++;\n        }\n    }\n    for(int i=1;i<=n;i++)p[i]=1;\n    for(int i=33;i>=0;i--)\n    {\n        tot=0;\n        for(int j=1;j<=n;j++)\n        {\n            int chx=((a[j]>>i)&1)^1;\n            tot+=siz[ch[p[j]][chx]];\n        }\n        if(k<=tot)t=1,kth|=(1ll<<i);\n        else k-=tot,t=0;\n        for(int j=1;j<=n;j++)\n        {\n            int chx=((a[j]>>i)&1)^t;\n            p[j]=ch[p[j]][chx];\n        }\n    }\n    //printf(\"%lld\\n\",kth);\n    for(int i=1;i<=n;i++)\n    {\n        nww=1;\n        for(int j=33;j>=0;j--)\n        {\n            int chx=((a[i]^kth)>>j)&1;\n            if(((kth>>j)&1)==0&&ch[nww][chx^1])ans+=calc(a[i],minn[ch[nww][chx^1]],maxx[ch[nww][chx^1]]);\n            nww=ch[nww][chx];\n        }\n    }\n    printf(\"%lld\\n\",(ans+k*kth)/2ll);\n    return 0;\n}\n```\n\n\u603b\u7ed3\u4e00\u4e0b\u672c\u9898\u4e2d\u76f8\u5173\u7684 trick \uff1a\n\n1. \u505a\u5f02\u6216\u524d\u7f00\u548c\uff0c\u533a\u95f4\u5f02\u6216\u548c\u8f6c\u5316\u4e3a\u4e24\u6570\u5f02\u6216\u548c\uff1b\n\n2. \u8865\u5168\u4e0a\u4e09\u89d2\u5f62\u8f6c\u5316\u4e3a\u6c42\u77e9\u5f62\u7684\u503c\uff1b\n\n3. \u6c42\u4e24\u4e24\u5f02\u6216\u7684\u7b2c $k$ \u5927\u503c\uff1a\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\uff0c Trie \u4e0a\u8d2a\u5fc3\uff1b\n\n4. \u6c42\u4e00\u4e2a\u503c\u4e0e\u9759\u6001 Trie \u4e0a\u4e00\u4e2a\u5b50\u6811\u4e2d\u7684\u503c\u7684\u5f02\u6216\u548c\u7684\u548c\uff1a Trie \u4e0a\u5b50\u6811\u4e2d\u7684\u503c\u5728\u6392\u5e8f\u540e\u6570\u7ec4\u4e0a\u662f\u8fde\u7eed\u7684\u3002",
        "postTime": 1561641918,
        "uid": 43486,
        "name": "hsfzLZH1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "\u6211\u5c45\u7136\u5728\u6709\u751f\u4e4b\u5e74\u5207\u6389\u4e86\u4e00\u9053\u5341\u4e8c\u7701\u8054\u8003\u7684\u9898\uff1f\n\n\u505a\u6cd5\u8ddf\u8d85\u7ea7\u94a2\u7434\u8d85\u50cf\uff0c\u53ef\u4ee5\u51fa\u95e8\u53f3\u62d0\u3002\n\n### \u53ef\u6301\u4e45\u5316 $01trie$ + \u5806\n\n\u6211\u4eec\u6c42\u4e00\u904d\u524d\u7f00\u5f02\u6216\u548c\uff0c\u90a3\u4e48 $[l,r]$ \u7684\u5f02\u6216\u548c\u4e3a $sum_{l-1}\\ \\text{xor}\\ sum_r$\n\n\u6211\u4eec\u5148\u56fa\u5b9a\u53f3\u7aef\u70b9 $r$\uff0c\u7136\u540e\u5728 $[0,r-1]$ \u67e5\u4e00\u4e2a\u6570\u5f02\u6216 $sum_r$ \u6700\u5927\u3002\u8fd9\u4e2a\u53ef\u4ee5\u7528\u53ef\u6301\u4e45\u5316 $01trie$ \u5b9e\u73b0\u3002\n\n\u6211\u4eec\u5c06 $n$ \u4e2a\u6570\u653e\u5165\u5806\u4e2d\uff0c\u6bcf\u6b21\u53d6\u51fa\u6700\u5927\u7684\u90a3\u4e2a\u72b6\u6001\u3002\u8bbe\u8fd9\u4e2a\u72b6\u6001\u5de6\u7aef\u70b9\u5728 $[l,r]$ \uff0c\u4e0e $sum_x$ \u5f02\u6216\u8d77\u6765\u6700\u5927\u7684\u4f4d\u7f6e\u5728 $k$\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u72b6\u6001\u7684\u5de6\u7aef\u70b9\u5206\u5272\u6210 $[l,k-1]$ \u548c $[k+1,r]$ \u540e\u653e\u5165\u5806\u4e2d\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\n\n\u6ce8\u610f\uff1a\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u5f00\u52a0 $2K$ \u7684 $pragma$ \u4f1a\u88ab\u5361\u5e38\uff0c\u6240\u4ee5\u770b\u770b\u5c31\u597d\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int maxn=500000+10;\nint n,k,rt[maxn],cnt;ll a[maxn],ans;\n\nstruct node\n{\n\tint ch[2],siz,id;\n}t[maxn*40];\n\ninline ll read()\n{\n\tregister ll x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n\treturn (f==1)?x:-x;\n}\n\nvoid insert(int &now,int pre,int bit,int id,ll val)\n{\n\tnow=++cnt;t[now]=t[pre];t[now].siz++;\n\tif(bit==-1){t[now].id=id;return;}\n\tif((val>>bit)&1) insert(t[now].ch[1],t[pre].ch[1],bit-1,id,val);\n\telse insert(t[now].ch[0],t[pre].ch[0],bit-1,id,val); \n}\n\nint query(int u,int v,int bit,ll val)\n{\n\tif(bit==-1) return t[v].id;\n\tint d=(val>>bit)&1;\n\tif(t[t[v].ch[d^1]].siz-t[t[u].ch[d^1]].siz>0) return query(t[u].ch[d^1],t[v].ch[d^1],bit-1,val);\n\treturn query(t[u].ch[d],t[v].ch[d],bit-1,val);\n}\n\nstruct State\n{\n\tint l,r,x,id;ll val;\n\tState(int _l=0,int _r=0,int _x=0)\n\t{\n\t\tl=_l;r=_r;x=_x;\n\t\tid=query(rt[l-1],rt[r],31,a[x]);\n\t\tval=a[x]^a[id-1];\n\t}\n};\ninline bool operator < (const State &a,const State &b)\n{\n\treturn a.val<b.val;\n}\npriority_queue<State> pq;\n\nint main()\n{\n\tn=read(),k=read();\n\tfor(int i=1;i<=n;i++) a[i]=a[i-1]^read();\n\tfor(int i=1;i<=n;i++) rt[i]=rt[i-1],insert(rt[i],rt[i],31,i,a[i-1]);\n\tfor(int i=1;i<=n;i++) pq.push(State(1,i,i));\n\twhile(k--)\n\t{\n\t\tState u=pq.top();pq.pop();ans+=u.val;\n\t\tif(u.l<u.id) pq.push(State(u.l,u.id-1,u.x));\n\t\tif(u.id<u.r) pq.push(State(u.id+1,u.r,u.x));\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1554603046,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "#### \u9898\u76ee\u5730\u5740\uff1a[P5283 [\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50](https://www.luogu.org/problemnew/show/P5283)\n\n## \u9898\u610f\n\n\u524d $k$ \u5927\u533a\u95f4\u5f02\u6216\u548c\u3002\n\n## \u601d\u8def\n\n\u4e00\u4e2a\u5f88\u57fa\u7840\u7684\u8f6c\u5316\u662f\uff0c\u6211\u4eec\u53ef\u4ee5 $O(n)$ \u6c42\u51fa\u524d\u7f00\u5f02\u6216\u548c $s_0, s_1, ..., s_n$ \u3002\n\n\u90a3\u4e48\u663e\u7136 $xor_{i=l}^{r} = s_{l-1}\\ xor\\ s_r$ \u3002\n\n\u9898\u610f\u8f6c\u5316\u4e3a\uff0c\u5728 $s_0, s_1, ..., s_n$ \u8fd9 $n+1$ \u4e2a\u6570\u4e2d\uff0c\u9009\u51fa $k$ \u5bf9 $(s_i, s_j)(i<j)$ \uff0c\u4f7f\u6bcf\u5bf9\u7684\u5f02\u6216\u503c\u7684\u548c\u6700\u5927\u3002\n\n## \u66b4\u529b\u5206\n\n\u6ce8\u610f\u5230\u6709 $60$ \u5206\u7684\u6570\u636e\u6ee1\u8db3 $n \\leq 1000$ \uff0c\u800c\u4e0a\u8ff0\u6240\u8bf4\u7684\u6570\u5bf9\u4e00\u5171\u6709 $O(n^2)$ \u4e2a\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e00\u5bf9\u7684\u5f02\u6216\u503c\u90fd\u63d2\u5165\u4e00\u4e2a\u5927\u6839\u5806\uff08\u4f18\u5148\u961f\u5217\uff09\u4e2d\uff0c\u7136\u540e\u5f39\u51fa $k$ \u6b21\u6700\u5927\u503c\uff0c\u5f39\u51fa\u7684\u6240\u6709\u503c\u7684\u548c\u5c31\u662f\u6700\u7ec8\u7b54\u6848\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define ui unsigned int\n#define ull unsigned long long\nusing namespace std;\nconst int N = 5e5 + 6;\nint n, k;\nui a[N], s[N];\npriority_queue<ui> q;\null ans;\n\ninline ui rd() {\n\tui x = 0;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9') ch = getchar();\n\twhile (ch >= '0' && ch <= '9') {\n\t\tx = x * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn x;\n}\n\nint main() {\n\tcin >> n >> k;\n\tfor (int i = 1; i <= n; i++) a[i] = rd(), s[i] = s[i-1] ^ a[i];\n\tfor (int l = 1; l <= n; l++)\n\t\tfor (int r = l; r <= n; r++)\n\t\t\tq.push(s[r] ^ s[l-1]);\n\twhile (k--) ans += q.top(), q.pop();\n\tcout << ans << endl;\n\treturn 0;\n}\n```\n\n**\u6ce8\u610f\uff1a\u7531\u4e8e\u8fd9\u9053\u9898 $a$ \u6570\u7ec4\u7684\u6570\u636e\u8303\u56f4\u4e3a $0 \\leq ai\u200b \\leq 4294967295$ \uff0c\u6240\u4ee5\u8981\u5f00unsigned int\uff08\u5f53\u7136long long\u4e5f\u884c\uff09\u3002**\n\n## \u6b63\u89e3\n\n### \u524d\u7f6e\u829d\u58eb\n\n**\u53ef\u6301\u4e45\u5316Trie**\n\n~~\u6d1b\u8c37\u4f3c\u4e4e\u5e76\u6ca1\u6709\u53ef\u6301\u4e45\u5316Trie\u7684\u6a21\u677f2333\u3002~~\n\n\u9996\u5148\u4f60\u8981\u77e5\u9053**\u53ef\u6301\u4e45\u5316**\u3002\n\n\u5176\u6b21\u4f60\u8981\u4f1a**Trie**\uff0c\u5e76\u4e14\u8981\u4f1a\u8fd9\u9053\u9898\u6240\u8981\u4f7f\u7528\u7684**01Trie**\u3002\n\n\u5982\u679c\u8fd9\u4e24\u8005\u90fd\u4f1a\u4e86\uff0c\u90a3\u4e48\u8bf7\u5148\u53bb\u628a[P4735 \u6700\u5927\u5f02\u6216\u548c](https://www.luogu.org/problemnew/show/P4735)A\u6389\u3002\n\nA\u6389\u8fd9\u9053\u9898\u4e4b\u540e\uff0c\u4f60\u5c31\u5e94\u8be5\u77e5\u9053\u5982\u4f55\u6c42\u5728\u5e8f\u5217 $a$ \u7684\u4e00\u4e2a\u7ed9\u5b9a\u533a\u95f4 $[l, r]$ \u4e2d\u9009\u62e9\u4e00\u4e2a\u6570 $i$ \u4f7f $a_i$ \u4e0e\u53e6\u4e00\u4e2a\u7ed9\u5b9a\u7684\u503c\u5f02\u6216\u8d77\u6765\u6700\u5927\u3002\n\n\u7b80\u8981\u7684\u601d\u8def\u662f\uff0c\u5efa\u7acb\u53ef\u6301\u4e45\u5316Trie\uff0c\u5728\u7ed9\u5b9a\u533a\u95f4\u7684Trie\u4e0a\u8d2a\u5fc3\u7684\u4f18\u5148\u9009\u62e9\u4e0e\u7ed9\u5b9a\u503c\u5f53\u524d\u4f4d\u76f8\u53cd\u7684\u8282\u70b9\uff08\u6307\u9488\uff09\u3002\n\n### \u672c\u9898\u601d\u8def\n\n\u4e00\u5f00\u59cb\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u7aef\u70b9 $r$ \uff0c\u5728\u524d\u7f00\u5f02\u6216\u548c\u5e8f\u5217 $s$ \u7684\u533a\u95f4 $[0,r-1]$ \u9009\u62e9\u4e00\u4e2a\u5de6\u7aef\u70b9 $l$ \u4f7f $s_l$ \u4e0e $s_r$ \u5f02\u6216\u8d77\u6765\u6700\u5927\uff0c\u5e76\u5c06\u63cf\u8ff0\u8fd9\u4e2a\u503c\u7684\u6240\u6709\u4fe1\u606f\u4ee5\u8fd9\u4e2a\u503c\u4e3a\u5173\u952e\u5b57\u63d2\u5165\u4e00\u4e2a\u5927\u6839\u5806\u4e2d\u3002\n\n\u63cf\u8ff0\u8fd9\u4e2a\u503c\u6240\u9700\u8981\u7684\u4fe1\u606f\u6709\uff1a\n\n1. \u8fd9\u4e2a\u503c\u7684\u5927\u5c0f\uff1b\n2. \u8fd9\u4e2a\u503c\u5de6\u7aef\u70b9\u7684\u9009\u62e9\u533a\u95f4\uff1b\n3. \u8fd9\u4e2a\u503c\u7684\u5de6\u53f3\u7aef\u70b9\u3002\n\n\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u8bb0\u5f55\uff0c\u4e5f\u53ef\u4ee5\u7528\u82e5\u5e72\u4e2apair\u8bb0\u5f55\uff0c\u6211\u7684\u4ee3\u7801\u5b9e\u73b0\u4e2d\u662f\u7528\u7684\u540e\u8005\u3002\n\n\u4ecd\u7136\u5f39\u51fa $k$ \u6b21\u5806\u4e2d\u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48\u5f39\u51fa\u7684\u6240\u6709\u503c\u7684\u548c\u5c31\u662f\u6700\u7ec8\u7b54\u6848\u3002\n\n\u4f46\u662f\u5728\u5f39\u51fa\u7684\u540c\u65f6\u4e5f\u5728\u4e0d\u65ad\u7684\u63d2\u5165\u3002\n\n\u5047\u8bbe\u6b64\u65f6\u5f39\u51fa\u6765\u503c\u53ca\u5176\u63cf\u8ff0\u4fe1\u606f\u4e3a\uff1a\n\n1. \u8fd9\u4e2a\u503c\u4e3a $x$ \uff1b\n2. \u8fd9\u4e2a\u503c\u5de6\u7aef\u70b9\u7684\u9009\u62e9\u533a\u95f4\u4e3a $[L,R]$\uff1b\n3. \u8fd9\u4e2a\u503c\u7684\u5de6\u53f3\u7aef\u70b9\u4e3a $l,r$\u3002\n\n\u9996\u5148\u5c06 $x$ \u52a0\u5165\u7b54\u6848\u3002\n\n\u7136\u540e\u5c06\u9009\u62e9\u533a\u95f4\u4ee5 $l$ \u4e3a\u754c\u9650\u5206\u6210\u4e24\u6bb5 $[L,l-1], [l+1,R]$ \uff0c\u5206\u522b\u5728\u8fd9\u4e24\u4e2a\u533a\u95f4\u4e2d\u9009\u62e9\u4e0e $s_r$ \u6700\u5927\u7684\u5f02\u6216\u503c\uff0c\u5c06\u8fd9\u4e2a\u503c\u53ca\u5176\u63cf\u8ff0\u4fe1\u606f\u63d2\u5165\u5927\u6839\u5806\u4e2d\u3002\n\n### \u6b63\u786e\u6027\n\n~~\u4e0d\u8a00\u800c\u55bb\u3002~~\n\n**\u672c\u9898\u4ee3\u7801\u5b9e\u73b0\u6bd4\u8f83\u590d\u6742\uff0c\u7ec6\u8282\u6bd4\u8f83\u591a\uff0c\u6211\u7684\u4ee3\u7801\u4ec5\u4f9b\u53c2\u8003\uff0c\u5efa\u8bae\u81ea\u5df1\u6e05\u695a\u601d\u8def\u540e\u72ec\u7acbAC\u3002**\n\n```cpp\n#include <bits/stdc++.h>\n#define ui unsigned int\n#define ull unsigned long long\n#define pii pair<int, int>\n#define X first\n#define Y second\n#define mp make_pair\nusing namespace std;\nconst int N = 5e5 + 6;\nint n, m, trie[N<<6][2], late[N<<6], rt[N], t;\nui a[N];\null ans;\npriority_queue<pair<ui, pair<pii, pii> > > q;\n\ninline ui rd() {\n\tui x = 0;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9') ch = getchar();\n\twhile (ch >= '0' && ch <= '9')\n\t\tx = x * 10 + (ch - '0'), ch = getchar();\n\treturn x;\n}\n\nvoid ins(int i, int k, int p, int o) {\n\tif (k < 0) return late[o] = i, void();\n\tint c = (a[i] >> k) & 1;\n\tif (p) trie[o][c^1] = trie[p][c^1];\n\ttrie[o][c] = ++t;\n\tins(i, k - 1, trie[p][c], trie[o][c]);\n\tlate[o] = max(late[trie[o][0]], late[trie[o][1]]);\n}\n\nint ask(ui x, int k, int o, int p) {\n\tif (k < 0) return late[o];\n\tint c = (x >> k) & 1;\n\treturn ask(x, k - 1, trie[o][c^(late[trie[o][c^1]]>=p)], p);\n}\n\nint main() {\n\tcin >> n >> m;\n\tlate[0] = -1;\n\tins(0, 31, 0, rt[0] = ++t);\n\tfor (int i = 1; i <= n; i++) {\n\t\ta[i] = rd() ^ a[i-1];\n\t\tins(i, 31, rt[i-1], rt[i] = ++t);\n\t\tint j = ask(a[i], 31, rt[i-1], 0);\n\t\tq.push(mp(a[j] ^ a[i], mp(mp(0, i - 1), mp(j, i))));\n\t}\n\twhile (m--) {\n\t\tans += q.top().X;\n\t\tint l = q.top().Y.Y.X, i = q.top().Y.Y.Y;\n\t\tpii k = q.top().Y.X;\n\t\tq.pop();\n\t\tif (l != k.Y) {\n\t\t\tint j = ask(a[i], 31, rt[k.Y], l + 1);\n\t\t\tq.push(mp(a[j] ^ a[i], mp(mp(l + 1, k.Y), mp(j, i))));\n\t\t}\n\t\tif (l != k.X) {\n\t\t\tint j = ask(a[i], 31, rt[l-1], k.X);\n\t\t\tq.push(mp(a[j] ^ a[i], mp(mp(k.X, l - 1), mp(j, i))));\n\t\t}\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}\n```",
        "postTime": 1554913210,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "P5283 [\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50"
    },
    {
        "content": "\u8003\u8651\u5148\u505a\u4e2a prefix xor \u524d\u7f00\u5f02\u6216\n\n$$ b_0=0; $$\n\n$$ b_i = \\bigoplus_{j=1}^ia_j (1\\leqslant i \\leqslant n)$$\n\n\u7136\u540e\u53ef\u4ee5 $\\mathcal{O}(1)$ \u67e5\u8be2\u533a\u95f4\u7684\u5f02\u6216\u4e86\u3002\n\n$$\\bigoplus_{i=l}^r a_i=b_r\\oplus b_{l-1}$$\n\n\u7136\u540e\u8003\u8651\u8fd9\u6837\u6211\u4eec\u8981\u89e3\u51b3\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86\n\n> \u7ed9\u5b9a $n$ \u4e2a\u6570\uff0c\u6c42\u5f02\u6216\u503c\u6700\u9760\u524d\u7684 $k$ \u5bf9\u3002\n\n## \u7b97\u6cd5 0\n\n----------------------\n\n\u5148\u4ece\u6700\u7b80\u5355\u7684\u51fa\u53d1\uff0c\u8003\u8651\u4e8c\u5206\u4e00\u4e2a\u7b54\u6848\u4e0b\u754c $q$ \uff0c\u4e5f\u5373\u8fd9 $k$ \u4e2a\u503c\u90fd $\\geqslant q$ \u3002\n\n\u8003\u8651\u4e00\u6b21\u7b97\u51fa\u4ee5 $l$ \u505a\u5de6\u7aef\u70b9\u7684\u6240\u6709\u53f3\u7aef\u70b9\u5bf9\u7b54\u6848\u6709\u6ca1\u6709\u8d21\u732e\uff0c\u5982\u679c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5 $\\mathcal{O}(\\log n)$ \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5 $\\mathcal{O}(n \\log^2 n)$ \u901a\u8fc7\u672c\u9898\u3002\n\n\u6211\u4eec\u8003\u8651\u5efa\u7acb\u4e00\u4e2a 01-Trie \uff08\u5b57\u5178\u6811\uff09\uff0c\u5148\u987a\u6b21\u63d2\u5165 $b_1 \\sim b_n$ \uff0c\u7136\u540e\u6211\u4eec\u679a\u4e3e\u8fd9\u4e2a\u5de6\u7aef $l$ \u5e76\u8fdb Trie \u6811\u7edf\u8ba1\u6709\u591a\u5c11\u6570\u5b57 $\\oplus \\,b_l \\leqslant q$ \u3002\n\n\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n- \u8bbe\u5f53\u524d\u8d70\u5230\u7684\u6df1\u5ea6\u662f $d$ \uff0c\u53d6\u51fa $b_l$ \u7684\u5de6\u8d77\u7b2c $d$ \u4f4d\u8bb0\u4e3a $u$ \uff0c\u53d6\u51fa $q$ \u7684\u5de6\u8d77\u7b2c $d$ \u4f4d\u8bb0\u4e3a $v$ \u3002\n\n- \u8bbe `ch[0]` \u8868\u793a\u7ed3\u70b9\u5de6\u513f\u5b50\uff0c `ch[1]` \u8868\u793a\u53f3\u513f\u5b50\uff0c\u5982\u679c\u5f53\u524d $v=0$ \uff0c\u9012\u5f52\u8fdb\u5165 `ch[0^u]` \u8ba1\u7b97\u7b54\u6848\u5e76\u52a0\u4e0a `ch[1^u]` \u5b50\u6811\u5185\u70b9\u6570\uff1b\u5426\u5219 $v=1$ \u9012\u5f52\u8fdb\u5165 `ch[1^u]` \u8ba1\u7b97\u7b54\u6848\u3002\n\n\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u70b9\u6570\u4e0d\u8d85\u8fc7 $k\\log A$ \u4e2a\uff0c\u6240\u4ee5\u76f4\u63a5\u8fdb\u6811 DFS \u3002\n\n\u5927\u81f4\u4ee3\u7801\uff1a\n\n```cpp\nint Count(int inx,ll dep,ll val,ll bd)\n{\n    if (!inx) return 0;\n    if (dep==-1) return node[inx].siz;\n    \n    bool bt=(bd>>dep)&1LL;\n    bool cnt=(val>>dep)&1LL;\n    \n    if (!bt) \n    {\n        return node[node[inx].ch[1^cnt]].siz+\n               Count(node[inx].ch[0^cnt],dep-1,val,bd);\n    }\n    else\n    {\n        return Count(node[inx].ch[1^cnt],dep-1,val,bd);\n    }\n}\n```\n\n\u6ce8\u610f\u679a\u4e3e\u8fc7 $b_l$ \u4e4b\u540e\u8981\u628a $b_l$ \u5728 Trie \u4e0a\u5220\u53bb\u3002\n\n## \u7b97\u6cd5 1\n\n-------------------\n\n\u8003\u8651\u4f18\u5316\u7b97\u6cd5 0\n\n\u6267\u884c\u7b97\u6cd5 0 \u7684\u65f6\u5019\u6211\u4eec\u6bcf\u6b21\u90fd\u8981\u91cd\u5efa Trie \uff0c\u6d6a\u8d39\u65f6\u95f4\uff0c\u4e8e\u662f\u5bf9 Trie \u8fdb\u884c\u53ef\u6301\u4e45\u5316\uff0c\u7136\u540e\u5012\u5e8f\u679a\u4e3e\u5373\u53ef\u3002\n\n## \u7b97\u6cd5 2 (100\u5206\uff09\n\n-----------\n\n\u8003\u8651\u4f18\u5316\u7b97\u6cd5 1\n\n\u74f6\u9888\u5728\u4e8e\u6c42\u5f97\u7b54\u6848\u4e0b\u754c\u9700\u8981\u4e8c\u5206\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u6362\u6210\u53ef\u6301\u4e45\u5316 Trie \u4e0a\u4e8c\u5206\uff0c\u5728 Trie \u4e0a\u8d70\u4e00\u8d70\u3002\n\n\u8bb0\u5f55 $ck$ \u662f\u5f53\u524d \u201c\u5269\u4f59\u53ef\u7528\u70b9\u6570\u201d\uff0c\u521d\u59cb\u5316\u4e3a $k$ \u3002\n\n\u6bcf\u6b21\u5411\u4e0b\u8d70\u68c0\u67e5 `ch[1]` \u4e2d\u70b9\u6570\u5982\u679c $\\leqslant ck$ \u90a3\u4e48\u8ba9 $ck-=\\mathrm{nodesiz[ch[1]]}$ \uff0c\u7136\u540e\u8d70\u5230 `ch[0]` \uff0c\u5426\u5219\u8d70\u5230 `ch[1]` \n\n\u4f46\u662f\u6ce8\u610f\u5230\u8d70\u7684\u65b9\u5411\u548c\u5f53\u524d\u63d2\u5165\u7684\u503c $b_l$ \u6709\u5173\uff0c\u6ca1\u6cd5\u7b80\u5355\u7684\u8d70\u4e0b\u53bb\u3002\n\n\u8003\u8651\u6bcf\u4e2a $l$ \u5bf9\u5e94\u7684\u662f\u5de6\u6570\u7b2c $l+1$ \u9897\u53ef\u6301\u4e45\u5316 Trie\uff0c\u4e8e\u662f\u628a $0 \\leqslant l < n$ \u7684 $l$ \u6254\u8fdb\u53bb\u653e\u5728\u4e00\u8d77\u8dd1\u5373\u53ef\u3002\n\n\u5177\u4f53\u903b\u8f91\u89c1\u4ee3\u7801\uff1a\n\n```cpp\nint cur[500010];\nll Solve(ll dep,ll ck,ll val) // OK!!!\n{\n    if (dep==-1) return val;\n    \n    ll tot=0;\n    for (int i=1;i<=n;i++) \n    {\n        bool cnt=(ai[i-1]>>dep)&1LL;\n        tot+=node[node[cur[i]].ch[1^cnt]].siz;\n    }\n    \n    if (tot<ck)\n    {\n        ck-=tot;\n        for (int i=1;i<=n;i++) \n        {\n            bool cnt=(ai[i-1]>>dep)&1LL;\n            cur[i]=node[cur[i]].ch[0^cnt];\n        }\n        return Solve(dep-1,ck,val);\n    }\n    else\n    {\n        for (int i=1;i<=n;i++) \n        {\n            bool cnt=(ai[i-1]>>dep)&1LL;\n            cur[i]=node[cur[i]].ch[1^cnt];\n        }\n        return Solve(dep-1,ck,val+(1LL<<dep));\n    }\n}\n```\n\n\u7136\u540e $\\mathcal{O}(n \\log n)$ \u6c42\u5f97\u4e0b\u754c\u3002\n\n\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u8fd8\u662f DFS \u3002\n\n```cpp\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<cstdlib>\n#include<algorithm>\n#include<iterator>\n#include<queue>\n#include<vector>\nusing namespace std;\ntypedef long long ll;\n\nint n; ll k;\nll ai[500010];\n\ntemplate<typename inp_t>\nvoid readx(inp_t& x)\n{\n    x=0; int k=1; char ch=0;\n    while (ch<'0' || ch>'9') { ch=getchar(); if (ch=='-') k=-1; }\n    while (ch>='0' && ch<='9') { x=x*10+ch-'0'; ch=getchar(); }\n    x*=k;\n}\n\nnamespace DS\n{\n    #define LCH node[inx].ch[0]\n    #define RCH node[inx].ch[1]\n    \n    struct Trie_Node\n    {\n        int ch[2],siz;\n    }node[500010*41];\n    int tsiz=1,root[500010];\n    \n    void Ins(int inx,int old,ll dep,ll val)\n    {\n        if (dep==-1)\n        {\n            node[inx].siz++;\n            return;\n        }\n        bool dir=(val>>dep)&1LL;\n        \n        node[inx].ch[!dir]=node[old].ch[!dir];\n        node[inx].ch[dir]=++tsiz;\n        node[node[inx].ch[dir]].siz=node[node[old].ch[dir]].siz;\n        \n        Ins(node[inx].ch[dir],node[old].ch[dir],dep-1,val);\n        \n        node[inx].siz=node[LCH].siz+node[RCH].siz;\n    }\n    \n    void Build()\n    {\n        for (int i=1;i<=n;i++) root[i]=i;\n        tsiz=n;\n        for (int i=n;i>=1;i--)\n            Ins(root[i],root[i+1],32,ai[i]);\n//\t\t\tIns(root[i],root[i+1],4,ai[i]);\n    }\n    \n    ll Get_Ans(int inx,ll dep,ll val,ll bd,ll cans,bool ok)\n    {\n        if (!inx) return 0;\n        if (dep==-1) \n            return cans*node[inx].siz; \n        \n        bool bt=(bd>>dep)&1LL;\n        bool cnt=(val>>dep)&1LL;\n        \n        ll cans1=cans+(1LL<<dep);\n        \n        if (ok)\n        {\n            return Get_Ans(node[inx].ch[1^cnt],dep-1,val,bd,cans1,1)+\n                   Get_Ans(node[inx].ch[0^cnt],dep-1,val,bd,cans,1);\n        }\n        else if (!bt) \n        {\n            return Get_Ans(node[inx].ch[1^cnt],dep-1,val,bd,cans1,1)+\n                   Get_Ans(node[inx].ch[0^cnt],dep-1,val,bd,cans,0);\n        }\n        else\n        {\n            return Get_Ans(node[inx].ch[1^cnt],dep-1,val,bd,cans1,0);\n        }\n    }\n    \n    int cur[500010];\n    ll Solve(ll dep,ll ck,ll val) // OK!!!\n    {\n//\t\tprintf(\"dep = %lld, ck = %lld, val = %lld\\n\",dep,ck,val);\n        \n        if (dep==-1) return val;\n        \n        ll tot=0;\n        for (int i=1;i<=n;i++) \n        {\n            bool cnt=(ai[i-1]>>dep)&1LL;\n            tot+=node[node[cur[i]].ch[1^cnt]].siz;\n        }\n//\t\tprintf(\"tot = %lld\\n\",tot);\n        \n        if (tot<ck)\n        {\n            ck-=tot;\n            for (int i=1;i<=n;i++) \n            {\n                bool cnt=(ai[i-1]>>dep)&1LL;\n                cur[i]=node[cur[i]].ch[0^cnt];\n            }\n            return Solve(dep-1,ck,val);\n        }\n        else\n        {\n            for (int i=1;i<=n;i++) \n            {\n                bool cnt=(ai[i-1]>>dep)&1LL;\n                cur[i]=node[cur[i]].ch[1^cnt];\n            }\n            return Solve(dep-1,ck,val+(1LL<<dep));\n        }\n    }\n    \n    int Count(int inx,ll dep,ll val,ll bd)\n    {\n        if (!inx) return 0;\n        if (dep==-1) return node[inx].siz;\n        \n        bool bt=(bd>>dep)&1LL;\n        bool cnt=(val>>dep)&1LL;\n        \n        if (!bt) \n        {\n            return node[node[inx].ch[1^cnt]].siz+\n                   Count(node[inx].ch[0^cnt],dep-1,val,bd);\n        }\n        else\n        {\n            return Count(node[inx].ch[1^cnt],dep-1,val,bd);\n        }\n    }\n    \n    #undef LCH\n    #undef RCH\n};\n\n//void DFS_Debug(int inx)\n//{\n//\tusing namespace DS;\n//\tif (node[inx].siz>500000) printf(\"!!\");\n//\tprintf(\"[%d] -> (%d,%d)\\n\",inx,node[inx].ch[0],node[inx].ch[1]);\n//\tprintf(\"siz = %d\\n\",node[inx].siz);\n//\tif (node[inx].ch[0]) DFS_Debug(node[inx].ch[0]);\n//\tif (node[inx].ch[1]) DFS_Debug(node[inx].ch[1]);\n//}\n\nint main()\n{\n    readx(n); readx(k);\n    for (int i=1;i<=n;i++) readx(ai[i]);\n    for (int i=1;i<=n;i++) ai[i]^=ai[i-1];\n    \n    DS::Build();\n    for (int i=1;i<=n;i++) DS::cur[i]=DS::root[i];\n    ll bd=DS::Solve(32,k,0);\n    \n    ll ki=0;\n    for (int i=1;i<=n;i++) ki+=DS::Count(DS::root[i],32,ai[i-1],bd);\n    \n//\tcerr<<\"!! BD = \"<<bd<<\" \"<<ki<<endl;\n    \n    ll ans=0;\n    for (int i=1;i<=n;i++)\n        ans+=DS::Get_Ans(DS::root[i],32,ai[i-1],bd,0,0);\n    \n    if (ki>k) ans-=bd*(ki-k);\n    cout<<ans<<endl;\n}\n```",
        "postTime": 1554553814,
        "uid": 21512,
        "name": "GNAQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u5e8f\u5217\uff0c\u6c42\u524dk\u5927\u7684\u533a\u95f4\u5f02\u6216\u548c\u3002\n\n\u770b\u5230\u533a\u95f4\u7684xor\uff0c\u6709\u4e00\u4e2a\u5e38\u89c1\u7684\u5957\u8def\u662f\u6c42\u4e00\u6b21\u524d\u7f00xor\u548c\uff0c\u8fd9\u6837\u4e00\u4e2a\u533a\u95f4\u7684xor\u5c31\u53ef\u4ee5\u8868\u793a\u4e3a\u4e24\u4e2a\u524d\u7f00\u7684xor\u4e86\u3002\n\n\u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u7ed9\u5b9an+1\u4e2a\u6570\uff08\u6ce8\u610f\u6700\u5f00\u5934\u7684\u957f\u5ea6\u4e3a0\u7684\u524d\u7f00\u4e5f\u8981\u7b97\uff09\uff0c\u6c42\u4e24\u4e24xor\u7684\u524dk\u5927\u3002\n\n\u4e00\u9053\u7ecf\u5178\u7684\u95ee\u9898\u662f\u6c42\u4e24\u4e24xor\u7684\u6700\u5927\u503c\u662f\u591a\u5c11\uff0c\u76f8\u4fe1\u5927\u5bb6\u5e94\u8be5\u90fd\u4f1a\u8fd9\u4e2atrie\u6811\u4e0a\u8d2a\u5fc3\u7684\u505a\u6cd5\uff1a\u4ece\u5de6\u5f80\u53f3\u626b\u8fc7\u53bb\uff0c\u6bcf\u6b21\u770b\u4e00\u4e0b\u8fd9\u4e2a\u6570\u4e0e\u4e4b\u524d\u7684\u6570\u7684xor\u7684\u6700\u5927\u503c\u662f\u591a\u5c11\uff0c\u53ea\u9700\u8981\u5728trie\u6811\u4e0a\u8d2a\u5fc3\u5730\u5c3d\u53ef\u80fd\u5f80\u76f8\u53cd\u7684\u65b9\u5411\u8d70\u5373\u53ef\uff0c\u5728check\u5b8c\u8fd9\u4e2a\u6570\u4e4b\u540e\u518d\u628a\u5b83\u63d2\u5165trie\u3002\n\n\u800c\u8fd9\u4e2a\u9898\u8981\u6c42\u7684\u662f\u524dk\u5927\u7684\u503c\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u8003\u573a\u4e0a\u6211\u770b\u5230\u8fd9\u4e2a\u524dk\u5927\uff0c\u9996\u5148\u60f3\u5230\u7684\u662f\u53e6\u4e00\u9053\u7ecf\u5178\u9898\uff1a\u7ed9\u5b9a2\u4e2a\u6570\u7ec4\uff0c\u6c42\u4e24\u4e24\u4e4b\u548c\u7684\u524dk\u5c0f\u503c\uff08P1631\u5e8f\u5217\u5408\u5e76\uff09\u3002\n\n\u8fd9\u4e2a\u9898\u5f88\u7b80\u5355\uff1a\u53ea\u9700\u8981\u6392\u5e8f\u540e\u7528\u4e00\u4e2a\u5806\u6765\u7ef4\u62a4\uff0c\u521d\u59cb\u65f6\u5806\u4e2d\u6709a\u6570\u7ec4\u7684\u6bcf\u4e00\u4e2a\u6570\u548cb\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u7684\u548c\uff0c\u6bcf\u6b21\u5f39\u51fa\u5806\u9876\u65f6\uff0c\u5c06a\u6570\u7ec4\u5bf9\u5e94\u7684\u6570\u548cb\u6570\u7ec4\u7684\u4e0b\u4e00\u4e2a\u6570\u4e4b\u548c\u63d2\u5165\u5806\u4e2d\u5373\u53ef\u3002\n\n\u540c\u6837\u5730\uff0c\u8fd9\u4e2a\u9898\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u5806\u6765\u7ef4\u62a4\uff1a\u4e0d\u59a8\u5148\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u7aef\u70b9\uff0c\u627e\u5230\u4e0e\u5b83xor\u6700\u5927\u7684\u5de6\u7aef\u70b9\u7684\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u4ece\u5806\u4e2d\u5f39\u51fa\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u56fa\u5b9a\u53f3\u7aef\u70b9\u4e0d\u53d8\uff0c\u5bfb\u627e\u4e0b\u4e00\u4e2a\u5de6\u7aef\u70b9\u4f4d\u7f6e\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u4ee4\u5de6\u7aef\u70b9\u4f4d\u7f6e\u65f6\u523b\u5c0f\u4e8e\u53f3\u7aef\u70b9\u4f4d\u7f6e\uff0c\u5c31\u9700\u8981\u5bf9\u4e8e\u6bcf\u4e2a\u524d\u7f00\u90fd\u5efa\u4e00\u68f5trie\u6811\uff0c\u7528\u53ef\u6301\u4e45\u5316trie\u6765\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u6bcf\u6b21\u5f39\u51fa\u5806\u9876\u65f6\uff0c\u9700\u8981\u7684\u64cd\u4f5c\u76f8\u5f53\u4e8e\u8981\u5728trie\u6811\u4e0a\u627e\u5230\u4e0e\u5f53\u524d\u503cxor\u7b2cx\u5927\u7684\u5143\u7d20\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u7528\u8bb0\u5f55trie\u6811\u4e0a\u7684\u6bcf\u4e2a\u70b9\u7684size\u6765\u5b9e\u73b0\uff08\u7c7b\u4f3c\u4e8e\u5e73\u8861\u6811\u7684\u67e5\u627e\u7b2ck\u5927\u5143\u7d20\u5427\uff09\u3002\u6211\u5728\u8003\u573a\u4e0a\u5199\u7684\u662f\u7b80\u5355\u7c97\u66b4\u5730\u4ece\u5f53\u524d\u5143\u7d20\u5f00\u59cb\u5728trie\u6811\u4e0a\u5411\u4e0a\u8df3\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u5206\u53c9\u4e4b\u540e\u8d70\u8fdb\u53bb\u7ee7\u7eed\u8d2a\u5fc3\u3002\n\n\u65f6\u7a7a\u590d\u6742\u5ea6\u90fd\u662f1\u4e2alog\u3002\n\n\u603b\u7ed3\uff1a\u9898\u76ee\u96be\u5ea6\u5e76\u4e0d\u5927\uff0c\u4f5c\u4e3a\u7701\u9009d1t1\u7684\u6e29\u6696\u9898\u8fd8\u662f\u5f88\u5408\u9002\u7684\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<ctime>\n#include<queue>\nusing namespace std;\n#define li long long\n#define gc getchar()\n#define pc putchar\ninline li read(){\n\tli x = 0,y = 0,c = gc;\n\twhile(c < '0' || c > '9') y = c,c = gc;\n\twhile(c >= '0' && c <= '9') x = x * 10 + c - '0',c = gc;\n\treturn y == '-' ? -x : x;\n}\ninline void print(li x){\n\tif(x < 0) pc('-'),x = -x;\n\tif(x >= 10) print(x / 10);\n\tpc(x % 10 + '0');\n}\ninline void file(){\n\tfreopen(\"xor.in\",\"r\",stdin);\n\tfreopen(\"xor.out\",\"w\",stdout);\n}\nint n,k;\nli a[500010],b[500010],as;\n#define pii pair<li,int>\n#define fi first\n#define se second\n#define mp make_pair\npriority_queue<pii> qu;\nint rt[500010],cnt,sz[20000010],son[20000010][2];\ninline int ins(int p,li x,int d){\n\tint q = ++cnt;\n\tsz[q] = sz[p] + 1;\n\tif(!d) return q;\n\tbool nxt = (x >> d - 1) & 1;\n\tson[q][nxt] = ins(son[p][nxt],x,d - 1);\n\tson[q][!nxt] = son[p][!nxt];\n\treturn q;\n}\nint nw[500010],dpt[500010],sl[500010];\nbool fx[500010][40];\nint jd[500010][40];\nli an[500010];\nint main(){\n\t//file();\n\tint i,j;\n\tbool nxt;\n\tn = read();k = read();\n\tfor(i = 1;i <= n;++i) a[i] = read(),b[i + 1] = b[i] ^ a[i];\n\t//for(i = 1;i <= n + 1;++i) cerr<<b[i]<<\" \";cerr<<endl;\n\tfor(i = 1;i <= n + 1;++i) rt[i] = ins(rt[i - 1],b[i],32); \n\t//cerr<<n<<\" \"<<cnt<<endl;\n\t//return 0;\n\tfor(i = 2;i <= n + 1;++i){\n\t\tnw[i] = rt[i - 1];\n\t\tjd[i][32] = nw[i];\n\t\tfor(j = 31;j >= 0;--j){\n\t\t\tnxt = (b[i] >> j) & 1;\n\t\t\tif(son[nw[i]][!nxt]) an[i] += (1ll << j),nw[i] = son[nw[i]][!nxt],fx[i][j] = 1;\n\t\t\telse nw[i] = son[nw[i]][nxt];\n\t\t\tjd[i][j] = nw[i];\n\t\t}\n\t\tqu.push(mp(an[i],i));\n\t}\n\t//return 0;\n\tfor(i = 1;i <= k;++i){\n\t\tpii p = qu.top();qu.pop();\n\t\t//cerr<<i<<\" \"<<p.fi<<\" \"<<p.se<<\" \"<<(p.fi ^ b[p.se])<<\" \"<<nw[p.se]<<\" \"<<sz[nw[p.se]]<<endl;\n\t\t//cerr<<p.fi<<endl;\n\t\tas += p.fi;\n\t\t++sl[p.se];\n\t\tif(sz[nw[p.se]] > sl[p.se]) qu.push(p); \n\t\telse{\n\t\t\tj = 0;\n\t\t\t//cerr<<\"*\"<<endl;\n\t\t\twhile(nw[p.se]){\n\t\t\t\tnw[p.se] = jd[p.se][j + 1];\n\t\t\t\t//cerr<<j<<\" \"<<nw[p.se]<<endl;\n\t\t\t\tif(fx[p.se][j]){\n\t\t\t\t\tan[p.se] -= (1ll << j);\n\t\t\t\t\t//cerr<<\"()\"<<endl;\n\t\t\t\t\tfx[p.se][j] = 0;\n\t\t\t\t\tnxt = (b[p.se] >> j) & 1;\n\t\t\t\t\t//cerr<<\"()\"<<endl;\n\t\t\t\t\tif(son[nw[p.se]][nxt]){\n\t\t\t\t\t\tnw[p.se] = son[nw[p.se]][nxt];\n\t\t\t\t\t\tjd[p.se][j] = nw[p.se];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t\t++j;\n\t\t\t\t\n\t\t\t}\n\t\t\t//cerr<<\"&\"<<endl;\n\t\t\tif(!nw[p.se]) continue;\n\t\t\tfor(--j;j >= 0;--j){\n\t\t\t\tnxt = (b[p.se] >> j) & 1;\n\t\t\t\tif(son[nw[p.se]][!nxt]) an[p.se] += (1ll << j),nw[p.se] = son[nw[p.se]][!nxt],fx[p.se][j] = 1;\n\t\t\t\telse nw[p.se] = son[nw[p.se]][nxt],fx[p.se][j] = 0;\n\t\t\t\tjd[p.se][j] = nw[p.se];\n\t\t\t}\n\t\t\tqu.push(mp(an[p.se],p.se));sl[p.se] = 0;\n\t\t}\n\t}\n\tprint(as);\n\treturn 0;\n}\n\n```",
        "postTime": 1554552597,
        "uid": 45775,
        "name": "liuzhangfeiabc",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "## [\u539f\u6587\u5730\u5740](https://www.cnblogs.com/bcoier/p/10788524.html)\n\n### \u524d\u7f6e\u829d\u58eb\uff1a[\u53ef\u6301\u4e45\u5316Trie](https://www.luogu.org/problemnew/show/P4735) & [\u5806](https://www.luogu.org/problemnew/show/P2048)\n\n\u7c7b\u4f3c\u4e8e\u8d85\u7ea7\u94a2\u7434\uff0c\u6211\u4eec\u7528\u5806\u7ef4\u62a4\u4e00\u4e2a\u56db\u5143\u7ec4$(st, l, r, pos)$\u8868\u793a\u4ee5$st$\u4e3a\u8d77\u70b9\uff0c\u7ec8\u70b9\u5728$[l, r]$\u5185\uff0c\u91cc\u9762\u7684\u6700\u5927\u503c\u7684\u4f4d\u7f6e\u4e3a$pos$\n\n\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u5c0f\u6839\u5806\uff08\u5806\u9876\u6700\u5927\uff09\uff0c\u6743\u503c\u4e3ast-pos\u7684\u5f02\u6216\u548c\uff0c\u6bcf\u4e00\u6b21\u627e\u51fa\u6700\u5927\u7684\u5e76\u5220\u6389\n\n\u6240\u8c13\u5220\uff0c\u5c31\u662f\u628a\u4e00\u4e2a\u533a\u95f4\u4ecepos\u5904\u5206\u88c2\n\n\u5373\uff1a$(st, l, r)->(st, l, pos - 1) (st, pos + 1, r)$\n\n\u8fd9\u6837\u91cd\u65b0\u7ef4\u62a4pos\u503c\u5373\u53ef\n\n\u7ef4\u62a4pos\u503c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u5185\u4e0ex\u7684\u5f02\u6216\u503c\u6700\u5927\uff0c\u4e0d\u96be\u60f3\u5230\u53ef\u6301\u4e45\u5316$Trie$\uff0c~~\u4e8e\u662f\u53ea\u9700\u8981\u628a\u8d85\u7ea7\u94a2\u7434\u4e2d\u7684$RMQ$\u53d8\u6210\u53ef\u6301\u4e45\u5316$Trie$\u5373\u53ef~~\n\n\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define re register\n#define debug printf(\"Now is Line : %d\\n\",__LINE__)\n#define file(a) freopen(#a\".in\",\"r\",stdin);freopen(#a\".out\",\"w\",stdout)\n#define ll long long\nil ll read() {\n    re ll x = 0, f = 1; re char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n#define rep(i, s, t) for(re int i = s; i <= t; ++ i)\n#define maxn 500005\nint n, m;\nll sum[maxn], ans;\nnamespace Trie {\n\tstruct PAX {\n\t\tint id, s, ch[2];\n\t}e[maxn * 50];\n\tint cnt, rt[maxn];\n\til void insert(int&k, int kk, int bit, int id, ll val) {\n\t\tk = ++ cnt;\n\t\te[k] = e[kk], ++ e[k].s;\n\t\tif(bit == -1) return(void)(e[k].id = id);\n\t\tint c = (val >> bit) & 1;\n\t\tinsert(e[k].ch[c], e[kk].ch[c], bit - 1, id, val); \n\t}\n\til int query(int l, int r, int bit, ll val) {\n\t\tif(bit == -1) return e[r].id;\n\t\tint c = (val >> bit) & 1;\n\t\tif(e[e[r].ch[c ^ 1]].s > e[e[l].ch[c ^ 1]].s) \n\t\t\treturn query(e[l].ch[c ^ 1], e[r].ch[c ^ 1], bit - 1, val);\n\t\treturn query(e[l].ch[c], e[r].ch[c], bit - 1, val);\n\t}\n}\nusing namespace Trie;\nstruct node {\n\tint st, l, r, pos;\n\til bool operator < (const node a) const {\n\t\treturn (sum[pos] ^ sum[st - 1]) < (sum[a.pos] ^ sum[a.st - 1]);\n\t}\n\tnode(int St, int L, int R) {\n\t\tst = St, l = L, r = R, pos = query(rt[l - 1], rt[r], 32, sum[st - 1]);\n\t}\n};\npriority_queue<node>q;\nsigned main() {\n\tfile(a);\n\tn = read(), m = read();\n\trep(i, 1, n) sum[i] = sum[i - 1] ^ read();\n\trep(i, 1, n) insert(rt[i], rt[i - 1], 32, i, sum[i]);\n\trep(i, 1, n) q.push(node(i, i, n));\n\twhile(m --) {\n\t\tnode t = q.top(); q.pop();\n\t\tans += sum[t.pos] ^ sum[t.st - 1];\n\t\tif(t.l < t.pos) q.push(node(t.st, t.l, t.pos - 1));\n\t\tif(t.pos < t.r) q.push(node(t.st, t.pos + 1, t.r));\n\t}\n\tprintf(\"%lld\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1556501243,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P5283)\n\n~~\u6ca1\u9519\u6211\u662f\u6765duliu\u7684~~\n\n\u5f53\u65f6\u6211\u5728\u8003\u573a\u4e0a\u4ec0\u4e48\u90fd\u4e0d\u4f1a\uff0c\u7136\u540e\u8fde$O(n^2)$\u7684\u505a\u6cd5\u90fd\u60f3\u4e0d\u51fa\u6765\u3002**\u6211\u662f\u771f\u7684\u83dc\u3002**\n\n\u7136\u540e\u8fd9\u4e2a\u849f\u84bb\u5c31\u5728\u8003\u573a\u4e0ayy\u4e86\u4e00\u4e2a\u590d\u6742\u5ea6\u4e3a$O(n\\log^2n)$\uff08\u51c6\u786e\u5730\u8bf4\u5e94\u8be5\u662f$O(k\\log n\\log a)$\uff09\u7684\u9b3c\u755c\u505a\u6cd5\uff0c\u5728\u8003\u573a\u4e0a\u5f00`O2` $AC$\u3002\n\n\u4e0b\u9762\u6211\u6765\u5206\u4eab\u4e00\u4e0b\u6211\u505a\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\u3002\n\n### \u7b97\u6cd51\n\n\u89c2\u5bdf\u5230\u5bf9\u4e8e$40\\%$\u7684\u6570\u636e\uff0c$n, k \\leq 10^3$\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a$O(nk\\log n)$\u7684\u505a\u6cd5\u3002\n\n\u9996\u5148\u4f60\u8981\u4f1a\u505a[P2085 \u6700\u5c0f\u51fd\u6570\u503c](https://www.luogu.org/problemnew/show/P2085)\n\n\u7136\u540e\u6211\u4eec\u5bf9\u6574\u4e2a\u5e8f\u5217\u505a\u5f02\u6216\u524d\u7f00\u548c\u3002\u7136\u540e\u7531\u4e8e\u5f02\u6216\u7684\u6027\u8d28\uff0c\u533a\u95f4$[l, r]$\u7684\u5f02\u6216\u548c\u5373\u4e3a$s[r]\\ \\operatorname{xor}\\ s[l-1]$\u3002\uff08\u6ce8\u610f\u6b64\u5904$s[0] = 0$\uff09\n\n\u7136\u540e\u6211\u4eec\u56fa\u5b9a\u53f3\u7aef\u70b9\uff0c\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u6765\u7ef4\u62a4\u5bf9\u4e8e\u6240\u6709\u53f3\u7aef\u70b9\uff0c\u5b83\u548c\u5de6\u8fb9\u67d0\u4e2a\u6570\u5f02\u6216\u548c\u7684\u6700\u5927\u503c\u3002\u7136\u540e\u6211\u4eec\u5faa\u73af$k$\u6b21\uff0c\u5bf9\u4e8e\u53d6\u51fa\u7684\u53f3\u7aef\u70b9\uff0c\u5c06\u5b83\u6240\u5bf9\u5e94\u7684\u503c\u52a0\u5165\u7b54\u6848\u3002\u7136\u540e\u6211\u4eec\u53bb\u627e\u6b21\u5927\u503c\uff08\u5982\u679c\u5f53\u524d\u5bf9\u5e94\u7684\u662f\u6b21\u5927\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u627e\u7b2c$3$\u5927\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff09\u3002\n\n\u81f3\u4e8e\u600e\u4e48\u53bb\u627e\u7b2c$k$\u5927\uff0c\u5f53\u7136\u662f\u66b4\u529b\u627e\u554aqwq\n\n\u8003\u8651\u5230\u6211\u4eec\u662f\u4f9d\u6b21\u53d6\u51fa\u524d$k$\u5927\uff0c\u4e8e\u662f\u6211\u4eec\u6bcf\u6b21\u5bf9\u627e\u5230\u7684\u70b9\u6253\u4e2a\u6807\u8bb0\uff0c\u7136\u540e\u7b2c$k$\u5927\u5c31\u662f\u6ca1\u6253\u6807\u8bb0\u7684\u6700\u5927\u503c\u3002\u6ce8\u610f\u5982\u679c\u5168\u627e\u5b8c\u4e86\u5c31\u4e0d\u8981\u518d\u6254\u8fdb\u4f18\u5148\u961f\u5217\u91cc\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nk\\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(n^2)$\n\n\u671f\u671b\u5f97\u5206\uff1a$40$\u5206\n\n### \u7b97\u6cd52\n\n\u89c2\u5bdf\u5230\u5bf9\u4e8e$60\\%$\u7684\u6570\u636e\uff0c$n \\leq 10^3$\uff0c\u8fd9\u65f6\u6211\u4eec\u66b4\u529b\u628a\u6240\u6709\u533a\u95f4\u548c\u6254\u5230\u4e00\u4e2a`vector`\u91cc\u7136\u540e\u6392\u5e8f\uff0c\u53d6\u524d$k$\u5927\uff0c\u5b8c\u4e86\u3002~~\u6bd4~~$\\sout{40}$~~\u5206\u7b97\u6cd5\u597d\u5199\u591a\u4e86~~\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n^2\\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(n^2)$\n\n\u671f\u671b\u5f97\u5206\uff1a$60$\u5206\n\n### \u7b97\u6cd53\n\n\u6211\u4eec\u6ce8\u610f\u5230\u4e0a\u9762\u7684\u7b97\u6cd51\uff0c\u590d\u6742\u5ea6\u74f6\u9888\u4e3b\u8981\u5728\u4e8e\u5982\u4f55\u627e\u7b2c$k$\u5927\u7684\u90e8\u5206\u3002\u56e0\u6b64\u6211\u4eec\u8981\u60f3\u529e\u6cd5\u4f18\u5316\u627e\u7b2c$k$\u5927\u7684\u590d\u6742\u5ea6\u3002\n\n\u7136\u540e\u5f02\u6216\u95ee\u9898\u53ef\u4ee5\u7528`01trie`\u89e3\u51b3\u3002\u6211\u4eec\u73b0\u5728\u56fa\u5b9a\u53f3\u7aef\u70b9\uff0c\u67e5\u8be2\u5de6\u8fb9\u7684\u6570\u4e0e\u53f3\u7aef\u70b9\u5f02\u6216\u7684\u6700\u5927\u503c\uff0c\u8fd9\u9700\u8981\u53ef\u6301\u4e45\u5316`01trie`\u3002\n\n\u7528\u53ef\u6301\u4e45\u5316`01trie`\u6c42\u6700\u5927\u5f02\u6216\u503c\u7684\u601d\u8def\u662f**\u8d2a\u5fc3**\u3002\u6211\u4eec\u4ece\u9ad8\u4f4d\u5411\u4f4e\u4f4d\u5bf9\u8fd9\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u63d2\u5165`trie`\u91cc\u3002\u6211\u4eec\u8be2\u95ee\u7684\u65f6\u5019\u5e26\u4e00\u4e2a\u53c2\u6570`x`\uff0c\u5728`trie`\u4e0a\u4ece\u9ad8\u4f4d\u5411\u4f4e\u4f4d\u8d70\uff0c\u5982\u679c`x`\u5728\u8fd9\u4e00\u4f4d\u7684\u503c\u4e3a`c`\uff0c\u90a3\u4e48\u6211\u4eec\u770b\u5f53\u524d\u70b9`c xor 1`\u80fd\u4e0d\u80fd\u8d70\uff08\u80fd\u8d70\u5c31\u8d70\uff09\u3002\n\n\u7136\u540e\u8fd9\u91cc\u5982\u679c\u8981\u6c42\u7b2c$k$\u5927\u7684\u8bdd\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u4e2a\u5b50\u6811\u7684`size`\uff0c\u7528\u7c7b\u4f3c\u5e73\u8861\u6811\u6c42\u7b2c$k$\u5927\u7684\u65b9\u6cd5\u505a\uff0c\u65f6\u7a7a\u590d\u6742\u5ea6\u90fd\u662f$n\\log n$\u7684\u3002\u4f46\u6211\u5728\u8003\u573a\u4e0a\u60f3\u4e0d\u51fa\u6765qwq\n\n\u6211\u4eec\u8fd8\u662f**\u8003\u8651\u4e0a\u9762\u7b97\u6cd51\u7684\u601d\u8def**\u3002\u6211\u4eec\u5c06\u4e00\u4e2a\u6570\u53d6\u51fa\u540e\uff0c\u5982\u679c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u5220\u6389\uff08\u6216\u8005\u6253\u6807\u8bb0\uff09\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u6700\u5927\u503c\u5c31\u662f\u539f\u6765\u7684\u6b21\u5927\u503c\u3002\n\n\u5f53\u7136\u7531\u4e8e\u53ef\u6301\u4e45\u5316\u7684\u4e1c\u897f\u662f\u5171\u7528\u7a7a\u95f4\u7684\uff0c\u6211\u4eec\u5e76\u4e0d\u80fd\u76f4\u63a5\u5220\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u7aef\u70b9\u5206\u522b\u8bb0\u5f55\u54ea\u4e2a\u70b9\u6709\u6ca1\u6709\u8d70\u8fc7\u3002\u663e\u7136\u76f4\u63a5\u5f00\u6570\u7ec4\u7a7a\u95f4\u590d\u6742\u5ea6\u4f1a\u7206\u70b8\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9\u6bcf\u4e2a\u53f3\u7aef\u70b9\uff0c\u5f00\u4e00\u4e2a`set`\u8868\u793a\u5df2\u7ecf\u8d70\u8fc7\u7684\u70b9\u7684\u96c6\u5408\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u600e\u4e48\u7ef4\u62a4\u8fd9\u4e2a`set`\u3002\u6211\u4eec\u8d2a\u5fc3\u7684\u5206\u754c\u70b9\u5c31\u662f**\u5728trie\u4e0a\u4e24\u8fb9\u90fd\u53ef\u4ee5\u8d70\u7684\u4f4d\u7f6e**\u3002\u4e8e\u662f\u6211\u4eec\u5728\u6bcf\u6b21\u53d6\u51fa\u4e00\u4e2a\u503c\u540e\uff0c\u56de\u6eaf\u8d70\u8fc7\u7684\u70b9\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5206\u754c\u70b9\uff0c\u5c06\u5b83\u4e0b\u9762\u7684\u6211\u4eec\u521a\u624d\u8d70\u8fc7\u7684\u70b9\u6253\u4e0a\u6807\u8bb0\u3002\u8fd9\u6837\u4e0b\u4e00\u6b21\u8be2\u95ee\u65f6\u6211\u4eec\u5c31\u9700\u8981\u8d70\u53e6\u4e00\u8fb9\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5~~\u6109\u5feb\u5730~~\u5199\u4ee3\u7801\u4e86\u3002\n\n\u5199\u5b8c\u540e\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u5b83\u5b9e\u9645\u4e0a\u8dd1\u5927\u6837\u4f8b\u4f1aWA\u6389\u2026\u2026\n\n\u7136\u540e\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u6211\u4eec\u6ca1\u6709\u8003\u8651\u5728`trie`\u91cc\u6709\u91cd\u590d\u503c\u7684\u60c5\u51b5\u3002\u6211\u4eec\u76f4\u63a5\u6253\u4e86\u6807\u8bb0\uff0c\u76f8\u5f53\u4e8e\u5bf9`trie`\u91cc\u7684\u5143\u7d20\u81ea\u52a8\u53bb\u4e86\u91cd\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a`trie`\u4e0a\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u8bb0\u5f55\u4e00\u4e2a`val`\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u4e0a\u6709\u591a\u5c11\u91cd\u590d\u7684\u6570\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u7aef\u70b9\uff0c\u6211\u4eec\u5f00\u4e00\u4e2a`map`\uff0c\u8bb0\u5f55\u5bf9\u4e8e\u5f53\u524d\u7684\u53f3\u7aef\u70b9\uff0c\u8fd9\u4e2a\u6570\u53d6\u4e86\u591a\u5c11\u6b21\u3002\u5f53\u5168\u90e8\u53d6\u5b8c\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u6253\u6807\u8bb0\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log^2 n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(n\\log n)$\n\n\u671f\u671b\u5f97\u5206\uff1a$100$\u5206\uff08\u9700\u8981\u5f00`O2`\uff0c\u4e0d\u7136\u8fc7\u4e0d\u4e86qwq\uff09\n\n\u5b9e\u73b0\u7ec6\u8282\u8fd8\u662f\u5f88\u591a\u7684\uff0c~~\u4ee5\u81f4\u4e8e\u6211\u5728\u8003\u540e\u4e00\u76f4\u4ee5\u4e3a\u81ea\u5df1\u5199\u6302\u4e86~~qwq\n\n\u7136\u540e\u8fd8\u6709\u4e00\u70b9\uff0c**\u4e09\u5e74OI\u4e00\u573a\u7a7a\uff0c\u4e0d\u5f00 long long \u89c1\u7956\u5b97**\n\n\u4e0b\u9762\u653e\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <algorithm>\n#include <queue>\n#include <set>\n#include <map>\n#define maxn 500005\ntypedef long long ll;\ninline ll read() {\n    ll d=0;char ch=getchar();while(!isdigit(ch))ch=getchar();\n    while(isdigit(ch)){d=d*10+ch-48,ch=getchar();}return d;\n}\n\nint n, k;\nll a[maxn]; // a\u662f\u539f\u6570\u5217\u7684\u524d\u7f00\u548c\nstd::set<int> vis[maxn]; // \u5bf9\u6bcf\u4e2a\u53f3\u7aef\u70b9\u5f00\u4e00\u4e2aset\uff0c\u8bb0\u5f55\u5728\u8be2\u95ee\u7684\u8fd9\u4e2a\u53f3\u7aef\u70b9\u4e0b\uff0c\u6bcf\u4e2a\u70b9\u80fd\u4e0d\u80fd\u8d70\nstd::map<int, int> cocnt[maxn]; // \u5bf9\u6bcf\u4e2a\u53f3\u7aef\u70b9\u5f00\u4e00\u4e2amap\uff0c\u8bb0\u5f55\u5728\u8be2\u95ee\u7684\u8fd9\u4e2a\u53f3\u7aef\u70b9\u4e0b\uff0c\u6bcf\u4e2a\u53f6\u5b50\u53d6\u51fa\u4e86\u591a\u5c11\u6b21\nstd::priority_queue< std::pair<ll, int> > q; // \u7ef4\u62a4\u7684\u662f\u6743\u503c\u548c\u4f4d\u7f6e\n\nnamespace trie {\n    int rt[maxn], cnt;\n    int ch[maxn*34][2], val[maxn*34];\n    \n    void ins(ll x, int& pos, int lst) {\n        // \u6b63\u5e38\u5730\u63d2\u5165\n        if(!pos) pos = ++cnt;\n        int now = pos;\n        for(int i = 32; i >= 0; --i) {\n            int c = (x>>i)&1;\n            if(!ch[now][c]) ch[now][c] = ++cnt;\n            ch[now][c^1] = ch[lst][c^1];\n            now = ch[now][c], lst = ch[lst][c];\n        }\n        val[now] = val[lst]+1; // \u8bb0\u5f55\u6bcf\u4e2a\u53f6\u5b50\u63d2\u5165\u4e86\u591a\u5c11\u6b21\n    }\n    \n    int stk[45], tots;\n    \n    ll query(ll x, int pos, int rps) {\n        int now = pos;\n        ll ans = 0;\n        stk[tots = 1] = now;\n        for(int i = 32; i >= 0; --i) {\n            int c = (x>>i)&1;\n            if(ch[now][c^1] && !vis[rps].count(ch[now][c^1])) now = ch[now][c^1], ans |= (1ll<<i); // \u53ef\u4ee5\u8d70\u76f8\u53cd\u7684\u4f4d\u7f6e\n            else if(ch[now][c] && !vis[rps].count(ch[now][c])) now = ch[now][c];\n            else return -1; // \u8d70\u4e0d\u4e86\uff0c\u8bf4\u660e\u6211\u4eec\u5df2\u7ecf\u53d6\u5b8c\u5bf9\u5e94\u53f3\u7aef\u70b9\u6240\u6709\u7684\u6570\u4e86\n            stk[++tots] = now;\n        }\n        \n        // \u6bcf\u4e2a\u70b9\u4e0a\u53ef\u80fd\u6709\u591a\u4e2a\u76f8\u7b49\u7684\u6570\n        if(val[now]-cocnt[rps][now] > 1) {\n            ++cocnt[rps][now];\n            return ans;\n        }\n        \n        // \u5f53\u524d\u8282\u70b9\u7684\u6570\u53d6\u5b8c\u4e86\uff0c\u6253\u6807\u8bb0\n        for(; tots; --tots) {\n            if(ch[stk[tots]][0] && !vis[rps].count(ch[stk[tots]][0]) && ch[stk[tots]][1] && !vis[rps].count(ch[stk[tots]][1])) {\n                // \u627e\u5230\u5206\u652f\u70b9\u4e86\n                vis[rps].insert(stk[tots+1]);\n                break;\n            }\n        }\n        // \u627e\u4e0d\u5230\u5206\u652f\u70b9\uff0c\u4e5f\u8bf4\u660e\u6211\u4eec\u5df2\u7ecf\u5c06\u5f53\u524d\u53f3\u7aef\u70b9\u5bf9\u5e94\u7684\u6570\u53d6\u5b8c\u4e86\u3002\n        // \u76f4\u63a5\u5bf9\u6211\u4eec\u5411\u4e0b\u8d70\u7684\u7b2c1\u4e2a\u8282\u70b9\uff08\u7b97\u4e0a\u6839\u662f\u7b2c2\u4e2a\uff09\u6253\u6807\u8bb0\u5373\u53ef\u3002\n        if(!tots) vis[rps].insert(stk[2]);\n        return ans;\n    }\n}\n\nstd::pair<ll, int> tp;\nll fin = 0;\n\nint main() {\n    n = read(), k = read();\n    for(int i = 1; i <= n; ++i)\n        a[i] = read()^a[i-1];\n    trie::ins(0, trie::rt[0], 0); // \u6ce8\u610fa[0] = 0\u4e5f\u662f\u524d\u7f00\u548c\u7684\u4e00\u90e8\u5206\n    for(int i = 1; i <= n; ++i)\n        trie::ins(a[i], trie::rt[i], trie::rt[i-1]);\n    \n    for(int i = 1; i <= n; ++i) {\n        ll res = trie::query(a[i], trie::rt[i-1], i);\n        q.push(std::make_pair(res, i));\n    }\n    for(int i = 1; i <= k; ++i) {\n        tp = q.top(); q.pop();\n        fin += tp.first;\n        ll res = trie::query(a[tp.second], trie::rt[tp.second-1], tp.second);\n        if(res != -1) q.push(std::make_pair(res, tp.second)); // \u6ce8\u610f\u5224\u65ad\u53d6\u5b8c\u7684\u60c5\u51b5\n    }\n    printf(\"%lld\", fin);\n    return 0;\n}\n```",
        "postTime": 1555316814,
        "uid": 79017,
        "name": "\u82b1\u91cc\u5fc3\u7231",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "$$\\color{cornflowerblue}{\\mathcal{Treaker}}$$\n## \u53ef\u6301\u4e45\u531601   Trie \u6811  and \u5806\n~~\u7701\u9009\u7684\u60b2\u60e8\u5386\u53f2\u4e0d\u63d0\u4e86~~\n\n\u8fd8\u6709\u6b64\u9898\u6709\u4e9b\u5361\u5e38\u3002\n\n\u8fd9\u9053\u9898\u9898\u9762\u4e2d\u6709\u5f02\u6216\u64cd\u4f5c\uff0c\u4e00\u822c\u90fd\u662f\u548cTrie\u6811\u6709\u5173~~\u611f\u89c9\u90fd\u662f\u7528Trie\u6811\u505a\u7684~~\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u8ba9\u6211\u4eec\u6c42\u524dk\u5927\u7684\u533a\u95f4\uff08\u4e0d\u91cd\u590d\uff09\u5f02\u6216\u548c\u7684\u548c\uff08\u9898\u9762\u8bf4\u7684\u5f88\u6e05\u695a\uff0c\u53ef\u80fd\u53c8\u88ab\u6211\u8bf4\u7cca\u6d82\u4e86\u3002\u3002\u3002\uff09\n\n\u6211\u4eec\u8003\u8651\u6bcf\u6bb5\u533a\u95f4\uff0c\u5fc5\u5b9a\u4f1a\u6709\u4e00\u4e2a\u53f3\u7aef\u70b9~~\u5e9f\u8bdd~~\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6765\u7ef4\u62a4\u4e86\uff08\uff1f\uff1f\uff1f\uff09\u3002\n\n\u6211\u4eec\u518d\u8003\u8651\u4e00\u4e2a\u5806\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u7aef\u70b9\uff0c\u5bf9\u5e94\u7684\u53d6\u51fa\u4e00\u6bb5\u533a\u95f4\u4f7f\u8fd9\u4e2a\u533a\u95f4\u7684\u5f02\u6216\u548c\u662f\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u53f3\u7aef\u70b9\u7684\u6240\u6709\u533a\u95f4\u4e2d\u6700\u5927\u7684\uff0c\u6253\u5305\u6210\uff08\u628a\u4ec0\u4e48\u6253\u5305\u5462\uff1f\uff0c\u4e0b\u9762\u8bb2\uff09\u4e00\u4e2a\u7ed3\u6784\u4f53\u653e\u5165\u5806\u4e2d\u3002\n\n\u628a\u4ec0\u4e48\u6253\u5305\u5462\uff1f\u663e\u7136\u8981\u6709\u5f02\u6216\u548c\u6700\u5927\u503c\uff0c\u6700\u5f00\u59cb\u7684\u53f3\u7aef\u70b9\uff0c\u5728\u54ea\u4e2a\u70b9\u53d6\u5f97\u4e86\u6700\u5927\u503c\uff0c\u53d6\u5f97\u6700\u5927\u503c\u6240\u5728\u70b9\u7684\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e94\u5143\u7ec4\uff0c\u6253\u5305\u6210\u7ed3\u6784\u4f53\u3002\n```cpp\nstruct zz\n{\n\tint t , l , r , pos; unsigned int val;\n\tfriend bool operator < (const zz & a,const zz & b) {return a.val < b.val;}\n};\n```\n\n```cpp\ncnt = query(root[i-1],a[i],31,0);\nq.push((zz){i,1,i,cnt,a[i] ^ a[cnt]});\n```\n\n\u4ece\u5806\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5806\u9876\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u628a\u8fd9\u4e2a\u533a\u95f4\u5206\u88c2\uff0c\u4ece\u6211\u4eec\u53d6\u51fa\u6700\u5927\u503c\u7684\u90a3\u4e2a\u70b9\u518d\u5206\u5c42\u4e24\u6bb5\u533a\u95f4\uff0c\u538b\u5165\u5806\u4e2d\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n#include <queue>\n#define RI register int\nusing namespace std;\nconst int N = 500005;\ninline unsigned int read()\n{\n    unsigned int x = 0 ;  char ch = getchar();\n    while(ch < '0' || ch > '9') { ch = getchar();}\n    while(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n    return x;\n}\nint n , k , cnt;\nunsigned int a[N];\nlong long ans;\nstruct Persistent_Trie\n{\n\tstruct node\n\t{\n\t\tnode *ch[2]; int lt;\n\t\tnode() {ch[0]=ch[1]=NULL;lt = 0;}\n\t}*root[N] , pool[N * 36] , *tail;\n\tPersistent_Trie(){tail = pool;}\n\tvoid build(register node *&p,RI dep)\n\t{\n\t\tp = new (tail ++)node();\n\t\tif(dep < 0)\treturn;\n\t\tbuild(p -> ch[0],dep-1);\n\t}\n\tvoid insert(register node *&p,register node *o,RI i,RI dep)\n\t{\n\t\tp = new (tail ++)node();\n\t\tif(o) *p = *o;\n\t\tif(dep < 0)\treturn (void)(p -> lt = i);\n\t\tregister bool tmp = (a[i] >> dep) & 1;\n\t\tif(tmp)\tinsert(p -> ch[1],o ? o -> ch[1] : NULL,i,dep - 1);\n\t\telse insert(p -> ch[0],o ? o -> ch[0] : NULL,i,dep - 1);\n\t\tif(p -> ch[0]) p -> lt = max(p -> lt,p -> ch[0] -> lt);\n\t\tif(p -> ch[1]) p -> lt = max(p -> lt,p -> ch[1] -> lt);\n\t}\n\tint query(register node *p,register unsigned int x,RI dep,RI limit)\n\t{\n\t\tif(dep < 0)\treturn p -> lt;\n\t\tregister bool tmp = (x >> dep) & 1;\n\t\tif(p -> ch[tmp ^ 1] && p -> ch[tmp ^ 1] -> lt >= limit)\treturn query(p -> ch[tmp ^ 1],x,dep-1,limit);\n\t\treturn query(p -> ch[tmp],x,dep - 1,limit);\n\t}\n\tstruct zz\n\t{\n\t\tint t , l , r , pos; unsigned int val;\n\t\tfriend bool operator < (const zz & a,const zz & b) {return a.val < b.val;}\n\t};\n\tpriority_queue<zz> q;\n\tinline void LOL()\n\t{\n\t\tn = read(); k = read();\n\t\tbuild(root[0],31);\n\t\tRI i;\n\t\tfor(i = 1;i <= n;i ++)\n\t\t{\n\t\t\ta[i] = a[i-1] ^ read();\n\t\t\tinsert(root[i],root[i-1],i,31);\n\t\t\tcnt = query(root[i-1],a[i],31,0);\n\t\t\tq.push((zz){i,1,i,cnt,a[i] ^ a[cnt]});\n\t\t}\n\t\tzz res;\n\t\tfor(i = 1;i <= k;i ++)\n\t\t{\n\t\t\tres = q.top();\n\t\t\tans += (long long)res.val;\n\t\t\tq.pop();\n\t\t\tif(res.pos + 1 < res.r)\n\t\t\t{\n\t\t\t\tcnt = query(root[res.r-1],a[res.t],31,res.pos+1);\n\t\t\t\tq.push((zz){res.t,res.pos+2,res.r,cnt,a[res.t] ^ a[cnt]});\n\t\t\t}\n\t\t\tif(res.l < res.pos + 1)\n\t\t\t{\n\t\t\t\tcnt = query(root[res.pos-1],a[res.t],31,res.l-1);\n\t\t\t\tq.push((zz){res.t,res.l,res.pos,cnt,a[res.t] ^ a[cnt]});\n\t\t\t}\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n}DNF;\nint main()\n{\n\tDNF.LOL();\n\treturn 0;\n}\n\n```\n",
        "postTime": 1569070995,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "~~\u90a3\u4e48\u591a\u53ef\u6301\u4e45\u5316Trie\u770b\u5f97\u4eba\u6655\u6655\u7684~~\n\u6240\u4ee5\u6211\u5c31\u6765\u4e00\u53d1**\u6734\u7d20Trie**\u5427\u3002\n\n\u663e\u7136\u5148\u641e\u4e00\u4e2a\u5f02\u6216\u524d\u7f00\u548c\uff0c\u90a3\u4e48\u95ee\u9898\u53d8\u6210\u4e86\u6c42\u4e00\u4e2a\u5e8f\u5217\u4e24\u4e24\u5f02\u6216\u503c\u524dk\u5927\u7684\u548c\u3002\n**\u76f4\u63a5\u5efaTrie**,\u7136\u540e\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5:\n\n1. \u5f02\u6216\u7ed3\u679c\u5728\u8fd9\u4e00\u4f4d\u4e0a\u662f1\u7684\u6570\u5bf9\u6570sum\u5927\u4e8e\u7b49\u4e8ek\uff0c\u90a3\u4e48\u76f4\u63a5\u4ee4\u8fd9\u4e00\u4f4d\u7b49\u4e8e1\n1. \u5f02\u6216\u7ed3\u679c\u5728\u8fd9\u4e00\u4f4d\u4e0a\u662f0\u7684\u6570\u5bf9\u6570sum\u5c0f\u4e8ek\uff0c\u90a3\u4e48\u8fd9\u4e00\u4f4d\u4e0a\u662f1\u7684\u6570\u5168\u90e8\u88ab\u8ba1\u5165\u7b54\u6848\uff0c\u5269\u4e0b\u7684\u4ee4\u8fd9\u4e00\u4f4d\u662f0\n\n\u5728Trie\u4e0a\u8dd1\u7684\u65f6\u5019\uff0c\u7ef4\u62a4\u4e00\u4e9b\u6570\u5bf9<A,B>\u5c31\u884c\u4e86\n```cpp\n#include<bits/stdc++.h>\n#pragma GCC optimize(3)\n#define pb(a) push_back(a)\n#define mp(a,b) make_pair(a,b)\n#define mem(a,b) memset(a,b,sizeof(a))\n#define N 500005\nusing namespace std;\n\ntypedef unsigned int uint;\ntypedef long long LL;\n\nint n,m,i,j,k,cnt;\nuint a[N];\nstruct node{\n    int s[2],cnt;\n    node(){s[0]=s[1]=cnt=0;}\n} tr[N*32];//\u8fd9\u91cc\u5343\u4e07\u4e0d\u8981\u5fd8\u4e86\u4e5832\n\n#define root 0\nvoid build(int u,uint x,uint t){\n    tr[u].cnt++;\n    bool f=t&x;\n    if (!t) return;\n    if (!tr[u].s[f]){\n        tr[u].s[f]=++cnt;\n        build(cnt,x,t>>1);\n    }\n    else build(tr[u].s[f],x,t>>1);\n}\n\nLL ans=0;\nvector<int> A,B;\nvoid dfs(int dep,int remain,uint now){\n    if (dep==32 || remain==0) {ans+=1ll*now*remain; return;}\n    LL sum1=0;\n    for (int i=0; i<A.size(); i++)\n        sum1+=(1ll*tr[tr[A[i]].s[0]].cnt*tr[tr[B[i]].s[1]].cnt + 1ll*tr[tr[A[i]].s[1]].cnt*tr[tr[B[i]].s[0]].cnt)/((A[i]==B[i])?2:1);\n\n    if (sum1<remain){\n        vector<int> tA=A,tB=B;\n        A.clear(), B.clear();\n        for (int i=0; i<tA.size(); i++)//1\n        {\n            if (tr[tA[i]].s[0] && tr[tB[i]].s[1])\n                A.pb(tr[tA[i]].s[0]), B.pb(tr[tB[i]].s[1]);\n            if (tA[i]==tB[i]) continue;// Warning!\n            if (tr[tA[i]].s[1] && tr[tB[i]].s[0])\n                A.pb(tr[tA[i]].s[1]), B.pb(tr[tB[i]].s[0]);\n        }\n        dfs(dep+1,sum1,now|(1ll<<31-dep));\n\n        A.clear(), B.clear();\n        for (int i=0; i<tA.size(); i++)//0\n        {\n            if (tr[tA[i]].s[1] && tr[tB[i]].s[1])\n                A.pb(tr[tA[i]].s[1]), B.pb(tr[tB[i]].s[1]);\n            if (tr[tA[i]].s[0] && tr[tB[i]].s[0])\n                A.pb(tr[tA[i]].s[0]), B.pb(tr[tB[i]].s[0]);\n        }\n        dfs(dep+1,remain-sum1,now);\n    }\n    else{\n        vector<int> tA=A,tB=B;\n        A.clear(), B.clear();\n        for (int i=0; i<tA.size(); i++)//1\n        {\n            if (tr[tA[i]].s[0] && tr[tB[i]].s[1])\n                A.pb(tr[tA[i]].s[0]), B.pb(tr[tB[i]].s[1]);\n            if (tA[i]==tB[i]) continue;// Warning!\n            if (tr[tA[i]].s[1] && tr[tB[i]].s[0])\n                A.pb(tr[tA[i]].s[1]), B.pb(tr[tB[i]].s[0]);\n        }\n        dfs(dep+1,remain,now|(1ll<<31-dep));\n    }\n}\nint main()\n{\n    cin>>n>>k;\n    for (i=1; i<=n; i++)\n        cin>>a[i], a[i]^=a[i-1];\n    for (i=0; i<=n; i++)\n        build(root,a[i],1ll<<31);\n\n    tr[0].cnt=0;\n    A.pb(0),B.pb(0), dfs(0,k,0);\n    cout<<ans;\n}\n```\n",
        "postTime": 1554641742,
        "uid": 4459,
        "name": "tzytzytjx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "\u597d\u5427\uff0c\u5176\u5b9e\u662f\u4e2a\u5957\u8def\u9898\u3002\n\n\u8fd9\u79cd\u9009k\u5927\u7684\uff0c\u6709\u4e00\u79cd\u5957\u8def\u5c31\u662f\u7528\u5806\u7ef4\u62a4\uff0c\u8fde\u7eed\u53d6k\u4e2a\uff0c\u4e00\u8fb9\u53d6\u4e00\u8fb9\u52a0\u5165\u65b0\u7684\u3002\u8ddf\u90a3\u4e2a\u7ed9\u4f60\u51e0\u4e2a\u6570\u7ec4\u6c42k\u5927\u548c\u7684\u5f88\u50cf\u3002\n\n\u8003\u8651\u66b4\u529b\uff1a\u9996\u5148$s_i$\u4e3a\u5f02\u6216\u524d\u7f00\u548c\u8fd9\u5927\u5bb6\u80af\u5b9a\u90fd\u4f1a\uff0c$O(n^2)$\u679a\u4e3e\u533a\u95f4\uff0c\u52a0\u8fdb\u5806\u91cc\u6216\u8005\u653e\u6570\u7ec4\u91cc\u6700\u540e\u6392\u5e8f\uff0c\u53d6\u524d$k$\u5927\u5373\u53ef\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u4f18\u5316\uff1a\u6211\u4eec\u5728\u679a\u4e3e\u533a\u95f4$[l,r]$\u8fd9\u4e00\u6b65\uff0c\u53ef\u4ee5\u53ea\u679a\u4e3e\u4e00\u4e2a\u53f3\u7aef\u70b9$r$\uff0c\u7136\u540e\u5728$[0,r-1]$\u4e0a\u627e\u5230\u4e00\u4e2a\u4e0e$s_r$\u5f02\u6216\u503c\u6700\u5927\u7684$s_l$\uff0c\u90a3\u4e48$s_l\\ xor\\ s_r$\u5373\u4e3a$[1,r]$\u4e0a\u7684\u6700\u5927\u5f02\u6216\u548c\uff08\u7b2c$1$\u5927\u5f02\u6216\u548c\uff09\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u628a$n$\u4e2a\u524d\u7f00\u6700\u5927\u5f02\u6216\u548c\u52a0\u8fdb\u4e86\u5806\u91cc\u3002\n\n\u7136\u540e\u6211\u4eec\u4ece\u5806\u4e2d\u8fde\u7eed\u53d6$k$\u6b21\uff0c\u5f53\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u9996\u5148\u628a\u5b83\u52a0\u5165\u7b54\u6848\uff0c\u7136\u540e\u5047\u8bbe\u5b83\u662f\u6240\u5728\u524d\u7f00\u7684\u7b2c$rank$\u5927\u5f02\u6216\u548c\uff0c\u6211\u4eec\u53ea\u8981\u67e5\u8be2\u90a3\u4e2a\u524d\u7f00\u7684\u7b2c$rank+1$\u5927\u5f02\u6216\u548c\uff0c\u52a0\u5165\u5806\u91cc\u5373\u53ef\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u6211\u4eec\u9700\u8981\u7528\u5806\u7ef4\u62a4\u4e09\u5143\u7ec4$(pos, rank, so)$\uff0c\u5206\u522b\u8868\u793a\u6240\u5728\u524d\u7f00\uff0c\u7b2c\u51e0\u5927\uff0c\u5f02\u6216\u548c\u662f\u591a\u5c11\u3002\n\n\u5269\u4e0b\u7684\u95ee\u9898\u5c31\u662f\uff0c\u67e5\u8be2\u4e00\u4e2a\u524d\u7f00\u7684$K$\u5927\u5f02\u6216\u548c\uff0c\u8fd9\u5c31\u662f\u53ef\u6301\u4e45\u531601Trie\u6a21\u677f\u9898\u4e86\u3002\n\n**\u4ee3\u7801\u5343\u4e07\u6761\uff0clong long\u7b2c\u4e00\u6761\u3002\u5fd8\u8bb0\u5f00long long\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002**\n\n```cpp\n#include <cctype>\n#include <cstdio>\n#include <climits>\n#include <algorithm>\n#include <queue>\n#include <vector>\n\ntemplate <typename T> inline void read(T& x) {\n    int f = 0, c = getchar(); x = 0;\n    while (!isdigit(c)) f |= c == '-', c = getchar();\n    while (isdigit(c)) x = x * 10 + c - 48, c = getchar();\n    if (f) x = -x;\n}\ntemplate <typename T, typename... Args>\ninline void read(T& x, Args&... args) {\n    read(x); read(args...); \n}\ntemplate <typename T> void write(T x) {\n    if (x < 0) x = -x, putchar('-');\n    if (x > 9) write(x / 10);\n    putchar(x % 10 + 48);\n}\ntemplate <typename T> inline void writeln(T x) { write(x); puts(\"\"); }\ntemplate <typename T> inline bool chkmin(T& x, const T& y) { return y < x ? (x = y, true) : false; }\ntemplate <typename T> inline bool chkmax(T& x, const T& y) { return x < y ? (x = y, true) : false; }\n\ntypedef long long LL;\n\nconst int maxn = 5e5 + 207;\n\nstruct HeapNode {\n    int pos, rk;\n    LL so;\n    HeapNode() : pos(0), rk(0), so(0) {}\n    HeapNode(int a, int b, LL c) : pos(a), rk(b), so(c) {}\n};\ninline bool operator<(const HeapNode &lhs, const HeapNode &rhs) {\n    return lhs.so < rhs.so;\n}\nstd::priority_queue<HeapNode> heap;\nLL a[maxn], s[maxn];\nint n, K;\n\nstruct Node {\n    int ch[2], sum;\n};\nNode T[maxn << 6];\nint root[maxn], tot;\n\nvoid insert(int &o, LL x, int i) {\n    T[++tot] = T[o]; ++T[o = tot].sum;\n    if (i < 0) return;\n    int j = (x >> i) & 1;\n    insert(T[o].ch[j], x, i - 1);\n}\nLL query(int o, LL x, int k, int i) {\n    if (i < 0) return 0;\n    int j = (x >> i) & 1;\n    int s = T[T[o].ch[j ^ 1]].sum;\n    if (k <= s) return (1ll << i) + query(T[o].ch[j ^ 1], x, k, i - 1);\n    else return query(T[o].ch[j], x, k - s, i - 1);\n}\n\nint main() {\n    read(n, K);\n    for (int i = 1; i <= n; ++i) {\n        read(a[i]);\n        s[i] = s[i - 1] ^ a[i];\n        insert(root[i] = root[i - 1], s[i - 1], 32);\n    }\n    for (int i = 1; i <= n; ++i)\n        heap.emplace(i, 1, query(root[i], s[i], 1, 32));\n    LL ans = 0;\n    for (int i = 1; i <= K; ++i) {\n        auto one = heap.top(); heap.pop();\n        ans += one.so;\n        if (one.rk <= one.pos)\n            heap.emplace(one.pos, one.rk + 1, query(root[one.pos], s[one.pos], one.rk + 1, 32));\n    }\n    writeln(ans);\n    return 0;\n}\n```\n\n\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u6211\u5199\u7684\u8fd9\u4e48\u6162\uff0c\u5f00\u4e86O2\u624d\u8fc7\u3002\u5e78\u597d\u6bd4\u8d5b\u7684\u65f6\u5019\u7684\u786e\u5f00O2\u3002\u53ef\u662f\u8fd9\u8ddf\u6211\u6709\u4ec0\u4e48\u5173\u7cfb\u5462...\u6211\u53c8\u6ca1\u5728\u8003\u573a\u4e0a\u505a\u51fa\u6765\n\n\u6570\u7ec4\u4e0d\u8981\u5f00\u5c0f",
        "postTime": 1554561900,
        "uid": 72071,
        "name": "GKxx",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "~~\u4e3a\u4e86\u4f30\u503c~~ \u4e0d\u4e3a\u4e86\u7ed9\u793e\u533a\u505a\u8d21\u732e\u3002\n\n\u8fd9\u9053\u9898\u5efa\u6a21\u8fd8\u662f\u5f88\u7b80\u5355\u7684\u3002\n\u95ee\u9898\u5f88\u5bb9\u6613\u88ab\u6211\u4eec\u5229\u7528\u524d\u7f00\u548c\u5f02\u6216\u8f6c\u6362\u6210\u533a\u95f4\u5185\u4e24\u4e2a\u6570\u5b57\u7684\u5f02\u6216\u6700\u5927\u503c\u3002\n\n\u56e0\u4e3a\u5f02\u6216\u5177\u6709\u81ea\u53cd\u6027\uff1aA^A=0;\n\n\u5148\u8003\u8651\u5982\u4f55\u6c42\u7684\u6700\u5927\u503c\uff1f\u663e\u7136\u6211\u4eec\u4e00\u8fb9\u5efatrie\u6811\u4e00\u8fb9\u8fdb\u884c\u6811\u4e0a\u67e5\u8be2\u5c31\u80fd\u6c42\u7684\u6700\u5927\u503c\u5c06\u5176\u4e8c\u8fdb\u5236\u62c6\u5206\u540e\u4e00\u76f4\u8dd1\u53cd\u5411\u8fb9\u5373\u53ef\u3002\n\n\u5efatrie\u6811\u5f88\u7b80\u5355\u6211\u4eec\u63a5\u4e0b\u6765\u662f\u8981\u6c42\u524dk\u5927\u503c\u8fd9\u4e2a\u6709\u70b9\u4e0d\u597d\u641e\uff0c\u56e0\u4e3a\u6211\u4eec\u6c42\u5b8c\u7b2c\u4e00\u5927\uff0c\u7b2c\u4e8c\u5927\u5e76\u4e0d\u662f\u90a3\u4e48\u5bb9\u6613\u627e\uff0c\u7c7b\u578b\u662f\u6709\u4e32\u901a\u6027\u7684\u5982\u679c\u5199\u8fc7\u80cc\u5305\u7684\u7b2ck\u4f18\u89e3\u7684\u8bdd\u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u5f88\u597d\u89e3\u51b3\u3002\u7b2c\u4e8c\u5927\u5176\u5b9e\u662f \u7531\u5176\u4ed6\u6570\u5b57\u7684\u5339\u914d \u6216\u8005\u7b2c\u4e00\u5927\u7684\u90a3\u4e2a\u6570\u5b57\u53c8\u627e\u4e86\u4e00\u4e2a\u3002\n\n\u8fd9\u4e2a\u5e76\u4e0d\u662f\u5f88\u5bb9\u6613\u7ef4\u62a4\u7684 \u4f46\u662f\u5168\u653e\u5230\u5806\u91cc\u5c31\u5f88\u5bb9\u6613\u89e3\u51b3\u4e86\u3002\n\n\u81f3\u4e8e\u4e0d\u65ad\u67e5\u627e \u7b2ck\u5927\u8fd9\u4e2a\u64cd\u4f5c\u6709\u70b9\u96be\u5ea6 \u6211\u4eec\u6bcf\u4e2a\u6570\u5b57\u53ea\u80fd\u548c\u524d\u9762\u7684\u4e00\u4e9b\u6570\u5b57\u8fdb\u884c\u5339\u914d\u3002\u6240\u4ee5 \u5177\u6709\u533a\u95f4\u6027\u4e14\u9700\u8981\u6c42\u7b2ck\u5927 \u663e\u7136 \u4e3b\u5e2d\u6811\u554a\u3002\n\n\u7ed3\u5408trie\u6811\u5c31\u662f\u53ef\u6301\u4e45\u5316trie\u4e86\u3002\u81f3\u4e8e\u67e5\u627e\u7b2ck\u7684\u7684\u4e00\u4e9b\u7ec6\u8282\u6211\u8ba4\u4e3a\u6709\u4e09\u70b9\uff1a\n\n1  \u6ce8\u610fa[i]\u672c\u8eab\u8981\u653e\u5230\u5806\u91cc\u6216\u8005\u591a\u5efa\u4e00\u4e2a\u5168\u662f0\u7684\u6811root[0]\n\n2  \u6ce8\u610f\u5f53\u4e00\u4e2a\u503c\u627e\u4e0d\u5230\u8fd8\u80fd\u7528\u7684\u503c\u7684\u8bdd\u8bb0\u5f97\u7279\u5224\uff08\u5f88\u96be\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff09\n\n3  \u6ce8\u610f\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u53ef\u7b80\u5316\u7684\u4e1c\u897f\u8981\u7b80\u5316 \u6ce8\u610f\u5361\u5e38 \u80fd\u5f00o2\u7701\u9009\u90fd\u5f00o2\u4e86\uff01\n\n\n\u4e0b\u9762\u662f\u6211\u7684code\uff1a\n```cpp\n// luogu-judger-enable-o2\n//#include<bits/stdc++.h>\n#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<ctime>\n#include<cstdlib>\n#include<cctype>\n#include<queue>\n#include<deque>\n#include<stack>\n#include<algorithm>\n#include<vector>\n#include<utility>\n#include<set>\n#include<bitset>\n#include<map>\n#include<cmath>\n#define ll long long\n#define R register\nusing namespace std;\nchar buf[1<<16],*fs,*ft;\ninline char getc()\n{\n    return (fs==ft&&(ft=(fs=buf)+fread(buf,1,1<<15,stdin),fs==ft))?0:*fs++;\n}\ninline ll read()\n{\n    ll x=0,f=1;char ch=getc();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getc();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getc();}\n    return x*f;\n}\ninline void put(ll x)\n{\n    x<0?putchar('-'),x=-x:0;\n    ll num=0;char ch[70];\n    while(x)ch[++num]=x%10+'0',x/=10;\n    num==0?putchar('0'):0;\n    while(num)putchar(ch[num--]);\n    putchar('\\n');return;\n}\nconst ll MAXN=500010,maxn=35;\nll n,k,ans,cnt,sum;\nll w[MAXN];\nint root[MAXN],rank[MAXN];\nint trie[MAXN*maxn][2],sz[MAXN*maxn];\npriority_queue<pair<ll,int> > b;\ninline void insert(int &now,int last,int depth,ll x)\n{\n    if(!now)now=++cnt;\n    if(depth==0)\n    {\n        sz[now]++;\n        sz[now]+=sz[last];\n        return;\n    }\n    int tn=(x>>(depth-1))&1;\n    trie[now][tn^1]=trie[last][tn^1];\n    insert(trie[now][tn],trie[last][tn],depth-1,x);\n    sz[now]=sz[trie[now][tn]]+sz[trie[now][tn^1]];\n    return;\n}\ninline void find(int now,int k,int depth,ll x)\n{\n    //if((!trie[now][0])&&(!trie[now][1]))return;\n    if(depth==0)return;\n    ll tn=(x>>(depth-1))&1;\n    if(sz[trie[now][tn^1]]>=k)\n    {\n        ans=(ans<<1)|1;\n        find(trie[now][tn^1],k,depth-1,x);\n    }\n    else \n    {\n        ans=ans<<1;\n        find(trie[now][tn],k-sz[trie[now][tn^1]],depth-1,x);\n    }\n    return;\n}\nint main()\n{\n    //freopen(\"1.in\",\"r\",stdin);\n    n=read();k=read();\n    for(R int i=1;i<=n;++i)\n    {\n        ll x=read();\n        rank[i]=1;\n        w[i]=(x^w[i-1]);\n    }\n    insert(root[0],root[0],33,0);\n    for(R int i=1;i<=n;++i)insert(root[i],root[i-1],33,w[i]);\n    for(R int i=1;i<=n;++i)\n    {\n        ans=0;\n        find(root[i],rank[i],33,w[i]);\n        ++rank[i];\n        b.push(make_pair(ans,i));\n        //put(ans);\n    }\n    for(R int i=1;i<=k;++i)\n    {\n        int l=b.top().second;\n        ll z=b.top().first;\n        b.pop();sum+=z;//put(z);\n        ans=0;\n        find(root[l],rank[l],33,w[l]);\n        ++rank[l];\n        b.push(make_pair(ans,l));\n    }\n    put(sum);\n    return 0;\n}\n\n```\n\u6211\u89c9\u5f97\u5f88\u6e05\u6670\u4e86 \u5982\u679c\u6709\u9519\u8bef\u8bf7\u6307\u6b63,\u87f9\u87f9\u3002",
        "postTime": 1555304484,
        "uid": 59688,
        "name": "chdy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u8003\u573a**\u7384\u5b66**\u505a\u6cd5\u3002\n\n\u9996\u5148\u6211\u4eec~~\u53ef\u4ee5\u770b\u51fa\u8fd9\u9898\u53ef\u6301\u4e45\u531601trie\u53ef\u505a~~\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u7b54\u6848\u4e2d\u7684\u6bcf\u4e2a\u533a\u95f4\uff0c~~\u5b83\u5fc5\u7136\u6709\u4e00\u4e2a\u53f3\u7aef\u70b9\uff08\u5e9f\u8bdd\uff09~~\n\n\u65e2\u7136\u6bcf\u4e2a\u7b54\u6848\u6709\u4e00\u4e2a\u53f3\u7aef\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u80fd\u5bf9\u6240\u6709\u53ef\u884c\u7684\u53f3\u7aef\u70b9\uff0c\u5f97\u5230\u53ef\u884c\u7684\u6700\u5927\u533a\u95f4\u5f02\u6216\u548c\u5c31\u884c\u4e86\u3002\n\n\u628a\u5e8f\u5217\u5f04\u6210\u524d\u7f00\u5f02\u6216\u548c\uff0c\u5f53trie\u6811\u6df1\u5ea6\u4e3ad\u65f6\uff0c\u8fd9\u53ef\u4ee5O(nd)\u641e\u51fa\u6765\uff0cO(nlogn)\u585e\u8fdb\u5806\u91cc\u3002\n\n\u5f53\u6211\u4eec\u5f39\u51fa\u4e00\u4e2a\u533a\u95f4\u548c\u65f6\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u53f3\u7aef\u70b9\uff0c\u5b83\u7684\u7b54\u6848\u9700\u8981\u66f4\u65b0\u6210\u6b21\u5927\u7684\u533a\u95f4\u5f02\u6216\u548c\u3002\n\n\u8fd9\u5f88\u660e\u663e\u53ef\u4ee5\u901a\u8fc7trie\u6811\u8282\u70b9\u4e0a\u8bb0\u5f55size\uff0c\u76f4\u63a5\u6c42\u7b2ck\u5927\u641e\u5b9a\u3002\n\n~~\u4f46\u662f\u5176\u5b9e\u53ef\u4ee5\u4e0d\u8fd9\u4e48\u505a\u3002~~\n\n\u5f53\u5728trie\u6811\u4e0a\u627e\u6700\u5927\u5f02\u6216\u503c\u65f6\uff0c\u5176\u5b9e\u5c31\u662f\u8d2a\u5fc3\u5728\u641c\u7d22\u6811\u4e0a\u627e\u5230\u4e00\u6761\u94fe\u7684\u8fc7\u7a0b\u3002\n\n\u4f46\u662f\u8fd9\u91cc\u7684\u8d2a\u5fc3\u548c\u4e00\u822c\u7684\u8d2a\u5fc3\u4e0d\u540c\uff0c\u5f88\u660e\u663e\uff0c\u6bcf\u5c42\u53ea\u6709\u4e24\u4e2a\u51b3\u7b56\uff0c\u5e76\u4e14\u5728\u6811\u6df1\u5ea6\u8f83\u6df1\u5904\u8f6c\u5411\uff0c\u6bd4\u66f4\u6d45\u5904\u66f4\u4f18\u3002\n\n~~\u8fd9\u4e0d\u5c31\u662fdfs\u7684\u56de\u6eaf\u5417~~\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2an * d\u7684\u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u5806\u6808\u3002\u6bcf\u5728\u5806\u4e2d\u53d6\u51fa\u4e00\u4e2a\u533a\u95f4\u5f02\u6216\u548c\uff0c\u6211\u4eec\u5c31\u5bf9\u5bf9\u5e94\u7684\u53f3\u7aef\u70b9\u56de\u6eaf\u3002\n\n\u4f46\u662f\u770b\u8fd9\u4e2a\u6570\u636e\uff1a3 2 2 ...\n\n\u5b83\u7684\u5f02\u6216\u524d\u7f00\u548c\u662f\uff1a3 1 3 ...\n\n\u8fd9\u4e2a3\uff0c\u5728\u5f02\u6216\u524d\u7f00\u548c\u91cc\u51fa\u73b0\u4e86\u4e0d\u6b62\u4e00\u6b21\uff0c\u4f46\u5bf9\u4e8etrie\u6811\uff0c\u5b83\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u5982\u679c\u5bf9\u4e8e\u67d0\u4e2a\u53f3\u7aef\u70b9\uff0c3\u9700\u8981\u5bf9\u7b54\u6848\u63d0\u4f9b\u4e0d\u6b62\u4e00\u6b21\u7684\u8d21\u732e\uff0c\u559c\u63d0Wa\u3002\uff08~~\u5927\u6837\u4f8b\u90fd\u8fc7\u4e0d\u53bb\u4f46\u662f\u53ef\u4ee580\u5206\uff09~~\n\n~~\u597d\u529e\uff0c\u7ef4\u62a4\u8ba1\u6570\u5668~~\n\n### MLE\n\n\u4e3a\u5565\u4f1amle\u5462\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u505a\u6cd5\u9700\u8981\u4fdd\u7559\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u7aef\u70b9\uff0c\u53d6\u7b54\u6848\u65f6trie\u6811\u4e0a\u8d70\u7684\u8def\u5f84\u3002\u7b97\u4e0a\u5806\u6808\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u5f00\u4e861\u9897\u534a\u53ef\u6301\u4e45\u5316trie\u3002\n\n\u800c\u4e14\u8fd8\u8981\u8bb0\u5f55\u8def\u5f84\u4e0a\u6bcf\u4e2a\u8282\u70b9\u8d70\u8fc7\u65b9\u5411\uff0c\u53c8\u662f\u4e00\u4e2a2nd\u5927\u5c0f\u7684bool\u6570\u7ec4\u3002\n\n\u5982\u679c\u7ed9trie\u6811\u7ef4\u62a4\u8ba1\u6570\u5668\uff0c\u90a3\u4e48\u5185\u5b58\u53c8\u4f1a\u589e\u52a04 * n * d/1024/1024\u2248123MB\u3002\u52a0\u4e0a\u4e4b\u524d\u90a3\u4e9b\u4e71\u4e03\u516b\u7cdf\u7684\u4e1c\u897f\u548c\u7cfb\u7edf\u6808\uff0c\u5185\u5b58\u5341\u5206\u7206\u70b8\uff0c~~1G\u521a\u597d\u4e0d\u591f\u3002~~\n\n~~\u51c9\u51c9\uff1f~~    ~~\u4e0d\uff0c\u5f3a\u884c\u7eed\u547d\uff01~~\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u505a\u6cd5\u5e76\u4e0d\u9700\u8981\u7ef4\u62a4\u8282\u70b9\u7684\u5b50\u6811size\uff0c\u53ea\u9700\u8981\u5bf9\u53f6\u5b50\u7ed3\u70b9\u7ef4\u62a4\u8ba1\u6570\u5668\uff0c\u800c\u53f6\u5b50\u8282\u70b9\u6ca1\u6709\u5de6\u53f3\u513f\u5b50\uff0c\u8fd9\u4e0d\u662f\u660e\u663e\u53ef\u4ee5 \u4e00**var**\u591a\u7528\u3002\n\n\u5982\u679c\u662f\u6570\u7ec4\u5199\u7684trie\u6811\uff0c\u90a3\u4e48\u9898\u5df2\u7ecf\u505a\u5b8c\u4e86\u3002\n\n~~\u6307\u9488\u53ea\u80fd\u51c9\u51c9\uff1f~~ ~~\u5176\u5b9e\u8fd8\u80fd\u518d\u7eed\u3002~~\n\n\u867d\u7136\u5728c++\uff08\u6216\u8005\u8bf4oi\u7248c++\uff09\u4e2d\uff0c\u53d8\u91cf\u662f\u6709\u7c7b\u578b\u7684\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u6709\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff01\u53cd\u6b63\u90fd\u662f\u4e00\u6bb5\u5185\u5b58\uff0c\u800c\u4e14\u6307\u9488\u4fdd\u5b58\u7684\u4e1c\u897f\u672c\u8d28\u4e0a\u5c31\u662f\u4e2a\u4f5c\u4e3a\u504f\u79fb\u91cf\u7684\u6574\u6570\uff0c\u600e\u4e48\u4e0d\u80fd\u5f53\u8ba1\u6570\u5668\uff1f\n\n(int)p->son[0]=1;//ce\n\n\u8c8c\u4f3c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u8fd4\u56de\u7684\u662f\u5e38\u91cf\uff0c\u4e0d\u80fd\u505a\u5de6\u503c\u3002~~\u6240\u4ee5\u8fd8\u662f\u51c9\u51c9\uff1f~~\n\n\u8fd9\u4e2a\u4e1c\u897f\u5176\u5b9e\u662f\u53ef\u4ee5\u7ed5\u8fc7\u53bb\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5199\u6210\u8fd9\u6837* (int*)(&p->son[0])=1;\n\n\u8fd9\u6837(int*)(&p->son[0])\u662f\u4e00\u4e2a\u6307\u5411\u53d8\u91cf\u7684\u5e38\u91cf\u6307\u9488\uff0c\u6307\u5411\u7684\u53d8\u91cf\u662f(p->son[0])\uff08\u5f53\u505aint\u5904\u7406\uff09\uff0c\u8fd9\u4e0d\u5c31\u53ef\u4ee5\u505a\u4fee\u6539\u4e86\u5417\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5 ~~\u5199\u51fa\u6765ac\u4ee3\u7801~~ \u5f3a\u884c\u7eed\u547d80\u5206\u4ee3\u7801\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u8003\u8651trie\u6811\u6df1\u5ea6\u5e94\u8be5\u662fO(nd+mlogn+(m-n)d),\u672c\u9898d=64.\n\n\u8dd1\u7684\u5947\u6162\uff0c\u4ea4\u4e4b\u524d\u6216\u8bb8\u9700\u8981\u6d17\u628a\u8138\u3002\n\n```cpp\n// luogu-judger-enable-o2\n//01trie\n#include <cstdio>\n#include <queue>\n#include <algorithm>\nusing namespace std;\n#define reg register\ntypedef long long vt;\nconst int kmaxn = 500000 + 5;\nconst int kmaxd = 65;//64//<< 0-63\nconst int kmaxs = 62 * 500000;\nstruct node\n{\n    node* son[2]={nullptr,nullptr};\n};\nnode mempool[kmaxs];\nint mpt;\nnode* root[kmaxn];\nnode* stk[kmaxn][kmaxd];\nbool hsh[kmaxn][kmaxd][2];\nshort st[kmaxn];\nint n, k;\nvt arr[kmaxn];\ninline node* alloc_node()\n{\n    return mpt<kmaxs ? &mempool[mpt++] : new node;\n}\nvoid insert(node* lp, node*& p, vt v, int pos = 62)\n{\n    p = alloc_node();\n    if (lp)*p = *lp;\n    if (pos<0) {\n        *(int*)(&(p->son[0])) = *(int*)(&(p->son[0]))+1;\n        //*(int*)(&p->son[0])=1;\n        //    \tcout<<(int)p->son[0]<<endl;\n        return;\n    }\n    bool b = (v)&(((vt)1) << pos);\n    insert((lp ? lp->son[b] : nullptr), p->son[b], v, pos - 1);\n}\nvt init(node* p, vt v, int num, int pos = 62)\n{\n    stk[num][++st[num]] = p;\n    if (pos<0)return 0;\n    bool b = !((v)&(((vt)1) << pos));\n    if (p->son[b])\n    {\n        hsh[num][pos][b] = true;\n        return (((vt)1) << pos) + init(p->son[b], v, num, pos - 1);\n    }\n    else {\n        hsh[num][pos][!b] = true;\n        return init(p->son[!b], v, num, pos - 1);\n    }\n}\n//priority_queue<pair<vt,int>> q;\nstruct unit {\n    vt v;\n    int cnt, pos;\n    unit(vt _v = 0, int c = 0, int p = 0) :v(_v), cnt(c), pos(p) {\n    };\n    inline const bool operator<(const unit& u)const {\n        return v<u.v;\n    }\n};\n/*class pq{\npublic:\nunit u[kmaxn];\nint len=0;\ninline void push(const unit& v)\n{\nu[len++]=v;\npush_heap(u,u+len);\n}\ninline unit pop()\n{\npop_heap(u,u+len);\nreturn u[--len];\n}\n}q;*/\npriority_queue<unit> q;\nint dfs(int pos, vt v, vt& ans)\n{\n    short& tail = st[pos];\n    reg bool dir = false;\n    reg bool b = false;\n    reg int dp = 0;\n    while (tail>1)\n    {\n        dir = (stk[pos][tail - 1]->son[1] == stk[pos][tail]);\n        dp = 63 - (--tail);\n        b = (v)&(((vt)1) << (dp));\n        if (b != dir)\n            ans -= (((vt)1) << (dp));\n        dir = !dir;\n        if (!hsh[pos][dp][dir] && stk[pos][tail]->son[dir])//find\n        {\n            break;\n        }\n        hsh[pos][dp][0] = hsh[pos][dp][1] = 0;\n    }\n    while (tail<64)//9223372032559812379\n    {\n        dp = 63 - tail;\n        dir = !((v)&(((vt)1) << dp));\n        if (stk[pos][tail]->son[dir] && !hsh[pos][dp][dir])//have and can turn\n        {\n            ans += (((vt)1) << (dp));\n        }\n        else\n        {\n            dir = !dir;\n        }\n        hsh[pos][dp][dir] = true;\n        stk[pos][tail + 1] = stk[pos][tail]->son[dir];\n        ++tail;\n    }\n    return *(int*)(&(stk[pos][tail]->son[0]));\n}\ninline void solve()\n{\n    unsigned long long ans = 0;\n    reg int pos = 0;\n    reg int c = 0;\n    vt t = -1;\n    unit temp;\n    while (k)\n    {\n//\t\tprintf(\"k %d\\n\", k);\n        //temp=q.pop();\n        temp = q.top();\n        q.pop();\n        t = temp.v;\n        c = min(temp.cnt, k);\n        k -= c;\n        pos = temp.pos;\n        ans += t*c;\n        c = dfs(pos, arr[pos], t);\n        if (t >= 0)\n            q.push(unit(t, c, pos));\n        t = -1;\n    }\n    printf(\"%lld\\n\", ans);\n}\nint main()\n{\n//\tfreopen(\"xor19.in\", \"r\", stdin);\n    scanf(\"%d%d\", &n, &k);\n//\tprintf(\"%d\t%d\\n\", n, k);\n    insert(nullptr, root[0], 0);\n    vt t=0;\n    for (reg int i = 1; i <= n; ++i)\n    {\n        //cin>>arr[i];\n        scanf(\"%lld\", &arr[i]);\n        arr[i] ^= arr[i - 1];\n        insert(root[i - 1], root[i], arr[i]);\n        t = init(root[i], arr[i], i);\n//\t\tprintf(\"%d\tcnt\t%d\\n\", i, *(int*)(void*)(&(stk[i][64]->son[0])));\n        q.push(unit(t, *(int*)(&(stk[i][64]->son[0])), i));\n    }\n    solve();\n//\twhile (1);\n    return 0;\n}\n```\n\n\n~~\u5e78\u597d\u8003\u573a\u4e0a\u6b7b\u4e5f\u6ca1\u60f3\u51fa\u6765\u9700\u8981\u7ef4\u62a4\u8ba1\u6570\u5668\uff0c\u5426\u5219MLE 80\u53d860\u5c31\u5f88\u60e8\u4e86\uff0880\u53d80\u66f4\u60e8\uff09~~",
        "postTime": 1554729281,
        "uid": 56184,
        "name": "_\u8679_",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "\u6765\u4e2a\u590d\u6742\u5ea6\u5047\u5047\u7684$O(n\\log^2 n+k)$\u7b97\u6cd5\u3002\n\n\u9996\u5148\u8003\u8651\u524d\u7f00\u5f02\u6216\u548c\uff0c\u8f6c\u5316\u4e3a\u9009$k$\u5bf9\u6570\u4f7f\u5f97\u5f02\u6216\u548c\u7684\u548c\u6700\u5927\u3002\n\n\u628a\u6570\u585e\u8fdbTrie\u91cc\uff0c\u6bcf\u4e2a\u8282\u70b9\u5b58\u8fd9\u4e2a\u8282\u70b9\u5305\u542b\u7684\u6240\u6709\u6570\uff08\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\uff09\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u4e00\u5c42\u4e00\u5c42\u904d\u5386Trie\u6811\u7684\u8282\u70b9\uff0c\u540c\u65f6\u786e\u5b9a\u51fa\u7b2c$k$\u5927\u7684\u5f02\u6216\u548c\u662f\u591a\u5c11\u3002\n\n\u5047\u8bbe\u6211\u4eec\u8003\u8651\u5230\u7b2c$i$\u4f4d\uff0c\u6211\u4eec\u626b\u4e00\u904dTrie\u6570\u4e0a\u8fd9\u4e00\u5c42\uff08\u5b58\u5728\uff09\u7684\u8282\u70b9\uff0c\u7136\u540e\u5c3d\u53ef\u80fd\u8d2a\u5fc3\u5730\u8ba9\u8fd9\u4e00\u4f4d\u4e3a1\u3002\u5bf9\u4e8e\u72b6\u6001$w$\uff0c\u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u5730\u8ba1\u7b97\u51fa\u6ee1\u8db3$w\\oplus s$\u7684\u524d\u9762\u51e0\u4f4d\u90fd\u6700\u5927\uff0c\u4e14\u7b2c$i$\u4f4d\u4e3a1\u7684\u72b6\u6001$s$\u3002\u7528\u4e58\u6cd5\u539f\u7406\u548c\u52a0\u6cd5\u539f\u7406\u5c31\u53ef\u4ee5\u7b97\u51fa\u6ee1\u8db3\u524d\u9762\u6761\u4ef6\u4e0b\uff0c\u7b2c$i$\u4f4d\u4e3a1\u7684\u65b9\u6848\u6570\u3002\n\n\u5982\u679c\u65b9\u6848\u6570\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u7684$k$\uff0c\u5219\u7b2c$k$\u5927\u7684\u5f02\u6216\u548c\u7684\u7b2c$i$\u4f4d\u5c31\u662f1\uff0c\u7ee7\u7eed\u8003\u8651\u4e0b\u4e00\u5c42\u5373\u53ef\u3002\n\n\u5426\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u7b2c$k$\u5927\u7684\u5f02\u6216\u548c\u7684\u7b2c$i$\u4f4d\u4e3a0\uff0c\u800c\u521a\u521a\u8ba1\u7b97\u7684\u6240\u6709\u65b9\u6848\u90fd\u6392\u5728\u7b2c$k$\u5927\u4e4b\u524d\u3002\u90a3\u4e48\u6211\u4eec\u66b4\u529b\u904d\u5386\u6bcf\u4e2aTrie\u8282\u70b9\u5305\u542b\u7684\u6570\u4ee5\u53ca\u5176\u5bf9\u5e94\u72b6\u6001\u8282\u70b9\u5305\u542b\u7684\u6570\uff0c\u628a\u5b83\u4eec\u7684\u5f02\u6216\u548c\u52a0\u5165\u7b54\u6848\u91cc\u5373\u53ef\u3002\u7136\u540e$k$\u51cf\u53bb\u65b9\u6848\u6570\uff0c\u5f80\u4e0b\u4e00\u5c42\u627e\u3002\n\n\u4e0a\u9762\u7684\u8fc7\u7a0b\u548c\u4e3b\u5e2d\u6811\u627e\u7b2c$k$\u5927\u662f\u7c7b\u4f3c\u7684\u3002\n\n\u627e\u5230\u7b2c$k$\u5927\u540e\uff0c\u628a\u5269\u4e0b\u7684$k'$\u4e2a\u6570\u7684\u8d21\u732e\u52a0\u4e0a\u5373\u53ef\uff08\u6b64\u65f6\u5269\u4e0b\u7684\u4e00\u5b9a\u90fd\u548c\u7b2c$k$\u5927\u503c\u76f8\u540c\uff09\u3002\n\n\u4e00\u4e2a\u95ee\u9898\uff1a\u600e\u4e48\u627e\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u72b6\u6001\u7684\u8282\u70b9\u7684\u7f16\u53f7\uff1f\n\n\u7528vector\u628a\u6bcf\u5c42\u6709\u7684\u8282\u70b9\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u6309\u7167\u72b6\u6001\u5927\u5c0f\u6392\u5e8f\uff0c\u6bcf\u6b21\u627e\u7684\u65f6\u5019\u5728vector\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\n\n\u7531\u4e8eTrie\u6811\u4e0a\u8282\u70b9\u4e2a\u6570\u4e3a$O(n\\log n)$\u7ea7\u522b\uff0c\u6392\u5e8f/\u4e8c\u5206\u67e5\u627e\u53c8\u591a\u4e00\u4e2a$O(\\log n)$\u3002\u6240\u4ee5\u904d\u5386\u590d\u6742\u5ea6$O(n\\log^2 n)$\u3002\n\n~~\u611f\u89c9\u5f88\u4e0d\u53ef\u8fc7\u7684\u6837\u5b50~~\n\n\u4e8b\u5b9e\u4e0a\uff0cTrie\u6811\u7684$O(\\log n)$\u548cvector\u7684$O(\\log n)$\uff0c\u5e38\u6570\u90fd\u6bd4\u8f83\u5c0f\u3002\u5373\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5e38\u6570\u6bd4\u8f83\u4f18\u79c0\u3002\n\n\u52a0\u70b9\u7279\u6280\u5361\u5361\u5e38\u5373\u53ef\u3002\u8c8c\u4f3c\u8dd1\u5f97\u6bd4\u67d0\u4e9b\u4e00\u4e2a$\\log$\u7684\u5927\u5e38\u6570\u7b97\u6cd5\u5feb\uff1f\n\n~~\u5927\u6837\u4f8b\u8dd1\u4e861.9s\u614c\u614c\u614c~~\n\n~~\u539f\u6765\u7528map\u4ee3\u66ffvector\uff0c\u7528vector\u4ee3\u66ff\u524d\u5411\u661f\uff0c\u5927\u6837\u4f8b\u8dd114s~~\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<vector>\n#include<algorithm>\ntypedef unsigned uint;\ntypedef long long LL;\ntypedef unsigned long long ULL;\nconst int N=500005;\nchar ss[(int)1e7],*buf=ss;\ninline void init(){\n    fread(ss,1,(int)1e7-1,stdin);\n    fclose(stdin);\n}\ninline uint readuint(){\n    uint d=0;\n    while(!isdigit(*buf))++buf;\n    while(isdigit(*buf))d=d*10+(*buf++^'0');\n    return d;\n}\nint n,k;\nuint to[N*32],a[N];\nstd::vector<ULL>mp[32];\nint ch[N*32][2],cnt,sz[N*32],head[N*32],nxt[N*32],tt=0;\nLL ans=0;\ninline void insert(uint s){\n    for(int i=31,nw=0;~i;--i){\n        int wg=s>>i&1;\n        if(!ch[nw][wg]){\n            ch[nw][wg]=++cnt;\n            mp[i].push_back((ULL)(s&(-(1u<<i)))<<32|cnt);\n        }\n        nw=ch[nw][wg];++sz[nw];\n        to[++tt]=s,nxt[tt]=head[nw],head[nw]=tt;\n    }\n}\nint main(){\n    init();\n    n=readuint(),k=readuint();insert(0);\n    for(int i=1;i<=n;++i)insert(a[i]=readuint()^a[i-1]);\n    uint nb=0;\n    for(int i=31;~i;--i){\n        mp[i].push_back(18446744073709551615);\n        std::sort(mp[i].begin(),mp[i].end());\n        LL tot=0;\n        for(ULL p:mp[i]){\n            const uint it=p>>32,iit=(nb|(1u<<i))^it;\n            if(p==18446744073709551615||it>=iit)break;\n            auto t=std::lower_bound(mp[i].begin(),mp[i].end(),(ULL)iit<<32);\n            if(*t>>32==iit)tot+=(LL)sz[(int)p]*sz[(int)*t];\n        }\n        if(tot>=k)nb|=1<<i;else{\n            for(auto p:mp[i]){\n                const uint it=p>>32,iit=(nb|(1u<<i))^it;\n                if(p==18446744073709551615||it>=iit)break;\n                auto t=std::lower_bound(mp[i].begin(),mp[i].end(),(ULL)iit<<32);\n                if(*t>>32==iit){\n                    for(int x=head[(int)p];x;x=nxt[x])\n                    for(int y=head[(int)*t];y;y=nxt[y])\n                    ans+=to[x]^to[y];\n                }\n            }\n            k-=tot;\n        }\n    }\n    ans+=(LL)nb*k;\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1554712219,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "# \u9898\u89e3 luogu P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011\n\n*\u65f6\u95f4\uff1a2019.4.20*\n\n## \u9898\u76ee\u63cf\u8ff0\n\n\u5c0f\u7cbd\u662f\u4e00\u4e2a\u559c\u6b22\u5403\u7cbd\u5b50\u7684\u597d\u5b69\u5b50\u3002\u4eca\u5929\u5979\u5728\u5bb6\u91cc\u81ea\u5df1\u505a\u8d77\u4e86\u7cbd\u5b50\u3002\n\n\u5c0f\u7cbd\u9762\u524d\u6709 $n$ \u79cd\u4e92\u4e0d\u76f8\u540c\u7684\u7cbd\u5b50\u9985\u513f\uff0c\u5c0f\u7cbd\u5c06\u5b83\u4eec\u6446\u653e\u4e3a\u4e86\u4e00\u6392\uff0c\u5e76\u4ece\u5de6\u81f3\u53f3\u7f16\u53f7\u4e3a $1$ \u5230 $n$ \u3002\u7b2c $i$ \u79cd\u9985\u513f\u5177\u6709\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u7684\u5c5e\u6027\u503c $a_i$ \u3002\u6bcf\u79cd\u9985\u513f\u7684\u6570\u91cf\u90fd\u8db3\u591f\u591a\uff0c\u5373\u5c0f\u7cbd\u4e0d\u4f1a\u56e0\u4e3a\u7f3a\u5c11\u539f\u6599\u800c\u505a\u4e0d\u51fa\u60f3\u8981\u7684\u7cbd\u5b50\u3002\u5c0f\u7cbd\u51c6\u5907\u7528\u8fd9\u4e9b\u9985\u513f\u6765\u505a\u51fa $k$ \u4e2a\u7cbd\u5b50\u3002\n\n\u5c0f\u7cbd\u7684\u505a\u6cd5\u662f\uff1a\u9009\u4e24\u4e2a\u6574\u6570\u6570 $l$, $r$ \uff0c\u6ee1\u8db3 $1 \\leqslant l \\leqslant r \\leqslant n$\uff0c\u5c06\u7f16\u53f7\u5728 $[l, r]$ \u8303\u56f4\u5185\u7684\u6240\u6709\u9985\u513f\u6df7\u5408\u505a\u6210\u4e00\u4e2a\u7cbd\u5b50\uff0c\u6240\u5f97\u7684\u7cbd\u5b50\u7684\u7f8e\u5473\u5ea6\u4e3a\u8fd9\u4e9b\u7cbd\u5b50\u7684\u5c5e\u6027\u503c\u7684**\u5f02\u6216\u548c**\u3002\uff08\u5f02\u6216\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684 xor \u8fd0\u7b97\uff0c\u5373 C/C++ \u4e2d\u7684 `\u02c6` \u8fd0\u7b97\u7b26\u6216 Pascal \u4e2d\u7684 `xor` \u8fd0\u7b97\u7b26\uff09\n\n\u5c0f\u7cbd\u60f3\u54c1\u5c1d\u4e0d\u540c\u53e3\u5473\u7684\u7cbd\u5b50\uff0c\u56e0\u6b64\u5b83\u4e0d\u5e0c\u671b\u7528\u540c\u6837\u7684\u9985\u513f\u7684\u96c6\u5408\u505a\u51fa\u4e00\u4e2a\u4ee5\u4e0a\u7684 \u7cbd\u5b50\u3002\n\n\u5c0f\u7cbd\u5e0c\u671b\u5979\u505a\u51fa\u7684\u6240\u6709\u7cbd\u5b50\u7684\u7f8e\u5473\u5ea6\u4e4b\u548c\u6700\u5927\u3002\u8bf7\u4f60\u5e2e\u5979\u6c42\u51fa\u8fd9\u4e2a\u503c\u5427\uff01\n\n## \u5206\u6790\n\n***\u6ce8\u610f\uff1a\u4e0b\u6587\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5747\u7528 $m$ \u4ee3\u66ff\u4e86\u539f\u9898\u4e2d\u7684 $k$***\n\n\u4f5c\u4e3a\u5341\u4e8c\u7701\u8054\u8003\u7684\u539f\u9898\uff0c\u8fd9\u9898\u4e5f\u5e94\u8be5\u7b97\u662f\u7b80\u5355\u9898\u4e86\u5427QwQ......\n\n\u9898\u76ee\u8981\u6c42\u524d$m$\u5927\u7684\u5f02\u6216\u90e8\u5206\u548c\u603b\u548c\uff0c\u5148\u9884\u5904\u7406\u51fa\u524d\u7f00\u5f02\u6216\u548c$sum[i]$\uff0c\u95ee\u9898\u53d8\u6210\u6c42\u524d$m$\u5927\u7684\u5f02\u6216\u503c\u5bf9\u603b\u548c\u3002\n\n\u5f02\u6216\uff1f\u5f53\u7136\u662f\u752801-Trie\u5566\uff01\n\n## 01-Trie\uff08\u5927\u4f6c\u8df3\u8fc7QAQ\uff09\n\n\u5b57\u5178\u6811\uff08Trie\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u5b58\u50a8\u5b57\u7b26\u4e32\u7684\u6570\u636e\u7ed3\u6784\uff0c\u9650\u4e8e\u7bc7\u5e45\u4fbf\u4e0d\u5728\u6b64\u8d58\u8ff0\u3002\u6211\u4eec\u53ea\u8003\u8651Trie\u7684\u4e00\u4e2a\u53d8\u79cd\uff1a**01-Trie**\u3002\n\n\u5982\u679c\u6211\u4eec\u8981\u7ef4\u62a4\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301**\u5728$\\bf {O(log\\ n)}$\u5185\u63d2\u5165\u6574\u6570**\u3001**\u67e5\u8be2\u6574\u6570\u662f\u5426\u5b58\u5728**\uff0c\u8981\u600e\u4e48\u505a\uff1f\n\n*   `std::set<int>`\uff01ovo\n\n01-Trie\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b0\u7684\u601d\u8def\uff1a\u5c06\u6574\u6570\u6309\u7167\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u5e76\u4e00\u4e2a\u4e00\u4e2abit\u5b58\u8d77\u6765\u3002\n\n\u8bb2\u7684\u4e0d\u6e05\u695a\uff1f\u8ba9\u6211\u4eec\u770b\u4e00\u770b\u6837\u4f8b\uff1a\n\n![\u6355\u83b7.PNG](https://i.loli.net/2019/04/20/5cbb17659567f.png)\n\n\u770b\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u662f\u5427\uff1f\u5bf9\u5e94\u768401-Trie\u957f\u8fd9\u6837\uff1a\n\n![1.png](https://i.loli.net/2019/04/20/5cbb15a97a0c9.png)\n\n\u8fd9\u68f5Trie\u662f\u6bcf\u4e2a\u6570\u5b57\u6309\u7167\u4e8c\u8fdb\u5236\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u63d2\u5165\u5f97\u5230\u7684\u3002\u6bd4\u5982\u6570\u5b57$3$\u5bf9\u5e94\u7740\u4e0b\u56fe\u4e2d\u7ea2\u8272\u6807\u51fa\u7684\u4e00\u6761\u8def\u5f84\u3002\n\n![2.png](https://i.loli.net/2019/04/20/5cbb15a97a740.png)\n\n\u628a\u4e0a\u9762\u7684\u6570\u5b57\u90fd\u5728Trie\u91cc\u9762\u67e5\u4e00\u67e5\u8bd5\u8bd5\u5427\uff01\u6bcf\u4e2a\u6570\u5b57\u5728Trie\u4e2d\u90fd\u6709\u4e00\u6761\u5bf9\u5e94\u7684\u8def\u5f84\uff0c\u56e0\u6b64Trie\u6700\u591a\u6709$(n \\times \\text {\u4e8c\u8fdb\u5236\u4f4d\u6570})$\u4e2a\u8282\u70b9\uff08\u800c\u4e14\u8fd9\u662f\u677e\u7684\u4e0a\u754c\uff09\u3002\n\n\u63d2\u5165\u65f6\uff0c\u4ece\u9ad8\u5230\u4f4e\u904d\u5386\u6570\u5b57\u4e8c\u8fdb\u5236\u7684\u6bcf\u4e00\u4f4d\uff0c\u5e76\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488$x$\u5728\u6811\u4e0a\u79fb\u52a8\u3002$x$\u4e00\u5f00\u59cb\u6307\u5411\u6839\u8282\u70b9\uff08$1$\u53f7\u8282\u70b9\uff09\u3002\u82e5\u5f53\u524d\u4f4d\u4e0a\u7684\u503c\u662f$k$\uff0c\u90a3\u4e48\u5224\u65ad\u4e00\u4e0b$x$\u662f\u5426\u6709$k$\u53f7\u513f\u5b50\uff0c\u6ca1\u6709\u5219\u65b0\u5efa\uff0c\u7136\u540e\u5c06$x$\u79fb\u52a8\u5230$x.son[k]$\uff0c\u76f4\u5230\u8d70\u5b8c\u4e8c\u8fdb\u5236\u7684\u6bcf\u4e00\u4f4d\u4e3a\u6b62\u3002\n\n\u67e5\u8be2\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u6ca1\u6709\u65b0\u5efa\u8282\u70b9\u800c\u5df2\u3002\u63d2\u5165\u548c\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f$O(\\log n)$\u3002\n\n```cpp\nconst int kLen = 32;\nstruct Node {\n  int son[2];\n};\nNode tree[kMaxN];\nint top;\nvoid Insert(int val) {\n  int x = 1;\n  for (int i = kLen - 1; i >= 0; i--) { // \u904d\u5386\u4e8c\u8fdb\u5236\u6bcf\u4e00\u4f4d\n    bool k = bool(val & (1 << i)); // \u83b7\u5f97\u5f53\u524d\u4f4d\u4e0a\u7684\u503c\n    if (!tree[x].son[k]) tree[x].son[k] = ++top; // \u82e5\u513f\u5b50\u4e0d\u5b58\u5728\u5219\u65b0\u5efa\u8282\u70b9\n    x = tree[x].son[k]; // \u79fb\u52a8\u6307\u9488\n  }\n}\n```\n\n## \u7b2c$k$\u5927\u5f02\u6216\u548c\n\n01-Trie\u7ef4\u62a4\u4e8c\u8fdb\u5236\u8fd9\u4e00\u7279\u6b8a\u6027\u8d28\uff0c\u4f7f\u5f9701-Trie\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5904\u7406\u5f02\u6216\u95ee\u9898\u3002\n\n\u6211\u4eec\u73b0\u5728\u6709\u4e86\u4e00\u68f501-Trie\uff0c\u60f3\u8981\u67e5\u8be2\u67d0\u4e2a\u6570\u4e0e\u5176\u4e2d\u6570\u5b57\u7684\u7b2c$rank$\u5927\u5f02\u6216\u548c\uff0c\u600e\u4e48\u529e\uff1f\n\n\u7c7b\u4f3c**\u4e3b\u5e2d\u6811**\uff0c\u6211\u4eec\u5728Trie\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4`siz`\uff0c\u8868\u793a\u63d2\u5165\u65f6\u7ecf\u8fc7\u8fd9\u4e2a\u8282\u70b9\u7684\u6b21\u6570\u3002\n\n\u9996\u5148\uff0c\u6839\u636e\u8d2a\u5fc3\u7b56\u7565\uff0c\u82e5\u5f53\u524d\u4f4d\u4e0a\u7684\u503c\u662f$k$\uff0c\u4e14$x$\u6709$k \\text { xor } 1$\u53f7\u513f\u5b50\uff0c\u90a3\u4e48\u8d70$x.son[k \\text { xor } 1]$\u4f1a\u66f4\u4f18\u3002\n\n\u8fd9\u662f\u56e0\u4e3a\u8d70\u8fd9\u4e00\u6b65\u53ef\u4ee5\u4f7f\u5f02\u6216\u548c\u7684\u8fd9\u4e00\u4f4d\u53d8\u6210$1$\uff0c\u800c\u6211\u4eec\u662f\u4ece\u9ad8\u4f4d\u5f80\u4f4e\u4f4d\u8d70\u7684\uff0c\u6240\u4ee5\u80af\u5b9a\u4f1a\u66f4\u4f18\u3002\n\n\u6bcf\u8d70\u5230\u4e00\u4f4d\uff0c\u5224\u65ad$siz(x.son[k \\text { xor } 1])$\u662f\u5426\u5927\u4e8e\u7b49\u4e8e$rank$\uff0c\u5982\u679c\u662f\uff0c\u5c31\u8bf4\u660e\u7b2c$rank$\u5927\u5f02\u6216\u548c\u5728$x$\u7684\u7b2c$k \\text { xor } 1$\u53f7\u513f\u5b50\u4e2d\uff0c\u5e76\u8ba9$x = x.son[k \\text { xor } 1]$\u3002\u5426\u5219\u8ba9$x = x.son[k]$\uff0c\u7136\u540e\u5c06$rank$\u51cf\u53bb$siz(x.son[k \\text { xor } 1])$\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u51fa\u67d0\u4e2a\u6570\u5728\u8fd9\u68f5Trie\u4e2d\u7684\u7b2c$rank$\u5927\u5f02\u6216\u548c\u4e86\u3002\n\n## \u56de\u5230\u6b63\u9898\n\n\u9898\u76ee\u8981\u6c42$m$\u4e2a$[l, r]$\u70b9\u5bf9\u3002\u70b9\u5bf9\u662f\u6709\u5e8f\u7684\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5148\u5c06$m \\times 2$\uff0c\u8f93\u51fa\u7b54\u6848\u65f6\u518d\u628a\u7b54\u6848\u51cf\u534a\u3002\n\n\u9996\u5148\uff0c\u5c06\u8f93\u5165\u6570\u7ec4$a$\u6c42\u4e00\u904d\u524d\u7f00\u5f02\u6216\u548c\uff0c\u7136\u540e\u5c06$sum$\u5168\u90e8\u63d2\u5165Trie\u4e2d\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a$r$\uff0c\u8d2a\u5fc3\u544a\u8bc9\u6211\u4eec\u8981\u6309\u987a\u5e8f\u53d6\u51fa\u5b83\u5728Trie\u4e2d\u7684\u7b2c$1$\u5927\u3001\u7b2c$2$\u5927\u3001\u7b2c$3$\u5927...\u5f02\u6216\u548c\u3002\u6211\u4eec\u4e0d\u77e5\u9053\u6bcf\u4e2a$r$\u8981\u53d6\u51fa\u591a\u5c11\u4e2a\u5f02\u6216\u548c\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u53d6\u51fa\u6240\u6709$r$\u4e2d\u7684\u524d$m$\u4e2a\u3002\u4e00\u5f00\u59cb\u5c06\u6bcf\u4e2a$r$\u53d6\u51fa\u7684\u7b2c$1$\u5927\u5f02\u6216\u548c\u653e\u5230\u5806\uff08\u5927\u6839\uff09\u4e2d\uff0c\u6bcf\u6b21\u53d6\u51fa\u5806\u9876\u5e76\u5f39\u51fa\u3002\u5047\u8bbe\u5806\u9876\u662f$r_0$\u7684\u7b2c$rank_0$\u5927\u5f02\u6216\u548c\uff0c\u90a3\u4e48\u6211\u4eec\u5c06$r_0$\u7684\u7b2c$rank_0 + 1$\u5927\u5f02\u6216\u548c\u538b\u8fdb\u5806\u91cc\u3002\u8fd9\u6837\u91cd\u590d$m$\u6b21\uff0c\u6211\u4eec\u5c31\u80fd\u53d6\u51fa\u524d$m$\u5927\u7684\u5f02\u6216\u548c\u3002\n\n\u5b9e\u73b0\u4e0a\uff0c\u4f7f\u7528\u7ed3\u6784\u4f53\n\n```cpp\nstruct Node {\n  int index; // `r`\u7684\u4e0b\u6807\n  int rank; // \u5f53\u524d\u7684\u6392\u540d\n  LL value; // \u7b2crank\u5927\u5f02\u6216\u503c\n};\nbool operator<(const Node& x, const Node& y) { // \u8fd0\u7b97\u7b26\u91cd\u8f7d\n  return x.value < y.value;\n} \n```\n\n\u6765\u8868\u793a\u4e0a\u6587\u5806\u7684\u8282\u70b9\u3002\u5faa\u73af$m$\uff08\u6216\u8005\u8bf4$m \\times 2$\uff09\u6b21\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(32n + (32 + \\log n)m)$\u3002~~\u5361\u5e38\u9884\u8b66~~\n\n## \u4ee3\u7801\n\n[\u8bc4\u6d4b\u8bb0\u5f55\uff08O2\uff09](https://www.luogu.org/recordnew/show/18355719)\u6700\u5927\u4e00\u4e2a\u70b91642ms\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nconst int kMaxN = 5 * 100000 + 10;\nconst int kLen = 33;\nconst int kMaxSize = kMaxN * (kLen + 2) + 10;\nstruct Trie {\n  struct Node {\n    int son[2], siz;\n  };\n  Node tree[kMaxSize];\n  int top;\n  Trie() { top = 1; }\n  void Insert(LL val) {\n    int x = 1;\n    for (int i = kLen - 1; i >= 0; i--) {\n      bool k = bool(val & (1ll << i));\n      tree[x].siz++;\n      if (!tree[x].son[k]) tree[x].son[k] = ++top;\n      x = tree[x].son[k];\n    }\n    tree[x].siz++;\n  }\n  LL Query(LL val, int rank) { // Query the k-th xor value of `val`\n    int x = 1;\n    LL ans = 0;\n    for (int i = kLen - 1; i >= 0; i--) {\n      bool k = bool(val & (1ll << i));\n      /*if (!tree[x].son[!k]) {\n        x = tree[x].son[k];\n      } else */\n      if (rank <= tree[tree[x].son[!k]].siz) {\n        ans |= (1ll << i);\n        x = tree[x].son[!k];\n      } else {\n        rank -= tree[tree[x].son[!k]].siz;\n        x = tree[x].son[k];\n      }\n    }\n    return ans;\n  }\n};\nstruct Node {\n  int index, rank;\n  LL value;\n};\nbool operator<(const Node& x, const Node& y) {\n  return x.value < y.value;\n}\npriority_queue<Node> Q;\nTrie T;\nint n, m;\nLL sum[kMaxN], a[kMaxN];\nint main() {\n  scanf(\"%d %d\", &n, &m);\n  m *= 2;\n  sum[0] = 0;\n  for (int i = 1; i <= n; i++) {\n    scanf(\"%lld\", &a[i]);\n    sum[i] = a[i] ^ sum[i - 1];\n  }\n  for (int i = 0; i <= n; i++) {\n    T.Insert(sum[i]);\n  }\n  for (int i = 0; i <= n; i++) {\n    Q.push((Node) {i, 1, T.Query(sum[i], 1)});\n  }\n  LL ans = 0;\n  for (int i = 1; i <= m; i++) {\n    Node x = Q.top();\n    Q.pop();\n    ans += x.value;\n    int idx = x.index;\n    int rank = x.rank;\n    if (rank <= n - 1) {\n      Q.push((Node) {idx, rank + 1, T.Query(sum[idx], rank + 1)});\n    }\n  }\n  printf(\"%lld\\n\", ans / 2);\n  return 0;\n}\n```\n\n\u5317\u4eac\u5e02\u7b2c\u4e09\u533a\u4ea4\u901a\u59d4\u63d0\u9192\u60a8\uff1a\n\n\u7a0b\u5e8f\u5343\u4e07\u884c\uff0c\n\nlong long \u7b2c\u4e00\u884c\uff1b\n\n\u7c7b\u578b\u4e0d\u89c4\u8303\uff0c\n\nWA\u4e24\u884c\u6cea\u3002\n\n*   \u4e00\u5b9a\u8981\u5199`(1ll << i)`\uff0c\u800c\u4e0d\u662f`(1 << i)`\uff01\uff01\uff01\n\n~~**\u6ed1\u7a3d**~~\n\n",
        "postTime": 1555764727,
        "uid": 57525,
        "name": "longlongzhu123",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "[\u70b9\u6b64\u770b\u9898\u9762](https://www.luogu.org/problemnew/show/P5283)\n\n**\u5927\u81f4\u9898\u610f\uff1a** \u6c42\u524d$k$\u5927\u7684\u533a\u95f4\u5f02\u6216\u548c\u4e4b\u548c\u3002\n\n### \u53ef\u6301\u4e45\u5316$Trie$\u6811\n\n\u4e4b\u524d\u505a\u8fc7\u4e00\u4e9b\u53ef\u6301\u4e45\u5316$Trie$\u6811\u9898\uff0c\u7ed3\u679c\u8bf4\u5230\u5e95\u8fd8\u662f\u4e3b\u5e2d\u6811\u3002\n\n\u7ec8\u4e8e\uff0c\u78b0\u5230\u4e00\u9053**\u771f\u00b7\u53ef\u6301\u4e45\u5316$Trie$\u6811**\u7684\u9898\u76ee\u3002\n\n\u5176\u5b9e\u5b83\u7684\u5b9e\u73b0\u4e0e\u4e3b\u5e2d\u6811\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002\n\n### \u5927\u81f4\u601d\u8def\n\n\u9996\u5148\uff0c\u6211\u4eec\u7edf\u8ba1\u4e00\u904d\u524d\u7f00\u5f02\u6216\u548c\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u6839\u636e\u524d\u7f00\u5f02\u6216\u548c\u5efa\u4e00\u68f5\u53ef\u6301\u4e45\u5316$Trie$\u6811\u3002\n\n\u63a5\u4e0b\u6765\u6700\u6838\u5fc3\u7684\u6765\u4e86\uff1a\n\n\u6211\u4eec\u5148\u6c42\u51fa\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u53f3\u7aef\u70b9\u6240\u80fd\u5f97\u5230\u7684\u6700\u5927\u5f02\u6216\u548c\uff0c\u8fd9\u53ef\u4ee5\u5728$Trie$\u6811\u4e0a\u67e5\u8be2\u5f97\u5230\uff08\u548c\u666e\u901a\u7684$Trie$\u6811\u662f\u4e00\u6837\u7684\uff09\u3002\n\n\u7136\u540e\uff0c\u628a\u8fd9\u4e9b\u503c\u8fde\u540c\u8be5\u53f3\u7aef\u70b9\u5168\u6254\u5165\u5927\u6839\u5806\u91cc\u3002\n\n\u6bcf\u6b21\uff0c\u6211\u4eec\u53d6\u51fa\u5806\u9876\uff0c\u7edf\u8ba1\u7b54\u6848\u540e\u6c42\u51fa\u4ee5\u8be5\u70b9\u4e3a\u53f3\u7aef\u70b9\u6240\u80fd\u5f97\u5230\u7684\u6b21\u5927\u503c\uff0c\u7136\u540e\u91cd\u65b0\u6254\u5165\u5806\u91cc\u3002\u5982\u679c\u518d\u53d6\u5230\u8be5\u53f3\u7aef\u70b9\uff0c\u5c31\u662f\u6b21\u6b21\u5927\u503c\u3001\u6b21\u6b21\u6b21\u5927\u503c\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u90a3\u4e48\u5982\u4f55\u6c42\u6b21\u5927\u503c\u5462\uff1f\n\n\u6ca1\u5173\u7cfb\uff0c\u53cd\u6b63\u6211\u4eec\u672c\u6765\u5c31\u662f\u53ef\u6301\u4e45\u5316$Trie$\u6811\uff0c\u76f4\u63a5\u590d\u5236\u8be5\u70b9\u7684$Trie$\u6811\u5e76\u5c06\u6c42\u51fa\u7684\u6700\u5927\u503c\u6240\u5bf9\u5e94\u7684\u6570\u5728\u6811\u4e0a\u5220\u53bb\u5373\u53ef\u3002\n\n\u8fd9\u79cd\u65b9\u6cd5\u7684\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O((n+k)log\\ Max\\ a_i)$\uff0c\u4f46\u6211\u5199\u5f97\u5f31\u4e86\u4e00\u70b9\uff0c\u53d8\u6210\u4e86$O((2n+k)log\\ Max\\ a_i)$\u3002\u867d\u7136\u5f88\u597d\u6539\uff0c\u4f46\u6211\u61d2\u5f97\u6539\u4e86\u3002\u3002\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define Tp template<typename Ty>\n#define Ts template<typename Ty,typename... Ar>\n#define Reg register\n#define RI Reg int\n#define RU Reg unsigned\n#define Con const\n#define CI Con int&\n#define CU Con unsigned&\n#define I inline\n#define W while\n#define N 500000\n#define K 200000\n#define mp make_pair\n#define fir first\n#define sec second\nusing namespace std;\nint n,k,p[N+5];unsigned a[N+5];typedef pair<unsigned,int> Pr;\npriority_queue<Pr> q;\nclass FastIO\n{\n\tprivate:\n\t\t#define FS 100000\n\t\t#define tc() (A==B&&(B=(A=FI)+fread(FI,1,FS,stdin),A==B)?EOF:*A++)\n\t\t#define tn (x<<3)+(x<<1)\n\t\t#define D isdigit(c=tc())\n\t\tchar c,*A,*B,FI[FS];\n\tpublic:\n\t\tI FastIO() {A=B=FI;}\n\t\tTp I void read(Ty& x) {x=0;W(!D);W(x=tn+(c&15),D);}\n\t\tTs I void read(Ty& x,Ar&... y) {read(x),read(y...);}\n\t\t#undef D\n}F;\nclass PersistentTrie//\u53ef\u6301\u4e45\u5316Trie\u6811\n{\n\tprivate:\n\t\t#define SZ ((N<<1)+K+1)\n\t\t#define Log 33\n\t\tint tot,Rt[N+5];struct node {int Sz,S[2];}O[SZ*Log+5];\n\t\tI void upt(int& rt1,RI rt2,CU x,CI t,CI D)//\u4fee\u6539\n\t\t{\n\t\t\tif((O[rt1=++tot]=O[rt2]).Sz+=t,!~D) return;//\u590d\u5236\u8282\u70b9\uff0c\u66f4\u65b0size\n\t\t\tRI d=(x>>D)&1;upt(O[rt1].S[d],O[rt2].S[d],x,t,D-1);//\u5904\u7406\u5b50\u8282\u70b9\n\t\t}\n\t\tI unsigned qry(int& rt,CI x,CI D)//\u8be2\u95ee\u4e0ex\u7684\u6700\u5927\u5f02\u6216\u548c\n\t\t{\n\t\t\tif(!~D) return 0;RI d=(x>>D)&1;\n\t\t\treturn O[O[rt].S[d^1]].Sz?qry(O[rt].S[d^1],x,D-1)|(1<<D):qry(O[rt].S[d],x,D-1);//\u80fd\u4f7f\u8fd9\u4e00\u4f4d\u4e3a1\u5c31\u5fc5\u4f7f\u5176\u4e3a1\uff0c\u5426\u5219\u4f7f\u5176\u4e3a0\n\t\t}\n\tpublic:\n\t\tI PersistentTrie() {tot=1,Update(0,0,0,1);}\n\t\tI void Update(CI v1,CI v2,CU x,CI t) {upt(Rt[v1],Rt[v2],x,t,31);}\n\t\tI unsigned Query(CI v) {RU t=qry(Rt[v],a[v],31);return Update(v,v,a[v]^t,-1),t;}//\u8be2\u95ee\uff0c\u4e3a\u907f\u514d\u8ba1\u7b97\u591a\u6b21\u8d21\u732e\u5c06\u5176\u5220\u53bb\n}P;\nint main()\n{\n\tRI i;Pr t;Reg long long ans=0;\n\tfor(F.read(n,k),i=1;i<=n;++i) F.read(a[p[i]=i]),a[i]^=a[i-1],P.Update(i,i-1,a[i],1);//\u521d\u59cb\u5316\u5efa\u6811\n\tfor(i=1;i<=n;++i) q.push(mp(P.Query(i),i));//\u8be2\u95ee\u7136\u540e\u6254\u5165\u5806\u4e2d\n\tfor(i=1;i<=k;++i) t=q.top(),q.pop(),ans+=t.fir,//\u53d6\u51fa\u5806\u9876\uff0c\u7edf\u8ba1\u7b54\u6848\n\t\t--p[t.sec]&&(q.push(mp(P.Query(t.sec),t.sec)),0);//\u5c06\u6b21\u5927\u503c\u6254\u5165\u5806\u4e2d\n\treturn printf(\"%lld\",ans),0;//\u8f93\u51fa\u7b54\u6848\n}\n```",
        "postTime": 1555372868,
        "uid": 28382,
        "name": "TheLostWeak",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "\u8003\u573a\u7684\u6211\u5c31\u662f\u50bb\u5b50\n\n\u8fd9\u4e2a\u9898\u5c31\u662f\u4e2a\u9001\u5206\u9898\uff0cbzoj\u6709\u4e00\u4e2a\u7c7b\u4f3c\u7684\u9898\u76ee\uff0c\u53eb\u5f02\u6216\u4e4b\uff08\u6ca1\u8bb0\u9519\u7684\u8bdd\uff09\uff0c\u8054\u8003\u539f\u9898\u77f3\u9524\u4e86\n\n\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5dee\u5206\u7684\u601d\u60f3\u6765\u5904\u7406\u5b83\u7684\u5f02\u6216\u548c\uff0c\u56e0\u6b64\u5efa\u4e00\u68f5\u53ef\u6301\u4e45\u531601trie\uff0c\u5f00\u59cb\u6211\u4eec\u901a\u8fc7trie\u67e5\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u524d\u65b9\u548c\u4ed6\u5f02\u6216\u8d77\u6765\u6700\u5927\u7684\u4e00\u4e2a\uff0c\u4e4b\u540e\u5f00\u4e2a\u5927\u6839\u5806\uff0c\u6bcf\u6b21\u67e5\u8be2\u5806\u9876\u7136\u540e\u5f39\u51fa\n\n\u6ce8\u610f\u8fb9\u754c\uff0c\u5bf9\u4e8e\u7b2ci\u4e2a\u4f4d\u7f6e\u53ea\u80fd\u67e5\u8be2i\u6b21\uff0c\u591a\u4e86\u5c31\u4e0d\u8981\u4e86\n\n```cpp\n#include <bits/stdc++.h>\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <bitset>\n#include <queue>\n#include <cmath>\n#include <map>\n#include <set>\n#define ri register int\n\nusing namespace std;\n\ninline char gch()\n{\n\tstatic char buf[100010], *h = buf, *t = buf;\n\treturn h == t && (t = (h = buf) + fread(buf, 1, 100000, stdin), h == t) ? EOF : *h ++;\n}\n\ntypedef long long lo;\n\ntypedef unsigned int uint;\n\ntemplate <typename int_qwq>\n\ninline void re(int_qwq &x)\n{\n\tx = 0;\n\tchar a;\n\tbool b = 0;\n\twhile(!isdigit(a = getchar()))\n\t\tb = a == '-';\n\twhile(isdigit(a))\n\t\tx = x * 10 + a - '0', a = getchar();\n\tif(b)\n\t\tx = -x;\n}\n\nconst int ms = 5e5 + 10;\n\nint n, m;\n\nuint a[ms], pos[ms], su = 0, S[ms];\n\nlo sta[1000010], ta = 0;\n\nlo ans;\n\nbool FFF, fl;\n\nstruct node\n{\n\tlo x; int k, p;\n\t\n\tinline bool operator < (const node &a) const\n\t{\n\t\treturn x < a.x;\n\t}\n};\n\npriority_queue <node> qwq;\n\nstruct Trie\n{\n\tuint ch[ms * 35][2], cnt, sz[ms * 35], rt[ms], val[ms * 35];\n\t\n\tbool f[ms * 35];\n\t\n\tinline void insert(uint v, uint poi)\n\t{\n\t\tuint las = poi > 0 ? rt[poi - 1] : 0, no = ++ cnt;\n\t\trt[poi] = cnt; \n\t\tfor(ri i = 31; i >= 0; i --)\n\t\t{\n\t\t\tint p = ((v & (1 << i)) > 0); sz[no] = sz[las] + 1;\n\t\t\tch[no][0] = ch[las][0], ch[no][1] = ch[las][1];\n\t\t\tch[no][p] = ++ cnt, no = ch[no][p], las = ch[las][p];\n\t\t}\n\t\tsz[no] = sz[las] + 1, f[no] = 1, val[no] = v;\n\t}\n\t\n\tinline void init()\n\t{\n\t\tcnt = 0;\n\t\tmemset(ch, 0, sizeof(ch)), memset(sz, 0, sizeof(sz)), memset(f, 0, sizeof(f));\n\t}\n\n    uint ask(int no, uint v, int p, int k)\n    {\n        if(p == -1)\n            return v ^ val[no];\n        uint d = ((v & (1 << p)) > 0); d ^= 1; \n        if(sz[ch[no][d]] >= k)\n            return ask(ch[no][d], v, p - 1, k);\n        else\n            return ask(ch[no][d ^ 1], v, p - 1, k - sz[ch[no][d]]);\n    }\n\t\n\tinline void askans()\n\t{\n        S[0] = 0;\n        for(ri i = 1; i <= n; i ++)\n            S[i] = S[i - 1] ^ a[i], qwq.push((node){ask(rt[i - 1], S[i], 31, 1), 1, i});\n        while(m --)\n        {\n            node qaq = qwq.top(); ans += qaq.x; qwq.pop();\n            //cout << qaq.x << '\\n';\n            if(qaq.k + 1 <= qaq.p)\n                qwq.push((node){(lo)ask(rt[qaq.p - 1], S[qaq.p], 31, qaq.k + 1), qaq.k + 1, qaq.p});\n        }\n\t}\n}trie;\n\ninline bool cmp(lo a, lo b)\n{\n\treturn a > b;\n}\n\nint main()\n{\n\tfreopen(\"13.in\", \"r\", stdin);\n\tfreopen(\"xor2.out\", \"w\", stdout);\n\tre(n), re(m);\n\ttrie.init();\n\ttrie.insert(0, 0); su = 0;\n\tfor(ri i = 1; i <= n; i ++)\n\t{\n\t\tre(a[i]);\n\t\tsu ^= a[i];\n\t\ttrie.insert(su, i);\n\t}\n\ttrie.askans();\n\tcout << ans;\n    //system(\"pause\");\n}\n```",
        "postTime": 1554548734,
        "uid": 25064,
        "name": "dfkdsmbd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "\n   \u9996\u5148\uff0c\u6c42\u51fa\u524d\u7f00\u5f02\u6216\u548c\uff0c\u5219\u4e00\u4e2a\u533a\u95f4\u7684\u5f02\u6216\u548c\u53d8\u6210\u4e24\u4e2a\u524d\u7f00\u5f02\u6216\u548c\u7684\u5f02\u6216\u548c\u3002\n   \n   \u4efb\u610f\u4e24\u4e2a\uff08\u53ef\u4ee5\u76f8\u540c\uff09\u524d\u7f00\u5f02\u6216\u548c\uff0c\u5f02\u6216\u8d77\u6765\u53ef\u4ee5\u5f97\u5230\uff08N+1\uff09^2\u4e2a\u533a\u95f4\u7684\u5f02\u6216\u548c\uff0c\u5176\u4e2d\uff08N+1\uff09\u4e2a\u662f\u7a7a\u533a\u95f4\u5f02\u6216\u548c\uff0c\u5269\u4e0b\u7684\u662f\u539f\u5e8f\u5217\u7684\u6bcf\u4e2a\u533a\u95f4\u51fa\u73b0\u4e86\u4e24\u6b21\u3002\n    \n   \u628a\u8fd9\uff08N+1\uff09\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u5efa\u6210\u4e00\u9897Trie\u6811\uff0c\u7136\u540e\u8003\u8651\u4e8c\u5206\u7b54\u6848\uff0c\u8bbe\u7b2ck\u5927\u7684\u6570\u662fx\uff0c\u679a\u4e3e\uff08N+1\uff09\u4e2a\u6570\u5728Trie\u6811\u4e0a\u8dd1\u4e00\u4e0b\uff0c\u7edf\u8ba1\u51fa\u6709\u591a\u5c11\u4e2a>=x\u7684\u6570\u5373\u53ef\u3002\u8fd9\u6837\u5c31\u80fd\u6c42\u51fa\u7b2ck\u5927\u7684\u6570\u662f\u591a\u5c11\uff0c\u7136\u540e\u518d\u679a\u4e3e\u8fd9\uff08N+1\uff09\u4e2a\u6570\uff0c\u66b4\u529b\u5728Trie\u6811\u4e0a\u627e\u6240\u6709\u80fd\u4f7f\u5f02\u6216\u548c<x\u7684\u6570\uff0c\u4e0d\u662f\u5c0f\u4e8e\u7b49\u4e8e\u662f\u56e0\u4e3a\u7b49\u4e8ex\u7684\u6570\u53ef\u80fd\u5f88\u591a\uff0c\u590d\u6742\u5ea6\u4e0d\u5bf9\uff0c\u4f46\u662f\u6211\u4eec\u80fd\u77e5\u9053\u6709\u591a\u5c11\u5c0f\u4e8ex\u7684\u6570\u4ee5\u53cax\u662f\u591a\u5c11\uff0c\u6700\u540e\u8865\u9f50\u7b49\u4e8ex\u7684\u5373\u53ef\u3002\n   \n   \u8fd9\u6837\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(nlog^2\u503c\u57df+(n+k)log\u503c\u57df),\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(nlog\u503c\u57df)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f\u5f88\u5927\uff0c\u5982\u4f55\u4f18\u5316\uff1f\n   \n   \u5176\u5b9e\u76f4\u63a5\u5728Trie\u4e0a\u4e8c\u5206\u5373\u53ef\uff0c\u8fb9\u5728Trie\u4e0a\u8d70\uff0c\u8fb9\u5224\u65ad\u600e\u4e48\u8d70\uff0c\u5c31\u53ef\u4ee5\u53bb\u6389\u4e00\u4e2alog\u4e86\u3002\n   \n   \u6211\u7684\u4ee3\u7801\u505a\u6cd5\u7565\u6709\u4e0d\u540c\uff0c\u56e0\u4e3a\u4e0d\u662f\u8054\u8003\u8003\u751f\uff0c\u6709\u4e00\u70b9\u4fe1\u606f\u5dee\uff0c\u8bef\u4ee5\u4e3aK\u5f88\u5927\uff0c\u6240\u4ee5\u6574\u4e86\u4e00\u4e2aO(nlog^2\u503c\u57df)\u7684\u505a\u6cd5\uff0c\u7a7a\u95f4\u4e5f\u662f\u4fe9log\uff0c\u8fc7\u4e0d\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u7ed9\u6bcf\u4e2aTrie\u7ed3\u70b9\u518d\u8bb0\u4e86\u4e00\u4e2a\u6570\u7ec4\u8868\u793a\u8fd9\u4e2a\u5b50\u6811\u5185\u6240\u6709\u6570\u7684\u7b2ci\u4f4d\u603b\u5171\u6709\u51e0\u4e2a1\uff0c\u8fd9\u6837\u5efa\u6811\u5c31\u4e24\u4e2alog\uff0c\u5728Trie\u4e0a\u4e8c\u5206\u4e5f\u662f\u4fe9log\uff0c\u4e0d\u8fc7\u672c\u9898K\u5f88\u5c0f\uff0c\u6240\u4ee5\u6539\u6210\u66b4\u529b\u5c31\u80fd\u53bb\u6389\u4e00\u4e2alog\u4e86\u3002\u3002\u3002\u6211\u61d2\u5f97\u6539\u4e86\n   \n```cpp\n#include<stdio.h>\n#define LL long long\n#define uint unsigned int\ntypedef struct Ts\n{\n\tTs*ch[2];\n\tint bits[32];\n\tint size;\n}Ts;\nTs mem[3200000],*Malloc=mem+1;\nTs*New()\n{\n\tTs*p=Malloc++;\n\tp->ch[0]=p->ch[1]=mem;\n\tp->size=0;\n\treturn p;\n}\nTs*root=New();\nTs*p[100001];\nvoid insert(uint x)\n{\n\tTs*t=root;\n\tfor(int i=32;i--;)\n\t{\n\t\tt->size++;\n\t\tfor(int j=0;j<32;j++)\n\t\t\tt->bits[j]+=(x>>j)&1;\n\t\tint lr=(x>>i)&1;\n\t\tif(t->ch[lr]==mem)t->ch[lr]=New();\n\t\tt=t->ch[lr];\n\t}\n\tt->size++;\n\tfor(int j=0;j<32;j++)\n\t\tt->bits[j]+=(x>>j)&1;\n}\nuint Xor[100001];\nint main()\n{\n\t//freopen(\"xor1.in\",\"r\",stdin);\n\tmem->ch[0]=mem->ch[1]=mem;\n\tint N,K;\n\tscanf(\"%d%d\",&N,&K);\n\tK*=2;\n\tint tmpk=K;\n\tinsert(0);\n\tfor(int i=1;i<=N;i++)\n\t{\n\t\tscanf(\"%u\",Xor+i);\n\t\tXor[i]^=Xor[i-1];\n\t\tinsert(Xor[i]);\n\t}\n\tfor(int i=0;i<=N;i++)\n\tp[i]=root;\n\tuint ans=0;\n\tLL Ans=0;\n\tLL cnt=0;\n\tfor(int i=32;i--;)\n\t{\n\t\tLL sum=0;\n\t\tfor(int j=0;j<=N;j++)\n\t\t{\n\t\t\tint lr=(Xor[j]>>i)&1;\n\t\t\tsum+=p[j]->ch[lr^1]->size;\n\t\t}\n\t\tif(sum>=K)\n\t\t{\n\t\t\tans|=(1u<<i);\n\t\t\tfor(int j=0;j<=N;j++)\n\t\t\t{\n\t\t\t\tint lr=(Xor[j]>>i)&1;\n\t\t\t\tp[j]=p[j]->ch[lr^1];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tK-=sum;\n\t\t\tfor(int j=0;j<=N;j++)\n\t\t\t{\n\t\t\t\tint lr=(Xor[j]>>i)&1;\n\t\t\t\tTs*t=p[j]->ch[lr^1];\n\t\t\t\tcnt+=t->size;\n\t\t\t\tfor(int k=0;k<32;k++)\n\t\t\t\t{\n\t\t\t\t\tif((Xor[j]>>k)&1)\n\t\t\t\t\t\tAns+=(1ll<<k)*(t->size-t->bits[k]);\n\t\t\t\t\telse\n\t\t\t\t\t\tAns+=(1ll<<k)*(t->bits[k]);\n\t\t\t\t}\n\t\t\t\tp[j]=p[j]->ch[lr];\n\t\t\t}\n\t\t}\n\t}\n\tAns+=ans*(tmpk-cnt);\n\tprintf(\"%lld\\n\",Ans/2);\n}\n```\n",
        "postTime": 1554542336,
        "uid": 58279,
        "name": "cuking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "\u795e\u4ed9\u4eec\u90fd\u5199\u4e86\u53ef\u6301\u4e45\u531601Trie, \u53ef\u662f\u849f\u84bb\u6211\u4e0d\u4f1a\uff01\n\n\u4e8e\u662f\u6211\u4f7f\u7528\u7ebf\u6bb5\u6811\u5957\u666e\u901a01Trie\u3002\u5177\u4f53\u505a\u6cd5\u5982\u4e0b\uff1a\n\n\u53c2\u8003\u8d85\u7ea7\u94a2\u7434\u7684\u505a\u6cd5\uff0c\u5148\u5904\u7406\u524d\u7f00\u5f02\u6216\u548c\u3002\u4f7f\u7528\u4e00\u4e2a\u5806\uff0c\u7ef4\u62a4$ f_{o, l, r}$ \u5de6\u8fb9\u754c\u4e3a$ o $,\u53f3\u8fb9\u754c\u4e3a $ [l,r] $ \u7684\u533a\u95f4\u5f02\u6216\u548c\u7684\u6700\u5927\u503c, \u53d6\u51fak\u6b21\u5806\u9876\uff0c\u6bcf\u6b21\u53d6\u5b8c\u628a\u539f\u6765\u7684\u533a\u95f4$ [l,r] $\u5206\u88c2\u6210\u4e24\u534a, \u8ba1\u7b97\u65b0\u7684\u6700\u5927\u503c\uff0c\u8fd9\u6837\u7b26\u5408\u4e0d\u91cd\u4e0d\u6f0f\u7684\u539f\u5219\u3002\n\n\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u600e\u4e48\u8ba1\u7b97\u4efb\u610f\u533a\u95f4\u7684\u6700\u5927\u5f02\u6216\u548c\uff1f\n\n\u90a3\u4e48\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u595701Trie, \u6bcf\u4e2a\u8282\u70b9\u662f\u4e00\u68f5\u7ef4\u62a4\u8fd9\u4e2a\u533a\u95f4\u768401Trie, \u6bcf\u6b21\u67e5\u8be2\u53d6\u6240\u6709\u9700\u67e5\u8be2\u7684\u8282\u70b9\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\n\n```cpp\n\n#include <iostream>\n#include <queue>\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#define lson(x) x << 1\n#define rson(x) x << 1 | 1\n#define int long long\n#define SIZE 50\n\nusing namespace std;\nconst int maxn = 5e5 + 24;\n\nstruct node\n{\n\tint lson, rson, pos;\n\tbool val;\n};\n\nnode tree[maxn << 4];\nint tail;\n\nint newnode()\n{\n\ttail++;\n\ttree[tail].val = tree[tail].lson = tree[tail].rson = 0;\n\treturn tail;\n}\n\nunsigned int A[maxn];\n\nvoid insert(int x, int val, int h, int pos)\n{\n\tif (h == SIZE + 1)\n\t{\n\t\ttree[x].pos = pos;\n\t\treturn;\n\t}\n\tif (val & (1ull << SIZE - h))\n\t{\n\t\tif (!tree[x].rson)\n\t\t{\n\t\t\ttree[x].rson = newnode();\n\t\t\ttree[tree[x].rson].val = 1;\n\t\t}\n\t\tinsert(tree[x].rson, val, h + 1, pos);\n\t}\n\telse\n\t{\n\t\tif (!tree[x].lson)\n\t\t{\n\t\t\ttree[x].lson = newnode();\n\t\t\ttree[tree[x].lson].val = 0;\n\t\t}\n\t\tinsert(tree[x].lson, val, h + 1, pos);\n\t}\n}\n\nvoid fill(int l, int r, int x)\n{\n\tfor (int i = l; i <= r; i++)\n\t{\n\t\tinsert(x, A[i], 1, i);\n\t}\n}\n\npair<int, int> query(int x, int val, int h)\n{\n\tif (h == SIZE + 1) return make_pair(tree[x].val, tree[x].pos);\n\tpair<int, int> ret = make_pair(0, 0);\n\tif (val & (1ull << SIZE - h))\n\t{\n\t\tif (tree[x].lson)\n\t\t{\n\t\t\tret = query(tree[x].lson, val, h + 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret = query(tree[x].rson, val, h + 1);\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (tree[x].rson)\n\t\t{\n\t\t\tret = query(tree[x].rson, val, h + 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret = query(tree[x].lson, val, h + 1);\n\t\t}\n\t}\n\tret.first += tree[x].val << SIZE + 1 - h;\n\treturn ret;\n}\n\nint seg[maxn * 4];\n\nvoid build(int x, int l, int r)\n{\n\tseg[x] = newnode();\n\tfill(l, r, seg[x]);\n\tif (l == r) return;\n\tint mid = (l + r) >> 1;\n\tbuild(lson(x), l, mid);\n\tbuild(rson(x), mid + 1, r);\n}\n\npair<int, int> ask(int x, int l, int r, int ll, int rr, int val)\n{\n\tif (ll <= l && r <= rr)\n\t{\n\t\tpair<int, int> ret = query(seg[x], val, 1);\n\t\tret.first ^= val;\n\t\treturn ret;\n\t}\n\tint mid = (l + r) >> 1;\n\tpair<int, int> ret = make_pair(0, 0);\n\tif (ll <= mid)\n\t{\n\t\tpair<int, int> tmp = ask(lson(x), l, mid, ll, rr, val);\n\t\ttmp.first ^= val;\n\t\tif (tmp.first > ret.first)\n\t\t\tret = tmp;\n\t}\n\tif (rr >= mid + 1)\n\t{\n\t\tpair<int, int> tmp = ask(rson(x),mid + 1, r, ll, rr, val);\n\t\ttmp.first ^= val;\n\t\tif (tmp.first > ret.first)\n\t\t\tret = tmp;\n\t}\n\treturn ret;\n}\n\nint n, k, ans;\n\nstruct node_\n{\n\tint o, l, r;\n\tpair<int, int> k;\n\tbool operator <(const node_ b) const\n\t{\n\t\treturn k.first < b.k.first;\n\t}\n} tmp, tmp2;\n\npriority_queue<node_> hp;\n\nsigned main()\n{\n\tfreopen(\"xor.in\", \"r\", stdin);\n\tcin >> n >> k;\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tcin >> A[i];\n\t\tA[i] ^= A[i - 1];\n\t}\n\tbuild(1, 0, n);\n\tfor (int o = 0; o < n; o++)\n\t{\n\t\ttmp.o = o;\n\t\ttmp.l = o + 1;\n\t\ttmp.r = n;\n\t\ttmp.k = ask(1, 0, n, tmp.l, tmp.r, A[o]);\n\t\thp.push(tmp);\n\t}\n\twhile (k--)\n\t{\n\t\ttmp = hp.top(); hp.pop();\n\t\tans += tmp.k.first;\n\t\tif (tmp.k.second != tmp.r)\n\t\t{\n\t\t\ttmp2 = tmp;\n\t\t\ttmp2.l = tmp.k.second + 1;\n\t\t\ttmp2.k = ask(1, 0, n, tmp2.l, tmp2.r, A[tmp.o]);\n\t\t\thp.push(tmp2);\n\t\t}\n\t\tif (tmp.k.second != tmp.l)\n\t\t{\n\t\t\ttmp.r = tmp.k.second - 1;\n\t\t\ttmp.k = ask(1, 0, n, tmp.l, tmp.r, A[tmp.o]);\n\t\t\thp.push(tmp);\n\t\t}\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}\n```\n\n\u7136\u540e\u849f\u84bb\u6211\u5c31\u906d\u96f7\u5288\u4e86\u3002\u522b\u60f3\u6284\u6211\u7684\u9898\u89e3\u56e0\u4e3a\u4e0a\u9762\u7684\u4ee3\u7801\u6211\u600e\u4e48\u90fd\u8c03\u4e0d\u51fa\u6765\uff0c\u653e\u5f03\u4e86\u3002\n\n\u7136\u540e\u5c31\u4f7f\u7528\u5927\u5bb6\u90fd\u5728\u7528\u7684\u53ef\u6301\u4e45\u531601Trie, $ \\color{red}\\text{\u7ebf\u4e0b} $\u8fc7\u4e86\u3002(\u8ddf\u5176\u4ed6\u9898\u89e3\u5bf9\u62cd\u4e0d\u7b97\u6284\u9898\u89e3\u5427\uff1f\uff09\n```cpp\n\n\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#include <cstring>\n#define int unsigned int\n\nusing namespace std;\nconst int maxn = 3e6;\nconst long long SIZE = 31;\n\nstruct node\n{\n\tint son[2];\n\tbool val;\n\tint latest;\n};\n\nnode tree[maxn << 3];       /////////////BUG tree[0]\nint tail = 0;\n\nint newnode(node x)\n{\n\ttail++;\n\ttree[tail].son[0] = x.son[0];\n\ttree[tail].son[1] = x.son[1];\n\ttree[tail].val = x.val;\n\ttree[tail].latest = x.latest;\n\treturn tail;\n}\n\nint insert(int x, int val, int t, int late)\n{\n\tif (SIZE - t < 0) return 0;\n\tint root = newnode(tree[x]);\n\ttree[root].val = val & (1ull << SIZE - t);\n\ttree[root].latest = late;\n\ttree[root].son[bool(val & (1ull << SIZE - t - 1))] =\n\t\tinsert(tree[x].son[bool(val & (1ull << SIZE - t - 1))], val, t + 1, late);\n\treturn root;\n}\n\npair<int, int> query(int x, int val, int t, int time)\n{\n\tif (SIZE - t == 0) return make_pair(tree[x].val, tree[x].latest);\n\tpair<int, int> ret = make_pair(0, 0);\n\tif (tree[x].son[!(val & (1ull << SIZE - t - 1))] && tree[tree[x].son[!(val & (1ull << SIZE - t - 1))]].latest >= time)\n\t{\n\t\tret = query(tree[x].son[!(val & (1ull << SIZE - t - 1))], val, t + 1, time);\n\t}\n\telse\n\t{\n\t\tret = query(tree[x].son[bool(val & (1ull << SIZE - t - 1))], val, t + 1, time);\n\t}\n\tret.first += (1ull << SIZE - t) * tree[x].val;\n\treturn ret;\n}\n\nstruct node_\n{\n\tint o, l, r;\n\tpair<int, int> k;\n\tbool operator <(const node_ b) const\n\t{\n\t\treturn k.first < b.k.first;\n\t}\n} tmp, tmp2;\n\npriority_queue<node_> hp;\n\nint n, k, A[maxn], rt[maxn];\nlong long ans;\n\nsigned main()\n{\n\tfreopen(\"xor.in\", \"r\", stdin);\n\tmemset(tree, 0, sizeof(tree));\n\tcin >> n >> k;\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tcin >> A[i];\n\t\tA[i] ^= A[i - 1];\n\t\trt[i] = insert(rt[i - 1], A[i], 0, i);\n\t}\n\tfor (int o = 0; o < n; o++)\n\t{\n\t\ttmp.o = o;\n\t\ttmp.l = o + 1;\n\t\ttmp.r = n;\n\t\ttmp.k = query(rt[tmp.r], A[o], 0, tmp.l);\n\t\ttmp.k.first ^= A[o];\n\t\thp.push(tmp);\n\t}\n\twhile (k--)\n\t{\n\t\ttmp = hp.top(); hp.pop();\n\t\tans += tmp.k.first;\n\t\tif (tmp.k.second != tmp.r)\n\t\t{\n\t\t\ttmp2.o = tmp.o;\n\t\t\ttmp2.r = tmp.r;\n\t\t\ttmp2.l = tmp.k.second + 1;\n\t\t\t//tmp2.k = ask(1, 0, n, tmp2.l, tmp2.r, A[tmp.o]);\n\t\t\ttmp2.k = query(rt[tmp2.r], A[tmp2.o], 0, tmp2.l);\n\t\t\ttmp2.k.first ^= A[tmp2.o];\n\t\t\thp.push(tmp2);\n\t\t}\n\t\tif (tmp.k.second != tmp.l)\n\t\t{\n\t\t\ttmp.r = tmp.k.second - 1;\n\t\t\t//tmp.k = ask(1, 0, n, tmp.l, tmp.r, A[tmp.o]);\n\t\t\ttmp.k = query(rt[tmp.r], A[tmp.o], 0, tmp.l);\n\t\t\ttmp.k.first ^= A[tmp.o];\n\t\t\thp.push(tmp);\n\t\t}\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}\n```\n\n\u5343\u771f\u4e07\u786e\u8fc7\u4e86\u7ebf\u4e0b\uff0c\u7ebf\u4e0a\u8fc7\u4e0d\u4e86\n\n\u7ba1\u7406\u5927\u5927\u6c42\u8fc7\u3002\n\n\n\n\n",
        "postTime": 1583066830,
        "uid": 148438,
        "name": "Linshey",
        "ccfLevel": 9,
        "title": "P5283 [\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50"
    },
    {
        "content": "~~\u56db\u500d\u7ecf\u9a8c CF1055F CF241B BZOJ3689 LGOJ5283~~\n\n\n------------\n\u53bb\u5e74\u8003\u5b8c\u7701\u9009\u6211\u5728\u573a\u5916\u770b\u5230\u8fd9\u9898\u7684\u65f6\u5019\u8fd8\u4e00\u8138\u61f5\u903c\uff0c\u73b0\u5728\u89c9\u5f97\u8fd9\u9898\u7279\u522b\u6c34\u3002\n\n\u4f46\u662f\u4e3a\u4ec0\u4e48\u4f60\u4eec\u90fd\u4f1a\u53ef\u6301\u4e45\u5316 01trie \u554a\u2026\u2026\n\n\u7ed9\u4e00\u4e2a\u4e0d\u7528\u53ef\u6301\u4e45\u5316\u7684\u65b9\u6cd5\uff1a\n\n\u9996\u5148\u770b\u5230\u9898\u4e0d\u96be\u60f3\u5230\u6c42\u5f02\u6216\u524d\u7f00\u548c\uff0c\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u9009 $k$ \u5bf9\u5f02\u6216\u6700\u5927\u7684\u6570\u3002\n\n\u4f46\u8fd9\u662f\u65e0\u5e8f\u5bf9\u4e0d\u597d\u641e\uff0c\u6211\u4eec\u628a $k$ \u7ffb\u500d\uff0c\u6700\u540e\u518d\u628a\u7b54\u6848\u51cf\u534a\u5373\u53ef\u3002\n\n\u5904\u7406\u5f02\u6216\u57fa\u672c\u4e0a\u5c31\u662f trie \u548c\u7ebf\u6027\u57fa\u4e24\u79cd\uff0c~~\u4f46\u662f\u6211\u4e0d\u4f1a\u7ebf\u6027\u57fa~~\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u7528 trie\u3002\n\ntrie \u7684\u7ecf\u5178\u64cd\u4f5c\u662f\u6c42\u4e0e\u67d0\u4e00\u4e2a\u6570\u5f02\u6216\u6700\u5927\u7684\u6570\uff0c\u4f46\u662f\u6211\u4eec\u8fd9\u91cc\u662f\u4e24\u4e2a\u6570\u5f02\u6216\u3002\u90a3\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u7528\u6709\u5e8f\u8868\u5408\u5e76\u3002\n\n\u6211\u4eec\u753b\u4e00\u4e2a\u8868\uff0c$i$ \u884c $j$ \u5217\u4ee3\u8868\u7b2c $i$ \u4e2a\u4e0e\u7b2c $j$ \u4e2a\u5f02\u6216\u7684\u503c\u3002\n\n\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u5c06\u6bcf\u4e00\u5217\u6392\u597d\u5e8f\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u5b58\u6bcf\u4e00\u5217\u7684\u201c\u5f53\u524d\u5143\u7d20\u201d\uff0c\u6bcf\u6b21\u53d6\u51fa\u6700\u5927\u7684\u5f80\u540e\u632a\u4e00\u683c\u518d\u653e\u56de\u53bb\u3002\n\n\u4f46\u662f\u95ee\u9898\u662f\u6211\u4eec\u6ca1\u6392\u597d\u5e8f\u554a\u3002\n\n\u4e5f\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u662f\u7b2c\u51e0\u5927\uff0c\u73b0\u573a\u6c42\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u90a3\u4e48\u6c42\u8fd9\u4e2a\u5c31\u9700\u8981 trie \u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u7c7b\u6bd4\u5e73\u8861\u6811\uff0c\u7ef4\u62a4\u68f5\u5b50\u6811\u7684\u8282\u70b9\u6570\uff0c\u7136\u540e\u770b\u5f80\u54ea\u8fb9\u8d70\u5c31\u884c\u4e86\u3002\n\ncode\uff1a\n```cpp\n#include<vector>\n#include<queue>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ntypedef long long ll;\ninline ll readint(){\n    ll x=0;\n    bool f=0;\n    char c=getchar();\n    while(!isdigit(c)&&c!='-') c=getchar();\n    if(c=='-'){\n        f=1;\n        c=getchar();\n    }\n    while(isdigit(c)){\n        x=x*10+c-'0';\n        c=getchar();\n    }\n    return f?-x:x;\n}\nconst int maxn=5e5+5;\nint n,k;\nll a[maxn];\nconst int maxbase=35;\nstruct node{\n\tnode* ch[2];\n\tint s;\n\tnode():s(0){\n\t\tch[0]=ch[1]=0;\n\t}\n\tvoid insert(ll x,int base=maxbase){\n\t\ts++;\n\t\tif(base<0) return;\n\t\tbool d=(x>>base)&1;\n\t\tif(!ch[d]) ch[d]=new node;\n\t\tch[d]->insert(x,base-1);\n\t}\n\tll kthxor(ll x,int k,int base=maxbase){\n\t\tif(base<0) return 0;\n\t\tbool d=(x>>base)&1;\n\t\tif(!ch[!d]) return ch[d]->kthxor(x,k,base-1);\n\t\telse{\n\t\t\tif(k<=ch[!d]->s) return ch[!d]->kthxor(x,k,base-1)|(1ll<<base);\n\t\t\telse return ch[d]->kthxor(x,k-ch[!d]->s,base-1);\n\t\t}\n\t}\n}*rt;\nll now[maxn];\nint rk[maxn];\nstruct cmp{\n\tbool operator ()(int a,int b){\n\t\treturn now[a]<now[b];\n\t}\n};\nint main(){\n    #ifdef LOCAL\n    freopen(\"in.txt\",\"r\",stdin);\n    freopen(\"out.txt\",\"w\",stdout);\n    #endif\n    n=readint();\n    k=readint()*2;\n    rt=new node;\n    rt->insert(a[0]=0);\n    for(int i=1;i<=n;i++) rt->insert(a[i]=readint()^a[i-1]);\n\tpriority_queue<int,vector<int>,cmp> pq;\n    for(int i=0;i<=n;i++){\n    \trk[i]=1;\n    \tnow[i]=rt->kthxor(a[i],1);\n    \tpq.push(i);\n\t}\n\tll ans=0;\n\twhile(k--){\n\t\tint u=pq.top();\n\t\tpq.pop();\n\t\tans+=now[u];\n\t\trk[u]++;\n\t\tif(rk[u]<=n){\n\t\t\tnow[u]=rt->kthxor(a[u],rk[u]);\n\t\t\tpq.push(u);\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans/2);\n\treturn 0;\n}\n```\n",
        "postTime": 1578118263,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "\u611f\u89c9\u4e0d\u662f\u5f88\u96be\u7684\u4e00\u9898\uff0c\u60f3\u4e860.5h\u5de6\u53f3\uff08\u601d\u8def\u6b6a\u4e86\uff0c\u4e0d\u8fc7\u60f3\u4e86\u4e00\u4e2a\u5927\u5e38\u6570\u7684\u4e24\u53ea$\\log$\u505a\u6cd5233\uff09\n\n\u7136\u540e\u7801+\u8c03\u4e861h\uff0c\u9664\u4e86\u4e00\u4e2aSB\u7684\u6570\u7ec4\u5f00\u5c0f\u5916\u57fa\u672c\u4e0a\u4e5f\u6ca1\u4ec0\u4e48\u5751\u70b9\n\n\u5148\u8bb2\u4e00\u4e2a\u5148\u60f3\u5230\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5bf9\u4e8e\u8fd9\u79cd\u95ee\u9898\u663e\u7136\u53ef\u4ee5**\u4e8c\u5206\u7b2c$k$\u5927**\uff0c\u7136\u540e\u9a8c\u8bc1\u6709\u591a\u5c11\u4e2a\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5b83\n\n\u7136\u540e\u8003\u8651\u600e\u4e48\u5224\u65ad\uff0c\u6211\u4eec\u5efa\u4e00\u68f5**0/1Trie**\uff0c\u7136\u540e\u679a\u4e3e\u4e00\u4e2a\u53f3\u7aef\u70b9\uff0c\u6bcf\u6b21\u628a\u6574\u4e2aTrie\u5f02\u6216\u4e0a\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\n\n\u5177\u4f53\u5b9e\u73b0\u7684\u8bdd\u5c31\u662f\u4e0d\u65ad\u5411\u4e0b\u8d70\u7684\u8fc7\u7a0b\uff0c\u5f53\u8fd9\u4e00\u4f4d\u4e3a$1$\u65f6\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\u5373\u53ef\n\n\u7136\u540e\u76f8\u5f53\u4e8e\u67e5\u5c0f\u4e8e\u7b49\u4e8e\u4e00\u4e2a\u6570\u7684\u6570\u4e2a\u6570\u4ee5\u53ca\u548c\uff0c\u76f4\u63a5Trie\u4e0a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\n\n\u8fd9\u6837\u662f$n \\log \\max{a_i}$\u7684\uff0c\u7531\u4e8e$a_i$\u503c\u57df\u6bd4\u8f83\u5927\u800c\u4e14\u76f4\u63a5\u8dd1\u6ee1\u4e86\uff0c\u56e0\u6b64\u53ef\u80fd\u65e0\u6cd5\u901a\u8fc7\u6b64\u9898\n\n\u7136\u540e\u6162\u6162\u5c31\u60f3\u5230\u4e00\u79cd\u8be1\u5f02\u7684\u505a\u6cd5\uff0c\u5148\u8bb0\u5f55\u4e00\u4e0b**\u524d\u7f00\u5f02\u6216\u548c**\uff0c\u7136\u540e\u8003\u8651\u7b97\u51fa\u6bcf\u4e2a\u70b9\u4e3a\u53f3\u7aef\u70b9\u65f6\u7684**\u6700\u5927\u503c\u548c\u5de6\u7aef\u70b9**\n\n\u8fd9\u6837\u6709\u4e00\u4e2a\u597d\u5904\uff0c\u6211\u4eec\u6bcf\u6b21\u7528**\u5806**\u7ef4\u62a4\u8fd9$n$\u7684\u70b9\u4e3a\u53f3\u7aef\u70b9\u662f\u7b54\u6848\u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48\u76f4\u63a5\u7b97\u51fa\u524d$k$\u5927\u5373\u53ef\n\n\u90a3\u4e48\u8003\u8651\u5982\u4f55\u8ba1\u7b97\uff0c\u9996\u5148\u5982\u679c\u4e0d\u8003\u8651\u5220\u9664\u7684\u8bdd\u662f\u633a\u7b80\u5355\u7684\uff0c\u6211\u4eec\u5efa\u4e00\u68f5**\u53ef\u6301\u4e45\u53160/1Trie**\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u5728\u5bf9\u5e94\u7684Trie\u4e0a\u627e\u4e00\u4e2a\u6570\u548c\u5b83\u5f02\u6216\u503c\u6700\u5927\u5373\u53ef\uff08\u7c7b\u4f3c\u4e8e\u666e\u901a0/1Trie\uff09\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u6211\u4eec\u7edf\u8ba1\u5b8c\u4e00\u4e2a\u70b9\u7684\u503c\u65f6\u600e\u4e48\u5220\u9664\u80fd\uff0c\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\u4e00\u65e6\u5220\u9664\u4e0d\u662f\u5c31\u5168\u4e71\u4e86\u4e48\n\n\u5176\u5b9e\u4e0d\u4e00\u5b9a\uff0c\u7531\u4e8e\u8fd9\u91cc\u53ea\u5220\u4e00\u6761**\u5df2\u6dfb\u52a0\u8fc7\u7684\u94fe**\uff0c\u56e0\u6b64\u6709\u4e00\u79cd\u5947\u5999\u7684\u65b9\u6cd5\n\n\u6211\u4eec\u8bb0\u5f55\u5de6\u7aef\u70b9\u540e\u627e\u5230\u53f3\u7aef\u70b9\u6b64\u65f6\u7684Trie\u6839\u8282\u70b9\u7f16\u53f7\uff0c\u7136\u540e**\u65b0\u5f00\u4e00\u4e2a**\u53ef\u6301\u4e45\u53160/1Trie\uff0c\u7136\u540e\u76f4\u63a5\u5728\u6b64\u65f6\u7684\u7248\u672c\u4e0a\u5220\u53bb\u5de6\u7aef\u70b9\u5bf9\u5e94\u7684\u94fe\u5373\u53ef\n\n\u7531\u4e8e\u5806\u53ea\u9700\u8981\u53d6$k$\u6b21\u503c\uff0c\u56e0\u6b64\u6700\u591a\u591a\u4ea7\u751f$k$\u4e2a\u7248\u672c\uff0c\u6240\u4ee5\u8fd9\u90e8\u5206\u7684\u590d\u6742\u5ea6\u4e3a$(n+k)\\log \\max{a_i}$\n\n\u7136\u540e\u52a0\u4e0a\u5806\u7684$k\\log n$\u4e4b\u540e\u8fd8\u662f\u8f7b\u677e\u901a\u8fc7\u6b64\u9898\uff0c\u4e0d\u8fc7\u6ce8\u610f\u7248\u672c\u7684\u6570\u7ec4\u5927\u5c0f\u8981\u5f00\u5927\n\nCODE\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<queue>\n#define RI register int\n#define CI const int&\n#define Tp template <typename T>\nusing namespace std;\ntypedef unsigned int u32;\nconst int N=5e5+5,R=32;\nstruct data\n{\n    u32 val; int id;\n    inline data(const u32& Val=0,CI Id=0)\n    {\n        val=Val; id=Id;\n    }\n    friend inline bool operator < (const data& A,const data& B)\n    {\n        return A.val<B.val;\n    }\n}; priority_queue <data> hp; long long ans;\nint n,k,rt[N<<1],pos[N],cur; u32 a[N],pfx[N],ret;\nclass FileInputOutput\n{\n    private:\n        static const int S=1<<21;\n        #define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,S,stdin),A==B)?EOF:*A++)\n        char Fin[S],*A,*B;\n    public:\n        Tp inline void read(T& x)\n        {\n            x=0; char ch; while (!isdigit(ch=tc()));\n            while (x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));\n        }\n        #undef tc\n}F;\nclass Segment_Tree\n{\n    private:\n        struct segment\n        {\n            int ch[2],size;\n        }node[N*(R+1)<<1]; int tot;\n    public:\n        #define lc(x) node[x].ch[0]\n        #define rc(x) node[x].ch[1]\n        #define S(x) node[x].size\n        inline void build(int& now,CI dep=R-1)\n        {\n            now=++tot; S(now)=1; if (!~dep) return; build(lc(now),dep-1);\n        }\n        inline void insert(CI lst,int& now,const u32& num,CI mv,CI dep=R-1)\n        {\n            now=++tot; node[now]=node[lst]; S(now)+=mv; if (!~dep) return;\n            if ((num>>dep)&1u) insert(rc(lst),rc(now),num,mv,dep-1);\n            else insert(lc(lst),lc(now),num,mv,dep-1);\n        }\n        inline void query(CI now,const u32& num,CI dep=R-1)\n        {\n            if (!~dep) return; if (S(node[now].ch[((num>>dep)&1)^1]))\n            ret|=1u<<dep,query(node[now].ch[((num>>dep)&1)^1],num,dep-1);\n            else query(node[now].ch[(num>>dep)&1],num,dep-1);\n        }\n        #undef lc\n        #undef rc\n        #undef S\n}SEG;\nint main()\n{\n    //freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n    RI i; for (F.read(n),F.read(k),i=1;i<=n;++i) F.read(a[i]);\n    for (SEG.build(rt[0]),i=1;i<=n;++i)\n    {\n        pfx[i]=pfx[i-1]^a[i]; SEG.insert(rt[i-1],rt[i],pfx[i],1);\n        ret=0; SEG.query(rt[pos[i]=i],pfx[i]); hp.push(data(ret,i));\n    }\n    for (cur=n;k;--k)\n    {\n        data nw=hp.top(); hp.pop(); ans+=nw.val;\n        SEG.insert(rt[pos[nw.id]],rt[++cur],nw.val^pfx[nw.id],-1);\n        ret=0; SEG.query(rt[pos[nw.id]=cur],pfx[nw.id]); hp.push(data(ret,nw.id));\n    }\n    return printf(\"%lld\",ans),0;\n}\n```",
        "postTime": 1555334080,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "[\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P5283)\n\nUnbelievable!\u6211\u4e5f\u80fd\u81ea\u5df1a\u7701\u9009\u9898\u4e86\uff1f\n\n\u524d\u51e0\u5929\u521a\u521a\u505a\u8fc7\u4e00\u9053\u9898\uff1aBZOJ3689\u5f02\u6216\u4e4b\n\u5148\u8bb2\u8bb2\u8fd9\u9053\u9898\n#### \u3010BZOJ3689\u3011\u5f02\u6216\u4e4b\n##### Description\n\u7ed9\u5b9an\u4e2a\u975e\u8d1f\u6574\u6570A[1], A[2], \u2026\u2026, A[n]\u3002\n\u5bf9\u4e8e\u6bcf\u5bf9(i, j)\u6ee1\u8db31 <= i < j <= n\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u6570A[i] xor A[j]\uff0c\u8fd9\u6837\u5171\u6709n*(n-1)/2\u4e2a\u65b0\u7684\u6570\u3002\u6c42\u8fd9\u4e9b\u6570\uff08\u4e0d\u5305\u542bA[i]\uff09\u4e2d\u524dk\u5c0f\u7684\u6570\u3002\n\u6ce8\uff1axor\u5bf9\u5e94\u4e8epascal\u4e2d\u7684\u201cxor\u201d\uff0cC++\u4e2d\u7684\u201c^\u201d\u3002\n\n##### Input\n\u7b2c\u4e00\u884c2\u4e2a\u6b63\u6574\u6570 n,k\uff0c\u5982\u9898\u6240\u8ff0\u3002\n\u4ee5\u4e0bn\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793aA[i]\u3002\n\n##### Output\n \u5171\u4e00\u884ck\u4e2a\u6570\uff0c\u8868\u793a\u524dk\u5c0f\u7684\u6570\u3002\n\n##### Sample Input\n4 5\n1\n1\n3\n4\n##### Sample Output\n0 2 2 5 5\n##### HINT\n##### \u3010\u6837\u4f8b\u89e3\u91ca\u3011\n1 xor 1 = 0 (A[1] xor A[2])\n\n1 xor 3 = 2 (A[1] xor A[3])\n\n1 xor 4 = 5 (A[1] xor A[4])\n\n1 xor 3 = 2 (A[2] xor A[3])\n\n1 xor 4 = 5 (A[2] xor A[4])\n\n3 xor 4 = 7 (A[3] xor A[4])\n\n\u524d5\u5c0f\u7684\u6570\uff1a0 2 2 5 5\n##### \u3010\u6570\u636e\u8303\u56f4\u3011\n \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c2 <= n <= 100000\uff1b\n \n 1 <= k <= min{250000, n*(n-1)/2}\uff1b\n \n        0 <= A[i] < 2^31\n\n### solution\n\u5176\u5b9etrie\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u5f02\u6216\u7b2ck\u5927\u7684\n\n\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u5e73\u8861\u6811\u6c42kth\u7684\u65b9\u6cd5\uff0c\u5f00\u4e2asize\u7684\u6876\n\n\u628a\u6bcf\u4e2a\u6570\u4e0e\u5176\u4ed6\u6570\u5f02\u6216\u7684\u7b2ck\u5927\u6c42\u51fa\u6765\n\n\u7136\u540e\u7528\u4f18\u5148\u961f\u5217\uff0c\u5f00\u4e2a\u5c0f\u6839\u5806\uff0c\u5f53\u7528\u597d\u4e00\u4e2a\u6570\u4e0e\u5176\u4ed6\u6570\u7684\u5f02\u6216\u7b2ck\u5927\u65f6\uff0c\u628a\u7b2ck+1\u5927\u52a0\u5165\u5806\n\n\u4f1a\u6709\u91cd\u590d\uff0c\u4f1a\u51fa\u73b0\u7b97\u597dx ^ y\uff0c\u7136\u540e\u6765y ^ x\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u6bcf\u4e24\u4e2a\u53ea\u80fd\u7528\u4e00\u4e2a\n\n\u5177\u4f53\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 100010\nusing namespace std;\nstruct node{\n    int ans, a, id;\n    bool operator < (const node & x) const{\n        return ans > x.ans;\n    }\n};\npriority_queue <node> q;\nint n, m, size[maxn * 30], ch[maxn * 30][3], sz, a[maxn];\n  \ninline int read(){\n    int s = 0, w = 1;\n    char c = getchar();\n    for (; !isdigit(c); c = getchar()) if (c == '-') w = -1;\n    for (; isdigit(c); c = getchar()) s = (s << 1) + (s << 3) + (c ^ 48);\n    return s * w;\n}\n  \nvoid insert(int x){\n    int u = 0;\n    for (int i = 30; i >= 0; --i){\n        int c = (x & (1 << i)) != 0;\n        u = ch[u][c] ? ch[u][c] : ch[u][c] = ++sz;\n        ++size[u];\n    }\n}\n  \nint query(int x, int k){\n    int u = 0, ans = 0;\n    for (int i = 30; i >= 0; --i){\n        int c = (x & (1 << i)) != 0;\n        if (size[ch[u][c]] >= k) u = ch[u][c]; else ans += (1 << i), k -= size[ch[u][c]], u = ch[u][c ^ 1];\n        //\u5982\u679c\u6709k\u4ee5\u4e0a\u4e2a\u6570\u5f53\u524d\u6570\u4f4d\u4e0ex\u4e00\u6837\uff0c\u5f53\u7136\u9009\u62e9\u5f02\u6216\uff0c\u56e0\u4e3a\u8fd9\u6837\u6570\u4f4d\u4e0a\u5c31\u53d80\u4e86\uff0c\u5426\u5219\uff0c\u5f97\u4e0e\u5f53\u524d\u6570\u4f4d\u4e0a\u4e0e\u81ea\u5df1\u4e0d\u4e00\u6837\u7684\u6570\u5f02\u6216\n    }\n    return ans;\n}\n  \nint main(){\n    n = read(), m = read();\n    for (int i = 1; i <= n; ++i){\n        a[i] = read(); insert(a[i]);\n    }\n    for (int i = 1; i <= n; ++i){\n        node tmp;\n        tmp.ans = query(a[i], 2);\n        //\u53d6\u7b2c2\u5c0f\u662f\u56e0\u4e3a\u6700\u5c0f\u7684\u662f\u81ea\u5df1\u5f02\u6216\u81ea\u5df1\uff0c\u4e0d\u7b97\n        tmp.a = a[i], tmp.id = 2;\n        q.push(tmp);\n    }\n    for (int i = 1; i <= (m << 1); ++i){\n        node tmp = q.top(); q.pop();\n        if (i & 1) printf(\"%d\", tmp.ans);//\u6bcf\u4e24\u4e2a\u53ea\u80fd\u7528\u4e00\u4e2a\n        if (i & 1 && i < (m << 1) - 1) printf(\" \");//\u884c\u672b\u4e0d\u80fd\u6709\u7a7a\u683c\n        if (++tmp.id >= n) continue;//id++\n        tmp.ans = query(tmp.a, tmp.id);\n        q.push(tmp);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```\n\n\n#### \u7136\u540e\u5f00\u59cb\u8bb2\u8fd9\u9053\u5f02\u6216\u7cbd\u5b50\n## solution\n\u521a\u770b\u5b8c\u9898\u5c31\u611f\u89c9\u8ddf\u5f02\u6216\u4e4b\u975e\u5e38\u50cf\uff0c\u4e0d\u8fc7\u770b\u5230\u533a\u95f4\u5f02\u6216\u548c\u5c31\u5931\u671b\u4e86\uff0c\n\u56e0\u4e3a\u6211\u77e5\u9053\u4e0a\u4e00\u9898\u7684trie\u662f\u4e24\u4e2a\u6570\u5f02\u6216\u8d77\u6765\uff0c\u7136\u800c\u8fd9\u4e00\u9898\u662f\u5904\u7406\u4e00\u5806\u6570\u5f02\u6216\u8d77\u6765\n\n\u5509\uff0c\u597d\u50cf\u8fd9\u4e2a\u533a\u95f4\u5fc5\u987b\u8fde\u7eed\uff0c\u60f3\u5230\u4ec0\u4e48\uff1f\u524d\u7f00\u548c\uff01\n\n\u9884\u5904\u7406\u524d\u7f00\u5f02\u6216\u548c\uff0c[l,r]\u7684\u5f02\u6216\u548c\u5c31\u662f[1,r] ^ [1,l-1]\n\n\u90a3\u4e48\u6bcf\u4e00\u6bb5\u533a\u95f4\u7684\u5f02\u6216\u548c\u90fd\u53ef\u4ee5\u8868\u793a\u4e3a\u4e24\u4e2a\u524d\u7f00\u5f02\u6216\u548c\u7684\u5f02\u6216\u548c\uff08l=1\u7684\u60c5\u51b5\u65f6\uff0c\u8ba9[1,r]\u4e0e0\u5f02\u6216\uff09\n\n\u4f46\u662f\u4e0a\u4e00\u9898\u662f\u5904\u7406\u524dk\u5c0f\uff0c\u8fd9\u4e00\u9898\u6c42\u524dk\u5927\uff0c\u6ca1\u5173\u7cfb\uff0c\u524dk\u5927\u5c31\u662f\u5012\u6570k\u5c0f ^ - ^\n\u5316\u5f52\u5230\u4e0a\u4e00\u9898\n\n\u53e6\u5916\uff0c\u4e0d\u8981\u5fd8\u4e86long long\n\nCode\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 500010\n#define int long long\nusing namespace std;\nstruct node{\n\tint a, ans, id;\n\tbool operator < (const node & x) const{\n\t\treturn ans < x.ans;\n\t}\n};\npriority_queue <node> q;\nint a[maxn], n, m, size[maxn * 31], sz, ch[maxn * 31][2];\n\ninline int read(){\n\tint s = 0, w = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') w = -1;\n\tfor (; isdigit(c); c = getchar()) s = (s << 1) + (s << 3) + (c ^ 48);\n\treturn s * w;\n}\n\nvoid insert(int x){\n\tint u = 0;\n\tfor (int i = 31; i >= 0; --i){\n\t\tint c = (x & (1 << i)) != 0;\n\t\t++size[u = ch[u][c] ? ch[u][c] : ch[u][c] = ++sz];\n\t}\n}\n\nint query(int x, int k){\n\tint u = 0, ans = 0;\n\tfor (int i = 31; i >= 0; --i){\n\t\tint c = (x & (1 << i)) != 0;\n\t\tif (size[ch[u][c]] >= k) u = ch[u][c]; else k -= size[ch[u][c]], ans += (1LL << i), u = ch[u][c ^ 1];\n\t}\n\treturn ans;\n}\n//\u8ddf\u4e0a\u4e00\u9898\u4e00\u6837\u7684\u5957\u8def\n\nsigned main(){\n\tn = read(), m = read();\n\ta[0] = 0; insert(0);\n\tfor (int i = 1; i <= n; ++i){\n\t\tint x = read();\n\t\tinsert(a[i] = a[i - 1] ^ x);//\u524d\u7f00\u5f02\u6216\u548c\n\t}\n\tfor (int i = 0; i <= n; ++i){\n\t\tnode tmp;\n\t\ttmp.ans = query(a[i], n + 1);//\u56e0\u4e3a0\u4e5f\u53c2\u4e0e\uff0c\u6240\u4ee5\u603b\u5171\u6709n+1\u4e2a\u6570\u53c2\u4e0e\uff0c\u6240\u4ee5\u53d6\u7b2cn+1\u5c0f\u4e2a\n\t\ttmp.a = a[i], tmp.id = n + 1;\n\t\tq.push(tmp);\n\t}\n\tint ans = 0;\n\tfor (int i = 1; i <= (m << 1); ++i){\n\t\tnode tmp = q.top(); q.pop();\n\t\tif (i & 1) ans += tmp.ans;\n\t\t--tmp.id;\n\t\tif (tmp.id == 1) continue;\n\t\ttmp.ans = query(tmp.a, tmp.id);\n\t\tq.push(tmp);\n\t}\n\tprintf(\"%lld\\n\", ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1555070194,
        "uid": 51719,
        "name": "ModestCoder_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "\u5206\u6790\u9898\u610f\uff0c\u5373\u627e\u51fa$n$\u4e2a\u6570\u4e2d\u4e92\u4e0d\u76f8\u540c\u4e14\u5f02\u6216\u548c\u6700\u5927\u7684\u524d$k$\u6bb5\u533a\u95f4\u3002\n\n\u7528\u5f02\u6216\u524d\u7f00\u548c$s[i]$\u8868\u793a$a[1]\\oplus a[2]\\oplus ... \\oplus a[i]$\u3002\u6839\u636e\u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff0c\u533a\u95f4$[l,r]$\u7684\u5f02\u6216\u548c\u5373\u4e3a$s[r]\\oplus s[l-1]$\u3002\n\n\u5c06$s[1]$\u5230$s[n]$\u4f9d\u6b21\u63d2\u5165$01trie$\u6811\u4e2d\uff0c\u6bcf\u6b21\u627e\u51fa\u5bf9\u4e8e\u56fa\u5b9a\u7684\u53f3\u7aef\u70b9$r$\uff0c\u4e0e$s[r]$\u5f02\u6216\u503c\u6700\u5927\u7684$s[l]$\u3002\u663e\u7136\uff0c\u6b64\u6b21\u64cd\u4f5c\u627e\u5230\u7684\u662f\u56fa\u5b9a\u53f3\u7aef\u70b9\u4e3a$r$\u65f6\u7684\u6700\u5927\u533a\u95f4\u5f02\u6216\u548c\u3002\n\n\u5c06\u6bcf\u4e2a\u4e0d\u540c\u7684$r$\u503c\u6240\u5bf9\u5e94\u7684\u6700\u5927\u533a\u95f4\u5f02\u6216\u548c\u63d2\u5165\u5806\u4e2d\uff0c\u663e\u7136\u5806\u9876\u7684\u5143\u7d20\u5373\u4e3a$n$\u4e2a\u6570\u4e2d\u4efb\u610f\u533a\u95f4\u7684\u6700\u5927\u5f02\u6216\u548c\u3002\u53d6\u51fa\u5806\u9876\u5143\u7d20\uff0c\u5e76\u540c\u65f6\u5f97\u5230\u8fd9\u662f\u4ee5$r$\u4e3a\u53f3\u7aef\u70b9\u7684\u7b2c$1$\u5927\u533a\u95f4\u5f02\u6216\u548c\u3002\u5411\u5806\u4e2d\u63d2\u5165\u4ee5$r$\u4e3a\u53f3\u7aef\u70b9\u7684\u7b2c$2$\u5927\u533a\u95f4\u5f02\u6216\u548c\u3002\n\n\u5728\u67e5\u8be2\u4ee5$r$\u4e3a\u53f3\u7aef\u70b9\u7684\u7b2c$k$\u5927\u533a\u95f4\u5f02\u6216\u548c\u65f6\uff0c\u53ea\u9700\u7a0d\u5fae\u66f4\u6539\u5728$01trie$\u6811\u4e0a\u67e5\u627e\u7684\u65b9\u5f0f\u5373\u53ef\uff0c\u4e0e\u4e3b\u5e2d\u6811\u67e5\u8be2\u533a\u95f4\u7b2c$k$\u5c0f\u6570\u7684\u601d\u60f3\u7c7b\u4f3c\u3002\u7531\u4e8e\u9700\u8981\u8bbf\u95ee$01trie$\u6811\u7684\u5386\u53f2\u72b6\u6001\uff0c\u56e0\u6b64$01trie$\u9700\u8981\u53ef\u6301\u4e45\u5316\u3002\n\n\u6ce8\u610f\uff1a\u4ee5$r$\u4e3a\u53f3\u7aef\u70b9\u7684\u533a\u95f4\u5f02\u6216\u548c\u4e00\u5171\u53ea\u6709$r$\u4e2a\uff0c\u56e0\u6b64\u67e5\u8be2\u4ee5$r$\u4e3a\u53f3\u7aef\u70b9\u7684\u7b2c$r+1$\u5927\u533a\u95f4\u5f02\u6216\u548c\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\n\n\u53e6\u5916\uff0c\u5728\u5c06`(1<<d)`\u8fd9\u6837\u7684\u5f0f\u5b50\u8f6c`long long`\u65f6\uff0c\u4e0d\u80fd\u5199\u6210`(long long)(1<<d)`\uff0c\u800c\u662f`((long long)1<<d)`\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int MAXN=500005;\nconst int DEP=31;\nint N,M;\nll ans,s[MAXN];\nstruct State{\n    ll val;\n    int r,k;\n    bool operator <(const State& rhs) const {return val<rhs.val;}\n};\npriority_queue<State> q;\nstruct Node{\n    int son[2],sum;\n}trie[MAXN*(DEP+2)];\nint head[MAXN],cnt;\ninline void insert(Node c,Node& u,ll val,int d){\n    u.sum=c.sum+1;\n    if(d<0) return;\n    int x=(val>>d)&1;\n    u.son[!x]=c.son[!x];\n    insert(trie[c.son[x]],trie[u.son[x]=++cnt],val,d-1);\n}\ninline ll query(Node u,ll val,int d,int k){\n    if(d<0) return 0;\n    int x=(val>>d)&1;\n    int lsum=trie[u.son[!x]].sum;\n    if(lsum>=k)\n      \treturn ((ll)1<<d)+(ll)query(trie[u.son[!x]],val,d-1,k);\n    return (ll)query(trie[u.son[x]],val,d-1,k-lsum);\n}\nint main(){\n    trie[0].son[0]=trie[0].son[1]=trie[0].sum=0;\n    insert(trie[0],trie[head[0]=++cnt],0,DEP);\n    scanf(\"%d%d\",&N,&M);\n    for(register int i=1;i<=N;++i){\n        ll a;\n        scanf(\"%lld\",&a);\n        s[i]=s[i-1]^a;\n        insert(trie[head[i-1]],trie[head[i]=++cnt],s[i],DEP);\n        q.push((State){query(trie[head[i-1]],s[i],DEP,1),i,1});\n    }\n    for(register int i=1;i<=M;++i){\n        ans+=q.top().val;\n        int r=q.top().r,k=q.top().k;\n        q.pop();\n        if(k==r) continue;\n        q.push((State){query(trie[head[r-1]],s[r],DEP,k+1),r,k+1});\n    }\n    printf(\"%lld\",ans);\n    return 0;\n}\n```\n\n$p.s.$\u6d1b\u8c37\u8bc4\u6d4b\u673a\u6709\u70b9\u5c0f\u6162\uff0c\u4e0d\u5f00`O2`\u4f1a\u5c0f\u6982\u7387\u53d1\u751fTLE QwQ",
        "postTime": 1554825862,
        "uid": 116851,
        "name": "_\u98ce\u4f11\u4f4f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "\u8003\u573a\u4e0a\u641e\u51fa\u6765\u7684\u5947\u602a\u505a\u6cd5\n\n\u5e76\u4e0d\u77e5\u9053\u53ef\u6301\u4e45\u5316$trie$\u53ef\u4ee5\u505a\n\n\u9996\u5148\u663e\u7136\u628a$a_i$\u505a\u4e00\u4e2a\u524d\u7f00\u5f02\u6216\u548c\uff0c\u7136\u540e\u5c31\u53d8\u6210\u4e86\u4e24\u4e2a\u6570\u5f02\u6216\u7684\u524d$k$\u5927\u503c\n\n- \u6211\u4eec\u5148\u628a$trie$\u5efa\u51fa\u6765\n\n\u540c\u65f6\u5728\u53f6\u5b50\u8282\u70b9\u4e0a\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u4ee3\u8868\u7684\u6570\u662f\u591a\u5c11\u548c\u51fa\u73b0\u4e2a\u6570\n\n- \u5f00\u59cb\u64cd\u4f5c\n\n\u6211\u4eec\u7528\u4e00\u4e2a\u6307\u9488\u540c\u65f6\u6307$trie$\u4e0a\u4e24\u4e2a\u8282\u70b9\uff0c\u521d\u59cb\u65f6\u4e24\u4e2a\u6307\u9488\u6307\u5728**\u8d77\u59cb\u8282\u70b9**\uff08\u540e\u9762\u89e3\u91ca\uff09\u7684\u4e24\u4e2a\u513f\u5b50\u4e0a\n\n\u4e24\u4e2a\u8282\u70b9\u7684\u503c\u5f02\u6216\u8d77\u6765\u5c31\u662f\u8fd9\u4e2a\u6307\u9488\u5bf9\u5e94\u7684\u503c\n\n#### \u73b0\u5728\u6211\u4eec\u8ba9\u6307\u9488\u5f80\u4e0b\u8d70\n\n\u9996\u5148\u8ba9\u4e24\u4e2a\u6307\u9488\u5f80\u4e0d\u540c\u513f\u5b50\u8d70\uff0c\u8fd9\u6837\u5728\u8fd9\u4e00\u4f4d\u4e0a\u5b83\u4eec\u53ef\u4ee5\u5f02\u6216\u5f97\u5230$1$\uff0c\u7136\u540e\uff08$dfs$\u4e86\u4e0a\u4e00\u79cd\u60c5\u51b5\u540e\uff09\u518d\u5411\u76f8\u540c\u513f\u5b50\u8d70\n\n\u6ce8\u610f\u5f80\u4e0d\u540c\u513f\u5b50\u8d70\u53ef\u80fd\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019\u4e00\u4e2a\u6307\u9488\u8981\u53d8\u6210\u4e24\u4e2a\n\n#### \u8d70\u5230\u53f6\u5b50\u4e86\n\n\u6211\u4eec\u53d1\u73b0\u6240\u6709\u6307\u9488\u5bf9\u5e94\u7684**\u503c\u90fd\u662f\u4e00\u6837\u7684**\uff08\u800c\u4e14\u662f\u73b0\u5728(\u53bb\u6389\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684)\u80fd\u53d6\u5230\u7684\u6700\u5927\u503c\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u5728\u53f6\u5b50\u4e0a\u7edf\u8ba1\u4e0b\u6709\u591a\u5c11\u79cd\u5f97\u5230\u5f53\u524d\u503c\u7684\u65b9\u6848($\\sum \\text{\u6bcf\u4e2a\u6307\u9488\u4e24\u4e2a\u8282\u70b9\u7684}size\\text{\u4e4b\u79ef}$)\uff0c\u8ba1\u5165\u7b54\u6848\u5e76\u628a$k-=\\text{\u65b9\u6848\u6570}$\uff0c\u76f4\u5230$k==0$\n\n#### \u8d77\u59cb\u8282\u70b9\uff1f\n\n\u89c2\u5bdf\u4e00\u4e0b\u4e0a\u9762\u4e24\u4e2a\u8d70\u6cd5\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u6307\u9488\u7684\u4e24\u4e2a\u8282\u70b9\u4e00\u5b9a\u5728\u8d77\u59cb\u8282\u70b9\u4e24\u4fa7\uff0c\u90fd\u5728\u5176\u540c\u4e00\u4fa7\u7684\u6ca1\u8003\u8651\n\n- \u600e\u4e48\u8865\u4e0a\u8fd9\u4e9b\u60c5\u51b5\uff1f\n\n\u4ece$trie$\u7684\u6839\u5f00\u59cbbfs\uff0c\u6bcf\u6b21\u628a\u540c\u4e00\u5c42\u7684\u70b9\u540c\u65f6\u4f5c\u4e3a\u8d77\u59cb\u8282\u70b9\u8fdb\u884c$dfs$\uff0c\u8fd9\u6837\u5c31\u8986\u76d6\u4e86\u6240\u6709\u60c5\u51b5\n\n### \u6b63\u786e\u6027\uff1f\n\n\u4e00\u6b21$dfs$\u4e2d\uff0c\u6240\u6709\u6307\u9488\u5bf9\u5e94\u7684\u503c\u76f8\u540c\uff0c\u5e76\u4e14\u5bf9\u5e94\u7684\u503c\u662f**\u5355\u8c03\u4e0d\u4e0a\u5347**\u7684\uff08\u6839\u636e$dfs$\u7684\u8fc7\u7a0b\u5f88\u663e\u7136\uff09\n\n\u4e0d\u540c\u6b21\u7684$dfs$\u4e2d\uff0c\u8d77\u59cb\u8282\u70b9\u8d8a\u6765\u8d8a\u6df1\uff0c\u5c31\u662f\u8bf4\u521d\u59cb\u65f6\uff0c\u6307\u9488\u5bf9\u5e94\u7684\u503c**\u9ad8\u4f4d**\u7684$0$\u8d8a\u6765\u8d8a\u591a\uff0c\u800c**\u4f4e\u4f4d**\u53d6\u503c\u65b9\u6cd5\u4e00\u6837\uff0c\u6240\u4ee5\u6307\u9488\u5bf9\u5e94\u7684\u503c\u4e5f\u662f**\u5355\u8c03\u4e0d\u4e0a\u5347**\u7684\n\n- \u5c31\u662f\u8bf4\u6211\u4eec\u662f\u6309**\u4ece\u5927\u5230\u5c0f**\u8bbf\u95ee\u53ef\u80fd\u7684\u6570\u5e76\u8ba1\u5165\u7b54\u6848\uff0c\u6240\u4ee5\u7b54\u6848\u4e00\u5b9a\u662f\u6b63\u786e\u7684\n\n### \u65f6\u95f4\u590d\u6742\u5ea6\uff1f\n\n~~\u8fd9\u73a9\u610f\u770b\u8d77\u6765\u8fd9\u4e48\u66b4\u529b\u4f1a\u4e0d\u4f1a$TLE$?~~\n\n\u7136\u800c\u590d\u6742\u5ea6\u6211\u4e5f\u4e0d\u4f1a\u5206\u6790~~\u8fc7\u7a0b\u592a\u9b3c\u755c\u4e86~~\uff0c\u4f46\u73b0\u573a\u548c$luogu$\u4e0a\u90fd\u662f$O_2\\space 1s$\u8fc7\n\n\u4ee3\u7801\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#define size(x) (x?x->size:0)\nusing namespace std;\n\nlong long n,k,i,j;\n\nlong long a[500005],pw[40],ans;\n\nstruct node\n{\n\tnode *l,*r;\n\tlong long size,num;\n};\nnode *root;\nnode *new_node()\n{\n\tstatic node *pool,*p,*end=p;\n\tif(p==end)\n\t\tp=pool=(node*)malloc(sizeof(node)*1000000),end=p+1000000,memset(p,0,sizeof(node)*1000000);\n\treturn p++;\n}\nvoid insert(long long num,long long anum)\n{\n\tnode *now=root;\n\tfor(int i=32;i>=0;i--)\n\t{\n\t\tnow->size++;\n\t\tif(num&pw[i])\n\t\t{\n\t\t\tif(!now->r)\n\t\t\t\tnow->r=new_node();\n\t\t\tnow=now->r;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!now->l)\n\t\t\t\tnow->l=new_node();\n\t\t\tnow=now->l;\n\t\t}\n\t}\n\tnow->size++;now->num=anum;\n}\n\nvoid read(int &x)\n{\n\tstatic char rc;static int flag;\n\trc=getchar();flag=1;x=0;\n\twhile(!isdigit(rc))\n\t\tflag=(rc=='-'?-1:1),rc=getchar();\n\twhile(isdigit(rc))\n\t\tx=x*10+rc-'0',rc=getchar();\n\tx*=flag;\n}\nvoid read(long long &x)\n{\n\tstatic char rc;static int flag;\n\trc=getchar();flag=1;x=0;\n\twhile(!isdigit(rc))\n\t\tflag=(rc=='-'?-1:1),rc=getchar();\n\twhile(isdigit(rc))\n\t\tx=x*10+rc-'0',rc=getchar();\n\tx*=flag;\n}\n\npair<node*,node*> q[35][500005];\nlong long len[35];\n\nvoid dfs(int deep)\n{\n\tif(!k||!len[deep])\n\t\treturn;\n\tif(deep==1)\n\t{\n\t\tlong long cnt=0,num=0;\n\t\tfor(int i=1;i<=len[deep];i++)\n\t\t{\n\t\t\tcnt+=size(q[deep][i].first)*size(q[deep][i].second);\n\t\t\tif(q[deep][i].first&&q[deep][i].second)\n\t\t\t\tnum=(q[deep][i].first->num^q[deep][i].second->num);\n\t\t}\n\t\tans+=min(k,cnt)*num;\n\t\tk-=min(k,cnt);\n\t\tlen[deep]=0;\n\t\treturn;\n\t}\n\tfor(int i=1;i<=len[deep];i++)\n\t{\n\t\tif(!q[deep][i].first||!q[deep][i].second)\n\t\t\tcontinue;\n\t\tlen[deep-1]++;q[deep-1][len[deep-1]]=make_pair(q[deep][i].first->l,q[deep][i].second->r);\n\t\tlen[deep-1]++;q[deep-1][len[deep-1]]=make_pair(q[deep][i].first->r,q[deep][i].second->l);\n\t}\n\tdfs(deep-1);\n\tfor(int i=1;i<=len[deep];i++)\n\t{\n\t\tif(!q[deep][i].first||!q[deep][i].second)\n\t\t\tcontinue;\n\t\tlen[deep-1]++;q[deep-1][len[deep-1]]=make_pair(q[deep][i].first->l,q[deep][i].second->l);\n\t\tlen[deep-1]++;q[deep-1][len[deep-1]]=make_pair(q[deep][i].first->r,q[deep][i].second->r);\n\t}\n\tdfs(deep-1);\n\tlen[deep]=0;\n}\n\nqueue<node*> qu;\nqueue<int> qdp;\n\nint main()\n{\n\tread(n);read(k);\n\tfor(i=1;i<=n;i++)\n\t\tread(a[i]);\n\tfor(i=1;i<=n;i++)\n\t\ta[i]^=a[i-1];\n\tpw[0]=1;\n\tfor(i=1;i<=35;i++)\n\t\tpw[i]=pw[i-1]*2;\n\troot=new_node();\n\tfor(i=0;i<=n;i++)\n\t\tinsert(a[i],a[i]);\n\t\n\tnode *now;int nx,la=100;\n\tqu.push(root);qdp.push(33);\n\twhile(!qu.empty())\n\t{\n\t\tnow=qu.front();nx=qdp.front();qu.pop();qdp.pop();\n\t\tif(nx!=la)\n\t\t{\n\t\t\tdfs(la);\n\t\t\tlen[la]=0;\n\t\t}\n\t\tlen[nx]++;q[nx][len[nx]]=make_pair(now->l,now->r);\n\t\tif(now->l)\n\t\t\tqu.push(now->l),qdp.push(nx-1);\n\t\tif(now->r)\n\t\t\tqu.push(now->r),qdp.push(nx-1);\n\t\tla=nx;\n\t}\n\tq[33][1]=make_pair(root->l,root->r);len[33]=1;\n\tdfs(33);\n\tcout<<ans;\n\treturn 0;\n}\n```\n\n\n------------\n\n- \u65e0\u5173\u9898\u89e3\u7684\u5410\u69fd\n\n\u7136\u800c\u8fd9\u4e2a\u9898\u6211\u5728\u73b0\u573a\u53ea\u62ff\u4e86$40$(\u6ce8\u610f\u66b4\u529b\u5206$60$)\uff0c\u56e0\u4e3a\u6211\u5199\u5b8c\u4ee5\u540e\u6ca1\u65f6\u95f4\u5bf9\u62cd\uff0c\u5c31\u6570\u636e\u5206\u6cbb\uff0c$n\\le 1000$\u76f4\u63a5$n^2\\log n$\u66b4\u529b\u5904\u7406\n\n\u7136\u540e...\n```cpp\nstatic long long num[1000005],cnt;\n//...\nsort(num+1,num+1+cnt,greater<int>());\n```\n\u7528$int$\u6bd4\u8f83\u5668\u6bd4\u8f83$long long$\uff0c\u7ed3\u679c\u6392\u5728\u6700\u524d\u9762\u7684\u5168\u662f\u63a5\u8fd1$2^{31}$\u7684\u6570\u800c\u4e0d\u662f\u771f\u7684\u6700\u5927\u503c\n\n\u7136\u540e\u5c31\u6302\u4e86$60$\u7684\u66b4\u529b\u5206\n\n#### (\u6570\u636e)\u5206\u6cbb\u5343\u4e07\u6761\uff0c\u5199\u5bf9\u7b2c\u4e00\u6761\n\n#### \u66b4\u529b\u4e0d\u89c4\u8303\uff0c\u5199\u6302\u4e24\u884c\u6cea",
        "postTime": 1554767977,
        "uid": 9517,
        "name": "a2956331800",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u50cf\u6781\u4e86NOI2010\u8d85\u7ea7\u94a2\u7434\uff0c\u5b9e\u9645\u4e0a\u5199\u6cd5\u6765\u8bf4\uff0c\u9664\u4e86\u628a\u4e3b\u5e2d\u6811\u6362\u6210\u53ef\u6301\u4e45\u5316trie\uff0c\u628a\u52a0\u6cd5\u6362\u6210\u5f02\u6216\uff0c\u5176\u4f59\u6ca1\u6709\u4efb\u4f55\u533a\u522b\uff0c\u53ef\u4ee5\u8bf4\u662f\u9001\u5c3d\u4e86\u6e29\u6696(\n\n\u505a\u6cd5\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5b9a\u4e49sum[r] = sum[1] ^ sum[2] ^ ... sum[r - 1] ^ sum[r], \u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u53f3\u7aef\u70b9r\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u77e5\u90531 - r\u91cc\u9762\u7684\u7b2ck\u5927\u5f02\u6216\u503c\uff0c\u505a\u6cd5\u662f\u6211\u4eec\u53bb\u627e\u4e0esum[r]\u5f02\u6216\u540e\u80fd\u591f\u5f97\u5230\u7b2ck\u5927\u7684sum[i], 0 <= i <= r - 1,\u8fd9\u4e2a\u53ea\u9700\u8981\u901a\u8fc7\u53ef\u6301\u4e45\u5316trie\u5c31\u80fd\u505a\u5230\u3002\u90a3\u4e48\u6211\u4eec\u8bbe\u4e09\u5143\u7ec4(v, p, k)\u8868\u793a\u5f53\u53f3\u7aef\u70b9\u4e3ap\u65f6\uff0c\u7b2ck\u5927\u5f02\u6216\u503c\u4e3av\u3002\u7136\u540e\u6211\u4eec\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u8fd9\u4e2a\u4e09\u5143\u7ec4\uff0c\u6bcf\u6b21\u53d6\u51fa\u6765\u4e4b\u540e\u63a5\u7740\u53d6k + 1\u5927\uff0c\u8fd9\u6837\u5c31\u80fd\u5f97\u5230\u524dk\u5927\u503c\u3002\u4e0d\u8fc7\u7531\u4e8e\u4e0d\u60f3\u5199\u4e09\u5143\u7ec4\uff0c\u6240\u4ee5\u53ef\u4ee5\u53ea\u7528pair\u6765\u5199\u4e8c\u5143\u7ec4\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u7aef\u70b9\uff0c\u7528\u6570\u7ec4\u8bb0\u5f55\u53d6\u5230\u7b2c\u51e0\u5927\uff0c\u7136\u540e\u6bcf\u6b21+1\u5c31\u884c\u4e86\u3002\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u611f\u89c9\u901f\u5ea6\u6709\u70b9\u6162\uff0c\u5c1d\u8bd5\u6027\u4f18\u5316\u597d\u50cf\u4e5f\u4e0d\u884c\u3002\n```cpp\n//author Eterna\n#define Hello the_cruel_world!\n#pragma GCC optimize(2)\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<map>\n#include<set>\n#include<queue>\n#include<stack>\n#include<utility>\n#include<cmath>\n#include<climits>\n#include<deque>\n#include<functional>\n#include<complex>\n#include<numeric>\n#include<unordered_map>\n#define max(x,y) ((x)>(y)?(x):(y))\n#define min(x,y) ((x)<(y)?(x):(y))\n#define Pi acos(-1.0)\n#define ABS(x) ((x) >= 0 ? (x) : (-(x)))\n#define pb(x) push_back(x)\n#define lowbit(x) (x & -x)\n#define FRIN freopen(\"C:\\\\Users\\\\Administrator.MACHENI-KA32LTP\\\\Desktop\\\\in.txt\", \"r\", stdin)\n#define FROUT freopen(\"C:\\\\Users\\\\Administrator.MACHENI-KA32LTP\\\\Desktop\\\\out.txt\", \"w\", stdout)\n#define FAST ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n#define outd(x) printf(\"%d\\n\", x)\n#define outld(x) printf(\"%lld\\n\", x)\n#define il inline\n#define ls(x) arr[x].child[0]\n#define rs(x) arr[x].child[1]\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef pair<ll, int> pli;\nconst int maxn = 5e5;\nconst int INF = 0x7fffffff;\nconst int mod = 1e9 + 7;\nconst double eps = 1e-7;\ninline int read_int() {\n\tchar c;\n\tint ret = 0, sgn = 1;\n\tdo { c = getchar(); } while ((c < '0' || c > '9') && c != '-');\n\tif (c == '-') sgn = -1; else ret = c - '0';\n\twhile ((c = getchar()) >= '0' && c <= '9') ret = ret * 10 + (c - '0');\n\treturn sgn * ret;\n}\ninline ll read_ll() {\n\tchar c;\n\tll ret = 0, sgn = 1;\n\tdo { c = getchar(); } while ((c < '0' || c > '9') && c != '-');\n\tif (c == '-') sgn = -1; else ret = c - '0';\n\twhile ((c = getchar()) >= '0' && c <= '9') ret = ret * 10 + (c - '0');\n\treturn sgn * ret;\n}\nstruct node {\n\tint child[2], cnt;\n}arr[50 * maxn + 5];\nint tot, root[maxn + 5], n, k, pos[maxn + 5];\nll coe[40], a[maxn + 5], res;\npriority_queue<pli> q;\nvoid Insert(int& now, int pre, ll v, int cnt = 32) {\n\tif (!now)now = ++tot;\n\tarr[now].cnt = arr[pre].cnt + 1;\n\tif (cnt < 0)return;\n\tint p = (v >> cnt) & 1ll;\n\tarr[now].child[p ^ 1] = arr[pre].child[p ^ 1];\n\tInsert(arr[now].child[p], arr[pre].child[p], v, cnt - 1);\n}\nll Query(int l, int r, int k, ll v, int cnt = 32) {\n\tif (cnt < 0)return 0;\n\tint p = (v >> cnt) & 1ll;\n\tint sum = arr[arr[r].child[p ^ 1]].cnt - arr[arr[l].child[p ^ 1]].cnt;\n\tif (sum >= k)return coe[cnt] + Query(arr[l].child[p ^ 1], arr[r].child[p ^ 1], k, v, cnt - 1);\n\telse return Query(arr[l].child[p], arr[r].child[p], k - sum, v, cnt - 1);\n}\nint main()\n{\n\tcoe[0] = 1;\n\tfor (int i = 1; i <= 33; ++i)coe[i] = 2ll * coe[i - 1];\n\tn = read_int(), k = read_int();\n\tfor (int i = 1; i <= n; ++i) {\n\t\ta[i] = read_ll();\n\t\ta[i] ^= a[i - 1];\n\t\tInsert(root[i], root[i - 1], a[i - 1]);\n\t}\n\tfor (int i = 1; i <= n; ++i) {\n\t\tll now = Query(root[0], root[i], 1, a[i]);\n\t\tq.push(pli(now, i));\n\t\tpos[i] = 1;\n\t}\n\tfor (int i = 1; i <= k; ++i) {\n\t\tpli now = q.top();\n\t\tq.pop();\n\t\tres += now.first;\n\t\tif (pos[now.second] <= now.second) {\n\t\t\t++pos[now.second];\n\t\t\tll u = Query(root[0], root[now.second], pos[now.second], a[now.second]);\n\t\t\tq.push(pli(u, now.second));\n\t\t}\n\t}\n\toutld(res);\n\t//system(\"pause\");\n\treturn 0;\n}\n```\n",
        "postTime": 1554649279,
        "uid": 106178,
        "name": "Forsaken2020",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5283 \u3010[\u5341\u4e8c\u7701\u8054\u80032019]\u5f02\u6216\u7cbd\u5b50\u3011"
    }
]