[
    {
        "content": "\u53d1\u73b0\u81ea\u5df1\u96be\u9898\u505a\u591a\u4e86\uff0c\u53cd\u4e0d\u4f1a\u7b80\u5355\u9898\u3002\n\n## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6709 $n$ \u4e2a\u7ed3\u70b9\u548c $m$ \u6761\u8fb9\u7684\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u6bcf\u4e2a\u7ed3\u70b9 $i$ \u4e0a\u6709 $c_i$ \u5934\u5976\u725b\uff0c $1$ \u53f7\u7ed3\u70b9\u4e3a\u5bb6\uff0c\u6bcf\u6b21\u56de\u5bb6\u5976\u725b\u4f1a\u8d70\u4e00\u6761\u6700\u77ed\u7684\u8def\u5f84\uff0c\u5982\u679c\u6709\u591a\u6761\u957f\u5ea6\u76f8\u540c\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5219\u5976\u725b\u4f1a\u8d70\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u4e00\u6761\u3002\u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u589e\u52a0\u4e00\u6761\u4ece $1$ \u5230\u4efb\u610f\u7ed3\u70b9\u7684\u957f\u5ea6\u4e3a\u7ed9\u5b9a\u503c $T$ \u7684\u4e00\u6761\u8fb9\u3002\u5982\u679c\u4e00\u5934\u5976\u725b\u5728\u5e73\u65f6\u56de\u5bb6\u7684\u8def\u4e0a\u7ecf\u8fc7\u4e86\u8fd9\u6761\u8fb9\u76f8\u8fde\u7684\u7ed3\u70b9\uff0c\u4e14\u8fd9\u6761\u8fb9\u80fd\u4f7f\u5176\u56de\u5bb6\u8def\u5f84\u66f4\u77ed\uff0c\u5219\u5176\u4f1a\u8d70\u8fd9\u6761\u8fb9\u3002\u6c42\u80fd\u4f7f\u6240\u6709\u5976\u725b\u8d70\u7684\u8def\u5f84\u957f\u5ea6\u548c\u7684\u53d8\u5316\u7684\u6700\u5927\u503c\u3002\n\n## \u89e3\u9898\u601d\u8def\n\n\u4ece\u7ed3\u70b9 $1$ \u5f00\u59cb\u505a\u6700\u77ed\u8def\uff0c\u5efa\u51fa\u6700\u77ed\u8def\u6811\uff0c DFS \u904d\u5386\u6700\u77ed\u8def\u6811\uff0c\u5bf9\u6700\u77ed\u8def\u6811\u4e0a\u7684\u4e00\u70b9\uff0c\u5176\u5b50\u6811\u4e2d\u7684\u70b9\u5728\u56de\u5bb6\u7684\u8fc7\u7a0b\u4e2d\u90fd\u4f1a\u7ecf\u8fc7\u8be5\u70b9\u3002\u6b64\u65f6\u82e5\u8fde\u63a5\u4e00\u6761\u4ece\u8be5\u8282\u70b9\u5230 $1$ \u53f7\u7ed3\u70b9\u7684\u8fb9\uff0c\u5219\u5176\u6700\u77ed\u8def\u957f\u5ea6\u603b\u548c\u4f1a\u51cf\u5c11 $siz\\times(dist_x -T))$ \u3002\n\n\u5efa\u6700\u77ed\u8def\u6811\u65f6\uff0c\u7531\u4e8e\u5976\u725b\u4f1a\u5728\u8def\u5f84\u957f\u5ea6\u76f8\u7b49\u7684\u60c5\u51b5\u4e0b\u8d70\u5b57\u5178\u5e8f\u66f4\u5c0f\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u7684\u65b9\u6cd5\u662f **\u4ece\u5c0f\u5230\u5927** \u679a\u4e3e\u8d77\u70b9 $x$ \uff0c\u904d\u5386\u51fa\u8fb9\u8bbe\u4e3a\u6307\u5411 $y$ \uff0c\u5982\u679c\u6ee1\u8db3\u6700\u77ed\u8def\u6761\u4ef6\uff08\u5373 $dist_y=dist_x+edgeweight$ \uff09\u4e14\u8fd9\u4e2a\u70b9\u4e4b\u524d\u6ca1\u6709\u88ab\u5176\u4ed6\u8282\u70b9\u8fde\u8fc7\uff08\u8fde\u8fc7\u5219\u4e00\u5b9a\u66f4\u5c0f\u66f4\u4f18\uff09\uff0c\u5219\u8fde\u4e00\u6761\u8fb9\uff0c\n\n**\u6ce8\u610f $c_i$ \u6709\u53ef\u80fd\u662f $0$ \u3002\u5728 DFS \u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u80fd\u6309\u7167 $siz$ \u7684\u503c\u5224\u65ad\u662f\u5426\u8bbf\u95ee\u8fc7\u7ed3\u70b9\uff0c\u800c\u5e94\u589e\u52a0\u4e00\u4e2a\u9644\u52a0\u6570\u7ec4\uff0c\u6211\u88ab\u8fd9\u4e2a\u5751\u4e86\u597d\u4e45\u3002**\n\n\u8bf7\u4f7f\u7528 ```long long``` \u3002\n\n## \u4ee3\u7801\u5c55\u793a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<vector>\nusing namespace std;\nconst int maxn=100010;\ntypedef long long ll;\nll n,m,c[maxn],T,cur,h[maxn],nxt[maxn],p[maxn],w[maxn],u,v,t;\nll dist[maxn],siz[maxn],ans;\nbool tf[maxn];\nstruct node\n{\n    ll id,v;\n    bool operator<(node x)const{return v>x.v;}\n};\npriority_queue<node>q;\nvector<int>g[10010];\nvoid add_edge(ll u,ll v,ll t)\n{\n    cur++;\n    nxt[cur]=h[u];\n    h[u]=cur;\n    p[cur]=v;\n    w[cur]=t;\n}\nbool f[maxn];\nvoid dfs(int x)\n{\n    siz[x]=c[x];f[x]=true;\n    for(vector<int>::iterator it=g[x].begin();it!=g[x].end();it++)\n    if(!f[*it])dfs(*it),siz[x]+=siz[*it];\n    ans=max(ans,siz[x]*(dist[x]-T));\n}\nint main()\n{\n    scanf(\"%lld%lld%lld\",&n,&m,&T);\n    for(int i=1;i<=n;i++)scanf(\"%lld\",c+i);\n    while(m--)scanf(\"%lld%lld%lld\",&u,&v,&t),add_edge(u,v,t),add_edge(v,u,t);\n    q.push({1,0});\n    while(!q.empty())\n    {\n        node x=q.top();q.pop();\n        if(tf[x.id])continue;\n        tf[x.id]=true;dist[x.id]=x.v;\n        for(int j=h[x.id];j;j=nxt[j])q.push({p[j],x.v+w[j]});\n    }\n    memset(tf,0,sizeof tf);\n    for(int i=1;i<=n;i++)for(int j=h[i];j;j=nxt[j])\n    if(dist[p[j]]==dist[i]+w[j]&&!tf[p[j]])tf[p[j]]=true,\n    g[i].push_back(p[j]),g[p[j]].push_back(i);\n    dfs(1);\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1551526527,
        "uid": 43486,
        "name": "hsfzLZH1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5201 \u3010[USACO19JAN]Shortcut\u3011"
    },
    {
        "content": "**[\u5b89\u5229\u4e00\u4e0b\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/linzhengmin/p/11039674.html)**  \n**\u672c\u9898\u7b97\u6cd5\uff1a\u6700\u77ed\u8def\u6811**  \n\u8fd9\u662f\u4e2a\u5565\u73a9\u610f\u5462\uff0c\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u56fe\uff0c\u6784\u9020\u4e00\u68f5\u6811\uff0c\u4f7f\u4ece\u6e90\u70b9\u5f00\u59cb\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\u4e0e\u539f\u56fe\u4e00\u6a21\u4e00\u6837\u3002\u600e\u4e48\u505a\u5462\uff0c\u8dd1\u4e00\u8fb9Dijkstra\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u70b9u\uff0c\u679a\u4e3e\u5b83\u7684\u8fb9\uff0c\u8bbe\u5f53\u524d\u7684\u8fb9\u4e3acur_edge\uff0c\u5982\u679cdis[u]+cue_edge\u7684\u957f\u5ea6=dis[cur_edge\u7684\u7ec8\u70b9]\uff0c\u90a3\u4e48\u663e\u7136\u8fd9\u6761\u8fb9\u5e94\u8be5\u73c2\u4ee5\u662f\u6700\u77ed\u8def\u6811\u4e0a\u7684\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u6253\u4e00\u4e2a\u6807\u8bb0\u8868\u793acur_edge\u7684\u7ec8\u70b9\u4e0d\u80fd\u518d\u88ab\u52a0\u8fb9\u4e86\uff0c\u9898\u76ee\u8981\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u663e\u7136u\u4ece1\u5230n\u679a\u4e3e\u73c2\u4ee5\u89e3\u51b3\u95ee\u9898\u3002  \n\u5efa\u597d\u6811\u4ee5\u540e\u8dd1\u4e00\u8fb9DFS\uff0c\u6211\u4eec\u77e5\u9053\u5f53\u524d\u8282\u70b9u\u4e0a\u8fde\u8fb9\u7684\u8d21\u732e\u662f$(dis[u] - t) \\times$\u4ee5$u$\u4e3a\u6839\u7684\u5b50\u6811\u7684\u725b\u7684\u4e2a\u6570\uff0c\u627e\u5230\u8d21\u732e\u6700\u5927\u7684\u70b9\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <set>\n#include <map>\n#define ll long long\n\nusing namespace std;\n\nll read(){\n    ll x = 0; int zf = 1; char ch = ' ';\n    while (ch != '-' && (ch < '0' || ch > '9')) ch = getchar();\n    if (ch == '-') zf = -1, ch = getchar();\n    while (ch >= '0' && ch <= '9') x = x * 10 + ch - '0', ch = getchar(); return x * zf;\n}\n\nstruct Edge{\n    int from, to, next; ll dis;\n} edges[1000001];\n\nint head[300001], edge_num = 0;\n\nll dis[300001];\n\ninline void addEdge(int u, int v, ll w){\n    edges[++edge_num] = (Edge){u, v, head[u], w};\n    head[u] = edge_num;\n}\n\nset< pair<ll, int> > que;\nint n, t, s = 1;\n\nvoid dijkstra(){\n    for (int i = 1; i <= n; ++i)\n        dis[i] = (1ll << 62);\n    dis[s] = 0; que.insert(make_pair(0, s));\n    pair<ll, int> uu; int u, v;\n    while (!que.empty()){\n        uu = *que.begin(); que.erase(uu);\n        u = uu.second;\n        for (int c_e = head[u]; c_e; c_e = edges[c_e].next){\n            v = edges[c_e].to;\n            if (dis[u] + edges[c_e].dis < dis[v]){\n                que.erase(make_pair(dis[v], v));\n                dis[v] = dis[u] + edges[c_e].dis;\n                que.insert(make_pair(dis[v], v));\n            }\n        }\n    }\n}\n\nvector<int> vec[100001];\nll ans = 0;\nint a[100001];\nint vis[100001];\n\nint DFS(int u){\n    int v, cnt = 0; vis[u] = 1;\n    for (int i = 0; i < vec[u].size(); ++i){\n        v = vec[u][i];\n        if (!vis[v])\n            cnt += DFS(v);\n    }\n    cnt += a[u];\n    ans = max(ans, (dis[u] - t) * cnt);\n    return cnt;\n}\n\nint v2[100001];\n\nsigned main(){\n    int m; n = read(), m = read(), t = read();\n    for (int i = 1; i <= n; ++i) a[i] = read();\n    int u, v; ll w;\n    for (int i = 1; i <= m; ++i){\n        u = read(), v = read(), w = read();\n        addEdge(u, v, w), addEdge(v, u, w);\n    }\n    dijkstra();\n    for(int i = 1; i <= n; ++i)\n        for(int c_e = head[i]; c_e; c_e = edges[c_e].next)\n            if(dis[edges[c_e].to] == dis[i] + edges[c_e].dis && !v2[edges[c_e].to]){\n                v2[edges[c_e].to] = 1;\n                vec[i].push_back(edges[c_e].to), vec[edges[c_e].to].push_back(i);\n            }\n    DFS(1);\n    printf(\"%lld\", ans);\n    return 0;\n}\n```",
        "postTime": 1560754734,
        "uid": 103956,
        "name": "linluke",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5201 \u3010[USACO19JAN]Shortcut\u3011"
    },
    {
        "content": "\u53ef\u4ee5\u7406\u89e3\u4e3a\u6700\u77ed\u8def\u6811\u677f\u5b50\u9898\uff1f\n\n\u65e2\u7136\u9898\u76ee\u8981\u6c42\u6700\u77ed\u8def\u90a3\u4e48\u80af\u5b9a\u5148\u6c42\u51fa\u6bcf\u4e00\u4e2a\u70b9\u5230 $1$ \u7684\u6700\u77ed\u8def\uff08dijkstra\uff09\uff0c\u7136\u540e\u628a\u6240\u6709\u5976\u725b\u7684\u8def\u5f84\u753b\u51fa\u6765\u2014\u2014\u6211\u544a\u8bc9\u4f60\uff0c\u8fd9\u662f\u4e00\u68f5\u6811\uff08\u5efa\u8bae\u624b\u753b\u4e00\u4e0b\uff09\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u65e2\u7136\u6bcf\u6761\u5976\u725b\u7684\u8def\u5f84\u662f\u5b9a\u4e86\u7684\uff0c\u6240\u4ee5\u6bcf\u6761\u5976\u725b\u5230 $1$ \u7684\u8def\u5f84\u662f\u552f\u4e00\u7684\uff0c\u5f53\u7136\u662f\u6811\uff0c\u662f\u4ee5 $1$ \u4e3a\u6839\u7684\u6811\u3002\n\n\u8fd9\u4e0d\u5c31\u7b80\u5355\u4e86\u561b\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9 $u$\uff0c\u8bbe $u$ \u5230 $1$ \u7684\u6700\u77ed\u8def\u662f $d_u$\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8fde\u63a5 $(u,1)$ \u83b7\u5f97\u7684\u5229\u76ca\u662f $\\max \\{0,(d(u)-t)\\times s(u)\\}$\uff0c\u5176\u4e2d $s$ \u4e3a $u$ \u5728\u6700\u77ed\u8def\u6811\u4e2d\u7684\u5b50\u6811\u7684\u5976\u725b\u603b\u6570\u91cf\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u53ea\u6709\u8fd9\u4e2a\u8282\u70b9\u5b50\u6811\u5185\u7684\u5976\u725b\u7684\u8def\u5f84\u4f1a\u7f29\u77ed\u3002\n\n\u6700\u540e\u6211\u4eec\u770b\u4ee3\u7801\u3002\u4ee3\u7801\u4e2d\u53d8\u91cf\u6709\u4e00\u70b9\u70b9\u5c0f\u6df7\u4e71 $a_i$ \u4ee3\u8868\u6bcf\u4e2a\u8282\u70b9\u7684\u5976\u725b\u6570\u91cf\uff0c$c_i$ \u4ee3\u8868\u8d70\u5230 $i$ \u7684\u5976\u725b\u4e0b\u4e00\u6b65\u53bb\u54ea\u91cc\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define rep(i,a,b) for(register int i=a;i<=b;i++)\nusing namespace std;\nconst int N=10009,M=50009;\n\nstruct edge {int to,nxt,w;}e[M*2][2]; int hd[N][2],tot;\nvoid add(int u,int v,int w,bool type) {\n\te[++tot][type]=(edge){v,hd[u][type],w}; hd[u][type]=tot;\n}\n\nstruct node {\n\tint u,val;\n\tbool operator < (const node &b) const {\n\t\treturn val>b.val;\n\t}\n};\nint d[N];\nvoid dijkstra(int n) {\n\tpriority_queue<node>q; memset(d,0x3f,sizeof(d));\n\tq.push((node){n,d[n]=0});\n\twhile(!q.empty()) {\n\t\tint u=q.top().u; q.pop();\n\t\tfor(int i=hd[u][0],v;i;i=e[i][0].nxt) {\n\t\t\tv=e[i][0].to;\n\t\t\tif(d[v]>d[u]+e[i][0].w)\n\t\t\t\td[v]=d[u]+e[i][0].w, q.push((node){v,d[v]});\n\t\t}\n\t}\n}\n\nint n,m,t,a[N],c[N],s[N],ans;\n\nvoid dfs(int u,int fa) {\n\ts[u]=a[u];\n\tfor(int i=hd[u][1],v;i;i=e[i][1].nxt) {\n\t\tif((v=e[i][1].to)==fa) continue;\n\t\tdfs(v,u);\n\t\ts[u]+=s[v];\n\t}\n\tans=max(ans,s[u]*(d[u]-t));\n}\n\nsigned main() {\n\tfreopen(\"shortcut.in\",\"r\",stdin);\n\tfreopen(\"shortcut.out\",\"w\",stdout);\n\tscanf(\"%lld%lld%lld\",&n,&m,&t);\n\trep(i,1,n) scanf(\"%lld\",&a[i]);\n\trep(i,1,m) {\n\t\tint u,v,w; scanf(\"%lld%lld%lld\",&u,&v,&w);\n\t\tadd(u,v,w,0), add(v,u,w,0);\n\t}\n\tdijkstra(1);\n\trep(u,1,n) for(int i=hd[u][0];i;i=e[i][0].nxt) {\n\t\tint v=e[i][0].to;\n\t\tif(d[u]>d[v]) continue;\n\t\tif(d[u]+e[i][0].w==d[v]) {\n\t\t\tif(!c[v]) c[v]=u;\n\t\t\telse if(c[v]>u) c[v]=u;\n\t\t}\n\t}\n\ttot=0;\n\trep(i,2,n) add(i,c[i],0,1),add(c[i],i,0,1);\n\tdfs(1,0);\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1594632923,
        "uid": 180652,
        "name": "_lgswdn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5201 \u3010[USACO19JAN]Shortcut G\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u7684\u8bdd\u3002\u3002\u6309\u7167\u9898\u610f\u505a\u5c31\u597d\u4e86\u3002\u3002\n\n\u5dee\u4e0d\u591a\u5c31\u662f\u5148\u8dd1\u4e00\u4e2aDijkstra\uff0c\u7136\u540e\u6309\u7167\u9898\u610f\u5efa\u51fa\u4e00\u9897\u6700\u77ed\u8def\u6811\uff0c\u8981\u6c42\u8fde\u7236\u8fb9\u4f18\u5148\u8fde\u7f16\u53f7\u5c0f\u7684\u3002\n\n\u7136\u540e\u5f04\u51fa\u4e86\u8fd9\u4e2a\uff0c\u6bcf\u4e00\u5934\u725b\u8d70\u7684\u65b9\u6848\u5c31\u51fa\u6765\u4e86\u3002(\u5728\u6811\u4e0a\u5c31\u662f\u5411\u6839\u8282\u70b9\u65b9\u5411\u8d70\u3002)\n\n\u8fd9\u6837\u7684\u8bdd\u5c31\u53ef\u4ee5\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u70b9\u7ecf\u8fc7\u4e86\u591a\u5c11\u725b\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u7528  \u8fd9\u4e2a\u70b9\u7ecf\u8fc7\u7684\u725b\u7684\u5934\u6570$\\ast($\u5f53\u524d\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb$-$\u4e00\u6761\u65b0\u8fb9\u7684\u957f\u5ea6$)$ \u66f4\u65b0\u7b54\u6848\u5c31\u597d\u4e86\u3002\n\n\u5199\u8d77\u6765\u7684\u8bdd\u3002\u3002\u8fd8\u662f\u7b97\u6bd4\u8f83\u7b80\u5355\u7684\u5427\u3002\u3002\n\n```\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define reg register\n#define ge getchar()\n#define Re read()\n#define FI \"shortcut.in\"\n#define FO \"shortcut.out\"\n#define MAXN 10000\n#define MAXM 100000\n\ninline int read() {\n\treg int x = 0, ch;\n\twhile(!isdigit(ch = ge)) ;\n\twhile(isdigit(ch)) x = (x << 1) + (x << 3) + (ch & 15), ch = ge;\n\treturn x;\n}\n\nstruct Node {\n\tint val, x;\n\tfriend bool operator < (reg Node a, reg Node b) { return a.val < b.val; }\n\tfriend bool operator > (reg Node a, reg Node b) { return a.val > b.val; }\n};\n\nint n;\nint m;\nint T;\n\nint dis[MAXN + 1];\nint p[MAXN + 1];\n\nint tot;\nint fi[MAXN + 1];\nint ne[MAXM + 1];\nint to[MAXM + 1];\nint le[MAXM + 1];\nint To[MAXN + 1];\nint Val[MAXN + 1];\nint in[MAXN + 1];\n\ninline void Link(reg int u, reg int v, reg int w) {\n\ttot++;\n\tto[tot] = v;\n\tle[tot] = w;\n\tne[tot] = fi[u];\n\tfi[u] = tot;\n}\n\ninline void dijsktra(reg int S) {\n\tmemset(dis, 63, sizeof(dis));\n\tbitset<MAXN + 1>Arrive; Arrive.reset();\n\tdis[S] = 0;\n\tpriority_queue<Node, vector<Node>, greater<Node> >q;\n\tq.push((Node){0, S});\n\twhile(!q.empty()) {\n\t\treg int x = q.top().x; q.pop();\n\t\tif(Arrive[x]) continue; Arrive[x] = 1;\n\t\tfor(reg int i = fi[x]; i; i = ne[i]) {\n\t\t\treg int u = to[i];\n\t\t\tif(dis[u] > dis[x] + le[i]) {\n\t\t\t\tdis[u] = dis[x] + le[i];\n\t\t\t\tq.push((Node){dis[u], u});\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tn = Re, m = Re, T = Re;\n\tfor(reg int i = 1; i <= n; i++) p[i] = Re;\n\tfor(reg int i = 1; i <= m; i++) {\n\t\treg int u = Re, v = Re, w = Re;\n\t\tLink(u, v, w); Link(v, u, w);\n\t}\n\tdijsktra(1);\n\tmemset(To, 63, sizeof(To));\n\tTo[1] = 1;\n\tfor(reg int i = 2; i <= n; i++) {\n\t\tfor(reg int j = fi[i]; j; j = ne[j]) {\n\t\t\tif(dis[i] == dis[to[j]] + le[j] && To[i] > to[j]) {\n\t\t\t\tTo[i] = to[j];\n\t\t\t\tVal[i] = dis[i] - T;\n\t\t\t}\n\t\t}\n\t\tin[To[i]]++;\n\t}\n\tqueue<int>q;\n\tfor(reg int i = 1; i <= n; i++) if(!in[i]) q.push(i);\n\treg long long res = 0;\n\twhile(!q.empty()) {\n\t\treg int x = q.front(); q.pop();\n\t\tres = max(res, 1LL * Val[x] * p[x]);\n\t\tin[To[x]]--; p[To[x]] += p[x];\n\t\tif(!in[To[x]]) q.push(To[x]);\n\t}\n\tcout << res << endl;\n\treturn 0;\n}\n```",
        "postTime": 1548589013,
        "uid": 20782,
        "name": "CYJian",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5201 \u3010[USACO19JAN]Shortcut\u3011"
    },
    {
        "content": "\u521a\u5f00\u59cb\u62ff\u5230\u8fd9\u9898\u7684\u65f6\u5019\u6211\u76f4\u63a5\u61f5\u903c\u4e86:\u5b57\u5178\u5e8f\u662f\u5565\u73a9\u610f,\u8fd9\u4e1c\u897f\u8c8c\u4f3c\u5f88\u9ad8\u5927\u5c1a\u7684\u4e9a\u5b50\n\n\u7136\u800c,\u8ba4\u771f\u8bfb\u4e86\u4e00\u4e0b\u9898\u540e,\u6211\u53d1\u73b0\u5176\u5b9e\u8fd9\u9053\u9898\u8ddf\u6211\u505a\u8fc7\u7684\u67d0\u4e9b\u9898\u5f88\u50cf\n\n\u6bd4\u5982: [timeline](https://www.luogu.com.cn/problem/P6145)\n\n\u53ef\u80fd\u5927\u4f6c\u4eec\u4f1a\u8bf4,\u8c8c\u4f3c\u8fd9\u9898\u8ddftimeline\u6ca1\u6709\u4e00\u6bdb\u94b1\u5173\u7cfb\u554a...\n\n\u5176\u5b9e,\u8fd9\u9053\u9898\u53ef\u4ee5\u7406\u89e3\u4e3a,\u7b97\u51fa\u6bcf\u4e2a\u70b9\u52301\u7684\u6700\u77ed\u8ddd\u79bb,\u7136\u540e\u8ba1\u7b97\u6bcf\u4e2a\u70b9\u5bf9\u70b91\u8fde\u7ebf\u6700\u5927\u80fd\u51cf\u5c11\u7684\u8ddd\u79bb\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86,\u4f60\u600e\u4e48\u77e5\u9053\u8fd9\u4e2a\u70b9\u8ddf1\u8fde\u7ebf\u540e\u6709\u51e0\u5934\u725b\u6539\u53d8\u4e86\u8def\u5f84?\n\n\u8fd9\u91cc\u5c31\u5f97\u5230\u4e86\u8fd9\u9898\u7684\u6838\u5fc3\u601d\u60f3:\u6211\u4eec\u53d1\u73b0,\u5976\u725b\u53ea\u6709\u5728\u8d70\u539f\u5148\u8def\u5f84\u65f6\u9047\u5230\u6377\u5f84\u624d\u4f1a\u53bb.\u4ed6\u4eec\u4e0d\u4f1a\u523b\u610f\u8d70\u53bb\u6377\u5f84.\n\n\u4e8e\u662f,\u8fd9\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a,\u6c42\u51fa(\u8fd9\u4e2a\u70b9\u5230\u70b91\u7684\u8ddd\u79bb-\u8fde\u8fb9\u7684\u8ddd\u79bb)*\u7ecf\u8fc7\u8fd9\u70b9\u7684\u5976\u725b\u7684\u6570\u91cf\u7684\u548c\n\n~~\u8bf4\u4eba\u8bdd~~\n\n**\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u7684\u6570\u91cf*\u4ece\u8fd9\u4e2a\u8282\u70b9\u7528\u6377\u5f84\u80fd\u8282\u7701\u7684\u8ddd\u79bb**\n\n\u8fd9\u6837\u4f1a\u597d\u7406\u89e3\u70b9\u5417?\n\n\u597d\u4e0b\u9762\u6b63\u5f0f\u5f00\u59cb\u89e3\u9898:\n\n1.\u6c42\u6700\u77ed\u8ddd\u79bb\n\n\u6a21\u677f\u9898,\u4ece\u70b91\u7528 $dijkstra$ \u6c42\u6700\u77ed\u8ddd\u79bb,\u8fd9\u4e2a\u4e0d\u8be6\u7ec6\u8bb2\n\n2.\u6c42\u5b50\u6811\n\n**\u6572\u91cd\u70b9:**\n\u8fd9\u91cc\u5c31\u5230\u4e86\u8ddftimeline\u76f8\u4f3c\u7684\u5730\u65b9\u4e86.\u6211\u4eec\u53d1\u73b0,\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u8fd8\u6ca1\u6709\u5904\u7406\u5b8c,\u90a3\u4e48\u6211\u4eec\u65e0\u6cd5\u7528\u8fd9\u4e2a\u70b9\u53bb\u66f4\u65b0\u4ed6\u7684\u7236\u8282\u70b9(\u5982\u679c\u65e0\u6cd5\u7406\u89e3\u53ef\u4ee5\u770b\u6211\u7684timeline\u7684\u89e3\u6cd5([timeline\u9898\u89e3](https://www.cnblogs.com/DannyXu/p/12388965.html)).\n\n\u6240\u4ee5,\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9,\u6211\u4eec\u5c06\u5176\u7236\u8282\u70b9\u8bbe\u4e3a\u4e0d\u53ef\u66f4\u65b0.\u7136\u540e,\u6211\u4eec\u5c06\u6240\u6709\u53ef\u4ee5\u66f4\u65b0\u7684\u8282\u70b9\u653e\u8fdb $queue$ \u91cc. \u6bcf\u5f53\u4e00\u4e2a\u5b50\u8282\u70b9\u8981\u66f4\u65b0\u7236\u8282\u70b9\u7684\u65f6\u5019,\u6211\u4eec\u5c06\u7236\u8282\u70b9\u7684\u5b50\u53f6\u6570\u91cf-1.\u5f53\u4e00\u4e2a\u7236\u8282\u70b9\u6ca1\u6709\u5b50\u53f6\u4e86,\u90a3\u4e48\u4ed6\u5c06\u4f1a\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5b50\u8282\u70b9,\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u62ff\u5b83\u7ee7\u7eed\u66f4\u65b0\u4ed6\u7684\u7236\u8282\u70b9\u4e86\n\n```cpp\nfor (pp v : adj[qf]){\n      if (dist[v.f]==dist[qf]-v.s){\n        constrain[v.f]--;//\u7236\u8282\u70b9\u5b50\u53f6--\n        pos[v.f]+=pos[qf];\n        if (constrain[v.f]==0) q.push(v.f);//\u5982\u679c\u7236\u8282\u70b9\u6ca1\u6709\u5b50\u53f6\u4e86\n        break;\n      }\n    }\n```\n\n3.\u7b54\u6848\n\n\u7b54\u6848\u4e4b\u524d\u5176\u5b9e\u5df2\u7ecf\u63d0\u5230\u8fc7,\u5c31\u662f\u6bcf\u4e2a\u70b9\u7684\u5b50\u53f6\u6570\u91cf*\u7528\u6377\u5f84\u6240\u80fd\u51cf\u5c11\u7684\u8ddd\u79bb\n\n```cpp\nfor (long long i=n;i>=1;i--){\n  ans = max(ans,pos[i]*(dist[i]-k));\n}\n\n```\n\n4.\u5b57\u5178\u5e8f\u7684\u6c42\u6cd5\n\n\u8fd9\u91cc\u662f\u5f88\u591a\u94fe\u5f0f\u524d\u5411\u661f\u7684\u5927\u4f6c\u5361\u4f4f\u7684\u5730\u65b9.\u6b63\u5e38\u7684\u65b9\u6cd5\u662f\u7528fa\u5b58.\u7136\u800c,\u6211\u4eec\u53d1\u73b0,\u5982\u679c\u7528vector\u5b58\u56fe,\u6211\u4eec\u53ef\u4ee5\u5c06\u53bb\u7684\u70b9\u6392\u5e8f,\u7136\u540e\u5c06\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u7236\u8282\u70b9(\u4e5f\u5c31\u662f\u8ddd\u79bb\u6700\u77ed\u7684\u70b9)\u6254\u8fdb\u961f\u5217.\n\n\u8fd9\u91cc\u6211\u5199\u7684spfa\u6ca1\u5199dij,\u4f46\u662f\u60f3\u6cd5\u662f\u4e00\u6837\u7684\n\n\u53c8\u5230\u4e86\u5177\u4f53\u4ee3\u7801\u7684\u65f6\u95f4\u4e86:\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <vector>\n#include <cstring>\nusing namespace std;\nconst long long MAXN = 1e5+5;\n#define pp pair<long long,long long>\n#define f first\n#define s second\nlong long dist[MAXN], n,m,k, pos[MAXN],constrain[MAXN], ans= 0 ;\nvector<pp> adj[MAXN];\nbool inq[MAXN],vis[MAXN];\ninline void spfa(long long source){\n  memset(dist,0x3f3f3f3f,sizeof(dist));\n  dist[source] = 0;\n  queue<long long> q;\n  q.push(source);\n  while(!q.empty()){\n    long long qf = q.front();q.pop();\n    inq[qf] = false;\n    for (pp v : adj[qf]){\n      if (dist[v.f]>dist[qf]+v.s){\n        dist[v.f] = dist[qf]+v.s;\n        if (!inq[v.f]) inq[v.f] = true,q.push(v.f);\n      }\n    }\n  }\n}//\u677f\u5b50,\u4e0d\u89e3\u91ca\ninline void dfs(long long source){\n  for (pp v : adj[source]){\n    if (dist[v.f]==dist[source]-v.s){//\u5982\u679c\u67d0\u4e2a\u70b9\u5230\u70b91\u7684\u8ddd\u79bb-\u4ed6\u53bb\u7236\u8282\u70b9\u7684\u8ddd\u79bb==\u7236\u8282\u70b9\u5230\u70b91\u7684\u8ddd\u79bb\n      constrain[v.f]++;\n      break;//\u5df2\u7ecf\u6539\u8fc7,break\u80fd\u4fdd\u8bc1\u5b57\u5178\u5e8f\u6700\u5c0f\n    }\n  }\n}\ninline void bfs(){\n  queue<int> q;\n  for (int i=1;i<=n;i++) if (!constrain[i]) q.push(i);//\u5982\u679c\u662f\u5b50\u53f6\n  while(!q.empty()){\n    int qf = q.front();q.pop();\n    for (pp v : adj[qf]){\n      if (dist[v.f]==dist[qf]-v.s){//\u540c\u4e0a\n        constrain[v.f]--;//\u5b50\u53f6-1\n        pos[v.f]+=pos[qf];//\u5b50\u53f6\u6570\u91cf\u76f8\u52a0\n        if (constrain[v.f]==0) q.push(v.f);//\u5982\u679c\u7236\u8282\u70b9\u53d8\u6210\u4e86\u5b50\u53f6\n        break;//\u5b57\u5178\u5e8f\n      }\n    }\n  }\n}\nlong long a,b,c;\nint main(){\n  cin >> n >> m >> k;\n  for (long long i=1;i<=n;i++) cin >> pos[i];\n  for (long long i=0;i<m;i++){\n    cin >> a >> b >> c;\n    adj[a].push_back(make_pair(b,c));\n    adj[b].push_back(make_pair(a,c));\n    //vector\u7684\u5efa\u8fb9\u65b9\u5f0f\n  }\n  for (long long i=1;i<=n;i++) sort(adj[i].begin(),adj[i].end());//\u6392\u5e8f\u4fdd\u8bc1\u5b57\u5178\u5e8f\n  spfa(1);//\u677f\u5b50\n  for (long long i=1;i<=n;i++) dfs(i);//\u8fd9\u540d\u5b57...\u5176\u5b9e\u4e0d\u662fdfs\n  bfs();\n  for (long long i=n;i>=1;i--) ans = max(ans,pos[i]*(dist[i]-k));//\u6c42\u7b54\u6848\n  cout << ans;\n}\n```",
        "postTime": 1584141044,
        "uid": 219099,
        "name": "pocafup",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5201 \u3010[USACO19JAN]Shortcut G\u3011"
    },
    {
        "content": "# \u6d1b\u8c37 P5201 \u9898\u89e3\n\n## \u524d\u7f6e\u77e5\u8bc6 \u6700\u77ed\u8def\u6811\n\n\u6700\u77ed\u8def\u6811\u6307\u7684\u662f\u7531\u6bcf\u4e2a\u70b9\u5230\u539f\u70b9\u7684\u6700\u77ed\u8def\u7684\u8def\u5f84\u5f62\u6210\u7684\u4e00\u68f5\u6811\u3002\n\n\u6240\u4ee5\u600e\u4e48\u77e5\u9053\u54ea\u4e9b\u8fb9\u5728\u6700\u77ed\u8def\u6811\u4e2d\u5462\uff1f\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53 $dis_u+w_{u,v}=dis_v$ \u65f6\uff0c$v$ \u7684\u6700\u77ed\u8def\u5f84\u5fc5\u7136\u7ecf\u8fc7\u4e86 $u$\uff0c\u6b64\u65f6\u53ef\u4ee5\u7ed9\u8fd9\u4e2a\u8fb9\u548c\u70b9\u6253\u4e0a\u6807\u8bb0\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u548c\u8fb9\u5df2\u7ecf\u5728\u6811\u4e2d\u4e86\uff08\u56e0\u4e3a\u6ee1\u8db3\u4e0a\u9762\u7684\u5f0f\u5b50\u7684 $u$  \u672a\u5fc5\u53ea\u6709\u4e00\u4e2a\uff09\u3002\n\n\u8fd9\u9053\u9898\u8fd8\u8981\u6c42\u5b57\u5178\u5e8f\uff0c\u6240\u4ee5\u53ef\u4ee5**\u4ece $1$ \u5230 $n$ \u679a\u4e3e** $u$\uff0c\u627e\u5230\u53ef\u4ee5\u52a0\u5165\u6811\u4e2d\u7684 $v$\u3002\n\n## \u9898\u76ee\u5206\u6790\n\n\u65e2\u7136\u6c42\u51fa\u4e86\u6700\u77ed\u8def\u6811\uff0c\u518d\u8003\u8651\u8fd1\u9053\u7684\u4f5c\u7528\u3002\u53ef\u4ee5\u53d1\u73b0\u5728\u70b9 $1$ \u548c\u70b9 $u$ \u4e4b\u95f4\u8fde\u4e00\u6761\u8fd1\u9053\u4f1a\u4f7f\u6811\u4e0a\u70b9 $u$ \u6240\u6709\u7684\u513f\u5b50\u548c\u5b83\u672c\u8eab\u7684\u6700\u77ed\u8def\u51cf\u5c11 $dis_u-t$\uff0c\u6240\u4ee5\u53ef\u4ee5\u4ece $1$ \u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u8fc7\u7a0b\u4e2d\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u513f\u5b50\u6570\u91cf\uff0c\u7136\u540e\u5728\u56de\u6eaf\u524d\u66f4\u65b0 $ans$\u3002\n\n## \u4ee3\u7801\n\n\u5199\u4e86\u534a\u5929\u4e00\u76f4 wa \u4e24\u4e2a\u70b9\uff0c\u8fd8\u53bb\u7ffb\u4e86\u8ba8\u8bba\u7248\uff0c\u5168\u6539\u4e86\u8fd8\u662f wa \u4e24\u4e2a\uff0c\u7ed3\u679c\u662f\u6ca1\u5f00\u53cc\u5411\u8fb9\u2026\u2026\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nstruct edge\n{\n\tint to,cost,next;\n}g[100001];\nint n,m,t,cnt,head[10001];\nlong long dis[10001],size[10001],ans;\nbool vis[10001],flag[10001],can[100001];\nvoid add(int u,int v,int w)\n{\n\tg[++cnt]=(edge){v,w,head[u]};\n\thead[u]=cnt;\n}\nvoid spfa()\n{\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tdis[i]=1e18;\n\t}\n\tqueue<int> q;\n\tq.push(1);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvis[u]=0;\n\t\tfor(int i=head[u];i;i=g[i].next)\n\t\t{\n\t\t\tint v=g[i].to,w=g[i].cost;\n\t\t\tif(dis[u]+w<dis[v])\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\tif(!vis[v])\n\t\t\t\t{\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid dfs(int u)\n{\n\tfor(int i=head[u];i;i=g[i].next)\n\t{\n\t\tif(!can[i])\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tint v=g[i].to;\n\t\tdfs(v);\n\t\tsize[u]+=size[v];\n\t}\n\tans=max(ans,(dis[u]-t)*size[u]);\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&t);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lld\",&size[i]);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\tspfa();\n\tfor(int u=1;u<=n;u++)\n\t{\n\t\tfor(int i=head[u];i;i=g[i].next)\n\t\t{\n\t\t\tint v=g[i].to,w=g[i].cost;\n\t\t\tif(!flag[v]&&dis[u]+w==dis[v])\n\t\t\t{\n\t\t\t\tcan[i]=1;\n\t\t\t\tflag[v]=1;\n\t\t\t}\n\t\t}\n\t}\n\tdfs(1);\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n\u8c22\u8c22\u89c2\u770b\uff01",
        "postTime": 1599480838,
        "uid": 241520,
        "name": "fanglong",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5201 \u3010[USACO19JAN]Shortcut G\u3011"
    },
    {
        "content": "### \u9898\u76ee\u4f20\u9001\u95e8\n\n[P5201 [USACO19JAN]Shortcut G](https://www.luogu.com.cn/problem/P5201)\n### \u601d\u8def\u5206\u6790\n\n\u770b\u9898\u89e3\u91cc\u7684\u5927\u4f6c\u90fd\u662f\u7528\u6700\u77ed\u8def\u6811\u6c42\u89e3\u7684\uff0c\u6ca1\u5b66\u8fc7\u6700\u77ed\u8def\u6811\u7684\u6211\u770b\u7684\u4e00\u8138\u8499\u3002\u8fd9\u91cc\u7ed9\u51fa\u53e6\u4e00\u79cd\u89e3\u6cd5\uff08\u5e38\u6570\u7565\u5927\uff0c\u4f46\u80fd\u8dd1\u8fc7\uff09\u3002  \n\u9996\u5148\uff0c\u9898\u76ee\u8981\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6700\u77ed\u8def\u8def\u5f84\u3002\u5148\u4e0d\u7ba1\u5b57\u5178\u5e8f\uff0c\u5148\u5728\u5e38\u89c4\u7684\u6700\u77ed\u8def\u7b97\u6cd5\u4e2d\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u3002\u8fd9\u4e2a\u6bd4\u8f83\u597d\u6c42\uff0c\u53ea\u8981\u5728\u66f4\u65b0\u6700\u77ed\u8def\u7684\u540c\u65f6\u4e2d\u52a0\u5165\u8fd9\u6837\u4e00\u53e5\u8bdd\uff1a  \n```cpp\nq[y]=x;\n```\n\u5176\u4e2d $x$ \u8868\u793a\u5f53\u524d\u8282\u70b9\uff0c$y$ \u8868\u793a\u66f4\u65b0\u7684\u8282\u70b9\u3002\u8fd9\u6837\u4e00\u53e5\u77ed\u77ed\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5f53\u524d\u8282\u70b9\u7684\u524d\u9a71\u8282\u70b9\uff0c\u800c\u524d\u9a71\u8282\u70b9\u7684\u524d\u9a71\u8282\u70b9\u80af\u5b9a\u662f\u88ab\u8bb0\u5f55\u8fc7\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u8f93\u51fa\u8def\u5f84\uff1a\n```cpp\nvoid print(int x)\n{\n\tcout<<x<<\" \";\n\tif(q[x]==0)return ;\n\tprint(q[x]);\n}\n```\n\u5230\u4e86\u8fd9\u4e00\u6b65\u4ee5\u540e\uff0c\u5c06\u8bb0\u5f55\u8282\u70b9\u7684\u987a\u5e8f\u6539\u4e3a\u6700\u5c0f\u5b57\u5178\u5e8f\u7684\u65b9\u6cd5\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u53ea\u9700\u8981\u628a\u539f\u672c\u4ee3\u7801\u4e2d\u7684\u677e\u5f1b\u64cd\u4f5c\uff1a\n```cpp\nif(dis[y]>dis[x]+e[i].w)\n```\n\u6539\u4e3a\uff1a\n```cpp\nif(dis[y]>dis[x]+e[i].w || (dis[y]==dis[x]+e[i].w && x<q[y]))\n```\n\u5373\u53ef\u3002  \n\u663e\u800c\u6613\u89c1\u7684\u662f\uff0c\u6bcf\u4e00\u4e2a\u70b9\u5728\u5230\u539f\u70b9\u7684\u8def\u5f84\u4e2d\uff0c\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u67d0\u4e00\u4e2a\u8282\u70b9\uff08\u5305\u62ec\u81ea\u8eab\uff09\u3002\u5982\u679c\u6b64\u65f6\u5c06\u8fd1\u8def\u8fde\u5230\u8fd9\u4e2a\u8282\u70b9\u4e0a\uff0c\u90a3\u4e48\u6240\u6709\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u7684\u725b\u5c31\u90fd\u4e0d\u4f1a\u8d70\u539f\u672c\u7684\u8def\uff0c\u800c\u662f\u8d70\u8fd9\u6761\u8fd1\u8def\u3002\u62ff\u9898\u76ee\u4e3e\u4e2a\u6817\u5b50\uff1a  \n$2$ \u53f7\u8282\u70b9\u7684\u8def\u5f84\u4e3a\uff1a$2\\to1$  \n$4$ \u53f7\u8282\u70b9\u7684\u8def\u5f84\u4e3a\uff1a$4\\to2\\to1$  \n\u800c $2$ \u53f7\u8282\u70b9\u6709 $2$ \u5934\u725b\uff0c$4$ \u53f7\u8282\u70b9\u6709 $4$ \u5934\u725b\u3002\u6240\u4ee5\u5982\u679c\u8fd1\u8def\u63a5\u5230 $2$ \u53f7\u8282\u70b9\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u5171\u4f1a\u6709 $6$ \u5934\u725b\u8d70\u8fd1\u8def\u3002  \n\u800c $2$ \u53f7\u8282\u70b9\u5230\u539f\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u4e3a $5$\uff0c\u8fd1\u8def\u7684\u957f\u5ea6\u4e3a $2$\uff0c\u6240\u4ee5\u4e00\u5171\u51cf\u5c11\u6d88\u8017\u7684\u65f6\u95f4\u4e3a $(5-2)\\times6=18$  \n\u540c\u6837\uff1a   \n$3$ \u53f7\u8282\u70b9\u7684\u8def\u5f84\u4e3a\uff1a$3\\to1$  \n$5$ \u53f7\u8282\u70b9\u7684\u8def\u5f84\u4e3a\uff1a$5\\to3\\to1$   \n\u800c $3$ \u53f7\u8282\u70b9\u6709 $3$ \u5934\u725b\uff0c$5$ \u53f7\u8282\u70b9\u6709 $5$ \u5934\u725b\u3002\u6240\u4ee5\u5982\u679c\u8fd1\u8def\u63a5\u5230 $3$ \u53f7\u8282\u70b9\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u5171\u4f1a\u6709 $8$ \u5934\u725b\u8d70\u8fd1\u8def\u3002  \n\u800c $3$ \u53f7\u8282\u70b9\u5230\u539f\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u4e3a $3$\uff0c\u8fd1\u8def\u7684\u957f\u5ea6\u4e3a $2$\uff0c\u6240\u4ee5\u4e00\u5171\u51cf\u5c11\u6d88\u8017\u7684\u65f6\u95f4\u4e3a $(3-2)\\times8=8$  \n\n\u6240\u4ee5\uff0c\u53ea\u9700\u8981\u5728\u6bcf\u4e00\u4e2a\u70b9\u7684\u8def\u5f84\u4e0a\u52a0\u4e0a\u8fd9\u4e2a\u70b9\u672c\u8eab\u7684\u70b9\u6743\uff0c\u518d\u679a\u4e3e\u6bcf\u4e2a\u70b9\uff0c\u8ba1\u7b97\u8fde\u8fb9\u5230\u8fd9\u4e2a\u70b9\u80fd\u591f\u51cf\u5c11\u7684\u65f6\u95f4\uff0c\u53d6\u6700\u5927\u503c\u5c31\u597d\u4e86\u3002\n### \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define inf 0x7f7f7f7f\nusing namespace std;\nstruct E{\n\tint to,next,w;\n}e[111111];\nint e_num,p[111111];\nvoid e_add(int x,int y,int w)//\u90bb\u63a5\u8868\u5b58\u56fe \n{\n\te[++e_num].to=y;\n\te[e_num].w=w;\n\te[e_num].next=p[x];\n\tp[x]=e_num; \n}\nint n,m,t;\nlong long c[111111],a[111111];//\u6ce8\u610f\u5f00long long \nlong long dis[111111];\nint mark[111111];\nint q[111111];\nvoid SPFA()\n{\n\tfor(int i=1;i<=n;i++)dis[i]=inf;\n\tdis[1]=0;\n\tmark[1]=1;\n\tqueue<int>que;\n\tque.push(1);\n\twhile(!que.empty())\n\t{\n\t\tint x=que.front();\n\t\tmark[x]=0;\n\t\tque.pop();\n\t\tfor(int i=p[x];i;i=e[i].next)\n\t\t{\n\t\t\tint y=e[i].to;\n\t\t\tif(dis[y]>dis[x]+e[i].w || (dis[y]==dis[x]+e[i].w && x<q[y]))//\u540e\u9762\u8fd9\u90e8\u5206\u662f\u4fdd\u6301\u5b57\u5178\u5e8f\u7684\u5173\u952e \n\t\t\t{\n\t\t\t\tq[y]=x;//\u4fdd\u5b58\u524d\u9a71\u8282\u70b9 \n\t\t\t\tdis[y]=dis[x]+e[i].w;\n\t\t\t\tif(!mark[y])\n\t\t\t\t{\n\t\t\t\t\tmark[y]=1;\n\t\t\t\t\tque.push(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid print(int x,int c)\n{\n\ta[x]+=c;\n\tif(q[x]==0)return ;\n\tprint(q[x],c);\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&t);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",c+i);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,w;\n\t\tscanf(\"%d%d%d\",&x,&y,&w);\n\t\te_add(x,y,w);//\u53cc\u5411\u5efa\u8fb9 \n\t\te_add(y,x,w);\n\t}\n\tSPFA();//\u8003\u8bd5\u7684\u65f6\u5019\u5982\u679c\u6ca1\u6709\u8d1f\u6743\u8fb9\u4e0d\u5efa\u8bae\u7528SPFA\uff08\u5b83\u6b7b\u4e86\uff09...\n\tfor(int i=1;i<=n;i++)\n\t\tprint(i,c[i]);//\u7d2f\u52a0\u725b\u7684\u6570\u91cf \n\tlong long ans=0;//\u4e0d\u5f00____\u89c1\u7956\u5b97 \n\tfor(int i=1;i<=n;i++)\n\t\tans=max(ans,(dis[i]-t)*a[i]);//\u679a\u4e3e \n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1625809582,
        "uid": 290856,
        "name": "SzTC",
        "ccfLevel": 0,
        "title": "P5201 [USACO19JAN]Shortcut G \u9898\u89e3"
    },
    {
        "content": "## \u5206\u6790\u9898\u76ee\n### \u601d\u8def\n$\\because$ \u725b\u68da\u4f4d\u4e8e\u4e14\u4ec5\u4f4d\u4e8e 1 \u53f7\u70b9 \n\n$\\therefore$ \u6240\u6709\u725b\u8d70\u5230\u725b\u68da\u7684\u8def\u7ebf\u4f1a\u5f62\u6210\u4e00\u4e2a\u4ee5 1 \u53f7\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u6811\n\n\u8fd9\u5c31\u662f\u6700\u77ed\u8def\u5f84\u6811\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u68f5\u6811\u5efa\u51fa\u6765\uff0c\u7136\u540e\u7edf\u8ba1\u5b83\u6bcf\u4e2a\u8282\u70b9 $i$ \u6240\u5728\u7684\u5b50\u6811\u4e0a **\u725b\u7684\u4e2a\u6570** $s_i$\u3002\n\n$\\because$ \u5728\u725b\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u70b9\u624d\u4f1a\u88ab\u725b\u770b\u89c1\n\n$\\therefore$ \u94fe\u63a5\u725b\u68da\u548c\u70b9 $i$ \u7684\u80fd\u8282\u7ea6 $s_i$ \u5934\u725b\u7684 $d_i-t$ \u4e2a\u5355\u4f4d\u65f6\u95f4\u3002\uff08$d_i$ \u8868\u793a\u70b9 $i$ \u5230\u725b\u68da\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c$t$ \u8868\u793a\u94fe\u63a5\u725b\u68da\u548c\u70b9 $i$ \u7684\u8def\u5f84\u7684\u957f\u5ea6\uff09\n\n\u6211\u4eec\u904d\u5386\u6bcf\u4e2a\u70b9\uff0c\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\n\u522b\u5fd8\u4e86\u5f00`long long`\u3002\n\n### \u8bb0\u5f55\u8def\u5f84\n\u8003\u8651\u8fd9\u4e2a\u56fe\u662f\u65e0\u5411\u56fe\uff0c\u5373\u6700\u77ed\u8def **\u4e0d\u53d7\u8d70\u7684\u65b9\u5411\u7684\u5f71\u54cd**\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u725b\u68da\u51fa\u53d1\uff0c\u8dd1\u4e00\u904d dijkstra ,\u5e76\u7528\u4e00\u4e2a\u94fe\u5f0f\u7684\u6570\u7ec4\u8bb0\u5f55\u4ece\u725b\u68da\u51fa\u53d1\u7684\u6240\u6709\u6700\u77ed\u8def\u5f84\u3002\n\n\u6ce8\u610f\u4e24\u70b9\n\n1.\u8bb0\u5f55\u8def\u5f84\u65f6\u8981\u5199\u6210\u5230\u8fbe\u7684\u70b9\u6307\u5411\u73b0\u5728\u7684\u70b9\uff0c\u5efa\u51fa\u6765\u7684\u8def\u5f84\u662f\u4ece\u7ec8\u70b9\u901a\u5411\u725b\u68da\u7684\n\n2.\u8def\u5f84\u957f\u5ea6\u76f8\u540c\u7684\u6700\u77ed\u8def\u522b\u5fd8\u8bb0\u5904\u7406\n\n\u8fd9\u4e2a\u56fe\u5982\u679c\u662f\u65e0\u5411\u56fe\u7684\u8bdd\u5c31\u5e94\u8be5\u8981\u53cd\u5411\u5efa\u8fb9\uff0c\u5176\u4ed6\u7684\u4e0d\u7528\u6539\u3002\n\n### \u5efa\u6811\n\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u628a\u6700\u77ed\u8def\u5f84\u8bb0\u5f55\u597d\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u904d\u5386\u7b2c 2\\~n \u4e2a\u70b9\uff0c\u5e76\u628a\u5b83\u80fd\u5230\u8fbe\u7684\u70b9\u548c\u5b83\u8fde\u8fb9\u3002\n\n\u6ce8\u610f\u8981\u53cc\u5411\u52a0\u8fb9\n\n### \u7edf\u8ba1\u5b50\u6811\u4e0a\u725b\u7684\u4e2a\u6570\n\u5728\u8f93\u5165\u7684\u8fc7\u7a0b\u4e2d\uff0c$s_i$\u8981\u88ab\u8d4b\u503c\u6210\u70b9 $i$ \u4e0a\u725b\u7684\u6570\u91cf\n\n\u6211\u4eec\u4ece\u725b\u68da\u5f00\u59cb dfs\uff0c\u628a\u6bcf\u4e2a $s_i$ \u52a0\u4e0a\u5b83\u7684\u5b50\u8282\u70b9\u7684 $s_i$ \u5373\u53ef\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int maxn=50004;\nbool vis[maxn];\nint n,m,t,u,v,w,res;\nint dis[maxn],cow[maxn],nxt[maxn],size[maxn];\nvector < int > tree[maxn];\nstruct edge{ int to,w;};\nvector < edge > g[maxn];\nstruct node{ \n\tint id,len;\n\tbool operator < (const node &comp) const{\n\t\treturn comp.len<len;\n\t}\n};\npriority_queue < node > q;\n\ninline const int _max(const int &a,const int &b){\n\treturn a>b?a:b;\n}\n\ninline void read(int &x){\n\tchar c=getchar();x=0;\n\tfor(;c<'0'||c>'9';c=getchar());\n\tfor(;c>='0'&&c<='9';c=getchar())\n\t\tx=x*10+(c^48);\n}\n\nvoid dij(int start){\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[start]=0;\n\tq.push((node){start,0});\n\twhile(!q.empty()){\n\t\tnode t=q.top();\n\t\tq.pop();\n\t\tint ind=t.id;\n\t\tif(vis[ind])\n\t\t\tcontinue;\n\t\tvis[ind]=1;\n\t\tfor(int i=0;i<g[ind].size();i++){\n\t\t\tedge now=g[ind][i];\n\t\t\tint to=now.to,l=dis[ind]+now.w;\n\t\t\tif(dis[to]>l){\n\t\t\t\tnxt[to]=ind;\n\t\t\t\tdis[to]=l;\n\t\t\t\tif(!vis[to])\n\t\t\t\t\tq.push((node){to,l});\n\t\t\t}\n\t\t\tif(dis[to]==l&&nxt[to]>ind)\n\t\t\t\tnxt[to]=ind;\n\t\t}\n\t}\n}\n\nvoid dfs(int node,int fa){\n\tfor(int i=0;i<tree[node].size();i++){\n\t\tint now=tree[node][i];\n\t\tif(now==fa)\n\t\t\tcontinue;\n\t\tdfs(now,node);\n\t\tsize[node]+=size[now];\n\t}\n\tres=_max(res,(dis[node]-t)*size[node]);\n}\n\nsigned main(){\n\tread(n),read(m),read(t);\n\tfor(int i=1;i<=n;i++)\n\t\tread(size[i]);\n\twhile(m--){\n\t\tread(u),read(v),read(w);\n\t\tg[u].push_back((edge){v,w});\n\t\tg[v].push_back((edge){u,w});\n\t}\n\tdij(1);\n\tfor(int i=2;i<=n;i++){\n\t\ttree[i].push_back(nxt[i]);\n\t\ttree[nxt[i]].push_back(i);\n\t}\n\tdfs(1,0);\n\tprintf(\"%lld\",res); \n\treturn 0;\n}\n```",
        "postTime": 1604103195,
        "uid": 289944,
        "name": "Na2PtCl6",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P5201 \u3010[USACO19JAN]Shortcut G\u3011"
    }
]