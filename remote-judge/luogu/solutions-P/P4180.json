[
    {
        "content": "\u7ba1\u7406\u5458\u5907\u6ce8\uff1a\u672c\u6587\u4e2d\u7b2c\u4e8c\u4efd\u4ee3\u7801\u5728 hack \u6570\u636e\u4e2d\u4f1a WA\uff0c\u8bf7\u8bfb\u8005\u6ce8\u610f\r\n\r\n[\u539f\u6587\u5730\u5740](https://www.cnblogs.com/bcoier/p/10293072.html)\r\n### \u751f\u6210\u6811\u7684\u6982\u5ff5\uff1a\r\n\u5728\u4e00\u4e2a\u65e0\u5411\u56fe\u4e2d\uff0c\u8bbe\u9876\u70b9\u6570\u4e3a$n$\uff0c\u53d6\u5176\u4e2d$n-1$\u6761\u8fb9\u5e76\u4f7f\u6240\u6709\u70b9\u76f8\u8fde\uff0c\u6240\u5f97\u5230\u7684\u4e00\u68f5\u6811\u5373\u4e3a\u751f\u6210\u6811\u3002\r\n### \u6700\u5c0f\u751f\u6210\u6811\uff1a\r\n\u5982\u679c\u8fd8\u6ca1\u6709\u63a5\u89e6\u8fc7\u751f\u6210\u6811\u7684\u540c\u5b66\uff0c\u6b22\u8fce\u6233->[\u6700\u5c0f\u751f\u6210\u6811\u8be6\u89e3](https://tbr-blog.blog.luogu.org/solution-p3366)\r\n\r\n# \u6b21\u5c0f\u751f\u6210\u6811\uff1a\r\n\u6b21\u5c0f\u751f\u6210\u6811\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u8fb9\u6743\u4e4b\u548c\u6b21\u5c0f\u7684\u4e00\u68f5\u751f\u6210\u6811\u3002\u6709\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u4e0e\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u4e4b\u5206\u3002\r\n\r\n~~\u5c3d\u7ba1\u8fd9\u4e2a\u7b97\u6cd5\u7684\u540d\u5b57\u53eb\u505a\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u4e0d\u8fc7\u5176\u5b9e\u53ef\u4ee5\u7406\u89e3\u6210\u4e00\u9053\u6570\u636e\u7ed3\u6784~~\r\n\r\n\u6b21\u5c0f\u751f\u6210\u6811\u53ef\u4ee5\u548c\u6b21\u77ed\u8def\u5f84\u4e00\u8d77\u7406\u89e3\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u505a\u505a\u6a21\u677f\u9898\r\n\r\n\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u4e4b\u548c\u4e0d\u4e00\u5b9a\u8981\u6bd4\u6700\u5c0f\u751f\u6210\u6811\u7684\u5c0f\uff0c\u5373\t$\u03a3w$\u6b21\u2265$\u03a3w$\u6700\r\n\r\n\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u4e4b\u548c\u4e00\u5b9a\u8981\u6bd4\u6700\u5c0f\u751f\u6210\u6811\u7684\u5c0f\uff0c\u5373$\u03a3w$\u6b21>$\u03a3w$\u6700\r\n\r\n\u60f3\u8981\u6c42\u51fa\u6b21\u5c0f\u751f\u6210\u6811\uff1f\r\n\r\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5dfs\u6c42\u51fa\u6240\u6709\u7684\u751f\u6210\u6811\uff0c\u5728\u6392\u5e8f\u9009\u51fa\u4e25\u683c\u6b21\u5c0f\u7684\u5c31\u53ef\u4ee5\u4e86\u3002\r\n\r\n\u4f46\u662f\u4e0a\u8ff0\u65b9\u6cd5\u663e\u7136\u4e0d\u80fd\u5feb\u901f\u6c42\u51fa\u6b21\u5c0f\u751f\u6210\u6811\r\n\r\n\u4e3a\u4e86\u5feb\u901f\u7684\u6c42\u51fa\u6765\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e00\u4e2a\u7ed3\u8bba\uff1a\u6b21\u5c0f\u751f\u6210\u6811\u548c\u6700\u5c0f\u751f\u6210\u6811\u4e4b\u95f4\u53ea\u6709\u4e00\u6761\u8fb9\u7684\u5dee\u5f02\u3002\r\n\r\n\u8fd9\u4e00\u6761\u7ed3\u8bba\u4e3a\u4ec0\u4e48\u662f\u6b63\u786e\u7684\u5462\uff1f\r\n\r\n\u6211\u4eec\u5148\u6765\u770b\u770b$Kruskal$\u662f\u600e\u4e48\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\r\n\r\n$Kruskal$\u662f\u6309\u7167\u8fb9\u6743\u6392\u5e8f\uff0c\u6309\u7167\u8d2a\u5fc3\u7684\u601d\u8def\u4e00\u6761\u4e00\u6761\u7684\u52a0\u8fdb\u6811\u8fb9\uff0c\u6240\u4ee5\u5982\u679c\u8981\u6c42\u51fa\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u653e\u5f03\u4e00\u6761\u5c0f\u7684\u8fb9\u4e0d\u9009\uff0c\u52a0\u5165\u53e6\u4e00\u6761\u8fb9\u4f7f\u56fe\u8054\u901a\u3002\r\n\r\n\u5982\u679c\u6211\u4eec\"\u653e\u5f03\"\u4e86\u4e24\u6761\u8fb9\uff0c\u90a3\u4e48\u53ea\"\u653e\u5f03\"\u4e00\u6761\u8fb9\u7684\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u663e\u7136\u5c0f\u4e8e\"\u653e\u5f03\"\u4e24\u6761\u8fb9\u7684\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u3002\r\n\r\n\u6240\u4ee5\u6c42\u51fa\uff08\u975e\uff09\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u7684\u6734\u7d20\u7b97\u6cd5\u4e3a\uff1a\u5148\u5efa\u7acb\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u3002\u518d\u679a\u4e3e\u5220\u53bb\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u6bcf\u4e00\u6761\u8def\u5f84\uff0c\u518d\u5728\u65b0\u6784\u6210\u7684\u751f\u6210\u6811\u4e2d\u9009\u51fa\u4e00\u68f5\u8fb9\u6743\u4e4b\u548c\u6700\u5c0f\u751f\u6210\u6811\u7684\u5373\u53ef\u3002\r\n\r\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nmlogm)$\u3002\u5f53\u7136\u8fd9\u79cd\u7b97\u6cd5\u8fd8\u4e0d\u591f\u4f18\u79c0\uff0c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u4f18\u5316\r\n\r\n\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u4f18\u5316\uff1a\r\n\r\n\u679a\u4e3e\u8fb9\u7684\u65f6\u5019\uff0c\u679a\u4e3e\u6ca1\u6709\u88ab\u5e76\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\uff08\u6211\u4eec\u5c06\u628a\u8fd9\u6761\u8fb9\u52a0\u5165\u5230\u751f\u6210\u6811\u4e2d\uff0c\u663e\u7136\u73b0\u5728\u7684\u56fe\u5f62\u4e0d\u518d\u662f\u4e00\u68f5\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u539f\u56fe\u4e2d\u5220\u53bb\u4e00\u6761\u6700\u5927\u8fb9\uff0c\u4f7f\u65b0\u56fe\u4ecd\u7136\u8054\u901a\uff09\r\n\r\n\u52a0\u5165\u8fb9\u6743\u503c\u4e3a$W1$\u3002\u67e5\u8be2\u6811\u4e0a\u6bcf\u4e00\u6761\u7684\u8def\u5f84\uff0c\u5728\u8def\u5f84\u9009\u53d6\u4e00\u4e2a\u8fb9\u6743\u6700\u5927\u503c$W2$\u3002\u5219\u5f53\u524d\u679a\u4e3e\u7684\u7b54\u6848\u4e3a$W\u2212W2+W1$\uff08W\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u4e4b\u548c\uff09\r\n\r\n\u679a\u4e3e\u6240\u6709\u7684\u8fb9\u4e4b\u540e\uff0c\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\r\n\r\n\u6211\u4eec\u53ef\u4ee5\u7528\u500d\u589e/\u6811\u5256/LCT\u6765\u5b9e\u73b0\u67e5\u8be2\u6811\u4e0a\u6700\u5927\u503c\u7684\u64cd\u4f5c\uff0c\u6545\u590d\u6742\u5ea6\u4e3a\uff1a$O(mlogn)$\r\n\r\n\u518d\u6765\u770b\u770b\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\r\n\r\n\u4e0d\u96be\u53d1\u73b0\uff1a\u6c42\u975e\u4e25\u683c\u6700\u5c0f\u751f\u6210\u6811\u65f6\uff0c\u679a\u4e3e\u4e00\u6761\u8fb9$W1$\uff0c\u4e4b\u540e\u518d\u5bfb\u627e\u4e00\u6761\u751f\u6210\u6811\u4e0a\u7684\u6700\u5927\u8fb9$W2$\r\n\r\n\u663e\u7136$W1\u2265W2$\uff0c\u56e0\u6b64\u53ef\u80fd\u7531\u6b64\u5f97\u5230\u7684\u6b21\u5c0f\u751f\u6210\u6811\u5e76\u975e\u4e25\u683c\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u6b21\u67e5\u8be2\u65f6\uff0c\u9700\u8981\u627e\u5230\u4e25\u683c\u6b21\u5c0f\u7684$W1$\uff0c\u5373$W1>W2$\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u4e86\u3002\r\n\r\n\u7ef4\u62a4\u4ecd\u53ef\u4ee5\u7528\u500d\u589e\u6216\u8005\u6811\u5256\u601d\u60f3\u3002\r\n\r\n\u8fd9\u91cc\u4ecb\u7ecd\u6811\u5256\u7684\u601d\u8def\uff1a\r\n\r\n\u5148\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u4e0e\u4e25\u683c\u6b21\u5c0f\u503c\uff0c\u5982\u679c\u662f\u53f6\u5b50\u8282\u70b9\u6700\u5927\u503c\u5c31\u8bbe\u4e3a\u4ed6\u672c\u8eab\uff0c\u6b21\u5927\u503c\u8bbe\u4e3a0\r\n\r\n\u5408\u5e76\u7684\u65f6\u5019\u628a\u4e24\u4e2a\u533a\u95f4\u7684\u8fd9\u56db\u4e2a\u503c\uff08\u4e24\u4e2a\u6700\u5927\u503c\u4e0e\u4e24\u4e2a\u6b21\u5927\u503c\uff09\u6392\u5e8f\uff0c\u518d\u5bfb\u627e\u6700\u5927\u503c\u4e0e\u4e25\u683c\u6b21\u5c0f\u503c\u5373\u53ef\u3002\r\n\r\n### [\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u6a21\u677f\u9898](https://www.luogu.org/problemnew/show/P4180)\r\n### \u4ee3\u7801\u5982\u4e0b\uff1a\r\n```\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define re register\r\n#define il inline\r\n#define int long long //\u628a\u6240\u6709int\u8f6c\u6210longlong\r\n#define debug printf(\"Now is line %d\\n\",__LINE__);\r\nil int read()\r\n{\r\n    re int x=0,f=1;char c=getchar();\r\n    while(c<'0'||c>'9'){if(c=='-') f=-1;c=getchar();}\r\n    while(c>='0'&&c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\r\n    return x*f;\r\n}//\u5feb\u8bfb \r\n#define maxm 300005\r\n#define inf 12345678900000000\r\n#define maxn 100005\r\nstruct Edge{int u,v,w,next;}e[maxm<<1];\r\nstruct qj{int ma,ma2;}q[maxn<<2];\r\nstruct Edge1\r\n{\r\n    int u,v,w;\r\n    bool operator <(const Edge1 &x) const{return w<x.w;}//\u6309\u7167\u8fb9\u6743\u6392\u5e8f \r\n}edge[maxm];\r\nint n,m,vis[maxm],ans=inf,head[maxn],cnt,fa[maxn],mtree;\r\nil void add(int u,int v,int w)\r\n{\r\n    e[++cnt].v=v;\r\n    e[cnt].w=w;\r\n    e[cnt].next=head[u];\r\n    head[u]=cnt;\r\n}//\u524d\u5411\u661f\u52a0\u8fb9\r\nnamespace smallesttree\r\n{\r\n    il int find(int x)\r\n    {\r\n        while(x!=fa[x]) x=fa[x]=fa[fa[x]];\r\n        return x;\r\n    }//\u5e76\u67e5\u96c6\u627e\u7956\u5148 \r\n    il void init()\r\n    {\t\r\n        for(re int i=1;i<=n;i++) fa[i]=i; //\u9884\u5904\u7406\u5e76\u67e5\u96c6 \r\n        for(re int i=0;i<m;i++) edge[i].u=read(),edge[i].v=read(),edge[i].w=read();\r\n    }\r\n    il void kruskal()\r\n    {\r\n        init();\r\n        sort(edge,edge+m);\r\n        re int T=0;\r\n        for(re int i=0;i<m;++i)\r\n        {\r\n            re int eu=find(edge[i].u),ev=find(edge[i].v);//\u5bfb\u627e\u7956\u5148\r\n            if(eu!=ev)\r\n            {\r\n            \tadd(edge[i].u,edge[i].v,edge[i].w),add(edge[i].v,edge[i].u,edge[i].w);\r\n                mtree+=edge[i].w;//\u8bb0\u5f55\u5b50\u6811\u5927\u5c0f \r\n                fa[ev]=eu;//\u5408\u5e76 \r\n                vis[i]=1;//\u6807\u8bb0\u8be5\u8fb9\u4e3a\u6811\u8fb9 \r\n                if(++T==n-1) break;//\u8fb9\u6570\u7b49\u4e8e\u8282\u70b9\u6570+1\u5373\u4e3a\u4e00\u9897\u6811 \r\n            }\r\n        }\r\n    } \r\n}\r\n//\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\r\nnamespace treecut\r\n{\r\n    int dep[maxn],father[maxn],top[maxn],W[maxn],a[maxn],size[maxn],son[maxn],seg[maxn],col;\r\n    //dep:\u6df1\u5ea6 father:\u7236\u4eb2\u8282\u70b9 top:\u91cd\u94fe\u7684\u9876\u7aef W:\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb a:\u70b9\u7684\u6743\u503c size:\u5b50\u6811\u5927\u5c0f son:\u91cd\u513f\u5b50 seg:\u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u5e8f\u53f7\uff08dfs\u5e8f\uff09 \r\n    il void dfs1(int u,int fr)\r\n    {\r\n        dep[u]=dep[fr]+1;\r\n        size[u]=1;\r\n        father[u]=fr;\r\n        for(re int i=head[u];i;i=e[i].next)\r\n        {\r\n            re int v=e[i].v;\r\n            if(v!=fr)\r\n            {\r\n                W[v]=W[u]+e[i].w;//W\u4e3a\u6bcf\u4e00\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb \r\n                dfs1(v,u);\r\n                size[u]+=size[v];\r\n                if(size[v]>size[son[u]]) son[u]=v;\r\n            }\r\n        }\r\n    }//\u9884\u5904\u7406\u51fadep\u3001size\u3001father\u4ee5\u53cason \r\n    il void dfs2(int now,int fi)\r\n    {\r\n        top[now]=fi;\r\n        seg[now]=++col;\r\n        a[col]=W[now]-W[father[now]];//a\u4e3a\u70b9\u7684\u6743\u503c\uff08\u5b83\u4e0e\u4e4b\u7236\u4eb2\u8282\u70b9\u8fb9\u7684\u6743\u503c\uff09\uff08\u76f8\u5f53\u4e8e\u524d\u7f00\u548c\uff09 \r\n        if(!son[now]) return;\r\n        dfs2(son[now],fi);\r\n        for(re int i=head[now];i;i=e[i].next)\r\n        {\r\n            re int v=e[i].v;\r\n            if(v!=son[now]&&v!=father[now]) dfs2(v,v);\r\n        }\r\n    }//\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684top\u3001seg\u4ee5\u53ca\u6743\u503c \r\n    //\u6811\u5256\u6a21\u677f\u5c31\u4e0d\u89e3\u91ca\u4e86 \r\n    #define ls k<<1\r\n    #define rs k<<1|1\r\n    il bool CMP(int a,int b){return a>b;}\r\n    il int getse(int x,int g,int z,int c)\r\n    {\r\n        re int a[5]={x,g,z,c};\r\n        sort(a,a+4,CMP);\r\n        for(re int i=1;i<3;++i)\r\n        {\r\n            if(a[i]!=a[0]) return a[i];\r\n        }\r\n    }//\u627e\u5230\u4e24\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u548c\u4e25\u683c\u6b21\u5927\u503c\uff08\u56db\u4e2a\u6570\uff09\u7684\u6700\u5927\u503c\u4e0e\u4e25\u683c\u6b21\u5927\u503c \r\n    // \u5c31\u662f\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u7684\u6700\u5927\u503c\u548c\u4e25\u683c\u6b21\u5927\u503c\r\n    il void build(int k,int l,int r)\r\n    {\r\n        if(l==r)\r\n        {\r\n            q[k].ma=a[l];\r\n            return;\r\n        }\r\n        re int mid=(l+r)>>1;\r\n        build(ls,l,mid),build(rs,mid+1,r);\r\n        q[k].ma=max(q[ls].ma,q[rs].ma);\r\n        q[k].ma2=getse(q[ls].ma,q[rs].ma,q[ls].ma2,q[rs].ma2);\r\n    }//\u9884\u5904\u7406\u51fa\u533a\u95f4\u6700\u5927\u503c\u4e0e\u6b21\u5927\u503c \r\n    il qj query(int k,int l,int r,int ll,int rr)\r\n    {\r\n        if(ll>r||rr<l) return (qj){-inf,-inf};\r\n        if(ll<=l&&rr>=r) return (qj){q[k].ma,q[k].ma2};\r\n        re int mid=(l+r)>>1;\r\n        re qj t1=query(ls,l,mid,ll,rr),t2=query(rs,mid+1,r,ll,rr);\r\n        return (qj){max(t1.ma,t2.ma),getse(t1.ma,t2.ma,t1.ma2,t2.ma2)};\r\n    }//\u67e5\u8be2\u533a\u95f4\u7684\u533a\u95f4\u7684\u6700\u5927\u503c\u4e0e\u6b21\u5c0f\u503c \r\n    il int LCA(int u,int v,int d)\r\n    {\r\n        re int need=-inf;\r\n        while(top[u]!=top[v])\r\n        {\r\n            if(dep[top[u]]<dep[top[v]]) swap(u,v);\r\n            qj temp=query(1,1,n,seg[top[u]],seg[u]);\r\n            u=father[top[u]];\r\n            need=max(need,(temp.ma==d)?temp.ma2:temp.ma);//\u4e25\u683c\u6b21\u5c0f\u8fb9\uff08\u5982\u679ctemp.ma==k\u5c31\u662f\u975e\u4e25\u683c\u6b21\u5c0f\uff09 \r\n        }\r\n        if(dep[u]<dep[v]) swap(u,v);//\u627e\u5230LCA \r\n        qj temp=query(1,1,n,seg[v]+1,seg[u]);\r\n        return max(need,(temp.ma==d)?temp.ma2:temp.ma);//\u540c\u4e0a \r\n    }\r\n    il void init()\r\n    {\r\n        dfs1(1,0),dfs2(1,1),build(1,1,n);\r\n    }\r\n}\r\n//\u6811\u94fe\u5256\u5206 \r\nsigned main()\r\n{\r\n    n=read(),m=read();\r\n    smallesttree::kruskal();//\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\r\n    treecut::init();//\u9884\u5904\u7406\r\n    for(re int i=0;i<m;++i)\r\n    {\r\n    \tif(vis[i]) continue;//\u679a\u4e3e\u6240\u6709\u975e\u6811\u8fb9\uff08\u6ca1\u6709\u5728\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\uff09\r\n    \tre int temp=mtree/*\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u548c*/+edge[i].w/*\u672c\u6765\u7684\u6811\u8fb9\u7684\u8fb9\u6743*/-treecut::LCA(edge[i].u,edge[i].v,edge[i].w)/*\u627e\u5230\u4e25\u683c\u6b21\u5c0f\u8fb9\u7684\u8fb9\u6743*/;\r\n        if(ans>temp&&temp!=mtree+e[i].w/*\u5176\u5b9e\u5c31\u662f\u4e25\u683c\u6b64\u5c0f\u8fb9\u4e0d\u4e3a0\uff08\u6ca1\u6709\u627e\u5230\u4e25\u683c\u6b21\u5c0f\u8fb9\uff09*/&&temp>mtree) ans=temp;\r\n    }\r\n    printf(\"%lld\",ans);\r\n    return 0;\r\n}\r\n```\r\n\r\n## $updata$ $in$ $2019$-$04$-$02$\r\n\r\n\u5b66\u4e60\u4e86LCT\u540e\uff0c\u53d1\u73b0\u8fd9\u9053\u9898\u8c8c\u4f3c\u53ef\u4ee5LCT\u505a\uff0c\u800c\u4e14\u4ee3\u7801\u77ed\u4e86\u5f88\u591a\uff1f\r\n\r\n\u5148\u8dd1\u4e00\u8fb9$Kruskal$\uff0c\u5e76\u5728LCT\u4e0a\u8dd1\u51fa\u6700\u5c0f\u751f\u6210\u6811\u7684\u6837\u5b50\r\n\r\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u52a0\u5165\u540e\u4f1a\u4ea7\u751f\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u5220\u53bb\u73af\u5185\u6700\u5927\u503c\uff08\u82e5\u6700\u5927\u503c\u548c\u6539\u53d8\u76f8\u540c\u5219\u63d2\u5165\u6b21\u5927\u503c\uff09\u5373\u53ef\r\n\r\n```\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define il inline\r\n#define re register\r\n#define debug printf(\"Now is Line : %d\\n\",__LINE__)\r\n#define file(a) freopen(#a\".in\",\"r\",stdin);//freopen(#a\".out\",\"w\",stdout)\r\n#define inf 1234567890000000000\r\n#define ll long long\r\nil int read() {\r\n    re int x = 0, f = 1; re char c = getchar();\r\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\r\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\r\n    return x * f;\r\n}\r\n#define rep(i, s, t) for(re int i = s; i <= t; ++ i)\r\n#define get_fa(x) ch[1][fa[x]] == x\r\n#define isroot(x) ch[1][fa[x]] == x || ch[0][fa[x]] == x\r\n#define updown(x) tag[x] ^= 1, swap(ch[0][x], ch[1][x])\r\n#define maxn 600005\r\nstruct edge {\r\n    int u, v, w;\r\n}e[maxn];\r\nint n, m, is[maxn],ch[2][maxn], fa[maxn], tag[maxn], st[maxn], Fa[maxn];\r\nint mx1[maxn], mx2[maxn], val[maxn];\r\nll ans, Ans = inf;\r\nil int find(int x) {\r\n    while(Fa[x] != x) x = Fa[x] = Fa[Fa[x]];\r\n    return x;\r\n}\r\nil bool cmp(edge a, edge b) {return a.w < b.w;}\r\nil void pushdown(int x) {\r\n    if(!tag[x]) return;\r\n    if(ch[0][x]) updown(ch[0][x]);\r\n    if(ch[1][x]) updown(ch[1][x]);\r\n    tag[x] = 0;\r\n}\r\nil void pushup(int x) {\r\n    mx1[x] = val[x];\r\n    if(mx1[x] < mx1[ch[0][x]]) mx2[x] = mx1[x], mx1[x] = mx1[ch[0][x]];\r\n    else if(mx1[x] > mx1[ch[0][x]]) mx2[x] = max(mx2[x], mx1[ch[0][x]]);\r\n    if(mx1[x] < mx1[ch[1][x]]) mx2[x] = mx1[x], mx1[x] = mx1[ch[1][x]];\r\n    else if(mx1[x] > mx1[ch[1][x]]) mx2[x] = max(mx2[x], mx1[ch[1][x]]);\r\n    mx2[x] = max(max(mx2[x], mx2[ch[1][x]]), mx2[ch[0][x]]);\r\n}\r\nil void rotate(int x) {\r\n    int y = fa[x], z = fa[y], w = get_fa(x), k = get_fa(y);\r\n    if(isroot(y)) ch[k][z] = x; fa[x] = z;\r\n    ch[w][y] = ch[w ^ 1][x], fa[ch[w ^ 1][x]] = y;\r\n    ch[w ^ 1][x] = y, fa[y] = x;\r\n    pushup(y), pushup(x);\r\n}\r\nil void Splay(int x) {\r\n    int top = 0, y = x;\r\n    st[++ top] = y;\r\n    while(isroot(y)) st[++ top] = y = fa[y];\r\n    while(top) pushdown(st[top --]);\r\n    while(isroot(x)) {\r\n        if(isroot(fa[x])) rotate(get_fa(x) == get_fa(fa[x]) ? fa[x] : x);\r\n        rotate(x);\r\n    }\r\n}\r\nil void access(int x) {for(re int y = 0; x; x = fa[y = x]) Splay(x), ch[1][x] = y, pushup(x);}\r\nil void makeroot(int x) {access(x), Splay(x), updown(x);}\r\nil int findroot(int x) {\r\n    access(x), Splay(x);\r\n    while(ch[0][x]) x = ch[0][x];\r\n    return Splay(x), x;\r\n}\r\nil void spilt(int x, int y) {makeroot(x), access(y), Splay(y);}\r\nil void link(int x, int y) {\r\n    makeroot(x);\r\n    if(findroot(y) != x) fa[x] = y;\r\n}\r\nint main() {\r\n    n = read(), m = read();\r\n    rep(i, 1, m) e[i].u = read(), e[i].v = read(), e[i].w = read();\r\n    rep(i, 1, n) Fa[i] = i;\r\n    sort(e + 1, e + 1 + m, cmp);\r\n    rep(i, 1, m) {\r\n        val[i + n] = e[i].w;\r\n        int u = e[i].u, v = e[i].v, a = find(u), b = find(v);\r\n        if(a != b) ans += e[i].w, link(u, i + n), link(i + n, v), is[i] = 1, Fa[a] = b;\r\n    }\r\n    rep(i, 1, m) {\r\n        if(is[i]) continue;\r\n        int u = e[i].u, v = e[i].v;\r\n        spilt(u, v);\r\n        if(e[i].w > mx1[v]) Ans = min(Ans, (ll)e[i].w - mx1[v]);\r\n        else Ans = min(Ans, (ll)e[i].w - mx2[v]);\r\n    }\r\n    printf(\"%lld\", Ans + ans);\r\n    return 0;\r\n}\r\n```",
        "postTime": 1535636422,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u751f\u6210\u6811"
    },
    {
        "content": "%%%TPLY\u5de8\u4f6c\u548cysner\u5de8\u4f6c%%%\n\n## \u601d\u8def\u5206\u6790\n\n\u5177\u4f53\u601d\u8def\u90fd\u5728\u5404\u4f4d\u5de8\u4f6c\u7684\u9898\u89e3\u4e2d\u3002\u8fd9\u9898\u505a\u6cd5\u633a\u591a\u7684\uff0c\u6211\u5c31\u4e0d\u5bf9\u6bcf\u4e2a\u90fd\u8be6\u7ec6\u8bb2\u4e86\uff0c\u6cdb\u6cdb\u800c\u8c08\u5427\u3002\n\n\u5927\u591a\u6570\u7b97\u6cd5\u90fd\u8981\u7528kruskal\u628a\u6700\u5c0f\u751f\u6210\u6811\u5f04\u51fa\u6765\uff0c\u56e0\u4e3a\u8981\u6c42\u6b21\u5c0f\u751f\u6210\u6811\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u6b21\u5c0f\u4e00\u5b9a\u53ea\u5728\u6700\u5c0f\u7684\u57fa\u7840\u4e0a\u6539\u53d8\u4e86\u4e00\u6761\u8fb9\uff0c\u6211\u4e5f\u4e0d\u4f1a\u4e25\u8c28\u7684\u8bc1\u660e\u3002\u3002\u3002\u3002\u3002\u3002~~\u6253\u8868\u627e\u89c4\u5f8b\u5927\u6cd5\u597d~~\n\n\u5269\u4e0b\u7684\u53ef\u4ee5\u6709\u4e00\u5806\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\uff08\u539f\u7406\u4e24\u4f4d\u5de8\u4f6c\u90fd\u8bb2\u6e05\u695a\u4e86\uff0c\u8fd9\u91cc\u53ea\u5206\u6790\u4e00\u4e0b\u7b97\u6cd5\u7684\u4f18\u52a3\uff09\n\n 1. kruscal+\u500d\u589e+LCA\n \n ysner\u5de8\u4f6c\u7684\u505a\u6cd5\uff0c\u6211\u4e5f\u5199\u4e86\u8fd9\u4e00\u79cd\u3002\u590d\u6742\u5ea6$O(MlogM(kruscal)+MlogN($\u500d\u589e$+LCA))$\u5e38\u6570\u8f83\u5c0f\uff0c\u601d\u8def\u7b80\u5355\uff0c\u8be6\u89c1\u5c71\u6960\u5de8\u4f6c\u7684\u9898\u89e3\u3002\u7f3a\u70b9\u662f\u5bb9\u6613\u5199\u6302\uff0c\u5c24\u5176\u662f\u500d\u589e\u90e8\u5206\u3002\u3002\u3002\u3002\u3002\u3002\uff08\u6211\u5199\u4e86\u534a\u4e2a\u4e0a\u5348,Debug\u5927\u534a\u4e2a\u4e0b\u5348\uff09\n \n \u8fd8\u8981\u6ce8\u610f\u7ef4\u62a4\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u7684\u500d\u589e\u72b6\u6001\u8f6c\u79fb\uff0c\u5177\u4f53\u8be6\u89c1\u6700\u4e0b\u65b9\u7684\u4ee3\u7801\u3002\n \n 2. kruscal+\u6811\u5256\n \n \u601d\u8def\u4e5f\u5f88\u7b80\u5355\uff08\u8ddf\u4e0a\u9762\u5dee\u4e0d\u591a\uff09\uff0c\u53ef\u4ee5\u80cc\u6a21\u677f~~\uff08\u4f46\u4e0d\u597d\u6253\uff09~~\uff0c\u7136\u800c\u6211\u5e76\u4e0d\u4f1a\u3002\u53ea\u4e0d\u8fc7\u590d\u6742\u5ea6\u4e5f\u4e3a$O(MlogM+MlogN)$\uff0c\u5e38\u6570\u4e5f\u4e0d\u591f\u5c0f\u3002\n \n 3. LCT\n \n TPLY\u5de8\u4f6c\u7684\u505a\u6cd5\u3002\uff08update\uff1a\u7a81\u7136\u5fc3\u8840\u6765\u6f6e\uff0c\u6211\u4e5f\u7528LCT\u628a\u8fd9\u9053\u9898\u505a\u5566\uff01\u4ee3\u7801\u653e\u5728\u6700\u4e0b\u9762\uff09\n \n \u601d\u8def\u8fd8\u662f\u5f88\u7b80\u5355\uff0c\u62c6\u70b9\u7ef4\u62a4\u8fb9\u6743\uff08[LCT\u603b\u7ed3](http://www.cnblogs.com/flashhu/p/8324551.html)\u6b64\u90e8\u5206\u66f4\u65b0\u5b8c\u5566\uff09\uff0c\u7528LCT\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\uff0c\u80fdlink\u5c31link\uff0c\u4e0d\u80fd\u5c31\u6311\u51fa\u4e24\u4e2a\u70b9split\u4e00\u4e0b\u6765\u67e5\u8be2\u6700\u5927/\u6b21\u5927\u503c\u66f4\u65b0\u7b54\u6848\u3002\u590d\u6742\u5ea6\u6b63\u786e$O(MlogM)$\uff0c\u4f46\u5e38\u6570\u5de8\u5927\uff08\u5929\u5e73\u5de8\u4f6c\u548cXZY\u5de8\u4f6c\u90fd\u88ab\u5361\u5e38\u4e86\u3002\u3002\u3002\u3002\u3002\u3002\uff09\n \n 4. kruscal+\u4e3b\u5e2d\u6811+LCA\n \n \u81ea\u5df1yy\u51fa\u6765\u7684\uff0c\u53ea\u662f\u672a\u5b9e\u73b0\u3002\u6bd5\u7adf\u7528\u5230\u8fd9\u4e00\u9898\u4e0a\u9762\u8fd8\u662f\u6709\u70b9\u5927\u6750\u5c0f\u7528\u4e86\u3002\n \n \u53c2\u8003\u4e00\u4e0b[count on a tree](https://www.luogu.org/problemnew/show/P2633)\u8fd9\u9053\u9898\u548c[\u6211\u7684\u9898\u89e3](http://www.cnblogs.com/flashhu/p/8324339.html)\u3002\n \n \u540c\u6837\u5bf9\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u6309\u964d\u5e8f\u79bb\u6563\u5316\u540e\uff0c\u5efa\u7acb\u4e3b\u5e2d\u6811\uff08\u5e76\u4e0d\u7528\u62c6\u70b9\uff0c\u4ee5\u70b9\u6743\u4f5c\u4e3a\u70b9\u7684\u7236\u8fb9\u7684\u8fb9\u6743\uff09\uff0c\u67e5\u8be2\u8df3$u,v,lca(u,v)$\u4e09\u4e2a\u70b9\uff0c\u7b97$size[lc[u]]+size[lc[v]]-2\u00d7size[lc[lca]]$\u3002\u6211\u4eec\u4e0d\u67e5\u6392\u540d\u4e86\uff0c\u76f4\u63a5\u627e\u6392\u540d\u6700\u5c0f\u7684\u503c\uff0c\u80fd\u5f80\u5de6\u8df3\uff08\u4e0a\u5f0f\u7ed3\u679c\u5927\u4e8e0\uff09\u5c31\u5f80\u5de6\uff0c\u5047\u5982\u6700\u5927\u503c\u7b49\u4e8e\u5f53\u524d\u679a\u4e3e\u5230\u7684\u8fb9\u6743\uff08\u4e0d\u80fd\u6784\u6210\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\uff09\uff0c\u5c31return\u56de\u53bb\u627e\u6b21\u5927\u503c\u3002\u590d\u6742\u5ea6\u6b63\u786e\uff0c$O(MlogM+MlogN)$\uff0c\u5e38\u6570\u5e94\u8be5\u4e5f\u4e0d\u9519\uff08\u6ca1\u6709\u4e8c\u7ef4\u6570\u7ec4\uff0c\u800c\u4e14\u4e0d\u7528\u523b\u610f\u7ef4\u62a4\u6b21\u5927\u503c\uff09\uff0c\u4f46\u6bd4\u65b9\u6cd51\u4f30\u8ba1\u8fd8\u662f\u8981\u4f4e\u6548\u4e00\u70b9\uff08\u67e5\u8be2\u662f\u6ee1\u7684log\uff0c\u65b9\u6cd51\u57fa\u672c\u4e0d\u6ee1\uff09\n \n 5. ~~\uff08\u849f\u84bb\u95f2\u626f\u4e2d\uff0c\u6c42Dalao\u52ff\u55b7\uff09~~\n \n \u6211\u5f88\u5e0c\u671b\uff0c\u7528\u4e00\u79cd\u8d2a\u5fc3\u7684\u601d\u60f3\u6765\u53bb\u6389\u524d\u9762\u9664kruskal\u90e8\u5206\u4ee5\u5916\u7684log\u590d\u6742\u5ea6\u3002\u56e0\u4e3a\u8fb9\u96c6\u5df2\u7ecf\u6392\u597d\u5e8f\uff0c\u6211\u4eec\u7b97\u7b54\u6848\u7684\u65f6\u5019\uff0c\u540e\u9762\u7684\u6743\u503c\u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8e\u524d\u9762\uff0c\u7b97\u8d21\u732e\u7684\u65f6\u5019\u53ef\u4ee5\u8d2a\u5fc3\u3002\u4e8e\u662f\u60f3\u66b4\u529b\u67e5\u8be2\u5e76\u7ef4\u62a4\u5df2\u67e5\u8be2\u7684\u8fb9\uff0c\u4e0b\u6b21\u67e5\u7684\u65f6\u5019\u5c31\u5229\u7528\u4e4b\u524d\u7684\u4fe1\u606f\u5c31\u597d\u4e86\u3002\n \n \u8fd9\u6837\u5bf9\u4e8e\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u662f\u53ef\u505a\u7684\uff0c\u975e\u5e38\u8d2a\u5fc3\uff0c\u627e\u5b8c\u7684\u6700\u5c0f\u751f\u6210\u6811\u8fb9\uff0c\u7b97\u5b8c\u8d21\u732e\u5c31\u5220\u6389\u4e86\u3002\u56e0\u4e3a\u540e\u9762\u679a\u4e3e\u5230\u7684\u975e\u6700\u5c0f\u751f\u6210\u6811\u8fb9\uff0c\u5728\u627e\u7684\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u4e2d\uff0c\u5047\u5982\u5f53\u524d\u627e\u5230\u4e00\u4e2a\u4ee5\u524d\u627e\u8fc7\u7684\u6700\u5c0f\u751f\u6210\u6811\u8fb9\uff0c\u90a3\u4e48\u5f53\u524d\u4ea7\u751f\u7684\u8d21\u732e\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u4ee5\u524d\u4ea7\u751f\u7684\u8d21\u732e\u3002\u6240\u4ee5\u5220\u6389\u5c31\u6ca1\u95ee\u9898\u5566\uff01\n \n \u4f46\u662f\uff0c\u8fd9\u91cc\u8981\u6c42\u662f\u4e25\u683c\u6b21\u5c0f\uff0c\u90a3\u6211\u4eec\u5728\u627e\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u6709\u67d0\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u4e25\u683c\u7b49\u4e8e\u5f53\u524d\u679a\u4e3e\u5230\u7684\u975e\u6811\u8fb9\uff0c\u90a3\u4e48\u5f53\u524d\u4e0d\u80fd\u7b97\u8d21\u732e\uff0c\u4f46\u4ee5\u540e\u53ef\u4ee5\u554a\uff01\n \n \u90a3\u4e48\u53ef\u4e0d\u53ef\u4ee5\u6682\u65f6\u5148\u4e0d\u5220\u6389\u8fd9\u4e9b\u5f53\u524d\u4e25\u683c\u7b49\u4e8e\u7684\u8fb9\u5462\uff1f\u8fd9\u6837\u662f\u5bf9\u7684\uff0c\u4f46\u662f\u5047\u5982\u6784\u9020\u51fa\u4e00\u7ec4\u6570\u636e\uff0c\u4f7f\u5f97\u7edd\u5927\u90e8\u5206\u8fb9\u6743\u503c\u5b8c\u5168\u4e00\u6837\uff0c\u90a3\u4e48\u6bcf\u4e00\u6b21\u679a\u4e3e\u975e\u6811\u8fb9\u90fd\u4e0d\u80fd\u5220\u6389\uff0c\u590d\u6742\u5ea6\u9000\u5316\u5230$O(N(M-N))$\uff0c\u4e0d\u6562\u8fd9\u6837\u505a~~\uff08\u4f46\u613f\u6570\u636e\u8f83\u6c34\uff0c\u4e0d\u5361\u8fd9\u79cd\u65b9\u6cd5\uff09~~\n \n \u8fd8\u6709\u53ef\u80fd\u53ef\u4ee5\u7ef4\u62a4\u4ee5\u524d\u67e5\u8be2\u8fc7\u7684\u6700\u5927\u503c\u3002\u4f46\u6211\u8fd8\u662f\u592a\u5f31\u4e86\uff0c\u5e76\u6ca1\u6709\u60f3\u5230\u5f88\u597d\u7684\u80fd\u4ec5\u4ec5\u4ee5\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u4ee3\u4ef7\u5c31\u80fd\u7ef4\u62a4\u6b64\u4fe1\u606f\u7684\u65b9\u6cd5\uff0cDalao\u4eec\u6709\u60f3\u6cd5\u6b22\u8fce\u6307\u6559\u3002\n \n### kruscal+\u500d\u589e+LCA\n\n\u53c8\u770b\u5230\u4e0d\u5c11\u5de8\u4f6c\u88ab\u5361\u5e38\u4e86\uff0c\u4e8e\u662f\u6211\u6253\u7b97\u62ff\u8fd9\u9898\u6765\u7ec3\u7ec3\u5361\u5e38\u6280\u5de7\u3002\u6548\u679c\u5f88\u4e0d\u9519\uff0c~~yyb_test\u6ca1\u5f00\u6c27\u6c14\u5c31704ms\u5230rank1\u4e86~~\u3002\u8fd8\u662f\u5206\u4eab\u4e00\u4e0b\u5427\u3002\n\nregister\uff0cinline\uff0cfread\u662f\u4e0d\u80fd\u5c11\u7684\u3002\u53e6\u5916\uff0cST\u8868\u662f\u4e2a\u4e8c\u4f4d\u6570\u7ec4\uff0c\u8c03\u7528\u9700\u8981\u8f83\u5927\u5e38\u6570\u3002\u6211\u4eec\u53d1\u6b64\u9898\u500d\u589e\u9700\u8981\u7ef4\u62a43\u4e2a\u91cf\uff08\u6bcf\u4e2a\u70b9\u7684$2^j$\u7684\u7956\u5148\uff08\u7528\u4e8eLCA)\uff0c\u5230\u8fd9\u4e2a\u7956\u5148\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u6700\u5927\u503c\u3001\u6b21\u5927\u503c\uff09\uff0c\u800c\u4e14\u4e0d\u7ba1\u662f\u9884\u5904\u7406\u8fd8\u662f\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u4e09\u4e2a\u91cf\u90fd\u662f\u6346\u7ed1\u5728\u4e00\u8d77\u7684\u3002\u4e8e\u662f\u6211\u5e72\u8106\u628a\u4ed6\u4eec\u653e\u5728\u4e00\u4e2astruct\u91cc\u9762\u4e86\u3002\u7136\u540e\u5f00\u4e00\u4e2a\u4e34\u65f6register\u6307\u9488\u6307\u5411\u5f53\u524d\u7684\u7ef4\u5ea6\uff0c\u9632\u6b62\u53cd\u590d\u8c03\u7528\u4e8c\u4f4d\u6570\u7ec4\u3002\u5927\u6982\u5c31\u662f\u8fd9\u6837\uff0c\u6211\u4e5f\u6ca1\u6cd5\u5f88\u6e05\u695a\u5730\u63cf\u8ff0\uff0c\u770b\u770b\u4ee3\u7801\u5427\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define R register\n#define max(x,y) x>y?x:y//\u8fd4\u56de\u6700\u5927\u503c\n#define maxp(x,y) if(x<y)x=y;//\u66f4\u65b0\u6700\u5927\u503c\n#define in(z)\\\n    while(*++p<'-');\\\n    z=*p&15;\\\n    while(*++p>'-')z*=10,z+=*p&15//\u8bfb\u4f18\nconst int N=100009,M=300009;\nlong long sum;//\u6ce8\u610f\u4e0d\u80fd\u5f00int\nchar s[M<<5];\nbool mst[M];\nint P,he[N],ne[N<<1],to[N<<1],len[N<<1],ff[N],b[N],d[N];\nstruct ST{\n    int f,m1,m2;\n}st[N][18];//\u5c01\u8d77\u6765\nstruct EDGE{\n    int u,v,l;\n    inline bool operator<(EDGE x)const{//\u7528\u4e8esort\n        return l<x.l;\n    }\n    inline void add(){//\u5c06\u8be5\u8fb9\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\n        sum+=l;\n        to[++P]=v;ne[P]=he[u];he[u]=P;len[P]=l;\n        to[++P]=u;ne[P]=he[v];he[v]=P;len[P]=l;\n    }\n}e[M];\nvoid dfs(R int u,R int fa){//\u5efa\u6811\uff0c\u9884\u5904\u7406\n    d[u]=d[fa]+1;\n    st[u][0].f=fa;\n    R ST*a,*l,*r;//\u5361\u5e38\u6307\u9488,a\u603b\u533a\u95f4,l\u4e0a\u533a\u95f4,r\u4e0b\u533a\u95f4\n    //\u53ef\u5ffd\u7565\u4e0b\u9762\u4e00\u884c\uff08\u6781\u5176\u4e11\u964b\uff09\n    for(R int&i=b[u];((a=&st[u][i+1])->f=(l=&st[(r=&st[u][i])->f][i])->f);++i){\n             if(l->m1>r->m1)a->m1=l->m1,a->m2=max(l->m2,r->m1);\n        else if(r->m1>l->m1)a->m1=r->m1,a->m2=max(r->m2,l->m1);\n        else                a->m1=l->m1,a->m2=max(l->m2,r->m2);//\u6ce8\u610f\u8ba4\u771f\u5206\u6790\u6700\u5927\u548c\u6b21\u5927\u7684\u8f6c\u79fb\n    }\n    for(R int i=he[u];i;i=ne[i])\n        if(to[i]!=fa)st[to[i]][0].m1=len[i],dfs(to[i],u);\n}\nint getf(R int x){//\u5e76\u67e5\u96c6\n    if(x!=ff[x])return ff[x]=getf(ff[x]);\n    return x;\n}\nint main(){\n    fread(s,1,sizeof(s),stdin);//\u5361\u5e38\n    R char*p=s-1;//\u518d\u5361\u5e38\n    R ST*l,*r;//\u8fd8\u662f\u5361\u5e38\n    R int n,m,i,j,k,x,y,now,nl,ans=2147483647;\n    in(n);in(m);\n    for(i=1;i<=m;++i){\n        in(e[i].u);in(e[i].v);in(e[i].l);\n    }\n    //kruscal\u5f00\u59cb\n    sort(e+1,e+m+1);\n    for(i=1;i<=n;++i)ff[i]=i;\n    for(i=1;P>>1<n-1;++i){\n        x=getf(ff[e[i].u]);y=getf(ff[e[i].v]);\n        if(x==y)continue;\n        mst[i]=1;//\u6807\u8bb0\u4e3a\u6811\u8fb9\n        ff[x]=y;\n        e[i].add();\n    }\n    dfs(1,0);\n    for(i=1;i<=m;++i){\n        if(mst[i])continue;\n        x=e[i].u;y=e[i].v;now=0;nl=e[i].l;\n        //\u500d\u589e\uff0c\u8df3LCA\u4ee5\u53ca\u66f4\u65b0\u5f53\u524d\u6700\u5927\u8d21\u732e\n        if(d[x]<d[y])j=x,x=y,y=j;\n        for(j=0,k=d[x]-d[y];k;++j,k>>=1){//\u8c03\u6574\u81f3\u6df1\u5ea6\u76f8\u540c\n            if(k&1){\n                if((l=&st[x][j])->m1!=nl){maxp(now,l->m1);}\n                else{maxp(now,l->m2);}\n                x=l->f;\n                }\n            }\n        if(x==y)goto F;//\u4e0d\u7528\u8df3LCA\u4e86\uff0c\u4e0b\u9762\u76f4\u63a5\u8df3\u8fc7\n        for(j=b[x];j>=0;--j){\n            if((l=&st[x][j])->f==(r=&st[y][j])->f)continue;\n            if(l->m1!=nl){maxp(now,l->m1);}\n            else{maxp(now,l->m2);}//\u5224\u65ad\u7528\u6700\u5927\u8fd8\u662f\u6b21\u5927\u66f4\u65b0\n            if(r->m1!=nl){maxp(now,r->m1);}\n            else{maxp(now,r->m2);}\n            x=l->f;y=r->f;\n        }\n//\u6ce8\u610f\u4e0b\u9762\u51e0\u884c\uff0c\u8fd8\u6ca1\u8df3\u5230LCA\u4e0a\uff0c\u8fd8\u8981\u7b97\u7236\u8fb9\u6709\u6ca1\u6709\u8d21\u732e\uff08\u5bb3\u6211WA\u4e86N\u56de\uff09\n        if((l=&st[x][0])->m1!=nl){maxp(now,l->m1);}\n        else{maxp(now,l->m2);}\n        if((r=&st[y][0])->m1!=nl){maxp(now,r->m1);}\n        else{maxp(now,r->m2);}\n      F:if(ans>nl-now)ans=nl-now;\n    }\n    printf(\"%lld\\n\",sum+ans);\n    return 0;\n}\n```\n\n### LCT\n\n\u5176\u5b9e\u53ef\u80fdTPLY\u5de8\u4f6c\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\u5bfc\u81f4\u5e38\u6570\u8fc7\u5927\u3002\u56e0\u4e3aLCT\u53ef\u4ee5\u52a8\u6001\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6240\u4ee5kruskal\u3001\u5efa\u6811\u3001\u679a\u4e3e\u5c1d\u8bd5\u66f4\u65b0\u7b54\u6848\u8fd9\u51e0\u6b65\u5206\u5f00\u505a\u6709\u4e9b\u591a\u4f59\u4e86\u3002\u5176\u5b9e\u8fd9\u4e9b\u6b65\u9aa4\u53ef\u4ee5\u5408\u5728\u4e00\u8d77\uff0c\u7b49\u4e8e\u8bf4\u6574\u4e2a\u8fb9\u96c6\u53ea\u8981\u6392\u597d\u5e8f\u540e\uff0c\u53ea\u8981\u4ece\u5c0f\u5230\u5927\u626b\u4e00\u904d\u5c31\u597d\u5566\u3002\u626b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u6ca1\u8fde\u901a\u5c31\u8fde\u8d77\u6765\uff0c\u5982\u679c\u8054\u901a\u4e86\uff0c\u5c31\u76f4\u63a5split\u4e24\u4e2a\u70b9\u5e76\u66f4\u65b0\u7b54\u6848\u3002\n\n\u5f53\u7136\u4e86\uff0c\u8fde\u901a\u6027\u7684\u7ef4\u62a4\u80fd\u7528\u5e76\u67e5\u96c6\u80af\u5b9a\u5c3d\u91cf\u7528\uff0cfindroot\u592a\u6162\u4f1aT\u3002\n\n\u8bd5\u4e00\u4e0b\u4e3b\u52a8\u62d2\u7edd\u6c27\u6c14\u7684\u6ecb\u517b\uff1f\uff01\u7136\u540e\u6211\u5c31\u8fc7\u4e86\uff0c\u6700\u540e\u4e24\u4e2a\u70b9960+ms\uff1f\uff01~~\uff08\u4e0d\u597d\u610f\u601dTPLY\u5de8\u4f6c\uff09~~\n\n\u540e\u6765\u53d1\u73b0\u5fd8\u4e86fread\uff0c\u4e8e\u662f\u53c8\u4ea4\u4e00\u6ce2\uff0c\u6700\u540e\u4e00\u4e2a\u70b9T\uff1f\uff01\n\u96be\u9053\u5199\u7684define\u53cd\u590d\u8c03\u7528\u7ed3\u6784\u4f53\u5bfc\u81f4\u592a\u6162\uff1f\u4e3a\u4e86\u5361\u5e38\u53c8\u9b54\u6539\u4e86\u4e00\u4e0b\uff0c\u6700\u7ec8\u6700\u540e\u4e00\u4e2a\u70b9800ms\u5de6\u53f3\u8fc7\u3002\n\n\u8d34\u4e00\u4e0b~~\u6781\u7b80\u4e3b\u4e49~~\u4e11\u964b\u7684LCT\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define R register int\n#define I inline void\n#define lc c[x][0]\n#define rc c[x][1]\n#define in(z) ini=&z;\\//\u7528\u6307\u9488\u4f18\u5316\u4e00\u4e0b\n    while(*++q<'-');\\\n    *ini=*q&15;\\\n    while(*++q>'-')*ini*=10,*ini+=*q&15\nconst int N=100009,M=200009;\nint f[M],c[M][2],v[M],mx[M],mx2[M],ff[N];//ff\u5e76\u67e5\u96c6\nbool r[M];\nchar str[M<<6];\nstruct EDGE{\n    int u,v,l;\n    inline bool operator<(EDGE x)const{\n        return l<x.l;\n    }\n}e[300009];\ninline bool nroot(R x){\n    return c[f[x]][0]==x||c[f[x]][1]==x;\n}\nI pushup(R x){\n    R l=lc,r=rc;\n         if(mx[l]>mx[r])mx[x]=mx[l],mx2[x]=max(mx2[l],mx[r]);\n    else if(mx[r]>mx[l])mx[x]=mx[r],mx2[x]=max(mx2[r],mx[l]);\n    else                mx[x]=mx[l],mx2[x]=max(mx2[l],mx2[r]);\n         if(v[x]>mx[x]) mx2[x]=mx[x],mx[x]=v[x];\n    else if(v[x]!=mx[x]&&v[x]>mx2[x])mx2[x]=v[x];\n}//\u60f3\u7ef4\u62a4\u4e2a\u6b21\u5927\u503c\u600e\u4e48\u5c31\u90a3\u4e48\u9ebb\u70e6\u554a\u3002\u3002\u3002\u3002\u3002\u3002\uff08\u4e0e\u500d\u589e\u4e0d\u540c\uff0c\u9664\u4e86\u5de6\u53f3\u513f\u5b50\uff0c\u81ea\u5df1\u4e5f\u8981\u8003\u8651\uff09\nI pushdown(R x){\n    if(r[x]){\n        R t=lc;\n        r[lc=rc]^=1;r[rc=t]^=1;r[x]=0;\n    }\n}\nI pushall(R x){\n    if(nroot(x))pushall(f[x]);\n    pushdown(x);\n}//\u53c8\u7528\u51fd\u6570\u5806\u6808pushdown\nI rotate(R x){\n    R y=f[x],z=f[y],k=c[y][1]==x,w=c[x][!k];\n    if(nroot(y))c[z][c[z][1]==y]=x;c[x][!k]=y;c[y][k]=w;\n    f[w]=y;f[y]=x;f[x]=z;\n    pushup(y);\n}\nI splay(R x){\n    R y=x;\n    pushall(x);\n    while(nroot(x)){\n        if(nroot(y=f[x]))\n            rotate((c[y][0]==x)^(c[f[y]][0]==y)?x:y);\n        rotate(x);\n    }\n    pushup(x);\n}\nI access(R x){\n    for(R y=0;x;x=f[y=x])\n        splay(x),rc=y,pushup(x);\n}\nI mroot(R x){\n    access(x);splay(x);\n    r[x]^=1;\n}//\u4ee5\u4e0aLCT\uff0csplit\u548clink\u5199main\u51fd\u6570\u91cc\u9762\u53bb\u5566\nint getf(R x){\n    if(x==ff[x])return x;\n    return ff[x]=getf(ff[x]);\n}//\u5e76\u67e5\u96c6\u4ee3\u66ff\u4e86findroot\nint main(){\n    fread(str,1,sizeof(str),stdin);\n    R n,m,p,i,x,y,ans=2147483647,*ini;\n    register char*q=str-1;\n    register long long sum=0;\n    in(n);in(m);p=n;//p\u7528\u6765\u533a\u5206\u70b9\u548c\u8fb9\uff08\u5728LCT\u91cc\u90fd\u662f\u70b9\uff09\n    for(i=1;i<=n;++i)\n        ff[i]=i;//\u521d\u59cb\u5316\n    for(i=1;i<=m;++i){\n        in(e[i].u);in(e[i].v);in(e[i].l);\n    }\n    sort(e+1,e+m+1);\n    for(i=1;i<=m;++i){\n        if(getf(x=e[i].u)==getf(y=e[i].v)){\n            mroot(x);\n            access(y);splay(y);\n            ans=min(ans,e[i].l-(e[i].l>mx[y]?mx[y]:mx2[y]));\n        }//\u5982\u679c\u8fde\u5b8c\u4e86\u76f4\u63a5\u66f4\u65b0\u7b54\u6848\n        else{\n            mroot(x);\n    \t\tf[f[x]=++p]=y;//\u70b9\u8fde\u8fb9\uff0c\u8fb9\u8fde\u70b9\uff0c\u987a\u5e8f\u4e00\u5b9a\u8981\u4fdd\u8bc1\n    \t\tsum+=mx[p]=v[p]=e[i].l;//\u8fb9\u6743\u653e\u8fdbLCT\u91cc\u9762\n    \t\tff[ff[x]]=ff[y];//\u5e76\u67e5\u96c6\u5408\u5e76\n        }\n    }\n    printf(\"%lld\\n\",sum+ans);\n    return 0;\n}\n```",
        "postTime": 1519646175,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4180 \u3010[Beijing2010\u7ec4\u961f]\u6b21\u5c0f\u751f\u6210\u6811Tree\u3011"
    },
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u70b9[\u8fd9\u91cc](http://attack204.com/2018/02/21/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/)\n## \u6b21\u5c0f\u751f\u6210\u6811\n\u6211\u4eec\u5df2\u7ecf\u719f\u77e5\u4e86\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u65b9\u6cd5\uff0c\u7528kruskal,prim\u7b97\u6cd5\u90fd\u53ef\u4ee5\u641e\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u6c42\u6b21\u5c0f\u751f\u6210\u6811\u5462\uff1f\n\n\u8fd9\u91cc\u6b21\u5c0f\u751f\u6210\u6811\u7684\u5b9a\u4e49\u662f\n\n>\u8fb9\u6743\u548c\u4e25\u683c\u5927\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811\n\n##  \u6c42\u89e3\u65b9\u6cd5\n\n\u6b21\u5c0f\u751f\u6210\u6811\u561b\uff0c\u80af\u5b9a\u548c\u6700\u5c0f\u751f\u6210\u6811\u8131\u4e0d\u4e86\u5173\u7cfb\n\n\u90a3\u4e48\u6211\u4eec\u9996\u5148\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\n\n\n\u63a5\u4e0b\u6765\uff0c\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684\u601d\u8def\u662f\n\n\u679a\u4e3e\u6bcf\u4e00\u6761\u672a\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\uff0c\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\uff0c\u540c\u65f6\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u5220\u9664\u8fb9\u6743\u6700\u5927\u7684\u8fb9\n\n\u5982\u679c\u4f60\u60f3\u5230\u4e86\u8fd9\u91cc\u5e76\u5199\u51fa\u4e86\u4ee3\u7801\uff0c\u90a3\u4e48\u606d\u559c\u4f60\n\n\u4f60\u5728\u91cc\u6210\u529f\u8fd8\u6709\u4e00\u6b65\u4e4b\u9065\u6210\u529f\u6389\u8fdb\u5751\u91cc\u4e86\n\n\u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\n\n![](http://ou46et6i2.bkt.clouddn.com/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91.png)\n\n\u84dd\u8fb9\u8868\u793a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u8fb9\uff0c\u9ec4\u8fb9\u8868\u793a\u65b0\u52a0\u5165\u7684\u8fb9\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4ec5\u4ec5\u8bb0\u5f55\u6700\u5927\u503c\u7684\u8bdd\uff0c\u5f97\u5230\u7684\u7b54\u6848\u4e00\u5b9a\u662f\u9519\u7684\n\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u8bb0\u5f55\u4e25\u683c\u5c0f\u4e8e\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n\n\u5f53\u4ea7\u751f\u51b2\u7a81\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u5220\u9664\u4e25\u683c\u5c0f\u4e8e\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n\n\n## \u4f18\u5316\n\u4f46\u662f\u8fd9\u6837\u6548\u7387\u592a\u4f4e\u4e86\uff0c\u6bcf\u4e00\u6b21\u67e5\u8be2\u90fd\u662f$O(n)$\u7684\n\n\u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u5462\uff1f\n\n\n\u4e0d\u8981\u5fd8\u4e86\uff0c\u6700\u5c0f\u751f\u6210\u6811\u5b83\u662f\u4e00\u68f5\u6811\u5440\n\n\u6811\u7684\u94fe\u4e0a\u6700\u5927\u6700\u5c0f\u503c\u64cd\u4f5c\uff0c\u4f60\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\n\n\n\u6ca1\u9519\uff01\u6811\u4e0a\u500d\u589e\n\n\u6211\u4eec\u5728\u500d\u589e\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u4e0b\u6700\u5927\u503c\u548c\u4e25\u683c\u5c0f\u4e8e\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n\n\n\u8fd9\u6837\u6bcf\u6b21\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u5c31\u53d8\u6210$log(n)$\u5566\n\n## \u603b\u7ed3\n\n### \u6d41\u7a0b\n\u6574\u4e2a\u7b97\u6cd5\u7684\u6d41\u7a0b\u5927\u6982\u662f\n\n1. \u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\n\n2. \u6784\u9020\u51fa\u500d\u589e\u6570\u7ec4\n\n3. \u6bcf\u6b21\u6811\u4e0a\u500d\u589e\u67e5\u8be2\n\n\n### \u65f6\u95f4\u590d\u6742\u5ea6\n\u7528kruskal\u662f$O(m\\log m+Q\\log (n))$\n\n\u7528prim\u662f$O(n\\log n+Q\\log (n))$\n\nQ\u4e3a\u8be2\u95ee\u6b21\u6570\n\n \n## \u4ee3\u7801\n\n\u653e\u4e00\u9053[\u88f8\u9898](https://www.luogu.org/problemnew/show/P4180)\n\n\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\n#define Pair pair<int, int> \n#define MP(x, y) make_pair(x, y)\n#define fi first\n#define se second \n#define LL long long\nusing namespace std;\nconst int MAXN = 3e5 + 10;\nconst LL INF = 1e15 + 10;\ninline int read() {\n    char c = getchar(); int x = 0, f = 1;\n    while (c < '0' || c > '9') {if (c == '-')f = -1; c = getchar();}\n    while (c >= '0' && c <= '9') {x = x * 10 + c - '0'; c = getchar();}\n    return x * f;\n}\nstruct Edge {\n    int u, v, w;\n    bool operator < (const Edge &rhs) const {\n    \treturn w < rhs.w;\n    }\n} E[MAXN];\nvector<Pair> v[MAXN];\nint N, M, fa[MAXN], vis[MAXN], dep[MAXN], f[MAXN][19], mx[MAXN][19], me[MAXN][19];;\nLL sum;\nint find(int x) {\n    return fa[x] == x ? fa[x] : fa[x] = find(fa[x]);\n}\nvoid Kruskal() {\n    sort(E + 1, E + M + 1);\n    int tot = 0;\n    for (int i = 1; i <= M; i++) {\n        int x = E[i].u, y = E[i].v, fx = find(x), fy = find(y);\n        if (fx != fy) {\n            fa[fx] = fy; \n            tot++, sum += E[i].w, vis[i] = 1;\n            v[x].push_back(MP(y, E[i].w)); \n            v[y].push_back(MP(x, E[i].w));\n        }\n        if (tot == N - 1) break;\n    }\n}\nvoid dfs(int x, int fa) {\n    dep[x] = dep[fa] + 1; f[x][0] = fa; \n    for(int i = 0, to; i < v[x].size(); i++) {\n    \tif((to = v[x][i].fi) == fa) continue;\n    \tmx[to][0] = v[x][i].se;\n    \tdfs(to, x);\n    }\n}\nvoid pre() {\n    for (int i = 1; i <= 18; i++) {\n        for (int j = 1; j <= N; j++) {\n            f[j][i] = f[ f[j][i - 1] ][i - 1];\n            int topf = f[j][i - 1];\n            mx[j][i] = max(mx[j][i - 1], mx[topf][i - 1]);\n            me[j][i] = max(me[j][i - 1], me[topf][i - 1]);\n            if (mx[j][i - 1] > mx[topf][i - 1]) me[j][i] = max(me[j][i], mx[topf][i - 1]);\n            else if (mx[j][i - 1] < mx[topf][i - 1]) me[j][i] = max(me[j][i], mx[j][i - 1]);\n        }\n    }\n}\nint LCA(int x, int y) {\n    if (dep[x] < dep[y]) swap(x, y);\n    for (int i = 18; i >= 0; i--) if (dep[ f[x][i] ] >= dep[y] ) x = f[x][i];\n    if (x == y) return x;\n    for (int i = 18; i >= 0; i--) if (f[x][i] != f[y][i]) x = f[x][i], y = f[y][i];\n    return f[x][0];\n}\nint findmax(int x, int lca, int val) {\n    LL ans = 0;\n    for (int i = 18; i >= 0; i--) {\n        if (dep[ f[x][i] ] >= dep[lca]) {\n            if (mx[x][i] == val) ans = max(ans, (LL) me[x][i]);\n            else ans = max(ans, (LL) mx[x][i]);\n            x = f[x][i];\n        }\n    }\n    return ans;\n}\nvoid work() {\n    LL ans = INF;\n    for (int i = 1; i <= M; i++) {\n        if (vis[i]) continue;\n        int x = E[i].u, y = E[i].v, z = E[i].w;\n        int lca = LCA(x, y);\n        int lmx = findmax(x, lca, z), rmx = findmax(y, lca, z);\n        if (max(lmx, rmx) != z)  ans = min(ans, sum + z - max(lmx, rmx));\n    }\n    printf(\"%lld\", ans);\n}\nint main() {\n    N = read(), M = read();\n    for (int i = 1; i <= N; i++) fa[i] = i;\n    for (int i = 1; i <= M; i++) {\n        int x = read(), y = read(), z = read();\n        E[i] = (Edge) {x, y, z};\n    }\n    Kruskal();\n    dfs(1, 0);\n    pre();\n    work();\n    return 0;\n}\n```\n",
        "postTime": 1519221407,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4180 \u3010[Beijing2010\u7ec4\u961f]\u6b21\u5c0f\u751f\u6210\u6811Tree\u3011"
    },
    {
        "content": "\u4e8b\u5b9e\u8bc1\u660e,\u672c\u9898\u7684\u6570\u636e\u4ecd\u7136\u4e0d\u591f\u5f3a.bzoj\u4e0a\u9762\u539f\u672c\u7684\u6570\u636e\u4e5f\u662f\u8fd9\u6837\u7684.  \n\u4e00\u8fb9\u4e0d\u65ad\u5492\u9a82\u81ea\u5df1\u5b9e\u5728\u592a\u4e0d\u8981\u8138,\u4e00\u8fb9\u8fd8\u662f\u5199\u4e86\u9898\u89e3.\n\n\u9996\u5148\u6211\u4eec\u8fd8\u662f\u6765\u60f3\u60f3\u90a3\u4e2a\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811.  \n\u679a\u4e3e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9,\u628a\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u51cf\u6389\u518d\u52a0\u4e0a\u8be5\u8fb9\u7684\u6743\u503c.\u6c42\u51fa\u4e00\u4e2a\u6700\u5c0f\u503c\u5c31\u662f\u7b54\u6848.   \n\u6211\u77e5\u9053\u6807\u7b97\u8981\u7ef4\u62a4\u6b21\u5927\u8fb9,\u8fd9\u6837\u786e\u5b9e\u4e0d\u597d\u5199.  \n\u7136\u540e\u6211\u4e0d\u7981\u60f3:\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u7684\u603b\u6743\u503c\u5927\u4e8e\u6700\u5c0f\u751f\u6210\u6811,\u6240\u4ee5\u6211\u5728\u679a\u4e3e\u521a\u624d\u7684\u7b54\u6848\u65f6\u5bf9**\u4e25\u683c\u5927\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u7684\u7ed3\u679c**\u53d6\u6700\u5c0f\u503c,\u8fd9\u6837\u8fdb\u884c\u8d2a\u5fc3.  \n\u6211\u4e0d\u77e5\u9053\u5927\u5bb6\u662f\u5426\u770b\u61c2\u4e86\u4e0a\u9762\u8fd9\u53e5\u8bdd.  \n\u90a3\u4e48\u663e\u7136\u4e0a\u9762\u8fd9\u4e2a\u5947\u602a\u7684\u7b97\u6cd5\u80af\u5b9a\u662f\u9519\u7684,\u4f46\u662f\u7a0d\u5fae\u60f3\u4e00\u4e0b\u6211\u53d1\u73b0\u975e\u5e38\u4e0d\u597dhack.   \n\u8981\u60f3hack\u6389\u8fd9\u4e2a,\u4f60\u9700\u8981\u4ea7\u751f\u4e00\u7ec4\u6b21\u5927\u8fb9\u4ea7\u751f\u6b21\u5c0f\u751f\u6210\u6811\u7684\u6570\u636e.  \n\u7531\u4e8e\u968f\u673a\u6570\u636e\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\u7684\u6982\u7387\u975e\u5e38\u4f4e(\u76ee\u524d\u7684\u60c5\u51b5\u662f$1$\u4e2a\u5c0f\u65f6\u6ca1\u6709\u62cd\u51fa\u4e00\u7ec4hack\u6210\u529f\u7684\u6570\u636e.),\u6240\u4ee5\u6700\u540e\u6211\u8fd8\u662f\u62b1\u7740\u8bd5\u8bd5\u770b\u7684\u5fc3\u60c5\u4ea4\u4e86\u4e00\u904d.WA90.  \n\u6211\u770b\u90a3\u4e2a\u552f\u4e00\u7684\u9519\u8bef\u70b9\u8fd0\u884c\u7684\u65f6\u95f4,$2ms$.  \n\u90a3\u65f6\u5019\u6211\u5f00\u59cb\u7a83\u559c.\u7136\u540e\u6211\u5f00\u59cb\u7279\u5224\u8fb9\u6570\u975e\u5e38\u5c0f\u7684\u6570\u636e,\u7528\u66b4\u529b\u8dd1\u51fa\u6240\u6709\u751f\u6210\u6811.  \n\u7136\u540e\u975e\u5e38\u666e\u901a\u7684A\u4e86.  \n\u989d.\u4e0d\u8fc7\u6211\u65c1\u8fb9\u7684\u5927\u4f6c\u7528\u4e24\u4e2a\u5c0f\u65f6\u641e\u51fa\u4e86\u4e00\u7ec4\u80fd\u591fhack\u6211\u7684\u6570\u636e.  \n\u4ee3\u7801\u5c31\u653e\u5728\u4e0b\u9762\u4e86,\u5927\u5bb6\u7b11\u4e00\u4e0b\u5c31\u597d.\n\n```cpp\n#include<bits/stdc++.h>\nnamespace chtholly{\ntypedef long long ll;\n#define re0 register int\n#define rec register char\n#define rel register ll\n#define gc getchar\n#define pc putchar\n#define p32 pc(' ')\n#define pl puts(\"\")\n/*By Citrus*/\ninline int read(){\n  int x=0,f=1;char c=gc();\n  for (;!isdigit(c);c=gc()) f^=c=='-';\n  for (;isdigit(c);c=gc()) x=(x<<3)+(x<<1)+(c^'0');\n  return f?x:-x;\n  }\ntemplate <typename mitsuha>\ninline bool read(mitsuha &x){\n  x=0;int f=1;char c=gc();\n  for (;!isdigit(c)&&~c;c=gc()) f^=c=='-';\n  if (!~c) return 0;\n  for (;isdigit(c);c=gc()) x=(x<<3)+(x<<1)+(c^'0');\n  return x=f?x:-x,1;\n  }\ntemplate <typename mitsuha>\ninline int write(mitsuha x){\n  if (!x) return 0&pc(48);\n  if (x<0) x=-x,pc('-');\n  int bit[20],i,p=0;\n  for (;x;x/=10) bit[++p]=x%10;\n  for (i=p;i;--i) pc(bit[i]+48);\n  return 0;\n  }\ninline char fuhao(){\n  char c=gc();\n  for (;isspace(c);c=gc());\n  return c;\n  }\n}using namespace chtholly;\nusing namespace std;\nconst int yuzu=4e5;\nconst ll inf=1e16;\ntypedef int fuko[yuzu|10];\nint n=read(),m=read(),cnt,ecnt;\nfuko vis,head;\nstruct node{\nint u,v,cost;\nvoid rd(){u=read(),v=read(),cost=read();}\nbool operator <(const node &b) const{\n  return cost<b.cost;\n  }\n}b[yuzu|10];\n\nstruct dsu{\nfuko fa;\nvoid init(int n){for (int i=1;i<=n;++i) fa[i]=i;}\nint find(int x){return fa[x]^x?fa[x]=find(fa[x]):x;}\nint mg(int u,int v){\n  int fu=find(u),fv=find(v);\n  return fu^fv?fa[fu]=fv,1:0;\n  }\n}my_;\n\nstruct edge{int fr,to,cost,next;}e[yuzu<<1|13];\nvoid add(int u,int v,int c){e[++ecnt]=edge{u,v,c,head[u]},head[u]=ecnt;}\n\nll mst;\nll getmst(){\nfor (int i=1;i<=m;++i){\n  int u=b[i].u,v=b[i].v,c=b[i].cost;\n  if (my_.mg(u,v)){\n    vis[i]=1,mst+=c;\n    add(u,v,c),add(v,u,c);\n    }\n  }return mst;\n}\n \n/*\u6c42\u975e\u4e25\u683c\u6700\u5c0f\u751f\u6210\u6811\u7528\u7684\u662f\u6811\u94fe\u5256\u5206,\u53ef\u4ee5\u6c42\u51fa\u6811\u4e0a\u4e24\u70b9\u95f4\u7684\u6700\u5927\u503c.\n  \u6811\u5256\u4e4b\u7c7b\u7684\u5168\u662f\u6a21\u677f,\u76f8\u4fe1\u4e0d\u7528\u6211\u591a\u505a\u89e3\u91ca.*/\nnamespace tree_chain_splitting{\nfuko fa,son,sz,dep,ord,dfn,top,a;\n \nvoid dfs1(int u,int f){\n  sz[u]=1,dep[u]=dep[fa[u]=f]+1;\n  for (int i=head[u];i;i=e[i].next){\n    int v=e[i].to;\n    if (v^f){\n      dfs1(v,u),sz[u]+=sz[v];\n      if (sz[v]>sz[son[u]]) son[u]=v;\n      }\n    }\n  }\nvoid dfs2(int u,int _top){\n  top[u]=_top,dfn[ord[++cnt]=u]=cnt;\n  if (son[u]) dfs2(son[u],_top);\n  for (int i=head[u];i;i=e[i].next){\n    int v=e[i].to;\n    if (v^fa[u]&&(v^son[u])) dfs2(v,v);\n    }\n  }\n \ntypedef ll karen[yuzu<<2|13];\nstruct segtree{\n#define le rt<<1\n#define ri le|1\n#define ls le,l,mid\n#define rs ri,mid+1,r\nkaren da;\nvoid build(int rt=1,int l=1,int r=n){\n  if (l==r) da[rt]=a[l];\n  else{\n    int mid=l+r>>1;\n    build(ls),build(rs);\n    da[rt]=max(da[le],da[ri]);\n    }\n  } \nll query(int ql,int qr,int rt=1,int l=1,int r=n){\n  if (ql>r||qr<l) return -inf;\n  if (ql<=l&&qr>=r) return da[rt];\n  int mid=l+r>>1;\n  return max(query(ql,qr,ls),query(ql,qr,rs));\n  }\n}llx;\n \nvoid preedge(){\n  for (int i=1;i<=m;++i) if (vis[i]){\n    int u=b[i].u,v=b[i].v;\n    if (dep[u]>dep[v]) swap(u,v);\n    a[dfn[v]]=b[i].cost;\n    }\n  }\n \nll query(int u,int v){\n  ll ans=-inf;\n  for (;top[u]^top[v];u=fa[top[u]]){\n    if (dep[top[u]]<dep[top[v]]) swap(u,v);\n    ans=max(ans,llx.query(dfn[top[u]],dfn[u]));\n    }\n  if (dep[u]>dep[v]) swap(u,v);\n  return max(ans,llx.query(dfn[u]+1,dfn[v]));\n  }\n \nint main(){\n  int i;\n  dfs1(1,0),dfs2(1,1);\n  preedge(),llx.build();\n  ll zxy=inf;\n  for (i=1;i<=m;++i) if (!vis[i]){\n    int u=b[i].u,v=b[i].v;\n    ll tmp=mst-query(u,v)+b[i].cost;\n    if (tmp>mst) zxy=min(zxy,tmp); \n    }write(zxy);\n  }\n}\n \nnamespace m_less_than_11{//\u66b4\u529b\u679a\u4e3e\u7ec4\u5408\u6570\u4e0d\u7528\u6211\u89e3\u91ca\u5427.\nll llx=inf;\nfuko a;\n/*m:k k:n-1 n:m*/\nvoid dfs(int k,int p){\nif (k>=n){\n  ll tmp=0;\n  for (int i=1;i<n;++i) tmp+=b[a[i]].cost;\n  if (tmp>mst) llx=min(llx,tmp);\n  return;\n  }\nfor (int i=p+1;i<=m+k-n+1;++i){\n  a[k]=i,dfs(k+1,i);\n  }\n}\n\nint main(){\n  dfs(1,0);\n  write(llx);\n  }\n}\n \nint main(){\nint i,j;\nmy_.init(n);\nfor (i=1;i<=m;++i) b[i].rd();\nsort(b+1,b+m+1),getmst();\nif (m<=15) return m_less_than_11::main(),0;\ntree_chain_splitting::main();\n}\n```",
        "postTime": 1532004257,
        "uid": 49371,
        "name": "Fuko_Ibuki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "# \u88ab\u8fd9\u9898\u7684INF\u503c\u7ed9\u5f04\u81ea\u95ed\u4e86\n# \u5f88\u6c14\n\n## \u9898\u76ee\u94fe\u63a5\uff1a[P4180 \u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]](https://www.luogu.org/problemnew/show/P4180)\n\n\u770b\u4e86 $Julao$ \u4eec\u7684\u9898\u89e3\uff0c\u8868\u793a\u505a\u6cd5\u90fd\u5f88\u5f3a ~~\u53ea\u662f\u6211\u4e0d\u4f1a~~ \uff0c\u4f46\u662f\u6211\u7684\u505a\u6cd5\u662f **Kruskal + \u6811\u5256**\uff0c\u8fd9\u4e2a\u505a\u6cd5\u7684\u597d\u50cf\u53ea\u6709\u4e00\u4f4d\u5de8\u4f6c\u5199\u4e86\u9898\u89e3 ~~\u7136\u800c\u6211\u6ca1\u770b\u61c2~~ \uff0c\u6240\u4ee5\u81ea\u5df1\u6765\u5199\u4e00\u7bc7\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u5199\u6811\u5256\u3002\u3002\u3002\u662f\u67d0 $zxyhymzg$ \u5de8\u4f6c\u54c4\u9a97\u6211\u505a\u7684\u3002\u3002\u3002\n\n\n\n------------\n\n\u9996\u5148\u5f3a\u70c8\u7533\u660e\uff0c\u6b64\u9898\u7684 $INF$ \u5e94\u8be5\u5f00\u5927\u4e9b\uff0c\u6211\u5c31\u56e0\u4e3a\u6ca1\u5f00\u5927\u5c31 $90WA$ \u4e86\u65e0\u6570\u904d\n\n\u6211\u8fd9\u8fb9\u5f00\u7684\u662f $2147483647 * 10^6$\uff0c\u53ef\u628a\u6211\u5751\u6b7b\u4e86\n\n------------\n\u8fdb\u5165\u6b63\u9898\n\n\u9996\u5148\u53ef\u4ee5\u8bc1\u660e\uff1a\u81f3\u5c11\u6709\u4e00\u4e2a\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u548c\u6700\u5c0f\u751f\u6210\u6811\u53ea\u6709\u4e00\u6761\u8fb9\u7684\u5dee\u5f02 ~~\u53ea\u662f\u6211\u4e0d\u4f1a\u8bc1~~\n\n\u6240\u4ee5\u9996\u5148\u5c31\u53ef\u4ee5\u5148\u8dd1 $Kruskal$ \uff0c\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811($mst$)\uff0c\u518d\u679a\u4e3e\u6ca1\u6709\u5728 $mst$ \u4e2d\u7684\u8fb9\uff0c\u8fdb\u884c\u66f4\u65b0\u5373\u53ef\n\n### \u542c\u7740\u5f88\u7b80\u5355\u5bf9\u5427\n\n\u4f46\u662f\u6b64\u5904\u8fd9\u4e2a**\u66f4\u65b0**\u7684\u8fc7\u7a0b\u5c31\u5f88\u6709\u610f\u601d\u4e86\u3002\u5f53\u6211\u4eec\u73b0\u5728\u679a\u4e3e\u4e00\u6761\u8fb9 $e[i]$ \uff0c\u5b83\u6ca1\u6709\u5728 $mst$ \u4e4b\u4e2d\uff1a\u5982\u4f55\u5c06\u5176\u52a0\u5165\uff0c\u6709\u4fdd\u8bc1\u5b83\u6709\u53ef\u80fd\u662f\u4e00\u4e2a\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u5462\uff1f\n\n\u6211\u4eec\u628a $e[i]$ \u8fd9\u6761\u8fb9\u6240\u8fde\u7684\u4e24\u4e2a\u70b9\u5206\u522b\u53eb\u505a $x$ \u548c $y$ \u597d\u4e86\uff0c\u90a3\u4e48\u6b64\u65f6$x$\uff0c$y$\u90fd\u80af\u5b9a\u5728 $mst$ \u4e4b\u4e2d\u88ab**\u4e00\u6761\u6216\u591a\u6761**\u5728$mst$\u4e2d\u7684\u8fb9\u7ed9\u8fde\u63a5\u8d77\u6765\u3002\u5f53\u6211\u4eec\u9700\u8981\u52a0\u5165$e[i]$\u65f6\uff0c\u4e00\u5b9a\u9700\u8981\u5220\u9664$x$\uff0c$y$\u7684\u8fde\u7ebf\u4e0a\u7684\u67d0\u4e00\u6761\u8fb9\u624d\u53ef\u4ee5\u4fdd\u8bc1\u52a0\u5165\u65b0\u8fb9\u4e4b\u540e\u8fd8\u662f\u4e00\u68f5\u6811\u3002\n\n### \u5220\u54ea\u4e00\u6761\u5462\uff1f\n\n\u8bf7\u6ce8\u610f\u6807\u9898\uff1a**\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811**\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u8fd9\u6761\u8def\u5f84\u4e0a\u8fb9\u6743\u6700\u5927\u7684\u90a3\u4e2a\u70b9\uff0c\u5220\u9664\u5b83\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u65b0\u7684\u751f\u6210\u6811\u4e0e $mst$ \u7684\u8fb9\u6743\u548c\u7684\u5dee\u6700\u5c0f\uff0c\u4e5f\u5c31\u662f\u6709\u53ef\u80fd\u6210\u4e3a\u6b21\u5c0f\u751f\u6210\u6811\uff08$ps$\uff1a\u6b64\u65f6\u65b0\u52a0\u5165\u8fb9\u7684\u8fb9\u6743\u80af\u5b9a\u4f1a\u6bd4$mst$\u4e2d\u8fde\u63a5$x$\uff0c$y$\u7684\u8fde\u7ebf\u4e2d\u4efb\u610f\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u90fd\u8981\u5927\uff0c\u5426\u5219\u5b83\u4e5f\u5c06\u8fdb\u5165$mst$\uff09\u3002\n\n\u518d\u6ce8\u610f\u4e24\u4e2a\u5b57\uff1a**\u4e25\u683c**\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u65b0\u7684\u751f\u6210\u6811\u548c$mst$\u7684\u8fb9\u6743\u5dee**\u4e0d\u80fd\u76f8\u7b49\uff01** \u90a3\u4e48\u4ece\u8fd9\u4e2a\u6761\u4ef6\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4ec0\u4e48\uff1f\u2014\u2014\u5176\u5b9e\u5c31\u662f$x$\uff0c$y$\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u90a3\u4e2a\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u7684\u8fb9\u6743\u548c$e[i]$\u7684\u8fb9\u6743**\u4e0d\u80fd\u76f8\u7b49\uff01\uff01\uff01**\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u4e0d\u4ec5\u8981\u7ef4\u62a4\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u503c\uff0c\u8fd8\u8981\u7ef4\u62a4\u4e24\u70b9\u4e4b\u95f4\u7684**\u4e25\u683c\u6b21\u5927\u503c**\n\n\u90a3\u6811\u5256\u7684\u7b97\u6cd5\u5c31\u5f88\u660e\u6717\u5566\uff0c\u5148\u8dd1$Kruskal$\uff0c\u628a$mst$\u5728\u6811\u5256\u7b97\u6cd5\u4e2d\u8fde\u8fb9\uff0c\u63a5\u7740\u679a\u4e3e\u6240\u6709\u6ca1\u6709\u5728$mst$\u4e2d\u7684\u8fb9\uff0c\u66f4\u65b0\u5373\u53ef\u3002\u54e6\u5bf9\u4e86\uff0c\u6811\u5256\u7ef4\u62a4\u8fb9\u6743\u7684\u8bdd\uff0c\u8fd8\u662f\u8981\u628a\u8fb9\u5316\u4e3a\u70b9\u505a\u7684\n\n\u4ee5\u4e0b\u4ee3\u7801\u4f1a\u5148\u5206\u4e3a\u51e0\u5757\u6765\u8bb2\u89e3\n\n\n------------\n\n\u9996\u5148\u662f\u4ee3\u7801\u7684\u53d8\u91cf\u7533\u660e\n\n```cpp\n#define pii pair<long long,long long>\n#define INF 2147483647000000\n\nconst long long MAXN = 4e5 + 10;\nconst long long MAXM = 3e5 + 10;\n\nlong long n,m,mst,smst;\n//mst \u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\uff0csmst \u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\nlong long ufs[MAXN],nodecnt,ww[MAXN];\n//ufs \u5e76\u67e5\u96c6 nodecnt\uff0c\u70b9\u6570(\u4e4b\u540e\u4f1a\u52a0)\uff0cww\u70b9\u6743\nlong long head[MAXN],edgesize;\n//\u5efa\u56fe\u7528\nlong long dep[MAXN],son[MAXN],fa[MAXN],siz[MAXN];\nlong long id[MAXN],top[MAXN],w[MAXN],nodesize;\n//\u6811\u5256\u5957\u9910\n\n```\n\n\u548c\u4e09\u4e2a\u7ed3\u6784\u4f53\n\n```cpp\nstruct EDGE_For_Kru {\n    long long x,y,w;\n    bool select;\n    bool operator < (const EDGE_For_Kru &b) const {return w < b.w;}\n} G[MAXM << 1];//\u6700\u5c0f\u751f\u6210\u6811\u7528\u7684\n\nstruct EDGE {\n    long long nxt;\n    long long to;\n} edge[MAXM << 2];//\u6811\u5256\u7528\u7684\n\nstruct SegmentTree {\n    long long val1;//\u6700\u5927\u503c\n    long long val2;//\u4e25\u683c\u6b21\u5927\u503c\n} seg[MAXN << 2];//\u7ebf\u6bb5\u6811\n\n\n```\n\n------------\n\n~~\u6700\u6c34\u7684\u90e8\u5206~~$Kruskal$\n\n\u5c31\u662f\u7b80\u5355\u7684\u8dd1\u4e86\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u3002\n\n```cpp\nlong long find(long long x) {\n    if(ufs[x] != x) ufs[x] = find(ufs[x]);\n    return ufs[x]; \n}\n\nvoid unity(long long x,long long y) {\n    if(find(x) != find(y)) \n        ufs[find(y)] = find(x);\n}\n\ninline long long Kruskal() {\n    nodecnt = n;//\u9996\u5148\u628a\u70b9\u7684\u4e2a\u6570\u8bbe\u4e3a n\n    sort(G + 1,G + m + 1);\n    long long cnt = 0,res = 0;\n    for(long long i = 1;i <= n; ++i)\n        ufs[i] = i;\n    for(long long i = 1;i <= m; ++i) {\n        long long x = G[i].x,y = G[i].y;\n        if(find(x) == find(y)) continue;\n        unity(x,y); G[i].select = true;\n        addedge(x,++nodecnt); addedge(nodecnt,x);//\u52a0\u5165\u6811\u5256\u7684\u8fb9\n        addedge(y,nodecnt); addedge(nodecnt,y);//\u540c\u4e0a\n        ww[nodecnt] = G[i].w;//\u65b0\u70b9\u7684\u6743\u503c\u5c31\u662f\u8fb9\u6743\n        cnt++, res += G[i].w;\n        if(cnt == n - 1) break;\n    }\n    return res;\n}\n```\n\n\n------------\n\u63a5\u7740\u5c31\u662f\u6811\u5256\u90e8\u5206\u5566\n\n\u5176\u5b9e\u5927\u90e8\u5206\u5c31\u662f\u6811\u5256\u5e38\u89c4\u6253\u6cd5\uff0c\u4e24\u4e2aDFS\u76f4\u63a5\u5c31\u662f\u88f8\u7684\uff0c\u53ea\u4e0d\u8fc7\u7ebf\u6bb5\u6811\u65b9\u9762\u7a0d\u5fae\u8981\u6ce8\u610f\uff0c\u5728\u66f4\u65b0\u4e24\u4e2a $val$ \u503c\u7684\u65f6\u5019\u7565\u5fae\u6709\u4e00\u70b9\u9ebb\u70e6\uff0c\u8fd9\u4e2a\u5728\u4ee3\u7801\u4e2d\u8be6\u7ec6\u8bb2\u3002\n\n\u4ee5\u4e0b\u7684 $pii$ \u5747\u6307 $pair<longlong,long long>$ ,\u7b2c\u4e00\u4e2a\u503c\u8868\u793a\u6700\u5927\u503c\uff0c\u7b2c\u4e8c\u4e2a\u8868\u793a\u4e25\u683c\u6b21\u5927\u503c\uff0c\u6709\u4e0d\u5c11\u51fd\u6570\u4ee5 $pii$ \u4e3a\u8fd4\u56de\u503c\u3002\n\n```cpp\nvoid DFS1(long long now,long long f,long long deep) {\n    dep[now] = deep;\n    fa[now] = f;\n    siz[now] = 1;\n    long long maxson = -1;\n    for(long long i = head[now];i;i = edge[i].nxt) {\n        if(edge[i].to == f) continue;\n        DFS1(edge[i].to,now,deep + 1);\n        siz[now] += siz[edge[i].to];\n        if(siz[edge[i].to] > maxson) {\n            maxson = siz[edge[i].to];\n            son[now] = edge[i].to;\n        }\n    }\n}//\u6700\u5e73\u51e1\u7684DFS1\n\nvoid DFS2(long long now,long long topf) {\n    id[now] = ++nodesize;\n    top[now] = topf;\n    w[nodesize] = ww[now];\n    if(!son[now]) return;\n    DFS2(son[now],topf);\n    for(long long i = head[now];i;i = edge[i].nxt) {\n        if(edge[i].to == son[now] || edge[i].to == fa[now]) continue;\n        DFS2(edge[i].to,edge[i].to);\n    }\n}//\u6700\u5e73\u51e1\u7684DFS2\n\npii getval(pii v1,pii v2) {//\u4ece\u4e0b\u9762\u56db\u4e2a\u503c\u4e2d\u95f4\u627e\u51fa\u6700\u5927\u503c\u548c\u4e25\u683c\u6b21\u5927\u503c\n    long long res1,res2,t = 3;\n    long long v11 = v1.first,v12 = v1.second;\n    long long v21 = v2.first,v22 = v2.second;\n    long long vv[5] = {0,v11,v12,v21,v22};\n    sort(vv + 1,vv + 5);//\u7ed9\u8fd9\u56db\u4e2a\u503c\u6392\u5e8f\n    res1 = vv[4];//\u6700\u5927\u503c\n    while(vv[t] == vv[4]) t--;//\u4e25\u683c\u6b21\u5927\u503c\n    res2 = vv[t];\n    return make_pair(res1,res2);//\u8fd4\u56depii\n}\n\nvoid build(long long root,long long l,long long r) {\n    if(l == r) {\n        seg[root].val1 = w[l];\n        seg[root].val2 = 0;\n        return;\n    }\n    long long mid = (l + r) >> 1;\n    build(root << 1,l,mid);\n    build(root << 1 | 1,mid + 1,r);\n    pii q = make_pair(seg[root << 1].val1,seg[root << 1].val2);\n    pii p = make_pair(seg[root << 1 | 1].val1,seg[root << 1 | 1].val2);//\u4e24\u68f5\u5b50\u6811\u7684\u5206\u522b\u4e24\u4e2a\u503c\n    pii res = getval(p,q); //\u66f4\u65b0\u672c\u8282\u70b9\u7684\u503c\n    seg[root].val1 = res.first,seg[root].val2 = res.second;\n}\n\npii query(long long root,long long l,long long r,long long L,long long R) {\n    if(L <= l && r <= R) return make_pair(seg[root].val1,seg[root].val2);\n    long long mid = (l + r) >> 1;\n    pii res;\n    if(L <= mid) res = getval(res,query(root << 1,l,mid,L,R));\n    if(R > mid) res = getval(res,query(root << 1 | 1,mid + 1,r,L,R));\n    //\u540c\u6837\u662f\u66f4\u65b0\n    return res;\n}\n\npii QUERY(long long x,long long y) {\n    pii res;\n    while(top[x] != top[y]) {\n        if(dep[top[x]] < dep[top[y]]) swap(x,y);\n        res = getval(res,query(1,1,nodesize,id[top[x]],id[x]));//\u4e5f\u662f\u4e00\u6837\u66f4\u65b0\n        x = fa[top[x]];\n    }\n    if(dep[x] > dep[y]) swap(x,y);\n    pii g = query(1,1,nodesize,id[x],id[y]);\n    res = getval(res,g);\n    return res;\n}\n```\n\n\u6240\u6709 $getval$ \u7684\u7528\u6cd5\u7c7b\u4f3c\u4e8e\u666e\u901a\u7ebf\u6bb5\u6811\u4e2d\u7684 $max$ \u51fd\u6570\uff0c\u7528\u6765\u66f4\u65b0 $val$ \u503c\uff0c\u628a\u5b83\u8fd9\u6837\u7406\u89e3\u5373\u53ef\n\n\u4ee5\u4e0a\u4ee3\u7801\u5efa\u8bae\u4ed4\u7ec6\u9605\u8bfb\uff0c\u8fd9\u662f\u6574\u4e2a\u4ee3\u7801\u4e2d\u6700\u5173\u952e\u90e8\u5206\u7684\u5b9e\u73b0\n\n\n------------\n\n\u518d\u8bf4\u4e3b\u51fd\u6570\n\n\u5176\u5b9e\u5c31\u662f\u4e00\u4e9b\u5e73\u5e38\u7684\u8f93\u5165\u554a\u4e4b\u7c7b\u7684\uff0c\u63a5\u7740\u5c31\u662f\u4e0a\u65b9\u4ee3\u7801\u601d\u8def\u63cf\u8ff0\u90e8\u5206\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\n\n```cpp\n    read(n); read(m);//\u81ea\u5df1\u5199\u7684\u9f9f\u901f\u8bfb\n    for(long long i = 1;i <= m; ++i) {\n        read(G[i].x); \n        read(G[i].y); \n        read(G[i].w);//\u8f93\u5165Kruskal\u7684\u8fb9\n    }\n    mst = Kruskal();//mst\u7684\u8fb9\u6743\u548c\n    smst = INF;//\u6b21\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\uff0c\u521d\u59cb\u5316\u6210 INF\n    DFS1(1,0,1); DFS2(1,1);//\u6811\u5256\n    build(1,1,nodesize);//\u6811\u5256\n    for(long long i = 1;i <= m; ++i) {\n        if(G[i].select) continue;//\u5982\u679c\u8fd9\u6761\u8fb9\u5728mst\u4e2d\uff0c\u5c31\u4e0d\u80fd\u9009\n        long long wn = G[i].w;//\u52a0\u5165\u7684\u65b0\u8fb9\u7684\u8fb9\u6743\n        pii tmp = QUERY(G[i].x,G[i].y);//\u6811\u5256\u627e\u51fa\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u548c\u4e25\u683c\u6b21\u5927\u8fb9\u6743\n        if(tmp.first != wn) smst = min(smst,mst - tmp.first + wn);\n        //\u5982\u679c\u6700\u5927\u503c\u548c\u65b0\u8fb9\u6743\u4e0d\u76f8\u7b49\uff0c\u5c31\u7528\u6700\u5927\u503c\u76f4\u63a5\u66f4\u65b0\n        else smst = min(smst,mst - tmp.second + wn);\n        //\u5426\u5219\u8bf4\u660e\u5982\u679c\u53bb\u6389\u6700\u5927\u503c\u518d\u52a0\u5165\u65b0\u8fb9\u6743\u540e\uff0c\u8fb9\u6743\u548c\u5c06\u4e0d\u4f1a\u53d8\u5316\uff0c\u4e0d\u6ee1\u8db3\"\u4e25\u683c\u6b21\u5c0f\"\u7684\u89c4\u5b9a\uff0c\u5219\u9700\u8981\u7528\u4e25\u683c\u6b21\u5927\u503c\u66f4\u65b0\n    }\n    cout << smst << endl;//\u8f93\u51fa\u5373\u53ef\n```\n\n------------\n\u6700\u540e\u7684\u4ee3\u7801\uff08\u849f\u84bb\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u8fd9\u4e2a\u4ee3\u7801\u4e0d\u5f00$O2$\u5c31 $0$ \u5206\u4e86 ~~\u90a3\u5c31\u5f00\u7740\u5427~~\uff09\n\n```cpp\n//Code By CXY\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define pii pair<long long,long long>\n#define INF 2147483647000000\n\nconst long long MAXN = 4e5 + 10;\nconst long long MAXM = 3e5 + 10;\n\nstruct EDGE_For_Kru {\n    long long x,y,w;\n    bool select;\n    bool operator < (const EDGE_For_Kru &b) const {return w < b.w;}\n} G[MAXM << 1];\n\nstruct EDGE {\n    long long nxt;\n    long long to;\n} edge[MAXM << 2];\n\nstruct SegmentTree {\n    long long val1;\n    long long val2;\n} seg[MAXN << 2];\n\nlong long n,m,mst,smst;\nlong long ufs[MAXN],nodecnt,ww[MAXN];\nlong long head[MAXN],edgesize;\nlong long dep[MAXN],son[MAXN],fa[MAXN],siz[MAXN];\nlong long id[MAXN],top[MAXN],w[MAXN],nodesize;\n\ntemplate <typename T> inline void read(T &a) {\n    a = 0;char c = getchar();long long f = 1;\n    while(c < '0' || c > '9') {if(c == '-') f = -1;c = getchar();}\n    while(c >= '0' && c <= '9') {a = (a << 3) + (a << 1) + (c ^ 48);c = getchar();}\n    a *= f;\n}\n\ninline void addedge(long long x,long long y) {\n    edge[++edgesize].nxt = head[x];\n    edge[edgesize].to = y;\n    head[x] = edgesize;\n}\n//-----------------------------------------------------------------------\nlong long find(long long x) {\n    if(ufs[x] != x) ufs[x] = find(ufs[x]);\n    return ufs[x]; \n}\n\nvoid unity(long long x,long long y) {\n    if(find(x) != find(y)) \n        ufs[find(y)] = find(x);\n}\n\ninline long long Kruskal() {\n    nodecnt = n;\n    sort(G + 1,G + m + 1);\n    long long cnt = 0,res = 0;\n    for(long long i = 1;i <= n; ++i)\n        ufs[i] = i;\n    for(long long i = 1;i <= m; ++i) {\n        long long x = G[i].x,y = G[i].y;\n        if(find(x) == find(y)) continue;\n        unity(x,y); G[i].select = true;\n        addedge(x,++nodecnt); addedge(nodecnt,x);\n        addedge(y,nodecnt); addedge(nodecnt,y);\n        ww[nodecnt] = G[i].w;\n        cnt++, res += G[i].w;\n        if(cnt == n - 1) break;\n    }\n    return res;\n}\n//-----------------------------------------------------------------------\nvoid DFS1(long long now,long long f,long long deep) {\n    dep[now] = deep;\n    fa[now] = f;\n    siz[now] = 1;\n    long long maxson = -1;\n    for(long long i = head[now];i;i = edge[i].nxt) {\n        if(edge[i].to == f) continue;\n        DFS1(edge[i].to,now,deep + 1);\n        siz[now] += siz[edge[i].to];\n        if(siz[edge[i].to] > maxson) {\n            maxson = siz[edge[i].to];\n            son[now] = edge[i].to;\n        }\n    }\n}\n\nvoid DFS2(long long now,long long topf) {\n    id[now] = ++nodesize;\n    top[now] = topf;\n    w[nodesize] = ww[now];\n    if(!son[now]) return;\n    DFS2(son[now],topf);\n    for(long long i = head[now];i;i = edge[i].nxt) {\n        if(edge[i].to == son[now] || edge[i].to == fa[now]) continue;\n        DFS2(edge[i].to,edge[i].to);\n    }\n}\n\npii getval(pii v1,pii v2) {\n    long long res1,res2,t = 3;\n    long long v11 = v1.first,v12 = v1.second;\n    long long v21 = v2.first,v22 = v2.second;\n    long long vv[5] = {0,v11,v12,v21,v22};\n    sort(vv + 1,vv + 5);\n    res1 = vv[4];\n    while(vv[t] == vv[4]) t--;\n    res2 = vv[t];\n    return make_pair(res1,res2);\n}\n\nvoid build(long long root,long long l,long long r) {\n    if(l == r) {\n        seg[root].val1 = w[l];\n        seg[root].val2 = 0;\n        return;\n    }\n    long long mid = (l + r) >> 1;\n    build(root << 1,l,mid);\n    build(root << 1 | 1,mid + 1,r);\n    pii q = make_pair(seg[root << 1].val1,seg[root << 1].val2);\n    pii p = make_pair(seg[root << 1 | 1].val1,seg[root << 1 | 1].val2);\n    pii res = getval(p,q); seg[root].val1 = res.first,seg[root].val2 = res.second;\n}\n\npii query(long long root,long long l,long long r,long long L,long long R) {\n    if(L <= l && r <= R) return make_pair(seg[root].val1,seg[root].val2);\n    long long mid = (l + r) >> 1;\n    pii res;\n    if(L <= mid) res = getval(res,query(root << 1,l,mid,L,R));\n    if(R > mid) res = getval(res,query(root << 1 | 1,mid + 1,r,L,R));\n    return res;\n}\n\npii QUERY(long long x,long long y) {\n    pii res;\n    while(top[x] != top[y]) {\n        if(dep[top[x]] < dep[top[y]]) swap(x,y);\n        res = getval(res,query(1,1,nodesize,id[top[x]],id[x]));\n        x = fa[top[x]];\n    }\n    if(dep[x] > dep[y]) swap(x,y);\n    pii g = query(1,1,nodesize,id[x],id[y]);\n    res = getval(res,g);\n    return res;\n}\n\n//-----------------------------------------------------------------------\n\nint main () {\n    read(n); read(m);\n    for(long long i = 1;i <= m; ++i) {\n        read(G[i].x); \n        read(G[i].y); \n        read(G[i].w);\n    }\n    mst = Kruskal();\n    smst = INF;\n    DFS1(1,0,1); DFS2(1,1);\n    build(1,1,nodesize);\n    for(long long i = 1;i <= m; ++i) {\n        if(G[i].select) continue;\n        long long wn = G[i].w;\n        pii tmp = QUERY(G[i].x,G[i].y);\n        if(tmp.first != wn) smst = min(smst,mst - tmp.first + wn);\n        else smst = min(smst,mst - tmp.second + wn);\n    }\n    cout << smst << endl;\n    return 0;//\u534e\u4e3d\u4e3d\u5730\u7ed3\u675f\n}\n```\n\n\u5230\u8fd9\u91cc\u5c31\u7ed3\u675f\u4e86\uff0c\u672c\u4ee3\u7801\u4e2d\u6700\u6709\u8da3\u7684\u90e8\u5206\u5e94\u8be5\u5c31\u662f\u90a3\u4e2a $getval$ \u51fd\u6570\u548c\u5b83\u5bf9\u5e94\u7684\u66f4\u65b0\u4e86 ~~\u867d\u7136\u628a\u6211\u8c03\u5230\u81ea\u95ed~~\uff0c\u5927\u5bb6\u53ef\u4ee5 ~~\u81ea\u884c\u54c1\u5473~~ \u591a\u591a\u7814\u8bfb\n\n\u521d\u4e8c\u7684 $OIer$ \uff0c\u8bf7\u591a\u5173\u7167",
        "postTime": 1560335810,
        "uid": 53489,
        "name": "CXY07",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee \u662f$kruskal$\u548c$LCA$ \u7b97\u6cd5\u7684\u5408\u96c6 \u9898\u76ee \u4e0d\u96be\n\n\u4f46\u662f\u91cd\u5728\u7ec6\u8282\n\n\u9996\u5148 \u5982\u679c\u662f\u6b21\u5c0f\u751f\u6210\u6811 \u6709\u4e2a\u6027\u8d28\u5c31\u662f\u4ed6\u4e0e\u6700\u5c0f\u751f\u6210\u6811\u53ea\u6709\u4e00\u6761\u8fb9\u4e0d\u540c \u90a3\u4e48\u5c31\u679a\u4e3e\u52a0\u5165\u54ea\u6761\u8fb9 \u7136\u540e \u5220\u53bb\u539f\u8def\u5f84\u4e0a\u7684\u4e00\u6761\u8fb9 \u7136\u540e\u5220\u53bb\u6743\u503c\u6700\u5927\uff08\u5b9e\u9645\u4e0a\u5e94\u8be5\u662f\u6700\u5927\u7684\u6b21\u5927\u7684\uff09\n\n\u4e00\u5f00\u59cb \u770b\u5230\u8fd9\u9053\u9898 \u611f\u89c9\u548c\u8d27\u8f66\u8fd0\u8f93\u6bd4\u8f83\u7c7b\u4f3c \u7136\u540e\u5c31\u5f00\u59cb\u505a \u6bcf\u6b21\u500d\u589e\u7ef4\u62a4\u8def\u5f84\u4e0a\u6700\u5927\u503c \u4f46\u662f\u53d1\u73b0\u6837\u4f8b\u8fc7\u4e0d\u4e86 \u4ea4\u4e0a\u53bb\u6709$60pts$\n\n\u7136\u540e\u5f00\u59cb\u624b\u641e\u6837\u4f8b \u53d1\u73b0\u6837\u4f8b\u4ed6\u5220\u53bb\u7684\u8fb9\u662f\u8def\u5f84\u4e0a\u7684\u6b21\u5927\u8fb9 \u56e0\u4e3a\u5047\u8bbe\u52a0\u4e0a\u8fd9\u6761\u6700\u5927\u8fb9 \u6700\u5c0f\u751f\u6210\u6811\u6743\u503c\u548c\u8fd8\u662f\u539f\u6765\u7684\u548c \u90a3\u4e48\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u6811\u4e0a\u6b21\u5927\u548c\u6700\u5927\u503c\n\n\u8bb2\u4e00\u4e0b\u7ef4\u62a4\u6b21\u5927\u503c\u7684\u601d\u8def \u5c31\u662f$max (min(g[u][i - 1], g[f[u][i - 1]][i - 1]), h[u][i - 1], h[f[u][i - 1]][i - 1]))$\n\n\u7136\u540e\u5c31\u662f\u6a21\u677f\u4e86 \u4e0d\u8fc7\u8fd9\u4e2a\u6a21\u677f\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <iostream>\n#include <set>\n#include <map>\n#include <queue>\n\nusing namespace std;\n\ntypedef long long ll;\n\nconst ll INF = (1ll << 62);\n\n#define DEBUG(x) std::cerr << #x << \" = \" << x << std::endl\n\n#define int ll\n\ninline ll read() {\n    ll f = 1, x = 0;char ch;\n    do {ch = getchar();if (ch == '-')f = -1;} while (ch > '9' || ch < '0');\n    do {x = x * 10 + ch - '0';ch = getchar();} while (ch >= '0' && ch <= '9');\n    return f * x;\n}\n\nconst int MAX_N = 100000 + 50;\nconst int MAX_M = 300000 + 50;\nconst int MAX_F = 30 + 5;\n\nstruct EDGE {\n\tint to, next, w;\n} edge[MAX_M << 1];\n\nint head[MAX_N], cnt;\n\nvoid addedge (int u, int v, int w) {\n\tedge[++cnt].to = v;\n\tedge[cnt].w = w;\n\tedge[cnt].next = head[u];\n\thead[u] = cnt;\n}\n\nint f[MAX_N][MAX_F], g[MAX_N][MAX_F], h[MAX_N][MAX_F], dep[MAX_N];\n\ninline void ckmax (int &x, int y) {\n\tx = (x > y ? x : y);\n}\n\ninline void dfs (int u, int fa, int w) {\n\tdep[u] = dep[fa] + 1;\n\tf[u][0] = fa;\n\tg[u][0] = w;\n\th[u][0] = -INF;\n\tfor (int i = 1; i <= 20; i ++ ) {\n\t\tf[u][i] = f[f[u][i - 1]][i - 1];\n\t\tg[u][i] = max (g[u][i - 1], g[f[u][i - 1]][i - 1]);\n\t\th[u][i] = max (h[u][i - 1], h[f[u][i - 1]][i - 1]);\n\t\tif (g[u][i - 1] > g[f[u][i - 1]][i - 1]) h[u][i] = max (h[u][i], g[f[u][i - 1]][i - 1]);\n\t\telse if (g[u][i - 1] < g[f[u][i - 1]][i - 1]) h[u][i] = max (h[u][i], g[u][i - 1]);\n\t}\n\tfor (int i = head[u]; i; i = edge[i].next ) {\n\t\tint v = edge[i].to, w = edge[i].w;\n\t\tif (v == fa) continue;\n\t\tdfs (v, u, w);\n\t}\n}\n\ninline int LCA (int x, int y) {\n\tif (dep[x] < dep[y]) swap (x, y);\n\tfor (int i = 20; i >= 0; i -- ) {\n\t\tif (dep[f[x][i]] >= dep[y]) x = f[x][i];\n\t}\n\tif (x == y) return x;\n\tfor (int i = 20; i >= 0; i -- ) {\n\t\tif (f[x][i] != f[y][i]) {\n\t\t\tx = f[x][i];\n\t\t\ty = f[y][i];\n\t\t}\n\t}\n\treturn f[x][0];\n}\n\nint n, m, fa[MAX_N], res, sum;\n\nstruct Node {\n\tint u, v, w;\n\tbool operator < (const Node & rhs ) const  {\n\t\treturn w < rhs.w;\n\t}\n} a[MAX_M << 1];\n\ninline int find (int x) {\n\treturn x == fa[x] ? x : fa[x] = find (fa[x]);\n}\n\ninline void merge (int x, int y) {\n\tx = find (x); y = find (y);\n\tif (x == y) return;\n\tfa[x] = y;\n}\n\nbool vis[MAX_M];\n\ninline void kruskal () {\n\tn = read (); m = read ();\n\tfor (int i = 1; i <= m; i ++ ) {\n\t\ta[i].u = read (); a[i].v = read (); a[i].w = read ();\n\t}\n\tsort (a + 1, a + m + 1);\n\tfor (int i = 1; i <= n; i ++ ) fa[i] = i;\n\tres = 0;\n\tfor (int i = 1; i <= m; i ++ ) {\n\t\tif (find (a[i].u) != find (a[i].v)) {\n\t\t\tvis[i] = 1;\n\t\t\tres ++ ;\n\t\t\tmerge (a[i].u, a[i].v);\n\t\t\tsum += a[i].w;\n\t\t\taddedge (a[i].u, a[i].v, a[i].w);\n\t\t\taddedge (a[i].v, a[i].u, a[i].w);\n\t\t}\n\t\tif (res == n - 1) break;\n\t}\n\tres = 0;\n\tdfs (1, 0, 0);\n}\n\ninline int qmax (int u, int v, int maxx) {\n\tint ans = -INF;\n\tfor (int i = 18; i >= 0; i -- ) {\n\t\tif (dep[f[u][i]] >= dep[v]) {\n\t\t\tif (maxx != g[u][i]) ans = max (ans, g[u][i]);\n\t\t\telse ans = max (ans, h[u][i]);\n\t\t\tu = f[u][i];\n\t\t}\n\t}\n\treturn ans;\n}\n\ninline void ckmin (int &x, int y) {\n\tx = (x < y ? x : y);\n}\n\ninline void calc () {\n\tint ans = INF;\n\tfor (int i = 1; i <= m; i ++ ) {\n\t\tif (vis[i]) continue;\n\t\tint lca = LCA (a[i].u, a[i].v);\n\t\tint max_u = qmax (a[i].u, lca, a[i].w);\n\t\tint max_v = qmax (a[i].v, lca, a[i].w);\n\t\tckmin (ans, sum - max (max_u, max_v) + a[i].w);\n\t}\n\tprintf (\"%lld\\n\", ans);\n}\n\nsigned main() {\n\tkruskal ();\n\tcalc ();\n\treturn 0;\n}\n```",
        "postTime": 1572513319,
        "uid": 107377,
        "name": "Cryin",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "### \u9898\u9762\r\n\r\n1493\uff1a\u6b21\u5c0f\u751f\u6210\u6811\r\n\r\n\u65f6\u95f4\u9650\u5236: 1000 ms \u5185\u5b58\u9650\u5236: 65536 KB\r\n \r\n\u3010\u9898\u76ee\u63cf\u8ff0\u3011\r\n\r\n\u539f\u9898\u6765\u81ea\uff1aBeiJing 2010 \u7ec4\u961f\u8d5b\r\n\r\n\u7ed9\u5b9a\u4e00\u5f20 N \u4e2a\u70b9 M \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6c42\u65e0\u5411\u56fe\u7684\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u3002\r\n\r\n\u8bbe\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u4e4b\u548c\u4e3a sum\uff0c\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u5c31\u662f\u6307\u8fb9\u6743\u4e4b\u548c\u5927\u4e8e sum \u7684\u751f\u6210\u6811\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002\r\n\r\n\u3010\u8f93\u5165\u3011\r\n\r\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 N \u548c M\uff0c\u8868\u793a\u65e0\u5411\u56fe\u7684\u70b9\u6570\u4e0e\u8fb9\u6570\uff1b\r\n\u63a5\u4e0b\u6765 M \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6570 x,y,z\uff0c\u8868\u793a\u70b9 x \u548c\u70b9 y \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\uff0c\u8fb9\u7684\u6743\u503c\u4e3a z\u3002\r\n\r\n\u3010\u8f93\u51fa\u3011\r\n\r\n\u5305\u542b\u4e00\u884c\uff0c\u4ec5\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u3002\r\n\u6570\u636e\u4fdd\u8bc1\u5fc5\u5b9a\u5b58\u5728\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u3002\r\n\r\n\u3010\u8f93\u5165\u6837\u4f8b\u3011\r\n\r\n5 6 \r\n1 2 1 \r\n1 3 2 \r\n2 4 3 \r\n3 5 4 \r\n3 4 3 \r\n4 5 6\r\n\r\n\u3010\u8f93\u51fa\u6837\u4f8b\u3011\r\n\r\n11\r\n\r\n\u3010\u63d0\u793a\u3011\r\n\r\n\u6570\u636e\u8303\u56f4\uff1a\r\n\r\n\u5bf9\u4e8e\u5168\u90e8\u6570\u636e\uff0c1\u2264N\u226410^5,1\u2264M\u22643\u00d710^5\uff0c\u6570\u636e\u4e2d\u65e0\u5411\u56fe\u65e0\u81ea\u73af\uff0c\u8fb9\u6743\u503c\u975e\u8d1f\u4e14\u4e0d\u8d85\u8fc7 10^9\u3002\r\n\r\n### \u7b97\u6cd5\r\n\r\n\u6b21\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\r\n\r\n1. **\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u7b97\u6cd5**\r\n\r\n\u5148\u4f7f\u7528\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff08Kruscal\uff09\u8ba1\u7b97\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u548c\uff0c\u518d\u9010\u4e00\u679a\u4e3e\u65b0\u52a0\u7684\u4e00\u6761\u8fb9\uff08\u6b21\u5c0f\u751f\u6210\u6811\u4e00\u70b9\u662f\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u5220\u53bb\u4e00\u6761\u8fb9\u3001\u589e\u52a0\u4e00\u6761\u8fb9\uff09\uff0c\u6b64\u65f6\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\uff0c\u5c06\u73af\u4e0a\u9664\u4e86\u6dfb\u52a0\u7684\u8fb9\u4ee5\u5916\u7684\u6700\u5927\u7684\u8fb9\u5220\u53bb\uff08\u8d2a\u5fc3\uff09\uff0c\u5373\u53ef\u5f97\u5230\u4e00\u79cd\u751f\u6210\u6811\u7684\u65b9\u6cd5\uff0c\u66f4\u65b0\u65b0\u7684\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\r\n\r\n\u4f46\u9898\u76ee\u8981\u6c42\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\uff08\u8fb9\u6743\u548c\u4e25\u683c\u5927\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\uff09\u65f6\u8fd9\u79cd\u8d2a\u5fc3\u7684\u65b9\u6cd5\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u53cd\u4f8b\u5982\u4e0b\uff1a\r\n\r\n![](https://cdn.luogu.com.cn/upload/pic/71230.png)\r\n\r\n\u6b64\u56fe\u7684\u6b21\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u548c\u4e3a11\uff081-2\uff0c2-4\uff0c3-4\uff0c3-5\uff09\u3002\r\n\r\n\u53ef\u4ee5\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u52a0\u4e0a3-4\u8fb9\u5220\u53bb1-3\u8fb9\uff0c\u4f46\u6b64\u7b97\u6cd5\u5728\u52a0\u51653-4\u8fb9\u65f6\u5904\u74061-2-4-3-1\u7684\u73af\u65f6\u6700\u5927\u503c\u57282-4\u8fb9\uff0c\u4e3a3\uff0c\u6b64\u65f6\u6b21\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u4e0e\u6700\u5c0f\u751f\u6210\u6811\u4e00\u6837\uff0c\u56e0\u4e3a\u8981\u6c42\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u4e0d\u4f1a\u8003\u8651\uff0c\u800c\u4f1a\u9009\u62e9\u7528\u52a0\u4e0a4-5\u8fb9\uff0c\u7ed3\u679c\u4e3a12\uff0c\u4e0d\u7b26\u3002\r\n\r\n2. **\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u751f\u6210\u6811\u7b97\u6cd5\uff08Kruskal+\u6811\u4e0a\u500d\u589elca\uff09**\r\n\r\n**Kruskal**\r\n\r\n\u6c42\u89e3\u6700\u5c0f\u751f\u6210\u6811\uff0c\u518d\u6839\u636e\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u66f4\u6362\u8fb9\u8ba1\u7b97\u4e25\u683c\u6700\u5c0f\u751f\u6210\u6811\u3002\r\n\r\n**\u6811\u4e0a\u500d\u589elca**\r\n\r\n\u6c42\u89e3\u6700\u5c0f\u751f\u6210\u6811\u540e\uff0c\u901a\u8fc7\u66ff\u6362\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u53ef\u4ee5\u6c42\u89e3\u6b21\u5c0f\u751f\u6210\u6811\u3002\r\n\r\n\u5728\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u65b0\u6dfb\u52a0\u7684\u8fb9\u7684\u8fb9\u6743\u4e00\u5b9a\u4e0d\u5c0f\u4e8e\u6700\u5927\u503c\uff08\u5426\u5219\u5c31\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\uff09\uff0c\u4e0d\u80fd\u6c42\u51fa\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\uff08\u6700\u5927\u8fb9\u53ef\u80fd\u7b49\u4e8e\u6dfb\u52a0\u7684\u8fb9\u7684\u6743\u503c\uff09\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u6765\u8bf4\uff0c\u4e0d\u4ec5\u8981\u6c42\u73af\u4e0a\u7684\u6700\u5927\u503c\uff0c\u8fd8\u8981\u6c42\u73af\u4e0a\u7684\u6b21\u5927\u503c\uff0c\u8fd9\u6837\u5728\u51fa\u73b0\u6700\u5927\u503c\u7b49\u4e8e\u8fb9\u6743\u65f6\u53ef\u4ee5\u7528\u6b21\u5927\u503c\u66f4\u65b0\u7b54\u6848\uff0c\u4fdd\u8bc1\u7b54\u6848\u6b63\u786e\u6027\u3002\r\n\r\n\u8bbe$g[x][i] , maxl[x][i] , secl[x][i]$\r\n\u5206\u522b\u8868\u793a\u5728\u6811\u4e0a\u4ecex\u70b9\u5411\u4e0a\u8d702^i\u5c42\u7684\u7ed3\u70b9\u7f16\u53f7\u3001x\u70b9\u5411\u4e0a\u8d702^i\u5c42\u9047\u5230\u7684\u8fb9\u6743\u7684\u6700\u5927\u503c\u3001x\u70b9\u5411\u4e0a\u8d702^i\u5c42\u9047\u5230\u7684\u8fb9\u6743\u7684\u6b21\u5927\u503c\uff0c\u8bbei\u70b9\u4e0ej\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3ak\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u4e8c\u8fdb\u5236\u5206\u89e3\u548c\u8fed\u4ee3\u5f97\u5230i-k\u7684\u6700\u5927\u503c\u3001\u6b21\u5927\u503c\u548cj-k\u7684\u6700\u5927\u503c\u3001\u6b21\u5927\u503c\uff0c\u679a\u4e3e\u6bcf\u4e00\u6761\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\r\n\r\n### \u4ee3\u7801\r\n\r\n80 TLE\uff1a\r\n\r\n```cpp\r\n#include<cstdio>\r\n#include<algorithm>\r\n#define maxi(a,b) ((a)>(b)?(a):(b))\r\n\r\nunsigned int n,m;\r\n\r\nstruct pic\r\n{\r\n\tunsigned int u,v,w;\r\n\tchar book;\r\n\tbool operator < (const pic &a) const\r\n\t{\r\n\t\treturn w<a.w;\r\n\t}\r\n}edge[300005];//\u5b58\u56fe\r\n\r\nunsigned int father[100005];\r\nunsigned int get_father(unsigned int a)\r\n{\r\n\tif(father[a]==a)\r\n\t{\r\n\t\treturn father[a];\r\n\t}\r\n\tfather[a]=get_father(father[a]);\r\n\treturn father[a];\r\n}//\u5e76\u67e5\u96c6\r\n\r\nunsigned int points;\r\nunsigned long long int sum;\r\nstruct tree\r\n{\r\n\tunsigned int to,next,w;\r\n}tree[200005];\r\nunsigned int cnt,head[100005];\r\nvoid add(unsigned int u,unsigned int v,unsigned int w)\r\n{\r\n\tcnt++;\r\n\ttree[cnt].to=v;\r\n\ttree[cnt].next=head[u];\r\n\thead[u]=cnt;\r\n\ttree[cnt].w=w;\r\n}//\u94fe\u5f0f\u524d\u5411\u5fc3\u5b58\u6811\u3001\u5efa\u8fb9\r\n\r\nunsigned int deep[100005],maxl[100005][20],secl[100005][20],g[100005][20];\r\n//\u500d\u589e\u6570\u7ec4\uff0cdeep\u4e3a\u5728\u6811\u4e0a\u7684\u6df1\u5ea6\uff0c\u5176\u4f59\u7684\u542b\u4e49\u5728\u524d\u6587\u5df2\u7ecf\u63cf\u8ff0\r\n\r\nvoid dfs(unsigned int now)\r\n{\r\n\tfor(unsigned int i=head[now];i!=0;i=tree[i].next)\r\n\t{\r\n\t\tif(tree[i].to!=g[now][0])\r\n\t\t{\r\n\t\t\tdeep[tree[i].to]=deep[now]+1;\r\n\t\t\tmaxl[tree[i].to][0]=tree[i].w;\r\n\t\t\tg[tree[i].to][0]=now;\r\n\t\t\tdfs(tree[i].to);\r\n\t\t}\r\n\t}\r\n}//DFS\u6c42\u70b9\u7684\u6df1\u5ea6\u548c\u6700\u5927\u503c\u3001\u7956\u5148\u521d\u59cb\u5316\r\n\r\nunsigned long long int ans=999999999999999ull;\r\nunsigned int get_lca(unsigned int u,unsigned int v)\r\n{\r\n\t//\u5047\u8bbeu\u6bd4j\u6df1\r\n\tif(deep[u]<deep[v])\r\n\t{\r\n    \t//\u4e0d\u6210\u7acb\uff0c\u8fdb\u884c\u4ea4\u6362\r\n\t\tunsigned int t;\r\n\t\tt=u;\r\n\t\tu=v;\r\n\t\tv=t;\r\n\t}\r\n\tunsigned int i;\r\n\tfor(i=0;i<=18;i++)\r\n\t{\r\n\t\tif((1<<i)>deep[u])\r\n\t\t{\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\ti--;\r\n    //\u6c42u\u7684\u6df1\u5ea6\u5bf9\u5e94\u6700\u5927\u4e8c\u8fdb\u5236\u6b21\u6570\r\n\tfor(int j=i;j>=0;j--)\r\n\t{\r\n    \t//\u4ecei\u5f00\u59cb\u679a\u4e3eu\u3001v\u4e4b\u95f4\u7684\u9ad8\u5ea6\u5dee\r\n\t\tif(deep[u]>=deep[v]+(1<<j))\r\n\t\t{\r\n\t\t\tu=g[u][j];\r\n            //\u4e0d\u65ad\u8fed\u4ee3u\u7684\u503c\u4f7f\u5176\u63a5\u8fd1\u4e8ev\r\n\t\t}\r\n\t}\r\n\tif(u==v)\r\n\t{\r\n    \t//u\u3001v\u5728\u4e00\u4e2a\u70b9\uff0c\u8fd4\u56de\u8fd9\u4e2a\u70b9\u7684\u503c\r\n\t\treturn u;\r\n\t}\r\n    //\u6b64\u65f6u\u3001v\u5728\u540c\u4e00\u5c42\r\n\tfor(int j=18;j>=0;j--)\r\n\t{\r\n    \t//\u679a\u4e3e\u7956\u5148\u53ef\u80fd\u7684\u5c42\u6570\uff0c\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\uff0c\u4f7f\u5206\u89e3\u552f\u4e00\r\n\t\tif(g[u][j]!=g[v][j])//\u7956\u5148\u4e0d\u540c\r\n\t\t{\r\n\t\t\tu=g[u][j];\r\n\t\t\tv=g[v][j];\r\n            //\u8fed\u4ee3\u66f4\u65b0u\u3001v\r\n\t\t}\r\n\t}\r\n    //\u6b64\u65f6\u627e\u51fa\u7684\u662f\u8ddd\u79bb\u516c\u5171\u7956\u5148\u6700\u8fd1\u7684\u4e24\u4e2a\u70b9\uff0c\u8ddd\u79bb\u4e3a1\u5c42\r\n\treturn g[u][0];\r\n    //\u8fd4\u56de\u7956\u5148\u503c\uff0c\u5373\u4e3a\u6700\u8fd1\u516c\u5171\u7956\u5148\r\n}//\u6811\u4e0a\u500d\u589e\u6c42lca\r\n\r\nunsigned int get_ans(unsigned int u,unsigned int v,unsigned int w)\r\n{\r\n\t//\u83b7\u53d6\u65b0\u589eu->v\u6784\u6210\u7684\u73af\u4e2d\u7684\u6700\u5927\u503c\uff08\u6b21\u5927\u503c\uff09\r\n\tunsigned int lca=get_lca(u,v),i,maxleft=0,maxright=0;\r\n\tfor(i=0;i<=18;i++)\r\n\t{\r\n\t\tif((1<<i)>deep[u])\r\n\t\t{\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\ti--;\r\n    //\u83b7\u53d6\u6df1\u5ea6\u4e8c\u8fdb\u5236\r\n\tfor(int j=i;j>=0;j--)\r\n\t{\r\n    \t//\u679a\u4e3eu\u4e0e\u516c\u5171\u7956\u5148\u7684\u94fe\u4e0a\u7684\u6700\u5927\u503c\uff08\u6b21\u5927\u503c\uff09\r\n\t\tif(deep[u]>=deep[lca]+(1<<j))\r\n\t\t{\r\n\t\t\tif(maxl[u][j]!=w)\r\n\t\t\t{\r\n            \t//\u6700\u5927\u503c\u4e0e\u8fb9\u6743\u76f8\u7b49\r\n\t\t\t\tmaxleft=maxi(maxleft,maxl[u][j]);\r\n                //\u53d6\u6b21\u5927\u503c\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n            \t//\u53d6\u6700\u5927\u503c\r\n\t\t\t\tmaxleft=maxi(maxleft,secl[u][j]);\r\n\t\t\t}\r\n\t\t\tu=g[u][j];//\u8fed\u4ee3\u63a5\u8fd1lca\r\n\t\t}\r\n\t}\r\n\tfor(i=0;i<=18;i++)\r\n\t{\r\n\t\tif((1<<i)>deep[v])\r\n\t\t{\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\ti--;\r\n\tfor(int j=i;j>=0;j--)\r\n\t{\r\n\t\tif(deep[v]>=deep[lca]+(1<<j))\r\n\t\t{\r\n\t\t\tif(maxl[v][j]!=w)\r\n\t\t\t{\r\n\t\t\t\tmaxright=maxi(maxright,maxl[v][j]);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmaxright=maxi(maxright,secl[v][j]);\r\n\t\t\t}\r\n\t\t\tv=g[v][j];\r\n\t\t}\r\n\t}\r\n    //\u540c\u7406\u6c42v\u4e0e\u516c\u5171\u7956\u5148\u7684\u94fe\u4e0a\u7684\u6700\u5927\u503c\uff08\u6b21\u5927\u503c\uff09\r\n\treturn maxi(maxleft,maxright);\r\n}\r\nint main()\r\n{\r\n\tscanf(\"%u%u\",&n,&m);\r\n\tfor(unsigned int i=1;i<=n;i++)\r\n\t{\r\n\t\tfather[i]=i;\r\n\t}\r\n\tfor(unsigned int i=1;i<=m;i++)\r\n\t{\r\n\t\tscanf(\"%u%u%u\",&edge[i].u,&edge[i].v,&edge[i].w);\r\n\t\tedge[i].book=0;\r\n\t}\r\n    //\u521d\u59cb\u5316\u3001\u8bfb\u5165\r\n\tstd::sort(edge+1,edge+m+1);\r\n\tfor(unsigned short int i=1;i<=m;i++)\r\n\t{\r\n\t\tunsigned int fu=get_father(edge[i].u),fv=get_father(edge[i].v);\r\n\t\tif(fu!=fv)\r\n\t\t{\r\n\t\t\tpoints++;\r\n\t\t\tsum+=edge[i].w;\r\n\t\t\tedge[i].book=1;\r\n\t\t\tfather[fv]=fu;\r\n\t\t\tadd(edge[i].u,edge[i].v,edge[i].w);\r\n\t\t\tadd(edge[i].v,edge[i].u,edge[i].w);\r\n\t\t\tif(points==n-1)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    //Kruskal\u7b97\u6cd5\uff0c\u5e76\u6dfb\u52a0\u6811\u4e0a\u8fb9\r\n\tdfs(1);\r\n    //\u521d\u59cb\u5316\u6df1\u5ea6\u3001\u5355\u5c42\u7684\u6700\u5927\u503c\r\n\tfor(unsigned short int i=1;i<=18;i++)\r\n\t{\r\n\t\tfor(unsigned short int j=1;j<=n;j++)\r\n        //short int -> TLE\r\n\t\t{\r\n\t\t\tg[j][i]=g[g[j][i-1]][i-1];\r\n            //\u5411\u4e0a2^i\u5c42\u7684\u7956\u5148\u5c31\u662f\u5411\u4e0a2^i-1\u5c42\u7684\u7956\u5148\u5411\u4e0a2^i-1\u5c42\u7684\u7956\u5148\r\n\t\t\tmaxl[j][i]=maxi(maxl[j][i-1],maxl[g[j][i-1]][i-1]);\r\n\t\t\tsecl[j][i]=maxi(secl[j][i-1],secl[g[j][i-1]][i-1]);\r\n            //\u6700\u5927\u503c\u3001\u6b21\u5927\u503c\u5206\u522b\u66f4\u65b0\r\n\t\t\tif(maxl[j][i-1]<maxl[g[j][i-1]][i-1] && secl[j][i]<maxl[j][i-1])\r\n\t\t\t{\r\n\t\t\t\tsecl[j][i]=maxl[j][i-1];\r\n\t\t\t}\r\n\t\t\telse if(maxl[j][i-1]>maxl[g[j][i-1]][i-1] && secl[j][i]<maxl[g[j][i-1]][i-1])\r\n\t\t\t{\r\n\t\t\t\tsecl[j][i]=maxl[g[j][i-1]][i-1];\r\n\t\t\t}\r\n            //\u9488\u5bf9\u4e0d\u540c\u60c5\u51b5\u66f4\u65b0\u53ef\u80fd\u7684\u6b21\u5927\u503c\r\n\t\t}\r\n\t}\r\n\tfor(unsigned int i=1;i<=m;i++)\r\n\t{\r\n\t\tif(edge[i].book==0)\r\n\t\t{\r\n\t\t\tunsigned int j=get_ans(edge[i].u,edge[i].v,edge[i].w);\r\n\t\t\tif(j!=edge[i].w && ans>sum-j+edge[i].w)\r\n\t\t\t{\r\n\t\t\t\tans=sum-j+edge[i].w;\r\n\t\t\t}\r\n            //\u83b7\u53d6\u94fe\u4e0a\u7684\u6700\u5927\u503c\uff08\u6b21\u5927\u503c\uff09\u5e76\u66f4\u65b0\u7b54\u6848\r\n\t\t}\r\n\t}\r\n\tprintf(\"%llu\",ans);//\u8f93\u51fa\u7b54\u6848\r\n\treturn 0;\r\n}\r\n```\r\n\r\n---\r\n\r\n\u8bfb\u5165\u4f18\u5316 + \u5404\u79cd\u5361\u5e38\u624b\u6bb5\uff08++\u3001--\u548c,\uff09 + \u6539short\r\n\r\n100 AC\uff1a\r\n\r\n```cpp\r\n#include<cstdio>\r\n#include<algorithm>\r\n#define maxi(a,b) ((a)>(b)?(a):(b))\r\ninline unsigned int fread()\r\n{\r\n\tunsigned int x=0;\r\n\tchar ch=getchar();\r\n\twhile(ch<'0' || ch>'9')\r\n\t{\r\n\t\tch=getchar();\r\n\t}\r\n\twhile(ch>='0' && ch<='9')\r\n\t{\r\n\t\tx=x*10+ch-'0';\r\n\t\tch=getchar();\r\n\t}\r\n\treturn x;\r\n}//\u8bfb\u5165\u4f18\u5316\r\nunsigned int n,m;\r\nstruct pic\r\n{\r\n\tunsigned int u,v,w;\r\n\tchar book;\r\n\tinline bool operator < (const pic &a) const\r\n\t{\r\n\t\treturn w<a.w;\r\n\t}\r\n}edge[300005];\r\nunsigned int father[100005];\r\nunsigned int get_father(unsigned int a)\r\n{\r\n\tif(father[a]==a)\r\n\t{\r\n\t\treturn father[a];\r\n\t}\r\n\treturn father[a]=get_father(father[a]);\r\n}\r\nunsigned int points;\r\nunsigned long long int sum;\r\nstruct tree\r\n{\r\n\tunsigned int to,next,w;\r\n}tree[200005];\r\nunsigned int cnt,head[100005];\r\ninline void add(unsigned int u,unsigned int v,unsigned int w)\r\n{\r\n\t++cnt,tree[cnt].to=v,tree[cnt].next=head[u],head[u]=cnt,tree[cnt].w=w;\r\n}\r\nunsigned int deep[100005],maxl[100005][20],secl[100005][20],g[100005][20];\r\nvoid dfs(unsigned int now,unsigned int fa)\r\n{\r\n\tunsigned int v;\r\n\tfor(unsigned int i=head[now];i!=0;i=tree[i].next)\r\n\t{\r\n\t\tv=tree[i].to;\r\n\t\tif(v!=fa)\r\n\t\t{\r\n\t\t\tdeep[v]=deep[now]+1,maxl[v][0]=tree[i].w,g[v][0]=now;\r\n\t\t\tdfs(v,now);\r\n\t\t}\r\n\t}\r\n}\r\nunsigned long long int ans=999999999999999ull;\r\nunsigned int get_lca(unsigned int u,unsigned int v)\r\n{\r\n\tif(deep[u]<deep[v])\r\n\t{\r\n\t\tunsigned int t;\r\n\t\tt=u,u=v,v=t;\r\n\t}\r\n\tfor(register short int j=18;j>=0;--j)\r\n\t{\r\n\t\tif(deep[g[u][j]]>=deep[v])\r\n\t\t{\r\n\t\t\tu=g[u][j];\r\n\t\t}\r\n\t}\r\n\tif(u==v)\r\n\t{\r\n\t\treturn u;\r\n\t}\r\n\tfor(register short int j=18;j>=0;--j)\r\n\t{\r\n\t\tif(g[u][j]!=g[v][j])\r\n\t\t{\r\n\t\t\tu=g[u][j],v=g[v][j];\r\n\t\t}\r\n\t}\r\n\treturn g[u][0];\r\n}\r\nunsigned int get_ans(unsigned int u,unsigned int v,unsigned int w)\r\n{\r\n\tunsigned int lca=get_lca(u,v),maxleft=0,maxright=0;\r\n\tfor(register short int j=18;j>=0;--j)\r\n\t{\r\n\t\tif(deep[g[u][j]]>=deep[lca])\r\n\t\t{\r\n\t\t\tif(maxl[u][j]!=w)\r\n\t\t\t{\r\n\t\t\t\tmaxleft=maxi(maxleft,maxl[u][j]);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmaxleft=maxi(maxleft,secl[u][j]);\r\n\t\t\t}\r\n\t\t\tu=g[u][j];\r\n\t\t}\r\n\t}\r\n\tfor(register short int j=18;j>=0;--j)\r\n\t{\r\n\t\tif(deep[g[v][j]]>=deep[lca])\r\n\t\t{\r\n\t\t\tif(maxl[v][j]!=w)\r\n\t\t\t{\r\n\t\t\t\tmaxright=maxi(maxright,maxl[v][j]);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmaxright=maxi(maxright,secl[v][j]);\r\n\t\t\t}\r\n\t\t\tv=g[v][j];\r\n\t\t}\r\n\t}\r\n\treturn maxi(maxleft,maxright);\r\n}\r\nint main()\r\n{\r\n\tn=fread(),m=fread();\r\n\tfor(register unsigned int i=1;i<=n;++i)\r\n\t{\r\n\t\tfather[i]=i;\r\n\t}\r\n\tfor(register unsigned int i=1;i<=m;++i)\r\n\t{\r\n\t\tedge[i].u=fread(),edge[i].v=fread(),edge[i].w=fread();\r\n\t}\r\n\tstd::sort(edge+1,edge+m+1);\r\n\tfor(register unsigned int i=1;i<=m;++i)\r\n\t{\r\n\t\tregister unsigned int fu=get_father(edge[i].u),fv=get_father(edge[i].v);\r\n\t\tif(fu!=fv)\r\n\t\t{\r\n\t\t\t++points,sum+=edge[i].w,edge[i].book=1,father[fv]=fu;\r\n\t\t\tadd(edge[i].u,edge[i].v,edge[i].w);\r\n\t\t\tadd(edge[i].v,edge[i].u,edge[i].w);\r\n\t\t\tif(points==n-1)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tdfs(1,0);\r\n\tfor(register unsigned short int i=1;i<=18;++i)\r\n\t{\r\n\t\tfor(register unsigned int j=1;j<=n;++j)\r\n\t\t{\r\n\t\t\tg[j][i]=g[g[j][i-1]][i-1],maxl[j][i]=maxi(maxl[j][i-1],maxl[g[j][i-1]][i-1]),secl[j][i]=maxi(secl[j][i-1],secl[g[j][i-1]][i-1]);\r\n\t\t\tif(maxl[j][i-1]<maxl[g[j][i-1]][i-1] && secl[j][i]<maxl[j][i-1])\r\n\t\t\t{\r\n\t\t\t\tsecl[j][i]=maxl[j][i-1];\r\n\t\t\t}\r\n\t\t\telse if(maxl[j][i-1]>maxl[g[j][i-1]][i-1] && secl[j][i]<maxl[g[j][i-1]][i-1])\r\n\t\t\t{\r\n\t\t\t\tsecl[j][i]=maxl[g[j][i-1]][i-1];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfor(register unsigned int i=1;i<=m;++i)\r\n\t{\r\n\t\tif(edge[i].book==0)\r\n\t\t{\r\n\t\t\tunsigned int j=get_ans(edge[i].u,edge[i].v,edge[i].w);\r\n\t\t\tif(j!=edge[i].w && ans>sum-j+edge[i].w)\r\n\t\t\t{\r\n\t\t\t\tans=sum-j+edge[i].w;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tprintf(\"%llu\",ans);\r\n\treturn 0;\r\n}\r\n```\r\n\r\n\u603b\u7b97\u662fAC\u4e86\uff01\r\n\r\n#### \u8fd0\u884c\u7ed3\u679c\r\n\r\n\u4e00\u672c\u901aOJ\uff1a\r\n\r\n1493\r\n\r\n\u901a\u8fc7 100\u5206\r\n\r\n\u6d4b\u8bd5\u70b91: \u7b54\u6848\u6b63\u786e 312KB 1MS \r\n\r\n\u6d4b\u8bd5\u70b92: \u7b54\u6848\u6b63\u786e 688KB 1MS \r\n\r\n\u6d4b\u8bd5\u70b93: \u7b54\u6848\u6b63\u786e 680KB 1MS \r\n\r\n\u6d4b\u8bd5\u70b94: \u7b54\u6848\u6b63\u786e 712KB 2MS \r\n\r\n\u6d4b\u8bd5\u70b95: \u7b54\u6848\u6b63\u786e 1068KB 2MS \r\n\r\n\u6d4b\u8bd5\u70b96: \u7b54\u6848\u6b63\u786e 21704KB 104MS \r\n\r\n\u6d4b\u8bd5\u70b97: \u7b54\u6848\u6b63\u786e 19980KB 109MS \r\n\r\n\u6d4b\u8bd5\u70b98: \u7b54\u6848\u6b63\u786e 19452KB 88MS \r\n\r\n\u6d4b\u8bd5\u70b99: \u7b54\u6848\u6b63\u786e 41372KB 382MS \r\n\r\n\u6d4b\u8bd5\u70b910: \u7b54\u6848\u6b63\u786e 40116KB 272MS \r\n\r\n\u6d1b\u8c37\uff1a\r\n\r\n\u7528\u65f6 1.44s \u5185\u5b58 32.70MB\r\n\r\n\u6d4b\u8bd5\u70b9\u4fe1\u606f\r\n\r\n6ms/8.62MB \r\nAC #1\r\n\r\n4ms/1.04MB \r\nAC #2\r\n\r\n6ms/10.63MB \r\nAC #3\r\n\r\n6ms/10.88MB \r\nAC #4\r\n\r\n5ms/1.26MB \r\nAC #5\r\n\r\n201ms/27.55MB \r\nAC #6\r\n\r\n150ms/15.88MB \r\nAC #7\r\n\r\n102ms/15.25MB \r\nAC #8\r\n\r\n658ms/32.70MB \r\nAC #9\r\n\r\n302ms/31.57MB \r\nAC #10\r\n\r\n---\r\n\r\n//\u7b2c2\u9053AC\u7684\u7d2b\u9898",
        "postTime": 1565595624,
        "uid": 158626,
        "name": "lzcjoe",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4180\u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010] \u4e00\u672c\u901a\u63d0\u9ad8\u7bc7 3.1.6 1493 \u6b21\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u7136\u9e45\u521a\u521a\u6709\u540c\u5b66\u6307\u51fa\u6211\u7684\u4ee3\u7801\u6709bug\uff0c\u6837\u4f8b\u90fd\u8fc7\u4e0d\u4e86\uff08\u7136\u9e45\u8fd8\u662fAC\u4e86\u6211\u4e5f\u662f...\uff09\n\u4e8e\u662f\u770b\u4e86\u770b\uff0c\u786e\u5b9e\u67d0\u4e2a\u5730\u65b9\u6709\u70b9\u8349\u7387\uff0c\u4e8e\u662f\u628a\u81ea\u5df1\u4fee\u6539\u6b63\u786e\u4e86\u7684\u4ee3\u7801\u653e\u5230\u7b2c\u4e00\u4e2a\uff0c\u9519\u7684\u7b2c\u4e8c\u4e2a\uff0c\u8fd8\u6709\u53e6\u4e00\u4e2a\u653e\u5728\u7b2c\u4e09\u4e2a\u3002\u3002\u3002\n\n\n\uff08\u697c\u4e0b\u4e00\u5806\u5927\u4f6c\u6709\u6ca1\u6709\u51fa\u9519\u7684\u6211\u5c31\u4e0d\u77e5\u9053\u4e86\uff0c\u4f46\u662f\u8c8c\u4f3c\u51fa\u9519\u7684\u7a0b\u5e8f\u4e5f\u662f\u80fd\u8fc7\u7684\uff09\u3002\u4e8e\u662f\u6765\u53d1\u7bc7\u7a0b\u5e8f\u91cc\u5934\u6ce8\u89e3\u6bd4\u8f83\u591a\u7684\u9898\u89e3 \u3002\u5982\u679c\u662f\u90a3\u79cd\u601d\u8def\u7684\u8bdd\u8fd8\u662f\u770b\u697c\u4e0b\u5927\u4f6c\u7684\u5427\uff0c\u6211\u7684\u9898\u89e3\u4e00\u822c\u6765\u8bb2\u662f\u5e2e\u52a9\u7ae5\u978b\u4eec\u7406\u89e3\u7a0b\u5e8f\u6784\u9020\u4e91\u4e91\u7684...\uff08QAQ \u4e0d\u559c\u52ff\u55b7\uff09\n\n\u4f46\u662f\u8fd9\u6b21\u8fd8\u662f\u597d\u597d\u5206\u6790\u4e00\u4e0b\u5427~~\uff08\u54ea\u6015\u662f\u6309\u7740\u4ee3\u7801\u601d\u8def\u6765\u4e00\u904d\uff09~~\u3002\n\n\u9996\u5148\u7684\u9996\u5148\uff0c\u8fd9\u4e2ablog\u5927\u5bb6\u53ef\u4ee5\u5148\u770b\u770b\uff08\u5bf9\u4e8e\u6b21\u5c0f\u751f\u6210\u6811\u7684\u5206\u6790\u6bd4\u6211\u8be6\u7ec6\uff0c\u770b\u5b8c\u8fd9\u7bc7blog\u518d\u770b\u672c\u849f\u84bb\u7684\u9898\u89e3\u6548\u679c\u66f4\u4f73\u3002QAQ```_(:\u0437\u300d\u2220)_```\uff09\uff1a\n\n[\u67d0\u5927\u4f6c\u7684blog](https://blog.csdn.net/zhongshijunacm/article/details/12992571)\n\n\n------------\n\n```\n\n\n\n\u9996\u5148\u7684\u8bdd\uff0c\u60f3\u5fc5\u505a\u5230\u8fd9\u9898\u7684\u7ae5\u978b\u90fd\u77e5\u9053\u6700\u5c0f\u751f\u6210\u6811mst\u600e\u4e48\u5199\u4e86\u5427\u3002\n\u90a3\u4e48\u5176\u5b9e\u6b21\u5c0f\u751f\u6210\u6811\u4e5f\u662f\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u7684\uff08\u4e25\u683c\u548c\u975e\u4e25\u683c\uff09\uff0c\u600e\u4e48\u8bf4\u5462...\nas we all know\uff0cmst\u662f\u6307\u4e00\u4e2a\u56fe\u4e2d\u6240\u6709\u5305\u542b\u5168\u90e8\u9876\u70b9\u7684\u6811\u4e2d\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u6811\uff0c\n\u90a3\u4e48\u6211\u4eec\u6240\u8bf4\u7684\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u5c31\u662f\u8fb9\u6743\u4e4b\u548c\u4e25\u683c\u5927\u4e8e\uff08\u4e5f\u5c31\u662f\u4e0d\u80fd\u7b49\u4e8e\uff09\uff0c\u4f46\u662f\u53c8\u662f\u6ee1\u8db3\u8be5\u6761\u4ef6\u7684\u751f\u6210\u6811\u91cc\u8fb9\u6743\u4e4b\u3001\u548c\u6700\u5c0f\u7684\u6811\u3002\n\u6bd4\u5982\u8bf4\u67d0\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u4e3a88\uff0c\u8fd8\u6709\u5176\u4ed6\u7684\u51e0\u4e2a\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u5206\u522b\u4e3a88\u300188\u300190\u3001100\u3001103\u3001111\uff0c\n\u90a3\u4e48\u8fb9\u6743\u548c\u4e3a90\u7684\u751f\u6210\u6811\u5c31\u662f\u8be5\u56fe\u7684\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\uff0c\n\u800c\u53e6\u5916\u53e6\u4e00\u68f5\u8fb9\u6743\u548c\u4e3a88\u7684\u751f\u6210\u6811\u5c31\u662f\u8be5\u56fe\u7684\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\uff08\u6b64\u65f6\u8fd9\u68f5\u6811\u7684\u8fb9\u6743\u548c \u4e0e mst\u7684\u8fb9\u6743\u548c\u76f8\u7b49\u4e86\u5440\uff09\u3002\n\u90a3\u4e48\u6613\u77e5\u5f53\u4e00\u4e2a\u56fe\u7684mst\u552f\u4e00\u65f6\uff0c\u8be5\u56fe\u7684\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u4e0e\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u5c31\u533a\u522b\u4e0d\u5927\u4e86\u3002\n\n\u90a3\u4e48\u600e\u4e48\u6c42\u4e00\u4e2a\u56fe\u7684\u6b21\u5c0f\u751f\u6210\u6811\u634f\uff1f\u4ee5\u4e0b\u662f\u6b65\u9aa4\uff1a\n1.\u9996\u5148\u8bfb\u8fb9\u4ec0\u4e48\u7684\u5c31\u4e0d\u8bf4\u4e86\uff0c\u90a3\u4e48\u7b2c\u4e00\u6b65\u5c31\u662f\u7528kruskal\u8dd1\u4e00\u904dmst\uff0c\u5e76\u4e14\u628a\u7528\u5230\u7684\u8fb9\u6253\u4e0a\u6807\u8bb0\uff0c\u7136\u540e\u8fd8\u8981\u8bb0\u5f55\u4e0bmst\u7684\u8fb9\u6743\u548c\uff1b\n2.\u5176\u6b21\u518d\u628a\u8fd9\u4e9b\u6253\u4e0a\u6807\u8bb0\u7684\u8fb9\u5b58\u5230\u8be5\u8fb9\u6307\u5411\u7684\u4e24\u4e2a\u9876\u70b9\u7684\u540e\u9762\uff08\u4e24\u4e2a\u9876\u70b9\u90fd\u8981\u5b58\uff09\uff0c\u4ee5\u4fbf\u63a5\u4e0b\u6765\u6df1\u641c\u5efa\u6811\u7528\u3002\n3.\u6df1\u641c\u5efa\u6811\uff0c\u5e76\u7ef4\u62a4\u597d\u5f53\u524d\u8282\u70b9\u7684\u4e00\u7cfb\u5217\u4fe1\u606f\uff08\u6bd4\u5982\u8bf4\u5f53\u524d\u70b9\u7956\u5148\u7684\u4fe1\u606f\u5566\u3001\u4ece\u5f53\u524d\u70b9\u5230\u67d0\u4e2a\u7956\u5148\u7684\u8def\u5f84\u4e2d\u7684\u6700\u5927\u8fb9\u6743\u548c\u6b21\u5927\u8fb9\u6743\u5566\u4e4b\u7c7b\u7684\uff09\n4.\u518d\u7136\u540e\u5c31\u662f\u679a\u4e3e\u65e0\u7528\u8fb9\uff08\u6700\u5c0f\u6811\u4e2d\u6ca1\u6709\u7528\u5230\u7684\u8fb9\uff09\uff0c\u7136\u540e\u500d\u589e\u627e\u5f53\u524d\u679a\u4e3e\u5230\u7684\u8fb9\u6240\u6307\u5411\u7684\u4e24\u4e2a\u7aef\u70b9\u7684lca\u5e76\u4e14\u6c42\u51fa\u8def\u5f84\u4e2d\u6700\u5927\u8fb9\u6743\u548c\u6b21\u5927\u8fb9\u6743\uff0c\n\u5f53\u524d\u679a\u4e3e\u5230\u7684\u8fb9\u51cf\u53bb\u627e\u51fa\u7684\u6700\u5927\uff08\u6216\u8bb8\u662f\u6b21\u5927\uff09\u7684\u8fb9\u6743\u5c31\u662f\u8be5\u8fb9\u7684\u8d21\u732e\uff0c\u7136\u540e\u6700\u5c0f\u8d21\u732e\u8bb0\u5f55\u8fdbans\u91cc\u3002\n5.printf \u8fb9\u6743\u548cres + \uff08\u975e\u96f6\u7684\uff09\u6700\u5c0f\u8d21\u732eans \uff0c\u5b8c\u6bd5\n\n```\n\n\n------------\n\n\n```\n//by Judge\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstdio>\ntypedef long long ll;\nusing namespace std;\nconst int M=1e5+100;\nll n,m,res,ans=0x3f3f3f3f,mx;\nint f[M],fa[25][M],dep[M];\nll d[2][25][M];\nbool used[3*M],vis[M];\nvector<int> a[M];\nstruct Edge{\n\tint from, to;\n\tll val;\n\tbool operator < (const Edge y){\n\t\treturn val < y.val;\n\t}\n}e[3*M];\nint F(int x){\n\tif(f[x]==x) return x;\n\treturn f[x]=F(f[x]);\n}\nvoid kruskal(){\t//kruskal \u7b97\u6700\u5927\u751f\u6210\u6811\uff08\u5df2\u4fdd\u8bc1\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u6700\u5c0f\u9650\u91cd\u6700\u4f18\uff09\n\tsort(e,e+m); int lef=n-1;\n\tfor(int i=1;i<=n;++i) f[i]=i;\n\tfor(int i=0;i<m && lef;++i){\n\t\tint x=F(e[i].from),y=F(e[i].to);\n\t\tif(x!=y){\n\t\t\tf[x]=y; res+=e[i].val;\n\t\t\tused[i]=1; --lef;\n\t\t\tmx=max(mx , e[i].val);\n\t\t}  \n\t}\n}\nvoid dfs(int x){\t//\u6df1\u641c\u5efa\u6811\uff08\u53ef\u80fd\u4e0d\u6b62\u4e00\u68f5\uff0c\u56e0\u4e3a\u6570\u636e\u672a\u4fdd\u8bc1\u662f\u8fde\u901a\u56fe\uff09 \n\tvis[x]=true;\n\tfor(int i=1;i<=23;++i){\n\t\tfa[i][x]=fa[i-1][fa[i-1][x]];\n\t\tll t1=d[0][i-1][x], t2=d[0][i-1][fa[i-1][x]];\n\t\td[0][i][x]=max(t1 , t2);\n\t\td[1][i][x]=max(d[1][i-1][x] , d[1][i-1][fa[i-1][x]]);\n\t\tif(t1!=t2) d[1][i][x]=max(d[1][i][x] , min(t1 , t2));\n\t}\n\tfor(int i=0;i<a[x].size();++i){\n\t\tint t=e[a[x][i]].to+e[a[x][i]].from-x;\n\t\tif(vis[t]) continue;\t//vis\u4e3a1\u8868\u793a\u662f\u7236\u8282\u70b9 \n\t\tdep[t]=dep[x]+1; fa[0][t]=x;\n\t\td[0][0][t]=e[a[x][i]].val; dfs(t);\n\t}\n}\nint lca(int u,int v){\n\tif(dep[u]<dep[v])\n\t\tswap(u,v);\n\tif(dep[u]!=dep[v]){\t\t//\u5c06\u6df1\u5ea6\u505a\u76f8\u7b49\n\t\tfor(int i=23,h=dep[u]-dep[v];i>=0;--i)\n\t\tif(h&(1<<i)) u=fa[i][u];\n\t}\n\tif(u==v) return u;\t//\u5982\u679c\u5df2\u7ecf\u5728\u4e00\u4e2a\u8282\u70b9\u4e0a\u5c31\u76f4\u63a5\u8fd4\u56de \n\tfor(int i=23;i>=0;--i) if(fa[i][u]!=fa[i][v])\n\t\tu=fa[i][u] , v=fa[i][v];\n\treturn fa[0][u];\n}\nll get(int u,int v,int c){\n\tint fht=lca(u,v);\n\tll m1=0,m2=0;\n\tfor(int i=23,h1=dep[u]-dep[fht],h2=dep[v]-dep[fht];i>=0;--i){\n\t\tif(h1&(1<<i)){\n\t\t\tif(d[0][i][u]>m1) m2=m1,m1=d[0][i][u];\n\t\t\telse if(d[0][i][u]>m2) m2=d[0][i][u];\n\t\t\telse m2=max(m2 , d[1][i][u]);\n\t\t} if(h2&(1<<i)){\n\t\t\tif(d[0][i][v]>m1) m2=m1,m1=d[0][i][v];\n\t\t\telse if(d[0][i][v]>m2) m2=d[0][i][v];\n\t\t\telse m2=max(m2 , d[1][i][v]);\n\t\t}\n\t} if(m1==c) return c-m2;\n\telse return c-m1;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=0;i<m;++i){\n\t\tint u,v; ll w;\n\t\tscanf(\"%d%d%lld\",&u,&v,&w);\n\t\te[i].from=u;\n\t\te[i].to=v;\n\t\te[i].val=w;\n\t} kruskal();\n\tfor(int i=0;i<m;++i) if(used[i]){\n\t\ta[e[i].from].push_back(i);\n\t\ta[e[i].to].push_back(i);\n\t} dep[1]=1; dfs(1);\n\tfor(int i=0;i<m;++i) if(!used[i]){\n\t\tif(e[i].val-mx>ans) break;\n\t\tll t=get(e[i].from , e[i].to , e[i].val);\n\t\tans=min(ans , t);\n\t} return printf(\"%lld\\n\",res+ans),0;\n}\n```\n\n\n\u539f\u6765\u9519\u7684\u6211\u4e5f\u4e0d\u5220\u4e86\uff0c\u540c\u5b66\u4eec\u53ef\u4ee5\u5f00\u4e2a\u6587\u672c\u6bd4\u5bf9\u770b\u770b\u54ea\u91cc\u4e0d\u4e00\u6837\n\n\n```cpp\n//by Judge\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstdio>\ntypedef long long ll;\nusing namespace std;\nconst int M=1e5+100;\nll n,m,res,ans=0x3f3f3f3f,mx;\nint f[M],fa[25][M],dep[M];\nll d[2][25][M];\nbool used[3*M],vis[M];\nvector<int> a[M];\nstruct Edge{\n\tint from, to;\n\tll val;\n\tbool operator < (const Edge y){\n\t\treturn val < y.val;\n\t}\n}e[3*M];\nint F(int x){  //\u5e76\u67e5\u96c6\u6807\u51c6\u6a21\u677f \n\tif(f[x]==x) return x;\n\treturn f[x]=F(f[x]);\n}\nvoid kruskal(){\t//kruskal \u7b97mst\uff0c \u57fa\u672c\u5c31\u662f\u6a21\u677f\n\tsort(e,e+m); int lef=n-1;\n\tfor(int i=1;i<=n;++i) f[i]=i;\n\tfor(int i=0;i<m && lef;++i){\n\t\tint x=F(e[i].from),y=F(e[i].to);\n\t\tif(x!=y){\n\t\t\tf[x]=y; res+=e[i].val;\n\t\t\tused[i]=1; --lef;\n\t\t\tmx=max(mx , e[i].val);  //\u8fd9\u91cc\u5904\u7406\u51fa\u7684mx\u4f5c\u526a\u679d\u7528\n\t\t}  \n\t}\n}\nvoid dfs(int x){\t//\u6df1\u641c\u5efa\u6811\uff0c\u4ece1\u5f00\u59cb\n\tvis[x]=true;\n\tfor(int i=1;i<=23;++i){\n\t\tfa[i][x]=fa[i-1][fa[i-1][x]];\n\t\tll t1=d[0][i-1][x], t2=d[0][i-1][fa[i-1][x]];\n\t\td[0][i][x]=max(t1 , t2);\n\t\td[1][i][x]=max(d[1][i-1][x] , d[1][i-1][fa[i-1][x]]);\n\t\tif(t1!=t2) d[1][i][x]=max(d[1][i][x] , min(t1 , t2));\n\t}\n\tfor(int i=0;i<a[x].size();++i){\n\t\tint t=e[a[x][i]].to+e[a[x][i]].from-x;\n\t\tif(vis[t]) continue;\t//vis\u4e3a1\u8868\u793a\u662f\u7236\u8282\u70b9 \n\t\tdep[t]=dep[x]+1; fa[0][t]=x;\n\t\td[0][0][t]=e[a[x][i]].val; dfs(t);\n\t}\n}\nint lca(int u,int v){\n\tif(dep[u]<dep[v])\n\t\tswap(u,v);\n\tif(dep[u]!=dep[v]){\t\t//\u5c06\u6df1\u5ea6\u505a\u76f8\u7b49\n\t\tfor(int i=23,h=dep[u]-dep[v];i>=0;--i)\n\t\tif(h&(1<<i)) u=fa[i][u];\n\t}\n\tif(u==v) return u;\t//\u5982\u679c\u5df2\u7ecf\u5728\u4e00\u4e2a\u8282\u70b9\u4e0a\u5c31\u76f4\u63a5\u8fd4\u56de \n\tfor(int i=23;i>=0;--i) if(fa[i][u]!=fa[i][v])\n\t\tu=fa[i][u] , v=fa[i][v];\n\treturn fa[0][u];\n}\nll get(int u,int v,int c){\n\tint fht=lca(u,v);\n\tll m1=-1,m2=-1; //m1\u662f\u6700\u5927\u8fb9\u6743,m2\u662f\u6b21\u5927\u8fb9\u6743 \n\t// \u500d\u589e\u6c42\u6700\u5927\u8fb9\u6743\u548c\u6b21\u5927\u8fb9\u6743 \n\tfor(int i=23,h1=dep[u]-dep[fht],h2=dep[v]-dep[fht];i>=0;--i){\n\t\tif(h1&(1<<i)){\n\t\t\tif(d[0][i][u]>m1) m2=m1,m1=d[0][i][u];\n\t\t\tm2=max(m2 , d[1][i][u]);\n\t\t}\n\t\tif(h2&(1<<i)){\n\t\t\tif(d[0][i][v]>m1) m2=m1,m1=d[0][i][v];\n\t\t\tm2=max(m2 , d[1][i][v]);\n\t\t}\n\t}\n\tif(m1!=c) return c-m1;\n\t//\u6700\u5927\u8fb9\u6743\u548c\u5f53\u524d\u5173\u952e\u8fb9\u7684\u6743\u503c\u76f8\u7b49\u8fd4\u56de\u6b21\u5927\u8fb9\u6743\u7684\u8d21\u732e(\u56e0\u4e3a\u672c\u9898\u7684\u6b21\u5c0f\u751f\u6210\u6811\u662f\u4e25\u683c\u7684) \n\tif(m2!=-1) return c-m2; //\u4e0d\u7136\u76f4\u63a5\u8fd4\u56de\u6700\u5927\u8fb9\u6743\u7684\u8d21\u732e\uff08\u8fd9\u91cc\u662fhack\u7684\u5173\u952e\u54e6\uff0c\u56e0\u4e3am1==c\u4e14m2==-1\u65f6\u4ee3\u8868\u8be5\u73af\u53ea\u6709\u4e00\u79cd\u6743\u503c\uff09\n    //\u53e6\u5916\u8fd9\u4e2a\u5206\u51fd\u6570\u91cc\u4e5f\u53ef\u4ee5\u628a-1\u90fd\u6539\u62100\uff0c\u522b\u95ee\u6211\u4e3a\u4ec0\u4e48\uff0c\u6570\u636e\u6c34\u4f60\u95ee\u6570\u636e\u53bb\u3002\n\treturn 0; //\u4e0d\u7136\u561b...\u8fd4\u56de\u4e2a0(\u5f53\u7136\u5f88\u660e\u663e,\u65e0\u89e3\u7684\u60c5\u51b5\u4e5f\u80fd\u7531\u6b64\u5224\u65ad\uff0c\u52a0\u4e9b\u8bed\u53e5\u5c31ok\u4e86) \n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=0;i<m;++i){ //\u8bfb\u8fb9 \n\t\tint u,v; ll w;\n\t\tscanf(\"%d%d%lld\",&u,&v,&w);\n\t\te[i]=(Edge){u , v , w};\n\t}\n\tkruskal();  //\u8dd1\u4e00\u8fb9\u6700\u5c0f\u751f\u6210\u6811 \n\tfor(int i=0;i<m;++i) if(used[i]){  //\u8bb0\u5f55\u4e0bmst\u7528\u5230\u7684\u8fb9\uff0c\u5206\u522b\u52a0\u5230\u4e24\u4e2a\u70b9\u540e\u9762 \n\t\ta[e[i].from].push_back(i);\n\t\ta[e[i].to].push_back(i);\n\t}\n\tdep[1]=1; dfs(1);  //\u6df1\u641c\u6839\u8282\u70b9(1) \n\tfor(int i=0;i<m;++i) if(!used[i]){ //\u7136\u540e\u679a\u4e3e\u65e0\u7528\u8fb9\u4f5c\u4e3a\u5173\u952e\u8fb9 \n\t\tif(e[i].val-mx>ans) break; //\u526a\u679d\uff0c\u8d21\u732e\u4e0d\u53ef\u80fd\u518d\u5c0f\u7684\u65f6\u5019\u76f4\u63a5break \n\t\tll t=get(e[i].from , e[i].to , e[i].val); //\u6c42\u51fa\u8d21\u732e \n\t\tif(t) ans=min(ans , t); //\u6700\u5c0f\u8d21\u732e\u5b58\u8fdbans \n\t}\n\tprintf(\"%lld\\n\",res+ans);  //\u8f93\u51fa\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u52a0\u4e0a(\u975e\u96f6\u7684)\u6700\u5c0f\u8d21\u732e\u5c31\u662f\u6b21\u5c0f\u751f\u6210\u6811 \n\treturn 0;\n}\n```\n\n\n------------\n\n\n\u7136\u540e\u53d1\u4e00\u6ce2\u8001\u5e08\u88ab\u6211hack\u6389\u7684\u4ee3\u7801~ \uff08\u6ed1\u7a3d\uff09\n\n\n\n------------\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nconst int maxn=100010,maxm=300010,maxk=22;\nusing namespace std;\ntypedef long long ll;\nint n,m,pre[maxm],now[maxn],son[maxm],val[maxm],delta=(int)1e9+7,tot;ll ans;\nint fa[maxn][maxk],fim[maxn][maxk],sem[maxn][maxk],dep[maxn],f[maxn];bool in[maxm];\nstruct Edge{int x,y,v;}E[maxm];\nbool operator <(Edge a,Edge b){return a.v<b.v;} \nvoid add(int a,int b,int c){pre[++tot]=now[a],now[a]=tot,son[tot]=b,val[tot]=c;}\nint getfa(int x){return f[x]==x?x:f[x]=getfa(f[x]);}\nvoid dfs(int x){\n    for (int i=1;i<=18;i++){\n        fa[x][i]=fa[fa[x][i-1]][i-1];\n        int t1=fim[x][i-1],t2=fim[fa[x][i-1]][i-1];\n        fim[x][i]=max(t1,t2);\n        sem[x][i]=max(sem[x][i-1],sem[fa[x][i-1]][i-1]);\n        if (t1!=t2) sem[x][i]=max(sem[x][i],min(t1,t2));\n    }\n    for (int y=now[x];y;y=pre[y]) if (son[y]!=fa[x][0]){\n        dep[son[y]]=dep[x]+1,fa[son[y]][0]=x;\n        fim[son[y]][0]=val[y],dfs(son[y]);\n    }\n}\n\nvoid kruskal(){\n    sort(E+1,E+1+m);int cnt=0;\n    for (int i=1;i<=n;i++) f[i]=i;\n    for (int i=1;i<=m&&cnt<n-1;i++){\n        int x=E[i].x,y=E[i].y,v=E[i].v;\n        if (getfa(x)==getfa(y)) continue;\n        cnt++,f[getfa(x)]=getfa(y),ans+=v,in[i]=1;\n        add(x,y,v),add(y,x,v);\n    }\n}\n\nint lca(int x,int y){\n    if (dep[x]<dep[y]) swap(x,y);\n    for (int h=dep[x]-dep[y],i=18;i>=0&&h;i--) if (h&(1<<i)) x=fa[x][i];\n    if (x==y) return x;\n    for (int i=18;i>=0;i--)\n        if (fa[x][i]!=fa[y][i])\n            x=fa[x][i],y=fa[y][i];\n    return fa[x][0];\n}\n\nvoid query(int x,int u,int v){\n    int max1=0,max2=0;\n    for (int i=18,h=dep[x]-dep[u];i>=0;i--) if (h&(1<<i)){\n        if (fim[x][i]>max1) max2=max1,max1=fim[x][i];\n        max2=max(max2,sem[x][i]),h-=(1<<i);\n    }\n    if (v==max1) delta=min(delta,v-max2);\n    else delta=min(delta,v-max1);\n}\n\nvoid solve(int id){\n    int x=E[id].x,y=E[id].y,v=E[id].v,u=lca(x,y);\n    query(x,u,v),query(y,u,v);\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1,x,y,z;i<=m;i++)\n\t\tscanf(\"%d%d%d\",&x,&y,&z),E[i]=(Edge){x,y,z};\n    kruskal(),dfs(1);\n    for (int i=1;i<=m;i++) if (!in[i]) solve(i);\n    printf(\"%lld\\n\",ans+delta);\n    return 0;\n}\n\n```\n\n\n------------\n\n\u8fd9\u5c31hack\u4e86\uff1f\u5982\u679c\u4f60\u4e0d\u4fe1\u7684\u8bdd\u8fd9\u91cc\u6709\u7ec4\u6570\u636e\uff1a\n\n```\ninput\uff1a\u590d\u5236\uff08\u624b\u52a8\uff09\n\n5 6\n1 2 3\n1 3 3\n2 3 3\n3 4 3\n3 5 3\n4 5 8\n\nthe answer\uff1a \u7c98\u8d34\uff08\u6ed1\u7a3d\uff09\n\n17\n\nwrong answer\uff1a\n\n15\n\n```",
        "postTime": 1524101937,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "\u53ef\u4ee5\u8bc1\u660e\u6b21\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u662f\u6700\u5c0f\u751f\u6210\u6811\u6362\u4e00\u6761\u8fb9\u5f62\u6210\u7684\uff0c\u56e0\u4e3a\u6362\u66f4\u591a\u7684\u8fb9\u4e00\u5b9a\u4e0d\u4f18\n\n\u6240\u4ee5\u5148\u8dd1\u51fa\u6765\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u679a\u4e3e\u6240\u6709\u975e\u6811\u8fb9\uff0c\u52a0\u5165\u975e\u6811\u8fb9\u4e4b\u540e\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u7136\u540e\u53bb\u6389\u73af\u4e0a\u7684\u6700\u5927\u7684\u4e00\u6761\u6811\u8fb9\n\n\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u5982\u679c\u975e\u6811\u8fb9\u7b49\u4e8e\u73af\u4e0a\u7684\u6700\u5927\u6811\u8fb9\u90a3\u4e48\u662f\u4e0d\u7b26\u5408\u8981\u6c42\u7684\uff0c\u6240\u4ee5\u8fd8\u8981\u7ef4\u62a4\u4e00\u4e2a\u4e25\u683c\u6b21\u5927\u7684\u6811\u8fb9\n\n\u73b0\u5728\u95ee\u9898\u53d8\u6210\u591a\u6b21\u8be2\u95ee\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u548c\u6b21\u5927\u503c.\u500d\u589e\u662f\u4e00\u79cd\u65b9\u6cd5\u4f46\u662f\u5e38\u6570\u4e0d\u4f18\u8d8a\n\n\u6811\u5256\u4e00\u4e0b\uff0c\u56e0\u4e3a\u6ca1\u6709\u4fee\u6539\uff0c\u6240\u4ee5\u8fd8\u53ef\u4ee5\u7ef4\u62a4\u51fa\u6bcf\u4e2a\u70b9\u5230\u94fe\u5934\u7684\u6700\u5927\u6b21\u5927\u503c\uff0c\u8fd9\u6837\u53ea\u9700\u8981\u6700\u540e\u67e5\u8be2\u4e00\u4e0b\u5373\u53ef.\n\n\u6700\u540e\u8fd9\u4e2a\u67e5\u8be2\u53ef\u4ee5\u7ebf\u6bb5\u6811\uff0c\u8fd9\u91cc\u7528\u4e86\u7384\u5b66\u4f18\u5316\u7684$ST$\u8868\uff0c\u671f\u671b$O(n)$\u7684.\u53ef\u4ee5\u53bb\u770b$lxl$\u7684$blog$.\n\n\u6700\u4f18\u89e3\u4e0d\u77e5\u9053\u5199\u4e86\u4e2a\u4ec0\u4e48\u9b3c\u7b97\u6cd5\u80fd\u8fc7\uff0c\u53cd\u6b63\u968f\u4fbf$hack$\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#define INF 1000000007\nusing namespace std;\nconst int N=4e5;\nstruct Node{int mx,smx;}val[N];\nint max(const int &a,const int &b){return a>b?a:b;}\nint tp[N],f[N],dep[N],size[N],son[N],nxt[N],fst[N],mm,dfs_cnt,id[N],w[N],tw[N],n,m;\nstruct Edge{int u,v,w;}e1[N],e[N],tmp[N];\nvoid ade(int u,int v,int w){e[++mm]=(Edge){u,v,w};nxt[mm]=fst[u],fst[u]=mm;}\nvoid link(int u,int v,int w){ade(u,v,w),ade(v,u,w);}\nNode pushup(const Node &a,const Node &b)\n{\n\tif(a.mx>b.mx)return (Node){a.mx,max(a.smx,b.mx)};\n\tif(a.mx==b.mx)return (Node){a.mx,max(a.smx,b.smx)};\n\treturn (Node){b.mx,max(a.mx,b.smx)};\n}\nNode pushup(const Node &a,const int &b)\n{\n\tif(b>=a.mx)return (Node){b,a.smx};\n\treturn (Node){a.mx,max(b,a.smx)};\n}\nstruct DSU\n{\n\tint f[N],size[N];\n\tvoid clear(){for(int i=1;i<=n;i++)size[i]=1;}\n\tint find(int x){return !f[x]?x:f[x]=find(f[x]);}\n\tvoid merge(int x,int y)\n\t{\n\t\tif(size[x]<size[y])f[x]=y,size[y]+=size[x];\n\t\telse f[y]=x,size[x]+=size[y];\n\t}\n}dsu;\nstruct STable\n{\n\tNode f[20][10000],pre[N],suf[N];\n\tint lg[N],blo,bl[N];\n\tvoid make()\n\t{\n\t\tblo=ceil(sqrt(n*4/3));\n\t\tfor(register int i=1;i<=n;i++)bl[i]=(i-1)/blo+1;int bln=bl[n];\n\t\tfor(register int i=1;i<=bln;i++)\n\t\t{\n\t\t\tint l=(i-1)*blo+1,r=min(i*blo,n);\n\t\t\tpre[l]=(Node){w[l],-INF},suf[r]=(Node){w[r],-INF};\n\t\t\tfor(register int j=l+1;j<=r;j++)pre[j]=pushup(pre[j-1],w[j]);\n\t\t\tfor(register int j=r-1;j>=l;j--)suf[j]=pushup(suf[j+1],w[j]);\n\t\t\tf[0][i]=pre[r];\n\t\t}\n\t\tlg[1]=0;for(register int i=2;i<=bln;i++)lg[i]=lg[i>>1]+1;\n\t\tfor(register int i=1;(1<<i)<=bln;i++)\n\t\t\tfor(register int j=1;j+(1<<i)-1<=bln;j++)\n\t\t\t\tf[i][j]=pushup(f[i-1][j],f[i-1][j+(1<<(i-1))]);\n\t}\n\tNode query(int l,int r)\n\t{\n\t\tint bll=bl[l],blr=bl[r];Node ans;\n\t\tif(bll==blr){ans=(Node){w[l],-INF};for(register int i=l+1;i<=r;i++)ans=pushup(ans,w[i]);return ans;}\n\t\tans=pushup(suf[l],pre[r]);\n\t\tif(++bll<=--blr)\n\t\t{\n\t\t\tint len=lg[blr-bll+1];\n\t\t\tans=pushup(ans,pushup(f[len][bll],f[len][blr-(1<<len)+1]));\n\t\t}\n\t\treturn ans;\n\t}\n}a;\nvoid dfs1(int u,int fa)\n{\n\tf[u]=fa,dep[u]=dep[fa]+1,size[u]=1;\n\tint mx=0;\n\tfor(register int i=fst[u];i;i=nxt[i])\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==fa)continue;\n\t\tdfs1(v,u);\n\t\tsize[u]+=size[v];\n\t\tif(size[v]>mx)mx=size[v],son[u]=v;\n\t}\n}\nvoid dfs2(register int u,int top)\n{\n\ttp[u]=top,id[u]=++dfs_cnt;w[dfs_cnt]=tw[u];\n\tif(u==top)val[u]=(Node){tw[u],-INF};\n\telse val[u]=pushup(val[f[u]],tw[u]);\n\tif(son[u])dfs2(son[u],top);\n\tfor(register int i=fst[u];i;i=nxt[i])\n\t{\n\t\tint v=e[i].v;\n\t\tif(v!=son[u]&&v!=f[u])\n\t\t\tdfs2(v,v);\n\t}\n}\nNode query(register int x,register int y)\n{\n\tregister Node ans={-INF,-INF};\n\twhile(tp[x]!=tp[y])\n\t{\n\t\tif(dep[tp[x]]<dep[tp[y]])swap(x,y);\n\t\tans=pushup(ans,val[x]);\n\t\tx=f[tp[x]];\n\t}\n\tif(dep[x]<dep[y])swap(x,y);\n\tif(x!=y)ans=pushup(ans,a.query(id[y]+1,id[x]));\n\treturn ans;\n}\nint getin()\n{\n\tint x=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')x=x*10+ch-48,ch=getchar();\n\treturn x;\n}\nint cmp(const Edge &a,const Edge &b){return a.w<b.w;}\nint main()\n{\n\tn=getin(),m=getin();\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\te1[i].u=getin(),e1[i].v=getin(),e1[i].w=getin();\n\t}\n\tsort(e1+1,e1+m+1,cmp);long long s=0,ans=1e18;int cnt=0;\n\tdsu.clear();//puts(\"\");\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tint u=dsu.find(e1[i].u),v=dsu.find(e1[i].v);\n\t\tif(u!=v)\n\t\t{\n\t\t\tlink(e1[i].u,e1[i].v,e1[i].w);\n\t\t\tdsu.merge(u,v);s+=e1[i].w;//cout<<e1[i].u<<\" \"<<e1[i].v<<\" \"<<e1[i].w<<endl;\n\t\t}\n\t\telse tmp[++cnt]=(Edge){e1[i].u,e1[i].v,e1[i].w};\n\t}\n\tdfs1(1,0);tw[1]=-INF;\n\tfor(register int i=1;i<=mm;i+=2)\n\t\ttw[dep[e[i].u]>dep[e[i].v]?e[i].u:e[i].v]=e[i].w;\n\tdfs2(1,1);a.make();\n\tfor(register int i=1;i<=cnt;i++)\n\t{\n\t\tint u=tmp[i].u,v=tmp[i].v,w=tmp[i].w;//cout<<u<<\" \"<<v<<endl;\n\t\tNode t=query(u,v);//printf(\"%d %d\\n\",t.mx,t.smx);\n\t\tif(w==t.mx)ans=min(ans,s-t.smx+w);\n\t\telse ans=min(ans,s-t.mx+w);\n\t}\n\tcout<<ans<<endl;\n}\n```",
        "postTime": 1557657101,
        "uid": 22136,
        "name": "qwaszx",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "## \u6b21\u5c0f\u751f\u6210\u6811\n\n\u4e00\u5f00\u59cb\u53ea\u662f\u5174\u8d77\u5b66\u4e00\u5b66\uff0c\u601d\u8def\u633a\u597d\u7406\u89e3\u7684\u4f46\u662f\u6253\u4ee3\u7801\u4e0d\u77e5\u9053\u662f\u60f3\u590d\u6742\u4e86\u8fd8\u662f\u600e\u4e48\u7684\uff0c\u53cd\u6b63\u5f88\u7e41\u7410\uff0c\u8c03\u4e86\u4e00\u6574\u5929\n\n\n\u4e00\u3001\u5b9a\u4e49\n\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u5373\u8fb9\u6743\u548c\u5c0f\u4e8e\u7b49\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u548c\u7684\u751f\u6210\u6811\uff1b\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u5373\u8fb9\u6743\u548c\u5927\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u548c\u7684\u751f\u6210\u6811\n\n\n****\n****\n****\n\n\\\n\u4e8c\u3001\u89e3\u6cd5\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\uff0c\u6b21\u5c0f\u751f\u6210\u6811\u4e0e\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u53ea\u6709\u4e00\u6761\u4e0d\u540c\u7684\u8fb9\u3002\n\\\n\u8fd9\u662f\u5f88\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5982\u679c\u9009\u51fa\u4e24\u6761\u8fb9\u6765\u66ff\u6362\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\uff0c\u4e00\u5b9a\u662f\u6ca1\u6709\u53ea\u66ff\u6362\u4e00\u6761\u8fb9\u4f18\u3002\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9$(u,v)$\uff0c\u5982\u679c\u6211\u4eec\u628a\u5b83\u52a0\u5165\u751f\u6210\u6811\uff0c\u5c31\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u8981\u4ece\u73af\u91cc\u5220\u9664\u4e00\u6761\u8fb9\u4f7f\u4ecd\u7136\u6784\u6210\u4e00\u68f5\u6811\uff0c\u90a3\u4e48\u8981\u4f7f\u751f\u6210\u7684\u6811\u8fb9\u6743\u548c\u5c3d\u91cf\u5c0f\uff0c\u6211\u4eec\u5c31\u9700\u8981\u627e\u5230\u8fd9\u4e2a\u73af\u91cc\u9664\u4e86\u8fb9$~(u,v)~$\u5916\u6700\u5927\u7684\u4e00\u6761\u8fb9\uff08$Q$:\u4e3a\u4ec0\u4e48\u9664\u4e86\u8fb9$~(u,v)~$\uff1f$A$:\u56e0\u4e3a\u8fd9\u662f\u6211\u4eec\u8981\u52a0\u8fdb\u53bb\u7684\u8fb9\uff09\uff0c\u5373\u539f\u751f\u6210\u6811\u4e0a$u$\u5230$v$\u7684\u8def\u5f84\u4e0a\u8fb9\u6743\u6700\u5927\u7684\u4e00\u6761\u8fb9\u3002\u8fd9\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u500d\u589e\u6216\u8005\u6811\u5256\u5b9e\u73b0\u3002\n\\\n\u5177\u4f53\u800c\u8a00\uff0c\u7528\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\u5b58\u50a8\u5176\u5230\u5176\u7236\u4eb2\u7684\u8fb9\u7684\u8fb9\u6743\u3002\u4f46\u662f\u8fd9\u6837\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u8bf4\u5982\u679c$~u,v~$\u4e0d\u5728\u540c\u4e00\u6761\u94fe\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u7684\u5176\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u5c31\u662f\u8def\u5f84$~(u,v)~$\u4e0a\u4e0d\u5305\u62ec$~lca(u,v)~$\u7684\u6240\u6709\u70b9\u7684\u70b9\u6743\u6700\u5927\u503c\u3002\u90a3\u4e48\u600e\u6837\u5b9e\u73b0\u4e0d\u5305\u62ec$~lca~$\u5462\uff1f\n\\\n\u5bf9\u4e8e\u500d\u589e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u6700\u7ec8\u6c42\u7684\u6bd4$~lca~$\u6df1\u5ea6\u5927$~1~$\u5373\u53ef\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n```\nint ans=-inf;\nfor(int i=20;i>=0;i--){\n    if((dep[x]-(1<<i))>dep[y]){\n        ans=max(ans,Max[x][i]);\n        x=f[x][i];\n    }\n}\nif(f[x][0]==y)return ans;\nfor(int i=20;i>=0;i--){\n    if(f[f[x][i]][0]!=f[f[y][0]]){\n        ans=max(ans,max(Max[x][i],Max[y][i]));\n        x=f[x][i],y=f[y][i];\n    }\n}\nreturn ans;\n//\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff0c\u53cd\u6b63\u4e5f\u6ca1\u5199\u8fc7\uff0c\u6211\u5199\u7684\u65f6\u6811\u5256\u7248\u672c\u7684\u3002\n```\n\u5bf9\u4e8e\u6811\u5256\uff0c\u5148\u6c42\u51fa$~lca~$\uff0c\u5728$~x~$\u4e0d\u65ad\u5411$~lca~$\u6240\u5728\u91cd\u94fe\u94fe\u4e0a\u8df3\u65f6\uff0c\u5982\u679c\u6700\u7ec8\u4e0e$~lca~$\u91cd\u5408\uff0c\u90a3\u4e48\u6240\u6c42\u5373\u4e3a\u524d\u4e00\u6b65\u7684\u91cd\u94fe\u7684\u9876\uff0c\u5426\u5219\u662f$~lca~$\u6240\u5728\u91cd\u94fe\u7684\u4e0b\u4e00\u4e2a\u70b9\u5373\u5728\u7ebf\u6bb5\u6811\u4e0a\u6807\u53f7$+1$\u7684\u6570\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n```\nil int find(int x,int fu){\n    int now=0;\n    while(top[x]!=top[fu])now=top[x],x=fa[top[x]];\n    if(x==fu)return now;return reflect[id[fu]+1];\n}\nnode now=pushup(query_way(x,find(x,fu)),query_way(y,find(y,fu)));\n```\n\u5728\u6c42\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\uff0c\u5982\u679c\u6240\u8003\u8651\u7684\u975e\u6811\u8fb9\u8fb9\u6743\u548c\u73af\u5185\u6700\u5927\u8fb9\u8fb9\u6743\u4e00\u6837\uff0c\u90a3\u4e48\u6211\u4eec\u8fd8\u8981\u53bb\u627e\u73af\u5185\u7684\u6b21\u5927\u8fb9\uff0c\u6240\u4ee5\u5728\u6811\u5256\u7684\u7ebf\u6bb5\u6811\u4e0a\u8fd8\u8981\u7ef4\u62a4\u6b21\u5927\u503c\u3002\n\n\u6811\u5256\u7248\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a\n```\nnamespace tre_cut{\n    int dep[maxn],siz[maxn],son[maxn],fa[maxn],w_data[maxn];\n    int top[maxn],cnt,id[maxn],a[maxn],reflect[maxn];\n    struct node{int Max,MMax;}tre[maxn<<1];\n    struct NODE{int ls,rs;}tree[maxn<<1];\n    il void dfs1(int x,int fu,int deep){\n        dep[x]=deep;fa[x]=fu;siz[x]=1;\n        for(rint i=hed[x];i;i=nxt[i]){\n            if(!vis[i]||to[i]==fu)continue;\n            dfs1(to[i],x,deep+1);w_data[to[i]]=w[i];\n            siz[x]+=siz[to[i]];\n            if(siz[to[i]]>siz[son[x]])son[x]=to[i];\n        }return;\n    }\n    il void dfs2(int x,int topx){\n        top[x]=topx;id[x]=++cnt;a[cnt]=w_data[x];reflect[cnt]=x;\n        if(!son[x])return;dfs2(son[x],topx);\n        for(rint i=hed[x];i;i=nxt[i]){\n            if(to[i]==fa[x]||to[i]==son[x]||!vis[i])continue;\n            dfs2(to[i],to[i]);\n        }return;\n    }\n    int comp[5];\n    il node pushup(node ls,node rs){\n        comp[1]=ls.Max,comp[2]=ls.MMax,comp[3]=rs.Max,comp[4]=rs.MMax;\n        int Max=-inf,MMax=-inf-inf;\n        for(rint i=1;i<=4;++i){\n            if(comp[i]>Max)MMax=Max,Max=comp[i];\n            else if(comp[i]<Max&&comp[i]>MMax)MMax=comp[i];\n        }\n        return (node){Max,MMax};\n    }\n    int CNT;\n    il void build(int &rt,int l,int r){\n        if(!rt)rt=++CNT;\n        if(l==r)return (void)(tre[rt]=(node){a[l],-inf});\n        build(lson),build(rson);\n        tre[rt]=pushup(tre[tree[rt].ls],tre[tree[rt].rs]);\n    }\n    il node query(int rt,int l,int r,int L,int R){\n        if(!rt)return (node){-inf,-inf-inf};\n        if(L<=l&&r<=R)return tre[rt];\n        node end=(node){-inf,-inf-inf};\n        if(L<=Mid)end=pushup(end,query(lson,L,R));\n        if(R>Mid)end=pushup(end,query(rson,L,R));\n        return end;\n    }\n    il int lca(int x,int y){\n        while(top[x]!=top[y]){\n            if(dep[top[x]]<dep[top[y]])swap(x,y);\n            x=fa[top[x]];\n        }\n        if(dep[x]>dep[y])swap(x,y);\n        return x;\n    }\n    il void process(){//\u9884\u5904\u7406\n        dfs1(1,0,1);dfs2(1,1);\n        int rt=0;build(rt,1,n);\n        return;\n    }\n    il int find(int x,int fu){\n        int now=0;\n        while(top[x]!=top[fu])now=top[x],x=fa[top[x]];\n        if(x==fu)return now;return reflect[id[fu]+1];\n    }\n    il node query_way(int x,int y){\n        node end=(node){-inf,-inf-inf};\n        while(top[x]!=top[y]){\n            if(dep[top[x]]<dep[top[y]])swap(x,y);\n            end=pushup(end,query(1,1,n,id[top[x]],id[x]));\n            x=fa[top[x]];\n        }\n        if(dep[x]>dep[y])swap(x,y);\n        end=pushup(end,query(1,1,n,id[x],id[y]));\n        return end;\n    }\n    il void doit(int x,int y,int z){\n        int fu=lca(x,y);\n        node now=pushup(query_way(x,find(x,fu)),query_way(y,find(y,fu)));\n        int S1=S+z-now.Max,S2=S+z-now.MMax;\n        if(S1>S)ANS=min(ANS,S1);\n        else if(S2>S) ANS=min(ANS,S2);\n        return;\n    }\n}\nsigned main(){\n    for(int i=2;i<=e;i+=2){\n        if(vis[i])continue;//vis\u8868\u793a\u8be5\u8fb9\u662f\u5426\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\n        tre_cut::doit(fr[i],to[i],w[i]);//\u67e5\u8be2\u6bcf\u6761\u975e\u6811\u8fb9\u7684\u7aef\u70b9u,v\u5728\u6811\u4e0a\u7684\u8def\u5f84\u4e2d\u6700\u5927\u7684\u8fb9\u6743\n    }\n    printf(\"%lld\\n\",ANS);\n    return 0;\n}\n```\n\u601d\u8def\u6781\u5176\u6e05\u6670",
        "postTime": 1577006448,
        "uid": 26622,
        "name": "Masky",
        "ccfLevel": 6,
        "title": "\u6b21\u5c0f\u751f\u6210\u6811"
    },
    {
        "content": "### \u2014\u2014\u6211\u597d\u96be,QAQ\n\n\u8fd9\u9053\u9898\u5361\u4e86\u6211\u4e00\u4e0b\u5348\uff01\n\n##### ~~\u5c31\u662f\u8fd9\u6837\u7684\uff0c\u7136\u800c\u5f88\u6709\u610f\u601d\u7684\u662f\u4e2d\u95f4\u53d1\u751f\u4e86\u5341\u5206\u591a\u7684\u4e8b\uff0c\u6bd4\u5982\uff1a\u5f53\u6211\u53d1\u73b0\u4e86\u6211\u7684\u4e00\u4e2a\u9519\u8bef\u7684\u65f6\u5019\uff0c\u6211\u5f88\u5f00\u5fc3\u7684\u4ee5\u4e3a\u6211\u53ef\u4ee5A\u4e86\uff0c\u7ed3\u679c\u2014\u2014\u6362\u4e86\u4e00\u4e2a\u70b9WA\uff08\u592a\u68d2\u4e86\uff01\uff09\uff0c\u7136\u540e\u6211\u679c\u65ad\u5f03\u4e86\u6b64\u9898\u3002\u76f4\u5230\u7b2c\u4e8c\u5929\uff0c\u6211\u53c8\u91cd\u65b0\u6253\u4e86\u4e00\u904d\uff0c\u7136\u540e\uff0c\u6211\u5c31\u60f3\u5230\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u6210\u529f\u5207\u4e86\u8fd9\u9053\u6bd2\u7624\u9898\u2026\u2026~~\n\n\u603b\u800c\u8a00\u4e4b\uff0c\u6211\u592a\u83dc\u4e86\uff01\n\n---\n\n \u60f3\u5fc5\u8fd9\u9053\u9898\u7684\u601d\u8def\u662f\u5f88\u660e\u786e\u7684\u2014\u2014**LCA+\u6700\u5c0f\u751f\u6210\u6811**\uff0c~~\u56e0\u4e3a\u6211\u4e0d\u4f1aLCT~~\u3002\n\n\u6211\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u539f\u5148\u6211\u7684\u601d\u8def\u662f\uff0c\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u8fd9\u5e76\u4e0d\u4e25\u683c\u2026\u2026\u6240\u4ee5\uff1a\n\n### 80\u5206\uff1a\n```cpp\nint lca(int x,int y,int z){\n    if (find(x)!=find(y)) return -1;\n\tif (dep[x]<dep[y]) swap(x,y);\n\tint d=dep[x]-dep[y],ans=0;\n\tfor (int i=0;(1<<i)<=d;i++)\n\t\tif ((1<<i)) ans=max(ans,(an[x][i]==z?0:an[x][i])),x=f[x][i];\n\tif (x==y) return ans;\n\tfor (int i=log2(dep[x]);i>=0;i--)\n\t\tif (f[x][i]!=f[y][i]) ans=max(max(an[x][i],an[y][i])==z?0:max(an[x][i],an[y][i]),ans),x=f[x][i],y=f[y][i];\n\treturn max(max(an[x][0],an[y][0])==z?0:max(an[x][0],an[y][0]),ans);\n}\n```\n\n\u7136\u800c\u5982\u679c\u662f\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\uff0c\u5c31\u4e0d\u80fd\u628a\u5220\u53bb\u7684\u8fb9\u4e0e\u65b0\u6dfb\u52a0\u8fdb\u53bb\u7684\u8fb9\u7684\u503c\u76f8\u7b49\u3002\u8fd9\u662f\u95ee\u9898\u4e00\u3002\n\n### 90\u5206\uff1a\n```cpp\nint lca(int x,int y,int z){\n    if (find(x)!=find(y)) return -1;\n\tif (dep[x]<dep[y]) swap(x,y);\n\tint d=dep[x]-dep[y],ans=0;\n\tfor (int i=0;(1<<i)<=d;i++)\n\t\tif ((1<<i)&d) ans=max(ans,(an[x][i]==z?0:an[x][i])),x=f[x][i];\n\tif (x==y) return ans;\n\tfor (int i=log2(dep[x]);i>=0;i--)\n\t\tif (f[x][i]!=f[y][i]) ans=max(max(an[x][i],an[y][i])==z?0:max(an[x][i],an[y][i]),ans),x=f[x][i],y=f[y][i];\n\treturn max(max(an[x][0],an[y][0])==z?0:max(an[x][0],an[y][0]),ans);\n}\n```\n\n\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u5728\u7b2c\u4e8c\u6bb5\u4ee3\u7801\u91cc\u9762\uff0c\u6211\u5bf9\u4e8e\u4e0e\u52a0\u5165\u8fb9\u76f8\u7b49\u7684\u503c\u76f8\u7b49\u7684\u8fb9\uff0c\u6211\u662f\u4e0d\u4f1a\u53d6\u7684\uff0c\u800c\u662f\u53d6\u4e860\uff0c\u7136\u800c\u8fd9\u5f88\u660e\u663e\u6709\u95ee\u9898\uff0c\u6240\u4ee5\u8981\u5b58\u4e00\u4e0b\u6b21\u5c0f\u7684\u503c\u2026\u2026\uff0c\u4e8e\u662f\u5c31\u6539\u597d\u4e86\uff01\n\n### 100\u5206\uff1a\n\n```cpp\nint lca(int x,int y,int z){\n//    if (find(x)!=find(y)) return -1;\n\tif (dep[x]<dep[y]) swap(x,y);\n\tint d=dep[x]-dep[y],ans=0;\n\tfor (int i=0;(1<<i)<=d;i++)\n\t\tif ((1<<i)&d) ans=max(ans,(an[x][i]==z?an1[x][i]:an[x][i])),x=f[x][i];\n\tif (x==y) return ans;\n\tfor (int i=log2(dep[x]);i>=0;i--)\n\t\tif (f[x][i]!=f[y][i]) ans=max(max(an[x][i],an[y][i])==z?an1[x][i]:max(an[x][i],an[y][i]),ans),x=f[x][i],y=f[y][i];\n\treturn (max(max(an[x][0],an[y][0])==z?max(max(an1[x][0],an1[y][0]),ans):max(an[x][0],an[y][0]),ans));\n}\n```\n\n## \u603b\u4ee3\u5417\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N=1000001,M=600001,INF=1e9+7;\nstruct st{\n    int x,y,z;\n}kr[M];\nint n,m,k,rt,cnt,q,ans=INF,anz;\nint nxt[M<<1],last[N],a[M<<1],w[M<<1];\nint fa[N],f[N][21],dep[N],sz[N],an[N][21],an1[N][21];\nbool l[N];\nvoid add(int x,int y,int z){\n    nxt[++k]=last[x];\n    last[x]=k;\n    a[k]=y;\n    w[k]=z;\n}\nbool cmp(st a,st b){\n    return a.z<b.z;\n}\nint find(int x){\n    if (x==fa[x]) return x;\n    else return fa[x]=find(fa[x]);\n}\nvoid kruskal(){\n    sort(kr+1,kr+1+m,cmp);\n    for (int i=1;i<=m;i++){\n        if (kr[i].x==kr[i-1].x&&kr[i].y==kr[i-1].y){l[i]=1;continue;}\n        int b=find(kr[i].x),c=find(kr[i].y);\n        if (b!=c){\n            fa[b]=c;\n            cnt++;l[i]=1;anz+=kr[i].z;//printf(\"%d %d %d\\n\",kr[i].x,kr[i].y,kr[i].z);\n            add(kr[i].x,kr[i].y,kr[i].z);\n            add(kr[i].y,kr[i].x,kr[i].z);\n        }\n        if (cnt==n-1) return ;\n    }\n}\nvoid dfs_lca(int x,int fa,int y){\n\tdep[x]=dep[fa]+1;\n\tf[x][0]=fa;an[x][0]=y;an1[x][0]=0;\n\tfor (int i=1;(1<<i)<=dep[x];i++)\n\t\tf[x][i]=f[f[x][i-1]][i-1],\n\t\tan[x][i]=max(an[f[x][i-1]][i-1],an[x][i-1]),\n\t\tan1[x][i]=max(max(an1[f[x][i-1]][i-1],an1[x][i-1]),an[x][i-1]==an[f[x][i-1]][i-1]?0:min(an[x][i-1],an[f[x][i-1]][i-1]));\n\tfor (int i=last[x];i;i=nxt[i])\n\t\tif (a[i]!=fa) dfs_lca(a[i],x,w[i]);\n}\nint lca(int x,int y,int z){\n//    if (find(x)!=find(y)) return -1;\n\tif (dep[x]<dep[y]) swap(x,y);\n\tint d=dep[x]-dep[y],ans=0;\n\tfor (int i=0;(1<<i)<=d;i++)\n\t\tif ((1<<i)&d) ans=max(ans,(an[x][i]==z?an1[x][i]:an[x][i])),x=f[x][i];\n\tif (x==y) return ans;\n\tfor (int i=log2(dep[x]);i>=0;i--)\n\t\tif (f[x][i]!=f[y][i]) ans=max(max(an[x][i],an[y][i])==z?an1[x][i]:max(an[x][i],an[y][i]),ans),x=f[x][i],y=f[y][i];\n\treturn (max(max(an[x][0],an[y][0])==z?max(max(an1[x][0],an1[y][0]),ans):max(an[x][0],an[y][0]),ans));\n}\nsigned main(){\n    // freopen(\"a.in\",\"r\",stdin);\n    scanf(\"%lld%lld\",&n,&m);\n    for (int i=1;i<=n;i++) fa[i]=i;\n    // memset(an,0,sizeof(an));memset(l,0,sizeof(l));\n    for (int i=1;i<=m;i++) scanf(\"%lld%lld%lld\",&kr[i].x,&kr[i].y,&kr[i].z);\n    kruskal();\n\tfor (int i=1;i<=n;i++)\n\t\tif (!dep[i]) dfs_lca(i,0,0);\n    for (int x,i=1;i<=m;i++)\n        if (!l[i]){\n            x=lca(kr[i].x,kr[i].y,kr[i].z);//printf(\"%d %d %d\\n\",kr[i].x,kr[i].y,x);\n            if (kr[i].z-x) ans=min(ans,kr[i].z-x);\n        }\n    printf(\"%lld\",ans+anz);\n    return 0;\n}\n```\n",
        "postTime": 1579435809,
        "uid": 23170,
        "name": "\u56de\u9752\u7edd\u5f71",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u627e\u5230\u4e00\u68f5**\u4e25\u683c**\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u8fb9\u6743\u548c**\u5927\u4e8e**\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n$n\\le10^5,m\\le 3\\cdot 10^5,w_i\\le10^9$\n\n### \u601d\u8def\n\n\u6bd4\u8f83\u5389\u5bb3\u7684\u4e00\u9053\u9898\uff0c\u51e0\u4e4e\u5b8c\u5168\u8986\u76d6\u4e86\u63d0\u9ad8\u7ec4\u7684\u77e5\u8bc6\u70b9\uff0c\u6ca1\u6709\u4e00\u70b9\u8d85\u51fa\u63d0\u9ad8\u7ec4\u7684\u8303\u56f4\u3002\n\n\u56e0\u4e3a\u662f\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u4e00\u5b9a\u662f\u4e0e\u6700\u5c0f\u751f\u6210\u6811\u6709\u5f88\u5927\u5173\u8054\u7684\uff0c\u6240\u4ee5\u5148\u7528 kruskal \u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u8003\u8651\u6bcf\u6761\u8fb9\uff0c\u5047\u8bbe\u8be5\u8fb9\u5728\u6b21\u5c0f\u751f\u6210\u6811\u4e0a\uff0c\u90a3\u4e48\u5fc5\u987b\u5220\u53bb\u4e24\u70b9\u4e4b\u95f4\u7684\u4e00\u6761\u8fb9\uff0c\u4f46\u4e0d\u80fd\u4e0e\u8fd9\u6761\u8fb9\u6743\u503c\u76f8\u540c\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u8fc7\u7a0b\u4e00\u5b9a\u662f\u589e\u52a0\u6743\u503c\uff0c\u6240\u4ee5\u53ea\u80fd\u8fdb\u884c\u4e00\u6b21\u3002\n\n\u5177\u4f53\u7684\uff0c\u7ef4\u62a4\u6570\u7ec4\u6570\u7ec4 $fa_{u,i},fimx_{u,i},semx_{u,i}$ \u8868\u793a $u$ \u5f80\u4e0a $2^i$ \u7684\u7684\u7956\u5148\uff0c$u$ \u5230 $2^i$ \u7956\u5148\u8fd9\u6bb5\u7684\u6700\u5927\u503c\u3001\u6b21\u5927\u503c\u3002\u5728\u6c42 LCA \u7684\u9884\u5904\u7406\u540c\u65f6\u5904\u7406\uff0c\u6c42 LCA \u662f\u540c\u65f6\u7ef4\u62a4\u7b54\u6848\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\Theta(m\\log n+n\\log n)$\n\n### code\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,n) for (int i=a;i<=n;i++)\n#define per(i,a,n) for (int i=a;i>=n;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst int mod=998244353;\nconst ll mod2=1ll*mod*mod;\nconst int maxn=3e5+10;\nint quick(int a,int b){int res=1;a%=mod;assert(b>=0); for(;b;b>>=1){if(b&1)res=1ll*res*a%mod;a=1ll*a*a%mod;}return res;}\nint gcd(int a,int b){return b?gcd(b,a%b):a;}\nint n,m,pa[maxn][23],dep[maxn],fimx[maxn][23],semx[maxn][23],FA[maxn];\nll ans=1e18,mst;\nvector<PII> eg[maxn];\nstruct edge{\n\tint u,v,w,qu;\n\tbool operator<(const edge x)const{\n\t\treturn w<x.w;\n\t}\n}e[maxn];\nint find(int u){\n\treturn (FA[u]==u)?u:FA[u]=find(FA[u]);\n}\nvoid kruskal(){\n\trep(i,1,n) FA[i]=i;\n\tsort(e+1,e+m+1);\n\trep(i,1,m){\n\t\tint u=find(e[i].u),v=find(e[i].v);\n\t\tif(u==v) continue;\n\t\tmst+=e[i].w;\n\t\tFA[u]=v;\n\t\te[i].qu=1;\n\t\teg[e[i].u].pb(mp(e[i].v,e[i].w));\n\t\teg[e[i].v].pb(mp(e[i].u,e[i].w));\n\t} \n}\nvoid dfs(int u,int fa){\n\tdep[u]=dep[fa]+1;\n\tpa[u][0]=fa;\n\tfor(int i=0;i<SZ(eg[u]);i++){\n\t\tint v=eg[u][i].fi;\n\t\tif(v==fa) continue;\n\t\tfimx[v][0]=eg[u][i].se;\n\t\tdfs(v,u);\n\t}\n}\nvoid init(){\n\trep(j,1,18)\n\t\trep(i,1,n){\n\t\t\tpa[i][j]=pa[pa[i][j-1]][j-1];\n\t\t\tfimx[i][j]=max(fimx[i][j-1],fimx[pa[i][j-1]][j-1]);\n\t\t\tsemx[i][j]=max(semx[i][j-1],semx[pa[i][j-1]][j-1]);\n\t\t\tif(fimx[i][j-1]!=fimx[pa[i][j-1]][j-1])\n\t\t\t\tsemx[i][j]=max(semx[i][j],min(fimx[i][j-1],fimx[pa[i][j-1]][j-1]));\n\t\t}\n}\nvoid query(int u,int v,int w){\n\tint maxn1=0,maxn2=0;\n\tif(dep[u]>dep[v]) swap(u,v);\n\tper(i,18,0) \n\t\tif(dep[v]>=dep[u]+(1<<i)){\n\t\t\tif(maxn1^fimx[v][i]) maxn2=max(maxn2,min(maxn1,fimx[v][i]));\n\t\t\tmaxn1=max(maxn1,fimx[v][i]);\n\t\t\tmaxn2=max(maxn2,semx[v][i]);\n\t\t\tv=pa[v][i];\n\t\t}\n\tif(u==v){\n\t\tll tmp=w-((w==maxn1)?maxn2:maxn1);\n\t\tans=min(ans,mst+tmp);\n\t\treturn ;\n\t}\n\tper(i,18,0){\n\t\tif(pa[u][i]!=pa[v][i]){\n\t\t\tif(maxn1^fimx[u][i]) maxn2=max(maxn2,min(maxn1,fimx[u][i]));\n\t\t\tmaxn1=max(maxn1,fimx[u][i]);\n\t\t\tmaxn2=max(maxn2,semx[u][i]);\n\t\t\tif(maxn1^fimx[v][i]) maxn2=max(maxn2,min(maxn1,fimx[v][i]));\n\t\t\tmaxn1=max(maxn1,fimx[v][i]);\n\t\t\tmaxn2=max(maxn2,semx[v][i]);\n\t\t\tv=pa[v][i],u=pa[u][i];\n\t\t}\n\t}\n\tif(maxn1^fimx[u][0]) maxn2=max(maxn2,min(maxn1,fimx[u][0]));\n\tmaxn1=max(maxn1,fimx[u][0]);\n\tmaxn2=max(maxn2,semx[u][0]);\n\tif(maxn1^fimx[v][0]) maxn2=max(maxn2,min(maxn1,fimx[v][0]));\n\tmaxn1=max(maxn1,fimx[v][0]);\n\tmaxn2=max(maxn2,semx[v][0]);\n\tll tmp=w-((w==maxn1)?maxn2:maxn1);\n\tans=min(ans,mst+tmp);\n\treturn ;\n}\nint main(){\n\tcin>>n>>m;\n\trep(i,1,m) scanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n\tkruskal();\n\tdfs(1,0);\n\tinit();\n\trep(i,1,m) \n\t\tif(!e[i].qu){\n\t\t\tquery(e[i].u,e[i].v,e[i].w);\n\t\t}\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1573391037,
        "uid": 27209,
        "name": "hepan",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "**\u7ed9\u5927\u5e38\u6570lct\u9009\u624b\u4e00\u4e2a\u6551\u8d4e\u7684\u673a\u4f1a\u3002**\n\n**\u535a\u5ba2\u5730\u5740\uff1a[\u4f20\u9001\u95e8](https://www.wjyyy.top/3020.html)**\n\n## \u9898\u89e3\uff1a\n\n\u7b2c\u4e00\u773c\u770b\u4e0a\u53bb\u662f\u4e00\u4e2alct\u7ef4\u62a4\u751f\u6210\u6811\u7684\u95ee\u9898\u3002\u7136\u800c\u6ca1\u6709\u52a8\u6001\u52a0\u5220\u8fb9\uff0c\u53ef\u80fd\u662f\u5927\u6750\u5c0f\u7528\u3002\n\n\u4e0d\u8fc7\u7528lct\u76f4\u63a5\u7ef4\u62a4\u751f\u6210\u6811\u4e5f\u6709\u4e00\u5b9a\u7684\u95ee\u9898\u3002\u5982\u679c\u6211\u4eec\u679a\u4e3e\u4e0d\u5728\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff0c\u627e\u73af\u5e76\u5220\u9664\u73af\u4e0a\u8fb9\u6743\u5c0f\u4e8e\u5f53\u524d\u8fb9\u7684\u6743\u503c\u6700\u5927\u7684\u8fb9\uff0c\u4e5f\u8bb8\u5e76\u4e0d\u80fd\u4fdd\u8bc1**\u6700\u5c0f\u751f\u6210\u6811\u4e0e(\u4e25\u683c)\u6b21\u5c0f\u751f\u6210\u6811\u53ea\u76f8\u5dee\u4e00\u5bf9\u8fb9**\u3002\n\n\u5b9e\u9645\u4e0a\u662f\u53ef\u4ee5\u7684\u3002\u6211\u4eec\u7528\u53cd\u8bc1\u6cd5\u7a0d\u5fae\u8003\u8651\u4e00\u4e0b\u6700\u5c0f\u751f\u6210\u6811(MST)\u4e0e(\u4e25\u683c)\u6b21\u5c0f\u751f\u6210\u6811(SST)\u76f8\u5dee\u4e24\u5bf9\u8fb9\u7684\u60c5\u51b5\u3002\n\n\n\n_\u5982\u679cMST\u548cSST\u76f8\u5dee\u4e24\u5bf9\u8fb9\uff0c\u5047\u8bbe\u5206\u522b\u4e3a$\\{a_1,b_1\\},\\{a_2,b_2\\}$\uff0c\u4e5f\u5c31\u662f\u8bf4$\\{a_1,a_2\\}$\u5728MST\u4e0a\uff0c$\\{b_1,b_2\\}$\u5728SST\u4e0a\u3002\u90a3\u4e48\u4e00\u5b9a\u6709_\n$$a_1+a_2<b_1+b_2\\qquad(1)$$\n_\u4f46\u662f\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u53ef\u4ee5\u6709\u591a\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u628a$\\{a_1,a_2\\}$\u5220\u6389\u4e86\uff0c\u8fd8\u8981\u52a0\u56de\u4e24\u6761\u8fb9\uff08\u4e0d\u4e3a\u539f\u6765\u7684\u8fb9\uff09\u4f7f\u5f97\u56fe\u91cd\u65b0\u6784\u6210\u4e00\u68f5\u751f\u6210\u6811\uff0c\u53ef\u4ee5\u6709$\\{a_1,b_1\\},\\{a_1,b_2\\},\\{a_2,b_2\\},\\{a_2,b_1\\},\\{b_1,b_2\\}$\u8fd9\u4e94\u79cd\u60c5\u51b5\u3002\u4f46\u662f\u65e0\u8bba\u5982\u4f55\uff0c$\\{b_1,b_2\\}$\u90fd\u4e0d\u4f1a\u662f\u8fd9\u4e94\u7ec4\u4e2d\u6700\u5c0f\u7684\u3002_\n\n_\u5047\u8bbe$a_1\\le a_2,b_1\\le b_2$\uff0c\u82e5$a_1<b_1$\uff0c\u5219$\\{a_1,b_2\\}$\u4e00\u5b9a\u5728\u6b21\u5c0f\u751f\u6210\u6811\u4e0a\u4e86\u4e86\uff0c\u82e5$a_1\\ge b_1$\uff0c\u7531\u4e0d\u7b49\u5f0f$(1)$\uff0c\u4e00\u5b9a\u6709$a_2<b_2$\uff0c\u90a3\u4e48\u6b64\u65f6$\\{a_2,b_1\\}$\u5c31\u6700\u4f18\u4e86\u3002_\n\n_\u8bc1\u6bd5\u3002_\n\n\n\n\u90a3\u4e48\u6b64\u65f6\u5c31\u8003\u8651\u67e5\u8be2\u4e00\u6761\u94fe\u4e0a\u5c0f\u4e8e$x$\u7684\u6700\u5927\u8fb9\u6743\u6765\u66f4\u65b0\u7b54\u6848\u3002\u56e0\u4e3alct\u662f\u7528splay\u505a\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u7ef4\u62a4\u94fe\u4e0a\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\uff0c\u5927\u81f4\u662f\u8fd9\u6837\u7684\uff1a\n\n```cpp\nvoid maintain(int k)\n{\n    sum[k]=Max(Max(sum[ls],key[k]),sum[rs]);//\u7ef4\u62a4\u6700\u5927\u503c\n    ssum[k]=0;//\u6b21\u5927\u503c\n    ssum[k]=(sum[ls]<sum[k]&&sum[ls]>ssum[k])?sum[ls]:ssum[k];//\u6b21\u5927\u503c\u53ea\u53ef\u80fd\u5728\u8fd9\u56db\u79cd\u4e2d\u51fa\u73b0\n    ssum[k]=(key[k]<sum[k]&&key[k]>ssum[k])?key[k]:ssum[k];\n    ssum[k]=(ssum[ls]<sum[k]&&ssum[ls]>ssum[k])?ssum[ls]:ssum[k];\n    ssum[k]=(ssum[rs]<sum[k]&&ssum[rs]>ssum[k])?ssum[rs]:ssum[k];\n}\n```\n\n\u5e38\u6570\u662f\u539f\u6765\u7684$3$\u500d\u591a\u3002\u8f7b\u800c\u6613\u4e3eTLE\u3002~~\u56e0\u6b64\u5982\u679c\u4e0d\u662f\u8981\u7ec3LCT\u8fd8\u662f\u5efa\u8bae\u5927\u5bb6\u5199\u500d\u589e/\u6811\u5256\u3002~~\n\n\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u51fa\u6765\u8fd9\u6761\u94fe\u7136\u540edfs\u8fd9\u68f5\u5b50splay\uff0c\u5e26\u5165\u53c2\u6570$x$\uff0c\u627e\u5230\u5c0f\u4e8e$x$\u7684\u6700\u5927\u8fb9\u6743\u3002\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u7ef4\u62a4\u4e86\u5b50\u6811\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5**\u526a\u679d**\uff0c\u5bf9\uff0c\u5c31\u662f\u526a\u679d\u3002\u5982\u679c\u5b50\u6811\u6700\u5927\u503c\u5c0f\u4e8e$x$\u4e86\uff0c\u76f4\u63a5\u7528\u6700\u5927\u503c\u66f4\u65b0\u7b54\u6848\u5e76\u8fd4\u56de\uff0c\u5426\u5219\u7ee7\u7eeddfs\u3002\n\n\u8fd9\u79cd\u64cd\u4f5c\u7684\u6700\u574f\u590d\u6742\u5ea6\u662f$O(nm)$\u7684\uff0c\u4e00\u6761\u6784\u9020\u8fc7\u7684\u94fe\u5e94\u8be5\u53ef\u4ee5\u5361\u5f97\u6389\u3002\u4e0d\u8fc7\u6570\u636e\u5f3a\u5ea6\u4e0d\u662f\u5f88\u5927\uff0c\u526a\u679d\u6548\u679c\u6bd4\u8f83\u597d\uff0cO2\u6700\u6162\u7684\u70b9\u4e5f\u53ea\u8dd1\u4e86709ms\u3002\n\n## Code\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define ls ch[0][k]\n#define rs ch[1][k]\n#define which(k) (ch[1][fa[k]]==k)\n#define isroot(k) (ch[0][fa[k]]!=k&&ch[1][fa[k]]!=k)\nint read()\n{\n    char ch=getchar();\n    int x=0;\n    while(ch<'0'||ch>'9')\n        ch=getchar();\n    while(ch>='0'&&ch<='9')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x;\n}\nint Max(int x,int y)\n{\n    return x>y?x:y;\n}\nint ch[2][401000],fa[401000];\nint key[401000],sum[401000],lazy[401000];\nvoid pushdown(int k)\n{\n    if(lazy[k])\n    {\n        lazy[k]=0;\n        int tmp=ls;\n        ls=rs;\n        rs=tmp;\n        lazy[ls]^=1;\n        lazy[rs]^=1;\n    }\n}\nvoid maintain(int k)\n{\n    sum[k]=Max(Max(sum[ls],key[k]),sum[rs]);\n}\nvoid Rotate(int k)\n{\n    int y=fa[k];\n    if(!isroot(y))\n        ch[which(y)][fa[y]]=k;\n    bool d=which(k);\n    fa[k]=fa[y];\n    fa[y]=k;\n    ch[d][y]=ch[!d][k];\n    fa[ch[d][y]]=y;\n    ch[!d][k]=y;\n    maintain(y);\n    maintain(k);\n}\nint stk[401000],tp=0;\nvoid splay(int k)\n{\n    while(!isroot(k))\n    {\n        stk[++tp]=k;\n        k=fa[k];\n    }\n    stk[++tp]=k;\n    int qaq=fa[k];\n    while(tp)\n        pushdown(stk[tp--]);\n    k=stk[1];\n    while(fa[k]!=qaq)\n    {\n        int y=fa[k];\n        if(!isroot(y))\n            Rotate(which(k)^which(y)?k:y);\n        Rotate(k);\n    }\n}\nvoid access(int k)\n{\n    for(register int x=k,y=0;x;y=x,x=fa[x])\n    {\n        splay(x);\n        ch[1][x]=y;\n        maintain(x);\n    }\n}\nvoid makeroot(int k)\n{\n    access(k);\n    splay(k);\n    lazy[k]^=1;\n}\nint getroot(int k)\n{\n    access(k);\n    splay(k);\n    while(ls)\n        k=ls;\n    return k;\n}\nvoid split(int x,int y)\n{\n    makeroot(x);\n    access(y);\n    splay(y);\n}\nvoid link(int x,int y)\n{\n    makeroot(x);\n    fa[x]=y;\n}\nint Find(int k,int x)//\u5728splay\u4e2d\u627e\u5c0f\u4e8ex\u7684\u6700\u5927\u503c\n{\n    int tmp=0;\n    if(key[k]<x)//\u5148\u6bd4\u8f83\u5f53\u524d\u8282\u70b9\n        tmp=key[k];\n    if(sum[ls]<x)//\u51b3\u7b56\u8fdb\u4e0d\u8fdb\u5165\u5de6\u513f\u5b50\n        tmp=tmp>sum[ls]?tmp:sum[ls];\n    else\n    {\n        int y=Find(ls,x);\n        tmp=tmp>y?tmp:y;\n    }\n    if(sum[rs]<x)//\u53f3\u513f\u5b50\n        tmp=tmp>sum[rs]?tmp:sum[rs];\n    else\n    {\n        int y=Find(rs,x);\n        tmp=tmp>y?tmp:y;\n    }\n    return tmp;\n}\nstruct edge\n{\n    int x,y,w;\n    friend bool operator <(edge a,edge b)\n    {\n        return a.w<b.w;\n    }\n}e[300100];\nbool used[300100];\nint main()\n{\n    int n,m;\n    long long Sum=0,ans=1e18;\n    n=read();\n    m=read();\n    for(int i=1;i<=m;++i)\n    {\n        e[i].x=read();\n        e[i].y=read();\n        e[i].w=read();\n    }\n    std::sort(e+1,e+1+m);\n    for(int i=1;i<=m;++i)\n    {\n        key[n+i]=sum[n+i]=e[i].w;\n        makeroot(e[i].x);\n        if(getroot(e[i].y)!=e[i].x)\n        {\n            used[i]=1;\n            link(e[i].x,n+i);\n            link(e[i].y,n+i);\n            Sum+=e[i].w;\n        }\n    }\n    for(int i=1;i<=m;++i)\n        if(!used[i])\n        {\n            split(e[i].x,e[i].y);\n            int t=Find(e[i].y,e[i].w);//\u4e0d\u8d85\u8fc7e[i].w\n            ans=ans<Sum+key[n+i]-t?ans:Sum+key[n+i]-t;\n        }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1546863134,
        "uid": 63539,
        "name": "wjyyy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "\u6c42\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u9996\u5148\u6211\u4eec\u8981\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\n\n\u7136\u540e\uff0c\u6211\u4eec\u663e\u7136\u8981\u62ff\u6ca1\u88ab\u9009\u4e2d\u7684\u8fb9\u6765\u66ff\u6362\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u8fb9\u3002\n\n\u5f53\u6211\u4eec\u628a\u4e00\u6761\u8fb9\u52a0\u8fdb\u53bb\u7684\u65f6\u5019\uff0c\u5fc5\u7136\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u90a3\u4e48\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u53ea\u7528\u627e\u51fa\u73af\u4e0a\u9664\u65b0\u52a0\u8fb9\u7684\u4e14\u4e0d\u4e0e\u65b0\u52a0\u76f8\u7b49\u8fb9\u6700\u5927\u8fb9\uff0c\u5dee\u503c\u5c31\u662f\u52a0\u8fd9\u6761\u8fb9\u7684\u6700\u5c0f\u589e\u52a0\u91cf\u3002\u7136\u540e\u6240\u6709\u6700\u5c0f\u589e\u52a0\u91cf\u518d\u52a0\u4e0a\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u503c\uff0c\u5c31\u662f\u7b54\u6848\u4e86\u3002\n\n\u540c\u7406\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fd9\u6837\u6c42\u7b2c\u4e09\u5c0f\u751f\u6210\u6811\uff0c\u800c\u518d\u5c0f\u7684\u8bdd\u5c31\u4e0d\u884c\u4e86\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u66ff\u6362\u4e24\u6761\u8fb9\u8981\u6bd4\u66ff\u6362\u4e00\u6761\u8fb9\u8981\u5c0f\u3002\u800c\u6c42\u7b2c\u4e09\u5c0f\u7684\u8bdd\u662f\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\uff0c\u539f\u56e0\u5982\u4e0b\uff1a\u5047\u8bbe\u66ff\u6362a\u589e\u52a0\u91cf\u6700\u5c0f\uff0cb\u6b21\u5c0f\uff0cc\u6700\u5927\uff0c\u663e\u7136a<b<a+b,\u800ca+b\u662f\u5426\u5c0f\u4e8ec\u662f\u4e0d\u80fd\u786e\u5b9a\u7684\u3002\n\n\u7136\u540e\u600e\u4e48\u627e\u51fa\u73af\u4e0a\u9664\u65b0\u52a0\u8fb9\u7684\u4e14\u4e0d\u4e0e\u65b0\u52a0\u76f8\u7b49\u8fb9\u6700\u5927\u8fb9\u5462\uff1f\u5bf9\u4e8e\u8fb9(u,v)\u6211\u4eec\u627e\u51fau,v\u7684LCA\uff1al\uff0c\u7136\u540e\u7528\u500d\u589e\u5904\u7406u->l,v->l\u4e24\u6761\u8def\u5f84\uff0c\u5373\u53ef\u3002\u4f46\u7531\u4e8e\u53ef\u80fd\u51fa\u73b0\u6700\u5927\u503c\u548c\u65b0\u52a0\u8fb9\u7684\u6743\u503c\u76f8\u7b49\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u9884\u5904\u7406\u6b21\u5927\u8fb9\uff0c\u5982\u4e0b\uff1a\n\n\u9884\u5904\u7406\uff1af\u4e0d\u591a\u8bf4\uff0cv1\u4e3aj\u500d\u589e\u5904\u7406\u51fa\u7684\u6700\u5927\u503c\uff0cv2\u5c31\u662f\u6b21\u5927\u503c\u3002\n\n```cpp\nfor(int i=1;i<=21;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tf[i][j]=f[i-1][f[i-1][j]];\n\t\t\tv1[i][j]=max(v1[i-1][j],v1[i-1][f[i-1][j]]);\n\t\t\tv2[i][j]=max(v2[i-1][j],v2[i-1][f[i-1][j]]);\n\t\t\tif(v1[i-1][j]>v1[i-1][f[i-1][j]]) v2[i][j]=max(v2[i][j],v1[i-1][f[i-1][j]]);\n            else if(v1[i-1][j]<v1[i-1][f[i-1][j]]) v2[i][j]=max(v2[i][j],v1[i-1][j]);\n\t\t}\n```\n\n\u5bf9\u4e8e\u4e00\u6761\u73af\u7684\u5904\u7406\uff1a\n```\nint get(int u,int v,int k)\n{\n\tint res=-INF; \n\tfor(int i=20;i>=0;i--)\n\t\tif(dep[f[i][u]]>=dep[v])\n\t\t{\n\t\t\tif(k!=v1[i][u]) res=max(res,v1[i][u]);//\u4e0d\u4e00\u6837\u5c31\u548c\u6700\u5927\u7684\u53d6max\n            else res=max(res,v2[i][u]);//\u5426\u5219\u548c\u6b21\u5927\u7684\u53d6max\n            u=f[i][u];\n\t\t}\n\treturn res;\n}\n\n\nfor(int i=1;i<=m;i++)\n\t\tif(!e[i].in)\n\t\t{\n\t\t\tint l=Lca(e[i].x,e[i].y);\n\t\t\tint res=max(get(e[i].x,l,e[i].z),get(e[i].y,l,e[i].z));\n\t\t\tans=min(ans,e[i].z-res);\n\t\t}\n```\n\nOK\uff0c\u5168\u90e8\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define int long long\nusing namespace std;\nconst long long INF=214748364700000;\nint n,m,sum=0,cnt=0;\nint fa[100100],f[30][100100],dep[100100],v1[30][100100],v2[30][100100];\nint head[200100],nxt[200100],to[200100],val[200100];\nstruct Edge\n{\n\tint x,y,z,in;\n}e[300100];\nbool cmp(Edge a,Edge b) {return a.z<b.z;}\nint find(int x)\n{\n\tif(fa[x]==x) return x;\n\treturn fa[x]=find(fa[x]);\n}\nvoid addedge(int x,int y,int z)\n{\n\tcnt++;\n\tnxt[cnt]=head[x];\n\thead[x]=cnt;\n\tto[cnt]=y;\n\tval[cnt]=z;\n}\nvoid dfs(int u,int pre)\n{\n\tfor(int i=head[u];i!=-1;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(v==pre) continue;\n\t\tdep[v]=dep[u]+1,f[0][v]=u;\n\t\tv1[0][v]=val[i],v2[0][v]=-INF;\n\t\tdfs(v,u);\n\t}\n}\nint Lca(int x,int y)\n{\n\tif(dep[x]<dep[y]) swap(x,y);\n\tfor(int i=20;i>=0;i--)\n\t\tif(dep[f[i][x]]>=dep[y]) x=f[i][x];\n\tif(x==y) return x;\n\tfor(int i=20;i>=0;i--)\n\t\tif(f[i][x]!=f[i][y]) x=f[i][x],y=f[i][y];\n\treturn f[0][x];\n}\nint get(int u,int v,int k)\n{\n\tint res=-INF; \n\tfor(int i=20;i>=0;i--)\n\t\tif(dep[f[i][u]]>=dep[v])\n\t\t{\n\t\t\tif(k!=v1[i][u]) res=max(res,v1[i][u]);\n            else res=max(res,v2[i][u]);\n            u=f[i][u];\n\t\t}\n\treturn res;\n}\nsigned main()\n{\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%lld%lld%lld\",&e[i].x,&e[i].y,&e[i].z);\n\tsort(e+1,e+m+1,cmp);\n\tfor(int i=1;i<=n;i++)\n\t\tfa[i]=i;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(cnt==2*n-2) break;\n\t\tint fx=find(e[i].x),fy=find(e[i].y);\n\t\tif(fx!=fy)\n\t\t{\n\t\t\tfa[fx]=fy;\n\t\t\tsum+=e[i].z;\n\t\t\te[i].in=1;\n\t\t\taddedge(e[i].x,e[i].y,e[i].z);\n\t\t\taddedge(e[i].y,e[i].x,e[i].z);\n\t\t}\n\t}\n\tdep[1]=1;dfs(1,0);\n\tfor(int i=1;i<=21;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tf[i][j]=f[i-1][f[i-1][j]];\n\t\t\tv1[i][j]=max(v1[i-1][j],v1[i-1][f[i-1][j]]);\n\t\t\tv2[i][j]=max(v2[i-1][j],v2[i-1][f[i-1][j]]);\n\t\t\tif(v1[i-1][j]>v1[i-1][f[i-1][j]]) v2[i][j]=max(v2[i][j],v1[i-1][f[i-1][j]]);\n            else if(v1[i-1][j]<v1[i-1][f[i-1][j]]) v2[i][j]=max(v2[i][j],v1[i-1][j]);\n\t\t}\n\tint ans=INF;\n\tfor(int i=1;i<=m;i++)\n\t\tif(!e[i].in)\n\t\t{\n\t\t\tint l=Lca(e[i].x,e[i].y);\n\t\t\tint res=max(get(e[i].x,l,e[i].z),get(e[i].y,l,e[i].z));\n\t\t\tans=min(ans,e[i].z-res);\n\t\t}\n\tprintf(\"%lld\",ans+sum);\n\treturn 0;\n}\n```",
        "postTime": 1540885886,
        "uid": 21874,
        "name": "hicc0305",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "\u849f\u84bb\u7684\u5e7f\u544a\uff1ahttp://www.neptuuz.com/wordpress/?p=296\n\n\u601d\u8def\u4e0a\u9762\u7684dalao\u4eec\u90fd\u5df2\u7ecf\u8bb2\u7684\u975e\u5e38\u6e05\u695a\u4e86\uff0c\u4e0d\u8fc7\u597d\u50cf\u6ca1\u6709\u4eba\u7528\u6811\u5256\u505a\uff1f\u90a3\u8fd9\u91cc\u5c31\u53d1\u4e00\u4e0b\u6811\u5256\u7684\u9898\u89e3\u597d\u4e86\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5927\u503cm1\u548c\u4e25\u683c\u6b21\u5927\u503cm2\n\u6c42\u6700\u5927\u503c\u76f4\u63a5\u4e24\u4e2a\u6700\u5927\u503c\u6bd4\u8f83\u5373\u53ef\n\u6c42\u4e25\u683c\u6b21\u5927\u503c\u8981l.m1, l.m2, r.m1, r.m2\u4e00\u8d77\u6bd4\u8f83\u624d\u53ef\n\u8981\u6ce8\u610f\u5148\u66f4\u65b0m2\u624d\u80fd\u66f4\u65b0m1\n\n\u4e0d\u8fc7\u4f1a\u88ab\u5361\u5e38\uff0c\u5f00\u4e2aO2\u5c31\u7a33\u8fc7\u4e86\u3001\u3001\u3001\nCode:\n```cpp\n#include<stdio.h>\n#include<algorithm>\n#include<iostream>\n#include<string.h>\n#define MAXN 100010\n#define MAXM 300010\n#define pos(l, r) ((l+r) | (l != r))\nusing namespace std;\n\nstruct Edge {\n\tint u, v, w, f, next;\n\tbool operator < (const Edge &A) const { return w < A.w;\t}\n} e[MAXM*2];\n\nstruct node {\n\tint m1, m2;\n} t[MAXN*2];\n\nint n, m, h[MAXN], dep[MAXN], son[MAXN], w[MAXN], tot, fa[MAXN], par[MAXN], cnt, id[MAXN], top[MAXN], a[MAXN], TOT;\nlong long MST, secMST = 1e15;\ninline int max(int a, int b) {\n\treturn a > b ? a : b;\n}\ninline int secmax(int a, int b, int c, int d) {\n\tint tmp[4] = {a, b, c, d};\n\tsort(tmp, tmp+4);\n\tfor (int i = 2; i >= 0; --i) {\n\t\tif (tmp[i] != tmp[i+1]) return tmp[i];\n\t}\n}\n\nvoid addEdge(int ui, int vi, int wi, int fi) {\n\te[++tot] = (Edge) {ui, vi, wi, fi, h[ui]};\n\th[ui] = tot;\n}\n\nint find(int x) {\n\treturn fa[x] == x ? x : fa[x] = find(fa[x]);\n}\n\nvoid dfs(int u) {\n\tw[u] = 1;\n\tfor (int i = h[u]; i; i = e[i].next) {\n\t\tif (!w[e[i].v]) {\n\t\t\tdep[e[i].v] = dep[u]+1;\n\t\t\tpar[e[i].v] = u;\n\t\t\ta[e[i].v] = e[i].w;\n\t\t\tdfs(e[i].v);\n\t\t\tw[u] += w[e[i].v];\n\t\t\tif (w[son[u]] < w[e[i].v]) son[u] = e[i].v;\n\t\t}\n\t}\n}\n\nvoid init(int u, int p) {\n\tid[u] = ++cnt;\n\ttop[u] = p;\n\tif (son[u]) init(son[u], p);\n\tfor (int i = h[u]; i; i = e[i].next) {\n\t\tif (!top[e[i].v]) init(e[i].v, e[i].v);\n\t}\n}\n\nvoid modify(int l, int r, int x, int d, int p) {\n\tif (l == r) {\n\t\tt[p].m1 = d;\n\t\tt[p].m2 = 0;\n\t} else {\n\t\tint mid = (l+r)>>1, lc = pos(l, mid), rc = pos(mid+1, r);\n\t\tif (x <= mid) modify(l, mid, x, d, lc);\n\t\telse modify(mid+1, r, x, d, rc);\n\t\tt[p].m2 = secmax(t[lc].m1, t[lc].m2, t[rc].m1, t[rc].m2);\n\t\tt[p].m1 = max(t[lc].m1, t[rc].m1);\n\t}\n}\n\nnode query(int l, int r, int x, int y, int p) {\n\tif (x <= l && r <= y) return t[p];\n\tint mid = (l+r)>>1, lc = pos(l, mid), rc = pos(mid+1, r);\n\tif (x <= mid && y > mid) {\n\t\tnode t1 = query(l, mid, x, y, lc), t2 = query(mid+1, r, x, y, rc);\n\t\treturn (node) {max(t1.m1, t2.m1), secmax(t1.m1, t1.m2, t2.m1, t2.m2)};\n\t} else if (x <= mid) return query(l, mid, x, y, lc);\n\telse return query(mid+1, r, x, y, rc);\n}\n\nnode solve(int u, int v) {\n\tint pu = top[u], pv = top[v];\n\tnode res = (node) {0, 0};\n\twhile (pu != pv) {\n\t\tif (dep[pu] < dep[pv]) {\n\t\t\tswap(pu, pv);\n\t\t\tswap(u, v);\n\t\t}\n\t\tnode tmp = query(1, n, id[pu], id[u], pos(1, n));\n\t\tres.m2 = secmax(res.m1, res.m2, tmp.m1, tmp.m2);\n\t\tres.m1 = max(res.m1, tmp.m1);\n\t\tu = par[pu];\n\t\tpu = top[u];\n\t}\n\tif (u == v) return res;\n\tif (dep[u] < dep[v]) swap(u, v);\n\tnode tmp = query(1, n, id[v]+1, id[u], pos(1, n));\n\tres.m2 = secmax(res.m1, res.m2, tmp.m1, tmp.m2);\n\tres.m1 = max(res.m1, tmp.m1);\n\treturn res;\n}\n\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1, ui, vi, wi; i <= m; ++i) {\n\t\tscanf(\"%d%d%d\", &ui, &vi, &wi);\n\t\taddEdge(ui, vi, wi, 0);\n\t}\n\tsort(e+1, e+tot+1);\n\tTOT = tot;\n\tmemset(h, 0, sizeof(h));\n\tfor (int i = 1; i <= n; ++i) fa[i] = i;\n\tfor (int i = 1, k; i <= TOT; ++i) {\n\t\tint ux = find(e[i].u), uy = find(e[i].v);\n\t\tif (ux != uy) {\n\t\t\tfa[ux] = uy;\n\t\t\tMST += e[i].w;\n\t\t\te[i].f = 1;\n\t\t\te[i].next = h[e[i].u];\n\t\t\th[e[i].u] = i;\n\t\t\taddEdge(e[i].v, e[i].u, e[i].w, 1);\n\t\t\tk++;\n\t\t}\n\t\tif (k == n-1) break;\n\t}\n\tdfs(1);\n\tinit(1, 1);\n\tfor (int i = 1; i <= n; ++i) modify(1, n, id[i], a[i], pos(1, n));\n\tfor (int i = 1; i <= TOT; ++i) {\n\t\tif (!e[i].f) {\n\t\t\tnode cross = solve(e[i].u, e[i].v);\n\t\t\tlong long tmp = MST+e[i].w-(cross.m1 == e[i].w ? cross.m2 : cross.m1);\n\t\t\tif (tmp > MST && tmp < secMST) secMST = tmp;\n\t\t}\n\t}\n\tprintf(\"%lld\\n\", secMST);\n\treturn 0;\n}\n```",
        "postTime": 1523836774,
        "uid": 2008,
        "name": "AmamiyaUmi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "\u6811\u4e0a\u7684\u8def\u5f84\u600e\u4e48\u80fd\u6ca1\u6709\u6811\u5256\n\n\u663e\u7136\uff0c**\u6b21\u5c0f\u751f\u6210\u6811\u548c\u6700\u5c0f\u751f\u6210\u6811\u53ea\u5728\u4e00\u6761\u8fb9\u4e0a\u6709\u5dee\u8ddd**\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u679a\u4e3e\u8fd9\u4e00\u6761\u8fb9\uff0c\u5c06\u6240\u6709\u8fb9\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4e4b\u540e\u518d\u6765\u4ece\u8fd9\u4e9b\u5e76\u4e0d\u662f\u90a3\u4e48\u5c0f\u7684\u751f\u6210\u6811\u4e2d\u627e\u5230\u90a3\u4e2a\u6700\u5c0f\u7684\n\n\u6211\u4eec\u5f80\u6700\u5c0f\u751f\u6210\u6811\u91cc\u52a0\u5165\u4e00\u6761\u8fb9\u4e00\u5b9a\u4f1a\u5728\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\u5f62\u6210\u4e00\u4e2a\u73af\uff0c**\u4e3a\u4e86\u8ba9\u7ef4\u6301\u6811\u7684\u7ed3\u6784\uff0c\u6211\u4eec\u8981\u65ad\u5f00\u73af\u4e0a\u7684\u4e00\u6761\u8fb9\uff0c\u800c\u4e3a\u4e86\u8ba9\u5f97\u5230\u7684\u65b0\u751f\u6210\u6811\u5c3d\u91cf\u5c0f\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u9009\u62e9\u6700\u5927\u7684\u4e00\u6761\u8fb9\u65ad\u5f00\uff0c\u4f46\u662f\u4e3a\u4e86\u4fdd\u8bc1\u4e25\u683c\u6b21\u5c0f\uff0c\u5728\u8fd9\u6761\u8fb9\u548c\u6700\u5927\u8fb9\u957f\u5ea6\u76f8\u540c\u65f6\uff0c\u65ad\u5f00\u4e00\u6761\u4e25\u683c\u6b21\u5927\u7684\u8fb9**\n\n\u800c\u4ece\u6811\u4e0a\u627e\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8fb9\u548c\u4e25\u683c\u6b21\u5927\u8fb9\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u4e0a\u6811\u5256\n\n\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u51fa\u6bcf\u4e00\u4e2a\u5230\u5176\u6240\u5728\u91cd\u94fe\u9876\u7aef\u7684\u6700\u5927\u8fb9\u548c\u4e25\u683c\u6b21\u5927\u8fb9\uff0c\u4e4b\u540e\u76f4\u63a5\u500d\u589e\u5f80\u4e0a\u8df3\u5c31\u53ef\u4ee5\u4e86\n\n\u76f4\u5230\u8df3\u5230\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u529e\u6cd5\u5728\u50cf\u4e4b\u524d\u90a3\u6837\u505a\u4e86\uff0c\u4e8e\u662f\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u6765\u67e5\u8be2\n\n\u5355\u6b21\u505a\u7684\u590d\u6742\u5ea6\u8fd8\u662f$O(logn)$\n\n\u4f46\u662f\u6811\u5256\u662f\u51fa\u4e86\u540d\u7684\u5c0f\u5e38\u6570\uff0c\u5e38\u6570\u5927\u7684\u7ebf\u6bb5\u6811\u4e5f\u53ea\u505a\u4e86\u4e00\u6b21\u67e5\u8be2\uff0c\u4e8e\u662f\u6548\u7387\u975e\u5e38\u559c\u4eba\uff0c\u5728\u6211\u4eba\u50bb\u5e38\u6570\u5927\u7684\u60c5\u51b5\u4e0b\u4f9d\u65e7\u8dd1\u5230\u4e86\u6700\u4f18\u89e3\u7b2c\u4e8c\n\n\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<bitset>\n#define mp std::make_pair\n#define re register\n#define LL long long\n#define maxn 100005\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\n#define k1 first\n#define k2 second\ntypedef std::pair<int,int> pii;\nstruct node\n{\n\tint v,nxt,w;\n}e[maxn<<1],a[maxn*3];\nstd::bitset<maxn*3> ff;\nint l[maxn<<2],r[maxn<<2],t1[maxn<<2],t2[maxn<<2];\nint head[maxn],deep[maxn],fa[maxn],tot[maxn],to[maxn],b[maxn];\nint top[maxn],f[maxn],son[maxn],sum[maxn],d1[maxn],d2[maxn],pre[maxn];\nint n,m,num,_;\nLL cnt;\nvoid dfs1(int r)\n{\n\tsum[r]=1;\n\tint maxx=-1;\n\tfor(re int i=head[r];i;i=e[i].nxt)\n\tif(!deep[e[i].v])\n\t{\n\t\tdeep[e[i].v]=deep[r]+1;\n\t\tpre[e[i].v]=pre[r]+e[i].w;\n\t\tf[e[i].v]=r;\n\t\tdfs1(e[i].v);\n\t\tsum[r]+=sum[e[i].v];\n\t\tif(sum[e[i].v]>maxx) maxx=sum[e[i].v],son[r]=e[i].v;\n\t}\n}\nvoid dfs2(int r,int topf)\n{\n\ttop[r]=topf;\n\tto[r]=++_;\n\tb[_]=pre[r]-pre[f[r]];\n\tif(r!=topf)\n\t{\n\t\tif(pre[r]-pre[f[r]]>d1[f[r]]) d2[r]=d1[f[r]];\n\t\t\telse if(pre[r]-pre[f[r]]<d1[f[r]]) d2[r]=max(d2[r],pre[r]-pre[f[r]]);\n\t\t\t\telse d2[r]=d2[f[r]];\n\t\td1[r]=max(d1[f[r]],pre[r]-pre[f[r]]);\n\t}\n\tif(!son[r]) return;\n\tdfs2(son[r],topf);\n\tfor(re int i=head[r];i;i=e[i].nxt)\n\tif(deep[e[i].v]>deep[r]&&son[r]!=e[i].v) d1[e[i].v]=-99,d2[e[i].v]=-100,dfs2(e[i].v,e[i].v);\n}\ninline int find(int x)\n{\n\tif(fa[x]==x) return x;\n\treturn fa[x]=find(fa[x]);\n}\ninline int read()\n{\n\tchar c=getchar();\n\tint x=0;\n\twhile(c<'0'||c>'9') c=getchar();\n\twhile(c>='0'&&c<='9')\n\t\tx=(x<<3)+(x<<1)+c-48,c=getchar();\n\treturn x;\n}\ninline void add_edge(int x,int y,int z)\n{\n\te[++num].v=y;\n\te[num].w=z;\n\te[num].nxt=head[x];\n\thead[x]=num;\n}\ninline int cmp(node K,node M)\n{\n\treturn K.w<M.w;\n}\ninline void swap(int &a,int &b) {a^=b,b^=a,a^=b;}\nvoid build(int x,int y,int i)\n{\n\tl[i]=x;r[i]=y;\n\tif(x==y)\n\t{\n\t\tt1[i]=b[x];\n\t\treturn;\n\t}\n\tint mid=x+y>>1;\n\tbuild(x,mid,i<<1),build(mid+1,y,i<<1|1);\n\tt1[i]=max(t1[i<<1|1],t1[i<<1]);\n\tif(t1[i<<1|1]>t1[i<<1]) t2[i]=max(t2[i<<1|1],t1[i<<1]);\n\t\telse if(t1[i<<1]>t1[i<<1|1]) t2[i]=max(t2[i<<1],t1[i<<1|1]);\n\t\t\telse t2[i]=max(t2[i<<1|1],t2[i<<1]);\n}\npii query(int x,int y,int i)\n{\n\tif(x<=l[i]&&y>=r[i]) return mp(t1[i],t2[i]);\n\tint mid=l[i]+r[i]>>1;\n\tif(y<=mid) return query(x,y,i<<1);\n\tif(x>mid) return query(x,y,i<<1|1);\n\tpii lson=query(x,y,i<<1),rson=query(x,y,i<<1|1);\n\tpii now;\n\tnow.k1=max(lson.k1,rson.k1);\n\tif(lson.k1>rson.k1) now.k2=max(lson.k2,rson.k1);\n\t\telse if(lson.k1<rson.k1) now.k2=max(lson.k1,rson.k2);\n\t\t\telse now.k2=max(rson.k2,lson.k2);\n\treturn now;\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(re int i=1;i<=m;++i)\n\t\ta[i].v=read(),a[i].nxt=read(),a[i].w=read();\n\tstd::sort(a+1,a+m+1,cmp);\n\tfor(re int i=1;i<=n;++i) fa[i]=i,tot[i]=1;\n\tint K=0;\n\tfor(re int i=1;i<=m;++i)\n\t{\n\t\tint xx=find(a[i].v);\n\t\tint yy=find(a[i].nxt);\n\t\tif(xx!=yy)\n\t\t{\n\t\t\tK++;\n\t\t\tff[i]=1;\n\t\t\tadd_edge(a[i].v,a[i].nxt,a[i].w);\n\t\t\tadd_edge(a[i].nxt,a[i].v,a[i].w);\n\t\t\tif(tot[xx]>tot[yy]) fa[yy]=xx,tot[xx]+=tot[yy];\n\t\t\telse fa[xx]=yy,tot[yy]+=tot[xx];\n\t\t\tcnt+=a[i].w;\n\t\t}\n\t\tif(K==n-1) break;\n\t}\n\tdeep[1]=1;\n\tdfs1(1);\n\td1[1]=-99,d2[1]=-100;\n\tdfs2(1,1);\n\tbuild(1,n,1);\n\tLL ans=9999999999999999;\n\tfor(re int i=m;i;--i)\n\tif(!ff[i])\n\t{\n\t\tint m1=0,m2=-1;\n\t\tint x=a[i].v;\n\t\tint y=a[i].nxt;\n\t\twhile(top[x]!=top[y])\n\t\t{\n\t\t\tif(deep[top[x]]<deep[top[y]]) swap(x,y);\n\t\t\tif(d1[x]<m1) m2=max(m2,d1[x]);\n\t\t\t\telse if(d1[x]>m1) m2=m1;\n\t\t\t\t\telse m2=max(m2,d2[x]);\n\t\t\tm1=max(m1,d1[x]);\n\t\t\tif(pre[x]-pre[f[x]]<m1) m2=max(m2,pre[x]-pre[f[x]]);\n\t\t\t\telse if(pre[x]-pre[f[x]]>m1) m2=m1;\n\t\t\tm1=max(m1,pre[x]-pre[f[x]]);\n\t\t\tx=f[top[x]];\n\t\t}\n\t\tif(x!=y)\n\t\t{\n\t\t\tif(deep[x]>deep[y]) swap(x,y);\n\t\t\tpii now=query(to[x]+1,to[y],1);\n\t\t\tif(now.k1>m1) m2=m1;\n\t\t\t\telse if(now.k1<m1) m2=max(m2,now.k1);\n\t\t\t\t\telse m2=max(m2,now.k2);\n\t\t\tm1=max(m1,now.k1);\n\t\t}\n\t\tif(a[i].w<m1) continue;\n\t\tif(a[i].w>m1) ans=min(ans,cnt+a[i].w-m1);\n\t\tif(a[i].w==m1&&m2) ans=min(ans,cnt+a[i].w-m2);\n\t}\n\tstd::cout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1537962634,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "\u770b\u5230\u5199LCT\u7684\u4eba\u6bd4\u8f83\u5c11\u554a\u2026\u2026\u5c31\u6765\u4e00\u6ce2LCT\u5427\n\nLCT\u5341\u5206\u64c5\u957f\u89e3\u51b3\u6811\u7684\u52a8\u6001\u52a0\u8fb9\u3001\u5220\u8fb9\u95ee\u9898\u4ee5\u53ca\u4e0e\u751f\u6210\u6811\u6709\u5173\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u6b64\u9898\u3002\n\n\u73b0\u5728\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u6c42\u51fa\u4e86\u4e00\u5f20\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u8c03\u6574\u624d\u80fd\u6c42\u51fa\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u5462\uff1f\n\n\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u68f5\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u8fd9\u68f5\u6b21\u5c0f\u751f\u6210\u6811\u4e0e\u6700\u5c0f\u751f\u6210\u6811\u53ea\u6709\u4e00\u6761\u8fb9\u7684\u5dee\u522b\u3002~~\uff08\u81f3\u4e8e\u548b\u6ce8\u610f\u5230\u7684\u672c\u849f\u84bb\u4e5f\u4e0d\u4f1a\uff09~~\n\n\u6240\u4ee5\uff0c\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e00\u6761\u4e0d\u5728\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff0c\u6765\u5c1d\u8bd5\u5c06\u8fd9\u6761\u8fb9\u52a0\u5165\u751f\u6210\u6811\u3002\u7531\u4e8e\u6b64\u65f6\u751f\u6210\u6811\u7684\u5f62\u6001\u5df2\u7ecf\u5b8c\u6574\uff0c\u518d\u52a0\u5165\u4e00\u6761\u8fb9\u540e\uff0c\u6811\u4e0a\u5fc5\u5b9a\u4f1a\u5f62\u6210\u73af\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5c1d\u8bd5\u7528\u8fd9\u6761\u65b0\u8fb9$e_{now}$\u66ff\u6362\u8fd9\u4e24\u70b9\u95f4\u8def\u5f84\u4e0a\u8fb9\u6743\u6700\u5927\u7684\u4e00\u6761\u8fb9$e_{max}$\uff08\u56e0\u4e3a\u539f\u6811\u5df2\u7ecf\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6240\u4ee5\u4e00\u5b9a\u6709$v[e_{now}]\\geq v[e_{max}]$\uff09\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u7531\u4e8e\u53ef\u80fd\u5b58\u5728$v[e_{now}]= v[e_{max}]$\u7684\u60c5\u51b5\uff0c\u800c\u672c\u9898\u8981\u6c42\u7684\u662f\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u56e0\u6b64\u5f53\u8fd9\u79cd\u60c5\u51b5\u51fa\u73b0\u65f6\uff0c\u6211\u4eec\u5e94\u8be5\u66ff\u6362\u7684\u4e0d\u662f$e_{max}$\u800c\u662f\u8def\u5f84\u4e0a\u8fb9\u6743\u4e25\u683c\u6b21\u5c0f\u7684\u8fb9$e_{max2}$\u3002\u6bcf\u6b21\u5c1d\u8bd5\u540e\u6c42\u51fa\u6743\u503c\uff0c\u6700\u540e\u53d6\u6240\u6709\u66ff\u6362\u65b9\u6848\u6743\u503c\u7684\u6700\u5c0f\u503c\u5373\u4e3a\u7b54\u6848\u3002\n\n\u5230\u8fd9\u91cc\uff0c\u5b9e\u73b0\u65b9\u6cd5\u5df2\u7ecf\u5f88\u6e05\u695a\u4e86\u3002\u7528\u4e00\u68f5LCT\u7ef4\u62a4\u5b50\u6811\u7684\u6700\u5927\u503c\u548c\u4e25\u683c\u6b21\u5927\u503c\u7684\u8282\u70b9\u7f16\u53f7$mx$\u53ca$mx2$\uff0c\u5148\u5bf9\u6240\u6709\u8fb9\u6309\u6743\u503c\u6392\u5e8f\uff0c\u6c42\u51faMST\u53ca\u5176\u6743\u503c$ans$\u540e\uff0c\u679a\u4e3e\u6bcf\u4e00\u6761\u975eMST\u8fb9\uff0c\u6bcf\u6b21\u6267\u884c$split(e[i].u,e[i].v)$\uff0c\u90a3\u4e48\u5f53\u524d\u66ff\u6362\u540e\u7684\u7b54\u6848\u5c31\u662f$ans-v[mx[e[i].v]]+e[i].w$\u6216$ans-v[mx2[e[i].v]]+e[i].w$\u3002\u66f4\u65b0\u7b54\u6848\u65f6\u53d6$\\min$\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff0c\u5982\u4f55\u7ef4\u62a4\u4e25\u683c\u6b21\u5927\u503c\uff1f\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9$x$\uff0c\u8bbe\u5176\u5de6\u53f3\u5b50\u8282\u70b9$ls$\u548c$rs$\uff0c\u90a3\u4e48\u80fd\u6210\u4e3a$mx2[x]$\u7684\u70b9\u5c31\u53ea\u6709\u4e94\u79cd\u53ef\u80fd:$x,mx[ls],mx[rs],mx2[ls],mx2[rs]$\u3002\u9010\u4e2a\u5224\u65ad\u5373\u53ef\u3002\n\n$update$\u4ee3\u7801\uff1a\n```cpp\nvoid update(int x)\n{\n\tmx[x]=x;\n\tif(son[0][x]&&v[mx[son[0][x]]]>v[mx[x]])mx2[x]=mx[x],mx[x]=mx[son[0][x]];\n\telse if(son[0][x]&&v[mx[son[0][x]]]>v[mx2[x]]&&v[mx[son[0][x]]]<v[mx[x]])mx2[x]=mx[son[0][x]];\n\tif(son[0][x]&&v[mx2[son[0][x]]]>v[mx2[x]]&&v[mx2[son[0][x]]]<v[mx[x]])mx2[x]=mx2[son[0][x]];\n\tif(son[1][x]&&v[mx[son[1][x]]]>v[mx[x]])mx2[x]=mx[x],mx[x]=mx[son[1][x]];\n\telse if(son[1][x]&&v[mx[son[1][x]]]>v[mx2[x]]&&v[mx[son[1][x]]]<v[mx[x]])mx2[x]=mx[son[1][x]];\n\tif(son[1][x]&&v[mx2[son[1][x]]]>v[mx2[x]]&&v[mx2[son[1][x]]]<v[mx[x]])mx2[x]=mx2[son[1][x]];\n}\n```\n\uff08\u8fd9\u91cc\u611f\u89c9\u6709\u4e9b\u7e41\u7410\uff0c\u5982\u679c\u6709\u5927\u4f6c\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u6b22\u8fce\u63d0\u51fa\uff09\n\n\u53e6\u5916\u8fd8\u6709\u4e00\u4e2a\u5e38\u6570\u4f18\u5316\u3002\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u5148\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u540e\u518d\u679a\u4e3e\u66ff\u6362\u7684\u8fb9\uff0c\u800c\u53ef\u4ee5\u76f4\u63a5\u626b\u4e00\u904d\u6240\u6709\u7684\u8fb9\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u70b9\u7684\u8fde\u901a\u6027\u3002\u82e5\u4e24\u70b9\u4e0d\u8fde\u901a\uff0c\u5c31\u76f4\u63a5$link$\u5e76\u4e14\u5c06\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c$ans++$\uff1b\u82e5\u4e24\u70b9\u5df2\u8fde\u901a\uff0c\u5219\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u5c1d\u8bd5\u66ff\u6362\u5e76\u66f4\u65b0\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u4e0e\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u4e4b\u5dee$delta$\u3002\u6700\u540e\u8f93\u51fa$ans+delta$\u5373\u53ef\u3002\n\n\u5982\u679c\u8fd8\u662f\u88ab\u5361\u5e38\u600e\u4e48\u529e\uff1f\u5438\u6c27\u5927\u6cd5\u597d\u2026\u2026\n\n\u8d34\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define ull unsigned long long\n#define ff first\n#define ss second\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\nusing namespace std;\nconst int INF=2147483647;\ninline int read()\n{\n\tint x=0,k=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')k=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<3)+(x<<1)+(c^48);c=getchar();}\n\treturn x*k;\n}\nint fa[400086],son[2][400086],mx[400086],mx2[400086],v[400086],f[100086],n,m,x,y,k,num,cnt,now,ans;\nbool r[400086];\nstruct edge{\n\tint u,v,w;\n\tbool operator<(edge x)const\n\t{\n\t\treturn w<x.w;\n\t}\n}e[300086];\nbool isroot(int x)\n{\n\treturn (son[0][fa[x]]!=x)&&(son[1][fa[x]]!=x);\n}\nvoid rvers(int x)\n{\n\tr[x]^=1;\n\tswap(son[0][x],son[1][x]);\n}\nvoid pushdown(int x)\n{\n\tif(!r[x])return ;\n\tif(son[0][x])rvers(son[0][x]);\n\tif(son[1][x])rvers(son[1][x]);\n\tr[x]=0;\n}\nvoid update(int x)\n{\n\tmx[x]=x;\n\tif(son[0][x]&&v[mx[son[0][x]]]>v[mx[x]])mx2[x]=mx[x],mx[x]=mx[son[0][x]];\n\telse if(son[0][x]&&v[mx[son[0][x]]]>v[mx2[x]]&&v[mx[son[0][x]]]<v[mx[x]])mx2[x]=mx[son[0][x]];\n\tif(son[0][x]&&v[mx2[son[0][x]]]>v[mx2[x]]&&v[mx2[son[0][x]]]<v[mx[x]])mx2[x]=mx2[son[0][x]];\n\tif(son[1][x]&&v[mx[son[1][x]]]>v[mx[x]])mx2[x]=mx[x],mx[x]=mx[son[1][x]];\n\telse if(son[1][x]&&v[mx[son[1][x]]]>v[mx2[x]]&&v[mx[son[1][x]]]<v[mx[x]])mx2[x]=mx[son[1][x]];\n\tif(son[1][x]&&v[mx2[son[1][x]]]>v[mx2[x]]&&v[mx2[son[1][x]]]<v[mx[x]])mx2[x]=mx2[son[1][x]];\n}\nvoid rotate(int x)\n{\n\tint y=fa[x],z=fa[y];\n\tbool t=(son[1][y]==x);\n\tif(!isroot(y))son[son[1][z]==y][z]=x;\n\tfa[x]=z;\n\tfa[y]=x;\n\tson[t][y]=son[!t][x];\n\tson[!t][x]=y;\n\tif(son[t][y])fa[son[t][y]]=y;\n\tupdate(y);\n\tupdate(x);\n}\nvoid pathdown(int x)\n{\n\tif(!isroot(x))pathdown(fa[x]);\n\tpushdown(x);\n}\nvoid splay(int x)\n{\n\tpathdown(x);\n\tfor( ;!isroot(x);rotate(x))\n\tif(!isroot(fa[x]))(son[0][fa[x]]==x)^(son[0][fa[fa[x]]]==fa[x])?rotate(x):rotate(fa[x]);\n}\nvoid access(int x)\n{\n\tint y=0;\n\twhile(x)\n\t{\n\t\tsplay(x);\n\t\tson[1][x]=y;\n\t\tupdate(x);\n\t\ty=x;\n\t\tx=fa[x];\n\t}\n}\nvoid makeroot(int x)\n{\n\taccess(x);\n\tsplay(x);\n\trvers(x);\n}\nvoid split(int x,int y)\n{\n\tmakeroot(x);\n\taccess(y);\n\tsplay(y);\n}\nvoid link(int x,int y)\n{\n\tsplit(x,y);\n\tfa[x]=y;\n}\nvoid cut(int x,int y)\n{\n\tsplit(x,y);\n\tfa[x]=son[0][y]=0;\n\tupdate(y);\n}\nint query(int x,int y)\n{\n\tsplit(x,y);\n\treturn mx[y];\n}\nint query2(int x,int y)\n{\n\tsplit(x,y);\n\treturn mx2[y];\n}\nint find(int x)\n{\n\tif(x!=f[x])return f[x]=find(f[x]);\n\treturn f[x];\n}\nvoid merge(int x,int y)\n{\n\tint fx=find(x),fy=find(y);\n\tif(fx==fy)return ;\n\tf[fx]=fy;\n}\nsigned main()\n{\n\tn=read(),m=read();\n\trep(i,1,n)f[i]=i;\n\trep(i,1,m)\n\t{\n\t\tx=read(),y=read(),k=read();\n\t\tif(x>y)swap(x,y);\n\t\te[i].u=x,e[i].v=y,e[i].w=k;\n\t}\n\tsort(e+1,e+1+m);\n\tint delta=0x7f7f7f7f7f7f7f7f;\n\trep(i,1,m)\n\t{\n\t\tx=e[i].u,y=e[i].v,k=e[i].w;\n\t\tint fx=find(x),fy=find(y);\n\t\tif(fx==fy)\n\t\t{\n\t\t\tint w=query(x,y),w2=query2(x,y);\n\t\t\tif(v[w]<k)delta=min(delta,k-v[w]);\n\t\t\telse delta=min(delta,k-v[w2]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmerge(x,y);\n\t\t\tv[i+n]=k;\n\t\t\tlink(x,i+n),link(i+n,y);\n\t\t\tans+=k;\n\t\t}\n\t}\n\tprintf(\"%lld\",ans+delta);\n\treturn 0;\n}\n```\n",
        "postTime": 1570072213,
        "uid": 35617,
        "name": "lengxinjy",
        "ccfLevel": 6,
        "title": "\u9898\u89e3P4180\u3010\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\n\u9996\u5148\u9700\u8981\u4e86\u89e3\u4ec0\u4e48\u662f\u6700\u5c0f\u751f\u6210\u6811,\u8fd8\u8981\u77e5\u9053\u4ec0\u4e48\u662f\u500d\u589e(\u6c42Lca).\n\n\u4e0a\u9762\u7684\u4e1c\u897f\u5982\u679c\u4e86\u89e3\u4e86,\u5c31\u53ef\u4ee5\u5f00\u59cb\u8fdb\u5165\u5b66\u4e60\u7684\u8def\u9014\u4e86!!\n\n\n\n## 1 \u7b97\u6cd5\u6846\u67b6\n\n### 1.1 \u6574\u4f53\u601d\u8def\n\n\u7528\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u53bb\u66f4\u65b0\u7b54\u6848.\n\n\n\n### 1.2 \u5177\u4f53\u7ef4\u62a4\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u500d\u589e\u8df3\u4e0a\u53bb\u7684,\u8981\u7ef4\u62a4\u4e24\u4e2a\u4e1c\u897f:\n\n- \u8def\u5f84\u7684\u8fb9\u6743\u6700\u5927\u503c.\n- \u8def\u5f84\u7684\u8fb9\u6743\u6b21\u5927\u503c\n\n\n\n## 2 \u5177\u4f53\u5b9e\u73b0\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9(\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a),\u5982\u679c\u8981\u628a\u5b83\u52a0\u5165\u7b54\u6848,\u5982\u4f55\u66f4\u65b0?\n\nMST-\u8def\u5f84\u6700\u5927\u503c+\u8fb9\u6743.\n\n~~\u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u5c31\u53ef\u4ee5\u5f88\u6109\u5feb\u5730\u89e3\u51b3\u4e86...~~\n\n\u5176\u5b9e\u4e0d\u662f\u7684,\u5982\u679c\u9898\u76ee\u6c42\u7684\u662f\u6b21\u5c0f\u751f\u6210\u6811,\u8fd9\u9898\u5c31\u6ca1\u4e86,\u4f46\u662f\u9898\u76ee\u8981\u6c42\u7684\u662f\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811,\u600e\u4e48\u529e\u5462?\n\n\u8003\u8651\u4e00\u4e0b,\u5982\u679c\u8981\u8fd9\u6837\u5b50,\u6211\u4eec\u66f4\u65b0\u7b54\u6848\u5c31\u4e0d\u80fd\u548cMST\u76f8\u7b49,\u7136\u540e\u4f9d\u65e7\u53ef\u4ee5\u5f88\u6109\u5feb\u5730\u89e3\u51b3\u4e86!!!\n\n```cpp\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#define int long long\nconst int N=100010,M=300010,Inf=2e18+10;\nstruct node{\n    int u,v,w;\n}e[M];\nint fa[N],front[N],to[N<<1],nxt[N<<1],w[N<<1],MST,cnt,n,m,k,flag[M];\nint f[N][20],Min[N][20],Max[N][20],dep[N];\nint find(int x){\n    if(fa[x]!=x)fa[x]=find(fa[x]);\n    return fa[x];\n}\nvoid Add(int u,int v,int W){\n    to[++cnt]=v;nxt[cnt]=front[u];w[cnt]=W;\n    front[u]=cnt;\n}\nbool cmp(node a,node b){\n    return a.w<b.w;\n}\nvoid dfs(int u,int Fa){\n    f[u][0]=Fa;\n    for(int i=front[u];i;i=nxt[i]){\n        int v=to[i];\n        if(v!=Fa){\n            dep[v]=dep[u]+1ll;\n            Max[v][0]=w[i];\n            Min[v][0]=-Inf;\n            dfs(v,u);\n        }\n    }\n}\nint LCA(int u,int v){\n    if(dep[u]<dep[v])swap(u,v);\n    for(int i=18;~i;i--)\n        if(dep[f[u][i]]>=dep[v])\n            u=f[u][i];\n    if(u==v)return u;\n    for(int i=18;~i;i--)\n        if(f[u][i]!=f[v][i])\n            u=f[u][i],v=f[v][i];\n    return f[u][0];\n}\nint qmax(int u,int v,int W){\n    int ans=-Inf;\n    for(int i=18;~i;i--)\n        if(dep[f[u][i]]>=dep[v]){\n            if(W!=Max[u][i])ans=max(ans,Max[u][i]);\n            else ans=max(ans,Min[u][i]);\n            u=f[u][i];\n        }\n    return ans;\n}\nsigned main(){\n    scanf(\"%lld%lld\",&n,&m);\n    for(int i=1;i<=n;i++)fa[i]=i;\n    for(int i=1;i<=m;i++){\n        int u,v,W;scanf(\"%lld%lld%lld\",&u,&v,&W);\n        e[i]=(node){u,v,W};\n    }\n    sort(e+1,e+m+1,cmp);\n    for(int i=1;i<=m;i++){\n        int u=find(e[i].u),v=find(e[i].v);\n        if(u!=v){\n            flag[i]=1;\n            Add(e[i].u,e[i].v,e[i].w);\n            Add(e[i].v,e[i].u,e[i].w);\n            fa[v]=u;MST+=e[i].w;\n            k++;if(k==n-1)break;\n        }\n    }\n    Min[1][0]=-Inf;\n    dep[1]=1;\n    dfs(1,-1);\n    for(int j=1;j<=18;j++)\n        for(int i=1;i<=n;i++){\n            f[i][j]=f[f[i][j-1]][j-1];\n            Max[i][j]=max(Max[i][j-1],Max[f[i][j-1]][j-1]);\n            Min[i][j]=max(Min[i][j-1],Min[f[i][j-1]][j-1]);\n            if(Max[i][j-1]>Max[f[i][j-1]][j-1])\n                Min[i][j]=max(Min[i][j],Max[f[i][j-1]][j-1]);\n            else if(Max[i][j-1]<Max[f[i][j-1]][j-1])\n                Min[i][j]=max(Min[i][j],Max[i][j-1]);\n        }\n    int ans=Inf;\n    for(int i=1;i<=m;i++)\n        if(!flag[i]){\n            int u=e[i].u,v=e[i].v;\n            int lca=LCA(u,v);\n            int Maxu=qmax(u,lca,e[i].w),Maxv=qmax(v,lca,e[i].w);\n            ans=min(ans,MST-max(Maxu,Maxv)+e[i].w);\n        }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1559564085,
        "uid": 51343,
        "name": "MLEAutoMaton",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "### \u9898\u76ee\u63cf\u8ff0\n\n\u5c0f$C$\u6700\u8fd1\u5b66\u4e86\u5f88\u591a\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\uff0c$Prim$\u7b97\u6cd5\u3001$Kruskal$\u7b97\u6cd5\u3001\u6d88\u5708\u7b97\u6cd5\u7b49\u7b49\u3002\u6b63\u5f53\u5c0f$C$\u6d0b\u6d0b\u5f97\u610f\u4e4b\u65f6\uff0c\u5c0f$P$\u53c8\u6765\u6cfc\u5c0f$C$\u51b7\u6c34\u4e86\u3002\u5c0f$P$\u8bf4\uff0c\u8ba9\u5c0f$C$\u6c42\u51fa\u4e00\u4e2a\u65e0\u5411\u56fe\u7684\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u800c\u4e14\u8fd9\u4e2a\u6b21\u5c0f\u751f\u6210\u6811\u8fd8\u5f97\u662f\u4e25\u683c\u6b21\u5c0f\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff1a\u5982\u679c\u6700\u5c0f\u751f\u6210\u6811\u9009\u62e9\u7684\u8fb9\u96c6\u662f$E_M$\uff0c\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u9009\u62e9\u7684\u8fb9\u96c6\u662f$E_S$\uff0c\u90a3\u4e48\u9700\u8981\u6ee1\u8db3\uff1a(value(e)\u8868\u793a\u8fb9e\u7684\u6743\u503c) \n\n\u8fd9\u4e0b\u5c0f C \u8499\u4e86\uff0c\u4ed6\u627e\u5230\u4e86\u4f60\uff0c\u5e0c\u671b\u4f60\u5e2e\u4ed6\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002  \n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f  \n\u8f93\u5165\u683c\u5f0f\uff1a  \n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570$N$\u548c$M$\uff0c\u8868\u793a\u65e0\u5411\u56fe\u7684\u70b9\u6570\u4e0e\u8fb9\u6570\u3002\u63a5\u4e0b\u6765$M$\u884c\uff0c\u6bcf\u884c 3\u4e2a\u6570$x\\ y\\ z$ \u8868\u793a\uff0c\u70b9$x$\u548c\u70b9$y$\u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\uff0c\u8fb9\u7684\u6743\u503c\u4e3a$z$\u3002  \n\n\u8f93\u51fa\u683c\u5f0f\uff1a  \n\n\u5305\u542b\u4e00\u884c\uff0c\u4ec5\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u3002  \n(\u6570\u636e\u4fdd\u8bc1\u5fc5\u5b9a\u5b58\u5728\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811)  \n\n\u8bf4\u660e:  \n\u6570\u636e\u4e2d\u65e0\u5411\u56fe\u65e0\u81ea\u73af;  \n$50\\%$ \u7684\u6570\u636e$N\u22642000\\ M\u22643000$;  \n$80\\%$\u7684\u6570\u636e$N\u226450000\\ M\u2264100000$;  \n$100\\%$ \u7684\u6570\u636e$N\u2264100000\\ M\u2264300000$;  \n\u8fb9\u6743\u503c\u975e\u8d1f\u4e14\u4e0d\u8d85\u8fc7$10^9$ \u3002\n\n------------\n### \u57fa\u672c\u601d\u8def\uff1a  \n\u5148\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5728\u5efa\u6811\u65f6\uff0c\u5c06\u6240\u6709\u7684\u8fb9\u5212\u5206\u4e3a\u4e24\u4e2a\u96c6\u5408\uff08\u6811\u8fb9$E_T$\u548c\u975e\u6811\u8fb9$E_K$\uff09  \n\u4e4b\u540e\u8003\u8651\u5c06$\\forall\\ e(u,v)\\in E_K$\u5206\u522b\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u53bb\uff0c\u5c06\u6811\u4e0a$u,v$\u4e4b\u95f4\u7684\u6700\u5927\u8fb9\u6743$Maxvalue(u,v)$\u4e0e$value(e)$\u4f5c\u6bd4\u8f83\uff1a  \n+  \u82e5$Maxvalue(u,v)\\ne value(e)$ \u5219\u5f97\u5230$MST^\\prime$\u7684\u4e00\u4e2a\u5019\u9009\u503c$MST-Maxvalue(u,v)+value(e)$\n+  \u82e5$Maxvalue(u,v)= value(e)$ \u5219\u5f97\u5230$MST^\\prime$\u7684\u4e00\u4e2a\u5019\u9009\u503c$MST-Maxvalue^\\prime(u,v)+value(e)$  \n\uff08\u5176\u4e2d$MST^\\prime$\u4e3a\u6b21\u5c0f\u751f\u6210\u6811\uff0c$Maxvalue^\\prime(u,v)$\u4e3a\u6811\u4e0a$u,v$\u95f4\u7684\u6b21\u5927\u8fb9\u6743\uff09  \n\n\u601d\u8def\u786e\u5b9a\u4e0b\u6765\u4e4b\u540e\uff0c\u6700\u4e25\u5cfb\u7684\u95ee\u9898\u5c31\u662f\uff1a**\u5982\u4f55\u5feb\u901f\u6c42\u51fa$Maxvalue(u,v)$\u548c$Maxvalue^\\prime(u,v)$?**  \n\n---\n### \u6811\u4e0a\u500d\u589e$+LCA$\n\u5bf9\u6240\u5efa\u7acb\u7684\u6700\u5c0f\u751f\u6210\u6811\u8fdb\u884c\u6811\u4e0a\u500d\u589e\uff0c\u5404\u5143\u7d20\u610f\u4e49\u5982\u4e0b\uff1a\n\n+  $f[\\ i\\ ][\\ j\\ ]$\u8868\u793a\u6811\u4e0a\u7f16\u53f7\u4e3a$i$\u7684\u70b9\u5411\u4e0a\u8df3$2^j$\u6b65\u6240\u5230\u8fbe\u7684\u7956\u5148\u7f16\u53f7\n+  $maxg[\\ i\\ ][\\ j\\ ]$\u8868\u793a\u6811\u4e0a\u7f16\u53f7\u4e3a$i$\u7684\u70b9\u4ee5\u4e0a\u957f\u5ea6\u4e3a$2^j$\u7684\u6811\u4e0a\u8def\u5f84\u7684**\u6700\u5927**\u8fb9\u6743\u503c\n+  $ming[\\ i\\ ][\\ j\\ ]$\u8868\u793a\u6811\u4e0a\u7f16\u53f7\u4e3a$i$\u7684\u70b9\u4ee5\u4e0a\u957f\u5ea6\u4e3a$2^j$\u7684\u6811\u4e0a\u8def\u5f84\u7684**\u6b21\u5927**\u8fb9\u6743\u503c  \n\n\u5728\u6c42\u5904\u7406\u6811\u4e0a\u8def\u5f84$(u,v)$\u65f6\u5148\u6c42\u51fa$LCA(u,v)$\uff0c\u518d\u5206\u4e3a$(u,LCA(u,v))$\u548c$(v,LCA(u,v))$\u4e24\u6bb5\u5904\u7406\uff0c\u53d6\u4e24\u6b21\u7b54\u6848\u7684\u8f83\u5927\u503c\u4f5c\u4e3a\u5f53\u524d\u7684\u76ee\u6807\u66ff\u6362\u503c\uff08\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\u4e2d\u7684$qmax$\u51fd\u6570\uff09  \n\n---\n\n### \u7ec6\u8282\u6ce8\u610f\u4e8b\u9879\n\u4e2a\u4eba\u6765\u770b\uff0c\u4ee5\u4e0b\u51e0\u70b9\u662f**\u975e\u5e38\u91cd\u8981**\u6ef4\uff1a\n1. $Kruskal$\u7684\u6784\u6811\uff08\u6700\u57fa\u672c\u7684\u4e00\u6b65\uff0c\u5343\u4e07\u4e0d\u80fd\u51fa\u5c94\u5b50\uff09\n1. \u7ef4\u62a4\u6811\u4e0a\u8def\u5f84\u7684\u8fb9\u6743\u6700\u5927\u503c\u4e0e\u6b21\u5927\u503c\uff08**\u91cd\u4e2d\u4e4b\u91cd\uff01\uff01\uff01**\uff09  \n\u5343\u4e07\u8981\u6ce8\u610f$maxg$\u548c$ming$\u7684\u8f6c\u79fb,\u4e0d\u7136\u5c31\u6709\u53ef\u80fd\u50cf\u6211\u4e00\u6837\u4e00\u76f4WA\u7b2c\u4e00\u4e2a\u70b9$...$\n1. $LCA$\u8f85\u52a9\u67e5\u8be2\u6811\u4e0a\u8def\u5f84$(u,v)$\u4e4b\u95f4\u7684\u6700\u5927\u8fb9\u6743  \n1. \u5f00$long\\ long$ \u554a\uff08\u4e0d\u5f00$long\\ long$\u89c1\u7956\u5b97$...$\uff09  \n\n---\n\n### \u53c2\u8003\u4ee3\u7801  \n\u4e0b\u9762\u662f\u849f\u84bb\u7684\u4ee3\u7801\uff08~~\u6b22\u8fce\u5927\u4f6c\u6765\u8e29~~\uff09  \n``` cpp\n//\u7531\u4e8e\u672c\u5730\u8c03\u8bd5\u7684\u65f6\u5019\u5fd8\u4e86\u5f00long long\uff0c\u6240\u4ee5\u6240\u6709\u7684int\u90fd\u662flong long...qwq\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\ntypedef long long LL;\nconst LL INF=2147483647000000;//INF \u5f00\u5927\n// \u7a7a\u95f4\u90fd\u5f00\u5927\u70b9\nconst LL MAXN=400010;\nconst LL MAXM=900010;\nusing namespace std;\ninline LL read(){//\u8bfb\u4f18\n\tLL s=0;bool f=false;char c=getchar();\n\twhile(c<'0'||c>'9')f|=(c=='-'),c=getchar();\n\twhile(c>='0'&&c<='9')s=(s<<3)+(s<<1)+(c^48),c=getchar();\n\treturn (f)?(-s):(s);\n}\nstruct edge{\n\tLL u,v,w;bool bt;//bt\u4e3afalse\u5219\u8bf4\u660e\u4e3a\u975e\u6811\u8fb9\uff0c\u4e3a\u771f\u5219\u4e3a\u6811\u8fb9\n\tvoid scan(){u=read(),v=read(),w=read();}\n\tbool operator<(const edge&obj)const{return w<obj.w;}\n}e[MAXM];\nLL tot,head[MAXN],nxt[MAXM<<1],v[MAXM<<1],w[MAXM<<1];\ninline void Add_edge(LL from,LL to,LL dis){\n\tnxt[++tot]=head[from],head[from]=tot,v[tot]=to,w[tot]=dis;\n}\nLL fa[MAXN];\ninline LL findd(LL k){\n\treturn fa[k]==k?k:fa[k]=findd(fa[k]);\n}\nLL n,m,MST=0;\ninline void kruskal(){\n\tfor(LL i=1;i<=n;i++) fa[i]=i;\n\tsort(e+1,e+1+m);\n\tfor(LL i=1;i<=m;i++){\n\t\tLL u=e[i].u;\n\t\tLL v=e[i].v;\n\t\tLL w=e[i].w;\n\t\tif(findd(u)!=findd(v)){\n\t\t\tMST+=w;\n\t\t\te[i].bt=true;\n\t\t\tAdd_edge(u,v,w);\n\t\t\tAdd_edge(v,u,w);\n\t\t\tfa[findd(u)]=findd(v);\n\t\t}\n\t}\n}\nLL dep[MAXN],f[MAXN][19];\nLL maxg[MAXN][19],ming[MAXN][19];\ninline void dfs(LL u,LL p){\n\tfor(LL i=1;i<=18;i++){\n\t\tf[u][i]=f[f[u][i-1]][i-1];\n\t\tmaxg[u][i]=max(maxg[u][i-1],maxg[f[u][i-1]][i-1]);\n        //maxg\u80af\u5b9a\u4e3a\u4e24\u6bb5\u8def\u5f84\u5206\u522b\u7684maxg\u7684\u8f83\u5927\u503c\n\t\tming[u][i]=max(ming[u][i-1],ming[f[u][i-1]][i-1]);\n        //\u5148\u4ee4ming\u4e3a\u4e24\u6bb5\u8def\u5f84\u5206\u522b\u7684ming\u7684\u8f83\u5927\u503c\n       \t//\u8fd9\u4e2a if \u975e\u5e38\u91cd\u8981\uff01\u4e0d\u7136\u7684\u8bdd\uff0c\u8981\u662f\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u6709\u5f88\u591a\uff0c\u5c31\u4f1a\u4f7f\u6b21\u5927\u8fb9\u6743\u4e5f\u4e3a\u6700\u5927\u503c\n\t\tif(maxg[u][i-1]!=maxg[f[u][i-1]][i-1])\n\t\t\tming[u][i]=max(ming[u][i],min(maxg[u][i-1],maxg[f[u][i-1]][i-1]));\n        //\u82e5\u4e24\u6bb5\u7684maxg\u76f8\u540c\uff0c\u5219\u4e0d\u5fc5\u8981\u7ee7\u7eed\u66f4\u65b0ming\n        //\u5426\u5219\u8981\u5c06ming\u4e0e\u4e24\u6bb5\u8def\u5f84\u7684maxg\u7684\u8f83\u5c0f\u503c\u4f5c\u6bd4\u8f83\uff0c\u518d\u6b21\u66f4\u65b0\n\t}\n\tfor(LL i=head[u];i;i=nxt[i])\n\t\tif(!dep[v[i]]){\n\t\t\tf[v[i]][0]=u;\n\t\t\tmaxg[v[i]][0]=w[i];\n\t\t\tming[v[i]][0]=-INF;\n\t\t\tdep[v[i]]=dep[u]+1;\n\t\t\tdfs(v[i],u);\n\t\t}\n}\ninline LL LCA(LL x,LL y){\n\tif(dep[x]<dep[y]) swap(x,y);\n\tfor(LL i=18;i>=0;i--)\n\t\tif(dep[f[x][i]]>=dep[y]) x=f[x][i];\n\tif(x==y) return x;\n\tfor(LL i=18;i>=0;i--)\n\t\tif(f[x][i]^f[y][i]) x=f[x][i],y=f[y][i];\n\treturn f[x][0];\n}\ninline LL qmax(LL x,LL y,LL z){\n\tLL ans=-INF;\n    //ans\u8bb0\u5f55\u6811\u4e0a(x,y)\u540c\u4e00\u6761\u94fe\u4e0a\u7684\u6700\u5927\u8fb9\u6743\n    //\u7531\u4e8e\u4e3b\u51fd\u6570\u4e2d\u6c42\u4e86LCA\uff0c\u6240\u4ee5\u5728\u5f53\u524d\u7684\u51fd\u6570\u4e2d\uff0cy\u4e00\u5b9a\u662fx\u7684\u7956\u5148\n\tfor(LL i=18;i>=0;i--)\n\t\tif(dep[f[x][i]]>=dep[y]){\n        //\u8fd9\u4e2a if \u7684\u539f\u7406\u540c\u4e0a\n        //\u82e5\u5f53\u524d\u8fd9\u6761\u975e\u6811\u8fb9\u7684\u6743\u4e0e\u5f53\u524d\u8def\u5f84\u6bb5\u7684\u6700\u5927\u8fb9\u6743\u4e0d\u7b49\n\t\t\tif(z!=maxg[x][i])\n            \t//\u5219\u7528maxg\u66f4\u65b0\u4e00\u6b21\n\t\t\t\tans=max(ans,maxg[x][i]);\n\t\t\telse\n            \t//\u5426\u5219\u5219\u7528ming\u5c1d\u8bd5\u66f4\u65b0\n\t\t\t\tans=max(ans,ming[x][i]);\n\t\t\tx=f[x][i];\n\t\t}\n\treturn ans;\n}\nint main(){\n\tn=read(),m=read();\n\tfor(LL i=1;i<=m;i++) e[i].scan();\n\tkruskal();\n\tdep[1]=1;\n\tmaxg[1][0]=0;\n\tming[1][0]=-INF;\n\tdfs(1,0);\n\tLL _MST_=INF;\n\tfor(LL i=1;i<=m;i++){\n\t\tLL u=e[i].u;\n\t\tLL v=e[i].v;\n\t\tLL w=e[i].w;\n\t\tif(!e[i].bt){\n\t\t\tLL lca=LCA(u,v);\n\t\t\tLL maxx=qmax(u,lca,w);\n\t\t\tLL maxy=qmax(v,lca,w);\n\t\t\t_MST_=min(_MST_,MST-max(maxx,maxy)+w);\n\t\t}\n\t}\n\treturn printf(\"%lld\",_MST_),0;\n}\n```  \n###  \u8c03\u4e86\u4e00\u5929\u624d\u8c03\u51fa\u6765\u7684\u6b63\u89e3\uff0c\u5e0c\u671b\u6709\u5e2e\u52a9\u5427$qwq$",
        "postTime": 1559539326,
        "uid": 87839,
        "name": "Sangber",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4180 \u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]"
    },
    {
        "content": "\u867d\u7136\u4e2d\u9014\u5199\u7684\u65f6\u5019\u6709\u70b9\u6ce2\u6298\uff0c\u4f46\u662f\u6700\u540e\u4e00\u53d1A\uff0c\u8fd8\u662f\u6709\u70b9\u723d\u3002\n\n\u8fd9\u867d\u7136\u662f\u4e2a\u6a21\u677f\u9898\uff0c\u4f46\u8fd8\u662f\u6d89\u53ca\u5230\u8bb8\u591a\u77e5\u8bc6\u7684= =\n\n\u9996\u5148\u6211\u4eec\u6c42\u51fa\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5e76\u4e14\u6c42\u51fa\u5176\u8fb9\u6743\u548c$ans$\u3002\u90a3\u4e48\u73b0\u5728\u8003\u8651\u52a0\u5165\u5176\u5b83\u7684\u8fb9\uff0c\u6bcf\u6b21\u52a0\u5165\u5728\u6811\u4e0a\u5c31\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u8fd9\u65f6\u56e0\u4e3a\u662f\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5220\u53bb\u4e00\u6761\u8fb9\u3002\u5f88\u660e\u663e\u73b0\u5728\u5c31\u8981\u5220\u53bb\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u6700\u5927\u7684\u8fb9\u5373\u53ef\u3002\n\n\u4f46\u8fd9\u91cc\u6709\u4e2a\u95ee\u9898\uff0c\u9898\u76ee\u8981\u6c42\u4e25\u683c\u6b21\u5c0f\u3002\u5047\u8bbe\u73b0\u5728\u52a0\u5165\u7684\u8fb9\u6743\u4e3a$w$\uff0c\u6811\u4e0a\u5728\u73af\u4e2d\u7684\u90e8\u5206\u8fb9\u6743\u6700\u5927\u4e3a$maxw$\uff0c\u90a3\u4e48\u5f53$w=maxw$\u65f6\uff0c\u5f88\u663e\u7136\u6211\u4eec\u8981\u6c42\u4e00\u4e2a\u6b21\u5927\u8fb9\u6743$maxw2$\u6765\u66ff\u6362\uff1b\u5426\u5219\u76f4\u63a5\u628a$maxw$\u66ff\u6362\u5c31\u884c\u4e86\u3002\n\n\u521d\u6b65\u601d\u8def\u5c31\u662f\u8fd9\u6837\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u600e\u4e48\u53bb\u201c\u66ff\u6362\u201d\u8fb9\uff0c\u5e76\u4e14\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5**\u500d\u589e**\u5730\u53bb\u505a\u5c31\u597d\u4e86\uff08\u4e5f\u6709\u79cd$O(n^2)$\u7684dfs\u7b97\u6cd5\uff0c\u4f46\u500d\u589e\u8fd9\u4e48\u4f18\u79c0\uff0c~~\u5b66\u5b83\u505a\u4ec0\u4e48~~\u3002\n\n\u8bbe$g[x][i][0/1]$\u5206\u522b\u8868\u793a\u5f53\u524d\u5728$x$\u53f7\u7ed3\u70b9\uff0c\u5411\u4e0a\u8df3$2^i$\u4e2a\u7ed3\u70b9\uff0c\u4e2d\u9014\u7ecf\u8fc7\u8fb9\u6743\u7684\u6700\u5927\u503c\u4ee5\u53ca\u6b21\u5927\u503c\u4e3a\u591a\u5c11\u3002\u5f88\u663e\u7136\u6700\u5927\u503c\u5f88\u5bb9\u6613\u6c42\uff0c\u5373\u4e3a\n$$max(g[x][i-1][0],g[f[x][i-1]][i-1][0])$$\n\n\u6c42\u6b21\u5927\u503c\u7684\u8bdd\u5c31\u9700\u8981\u5206\u60c5\u51b5\u8ba8\u8bba\u4e86\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\u90e8\u5206\u5427\uff0c\u5e94\u8be5\u6bd4\u8f83\u597d\u7406\u89e3\uff08~~\u5176\u5b9e\u662f\u6211\u61d2\u5f97\u6253\u4e86~~\n\n```cpp\nif(g[v][j - 1][0] == g[f[v][j - 1]][j - 1][0]) {\n    g[v][j][1] = max(g[v][j - 1][1], g[f[v][j - 1]][j - 1][1]) ;\n} else if(g[v][j - 1][0] > g[f[v][j - 1]][j - 1][0]) {\n    g[v][j][1] = max(g[v][j - 1][1], g[f[v][j - 1]][j - 1][0]) ;\n} else g[v][j][1] = max(g[f[v][j - 1]][j - 1][1], g[v][j - 1][0]) ;\n\n```\n\n\u90a3\u4e48\u4e4b\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\uff0c\u6211\u4eec\u5c31\u7c7b\u4f3c\u4e8e\u627elca\u90a3\u6837\u500d\u589e\u5730\u53bb\u627e\u6b21\u5927\u503c\u5c31\u884c\u4e86\u3002\u6ce8\u610f\u8fd9\u91cc\u6b21\u5927\u503c\u4e0d\u80fd\u76f4\u63a5\u53d6$g[x][i][1]$\u7684\u6700\u5927\u503c\uff0c\u4e5f\u5e94\u8be5\u50cf\u4e0a\u9762\u90a3\u6837\u7ed3\u5408\u6700\u5927\u503c\u6765\u8ba8\u8bba\u4e00\u4e0b\u3002\n\n\u8be6\u89c1\u4ee3\u7801\u5427\uff0c\u5199\u5f97\u6709\u70b9\u957f\uff08~~\u5f88\u591a\u590d\u5236\u7c98\u8d34~~\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N = 3e5 + 5, M = 3e5 + 5;\nint n, m;\nstruct Edge{\n    int u, v, w;\n    bool operator < (const Edge &A)const{\n        return w < A.w;\n    }\n}E[M];\nstruct edge{\n    int v, w, next;\n}e[M];\nint head[N], tot;\nbool check[M] ;\nvoid adde(int u, int v, int w) {\n    e[tot].v = v; e[tot].w = w; e[tot].next = head[u]; head[u] = tot++;\n}\nint ff[N] ;\nint find(int x) {\n    return ff[x] == x ? ff[x] : ff[x] = find(ff[x]) ;\n}\nll ans ;\nint f[N][20], deep[N];\nll g[N][20][2] ;\nint Log2[N] ;\nvoid dfs(int u, int fa) {\n    deep[u] = deep[fa] + 1;\n    for(int i = head[u]; i != -1; i = e[i].next) {\n        int v = e[i].v, w = e[i].w;\n        if(v == fa) continue ;\n        f[v][0] = u;\n        g[v][0][0] = w;\n        g[v][0][1] = -1e9;\n        for(int j = 1; j <= 17; j++) f[v][j] = f[f[v][j - 1]][j - 1] ;\n        for(int j = 1; j <= 17; j++) {\n            g[v][j][0] = max(g[v][j - 1][0], g[f[v][j - 1]][j - 1][0]) ;\n            if(g[v][j - 1][0] == g[f[v][j - 1]][j - 1][0]) {\n                g[v][j][1] = max(g[v][j - 1][1], g[f[v][j - 1]][j - 1][1]) ;\n            } else if(g[v][j - 1][0] > g[f[v][j - 1]][j - 1][0]) {\n                g[v][j][1] = max(g[v][j - 1][1], g[f[v][j - 1]][j - 1][0]) ;\n            } else g[v][j][1] = max(g[f[v][j - 1]][j - 1][1], g[v][j - 1][0]) ;\n        }\n        dfs(v, u) ;\n    }\n}\nll LCA(int x, int y) {\n    if(deep[x] < deep[y]) swap(x, y) ;\n    for(int i = 17; i >= 0; i--) {\n        if(deep[f[x][i]] >= deep[y]) x = f[x][i] ;\n    }\n    if(x == y) return x;\n    for(int i = 17; i >= 0; i--) {\n        if(f[x][i] != f[y][i]) x = f[x][i], y = f[y][i] ;\n    }\n    return f[x][0] ;\n}\nll getmx(int x, int y, int k) {\n    ll ans1 = 0, ans2 = 0, ans = 0;\n    int z = LCA(x, y) ;\n    int tx = x, ty = y;\n    for(int i = 17; i >= 0; i--)\n        if(deep[f[x][i]] >= deep[z]) ans1 = max(ans1, g[x][i][0]), x = f[x][i] ;\n    for(int i = 17; i >= 0; i--)\n        if(deep[f[y][i]] >= deep[z]) ans2 = max(ans2, g[y][i][0]), y = f[y][i] ;\n    if(!k) return max(ans1, ans2) ;\n    if(ans1 > ans2) {\n        x = tx;\n        for(int i = 17; i >= 0; i--)\n            if(deep[f[x][i]] >= deep[z]) ans = max(ans, g[x][i][1]), x = f[x][i] ;\n        ans = max(ans, ans2) ;\n    } else if(ans1 == ans2) {\n        x = tx, y = ty;\n        ans1 = 0, ans2 = 0;\n        for(int i = 17; i >= 0; i--)\n            if(deep[f[x][i]] >= deep[z]) ans1 = max(ans1, g[x][i][0]), x = f[x][i] ;\n        for(int i = 17; i >= 0; i--)\n            if(deep[f[y][i]] >= deep[z]) ans2 = max(ans2, g[y][i][0]), y = f[y][i] ;\n        ans = max(ans1, ans2) ;\n    } else {\n        y = ty;\n        for(int i = 17; i >= 0; i--)\n            if(deep[f[y][i]] >= deep[z]) ans2 = max(ans2, g[y][i][0]), y = f[y][i] ;\n        ans = max(ans, ans1) ;\n    }\n    return ans ;\n}\nint main() {\n    ios::sync_with_stdio(false); cin.tie(0) ;\n    cin >> n >> m;\n    Log2[1] = 0;\n    for(int i = 2; i < N; i++) Log2[i] = Log2[i >> 1] + 1;\n    memset(head, -1, sizeof(head)) ;\n    for(int i = 1; i <= m; i++) {\n        int u, v, w;\n        cin >> u >> v >> w;\n        E[i] = Edge{u, v, w} ;\n    }\n    for(int i = 1; i <= n; i++) ff[i] = i;\n    sort(E + 1, E + m + 1) ;\n    for(int i = 1; i <= m; i++) {\n        int u = E[i].u, v = E[i].v, w = E[i].w;\n        int fx = find(u), fy = find(v) ;\n        if(fx != fy) {\n            check[i] = 1;\n            ans += w;\n            ff[fx] = fy;\n            adde(u, v, w); adde(v, u, w);\n        }\n    }\n    dfs(1, 0) ;\n    ll mn = 1e18;\n    for(int i = 1; i <= m; i++) {\n        if(check[i]) continue ;\n        int u = E[i].u, v = E[i].v, w = E[i].w;\n        int mx = getmx(u, v, 0) ;\n        if(mx == w) {\n            mx = getmx(u, v, 1) ;\n            mn = min(mn, ans - mx + (ll)w) ;\n        } else mn = min(mn, ans - mx + (ll)w) ;\n    }\n    cout << mn ;\n    return 0;\n}\n\n```",
        "postTime": 1558358947,
        "uid": 29563,
        "name": "heyuhhh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "Kurskal\u627e\u6700\u5c0f\u751f\u6210\u6811\n\n\u7136\u540e\u679a\u4e3e\u4e00\u6761\u975e\u6811\u8fb9\n\n\u627e\u8fb9\u6240\u5728\u7684\u73af\u4e0a\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\n\n\u8fd9\u9898\u6709\u4e00\u4e2a\u5341\u5206\u5927\u6750\u5c0f\u7528\u7684\u5199\u6cd5\n\n\u5c31\u662f\u628a\u5728\u627e\u4e00\u6761\u94fe\u4e0a\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\n\n\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\uff08\u4e3b\u5e2d\u6811\uff09\n\n\u597d\u50cf\u6709\u54ea\u4e2a\u5927\u4f6c\u63d0\u5230\u8fc7\u8fd9\u79cd\u5199\u6cd5\u2026\u2026\n\n```cpp\n#include<bits/stdc++.h>\n#define N 100005\n#define mid ((l+r)>>1)\nusing namespace std;\nint n,m;\nvector<int>P[N],C[N];\nstruct edge{\n\tint a,b,c;\n\tbool operator<(const edge &_)const{return c<_.c;}\n}E[N*3];\nint vis[N*3];\nint fat[N];\nint getfa(int x){return x==fat[x]?x:fat[x]=getfa(fat[x]);}\nlong long Kurskal(){\n\tfor(int i=1;i<=n;i++)fat[i]=i;\n\tsort(E+1,E+m+1);\n\tlong long ans=0;\n\tfor(int i=1;i<=m;i++){\n\t\tint x=getfa(E[i].a),y=getfa(E[i].b);\n\t\tif(x==y)continue;\n\t\tvis[i]=1;\n\t\tans+=E[i].c;\n\t\tfat[x]=y;\n\t\tP[E[i].a].push_back(E[i].b);\n\t\tC[E[i].a].push_back(E[i].c);\n\t\tP[E[i].b].push_back(E[i].a);\n\t\tC[E[i].b].push_back(E[i].c);\n\t}\n\treturn ans;\n}\nint fa[N][20],de[N];\nint res[N*40];\nint R[N*40];\nint L[N*40];\nint B[N*3],rt[N];\nint tt,tot;\nint update(int l,int r,int x,int p) {\n\tint rot=++tt;\n\tL[rot]=L[p];\n\tR[rot]=R[p];\n\tres[rot]=res[p]+1;\n\tif(l>=r)return rot;\n\tif(l<r) {\n\t\tif(x<=mid)L[rot]=update(l,mid,x,L[p]);\n\t\telse R[rot]=update(mid+1,r,x,R[p]);\n\t}\n\treturn rot;\n}\nint query(int l,int r,int u,int v,int w,int k) {\n\tif(l>=r)return l;\n\tint x=res[L[v]]+res[L[u]]-2*res[L[w]];\n\tif(x>=k)return query(l,mid,L[u],L[v],L[w],k);\n\telse return query(mid+1,r,R[u],R[v],R[w],k-x);\n}\nint query2(int l,int r,int u,int v,int w,int k){\n\tif(l>=r)return res[u]+res[v]-2*res[w];\n\tif(k<=mid)return query2(l,mid,L[u],L[v],L[w],k);\n\telse return query2(mid+1,r,R[u],R[v],R[w],k);\n}\nvoid dfs(int p,int lastt,int dep,int cost){\n\tint t=lower_bound(B+1, B+1+tot, cost)-B; \n\trt[p]=update(1,tot,t,rt[lastt]);\n\tfa[p][0]=lastt;\n\tde[p]=dep;\n\tfor(int i=0;i<(int)P[p].size();i++){\n\t\tint y=P[p][i];\n\t\tif(y==lastt)continue;\n\t\tdfs(y,p,dep+1,C[p][i]);\n\t}\n}\nint Lca(int a, int b) {\n\tif(de[a]>de[b])swap(a,b);\n\tfor(int j=19;j>=0;j--)\n\t\tif(de[fa[b][j]]>=de[a])b=fa[b][j];\n//\tprintf(\"a=%d b=%d\\n\",a,b);\n\tif(a==b)return a;\n\tfor(int j=19;j>=0;j--){\n\t\tif(fa[b][j]!=fa[a][j]){\n\t\t\tb=fa[b][j];\n\t\t\ta=fa[a][j];\n\t\t}\n\t}\n\treturn fa[a][0];\n}\nvoid solve(){\n\ttt=0;\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int a,b,c,i=1;i<=m;i++){\n\t\tscanf(\"%d %d %d\",&a,&b,&c);\n\t\tE[i]=(edge){a,b,c};\n\t\tB[i]=c;\n\t}\n\tlong long ans=Kurskal();\n//\tprintf(\"%lld\\n\",ans);\n\tsort(B+1,B+m+1);\n    tot = unique(B+1, B+1+m)-B-1;\n\tdfs(1,0,1,E[1].c);\n\tfor(int i=1;i<=19;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tfa[j][i]=fa[fa[j][i-1]][i-1];\n\tint mi=0x3f3f3f3f;\n\tfor(int i=1;i<=m;i++){\n\t\tif(vis[i])continue;\n\t\tint lca=Lca(E[i].a,E[i].b);\n\t\tint t=lower_bound(B+1, B+1+tot, E[i].c)-B;\n\t\tint sum=res[rt[E[i].a]]+res[rt[E[i].b]]-2*res[rt[lca]];\n\t\tint kk=query(1,tot,rt[E[i].a],rt[E[i].b],rt[lca],sum);\n\t\tif(t>kk){\n\t\t\tmi=min(mi,B[t]-B[kk]);\n\t\t\tcontinue;\n\t\t}\n\t\tsum-=query2(1,tot,rt[E[i].a],rt[E[i].b],rt[lca],kk);\n\t\tif(sum==0)continue;\n\t\tkk=query(1,tot,rt[E[i].a],rt[E[i].b],rt[lca],sum);\n//\t\tprintf(\"%d %d\\n\",B[t],B[kk]);\n\t\tmi=min(mi,B[t]-B[kk]);\n\t}\n\tprintf(\"%lld\\n\",ans+mi);\n}\nint main(){\n\tsolve();\n\treturn 0;\n}\n```\n",
        "postTime": 1554991406,
        "uid": 95559,
        "name": "_Fugitive_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6c42\u51fa\u8be5\u56fe\u7684\u6b21\u5c0f\u751f\u6210\u6811\u3002\n\n\u70b9\u6570n\u2264100 000 \u8fb9\u6570m\u2264300 000\n\n\u505a\u6cd5\u5176\u5b9e\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u9996\u5148\u6211\u4eec\u6c42\u51fa\u7ed9\u5b9a\u56fe\u4e2d\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u6211\u4eec\u679a\u4e3e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u5c06\u5176\u52a0\u5165\u751f\u6210\u6811\u4e2d\uff0c\u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u4e00\u5b9a\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u8fd9\u4e2a\u73af\u4e2d\u627e\u5230\u9664\u53bb\u8fd9\u6761\u8fb9\u4ee5\u5916\u6700\u5927\u7684\u8fb9,(\u53c8\u56e0\u4e3a\u662f\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u6240\u4ee5\u8fd8\u6709\u627e\u6b21\u5c0f\u7684\uff0c\u4ee5\u9632\u6700\u5927\u503c\u4e0e\u975e\u6811\u8fb9\u8fb9\u6743\u76f8\u7b49\uff09\uff0c\u5c06\u5b83\u5220\u53bb\uff0c\u7136\u540e\u5f97\u5230\u53e6\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u8bb0\u5f55\u4e00\u4e0bans\uff0c\u5bf9\u4e8e\u6240\u6709\u975e\u6811\u8fb9\u679a\u4e3e\u5f97\u5230\u7684ans\u53ea\u8981\u53d6\u4e00\u4e2a\u6700\u5c0f\u503c\u5c31\u53ef\u4ee5\u4e86\uff08\u56e0\u4e3a\u662f\u6b21\u5c0f\u751f\u6210\u6811\uff09\n\n\u4f46\u662f\u8fd9\u79cd\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u6709\u70b9\u5927\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\uff1a\u6c42\u6700\u5c0f\u751f\u6210\u6811\u662fO(n)\uff0c\uff08\u7531\u4e8e\u5e76\u67e5\u96c6\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u5e38\u6570\uff09\uff0c\u679a\u4e3e\u975e\u9009\u62e9\u7684\u8fb9\u662fO(m)\uff0c\u6bcf\u4e00\u6b21\u6c42\u6700\u5927\u503c\uff08\u548c\u6b21\u5927\u503c\uff09\u4e5f\u662fO(m)\uff0c\u6240\u4ee5\u6e10\u8fd1\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(m^2)\uff0c\u5982\u679c\u8981\u901a\u8fc7\u8fd9\u9053\u9898\u8fd8\u662f\u5dee\u4e86\u5f88\u591a\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8fdb\u884c\u4f18\u5316\uff1a\n\n\u5f88\u663e\u7136\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u80fd\u4f18\u5316\uff0c\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\u90fd\u5fc5\u987b\u88ab\u679a\u4e3e\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u5728\u6c42\u6700\u5927\u503c\u4e0a\u4e0b\u624b\u4e86\u3002\n\n\u8003\u8651\u5230\u6211\u4eec\u5728\u52a0\u5165\u8be5\u975e\u6811\u8fb9\u4e4b\u524d\u5e94\u8be5\u662f\u4e00\u9897\u6ca1\u6709\u73af\u7684\u6811\uff0c\u90a3\u4e48\u6c42\u4e00\u6bb5\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u6211\u4eec\u662f\u4f1a\u505a\u7684\uff0c\u6811\u94fe\u5256\u5206\uff1f\u4ee3\u7801\u91cf\u8fc7\u4e8e\u5927\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u53e6\u4e00\u79cd\u505a\u6cd5\uff1a\u6811\u4e0a\u500d\u589eLCA\n\n\u5176\u5b9eLCA\u53ef\u4ee5\u5e72\u5f88\u591a\u4e8b\u60c5\u7684\u3002\u3002\u3002\n\n\u5173\u4e8eLCA\u6c42\u6811\u4e0a\u4e24\u70b9\u8def\u5f84\u4e2d\u8fb9\u6743\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u5176\u5b9e\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u6211\u4eec\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u5f00\u4e00\u4e2aw[u][i]\uff0c\u8868\u793a\u4eceu\u5411\u4e0a\u8df32^i\u4e2a\u70b9\uff0c\u8fd9\u4e00\u6bb5\u8def\u5f84\u7684\u6700\u5927\u503c\n\n\u52a8\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e5f\u662f\u6bd4\u8f83\u663e\u7136\u7684\uff1a\u6211\u4eec\u5047\u5b9af[u][i]\u8868\u793a\u4eceu\u5411\u4e0a\u8df32^i\u4e2a\u70b9\u5230\u8fbe\u70b9\u7684\u5750\u6807\uff0c\u90a3\u4e48\u5c31\u6709w[u][i+1]=max(w[u][i],w[f[u][i]][i])\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5c31\u4ece\u8fd9\u4e24\u4e2a\u70b9\u5206\u522b\u8df3\u5230\u4ed6\u4eec\u7684LCA\u5904\uff0c\u6bcf\u4e00\u6b21\u53d6\u6700\u5927\u503c\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5c06m^2\u7684\u7b97\u6cd5\u8f6c\u5316\u6210\u4e86mlogn,\u8fd9\u6837\u901a\u8fc7\u8fd9\u9053\u9898\u5c31\u8f7b\u677e\u52a0\u6109\u5feb\u4e86\n\n\u4f46\u662f\u6211\u4eec\u5ffd\u7565\u4e86\u4e00\u70b9\uff1a\n\n\u9898\u76ee\u4e2d\u8981\u6c42\u4e25\u683c\u6b21\u5c0f\uff0c\u4f46\u662f\u8fd9\u79cd\u505a\u6cd5\u5f88\u6709\u53ef\u80fd\u5c31\u662f\u548c\u6700\u5c0f\u751f\u6210\u6811\u76f8\u7b49\uff0c\u90a3\u4e48\u6211\u4eec\u8fd8\u9700\u8981\u89e3\u51b3\u8fd9\u4e2a\u96be\u9898\u3002\n\n\u5176\u5b9e\u4e5f\u4e0d\u7b97\u662f\u96be\u9898\uff0c\u53ea\u662f\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u591a\u8bb0\u5f55\u4e00\u4e2a\u6b21\u5927\u503c\uff0c\u6211\u4eec\u5047\u8bbew2[u][i]\u8868\u793a\u4eceu\u5411\u4e0a\u8df32^i\u4e2a\u5355\u4f4d\uff0c\u8fd9\u6bb5\u8def\u5f84\u4e0a\u7684\u6b21\u5927\u503c\u3002\n\n\u52a8\u6001\u8f6c\u79fb\u65b9\u7a0b\u5c31\u662f\uff1a\u5f53w[u][i]>w[f[u][i]][i]\u3000\u3000w2[u][i+1]=max(w[f[u][i]][i],w2[f[u][i]][i])\n\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u5f53w[u][i]<w[f[u][i]][i]\u3000\u3000w2[u][i+1]=max(w[u][i],w2[f[u][i]][i])\n\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u5f53\u76f8\u7b49\u65f6\uff0c\u5c31\u7ee7\u627f\u4e0a\u4e00\u4e2a\u6bb5\u7684\u5c31\u53ef\u4ee5\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5706\u6ee1\u7684\u89e3\u51b3\u4e86\u8fd9\u9053\u9898\uff0c\u603b\u590d\u6742\u5ea6\uff1amlogn+n*k\u3000\u3000k\u4e3a\u4e00\u4e2a\u6bd4\u8f83\u5c0f\u7684\u5e38\u6570\n\n\u8fd8\u6709\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\uff1a\n\n1.inf\u8981\u8db3\u591f\u5927\u3000\u3000\u56e0\u4e3a\u8fd9\u4e2a\u8fb9\u6743\u4e4b\u548c\u5f88\u5927\u5f88\u5927\n\n2.\u5efa\u6811\u65f6\u8981\u5efa\u53cd\u5411\u8fb9\uff0c\u8c01\u77e5\u9053\u7ed9\u5b9a\u7684\u4e24\u4e2a\u70b9\u76f8\u5bf9\u987a\u5e8f\u5462\uff1f\n\n\u6700\u540e\uff0c\u9644\u4e0a\u672c\u9898\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<iostream>\nusing namespace std;\n//Debug Yufenglin\n#define dej printf(\"Running\\n\");\n#define dep1(x) cout<<#x<<\"=\"<<x<<endl;\n#define dep2(x,y) cout<<#x<<\"=\"<<x<<' '<<#y<<\"=\"<<y<<endl;\n#define dep3(x,y,z) cout<<#x<<\"=\"<<x<<' '<<#y<<\"=\"<<y<<' '<<#z<<\"=\"<<z<<endl;\n\n//Standfor Yufenglin\n#define LL long long\n#define LB long double\n#define reg register\n#define il inline\n#define inf 1e8\n#define maxn 100000\n#define maxm 300000\n\nstruct EDGE\n{\n    LL u,v,w;\n};\nstruct TREE\n{\n    LL to,val,nxt;\n};\nTREE tree[maxm+5];\nEDGE edge[maxm+5];\nLL n,m;\nLL fa[maxn+5],f[maxn+5][30],w1[maxn+5][30],maxw1,maxw2,cnt,num;\nLL head[maxn+5],dep[maxn+5],w2[maxn+5][30],ans,minans=1e16,sum;\nbool vis[maxm+5];\n\nbool cmp(EDGE x,EDGE y)\n{\n    return x.w<y.w;\n}\nvoid add(LL x,LL y,LL z)\n{\n    edge[++cnt].u=x;\n    edge[cnt].v=y;\n    edge[cnt].w=z;\n}\nvoid addedge(LL x,LL y,LL z)\n{\n    tree[++num].to=y;\n    tree[num].val=z;\n    tree[num].nxt=head[x];\n    head[x]=num;\n}\nLL find(LL x)\n{\n    if(fa[x]==x) return x;\n    return fa[x]=find(fa[x]);\n}\nvoid dfs(LL u,LL fa)\n{\n    dep[u]=dep[fa]+1;\n    f[u][0]=fa;\n    for(int i=0; i<=25; i++)\n    {\n        f[u][i+1]=f[f[u][i]][i];\n        w1[u][i+1]=max(w1[u][i],w1[f[u][i]][i]);\n        w2[u][i+1]=max(w2[u][i],w2[f[u][i]][i]);\n        if(w1[u][i]>w1[f[u][i]][i]) w2[u][i+1]=max(w2[u][i+1],w1[f[u][i]][i]);\n        if(w1[u][i]<w1[f[u][i]][i]) w2[u][i+1]=max(w2[u][i+1],w1[u][i]);\n    }\n    for(int i=head[u]; i; i=tree[i].nxt)\n    {\n        if(tree[i].to==fa) continue;\n        w1[tree[i].to][0]=tree[i].val;\n        dfs(tree[i].to,u);\n    }\n}\nLL LCA(LL x,LL y)\n{\n    if(dep[x]<dep[y]) swap(x,y);\n    for(int i=25; i>=0; i--)\n    {\n        if(dep[f[x][i]]>=dep[y])\n        {\n            x=f[x][i];\n        }\n        if(x==y) return x;\n    }\n    for(int i=25; i>=0; i--)\n    {\n        if(f[x][i]!=f[y][i])\n        {\n            x=f[x][i];\n            y=f[y][i];\n        }\n    }\n    return f[x][0];\n}\nLL query(LL x,LL y,LL d)\n{\n    LL anst=-1;\n    for(int i=25;i>=0;i--)\n    {\n        if(dep[f[x][i]]>=dep[y])\n        {\n            if(d!=w1[x][i]) anst=max(anst,w1[x][i]);\n            else anst=max(anst,w2[x][i]);\n            x=f[x][i];\n        }\n    }\n    return anst;\n}\nint main()\n{\n    scanf(\"%lld%lld\",&n,&m);\n    for(int i=1; i<=m; i++)\n    {\n        LL x,y,z;\n        scanf(\"%lld%lld%lld\",&x,&y,&z);\n        add(x,y,z);\n    }\n    sort(edge+1,edge+cnt+1,cmp);\n    for(int i=1; i<=n; i++) fa[i]=i;\n    for(int i=1; i<=m; i++)\n    {\n        if(find(edge[i].u)!=find(edge[i].v))\n        {\n            addedge(edge[i].u,edge[i].v,edge[i].w);\n            addedge(edge[i].v,edge[i].u,edge[i].w);\n            fa[find(edge[i].u)]=find(edge[i].v);\n            ans+=edge[i].w;\n            vis[i]=1;\n            sum++;\n        }\n        if(sum==n-1) break;\n    }\n    for(int i=1;i<=n;i++) w2[i][0]=-1;\n    dfs(1,0);\n    for(int i=1; i<=m; i++)\n    {\n        if(vis[i]==0)\n        {\n            LL lca=LCA(edge[i].u,edge[i].v);\n            LL maxu=query(edge[i].u,lca,edge[i].w);\n            LL maxv=query(edge[i].v,lca,edge[i].w);\n            minans=min(minans,ans-max(maxu,maxv)+edge[i].w);\n        }\n    }\n    printf(\"%lld\\n\",minans);\n    return 0;\n}\n```\n",
        "postTime": 1554390376,
        "uid": 133227,
        "name": "\u4e8e\u4e30\u6797",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "\u3000\u3000\u601d\u8def\u5927\u4f53\u4e00\u81f4:\u5148\u7528$kruskal$\u6c42\u51fa$MST$,\u518d\u7528\u901a\u8fc7\u52a0\u8fb9\u548c\u5220\u8fb9\u7684\u64cd\u4f5c\u6c42\u89e3.\u5bf9\u6b64\u5c31\u4e0d\u591a\u8bf4\u4e86.\u672c\u7bc7\u9898\u89e3\u4e3b\u8981\u8ba8\u8bba**\u5220\u8fb9\u64cd\u4f5c**.\n\n1. \u82e5\u53bb\u6389**\u4e25\u683c**\u8fd9\u4e00\u8981\u6c42,\u90a3\u4e48\u8981\u5220\u9664\u7684\u8fb9\u5373\u4e3a$MST$\u4e0a\u4e24\u70b9\u95f4\u7684\u6700\u5927\u6743\u503c.\u5bf9\u6b64,\u53ef\u4ee5\u8003\u8651\u7528**kruskal\u91cd\u6784\u6811**,\u6811\u4e0a\u4e24\u70b9\u95f4\u7684$LCA$\u5373\u4e3a\u6240\u6c42.\n2. \u8981\u6c42**\u4e25\u683c**\u7684\u8bdd,\u76f4\u63a5\u5224\u65ad\u5373\u53ef,\u82e5$LCA$\u7684\u70b9\u6743\u4e0e\u5f53\u524d\u679a\u4e3e\u8fb9\u7684\u70b9\u6743\u76f8\u540c, \u66b4\u529b\u5730\u904d\u5386\u4e00\u4e0b\u4e24\u70b9\u95f4\u7684\u975e\u53f6\u5b50\u8282\u70b9\u5373\u53ef\n\n\u3000\u3000PS:\u5f53\u7136,$LCA$\u7684\u8fc7\u7a0b\u8fd8\u662f\u53ef\u4ee5\u4f18\u5316\u7684,\u8f6c\u6210\u6c42$RMQ$,\u53ef\u4ee5\u505a\u5230$O(1)$\u7684\u67e5\u8be2,$\\pm RMQ$\u7684\u8bdd,\u53ef\u4ee5\u505a\u5230$O(n)$\u7684\u9884\u5904\u7406 (~~\u7136\u800c\u5e76\u4e0d\u4f1a~~)\n\n  \n```\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n\n#define IL inline\n\nusing namespace std;\ntypedef long long ll;\n\nIL int read()\n{\n    int sum = 0;\n    bool k = 1;\n    char c = getchar();\n    for(;'0' > c || c > '9'; c = getchar())\n    if(c == '-') k = 0;\n    for(;'0' <= c && c <= '9'; c = getchar())\n        sum = sum * 10 + (c - '0');\n    return k ? sum : -sum;\n}\n\nint n, m;\n\nstruct Side\n{\n    int u, v, w;\n    bool f;\n    bool operator < (const Side &b) const\n    {\t\n        return w < b.w;\n    }\n}side[300005];\n\nint fa[200005][18];\nint dep[200005];\nint weight[200005];\nint lg[200005]; // \u6253\u6807,\u5361\u5361\u5e38\n\nint pa[200005];//\u5e76\u67e5\u96c6\nIL int find(int x) { return pa[x] = (pa[x] == x ? x : find(pa[x])); }\nIL bool join(int x, int y, int z, int &T)\n{\n    int x1 = find(x), y1 = find(y);\n    if(x1 == y1) return 0;\n    ++T;\n    fa[x1][0] = fa[y1][0] = T + n;\n    weight[T + n] = z;\n    \n    pa[x1] = pa[y1] = T + n;\n    \n    return 1;\n}\n\nIL ll kru()\n{\n    sort(side + 1, side + m + 1);\n    \n    for(int i = 1; i <= n; ++i)\n    {\n        pa[i] = i; pa[i + n] = i + n;\n    }\n    \n    ll sum = 0;\n    int T = 0;\n    for(int i = 1; i <= m && T < n; ++i)\n    if(join(side[i].u, side[i].v, side[i].w, T))\n    {\n        side[i].f = 1;\n        //printf(\"%d\\n\",side[i].w);\n        sum += side[i].w;\n        //printf(\"%d\\n\", sum);\n    }\n    return sum;\n}\n\nIL int get_dep(int u)\n{\n    if(dep[u] != -1) return dep[u];\n    if(!fa[u][0]) return dep[u] = 0;\n    return dep[u] = get_dep(fa[u][0]) + 1;\n}\n\nIL void lca()\n{\n    int n2 = (n << 1) - 1;\n    memset(dep, -1, sizeof(dep));\n    for(int i = 1; i <= n2; ++i)\n    if(dep[i] == -1)\n        get_dep(i);\n    //\u592a\u61d2\u4e0d\u60f3\u5efa\u6811,\u76f4\u63a5\u8bb0\u5fc6\u5316\u6c42dep\n    for(int i = 2; i <= n2; ++i)\n        lg[i] = lg[i >> 1] + 1;\n    for(int j = 1; j <= lg[n2]; ++j)\n    for(int i = 1; i <= n2; ++i)\n    if(fa[i][j - 1])\n        fa[i][j] = fa[fa[i][j - 1]][j - 1];\n}\n\nIL void swap_(int &x, int &y) { int tmp = x; x = y; y = tmp; }\n\nIL int query(int x, int y)\n{\n    if(dep[x] < dep[y]) swap_(x, y);\n    for(int t = dep[x] - dep[y]; t; t -= t & (-t))\n        x = fa[x][lg[t & (-t)]];\n    //\u871c\u6c41\u8df3\u9ad8\u5ea6, lg\u8868 + lowbit\u4f18\u5316\n    if(x == y) return x;\n    for(int i = lg[dep[x]]; i >= 0; --i)\n    if(fa[x][i] != fa[y][i])\n    {\n        x = fa[x][i];\n        y = fa[y][i];\n    }\n    return fa[x][0];\n}\n\nIL void solve(ll sum)\n{\n    ll det = -1, w;\n    for(int i = 1, p, x, y; i <= m; ++i)\n    if(!side[i].f)\n    {\n        x = side[i].u; y = side[i].v;\n        p = query(x, y);\n        w = side[i].w - weight[p];\n        if(w)\n        {\n            if(det == -1 || w < det) det = w;\n        }else\n        if(!w)\n        {\n            for(x = fa[x][0]; x != p; x = fa[x][0])\n            if(weight[x] != side[i].w && weight[x] > w)\n                w = weight[x];\n            for(y = fa[y][0]; y != p; y = fa[y][0])\n            if(weight[y] != side[i].w && weight[y] > w)\n                w = weight[y];\n            det = weight[p] - w;\n        }\n    }\n    printf(\"%lld\\n\", det + sum);\n}\n\nint main()\n{\n    n = read(); m = read();\n    for(int i = 1; i <= m; ++i)\n    {\n        side[i].u = read(); side[i].v = read(); side[i].w = read();\n    }\n    ll sum = kru();\n    lca();\n    solve(sum);\n    return 0;\n}\n```",
        "postTime": 1535344652,
        "uid": 48277,
        "name": "SCKer",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "**\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811**\n\n\n\u9996\u5148\u770b\u770b\u5982\u679c\u4e0d\u4e25\u683c\u6211\u4eec\u600e\u4e48\u529e\u3002\n\n[\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u600e\u4e48\u505a](https://zhuanlan.zhihu.com/p/24950356)\n\n\n\u7531\u6b64\uff0c\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u7ed3\u8bba\uff0c\u6c42\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u53ea\u9700\u8981\u5148\u7528kruskal\u7b97\u6cd5\u6c42\u5f97\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u66b4\u529b\u679a\u4e3e\u975e\u6811\u8fb9\uff0c\u66ff\u6362\u8def\u5f84\u6700\u5927\u8fb9\u5373\u53ef\u3002\n\n\n\u90a3\u8981\u662f\u4e25\u683c\u5462\uff1f\n\n\n\u6211\u4eec\u53d1\u73b0\u5982\u679c\u662f\u4e25\u683c\u7684\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u5c06\u4e00\u6761\u8fb9\u66ff\u6362\u53e6\u4e00\u6761\u65f6\uff0c\u8fd9\u4e24\u6761\u8fb9\u7684\u6743\u503c\u4e00\u5b9a**\u4e0d\u76f8\u540c**\n\n\n\u4f46\u662f\uff0c\u6211\u4eec\u77e5\u9053\uff0c**\u66ff\u6362\u8fb9**\u80af\u5b9a\u5927\u4e8e\u7b49\u4e8e**\u88ab\u66ff\u6362\u8fb9**\uff08\u56e0\u4e3a\u5982\u679c**\u66ff\u6362\u8fb9**\u5c0f\u4e8e**\u88ab\u66ff\u6362\u8fb9**\uff0c\u5c31\u5b58\u5728\u4e00\u9897\u5305\u542b**\u66ff\u6362\u8fb9**\u800c\u4e0d\u5305\u542b**\u88ab\u66ff\u6362\u8fb9**\u7684\u4e00\u68f5\u6743\u503c\u66f4\u5c0f\u7684\u751f\u6210\u6811\uff0c\u539f\u6811\u5c31\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e86\uff09\n\n\n\u6240\u4ee5\u66ff\u6362\u8fb9\u8981\u4e48\u7b49\u4e8e\u8def\u5f84\u4e0a\u6700\u5927\u7684\u8fb9\uff0c\u8981\u4e48\u6bd4\u6700\u5927\u7684\u8fb9\u8fd8\u5927\u3002\n\n\n\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u8def\u5f84\u4e2d\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\uff0c\u5f53**\u66ff\u6362\u8fb9**\u7b49\u4e8e\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\uff0c\u6211\u4eec\u76f4\u63a5\u6362\u7528\u4e25\u683c\u6b21\u5927\u503c\u5373\u53ef\u3002\n\n\n**\u4e00\u4e9b\u7ec6\u8282**\n\n\n1.\u6211\u7ef4\u62a4\u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u6700\u5927\u503c\u7528\u7684\u662fLCT\uff0c\u4f46\u662f\u6b63\u89e3\u662fLCA\u3002LCT\u5fc5\u987b\u8981\u5f00O2\u624d\u80fd\u8dd1\u8fc7\u53bb\u3002\n\n\n2.\u6570\u7ec4\u8981\u5f00\u8db3\u591f\u5927\uff0c\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u65f6\u8981\u5f00long long,\u4e0d\u7136\u4f1a\u7206int\n\n\n\n**\u6211\u7684\u4ee3\u7801**\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#define rg register int\n#define ll long long\n#define RG register\n#define il inline\nusing namespace std;\n\nil ll gi() {\n    RG ll x=0;rg o=0;RG char ch=getchar();\n    while(ch!='-'&&(ch<'0'||'9'<ch)) ch=getchar();\n    if(ch=='-') o=1,ch=getchar();\n    while('0'<=ch&&ch<='9') x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n    return o?-x:x;\n}\nint n,m;\n#define SZ 7000010\n\nstruct Edge {int a,b;ll w;}e[SZ];\nbool cmp(Edge a,Edge b) {return a.w<b.w;}\n\n#define lson tr[x].ch[0]\n#define rson tr[x].ch[1]\nstruct Splaytree{int fa,ch[2],rev,mxp,mxp2;}tr[SZ];\nil void pushup(rg x)\n{\n    tr[x].mxp=x; tr[x].mxp2=0;\n    if(e[tr[lson].mxp].w>e[tr[x].mxp].w) tr[x].mxp=tr[lson].mxp;\n    if(e[tr[rson].mxp].w>e[tr[x].mxp].w) tr[x].mxp=tr[rson].mxp;\n    // \u7ef4\u62a4 \u6700\u5927\n    if(e[tr[lson].mxp].w!=e[tr[x].mxp].w && (e[tr[lson].mxp].w>e[tr[x].mxp].w||!tr[x].mxp2) ) tr[x].mxp2=tr[lson].mxp;\n    if(e[tr[lson].mxp2].w!=e[tr[x].mxp].w && (e[tr[lson].mxp2].w>e[tr[x].mxp].w||!tr[x].mxp2) ) tr[x].mxp2=tr[lson].mxp2;    \n    if(e[tr[rson].mxp].w!=e[tr[x].mxp].w && (e[tr[rson].mxp].w>e[tr[x].mxp].w||!tr[x].mxp2) ) tr[x].mxp2=tr[rson].mxp;\n    if(e[tr[rson].mxp2].w!=e[tr[x].mxp].w && (e[tr[rson].mxp2].w>e[tr[x].mxp].w||!tr[x].mxp2) ) tr[x].mxp2=tr[rson].mxp2;        \n    // \u7ef4\u62a4\u4e25\u683c\u6b21\u5927\n}\nil void pushdown(rg x)\n{\n    if(tr[x].rev)\n    {\n        tr[lson].rev^=1,tr[rson].rev^=1;\n        swap(lson,rson),tr[x].rev=0;\n    }\n}\nil bool isroot(rg x)\n{\n    return tr[tr[x].fa].ch[0]!=x && tr[tr[x].fa].ch[1]!=x;\n}\nil void rotate(rg x)\n{\n    rg y=tr[x].fa,z=tr[y].fa;\n    rg k=tr[y].ch[1]==x;\n    if(!isroot(y)) tr[z].ch[y==tr[z].ch[1]]=x;tr[x].fa=z;\n    tr[y].ch[k]=tr[x].ch[k^1],tr[tr[x].ch[k^1]].fa=y;\n    tr[x].ch[k^1]=y,tr[y].fa=x;\n    pushup(y),pushup(x);\n}\nint stk[SZ],top; \nil void splay(rg x)\n{\n    stk[top=1]=x;\n    for(rg i=x;!isroot(i);i=tr[i].fa) stk[++top]=tr[i].fa;\n    for(;top;--top) pushdown(stk[top]);\n    while(!isroot(x))\n    {\n        rg y=tr[x].fa,z=tr[y].fa;\n        if(!isroot(y))\n         (tr[y].ch[0]==x)^(tr[z].ch[0]==y)?rotate(x):rotate(y);\n        rotate(x);\n    }\n}\nil void access(rg x) {for(rg y=0;x;y=x,x=tr[x].fa)splay(x),rson=y,pushup(x);}\nil void makeroot(rg x) {access(x);splay(x);tr[x].rev^=1;}\nil int findroot(rg x) {access(x);splay(x);while(lson) x=lson;return x;}\nil void split(rg x,rg y) {makeroot(x);access(y);splay(y);}\nil int query(rg x,rg y) {split(x,y);return tr[y].mxp;} //\u6c42x \u5230 y\u6700\u5927\u503c \nil int query2(rg x,rg y) {split(x,y);return tr[y].mxp2;} // \u6c42x \u5230 y\u4e25\u683c\u6b21\u5927\u503c\nil void link(rg x,rg y) {makeroot(x);tr[x].fa=y;}\nil void cut(rg x,rg y) {split(x,y);if(tr[y].ch[0]==x)tr[y].ch[0]=tr[x].fa=0;}\nint fa[SZ];int find_fa(rg x) {if(x!=fa[x]) fa[x]=find_fa(fa[x]);return fa[x];} //\u4e00\u884c\u5e76\u67e5\u96c6\nbool check[SZ];\n\nint main()\n{\n\n    n=gi(),m=gi();\n    for(rg i=1;i<=m;++i) e[i]=(Edge){gi(),gi(),gi()};\n    // \u5148\u6c42\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811 ans \u8bb0\u5f55\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u7684\u5927\u5c0f\n    RG ll ans=0;\n    sort(e+1,e+1+m,cmp);    \n    for(rg i=1;i<=n;++i) fa[i]=i; // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    for(rg f1,f2,i=1;i<=m;++i)\n    {\n        f1=find_fa(e[i].a);\n        f2=find_fa(e[i].b);\n        if(f1!=f2)\n        {\n            check[i]=1; // check=1 \u8868\u793a\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u6709\u8fd9\u4e00\u6761\u8fb9 \u53cd\u4e4b\n            fa[f1]=f2;\n            ans+=e[i].w;\n            link(e[i].a+m,i);\n            link(e[i].b+m,i);\n        }\n    }\n\n#define INF 2147483647\n#define Getmin(a,b) (a)=(a)>(b)?(b):(a) \n\n    RG ll Ans=INF;\n    for(rg f1,f2,i=1;i<=m;++i)\n    {\n        if(check[i]) continue; //\u6211\u4eec\u9009\u62e9\u4e0d\u518d\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\n        rg mxp=query(e[i].a+m,e[i].b+m);\n        if(e[mxp].w==e[i].w)\n        {\n            rg mxp2=query2(e[i].a+m,e[i].b+m);\n            if(!mxp2 || e[mxp2].w==e[mxp].w) continue;\n            Getmin(Ans,e[i].w-e[mxp2].w);\n        }\n        else Getmin(Ans,e[i].w-e[mxp].w);\n    }\n\n    cout<<ans+Ans;\n    return 0;\n}\n\n```",
        "postTime": 1517917100,
        "uid": 47725,
        "name": "stdlifg",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4180 \u3010[Beijing2010\u7ec4\u961f]\u6b21\u5c0f\u751f\u6210\u6811Tree\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u6c42\u8fb9\u6743\u7b2c\u4e8c\u5c0f\u7684\u751f\u6210\u6811\u3002\n\n\u9996\u5148\u505a\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u8003\u8651\u6b21\u5c0f\u751f\u6210\u6811\u5bf9\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u6765\u8bf4\u53ea\u6539\u53d8\u4e00\u6761\u8fb9.\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e00\u6761\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u3002\n\n\u7528**\u6811\u4e0a\u500d\u589e**\u67e5\u51fa\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\uff08\u5176\u76f8\u5f53\u4e8e\u628a\u8fd9\u6761\u8fb9\u8fde\u8d77\u6765,\u8fd9\u65f6\u5f62\u6210\u4e86\u4e00\u4e2a\u73af\uff0c\u770b\u628a\u6700\u5927\u8fb9\u8fd8\u662f\u6b21\u5927\u8fb9\u5220\u6389\uff0c\u80fd\u4f7f\u5176\u5f62\u6210\u6b21\u5c0f\u751f\u6210\u6811\uff09\uff0c\n\n\u7136\u540e\u548c\u5f53\u524d\u8fb9\u8ba1\u7b97\u4e00\u4e0b\u5dee\u503c\uff0c\u53d6\u5176\u5c0f\u8005\u52a0\u4e0a\u5373\u53ef.\n\n\uff08\u5f53\u7136**\u6811\u94fe\u5256\u5206+ST\u8868**\u4e5f\u53ef\uff09\n\n~~\u6ce8\u610f\u5f00long long\u548c\u5f00\u591f\u7a7a\u95f4~~\n```\n#include<iostream>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#define ll long long\n#define re register\n#define il inline\n#define fp(i,a,b) for(re int i=a;i<=b;i++)\n#define fq(i,a,b) for(re int i=a;i>=b;i--)\nusing namespace std;\nconst int N=2000005;\nll n,m,cnt,f[N],h[N],vis[N],d[N];\nll ans=1e18,s,ant1[N/10][25],ant2[N/10][25];//ant1\u5b58\u7956\u5148\uff0cant2\u5b58\u6700\u5927\u503c\nstruct xzy\n{\n  int u,v;ll w;\n  bool operator < (const xzy &p)\n  {\n    return w<p.w;\n  }\n}a[N];\nstruct Edge\n{\n  int to,next;ll w;\n}e[N];\nil void add(re int u,re int v,re ll w)\n{\n  e[++cnt]=(Edge){v,h[u],w};h[u]=cnt;\n  e[++cnt]=(Edge){u,h[v],w};h[v]=cnt;\n}\nil ll gi()\n{\n  re ll x=0,t=1;\n  re char ch=getchar();\n  while((ch<'0'||ch>'9')&&ch!='-') ch=getchar();\n  if(ch=='-') t=-1,ch=getchar();\n  while(ch>='0'&&ch<='9') x=x*10+ch-48,ch=getchar();\n  return x*t;\n}\nil int find(re int x){return f[x]==x?x:f[x]=find(f[x]);}\nil void kruskal()\n{\n  ll ans=0;\n  fp(i,1,n) f[i]=i;\n  sort(a+1,a+1+m);\n  fp(i,1,m)\n    {\n      re int u=find(a[i].u),v=find(a[i].v);\n      if(u!=v) f[u]=v,s+=a[i].w,add(a[i].u,a[i].v,a[i].w),vis[i]=1;\n    }\n}\nil void dfs(re int u,re int fa,re int deep)//\u9884\u5904\u7406\u6df1\u5ea6\n{\n  ant1[u][0]=fa;d[u]=deep;\n  for(re int i=h[u];i;i=e[i].next)\n    {\n      re int v=e[i].to;\n      if(v==fa) continue;\n      ant2[v][0]=e[i].w;\n      dfs(v,u,deep+1);\n    }\n}\nil int getLCA(re int x,re int y)\n{\n  if(d[x]<d[y]) swap(x,y);\n  while(d[x]^d[y]) x=f[x];\n  while(x^y) x=f[x],y=f[y];\n  return x;\n}\nil void work()//\u9884\u5904\u7406\u500d\u589e\u6570\u7ec4\n{\n  fp(j,1,20)\n    fp(i,1,n)\n    {\n      ant1[i][j]=ant1[ant1[i][j-1]][j-1];\n      ant2[i][j]=max(ant2[ant1[i][j-1]][j-1],ant2[i][j-1]);\n    }\n}\nil ll getmax(re int x,re int y,re ll z)\n{\n  if(y==-1) return 0;\n  if(ant2[x][y]==z) return max(getmax(x,y-1,z),getmax(ant1[x][y-1],y-1,z));\n  return ant2[x][y];\n}\nil ll Query(re int x,re int y,re ll z)//\u6811\u4e0a\u500d\u589e\u627e\u51fa\u6700\u5927\u6b21\u5927\u503c\n{\n  ll mx=0;\n  if(d[x]<d[y]) swap(x,y);\n  if(d[x]^d[y])\n    fq(i,20,0)\n      if(d[ant1[x][i]]>=d[y]) mx=max(mx,getmax(x,i,z)),x=ant1[x][i];\n  if(x==y) return z-mx;\n  fq(i,20,0)\n    if(ant1[x][i]^ant1[y][i])\n      {\n\tmx=max(mx,max(getmax(x,i,z),getmax(y,i,z)));\n\tx=ant1[x][i],y=ant1[y][i];\n      }\n  return z-max(mx,max(getmax(x,0,z),getmax(y,0,z)));\n}\nint main()\n{\n  n=gi();m=gi();\n  fp(i,1,m) a[i].u=gi(),a[i].v=gi(),a[i].w=gi();\n  kruskal();//\u6700\u5c0f\u751f\u6210\u6811\n  dfs(1,1,1);\n  work();\n  fp(i,1,m)\n    if(!vis[i])//\u5728\u6700\u5c0f\u751f\u6210\u6811\u5916\u7684\u8fb9\n      {\n\tre ll q=Query(a[i].u,a[i].v,a[i].w);\n\tif(q) ans=min(ans,s+q);\n      }\n  printf(\"%lld\\n\",ans);\n  return 0;\n}\n```\n\n",
        "postTime": 1517916969,
        "uid": 21534,
        "name": "ysner",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4180 \u3010[Beijing2010\u7ec4\u961f]\u6b21\u5c0f\u751f\u6210\u6811Tree\u3011"
    },
    {
        "content": "~~\u5176\u5b9e\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u6a21\u677f\u9898~~ \n\n## \u4e00\u3001\u9898\u76ee\n\n[\u70b9\u6b64\u770b\u9898](https://www.luogu.org/problem/P4180)\n\n## \u4e8c\u3001\u89e3\u6cd5\n\n\u53d1\u73b0\u6b21\u5c0f\u751f\u6210\u6811\u548c\u6700\u5c0f\u751f\u6210\u6811\u53ea\u6709\u4e00\u6761\u8fb9\u7684\u5dee\u5f02\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u8003\u8651\u6bcf\u4e00\u6761\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u5982\u679c\u52a0\u4e0a\u53bb\u7684\u589e\u91cf\uff0c\u53d1\u73b0\u5b83\u662f\u975e\u8d1f\u7684\uff0c\u8981\u751f\u6210\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u80af\u5b9a\u8981\u6700\u5c0f\u5316\u589e\u91cf\uff0c\u6240\u4ee5\u53ea\u66ff\u6362\u4e00\u6761\u8fb9\u662f\u6700\u4f18\u7684\u3002\n\n\u8003\u8651\u6bcf\u4e00\u6761\u8fb9\u53bb\u66ff\u6362\u6811\u4e0a\u7684\u8fb9\uff0c\u5148\u52a0\u5165\u8fd9\u6761\u8fb9\uff0c\u4f1a\u4e0e\u6811\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u53d1\u73b0\u73af\u4e0a\u7684\u6700\u5927\u8fb9\u5c31\u662f\u6211\u4eec\u66ff\u6362\u7684\u6811\u8fb9\uff0c\u4f46\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u4e25\u683c\u6b21\u5c0f\uff0c\u5c31\u4e0d\u80fd\u53d6\u548c\u52a0\u5165\u8fb9\u6743\u503c\u76f8\u7b49\u7684\u6811\u8fb9\uff0c\u66b4\u529b\u8dd1\u5373\u53ef\u3002\n\n\u8003\u8651\u5bf9\u66b4\u529b\u4f18\u5316\uff0c\u53d1\u73b0\u627e\u6700\u5927\u8fb9\u7684\u8fc7\u7a0b\u672c\u8d28\u5c31\u662f\u4e00\u4e2a$Lca$\uff0c\u6211\u4eec\u7528\u500d\u589e\u7ef4\u62a4\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\uff0c\u7136\u540e\u8dd1$Lca$\u5c31\u884c\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log n)$\u3002\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define int long long\nusing namespace std;\nconst int MAXN = 100005;\nconst int inf = (1ll<<62);\nint read()\n{\n    int x=0,flag=1;char c;\n    while((c=getchar())<'0' || c>'9') if(c=='-') flag=-1;\n    while(c>='0' && c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\n    return x*flag;\n}\nint n,m,tot,ans=inf,f[MAXN],p[MAXN],dep[MAXN];\nint fa[MAXN][20],Max[MAXN][20],sub[MAXN][20];\nlong long mst;\nstruct edge\n{\n    int v,c,next;\n}e[2*MAXN];\nstruct node\n{\n    int u,v,c;\n    bool operator < (const node &x) const\n    {\n        return c<x.c;\n    }\n}a[3*MAXN];\nint op(int a,int b,int lim)\n{\n    if(a>=lim) return b>=lim?0:b;\n    if(b>=lim) return a>=lim?0:a;\n    return max(a,b);\n}\nint findSet(int x)\n{\n    if(x^p[x]) p[x]=findSet(p[x]);\n    return p[x];\n}\nvoid MST()\n{\n    sort(a+1,a+1+m);\n    for(int i=1;i<=n;i++)\n        p[i]=i;\n    for(int i=1;i<=m;i++)\n    {\n        int u=a[i].u,v=a[i].v,c=a[i].c,x=findSet(u),y=findSet(v);\n        if(x==y) continue;\n        e[++tot]=edge{v,c,f[u]},f[u]=tot;\n        e[++tot]=edge{u,c,f[v]},f[v]=tot;\n        mst+=c;\n        p[x]=y;\n    }\n}\nvoid dfs(int u,int par)\n{\n    fa[u][0]=par;\n    dep[u]=dep[par]+1;\n    for(int i=1;i<20;i++)\n    {\n        int pos=fa[u][i-1];\n        Max[u][i]=max(Max[u][i-1],Max[pos][i-1]);\n        sub[u][i]=max(sub[u][i-1],sub[pos][i-1]);\n        fa[u][i]=fa[pos][i-1];\n        if(Max[u][i-1]^Max[pos][i-1])\n            sub[u][i]=max(sub[u][i],min(Max[u][i-1],Max[pos][i-1]));\n    }\n    for(int i=f[u];i;i=e[i].next)\n        if(e[i].v^par)\n        {\n            Max[e[i].v][0]=e[i].c;\n            sub[e[i].v][0]=-inf;\n            dfs(e[i].v,u);\n        }\n}\nvoid updata(int &x,int u,int i,int lim)\n{\n    x=op(x,Max[u][i],lim);\n    x=op(x,sub[u][i],lim);\n}\nint lca(int u,int v,int lim)\n{\n    int res=-inf;\n    for(int i=19;i>=0;i--)\n    {\n        if(dep[fa[u][i]]>=dep[v]) updata(res,u,i,lim),u=fa[u][i];\n        if(dep[fa[v][i]]>=dep[u]) updata(res,v,i,lim),v=fa[v][i];\n    }\n    if(u==v) return res;\n    for(int i=19;i>=0;i--)\n        if(fa[u][i]^fa[v][i])\n        {\n            updata(res,u,i,lim);updata(res,v,i,lim);\n            u=fa[u][i],v=fa[v][i];\n        }\n    updata(res,u,0,lim);updata(res,v,0,lim);\n    return res;\n}\nsigned main()\n{\n    n=read();m=read();\n    for(int i=1;i<=m;i++)\n    {\n        int u=read(),v=read(),c=read();\n        a[i]=node{u,v,c};\n    }\n    MST();\n    dfs(1,0);\n    for(int i=1;i<=m;i++)\n    {\n        int val=lca(a[i].u,a[i].v,a[i].c);\n        if(val!=-inf) ans=min(ans,a[i].c-val);\n    }\n    printf(\"%lld\\n\",ans+mst);\n}\n\n```\n\n**tips**\n\n1\u3001$lca$\u505a\u4e8c\u8fdb\u5236\u5206\u89e3\u662f\u8981\u4ece\u5927\u5230\u5c0f\u3002\n\n2\u3001\u6ce8\u610f\u8981\u5f00$long long$\u3002\n\n3\u3001\u6781\u5927\u503c\u7528$(1<<62)$\u3002\n",
        "postTime": 1570932991,
        "uid": 128239,
        "name": "C20203030",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.org/problem/P4180)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u6b21\u5c0f\u751f\u6210\u6811\u548c\u6700\u5c0f\u751f\u6210\u6811\u4e4b\u95f4\u5728\u6ca1\u6709\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\u60c5\u51b5\u4e0b\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u8fb9\u4e0d\u540c\u3002\u5982\u679c\u5b58\u5728\u591a\u6761\u8fb9\u4e0d\u540c\u7684\u8bdd\u5c31\u80af\u5b9a\u4e0d\u662f\u6b21\u5c0f\u7684\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u6539\u7684\u8fb9\u5230\u5e95\u662f\u54ea\u4e00\u6761\u5c31\u53ef\u4ee5\u4e86\u3002\u5148\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u8003\u8651\u52a0\u5165\u4e00\u6761\u65b0\u8fb9$(u,v,w)$\uff0c\u5219\u539f\u6811\u4e0a$(u,lca(u,v),v)$\u7684\u8def\u5f84\u4f1a\u53d8\u6210\u4e00\u4e2a\u73af\u3002\u663e\u7136\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u5728\u8fd9\u4e2a\u73af\u4e0a\u5220\u9664\u4e00\u6761\u8fb9\u91cd\u65b0\u53d8\u6210\u4e00\u68f5\u6811\u3002\u5982\u679c\u8fd9\u4e2a\u73af\u4e0a\u7684\u6700\u957f\u8fb9\u5220\u53bb\u4e4b\u540e\u751f\u6210\u6811\u7684\u6743\u503c\u548c\u6ca1\u53d8\uff0c\u6211\u4eec\u5c31\u8981\u5220\u9664\u6b21\u957f\u8fb9\uff1b\u5426\u5219\u5c31\u5220\u53bb\u6700\u957f\u8fb9\u3002\u5047\u5982\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u5730\u6c42\u51fa\u751f\u6210\u6811\u4e2d\u4e00\u6761\u8def\u5f84$(u,lca(u,v),v)$\u7684\u6700\u957f\u8fb9\u548c\u6b21\u957f\u8fb9\uff0c\u6211\u4eec\u626b\u4e00\u904d\u5c31\u53ef\u4ee5\u77e5\u9053\u7b54\u6848\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8003\u8651\u5feb\u901f\u6c42\u51fa\u6700\u957f\u8fb9\u548c\u6b21\u957f\u8fb9\u3002\u6211\u4eec\u6a21\u62df\u500d\u589e\uff0c\u6c42\u51fa\u4ece\u67d0\u4e2a\u70b9$u$\u4e0a\u8df3$2^j$\u6b65\u7ecf\u8fc7\u7684\u8fb9\u6743\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\uff0c\u9884\u5904\u7406\u65f6\u95f4\u540c\u6837\u662f$O(n\\log_2n)$\uff1b\u800c\u67e5\u8be2\u7684\u65f6\u5019\u7c7b\u4f3c\u4e8e$LCA$\u7684\u4e0a\u8df3\uff0c\u4e2d\u95f4\u66f4\u65b0\u51fa\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u5c31\u53ef\u4ee5\u4e86\uff0c\u5355\u6b21\u65f6\u95f4$O(\\log_2n)$\u3002  \n# \u4ee3\u7801\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <utility>\n#include <algorithm>\nusing namespace std; \n\ntypedef long long LL;\n\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 1e5 + 5, MAXM = 3e5 + 5, MAXLOG = 20;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\ntypedef pair<int, int> RT;\n\nstruct edge\n{\n\tint to, nxt, w;\n}Graph[MAXN * 2];\n\nstruct Edge\n{\n\tint from, to, w;\n\tbool operator < ( const Edge & other ) const { return w < other.w; }\n}E[MAXM];\n\nRT maxW[MAXN][MAXLOG];\nint f[MAXN][MAXLOG];\nint fa[MAXN], dep[MAXN];\nint head[MAXN];\nint N, M, cnt, lg2;\nbool used[MAXM];\n\nvoid addEdge( const int from, const int to, const int W )\n{\n\tcnt ++;\n\tGraph[cnt].w = W;\n\tGraph[cnt].to = to;\n\tGraph[cnt].nxt = head[from];\n\thead[from] = cnt;\n}\n\nvoid makeSet( const int siz ) { for( int i = 1 ; i <= siz ; i ++ ) fa[i] = i; }\nint findSet( const int u ) { return fa[u] ^ u ? ( fa[u] = findSet( fa[u] ) ) : fa[u] ; }\nbool unionSet( const int u, const int v )\n{\n\tint r1 = findSet( u ), r2 = findSet( v );\n\tif( r1 == r2 ) return false;\n\tfa[r1] = r2;\n\treturn true;\n}\n\nvoid DFS( const int u, const int fat )\n{\n\tf[u][0] = fat;\n\tdep[u] = dep[fat] + 1;\n\tint v;\n\tfor( int i = head[u] ; i ; i = Graph[i].nxt )\n\t{\n\t\tv = Graph[i].to;\n\t\tif( v ^ fat )\n\t\t\tmaxW[v][0] = RT( Graph[i].w, -INF ), \n\t\t\tDFS( v, u );\n\t}\n}\n\nvoid maintain( RT &a, const int val )\n{\n\tif( a.first < val ) a.second = a.first, a.first = val;\n\telse if( a.second < val ) a.second = val;\n}\n\nvoid init()\n{\n\tfor( int j = 1 ; j <= lg2 ; j ++ )\n\t\tfor( int i = 1 ; i <= N ; i ++ )\n\t\t{\n\t\t\tf[i][j] = f[f[i][j - 1]][j - 1];\n\t\t\tmaxW[i][j] = RT( -INF, -INF );\n\t\t\tmaintain( maxW[i][j], maxW[i][j - 1].first ), maintain( maxW[i][j], maxW[i][j - 1].second ),\n\t\t\tmaintain( maxW[i][j], maxW[f[i][j - 1]][j - 1].first ), maintain( maxW[i][j], maxW[f[i][j - 1]][j - 1].second );\n\t\t}\n}\n\nvoid balance( int &u, RT &a, const int steps )\n{\n\tfor( int i = 0 ; ( 1 << i ) <= steps ; i ++ )\n\t\tif( steps & ( 1 << i ) )\n\t\t\tmaintain( a, maxW[u][i].first ), \n\t\t\tmaintain( a, maxW[u][i].second ), \n\t\t\tu = f[u][i];\n}\n\nRT query( int u, int v )\n{\n\tRT r = RT( -INF, -INF );\n\tif( dep[u] > dep[v] ) balance( u, r, dep[u] - dep[v] );\n\tif( dep[v] > dep[u] ) balance( v, r, dep[v] - dep[u] );\n\tif( u == v ) return r;\n\tfor( int i = lg2 ; ~ i ; i -- )\n\t\tif( f[u][i] ^ f[v][i] )\n\t\t\tmaintain( r, maxW[u][i].first ), maintain( r, maxW[u][i].second ), \n\t\t\tmaintain( r, maxW[v][i].first ), maintain( r, maxW[v][i].second ),\n\t\t\tu = f[u][i], v = f[v][i];\n\tmaintain( r, maxW[u][0].first ), maintain( r, maxW[u][0].second );\n\tmaintain( r, maxW[v][0].first ), maintain( r, maxW[v][0].second );\n\treturn r;\n}\n\nint main()\n{\n\tread( N ), read( M );\n\tlg2 = log2( N );\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t\tread( E[i].from ), read( E[i].to ), read( E[i].w );\n\tstd :: sort( E + 1, E + 1 + M );\n\tmakeSet( N );\n\tLL MST = 0;\n\tint tot = 0;\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t{\n\t\tif( unionSet( E[i].from, E[i].to ) )\n\t\t\tMST += E[i].w, tot ++, used[i] = true,\n\t\t\taddEdge( E[i].from, E[i].to, E[i].w ), addEdge( E[i].to, E[i].from, E[i].w );\n\t\tif( tot == N - 1 ) break;\n\t}\n\tDFS( 1, 0 );\n\tinit();\n\tRT tmp;\n\tLL res = 0x3f3f3f3f3f3f3f3f;\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t\tif( ! used[i] )\n\t\t{\n\t\t\ttmp = query( E[i].from, E[i].to );\n\t\t\tif( MST - tmp.first + E[i].w > MST ) res = MIN( res, MST - tmp.first + E[i].w );\n\t\t\tif( MST - tmp.second + E[i].w > MST ) res = MIN( res, MST - tmp.second + E[i].w );\n\t\t}\n\twrite( res ), putchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1570857567,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[P4180][BJWC2010]\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811"
    },
    {
        "content": "[\u535a\u5ba2\u5185\u98df\u7528\u66f4\u4f73](https://blog.csdn.net/devout_/article/details/104571915)\n\n\u8fd9\u9898\u679c\u7136\u662f\u6a21\u677f\u9898\n\n\u4e00\u5806\u505a\u6cd5\n\n\u4f46\u662f\u6839\u672c\u601d\u60f3\u662f\u4e00\u6837\u7684\n\n\u90fd\u662f\u5148\u8dd1\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u4e0b\u8def\u5f84\u4e0a\u6700\u5927\u503c\u548c\u5c0f\u4e8e\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n\n\u4e3b\u8981\u7684\u5b9e\u73b0\u65b9\u6cd5\u6709\u4e09\u79cd\n\n\n\n**1.kruskal+\u6811\u5256**\n\n\u590d\u6742\u5ea6\u662f$O(mlog^2n)$\uff0c\u4f18\u70b9\u662f\u5b9e\u73b0\u7b80\u5355\uff08\u53ea\u7528\u8003\u8651\u5de6\u53f3\u513f\u5b50\u7684\u5408\u5e76\uff09\uff0c\u7ec6\u8282\u5c11\uff0c\uff08\u5728\u540c\u590d\u6742\u5ea6\u6c34\u5e73\u4e0b\uff09\u5e38\u719f\u5c0f\uff0c\u7f3a\u70b9\u662f\u590d\u6742\u5ea6\u6709\u70b9\u9ad8\uff0c\u4ee3\u7801\u957f\u5ea6\u5927\uff0c\u4f46\u662f\u8fd9\u9053\u9898$10^5$\u7ea7\u522b\u7684\u6570\u636e\u590d\u6742\u5ea6\u662f\u6b63\u786e\u7684\n\n\u6240\u4ee5\u6211\u4eec\u4e3b\u8981\u6765\u8bf4\u4e00\u4e0b\u8fd9\u4e2a\u6811\u5256\u7684\u505a\u6cd5\uff08\u81ea\u8ba4\u4e3a\u662f\u6700\u7a33\u7684\u4e00\u79cd\uff09\n\n\u5148\u8dd1\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u533a\u95f4\u6700\u5927\u503c\u548c**\u533a\u95f4\u5c0f\u4e8e\u6700\u5927\u503c\u7684\u6700\u5927\u503c**\n\n\u90a3\u4e48pushup\u5927\u6982\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\n\n```cpp\nvoid pushup(int u){\n\tif(seg[lc]._max==seg[rc]._max)seg[u]._max=seg[lc]._max,seg[u].__max=max(seg[lc].__max,seg[rc].__max);\n\telse seg[u]._max=max(seg[lc]._max,seg[rc]._max),seg[u].__max=min(seg[lc]._max,seg[rc]._max);\t\n}\n```\n\u5176\u4e2d_max\u662f\u6700\u5927\u503c\uff0c__max\u662f\u5c0f\u4e8e\u6700\u5927\u503c\u7684\u6700\u5927\u662f~~\u53d8\u91cf\u540d\u6bd2\u7624\u52ff\u55b7~~\n\n\u89e3\u91ca\u4e00\u4e0b\u5c31\u662f\u5982\u679c\u5de6\u53f3\u513f\u5b50\u7684\u6700\u5927\u503c\u76f8\u7b49\uff0c\u90a3\u4e48\u6700\u5927\u503c\u5c31\u662f\u8fd9\u4e2a\u503c\uff0c\u6b21\u5927\u503c\u5c31\u662f\u5de6\u53f3\u513f\u5b50\u7684\u6b21\u5927\u503c\u4e2d\u66f4\u5927\u7684\u90a3\u4e2a\n\n\u5982\u679c\u4e0d\u7b49\uff0c\u6700\u5927\u503c\u5c31\u662f\u5de6\u53f3\u513f\u5b50\u4e2d\u8f83\u5927\u7684\u90a3\u4e2a\uff0c\u6b21\u5927\u503c\u5c31\u662f\u5de6\u53f3\u513f\u5b50\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e2a\n\n\u7ef4\u62a4\u597d\u8fd9\u4e2a\u4e4b\u540e\uff0c\u6211\u4eec\u6bcf\u6b21\u5c1d\u8bd5\u52a0\u8fdb\u53bb\u4e00\u6761\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\uff0c\u8fd9\u6837\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u7136\u540e\u5982\u679c\u73af\u4e0a\u6700\u5927\u7684\u90a3\u6761\u8fb9$\\geq$\u8981\u52a0\u8fdb\u53bb\u7684\u8fd9\u6761\u8fb9\u5c31\u770b\u7b2c\u4e8c\u5927\u80fd\u4e0d\u80fd\u52a0\uff0c\u7136\u540e\u7b97\u51fa\u6765\u8fd9\u6761\u8fb9\u52a0\u8fdb\u53bb\u4e4b\u540e\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6700\u540e\u7edf\u4e00\u53d6\u4e2amin\u5c31\u53ef\u4ee5\u4e86\n\n\u51e0\u4e2a\u95ee\u9898\n\n1.\u8981\u5f00longlong\uff0cans\u521d\u503c\u8981\u5927\u4e00\u70b9\uff0c\u5426\u5219wa#8\n\n2.\u9898\u76ee\u53ea\u8bf4\u4fdd\u8bc1\u6ca1\u6709\u91cd\u8fb9\uff0c\u6ca1\u8bf4\u4fdd\u8bc1\u6ca1\u6709\u81ea\u73af\uff0c\u6240\u4ee5\u5224\u65ad\u4e00\u4e0b\uff0c\u5426\u5219wa#10\n\n3.\u6570\u7ec4\u5f00\u7684\u7a0d\u5fae\u5927\u4e00\u70b9\uff0c\u5426\u5219re#10qwq\n\n\u4ee3\u7801\uff1a\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n# define debug puts(\"QAQ\");\n\ntypedef long long ll;\nconst int N=2e5+5;\nconst int mod=1e9+7;\nconst double eps=1e-7;\n\ntemplate <typename T> void read(T &x){\n\tx=0;int f=1;\n\tchar c=getchar();\n\tfor(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n\tx*=f;\n}\n\n# define int long long\n\nint n,m;\nint head[N],cnt;\nint faz[N],son[N],dep[N],siz[N],top[N],dfn[N],tot;\nint sum,ans=1e18;\nint val[N],_a[N];\nint f[N];\nbool vis[N];\n\nstruct Edge{\n\tint to,next,w;\t\n}e[N<<1];\n\nvoid add(int x,int y,int c){\n\te[++cnt]=(Edge){y,head[x],c},head[x]=cnt;\t\n}\n\nstruct edge{\n\tint x,y,c;\n\tbool operator < (const edge &cmp)const{\n\t\treturn c<cmp.c;\n\t}\n}a[N<<2];\n\nint find(int x){\n\tif(f[x]==x)return x;\n\treturn f[x]=find(f[x]);\t\n}\n\nstruct segment_tree{\n\tint l,r;\n\tint _max,__max;\t\n}seg[N<<2];\n\n# define lc (u<<1)\n# define rc (u<<1|1)\n\nvoid pushup(int u){\n\tif(seg[lc]._max==seg[rc]._max)seg[u]._max=seg[lc]._max,seg[u].__max=max(seg[lc].__max,seg[rc].__max);\n\telse seg[u]._max=max(seg[lc]._max,seg[rc]._max),seg[u].__max=min(seg[lc]._max,seg[rc]._max);\t\n}\n\npair<int,int> merge(pair<int,int> l,pair<int,int> r){\n\tpair<int,int> res;\n\tif(l.first==r.first)res.first=l.first,res.second=max(l.second,r.second);\n\telse res.first=max(l.first,r.first),res.second=min(l.first,r.first);\n\treturn res;\t\n}\n\nvoid build(int u,int l,int r){\n\tseg[u].l=l,seg[u].r=r;\n\tif(l==r){seg[u]._max=_a[l];return;}\n\tint mid=l+r>>1;\n\tbuild(lc,l,mid);\n\tbuild(rc,mid+1,r);\n\tpushup(u);\n}\n\npair<int,int> query(int u,int l,int r){\n\tif(seg[u].l>=l&&seg[u].r<=r)return make_pair(seg[u]._max,seg[u].__max);\n\tint mid=seg[u].l+seg[u].r>>1;\n\tif(r<=mid)return query(lc,l,r);\n\tif(l>mid)return query(rc,l,r);\n\treturn merge(query(lc,l,r),query(rc,l,r));\t\n}\n\npair<int,int> RouteQuery(int x,int y){\n\tpair<int,int> res;\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tres=merge(res,query(1,dfn[top[x]],dfn[x]));\n\t\tx=faz[top[x]];\n\t}\n\tif(x!=y){\n\t\tif(dep[x]>dep[y])swap(x,y);\n\t\tres=merge(res,query(1,dfn[x]+1,dfn[y]));\t\n\t}\n\treturn res;\n}\n\nvoid dfs1(int u,int fa){\n\tfaz[u]=fa;\n\tsiz[u]=1;\n\tdep[u]=dep[fa]+1;\n\tRepG(i,u){\n\t\tint v=e[i].to;\n\t\tif(v==fa)continue;\n\t\tval[v]=e[i].w;\n\t\tdfs1(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])son[u]=v;\t\n\t}\n}\n\nvoid dfs2(int u,int _top){\n\ttop[u]=_top;\n\tdfn[u]=++tot;\n\t_a[tot]=val[u];\t\n\tif(!son[u])return;\n\tdfs2(son[u],_top);\n\tRepG(i,u){\n\t\tint v=e[i].to;\n\t\tif(v==faz[u]||v==son[u])continue;\n\t\tdfs2(v,v);\t\n\t}\n}\n\nvoid kruskal(){\n\tint tott=0;\n\tsort(a+1,a+m+1);\n\tRep(i,1,m){\n\t\tint fax=find(a[i].x),fay=find(a[i].y);\n\t\tif(fax==fay)continue;\n\t\tvis[i]=true;\n\t\tf[fax]=fay;\n\t\tadd(a[i].x,a[i].y,a[i].c),add(a[i].y,a[i].x,a[i].c);\n\t\tsum+=a[i].c;\n\t\tif(++tott==n-1)break;\n\t}\n}\n\nsigned main()\n{\n\tmemset(head,-1,sizeof(head));\n\tread(n),read(m);\n\tRep(i,1,n)f[i]=i;\n\tRep(i,1,m){\n\t\tread(a[i].x),read(a[i].y),read(a[i].c);\n\t\tif(a[i].x==a[i].y)vis[i]=true;\n\t}\n\tkruskal();\t\n\tdfs1(1,0),dfs2(1,1);\n\tbuild(1,1,n);\n\tRep(i,1,m){\n\t\tif(vis[i])continue;\n\t\tint x=a[i].x,y=a[i].y,c=a[i].c;\n\t\tpair<int,int> res=RouteQuery(x,y);\n\t\tif(res.first<c)ans=min(ans,sum+c-res.first);\n\t\telse if(res.second&&res.second<c)ans=min(ans,sum+c-res.second);\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n\u56e0\u4e3a\u6ca1\u6709\u4fee\u6539\u95ee\u9898\u6240\u4ee5\u4ee3\u7801\u4e5f\u4e0d\u662f\u5f88\u957f\uff0c160+\n\n**2.kruskal+\u500d\u589e+lca**\n\n\u590d\u6742\u5ea6\u662f$O(mlogm)$\uff0c\u4f18\u70b9\u662f\u590d\u6742\u5ea6\u4f4e\uff0c\u5e38\u719f\u4e0d\u662f\u7279\u522b\u5927\uff0c\u4ee3\u7801\u77ed\uff0c\u7f3a\u70b9\u662f\u5b9e\u73b0\u7ec6\u8282\u591a\n\n**3.kruskal+lct**\n\n\u590d\u6742\u5ea6\u8fd8\u662f$O(mlogm)$\uff0c\u4f18\u70b9\u662f\u590d\u6742\u5ea6\u4f4e\uff0c\u4ee3\u7801\u957f\u5ea6\u8f83\u77ed\uff0c\u7f3a\u70b9\u662f\u5e38\u719f\u5927\uff0c\u5b9e\u73b0\u7ec6\u8282\u591a\n\n**update 2020.3.1**\n\n\u4eca\u5929\u5199\u4e86\u4e00\u4e0b$lct$\u7684\u505a\u6cd5\uff0c\u53d1\u73b0\u867d\u7136\u4ed6\u7684\u590d\u6742\u5ea6\u662f$mlogm$\uff0c\u4f46\u662f\u6211\u8fd9\u4e2a\u5199\u6cd5\u9700\u8981\u5438\u6c27\u624d\u80fd\u6c34\u8fc7\u53bb\n\n\u601d\u60f3\u8fd8\u662f\u5dee\u4e0d\u591a\u7684\n\n\u4ee3\u7801\uff1a\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n# define debug puts(\"QAQ\");\n\ntypedef long long ll;\nconst int N=5e5+5;\nconst int mod=1e9+7;\nconst double eps=1e-7;\n\ntemplate <typename T> void read(T &x){\n\tx=0;int f=1;\n\tchar c=getchar();\n\tfor(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n\tx*=f;\n}\n\n# define int long long\n\nint n,m;\nint fa[N],son[N][2],_max[N],__max[N],val[N];\nint s[N],f[N];\nint sum,ans=1e18;\nbool vis[N],tag[N];\n\nstruct Edge{\n\tint x,y,c;\n\tbool operator < (const Edge &cmp)const{\n\t\treturn c<cmp.c;\n\t}\n}e[N<<1];\n\nint find(int x){\n\tif(f[x]==x)return x;\n\treturn f[x]=find(f[x]);\t\n}\n\nbool isroot(int x){\n\treturn son[fa[x]][0]!=x&&son[fa[x]][1]!=x;\t\n}\n\nbool locate(int x){\n\treturn son[fa[x]][1]==x;\t\n}\n\nvoid reverse(int x){\n\tswap(son[x][0],son[x][1]);\n\ttag[x]^=1;\t\n}\n\nvoid update(int x){\n\tif(_max[son[x][0]]==_max[son[x][1]]){\n\t\t_max[x]=_max[son[x][0]];\n\t\t__max[x]=max(__max[son[x][0]],__max[son[x][1]]);\n\t}\n\telse{\n\t\t_max[x]=max(_max[son[x][0]],_max[son[x][1]]);\n\t\t__max[x]=max(max(__max[son[x][0]],__max[son[x][1]]),min(_max[son[x][0]],_max[son[x][1]]));\t\n\t}\n\tif(val[x]>_max[x])__max[x]=_max[x],_max[x]=val[x];\n\telse if(val[x]>__max[x])__max[x]=val[x];\n}\n\nvoid pushdown(int x){\n\tif(tag[x]){\n\t\tif(son[x][0])reverse(son[x][0]);\n\t\tif(son[x][1])reverse(son[x][1]);\n\t\ttag[x]=0;\n\t}\n}\n\nvoid rotate(int x){\n\tint y=fa[x],z=fa[y],side=locate(x);\n\tfa[x]=z;\n\tif(!isroot(y))son[z][son[z][1]==y]=x;\n\tson[y][side]=son[x][side^1];\n\tif(son[x][side^1])fa[son[y][side]]=y;\n\tson[x][side^1]=y,fa[y]=x;\n\tupdate(y),update(x);\t\n}\n\nvoid splay(int x){\n\tint y=x,top=0;\n\ts[++top]=y;\n\twhile(!isroot(y))y=fa[y],s[++top]=y;\n\twhile(top)pushdown(s[top--]);\n\twhile(!isroot(x)){\n\t\tint y=fa[x];\n\t\tif(!isroot(y))rotate(locate(x)==locate(y)?y:x);\n\t\trotate(x);\n\t}\n\tupdate(x);\n}\n\nvoid access(int x){\n\tfor(int y=0;x;y=x,x=fa[x])\n\t\tsplay(x),son[x][1]=y,update(x);\t\n}\n\nvoid makeroot(int x){\n\taccess(x),splay(x);\n\treverse(x);\t\n}\n\nint findroot(int x){\n\taccess(x),splay(x);\n\twhile(son[x][0])pushdown(x),x=son[x][0];\n\tsplay(x);\n\treturn x;\t\n}\n\nvoid split(int x,int y){\n\tmakeroot(x);\n\taccess(y),splay(y);\t\n}\n\nvoid link(int x,int y){\n\tmakeroot(x);\n\tfa[x]=y;\t\n}\n\nvoid kruskal(){\n\tint tot=0;\n\tRep(i,1,m){\n\t\tint fax=find(e[i].x),fay=find(e[i].y);\n\t\tif(fax==fay)continue;\n\t\tf[fax]=fay;\n\t\tvis[i]=true;\n\t\tlink(e[i].x,i+n),link(e[i].y,i+n);\n\t\tsum+=e[i].c;\n\t\tif(++tot==n-1)break;\n\t}\n}\n\nsigned main()\n{\n\tread(n),read(m);\n\tRep(i,1,n)f[i]=i;\n\tRep(i,1,m){\n\t\tread(e[i].x),read(e[i].y),read(e[i].c);\n\t\tif(e[i].x==e[i].y)vis[i]=true;\n\t}\n\tsort(e+1,e+m+1);\n\tRep(i,1,n+m)val[i]=i<=n?0:e[i-n].c;\n\tkruskal();\n\tRep(i,1,m){\n\t\tif(vis[i])continue;\n\t\tsplit(e[i].x,e[i].y);\n\t\tif(_max[e[i].y]<e[i].c)ans=min(ans,sum-_max[e[i].y]+e[i].c);\n\t\telse if(__max[e[i].y]&&__max[e[i].y]<e[i].c)ans=min(ans,sum-__max[e[i].y]+e[i].c);\t\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1582949345,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4180 \u3010\u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\u3011"
    }
]