[
    {
        "content": "# [BJWC2018]\u3010\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011 kakuro\n\n## \u9898\u610f\n\nkakuro\u662f\u4e00\u4e2a\u795e\u5947\u7684\u6570\u72ec\u6e38\u620f\uff0c\u5927\u81f4\u89c4\u5219\u5982\u4e0b\uff1a\n\n- $N\\times M$ \u7684\u7f51\u683c\u56fe\u4e2d\uff0c\u7531\u4e00\u4e9b\u683c\u5b50\u4e3a\u7a7a\u683c\u9700\u8981\u586b\u6570\uff0c\u4e00\u4e9b\u683c\u5b50\u586b\u7ebf\u7d22\uff0c\u4e00\u4e9b\u683c\u5b50\u4ec0\u4e48\u90fd\u4e0d\u586b\n- \u7ebf\u7d22\u6709\u4e24\u4e2a\u65b9\u5411\uff0c\u5206\u522b\u4e3a\u53f3\u548c\u4e0b\uff0c\u7ebf\u7d22\u7684\u503c\u8868\u793a\u8be5\u65b9\u5411\u8fde\u7eed\u7a7a\u683c\u6240\u586b\u6570\u4e4b\u548c\n- \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u7a7a\u683c\uff0c\u5176\u5de6\u8fb9\u4e0e\u4e0a\u8fb9\u7684\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u683c\u5b50\u4e3a\u7ebf\n- \u53c2\u8003\u4e0b\u56fe\n\n![img](https://cdn.luogu.com.cn/upload/pic/17946.png)\n\n\u6e38\u620f\u89c4\u5219\uff1a\n\n\u2022 \u7a7a\u683c\u4e2d\u586b\u5165\u6b63\u6574\u6570\u3002\n\n\u2022 \u88ab\u659c\u7ebf\u5206\u5f00\u7684\u65b9\u683c\u4e2d\uff0c\u53f3\u4e0a\u89d2\u7684\u6570\u5b57\u7b49\u4e8e\u5176\u53f3\u4fa7\u90bb\u63a5\u4e4b\u8fde\u7eed\u65b9\u683c\u4e2d\u6570\u5b57\u4e4b\u548c\uff0c\u5de6\u4e0b\u89d2\u7684\u6570\u5b57\u7b49\u4e8e\u5176\u4e0b\u65b9\u90bb\u63a5\u4e4b\u8fde\u7eed\u65b9\u683c\u4e2d\u6570\u5b57\u4e4b\u548c\u3002\n\nApia \u7ed9\u4e86Rimbaud \u4e00\u4e2aKakuro \u8c1c\u9898\u3002\u5fc3\u4e0d\u7075\u624b\u4e0d\u5de7\u7684Rimbaud \u6839\u672c\u4e0d\u4f1a\u505aKakuro\uff0c\u6240\u4ee5\u53ea\u5728\u7a7a\u683c\u91cc\u9762\u586b\u4e0a\u4e86\u4e00\u4e9b\u968f\u673a\u7684\u6570\u5b57\uff0c\u79f0\u8fd9\u4e2a\u4e3a\u4e00\u4e2a\u5c40\u9762\uff0c\u5373\u5305\u542b\u4e86\u8c1c\u9898\u4e00\u5f00\u59cb\u7ed9\u51fa\u7684\u7ebf\u7d22\u548c\u540e\u9762\u586b\u5165\u7684\u6570\u5b57\u3002\n\n\u73b0\u5728Rimbaud \u5e0c\u671b\u80fd\u4fee\u6539\u8fd9\u4e2a\u5c40\u9762\u4f7f\u5f97\u5979\u7684\u7b54\u6848\u662f\u4e00\u4e2a\u5408\u6cd5\u89e3\u3002\u8fd9\u4e2a\u5c40\u9762\u4e2d\u6709\u4e9b\u6570\u5b57(**\u5305\u62ec\u4e00\u5f00\u59cb\u7684\u7ed9\u51fa\u7ebf\u7d22\u548c\u540e\u9762\u586b\u5165\u7684\u6570\u5b57**) \u662f\u53ef\u4ee5\u4fee\u6539\u7684\u3002\u6bcf\u4e2a\u6570\u5b57\u90fd\u6709\u4e2a\u7279\u5b9a\u7684\u4ee3\u4ef7\uff0c\u5c06\u8fd9\u4e2a\u6570\u5b57\u52a0 $1$ \u6216\u8005\u51cf $1$ \u90fd\u5f97\u4ed8\u51fa\u8fd9\u4e2a\u6570\u5b57\u5bf9\u5e94\u7684\u4ee3\u4ef7\u3002\u6ce8\u610f\u5bf9\u4e8e\u4e00\u7ec4\u5408\u6cd5\u89e3\uff0c\u5fc5\u987b\u6ee1\u8db3\u6e38\u620f\u89c4\u5219\uff0c\u4e5f\u5c31\u662f**\u7a7a\u683c\u4e2d\u586b\u7684\u6570\u5b57\u5fc5\u987b\u662f\u6b63\u6574\u6570\u5e76\u4e14\u6ee1\u8db3\u548c\u7684\u6761\u4ef6\uff0c\u4f46\u662f\u4e0d\u8981\u6c42\u4e0d\u91cd\u590d**\u3002\n\nRimbaud \u5e0c\u671b\u7528\u6700\u5c11\u7684\u4ee3\u4ef7\u8ba9\u8fd9\u4e2a\u5c40\u9762\u53d8\u5f97\u5408\u6cd5\uff0c\u5982\u679c\u4e0d\u53ef\u80fd\u90a3\u4e48\u8f93\u51fa`-1` \u3002\n\n## \u6570\u636e\u8303\u56f4\n\n\u5bf9\u4e8e$100\\%$ \u7684\u6570\u636e\uff0c\u4fdd\u8bc1$3 \\leq n,m \\leq 30$\uff0c\u4fdd\u8bc1\u521d\u59cb\u5c40\u9762\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u4e0d\u8d85\u8fc7 $10^6$ \uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u6570\u5b57\u7684\u4ee3\u4ef7\u4e0d\u8d85\u8fc7 $10^6$ \u3002\n\n## \u9898\u89e3\n\n### \u81f4\u8c22\n\n\u611f\u8c22AloNE\u7684\u8bb2\u89e3\u3002\n\n### \u6b63\u9898\n\n\u4e00\u4e2a\u601d\u8def\u5c31\u662f\u5148\u505a\u51fa\u4e00\u4e2a\u5408\u6cd5\u89e3\uff0c\u7136\u540e\u518d\u53bb\u4fee\u6539\u6743\u503c\u4ee5\u51cf\u5c11\u603b\u82b1\u8d39\u3002\n\n\u90a3\u4e48\u6700\u7b80\u5355\u7684\u5408\u6cd5\u89e3\uff0c\u5c31\u662f\u6bcf\u4e2a\u7a7a\u683c\u90fd\u586b $1$ \uff0c\u7ebf\u7d22\u586b\u5bf9\u5e94\u683c\u5b50\u7684\u4e2a\u6570\u3002\n\n\u5982\u6b64\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u7a7a\u683c\u90fd\u662f\u6b63\u6574\u6570\uff0c\u8fd9\u662f\u4e00\u4e2a\u6700\u5c0f\u89e3\u3002\n\n\u8bb0\u5f53\u524d\u82b1\u8d39\u4e3a $Ans$ \u3002\n\n\u8bb0\u67d0\u4e2a\u683c\u5b50\u73b0\u5728\u7684\u503c\u4e3a $A(x,y)$ \uff0c\u539f\u6765\u7684\u503c\u4e3a $O(x,y)$ \uff0c\u4fee\u6539 $1$ \u7684\u4ef7\u683c\u4e3a $C(x,y)$ \u3002\n\n\u90a3\u4e48\u6bcf\u4e2a\u7a7a\u683c\u548c\u7ebf\u7d22\u53ea\u80fd\u5f80\u5927\u4fee\u6539\uff0c\u90a3\u4e48\u6709\u4e24\u79cd\u60c5\u51b5\u3002\n\n- $A(x,y) \\leq O(x,y)$ \uff0c\u90a3\u4e48\u5f53 $A(x,y)$ \u6700\u521d\u53d8\u5927\u76f4\u5230 $O(x,y)$ \u65f6\uff0c\u76f8\u5f53\u4e8e\u5bf9\u6700\u5f00\u59cb\u7684\u4fee\u6539\u8fdb\u884c\u53cd\u6094\uff0c\u4e5f\u5c31\u662f\u8bf4\u82b1\u8d39 $-C(x,y)$\uff1b\u5f53\u7136\u5bf9\u4e8e\u8d85\u51fa $O(x,y)$ \u7684\u90e8\u5206\u7ee7\u7eed\u82b1\u8d39 $C(x,y)$ \u3002\n- $A(x,y) \\geq O(x,y)$ \uff0c\u90a3\u4e48\u4fee\u6539\u7ee7\u7eed\u589e\u52a0\u82b1\u8d39 $C(x,y)$ \u3002\n\n\u8f6c\u5316\u6210\u7f51\u7edc\u6d41\u95ee\u9898\uff0c\u5c06\u8fd9\u4e9b\u5173\u7cfb\u62bd\u8c61\u6210\u5982\u4e0b\u7684\u8fb9\uff1a\n\n- \u53d1\u73b0\u5bf9\u4e8e\u4fee\u6539\u4e00\u4e2a\u7a7a\u683c\u4f1a\u5bf9\u5176\u5de6\u8fb9\u548c\u4e0a\u8fb9\u7684\u4e24\u4e2a\u7ebf\u7d22\u4ea7\u751f\u5f71\u54cd\uff0c\u7ea6\u675f\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u6d41\u91cf\u4ece\u5176\u4e0a\u9762\u7684\u7ebf\u7d22\u6d41\u5165\uff0c\u4ece\u5176\u5de6\u8fb9\u7684\u7ebf\u7d22\u6d41\u51fa\uff0c\u90a3\u4e48\u4fdd\u8bc1\u6240\u6709\u589e\u52a0\u7684\u6d41\u91cf\u90fd\u662f\u5408\u6cd5\u7684\uff1b\u4e5f\u5c31\u662f\u8bf4\u7a7a\u683c\u672c\u8d28\u5c31\u662f\u4e00\u6761\u8fde\u63a5\u6a2a\u5411\u548c\u7ad6\u5411\u7ebf\u7d22\u7684\u8fb9\uff1b\n- \u6839\u636e\u4e0a\u9762\u7684\u5efa\u6a21\u65b9\u6cd5\uff0c$S$ \u8fde\u63a5\u6240\u6709\u7ad6\u5411\u7ebf\u7d22\uff0c\u8d39\u7528\u4e3a $C(x,y)$ \uff0c\u6d41\u91cf\u4e0d\u9650\uff1b\n- \u6240\u6709\u6a2a\u5411\u7ebf\u7d22\u8fde\u63a5 $T$ \uff0c\u8d39\u7528\u4e3a $C(x,y)$ \uff0c\u6d41\u91cf\u4e0d\u9650\uff1b\n\n\n- \u5bf9\u4e8e\u6240\u6709\u7a7a\u683c\uff0c\u5982\u679c $A(x,y) \\leq O(x,y)$ \uff0c\u8fde\u63a5\u8d39\u7528\u4e3a $-C(x,y)$ \u6d41\u91cf\u4e3a $O(x,y) - A(x,y)$ \uff0c\u610f\u4e3a\u5bf9\u6700\u521d\u7684\u4fee\u6539\u8fdb\u884c\u53cd\u6094\uff1b\uff08\u5bf9\u5e94\u7684\u4e24\u4e2a\u7ebf\u7d22\u4e4b\u95f4\u8fde\u8fb9\uff09\n- \u5bf9\u4e8e\u6240\u6709\u7a7a\u683c\uff0c\u8fde\u63a5\u8d39\u7528\u4e3a $C(x,y)$ \uff0c\u6d41\u91cf\u4e0d\u9650\u7684\u8fb9\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u683c\u5b50\u90fd\u53ef\u4ee5\u65e0\u9650\u589e\u5927\u3002\n\n\u8dd1\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\uff0c\u5f53\u524d\u8d39\u7528 $Cost \\geq 0$ \u65f6\u7ed3\u675f\u3002\n\n\u5f97\u5230\u6700\u5c0f\u8d39\u7528 $C$ \uff0c\u90a3\u4e48\u6700\u7ec8\u7ed3\u679c $Ans + C$ \u3002\n\n\u90a3\u4e48\u5982\u4f55\u5224\u65ad\u65e0\u89e3\u7684\u60c5\u51b5\uff1f\n\n\u65e0\u89e3\u4e5f\u5c31\u662f\u8bf4\u4fee\u6539\u4e86\u4e0d\u80fd\u4fee\u6539\u7684\u8fb9\u3002\n\n\u90a3\u4e48\u5c06\u4e0d\u80fd\u4fee\u6539\u7684\u8fb9\u7684\u8d39\u7528\u7f6e\u4e3a $INF$ \uff0c\u8dd1\u5b8c\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\u4e4b\u540e\u68c0\u67e5\u6b8b\u4f59\u7f51\u7edc\u662f\u5426\u5b58\u5728\u8d39\u7528\u4e3a $INF$ \u7684\u53cd\u5411\u8fb9\u6d41\u91cf\u4e0d\u4e3a $0$ \u6216\u8005\u8d39\u7528\u4e3a $-INF$ \u7684\u8fb9\u6d41\u91cf\u4e0d\u4e3a $0$ \u3002\n\n\u5982\u679c\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf4\u660e\u4e86\u5fc5\u987b\u4fee\u6539\u4e0d\u80fd\u4fee\u6539\u7684\u683c\u5b50\u6743\u503c\u4ee5\u6ee1\u8db3\u6d41\u91cf\u5e73\u8861\uff0c\u8f93\u51fa `-1` \u5373\u53ef\u3002 \n\n### \u53c2\u8003\u4ee3\u7801\n\n```cpp\n// Copyright 2018, Skqliao\n#include <bits/stdc++.h>\n\n#define rg register\n#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i < _##i##_; ++i)\n#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i >= _##i##_; --i)\n#define ALL(x) (x).begin(), (x).end()\n#define SZ(x) static_cast<int>((x).size())\ntypedef long long ll;\n\nconst int MAXN = 30 + 5;\nconst int INF = 1e9 + 7;\n\nnamespace mcf {\nconst int MAXN = ::MAXN * ::MAXN * 4;\nconst int MAXM = MAXN;\nstruct Edge {\n    int v, c, f, nxt;\n}E[MAXM << 1];\nint S, T;\nll C, F, Dis[MAXN];\nint H[MAXN], cntE;\nint Lp[MAXN], Le[MAXN];\nvoid addEdge(int u, int v, int f, int c) {\n    E[++cntE] = (Edge) {v, c, f, H[u]};\n    H[u] = cntE;\n    E[++cntE] = (Edge) {u, -c, 0, H[v]};\n    H[v] = cntE;    \n}\nbool spfa() {\n    static std::bitset<MAXN> Inq;\n    static std::queue<int> Que;\n    Inq = 0;\n    memset(Dis, 0x3f, sizeof Dis);\n    Dis[S] = 0;\n    Que.push(S);\n    while(!Que.empty()) {\n        int x = Que.front(); Que.pop();\n        Inq[x] = false;\n        for(int i = H[x]; ~i; i = E[i].nxt) {\n            int &v = E[i].v;\n            if(E[i].f && Dis[v] > Dis[x] + E[i].c) {\n                Dis[v] = Dis[x] + E[i].c;\n                Lp[v] = x, Le[v] = i;\n                if(!Inq[v]) {\n                    Inq[v] = true;\n                    Que.push(v);\n                }\n            }\n        }\n    }\n    return Dis[T] < 0;\n}\nvoid mcf() {\n    while(spfa()) {\n        int f = INF;\n        for(int i = T; i != S; i = Lp[i]) {\n            f = std::min(f, E[Le[i]].f);\n        }\n        C += f * Dis[T];\n        F += f;\n        for(int i = T; i != S; i = Lp[i]) {\n            E[Le[i]].f -= f;\n            E[Le[i] ^ 1].f += f;\n        }\n    }\n}\nvoid init() {\n    memset(H, -1, sizeof H);\n    cntE = -1;\n    C = F = 0;\n}\nbool check() {\n    for(int i = 0; i <= cntE; i += 2) {\n        if(E[i].c == INF && E[i ^ 1].f > 0) {\n            return false;\n        }\n        if(E[i].c == -INF && E[i].f > 0) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n\nint N, M;\nint Type[MAXN][MAXN];\nint Column[MAXN][MAXN], Line[MAXN][MAXN], Ori[MAXN][MAXN];\nint ChangeC[MAXN][MAXN], ChangeL[MAXN][MAXN], ChangeO[MAXN][MAXN];\nint IdC[MAXN][MAXN], IdL[MAXN][MAXN];\nint Left[MAXN][MAXN], Up[MAXN][MAXN];\nint AfterC[MAXN][MAXN], AfterL[MAXN][MAXN], AfterO[MAXN][MAXN];\n\nint main() {\n    mcf::init();\n    int cnt = 0;\n    scanf(\"%d%d\", &N, &M);\n    rep(i, 1, N + 1) {\n        rep(j, 1, M + 1) {\n            scanf(\"%d\", &Type[i][j]);\n        }\n    }\n    rep(i, 1, N + 1) {\n        rep(j, 1, M + 1) {\n            if(Type[i][j] == 1 || Type[i][j] == 3) {\n                scanf(\"%d\", &Column[i][j]);\n                IdC[i][j] = ++cnt;\n            }\n            if(Type[i][j] == 2 || Type[i][j] == 3) {\n                scanf(\"%d\", &Line[i][j]);\n                IdL[i][j] = ++cnt;\n            }\n            if(Type[i][j] == 4) {\n                scanf(\"%d\", &Ori[i][j]);\n            }\n        }\n    }\n    mcf::S = 0, mcf::T = cnt + 1;\n    rep(i, 1, N + 1) {\n        rep(j, 1, M + 1) {\n            if(Type[i][j] == 1 || Type[i][j] == 3) {\n                scanf(\"%d\", &ChangeC[i][j]);\n                if(ChangeC[i][j] == -1) {\n                    ChangeC[i][j] = INF;\n                }\n            }\n            if(Type[i][j] == 2 || Type[i][j] == 3) {\n                scanf(\"%d\", &ChangeL[i][j]);\n                if(ChangeL[i][j] == -1) {\n                    ChangeL[i][j] = INF;\n                }\n            }\n            if(Type[i][j] == 4) {\n                scanf(\"%d\", &ChangeO[i][j]);\n                if(ChangeO[i][j] == -1) {\n                    ChangeO[i][j] = INF;\n                }\n            }\n        }\n    }\n    rep(i, 1, N + 1) {\n        rep(j, 1, M + 1) {\n            if(Type[i][j] == 1 || Type[i][j] == 3) {\n                int k = i + 1;\n                while(k <= N && Type[k][j] == 4) {\n                    Up[k++][j] = IdC[i][j];\n                }\n                AfterC[i][j] = k - i - 1;\n                mcf::C += 1ll * ChangeC[i][j] * std::abs(AfterC[i][j] - Column[i][j]);\n            }\n            if(Type[i][j] == 2 || Type[i][j] == 3) {\n                int k = j + 1;\n                while(k <= M && Type[i][k] == 4) {\n                    Left[i][k++] = IdL[i][j];\n                }\n                AfterL[i][j] = k - j - 1;\n                mcf::C += 1ll * ChangeL[i][j] * std::abs(AfterL[i][j] - Line[i][j]);\n            }\n            if(Type[i][j] == 4) {\n                AfterO[i][j] = 1;\n                mcf::C += 1ll * ChangeO[i][j] * std::abs(AfterO[i][j] - Ori[i][j]);\n            }\n        }\n    }\n    rep(i, 1, N + 1) {\n        rep(j, 1, M + 1) {\n            if(Type[i][j] == 1 || Type[i][j] == 3) {\n                if(AfterC[i][j] < Column[i][j]) {\n                    mcf::addEdge(mcf::S, IdC[i][j], Column[i][j] - AfterC[i][j], -ChangeC[i][j]);\n                }\n                mcf::addEdge(mcf::S, IdC[i][j], INF, ChangeC[i][j]);\n            }\n            if(Type[i][j] == 2 || Type[i][j] == 3) {\n                if(AfterL[i][j] < Line[i][j]) {\n                    mcf::addEdge(IdL[i][j], mcf::T, Line[i][j] - AfterL[i][j], -ChangeL[i][j]);\n                }\n                mcf::addEdge(IdL[i][j], mcf::T, INF, ChangeL[i][j]);\n            }\n            if(Type[i][j] == 4) {\n                if(AfterO[i][j] < Ori[i][j]) {\n                    mcf::addEdge(Up[i][j], Left[i][j], Ori[i][j] - AfterO[i][j], -ChangeO[i][j]);\n                }\n                mcf::addEdge(Up[i][j], Left[i][j], INF, ChangeO[i][j]);\n            }\n        }\n    }\n    mcf::mcf();\n    if(!mcf::check()) {\n        printf(\"-1\\n\");\n    } else {\n        printf(\"%lld\\n\", mcf::C);\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1526616153,
        "uid": 38018,
        "name": "SeKong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4486 \u3010[BJWC2018]Kakuro\u3011"
    },
    {
        "content": "**P4486 sol**\n\n\u9700\u8981\u6ce8\u610f\u7684\u9898\u610f\u4e0a\u7684\u7406\u89e3\uff1a\n\n- \u4efb\u610f\u4e00\u4e2a\u7a7a\u683c\u4f1a\u4e14\u4ec5\u4f1a\u88ab\u4e24\u4e2a\u7ebf\u7d22\u7ea6\u675f\uff1b\n\n- \u7a7a\u683c\u5185\u586b\u7684\u6570\u662f\u6b63\u6574\u6570\u5c31\u884c\uff0c\u4e0d\u9700\u8981\u786e\u5b9a\u8303\u56f4\u5728 $[0,9]$\u3002\n\n~~\u6211\u521a\u5f00\u59cb\u5c31\u7406\u89e3\u9519\u4e86\u3002~~\n\n\u4e00\u9053\u5f88\u57fa\u7840\u7684\u9898\uff0c\u8003\u5bdf\u9009\u624b\u5bf9\u4e8e\u7f51\u7edc\u6d41\u57fa\u7840\u5efa\u56fe\u5957\u8def\u7684\u7f1d\u5408\u5229\u7528\u3002\n\n\u9996\u5148\u6211\u4eec\u6709\u4e00\u4e2a\u5f88\u76f4\u89c9\u4e0a\u7684\u5efa\u56fe\u60f3\u6cd5\uff1a\u4e00\u5b9a\u8981\u5c06\u56fe\u4e0a\u7684\u6d41\u91cf\u8fbe\u5230\u5e73\u8861\u3002\u5176\u4ed6\u7684 trick \u6211\u4eec\u53ef\u4ee5\u5148\u4e0d\u60f3\u3002\n\n- \u89c2\u5bdf\u56fe\u4e2d\u4e0e\u201c\u4e8c\u201d\u76f8\u5173\u7684\u4fe1\u606f\uff1b\n\n\u4e8e\u662f\u6211\u4eec\u6709\u4e86\u5efa\u56fe\u7684\u5927\u81f4\u96cf\u5f62\uff1a\u5c06 $S$ \u4e00\u8fb9\u4f5c\u4e3a\u5de6\u4e0b\u89d2\u7ebf\u7d22\u7c7b\u578b\u7684\u6d41\u91cf\uff0c\u5c06 $T$ \u4e00\u8fb9\u4f5c\u4e3a\u53f3\u4e0a\u89d2\u7ebf\u7d22\u7c7b\u578b\u7684\u6d41\u91cf\u3002\u80af\u5b9a\u662f\u7528\u8dd1\u6700\u5c0f\u8d39\u7528\u6d41\u8fd9\u6837\u7684\u7ed3\u6784\u3002\n\n- \u5bf9\u4e8e\u4e24\u79cd\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u66b4\u529b\u6267\u884c\u4e00\u79cd\u64cd\u4f5c\u5230\u5e95\u4f7f\u6211\u4eec\u9700\u8981\u7684\u64cd\u4f5c\u53ea\u6709\u4e00\u79cd\uff1b\n\n\u8fd9\u4e2a trick \u5728[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P6967)\u91cc\u4e5f\u6709\u6240\u51fa\u73b0\u3002\n\n\u5bf9\u4e8e\u6b64\u9898\u8f83\u4e3a\u9ebb\u70e6\uff0c\u6211\u521a\u5f00\u59cb\u60f3\u7528\u4e0a\u4e0b\u754c\u5957\u8fd9\u4e2a\u505a\u53d1\u73b0\u5efa\u51fa\u6765\u7684\u56fe\u6781\u5176\u7e41\u7410\uff0c\u540e\u6765\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4ee4\u6240\u6709\u7a7a\u683c\u90fd\u586b $1$\uff0c\u7136\u540e\u66f4\u65b0\u51fa\u4e00\u4e2a\u521d\u59cb\u89e3\uff0c\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u6254\u6389\u4e0a\u4e0b\u754c\uff0c\u5c31\u597d\u5efa\u5f88\u591a\u4e86\u3002\n\n- \u8d39\u7528\u6d41\u7684\u51f8\u6027\n\n\u4e66\u63a5\u4e0a\u6587\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u8fd8\u9700\u8981\u5904\u7406\u4e00\u79cd\u60c5\u51b5\uff1a\u5047\u5982\u5728\u6700\u540e\u6784\u9020\u7684\u7b54\u6848\u4e2d\u4f60\u5f97\u5230\u7684\u4e00\u4e2a\u70b9\u6743\u503c $w$ \u6bd4\u521d\u59cb\u7ed9\u5b9a\u7684 $v$ \u8fd8\u5927\uff0c\u4f60\u7684\u6700\u4f18\u6784\u9020\u65b9\u6848\u663e\u7136\u4e0d\u662f $v \\rightarrow 1 \\rightarrow w$ \u800c\u662f $v \\rightarrow w$ \u5bf9\u5427\uff0c\u6240\u4ee5\u6211\u4eec\u5229\u7528\u8d39\u7528\u6d41\u7684\u51f8\u6027\uff0c\u76f4\u63a5\u62c6\u6210\u4e24\u7c7b\u8fde\u8fb9\uff0c\u4e00\u7c7b\u8868\u793a\u56de\u9000\uff08\u663e\u7136\u5b83\u7684\u8d39\u7528\u5e94\u8be5\u662f\u8d1f\u6570\uff09\u4e00\u7c7b\u8868\u793a\u6b63\u5e38\u7684\u6269\u589e\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e2a\u521d\u59cb\u5316\u4e5f\u5f88\u6709\u7528\u5904\uff1a\u56e0\u4e3a\u6d41\u5df2\u7ecf\u5408\u6cd5\uff0c\u6240\u4ee5\u76f4\u63a5\u8dd1\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\u5c31\u597d\u4e86\uff01\uff01\uff01\uff01\n\n\u4ee5\u4e0a\u5168\u662f\u601d\u8def\u7684\u8bb2\u89e3\uff0c\u63a5\u7740\u6211\u4eec\u68b3\u7406\u4e00\u4e0b\u5efa\u56fe\uff1a\n\n-----------------------------------------------------------\n\n\u6211\u4eec\u8bbe $v(x,y)$ \u662f\u521d\u59cb\u65b9\u683c $(x,y)$ \u7684\u6743\u503c\uff0c$w(x,y)$ \u662f\u521d\u59cb\u5316\uff08\u7a7a\u683c\u5168\u586b $1$\uff0c\u7ebf\u7d22\u5404\u76f8\u5e94\u6784\u9020\uff09\u65f6\u7684\u6743\u503c\uff1b$id(x,y)$ \u8868\u793a\u70b9 $(x,y)$ \u5728\u7f51\u7edc\u6d41\u4e0a\u7684\u5bf9\u5e94\u8282\u70b9\uff1b$d(x,y)$ \u4ee3\u8868\u8282\u70b9 $(x,y)$ \u4fee\u6539\u65f6\u6240\u9700\u7684\u4ee3\u4ef7\u3002\n\n- \u5c06\u5de6\u4e0b\u89d2\u7ebf\u7d22\u5bf9\u5e94 $S$ \u4e00\u4fa7\uff0c\u5c06\u53f3\u4e0a\u89d2\u7ebf\u7d22\u5bf9\u5e94 $T$ \u4e00\u4fa7\uff1b\u540c\u65f6\u6211\u4eec\u89c6\u7a7a\u683c\u4e3a\u8fb9\uff1b\n\n- \u4ee5\u5de6\u4e0b\u89d2\u7ebf\u7d22 $(x,y)$ \u4e3a\u4f8b\uff0c\u82e5 $w(x,y) \\leq v(x,y)$\uff0c\u6211\u4eec\u4ece $S$ \u5411 $id(x,y)$ \u8fde\u5bb9\u91cf\u4e3a $v(x,y)-w(x,y)$\uff0c\u8fb9\u6743\u4e3a $-d(x,y)$ \u7684\u8fb9\uff1b\u7136\u540e\u5bf9\u6240\u6709\u5de6\u4e0b\u89d2\u7ebf\u7d22\u6211\u4eec\u8fde\u5bb9\u91cf\u4e3a $+\\infty$\uff0c\u8fb9\u6743\u4e3a $d(x,y)$ \u4ee3\u8868\u6b63\u5e38\u7684\u6269\u589e\uff1b\n\n- \u5bf9\u4e8e\u53f3\u4e0a\u89d2\u7ebf\u7d22\u540c\u7406\uff0c\u5411 $T$ \u8fde\u7c7b\u4f3c\u5de6\u4e0b\u89d2\u7ebf\u7d22\u7684\u8fb9\u5373\u53ef\uff1b\n\n- \u5bf9\u4e8e\u7a7a\u683c $(x,y)$\uff0c\u6211\u4eec\u5bf9\u4e8e\u5bf9\u5e94\u7684\u4e24\u4e2a\u7ebf\u7d22 $id(a,b),id(c,d)$\uff0c\u82e5 $w(x,y) \\leq v(x.y)$ \u5148\u5c06 $id(a,b),id(c,d)$ \u4e4b\u95f4\u8fde\u5bb9\u91cf\u4e3a $v(x,y)-w(x,y)$ \u8fb9\u6743\u4e3a $-d(x,y)$ \u7684\u8fb9\u4ee3\u8868\u56de\u9000\uff1b\u7136\u540e\u8fde\u5bb9\u91cf $+\\infty$ \u8fb9\u6743\u4e3a $d(x,y)$ \u7684\u8fb9\u4ee3\u8868\u6b63\u5e38\u6269\u589e\u3002\n\n\u8dd1\u6700\u5c0f\u8d39\u7528\u53ef\u884c\u6d41\uff0c\u6ce8\u610f\u5230\u6b64\u65f6\u6211\u4eec\u6ca1\u6709\u4e0a\u4e0b\u754c\u4e14\u8981\u6c42\u8d39\u7528\u6700\u5c0f\uff0c\u6240\u4ee5\u6bcf\u6b21\u770b\u5230 $T$ \u7684\u6700\u77ed\u8def\u662f\u5426 $\\geq 0$ \u5373\u53ef\u4e00\u76f4\u8dd1\u3002\n\n\u8bb2\u4e00\u4e0b\u6bd4\u8f83\u68d8\u624b\u7684\u65e0\u89e3\u5224\u65ad\uff0c\u6211\u4e4b\u524d\u60f3\u7684\u5f88\u590d\u6742\uff08\u5f53\u7136\u5176\u5b9e\u590d\u6742\u70b9\u4e5f\u6ca1\u4ec0\u4e48\u8fd9\u91cc\u5df2\u7ecf\u4e0d\u662f\u6700\u91cd\u70b9\u4e86\uff09\uff0c\u540e\u6765\u770b\u5230\u522b\u4eba\u5199\u4e86\u4e00\u79cd\u5f88\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u4e0d\u80fd\u4fee\u6539\u7684\u70b9\uff0c\u6211\u4eec\u6839\u636e\u8d39\u7528\u6d41\u7684\u51f8\u6027\u5c06\u5176\u5206\u4e3a\u4e86\u56de\u9000\u8fb9\u548c\u6269\u589e\u8fb9\uff0c\u5bf9\u4e8e\u56de\u9000\u8fb9\u6211\u4eec\u5f3a\u5236\u4ee4\u6d41\u91cf\u4e3a $-\\infty$ \u4ee4\u6269\u589e\u8fb9\u7684\u6d41\u91cf\u5f3a\u5236\u4e3a $+\\infty$\uff0c\u8fd9\u6837\u5c31\u5f3a\u5236\u4e86\u6bcf\u4e2a\u4e0d\u80fd\u4fee\u6539\u7684\u8282\u70b9\u6d41\u91cf\u56fa\u5b9a\uff0c\u53ea\u9700\u8981\u770b\u6700\u540e\u7684\u7b54\u6848\u662f\u5426\u8d85\u8fc7 $+\\infty$ \u6216\u8005\u68c0\u67e5\u8fd9\u4e9b\u8fb9\u662f\u5426\u6d41\u6ee1/\u6d41\u8fc7\u5c31\u884c\u4e86\u3002\n\n```cpp\n/*\n\u5148\u5957\u8def\u5730\u5c06\u6570\u5b57+1-1\u8f6c\u5316\u4e3a\u53ea\u52a0\u4e00\n\u8003\u8651\u5c06\u7ebf\u7d22\u4f5c\u4e3a\u7f51\u7edc\u6d41\u7684 S\uff0cT \u4e00\u8fb9\u3002 \n*/\n#include \"bits/stdc++.h\"\nusing namespace std;\n#define int ll\n#define ll long long\nconst int Len = 2e4 + 5 , Inf = 1e9;\nconst ll inf = 1e18;\nstruct node\n{\n\tint from,next,to,w,ww;\n};\nint pp[105][105],cc[105][105],v[105][105],rc[105][105],src[105][105],scr[105][105],cr[105][105],op[105][105],id[2][105][105],S,T;\nstruct Mg\n{\n\tint x,y,w,ww;\n\tMg(){x = y = w = ww = 0;}\n\tMg(int X,int Y,int W,int WW){x = X , y = Y , w = W , ww = WW;}\n}mg[Len << 3];int n,m,q,tp[105][105],tt;\nstruct maxflow\n{\n\tint n,m,head[Len],cnt,dis[Len],cur[Len],flag[Len],flaw[Len],S,T,tt,mincost;\n\tnode edge[Len << 1];\n\tmaxflow(){cnt = 1;}\n\tinline void add(int from,int to,int w,int ww)\n\t{\n\t\tedge[++ cnt].to = to;\n\t\tedge[cnt].from = from;\n\t\tedge[cnt].next = head[from];\n\t\tedge[cnt].w = w;\n\t\tedge[cnt].ww = ww;\n\t\thead[from] = cnt;\n\t}\n\tinline void adeg(int from,int to,int w,int ww){add(from , to , w , ww);add(to , from , 0 , -ww);}\n\tinline int BFS()\n\t{\n\t\tqueue<int> Q;\n\t\tfor(int i = 1 ; i <= tt ; i ++) dis[i] = inf , cur[i] = flag[i] = flaw[i] = 0;\n\t\tdis[S] = 0 , cur[S] = head[S] , flaw[S] = 1 , Q.push(S);\n\t\twhile(!Q.empty())\n\t\t{\n\t\t\tint p = Q.front();Q.pop();\n\t\t\tflaw[p] = 0;\n\t\t\tfor(int e = head[p] ; e ; e = edge[e].next)\n\t\t\t{\n\t\t\t\tint to = edge[e].to;\n\t\t\t\tif(dis[to] > dis[p] + edge[e].ww && edge[e].w)\n\t\t\t\t{\n\t\t\t\t\tdis[to] = dis[p] + edge[e].ww;\n\t\t\t\t\tcur[to] = head[to];\n\t\t\t\t\tif(!flaw[to]) flaw[to] = 1 , Q.push(to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dis[T] < 0;\n\t}\n\tint dfs(int u,int In)\n\t{\n\t\tif(u == T) return In;\n\t\tflag[u] = 1;\n\t\tint Out = 0;\n\t\tfor(int e = cur[u] ; e && In > 0 ; e = edge[e].next)\n\t\t{\n\t\t\tcur[u] = e;\n\t\t\tint to = edge[e].to;\n\t\t\tif(dis[to] == dis[u] + edge[e].ww && edge[e].w && !flag[to])\n\t\t\t{\n\t\t\t\tint res = dfs(to , min(In , edge[e].w));\n\t\t\t\tIn -= res;\n\t\t\t\tOut += res;\n\t\t\t\tedge[e].w -= res;\n\t\t\t\tedge[e ^ 1].w += res;\n\t\t\t\tmincost += 1ll * res * edge[e].ww;\n\t\t\t}\n\t\t}\n\t\tflag[u] = 0;\n\t\tif(!Out) dis[u] = 0;\n\t\treturn Out;\n\t}\n\tvoid work()\n\t{\n\t\tint res = 0;\n\t\t//for(int i = 1 ; i <= m ; i ++) adeg(mg[i].x , mg[i].y , mg[i].w , mg[i].ww);\n\t\twhile(BFS()) res += dfs(S , Inf);\n\t}\n\tinline bool check(){for(int e = 2 ; e <= cnt ; e += 2)if((edge[e].ww == Inf && edge[e ^ 1].w > 0) || (edge[e].ww == -Inf && edge[e].w > 0))return 0;return 1;}\n}M;\ninline int Iabs(int x){if(x < 0) x = -x;return x;}\nsigned main()\n{\n\tscanf(\"%lld %lld\",&n,&m);\n\tfor(int i = 1 ; i <= n ; i ++)\n\t\tfor(int j = 1 ; j <= m ; j ++)\n\t\t{\n\t\t\tscanf(\"%lld\",&op[i][j]);\n\t\t\tif(op[i][j] == 1 || op[i][j] == 3) id[0][i][j] = ++ tt;\n\t\t\tif(op[i][j] == 2 || op[i][j] == 3) id[1][i][j] = ++ tt;\n\t\t}\n\tS = ++ tt , T = ++ tt;\n\tfor(int i = 1 ; i <= n ; i ++)\n\t\tfor(int j = 1 ; j <= m ; j ++)\n\t\t{\n\t\t\tif(!op[i][j]) continue;\n\t\t\tif(op[i][j] == 1 || op[i][j] == 3) scanf(\"%lld\",&rc[i][j]);\n\t\t\tif(op[i][j] == 2 || op[i][j] == 3) scanf(\"%lld\",&cr[i][j]);\n\t\t\tif(op[i][j] == 4) scanf(\"%lld\",&v[i][j]);\n\t\t}\n\tfor(int i = 1 ; i <= n ; i ++)\n\t\tfor(int j = 1 ; j <= m ; j ++) \n\t\t{\n\t\t\tif(op[i][j] == 1 || op[i][j] == 3)\n\t\t\t{\n\t\t\t\tfor(int k = i + 1 ; k <= n ; k ++)\n\t\t\t\t{\n\t\t\t\t\tif(op[k][j] != 4) break;\n\t\t\t\t\tpp[k][j] = id[0][i][j];\n\t\t\t\t\tsrc[i][j] ++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(op[i][j] == 2 || op[i][j] == 3)\n\t\t\t{\n\t\t\t\tfor(int k = j + 1 ; k <= m ; k ++) \n\t\t\t\t{\n\t\t\t\t\tif(op[i][k] != 4) break;\n\t\t\t\t\tcc[i][k] = id[1][i][j];\n\t\t\t\t\tscr[i][j] ++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\tll as = 0;\n\tfor(int i = 1 ; i <= n ; i ++)\n\t\tfor(int j = 1 ; j <= m ; j ++)\n\t\t{\n\t\t\tif(op[i][j] == 1 || op[i][j] == 3)\n\t\t\t{\n\t\t\t\tint x;scanf(\"%lld\",&x);if(x == -1) x = Inf;\n\t\t\t\tas += Iabs(src[i][j] - rc[i][j]) * x;\n\t\t\t\tif(rc[i][j] > src[i][j]) M.adeg(S , id[0][i][j] , rc[i][j] - src[i][j] , -x);\n\t\t\t\tM.adeg(S , id[0][i][j] , Inf , x);\n\t\t\t}\n\t\t\tif(op[i][j] == 2 || op[i][j] == 3)\n\t\t\t{\n\t\t\t\tint x;scanf(\"%lld\",&x);if(x == -1) x = Inf;\n\t\t\t\tas += Iabs(scr[i][j] - cr[i][j]) * x;\n\t\t\t\tif(cr[i][j] > scr[i][j]) M.adeg(id[1][i][j] , T , cr[i][j] - scr[i][j] , -x);\n\t\t\t\tM.adeg(id[1][i][j] , T , Inf , x);\n\t\t\t}\n\t\t\tif(op[i][j] == 4)\n\t\t\t{\n\t\t\t\tint x;scanf(\"%lld\",&x);if(x == -1) x = Inf;\n\t\t\t\tas += Iabs(v[i][j] - 1) * x;\n\t\t\t\tif(v[i][j] > 1) M.adeg(pp[i][j] , cc[i][j] , v[i][j] - 1 , -x);\n\t\t\t\tM.adeg(pp[i][j] , cc[i][j] , Inf , x);\n\t\t\t}\n\t\t} \n\tM.S = S , M.T = T , M.tt = tt;\n\tM.work();\n\tif(!M.check()) return puts(\"-1\") & 0;\n\tprintf(\"%lld\\n\",as + M.mincost);\n\treturn 0;\n}\n```",
        "postTime": 1668222237,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u6211\u4eec \u76f8\u9047\u5728\u718a\u718a\u71c3\u70e7\u7684 \u65c5\u9014\u4e4b\u4e2d"
    }
]