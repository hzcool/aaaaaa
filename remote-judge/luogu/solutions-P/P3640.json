[
    {
        "content": "\u8fd9\u9053\u63d0\u7b54\u561b\u2026\u2026\u6700\u77ed\u8def\u548c\u67d3\u8272\u95ee\u9898\uff0c\u5148\u770b\u6700\u77ed\u8def\u7684\u51e0\u79cd\u7b97\u6cd5\uff08\u4e0d\u7ba1\u6b63\u786e\u6027\u4e0e\u5426\uff09\n\nFloyd \u7b97\u6cd5\uff1a\u88f8Floyd\uff0c\u590d\u6742\u5ea6\u6052\u5b9a$\\Theta(V^3)$\uff0c\u4e0e\u8be2\u95ee\u65e0\u5173\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u3002\n\n\u4f18\u5316\u7684 Bellman-ford \u7b97\u6cd5\uff1a\u5c31\u662f\u4e00\u4e2a\u4e0d\u53d8\u5316\u8df3\u5faa\u73af\u800c\u5df2\uff0c\u6765\u4e2a\u8d1f\u6743\u7167\u6837\u590d\u6742\u5ea6$\\Theta(QVE)$\u3002\n\n\u6539\u8fdb\u7684 Dijkstra \u7b97\u6cd5\uff1a\u7528\u4e86\u5806\u4f18\u5316\uff0c\u4e0d\u8fc7\u9047\u5230\u8d1f\u6743\u5c31GG\u4e86\u3002\n\n\n\n\n\u7b2c1/3\u4e2a\u70b9\uff1a\u5e72Floyd\uff1a\n\nFloyd\u662f\u6052\u5b9a$\\Theta(V^3)$\u7684\uff0c\u6240\u4ee5\u8fd9\u4e48\u8bf4\u6765101\u4e2a\u70b9\u5c31\u5e72\u6389\u4e86\u3002\n\n\u6570\u636e\u6700\u5c0f\u7684\u8bdd\uff0c\u6ca1\u6709\u8fb9\uff0c\u521a\u597d101+1+1+2=105\u4e2a\u6570\uff0cOK\uff01\n\n\n\n\n\u7b2c2/5\u4e2a\u70b9\uff1a\u5e72Bellman-ford\uff1a\n\n\u590d\u6742\u5ea6$\\Theta(QVE)$\uff0c\u6765\u4e2a\u8d1f\u6743\uff0c\u518d\u6765\u4e00\u5806\u81ea\u73af/\u91cd\u8fb9\uff0c\u4eba\u8089\u4e8c\u5206\u4fdd\u8bc1\u6570\u636e\u4e0d\u8d85\u8fc7T\uff0c\u4e14\u8ba9Bellman-ford\u521a\u521a\u8d85\u8fc7\u4e00\u4e01\u70b9\uff0c\u5c31\u53ef\u4ee5\u4e86\uff0c\n\n\u7b2c2\u4e2a\u70b9\u8981Floyd\u8fc7\uff0c$V=100$\u5373\u53ef\uff0c\u7b2c5\u4e2a\u70b9\u8981Dijkstra\u8fc7\uff0c\u90a3\u4e48\u5c31\n\n0\u53f7\u70b9\u5230299\u53f7\u70b9\u8fde\u6b63\u6743\u8fb9\uff0c\u5176\u5b83\u70b9\u641e\u4e00\u5806\u8d1f\u73af+\u81ea\u73af+\u91cd\u8fb9\uff0cBellman-ford\u8f7b\u677e\u5e72\u6389\u3002\n\n\n\n\n\u7b2c4/6\u4e2a\u70b9\uff1a\u5e72Dijkstra\uff1a\n\n\u8bf4\u4e86Dijkstra\u770b\u5230\u8d1f\u6743\u5c31GG\uff0c\u6240\u4ee5\u6784\u9020\u4e00\u58060\u8fb9\u8bf1\u60d1\u4ed6\uff0c\u7136\u540e\u518d\u8ba9\u4ed6\u4ece\u53f3\u8fb9\u7684\u70b9\u8fdb\u53bb\uff0c\u4e3e\u4e2a\u6817\u5b50\uff1a\n\n![\u516c\u5f0f\u6302\u4e86](http://latex.codecogs.com/gif.latex?V=\\{0,1,2,3,4\\},E=\\{(0,1,2),(1,2,-4),(2,3,1),(3,4,-2),(0,2,0),(2,4,0)\\})\n\n\u90a3\u4e48\u5c31\u5148\u628a\u5b83\u62d0\u52304\uff0c\u53d1\u73b0\u8def\u957f\u4e3a0\uff0c\u7136\u540e\u8d702~3\u662f\u6700\u77ed\u7684\uff0c\u62d0\u52303\uff0c\u5f00\u59cb\u89c9\u9192\u540e\uff0c\u53d1\u73b00~1\u518d\u52302\uff0c\u8def\u957f\u4e3a-2\uff0c\u518d\u8d702~3\uff0c\u50bb\u50bb\u5730Dijkstra\u5c31\u88ab\u5751\u4e86\uff0c\n\n\u8fd9\u6837\u591a\u6765\u51e0\u6b21\u5c31\u662f\u6307\u6570\u7ea7\uff0c\u5361\u5361\u5e38\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\n\n\u7136\u540e\u662f\u67d3\u8272\u95ee\u9898\uff1a\n\nGamble1\u662f\u6052\u8fc7\u5668\uff0cGamble2\u662f\u6052\u6302\u5668\uff0c\u6240\u4ee5\u7b2c7\u4e2a\u70b9\u5c31\u662f\u8981\u7b97\u6cd5T\u6389\uff0c\u7b2c8\u4e2a\u70b9\u5c31\u662f\u8981\u7b97\u6cd5A\u6389\u3002\n\n\u7b2c7\u4e2a\u70b9\u6765\u4e2a\u5b8c\u5168\u56fe\uff0c\u90a3\u4e48\u591a\u989c\u8272\u4f30\u8ba1\u67d3\u4e0d\u5230\u4e86\u3002\n\n\u7b2c8\u4e2a\u70b9\u2014\u2014\u56e0\u4e3a\u4e0d\u80fd\u6709\u91cd\u8fb9\u2014\u2014\u6240\u4ee5\u8bf4\uff0c\u56e0\u4e3a![\u516c\u5f0f\u8fd8\u6302](http://latex.codecogs.com/gif.latex?V\\geq71,E\\geq1501)\uff0c\u6240\u4ee5\u5c31\u67d32\u79cd\u989c\u8272\u2014\u2014\u84dd(\u7537)\u8272\u548c\u7eff(\u5973)\u8272\u3002\n\n\u90a3\u4e48\u6bcf\u4e2a\u84dd\u8272\u70b9\u548c\u7eff\u8272\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u4e5f\u5c31\u662f\u8bf4\u5206\u6210\u4e24\u7ec4\uff0c\u540c\u7ec4\u4e4b\u95f4\u4e0d\u8fde\u8fb9\uff0c\u5f02\u65cf\u4e4b\u95f4\u8fde\u8fb9\uff0c\u7136\u540eRecursive-Bactraking\u5c31\u8fc7\u4e86\u3002\n",
        "postTime": 1494131977,
        "uid": 10420,
        "name": "\u865e\u7693\u7fd4",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3640 \u3010[APIO2013]\u51fa\u9898\u4eba\u3011"
    },
    {
        "content": "\u611f\u8c22\u865e\u7693\u7fd4\u548czzq\u5927\u4f6c\u7684\u9898\u89e3\u8ba9\u6211\u4f1a\u505a\u8fd9\u4e2a\u9898\u76ee\u4e86\u3002\u53e6\u5916\u672c\u9898\u89e3\u4e3a\u4e86\u9632\u6b62\u6709\u4eba\u6545\u610f\u6284\u88ad\uff0c\u53ea\u8282\u9009\u4ee3\u7801\u90e8\u5206\u7247\u6bb5\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u800c\u4e14\u5f88\u795e\u4ed9\u7684\u63d0\u4ea4\u7b54\u6848\u9898\u3002\n\n---\n\n\u4e3a\u4e86\u53d9\u8ff0\u65b9\u4fbf\uff0c\u6211\u4eec\u7528solve$x$\u6765\u8868\u793a\u7b2c\u51e0\u4e2a\u6d4b\u8bd5\u7f16\u53f7\u3002\n\nsolve1\uff1a\u5361floyd\u3002\n\n\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u89c2\u5bdf\u5230floyd\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(v^3)$\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u4e2a\u4ec5\u6709$101$\u4e2a\u70b9\u7684\u56fe\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u5b83\u5361\u5230tle\u3002\u8fd9\u4e2a\u65f6\u5019\u53ea\u6709$105$\u4e2a\u6570\u5b57\uff0c\u6b63\u6b63\u597d\u597d\u5728\u8303\u56f4\u4e4b\u5185\u3002\n\n```cpp\ninline void main()\n{\n\tfile();\n\tputs(\"101\");\n\tfor (int i=1;i<=101;i++)\n\t\tputs(\"0\");\n\tputs(\"1\");\n\tputs(\"0 100\");\n}\n```\n\n---\n\nsolve2\uff1afloyd\u5361bellman-ford\u3002\u5373\u7528$O(n^3)$\u5361$O(QVE)$\n\n\u4e00\u5f00\u59cb\u770b\u8d77\u6765\u5361\u4e0d\u4e86\uff0c\u56e0\u4e3a\u8fd9\u73a9\u610f\u968f\u673a\u6570\u636e\u4e0b\u8dd1\u7684\u5f88\u597d\u3002\u5176\u5b9e\u662f\u80fd\u5361\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u5927\u6ce2\u7684\u81ea\u73af\u6216\u8005\u91cd\u8fb9\u4ec0\u4e48\u7684\uff0c\u518d\u641e\u4e00\u6ce2\u94fe\uff0c\u8fd9\u4e2a\u65f6\u5019\u663e\u7136\u5c31\u628a\u65f6\u95f4\u7ed9\u5361\u6ee1\u4e86\n\n\u7136\u540e\u8fb9\u6743\u4ec0\u4e48\u7684\u662f\u53ef\u4ee5\u4efb\u610f\u53d1\u6325\u7684\u4e86\uff08 \n\n\u6ce8\u610f\u6700\u540e\u7684\u8be2\u95ee\uff1b\u6211\u8fd9\u91cc\u7684\u6570\u636e\u6784\u9020\u65b9\u5f0f\u662f$99$ $0$\uff0c\u5982\u679c\u7528$0\\text{ }99$\u5c31\u5361\u4e0d\u6ee1\u4e86\u3002\u5982\u679c\u4f60\u4eec\u7528\u4e86\u5176\u4ed6\u7684\u6784\u9020\u65b9\u5f0f\u53ef\u4ee5\u7528\u5176\u4ed6\u7684\u70b9\u5bf9\u8be2\u95ee\u3002 \n\n```cpp\ninline void main()\n{\n\tfile();\n\tputs(\"100\");\n\tint tot=950;\n\tfor (int i=0;i<100;i++)\n\t{\n\t\tint minn=min(tot,15),minres=minn;\n\t\ttot-=minn;\n\t\tif (i!=0)\n\t\t\tminn++;\n    \tprintf(\"%d\",minn);\n\t\tif (i!=0)\n\t\t\tprintf(\" %d 1107\",i-1);\n\t\tfor (int j=1;j<=minres;j++)\n\t\t\tprintf(\" %d 1107\",i);\n\t\tputs(\"\");\n\t}\n\tputs(\"10\");\n\tfor (int i=1;i<=10;i++)\n\t\tputs(\"99 0\");\n}\n```\n\n---\n\nsolve3\uff1a\u5361floyd\u3002\n\n\u672c\u8d28\u4e0a\u5c31\u662fsolve1 \n\n\u5982\u679c\u4f60solve1\u5199\u7684\u662f\u6700\u7cbe\u51c6\u7684\u89e3\u6cd5\uff0c\u4e5f\u5c31\u662f$105$\u4e2a\u6570\u5b57\u7684\uff0c\u90a3\u4e48\u5c31\u662f\u540c\u4e00\u4efd\u7b54\u6848/\u4ee3\u7801\u3002\n\n---\n\nsolve4\uff1a\u7528floyd\u5361dijkstra\u7684\u5806\u4f18\u5316\u3002\n\n\u5176\u5b9e\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u6709\u4eba\u79f0\u4e4b\u4e3a\u5806\u4f18\u5316spfa\uff1f\u4e0d\u61c2\u4f60\u4eec\u90a3\u4e00\u5957\u7406\u8bba\u3002\n\n\u8fd9\u4e2a\u4e1c\u897f\u5728\u6b63\u6743\u56fe\u4e0a\u8dd1\u7684\u98de\u5feb\uff0c\u770b\u8d77\u6765\u6ca1\u6cd5\u5361\uff0c\u5b9e\u9645\u4e0a\u56fe\u662f\u53ef\u4ee5\u8d1f\u6743\u7684\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528\u8d1f\u6743\u56fe\u53bb\u5361\u3002\n\n\u9996\u5148\u6709\u4e00\u70b9\u5e38\u8bc6\u8981\u77e5\u9053\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5728\u8d1f\u6743\u56fe\u4e0a\u662f\u4f1a\u88ab\u5361\u5230\u6307\u6570\u7ea7\u522b\u7684\u3002\u90a3\u4e48\u5982\u4f55\u63a5\u8fd1\u8fd9\u4e2a\u6307\u6570\u7ea7\u522b\u5462\uff1f\n\n\u8fd9\u4e2a\u60f3\u6cd5\u5f88\u795e\u4ed9\u3002\n\n\u6211\u4eec\u65e2\u7136\u8981\u5361\u4f4f\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5fc5\u987b\u8981\u8ba9\u4ed6\u591a\u88ab\u9a97\u51e0\u6b21\u3002\u4f8b\u5982\u697c\u4e0b\u9898\u89e3\u7684\u8fd9\u5f20\u56fe\u5c31\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\uff08\u7eaf\u7cb9\u8865\u5145\u4e00\u5f20\u56fe\u7247\uff09 \n\n![](https://i.loli.net/2018/12/13/5c1264e1803d1.jpg) \n\n\u8fd9\u6837\u4e00\u6765\uff0cdijkstra\u5c31\u4f1a\u9677\u5165\u8fd9\u4e2a\u6b7b\u80e1\u540c\u91cc\u9762\u65e0\u6cd5\u81ea\u62d4\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u5230\u6307\u6570\u7ea7\u522b\u3002\u8fd9\u6837\u5c31\u5f88\u597d\u529e\u4e86\u3002\u6211\u4eec\u591a\u6784\u5efa\u51e0\u4e2a\u8fd9\u6837\u5b50\u7684\u56fe\u5f62\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fc7\u8fd9\u4e2a\u70b9\u4e86\u3002  \n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u60f3\u6cd5\u53bb\u6784\u9020\u51fa\u53ef\u4ee5\u5361dijkstra\u7684\u6570\u636e\u4e86\u3002\n\n```cpp\ninline void main()\n{\n\tfile();\n\tputs(\"33\");\n\tint dis=196608;\n\tfor (int i=0;i<33;i++)\n\t{\n\t\tif (i==32)\n\t\t{\n\t\t\tputs(\"0\");\n\t\t\tbreak;\n\t\t}\n\t\tif (i&1)\n\t\t{\n\t\t\tdis/=2;\n\t\t\tprintf(\"1 %d %d\\n\",i+1,-dis);\n\t\t}\n\t\telse\n\t\t\tprintf(\"2 %d %d %d %d\\n\",i+1,-1,i+2,-2);\n\t}\n\tputs(\"6\");\n\tfor (int i=1;i<=6;i++)\n\t\tputs(\"0 32\");\n}\n```\n\n---\n\nsolve5\uff1a\u5361bellman-ford\u8fc7\u5806\u4f18\u5316dijkstra\n\n\u5176\u5b9e\u672c\u8d28\u4e0a\u548csolve2\u5dee\u4e0d\u591a\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u5768\u94fe\uff0c\u7136\u540e\u5728\u5176\u4ed6\u7684\u5730\u65b9\u6709\u4e00\u5927\u5768\u91cd\u8fb9\u81ea\u73af\u4ec0\u4e48\u7684\u65b9\u6cd5\u53bb\u628abellman-ford\u5361\u6ee1\u3002\n\n\u4f46\u662f\u7ed9\u5b9a\u7684T\u8d3c\u5c0f\uff0c\u90a3\u4e48\u53ea\u80fd\u8003\u8651\u4eba\u8089\u4e8c\u5206\u51fa\u6700\u6070\u5f53\u7684\u7b54\u6848\uff0c\u591a\u8c03\u53c2\u6570\u6d4b\u8bd5\u4e00\u4e0b\u603b\u5f52\u6d4b\u8bd5\u7684\u51fa\u6765\u7684\u561b~\n\n\u4eba\u8089\u4e8c\u5206\u7684\u6280\u5de71\uff1a\u8f93\u51fa\u4e2d\u95f4\u503c\uff0c\u8fd9\u6837\u4fbf\u4e8e\u4f60\u66f4\u597d\u5730\u53bb\u5224\u65ad\u4e0b\u4e00\u6b65\u5e94\u8be5\u5f80\u5c0f\u53d6\u8fd8\u662f\u5f80\u5927\u53d6 \n\u522b\u548c\u6211\u8bf4\u6ca1\u6709\u5b66\u8fc7cerr \n\n```cpp\ninline void main()\n{\n\tfile();\n\tputs(\"300\");\n\tint tot=45;\n\tint cnt=1; \n\tfor (int i=0;i<300;i++)\n\t{\n\t\tint minn=min(tot,15),minres=minn;\n\t\ttot-=minn;\n\t\tif (i!=0)\n\t\t\tminn++;\n\t\tprintf(\"%d\",minn);\n\t\tcnt++;\n\t\tif (i!=0)\n\t\t{\n\t\t\tprintf(\" %d 2233\",i-1);\n\t\t\tcnt+=2;\n\t\t}\n\t\tfor (int j=1;j<=minres;j++)\n\t\t{\n\t\t\tprintf(\" %d 2233\",i);\n\t\t\tcnt+=2;\n\t\t}\n\t\tputs(\"\");\n\t}\n\tputs(\"10\");\n\tcnt++;\n\tfor (int i=1;i<=10;i++)\n\t{\n\t\tputs(\"299 0\");\n\t\tcnt+=2;\n\t}\n\t//cerr << cnt << endl;\n}\n```\n\n---\n\nsolve6\uff1a\u7528bellman-ford\u5361\u5806\u4f18\u5316dijkstra\n\n\u672c\u8d28\u5c31\u662fsolve4\uff0c\u7528\u540c\u4e00\u4efd\u6570\u636e\u5373\u53ef\u3002\n\n---\n\nsolve7\uff1a\u5361\u67d3\u8272\n\n\u8fd9\u597d\u50cf\u968f\u4fbf\u641e\u641e\u5c31\u80fd\u8fc7\u4e86\u5427\uff1f\n\n\u4e3a\u4e86\u8bc1\u660e\u8fd9\u4e2a\u662f\u600e\u4e48\u641e\u90fd\u80fd\u8fc7\u7684\uff0c\u6211\u5199\u4e86\u5982\u4e0b\u4ee3\u7801\uff1a\n\n```cpp\ninline void brute()\n{\n\tprintf(\"%d %d\\n\",n,m);\n\tbool g[105][105]={0};\n\tfor (int i=1;i<=m;)\n\t{\n\t\tint u=rand()%n,v=rand()%n;\n\t\tif (g[u][v]==0 && g[v][u]==0 && u!=v)\n\t\t{\n\t\t\tprintf(\"%d %d\\n\",u,v);\n\t\t\tg[u][v]=g[v][u]=1;\n\t\t\ti++;\n\t\t}\n\t\telse continue;\n\t}\n}\n```\n\n\u53cd\u6b63\u5c31\u662f\u968f\u673a\u751f\u6210\u4e2a\u56fe\u90fd\u80fd\u8fc7\u7684\u5566\uff0c\u4e0d\u60f3\u53bb\u8bc1\u660e\u90a3\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002\n\n---\n\nsolve8\uff1a\u8fc7\u67d3\u8272\n\ntm\u8fd9\u8d27\u8fd8\u6709\u6700\u5c0f\u9650\u5236\n\n\u6211\u4eec\u53ef\u4ee5\u7ed9\u6bcf\u4e2a\u70b9\u9ed1\u8272\u6216\u8005\u767d\u8272\u3002\u7136\u540e\u9ed1\u8272\u5f80\u767d\u8272\u8fde\u8fb9\uff0c\u540c\u8272\u4e0d\u8fde\u8fb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fc7\u4e86\uff08\n\n```cpp\ninline void brute()\n{\n\tprintf(\"%d %d\\n\",n,m);\n\tbool g[105][105]={0};\n\tint col[105];\n\tfor (int i=0;i<n;i++)\n\t\tcol[i]=rand()&1;\n\tint cnt=0;\n\tfor (int i=0;i<n && cnt<m;i++)\n\t{\n\t\tfor (int j=0;j<n && cnt<m;j++)\n\t\t{\n\t\t\tif (col[i]==col[j])\n\t\t\t\tcontinue;\n\t\t\tif (g[i][j])\n\t\t\t\tcontinue;\n\t\t\tcout << i << \" \" << j << endl;\n\t\t\tg[i][j]=g[j][i]=true;\n\t\t\tcnt++;\n\t\t}\n\t}\n}\n```\n\n\u540e\u8bb0\uff1a\u6211\u505a\u4e86\u4e09\u56db\u5929\uff0czzq\u53ea\u505a\u4e86\u4e24\u5c0f\u65f6\uff0c\u8bba\u6211\u4e0e\u5927\u4f6c\u7684\u5dee\u8ddd.jpg",
        "postTime": 1544711549,
        "uid": 8457,
        "name": "chen_zhe",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3640 \u3010[APIO2013]\u51fa\u9898\u4eba\u3011"
    },
    {
        "content": "## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/little-cindy/articles/sol-P3640.html)\n\n## \u9898\u610f\u7b80\u8ff0\n\n\u63d0\u4ea4\u7b54\u6848\u9898\n\n\u4f60\u662f\u4e00\u4e2a\u51fa\u9898\u4eba\uff0c\u6709\u4e24\u4e2a\u95ee\u9898\uff1a\n\n- $\\text{SSSP}$\uff1a\u6700\u77ed\u8def\n\n  \u70b9\u6570\u4e0d\u8d85\u8fc7 $300$\uff0c\u8fb9\u6743\u7684\u7edd\u5bf9\u503c\u5c0f\u4e8e $10^6$\uff0c\u603b\u8fb9\u6570\u4e0d\u8d85\u8fc7 $5000$\uff0c\u8be2\u95ee\u4e0d\u8d85\u8fc7 $10$ \u6b21\n\n- $\\text{Mystery}$\uff1a\u65e0\u5411\u56fe\u67d3\u8272\n\n  \u70b9\u6570\u5c0f\u4e8e $1000$ \u4e14\u5927\u4e8e $70$\uff0c\u8fb9\u6570\u5c0f\u4e8e $10^6$ \u4e14\u5927\u4e8e $1500$\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\uff1a\n\n\u7ed9\u5b9a\u6e90\u7a0b\u5e8f $A$ \u548c\u6e90\u7a0b\u5e8f $B$\uff0c\u9700\u8981\u9020\u4e00\u7ec4\u6570\u636e\u4f7f\u5f97\u6e90\u7a0b\u5e8f $A$ \u80fd\u8dd1\u8fc7\u800c\u6e90\u7a0b\u5e8f $B$ \u4e0d\u884c\u4e14\u6574\u6570\u4e2a\u6570\u5c0f\u4e8e $T$\u3002\n\n**\u4e00\u4e2a\u7a0b\u5e8f\u662f\u5426\u80fd\u8dd1\u8fc7\u4e00\u4e2a\u95ee\u9898\u4e0d\u5728\u610f\u5176\u7b54\u6848\u662f\u5426\u6b63\u786e\uff0c\u4ec5\u5173\u5fc3\u662f\u5426\u8d85\u65f6**\n\n| \u6d4b\u8bd5\u70b9\u7f16\u53f7 |  $T$   |       \u95ee\u9898       |           \u6e90\u7a0b\u5e8f $A$           |           \u6e90\u7a0b\u5e8f $B$           |\n| :--------: | :----: | :--------------: | :----------------------------: | :----------------------------: |\n|    $1$     | $107$  |  $\\text{SSSP}$   |   $\\text{ModifiedDijkstra}$    |     $\\text{FloydWarshall}$     |\n|    $2$     | $2222$ |  $\\text{SSSP}$   |     $\\text{FloydWarshall}$     | $\\text{OptimizedBellmanFord}$  |\n|    $3$     | $105$  |  $\\text{SSSP}$   | $\\text{OptimizedBellmanFord}$  |     $\\text{FloydWarshall}$     |\n|    $4$     | $157$  |  $\\text{SSSP}$   |     $\\text{FloydWarshall}$     |   $\\text{ModifiedDijkstra}$    |\n|    $5$     | $1016$ |  $\\text{SSSP}$   |   $\\text{ModifiedDijkstra}$    | $\\text{OptimizedBellmanFord}$  |\n|    $6$     | $143$  |  $\\text{SSSP}$   | $\\text{OptimizedBellmanFord}$  |   $\\text{ModifiedDijkstra}$    |\n|    $7$     | $3004$ | $\\text{Mystery}$ |        $\\text{Gamble1}$        | $\\text{RecursiveBacktracking}$ |\n|    $8$     | $3004$ | $\\text{Mystery}$ | $\\text{RecursiveBacktracking}$ |        $\\text{Gamble2}$        |\n\n## \u89e3\u6cd5\n\n\u9996\u5148\u6211\u4eec\u660e\u786e\u4e00\u4e0b\u6bcf\u4e2a\u4ee3\u7801\u7b97\u6cd5\u53ca\u5176\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\n\n|            \u4ee3\u7801\u540d\u79f0            |         \u7b97\u6cd5          |       \u65f6\u95f4\u590d\u6742\u5ea6       |\n| :----------------------------: | :-------------------: | :--------------------: |\n|     $\\text{FloydWarshall}$     |    $\\text{Floyd}$     |    $\\Theta(V^3+Q)$     |\n| $\\text{OptimizedBellmanFord}$  | $\\text{Bellman-Ford}$ |     $\\Theta(VEQ)$      |\n|   $\\text{ModifiedDijkstra}$    |   $\\text{Dijkstra}$   | $\\Theta(QE+Q\\log_2 E)$ |\n|        $\\text{Gamble1}$        |  $\\text{never TLE}$   |      $\\Theta(1)$       |\n|        $\\text{Gamble2}$        |  $\\text{always TLE}$  |    $\\Theta(\\infty)$    |\n| $\\text{RecursiveBacktracking}$ |  $\\text{Backtrack}$   |     \u61d2\u5f97\u7b97\uff0c\u633a\u5927\u7684     |\n\n**\u6ce8\u610f\u8fd9\u91cc $V$ \u662f\u70b9\u6570\uff0c$E$ \u662f\u8fb9\u6570\uff0c$Q$ \u662f\u8be2\u95ee\u6570**\n\n### point 1\n\n#### \u76ee\u7684\n\n\u5361 $\\text{Floyd}$\n\n#### \u505a\u6cd5\n\n\u6784\u9020 $V=101$\n\n\u663e\u7136\u56e0\u4e3a\u8981\u8f93\u51fa $101$ \u4e2a\u70b9\uff0c\u81f3\u5c11\u5c31\u8981 $101$ \u4e2a\u6570\u3002\u6240\u4ee5\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u70b9\u7684\u51fa\u5ea6\u90fd\u63cf\u8ff0\u4e3a $0$\u3002\n\n\u6700\u540e\u8be2\u95ee\u53ea\u9700\u8981\u4e00\u4e2a\uff0c\u95ee\u9898\u968f\u4f60\uff0c\u8fd9\u91cc\u4f7f\u7528 `0 99`\n\n\u5171\u8ba1 $105$ \u4e2a\u6570\n\n#### code\n\n**\u4e3a\u4e86\u9632\u6b62\u6284\u88ad\uff0c\u6240\u6709\u4ee3\u7801\u5747\u65e0 `print` \u51fd\u6570\uff0c\u671b\u5468\u77e5\u3002**\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxv=305,maxq=15;\nint V,E,Q;\nvector<pair<int,int>> G[maxv];\nint s[maxq],t[maxq];\nint main(){\n    V=101;\n    Q=1;\n    for(int i=1;i<=Q;i++){\n        s[i]=0;\n        t[i]=99;\n    }\n    print();\n    return 0;\n}\n```\n\n### point 2\n\n#### \u76ee\u7684\n\n\u5361 $\\text{Bellman-Ford}(\\Theta(VEQ))$\n\n\u4e14\u9700\u8981\u8ba9 $\\text{Floyd}(\\Theta(V^3))$ \u8fc7\n\n#### \u505a\u6cd5\n\n\u8fd9\u4e2a\u70b9\u5176\u5b9e\u770b\u7740\u96be\u5361\uff0c\u5b9e\u9645\u4e0a\u4e0d\u96be\u3002\n\n\u5c31\u662f\u8981\u8ba9 $V$ \u6070\u597d\u4e3a $100$\uff08\u8ba9 $\\text{Floyd}$ \u8fc7\uff09\uff0c\u4fbf\u5c3d\u91cf\u591a\u52a0\uff0c\u5728 $10$ \u6b21\u8be2\u95ee\u5c31\u884c\u4e86\uff08\u4e3b\u8981\u662f\u8be2\u95ee\u4e0a\u9650\u4e3a $10$\uff09\n\n\u53ef\u4ee5\u53bb [oi-wiki](http://oi-wiki.com/graph/shortest-path/#bellman-ford) \u4e0a\u770b\u4e00\u4e0b\u8fd9\u4e2a\u7b97\u6cd5\u7684\u539f\u7406\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u6211\u4eec\u5728\u4e00\u6761\u94fe\u4e0a\u72c2\u52a0\u81ea\u73af\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u4f1a\u88ab\u5361\u98de\u3002\n\n\u6700\u540e\u7684\u8be2\u95ee\u8981\u6309\u7167\u4f60\u5efa\u8fb9\u7684\u65b9\u5411\uff0c\u5426\u5219\u5361\u4e0d\u6389\u3002\n\n\u6700\u540e\u7b97\u4e00\u4e0b\u8fb9\u80fd\u653e\u591a\u5c11\u8fb9\uff1a$E_{\\max}=\\frac{2222(T)-1(V)-100(\u51fa\u5ea6)-1(Q)-2\\times10(\u8be2\u95ee)}{2(\u70b9\u7f16\u53f7\u53ca\u6743\u503c)}-99(\u94fe)=951$\n\n#### code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxv=305,maxq=15;\nint V,E,Q;\nvector<pair<int,int>> G[maxv];\nint s[maxq],t[maxq];\nint main(){\n    V=100;\n    E=951;\n    for(int i=0;i<V;i++){\n        int k=min(E,10);\n        E-=k;\n        if(i!=0){\n            G[i].push_back(make_pair(i-1,rand()%114514+114514));\n        }\n        for(int j=1;j<=k;j++){\n            G[i].push_back(make_pair(i,rand()%114514+114514));\n        }\n    }\n    Q=10;\n    for(int i=1;i<=Q;i++){//\u7531\u4e8e\u6211\u662f\u53cd\u7740\u5efa\u7684\u94fe\uff0c\u6240\u4ee5\u8f93\u51fa99 0\n        s[i]=99;\n        t[i]=0;\n    }\n    print();\n    return 0;\n}\n```\n\n### point 3\n\n\u540c point 1\uff0c\u8fd9\u91cc\u4e0d\u52a0\u8d58\u8ff0\n\n### point 4\n\n#### \u76ee\u7684\n\n\u5361 $\\text{Dijkstra}(\\Theta(QE+Q\\log_2 E))$\n\n\u4e14\u9700\u8981\u8ba9 $\\text{Floyd}(\\Theta(V^3))$ \u8fc7\n\n#### \u505a\u6cd5\n\n\u4e0d\u4e86\u89e3 $\\text{Dijkstra}$ \u7684\u53ef\u4ee5\u53bb [oi-wiki](http://oi-wiki.com/graph/shortest-path/#dijkstra) \u4e0a\u770b\u770b\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff1a\n\n> \u5728\u7a00\u758f\u56fe\u4e2d\uff0c$m=\\Theta(n)$\uff0c\u4f7f\u7528\u4e8c\u53c9\u5806\u5b9e\u73b0\u7684 Dijkstra \u7b97\u6cd5\u8f83 Bellman-Ford \u7b97\u6cd5\u5177\u6709\u8f83\u5927\u7684\u6548\u7387\u4f18\u52bf\uff1b\u800c\u5728\u7a20\u5bc6\u56fe\u4e2d\uff0c$m=\\Theta(n^2)$\uff0c\u8fd9\u65f6\u5019\u4f7f\u7528\u66b4\u529b\u505a\u6cd5\u8f83\u4e8c\u53c9\u5806\u5b9e\u73b0\u66f4\u4f18\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u9898\u6ca1\u6709\u7ed9\u6211\u4eec\u5efa\u7a20\u5bc6\u56fe\u7684\u673a\u4f1a\uff0c\u6211\u4eec\u4e0d\u80fd\u8fd9\u4e48\u5361\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u53ea\u80fd\u4ece $\\text{Dijkstra}$ \u677e\u5f1b\u64cd\u4f5c\u7684\u6f0f\u6d1e\u6765\u5361\u3002\n\n\u5c31\u5982 [**Abzilurtahv**](https://www.luogu.com.cn/user/224991) \u5927\u4f6c\u6240\u8bf4\u7684\u90a3\u6837\uff0c\u53ea\u8981\u6784\u9020\u51fa\u5982\u4e0b\u56fe\u7684\u60c5\u51b5\uff0c $\\text{Dijkstra}$ \u5c31\u53bb\u4e16\u4e86\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/g5xp43kh.png)\n\n\u90a3\u4e48\u4e3a\u4ec0\u4e48\uff1f\u8fd9\u91cc\u662f\u5f88\u591a\u9898\u89e3\u6ca1\u6709\u8bf4\u5230\u7684\u3002\n\n\u6211\u4eec\u6765\u7b80\u5355\u7684\u8bc1\u660e\u4e00\u4e0b\uff1a\n\n---\n\n\u6211\u4eec\u622a\u53d6\u4e00\u4e2a\u7247\u6bb5\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/24vzheqm.png)\n\n\u90a3\u4e48\u6574\u4e2a\u7b97\u6cd5\u4f1a\u6309\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c\uff1a\n\n| \u5f53\u524d\u70b9 |         \u5f53\u524d\u64cd\u4f5c         |    \u5f53\u524d\u961f\u5217    |\n| :----: | :----------------------: | :------------: |\n|  $0$   | $pop(0),push(1),push(2)$ |   $\\{2,1\\}$    |\n|  $2$   | $pop(2),push(3),push(4)$ |  $\\{4,3,1\\}$   |\n|  $4$   | $pop(4),push(5),push(6)$ | $\\{6,5,3,1\\}$  |\n|  $6$   |         $pop(6)$         |  $\\{5,3,1\\}$   |\n|  $5$   |     $pop(5),push(6)$     |  $\\{6,3,1\\}$   |\n|  $6$   |         $pop(6)$         |   $\\{3,1\\}$    |\n|  $3$   |     $pop(3),push(4)$     |   $\\{4,1\\}$    |\n|  $4$   | $pop(4),push(5),push(6)$ |  $\\{6,5,1\\}$   |\n|  $6$   |         $pop(6)$         |   $\\{5,1\\}$    |\n|  $5$   |     $pop(5),push(6)$     |   $\\{6,1\\}$    |\n|  $6$   |         $pop(6)$         |    $\\{1\\}$     |\n|  $1$   |     $pop(1),push(2)$     |    $\\{2\\}$     |\n|  $2$   | $pop(2),push(3),push(4)$ |    $\\{4\\}$     |\n|  $4$   | $pop(4),push(5),push(6)$ |   $\\{6,5\\}$    |\n|  $6$   |         $pop(6)$         |    $\\{5\\}$     |\n|  $5$   |     $pop(5),push(6)$     |    $\\{6\\}$     |\n|  $6$   |         $pop(6)$         | $\\text{empty}$ |\n\n\u800c\u53d1\u73b0\u8282\u70b9 $V$ \u5916\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u62e5\u6709\u8fd9\u4e2a\u6027\u8d28\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(2^{\\frac{V-1}{2}})$\uff0c\u5ffd\u7565\u5e38\u6570\u76f8\u5f53\u4e8e $\\Theta(2^V)$\u3002\n\n\u8bc1\u6bd5\u3002\n\n---\n\n\u6240\u4ee5\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6784\u9020\u4e00\u7ec4 $V=33,Q=10$ \u7684\u6570\u636e\u5373\u53ef\n\n#### code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxv=305,maxq=15;\nint V,E,Q;\nvector<pair<int,int>> G[maxv];\nint s[maxq],t[maxq];\nint main(){\n    V=33;\n    int dis=200000;\n    for(int i=0;i<V;i++){\n        if(i==V-1){\n            continue;\n        }\n        if(i&1){\n            dis/=2;\n            G[i].push_back(make_pair(i+1,-dis));\n        }\n        else{\n            G[i].push_back(make_pair(i+1,-1));\n            G[i].push_back(make_pair(i+2,-2));\n        }\n    }\n    Q=10;\n    for(int i=1;i<=Q;i++){\n        s[i]=0;\n        t[i]=32;\n    }\n    print();\n    return 0;\n}\n```\n\n### point 5\n\n#### \u76ee\u7684\n\n\u5361\u6389  $\\text{Bellman-Ford}(\\Theta(VEQ))$\n\n\u4e14\u9700\u8981\u8ba9 $\\text{Dijkstra}(\\Theta(QE+Q\\log_2 E))$ \u8fc7\n\n#### \u505a\u6cd5\n\n\u540c point 2\uff0c\u6211\u4eec\u9700\u8981\u5728\u4e00\u6761\u94fe\u4e0a\u72c2\u52a0\u81ea\u73af\u3002\n\n\u53e6\u5916\u6211\u4eec\u53d1\u73b0\u5176\u5b9e $\\text{Dijkstra}$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e0d\u4f1a\u53d7 $V$ \u7684\u5f71\u54cd\u7684\uff0c\u7136\u540e\u6211\u4eec\u5c31\u8ba9 $V$ \u5c3d\u91cf\u5927\uff0c\u4e5f\u5c31\u662f $V=300$\uff0c$Q$ \u4e5f\u8bbe\u4e3a $10$\u3002\n\n\u7b80\u5355\u8ba1\u7b97\u53d1\u73b0 $E_{\\max}=\\frac{1016-1(V)-300(\u51fa\u5ea6)-1(Q)-2\\times10(\u8be2\u95ee)}{2}-299(\u94fe)=48$\n\n#### code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxv=305,maxq=15;\nint V,E,Q;\nvector<pair<int,int>> G[maxv];\nint s[maxq],t[maxq];\nint main(){\n    V=300;\n    E=48;\n    for(int i=0;i<V;i++){\n        int k=min(E,10);\n        E-=k;\n        if(i!=0){\n            G[i].push_back(make_pair(i-1,rand()%114514+114514));\n        }\n        for(int j=1;j<=k;j++){\n            G[i].push_back(make_pair(i,rand()%114514+114514));\n        }\n    }\n    Q=10;\n    for(int i=1;i<=Q;i++){\n        s[i]=299;\n        t[i]=0;\n    }\n    print();\n    return 0;\n}\n```\n\n### point 6 \n\n\u540c point 4\uff0c\u53ea\u662f $Q$ \u8fc7\u5927\u5bfc\u81f4\u8d85\u51fa\u9650\u5236\uff0c$Q$ \u6539\u4e3a $6$ \u5373\u53ef\u3002\n\n### point 7\n\n#### \u76ee\u7684\n\n\u5361\u6389 $\\text{Backtrack}$\uff0c\u8ba9 $\\text{Gamble1}$ \u8fc7\u3002\n\n#### \u505a\u6cd5\n\n\u9996\u5148\u660e\u786e\u4e00\u70b9\uff0c\u8fd9\u4e2a $\\text{Gamble1}$ \u662f\u4e2a\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5361\u6389\u7684\u7a0b\u5e8f\uff0c\u6240\u4ee5\u4f60\u53ea\u9700\u8981\u7ba1 $\\text{Backtrack}$\u3002\n\n\u800c\u4f60\u5176\u5b9e\u53ef\u4ee5\u5f88\u663e\u7136\u7684\u53d1\u73b0 $\\text{Backtrack}$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u65e0\u6bd4\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u968f\u673a\u4e00\u7ec4\u6570\u636e\u3002\n\n\u70b9\u6570\u662f\u968f\u610f\u7684\uff0c\u800c $E_{\\max}=\\frac{3004-1(V)-1(E)}{2}=1501$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8ba9 $V=999,E=1501$\u3002\n\n#### code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxv=1005;\nint V,E;\nbool G[maxv][maxv];\nvector<pair<int,int>> e;\nint main(){\n    V=999;\n    E=1501;\n    for(int i=1;i<=E;i++){\n        int x=rand()%V;\n        int y=rand()%V;\n        while(G[x][y]||G[y][x]||x==y){\n            x=rand()%V;\n            y=rand()%V;\n        }\n        G[x][y]=G[y][x]=1;\n        e.push_back(make_pair(x,y));\n    }\n    reverse(e.begin(),e.end());\n    print();\n    return 0;\n}\n```\n\n### point 8\n\n#### \u76ee\u7684\n\n\u5361\u6389 $\\text{Gamble2}$ \uff0c$\\text{Backtrack}$ \u8ba9\u8fc7\u3002\n\n#### \u505a\u6cd5\n\n\u9996\u5148\u660e\u786e\u4ee5\u4e0b\uff0c $\\text{Gamble2}$ \u662f\u4e00\u4e2a\u6c38\u8fdc\u90fd\u8fc7\u4e0d\u53bb\u7684\u7b97\u6cd5\uff0c\u6240\u4ee5\u4e0d\u7528\u7ba1\u3002\n\n\u800c\u8fd9\u4e2a $\\text{Backtrack}$ \u662f\u66b4\u529b\u67d3\u8272\uff0c\u6240\u4ee5\u6211\u4eec\u826f\u5fc3\u4e00\u70b9\uff0c\u8ba9\u5b83\u80fd\u591f\u4e00\u904d\u67d3\u5b8c\u3002\n\n\u6240\u4ee5\u6211\u4eec\u518d\u9020\u6570\u636e\u7684\u65f6\u5019\u5148\u63d0\u524d\u67d3\u597d\u8272\uff0c\u8fd9\u6837\u5c31\u80fd\u8fc7\u4e86\u3002\n\n\u6ce8\u610f\u8fd9\u91cc $V$ \u4e0d\u80fd\u8fc7\u5927\uff0c\u5426\u5219\u4f1a\u628a $\\text{Backtrack}$ \u5361\u6389\u3002\n\n#### code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxv=1005;\nint V,E;\nint col[maxv];\nbool G[maxv][maxv];\nvector<pair<int,int>> e;\nint main(){\n    V=101;\n    E=1501;\n    for(int i=1;i<=V;i++){\n        col[i]=rand()%2;\n    }\n    for(int i=1;i<=E;i++){\n        int x=rand()%V;\n        int y=rand()%V;\n        while(col[x]==col[y]||G[x][y]||G[y][x]||x==y){\n            x=rand()%V;\n            y=rand()%V;\n        }\n        G[x][y]=G[y][x]=1;\n        e.push_back(make_pair(x,y));\n    }\n    reverse(e.begin(),e.end());\n    print();\n    return 0;\n}\n```\n\n---\n\n\u5b8c\u7ed3\u6492\u82b1\uff01\n\n### \u540e\u8bb0\n\n\u8fd9\u7bc7\u9898\u89e3\u6211\u662f\u8fb9\u5199\u9898\u8fb9\u5199\u7684\n\n\u4e00\u5171\u63d0\u4ea4 $26$ \u6b21\u624d\u83b7\u5f97 AC\n\n\u4e0b\u9762\u662f\u901a\u8fc7\u5404\u4e2a\u6d4b\u8bd5\u70b9\u7684\u65f6\u95f4\uff1a\n\n| \u6d4b\u8bd5\u70b9\u7f16\u53f7 |              \u65f6\u95f4              | \u5931\u8d25\u6b21\u6570 |\n| :--------: | :----------------------------: | :------: |\n|    $1$     | $\\texttt{2022-07-27 10:22:54}$ |   $0$    |\n|    $2$     | $\\texttt{2022-07-27 11:16:21}$ |   $0$    |\n|    $3$     | $\\texttt{2022-07-27 11:14:03}$ |   $0$    |\n|    $4$     | $\\texttt{2022-07-27 12:25:53}$ |   $10$   |\n|    $5$     | $\\texttt{2022-07-27 14:12:41}$ |   $0$    |\n|    $6$     | $\\texttt{2022-07-27 14:18:34}$ |   $3$    |\n|    $7$     | $\\texttt{2022-07-27 14:37:29}$ |   $1$    |\n|    $8$     | $\\texttt{2022-07-27 14:51:48}$ |   $4$    |\n\n\u5386\u65f6\u5171 $16134\\text{s}$\uff0c\u5408\u8ba1 $268.9\\text{min}$\uff0c\u76f8\u5f53\u4e8e\u7ea6 $4.18167\\text{h}$\u3002\n\n\u5168\u6587\u5171 $11664$ \u4e2a\u5b57\u3002\n\n\u7801\u5b57\u4e0d\u6613\uff0c\u70b9\u4e2a\u8d5e\u518d\u8d70\u5427\uff5e",
        "postTime": 1658905751,
        "uid": 357311,
        "name": "little_cindy",
        "ccfLevel": 6,
        "title": "P3640 [APIO2013] \u51fa\u9898\u4eba \u9898\u89e3"
    },
    {
        "content": "~~AHC\u65e2\u89c6\u611f~~\n\n\u90a3\u4e48\u672c\u9898\u8981\u6c42\u653e\u8fc7\u4e00\u79cd\u7b97\u6cd5\uff0c\u7136\u540e\u5361\u6389~~SPFA\u548c~~\u53e6\u4e00\u79cd\u7b97\u6cd5\u3002\n\n## \u7b97\u6cd5\u5206\u6790\n\n### SSSP\n\n- Floyd\uff1a$\\Theta(V^3)$\n- BF\uff1a\u968f\u673a\u60c5\u51b5 $\\Theta(kE)$\uff08$k$ \u4e3a\u5c0f\u5e38\u6570\uff09\uff0c\u4f46\u662f\u6709\u8d1f\u6743\u5c31\u57fa\u672c\u4e0a`GG`\u4e86\uff0c$\\Theta(VE)$\n- ModifiedDijkstra\uff1a~~\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u770b\u7740\u50cfSPFA~~\uff0c**\u6b63\u6743\u56fe**\u98de\u5feb\u4e14\u7a33\u5b9a\uff0c\u8d1f\u6743`GG`\n\n### Mystery\uff08\u67d3\u8272\uff09\n\n- Gamble1\uff1a~~\u9a97\u5206~~\uff0c\u7a33\u8fc7\n- RecursiveBacktracking\uff1a\u66b4\u529b\n- Gamble2\uff1a~~\u9a97\u5206+while(1)~~\uff0c\u7a33\u5b9aTLE\n\n## \u6b63\u6587\n\n- **Task 1**\n\n\u9001\u5206\uff0c\u663e\u7136`Floyd`\u5728 $V \\gt 100$ \u4f1aT\uff0c\u6784\u9020\u4e00\u4e2a $V=101,E=0$ \u7684\u56fe\u5373\u53ef\u3002\n\n\u6ce8\u610f $\\color{#ff0000}0 \\lt \\color{#000000}Q \\le 10$\uff0c\u56e0\u6b64 $Q=1$\uff0c\u6574\u6570\u4e2a\u6570 $n=2+V+2E+2Q=105 \\lt 107$\n\n- **Task 2**\n\n\u5361\u6ee1`BF`\u9700\u8981\u786e\u4fdd\u6bcf\u8f6e\u90fd\u6709\u82e5\u5e72\u6b21\u677e\u5f1b\u3002\n\n\u6709\u4e00\u4e2a\u4e0d\u96be\u60f3\u7684\u601d\u8def\uff0c\u5c31\u662f\u6bcf\u8f6e\u8ba9\u7f16\u53f7\u5c0f\u7684\u5c3d\u53ef\u80fd\u665a\u88ab\u677e\u5f1b\uff0c\u4e5f\u5c31\u662f\u8ba9\u7f16\u53f7\u5927\u7684\u677e\u5f1b\u7f16\u53f7\u5c0f\u7684\u3002\u5177\u4f53\u4e3a\u7531 $0$ \u5411 $V-1$ \u8fde\u4e00\u6761\u8fb9\uff0c$V-1$ \u4e0e $1,2,3,...,V-2$ \u9010\u4e00\u8fde\u8fb9\uff0c\u7136\u540e\u6574\u4e00\u6761 $V-2 \\to V-3 \\to ... \\to 1$ \u7684\u8d1f\u6743\u94fe\u3002\n\n\u8fd9\u79cd\u601d\u8def\u5728\u672c\u5730\u6210\u529f\u628a`BF`\u5361\u4e86\uff0c\u4f46\u662f\u7531\u4e8e`spj`\u7684\u9505\uff0c\u63d0\u4ea4\u540e`WA`\u4e86\u3002~~\u8fd9\u597d\u5417\uff1f\u8fd9\u4e0d\u597d\uff01~~\n\n\u90a3\u4e48\u6362\u79cd\u601d\u8def\u3002\u6b64\u65f6\u770b\u8f93\u5165\u683c\u5f0f\u3002\n\n> \u6240\u6709\u8be2\u95ee\u4e2d\u7684\u8d77\u70b9 $s_k$ \u90fd\u4e0d\u80fd**\u5230\u8fbe**\u4efb\u4f55\u4e00\u4e2a\u8d1f\u6743\u5708\u3002\n\n\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u6784\u9020\u51fa $s_k$ \u4e0d\u80fd\u5230\u8fbe\u7684\u8d1f\u73af\uff0c\u4ece\u800c\u62c9\u6ee1\u3002$V=100,E=1050,Q=10$ \u5373\u53ef\n\n\u6570\u636e\u5927\u6982\u957f\u8fd9\u6837\uff1a\n\n```param\n100\n0\n(99\u884c\uff0c\u603b\u4e4b\u5c31\u662f\u4e00\u5806\u8d1f\u73af)\n10\n0 99\n0 32\n0 44\n0 85\n0 3\n(\u603b\u4e4b\u5c31\u662f\u4e00\u5806\u6e90\u70b9\u662f0\u7684\u8be2\u95ee)\n```\n\n$n=2222=T$\n\n- **Task 3**\n\n\u540c**Task 1**\uff0c$n=105=T$\n\n- **Task 4**\n\n\u90a3\u4e48\u6bd2\u7624\u51fa\u9898\u4eba\u5728\u6574\u6700\u77ed\u8def\u95ee\u9898\u7684\u65f6\u5019\u5f80\u5f80\u8981\u628a`SPFA`\u5361\u4e86\uff0c\u540c\u65f6\u628a`SLF`\u4f18\u5316\u4e5f\u5361\u4e86\u3002\u6839\u636e\u67d0\u7bc7\u6587\u7ae0\uff0c`SLF`\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u4ee5\u88ab\u5361\u5230\u6307\u6570\u7ea7\uff08~~\u6240\u4ee5\u8fd9\u6839\u672c\u4e0d\u53eb\u4f18\u5316~~\uff09\u3002\u53d7\u8fd9\u4e2a\u7684\u542f\u53d1\uff0c\u4e5f\u8bb8\u6211\u4eec\u53ef\u4ee5\u628a\u4f18\u5316\u65b9\u5f0f\u76f8\u4f3c\u7684\u5806\u4f18\u5316\u5361\u6389\u3002\n\n\u597d\u4e86\u778e\u626f\u7ed3\u675f\uff0c\u5361Dijkstra\u53ea\u9700\u8981\u8ba9\u5b83\u5728\u677e\u5f1b\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\u628a\u4e4b\u524d\u677e\u5f1b\u8fc7\u7684\u70b9\u5168\u90e8\u91cd\u65b0\u677e\u5f1b\u5373\u53ef\u3002\n\n\u9996\u5148\u7528\u4e00\u4e9b\u5947\u602a\u7684\u4e1c\u897f\u5c06Dj\u5f15\u5230\u4e00\u4e2a\u5947\u602a\u7684\u70b9\u4e0a\uff0c\u50cf\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/o60hunns.png)\n\n\u90a3\u4e48\u73b0\u5728\u5b83\u88ab\u5f15\u5230\u4e86 $V-1$ \u5904\u3002\u663e\u7136 $V-1$ \u7684\u6700\u77ed\u8def\u88ab\u677e\u5f1b\u6210\u4e86 $0$\u3002\u7136\u540e\u5012\u9000\u5230\u5b83\u4e0a\u9762\u7684\u90a3\u4e2a\u70b9\uff0c\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u5728\u8fb9\u6743\u4e0a\u52a8\u70b9\u624b\u811a\uff0c\u6bd4\u5982\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/mm63k092.png)\n\n\u90a3\u4e48\u5b83\u5728 $V-3$ \u5904\uff0c\u677e\u5f1b\u5b8c\u4e86 $V-1$\uff0c\u7136\u540e\u5f00\u59cb\u677e\u5f1b $V-2$\uff0c\u677e\u5f1b $V-2$ \u4e4b\u540e\u5b83\u53c8\u8d70\u5230\u4e86 $V-1$\uff0c\u7136\u540e\u5c31\u2026\u2026\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/1nj251sb.png)\n\n\u591a\u6574\u70b9\uff0c\u7136\u540e\u8fd9\u73a9\u610f\u5c31\u88ab\u5361\u4e86\u3002\u968f\u4fbf\u5b9a\u4e2a\u6570\u636e\u89c4\u6a21\uff0c\u6bd4\u5982 $V=33,Q=10$\u3002\n\n- **Task 5**\n\n\u540c**Task 2**\uff0c$V=300,E=347$ \u5373\u53ef\u3002\n\n- **Task 6**\n\n\u540c**Task 4**\uff0c$Q=6$ \u5373\u53ef\u3002\n\n- **Task 7**\n\n\u9001\u5206\uff0c\u5b8c\u5168\u56fe\u52a0\u70b9\u8fb9\u5373\u53ef\u3002\n\n\u6ce8\u610f\u8303\u56f4\uff0c\u89c2\u5bdf $T$ \u53ef\u5f97 $E=1501$\uff0c$n=2E+2$\n\n- **Task 8**\n\n\u9001\u5206\uff0c\u8ba9\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u5c3d\u53ef\u80fd\u5c11\u5373\u53ef\u3002\n\n\u4ee3\u7801\u603b\u957f\uff08\u5305\u62ec\u6ce8\u91ca\uff096877B\uff0c\u5c31\u4e0d\u8d34\u4e86\u3002",
        "postTime": 1619099367,
        "uid": 224991,
        "name": "Presentation_Emitter",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3640 \u3010[APIO2013]\u51fa\u9898\u4eba\u3011"
    },
    {
        "content": "\u4e00\u9053\u6709\u610f\u601d\u7684\u9898\u7b54\u6784\u9020\u9898\u3002\u9898\u76ee\u662f\u8981\u4f60\u5361\u6389\u4e00\u4e2a\u7b97\u6cd5\uff0c\u7ed9\u53e6\u4e00\u4e2a\u7b97\u6cd5\u8fc7\u3002\u524d 6 \u4e2a\u70b9\u662f\u6700\u77ed\u8def\u7684\u4e09\u79cd\u89e3\u6cd5\uff0c\u540e\u9762 2 \u4e2a\u70b9\u662f\u4e00\u4e2a\u67d3\u8272\u95ee\u9898\u3002\n\n------------\n\n## \u6700\u77ed\u8def\u90e8\u5206\n\n\u4e00\u4e9b\u9700\u8981\u4e86\u89e3\u7684\u4e1c\u897f\uff1a\n\n- FloydWarshall \u5c31\u662f $O(V^3)$\uff0c\u548c\u8fb9\u65e0\u5173\u3002\n\n- ModifiedDijkstra \u5806\u4f18\u5316\u7684 Dijkstra\uff0c\u6b63\u6743\u56fe\u91cc $O(Q*\\log V*E)$\uff0c\u8d1f\u6743\u56fe\u53ef\u4ee5\u5361\u3002\n\n- OptimizedBellmanFord $O(QVE)$\uff0c\u968f\u673a\u56fe\u8dd1\u7684\u5feb\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5f00\u59cb\u4e86\u3002\n\n### \u4e00\u3001\u5361\u6389 Floyd (Task1,3)\n\n\u6700\u7b80\u5355\u7684\u90e8\u5206\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ee4 $V=101,E=0$\uff0cFloyd \u6b63\u597d\u70b8\u5f00\u3002\u6b64\u65f6 $T=105$\uff0c\u6b63\u597d\u6ee1\u8db3\u9650\u5236\u3002\n\n```cpp\ncout << \"101\" << endl;\nfor (int i=1;i<=101;i++) cout << \"0\" << endl;\ncout << \"1\\n1 101\\n\";\n```\n\n### \u4e8c\u3001\u5361\u6389 BellmanFord (Task2,5)\n\n\u4ece\u8fd9\u91cc\u672c\u9898\u6b63\u5f0f\u5f00\u59cb\u3002BellmanFord \u53ef\u4ee5\u7528\u8d1f\u73af\u5361\u6389\uff0c\u6216\u8005\u662f\u7528\u81ea\u73af\u548c\u91cd\u8fb9\u7b49\u3002\n\n- \u7ed9 Floyd \u8fc7(Task 2)\n\n\t\u5373\u4e3a $n\\le100$\u3002\u5361\u6389 BellmanFord \u6211\u9020\u4e86\u51e0\u7ec4\u81ea\u73af\u548c\u91cd\u8fb9\uff0c\u4e00\u6761\u4ece $99$ \u5230 $1$ \u7684\u5927\u957f\u94fe\uff0c\u7136\u540e\u8c03\u4e86\u534a\u5929\uff0c\u7ec8\u4e8e\u628a\u8fd9\u4e2a\u70b9\u5361\u4e86\u3002\n    \n    ```cpp\n\tcout << \"100\" << endl;\n\tint tot=1100;\n\tfor (int i=0;i<100;i++) \n\t{\n\t\tif (i!=0);\n\t\telse \n\t\t{\n\t\t\tcout << \"1 0 13\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tint u=min(tot,30)/2;\n\t\tcout << u+5 << \" \";\n\t\tfor (int j=1;j<=u;j++) cout << i << \" \" << rand()<<\" \";\n\t\tif (tot>30) tot-=30;\n\t\telse tot=0;\n\t\tcout << i-1 << \" \" <<rand()-rand()<<\" \";\n\t\tcout << i-1 << \" \" <<rand()-rand()<<\" \";\n\t\tcout << i-1 << \" \" <<rand()-rand()<<\" \";\n\t\tcout << i-1 << \" \" <<rand()-rand()<<\" \";\n\t\tcout << i-1 << \" \" <<rand()-rand()<<\" \";\n\t\tcout << endl;\n\t}\n\tcout << \"10\" << endl;\n\tfor (int i=1;i<=10;i++) cout << \"99 0\\n\";\n\t```\n- \u7ed9 Dijkstra \u8fc7(Task 5)\n\n\t\u8003\u8651\u8d1f\u73af\u3002\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u8d77\u70b9\u5f00\u59cb\u65e0\u8d1f\u73af\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u8d77\u70b9\u7ec8\u70b9\u4ece\u7528\u5076\u6570\u70b9\u8fde\uff0c\u5947\u6570\u70b9\u505a\u8d1f\u6570\u81ea\u73af\u3002\u7a0d\u5fae\u5361\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n    \n    ```cpp\n\tcout << \"300\" << endl;\n\tfor (int i=0;i<300;i++) \n\t{\n\t\tif (i%2==0)\n\t\t{\n\t\t\tif (i==298) \n\t\t\t{\n\t\t\t\tcout << \"0\" << endl;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcout << \"1 \" << i+2 << \" 1 \" << endl; \n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (i>80) cout << \"1 \" << i << \" -1 \" << endl; \n\t\t\telse cout << \"2 \" << i << \" -1 \" << i << \" -1 \"<< endl; \n\t\t}\n\t}\n\tcout << \"10\" << endl;\n\tfor (int i=1;i<=10;i++) cout << \"0 298\\n\";\n\t```\n\n### \u4e09\u3001\u5361\u6389 Dijkstra (Task4,6)\n\n\u8fd9\u91cc\u662f\u6700\u96be\u7684\u3002\u6211\u4eec\u77e5\u9053 Dijkstra \u5728\u8d1f\u6743\u56fe\u4e0a\u53ef\u80fd\u88ab\u5361\u6389\u3002\u90a3\u4e48\u600e\u4e48\u5361\u5462\uff1f~~\u6211\u53bb\u770b\u4e86\u9898\u89e3~~\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u6784\u9020\u65b9\u6cd5\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/4tdz62ol.png)\n\n\u6bcf\u4e2a\u4e09\u89d2\u5f62\u662f\u524d\u4e00\u4e2a\u4e09\u89d2\u5f62\u8fb9\u6743 $2$ \u500d\u3002\u6784\u9020\u82e5\u5e72\u4e2a\u8fd9\u6837\u7684\u4e09\u89d2\u5f62\u7ed3\u6784\uff0c\u8fd9\u6837\u50bb\u50bb\u7684 dij \u4f1a\u5df2\u77e5\u6cbf\u7740 $0$ \u7684\u8fb9\u8d70\u5230 $0$\uff0c\u7136\u540e\u5f80\u56de\u8d70\uff0c\u8fd9\u6837\u5c31\u662f\u6307\u6570\u7ea7\u7684\u3002\n\n\u7136\u540e\u7ed9\u51fa Task 4 \u7684\u4ee3\u7801\uff0cTask 6 \u51e0\u4e4e\u4e00\u6837\uff0c\u51cf\u5c11\u4e00\u4e0b\u8be2\u95ee\u6570\u5373\u53ef\u3002\n\n```cpp\ncout << \"33\" << endl;\nint tot=1;\nfor (int i=0;i<33;i++) \n{\n\tif (i==0) \n\t{\n\t\tcout << \"0\\n\";\n\t\tcontinue;\n\t}\n\tif (i%2==0)\n\t{\n\t\tprintf(\"2 %d %d %d %d\\n\",i-2,0,i-1,2*tot);\n\t}\n\telse printf(\"1 %d %d\\n\",i-1,-4*tot);\n\tif (i%2==0)\n\t{\n\t\ttot*=2;\n\t}\n}\ncout << \"10\" << endl;\nfor (int i=1;i<=10;i++) cout << \"32 0\\n\";\n```\n\n\u6700\u77ed\u8def\u90e8\u5206\u5230\u6b64\u7ed3\u675f\u3002\n\n------------\n## \u67d3\u8272\u95ee\u9898\u90e8\u5206\n\n\u5148\u89c2\u5bdf\u4e09\u4e2a\u4ee3\u7801\u3002\n\n- RecursiveBacktracking \u7206\u641c\u3002\n\n- Gamble1 \u6c38\u8fdc\u4e0d\u4f1a TLE\u3002\n\n- Gamble2 \u6c38\u8fdc\u90fd\u4f1a TLE\u3002\n\n\u6240\u4ee5\u4e24\u4e2a\u95ee\u9898\u5c31\u662f\u8981\u4f60\u5361\u6389\u7206\u641c\u548c\u7ed9\u7206\u641c\u8fc7\u3002\u8fd9\u90e8\u5206\u4e0d\u96be\u3002\n\n\u7ed3\u5408 $T$\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fb9\u6570\u662f\u56fa\u5b9a\u4e3a $1501$ \u7684\u3002\n\n### \u4e00\u3001\u5361\u6389 RecursiveBacktracking (Task7)\n\n\u4f17\u6240\u5468\u77e5\uff0c\u7206\u641c\u968f\u4fbf\u5361\u3002\u7136\u540e\u641e\u4e2a\u968f\u673a\u56fe\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u4e2a\u4ee3\u7801\u597d\u50cf\u4e0d\u7528\u7ed9\u5427\u3002\n\n### \u4e8c\u3001\u7ed9 RecursiveBacktracking \u8fc7 (Task8)\n\n\u56e0\u4e3a\u8fb9\u6570\u56fa\u5b9a\uff0c\u70b9\u6570\u53c8\u4e0d\u80fd\u5c0f\uff0c\u8003\u8651\u7b54\u6848 $X=2$\u3002\u7136\u540e\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u76f4\u63a5\u6784\u9020\u4e00\u4e2a\u4e8c\u5206\u56fe\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\u8fd9\u4e2a\u4ee3\u7801\u597d\u50cf\u4e5f\u4e0d\u7528\u7ed9\u5427\u3002\n\n\n\n------------\n\n\u672c\u9898\u7efc\u5408\u8003\u5bdf\u4e86\u5bf9\u4e09\u4e2a\u6700\u77ed\u8def\u7684\u7406\u89e3\u548c\u638c\u63e1\u548c\u56fe\u8bba\u77e5\u8bc6\uff0c\u662f\u4e2a\u4e0d\u9519\u53c8\u5947\u602a\u7684\u9898\u3002\n\n\u6211\u7684\u505a\u9898\u8bb0\u5f55\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/cwyr0ug0.png)",
        "postTime": 1604144184,
        "uid": 151475,
        "name": "Little09",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3640 \u3010[APIO2013]\u51fa\u9898\u4eba\u3011"
    },
    {
        "content": "### \u524d\u7f6e\u5de5\u4f5c\n\n\u9996\u5148\uff0c\u795e\u79d8\u95ee\u9898\u6307\u7684\u662f\u67d3\u8272\u95ee\u9898\u3002\n\n\u89c2\u5bdf\u4ee3\u7801\uff0cFloyd Warshall \u662f\u4e25\u683c $\\mathcal{O}(V^3)$ \u7684 Floyd\uff0cOptimized Bellman Ford \u662f\u4e0a\u754c $\\mathcal{O}(QVM)$ \u7684\u5947\u602a\u7684 Bellman Ford\uff0cModified Dijkstra \u5c31\u662f\u5806\u4f18\u5316\u7684 Dijkstra\u3002\n\nGamble1 \u4e00\u5b9a\u4e0d\u4f1a TLE\uff0cGamble 2 \u4e00\u5b9a\u4f1a TLE\uff0cRecursive Bactracking \u662f\u4e2a\u7206\u641c\u3002\n\n### Point 1\n\nFloyd \u6700\u591a\u80fd\u8dd1 $\\sqrt[3]{1000000} = 100$ \u4e2a\u70b9\u7684\u6570\u636e\u3002\u4e8e\u662f\u6784\u9020 $101$ \u4e2a\u70b9\u3001\u6ca1\u6709\u8fb9\u7684\u56fe\uff0c\u518d\u968f\u4fbf\u641e\u4e00\u4e2a\u8be2\u95ee\uff0c\u603b\u5171\u662f$1+101+1+2=105$ \u4e2a\u6570\u3002\n\n### Point 2\n\n\u597d\u50cf\u4e0d\u592a\u597d\u641e\u3002\n\n\u56e0\u4e3a\u8981\u653e Floyd \u8fc7\u53bb\uff0c\u6240\u4ee5\u641e $100$ \u4e2a\u70b9\u3002\n\n\u8003\u8651\u7528\u8d1f\u6743\u8fb9\u5361 Optimized Bellman Ford\u3002\u6bcf\u4e2a\u70b9\u5411\u5916\u968f\u673a\u8fde\u4e00\u4e9b\u8d1f\u6743\u8fb9\u5c31\u884c\u4e86\uff0c\u597d\u50cf\u600e\u4e48\u6837\u641e\u90fd\u80fd\u8fc7\u3002\n\n### Point 3\n\n\u628a Point 1 \u590d\u5236\u8fc7\u6765\u5c31\u884c\u4e86\u3002\n\n### Point 4\n\nModified Dijkstra \u5728\u8d1f\u6743\u56fe\u4e0a\u5b8c\u5168\u53ef\u4ee5\u5361\u6210\u6307\u6570\u7ea7\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u6837\u7684\u56fe\u5f62\u5361\u5b83\uff1a\n\n![](http://m-sea-blog.com/usr/uploads/2019/01/1778230758.png)\n\n\u8fd9\u6837\u5b50 Modified Dijkstra \u4f1a\u88ab\u9a97\u5230 $2$ \u6765\uff0c\u7136\u540e\u5f80\u4e0b\u8d70\u4e86\u4e00\u4f1a\u4e4b\u540e\u53d1\u73b0\u8d70 $1\\to 2$ \u66f4\u4f18\uff0c\u4e8e\u662f\u5b83\u5c31\u88ab\u5361\u4e86\u3002\n\n\u591a\u641e\u51e0\u4e2a\u8fd9\u6837\u7684\u56fe\u5f62\u5957\u8d77\u6765\u5c31\u597d\u4e86\u3002\n\n### Point 5\n\n\u56e0\u4e3a\u6709 Modified Dijkstra \u7684\u5b58\u5728\uff0c\u6211\u4eec\u4e0d\u80fd\u50cf Point 2 \u90a3\u6837\u4e71\u9020\u8d1f\u6743\u8fb9\u4e86\u3002\n\n\u4e0d\u59a8\u8ba9\u6bcf\u4e00\u4e2a\u8be2\u95ee\u90fd\u4ece $0$ \u5230 $1$\u3002\u4e8e\u662f\u53ef\u4ee5\u4ece $0$ \u5230 $1$ \u8fde\u4e00\u6761\u8fb9\u6743\u4efb\u610f\u7684\u8fb9\uff0c\u5269\u4e0b\u7684 $298$ \u4e2a\u70b9\u6bcf\u4e2a\u70b9\u8fde\u51fa\u4e00\u4e2a\u8d1f\u6743\u81ea\u73af\uff0c\u7136\u540e\u518d\u8ba9\u51e0\u4e2a\u70b9\u641e\u4e00\u5806\u91cd\u8fb9\u5c31\u80fd\u5361\u6389 Optimized Bellman Ford \u4e86\u3002\n\n### Point 6\n\n\u60f3\u6cd5\u548c Point 4 \u662f\u4e00\u6837\u7684\uff0c\u7136\u800c $T$ \u6bd4 Point 4 \u5c0f\u4e86 $14$\uff0c\u9700\u8981\u9002\u5f53\u7684\u8c03\u4e0b\u53c2\u3002\n\n### Point 7\n\n\u53bb\u6389 $n$ \u548c $m$ \u540e\uff0c\u8fd8\u5269\u4e0b$3002$\u4e2a\u6570\uff0c\u5bf9\u5e94$1501$\u6761\u8fb9\u3002\n\n\u4f17\u6240\u5468\u77e5\uff0c\u7206\u641c\u968f\u4fbf\u600e\u4e48\u5361\uff0c\u6240\u4ee5\u968f\u673a\u751f\u6210\u4e00\u4e2a$1501$\u6761\u8fb9\u7684\u56fe\u5c31\u80fd\u8fc7\u4e86\u3002\n\n### Point 8\n\n\u6211\u4eec\u8981\u628a\u7206\u641c\u653e\u8fc7\u53bb\u3002\n\n\u8003\u8651\u9020\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u7136\u540e\u53ea\u5728\u5f02\u8272\u70b9\u95f4\u8fde\u8fb9\uff0c\u8fd9\u6837\u5b50\u5c31\u8dd1\u5f97\u98de\u5feb\u4e86\u3002\n\n[\u4ee3\u7801](https://m-sea-blog.com/archives/lg3640)",
        "postTime": 1548487650,
        "uid": 38370,
        "name": "M_sea",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3640 \u3010[APIO2013]\u51fa\u9898\u4eba\u3011"
    },
    {
        "content": "\u9898\u7b54\u9898\u597d\u73a9\u3002![qq_emoji: cy](https://xn--9zr.tk/cy)\n\n\u9898\u610f\uff1a\u7ed9\u4e00\u4e9b\u56fe\u8bba\u7b97\u6cd5\u6784\u9020\u6570\u636e\uff0c\u6bcf\u6b21\u653e\u8fc7\u4e00\u4e2a\u5361\u6389\u4e00\u4e2a\uff0c\u5b9a\u4e49\u201c\u5361\u6389\u201d\u7684\u6807\u51c6\u662f\u4ee3\u7801\u4e2d\u7684\u8ba1\u6570\u5668\u81ea\u52a0\u8d85\u8fc7 $10^6$ \u6b21\u3002\u53ea\u6709\u4f60\u6784\u9020\u7684\u6570\u636e\u4e2d**\u6574\u6570**\u7684\u4e2a\u6570\u5c0f\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u503c $T$ \u65f6\u624d\u80fd\u83b7\u5f97\u6ee1\u5206\u3002\n\n---\n\n## subtask 1(3pts)\n\n\u653e\u8fc7 Dijkstra \u5361\u6389 Floyd\uff0c$T=107$\u3002\n\n\u9001\u6e29\u6696\u7684\u3002\n\n\u89c2\u5bdf\u4e24\u4e2a\u4ee3\u7801\uff0c\u90fd\u662f\u6b63\u5e38\u7684\u5199\u6cd5\u3002\u4f46\u6211\u4eec\u6ce8\u610f\u5230 Floyd \u4e2d\u8ba1\u6570\u5668\u653e\u5728\u4e09\u5c42\u5faa\u73af\u4e2d\uff0c\u4e5f\u5c31\u662f\u5176\u503c\u5c31\u662f\u70b9\u6570\u7684\u7acb\u65b9\uff0c\u90a3\u4e48 Floyd \u6700\u591a\u53ea\u80fd\u8dd1 $\\sqrt[3]{10^6}=100$ \u7684\u70b9\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u8981\u9020\u4e00\u4e2a $101$ \u4e2a\u70b9\u7684\u56fe\u5c31\u597d\u4e86\uff0c\u4e3a\u4e86\u6ee1\u8db3 $T=107$ \u7684\u9650\u5236\uff0c\u56fe\u91cc\u4e00\u6761\u8fb9\u4e5f\u6ca1\u6709\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,q;\nint main()\n{\n    freopen(\"1.txt\",\"w\",stdout);\n    n=101;\n    cout<<n<<endl;\n    for(int i=0;i<n;++i)\n        cout<<0<<endl;\n    q=1;\n    cout<<q<<endl;\n    cout<<\"0 0\"<<endl;\n    return 0;\n}\n```\n\n\u6570\u636e\u4e2d\u4e00\u5171\u6709 $105$ \u4e2a\u6574\u6570\u3002\n\n---\n\n## subtask 2(7pts)\n\n\u653e\u8fc7 Floyd \u5361\u6389 Bellman-Ford\uff0c$T=2222$\u3002\n\n\u6839\u636e sub1 \u5f97\u51fa\u7684\u7ed3\u8bba\uff0c\u6211\u4eec\u7684\u70b9\u6570\u4e0d\u80fd\u591a\u4e8e $100$\u3002\u89c2\u5bdf Bellman-Ford \u7684\u5b9e\u73b0\uff0c\u53d1\u73b0\u8ba1\u6570\u5668\u6bcf\u8dd1\u4e00\u8f6e\u5c31\u4f1a\u589e\u52a0 $\\sum n_i$\uff0c\u7531\u4e8e\u4ee3\u7801\u5728\u4e00\u8f6e\u4e0b\u6765\u6ca1\u6709\u677e\u5f1b\u6210\u529f\u7684\u60c5\u51b5\u4e0b\u5c31\u4f1a\u63a8\u51fa\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8ba9\u5b83\u8dd1\u6ee1 $V-1$ \u8f6e\u3002\n\n\u8003\u8651 Bellman-Ford \u5176\u5b9e\u662f\u4e00\u4e2a\u987a\u63a8\u7684\u8fc7\u7a0b\uff0c\u6bd4\u5982\u5982\u679c\u56fe\u662f\u4e00\u6761 $0\\rightarrow V-1$ \u7684\u6709\u5411\u94fe\uff0c\u5176\u5b9e\u4e00\u8f6e\u5c31\u5df2\u7ecf\u5b8c\u6210\u4e86\u677e\u5f1b\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53cd\u8fc7\u6765\uff0c\u628a\u56fe\u5efa\u6210\u4e00\u6761 $V-1\\rightarrow0$ \u7684\u6709\u5411\u94fe\uff0c\u8fd9\u6837\u6bcf\u6b21\u677e\u5f1b\u4f1a\u6070\u597d\u6210\u529f\u4e00\u6b21\uff0c\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u5019\u8d77\u70b9\u8bbe\u6210 $V-1$ \u5c31\u53ef\u4ee5\u5361\u6ee1\u3002\n\n\u8be2\u95ee\u5c3d\u91cf\u591a\uff0c$Q=10$\uff0c\u8fd9\u6837\u4f1a\u8fdb\u884c $Q(V-1)\\sum n_i=98010$ \u6b21\u8fd0\u7b97\uff0c\u8fdc\u8fdc\u4e0d\u5230 $10^6$\u3002\n\n\u5176\u5b9e\u8fd9\u6837\u6784\u9020\u6570\u636e\u4e2d\u7684\u6574\u6570\u53ea\u6709 $320$ \u4e2a\uff0c\u6d6a\u8d39\u4e86\u5f88\u591a\u8d44\u6e90\u3002\u6ce8\u610f\u5230\u5176\u5b9e\u9898\u76ee\u6ca1\u6709\u8981\u6c42\u662f\u7b80\u5355\u56fe\uff0c\u6211\u4eec\u5927\u53ef\u4ee5\u628a\u591a\u51fa\u6765\u7684\u6574\u6570\u53d8\u6210\u91cd\u8fb9\u585e\u8fdb\u53bb\u3002\n\n\u7b97\u4e00\u4e0b $\\frac{2222-22-100}{100\\times 2}=10.5$\uff0c\u6bcf\u6761\u8fb9\u90fd\u53ef\u4ee5\u53d8\u6210\u5341\u6761\u91cd\u8fb9\u3002\u8fd9\u6837 $Q(V-1)\\sum n_i=980100$\uff0c\u8fd8\u5dee\u4e00\u70b9\u3002\n\n\u5176\u5b9e\u8fd8\u662f\u6709\u70b9\u6d6a\u8d39\uff0c\u6211\u4eec\u8003\u8651\u5229\u7528\u521a\u624d\u6254\u6389\u7684 $0.5$ \u6761\u8fb9\u3002\u5176\u5b9e\u6211\u4eec\u53ea\u8981\u6bcf\u4e24\u4e2a\u70b9\u8fde\u51fa\u53bb $21$ \u6761\u8fb9\u5c31\u662f\u5408\u6cd5\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u5206\u5947\u5076\u8fde $10$ \u548c $11$ \u6761\u91cd\u8fb9\uff0c\u8fd9\u6837 $Q(V-1)\\sum n_i=1039500$\uff0c\u521a\u521a\u597d\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,q;\nint main()\n{\n    freopen(\"2.txt\",\"w\",stdout);\n    n=100;\n    cout<<n<<endl<<11<<endl;\n    for(int i=1;i<=11;++i)\n        cout<<n-1<<\" 1 \";\n    cout<<endl;\n    for(int i=1;i<n;++i)\n    {\n        if(i&1)\n        {\n            cout<<\"10 \";\n            for(int j=1;j<=10;++j)\n                cout<<i-1<<\" 1 \";\n        }\n        else\n        {\n            cout<<\"11 \";\n            for(int j=1;j<=11;++j)\n                cout<<i-1<<\" 1 \";\n        }\n        cout<<endl;\n    }\n    q=10;\n    cout<<q<<endl;\n    while(q--)\n        cout<<n-1<<\" 0\"<<endl;\n    return 0;\n}\n```\n\n\u6570\u636e\u4e2d\u4e00\u5171\u6709 $2222$ \u4e2a\u6574\u6570\u3002\n\n---\n\n## subtask 3(8pts)\n\n\u653e\u8fc7 Bellman-Ford \u5361\u6389 Floyd\uff0c$T=105$\u3002\n\n\u4f60\u600e\u4e48\u53c8\u5728\u9001\u554a\u3002\n\n\u548c sub1 \u4e00\u6a21\u4e00\u6837\u5373\u53ef\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,q;\nint main()\n{\n    freopen(\"3.txt\",\"w\",stdout);\n    n=101;\n    cout<<n<<endl;\n    for(int i=0;i<n;++i)\n        cout<<0<<endl;\n    q=1;\n    cout<<q<<endl<<\"0 0\"<<endl;\n    return 0;\n}\n```\n\n\u6570\u636e\u4e2d\u4e00\u5171\u6709 $105$ \u4e2a\u6574\u6570\u3002\n\n---\n\n## subtask 4(17pts)\n\n\u653e\u8fc7 Floyd \u5361\u6389 Dijkstra\uff0c$T=157$\u3002\n\n\u8fd9\u4e2a\u6709\u70b9\u96be\u5ea6\u3002\n\n\u968f\u4e86\u5f88\u591a\u7ec4\u6570\u636e\uff0c\u53d1\u73b0\u8fd9\u4e2a Dijkstra \u8868\u73b0\u51fa\u8272\u4e14\u7a33\u5b9a\uff0c\u6570\u636e\u89c4\u6a21\u8fd8\u9650\u5236\u5f97\u8fd9\u4e48\u5c0f\uff0c\u771f\u7684\u80fd\u5361\u6389\u5417\uff1f\n\n\u53d1\u73b0\u9898\u76ee\u4e2d\u9650\u5236\u7684\u662f\u8fb9\u6743\u7684\u7edd\u5bf9\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u6709\u8d1f\u6743\u8fb9\uff0c\u4f17\u6240\u5468\u77e5 Dijkstra \u5728\u6709\u8d1f\u6743\u8fb9\u7684\u65f6\u5019\u662f\u53ef\u4ee5\u5361\u6210\u6307\u6570\u7ea7\u522b\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4e2a\u4e0a\u9762\u505a\u6587\u7ae0\u3002\n\n\u6784\u9020\u8fd9\u79cd\u6570\u636e\u7684\u6838\u5fc3\u5728\u4e8e\u9020\u4e00\u4e2a\u957f\u94fe\u51fa\u6765\uff0c\u5148\u7528\u5c0f\u7684\u6b63\u8fb9\u6743\u628a Dijkstra \u9a97\u5230\u94fe\u5c3e\uff0c\u7136\u540e\u5916\u6302\u5f88\u591a\u70b9\uff0c\u70b9\u7684\u5165\u8fb9\u662f\u4e00\u4e2a\u5927\u7684\u6b63\u6743\u8fb9\uff0c\u51fa\u8fb9\u662f\u4e00\u4e2a\u7edd\u5bf9\u503c\u6bd4\u5165\u8fb9\u5927\u7684\u8d1f\u6743\u8fb9\uff0c\u8fd9\u6837\u6700\u77ed\u8def\u5b9e\u9645\u4e0a\u662f\u8d70\u5916\u6302\u70b9\u7684\u90a3\u6761\uff0c\u4f46\u662f Dijkstra \u5df2\u7ecf\u88ab\u94fe\u9a97\u8fc7\u53bb\u66f4\u65b0\u4e86\u4e00\u904d\u6574\u4e2a\u56fe\u4e86\uff0c\u6240\u4ee5\u5b83\u4f1a\u91cd\u65b0\u677e\u5f1b\uff0c\u591a\u91cd\u590d\u51e0\u6b21\u5c31\u53d8\u6210\u6307\u6570\u7ea7\u4e86\uff0c\u8fd9\u6837\u7b97\u4e00\u4e0b\u5176\u5b9e $T=157$ \u8fd8\u5f88\u677e\uff0c\u8fd9\u91cc\u6784\u9020\u7684\u6570\u636e $V=33,Q=10$\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,q;\nint main()\n{\n    freopen(\"4.txt\",\"w\",stdout);\n    n=33;\n    cout<<n<<endl;\n    for(int i=2;i<n;i+=2)\n    {\n        cout<<\"2 \"<<i-1<<\" \"<<(1<<(17-i/2-1))<<\" \"<<i<<\" 0\"<<endl;\n        cout<<\"1 \"<<i<<\" \"<<-(1<<(17-i/2))<<\" \"<<endl;\n    }\n    cout<<0<<endl;\n    q=10;\n    cout<<q<<endl;\n    while(q--)\n        cout<<0<<\" \"<<n-1<<endl;\n    return 0;\n}\n```\n\n\u6570\u636e\u4e2d\u4e00\u5171\u6709 $151$ \u4e2a\u6574\u6570\u3002\n\n\n---\n\n## subtask 5(10pts)\n\n\u653e\u8fc7 Dijkstra \u5361\u6389 Bellman-Ford\uff0c$T=1016$\u3002\n\n\u7528 sub2 \u7684\u65b9\u6cd5\u6784\u9020\u5373\u53ef\u3002$T$ \u9650\u5236\u53d8\u7d27\u7684\u540c\u65f6\u6211\u4eec\u6ca1\u6709\u4e86 $V\\leq 100$ \u7684\u9650\u5236\uff0c\u4e8e\u662f\u76f4\u63a5\u628a\u70b9\u6570\u5f00\u5230\u6700\u5927\uff0c\u5269\u4f59\u7684\u6574\u6570\u5c3d\u91cf\u9020\u91cd\u8fb9\u5373\u53ef\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,q;\nint main()\n{\n    freopen(\"5.txt\",\"w\",stdout);\n    n=300;\n    cout<<n<<endl<<0<<endl;\n    for(int i=1;i<n;++i)\n        if(i<=47)\n            cout<<\"2 \"<<i-1<<\" 1 \"<<i-1<<\" 1\"<<endl;\n        else\n            cout<<\"1 \"<<i-1<<\" 1\"<<endl;\n    q=10;\n    cout<<q<<endl;\n    while(q--)\n        cout<<n-1<<\" 0\"<<endl;\n    return 0;\n}\n```\n\n\u6570\u636e\u4e2d\u4e00\u5171\u6709 $1014$ \u4e2a\u6574\u6570\uff08\u4f3c\u4e4e\u8fd8\u80fd\u518d\u52a0\u4e00\u6761\u91cd\u8fb9\uff0c\u4e0d\u8fc7\u5df2\u7ecf\u8db3\u591f\u5361\u6389\u4e86\uff09\u3002\n\n---\n\n## subtask 6(19pts)\n\n\u653e\u8fc7 Bellman-Ford \u5361\u6389 Dijkstra\uff0c$T=143$\u3002\n\n\u8fd8\u662f\u8003\u8651\u521a\u624d\u7684\u505a\u6cd5\uff0c\u4f46\u662f\u6211\u4eec\u7528\u6389\u7684\u6574\u6570\u521a\u597d\u6bd4 $143$ \u591a\u4e86\u4e00\u70b9\u3002![qq_emoji: fn](https://xn--9zr.tk/fn)\n\n\u8fd0\u884c\u4e00\u4e0b Dijkstra \u8dd1\u4e00\u4e0b\u521a\u624d\u9020\u7684\u90a3\u7ec4\u6570\u636e\uff0c\u53d1\u73b0\u5176\u5b9e\u5728\u8dd1\u5230\u7b2c $6$ \u7ec4\u8be2\u95ee\u7684\u65f6\u5019\u5df2\u7ecf $TLE$ \u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u591a\u4e86\u56db\u7ec4\u6ca1\u7528\u7684\u8be2\u95ee\u3002\n\n\u5220\u4e86\u4ed6\u4eec\uff0c\u5c11\u4e86 $8$ \u4e2a\u6574\u6570\uff0c$151$ \u521a\u597d\u53d8\u6210 $143$\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,q;\nint main()\n{\n    freopen(\"6.txt\",\"w\",stdout);\n    n=33;\n    cout<<n<<endl;\n    for(int i=2;i<n;i+=2)\n    {\n        cout<<\"2 \"<<i-1<<\" \"<<(1<<(18-i/2-1))<<\" \"<<i<<\" 0\"<<endl;\n        cout<<\"1 \"<<i<<\" \"<<-(1<<(18-i/2))<<\" \"<<endl;\n    }\n    cout<<0<<endl;\n    q=6;\n    cout<<q<<endl;\n    while(q--)\n        cout<<0<<\" \"<<n-1<<endl;\n    return 0;\n}\n```\n\n\u6570\u636e\u4e2d\u4e00\u5171\u6709 $143$ \u4e2a\u6574\u6570\u3002\n\n---\n\n## subtask 7(11pts)\n\n\u56fe\u67d3\u8272\uff0c\u8981\u6c42\u76f8\u90bb\u70b9\u989c\u8272\u4e0d\u540c\uff0c\u6700\u5c0f\u5316\u989c\u8272\u6570\uff0c\u8ba9\u4f60\u653e\u8fc7\u7684\u7b97\u6cd5\u662f\u94a6\u5b9a\u80fd\u8fc7\u7684\uff0c\u5361\u6389\u66b4\u529b\uff0c$T=3004$\u3002\n\n\u522b\u9001\u4e86\uff0c\u522b\u9001\u4e86\u3002\n\n\u66b4\u529b\u7684\u5b9e\u73b0\u662f\u4ece\u5c0f\u5230\u5927\u66b4\u529b check \u7b54\u6848\uff0c\u90a3\u6211\u4eec\u8ba9\u7b54\u6848\u5f88\u5927\u5c31\u597d\u4e86\u3002\n\n\u5b8c\u5168\u56fe\uff01\u6211\u4eec\u6765\u7b97\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u5b8c\u5168\u56fe\u6700\u5927\u53ef\u4ee5\u6709 $55$ \u4e2a\u70b9\uff0c\u7136\u540e\u6211\u4eec\u53ea\u8981\u8fde\u8fb9\u5373\u53ef\uff0c\u5f97\u5230 $E=1485$\u2026\u2026\n\n\u6162\u7740\uff1f\u9898\u76ee\u91cc\u9762\u8bf4 $V>70,E>1500$\uff1f\n\n\u90a3\u6211\u4eec\u53ea\u80fd\u591a\u6765\u51e0\u4e2a\u70b9\u8865\u5230 $71$\uff0c\u7136\u540e\u5728\u4ed6\u4eec\u4e4b\u95f4\u8fde\u8fb9\u628a\u8fb9\u6570\u51d1\u5230 $1501$\u3002\n\n\u521a\u624d\u5b8c\u5168\u56fe\u52a0\u4e0a $V$ \u548c $E$ \u4e00\u5171\u7528\u6389\u4e86 $2\\times 1485+2=2972$ \u4e2a\u70b9\uff0c\u8fd8\u5269 $32$ \u4e2a\u70b9\uff0c\u53ef\u4ee5\u8fde $16$ \u6761\u8fb9\u3002\u800c\u6211\u4eec\u521a\u597d\u9700\u8981 $16$ \u6761\u8fb9\u8fbe\u5230 $1501$\uff0c\u95ee\u9898\u89e3\u51b3\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,m;\nint main()\n{\n    freopen(\"7.txt\",\"w\",stdout);\n    n=71,m=1501;\n    cout<<n<<\" \"<<m<<endl;\n    for(int i=1;i<55;++i)\n        for(int j=i+1;j<=55;++j)\n            cout<<i-1<<\" \"<<j-1<<endl;\n    for(int i=55;i<n;++i)\n        cout<<0<<\" \"<<i<<endl;\n    return 0;\n}\n```\n\n\u6570\u636e\u4e2d\u4e00\u5171\u6709 $3004$ \u4e2a\u6574\u6570\u3002\n\n---\n\n## subtask 8(25pts)\n\n\u67d3\u8272\uff0c\u653e\u8fc7\u66b4\u529b\uff0c\u8ba9\u4f60\u5361\u6389\u7684\u7b97\u6cd5\u662f\u94a6\u5b9a\u8fc7\u4e0d\u4e86\u7684\u3002\n\n\u9053\u7406\u6211\u90fd\u61c2\uff0c\u8fd9\u4e00\u4e0b\u5b50\u9001 $25$ \u5206\u662f\uff1f\n\n\u600e\u4e48\u653e\u8fc7\u8fd9\u4e2a\u66b4\u529b\uff1f\u628a\u989c\u8272\u6570\u9020\u5f97\u975e\u5e38\u5c0f\u5373\u53ef\u3002\u90a3\u6211\u4eec\u70b9\u6570\u5f00\u5230\u6700\u5927 $V=999$\uff0c\u7136\u540e\u5148\u6765\u8fde\u6210\u4e00\u4e2a\u73af\uff0c\u7136\u540e\u5176\u5b9e\u5c31\u662f\u4eba\u7c7b\u667a\u6167\uff0c\u53ea\u8981\u628a\u8fb9\u51d1\u591f\uff0c\u6ca1\u6709\u5ea6\u6570\u7279\u522b\u5927\u7684\u70b9\u5c31\u597d\u4e86\u3002\u6211\u7684\u505a\u6cd5\u662f\u518d\u6765\u4e00\u8f6e\uff0c\u6bcf\u6b21 $i-1$ \u548c $2i-1$ \u8fde\u8fb9\uff0c\u8fd9\u6837\u6700\u540e\u8fd8\u9700\u8981\u8fde $5$ \u6761\u624d\u80fd\u5230 $1501$ \u76f4\u63a5\u9996\u5c3e\u76f8\u8fde\u5373\u53ef\u3002\u8fd9\u6837\u7b97\u4e00\u4e0b\u4e00\u5171 $2\\times 1501+2=3004$\uff0c\u521a\u521a\u597d\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,m;\nint main()\n{\n    freopen(\"8.txt\",\"w\",stdout);\n    n=999,m=1501;\n    cout<<n<<\" \"<<m<<endl;\n    for(int i=1;i<n;++i)\n        cout<<i-1<<\" \"<<i<<endl;\n    for(int i=2;i<<1<=n;++i)\n        cout<<i-1<<\" \"<<(i<<1)-1<<endl;\n    for(int i=0;i<5;++i)\n        cout<<i<<\" \"<<n-1-i<<endl;\n    return 0;\n}\n```\n\n\u6570\u636e\u4e2d\u4e00\u5171\u6709 $3004$ \u4e2a\u6574\u6570\u3002\n\n---\n\n\u81f3\u6b64\u6574\u4e2a\u9898\u76ee\u5b8c\u7ed3\uff0c\u8fd9\u786e\u5b9e\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u7684\u9898\u76ee\uff0c\u4e0d\u540c\u4efb\u52a1\u96be\u6613\u6709\u68af\u5ea6\uff0c\u552f\u4e00\u611f\u89c9\u4e0d\u592a\u597d\u7684\u5730\u65b9\u662f\u8ba9\u6211\u5f88\u671f\u5f85\u7684\u540e\u4e24\u4e2a subtask \u751a\u81f3\u6bd4\u524d\u9762\u8fd8\u8981\u7b80\u5355\uff0c\u5927\u5927\u4f4e\u4e8e\u6211\u7684\u9884\u671f\u3002",
        "postTime": 1643097612,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "[APIO2013]TASKSAUTHOR \u9898\u89e3"
    },
    {
        "content": "## \u524d\u8a00\n\u5199\u4e0d\u52a8\u5176\u4ed6\u9898\u4e4b\u540e\u4e0d\u5c0f\u5fc3\u770b\u5230\u4e00\u9053\u975e\u4f20\u7edf\u9898\u3002\u7136\u540e\u6253\u7b97\u505a\u4e00\u4e0b\u957f\u957f\u5e72\u52b2\u3002\u53d1\u7bc7\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b\u3002\n\n\u5176\u5b9e\u4e0d\u7b97\u5f88\u6bd2\u7624\u3002\n\n## \u9898\u76ee\u5206\u6790 & \u4ee3\u7801\n\u672c\u8d28\u4e0a\u524d\u516d\u4e2a\u70b9\u662f\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c\u540e\u4e24\u4e2a\u70b9\u662f\u67d3\u8272\u3002\n\n### 1~6\n\nFloyd \u65f6\u95f4\u590d\u6742\u5ea6\u7a33\u5b9a\u4e3a $\\operatorname{O}(V^3)$\u3002\n\n\u5806\u4f18\u5316\u7684 Dijkstra \u5728\u975e\u8d1f\u6743\u4e2d\u8868\u73b0\u7a33\u5b9a\u4e3a $\\operatorname{O}(E\\log E)$\uff0c\u4f46\u6309\u7167\u9898\u76ee\u7684\u5199\u6cd5\u53ef\u4ee5\u88ab\u8d1f\u6743\u8fb9\u5361\u6210\u6307\u6570\u7ea7\u3002\n\n\u526a\u679d\u7684 Bellman-Ford \u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u4e3a $\\operatorname{O}(VE)$\u3002\u6784\u9020\u6781\u7aef\u6570\u636e\u53ef\u4ee5\u5361\u6ee1\u3002\n\n1 \u4e0e 3 \u8981\u6c42\u5361 Floyd\uff0c\u6839\u636e\u9898\u76ee\u8981\u6c42\uff0c\u5f53 $V=101$ \u65f6\u5373\u53ef\u5361\u51fa $10^6$\u3002\u4ee4\u8fb9\u6570\u4e3a $0$\uff0c\u8be2\u95ee\u6570\u4e3a $1$\uff0c\u4e24\u7ec4\u53ef\u7528\u540c\u6837\u7684\u6570\u636e\u5361\u6389\u3002\n\n```cpp\n#include<cstdio>\nusing namespace std;\nint main()\n{\n\tfreopen(\"1.txt\",\"w\",stdout);\n\tputs(\"101\");\n\tfor(int i=1;i<=101;++i)\n\t\tputs(\"0\");\n\tputs(\"1\\n0 100\");\n   return 0;\n}\n```\n2 \u4e0e 5 \u8981\u6c42\u5361 Bellman-Ford\u3002\u6839\u636e\u4e0b\u53d1\u7684\u6587\u4ef6\u53ef\u4ee5\u53d1\u73b0\u677e\u5f1b\u987a\u5e8f\u6309\u7f16\u53f7\u5347\u5e8f\u3002\u90a3\u4e48\u6784\u9020\u7684\u6570\u636e\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u70b9\u7f16\u53f7\u964d\u5e8f\u5373\u53ef\u3002\u5bf9\u4e8e $2$\uff0c\u5c06\u70b9\u6570\u5361\u5230 $100$ \u653e\u8fc7 Floyd\uff0c\u5e76\u6784\u9020\u4e00\u6761\u7f16\u53f7\u964d\u5e8f\u7684\u94fe\uff0c\u518d\u968f\u610f\u642d\u4e0a\u975e\u8d1f\u81ea\u73af\u5e76\u5361\u6ee1\u8fb9\u6570\u548c\u8be2\u95ee\u5373\u53ef\u3002\u5bf9\u4e8e $5$\uff0c\u7531\u4e8e\u6574\u6570\u6570\u91cf\u9650\u5236\u53d8\u5c0f\uff0c\u5bf9\u6bd4 Dijkstra \u4e0e Bellman-Ford \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u77e5\u5e94\u5c3d\u91cf\u5361\u6ee1\u70b9\u6570\uff0c\u7136\u540e\u5982\u4e0a\u6784\u9020\u4e00\u6761\u94fe\u5e76\u5c06\u5269\u4e0b\u7684\u8fb9\u6784\u9020\u4e3a\u4ece\u8d77\u70b9\u65e0\u6cd5\u5230\u8fbe\u7684\u8d1f\u81ea\u73af\u4f7f\u5f97 Bellman-Ford \u65e0\u6cd5\u526a\u679d\uff0c\u540c\u65f6\u5c06\u8be2\u95ee\u5361\u6ee1\u3002\n\n```cpp\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\nint main()\n{\n\tfreopen(\"2.txt\",\"w\",stdout);\n\tputs(\"100\");\n\tfor(int i=0;i<50;++i)\n\t{\n\t\tputs(\"10 \");\n\t\tfor(int j=1;j<=10;++j) \n\t\t\tprintf(\"%d 1\\n\",max(0,i-1));\n\t}\n\tfor(int i=50;i<100;++i)\n\t{\n\t\tputs(\"11 \");\n\t\tfor(int j=1;j<=11;++j) \n\t\t\tprintf(\"%d 1\\n\",max(0,i-1));\n\t}\t\n\tputs(\"10\");\n\tfor(int i=1;i<=10;++i)\n\t\tputs(\"99 0\");\n\treturn 0;\n}\n```\n\n```cpp\n#include<cstdio>\nusing namespace std;\nint main()\n{\n\tfreopen(\"5.txt\",\"w\",stdout);\n\tputs(\"300\");\n\tprintf(\"45 \");\n\tfor(int i=1;i<=45;++i)\n\t\tprintf(\"0 -1 \");\n\tputs(\"\");\n\tputs(\"0\");\n\tfor(int i=2;i<300;++i)\n\t\tprintf(\"1 %d 1\\n\",i-1);\n\tputs(\"10\");\n\tfor(int i=1;i<=10;++i)\n\t\tprintf(\"299 1\\n\");\n\treturn 0;\n}\n```\n\n\u8fd9\u9053\u9898\u7684\u96be\u70b9\u5728 4 \u548c 6 \u7684\u5361 Dijkstra\u3002\u5728\u8fd9\u9053\u9898\u6570\u636e\u8303\u56f4\u7684\u9650\u5236\u4e0b\uff0c\u975e\u8d1f\u6743\u8fb9 Dijkstra \u65e0\u6cd5\u5361\u5230\u6bd4\u5269\u4f59\u4e24\u4e2a\u7b97\u6cd5\u66f4\u52a3\u3002\u56e0\u6b64\u53ea\u80fd\u8003\u8651\u8d1f\u6743\u3002\n\n\u6839\u636e Dijkstra \u7684\u8d2a\u5fc3\u7b56\u7565\uff0c\u5c1d\u8bd5\u5f15\u5bfc Dijkstra \u8d70\u5411\u975e\u6700\u4f18\u8def\u5f84\u3002\u8bbe $(u,v,w)$ \u8868\u793a  $u$ \u5230 $v$ \u957f\u4e3a $w$ \u7684\u8fb9\uff0c\u8003\u8651\u8fb9 $(1,3,0),(1,2,1),(2,3,-2)$\uff0c\u4ece $1$ \u5230 $3$ \u65f6\uff0c\u7531\u4e8e Dijkstra \u4f1a\u4f18\u5148\u8d70 $(1,3,0)$\uff0c$3$ \u51fa\u961f\u4e24\u6b21\u624d\u4f1a\u88ab\u66f4\u65b0\u4e3a\u6700\u77ed\u8def\u3002\u7531\u6b64\u5f97\u5230\u7684\u542f\u793a\u662f\uff0c\u5d4c\u5957\u8fd9\u6837\u7684\u7ed3\u6784\u4fbf\u80fd\u5c06\u5176\u5361\u6210\u6307\u6570\u7ea7\u3002\n\n\u5982\u4f55\u5d4c\u5957\u8fd9\u6837\u7684\u7ed3\u6784\u624d\u80fd\u8ba9\u6bcf\u4e2a $3$ \u7c7b\u70b9\u5e26\u6765\u7684\u66f4\u65b0\u6b21\u6570\u5f71\u54cd\u4e25\u683c\u7ffb\u500d\u5462\uff1f\u6839\u636e\u8981\u6c42\uff0c\u5e94\u8be5\u8ba9\u7f16\u53f7\u9760\u524d\u7684 $3$ \u7c7b\u70b9\u88ab\u66f4\u65b0\u7684\u65f6\u523b\u66f4\u9760\u540e\uff0c\u90a3\u4e48\u9700\u8981\u8ba9\u66f4\u9760\u524d\u7684 $3$ \u7c7b\u70b9\u5230 $1$ \u7684\u8ddd\u79bb\u66f4\u9760\u540e\u3002\u6309\u7f16\u53f7\u987a\u5e8f\uff0c\u5c06\u6bcf\u4e00\u6761 $(1,2,x)$ \u7684\u8fb9\u6743 $x$ \u4f9d\u6b21\u7f29\u5c0f\u81f3\u4e0a\u4e00\u6761\u7684 $\\dfrac{1}{2}$\uff0c\u540c\u65f6\u8ba9 $(2,3,y)$ \u7684\u8fb9\u6743 $y$ \u4e3a\u5bf9\u5e94 $x$ \u7684 $-2$ \u500d\uff0c\u5373\u4e3a\u4e00\u79cd\u6ee1\u8db3\u9898\u610f\u7684\u6784\u9020\u3002\n\n\u4e24\u4e2a\u70b9\u53ef\u4ee5\u7528\u540c\u6837\u7684\u65b9\u5f0f\u5361\u3002\n\n```cpp\n#include<cstdio>\nusing namespace std;\nint main()\n{\n\tfreopen(\"6.txt\",\"w\",stdout);\n\tputs(\"33\");\n\tfor(int i=0;i<32;i+=2)\n\t\tprintf(\"2 %d 0 %d %d\\n1 %d -%d\\n\",i+2,i+1,1<<((32-i)>>1),i+2,1<<(((32-i)>>1)+1));\n\tputs(\"0\");\n\tputs(\"6\");\n\tfor(int i=0;i<6;++i)\n\t\tputs(\"0 32\");\n\treturn 0;\n}\n```\n\n### 7~8\n\u7384\u4e4e\u7684\u201c\u795e\u79d8\u7b97\u6cd5\u201d\u4e8b\u5b9e\u4e0a\u53ea\u662f\u67d3\u8272\u3002\u6839\u636e\u5e38\u8bc6\uff0c\u666e\u901a\u67d3\u8272\u968f\u673a\u56fe\u5373\u53ef\u5361\u6389\uff0c\u800c\u4e8c\u5206\u56fe\u67d3\u8272\u5308\u7259\u5229\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\operatorname{O}(V^3)$\u3002\n\n\u53d1\u73b0\u6574\u6570\u9650\u5236\u548c\u6570\u636e\u8303\u56f4\u5361\u5f97\u5f88\u6b7b\u3002\u8fb9\u6570\u53ea\u80fd\u662f $1501$\u30027 \u8981\u6c42\u5361\u6389\u8be5\u7a0b\u5e8f\uff0c\u6784\u9020\u968f\u673a\u56fe\u5373\u53ef\uff1b8 \u8981\u6c42\u653e\u8fc7\u8be5\u7a0b\u5e8f\uff0c\u6784\u9020\u70b9\u6570\u4e3a $100$ \u7684\u4e8c\u5206\u56fe\u5373\u53ef\u3002\n\n\u6bd4\u6700\u77ed\u8def\u7b80\u5355\u591a\u4e86\u2026\u2026\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\nusing namespace std;\nbool appeared[1001][1001];\nint main()\n{\n\tfreopen(\"7.txt\",\"w\",stdout);\n\tsrand(unsigned(time(0)));\n\tputs(\"999 1501\");\n\tfor(int i=0;i<1501;++i)\n\t{\n\t\tint x=rand()*rand()%999,y=rand()*rand()%999;\n\t\twhile(appeared[x][y]||x==y)\n\t\t{\n\t\t\tx=rand()*rand()%999;\n\t\t\ty=rand()*rand()%999;\n\t\t}\n\t\tprintf(\"%d %d\\n\",x,y);\n\t\tappeared[x][y]=appeared[y][x]=true;\n\t}\t\n\treturn 0;\n}\n```\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\nusing namespace std;\nbool appeared[1001][1001];\nint main()\n{\n\tfreopen(\"8.txt\",\"w\",stdout);\n\tputs(\"100 1501\");\n\tfor(int i=0;i<1501;++i)\n\t{\n\t\tint x=rand()*rand()%50,y=rand()*rand()%49+50;\n\t\twhile(appeared[x][y]||x==y)\n\t\t{\n\t\t\tx=rand()*rand()%50;\n\t\t\ty=rand()*rand()%49+50;\n\t\t}\n\t\tprintf(\"%d %d\\n\",x,y);\n\t\tappeared[x][y]=appeared[y][x]=true;\n\t}\t\n\treturn 0;\n}\n```",
        "postTime": 1606446938,
        "uid": 67952,
        "name": "\u767d\u9c9f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3640 \u3010[APIO2013]\u51fa\u9898\u4eba\u3011"
    },
    {
        "content": "\u7a81\u53d1\u5947\u60f3\u505a\u4e00\u9053\u975e\u4f20\u7edf\u9898\u3002\u3002\u3002\n\n\u53ea\u8981\u53d1\u73b0\u8fd9\u4e9b\u7b97\u6cd5\u7684\u4e00\u4e9b\u6027\u8d28\u5c31\u597d\u4e86:\n\n#### SSSP:\n\nFloydWarshall:\u7a33\u5b9a$O(V^3)$\n\nModifiedDijkstra:\u6b63\u6743\u56fe\u8dd1\u5f97\u8d3c\u5feb,\u8d1f\u6743\u56fe\u53ef\u80fd\u4f1a\u88ab\u5361\u6389\n\nOptimizedBellmanFord:\u65f6\u95f4\u6309\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u66f4\u65b0\u8282\u70b9\u7684\u987a\u5e8f\n\n#### Mystery(\u67d3\u8272\u95ee\u9898):\n\nRecursiveBacktracking:\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u7b54\u6848\u7684\u5927\u5c0f\n\n## Task1\n\n\u65e2\u7136ModifiedDijkstra\u5728\u6b63\u6743\u56fe\u4e0a\u8dd1\u5f97\u98de\u5feb,\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u6b63\u6743\u56fe\u5361\u6389FloydWarshall\u5373\u53ef\u3002\n\n\u7531\u4e8eFloydWarshall\u662f\u7a33\u5b9a$V^3$\u7684,\u53ea\u8981\u51fa\u5230$V>100$\u5c31\u884c\u4e86,\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6570\u91cf\u53ef\u4ee5\u4e3a0\u3002\n\n(\u5141\u8bb8\u7684\u8bdd\u751a\u81f3\u53ef\u4ee5\u6ca1\u6709\u8be2\u95ee,\u4f46\u662f\u672c\u9898\u8981\u6c42$Q>0$)\n\ncode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n=101;\nint main(){\n\tfreopen(\"1.txt\",\"w\",stdout),printf(\"%d\\n\",n);\n\tfor(int i=1;i<=n;++i)puts(\"0\");\n\tputs(\"1\\n1 1\");\n\treturn 0;\n}\n```\n\n## Task2\n\n\u7531\u4e8eFloydWarshall\u7a33\u5b9a$V^3$,\u6211\u4eec\u8003\u8651\u8ba9$V=100$,\u8fd9\u6837FloydWarshall\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u88ab\u5361\u6389,\u53c8\u7ed9\u6211\u4eec\u5361OptimizedBellmanFord\u63d0\u4f9b\u4e86\u6700\u65b9\u4fbf\u7684\u6761\u4ef6\u3002\n\n\u53d1\u73b0OptimizedBellmanFord\u662f$O(V^2E)$\u7684,\u4f46\u662f\u7531\u4e8e\u526a\u679d\u7684\u5b58\u5728,\u53ef\u80fd\u8dd1\u4e0d\u6ee1\u3002\n\n\u5982\u4f55\u8ba9\u5b83\u8dd1\u6ee1\u5462?\n\n\u53d1\u73b0\u5b83\u66f4\u65b0\u8282\u70b9\u7684\u987a\u5e8f\u662f\u4ece0\u5230$V-1$,\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5efa\u4e00\u6761\u94fe,$V-1$\u4e3a\u8d77\u70b9,0\u4e3a\u7ec8\u70b9\u5c31\u597d\u4e86\u3002\n\n\u4f46\u662f\u8fd8\u4e0d\u591f,\u7531\u4e8e\u70b9\u6570\u6709\u9650,\u5bfc\u81f4\u94fe\u7684\u957f\u5ea6\u6709\u9650,\u800c\u4e14\u7ed9\u5b9a\u7684$T$\u8fdc\u8fdc\u6ca1\u7528\u5b8c\u3002\n\n\u90a3\u4e48\u628a\u5269\u4e0b\u7684$T$\u5efa\u6210\u91cd\u8fb9\u5c31\u597d\u4e86\u3002\n\ncode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n=100,T=2222,Q=10,Num,RE,RN;\nvoid print(int x){\n\tif(x!=n-1){\n\t\tprintf(\"%d \",Num);\n\t\tfor(int i=1;i<=Num;++i)printf(\"%d 1 \",x?x-1:n-1);//0\u4e0en-1\u4e4b\u95f4\u7684\u8fb9\u5e76\u4e0d\u4f1a\u5f71\u54cd\u590d\u6742\u5ea6\n\t\tputs(\"\");\n\t}else{\n\t\tprintf(\"%d \",Num+RE);\n\t\tfor(int i=1;i<=Num+RE;++i)printf(\"%d 1 \",x?x-1:n-1);\n\t\tputs(\"\");\n\t}\n}\nint main(){\n\tfreopen(\"2.txt\",\"w\",stdout);\n\tprintf(\"%d\\n\",n),T-=1+n+1+(Q<<1),Num=(T>>1)/n,RE=(T>>1)-Num*n;\n\tfor(int i=0;i<n;++i)print(i);\n\tprintf(\"%d\\n\",Q);\n\twhile(Q--)printf(\"%d 0\\n\",n-1);\n\treturn 0;\n}\n```\n\n## Task3\n\n\u7531\u4e8eFloydWarshall\u7a33\u5b9a$V^3$,\u76f4\u63a5\u4ee4$V>100$\u5c31\u53ef\u4ee5\u76f4\u63a5\u5361\u6389,\u653eOptimizedBellmanFord\u8fc7\u4e5f\u5f88\u7b80\u5355,\u4e0d\u8fde\u8fb9\u5c31\u597d\u4e86\u3002\n\ncode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n=101;\nint main(){\n\tfreopen(\"3.txt\",\"w\",stdout);\n\tprintf(\"%d\\n\",n);\n\tfor(int i=1;i<=n;++i)puts(\"0\");\n\tputs(\"1\\n0 1\");\n\treturn 0;\n}\n```\n\n## Task4\n\n\u6211\u4eec\u8bf4\u8fc7ModifiedDijkstra\u5728\u8d1f\u6743\u56fe\u4e0a\u53ef\u80fd\u88ab\u5361\u6389\u3002\n\n\u90a3\u4e48\u600e\u4e48\u5efa\u8d1f\u6743\u56fe\u5462?\n\n\u5efa\u7acb\u5982\u4e0b\u56fe\u7684\u7ed3\u6784\u5c31\u597d\u4e86\u3002\n\n![Task4](https://i.ibb.co/hcnVfNq/Task4.png)\n\n\u8fd9\u6837\u7684\u8bdd\u6bcf\u6b21ModifiedDijkstra\u4f1a\u5148\u6cbf\u8fb9\u6743\u4e3a0\u7684\u8fb9\u66f4\u65b0\u5076\u6570\u7f16\u53f7\u7684\u8282\u70b9,\u7136\u540e**\u4ece\u5c0f\u5230\u5927**\u66f4\u65b0\u5947\u6570\u7f16\u53f7\u7684\u8282\u70b9,\u7136\u540e\u4ece\u5947\u6570\u7f16\u53f7\u7684\u8282\u70b9\u66f4\u65b0\u5076\u6570\u7f16\u53f7\u7684\u8282\u70b9,\u53c8\u91cd\u65b0\u5f00\u59cb\u66f4\u65b0\u5076\u6570\u7f16\u53f7\u7684\u8282\u70b9,\u66f4\u65b0\u7ed3\u675f\u4ee5\u540e\u624d\u53c8\u5f00\u59cb\u66f4\u65b0\u4e0b\u4e00\u4e2a\u5947\u6570\u7f16\u53f7\u7684\u8282\u70b9,\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u4e3a\u6307\u6570\u7ea7\u522b\u3002\n\n\u5177\u4f53\u5efa\u7acb\u591a\u5c11\u4e2a\u70b9,\u8fdb\u884c\u51e0\u6b21\u8be2\u95ee\u5462?\n\n\u5148\u5047\u8bbe\u6211\u4eec\u5c3d\u53ef\u80fd\u5efa\u70b9,\u5efa\u7acb$2x+1$\u4e2a\u70b9,\u90a3\u4e48\u5c31\u9700\u8981\u5efa\u7acb$3x$\u6761\u8fb9\u3002\n\n\u5f97$1+(2x+1)+(2\\times 3x)+1+2=157$\n\n\u89e3\u91ca\u4e00\u4e0b:1\u662f\u8f93\u51fa$V$\u7684\u6570\u91cf,$2x+1$\u662f\u8f93\u51fa$n_i$\u7684\u6570\u91cf,$3x$\u662f\u8f93\u51fa\u8fb9\u7684\u6570\u91cf,\u7531\u4e8e\u8981\u7528\u4e24\u4e2a\u6570\u5b57\u8868\u793a\u4e00\u6761\u8fb9\u6240\u4ee5\u8981\u4e582,$1$\u662f\u8f93\u51fa$Q$\u7684\u6570\u91cf,\u7531\u4e8e\u81f3\u5c11\u8981\u67091\u4e2a\u8be2\u95ee,\u6240\u4ee52\u662f\u8f93\u51fa\u8be2\u95ee\u7684\u6570\u91cf\u3002\n\n\u89e3\u5f97$x=19$,\u5219$V=39$,\u663e\u7136\u4e0d\u4f1a\u628aFloydWarshall\u5361\u6389\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u8fd9\u4e48\u5199\u5e76\u4e0d\u80fd\u8ba9ModifiedDijkstra T\u6389,\u4f46\u662f\u5df2\u7ecf\u5f88\u63a5\u8fd1\u4e86\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5f53\u6211\u4eec\u51cf\u5c11\u4e24\u4e2a\u70b9,\u5efa\u51fa\u7684\u56fe\u5c31\u4f1a\u5c112\u4e2a\u70b93\u6761\u8fb9,\u4e5f\u5c31\u5c11\u8f93\u51fa\u4e868\u4e2a\u6570,\u53ef\u4ee5\u8ba9\u6211\u4eec\u6dfb\u52a04\u6b21\u8be2\u95ee\u3002\n\n\u4e8e\u662f\u6211\u4eec\u4ee4$V=37,Q=5$,\u6210\u529f\u8ba9ModifiedDijkstra T\u6389\u3002\n\ncode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n=37,q=5,tt=1;\nint main(){\n\tfreopen(\"4.txt\",\"w\",stdout);\n\tprintf(\"%d\\n\",n);\n\tputs(\"0\");\n\tfor(int i=1;i<n;++i)i&1?printf(\"1 %d %d\\n\",i-1,-tt<<1):(printf(\"2 %d 0 %d %d\\n\",i-2,i-1,tt),tt<<=1);\n\tprintf(\"%d\\n\",q);\n\tfor(int i=1;i<=q;++i)printf(\"%d 0\\n\",n-1);\n\treturn 0;\n}\n```\n\n## Task5\n\n\u7c7b\u4f3cTask2,\u5efa\u6b63\u6743\u8fb9\u5373\u53ef\u3002\n\n\u4e0d\u8fc7\u8fd8\u6ca1\u5b8c,\u8fd9\u6b21\u7684$T$\u8981\u5c0f\u4e00\u4e9b\u3002\n\n\u4e0d\u8fc7\u5982\u679c\u50cf\u6211\u8fd9\u4e48\u5199\u4e5f\u5f88\u65b9\u4fbf,\u76f4\u63a5\u628aTask2\u7684\u4ee3\u7801\u4e2d\u7684$n$\u6539\u6210300,$T$\u6539\u62101016\u5373\u53ef\u3002\n\ncode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n=300,T=1016,Q=10,Num,RE,RN;\nvoid print(int x){\n\tif(x!=n-1){\n\t\tprintf(\"%d \",Num);\n\t\tfor(int i=1;i<=Num;++i)printf(\"%d 1 \",x?x-1:n-1);\n\t\tputs(\"\");\n\t}else{\n\t\tprintf(\"%d \",Num+RE);\n\t\tfor(int i=1;i<=Num+RE;++i)printf(\"%d 1 \",x?x-1:n-1);\n\t\tputs(\"\");\n\t}\n}\nint main(){\n\tfreopen(\"5.txt\",\"w\",stdout);\n\tprintf(\"%d\\n\",n),T-=1+n+1+(Q<<1),Num=(T>>1)/n,RE=(T>>1)-Num*n;\n\tfor(int i=0;i<n;++i)print(i);\n\tprintf(\"%d\\n\",Q);\n\twhile(Q--)printf(\"%d 0\\n\",n-1);\n\treturn 0;\n}\n```\n\n## Task6\n\n\u4f1a\u4e86Task4\u7684\u8bdd\u8fd9\u91cc\u4e5f\u5f88\u7b80\u5355\u4e86\u3002\n\n\u7531\u4e8e$T$\u51cf\u5c11\u4e8614,\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u51cf\u5c114\u4e2a\u70b9(\u51cf\u5c11\u4e8616\u4e2a\u8f93\u51fa\u7684\u6570\u5b57),\u76f8\u5e94\u5730\u589e\u52a01\u4e2a\u8be2\u95ee(\u589e\u52a0\u4e862\u4e2a\u8f93\u51fa\u7684\u6570\u5b57)\u5c31\u597d\u4e86\u3002\n\n\u5e76\u4e0d\u7528\u7ba1OptimizedBellmanFord,\u7edd\u5bf9\u5361\u4e0d\u6389\u7684\u3002\n\ncode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n=33,q=6,tt=1;\nint main(){\n\tfreopen(\"6.txt\",\"w\",stdout);\n\tprintf(\"%d\\n\",n);\n\tputs(\"0\");\n\tfor(int i=1;i<n;++i)i&1?printf(\"1 %d %d\\n\",i-1,-tt<<1):(printf(\"2 %d 0 %d %d\\n\",i-2,i-1,tt),tt<<=1);\n\tprintf(\"%d\\n\",q);\n\tfor(int i=1;i<=q;++i)printf(\"%d 0\\n\",n-1);\n\treturn 0;\n}\n```\n\n## Task7\n\n\u7531\u4e8eRecursiveBacktracking\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e$X$\u7684\u7b54\u6848\u6709\u5f88\u5927\u5173\u8054,$X$\u53d8\u5927\u7684\u8bdd\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4f1a\u9aa4\u7136\u4e0a\u5347,\u6240\u4ee5\u76f8\u5f53\u4e8e\u6211\u4eec\u8981\u6784\u5efa\u4e00\u4e2a$X$\u5f88\u5927\u7684\u56fe\u3002\n\n\u8003\u8651\u6784\u5efa\u5b8c\u5168\u56fe\u3002\n\n\u5f97$2+V(V-1)=3004$,2\u662f\u8f93\u51fa$V,E$\u7684\u6570\u91cf,$V$\u4e2a\u70b9\u7684\u5b8c\u5168\u56fe\u6709$\\frac{V(V-1)}{2}$\u6761\u8fb9,\u9700\u8981\u7528$V(V-1)$\u4e2a\u6570\u8868\u793a\u3002\n\n\u89e3\u5f97$\\lfloor V\\rfloor=55$\u3002\n\n\u4f46\u662f\u6570\u636e\u8981\u6c42$V>70$\u3002\n\n\u7a81\u7136\u60f3\u5230\u6211\u4eec\u5efa\u5b8c55\u4e2a\u70b9\u7684\u5b8c\u5168\u56fe\u4ee5\u540e,\u4e0d\u662f\u8fd8\u6709\u591a\u4f59\u7684$T$\u5417?\n\n\u53d1\u73b0\u591a\u4f59\u7684$T$\u662f32,\u53ef\u4ee5\u5efa16\u6761\u8fb9,\u800c16\u6761\u8fb9\u521a\u597d\u5c06\u8282\u70b954\u523070\u8fde\u6210\u4e00\u6761\u94fe\u3002\n\ncode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n=71,gr=55,E=1501;\nint main(){\n\tfreopen(\"7.txt\",\"w\",stdout);\n\tprintf(\"%d %d\\n\",n,E);\n\tfor(int i=0;i<gr;++i)for(int j=i+1;j<gr;++j)printf(\"%d %d\\n\",i,j);\n\tfor(int i=gr;i<n;++i)printf(\"%d %d\\n\",i-1,i);\n\treturn 0;\n}\n```\n\n## Task8\n\n\u540cTask7,\u6211\u4eec\u8003\u8651\u5efa\u7acb$X$\u5c3d\u53ef\u80fd\u5c0f\u7684\u56fe\u3002\n\n\u53d1\u73b0$X$\u6700\u5c0f\u7684\u56fe\u5c31\u662f\u94fe,$X=2$\u3002\n\n\u7136\u800c\u6211\u4eec\u5c34\u5c2c\u5730\u53d1\u73b0$V<1000,E>1500$,\u5e76\u4e0d\u80fd\u5efa\u6210\u94fe\u3002\n\n\u90a3\u600e\u4e48\u529e?\n\n\u6211\u4eec\u4ee4$V=999$,\u5148\u8fde\u6210\u4e00\u6761\u94fe,\u518d\u5c06\u5269\u4f59\u7684\u8fb9\u8fde\u5728\u6807\u53f7\u76f8\u5dee2\u7684\u8282\u70b9\u4e4b\u95f4\u5c31\u597d\u4e86\u3002\n\n\u8fd9\u6837\u5efa\u51fa\u7684\u56fe$X=3$\u3002\n\ncode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n=999,E=1501;\nint main(){\n\tfreopen(\"8.txt\",\"w\",stdout);\n\tprintf(\"%d %d\\n\",n,E);\n\tfor(int i=1;i<n;++i)printf(\"%d %d\\n\",i-1,i),--E;\n\tfor(int i=0;i<n&&E;++i)printf(\"%d %d\\n\",i,i+2),--E;\n\treturn 0;\n}\n```",
        "postTime": 1553170840,
        "uid": 26294,
        "name": "xryjr233",
        "ccfLevel": 9,
        "title": "[2019.3.21]\u6d1b\u8c37P3640 [APIO2013]\u51fa\u9898\u4eba"
    },
    {
        "content": "\u5ba3\u4f20\u535a\u5ba2->[link](https://blog.csdn.net/BWzhuzehao/article/details/117001679)\n\n\u4e00\u9053\u795e\u4ed9\u56fe\u8bba\u9898\uff0c\u5f88\u8003\u9a8c\u5404\u4f4d\u5bf9\u6700\u77ed\u8def\u4ee5\u53ca\u67d3\u8272\u95ee\u9898\u7684\u7406\u89e3\u3002\n\n\u9996\u5148\u8bf4\u660e 1 \u70b9\uff0c\u5b9e\u8d28\u4e0a\u795e\u79d8\u95ee\u9898\u5c31\u662f\u7ecf\u5178\u7684\u67d3\u8272\u95ee\u9898\u3002\n\n---------\n\n\u8fd9\u91cc\u9996\u5148\u7b80\u8981\u5206\u6790\u4e00\u4e0b\u7ed9\u51fa\u7684\u51e0\u4e2a\u4ee3\u7801\u7684\u7279\u8272\uff1a\n\n- FloydWarshall\uff1a\u7a33\u5b9a\u7684 $O(V^3)$ \u8fd0\u884c\u3002\u4e0b\u79f0 Floyd\u3002\n- OptimizedBellmanFord\uff1a\u52a0\u4e86\u4f18\u5316\u7684 Bellman-Ford\uff0c\u4f46\u662f\u53ea\u8981\u5728\u6bcf\u4e00\u8f6e\u677e\u5f1b\u7684\u65f6\u5019\u6709\u4e00\u4e2a\u70b9\u7684 $dis$ \u88ab\u6539\u53d8\u4e86\u5c31\u4f1a\u88ab\u5f7b\u5e95\u5361\u6210 $O(V^2E)$\uff0c\u4e8e\u662f\u8d1f\u73af\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u3002\u4e0b\u79f0 Bellman-Ford/BF\u3002\n- ModifiedDijkstra\uff1a\u4e5f\u6709\u4eba\u8bf4\u8fd9\u662f\u5806\u4f18\u5316\u7684 SPFA\uff0c\u8fd9\u73a9\u610f\u5728\u6b63\u6743\u56fe\u4e0a\u8868\u73b0\u826f\u597d\uff0c\u4f46\u662f\u53ea\u8981\u6211\u4eec\u6784\u9020\u4e00\u4e9b\u5947\u602a\u7684\u8d1f\u6743\u8fb9\u5c31\u88ab\u5361\u6389\u4e86\uff0c\u66f4\u5177\u4f53\u7684\u5206\u6790\u89c1\u540e\u6587\u3002\u4e0b\u79f0 Dijkstra/dij\u3002\n- Gamble1\uff1a\u6c38\u8fdc\u4e0d\u4f1a TLE\u3002\n- Gamble2\uff1a\u6c38\u8fdc\u4f1a TLE\u3002\n- RecursiveBacktracking\uff1a\u66b4\u529b\u67d3\u8272\u7684\u4ee3\u7801\uff0c\u8fd9\u73a9\u610f\u53ca\u5176\u5bb9\u6613\u5361\u3002\u4e0b\u79f0 RB\u3002\n\n---------\n\nSubtask 1\uff1a\u653e Dijkstra\uff0c\u5361\u6389 Floyd\uff0c$T=107$\u3002\n\nSubtask 3\uff1a\u653e Bellman-Ford\uff0c\u5361\u6389 Floyd\uff0c$T=105$\u3002\n\n\u56e0\u4e3a\u8ba1\u6570\u5668\u5927\u4e8e 1000000 \u65f6\u5c31\u4f1a TLE\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u6784\u5efa\u4e00\u7ec4\u6709 101 \u4e2a\u70b9\uff0c\u4f46\u662f\u6ca1\u6709\u4efb\u4f55\u8fb9\u7684\u56fe\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8be2\u95ee\u53ea\u9700\u8981\u8be2\u95ee 1 \u7ec4\uff0c\u968f\u4fbf\u54ea\u4e24\u4e2a\u70b9\u90fd\u884c\u3002\n\n$T=1+101+1+2=105$\uff0c\u80fd\u591f\u901a\u8fc7\u8fd9\u4e24\u4e2a\u70b9\u3002\n\n---------\n\nSubtask 2\uff1a\u653e Floyd\uff0c\u5361\u6389 Bellman-Ford\uff0c$T=2222$\u3002\n\nSubtask 5\uff1a\u653e Dijkstra\uff0c\u5361\u6389 Bellmam-Ford\uff0c$T=1016$\u3002\n\n\u8fd9\u4e24\u7ec4\u6570\u636e\u9700\u8981\u5361\u6389 BF\u3002\n\n\u4f46\u662f\u524d\u9762\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u53ea\u9700\u8981\u6765\u4e00\u4e2a\u7b80\u5355\u7684\u8d1f\u73af\uff0c\u7136\u540e\u8fb9\u6570\u5c3d\u91cf\u5927\u5c31\u597d\u3002\n\n\u5bf9\u4e8e Subtask 2\uff1a\u70b9\u6570 $V=100$\uff0c\u7136\u540e\u641e\u4e00\u4e2a\u8d1f\u73af\uff0c\u8fb9\u6570\u5c3d\u91cf\u5927\u5373\u53ef\u3002\n\n\u5bf9\u4e8e Subtask 5\uff1a\u7531\u4e8e dij \u5728\u8d1f\u6743\u56fe\u4e0a\u5bb9\u6613\u88ab\u5361\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u6761 $0->1$ \u7684\u5355\u5411\u8fb9\uff0c\u7136\u540e $2,3,4$ \u6784\u6210\u8d1f\u73af\uff0c\u5269\u4e0b\u7684\u6240\u6709\u70b9\u968f\u4fbf\u8fde\u8fb9\uff0c\u8fb9\u6570\u5c3d\u91cf\u5927\u5c31\u597d\u3002\u6ce8\u610f $0,1$ \u8fd9\u4e24\u4e2a\u70b9\u5fc5\u987b\u662f\u5355\u72ec\u6784\u6210\u4e00\u4e2a\u8fde\u901a\u5757\u3002\n\n---------\n\nSubtask 4\uff1a\u653e Floyd\uff0c\u5361\u6389 Dijkstra\uff0c$T=157$\u3002\n\nSubtask 6\uff1a\u653e Bellman-Ford\uff0c\u5361\u6389 Dijkstra\uff0c$T=143$\u3002\n\n\u672c\u9898\u6700\u96be\u7684\u4e24\u4e2a\u70b9\uff0c\u9700\u8981\u597d\u597d\u7814\u7a76\u4e00\u4e0b\u9898\u76ee\u4e2d\u7684 dij \u4ee3\u7801\u3002\n\nP.S. \u5982\u679c\u4f60\u662f\u975e C++ \u515a\u6216\u8005\u61d2\u5f97\u7814\u7a76\u4ee3\u7801\uff0c\u8bf7\u76f4\u63a5\u8df3\u5230\u4e24\u4efd\u4ee3\u7801\u540e\u9762\u7684\u5206\u6790\u3002\n\n\u9996\u5148\u4e00\u822c\u7684 Dijkstra \u4ee3\u7801\u662f\u8fd9\u6837\u7684\uff1a\uff08\u6211\u5199\u7684\u4e00\u4efd\uff09\n\n```cpp\nvoid dijkstra()\n{\n    memset(dis, 0x3f, sizeof(dis));\n    memset(book, 0, sizeof(book));\n    priority_queue <pri> q; q.push((pri){1, 0}); dis[1] = 0;\n    while (!q.empty())\n    {\n        pri x = q.top(); q.pop();\n        if (book[x.now]) continue ;\n        book[x.now] = 1;\n        for (int i = Head[x.now]; i; i = Edge[i].Next)\n        {\n            int u = Edge[i].to;\n            if (dis[u] > dis[x.now] + Edge[i].val)\n            {\n                dis[u] = dis[x.now] + Edge[i].val;\n                if (!book[u]) q.push((pri){u, dis[u]});\n            }\n        }\n    }\n}\n```\n\n\u9898\u76ee\u7ed9\u7684\u662f\u8fd9\u6837\u7684\uff1a\n\n```cpp\nwhile (Q--) {\n    scanf(\"%d %d\", &s, &t);\n\n    vector<int> dist(V, INF);\n    dist[s] = 0;\n    priority_queue< IntPair, vector<IntPair>, greater<IntPair> > pq;\n    pq.push(IntPair(0, s));\n    while (!pq.empty()) {\n      counter++;\n      if (counter > 1000000) {\n        printf(\"TLE because iteration counter > 1000000\\n\");\n        return 1;\n      }\n\n      IntPair front = pq.top(); pq.pop();\n      d = front.first; u = front.second;\n      if (d == dist[u]) {\n        for (j = 0; j < (int)AdjList[u].size(); j++) {\n          IntPair v = AdjList[u][j];\n          if (dist[u] + v.second < dist[v.first]) {\n            dist[v.first] = dist[u] + v.second;\n            pq.push(IntPair(dist[v.first], v.first));\n          }\n        }\n      }\n    }\n\n    printf(\"%d\\n\", dist[t]);\n  }\n```\n\n\u5927\u81f4\u7279\u8272\u662f\u8fd9\u6837\u7684\uff1a\n\n- \u9898\u76ee\u7ed9\u7684\u4ee3\u7801\u662f\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u8be2\u95ee\u90fd\u505a\u4e00\u904d Dijkstra\u3002\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020 10 \u7ec4\u76f8\u540c\u8be2\u95ee\uff0c\u6bcf\u7ec4\u8be2\u95ee\u8fd0\u884c\u6b21\u6570\u8d85\u8fc7 100000 \u5373\u53ef\u3002\n- \u5bf9\u6bd4\u4e24\u4efd\u4ee3\u7801\uff0c\u4f1a\u53d1\u73b0\u9898\u76ee\u7ed9\u7684\u4ee3\u7801\u5e76\u6ca1\u6709 $book$ \u6570\u7ec4\u3002\u8fd9\u5c06\u4f1a\u5bfc\u81f4\u7b54\u6848\u6b63\u786e\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e9b\u5947\u602a\u7684\u4e1c\u897f\u5361\u6389\u5b83\u3002\n- \u5176\u5b9e\u5982\u679c\u4f60\u5bf9 SPFA ~~\u8fd9\u4e2a\u5df2\u6b7b\u7684\u7b97\u6cd5~~\u8db3\u591f\u7cbe\u901a\u7684\u8bdd\uff0c\u4f60\u8fd8\u4f1a\u53d1\u73b0\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u4ee3\u7801\u662f\u4f18\u5148\u961f\u5217\u4f18\u5316\u7684 SPFA\uff08SLF \u4f18\u5316 SPFA\uff09\u3002\u800c\u4e00\u4e2a\u5e38\u8bc6\u5c31\u662f SLF \u4f18\u5316 SPFA \u662f\u53ef\u4ee5\u88ab\u5361\u6210\u6307\u6570\u7ea7\u522b\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u7740\u5c06\u5176\u5361\u6210\u6307\u6570\u7ea7\u522b\u3002\n\n\u90a3\u4e48\u600e\u4e48\u5361\u5462\uff1f\u770b\u4e0b\u56fe\uff1a\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210519193457344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JXemh1emVoYW8=,size_16,color_FFFFFF,t_70)\n\n\u6211\u4eec\u4ece 0 \u5f00\u59cb\u627e\uff0c\u8d70 $0 \\to 2 \\to 4$\uff0c\u8d70\u4e0d\u4e86\u4e86\uff0c\u8fd4\u56de\u3002\n\n\u7136\u540e $2 \\to 3 \\to 4$\uff0c\u53d1\u73b0\u80fd\u591f\u66f4\u65b0\u6700\u77ed\u8def\u3002\n\n\u5728\u66f4\u65b0\u5b8c $2,3,4$ \u4e4b\u540e\u7b97\u6cd5\u56de\u9000\u5230 1\uff0c\u7136\u540e\u8d70 $0 \\to 1 \\to 2$\uff0c\u4f1a\u53d1\u73b0\u80fd\u591f\u66f4\u65b0 $2$ \u7684\u6700\u77ed\u8def\u3002\n\n\u7136\u540e\u53c8\u91cd\u590d\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u50bb\u50bb\u7684 Dijkstra \u5c31\u88ab\u6211\u4eec\u5361\u6389\u4e86\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\u5c31\u662f\uff1a\n\n- \u8003\u8651\u6784\u5efa\u4e00\u4e2a\u5f62\u5982\u4e0a\u9762\u7684\u4e09\u5143\u73af $V,V+1,V+2$\uff0c$V$ \u5411 $V+2$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a 0 \u7684\u8fb9\uff0c\u5411 $V+1$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $dis$\uff08$dis$ \u5f88\u5927\uff09\uff0c\u7136\u540e $V+1$ \u5411 $V+2$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $-dis \\times 2$ \u7684\u8fb9\u3002\n- \u7136\u540e\u6784\u5efa $V+3,V+4,V+5$\uff0c\u4e0d\u8fc7\u6b64\u65f6 $dis$ \u9700\u8981\u9664\u4ee5 2\u3002\n\n\u8fd9\u6837\u505a\u7684\u539f\u7406\u5c31\u662f\u5728\u4e00\u4e2a\u4e09\u5143\u73af\u4e2d\uff0c$V$ \u5c06\u4f1a\u8d70\u5230 $V+2$ \u4e24\u6b21\uff1a$V \\to V+2$\uff0c$V \\to V+1 \\to V+2$\uff0c\u800c\u4e14\u53ea\u8981 $V$ \u88ab\u8d70\u5230\u5c31\u4f1a\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u3002\n\n\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4e0d\u8fd9\u4e48\u6784\u5efa\uff0c\u53cd\u6b63\u53ea\u8981\u539f\u7406\u76f8\u540c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ea\u8981\u6784\u5efa\u8db3\u591f\u591a\u7684\u4e09\u5143\u73af\uff0c\u5c31\u53ef\u4ee5\u987a\u5229\u7684\u5c06 Dijkstra \u5361\u6210\u6307\u6570\u7ea7\u522b\u3002\n\nBellman-Ford \u5462\uff1f\n\n\u53cd\u6b63\u8fd9\u73a9\u610f\u6ca1\u6709\u8d1f\u73af\uff0cBF \u4e0d\u662f\u968f\u4fbf\u8dd1qwq\n\n\u5bf9\u4e8e Floyd\uff0c\u4f60\u6839\u672c\u6ca1\u6cd5\u6784\u9020\u70b9\u6570\u5927\u4e8e 100 \u7684\u56fe\uff08$T$ \u5f88\u5c0f\uff09\uff0c\u800c\u4e14\u4f60\u4e5f\u6ca1\u5fc5\u8981\u6784\u9020\uff0c\u53ea\u9700\u8981\u5361\u6389 Dijkstra \u5c31\u597d\u4e86~\n\n\u8fd9\u4e24\u4e2a Subtask \u6709\u4e24\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a\n\n- \u5343\u4e07\u6ce8\u610f\u8fde\u8fb9\u987a\u5e8f\uff0c\u4e00\u5b9a\u662f\u5148\u8fde $V \\to V+2$\uff0c\u518d\u8fde $V \\to V+1 \\to V+2$\uff0c\u5426\u5219 Dijkstra \u4f1a\u4e00\u6b21\u5f97\u51fa\u6b63\u786e\u7b54\u6848\u3002\n- \u7531\u4e8e\u8fd9\u4e24\u4e2a Subtask \u7684 $T$ \u90fd\u975e\u5e38\u5c0f\uff0c\u56e0\u6b64\u4e00\u5b9a\u8981\u6ce8\u610f\u4f60\u4e00\u5171\u8f93\u51fa\u4e86\u591a\u5c11\u4e2a\u6574\u6570\uff0c\u9700\u8981\u8ba1\u7b97\u6e05\u695a\u3002\n\n---------\n\nSubtask 7\uff1a\u5361\u6389 RecursiveBacktracking\u3002\n\nSubtask 8\uff1a\u653e RecursiveBacktracking\u3002\n\n\u66b4\u529b\u67d3\u8272\u7684\u4ee3\u7801\u592a\u597d\u5361\u4e86\uff0c\u53ea\u8981\u6784\u9020\u4e00\u4e2a\u8fd1\u4f3c\u5b8c\u5168\u56fe\u5c31\u53ef\u4ee5\u5c06\u8fd9\u73a9\u610f\u5361\u6389\uff0c\u968f\u673a\u90fd\u884c\u3002\n\n~~\u524d\u63d0\uff1a\u4e0d\u662f\u975e\u914b\u3002~~\n\n\u653e RB \u8fc7\u4e5f\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u67d3\u8272\u95ee\u9898\u7684\u66b4\u529b\u4ee3\u7801\u5728\u4e8c\u5206\u56fe\u4e0a\u8868\u73b0\u826f\u597d\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u4e00\u4e2a\u4e8c\u5206\u56fe\u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd9\u4e24\u4e2a Subtask \u6709\u6700\u5c0f\u9650\u5236 $V \\geq 71\uff0cE \\geq 1501$\u3002\n\n\u8ba1\u7b97\u4e00\u4e0b\uff1a$1 + 1501 \\times 2=3003$\uff0c\u8981\u6c42\u53ea\u80fd\u6709 3004 \u4e2a\u6574\u6570\u3002\n\n\u770b\u6837\u5b50\u8fd9\u4e2a\u662f\u8981\u5230\u6781\u9650\u4e86\u3002\n\n\u7136\u800c\u66b4\u529b\u67d3\u8272\u4ee3\u7801\u590d\u6742\u5ea6\u5728\u4e8c\u5206\u56fe\u4e0a\u8ddf\u70b9\u6570\u6ca1\u6709\u592a\u5927\u5173\u7cfb\uff0c\u800c\u5bf9\u4e8e Subtask 7 \u53cd\u6b63\u4f60\u662f\u8981\u5361\u6389\u5b83\u3002\n\n\u4e8e\u662f\u8fd9\u4e24\u4e2a\u70b9 $V=100$\uff08\u5bf9\u4e8e Subtask 8 \u53ef\u4ee5\u66f4\u5927\uff09\uff0c\u7136\u540e $E=1501$\u3002\n\nSubtask 7 \u968f\u4fbf\u6784\u9020\u8fd1\u4f3c\u7684\u5b8c\u5168\u56fe\uff0cSubtask 8 \u6784\u9020\u4e8c\u5206\u56fe\u5373\u53ef\u3002\n\n---------\n\nSummary\uff1a\n\n\u8fd9\u9053\u9898\u8ba9\u6211\u4eec\u89c1\u8bc6\u5230\u4e86~~\u6bd2\u7624\u51fa\u9898\u4eba\u5361\u4f60\u6700\u77ed\u8def\u7684\u82e5\u5e72\u79cd\u65b9\u6cd5~~\u5404\u79cd\u6700\u77ed\u8def\u7b97\u6cd5\uff08Floyd\uff0c\u4f18\u5316 Bellman-Ford\uff0cSLF \u4f18\u5316 SPFA\uff09\u7684\u4f18\u7f3a\u70b9\uff0c\u662f\u4e00\u9053\u975e\u5e38\u597d\u7684\u56fe\u8bba\u9898\uff0c\u53ef\u4ee5\u52a0\u6df1\u5bf9\u6700\u77ed\u8def\u7684\u4e86\u89e3\u4e0e\u638c\u63e1\u3002",
        "postTime": 1621855757,
        "uid": 134000,
        "name": "Plozia",
        "ccfLevel": 7,
        "title": "P3640 [APIO2013]\u51fa\u9898\u4eba \u9898\u89e3"
    },
    {
        "content": "\u611f\u8c22@chen_zhe\u5927\u4f6c\u7684\u9898\u89e3\u8ba9\u6211\u4f1a\u505a\u8fd9\u4e2a\u9898\u76ee\u4e86\u3002\n### Part 1 SSSP\n#### Subtask 1\n\u653e\u6389\u5806\u4f18\u5316Dij\u3002\n\n~~\u8fd9\u4e0d\u662f\u653e\u4e00\u653e\u4e0d\u5c31\u597d\u4e86\u5417\uff1f~~\n\n$T \\le 107$\uff0c\u800c\u4e14$N \\ge 101$\uff0c\u6240\u4ee5$E_i = 0$\u3002\n\n\u968f\u4fbf\u6765\u4e2a\u8be2\u95ee\u5373\u53ef\u3002\n#### Subtask 2\n\u5361Bellman\uff0c\u653eFloyd\u3002\n\n~~\u8fd9\u4e0d\u662f\u641e\u4e00\u641e\u4e0d\u5c31\u597d\u4e86\u5417\uff1f~~\n\nBellman\u7b97\u6cd5\uff0c\u4e00\u9047\u5230\u8d1f\u6743\u8fb9\u5c31\u5e9f\u4e86\uff0c\u590d\u6742\u5ea6\u7167\u6837$O(VE)$\u3002\n\n\u6240\u4ee5\u641e\u4e00\u4e2a\u4e00\u5806\u8d1f\u6743\u8fb9+\u81ea\u73af+\u91cd\u8fb9\uff0c\u8ba9Bellman\u5fae\u5faeT\u5c31\u884c\u3002\n#### Subtask 3\n\u653eBellman\u3002\n\n~~\u8fd9\u4e0d\u662f\u7c98\u4e00\u7c98\u4e0d\u5c31\u597d\u4e86\u5417\uff1f~~\n\n\u5927\u773c\u89c2\u5bdf\uff0c\u53d1\u73b0\u548cSubtask 1\u4e00\u6bdb\u4e00\u6837\u3002\n#### Subtask 4\n\u9a97\u8fc7Dij\uff0c\u5361\u6389\u5b83\u3002\n\n~~\u8fd9\u4e0d\u662f\u9a97\u4e00\u9a97\u4e0d\u5c31\u597d\u4e86\u5417\uff1f~~\n\n\u548cBellman\u4e00\u6837\uff0cDij\u7b97\u6cd5\uff0c\u4e00\u9047\u5230\u8d1f\u6743\u8fb9\u5c31\u5e9f\u4e86\uff0c\u590d\u6742\u5ea6\u7167\u6837\u6307\u6570\u7ea7\u522b\u3002\n\n\u5982\u4f55\u9a97\u5462\uff1f\u90a3\u5c31\u8ba9\u4ed6\u8bef\u5165\u6b67\u9014\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hs6ww4bk.png)\n\n\u4ed4\u7ec6\u770b\uff0cDij\u57280\u8282\u70b9\u65f6\uff0c\u4f1a\u5148\u8d700->1\uff0c\u5230\u4e861\u624d\u53d1\u73b00->2->1\u77ed\uff0c\u7136\u540eDij\u5c31\u50bb\u50bb\u7684\u88ab\u9a97\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u591a\u6784\u9020\u51e0\u4e2a\u5c31\u884c\u4e86\u3002\n#### Subtask 5\n\u5361Bellman\uff0c\u653eDij\u3002\n\n~~\u8fd9\u4e0d\u662f\u5361\u4e00\u5361\u4e0d\u5c31\u597d\u4e86\u5417\uff1f~~\n\n\u56e0\u4e3a\u6709Dij\uff0c\u4e0d\u80fd\u8d1f\u6743\uff0c\u53ea\u80fd\u81ea\u73af+\u91cd\u8fb9+\u8bef\u5165\u6b67\u9014\u94fe\u3002\u4eba\u8089\u8c03\u53c2\u3002\n\n#### Subtask 6\n\u653eBellman\u3002\n\n~~\u8fd9\u4e0d\u662f\u8d34\u4e00\u8d34\u4e0d\u5c31\u597d\u4e86\u5417\uff1f~~\n\n\u5927\u773c\u89c2\u5bdf\uff0c\u53d1\u73b0\u548cSubtask 4\u4e00\u6bdb\u4e00\u6837\u3002\n### Part 2 Mystery\n#### Subtask 7\n\u5361\u66b4\u641c\u3002\n\n~~\u8fd9\u4e0d\u662f\u9020\u4e00\u9020\u4e0d\u5c31\u597d\u4e86\u5417\uff1f~~\n\n\u778e\u5361\u3002\n\n\u672c\u4eba\u8fd0\u6c14\uff1a\u4e0d\u662f\u975e\u914b\u5c31\u884c\u3002\n#### Subtask 8\n\u653e\u66b4\u641c\u3002\n\n~~\u8fd9\u4e0d\u662f\u6539\u4e00\u6539\u4e0d\u5c31\u597d\u4e86\u5417\uff1f~~",
        "postTime": 1609907240,
        "uid": 313716,
        "name": "decltype_auto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3640 \u3010[APIO2013]\u51fa\u9898\u4eba\u3011"
    }
]