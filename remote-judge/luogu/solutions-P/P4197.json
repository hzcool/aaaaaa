[
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c->[\u8fd9\u91cc](https://www.cnblogs.com/bztMinamoto/p/9680934.html)\n\n\u636e\u8bf4\u79bb\u7ebf\u505a\u6cd5\u662f\u4e3b\u5e2d\u6811\u4e0a\u6811+\u542f\u53d1\u5f0f\u5408\u5e76\uff08\u7136\u800c\u6211\u5e76\u4e0d\u4f1a\uff09\n\n\u636e\u8bf4bzoj\u4e0a\u6709\u5f3a\u5236\u5728\u7ebf\u7248\u672c\u53ea\u80fd\u7528\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\uff0c\u90a3\u5c31\u597d\u597d\u8bb2\u4e00\u4e0b\u597d\u4e86\n\n\u8fd9\u91cc\u5148\u611f\u8c22LadyLex\u5927\u4f6c\u7684\u535a\u5ba2->[\u8fd9\u91cc](https://www.cnblogs.com/LadyLex/p/7275821.html)\n\n\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\u53ef\u4ee5\u7528\u6765\u89e3\u51b3\u4e00\u7c7b\u8bf8\u5982\u201c\u67e5\u8be2\u4ece\u67d0\u4e2a\u70b9\u51fa\u53d1\u7ecf\u8fc7\u8fb9\u6743\u4e0d\u8d85\u8fc7val\u7684\u8fb9\u6240\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u201d\u7684\u95ee\u9898\n\n\u9996\u5148\u4e0d\u96be\u53d1\u73b0\uff0c\u4e0a\u9762\u8fd9\u4e2a\u95ee\u9898\u80af\u5b9a\u662f\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u8d70\u6700\u4f18\uff0c\u5176\u4ed6\u8fb9\u90fd\u53ef\u4ee5\u4e0d\u7528\u53bb\u7ba1\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5728\u5efa\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\u641e\u4e8b\u60c5\n\n\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\u7684\u601d\u60f3\u5c31\u662f\u5728\u5efa\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\u4e0d\u662f\u76f4\u63a5\u8fde\u8fb9\uff0c\u800c\u662f\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u628a\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\u8bbe\u4e3a\u8fb9\u6743\uff0c\u7136\u540e\u4ee4\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u4ee3\u8868\u70b9\u5206\u522b\u4f5c\u4e3a\u5b83\u7684\u5de6\u53f3\u513f\u5b50\u3002\u7136\u540e\u4ee4\u8fd9\u4e2a\u65b0\u8282\u70b9\u6210\u4e3a\u6574\u4e2a\u8fde\u901a\u5757\u7684\u4ee3\u8868\u70b9\n\n\u8bf4\u4e86\u90a3\u4e48\u591a\u8ddf\u6ca1\u8bf4\u4e00\u6837\u2026\u2026\u4e3e\u4e2a\u6817\u5b50\u597d\u4e86\n\n\u5047\u8bbe\u73b0\u5728\u6709\u56db\u4e2a\u8282\u70b9\uff0c\u8981\u6c42\u4ed6\u4eec\u7684\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\n\n![](https://i.loli.net/2018/09/20/5ba343c58872b.png)\n\n\u6211\u4eec\u6309\u6700\u5c0f\u751f\u6210\u6811\u7684\u65b9\u6cd5\u627e\uff0c\u5148\u628a\u8fb9\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n\u7136\u540e\u8bbe\u7b2c\u4e00\u6761\u8fb9\u6743\u503c\u4e3a4\uff0c\u8fde\u63a51\u548c2\u8fd9\u4e24\u4e2a\u8fde\u901a\u5757\n\n\u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u8282\u70b95\uff0c\u70b9\u6743\u8bbe\u4e3a4\uff0c\u5e76\u628a1\u548c2\u4f5c\u4e3a\u4ed6\u7684\u5de6\u53f3\u513f\u5b50\n\n![](https://i.loli.net/2018/09/20/5ba343c59c335.png)\n\n\u7b2c\u4e8c\u6761\u8fb9\u6743\u503c\u4e3a6\uff0c\u8fde\u63a53\u548c4\u8fd9\u4e24\u4e2a\u8fde\u901a\u5757\n\n\u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u8282\u70b96\uff0c\u70b9\u6743\u8bbe\u4e3a6\uff0c\u5e76\u628a3\u548c4\u4f5c\u4e3a\u4ed6\u7684\u5de6\u53f3\u513f\u5b50\n\n![](https://i.loli.net/2018/09/20/5ba343c59c29c.png)\n\n\u7b2c\u4e09\u6761\u8fb9\u6743\u503c\u4e3a7\uff0c\u8fde\u63a51\u548c2\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u662f\u8981\u628a4\u548c6\u7684\u8fde\u901a\u5757\u76f8\u8fde\u4e86\uff08\u8fd9\u4e24\u4e2a\u662f\u8fde\u901a\u5757\u7684\u4ee3\u8868\u70b9\uff09\n\n\u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u8282\u70b97\uff0c\u70b9\u6743\u8bbe\u4e3a7\uff0c\u5e76\u628a5\u548c6\u4f5c\u4e3a\u4ed6\u7684\u5de6\u53f3\u513f\u5b50\n\n![](https://i.loli.net/2018/09/20/5ba343c5afce7.png)\n\n\u7136\u540e\u8fd9\u4e00\u68f5\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\u5c31\u5efa\u597d\u4e86\u0669(\u0e51>\u25e1<\u0e51)\u06f6\n\n\u4e0d\u96be\u53d1\u73b0\u5b83\u6709\u4e00\u4e2a\u6027\u8d28\uff0c\u6bcf\u4e00\u4e2a\u513f\u5b50\u8282\u70b9\u7684\u6743\u503c\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u81ea\u5df1\u7684\u6743\u503c\uff08\u56e0\u4e3a\u6211\u4eec\u662f\u6309\u6700\u5c0f\u751f\u6210\u6811\u7684\u987a\u5e8f\u5efa\u7684\uff09\n\n\u90a3\u4e48\u8981\u67e5\u201c\u67e5\u8be2\u4ece\u67d0\u4e2a\u70b9\u51fa\u53d1\u7ecf\u8fc7\u8fb9\u6743\u4e0d\u8d85\u8fc7val\u7684\u8fb9\u6240\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u201d\n\n\u56e0\u4e3a\u6211\u4eec\u4e00\u4e2a\u539f\u6765\u56fe\u4e0a\u7684\u70b9\u80af\u5b9a\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u4ece\u53f6\u5b50\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0a\u627e\uff0c\u76f4\u5230\u627e\u5230\u6700\u540e\u4e00\u4e2a\u70b9\u6743\u5c0f\u4e8e\u7b49\u4e8e$val$\u7684\u70b9\n\n\u90a3\u4e48\u8fd9\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u91cc\u7684\u6240\u6709\u70b9\u90fd\u80fd\u5230\u8fbe\n\n\u600e\u4e48\u627e\u5462\uff1f\u500d\u589e\u5c31\u884c\u4e86\n\n\u653e\u5230\u8fd9\u4e00\u9898\u91cc\uff0c\u56e0\u4e3a\u8981\u67e5\u8be2\u7b2c$k$\u5927\uff0c\u6240\u4ee5\u8fd8\u5f97\u5957\u4e2a\u4e3b\u5e2d\u6811\u4e0a\u6811\n\n\u7136\u800c\u5c31\u5dee\u4e0d\u591a\u4e86\n```\n//minamoto\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define getc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){\n    #define num ch-'0'\n    char ch;bool flag=0;int res;\n    while(!isdigit(ch=getc()))\n    (ch=='-')&&(flag=true);\n    for(res=num;isdigit(ch=getc());res=res*10+num);\n    (flag)&&(res=-res);\n    #undef num\n    return res;\n}\nchar sr[1<<21],z[20];int C=-1,Z;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\ninline void print(int x){\n    if(C>1<<20)Ot();if(x<0)sr[++C]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]='\\n';\n}\nconst int N=2e5+5,M=N*16,K=5e5+5;\nstruct node{\n\tint from,to,cost;\n\tnode(){}\n\tnode(int from,int to,int cost):from(from),to(to),cost(cost){}\n\tinline bool operator <(const node &b)const\n\t{return cost<b.cost;}\n}E[K];\nint head[N],Next[N],ver[N],sum[M],L[M],R[M],bin[25],cnt,tot;\nint fa[N],f[N][20],ls[N],rs[N],rt[N],val[N],num;\nint h[N],limit,b[N],n,q,m,ans=0,dfn;\ninline void mission(int u){\n\tfor(int i=1;bin[i]<=n;++i)\n\tf[u][i]=f[f[u][i-1]][i-1];\n}\ninline void add(int u,int v){\n\tver[++tot]=v,Next[tot]=head[u],head[u]=tot;\n}\nint find(int x){return x==fa[x]?x:fa[x]=find(fa[x]);}\nvoid update(int last,int &now,int l,int r,int x){\n\tsum[now=++cnt]=sum[last]+1;\n\tif(l==r) return;\n\tint mid=(l+r)>>1;\n\tif(x<=mid) R[now]=R[last],update(L[last],L[now],l,mid,x);\n\telse L[now]=L[last],update(R[last],R[now],mid+1,r,x);\n}\nint query(int a,int x,int k){\n\tint l=1,r=limit;\n\tfor(int j=18;~j;--j)\n\tif(f[a][j]&&val[f[a][j]]<=x) a=f[a][j];\n\tint v=rt[rs[a]],u=rt[ls[a]-1];\n\tif(sum[v]-sum[u]<k) return -1;\n\twhile(l<r){\n\t\tint tmp=sum[R[v]]-sum[R[u]],mid=(l+r)>>1;\n\t\tif(tmp>=k) v=R[v],u=R[u],l=mid+1;\n\t\telse v=L[v],u=L[u],r=mid,k-=tmp;\n\t}\n\treturn b[r];\n}\nvoid dfs(int u){\n\tmission(u),ls[u]=++num;\n\tif(u<=n) update(rt[num-1],rt[num],1,limit,h[u]);\n\telse rt[num]=rt[num-1];\n\tfor(int i=head[u];i;i=Next[i]) dfs(ver[i]);\n\trs[u]=num;\n}\nint main(){\n//\tfreopen(\"testdata.in\",\"r\",stdin);\n\tn=read(),m=read(),q=read();\n\tbin[0]=1;for(int i=1;i<=22;++i) bin[i]=bin[i-1]<<1;\n\tfor(int i=1;i<=2*n;++i) fa[i]=i;\n\tfor(int i=1;i<=n;++i) b[i]=h[i]=read();\n\tfor(int i=1,u,v,e;i<=m;++i)\n\tu=read(),v=read(),e=read(),E[i]=node(u,v,e);\n\tsort(b+1,b+1+n),limit=unique(b+1,b+1+n)-b-1;\n\tfor(int i=1;i<=n;++i) h[i]=lower_bound(b+1,b+1+limit,h[i])-b;\n\tsort(E+1,E+1+m);dfn=n;\n\tfor(int i=1;i<=m;++i){\n\t\tint u=find(E[i].from),v=find(E[i].to);\n\t\tif(u!=v){\n\t\t\tval[++dfn]=E[i].cost,fa[u]=fa[v]=dfn;\n\t\t\tadd(dfn,u),add(dfn,v),f[u][0]=f[v][0]=dfn;\n\t\t\tif(dfn-n==n-1) break;\n\t\t}\n\t}\n\tfor(int i=1;i<=dfn;++i) if(!ls[i]) dfs(find(i));\n\twhile(q--){\n\t\tint v=read(),x=read(),k=read();\n\t\tprint(query(v,x,k));\n\t}\n\tOt();\n\treturn 0;\n}\n```",
        "postTime": 1537426424,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "\u9996\u5148\u7528$Kruskal$\u91cd\u6784\u6811\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u5f88\u65b9\u4fbf\u7684\u5904\u7406\u6bd4$x$\u5c0f\u7684\u9650\u5236\u6761\u4ef6\u4e86\n\n\u7136\u540e\u5b83\u8be2\u95ee\u7684\u662f\u9ad8\u5ea6\u4e2d\u7684\u7b2c$k$\u5927\uff0c\u4f1a\u81ea\u7136\u5730\u60f3\u5230\u8981\u7528\u4e3b\u5e2d\u6811\uff0c\u53ea\u662f\u8bf4\uff0c\u8981\u6ce8\u610f\u4e00\u4e2a\u7ec6\u8282\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u91cd\u6784\u6811\u7684\u67d0\u4e00\u4e2a\u975e\u53f6\u8282\u70b9\uff08\u8fb9\uff09\u4f1a\u7ba1\u8f96\u67d0\u4e9b\u53f6\u5b50\u8282\u70b9(\u70b9)\uff0c\u6709\u8da3\u7684\u662f\uff0c\u5176\u7ba1\u8f96\u7684\u53f6\u5b50\u8282\u70b9\u6784\u6210\u4e00\u4e2a\u533a\u95f4\uff0c\u6362\u800c\u8a00\u4e4b\u662f\u8fde\u7eed\u7684\uff08\u60f3\u4e0d\u51fa\u6765\u7684\u53ef\u4ee5\u753b\u4e00\u5f20\u56fe$QAQ$\uff09\n\n\u6240\u4ee5\u6211\u53ef\u4ee5\u5148$Kruskal$\u91cd\u6784\u6811\uff0c\u7136\u540e\u505a\u4e00\u904d$dfs$\uff0c\u8fd9\u904d$dfs$\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u628a\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9 **\"\u6458\"** \u4e0b\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u5e8f\u5217\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u5176\u7ba1\u8f96\u7684\u533a\u95f4\u3002\n\n\u7136\u540e\u6bcf\u6b21\u8be2\u95ee\u5c31\u53d8\u6210\u4e86\uff1a\u5148\u5728\u91cd\u6784\u6811\u4e0a\u8df3\uff0c\u8df3\u5230\u67d0\u4e2a\u8282\u70b9$x$\u540e\u8be2\u95ee$L[x]$\u5230$R[x]$\u8fd9\u4e00\u6bb5\u533a\u95f4\u5185\u7b2c$k$\u5927\u7684\u6570\u662f\u8c01\uff1f\u2014\u4e3b\u5e2d\u6811\u677f\u5b50\n\n\u7136\u540e\u6ce8\u610f\u79bb\u6563\u5316\uff0c\u4ee5\u53ca\u7279\u5224\u65e0\u89e3\u7684\u60c5\u51b5\u3002\u4e0b\u9762\u662f\u4e11\u964b\u7684\u4ee3\u7801\u3002\n\n```cpp\n\n#include<bits/stdc++.h>\nusing namespace std;\nint read(){\n\tchar cc = getchar(); int cn = 0, flus = 1;\n\twhile(cc < '0' || cc > '9'){\n    \tif(cc == '-') flus = -flus;\n\t\tcc = getchar();\n\t}\n\twhile(cc >= '0' && cc <= '9')\n\t    cn = cn * 10 + cc - '0', cc = getchar();\n\treturn cn * flus;\n}\nconst int N = 2e5 + 5;\nconst int M = 5e5 + 5;\nconst int inf = 999999999;\nstruct E{\n\tint to, next;\n}e[N * 2];\nstruct Node{\n\tint x, y, z;\n}q[M], hh[N];\nstruct Tree{\n\tint l, r, val;\n}t[N * 27];\nint h[N], head[N], fa[N], val[N], fath[N][24], L[N], R[N], b[N];\nint n, m, Q, cnt, tot, pop, rot[N], ctt;\nbool cmp(Node x, Node y){\n\treturn x.z < y.z;\n}\nvoid add(int x, int y){\n\te[++cnt] = (E){y, head[x]}; head[x] = cnt;\n}\nvoid input(){\n\tn = read(), m = read(), Q = read();\n\tval[0] = inf;\n\tfor(int i = 1; i <= n; i++) h[i] = read(), hh[i].x = i, hh[i].z = h[i];\n\tsort(hh + 1, hh + n + 1, cmp);\n\tfor(int i = 1; i <= n; i++) h[hh[i].x] = i;\n\tfor(int i = 1; i <= m; i++)\n\t\tq[i].x = read(), q[i].y = read(), q[i].z = read();\n\treturn ;\n}\nint find(int x){\n\tif(fa[x] == x) return x;\n\treturn fa[x] = find(fa[x]);\n}\nvoid Kruskal()\n{\n\tsort(q + 1, q + m + 1, cmp);\n\tfor(int i = 1; i <= n; i++) fa[i] = i;\n\ttot = n;\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint u = find(q[i].x), v = find(q[i].y);\n\t\tif(u == v) continue;\n\t\tval[++tot] = q[i].z, fa[tot] = fa[u] = fa[v] = tot;\n\t\tadd(tot, u), add(tot, v);\n\t}\n}\nvoid dfs(int x, int fa)\n{\n\tfath[x][0] = fa;\n\tfor(int i = 1; i <= 19; i ++)  \n\t\tfath[x][i] = fath[fath[x][i - 1]][i - 1];\n\tL[x] = pop;\n\tif(head[x] == 0) { b[++pop] = x; R[x] = pop; return ; }\n\tfor(int i = head[x]; i; i = e[i].next)\n\t\tdfs(e[i].to, x);\n\tR[x] = pop;\n}\n//\u4e3b\u5e2d\u6811 \nvoid build(int &root, int ll, int rr)\n{\n\troot = ++ctt;\n\tif(ll == rr)  return ;\n\tint mid = (ll + rr) >> 1;\n\tbuild(t[root].l, ll, mid); build(t[root].r, mid + 1, rr);\n}\nvoid change(int &root, int node, int ll, int rr, int k)\n{\n\troot = ++ctt; t[root] = t[node];\n\tif(ll == rr) {  t[root].val ++;  return ; }\n\tint mid = (ll + rr) >> 1;\n\tif(mid >= k) change(t[root].l, t[node].l, ll, mid, k);\n\telse change(t[root].r, t[node].r, mid + 1, rr, k);\n\tt[root].val = t[t[root].l].val + t[t[root].r].val;\n}\nint find_tr(int x, int k)\n{\n\tint now = x;\n\tfor(int i = 19; i >= 0; i--)\n\t\tif(val[fath[now][i]] <= k) now = fath[now][i];\n\treturn now;\n}\nint query(int root1, int root2, int k, int l, int r)\n{\n\tint rkid = t[t[root1].r].val - t[t[root2].r].val, mid = (l + r) >> 1;\n\tif(l == r){\n\t\tif(k - (t[root1].val - t[root2].val) == 0) //\u8fd9\u91cc\u6ce8\u610f\u7279\u5224\n        \treturn l;\n\t\treturn 0;\n\t}\n\tif(rkid >= k) return query(t[root1].r, t[root2].r, k, mid + 1, r);\n\telse return query(t[root1].l, t[root2].l, k - rkid, l, mid);\n}\nvoid solve(){\n\tKruskal(), dfs(tot, tot);\n\tbuild(rot[0], 1, n);\n\tfor(int i = 1; i <= pop; i++)\n\t\tchange(rot[i], rot[i - 1], 1, n, h[b[i]]);\n\tint v, x, k;\n\thh[0].z = -1;\n\tfor(int i = 1; i <= Q; i++)\n\t{\n\t\tv = read(), x = read(), k = read();\n\t\tint vip = find_tr(v, x);\n\t\tint ans = query(rot[R[vip]], rot[L[vip]], k, 1, n);\n\t\tprintf(\"%d\\n\", hh[ans].z);\n\t}\n}\nsigned main()\n{\n\tinput();\n\tsolve();\n\treturn 0;\n}\n\n```",
        "postTime": 1550845143,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "\u611f\u8c22[HRLYB](https://www.luogu.org/space/show?uid=126621)\u7684\u6307\u51fa\n\n#### [\u66f4\u591a\u5185\u5bb9\u5728\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/asd369-blog/p/P4197-Peaks.html)\n\n\u4ee5\u60ca\u4eba\u7684\u6bc5\u529b\u8c03\u5b8c\u4e86\u8fd9\u9053\u9898\n~~\uff08\u867d\u7136\u6700\u540e\u53d1\u73b0\u662f\u4e2asb\u9519\u8bef\uff09~~\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u8fd8\u662f\u5f88\u88f8\u7684\u2026\u2026\u7531\u4e8e\u6709\u56f0\u96be\u503c\u7684\u9650\u5236\uff0c\u6240\u4ee5\u60f3\u5230$Kruskal$\u91cd\u6784\u6811\uff0c\u7136\u540e\u5bf9\u4e8e\u8be2\u95ee\u4e2d\u4e0d\u80fd\u7ecf\u8fc7\u56f0\u96be\u503c\u5927\u4e8e$x$\u7684\u8def\u5f84\uff0c\u53cd\u6620\u5728\u91cd\u6784\u6811\u4e0a\u5c31\u662f\u53ea**\u5728\u70b9\u6743\u5c0f\u4e8e\u7b49\u4e8e$x$\u7684\u8282\u70b9\u7684\u5b50\u6811\u4e0a\u79fb\u52a8**\n\n\u6837\u4f8b\u7684\u91cd\u6784\u6811\u5927\u6982\u957f\u8fd9\u6837\n~~(\u56fe\u96be\u770b\u5fcd\u5fcd)~~\n![](https://cdn.luogu.com.cn/upload/pic/67842.png)\n#### \uff08\u7ea2\u8272\u62ec\u53f7\u5185\u662f\u70b9\u6743\uff0c\u767d\u8272\u7684\u70b9\u662f$Kruskal$\u91cd\u6784\u6811\u4e2d\u65b0\u52a0\u7684\u70b9\uff09\n\u63a5\u7740\u662f\u6c42\u7b2c$k$\u5927\uff08\u663e\u7136\u7528\u4e3b\u5e2d\u6811\u5566$qwq$\uff09  \n\n\u4e00\u5f00\u59cb\u6211\u60f3\u76f4\u63a5\u6253\u4e2a$dfs$\u5e8f\uff0c\u56e0\u4e3a\u662f\u5b50\u6811\u4e0a\u7684\u95ee\u9898\u3002\u4f46\u901a\u8fc7\u4e0a\u9762\u7684\u56fe\uff0c\u53d1\u73b0\u5176\u5b9e**\u6bcf\u4e2a\u70b9\u90fd\u5bf9\u5e94\u4e00\u6bb5\u533a\u95f4**\uff0c\u4f8b\u5982$19$\u5bf9\u5e94\u7684\u533a\u95f4\u5c31\u662f$(0,10]$\uff0c\u4e8e\u662f\u95ee\u9898\u5c31\u53d8\u5f97\u66f4\u4e3a\u7b80\u5316\u4e86\u3002\n\n\n~~\u4e11\u964b\u7684\u4ee3\u7801~~\uff08\u4f11\u60f3\u76f4\u63a5\u590d\u5236\uff09\uff1a\n```cpp\n#pragma GCC optimize(3) //\u624b\u52a8O3\n#include<bits/stdc++.h>\n\nusing namespace std;\n\ntemplate <typename T> inline void Read(T &t)\n{\n    int c=getchar(),f=0;\n    for(;c<'0'||c>'9';c=getchar())f=(c=='-');\n    for(t=0;c>='0'&&c<='9';c=getchar())t=(t<<3)+(t<<1)+(c^48);\n    if(f)t=-t;\n}\n\nconst int N=2e5+5,M=5e5+5;\nint n,m,q,tot,cnt,num,size;\nint head[N],b[N],h[N],f[N],diff[N],fa[N][25];\nint Rt[N],range[N][2];\n\nstruct Edge\n{\n    int u,v,dif,next;\n    void add(int x, int y, int d) {u=x,v=y,dif=d;}\n    void _add(int x, int y) {v=y,next=head[x],head[x]=tot;}\n    bool operator < (Edge e1) const {return dif<e1.dif;}\n}e[M],E[M];\n\nstruct HJTtree //\u4e3b\u5e2d\u6811\uff08\u9ec4\u5609\u6cf0=Hu Jintao\uff09\n{\nprivate:\n    int lc[N<<5],rc[N<<5],sum[N<<5];\npublic:\n    void build(int &rt, int l, int r)\n    {\n        rt=++cnt;\n        if(l==r)return;\n        int mid=(l+r)>>1;\n        build(lc[rt],l,mid);\n        build(rc[rt],mid+1,r);\n    }\n    void modify(int pre, int &rt, int l, int r, int x)\n    {   \n        rt=++cnt;\n        lc[rt]=lc[pre],rc[rt]=rc[pre],sum[rt]=sum[pre]+1;\n        if(l==r)return;\n        int mid=(l+r)>>1;\n        if(x<=mid)modify(lc[pre],lc[rt],l,mid,x);\n        else modify(rc[pre],rc[rt],mid+1,r,x);\n    }\n    int query(int x, int y, int l, int r, int k)\n    {\n        if(l==r)return l;\n        int mid=(l+r)>>1,d=sum[rc[y]]-sum[rc[x]];\n        if(k<=d)return query(rc[x],rc[y],mid+1,r,k);\n        else return query(lc[x],lc[y],l,mid,k-d);\n    }\n}t;\n\nvoid dfs(int x)\n{\n    for(int i=1;i<=20;i++)\n        fa[x][i]=fa[fa[x][i-1]][i-1];\n    range[x][0]=num; //\u5bf9\u5e94\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff08\u5de6\u5f00\u53f3\u95ed\uff09\n    if(!head[x])\n    {\n        int kkk=lower_bound(b+1,b+size+1,h[x])-b;\n\t\trange[x][0]=++num;\n        t.modify(Rt[num-1],Rt[num],1,size,kkk);\n        return;\n    }\n    for(int i=head[x],flag=0;i;i=E[i].next)\n        dfs(E[i].v);\n    range[x][1]=num;\n}\n\nint Find(int x) {return f[x]==x?x:f[x]=Find(f[x]);}\n\nvoid kruskal()\n{\n    sort(e+1,e+m+1);\n    for(int i=1;i<=n;i++)f[i]=i;\n    int temp=n;\n    for(int i=1;i<=m;i++)\n    {\n        int u=Find(e[i].u),v=Find(e[i].v);\n        if(u==v)continue;\n        diff[++temp]=e[i].dif;\n        f[u]=f[v]=f[temp]=temp;\n        E[++tot]._add(temp,u),E[++tot]._add(temp,v);\n\t\tfa[u][0]=fa[v][0]=temp;\n    }\n    t.build(Rt[0],1,size);\n    dfs(temp);\n} \n\nint main()\n{\n    Read(n),Read(m),Read(q);\n    for(int i=1;i<=n;i++)\n        Read(h[i]),b[i]=h[i];\n    sort(b+1,b+n+1);\n    size=unique(b+1,b+n+1)-b-1; //\u79bb\u6563\u5316\n    for(int i=1,x,y,d;i<=m;i++)\n    {\n        Read(x),Read(y),Read(d);\n        e[i].add(x,y,d);\n    }\n    kruskal();\n    while(q--)\n    {\n        int x,d,k;\n        Read(x),Read(d),Read(k);\n        for(int i=20;i>=0;i--)\n            if(fa[x][i]&&diff[fa[x][i]]<=d)x=fa[x][i]; //\u627e\u5230\u6df1\u5ea6\u6700\u5c0f\u4e14\u70b9\u6743\u4e0d\u5927\u4e8ek\u7684\u7956\u5148\n        if(sum[Rt[range[x][1]]]-sum[Rt[range[x][0]]]<k) {puts(\"-1\");continue;} //\u5982\u679c\u67e5\u8be2\u7684k\u5927\u4e8e\u8be5\u533a\u95f4\u9ad8\u5ea6\u503c\u4e2a\u6570\uff0c\u65e0\u89e3\n                       //\u5982\u679c\u8fd9\u91cc\u5199range[x][1]-range[x][0]\u4e5f\u662f\u4e00\u6837\u7684\n        printf(\"%d\\n\",b[t.query(Rt[range[x][0]],Rt[range[x][1]],1,size,k)]);\n    }\n    return 0;\n}\n```",
        "postTime": 1564728923,
        "uid": 76709,
        "name": "asd369",
        "ccfLevel": 0,
        "title": "P4197 Peaks"
    },
    {
        "content": "\u5c31\u5f53\u662f\u5b66\u4e60\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u7ec3\u4e60\u9898\u5427\u3002\n\n\u8fd9\u4e00\u5806\u8be2\u95ee\u4e0d\u592a\u597d\u641e\uff0c\u4f46\u662f\u6ca1\u6709\u4fee\u6539\uff1a\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u79bb\u7ebf\u4e0b\u6765\uff0c\u628a\u6240\u6709\u8be2\u95ee\u6309\u7167 $x$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n\u7c7b\u4f3c\u7684\uff0c\u628a\u6240\u6709\u8fb9\u4e5f\u6309\u56f0\u96be\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u5728\u5904\u7406\u8be2\u95ee\u7684\u65f6\u5019\uff0c\u5982\u679c\u8981\u6c42\u7684\u8def\u5f84\u56f0\u96be\u503c $\\le x$\uff0c\u5c31\u628a\u56f0\u96be\u503c $\\le x$ \u7684\u8fb9\u90fd\u52a0\u8fdb\u6765\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6bcf\u6b21\u52a0\u5165\u8fb9\u7684\u65f6\u5019\uff0c\u4e0d\u7528\u4ece\u5934\u5f00\u59cb\u52a0\uff0c\u76f4\u63a5\u4ece\u4e0a\u4e00\u6b21\u7684\u57fa\u7840\u4e0a\u641e\u3002  \n\u56e0\u4e3a\u6b64\u65f6\u91cd\u6784\u4e00\u904d\uff0c\u4e5f\u8981\u52a0\u5165\u4e0a\u6b21\u7684\u90a3\u4e9b\u8fb9\u3002  \n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u52a0\u5b8c\u8fb9\u4e4b\u540e\u76f4\u63a5\u67e5\u8be2\u70b9\u6240\u5728\u8fde\u901a\u5757\u4e2d\u7684\u7b2c $k$ \u5927\u3002\n\n\u5173\u4e8e\u52a0\u8fb9\u548c\u67e5\u8be2\u7684\u65b9\u6cd5\uff0c\u5c31\u8981\u7528\u5230\u7ebf\u6bb5\u6811\u5408\u5e76\u3002  \n\u53ef\u4ee5\u53c2\u8003\u8fd9\u9053\u9898\uff1a[\n[HNOI2012]\u6c38\u65e0\u4e61](https://www.luogu.org/problem/P3224)  \n\n\u6700\u540e\uff0c\u6b64\u9898\u5f88\u5751\u7684\u4e00\u70b9\uff1a  \n\u67e5\u8be2\u7684\u4e0d\u662f\u5c71\u5cf0\u4e0b\u6807\uff0c\u800c\u662f\u9ad8\u5ea6\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta((n+q)\\log n)$\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#define N 100003\n#define M 2000003\n#define reg register\n#define mid ((l+r)>>1)\n#define ll long long\nusing namespace std;\n\ninline void read(int &x){\n\tx = 0;\n\tchar c = getchar();\n\twhile(c<'0'||c>'9') c = getchar();\n\twhile(c>='0'&&c<='9'){\n\t\tx = (x<<3)+(x<<1)+(c^48);\n\t\tc = getchar();\n\t}\n}\n\nstruct edge{\n\tint u,v,w;\n\tinline edge(int u=0,int v=0,int w=0):u(u),v(v),w(w){}\n\tinline bool operator < (const edge& ed) const{\n\t\treturn w < ed.w;\n\t}\n}e[N*5];\n\nstruct query{ //\u8bb0\u5f55\u8be2\u95ee\n\tint u,x,k,id;\n\tinline query(int u=0,int x=0,int k=0,int id=0):u(u),x(x),k(k),id(id){}\n\tinline bool operator < (const query& b) const{\n\t\treturn x < b.x;\n\t}\n}qy[N*5];\n\nint n,m,q,cnt,len;\nint fa[N],rt[N],ans[N*5],h[N],b[N];\nint sum[M],ls[M],rs[M],size[N];\n\ninline int find(int x){ \n\twhile(x!=fa[x]) x = fa[x] = fa[fa[x]];\n\treturn x;\n}\n\nvoid insert(int &u,int l,int r,int pos){ //\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u4fee\u6539\n\tif(!u) u = ++cnt;\n\tif(l==r){\n\t\t++sum[u];\n\t\treturn;\n\t}\n\tif(pos<=mid) insert(ls[u],l,mid,pos);\n\telse insert(rs[u],mid+1,r,pos);\n\tsum[u] = sum[ls[u]]+sum[rs[u]];\n} \n\nint merge(int u,int v,int l,int r){ //\u5408\u5e76\n\tif(!u||!v) return u|v;\n\tif(l==r){\n\t\tsum[u] += sum[v];\n\t\treturn u;\n\t}\n\tls[u] = merge(ls[u],ls[v],l,mid);\n\trs[u] = merge(rs[u],rs[v],mid+1,r);\n\tsum[u] = sum[ls[u]]+sum[rs[u]];\n\treturn u;\n}\n\nint ask(int u,int l,int r,int k){ //\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u627e\u7b2c k \u5927\n\tif(l==r) return l;\n\tif(sum[rs[u]]>=k) return ask(rs[u],mid+1,r,k);\n\treturn ask(ls[u],l,mid,k-sum[rs[u]]);\n}\n\nint main(){\n\tint u,v,w,x,k,pt = 0;\n    read(n),read(m),read(q);\n    for(reg int i=1;i<=n;++i){\n    \tread(h[i]);\n\t\tb[i] = h[i];\t\n\t\tsize[i] = 1;\n\t}\n\tsort(b+1,b+1+n);\n\tlen = unique(b+1,b+1+n)-b-1; //\u559c\u95fb\u4e50\u89c1\u7684\u79bb\u6563\u5316\u4e09\u8fde\n\tfor(reg int i=1;i<=n;++i){\n\t\tx = lower_bound(b+1,b+1+len,h[i])-b;\n\t\tinsert(rt[i],1,len,x);\n\t}\n    for(reg int i=1;i<=m;++i){\n    \tread(u),read(v),read(w);\n    \te[i] = edge(u,v,w);\n\t}\n\tsort(e+1,e+1+m);\n\tfor(reg int i=1;i<=q;++i){\n\t\tread(u),read(x),read(k);\n\t\tqy[i] = query(u,x,k,i);\n\t}\n\tsort(qy+1,qy+1+q);\n\tfor(reg int i=1;i<=n;++i) fa[i] = i;\n\tfor(reg int i=1;i<=q;++i){\n\t\tx = qy[i].x;\n\t\twhile(e[pt+1].w<=x&&pt<m){ //pt \u8868\u793a\u6307\u9488,\u628a\u56f0\u96be\u5ea6 <=x \u7684\u8fb9\u90fd\u52a0\u5165\n\t\t\t++pt;\n\t\t\tu = e[pt].u,v = e[pt].v;\n\t\t\tu = find(u),v = find(v);\n\t\t\tif(u==v) continue;\n\t\t\tfa[v] = u;\n\t\t\tsize[u] += size[v];\n\t\t\trt[u] = merge(rt[u],rt[v],1,len);\n\t\t}\n\t\tu = qy[i].u,k = qy[i].k;\n\t\tif(size[find(u)]<k) ans[qy[i].id] = -1; //\u6ce8\u610f\u5224\u65e0\u89e3\n\t\telse ans[qy[i].id] = b[ask(rt[find(u)],1,len,k)];\n\t}\n\tfor(reg int i=1;i<=q;++i) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1568275089,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "\u600e\u4e48\u90fd\u662fkruscal\u91cd\u6784\u6811\u554a\u3002\u4e0d\u4f1a\u554a\uff0c\u8fd8\u662f\u592a\u83dc\u4e86\uff0c\u8003\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\u8bd5\u4e86\u4e00\u4e0b\u5e76\u67e5\u96c6+vector\u7ef4\u62a4\uff0c\u53d1\u73b0\u5176\u5b9e\u6d1b\u8c37\u4e0a\u53ef\u4ee5\u8dd1\uff0c\u6d1b\u8c37\u6570\u636e\u751a\u81f3\u88f8\u8dd1\u6bd4\u6211\u81ea\u5df1\u6253\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u8fd8\u5feb\uff08~~\u53ef\u80fd\u8fd8\u662f\u56e0\u4e3a\u6211\u592a\u83dc\u4e86~~\uff09\u3002\u540e\u9762\u53d1\u73b0\u6253\u7684vector\u5408\u5e76\u8fd8\u4e0d\u662f\u5f88\u4f18\u79c0\uff0c\u5c1d\u8bd5\u4e86\u4e00\u4e0b\u4e0a\u6b21\u542c\u5927\u4f6cwqy @[wucstdio](https://www.luogu.org/space/show?uid=54214) \u8bb2\u7684\u6839\u53f7\u5e73\u8861\uff08~~\u597d\u50cf\u662f\u8fd9\u4e2a\u4e1c\u897f~~\uff09\u8fdb\u884c\u4e86\u65f6\u95f4\u4e0a\u7684\u7384\u5b66\u4f18\u5316\uff0c\u76ee\u524d\u5f85\u5728\u6700\u4f18\u89e3\u7684\u524d\u9762\u3002\n\n\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u600e\u4e48\u4e2a\u5361\u6cd5\u5462\uff0c\u5bf9\u4e8evector\u5408\u5e76\u7684\u65f6\u5019\uff0c\u6211\u6700\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\u5c06\u4e2a\u6570\u5c11\u7684\u96c6\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e8c\u5206\u67e5\u627e\u4f4d\u7f6e\u7136\u540e\u7528vectoer\u4e2d\u7684insert\u51fd\u6570\u63d2\u5165\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5143\u7d20\u5927\u7ea6\u662fO($\\sqrt{y}\\times{log_{2}y}$),\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662fO($x\\times{\\sqrt{y}\\times{log_{2}y}}$)\u5176\u4e2dy\u662f\u88ab\u63d2\u5165\u7684\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\uff0cx\u662f\u9700\u8981\u63d2\u5165\u5230y\u96c6\u5408\u4e2d\u7684\u96c6\u5408\u7684\u5143\u7d20\u4e2a\u6570\u3002\u8fd9\u6837\u5728\u63d2\u5165\u5143\u7d20\u4e2a\u6570\u8f83\u5c0f\u7684\u65f6\u5019\u662f\u6bd4\u8f83\u4f18\u79c0\u4e86\uff0c\u4f46\u662f\u5f53\u5143\u7d20\u4e2a\u6570\u591a\u4e86\u7684\u65f6\u5019\u5f88\u6162,\u600e\u4e48\u529e\u5462\u3002\u6211\u4eec\u53d1\u73b0\uff0cvector\u6709\u4e00\u4e2a\u66f4\u4f18\u79c0\u7684\u63d2\u5165\u51fd\u6570push_back\u53ef\u4ee5\u5b9e\u73b0\u5c06\u5143\u7d20\u63d2\u5165\u5728\u672b\u5c3e\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u662fO(2)\u53ef\u4ee5\u770b\u505aO(1)\uff0c\u6211\u4eec\u4e4b\u6240\u4ee5\u8981\u7528\u4e8c\u5206\u67e5\u627e\u548cinsert\u63d2\u5165\u662f\u4e3a\u4e86\u7ef4\u62a4vector\u4e2d\u7684\u6709\u5e8f\u6027\u3002\u90a3\u4e48\u5728\u5143\u7d20\u4e2a\u6570\u5f88\u591a\u7684\u65f6\u5019\u5176\u5b9e\u53ef\u4ee5\u5148\u5c06\u5143\u7d20\u5168\u90e8\u63d2\u5165\u5728\u672b\u5c3e\u518d\u8fdb\u884c\u6392\u5e8f\u64cd\u4f5c,\u53ef\u4ee5\u505a\u5230\u65f6\u95f4\u590d\u6742\u5ea6\u662fO\uff08$x+(x+y)\\times{log_2(x+y)}$\uff09\n\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5f53\u4e0a\u9762\u4e24\u4e2a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u7b49\u65f6\uff0c\n\n$x\\times{\\sqrt{y}\\times{log_{2}y}}=x+(x+y)\\times{log_2(x+y)}$\n\n\u6211\u4eec\u53ef\u4ee5\u5047\u88c5\u91cc\u9762\u4e00\u4e9b\u540c\u7b49\u7ea7\u7684\u503c\u662f\u76f8\u540c\u7684\uff0c\u5316\u7b80\u540e\u5927\u7ea6\u5c31\u53ef\u4ee5\u770b\u505a$x=\\sqrt{y}$\uff08\u5176\u5b9e\u53ef\u4ee5\u5316\u6210\u66f4\u6709\u9053\u7406\u7684\u5206\u754c\u6761\u4ef6\uff0c\u53ea\u662f\u56e0\u4e3a\u6211\u592a\u61d2\u4e86\u2026\u2026\uff09\n\n\u4e8e\u662f\u6211\u4eec\u6bcf\u6b21\u5408\u5e76\u65f6\u4fdd\u8bc1$x<y$\uff0c\u5f53$x<\\sqrt{y}$\u662f\u6211\u4eec\u5c31\u4f7f\u7528\u7b2c\u4e00\u79cd\u65b9\u5f0f\u5408\u5e76\uff0c\u5426\u5219\u5c31\u8fdb\u884c\u7b2c\u4e8c\u79cd\u5408\u5e76\u65b9\u5f0f\u3002\u8fd9\u6837\u53ef\u4ee5\u5927\u6982\u53ef\u4ee5\u5c06\u6bcf\u6b21\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u9650\u5236\u5728$(x+y)\\times{log_2{(x+y)}}$\u4e0b\u3002\n\n\u76ee\u524d\u8dd1\u7684\u6700\u5feb\u7684\u90a3\u7bc7717ms\u7684\u4ee3\u7801\u5b9e\u9645\u4e0a\u662f\u6709\u95ee\u9898\u7684\uff0c\u6211\u662f\u6bcf\u6b21\u9700\u8981\u67e5\u627e\u7b54\u6848\u65f6\u518d\u6392\u5e8f\uff0c\u7136\u540e\u6807\u8bb0\uff0c\u5982\u679c\u96c6\u5408\u6ca1\u53d8\u8fc7\u4e4b\u540e\u5c31\u4e0d\u7528\u6392\u5e8f\u4e86\uff0c\u4f46\u662f\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u6781\u5ea6\u4e0d\u7a33\u5b9a\uff0c\u6d1b\u8c37\u6570\u636e\u8dd1\u7684\u5f88\u5feb\uff0c\u5176\u4ed6\u5730\u65b9\u6570\u636e\u53ef\u4ee5\u5361\u6b7b\u3002\n\n\u800c\u5bf9\u4e8e\u540e\u9762\u4e24\u4e2a796ms\u7684\u4ee3\u7801\u5c31\u662f\u6211\u4f7f\u7528\u7684~~\u6839\u53f7\u5e73\u8861~~\uff08**\u6211\u786e\u5b9e\u662f\u4e0d\u6e05\u695a\u8fd9\u6837\u8bf4\u662f\u5426\u51c6\u786e\uff0c\u6211\u5728\u8fd9\u91cc\u7684\u65b9\u6cd5\u5927\u6982\u5c31\u662f\u8c03\u6574\u65f6\u95f4\u590d\u6742\u5ea6**\uff09\uff0c\u4f46\u662f\u524d\u9762\u90a3\u4efd\u4ee3\u7801\u4e5f\u662f\u6709\u4e00\u70b9\u95ee\u9898\uff0c\u6211\u5728\u4ea4\u6362fx\u548cfy\u65f6\u6ca1\u6709\u4ea4\u6362sizex\u548csizey\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u5728\u4ea4\u6362\u540e\u6839\u672c\u6ca1\u6709\u5224\u65ad\u5230\u5206\u754c\u6761\u4ef6\uff0c\u6240\u4ee5\u4e5f\u662f\u5047\u7684\u3002\uff08~~\u9003~~~\n\n\u540e\u9762\u90a3\u4efd\u76ee\u524d\u6ca1\u6709\u53d1\u73b0\u4ec0\u4e48\u95ee\u9898\u3002\uff08~~\u4e00\u5927\u5806\u5361\u5e38\u90fd\u662f\u57fa\u672c\u64cd\u4f5c\u5566~~\uff09\n\n**Code**\uff08~~\u5361\u5e38\u88ab\u6211\u5220\u4e86~~\uff09\n\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#define ll long long\n#define re register\n#define N 100010\n#define M 500010\nusing namespace std;\ninline ll read(){\n\tll x=0,f=1;char ch=getchar();\n\twhile(ch<'0' || ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\n\nint n,m,Q,fa[N],h[N],ans[M];\nvector<int> v[N];\nstruct E{\n\tint from,to,w;\n}edge[M];\nbool cmp(const E &a,const E &b){\n\treturn a.w<b.w;\n}\nstruct question{\n\tint id,u,num,val;\n}q[M];\nbool cmp2(const question &a,const question &b){\n\treturn a.val<b.val;\n}\n\ninline int find(int x){\n\treturn fa[x]==x?x:fa[x]=find(fa[x]);\n}\n\nint main(){\n\tn=read(),m=read(),Q=read();\n\tfor(re int i=1;i<=n;i++) h[i]=read(),fa[i]=i,v[i].push_back(h[i]);\n\tfor(re int i=1;i<=m;i++) edge[i].from=read(),edge[i].to=read(),edge[i].w=read();\n\tsort(edge+1,edge+m+1,cmp);\n\tfor(re int i=1;i<=Q;i++){\n\t\tq[i].id=i,q[i].u=read(),q[i].val=read(),q[i].num=read();\n\t}\n\tsort(q+1,q+Q+1,cmp2);\n\tint last=0;\n\tfor(re int t=1;t<=Q;t++){\n\t\tfor(re int i=last+1;i<=m;i++){\n\t\t\tif(edge[i].w<=q[t].val){\n\t\t\t\tint x=edge[i].from,y=edge[i].to;\n\t\t\t\tint fx=find(x),fy=find(y);\n\t\t\t\tif(fx!=fy){\n\t\t\t\t\tint sizex=v[fx].size(),sizey=v[fy].size();\n\t\t\t\t\tif(sizex>sizey) swap(fx,fy),swap(sizex,sizey);\n\t\t\t\t\tfa[fx]=fy;\n\t\t\t\t\tif((ll)sizex*sizex<sizey){//\u8c03\u6574\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u7384\u5b66\u5206\u754c\u6761\u4ef6 \n\t\t\t\t\t\tfor(re int j=0;j<sizex;j++){\n\t\t\t\t\t\t\tv[fy].insert(lower_bound(v[fy].begin(),v[fy].end(),v[fx].at(j)),v[fx].at(j));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tfor(int j=0;j<sizex;j++){\n\t\t\t\t\t\t\tv[fy].push_back(v[fx].at(j));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsort(v[fy].begin(),v[fy].end());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlast=i;\n\t\t\t}\n\t\t\telse break;\n\t\t}\n\t\tint x=find(q[t].u);\n\t\tif(v[x].size()<q[t].num) ans[q[t].id]=-1;\n\t\telse ans[q[t].id]=v[x].at(v[x].size()-q[t].num);\n\t}\n\tfor(re int i=1;i<=Q;i++) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1571994973,
        "uid": 111850,
        "name": "L______",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u6548\u679c\u66f4\u4f73](https://www.luogu.org/blog/oldherd/solution-p4197)  \n\u521a\u521a\u770b\u5230\u8fd9\u9898\u76ee\u8fd8\u662f\u633a\u65b9\u7684\uff0c\u4ec0\u4e48\u601d\u8def\u4e5f\u6ca1\u6709\u3002  \n\u7136\u800c\u53d7\u5230[P3224 \u6c38\u65e0\u4e61](https://www.luogu.org/problemnew/show/P3224)\u7684\u89e3\u6cd5\u7684\u542f\u53d1\u8fd8\u662f\u60f3\u4e86\u51fa\u6765\u3002\u5982\u679c\u6700\u8fd1\u5728\u5927\u91cf\u5237\u7ebf\u6bb5\u6811\u7684\u540c\u5b66\u53ef\u80fd\u6709\u505a\u8fc7\u3002\u8be5\u9898\u4e0e\u672c\u9898\u76f8\u8fd1\uff0c\u5728\u7ed9\u5b9a\u91cd\u8981\u5ea6\u7684\u5c9b\u5c7f\u4e4b\u95f4\u8fde\u8fb9\u548c\u67e5\u8be2\u64cd\u4f5c\u4ea4\u66ff\uff0c\u67e5\u8be2\u7684\u662f\u8fde\u901a\u5757\u5185\u7b2ck\u5927\u91cd\u8981\u5ea6\u7684\u5c9b\u5c7f\uff0c\u5728\u90a3\u9898\u4e2d\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u67e5\u8be2\u3002\u8fde\u8fb9\u7684\u64cd\u4f5c\u901a\u8fc7\u5e76\u67e5\u96c6\u5408\u5e76\u548c\u7ebf\u6bb5\u6811\u5408\u5e76\u89e3\u51b3\u3002  \n\u56de\u5230\u672c\u9898\uff0c\u5bf9\u7167\u5f88\u5bb9\u6613\u60f3\u51fa\u79bb\u7ebf\u89e3\u6cd5\u3002\u5c06\u8be2\u95ee\u6309\u7167x(\u8def\u5f84\u96be\u5ea6)\u6392\u5e8f\uff0c\u5c06\u8fb9\u4e5f\u6392\u5e8f\uff0c\u7136\u540e\u52a8\u6001\u5730\u904d\u5386\u6392\u597d\u5e8f\u7684\u8be2\u95ee\uff0c\u5c06\u5c0f\u4e8e\u8be5\u8be2\u95ee\u4e14\u5f53\u524d\u6ca1\u6709\u88ab\u52a0\u5165\u7684\u8fb9\u52a0\u5165(\u9664\u975e\u8fb9\u7684\u4e24\u7aef\u5df2\u7ecf\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d)\uff0c\u540c\u65f6\u5408\u5e76\u7ebf\u6bb5\u6811\uff0c\u8fd4\u56de\u533a\u95f4\u67e5\u8be2\u7684\u503c\u3002  \n\u4e0b\u9762\u9644\u4e0aAC\u4ee3\u7801\uff1a  \n```cpp\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn = 100010, maxm = 500010, maxq = 500010;\nint a[maxn], rnk[maxn], rnans[maxq], fa[maxn], ans[maxq];\n\n\nstruct edge{\n\tint u, v, w;\n\tbool operator < (const edge& o) const { return w < o.w; }\n}e[maxm];\n\nstruct ask{\n\tint v, x, k;\n}as[maxq];\n\nbool cmp1(int i, int j) {\n\treturn a[i] > a[j];\n} \n\nbool cmp2(int i, int j) {\n\treturn as[i].x < as[j].x;\t\n}\n\ninline int get(int x) {\n\tif(fa[x] == x) return x;\n\treturn fa[x] = get(fa[x]);\n}\n\ninline void mg(int x, int y) {\n\tx = get(x); y = get(y);\n\tfa[y] = x;\t\n}\n\nstruct stree{\n\tint ls, rs, val;\n}t[30*maxm];\nint root[maxn], tot = 1;\n\ninline int newnode() {\n\tt[tot].ls = t[tot].rs = t[tot].val = 0;\n\treturn tot++;\n}\n\ninline void insert(int p, int lp, int rp, int pls) {\n\tif(lp == rp) { t[p].val++; return; }\n\tint mid = (lp + rp) >> 1;\n\tif(pls <= mid) {\n\t\tif(!t[p].ls) t[p].ls = newnode();\n\t\tinsert(t[p].ls, lp, mid, pls);\n\t} else {\n\t\tif(!t[p].rs) t[p].rs = newnode();\n\t\tinsert(t[p].rs, mid+1, rp, pls);\n\t}\n\tt[p].val = t[t[p].ls].val + t[t[p].rs].val;\n}\n\ninline int merge(int p, int q, int lp, int rp) {\n\tif(!p || !q) return p|q;\n\tif(lp == rp) { t[p].val += t[q].val; return p; }\n\tint mid = (lp + rp) >> 1;\n\tt[p].ls = merge(t[p].ls, t[q].ls, lp, mid);\n\tt[p].rs = merge(t[p].rs, t[q].rs, mid+1, rp);\n\tt[p].val = t[t[p].ls].val + t[t[p].rs].val;\n\treturn p;\n}\n\ninline int query(int p, int lp, int rp, int k) {\n    if(lp == rp) return lp;\n    int mid = (lp + rp) >> 1;\n    if(t[t[p].ls].val >= k) return query(t[p].ls, lp, mid, k);\n    else return query(t[p].rs, mid+1, rp, k-t[t[p].ls].val);\n}\n\nint main() {\n\tint n, m, q;\n\tscanf(\"%d %d %d\", &n, &m, &q);\n\tfor(int i = 1; i <= n; i++) scanf(\"%d\", a+i), rnk[i] = fa[i] = i;\n\tsort(rnk+1, rnk+n+1, cmp1);\n\tfor(int i = 1; i <= m; i++) scanf(\"%d %d %d\", &e[i].u, &e[i].v, &e[i].w);\n\tsort(e+1, e+m+1);\n\tfor(int i = 1; i <= q; i++) scanf(\"%d %d %d\", &as[i].v, &as[i].x, &as[i].k), rnans[i] = i;\n\tsort(rnans+1, rnans+q+1, cmp2);\n\tint p = 1;\n\tfor(int i = 1; i <= n; i++) {\n\t\troot[rnk[i]] = newnode();\n\t\tinsert(root[rnk[i]], 1, n, i);\n\t}\n\tfor(int i = 1; i <= q; i++) {\n\t\tint v = as[rnans[i]].v, x = as[rnans[i]].x, k = as[rnans[i]].k;\n\t\twhile(e[p].w <= x && p <= m) {\n\t\t\tif(get(e[p].u) == get(e[p].v)) { p++; continue;}\n\t\t\troot[e[p].u] = root[e[p].v] = merge(root[get(e[p].u)], root[get(e[p].v)], 1, n);\n\t\t\tmg(e[p].u, e[p].v);\n\t\t\tp++;\n\t\t}\n\t\tv = get(v);\n\t\tif(t[root[v]].val < k) ans[rnans[i]] = -1;\n\t\telse ans[rnans[i]] = a[rnk[query(root[v], 1, n, k)]];\n\t}\n\tfor(int i = 1; i <= q; i++) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n```  \n\u6b22\u8fce\u4e92\u76f8\u5173\u6ce8(\u7136\u800c\u5728oi\u754c\u849f\u84bb\u7684\u5708\u5f88\u5c0f)\u3002  \n\u6700\u540e\u518d\u6b21\u5b89\u5229\u4e00\u4e0b[\u849f\u84bb\u7684\u6d1b\u8c37\u535a\u5ba2](https://www.luogu.org/blog/oldherd/)  ",
        "postTime": 1562772113,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "\u4e00\u53e5\u8bdd\u9898\u89e3\uff1akruskal\u91cd\u6784\u6811\u7684dfs\u5e8f\u5efa\u7acb\u4e3b\u5e2d\u6811\u5c31\u597d\u4e86\u3002\n\n\u6309\u7167\u56f0\u96be\u503c\u4ece\u5c0f\u5230\u5927\u628akruskal\u91cd\u6784\u6811\u5efa\u51fa\u6765\uff0c\u90a3\u4e48\u4ece\u4e00\u4e2a\u70b9x\u51fa\u53d1\u53ea\u8d70\u56f0\u96be\u503c\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u8def\u5f84\u80fd\u5230\u8fbe\u7684\u6240\u6709\u70b9\u5c31\u662f\u91cd\u6784\u6811\u4e0a\u7684\u4e00\u68f5\u5305\u542bx\u7684\u5b50\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u4e0a\u500d\u589e\u627e\u5230\u8fd9\u4e2a\u5b50\u6811\u7684\u6839\uff0c\u90a3\u4e48\u95ee\u9898\u53d8\u6210\u4e86\u8be2\u95ee\u5b50\u6811\u91cc\u7684\u6240\u6709\u53f6\u8282\u70b9\u4e2d\u7684k\u5927\u503c\n\n\u6ce8\u610f\u5230\u4e00\u68f5\u5b50\u6811\u7684dfs\u5e8f\u8fde\u7eed\uff0c\u6240\u4ee5\u53ef\u4ee5\u628adfs\u5e8f\u6c42\u51fa\u6765 \u95ee\u9898\u8f6c\u5316\u4e3a\u533a\u95f4k\u5927\u503c\uff0c\u5efa\u7acb\u4e3b\u5e2d\u6811\u5373\u53ef\u3002\n\n\u4e3b\u5e2d\u6811\u61d2\u5f97\u79bb\u6563\u5316 \u53cd\u6b63\u90fd\u52a8\u6001\u5f00\u70b9\u4e86\n\n```cpp\n#include <cctype>\n#include <cstdio>\n#include <climits>\n#include <algorithm>\n\ntemplate <typename T> inline void read(T& t) {\n    int f = 0, c = getchar(); t = 0;\n    while (!isdigit(c)) f |= c == '-', c = getchar();\n    while (isdigit(c)) t = t * 10 + c - 48, c = getchar();\n    if (f) t = -t;\n}\n#if __cplusplus >= 201103L\ntemplate <typename T, typename... Args>\ninline void read(T& t, Args&... args) {\n    read(t); read(args...);\n}\n#else\ntemplate <typename T1, typename T2>\ninline void read(T1& t1, T2& t2) { read(t1); read(t2); }\ntemplate <typename T1, typename T2, typename T3>\ninline void read(T1& t1, T2& t2, T3& t3) { read(t1, t2); read(t3); }\ntemplate <typename T1, typename T2, typename T3, typename T4>\ninline void read(T1& t1, T2& t2, T3& t3, T4& t4) { read(t1, t2, t3); read(t4); }\ntemplate <typename T1, typename T2, typename T3, typename T4, typename T5>\ninline void read(T1& t1, T2& t2, T3& t3, T4& t4, T5& t5) { read(t1, t2, t3, t4); read(t5); }\n#endif\t// C++11\n\n#ifdef WIN32\n#define LLIO \"%I64d\"\n#else\n#define LLIO \"%lld\"\n#endif\t// WIN32 long long\n#define rep(I, A, B) for (int I = (A); I <= (B); ++I)\n#define rrep(I, A, B) for (int I = (A); I >= (B); --I)\n#define erep(I, X) for (int I = head[X]; I; I = next[I])\n\nconst int maxn = 1e5 + 207;\nconst int maxm = 5e5 + 207;\nconst int moren = maxn << 1;\nstruct Edge {\n    int x, y, w;\n    Edge(int f, int t, int ww = 0)\n        : x(f), y(t), w(ww) {}\n    Edge() : x(0), y(0), w(0) {}\n};\ninline bool operator<(const Edge& lhs, const Edge& rhs) {\n    return lhs.w < rhs.w;\n}\nEdge e[maxm];\nint height[maxn];\nint v[moren], head[moren], next[moren], value[moren], ind[moren], leaf[moren];\nint anc[moren][50], pos[moren], st[moren], ed[moren];\nint pa[moren];\nint n, m, q, xys, etot, index;\n\nint findf(int x) { return pa[x] == x ? x : (pa[x] = findf(pa[x])); }\n\ninline void ae(int x, int y) { v[++etot] = y; next[etot] = head[x]; head[x] = etot; }\n\nvoid dfs(int x) {\n    pos[++index] = x; st[x] = index;\n    for (int i = 1; 1 << i <= (n << 1); ++i)\n        anc[x][i] = anc[anc[x][i - 1]][i - 1];\n    erep(i, x) if (v[i] != anc[x][0]) {\n        anc[v[i]][0] = x;\n        dfs(v[i]);\n        leaf[x] += leaf[v[i]];\n    }\n    if (!leaf[x]) leaf[x] = 1;\n    ed[x] = index;\n}\n\nint sum[moren << 5], left[moren << 5], right[moren << 5], root[moren], tot;\nvoid insert(int &curr, int l, int r, int pos, int val) {\n    left[++tot] = left[curr]; right[tot] = right[curr];\n    sum[tot] = sum[curr] + val; curr = tot;\n    if (l == r) return;\n    int mid = (l + r) >> 1;\n    if (pos <= mid) insert(left[curr], l, mid, pos, val);\n    else insert(right[curr], mid + 1, r, pos, val);\n}\nint queryKth(int lt, int rt, int l, int r, int k) {\n    if (l == r) return l;\n    int mid = (l + r) >> 1;\n    int s = sum[right[rt]] - sum[right[lt]];\n    if (k <= s) return queryKth(right[lt], right[rt], mid + 1, r, k);\n    else return queryKth(left[lt], left[rt], l, mid, k - s);\n}\n\ninline int query(int x, int val, int k) {\n    rrep(i, 25, 0) if (anc[x][i] && value[anc[x][i]] <= val) x = anc[x][i];\n    if (leaf[x] < k) return -1;\n    int l = st[x], r = ed[x];\n    return queryKth(root[l - 1], root[r], 0, 1e9, k);\n}\n\nint main() {\n    read(n, m, q);\n    rep(i, 1, n) read(height[i]);\n    rep(i, 1, m) read(e[i].x, e[i].y, e[i].w);\n    std::sort(e + 1, e + m + 1);\n    rep(i, 1, (n << 1)) pa[i] = i;\n    xys = n;\n    rep(i, 1, m) {\n        int fx = findf(e[i].x), fy = findf(e[i].y);\n        if (fx != fy) {\n            value[++xys] = e[i].w;\n            pa[fx] = pa[fy] = xys;\n            ae(xys, fx); ae(xys, fy); ++ind[fx]; ++ind[fy];\n        }\n    }\n    rep(i, 1, xys) if (!ind[i]) dfs(i);\n    rep(i, 1, xys) {\n        root[i] = root[i - 1];\n        if (pos[i] <= n) insert(root[i], 0, 1e9, height[pos[i]], 1);\n    }\n    rep(i, 1, q) {\n        int x, val, k; read(x, val, k);\n        printf(\"%d\\n\", query(x, val, k));\n    }\n    return 0;\n}\n```",
        "postTime": 1537373061,
        "uid": 72071,
        "name": "GKxx",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "- $Kruskal$\u91cd\u6784\u6811\n- \u500d\u589e\n- \u4e3b\u5e2d\u6811\n\n\u505a\u4e00\u904d$Kruskal$\u91cd\u6784\u6811\n\n\u90a3\u4e48\u70b9\u6743\u4ece\u6df1\u5ea6\u5927\u7684\u5230\u5c0f\u7684\u5355\u8c03\u4e0d\u964d\n\n\u4ece$v$\u500d\u589e\u5230\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e$x$\u7684\u70b9\n\n\u6b64\u65f6\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u5c31\u662f$v$\u80fd\u5230\u8fbe\u7684\u6ee1\u8db3\u8981\u6c42\u7684\u70b9\u7684\u96c6\u5408\n\n\u4e3b\u5e2d\u6811\u7ef4\u62a4\u5b50\u6811\u7b2c$k$\u5927\u5373\u53ef.\n\n\u8fd9\u6837\u4e00\u4e2a\u7801\u9898\u5c45\u7136\u662f\u84dd\u8272\u7684\u2026\u2026",
        "postTime": 1536375857,
        "uid": 66915,
        "name": "Tyher",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "\u79bb\u7ebf\u663e\u7136\u5c31\u5f88\u7b80\u5355\u4e86\n\n\u628a\u8fb9\u6309\u6743\u503c\u6392\u5e8f\n\n\u8be2\u95ee\u6309x\u6392\u5e8f\n\n\u5199\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76+\u5e76\u67e5\u96c6\u7ef4\u62a4\u5c31\u884c\u4e86\n\n```cpp\n#include <map>\n#include <set>\n#include <stack>\n#include <cmath>\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int mxn=1e6+5,inf=1e9;\nint n,m,qq,cnt,tot,h[mxn],fa[mxn],hd[mxn],ans[mxn];\nint sz[mxn<<5],ls[mxn<<5],rs[mxn<<5],rt[mxn<<5];\n\ninline int read() {\n\tchar c=getchar(); int x=0,f=1;\n\twhile(c>'9'||c<'0') {if(c=='-') f=-1;c=getchar();}\n\twhile(c<='9'&&c>='0') {x=(x<<3)+(x<<1)+(c&15);c=getchar();}\n\treturn x*f;\n}\ninline void chkmax(int &x,int y) {if(x<y) x=y;}\ninline void chkmin(int &x,int y) {if(x>y) x=y;}\n\nstruct ed {\n\tint u,v,w;\n\tfriend bool operator < (ed a,ed b) {\n\t\treturn a.w<b.w;\n\t}\n}t[mxn<<1];\n\nstruct Q {\n\tint u,x,k,id;\n\tfriend bool operator < (Q a,Q b) {\n\t\treturn a.x<b.x;\n\t}\n}q[mxn];\n\nint find(int x) {\n    return fa[x]==x?x:fa[x]=find(fa[x]);\n}\n\nint merge(int u,int v,int l,int r) {\n\tif(!u||!v) return u+v;\n\tif(l==r) {\n\t\tsz[u]+=sz[v];\n\t\treturn u;\n\t}\n\tint mid=(l+r)>>1;\n\tls[u]=merge(ls[u],ls[v],l,mid); \n\trs[u]=merge(rs[u],rs[v],mid+1,r);\n\tsz[u]=sz[ls[u]]+sz[rs[u]];\n\treturn u;\n} \n\nvoid update(int l,int r,int val,int &p) {\n\tif(!p) p=++tot;\n\tif(l==r) {++sz[p]; return ;}\n\tint mid=(l+r)>>1;\n\tif(val<=mid) update(l,mid,val,ls[p]);\n\telse update(mid+1,r,val,rs[p]);\n\tsz[p]=sz[ls[p]]+sz[rs[p]];\n}\n\nint query(int l,int r,int k,int p) {\n\tif(l==r) return l;\n\tint mid=(l+r)>>1;\n\tif(k<=sz[ls[p]]) return query(l,mid,k,ls[p]);\n\telse return query(mid+1,r,k-sz[ls[p]],rs[p]);\n}\n\nvoid add(int x) {\n\tint a=find(t[x].u),b=find(t[x].v);\n\tif(a==b) return ;\n\tfa[a]=b; rt[b]=merge(rt[b],rt[a],1,inf);\n}\n\nint ask(int u,int k) {\n\tint a=find(u);\n\tif(sz[rt[a]]<k) return -1;\n\treturn query(1,inf,sz[rt[a]]-k+1,rt[a]);\n}\n\nint main()\n{\n\tn=read(); m=read(); qq=read(); \n\tfor(int i=1;i<=n;++i) fa[i]=i;\n\tfor(int i=1;i<=n;++i) h[i]=read(),update(1,inf,h[i],rt[i]);\n\tfor(int i=1;i<=m;++i) \n\t\tt[i].u=read(),t[i].v=read(),t[i].w=read();\n\tsort(t+1,t+m+1);\n\tfor(int i=1;i<=qq;++i) \n\t\tq[i].u=read(),q[i].x=read(),q[i].k=read(),q[i].id=i;\n\tsort(q+1,q+qq+1); int pos=1;\n\tfor(int i=1;i<=qq;++i) {\n\t\twhile(pos<=m&&t[pos].w<=q[i].x) add(pos),++pos;\n\t\tans[q[i].id]=ask(q[i].u,q[i].k);\n\t}\n\tfor(int i=1;i<=qq;++i) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```\n",
        "postTime": 1554043322,
        "uid": 109440,
        "name": "cloud_9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u8be2\u95ee\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\u53ea\u7ecf\u8fc7\u4e0d\u8d85\u8fc7\u6307\u5b9a\u8fb9\u6743\u7684\u8fb9\u80fd\u5230\u8fbe\u7684\u70b9\u7684\u7b2c$k$\u5927\u70b9\u6743\n\n\u8fd9\u9053\u9898\u53ef\u4ee5\u79bb\u7ebf\u4e5f\u53ef\u4ee5\u5728\u7ebf\u505a\n\nbzoj\u4e0a\u6709\u5f3a\u5236\u5728\u7ebf\u7684\u52a0\u5f3a\u7248\n\n\u79bb\u7ebf\u505a\u6cd5\u5c31\u662f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8054\u901a\u5757\uff0c\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u91c7\u7528\u5728\u7ebf\u505a\u6cd5:$Kruskal$\u91cd\u6784\u6811\n\n\u8fd9\u4e2a\u7b97\u6cd5\u662fNOI2018 D1T1\u7684\u89e3\u6cd5\n\n\u5982\u679c\u6709\u4e0d\u4f1a\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u5b66\u4e60\n\n\u8fd9\u9053\u9898\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n\u5148\u6784\u9020$Kruskal$\u91cd\u6784\u6811\n\n\u7528\u500d\u589e\u627e\u5230x\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u74f6\u9888\uff08\u8fb9\u6743\u4e0d\u8d85\u8fc7y\uff09\n\n\u7136\u540e\u67e5\u8be2\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u7b2ck\u5c0f\u503c\n\n\u7136\u540e\uff1f\u5c31\u6ca1\u4e86orzzzzzz\n\n```\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\n#define reg register\nusing namespace std;\nconst int N=2e5+5,M=5e5+5;\nstruct E\n{\n    int from,to,dis;\n    inline friend bool operator < (E a,E b) {return a.dis<b.dis;}\n}e[M];\nstruct node\n{\n    int to,nxt;\n}edge[N<<2];\nint n,m,T,num,head[N],fa[N],noww,val[N],cnt,L[N],R[N],tim,tot;\nint f[N][20],sum[N*30],ls[N*30],rs[N*30],a[N],w[N],t[N],rt[N];\ninline int read()\n{\n    int x=0,w=1;\n    char c=getchar();\n    while (!isdigit(c)&&c!='-') c=getchar();\n    if (c=='-') c=getchar(),w=-1;\n    while (isdigit(c))\n    {\n        x=(x<<1)+(x<<3)+c-'0';\n        c=getchar();\n    }\n    return x*w;\n}\ninline void add_edge(int from,int to)\n{\n    edge[++num]=(node){to,head[from]};\n    head[from]=num;\n}\nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\ninline void Kruskal()\n{\n    for (reg int i=1;i<=n;i++) fa[i]=i;\n    for (reg int i=1,tt=0;i<=m;i++)\n    {\n        int x=find(e[i].from),y=find(e[i].to);\n        if (x==y) continue;\n        val[++cnt]=e[i].dis;\n        add_edge(cnt,x); add_edge(cnt,y);\n        fa[x]=fa[y]=fa[cnt]=cnt;\n        if (++tt==n-1) break;\n    }\n}\nvoid dfs(int k,int fh)\n{\n    L[k]=++tim; a[tim]=k; f[k][0]=fh;\n    for (reg int i=1;i<=19;i++) f[k][i]=f[f[k][i-1]][i-1];\n    for (reg int i=head[k];i;i=edge[i].nxt)\n    {\n        int v=edge[i].to;\n        if (v!=fh) dfs(v,k);\n    }\n    R[k]=tim;\n}\nvoid insert(int &now,int pre,int l,int r,int x)\n{\n    now=++tot; sum[now]=sum[pre]+1;\n    ls[now]=ls[pre]; rs[now]=rs[pre];\n    if (l>=r) return; int mid=(l+r)>>1;\n    if (x<=mid) insert(ls[now],ls[now],l,mid,x);\n    else insert(rs[now],rs[now],mid+1,r,x);\n}\nint query(int now,int pre,int l,int r,int x)\n{\n    if (l>=r) return l;\n    int mid=(l+r)>>1,tmp=sum[ls[now]]-sum[ls[pre]];\n    if (x<=tmp) return query(ls[now],ls[pre],l,mid,x);\n    return query(rs[now],rs[pre],mid+1,r,x-tmp);\n}\nint main()\n{\n    cnt=n=read(),m=read(),T=read();\n    for (reg int i=1;i<=n;i++) w[i]=t[i]=read();\n    for (reg int i=1;i<=m;i++)\n      e[i].from=read(),e[i].to=read(),e[i].dis=read();\n    sort(t+1,t+n+1); sort(e+1,e+m+1);\n    noww=unique(t+1,t+n+1)-t-1;\n    for (reg int i=1;i<=n;i++) w[i]=lower_bound(t+1,t+noww+1,w[i])-t;\n    Kruskal(); dfs(cnt,cnt);\n    for (reg int i=1;i<=cnt;i++)\n      if (a[i]<=n) insert(rt[i],rt[i-1],1,noww,w[a[i]]); else rt[i]=rt[i-1];\n    while (T--)\n    {\n        int x=read(),y=read(),k=read(),ans;\n        for (reg int i=19;~i;i--) if (val[f[x][i]]<=y) x=f[x][i];\n        int res=sum[rt[R[x]]]-sum[rt[L[x]-1]];\n        if (res<k) ans=-1;\n        else ans=t[query(rt[R[x]],rt[L[x]-1],1,noww,res-k+1)];\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1536394044,
        "uid": 43471,
        "name": "Captain_Paul",
        "ccfLevel": 0,
        "title": "P4197  Peaks"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u4f60\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u70b9\u6709\u70b9\u6743\uff0c\u8fb9\u6709\u8fb9\u6743\uff0c\u6bcf\u6b21\u8be2\u95ee\u4ece$v$\u70b9\u51fa\u53d1\uff0c\u5728\u53ea\u8d70\u8fb9\u6743$\\le x$\u7684\u8fb9\u80fd\u5230\u8fbe\u7684\u70b9\u4e2d\uff0c\u8be2\u95ee\u70b9\u6743$kth$\u5927\u7684\u70b9\u7684\u70b9\u6743\n\n\u663e\u7136\uff0c\u8fb9\u6743$> x$\u7684\u8fb9\u5728\u89e3\u51b3\u6240\u6709$\\le x$\u7684\u8be2\u95ee\u65f6\u90fd\u662f\u6ca1\u6709\u7528\u5904\u7684\n\n\u6240\u4ee5\u8003\u8651\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u505a\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c$v$\u70b9\u7684\u7ebf\u6bb5\u6811\u8868\u793a$v$\u70b9\u80fd\u5230\u8fbe\u7684\u70b9\u7684\u6240\u6709\u70b9\u6743\uff08\u6743\u503c\u7ebf\u6bb5\u6811\uff09\uff0c\u7136\u540e\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u5019\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u4e00\u4e0b\u5c31\u89e3\u51b3\u4e86\n\n\u6309\u7406\u8bf4\u5e94\u8be5\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u6bcf\u6b21\u5408\u5e76\u7684\u65f6\u5019\u5efa\u7acb\u65b0\u8282\u70b9\u7684\uff0c\u4f46\u662f\u6211\u592a\u61d2\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u79bb\u7ebf\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(q\\ log(h))$\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nint n,m,q;\n\nnamespace IO{//\u5feb\u8bfb\u5feb\u8f93\u677f\u5b50 \n\tinline void read(int &x){\n\t\tx = 0;\n\t\tchar ch = getchar();\n\t\twhile(ch < '0' || ch > '9') ch = getchar();\n\t\twhile(ch >= '0' && ch <= '9'){\n\t\t\tx = x * 10 + ch - '0';\n\t\t\tch = getchar();\n\t\t}\n\t}\n\tvoid W(int x){\n\t\tif(x > 9) W(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n\tinline void write(int x){\n\t\tif(x < 0){\n\t\t\tputchar('-');\n\t\t\tW(-x);\n\t\t}else{\n\t\t\tW(x);\n\t\t}\n\t}\n};\n\t\nnamespace OFFLINE{\n\tstruct line{\n\t\tint a,b,c;\n\t}map[500005];//\u5b58\u56fe \n\tstruct NODE{\n\t\tint v,x,k,id;\n\t}Q[500005];//\u79bb\u7ebf\u8be2\u95ee \n\tint ans[500005];\n\tbool cmp1(line x,line y){\n\t\treturn x.c < y.c;\n\t}//\u6309\u56f0\u96be\u5ea6\u6392\u5e8f \n\tbool cmp2(NODE a,NODE b){\n\t\treturn a.x < b.x;\n\t}\n};\n\t\nnamespace BIN{//\u5e76\u67e5\u96c6 \n\tint bin[100005];\n\tvoid init(){\n\t\tfor(int i = 1;i <= n;i++){\n\t\t\tbin[i] = i;\n\t\t}\n\t}\n\tint F(int x){//\u6ce8\u610f\u8def\u5f84\u538b\u7f29\u63a7\u5236\u590d\u6742\u5ea6 \n\t\tif(bin[x] == x) return x;\n\t\treturn bin[x] = F(bin[x]);\n\t}\n\tvoid M(int x,int y){\n\t\tif(F(x) != F(y)) bin[F(x)] = F(y);\n\t}\n}\t\n\t\nnamespace segment{//\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u652f\u6301\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u7ebf\u6bb5\u6811\u5185\u4e8c\u5206 \n    int T[100005];//\u5b58\u6839\u7684\u7f16\u53f7 \n\tint cnt;\n\tstruct node{\n\t\tint l,r,val;//l\u5de6\u513f\u5b50\u7f16\u53f7\uff0cr\u53f3\u513f\u5b50\u7f16\u53f7 \n\t}tree[100005 << 5];//log(10 ^ 9)\u5dee\u4e0d\u591a1 << 5 \n\tint upload(int l,int r,int id){//\u8fd4\u56de\u503c\u662f\u8282\u70b9\u7f16\u53f7 \n\t\tint rt = ++cnt;\n\t\ttree[rt].val++;\n\t\tif(l == r){\t\n\t\t\treturn rt;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tif(id <= mid){\n\t\t\ttree[rt].l = upload(l,mid,id);\n\t\t}else{\n\t\t\ttree[rt].r = upload(mid+1,r,id);\n\t\t}\n\t\treturn rt;\n\t}\n\tint MERGE(int x,int y,int l,int r){\n\t\tif(x == 0) return y;//\u8fd9\u6837\u526a\u679d\u540e\u590d\u6742\u5ea6\u6b63\u786e \n\t\tif(y == 0) return x;\n\t\ttree[x].val += tree[y].val;//\u5408\u5e76\u8282\u70b9\u4fe1\u606f\uff0c\u8fd9\u6837\u76f4\u63a5\u5408\u5e76\u4e0d\u7528\u518d\u591a\u6d88\u8017\u7a7a\u95f4\uff08\u5176\u5b9e\u5c31\u662f\u61d2\u5f97\u53ef\u6301\u4e45\u5316\uff09 \n\t\tif(l == r) return x;\n\t\tint mid = l + r >> 1;\n\t\ttree[x].l = MERGE(tree[x].l,tree[y].l,l,mid);//\u5206\u522b\u5408\u5e76 \n\t\ttree[x].r = MERGE(tree[x].r,tree[y].r,mid+1,r);\n\t\treturn x;\n\t}\n\tint kth(int rt,int l,int r,int k){\n\t\tif(l == r) return l;\n\t\tint mid = l + r >> 1;\n\t\tif(tree[tree[rt].r].val >= k){//kth\u5927\u843d\u5728\u53f3\u8fb9 \n\t\t    return kth(tree[rt].r,mid+1,r,k);\n\t\t}else{//\u843d\u5728\u5de6\u8fb9 \n\t\t\treturn kth(tree[rt].l,l,mid,k - tree[tree[rt].r].val);\n\t\t}\n\t}\n};\t\nusing namespace IO;\nusing namespace OFFLINE;\nusing namespace BIN;\nusing namespace segment;\n\nint main(){\n\tint tmp,now = 1;//now\u662f\u5f53\u524d\u5408\u5e76\u5230\u7684\u8fb9 \n\tread(n),read(m),read(q);\n\tinit();\n\tfor(int i = 1;i <= n;i++){\n\t\tread(tmp);\n\t\tT[i] = upload(-1,1000000000,tmp);\n\t}\n\tfor(int i = 1;i <= m;i++){\n\t\tread(map[i].a),read(map[i].b),read(map[i].c);\n\t}\n\tsort(map+1,map+m+1,cmp1);\n\tfor(int i = 1;i <= q;i++){\n\t\tread(Q[i].v),read(Q[i].x),read(Q[i].k);\n\t\tQ[i].id = i;\n\t}\n\tsort(Q+1,Q+q+1,cmp2);\n\tfor(int i = 1;i <= q;i++){\n\t\twhile(map[now].c <= Q[i].x && now <= m){//\u6ce8\u610fnow <= m \n\t\t\tint X = F(map[now].a),Y = F(map[now].b);//\u6ce8\u610f\u627e\u5230\u8054\u901a\u5757\u7684\u6839\u518d\u505a\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u7ed9\u6bcf\u4e2a\u8054\u901a\u5757\u7684\u70b9\u90fd\u5408\u5e76\u4e00\u6b21 \n\t\t\tif(X != Y){\n\t\t\t\tT[X] = MERGE(T[X],T[Y],-1,1000000000);\n\t\t\t\tT[Y] = T[X];\n\t\t\t\tM(X,Y);\n\t\t\t}\n\t\t\tnow++;\n\t\t}\n\t\tans[Q[i].id] = kth(T[F(Q[i].v)],-1,1000000000,Q[i].k);//\u53ea\u6709\u8054\u901a\u5757\u7684\u6839\u5b58\u4e86\u6b63\u786e\u7684\u7ebf\u6bb5\u6811 \n\t}\n\tfor(int i = 1;i <= q;i++){\n\t\twrite(ans[i]);\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1579170979,
        "uid": 49776,
        "name": "chenxinyang2006",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "\u5495\u5495\u4e86\u90a3\u4e48\u591a\u6b21\u4e4b\u540e\u518d\u6765\u770b\u8fd9\u9053\u9898\u2026\u2026\uff08\u4e4b\u524d\u770b\u9898\u89e3\u90fd\u662f$Kruskal$\u91cd\u6784\u6811\u628a\u6211\u5413\u5230\u4e86\u5c31\u653e\u5f03\u4e86\uff09\uff0c\u7ec8\u4e8e\u9760\u81ea\u5df1\u7684\u80fd\u529b\u505a\u51fa\u6765\u5566\uff08\u6492\u82b1\uff09\uff0c\u987a\u4fbf\u4f5c\u4e3a\u77ed\u65f6\u95f4\u56de\u5f52\u540e\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u6765\u7559\u4e2a\u7eaa\u5ff5\u3002\n \n\u4e4d\u4e00\u770b\u8fd9\u9053\u9898\u770b\u8d77\u6765\u5f88\u9ebb\u70e6\u7684\u6837\u5b50\u2026\u2026\u4f46\u4e00\u822c\u8fd9\u79cd\u53ef\u4ee5\u79bb\u7ebf\u5e76\u4e14\u8ddf\u7b2c$k$\u5927\u76f8\u5173\u7684\u9898\u76ee\uff0c\u5f53\u7136\u8fd8\u662f\u9009\u62e9\u79bb\u7ebf\u4e86\uff01\n\n\u6211\u4eec\u5c06\u8be2\u95ee\u6309$x$\u7684\u5927\u5c0f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u987a\u4fbf\u628a\u8fb9\u6309\u7167\u56f0\u96be\u503c$c$\u4e5f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u8fd9\u6837\u6211\u4eec\u6bcf\u8fdb\u884c\u4e00\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8be5\u8be2\u95ee\u9700\u8981\u7528\u5230\u7684\u8fb9\u52a0\u8fdb\u53bb\u3002\u7136\u540e\u5c31\u662f\u8003\u8651\u600e\u4e48\u628a\u8fb9\u52a0\u8fdb\u53bb\u4e86\u3002\n\n\u5b9e\u9645\u4e0a\u628a\u8fb9$E(u,v)$\u52a0\u5230\u56fe\u4e2d\u4e0e\u5c06$u$\u548c$v$\u6240\u5728\u8054\u901a\u5757\u5408\u5e76\u662f\u4e00\u4e2a\u9053\u7406\u3002\u6240\u4ee5\u6211\u4eec\u63a5\u4e0b\u6765\u5c31\u8003\u8651\u5408\u5e76\u7684\u95ee\u9898\u3002\n\n\u9996\u5148\u8003\u8651\u7ef4\u62a4\u8fde\u901a\u6027\u3002\u8fde\u901a\u6027\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u5e76\u67e5\u96c6\uff0c\u4e8e\u662f\u83dc\u9e21$hsy$\u9009\u62e9\u7565\u8fc7\u8fd9\u4e00\u6bb5$Q\\omega Q$\n\n\u7136\u540e\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u7b2c$k$\u5927\u3002\u7531\u4e8e\u5728\u540c\u4e00\u4e2a\u8054\u901a\u5757\u5185\u7684\u662f\u53ef\u4ee5\u4e92\u76f8\u5230\u8fbe\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5b9e\u9645\u4e0a\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8054\u901a\u5757\u4e2d\u7684\u4fe1\u606f\u5b58\u5728\u5e76\u67e5\u96c6\u7684\u6839\u8282\u70b9\u4e2d\u3002\u7136\u540e\u6211\u4eec\u9700\u8981\u9009\u62e9\u4e00\u79cd\u53ef\u4ee5\u652f\u6301\u5feb\u901f\u5408\u5e76\u3001\u5feb\u901f\u6c42\u7b2c$k$\u5927\u7684\u7ed3\u6784\u3002\n\n\u6709\u4eba\u4f1a\u8bf4\uff0c\u8fd9\u4e0d\u662f\u5e73\u8861\u6811\u88f8\u9898\u5417$Q\\omega Q$\uff0c\u5b9e\u9645\u4e0a\u5e73\u8861\u6811\u7684\u5408\u5e76\u9700\u8981\u7528\u5230\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u591a\u4e00\u53ea$log$\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\uff08\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u5408\u5e76\u3001\u7ebf\u6bb5\u6811\u6c42\u7b2c$k$\u5927\u7684\u53ef\u4ee5\u53bb\u627e\u4e00\u4e9b\u6a21\u677f$QwQ$\uff09\n\n\u6709\u4e86\u7ebf\u6bb5\u6811\u5408\u5e76\u548c\u5e76\u67e5\u96c6\u4ee5\u53ca\u79bb\u7ebf\u64cd\u4f5c\u4e4b\u540e\uff0c\u8fd9\u9053\u9898\u5c31\u53d8\u5f97\u975e\u5e38\u7b80\u5355\u5566$QwQ!$\n\n\u603b\u7ed3\u4e00\u6ce2\uff1a\n\n$1.$ \u5c06\u8be2\u95ee\u548c\u8fb9\u6309\u7167\u67d0\u4e00\u4e2a\u5143\u7d20\u6392\u5e8f\u3002\n\n$2.$ \u4f9d\u6b21\u5904\u7406\u8be2\u95ee\uff0c\u5904\u7406\u6bcf\u4e00\u4e2a\u95ee\u9898\u4e4b\u524d\uff0c\u5229\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u4ee5\u53ca\u5e76\u67e5\u96c6\u5c06\u9700\u8981\u7528\u5230\u7684\u8fb9\u52a0\u5165\u5230\u56fe\u4e2d\u3002\n\n$3.$ \u5229\u7528\u7ebf\u6bb5\u6811\u6c42\u7b2c$k$\u5927\u3002\n\n$4.$ \u5b8c\u7ed3\uff01$QwQ$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e6;\nint n,m,Q,fa[N],rt[N],len,h[N],to[N],ans[N];\n\nstruct In\n{\n\tint val,pos;\n\tbool operator <(const In &x) const {return val<x.val;}\n} u[N];\n\nstruct Edge\n{\n\tint u,v,h;\n\tbool operator <(const Edge &x) const {return h<x.h;}\n} e[N];\n\nstruct Que\n{\n\tint v,x,k,id;\n\tbool operator <(const Que &p) const {return x<p.x;}\n} q[N];\n\nstruct node\n{\n\tint lson,rson,sum;\n} t[N*10];\n\nvoid update(int &i,int l,int r,int x)\n{\n\tif (!i) i=++len;t[i].sum++;\n\tif (l==r) return;\n\tint mid=(l+r)>>1;\n\tif (mid>=x) update(t[i].lson,l,mid,x);\n\t\telse update(t[i].rson,mid+1,r,x);\n}\n\nint getfa(int x)\n{\n\tif (x==fa[x]) return x;\n\treturn fa[x]=getfa(fa[x]);\n}\n\nint merge(int r1,int r2)\n{\n\tif (!r1||!r2) return r1|r2;\n\tt[r1].sum+=t[r2].sum;\n\tt[r1].lson=merge(t[r1].lson,t[r2].lson);\n\tt[r1].rson=merge(t[r1].rson,t[r2].rson);\n\treturn r1;\n}\n\nint query(int i,int l,int r,int k)\n{\n\tif (l==r) if (t[i].sum<k) return -1;else return to[l];\n\tint mid=(l+r)>>1;\n\tif (t[t[i].rson].sum>=k) return query(t[i].rson,mid+1,r,k);\n\treturn query(t[i].lson,l,mid,k-t[t[i].rson].sum);\n}\n\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&Q);\n\tfor (int i=1;i<=n;i++) scanf(\"%d\",&u[i].val),u[i].pos=i;\n\tsort(u+1,u+n+1);\n\tfor (int i=1;i<=n;i++)\n\t\tif (u[i].val==u[i-1].val) h[u[i].pos]=h[u[i-1].pos];\n\t\t\telse h[u[i].pos]=h[u[i-1].pos]+1,to[h[u[i].pos]]=u[i].val;\n\tfor (int i=1;i<=n;i++) fa[i]=i,update(rt[i],1,n,h[i]);\n\tfor (int i=1;i<=m;i++) scanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].h);\n\tfor (int i=1;i<=Q;i++) scanf(\"%d%d%d\",&q[i].v,&q[i].x,&q[i].k),q[i].id=i;\n\tsort(q+1,q+Q+1);sort(e+1,e+m+1);\n\tint now=1;\n\tfor (int i=1;i<=Q;i++)\n\t{\n\t\twhile (now<=m&&e[now].h<=q[i].x)\n\t\t{\n\t\t\tint u=e[now].u,v=e[now].v,f1=getfa(u),f2=getfa(v);\n\t\t\tif (f1!=f2) fa[f1]=f2,rt[f2]=merge(rt[f2],rt[f1]);\n\t\t\t++now;\n\t\t}\n\t\tans[q[i].id]=query(rt[getfa(q[i].v)],1,n,q[i].k);\n\t}\n\tfor (int i=1;i<=Q;i++) printf(\"%d\\n\",ans[i]);\n}\n```\n\n\n\n",
        "postTime": 1570533415,
        "uid": 29575,
        "name": "Holy_Push",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "[luogu P4197 Peaks](https://www.luogu.org/problem/P4197)\n# \u9898\u76ee\u5927\u610f\u5f88\u6e05\u695a\u4e86\uff0c\u5c31\u4e0d\u89e3\u91ca\u4e86\n\u7b2c\u4e00\u773ckruskal\u91cd\u6784\u6811 + \u4e3b\u5e2d\u6811\u6bd2\u7624\u7801\u519c\u9898\n\n\u7136\u540e\u53d1\u73b0\u8c8c\u4f3c\u53ef\u4ee5\u79bb\u7ebf\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u7ebf\u6bb5\u6811\u5408\u5e76 + \u5e76\u67e5\u96c6\u4e86\n\n\n\u5177\u4f53\u601d\u8def\u5c31\u662f\n\n\u5148\u628a\u6240\u6709\u7684\u8fb9\u6309\u7167\u8fb9\u6743\u6392\u5e8f\uff0c\u7136\u540e\u518d\u628a\u8be2\u95ee\u6309\u7167x\u6392\u5e8f\uff08\u4ece\u5c0f\u5230\u5927)\n\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\n\n\u8be2\u95ee\u65f6 \u5982\u679c\u5f53\u524d\u8fb9\u8fb9\u6743\u5c0f\u4e8ex\u5c31\u628au\uff0cv\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u4e00\u4e0b\uff08\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff09\n\n\u7136\u540e\u5c31\u5f88\u6109\u5feb\u4e86\n\n\u5177\u4f53\u770b\u4ee3\u7801\u5427\n\ncode:\n```cpp\n#include<bits/stdc++.h>\n#define N 1000005\nusing namespace std;\nstruct A{int u, v, c;} a[N];\nint cmp(A x, A y){\n\treturn x.c < y.c;\n}\nstruct Q{int u, x, k, id;} q[N];\nint cmp1(Q x, Q y){\n\treturn x.x < y.x;\n}\nint fa[N];\nint get(int x){\n\treturn x == fa[x]? x:(fa[x] = get(fa[x]));\n}\nint size[N << 5], ch[N << 5][2], tot;\nvoid insert(int &rt, int l, int r, int x){\n\tif(!rt) rt = ++ tot;\n\tsize[rt] ++;\n\tif(l == r) return;\n\tint mid = (l + r) >> 1;\n\tif(x <= mid) insert(ch[rt][0], l, mid, x);\n\telse insert(ch[rt][1], mid + 1, r, x);\n}\nint merge(int x, int y){\n\tif(!x && !y) return 0;\n\tif(!x) return y;\n\tif(!y) return x;\n\tsize[x] += size[y];\n\tch[x][0] = merge(ch[x][0], ch[y][0]);\n\tch[x][1] = merge(ch[x][1], ch[y][1]);\n\treturn x;\n}\nint find(int rt, int l, int r, int k){\n\tif(l == r) return l;\n\tint mid = (l + r) >> 1;\n\tif(size[ch[rt][0]] >= k) return find(ch[rt][0], l, mid, k);\n\telse return find(ch[rt][1], mid + 1, r, k - size[ch[rt][0]]);\n}\nint n, m, Q, h[N], b[N], root[N], ANS[N];\nint main(){\n\tscanf(\"%d%d%d\", &n, &m, &Q);\n\tfor(int i = 1; i <= n; i ++) scanf(\"%d\", &h[i]), b[i] = h[i];\n\tsort(b + 1, b + 1 + n);\n\tfor(int i = 1; i <= n; i ++){\n\t\tint pos = lower_bound(b + 1, b + 1 + n, h[i]) - b; //\u79bb\u6563\u5316\n\t\tinsert(root[i], 1, n, pos); fa[i] = i;//\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\n\t}\n\tfor(int i = 1; i <= m; i ++) scanf(\"%d%d%d\", &a[i].u, &a[i].v, &a[i].c);\n\tfor(int i = 1; i <= Q; i ++) scanf(\"%d%d%d\", &q[i].u, &q[i].x, &q[i].k), q[i].id = i;\n\tsort(a + 1, a + 1 + m, cmp);\n\tsort(q + 1, q + 1 + Q, cmp1);//\u628a\u8fb9\u548c\u8fb9\u6743\u79bb\u7ebf\n\tint pos = 0;\n\tfor(int i = 1; i <= Q; i ++){\n\t\twhile(a[pos + 1].c <= q[i].x && pos < m){//\u628a\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9\u63d2\u8fdb\u53bb\n\t\t\tint x = get(a[pos + 1].u), y = get(a[pos + 1].v);//\u627eba ba\n\t\t\tif(x != y){//\u5982\u679c\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\n\t\t\t\tmerge(root[x], root[y]);//\u7ebf\u6bb5\u6811\u5408\u5e76\n\t\t\t\tfa[y] = x;\n\t\t\t}\n\t\t\tpos ++;\n\t\t}\n\t\tint x = get(q[i].u);\n\t\tif(size[root[x]] < q[i].k) ANS[q[i].id] = -1;\n\t\telse ANS[q[i].id] = b[find(root[x], 1, n, size[root[x]] - q[i].k + 1)];//\u56e0\u4e3a\u65f6\u7b2ck\u5927\uff0c\u6240\u4ee5\u8981\u53d8\u4e00\u4e0b\n\t}\n\tfor(int i = 1; i <= Q; i ++) printf(\"%d\\n\", ANS[i]);//\u8f93\u51fa\n\treturn 0;\n}\n```\n\u7adf\u71361A\uff0c\u597d\u611f\u52a8QWQ\n\n~~\u6b63\u5e38~~\n\n\u79bb\u7ebf\u662f\u4e2a\u597d\u4e1c\u897f",
        "postTime": 1568339421,
        "uid": 31656,
        "name": "lomit",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "# \u9898\u76ee\u94fe\u63a5\n[\u3010\u6d1b\u8c37\u3011](https://www.luogu.org/problemnew/show/P4197)   \n\u3010BZOJ\u3011\u6ca1\u6709\u6743\u9650\u53f7\u5624\u5624\u5624\u3002\u9898\u53f7\uff1a3545  \n# \u9898\u89e3\n\u7a9d\u4e0d\u4f1a\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\u600e\u4e48\u529e\uff1f\uff1f\uff1f  \n\u53ef\u4ee5\u79bb\u7ebf\u4e71\u641e\u3002  \n\u6211\u4eec\u5c06\u6240\u6709\u7684\u64cd\u4f5c\u5168\u90fd\u5b58\u4e0b\u6765\u3002  \n\u4e3a\u4e86\u89e3\u51b3\u5c0f\u4e8e\u7b49\u4e8e$x$\u7684\u64cd\u4f5c\uff0c\u90a3\u4e48\u6211\u4eec\u6309\u7167\u957f\u5ea6\u6765\u6392\u4e00\u4e2a\u5e8f\u3002  \n\u5982\u679c\u8be2\u95ee\u548c\u52a0\u8fb9\u957f\u5ea6\u76f8\u540c\uff0c\u8fd9\u52a0\u8fb9\u4f18\u5148\u3002  \n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u8fdb\u884c\u6743\u503c\u7ebf\u6bb5\u6811\u3002   \n\u6743\u503c\u7ebf\u6bb5\u6811\u89e3\u51b3$k$\u5927\u7684\u95ee\u9898\u3002  \n\u6bcf\u4e00\u6b21\u5408\u5e76\uff0c\u5e76\u67e5\u96c6\u5224\u8054\u901a\uff0c\u7ebf\u6bb5\u6811\u66b4\u529b\u5408\u5e76\u3002  \n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\u3002\n\n# \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nnamespace IOstream {\n\t#define gc getchar\n\ttemplate <typename T>\n\tinline void read(T &x) {\n\t\tx = 0; T fl = 1; char c = 0;\n\t\tfor (; c < '0' || c > '9'; c = gc())\n\t\t\tif (c == '-') fl = -1;\n\t\tfor (; c >= '0' && c <= '9'; c = gc())\n\t\t\tx = (x << 1) + (x << 3) + (c ^ 48);\n\t\tx *= fl;\n\t}\n\t#undef gc\n} using namespace IOstream;\nint n, m, q;\nconst int N = 100000 + 5; \nint val[N], id[N];\nnamespace seg {\n\t#define ls(x) tr[x].lc\n\t#define rs(x) tr[x].rc\n\tstruct node {\n\t\tint lc, rc, s; node() { lc = rc = s = 0; }\n\t} tr[N * 50];\n\tint tot = 0; \n\tvoid upd(int &k, int l, int r, int val) {\n\t\tif (!k) k = ++ tot; \n\t\ttr[k].s = 1; \n\t\tif (l == r) return; \n\t\tint mid = (l + r) >> 1;\n\t\tif (val <= mid) upd(ls(k), l, mid, val);\n\t\telse upd(rs(k), mid + 1, r, val);\n\t}\n\tint kth(int k, int l, int r, int rk) {\n\t\tif (l == r) return l;\n\t\tint mid = (l + r) >> 1;\n\t\tif (rk <= tr[ls(k)].s) return kth(ls(k), l, mid, rk);\n\t\telse return kth(rs(k), mid + 1, r, rk - tr[ls(k)].s);\n\t}\n\tint merge(int x, int y) {\n\t\tif (!x || !y) return x + y;\n\t\tif (!ls(x) && !rs(x)) { tr[x].s += tr[y].s; return x; }\n\t\tls(x) = merge(ls(x), ls(y));\n\t\trs(x) = merge(rs(x), rs(y)); \n\t\ttr[x].s = tr[ls(x)].s + tr[rs(x)].s; \n\t\treturn x; \n\t} \n}\nstruct ASK {\n\tint a, b, c, d, id;\n} Q[N * 10];\nint fa[N], rt[N], ans[5 * N];\nbool cmp_ASK(ASK A, ASK B) {\n\treturn A.c == B.c ? A.d < B.d : A.c < B.c; \n}\nint gf(int x) {\n\treturn x == fa[x] ? fa[x] : fa[x] = gf(fa[x]); \n}\nsigned main() {\n\tread(n); read(m); read(q); \n\tfor (int i = 1; i <= n; i ++) read(val[i]), id[i] = val[i], fa[i] = i; \n\tsort(id + 1, id + 1 + n);\n\tfor (int i = 1; i <= n; i ++) \n\t\tval[i] = lower_bound(id + 1, id + 1 + n, val[i]) - id;\n\tfor (int i = 1; i <= m; i ++) \n\t\tread(Q[i].a), read(Q[i].b), read(Q[i].c), Q[i].d = 0;\n\tfor (int i = m + 1; i <= m + q; i ++) \n\t\tread(Q[i].a), read(Q[i].c), read(Q[i].b), Q[i].d = 1, Q[i].id = i - m;\n\tsort(Q + 1, Q + 1 + m + q, cmp_ASK);\n\tfor (int i = 1; i <= n; i ++) seg::upd(rt[i], 1, n, val[i]);\n\tfor (int i = 1; i <= m + q; i ++) {\n\t\tif (!Q[i].d) {\n\t\t\tint x = gf(Q[i].a), y = gf(Q[i].b);\n\t\t\tif (x != y) {\n\t\t\t\tfa[x] = y; \n\t\t\t\trt[y] = seg::merge(rt[x], rt[y]);\n\t\t\t} \n\t\t} else {\n\t\t\tint x = gf(Q[i].a);\n\t\t\tif (seg::tr[rt[x]].s < Q[i].b) ans[Q[i].id] = -1;\n\t\t\telse ans[Q[i].id] = id[seg::kth(rt[x], 1, n, seg::tr[rt[x]].s - Q[i].b + 1)]; \n\t\t}\n\t}\n\tfor (int i = 1; i <= q; i ++) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1556456358,
        "uid": 35567,
        "name": "Ayers",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "[\u6233\u6211\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8cqwq](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p4197-peaks/)\n\n---\n# Solution\n\u8fd9\u9898\u7684\u786e\u662f\u53ef\u4ee5\u7528\u5e93\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811+\u4e3b\u5e2d\u6811\u6765\u641e\uff0c~~\u4f46\u662f\u672c\u849f\u84bb\u592a\u83dc\u4e86\u5e76\u4e0d\u4f1a~~\uff0c\u56e0\u6b64\u53ea\u80fd\u7ed9\u5927\u5bb6\u8bb2\u8bb2\u79bb\u7ebf+splay\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u641e\u6cd5\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u8003\u8651\u628a\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\u5e76\u6309\u9650\u5236\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u8fb9\u4e00\u6761\u4e00\u6761\u63d2\u5165\u5230\u56fe\u91cc\u9762\u53bb\uff0c\u76f4\u5230\u67d0\u4e2a\u8be2\u95ee\u7684\u9650\u5236\u3002\u8fd9\u6837\u5b50\uff0c\u95ee\u9898\u5c31\u53d8\u4e3a\u4e86\u8be2\u95ee\u67d0\u4e00\u4e2a\u8fde\u901a\u5757\u7684K\u5c0f\u503c\uff0c\u8fde\u901a\u5757\u53ef\u4ee5\u5408\u5e76\u3002\n\n\u8fd9\u4e2a\u95ee\u9898\u5c31\u80a5\u80a0\u7b80\u5355\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\u7ed3\u6784\u6765\u5904\u7406\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\uff0csplay\u542f\u53d1\u5f0f\u5408\u5e76\u90fd\u53ef\u4ee5\u3002\n\n\u8003\u8651\u5230\u6bcf\u4e2a\u70b9\u671f\u671b\u52a0\u5165$logn$\u6b21\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nlogn)$\n\n---\n# Code\n**\u6211\u8fd9\u9898\u56e0\u4e3aTLE\u8c03\u4e86\u5f88\u4e45\uff0c\u539f\u56e0\u662f\u6211\u5728\u67e5\u8be2\u7684\u65f6\u5019\u6ca1\u6709splay\uff0c\u5bfc\u81f4\u52bf\u80fd\u5206\u6790\u5931\u6548\uff0c\u8bf7\u5404\u4f4d\u8bfb\u8005\u5f15\u4ee5\u4e3a\u6212**\n```cpp\n//Luogu P4197 Peaks\n//Mar,7th,2019\n//splay\u542f\u53d1\u5f0f\u5408\u5e76\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nlong long read()\n{\n\tlong long x=0,f=1; char c=getchar();\n\twhile(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n\twhile(isdigit(c)){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int N=100000+100;\nconst int M=50*N;\nstruct SPLAY\n{\n\t#define root son[r][1]\n\tint son[M][2],size[M],cnt[M],fa[M],w[M],to,toUse[M],top;\n\tinline void update(int x)\n\t{\n\t\tsize[x]=size[son[x][0]]+size[son[x][1]]+cnt[x];\n\t}\n\tinline void rotate(int x,int type)\n\t{\n\t\tint y=fa[x],z=fa[y];\n\t\tfa[x]=z,son[z][y==son[z][1]]=x;\n\t\tfa[son[x][type]]=y,son[y][!type]=son[x][type];\n\t\tfa[y]=x,son[x][type]=y;\n\t\tupdate(y),update(x);\n\t}\n\tvoid splay(int x,int to)\n\t{\n\t\twhile(fa[x]!=to)\n\t\t{\n\t\t\tif(fa[fa[x]]!=to and x==son[fa[x]][fa[x]==son[fa[fa[x]]][1]])\n\t\t\t\trotate(fa[x],x==son[fa[x]][0]),\n\t\t\t\trotate(x,x==son[fa[x]][0]);\n\t\t\telse\n\t\t\t\trotate(x,x==son[fa[x]][0]);\n\t\t}\n\t}\n\tint newNode()\n\t{\n\t\tif(top!=0)\n\t\t{\n\t\t\tson[toUse[top]][0]=son[toUse[top]][1]=0;\n\t\t\tsize[toUse[top]]=fa[toUse[top]]=cnt[toUse[top]]=w[toUse[top]]=0;\n\t\t\treturn toUse[top--];\n\t\t}\n\t\treturn ++to;\n\t}\n\tvoid Insert(int num,int r)\n\t{\n\t\tif(root==0)\n\t\t{\n\t\t\troot=newNode(),fa[root]=r;\n\t\t\tw[root]=num,cnt[root]=1;\n\t\t\tupdate(root);\n\t\t\treturn;\n\t\t}\n\t\tint now=root,last=r;\n\t\twhile(now!=0)\n\t\t{\n\t\t\tif(w[now]==num)\n\t\t\t{\n\t\t\t\tcnt[now]++,update(now);\n\t\t\t\tsplay(now,r);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlast=now,now=son[now][num>w[now]];\n\t\t}\n\t\tnow=newNode();\n\t\tfa[now]=last,son[last][num>w[last]]=now;\n\t\tw[now]=num,cnt[now]=1,update(now);\n\t\tsplay(now,r);\n\t}\n\tint Query(int now,int r,int K)\n\t{\n\t\tif(size[son[now][1]]>=K)\n\t\t\treturn Query(son[now][1],r,K);\n\t\tK-=(cnt[now]+size[son[now][1]]);\n\t\tif(K<=0)\n\t\t{\n\t\t\tsplay(now,r);\n\t\t\treturn w[now]; \n\t\t}\n\t\treturn Query(son[now][0],r,K);\n\t}\n\tvoid dfs(int now,int r)\n\t{\n\t\tif(now==0) return;\n\t\tfor(int i=1;i<=cnt[now];i++)//\u6709\u53ef\u80fd\u4e00\u4e2a\u70b9\u4e0a\u6709\u591a\u4e2a\u6570\u5b57\n\t\t\tInsert(w[now],r);\n\t\tdfs(son[now][0],r);\n\t\tdfs(son[now][1],r);\n\t\ttoUse[++top]=now;\n\t}\n\t#undef root\n}splay;\nint fa[N],size[N],root[N];\nint FindFather(int x)\n{\n\tif(fa[x]==0) return x;\n\treturn fa[x]=FindFather(fa[x]);\n}\nvoid Merge(int x,int y)\n{\n\tif(FindFather(x)==FindFather(y)) return;\n\tif(size[FindFather(x)]>size[FindFather(y)]) swap(x,y);\n\tsplay.dfs(splay.son[root[FindFather(x)]][1],root[FindFather(y)]);\n\t//cerr<<x<<\" \"<<y<<\" \"<<size[FindFather(x)]<<\" \"<<size[FindFather(y)]<<\" \"<<splay.size[splay.son[root[FindFather(y)]][1]]<<endl;\n\tsize[FindFather(y)]+=size[FindFather(x)];\n\tfa[FindFather(x)]=FindFather(y);\n}\nstruct edge\n{\n\tint s,t,w;\n\tfriend bool operator < (edge x,edge y)\n\t{\n\t\treturn x.w<y.w;\n\t}\n}e[M];\nstruct Query\n{\n\tint x,K,w,ans,no;\n\tfriend bool operator < (Query a,Query b)\n\t{\n\t\treturn a.w<b.w;\n\t}\n}query[M];\nbool cmp(Query a,Query b)\n{\n\treturn a.no<b.no;\n}\nint Ask(int x,int K)\n{\n\tif(size[FindFather(x)]<K) return -1;\n\treturn splay.Query(splay.son[root[FindFather(x)]][1],root[FindFather(x)],K);\n}\nint n,m,q,h[N];\nint main()\n{\n\tint t=clock();\n\tfreopen(\"4197.in\",\"r\",stdin);\n\tfreopen(\"4197.out\",\"w\",stdout);\n\t\n\tn=read(),m=read(),q=read();\n\tfor(int i=1;i<=n;i++)\n\t\th[i]=read();\n\t\n\tfor(int i=1;i<=n;i++)\n\t\troot[i]=splay.newNode(),size[i]=1;\n\tfor(int i=1;i<=n;i++)\n\t\tsplay.Insert(h[i],root[i]);\n\tfor(int i=1;i<=m;i++)\n\t\te[i].s=read(),e[i].t=read(),e[i].w=read();\n\tfor(int i=1;i<=q;i++)\n\t\tquery[i].x=read(),query[i].w=read(),query[i].K=read(),query[i].no=i;\n\t\t\n\tsort(e+1,e+1+m);\n\tsort(query+1,query+1+q);\n\t\n\tint w_to=1;\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\t//cerr<<i<<endl;\n\t\tfor(;e[w_to].w<=query[i].w and w_to<=m;w_to++)\n\t\t\tMerge(e[w_to].s,e[w_to].t);\n\t\tquery[i].ans=Ask(query[i].x,query[i].K);\n\t}\n\t\n\tsort(query+1,query+1+q,cmp);\n\tfor(int i=1;i<=q;i++)\n\t\tprintf(\"%d\\n\",query[i].ans);\n\tcerr<<clock()-t<<endl;\n\treturn 0;\n}\n\n```\n\n\n\n\n",
        "postTime": 1552307006,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "[$\\texttt{cnblogs}$](https://www.cnblogs.com/FibonacciHeap/articles/10501667.html)\n\n$\\texttt{Kruskal}$ \u91cd\u6784\u6811 \u2014\u2014 \u9700\u8981\u4e00\u5b9a\u57fa\u7840\u7684\u7b80\u5355\u7b97\u6cd5\n\n\u9898\u76ee\u5927\u610f:\n\n- \u7ed9\u4f60\u4e00\u4e2a\u65e0\u5411\u56fe,\u53ef\u80fd\u6709\u5f88\u591a\u4e2a\u8fde\u901a\u5757\n- \u7ed9\u5b9a\u4e00\u4e9b\u8be2\u95ee $v,x,k$,\u4ee3\u8868\u5728 $v\\{\\}$ \u8fd9\u4e2a\u8fde\u901a\u5757\u91cc\u9762\u627e\u5230\u4e00\u4e9b\u8def\u5f84 \n$v \\Longrightarrow u\\{\\}$ \u7684\u8fb9\u6743 $max\\{val\\{\\}\\} \\leq x$\u3002\u6c42 $u_k$\u3002\n\n\u9996\u5148\u6211\u4eec\u601d\u8003,\u6211\u4eec\u8981\u6ee1\u8db3\u6700\u5c0f\u7684\u8fb9\u6743,\u90a3\u4e48\u662f\u6574\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u70b9,\u800c\u4e0d\u662f $v \\Longrightarrow u$ \u7684\u6700\u77ed\u8def\u5f84 (\u6709\u53ef\u80fd\u6700\u5927\u503c\u4f1a\u5927,\u4f46\u662f\u603b\u503c\u5c0f)\u3002**\u56e0\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u4e92\u76f8\u8fde\u7684\u90fd\u662f\u6700\u5c0f\u7684\u8fb9**\u3002\n\n\u4e3e\u4e2a\u5f88\u7b80\u5355\u7684\u4f8b\u5b50 : \n\n![](https://i.loli.net/2019/03/09/5c8370dd46e05.png)\n\n$V_3 \\Longrightarrow V_4$ \u7684\u6700\u77ed\u8def\u5e94\u8be5\u662f $V_3 \\Longrightarrow V_4$,\u8ddd\u79bb\u4e3a $5$,\u6700\u5927\u503c\u4e3a $5$\u3002\u800c\u6700\u5c0f\u751f\u6210\u6811\u4ee5\u540e,$V_3 \\Longrightarrow V_4$ \u7684\u8def\u662f $V_3 \\Longrightarrow V_6 \\Longrightarrow V_4$,\u8ddd\u79bb\u4e3a $6$,\u6700\u5927\u503c\u4e3a $4$\u3002\n\n> \u7136\u540e\u6211\u4eec\u77e5\u9053,\u6700\u5c0f\u751f\u6210\u6811\u4e86\u4ee5\u540e\u5c31\u53d8\u6210\u4e86\u4e00\u68f5\u6811,\u7136\u540e\u53ef\u4ee5\u518d\u8fd9\u4e0a\u9762\u505a\u6587\u7ae0\u3002\u5982\u679c\u6211\u4eec\u8868\u793a\u4e00\u79cd\u4e1c\u897f,\u5b83\u7684\u5b58\u5728\u6ee1\u8db3\u6240\u6709\u8def\u5f84\u901a\u8fc7\u81ea\u5df1\u7684\u65f6\u5019,\u81ea\u5df1\u7684\u503c\u4e3a\u8fd9\u6761\u9053\u8def\u7684\u6700\u5927\u503c,\u5e76\u4e14\u6ee1\u8db3\u4e00\u5b9a\u7684\u70b9\u5728\u67d0\u4e00\u4e2a\u5730\u65b9,\u4e00\u5b9a\u7684\u70b9\u5728\u53e6\u4e00\u4e2a\u5730\u65b9,\u6bcf\u4e00\u4e2a\u70b9\u8981\u7ecf\u8fc7\u4e00\u4e9b\u5fc5\u987b\u70b9\u6765\u901a\u8fc7\u3002\n\n\u6240\u4ee5\u6709\u4e00\u79cd\u4e1c\u897f\u53eb $\\texttt{Kruskal}$ \u91cd\u6784\u6811\u3002\n\n\u9996\u5148\u6211\u4eec\u5148\u628a\u8fb9\u6392\u597d,\u7136\u540e\u5f00\u59cb\u4e00\u6761\u4e00\u6761\u91cd\u6784\u3002\n\n\u5047\u5982\u6211\u4eec\u6709\u4e00\u4e2a\u56fe :\n\n![](https://i.loli.net/2019/03/09/5c836bd23bdf0.png)\n\n\u90a3\u4e48\u6211\u4eec\u5148\u6309\u8fb9\u6700\u5c0f\u7684 $1 \\Longrightarrow 2$ \u5f00\u59cb\u3002\n\n\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9,\u7f16\u53f7\u968f\u4fbf,\u6743\u503c\u4e3a $val\\{1 \\Longrightarrow 3\\}$,\u4e5f\u5c31\u662f $2$\u3002\n\n![](https://i.loli.net/2019/03/09/5c836ce951b83.png)\n\n\u7136\u540e\u662f $2 \\Longrightarrow 4$\n\n![](https://i.loli.net/2019/03/09/5c836d223660a.png)\n\n\u505a\u5230 $1 \\Longrightarrow 2$ \u65f6\u5019\u6211\u4eec\u53d1\u73b0 $1$ \u548c $2$ \u5404\u81ea\u5df2\u7ecf\u6709\u7236\u4eb2,\u6216\u8005\u8bf4\u5404\u81ea\u5f62\u6210\u4e86\u5404\u81ea\u7684\u6811,\u73b0\u5728\u662f\u4e00\u4e2a\u68ee\u6797\u5c40\u9762\u3002\u7136\u540e\u6211\u4eec\u628a\u5404\u81ea\u7684\u6839\u76f8\u8fde,\u6743\u503c\u4e3a $\\{1,3\\} \\Longrightarrow \\{2,4\\}$,\u4e5f\u5c31\u662f $1 \\Longrightarrow 2$,\u4e3a $3$\u3002\n\n![](https://i.loli.net/2019/03/09/5c836e7257cc9.png)\n\n\u7136\u540e\u6700\u540e\u4e00\u6761\u8fb9\u4e3a $2 \\Longrightarrow 3$,\u6211\u4eec\u53d1\u73b0\u8fd9\u4e24\u4e2a\u70b9\u5df2\u7ecf\u5728\u540c\u4e00\u4e2a\u6811,\u5c31\u4e0d\u7528\u7ba1\u5b83\u4eec\u4e86\u3002\n\n\u4ee5\u4e0a\u662f\u91cd\u6784\u8fc7\u7a0b,\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5176\u6027\u8d28\u3002\u9996\u5148\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 $u$ \u4ee3\u8868\u81ea\u5df1\u7684\u5b50\u6811\u7684\u53f6\u5b50\u8282\u70b9\u5230\u8fbe $u$ \u7684\u8def\u5f84\u7684\u6700\u5c0f\u6743\u503c\u4e3a $u$,\u4e14\u5176\u6240\u5305\u542b\u7684\u53f6\u5b50\u8282\u70b9\u7edd\u5bf9\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u3002\u5176\u6b21,\u8fd9\u68f5\u6811\u4e00\u5b9a\u662f\u4e00\u4e2a\u4e8c\u53c9\u5806,\u4e8c\u53c9\u662f\u56e0\u4e3a\u6bcf\u4e00\u6b21\u662f\u4e24\u4e24\u7ed3\u5408,\u6700\u5927\u5806\u662f\u56e0\u4e3a\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u4f9d\u6b21\u5408\u5e76\u3002\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053,\u5982\u679c\u6211\u4eec\u4ece $v$ \u8fd9\u4e2a\u70b9\u4e00\u76f4\u5f80\u4e0a\u8dd1,\u7136\u540e\u627e\u5230\u4e00\u4e2a\u70b9 $p$,\u6ee1\u8db3 $val_p \\leq k$ \u4e14 $val_{father_{p}} > key$ \u7684\u65f6\u5019,\u8fd9\u68f5\u6811\u7684\u53f6\u5b50\u8282\u70b9\u5c31\u53ef\u4ee5\u8868\u793a\u6240\u6709\u7684 $v$ \u80fd\u5230\u8fbe\u7684\u56fe\u4e2d\u7684\u70b9\u3002\n\n\u597d\u4e86,\u4ee5\u4e0a\u66b4\u529b\u3002\n\n\u6211\u4eec\u8003\u8651\u5230\u4e00\u4e2a\u6027\u8d28,\u8fd9\u662f\u4e00\u4e2a\u4e8c\u53c9\u5806,\u4f46\u4e0d\u662f\u5b8c\u5168\u4e8c\u53c9\u6811,\u6240\u4ee5\u9ad8\u5ea6\u4e0d\u4e00\u5b9a\u662f $O(\\log N)$ \u7684,\u6709\u53ef\u80fd\u4f1a\u5361\u5230 $O(N)$\u3002(\u9ad8\u5ea6\u4f1a\u88ab\u5361\u6210\u662f $\\frac{N}{2}-1$)\n\n\u6240\u4ee5\u6211\u4eec\u7528\u5230\u6811\u5256\u3002\n\n\u6211\u4eec\u5047\u8bbe\u6709\u8fd9\u6837\u4e00\u4e2a\u91cd\u6784\u6811,\u7136\u540e\u6309\u7167\u8f7b\u91cd\u94fe\u5256\u5206\u641e\u51fa\u6765\u3002\n\n![](https://i.loli.net/2019/03/09/5c8371de07fb4.png)\n\n\u5047\u5982\u6211\u4eec\u6c42\u4ece $4$ \u5f80\u4e0a\u627e,\u4e00\u76f4\u627e\u5230 $u$ \u6ee1\u8db3 $val_u \\leq 5$\u3002\u90a3\u4e48\u663e\u7136 $5$ \u662f $7$ \u7684\u53f3\u4e8c\u5b50\u3002 (\u8fd9\u4e24\u4e2a\u70b9\u6211\u8bb2\u5f97\u662f\u6743\u503c\u4e0d\u662f\u7f16\u53f7)\n\n\u6211\u4eec\u5230 $4$ \u7684\u7236\u4eb2,\u7136\u540e\u627e\u8fd9\u6761\u94fe\u7684\u6700\u5927\u503c,\u53d1\u73b0\u662f $2$ ,\u7ee7\u7eed\u5f80\u4e0a\u8df3,\u8df3\u5230 $3$,\u8fd9\u4e2a\u94fe\u7684\u6700\u5927\u503c\u662f $7$,\u7136\u540e\u6211\u4eec\u5c31\u4e8c\u5206,\u627e\u5230\u8fd9\u4e2a\u70b9\u5c31\u597d\u4e86\u3002\n\n![](https://i.loli.net/2019/03/09/5c8373264207d.png)\n\n\u6700\u540e\u6211\u4eec\u53ea\u9700\u8981\u6c42\u975e\u53f6\u5b50\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u53f6\u5b50\u8282\u70b9\u7684\u6700\u5de6\u8fb9\u7684\u7f16\u53f7\u548c\u6700\u53f3\u8fb9\u7684\u7f16\u53f7,\u6c42\u8fd9\u4e9b\u70b9\u7684\u9ad8\u5ea6\u7684\u7b2c $k$ \u5927,\u8fd9\u4e2a\u7f16\u53f7\u4e3a $\\texttt{Dfs}$ \u5230\u7684\u987a\u5e8f\u3002\u8fd9\u4e2a\u56fe\u53ef\u80fd\u6709\u5f88\u591a\u4e2a\u8fde\u901a\u5757,\u4f60\u7684 $dfn$ \u4e00\u76f4\u589e\u52a0\u4e5f\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002\n\n\u6c42\u7b2c $k$ \u5927? \u5212\u5206\u6811\u3002\n\n```pascal\nUses math;\n\nConst\n    total=100010 << 1; // \u70b9\u6570\n    edge=400010 << 1; // \u8fb9\u6570\n\nvar\n    dsu,num,val,dfn,dep,top,size,recf,father:array[-1..total] of longint;\n    tree,toleft:array[-1..21,-1..total] of longint;\n    son,element:array[-1..total,-1..2] of longint;\n    input:array[-1..edge,-1..3] of longint;\n    i,n,m,x,y,k,sa,hop,test,tail,root,dfnum:longint;\n\nfunction Get(x:longint):longint; // \u5e76\u67e5\u96c6\nbegin\n    if dsu[x]=x then exit(x) else begin Get:=Get(dsu[x]); dsu[x]:=Get; end;\nend;\n\nprocedure Sort(l,r:longint); // \u6392\u5e8f\nvar i,j,s:longint;\nbegin\n    i:=l; j:=r; s:=input[(l+r) >> 1,3];\n    repeat\n        while (input[i,3]<s) do inc(i);\n        while (input[j,3]>s) do dec(j);\n        if i<=j then\n        begin\n            input[0]:=input[i]; input[i]:=input[j]; input[j]:=input[0];\n            inc(i); dec(j);\n        end;\n    until i>=j;\n    if i<r then Sort(i,r);\n    if j>l then Sort(l,j);\nend;\n\nprocedure Dfs_1(x:longint); // \u8f7b\u91cd\u94fe\u5256\u5206\nvar i:longint;\nbegin\n    size[x]:=1;\n    for i:=1 to 2 do\n        if (dep[son[x,i]]=0)and(son[x,i]<>0) then\n        begin\n            dep[son[x,i]]:=dep[x]+1;\n            father[son[x,i]]:=x;\n            Dfs_1(son[x,i]); inc(size[x],size[son[x,i]]);\n            if size[son[x,i]]>size[son[x,0]] then son[x,0]:=son[x,i];\n        end;\nend;\n\nprocedure Dfs_2(x,centre:longint); // \u540c\u6837\u662f\u6811\u5256\nvar i:longint;\nbegin\n    inc(dfnum); dfn[x]:=dfnum; recf[dfnum]:=x; top[x]:=centre; \n    if son[x,0]=0 then\n    begin\n        inc(tail); val[tail]:=num[x];\n        element[x,1]:=tail; element[x,2]:=tail; exit; // element[x,0/1] \u662f\u8fd9\u4e2a\u70b9\u7684\u7f16\u53f7\n    end;\n    Dfs_2(son[x,0],centre);\n    for i:=1 to 2 do if (son[x,i]<>son[x,0]) then Dfs_2(son[x,i],son[x,i]);\n    element[x,1]:=min(element[son[x,1],1],element[son[x,2],1]); // \u53f6\u5b50\u8282\u70b9\u6700\u5927\u7f16\u53f7\n    element[x,2]:=max(element[son[x,1],2],element[son[x,2],2]); // \u53f6\u5b50\u8282\u70b9\u6700\u5c0f\u7f16\u53f7,\u8fd9\u4e24\u4e2a\u5728\u4e00\u8d77\u7528\u6765\u6307\u5bfc\u7b2c k \u5927\u7684\u8303\u56f4\nend;\n\nfunction Refer(x,key:longint):longint; // \u67e5\u8be2 u \u70b9\u7684\u6240\u5728\u4f4d\u7f6e\nvar l,r,mid,tmp:longint;\nbegin\n    x:=father[x];\n    while (x<>root) do\n    begin\n        if num[top[x]]>key then break; // \u5982\u679c\u8fd9\u6761\u94fe\u7684\u6700\u5927\u503c > x\n        x:=top[x]; \n        if num[father[x]]<=key then x:=father[x] else break; // \u5982\u679c\u4e0b\u4e00\u6761\u94fe\u6709 u (\u5982\u679c\u4e0b\u4e00\u6761\u94fe\u5408\u6cd5)\n    end;\n    l:=1; r:=dep[x]-dep[top[x]]+1; // \u4e8c\u5206,\u56e0\u4e3a\u4e00\u6761\u94fe\u7684 dfn \u5728\u4e00\u8d77\n    while l<=r do\n    begin\n        mid:=(l+r) >> 1; tmp:=recf[dfn[x]-mid+1];\n        if num[tmp]<=key then begin l:=mid+1; Refer:=tmp; end else r:=mid-1;\n    end;\nend;\n\nprocedure Build(left,right,deep:longint); // \u5212\u5206\u6811\u9884\u8b66\nvar i,mid,same,ls,rs,flag:longint;\nbegin\n    if left=right then exit;\n    mid:=(left+right) >> 1; same:=mid-left+1;\n    for i:=left to right do if tree[deep,i]<val[mid] then dec(same);\n    ls:=left; rs:=mid+1;\n    for i:=left to right do\n    begin\n        flag:=0;\n        if (tree[deep,i]<val[mid])or((tree[deep,i]=val[mid])and(same>0)) then\n        begin\n            flag:=1; tree[deep+1,ls]:=tree[deep,i]; inc(ls);\n            if tree[deep,i]=val[mid] then dec(same);\n        end else begin tree[deep+1,rs]:=tree[deep,i]; inc(rs); end;\n        toleft[deep,i]:=toleft[deep,i-1]+flag;\n    end;\n    Build(left,mid,deep+1); Build(mid+1,right,deep+1);\nend;\n\nfunction Query(left,right,k,l,r,deep:longint):longint;\nvar mid,x,y,cnt,rx,ry:longint;\nbegin\n    if left=right then exit(tree[deep,left]);\n    mid:=(l+r) >> 1;\n    x:=toleft[deep,left-1]-toleft[deep,l-1];\n    y:=toleft[deep,right]-toleft[deep,l-1];\n    ry:=right-l-y; rx:=left-l-x; cnt:=y-x;\n    if cnt>=k then Query:=Query(l+x,l+y-1,k,l,mid,deep+1)\n    else Query:=Query(mid+rx+1,mid+ry+1,k-cnt,mid+1,r,deep+1);\nend;\n\nbegin\n    read(n,m,test); \n    for i:=1 to n do read(num[i]); \n    for i:=1 to n << 1 do dsu[i]:=i; \n    for i:=1 to m do read(input[i,1],input[i,2],input[i,3]); \n    Sort(1,m); \n    for i:=1 to m do // \u5efa\u7acb\u91cd\u6784\u6811\n    begin\n        x:=input[i,1]; y:=input[i,2]; dsu[x]:=get(x); dsu[y]:=get(y);\n        if dsu[x]=dsu[y] then continue;\n        inc(n); num[n]:=input[i,3]; son[n,1]:=Get(x); son[n,2]:=Get(y);\n        dsu[Get(x)]:=dsu[n]; dsu[Get(y)]:=dsu[n];\n    end;\n    for i:=1 to n do // \u505a\u6811\u5256\u64cd\u4f5c\n    begin\n        if father[i]<>0 then continue; root:=Get(i);\n        dep[root]:=1; father[root]:=root; Dfs_1(root); Dfs_2(root,root);\n    end;\n    for i:=1 to tail do begin tree[0,i]:=val[i]; input[i,3]:=val[i]; end;\n    Sort(1,tail); \n    for i:=1 to tail do val[i]:=input[i,3]; \n    Build(1,tail,0);\n    for i:=1 to test do\n    begin\n        read(x,y,k); hop:=Refer(x,y); sa:=element[hop,2]-element[hop,1]+1;\n        if sa<k then begin writeln(-1); continue; end;\n        writeln(Query(element[hop,1],element[hop,2],sa-k+1,1,tail,0));\n    end;\nend.\n```\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(M \\log N)$,\u67e5\u8be2\u70b9 $u$ \u6bcf\u4e00\u6b21\u7528 $2$ \u4e2a $\\log$,\u5212\u5206\u6811\u7528 $1$ \u4e2a $\\log$\u3002\n\n\n",
        "postTime": 1552116311,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "### $Solution$\n\u9996\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0bkruskal\u91cd\u6784\u6811:[\u8be6\u89c1](http://baidu.physton.com/?q=kruskal\u91cd\u6784\u6811)  \n\u77e5\u9053kruskal\u91cd\u6784\u6811\u540e\u8fd9\u4e00\u9053\u9898\u5c31\u53ef\u4ee5\u51e0\u4e4e\u6ca1\u4e86.  \n\u5229\u7528kruskal\u91cd\u6784\u6811\u7684\u6027\u8d28,\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u90fd\u6bd4\u4ed6\u5c0f(\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u5806),\u6240\u4ee5\u4ece\u70b9$v$\u5f00\u59cb\u53ea\u7ecf\u8fc7\u56f0\u96be\u503c\u5c0f\u4e8e\u7b49\u4e8e$x$\u7684\u8def\u5f84\u5b9e\u9645\u4e0a\u5c31\u662f\u627e\u5230\u4e00\u4e2a\u6743\u503c\u5c0f\u4e8e\u7b49\u4e8e$x$\u7684\u4e14\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\n\u6211\u4eec\u5c06\u8fd9\u4e2a\u70b9\u53eb\u505a$K$.\u90a3\u4e48\u70b9$v$\u53ef\u4ee5\u8d70\u7684\u8def\u5f84\u5c31\u662f\u70b9$K$\u7684\u5b50\u6811.\u73b0\u5728\u8981\u6c42\u7b2ck\u9ad8\u7684\u5c71\u5cf0,\u8fd9\u76f4\u63a5\u7528\u4e3b\u5e2d\u6811+dfs\u5e8f\u641e\u4e00\u641e\u5c31\u597d\u4e86\n### $Code$\n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=200011; \nint read(){\n    int x=0,f=1;char c=getchar();\n    while(c<'0'||c>'9') f=(c=='-')?-1:1,c=getchar();\n    while(c>='0'&&c<='9') x=x*10+c-48,c=getchar();\n    return f*x;\n}\nstruct node1 {\n\tint to,next;\n}e[500001];\nstruct node{\n\tint x,y,v;\n}b[500001];\nstruct node2 {\n\tint l,r,v;\n}a[N*20];\nint root,tot,res,cnt,n,m,t,h[N],pre[N],head[N],T[N];\nint fa[N][21],dep[N],bin[101],val[N],r[N],l[N],tail[N];\nvoid add(int x,int y){ e[++cnt].to=y,e[cnt].next=head[x],head[x]=cnt; }\nint find(int x){ return pre[x]==x?x:pre[x]=find(pre[x]); }\nbool cmp(const node & a , const node & b ){ return a.v<b.v; }\nint query(int x,int v){\n\tfor(int i=19;i>=0;i--)\n\t\tif(dep[x]>=bin[i]&&val[fa[x][i]]<=v)\n\t\t\tx=fa[x][i];\n\treturn x;\n}\nvoid dfs(int x){\n\tif(x<=n)\n\t\th[++tot]=tail[x];\n\tl[x]=tot;\n\tfor(int i=1;i<=16;i++)\n\t\tif(dep[x]>=bin[i])\n\t\t\tfa[x][i]=fa[fa[x][i-1]][i-1];\n\tfor(int i=head[x];i;i=e[i].next)\n\t\tdep[e[i].to]=dep[x]+1,fa[e[i].to][0]=x,dfs(e[i].to);\n\tr[x]=tot;\n}\nvoid build(){\n\tres=n,sort(b+1,b+1+m,cmp);\n\tfor(int i=1;i<=m;i++){\n\t\tint fx=find(b[i].x),fy=find(b[i].y);\n\t\tif(fx!=fy)\n\t\t\tval[++res]=b[i].v,pre[fx]=res,pre[fy]=res,add(res,fx),add(res,fy);\n\t\tif(res==n*2-1)\n\t\t\tbreak;\n\t}\n}\nvoid insert(int &k,int l,int r,int v){\n\ta[++root]=a[k],k=root,a[k].v++;\n\tif(l==r) return ;\n\tint mid=(l+r)>>1;\n\tif(v<=mid)\n\t\tinsert(a[k].l,l,mid,v);\n\telse insert(a[k].r,mid+1,r,v);\n}\nint answer(int x,int k,int l,int r,int v){\n\tif(l==r) return l;\n\tint mid=(l+r)>>1,pos=a[a[k].l].v-a[a[x].l].v;\n\tif(v<=pos)\n\t\treturn answer(a[x].l,a[k].l,l,mid,v);\n\telse return answer(a[x].r,a[k].r,mid+1,r,v-pos);\n}\nvoid solve(){\n\tint last=-1;\n\twhile(t--){\n\t\tint v=read(),x=read(),k=read();\n\t\tif(last!=-1)\n\t\t\tv^=last,x^=last,k^=last;\n\t\tint now=query(v,x);\n\t\t(r[now]-l[now]<k)?last=-1:last=tail[answer(T[l[now]],T[r[now]],1,n,r[now]-l[now]-k+1)];\n\t\tprintf(\"%d\\n\",last);\n\t}\n}\nint main(){\n\tn=read(),m=read(),t=read(),bin[0]=1;\n\tfor(int i=1;i<=n;i++)\n\t\ttail[i]=read();\n\tfor(int i=1;i<n*2;i++)\n\t\tpre[i]=i;\n\tfor(int i=1;i<=19;i++)\n\t\tbin[i]=bin[i-1]<<1;\n\tfor(int i=1;i<=m;i++)\n\t\tb[i].x=read(),b[i].y=read(),b[i].v=read();\n\tbuild(),dfs(find(1));\n\tsort(tail+1,tail+1+n);\n\tint k=unique(tail+1,tail+1+n)-tail-1;\n\tfor(int i=1;i<=n;i++)\n\t\tT[i]=T[i-1],insert(T[i],1,k,lower_bound(tail+1,tail+1+k,h[i])-tail);\n\tn=k,solve();\n}\n\n```",
        "postTime": 1550049861,
        "uid": 19805,
        "name": "\u64a4\u4e91",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "## \u89e3\u9898\u601d\u8def\n\u3000\u3000\u770b\u89c1\u5404\u4f4d\u5927\u4f6c\u90fd\u662f\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\uff0c\u849f\u84bb\u6765\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76\u6c34\u4e00\u6c34\u3002\u3002\n\n\u3000\u3000\u9996\u5148\u8fd9\u662f\u4e2a\u79bb\u7ebf\u505a\u6cd5\uff0c\u521a\u5f00\u59cb\u628a\u8fb9\u548c\u8be2\u95ee\u5404\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b58\u8d77\u6765\uff0c\u7136\u540e\u8fb9\u6309\u7167\u8fb9\u6743\u6392\u5e8f\uff0c\u8be2\u95ee\u6309\u7167$x$\u8fdb\u884c\u6392\u5e8f\u3002\u8fd9\u6837\u56e0\u4e3a\u8fb9\u6743\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u89e3\u51b3\u8be2\u95ee\u7684\u65f6\u5019\u53ef\u4ee5\u628a$<=x$\u7684\u8fb9\u90fd\u52a0\u8fdb\u53bb\u3002\u67e5\u8be2\u7b2c$k$\u5927\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u5c31\u597d\u4e86\uff0c\u521a\u5f00\u59cb\u7684\u65f6\u5019\u6bcf\u4e2a\u70b9\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u52a0\u8fb9\u65f6\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u5982\u679c\u4e0d\u8fde\u901a\u5c31\u628a\u4e24\u70b9\u6240\u5728\u8054\u901a\u5757\u7684\u6839\u8fdb\u884c\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\u3002\n  \n## \u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n\nusing namespace std;\nconst int N=100005;\nconst int M=500005;\n\ninline int rd(){\n    int x=0,f=1; char ch=getchar();\n    while(!isdigit(ch)) f=ch=='-'?0:1,ch=getchar();\n    while(isdigit(ch)) x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n    return f?x:-x;  \n}\n\nint n,m,Q,F[N],cpy[N],a[N],u,rt[N],tot,ans[M];\n\nstruct Edge{\n    int x,y,w;  \n    friend bool operator<(const Edge A,const Edge B){\n        return A.w<B.w; \n    }\n}edge[M];\n\nstruct Query{\n    int x,v,k,id;\n    friend bool operator<(const Query A,const Query B){\n        return A.x<B.x; \n    }\n}q[M];\n\nstruct Segment_Tree{\n    int ls[N*40],rs[N*40],sum[N*40];\n    void build(int &x,int l,int r,int pos){\n        x=++tot; sum[x]=1; if(l==r) return;\n        int mid=(l+r)>>1; \n        if(pos<=mid) build(ls[x],l,mid,pos);\n        else build(rs[x],mid+1,r,pos);\n    }\n    int merge(int x,int y,int l,int r){\n        if(!x || !y) return (x|y); \n        if(l==r) {sum[x]+=sum[y]; return x;}\n        int mid=(l+r)>>1;\n        ls[x]=merge(ls[x],ls[y],l,mid); \n        rs[x]=merge(rs[x],rs[y],mid+1,r);\n        sum[x]=sum[ls[x]]+sum[rs[x]];\n        return x;\n    }\n    int find(int x,int l,int r,int k){\n        if(l==r) return l; int mid=(l+r)>>1;\n        if(sum[rs[x]]>=k) return find(rs[x],mid+1,r,k);\n        else return find(ls[x],l,mid,k-sum[rs[x]]);\n    }   \n}tree;\n\nint get(int x){\n    if(x==F[x]) return x;\n    return F[x]=get(F[x]);  \n}\n\nint main(){\n    n=rd(),m=rd(),Q=rd(); int x,y,z;\n    for(int i=1;i<=n;i++) cpy[i]=a[i]=rd(),F[i]=i;\n    sort(cpy+1,cpy+1+n); u=unique(cpy+1,cpy+1+n)-cpy-1;\n    for(int i=1;i<=n;i++) a[i]=lower_bound(cpy+1,cpy+1+u,a[i])-cpy;\n    for(int i=1;i<=n;i++) tree.build(rt[i],1,u,a[i]);\n    for(int i=1;i<=m;i++){\n        x=rd(),y=rd(),z=rd();\n        edge[i].x=x,edge[i].y=y,edge[i].w=z;\n    }\n    sort(edge+1,edge+1+m);\n    for(int i=1;i<=Q;i++) {\n        x=rd(),y=rd(),z=rd(); q[i].id=i;\n        q[i].v=x; q[i].x=y; q[i].k=z;   \n    }\n    sort(q+1,q+1+Q); int now=1;\n    for(int i=1;i<=Q;i++){\n        while(now<=m && edge[now].w<=q[i].x) {\n            x=edge[now].x; y=edge[now].y; x=get(x); y=get(y);\n            now++; if(x==y) continue; F[y]=x;\n            rt[x]=tree.merge(rt[x],rt[y],1,u);  \n        }\n        x=get(q[i].v);\n        if(tree.sum[rt[x]]<q[i].k) ans[q[i].id]=-1;\n        else ans[q[i].id]=cpy[tree.find(rt[x],1,u,q[i].k)];\n    }\n    for(int i=1;i<=Q;i++) printf(\"%d\\n\",ans[i]);\n    return 0;   \n}\n```\n[~~\u6253\u6ce2\u5e7f\u544a~~](http://www.cnblogs.com/sdfzsyq)",
        "postTime": 1549883768,
        "uid": 52394,
        "name": "Monster_Qi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "\u7528kruskal\u91cd\u6784\u6811,\u500d\u589e\u8bb0\u5f55\u6811\u4e0a\u4e00\u70b9\u5230\u7956\u5148\u7684\u6700\u5927\u8def\u5f84\n\n\u6613\u77e5\u82e5\u4e00\u70b9\u80fd\u591f\u8d70\u5230,\u8be5\u70b9\u5b50\u6811\u4e2d\u4efb\u610f\u4e00\u70b9\u4e00\u5b9a\u80fd\u88ab\u8d70\u5230 ( kruskal\u7684\u5efa\u8fb9\u987a\u5e8f ) \n\n\u4e8e\u662f\u53ea\u9700\u6839\u636edfs\u5e8f\u5efa\u4e3b\u5e2d\u6811 ( \u8fd9\u91cc\u6709\u70b9\u590d\u6742,\u8bf7\u81ea\u5df1\u597d\u597d\u60f3\u60f3 ) \n\n\u6bcf\u6b21\u8be2\u95ee,\u5229\u7528\u4e0e\u5904\u7406\u7684\u500d\u589e\u6570\u7ec4\u8df3\u5230\u6df1\u5ea6\u6700\u6d45\u7684\u7956\u5148,\n\n\u7956\u5148\u7684\u5b50\u6811\u5728dfs\u5e8f\u4e0a\u662f\u8fd9\u6837\u4e00\u6bb5: dfn[\u7956\u5148]~dfn[\u7956\u5148]+size[\u7956\u5148]-1 ( size\u662f\u5b50\u6811\u5927\u5c0f ( \u5305\u62ec\u81ea\u5df1 ) )\n\n\u7136\u540e\u8be2\u95ee\u8fd9\u4e00\u6bb5\u7684\u4e3b\u5e2d\u6811\u5373\u53ef\n\n\u8fd9\u9898\u6570\u7ec4\u5f00\u5927\u4e86\u663e\u793aRE\u800c\u975eMLE,\u6211\u8c03\u4e86\u597d\u4e45\n\n```\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#define rg register\n#define _ (int)100010\nusing namespace std;\nint n,m,Q,record[_<<1],num_of_edges=1,dad[_<<1],an[_<<1][19],num,depth[_<<1],size[_<<1],dfn[_<<1],dfns,zhan[_<<1],root[_<<1],H[_<<1],S;\nint maxx[_<<1][19],rank[_<<1],Hills[_<<1];\nstruct pppp\n{\n\tint h,id;\n}hill[_<<1];\nstruct ppp\n{\n\tint cnt,son[2],it/*,size*/;\n}tr[(_<<1)*19];\nstruct pp\n{\n\tint next,to,w;\n}edge[_<<1];\nstruct p\n{\n\tint x,y,w;\n}way[_*5];\ninline void add(int from,int to,int ww)\n{\n\tedge[++num_of_edges]=(pp){record[from],to,ww};\n\trecord[from]=num_of_edges;\n}\ninline bool operator <(p x,p y){   return x.w<y.w;   }\nint find(int x){   if(x^dad[x])dad[x]=find(dad[x]);   return dad[x];   }\ninline int read()\n{\n\trg int save=0,w=1;rg char q=getchar();\n\twhile(q<'0'||q>'9'){if(q=='-')w=-1;q=getchar();}\n\twhile(q>='0'&&q<='9')save=(save<<3)+(save<<1)+q-'0',q=getchar();\n\treturn save*w;\n}\ninline int max(int x,int y){   return x<y?y:x;   }\ninline void Input()\n{\n\tn=read(),m=read(),Q=read();\n\tnum=n;\n\tint i;\n\tfor(i=1;i<=n;++i)H[i]=read();\n\tfor(i=1;i<=m;++i)way[i]=(p){read(),read(),read()};\n\tsort(way+1,way+m+1);\n}\ninline void kruskal()\n{\n\tint k=0;\n\tfor(int i=1;i<=n;++i)dad[i]=i;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint fx=find(way[i].x),fy=find(way[i].y);\n\t\tif(fx^fy)\n\t\t{\n\t\t\t++num;\n\t\t\tdad[fx]=dad[fy]=dad[num]=num;\n\t\t\tadd(num,fx,way[i].w);\n\t\t\tadd(num,fy,way[i].w);\n\t\t\tk++;\n\t\t\tif(k==n-1)break;\n\t\t}\n\t}\n}\nvoid insert(int &now,int pos,int l,int r)\n{\n\ttr[++S]=tr[now];\n\tnow=S;\n\ttr[now].cnt++;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tif(mid>=pos)insert(tr[now].son[0],pos,l,mid);\n\telse insert(tr[now].son[1],pos,mid+1,r);\n}\nvoid dfs(int i)\n{\n\tdfn[i]=++dfns,zhan[dfns]=i;\n\tsize[i]=1;\n\tint j,ceng=log(depth[i])/log(2)+1;\n\tfor(j=1;j<=ceng;++j)\n\t\tan[i][j]=an[an[i][j-1]][j-1],\n\t\tmaxx[i][j]=max(maxx[i][j-1],maxx[an[i][j-1]][j-1]);\n\tbool flag=0;\n\tfor(j=record[i];j;j=edge[j].next)\n\t{\n\t\tint to=edge[j].to;\n\t\tdepth[to]=depth[i]+1,   an[to][0]=i,   maxx[to][0]=edge[j].w;\n\t\tdfs(to);\n\t\tsize[i]+=size[to];\n\t\tHills[i]+=Hills[to];\n\t\tflag=1;\n\t}\n\tif(!flag)Hills[i]=1;\n}\ninline bool operator <(pppp x,pppp y){   return x.h>y.h;   }\ninline void pre()\n{\n\tkruskal();\n\tdepth[num]=1;\n\tdfs(num);\n\tint j=0;\n\tfor(int i=1;i<=dfns;++i)\n\t\tif(H[zhan[i]])\n\t\t\thill[++j]=(pppp){H[zhan[i]],i};\n\tsort(hill+1,hill+n+1);\n\tfor(int i=1;i<=n;++i)rank[hill[i].id]=i;\n\tfor(int i=1;i<=dfns;++i)\n\t{\n\t\troot[i]=root[i-1];\n\t\tif(rank[i])insert(root[i],rank[i],1,n);\n\t}\n}\ninline int ask(int i,int x)\n{\n\tint ceng=log(depth[i])/log(2)+1;\n\tfor(int j=ceng;j>=0;--j)\n\t\tif(maxx[i][j]<=x&&(depth[an[i][j]]))i=an[i][j];\n\treturn i;\n}\nint k_th(int le,int ri,int k,int l,int r)\n{\n\tif(l==r)return l;\n\tint Num=tr[tr[ri].son[0]].cnt-tr[tr[le].son[0]].cnt;\n\tint mid=(l+r)>>1;\n\tif(Num>=k)return k_th(tr[le].son[0],tr[ri].son[0],k,l,mid);\n\telse return k_th(tr[le].son[1],tr[ri].son[1],k-Num,mid+1,r);\n}\ninline void doit()\n{\n\tint lastans=0;\n\tfor(int i=1;i<=Q;++i)\n\t{\n\t\tint v=read(),x=read(),k=read();\n\t\tif(lastans!=-1)v^=lastans,x^=lastans,k^=lastans;\n\t\tint a=ask(v,x);\n\t\tif(Hills[a]<k)puts(\"-1\"),lastans=-1;\n\t\telse \n\t\t\tprintf(\"%d\\n\",lastans=hill[k_th(root[dfn[a]-1],root[dfn[a]+size[a]-1],k,1,n)].h);\n\t}\n}\nint main()\n{\n\tInput();\n\tpre();\n\tdoit();\n\treturn 0;\n}\n\n```",
        "postTime": 1536392954,
        "uid": 66512,
        "name": "\u5929\u4f9d\u8d5b\u9ad8\uff01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "\u505a\u4e86\u8fd9\u9053\u9898\u53d1\u73b0$kruskal$\u91cd\u6784\u6811\u4f3c\u4e4e\u548c$LCT$\u975e\u5e38\u642d\u914d\n\n\u7531\u4e8e$kruskal$\u91cd\u6784\u6811\u5177\u6709\u975e\u5e38\u4f18\u7f8e\u7684\u5355\u8c03\u6027\uff0c\u5373\u968f\u6df1\u5ea6\u7684\u51cf\u5c0f\u8fb9\u8282\u70b9\u7684\u6743\u503c\u4f1a\u589e\u5927\uff0c\u6839\u8282\u70b9\u4e3a\u6743\u503c\u6700\u5927\u7684\u8282\u70b9\uff0c\u6574\u68f5\u6811\u662f\u4e00\u4e2a\u5927\u6839\u5806\u3002\n\n\u90a3\u5982\u679c\u6211\u4eec\u628a\u6743\u503c\u53d6\u8d1f\u53d8\u4e3a\u5c0f\u6839\u5806\u5c31\u53ef\u4ee5\u5f97\u5230\u66f4\u52a0\u4f18\u7f8e\u7684\u6027\u8d28\uff1a\n\n### \u82e5\u53ea\u8003\u8651\u70b9\u5230\u6839\u7684\u8def\u5f84\uff0c\u6df1\u5ea6\u4e0e\u6743\u503c\u5728\u8fd9\u68f5\u91cd\u6784\u6811\u4e0a\u540c\u589e\u540c\u51cf\n\n\u6211\u4eec\u8003\u8651$LCT$\u7684\u672c\u8d28\uff0c$LCT$\u662f\u4ee5\u6df1\u5ea6\u4e3a\u5173\u952e\u5b57\u7684$Splay$\u68ee\u6797\u3002\n\n\u90a3\u4e48\u6b64\u65f6\uff0c\u5728\u91cd\u6784\u6811\u4e0a\uff0c$LCT$\u540c\u65f6\u4e5f\u53ef\u4ee5\u770b\u505a\u4ee5\u6743\u503c\u4e3a\u5173\u952e\u5b57\u7684$Splay$\u68ee\u6797\uff0c\u6b64\u65f6\u7684$Splay$\u5df2\u7ecf\u53ef\u4ee5\u540c\u65f6\u7ef4\u62a4\u5e8f\u5217\u4e0e\u6743\u503c\uff0c\u540c\u65f6\u5177\u6709\u7ef4\u62a4\u5e8f\u5217\u7684\u80fd\u529b\u548c\u5e73\u8861\u6811\u7684\u6027\u8d28\u3002\n\n\u5728\u6784\u5efa\u91cd\u6784\u6811\u7684\u65f6\u5019\u7684\u5e76\u67e5\u96c6\u4e5f\u53ef\u4ee5\u4e0d\u7528\u5199\u4e86\uff0c\u76f4\u63a5\u7528$LCT$\u5224\u65ad\u8fde\u901a\u6027\u3002\n\n\u56de\u5230\u672c\u9898\uff0c\u6211\u4eec\u53d1\u73b0\u8981\u627e\u7684\u662f\u70b9$v$\u56f0\u96be\u503c\u5c0f\u4e8e\u7b49\u4e8e$x$\u7684\u7956\u5148\uff0c\u90a3\u4e48\u6b64\u65f6\u76f4\u63a5\u628a$v$\u5230\u6839\u7684\u8def\u5f84\u63d0\u53d6\u51fa\u6765\u7136\u540e\u5728\u8fd9\u9897$Splay$\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\u4e4b\u540e\u6c42\u5b50\u6811$k$\u5927\u5c31\u662f\u7ebf\u6bb5\u6811\u5408\u5e76\u6216$dfs$\u5e8f\u4e3b\u5e2d\u6811\u677f\u5b50\u4e86\uff0c\u8fd9\u91cc\u7684$LCT$\u4e0d\u9700\u8981$makeroot$\uff0c\u6240\u4ee5\u5e38\u6570\u4e0d\u5927\uff0c\u5199\u8d77\u6765\u4e5f\u5f88\u77ed\u3002\n\n$\\large Code:$\n\n```cpp\nstruct edge {\n\tint u, v, w;\n\tbool operator<(const edge& e)const {\n\t\treturn w < e.w;\n\t}\n}e[1000001];\nint h[200001], n, m, q, cnt, rt[200001], dfn[200001], siz[200001], mp[200001], org[200001], a[200001], mx;\nvector<int>ve[200001];\nstruct node { int fa, child[2], w; }t[200001];\n#define poi(x) (rs(fa(x))==(x))\n#define nroot(x) (ls(fa(x))==(x)||rs(fa(x))==x)\ninl void rotate(int x) {\n\tre f = fa(x), gf = fa(f), fs = poi(x), gfs = poi(f), s = son(x, fs ^ 1);\n\tif (nroot(f))son(gf, gfs) = x;\n\tson(x, fs ^ 1) = f, son(f, fs) = s;\n\tif (s)fa(s) = f;\n\tfa(f) = x, fa(x) = gf;\n}\ninl void splay(int x) {\n\twhile (nroot(x)) {\n\t\tif (nroot(fa(x)))rotate(poi(fa(x)) == poi(x) ? fa(x) : x);\n\t\trotate(x);\n\t}\n}\ninl void access(int x) { for (re i = 0; x; x = fa(i = x)) splay(x), rs(x) = i; }\ninl int getrk(int x, int w) {\n\taccess(x), splay(x);\n\twhile (son(x, w > t[x].w) && t[x].w != w) x = son(x, w > t[x].w);\n\tif (t[x].w < w) {\n\t\tsplay(x), x = rs(x);\n\t\twhile (ls(x))x = ls(x);\n\t}\n\treturn splay(x), x;\n}\ninl int findroot(int x) {\n\taccess(x), splay(x);\n\twhile (ls(x))x = ls(x); splay(x);\n\treturn x;\n}\ninl void kruskal(void) {\n\tsort(e + 1, e + 1 + m);\n\tfor (re i = 1, k = 0; i <= m && k < n - 1; i++) {\n\t\tre x = findroot(e[i].u), y = findroot(e[i].v);\n\t\tif (x != y) k++, t[k + n].w = -e[i].w, fa(x) = fa(y) = k + n, ve[k + n].push_back(x), ve[k + n].push_back(y);\n\t}\n}\n#undef ls\n#undef rs\nstruct stnode { int l, r, w; }st[50000001];\n#define ls(x) st[x].l\n#define rs(x) st[x].r\ninl void upd(int k) { st[k].w = st[ls(k)].w + st[rs(k)].w; }\ninl void add(int &k, int pre, int l, int r, int p) {\n\tif (!k)k = ++cnt;\n\tif (l == r)return (void)(st[k].w = st[pre].w + 1);\n\tre mid = l + r >> 1;\n\tif (p <= mid)add(ls(k), ls(pre), l, mid, p), rs(k) = rs(pre);\n\telse add(rs(k), rs(pre), mid + 1, r, p), ls(k) = ls(pre);\n\tupd(k);\n}\ninl void dfs(int x) {\n\tsiz[x] = 1, dfn[x] = ++dfn[0], mp[dfn[0]] = x;\n\tfor (auto i : ve[x]) dfs(i), siz[x] += siz[i];\n}\ninl int query(int id, int k) {\n\tre pre = rt[dfn[id] - 1], x = rt[dfn[id] + siz[id] - 1];\n\tk = st[x].w - st[pre].w - k + 1;\n\tif (k < 1 || k > st[x].w - st[pre].w)return -1;\n\tre l = 1, r = mx, mid;\n\twhile (l < r) {\n\t\tmid = l + r >> 1;\n\t\tif (st[ls(x)].w - st[ls(pre)].w >= k)x = ls(x), pre = ls(pre), r = mid;\n\t\telse k -= st[ls(x)].w - st[ls(pre)].w, x = rs(x), pre = rs(pre), l = mid + 1;\n\t}\n\treturn a[l];\n}\nsigned main(void) {\n\tn = read<int>(), m = read<int>(), q = read<int>();\n\tfor (re i = 1; i <= n; i++)org[i] = h[i] = read<int>();\n\tfor (re i = 1; i <= m; i++)e[i].u = read<int>(), e[i].v = read<int>(), e[i].w = read<int>();\n\tkruskal(); dfs(findroot(1));\n\tsort(org + 1, org + 1 + n), mx = unique(org + 1, org + 1 + n) - org - 1;\n\tfor (re i = 1; i <= n; i++) {\n\t\tre k = h[i];\n\t\ta[h[i] = lower_bound(org + 1, org + 1 + mx, h[i]) - org] = k;\n\t}\n\tfor (re i = 1; i <= dfn[0]; i++) {\n\t\tif (mp[i] <= n)add(rt[i], rt[i - 1], 1, mx, h[mp[i]]);\n\t\telse rt[i] = rt[i - 1];\n\t}\n\twhile (q--) {\n\t\tre x = read<int>(), w = read<int>(), k = read<int>();\n\t\twriteln(query(getrk(x, -w), k));\n\t}\n}\n```\n\n",
        "postTime": 1570581552,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P4197 Peaks"
    },
    {
        "content": "\u6b63\u89e3: Kruskal\u91cd\u6784\u6811\n\n\u4f46\u662f\u6211\u4e0d\u4f1a\u600e\u4e48\u529e? \u53d1\u73b0\u8fd9\u4e00\u9053\u9898\u4e0d\u9700\u8981\u5f3a\u5236\u5728\u7ebf, \u73c2\u4ee5\u5f3a\u5236\u79bb\u7ebf\u7136\u540e\u7ebf\u6bb5\u6811\u5408\u5e76\u641e......\n\n\u6c5f\u6240\u6709\u67e5\u8be2\u6309\u7167\u6700\u5927\u56f0\u96be\u503c\u6392\u4e2a\u5e8f, \u53d1\u73b0\u6bcf\u4e00\u6b21\u67e5\u8be2\u65f6\u80fd\u8d70\u7684\u8fb9\u53ea\u4f1a\u53d8\u591a\u4e0d\u4f1a\u53d8\u5c11.\n\n\u7136\u540e\u6211\u4eec\u5c31\u9010\u4e2a\u52a0\u5165\u5c31\u597d\u4e86, \u7136\u540e\u52a0\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76\u67e5\u8be2\u5c31\u884c\u4e86.\n\n\u7801\u98ce\u7565\u663e\u6bd2\u7624, \u656c\u8bf7\u89c1\u8c05.\n\n\u4ee3\u7801\u5982\u4e0b:\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<tuple>\n#define mid ((l+r)>>1)\nusing namespace std;\nnamespace fio {\n\tstreambuf* in = cin.rdbuf();\n\tchar bb[1000000], * s = bb, * t = bb;\n#define gc() (s==t&&(t=(s=bb)+in->sgetn(bb,1000000),s==t)?EOF:*s++)\n\tinline int read() {// \u5feb\u8bfb\n\t\tint x = 0;\n\t\tchar ch = gc();\n\t\twhile (ch < 48)ch = gc();\n\t\twhile (ch >= 48)x = x * 10 + ch - 48, ch = gc();\n\t\treturn x;\n\t}\n}using fio::read;\nint n, m, q;\nint arr[100005], brr[100005], fa[100005], root[100005], ans[500005];\nint ls[50000005], rs[50000005], siz[50000005], cnt;\nvoid insert(int& root, int x, int l, int r, int v) {// \u63d2\u5165\u5143\u7d20\n\tsiz[root = ++cnt] = siz[x] + 1;\n\tif (l != r)if (v <= mid)insert(ls[root], ls[x], l, mid, v), rs[root] = rs[x];\n\telse ls[root] = ls[x], insert(rs[root], rs[x], mid + 1, r, v);\n}\nint mergex(int x, int y) {// \u7ebf\u6bb5\u6811\u5408\u5e76\n\tif (!min(x, y))return max(x, y);\n\tsiz[x] = siz[x] + siz[y];\n\tls[x] = mergex(ls[x], ls[y]), rs[x] = mergex(rs[x], rs[y]);\n\treturn x;\n}\nint query(int x, int l, int r, int k) {// \u67e5\u8be2\u7b2ck\u5927\n\tif (k > siz[x])return 0;\n\tif (l == r)return l;\n\telse if (siz[rs[x]] >= k)return query(rs[x], mid + 1, r, k);\n\telse return query(ls[x], l, mid, k - siz[rs[x]]);\n}\ntypedef tuple<int, int, int>mt;\ntypedef tuple<int, int, int, int>mmt;\nmt rds[500005]; mmt ask[500005];// \u79bb\u7ebf\u6570\u7ec4, \u5206\u522b\u662f\u8def\u5f84\u548c\u67e5\u8be2\nint find(int x) { return x == x[fa] ? x : x[fa] = find(x[fa]); }\nvoid merge(int x, int y) {\n\tx = find(x), y = find(y);\n\tif (x == y)return;\n\tfa[y] = x, root[x] = mergex(root[x], root[y]);\n}\nvoid w(int x) {// \u5feb\u901f\u8f93\u51fa\n\tif (x < 0)x = -x, putchar('-');\n\tif (x >= 10)w(x / 10);\n\tputchar(x % 10 + 48);\n}\nint main() {\n\tn = read(), m = read(), q = read();\n\tfor (int i = 1; i <= n; i++)arr[i] = brr[i] = read(), fa[i] = i; brr[0] = -1;\n\tsort(brr + 1, brr + n + 1);\n\tfor (int i = 1; i <= n; i++)arr[i] = lower_bound(brr + 1, brr + n + 1, arr[i]) - brr;// \u79bb\u6563\u5316\n\tfor (int i = 1; i <= n; i++)insert(root[i], 0, 1, n, arr[i]);\n\tfor (int i = 1; i <= m; i++)rds[i] = { read(),read(),read() };\n\tfor (int i = 1; i <= q; i++)ask[i] = { read(),read(),read(),i };\n\tsort(rds + 1, rds + m + 1, [](mt a, mt b)->bool {return get<2>(a) < get<2>(b); }), sort(ask + 1, ask + q + 1, [](mmt a, mmt b)->bool {return get<1>(a) < get<1>(b); });// \u5bf9\u6240\u6709\u8def\u5f84\u548c\u8be2\u95ee\u6392\u5e8f\n\tfor (int i = 1, ptr = 0; i <= q; i++) {\n\t\twhile (get<2>(rds[ptr + 1]) <= get<1>(ask[i]) && ptr < m)ptr++, merge(get<0>(rds[ptr]), get<1>(rds[ptr]));\n\t\tans[get<3>(ask[i])] = brr[query(root[find(get<0>(ask[i]))], 1, n, get<2>(ask[i]))];\n\t}\n\tfor (int i = 1; i <= q; i++)w(ans[i]), putchar('\\n');\n}\n```\n",
        "postTime": 1569813269,
        "uid": 38485,
        "name": "Erina",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "\u770b\u5404\u4f4d\u5927\u4f6c\u90fd\u662f\u5728\u7ebf\u505a\u6cd5\uff0c\u6211\u5c31\u8bb2\u4e00\u8bb2\u79bb\u7ebf\u505a\u6cd5\u3002\n\n\u5148\u5c06\u8be2\u95ee\u4e0e\u8fb9\u90fd\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u5c06\u6743\u503c\u5c0f\u4e8e\u8be2\u95ee\u7684\u8fb9\u90fd\u52a0\u8fdb\u53bb\u3002\u5c31\u662f\u5bf9\u4e8e\u8fd9\u4e9b\u8fb9\uff0c\u82e5\u5b83\u8fde\u7740\u7684\u4e24\u70b9\u4e0d\u5728\u540c\u4e00\u68f5\u5e73\u8861\u6811\u4e0a\uff0c\u5219\u5c06\u8fd9\u4e24\u68f5\u5e73\u8861\u6811\u5408\u5e76\u3002\u6700\u540e\u67e5\u8be2\u7b2cK\u5927\u5c31\u884c\u4e86\u3002\n\n\u4e0a\u4ee3\u7801\uff08\u81ea\u5df1\u89c9\u5f97\u8fd8\u662f\u5199\u5f97\u6bd4\u8f83\u597d\u61c2\uff09\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int maxn=1000000;\nint high[maxn+5],n,fa[maxn],a[maxn][2],num[maxn][2],m,q,root,ans[maxn];\nstruct d{\n\tint x,y,value;\n}c[maxn*5+5];\nstruct e{\n\tint v,x,k,id;\n}b[maxn*5+5];\ninline int read(){\n\tint k=0,g=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-')g=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch<='9'&&ch>='0'){\n\t\tk=k*10+ch-48;\n\t\tch=getchar();\n\t}\n\treturn k*g;\n}\nbool cmp_1(d g,d h){\n\treturn g.value<h.value;\n}\nbool cmp_2(e g,e h){\n\treturn g.x<h.x;\n}\nvoid rot(int x){\n\tint y=fa[x],z=fa[y],l=(x!=a[y][0]),r=l^1;\n\tif(fa[y]){\n\t\tif(a[z][0]==y)a[z][0]=x;\n\t\telse a[z][1]=x;\n\t}\n\telse root=x;\n\tfa[x]=z;fa[y]=x;fa[a[x][r]]=y;\n\ta[y][l]=a[x][r];\n\tnum[y][l]=num[x][r];\n\ta[x][r]=y;\n\tnum[x][r]=num[y][0]+num[y][1]+1;\n}\nvoid splay(int x){\n\tint y,z;\n\twhile(fa[x]){\n\t\ty=fa[x],z=fa[y];\n\t\tif(z){\n\t\t\tif(x==a[y][0]^y==a[z][0])rot(x);\n\t\t\telse rot(y);\n\t\t}\n\t\trot(x);\n\t}\n}\nvoid insert(int x){\n\tint p=root,f=0;\n\twhile(p){\n\t\tf=p;\n\t\tif(high[x]<high[p]){\n\t\t\t++num[p][0];\n\t\t\tp=a[p][0];\n\t\t}\n\t\telse {\n\t\t\t++num[p][1];\n\t\t\tp=a[p][1];\n\t\t}\n\t}\n\tfa[x]=f;\n\tif(!f)return;\n\tif(high[x]<high[f])a[f][0]=x;\n\telse a[f][1]=x;\n\tsplay(x);\n}\nint ask(int now,int k){\n\tif(!now)return -1;\n\tif(num[now][1]+num[now][0]+1<k)return -1;\n\tif(num[now][1]+1==k)return high[now];\n\tif(num[now][1]>=k)return ask(a[now][1],k);\n\telse return ask(a[now][0],k-num[now][1]-1);\n}\nvoid merge(int y){//\u4e00\u5b9a\u8981\u5148\u63d2\u5165\u513f\u5b50\uff0c\u518d\u63d2\u5165\u8fd9\u4e2a\u70b9 \n\tif(a[y][0])merge(a[y][0]);\n\tif(a[y][1])merge(a[y][1]);\n\ta[y][0]=a[y][1]=0;\n\tnum[y][0]=num[y][1]=0;\n\tinsert(y);\n}\nint main(){\n\tn=read();\n\tm=read();\n\tq=read();\n\tfor(register int i=1;i<=n;++i){\n\t\thigh[i]=read();\n\t}\n\tfor(register int i=1;i<=m;++i){\n\t\tc[i]=(d){read(),read(),read()};\n\t}\n\tfor(register int i=1;i<=q;++i){\n\t\tb[i]=(e){read(),read(),read(),i};\n\t}\n\tsort(c+1,c+1+m,cmp_1);\n\tsort(b+1,b+1+q,cmp_2);\n\tint now=1;\n\tfor(register int i=1;i<=q;++i){\n\t\twhile(now<=m&&c[now].value<=b[i].x){\n\t\t\tsplay(c[now].x);\n\t\t\tint g=c[now].y;\n\t\t\twhile(fa[g])g=fa[g];//\u770b\u662f\u5426\u5728\u540c\u4e00\u68f5\u6811\u91cc \n\t\t\tif(g==c[now].x){\n\t\t\t\t++now;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tsplay(c[now].y);\n\t\t\tif(num[c[now].y][0]+num[c[now].y][1]<num[c[now].x][0]+num[c[now].y][1]){//\u542f\u53d1\u5f0f\u5408\u5e76 \n\t\t\t\troot=c[now].x;\n\t\t\t\tmerge(c[now].y);\n\t\t\t}\n\t\t\telse {\n\t\t\t\troot=c[now].y;\n\t\t\t\tmerge(c[now].x);\n\t\t\t}\n\t\t\t++now;\n\t\t}\n\t\tsplay(b[i].v);\n\t\tans[b[i].id]=ask(b[i].v,b[i].k);\n\t}\n\tfor(register int i=1;i<=q;++i)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1546129054,
        "uid": 103680,
        "name": "\u6d6a\u8d31\u5723",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    },
    {
        "content": "# Peaks \u7ebf\u6bb5\u6811\u5408\u5e76\n\n[$\\text{My Blog}$](https://www.cnblogs.com/santiego/p/11752328.html)\n\n\u7ebf\u6bb5\u6811\u5408\u5e76\u597d\u9898\u3002~~\u540a\u6253\u4e3b\u5e2d\u6811\u3001Kruskal\u91cd\u6784\u6811\u7684\u5178\u8303~~\n\n\u9996\u5148\u53d1\u73b0\u53ef\u4ee5\u79bb\u7ebf\uff0c\u6211\u4eec\u5c06\u6240\u6709\u8be2\u95ee\u6309$x$\u6392\u5e8f\uff0c\u968f\u7740\u8be2\u95ee\u518d\u53bb\u52a0\u8fb9\uff0c\u8fd9\u6837\u53ef\u4ee5\u53bb\u6389\u8def\u5f84\u4e0a$h_i\\le x$\u8fd9\u4e00\u6761\u4ef6\u4f7f\u95ee\u9898\u6781\u5927\u7b80\u5316\u3002\n\n\u7136\u540e\u4ece$v_i$\u5f00\u59cb\u80fd\u7ecf\u8fc7\u7684\u6240\u6709\u5c71\u5cf0\u53ef\u4ee5\u770b\u505a\u8054\u901a\u5757\uff0c\u4e8e\u662f\u6211\u4eec\u6109\u5feb\u5730\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u67e5\u8be2\u7b2c$k$\u5927\uff0c\u5408\u5e76\u8054\u901a\u5757\u65f6\u5408\u5e76\u6743\u503c\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\u5f88\u50cf[[HNOI2012]\u6c38\u65e0\u4e61](https://www.luogu.org/problem/P3224)\u3002\n\n\u53e6\u5916\u6ce8\u610f\u6b64\u9898\u662f\u67e5\u8be2\u7b2c$k$\u5927\uff0c\u4e0d\u662f\u7b2c$k$\u5c0f\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define MAXN 100010\n#define MAXM 500005\nusing namespace std;\nint n,m,q;\ninline int read(){\n    char ch=getchar();int s=0;\n    while(ch<'0'||ch>'9') ch=getchar();\n    while(ch>='0'&&ch<='9') s=s*10+ch-'0', ch=getchar();\n    return s;\n}\nint h[MAXN],h_sort[MAXN],rnk[MAXN];\nstruct nod{\n    int u,v,val;\n} edge[MAXM];\nbool cmp_nod(const nod &a, const nod &b){\n    return a.val<b.val;\n}\nstruct question{\n    int v,x,k;\n    int id;\n} qs[MAXM];\nbool cmp_qs(const question &a, const question &b){\n    return a.x<b.x;\n}\nint res[MAXM];\nint fa[MAXN];\nint get_fa(int x){\n    if(fa[x]==x) return x;\n    return fa[x]=get_fa(fa[x]);\n}\n#define MAXT MAXN*20\nint rot[MAXN],tot,s;\nint tre[MAXT],sl[MAXT],sr[MAXT];\nvoid change(int &x, int l, int r, int pos){\n    if(x==0) x=++tot;\n    tre[x]+=1;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    if(pos<=mid) change(sl[x], l, mid, pos);\n    else change(sr[x], mid+1, r, pos);\n}\nint query(int x, int l, int r, int k){\n    if(x==0||tre[x]<k) return 0; // \u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de0\n    if(l==r) return l;\n    int mid=(l+r)>>1;\n    if(tre[sr[x]]>=k) return query(sr[x], mid+1, r, k); // \u627e\u7b2ck\u5927\u6240\u4ee5\u5148\u627e\u53f3\u513f\u5b50\n    else return query(sl[x], l, mid, k-tre[sr[x]]);\n}\nint merge(int a, int b, int l, int r){\n    if(a==0||b==0) return a+b;\n    if(l==r){\n        tre[a]+=tre[b];\n        return a;\n    }\n    int mid=(l+r)>>1;\n    sl[a]=merge(sl[a], sl[b], l, mid);\n    sr[a]=merge(sr[a], sr[b], mid+1, r);\n    tre[a]=tre[sl[a]]+tre[sr[a]]; // \u8bb0\u5f97\u5408\u5e76\u540e\u66f4\u65b0\n    return a;\n}\nvoid merge_edge(int x){\n    int fa1=get_fa(edge[x].u),fa2=get_fa(edge[x].v);\n    if(fa1==fa2) return; // \u5982\u679c\u5df2\u7ecf\u90fd\u8054\u901a\u4e86\u5219\u4e0d\u9700\u8981\u5408\u5e76\u7ebf\u6bb5\u6811\u4e86\n    fa[fa2]=fa1;\n    rot[fa1]=merge(rot[fa1], rot[fa2], 1, s);\n}\nint main(){\n    n=read(),m=read(),q=read();\n    for(int i=1;i<=n;++i) fa[i]=i;\n    for(int i=1;i<=n;++i) h_sort[i]=h[i]=read();\n    sort(h_sort+1, h_sort+1+n);\n    s=unique(h_sort+1, h_sort+1+n)-(h_sort+1);\n    for(int i=1;i<=n;++i){\n        rnk[i]=lower_bound(h_sort+1, h_sort+1+s, h[i])-h_sort; // \u79bb\u6563\u5316\n        change(rot[i], 1, s, rnk[i]);\n    }\n    for(int i=1;i<=m;++i) edge[i].u=read(),edge[i].v=read(),edge[i].val=read();\n    sort(edge+1, edge+1+m, cmp_nod);\n    for(int i=1;i<=q;++i) qs[i].v=read(),qs[i].x=read(),qs[i].k=read(),qs[i].id=i;\n    sort(qs+1, qs+1+q, cmp_qs);\n    int pos=1;\n    for(int i=1;i<=q;++i){\n        int x=qs[i].x,v=qs[i].v,k=qs[i].k;\n        while(pos<=m&&edge[pos].val<=x) merge_edge(pos),++pos; // \u628a\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u8fb9\u52a0\u5165\n        int ans=query(rot[get_fa(v)], 1, s, k);\n        if(ans==0) res[qs[i].id]=-1;\n        else res[qs[i].id]=h_sort[ans]; // \u6700\u540e\u7b54\u6848\u4e0d\u662f\u4e0b\u6807\u800c\u662f\u5bf9\u5e94\u7684\u503c\n    }\n    for(int i=1;i<=q;++i) printf(\"%d\\n\", res[i]);\n    return 0;\n}\n\n```\n\n\n",
        "postTime": 1572246260,
        "uid": 63896,
        "name": "Santiego",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4197 \u3010Peaks\u3011"
    }
]