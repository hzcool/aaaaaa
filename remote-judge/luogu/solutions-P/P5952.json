[
    {
        "content": "## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u9ad8\u4e3a$H$\u7684\u6c34\u7bb1\uff0c\u6c34\u7bb1\u88ab\u5212\u5206\u4e3a$n*m$\u4e2a\u683c\u5b50\uff0c\u6bcf\u4e2a\u76f8\u90bb\u7684\u683c\u5b50\u4e4b\u95f4\u90fd\u6709\u4e00\u5835\u5899\uff0c\u9ad8\u5ea6\u4e3a$h_i$\uff0c\u6bcf\u4e2a\u683c\u5b50\u9ad8\u5ea6\u90fd\u662f$[0,H]$\u4e4b\u95f4\u7684\u6574\u6570\uff0c\u6c42\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u7684\u6c34\u4f4d\u60c5\u51b5\u3002\n\n## \u5206\u6790\n- \u6211\u4eec\u5c06\u6bcf\u5835\u5899\u770b\u4f5c\u8fb9\uff0c\u8fb9\u7684\u8fb9\u6743\u4e3a\u5899\u7684\u9ad8\u5ea6\uff0c\u518d\u628a\u5899\u4e24\u8fb9\u7684\u683c\u5b50\u770b\u4f5c\u70b9\uff0c\u53ef\u4ee5\u53d1\u73b0\u53ea\u6709\u8fd9\u5f20\u56fe\u4e0a\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u624d\u662f\u4f1a\u5bf9\u7b54\u6848\u6709\u5f71\u54cd\u7684\uff0c\u6211\u4eec\u6765\u8bc1\u660e\u4e00\u4e0b\u8fd9\u4e2a\u4e1c\u897f\u3002\n\n- \u8bbe\u5df2\u7ecf\u6709\u4e24\u4e2a\u70b9 $x$\uff0c$y$\uff0c\u88ab\u6211\u4eec\u6240\u9009\u4e2d\uff0c\u8fd9\u4e24\u4e2a\u70b9\u6240\u5904\u7684\u8fde\u901a\u5757\u7684\u9ad8\u5ea6\u4e3a $h$\uff0c\u6b64\u65f6\u6709\u4e00\u6761\u8fb9\u80fd\u4f7f $x$\uff0c$y$ \u76f8\u8fde\uff0c\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u4e3a $h'$\uff0c\u82e5 $h'>h$\uff0c\u5219\u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u6700\u9ad8\u7684\u80fd\u4e0d\u76f8\u540c\u7684\u6c34\u4f4d\u9ad8\u5ea6\u4e5f\u53ea\u80fd\u4e3a$h$\uff0c\u6240\u4ee5$h'$\u5bf9\u7b54\u6848\u6ca1\u6709\u8d21\u732e\u3002\n\n- \u5f53\u6211\u4eec\u77e5\u9053\u4e86\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6765\u505a\u8fd9\u9053\u9898\u4e86\u3002\u6211\u4eec\u5148\u628a\u8fb9\u6309\u7167\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u5bf9\u4e8e\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7ed3\u70b9 $u$\uff0c$v$\uff0c\u82e5\u8fd9\u4e24\u4e2a\u70b9\u4e0d\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0c\u6211\u4eec\u5c31\u8003\u8651\u5408\u5e76\u5b83\u4eec\u7684\u7b54\u6848\uff0c\u8bbe $f_u$ \u548c $f_v$ \u5206\u522b\u4e3a\u4e24\u4e2a\u8054\u901a\u5757\u7684\u7b54\u6848\uff0c$h_u$ \u548c $h_v$ \u4e3a\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u6700\u9ad8\u9ad8\u5ea6\uff0c$v$ \u4e3a\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u5219\u65b0\u7684\u8054\u901a\u5757\u7684\u7b54\u6848\u5c31\u4e3a $(f_u+v-h_u)*(f_v+v-h_v)$\uff0c\u56e0\u4e3a\u5de6\u8fb9\u8fde\u901a\u5757\u7684\u6700\u9ad8\u9ad8\u5ea6\u672c\u6765\u4e3a $h_u$\uff0c\u73b0\u5728\u6700\u9ad8\u9ad8\u5ea6\u53d8\u4e3a $v$\uff0c\u90a3\u4e48\u5de6\u8fb9\u7684\u65b9\u6848\u5c31\u589e\u52a0\u4e86 $v-h_u$\uff0c\u53f3\u8fb9\u4e5f\u662f\u540c\u7406\uff0c\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u5373\u53ef\u5f97\u5230\u4e0a\u9762\u7684\u5f0f\u5b50\uff0c\u90a3\u4e48\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9') {if(c=='-') f=-1;c=getchar();};\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=(x<<3)+(x<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn x*f;\n}\n#define ll long long\nconst int N=5e5+5,mod=1e9+7;\nstruct edge\n{\n\tint x,y,v;\n}e[N<<1];\nint cnt;\nbool mycmp(edge x,edge y)\n{\n\treturn x.v<y.v;\n}\nint f[N];\nint get(int x)\n{\n\tif(x^f[x]) f[x]=get(f[x]);\n\treturn f[x];\n}\nint n,m,H,ans[N],h[N];\nint ya(int x,int y)\n{\n\treturn (x-1)*m+y;\n}\nint main()\n{\n\tn=read(),m=read(),H=read();\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<m;j++)\n\t\t{\n\t\t\tint x=ya(i,j),y=ya(i,j+1),v=read();\n\t\t\te[++cnt]={x,y,v}; \n\t\t}\n\tfor(int i=1;i<n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tint x=ya(i,j),y=ya(i+1,j),v=read();\n\t\t\te[++cnt]={x,y,v};\n\t\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tint x=ya(i,j);\n\t\t\tf[x]=x;\n\t\t\tans[x]=1;\n\t\t}\n\tsort(e+1,e+cnt+1,mycmp);\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\tint x=get(e[i].x),y=get(e[i].y),v=e[i].v;\n\t\tif(x^y)\n\t\t{\n\t\t\tf[y]=x;\n\t\t\tans[x]=1ll*(ans[x]-h[x]+v)*(ans[y]-h[y]+v)%mod;\n\t\t\th[x]=v;\n\t\t}\n\t}\n\tint x=get(1);\n\tprintf(\"%d\\n\",(ans[x]-h[x]+H)%mod);\n\treturn 0;\n}\n```\n",
        "postTime": 1595942803,
        "uid": 72043,
        "name": "jdsb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5952 \u3010[POI2018]\u6c34\u7bb1\u3011"
    },
    {
        "content": "## POI2018 \u6c34\u7bb1 \u9898\u89e3\n\n##### $\\text{Description}$\n\n\u5df2\u77e5\u6709\u4e00\u4e2a $n\\times m\\times H$ \u7684\u957f\u65b9\u4f53\uff0c\u5bf9\u4e8e\u6c34\u5e73\u9762\u4e0a\u7684\u76f8\u90bb\u4e24\u683c\u95f4\uff0c\u4f1a\u6709\u4e00\u5835\u539a\u5ea6\u5ffd\u7565\u4e0d\u8ba1\u7684\u5899\uff0c\u4ece\u6700\u4f4e\u4e00\u5c42\u5f00\u59cb\uff0c\u5230\u7b2c $h_{i,j}\\ge 1$ \u5c42\u3002\n\n\u5b9a\u4e49\u4e00\u79cd\u88c5\u6c34\u65b9\u5f0f\u662f\u5408\u6cd5\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\uff1a\n\n1. \u67d0\u4e00\u4e2a\u683c\u5b50\u88c5\u4e86\u6c34\uff0c\u5219\u5b83\u662f\u6700\u4f4e\u4e00\u5c42\u7684\u683c\u5b50\u6216\u8005\u5176\u7ad6\u76f4\u5411\u4e0b\u7684\u683c\u5b50\u88c5\u4e86\u6c34\u3002\n2. \u67d0\u4e00\u4e2a\u683c\u5b50\u88c5\u4e86\u6c34\uff0c\u5219\u5b83\u5728\u6c34\u5e73\u9762\u4e0a\u7684\u76f8\u90bb\u56db\u4e2a\u683c\u5b50\u8981\u4e48\u662f\u6c34\uff0c\u8981\u4e48\u4e2d\u95f4\u6709\u5835\u5899\u3002\n\n\u6c42\u6709\u591a\u5c11\u79cd\u5408\u6cd5\u7684\u88c5\u6c34\u65b9\u5f0f\uff0c\u5bf9 $10^9+7$ \u53d6\u6a21\u3002\n\n$n\\times m\\le 5\\times 10^5,H\\le 10^9$\n\n##### $\\text{Solution}$\n\n\u8003\u8651\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u6709\u5899\uff0c\u5219\u5b83\u7684\u6b63\u4e0b\u65b9\u5fc5\u7136\u6709\u5899\uff08\u6216\u8005\u662f\u6700\u5e95\u4e00\u5c42\uff09\uff0c\u90a3\u4e48\u4ece\u4e0b\u5411\u4e0a\u8ba1\u7b97\u7684\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u53ef\u4ee5\u770b\u6210\u4e0d\u65ad\u53bb\u6389\u4e00\u5835\u5899\uff0c\u5176\u5b9e\u5c31\u662f\u8ba9\u4e24\u4e2a\u683c\u5b50\u8fde\u901a\u7684\u64cd\u4f5c\uff0c\u7531\u4e8e\u5899\u7684\u9ad8\u5ea6\u81f3\u5c11\u4e3a $1$\uff0c\u6545\u4e00\u5f00\u59cb\u6240\u6709\u683c\u5b50\u90fd\u4e0d\u8fde\u901a\u3002\u5bf9\u4e8e\u67d0\u4e00\u5c42 $h$\uff0c\u6211\u4eec\u53d1\u73b0\u9ad8\u5ea6\u5927\u4e8e\u7b49\u4e8e $h$ \u7684\u5899\u4f1a\u5c06\u8be5\u5e73\u9762\u5206\u6210\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u8fde\u901a\u5757\uff0c\u82e5\u67d0\u4e00\u4e2a\u88c5\u7684\u6c34\u9ad8\u5ea6\u5927\u4e8e\u7b49\u4e8e $h$\uff0c\u5219\u8be5\u8fde\u901a\u5757\u5185\u7684\u6240\u6709\u683c\u5b50\u88c5\u7684\u6c34\u90fd\u76f8\u7b49\u3002\n\n\u6362\u8a00\u4e4b\uff0c\u6211\u4eec\u8bbe\u67d0\u4e2a\u8fde\u901a\u5757\u88c5\u6c34\u7684\u65b9\u6848\u6570\u4e3a $f_i$\uff0c\u8be5\u8fde\u901a\u5757\u5185\u7684\u6700\u9ad8\u7684\u5899\u9ad8\u5ea6 $h_i$\uff0c\u5219\u67d0\u6b21\u53bb\u6389\u4e00\u5835\u9ad8\u5ea6\u4e3a $h$ \u7684\u5899\u65f6\uff0c\u4e0d\u59a8\u8bbe\u5b83\u8ba9 $x,y$ \u4e24\u4e2a\u8fde\u901a\u5757\u8fde\u901a\u4e86\uff08\u82e5\u4e24\u8005\u5df2\u8fde\u901a\u5219\u65e0\u9700\u8003\u8651\uff09\uff0c\u90a3\u4e48\u65b0\u8fde\u901a\u5757 $t$ \u7684\u65b9\u6848\u6570\u6b63\u662f $f_t=f_xf_y+f_x(h-h_y)+f_y(h-h_x)=(f_x+h-h_x)\\times(f_y+h-h_y)$\uff0c\u5373\u4e24\u8005\u88c5\u7684\u6c34\u9ad8\u5ea6\u90fd\u4e0d\u8d85\u8fc7\u5404\u81ea\u5185\u90e8\u6700\u9ad8\u7684\u5899\uff0c\u67d0\u4e00\u4e2a\u8d85\u8fc7\u4e86\uff0c\u4e24\u8005\u90fd\u8d85\u8fc7\u4e86\u7684\u65b9\u6848\u6570\u4e4b\u548c\u3002\n\n\u6ce8\u610f\u5230\u6211\u4eec\u53ea\u9700\u8ba9\u4e24\u4e2a\u8fde\u901a\u5757\u8fde\u901a\uff0c\u6545\u91c7\u7528\u5e76\u67e5\u96c6\uff0c\u5e76\u5728\u4ee3\u8868\u5143\u5904\u7ef4\u62a4 $f$ \u5373\u53ef\u3002\n\n\u6700\u540e\u9700\u5c06\u6240\u6709\u8fde\u901a\u5757\u7684\u7b54\u6848\u52a0\u4e0a $H-h_x$ \u540e\u518d\u76f8\u4e58\uff0c\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u89c1\u4ee3\u7801\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(nm\\log(nm))$\u3002\n\n##### $\\text{Code}$\n\n```cpp\n#include<bits/stdc++.h>\n#define REG register\nusing namespace std;\nconst int Mod=1000000007,N=500005;\ninline void read(int& x){\n    static char c;\n    while(!isdigit(c=getchar()));x=c^48;\n    while(isdigit(c=getchar()))x=(x*10)+(c^48);\n}\ninline void Add(int& a,int b){(a+=b)>=Mod?a-=Mod:a;}\n\nint n,m,H,tot,w;\nstruct Wal{int P1,P2,Hi;}W[N<<1];\ninline bool cmp(Wal x,Wal y){return x.Hi<y.Hi;}\n\nint Val[N],Fat[N],L1[N];\ninline void Init(){for(REG int i=1;i<=n*m;++i)Fat[i]=i,Val[i]=1,L1[i]=0;}\nint GetF(int now){return now==Fat[now]?now:Fat[now]=GetF(Fat[now]);}\n\ninline void Work(){\n    read(n),read(m),read(H),Init();\n    for(REG int i=1;i<=n;++i)\n        for(REG int j=1;j<m;++j)\n            read(w),W[++tot]=(Wal){(i-1)*m+j,(i-1)*m+j+1,w};\n    for(REG int i=1;i<n;++i)\n        for(REG int j=1;j<=m;++j)\n            read(w),W[++tot]=(Wal){(i-1)*m+j,i*m+j,w};\n    sort(W+1,W+tot+1,cmp);\n    for(REG int i=1;i<=tot;++i){\n        int x=W[i].P1,y=W[i].P2,h=W[i].Hi;\n        int Fx=GetF(x),Fy=GetF(y);\n        if(Fx==Fy) continue;\n        Add(Val[Fx],h-L1[Fx]),Add(Val[Fy],h-L1[Fy]);\n        Fat[Fx]=Fy,Val[Fy]=1ll*Val[Fy]*Val[Fx]%Mod,L1[Fy]=h;\n    }\n    int Ans=1;\n    for(REG int i=1;i<=n*m;++i)\n        if(Fat[i]==i) Add(Val[i],H-L1[i]),Ans=1ll*Ans*Val[i]%Mod;\n    printf(\"%d\\n\",Ans);\n}\n\nint main(){Work();}\n```\n\n",
        "postTime": 1606924596,
        "uid": 83547,
        "name": "LCuter",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5952 \u3010[POI2018]\u6c34\u7bb1\u3011"
    },
    {
        "content": "\n\n### Description\n\n\u5730\u9762\u4e0a\u6709\u4e00\u9ad8\u4e3aH\u7684\u6c34\u7bb1\uff0c\u4fef\u89c6\u56fe\u88ab\u5212\u5206\u6210\u4e86n\u884cm\u5217\u4e2a\u65b9\u683c\u3002\u5df2\u77e5\u6c34\u7bb1\u5185\u6bcf\u4e2a\u683c\u5b50\u7684\u9ad8\u5ea6\u90fd\u662f $[0,H]$ \u4e4b\u95f4\u7684\u6574\u6570\uff0c\u6c42\u6709\u591a\u5c11\u53ef\u80fd\u7684\u6c34\u4f4d\u60c5\u51b5\u3002\n\n\n\n\n### Solution\n\n\u89c2\u5bdf\u9898\u76ee\u53ef\u4ee5\u53d1\u73b0\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u683c\u5b50\u770b\u4f5c\u56fe\u4e0a\u7684\u70b9\uff0c\u683c\u5b50\u95f4\u7684\u9694\u677f\u770b\u4f5c\u8fb9\uff0c\u9694\u677f\u9ad8\u5ea6\u8bbe\u4e3a\u8fb9\u6743\uff0c\u5219\u9898\u76ee\u4e2d\u7684\u6a21\u578b\u662f\u4e00\u4e2a\u7f51\u683c\u56fe\u3002\n\n\u5bf9\u4e8e\u56fe\u4e0a\u7684\u4efb\u610f\u4e00\u70b9\uff0c\u53ea\u8981\u5176\u6c34\u4f4d\u9ad8\u5ea6\u8d85\u8fc7\u76f8\u8fde\u8fb9\u6743\u7684\u6700\u5c0f\u503c\u5c31\u4f1a\u548c\u5468\u56f4\u8282\u70b9\u4e00\u81f4\u3002\u56e0\u6b64\u8003\u8651\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\uff0c\u7528\u7c7b\u4f3ckruskal\u7684\u65b9\u6cd5\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u4f9d\u6b21\u8fdb\u884c\u5408\u5e76\uff0c\u540c\u65f6\u7ef4\u62a4\u8fde\u901a\u5757\u5185\u7684\u8fb9\u6743\u6700\u5927\u503c\u548c\u65b9\u6848\u6570\u3002\n\n\u5728\u5bf9\u4e24\u4e2a\u8fde\u901a\u5757\u8fdb\u884c\u5408\u5e76\u65f6\uff0c\u8bbe\u4e24\u8fde\u901a\u5757\u65b9\u6848\u6570\u5206\u522b\u4e3a $g_x,g_y$ \uff0c\u6700\u5927\u8fb9\u6743\u4e3a $mx_x,mx_y$\uff0c \u8fdb\u884c\u5408\u5e76\u7684\u8fb9\u6743\u4e3a $val$ \uff0c\u5219\u65b0\u8fde\u901a\u5757\u65b9\u6848\u4e3a $(g_x+val-mx_x) \\cdot (g_y+val-mx_y)$ \u3002\u53ef\u4ee5\u7531\u6b64\u6c42\u89e3\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nchar buf[10000001],*ptr=buf-1;\n\ninline int read()\n{\n\tint x=0,c=getchar();\n\twhile(c<48) c=*++ptr;\n\twhile(c>47) x=x*10+c-'0',c=*++ptr;\n\treturn x;\n}\n\ntypedef long long ll;\nconst int MOD = 1e9+7;\nconst int MAXN = 500005;\nstruct Edge {int u,v,w;} e[MAXN*2];\nll fa[MAXN],g[MAXN],mx[MAXN];\nint n,m,h,cnt;\n\nbool operator < (Edge a,Edge b)\n{return a.w<b.w;}\n\ninline ll calc(int x,int y)\n{return g[x]-mx[x]+y;}\n\ninline int find(int x)\n{return fa[x]^x ? fa[x]=find(fa[x]) : x;}\n\nint main(int argc, char const *argv[])\n{\n\tfread(buf,1,sizeof(buf),stdin)[buf]=0;\n\tn=read(); m=read(); h=read();\n\tfor(int i=1; i<=n; ++i)\n\t\tfor(int j=1,x=(i-1)*m; j<m; ++j)\n\t\t\te[++cnt]=Edge{x+j,x+j+1,read()};\n\tfor(int i=1; i<n; ++i)\n\t\tfor(int j=1,x=(i-1)*m; j<=m; ++j)\n\t\t\te[++cnt]=Edge{x+j,x+j+m,read()};\n\tsort(e+1,e+cnt+1);\n\tfor(int i=1; i<=n; ++i)\n\t\tfor(int j=1,x=(i-1)*m; j<=m; ++j)\n\t\t\tfa[x+j]=x+j,g[x+j]=1;\n\tfor(int i=1; i<=cnt; ++i)\n\t{\n\t\tint fx=find(e[i].u),fy=find(e[i].v),val=e[i].w;\n\t\tif(fx^fy)\n\t\t{\n\t\t\tg[fx]=1ll*calc(fx,val)*calc(fy,val)%MOD;\n\t\t\tfa[fy]=fx; mx[fx]=val;\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",calc(find(1),h)%MOD);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1591509974,
        "uid": 107735,
        "name": "shiroi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5952 \u3010[POI2018]\u6c34\u7bb1\u3011"
    },
    {
        "content": "#### \u9898\u610f\n\n\u6709\u4e00\u4e2a\u5927\u5c0f $n\\times m$ ($1\\le n\\cdot m\\le 5\\cdot 10^5$)\uff0c\u9ad8 $H$ \u7684\u6c34\u7bb1\uff0c\u6bcf\u76f8\u90bb\u4e24\u683c\u4e4b\u95f4\u6709\u4e00\u5835\u5899\uff0c\u6c42\u6240\u6709\u683c\u5b50\u6c34\u4f4d\u60c5\u51b5\u7684\u65b9\u6848\u6570\u3002\n\n#### \u9898\u89e3\n\nKruskal \u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u540c\u65f6\u7ef4\u62a4\u65b9\u6848\u6570\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(nm\\log nm)$\u3002\n\n#### \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\nconst int P = 1000000007;\nint n, m, h;\nstd::vector<int> fa, height, count;\nstruct Edge {\n    int u, v, w;\n    Edge(int u, int v, int w) : u(u), v(v), w(w) {}\n};\nbool operator<(const Edge &lhs, const Edge &rhs) {\n    return lhs.w < rhs.w;\n}\nstd::vector<Edge> edges;\nint find(int u) {\n    while (fa[u] >= 0 && fa[fa[u]] >= 0)\n        u = fa[u] = fa[fa[u]];\n    return fa[u] >= 0 ? fa[u] : u;\n}\nvoid merge(int u, int v, int ht) {\n    u = find(u);\n    v = find(v);\n    if (u == v)\n        return;\n    if (fa[u] > fa[v])\n        std::swap(u, v);\n    count[u] = 1ll * (count[u] + ht - height[u]) * (count[v] + ht - height[v]) % P;\n    fa[u] += fa[v];\n    fa[v] = u;\n    height[u] = ht;\n}\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    std::cin >> n >> m >> h;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m - 1; ++j) {\n            int x;\n            std::cin >> x;\n            edges.push_back(Edge(i * m + j, i * m + j + 1, x));\n        }\n    }\n    for (int i = 0; i < n - 1; ++i) {\n        for (int j = 0; j < m; ++j) {\n            int x;\n            std::cin >> x;\n            edges.push_back(Edge(i * m + j, (i + 1) * m + j, x));\n        }\n    }\n    std::sort(edges.begin(), edges.end());\n    fa.assign(n * m, -1);\n    count.assign(n * m, 1);\n    height.resize(n * m);\n    for (int i = 0; i < int(edges.size()); ++i)\n        merge(edges[i].u, edges[i].v, edges[i].w);\n    int u = find(0);\n    std::cout << (count[u] + h - height[u]) % P << \"\\n\";\n    return 0;\n}\n\n```\n\n",
        "postTime": 1582612526,
        "uid": 149656,
        "name": "jiangly",
        "ccfLevel": 10,
        "title": "P5952 [POI2018]\u6c34\u7bb1 \u9898\u89e3"
    }
]