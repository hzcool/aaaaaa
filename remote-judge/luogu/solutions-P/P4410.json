[
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4410)\n\n~~\u65e2\u7136\u6ca1\u4eba\u5199\u9898\u89e3\u90a3\u6211\u6765\u6c34\u4e00\u53d1~~\n\n\u8003\u8651\u6bcf\u4e2a\u5c9b\u6240\u6784\u6210\u7684\u56fe\uff1a\u4e00\u4e2a\u5c9b\u4e0a\u8981\u4e48\u4e00\u79cd\u751f\u7269\uff0c\u8981\u4e48\u6709\u4e09\u79cd\u751f\u7269\u3002\n\n\u8bc1\u660e\uff1a\n\n1. \u5982\u679c\u662f\u4e24\u79cd\u751f\u7269\uff0c\u4ed6\u4fe9\u6ca1\u6709\u516c\u5171\u670b\u53cb\uff0c\u6392\u9664\uff1b\n2. \u5982\u679c\u751f\u7269\u6570 $\\ge 4$\uff0c\u8003\u8651\u5728 $3$ \u79cd\u751f\u7269\u7684\u57fa\u7840\u4e0a\u63d2\u5165\u7b2c $4$ \u79cd\uff0c\u524d\u4e09\u79cd\u751f\u7269\u4e00\u5b9a\u662f\u4e2a\u73af\uff0c\u7531\u4e8e\u7b2c $4$ \u79cd\u751f\u7269\u4e00\u5b9a\u8981\u548c\u8fd9\u4e09\u79cd\u751f\u7269\u5404\u6709\u4e00\u4e2a\u516c\u5171\u670b\u53cb\uff0c\u6700\u5c11\u9700\u8981\u518d\u5411\u4e24\u4e2a\u751f\u7269\u8fde\u8fb9\uff0c\u5047\u8bbe\u548c\u7b2c $1,2$ \u79cd\u751f\u7269\u8fde\u8fb9\uff0c\u8fd9\u6837\u5bfc\u81f4\u5b83\u548c\u7b2c $3$ \u79cd\u751f\u7269\u6709\u4e24\u4e2a\u516c\u5171\u670b\u53cb\uff0c\u6240\u4ee5\u4e00\u5b9a\u4e0d\u4f1a\u6709\u8d85\u8fc7\u56db\u79cd\u751f\u7269\u3002\n\n\u7531\u4e8e\u6bcf\u4e2a\u5c9b\u53ea\u6d3e\u51fa\u4e00\u4e2a\u751f\u7269\u4f5c\u4e3a\u4ee3\u8868\u8fde\u5927\u73af\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5c9b\u548c\u5927\u73af\u53ea\u6709\u4e00\u4e2a\u516c\u5171\u70b9\uff0c\u6ca1\u6709\u516c\u5171\u8fb9\u3002\u8fd9\u6837\u539f\u9898\u4e2d\u7684\u56fe\u5c31\u662f\u4e00\u68f5\u4ed9\u4eba\u638c\uff0c\u95ee\u9898\u4e5f\u8f6c\u6362\u4e3a\u4e86\u4ed9\u4eba\u638c\u72ec\u7acb\u96c6\u95ee\u9898\u3002\n\n\u8bbe $f[i][1/0]$ \u8868\u793a\u4e00\u4e2a\u70b9\u9009/\u4e0d\u9009\uff0c\u5b50\u6811\u6700\u5927\u7b54\u6848\u3002\u5982\u679c\u9047\u5230\u73af\uff0c\u5c31\u628a\u73af\u8f6c\u5316\u4e3a\u94fe\uff0c\u5047\u5b9a\u94fe\u5e95\u9009/\u4e0d\u9009\u5206\u522b dp\uff0c\u6c42\u51fa $4$ \u79cd\u60c5\u51b5\u8f6c\u79fb\u5230\u7236\u4eb2\u3002\n\n[\u4e0d\u4e86\u89e3\u4ed9\u4eba\u638c\u7684\u6233\u8fd9\u91cc](https://www.cnblogs.com/WilsonInversion/p/16305754.html)\n\n\u4ee3\u7801\uff1a\n\n```cpp\n// Problem: P4410 [HNOI2009]\u65e0\u5f52\u5c9b\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/P4410\n// Memory Limit: 125 MB\n// Time Limit: 1000 ms\n//\n// Powered by CP Editor (https://cpeditor.org)\n\n#include <bits/stdc++.h>\nusing namespace std;\nnamespace Std {\nint n, m, head[200010][2], nxt[800010], to[800010], cnt, dfn[200010],\n    fa[200010], tot, num, f[200010][2], g[200010][2], a[200010];\nbool mark[100010];\ninline void add(int x, int y, bool z) {\n  to[++cnt] = y;\n  nxt[cnt] = head[x][z];\n  head[x][z] = cnt;\n}\nvoid dfs(int x, int y) {\n  dfn[x] = ++tot;\n  fa[x] = y;\n  for (int i = head[x][0]; i; i = nxt[i]) {\n    if (to[i] == y) continue;\n    if (!dfn[to[i]]) {\n      mark[x] = 0;\n      dfs(to[i], x);\n      if (!mark[x]) add(x, to[i], 1);\n    } else {\n      if (dfn[to[i]] > dfn[x]) continue;\n      int u = x;\n      ++num;\n      while (u != to[i]) {\n        add(num, u, 1);\n        u = fa[u];\n        mark[u] = 1;\n      }\n      add(to[i], num, 1);\n    }\n  }\n}\nvoid dp(int x) {\n  f[x][1] = a[x];\n  for (int i = head[x][1]; i; i = nxt[i]) {\n    if (to[i] <= n) {\n      dp(to[i]);\n      f[x][1] += f[to[i]][0];\n      f[x][0] += max(f[to[i]][1], f[to[i]][0]);\n    } else {\n      int u = to[i], f1, f2, f3, f4;\n      for (int j = head[u][1]; j; j = nxt[j]) dp(to[j]);\n      tot = 0;\n      g[0][0] = f[to[head[u][1]]][0];\n      g[0][1] = 0xc3c3c3c3;\n      for (int j = head[u][1]; j; j = nxt[j]) {\n        if (j == head[u][1]) continue;\n        ++tot;\n        g[tot][1] = f[to[j]][1] + g[tot - 1][0];\n        g[tot][0] = f[to[j]][0] + max(g[tot - 1][0], g[tot - 1][1]);\n      }\n      f1 = g[tot][0];\n      f2 = g[tot][1];\n      g[0][0] = 0xc3c3c3c3;\n      g[0][1] = f[to[head[u][1]]][1];\n      tot = 0;\n      for (int j = head[u][1]; j; j = nxt[j]) {\n        if (j == head[u][1]) continue;\n        ++tot;\n        g[tot][1] = f[to[j]][1] + g[tot - 1][0];\n        g[tot][0] = f[to[j]][0] + max(g[tot - 1][0], g[tot - 1][1]);\n      }\n      f3 = g[tot][0];\n      f4 = g[tot][1];\n      f[x][0] += max(max(f1, f2), max(f3, f4));\n      f[x][1] += f1;\n    }\n  }\n}\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  num = n;\n  int u, v;\n  for (int i = 1; i <= m; ++i) {\n    scanf(\"%d%d\", &u, &v);\n    add(u, v, 0);\n    add(v, u, 0);\n  }\n  for (int i = 1; i <= n; ++i) scanf(\"%d\", a + i);\n  dfs(1, 0);\n  dp(1);\n  printf(\"%d\\n\", max(f[1][0], f[1][1]));\n  return 0;\n}\n}  // namespace Std\nint main() { return Std::main(); }\n```\n",
        "postTime": 1655021261,
        "uid": 576737,
        "name": "Wilson_Inversion",
        "ccfLevel": 7,
        "title": "P4410 [HNOI2009]\u65e0\u5f52\u5c9b \u9898\u89e3"
    },
    {
        "content": "\u5148\u5efa\u7acb\u539f\u56fe\u7684\u5e7f\u4e49\u5706\u65b9\u6811 $G$\uff0c\u8bbe\u65b9\u70b9\u4e3a $n+1$ \u81f3 $Node$\uff08$Node$ \u4e3a $G$ \u7684\u8282\u70b9\u6570\uff09\u3002\n\n\u5b9a\u4e49\u72b6\u6001\u6570\u7ec4 $f_{u,0/1}$\uff0c\u5bf9\u4e8e\u5706\u70b9\uff0c\u5b83\u7684\u542b\u4e49\u662f\u5728\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u9009\u62e9/\u4e0d\u9009\u62e9\u8282\u70b9 $i$ \u7684\u6700\u5927\u6743\u503c\uff0c\u5bf9\u4e8e\u65b9\u70b9\uff0c\u5b83\u7684\u542b\u4e49\u662f\u5728\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u9009\u62e9/\u4e0d\u9009\u62e9\u7236\u4eb2\u8282\u70b9 $fa$ \u7684\u6700\u5927\u6743\u503c\uff08$f_{i,1}$ \u4e0d\u5305\u62ec\u8282\u70b9 $fa$ \u7684\u6743\u503c\uff09\u3002\n\n\u5bf9\u4e8e\u5706\u70b9 $u$ \u6709\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a$f_{u,0}=\\sum_{u\\to v}f_{v,0}$\uff0c$f_{u,1}=val_{u}+\\sum_{u\\to v}f_{v,1}$\u3002\n\n\u5bf9\u4e8e\u65b9\u70b9 $u$ \u8bbe $f_0=0$\uff0c$f_1=-inf$\uff0c$g_0=-inf$\uff0c$g_1=0$\uff0c\u7136\u540e\u679a\u4e3e\u513f\u5b50\u8282\u70b9 $v$\uff0c\u6709 $o_0=f_0$\uff0c$o_1=f_1$\uff0c$f_0=\\max(o_0,o_1)+f_{v,0}$\uff0c$f_1=o_0+f_{v,1}$\uff0c$o_0=g_0$\uff0c$o_1=g_1$\uff0c$g_0=\\max(o_0,o_1)+g_{v,0}$\uff0c$g_1=o_0+g_{v,1}$\uff08\u4f9d\u6b21\u6309\u987a\u5e8f\u6267\u884c\uff09\uff0c\u8ba1\u7b97\u5b8c\u6240\u6709\u513f\u5b50\u8282\u70b9\u540e\uff0c\u6709 $f_{u,0}=\\max(f_0,f_1)$\uff0c$f_{u,1}=g_0$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=1e6+1;\nint h[N], nt[N<<1], to[N<<1], cnt, hh[N];\nint dfn[N], low[N], Stack[N], Top, Node;\nint f[N][2], val[N], n, m, dfnt;\nvoid link(int u, int v){\n    nt[++cnt]=h[u], h[u]=cnt, to[cnt]=v;\n}\nvoid llink(int u, int v){\n    nt[++cnt]=hh[u], hh[u]=cnt, to[cnt]=v;\n}\nvoid Tarjan(int u){\n    Stack[++Top]=u, dfn[u]=low[u]=++dfnt;\n    for(int i=h[u]; i; i=nt[i]){\n        int v=to[i];\n        if(!dfn[v]){\n            Tarjan(v), low[u]=min(low[u], low[v]);\n            if(low[v]>=dfn[u]){\n                Node++;\n                for(int x=0; x!=v; Top--)\n                    x=Stack[Top], llink(Node, x), llink(x, Node);\n                llink(Node, u), llink(u, Node);\n            }\n        }\n        else low[u]=min(low[u], dfn[v]);\n    }\n}\nvoid dp(int u, int fa){\n//    printf(\"%d  %d\\n\", fa, u);\n    if(u<=n){\n        for(int i=hh[u]; i; i=nt[i]) if(to[i]!=fa)\n            dp(to[i], u), f[u][0]+=f[to[i]][0], f[u][1]+=f[to[i]][1];\n        f[u][1]+=val[u];\n        return;\n    }\n    else{\n        int f0=0, f1=-1.4e8, g0=-1.4e8, g1=0;\n        for(int i=hh[u]; i; i=nt[i]){\n            int v=to[i]; if(v==fa)continue;\n            dp(v, u);\n            int o0=f0, o1=f1;\n            f0=max(o0, o1)+f[v][0], f1=o0+f[v][1];\n                o0=g0, o1=g1;\n            g0=max(o0, o1)+f[v][0], g1=o0+f[v][1];\n        }\n        f[u][0]=max(f0, f1), f[u][1]=g0;\n    }\n}\nint main(){\n#ifdef LOCAL\n    freopen(\"text.in\",\"r\",stdin);\n    freopen(\"text.out\",\"w\",stdout);\n#endif // LOCAL\n    scanf(\"%d %d\", &n, &m);\n    for(int i=1, x, y; i<=m; i++)\n        scanf(\"%d %d\", &x, &y), link(x, y), link(y, x);\n    for(int i=1; i<=n; i++)\n        scanf(\"%d\", &val[i]);\n    Node=n, Tarjan(1), Top=0;\n    dp(1, -1);\n    printf(\"%d\\n\", max(f[1][0], f[1][1]));\n    return 0;\n}\n```\n\n",
        "postTime": 1684421578,
        "uid": 740607,
        "name": "__ODT__",
        "ccfLevel": 0,
        "title": "P4410"
    },
    {
        "content": "\u5b66\u4e60\u4e86 WC2017 \u7684\u4ed9\u4eba\u638c\u8bfe\u4ef6\u540e\u53d1\u73b0\u4e86\u8fd9\u4e2a\u9898\u3002\n\n\u5176\u5b9e\u5904\u7406\u4ed9\u4eba\u638c\u80af\u5b9a\u5f3a\u4e8e\u5904\u7406\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u53bb\u60f3\u6811\u4e0a\u7684\u95ee\u9898\u600e\u4e48\u505a\uff0c\u7136\u540e\u63a8\u5e7f\u5230\u4ed9\u4eba\u638c\u4e0a\u3002\n\n\u6811\u4e0a\u7684\u8bdd\uff0c\u53ea\u8981\u8bbe $f(u,0/1)$ \u8868\u793a $u$ \u5b50\u6811\u5185\uff0c\u4e14 $u$ \u672c\u8eab\u662f\u5426\u9009\u62e9\uff0c\u6784\u6210\u7684\u6700\u5927\u72ec\u7acb\u96c6\u5927\u5c0f\u5373\u53ef\u3002\n\n\u63a8\u5e7f\u5230\u4ed9\u4eba\u638c\u4e0a\uff0c\u5e38\u7528\u7684\u65b9\u6cd5\u6709\u4e24\u4e2a\uff1a\n\n1. \u5706\u65b9\u6811\n\n2. dfs \u6811\u3002\n\n\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u5e94\u8be5\u662f\u53ef\u4ee5\u6c42\u6700\u5927\u6743\u72ec\u7acb\u96c6\u7684\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a dfs \u6811\u4e0a\u7684\u89e3\u6cd5\u3002\n\n\u9996\u5148 dfs \u6811\u5e76\u4e0d\u5b8c\u5168\u662f\u7eaf\u6b63\u7684\u4e00\u9897\u6811\uff0c\u56e0\u4e3a dfs \u6811\u4e4b\u5916\u8fd8\u6709\u8fd4\u7956\u8fb9\u7684\u5b58\u5728\u3002\u4ed9\u4eba\u638c\u7684\u7279\u6027\u4f7f\u5f97\u4e00\u6761\u8fb9\u6700\u591a\u88ab\u4e00\u4e2a\u8fd4\u7956\u8fb9\u8986\u76d6\uff08\u6ce8\u610f\u6211\u4eec\u901a\u5e38\u8ba8\u8bba\u8fb9\u4ed9\u4eba\u638c\uff0c\u56e0\u4e3a\u70b9\u4ed9\u4eba\u638c\u662f\u8fb9\u4ed9\u4eba\u638c\u7684\u5b50\u96c6\uff09\u3002\n\n\u7531\u4e8e\u4ed9\u4eba\u638c\u4e0a\u4e00\u6761\u8fb9\u53ea\u4f1a\u88ab\u4e00\u4e2a\u8fd4\u7956\u8fb9\u8986\u76d6\uff0c\u5bb9\u6613\u60f3\u5230\u8bbe $f(u,0/1,0/1)$\uff0c\u65b0\u589e\u7684\u4e00\u4e2a $0/1$ \u8868\u793a\u70b9 $u$ \u6240\u5728\u7684\u73af\u9876\u662f\u5426\u9009\u62e9\u3002\n\n\u4f46\u662f\u8fd9\u6837\u4f1a\u5b58\u5728\u95ee\u9898\uff1a\u6211\u4eec\u628a\u6837\u4f8b\u7684\u56fe\u753b\u51fa\u6765\uff0c\u5c31\u4f1a\u53d1\u73b0\uff0c\u70b9 $3$ \u5176\u5b9e\u5b58\u5728\u4e8e\u4e24\u4e2a\u73af\u5f53\u4e2d\uff1a$1\\rightarrow 2\\rightarrow 3\\rightarrow 5\\rightarrow 1$ \u4ee5\u53ca $3\\rightarrow 6\\rightarrow 5\\rightarrow 3$\u3002\u90a3\u4e48\u6211\u4eec\u5230\u5e95\u8bb0\u5f55\u7684\u662f\u54ea\u4e2a\u73af\u3002\n\n\u4e8b\u5b9e\u4e0a\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff1a\u5982\u679c $u$ \u5728 $k(\\gt 1)$ \u4e2a\u73af\u4e2d\uff0c\u5fc5\u5b9a\u6709\u81f3\u5c11 $k-1$ \u4e2a\u73af\uff0c\u5b83\u662f\u4f5c\u4e3a\u73af\u9876\u51fa\u73b0\u7684\u3002\u800c\u6b64\u65f6\u4f60\u8bb0\u5f55\u7684\u4e24\u4e2a $0/1$ \u90fd\u4ee3\u8868 $u$ \u672c\u8eab\u662f\u5426\u9009\u62e9\uff0c\u8fd9\u662f\u65e0\u610f\u4e49\u7684\u3002\n\n\u6362\u8a00\u4e4b\uff0c\u6211\u4eec\u65b0\u589e\u7684 $0/1$ \u5e94\u8be5\u4ee3\u8868\uff1a$u$ \u7684\u4e00\u4e2a\u6240\u5728\u73af\uff0c\u4e14 $u$ \u4e0d\u662f\u8fd9\u4e2a\u73af\u7684\u73af\u9876\uff0c\u8fd9\u4e2a\u73af\u7684\u73af\u9876\u662f\u5426\u88ab\u9009\u62e9\u3002\n\n\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a $u$ \u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u73af\u9876\uff0c\u6211\u4eec\u94a6\u5b9a\u7b2c\u4e8c\u7ef4\u5fc5\u987b\u4e3a $0$\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8f6c\u79fb\u4e86\u3002\n\n\u590d\u6742\u5ea6 $O(n)$ \uff08\u4ed9\u4eba\u638c\u4e0a\u5e94\u8be5\u662f $n,m$ \u540c\u9636\u7f62\uff09\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\n#define op(x) ((x&1)?x+1:x-1)\n#define odd(x) (x&1)\n#define even(x) (!odd(x))\n#define lc(x) (x<<1)\n#define rc(x) (lc(x)|1)\n#define lowbit(x) (x&-x)\n#define mp(x,y) make_pair(x,y)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\nusing namespace std;\nconst int MAXN=1e5+10,MAXM=2e5+10,INF=1e9;\nint n,m,w[MAXN],u[MAXM],v[MAXM];\nint istop[MAXN],isbottom[MAXN],top[MAXN],depth[MAXN],tag[MAXM],fa[MAXN],vis[MAXN];\nint tmp[2][2];\nvector<array<int,2> >e[MAXN];\nvector<int>g[MAXN];\nvoid dfs1(int u){\n    depth[u]=depth[fa[u]]+1;vis[u]=1;\n    for(auto p:e[u]){\n        int v=p[0],idx=p[1];\n        if(vis[v])continue;\n        fa[v]=u;tag[idx]=1;\n        dfs1(v);\n    }\n}\nvoid tomax(int& x,int y){x=max(x,y);}\nint dp[MAXN][2][2],ans=-INF;\nvoid dfs2(int u){\n    rep(i,0,1)rep(j,0,1)dp[u][i][j]=-INF;\n    dp[u][0][0]=0;dp[u][1][0]=w[u];\n    if(top[u]){\n        if(isbottom[u])dp[u][0][1]=0;\n        else dp[u][0][1]=0,dp[u][1][1]=w[u];\n    }\n    for(auto v:g[u]){\n        if(v!=fa[u]){\n            dfs2(v);\n            rep(a,0,1)rep(b,0,1)tmp[a][b]=dp[u][a][b];\n            if(u==top[v]){\n                rep(a,0,1)rep(b,0,1)rep(c,0,1)rep(d,0,1){\n                    if(a!=d)continue;\n                    if(a && c)continue;\n                    tomax(tmp[a][b],dp[u][a][b]+dp[v][c][d]);\n                }\n            }else{\n                rep(a,0,1)rep(b,0,1)rep(c,0,1)rep(d,0,1){\n                    if(a && c)continue;\n                    if(b!=d)continue;\n                    tomax(tmp[a][b],dp[u][a][b]+dp[v][c][d]);\n                }\n            }\n            rep(a,0,1)rep(b,0,1)dp[u][a][b]=tmp[a][b];\n        }\n    }\n}\nint main(){\n    ios::sync_with_stdio(false);\n    cin>>n>>m;\n    rep(i,1,m){\n        cin>>u[i]>>v[i];\n        e[u[i]].push_back({v[i],i});\n        e[v[i]].push_back({u[i],i});\n    }\n    dfs1(1);\n    rep(i,1,m)if(!tag[i]){\n        if(depth[u[i]]<depth[v[i]])swap(u[i],v[i]);\n        istop[v[i]]=1;\n        isbottom[u[i]]=1;\n        while(u[i]!=v[i])top[u[i]]=v[i],u[i]=fa[u[i]];\n    }else g[u[i]].push_back(v[i]),g[v[i]].push_back(u[i]);\n    rep(i,1,n)cin>>w[i];\n    dfs2(1);\n    rep(i,0,1)rep(j,0,1)tomax(ans,dp[1][i][j]);\n    cout<<ans;\n\n    return 0;\n}\n```",
        "postTime": 1659062225,
        "uid": 340632,
        "name": "Cry_For_theMoon",
        "ccfLevel": 8,
        "title": "\u3010P4410\u3011\u65e0\u5f52\u5c9b"
    }
]