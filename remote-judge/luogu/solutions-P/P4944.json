[
    {
        "content": "### \u524d\u8a00\n[\u9898\u76ee\u4f20\u9001\u95e8\uff01](https://www.luogu.com.cn/problem/P4944)\n\n[\u6216\u8bb8\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff1f](https://www.luogu.com.cn/blog/liangbowen/solution-P4944)\n\n\u8fd9\u9898\u7b97\u662f\u4e00\u9053\u4e2d\u6a21\u62df\uff1f\n\n\u7801\u91cf\u4e0d\u4f1a\u5f88\u9ad8\uff0c\u5927\u6982\u53ea\u6709 $100$ \u81f3 $150$ \u884c\u3002\n\n### \u601d\u8def\n\n1. \u8f93\u5165\u5730\u56fe\u3002\n\n\t\u6ce8\u610f\uff0c\u8fd8\u4e0d\u80fd\u8bfb\u5165\u86c7\u7684\u884c\u52a8\u6307\u4ee4\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u77e5\u9053**\u6709\u51e0\u6761\u86c7**\u3002\n    \n2. \u4f7f\u7528\u5e7f\u641c\u5f97\u51fa\u6bcf\u6761\u86c7\u7684\u4fe1\u606f\u3002\n\n\t\u8fd9\u4e2a\u5c31\u662f**\u641c\u8fde\u901a\u5757**\uff0c\u60df\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u8981\u4f7f\u7528\u961f\u5217\u5b58\u4e0b\u8fd9\u6761\u86c7\u3002\n    \n3. \u5199\u4e00\u4e2a\u6b7b\u4ea1\u51fd\u6570\uff0c\u5904\u7406\u86c7\u6b7b\u4ea1\u540e\u7684\u4fe1\u606f\u3002\n    \n    \u8fd9\u4e2a\u5e76\u4e0d\u56f0\u96be\uff0c\u53ea\u8981\u5c06\u961f\u5217\u6e05\u7a7a\uff0c\u987a\u4fbf\u5c06\u6574\u6761\u86c7\u86c7**\u53d8\u6210\u98df\u7269**\u3002\n    \n4. \u5199\u79fb\u52a8\u51fd\u6570\uff0c\u8fd9\u91cc\u8981\u5206\u51e0\u79cd\u60c5\u51b5\u8003\u8651\u3002\n\n\t+ \u79fb\u52a8\u540e\u649e\u4e0a\u5899\uff0c\u6b7b\u6389\u3002\n\n\t+ \u79fb\u52a8\u540e\u649e\u4e0a\u8eab\u4f53\uff08\u5f53\u7136\u4e5f\u5305\u62ec\u5934\uff09\uff0c\u6b7b\u6389\u3002\n    \n    \t\u6b64\u5904\u7684\u300e\u649e\u4e0a\u8eab\u4f53\u300f\u65e2\u5305\u62ec\u522b\u4eba\u7684\u8eab\u4f53\uff0c\u4e5f\u5305\u62ec\u81ea\u5df1\u7684\u8eab\u4f53\u3002\n        \n   \t+ \u79fb\u52a8\u540e\u6709\u98df\u7269\u3002\n    \n    \t\u6211\u4eec\u53ef\u4ee5\u8ba9\u5176\u4ed6\u90e8\u4f4d\u4fdd\u6301\u4e0d\u52a8\uff0c\u86c7\u5934\u5411\u98df\u7269\u5904\u6269\u5145\u4e00\u683c\u3002\n        \n   + \u79fb\u52a8\u540e\uff0c\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u662f\u5e73\u5730\u3002\n   \n   \t\t\u6211\u4eec\u53ef\u4ee5\u505a\u4e24\u4ef6\u4e8b\u8fbe\u5230\u6548\u679c\uff1a\n        \n      \u9996\u5148\u6269\u5145\u86c7\u5934\u3002\n      \n      \u7136\u540e\u6d88\u9664\u86c7\u5c3e\u3002\n      \n      \u7528\u666e\u901a\u7684\u961f\u5217\u96be\u4ee5\u8fbe\u5230\u8fd9\u79cd\u6548\u679c\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528**\u53cc\u7aef\u961f\u5217**\u3002\n      \n5. \u8bfb\u5165\u86c7\u7684\u884c\u52a8\u6307\u4ee4\uff0c\u5e76\u79fb\u52a8\u3002\n      \n6. \u6700\u540e\u8f93\u51fa\u3002\n\n\t\u7531\u4e8e\u9898\u76ee\u8ba9\u6211\u4eec**\u6309\u987a\u5e8f\u8f93\u51fa**\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6392\u5e8f\u3002\n    \n   \u7136\u540e\u8fd8\u8981\u518d\u626b\u4e00\u904d\u5730\u56fe\uff0c\u8bb0\u5f55\u98df\u7269\u6570\u91cf\u3002\n   \n### \u5751\u70b9\n\n\u8fd9\u4e9b\u5751\u70b9\u6307\uff0c\u9898\u76ee\u5e76\u6ca1\u6709\u8bf4\u6e05\u695a\u7684\u5730\u65b9\uff0c\u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u770b\u4ee3\u7801\u3002\n\n1. \u5f88\u591a\u4eba\u90fd\u6709\u7591\u95ee\uff0c\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u76f4\u63a5**\u641c\u8fde\u901a\u5757**\u5206\u8fa8\u6bcf\u6761\u86c7\u3002\n\n\t\u5f88\u591a\u4eba\u90fd\u5ffd\u7565\u4e86\u4e00\u4e2a\u7ec6\u8282\uff0c\u9898\u76ee\u4fdd\u8bc1\u4e86\uff1a\n\n\t> \u56fe\u4e2d\u7684\u86c7\u4e0d\u4f1a\u5f15\u8d77\u6df7\u6dc6\uff08\u5bf9\u4e8e\u4efb\u610f\u86c7\u5934\uff0c\u6700\u591a\u53ea\u6709\u4e00\u5757\u86c7\u8eab\u4e8e\u5176\u76f8\u8fde\uff0c\u800c**\u86c7\u8eab\u6700\u591a\u4e3a\u4e8c\u8fde\u5757**\uff09\u3002\n\n\t\u56e0\u6b64\uff0c\u76f4\u63a5\u641c\u8fde\u901a\u5757\u662f\u53ef\u884c\u7684\u3002\n    \n2. \u86c7\u7684\u79fb\u52a8\u987a\u5e8f\u3002\n\n\t\u86c7\u662f\u6309\u7167**\u56de\u5408\u5236**\u79fb\u52a8\u7684\uff0c\u6bcf\u4e00\u56de\u5408\uff0c\u7f16\u53f7\u5c0f\u7684\u86c7\u4f18\u5148\u884c\u52a8\u3002\n    \n### \u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue> //\u5305\u542b queue \u4e0e deque \u4e24\u79cd\u6570\u636e\u7c7b\u578b\u3002 \n#include <algorithm>  //\u7528\u4e8e sort \u6392\u5e8f\u3002 \n#define N 205\n#define C 25\nusing namespace std;\nint n, m, k;\nint cur; //\u8868\u793a\u86c7\u7684\u6570\u91cf\u3002 \nchar a[N][N];  //\u8868\u793a\u5730\u56fe\u3002 \nint who[N][N]; //\u8868\u793a\u5f53\u524d\u683c\u5b50\u5c5e\u4e8e\u90a3\u4e00\u6761\u86c7\u3002\n//\u540e\u6765\u53d1\u73b0\u8fd9\u4e2a who \u6570\u7ec4\u5b8c\u5168\u6ca1\u4f7f\u7528\u5230\uff0c\u6240\u4ee5\u4e0d\u5199\u4e5f\u884c\u3002 \nstring order[C]; //\u4ee3\u8868\u86c7\u7684\u884c\u52a8\u6307\u4ee4\u3002 \nstruct node\n{\n\tint x, y;\n};\ndeque <node> snake[C];  //\u6a21\u62df\u5f53\u524d\u7684\u86c7\u3002\nvoid Input1(); //\u8f93\u5165\u5730\u56fe\uff0c\u4e0d\u89e3\u91ca\u3002 \nvoid bfs();   //\u641c\u7d22\u5f97\u51fa\u86c7\u7684\u4f4d\u7f6e\u3002 \nvoid debug();  //\u8c03\u8bd5\u5de5\u5177\u3002\nvoid die(int id); //\u7b2c id \u6761\u86c7\u6b7b\u4ea1\u4e86\u3002 \nvoid move(int id, char op); //\u5bf9\u7b2c id \u6761\u86c7\u6267\u884c op \u6307\u4ee4\u3002\nvoid Input2(); //\u8f93\u5165\u86c7\u7684\u8fd0\u884c\u6307\u4ee4\uff0c\u4f46\u987a\u4fbf\u5229\u7528 move() \u51fd\u6570\u79fb\u52a8\u5904\u7406\u3002\nvoid Output(); //\u8f93\u51fa\u7b54\u6848\u3002 \nint main()\n{\n\tInput1();\n\tbfs();\n\t//debug();\n\tInput2();\n\t//debug();\n\tOutput();\n\treturn 0;\n}\n\nvoid Input1() //\u5b9e\u9645\u8f93\u5165\u53ea\u80fd\u8f93\u5165\u4e00\u90e8\u5206\uff0c\u56e0\u4e3a\u5fc5\u987b bfs \u5f97\u51fa\u86c7\u7684\u6570\u91cf\u540e\uff0c\u518d\u8f93\u5165\u6307\u4ee4\u3002 \n{\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tcin >> a[i][j];\n}\nint dict[5][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\nvoid bfs() //\u7206\u641c\uff0c\u6ca1\u4ec0\u4e48\u6280\u5de7\u3002 \n{\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tif (a[i][j] == '@')\n\t\t\t{\n\t\t\t\tcur++;\n\t\t\t\tqueue <node> Q;\n\t\t\t\tQ.push( (node){i, j} );\n\t\t\t\twhile (!Q.empty())\n\t\t\t\t{\n\t\t\t\t\tint x = Q.front().x, y = Q.front().y;\n\t\t\t\t\twho[x][y] = cur;\n\t\t\t\t\tsnake[cur].push_back( (node){x, y} );\n\t\t\t\t\tQ.pop();\n\t\t\t\t\tfor (int i = 0; i <= 3; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tint dx = x + dict[i][0], dy = y + dict[i][1];\n\t\t\t\t\t\tif (dx < 1 || dx > n || dy < 1 || dy > m) continue;\n\t\t\t\t\t\tif (who[dx][dy] == cur) continue;\n\t\t\t\t\t\tif (a[dx][dy] == '#') Q.push( (node){dx, dy} );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n}\nvoid debug()\n{\n\tfor (int i = 1; i <= cur; i++)\n\t{\n\t\tprintf(\"\\ni = %d:\\n\", i);\n\t\tdeque <node> Q = snake[i];\n\t\twhile (!Q.empty())\n\t\t{\n\t\t\tprintf(\"(%d %d) \", Q.front().x, Q.front().y);\n\t\t\tQ.pop_front();\n\t\t}\n\t}\n}\nvoid die(int id)\n{\n\twhile (!snake[id].empty())\n\t{\n\t\tint x = snake[id].front().x, y = snake[id].front().y;\n\t\twho[x][y] = 0;  //\u6d88\u9664\u6807\u8bb0\u3002 \n\t\ta[x][y] = '&';  //\u53d8\u6210\u98df\u7269\u3002\n\t\tsnake[id].pop_front(); //\u628a\u86c7\u7ed9\u6d88\u9664\u3002 \n\t}\n}\nvoid move(int id, char op)\n{\n\tint x = snake[id].front().x, y = snake[id].front().y;\n\tif (op == 'W') x--; //\u5f80\u4e0a\u3002\n\tif (op == 'S') x++; //\u5f80\u4e0b\u3002\n\tif (op == 'A') y--; //\u5f80\u5de6\u3002\n\tif (op == 'D') y++; //\u5f80\u53f3\u3002\n\t\n\tif (x < 1 || x > n || y < 1 || y > m) //\u649e\u8fb9\u754c\u4e0a\u4e86\uff0c\u6b7b\u4ea1\u3002 \n\t{\n\t\tdie(id);\n\t\treturn;\n\t}\n\tif (a[x][y] == '#' || a[x][y] == '@') //\u649e\u8eab\u4f53\u4e0a\u4e86\uff0c\u6b7b\u4ea1\u3002\n\t{\n\t\tdie(id);\n\t\treturn;\n\t}\n\tint head_x = snake[id].front().x, head_y = snake[id].front().y; //\u539f\u5148\u7684\u86c7\u5934\u3002\n\tint tail_x = snake[id].back().x, tail_y = snake[id].back().y; //\u539f\u5148\u7684\u86c7\u5c3e\u3002\n\tif (a[x][y] == '&') //\u5403\u5230\u98df\u7269\uff0c\u76f4\u63a5\u6269\u5145\u86c7\u3002\n\t{\n\t\tsnake[id].push_front( (node){x, y} );\n\t\ta[x][y] = '@'; //\u98df\u7269\u5904\u53d8\u6210\u86c7\u5934\u3002\n\t\ta[head_x][head_y] = '#';  //\u66fe\u7ecf\u7684\u86c7\u5934\u53d8\u6210\u86c7\u8eab\u3002\n\t\twho[x][y] = id; //\u6807\u8bb0\u86c7\u3002 \n\t}\n\tif (a[x][y] == '.') //\u662f\u5e73\u8def\uff0c\u86c7\u5934\u6269\u5145\uff0c\u86c7\u5c3e\u6d88\u9664\u3002 \n\t{\n\t\t//\u86c7\u5934\u6269\u5145\u3002 \n\t\tsnake[id].push_front( (node){x, y} );\n\t\ta[x][y] = '@';\n\t\ta[head_x][head_y] = '#';\n\t\twho[x][y] = id;\n\t\t//\u86c7\u5c3e\u6d88\u9664\u3002 \n\t\tsnake[id].pop_back();\n\t\ta[tail_x][tail_y] = '.';\n\t\twho[tail_x][tail_y] = 0;\n\t}\n}\nvoid Input2()\n{\n\tfor (int i = 1; i <= cur; i++) cin >> order[i];\n\tfor (int j = 0; j < k; j++)\n\t\tfor (int i = 1; i <= cur; i++)\n\t\t\tif (!snake[i].empty()) //\u9700\u8981\u6ce8\u610f\uff0c\u53ea\u6709\u86c7\u6ca1\u6709\u6b7b\u4ea1\uff0c\u624d\u53ef\u4ee5\u79fb\u52a8\u3002 \n\t\t\t\tmove(i, order[i][j]);\n}\nstruct Snake\n//\u5b58\u50a8\u6bcf\u6761\u86c7\u7684\u4fe1\u606f\u3002 \n{\n\tint len, id;\n}p[C];\nbool cmp(Snake x, Snake y)\n{ \n\tif (x.len != y.len) return x.len > y.len;\n\treturn x.id < y.id;\n}\nvoid Output()\n{\n\t//\u8ba1\u7b97\u6bcf\u6761\u86c7\u7684\u4fe1\u606f\u3002 \n\tfor (int i = 1; i <= cur; i++)\n\t{\n\t\tp[i].id = i;\n\t\tdeque <node> Q = snake[i];\n\t\twhile (!Q.empty())\n\t\t{\n\t\t\tp[i].len++;\n\t\t\tQ.pop_back();\n\t\t}\n\t}\n\tsort(p+1, p+cur+1, cmp);  //\u6309\u9898\u76ee\u6240\u8ff0\u6392\u5e8f\u3002\n\tfor (int i = 1; i <= cur; i++) printf(\"%d %d\\n\", p[i].len, p[i].id);\n\t//\u8ba1\u7b97\u98df\u7269\u6570\u91cf\u5e76\u8f93\u51fa\u3002\n\tint cnt = 0;\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= m; j++)\n\t\t\tif (a[i][j] == '&')\n\t\t\t\tcnt++;\n\tprintf(\"%d\", cnt); \n}\n```",
        "postTime": 1654390050,
        "uid": 367488,
        "name": "liangbowen",
        "ccfLevel": 0,
        "title": "P4944 \u9898\u89e3"
    },
    {
        "content": "### \u7b80\u5355\u6a21\u62df\u9898\n\n\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u5b58\u50a8\u8fd9\u6761\u86c7\n\n\u8003\u8651\u86c7\u7684\u79fb\u52a8\n\n1\uff0c\u5982\u679c\u6b7b\u4e86\uff0c\u5c31\u628a\u6574\u4e2a\u86c7\u6e05\u7a7a\uff0c\u6240\u6709\u4f4d\u7f6e\u6807\u8bb0\u4e3a\u98df\u7269\n\n2\uff0c\u5982\u679c\u5403\u4e86\u4e1c\u897f\uff0c\u628a\u8fd9\u4e2a\u4f4d\u7f6e\u66f4\u65b0\u4e3a\u86c7\u5934\n\n3\uff0c\u5982\u679c\u6b63\u5e38\u8d70\u8def\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u8bbe\u4e3a\u86c7\u5934\uff0c\u540c\u65f6\u5220\u6389\u5c3e\u5df4\n\n\u86c7\u7684\u5b58\u50a8\uff1f\u89c2\u5bdf\u5230\u6211\u4eec\u6d89\u53ca\u7684\u6240\u6709\u64cd\u4f5c\uff0c\u53cc\u7aef\u961f\u5217\u65e0\u7591\u662f$The~~Best~~Choice$\n\n```\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<map>\n#include<algorithm>\nusing namespace std;\n//q.front -> head\n//q.back -> tail\n//mp{\n// 0 -> square ; 1 -> edge ; 2-> food\n//}\nconst int dx[]={1,-1,0,0};\nconst int dy[]={0,0,-1,1};\nstruct pos{\n    int x,y;\n};\nstruct length{\n    int id,len;\n}ans[30];\nmap<char,int>to;\ndeque<pos>sk[30];\nint n,m,k,mp[210][210],cnt;\nchar s[210][210],op[30][110];\nvoid bfs(int id,int x,int y)\n{\n    queue<pos>q;\n    q.push((pos){x,y});\n    while(!q.empty())\n    {\n        pos u=q.front();\n        sk[id].push_back(u);\n        mp[u.x][u.y]=1;\n        q.pop();\n        for(int i=0;i<4;i++)\n        {\n            pos th;\n            th.x=u.x+dx[i];\n            th.y=u.y+dy[i];\n            if(s[th.x][th.y]=='#')\n                q.push(th),s[th.x][th.y]='.';\n        }\n    }\n}\nvoid work(int x)\n{\n    for(int i=1;i<=cnt;i++)\n    {\n        if(!sk[i].size())\n            continue;\n        pos th;\n        th.x=sk[i].front().x+dx[to[op[i][x]]];\n        th.y=sk[i].front().y+dy[to[op[i][x]]];\n        if(mp[th.x][th.y]==2)\n            sk[i].push_front(th),mp[th.x][th.y]=1;\n        else if(mp[th.x][th.y]==1)\n            while(!sk[i].empty())\n            {\n                mp[sk[i].front().x][sk[i].front().y]=2;\n                sk[i].pop_front();\n            }\n        else\n        {\n            mp[sk[i].back().x][sk[i].back().y]=0,mp[th.x][th.y]=1;\n            sk[i].push_front(th),sk[i].pop_back();\n        }\n    }\n}\nbool cmp(const length &x,const length &y)\n{\n    return x.len==y.len?x.id<y.id:x.len>y.len;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    to['W']=1,to['S']=0,to['A']=2,to['D']=3;\n    for(int i=1;i<=n;i++)\n        mp[i][0]=mp[i][m+1]=1;\n    for(int i=1;i<=m;i++)\n        mp[0][i]=mp[n+1][i]=1;\n    for(int i=1;i<=n;i++)\n        scanf(\"%s\",s[i]+1);\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            if(s[i][j]=='&')\n                mp[i][j]=2;\n            else if(s[i][j]=='@')\n                bfs(++cnt,i,j);\n    for(int i=1;i<=cnt;i++)\n        scanf(\"%s\",op[i]+1);\n    for(int i=1;i<=k;i++)\n        work(i);\n    for(int i=1;i<=cnt;i++)\n        ans[i].len=sk[i].size(),ans[i].id=i;\n    sort(ans+1,ans+cnt+1,cmp);\n    for(int i=1;i<=cnt;i++)\n        printf(\"%d %d\\n\",ans[i].len,ans[i].id);\n    int res=0;\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            if(mp[i][j]==2)\n                res++;\n    printf(\"%d\\n\",res);\n    return 0;\n}\n```",
        "postTime": 1540983779,
        "uid": 57045,
        "name": "communist",
        "ccfLevel": 7,
        "title": "P4944 \u3010PION\u8d2a\u5403\u86c7\u3011"
    },
    {
        "content": "~~\u672c\u9898\u5f88\u6c34\uff0c\u53ea\u80fd\u7b97\u4e0a\u4e2d\u6a21\u62df\u5427\u3002~~  \n\u7b2c\u4e00\u6b65\u5c31\u662f\u9009\u4e00\u4e2a\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\u86c7\u8eab\uff0c\u6beb\u65e0\u7591\u95ee deque \u53cc\u7aef\u961f\u5217\u662f\u6700\u597d\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u8fd9\u6837\u79fb\u52a8\u4f1a\u66f4\u65b9\u4fbf\u3002   \n\u4e0b\u4e00\u6b65\u8981\u8f93\u5165\u5730\u56fe\u627e\u86c7\u548c\u86c7\u7684\u5934\uff0c\u627e\u86c7\u5934\u5f88\u597d\u627e\uff0c\u904d\u5386\u4e00\u904d\u6570\u7ec4\u5373\u53ef\uff0c\u800c\u627e\u86c7\u53ef\u4ee5\u7528 dfs \u627e\u8fde\u901a\u5757\uff0c\u4f46\u6709\u4eba\u4f1a\u6709\u7591\u95ee\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u7528\u8fde\u901a\u5757\u626b\u86c7\u8eab\u5462\uff0c\u4e0d\u4f1a\u6df7\u6dc6\u5417\uff1f  \n**\u4e0d\u4f1a\u7684\u3002**  \n\u56e0\u4e3a\u9898\u76ee\u4fdd\u8bc1\u4e86\uff1a  \n> ### \u56fe\u4e2d\u7684\u86c7\u4e0d\u4f1a\u5f15\u8d77\u6df7\u6dc6\uff08\u5bf9\u4e8e\u4efb\u610f\u86c7\u5934\uff0c\u6700\u591a\u53ea\u6709\u4e00\u5757\u86c7\u8eab\u4e8e\u5176\u76f8\u8fde\uff0c\u800c\u86c7\u8eab\u6700\u591a\u4e3a\u4e8c\u8fde\u5757\uff09,\u4e14\u6570\u636e\u4fdd\u8bc1\u56fe\u4e2d\u7684\u86c7\u5747\u53ef\u4ee5\u5224\u65ad\u8eab\u4f53\u4e0e\u5934\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4e0d\u4f1a\u9020\u6210\u86c7\u8eab\u5f62\u6001\u591a\u89e3\u3002  \n\u8fd9\u5f88\u91cd\u8981\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528 dfs \u8fde\u901a\u5757\u6c42\u86c7\u8eab\u3002\n\n```cpp\nint n , m , k;\nint cnt_snack , cnt_food;//\u5206\u522b\u662f\u86c7\u7684\u6570\u91cf\u548c\u4e8b\u7269\u7684\u6570\u91cf\nint dx[4] = {0 , 0 , 1 , -1} , dy[4] = {1 , -1 , 0 , 0};\nbool vis[205][205];\nchar c[205][205] , d[205][205];//\u5730\u56fe\u548c\u8f93\u5165\u7684\u64cd\u4f5c\nstruct node{\n\tint x , y;\n};\ndeque <node> q[25];\nvoid dfs(int x , int y){\n\tvis[x][y] = 1;\n\tq[cnt_snack].push_back((node){x , y});//\u5b58\u50a8\u8fdb\u53cc\u7aef\u961f\u5217\u9996\n\tfor(int i = 0; i < 4; i++){\n\t\tint nx = x + dx[i] , ny = y + dy[i];\n\t\tif(c[nx][ny] == '#' && !vis[nx][ny])// \u662f#\u5e76\u4e14\u6ca1\u6709\u904d\u5386\u8fc7\n\t\t\tdfs(nx , ny);\n\t}\n}\n```\n \n\u800c\u79fb\u52a8\u5c31\u9700\u8981\u5224\u65ad\u662f\u5426\u78b0\u58c1\uff0c\u662f\u5426\u5403\u5230\u98df\u7269\u7b49\u7b49\uff0c\u7ec6\u8282\u5f88\u591a\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nvoid died(deque <node> &q){//\u86c7\u65e0\u4e86\n\twhile(!q.empty()){\n\t\tcnt_food++;//\u98df\u7269++\n\t\tc[q.front().x][q.front().y] = '&';//\u53d8\u6210\u98df\u7269\n\t\tq.pop_front();\n\t}\n\treturn;\n}\nvoid eat(deque <node> &q , int x , int y){//\u5403\u98df\u7269\n    cnt_food--;//\u98df\u7269\u51cf\u5c11\n    c[x][y] = '@';//\u86c7\u5934\u79fb\u52a8\n    c[q.front().x][q.front().y] = '#';//\u86c7\u8eab\u79fb\u52a8\n    q.push_front((node){x , y});//\u52a0\u5165\u961f\u9996\n    return;\n}\nvoid dir(deque <node> &q , int num , int dx , int dy){//\u79fb\u52a8\n\tint headx = q.front().x + dx , heady = q.front().y + dy;//\u4e0b\u4e00\u6b65\u5230\u7684\u4f4d\u7f6e\n\tif(c[headx][heady] != '.' && c[headx][heady] != '&') died(q);//\u86c7\u649e\u5230\u4e86\u5899\u6216\u86c7\n\telse if(c[headx][heady] == '&') eat(q , headx , heady);//\u86c7\u649e\u5230\u4e86\u98df\u7269\n   else{//\u5426\u5219\u6b63\u5e38\u79fb\u52a8\n\t\tc[q.back().x][q.back().y] = '.';\n\t\tif(q.size() != 1) c[q.front().x][q.front().y] = '#';\n\t\tq.pop_back();\n\t\tq.push_front((node){headx , heady});\n\t\tc[headx][heady] = '@';\n   }\n   return;\n}\n\n```\n\u6700\u540e\u79fb\u52a8\u5b8c\u4e86\uff0c\u6392\u5e8f\u540e\u8f93\u51fa\u3002\n```cpp\nstruct snack{\n\tint id , len;\n}Snack[25];\nbool cmp(snack x , snack y){\n    if(x.len != y.len) return x.len > y.len;\n    else return x.id < y.id;\n    //\u6309\u957f\u5ea6\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff08\u957f\u5ea6\u76f8\u540c\u6309\u7f16\u53f7\u7531\u5c0f\u5230\u5927\u6392\u5e8f\uff09\n}\nint main(){\n\t......\n\tfor(int i = 1; i <= cnt_snack; i++){//\u5b58\u86c7\u7684\u957f\u5ea6\n\t    int len = q[i].size();\n\t    Snack[i] = (snack){i , len};\n\t}\n\tsort(Snack + 1 , Snack + 1 + cnt_snack , cmp);//\u6392\u5e8f\n\tfor(int i = 1; i <= cnt_snack; i++){//\u8f93\u51fa\u86c7\u7684\u4fe1\u606f\n\t    cout << Snack[i].len << \" \" << Snack[i].id << \"\\n\";\n\t}\n\tcout << cnt_food;//\u8f93\u51fa\u98df\u7269\u4e2a\u6570\n\treturn 0;\n}\n```\n# AC CODE:\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n , m , k , cnt_food , cnt_snack;\nint dx[4] = {0 , 0 , 1 , -1} , dy[4] = {1 , -1 , 0 , 0};\nchar c[205][205] , d[25][105];\nbool vis[205][205];\nstruct node{\n\tint x , y;\n};\nstruct snack{\n\tint id , len;\n}Snack[25];\nbool cmp(snack x , snack y){\n    if(x.len != y.len) return x.len > y.len;\n    else return x.id < y.id;\n}\ndeque <node> q[25];\nvoid dfs(int x , int y){\n\tvis[x][y] = 1;\n\tq[cnt_snack].push_back((node){x , y});\n\tfor(int i = 0; i < 4; i++){\n\t\tint nx = x + dx[i] , ny = y + dy[i];\n\t\tif(c[nx][ny] == '#' && !vis[nx][ny])\n\t\t\tdfs(nx , ny);\n\t}\n}\nvoid died(deque <node> &q){\n\twhile(!q.empty()){\n\t\tcnt_food++;\n\t\tc[q.front().x][q.front().y] = '&';\n\t\tq.pop_front();\n\t}\n\treturn;\n}\nvoid eat(deque <node> &q , int x , int y){\n    cnt_food--;\n    c[x][y] = '@';\n    c[q.front().x][q.front().y] = '#';\n    q.push_front((node){x , y});\n    return;\n}\nvoid dir(deque <node> &q , int num , int dx , int dy){\n\tint headx = q.front().x + dx , heady = q.front().y + dy;\n\tif(c[headx][heady] != '.' && c[headx][heady] != '&') died(q);\n\telse if(c[headx][heady] == '&') eat(q , headx , heady);\n    else{\n        c[q.back().x][q.back().y] = '.';\n        if(q.size() != 1) c[q.front().x][q.front().y] = '#';\n        q.pop_back();\n\t    q.push_front((node){headx , heady});\n\t    c[headx][heady] = '@';\n    }\n    return;\n}\nint main(){\n\tmemset(c , 'x' , sizeof(c));\n\tcin >> n >> m >> k;\n\tfor(int i = 1; i <= n; i++){\n\t\tfor(int j = 1; j <= m; j++){\n\t\t\tcin >> c[i][j];\n\t\t\tif(c[i][j] == '&') cnt_food++;\n\t\t}\n\t}\n\tfor(int i = 1; i <= n; i++){\n\t\tfor(int j = 1; j <= m; j++){\n\t\t\tif(c[i][j] == '@'){\n\t\t\t\tcnt_snack++;\n\t\t\t\tdfs(i , j);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 1; i <= cnt_snack; i++){\n\t\tfor(int j = 1; j <= k; j++){\n\t\t\tcin >> d[i][j];\n\t\t}\n\t}\n\tfor(int t = 1; t <= k; t++){\n\t\tfor(int i = 1; i <= cnt_snack; i++){\n\t\t\tchar direction = d[i][t];\n\t\t\tif(q[i].empty()) continue;\n\t\t\tif(direction == 'A') dir(q[i] , i , 0 , -1);\n\t\t\tif(direction == 'S') dir(q[i] , i , 1 , 0);\n\t\t\tif(direction == 'D') dir(q[i] , i , 0 , 1);\n\t\t\tif(direction == 'W') dir(q[i] , i , -1 , 0);\n\t\t}\n\t}\n\tfor(int i = 1; i <= cnt_snack; i++){\n\t    int len = q[i].size();\n\t    Snack[i] = (snack){i , len};\n\t}\n\tsort(Snack + 1 , Snack + 1 + cnt_snack , cmp);\n\tfor(int i = 1; i <= cnt_snack; i++){\n\t    cout << Snack[i].len << \" \" << Snack[i].id << \"\\n\";\n\t}\n\tcout << cnt_food;\n    return 0;\n}\n```",
        "postTime": 1675222702,
        "uid": 705526,
        "name": "liruixiong0101",
        "ccfLevel": 3,
        "title": "P4944 PION\u8d2a\u5403\u86c7 \u9898\u89e3"
    },
    {
        "content": "\u9996\u5148\u7b2c\u4e00\u6b65\uff0c\u6211\u4eec\u9700\u8981\u8bc6\u522b\u6bcf\u4e00\u6761\u86c7\u3002\u56e0\u4e3a\u4e0d\u53ef\u80fd\u51fa\u73b0\u591a\u79cd\u89e3\u6cd5\uff0c\u6240\u4ee5\u8fd9\u4e00\u6b65\u5341\u5206\u7b80\u5355\u3002\u6211\u4eec\u6bcf\u626b\u5230\u4e00\u4e2a `@`\uff0c\u5c31\u6bcf\u4e00\u6b21\u5411\u56db\u4e2a\u65b9\u5411\u679a\u4e3e\u4e00\u904d\uff0c\u770b\u54ea\u8fb9\u662f `#` \u5e76\u4e14\u4e0d\u662f\u4ece\u4e0a\u4e00\u4e2a `#` \u8fc7\u6765\u7684\uff0c\u6cbf\u7740\u86c7\u8eab\u7684\u65b9\u5411\u8d70\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u4ee5\u540e\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u5c31\u4f1a\u51fa\u73b0\u86c7\u8eab\u5f62\u6001\u591a\u89e3\u7684\u95ee\u9898\uff08\u6bd4\u5982\u86c7\u8eab\u5728\u4e00\u4e2a $2\\times2$ \u7684\u5757\u91cc\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u8bc6\u522b\u86c7\u7684\u8fc7\u7a0b\u4e2d\uff0c\u628a\u6bcf\u4e00\u4e2a\u86c7\u8eab\u90fd\u6807\u8bb0\u4e0a\u5b83\u524d\u9762\u7684\u86c7\u8eab\uff08\u6216\u86c7\u5934\uff09\u5728\u5b83\u7684\u4ec0\u4e48\u65b9\u5411\u3002\u8fd9\u6837\u4e5f\u80fd\u4fbf\u4e8e\u6211\u4eec\u4ee5\u540e\u64cd\u4f5c\u65f6\u66f4\u65b0\u86c7\u5c3e\u7684\u4f4d\u7f6e\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5f53\u539f\u6765\u7684\u86c7\u662f\u8fd9\u6837\u65f6\uff1a\n\n```\n@..#\n####\n```\n\n\u5219\u6211\u4eec\u53ef\u4ee5\u628a\u86c7\u66f4\u6539\u4e3a\u8fd9\u4e2a\u6837\u5b50\uff1a\n\n```\n@..S\nWAAA\n```\n\n\u6211\u4eec\u8fd8\u8981\u8bb0\u5f55\u4e0b\u7f16\u53f7\u3002\u53ef\u4ee5\u987a\u4fbf\u8bb0\u5f55\u4e0b\u86c7\u5934\u3001\u86c7\u5c3e\u7684\u4f4d\u7f6e\u548c\u86c7\u8eab\u7684\u957f\u5ea6\uff0c\u4ee5\u4fbf\u4e8e\u4ee5\u540e\u7684\u64cd\u4f5c\u3002\n\n---\n\n\u7b2c\u4e8c\u6b65\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6a21\u62df\u64cd\u4f5c\u4e86\u3002\u5148\u6309\u7167\u6bcf\u4e00\u6b65\u7684\u987a\u5e8f\u64cd\u4f5c\uff0c\u6bcf\u6b65\u91cc\u9762\u518d\u6309\u7167\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u64cd\u4f5c\u3002\u6a21\u62df\u7684\u65f6\u5019\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u8fc7\u7a0b\uff1a\n\n1. \u5f53\u524d\u8fd9\u6761\u86c7\u5df2\u7ecf\u6b7b\u4e86\uff0c\u8df3\u8fc7\u3002\n1. \u64cd\u4f5c\u8d8a\u754c\uff0c\u90a3\u4e48\u8fd9\u6761\u86c7\u6b7b\u4e86\uff0c\u8df3\u8fc7\u3002\n1. \u649e\u5230\u81ea\u5df1\u6216\u522b\u4eba\u3001\u5411\u76f8\u53cd\u65b9\u5411\u8fd0\u52a8\uff0c\u90a3\u4e48\u8fd9\u6761\u86c7\u6b7b\u4e86\uff0c\u8df3\u8fc7\u3002\n1. \u5982\u679c\u76ee\u6807\u4f4d\u7f6e\u662f\u7a7a\u5730\uff1a\u539f\u5148\u7684\u86c7\u5934\u53d8\u4e3a\u86c7\u8eab\uff1b\u76ee\u6807\u4f4d\u7f6e\u53d8\u6210\u86c7\u5934\u5e76\u66f4\u65b0\u86c7\u5934\u4f4d\u7f6e\uff1b\u539f\u5148\u7684\u86c7\u5c3e\u53d8\u6210\u7a7a\u5730\u5e76\u66f4\u65b0\u86c7\u5c3e\u4f4d\u7f6e\u3002\n1. \u5982\u679c\u76ee\u6807\u4f4d\u7f6e\u662f\u98df\u7269\uff1a\u957f\u5ea6\u52a0\u4e00\uff1b\u539f\u5148\u7684\u86c7\u5934\u53d8\u4e3a\u86c7\u8eab\uff1b\u76ee\u6807\u4f4d\u7f6e\u53d8\u6210\u86c7\u5934\u5e76\u66f4\u65b0\u86c7\u5934\u4f4d\u7f6e\u3002\n\n---\n\n\u6700\u540e\u968f\u4fbf\u628a\u86c7\u6309\u7167\u957f\u5ea6\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u3001\u7f16\u53f7\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u4e00\u4e0b\u8f93\u51fa\u5c31\u884c\u4e86\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\nusing namespace std;\nchar a[210][210];//\u5730\u56fe\nint dx[]={0,-1,0,1,0};\nint dy[]={0,0,-1,0,1};\n//WASD \u7684\u65b9\u5411\nint hx[30],hy[30],tx[30],ty[30],l[30],num[30];\n//\u5934\u5750\u6807\uff0c\u5c3e\u5750\u6807\uff0c\u957f\u5ea6\uff08\u6392\u5e8f\u7528\uff09\uff0c\u7f16\u53f7\nbool vis[210][210];//\u6709\u6ca1\u6709\u8bc6\u522b\u5230\u8fc7\u8fd9\u4e2a\u683c\u5b50\nchar b[30][110];//\u6bcf\u4e00\u6b65\u64cd\u4f5c\nvoid dead(int id)//\u86c7\u6b7b\u4e86\u4e4b\u540e\u8fdb\u884c\u7684\u64cd\u4f5c\n{\n    l[id]=0;\n    int x=tx[id],y=ty[id];\n    while(1)\n    {\n        char c=a[x][y];\n        a[x][y]='&';\n        if(x==hx[id]&&y==hy[id])return;\n        if(c=='W')x--;\n        if(c=='A')y--;\n        if(c=='S')x++;\n        if(c=='D')y++;\n    }\n}\nint main()\n{\n    int n,m,k,c=0;\n    cin>>n>>m>>k;\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            cin>>a[i][j];\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m;j++)\n            if(a[i][j]=='@')//\u8bc6\u522b\u4e00\u6761\u86c7\n            {\n                c++;\n                int len=0;\n                hx[c]=i,hy[c]=j,vis[i][j]=1;\n                int x=i,y=j;\n                while(1)\n                {\n                \tlen++;\n                    bool flag=0;\n                    for(int i=1;i<=4;i++)\n                    {\n                        int nx=x+dx[i],ny=y+dy[i];\n                        if(nx<1||nx>n||ny<1||ny>m)continue;\n                        if(a[nx][ny]!='#')continue;\n                        if(vis[nx][ny])continue;\n                        vis[nx][ny]=1;\n                        flag=1,x=nx,y=ny;\n                        if(i==1)a[nx][ny]='S';\n                        if(i==2)a[nx][ny]='D';\n                        if(i==3)a[nx][ny]='W';\n                        if(i==4)a[nx][ny]='A';\n                        break;\n                    }\n                    if(!flag)\n                    {\n                        tx[c]=x,ty[c]=y;\n                        break;\n                    }\n                }\n                l[c]=len;\n            }\n    for(int i=1;i<=c;i++)num[i]=i;\n    for(int i=1;i<=c;i++)\n        for(int j=1;j<=k;j++)\n            cin>>b[i][j];\n    for(int i=1;i<=k;i++)\n    {\n        for(int j=1;j<=c;j++)\n        {\n            //\u86c7\u5df2\u7ecf\u6b7b\u4e86\n        \tif(l[j]==0)continue;\n            //\u8ba1\u7b97\u76ee\u6807\u4f4d\u7f6e\n            int nx,ny;\n            if(b[j][i]=='W')nx=hx[j]-1,ny=hy[j];\n            if(b[j][i]=='A')nx=hx[j],ny=hy[j]-1;\n            if(b[j][i]=='S')nx=hx[j]+1,ny=hy[j];\n            if(b[j][i]=='D')nx=hx[j],ny=hy[j]+1;\n            //\u8d8a\u754c\n            if(nx<1||nx>n||ny<1||ny>m){dead(j);continue;}\n            //\u649e\u5230\u81ea\u5df1\u6216\u522b\u4eba\u3001\u671d\u76f8\u53cd\u65b9\u5411\u8fd0\u52a8\n            if(a[nx][ny]=='@'||(a[nx][ny]>='A'&&a[nx][ny]<='Z'&&(nx!=hx[j]||ny!=hy[j])))\n                {dead(j);continue;}\n            if(a[nx][ny]=='.')//\u76ee\u6807\u4f4d\u7f6e\u662f\u7a7a\u5730\n            {\n                //\u86c7\u5934\u79fb\u52a8\n                a[hx[j]][hy[j]]=b[j][i];\n                hx[j]=nx,hy[j]=ny;\n                a[hx[j]][hy[j]]='@';\n                //\u86c7\u5c3e\u79fb\u52a8\n                int nnx=tx[j],nny=ty[j];\n                if(a[tx[j]][ty[j]]=='W')tx[j]--;\n                else if(a[tx[j]][ty[j]]=='A')ty[j]--;\n                else if(a[tx[j]][ty[j]]=='S')tx[j]++;\n                else if(a[tx[j]][ty[j]]=='D')ty[j]++;\n                a[nnx][nny]='.';\n            }\n            else//\u76ee\u6807\u4f4d\u7f6e\u662f\u98df\u7269\n            {\n                l[j]++;//\u6539\u53d8\u957f\u5ea6\n                //\u86c7\u5934\u79fb\u52a8\n                a[hx[j]][hy[j]]=b[j][i];\n                hx[j]=nx,hy[j]=ny;\n                a[hx[j]][hy[j]]='@';\n            }\n        }\n    }\n    //\u56e0\u4e3a\u61d2\u5f97\u6539\u6210\u7ed3\u6784\u4f53\uff0c\u6240\u4ee5\u5c31\u7528\u9009\u62e9\u6392\u5e8f\u4e86\u3002\n    for(int i=1;i<=c;i++)\n        for(int j=i+1;j<=c;j++)\n            if(l[j]>l[i]||(l[j]==l[i]&&num[j]<num[i]))\n            {\n                swap(l[i],l[j]);\n                swap(num[i],num[j]);\n            }\n    for(int i=1;i<=c;i++)\n        cout<<l[i]<<\" \"<<num[i]<<endl;\n    int food=0;\n    for(int i=1;i<=n;i++)\n    \tfor(int j=1;j<=m;j++)\n    \t\tfood+=(a[i][j]=='&');\n    cout<<food<<endl;\n    return 0;\n}\n```",
        "postTime": 1673362955,
        "uid": 554145,
        "name": "Netherite_sword_666",
        "ccfLevel": 5,
        "title": "P4944 \u9898\u89e3"
    },
    {
        "content": "\u54c7\u770b\u4e86\u4e00\u4e0b\uff0c\u5f00O2\u4ee5\u540e\u4ee523ms\u62ff\u5230\u4e86\u63d0\u4ea4\u6392\u884c\u699crank1\uff0c\u6fc0\u52a8\u4e4b\u4e0b\u5199\u4e86\u8fd9\u7bc7\u9898\u89e3\uff01\uff01\n\n\u6240\u4ee5\u8bf4\u76f8\u6bd4\u5176\u4ed6\u4eba\uff0c\u6211\u7684\u4ee3\u7801\u5feb\u5728\u54ea\u91cc\u5462\uff1f\n\n\u7b54\u6848\u662f\uff1a\u94fe\u8868\u3002\n\n\u5199\u8fd9\u4e2a\u9898\u89e3\uff0c\u5176\u5b9e\u662f\u4e3a\u4e86\u5411\u5927\u5bb6\u666e\u53castl::list\n\n\u8fd9\u91cc\u7528\u5230\u4e86\u6700\u57fa\u672c\u7684list\u64cd\u4f5c\uff1a  push()  \u548c  pop()  \uff0c\u5b83\u4eec\u90fd\u6709\u4e24\u79cd\u5b50\u64cd\u4f5c\uff1a\n\n1.  push_front()\uff0cpush_back()\n\n2.  pop_front(), pop_back()\n\n\u5176\u5b9e\u7c7b\u4f3c  deque  \uff0c\u4f46\u662f\u80fd\u4f18\u5316\u4e00\u90e8\u5206\u65f6\u95f4\uff01\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u4f7f\u7528  end()  \u65f6\u9700\u8981\u51cf1\uff0c\u5426\u5219\u4f1aRE\u3002\n\n\u8fd8\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cstl::list\u3001stl::queue\u3001stl::stack\u7684\u8fed\u4ee3\u5668\u90fd\u4e0d\u652f\u6301\u76f4\u63a5\u52a0\u51cf\u3002\u8fd9\u91cc\u8981\u7528\u5230  end() - 1  \u7684\u8bdd\u5c31\u7528  --end()  \u5c31\u884c\u4e86awa\n\n\u5c0f\u5751\u5199\u5728\u4ee3\u7801\u91cc\u9762\u4e86\uff0c\u8bf7\u81ea\u884c\u6536\u770b\u5427~~\n\n```cpp\n#include <cstdio>\n#include <list>\n#include <cstring>\n#include <queue>\nusing namespace std;\nconst int st[4][2] = {{1, 0}, {0, 1}, {0, -1}, {-1, 0}};\nint n, m, k;\nint a[205][205];\nbool b[205][205];\nint cmd[21][105];\nstruct node {\n\tint x, y;\n\tnode(int x, int y) : x(x), y(y) {}\n};\nlist<node> sn[21]; // a list to record the snakes \n//sn[i].size == 0 refers that Snake I is dead\nint cnt; // the number of the snakes \n\nvoid find(node s) {\n\tmemset(b, 0, sizeof(b));\n\tsn[++cnt].push_back(s);\n\tqueue<node> q;\n\tq.push(s);\n\twhile (!q.empty()) {\n\t\tnode u = q.front();\n\t\tq.pop();\n\t\tb[u.x][u.y] = 1;\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tint tx = u.x + st[i][0], ty = u.y + st[i][1];\n\t\t\tif (!b[tx][ty] && a[tx][ty] == '#' && tx >= 1 && tx <= n && ty >= 1 && ty <= m) {\n\t\t\t\tsn[cnt].push_back(node(tx, ty)); // recording the node of the snake\n\t\t\t\tb[tx][ty] = 1;\n\t\t\t\tq.push(node(tx, ty)); // to record the current searching state\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\ninline void move(int sid, int d) {\n\tif (!sn[sid].size() || d == -1) return;\n\tregister node head = *sn[sid].begin();\n\tint tx = head.x + st[d][0], ty = head.y + st[d][1];\n\tif (a[tx][ty] == '#' || a[tx][ty] == '@') { // gg\n\t\twhile (!sn[sid].empty()) {\n\t\t\tregister node u = sn[sid].front();\n\t\t\tsn[sid].pop_front();\n\t\t\ta[u.x][u.y] = '&';\n\t\t}\n\t\treturn;\n\t}\n\tif (a[tx][ty] != '&') { // not eating \n\t\tregister node tail = *--sn[sid].end();\n\t\ta[tail.x][tail.y] = '.';\n\t\tsn[sid].pop_back();\n\t}\n\tif (sn[sid].size()) a[head.x][head.y] = '#';\n\ta[tx][ty] = '@';\n\tsn[sid].push_front(node(tx, ty));\n}\n\n// to debug\ninline void disp() {\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = 1; j <= m; j++) printf(\"%c\", a[i][j]);\n\t\tprintf(\"\\n\");\n\t}\n\tprintf(\"\\n\");\n}\n\n// to assist the priority_queue below OvO\nstruct op {\n\tint sz, id;\n\tbool operator <(const op b) const {if (sz != b.sz) return sz < b.sz; else return id > b.id;}\n};\n\nint main() {\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tchar buf[256];\n\tfgets(buf, sizeof(buf), stdin);\n\t// establishing the boarder\n\tfor (int i = 0; i <= n + 1; i++) \n\t\ta[i][0] = a[i][m + 1] = '#';\n\tfor (int j = 0; j <= m + 1; j++) \n\t\ta[0][j] = a[n + 1][j] = '#';\n\t\t\n\tfor (int i = 1; i <= n; i++) {\n\t\tfgets(buf, sizeof(buf), stdin);\n\t\tfor (int j = 1; j <= m; j++) {\n\t\t\ta[i][j] = buf[j - 1];\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) \n\t\tif (a[i][j] == '@') find(node(i, j));\n\t\n/*\n\tprintf(\"\\n\");\n\tfor (int i = 1; i <= n; i++) {\n\u624b\t\tint count = 0;\n\u52a8\t\tfor (list<node>::iterator it = sn[i].begin(); it != sn[i].end(); it++) {\n\u6ed1\t\t\ta[it->x][it->y] = count++ + 'A';\n\u59ec\t\t}\n\t}\n*/\n\t\n\tmemset(cmd, -1, sizeof(cmd));\n\tfor (int i = 1; i <= cnt; i++) {\n\t\tfgets(buf, sizeof(buf), stdin);\n\t\tfor (int j = 0; j < k; j++) {\n\t\t\tif (buf[j] == 'S') cmd[i][j + 1] = 0;\n\t\t\tif (buf[j] == 'D') cmd[i][j + 1] = 1;\n\t\t\tif (buf[j] == 'A') cmd[i][j + 1] = 2;\n\t\t\tif (buf[j] == 'W') cmd[i][j + 1] = 3;\n\t\t}\n\t}\n\tfor (int i = 1; i <= k; i++) \n\t\tfor (int j = 1; j <= cnt; j++) \n\t\t\tmove(j, cmd[j][i]);\n\t\t\t\n\tint food = 0;\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = 1; j <= m; j++) food += a[i][j] == '&';\n\t}\n\t\n\t//P.S. it is required to output the answers from longer snakes to shorter ones\n\t// I was stuck to 20 points because I have ignored this demand\n\tpriority_queue<op> qq;\n\tfor (int i = 1; i <= cnt; i++) qq.push((op){sn[i].size(), i});\n\twhile (!qq.empty()) {\n\t\tprintf(\"%d %d\\n\", qq.top().sz, qq.top().id);\n\t\tqq.pop();\n\t}\n\tprintf(\"%d\", food);\n\treturn 0;\n}\n\n```",
        "postTime": 1541407948,
        "uid": 41536,
        "name": "wuyuema",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4944 \u3010PION\u8d2a\u5403\u86c7\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/P4944)\n\n`Time:23 ms,Memory:756.00 KB,Code:3.07KB`\n\n\u4e0d\u52a0 O2\uff0c\u53d1\u6b64\u7bc7\u9898\u89e3\u7684\u65f6\u5019\u662f\u6700\u4f18\u89e3 rk1\u3002\n# \u9898\u610f\n\u7ed9\u51fa\u4e00\u4e2a\u5730\u56fe\uff0c\u5730\u56fe\u4e0a\u521d\u59cb\u6709 $c$ \u6761\u8d2a\u5403\u86c7\u548c\u4e00\u4e9b\u98df\u7269\u3002\n\n\u63a5\u4e0b\u6765\u4f1a\u7ed9\u51fa $k$ \u79d2\u5185\u6bcf\u6761\u8d2a\u5403\u86c7\u7684\u79fb\u52a8\u89c4\u5219\uff0c\u4f60\u9700\u8981\u8f93\u51fa $k$ \u79d2\u540e\u6240\u6709\u86c7\u7684\u4fe1\u606f\u3002\n# \u5206\u6790&\u4ee3\u7801\n\u5199\u4e00\u4e2a `Snake` \u7c7b\uff0c\u6765\u5b58\u653e\u6240\u6709\u6709\u5173\u86c7\u7684\u64cd\u4f5c\u3002\n```cpp\nstruct node {  //\u7ed3\u70b9\n    int x, y;\n};\n\nclass Snake {\n   private:\n    std::deque<node> body;  //\u86c7\n\n    void die(void) { //\u6e05\u9664\u86c7\u8eab\n        live = false; \n        len = 0;\n        while (!body.empty()) {\n            node cac = body.front();\n            body.pop_front();\n            map[cac.x][cac.y] = '&', restFood++;\n        }\n        return;\n    }\n\n   public:\n    Snake(int x, int y, int id) {  //BFS \u5bfb\u627e\u86c7\u8eab\n        this->id = id;\n        len = 0;\n        live = true;\n        static std::queue<node> que;\n        que.push((node){x, y});\n        while (!que.empty()) {\n            node cac = que.front();\n            vis[cac.x][cac.y] = true;\n            body.push_back(cac), len++;\n            que.pop();\n            for (int i = 0; i < 4; i++) {\n                int tx = cac.x + way[0][i], ty = cac.y + way[1][i];\n                if (tx >= 1 && tx <= n && ty >= 1 && ty <= m &&\n                    !vis[tx][ty] && map[tx][ty] == '#') que.push((node){tx, ty});\n            }\n        }\n        return;\n    }\n    ~Snake(void) {\n        body.clear();\n        return;\n    }\n\n    bool live;\n    int id, len;\n\n    void move(char way) {\n        node to = body.front();\n        map[to.x][to.y] = '#';   //\u5220\u9664\u86c7\u5934\n        if (way == 'W') to.x--;  //\u56db\u4e2a\u65b9\u5411\n        if (way == 'S') to.x++;\n        if (way == 'A') to.y--;\n        if (way == 'D') to.y++;\n        if (to.x < 1 || to.x > n || to.y < 1 || to.y > m ||\n            map[to.x][to.y] == '#' || map[to.x][to.y] == '@') return die();  //\u5982\u679c\u649e\u5230\u86c7\u8eab\u6216\u8005\u8fb9\u754c\n        body.push_front(to), len++;\n        if (map[to.x][to.y] == '&') return restFood--, void(map[to.x][to.y] = '@');  //\u5403\u98df\u7269\n        map[to.x][to.y] = '@';\n        map[body.back().x][body.back().y] = '.';  //\u5220\u9664\u5c3e\u90e8\uff0c\u589e\u52a0\u65b0\u7684\u5934\u90e8\n        return len--, body.pop_back();\n    }\n\n    inline bool operator<(const Snake& oth) const {\n        return this->len > oth.len || this->len == oth.len && this->id < oth.id;\n    }\n};\n```\n\u5176\u4e2d\u6784\u9020\u51fd\u6570\u8d1f\u8d23 BFS \u521d\u59cb\u5316\u86c7\u8eab\uff0c`move(char)` \u51fd\u6570\u8d1f\u8d23\u8ba9\u86c7\u5411\u6307\u5b9a\u65b9\u5411\u79fb\u52a8\u3002\u6b64\u65f6\u5982\u679c\u86c7\u6b7b\u4e86\u4f1a\u76f4\u63a5\u8c03\u7528 `die(void)` \u6e05\u9664\u86c7\u8eab\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u70b9\u5de7\u7684\u5c31\u662f\u5728\u86c7\u5403\u6389\u98df\u7269\u540e\uff0c\u53ea\u8981\u8ba9\u98df\u7269\u53d8\u6210\u65b0\u86c7\u5934\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5982\u679c\u86c7\u6ca1\u6709\u5403\u6389\u98df\u7269\uff0c\u5220\u9664\u86c7\u5c3e\u5e76\u4e14\u5728\u524d\u65b9\u6807\u8bb0\u65b0\u5934\u5373\u53ef\u3002\n\n---\n\u4e0a\u9762\u7684\u7c7b\u5b9a\u4e49\u5b8c\u4e4b\u540e\uff0c\u9762\u5411\u5bf9\u8c61\u6a21\u62df\u9898\u610f\u5373\u53ef\u3002\n```cpp\nint main() {\n    std::ios::sync_with_stdio(false);\n    int k, c;\n    std::cin >> n >> m >> k;\n    restFood = 0;\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= m; j++) {\n            std::cin >> map[i][j];\n            if (map[i][j] == '&') restFood++;\n        }\n    c = 0;\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= m; j++)\n            if (map[i][j] == '@') snakes.push_back((Snake){i, j, ++c});  //\u901a\u8fc7\u86c7\u5934\u76f4\u63a5\u521d\u59cb\u5316\u86c7\u8eab\n    for (int i = 0; i < c; i++)\n        for (int j = 1; j <= k; j++)\n            std::cin >> cmd[i][j];\n    for (int tim = 1; tim <= k; tim++)\n        for (int p = 0; p < c; p++) {\n            if (!snakes[p].live) continue;\n            snakes[p].move(cmd[p][tim]);  //\u8ba9\u86c7\u5411\u6307\u5b9a\u65b9\u5411\u79fb\u52a8\u4e00\u683c\n        }\n    std::sort(snakes.begin(), snakes.end());\n    for (std::vector<Snake>::iterator i = snakes.begin(); i != snakes.end(); i++)\n        std::cout << i->len << ' ' << i->id << std::endl;\n    std::cout << restFood << std::endl;\n    return 0;\n}\n```\n[\u5b8c\u6574\u4ee3\u7801](https://macesuted.blog.luogu.org/Code-P4944)",
        "postTime": 1601788766,
        "uid": 98482,
        "name": "Macesuted",
        "ccfLevel": 0,
        "title": "P4944"
    },
    {
        "content": "## Description\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4944)\u3002\n\n\u7ed9\u5b9a\u4e00\u4e2a\u8d2a\u5403\u86c7\u6e38\u620f\u7684\u539f\u59cb\u76d8\u9762\u548c\u6bcf\u6761\u86c7\u7684\u64cd\u4f5c\uff0c\u6c42\u6700\u540e\u7684\u7ed3\u679c\u3002\n\n## Solution\n\n### Part 1\uff1a\u5224\u65ad\u86c7\u5934\u548c\u86c7\u8eab\u7684\u5bf9\u5e94\u5173\u7cfb\n\n\u6570\u636e\u8303\u56f4\u4e2d\u8bf4\uff1a\n\n> \u4e14\u56fe\u4e2d\u7684\u86c7\u4e0d\u4f1a\u5f15\u8d77\u6df7\u6dc6\uff08\u5bf9\u4e8e\u4efb\u610f\u86c7\u5934\uff0c\u6700\u591a\u53ea\u6709\u4e00\u5757\u86c7\u8eab\u4e8e\u5176\u76f8\u8fde\uff0c\u800c\u86c7\u8eab\u6700\u591a\u4e3a\u4e8c\u8fde\u5757\uff09\uff0c\u4e14\u6570\u636e\u4fdd\u8bc1\u56fe\u4e2d\u7684\u86c7\u5747\u53ef\u4ee5\u5224\u65ad\u8eab\u4f53\u4e0e\u5934\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4e0d\u4f1a\u9020\u6210\u86c7\u8eab\u5f62\u6001\u591a\u89e3\u3002\n\n\u4e8e\u662f\u5bf9\u4e8e\u6bcf\u4e00\u5757\u86c7\u5934\uff0c`bfs` \u6c42\u89e3\u5373\u53ef\u3002\n\n### Part 2\uff1a\u86c7\u8eab\u7684\u5b58\u50a8\n\n\u56e0\u4e3a\u86c7\u8eab\u8981\u7ecf\u5e38\u4f38\u957f\u548c\u6539\u53d8\uff0c\u4e14\u6bcf\u6b21\u6539\u53d8\u5747\u662f\u4ece\u5934\u548c\u5c3e\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u53ef\u4ee5\u9009\u7528 `deque`\u3002\n\n### Part 3\uff1a\u6a21\u62df\u6e38\u620f\u8fc7\u7a0b\n\n\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a\n\n1. \u6309\u7167\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u64cd\u4f5c\u3002\n\n2. \u86c7\u5934\u51fa\u8fb9\u754c\u4f1a\u6b7b\u4ea1\uff0c\u4f46\u86c7\u5934\u5728\u8fb9\u754c\u4e0d\u4f1a\u3002\n\n3. \u4e24\u53ea\u86c7\u5934\u649e\u4e0a\u65f6\uff0c\u4e3b\u52a8\u649e\u7684\u90a3\u4e00\u65b9\u6b7b\u4ea1\u3002\n\n\u6839\u636e\u4ee5\u4e0a\u51e0\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5217\u51fa\u4e00\u4efd\u79fb\u52a8\u539f\u5219\uff1a\n\n- \u5f53\u79fb\u52a8\u5230\u7a7a\u5730\uff08`.`\uff09\u4e0a\u65f6\uff0c\u65b0\u7684\u961f\u5934\u4f4d\u7f6e\u8fdb\u961f\uff0c\u961f\u5c3e\u51fa\u961f\u3002\n\n- \u5f53\u79fb\u52a8\u5230\u98df\u7269\uff08`&`\uff09\u4e0a\u65f6\uff0c\u65b0\u7684\u961f\u5934\u4f4d\u7f6e\u8fdb\u961f\uff0c\u5e76\u628a\u5f53\u524d\u98df\u7269\uff08`&`\uff09 \u6539\u4e3a\u7a7a\u5730\uff08`.`\uff09\u3002\n\n- \u5f53\u79fb\u52a8\u5230\u86c7\u8eab\uff08`#`\uff09\u4e0a\u6216\u975e\u6cd5\u79fb\u52a8\u65f6\uff0c\u5168\u90e8\u51fa\u961f\uff0c\u628a\u6240\u6709\u4f4d\u7f6e\u6362\u6210\u98df\u7269\u3002\n\n### Part 4\uff1a\u8f93\u51fa\n\n\u6ce8\u610f\u9898\u9762\u4e2d\u8bf4\u7684\u8f93\u51fa\u6309**\u957f\u5ea6\u7531\u5927\u5230\u5c0f**\u6392\u5e8f\uff08\u957f\u5ea6\u76f8\u540c\u6309**\u7f16\u53f7\u7531\u5c0f\u5230\u5927\u6392\u5e8f**\uff09\u3002\n\n## Code\n\n\u56e0\u4e3a\u4e0a\u6587\u8bf4\u7684\u5f88\u6e05\u695a\uff0c\u4e14\u4ee3\u7801\u53d8\u91cf\u540d\u4e5f\u6bd4\u8f83\u660e\u786e\uff0c\u56e0\u6b64\u4ee3\u7801\u4e0d\u505a\u6ce8\u91ca\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nstruct node{\n\tint x,y,id;\n};\n\nstruct Node{\n\tint id,len;\n};\n\nnamespace GreedySnake{\n\t#define F(i,a,b) for(int i=(a); i<=(b); ++i)\n\t#define fi first\n\t#define se second\n\t#define mkp make_pair\n\t#define pb emplace_back\n\t#define N 205\n\n\tint n,m,k,SnakeCount;\n\tchar ch[N][N],Map[N][N];\n\tconst int dx[]={-1,1,0,0};\n\tconst int dy[]={0,0,-1,1};\n\tint dead[25],len[25];\n\t\n\tNode out[25];\n\tmap<char,int> ch_to_int={{'W',0},{'S',1},{'A',2},{'D',3}};\n\tvector<char> Op[25];\n\tdeque<node> dq[25]; \n\t\n\tvoid ReadIn(){\n\t\tcin>>n>>m>>k;\n\t\tF(i,1,n) F(j,1,m){\n\t\t\tcin>>ch[i][j];\n\t\t\tif(ch[i][j]=='@') ++SnakeCount;\n\t\t}\n\t\tF(i,1,SnakeCount) F(j,1,k){\n\t\t\tchar c;\n\t\t\tcin>>c;\n\t\t\tOp[i].pb(c);\n\t\t}  \n\t}\n\t\n\tvoid Bfs(){\n\t\tbool vis[N][N];\n    \tint tot=0;\n    \tF(i,1,n) F(j,1,m){\n    \t\tif(ch[i][j]=='@'){\n    \t\t\t++tot;\n    \t\t\tqueue<node> q;\n    \t\t\tq.push((node){i,j,0});\n    \t\t\tvis[i][j]=1;\n    \t\t\tMap[i][j]=tot;\n    \t\t\tdq[tot].push_back((node){i,j,tot});\n    \t\t\twhile(!q.empty()){\n    \t\t\t\tnode f=q.front(); q.pop();\n\t\t\t\t\tF(i,0,3){\n\t\t\t\t\t\tint xx=f.x+dx[i],yy=f.y+dy[i];\n\t\t\t\t\t\tif(ch[xx][yy]=='#' && !vis[xx][yy]){\n\t\t\t\t\t\t\tMap[xx][yy]=tot;\n\t\t\t\t\t\t\tq.push((node){xx,yy,0});\n\t\t\t\t\t\t\tdq[tot].push_front((node){xx,yy,tot});\n\t\t\t\t\t\t\tvis[xx][yy]=1;\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tF(i,1,SnakeCount){\n\t\t\tdead[i]=0, len[i]=dq[i].size();\n\t\t}\n\t}\n\t\n\tvoid Initalize(){\n\t\tF(i,1,n) F(j,1,m){\n\t\t\tif(ch[i][j]!='&') ch[i][j]='.';\n\t\t}\n\t}\n\t\n\tvoid Play(){\n\t\tF(t,0,k-1){\n\t\t\tF(i,1,SnakeCount){\n\t    \t\tif(dead[i]) continue;\n\t    \t\tint xx=dq[i].back().x+dx[ch_to_int[Op[i][t]]],yy=dq[i].back().y+dy[ch_to_int[Op[i][t]]];\n\t\t\t\tif(xx<1 || xx>n || yy<1 || yy>m || Map[xx][yy]){\n\t\t\t\t\twhile(!dq[i].empty()){\n\t\t\t\t\t\tch[dq[i].front().x][dq[i].front().y]='&';\n\t\t\t\t\t\tMap[dq[i].front().x][dq[i].front().y]=0;\n\t\t\t\t\t\tdq[i].pop_front();\n\t\t\t\t\t}\n\t\t\t\t\tdead[i]=1;\n\t\t\t\t}\n\t\t\t\telse if(ch[xx][yy]=='&'){\n\t\t\t\t\tch[xx][yy]='.';\n\t\t\t\t\tdq[i].push_back((node){xx,yy,i});\n\t\t\t\t\tMap[xx][yy]=i;\n\t\t\t\t\tlen[i]++;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tMap[dq[i].front().x][dq[i].front().y]=0;\n\t\t\t\t\tMap[xx][yy]=i;\n\t\t\t\t\tdq[i].pop_front();\n\t\t\t\t\tdq[i].push_back((node){xx,yy,i});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvoid GameOver(){\n\t\tF(i,1,SnakeCount) out[i]=(Node){i,(dead[i]?0:len[i])};\n\t\tsort(out+1,out+SnakeCount+1,[](Node a,Node b){\n\t\t\tif(a.len==b.len) return a.id<b.id;\n\t\t\treturn a.len>b.len;\n\t\t});\n\t\tF(i,1,SnakeCount) printf(\"%d %d\\n\",out[i].len,out[i].id);\n\t\tint sum=0;\n\t\tF(i,1,n) F(j,1,m) if(ch[i][j]=='&') sum++;\n\t\tprintf(\"%d\",sum);\n\t}\n}\n\nint main(){\n\tGreedySnake::ReadIn();\n\tGreedySnake::Bfs();\n\tGreedySnake::Initalize();\n\tGreedySnake::Play();\n\tGreedySnake::GameOver();\n\treturn 0;\n}\n```",
        "postTime": 1653742328,
        "uid": 501865,
        "name": "TheSky233",
        "ccfLevel": 4,
        "title": "P4944 PION\u8d2a\u5403\u86c7 \u9898\u89e3"
    },
    {
        "content": "    \u6a21\u62df\u597d\u9898\uff01\n    \u5927\u4f6c\u4eec\u90fd\u7528\u7684stl\u5e93\uff0c\u849f\u84bb\u7684\u6211\u53ea\u4f1a\u6570\u7ec4\u6a21\u62df\u3002\n    \u4ee3\u7801\u6bd4\u8f83\u96be\u770b\uff0c\u4e0d\u8fc7\u5e94\u8be5\u662f\u633a\u597d\u7406\u89e3\u7684\uff0c\u5982\u679c\u7528\u4ec0\u4e48\u95ee\u9898\u8bf7\u53ca\u65f6\u8054\u7cfb\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int inf=1e5+7;//\u7528inf\u6807\u8bb0\u5f20\u788d\u7269 \nconst int shiwu=1e7+2;//\u7528shiwu\u6807\u8bb0\u98df\u7269 \nstruct snake{int x,y;}h[1001][21];\nint dx[5]={0,0,0,1,-1},dy[5]={0,1,-1,0,0};\nint n,m,t,q,tot,k,j,i,mp[201][201],head[21],tail[21],flag[21];//head\u8bb0\u5f55\u5934\u7ed3\u70b9\uff0ctail\u8bb0\u5f55\u4e3a\u5c3e\u8282\u70b9 \nchar a[201][201]; \nvoid zhaoshe(int x,int y){\n\tmp[x][y]=tot;//mp\u6807\u8bb0\u67d0\u4e00\u6761\u86c7\u7684\u4f4d\u7f6e\uff0ctot\u4e3a\u86c7\u7684\u7f16\u53f7 \n\th[head[tot]][tot].x=x,h[head[tot]][tot].y=y;\n\tmp[x][y]=inf;\n\tfor(int i=1;i<=4;i++)\n\t{\n\t\tint xx=dx[i]+x,yy=dy[i]+y;\n\t\tif(xx<=m&&yy<=n&&xx>=1&&yy>=1&&a[xx][yy]=='#')\n\t\t{\n\t\t\thead[tot]++;\n\t\t  zhaoshe(xx,yy);\n\t\t} \n\t}\n}\nvoid work1()\n{\n\tif(mp[h[head[j]][j].x][h[head[j]][j].y-1]==shiwu){\n\th[++head[j]][j].x=h[head[j]-1][j].x;\n\th[++head[j]][j].y=h[head[j]-1][j].y-1;\n   mp[h[head[j]][j].x][h[head[j]][j].y]=inf;\n\t}\n\telse if(mp[h[head][j].x][h[head][j].y-1]==inf||h[head][j].x>m||h[head][j].x<1||h[head][j].y-1>n||h[tail][j].y-1<1){//\u8fd9\u6761\u86c7\u6302\u4e86 \n\tfor(int i=tail[j];i<=head[j];i++)\n  mp[h[i][j].x][h[i][j].y]=shiwu;\n  flag[j]=1;//\u6807\u8bb0 \n  }\n  else{\n  \th[++head[j]][j].x=h[head[j]-1][j].x-1;\n\th[++head[j]][j].y=h[head[j]-1][j].y;\n   mp[h[head[j]][j].x]][h[head[j]][j].y]=inf;\n   tail[j]++;\n   mp[h[tail[j]][j].x]][h[tail[j]][j].y]=0;//\u8d70\u8fc7\u53bb\u540e\u53d6\u6d88\u969c\u788d \n  }\n}\nvoid work2()\n{\n\tif(mp[h[head[j]][j].x-1][h[head[j]][j].y]==shiwu){\n\th[++head[j]][j].x=h[head[j]-1][j].x-1;\n\th[++head[j]][j].y=h[head[j]-1][j].y;\n   mp[h[head[j]][j].x]][h[head[j]][j].y]=inf;\n\t}\n\telse if(mp[h[head][j].x-1][h[head][j].y]==inf||h[head][j].x-1>m||h[head][j].x-1<1||h[head][j].y>n||h[head][j].y<1){\n\tfor(int i=tail[j];i<=head[j];i++)\n  mp[h[i][j].x][h[i][j].y]=shiwu;\n  flag[j]=1;\n  }\n  else{\n  \th[++head[j]][j].x=h[head[j]-1][j].x-1;\n\th[++head[j]][j].y=h[head[j]-1][j].y;\n   mp[h[head[j]][j].x]][h[head[j]][j].y]=inf;\n   tail[j]++;\n   mp[h[tail[j]][j].x]][h[tail[j]][j].y]=0;//\u8d70\u8fc7\u53bb\u540e\u53d6\u6d88\u969c\u788d \n  }\n}\nvoid work3()\n{\n\tif(mp[h[head[j]][j].x][h[head[j]][j].y+1]==shiwu){\n\th[++head[j]][j].x=h[head[j]-1][j].x;\n\th[++head[j]][j].y=h[head[j]-1][j].y+1;\n   mp[h[head[j]][j].x]][h[head[j]][j].y]=inf;\n\t}\n\telse if(mp[h[head][j].x][h[head][j].y+1]==inf||h[head][j].x>m||h[head][j].x<1||h[head][j].y+1>n||h[head][j].y+1<1){\n\tfor(int i=tail[j];i<=head[j];i++)\n  mp[h[i][j].x][h[i][j].y]=shiwu;\n  flag[j]=1;\n  }\n  else{\n  \th[++head[j]][j].x=h[head[j]-1][j].x;\n\th[++head[j]][j].y=h[head[j]-1][j].y+1;\n   mp[h[head[j]][j].x]][h[head[j]][j].y]=inf;\n   tail[j]++;\n   mp[h[tail[j]][j].x]][h[tail[j]][j].y]=0;//\u8d70\u8fc7\u53bb\u540e\u53d6\u6d88\u969c\u788d \n  }\n}\nvoid work4()\n{\n\tif(mp[h[head[j]][j].x+1][h[head[j]][j].y]==shiwu){\n\th[++head[j]][j].x=h[head[j]-1][j].x+1;\n\th[++head[j]][j].y=h[head[j]-1][j].y;\n   mp[h[head[j]][j].x]][h[head[j]][j].y]=inf;\n\t}\n\telse if(mp[h[head][j].x+1][h[head][j].y]==inf||h[head][j].x+1>m||h[head][j].x+1<1||h[head][j].y>n||h[head][j].y<1){//\u8fd9\u6761\u86c7\u6302\u4e86 \n\tfor(int i=tail[j];i<=head[j];i++)\n  mp[h[i][j].x][h[i][j].y]=shiwu;\n  flag[j]=1;\n  }\n  else{\n  \th[++head[j]][j].x=h[head[j]-1][j].x-1;\n\th[++head[j]][j].y=h[head[j]-1][j].y;\n   mp[h[head[j]][j].x]][h[head[j]][j].y]=inf;\n   tail[j]++;\n   mp[h[tail[j]][j].x]][h[tail[j]][j].y]=0;//\u8d70\u8fc7\u53bb\u540e\u53d6\u6d88\u969c\u788d \n  }\n}\n\nint main()\n{\n  cin>>n>>m>>k; \n  memset(head,1,sizeof(head));\n  for(i=1;i<=n;i++)\n  for(j=1;j<=m;j++)\n  {\n  cin>>a[i][j];\n  if(a[i][j]=='.')mp[i][j]=0;\n  else if(a[i][j]=='&')mp[i][j]=shiwu;\n  else if(a[i][j]=='@')tot++,zhaoshe(i,j);\n\t}\n\tfor(j=1;j<=tot;j++)\n\t{\n\t\tchar ch[1001];\n\t\tcin>>ch;\n\t\tfor(int i=0;i<k;i++)\n\t\t{\n\t\t\tif(flag[j])break;\n\t\t\tif(ch[i]=='W')work1();\n\t\t\tif(ch[i]=='A')work2();\n\t\t\tif(ch[i]=='S')work3();\n\t\t\tif(ch[i]=='D')work4();\n\t\t}\n\t}\n\tfor(int i=1;i<=tot;i++){\n\tif(flag[i])continue ;\n\telse cout<<head[i]-tail[i]<<' '<<i<<endl;\t\n}\n  int ans=0;\n  for(int i=1;i<=n;i++)\n  for(int j=1;j<=m;j++)\n  if(mp[i][j]==shiwu)ans++;\n  cout<<ans<<endl;\n  return 0;\n} \n\n```",
        "postTime": 1541580921,
        "uid": 105604,
        "name": "\u9189\u91cc\u6311\u706f\u770b\u5251",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4944 \u3010PION\u8d2a\u5403\u86c7\u3011"
    },
    {
        "content": "# [\u539f\u9898](https://www.luogu.com.cn/problem/P4944)\n\u53c8\u662f\u849f\u84bb\u6700\u7231\u7684\u5927\u6a21\u62df\uff01\u4f46\u611f\u89c9\u8fd9\u8bc4\u7ea7\u592a\u9ad8\u4e86\u5427\uff08\u56e0\u4e3a\u662f NOIP \u9898\uff1f\uff09\u3002\n\n---\n### \u5206\u6790\n\u522b\u770b\u4ed6\u9898\u76ee\u590d\u6742\uff0c\u9898\u89e3\u4ee3\u7801\u4e00\u767e\u591a\u884c\uff0c\u5176\u5b9e\u5f88\u7b80\u5355\u7684\uff01\n\n1. \u5173\u4e8e\u86c7\u7684\u8eab\u4f53\n\n\t\u6709\u4e24\u4e2a\u95ee\u9898\uff1a\n   1. \u7528\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u5b58\u50a8\u3002\n   \t  \n      \u6839\u636e\u9898\u4e2d\u7684\u6240\u6709\u8981\u6c42\uff0c\u53cc\u7aef\u961f\u5217\u662f\u6700\u597d\u7684\u9009\u62e9\uff01\n      \n      \u5bf9\u4e8e\u4e00\u6761\u86c7\uff0c\u6211\u4eec\u53ef\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b58\u50a8\u6240\u6709\u7684\u4fe1\u606f\uff0c\u6709\uff1a\n      \t1. \u86c7\u5934\u5750\u6807\n\t\t2. \u7f16\u53f7\n     \t3. \u957f\u5ea6\n     \t4. \u6240\u6709\u86c7\u8eab\u5750\u6807\n   2. \u600e\u4e48\u5f97\u5230\u86c7\u8eab\u3002\n   \n   \t\t\u7528 `dfs` \u641c\u8fde\u901a\u5757\u5373\u53ef\u3002\n\n2. \u5173\u4e8e\u98df\u7269\n\t\n    \u7528\u4e00\u4e2a\u53d8\u91cf\u5b58\u50a8\u8fd8\u5269\u591a\u5c11\u98df\u7269\uff0c\u5728\u8f93\u5165\u65f6\u987a\u4fbf\u7edf\u8ba1\u8f93\u5165\u7684\u76d8\u9762\u4e0a\u6709\u591a\u5c11\u98df\u7269\uff0c\u5728\u6e38\u620f\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u52a0\u51cf\u3002\n\n3. \u5173\u4e8e\u79fb\u52a8\n\n\t1. \u666e\u901a\u79fb\u52a8\uff08\u65e0\u4e8b\u53d1\u751f\uff09\n    \n    \t\u6b65\u9aa4\uff1a\n        1. \u5c06\u79fb\u52a8\u524d\u7684\u86c7\u5934\u66ff\u6362\u6210\u86c7\u8eab\u3002\n        2. \u5c06\u86c7\u5c3e\u66ff\u6362\u6210\u7a7a\u767d\u533a\u57df\u3002\n        3. \u5c06\u5f53\u524d\u86c7\u5934\u663e\u793a\u51fa\u6765\uff08\u5c06\u7a7a\u5730\u66ff\u6362\u6210\u86c7\u5934\uff09\u3002\n        4. \u5728\u5b58\u50a8\u86c7\u8eab\u7684\u53cc\u7aef\u961f\u5217\u4e2d\u6dfb\u52a0\u86c7\u5934\u5e76\u5220\u9664\u86c7\u5c3e\u3002\n        5. \u5c06\u86c7\u5934\u5750\u6807\u66f4\u65b0\u3002\n   2. \u5403\u98df\u7269\n   \n   \t\t\u6b65\u9aa4\uff1a\n        1. \u5c06\u98df\u7269\u603b\u6570\u51cf $1$\u3002\n        1. \u5c06\u86c7\u7684\u957f\u5ea6\u52a0 $1$\u3002\n        2. \u5c06\u79fb\u52a8\u524d\u7684\u86c7\u5934\u66ff\u6362\u6210\u86c7\u8eab\u3002\n        3. \u5c06\u5f53\u524d\u86c7\u5934\u663e\u793a\u51fa\u6765\uff08\u5c06\u98df\u7269\u66ff\u6362\u6210\u86c7\u5934\uff09\u3002\n        4. \u5728\u5b58\u50a8\u86c7\u8eab\u7684\u53cc\u7aef\u961f\u5217\u4e2d\u6dfb\u52a0\u86c7\u5934\u3002\n        5. \u5c06\u86c7\u5934\u5750\u6807\u66f4\u65b0\u3002\n   3. \u6b7b\u4ea1\uff1a\n   \t\t\n      \u6211\u7528\u4e86\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6bcf\u53ea\u86c7\u662f\u5426\u5b58\u6d3b\u3002\n      \n    \t\u60c5\u51b5\uff1a\n        1. \u4e3b\u52a8\u649e\u4e0a\u86c7\u5934\u6216\u86c7\u8eab\uff08\u5305\u62ec\u81ea\u5df1\u7684\uff09\u3002\n        2. \u649e\u4e0a\u8fb9\u754c\u3002\n        \n   \u4ee5\u4e0a\u662f\u79fb\u52a8\u540e\u6240\u6709\u7684\u53ef\u80fd\u6027\uff0c\u6211\u7528\u4e86\u4e00\u7ec4\u5750\u6807\u6765\u5b58\u50a8\u79fb\u52a8\u540e\u7684\u5750\u6807\uff0c\u518d\u67e5\u770b\u8fd9\u7ec4\u5750\u6807\u6240\u5bf9\u5e94\u7684\u683c\u5b50\u8fdb\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\u3002\n   \n4. \u5173\u4e8e\u6b7b\u4ea1\n\n    \u6b65\u9aa4\uff1a\n    \t\n   1. \u6e05\u7a7a\u5b58\u50a8\u86c7\u8eab\u7684\u53cc\u7aef\u961f\u5217\uff0c\u5e76\u5c06\u6240\u6709\u86c7\u8eab\u7684\u5750\u6807\u6240\u5bf9\u5e94\u7684\u683c\u5b50\u66ff\u6362\u6210\u98df\u7269\u3002\n   2. \u5c06\u98df\u7269\u603b\u6570\u52a0\u4e0a\u86c7\u7684\u957f\u5ea6\u3002\n   3. \u5c06\u86c7\u7684\u957f\u5ea6\u5f52\u96f6\u3002\n   4. \u66f4\u65b0\u86c7\u662f\u5426\u5b58\u6d3b\u7684\u6570\u7ec4\u3002\n   \n5. \u5173\u4e8e\u79fb\u52a8\u64cd\u4f5c\n\t   \n   \u6211\u4eec\u8981\u6309\u86c7\u7684\u8f93\u5165\u987a\u5e8f\u64cd\u4f5c\uff0c\u800c\u8f93\u5165\u64cd\u4f5c\u65f6\u662f\u5c06\u6bcf\u53ea\u86c7\u7684\u6240\u6709\u79fb\u52a8\u64cd\u4f5c\u5148\u8f93\u5165\u7684\u3002\u6240\u4ee5\u6211\u7528\u4e86\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u8bb0\u5f55\u6240\u6709\u64cd\u4f5c\uff08\u5c06\u4e00\u6761\u86c7\u7684\u64cd\u4f5c\u8bb0\u5f55\u5230\u4e00\u5217\u4e0a\uff09\uff0c\u5e76\u5728\u64cd\u4f5c\u65f6\u4e00\u884c\u4e00\u884c\u7684\u6267\u884c\u91cc\u9762\u7684\u64cd\u4f5c\u3002\n\n6. \u8f93\u51fa\n\t\u7528\u7ed3\u6784\u4f53\u6392\u5e8f\u5f97\u5230\u8f93\u51fa\u987a\u5e8f\uff0c\u5728\u6839\u636e\u9898\u76ee\u8981\u6c42\u8f93\u51fa\u5c31\u53ef\u4ee5\u8fa3\uff01\n\nPS\uff1a\u8fd9\u9898\u6211\u62a2\u5230\u4e86\u6700\u4f18\u89e3\uff08\u5728\u8fd1 400 \u6761\u8bb0\u5f55\u91cc\uff09\uff01\uff01\uff01\n\n[\u6700\u4f18\u89e3\u8bb0\u5f55](https://www.luogu.com.cn/record/109753772)\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int nx[] = {0 , 1 , 0 , -1};\nconst int ny[] = {1 , 0 , -1 , 0};\n//\u5b58\u50a8\u5750\u6807\uff0c\u8fd9\u4e2a\u4e4b\u524d\u6ca1\u63d0\u5230\nstruct Node\n{\n\tint x , y;\n};\n//\u5b58\u50a8\u86c7\u7684\u7ed3\u6784\u4f53\nstruct Snake\n{\n\tNode h;\n\tint id , len;\n\tdeque<Node> s;\n}snake[21];\nint n , m , k , c , f , book[201][201] , alive[21];\nchar mp[201][201] , opr[101][21]/*\u5b58\u50a8\u64cd\u4f5c\uff0c\u5982\u4e0a\u6240\u8ff0*/;\n\n//\u5f97\u5230\u86c7\u7684\u8eab\u4f53\u7684\u6240\u6709\u5750\u6807\nvoid getSnake(Node now)\n{\n\tsnake[c].s.push_back(now); snake[c].len++;\n\tbook[now.x][now.y] = 1;\n\tfor (int i = 0 ; i < 4 ; i++)\n\t{\n\t\tint tx = now.x + nx[i] , ty = now.y + ny[i];\n\t\tif (tx >= 1 && tx <= n && ty >= 1 && ty <= m && !book[tx][ty] && mp[tx][ty] == '#')\n\t\t\tgetSnake((Node){tx , ty});\n\t}\n\treturn;\n}\n\n//\u86c7\u6b7b\u540e\u7684\u64cd\u4f5c\nvoid died(int num)\n{\t\n\tNode ns = snake[num].s.front(); snake[num].s.pop_front();\n\twhile (!snake[num].s.empty())\n\t{\n\t\tmp[ns.x][ns.y] = '&';\n\t\tns = snake[num].s.front();\n\t\tsnake[num].s.pop_front();\n\t}\n\tf += snake[num].len; snake[num].len = 0;\n\talive[num] = 1;\n\treturn;\n}\n\n//\u8fdb\u884c\u79fb\u52a8\nvoid operate(int num , char o)\n{\n\tNode now = {snake[num].h.x , snake[num].h.y};\n\tif (o == 'W') now.x--;\n\telse if (o == 'S') now.x++;\n\telse if (o == 'A') now.y--;\n\telse now.y++;\n\t\n\tif (now.x < 1 || now.x > n || now.y < 1 || now.y > m) died(num);\n\telse if (mp[now.x][now.y] == '#' || mp[now.x][now.y] == '@') died(num);\n\telse if (mp[now.x][now.y] == '&')\n\t{\n\t\tsnake[num].len++; f--;\n\t\tmp[snake[num].h.x][snake[num].h.y] = '#';\n\t\tsnake[num].s.push_front(now); snake[num].h = now;\n\t\tmp[now.x][now.y] = '@';\n\t}\n\telse \n\t{\n\t\tmp[snake[num].h.x][snake[num].h.y] = '#';\n\t\tmp[snake[num].s.back().x][snake[num].s.back().y] = '.';\n\t\tsnake[num].s.push_front(now); snake[num].s.pop_back();\n\t\tsnake[num].h = now;\n\t\tmp[now.x][now.y] = '@';\n\t}\n\treturn;\n}\n\nbool cmp(Snake a , Snake b)\n{\n\tif (a.len == b.len) return a.id < b.id;\n\telse return a.len > b.len;\n}\n\nint main()\n{\n\tcin >> n >> m >> k;\n\tfor (int i = 1 ; i <= n ; i++)\n\t\tfor (int j = 1 ; j <= m ; j++)\n\t\t\tcin >> mp[i][j];\n\t\t\t\n\tfor (int i = 1 ; i <= n ; i++)\n\t\tfor (int j = 1 ; j <= m ; j++)\n\t\t{\n\t\t\tif (mp[i][j] == '@')//\u6309\u8f93\u5165\u987a\u5e8f\u5b58\u50a8\u6bcf\u4e00\u6761\u86c7\n\t\t\t{\n\t\t\t\tc++;\n\t\t\t\tsnake[c].h = (Node){i , j}; snake[c].id = c;\n\t\t\t\tgetSnake(snake[c].h);\n\t\t\t}\n\t\t\telse if (mp[i][j] == '&') f++;\n\t\t}\n\t\n   //\u6ce8\u610f\u64cd\u4f5c\u7684\u8f93\u5165\u683c\u5f0f\uff01\n\tfor (int i = 1 ; i <= c ; i++)\n\t\tfor (int j = 1 ; j <= k ; j++)\n\t\t\tcin >> opr[j][i];\n\t\n\tfor (int i = 1 ; i <= k ; i++)\n\t\tfor (int j = 1 ; j <= c ; j++)\n\t\t\tif (!alive[j])\n\t\t\t\toperate(j , opr[i][j]);\n\t\n   //\u8f93\u51fa\uff01\n\tsort(snake + 1 , snake + c + 1 , cmp);\n\tfor (int i = 1 ; i <= c ; i++)\n\t\tcout << snake[i].len << \" \" << snake[i].id << endl;\n\tcout << f;\n\treturn 0;\n}\n```\n[\u4e0d\u592a\u60b2\u60e8\u7684\u8bb0\u5f55](https://www.luogu.com.cn/record/list?pid=P4944&user=923403&page=1)\uff0880\u5206\u662f\u56e0\u4e3a\u6211\u628a `=` \u5199\u6210\u4e86 `==` qwq\uff09",
        "postTime": 1683843715,
        "uid": 923403,
        "name": "2011FYCCCTA",
        "ccfLevel": 0,
        "title": "\u7ec6\u8282\u7684\u758f\u5ffd [P4944 PION\u8d2a\u5403\u86c7]"
    },
    {
        "content": "\u8fd9\u8fd8\u662f\u672c\u849f\u84bb\u7b2c\u4e00\u6b21\u5199\u7d2b\u9898\u7684\u9898\u89e3\u3002   \n\u8fd9\u9053\u9898\u4e00\u770b\u5c31\u662f\u5927\u6a21\u62df~~\u76f4\u63a5\u8df3\u8fc7~~\uff0c\u5148\u4ed4\u7ec6\u5ba1\u9898\uff0c\u5206\u6790\u9898\u76ee\uff0c\u5c31\u662f\u8ba9\u6211\u4eec\u6a21\u62df\u51e0\u6761\u8d2a\u5403\u86c7\u7684\u79fb\u52a8\u8def\u5f84\u3002  \n**\u601d\u8def\uff1a**  \n1.\u8f93\u5165\u3002\u76f4\u63a5\u8f93\u5165\u5373\u53ef\u3002  \n2.\u50a8\u5b58\u3002\u53ef\u4ee5\u4f7f\u7528\u53cc\u7aef\u961f\u5217\u5b58\u50a8\u6bcf\u4e00\u6761\u86c7\u7684\u6bcf\u4e2a\u8eab\u4f53\u788e\u7247\u6240\u5728\u7684\u5750\u6807\u548c\u6570\u636e\u8f93\u5165\u7684\u5b57\u7b26\u56fe\u5b58\u50a8\u6574\u4e2a\u56fe\u3002  \n3.\u64cd\u4f5c\u3002\u4e00\u5171\u6709\u4e09\u79cd\u64cd\u4f5c\uff0c\u5206\u522b\u4e3a\u5220\u9664\u3001\u8fdb\u98df\u548c\u79fb\u52a8\u3002  \n\u5220\u9664\u64cd\u4f5c\uff1a\u5c06\u5b58\u50a8\u8be5\u86c7\u7684\u53cc\u7aef\u961f\u5217\u4e2d\u6240\u6709\u5750\u6807\u5bf9\u5e94\u7684\u70b9\u5728\u5b57\u7b26\u56fe\u4e2d\u6807\u8bb0\u4e3a\u98df\u7269\uff0c\u5e76\u5220\u9664\u8be5\u961f\u5217\uff0c\u6807\u8bb0\u8be5\u86c7\u5df2\u88ab\u5220\u9664\u3002  \n\u8fdb\u98df\u64cd\u4f5c\uff1a\u5c06\u8be5\u86c7\u539f\u6765\u7684\u5934\u90e8\u6539\u4e3a\u8eab\u4f53\uff0c\u5c06\u5bf9\u5e94\u98df\u7269\u7684\u5750\u6807\u6539\u6210\u8be5\u86c7\u5934\u90e8\uff0c\u5c31\u662f\u5728\u8be5\u86c7\u5bf9\u5e94\u7684\u53cc\u7aef\u961f\u5217\u4e2d\u4ece\u524d\u9762\u63d2\u5165\u8be5\u98df\u7269\u7684\u5728\u5750\u6807\u5373\u53ef\uff0c\u5728\u5b57\u7b26\u56fe\u4e0a\u540c\u6b65\u66f4\u65b0\u3002  \n\u79fb\u52a8\u64cd\u4f5c\uff1a\u5c06\u8be5\u86c7\u7684\u6700\u540e\u4e00\u4f4d\u5220\u9664\uff0c\u8865\u5145\u5230\u524d\u9762\u3002\u5bf9\u5e94\u7740\u66f4\u65b0\u53cc\u7aef\u961f\u5217\u548c\u5b57\u7b26\u56fe\u3002\n4.\u8f93\u5165\u3002\u6309\u7167\u9898\u76ee\u7684\u8981\u6c42\u8f93\u51fa\u6bcf\u6761\u86c7\u7684\u4fe1\u606f\u3002\u518d\u904d\u5386\u4e00\u904d\u5b57\u7b26\u56fe\uff0c\u6c42\u51fa\u4e4b\u4e2d\u98df\u7269\u7684\u6570\u91cf\uff0c\u8f93\u51fa\u5373\u53ef\u3002  \n~~\u6b64\u9898\u8f83\u6c34\uff0c\u4e5f\u5c31100+\u884c\u800c\u5df2\u3002~~  \n**\u4ee3\u7801\uff1a**  \n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int xx[4]={0,0,1,-1},yy[4]={1,-1,0,0};\nint n,m,k,cnt=0,sum=0;\nchar ch[205][205],dir[25][105];\nstruct node{\n\tint x,y;\n};\ndeque<node>q[25];\nbool vis[205][205],over[25];\nint rec(char c){\n\tif(c=='D')return 0;\n\tif(c=='A')return 1;\n\tif(c=='S')return 2;\n\tif(c=='W')return 3;\n}\nvoid del(int i){//\u5220\u9664 \n\tover[i]=1;\n\twhile(!q[i].empty()){\n\t\tint nx=q[i].front().x,ny=q[i].front().y;\n\t\tch[nx][ny]='&';\n\t\tq[i].pop_front();\n\t}\n}\nvoid eat(int i,int turn){//\u8fdb\u98df \n\tint nx=q[i].front().x,ny=q[i].front().y;\n\tch[nx][ny]='#';\n\tnx+=xx[turn];\n\tny+=yy[turn];\n\tch[nx][ny]='@';\n\tq[i].push_front({nx,ny});\n}\nvoid move(int i,int turn){//\u79fb\u52a8 \n\tint nx=q[i].front().x,ny=q[i].front().y;\n\tch[nx][ny]='#';\n\tint mx=q[i].back().x,my=q[i].back().y;\n\tch[mx][my]='.';\n\tq[i].pop_back();\n\tnx+=xx[turn];\n\tny+=yy[turn];\n\tch[nx][ny]='@';\n\tq[i].push_front({nx,ny});\n}\nstruct poin{\n\tint len,pos;\n}ans[25];\nbool cmp(poin a,poin b){\n\tif(a.len==b.len)return a.pos<b.pos;\n\treturn a.len>b.len;\n}\nsigned main(){\n\tcin >>n>>m>>k;//\u8f93\u5165 \n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tcin >>ch[i][j];\n\t\t\tif(ch[i][j]=='@'){\n\t\t\t\tcnt++;\n\t\t\t\tq[cnt].push_front({i,j});\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=cnt;i++){\n\t\tfor(int j=1;j<=k;j++){\n\t\t\tcin >>dir[i][j];\n\t\t}\n\t}\n\tfor(int i=1;i<=cnt;i++){//\u5f55\u5165\u5404\u86c7\u7684\u57fa\u672c\u4fe1\u606f \n\t\tint nx=q[i].front().x,ny=q[i].front().y;\n\t\tbool flag=true;\n\t\twhile(flag){\n\t\t\tflag=false;\n\t\t\tfor(int j=0;j<4;j++){\n\t\t\t\tint mx=nx+xx[j],my=ny+yy[j];\n\t\t\t\tif(mx<=0||mx>n||my<=0||my>m||vis[mx][my]||ch[mx][my]!='#')continue;\n\t\t\t\tnx=mx;ny=my;\n\t\t\t\tvis[nx][ny]=1;\n\t\t\t\tq[i].push_back({nx,ny});\n\t\t\t\tflag=true;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int j=1;j<=k;j++){//\u6309\u9898\u76ee\u64cd\u4f5c \n\t\tfor(int i=1;i<=cnt;i++){\n\t\t\tif(over[i])continue;\n\t\t\tint turn=rec(dir[i][j]);\n\t\t\tint nx=q[i].front().x+xx[turn],ny=q[i].front().y+yy[turn];\n\t\t\tif(nx<=0||nx>n||ny<=0||ny>m||ch[nx][ny]=='#'||ch[nx][ny]=='@'){\n\t\t\t\tdel(i);\n\t\t\t}else if(ch[nx][ny]=='&'){\n\t\t\t\teat(i,turn);\n\t\t\t}else if(ch[nx][ny]=='.'){\n\t\t\t\tmove(i,turn);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=cnt;i++){//\u8f93\u51fa \n\t\tans[i].len=q[i].size();\n\t\tans[i].pos=i;\n\t}\n\tsort(ans+1,ans+1+cnt,cmp);\n\tfor(int i=1;i<=cnt;i++){\n\t\tcout <<ans[i].len<<\" \"<<ans[i].pos<<endl;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tif(ch[i][j]=='&')sum++;\n\t\t}\n\t}\n\tcout <<sum;\n\treturn 0;\n}\n```\n",
        "postTime": 1669473120,
        "uid": 559526,
        "name": "wwwwwza",
        "ccfLevel": 0,
        "title": "P4944 PION\u8d2a\u5403\u86c7"
    },
    {
        "content": "\u4e00\u9053~~\u6076\u5fc3\u7684~~\u5927\u6a21\u62df\uff0c\u5bb3\u5f97\u6211\u8c03\u4e86\u4e00\u4e2a\u4e2d\u5348\u52a0\u4e00\u4e2a\u665a\u4e0a\u3002\n\n\u505a\u8fd9\u9053\u9898\uff0c\u9700\u8981\u5982\u4e0b\u51e0\u6b65\uff1a\n\n- \u8f93\u5165~~\u5e9f\u8bdd~~\u3002\n\n- \u50a8\u5b58\u86c7\u7684\u4fe1\u606f\u3002\n\n- \u6839\u636e\u86c7\u79fb\u52a8\u5230\u7684\u4e0d\u540c\u7684\u5730\u65b9\u6765\u66f4\u6539\u86c7\u7684\u4fe1\u606f\u3002\n\n- \u8f93\u51fa~~\u53c8\u662f\u5e9f\u8bdd~~\u3002\n\n### \u7b2c\u4e00\u90e8\u5206\uff1a\u8f93\u5165\n\n\u8fd9\u90e8\u5206\u6ca1\u6709\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\nvoid work(){\n\tcin>>n>>m>>k;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tcin>>mp[i][j];//\u50a8\u5b58\u5730\u56fe\n\t\t}\n\t}\n\tget_snake();//\u5f00\u5c40\u524d\u86c7\u7684\u4fe1\u606f\u50a8\u5b58\n\tfor(int i=1;i<=cnt;i++){\n\t\tfor(int j=1;j<=k;j++) cin>>s[i][j];\n\t}\n\tplay();//\u5f00\u59cb\u6e38\u620f\n\twrite();//\u8f93\u51fa\u5bf9\u5e94\u4fe1\u606f\n}\n```\n\n### \u7b2c\u4e8c\u90e8\u5206\uff1a\u50a8\u5b58\u86c7\u7684\u4fe1\u606f\n\n\u6ce8\u610f\u5230\u9898\u89e3\u533a\u91cc\u5927\u90e8\u5206\u7528\u7684\u662f $bfs$ \u6765\u5bfb\u627e\u86c7\uff0c\u6211\u8fd9\u91cc\u7528\u7684\u662f $dfs$\u3002\n\n\u90a3\u4e48\u6709\u4e2a\u95ee\u9898\u6765\u4e86\uff1a\u600e\u4e48\u50a8\u5b58\u86c7\u8eab\u6240\u5728\u7684\u683c\u5b50\uff1f\n\n\u4e00\u5f00\u59cb\u6211\u7528\u7684\u662f\u6570\u7ec4\uff0c\u7ed3\u679c\u81ea\u7136\u662f\u8c03\u7206\u4e86\u3002\u8003\u8651\u5230\u86c7\u8eab\u6709\u4ee5\u4e0b\u51e0\u79cd\u53ef\u80fd\uff1a\n\n- \u5c06\u5403\u5230\u7684\u98df\u7269\u66f4\u6539\u4e3a\u86c7\u5934\u3002\n\n- \u5982\u679c\u662f\u6b63\u5e38\u79fb\u52a8\uff0c\u5219\u5c06\u86c7\u5c3e\u5220\u53bb\u3002\n\n\u56e0\u6b64\uff0c\u53c8\u8981\u5904\u7406\u5934\u53c8\u8981\u5904\u7406\u5c3e\uff0c\u5f53\u7136\u662f\u7528\uff1a\n\n**\u53cc\u7aef\u961f\u5217**\u5566\uff01\n\n\u56e0\u6b64\u5728\u50a8\u5b58\u86c7\u8eab\u65f6\u6211\u7528\u7684\u662f\u53cc\u7aef\u961f\u5217\uff08\u5373```deque```\uff09\u3002\n\n```cpp\n\nstruct w{\n\tint x;\n\tint y;\n};\nstruct snake{\n\tbool die=false;\n\tint id;\n\tint len;\n\tdeque<w> body;\n}a[209];\nvoid dfs(int id,int x,int y,int l){//id\u8868\u793a\u7b2c\u51e0\u6761\u86c7\uff0cl\u8868\u793a\u76ee\u524d\u86c7\u7684\u957f\u5ea6\n\ta[id].len=max(a[id].len,l);//\u66f4\u65b0\u4e00\u4e0b\u86c7\u7684\u957f\u5ea6\n\tw aa;\n\taa.x=x,aa.y=y;\n\ta[id].body.push_back(aa);//\u5c06\u5f53\u524d\u7684\u683c\u5b50\u4f5c\u4e3a\u86c7\u8eab\uff0c\u4ece\u86c7\u5934\u5230\u86c7\u5c3e\u4e00\u6b21\u5b58\u50a8\n\tfor(int i=1;i<=4;i++){\n\t\tint xx=dx[i]+x;\n\t\tint yy=dy[i]+y;\n\t\tif(xx<1||xx>n||yy<1||yy>m||vis[xx][yy]||mp[xx][yy]=='.'||mp[xx][yy]=='&') continue;\n\t\tif(mp[xx][yy]=='#'){\n\t\t\tvis[xx][yy]=true;\n\t\t\tdfs(id,xx,yy,l+1);\n\t\t}\n\t}\n}\nvoid clear(){\n\tfor(int i=0;i<=200;i++){\n\t\tfor(int j=0;j<=200;j++) vis[i][j]=false;\n\t}\n}\nvoid get_snake(){\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tif(mp[i][j]=='@'){//\u5982\u679c\u662f\u86c7\u5934\n\t\t\t\tcnt++;//\u86c7\u6570+1\n\t\t\t\ta[cnt].id=cnt;\n\t\t\t\ta[cnt].len=1;//\u4e00\u5b9a\u8981\u5148\u8d4b\u4e88\u521d\u59cb\u957f\u5ea6\u4e3a1\uff01\n\t\t\t\tclear();//\u56e0\u4e3a\u6211\u7528\u7684\u662fdfs\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u641c\u5230\u91cd\u590d\u7684\u683c\u5b50\uff1b\u5728\u641c\u5b8c\u4e00\u6761\u86c7\u540e\u8981\u66f4\u65b0vis\u6570\u7ec4\n\t\t\t\tvis[i][j]=true;//\u86c7\u5934\u5df2\u7ecf\u641c\u8fc7\u4e86\n\t\t\t\tdfs(cnt,i,j,1);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### \u7b2c\u4e09\u90e8\u5206\uff1a\u6839\u636e\u86c7\u79fb\u52a8\u5230\u7684\u4e0d\u540c\u7684\u5730\u65b9\u6765\u66f4\u6539\u86c7\u7684\u4fe1\u606f\n\n\u86c7\u4e00\u5171\u53ea\u6709\u53ef\u80fd\u79fb\u5230\u5982\u4e0b\u51e0\u4e2a\u4f4d\u7f6e\uff1a\n\n- \u7a7a\u5730\u3002\u6b64\u65f6\u9700\u8981\u4ece\u961f\u5c3e\u5f39\u51fa\u86c7\u5c3e\uff0c\u4ece\u961f\u5934\u62c9\u5165\u65b0\u7684\u86c7\u5934\u3002\n\n- \u98df\u7269\u3002\u6b64\u65f6\u53ea\u9700\u8981\u5c06\u6709\u98df\u7269\u7684\u5730\u65b9\u66f4\u65b0\u4e3a\u65b0\u7684\u86c7\u5934**\u5e76\u5c06\u86c7\u7684\u957f\u5ea6\u52a0\u4e00**\u3002\n\n- \u8d70\u51fa\u683c\u5b50\u3001\u8d70\u5230```#```\uff08\u86c7\u8eab\uff09\u6216\u8005```@```\uff08\u86c7\u5934\uff09\uff0c\u86c7\u6b7b\u4ea1\u3002\n\n\u56e0\u6b64\uff0c\u4f9d\u7167\u8fd9\u4e9b\u8981\u70b9\u6a21\u62df\u5373\u53ef\u3002\n\n```cpp\nvoid deal(int id){//\u5904\u7406\u86c7\u6b7b\u4ea1\u540e\uff0c\u6240\u6709\u86c7\u8eab\u548c\u86c7\u5934\u53d8\u4e3a\u98df\u7269\n\twhile(!a[id].body.empty()){\n\t\tmp[a[id].body.front().x][a[id].body.front().y]='&';\n\t\ta[id].body.pop_front();\n\t}\n}\n\nvoid play(){\n\tfor(int i=1;i<=k;i++){//\u6ce8\u610f\u662f\u5148\u5faa\u73afk\u518d\u662fcnt\u6761\u86c7\uff01\n\t\tfor(int j=1;j<=cnt;j++){//\u8868\u793a\u7b2cj\u6761\u86c7\u7684\u7b2ci\u6b21\u64cd\u4f5c\n\t\t\tif(a[j].die==true) continue;//\u5982\u679c\u5df2\u7ecf\u6b7b\u4e86\u5c31\u8df3\u8fc7\n\t\t\tint tox=a[j].body.front().x;\n\t\t\tint toy=a[j].body.front().y;\n\t\t\tint nowx=a[j].body.front().x;\n\t\t\tint nowy=a[j].body.front().y;\n\t\t\tif(s[j][i]=='W') tox--;\n\t\t\tif(s[j][i]=='S') tox++;\n\t\t\tif(s[j][i]=='A') toy--;\n\t\t\tif(s[j][i]=='D') toy++;\n\t\t\t//(tox,toy)\u8868\u793a\u4e0b\u4e00\u6b65\u86c7\u5934\u7684\u4f4d\u7f6e\n\t\t\tif(mp[tox][toy]=='&'){//\u5982\u679c\u662f\u98df\u7269\n\t\t\t\tmp[nowx][nowy]='#';\n\t\t\t\tmp[tox][toy]='@';\n\t\t\t\ta[j].len++;\n\t\t\t\tw aa;\n\t\t\t\taa.x=tox;\n\t\t\t\taa.y=toy;\n\t\t\t\ta[j].body.push_front(aa);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(mp[tox][toy]=='@'||mp[tox][toy]=='#'||tox<1||tox>n||toy<1||toy>m){//\u5982\u679c\u86c7\u6ee1\u8db3\u6b7b\u4ea1\u6761\u4ef6\n\t\t\t\ta[j].die=true;\n\t\t\t\tdeal(j);\n\t\t\t\ta[j].len=0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t//\u5176\u4f59\u60c5\u51b5\u5373\u4e3a\u86c7\u8d70\u5230\u4e86\u7a7a\u5730\u4e0a\n\t\t\tmp[nowx][nowy]='#';\n\t\t\tmp[tox][toy]='@';\n\t\t\tmp[a[j].body.back().x][a[j].body.back().y]='.';\n\t\t\tw aa;\n\t\t\taa.x=tox;\n\t\t\taa.y=toy;\n\t\t\ta[j].body.push_front(aa);\n\t\t\ta[j].body.pop_back();\n\t\t}\n\t}\n}\n```\n### \u7b2c\u56db\u90e8\u5206\uff1a\u8f93\u51fa\n\n\u4f9d\u7167\u9898\u76ee\uff0c\u6309\u7167\u4ee5\u86c7\u8eab\u957f\u5ea6\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u3001\u4ee5\u86c7\u7684\u7f16\u53f7\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u540e\u8f93\u51fa\uff0c\u540c\u65f6\u66b4\u529b\u679a\u4e3e\u5730\u56fe\u7684\u683c\u5b50\uff0c\u5982\u679c\u6709\u98df\u7269\u5c31\u5c06\u7b54\u6848\u52a0\u4e00\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\nbool cmp(snake x,snake y){\n\tif(x.len==y.len) return x.id<y.id;\n\treturn x.len>y.len;\n}\nvoid write(){\n\tsort(a+1,a+cnt+1,cmp);\n\tfor(int i=1;i<=cnt;i++) cout<<a[i].len<<\" \"<<a[i].id<<endl;\n\tint ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tif(mp[i][j]=='&') ans++;\n\t\t}\n\t}\n\tcout<<ans;\n}\n```\n\u81f3\u6b64\uff0c\u6211\u4eec\u5c31\u6210\u529f\u5c06\u8fd9\u9053\u9898\u89e3\u51b3\u5566\uff01\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct w{\n\tint x;\n\tint y;\n};\nstruct snake{\n\tbool die=false;\n\tint id;\n\tint len;\n\tdeque<w> body;\n}a[209];\n\nchar mp[209][209];\nchar s[209][209];\nbool vis[209][209];\nint n,m,k;\nint cnt=0;//\u8bb0\u5f55\u76ee\u524d\u662f\u7b2c\u51e0\u6761\u86c7\n\nint dx[5]={0,0,1,0,-1};\nint dy[5]={0,1,0,-1,0};\n\nvoid dfs(int id,int x,int y,int l){//id\u8868\u793a\u7b2c\u51e0\u6761\u86c7\n\ta[id].len=max(a[id].len,l);\n\tw aa;\n\taa.x=x,aa.y=y;\n\ta[id].body.push_back(aa);\n\tfor(int i=1;i<=4;i++){\n\t\tint xx=dx[i]+x;\n\t\tint yy=dy[i]+y;\n\t\tif(xx<1||xx>n||yy<1||yy>m||vis[xx][yy]||mp[xx][yy]=='.'||mp[xx][yy]=='&') continue;\n\t\tif(mp[xx][yy]=='#'){\n\t\t\tvis[xx][yy]=true;\n\t\t\tdfs(id,xx,yy,l+1);\n\t\t}\n\t}\n}\nvoid clear(){\n\tfor(int i=0;i<=200;i++){\n\t\tfor(int j=0;j<=200;j++) vis[i][j]=false;\n\t}\n}\nvoid deal(int id){\n\twhile(!a[id].body.empty()){\n\t\tmp[a[id].body.front().x][a[id].body.front().y]='&';\n\t\ta[id].body.pop_front();\n\t}\n}\n\nvoid play(){\n\tfor(int i=1;i<=k;i++){\n\t\tfor(int j=1;j<=cnt;j++){//\u8868\u793a\u7b2cj\u6761\u86c7\u7684\u7b2ci\u6b21\u64cd\u4f5c\n\t\t\tif(a[j].die==true) continue;//\u5982\u679c\u5df2\u7ecf\u6b7b\u4e86\u5c31\u8df3\u8fc7\n\t\t\tint tox=a[j].body.front().x;\n\t\t\tint toy=a[j].body.front().y;\n\t\t\tint nowx=a[j].body.front().x;\n\t\t\tint nowy=a[j].body.front().y;\n\t\t\t\n\t\t\tif(s[j][i]=='W') tox--;\n\t\t\tif(s[j][i]=='S') tox++;\n\t\t\tif(s[j][i]=='A') toy--;\n\t\t\tif(s[j][i]=='D') toy++;\n\t\t\t//(tox,toy)\u8868\u793a\u4e0b\u4e00\u6b65\u86c7\u5934\u7684\u4f4d\u7f6e\n\t\t\tif(mp[tox][toy]=='&'){\n\t\t\t\tmp[nowx][nowy]='#';\n\t\t\t\tmp[tox][toy]='@';\n\t\t\t\ta[j].len++;\n\t\t\t\tw aa;\n\t\t\t\taa.x=tox;\n\t\t\t\taa.y=toy;\n\t\t\t\ta[j].body.push_front(aa);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(mp[tox][toy]=='@'||mp[tox][toy]=='#'||tox<1||tox>n||toy<1||toy>m){\n\t\t\t\ta[j].die=true;\n\t\t\t\tdeal(j);\n\t\t\t\ta[j].len=0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tmp[nowx][nowy]='#';\n\t\t\tmp[tox][toy]='@';\n\t\t\tmp[a[j].body.back().x][a[j].body.back().y]='.';\n\t\t\tw aa;\n\t\t\taa.x=tox;\n\t\t\taa.y=toy;\n\t\t\ta[j].body.push_front(aa);\n\t\t\ta[j].body.pop_back();\n\t\t}\n\t}\n}\nvoid get_snake(){\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tif(mp[i][j]=='@'){\n\t\t\t\tcnt++;\n\t\t\t\ta[cnt].id=cnt;\n\t\t\t\ta[cnt].len=1;\n\t\t\t\tclear();\n\t\t\t\tvis[i][j]=true;\n\t\t\t\tdfs(cnt,i,j,1);\n\t\t\t}\n\t\t}\n\t}\n}\nbool cmp(snake x,snake y){\n\tif(x.len==y.len) return x.id<y.id;\n\treturn x.len>y.len;\n}\nvoid write(){\n\tsort(a+1,a+cnt+1,cmp);\n\tfor(int i=1;i<=cnt;i++) cout<<a[i].len<<\" \"<<a[i].id<<endl;\n\tint ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tif(mp[i][j]=='&') ans++;\n\t\t}\n\t}\n\tcout<<ans;\n}\nvoid work(){\n\tcin>>n>>m>>k;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tcin>>mp[i][j];\n\t\t}\n\t}\n\tget_snake();\n\tfor(int i=1;i<=cnt;i++){\n\t\tfor(int j=1;j<=k;j++) cin>>s[i][j];\n\t}\n\tplay();\n\twrite();\n}\nint main(){\n\twork();\n}\n```\n",
        "postTime": 1616561865,
        "uid": 289275,
        "name": "Terraria",
        "ccfLevel": 0,
        "title": "P4944 PION\u8d2a\u5403\u86c7"
    },
    {
        "content": "\u8fd9\u9898\u611f\u89c9\u96be\u5ea6\u5e76\u4e0d\u90a3\u4e48\u5927\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\u3002\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <string>\n#include <queue>\nusing namespace std;\nint n,m,k,c,ans;\nchar map[202][202],oper[202][202];\nbool vis[202][202],die[202];//die[i]\u8868\u793a\u7f16\u53f7\u4e3ai\u7684\u86c7\u5df2\u7ecf\u6b7b\u4e86\nqueue< pair<int,int> >snake[202];//\u7528\u961f\u5217\u6a21\u62df\u86c7\uff0cpair\u4e2d\u4e24\u4e2aint\u5206\u522b\u6307x,y\u5750\u6807\npair<int,int>answer[202];\nstring str;\nvoid read() {\n\tcin>>n>>m>>k;\n\tgetchar();\n\tfor(int i=1; i<=n; i++) {\n\t\tcin>>str;\n\t\tfor(int j=1; j<=m; j++) {\n\t\t\tmap[i][j]=str[j-1];\n\t\t}\n\t}\n\tint temp=0;\n\twhile(cin>>str) {\n\t\ttemp++;\n\t\tfor(int i=1; i<=k; i++) {\n\t\t\toper[temp][i]=str[i-1];\n\t\t}\n\t}\n}\nvoid Snake(int x,int y,int c) {\n\tif(!vis[x][y]&&map[x][y]=='#') {\n\t\tvis[x][y]=1;\n\t\tSnake(x-1,y,c);\n\t\tSnake(x+1,y,c);\n\t\tSnake(x,y-1,c);\n\t\tSnake(x,y+1,c);\n\t\tsnake[c].push(make_pair(x,y));\n\t}\n}\nvoid search_snake() {\n\tfor(int i=1; i<=n; i++) {\n\t\tfor(int j=1; j<=m; j++) {\n\t\t\tif(map[i][j]=='@') {\n\t\t\t\tc++;\n\t\t\t\tmap[i][j]='#';\n\t\t\t\tSnake(i,j,c);\n\t\t\t}\n\t\t}\n\t}\n}\nbool cmp(pair<int,int>x,pair<int,int>y) {//\u6392\u5e8f\u89c4\u5219\n\tif(x.first!=y.first)return x.first>y.first;\n\telse return x.second<y.second;\n}\nint main() {\n\tread();//\u8bfb\u5165\u5730\u56fe\n\tsearch_snake();//\u627e\u86c7\n\tfor(int i=1; i<=k; i++) {\n\t\tfor(int j=1; j<=c; j++) {\n\t\t\tif(die[j])continue;//\u8fd9\u6761\u86c7\u5df2\u7ecf\u6b7b\u4e86\uff0c\u65e0\u9700\u5904\u7406\u3002\n\t\t\tint x,y;//\u627e\u51fa\u79fb\u52a8\u5230\u7684\u5750\u6807\n\t\t\tif(oper[j][i]=='W')x=snake[j].back().first-1,y=snake[j].back().second;\n\t\t\tif(oper[j][i]=='S')x=snake[j].back().first+1,y=snake[j].back().second;\n\t\t\tif(oper[j][i]=='A')x=snake[j].back().first,y=snake[j].back().second-1;\n\t\t\tif(oper[j][i]=='D')x=snake[j].back().first,y=snake[j].back().second+1;\n\t\t\tif(map[x][y]=='.') {//\u662f\u7a7a\u5730\n\t\t\t\tsnake[j].push(make_pair(x,y));\n\t\t\t\tmap[x][y]='#';\n\t\t\t\tmap[snake[j].front().first][snake[j].front().second]='.';\n\t\t\t\tsnake[j].pop();\n\t\t\t} else if(map[x][y]=='&') {//\u662f\u98df\u7269\n\t\t\t\tsnake[j].push(make_pair(x,y));\n\t\t\t\tmap[x][y]='#';\n\t\t\t} else {//\u649e\u5230\u8fb9\u754c\u6216\u522b\u7684\u86c7\uff0c\u6302\u4e86\u3002\u3002\u3002\n\t\t\t\twhile(!snake[j].empty()) {\n\t\t\t\t\tmap[snake[j].front().first][snake[j].front().second]='&';\n\t\t\t\t\tsnake[j].pop();\n\t\t\t\t}\n\t\t\t\tdie[j]=1;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1; i<=c; i++) {\n\t\tanswer[i].first=snake[i].size();\n\t\tanswer[i].second=i;\n\t}\n\tsort(answer+1,answer+c+1,cmp);//\u6392\u5e8f\uff0c\u51c6\u5907\u8f93\u51fa\n\tfor(int i=1; i<=c; i++) {\n\t\tcout<<answer[i].first<<' '<<answer[i].second<<endl;\n\t}\n\tfor(int i=1; i<=n; i++) {\n\t\tfor(int j=1; j<=m; j++) {\n\t\t\tif(map[i][j]=='&')ans++;\n\t\t}\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1584882467,
        "uid": 273371,
        "name": "Mr_Eight",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4944 \u3010PION\u8d2a\u5403\u86c7\u3011"
    }
]