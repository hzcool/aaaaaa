[
    {
        "content": "#### \u524d\u8a00\uff1a\n\u505a\u8fd9\u9053\u9898\u524d\u53ef\u4ee5\u5148\u53bb\u505a\u65b9\u683c\u53d6\u6570\u95ee\u9898\uff0c\u90a3\u9053\u9898\u8ddf\u8fd9\u9053\u9898\u533a\u522b\u4e0d\u5927\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u90a3\u9053\u9898\u6bd4\u8fd9\u9053\u9898\u66f4\u7b80\u5355\u4e00\u70b9\u3002\n#### \u601d\u8def\uff1a\n\u5982\u679c\u4f60\u5df2\u7ecf\u505a\u8fc7\u4e86\u65b9\u683c\u53d6\u6570\u95ee\u9898\uff0c\u90a3\u4f60\u4f1a\u53d1\u73b0\u8fd9\u9053\u9898\u6240\u6709\u70b9\u53ef\u4ee5\u8ddf\u90a3\u9053\u9898\u4e00\u6837\u5206\u6210\u4e24\u90e8\u5206\uff0c\u800c\u4e14\u5206\u6cd5\u4e00\u6a21\u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u753b\u753b\u56fe\u8bd5\u8bd5\u3002\n\n\u5982\u679c\u4f60\u6ca1\u505a\u8fc7\u90a3\u9053\u9898\uff0c\u90a3\u4e5f\u6ca1\u4e8b\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a5x5\u7684\u68cb\u76d8\n\n| O | X | O | X | O |\n| -----------: | -----------: | -----------: | -----------: | -----------: |\n| X | O | X | O | X |\n| O | X | O | X | O |\n| X | O | X | O | X |\n| O | X | O | X | O |\n\n\n\u5982\u679c\u6211\u4eec\u5c06\u6240\u6709\u70b9\u5206\u6210O\u548cX\u4e24\u79cd\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u540c\u79cd\u70b9\u65e0\u6cd5\u4e92\u76f8\u653b\u51fb\uff0c\u800c\u4e14\u5982\u679c\u4f60\u81ea\u5df1\u753b\u56fe\u7684\u8bdd\u53ef\u4ee5\u53d1\u73b0\u6240\u6709\u7684\u56fe\u90fd\u6709\u8fd9\u4e2a\u89c4\u5f8b\u3002\n\n\u90a3\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u70b9\u5206\u6210\u4e24\u4e2a\u70b9\u96c6\uff0c\u5206\u522b\u4e3aO\u70b9\u7684\u70b9\u96c6\u548cX\u7684\u70b9\u96c6\uff0c\u7136\u540e\u5728\u4e24\u4e2a\u70b9\u96c6\u6709\u67d0\u4e9b\u70b9\u5bf9\u65e0\u6cd5\u5168\u9009\u3002\n\n####  \u505a\u6cd5\uff1a\n~~\u6309\u7167\u5e38\u89c4\u5957\u8def~~\uff0c\u5148\u521b\u4e00\u4e2a\u6e90\u70b9\u548c\u6c47\u70b9\n\n\u8ba9\u6e90\u70b9\u5230\u6240\u6709O\u70b9\uff08\u5373\u6a2a\u7eb5\u5750\u6807\u52a0\u8d77\u6765\u4e3a\u5947\u6570\u7684\u70b9\uff09\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n\u8ba9\u6240\u6709X\u70b9\uff08\u5373\u6a2a\u7eb5\u5750\u6807\u52a0\u8d77\u6765\u4e3a\u5076\u6570\u7684\u70b9\uff09\u5230\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n\n\u518d\u5bf9\u65e0\u6cd5\u540c\u65f6\u9009\u62e9\u7684O\u70b9\u548cX\u70b9\uff0c\u8ba9O\u70b9\u8fde\u4e00\u6761\u5230X\u70b9\u5bb9\u91cf\u4e3a$inf$\u7684\u70b9\n\n**\u5f53\u7136\uff0c\u4ee5\u4e0a\u90fd\u662f\u4e0d\u8003\u8651\u6709\u969c\u788d\u7684\u70b9\u7684**\n\n\u6700\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u8bbe\u4e3a\u6700\u5927\u6d41\u4e3ax\uff0c\u8f93\u51fa$n*n-m-x$\u5c31\u597d\u4e86\n\n#### \u8bc1\u660e\uff1a\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u662f\u6b63\u786e\u7684\uff1f\n\n\u6211\u4eec\u5148\u7b80\u5316\u6a21\u578b\uff0c\u539f\u9898\u7ecf\u6211\u4eec\u5206\u6790\u76f8\u5f53\u4e8e\u6709\u4e00\u4e2a\u4e8c\u5206\u56fe\uff08**\u8bbe\u8fd9\u4e24\u4e2a\u70b9\u96c6\u5206\u522b\u4e3aX\uff0cY**\uff09\uff0c\u6211\u4eec\u8981\u5728\u8fd9\u4e2a\u4e8c\u5206\u56fe\u9009\u51fa\u6700\u591a\u7684\u70b9\uff0c\u4f7f\u8fd9\u4e9b\u70b9\u4e2d\u4efb\u610f\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6ca1\u6709\u8fb9\u3002\n\n\u800c\u6211\u4eec\u8981\u8bc1\u660e\u7684\u5373\u4e3a\uff0c**\u9009\u51fa\u6700\u591a\u7684\u70b9\u6570=\u539f\u70b9\u6570-\u7f51\u7edc\u6700\u5927\u6d41**\n\n\u53c8**\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\uff0c\u7f51\u7edc\u6700\u5927\u6d41=\u5c06\u6e90\u70b9\u6c47\u70b9\u5206\u5f00\u6700\u5c0f\u5272\u7684\u5bb9\u91cf**\n\n\u6240\u4ee5\u6211\u4eec\u5c06\u8bc1\u660e\u8f6c\u6362\u4e3a\u4e86\uff0c**\u9009\u51fa\u6700\u591a\u70b9\u6570=\u539f\u70b9\u6570-\u6700\u5c0f\u5272**\n\n\u800c\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u5272\u5c31\u662f\u5c06\u6240\u6709\u70b9\u5206\u5272\u6210**S\u548cT\u4e24\u4e2a\u96c6\u5408\uff0c\u5176\u4e2ds\u2208S\uff0ct\u2208T**\n\n\u6211\u4eec\u4e0d\u59a8\u5047\u8bbe**S\u222aX\u5373\u662f\u6211\u4eec\u5728X\u4e2d\u9009\u7684\u70b9\uff0cT\u222aY\u5373\u662f\u6211\u4eec\u5728Y\u4e2d\u9009\u7684\u70b9**\n\n**\u663e\u800c\u6613\u89c1\u7684\uff0cS\u222aY\u5373\u662f\u6211\u4eec\u5728X\u4e2d\u4e0d\u9009\u7684\u70b9\uff0cT\u222aX\u5373\u662f\u6211\u4eec\u5728Y\u4e2d\u4e0d\u9009\u7684\u70b9**\n\n\u90a3\u6211\u4eec\u5efainf\u7684\u8fb9\u610f\u4e49\u5373\u5728**\u6211\u4eec\u5f3a\u5236\u4e86\u4e0d\u80fd\u540c\u65f6\u9009\u7684\u4e24\u70b9\u5fc5\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff08\u5373\u4e3a\u4e00\u4e2a\u4e0d\u9009\u4e00\u4e2a\u9009\uff09\uff0c\u56e0\u4e3a\u5982\u679c\u5b83\u4eec\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5272\u7684\u5927\u5c0f\u5c31\u8d85\u8fc7\u4e86inf\uff0c\u80af\u5b9a\u4e0d\u4f1a\u6210\u4e3a\u6700\u5c0f\u5272**\n\n\u800c\u6211\u4eec\u5efa1\u7684\u8fb9\u7684\u610f\u4e49\u5373\u5728**\u5982\u679cX\u4e2d\u7684\u70b9\u4e0d\u5728S\u4e2d\uff0c\u6216\u8005Y\u4e2d\u7684\u70b9\u4e0d\u5728T\u4e2d\uff0c\u5c31\u4f1a\u635f\u5931\u4e00\u4e2a\u70b9\uff0c\u800c\u635f\u5931\u5f53\u7136\u8d8a\u5c0f\u8d8a\u597d\u4e86**\n\n\u6240\u4ee5\u53ef\u4ee5\u5f97\u5230**\u9009\u51fa\u6700\u591a\u70b9\u6570=\u539f\u70b9\u6570-\u6700\u5c0f\u5272**,\u800c\u53c8\u7531\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\uff0c\u6700\u5c0f\u5272=\u6700\u5927\u6d41\uff0c\u5c31\u53ef\u4ee5\u8dd1\u6700\u5927\u6d41\u4e86\u3002\u8bc1\u6bd5\u3002\n\n**\u8fd9\u4e5f\u5c31\u662f\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6**\n\n\u672c\u4eba\u53ea\u662f\u4e00\u4e2a\u63d0\u9ad8370\u7684\u83dc\u9e21\uff0c\u8bc1\u660e\u53ef\u80fd~~\u4e25\u91cd~~\u7a0d\u5fae\u4e0d\u5927\u4e25\u8c28\uff0c\u5927\u5bb6\u7406\u89e3\u5c31\u597d\u5566\uff0c~~\u5c31\u4e0d\u8981\u7ea0\u7ed3\u6211\u4e0d\u4f1a\u7528\u6570\u5b66\u8bed\u8a00\u8bc1\u660e\u4e86qwq~~\u3002\n#### \u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<queue>\n#include<vector>\n#include<stack>\n#include<map>\n#include<deque>\n#define inf 0x7fffffff/2\n#define eps 1e-6\n#define N 100010\n#define M 3000010\n#define K 1010\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ninline ll read()\n{\n\tchar ch=getchar();\n\tll s=0,w=1;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){s=s*10+ch-'0';ch=getchar();}\n\treturn s*w;\n}\nstruct edge\n{\n\tint next,to,fl;\n}e[M<<1];\nint n,m;\nint head[N],cnt=1;\nint depth[N];\nint x[8]={1,1,-1,-1,2,2,-2,-2},y[8]={2,-2,2,-2,1,-1,1,-1}; \n//\u9a6c\u53ef\u4ee5\u5f808\u4e2a\u65b9\u5411\u8dd1\nint flag[K][K];\nqueue<int>Q;\nint s,t;\ninline void add_edge(int from,int to,int fl)\n{\n\te[++cnt].to=to;\n\te[cnt].next=head[from];\n\te[cnt].fl=fl;\n\thead[from]=cnt;\n}//\u52a0\u8fb9\ninline int arr(int x,int y)\n{\n\treturn (x-1)*n+y;\n}//\u5750\u6807\u8f6c\u6362\ninline int bfs()\n{\n\tmemset(depth,0,sizeof(depth));while(!Q.empty())Q.pop();\n\tQ.push(s);depth[s]=1;\n\twhile(!Q.empty())\n\t{\n\t\tint x=Q.front();Q.pop();\n\t\tfor(register int i=head[x];i;i=e[i].next)\n\t\t{\n\t\t\tif(e[i].fl>0&&!depth[e[i].to])\n\t\t\t{\n\t\t\t\tdepth[e[i].to]=depth[x]+1;Q.push(e[i].to);\n\t\t\t}\n\t\t}\n\t}\n\treturn depth[t];\n}\nint dfs(int now,int flow)\n{\n\tif(now==t)return flow;\n\tint ret=0;\n\tfor(register int i=head[now];i;i=e[i].next)\n\t{\n\t\tif(ret==flow)return flow;\n\t\tif(depth[e[i].to]==depth[now]+1&&e[i].fl>0)\n\t\t{\n\t\t\tint fl=dfs(e[i].to,min(flow,e[i].fl));\n\t\t\tif(fl>0)\n\t\t\t{\n\t\t\t\tret+=fl;\n\t\t\t\te[i].fl-=fl;\n\t\t\t\te[i^1].fl+=fl;\n\t\t\t}\n\t\t}\n\t}\n\tif(!ret)depth[now]=0;\n\treturn ret;\n}\ninline int Dinic()\n{\n\tint sum=0;\n\twhile(bfs())\n\t{\n\t\tint x=1;while(x){x=dfs(s,inf);sum+=x;}\n\t}\n\treturn sum;\n}//\u6700\u5927\u6d41\nint main()\n{\n\tn=read(),m=read();\n\tt=n*n+1;//\u6709n*n\u4e2a\u70b9\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tint x=read(),y=read();\n\t\tflag[x][y]=1;\n\t}\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tfor(register int j=1;j<=n;j++)\n\t\t{\n\t\t\tif((i+j)&1)\n\t\t\t{\n\t\t\t\tif(!flag[i][j]){add_edge(s,arr(i,j),1),add_edge(arr(i,j),s,0);}//O\u70b9\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!flag[i][j]){add_edge(arr(i,j),t,1),add_edge(t,arr(i,j),0);}//X\u70b9\n\t\t\t}\n\t\t}\n\t}\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tfor(register int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(((i+j)&1)==0)continue;\n\t\t\tfor(register int k=0;k<8;k++)\n\t\t\t{\n\t\t\t\tint tox=i+x[k],toy=j+y[k];\n\t\t\t\tif(tox>=1&&tox<=n&&toy>=1&&toy<=n&&!flag[tox][toy])\n\t\t\t\t{\n\t\t\t\t\tadd_edge(arr(i,j),arr(tox,toy),inf),add_edge(arr(tox,toy),arr(i,j),0);\n                    //\u5bf9\u4e8e\u4e0d\u80fd\u540c\u65f6\u9009\u7684\u70b9\u5efainf\u8fb9\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tint flow=Dinic();//\u6c42\u51fa\u6700\u5c0f\u5272\u5373\u6700\u5927\u6d41\n\tprintf(\"%d\\n\",n*n-m-flow);//\u8f93\u51fa\n\treturn 0;\n}\n```\n\n#### \u540e\u8bb0\uff1a\n\n\u505a\u4e86\u8fd9\u9053\u9898\u6211\u6700\u5927\u7684\u542f\u793a\u5c31\u662f\u9a6c\u7684\u8def\u5f84\u5c45\u7136\u53ef\u4ee5\u548c\u65b9\u683c\u53d6\u6570\u95ee\u9898\u4e00\u6837\u5206\u6210\u4e24\u7c7b\u70b9\uff0c\u4ee5\u540e\u518d\u9047\u5230\u7c7b\u4f3c\u7684\u68cb\u76d8\u4e2d\u7684\u95ee\u9898\u65f6\uff0c\u8981\u5148\u770b\u770b\u68cb\u76d8\u4e2d\u7684\u70b9\u662f\u5426\u4e5f\u80fd\u5206\u6210\u4e24\u79cd\u8dd1\u6700\u5927\u6d41\u3002\n\n\u5982\u679c\u4f60\u89c9\u5f97\u6211\u7684\u9898\u89e3\u5199\u5f97\u8fd8\u4e0d\u9519\u7684\u8bdd\uff0c\u5e0c\u671b\u4f60\u80fd\u7ed9\u6211\u70b9\u4e2a\u8d5e\u3002\n\n\u5982\u679c\u4f60\u5bf9\u6211\u7684\u9898\u89e3\u6709\u4ec0\u4e48\u4e0d\u61c2\u7684\u5730\u65b9\uff0c\u6216\u8005\u6211\u7684\u9898\u89e3\u5199\u5f97\u6709\u4efb\u4f55\u95ee\u9898\u7684\u8bdd\uff0c\u53ef\u4ee5\u79c1\u4fe1\u6211\u544a\u77e5\uff0c\u6211\u5c3d\u91cf\u5c06\u6211\u7684\u9898\u89e3\u505a\u5230\u6700\u597d\u7684\u7a0b\u5ea6\u3002\n\n\n\n",
        "postTime": 1544260860,
        "uid": 72419,
        "name": "WAPER4EVER",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011"
    },
    {
        "content": "[${\\color{#88cc00}\\text{\u6b22\u8fce\u62dc\u8bbf\u6211\u8fd9\u4e2a\u849f\u84bb\u7684\u535a\u5ba2}}$](https://www.luogu.com.cn/blog/Wendigo/)\n\n[P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011](https://www.luogu.com.cn/problem/P3355)\n\n### \u6b64\u9898\u7b97\u6cd5:\u7f51\u7edc\u6d41$+$\u6700\u5c0f\u5272($=$\u6700\u5927\u6d41)\n\n\u6700\u5927\u6d41\u662f\u4e00\u79cd\u7f51\u7edc\u6d41\u95ee\u9898\u3002\n\n\u4e0d\u4f1a**\u6700\u5c0f\u5272-\u6700\u5927\u6d41**\u7684\u8bf7\u6309[<1>](https://www.luogu.com.cn/problem/P3376)\u3002\n\n**\u5f00\u59cb\u8bb2\u9898\uff1a**\n\n\u5148\u5c06\u56fe\u76f8\u90bb**\u9ed1\u767d\u67d3\u8272(\u5982\u4e0b\u6837\u4f8b)**\u3002\n\n![hbls.jpg](https://i.loli.net/2019/12/24/KUOuPgmzjQV7aX1.jpg)\n\n\u7531\u4e8e\u4e00\u53ea\u9a91\u58eb\u80fd\u653b\u51fb\u5230\u7684\u9a91\u58eb\u5728\u4e0e\u81ea\u5df1**\u5f02\u8272**\u7684\u683c\u4e2d\u3002\n\n\u6240\u4ee5\u6709\u4e00\u79cd\u6446\u6cd5\u662f\u90fd\u6446\u767d\u683c\u5b50\u4e0a\u6216\u9ed1\u683c\u5b50\u4e0a\u3002\n\n\u518d\u5c06**\u80fd\u653e\u9a91\u58eb\u7684\u5730\u65b9\u90fd\u653e\u4e0a**\u3002\n\n\u8fd9\u4e48\u505a\u53ef\u4ee5\u628a**\u6254\u6389\u9a91\u58eb**\u5316\u4e3a**\u6c42\u6700\u5c0f\u5272**\u95ee\u9898\u3002\n\n\u53ef\u4ee5\u628a\u4e00\u6761**\u4e92\u76f8\u653b\u51fb**\u7684\u5173\u7cfb\u53d8\u4e3a\u7f51\u7edc\u6d41\u8def\u5f84\uff0c\n\n\u6c42**\u6700\u5c11**\u6254\u6389\u51e0\u4e2a\u9a91\u58eb\uff0c\u4f7f\u5f97**\u7f51\u7edc\u6700\u5927\u6d41**\u4e3a$0$\u3002\n\n\u5c31\u76f8\u5f53\u4e8e\u6c42\u7f51\u7edc\u6d41\u56fe\u7684**\u6700\u5c0f\u5272**(\u6700\u5927\u6d41$=$\u6700\u5c0f\u5272)\u3002\n\n\u7531\u4e8e\u4e00\u4e2a\u9a91\u58eb\u80fd\u4e0e\u591a\u4e2a\u9a91\u58eb\u4e92\u76f8\u653b\u51fb\uff0c\u6240\u4ee5\u53ef\u4ee5**\u5171\u7528\u8def\u5f84**\u3002\n\n**${\\color{#88cc00}\\text{\u8fde\u7f51\u7edc\u6d41\u56fe}}$\uff1a**\n\n**1.\u6e90\u70b9$s$\u5411\u6bcf\u4e2a\u767d\u683c\u5b50\u8fde\u6d41\u91cf\u4e3a$1$\u7684\u8fb9\u3002**\n\n**2.\u6bcf\u4e2a\u767d\u683c\u5b50\u5411\u80fd\u653b\u51fb\u5230\u7684\u9ed1\u683c\u5b50\u8fde\u6d41\u91cf\u4e3a\u221e\u7684\u8fb9\u3002**\n\n**3.\u6bcf\u4e2a\u9ed1\u683c\u5b50\u5411\u6c47\u70b9$t$\u8fde\u6d41\u91cf\u4e3a$1$\u7684\u8fb9\u3002**\n\n![hbls2.jpg](https://i.loli.net/2019/12/24/FGjKXPouT642Yks.jpg)\n\n>\u6ce8\u610f\uff0c\u56e0\u4e3a\u8fd9\u56fe\u6700\u5927\u6d41\u6c42\u51fa\u7684\u53ea\u662f\u8981\u6254\u51e0\u4e2a\u9a91\u58eb\uff0c\u6240\u4ee5\u7b54\u6848\u4e3a$n^2-m-maxflow$\u3002\n\n## \u4ee5\u4e0b\u662f\u4ee3\u7801$+$\u6ce8\u91ca\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+10; //n\u65b9\u5927\u5c0f\nconst int M=2e6+10; //10n\u65b9\u5927\u5c0f\nconst int inf=1e8+10;\nint n,m,s,t,ans;\nstruct edge{\n\tint adj,nex,fw;\n}e[M];\nint g[N],top=1;\nvoid add(int x,int y,int z){\n\te[++top]=(edge){y,g[x],z};\n\tg[x]=top;\n}\n//\u4ee5\u4e0b\u662f\u6700\u5927\u6d41\u6a21\u677f\uff0c\u6bcf\u9053\u9898\u90fd\u4e00\u6837\nint dep[N],cur[N];\nbool vis[N];\nqueue<int> Q;\nbool bfs(){\n\tfor(int i=1;i<=n;i++)\n\t\tvis[i]=0,cur[i]=g[i];\n\tQ.push(s),vis[s]=1,dep[s]=0;\n\twhile(Q.size()){\n\t\tint x=Q.front(); Q.pop();\n\t\tfor(int i=g[x];i;i=e[i].nex){\n\t\t\tint to=e[i].adj;\n\t\t\tif(!vis[to]&&e[i].fw){\n\t\t\t\tvis[to]=1;\n\t\t\t\tdep[to]=dep[x]+1;\n\t\t\t\tQ.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn vis[t];\n}\nint dfs(int x,int F){\n\tif(!F||x==t)\n\t\treturn F;\n\tint flow=0,f;\n\tfor(int i=cur[x];i;i=e[i].nex){\n\t\tint to=e[i].adj; cur[x]=i;\n\t\tif(dep[x]+1==dep[to]&&\n\t\t(f=dfs(to,min(F,e[i].fw)))>0){\n\t\t\te[i].fw-=f;\n\t\t\te[i^1].fw+=f;\n\t\t\tflow+=f,F-=f;\n\t\t\tif(!F) break;\n\t\t}\n\t}\n\treturn flow;\n}\nint p(int x,int y){return (x-1)*n+y;} //\u7ed9\u70b9\u7f16\u53f7\nbool G[210][210]; //1\u8868\u793a\u969c\u788d\uff0c0\u8868\u793a\u53ef\u653e\u9a91\u58eb\nint tx[]={1,1,2,2,-1,-1,-2,-2};\nint ty[]={-2,2,-1,1,-2,2,-1,1}; //\u653b\u51fb\u65b9\u5411\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,x,y;i<=m;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tG[x][y]=1;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(G[i][j]) continue;\n\t\t\tif((i+j)&1){ //\u767d\u683c\u5b50\n\t\t\t\tadd(1,p(i,j)+1,1);\n\t\t\t\tadd(p(i,j)+1,1,0);\n\t\t\t\tfor(int k=0;k<8;k++){\n\t\t\t\t\tint xt=tx[k]+i,yt=ty[k]+j;\n\t\t\t\t\tif(xt<1||xt>n||yt<1||yt>n||G[xt][yt])\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tadd(p(i,j)+1,p(xt,yt)+1,inf);\n\t\t\t\t\tadd(p(xt,yt)+1,p(i,j)+1,0);\n\t\t\t\t}\n\t\t\t} else add(p(i,j)+1,n*n+2,1), //\u9ed1\u683c\u5b50\n\t\t\t\tadd(n*n+2,p(i,j)+1,0);\n\t\t}\n\tans=n*n-m,s=1,n=t=n*n+2; //\u5c06ans\u521d\u59cb\u5316\uff0c\u5c06n\u53d8\u4e3a\u7f51\u7edc\u6d41\u8282\u70b9\u6570\n\twhile(bfs()) ans-=dfs(s,inf); //\u7f51\u7edc\u6d41\u6a21\u677f\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n\u56fe\u662f\u7528\u753b\u56fe\u8f6f\u4ef6\u624b\u753b\u7684\u3002\n\n**\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u70b9\u4e2a\u8d5e\u5427\u3002**\n\n\u8c22\u8c22\u5927\u5bb6! !\n\n\n\n\n",
        "postTime": 1577186267,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011"
    },
    {
        "content": "# \u6ce8\u610f\uff0c\u5efa\u56fe\u7684\u5947\u5076\u6027\u6781\u5927\u7a0b\u5ea6\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u6548\u7387\n\n~~\u867d\u7136\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48~~\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u5308\u7259\u5229\u4e5f\u80fd\u8fc791+9=100\u5206\u3002\u3002\u3002\n\n# \u5308\u7259\u5229\u7b97\u6cd5\n\u5947\u5076\u5efa\u56fe\uff08\u5982\u679c\u4e0d\u8fd9\u6837\u4f1aTLE\u66f4\u591a\u7684\u70b9\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5947\u6570\u7684\u70b9\u653e\u5728\u5de6\u8fb9\uff0c\u5076\u6570\u7684\u70b9\u653e\u5728\u53f3\u8fb9\uff0c\u82e5\u80fd\u653b\u51fb\u5230\u5f7c\u6b64\uff0c\u5219\u5c06\u5b83\u4eec\u8fde\u8fb9\uff0c\u518d\u6c42\u4e00\u8fb9\u5308\u7259\u5229\n# \u6700\u5927\u6d41\u6c42\u6cd5\n\u5728\u5308\u7259\u5229\u7b97\u6cd5\u5efa\u6a21\u7684\u57fa\u7840\u4e0a\u5728\u5de6\u53f3\u4e24\u4fa7\u5206\u522b\u52a0\u4e0a\u6e90\u70b9\u548c\u6c47\u70b9\uff0c\u5e76\u5c06\u6e90\u70b9\u548c\u6240\u6709\u7684\u5947\u6570\u70b9\u8fde\u8fb9\uff0c\u6c47\u70b9\u548c\u6240\u6709\u7684\u5076\u6570\u70b9\u8fde\u8fb9\uff08\u5bb9\u91cf\u90fd\u4e3a1\uff09\n\n\u82e5\u80fd\u653b\u51fb\u5230\u5f7c\u6b64\uff0c\u5219\u5c06\u5b83\u4eec\u8fde\u8fb9\uff08\u5bb9\u91cf\u4e3a\u65e0\u7a77\u5927\uff09\uff0c\u518d\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u5373\u53ef\n\n# \u5308\u7259\u5229\u7b97\u6cd5\u4ee3\u7801\uff0891\u5206\uff09\u4ee5\u5076\u6570\u5efa\u56fe\n```cpp\n#include<cstdio>\n#include<cstring>\n#define N 202\n#define M 20002\n#define r(i,a,b) for(int i=a;i<=b;i++)\nusing namespace std;int n,m,ans,one,g[N][N],two,link[M],xq[M][2];\nbool vis[M],ok[N][N];\nconst short dx[8]={1,1,-1,-1,2,2,-2,-2};\nconst short dy[8]={-2,2,-2,2,-1,1,-1,1};\nint read()//\u8f93\u5165\u6d41\n{\n    char c;int f=0,d=1;\n    while((c=getchar())<48||c>57)if(c=='-')d=-1;f=(f<<3)+(f<<1)+c-48;\n    while((c=getchar())>=48&&c<=57)f=(f<<3)+(f<<1)+c-48;\n    return d*f;\n}\nbool check(int x,int y)//\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u8981\u6c42\n{\n    if(x<1||x>n||y<1||y>n) return false;\n    if(ok[x][y]||vis[g[x][y]]) return false;\n    return true;\n}\nbool find(int x)\n{\n    int k=0,q=0,x1,y1;\n    r(i,0,7)//\u8fd9\u91cc\u6ca1\u6709\u5fc5\u8981\u5efa\u90bb\u63a5\u8868\uff0c\u56e0\u4e3a\u9a91\u58eb\u9876\u591a\u8df3\u5468\u56f4\u7684\u516b\u4e2a\u70b9\n    {\n        x1=xq[x][0]+dx[i];\n        y1=xq[x][1]+dy[i];//\u53d6\u4e0b\u5750\u6807\n        if(check(x1,y1))//\u6ca1\u6709\u8df3\u51fa\u53bb\u5219\u8fdb\u884c\n        {\n            k=g[x1][y1];\n            q=link[k];\n            link[k]=x;\n            vis[k]=true;\n            if(!q||find(q)) return true;\n            link[k]=q;\n        }\n    }\n    return false;\n}\nint main()\n{\n    n=read();m=read();\n    r(i,1,m) ok[read()][read()]=true;\n    r(i,1,n)\n     r(j,1,n)\n      if(!ok[i][j])\n       {\n        if((i+j)&1)\n         g[i][j]=++one;\n        else\n        {\n            g[i][j]=++two;\n            xq[two][0]=i;\n            xq[two][1]=j;//\u5947\u5076\u5efa\u56fe\n        }\n       }\n    ans=n*n-m;\n    r(i,1,two)\n    {\n        memset(vis,0,sizeof(vis));\n        if(find(i)) ans--;\n    }\n    printf(\"%d\",ans);//\u8f93\u51fa\n}\n```\n# \u5308\u7259\u5229\u7b97\u6cd5\u4ee3\u7801\uff08AC \u4ee5\u5947\u6570\u5efa\u56fe\uff09\n\u8bf4\u5b9e\u8bdd\u6211\u4e5f\u89c9\u5f97\u5f88\u5947\u602a\u3002\u3002\u3002\n```cpp\n#include<cstdio>\n#include<cstring>\n#define N 202\n#define M 20002\n#define r(i,a,b) for(int i=a;i<=b;i++)\nusing namespace std;int n,m,ans,one,g[N][N],two,link[M],xp[M],xq[M];\nbool vis[M],ok[N][N];\nconst short dx[8]={1,1,-1,-1,2,2,-2,-2};\nconst short dy[8]={-2,2,-2,2,-1,1,-1,1};\nint read()\n{\n    char c;int f=0,d=1;\n    while((c=getchar())<48||c>57)if(c=='-')d=-1;f=(f<<3)+(f<<1)+c-48;\n    while((c=getchar())>=48&&c<=57)f=(f<<3)+(f<<1)+c-48;\n    return d*f;\n}\nbool find(int x)\n{\n    int k=0,q=0,x1,y1;\n    r(i,0,7)\n    {\n        x1=xp[x]+dx[i];y1=xq[x]+dy[i];\n        if(x1<1||y1<1||x1>n||y1>n) continue;\n        k=g[x1][y1];\n        if(vis[k]||ok[x1][y1]) continue;\n        q=link[k];\n        link[k]=x;\n        vis[k]=true;\n        if(!q||find(q)) return true;\n        link[k]=q;\n    }\n    return false;\n}\nint main()\n{\n    n=read();m=read();\n    r(i,1,m) ok[read()][read()]=true;\n    r(i,1,n)\n     r(j,1,n)\n      if(!ok[i][j])\n       {\n        if(!((i+j)&1))\n         g[i][j]=++two;\n        else\n        {\n            g[i][j]=++one;\n            xp[one]=i;\n            xq[one]=j;\n        }\n       }\n    ans=n*n-m;\n    r(i,1,one)\n    {\n        memset(vis,0,sizeof(vis));\n        if(find(i)) ans--;\n    }\n    printf(\"%d\",ans);\n}\n```\n# \u6700\u5927\u6d41\u4ee3\u7801\uff08\u7528\u5947\u6570\u5efa\uff0c\u5426\u5219\u4f1a\u8d85\u65f6\u3002\u3002\u3002\uff09\n```cpp\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#define M 500001//\u8fd9\u4e2a\u4e00\u5b9a\u8981\u5f00\u5f97\u8db3\u591f\u5927\n#define k(i,j) (i-1)*n+j//\u7528\u8fd9\u4e2a\u8868\u793a\u6bcf\u4e2a\u70b9\u7684\u6807\u53f7\n#define min(a,b) a<b?a:b\n#define max(a,b) a>b?a:b\nusing namespace std;int id,f,n,m,d[M],l[M],s,t,sum,a;char c;\nbool ok[201][201];\nint read()\n{\n\tchar c;f=0;\n\twhile(c=getchar(),c<=47||c>=58);f=(f<<3)+(f<<1)+c-48;\n\twhile(c=getchar(),c>=48&&c<=57) f=(f<<3)+(f<<1)+c-48;\n\treturn f;\n}\nstruct node{int next,to,w;}e[M];int tot;\nconst short dx[8]={1,1,-1,-1,2,2,-2,-2};\nconst short dy[8]={2,-2,2,-2,1,-1,1,-1};//\u516b\u4e2a\u65b9\u5411\nvoid add(int u,int v,int w)//\u5efa\u8fb9\n{\n\te[tot].to=v;e[tot].w=w;e[tot].next=l[u];l[u]=tot++;\n\te[tot].to=u;e[tot].w=0;e[tot].next=l[v];l[v]=tot++;\n\treturn;\n}\nbool bfs()//\u5206\u5c42\u56fe\u5efa\u8bbe\n{\n\tmemset(d,-1,sizeof(d));\n\tqueue<int>q;\n\tq.push(s);d[s]=0;\n\twhile(q.size())\n\t{\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=l[x];i!=-1;i=e[i].next)\n\t\t{\n\t\t\tint y=e[i].to;\n\t\t\tif(e[i].w&&d[y]==-1)\n\t\t\t{\n\t\t\t\td[y]=d[x]+1;\n\t\t\t\tq.push(y);\n\t\t\t\tif(y==t) return true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint dfs(int x,int flow)//\u5bfb\u627e\u53ef\u884c\u6d41\n{\n\tif(x==t||!flow) return flow;\n\tint rest=0,f;\n\tfor(int i=l[x];i!=-1;i=e[i].next)\n\t{\n\t\tint y=e[i].to;\n\t\tif(d[x]+1==d[y]&&e[i].w)\n\t\t{\n\t\t\trest+=(f=dfs(y,min(flow-rest,e[i].w)));\n            e[i].w-=f;e[i^1].w+=f;\n\t\t}\n\t}\n\tif(!rest) d[x]=-1;\n\treturn rest;\n}\nint dinic()\n{\n\tint r=0;\n\twhile(bfs()) r+=dfs(s,1e9);//\u6c42\u6700\u5927\u6d41\n\treturn r;//\u8fd4\u56de\n}\nint main()\n{\n\tmemset(l,-1,sizeof(l));\n\tn=read();m=read();s=0;t=n*n+1;sum=n*n-m;\n\twhile(m--) ok[read()][read()]=true;\n\tfor(int i=1;i<=n;i++)\n\t for(int j=1;j<=n;j++)\n\t {\n\t \tif(ok[i][j]) continue;//\u82e5\u6709\u969c\u788d\u5219\u8df3\u8fc7\n\t  \tif((i+j)&1)\n\t  \t{\n\t  \t\tadd(s,k(i,j),1);//\u4e0e\u6e90\u70b9\u76f8\u8fde\n\t  \t\tfor(int o=0;o<8;o++)\n\t    \t{\n\t    \t\tint nx=i+dx[o],ny=j+dy[o];\n\t   \t\t\tif(nx<1||ny<1||nx>n||ny>n||ok[nx][ny]) continue;\n\t   \t\t\tid=k(nx,ny);\n\t   \t\t\tadd(k(i,j),id,1e9);//\u80fd\u653b\u51fb\u5230\u5219\u8fde\u8fb9\uff0c\u4e0e\u5308\u7259\u5229\u7b97\u6cd5\u4e0d\u540c\u7684\u662f\u8fd9\u91cc\u662f\u5947\u6570\u5efa\u8fb9\uff0c\u5176\u5b9e\u65e0\u8bba\u5947\u6570\u5efa\u8fd8\u662f\u5076\u6570\u5efa\u90fd\u4e0d\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\n\t    \t}\n\t\t} else add(k(i,j),t,1);//\u8fde\u8fb9\n     }\n\tprintf(\"%d\",sum-dinic());//\u8f93\u51fa\n}\n```\n# \u540e\u8bb0\n\u8bb0\u5f97\u5728\u5b66\u6700\u5927\u6d41\u7684\u65f6\u5019\uff0c\u8001\u5e08\u8ddf\u6211\u4eec\u8bf4\u8ba9\u6211\u4eec\u7528\u7f51\u7edc\u6d41\u53bb\u505a\u6700\u5927\u5339\u914d\u7684\u9898\uff0c\u5f53\u65f6\u6211\u8fd8\u6709\u70b9\u4e0d\u89e3\uff0c\u505a\u4e86\u8fd9\u9053\u9898\u540e\u7b97\u662f\u6709\u4e86\u4e00\u4e2a\u6bd4\u8f83\u6df1\u5165\u7684\u4e86\u89e3\u5427\u3002\n\n----\n\u7f51\u7edc\u6d4124\u9898\u7684\u5176\u4ed6\u9898\u8c8c\u4f3c\u4e5f\u6709\u8bb8\u591a\u53ef\u4ee5\u7528\u5308\u7259\u5229\u7b97\u6cd5\u505a~~\uff0c\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u4f1a\u88ab\u8bc4\u4e3a\u7701\u9009/NOI-\u3002\u3002\u3002~~",
        "postTime": 1529584405,
        "uid": 52915,
        "name": "Ajwallet",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011"
    },
    {
        "content": "# **\u4e3a\u4ec0\u4e48\u662f\u6700\u5927\u72ec\u7acb\u96c6\uff1f**\n### ~~\u597d\u5427\u786e\u5b9e\u662f~~\n\u8be6\u7ec6\u8bf4\u660e:\n\u672c\u9898\u663e\u7136\u4e0d\u5b58\u5728\u552f\u4e00\u4e00\u884c\u5bf9\u5e94\u552f\u4e00\u4e00\u5217\uff08\u8eca\u7684\u653e\u7f6e\uff09\u7684\u5173\u7cfb\uff0c\u90a3\u4e48\u6211\u4eec**\u5c06\u6bcf\u4e2a\u201c\u65e5\u201d\u5b57\u7684\u5bf9\u89d2\u7ebf\u8fdb\u884c\u8fde\u63a5** \u8868\u793a\u8fd9\u4e24\u4e2a\u7aef\u70b9\u65e0\u6cd5\u5171\u5b58\u3002\n## \u539f\u9898\u8f6c\u5316\u4e3a:**\u5982\u4f55\u53bb\u6389\u6700\u5c11\u7684\u70b9\uff0c\u53bb\u6389\u6240\u6709\u7684\u8fb9**\n\u7b49\u6548\u4e8e**\u70b9\u6570-\u6700\u5c0f\u70b9\u8986\u76d6**\n## \u90a3\u4e48\u5f15\u51fa:\u6700\u5927\u72ec\u7acb\u96c6=n-\u6700\u5c0f\u70b9\u8986\u76d6\n\u53c8\u7531\u4e8e\uff08**Konig\u5b9a\u7406**\uff09\u6700\u5c0f\u70b9\u8986\u76d6=\u6700\u5927\u5339\u914d\u6570\n\u90a3\u4e48 \u5308\u7259\u5229\u7b97\u6cd5\uff0c\u62ff\u4e0b\u4e0d\u89e3\u91ca\n~~\u6700\u5927\u6d41\u4e5f\u4e0d\u9519~~\n\u6280\u5de7:dxdy\u5b58\u79fb\u52a8 for\u5faa\u73af\u89e3\u51b3\u3002\n\u6ce8\u610f\u5224\u65ad\u51fa\u754c\uff0c\u7981\u6b62\u653e\u7f6e\u5c31\u597d\u3002\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\nusing namespace std;\n\nconst int N=500;\nstruct Edge{\n    int to,nxt;\n}edge[N*N*4];\nint dx[9]={1,1,2,2,-1,-1,-2,-2};\nint dy[9]={2,-2,1,-1,2,-2,1,-1};\nint head[N*N],tot=1;\nvoid add(int x,int y){\n    edge[++tot].to=y;\n    edge[tot].nxt=head[x];\n    head[x]=tot;\n}\nint num[N][N];\nint n,m,k;\nbool vis[N*N];\nint match[N*N];\ninline int read(){\n    int ans=0;char c;bool flag=true;\n    for(;c<'0'||c>'9';c=getchar())if(c=='-')flag=false;\n    for(;c>='0'&&c<='9';c=getchar())ans=ans*10+c-'0';\n    return flag ? ans : -ans;\n}\nbool dfs(int u){\n    for(int i=head[u];i;i=edge[i].nxt){\n        int v=edge[i].to;\n        if(!vis[v]){\n            vis[v]=1;\n            if(!match[v]||dfs(match[v])){\n                match[v]=u;\n                return true;\n            }\n        }\n    }\n    return false;\n}\nbool ban[N][N];\nvoid LINK(int x,int y);\nint main(){\n    n=read();m=read();\n    for(int i=1;i<=m;i++){\n    \tint x=read(),y=read();\n    \tban[x][y]=true;\n    }\n    int cnt=0;\n    for(int i=1;i<=n;i++)\n       for(int j=1;j<=n;j++)\n           num[i][j]=++cnt;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=n;j++){\n            if(ban[i][j])continue;\n            else LINK(i,j);\n        }\n    }\n    int ans=0;\n    for(int i=1;i<=cnt;i++){\n        memset(vis,0,sizeof(vis));\n        if(dfs(i))ans++;\n    }\n    printf(\"%d\",(n*n)-m-(ans/2));\n    return 0;\n}\nvoid LINK(int x,int y){\n    for(int i=0;i<8;i++){\n        int nowx=x+dx[i],nowy=y+dy[i];\n        if(nowx>0&&nowx<=n&&nowy>0&&nowy<=n&&!ban[nowx][nowy]){\n            add(num[x][y],num[nowx][nowy]);\n            add(num[nowx][nowy],num[x][y]);\n        }\n    }\n}\n/*\n6 6 2\n1 1\n6 6\n*/\n```\n",
        "postTime": 1563345165,
        "uid": 119132,
        "name": "Binwens",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011"
    },
    {
        "content": "```cpp\n#include<iostream>\n#include<cstdio>\n/*\nlp3355 \u7f51\u7edc\u6d4124\u9898-\u9a91\u58eb\u5171\u5b58\u95ee\u9898\n\u9996\u5148\u6211\u4eec\u89c2\u5bdf\u8fd9\u9053\u9898\u3002\n\u66b4\u529b\u5730\u72b6\u538bDP\u6216\u8005\u4e4b\u7c7b\u7684\u64cd\u4f5c\u663e\u7136\u4f1aMLE/TLE\u3002\n\u6211\u4eec\u53d1\u73b0\uff0c\u6a2a\u5750\u6807\u548c\u7eb5\u5750\u6807\u76f8\u52a0\u7684\u548c\u7684\u5947\u5076\u6027\u76f8\u540c\u7684\u683c\u5b50\u6c38\u8fdc\u4e0d\u53ef\u80fd\u4e92\u76f8\u653b\u51fb\u5230\u3002\n\u6545\u800c\u6211\u4eec\u8003\u8651\u5efa\u4e00\u5f20\u4e8c\u5206\u56fe\u3002\u5c06\u6a2a\u7eb5\u5750\u6807\u7684\u548c\u7684\u5947\u5076\u6027\u4e0d\u540c\u7684\u683c\u5b50\u5206\u522b\u653e\u5728\u5de6\u53f3\u8fb9\uff0c\u7136\u540e\u5728\u80fd\u76f8\u4e92\u653b\u51fb\u5230\u7684\u70b9\u4e4b\u95f4\u8fde\u8fb9\u3002\u4f9d\u636e\u9898\u610f\uff0c\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u5230\uff0c\u6240\u4ee5\u7b54\u6848\u5373\u662f\u8fd9\u5f20\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u5e94\u5f53\u5982\u4f55\u6c42\u5f97\uff1f\u6211\u4eec\u6709\u4e00\u4e2a\u5b9a\u7406\uff1a\u4e00\u5f20\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u7684\u5927\u5c0f\u7b49\u540c\u4e8e\u9876\u70b9\u6570\u5b83\u7684\u6700\u5927\u5339\u914d\u7684\u6570\u91cf\u3002\n\u6211\u4eec\u8003\u8651\u611f\u6027\u5730\u8bc1\u660e\u8fd9\u4e2a\u5b9a\u7406\u3002 \n\u5f88\u5bb9\u6613\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e24\u4e2a\u70b9\u4e0d\u80fd\u88ab\u540c\u65f6\u9009\u53d6\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u4e4b\u95f4\u6709\u8fde\u8fb9\u3002\n\u53c8\u56e0\u4e3a\uff0c\u6709\u8fde\u8fb9\u7684\u4e24\u4e2a\u70b9\u5fc5\u7136\u662f\u5c5e\u4e8e\u4e8c\u5206\u56fe\u7684\u4e24\u7aef\u7684\u3002\n\u6545\u800c\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u70b9\u4e0d\u80fd\u88ab\u540c\u65f6\u9009\u53d6\uff0c\u5b83\u4eec\u5fc5\u7136\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u5339\u914d\u3002\n\u5bf9\u4e8e\u4e8c\u5206\u56fe\u4e0a\u7684\u6700\u5927\u5339\u914d\uff0c\u6240\u6709\u6ca1\u6709\u88ab\u5339\u914d\u7684\u70b9\u90fd\u53ef\u4ee5\u88ab\u9009\u53d6\u3002\u8fd9\u975e\u5e38\u7684\u663e\u7136\uff0c\u56e0\u4e3a\u6ca1\u6709\u88ab\u5339\u914d\u5230\u7684\u70b9\u4e4b\u95f4\u5fc5\u7136\u6ca1\u6709\u8fde\u8fb9\u3002\u5982\u679c\u6709\u8fde\u8fb9\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u589e\u52a0\u5339\u914d\uff0c\u4e0e\u6700\u5927\u5339\u914d\u77db\u76fe\u3002\n\u800c\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5339\u914d\uff0c\u90fd\u53ef\u4ee5\u9009\u53d6\u4e00\u7ec4\u5339\u914d\u4e2d\u7684\u4e00\u4e2a\u70b9\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u8fde\u901a\u7684\u5339\u914d\uff0c\u5b83\u4eec\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u90e8\u5206\uff08\u5de6\u8fb9\u6216\u8005\u53f3\u8fb9\uff09\u4f1a\u548c\u672a\u5339\u914d\u70b9\u8fde\u63a5\u3002\n\u8fd9\u4e5f\u662f\u5f88\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u4e0d\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u5b58\u5728\u4e00\u6761\u65b0\u7684\u589e\u5e7f\u8def\u5f84\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u66f4\u591a\u7684\u5339\u914d\u4e86\u3002\n\u6ce8\u610f\uff1a\u5750\u6807\u5982\u4f55\u54c8\u5e0c\u6210\u4e00\u4e2a\u6570\u5b57\u3002 \n*/\n\nconst int dx[8]={-2,-1,1,2,-2,-1,1,2};\nconst int dy[8]={1,2,2,1,-1,-2,-2,-1}; \n\nstruct ee{\n\tint v;\n\tint nxt;\n}e[160005];\nint h[40005],et=0;\n\ninline void add(int U,int V){\n\te[++et]=(ee){V,h[U]};\n\th[U]=et; \n}\n\nbool vis[40005],mp[205][205];\nint n=0,m=0,usd[40005];\n\ninline int calc(int X,int Y){\n\treturn (X-1)*n+Y;\n//\t\u6ce8\u610f\u5750\u6807\u54c8\u5e0c\u6210\u6570\u5b57\u7684\u65b9\u5f0f\u3002 \n}\n\ninline bool dfs(int X){\n\tfor(int i=h[X];i;i=e[i].nxt){\n\t\tif(!vis[e[i].v]){\n\t\t\tvis[e[i].v]=1;\n\t\t\tif(!usd[e[i].v]||dfs(usd[e[i].v])){\n\t\t\t\tusd[e[i].v]=X;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint st[40005],tp=0;\nchar out[205][205];\nvoid init(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=1;j<=n;++j){\n\t\t\tmp[i][j]=0;\n\t\t\tusd[calc(i,j)]=0;\n\t\t\tout[i][j]='O';\n\t\t}\n\t}\n\tint x,y;\n\tfor(int i=1;i<=m;++i){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tmp[x][y]=1;\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=1;j<=n;++j){\n//\t\t\tprintf(\"[%d %d] \",i,j);\n\t\t\tif(mp[i][j]||((i+j)&1)){\n//\t\t\t\t\u6ce8\u610f\u4e0d\u662f\u6bcf\u6b21\u8df32\u800c\u662f\u5224\u5947\u5076\u6027\u3002 \n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tst[++tp]=calc(i,j);\n\t\t\tout[i][j]='@'; \n\t\t\t//\u6ce8\u610f\u6709\u969c\u788d\u7684\u4e0d\u4ec5\u662f\u7ed3\u675f\u70b9\uff0c\u8fd8\u6709\u51fa\u53d1\u70b9\u3002 \n\t\t\tfor(int k=0;k<8;++k){\n\t\t\t\tx=i+dx[k],y=j+dy[k];\n\t\t\t\tif(x<=0||y<=0||x>n||y>n||mp[x][y]){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tout[x][y]='X';\n\t\t\t\tadd(calc(i,j),calc(x,y));\n\t\t\t}\n\t\t}\n\t}\n//\tfor(int i=1;i<=n;++i){\n//\t\tfor(int j=1;j<=n;++j){\n//\t\t\tputchar(out[i][j]);\n//\t\t}\n//\t\tputs(\"\");\n//\t}\n\tint ans=n*n-m;\n//\t\u51cf\u53bb\u88ab\u6316\u6389\u7684\u70b9 \n\tfor(int i=1;i<=tp;++i){\n\t\tfor(int j=1;j<=n*n;++j){\n\t\t\tvis[j]=0;\n\t\t}\n\t\tans-=dfs(st[i]);\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n\nint main(){\n\tinit();\n\treturn 0;\n} \n```",
        "postTime": 1546148037,
        "uid": 97512,
        "name": "Smokey_Days",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011"
    },
    {
        "content": "\u6700\u5927\u6d41\u4e0e\u6700\u5c0f\u5272\u4e4b\u95f4\u7684\u8f6c\u6362\n\n\u6700\u591a\u653e\u591a\u5c11\u9a91\u58eb==\u6700\u5c11\u62ff\u8d70\u591a\u5c11\n\n\u89c2\u5bdf\u56fe\u7247\u4e0d\u96be\u53d1\u73b0\uff1a\u9ec4\u8272\u7684\u4e0d\u80fd\u653b\u51fb\u9ec4\u8272\u7684\uff0c\u7ea2\u8272\u540c\u7406\n\n\u90a3\u4e48\u4e0d\u96be\u60f3\u5230\u4e8c\u5206\u56fe\u5339\u914d\n\n\u8fd9\u6837\u5c31\u8f6c\u5316\u6210\u4e86\u4e8c\u5206\u56fe\u6700\u5c0f\u5b9a\u70b9\u8986\u76d6\n\n\u800c\u4e8c\u5206\u56fe\u6700\u5c0f\u9876\u70b9\u8986\u76d6==\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u3002\u8bc1\u660e\u53ef\u4ee5\u770b[\u8fd9\u91cc](http://www.cnblogs.com/jianglangcaijin/p/6035945.html)\n\n\u4eceS\u5411\u7ea2\u8272\u8fde\u8fb9\uff08\u6743\u91cd\u4e3a1\uff09\uff0c\u4ece\u7ea2\u8272\u5411\u80fd\u653b\u51fb\u5230\u7684\u9ec4\u8272\u8fde\u8fb9\uff08\u6743\u91cd\u4e3aINF\uff09\uff0c\u4ece\u9ec4\u8272\u5411T\u8fde\u8fb9\uff08\u6743\u91cd\u4e3a1\uff09\n\n\u8dd1\u6700\u5927\u6d41\n\n\n```cpp\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define AddEdge(x,y,z) add_edge(x,y,z),add_edge(y,x,0);\nusing namespace std;\nconst int MAXN=100001,INF=1e8+10;\ninline char nc()\n{\n    static char buf[MAXN],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,MAXN,stdin),p1==p2)?EOF:*p1++;\n}\ninline int read()\n{\n    char c=nc();int x=0,f=1;\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=nc();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=nc();}\n    return x*f;\n}\nint N,M,S,T;\nstruct node\n{\n    int u,v,flow,nxt;\n}edge[MAXN*5];\nint head[MAXN],cur[MAXN],num=0;\ninline void add_edge(int x,int y,int z)\n{\n\tedge[num].u=x;\n    edge[num].v=y;\n    edge[num].flow=z;\n    edge[num].nxt=head[x];\n    head[x]=num++;\n}\nint deep[MAXN];\ninline bool BFS()\n{\n    memset(deep,0,sizeof(deep));\n    deep[S]=1;\n    queue<int>q;\n    q.push(S);\n    while(q.size()!=0)\n    {\n        int p=q.front();\n        q.pop();\n        for(int i=head[p];i!=-1;i=edge[i].nxt)\n            if(!deep[edge[i].v]&&edge[i].flow)\n            {\n            \tdeep[edge[i].v]=deep[p]+1;q.push(edge[i].v);\n                if(edge[i].v==T) return 1;\n            }\n    }\n    return deep[T];\n}\nint DFS(int now,int nowflow)\n{\n    if(now==T||nowflow<=0)    return nowflow;\n    int totflow=0;\n    for(int &i=cur[now];i!=-1;i=edge[i].nxt) \n    {\n        if(deep[edge[i].v]==deep[now]+1&&edge[i].flow)\n        {\n            int canflow=DFS(edge[i].v,min(nowflow,edge[i].flow));\n            edge[i].flow-=canflow;edge[i^1].flow+=canflow;\n            totflow+=canflow;\n            nowflow-=canflow;\n            if(nowflow<=0) break;\n        }\n    }\n    return totflow;\n}\nint Dinic()\n{\n    int ans=0;\n    while(BFS())\n    {\n        memcpy(cur,head,sizeof(head)); \n        ans+=DFS(S,INF);\n    }\n\treturn ans;    \n}\nint a[201][201],c[201][201];\nint xx[15]={0,-1,-2,-2,-1,+1,+2,+2,+1};\nint yy[15]={0,-2,-1,+1,+2,+2,+1,-1,-2};\nint main()\n{\n    #ifdef WIN32\n    freopen(\"a.in\",\"r\",stdin);\n    #else\n    #endif\n    memset(head,-1,sizeof(head));\n    N=read();M=read();S=0;T=N*N+1;\n    for(int i=1;i<=M;i++)\n    {\n    \tint x=read(),y=read();\n    \tc[x][y]=1;\n\t}\n\tfor(int i=1;i<=N;i++)\n\t\tfor(int j=1;j<=N;j++)\n\t\t\ta[i][j]=(i-1)*N+j;\n\tfor(int i=1;i<=N;i++)\n\t\tfor(int j=1;j<=N;j++)\n\t\t{\n\t\t\tif(c[i][j]) continue;\n\t\t\tif((i+j)%2) \n\t\t\t{\n\t\t\t\tAddEdge(S,a[i][j],1);\n\t\t\t\tfor(int k=1;k<=8;k++)\n\t\t\t\t{\n\t\t\t\t\tint wx=i+xx[k],wy=j+yy[k];\n\t\t\t\t\tif(wx>=1&&wx<=N&&wy>=1&&wy<=N)\n\t\t\t\t\t\tAddEdge(a[i][j],a[wx][wy],INF);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse AddEdge(a[i][j],T,1);\n\t\t}\n\tprintf(\"%d\",N*N-M-Dinic());\n\t\n    return  0;\n}\n```",
        "postTime": 1517898000,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011"
    },
    {
        "content": "## \u601d\u8def\uff1a\n\n**~~\u542c\u8bf4\u8fd9\u9898\u662f\u6700\u5927\u6d41 / \u6700\u5c0f\u5272 \uff08\u4e0d\u4f1a\u554a\uff09~~**\n\n**\u753b\u4e2a\u56fe\u53ef\u4ee5\u77e5\u9053\uff0c\u6839\u636e\u4e92\u76f8\u80fd\u5230\u8fbe\u7684\u5173\u7cfb\u5efa\u56fe\uff0c\u4e0d\u5b58\u5728\u5947\u73af\uff0c\u5373\u8fd9\u4e2a\u56fe\u662f\u4e8c\u5206\u56fe\u3002**\n\n**\u7136\u540e\u6c42\u4e0d\u80fd\u4e92\u76f8\u653b\u51fb\u7684\u9a91\u58eb\u6570\u91cf\u4e5f\u5c31\u662f\u6c42\u8fd9\u5f20\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002**\n\n**\u6240\u4ee5\u7b54\u6848\u5c31\u7b49\u4e8e \u8282\u70b9\u6570 - \u969c\u788d\u6570 - \u6700\u5927\u5339\u914d\u6570\u3002**\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\nusing namespace std;\n#define maxn 200\n#define read(x) scanf(\"%d\",&x)\n#define write(x) printf(\"%d\",x);\nconst int m1[10]={0,1,2,2,1,-1,-2,-2,-1};\nconst int m2[10]={0,-2,-1,1,2,-2,-1,1,2};\nint n,m;\nint a[maxn+5][maxn+5];\nint cant;\nvector<int>g[maxn*maxn+5];\nbool use[maxn*maxn+5];\nint match[maxn*maxn+5];\nvoid readin()\n{\n\tread(n),read(m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\ta[x][y]=true;\n\t}\n}\nint getid(int x,int y)\n{\n\treturn (x-1)*n+y;\n}\nvoid makeg()\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(a[i][j])\n\t\t\t{\n\t\t\t\tcant++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif((i+j)&1)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor(int k=1;k<=8;k++)\n\t\t\t{\n\t\t\t\tint x=i+m1[k],y=j+m2[k];\n\t\t\t\tif(x>n||y>n||x<=0||y<=0||a[x][y]) continue;\n\t\t\t\tg[getid(i,j)].push_back(getid(x,y));\n\t\t\t}\n\t\t}\n\t}\n}\nbool dfs(int x)\n{\n\tfor(int i=0;i<g[x].size();i++)\n\t{\n\t\tint y=g[x][i];\n\t\tif(use[y]) continue;\n\t\tuse[y]=true;\n\t\tif(!match[y]||dfs(match[y]))\n\t\t{\n\t\t\tmatch[y]=x;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint slv()\n{\n\tint s=0;\n\tfor(int i=1;i<=n*n;i++)\n\t{\n\t\tmemset(use,0,sizeof(use));\n\t\ts+=dfs(i);\n\t}\n\treturn s;\n}\nint main()\n{\n\treadin();\n\tmakeg();\n\twrite(n*n-cant-slv());\n\treturn 0;\n}\n```",
        "postTime": 1541649159,
        "uid": 98954,
        "name": "\u4e0d\u5b58\u5728\u4e4b\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011"
    },
    {
        "content": "# \u5f88\u660e\u663e\u7684\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\n\u601d\u8def\u548c\u65b9\u683c\u53d6\u6570\u95ee\u9898\u7c7b\u4f3c\uff1a\n\n### 1.\u9ed1\u767d\u67d3\u8272\n\n### 2.\u6309\u7167\u7ea6\u675f\u5173\u7cfb\u5efa\u56fe\uff0c\u6c42\u6700\u5c0f\u5272\uff08\u6700\u597d\u4f7f\u7528\u6548\u7387\u9ad8\u4e00\u70b9\u7684\u6700\u5927\u6d41\u7b97\u6cd5\u5982\uff1a[Dinic+\u5f53\u524d\u5f27\u4f18\u5316](https://www.luogu.org/blog/ONE-PIECE/wang-lao-liu-jiang-xie-zhi-dinic)/[isap/hlpp](https://www.luogu.org/blog/ONE-PIECE/jiu-ji-di-zui-tai-liu-suan-fa-isap-yu-hlpp)\uff09\n\n### 3.\u7b54\u6848\u5c31\u662fn*n-m-maxflow\n\n\n------------\n\n\u89e3\u91ca\u4e00\u4e0b\uff1a\n\n\u7b2c\u4e00\u6b65~~**\u9ed1\u767d\u67d3\u8272\u662f\u770b\u89c1\u7f51\u683c\u56fe\u5c31\u8be5\u60f3\u5230\u7684\u5e38\u89c4\u601d\u8def**~~\uff0c\u4ec0\u4e48\u53eb\u9ed1\u767d\u67d3\u8272\uff1a\u6211\u4eec\u628a\u56fe\u6309\u7167\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\u4e4b\u548c\u7684\u5947\u5076\u6027\u53ef\u4ee5\u5212\u5206\u4e3a\u9ed1\u683c\u548c\u767d\u683c\uff0c\u9ed1\u683c\u8fde\u6c47\u70b9\uff0c\u767d\u683c\u8fde\u6e90\u70b9\u3002\n\n### \u4ec0\u4e48\u65f6\u5019\u8be5\u7528\u9ed1\u767d\u67d3\u8272\uff1f\n\n\u5f53\u4e0d\u540c\u5947\u5076\u6027\u7684\u70b9\u4f1a\u76f8\u4e92\u5f71\u54cd\u800c\u540c\u5947\u5076\u6027\u7684\u70b9\u4e0d\u4f1a\u76f8\u4e92\u5f71\u54cd\u65f6\u5c31\u7528\u9ed1\u767d\u67d3\u8272\uff0c\u5982\u672c\u9898\u4e2d\u5728\u5947\u6570\u70b9\u653e\u9a91\u58eb\u53ea\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u5076\u6570\u70b9\u4e0d\u80fd\u653e\u9a91\u58eb\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u5947\u6570\u70b9\u3002\n\n\u7b2c\u4e8c\u6b65\u5efa\u56fe\uff1a\n\n\u6309\u7167\u7ea6\u675f\u5173\u7cfb\uff0c\u628a\u7ed9\u6bcf\u4e2a\u767d\u683c\u5411\u4f1a\u5f71\u54cd\u7684\u9ed1\u683c\u52a0\u4e00\u6761\u8fb9\uff08\u56e0\u4e3a\u521a\u624d\u662f\u767d\u683c\u8fde\u6e90\u70b9\uff0c\u6240\u4ee5\u8981\u4ece\u767d\u683c\u5411\u9ed1\u683c\u52a0\u8fb9\uff09\n\n\u6c42\u6700\u5927\u6d41\uff08\u5373\u6700\u5c0f\u5272\uff09\n\n\u7b2c\u4e09\u6b65\uff1an*n-m\u662f\u53ef\u4ee5\u653e\u7f6e\u7684\u603b\u683c\u5b50\u6570\uff0cmaxflow\u662f\u6700\u5c0f\u5272\uff08\u81f3\u5c11\u8981\u62ff\u6389\u591a\u5c11\u4e2a\u9a91\u58eb\u624d\u80fd\u6ee1\u8db3\u9898\u610f\uff09\n\n\n------------\n\n## \u4ee3\u7801\uff1a\uff08\u6211\u7528\u7684\u662fDinic\u52a0\u5f53\u524d\u5f27\u4f18\u5316\uff09\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int inf=1<<30;\ninline int Read(){\n    int x=0,f=1;\n    char c=getchar();\n    while(c>'9'||c<'0'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9')x=x*10+c-'0',c=getchar();\n    return x*f;\n}\nint n,m;\nint top=1;\nint head[41011];\nint s,t;\nstruct Node{\n\tint v;\n\tint val;\n\tint next;\n}node[720020];//\u6bcf\u4e2a\u70b9\u5411\u6e90\u70b9\u6216\u6c47\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u6700\u591a\u5411\u5468\u56f48\u4e2a\u70b9\u8fde\u8fb9\uff0c\u6240\u4ee5\u6700\u591a200*200*(8+1)*2\uff08\u53cd\u5411\u8fb9\uff09=720000\u6761\u8fb9\ninline void addedge(int u,int v,int val){\n\tnode[++top].v=v;\n\tnode[top].val=val;\n\tnode[top].next=head[u];\n\thead[u]=top;\n}\ninline void add(int u,int v,int val){\n\taddedge(u,v,val);\n\taddedge(v,u,0);\n}\nint dep[41010];\nint cur[41010];//\u5f53\u524d\u5f27 \nbool bfs(){\n\tregister int i;\n\tfor(i=1;i<=t;i++)cur[i]=head[i],dep[i]=-1;\n\tdep[s]=0;\n\tqueue<int>q;\n\tq.push(s);\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(i=head[u];i;i=node[i].next){\n\t\t\tint d=node[i].v;\n\t\t\tif(dep[d]==-1&&node[i].val){\n\t\t\t\tdep[d]=dep[u]+1;\n\t\t\t\tq.push(d);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t]!=-1;\n}\nint maxflow=0;\nint dfs(int u,int flow){\n\tif(u==t){\n\t\tmaxflow+=flow;\n\t\treturn flow;\n\t}\n\tint used=0;\n\tfor(int i=cur[u];i;i=node[i].next){\n\t\tcur[u]=i;\n\t\tint d=node[i].v;\n\t\tif(node[i].val&&dep[d]==dep[u]+1){\n\t\t\tint mi=dfs(d,min(flow-used,node[i].val));\n\t\t\tif(mi){\n\t\t\t\tnode[i].val-=mi;\n\t\t\t\tnode[i^1].val+=mi;\n\t\t\t\tused+=mi;\n\t\t\t\tif(used==flow)break;\n\t\t\t}\n\t\t}\n\t}\n\treturn used;\n}\nint Dinic(){\n\tmaxflow=0;\n\twhile(bfs())dfs(s,inf);\n\treturn maxflow;\n}//\u6c42\u6700\u5c0f\u5272 \nint map[201][201];\nint fx[8]={-2,-2,-1,-1,1,1,2,2};\nint fy[8]={1,-1,2,-2,2,-2,1,-1};\nint main(){\n\tint i,j,k;\n\tn=Read(),m=Read();\n\tint x,y;\n\ts=n*n+1,t=n*n+2;\n\tfor(i=1;i<=m;i++)x=Read(),y=Read(),map[x][y]=1;\n\tfor(i=1;i<=n;i++){\n\t\tfor(j=1;j<=n;j++){\n\t\t\tif(map[i][j])continue;\n\t\t\tint now=(i-1)*n+j;\n\t\t\tif((i+j)&1){\n\t\t\t\tadd(s,now,1);\n\t\t\t\tfor(k=0;k<=7;k++){\n\t\t\t\t\tint dx=i+fx[k],dy=j+fy[k];\n\t\t\t\t\tif(dx<1||dy<1||dx>n||dy>n||map[dx][dy])continue;\n\t\t\t\t\tadd(now,(dx-1)*n+dy,1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse add(now,t,1);\n\t\t}\n\t}\n\tprintf(\"%d\",n*n-m-Dinic());//\u80fd\u653e\u7684\u603b\u6570-\u6700\u5c0f\u5272 \n    return 0;\n}\n```\n~~[\u6c34\u53cc\u500d\u7ecf\u9a8c](https://www.luogu.org/problemnew/show/P4304)~~",
        "postTime": 1541405496,
        "uid": 28088,
        "name": "\u94b1\u9038\u51e1",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011"
    },
    {
        "content": "\u545c\u545c\u545c\uff0c\u5361\u4e86\u4e09\u5929\u603b\u4e8e\u8fc7\u4e86\uff1b\u8fd9\u9053\u9898\u662f P2774 \u65b9\u683c\u53d6\u6570\u95ee\u9898\u7684\u5347\u7ea7\u7248\uff1b\u505a\u6cd5\u548c P2774 \u65b9\u683c\u53d6\u6570\u95ee\u9898\u5341\u5206\u76f8\u4f3c\uff1b\n\u9996\u5148\u5efa\u8fb9\uff1a\n\n\u4ee5\u6a2a\u5750\u6807+\u7eb5\u5750\u6807\u662f\u5947\u6570\u7684\u683c\u5b50\u8fde\u4e00\u6761\u8fb9\u8fde\u5411\u6e90\u70b9\uff0c\n\u7136\u540e\u4ee5\u6a2a\u5750\u6807+\u7eb5\u5750\u6807\u662f\u5076\u6570\u7684\u683c\u5b50\u8fde\u4e00\u6761\u8fb9\u8fde\u5411\u6c47\u70b9\uff1b\u7136\u540e\u4ee5\u6a2a\u5750\u6807+\u7eb5\u5750\u6807\u662f\u5947\u6570\u7684\u683c\u5b50\u8fde\u4e00\u6761\u8fb9\u8fde\u5411\u6a2a\u5750\u6807+\u7eb5\u5750\u6807\u662f\u5076\u6570\u7684\u683c\u5b50\uff1b\u8868\u793a\u8fd9\u4e24\u4e2a\u683c\u5b50\u4e0d\u80fd\u5171\u5b58\uff1b\n\u63a5\u4e0b\u6765\uff1a\n\u8dd1\u6700\u5927\u6d41\u5c31\u53ef\u4ee5\u4e86\uff0c\u539f\u7406\u5f88\u591a\u5927\u4f6c\u90fd\u8bf4\u8fc7\u4e86\uff0c\u6211\u5c31\u4e0d\u591a\u63d0\u4e86\uff0c\u5bf9\u4e86\uff0c\u91cd\u70b9\u5f3a\u8c03\uff1a\u8bb0\u5f97\u8981\u52a0\u4e0a\u4f18\u5316\uff01\uff01\uff01\n\u4e0d\u7136\u4f1a\u6709\u4e24\u4e2a\u70b9TlE\uff0c\n~~\u4e0d\u8981\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684\uff1b~~\n\n\u5177\u4f53\u5982\u4f55\u4f18\u5316\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2000005;\nint n,m,s,t;\nstruct edge{\n\tint v,nxt,val;\n}e[N];\nint head[N],cnt=1,cur[N];\nint ans;\nbool b[1005][1005];\nint dis[N];\nint dx[]={1,1,-1,-1,2,2,-2,-2};\nint dy[]={2,-2,2,-2,1,-1,1,-1};\nint Read()\n{\n\tint ch=0;\n\tchar w=getchar();\n\twhile(w<'0'||w>'9') w=getchar();\n\twhile(w>='0'&&w<='9'){\n\t\tch=ch*10+w-'0';\n\t\tw=getchar();\n\t}\n\treturn ch;\n}\nvoid add(int u,int v,int val){\n\te[++cnt]=(edge){v,head[u],val};head[u]=cnt;\n\te[++cnt]=(edge){u,head[v],0};head[v]=cnt;\n}\nbool bfs()\n{\n\tqueue<int>q;\n\tmemset(dis,-1,sizeof(dis));\n\tdis[s]=1;q.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].v;\n\t\t\tif(dis[v]==-1&&e[i].val)\n\t\t\t{\n\t\t\t\tq.push(v);\n\t\t\t\tdis[v]=dis[u]+1;\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[t]!=-1;\n}\nint dfs(int u,int flow)\n{\n\tif(u==t) return flow;\n\tint res=0;\n\tfor(int i=cur[u];i;i=e[i].nxt)\n\t{\n\t\tcur[u]=i;int v=e[i].v;//\u5f53\u524d\u5f27\u4f18\u5316\uff0c\u770b\u4e0d\u61c2\u7684\u53ef\u4ee5\u767e\u5ea6\u4e00\u4e0b\n\t\tif(dis[v]==dis[u]+1&&e[i].val)\n\t\t{\n\t\t\tint fl=dfs(v,min(flow,e[i].val));\n\t\t\tif(fl)\n\t\t\t{\n\t\t\t\tflow-=fl;res+=fl;\n\t\t\t\te[i].val-=fl;e[i^1].val+=fl;\n\t\t\t\tif(!flow) return res;\n\t\t\t}\n\t\t}\n\t}\n\tif(!res) dis[u]=-1;//\u5c0f\u526a\u679d \n\treturn res;\n}\nint main()\n{\n\tn=Read();m=Read();\n\tans=n*n-m;//\u8bb0\u5f97\u51cf\u6389\u969c\u788d\u6570\n\ts=n*n+1;t=s+1;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tx=Read();y=Read();\n\t\tb[x][y]=1;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(b[i][j]==1) continue;\n\t\t\tif((i+j)%2==1) add(s,(i-1)*n+j,1);\n\t\t\tif((i+j)%2==0) add((i-1)*n+j,t,1);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif((i+j)%2==0) continue;\n\t\t\tif(b[i][j]==1) continue;\n\t\t\tfor(int k=0;k<8;k++)\n\t\t\t{\n\t\t\t\tint xx=dx[k]+i;\n\t\t\t\tint yy=dy[k]+j;\n\t\t\t\tif(xx<1||xx>n||yy<1||yy>n||b[xx][yy]==1) continue;\n\t\t\t\tadd((i-1)*n+j,(xx-1)*n+yy,1e9);\n\t\t\t}\n\t\t}\n\t}\u5efa\u8fb9\uff0c\u89c1\u4e0a\u6587\n\twhile(bfs()){\n\t\tmemcpy(cur,head,sizeof(head));\n\t\tans-=dfs(s,1<<29);\t\n\t}//Dinic\u5927\u6cd5\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\u770b\u6211\u5199\u7684\u8fd9\u4e48\u8f9b\u82e6\uff0c\u4e0d\u70b9\u4e2a\u8d5e\u5417\uff1b\n",
        "postTime": 1565166005,
        "uid": 203867,
        "name": "\u82cf\u5e55\u5bd2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011"
    },
    {
        "content": "\u9996\u5148\u770b\u9898\u9762\u4e0a\u7684\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/2669.png)\n\n\u8fd9\u5f20\u56fe\u544a\u8bc9\u4e86\u6211\u4eec\u51e0\u4e2a\u4fe1\u606f\uff1a\n\n1. \u9a6c\u7684\u79fb\u52a8\u89c4\u5219\uff08\u5176\u5b9e\u8c01\u90fd\u77e5\u9053\uff09\n2. \u4ed4\u7ec6\uff08\uff1f\uff09\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c\u9a6c\u6240\u5728\u7684\u683c\u5b50\u548c\u5b83\u5f71\u54cd\u7684\u683c\u5b50\u989c\u8272\u4e0d\u540c\n\n\u56e0\u6b64\u6211\u4eec\u5bf9\u683c\u5b50\u8fdb\u884c\u67d3\u8272\u3002\u6df1\u8272\u7684\u662f\u5de6\u8fb9\uff0c\u6d45\u8272\u7684\u662f\u53f3\u8fb9\u3002\u7136\u540e\u4ece\u5de6\u8fb9\u70b9\u5411\u53ef\u4ee5\u5f71\u54cd\u5230\u7684\u70b9\uff08\u4e00\u5b9a\u5728\u53f3\u8fb9\uff09\u8fde\u63a5\u8fb9\uff1a\n\n\u5f88\u660e\u663e\uff0c\u6211\u4eec\u8fd9\u91cc\u8981\u6c42\u51fa\u4e00\u4e2a\u6700\u5927\u7684\u70b9\u96c6\uff0c\u5176\u4e2d\u4efb\u610f\u4e24\u70b9\u4e0d\u5171\u8fb9\uff08\u5c31\u662f\u76f8\u4e92\u4e4b\u95f4\u65e0\u5f71\u54cd\uff09\u3002\n\n\u5373\uff1a\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\n\n\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6 = \u70b9\u6570 - \u6700\u5c0f\u70b9\u8986\u76d6 = **\u70b9\u6570 - \u6700\u5927\u5339\u914d\u6570 = \u70b9\u6570 - \u7f51\u7edc\u6700\u5927\u6d41**\n\n\u6240\u4ee5$ans = n \\times n - m - max\\_flow$\n\n\u4ee3\u7801\uff08AC\uff0c368ms\uff09\uff1a\n\n```cpp\n/**\n *   \u250f\u2513\u3000\u3000\u3000\u250f\u2513\n * \u250f\u251b\u253b\u2501\u2501\u2501\u251b\u253b\u2513\n * \u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u2503\n * \u2503\u3000\u3000\u3000\u2501\u3000\u3000\u3000\u2503\n * \u2503\u3000\u2533\u251b\u3000\u2517\u2533\u3000\u2503\n * \u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u2503\n * \u2503\u3000\u3000\u3000\u253b\u3000\u3000\u3000\u2503\n * \u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u2503\n * \u2517\u2501\u2513\u3000\u3000\u3000\u250f\u2501\u251b\n *    \u2503\u3000\u3000\u3000\u2503\n *    \u2503\u3000\u3000\u3000\u2503\n *    \u2503\u3000\u3000\u3000\u2517\u2501\u2501\u2501\u2513\n *    \u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u2523\u2513\n *    \u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u250f\u251b\n *    \u2517\u2513\u2513\u250f\u2501\u2533\u2513\u250f\u251b\n *      \u2503\u252b\u252b\u3000\u2503\u252b\u252b\n *      \u2517\u253b\u251b\u3000\u2517\u253b\u251b\n *        \u795e\u517d\u4fdd\u4f51\n *        \u4ee3\u7801\u65e0BUG!\n */\n#include<bits/stdc++.h>\nusing namespace std;\n\nint get()\n{\n\tint x = 0, f = 1; char c = getchar();\n\twhile(!isdigit(c)) { if(c == '-') f = -1; c = getchar(); }\n\twhile(isdigit(c)) { x = x * 10 + c - '0'; c = getchar(); }\n\treturn x * f;\n}\n\nconst int N = 200 * 200 + 5, E = N * 20, inf = 0x3f3f3f3f;\nconst int dx[8] = {1, 2, -1, -2, 1, 2, -1, -2};\nconst int dy[8] = {2, 1, -2, -1, -2, -1, 2, 1};\nint lim[205][205];\nint n, m, s, t;\nstruct Edge {\n\tint v, nxt, w;\n} edge[E];\nint head[N], id = 1;\nint max_flow;\nint d[N];\n\nint ID(int x, int y) { return (x - 1) * n + y; }\n\nvoid addedge(int u, int v, int w)\n{\n\tedge[++id].v = v;\n\tedge[id].w = w;\n\tedge[id].nxt = head[u];\n\thead[u] = id;\n}\n\nvoid insedge(int u, int v, int w)\n{\n\taddedge(u, v, w);\n\taddedge(v, u, 0);\n}\n\nbool bfs() {\n\tmemset(d, 0, sizeof(d));\n\tqueue<int>q;\n\tq.push(s);\n\td[s] = 1;\n\twhile(q.size()) {\n\t\tint u = q.front(); \n\t\tq.pop();\n\t\tfor(int i = head[u]; i; i = edge[i].nxt) {\n\t\t\tint v = edge[i].v, w = edge[i].w;\n\t\t\tif(d[v] || !w) continue;\n\t\t\tq.push(v);\n\t\t\td[v] = d[u] + 1;\n\t\t}\n\t}\n\treturn d[t];\n}\n\nint dfs(int u, int flow)\n{\n\tif(u == t) return flow;\n\tint rest = 0;\n\tfor(int i = head[u]; i && flow; i = edge[i].nxt) {\n\t\tint v = edge[i].v, w = edge[i].w;\n\t\tif(d[v] != d[u] + 1 || !w) continue;\n\t\tint k = dfs(v, min(flow, w));\n\t\tif(!k) d[v] = 0;\n\t\tedge[i].w -= k;\n\t\tedge[i ^ 1].w += k;\n\t\tflow -= k;\n\t\trest += k;\n\t}\n\treturn rest;\n}\n\nvoid dinic()\n{\n\tint now = 0;\n\twhile(bfs()) \n\t\twhile(now = dfs(s, inf)) max_flow += now;\n}\n\nint main()\n{\n\tn = get(), m = get();\n\ts = n * n + 1, t = n * n + 2;\n\tfor(int i = 1; i <= m; i++) {\n\t\tint x = get(), y = get();\n\t\tlim[x][y] = 1;\n\t}\n\tfor(int i = 1; i <= n; i++) {\n\t\tfor(int j = 1; j <= n; j++) {\n\t\t\tif(lim[i][j]) continue;\n\t\t\tif((i + j) % 2) {\n\t\t\t\tinsedge(s, ID(i, j), 1);\n\t\t\t\t//printf(\"%d %d %d\\n\", s, ID(i, j), 1);\n\t\t\t\tfor(int k = 0; k < 8; k++) {\n\t\t\t\t\tint x = i + dx[k];\n\t\t\t\t\tint y = j + dy[k];\n\t\t\t\t\tif(x >= 1 && x <= n && y >= 1 && y <= n && (!lim[x][y])) {\n\t\t\t\t\t\tinsedge(ID(i, j), ID(x, y), 1);\n\t\t\t\t\t\t//printf(\"%d %d %d\\n\", ID(i, j), ID(x, y), 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tinsedge(ID(i, j), t, 1);\n\t\t\t\t//printf(\"%d %d %d\\n\", ID(i, j), t, 1);\n\t\t\t}\n\t\t}\n\t}\n\tdinic();\n\t//printf(\"%d\\n\", max_flow);\n\tprintf(\"%d\", n * n - m - max_flow);\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1564111831,
        "uid": 92254,
        "name": "Social_Zhao",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\u7f51\u7edc\u6d4124\u9898\u600e\u4e48\u8fd9\u4e48\u96be\u505a\u554a\u3002\n\n## Solution\n\u8003\u8651\u8fd9\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u6309\u7167\u7ed9\u51fa\u7684\u56fe\u53d1\u73b0\u9ec4\u8272\u4e0d\u80fd\u653b\u51fb\u9ec4\u8272\uff0c\u7ea2\u8272\u4e0d\u80fd\u653b\u51fb\u7ea2\u8272\u3002\n\u7136\u540e\u5c31\u662f\u4e00\u4e2a\u88f8\u7684\u4e8c\u5206\u56fe\u6c42\u6700\u5c0f\u5272\uff0c\u76f4\u63a5\u8dd1Dinic\u5c31\u597d\u4e86\uff0c\u65e0\u8111\u5b9e\u73b0\u3002\n```cpp\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\n#include<queue>\n#include<set>\n#include<map>\n#include<iostream>\nusing namespace std;\n#define ll long long\n#define re register\n#define file(a) freopen(a\".in\",\"r\",stdin);freopen(a\".out\",\"w\",stdout)\ninline int gi(){\n\tint f=1,sum=0;char ch=getchar();\n\twhile(ch>'9' || ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0' && ch<='9'){sum=(sum<<3)+(sum<<1)+ch-'0';ch=getchar();}\n\treturn f*sum;\n}\nconst int N=100010,M=300010,Inf=1e9+10;\nint front[N],nxt[M<<1],s,t,cnt,to[M<<1],w[M<<1],dep[N],n,m,a[510][510],num[510][510],cur[N];\nint wa[9]={0,1,1,2,2,-1,-1,-2,-2};\nint lk[9]={0,2,-2,1,-1,2,-2,1,-1};\nvoid Add(int u,int v,int val){\n\tto[cnt]=v;nxt[cnt]=front[u];front[u]=cnt;w[cnt++]=val;\n}\nbool bfs(){\n\tqueue<int>Q;while(!Q.empty())Q.pop();memset(dep,0,sizeof(dep));\n\tQ.push(s);dep[s]=1;\n\twhile(!Q.empty()){\n\t\tint u=Q.front();Q.pop();\n\t\tfor(int i=front[u];i!=-1;i=nxt[i]){\n\t\t\tint v=to[i];\n\t\t\tif(!dep[v] && w[i]){\n\t\t\t\tdep[v]=dep[u]+1;Q.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t];\n}\nint dfs(int u,int Flow){\n\tif(u==t || !Flow)return Flow;\n\tfor(int &i=cur[u];i!=-1;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(dep[v]==dep[u]+1 && w[i]){\n\t\t\tint di=dfs(v,min(Flow,w[i]));\n\t\t\tif(di){\n\t\t\t\tw[i]-=di;w[i^1]+=di;return di;\n\t\t\t}\n\t\t\telse dep[v]=0;\n\t\t}\n\t}\n\treturn 0;\n}\nint Dinic(){\n\tint Flow=0;\n\twhile(bfs()){\n\t\tfor(int i=s;i<=t;i++)cur[i]=front[i];\n\t\twhile(int d=dfs(s,Inf))Flow+=d;\n\t}\n\treturn Flow;\n}\nint main(){\n\tn=gi();m=gi();s=0,t=n*n+1;memset(front,-1,sizeof(front));\n\tfor(int i=1;i<=m;i++){\n\t\tint x=gi(),y=gi();\n\t\ta[x][y]=1;\n\t}\n\tfor(int i=1;i<=n;i++)for(int j=1;j<=n;j++)num[i][j]=(i-1)*n+j;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(!a[i][j]){\n\t\t\t\tint color=(i+j)%2;\n\t\t\t\tif(!color){//\u9ec4\u8272\n\t\t\t\t\tAdd(s,num[i][j],1);Add(num[i][j],s,0);\n\t\t\t\t\tfor(int k=1;k<=8;k++){\n\t\t\t\t\t\tint x=i+wa[k],y=j+lk[k];\n\t\t\t\t\t\tif(x>0 && x<=n && y>0 && y<=n && !a[x][y]){\n\t\t\t\t\t\t\tAdd(num[i][j],num[x][y],Inf);Add(num[x][y],num[i][j],0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{Add(num[i][j],t,1);Add(t,num[i][j],0);}\n\t\t\t}\n\tprintf(\"%d\\n\",n*n-Dinic()-m);\n\treturn 0;\n}\n```\n\n## \u540e\u8bdd\n\u6211\u8fd9\u9053\u9898\u76ee\u7528\u6700\u5c0f\u5272\u8fc7\u4e86\u4e4b\u540e\u6709\u4eba\u95ee\u6211\uff0c\u4e3a\u4ec0\u4e48\u4f60\u7684Dinic\u8fd9\u4e48\u4f18\u79c0\uff1f\nqwq\u5f53\u7136\u6211\u4e5f\u4e0d\u77e5\u9053\u554a\u3002",
        "postTime": 1547362771,
        "uid": 133944,
        "name": "Biscuit46",
        "ccfLevel": 0,
        "title": "\u6d1b\u8c37P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011"
    },
    {
        "content": "### \u5173\u4e8e\u6784\u56fe\uff1a\n\n\u9996\u5148\uff0c\u8fd9\u662f\u4e00\u9053\u6700\u5c0f\u5272\u7684\u9898\u76ee\uff08\u7c7b\u4f3c\u4e8e\u65b9\u683c\u53d6\u6570\u95ee\u9898\uff09\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a\u6027\u8d28\uff0c\u6700\u5927\u548c=\u5168\u5c40\u548c-\u820d\u5f03\u548c\uff0c\u800c\u820d\u5f03\u548c=\u6700\u5c0f\u5272=\u6700\u5927\u6d41\u3002\n![](https://cdn.luogu.com.cn/upload/pic/15206.png)\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u90a3\u4e00\u5e45\u56fe\uff0c\u5c31\u4f1a\u6709\u6240\u542f\u53d1\u3002\n\n\u5f53\u4e00\u4e2a\u70b9(i,j)\u6ee1\u8db3(i+j)mod 2=1\u65f6\uff0c\u4e3a\u767d\u8272\u7684\u70b9\uff0c\u5426\u5219\u4e3a\u9ed1\u8272\u7684\u70b9\u3002\n\n\u90a3\u6839\u8fd9\u9053\u9898\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u6b65\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e00\u4e2a\u9ed1\u8272\u7684\u70b9\u8df3\u53bb\u4e00\u4e2a\u767d\u8272\u7684\u70b9\uff0c\u6216\u53cd\u4e4b\u3002\u800c\u8fd9\u4e9b\u53ef\u4ee5\u8df3\u5230\u7684\u70b9\u6240\u8fde\u7684\u8fb9\u90fd\u662f\u8981\u201c\u5272\u201d\u6389\u7684\uff0c\u6709\u4e86\u8fd9\u4e9b\u8fb9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8df3\u4e86\u3002\n\n\u6784\u56fe\uff1a\n\n1.\u9996\u5148\uff0c\u9700\u8981\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u548c\u6c47\u70b9\u3002\n\n2.\u6e90\u70b9\u8fde\u5411\u6bcf\u4e00\u4e2a\u9ed1\u8272\u7684\u70b9\uff0c\u6d41\u91cf\u4e3a\u8fd9\u4e2a\u70b9\u7684\u503c\uff1b\u540c\u7406\uff0c\u6bcf\u4e00\u4e2a\u767d\u8272\u7684\u70b9\u90fd\u8fde\u5411\u6c47\u70b9\uff0c\u6d41\u91cf\u4e3a1\u3002\n\n3.\u6bcf\u4e00\u4e2a\u9ed1\u8272\u7684\u70b9\u90fd\u8fde\u5411\u4e0e\u5b83\u53ef\u4ee5\u6311\u5230\u7684\u767d\u8272\u7684\u70b9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8fd9\u4e9b\u8fb9\u9700\u8981\u201c\u5272\u201d\u6389\u4e00\u4e9b\u3002\n\n\u6700\u540e\u5c31\u53ef\u4ee5\u6839\u636e\u6700\u5c0f\u5272=\u6700\u5927\u6d41\u8fd9\u4e2a\u5b9a\u7406&\u6700\u5927\u548c=\u5168\u5c40\u548c-\u820d\u5f03\u548c\u6c42\u89e3\u4e86\u3002\n\n\n### \u5173\u4e8e\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#define INF 2147483647\nusing namespace std; \nqueue<int> f;\n\tconst int fx[8]={1,1,-1,-1,2,2,-2,-2};\n\tconst int fy[8]={2,-2,2,-2,1,-1,1,-1};\n\tstruct node{int x,y,z,next;} a[500000];\n\tint last[100000];\n\tint n,m,len=-1,ans=0,st,ed;\n\tbool bz[500][500];\nvoid ins(int x,int y,int z)\n{\n\ta[++len].x=x;a[len].y=y;a[len].z=z;a[len].next=last[x];last[x]=len;\n}\nint h[100000];\nbool bfs()\n{\n\tmemset(h,0,sizeof(h));\n\th[st]=1;\n\tf.push(st);\n\twhile(!f.empty())\n\t{\n\t\tint x=f.front();\n\t\tfor(int i=last[x];i>=0;i=a[i].next)\n\t\t{\n\t\t\tint y=a[i].y;\n\t\t\tif(a[i].z>0&&h[y]==0)\n\t\t\t{\n\t\t\t\th[y]=h[x]+1;\n\t\t\t\tf.push(y);\n\t\t\t}\n\t\t}\n\t\tf.pop();\n\t}\n\tif(h[ed]) return true; else return false;\n}\nint dfs(int x,int f)\n{\n\tint s=0,t;\n\tif(x==ed) return f;\n\tfor(int i=last[x];i>=0;i=a[i].next)\n\t{\n\t\tint y=a[i].y;\n\t\tif(a[i].z>0&&h[y]==h[x]+1&&f>s)\n\t\t{\n\t\t\ts+=(t=(dfs(y,min(f-s,a[i].z))));\n\t\t\ta[i].z-=t;\n\t\t\ta[i^1].z+=t;\n\t\t}\n\t}\n\tif(!s) h[x]=0;\n\treturn s;\n}\nint dinic()\n{\n\tint sum=0;\n\twhile(bfs())\n\t\tsum+=dfs(st,INF);\n\treturn sum;\n}\nint main()\n{\n\tint x,y,id;\n\tscanf(\"%d %d\",&n,&m);\n\tans=n*n-m;\n\tst=0,ed=n*n+1;\n\tmemset(last,-1,sizeof(last));\n\tmemset(bz,true,sizeof(bz));\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tbz[x][y]=false;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(!bz[i][j]) continue;\n\t\t\tid=(i-1)*n+j;\n\t\t\tif((i+j)&1)\n\t\t\t{\n\t\t\t\tins(st,id,1),ins(id,st,0);\n\t\t\t\tfor(int k=0;k<=7;k++)\n\t\t\t\t{\n\t\t\t\t\tint t1=i+fx[k],t2=j+fy[k];\n\t\t\t\t\tif(t1<=0||t1>n||t2<=0||t2>n||!bz[t1][t2]) continue;\n\t\t\t\t\tins(id,(t1-1)*n+t2,INF),ins((t1-1)*n+t2,id,0);\n\t\t\t\t}\n\t\t\t} else ins(id,ed,1),ins(ed,id,0);\n\t\t}\n\tprintf(\"%d\",ans-dinic());\n}\n```",
        "postTime": 1520228276,
        "uid": 31955,
        "name": "Mark_ZZY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011"
    },
    {
        "content": "**\u6700\u5927\u6d41=\u6700\u5c0f\u5272**\n\nISAP+\u5f53\u524d\u5f27\u4f18\u5316\u5de8\u5feb\n\n### \u89e3\u9898\u601d\u8def\n\n\u4e0d\u96be\u770b\u51fa\uff0c\u9a6c\u80fd\u653b\u51fb\u5230\u7684\u70b9\u548c\u5b83\u672c\u8eab\u6240\u5728\u7684\u70b9\u9ed1\u767d\u989c\u8272\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5efa\u7acb\u4e8c\u5206\u56fe\u8fdb\u884c\u5339\u914d\n\n### \u5efa\u56fe\n\n* \u8bbe$0$\u4e3a\u539f\u70b9\uff0c$n ^ 2 + 1$\u4e3a\u6c47\u70b9\uff0c\u628a\u683c\u5b50\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u6620\u5c04\u5230$[1, n ^ 2]$\n\n* \u5bf9\u4e8e$\\forall i \\in black$\uff0c\u5982\u679c**$i$\u70b9\u6ca1\u6709\u969c\u788d**\uff0c\u4ece$0$\u5411$i$\u5efa\u7acb\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n* \u5bf9\u4e8e$\\forall j \\in white$\uff0c\u5982\u679c**$j$\u70b9\u6ca1\u6709\u969c\u788d**\uff0c\u4ece$j$\u5411$n ^ 2 + 1$\u5efa\u7acb\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n* \u5bf9\u4e8e$\\forall i \\in black$\uff0c\u4ece$i$\u5411\u80fd\u653b\u51fb\u5230\u7684\u516b\u4e2a\u767d\u70b9\u5efa\u7acb\u5bb9\u91cf\u4e3a$\\infty$\u7684\u8fb9\n\n\u7136\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u7528\u603b\u683c\u6570-\u969c\u788d\u6570-\u6700\u5927\u6d41\u5373\u53ef\n\n### \u4ee3\u7801\n\n\u770b\u6709\u4eba\u53d1\u5308\u7259\u5229\u548cdinic\u7684\u9898\u89e3\uff0c\u8bf4\u5947\u6570\u5efa\u56fe\u548c\u5076\u6570\u5efa\u56fe\u6709\u4e00\u79cd\u8fc7\u4e0d\u4e86\uff0c\u4f46\u662f\u7528ISAP\u4e24\u79cd\u90fd\u80fd\u8fc7\u3002\n```cpp\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n\nusing namespace std;\n\nconst int MAXN = 205;\nconst int INF = 0x3f3f3f3f;\nconst int DIRX[8] = {-2, -1, 1, 2, 2, 1, -1, -2};\nconst int DIRY[8] = {-1, -2, -2, -1, 1, 2, 2, 1};\n\nint n, m;\nbool trap[MAXN][MAXN];\n\nint ID(int x, int y) {\n    return (x - 1) * n + y;\n}\n\nstruct Edge{\n    int to, val;\n    Edge *next, *ops;\n    Edge(int to, int val, Edge *next): to(to), val(val), next(next){}\n};\n\nEdge *head[MAXN * MAXN], *cur[MAXN * MAXN];\n\nvoid AddEdge(int u, int v, int w) {\n    head[u] = new Edge(v, w, head[u]);\n    head[v] = new Edge(u, 0, head[v]);\n    head[u]->ops = head[v]; head[v]->ops = head[u];\n}\n\nint dep[MAXN * MAXN], gap[MAXN * MAXN], s, t, res;\n\nvoid Bfs() {\n    memset(dep, -1, sizeof(dep));\n    memset(gap, 0, sizeof(gap));\n    dep[t] = 0; gap[0]++;\n    queue<int> q; q.push(t);\n    while (!q.empty()) {\n        int u = q.front(); q.pop();\n        for (Edge *e = head[u]; e; e = e->next) {\n            int v = e->to;\n            if (dep[v] != -1) continue;\n            q.push(v);\n            dep[v] = dep[u] + 1;\n            gap[dep[v]]++;\n        }\n    }\n}\n\nint Dfs(int u, int flow) {\n    if (u == t) {\n        res += flow;\n        return flow;\n    }\n    int used = 0;\n    for (Edge *&e = cur[u]; e; e = e->next) {\n        int v = e->to;\n        if (e->val && dep[v] == dep[u] - 1) {\n            int mi = Dfs(v, min(e->val, flow - used));\n            if (mi) {\n                used += mi;\n                e->val -= mi;\n                e->ops->val += mi;\n            }\n            if (used == flow) return used;\n        }\n    }\n    gap[dep[u]]--;\n    cur[u] = head[u];\n    if (gap[dep[u]] == 0) dep[s] = n * n + 3;\n    dep[u]++;\n    gap[dep[u]]++;\n    return used;\n}\n\nvoid Work() {\n    memcpy(cur, head, sizeof(head));\n    res = 0;\n    Bfs();\n    while (dep[s] <= n * n + 2) Dfs(s, INF);\n}\n\nint main() {\n    ios :: sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\n    cin >> n >> m;\n    s = 0; t = n * n + 1;\n    for (int i = 1; i <= m; i++) {\n        int x, y;\n        cin >> x >> y;\n        trap[x][y] = true;\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if ((i + j) % 2 == 0) {\n                if (!trap[i][j]) AddEdge(0, ID(i, j), 1);\n                for (int k = 0; k < 8; k++) {\n                    int x = i + DIRX[k], y = j + DIRY[k];\n                    if (x < 1 || x > n || y < 1 || y > n) continue;\n                    AddEdge(ID(i, j), ID(x, y), INF);\n                }\n            } else {\n                if (!trap[i][j]) AddEdge(ID(i, j), n * n + 1, 1);\n            }\n        }\n    }\n    Work();\n    cout << n * n - m - res << endl;\n    return 0;\n}\n```",
        "postTime": 1554888974,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011"
    },
    {
        "content": " \u539f\u9898\u4f20\u9001\u95e8[>Here<](https://www.luogu.org/problemnew/show/P3355)\n \n \u6211\u4eec\u9996\u5148\u89c2\u5bdf\u53d1\u73b0\uff0c\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u70b9\u5206\u6210\u5947\u6570\u70b9\u548c\u5076\u6570\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u70b9(x,y)\uff0c\u4f9d\u636e(x+y)\u7684\u5947\u5076\u6027\u5206\u6210\u4e24\u4e2a\u70b9\u96c6\u3002\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u6240\u80fd\u653b\u51fb\u5230\u7684\u70b9\u4e00\u5b9a\u548c\u5b83\u5728\u4e0d\u540c\u7684\u96c6\u5408\u4e2d\u3002\n \n 1.\u4ece\u6e90\u70b9\u5230\u6bcf\u4e2a\u6ca1\u6709\u969c\u788d\u7684\u5947\u6570\u70b9\u5efa1\u6761\u6d41\u4e3a1\u7684\u8fb9\uff1b\n \n 2.\u4ece\u6bcf\u4e2a\u6ca1\u6709\u969c\u788d\u7684\u5947\u6570\u70b9\u5230\u5176\u53ef\u4ee5\u653b\u51fb\u4e14\u6ca1\u6709\u969c\u788d\u7684\u5076\u6570\u70b9\u5efa1\u6761\u6d41\u4e3ainf\u7684\u8fb9\uff1b\n \n 3.\u4ece\u6bcf\u4e2a\u6ca1\u6709\u969c\u788d\u7684\u5076\u6570\u70b9\u5230\u6c47\u70b9\u5efa1\u6761\u6d41\u4e3a1\u7684\u8fb9\u3002\n \n \u8fd9\u6837\u5efa\u56fe\u4ee5\u540e\uff0c\u6bcf\u4e00\u6761\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u5f27\u8868\u793a\u6709\u4e24\u4e2a\u70b9\u4f1a\u76f8\u4e92\u653b\u51fb\u3002\u8ba1\u7b97\u51fa\u56fe\u7684\u6700\u5c0f\u5272ans\uff0c\u5373 \u4f7f\u6e90\u70b9\u5230\u6c47\u70b9\u4e0d\u8fde\u901a\u6240\u8981\u82b1\u8d39\u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c\u5b83\u7684\u5b9e\u9645\u610f\u4e49\u5c31\u662f\u5728\u6240\u6709\u6ca1\u6709\u969c\u788d\u7684\u70b9\u4e2d**\u81f3\u5c11**\u9700\u8981\u5220\u9664\u591a\u5c11\u4e2a\u624d\u80fd\u4f7f\u5f97\u6ca1\u6709\u70b9\u53ef\u4ee5\u76f8\u4e92\u653b\u51fb\u3002\n \n \u4e8e\u662f\u7b54\u6848\u5c31\u662fn*n-m-ans.\n \n \u53c8\u56e0\u4e3a\u6700\u5c0f\u5272=\u6700\u5927\u6d41\uff0c\u6240\u4ee5\u5efa\u56fe\u540e\u8dd1\u4e00\u8fb9dinic\u5373\u53ef\u3002\n \n \u4ee3\u7801\u5982\u4e0b\uff1a\n \n ```cpp\n// luogu-judger-enable-o2\n#include <cstdio>\n#include <cstring>\n#define min(X,Y) ((X)<(Y)?(X):(Y)) \n\nint S,T,n,m,head[40010],nxt[2050001],b[2050001],v[2050001],k=1,x,y;\nbool map[201][201];\nint dis[40010],p[40010],h,t,q[40010];\nchar ch;\ninline void push(int s,int t,int val){\n\tnxt[++k]=head[s];\n\thead[s]=k;\n\tb[k]=t;\n\tv[k]=val;\n}\ninline void link(int s,int t,int val){\n\tpush(s,t,val);\n\tpush(t,s,0);\n}\nbool bfs(){\n\tmemset(dis,0,sizeof dis);\n\tdis[S]=1;\n\th=t=0;\n\tq[++t]=S;\n\twhile(h<t){\n\t\th++;\n\t\tfor(register int i=head[q[h]];i;i=nxt[i])\n\t\t\tif(v[i]&&!dis[b[i]]){\n\t\t\t\tdis[b[i]]=dis[q[h]]+1;\n\t\t\t\tq[++t]=b[i];\n\t\t\t\tif(b[i]==T)return 1;\n\t\t\t}\n\t}\n\treturn 0;\n}\nint dfs(int x,int flow){\n\tif(x==T||!flow)return flow;\n\tint used=0;\n\tfor(register int i=p[x];i;i=nxt[i])\n\t\tif(v[i]&&dis[b[i]]==dis[x]+1){\n\t\t\tint w=dfs(b[i],min(flow-used,v[i]));\n\t\t\tv[i]-=w;\n\t\t\tv[i^1]+=w;\n\t\t\tused+=w;\n\t\t\tif(w)p[x]=i;\n\t\t\tif(used==flow)return flow;\n\t\t}\n\tif(!used)dis[x]=0;\n\treturn used;\n}\nvoid check(int a,int b,int c,int d){\n\tif(c<=0||d<=0)return;\n\tif(c>n||d>n)return;\n\tif(map[c][d])return;\n\tlink((a-1)*n+b,(c-1)*n+d,0x7f7f7f7f);\n}\nvoid read(int &x){\n\tx=0;\n\tch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')x=((x<<3)+(x<<1))+ch-'0',ch=getchar();\n}\nint main(){\n\tread(n),read(m);\n\tfor(register int i=1;i<=m;i++)read(x),read(y),map[x][y]=1;\n\tS=0,T=n*n+1;\n\tfor(register int i=1;i<=n;i++)\n\t\tfor(register int j=1;j<=n;j++)\n\t\t\tif(!map[i][j]){\n\t\t\t\tif(((i+j)&1)==0){\n\t\t\t\t\tlink(S,(i-1)*n+j,1);\n\t\t\t\t\tcheck(i,j,i+1,j-2);\n\t\t\t\t\tcheck(i,j,i-1,j+2);\n\t\t\t\t\tcheck(i,j,i+2,j-1);\n\t\t\t\t\tcheck(i,j,i-2,j+1);\n\t\t\t\t\tcheck(i,j,i+1,j+2);\n\t\t\t\t\tcheck(i,j,i-1,j-2);\n\t\t\t\t\tcheck(i,j,i-2,j-1);\n\t\t\t\t\tcheck(i,j,i+2,j+1);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tlink((i-1)*n+j,T,1);\n\t\t\t\t}\n\t\t\t}\n\tint ans=0;\n\twhile(bfs()){\n\t\tmemcpy(p,head,sizeof p);\n\t\tans+=dfs(S,0x7f7f7f7f);\n\t}\n\tprintf(\"%d\",n*n-ans-m);\n}\n```",
        "postTime": 1533557887,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP3355 \u9a91\u58eb\u5171\u5b58\u95ee\u9898"
    },
    {
        "content": "#\u5272~\n\u56e0\u4e3a\u6bcf\u4e2a\u9a91\u58eb\u653e\u7f6e\u540e\uff0c\u56e0\u4ed6\u800c\u4e0d\u80fd\u653e\u7f6e\u7684\u4f4d\u7f6e\u5fc5\u5b9a\u4e0e\u4ed6\u989c\u8272\u4e0d\u540c\uff0c\u6240\u4ee5\u5efa\u7acb\u6e90\u70b9\u6c47\u70b9\uff0c\u4ece\u6e90\u70b9\u5411\u6240\u6709\u9ed1\u70b9\u8fde\u8fb9\uff0c\u4ece\u767d\u70b9\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u7136\u540e\u628a\u6bcf\u4e2a\u9ed1\u70b9\u5411\u80fd\u963b\u788d\u7684\u70b9\u8fde\u8fb9\uff0c\u6700\u540e\u6c42\u5272\uff0c\u5373\u4e3a\u6700\u591a\u80fd\u653e\u7684\u9a91\u58eb\u6570\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<queue>\nusing namespace std;\n#define inf 999999999\n\nint n,m,x,y,fi[40002],ne[500001],w[500001],v[500001],cnt,tot,ans,dis[40002];\nint nx[9]={0,1,2,-1,-2,1,2,-1,-2},ny[9]={0,2,1,-2,-1,-2,-1,2,1},z;\nbool b[201][201];\n\nvoid add(int u,int vv,int val)\n{\n    w[++cnt]=vv;v[cnt]=val;ne[cnt]=fi[u];fi[u]=cnt;\n    w[++cnt]=u;v[cnt]=0;ne[cnt]=fi[vv];fi[vv]=cnt;\n}\n\nbool bfs()\n{\n    queue<int> q;\n    memset(dis,-1,sizeof(dis));\n    q.push(0);dis[0]=0;\n    while(!q.empty())\n    {\n        int k=q.front();q.pop();\n        for(int i=fi[k];i;i=ne[i])\n          if(v[i]>0 && dis[w[i]]<0)\n          {\n              dis[w[i]]=dis[k]+1;\n              if(w[i]==tot) return 1;\n              q.push(w[i]);\n          }\n    }\n    return 0;\n}\n\nint findd(int u,int vv)\n{\n    if(u==tot) return vv;\n    int kkz,now=0;\n    for(int i=fi[u];i;i=ne[i])\n      if(v[i]>0 && dis[w[i]]==dis[u]+1 && (kkz=findd(w[i],min(v[i],vv-now))))\n      {\n          v[i]-=kkz;v[i^1]+=kkz;now+=kkz;\n          if(now==vv) return now;\n      }\n    if(!now) dis[u]=-1;\n    return now;\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);cnt=1;tot=n*n+1;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&x,&y);b[x][y]=1;\n    }\n    for(int i=1;i<=n;i++)\n      for(int j=1;j<=n;j++)\n        if(!b[i][j])\n        {\n            int now=(i-1)*n+j;\n            if(!((i+j)%2))\n            {\n                add(0,now,1);\n                for(int k=1;k<=8;k++)\n                  if(!b[i+nx[k]][j+ny[k]] && (i+nx[k])>0 && (i+nx[k])<=n && (j+ny[k])>0 && (j+ny[k])<=n)\n                  {\n                      int now1=(i+nx[k]-1)*n+j+ny[k];\n                      add(now,now1,inf);\n                  }\n            }\n            else add(now,tot,1);\n        }\n    while(bfs()) ans+=findd(0,inf);\n    printf(\"%d\\n\",n*n-m-ans);\n    return 0;\n}\n```",
        "postTime": 1484213213,
        "uid": 32378,
        "name": "Malgr\u00e9_L_Guerre",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3355 \u3010\u9a91\u58eb\u5171\u5b58\u95ee\u9898\u3011"
    }
]