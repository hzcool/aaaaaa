[
    {
        "content": "## \u9898\u89e3P4822[BJWC2012]\u51bb\u7ed3\n\n[\u914d\u5408Blog\u98df\u7528\u66f4\u4f73](https://www.luogu.org/blog/149815/solution-p4822)\n\n[\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problem/P4822)\n\n**\u5206\u5c42\u56fe\u6a21\u677f\u9898**\n\n\u9898\u610f\u7b80\u5316\uff1a\u6709n\u4e2a\u70b9\uff0cm\u6761\u8fb9\uff0c\u6c42s\u5230t\u7684\u6700\u77ed\u8def\n\n\n\u73b0\u5728\u8ba9\u6211\u4eec\u53e3\u80e1\u4e00\u5f20\u56fe\uff0c\u662f\u8fd9\u6837\u7684\uff08\u56fe\u5f88\u4e11\uff0c\u8bf7\u89c1\u8c05\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/72236.png)\n\n\u4f46\u9898\u76ee\u4e2d\u591a\u4e86\u4e00\u4e2a\u6761\u4ef6\uff1a\u6211\u4eec\u81f3\u591a\u53ef\u4ee5\u8ba9k\u6761\u8fb9\u7684\u6743\u503c\u53d8\u4e3a\u539f\u6765\u768450%\uff08\u4e0d\u4e00\u5b9a\u8981\u6709k\u6761\u8fb9\u6743\u503c\u53d8\u621050%\uff09\n\n\u8fd9\u4e0d\u5c31\u662f\u5206\u5c42\u56fe\u88f8\u9898\u5417\uff0c\u5efak\u5c42\u56fe\uff08\u56e0\u4e3ak\u226450\uff0c\u6240\u4ee5\u5e76\u4e0d\u4f1a\u5360\u7528\u592a\u5927\u7684\u7a7a\u95f4\uff09\uff0c\u4e3e\u4e2a\u6817\u5b50\uff1ax\u548cy\u4e4b\u95f4\u6709\u4e00\u6761\u6743\u503c\u4e3az\u7684\u8fb9\uff0c\u5219\u7b2c0\u5230k\u5c42\u7684x,y\u4e4b\u95f4\u90fd\u8981\u8fde\u6743\u503c\u4e3az\u7684\u8fb9,\u7b2c0\u5230k-1\u5c42\u7684x\u6216y\u8fde\u5230\u7b2ci+1\u5c42\u7684y\u6216x\u7684\u6743\u503c\u6539\u4e3a\u539f\u6765\u768450%\n\n\u56fe\u5c31\u53d8\u6210\u4e86\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\u2193\n\n![](https://cdn.luogu.com.cn/upload/pic/72243.png)\n\n~~\u4e71\u4e03\u516b\u7cdf\uff0c\u770b\u90fd\u770b\u4e0d\u6e05~~\n\n~~\u56fe\u91cc\u9762\u6709\u4e00\u4e9b0\uff0c\u4f60\u5c31\u5f53\u6210\u662f\u539f\u6765\u768450%\u5427\u6bd5\u7adf\u753b\u56fe\u7684\u90a3\u4e2a\u8f6f\u4ef6\u4e0d\u77e5\u9053\u88ab\u6211\u4e22\u54ea\u513f\u53bb\u4e86~~\n\np.s.\u56fe\u4e2d8\u548c9\u7684\u7f16\u53f7\u753b\u53cd\u4e86 ~~\uff0c\u51d1\u5408\u7740\u770b\u5427~~\n\n\u597d\u5427\u7b49\u6709\u65f6\u95f4\u4e86\u6211\u4f1a\u6539\n\n\u6240\u4ee5\u6700\u7ec8\u7b54\u6848\u53ea\u9700\u8981\u8dd1\u4e00\u8fb9Dijkstra\u518d\u627e\u51fadis[i*(n+1)+t]\u7684\u6700\u5c0f\u503c\u5373\u4e3a\u7b54\u6848\n\nCode\n```cpp\n#include<cstdio>\n#include<queue>\n#define ri register int\n#define MAXN 51\n#define MAXM 1001 \n#define INF 2147483647\nusing namespace std;\nint n,m,k,edge_sum;\nint head[MAXM*201],dis[MAXN*201];\nbool vis[MAXN*201];\nstruct Edge{\n\tint next,to,dis;\n}edge[MAXM*201];\ninline void addedge(int from,int to,int dis){\n\tedge[++edge_sum].next=head[from];\n\tedge[edge_sum].dis=dis;\n\tedge[edge_sum].to=to;\n\thead[from]=edge_sum;\n}\nstruct Node{\n\tint u,dis;\n\tbool operator <(const Node& rhs) const {\n        return dis>rhs.dis;\n    }\n};\ninline void dijkstra(){\n\tpriority_queue<Node> q;\n\tq.push((Node){1,0});\n\twhile(!q.empty()) {\n\t\tint u=q.top().u;\n\t\tq.pop();\n\t\tvis[u]=1;\n\t\tfor(ri i=head[u];i;i=edge[i].next)\n\t\t\tif(!vis[edge[i].to]&&dis[edge[i].to]>dis[u]+edge[i].dis){\n\t\t\t\tdis[edge[i].to]=dis[u]+edge[i].dis;\t\t\n\t\t\t\tq.push((Node){edge[i].to,dis[edge[i].to]});\n\t\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d %d %d\",&n,&m,&k);\n    for(ri i=1;i<=m;i++)\n    {\n    \tint x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        for(ri j=0;j<=k;j++) addedge(j*n+x,j*n+y,z),addedge(j*n+y,j*n+x,z);\n        for(ri j=0;j<k;j++) addedge(j*n+x,(j+1)*n+y,z/2),addedge(j*n+y,(j+1)*n+x,z/2);\n    }\n    for(ri i=1;i<=n*k+n;i++) dis[i]=INF;\n    dis[1]=0;\n    dijkstra();\n    int min=INF;\n    for(ri i=0;i<=k;i++) if(min>dis[i*n+n]) min=dis[i*n+n];\n    printf(\"%d\\n\",min);\n    return 0;\n}\n}\n```\n\n~~\u7801\u98ce\u771f\u5dee~~\n\n# \u8bf4\u53e5\u95f2\u8bdd\uff1a\u7814\u7a76\u5206\u5c42\u56fe\u7684\u6700\u597d\u65b9\u6cd5\u662f\n### A\u4e864568,\u518dA\u4e862939\uff0c\u8fd8\u8981A\u4e864822\n**\u795d\u4f60\u4eec\u6210\u529f (\u6ed1\u7a3d**\n\n3\u500d\u7ecf\u9a8c\n\n\u6211\u90fd\u544a\u8bc9\u4f60\u8fd9\u4e48\u591a\u4e86\uff0c\u4e0d\u70b9\u4e2a\u8d5e\uff1f",
        "postTime": 1570245861,
        "uid": 149815,
        "name": "Isprime",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "\u8fd9\u4e0d\u5c31\u662f\u4e00\u9053\u5206\u5c42\u56fe\u6700\u77ed\u8def\u7684\u677f\u5b50\u9898\u5417\uff1f\n\n\u65e2\u7136\u5237\u4e86\u5c31\u590d\u4e60~~\uff08\u9884\u4e60\uff09~~\u4e00\u4e0b\u5206\u5c42\u56fe\u3002\n\n\u6211\u4eec\u4e00\u822c\u7528\u5206\u5c42\u56fe\u89e3\u51b3\u5728\u6700\u77ed\u8def\u4e2d\u6709\u529e\u6cd5\u51cf\u5c11\u8fb9\u6743\u7684\u9898\u3002\u90a3\u4e48\n\n### **\u601d\u8def\u5982\u4e0b** \n\n\u628a\u56fe\u5206\u6210k\u5c42\uff0c\u6bcf\u5c42\u4ecd\u7136\u662fn\u4e2a\u70b9\uff0c\u6bcf\u5c42\u7684\u8fde\u8fb9\u65b9\u5f0f\u4ecd\u7136\u548c\u539f\u56fe\u76f8\u540c\u3002\u9664\u6b64\u4ee5\u5916\uff0c\u5c42\u4e0e\u5c42\u4e4b\u95f4\u8be5\u5982\u4f55\u8fde\u8fb9\u5462\uff1f\n\n\u6211\u4eec\u5047\u8bbe\u73b0\u5728\u5728\u7b2ci\u5c42\uff0c\u70b9u\u548c\u70b9v\u4e4b\u95f4\u6709\u4e00\u6761\u6743\u503cw\u7684\u8fb9\uff0c\u5bf9\u4e8e\u4e0b\u4e00\u5c42\uff0c\u5373i+1\u5c42\uff0cu'\u4e0ev'\u4e4b\u95f4\u4ecd\u662f\u6709\u4e00\u6761\u6743\u4e3aw\u7684\u8fb9\uff0c\u4e14\u5bf9\u4e8eu\u4e0ev'\u4e4b\u95f4\u5e94\u8be5\u52a0\u4e0a\u4e00\u6761\u8fb9\u6743\u4e3a0\u7684\u8fb9\u3002\u6240\u4ee5\u5982\u679c\u6bcf\u4e00\u5c42\u6709m\u6761\u8fb9\uff0c\u7b2ci\u5c42\u548c\u7b2ci+1\u5c42\u4e4b\u95f4\u4e5f\u4e00\u5b9a\u662f\u6709m\u6761\u8fb9\u3002\n\n\u5bf9\u4e8e\u6211\u4eec\u5f53\u524d\u627e\u5230\u7684\u7ec8\u70b9\uff0c\u5c1d\u8bd5\u8d77\u70b9\u7684\u72b6\u6001\u53bb\u66f4\u65b0\uff0c\u4e0d\u9009\u62e9\u6b64\u6761\u8fb9\u514d\u8d39\u7684\u72b6\u6001\u548c\u9009\u62e9\u6b64\u6761\u8fb9\u514d\u8d39\u7684\u72b6\u6001\uff0c\u518d\u5c06\u8fd9\u4e24\u4e2a\u72b6\u6001\u538b\u5165\u961f\u5217\u53bb\u66f4\u65b0\u53ef\u4ee5\u5230\u8fbe\u7684\u5176\u4ed6\u72b6\u6001\u3002 \n\n\u4ee5\u4e0a\u5c31\u662f\u8fd9\u9053\u9898\u7684\u601d\u8def\u3002\u7c7b\u4f3c\u9898\u6709 Bzoj 2763 \u98de\u884c\u8def\u7ebf \u548c [USACO09FEB]\u6539\u9020\u8defRevampingTrail\n\n\u6211\u4eec\u6709\u65f6\u4e5f\u7528\u5206\u5c42\u56fe\u89e3\u51b3\u4e00\u4e9b\u5176\u5b83\u95ee\u9898\uff0c\u4e3b\u8981\u662f\u6700\u77ed\u8def\u4e0a\u7684\u6d82\u8272\u95ee\u9898\n\n\u8fd9\u79cd\u7c7b\u578b\u4e3b\u8981\u601d\u8def\u4ecd\u7136\u662f\u591a\u5f00\u4e00\u7ef4\u8bb0\u5f55\u5f53\u524d\u72b6\u6001\uff0c\u7136\u540e\u6839\u636e\u5f53\u524d\u72b6\u6001\u66f4\u65b0\u5176\u5bf9\u5e94\u72b6\u6001\u3002\u6211\u4eec\u6bcf\u627e\u5230\u4e00\u4e2a\u7ec8\u70b9\uff0c\u9996\u5148\u5c1d\u8bd5\u7528\u8d77\u70b9\u72b6\u6001\u53bb\u66f4\u65b0\u8d77\u70b9\u989c\u8272\u4e0d\u540c\u7684\u72b6\u6001\uff0c\u518d\u53bb\u66f4\u65b0\u7ec8\u70b9\u5728\u6b64\u65f6\u523b\u7684\u72b6\u6001\uff0c\u5c06\u7ec8\u70b9\u72b6\u6001\u538b\u5165\u961f\u5217\u66f4\u65b0\u5176\u4ed6\u72b6\u6001\u3002 \n\n\u7c7b\u4f3c\u9898\u6709 Codevs 1391 \u4f0a\u5439\u8403\u9999\n\n\u4ee5\u4e0a\u5c31\u662f\u5bf9\u5206\u5c42\u56fe\u7684\u590d\u4e60~~\uff08\u9884\u4e60\uff09~~\n\n\n------------\n\n\u90a3\u4e48\u672c\u9898\u7684\n# code\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define maxn 10000000\n#define inf 0x7f7f7f\nusing namespace std;\nstruct node{\n\tint to,next,w;\n}edge[maxn*2];\nint n,m,k,x,y,z,tot,dis[maxn],vis[maxn],head[maxn];\ninline int point(int x,int y){return y*n+x;}\ninline int min(int a,int b){return a<b?a:b;}\ninline void adde(int u,int v,int w){edge[++tot].next=head[u],edge[tot].to=v,edge[tot].w=w,head[u]=tot;}\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while (ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while (ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nqueue<int> q;\ninline void spfa(){\n\tfor(int i=1;i<=point(n,k);i++) dis[i]=inf;\n\tdis[1]=0;vis[1]=1;\n\tq.push(1);\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=head[u];i>0;i=edge[i].next){\n\t\t\tint v=edge[i].to;\n\t\t\tif(dis[v]>dis[u]+edge[i].w){\n\t\t\t\tdis[v]=dis[u]+edge[i].w;\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvis[u]=0;\n\t}\n}\nint main(){\n\tn=read();m=read();k=read();\n\tfor(int i=1;i<=m;i++){\n\t\tint x=read(),y=read(),z=read();\n\t\tfor(int j=0;j<=k;j++) adde(point(x,j),point(y,j),z),adde(point(y,j),point(x,j),z);\n\t\tfor(int j=0;j<k;j++) adde(point(x,j),point(y,j+1),z/2),adde(point(y,j),point(x,j+1),z/2);\n\t}\n\tspfa();\n\tint ans=inf;\n\tfor(int i=0;i<=k;i++) ans=min(ans,dis[point(n,i)]);\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1542371834,
        "uid": 111961,
        "name": "D_14134",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u6ca1\u6709\u4ec0\u4e48\u53ef\u5199\u7684\u90e8\u5206\u5206\u5427\n\n\u6bd4\u8f83\u5957\u8def\u7684\u4e00\u4e2a\u9898\n\n\u4e24\u79cd\u5176\u5b9e\u5dee\u4e0d\u591a\u7684\u89e3\u6cd5\n\n### 1\uff0c$DP$\u6700\u77ed\u8def\n\n\u56de\u987e\u6700\u77ed\u8def\u7684\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u7528$len[i]$\u8868\u793a\u4ece\u8d77\u70b9\u5230$i$\u8fd9\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n\n\u90a3\u4e48\u52a0\u5165\u51cf\u5c0f\u8fb9\u6743\u4e86\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u7528$len[i][j]$\u8868\u793a\u5230\u7b2c$i$\u4e2a\u70b9\uff0c\u7528\u6389$k$\u6b21\u51cf\u5c11\u8fb9\u6743\u673a\u4f1a\u7684\u6700\u5c0f\u8ddd\u79bb\n\n\u8f6c\u79fb\u662f\u663e\u7136\u7684\uff0c\u5728\u666e\u901a\u6700\u77ed\u8def\u8f6c\u79fb\u7684\u57fa\u7840\u4e0a\uff0c\u52a0\u5165\u4ece\u7528\u6389$j$\u4e2a\u652f\u63f4\u5230\u7528$j+1$\u4e2a\u7684\u8f6c\u79fb\uff0c\n\n$len[v][j+1]=min(len[v][j+1],len[u][j]+dis[u][v]/2)$\n\n\u6700\u540e\u53d6$min(len[n][i])(i\\in{[1,k]})$\u5373\u53ef\n\n```\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nconst int maxn=60;\nint n,m,ki,len[maxn][maxn],e[maxn][maxn];\nbool exist[maxn][maxn];\nint spfa()\n{\n    queue<int>q,qs;\n    memset(len,0x3f,sizeof(len));\n    len[1][0]=0;\n    exist[1][0]=1;\n    q.push(1),qs.push(0);\n    while(!q.empty())\n    {\n        int i=q.front(),k=qs.front();\n        q.pop(),qs.pop();\n        exist[i][k]=0;\n        for(int j=1;j<=n;j++)\n        {\n            if(e[i][j]>1e6)\n                continue;\n            if(len[j][k]>len[i][k]+e[i][j])\n            {\n                len[j][k]=len[i][k]+e[i][j];\n                if(!exist[j][k])\n                    exist[j][k]=1,q.push(j),qs.push(k);\n            }\n            if(len[j][k+1]>len[i][k]+e[i][j]/2)\n            {\n                len[j][k+1]=len[i][k]+e[i][j]/2;\n                if(!exist[j][k+1]&&k<ki)\n                    exist[j][k+1]=1,q.push(j),qs.push(k+1);\n            }\n        }\n    }\n    int ret=1e9;\n    for(int i=0;i<=ki;i++)\n        ret=min(ret,len[n][i]);\n    return ret;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&ki);\n    memset(e,0x3f,sizeof(e));\n    for(int x,y,d,i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&d);\n        e[x][y]=e[y][x]=d;\n    }\n    printf(\"%d\\n\",spfa());\n    return 0;\n}\n```\n\n### 2\uff0c\u5206\u5c42\u56fe\u6700\u77ed\u8def\n\n\u672c\u6765\u662f\u6709$n$\u4e2a\u70b9\u7684\uff0c\u4f46\u662f\u4e0d\u597d\u5904\u7406\uff0c\u6211\u4eec\u4e0d\u59a8\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210$k+1$\u4e2a\uff0c\u7b2c$j$\u4e2a\u8868\u793a\u5230\u8fd9\u4e2a\u70b9\u8981\u7528$j$\u6b21\u652f\u63f4\n\n\u5efa\u56fe\u7684\u65f6\u5019\u540c\u5c42\u6b63\u5e38\u8fde\u8fb9\uff0c\u672c\u5c42\u5230\u4e0a\u5c42\u8fde\u8fb9\u65f6\u8fb9\u6743\u96642\uff0c\u76f4\u63a5\u8dd1\u6700\u77ed\u8def\uff0c\u7edf\u8ba1\u7b54\u6848\u65f6\u679a\u4e3e\u7b2c$n$\u4e2a\u70b9\u5404\u5c42\u6700\u5c0f\u4ee3\u4ef7\u5373\u53ef\n\n```\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nconst int maxn=2600;\nstruct edge{\n    int next,to,dis;\n}e[210010];\nint cnt,head[maxn],n,m,ki,len[maxn];\nbool exist[maxn];\ninline void add(int x,int y,int d)\n{\n    e[++cnt].next=head[x];\n    e[cnt].to=y;\n    e[cnt].dis=d;\n    head[x]=cnt;\n}\nint spfa()\n{\n    queue<int> q;\n    memset(len,0x3f,sizeof(len));\n    q.push(1);\n    len[1]=0;\n    exist[1]=1;\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        exist[u]=0;\n        for(int v,i=head[u];i;i=e[i].next)\n            if(len[v=e[i].to]>len[u]+e[i].dis)\n            {\n                len[v]=len[u]+e[i].dis;\n                if(!exist[v])\n                    exist[v]=1,q.push(v);\n            }\n    }\n    int ret=1e9;\n    for(int i=1;i<=ki+1;i++)\n        ret=min(ret,len[n*i]);\n    return ret;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&ki);\n    memset(e,0x3f,sizeof(e));\n    for(int x,y,d,i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&d);\n        for(int j=0;j<=ki;j++)\n        {\n            add(x+j*n,y+j*n,d),add(y+j*n,x+j*n,d);\n            if(j<ki)\n                add(x+j*n,y+(j+1)*n,d/2),add(y+j*n,x+(j+1)*n,d/2);\n        }\n    }\n    printf(\"%d\\n\",spfa());\n    return 0;\n}\n```",
        "postTime": 1537018792,
        "uid": 57045,
        "name": "communist",
        "ccfLevel": 7,
        "title": "\u83f2\u5f8b\u5bbe\u6d77\u6218"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f \r\n\r\n> $n$ \u4e2a\u70b9\u7684\u7a20\u5bc6\u56fe\u3002\u4f60\u53ef\u4ee5\u8fdb\u884c $k$ \u6b21\u64cd\u4f5c\uff0c\u4ee4\u67d0\u6761\u8fb9\u6743\u503c\u53d8\u6210\u4e00\u534a\uff0c\u6bcf\u6761\u8fb9\u53ea\u80fd\u53d8\u6362\u6700\u591a\u4e00\u6b21\u3002\u8be2\u95ee\u4ece $1$ \u5230 $n$ \u7684\u6700\u77ed\u8def\u3002  \r\n> $n\\le 50,k\\le 50$ \u3002\r\n  \r\n\r\n## \u9898\u89e3\r\n\r\n\u697c\u4e0a\u7ed9\u51fa\u4e86\u975e\u5e38\u591a\u7684\u7528 $\\text{SPFA}$ \u6216\u8005 $\\text{Dijkstra}$ \u7684\u5206\u5c42\u56fe\u505a\u6cd5\u3002\u4f46\u662f\u65e0\u8bba\u662f $\\text{Dij}$ \u8fd8\u662f $\\text{SPFA}$ \u5199\u8d77\u6765\u90fd\u6bd4\u4f20\u7edf\u7684 $\\text{Floyd}$ \u9ebb\u70e6\u3002\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a $\\mathcal O(k\\times n^3)$ \u7684 $\\text{Floyd}$ \u505a\u6cd5\u3002\r\n\r\n- \u7531\u4e8e $n\\le 50,m\\le 10^3$ \u8fbe\u5230\u4e86\u7a20\u5bc6\u56fe\u7684\u7a0b\u5ea6\uff0c\u4e8e\u662f\u4e0b\u6587\u4e0d\u518d\u533a\u5206 $m$ \uff0c\u800c\u662f\u76f4\u63a5\u5f53\u4f5c $n^2$ \u5904\u7406\u4e86\u2026\u2026\r\n\r\n\u4e0b\u6587\u8bbe $W_{i,j}$ \u8868\u793a\u8fde\u63a5 $(i,j)$ \u7684\u8fb9\u6743\uff0c $S_{i,j}$ \u8868\u793a $(i,j)$ **\u4e0d\u8fdb\u884c\u53d8\u6362**\u7684\u60c5\u51b5\u4e0b\u7684\u6700\u77ed\u8def\uff0c $T_{i,j}$ \u8868\u793a\u8fdb\u884c\u4e86\u82e5\u5e72\u6b21\u53d8\u6362\u540e\u7684\u6700\u5c0f\u8def\u3002\uff08\u7279\u522b\u5730\uff0c\u82e5\u67d0\u6761\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u8bbe\u4e3a $+\\infty$ \uff09 \u3002\r\n\r\n\u663e\u7136\uff0c\u7531\u4e8e $n\\le 50$ \uff0c\u6211\u4eec\u53ef\u4ee5\u9884\u5904\u7406\u51fa $S_{i,j}$ \u548c $W_{i,j}$ \u3002\u4e0b\u9762\u8003\u8651\u679a\u4e3e\u8fdb\u884c\u4e86\u591a\u5c11\u6b21\u53d8\u6362\u3002\u4e0d\u59a8\u8bbe\u679a\u4e3e\u5230\u4e86\u7b2c $t$ \u6b21\u3002\r\n\r\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u9700\u8981\u7528\u76ee\u524d\u8ba1\u7b97\u51fa\u7684\u6267\u884c\u4e86\u6700\u591a $t-1$ \u6b21\u53d8\u6362\u7684 $T_{i,j}$ \u8ba1\u7b97\u51fa\u4e0b\u4e00\u4e2a $T_{i,j}$ \uff08\u4e0d\u59a8\u8bbe\u4e3a $T_{i,j}'$ \uff09\u3002\u663e\u7136\u6709\u8fd9\u6837\u7684\u9012\u63a8\u5f0f\uff1a\r\n\r\n$$T_{i,j}'=\\min_{k\\in[1,n]} \\left\\{T_{i,j},T_{i,k}+\\frac{1}{2}W_{k,j}\\right\\}$$\r\n\r\n\u7406\u89e3\uff1a\u679a\u4e3e\u6bcf\u4e00\u6761\u8def\u5f84 $(i,k)$ \uff0c\u5bf9\u8fb9 $(k,j)$ \u4f7f\u7528\u53d8\u6362\uff0c\u66f4\u65b0\u7b54\u6848\u81f3 $T_{i,j}'$ \u3002\r\n\r\n\u6ce8\u610f\uff1a\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u8003\u8651\u5bf9\u4e00\u6761\u8fb9\u91cd\u590d\u53d8\u6362\u7684\u60c5\u51b5\u3002\u56e0\u4e3a $(i,j)$ \u6700\u77ed\u8def\u5f84\u4e0a\u663e\u7136\u4e0d\u53ef\u80fd\u5bf9\u4e00\u6761\u8fb9\u8fdb\u884c\u4e24\u6b21\u4ee5\u4e0a\u7684\u53d8\u6362\u3002\r\n\r\n\u5f53\u7136\uff0c\u5728\u53d8\u6362\u8fc7\u4e00\u6761\u8fb9\u540e\u53ef\u80fd\u8fd8\u4f1a\u8d70\u82e5\u5e72\u6b65\u624d\u4f1a\u8fdb\u884c\u4e0b\u4e00\u6b21\u53d8\u6362\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5728 $T_{i,j}$ \u7684\u57fa\u7840\u4e0a\u53ef\u4ee5\u518d\u8d70\u82e5\u5e72\u6b65\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u76f8\u5f53\u4e8e\u7b2c $i$ \u4e2a\u70b9\u548c\u7b2c $j$ \u4e2a\u70b9\u4e4b\u95f4\uff0c\u6709\u4e00\u6761\u957f\u5ea6\u4e3a $S_{i,j}$ \u7684\u8fb9\u3002\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u8fdb\u884c\u4e0b\u4e00\u6b21\u53d8\u6362\u4e4b\u524d\uff0c\u6211\u4eec\u90fd\u662f\u8d70\u7684\u666e\u901a\u8def\uff0c\u4e8e\u662f\u5e94\u5f53\u7528 $S_{k,j}$ \u66f4\u65b0 $T_{i,j}'$ \u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u8fd9\u5c31\u662f\u6734\u7d20\u7684 $\\text{Floyd}$ \u3002\r\n\r\n\u8fd9\u65f6\uff0c\u6211\u4eec\u8ba1\u7b97\u51fa\u4e86\u53d8\u6362\u4e86\u6700\u591a $t$ \u6b21\u7684 $T_{i,j}'$ \u3002\u5c06\u5b83\u590d\u5236\u5230 $T_{i,j}$ \u5c31\u53ef\u4ee5\u8fdb\u884c\u4e0b\u4e00\u8f6e\u5faa\u73af\u4e86\u3002\r\n\r\n\u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u662f $\\mathcal O(k\\times n^3)$ \u3002\r\n\r\n---\r\n\r\n\u9644\u8bb0\uff1a\u8ba9\u6211\u4eec\u8ba1\u7b97\u4e00\u4e0b\u6734\u7d20\u7684\u5206\u5c42\u56fe\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u3002\r\n\r\n\u5206\u5c42\u56fe\u5c06\u6240\u6709\u7684 $n$ \u4e2a\u70b9\u548c $n^2$ \u6761\u8fb9\u590d\u5236\u4e86 $k$ \u6b21\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6784\u9020\u51fa\u7684\u5206\u5c42\u56fe\u5e94\u5f53\u6709 $nk$ \u4e2a\u70b9\u548c $n^2k$ \u6761\u8fb9\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u6211\u4eec\u90fd\u8981\u679a\u4e3e\u4e00\u4e0b\u4e0e\u5b83\u76f8\u8fde\u7684\u6240\u6709\u8fb9\uff08\u4e00\u5171\u662f $2n$ \u4e2a\uff09\uff0c\u8fd9\u90e8\u5206\u590d\u6742\u5ea6\u8fbe\u5230\u4e86 $kn^2$ \u3002\u8fd9\u4e9b\u8fb9\u8fd8\u8981\u5168\u90e8\u4e22\u5230\u4f18\u5148\u961f\u5217\u91cc\uff0c\u590d\u6742\u5ea6\u8fd8\u8981\u591a\u4e2a $\\log $\u2026\u2026\u4e8e\u662f\u4e8c\u53c9\u5806\u4f18\u5316\u7684 $\\text{Dijkstra}$ \u7684\u590d\u6742\u5ea6\u5b9e\u9645\u4e0a\u662f $\\mathcal O(kn^2\\log kn^2)$ \u2026\u2026\uff08\u8fd9\u4e48\u770b\u6765\uff0c\u6211\u7684 $\\text{Floyd}$ \u505a\u6cd5\u8fd8\u4e0d\u9519\u561b\uff09\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u975e\u5e38\u80fd\u7801\uff0c\u7528\u4e86\u4e9b\u7279\u6b8a\u7684\u5806\uff0c\u53ef\u4ee5\u4e00\u5b9a\u7a0b\u5ea6\u964d\u4f4e\u590d\u6742\u5ea6\u3002\r\n\r\n\u987a\u5e26\u4e00\u63d0\uff0c\u9898\u89e3\u533a\u91cc\u53e6\u5916\u6709\u4e2a $\\mathcal O(n^3k^2)$ \u7684 $\\text{Floyd}$ \u3002\u4f46\u662f\u5b9e\u73b0\u7684\u4e0d\u600e\u4e48\u597d\uff0c\u5dee\u70b9\u5c31\u88ab\u5361\u5230 $\\text{TLE}$ \u2026\u2026\r\n\r\n## \u53c2\u8003\u4ee3\u7801\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\n#define up(l,r,i) for(int i=l,END##i=r;i<=END##i;++i)\r\n#define dn(r,l,i) for(int i=r,END##i=l;i>=END##i;--i)\r\nusing namespace std;\r\ntypedef long long i64;\r\nconst int INF =1e9;\r\nconst int MAXN=50+3;\r\nint n,m,p,S[MAXN][MAXN],T[MAXN][MAXN],R[MAXN][MAXN],W[MAXN][MAXN];\r\nint qread(){\r\n    int w=1,c,ret;\r\n    while((c=getchar())> '9'||c< '0') w=(c=='-'?-1:1); ret=c-'0';\r\n    while((c=getchar())>='0'&&c<='9') ret=ret*10+c-'0';\r\n    return ret*w;\r\n}\r\nint main(){\r\n    n=qread(),m=qread(),p=qread();\r\n    up(1,n,i) up(1,n,j) S[i][j]=W[i][j]=INF; up(1,n,i) S[i][i]=W[i][i]=0;\r\n    up(1,m,i){\r\n        int a=qread(),b=qread(),w=qread();\r\n        S[a][b]=S[b][a]=W[a][b]=W[b][a]=min(W[a][b],w);\r\n    }\r\n    up(1,n,i) up(1,n,j) up(1,n,k) S[j][k]=min(S[j][k],S[j][i]+S[i][k]);\r\n    up(1,n,i) up(1,n,j) T[i][j]=S[i][j];\r\n    up(1,p,o){\r\n        up(1,n,i) up(1,n,j) R[i][j]=T[i][j];\r\n        up(1,n,i) up(1,n,j) up(1,n,k) R[i][k]=min(R[i][k],T[i][j]+W[j][k]/2);\r\n        up(1,n,i) up(1,n,j) T[i][j]=R[i][j];\r\n        up(1,n,i) up(1,n,j) up(1,n,k) T[i][k]=min(T[i][k],T[i][j]+S[j][k]);\r\n    }\r\n    printf(\"%d\\n\",T[1][n]);\r\n    return 0;\r\n}\r\n```",
        "postTime": 1612185494,
        "uid": 330759,
        "name": "\u56e7\u4ed9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "#### QAQ\uff0c\u8fd9\u9053\u9898\u9898\u9762\u592a\u957f\u4e86~~\u5e9f\u8bdd\u8fde\u7bc7~~\n\n##### \u4f46\u8fd9\u4e0d\u662f\u91cd\u70b9\uff0c\u91cd\u70b9\u662f\u8fd9\u9898\u592a _\u6c34_ \u4e86\n\n\u88f8\u7684\u5206\u5c42\u56fe\u2026\u2026\n\n------------\n\n[P4822](https://www.luogu.org/problem/P4822)\n\n[P4568](https://www.luogu.org/problem/P4568)\n\n[P1948](https://www.luogu.org/problem/P1948)\n\n[P2939](https://www.luogu.org/problem/P2939) <--\u6bd2\u7624\uff0c\u5361\u6570\u7ec4\u5927\u5c0f\n\n### 4\u500d\u7ecf\u9a8c\uff01\n\n\n------------\n\n\u5c06\u4e0a\u4e0b\u4e24\u5c42\u4e4b\u95f4\u8fde\u4e0a\u6b63\u5e38\u8fb9\u7684\u6743\u503c\u4e00\u534a\u5927\u5c0f\u7684\u8fb9\u5c31\u53ef\u4ee5\u4e86\uff01\n\n\u7136\u540e\u5c31\u662f\u5206\u5c42\u56fe\u5e38\u89c4\u64cd\u4f5c\u4e86\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N=1500001;\nstruct st{\n    int dis,x;\n    st (const int a,const int b){\n        dis=a;\n        x=b;\n    }\n    bool operator < (const st a)const {\n        return dis>a.dis;\n    }\n};\npriority_queue <st> q;\nint n,m,cnt,s,t,k;\nint nxt[2*N],last[2*N],a[2*N],w[2*N];\nint dis[N];\nbool l[N];\nvoid add(int x,int y,int z){\n    nxt[++k]=last[x];\n    last[x]=k;\n    a[k]=y;\n    w[k]=z;\n}\nvoid dijkstra(int s){\n    memset(dis,0x3f,sizeof(dis));\n    dis[s]=0;\n    q.push(st(0,s));\n    while (!q.empty()){\n        while (!q.empty()&&l[q.top().x]) q.pop();\n        if (q.empty()) break;\n        int x=q.top().x;q.pop();\n        l[x]=1;\n        for (int i=last[x];i;i=nxt[i]){\n            int y=a[i];\n            if (dis[y]>dis[x]+w[i]){\n                dis[y]=dis[x]+w[i];\n                q.push(st(dis[y],y));\n            }\n        }\n    }\n}\nsigned main(){\n    scanf(\"%lld%lld%lld\",&n,&m,&cnt);s=1;t=n;\n    // for (int i=0;i<n;i++) last[i]=-1;\n    for (int x,y,z,i=1;i<=m;i++){\n        scanf(\"%lld%lld%lld\",&x,&y,&z);\n        add(x,y,z);add(y,x,z);\n        for (int j=1;j<=cnt;j++){\n            add(x+(j-1)*n,y+j*n,z/2);\n            add(y+(j-1)*n,x+j*n,z/2);\n            add(x+j*n,y+j*n,z);\n            add(y+j*n,x+j*n,z);\n        }\n    }\n    for (int i=1;i<=cnt;i++) add(t+(i-1)*n,t+i*n,0);\n    dijkstra(s);\n    printf(\"%lld\",dis[t+cnt*n]);\n    return 0;\n}\n```\n",
        "postTime": 1571575762,
        "uid": 23170,
        "name": "\u56de\u9752\u7edd\u5f71",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "## \u5f53\u65e0\u6570\u5927\u4f6c\u6b63\u5728\u60f3 \u5206\u5c42\u56fe SPFA Dij DP \u7684\u65f6\u5019\u2026\u2026\n\nBFS \u7a81\u7136\u5192\u4e86\u51fa\u6765\uff0c\u849f\u84bb\u4eec\u5927\u547c\uff1a\u201c\u5f97\u6551\u4e86\uff01\u201d\uff0c\u4e8e\u662f\u5176\u5b83\u5e26\u6709\u96be\u5ea6\u7684\u7b97\u6cd5\u88ab\u4ed6\u4eec\u7ed9\u629b\u5f03\u4e86\u2026\u2026\n\n\u89c1\u6b64\u72b6\uff0c\u6211\u5fc3\u4e2d\u4e5f\u6124\u6124\u4e0d\u5e73\uff1a\u201c\u96be\u9053\u4e00\u9053\u7d2b\u9898\u5c31\u662f\u7ed9\u4f60\u4eec\u7528 BFS \u6c34\u8fc7\u7684\u5417\uff01\u201d\u4e00\u65c1\u7684 FHY \u70b9\u70b9\u5934\u3002\u201c\u672c\u6765\u5c31\u662f\u8981\u4f60\u4eec\u7ec3\u4e60\u5206\u5c42\u56fe\u7684\uff0c\u4f60\u4eec\u8fd9\u6837\u5b50\uff0c\u5bf9\u5f97\u8d77\u51fa\u9898\u4eba\u5417\uff1f\u201d\n\nFHY \u6253\u5f00\u6d4b\u8bc4\u8bb0\u5f55\uff0c\u5ffd\u5730\u53d1\u73b0\u6211 AC \u4e86\uff0c\u7591\u60d1\u5730\u8f6c\u8fc7\u5934\u770b\u6211\uff1a\u201c\u4f60\u600e\u4e48\u8fc7\u4e86\uff1f\u201d\n\n\u6211\uff1a\u201c\u662f\u554a\uff0c\u521a\u8fc7\u7684\u201d\n\nFHY\uff1a\u201c\u4f60\u4e0d\u662f\u4e0d\u4f1a\u5206\u5c42\u56fe\u6700\u77ed\u8def\u5417\uff1f\u201d\n\n\u6211\uff1a\u201c\u662f\u554a\u201d\n\nFHY\uff1a\u201c\u4f60\u2026\u2026\u201d\n\n# \u6211\u7528\u7684\u53ef\u4e0d\u662f BFS\n\u800c\u662f\u5979\u7684\u8fd1\u4eb2\uff0cDFS \u8fa3 qwq\n\n\u5f53\u7136\uff0c\u53e4\u5178\u7684 DFS \u80af\u5b9a\u662f\u70b8\u5f97\u5b9a\u5b9a\u5730\uff0c\u4e8e\u662f\uff0c\u8bb0\u5fc6\u5316\u641c\u7d22\u767b\u573a\u4e86\u2026\u2026\n\n\u7528 mem \u6570\u7ec4\u8bb0\u5f55\u72b6\u6001\uff0c\u53c2\u6570\u5206\u522b\u6709\uff1a\n\n1. now\uff0c\u73b0\u5728\u8d70\u5230\u4e86\u54ea\u91cc\uff01\n\n2. Left\uff0c\u8fd8\u6709\u591a\u5c11 SpellCard\uff01\n\n3. visit\uff0c\u904d\u5386\u4e86\u54ea\u4e9b\u70b9\uff01\uff08\u5f88\u663e\u7136\u904d\u5386\u4e86\u5df2\u7ecf\u904d\u5386\u7684\u70b9\u662f\u4e0d\u4f18\u7684\uff09\n\n\u4fe1\u5fc3\u6ee1\u6ee1\u5730\u8ba4\u4e3a\u627e\u5230\u4e86 DP \u5927\u4f6c\u4eec\u627e\u51fa\u7684\u9012\u63a8\u5f0f\uff0c\u5199\u5b8c\u4e86\u63d0\u4ea4\u2026\u2026\n\n[ \u5927\u4f6c\uff1a\u4f60\u5199\u7684 DP \u624d\u7528 map\uff01 ]\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN=50;\n\nstruct DE{int nxt,val;};\n\nint n,m,k;\nmap< int,map< int,map<long long,int > > > mem;\nmap< int,map< int,map<long long,bool> > > vis;\nvector<DE> graph[MAXN+5];\n\nint DFS(int now,int Left,long long visit)\n{\n\t/*\n\t\tprintf(\"%d %d\\n\",now,Left);\n\t\tsystem(\"pause\");\n\t*/\n\tif(vis[now][Left][visit]) return mem[now][Left][visit];\n\tif(now==n) return mem[now][Left][visit]=0;\n\tint cnt=INT_MAX>>1;\n\tfor(int i=0;i<graph[now].size();i++)\n\t{\n\t\tint rear=graph[now][i].nxt;\n\t\tint cost=graph[now][i].val;\n\t\tif(!(visit&(1<<(rear-1)))) cnt=min(cnt,cost+DFS(rear,Left,visit|(1<<(now-1))));\n\t}\n\tfor(int i=0;i<graph[now].size() && Left>0;i++)\n\t{\n\t\tint rear=graph[now][i].nxt;\n\t\tint cost=graph[now][i].val>>1;\n\t\tif(!(visit&(1<<(rear-1)))) cnt=min(cnt,cost+DFS(rear,Left-1,visit|(1<<(now-1))));\n\t}\n\tvis[now][Left][visit]=1;\n\treturn mem[now][Left][visit]=cnt;\n}\n\nint main()\n{\n\tscanf(\"%d %d %d\",&n,&m,&k);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a,b,t;\n\t\tscanf(\"%d %d %d\",&a,&b,&t);\n\t\tgraph[a].push_back(DE{b,t});\n\t\tgraph[b].push_back(DE{a,t});\n\t}\n\tprintf(\"%d\\n\",DFS(1,k,0));\n\treturn 0;\n}\n```\n\u84dd\u4e86\u4e00\u7247\uff0c\u4e0d\u8fc7\u8c22\u5929\u8c22\u5730\uff0c\u8fd8\u6709 50 \u5206\u2026\u2026\n\n\u65e2\u7136\u6700\u7ecf\u5178\u7684\u8bb0\u5fc6\u5316\u4f1a\u7206\u5185\u5b58\uff0c\u90a3\u5c31\u7528\u526a\u679d\u578b\u8bb0\u5fc6\u5316\u5427\n\n\u8fd8\u662f mem \uff0c\u4e0d\u8fc7\u53c2\u6570\u6ca1\u4e86\u8d85\u7ea7\u5927\u7684 visit\uff0c\u529f\u80fd\u4e5f\u53d8\u4e86\n\n$ mem[now][Left] $ \u8868\u793a\u641c\u5230\u76ee\u524d\u4e3a\u6b62\u8fd9\u4e2a\u72b6\u6001\u7684\u6700\u4f18\u89e3\n\n\u7136\u540e\u518d\u52a0\u4e0a\u4e2a\u6700\u4f18\u5316\u526a\u679d\uff0c\u4f60\u5c45\u7136\u7528 DFS \u8fc7\u4e86\u7d2b\u9898\u2026\u2026\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN=300;//\u6570\u7ec4\u8981\u5f00\u5927\u4e00\u70b9\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u4f1a RE\n\nstruct DE{int nxt,val;};\n\nint n,m,k,ans=INT_MAX;\nint mem[MAXN+5][MAXN+5];\nvector<DE> graph[MAXN+5];\n\nvoid DFS(int now,int Left,int step)\n{\n\tif(step>=mem[now][Left] || step>=ans) return;\n    //\u4e0d\u52a0 step>=ans \u7b2c\u4e09\u4e2a\u70b9\u4f1a\u7531 RE \u53d8 TLE\n\tmem[now][Left]=step;\n\tif(now==n) {ans=min(ans,step);return;}\n\tfor(int i=0;i<graph[now].size();i++)\n\t{\n\t\tint rear=graph[now][i].nxt;\n\t\tint cost=graph[now][i].val;\n\t\tDFS(rear,Left,step+cost);\n\t}\n\tfor(int i=0;i<graph[now].size() && Left>0;i++)\n\t{\n\t\tint rear=graph[now][i].nxt;\n\t\tint cost=graph[now][i].val>>1;\n\t\tDFS(rear,Left-1,step+cost);\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d %d %d\",&n,&m,&k);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a,b,t;\n\t\tscanf(\"%d %d %d\",&a,&b,&t);\n\t\tgraph[a].push_back(DE{b,t});\n\t\tgraph[b].push_back(DE{a,t});\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=0;j<=m;j++)\n\t\t\tmem[i][j]=INT_MAX;\n\tDFS(1,k,0);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\nFHY\uff1a\u201c\u4ec0\u4e48\u60c5\u51b5\u2026\u2026\u201d\n\n\u6211\uff1a\u201c\u8fd9\u53ef\u662f\u5e38\u89c4\u64cd\u4f5c\u3002\u7528 DFS \u8fc7\u5206\u5c42\u56fe\u7d2b\u9898\uff0c\u8981\u4e0d\u8981\u518d\u7ec3\u7ec3\uff1f\u201d\n\n[ \u672c\u4eba\u628a\u90a3\u9053\u9898\u7684\u7f16\u53f7\u7ed9\u5fd8\u4e86\uff0c\u8c8c\u4f3c\u662f\u4e2a\u84dd\u9898\uff0c\u4e5f\u662f\u5206\u5c42\u56fe\u4f46\u662f\u53ef\u4ee5\u7528 DFS \u6c34\u8fc7\u7684\u2026\u2026\u5982\u6709\u540c\u5b66\u627e\u5230\u4e86\u8bf7\u79c1\u4fe1\u8c22\u8c22 QAQ ]",
        "postTime": 1570091485,
        "uid": 54591,
        "name": "Seauy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "### \u9898\u76ee\u63cf\u8ff0\n\n\u201c\u6211\u8981\u6210\u4e3a\u9b54\u6cd5\u5c11\u5973\uff01\u201d\n\u201c\u90a3\u4e48\uff0c\u4ee5\u7075\u9b42\u4e3a\u4ee3\u4ef7\uff0c\u4f60\u5e0c\u671b\u5f97\u5230\u4ec0\u4e48\uff1f\u201d\n\u201c\u6211\u8981\u5c06\u6709\u5173\u9b54\u6cd5\u548c\u5947\u8ff9\u7684\u4e00\u5207\uff0c\u5c01\u5370\u4e8e\u5361\u7247\u4e4b\u4e2d\u201e\u201e\u201d\n\n\u5728\u8fd9\u4e2a\u613f\u671b\u88ab\u5b9e\u73b0\u4ee5\u540e\u7684\u4e16\u754c\u91cc\uff0c\u4eba\u4eec\u4eab\u53d7\u7740\u9b54\u6cd5\u5361\u7247\uff08$SpellCard$\uff0c\u53c8\u540d\u7b26\u5361\uff09\u5e26\u6765\u7684\u4fbf\u6377\u3002\n\n\u73b0\u5728\uff0c\u4e0d\u9700\u8981\u7acb\u4e0b\u5951\u7ea6\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9b54\u6cd5\u4e86\uff01\u4f60\u8fd8\u4e0d\u6765\u8bd5\u4e00\u8bd5\uff1f\n\u6bd4\u5982\uff0c\u6211\u4eec\u5728\u9b54\u6cd5\u767e\u79d1\u5168\u4e66$(Encyclopedia of Spells)$\u91cc\u7528\u201c$freeze$\u201d\u4f5c\u4e3a\u5173\u952e\u5b57\u6765\u67e5\u8be2\uff0c\u4f1a\u6709\u5f88\u591a\u6709\u8da3\u7684\u7ed3\u679c\u3002\n\u4f8b\u5982\uff0c\u6211\u4eec\u719f\u77e5\u7684Cirno\uff0c\u5979\u7684\u51b0\u51bb\u9b54\u6cd5\u5f53\u7136\u4f1a\u6709\u5bf9\u5e94\u7684 $SpellCard$\u4e86\u3002 \u5f53\u7136\uff0c\u66f4\u52a0\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u5c45\u7136\u6709\u51bb\u7ed3\u65f6\u95f4\u7684\u9b54\u6cd5$Cirno$\u7684\u51bb\u9752\u86d9\u6bd4\u8d77\u8fd9\u4e9b\u6765\u771f\u662f\u5c0f\u5deb\u89c1\u5927\u5deb\u4e86\u3002\n\u8fd9\u8bf4\u660e\u4e4b\u524d\u7684\u4e16\u754c\u4e2d\u6709\u5f88\u591a\u9b54\u6cd5\u5c11\u5973\u66fe\u8bb8\u4e0b\u63a7\u5236\u65f6\u95f4\u7684\u613f\u671b\uff0c\u6bd4\u5982 $Akemi Homura$ \u3001$Sakuya Izayoi$ \u3001\u201e\u201e\n\u5f53\u7136\uff0c\u5728\u672c\u9898\u4e2d\u6211\u4eec\u5e76\u4e0d\u662f\u8981\u6765\u7814\u7a76\u5386\u53f2\u7684\uff0c\u800c\u662f\u7814\u7a76\u9b54\u6cd5\u7684\u5e94\u7528\u3002\n\n\u6211\u4eec\u8003\u8651\u6700\u7b80\u5355\u7684\u65c5\u884c\u95ee\u9898\u5427\uff1a \u73b0\u5728\u8fd9\u4e2a\u5927\u9646\u4e0a\u6709$N$\u4e2a\u57ce\u5e02$M$\u6761\u53cc\u5411\u7684\u9053\u8def\u3002\u57ce\u5e02\u7f16\u53f7\u4e3a$1$ $\\sim$ $N$ \uff0c\u6211\u4eec\u5728$1$\u53f7\u57ce\u5e02\uff0c\u9700\u8981\u5230$N$\u53f7\u57ce\u5e02\uff0c\u600e\u6837\u624d\u80fd\u6700\u5feb\u5730\u5230\u8fbe\u5462\uff1f\n\u8fd9\u4e0d\u5c31\u662f\u6700\u77ed\u8def\u95ee\u9898\u5417\uff1f\u6211\u4eec\u90fd\u77e5\u9053\u53ef\u4ee5\u7528$Dijkstra$ \u3001$Bellman-Ford$ \u3001$Floyd-Warshall$\u7b49\u7b97\u6cd5\u6765\u89e3\u51b3\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u4e00\u5171\u6709$K$\u5f20\u53ef\u4ee5\u4f7f\u65f6\u95f4\u53d8\u6162$50$%\u7684$SpellCard$ \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u901a\u8fc7\u67d0\u6761\u8def\u5f84\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u4e00\u5f20\u5361\u7247\uff0c\u8fd9\u6837\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u4e00\u6761\u9053\u8def\u7684\u65f6\u95f4 \u5c31\u53ef\u4ee5\u51cf\u5c11\u5230\u539f\u5148\u7684\u4e00\u534a\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\n\n   1. \u5728\u4e00\u6761\u9053\u8def\u4e0a\u6700\u591a\u53ea\u80fd\u4f7f\u7528\u4e00\u5f20$SpellCard$\u3002\n   2. \u4f7f\u7528\u4e00\u5f20$SpellCard$\u53ea\u5728\u4e00\u6761\u9053\u8def\u4e0a\u8d77\u4f5c\u7528\u3002\n   3. \u4f60\u4e0d\u5fc5\u4f7f\u7528\u5b8c\u6240\u6709\u7684$SpellCard$\u3002\n\n\u7ed9\u5b9a\u4ee5\u4e0a\u7684\u4fe1\u606f\uff0c\u4f60\u7684\u4efb\u52a1\u662f\uff1a\u6c42\u51fa\u5728\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e0d\u8d85\u8fc7$K$\u5f20\u65f6\u95f4\u51cf\u901f\u7684$SpellCard$\u4e4b\u60c5\u5f62\u4e0b\uff0c\u4ece\u57ce\u5e02$1$\u5230\u57ce\u5e02$N$\u6700\u5c11\u9700\u8981\u591a\u957f\u65f6\u95f4\u3002\n### \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570$N$ , $M$ , $K$\u3002\n\u63a5\u4e0b\u6765$M$\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570$Ai$ , $Bi$ , $Timei$\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761$Ai$\u4e0e$Bi$\u4e4b\u95f4\u7684\u53cc\u5411\u9053\u8def\uff0c\u5728\u4e0d\u4f7f\u7528 $SpellCard$\u4e4b\u524d\u63d0\u4e0b \uff0c\u901a\u8fc7\u5b83\u9700\u8981$Timei$\u7684\u65f6\u95f4\u3002\n### \u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4ece$1$\u53f7\u57ce\u5e02\u5230$N$\u53f7\u57ce\u5e02\u7684\u6700\u5c0f\u7528\u65f6\u3002\n\n## \u9898\u89e3 :\n\u5206\u5c42\u56fe\u677f\u5b50\u9898 .\n\n\u6700\u8fd1\u5b66\u4e86\u4e0b\u5206\u5c42\u56fe\u6700\u77ed\u8def , \u5199\u7bc7\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b . \n\n\u5bf9\u4e8e\u5206\u5c42\u56fe\u6700\u77ed\u8def\u6709\u4e2a\u5f88\u660e\u663e\u7684\u4e1c\u897f\u5c31\u662f\u9898\u76ee\u4f1a\u5f3a\u5236\u7ed9\u4f60\u4e00\u4e9b\u6761\u4ef6\u8ba9\u4f60\u5728\u6b64\u57fa\u7840\u4e0a\u8dd1\u6700\u77ed\u8def .\n\n\u9898\u76ee\u7ed9\u6211\u4eec$k$\u6b21\u8fb9\u6743\u51cf\u534a\u7684\u673a\u4f1a , \u76f4\u63a5\u8dd1\u6700\u77ed\u8def\u4e0d\u592a\u597d\u641e , \u4e8e\u662f\u4e4e\u5206\u5c42\u56fe\u6700\u77ed\u8def\u6a2a\u7a7a\u51fa\u4e16 .\n\n\u9996\u5148\u6211\u4eec\u5bf9\u4e8e\u9898\u76ee\u7ed9\u6211\u4eec\u7684\u8fde\u8fb9\u8fd8\u662f\u6b63\u5e38\u8fde , \u4f46\u662f\u6211\u4eec\u8981\u628a\u8fde\u597d\u8fb9\u7684\u56fe\u590d\u5236$k$\u4efd , \u4e0a\u4e0b\u5e73\u884c\u653e\u7f6e, \u5bf9\u4e8e\u539f\u672c\u6709\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9 , \u6211\u4eec\u5728\u4e0d\u540c\u7684\u56fe\u4e4b\u95f4\u7ed9\u4ed6\u4eec\u8fde\u4e00\u6761\u8fb9\u6743\u51cf\u534a\u7684\u8fb9 . \u901a\u4fd7\u6765\u8bb2\u7684\u8bdd , \u5047\u5982\u672c\u6765$1$\u53f7\u8282\u70b9\u4e0e$2$\u53f7\u8282\u70b9\u4e4b\u95f4\u6709\u6743\u503c\u4e3a$w$\u7684\u8fde\u8fb9 , \u90a3\u4e48\u6211\u4eec\u5c31\u5728\u7b2c\u4e00\u5f20\u56fe\u7684$1$\u53f7\u8282\u70b9\u4e0e\u7b2c\u4e8c\u5f20\u56fe\u7684\u4e8c\u53f7\u8282\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u6743\u503c\u4e3a$\\frac{w}{2}$\u7684\u8fb9 , \u5982\u679c\u5728\u8dd1\u6700\u77ed\u8def\u7684\u8fc7\u7a0b\u4e2d\u8d70\u4e86\u8fd9\u6761\u8fb9 , \u90a3\u4e48\u5b9e\u9645\u4e0a\u4ee3\u8868\u7684\u610f\u4e49\u5c31\u662f\u6211\u4eec\u4ece$1$\u53f7\u8282\u70b9\u8d70\u5411$2$\u53f7\u8282\u70b9\u7684\u8fc7\u7a0b\u4e2d\u7528\u4e86\u4e00\u6b21\u8fb9\u6743\u51cf\u534a\u7684\u673a\u4f1a , \n\u633a\u663e\u7136\u7684...\u5427?\n\n\u90a3\u4e48\u6211\u4eec\u8d70\u5230\u7b2c\u4e8c\u5f20\u56fe\u4e4b\u540e\u56e0\u4e3a\u7b2c\u4e8c\u5f20\u56fe\u548c\u539f\u56fe\u662f\u4e00\u6837\u7684 , \u6240\u4ee5\u5e76\u4e0d\u5f71\u54cd\u6211\u4eec\u8dd1\u6700\u77ed\u8def\u7684\u6b63\u786e\u6027 . \u53ea\u662f\u5b83\u8fd8\u6709\u51cf\u534a\u8fb9\u6743\u7684\u673a\u4f1a\u53bb\u7b2c\u4e09\u5f20\u56fe , \u4e00\u5171$k$\u5f20\u56fe , $k$\u6b21\u8fb9\u6743\u51cf\u534a\u7684\u673a\u4f1a , \u56e0\u4e3a\u9898\u76ee\u6ca1\u6709\u5f3a\u884c\u8981\u6c42\u6211\u4eec\u7528\u5b8c$k$\u6b21\u673a\u4f1a , \u6240\u4ee5\u7b54\u6848\u5728\u6bcf\u5f20\u56fe\u7684$n$\u53f7\u8282\u70b9\u4e0a\u53d6$dis[n]$\u6700\u5c0f\u503c , \u6b63\u786e\u6027\u663e\u7136 . \n\n$code:$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=10000+5;\nconst int M=50000+5;\n#define Is(c) ('0'<=c && c<='9')\ninline void read(int &x){\n\tx=0;char c=getchar();\n\twhile(!Is(c)) c=getchar();\n\twhile(Is(c)) x=(x<<3)+(x<<1)+c-48,c=getchar();\n}\nint n,m,k,tot;\nint head[N*100],dis[N*100],vis[N*100];\nstruct Edge{\n\tint next,to,dis;\n}e[M*100];\ninline void add_edge(int from,int to,int dis){\n\te[++tot].next=head[from];\n\te[tot].to=to;\n\te[tot].dis=dis;\n\thead[from]=tot;\n}\nstruct cmp{\n\tint num,dis;\n\tbool operator < (const cmp&x)const{\n\t\treturn x.dis<dis;\n\t}\n};\npriority_queue<cmp> q;\nvoid dij(){\n\tmemset(dis,0x3f,sizeof(dis));\n\tq.push((cmp){1,0});dis[1]=0;\n\twhile(!q.empty()){\n\t\tint u=q.top().num;\n\t\tq.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(int i=head[u];i;i=e[i].next){\n\t\t\tint v=e[i].to;\n\t\t\tif(dis[v]>dis[u]+e[i].dis){\n\t\t\t\tdis[v]=dis[u]+e[i].dis;\n\t\t\t\tq.push((cmp){v,dis[v]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tread(n),read(m),read(k);\n\tif(k>=m){puts(\"0\");return 0;}\n\tint a,b,c;\n\tfor(int i=1;i<=m;i++){\n\t\tread(a),read(b),read(c);\n\t\tadd_edge(a,b,c);\n\t\tadd_edge(b,a,c);\n\t\tfor(int j=1;j<=k;j++){\n\t\t\tadd_edge(a+(j-1)*n,b+j*n,c>>1);\n\t\t\tadd_edge(b+(j-1)*n,a+j*n,c>>1);\n\t\t\tadd_edge(a+j*n,b+j*n,c);\n\t\t\tadd_edge(b+j*n,a+j*n,c);\n\t\t}\n\t}\n\tdij();\n\tint ans=2147483647;\n\tfor(int i=0;i<=k;i++) ans=min(ans,dis[n+i*n]);\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1565700197,
        "uid": 149601,
        "name": "Aicx_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "# bfs\u627e\u6700\u77ed\u8def\n\n\u5176\u5b9e\u53ef\u4ee5\u7528$dijkstra$\u6216\u8005$SPFA$(\u6211\u961f\u67d0\u5de8\u4f6c\u8fd8\u7528\u4e86\u5206\u5c42\u56fe\uff09\uff0c\u4f46\u6211\u61d2\u5f97\u505a\uff0c~~\u6211\u624d\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u662f\u4e0d\u4f1a\u505a\u7684\u5462~~\n\n\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u770b\u5230**\u6570\u636e\u8303\u56f4**\uff1a$1\u2264K\u2264N\u226450$\uff0c$M\u22641000$$\n\n\u6240\u4ee5\u80fd\u8f7b\u6613\u60f3\u5230\u601d\u8def\u6700\u7b80\u5355\u7684\u7b97\u6cd5\u5176\u5b9e\u662f**$bfs$+$dis$\u4f18\u5316\u786c\u627e\u6700\u77ed\u8def**\n\n\u5efa\u8fb9\u5c31\u4e0d\u8bf4\u4e86~~\u4f46\u8fd8\u662f\u4e0d\u8981\u4f5c\u6b7b\u7528\u90bb\u63a5\u77e9\u9635\u4e86~~\uff0c\u6211\u7528\u7684\u662f**\u524d\u5411\u661f**\u3002\n\n------------\n\n## \u81f3\u4e8ebfs\u4e2d\u7684\u7cbe\u9ad3\u4ee3\u7801\uff1a\n\n### \u4e00\u3001\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4$dis[i][j]$\u6765\u8bb0\u5fc6\u5316\n\n$i$\u8868\u793a\u8282\u70b9\u7f16\u53f7\n\n$j$\u8868\u793a\u5269\u4f59\u7684\u80fd\u4f7f\u7528\u7684$SpellCard$\u6570\u91cf\n\n### \u4e8c\u3001queue\u91cc\u5b58\u7684\u6570\u636e\n1. u\uff1a\u5f53\u524d\u8282\u70b9\n\n2. s\uff1a\u5f53\u524d\u8017\u8d39\u7684\u65f6\u95f4\n\n3. k\uff1a\u5f53\u524d\u5269\u4e0b\u7684\u80fd\u4f7f\u7528\u7684$SpellCard$\u6570\u91cf\n\n### \u4e09\u3001\u5206\u7c7b\u8ba8\u8bba\n\n\u6211\u4eec\u5c31\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n```cpp\n//to[i]\u8868\u793a\u8981\u53bb\u7684\u70b9\uff08v\uff09\n//w[i]\u8868\u793a\u8fd9\u6761\u8fb9\u7684\u6743\u503c\n\nif(now.s+w[i]<dis[to[i]][now.k])//\u4e0d\u4f7f\u7528SpellCard\n{\n\tdis[to[i]][now.k]=now.s+w[i];\n\tq.push((data){to[i],now.s+w[i],now.k});\n}\nif(now.k>0&&now.s+w[i]/2<dis[to[i]][now.k-1])//\u4f7f\u7528SpellCard\n{\n\tdis[to[i]][now.k-1]=now.s+w[i]/2;\n\tq.push((data){to[i],now.s+w[i]/2,now.k-1});\n}\n```\n\n------------\n\n\u6700\u540e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cstring>\n\n#define N 51\n#define M 2001\n\nusing namespace std;\n\nstruct data//queue\u91cc\u7684\u4e1c\u4e1c\n{\n    int u,s,k;\n}now;\n\nint n,m,k,cnt,head[N],to[M],nxt[M],w[M],dis[N][N];\n\nqueue<data>q;\n\nvoid adde(int u,int v,int wi)//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\n{\n    cnt++;\n    to[cnt]=v;\n    w[cnt]=wi;\n    nxt[cnt]=head[u];\n    head[u]=cnt;\n}\n\nint bfs()//bfs\u627e\u6700\u77ed\u8def\n{\n    memset(dis,127,sizeof(dis));//\u521d\u59cb\u5316\n    q.push((data){1,0,k});\n    dis[1][k]=0;\n    while(!q.empty())\n    {\n        now=q.front();\n        q.pop();\n        for(int i=head[now.u];i;i=nxt[i])//\u521a\u521a\u8bb2\u5230\u7684\u7cbe\u9ad3\n        {\n            if(now.s+w[i]<dis[to[i]][now.k])\n            {\n                dis[to[i]][now.k]=now.s+w[i];\n                q.push((data){to[i],now.s+w[i],now.k});\n            }\n            if(now.k>0&&now.s+w[i]/2<dis[to[i]][now.k-1])\n            {\n                dis[to[i]][now.k-1]=now.s+w[i]/2;\n                q.push((data){to[i],now.s+w[i]/2,now.k-1});\n            }\n        }\n    }\n    int minn=0x7fffffff;\n    for(int i=0;i<=k;i++)minn=min(minn,dis[n][i]);//\u627e\u6700\u5927\n    return minn;\n}\n\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<=m;i++)\n    {\n        int u,v,wi;\n        scanf(\"%d%d%d\",&u,&v,&wi);\n        adde(u,v,wi);//\u53cc\u5411\u5efa\u8fb9\n        adde(v,u,wi);\n    }\n    printf(\"%d\\n\",bfs());\n    return 0;\n}\n```",
        "postTime": 1547470752,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5176\u5b9e\u7528\u4e0d\u7740\u4ec0\u4e48\u5206\u5c42\u56fe\u6700\u77ed\u8def\uff0c\u76f4\u63a5\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u8dd1SPFA\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8bf4\u4e0b\u601d\u8def\uff1a\n\n\uff081\uff09\u5b58\u56fe\u53ef\u4ee5\u7528vector\uff0c\u4e5f\u53ef\u4ee5\u7528\u524d\u5411\u661f\u3002\n\n\uff082\uff09\u6211\u4eec\u5728\u8fdb\u884cSPFA\u7684\u65f6\u5019\uff0cVIS\u6570\u7ec4\u548cDIS\u6570\u7ec4\u90fd\u8981\u7528\u4e8c\u7ef4\u8fdb\u884c\u50a8\u5b58\u3002\n\n\uff083\uff09\u6211\u4eec\u6700\u540e\u8ba1\u7b97\u6700\u77ed\u8def\u7684\u65f6\u5019\uff0c\u8981\u4ece\u96f6\u5230K\u8fdb\u884c\u4e00\u6b21\u53d6\u6700\u5c0f\u503c\u3002\n\n\u76f8\u4fe1\u5927\u5bb6\u6ce8\u610f\u4ee5\u4e0a\u4e09\u70b9\uff0c\u5c31\u5927\u591a\u6570\u4eba\u90fd\u4e0d\u4f1a\u9519\u4e86\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct data\n{\n    int x,y;\n};\nstruct data1\n{\n    int x,y;\n};\nvector<data> a[51];\nint n,m,k,x,y,z,vis[51][51];\ndouble dis[51][51],minn;\nqueue<data1> q;\nint main()\n{\n    memset(dis,0x7f7f7f7f,sizeof(dis));\n    minn=99999999;\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        a[x].push_back((data)\n        {\n            y,z\n        });\n        a[y].push_back((data)\n        {\n            x,z\n        });\n    }\n    q.push((data1)\n    {\n        1,k\n    });\n    vis[1][k]=1;\n    dis[1][k]=0;\n    while(!q.empty())\n    {\n        data1 u=q.front();\n        q.pop();\n        vis[u.x][u.y]=0;\n        for(int i=0;i<a[u.x].size();i++)\n        {\n            int v=a[u.x][i].x;\n            int d=a[u.x][i].y;\n            if(u.y>0)\n            {\n                if(dis[v][u.y-1]>dis[u.x][u.y]+d*0.5)\n                {\n                    dis[v][u.y-1]=dis[u.x][u.y]+d*0.5;\n                    if(!vis[v][u.y-1])\n                    {\n                        vis[v][u.y-1]=1;\n                        q.push((data1)\n                        {\n                            v,u.y-1\n                        });\n                    }\n                }\n                if(dis[v][u.y]>dis[u.x][u.y]+d)\n                {\n                    dis[v][u.y]=dis[u.x][u.y]+d;\n                    if(!vis[v][u.y])\n                    {\n                        vis[v][u.y]=1;\n                        q.push((data1)\n                        {\n                            v,u.y\n                        });\n                    }\n                }\n            }else{\n                if(dis[v][u.y]>dis[u.x][u.y]+d)\n                {\n                    dis[v][u.y]=dis[u.x][u.y]+d;\n                    if(!vis[v][u.y])\n                    {\n                        vis[v][u.y]=1;\n                        q.push((data1)\n                        {\n                            v,u.y\n                        });\n                    }\n                }\n            }\n        }\n    }\n    for(int i=0;i<=k;i++)\n    {\n        minn=min(minn,dis[n][i]);\n    }\n    cout<<minn<<endl;\n    return 0;\n}\n```",
        "postTime": 1547469538,
        "uid": 103334,
        "name": "Honor\u8a89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u9898\u89e3\u91cc\u9762\u7adf\u7136\u6ca1\u6709wqs\u4e8c\u5206\uff1f\uff01  \n\u7b80\u76f4\u4e0d\u53ef\u9976\u6055\u3002  \n~~\u8bdd\u8bf4wqs\u4e8c\u5206\u91cc\u9762\u7684\u6536\u7a0e\u601d\u60f3\u548c\u8fd9\u9898\u7684\u4ee3\u4ef7\u6709\u70b9\u50cf\u5462~~  \n### \u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u4f60\u6bcf\u7528\u4e00\u5f20\u5361\uff0c \u90fd\u8981\u4ed8\u51fa\u4e00\u4e2a\u989d\u5916\u4ee3\u4ef7\n## \u4f46\u662f\u6211\u4eec\u600e\u4e48\u77e5\u9053\u8fd9\u4e2a\u4ee3\u4ef7\u662f\u591a\u5c11\u5462\uff1f\nYY\u4e00\u4e0b\uff1a\n- \u5047\u5982\u4ee3\u4ef7\u5c0f\u4e86\uff0c \u90a3\u4e48\u80af\u5b9a\u7528\u7684\u5361\u7247\u6570\u5c31\u591a\n- \u5047\u5982\u4ee3\u4ef7\u5927\u4e86\uff0c \u90a3\u4e48\u80af\u5b9a\u7528\u7684\u5361\u7247\u6570\u5c31\u5c11  \n### \u6240\u4ee5...\n## \u6211\u4eec\u7684\u8fd9\u4e2a\u989d\u5916\u4ee3\u4ef7\u9700\u8981\u8ba9\u6211\u4eec\u7528\u7684\u5361\u7247\u6570\u521a\u597d\u662f$K$\u3002\t\t\n\u90a3\u4e48\u5f88\u597d, \u6211\u4eec\u53ea\u9700\u8981**\u4e8c\u5206\u67e5\u627e\u8fd9\u4e2a\u4ee3\u4ef7\u5c31\u884c\u4e86**.  \n\u7b80\u5355\u5427?\u81f3\u5c11\u6211\u89c9\u5f97\u6bd4\u5206\u5c42\u56fe\u597d\u5199. \n\n### \u8fd8\u6709\u4e00\u4e9b\u5c0f\u95ee\u9898...  \n**\u6bd4\u5982\u6211\u548b\u7edf\u8ba1\u6211\u4e00\u8def\u4e0a\u7528\u4e86\u591a\u5c11\u6b21\u5361\u7247\u5462?**\t    \n\n[P1144\u6700\u77ed\u8def\u8ba1\u6570](https://www.luogu.org/problem/P1144)  \n\u65b9\u6cd5\u662f\u4e00\u6837\u7684\u54c8.\n\n\u4e0a\u4ee3\u7801, \u5177\u4f53\u7684\u7ec6\u8282\u6211\u52a0\u4e86\u6ce8\u91ca.  \n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n\nusing namespace std;\n\nconst int MAXN = 55;\nconst int MAXM = 2019;\n\nint head[MAXN], to[MAXM << 1], nxt[MAXM << 1], en, c[MAXM << 1], mark[MAXM << 1];\nint n, m, k, l, r, mid, ans;\nint dis[MAXN], vis[MAXN], cnt[MAXN];\n\nvoid addedge(int u, int v, int w, int cc){\n\tto[++en] = v;\n\tnxt[en] = head[u];\n\thead[u] = en;\n\tc[en] = w;\n\tmark[en] = cc;\n\treturn;\n}//mark\u6570\u7ec4\u7528\u4ee5\u6807\u8bb0\u8fd9\u6761\u8def\u662f\u5426\u4f7f\u7528\u4e86\u5361\u7247.\nstruct Node{\n\tint id, dis, cnt;\n\tbool operator < (const Node &node) const {\n\t\tif(dis == node.dis) return node.cnt < cnt;\n\t\treturn node.dis < dis; \n\t}\n}t;\n\n\nbool check(int cost){\t\t//Dijkstra\u6c42\u6700\u77ed\u8def\n\tpriority_queue <Node> q;\n\tmemset(dis, 0x3f, sizeof dis);\n\tmemset(cnt, 0x3f, sizeof cnt);\n\tmemset(vis, false, sizeof vis);\n\t\n\tcnt[1] = dis[1] = 0;\n\tt.id = 1, t.cnt = t.dis = 0;\n\tq.push(t);\n\tNode fr;int u, v, w;\n\twhile(!q.empty()){\n\t\tfr = q.top();\n\t\tq.pop();\n\t\tu = fr.id;\n\t\tif(vis[u]) continue;\n\t\tvis[u] = true;\n\t\tfor(int i = head[u]; i; i = nxt[i]){\n\t\t\tv = to[i], w = c[i];\n\t\t\tif(mark[i]) w += cost;\t\t//\u5047\u5982\u7528\u4e86\u5361\u7247,\u9700\u8981\u4ed8\u51fa\u989d\u5916\u8d39\u7528\n\t\t\tif(dis[v] > dis[u] + w){\n\t\t\t\tdis[v] = dis[u] + w;\n\t\t\t\tcnt[v] = cnt[u] + mark[i];\t//\u7edf\u8ba1cnt\u7684\u65b9\u6cd5\u795e\u4f3cP1144\n\t\t\t\tt.id = v, t.cnt = cnt[v], t.dis = dis[v];\n\t\t\t\tq.push(t);\n\t\t\t}else if(dis[v] == dis[u] + w && cnt[v] < cnt[u] + mark[i]){\n\t\t\t\tcnt[v] = cnt[u] + mark[i];\n\t\t\t\tt.id = v, t.dis = dis[v], t.cnt = cnt[v];\n\t\t\t\tq.push(t);\n\t\t\t}\n\t\t}\n\t}\n\treturn (cnt[n] <= k);\n}\n\nint main(){\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tint u, v, w;\n\tfor(int i = 0; i < m; ++i){\n\t\tscanf(\"%d%d%d\", &u, &v, &w);\n\t\taddedge(u, v, w, 0);\n\t\taddedge(v, u, w, 0);\n\t\taddedge(u, v, w>>1, 1);\t\t//\u6240\u6709\u8fb9\u90fd\u52a0\u4e0a, \u5305\u62ec\u7528\u4e86\u5361\u7247\u7684\n\t\taddedge(v, u, w>>1, 1);\t\t//\u8bb0\u5f97\u53cc\u5411\u8fb9, \u6570\u7ec4\u5f004\u500d.\n\t}\n\t\n\tl = 2, r = 2000;\n\twhile(l <= r){\t\t\t\t//\u4e8c\u5206\u67e5\u627e\u989d\u5916\u82b1\u8d39\n\t\tmid = (l+r)>>1;\n\t\tif(check(mid)){\n\t\t\tans = mid;\n\t\t\tr = mid-1;\n\t\t}else l = mid+1;\n\t}\n\tcheck(ans);\n\treturn ((printf(\"%d\\n\", dis[n]-ans*cnt[n])) &0);\t//\u8f93\u51fa\u7684\u65f6\u5019\u8bb0\u5f97\u628a\u989d\u5916\u82b1\u8d39\u53bb\u6389\n}\n```\n\n### A\u5b8c\u8fd9\u9898\u53ef\u4ee5\u53bbA[\u6539\u9020\u8def](https://www.luogu.org/problem/P2939)\n\u53ef\u4ee5\u7528wqs\u4e8c\u5206\u7684\n\u9898\u8fd8\u6709[CF739E Gosha is Hunting](https://www.luogu.org/problem/CF739E), [P4767 \u90ae\u5c40](https://www.luogu.org/problem/P4767).",
        "postTime": 1573525397,
        "uid": 140377,
        "name": "\u7ef4\u8fed\u751f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u6548\u679c\u66f4\u4f73](https://www.luogu.org/blog/oldherd/solution-p4822)\n### \u5e94\u7528\u5206\u5c42\u56fe\u6700\u77ed\u8def\u89e3\u51b3\n\u5206\u5c42\u56fe\u6700\u77ed\u8def\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5c06\u70b9\u5206\u6210\u8bb8\u591a\u5c42\u3002\u7528\u6765\u8868\u793a\u4e0d\u540c\u72b6\u6001\u3002\u4f8b\u5982\uff0c\u5728\u672c\u9898\u76ee\u4e2d\u7b2cx\u5c42\u4ee3\u8868\u76ee\u524d\u7528\u4e86x\u5f20\u5361\u7684\u60c5\u51b5\u3002\u5728\u8fd9\u70b9\u4e0a\u6709\u70b9\u7c7b\u4f3c\u4e8edp\u3002  \n\u5728\u5c42\u4e2d\u548c\u5c42\u95f4\u5206\u522b\u5b9a\u4e49\u597d\u8f6c\u79fb\u5173\u7cfb\uff0c\u4f8b\u5982\u672c\u9898\u4e2d\u540c\u4e00\u5c42\u4e2d\u7684\u8f6c\u79fb\u8def\u5f84\u957f\u5ea6\u7b49\u4e8e\u539f\u56fe\uff0c\u5411\u4e0a\u4e00\u5c42\u8f6c\u79fb\u8def\u5f84\u957f\u5ea6\u7b49\u4e8e\u539f\u957f\u7684\u4e8c\u5206\u4e4b\u4e00\u3002  \n\u81f3\u4e8e\u8fd9\u4e2a\u8f6c\u79fb\u7684\u5b9e\u73b0\u6709\u4e24\u79cd\u3002\u4e00\u79cd\u662f\u628a\u8ddd\u79bb\u5f00\u6210d[maxn][num_card]\u7684\u5f62\u5f0f\uff0c\u50cf\u8dd1dp\u4e00\u6837\u8dd1\uff0c\u5c06\u8f6c\u79fb\u5185\u7f6e\u5728dij\u4e2d\u3002\u53e6\u4e00\u79cd\u662f\u628ad\u5efa\u6210\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u5faa\u73af\u5b58\u8fb9\uff08\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u8f6c\u6362\u5173\u7cfb\u5efa\u8fb9\uff09\uff0c\u7136\u540e\u8dd1\u666e\u901a\u7684dij\u5373\u53ef\u3002\n\u4e0b\u9762\u7ed9\u51fa\u7684\u4ee3\u7801\u662f\u7b2c\u4e00\u79cd\u5f62\u5f0f\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#define pii pair<int, int>\n#define pip pair<int, pii>\n\nusing namespace std;\n\nint head[10010], ver[100010], wei[100010], nex[100010], d[10010][30], vis[10010][30], n, tot, k;\n\ninline void add(int u, int v, int w) {\n\tver[tot] = v; wei[tot] = w; nex[tot] = head[u]; head[u] = tot++;\n}\n\npriority_queue<pip> q;\n\nvoid dijkstra() {\n\tmemset(d, -1, sizeof(d)); memset(vis, 0, sizeof(vis));\n\td[1][0] = 0; q.push(make_pair(0, make_pair(1, 0)));\n\twhile(!q.empty()) {\n\t\tint cur = q.top().second.first, s = q.top().second.second; q.pop();\n\t\tif(vis[cur][s]) continue;\n\t\tvis[cur][s] = 1;\n\t\tfor(int i = head[cur]; i != -1; i = nex[i]) {\n\t\t\tif(d[ver[i]][s] == -1 || d[ver[i]][s] > d[cur][s] + wei[i]) {\n\t\t\t\td[ver[i]][s] = d[cur][s] + wei[i];\n\t\t\t\tq.push(make_pair(-d[ver[i]][s], make_pair(ver[i], s)));\n\t\t\t}\n\t\t\tif(s < k && (d[ver[i]][s+1] == -1 || d[ver[i]][s+1] > d[cur][s] + wei[i] / 2)) {\n\t\t\t\td[ver[i]][s+1] = d[cur][s] + wei[i] / 2;\n\t\t\t\tq.push(make_pair(-d[ver[i]][s+1], make_pair(ver[i], s+1)));\n\t\t\t}\n\t\t}\n\t}\n}\n\ninline int mind(int i, int j) {\n\tif(i == -1) return j;\n\tif(j == -1) return i;\n\treturn i < j ? i : j;\n}\n\nint main() {\n\tint m, u, v, w;\n\tmemset(head, -1, sizeof(head));\n\tscanf(\"%d %d %d\", &n, &m, &k);\n\twhile(m--) {\n\t\tscanf(\"%d %d %d\", &u, & v, &w);\n\t\tadd(u, v, w); add(v, u, w);\n\t}\n\tdijkstra();\n\tint ans = -1;\n\tfor(int i = 0; i <= k; i++) {\n\t\tans = mind(ans, d[n][i]);\n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```\n\n\u6b22\u8fce\u4e92\u76f8\u5173\u6ce8(\u7136\u800c\u5728oi\u754c\u849f\u84bb\u7684\u5708\u5f88\u5c0f)\u3002  \n\u6700\u540e\u5b89\u5229\u4e00\u4e0b[\u849f\u84bb\u7684\u6d1b\u8c37\u535a\u5ba2](https://www.luogu.org/blog/oldherd/)",
        "postTime": 1555239763,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "```\n\u8fd9\u9053\u9898\u5176\u5b9e\u4e0d\u9700\u8981\u5206\u5c42\u56fe\uff0c\u5b83\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4e8c\u7ef4bfs\u3002\n```\n```\n#include<iostream>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nint n,m,k,x,y,z,f[51][51],ans=10000000;\nvector<int> u[51],v[51];\nbool r[51][51];\nvoid bfs(){\n\tqueue<int> p,q;\n\tp.push(1);\n\tq.push(0);\n\twhile(!p.empty()){\n\t\tx=p.front();\n\t\ty=q.front();\n\t\tp.pop();\n\t\tq.pop();\n\t\tr[x][y]=0;\n\t\tfor(int i=0;i<u[x].size();i++){\n\t\t\tif(f[u[x][i]][y]>f[x][y]+v[x][i]){//\u4e0d\u4f7f\u7528\u3010\u7b26\u5361\u3011\n\t\t\t\tf[u[x][i]][y]=f[x][y]+v[x][i];\n\t\t\t\tif(r[u[x][i]][y]==0){//\u526a\u679d\n\t\t\t\t\tp.push(u[x][i]);\n\t\t\t\t\tq.push(y);\n\t\t\t\t\tr[u[x][i]][y]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(y<k){//\u5224\u65ad\u3010\u7b26\u5361\u3011\u662f\u5426\u7528\u5b8c\n\t\t\t\tif(f[u[x][i]][y+1]>f[x][y]+v[x][i]/2){//\u82e5\u6ca1\u6709\u7528\u5b8c\uff0c\u4f7f\u7528\u4e00\u5f20\u3010\u7b26\u5361\u3011\n\t\t\t\t\tf[u[x][i]][y+1]=f[x][y]+v[x][i]/2;\n\t\t\t\t\tif(r[u[x][i]][y+1]==0){//\u526a\u679d\n\t\t\t\t\t\tp.push(u[x][i]);\n\t\t\t\t\t\tq.push(y+1);\n\t\t\t\t\t\tr[u[x][i]][y+1]=1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=1;i<=n;i++)for(int j=0;j<=k;j++)f[i][j]=10000000;//\u521d\u59cb\u5316bfs\u6570\u7ec4\u3002\n\tf[1][0]=0;\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tu[x].push_back(y);\n\t\tv[x].push_back(z);\n\t\tu[y].push_back(x);\n\t\tv[y].push_back(z);\n\t}//vector\u5efa\u56fe\uff08\u65e0\u5411\u56fe\uff09\n\tbfs();//\u7206\u641c\n\tfor(int i=0;i<=k;i++)ans=min(ans,f[n][i]);//\u4f7f\u7528\u3010\u7b26\u5361\u3011\u7684\u4e2a\u6570\n\tprintf(\"%d\",ans);//\u8f93\u51fa\n}\n```",
        "postTime": 1547470440,
        "uid": 114149,
        "name": "suyiheng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "~~\u53ef\u80fd\u662f\u6211\u8111\u56de\u8def\u6bd4\u8f83\u6e05\u5947~~\uff0c\u60f3\u5230DP\u6765\u89e3\u8fd9\u9053\u9898\u3002\n\n### F[i][j]\u8868\u793a\u5230\u7b2ci\u4e2a\u70b9\u7528\u4e86j\u4e2a\u9b54\u6cd5\u5361\u7247\u65f6\u7684\u6700\u4f18\u89e3\u3002\n\n\u6700\u77ed\u8def\u8003\u8651\u7528\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u6765\u66f4\u65b0\uff0c\u76f4\u63a5\u7528\u524d\u9762\u72b6\u6001\u5f80\u540e\u66f4\u65b0\u5373\u53ef\n\n\u4e0d\u7528\u5361\u7247\n\nif(f[i][k]+mp[i][j]<f[j][k]){\n\nf[j][k]=f[i][k]+mp[i][j];\n\n}\n               \n\u7528\u5361\u7247\n\nif(k)\n\nif(f[i][k-1]+mp[i][j]/2<f[j][k]&&f[i][k-1]!=0x3f3f3f3f){\n\nf[j][k]=f[i][k-1]+mp[i][j]/2;\n\n}\n\n**\u5916\u5c42\u5faa\u73afN\u904d\u5373\u53ef\uff0c\u56e0\u4e3a\u76f4\u63a5\u4ece\u5f53\u524d\u70b9\u66f4\u65b0\u53ef\u80fd\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u7531\u5176\u4ed6\u70b9\u8ddf\u65b0k\u6b21\u540e\u518d\u8d70\u8fd9\u4e2a\u70b9\u624d\u662f\u6700\u4f18\u7684\u3002**\n\n\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rg register\ninline int read(){\n    rg char ch=getchar();\n    rg int x=0,f=0;\n    while(!isdigit(ch)) f|=(ch=='-'),ch=getchar();\n    while(isdigit(ch)) x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    return f?-x:x;\n}\nint n,m,f[55][1010],mp[55][55],ans=0x3f3f3f3f;\nint main(){\n    n=read();int k=read();m=read();\n    memset(mp,0x3f,sizeof mp);\n    memset(f,0x3f,sizeof f);\n    f[1][0]=0;\n    int cnt=1;\n\tfor(int x,y,z,i=1;i<=k;++i){\n\t\tx=read(),y=read(),z=read();\n\t\tmp[x][y]=mp[y][x]=z;\n\t}\n    for(int l=1;l<=n;++l)\n    for(int i=1;i<=n;++i){\n        for(int j=1;j<=n;++j){\n            if(j==i) continue;\n            for(int k=0;k<=m;++k){\n                if(f[i][k]+mp[i][j]<f[j][k]){\n                    f[j][k]=f[i][k]+mp[i][j];\n                }\n                if(k)\n                if(f[i][k-1]+mp[i][j]/2<f[j][k]&&f[i][k-1]!=0x3f3f3f3f){\n                    f[j][k]=f[i][k-1]+mp[i][j]/2;\n                }\n            }\n        }\n    }\n    for(int i=0;i<=m;++i) if(f[n][i]<=ans) ans=f[n][i],st=i;\n    cout<<ans<<endl;\n    return 0;\n}\n```\n",
        "postTime": 1557490588,
        "uid": 121618,
        "name": "Accoty_AM",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011DP\u89e3\u6cd5"
    },
    {
        "content": "# \u5e7f\u641c\u4e0d\u5c31\u597d\u4e86\u5417\uff0c\u4e3a\u4ec0\u4e48\u8981\u7528spfa\u5462\uff1f\uff1f\uff1f\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u6ca1\u90a3\u4e48\u590d\u6742\uff0c\u4e00\u4e2a\u8bb0\u5fc6\u5316\u5e7f\u641c\u76f4\u63a5\u641e\u5b9a\uff0c\u5176\u5b9e\u975e\u5e38\u7b80\u5355\u3002\n\n\u7528\u4e00\u4e2a$struct$\u91cc\u9762\uff0c\u5b58$u$\uff1a\u5f53\u524d\u7684\u70b9\uff0c$s$:\u5f53\u524d\u5269\u4e0b\u7684$spellcard$\uff0c$ans$:\u5f53\u524d\u7684\u65f6\u95f4\u3002\n\n\u7136\u540e\u8fd9\u91cc\u6700\u597d\u52a0\u4e00\u4e2a\u8bb0\u5fc6\u5316$dis$\u4e24\u7ef4\u6570\u7ec4\uff0c\u7b2c\u4e00\u7ef4\u5b58\u5f53\u524d\u7684$to[$i$]$\uff0c\u7b2c\u4e8c\u7ef4\u5b58\u5f53\u524d$spellcard$\u7684\u4e2a\u6570\uff0c\u53ef\u4ee5\u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u8fd9\u91cc\u63d0\u9192\u4e00\u4e0b\u5927\u5bb6\uff0c\n\n\u5343\u4e07\u4e0d\u8981\u7528$priority$_$queue$\uff01\uff01\uff01\n\n\u5343\u4e07\u4e0d\u8981\u7528$priority$_$queue$\uff01\uff01\uff01\n\n\u5343\u4e07\u4e0d\u8981\u7528$priority$_$queue$\uff01\uff01\uff01\n\n\u5c31\u662f\u56e0\u4e3a\u7528\u4e86\u8fd9\u4e2a\u5751\u4eba\u7684$priority$_$queue$\uff0c\u6211\u76f4\u63a5$T$90 \u3002\u3002\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1010;\nint n,m,k,cnt=0;\nint to[N<<1];\nint nxt[N<<1];\nint w[N<<1];\nint head[N<<1];\nint dis[N][51];\nstruct edge\n{\n    int u,s,ans;\n};\nvoid add(int u,int v,int c)\n{\n    to[++cnt]=v;\n    nxt[cnt]=head[u];\n    w[cnt]=c;\n    head[u]=cnt;\n}\nvoid bfs()\n{\n    queue<edge>q;\t\n    q.push((edge){1,k,0});\n    memset(dis,0x7f,sizeof(dis));\n    dis[1][k]=0;\n    while(!q.empty())\n    {\n        edge e=q.front();\n        q.pop();\n        for(register int i=head[e.u];i;i=nxt[i])\n        {\n            if(e.s>0&&e.ans+w[i]/2<dis[to[i]][e.s-1])\n            {\n                q.push((edge){to[i],e.s-1,e.ans+w[i]/2});\n                dis[to[i]][e.s-1]=e.ans+w[i]/2;\n            }\n            if(e.ans+w[i]<dis[to[i]][e.s])\n            {\n                q.push((edge){to[i],e.s,e.ans+w[i]});\n                dis[to[i]][e.s]=e.ans+w[i];\n            }\n        }\n    }\n    int minn=0x7fffffff;\n    for(register int i=0;i<=k;i++)minn=min(minn,dis[n][i]);\n    printf(\"%d\",minn);\n}\nint read()\n{\n    char ch=getchar();\n    int x=0,f=1;\n    while(ch<'0'||ch>'9')\n    {\n        if(ch=='-')f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x*f;\n}\nint main()\n{\n    n=read();m=read();k=read();\n    int a,b,c;\n    for(register int i=1;i<=m;i++)\n    {\n        a=read();b=read();c=read();\n        add(a,b,c);add(b,a,c);\n    }\n    bfs();\n    return 0; \n}\n/*\n4 4 1 \n1 2 4 \n4 2 6 \n1 3 8 \n3 4 8 \n*/\n```",
        "postTime": 1547469563,
        "uid": 101573,
        "name": "ShuraEye",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "p2939\np4568\n\n\u8fd9\u9053\u9898\u5c31\u662f\u8dd1\u6700\u77ed\u8def\u65f6\n$dp$\u4e00\u4e0b\n\n$dis[i][j]$\u8868\u793a\u5230\u7b2ci\u4e2a\u70b9\u7528\u4e86j\u6b21\u7684\u6700\u77ed\u8def\u7a0b\n\n$dis[i][j]=min(dis[pre_i][j]+edge[i].dis,dis[pre_i][j-1]+edge[i].dis/2)$\n\n\u6807\u7b7e\u6ca1$dp$\u6709\u5931\u516c\u6b63\n\n\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<bits/stdc++.h>\n#include<queue>\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nconst int N=1000+10;\nstruct E{\n\tint to,dis,next;\n}edge[N<<2];\nstruct node{\n\tint dis,pos,cnt;\n\tbool operator <(const node &x)const{return x.dis<dis;}\n};\nint n,m,k,cnt,head[N],dis[N][N];bool vis[N];\ninline void add(int u,int v,int d){\n\tedge[++cnt].to=v;\n\tedge[cnt].dis=d;\n\tedge[cnt].next=head[u];\n\thead[u]=cnt;\n}\npriority_queue<node>q;\ninline void dijkstra(){\n\tdis[1][0]=0;\n\tq.push((node){0,1,0});\n\twhile(!q.empty()){\n\t\tnode tmp=q.top();q.pop();\n\t\tint x=tmp.pos,l=tmp.cnt;\n\t\tfor(int i=head[x];i;i=edge[i].next){\n\t\t\tint y=edge[i].to;\n\t\t\tif(l<k&&dis[x][l]+edge[i].dis/2<dis[y][l+1]){\n\t\t\t\tdis[y][l+1]=dis[x][l]+edge[i].dis/2;\n\t\t\t\tq.push((node){dis[y][l+1],y,l+1});\n\t\t\t}\n\t\t\tif(l<=k&&dis[x][l]+edge[i].dis<dis[y][l]){\n\t\t\t\tdis[y][l]=dis[x][l]+edge[i].dis;\n\t\t\t\tq.push((node){dis[y][l],y,l});\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tcin>>n>>m>>k;int u,v,d;\n\tmemset(dis,0x3f,sizeof(dis));\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>u>>v>>d;\n\t\tadd(u,v,d);add(v,u,d);\n\t}\n\tdijkstra();\n\tint ans=100000;\n\tfor(int i=0;i<=k;i++)ans=min(ans,dis[n][i]);\n\tcout<<ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1579344085,
        "uid": 235657,
        "name": "hwx12233",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "## \u3010\u601d\u8def\u3011\n\u5206\u5c42\u56fe + dijkstra    \n\u5206\u5c42\u56fe\u677f\u5b50\u9898     \n\u5982\u679c\u60f3\u4e86\u89e3\u5206\u5c42\u56fe\u8bf7\u770b\u8fd9\u91cc    \n[\u4e86\u89e3\u5206\u5c42\u56fe](https://www.cnblogs.com/acioi/p/11716483.html)     \n\n### \u3010\u9898\u76ee\u5927\u610f\u3011\n\u4ece1\u5230n\u8dd1    \n\u5176\u4e2d\u53ef\u4ee5\u8ba9k\u6761\u8def\u7684\u8017\u65f6\u53d8\u4e3a\u539f\u6765\u7684\u4e00\u534a    \n\u6c42\u6700\u5c0f\u8017\u65f6    \n\n### \u3010\u9898\u76ee\u5206\u6790\u3011\n\u5982\u679c\u4f60\u4e0d\u662f\u7b2c\u4e00\u6b21\u505a\u6700\u77ed\u8def\u7684\u8bdd   \n\u90a3\u770b\u5230\u8fd9k\u6761\u51cf\u534a\u7684\u8def    \n\u4f1a\u60c5\u4e0d\u81ea\u7981\u7684\u8054\u60f3\u5230k\u6761\u514d\u8d39\u7684\u8def   \n\u4ece\u800c\u60f3\u5230\u5206\u5c42\u56fe\u8fd9\u4e2a\u7b80\u5355\u7684\u4e1c\u897f    \n\u672c\u8d28\u4e0aK\u6761\u514d\u8d39\u7684\u8def\u548ck\u8c03\u76ae\u51cf\u534a\u7684\u8def\u5904\u7406\u65b9\u5f0f\u662f\u4e00\u4e2a\u6837\u7684   \n\u6240\u4ee5\u53ef\u4ee5\u7528\u5206\u5c42\u56fe\u505a    \n\n### \u3010\u6838\u5fc3\u601d\u8def\u3011\n\u5c06\u9898\u76ee\u7ed9\u51fa\u7684\u56fe\u8d4b\u503ck\u904d    \n\u7136\u540e\u5c06\u4e24\u4e2a\u56fe\u4e4b\u95f4\u7684\u8def\u5f84\u90fd\u6807\u4e3a\u539f\u6765\u8ddd\u79bb\u7684\u4e00\u534a    \n\u56e0\u4e3a\u90a3\u6761\u8def\u88ab\u4f7f\u7528\u4e86\u9b54\u6cd5    \n\u7136\u540e\u5c31\u53ef\u4ee5\u88f8\u7740\u8dd1dijkstra\u4e86    \n\u6bd4\u8f83\u75280\u6b21\u9b54\u6cd5\u5230\u7528k\u6b21\u9b54\u6cd5\u5230\u8fbe\u7684\u7ec8\u70b9\u91cc\u9762   \n\u54ea\u4e00\u4e2a\u6d88\u8017\u7684\u65f6\u95f4\u6700\u5c11\u5c31\u662f\u7b54\u6848\u4e86     \n\n### \u3010\u6ce8\u610f\u3011\n\u505a\u5206\u5c42\u56fe\u9898\u76ee\u7684\u65f6\u5019    \n\u5fc5\u987b\u8981\u5bf9\u7a7a\u95f4\u8303\u56f4\u4e25\u683c\u628a\u5173    \n\u8981\u4e0d\u7136\u5f88\u5bb9\u6613\u51fa\u95ee\u9898     \n\u6e29\u99a8\u63d0\u793a\uff1a\u5982\u679c\u4e0d\u77e5\u9053\u5f00\u591a\u5c11\uff0c\u90a3\u5c31\u80fd\u5f00\u591a\u5927\u5c31\u5f00\u591a\u5927     \n\n## \u3010\u5b8c\u6574\u4ee3\u7801\u3011\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring> \nusing namespace std;\nstruct point\n{\n\tint w,x;\n\tbool operator < (const point & xx)const \n\t{\n\t\treturn xx.w < w;\n\t}\n};\nconst int Max = 100005;\nstruct node\n{\n\tint y,ne,z;\n}a[20 * Max];\nint sum = 0;int head[Max];\n\nvoid add(int x,int y,int z)\n{\n\ta[++ sum].y = y;\n\ta[sum].ne = head[x];\n\ta[sum].z = z;\n\thead[x] = sum;\n}\nint d[Max];\nbool use[Max];\npriority_queue<point>q;\nvoid dj()\n{\n\tmemset(d,0x3f,sizeof(d));\n\td[1] = 0;\n\tq.push((point){0,1});\n\twhile(!q.empty())\n\t{\n\t\tpoint qwq = q.top();\n\t\tq.pop();\n\t\tint x = qwq.x,w = qwq.w;\n\t\tif(use[x] == true)\n\t\t\tcontinue;\n\t\telse\n\t\t\tuse[x] = true;\n\t\tfor(register int i = head[x];i != 0;i = a[i].ne)\n\t\t{\n\t\t\tint awa = a[i].y;\n\t\t\tif(d[awa] > d[x] + a[i].z)\n\t\t\t{\n\t\t\t\td[awa] = d[x] + a[i].z;\n\t\t\t\tif(use[awa] == false)\n\t\t\t\t\tq.push((point){d[awa],awa});\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint n,m,k;\n\tcin >> n >> m >> k;\n\tint x,y,z;\n\tfor(register int i = 1;i <= m;++ i)\n\t{\n\t\tcin >> x >> y >> z;\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t\tfor(register int j = 1;j <= k;++ j)\n\t\t{\n\t\t\tadd(j * n + x,j * n + y,z);\n\t\t\tadd(j * n + y,j * n + x,z);\n\t\t\tadd((j - 1) * n + x,j * n + y,z / 2);\n\t\t\tadd((j - 1) * n + y,j * n + x,z / 2);\n\t\t}\n\t}\n\tdj();\n\tint M = 0x7fffffff;\n\tfor(register int i = 0;i <= k;++ i)\n\t\tM = min(M,d[i * n + n]);\n\tcout << M << endl;\n\treturn 0;\n}\n```",
        "postTime": 1571791976,
        "uid": 186489,
        "name": "EarthGiao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.org/problem/P4822)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5176\u5b9e\u8fd9\u9053\u9898\u8ddf[[JLOI]\u98de\u884c\u8def\u7ebf](https://www.luogu.org/problem/P4568)\u662f\u57fa\u672c\u76f8\u540c\u7684\uff0c\u5efa\u5206\u5c42\u56fe\u4e4b\u540e\u8dd1$Dijkstra$\u3002\u533a\u522b\u5728\u4e8e\u4ece\u6bcf\u5c42\u56fe\u8f6c\u79fb\u7684\u65f6\u5019\u8fb9\u6743\u4e0d\u662f$0$\uff0c\u800c\u662f\u539f\u8fb9\u6743\u7684\u4e00\u534a\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5efa\u5b8c\u4e4b\u540e\u8dd1\u5c31\u53ef\u4ee5\u4e86\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~~\u723d\u4e0d\u723d\uff0c\u4e00\u6b21\u6c34\u4e24\u9053\uff0c\u51fa\u9898\u4eba\u771f\u662f\u826f\u5fc3~~  \n# \u4ee3\u7801\n```cpp\n#include <queue>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 1e4 + 5, MAXM = 5e4 + 5, MAXK = 15;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\nstruct node\n{\n\tint u, dis;\n\tnode(){}\n\tnode( const int U, const int Dis ){ u = U, dis = Dis; }\n\tbool operator < ( const node & other ) const { return ! ( dis < other.dis ); }\n};\n\nstruct edge\n{\n\tint to, nxt, w;\n}Graph[MAXK * MAXM * 4 + MAXK * 2];\n\npriority_queue<node> q;\n\nint dis[MAXN * MAXK];\nint head[MAXN * MAXK];\nint N, M, K, cnt;\nbool visited[MAXN * MAXK];\n\nvoid addEdge( const int from, const int to, const int W )\n{\n\tcnt ++;\n\tGraph[cnt].w = W, Graph[cnt].nxt = head[from], Graph[cnt].to = to;\n\thead[from] = cnt;\n}\n\nvoid Dijkstra( const int sta )\n{\n\twhile( ! q.empty() ) q.pop();\n\tmemset( dis, 0x3f, sizeof( dis ) ), memset( visited, false, sizeof( visited ) );\n\tdis[sta] = 0, q.push( node( sta, 0 ) );\n\tnode h;\n\tint v, w;\n\twhile( ! q.empty() )\n\t{\n\t\th = q.top(), q.pop();\n\t\tif( visited[h.u] ) continue;\n\t\tvisited[h.u] = true;\n\t\tfor( int i = head[h.u] ; i ; i = Graph[i].nxt )\n\t\t{\n\t\t\tv = Graph[i].to, w = Graph[i].w;\n\t\t\tif( ! visited[v] && dis[v] > dis[h.u] + w )\n\t\t\t\tdis[v] = dis[h.u] + w, q.push( node( v, dis[v] ) );\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint fr, to, W;\n\tread( N ), read( M ), read( K );\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t{\n\t\tread( fr ), read( to ), read( W ), fr --, to --;\n\t\tfor( int j = 0 ; j < K ; j ++ ) addEdge( fr + j * N, to + ( j + 1 ) * N, W >> 1 ), addEdge( to + j * N, fr + ( j + 1 ) * N, W >> 1 );\n\t\tfor( int j = 0 ; j <= K ; j ++ ) addEdge( fr + j * N, to + j * N, W ), addEdge( to + j * N, fr + j * N, W );\n\t}\n\tDijkstra( 0 );\n\tint res = INF;\n\tfor( int i = 0 ; i <= K ; i ++ )\n\t\tres = MIN( res, dis[( i + 1 ) * N - 1] );\n\twrite( res ), putchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1571751367,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[BJWC2012]\u51bb\u7ed3"
    },
    {
        "content": "### \u90e8\u5206\u4e00\uff08\u975e\u6b63\u89e3\uff09\n#### \u601d\u8def\uff1a\n\u5148\u8fd0\u884c\u6700\u77ed\u8def\uff0c\u518d\u8def\u5f84\u8fd8\u539f\uff0c\u627e\u5230\u901a\u8fc7\u7684\u524dk\u5927\u7684\u8fb9\u6743\uff0c\u5728\u9664\u4ee52\uff0c\u6240\u5f97\u7684\u5373\u4e3a\u89e3 ~~\uff08\u5047\u7684\uff09~~\u3002\n#### \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct prep{\n\tint x;\n\tint y;\n}pre[51],qk[101];\nint px[51];\nint mapp[51][51],n,m,k,l;\nint dis[100];\nbool ok[51];\nint read()\n{\n\tint x=0;\n\tchar b=getchar();\n\twhile(b>'9' || b<'0')\n\t b=getchar();\n\twhile(b>='0' && b<='9')\n\t{\n\t x=x*10+b-'0';\n\t b=getchar();\n\t}\n\treturn x;\n}//\u5feb\u8bfb\nvoid Dijkstra(int s)\n{\n\tint i,b;\n\tdis[s]=0;\n\twhile(1)\n\t{\n\t b=-1;\n\t for(i=1;i<=n;i++)\n\t  if(!ok[i] && (b==-1 || dis[i]<dis[b]))\n\t   b=i;\n\t if(b==-1)\n\t  break;\n\t ok[b]=true;\n\t for(i=1;i<=n;i++)\n\t {\n\t  if(i==n)\n\t  {\n\t   if(dis[i]>dis[b]+mapp[b][i])\n\t   {\n\t    dis[i]=dis[b]+mapp[b][i];\n\t    l=0;\n\t   }\n\t   if(dis[i]>=dis[b]+mapp[b][i])\n\t    qk[++l].x=b;\n\t   break;\n\t  }\n\t  if(dis[i]>dis[b]+mapp[b][i])\n\t  {\n\t   dis[i]=dis[b]+mapp[b][i];\n\t   pre[i].x=b;\n\t   pre[i].y=max(pre[i].y,mapp[b][i]);\n\t  }\n\t  else\n\t   if(dis[i]==dis[b]+mapp[b][i])\n\t    if(pre[i].y<mapp[b][i])\n\t    {\n\t     pre[i].x=b;\n\t     pre[i].y=mapp[b][i];\n\t\t}\n\t }\n\t}\n}//Dijkstra\u627e\u6700\u77ed\u8def\nbool cmp(int x,int y)\n{\n\treturn x>y;\n}\nvector<prep> get(int j)\n{\n\tvector<prep>lu;\n\tfor(;pre[j].x!=-1;j=pre[j].x)\n\t lu.push_back(pre[j]);\n\treverse(lu.begin(),lu.end());\n\treturn lu;\n}//\u8def\u5f84\u8fd8\u539f\nint main()\n{\n\tint i,j,o=0,x,y,z,ans=0,minn=0x7ffffff;\n    n=read();\n    m=read();\n    k=read();\n    fill(ok,ok+n+1,false);\n    fill(dis,dis+n+1,0x7fffffff);\n    for(i=1;i<=n;i++)\n     for(j=1;j<=n;j++)\n      mapp[i][j]=0x7ffffff;\n    for(i=1;i<=m;i++)\n    {\n     x=read();\n     y=read();\n     z=read();\n     mapp[y][x]=mapp[x][y]=min(mapp[x][y],z);\n\t}\n\tfor(i=1;i<=n;i++)\n\t pre[i]={-1,-1};\n\tDijkstra(1);\n\tans=dis[n];\n\tfor(i=1;i<=l;i++)\n\t{\n\t o=0;\n\t ans=dis[n];\n\t px[++o]=mapp[n][qk[i].x];\n\t for(j=qk[i].x;pre[j].x!=-1;j=pre[j].x)\n\t  px[++o]=mapp[j][pre[j].x];\n\t sort(px+1,px+o+1,cmp);\n\t for(j=1;j<=k && j<=o;j++)\n\t  ans=ans-px[j]/2;\n\t minn=min(minn,ans);\n\t}//\u627e\u6700\u5c0f\u7684\u7ed3\u679c\n\tcout<<minn<<endl;\n\treturn 0;\n}\n```\n\u8fd9\u662f\u6211\u5f00\u59cb\u5199\u7684\u4ee3\u7801\uff0c\u53ea\u670970\u5206\uff0c\u7136\u800c\u6211\u4e0d\u4fe1\u8fd9\u4e2a\u90aa\uff0c\u4e00\u76f4\u7528\u8fd9\u4e2a\u601d\u8def\u53bb\u5199\uff0c\u6700\u9ad870\u5206\u3002\n### \u90e8\u5206\u4e8c\uff08\u6b63\u89e3\uff09\n#### \u4e2a\u4eba\u7ecf\u5386\uff1a\n\u5728\u4e00\u9875\u591a\u63d0\u4ea4\u540e\uff0c\u6211\u4fe1\u4e86\u8fd9\u4e2a\u90aa\uff0c\u4f46\u662f\u53c8\u4e0d\u60f3\u4e22\u6389\u8fd9\u9053\u7d2b\u9898\uff0c\u6240\u4ee5\u6211\u5e72\u8106\u53bb\u5b66\u5206\u5c42\u56fe\u6700\u77ed\u8def\uff08\u5e38\u89c4\u89e3\u6cd5\uff09\uff0c\u7136\u800c\u6211\u8fdeDijkstra\u7684\u5806\u4f18\u5316\u90fd\u4e0d\u4f1a\uff0c\u6211\u5148\u662f\u5b66\u4e86Dijkstra\u7684\u5806\u4f18\u5316\uff0c\u518d\u662f\u5206\u5c42\u56fe\u6700\u77ed\u8def\uff0c\u6700\u540e\uff0c\u5728O2\u4f18\u5316\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u7ec8\u4e8eA\u4e86\u8fd9\u9898\u3002\n#### \u601d\u8def\uff1a\n\u591a\u52a0\u4e00\u7ef4\u8868\u793a\u7528\u4e86SpellCard\u7684\u5f20\u6570\uff0c\u5176\u5b83\u7684\u7c7b\u4f3c\u4e8eDijkstra\u7684\u5806\u4f18\u5316\u4ee3\u7801\uff08\u5176\u5b9e\u5c31\u662f[P4779](https://www.luogu.org/problem/P4779)\u7684\u4ee3\u7801\u6539\u4e00\u4e9b\u5c0f\u4e1c\u897f\uff09\n#### \u4ee3\u7801\uff1a\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\nstruct Edge{\n\tint to;\n\tint next;\n\tint w;\n}edge[10000];\nstruct node{\n\tint now;\n\tint d;\n\tint zs;\n\tbool operator < (const node &a)const\n\t{\n\t return d>a.d;\n\t}//\u91cd\u8f7d\u8fd0\u7b97\u7b26\n};\nint n,m,k,num_edge;\nint dis[100][100],ok[100][100],head[100];//dis[i][j]\u4ee3\u8868\u70b91\u5230\u70b9i\u7684\u60c5\u51b5\u4e0b\u7528\u4e86j\u5f20SpellCard\u7684\u6700\u77ed\u8def\u957f\u5ea6\npriority_queue<node>que;//\u522b\u8ddf\u6211\u8bf4\u4f60\u8fdeSTL\u4f18\u5148\u961f\u5217\u90fd\u4e0d\u77e5\u9053\nint read()\n{\n\tint x=0;\n\tchar g=getchar();\n\twhile(g>'9' || g<'0')\n\t g=getchar();\n\twhile(g<='9' && g>='0')\n\t{\n\t x=x*10+g-'0';\n\t g=getchar();\n\t}\n\treturn x;\n}//\u76f8\u5f53\u4e8escanf\u8bfb\u5165\u6b63\u6570\uff0c\u56e0\u4e3a\u6ca1\u6709\u8d1f\u6570\uff0c\u5c31\u72af\u61d2\u5220\u6389\u4e86\u4e00\u70b9\u70b9\u4e0d\u592a\u8981\u7d27\u7684\u4e1c\u897f\nvoid add(int u,int v,int wei)\n{\n\tnum_edge++;\n\tedge[num_edge].to=v;\n\tedge[num_edge].w=wei;\n\tedge[num_edge].next=head[u];\n\thead[u]=num_edge;\n}//\u52a0\u8fb9\uff0c\u5982\u679c\u4e0d\u4f1a\u8bf7\u524d\u5f80\u767e\u5ea6\u767e\u79d1\u524d\u5411\u661f\u6216\u4e00\u672c\u901a\u90bb\u63a5\u8868\nvoid Dijkstra()\n{\n\tnode a,b;\n\tint i,x,y,t,qz,e;\n\tdis[1][0]=0;\n\tque.push((node){1,0,0});\n\twhile(!que.empty())\n\t{\n\t a=que.top();\n\t que.pop();\n\t x=a.now;\n\t y=a.d;\n\t e=a.zs;\n\t if(ok[x][e] || y>dis[x][e])\n\t  continue;\n\t ok[x][e]=true;\n\t for(i=head[x];i;i=edge[i].next)\n\t {\n\t  t=edge[i].to;\n\t  qz=edge[i].w;\n\t  if(dis[t][e]>dis[x][e]+qz)\n\t  {\n\t   dis[t][e]=dis[x][e]+qz;\n\t   que.push((node){t,dis[t][e],e});\n\t  }//\u4e0d\u7528SpellCard\u7684\u60c5\u51b5\n\t  if(dis[t][e+1]>dis[x][e]+qz/2 && e<k)\n\t  {\n\t   dis[t][e+1]=dis[x][e]+qz/2;\n\t   que.push((node){t,dis[t][e+1],e+1});\n\t  }//\u7528SpellCard\u7684\u60c5\u51b5\n\t }\n\t}\n}//\u5206\u5c42\u56fe\u6700\u77ed\u8def\uff08\u5e38\u89c4\u89e3\u6cd5\uff09\uff0c\u5199\u8fc7SPFA\u7684\u4eba\u5e94\u8be5\u90fd\u77e5\u9053\nint main()\n{\n\tint i,j,x,y,z;\n\tint minn=1000006;\n\tn=read();m=read();k=read();\n\tfor(i=0;i<=n;i++)\n\t for(j=0;j<=n;j++)\n\t  dis[i][j]=1000005,ok[i][j]=false;\n\tfor(i=1;i<=m;i++)\n\t{\n\t x=read();y=read();z=read();\n\t add(x,y,z);\n\t add(y,x,z);//\u53cc\u5411\u8fb9\uff0c\u6240\u4ee5\u8981\u52a0\u4e24\u6b21\n\t}\n\tDijkstra();\n\tfor(i=0;i<=k;i++)\n\t minn=min(minn,dis[n][i]);//\u6c42\u7528\u4e860~k\u5f20SpellCard\u540e\u7684\u6700\u77ed\u8def\u957f\u5ea6\u7684\u6700\u5c0f\u503c\n\tcout<<minn<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1565786578,
        "uid": 79072,
        "name": "hylong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "\u5206\u5c42\u6700\u77ed\u8def\u7684\u677f\u5b50\u9898\n\n\u6784\u601d\u8fd8\u662f\u6709\u70b9\u6709\u8da3\n\n\u5efak\u5c42\u56fe\uff0c\u7b2ck\u5c42\u7f16\u53f7\u4ece1+(k-1)+n\u5230n+(k-1)+n\n\n\u5bf9\u4e8e\u8fb9\uff08u\uff0cv\uff0cw\uff09\n\n\u7b2ck\u5c42\u4e0a\uff0c\uff08k-1\uff09* n+u \u548c\uff08k-1\uff09* n+v\u5efa\u4e00\u6761\u6743\u503c\u4e3aw\u7684\u53cc\u5411\u8fb9\n\n\uff08k-1\uff09* n+u \u5230 k * n+v\u3001\uff08k-1\uff09* n+v \u5230 k * n+u\u5efa\u4e00\u6761\u6743\u503c\u4e3aw/2\u7684\u5355\u5411\u8fb9\n\uff08\u8868\u793a\u7528\u4e86\u4e00\u6b21SpellCard \uff09\n\n\u6700\u540e\u5728\u6574\u4e2a\u5927\u56fe\u4e0a\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\u5373\u53ef\n\n~~\u96be\u5f97A\u4e00\u9053\u7d2b\u9898\uff0c\u7eaa\u5ff5\u4e00\u4e0b~~\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\nconst int MAXN=2600 + 3;\nusing namespace std;\nint read()\n{\n\tint x=0,w=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') w=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<3)+(x<<1)+c-48;c=getchar();}\n\treturn x*w;\t\n}\n\nstruct Edge\n{\n\tint to,next,w;\n}e[MAXN*80];\nint head[MAXN]={0},cnt=0;\ninline void add(int u,int v,int w)\n{\n\te[++cnt].to=v;\n\te[cnt].w=w;\n\te[cnt].next=head[u];\n\thead[u]=cnt;\t\n}\n\nint d[MAXN],vis[MAXN]={0};\npriority_queue<pair<int,int> > Q;\nvoid dij()\n{\n\tmemset(d,127,sizeof(d));\n\tmemset(vis,0,sizeof(vis));\n\td[1]=0,Q.push(make_pair(0,1));\n\twhile(!Q.empty())\n\t{\n\t\tint u=Q.top().second;\n\t\tQ.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(int i=head[u];i;i=e[i].next)\n\t\t{\n\t\t\tint v=e[i].to;\n\t\t\tif(d[v]>d[u]+e[i].w)\n\t\t\t{\n\t\t\t\td[v]=d[u]+e[i].w;\n\t\t\t\tQ.push(make_pair(-d[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tint n=read(),m=read(),k=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u=read(),v=read(),w=read();\n\t\tfor(int j=0;j<=k;j++)\n\t\t{\n\t\t\tadd(u+(j-1)*n,v+j*n,w/2);\n\t\t\tadd(v+(j-1)*n,u+j*n,w/2);\n\t\t\tadd(j*n+u,j*n+v,w);\n        add(j*n+v,j*n+u,w);\n\t\t}\n\t}\n\tdij();\n\tint ans=1<<30;\n\tfor(int i=0;i<=k;i++)\n\t\tans=min(ans,d[n+i*n]);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1555239553,
        "uid": 88736,
        "name": "Sober_Clever",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "\u9898\u76ee\uff1a\n```\n\n\u9898\u76ee\u63cf\u8ff0\n\n\u201c\u6211\u8981\u6210\u4e3a\u9b54\u6cd5\u5c11\u5973\uff01\u201d\n\u201c\u90a3\u4e48\uff0c\u4ee5\u7075\u9b42\u4e3a\u4ee3\u4ef7\uff0c\u4f60\u5e0c\u671b\u5f97\u5230\u4ec0\u4e48\uff1f\u201d\n\u201c\u6211\u8981\u5c06\u6709\u5173\u9b54\u6cd5\u548c\u5947\u8ff9\u7684\u4e00\u5207\uff0c\u5c01\u5370\u4e8e\u5361\u7247\u4e4b\u4e2d\u201e\u201e\u201d\n\n\u5728\u8fd9\u4e2a\u613f\u671b\u88ab\u5b9e\u73b0\u4ee5\u540e\u7684\u4e16\u754c\u91cc\uff0c\u4eba\u4eec\u4eab\u53d7\u7740\u9b54\u6cd5\u5361\u7247\uff08SpellCard\uff0c\u53c8\u540d\u7b26\u5361\uff09\u5e26\u6765\u7684\u4fbf\u6377\u3002\n\n\u73b0\u5728\uff0c\u4e0d\u9700\u8981\u7acb\u4e0b\u5951\u7ea6\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9b54\u6cd5\u4e86\uff01\u4f60\u8fd8\u4e0d\u6765\u8bd5\u4e00\u8bd5\uff1f\n\u6bd4\u5982\uff0c\u6211\u4eec\u5728\u9b54\u6cd5\u767e\u79d1\u5168\u4e66\uff08Encyclopedia of Spells\uff09\u91cc\u7528\u201cfreeze\u201d\u4f5c\u4e3a\u5173\u952e\u5b57\u6765\u67e5\u8be2\uff0c\u4f1a\u6709\u5f88\u591a\u6709\u8da3\u7684\u7ed3\u679c\u3002\n\u4f8b\u5982\uff0c\u6211\u4eec\u719f\u77e5\u7684Cirno\uff0c\u5979\u7684\u51b0\u51bb\u9b54\u6cd5\u5f53\u7136\u4f1a\u6709\u5bf9\u5e94\u7684 SpellCard \u4e86\u3002 \u5f53\u7136\uff0c\u66f4\u52a0\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u5c45\u7136\u6709\u51bb\u7ed3\u65f6\u95f4\u7684\u9b54\u6cd5\uff0cCirno \u7684\u51bb\u9752\u86d9\u6bd4\u8d77\u8fd9\u4e9b\u6765\u771f\u662f\u5c0f\u5deb\u89c1\u5927\u5deb\u4e86\u3002\n\u8fd9\u8bf4\u660e\u4e4b\u524d\u7684\u4e16\u754c\u4e2d\u6709\u5f88\u591a\u9b54\u6cd5\u5c11\u5973\u66fe\u8bb8\u4e0b\u63a7\u5236\u65f6\u95f4\u7684\u613f\u671b\uff0c\u6bd4\u5982 Akemi Homura\u3001Sakuya Izayoi\u3001\u201e\u201e\n\u5f53\u7136\uff0c\u5728\u672c\u9898\u4e2d\u6211\u4eec\u5e76\u4e0d\u662f\u8981\u6765\u7814\u7a76\u5386\u53f2\u7684\uff0c\u800c\u662f\u7814\u7a76\u9b54\u6cd5\u7684\u5e94\u7528\u3002\n\n\u6211\u4eec\u8003\u8651\u6700\u7b80\u5355\u7684\u65c5\u884c\u95ee\u9898\u5427\uff1a \u73b0\u5728\u8fd9\u4e2a\u5927\u9646\u4e0a\u6709 N \u4e2a\u57ce\u5e02\uff0cM \u6761\u53cc\u5411\u7684\u9053\u8def\u3002\u57ce\u5e02\u7f16\u53f7\u4e3a 1~N\uff0c\u6211\u4eec\u5728 1 \u53f7\u57ce\u5e02\uff0c\u9700\u8981\u5230 N \u53f7\u57ce\u5e02\uff0c\u600e\u6837\u624d\u80fd\u6700\u5feb\u5730\u5230\u8fbe\u5462\uff1f\n\u8fd9\u4e0d\u5c31\u662f\u6700\u77ed\u8def\u95ee\u9898\u5417\uff1f\u6211\u4eec\u90fd\u77e5\u9053\u53ef\u4ee5\u7528 Dijkstra\u3001Bellman-Ford\u3001Floyd-Warshall\u7b49\u7b97\u6cd5\u6765\u89e3\u51b3\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u4e00\u5171\u6709 K \u5f20\u53ef\u4ee5\u4f7f\u65f6\u95f4\u53d8\u6162 50%\u7684 SpellCard\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u901a\u8fc7\u67d0\u6761\u8def\u5f84\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u4e00\u5f20\u5361\u7247\uff0c\u8fd9\u6837\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u4e00\u6761\u9053\u8def\u7684\u65f6\u95f4 \u5c31\u53ef\u4ee5\u51cf\u5c11\u5230\u539f\u5148\u7684\u4e00\u534a\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\n\n    \u5728\u4e00\u6761\u9053\u8def\u4e0a\u6700\u591a\u53ea\u80fd\u4f7f\u7528\u4e00\u5f20 SpellCard\u3002\n    \u4f7f\u7528\u4e00\u5f20SpellCard \u53ea\u5728\u4e00\u6761\u9053\u8def\u4e0a\u8d77\u4f5c\u7528\u3002\n\n    \u4f60\u4e0d\u5fc5\u4f7f\u7528\u5b8c\u6240\u6709\u7684 SpellCard\u3002\n\n    \u7ed9\u5b9a\u4ee5\u4e0a\u7684\u4fe1\u606f\uff0c\u4f60\u7684\u4efb\u52a1\u662f\uff1a\u6c42\u51fa\u5728\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e0d\u8d85\u8fc7 K \u5f20\u65f6\u95f4\u51cf\u901f\u7684 SpellCard \u4e4b\u60c5\u5f62\u4e0b\uff0c\u4ece\u57ce\u5e021 \u5230\u57ce\u5e02N\u6700\u5c11\u9700\u8981\u591a\u957f\u65f6\u95f4\u3002\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570\uff1aN\u3001M\u3001K\u3002\n\u63a5\u4e0b\u6765 M \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570\uff1aAi\u3001Bi\u3001Timei\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6761 Ai\u4e0e Bi\u4e4b\u95f4\u7684\u53cc\u5411\u9053\u8def\uff0c\u5728\u4e0d\u4f7f\u7528 SpellCard \u4e4b\u524d\u63d0\u4e0b\uff0c\u901a\u8fc7\u5b83\u9700\u8981 Timei\u7684\u65f6\u95f4\u3002\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4ece1 \u53f7\u57ce\u5e02\u5230 N\u53f7\u57ce\u5e02\u7684\u6700\u5c0f\u7528\u65f6\u3002\n\n\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\u8f93\u5165\u6837\u4f8b#1\uff1a \u590d\u5236\n\n4 4 1 \n1 2 4 \n4 2 6 \n1 3 8 \n3 4 8 \n\n\u8f93\u51fa\u6837\u4f8b#1\uff1a \u590d\u5236\n\n7\n\n\u8bf4\u660e\n\n\u6837\u4f8b\u89e3\u91ca\uff1a\n\u5728\u4e0d\u4f7f\u7528 SpellCard \u65f6\uff0c\u6700\u77ed\u8def\u4e3a 1\u00e02\u00e04\uff0c\u603b\u65f6\u95f4\u4e3a 10\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 1 \u6b21 SpellCard\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u901a\u8fc7 2\u00e04 \u8fd9\u6761\u9053\u8def\u7684\u65f6\u95f4\u51cf\u534a\uff0c\u6b64\u65f6\u603b\u65f6\u95f4\u4e3a7\u3002\n\u5bf9\u4e8e100%\u7684\u6570\u636e\uff1a1 \u2264 K \u2264 N \u2264 50\uff0cM \u2264 1000\u3002\n1\u2264 Ai\uff0cBi \u2264 N\uff0c2 \u2264 Timei \u2264 2000\u3002\n\u4e3a\u4fdd\u8bc1\u7b54\u6848\u4e3a\u6574\u6570\uff0c\u4fdd\u8bc1\u6240\u6709\u7684 Timei\u5747\u4e3a\u5076\u6570\u3002\n\u6240\u6709\u6570\u636e\u4e2d\u7684\u65e0\u5411\u56fe\u4fdd\u8bc1\u65e0\u81ea\u73af\u3001\u91cd\u8fb9\uff0c\u4e14\u662f\u8fde\u901a\u7684\u3002\n\n```\n\n\n\u8fd9\u4e2a\u9898\u672c\u6765\u60f3\u5148\u5199\u4e2a\u66b4\u529b\uff0c\u5199\u5b8c\u4e4b\u540e\u4e00\u7b97\u590d\u6742\u5ea6\u7adf\u7136\u5b8c\u5168ok\uff1f\u9898\u89e3\u533a\u7adf\u7136\u6ca1\u4eba\u5199\u8fd9\u4e48\u7b80\u5355\u7684\u4f5c\u6cd5\u3002\u3002\u3002\n\n\u6211\u7528\u4e86\u6211\u7684\u672c\u547d\u7b97\u6cd5\uff1aFloyd\uff0c\u7136\u540e\u7528\u4e00\u70b9dp\u7684\u601d\u8def\uff0cmp[i][j][k]\u8868\u793ai\u5230j\u7528k\u5f20\u5361\u7247\u3002\u6b63\u5e38Floyd\u4f5c\u6cd5\uff0c\u53ea\u6709\u8f6c\u79fb\u7565\u6709\u4e0d\u540c\uff0c\u524d\u540e\u66b4\u529b\u679a\u4e3e\u4f7f\u7528\u5361\u724c\u4e2a\u6570\uff0c\u7136\u540e\u76f8\u52a0\u53d6\u6700\u5c0f\u5c31\u884c\u4e86\u3002\n\n\u8be6\u60c5\u89c1\u4ee3\u7801\n\n\u4ee3\u7801\uff1a\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<ctime>\n#include<queue>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\n#define duke(i,a,n) for(register int i = a;i <= n;++i)\n#define lv(i,a,n) for(register int i = a;i >= n;--i)\n#define clean(a) memset(a,0,sizeof(a))\nconst int INF = 1 << 30;\ntypedef long long ll;\ntypedef double db;\ntemplate <class T>\nvoid read(T &x)\n{\n\tchar c;\n\tbool op = 0;\n\twhile(c = getchar(), c < '0' || c > '9')\n\t\tif(c == '-') op = 1;\n\tx = c - '0';\n\twhile(c = getchar(), c >= '0' && c <= '9')\n\t\tx = x * 10 + c - '0';\n\tif(op) x = -x;\n}\ntemplate <class T>\nvoid write(T x)\n{\n\tif(x < 0) putchar('-'), x = -x;\n\tif(x >= 10) write(x / 10);\n\tputchar('0' + x % 10);\n}\nint n,m,k,mp[55][55][55];\nint main()\n{\n\tread(n);read(m);read(k);\n\tint x,y,t;\n\tmemset(mp,0x3f,sizeof(mp));\n\tduke(i,1,m)\n\t{\n\t\tread(x);read(y);read(t);\n\t\tmp[x][y][0] = t;\n\t\tmp[y][x][0] = t;\n\t\tmp[x][y][1] = t / 2; //\u8fd9\u4e24\u884c\u5fc5\u987b\u6709\uff0c\u56e0\u4e3a\u53ea\u6709\u8fd9\u4e2a\u53ef\u4ee5\u4f53\u73b0\u51fa\u4f7f\u7528\u5361\u724c\u7684\u4ef7\u503c\n\t\tmp[y][x][1] = t / 2;\n\t}\n\tduke(i,1,n)\n\t{\n\t\tmp[i][i][0] = 0;//\u521d\u59cb\u5316\n\t}\n\tduke(i,1,n)\n\t{\n\t\tduke(j,1,n)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tduke(l,1,n)\n\t\t\t\t{\n\t\t\t\t\tif(i != l && j != l)\n\t\t\t\t\t{\n\t\t\t\t\t\tduke(f,0,k)//\u679a\u4e3e\u5361\u724c\u6570\n\t\t\t\t\t\tduke(g,0,f)//\u7b2c\u4e00\u6bb5\u4f7f\u7528\u7684\u6570\u91cf\n\t\t\t\t\t\tmp[i][j][f] = min(mp[i][j][f],mp[i][l][g] + mp[l][j][f - g]);//\u8f6c\u79fb\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tint maxn = INF;\n\tduke(i,0,k)\n\t{\n\t\tmaxn = min(maxn,mp[1][n][i]);//\u7edf\u8ba1\u7b54\u6848\n\t}\n\tprintf(\"%d\\n\",maxn);\n\treturn 0;\n}\n```\n",
        "postTime": 1552055194,
        "uid": 55877,
        "name": "DukeLv",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "[P4822 [BJWC2012]\u51bb\u7ed3](https://www.luogu.org/problemnew/show/P4822)\n\n\u8fd9\u79cd\u9898\u6ca1\u6709\u5206\u5c42\u56fe+\u6700\u77ed\u8def\u7684\u9898\u89e3\uff0c\u5dee\u8bc4\u3002\u3002\u3002\n\n\u6211\u6765\u8865\u4e00\u4e2a\u5427\u3002\u3002\u3002\n\n\u6bcf\u5c42\u6b63\u5e38\u5efa\u56fe\uff0c\u76f8\u90bb\u4e24\u5c42\u95f4\u5efa\u957f\u5ea6\u4e3a$\\frac{w}{2}$\u7684\u8fb9\u3002\n\n\u7136\u540e\u4e00\u53d1$SPFA$\u5c31\u597d\u4e86\u3002\n\n\u6700\u540e\u5728$n\\times i,i\\in [1,k+1]$\u7684\u6700\u77ed\u8def\u4e2d\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u8fd9\u4e2a\u9898\u6b63\u89e3\u636e\u8bf4\u662f$SPFA+DP$\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u554a\u3002\u3002\u3002\n\n[\u672c\u849f\u84bb\u7684\u535a\u5ba2](https://www.cnblogs.com/Yangrui-Blog/p/9498018.html)\n\n\u9644\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<queue>\n#define MAXN 3010\n#define MAXM 1000010\n#define MAX 999999999\nusing namespace std;\nint n,m,k,s,t,c=1;\nint head[MAXN],path[MAXN];\nbool vis[MAXN];\nstruct Graph{\n    int next,to,w;\n}a[MAXM<<1];\ninline int read(){\n    int date=0,w=1;char c=0;\n    while(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n    while(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n    return date*w;\n}\nint relax(int u,int v,int w){\n    if(path[v]>path[u]+w){\n        path[v]=path[u]+w;\n        return 1;\n    }\n    return 0;\n}\ninline void add(int u,int v,int w){\n    a[c].to=v;a[c].w=w;a[c].next=head[u];head[u]=c++;\n}\nvoid spfa(){\n    int u,v;\n    queue<int> q;\n    for(int i=1;i<=n*(k+2);i++){path[i]=MAX;vis[i]=false;}\n    path[s]=0;\n    vis[s]=true;\n    q.push(s);\n    while(!q.empty()){\n        u=q.front();\n        q.pop();\n        vis[u]=false;\n        for(int i=head[u];i;i=a[i].next){\n            v=a[i].to;\n            if(relax(u,v,a[i].w)&&!vis[v]){\n                vis[v]=true;\n                q.push(v);\n            }\n        }\n    }\n}\nvoid work(){\n    int ans=MAX+1;\n    spfa();\n    for(int i=1;i<=k+1;i++)ans=min(ans,path[i*n]);\n    printf(\"%d\\n\",ans);\n}\nvoid init(){\n    int u,v,w;\n    n=read();m=read();k=read();\n    s=1;t=n;\n    for(int i=1;i<=m;i++){\n        u=read();v=read();w=read();\n        for(int j=0;j<=k;j++){\n            add(u+j*n,v+j*n,w);\n            add(v+j*n,u+j*n,w);\n        }\n        for(int j=0;j<k;j++){\n            add(u+j*n,v+(j+1)*n,w>>1);\n            add(v+j*n,u+(j+1)*n,w>>1);\n        }\n    }\n}\nint main(){\n    init();\n    work();\n    return 0;\n}\n\n```",
        "postTime": 1535288143,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "**\u524d\u7f6e\u77e5\u8bc6**\n\n\u5efa\u56fe\uff0c\u6c42\u6700\u77ed\u8def\n\n**\u9898\u9762**\n\n[BJWC2012]\u51bb\u7ed3 [luogup4622](https://www.luogu.org/problemnew/show/P4822)\n\n**\u9898\u610f**\n\n\u4e00\u4e2a\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u65e0\u81ea\u73af\u3001\u91cd\u8fb9\uff0c\u53ef\u4ee4\u81f3\u591a$k$\u6761\u8fb9\u7684\u8fb9\u6743\u53d8\u4e3a\u539f\u6765\u7684\u4e00\u534a\uff0c\u6c42$1$~$n$\u6700\u77ed\u8def\u3002\n\n**\u7b97\u6cd5**\n\n\u5206\u5c42\u56fe + \u6700\u77ed\u8def\u3002\n\n\u4f60\u4e00\u5f00\u59cb\u6709\u4e00\u4e2a\u56fe\u3002\n\n\u628a\u8fd9\u4e2a\u56fe\u590d\u5236\u6210$K+1$\u4e2a\uff0c\u5bf9\u4e8e\u4e00\u6761\u8fb9$(u,v,k)$\uff0c\u5728\u7b2c$i$\u4e2a\u56fe\u7684$u$\u548c\u7b2c$i+1$\u4e2a\u56fe\u7684$v$\u4e4b\u95f4\u8fde\u4e00\u6761\u6743\u4e3a$\\frac{k}{2}$\u7684\u8fb9\u3002\n\n\u4e5f\u4fdd\u8bc1\u4e86\u201c\u6bcf\u6761\u8fb9\u6700\u591a\u7528\u4e00\u6b21SpellCard\u201d\u3002\n\n\u5efa\u5b8c\u56fe\u76f4\u63a5\u4ece\u70b9$1$\u8dd1\u6700\u77ed\u8def\u5c31\u884c\u4e86\u3002\n\n\u6700\u540e\u628a\u6bcf\u4e2a\u56fe\u7684$dis[n]$\u90fd\u627e\u51fa\u6765\u53d6$min$\u5c31\u662f\u7b54\u6848\u3002\n\n\u8fb9\u7684\u6570\u7ec4\u8981\u5f00\u5927\u554a\uff01~~\u6211\u4ea4\u4e865\u6b2190\u628a\u8fb9\u5927\u5c0f\u5f00\u5927\u4e94\u500d\u5c31\u8fc7\u4e86~~\n\n----\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <queue>\nusing namespace std;\n\n#define MAXN 500005\n#define INF 2147483647\ninline long long read() //\u6ca1\u6709\u4efb\u4f55\u4eae\u70b9\u7684\u8bfb\u5165\u4f18\u5316\n{\n    char c = getchar();\n    long long ret = 0, t = 1;\n    while ((c < '0' || c > '9') && c != '-') c = getchar();\n    if (c == '-') t = -1, c = getchar();\n    while (c >= '0' && c <= '9') ret = (ret << 3) + (ret << 1) + c - '0', c = getchar();\n    return ret * t;\n}\n\nint N, M, K;\nstruct node\n{\n    int v, next, cost;\n}E[MAXN]; //\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\uff08\u597d\u50cf\u4e0d\u7528\uff1f\uff09\nint Elen, head[MAXN], dis[MAXN], ans = INF;\nbool vis[MAXN];\nvoid add(int u, int v, int k)\n{\n    ++Elen, E[Elen].v = v, E[Elen].next = head[u], head[u] = Elen, E[Elen].cost = k;\n}\nstruct state\n{\n    int v, dis;\n};\nstruct cmp\n{\n    bool operator() (state a, state b)\n    {\n        return a.dis > b.dis;\n    }\n};\npriority_queue<state, vector<state>, cmp> Q;\nvoid dijkstra(int s)\n{\n    int i;\n    state u, t;\n    for (i = 1; i <= N * (K + 1); ++i) dis[i] = INF;\n    dis[s] = 0;\n    t.v = s, t.dis = 0;\n    Q.push(t);\n    while (!Q.empty())\n    {\n        u = Q.top();\n        Q.pop();\n        if (vis[u.v]) continue;\n        vis[u.v] = true;\n        for (i = head[u.v]; i; i = E[i].next)\n        {\n            if (dis[u.v] + E[i].cost < dis[E[i].v])\n            {\n                dis[E[i].v] = dis[u.v] + E[i].cost;\n                t.v = E[i].v, t.dis = dis[E[i].v];\n                Q.push(t);\n            }\n        }\n    }\n}\nint main()\n{\n    N = read(), M = read(), K = read();\n    register int i, j, u, v, k;\n    for (i = 1; i <= M; ++i)\n    {\n        u = read(), v = read(), k = read();\n        for (j = 0; j <= K; ++j)\n        {\n            add(u + j * N, v + j * N, k);\n            add(v + j * N, u + j * N, k);\n            //\u6bcf\u4e2a\u56fe\u4e0a\u90fd\u8981\u8fde\u8fb9\n        }\n        for (j = 0; j < K; ++j)\n        {\n            add(u + j * N, v + (j + 1) * N, k >> 1);\n            add(v + j * N, u + (j + 1) * N, k >> 1);\n            //\u76f8\u90bb\u7f16\u53f7\u7684\u56fe\u7684\u5bf9\u5e94\u70b9\u8fde\u8fb9\u6743\u4e00\u534a\n        }\n    }\n    dijkstra(1);\n    for (i = 1; i <= K + 1; ++i) ans = min(ans, dis[N * i]);\n    //\u6bcf\u4e2a\u56fe\u7684dis[N]\u53d6Min\n    printf(\"%d\", ans);\n    return 0;\n}\n```",
        "postTime": 1535288030,
        "uid": 62308,
        "name": "Mr_Wu",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "\u770b\u4e86\u6570\u636e\u8303\u56f4\u4ee5\u540e\uff0c\u5c31\u79d2\u4e86  \n### \u5141\u8bb8\u4e8c\u7ef4  \n\u6240\u4ee5\u5f00\u4e00\u4e2a dis i,j\u548cin i,j  \n\u8868\u793ai\u81f31\u7528j\u6b21\u5361\u7247\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u548ci\u81f31\u7528j\u6b21\u5361\u7247\u7684\u6700\u77ed\u8ddd\u79bb\u662f\u5426\u5728spfa\u961f\u5217\u91cc.  \nspfa\u6bcf\u6b21\u8dd1\u4e24\u4e2a\u60c5\u51b5\uff08\u7528\u6216\u4e0d\u7528\uff09\u5e76\u7ef4\u62a4k\u5373\u53ef  \ncoding:\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint dis[100][100],in[100][100];\nint n,m,k;\nstruct edge{\n\tint w,to;\n};\nstruct node{\n\tint x,y;\n};\nvector<edge>e[10005];\nint spfa()\n{\n\tqueue<node>q;\n\tin[1][0]=1;\n\tq.push(node{1,0});\n\tdis[1][0]=0;\n\twhile(!q.empty())\n\t{\n\t\tnode u=q.front();q.pop();\n\t\tfor(int i=0;i<e[u.x].size();i++)\n\t\t{\n\t\t\tint v=e[u.x][i].to;\n\t\t\tif(dis[v][u.y]>dis[u.x][u.y]+e[u.x][i].w)\n\t\t\t{\n\t\t\t\tdis[v][u.y]=dis[u.x][u.y]+e[u.x][i].w;\n\t\t\t\tif(!in[v][u.y])\n\t\t\t\t{\n\t\t\t\t\tin[v][u.y]=1;\n\t\t\t\t\tq.push(node{v,u.y});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(u.y<k)\n\t\t{\n\t\t\tfor(int i=0;i<e[u.x].size();i++)\n\t\t\t{\n\t\t\t\tint v=e[u.x][i].to;\n\t\t\t\tif(dis[v][u.y+1]>dis[u.x][u.y]+(e[u.x][i].w>>1))\n\t\t\t\t{\n\t\t\t\t\tdis[v][u.y+1]=dis[u.x][u.y]+(e[u.x][i].w>>1);\n\t\t\t\t\tif(!in[v][u.y+1])\n\t\t\t\t\t{\n\t\t\t\t\t\tin[v][u.y+1]=1;\n\t\t\t\t\t\tq.push(node{v,u.y+1});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tint anss=INT_MAX;\n\tfor(int i=0;i<=k;i++) anss=min(anss,dis[n][i]);\n\treturn anss;\n}\nint main()\n{\n\tcin>>n>>m>>k;\n\tint x,y,z;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>x>>y>>z;\n\t\te[x].push_back(edge{z,y});\n\t\te[y].push_back(edge{z,x});\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=0;j<=k;j++)\n\t\t\tdis[i][j]=INT_MAX>>2;\n\tcout<<spfa()<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1534921957,
        "uid": 103990,
        "name": "asd_a",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    },
    {
        "content": "\u6211\u7684\u89e3\u6cd5\u662fspfa+dp\n\nf[i][j]\u8868\u793a\u8d70\u5230i\u70b9\u7528\u4e86j\u6b21\u5361\u724c\u6d88\u8017\u7684\u65f6\u95f4\n\n\u90a3\u4e48\u5728spfa\u65f6\uff0c\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u901a\u8fc7\u677e\u5f1b\u64cd\u4f5c\u6765\u5c06f[u][j]\u8f6c\u79fb\u5230f[v][j]\u548cf[v][j+1],\u6ce8\u610fj+1\u4e0d\u80fd\u5927\u4e8eK\u3002\n\n\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint f[51][51];\nint to[1001],nex[1001],head[51],val[1001],ce;\nint n,m,k;\nbool vis[51][51];\n\nvoid add(int u,int v,int w){\n\tto[++ce]=v;nex[ce]=head[u];head[u]=ce;val[ce]=w;\n}\n\nint read(){\n\tint x=0;char ch=getchar();\n\twhile(!isdigit(ch))ch=getchar();\n\twhile(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n\treturn x;\n}\n\nvoid spfa(){\n\tqueue< pair<int,int> > q;//\u7528pair\u6765\u88c5i\u548cj\n\tpair<int,int> u;\n\tf[1][0]=0;\n\tq.push(make_pair(1,0));\n\tvis[1][0]=1;\n\twhile(!q.empty()){\n\t\tu=q.front();q.pop();\n\t\tvis[u.first][u.second]=0;\n\t\tfor(int i=head[u.first];i;i=nex[i]){\n\n\t\tif(f[u.first][u.second]+val[i] < f[to[i]][u.second]){\n\t\t\t\tf[to[i]][u.second]=f[u.first][u.second]+val[i];\n\t\t\tif(!vis[to[i]][u.second]){\n\t\t\t\tvis[to[i]][u.second]=1;\n\t\t\t\tq.push(make_pair(to[i],u.second));\n\t\t\t}\n\t\t}\n\n\t\tif((u.second+1 <=k) && (f[u.first][u.second]+val[i]/2 < f[to[i]][u.second+1])){\n\t\t\t\tf[to[i]][u.second+1]=f[u.first][u.second]+val[i]/2;\n\t\t\t\tif(!vis[to[i]][u.second+1]){\n\t\t\t\t\tvis[to[i]][u.second+1]=1;\n\t\t\t\t\tq.push(make_pair(to[i],u.second+1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid init(){\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=0;j<=k;j++)//\u8fd9\u91cc\u6ce8\u610f\u8981\u4ece\u7b2c\u96f6\u6b21\u5f00\u59cb\u8d4b\u503c\n\t\tf[i][j]=1e9;\n}\n\nint main(){\n\tn=read(),m=read(),k=read();\n\tinit();\n\tfor(int i=1;i<=m;i++){\n\t\tint u=read(),v=read(),w=read();\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\tspfa();\n\tint ans=1e9;\n\tfor(int i=0;i<=k;i++)ans=min(ans,f[n][i]);\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n\n```",
        "postTime": 1534917101,
        "uid": 60536,
        "name": "zjc23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4822 \u3010[BJWC2012]\u51bb\u7ed3\u3011"
    }
]