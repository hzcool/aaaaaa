[
    {
        "content": "## https://sakits.com/bzoj5249/\n# \u9898\u89e3\n\u3000\u3000\u663e\u7136\u9898\u610f\u53ef\u4ee5\u62bd\u8c61\u6210\uff1a\u4e00\u68f5\u6811\uff0c\u8981\u5bf9\u6811\u4e0a\u7684\u6bcf\u4e2a\u70b9\u6807\u4e0a\u7ed9\u5b9a\u7684\u6743\u503c\uff0c\u6ee1\u8db3\u6bcf\u4e2a\u70b9\u4e0a\u7684\u6743\u503c\u90fd$\\leq$\u5b50\u6811\u5185\u70b9\u7684\u6743\u503c\uff0c\u5e76\u4f7f\u8fd9\u4e2a\u68f5\u6811\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u7684\u6743\u503c\u5b57\u5178\u5e8f\u6700\u5927\u3002\n\n\u3000\u3000\u9996\u5148\u53ef\u4ee5\u4e00\u773c\u5f97\u5230\u4e00\u4e2a\u505a\u6cd5\uff0c\u5c06\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u628a\u957f\u5ea6\u4e3a\u5b50\u6811\u5927\u5c0f\u7684\u4e00\u6bb5\u6309\u5b50\u6811\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u4e22\u7ed9\u5b83\u4eec\uff0c\u9012\u5f52\u4e0b\u53bb\u5f97\u5230\u7b54\u6848\u3002\n\n\u3000\u3000\u8fd9\u79cd\u505a\u6cd5\u5728$d_i$\u4e0d\u91cd\u590d\u7684\u65f6\u5019\u662f\u6b63\u786e\u7684\uff0c\u90a3$d_i$\u8981\u662f\u6709\u76f8\u540c\u7684\u6570\u5462\uff1f\n\n\u3000\u3000\u6709\u53ef\u80fd\u53ef\u4ee5\u5c06\u7f16\u53f7$x$\u5b50\u6811\u91cc\u4e00\u4e2a\u5927\u7684\u6743\u503c\u4e0e\u7f16\u53f7$x+1$\u7684\u5b50\u6811\u6839\u7684\u6743\u503c\u66ff\u6362\uff0c\u4f7f\u5f97$x$\u7684\u6743\u503c\u4f9d\u7136\u662f\u80fd\u53d6\u5f97\u7684\u6700\u5927\u6570\u4e14\u5b50\u6811\u5185\u7684\u6570\u90fd\u6bd4$x$\u7684\u6743\u503c\u5927\uff0c\u540c\u65f6$x+1$\u5b50\u6811\u5185\u7684\u70b9\u4e5f\u8fd8\u80fd\u6807\u6ee1$\\geq$$x+1$\u6743\u503c\u7684\u6743\u503c\u3002\n\n\u3000\u3000\u90a3\u600e\u4e48\u505a\u5462\uff1f\u5148\u628a\u7ed9\u5b9a\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u6bcf\u4e2a\u6743\u503c\u5de6\u8fb9\uff08\u5305\u62ec\u672c\u8eab\uff09\u8fd8\u80fd\u53d6\u7684\u6743\u503c\u7684\u4e2a\u6570$C_i$\u3002\n\n\u3000\u3000\u5f53\u53d6\u597d\u4e00\u4e2a\u70b9$x$\u7684\u6743\u503c\u65f6\uff0c\u9700\u8981\u7ed9\u5b83\u5b50\u6811\u5185\u7684\u70b9\u9884\u7559\u53d6\u7684\u6743\u503c\uff0c\u8fd9\u4e9b\u6743\u503c\u663e\u7136\u5728$x$\u53d6\u5f97\u6743\u503c\u7684\u5de6\u8fb9\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u53d6\u7684\u662f\u54ea\u4e9b\u6743\u503c\uff0c\u6240\u4ee5\u53ea\u628a$x$\u53d6\u5f97\u7684\u6743\u503c\u53f3\u8fb9\uff08\u5305\u62ec\u672c\u8eab\uff09\u7684$C_i$\u51cf\u53bb$x$\u5b50\u6811\u5927\u5c0f$size[x]$\uff0c\u6bcf\u6b21\u53d6\u4e00\u4e2a\u70b9$y$\u7684\u6743\u503c\u65f6\uff0c\u53ea\u9700\u8981\u5728\u7ebf\u6bb5\u6811\u4e0a\u627e\u5230\u6700\u5927\u6743\u503c$val$\u6ee1\u8db3$val$\u6240\u5728\u4f4d\u7f6e\u53f3\u8fb9\uff08\u5305\u62ec\u672c\u8eab\uff09\u7684\u6240\u6709$C_i\\geq size[y]$\uff0c\u4e14$val$\u5c3d\u53ef\u80fd\u9760\u53f3\u5373\u53ef\uff0c\u8fd9\u4e2a\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5c31\u80fd\u505a\u5230\u3002\n\n\u3000\u3000\u5982\u679c\u4e00\u4e2a\u70b9\u6709\u7236\u4eb2\uff0c\u6c42\u5b83\u7684\u6743\u503c\u65f6\u8981\u628a\u5b83\u7236\u4eb2\u4e3a\u5b50\u6811\u9884\u7559\u7684\u5927\u5c0f\u53bb\u6389\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6bcf\u4e2a\u7236\u4eb2\u9884\u7559\u7684\u5927\u5c0f\u53ea\u8981\u53bb\u6389\u4e00\u6b21\uff0c\u5199\u7684\u65f6\u5019\u5bb9\u6613\u5ffd\u7565\u8fd9\u4e00\u70b9\uff0cWA\u4e86\u534a\u5929T_T\u3002\n# \u4ee3\u7801\n\n    #include<iostream> \n    #include<cstring>\n    #include<cstdlib>\n    #include<cstdio>\n    #include<cmath> \n    #include<algorithm> \n    using namespace std;\n    const int maxn=500010, inf=1e9;\n    struct poi{int mn, delta;}tree[maxn<<2];\n    int n, N;\n    double k;\n    int a[maxn], b[maxn], ans[maxn], size[maxn], fa[maxn], cnt[maxn];\n    inline void read(int &k)\n    {\n    \tint f=1; k=0; char c=getchar();\n    \twhile(c<'0' || c>'9') c=='-'&&(f=-1), c=getchar();\n    \twhile(c<='9' && c>='0') k=k*10+c-'0', c=getchar();\n    \tk*=f;\n    }\n    inline bool cmp(int a, int b){return a>b;}\n    inline void addone(int x, int delta){tree[x].delta+=delta; tree[x].mn+=delta;}\n    inline void up(int x){tree[x].mn=min(tree[x<<1].mn, tree[x<<1|1].mn);}\n    inline void down(int x)\n    {\n    \taddone(x<<1, tree[x].delta);\n    \taddone(x<<1|1, tree[x].delta);\n    \ttree[x].delta=0;\n    }\n    void build(int x, int l, int r)\n    {\n    \tif(l==r){tree[x].mn=l; return;}\n    \tint mid=(l+r)>>1;\n    \tbuild(x<<1, l, mid); build(x<<1|1, mid+1, r);\n    \tup(x);\n    }\n    int query(int x, int l, int r, int k)\n    {\n    \tif(l==r) return (tree[x].mn>=k?l:l+1);\n    \tdown(x);\n    \tint mid=(l+r)>>1;\n    \tif(k<=tree[x<<1|1].mn) return query(x<<1, l, mid, k);\n    \telse return query(x<<1|1, mid+1, r, k);\n    }\n    void update(int x, int l, int r, int cl, int cr, int delta)\n    {\n    \tif(cl<=l && r<=cr){tree[x].mn+=delta; tree[x].delta+=delta; return;}\n    \tdown(x);\n    \tint mid=(l+r)>>1;\n    \tif(cl<=mid) update(x<<1, l, mid, cl, cr, delta);\n    \tif(cr>mid) update(x<<1|1, mid+1, r, cl, cr, delta);\n    \tup(x);\n    }\n    int main()\n    {\n    \tread(n); scanf(\"%lf\", &k);\t\n    \tfor(int i=1;i<=n;i++) read(a[i]);\n    \tsort(a+1, a+1+n, cmp);\n    \tfor(int i=n-1;i;i--) \n    \tif(a[i]==a[i+1]) cnt[i]=cnt[i+1]+1; else cnt[i]=0;\n    \tfor(int i=1;i<=n;i++) fa[i]=(int)floor(i/k), size[i]=1;\n    \tfor(int i=n;i;i--) size[fa[i]]+=size[i];\n    \tbuild(1, 1, n);\n    \tfor(int i=1;i<=n;i++)\n    \t{\n    \t\tif(fa[i]&&fa[i]!=fa[i-1]) update(1, 1, n, ans[fa[i]], n, size[fa[i]]-1);\n    \t\tint x=query(1, 1, n, size[i]); \n    \t\tx+=cnt[x]; cnt[x]++; x-=(cnt[x]-1); ans[i]=x; \n    \t\tupdate(1, 1, n, x, n, -size[i]);\n    \t}\n    \tfor(int i=1;i<=n;i++) printf(\"%d \", a[ans[i]]);\n    }\n",
        "postTime": 1523101425,
        "uid": 44003,
        "name": "Sakits",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4364 \u3010[\u4e5d\u7701\u8054\u80032018]IIIDX\u3011"
    },
    {
        "content": "### \u8fd9\u4e2a\u9898\u76ee\u82b1\u4e86\u6211\u6574\u6574\u4e24\u5929\u65f6\u95f4...\u53ef\u80fd\u662f\u5b66oi\u4ee5\u6765\u521a\u7684\u6700\u4e45\u7684\u4e00\u9053\u9898\u4e86..\n\n### \u679c\u7136\u6211\u8fd8\u662f\u592a\u5f31\u4e86 \u4f46\u5728\u6211\u4eec\u7684~~\u7ea2\u592a\u9633~~@ylsoi\u5e2e\u52a9\u4e0b\u8fd8\u662f\u60f3\u901a\u4e86\n\n\n\u8003\u8bd5\u7684\u65f6\u5019\u6211\u8fd9\u79cd\u8fa3\u9e21\u6253\u4e86\u8d2a\u5fc3\u8fd8\u7f8e\u6ecb\u6ecb\u5730\u4ee5\u4e3a\u81ea\u5df1\u6253\u7684\u662f\u6b63\u89e3\n\n\u9996\u5148\u662f55\u5206\u7684\u8d2a\u5fc3 \u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u70b9i\u5b83\u7684\u6743\u503c\u4e00\u5b9a\u5c0f\u4e8efloor(i/x)\n\n\u8fd9\u6837\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784 \u628a\u6240\u6709\u7684\u6570\u5168\u5b58\u8fdb\u4e00\u4e2a\u5806\u4e2d \u76f4\u63a5dfs\u56de\u6eaf\u7684\n\u65f6\u5019\u628a\u6700\u5927\u503c\u8d4b\u7ed9\u90a3\u4e2a\u70b9\u5c31ok\u4e86\n```cpp\n#include<bits/stdc++.h>\n#define For(i,a,b) for(register int i=a;i<=b;++i)\n#define FOR(i,a,b) for(register int i=a;i>=b;--i)\n#define go(x,i) for(register int i=head[x];i;i=next[i])\n#define inf (0x3f3f3f3f)\n#define next Next\n#define mid ((l+r)>>1)\n#define SZ(x) (x.size())\n#define min(a,b) (a<b?a:b)\n#define max(a,b) (a>b?a:b)\n#define tt template<typename T>\n\nusing namespace std;\n\ntt inline bool chkmax(T &_,T __){return _<__?_=__,1:0;}\ntt inline bool chkmin(T &_,T __){return _>__?_=__,1:0;}\n\ntt inline void read(T &_)\n{\n\tT ___=1,__=getchar();_=0;\n\tfor(;!isdigit(__);__=getchar()) if(__=='-') ___=-1;\n\tfor(;isdigit(__);__=getchar()) _=(_<<3)+(_<<1)+(__^48);\n\t_*=___;\n}\n\ninline void file()\n{\n\tfreopen(\"iiidx.in\",\"r\",stdin);\n\tfreopen(\"iiidx.out\",\"w\",stdout);\n}\n\nconst int maxn=5e5+10;\nvector<int> son[maxn];\npriority_queue<int> a;\nint fa[maxn];\nint ans[maxn],root;\nint n,vis[maxn];\nint dis[maxn],size[maxn];\ndouble k;\n\ninline void dfs(int x)\n{\n\tint len=son[x].size();\n\tFor(i,0,len-1)\n\t\tdfs(son[x][i]);\n\tif(x!=root)\n\t\tans[x]=a.top(),a.pop();\n}\n\nint main()\n{\n\tfile();\n\tread(n);cin>>k;\n\tint qaq;\n\tFor(i,1,n)\n\t{\n\t\tread(qaq);\n\t\ta.push(qaq);\n\t}\n\troot=n+1;\n\tFor(i,1,n)\n\t{\n\t\tint dad=i/k;\n\t\tdad=dad?dad:root;\n\t\tson[dad].push_back(i);\n\t\tfa[i]=dad;\n\t}\n\tdfs(root);\n\tFor(i,1,n)\n\t\tprintf(\"%d \",ans[i]);\n\treturn 0;\n}\n\n```\n\n\u5728\u6709\u591a\u4e2a\u6570\u76f8\u540c\u7684\u65f6\u5019\u8d2a\u5fc3\u662f\u663e\u7136\u9519\u8bef\u7684 \u4f8b\u5982\n \n $$ n=4;k=2;a=(1,1,1,2) $$\n \u6b63\u786e\u7b54\u6848\u5e94\u8be5\u662f $$ (1,1,2,1)$$\n \u800c\u8d2a\u5fc3\u6c42\u51fa\u6765\u7684\u7b54\u6848\u662f $$(1,1,1,2)$$\n \u8fd9\u6837\u5c31\u53ea\u670955\u5206\u4e86~\n \n \u90a3\u4e48\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u7ef4\u62a4\u8fd9\u6837\u4e00\u4e2a\u8fd1\u4f3c\u4e8e\u5c0f\u6839\u5806\u7684\u7ed3\u6784\n \n \u5bf9\u4e8e\u8fd9\u6837\u4e00\u7ec4\u6570 9 9 9 8 7 7 6 6 6 5\n \n$\\quad $\u5982\u679csize[1]\u662f7\u7684\u8bdd,\n \u90a3\u4e48\u6211\u4eec\u4f1a\u5148\u627e\u5230\u4e00\u4e2a\u6700\u9760\u8fd1\u5de6\u8fb9\u7684\u4f4d\u7f6e\u4f7f\u5f97\u5728\u5de6\u8fb9\u67096\u4e2a\u6570\u8981\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4f1a\u627e\u5230\u7b2c7\u4e2a\u4f4d\u7f6e\u4e0a\u7684 6 \u7136\u540e\u518d\u79fb\u52a8\u5230\u548c\u5b83\u76f8\u7b49\u6700\u53f3\u8fb9\u7684\u6570\u7684\u4f4d\u7f6e\u4e0a\uff0c\u4e5f\u5c31\u662f\u7b2c9\u4e2a\u4f4d\u7f6e\u4e0a\u76846\uff0c\u4e3a\u4ec0\u4e48\u8981\u79fb\u52a8\u5462\uff0c\u56e0\u4e3a\u8fd9\u6837\u5b50\u53ef\u4ee5\u7559\u51fa\u66f4\u591a\u7684\u6570\u7ed9\u540e\u9762\u7684\u70b9\u4f7f\u7528\uff0c\u5c31\u662f\u4fdd\u8bc11\u53f7\u70b9\u9009\u5230\u6700\u4f18\u7684\u503c\u60c5\u51b5\u4e0b\u5c3d\u91cf\u8ba9\u548c\u5b83\u540c\u4e00\u5c42\u7684\u70b9\u6700\u4f18\uff0c\u800c\u4e0d\u662f\u5b83\u7684\u5b50\u6811\u8fbe\u5230\u6700\u4f18\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ece1\u5230n\u6309\u987a\u5e8f\u53bb\u53d6\u70b9\uff0c\u5bf9\u4e8ei\u53f7\u70b9\u8981\u7ed9\u5b83\u7684\u5b50\u6811\u9884\u7559size[i]-1\u4e2a\u70b9\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u201c\u9884\u7559\u201d\u8fd9\u4e2a\u64cd\u4f5c\u3002 \n \n### $\\quad $ \u5b9a\u4e49f[i]\u6570\u7ec4\u8868\u793ai\u53f7\u70b9\u5de6\u8fb9(\u5305\u62ec\u5b83\u81ea\u5df1)\u6700\u591a\u53ef\u4ee5\u518d\u653e\u591a\u5c11\u4e2a\u70b9\uff0c \u90a3\u4e48f[i]\u6570\u7ec4\u4e00\u5b9a\u662f\u4e00\u4e2a\u5355\u8c03\u4e0d\u4e0b\u964d\u7684\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4F[i]\u6570\u7ec4\u548c\u67d0\u6bb5\u533a\u95f4\u7684F\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6bcf\u6b21\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u51fa\u90a3\u4e2a\u6700\u5de6\u8fb9\u7684\u4f4d\u7f6e\uff0c\u518d\u901a\u8fc7\u4e00\u4e2acnt\u6570\u7ec4\u6765\u5b58\u50a8\u5f53\u524d\u70b9\u5411\u53f3\u4f4d\u79fb\u51e0\u4e2a\u8ddd\u79bb\u80fd\u591f\u5230\u8fbe\u4f7f\u5f53\u524d\u70b9\u6700\u4f18\u5e76\u4e14\u80fd\u7ed9\u540c\u5c42\u7684\u70b9\u63d0\u4f9b\u4e00\u4e2a\u53ef\u80fd\u66f4\u4f18\u7684\u4f4d\u7f6e\u7684\u4f4d\u7f6e~~\uff08\u7406\u89e3\u4e00\u4e0b\u4e0b\u8fd9\u53e5\u8bdd\uff09~~ \u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86~\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\n\n\n```cpp\n/*============================\n * Author : Lunch_\n * Problem : iiidx\n * Algorithm : tanxin\n * Time : 2018.4.12\n * ==========================*/\n#include<bits/stdc++.h>\n#define For(i,a,b) for(register int i=a;i<=b;++i)\n#define FOR(i,a,b) for(register int i=a;i>=b;--i)\n#define mid ((l+r)>>1)\n#define ls (bh<<1)\n#define rs (ls|1)\n#define min(a,b) (a<b?a:b)\n#define max(a,b) (a>b?a:b)\n#define inf (0x3f3f3f3f)\n\ntypedef long long ll;\nusing std::cin;\nusing std::cout;\nusing std::endl;\nusing std::vector;\nusing std::sort;\n\nconst int maxn=5e5+10;\nint s[maxn<<2],lazy[maxn<<2];\nint cnt[maxn],a[maxn],fa[maxn],ans[maxn]; //cnt\u6570\u7ec4\u4e3a\u4e86\u627e\u5230\u67d0\u4e2a\u4f4d\u7f6e\u6700\u53f3\u8fb9\u4e0e\u5b83\u76f8\u540c\u7684\u6570(\u5982\u679c\u90a3\u4e2a\u6570\u5df2\u7ecf\u88ab\u9009\u4e86\u5c31\u6307\u9488\u5f80\u540e\u79fb\u52a8\u4e00\u4e2a\uff09\nint vis[maxn],n,size[maxn];\nvector<int> son[maxn]; \ndouble k;\n\ninline bool cmp(int x,int y) //\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n{\n\treturn x>y;  \n}\n\ninline void pushup(int bh)\n{\n\ts[bh]=min(s[ls],s[rs]);\n}\n\ninline void pushdown(int bh)\n{\n\tif(lazy[bh])\n\t{\n\t\tlazy[ls]+=lazy[bh];\n\t\tlazy[rs]+=lazy[bh];\n\t\ts[ls]+=lazy[bh];\n\t\ts[rs]+=lazy[bh];\n\t\tlazy[bh]=0;\n\t}\n}\n\ninline void build(int bh,int l,int r)\n{\n\tif(l==r)\n\t\ts[bh]=l; //\u6bcf\u4e2a\u70b9\u521d\u59cb\u5de6\u8fb9\u53ef\u7528\u7684\u6570\u5c31\u662f\u4ed6\u7684\u4e0b\u6807\n\telse\n\t{\n\t\tbuild(ls,l,mid);\n\t\tbuild(rs,mid+1,r);\n\t\tpushup(bh);\n\t}\n}\n\ninline void change(int bh,int l,int r,int x,int y,int z)\n{\n\tif(x<=l&&r<=y)\n\t{\n\t\tlazy[bh]+=z;\n\t\ts[bh]+=z;\n\t\treturn;\n\t}\n\tpushdown(bh);\n\tif(x<=mid) \n\t\tchange(ls,l,mid,x,y,z);\n\tif(y>mid)\n\t\tchange(rs,mid+1,r,x,y,z);\n\tpushup(bh);\n\n}\n\ninline int query(int bh,int l,int r,int x)\n{\n\tif(l==r)\n\t\treturn s[bh]>=x?l:l+1; //\u5728\u5e95\u4e0b\u7684if\u4e2ds[rs]==x\u65f6\u6211\u4eec\u4e5f\u662f\u5f80\u5de6\u8fb9\u9009\u7684 \u53ef\u80fd\u4f1a\u6f0f\u6389\u6700\u5c0f\u503c\u5728\u76f8\u90bb\u7684\u53f3\u533a\u95f4\u8fd9\u79cd\u60c5\u51b5\u6240\u4ee5\u5728\u8fd9\u91cc\u5224\u4e00\u4e0b\n\tpushdown(bh);\n\tif(x>s[rs])  //\u5c3d\u91cf\u5f80\u5de6\u8fb9\u9009\n\t\treturn query(rs,mid+1,r,x);\n\treturn query(ls,l,mid,x);\n}\n\nint main(void)\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"iidxes.in\",\"r\",stdin);\n\tfreopen(\"iidxes.out\",\"w\",stdout);\n#endif\n\tmemset(s,inf,sizeof(s));\n\tscanf(\"%d\",&n);cin>>k;\n\tFor(i,1,n)\n\t{\n\t\tscanf(\"%d\",&a[i]);\n\t\tsize[i]=1;\n\t}\n\tsort(a+1,a+n+1,cmp);\n\tbuild(1,1,n);\n\tFOR(i,n,1)\n\t{\n\t\tcnt[i]=a[i]==a[i+1]?cnt[i+1]+1:0; //\u63a8cnt\u6570\u7ec4\n\t\tint ovo=i/k;\n\t\tsize[ovo]+=size[i];\n\t\tfa[i]=ovo;\n\t}\n\tFor(i,1,n)\n\t{\n\t\tif(fa[i]&&!vis[fa[i]])\n\t\t{\n\t\t\tchange(1,1,n,ans[fa[i]],n,size[fa[i]]-1);//\u6bcf\u6b21\u4e00\u4e2a\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u8bbf\u95ee\u8fc7\u4ee5\u540e\u5c31\u628a\u9884\u7559\u7684\u7a7a\u95f4\u653e\u51fa\u6765\n\t\t\tvis[fa[i]]=1;\n\t\t}\n\t\tint now=query(1,1,n,size[i]);\n\t\tnow+=cnt[now];\n\t\t++cnt[now];//\u4f4d\u7f6e\u7528\u8fc7\u540e\u540e\u6307\u9488\u5411\u53f3\u8fb9\u504f\u79fb\u4e00\u4e2a\u5355\u4f4d\n\t\tans[i]=now;\n\t\tchange(1,1,n,ans[i],n,-size[i]);//\u7ed9\u5b83\u7684\u5b50\u6811\u9884\u7559\u7a7a\u95f4\n\t}\n\tFor(i,1,n)\n\t\tprintf(\"%d \",a[ans[i]]);\n}\n\n```\n\u7b2c\u4e00\u7bc7\u9898\u89e3\u5199\u7684\u4e0d\u597d\u591a\u591a\u5305\u6db5~~\n\n\n\u7136\u540e\u5e0c\u671b\u81ea\u5df1HNOI2018\u80fd\u8003\u597dqwq\n",
        "postTime": 1523512721,
        "uid": 6300,
        "name": "Lunch",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4364 \u3010[\u4e5d\u7701\u8054\u80032018]IIIDX\u3011"
    },
    {
        "content": "# [\u5e7f\u544a](https://www.cnblogs.com/ww3113306/p/9867556.html)\n\u4e00\u5f00\u59cb\u7ffb\u7f51\u4e0a\u9898\u89e3\u770b\u4e86\u597d\u4e45\u90fd\u6ca1\u770b\u61c2\uff0c\u611f\u89c9\u5f88\u591a\u4eba\u90fd\u8bb2\u5f97\u4e0d\u592a\u8be6\u7ec6\uff0c\u6240\u4ee5\u5bfc\u81f4\u4e00\u4e9b\u7ec6\u8282\u7684\u5730\u65b9\u770b\u4e0d\u61c2\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u5199\u8be6\u7ec6\u4e00\u70b9\u5427\uff0c\u5982\u679c\u6709\u4e0d\u5bf9\u7684or\u4e0d\u61c2\u7684\u53ef\u4ee5\u53d1\u8bc4\u8bba\u5728\u4e0b\u9762\u3002\n\n\u3000\u3000\u9996\u5148\u6709\u4e00\u4e2a\u6bd4\u8f83\u660e\u663e\u768450\u5206\u8d2a\u5fc3\uff1a\n\n\u3000\u3000\u5148\u628ad\u6392\u597d\u5e8f\uff0c\u7136\u540e\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u8d2a\u5fc3\u7684\u7ed9\u6bcf\u4e2a\u70b9\u9009\u503c\uff0c\u540c\u7b49\u6761\u4ef6\u4e0b\u4f18\u5148\u7f16\u53f7\u5927\u7684\uff0c\u4e8e\u662f\u8d8a\u5c0f\u7684\u503c\u4f1a\u8d8a\u8d8b\u8fd1\u4e8e\u653e\u5728\u7f16\u53f7\u8d8a\u5927\u7684\u4e0a\u9762\u3002\n\n\u3000\u3000\u4f46\u662f\u8fd9\u6837\u5728\u6570\u5b57\u91cd\u590d\u7684\u60c5\u51b5\u4e0b\u662f\u4e0d\u5bf9\u7684\uff0c \u6bd4\u5982\u4e0b\u9762\u8fd9\u7ec4\u6570\u636e\uff1a\n\n\u3000\u30004 3.0\n\n\u3000\u30001 1 2 2\n\n\u3000\u3000\u8d2a\u5fc3\u4f1a\u5f97\u52301 1 2 2 ,\u800c\u6b63\u786e\u7b54\u6848\u662f1 2 2 1.\n\n\u3000\u3000\u56e0\u6b64\u6362\u4e2a\u89d2\u5ea6\u8003\u8651\uff0c\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e00\u4e2a\u70b9\u53ef\u4ee5\u53d6\u5230\u4e00\u4e2a\u503cx\uff1f\n\n\u3000\u3000\u8bbe\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e3aSize[i],\u90a3\u4e48\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u53d6\u5230\u503cx\uff0c\u5f53\u4e14\u4ec5\u5f53\u5927\u4e8e\u7b49\u4e8ex\u7684\u8fd8\u6ca1\u88ab\u53d6\u7684\u503c\u7684\u4e2a\u6570 >= Size[i]\uff0c\u539f\u56e0\u5e94\u8be5\u662f\u5f88\u597d\u7406\u89e3\u7684\uff0c\u6bd5\u7adf\u8fd8\u8981\u6709Size[i] - 1\u548c\u6bd4x\u5927\u7684\u503c\u653e\u5728i\u7684\u5b50\u6811\u4e0a\u624d\u884c\u3002\n\n\u3000\u3000\u56e0\u6b64\u6211\u4eec\u5148\u5bf9d\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u53bb\u91cd\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u503c\u7684\u51fa\u73b0\u6b21\u6570cnt[x], \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u7edf\u8ba1\u4e00\u4e2af[x]\u8868\u793a\u5927\u4e8e\u7b49\u4e8ex\u7684\u8fd8\u6ca1\u88ab\u53d6\u7684\u503c\u7684\u4e2a\u6570\u4e3af[x].\n\n\u3000\u3000\n\n\u3000\u3000\u5047\u8bbe\u6211\u4eec\u7ed9\u8282\u70b9i\u5339\u914d\u4e0a\u4e86\u4e00\u4e2a\u503cx\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7b56\u51b3\u7b56\u5bf9\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u503c\u7684\u5f71\u54cd\u662f\u786e\u5b9a\u7684\uff0c\u56e0\u6b64\u5c06\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u503c\u7684f\u6570\u7ec4\u90fd\u51cf\u5c0fSIze[i],\u8868\u793a\u8fd9\u4e9b\u503c\u7684\u53f3\u8fb9\u53ef\u4ee5\u53d6\u7684\u503c\u53c8\u51cf\u5c0f\u4e86Size[i]\u4e2a\u3002\n\n\u3000\u3000\u6211\u4eec\u5c06\u548c\u8fd9\u4e2a\u64cd\u4f5c\u79f0\u4e3a\u201c\u9884\u5b9a\u201d\uff0c\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u5e76\u4e0d\u77e5\u9053\u70b9i\u7684\u5b50\u6811\u5206\u522b\u4f1a\u9009\u62e9\u54ea\u4e9b\u503c\uff0c\u4f46\u6211\u4eec\u77e5\u9053\u5b83\u4eec\u8981\u9009\u51e0\u4e2a\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u76f8\u5f53\u4e8e\u5148\u544a\u8bc9\u540e\u9762\u7684\u4eba\uff0c\u8fd9\u4e2a\u8282\u70b9i\u5df2\u7ecf\u5750\u5230\u4e86x\u8fd9\u4e2a\u503c\u4e0a\uff0c\u5e76\u4e14\u8981\u6c42\u540e\u9762\u7684\u4eba\u4e3a\u5b83\u7684\u5b50\u6811\u7559Size[i] - 1\u4e2a\u5ea7\u4f4d\u3002\n\n\u3000\u3000\u56e0\u4e3a\u8fd9\u4e2a\u51b3\u7b56\u5bf9\u5927\u4e8ex\u7684\u503c\u7684\u5f71\u54cd\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6211\u4eec\u6682\u65f6\u6ca1\u6709\u4fee\u6539\u5b83\uff0c\u4f46\u5176\u5b9e\u8fd9\u4e2a\u51b3\u7b56\u4f1a\u5bf9\u5b83\u4ea7\u751f\u5f71\u54cd\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u503ck\uff0c\u5728\u53d6\u5b83\u4e4b\u524d\u7684\u51b3\u7b56\u5230\u5e95\u5bf9\u5b83\u4ea7\u751f\u4e86\u4ec0\u4e48\u6837\u7684\u5f71\u54cd\u5462\uff1f\n\n\u3000\u3000\u5bf9\u4e8e\u4e00\u4e2a\u503ck\uff0c\u5b83\u7684\u771f\u6b63\u7684f[k]\u5176\u5b9e\u662fmin(f[1], f[2], f[3] ....f[k]),\u56e0\u4e3a\u6bcf\u4e2af\u503c\u90fd\u76f8\u5f53\u4e8e\u4e00\u4e2a\u540e\u7f00\u548c\uff0c\u4e00\u4e2a\u5408\u6cd5\u7684\u503c\u4e0d\u80fd\u4f7f\u5f97f[k]\u53cd\u800c\u6bd4\u5b83\u524d\u9762\u7684f\u503c\u66f4\u5927\uff0c\u56e0\u4e3a\u524d\u9762\u7684f\u503c\u8981\u6bd4f[k]\u7edf\u8ba1\u4e86\u66f4\u591a\u7684\u6570\u3002\n\n\u3000\u3000\n\n\u3000\u3000\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u4f7f\u5f97\u5b57\u5178\u5e8f\u6700\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u6309\u7167\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u7ed9\u8282\u70b9\u5206\u914d\u503c\u663e\u7136\u662f\u6700\u4f18\u7684\u3002\n\n\u3000\u3000\u56e0\u6b64\u6211\u4eec\u6bcf\u6b21\u5c31\u662f\u8981\u5728\u5269\u4e0b\u7684\u6570\u4e0a\u5bfb\u627e\u4e00\u4e2a\u6700\u9760\u53f3\u7684\uff0c\u5e76\u4e14\u4f7f\u5f97min(f[1], f[2], f[3] ...f[k]) >= Size[i]\u7684k\u3002\n\n\u3000\u3000\u56e0\u4e3a\u6d89\u53ca\u533a\u95f4\u4fee\u6539\u548c\u67e5\u8be2\uff0c\u6211\u4eec\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u6240\u6709\u7684f\u503c\uff0c\u6bcf\u6b21\u9009\u597d\u4e00\u4e2a\u503c\uff0c\u6211\u4eec\u5c31\u628a\u4e00\u4e9b\u5df2\u7ecf\u786e\u5b9a\u7684\u5f71\u54cd\u4ece\u7ebf\u6bb5\u6811\u4e2d\u5220\u9664\uff08\u5bf9\u4e00\u4e2a\u533a\u95f4\u8fdb\u884c- Size[i]\u7684\u64cd\u4f5c\uff09\u3002\n\n\u3000\u3000\u5bf9\u4e8e\u6bcf\u6b21\u9009\u503c\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u4e8c\u5206\u6765\u67e5\u627e\u6ee1\u8db3\u4e0a\u8ff0\u7c97\u4f53\u5b57\u8981\u6c42\u7684\u6700\u9760\u53f3\u7684\u503c\u3002\n\n\u3000\u3000\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6bcf\u6b21\u67e5\u8be2\u524d\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u7684\u5f71\u54cd\u8fd8\u6ca1\u6709\u88ab\u64a4\u9500\u7684\u8bdd\uff0c\u5e94\u8be5\u8981\u64a4\u9500\u5b83\u7236\u4eb2\u7684\u5f71\u54cd\u3002\uff08\u5373\u628a\u7236\u4eb2\u7ed9\u5b50\u6811\u5360\u7684\u5ea7\u7ed9\u52a0\u56de\u6765 \uff1a1 ~ \u7236\u4eb2\u5339\u914d\u503c\u7684f\u503c \u52a0\u4e0a Size[fa] - 1\uff09\n\n\u3000\u3000\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u3000\u3000\u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679c\u4e0d\u64a4\u9500\u7236\u4eb2\u7684\u5f71\u54cd\u7684\u8bdd\uff0c\u5c82\u4e0d\u662f\u76f8\u5f53\u4e8e\u522b\u4eba\u7279\u610f\u7ed9\u4f60\u5360\u4e86\u5ea7\uff0c\u7ed3\u679c\u4f60\u81ea\u5df1\u8fd8\u4e0d\u80fd\u5750\u4e0a\u53bb\uff1f\n\n\u3000\u3000\u56e0\u4e3a\u4e00\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u90fd\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u64a4\u9500\u7684\u7236\u4eb2\u7684\u5f71\u54cd\u540e\uff0c\u4f1a\u9a6c\u4e0a\u628a\u4e0d\u5e94\u8be5\u64a4\u9500\u7684\u90e8\u5206\u7ed9\u8865\u4e0a\uff08\u513f\u5b50\u7684\u5b50\u6811\u5728\u4e0d\u65ad\u7684\u52a0\u4e0a\u6765\uff09\uff0c\u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u5bf9\u4e4b\u540e\u7684\u51b3\u7b56\u9020\u6210\u5f71\u54cd\n  ```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define R register int\n#define AC 551000\n#define ac 2500000\n\nint n, w, go, tot, rnt;\ndouble k;\nint ans[AC], cnt[AC], father[AC], Size[AC], f[AC], s[AC];//cnt[i]\u8868\u793a\u6392\u540d\u7b2ci\u4f4d\u7684d\u503c\u51fa\u73b0\u7684\u6b21\u6570\nbool done[AC];\n\ninline int read()\n{\n    int x = 0;char c = getchar();\n    while(c > '9' || c < '0') c = getchar();\n    while(c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n    return x;\n}\n\ninline int Min(int a, int b){\n    return a > b ? b : a;\n}\n\nstruct seg_tree{\n    int tree[ac], lazy[ac], l[ac], r[ac];\n    \n    inline void update(int x){\n        tree[x] = Min(tree[x * 2], tree[x * 2 + 1]);\n    }\n    \n    inline void pushdown(int x)\n    {\n        if(lazy[x])\n        {\n            int ll = x * 2, rr = ll + 1;\n            tree[ll] += lazy[x], tree[rr] += lazy[x];\n            lazy[ll] += lazy[x], lazy[rr] += lazy[x];\n            lazy[x] = 0;\n        }\n    }\n    \n    void build(int x, int ll, int rr)\n    {\n        l[x] = ll, r[x] = rr;\n        if(ll == rr){tree[x] = f[ll]; return ;}\n        int mid = (ll + rr) >> 1;\n        build(x * 2, ll, mid), build(x * 2 + 1, mid + 1, rr);\n        update(x);\n    }\n    \n    void change(int x, int ll, int rr)\n    {\n        pushdown(x);\n        if(l[x] == ll && r[x] == rr)\n        {\n            tree[x] += w, lazy[x] += w;\n            return ;\n        }\n        int mid = (l[x] + r[x]) >> 1;\n        if(rr <= mid) change(x * 2, ll, rr);\n        else if(ll > mid) change(x * 2 + 1, ll, rr);\n        else change(x * 2, ll, mid), change(x * 2 + 1, mid + 1, rr);\n        update(x);\n    }\n    \n    void find(int x)\n    {\n        pushdown(x);\n        if(l[x] == r[x]){go = tree[x] >= w ? l[x] : l[x] - 1; return ;}\n        if(tree[x * 2] >= w) find(x * 2 + 1);\n        else find(x * 2); \n        update(x);\n    }\n}T;\n\nvoid pre()\n{\n    n = read(), scanf(\"%lf\", &k);\n    for(R i = 1; i <= n; i ++) s[i] = read(), Size[i] = 1;\n    sort(s + 1, s + n + 1);\n    for(R i = 1; i <= n; i ++)\n    {\n        ++ cnt[tot + 1];\n        if(s[i] != s[i + 1]) s[++tot] = s[i];\n    }\n    for(R i = tot; i; i --)\n        f[i] = f[i + 1] + cnt[i];//\u5b58\u4e0b\u6bcf\u4e2a\u503c\u53f3\u8fb9\u6709\u591a\u5c11\u4e2a\u53ef\u4f9b\u9009\u62e9\u7684\u503c\n    for(R i = n; i; i --) \n        father[i] = floor(i / k), Size[father[i]] += Size[i];//\u83b7\u53d6\u6bcf\u4e2a\u8282\u70b9\u7684Size\n    T.build(1, 1, tot);\n}\n\nvoid work()\n{\n    for(R i = 1; i <= n; i ++)\n    {\n        int fa = floor(i / k);\n        if(fa && !done[fa]) w = Size[fa] - 1, T.change(1, 1, ans[fa]);//\u5982\u679c\u6709\u7236\u4eb2\u7684\u8bdd\uff0c\u8981\u5148\u628a\u7ed9\u513f\u5b50\u9884\u5b9a\u7684\u8282\u70b9\u8fd8\u56de\u6765\u4ee5\u5e2e\u52a9\u6b63\u786e\u5224\u65ad\n        w = Size[i], done[fa] = true;\n        T.find(1), w = -Size[i];//\u5148\u627e\u5230\u4e00\u4e2a\u5408\u6cd5\u7684\u70b9\n        T.change(1, 1, go);//\u518d\u51cf\u53bb\u5df2\u7ecf\u88ab\u9884\u5b9a\u7684\u4f4d\u7f6e\n        ans[i] = go;\n        printf(\"%d \", s[go]); \n    }\n    printf(\"\\n\");\n}\n\nint main()\n{\n//    freopen(\"in.in\", \"r\", stdin);\n    pre();\n    work();\n//    fclose(stdin);\n    return 0;\n}\n```",
        "postTime": 1541059555,
        "uid": 47136,
        "name": "ww3113306",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4364 \u3010[\u4e5d\u7701\u8054\u80032018]IIIDX\u3011"
    },
    {
        "content": "**\u9898\u610f:**\n\n\u7ed9\u51fa $k$ \u548c $n$ \u4e2a\u6570\uff0c\u6784\u9020\u4e00\u4e2a\u5e8f\u5217\u4f7f\u5f97 $d[i]>=d[i/k]$\uff0c\u5e76\u4e14\u5b57\u5178\u5e8f\u6700\u5927\u3002\n\n\u672c\u9898\u4e00\u4e2a\u8d2a\u5fc3\u7684\u601d\u8def\u5df2\u7ecf\u88ab\u8bc1\u660e\u662f\u9519\u8bef\u7684\u4e86\uff0c~~\u867d\u7136\u6211\u5728\u8003\u573a\u4e0a\u7684\u65f6\u5019\u8fde\u8d2a\u5fc3\u90fd\u6ca1\u60f3\u51fa\u6765~~\n\n**\u6b63\u786e\u7684\u89e3\u6cd5\uff1a**\n\n\u5148**\u4ece\u5927\u5230\u5c0f\u6392\u5e8f**\uff0c\u6bcf\u6b21\u627e\u4e00\u4e2a**\u6700\u9760\u5de6**\u7684\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u4f4d\u7f6e\u5de6\u8fb9**\u8db3\u591f\u653e\u4e0b\u5f53\u524d\u8282\u70b9\u7684\u5b50\u6811**\u3002\u82e5\u6709\u591a\u4e2a\u503c\u76f8\u540c\uff0c\u5e94\u8be5\u653e\u5230**\u6700\u53f3\u8fb9\u90a3\u4e2a\u503c**\u90a3\u91cc\n\n\u663e\u7136**\u6ee1\u8db3\u5355\u8c03\u6027**\uff0c\u6bd5\u7adf\u5982\u679c\u67d0\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u6ee1\u8db3\uff0c\u90a3\u4e48\u8be5\u4f4d\u7f6e\u53f3\u8fb9\u7684\u4f4d\u7f6e\u4e5f\u4e00\u5b9a\u80fd\u591f\u6ee1\u8db3\u3002\n\n\u90a3\u4e48\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\u6ca1\u9519\uff01\u5c31\u662f\u4e8c\u5206+\u7ebf\u6bb5\u6811\uff01\n\n\n\n**\u5177\u4f53\u505a\u6cd5\uff1a**\n\n1\u3001\u5148\u5efa\u6210\u4e00\u68f5\u6811\uff0c\u5176\u4e2d **$i$ \u8282\u70b9\u662f $i/k$ \u8282\u70b9\u7684\u513f\u5b50**\uff0c\u8868\u793a $i$ \u53f7\u8282\u70b9\u5e94\u8be5>= $i/k$ \u53f7\u8282\u70b9\u3002\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f $size[i]$\u3002\n\n2\u3001\u5efa\u7ebf\u6bb5\u6811\uff0c\u8bb0\u5f55\u4e0b\u6765\u6bcf\u4e2a\u533a\u95f4\u7684**\u6700\u5c0f\u503c**\uff0c\u7528\u6765\u67e5\u8be2\u3002\u7b2c $i$ \u4e2a\u4f4d\u7f6e\u5de6\u8fb9\u6709 $i$ \u4e2a\u80fd\u7528\u7684\u4f4d\u7f6e\u3002\n\n3\u3001\u6bcf\u6b21\u5728\u7ebf\u6bb5\u6811\uff0c\u67e5\u627e\u4e00\u4e2a\u4f4d\u7f6e\u4f7f\u5f97\u8be5**\u4f4d\u7f6e\u5de6\u8fb9\u80fd\u7528\u7684\u4f4d\u7f6e\u4e2a\u6570>=\u8be5\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u3002**\u5982\u679c\u591a\u503c\u76f8\u540c\uff0c\u5c31\u5230\u6700\u53f3\u8fb9\u90a3\u91cc\u3002\n\n4\u3001\u66f4\u65b0\u540e\u65b9\u4f4d\u7f6e\u5de6\u8fb9\u80fd\u7528\u7684\u4f4d\u7f6e\u4e2a\u6570\uff0c\u90fd\u51cf\u53bb $size[i]$\u3002\n\n5\u3001\u91cd\u590d $n$ \u6b21\uff0c\u6bcf\u6b21\u590d\u6742\u5ea6 $log(n)$\uff0c\u603b\u590d\u6742\u5ea6 $O(nlogn)$\u3002\n\n\n\n\n------------\n\n\u5148\u8bf4\u6211\u7684\u4e00\u4e2a\u9519\u8bef\u7684\u60f3\u6cd5\uff0c\u53ef\u4ee5\u5ffd\u7565\uff1a\n\n\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u70b9\u5982\u679c\u88ab\u201c\u9884\u7559\u201d\u4e86\u6216\u8005\u88ab\u7528\u4e86\uff0c\u5c31\u8bbe\u4e3a $0$\uff0c\u5426\u5219\u8bbe\u4e3a $1$\u3002\n\n\u6bcf\u6b21\u4e8c\u5206\u67e5\u627e\u524d\u7f00\u548c\uff0c\u627e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u8be5\u4f4d\u7f6e\u5de6\u8fb9\u7684\u548c>= $size[i]$\uff0c\u7136\u540e\u628a\u5de6\u8fb9\u7684\u8282\u70b9 $size[i]$ \u4e2a\u8282\u70b9\u90fd\u8d4b\u503c\u4e3a $0$ \u3002\n\n\u4e3a\u4ec0\u4e48\u9519\u4e86\u5462\uff1f\u56e0\u4e3a\u627e\u5230\u4e00\u4e2a\u4f4d\u7f6e\u540e\uff0c\u82e5\u6709\u591a\u503c\u76f8\u540c\uff0c\u5230\u8fbe\u53f3\u8fb9\u540e\uff0c\u53ef\u80fd\u5de6\u8fb9\u6709 $10$ \u4e2a\u4f4d\u7f6e\uff0c\u4f46\u53ea\u7528\u628a $5$ \u4e2a\u4f4d\u7f6e\u9884\u7559\u8bbe\u4e3a $0$ \u3002\u8fd9\u65f6\u5019\u5c31**\u6ca1\u6cd5\u786e\u5b9a\u5230\u5e95\u9884\u7559\u54ea\u51e0\u4e2a\u4f4d\u7f6e**\uff0c\u6ca1\u6cd5\u8d4b\u503c\uff0c\u6240\u4ee5\u5f53\u6709\u503c\u76f8\u540c\u7684\u65f6\u5019\u5c31 $RE$ \u4e86\uff0c\u5e76\u4e14\u590d\u6742\u5ea6 $O(nlog$ $^2$ $n)$ \u4e5f\u4e0d\u5bf9\n\n\n------------\n**\u4e0b\u9762\u662f\u6b63\u89e3\uff1a**\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c$find$ \u51fd\u6570\u67e5\u627e\u7684\u65f6\u5019\uff0c**\u8981\u6839\u636e\u533a\u95f4\u6700\u5c0f\u503c\u6765\u786e\u5b9a\u662f\u5411\u5de6\u513f\u5b50\u8fd8\u662f\u53f3\u513f\u5b50\u7ee7\u7eed\u627e**\n\n$nxt$ \u6570\u7ec4\u7528\u6765\u6c42\u540c\u4e00\u4e2a\u503c\u7684\u6700\u53f3\u8fb9\u5728\u54ea\u4e2a\u4f4d\u7f6e\u3002\u66f4\u65b0\u7684\u65f6\u5019\u5411\u5de6\u79fb\u4e00\u4e2a\uff0c\u9632\u6b62\u53d6\u5230\u76f8\u540c\u7684\u4f4d\u7f6e\u3002\n\n\u8fd8\u6709\uff0c\u7ebf\u6bb5\u6811\u4fee\u6539\u7684\u65f6\u5019\uff0c\u6700\u5c0f\u503c\u76f4\u63a5\u52a0\u4e0a\u4fee\u6539\u7684\u503c\u5c31\u884c\u4e86\uff0c\u4e0d\u7528\u4e58\u4e0a\u533a\u95f4\u957f\u5ea6\n\n\u8fd8\u6709\uff0c\u66f4\u65b0\u513f\u5b50\u8282\u70b9\u7684\u65f6\u5019\uff0c**\u8981\u628a\u4ed6\u7684\u7236\u4eb2\u7ed9\u4ed6\u9884\u7559\u7684\u4f4d\u7f6e\u5148\u53bb\u6389**\n\n```cpp\n#include<bits/stdc++.h>\n#define N 500005\n#define r1 (p<<1)\n#define r2 (p<<1|1)\n#define mid ((l+r)>>1)\n\nusing namespace std;\n\ndouble k;\nint n,a[N],f[N],ans[N];\nint size[N],fa[N],nxt[N];\nint mn[N<<2],add[N<<2];\n\ninline void rd(int &x){\n    x=0;char ch=0;\n    while(!isdigit(ch)) ch=getchar();\n    while( isdigit(ch)) x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n}\n\nvoid build(int p,int l,int r){\n    if(l==r){mn[p]=l;return ;}\n    build(r1,l,mid); build(r2,mid+1,r);\n    mn[p]=min(mn[r1],mn[r2]);\n}\nvoid push(int p){\n    if(!add[p]) return ;\n    mn[r1]+=add[p];mn[r2]+=add[p];\n    add[r1]+=add[p];add[r2]+=add[p];add[p]=0;\n}\nvoid change(int p,int L,int R,int d,int l=1,int r=n){\n    if(L<=l and r<=R) return add[p]+=d,mn[p]+=d,void(); push(p);\n    if(L<=mid) change(r1,L,R,d,l,mid);\n    if(R >mid) change(r2,L,R,d,mid+1,r);\n    mn[p]=min(mn[r1],mn[r2]);\n}\nvoid init()\n{\n    sort(a+1,a+1+n);reverse(a+1,a+1+n);\n    for(int i=n-1;i;i--)\n        if(a[i]==a[i+1]) nxt[i]=nxt[i+1]+1;\n    for(int i=1;i<=n;i++)\n        fa[i]=i/k,size[i]=1;\n    for(int i=n;i;i--)\n        size[fa[i]]+=size[i];\n}\nint find(int p,int d,int l=1,int r=n){\n    if(l==r) return l+(mn[p]<d); push(p);\n    return d<=mn[r2] ? find(r1,d,l,mid) : find(r2,d,mid+1,r);\n}\nint main()\n{\n    scanf(\"%d%lf\",&n,&k);\n    for(int i=1;i<=n;i++) rd(a[i]);\n    init(); build(1,1,n);\n    for(int i=1;i<=n;i++)\n    {\n        if(fa[i]!=fa[i-1]) change(1,ans[fa[i]],n,size[fa[i]]-1);\n        int p=find(1,size[i]);\n        p+=nxt[p];nxt[p]++;p-=nxt[p]-1;ans[i]=p;\n        change(1,p,n,-size[i]);\n    }\n    for(int i=1;i<=n;i++)\n        printf(\"%d \",a[ans[i]]);\n}\n```",
        "postTime": 1523288193,
        "uid": 56659,
        "name": "AubRain",
        "ccfLevel": 0,
        "title": "[\u4e5d\u7701\u8054\u8003]IIIDX\u2014\u2014\u7ebf\u6bb5\u6811"
    },
    {
        "content": "**UPD 2021/3/26 \u611f\u8c22 @LiM_817 \u53d1\u73b0\u4e86\u4e00\u4e9b\u7b14\u8bef\uff0c\u5df2\u4fee\u6539**\n\n\u6211\u8ba4\u4e3a\u5176\u5b83\u9898\u89e3\u4e2d $f$ \u6570\u7ec4\uff08\u4e5f\u5c31\u662f\u201c\u53f3\u8fb9\u6709\u591a\u5c11\u7a7a\u4f4d\u201d\u4e4b\u7c7b\u7684\u8868\u8ff0\uff09\u7684\u5b9a\u4e49\u591a\u5c11\u4e0d\u592a\u660e\u4e86\u6216\u6709\u95ee\u9898\uff0c\u4e8e\u662f\u5199\u4e00\u4e2a\u6211\u8ba4\u4e3a\u6e05\u695a\u4e00\u4e9b\u7684\uff1a\n\n\u9996\u5148\u5f88\u5bb9\u6613\u60f3\u5230\u4e00\u4e2a\uff08\u53ea\u5728 $d_i$ \u4e92\u4e0d\u76f8\u540c\u65f6\u6b63\u786e\uff09 \u7684\u8d2a\u5fc3\uff0c\u8fd9\u4e2a\u8d2a\u5fc3\u7684\u601d\u8def\u4ee5\u53ca\u53cd\u4f8b\u53c2\u8003\u5176\u5b83\u9898\u89e3\u3002\n\n\u6b63\u89e3\u5219\u662f\u8003\u8651**\u6309\u4f4d\u786e\u5b9a**\uff1a\u8003\u8651\u4ece $1$ \u5230 $n$ \u4f9d\u6b21\u786e\u5b9a\u8be5\u70b9\u9009\u4e86\u54ea\u4e2a\u503c\uff0c\u786e\u5b9a $i$ \u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\u65f6\uff0c\u6211\u4eec\u9009\u53d6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u503c\uff1a\n\n1. \u4f7f\u5f97\u8fd9\u4e2a\u4e1c\u897f\u786e\u5b9a\u4e4b\u540e\uff0c\u5b58\u5728\u4e00\u79cd $i+1$ \u5230 $n$ \u7684\u5206\u914d\u65b9\u6848\uff0c\u4f7f\u5f97\u603b\u65b9\u6848\u5408\u6cd5\u3002\n2. \u5c3d\u53ef\u80fd\u5927\u3002\n\n\u5bb9\u6613\u8bc1\u660e\u8fd9\u4e2a\u8fc7\u7a0b\u7ed3\u675f\u4e4b\u540e\u53d6\u5230\u7684\u5c31\u662f\u5b57\u5178\u5e8f\u6700\u5927\u7684\u5408\u6cd5\u65b9\u6848\u3002\uff08\u8fd9\u4e2a\u65b9\u6cd5\u5bf9\u4e8e\u5176\u5b83\u6c42\u5b57\u5178\u5e8f\u6700\u5927\u503c\u7684\u65b9\u6848\u4e5f\u9002\u7528\uff0c\u662f\u4e00\u4e2a\u975e\u5e38\u5957\u8def\u7684\u4e1c\u897f\uff09\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u601d\u8def\u5c06\u4f1a\u662f\u8fd9\u6837\u7684\uff1a\n\n- \u65e2\u7136\u662f\u9010\u4f4d\u786e\u5b9a\uff0c\u90a3\u6211\u4eec\u8003\u8651\u52a8\u6001\u786e\u5b9a\uff0c\u52a8\u6001\u7ef4\u62a4\u63a5\u4e0b\u6765\u786e\u5b9a\u4ec0\u4e48\u5408\u6cd5\n- \u786e\u5b9a\u4e86\u4e00\u4e2a\u70b9\u4e0d\u4ec5\u4ec5\u786e\u5b9a\u4e86\u8fd9\u4e2a\u503c\uff0c\u5176\u5b9e\u76f8\u5f53\u4e8e\u9650\u5236\u4e86\u5b83\u7684\u5b50\u6811\u5185\u7684\u70b9\u90fd $\\geq x$\uff0c\u6216\u8005\u8bf4\uff0c\u8fd9\u662f\u5bf9\u4e4b\u540e\u7684\u5c1a\u672a\u786e\u5b9a\u7684\u503c\u8fdb\u884c\u9650\u5b9a\u3002\n- \u6211\u4eec\u53d1\u73b0\u4e0a\u8ff0\u9650\u5b9a\u662f\u5145\u5206\u5fc5\u8981\u7684\uff0c\u4e8e\u662f\u53ef\u4ee5\u76f4\u63a5\u7ef4\u62a4\u5b83\u4f5c\u4e3a\u662f\u5426\u5408\u6cd5\u7684\u5224\u636e\u3002\n- \u6839\u636e\u9650\u5236\u6ee1\u8db3\u7684\u8d2a\u5fc3\u6027\u8d28\uff0c\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u5947\u5999\u5730\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\n\n------------\n\n\u8003\u8651\u672c\u9898\u4e2d\u6211\u4eec\u5982\u4f55\u5224\u5b9a\u4e00\u4e2a\u503c\u7684\u9009\u53d6\u662f\u5426\u5408\u6cd5\u3002\n\n\u82e5\u6211\u4eec\u65b0\u786e\u5b9a\u4e86\u67d0\u4e2a\u4f4d\u7f6e\u7684\u503c\uff0c\u8003\u8651\u786e\u5b9a\u4e86\u5b83\u4e4b\u540e\uff0c\u4f1a\u600e\u4e48\u5f71\u54cd\u63a5\u4e0b\u6765\u7684\u70b9\u53d6\u503c\u7684\u5408\u6cd5\u6027\u3002\n\n\u8003\u8651\u9650\u5236\uff1a\u4e00\u4e2a\u5b50\u6811\u5185\u7684\u6240\u6709\u70b9\u8981 $\\geq$ \u5176\u6839\u3002\n\n\u4ee4\u4e00\u4e2a\u70b9\u5b50\u6811\u5927\u5c0f\u4e3a $s_u$\n\n\u90a3\u6211\u4eec\u77e5\u9053\uff0c\u82e5\u8fd9\u4e2a\u4f4d\u7f6e $u$ \u786e\u5b9a\u662f $x$\uff0c\u90a3\u4e48\u5176\u5b50\u6811\u5185\u5fc5\u987b\u4e5f\u6709 $s_u$ \u4e2a $\\geq x$ \u7684\u6570\u3002\n\n\u800c\u4e14\u8fd9\u4e2a\u6761\u4ef6\u8fd8\u662f\u5145\u5206\u5fc5\u8981\u7684\uff1a\u82e5\u627e\u5f97\u5230 $s_u$ \u4e2a $\\geq x$ \u7684\u6570\uff0c\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u5206\u914d\u65b9\u6848\u4f7f\u5f97 $u$ \u8fd9\u9897\u5b50\u6811\u5408\u6cd5\u3002\n\n\u800c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u786e\u5b9a $u$ \u65f6\uff0c\u5176\u5b50\u6811\u5185\u8fd8\u80af\u5b9a\u6ca1\u6709\u5df2\u7ecf\u786e\u5b9a\u4e86\u7684\u5730\u65b9\uff0c\u6240\u4ee5\u5b83\u5e26\u6765\u7684\u9650\u5236\u5c31\u662f\uff0c\u8981\u6709 $s_u$ \u4e2a\uff0c$\\geq x$ \u7684\u6570\u5206\u914d\u7ed9\u8fd9\u68f5\u5b50\u6811\u3002\u6ce8\u610f\u4e4b\u524d\u8bf4\u660e\u7684\u6761\u4ef6\u5145\u8981\uff0c\u6240\u4ee5\u8fd9\u4e2a\u9650\u5236\u662f**\u5b8c\u5907**\u7684\uff0c\u6216\u8005\u8bf4\uff0c**\u7b49\u4ef7\u4e8e\u539f\u6761\u4ef6\u7684**\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5f15\u5165\u7684\u9650\u5236\u5c31\u5f62\u5982\uff1a**\u9700\u8981\u62ff\u8d70 $a_i$ \u4e2a $\\geq b_i$ \u7684\u6570**\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e2a\u6761\u4ef6\u5176\u5b9e\u9700\u8981\u5728\u786e\u5b9a $u$ \u7684\u76f4\u63a5\u5b69\u5b50\u7684\u65f6\u5019\u8fdb\u884c\u53bb\u9664\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u5f53\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u6709\u7740\u4e0a\u8ff0\u9650\u5236\uff0c\u987b\u5c06\u5176\u5220\u9664\uff0c\u5e76\u4e14\u6362\u6210\u4e00\u4e2a \u201c\u9700\u8981\u62ff\u8d70\u4e00\u4e2a $d_i$\u201d\u2014\u2014\u56e0\u4e3a\u7236\u4eb2\u7684\u503c\u5df2\u7ecf\u786e\u5b9a\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e2a\u503c\u53bb\u6389\u4e00\u4e2a\u3002\n\uff08\u521a\u5f00\u59cb\u5c31\u53bb\u9664\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u56e0\u4e3a\u5b69\u5b50\u662f\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6761\u4ef6\u5728\u5f00\u59cb\u88ab\u6ee1\u8db3\u5c31\u4e00\u5b9a\u4e00\u76f4\u88ab\u6ee1\u8db3\uff09\n\n\n\u800c\u76f4\u89c2\u4e0a\u6765\u8bb2\uff0c\u6211\u4eec\u5e72\u7684\u4e8b\u60c5\u5176\u5b9e\u662f\uff1a**\u628a\u6574\u68f5\u5b50\u6811\u7684\u9650\u5236\uff0c\u5206\u6210\u6839\u7684\u9650\u5236\u548c\u8fd9\u9897\u5b50\u6811\u6302\u5728\u6839\u4e0a\u6bcf\u68f5\u5b50\u6811\u7684\u9650\u5236\u3002**\n\n\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u652f\u6301\u9650\u5236\u7684 **\u5220\u9664\u64cd\u4f5c**\uff0c\u4ee5\u53ca\u5f62\u5982 **\u9700\u8981\u62ff\u8d70\u4e00\u4e2a $=b_i$ \u7684\u6570** \u7684\u64cd\u4f5c\n\n\u9650\u5236\u8bf4\u5b8c\u4e86\uff0c\u600e\u4e48\u5224\u65ad\u54ea\u4e9b\u503c\u6ee1\u8db3\u9650\u5236\uff1f\u82e5\u6211\u4eec\u73b0\u5728\u60f3\u7ed9 $u$ \u8fd9\u4e2a\u70b9\u5206\u914d\u503c\uff1a\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u6700\u5927\u7684\u503c $p$\uff0c\u4f7f\u5f97\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u4e00\u79cd\u62ff\u53bb\u65b9\u6848\uff0c\u4f7f\u5f97\u8fd8\u5269\u4e0b $s_u$ \u4e2a $\\geq p$ \u7684\u6570\u3002\n\n\u8003\u8651\u4ee4 $f_i$ \u4ee3\u8868\u53ea\u8003\u8651 $b_j\\geq i$ \u7684\u9650\u5236\uff0c\u8fd8\u5269\u4e0b\u591a\u5c11\u4e2a $\\geq i$ \u7684\u6570\u3002\u8003\u8651 $\\min_{i\\leq k} f_i$ \uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4ee3\u8868\u6700\u591a\u8fd8\u5269\u4e0b\u51e0\u4e2a $\\geq k$ \u7684\u6570\u3002\n\n\u539f\u56e0\u662f\u56e0\u4e3a\u4e3a\u4e86\u8ba9\u5269\u4e0b\u7684 $\\geq k$ \u7684\u66f4\u591a\uff0c\u81ea\u7136\u662f\u4ece $b_j$ \u4ece\u5927\u5230\u5c0f\u8003\u8651\u6bcf\u4e2a\u9650\u5236\uff0c\u7136\u540e\u6bcf\u6b21\u90fd\u62ff\u6700\u5c0f\u7684\uff0c\u7136\u540e\u5176\u5b9e\u7c7b\u4f3c\u4e00\u4e2a\u4e0d\u65ad\u5bf9\u4e8e\u5269\u4e0b\u7684\u6570\u538b\u6808\u5f39\u6808\u7684\u8fc7\u7a0b\uff0c\u8003\u8651\u9650\u5236\u7684\u65f6\u5019\uff0c\u5148\u538b\u8fdb\u6765\u52a0\u5165\u65b0\u6765\u7684\u6570\uff0c\u7136\u540e\u6bcf\u6b21\u9009\u6700\u5c0f\u7684\u5f39\u6389\uff0c\u81ea\u7136\u5730\uff0c\u6808\u7684\u5927\u5c0f\u7684\u6700\u5c0f\u503c\u5c31\u662f\u7b54\u6848\u3002\u800c\u6808\u7684\u5927\u5c0f\u5c31\u662f $f_i$\uff0c\u82e5\u770b\u4e0d\u61c2\u53ef\u4ee5\u968f\u4fbf\u9009\u4e00\u7ec4\u9650\u5236\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u5df2\u7ecf\u4f1a\u6c42\u8fd9\u4e2a\u201d\u6700\u5927\u7684\u5408\u6cd5\u503c\u4e86\u201c\uff1a\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 $f$\uff0c\u4e00\u4e2a\u9650\u5236\u5c31\u76f8\u5f53\u4e8e $[1,b_i]$ \u7684\u503c $-a_i$\uff0c\u7136\u540e\u627e\u5230\u6700\u5927\u7684\u7b26\u5408\u9650\u5236\u7684\u503c\u5c31\u662f\u627e\u5230\u6700\u9760\u53f3\u7684\uff0c\u524d\u7f00 $\\min\\geq s_u$ \u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u4e8c\u5206\u5b9e\u73b0\u3002\n\n\u800c\u6700\u540e\u5269\u4e0b\u7684\u4e00\u4e2a\u64cd\u4f5c\uff0c\u9700\u8981\u62ff\u8d70\u4e00\u4e2a $=b_i$ \u7684\u6570 \uff0c\u5bf9\u5e94\u5728 $f$ \u6570\u7ec4\u4e0a\u662f $[1,b_i]$ \u7684\u503c $-1$\uff0c\u4e5f\u53ef\u4ee5\u7ef4\u62a4\u3002\n\n\u800c $f_i$ \u7684\u521d\u59cb\u503c\u5c31\u662f $d$ \u4e2d $\\geq i$ \u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u5176\u5b9e\u8fd9\u4e2a\u64cd\u4f5c\u548c\u53e6\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\u7684\u5f62\u5f0f\u4e00\u6a21\u4e00\u6837\uff0c\u4f46\u4e00\u4e2a\u662f $\\geq b_i$\uff0c\u4e00\u4e2a\u662f $=b_i$\uff0c\u5176\u5b9e\u8fd9\u4e2a\u7684\u9053\u7406\u5728\u4e8e\u6839\u636e\u4e0a\u9762\u7684\u8d2a\u5fc3\u8bba\u8ff0\uff0c\u6211\u4eec\u6bcf\u6b21\u90fd\u662f\u62ff\u5c3d\u53ef\u80fd\u5c0f\u7684\uff0c\u800c $=b_i$ \u7684\u9650\u5236\u5b58\u5728\u7684\u524d\u63d0\u662f\u4e00\u5b9a\u80fd\u53d6\u5230\u4e00\u4e2a $=b_i$ \u7684\uff08\u56e0\u4e3a\u9700\u8981\u5408\u6cd5\uff09\uff0c\u6240\u4ee5 $=b_i$ \u7684\u9650\u5236\u4e0e $\\geq $ \u5176\u5b9e\u4e00\u6837\uff0c\u6240\u4ee5\u4e8c\u8005\u4f53\u73b0\u5728 $f$ \u4e0a\u7684\u5f71\u54cd\u662f\u4e00\u6a21\u4e00\u6837\u7684\u3002\n\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n//dengyaotriangle!\n\nconst int maxn=500005;\n\nint n,m;double k;\nint val[maxn],sval[maxn],cnt[maxn];\n\nstruct node{\n    int tg,mi;\n    node* c[2];\n}pool[maxn<<1];int ps;\n\nvoid pu(node* rt){\n    rt->mi=min(rt->c[0]->mi,rt->c[1]->mi);\n}\nvoid pd(node* rt){\n    rt->mi+=rt->tg;\n    if(rt->c[0]){\n        rt->c[0]->tg+=rt->tg;\n        rt->c[1]->tg+=rt->tg;\n    }\n    rt->tg=0;\n\n}\nnode* bt(int l,int r){\n    node* nw=pool+ps++;\n    if(l==r){\n        nw->mi=cnt[l];\n    }else{\n        nw->c[0]=bt(l,(l+r)>>1);nw->c[1]=bt(((l+r)>>1)+1,r);\n        pu(nw);\n    }\n    return nw;\n}\n\nvoid chg(node* rt,int cl,int cr,int l,int r,int d){\n    int cm=(cl+cr)>>1;\n    pd(rt);\n    if(l==cl&&r==cr)rt->tg+=d,pd(rt);\n    else if(r<=cm)chg(rt->c[0],cl,cm,l,r,d),pd(rt->c[1]),pu(rt);\n    else if(l>cm)chg(rt->c[1],cm+1,cr,l,r,d),pd(rt->c[0]),pu(rt);\n    else chg(rt->c[0],cl,cm,l,cm,d),chg(rt->c[1],cm+1,cr,cm+1,r,d),pu(rt);\n}\n\nint find(node* rt,int cl,int cr,int s){\n    int cm=(cl+cr)>>1;\n    pd(rt);\n    if(cl==cr){return cl-1;}\n    else{\n        pd(rt->c[0]);int w=rt->c[0]->mi;\n        if(w<s)return find(rt->c[0],cl,cm,s);\n        else return find(rt->c[1],cm+1,cr,s);\n    }\n}\n\nint ans[maxn];\nint sz[maxn];\nbool vis[maxn];\n\n\nint main(){\n    ios::sync_with_stdio(0);cin.tie(0);\n    cin>>n>>k;\n    for(int i=1;i<=n;i++)cin>>val[i];\n    sort(val+1,val+1+n);\n    for(int i=1;i<=n;i++)sval[i]=val[i];\n    m=unique(sval+1,sval+1+n)-sval;\n    for(int i=1;i<m;i++)cnt[i]=upper_bound(val+1,val+1+n,sval[i])-lower_bound(val+1,val+1+n,sval[i]);\n    for(int i=m-1;i>=1;i--)cnt[i]+=cnt[i+1];\n    node* rt=bt(1,m);\n    for(int i=n;i>=1;i--){\n        sz[i]++;\n        sz[(int)floor(i/k)]+=sz[i];\n    }\n    vis[0]=1;\n    for(int i=1;i<=n;i++){\n        int fa=(int)floor(i/k);\n        if(!vis[fa]){\n            vis[fa]=1;\n            chg(rt,1,m,1,ans[fa],sz[fa]-1);\n        }\n        int v=find(rt,1,m,sz[i]);\n        ans[i]=v;\n        chg(rt,1,m,1,v,-sz[i]);\n    }\n    for(int i=1;i<=n;i++)cout<<sval[ans[i]]<<' ';\n    return 0;\n}\n```\n",
        "postTime": 1613461557,
        "uid": 62598,
        "name": "dengyaotriangle",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4364 \u3010[\u4e5d\u7701\u8054\u80032018]IIIDX\u3011"
    },
    {
        "content": "\u9996\u5148\u628a\u9898\u76ee\u8f6c\u5316\u6210\u7ed9\u4e00\u68f5\u6811\u8d4b\u6743\u503c\uff0c\u8ba9\u4ed6\u6210\u4e3a\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u5b57\u5178\u5e8f\u6700\u5927\u3002\n\n\u8003\u8651\u8d2a\u5fc3\uff0c\u5bf9\u4e8e\u5f53\u524d\u70b9 $u$ \u7684\u5b50\u6811\uff0c\u9009\u62e9\u5f53\u524d\u6700\u5927\u7684 $siz_u$ \u4e2a\u6743\u503c\uff0c\u7136\u540e\u9012\u5f52\u6c42\u89e3\u3002\u8fd9\u6837\u5728 $d_i$ \u4e92\u4e0d\u76f8\u540c\u7684\u65f6\u5019\u5bb9\u6613\u53d1\u73b0\u662f\u6b63\u786e\u7684\u3002\n\n\u5982\u679c $d_i$ \u4e2d\u5b58\u5728\u76f8\u540c\u7684\uff0c\u6211\u4eec\u53d1\u73b0\u5f53\u5728\u51b3\u7b56 $u$ \u7684\u5b50\u6811\u65f6\uff0c\u5b50\u6811\u5185\u53ef\u4ee5\u9009\u62e9\u548c $u$ \u76f8\u7b49\u7684\u6743\u503c\uff0c\u628a\u5927\u7684\u6743\u503c\u8ba9\u7ed9\u548c $u$ \u7684\u540c\u6df1\u5ea6\u7684\u5176\u4ed6\u70b9\uff08\u663e\u7136\u70b9\u7684\u7f16\u53f7\u8d8a\u5c0f\u6df1\u5ea6\u8d8a\u5c0f\uff09\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u4e0d\u80fd\u9012\u5f52\u6bcf\u4e2a\u5b50\u6811\u4e86\uff0c\u6b63\u786e\u7684\u505a\u6cd5\u662f\u6309\u7167\u70b9\u7684\u7f16\u53f7\u6765\u51b3\u7b56\u3002\n\n\u5148\u5c06 $d$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n\u5047\u8bbe\u5f53\u524d\u70b9\u662f $u$ \uff0c\u6211\u4eec\u627e\u5230\u6700\u5927\u7684\u53ef\u80fd\u6743\u503c\u5728\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u4f4d\u7f6e\uff0c\u8ba9 $u$ \u9009\u62e9\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u5728 $u$ \u540e\u9762\u9884\u7559\u51fa $siz_u$ \u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4 $f_i$ \u8868\u793a $i$ \u540e\u9762\u6700\u591a\u6709\u591a\u5c11\u4e2a\u5269\u4f59\u4f4d\u7f6e\u6765\u5b9e\u73b0\uff0c\u9884\u7559\u5c31\u662f\u5728 $[1,i]$ \u533a\u95f4\u51cf $1$ \uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u53ef\u662f\u8fd9\u6837\u6211\u4eec\u53d1\u73b0 $i$ \u7684\u503c\u4e0d\u662f\u771f\u5b9e\u7684 $f$ \uff0c\u540c\u65f6\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u786e\u5b9a\u9884\u7559\u4e86\u54ea\u4e9b\u6743\u503c\uff0c\u6240\u4ee5\u771f\u5b9e\u7684 $f$ \u6ca1\u529e\u6cd5\u76f4\u63a5\u7ef4\u62a4\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8ba9\u4e4b\u524d\u6240\u6709\u9884\u7559\u7684\u503c\u90fd\u5c3d\u91cf\u9760\u524d\u9009\uff08\u8df3\u8fc7 $i$ \uff09\uff0c\u8fd9\u662f\u4e3a\u4e86\u8ba9\u5f53\u524d\u7684\u51b3\u7b56\u70b9\u5c3d\u91cf\u9760\u540e\uff0c\u6b64\u65f6\u7684 $f_i$ \u5c31\u662f\u7ef4\u62a4\u7684\u6570\u7ec4\u7684\u524d\u7f00\u6700\u5c0f\u503c\uff0c\u8fd9\u4e2a\u6a21\u62df\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u80fd\u5f97\u51fa\u3002\n\n\u6211\u4eec\u53d1\u73b0 $f_i$ \u5177\u6709\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u51b3\u7b56\u6bcf\u4e2a\u70b9\u7684\u65f6\u5019\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6ce8\u610f\u5728\u51b3\u7b56\u70b9 $u$ \u65f6\u8981\u628a\u7236\u4eb2\u4e3a\u4ed6\u9884\u7559\u7684\u4f4d\u7f6e\u7a7a\u51fa\u6765\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\n\n$\\sf{Code}$\n\n```cpp\n\n#include<bits/stdc++.h>\n#define N 2001001\n#define MAX 2001\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\nconst ll inf=1e18;\ninline void read(ll &ret)\n{\n\tret=0;char c=getchar();bool pd=false;\n\twhile(!isdigit(c)){pd|=c=='-';c=getchar();}\n\twhile(isdigit(c)){ret=(ret<<1)+(ret<<3)+(c&15);c=getchar();}\n\tret=pd?-ret:ret;\n\treturn;\n}\nll n,d[N],pos[N],siz[N],a[N];\ndb k;\nstruct node\n{\n\tll minn,tag,ls;\n}seg[N];\ninline node operator +(node x,node y)\n{\n\treturn node{min(x.minn,y.minn),0ll,x.ls};\n}\ninline void add(ll pos,ll num)\n{\n\tseg[pos].minn+=num;\n\tseg[pos].ls+=num;\n\tseg[pos].tag+=num;\n\treturn;\n}\ninline void pushdown(ll pos)\n{\n\tadd(pos<<1,seg[pos].tag);\n\tadd(pos<<1|1,seg[pos].tag);\n\tseg[pos].tag=0;\n\treturn;\n}\ninline void build(ll pos,ll l,ll r)\n{\n\tif(l==r)\n\t\tseg[pos].minn=seg[pos].ls=n-l+1;\n\telse\n\t{\n\t\tll mid=l+r>>1;\n\t\tbuild(pos<<1,l,mid);\n\t\tbuild(pos<<1|1,mid+1,r);\n\t\tseg[pos]=seg[pos<<1]+seg[pos<<1|1];\n\t}\n\treturn;\n}\ninline void upgrade(ll pos,ll l,ll r,ll s,ll t,ll num)\n{\n\tif(l>=s&&r<=t)\n\t\treturn add(pos,num);\n\telse if(l>t||r<s)\n\t\treturn;\n\tpushdown(pos);\n\tll mid=l+r>>1;\n\tupgrade(pos<<1,l,mid,s,t,num);\n\tupgrade(pos<<1|1,mid+1,r,s,t,num);\n\tseg[pos]=seg[pos<<1]+seg[pos<<1|1];\n\treturn;\n}\ninline ll query(ll pos,ll l,ll r,ll siz,ll d)\n{\n\tif(l==r)\n\t\treturn l;\n\tll mid=l+r>>1;\n\tpushdown(pos);\n\tif(siz<=min(seg[pos<<1].minn,min(d,seg[pos<<1|1].ls)))\n\t\treturn query(pos<<1|1,mid+1,r,siz,min(d,seg[pos<<1].minn));\n\treturn query(pos<<1,l,mid,siz,d);\n}\nbool vis[N];\nmap<ll,ll>mp;\nsigned main()\n{\n\tread(n);\n\tcin>>k;\n\tfor(int i=1;i<=n;i++)\n\t\tread(a[i]);\n\tsort(a+1,a+n+1);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(!mp[a[i]])\n\t\t\tmp[a[i]]=i;\n\t}\n\tbuild(1,1,n);\n\tfor(int i=1;i<=n;i++)\n\t\tsiz[i]=1;\n\tfor(int i=n;i;i--)\n\t\tsiz[ll(floor(i/k))]+=siz[i];\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tll fa=ll(floor(i/k));\n\t\tif(fa)\n\t\t\tupgrade(1,1,n,1,pos[fa],siz[i]);\n\t\tll tmp=a[query(1,1,n,siz[i],inf)];\n\t\tpos[i]=mp[tmp];\n\t\tmp[tmp]++;\n\t\tupgrade(1,1,n,1,pos[i],-siz[i]);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%lld \",a[pos[i]]);\n\texit(0);\n}\n```",
        "postTime": 1650532098,
        "uid": 176990,
        "name": "Celtic",
        "ccfLevel": 9,
        "title": "\u3010\u9898\u89e3\u3011 [\u4e5d\u7701\u8054\u8003 2018] IIIDX"
    },
    {
        "content": "\u9898\u610f\u5f88\u7b80\u5355\uff0c\u7ed9\u51fa\u4e00\u4e2a\u591a\u53c9\u5806\uff0c\u6c42\u4e00\u79cd\u8d4b\u503c\u65b9\u6848\uff0c\u4f7f\u5f97\u5176\u5728\u6ee1\u8db3\u5c0f\u6839\u5806\u6027\u8d28\u7684\u60c5\u51b5\u4e0b\uff0c\u7f16\u53f7\u9760\u524d\u7684\u70b9\u503c\u5c3d\u91cf\u5927\u3002\n\n## Part 1 \u8d2a\u5fc3\n\n\u5148\u8003\u8651\u4e00\u79cd\u8d2a\u5fc3\u505a\u6cd5\u3002\n\n\u6211\u4eec\u5148\u5c06\u539f\u5e8f\u5217\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\u5bb9\u6613\u53d1\u73b0\u4e00\u4e2a\u5b50\u6811\u5185\u7684\u6570\u4e00\u5b9a\u5bf9\u5e94\u5e8f\u5217\u7684\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4\u3002\n\n\u4e3a\u4e86\u8fbe\u5230\u9760\u524d\u7684\u6570\u5c3d\u53ef\u80fd\u5927\u7684\u76ee\u7684\uff0c\u6211\u4eec\u9012\u5f52\u5230\u70b9 $u$ \u65f6\uff0c\u4f18\u5148\u5c06\u9760\u524d\u7684\u533a\u95f4\u5206\u914d\u7ed9\u7f16\u53f7\u8f83\u5c0f\u7684\u5b50\u6811\uff0c\u800c\u8be5\u5b50\u6811\u7684\u6839\u8282\u70b9\u5219\u53d6\u5f97\u8be5\u5b50\u533a\u95f4\u53f3\u7aef\u70b9\u7684\u6570\uff08\u5c0f\u6839\u5806\u6027\u8d28\uff09\u3002\n\n**\u5728 $d_i$ \u4e92\u4e0d\u76f8\u540c\u7684\u65f6\u5019**\uff0c\u8be5\u505a\u6cd5\u6b63\u786e\u6027\u8f83\u4e3a\u663e\u7136\u3002\n\n\u671f\u671b\u5f97\u5206\uff1a$55$ pts\uff08\u5b9e\u9645\u53ef\u4ee5\u62ff\u5230 $60$ pts\uff09\u3002\n\n## Part 2 \u8d2a\u5fc3\u00b7\u6539\n\n\u4e0a\u9762\u7684\u505a\u6cd5\u53ea\u80fd\u4fdd\u8bc1 $d_i$ \u4e92\u4e0d\u76f8\u540c\u65f6\u7684\u6b63\u786e\u6027\uff0c\u5f53\u5b58\u5728\u76f8\u540c\u7684 $d_i$ \u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\n\n\u4e3a\u4e86\u65b9\u4fbf\u63cf\u8ff0\uff0c\u6211\u4eec\u8bbe $u$ \u7684\u67d0\u4e2a\u5144\u5f1f\u8282\u70b9\u4e3a $x$\uff0c$u$ \u7684\u67d0\u4e2a\u513f\u5b50\u8282\u70b9\u4e3a $v$\u3002\n\n\u4e4b\u524d\u7684\u8d2a\u5fc3\u505a\u6cd5\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0 $d_v>d_x=d_u$ \u7684\u60c5\u51b5\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5c06 $x$ \u548c $v$ \u7684\u503c\u4e92\u6362\uff0c\u53ef\u80fd\u4f1a\u5728\u4fdd\u8bc1\u5806\u6027\u8d28\u7684\u524d\u63d0\u4e0b\uff0c\u8ba9\u7f16\u53f7\u8f83\u5c0f\u7684\u70b9\u53d6\u5f97\u66f4\u5927\u503c\u3002\n\n\u56e0\u6b64\u6211\u4eec\u9700\u8981\u7a0d\u5fae\u6539\u826f\u4e00\u4e0b\u539f\u6765\u7684\u505a\u6cd5\u3002\n\n\u4ecd\u7136\u5c06\u539f\u5e8f\u5217\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\u4e0d\u8fc7\u4e0e\u4e4b\u524d\u4e0d\u540c\u7684\u662f\uff0c\u6211\u4eec\u8fd9\u6b21\u6309\u5c42\u6765\u904d\u5386\u3002\n\n\u8bbe $f_i$ \u8868\u793a\u5f53\u524d\u6570\u5de6\u8fb9\u8fd8\u80fd\u53d6\u591a\u5c11\u4e2a\u6570\u3002\u5bf9\u4e8e $u$ \u70b9\uff0c\u56e0\u4e3a\u8981\u6ee1\u8db3\u5c0f\u6839\u5806\u6027\u8d28\uff0c\u9700\u8981\u6ee1\u8db3 $f_i \\geq siz_u$\u3002\n\n\u56e0\u4e3a\u5e8f\u5217\u5df2\u7ecf\u6392\u5e8f\uff0c\u56e0\u6b64 $f_i$ \u5355\u8c03\u4e0d\u4e0b\u964d\uff0c\u4ece\u800c\u8003\u8651\u4e8c\u5206\u67e5\u627e\u627e\u51fa\u6ee1\u8db3 $f_i \\geq siz_u$ \u7684\u6700\u9760\u5de6\u7684 $i$\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u7ec6\u8282\uff0c\u56e0\u4e3a\u5b58\u5728 $d_i$ \u76f8\u7b49\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u8fd9\u4e2a\u6700\u9760\u5de6\u7684\u6570\u5b57\u53f3\u8fb9\uff0c\u53ef\u80fd\u8fd8\u5b58\u5728\u4e0e\u4e4b\u76f8\u7b49\u7684\u6570\u5b57\u3002\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u8fd9\u4e00\u8fde\u7eed\u6bb5\u4e2d\uff0c\u6700\u9760\u53f3\u7684\u6570\u5b57\uff0c\u4ece\u800c\u89e3\u51b3\u4e86\u65e7\u8d2a\u5fc3\u7684\u5f0a\u7aef\u3002\n\n\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u4e00\u8fc7\u7a0b\u3002\n\n\u5269\u4e0b\u7684\u5c31\u548c Part 1 \u7684\u505a\u6cd5\u5dee\u4e0d\u591a\u4e86\u3002\n\n```cpp\n// Problem: P4364 [\u4e5d\u7701\u8054\u80032018]IIIDX\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/P4364\n// Memory Limit: 500 MB\n// Time Limit: 2000 ms\n// Powered by CP Editor (https://github.com/cpeditor/cpeditor)\n\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\nstruct seg\n{\n int minf,tag;\n}s[2000005];\nint n;\ndouble k;\nint d[500005];\nint vis[500005],cnt[500005],fa[500005],siz[500005],res[500005];\nvector<int> e[500005];\nbool cmp(int x,int y)\n{\n return x>y;\n}\nvoid dfs(int u)\n{\n siz[u]=1;\n for(auto v:e[u])\n  dfs(v),siz[u]+=siz[v];\n}\nvoid pushup(int root)\n{\n s[root].minf=min(s[root<<1].minf,s[root<<1|1].minf);\n}\nvoid pushdown(int root)\n{\n s[root<<1].minf+=s[root].tag,s[root<<1].tag+=s[root].tag;\n s[root<<1|1].minf+=s[root].tag,s[root<<1|1].tag+=s[root].tag;\n s[root].tag=0;\n}\nvoid build(int root,int l,int r)\n{\n if(l==r)\n {\n  s[root].minf=l;\n  return;\n }\n int mid=(l+r)>>1;\n build(root<<1,l,mid);\n build(root<<1|1,mid+1,r);\n pushup(root);\n}\nvoid update(int root,int cl,int cr,int l,int r,int x)\n{\n if(r<cl||cr<l)return;\n if(l<=cl&&cr<=r)\n {\n  s[root].minf+=x;\n  s[root].tag+=x;\n  return;\n }\n pushdown(root);\n int mid=(cl+cr)>>1;\n update(root<<1,cl,mid,l,r,x);\n update(root<<1|1,mid+1,cr,l,r,x);\n pushup(root);\n}\nint query(int root,int l,int r,int x)\n{\n if(l==r)\n  return s[root].minf>=x?l:l+1;\n pushdown(root);\n int mid=(l+r)>>1;\n if(s[root<<1|1].minf<x)\n  return query(root<<1|1,mid+1,r,x);\n else\n  return query(root<<1,l,mid,x);\n}\nint main()\n{\n ios::sync_with_stdio(false);\n cin>>n>>k;\n for(int i=1;i<=n;i++)\n  cin>>d[i];\n sort(d+1,d+n+1,cmp);\n for(int i=n-1;i;i--)\n  if(d[i]==d[i+1])cnt[i]=cnt[i+1]+1;\n for(int i=1;i<=n;i++)\n {\n  fa[i]=i/k;\n  e[fa[i]].push_back(i);\n }\n dfs(0);\n build(1,1,n);\n for(int i=1;i<=n;i++)\n {\n  if(fa[i]&&!vis[fa[i]])\n  {\n   vis[fa[i]]=1;\n   update(1,1,n,res[fa[i]],n,siz[fa[i]]-1);\n  }\n  int pos=query(1,1,n,siz[i]);\n  pos+=cnt[pos];\n  cnt[pos]++;\n  res[i]=pos;\n  update(1,1,n,res[i],n,-siz[i]);\n }\n for(int i=1;i<=n;i++)\n  cout<<d[res[i]]<<' ';\n return 0;\n}\n```",
        "postTime": 1596625558,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4364 \u3010[\u4e5d\u7701\u8054\u80032018]IIIDX\u3011"
    },
    {
        "content": "> \u9898\u76ee\u7b80\u8ff0\uff1a\u4e00\u68f5\u6811\uff0c\u8981\u5bf9\u6811\u4e0a\u7684\u6bcf\u4e2a\u70b9\u6807\u4e0a\u7ed9\u5b9a\u7684\u6743\u503c\uff0c\u6ee1\u8db3\u6bcf\u4e2a\u70b9\u4e0a\u7684\u6743\u503c\u90fd\u4e0d\u5927\u4e8e\u5b50\u6811\u5185\u70b9\u7684\u6743\u503c\uff0c\u5e76\u4f7f\u8fd9\u68f5\u6811\uff0c\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u7684\u70b9\u6743\u5b57\u5178\u5e8f\u6700\u5927\u3002 \uff08**\u8fd9\u68f5\u6811\u6ee1\u8db3\u4e00\u4e9b\u6027\u8d28**\uff0c\u4e0b\u6587\u4f1a\u8bf4\uff09\n>\n> \u2014\u2014Sakits\n\n$60$ $\\text{pts}$ \u8d2a\u5fc3\u7684\u5199\u6cd5\u81ea\u7136\u662f\u5f88\u597d\u60f3\u7684\uff0c\u6839\u636e\u9898\u610f\u5efa\u51fa\u4e00\u68f5\u6811\u6765\u5373\u53ef\uff0c\u628a $d_i$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6839\u636e\u5b50\u6811\u5927\u5c0f\u5206\u914d\u533a\u95f4\u3002**\u8fd9\u68f5\u6811\u7684\u6839\u8282\u70b9\u4e3a $0$**\u3002\u56e0\u4e3a\u5982\u679c\u4e0d\u4e3a $0$ \uff0c\u8fd9\u68f5\u6811\u53ef\u80fd\u4f1a\u53d8\u4e3a\u68ee\u6797\u3002\n\n\u7531\u4e8e\u5206\u914d\u5230\u53f6\u5b50\u8282\u70b9\u65f6\uff0c\u533a\u95f4\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u53ea\u9700\u8981\u8003\u8651\u8fd9\u68f5\u5b50\u6811\u7684\u53ef\u4ee5\u88ab\u5206\u914d\u5230\u7684\u533a\u95f4\u548c\u8fd9\u68f5\u5b50\u6811\u7684\u6839\u88ab\u5206\u914d\u5230\u7684\u6570\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c**\u5f53 $d_i$ \u4e0d\u91cd\u590d\u65f6**\uff0c\u4e00\u4e2a\u6811\u6240\u88ab\u5206\u914d\u5230\u7684\u533a\u95f4\u4f1a\u88ab\u5b83\u7684\u5b50\u6811\u5206\u6210\u8fde\u7eed\u7684\u51e0\u6bb5\u3002\u56e0\u6b64\u76f4\u63a5 $\\text{dfs}$ \u8d2a\u5fc3\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5927\u6982\u662f\u8fd9\u4e2a\u6837\u5b50\u3002\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nstd::vector<int> mp[500005];\nint size[500005],res[500005],a[500005];\nvoid prework(int x) {\n\tsize[x]=1;\n\tfor(register int i=0;i<mp[x].size();++i) {prework(mp[x][i]);size[x]+=size[mp[x][i]];}\n}\nvoid dfs(int x,int l,int r) {\n\tres[x]=a[l++];\n\tfor(register int i=0;i<mp[x].size();++i) {\n\t\tint y=mp[x][i];\n\t\tdfs(y,r-size[y]+1,r);\n\t\tr=r-size[y];\n\t}\n}\nint main() {\n\tint n;\n\tdouble k;\n\tscanf(\"%d%lf\",&n,&k);\n\tfor(register int i=1;i<=n;++i) scanf(\"%d\",&a[i]);\n\tfor(register int i=1;i<=n;++i) mp[(int)(i*1.00/k)].push_back(i);\n\tstd::sort(a+1,a+1+n);\n\tprework(0);\n\tdfs(0,0,n);\n\tfor(register int i=1;i<=n;++i) printf(\"%d \",res[i]);\n\treturn 0;\n}\n```\n\n\u4f46\u662f\u5f88\u62b1\u6b49\uff0c\u8fd9\u4e2a\u505a\u6cd5\u662f\u5047\u7684\uff0c\u53ea\u6709 $60 \\text{ pts}$\uff0c\u7531\u4e8e**\u5b58\u5728\u91cd\u590d\u7684 $d_i$**\u3002\n\n\u5c31\u6709\u4e86\u8fd9\u7ec4 $\\text{hack}$ \u6570\u636e\uff1a``4 3 1 1 2 2``\u3002\n\n\u5982\u679c\u6309\u7167\u4e0a\u8ff0\u8d2a\u5fc3\u601d\u8def\uff0c\u8f93\u51fa\u4e3a `` 1 1 2 2 ``\uff0c\u4f46\u6b63\u786e\u8f93\u51fa\u4e3a ``1 2 2 1``\u3002\n\n\u6b63\u786e\u8f93\u51fa\u7684\u56fe\u753b\u51fa\u6765\u5927\u6982\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/zaur71b2.png)\n\n\u56e0\u4e3a\u5b58\u5728\u91cd\u590d\uff0c\u6240\u4ee5 $4$ \u53f7\u70b9\u4e0d\u4f1a\u9009\u62e9 $2$ \uff0c\u800c\u4f1a\u9009\u62e9 $1$ \uff0c\u628a $2$ \u7559\u7ed9 $2$ \u53f7\u8282\u70b9\u3002\n\n\u901a\u8fc7\u8fd9\u7ec4\u6570\u636e\u6211\u4eec\u53d1\u73b0\uff0c\u57fa\u4e8e $\\text{dfs}$ \u7684\u8d2a\u5fc3\u90fd\u4e0d\u80fd\u591f\u786e\u4fdd\u6b63\u786e\u6027\uff0c\u7531\u4e8e\u5b58\u5728\u91cd\u590d\uff0c\u6240\u4ee5\u513f\u5b50\u8282\u70b9\u53ef\u80fd\u53ef\u4ee5\u9009\u62e9\u548c\u7236\u4eb2\u8282\u70b9\u76f8\u540c\u7684\u6570\uff0c\u628a\u66f4\u5927\u7684\u6570\u7559\u7ed9\u5176\u4ed6\u8282\u70b9\uff0c\u4f7f\u89e3\u66f4\u4f18\u3002\u663e\u7136\u8fd9\u4e00\u70b9\u4e0d\u6ee1\u8db3\u8d2a\u5fc3\u7684\u6027\u8d28\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u6362\u4e00\u79cd\u65b9\u5f0f\u6765\u8d2a\u5fc3\u3002\n\n\u9898\u76ee\u8981\u6c42\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u7684\u70b9\u6743\u5b57\u5178\u5e8f\u6700\u5927\uff0c\u90a3\u6211\u4eec\u5c31\u8003\u8651\u4ece $1-N$ \u904d\u5386\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u4ee4\u4ed6\u7684\u70b9\u6743\u5c3d\u53ef\u80fd\u7684\u5927\u3002\n\n\u5bf9\u4e8e\u4ece $1-N$ \u904d\u5386\u7684\u6b63\u786e\u6027\u7684\u8bc1\u660e\uff0c\u8fd9\u91cc\u9700\u8981\u51e0\u4e2a\u6027\u8d28\uff1a\n\n- \u513f\u5b50\u7f16\u53f7\u4e00\u5b9a\u5927\u4e8e\u7236\u4eb2\u7f16\u53f7\u3002\n- \u6839\u636e\u6784\u9020\u8fd9\u68f5\u6811\u7684\u8fc7\u7a0b\u53ef\u4ee5\u5f97\u51fa\uff0c\u5bf9\u4e8e\u6df1\u5ea6\u4e3a $dep$ \u7684\u4efb\u610f\u70b9 $i$ \u7684\u7f16\u53f7 $id_i$ \uff0c\u90fd\u6709\u6df1\u5ea6\u4e3a $dep+1$ \u7684\u4efb\u610f\u70b9 $j$ \u7684\u7f16\u53f7 $id_j$ \uff0c\u4ee4 $id_i<id_j$\uff0c\u5373\u6df1\u5ea6\u4e3a $dep$ \u7684\u70b9\u7684\u7f16\u53f7\u6c38\u8fdc\u5c0f\u4e8e\u6df1\u5ea6\u4e3a $dep+1$ \u7684\u70b9\u7684\u7f16\u53f7\u3002 \n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53d1\u73b0\uff0c\u4ece $1-N$ \u7684\u904d\u5386\uff0c\u5fc5\u7136\u4ece\u6df1\u5ea6\u4e3a $1$ \u7684\u5c42\u6b21\u9010\u5c42\u904d\u5386\u5230\u6df1\u5ea6\u4e3a $maxDepth$ \u7684\u5c42\u6b21\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 $i$ \uff0c\u4e4b\u524d\u5fc5\u7136\u904d\u5386\u8fc7\u5176\u7236\u4eb2 $f_i$ \uff0c\u4e14\u8be5\u7236\u4eb2\u6240\u5728\u7684\u6df1\u5ea6\u7684\u6240\u6709\u8282\u70b9\u5df2\u88ab\u904d\u5386\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u7ed3\u8bba\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u5728\u4e8e\uff0c\u5982\u4f55\u627e\u51fa\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u6743\u3002\n\n\u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u5c3d\u53ef\u80fd\u5927\u7684\u70b9\u6743\u9700\u8981\u6ee1\u8db3\u54ea\u4e9b\u6761\u4ef6\uff1a\n\n- \u5176\u5b50\u6811\u5185\u6240\u6709\u70b9\u7684\u6743\u503c\u4e0d\u5c0f\u4e8e\u8be5\u70b9\u6743\u3002\n- \u8fd9\u4e2a\u70b9\u6743\u6ca1\u6709\u88ab\u4e4b\u524d\u7684\u70b9\u9009\u8fc7\u3002\n\n\u6240\u4ee5\u6211\u4eec\u60f3\u5230\uff0c\u4e00\u4e2a\u70b9 $i$ \u7684\u70b9\u6743\u5728**\u4ece\u5927\u5230\u5c0f**\u6392\u5e8f\u540e\u672a\u88ab\u9009\u7684 $a_i$ \u4e2d\u7684\u6392\u540d\u4e3a $size[i]$\uff0c\u56e0\u4e3a\u81f3\u5c11\u8981\u6709 $size[i]-1$ \u4e2a\u6570\u4e0d\u5c0f\u4e8e $size[i]$\uff0c\u8fd9\u4e00\u70b9\u548c\u8d2a\u5fc3\u7684\u601d\u8def\u975e\u5e38\u7c7b\u4f3c\u3002\n\n\u5e76\u4e14\uff0c\u7531\u4e8e\u5b58\u5728\u91cd\u590d\uff0c\u82e5\u6211\u4eec\u9009\u62e9\u7684 $a_i$ \u6709\u5176\u4ed6\u7684 $a_i$ \u548c\u5b83\u76f8\u540c\uff0c\u5e94\u9009\u62e9\u6700\u53f3\u7aef\u7684\u4e00\u4e2a\u3002\u8bc1\u660e\u4e5f\u5f88\u7b80\u5355\uff0c\u5982\u679c\u6709\u591a\u4e2a\u6570\u6ee1\u8db3\u6761\u4ef6\uff0c\u80af\u5b9a\u4e0d\u4f1a\u5148\u5206\u914d\u5927\u7684\u6570\u7ed9\u5b83\u7684\u5b50\u6811\uff0c\u56e0\u4e3a\u4ece $1-N$ \u904d\u5386\uff0c\u5f53\u524d\u5c42\u6b21\u7684\u8282\u70b9\u53d6\u5230\u66f4\u5927\u7684\u6570\u4f1a\u66f4\u4f18\uff0c\u8fd9\u4e00\u70b9\u524d\u9762\u5df2\u7ecf\u8bc1\u660e\u8fc7\u4e86\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u8003\u8651\u5b9e\u73b0\uff0c\u8bbe $f_i$ \u4e3a\u5f53\u524d\u8fd9\u4e2a\u6570\u5de6\u8fb9\u8fd8\u6709\u591a\u5c11\u6570\u80fd\u53d6\uff0c\u53ef\u4ee5\u53d1\u73b0 $f_i$ \u4e00\u5b9a\u5355\u8c03\u4e0d\u4e0b\u964d\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u4e8c\u5206\u627e\u51fa\u8fd9\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u4f4d\u7f6e\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u6b21\u9884\u7559\u5b50\u6811\u7684\u64cd\u4f5c\uff0c\u90fd\u9700\u8981\u505a\u533a\u95f4\u4fee\u6539\u548c\u5355\u70b9\u67e5\u8be2\uff0c\u90a3\u4e48\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u7ebf\u6bb5\u6811\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0 $f_i$ \u6ca1\u6709\u5355\u8c03\u6027\u7684\u60c5\u51b5\uff0c\u8fd9\u662f\u4fee\u6539\u7684\u7f3a\u9677\uff0c\u4e8b\u5b9e\u4e0a $f_i$ \u4e00\u5b9a\u5b58\u5728\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u7ef4\u62a4\u4e00\u4e2a $f_i$ \u7684**\u533a\u95f4\u6700\u5c0f\u503c** \u800c\u975e\u533a\u95f4\u6700\u5927\u503c\u3002\n\n**Show the Code**\n```cpp\n/*============================\n * Author : tommy0103\n * Problem : IIIDX\n * Algorithm : SGT\n * Time : 2020.3.30\n * ==========================*/\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n#define min(a,b) ((a)<(b)? (a):(b))\nint n;\ndouble k;\nstd::vector<int> mp[500005];\nint a[500005],size[500005],res[500005],fa[500005],vis[500005],cnt[500005];\nint segL[2000005],segR[2000005],minn[2000005],tag[2000005];\ninline bool cmp(int x,int y) {return x>y;}\nvoid build(int p,int l,int r) {\n\tsegL[p]=l;segR[p]=r;minn[p]=0x3f3f3f3f;\n\tif(l==r) {minn[p]=l;return;}\n\tint mid=l+r>>1;\n\tbuild(p<<1,l,mid);\n\tbuild(p<<1|1,mid+1,r);\n\tminn[p]=min(minn[p<<1],minn[p<<1|1]);\n}\ninline void spread(int p) {\n\tif(tag[p]!=0) {\n\t\tminn[p<<1]+=tag[p];minn[p<<1|1]+=tag[p];\n\t\ttag[p<<1]+=tag[p];tag[p<<1|1]+=tag[p];\n\t\ttag[p]=0;\n\t}\n}\nvoid change(int p,int l,int r,int v) {\n\tif(l<=segL[p]&&segR[p]<=r) {minn[p]+=v;tag[p]+=v;return;}\n\tspread(p);\n\tint mid=segL[p]+segR[p]>>1;\n\tif(l<=mid) change(p<<1,l,r,v);\n\tif(r>mid) change(p<<1|1,l,r,v);\n\tminn[p]=min(minn[p<<1],minn[p<<1|1]);\n}\nint ask(int p,int len) {\n\tif(segL[p]==segR[p]) return minn[p]>=len? segL[p]:segL[p]+1;\n\tspread(p);\n\tif(minn[p<<1|1]<len) return ask(p<<1|1,len);\n\treturn ask(p<<1,len);\n}\nvoid prework(int x) {\n\tsize[x]=1;\n\tfor(register int i=0;i<mp[x].size();++i) {fa[mp[x][i]]=x;prework(mp[x][i]);size[x]+=size[mp[x][i]];}\n}\nvoid print(int p) {\n\tif(segL[p]==segR[p]) {printf(\"[%d,%d]%d\\n\",segL[p],segR[p],minn[p]);return;}\n\tspread(p);\n\tprint(p<<1);print(p<<1|1);\n}\nint main() {\n\tscanf(\"%d%lf\",&n,&k);\n\tfor(register int i=1;i<=n;++i) scanf(\"%d\",&a[i]);\n\tstd::sort(a+1,a+1+n,cmp);\n\tfor(register int i=n-1;i>=1;--i) cnt[i]=(cnt[i+1]+1)*(a[i]==a[i+1]);\n\tfor(register int i=1;i<=n;++i) mp[(int)(i*1.00/k)].push_back(i);\n\tbuild(1,1,n);prework(0);\n\tfor(register int i=1;i<=n;++i) {\n\t\tif(fa[i]&&!vis[fa[i]]) {\n\t\t\tchange(1,res[fa[i]],n,size[fa[i]]-1);//fa[i]\u5df2\u7ecf\u88ab\u9009\u4e86\n\t\t\tvis[fa[i]]=1;\n\t\t}\n\t\tint pos=ask(1,size[i]);\n\t\tpos+=cnt[pos];++cnt[pos];res[i]=pos;\n\t\tchange(1,res[i],n,-size[i]);\n\t} \n\tfor(register int i=1;i<=n;++i) printf(\"%d \",a[res[i]]);\n\treturn 0;\n}\n```",
        "postTime": 1585540422,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4364 \u3010[\u4e5d\u7701\u8054\u80032018]IIIDX\u3011"
    },
    {
        "content": "\u4e24\u5e74\u534a\u4ee5\u524d\u6b7b\u547d\u770b\u4e0d\u61c2\u8fd9\u9898\u9898\u89e3\uff0c\u73b0\u5728\u518d\u505a\u611f\u89c9\u4e5f\u6ca1\u90a3\u4e48\u96be\uff01\n\n\u9898\u610f\uff1a\u7ed9\u4f60\u4e00\u68f5\u4ee5 $0$ \u4e3a\u6839\u6811\u548c\u4e00\u5806\u6743\u503c\uff0c\u4f60\u8981\u628a\u8fd9\u4e9b\u6743\u503c\u5206\u7ed9\u9664 $0$ \u4ee5\u5916\u7684\u70b9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u4e0d\u5c0f\u4e8e\u7236\u4eb2\uff0c\u5728\u6b64\u57fa\u7840\u4e0a bfs \u5e8f\u7684\u6743\u503c\u7684\u5b57\u5178\u5e8f\u6700\u5927\u3002\u8fd9\u4e2a $k$ \u7684\u4f5c\u7528\u5176\u5b9e\u5c31\u662f\u544a\u8bc9\u4f60\u7f16\u53f7\u662f bfs \u5e8f\uff0c\u6ca1\u4ec0\u4e48\u5176\u4ed6\u7684\u795e\u79d8\u542b\u4e49\u3002\n\n\u5b57\u5178\u5e8f\u6700\u5927\u80af\u5b9a\u662f\u4ece\u524d\u5f80\u540e\u8d2a\u5fc3\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e00\u4e2a\u524d\u7f00\u662f\u4e0d\u662f\u5408\u6cd5\u7684\u3002\n\n\u5148\u8003\u8651\u6700\u524d\u9762\u7684\u51e0\u6b65\uff0c\u4ece\u7279\u6b8a\u5230\u4e00\u822c\u5730\u601d\u8003\u3002\u65e2\u7136\u662f bfs \u5e8f\uff0c\u6211\u4eec\u6765\u770b\u770b\u7b2c\u4e00\u5c42\u7684\u67d0\u4e2a\u524d\u7f00\u5408\u6cd5\u7684\u6761\u4ef6\u3002\u5b9e\u9645\u4e0a\u6211\u4eec\u53ea\u9700\u8981\u6bcf\u4e2a\u5df2\u7ecf\u88ab\u8003\u8651\u7684\u70b9\uff0c\u5b83\u80fd\u627e\u51fa\u82e5\u5e72\u4e2a\u4e0d\u5c0f\u4e8e\u5b83\u81ea\u5df1\u7684\u6743\u503c\u585e\u6ee1\u5b83\u7684\u5b50\u6811\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6743\u503c\u53ea\u88ab\u5206\u914d\u7ed9\u4e00\u4e2a\u5b50\u6811\u3002\n\n\u7167\u7740\u8fd9\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u53d1\u73b0\u6240\u6709\u6743\u503c\u4e0d\u76f8\u540c\u7684\u90e8\u5206\u5206\u5c31\u5df2\u7ecf\u53ef\u4ee5\u89e3\u51b3\u4e86\uff1a\u53ea\u9700\u8981\u6309\u7167\u540e\u5e8f\u904d\u5386\uff08\u6216\u8005\u53eb exit \u5e8f\uff1f\uff09\u4ece\u5927\u5230\u5c0f\u5206\u914d\u6743\u503c\u5373\u53ef\u3002\u8fd9\u6837\u4f60\u53ef\u4ee5\u76f4\u63a5\u62ff\u5230\u81f3\u5c11 55 \u5206\uff0c\u5728\u5f53\u5e74\u7b97\u662f\u5f88\u53ef\u89c2\u7684\u5206\u6570\u4e86\u3002\n\n\u4f46\u5f88\u53ef\u60dc\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5728\u6709\u76f8\u7b49\u6743\u503c\u65f6\u884c\u4e0d\u901a\u3002\u6bd4\u5982\u4e0b\u9762\u8fd9\u7ec4\u6570\u636e\uff1a\n```plain\n4 3\n1 1 2 2\n```\n\u95ee\u9898\u51fa\u5728\u54ea\u91cc\u5462\uff1f\u5b9e\u9645\u4e0a\uff0c\u4e0a\u9762\u8fd9\u4e2a\u505a\u6cd5\u4f9d\u8d56\u4e8e\uff0c\u5bf9\u6bcf\u4e2a\u5b50\u6811\u548c\u4e00\u4e9b\u6743\u503c\uff0c\u6211\u4eec\u9700\u8981\u603b\u662f\u80fd\u5728\u5176\u4e2d\u627e\u5230\u4e00\u4e2a\u6743\u503c\uff0c\u6ee1\u8db3\u8fd9\u4e9b\u6743\u503c\u4e2d\u4e0d\u5c0f\u4e8e\u5b83\u7684\u6070\u597d\u6709\u5b50\u6811\u5927\u5c0f\u4e2a\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u9700\u8981\u6743\u503c\u4e92\u4e0d\u76f8\u540c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u91cd\u65b0\u601d\u8003\u8fd9\u4e2a\u9650\u5236\u610f\u5473\u7740\u4ec0\u4e48\uff0c\u5176\u5b9e\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u6a21\u578b\u3002\u6211\u4eec\u628a\u6743\u503c\u4ece\u5c0f\u5230\u5927\u62cd\u5230\u4e00\u4e2a\u5e8f\u5217\u4e0a\uff0c\u5e76\u4e14\u5728\u51b3\u5b9a\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u4ee5\u540e\uff0c\u6211\u4eec\u628a\u5b83\u653e\u5728\u548c\u8fd9\u4e2a\u6743\u503c\u76f8\u540c\u7684\uff0c\u7b2c\u4e00\u4e2a\u8fd8\u6ca1\u6709\u88ab\u524d\u9762\u7684\u70b9\u5360\u7528\u7684\u4f4d\u7f6e\u4e0a\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u7684\u9650\u5236\u5b9e\u9645\u4e0a\u662f\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u540e\u7f00\uff0c\u653e\u5728\u5b83\u5176\u4e2d\u7684\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e4b\u548c\u4e0d\u5927\u4e8e\u8fd9\u4e2a\u540e\u7f00\u7684\u957f\u5ea6\u3002\n\n\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u5f88\u7ecf\u5178\uff0c\u6211\u4eec\u76f4\u63a5\u5bf9\u6bcf\u4e2a\u540e\u7f00\u7ef4\u62a4\u5b83\u7684\u957f\u5ea6\u51cf\u53bb\u5176\u4e2d\u7684\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e4b\u548c\u3002\u90a3\u4e48\uff0c\u627e\u6700\u5927\u7684\u80fd\u653e\u7684\u4f4d\u7f6e\u5c31\u662f\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u5b50\u6811\u5927\u5c0f\u7684\u4f4d\u7f6e\u7684\u5de6\u8fb9\u4e00\u4e2a\uff0c\u5f53\u7136\u6211\u4eec\u5b9e\u9645\u4e0a\u628a\u5b83\u653e\u5230\u8ddf\u8fd9\u4e2a\u4f4d\u7f6e\u6743\u503c\u76f8\u540c\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5360\u7684\u4f4d\u7f6e\u4e0a\u3002\u7136\u540e\u5bf9\u7ef4\u62a4\u7684\u4e1c\u897f\u7684\u5f71\u54cd\u662f\u524d\u7f00\u52a0\u3002\u6240\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u4e0d\u4f1a\u627e\u5230\u4e00\u4e2a\u5df2\u7ecf\u88ab\u5360\u6389\u7684\u4f4d\u7f6e\u5462\uff1f\u56e0\u4e3a\u8fd9\u6837\u7684\u4f4d\u7f6e\u5bf9\u5e94\u7684\u540e\u7f00\u7684\u8fd9\u4e2a\u503c\u4e00\u5b9a\u4e0d\u5927\u4e8e\u4ed6\u53f3\u8fb9\u7684\u4f4d\u7f6e\u3002\n\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u51b3\u5b9a\u7b2c\u4e00\u5c42\u6240\u6709\u70b9\u7684\u6743\u503c\u4e86\uff0c\u6211\u4eec\u6765\u770b\u770b\u51b3\u7b56\u5176\u4ed6\u70b9\u65f6\u7684\u9650\u5236\u3002\u53d1\u73b0\u5176\u5b9e\u6211\u4eec\u51b3\u7b56\u5230\u4e00\u4e2a\u70b9\u65f6\uff0c\u53ea\u9700\u8981\u628a\u5b83\u7684\u5b50\u6811\u4ece\u5b83\u7236\u4eb2\u7684\u5b50\u6811\u91cc\u53bb\u6389\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u4e5f\u76f8\u5f53\u4e8e\u533a\u95f4\u52a0\u3002\u81f3\u4e8e\u5b83\u7684\u6743\u503c\u4e0d\u5c0f\u4e8e\u7236\u4eb2\u7684\u6743\u503c\u8fd9\u4e2a\u9650\u5236\uff0c\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u662f\u8981\u9009\u62e9\u6700\u5927\u7684\u5408\u6cd5\u6743\u503c\uff0c\u6240\u4ee5\u8fd9\u4e2a\u9650\u5236\u81ea\u52a8\u88ab\u6ee1\u8db3\u4e86\u3002\n\n\u81f3\u6b64\u6211\u4eec\u5728 $O(n\\log n)$ \u7684\u65f6\u95f4\u5185\u5b8c\u6574\u89e3\u51b3\u4e86\u95ee\u9898\u3002\u56e0\u4e3a\u6211\u6bd4\u8f83\u61d2\u6240\u4ee5\u8bb2\u5f97\u6bd4\u8f83\u62bd\u8c61\uff0c\u53ef\u4ee5\u770b\u4ee3\u7801\u5e2e\u52a9\u7406\u89e3\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\ninline ll read(){\n\tll x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)){\n\t\tif(c=='-') f=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxn=5e5+5;\nint n,a[maxn],fa[maxn],sz[maxn];\nint d[maxn],p[maxn],c[maxn];\nstruct node{\n\tint l,r;\n\tnode* ch[2];\n\tint mn,add=0;\n\tvoid pushup(){\n\t\tmn=min(ch[0]->mn,ch[1]->mn);\n\t}\n\tnode(int l,int r):l(l),r(r),mn(n-r+1){\n\t\tif(l==r) return;\n\t\tint mid=l+(r-l)/2;\n\t\tch[0]=new node(l,mid);\n\t\tch[1]=new node(mid+1,r);\n\t}\n\tvoid pushtag(int k){\n\t\tmn+=k;\n\t\tadd+=k;\n\t}\n\tvoid pushdown(){\n\t\tch[0]->pushtag(add);\n\t\tch[1]->pushtag(add);\n\t\tadd=0;\n\t}\n\tvoid modify(int ql,int qr,int k){\n\t\tif(ql>r||qr<l) return;\n\t\tif(ql<=l&&qr>=r){\n\t\t\tpushtag(k);\n\t\t\treturn;\n\t\t}\n\t\tpushdown();\n\t\tch[0]->modify(ql,qr,k);\n\t\tch[1]->modify(ql,qr,k);\n\t\tpushup();\n\t}\n\tint query(int x){\n\t\tif(l==r) return r;\n\t\tpushdown();\n\t\treturn ch[ch[0]->mn>=x]->query(x);\n\t}\n}*rt;\nint main(){\n#ifdef LOCAL\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tfreopen(\"out.txt\",\"w\",stdout);\n#endif\n\tn=read();\n\tdouble k;\n\tscanf(\"%lf\",&k);\n\tfor(int i=1;i<=n;i++) a[i]=read();\n\tfor(int i=n;i>0;i--) sz[fa[i]=i/k]+=++sz[i];\n\tsort(a+1,a+n+1);\n\tfor(int i=1;i<=n;i++)\n\t\tp[i]=a[i]==a[i-1]?p[i-1]:c[i]=i;\n\trt=new node(1,n+1);\n\tfor(int i=1;i<=n;i++){\n\t\tif(fa[i]) rt->modify(1,d[fa[i]],sz[i]);\n\t\td[i]=c[p[rt->query(sz[i])-1]]++;\n\t\trt->modify(1,d[i],-sz[i]);\n\t}\n\tfor(int i=1;i<=n;i++) printf(\"%d \",a[d[i]]);\n#ifdef LOCAL\n\tfprintf(stderr,\"%f\\n\",1.0*clock()/CLOCKS_PER_SEC);\n#endif\n\treturn 0;\n}\n```",
        "postTime": 1665796538,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4364 [\u4e5d\u7701\u8054\u8003 2018] IIIDX"
    },
    {
        "content": "#### IIIDX\n\n##### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u4fdd\u8bc1\u76f8\u540c\u6df1\u5ea6\u7684\u70b9\u8fde\u7eed\uff0c\u4f60\u9700\u8981\u7ed9\u6bcf\u4e2a\u70b9\u5728 $v_i$ \u4e2d\u9009\u53d6\u4e00\u4e2a\u4f5c\u4e3a\u8be5\u70b9\u6743\u503c\uff0c\u4e14\u7236\u4eb2\u7684\u6743\u503c\u5c0f\u4e8e\u8be5\u70b9\u3002\n\n\u4f60\u9700\u8981\u6700\u5927\u5316\u5e8f\u5217\u7684\u5b57\u5178\u5e8f\u3002 \n\n$1\\leq n\\leq 5\\times 10^5$ \u3002\n\n##### \u9898\u89e3\n\n\u672c\u9898\u89e3\u4ece\u4e8c\u5206\u56fe\u5339\u914d\u7684\u89d2\u5ea6\u89e3\u51b3\u4e86\u8be5\u95ee\u9898\uff0c\u5e76\u8bf4\u660e\u4e86\u8d2a\u5fc3\u7684\u6b63\u786e\u6027\uff08\n\n\u6839\u636e\u9898\u76ee\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a\u6bd4\u8f83 $\\text{trival}$ \u7684\u8d2a\u5fc3\uff0c\u6bcf\u6b21\u5148\u5c06\u6700\u53f3\u5b50\u6811\u904d\u5386\u4ee5\u4fdd\u8bc1\u6700\u5de6\u513f\u5b50\u7684\u6743\u503c\u6700\u5927\u3002\n\n\u7136\u540e\u4f60\u5c31\u83b7\u5f97\u4e86 $60$ \u5206\u7684\u6210\u7ee9\uff0c\u6253\u5f00\u4e00\u770b\u4ec5\u8fc7\u6389\u4e86 $v_i$ \u4e92\u4e0d\u76f8\u540c\u7684\u60c5\u51b5\u3002\n\n\u8003\u8651\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u6211\u4eec\u4ec5\u4fdd\u8bc1\u4e86\u6700\u4f18\u5316\u6700\u5de6\u513f\u5b50\u7684\u4ee3\u4ef7\uff0c\u4f46\u662f $=$ \u7684\u6027\u8d28\u53ef\u4ee5\u5bf9\u4e8e\u53f3\u513f\u5b50\u8fdb\u884c\u8c03\u6574\uff0c\u4f46\u662f\u8d2a\u5fc3\u65e0\u6cd5\u505a\u5230\u3002\n\n\u800c\u5bf9\u4e8e $v_i$ \u4e92\u4e0d\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u7531\u4e8e\u4e0d\u4f1a\u51fa\u73b0 $=$ \uff0c\u90a3\u4e48\u663e\u7136\u662f\u6b63\u786e\u7684\u3002 \n\n\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u679a\u4e3e\u5f53\u524d\u4f4d\u7f6e\u5224\u65ad\u662f\u5426\u540e\u9762\u5b58\u5728\u89e3\uff0c\u4e00\u76f4\u6700\u4f18\u5316\u6b64\u8fc7\u7a0b\u5f97\u5230\u7684\u4e00\u5b9a\u662f\u5b57\u5178\u5e8f\u6700\u5927\u7684\u3002\n\n\u73b0\u5728\u7684\u95ee\u9898\u53d8\u6210\u4e86\uff1a\u5982\u4f55\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u79cd\u65b9\u6848\u7ed9\u672a\u7ed9\u5b9a\u70b9\u5b9a\u6743\u503c\u6ee1\u8db3\u9898\u610f\uff1f\n\n\u7a0d\u5fae\u8f6c\u5316\u9898\u610f\uff1a\u6211\u4eec\u5f53\u524d\u53ef\u4ee5\u5f97\u5230\u4e00\u4e9b\u9650\u5236\uff1a\u5fc5\u987b\u9009\u62e9 $a_i$ \u4e2a $\\geq b_i$ \u7684\uff0c\u9700\u8981\u6ee1\u8db3\u6240\u6709\u7684\u9650\u5236\u3002\u4e3a\u4e86\u65b9\u4fbf\u5c06\u5176\u9650\u5236\u5199\u6210 $(a_i,b_i)$\n\n\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8d2a\u5fc3\uff0c\u6309\u7167 $a_i$ \u6392\u5e8f\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u4ece\u5de6\u9762\u5f00\u59cb\u9009\u62e9\u3002\u4f46\u662f\u5e76\u6ca1\u6709\u663e\u5f0f\u7684\u5f97\u5230\u66f4\u4f18\u79c0\u7684\u5224\u65ad\u6761\u4ef6\u3002\n\n\u8003\u8651\u5efa\u4e8c\u5206\u56fe\uff0c\u5de6\u4fa7\u4ee3\u8868\u672a\u5339\u914d\u7ed3\u70b9 $\\sum a_i$ \u4e2a\uff0c\u53f3\u4fa7\u4ee3\u8868\u8fd8\u672a\u9009\u62e9\u7684 $v$ \u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u9650\u5236 $(a_i,b_i)$ \uff0c\u53ea\u9700\u8981\u5c06\u5de6\u4fa7 $a_i$ \u4e2a\u8fde\u5411 $b_i$ \u7684\u540e\u7f00\u3002\u5224\u65ad\u6761\u4ef6\u4e3a\u662f\u5426\u8be5\u56fe\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\u3002\n\n\u8003\u8651 $\\text{Hall}$ \u5b9a\u7406\uff0c\u6211\u4eec\u5c06\u6240\u6709\u9650\u5236\u6309 $b_i$ \u6392\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u53ea\u8981\u5224\u65ad\u540e\u7f00\uff0c\u5373\u5bf9\u4e8e $\\forall i,S=[i,i+1,...]$ \uff0c$|S|\\leq |N(S)|$ \u3002\n\n\u5373 $\\forall i,\\sum_{j=i} a_j \\leq W_{b_i}$ \uff0c$W_{b_i}$ \u8868\u793a $b_i$ \u540e\u9762\u672a\u5339\u914d\u70b9\u7684\u4e2a\u6570  \u3002\n\n\u79fb\u9879\u53ef\u5f97 $W_{b_i}-\\sum_{j=i} a_j\\geq 0$ \uff0c\u90a3\u4e48\u6211\u4eec\u4ec5\u9700\u8981\u5224\u65ad\u662f\u5426\u5bf9\u4e8e\u6bcf\u4e2a\u540e\u7f00\u5269\u4f59\u7684\u4f4d\u7f6e\u90fd\u9700\u8981 $\\geq 0$ \u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u6bcf\u4e2a\u4f4d\u7f6e\u7684 $W-\\sum_{\u5728\u4ed6\u4f4d\u7f6e\u4e4b\u540e\u7684} a$ \u662f\u5426\u5747 $\\geq 0$  \uff0c\u7531\u4e8e $\\text{Hall}$ \u5b9a\u7406\uff0c\u8fd9\u4e2a\u6761\u4ef6\u662f\u5145\u8981\u7684\u3002\n\n\u6545\u6bcf\u6b21\u5230\u4e00\u4e2a\u9700\u8981\u5224\u65ad\u7684\u70b9\u64a4\u9500\u4e4b\u524d\u7236\u4eb2\u7684\u64cd\u4f5c\u5728\u65b0\u52a0\u5165\u4e00\u4e2a\u64cd\u4f5c\uff0c\u5224\u65ad\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u662f\u5426 $\\geq 0$ \u3002\n\n\u6574\u4e2a\u8fc7\u7a0b\u4ec5\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u652f\u6301\u67e5\u8be2\u6700\u5c0f\u503c\uff0c\u533a\u95f4\u52a0\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u5224\u65ad\u662f\u5426\u52a0\u5165\u53ef\u4ee5\u7ebf\u6bb5\u6811\u4e8c\u5206\uff0c\u6545\u6574\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(n\\log n)$ \u3002",
        "postTime": 1615008965,
        "uid": 293177,
        "name": "sry_",
        "ccfLevel": 9,
        "title": "\u4e5d\u7701\u8054\u80032018 IIIDX"
    },
    {
        "content": "\u9996\u5148\u8003\u8651 $d_i$ \u4e92\u4e0d\u76f8\u540c\u600e\u4e48\u505a\u3002\n\n\u6709\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u601d\u8def\uff1a\u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u628a\u6700\u5c0f\u7684\u4e22\u7ed9\u6839\uff0c\u7136\u540e\u628a\u957f\u5ea6\u4e3a\u7b2c\u4e00\u4e2a\u5b69\u5b50\u7684\u5b50\u6811\u5927\u5c0f\u7684\u4e00\u6bb5\u540e\u7f00\u4e22\u7ed9\u5b83\u9012\u5f52\u6784\u9020\uff0c\u518d\u53d6\u4e00\u6bb5\u957f\u5ea6\u4e3a\u7b2c\u4e8c\u4e2a\u5b69\u5b50\u7684\u5b50\u6811\u5927\u5c0f\u7684\u4e00\u6bb5\u4e22\u7ed9\u7b2c\u4e8c\u4e2a\u5b69\u5b50\u9012\u5f52\u6784\u9020\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u4f46\u662f\u5728 $d_i$ \u53ef\u4ee5\u76f8\u540c\u65f6\uff0c\u8fd9\u4e2a\u505a\u6cd5\u4e0d\u518d\u9002\u7528\u3002\u4f8b\u5982\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/c4rei4nd.png)\n\n\u8d2a\u5fc3\u7ed9\u51fa\u7684\u7ed3\u679c\u7528\u7ea2\u8272\u6570\u5b57\u6807\u660e\uff0c\u800c\u6b63\u786e\u7684\u7ed3\u679c\u7528\u7eff\u8272\u6570\u5b57\u6807\u660e\u3002\n\n\u4f46\u662f\u6211\u4eec\u8fd8\u53ef\u4ee5\u6cbf\u7528\u8fd9\u4e2a\u601d\u8def\uff0c\u95ee\u9898\u5728 **\u6211\u4eec\u663e\u7136\u4e0d\u80fd\u7b80\u5355\u5730\u53d6\u4e00\u4e2a\u540e\u7f00**\u3002\n\n\u95ee\u9898\u6765\u4e86\uff0c\u4e0d\u53d6\u540e\u7f00\uff0c\u600e\u4e48\u53d6\uff1f\n\n\u9996\u5148\u5c06 $d$ \u964d\u5e8f\u6392\u5e8f\u3002\n\n\u9996\u5148\u8fd8\u662f\u628a **\u6700\u5927\u7684\u53ef\u4ee5\u53d6\u51fa\u5b50\u6811\u5927\u5c0f\u4e2a\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\u6570** \u7559\u7ed9\u81ea\u5df1\u3002\u4f46\u662f\u6211\u4eec\u4e0d\u77e5\u9053\u540e\u9762\u8981\u53d6\u4ec0\u4e48\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u59a8\u5c31\u5728\u5b83\u4e0a\u9762\u4e22\u4e00\u4e2a\u6807\u8bb0\uff0c\u544a\u8bc9\u6bd4\u5b83\u9760\u540e\u7684\u6570\u5b83\u4eec\u5c11\u4e86\u5b50\u6811\u5927\u5c0f\u4e2a\u53ef\u4ee5\u53d6\u7684\u6570\u3002\n\n\u4f46\u662f\u6bd4\u5b83\u9760\u524d\u7684\uff0c\u600e\u4e48\u5224\u65ad\u5c11\u4e86\u591a\u5c11\u4e2a\u5462\uff1f\n\n**\u6ce8\u610f\u5230\u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b\uff0c\u6240\u4ee5\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u53bb\u5173\u5fc3\u8fd9\u4e9b\u8282\u70b9\u662f\u4ec0\u4e48\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1\u5b83\u4eec\u591f\u6240\u6709\u5b69\u5b50\u53bb\u7528\u3002\u81f3\u4e8e\u600e\u4e48\u7528\uff0c\u548c\u8fd9\u4e00\u5c42\u5c31\u6ca1\u5173\u7cfb\u4e86\u3002**\n\n~~\u95ee\u9898\u89e3\u51b3\u4e0d\u4e86\u5c31\u4e22\u7ed9\u522b\u4eba\u89e3\u51b3~~\n\n\u6240\u4ee5\u548c\u5b83\u53d6 $\\min$ \u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u6682\u65f6\u8fd8\u6ca1\u6709\u786e\u5b9a\u7528\u54ea\u4e9b\uff0c\u53ea\u9700\u8981\u4fdd\u8bc1\u591f\u7528\u3002\n\n\u8fd9\u4e2a\u53d6 $\\min$ \u5f88\u96be\u53d7\uff0c\u53ef\u4ee5\u8f6c\u5316\u6210\u67e5\u8be2\u540e\u7f00 $\\min$\u3002\n\n\u90a3\u4e48\u73b0\u5728\u95ee\u9898\u5c31\u53d8\u4e3a\u7ef4\u62a4\u533a\u95f4\u51cf\u6cd5\u548c\u524d\u7f00 $\\min$ \u7684\u4e8c\u5206\u67e5\u627e\uff0c\u663e\u7136\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u3002\n\n\u4e8c\u5206\u7684\u65f6\u5019\u6709\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff1a\u5f53\u8fd9\u4e2a\u6700\u4f18\u51b3\u7b56\u70b9 **\u521a\u597d\u5361\u5728\u4e00\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u5de6\u7aef\u70b9\u4e0a** \u7684\u65f6\u5019\u4f1a\u4e8c\u5206\u5230\u4e0d\u5408\u6cd5\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u8981\u7279\u5224\u3002\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n\tregister char c = getchar();\n\tregister int x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline int Abs(const int& x) {return (x > 0 ? x : -x);}\ninline int Max(const int& x, const int& y) {return (x > y ? x : y);}\ninline int Min(const int& x, const int& y) {return (x < y ? x : y);}\n\nstruct Segtree {\n\tint minv[2000005], tag[2000005];\n\tinline void Build(int p, int pl, int pr) {\n\t\tif (pl == pr) {\n\t\t\tminv[p] = pl;\n\t\t\treturn;\n\t\t}\n\t\tint mid = pl + pr >> 1;\n\t\tBuild(p << 1, pl, mid);\n\t\tBuild(p << 1 | 1, mid + 1, pr);\n\t\tminv[p] = Min(minv[p << 1], minv[p << 1 | 1]);\n\t}\n\tinline void Pushdown(int p) {\n\t\tif (!tag[p]) return;\n\t\ttag[p << 1] += tag[p];\n\t\tminv[p << 1] += tag[p];\n\t\ttag[p << 1 | 1] += tag[p];\n\t\tminv[p << 1 | 1] += tag[p];\n\t\ttag[p] = 0;\n\t}\n\tinline void Modify(int p, int pl, int pr, int l, int r, int v) {\n\t\tif (pl == l && pr == r) {\n\t\t\tminv[p] += v;\n\t\t\ttag[p] += v;\n\t\t\treturn;\n\t\t}\n\t\tPushdown(p);\n\t\tint mid = pl + pr >> 1;\n\t\tif (mid >= r) Modify(p << 1, pl, mid, l, r, v);\n\t\telse if (mid + 1 <= l) Modify(p << 1 | 1, mid + 1, pr, l, r, v);\n\t\telse {\n\t\t\tModify(p << 1, pl, mid, l, mid, v);\n\t\t\tModify(p << 1 | 1, mid + 1, pr, mid + 1, r, v);\n\t\t}\n\t\tminv[p] = Min(minv[p << 1], minv[p << 1 | 1]);\n\t}\n\tinline int Query(int p, int pl, int pr, int k) {\n\t\tif (pl == pr) return pl + (minv[p] < k);\n\t\tPushdown(p);\n\t\tint mid = pl + pr >> 1;\n\t\tif (k <= minv[p << 1 | 1]) return Query(p << 1, pl, mid, k);\n\t\telse return Query(p << 1 | 1, mid + 1, pr, k);\n\t}\n};\nint n, fa[500005], d[500005], pnt[500005], siz[500005], ans[500005];\ndouble k;\nSegtree sgt;\n\ninline void Read() {\n\tscanf(\"%d%lf\", &n, &k);\n\tfor (int i = 1;i <= n;i++) {\n\t\tscanf(\"%d\", &d[i]);\n\t\tfa[i] = floor(i / k);\n\t}\n}\n\ninline void Prefix() {\n\tsort(d + 1, d + n + 1, greater <int>());\n\tfor (int i = 1;i <= n;i++) siz[i] = 1;\n\tfor (int i = n;i >= 1;i--) siz[fa[i]] += siz[i];\n\tsgt.Build(1, 1, n);\n\tfor (int i = n - 1;i >= 1;i--) pnt[i] = (d[i] == d[i + 1]) * (pnt[i + 1] + 1);\n}\n\ninline void Solve() {\n\tfor (int i = 1;i <= n;i++) {\n\t\tif (fa[i] && fa[i] != fa[i - 1]) sgt.Modify(1, 1, n, ans[fa[i]], n, siz[fa[i]] - 1);\n\t\tint x = sgt.Query(1, 1, n, siz[i]);\n\t\tx += pnt[x]; pnt[x]++;\n\t\tans[i] = x;\n\t\tsgt.Modify(1, 1, n, x, n, -siz[i]);\n\t}\n\tfor (int i = 1;i <= n;i++) printf(\"%d \", d[ans[i]]);\n}\n\nint main() {\n\tRead();\n\tPrefix();\n\tSolve();\n\t#ifdef CFA_44\n\twhile (1);\n\t#endif\n\treturn 0;\n}\n```",
        "postTime": 1614399021,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4364 \u3010[\u4e5d\u7701\u8054\u80032018]IIIDX\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/LaoMang-no-blog/p/16504804.html)\n\n---\n\n[**\u4f60\u8c37 link**](https://www.luogu.com.cn/problem/P4364)\n\n\u5148\u7b80\u5316\u4e00\u4e0b\u9898\u610f\uff0c\u628a\u4e0b\u53d6\u6574\u4e4b\u7c7b\u7684\u76ae\u7ed9\u5148\u5265\u4e86\uff0c\u95ee\u9898\u8f6c\u5316\u6210\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u8981\u6c42\u7ed9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u5206\u914d\u6743\u503c\uff0c\u4f7f\u6811\u6ee1\u8db3\u5c0f\u6839\u5806\u6027\u8d28\u7684\u60c5\u51b5\u4e0b\u5b57\u5178\u5e8f\u6700\u5927\uff08\u7ed9\u5b9a\u7684 $d$ \u53ea\u5f71\u54cd\u6811\u7684\u5f62\u6001\uff0c\u4e0d\u7406\u89e3\u4e3a\u4ec0\u4e48\u4e13\u95e8\u8981\u7ed9\u4e00\u4e2a $k$ \u4e3a\u6574\u6570\u7684\u90e8\u5206\u5206\uff09\u3002\n\n\u53d1\u73b0\u6709\u5f88\u591a\u7684\u90e8\u5206\u5206\u7ed9\u5230\u4e86\u6743\u503c\u4e92\u4e0d\u76f8\u7b49\uff0c\u6211\u4eec\u8003\u8651\u6743\u503c\u4e92\u4e0d\u76f8\u7b49\u600e\u4e48\u505a\uff0c\u4e0d\u59a8\u518d\u7279\u5316\u4e00\u70b9\uff0c\u7ed9\u4e00\u4e2a\u4e8c\u53c9\u5806\u5206\u914d\u4e00\u4e2a\u6392\u5217\uff0c\u770b\u60c5\u51b5\u4f1a\u662f\u600e\u4e48\u6837\u7684\u3002\n\n\u9996\u5148 $1$ \u8282\u70b9\u503c\u56fa\u5b9a\u540e\u8003\u8651 $2$ \u8282\u70b9\u7684\u6743\u503c\uff0c\u901a\u8fc7\u5806\u6027\u8d28\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 $2$ \u8282\u70b9\u7684\u5b50\u6811\u91cc\u4efb\u610f\u4e00\u70b9\u7684\u6743\u503c\u90fd\u662f\u8981\u6bd4 $2$ \u8282\u70b9\u7684\u6743\u503c\u5927\u7684\uff0c\u90a3\u4e48\u56e0\u4e3a\u8d2a\u5fc3\u4f7f $2$ \u8282\u70b9\u6700\u5927\uff0c\u5c31\u628a\u6700\u540e $\\mathrm{size}_2$ \u4e2a\u6743\u503c\u5206\u914d\u7ed9 $2$ \u7684\u513f\u5b50\uff0c\u7136\u540e\u53d1\u73b0\u8fd9\u53d8\u6210\u4e86\u4e00\u4e2a\u9012\u5f52\u95ee\u9898\uff0c\u5bf9\u4ee5 $2$ \u4e3a\u6839\u7684\u5b50\u6811\u5206\u914d\u6743\u503c\uff0c\u6709\u9650\u5206\u914d $4$\uff0c\u7b49 $4$ \u5206\u914d\u5b8c\u518d\u8003\u8651 $5$\uff0c\u7b49\u5230 $2$ \u8003\u8651\u5b8c\u7136\u540e\u518d\u8003\u8651 $3$\u3002\n\n\u5bf9\u4e8e\u591a\u53c9\u6811\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\u5e76\u6ca1\u6709\u4ec0\u4e48\u53d8\u5316\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u6309\u987a\u5e8f\u4f9d\u6b21\u5904\u7406\u5b83\u7684\u6bcf\u4e2a\u5b50\u6811\uff0c\u9012\u5f52\u89e3\u51b3\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u62ff\u5230 $55$ \u7684\u5206\u6570\uff0c\u8003\u8651\u518d\u6743\u503c\u6709\u76f8\u7b49\u60c5\u51b5\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u9519\u3002\n\n\u8003\u8651\u8fd9\u6837\u4e00\u7ec4\u6570\u636e\uff1a\n\n```\n3 3.0\n1 1 2\n```\n\n![](https://s2.loli.net/2022/07/22/EkiuQrny867OG5M.png)\n\n\uff08$0$ \u662f\u4f5c\u7684\u865a\u62df\u8282\u70b9\uff09\n\n\u6b64\u65f6\u5982\u679c\u6309\u7167\u521a\u521a\u7684\u65b9\u6cd5\u5206\u914d\u6743\u503c\uff0c\u6211\u4eec\u4f1a\u4e3a $3$ \u5206\u914d $2$\uff0c\u4e3a $2$ \u5206\u914d $1$\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u4f18\u7684\uff0c\u6211\u4eec\u601d\u8003\u662f\u4ec0\u4e48\u8ba9\u6211\u4eec\u7684\u8d2a\u5fc3\u5931\u8d25\u4e86\u3002\n\n\u6574\u4f53\u6765\u770b\u6211\u4eec\u7684\u8d2a\u5fc3\u5904\u7406\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u81ea\u5df1\u7684\u6743\u503c\u5206\u914d\u597d\u4ee5\u540e\u987a\u5e8f\u904d\u5386\u6240\u6709\u7684\u513f\u5b50\u8fdb\u884c\u9012\u5f52\u5904\u7406\uff0c\u6574\u4e2a\u662f\u4e00\u4e2a\u524d\u5e8f\u904d\u5386\u7684\u8fc7\u7a0b\uff0c\u4f46\u662f\u8003\u8651\u6211\u4eec\u7684\u8981\u6c42\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u5728\u6811\u4e2d\u5e94\u8be5\u8fdb\u884c\u7684\u662f\u7c7b\u4f3c bfs \u904d\u5386\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u7684\u8d2a\u5fc3\u8fc7\u7a0b\u4ece\u6839\u672c\u4e0a\u6ca1\u6709\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u5f53\u4f7f\u7528\u53e6\u4e00\u79cd\u8d2a\u5fc3\u7684\u601d\u8def\u3002\n\n\u5728\u4e0a\u9762\u7684\u8d2a\u5fc3\u4e2d\uff0c\u6211\u4eec\u6bcf\u5904\u7406\u5b8c\u4e00\u4e2a\u70b9\uff0c\u5c06\u5b83\u7684\u5b50\u6811\u6743\u503c\u5206\u914d\u56fa\u5b9a\uff0c\u7136\u540e\u518d\u53bb\u5904\u7406\u5b83\u7684\u5144\u5f1f\uff0c\u8fd9\u6b21\u6211\u4eec\u4e0d\u8fd9\u6837\u505a\uff0c\u9996\u5148\u6211\u4eec\u5c06\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\u56fa\u5b9a\uff0c\u7136\u540e\u5bf9\u4e8e\u6211\u4eec\u5148\u4e0d\u53bb\u5206\u914d\u5b83\u7684\u5b50\u6811\uff0c\u5c06\u5b83\u5b50\u6811\u9700\u8981\u7684\u6743\u503c\u5148\u201c\u4ee3\u4e3a\u4fdd\u7ba1\u201d\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u8fd9\u4e2a\u201c\u4fdd\u7ba1\u201d\u9700\u8981\u6ee1\u8db3\u4ec0\u4e48\u8981\u6c42\u5462\uff0c\u5f53\u7136\u662f\u4e4b\u540e\u5f97\u8fd8\u5f97\u8d77\uff0c\u5373\u5bf9\u4e8e\u4e00\u4e2a\u5206\u914d\u4e86\u6743\u503c $x$ \u7684\u70b9 $p$ \u800c\u8a00\uff0c\u5728\u5904\u7406\u5230\u5b83\u7684\u513f\u5b50\u4e4b\u524d\uff0c\u5c0f\u4e8e\u7b49\u4e8e $x$ \u7684\u6570\u7684\u6570\u91cf\u4e0d\u80fd\u5c11\u4e8e $\\mathrm{size}_p$\u3002\n\n\u5177\u4f53\u600e\u4e48\u7ef4\u62a4\u5462\uff0c\u9996\u5148\u5b9a\u4e49 $c_i$ \u8868\u793a\u5f53\u524d\u5c0f\u4e8e\u7b49\u4e8e $i$ \u7684\u6570\u7684\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9\u7684\u6743\u503c\u4e3a $i$ \u7684\u60c5\u51b5\u4e0b\u5b83\u7684\u5b50\u6811\u6700\u591a\u6709\u591a\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u79bb\u6563\u5316\u5b8c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u5f53\u6211\u4eec\u505a\u5230\u70b9 $p$ \u65f6\uff0c\u8003\u8651\u5982\u679c $p$ \u7684\u6743\u503c\u4e3a $x$\uff0c\u5219\u6211\u4eec\u4f1a\u201c\u4fdd\u7ba1\u201d\u6210\u4ec0\u4e48\u6837\uff0c\u5bf9\u4e8e\u6240\u6709 $i$ \u6ee1\u8db3 $i\\ge x$\uff0c\u5bf9\u5e94\u7684 $c_i\\gets c_i-\\mathrm{size}_p$\uff0c\u8003\u8651 $c$ \u6570\u7ec4\u7684\u610f\u601d\u5c31\u53ef\u4ee5\u7406\u89e3\u4e86\uff0c\u6211\u4eec\u5bf9\u4e8e\u5b50\u5b59\u91cc\u6bcf\u4e2a\u503c\u5230\u5e95\u662f\u51e0\u8fd8\u6ca1\u6709\u786e\u5b9a\uff0c\u4f46\u6211\u4eec\u77e5\u9053\u8981\u201c\u4fdd\u7ba1\u201d $\\mathrm{size}_p$ \u4e2a\u5c0f\u4e8e\u7b49\u4e8e $x$ \u7684\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u627e\u5230\u7684 $x$ \u80af\u5b9a\u8981\u6ee1\u8db3 $\\forall i\\ge x,\\ c_i\\ge\\mathrm{size}_p$\uff0c\u4ece $c$ \u6570\u7ec4\u7684\u610f\u601d\u7406\u89e3\uff0c\u8fd9\u4e2a\u51cf\u6389\u662f\u201c\u4fdd\u7ba1\u201d\u7684\uff0c\u5982\u679c\u73b0\u5728\u6709\u4e00\u4e2a $c_i$ \u4e3a\u8d1f\uff0c\u5230\u65f6\u5019\u8fd9\u4e2a $c_i$ \u8981\u8fd8\u5c31\u8fd8\u4e0d\u4e0a\u4e86\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u6ee1\u8db3\u8fd9\u4e2a\u8981\u6c42\uff0c\u4e14\u5bf9\u4e8e\u6bcf\u4e2a $p$\uff0c\u5904\u7406\u5230\u5b83\u7684\u513f\u5b50\u65f6\u5e94\u5f53\u628a\u5b83\u7684\u5f71\u54cd\u6d88\u53bb\uff0c\u56e0\u4e3a $p$ \u662f\u7ed9\u5b83\u513f\u5b50\u201c\u4fdd\u7ba1\u201d\u7684\uff0c\u73b0\u5728\u5b83\u513f\u5b50\u6765\u4e86\u80af\u5b9a\u5c31\u8981\u8fd8\u4e86\u3002\n\n\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u4e0a\u96be\u5ea6\u4e0d\u5927\u3002\n\n[c++ \u4ee3\u7801](https://www.cnblogs.com/LaoMang-no-blog/p/16504804.html)",
        "postTime": 1658456187,
        "uid": 310525,
        "name": "\u8001\u83bd\u83bd\u7a7f\u4e00\u5207",
        "ccfLevel": 0,
        "title": "[\u4e5d\u7701\u8054\u8003 2018] IIIDX \u9898\u89e3"
    },
    {
        "content": "\u4e00\u9053\u5f88\u6709\u8da3\u7684\u9898\u3002        \n        \n\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u6709\u4e00\u6761\u51fa\u8fb9\uff0c\u4e8e\u662f\u539f\u9898\u5f62\u6210\u4e86\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\u3002      \n\n60pts \u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u6709 ```d[i]``` \u4e92\u4e0d\u76f8\u7b49\u7684\u60c5\u51b5\u3002\u6211\u4eec\u76f4\u63a5\u8d2a\u5fc3\u4e00\u4e0b\u628a\u5e8f\u5217\u62c6\u5206\u6210\u5f88\u591a\u6bb5\uff0c\u53ef\u4ee5\u8bc1\u660e\u6211\u4eec\u8fd9\u4e48\u9009\u51fa\u6765\u7684\u5b57\u5178\u5e8f\u662f\u6700\u5927\u7684\u3002                  \n\n\u7136\u800c\u5f53\u51fa\u73b0\u76f8\u540c ```d[i]``` \u65f6\u8fd9\u4e2a\u8d2a\u5fc3\u5c31\u5f88\u6210\u95ee\u9898\uff0c\u6bd4\u5982\u8bf4\u6211\u4eec\u73b0\u5728\u8d2a\u5fc3\u6ef4\u5272\u4e00\u6bb5\u4f46\u662f\u5272\u7684\u90a3\u4e00\u8282\u521a\u597d\u662f\u4e00\u5806\u76f8\u540c\u7684\u6570\u7ec4\u6210\u7684\u4e00\u8282\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u628a\u533a\u95f4\u4e00\u76f4\u53f3\u79fb\u5230\u76f8\u540c\u7684\u6570\u4e00\u8282\u7684\u6700\u53f3\u7aef\u6765\u8003\u8651\u7ed9 x + 1 \u8282\u70b9\u4e00\u4e2a\u66f4\u4f18\u7684\u7b54\u6848\u3002               \n(\u5982\u679c\u5bf9\u8fd9\u4e2a\u5730\u65b9\u8fd8\u662f\u6709\u95ee\u9898\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u770b\u4e00\u4e9b\u5176\u4ed6\u9898\u89e3\u91cc\u9762\u7684 hack \u6570\u636e\u518d\u56de\u6765\u770b\u4e00\u4e0b\u8fd9\u91cc\u5c31\u57fa\u672c\u4e0a\u6ca1\u4ec0\u4e48\u95ee\u9898\u4e86)       \n\n\u63a5\u7740\u6211\u4eec\u5c31\u60f3\u5230\u4e86\u53ef\u4e0d\u53ef\u4ee5\u8003\u8651\u66b4\u529b\u5148\u505a\u4e00\u904d\u5047\u8d2a\u5fc3\u7136\u540e\u518d\u6765\u66b4\u529b\u6362\uff0c\u8fd9\u4e2a\u601d\u8def\u5f88\u597d\u4f46\u662f\u5728\u672c\u9898\u4e2d\u4f53\u73b0\u4e0d\u51fa\u6765\uff0c\u4f60\u6362\u4e86\u8fc7\u540e\u53c8\u4f1a\u5f71\u54cd\u5230\u539f\u6765\u5b50\u6811\u7684\u60c5\u51b5\u63a5\u7740\u5c31\u53c8\u5f97\u53bb\u8003\u8651\u539f\u6765\u5b50\u6811\u7684\u60c5\u51b5\uff0c\u53cd\u6b63\u633a\u590d\u6742\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e0d\u4e00\u5b9a\u80fd\u5f97\u5230\u4fdd\u8bc1\u3002          \n\n\u6211\u4eec\u8fd9\u4e48\u8003\u8651\uff0c\u4f60\u8981\u5b57\u5178\u5e8f\u6700\u5927\u6211\u662f\u4e0d\u662f\u5c31\u76f4\u63a5\u4ece $1 \\sim n$ \u7ed9\u4f60\u505a\uff0c\u90a3\u4e48\u6211\u4eec\u9996\u5148\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u53bb\u4e2a\u91cd\u7136\u540e\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\u4ee5\u53ca\u6bcf\u4e2a\u6570\u6709\u591a\u5c11\u4e2a\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\u6570\uff0c\u63a5\u7740\u904d\u5386 $1 \\sim n$ \uff1a        \n\n- \u6211\u4eec\u4ee4 ```f[i]``` \u4e3a\u5f53\u524d\u72b6\u6001\u4e00\u4e2a\u6570\u6709\u591a\u5c11\u4e2a\u5927\u4e8e\u7b49\u4e8e\u5b83\u5e76\u4e14\u8fd8\u6ca1\u6709\u9009\u62e9\u7684\u6570\u5b57\u3002       \n\n- \u5047\u82e5\u904d\u5386\u5230\u4e86 i \uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u627e\u5230\u5728\u6392\u597d\u5e8f\u53bb\u4e86\u91cd\u7684 d \u6570\u7ec4\u4e0b\u6700\u9760\u53f3\u8fb9\u7684 ```siz[i] <= f[idx]``` \uff0c\u90a3\u4e48\u5f53\u524d\u8282\u70b9\u7684\u7b54\u6848\u5c31\u662f ```d[idx]``` \u4e86\uff0c\u73b0\u5728\u6211\u4eec\u53ea\u8981\u53ef\u4ee5\u52a8\u6001\u7ef4\u62a4 f \u6570\u7ec4\u8fd9\u9053\u9898\u4e0d\u5c31\u51fa\u6765\u4e86\u5417\uff1f        \n\n- \u6211\u4eec\u8003\u8651\u7ebf\u6bb5\u6811\u3002\u5f88\u663e\u7136\u5047\u82e5\u904d\u5386\u5230\u4e86 i \u627e\u5230\u4e86\u4e00\u4e2a\u4f4d\u7f6e idx \uff0c\u90a3\u4e48\u5b83\u5c31\u5bf9 $[1 , i]$ \u7684\u6240\u6709 f \u503c\u5168\u90e8\u51cf\u53bb\u4e86\u4e00\u4e2a ```siz[i]``` \uff0c\u56e0\u4e3a\u4f60\u5f53\u524d\u8fd9\u4e2a\u70b9\u9700\u8981\u6709 ```siz[i]``` \u4e2a\u5f80\u5b50\u6811\u91cc\u9762\u586b\u3002           \n\n- \u67e5\u8be2\u65f6\u6211\u4eec\u9996\u5148\u8981\u628a\u7236\u4eb2\u541e\u6389\u7684\u4f4d\u7f6e\u7ed9\u201c\u5410\u201d\u51fa\u6765\uff0c\u8fd9\u91cc\u5176\u5b9e\u5f88\u597d\u7406\u89e3\uff0c\u56e0\u4e3a\u4f60\u7236\u4eb2\u73b0\u5728\u672c\u6765\u5360\u4e86\u4e00\u4e9b\u6570\u90a3\u4e48\u73b0\u5728\u90fd\u8003\u8651\u4f60\u7684\u513f\u5b50\u4e86\uff0c\u90a3\u4e3a\u4ec0\u4e48\u4e0d\u628a\u4f60\u5360\u7684\u4f4d\u5b50\u7ed9\u5410\u51fa\u6765\u5462\uff1f\u81f3\u4e8e\u5176\u4ed6\u70b9\u5b83\u5360\u7740\u90a3\u4e9b\u6570\u662f\u677f\u4e0a\u9489\u9489\u7684\u4e8b\u5b9e\u6211\u4eec\u4e5f\u65e0\u6cd5\u6539\u53d8\u3002       \n\n- \u63a5\u7740\u6211\u4eec\u8003\u8651\u6211\u4eec\u7684\u67e5\u8be2\uff0c\u96be\u9053\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4```max{f[i]}``` \u7136\u540e\u7ebf\u6bb5\u6811\u4e0a find \u5417\uff1f\u8fd9\u4e48\u505a\u5176\u5b9e\u662f\u6709\u95ee\u9898\u7684\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u4fee\u6539\u65f6\u5176\u5b9e\u53ea\u7ba1\u4e86 $[1 , i]$ \u91cc\u9762\u7684\u6240\u6709 f \u503c\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5b83\u5bf9 $[i + 1 , n]$ \u91cc\u9762\u7684 f \u503c\u4e5f\u6709\u5f71\u54cd\u6211\u4eec\u5374\u6ca1\u6709\u66f4\u65b0\uff0c\u51c6\u786e\u6765\u8bf4\u6211\u4eec\u66f4\u65b0\u4e0d\u6765\uff0c\u56e0\u4e3a\u6211\u4eec\u540e\u9762\u7684\u70b9\u7684 f \u503c\u662f\u65e0\u6cd5\u786e\u5b9a\u7684\uff0c\u4f60\u603b\u4e0d\u80fd\u66b4\u8bba\u6ef4\u5168\u90e8\u51cf\u53bb\u4e00\u4e2a ```siz[i]```\u5427\u3002         \n\n- \u6240\u4ee5\u6211\u4eec\u6b64\u65f6\u53ef\u4ee5\u5f88\u5de7\u5999\u6ef4\u5229\u7528\u524d\u7f00\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u7ebf\u6bb5\u6811\u91cc\u9762\u7ef4\u62a4\u7684 f \u503c\u5176\u5b9e\u662f\u4e0d\u51c6\u786e\u7684\uff0c\u4f46\u662f\u5982\u679c\u8fd9\u4e2a f \u53d6\u4e00\u4e2a\u524d\u7f00 min \u5c31\u4e00\u5b9a\u662f\u6b63\u786e\u7684\u3002\u56e0\u4e3a\u4f60\u5f53\u524d\u7684 f \u503c\u4e14\u53ea\u4f1a\u88ab\u524d\u9762\u7684\u9009\u62e9\u7ed9\u5f71\u54cd\u5230\uff0c\u90a3\u4e48\u6211\u4eec\u8fd9\u4e48\u505a\u5176\u5b9e\u5c31\u662f\u62b5\u6d88\u4e86\u524d\u9762\u7684\u5f71\u54cd\u3002             \n\n- \u4e8e\u662f\u6211\u4eec\u76f4\u63a5\u770b\u5f53\u524d\u7684\u524d\u7f00 f \u662f\u5426\u5927\u4e8e\u7b49\u4e8e\u67e5\u8be2\u7684 ```siz[i]``` \u5373\u53ef\u3002       \n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$ \u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\nconst int Len = 5e5 + 5;\nint n,m,ans[Len << 2],tag[Len << 2],a[Len],lsh[Len],tot,f[Len],cnt[Len],siz[Len],fa[Len],Print[Len];\nbool flag[Len];\nint ls(int x){return x << 1;}\nint rs(int x){return x << 1 | 1;}\nvoid push_up(int x){ans[x] = min(ans[ls(x)] , ans[rs(x)]);}\nvoid build(int p,int l,int r)\n{\n\ttag[p] = 0;\n\tif(l == r){ans[p] = f[l] ; return;}\n\tint mid = (l + r) >> 1;\n\tbuild(ls(p) , l , mid) , build(rs(p) , mid + 1 , r);\n\tpush_up(p); \n}\nvoid push_down(int p,int l,int r)\n{\n\tif(tag[p]) \n\t{\n\t\tans[ls(p)] += tag[p] , ans[rs(p)] += tag[p];\n\t\ttag[ls(p)] += tag[p] , tag[rs(p)] += tag[p];\n\t}\n\ttag[p] = 0;\n}\nvoid update(int p,int l,int r,int nl,int nr,int w)\n{\n\tif(nl <= l && nr >= r) \n\t{\n\t\tans[p] += w , tag[p] += w;\n\t\treturn; \t\n\t}\t\n\tpush_down(p , l , r);\n\tint mid = (l + r) >> 1;\n\tif(nl <= mid) update(ls(p) , l , mid , nl , nr , w);\n\tif(nr > mid) update(rs(p) , mid + 1 , r , nl , nr , w);\n\tpush_up(p);\n}\nint find(int p,int l,int r,int w)\n{\n\tif(l == r){return ans[p] >= w ? l : l - 1;}\n\tpush_down(p , l , r);\n\tint mid = (l + r) >> 1;\n\t//printf(\"%d %d %d %d\\n\",w,ans[ls(p)],l,mid);\n\tif(ans[ls(p)] >= w) return find(rs(p) , mid + 1 , r , w);\n\treturn find(ls(p) , l , mid , w);\n}\ndouble k;\nint main()\n{\n\tscanf(\"%d %lf\",&n,&k);\n\tfor(int i = 1 ; i <= n ; i ++) scanf(\"%d\",&lsh[i]);\n\tsort(lsh + 1 , lsh + 1 + n);\n\tint lst = 1;\n\tfor(int i = 1 ; i <= n ; i ++) \n\t{\n\t\tif(lsh[i] != lsh[i + 1]) \n\t\t{\n\t\t\ttot ++;\n\t\t\tcnt[tot] = i - lst + 1;\n\t\t\ta[tot] = lsh[i];\n\t\t\tlst = i + 1;\n\t\t}\n\t}\n\tfor(int i = tot ; i >= 1 ; i --) f[i] = f[i + 1] + cnt[i];\n\tbuild(1 , 1 , tot); \n\tfor(int i = 1 ; i <= n ; i ++) fa[i] = (int)(i / k) , siz[i] = 1;\t\n\tfor(int i = n ; i >= 1 ; i --) siz[fa[i]] += siz[i];\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tif(fa[i] && !flag[fa[i]]) update(1 , 1 , tot , 1 , Print[fa[i]] , siz[fa[i]] - 1);\n \t\tflag[fa[i]] = 1 ; int num = find(1 , 1 , tot , siz[i]);\n\t\tupdate(1 , 1 , tot , 1 , num , -siz[i]);\n\t\tPrint[i] = num;\n\t\tprintf(\"%d \",a[num]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1617783808,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4364 [\u4e5d\u7701\u8054\u80032018]IIIDX"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/P4364)\n\n\u9996\u5148\u8fd9\u4e2a\u6761\u4ef6\u5f88\u597d\u6ee1\u8db3\uff0c\u751a\u81f3 sort \u4e00\u4e0b\u5c31\u884c\u3002\n\n\u624b\u6478\u51e0\u7ec4\u6570\u636e\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u6027\u8d28\uff0c\u5982\u679c\u5408\u6cd5\uff0c\u90a3\u4e48\u524d\u9762\u7684\u70b9\u8d8a\u5927\u8d8a\u597d\u3002\uff08\u5e9f\u8bdd\uff09\n\n\u9996\u5148\u6211\u4eec\u628a\u70b9\u4e4b\u95f4\u7684\u5927\u5c0f\u6811\u5f62\u5173\u7cfb\u5efa\u51fa\u6765\uff0c$fa[i] = \\lfloor \\frac{i}{k} \\rfloor $\u3002\n\n55pts \u505a\u6cd5\uff1a\n\n\u628a\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6bcf\u4e2a\u70b9\u4e00\u5f00\u59cb\u8d4b\u503c\u4e3a $1$\uff0c\u5bf9\u4e8e\u70b9 $i$ \u627e\u5230\u524d\u7f00\u548c\u4e0d\u5c0f\u4e8e $siz[i]$ \u7684\u6700\u9760\u5de6\u7684\u70b9\uff0c\u7528\u8fd9\u4e2a\u70b9\u7ed9 $i$ \u8d4b\u503c\u5e76\u628a $i$ \u524d\u9762\u7684\u70b9\u5168\u90e8\u6539\u4e3a $0$\u3002\n\n\u95ee\u9898\u5173\u952e\u5728\u4e8e\u91cd\u590d\u7684\u6743\u503c\u3002\n\n\u5047\u8bbe\u73b0\u5728\u7684\u6743\u503c\u96c6\u5408 $\\{8,7,6,5,5,5 \\}$\uff0c\u5176\u4e2d $siz[1]=4$\uff0c$siz[2] = 2 $\u3002\u6309\u7167\u521a\u624d\u7684\u7b56\u7565\u4f1a\u7ed9 $1$ \u548c $2$ \u90fd\u8d4b\u4e0a $5$\uff0c\u4f46\u662f\u53d1\u73b0 $1$ \u8d4b $5$\uff0c$2$ \u8d4b $7$ \u662f\u4e2a\u66f4\u4f18\u7684\u7b56\u7565\u3002\n\n\u5982\u679c\u6211\u4eec\u8ba9 $1$ \u8d4b\u5230\u6700\u53f3\u8fb9\u90a3\u4e2a $5$\uff0c\u8fd9\u6837\u4fdd\u8bc1\u4e86 $1$ \u7684\u503c\u6700\u5927\uff0c\u540c\u65f6\u4e5f\u4fdd\u8bc1\u4e86\u540e\u9762\u7684\u70b9\u53ef\u4ee5\u53d6\u5230\u53ef\u80fd\u7684\u66f4\u5927\u503c\u3002\n\n\u6240\u4ee5\u5047\u5982 $i$ \u8981\u53d6 $val$ \u8fd9\u4e2a\u503c\uff0c\u90a3\u4e48\u53d6 $val$ \u6700\u9760\u53f3\u7684\u51fa\u73b0\u4f4d\u7f6e\u90a3\u4e2a\u80af\u5b9a\u6700\u4f18\u3002\n\n\u4f46\u662f\u8fd9\u6837\u7684\u8bdd $1$ \u7684\u5b50\u6811\u5185\u7684\u6743\u503c\u96c6\u5408\u5c31\u4e0d\u786e\u5b9a\u4e86\uff0c\u524d\u9762\u8d4b $0$ \u8d4b $1$ \u7684\u505a\u6cd5\u4e0d\u592a\u53ef\u884c\u3002\n\n\u8f6c\u800c\u7ef4\u62a4\u524d\u7f00\u548c\uff0c\u8bbe $f[i]$ \u8868\u793a $i$ \u5de6\u8fb9\u8fd8\u6709\u591a\u5c11\u4e2a\u80fd\u53d6\u7684\u70b9\uff08\u5f88\u660e\u663e $f[i]$ \u5355\u8c03\u4e0d\u964d\uff09\uff0c\u90a3\u4e48\u5047\u8bbe $i$ \u53d6\u5230\u4e86 $x$ \u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\uff0c\u90a3\u4e48\u5c31\u628a$x$ \u5f80\u53f3\uff08\u5305\u62ec\u81ea\u8eab\uff09\u7684\u503c\u5168\u90e8\u51cf\u53bb $siz[i]$ \u5c31\u597d\u4e86\uff08\u8fd9\u4e2a\u533a\u95f4\u4fee\u64cd\u4f5c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff09\u3002\n\n\u81f3\u4e8e\u67e5\u627e\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u627e\u5230\u6700\u9760\u5de6\u7684 $f[x] \\ge siz[i]$ \u7684\u70b9\u5c31\u597d\u4e86\u3002\n\n\u4ee5\u4e0b\u662f\u4ee3\u7801\u5b9e\u73b0\u7684\u4e00\u4e9b\u7ec6\u8282\uff1a\uff08\u5efa\u8bae\u81ea\u5df1\u624b\u6478\u51e0\u7ec4\u6570\u636e\u7406\u89e3\u4e00\u4e0b\uff09\n\n1. \u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u7684\u70b9\u5b9e\u9645\u4e0a\u5e76\u4e0d\u6ee1\u8db3\u5355\u8c03\u4e0d\u964d\uff08\u5b9e\u9645\u7684 $f[i]$\u5e94\u8be5\u662f\u7ebf\u6bb5\u6811\u91cc\u7ef4\u62a4\u7684\u503c\u7684\u540e\u7f00\u6700\u5c0f\u503c\uff09\uff0c\u56e0\u6b64\u4e8c\u5206\u65f6\u8981\u4fdd\u8bc1\u5982\u679c\u53f3\u5b50\u6811\u7684\u6700\u5927\u503c\u5927\u4e8e\u7b49\u4e8e $siz[i]$ \u65f6\u518d\u5f80\u5de6\u5b50\u6811\u8dd1\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1 $f[x] \\ge siz[i] $ \u7684\u9650\u5236\u6761\u4ef6\u3002\n\n2. \u6700\u540e\u6211\u4eec\u4e8c\u5206\u5230\u7684\u70b9\u5f88\u53ef\u80fd\u662f\u6700\u9760\u53f3\u7684\u5c0f\u4e8e $siz[i]$ \u7684\u70b9\uff0c\u6240\u4ee5\u6700\u540e\u4e00\u6b65\u52a0\u4e00\u4e2a\u7279\u5224\u5224\u65ad\u662f\u5426\u7b54\u6848\u662f\u53f3\u4fa7\u76f8\u90bb\u7684\u70b9\u3002\n\n3. \u5982\u679c\u4f4d\u7f6e $x-1$ \u548c $x$ \u5bf9\u5e94\u7684\u503c\u76f8\u540c\uff0c\u800c $x$ \u4e4b\u524d\u5df2\u7ecf\u88ab\u4e00\u4e2a\u70b9\u53d6\u8fc7\u4e86\uff0c\u90a3\u4e48\u53e6\u4e00\u4e2a\u70b9\u53d6\u5728 $x-1$ \u548c $x$ \u662f\u7b49\u4ef7\u7684\u3002\uff08\u7b54\u6848\u76f8\u540c\uff0c\u5bf9 $f[i]$ \u7684\u5f71\u54cd\u4e5f\u76f8\u540c\uff09\n\n4. \u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u8feb\u5e94\u8be5\u53d6 $x$ \u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u800c $x$ \u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u524d\u88ab\u53d6\u8fc7\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u53ea\u80fd\u5f80\u53f3\u53bb\u627e\u4f4d\u7f6e\uff0c\u5373\u4f7f\u8fd9\u4e2a\u4f4d\u7f6e\u6bd4 $x$ \u5bf9\u5e94\u7684\u503c\u66f4\u5c0f\u3002\n\n5. \u5f53\u4e00\u4e2a\u70b9\u7684\u513f\u5b50\u8282\u70b9\u88ab\u8ba1\u7b97\u5230\u65f6\uff0c\u90a3\u4e48\u8981\u628a\u5b83\u7ed9\u513f\u5b50\u8282\u70b9\u9884\u7559\u7684\u4f4d\u7f6e\u5bf9 $f$ \u7684\u5f71\u54cd\u5220\u6389\u3002\uff08\u4e4b\u540e\u513f\u5b50\u8282\u70b9\u4f1a\u76f8\u7ee7\u628a\u8fd9\u4e2a\u70b9\u6240\u9884\u7559\u7684\u4f4d\u7f6e\u5360\u6ee1\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\uff09\n\n\u4ee3\u7801\u5176\u5b9e\u548c\u522b\u4eba\u957f\u5f97\u90fd\u5dee\u4e0d\u591a\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#define ls (x << 1)\n#define rs ((x << 1) | 1)\nusing namespace std;\nconst int MAXN = 5e5 + 50;\nint a[MAXN], cnt[MAXN], siz[MAXN], ans[MAXN];\nint fa[MAXN], vis[MAXN];\nint N;\ndouble k;\nstruct SegT\n{\n    int val[MAXN * 4], tag[MAXN * 4];\n    void pushdown(int x)\n    {\n        if (!tag[x])\n            return;\n        tag[ls] += tag[x];\n        tag[rs] += tag[x];\n        val[ls] += tag[x];\n        val[rs] += tag[x];\n        tag[x] = 0;\n    }\n    void build(int x, int l, int r)\n    {\n        if (l == r)\n        {\n            val[x] = l;\n            return;\n        }\n        int mid = (l + r) >> 1;\n        pushdown(x);\n        build(ls, l, mid);\n        build(rs, mid + 1, r);\n        val[x] = min(val[ls], val[rs]);\n    }\n    void modify(int x, int l, int r, int tl, int tr, int v)\n    {\n        if (tl > r || tr < l)\n            return;\n        if (tl <= l && tr >= r) \n        {\n            val[x] += v;\n            tag[x] += v;\n            return;\n        }\n        pushdown(x);\n        int mid = (l + r) >> 1;\n        modify(ls, l, mid, tl, tr, v);\n        modify(rs, mid + 1, r, tl, tr, v);\n        val[x] = min(val[ls], val[rs]);\n    }\n    int query(int x, int l, int r, int v)\n    {\n        if (l == r)\n            return val[x] >= v ? l : l + 1;\n        int mid = (l + r) >> 1;\n        pushdown(x);\n        if (val[rs] < v)\n            return query(rs, mid + 1, r, v);\n        else\n            return query(ls, l, mid, v);\n    }\n} T;\nbool cmp(int x, int y)\n{\n    return x > y;\n}\nint main()\n{\n    scanf(\"%d\", &N);\n    scanf(\"%lf\", &k);\n    for (int i = 1; i <= N; ++i)\n        scanf(\"%d\", &a[i]);\n    for (int i = 1; i <= N; ++i)\n        siz[i] = 1;\n    sort(a + 1, a + N + 1, cmp);\n    for (int i = N; i >= 1; --i)\n    {\n        fa[i] = floor(1.0 * i / k);\n        siz[fa[i]] += siz[i];\n    }\n    for (int i = N; i >= 1; --i)\n        cnt[i] = (a[i] == a[i + 1]) ? cnt[i + 1] + 1 : 0;\n    T.build(1, 1, N);\n    for (int i = 1; i <= N; ++i)\n    {\n        if (fa[i] && !vis[fa[i]])\n        {\n            T.modify(1, 1, N, ans[fa[i]], N, siz[fa[i]] - 1);\n            vis[fa[i]] = 1;\n        }\n        int pos = T.query(1, 1, N, siz[i]);\n        pos += cnt[pos];\n        cnt[pos] = cnt[pos + 1] + 1;\n        ans[i] = pos;\n        T.modify(1, 1, N, ans[i], N, -siz[i]);\n    }\n    for (int i = 1; i <= N; ++i)\n        printf(\"%d \", a[ans[i]]);\n    return 0;\n}\n```\n",
        "postTime": 1617015643,
        "uid": 63743,
        "name": "DrBit",
        "ccfLevel": 6,
        "title": "P4364 [\u4e5d\u7701\u8054\u80032018]IIIDX \uff08\u8d2a\u5fc3+\u7ebf\u6bb5\u6811\u4e8c\u5206\uff09"
    },
    {
        "content": "# \u3010\u4e5d\u7701\u8054\u8003\u3011IIIDX\n\n\u6807\u7b7e\uff1a\u6570\u636e\u7ed3\u6784\u8c03\u6574\u8d2a\u5fc3\n\n\n\n## \u7b80\u8ff0\n\n> \u6c42\u4e00\u68f5\u53ef\u91cd\u5e8f\u5217\u6784\u6210\u7684\u591a\u53c9\u5806\uff0c\u4f7f\u5f97\u7f16\u53f7\u5b57\u5178\u5e8f\u6700\u5927\n\n## 60 pts\n\n\u9996\u5148\u4e00\u4e2a\u5f88\u6709\u4f9d\u636e\u7684\u8d2a\u5fc3\n\n\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u56e0\u4e3a\u5b50\u6811\u91cc\u7684\u503c\u90fd\u8981\u6bd4\u4ed6\u5927\uff0c\u56e0\u6b64\u6211\u4eec\u603b\u662f\u5728\u56de\u6eaf\u5b8c\u5b50\u6811\u7d27\u51d1\u7684\u653e\u8fd9\u4e2a\u503c\n\n\u5bf9\u5144\u5f1f\u800c\u8a00\u8fd8\u6709\u4e00\u4e2a\u6392\u5217\u987a\u5e8f\n\n\u5b50\u95ee\u9898:\u5bf9$x$\u5b50\u6811\u4e0e\u513f\u5b50\u96c6\u5408$\\{y\\}$,\u5b9a\u4e49$S(x)$\u4e3a$x$\u5b50\u6811\u7684\u4ece\u5c0f\u5230\u8fbe\u53d6\u5f97\u662f\u7b2c\u51e0\u5927\u503c\u7f16\u53f7\u96c6\u5408\n\n\u4e00\u5b9a\u6709$S(x)=S(y_1)\\vee \\cdots S(y_k)\\vee s_x$\u7d27\u51d1\u62fc\u5728\u4e00\u8d77\n\n\u4e8e\u662f\u8dd1\u513f\u5b50\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u7684\u540e\u7eed\u904d\u5386\u5c31\u662f\u7b54\u6848(\u7f16\u53f7)\n\n\u6b63\u786e\u6027?\u611f\u6027\u7406\u89e3\u5427\n\n\u4e3a\u4ec0\u4e48\u91cd\u590d\u65f6\u9519\u8bef\n\n\u601d\u8003\u4e00\u4e2a\u5b50\u60c5\u51b5\u624b\u4e0a\u6709$a>b>c$,\u6211\u4eec\u5bf9\u4e00\u4e2a\u70b9$x$\u7684\u6700\u5927\u513f\u5b50$y$\u7f16\u53f7\u5927\u4e8e$x$\u7684\u5144\u5f1f$z$,\u5047\u8bbe\u7f16\u53f7\u4e0d\u540c\u8ba9$y\\Rightarrow a~x\\Rightarrow b~ z\\Rightarrow c$\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u60c5\u51b5\n\n\u4f46\u82e5$a>b=c$\n\n\u5219\u6211\u4eec\u4f1a\u9009\u62e9$y\\Rightarrow a~x\\Rightarrow b~ z\\Rightarrow c$\u900a\u4e8e$y\\Rightarrow b~x\\Rightarrow c~ z\\Rightarrow a$\n\n\u90a3\u662f\u56e0\u4e3a\u4e25\u683c\u5927\u4e8e\u4ee3\u8868\u7f16\u53f7$-1$\u5177\u6709\u4f20\u9012\u6027\uff0c\u4f60\u8ba9$x$\u5c3d\u91cf\u5927\uff0c\u4e00\u5b9a\u5f97\u8ba9\u5b83\u7d27\u8ddf\u5728$y$\u540e\u9009\u7b2c\u4e8c\u4f4d\n\n\u4f46\u975e\u4e25\u683c\u5927\u4e8e\u53ef\u4ee5\u8ba9\u76f4\u63a5\u6709\u5173\u7cfb\u5b58\u5728\u7684\u4f20\u9012\u7f16\u53f7\u7559\u4e0b\u7f16\u53f7\u66f4\u5c0f\u7684\n\n\u4f8b\u5b50:\n\n```4 3 1 1 2 2```\n\n(from luogu)\n\n\u5176\u5b9e\u6211\u4eec\u8d2a\u5fc3\u662f\u5728\u8bf4\u4ec0\u4e48\n\n\u5bf9\u4e8e\u7b2c\u4e00\u6b21\u8003\u8651\u5230\u7684\u70b9$x$\uff0c\u5b83\u7684\u7f16\u53f7$\\geq size_x+1$,\u6211\u4eec\u9519\u8bef\u7684\u8ba4\u4e3a\u5fc5\u987b\u7d27\u51d1\u7684\u653e\u8fd9\u4e9b\u503c\n\n```cpp\ninline void dfs(int x){\n\tint i,y;\n\tfor(i=0;i<g[x].size();++i)dfs(g[x][i]);\n\tp[x]=++*p;\n}\ninline void Solve(void){\n\tint i;\n\tfor(i=1;i<=n;++i)AddEdge(fa[i],i);\n\t*a=0,dfs(0);\n\tfor(i=1;i<=n;++i)wer(a[p[i]],' ');out();\n}\n```\n\n## 100 pts\n\n\u6253\u5305\u601d\u60f3\u8fd8\u662f\u6cbf\u7528\n\n\u8bbe$f_i$\u8868\u793a$i$\u5de6\u4fa7\u53ef\u4ee5\u653e\u591a\u5c11\u4e2a\u6570\n\n\u5bf9$x$\uff0c\u6211\u4eec\u627e\u5230\u7b2c\u4e00\u4e2a$\\geqslant size_x$\u7684$f_{pos}$\n\n\u7136\u540e\u4e00\u4e2a\u8d2a\u5fc3\u7528\u6ca1\u6709\u7528\u7684\u6700\u540e\u4e00\u4e2a\u76f8\u540c\u7684\u503c\uff0c\u653e\u5165\uff0c\u66f4\u6539$[pos',n]$\u7684$f$\u4e3a$f'=f-size_{pos'}$\n\n\u8003\u8651\u5bf9\u4e8e\u4ece\u7236\u4eb2\u8003\u8651\u5230\u513f\u5b50\uff0c\u7236\u4eb2\u4e3a\u513f\u5b50\u4eec\u9884\u5b9a\u597d\u4e86\u4f4d\u7f6e\uff0c\u4f46\u513f\u5b50\u4eec\u81ea\u5df1\u4f1a\u5f53\u505a\u88ab\u522b\u4eba\u9884\u5b9a\u7684\u4f4d\u7f6e\uff0c\u9700\u8981\u64a4\u9500\u6389(\u9884\u5b9a\u503c\u662f\u7ed9\u53e6\u4e00\u4e2a\u6bd4\u8f83\u4f53\u7cfb\u7528\u7684),\u56e0\u6b64\u5728\u4ece\u7236\u4eb2\u5c42\u8fdb\u5165\u513f\u5b50\u5c42\u662f\u9700\u8981\u53bb\u6389\u4e3a\u513f\u5b50\u7684\u9884\u5b9a\u503c$size_{fa}-1$,\u7b80\u5355\u6765\u8bf4\u5728$fa$\u7684\u7b2c\u4e00\u4e2a\u513f\u5b50\u5c31\u64a4\u9500\u6389\u5f71\u54cd\n\n\u7ef4\u62a4\u4e00\u4e2a\u7f16\u53f7\u4e3a\u4e0b\u6807\uff0c\u8bb0\u5f55$f$\u7684\u7ebf\u6bb5\u6811\u5373\u53ef\n\n```cpp\nfor(i=1;i<=n;++i){\n        if(fa[i]!=fa[i-1])Add(1,1,n,ans[fa[i]],n,size[fa[i]]-1);//\u64a4\u9500\u7236\u4eb2 \n        pos=Find(1,1,n,size[i]);//\u7b2c\u4e00\u4e2a\u4f7f\u5f97f_i>=size_i\u7684\u4f4d\u7f6e\n        pos+=r[pos];pos-=((++used[pos])-1);ans[i]=pos;//\u5230\u6700\u540e\u4e00\u4f4d\u8fd8\u6ca1\u7528\u8fc7\u7684\u540c\u7c7b \n        Add(1,1,n,pos,n,-size[i]);\n        wer(a[ans[i]],' ');\n    }\n```",
        "postTime": 1592039293,
        "uid": 40629,
        "name": "zzw4257",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4364 \u3010[\u4e5d\u7701\u8054\u80032018]IIIDX\u3011"
    },
    {
        "content": "# IIIDX\n## \u601d\u8def\n\u6211\u770b\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\u60f3\u90fd\u6ca1\u60f3\uff0c\u76f4\u63a5\u4e00\u4e2a\u8d2a\u5fc3\u7529\u4e0a\u53bb\uff0c\u7136\u540e\u3002\u3002\u3002\u5c31$60$\u5206\u4e86\uff08\u6211\u4e5f\u4e0d\u77e5\u9053\u90a3\u591a\u7684$5$\u5206\u600e\u4e48\u9a97\u5230\u7684\uff09\n\n\u4ee3\u7801\u5927\u6982\u957f\u6210\u8fd9\u6837\n\n```cpp\nbool cmp (int a,int b){return a > b;}\n\nvoid Add_Edge (int u,int v){G[u].push_back (v);}\n\nvoid dfs (int u)\n{\n\tdfn[u] = Index ++;\n\tAns[u] = d[dfn[u]];\n\tsort (G[u].begin(),G[u].end (),cmp);\n\tfor (Int i = 0;i < G[u].size();++ i)\n\t{\n\t\tint v = G[u][i];\n\t\tdfs (v);\n\t}\n}\n```\n\n\u7136\u540e\u53d1\u73b0\u968f\u4fbf\u6709\u76f8\u7b49\u7684\u503c\u90fd\u80fd\u628a\u6211hack\u6389\u3002\u3002\u3002\n\n\u6211\u4eec\u8fd8\u662f\u6765\u8003\u8651\u6b63\u89e3\u5427\u3002\n\n\u9996\u5148\u8f6c\u6362\u4e00\u4e0b\uff0c\u6bcf\u4e00\u4e2a\u70b9\u7684\u7236\u8282\u70b9\u662f$\\frac{i}{k}$,\u8981\u6c42\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u5185\u7684\u6743\u503c\u90fd\u4e0d\u5c0f\u4e8e\u8be5\u70b9\u7684\u6743\u503c\u3002\n\n\u9996\u5148\u80af\u5b9a\u662f\u8981\u628a$d$\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u7684\u3002\n\n\u6211\u4eec\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\uff0c\u90a3\u6211\u4eec\u7ef4\u62a4\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u662f$d$\u5e8f\u5217\u6bcf\u4e00\u4e2a\u503c\u5de6\u8fb9\u6709\u591a\u5c11\u4e2a\u53ef\u4ee5\u4f7f\u7528\u7684\u503c\uff0c\u6211\u4eec\u7ebf\u6bb5\u6811\u5c31\u76f4\u63a5\u7ef4\u62a4\u6bcf\u6bb5\u7684\u90a3\u4e2a\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u5982\u4f55\u6c42\u7b54\u6848\u3002\u5f88\u663e\u7136\uff0c\u5c31\u662f\u5e8f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u5de6\u8fb9\u53ef\u7528\u7684\u70b9\u6570\u8db3\u591f\u586b\u6ee1\u8fd9\u68f5\u5b50\u6811\u5373\u53ef\u3002\u4f46\u662f\uff0c\u56e0\u4e3a\u8d2a\u5fc3\uff0c\u6240\u4ee5\u6211\u4eec\u5c3d\u53ef\u80fd\u9009\u76f8\u540c\u7684\u6570\u7684\u6700\u53f3\u8fb9\uff0c\u56e0\u4e3a\u8fd9\u6837\u540c\u4e00\u5c42\u7684\u70b9\u7684\u6743\u503c\u53ef\u4ee5\u5c3d\u53ef\u80fd\u7684\u5927\u3002\n\n\u4f46\u662f\u6211\u4eec\u5177\u4f53\u600e\u4e48\u641e\u5462?\u586b\u5b50\u6811\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u9884\u7559\u4e0b\u6765\uff0c\u5728\u5b50\u8282\u70b9\u7684\u65f6\u5019\u5728\u76f4\u63a5\u586b\u56de\u6765\u5c31\u597d\u4e86\uff0c\u5177\u4f53\u53ef\u4ee5\u89c1\u4ee3\u7801\u3002\n\n## $\\text {Code}$\n```cpp\n#pragma GCC optimize (\"O3\")\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define Int register int\n#define MAXN 500005\n#define rs i<<1|1\n#define ls i<<1\n\nint n,Index;\nint d[MAXN],fa[MAXN],cnt[MAXN],Ans[MAXN],size[MAXN];\n\nbool vis[MAXN];\n\nbool cmp (int a,int b){return a > b;}\n\nint sum[MAXN << 2],lazy[MAXN << 2];\n\nvoid Pushdown (int i)\n{\n\tif (lazy[i])\n\t{\n\t\tsum[ls] += lazy[i],sum[rs] += lazy[i];\n\t\tlazy[ls] += lazy[i],lazy[rs] += lazy[i];\n\t\tlazy[i] = 0;\n\t}\n}\n\nvoid Pushup (int i){sum[i] = min (sum[ls],sum[rs]);}\n\nvoid build (int i,int l,int r)\n{\n\tsum[i] = l;\n\tif (l == r) return ;\n\tint mid = (l + r) >> 1;\n\tbuild (ls,l,mid);\n\tbuild (rs,mid + 1,r);\n}\n\nvoid update (int i,int l,int r,int tl,int tr,int val)\n{\n\tif (l > tr || tl > r) return ;\n\tif (l >= tl && r <= tr) return sum[i] += val,lazy[i] += val,void ();\n\tPushdown (i);\n\tint mid = (l + r) >> 1;\n\tupdate (ls,l,mid,tl,tr,val);\n\tupdate (rs,mid + 1,r,tl,tr,val);\n\tPushup (i);\n}\n\nint query (int i,int l,int r,int val)\n{\n\tif (l == r) return sum[i] >= val ? l : l + 1;\n\tPushdown (i);\n\tint mid = (l + r) >> 1;\n\tif (val > sum[rs]) return query (rs,mid + 1,r,val);\n\telse return query (ls,l,mid,val);\n}\n\nint read ()\n{\n\tint x = 0;char c = getchar();int f = 1;\n\twhile (c < '0' || c > '9'){if (c == '-') f = -f;c = getchar();}\n\twhile (c >= '0' && c <= '9'){x = (x << 3) + (x << 1) + c - '0';c = getchar();}\n\treturn x * f;\n}\n\nvoid write (int x)\n{\n\tif (x < 0){x = -x;putchar ('-');}\n\tif (x > 9) write (x / 10);\n\tputchar (x % 10 + '0');\n}\n\nsigned main()\n{\n\tmemset (sum,0x7f,sizeof (sum));\n\tn = read ();double k;scanf (\"%lf\",&k);\n\tfor (Int i = 1;i <= n;++ i) d[i] = read (),size[i] = 1;\n\tsort (d + 1,d + n + 1,cmp);\n\tbuild (1,1,n);\n\tfor (Int i = n;i;-- i)\n\t{\n\t\tfa[i] = i / k;\n\t\tsize[fa[i]] += size[i];\n\t\tcnt[i] = d[i] == d[i + 1] ? cnt[i + 1] + 1 : 0;\n\t}\n\tfor (Int i = 1;i <= n;++ i)\n\t{\n\t\tif (fa[i] && !vis[fa[i]])\n\t\t{\n\t\t\tupdate (1,1,n,Ans[fa[i]],n,size[fa[i]] - 1);\n\t\t\tvis[fa[i]] = 1;\n\t\t}\n\t\tint now = query (1,1,n,size[i]);\n\t\tnow += cnt[now];cnt[now] ++;\n\t\tAns[i] = now;\n\t\tupdate (1,1,n,Ans[i],n,-size[i]);\n\t}\n\tfor (Int i = 1;i <= n;++ i) write (d[Ans[i]]),putchar (' ');\n\tputchar ('\\n');\n\treturn 0;\n}\n```",
        "postTime": 1584683067,
        "uid": 124781,
        "name": "Walking_Dead",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4364 \u3010[\u4e5d\u7701\u8054\u80032018]IIIDX\u3011"
    }
]