[
    {
        "content": "~~\u4e3a\u4ec0\u4e48\u5927\u5bb6\u5199\u7684\u90fd\u662f\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u5440\uff0c\u5c31\u6ca1\u4eba\u5199\u53ef\u5220\u9664\u7ebf\u6027\u57fa\u7684\u5417\uff0c\u8fd9\u53ef\u662f\u5c11\u4e00\u4e2a$\\log$\u5462~~\n\n\u9996\u5148\uff0c\u5148\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u5199\u53ef\u5220\u9664\u7ebf\u6027\u57fa\u3002\n\n\u4e0d\u77e5\u9053\u5927\u5bb6\u6709\u6ca1\u6709\u7528\u8fc7LCT\u7ef4\u62a4\u8fc7\u52a8\u6001\u56fe\u8054\u901a\u6027\u5462\uff1f\u5982\u679c**\u53ef\u4ee5\u79bb\u7ebf**\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728LCT\u4e0a\u7ef4\u62a4**\u5173\u4e8e\u5220\u9664\u65f6\u95f4\u7684\u6700\u5927\u751f\u6210\u6811**\u3002\u5f53\u65b0\u52a0\u5165\u4e00\u6761\u8fb9\u540e\uff0c\u6811\u4e0a\u80af\u5b9a\u6210\u73af\uff0c\u5219\u53ea\u9700\u8981\u5220\u6389\u73af\u4e0a\u5220\u9664\u65f6\u95f4\u6700\u65e9\u7684\u90a3\u6761\u8fb9\u5373\u53ef\u3002\n\n~~\u6ca1\u542c\u61c2\u6ca1\u5173\u7cfb\uff0c\u53cd\u6b63\u8fd9\u9898\u4e5f\u4e0d\u7528LCT\uff0c\u4e3e\u8fd9\u4e2a\u4f8b\u5b50\u53ea\u662f\u7c7b\u6bd4\u4e00\u4e0b\u800c\u5df2~~\n\n\u4e66\u5f52\u6b63\u4f20\u3002\u5982\u679c\u6211\u4eec\u8981\u5199\u53ef\u5220\u9664\u7ebf\u6027\u57fa\u7684\u8bdd\uff0c\u501f\u9274\u4e0a\u9762\u7684\u601d\u60f3\uff0c\u6211\u4eec\u80af\u5b9a\u5e0c\u671b\u5728\u7ebf\u6027\u57fa\u4e2d\u7ef4\u62a4\u5220\u9664\u65f6\u95f4\u6700\u665a\u7684\u5143\u7d20\u3002\n\n\u6211\u4eec\u8bbe$d_i$\u8868\u793a\u7ebf\u6027\u57fa\u4e2d\u7b2c$i$\u4f4d\u7684\u5143\u7d20\uff0c$tms_i$\u8868\u793a\u8be5\u5143\u7d20\u5c06\u5728\u4f55\u65f6\u88ab\u5220\u53bb\u3002\n\n\u6309\u7167\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u6211\u4eec\u80af\u5b9a\u5e0c\u671b**\u8d8a\u9ad8\u4f4d\u7684\u7ebf\u6027\u57fa\u8d8a\u665a\u5220\u9664**\u2014\u2014\u4e0d\u7136\u5982\u679c\u4f60\u5230\u4e86\u65f6\u95f4\uff0c\u4e0b\u9762\u7684\u80fd\u9009\u800c\u4e0a\u9762\u4e0d\u80fd\u9009\uff0c\u4e0d\u662f\u4f1a\u4ee4\u7b54\u6848\u53d8\u5c0f\u5417\uff1f\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4ece\u4e0a\u5230\u4e0b\u679a\u4e3e\u6bcf\u4e00\u4f4d\uff0c\u80fd\u6362\u5c31\u6362\uff0c\u4e4b\u540e\u7ee7\u7eed\u5411\u4e0b\u5c1d\u8bd5\u66ff\u6362\u3002\n\n\u8fd9\u662f\u5c1d\u8bd5\u63d2\u5165\u4e00\u4e2a\u5220\u9664\u65f6\u95f4\u4e3a$now$\uff0c\u503c\u4e3a$x$\u7684\u4e00\u4e2a```bitset```\u7684\u4ee3\u7801\uff1a\n\n```cpp\nvoid ins(int now,bi x){\n//\tprint(x);\n\tfor(int i=1000;i>=0;i--){\n\t\tif(!x[i])continue;\n\t\tif(tms[i]<now)swap(tms[i],now),swap(x,d[i]);\n\t\tif(!now)break;\n\t\tx^=d[i];\n\t}\n}\n```\n\u6709\u4e86\u63d2\u5165\u4ee3\u7801\uff0c\u81ea\u7136\u4f1a\u6709\u67e5\u8be2\u4ee3\u7801\uff0c\u67e5\u8be2$now$\u65f6\u523b\u7684\u7b54\u6848\uff1a\n\n```cpp\nvoid ask(int now){\n\tbi res;\n\tfor(int i=1000;i>=0;i--)if(tms[i]>now&&!res[i])res^=d[i];\n\tprint(res);\n}\n```\n\u8fd9\u4e24\u8005\u7684\u590d\u6742\u5ea6\u90fd\u662f$O(\\dfrac{len^2}{w})$\u7684\uff0c\u5176\u4e2d$len$\u662f$01$\u4e32\u957f\u5ea6\uff0c\u800c$w$\u662f```bitset```\u5e38\u6570\u3002\n\n------------\n\n\u90a3\u4e48\u8fd9\u53ef\u5220\u9664\u7ebf\u6027\u57fa\u5728\u672c\u9898\u4e2d\u6709\u4ec0\u4e48\u5e94\u7528\u5462\uff1f\n\n\u4e0d\u77e5\u9053\u5927\u5bb6\u6709\u6ca1\u6709\u505a\u8fc7[[WC2011]\u6700\u5927XOR\u548c\u8def\u5f84](https://www.luogu.com.cn/problem/P4151)\u554a\uff0c\u5982\u679c\u505a\u8fc7\uff0c\u5c31\u5e94\u8be5\u80fd\u770b\u51fa\u6765\uff0c\u4efb\u610f\u4e00\u6761\u4ece\u9996\u90fd\u51fa\u53d1\u518d\u56de\u5230\u9996\u90fd\u7684\u8def\u5f84\uff0c$\\operatorname{xor}$\u503c\u80fd\u505a\u51fa\u8d21\u732e\u7684\uff0c\u53ea\u6709**\u73af\u4e0a\u7684\u8fb9**\uff0c\u8def\u5f84\u4e0a\u7684\u8fb9\u56e0\u4e3a\u6765\u65f6\u5f02\u6216\u4e00\u6b21\u8d70\u65f6\u518d\u6765\u4e00\u6b21\uff0c\u6240\u4ee5\u5f02\u6216\u503c\u5c31\u88ab\u6d88\u6389\u4e86\u3002\n\n\u56e0\u6b64\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u501f\u9274\u90a3\u9898\u7684\u601d\u60f3\uff0c\u5c06\u6240\u6709\u7684\u73af\u641c\u51fa\u6765\u6254\u8fdb\u7ebf\u6027\u57fa\u4e2d\uff0c\u627e\u5230\u7ebf\u6027\u57fa\u4e2d\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\u53ea\u9700\u8981**\u4fdd\u8bc1\u6bcf\u6761\u8fb9\u90fd\u4f1a\u88ab\u5305\u62ec\u5728\u67d0\u4e2a\u73af\u4e2d**\u5373\u53ef\u2014\u2014\u7ebf\u6027\u57fa\u4e2d\u8fdb\u884c\u7684\u662f\u5f02\u6216\u8fc7\u7a0b\uff0c\u81ea\u7136\u4f1a\u4fdd\u7559\u51fa\u6700\u4f18\u7684\u4e00\u7ec4\u89e3\uff0c\u4e0d\u9700\u8981\u7684\u8fb9\u81ea\u7136\u4f1a\u88ab\u5f02\u6216\u4e24\u6b21\u7136\u540e\u62b5\u6d88\u6389\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8bbe$dis_x$\u4e3a$x$\u8282\u70b9\u5230\u4e00\u53f7\u8282\u70b9\u7684**\u4efb\u610f\u4e00\u6761\u8def\u5f84**\u7684\u5f02\u6216\u503c\u3002\u5219\u5f53\u6211\u4eec\u63d2\u5165\u4e00\u6761\u8fb9$x,y,z$\u65f6\uff0c\u53ea\u9700\u8981\u5f80\u7ebf\u6027\u57fa\u4e2d\u52a0\u5165$dis_x\\operatorname{xor}dis_y\\operatorname{xor}z$\u5373\u53ef\u3002\n\n\u5f53\u7136\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u662f\u8981**\u79bb\u7ebf**\u4e0b\u6765\u7684\u2014\u2014\u4e0d\u7136\u4f60\u600e\u4e48\u77e5\u9053\u65b0\u52a0\u5165\u7684\u8fb9\u4f1a\u5728\u5565\u65f6\u5019\u88ab\u5220\u6389\u5462\uff1f\n\n\u81f3\u4e8e\u4fee\u6539\u2014\u2014\u4f60\u628a\u5b83\u53d8\u6210\u4e00\u6b21\u5220\u9664\uff0c\u4e00\u6b21\u52a0\u8fb9\u5373\u53ef\u3002\n\n------------\n\n\u5f53\u7136\uff0c\u8fd9\u91cc\u8fd8\u53ef\u4ee5\u7ed9\u51fa\u4e00\u79cd**\u5728\u7ebf\u505a\u6cd5**\uff08\u53ea\u4e0d\u8fc7\u591a\u4e00\u4e2a$\\log$\uff09\uff1a\n\n\u5bf9\u4e8e\u63d2\u5165\u7ebf\u6027\u57fa\u5931\u8d25\u7684\u67d0\u4e2a\u6570\uff0c\u8bb0\u5f55\u5b83\u5728\u63d2\u5165\u8fc7\u7a0b\u4e2d\u7531\u54ea\u4e9b\u6570\u5f02\u6216\u8d77\u6765\u5f97\u5230\u4e86$0$\u3002\u4ee4\u4e00\u4e2a\u96c6\u5408$\\mathbb{S}$\u8868\u793a\u8fd9\u4e9b\u6570\u3002\n\n\u5bf9\u4e8e\u63d2\u5165\u7ebf\u6027\u57fa\u6210\u529f\u7684\u67d0\u4e2a\u6570\uff0c\u8bb0\u5f55\u5b83\u5728\u540e\u6765\u8005\u7684\u63d2\u5165\u8fc7\u7a0b\u4e2d\uff0c\u5f02\u6216\u4e86\u54ea\u4e9b\u6570\u3002\n\n\u5f53\u4f60\u63d2\u5165\u4e00\u4e2a\u6570$x$\u65f6\uff0c\u7ef4\u62a4\u4e0a\u8ff0\u96c6\u5408\u3002\n\n\u5f53\u4f60\u5220\u9664\u4e00\u4e2a\u6570$x$\u65f6\uff1a\n\n1. \u5982\u679c\u5b83\u4e0d\u5728\u7ebf\u6027\u57fa\u4e2d\uff0c\u76f4\u63a5\u5220\u9664\u3002\n\n2. \u5982\u679c\u5b83\u5728\u7ebf\u6027\u57fa\u4e2d\uff0c\u4e14\u5b58\u5728\u4e00\u4e2a$\\mathbb{S}$\u4f7f\u5f97$x\\in\\mathbb{S}$\uff0c\u5219\u5220\u53bb$x$\u5e76\u7528$\\mathbb{S}$\u5bf9\u5e94\u7684\u90a3\u4e2a\u6570\u66ff\u4ee3$x$\u5373\u53ef\u2014\u2014\u56e0\u4e3a$\\mathbb{S}$\u4e2d\u6240\u6709\u6570\u5f02\u6216\u8d77\u6765\u4e3a$0$\uff0c\u6545$\\mathbb{S}$\u4e2d\u4efb\u4f55\u6570\u90fd\u53ef\u4ee5\u66ff\u4ee3$x$\u3002\u5728\u672c\u6b21\u66ff\u4ee3\u540e\uff0c\u8bb0\u5f97\u5c06$x$\u5728\u5176\u4ed6\u96c6\u5408\u4e2d\u7684**\u6240\u6709\u51fa\u73b0**\uff0c\u5168\u90fd\u66ff\u6362\u6210\u66ff\u4ee3\u7684\u8fd9\u4e2a\u6570\u3002\n\n3. \u5982\u679c\u5b83\u5728\u7ebf\u6027\u57fa\u4e2d\uff0c\u4e14\u4e0d\u5b58\u5728\u4e00\u4e2a$\\mathbb{S}$\u4f7f\u5f97$x\\in\\mathbb{S}$\uff0c\u5219\u627e\u5230$\\mathbb{T}_x$\uff0c\u5e76\u7528$x$\u5f02\u6216$\\mathbb{T}_x$\u4e2d\u6240\u6709\u6570\uff0c\u5373\u53ef\u6d88\u53bb$x$\u7684\u5f71\u54cd\u3002\n\n------------\n\n~~\u4f46\u662f\uff0c\u56e0\u4e3a\u5728\u7ebf\u505a\u6cd5\u592a\u6076\u5fc3\u4e86\uff0c\u7b14\u8005\u8fd8\u662f\u9009\u62e9\u4e86\u79bb\u7ebf\u505a\u6cd5~~\n\n\u4e11\u7684\u8981\u547d\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef bitset<1010> bi;\nint n,m,q,tms[1010],ed[1010],cnt,tot,head[1010],op[1010],qwq,bkw[1010];\npair<int,int>nw[1010];\nbi d[1010],dis[510],aft[1010];\nstruct node{\n\tint to,next;\n\tbi val;\n}edge[1010];\nstring s;\nbi read(){\n\tcin>>s;\n\tbi w(s);\n\treturn w;\n}\nvoid ae(int u,int v){\n\tbi w=read();\n\tedge[cnt].next=head[u],edge[cnt].to=v,edge[cnt].val=w,head[u]=cnt++;\n\tedge[cnt].next=head[v],edge[cnt].to=u,edge[cnt].val=w,head[v]=cnt++;\n}\nvoid print(bi &x){\n\tbool stt=false;\n\tfor(int i=999;i>=0;i--){\n\t\tif(x[i]||stt)putchar('0'+x[i]);\n\t\tif(x[i])stt=true;\n\t}\n\tif(!stt)putchar('0');\n\tputchar('\\n');\n}\nvoid ins(int now,bi x){\n//\tprint(x);\n\tfor(int i=1000;i>=0;i--){\n\t\tif(!x[i])continue;\n\t\tif(tms[i]<now)swap(tms[i],now),swap(x,d[i]);\n\t\tif(!now)break;\n\t\tx^=d[i];\n\t}\n}\nbool vis[510];\nvoid dfs(int x){\n\tfor(int i=head[x];i!=-1;i=edge[i].next){\n\t\tif(vis[edge[i].to])ins(0x3f3f3f3f,dis[x]^dis[edge[i].to]^edge[i].val);\n\t\telse vis[edge[i].to]=true,dis[edge[i].to]=dis[x]^edge[i].val,dfs(edge[i].to);\n\t}\n}\nvoid ask(int now){\n\tbi res;\n\tfor(int i=1000;i>=0;i--)if(tms[i]>now&&!res[i])res^=d[i];\n\tprint(res);\n}\nint main(){\n\tcin>>n>>m>>q,memset(head,-1,sizeof(head)),qwq=q+1;\n\tfor(int i=1,x,y;i<=m;i++)cin>>x>>y,ae(x,y);\n\tdfs(1);\n\task(0);\n\tfor(int i=1,x,y;i<=q;i++){\n\t\tcin>>s;\n\t\tif(s[1]=='d')cin>>x>>y,op[i]=++tot,aft[tot]=(read()^dis[x]^dis[y]),nw[tot]=make_pair(x,y),bkw[tot]=tot;\n\t\telse if(s[1]=='h')cin>>x,ed[bkw[x]]=i,op[i]=--qwq,aft[qwq]=(dis[nw[x].first]^dis[nw[x].second]^read()),bkw[x]=qwq;\n\t\telse if(s[1]=='a')cin>>x,ed[bkw[x]]=i;\n\t}\n\tfor(int i=1;i<=q;i++)if(!ed[i])ed[i]=0x3f3f3f3f;\n\tfor(int i=1;i<=q;i++){\n\t\tif(op[i])ins(ed[op[i]],aft[op[i]]);\n\t\task(i);\n\t}\n\treturn 0;\n} \n```\n",
        "postTime": 1595293329,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3733 \u3010[HAOI2017]\u516b\u7eb5\u516b\u6a2a\u3011"
    },
    {
        "content": "~~\u73b0\u5728\u4f60\u770b\u5230\u7684\u662f\u672c\u7bc7\u9898\u89e3\u7684\u7b2c\u4e09\u8fed\u4ee3\uff0c\u4e4b\u524d\u7684\u5185\u5bb9\u56e0\u4e3a\u4e0d\u53ef\u9884\u77e5\u7684\u4fe1\u606f\u5371\u5bb3\u5bfc\u81f4\u5185\u5bb9\u5931\u8e2a\u3002~~\n\n------------\n\n  \n```\n\u7ebf\u6bb5\u6811\u5206\u6cbb\u50bb\u9898\u3002\n\t\t\t\t\t\t\t\t\t\t\t\u2014\u2014zsyzsy\n```\n\u5728\u4e0e$Faker\\_Beng,ShichengXiao$\u7684\u5f00\u9ed1\u4e0b\u7ec8\u4e8e\u4e86\u5374\u4e86\u4e00\u5927\u5fc3\u7ed3\u3002~~\u540c\u65f6\u88abzsy\u540a\u6253~~  \n\u5982\u679c\u4f60\u505a\u8fc7$[WC2011]XOR$\u7684\u8bdd\uff0c\u5bf9\u8fd9\u9898\u4f60\u5e94\u8be5\u6709\u4e00\u4e2a\u57fa\u672c\u7684\u601d\u8def\uff1a\u628a\u6240\u6709\u7684\u73af\u641c\u51fa\u6765\uff0c\u7136\u540e\u628a\u5b83\u4eec\u63d2\u5230\u7ebf\u6027\u57fa\u91cc\u67e5\u8be2\u5f02\u6216\u6700\u5927\u503c\u3002  \n\u4e8e\u662f\u6709\u4e00\u4e2a\u66b4\u529b\u7684\u505a\u6cd5\uff1a\u5bf9\u6bcf\u6b21\u4fee\u6539\u90fd\u66b4\u529b\u91cd\u65b0\u641c\u73af\u5e76\u91cd\u6784\u7ebf\u6027\u57fa\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(\\frac{qmL^2}{\\omega})$\uff0c\u53ef\u4ee5\u83b7\u5f97$70$\u5206\u7684\u597d\u6210\u7ee9\u3002  \n\u8fd9\u6837\u505a\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\u5462\uff1f\u56e0\u4e3a\u5b9e\u9645\u4e0a\u6211\u4eec\u7684\u8be2\u95ee\u5c31\u662f\u8981\u6c42\u4e00\u5806\u73af\u4e2d\u7684\u5f02\u6216\u6700\u5927\u503c\uff0c\u6700\u7ec8\u9009\u51fa\u6765\u7684\u73af\u6709\u6ca1\u6709\u7ecf\u8fc7\u9996\u90fd\u90fd\u6ca1\u6709\u5173\u7cfb\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u73af\uff0c\u53ea\u8981\u6211\u4eec\u518d\u8d70\u4e00\u904d\uff0c\u5f71\u54cd\u5c31\u6d88\u6389\u4e86\u3002  \n\u65e2\u7136\u7ebf\u6027\u57fa\u4e0d\u597d\u64a4\u9500\uff0c\u6211\u4eec\u8003\u8651\u7ebf\u6bb5\u6811\u5206\u6cbb\u3002\u56e0\u4e3a\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u7ebf\u6027\u57fa\u5b58\u5230\u5206\u6cbb\u7ed3\u6784\u91cc\uff0c\u6700\u591a\u53ea\u4f1a\u540c\u65f6\u5b58\u5728$O(\\log)$\u4e2a\u7ebf\u6027\u57fa\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002  \n\u56e0\u4e3a\u4e00\u5f00\u59cb\u7684\u8fb9\u662f\u4e0d\u4f1a\u5220\u9664\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u627e\u5230\u4e00\u5f00\u59cb\u7684\u73af\u8fb9\uff0c\u7136\u540e\u641e\u51fa\u4e00\u4e2a\u539f\u56fe\u7684\u751f\u6210\u6811\u3002\u90a3\u4e48\u5bf9\u4e8e\u4e4b\u540e\u7684\u63d2\u5165\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u627e\u51fa\u4e00\u4e2a\u552f\u4e00\u7684\u73af\uff0c\u800c\u73af\u4e0a\u7684\u6743\u503c\u548c\u4e5f\u53ef\u4ee5\u65b9\u4fbf\u5730\u6c42\u51fa\u3002  \n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6c42\u51fa\u5bf9\u4e8e\u6bcf\u6761\u73af\u8fb9\u7684\u5b58\u5728\u533a\u95f4\uff0c\u4e00\u5f00\u59cb\u7684\u73af\u8fb9\u5c31\u662f$[0,q]$\u3002    \n\u6ce8\u610f\u5bf9\u4e8e\u73af\u8fb9\u6743\u503c\u7684\u4fee\u6539\uff0c\u6211\u4eec\u4e5f\u8981\u5212\u5206\u6210\u4e24\u4e2a\u5b58\u5728\u533a\u95f4\u3002  \n\u7136\u540e\u6211\u4eec\u76f4\u63a5\u628a\u6240\u6709\u73af\u8fb9\u63d2\u5230\u7ebf\u6bb5\u6811\u91cc\uff0c\u8fdb\u884c\u7ebf\u6bb5\u6811\u5206\u6cbb\u5c31\u53ef\u4ee5\u4e86\u3002  \n\u8fd9\u9898\u4e3b\u8981\u7684\u7ec6\u8282\u5c31\u662f$bitset$\u4e86\u5427~~\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u8fd9\u9898\u4e1c\u897f\u8fd9\u4e48\u591a\u554a\u56e0\u4e3a\u6570\u7ec4\u5f00\u591a\u4e86$RE$\u597d\u51e0\u6b21~~  \n\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(n\\alpha(n)+\\frac{(m-n+q+q\\log q)L^2}{\\omega})$\uff0c$O(m-n+q)$\u662f\u73af\u7684\u4e2a\u6570\u3002  \n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\n#define neko 510\n#define meko 1010\n#define feko 6010\n#define pb push_back\n#define\tf(i,a,b) for(register int i=(a);i<=(b);i=-(~i)) \n#define\trf(i,a,b) for(register int i=(a);i>=(b);i=~(-i)) \nusing namespace std;\nnamespace IO\n{\n    template<typename T>\n        void read(T &x)\n        {\n            char c=getchar();x=0;\n            for(;!isdigit(c);c=getchar());\n            for(;isdigit(c);x=(x<<1)+(x<<3)+(c^'0'),c=getchar());\n        }\n}\ntypedef bitset<1005> bs;\nstruct Basis\n{\n    bs bas[meko];\n//\tBasis()\n//\t{f(i,1,1000)bas[i].reset();}\n}B;\nstruct node\n{int v,nex;bs w;}e[meko<<1];\nstruct edge\n{int u,v,l,r;bs w;}E[meko<<1];\nint n,m,q,TT;\ntypedef int arr[neko];\narr head,fa;\nvector<int>vec[feko];\nbs dis[neko];\nint pos[meko];\nnamespace Lin_Bsis\n{\n    int maxbit=0;\n    void print(bs x)\n    {\n        int flag=0;\n        rf(i,maxbit,0)\n        {\n            if(x[i])flag=1;\n            if(flag)putchar(x[i]+'0');\n        }if(!flag)putchar('0');\n        putchar('\\n');\n    }\n    void insert(Basis &L,bs x)\n    {\n        rf(i,maxbit,0)\n        {\n            if(!x[i])continue;\n            if(!L.bas[i].any()){L.bas[i]=x;break;}\n            else x^=L.bas[i];\n        }\n    }\n    bs query(Basis L)\n    {\n        bs ans;ans.reset();\n        rf(i,maxbit,0)if(!ans[i])ans^=L.bas[i];\n        return ans;\n    }\n}\nnamespace Seg_DC\n{\n    #define ori tagl,tagr\n    #define lson root<<1,l,mid\n    #define rson root<<1|1,mid+1,r\n    using namespace Lin_Bsis;\n    void update(int root,int l,int r,int tagl,int tagr,int x)\n    {\n        if(tagl<=l&&r<=tagr)return (void)vec[root].pb(x);\n        int mid=(l+r)>>1;\n        if(tagl<=mid)update(lson,ori,x);\n        if(tagr>mid)update(rson,ori,x);\n    }\n    void dfs(int root,int l,int r,Basis bas)\n    {\n        for(auto x:vec[root])insert(bas,dis[E[x].u]^dis[E[x].v]^E[x].w);\n        int mid=(l+r)>>1;\n        if(l==r)return print(query(bas));\n        else dfs(lson,bas),dfs(rson,bas);\n    }\n}\nnamespace Graph\n{\n    int t=0;\n    int find(int x){return fa[x]^x?fa[x]=find(fa[x]):x;}\n    void add(int x,int y,bs z)\n    {\n        e[++t].v=y,e[t].w=z;e[t].nex=head[x],head[x]=t;\n        e[++t].v=x,e[t].w=z;e[t].nex=head[y],head[y]=t;\n    }\n    void dfs(int u,int fa)\n    {\n        for(register int i=head[u],v=e[i].v;i;i=e[i].nex,v=e[i].v)if(v^fa)dis[v]=dis[u]^e[i].w,dfs(v,u);\n    }\n}\nint cmax(int x,int y){return x>y?x:y;}\nint main()\n{\n    using namespace Graph;\n    using namespace Seg_DC;\n    using namespace IO;\n    int x,y,cnt=0;\n    string str;\n    char s[20];\n    read(n),read(m),read(q);\n    f(i,1,n)fa[i]=i;\n    f(i,1,m)\n    {\n        read(x),read(y),cin>>str;\n        maxbit=cmax(maxbit,str.size());\n        if(find(x)^find(y))fa[find(y)]=find(x),add(x,y,bs(str));\n        else E[++TT]=(edge){x,y,0,q,bs(str)};\n    }\n    Graph::dfs(1,0);\n    f(i,1,q)\n    {\n        scanf(\"%s\",s);\n        if(s[0]=='A')\n        {\n            read(x),read(y),cin>>str;\n            maxbit=cmax(maxbit,str.size());\n            E[++TT]=(edge){x,y,i,q,bs(str)},pos[++cnt]=TT;\n        }\n        else if(s[1]=='a')read(x),E[pos[x]].r=i-1,pos[x]=0;\n        else\n        {\n            read(x),cin>>str;\n            maxbit=cmax(maxbit,str.size());\n            E[pos[x]].r=i-1;\n            E[++TT]=(edge){E[pos[x]].u,E[pos[x]].v,i,q,bs(str)};\n            pos[x]=TT;\n        }\n    }\n    f(i,1,TT)update(1,0,q,E[i].l,E[i].r,i);\n    return dfs(1,0,q,B),0;\n}\n```",
        "postTime": 1537961106,
        "uid": 7020,
        "name": "teafrogsf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3733 \u3010[HAOI2017]\u516b\u7eb5\u516b\u6a2a\u3011"
    },
    {
        "content": "## P3733 [HAOI2017]\u516b\u7eb5\u516b\u6a2a\n> \u7ed9\u51fa\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u8fb9\u5e26\u8fb9\u6743 $w_i$\u3002\u6709\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff0c\u5171 $q$ \u6b21\uff1a\n> - \u5728\u70b9 $x,y$ \u4e4b\u95f4\u52a0\u5165\u4e00\u6761\u8fb9\u6743\u4e3a $w_i$ \u7684\u8fb9\uff0c\u5982\u679c\u8fd9\u662f\u7b2c $i$ \u4e2a\u6b64\u79cd\u64cd\u4f5c\uff0c\u5219\u8bb0\u8fd9\u6761\u65b0\u8fb9\u4e3a\u7b2c $i$ \u6761\u3002\n> - \u5c06\u7b2c $k$ \u6761\u65b0\u8fb9\u6743\u503c\u6539\u4e3a $w'_i$\u3002 \n> - \u5220\u6389\u7b2c $k$ \u6761\u65b0\u8fb9\uff0c\u4fdd\u8bc1\u8fd9\u6761\u8fb9\u4e4b\u540e\u4e0d\u4f1a\u518d\u51fa\u73b0\u3002\n>\n> \u5bf9\u4e8e\u521d\u59cb\u72b6\u6001\u548c\u6bcf\u6b21\u64cd\u4f5c\u540e\uff0c\u4ece\u56fe\u4e2d\u627e\u5230\u4e00\u6761\u4ece $1$ \u51fa\u53d1\uff0c\u5e76\u56de\u5230 $1$ \u7684\u4e00\u6761\u6743\u503c\u6700\u5927\u8def\u5f84\uff0c\u8def\u5f84\u6743\u503c\u5b9a\u4e49\u4e3a\u7ecf\u8fc7\u8fb9\u8fb9\u6743\u7684\u5f02\u6216\u548c\u3002\u70b9\u8fb9\u5747\u53ef\u591a\u6b21\u7ecf\u8fc7\uff0c\u8fb9\u7ecf\u8fc7\u591a\u6b21\u8fb9\u6743\u4e5f\u4f1a\u88ab\u8ba1\u7b97\u591a\u6b21\u3002($1\\le n,m\\le 500,1\\le q,\\log_2 w_i\\le 10^3$\uff0c\u52a0\u8fb9\u64cd\u4f5c\u4e0d\u8d85\u8fc7 $550$ \u6b21)\n\n\u6ce8\u610f\u5230\u672c\u9898\u8d70\u7684\u8def\u5f84\u6709\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6027\u8d28\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u83b7\u5f97\u4e00\u4e2a\u73af\u3002\u8003\u8651\u4ece $1$ \u5f00\u59cb\u8d70\uff0c\u8d70\u5230\u60f3\u83b7\u5f97\u7684\u73af\u7684\u4f4d\u7f6e\uff0c\u8d70\u4e00\u5708\u540e\u518d\u539f\u8def\u8fd4\u56de\uff0c\u8fd9\u6837\u8fd9\u4e2a\u73af\u6211\u4eec\u5c31\u83b7\u5f97\u4e86\uff0c\u800c\u8d70\u51fa\u7684\u975e\u73af\u8fb9\uff0c\u56e0\u4e3a\u8d70\u4e86\u4e24\u8fb9\u88ab\u62b5\u6d88\u4e86\u3002\u6240\u4ee5\u539f\u95ee\u9898\u4e2d\u9009\u51fa\u8def\u5f84\uff0c\u5373\u53ef\u53d8\u6210\u9009\u51fa\u82e5\u5e72\u4e2a\u73af\uff0c\u4f7f\u5b83\u4eec\u5305\u542b\u7684\u8fb9\u5f02\u6216\u548c\u6700\u5927\u3002\uff08\u5173\u4e8e\u8fd9\u4e2a\u6027\u8d28\u8fd8\u6709\u5f88\u591a\u53ef\u4ee5\u8ba8\u8bba\u7684\u5730\u65b9\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 [P4151 [WC2011]\u6700\u5927XOR\u548c\u8def\u5f84](https://www.luogu.com.cn/problem/P4151)\uff0c\u672c\u9898\u89e3\u4ec5\u505a\u611f\u6027\u7406\u89e3\uff09\n\n\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u7684\u95ee\u9898\u5206\u4e3a\u4e86\u4e09\u4e2a\u90e8\u5206\uff1a\n- \u627e\u5230\u6240\u6709\u7684\u73af\u3002\n- \u8ba1\u7b97\u6240\u6709\u73af\u7684\u5f02\u6216\u6700\u5927\u503c\u3002\n- \u5bf9\u67d0\u4e2a\u73af\u7684\u6743\u503c\u5355\u70b9\u4fee\u6539\u6216\u5220\u9664\u67d0\u4e2a\u73af\u3002\n\n\u9996\u5148\u5bf9\u4e8e\u627e\u5230\u6240\u6709\u7684\u73af\uff0c\u53ef\u4ee5\u8bc1\u660e\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e00\u5f00\u59cb\u7684\u8fde\u901a\u65e0\u5411\u56fe\u7684\u67d0\u4e00\u751f\u6210\u6811\uff0c\u5219\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u5269\u4e0b\u7684\u8fb9\u548c\u8be2\u95ee\u52a0\u8fb9\u5728\u751f\u6210\u6811\u4e0a\u5f62\u6210\u7684\u73af\uff0c\u5c31\u80fd\u7ec4\u6210\u6240\u6709\u7684\u73af\u3002\u611f\u6027\u8bc1\u660e\uff1a\n- \u5bf9\u4e8e\u4ec5\u7531\u4e00\u6761\u975e\u6811\u8fb9\u6784\u6210\u7684\u73af\uff0c\u5df2\u7ecf\u88ab\u8bb0\u5f55\u4e86\u3002\n- \u5bf9\u4e8e\u7531\u591a\u6761\u975e\u6811\u8fb9\u6784\u6210\u7684\u73af\uff0c\u5c06\u8fd9\u4e9b\u6811\u8fb9\u5728\u751f\u6210\u6811\u4e0a\u7684\u6784\u6210\u7684\u73af\u5f02\u6216\u7ec4\u5408\u8d77\u6765\u5c31\u80fd\u5f97\u5230\u3002\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u4e00\u4e2a\u5e26\u6743\u5e76\u67e5\u96c6\u5b9e\u73b0\u3002\n\n\u7136\u540e\u6211\u4eec\u9700\u8981\u5bf9\u4e8e\u627e\u5230\u7684\u6240\u6709\u73af\u8ba1\u7b97\u5f02\u6216\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u663e\u7136\u662f\u7ebf\u6027\u57fa\u64c5\u957f\u7684\u5de5\u4f5c\u3002\u6bcf\u627e\u5230\u4e00\u4e2a\u73af\u5c31\u628a\u5b83\u7684\u6743\u503c\u52a0\u5165\u7ebf\u6027\u57fa\u4e2d\uff0c\u8be2\u95ee\u65f6\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u8d2a\u5fc3\u5373\u53ef\u3002\n\n\u6700\u540e\uff0c\u4e5f\u662f\u672c\u9898\u7684\u96be\u70b9\uff0c\u662f\u5bf9\u73af\u7684\u6743\u503c\u5355\u70b9\u4fee\u6539\u6216\u5220\u9664\u67d0\u4e2a\u73af\u3002\u6ce8\u610f\u5230\u8fd9\u4e24\u79cd\u64cd\u4f5c\u5176\u5b9e\u53ef\u4ee5\u5e76\u6210\u4e00\u79cd\uff0c\u5bf9\u73af\u7684\u6743\u503c\u5355\u70b9\u5f02\u6216\u67d0\u4e2a\u503c\uff0c\u5220\u9664\u5c31\u628a\u5b83\u7684\u6743\u503c\u5f02\u6216\u5230 $0$ \u5c31\u597d\u3002\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u8981\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301\u5355\u70b9\u5f02\u6216\u7684\u7ebf\u6027\u57fa\u3002\u8003\u8651\u5bf9\u4e8e\u5728\u7ef4\u62a4\u7ebf\u6027\u57fa\u7684\u540c\u65f6\uff0c\u5bf9\u6bcf\u4e00\u4f4d\u7684\u57fa\u5e95\u8bb0\u5f55 **\u5b83\u662f\u7531\u54ea\u4e9b\u503c\u5f02\u6216\u800c\u6210\u7684\uff0c\u5e76\u9009\u51fa\u5728\u7ebf\u6027\u57fa\u91cc\u7684\u503c\u4f5c\u4e3a\u4ee3\u8868**\u3002\u7136\u540e\uff0c\u8fdb\u884c\u5355\u70b9\u4fee\u6539\u65f6\uff08\u6bd4\u5982\u4fee\u6539 $x$ \u4f4d\u7f6e\uff09\uff0c\u679a\u4e3e\u6240\u6709\u503c\uff0c\u5982\u679c\u5b83\u5728\u7ebf\u6027\u57fa\u91cc\u5bf9\u5e94\u7684\u57fa\u5e95\uff08\u5982\u679c\u5b83\u4e0d\u5728\u7ebf\u6027\u57fa\u91cc\u5c31\u662f $0$\uff09\u662f $0$\uff0c\u4e14\u8fd9\u4e2a\u57fa\u5e95\u7531 $x$ \u5f02\u6216\u800c\u6210\uff0c\u5219\u9009\u62e9\u8fd9\u4e2a\u503c\u5bf9\u5e94\u7684\u57fa\u5e95\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u5c31\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u679a\u4e3e\u6bcf\u4e2a\u57fa\u5e95\uff0c\u9009\u62e9\u4f4d\u6570\u5c3d\u91cf\u4f4e\u7684\uff0c\u7531 $x$ \u5f02\u6216\u800c\u6210\u7684\u57fa\u5e95\u3002\u7528\u9009\u62e9\u7684\u57fa\u5e95\u6d88\u53bb\u5176\u4ed6\u6240\u6709\u5305\u542b $x$ \u7684\u57fa\u5e95\uff08\u5373\u5c06\u57fa\u5e95\u548c\u7ec4\u6210\u90e8\u5206\u90fd\u505a\u4e00\u6b21\u5f02\u6216\uff09\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u57fa\u5e95\u8fdb\u884c\u4fee\u6539\uff0c\u518d\u63d2\u5165\u7ebf\u6027\u57fa\u4e2d\u5373\u53ef\u3002\n\n\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u9009\u62e9\u57fa\u5e95\u5462\uff1f\u7ed3\u8bba\u662f\uff0c\u5728\u8fd9\u4e2a\u57fa\u5e95\u4e0a\u4fee\u6539 **\u4e0d\u4f1a\u7834\u574f\u539f\u7ebf\u6027\u57fa\u7684\u6027\u8d28\u548c\u5f71\u54cd\u5176\u4ed6\u57fa\u5e95**\u3002\u9996\u5148\uff0c\u5982\u6211\u4eec\u9009\u62e9\u7684\u662f $0$\uff0c\u5219\u8868\u793a $x$ \u4e0d\u5728\u7ebf\u6027\u57fa\u5185\uff08\u8981\u4e48 $x$ \u662f $0$\uff0c\u8981\u4e48 $x$ \u80fd\u88ab\u5176\u4ed6\u4e1c\u897f\u5f02\u6216\u6210 $0$\uff09\uff0c\u76f4\u63a5\u4fee\u6539\u5f53\u7136\u6ca1\u6709\u5f71\u54cd\u3002\u800c\u5982\u679c\u6211\u4eec\u9009\u62e9\u7684\u975e $0$ \u7684\u57fa\u5e95\uff0c\u8bf4\u660e $x$ \u5728\u7ebf\u6027\u57fa\u5185\uff0c\u5219\u9700\u8981\u6d88\u53bb\u5176\u4ed6\u5730\u65b9\u7684 $x$\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u7ebf\u6027\u57fa\u7684\u6027\u8d28\uff0c\u663e\u7136\u53ea\u80fd\u7528\u5f02\u6216\u7684\u65b9\u6cd5\u6d88\u9664\u3002\u800c\u6ce8\u610f\u5230\uff0c\u5982\u679c\u9ad8\u4f4d\u5f02\u6216\u4f4e\u4f4d\uff0c\u5c31\u4f1a\u5bfc\u81f4\u4f4e\u4f4d\u57fa\u5e95\u5728\u9ad8\u4f4d\u4e5f\u5b58\u5728 $1$\uff0c\u8fd9\u4f1a\u7834\u574f\u7ebf\u6027\u57fa\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u627e\u5c3d\u91cf\u4f4e\u4f4d\u7684\u57fa\u5e95\u3002\n\n\u8fd9\u6837\u4e00\u901a\u64cd\u4f5c\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u80fd\u5728 $\\mathcal{O}(\\log w_i+n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u5bf9\u7ebf\u6027\u57fa\u7684\u5355\u70b9\u4fee\u6539\u4e86\uff0c\u5176\u4e2d $n$ \u8868\u793a\u7ebf\u6027\u57fa\u5185\u5143\u7d20\u4e2a\u6570\uff0c$w_i$ \u8868\u793a\u5143\u7d20\u7684\u503c\u57df\u3002\u800c\u56de\u5230\u672c\u9898\uff0c\u8003\u8651\u5bf9\u4e8e\u6bcf\u6761\u65b0\u8fb9\u90fd\u8bb0\u5f55\u5b83\u5728\u54ea\u6761\u73af\uff0c\u548c\u6bcf\u4e2a\u73af\u7684\u6743\u503c\u3002\u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\u65f6\uff0c\u627e\u5230\u8981\u5f02\u6216\u7684\u503c\u662f\u591a\u5c11\uff0c\u5355\u70b9\u4fee\u6539\u6240\u5728\u73af\u7684\u6743\u503c\u5373\u53ef\uff0c\u4e0a\u4e2a `std::bitset`\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(\\frac{q(x+m+\\log w_i)}{w}+n\\log n)$\uff0c\u5176\u4e2d $x$ \u8868\u793a\u52a0\u5165\u65b0\u8fb9\u7684\u4e2a\u6570\uff0c\u73af\u7684\u4e2a\u6570\u5927\u7ea6\u662f $\\mathcal{O}(x+m)$\u3002\n```cpp\n#include <cstdio>\n#include <bitset>\n#include <cstring>\nconst int N = 2e3 + 10; typedef std::bitset<N> bs; bs val[N];\ninline void print(const bs& x)\n{\n    int flag = 0; if (x.none()) return putchar('0'), void();\n    for (int i = N - 1; ~i; --i)\n        if (flag && x[i] == 0) putchar('0');\n        else if (x[i] == 1) putchar('1'), flag = 1;\n}\ninline void input(bs& x)\n{\n    static char s[N]; x.reset();\n    scanf(\"%s\", s); int l = strlen(s);\n    for (int i = 0; i < l; ++i) if (s[i] == '1') x.set(l - i - 1);\n}\nbs cir[N]; int toc[N], top, n, m, p;\nstruct Linear_basis\n{\n    // pos_i \u8868\u793a\u7b2c i \u4f4d\u57fa\u5e95\u5bf9\u5e94\u7684\u503c\u7684\u4e0b\u6807\u662f\u591a\u5c11\uff1bc_i \u8868\u793a\u7b2c i \u4e2a\u503c\u5bf9\u5e94\u7684\u57fa\u5e95\uff1bvis_i \u8868\u793a c_i \u662f\u7531\u54ea\u4e9b\u503c\u5f02\u6216\u800c\u6210\u7684\u3002\n    bs c[N], vis[N]; int pos[N];\n    inline void modify(int x, const bs& w)\n    {\n        int p = 0;\n        for (int i = 1; i <= top; ++i) if (c[i].none() && vis[i][x]) { p = i; break; }\n        if (!p)\n            for (int i = 0; i < N; ++i)\n                if (pos[i] && vis[pos[i]][x]) { p = pos[i]; pos[i] = 0; break; }\n        for (int i = 1; i <= top; ++i) if (i != p && vis[i][x]) c[i] ^= c[p], vis[i] ^= vis[p];\n        c[p] ^= w;\n        for (int i = N - 1; ~i; --i)\n        {\n            if (!c[p][i]) continue;\n            if (!pos[i]) { pos[i] = p; break; }\n            c[p] ^= c[pos[i]]; vis[p] ^= vis[pos[i]];\n        }\n    }\n    inline bs query()\n    {\n        bs ret;\n        for (int i = N - 1; ~i; --i)\n            if (!ret[i] && pos[i]) ret ^= c[pos[i]];\n        return ret;\n    }\n}lb;\nstruct DSU\n{\n    int f[N], size[N]; bs dis[N];\n    void init(int n) { for (int i = 1; i <= n; ++i) f[i] = i, size[i] = 1; }\n    int getf(int x) { return x == f[x] ? x : getf(f[x]); }\n    bs getdis(int x) { return x == f[x] ? dis[x] : dis[x] ^ getdis(f[x]); }\n    void merge(int x, int y, bs w, int id)\n    {\n        int t1, t2; \n        if ((t1 = getf(x)) == (t2 = getf(y))) \n        {\n            bs d = getdis(x) ^ getdis(y) ^ w;\n            cir[++top] = d; if (id) toc[id] = top;\n            lb.modify(top, d);\n        }\n        if (size[t1] > size[t2]) std::swap(t1, t2);\n        dis[t1] = getdis(x) ^ getdis(y) ^ w; \n        size[t2] += size[t1]; f[t1] = t2;\n    }\n}dsu;\nint main()\n{\n    scanf(\"%d%d%d\", &n, &m, &p); bs w, t; char op[5]; int id = 0; dsu.init(n);\n    for (int i = 1; i < N; ++i) lb.vis[i][i] = 1;\n    for (int i = 1, x, y; i <= m; ++i)\n        scanf(\"%d%d\", &x, &y), input(w), dsu.merge(x, y, w, 0);\n    print(lb.query()); puts(\"\");\n    for (int i = 1; i <= p; ++i)\n    {\n        scanf(\"%s\", op);\n        if (op[0] == 'A')\n        {\n            int x, y; scanf(\"%d%d\", &x, &y); input(w);\n            dsu.merge(x, y, w, ++id); val[id] = w;\n        }\n        else\n        {\n            int k; scanf(\"%d\", &k);\n            if (op[1] == 'h') \n                input(w), t = w, w ^= val[k], val[k] = t, lb.modify(toc[k], w), cir[toc[k]] ^= w;\n            else lb.modify(toc[k], cir[toc[k]]);\n        }\n        print(lb.query()); puts(\"\");\n    }\n    return 0;\n}\n```\n\u4f46\u662f\uff0c\u8fd9\u79cd\u9ed1\u79d1\u6280\u5982\u679c\u4e0d\u4f1a\uff0c\u5728\u8003\u573a\u4e0a\u60f3\u51fa\u6765\u663e\u7136\u662f\u4e0d\u592a\u73b0\u5b9e\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u590d\u6742\u5ea6\u66f4\u52a3\uff0c\u4f46\u80fd\u901a\u8fc7\u672c\u9898\u7684\u79bb\u7ebf\u505a\u6cd5\u3002\u6ce8\u610f\u5230\uff0c\u7ebf\u6027\u57fa\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u5f88\u5bb9\u6613\u652f\u6301\u52a0\u5165\u548c\u64a4\u9500\uff08\u6ce8\u610f\u533a\u5206\u64a4\u9500\u548c\u5220\u9664\uff09\u4f46\u5f88\u96be\u652f\u6301\u5220\u9664\uff0c\u4f46\u5982\u679c\u9898\u76ee\u8fd8\u8981\u6c42\u5220\u9664\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e0a\u7ebf\u6bb5\u6811\u5206\u6cbb\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u6211\u4eec\u628a\u6240\u6709\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u5904\u7406\u51fa\u6240\u6709\u8fb9\u5bf9\u5e94\u7684\u751f\u6548\u533a\u95f4\uff0c\u5e76\u628a\u8fd9\u4e9b\u533a\u95f4\u6302\u5230\u7ebf\u6bb5\u6811\u4e0a\uff0c\u5bf9\u6574\u4e2a\u7ebf\u6bb5\u6811\u904d\u5386\u4e00\u904d\uff0c\u6bcf\u6b21\u904d\u5386\u5230\u4e00\u4e2a\u7ed3\u70b9\u65f6\u52a0\u5165\u8fd9\u4e2a\u7ed3\u70b9\u4e0a\u6302\u7684\u8fb9\uff08\u7c7b\u4f3c\u5728\u7ebf\u505a\u6cd5\uff0c\u7528\u5e26\u6743\u5e76\u67e5\u96c6\u5904\u7406\u52a0\u73af\u7684\u95ee\u9898\uff09\uff0c\u5230\u53f6\u5b50\u7ed3\u70b9\u65f6\uff0c\u5f53\u524d\u7684\u7ebf\u6027\u57fa\u5373\u4e3a\u8be5\u53f6\u5b50\u5bf9\u5e94\u65f6\u95f4\u4e0b\u7684\u7ebf\u6027\u57fa\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\u7b54\u6848\u3002\u79bb\u5f00\u7ed3\u70b9\u65f6\uff0c\u628a\u5728\u8fd9\u4e2a\u7ed3\u70b9\u505a\u7684\u4e00\u5207\u4e8b\u60c5\u90fd\u64a4\u9500\uff08\u53ef\u4ee5\u901a\u8fc7\u6808\u8bb0\u5f55\u90fd\u5e72\u4e86\u70b9\u5565\uff09\u5373\u53ef\u3002\n\n\u4e00\u4e9b\u7279\u6b8a\u7684\u95ee\u9898\uff1a\n- \u5bf9\u4e8e\u4e00\u5f00\u59cb\u5c31\u52a0\u5165\u7684\u73af\uff0c\u751f\u6548\u533a\u95f4\u4e3a $[0,q]$\u3002\n- \u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u53ef\u4ee5\u770b\u6210\u5220\u6389\u539f\u6765\u7684\u8fb9\u5e76\u52a0\u5165\u4e00\u6761\u65b0\u8fb9\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4\u5728\u7ebf\u505a\u6cd5\u591a\u4e00\u53ea $\\log$\uff1a$\\mathcal{O}(\\frac{q\\log q\\log w_i}{w}+n\\log n)$\u3002\n```cpp\n#include <cstdio>\n#include <bitset>\n#include <vector>\n#include <cstring>\nconst int N = 2e3 + 10; typedef std::bitset<N> bs; char op[5]; int sta[N], top;\nstruct edge{ int u, v; bs w; edge(int u = 0, int v = 0, bs w = 0) : u(u), v(v), w(w) { } }E[N];\ninline void print(const bs& x)\n{\n    int flag = 0; if (x.none()) return putchar('0'), void();\n    for (int i = N - 1; ~i; --i)\n        if (flag && x[i] == 0) putchar('0');\n        else if (x[i] == 1) putchar('1'), flag = 1;\n}\ninline void input(bs& x)\n{\n    static char s[N]; x.reset();\n    scanf(\"%s\", s); int l = strlen(s);\n    for (int i = 0; i < l; ++i) if (s[i] == '1') x.set(l - i - 1);\n}\nstruct Linear_basis\n{\n    bs c[N]; int st[N], tp;\n    inline void insert(bs x)\n    {\n        for (int i = N - 1; ~i; --i)\n        {\n            if (!x[i]) continue;\n            if (c[i].none()) { st[++tp] = i, c[i] = x; break; } \n            x ^= c[i];\n        }\n    } \n    inline bs query()\n    {\n        bs ret; \n        for (int i = N - 1; ~i; --i)\n            if (!ret[i] && c[i].any()) ret ^= c[i];\n        return ret;\n    }\n    inline void del(int pos) { while (tp != pos) c[st[tp--]].reset(); }\n}lb;\nstruct DSU\n{\n    int f[N], size[N]; bs dis[N];\n    struct mem{ int x, y, s; mem(int x = 0, int y = 0, int s = 0) : x(x), y(y), s(s) { } }st[N]; int tp;\n    inline void init(int n) { for (int i = 1; i <= n; ++i) f[i] = i, size[i] = 1; }\n    int getf(int x) { return x == f[x] ? x : getf(f[x]); }\n    bs getdis(int x) { return x == f[x] ? dis[x] : dis[x] ^ getdis(f[x]); }\n    inline void merge(edge x)\n    {\n        int u = x.u, v = x.v, t1, t2; bs w = x.w;\n        if ((t1 = getf(u)) == (t2 = getf(v))) return lb.insert(getdis(u) ^ getdis(v) ^ w);\n        if (size[t1] > size[t2]) std::swap(t1, t2), std::swap(u, v);\n        st[++tp] = mem(t1, t2, size[t2]); size[t2] += size[t1];\n        dis[t1] = getdis(u) ^ getdis(v) ^ w; f[t1] = t2; \n    }\n    inline void del(int pos) { while (tp != pos) f[st[tp].x] = st[tp].x, size[st[tp].y] = st[tp].s, dis[st[tp--].x] = 0; }\n}dsu;\nstruct SegTree\n{\n    #define ls(k) (k << 1)\n    #define rs(k) (k << 1 | 1)\n    struct node{ std::vector<edge> e; int l, r; }h[N << 2];\n    void build(int k, int l, int r)\n    {\n        h[k].l = l; h[k].r = r;\n        if (l == r) return ;\n        int mid = (l + r) >> 1; build(ls(k), l, mid); build(rs(k), mid + 1, r);\n    }\n    void change(int k, int x, int y, edge v)\n    {\n        if (x <= h[k].l && h[k].r <= y) return h[k].e.emplace_back(v), void();\n        int mid = (h[k].l + h[k].r) >> 1;\n        if (x <= mid) change(ls(k), x, y, v);\n        if (mid < y) change(rs(k), x, y, v);\n    }\n    void query(int k)\n    {\n        int mem1 = lb.tp, mem2 = dsu.tp;\n        for (auto v : h[k].e) dsu.merge(v);\n        if (h[k].l == h[k].r) print(lb.query()), puts(\"\");\n        else query(ls(k)), query(rs(k));\n        lb.del(mem1); dsu.del(mem2);\n    }\n}sgt;\nint main()\n{\n    int n, m, p; scanf(\"%d%d%d\", &n, &m, &p); bs w; sgt.build(1, 0, p); dsu.init(n);\n    for (int i = 1, x, y; i <= m; ++i)\n        scanf(\"%d%d\", &x, &y), input(w), sgt.change(1, 0, p, edge(x, y, w));\n    for (int i = 1; i <= p; ++i)\n    {\n        scanf(\"%s\", op);\n        if (op[0] == 'A')\n        {\n            int x, y; scanf(\"%d%d\", &x, &y); input(w);\n            E[++top] = edge(x, y, w); sta[top] = i;\n        }\n        else\n        {\n            int k;\n            if (op[1] == 'a')\n                scanf(\"%d\", &k), sgt.change(1, sta[k], i - 1, E[k]), sta[k] = 0;\n            else \n                scanf(\"%d\", &k), input(w), sgt.change(1, sta[k], i - 1, E[k]), sta[k] = i, E[k].w = w;\n        }\n    }\n    for (int i = 1; i <= top; ++i) if (sta[i]) sgt.change(1, sta[i], p, E[i]);\n    sgt.query(1); return 0;\n}\n```",
        "postTime": 1646963636,
        "uid": 137603,
        "name": "zhiyangfan",
        "ccfLevel": 9,
        "title": "P3733 [HAOI2017]\u516b\u7eb5\u516b\u6a2a \u9898\u89e3"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u5206\u6cbb\u677f\u5b50\u9898\u3002\n\n\u7ed3\u8bba\uff1a1\u5230n\u7684\u8def\u5f84\u5f02\u6216\u503c\u4e3a\u539f\u56fe\u4e00\u68f5\u751f\u6210\u6811\u4e2dn\u7684\u6df1\u5ea6\uff08\u6df1\u5ea6\u4e5f\u662f\u5f02\u6216\u8ba1\u7b97\u7684\uff09\u968f\u4fbf\u5f02\u6216\u51e0\u4e2a\u73af\u3002\n\n\u8bc1\u660e\uff1a\u8003\u8651\u4ece1\u6cbf\u7740\u6811\u8fb9\u8d70\u5230n\uff0c\u5219\u76f8\u5f53\u4e8en\u7684\u6df1\u5ea6\u3002\u82e5\u60f3\u7ecf\u8fc7\u73af\uff0c\u5219\n\u6cbf\u6811\u8fb9\u8d70\u5230\u8be5\u73af\u7684\u67d0\u4e2a\u9876\u70b9\uff0c\u7ed5\u73af\u4e00\u5708\uff0c\u7136\u540e\u6cbf\u6811\u8fb9\u8d70\u56de1\u5c31\u76f8\u5f53\u4e8e\u51ed\u7a7a\u7ed5\u4e86\u4e2a\u73af\uff08\u6811\u8fb9\u4e24\u6b21\u8d70\u8fc7\u62b5\u6d88\u4e86\uff09\n\n\u8fd9\u542f\u53d1\u6211\u4eec\u7528\u7ebf\u6027\u57fa\u5904\u7406\u73af\n\n\u8003\u8651\u6309\u65f6\u95f4\u8f74\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u6761\u8fb9\uff08\u5373\u6bcf\u4e2a\u73af\uff09\u7684\u51fa\u73b0\u65f6\u95f4\uff0c\u5219\u6bcf\u6761\u8fb9\u5bf9\u5e94\u4e00\u4e2a\u533a\u95f4\uff0c\u5c06\u7ebf\u6bb5\u6811\u4e0a\u6253lazy\u6807\u8bb0\u7684\u4f4d\u7f6e\u5b58\u50a8\u8fd9\u6761\u8fb9\uff08\u76f8\u5f53\u4e8e\u4e00\u4e2a\u6c38\u4e45\u5316\u7684\u6807\u8bb0\uff09\uff0c\u6700\u540edfs\u4e00\u6b21\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u7ebf\u6027\u57fa\u867d\u7136\u4e0d\u652f\u6301\u5220\u9664\uff0c\u4f46\u662f\u652f\u6301\u64a4\u9500\u3002\u76f4\u63a5\u628a\u6539\u52a8\u7684\u5b58\u8fdb\u6808\u91cc\uff0c\u56de\u6eaf\u7684\u65f6\u5019\u6539\u56de\u53bb\u5c31\u597d\u4e86\u3002\n\n```cpp\n#include <stdio.h>\n#include <string.h>\n#include <vector>\n#include <bitset>\n#include <algorithm>\nusing namespace std;\nconst int N=502,M=2002,O=4002,L=1000;\ntypedef bitset<M> bt;\nbt ji[M],len[M],bl[M],sum[N],ans,cr;\nvector<int> s[O];\nint lj[M],nxt[M],fir[N],f[N],l[O],r[O],lb[M][3],pos[M],st[M],ys[M];\nint n,m,q,i,j,x,y,z,c,bs,bbs,dt,cs,tp,ds,zbs;\nbool ed[M],zd[M],dr[M];\ninline void read(bt &x)\n{\n\tc=getchar();x.reset();\n\twhile ((c!=48)&&(c!=49)) c=getchar();\n\tdr[ds=1]=c^48;c=getchar();\n\twhile ((c==48)||(c==49))\n\t{\n\t\tdr[++ds]=c^48;\n\t\tc=getchar();\n\t}\n\tfor (int i=1;i<=ds;i++) x[ds-i]=dr[i];\n}\ninline void read(int &x)\n{\n\tc=getchar();\n\twhile ((c<48)||(c>57)) c=getchar();\n\tx=c^48;c=getchar();\n\twhile ((c>=48)&&(c<=57))\n\t{\n\t\tx=x*10+(c^48);\n\t\tc=getchar();\n\t}\n}\ninline void add()\n{\n\tlj[++bbs]=y;\n\tlen[bbs]=cr;\n\tnxt[bbs]=fir[x];\n\tfir[x]=bbs;\n\tlj[++bbs]=x;\n\tlen[bbs]=cr;\n\tnxt[bbs]=fir[y];\n\tfir[y]=bbs;\n}\nint getf(int x)\n{\n\tif (f[x]==x) return x;\n\treturn f[x]=getf(f[x]);\n}\nvoid out(bt x)\n{\n\tint i;for (i=L;(i)&&(x[i]==0);i--);for (;~i;i--) putchar(x[i]|48);putchar(10);\n}\nint ins(bt x)\n{\n\tfor (register int i=L;~i;i--) if (x[i])\n\t{\n\t\tif (ed[i]) x^=ji[i]; else\n\t\t{\n\t\t\tji[i]=x;\n\t\t\ted[i]=1;\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\nvoid summ(bt &x)\n{\n\tx.reset();\n\tfor (register int i=L;~i;i--) if ((ed[i])&&(x[i]==0)) x^=ji[i];\n}\nvoid build(int x)\n{\n\twhile (l[x]<r[x])\n\t{\n\t\tl[c=x<<1]=l[x];r[c]=l[x]+r[x]>>1;\n\t\tl[c|1]=r[c]+1;r[c|1]=r[x];\n\t\tbuild(c);x=x<<1|1;\n\t}\n}\nvoid sol(int x)\n{\n\tif ((z<=l[x])&&(r[x]<=y))\n\t{\n\t\ts[x].push_back(dt);\n\t\treturn;\n\t}\n\tif (z<=r[x<<1]) sol(x<<1);\n\tif (y>r[x<<1]) sol(x<<1|1);\n}\nvoid dfs1(int x)\n{\n\tzd[x]=1;\n\tfor (int i=fir[x];i;i=nxt[i]) if (zd[lj[i]]) ins(sum[lj[i]]^sum[x]^len[i]); else\n\t{\n\t\tsum[lj[i]]=sum[x]^len[i];\n\t\tdfs1(lj[i]);\n\t}\n}\nvoid dfs2(int x)\n{\n\tint cur=tp;\n\tfor (i=0;i<s[x].size();i++)\n\t{\n\t\ty=ins(bl[s[x][i]]);\n\t\tif (~y) st[++tp]=y;\n\t}\n\tif (l[x]==r[x]) {summ(ans);for (i=L;(i)&&(ans[i]==0);i--);for (;~i;i--) putchar(ans[i]|48);putchar(10);}\n\telse {dfs2(x<<1);dfs2(x<<1|1);}\n\twhile (tp>cur) {ed[st[tp]]=0;ji[st[tp--]].reset();}\n}\nint main()\n{\n\tread(n);read(m);read(q);\n\tfor (i=1;i<=n;i++) f[i]=i;\n\twhile (m--)\n\t{\n\t\tread(x);read(y);read(cr);\n\t\tadd();\n\t}\n\tdfs1(1);l[1]=0;r[1]=q;build(1);\n\tmemset(zd,0,sizeof(zd));\n\tfor (i=1;i<=q;i++)\n\t{\n\t\tc=getchar();\n\t\twhile ((c!='A')&&(c!='C')) c=getchar();\n\t\tif (c=='A')\n\t\t{\n\t\t\tread(lb[++bs][1]);read(lb[bs][2]);read(bl[bs]);bl[bs]^=sum[lb[bs][1]]^sum[lb[bs][2]];lb[bs][0]=i;ys[++zbs]=bs;\n\t\t}\n\t\telse if (getchar()=='a')\n\t\t{\n\t\t\tread(x);dt=x=ys[x];\n\t\t\tz=lb[x][0];y=i-1;zd[x]=1;\n\t\t\tsol(1);\n\t\t} else\n\t\t{\n\t\t\tread(x);dt=ys[x];\n\t\t\tz=lb[ys[x]][0];y=i-1;\n\t\t\tsol(1);lb[++bs][1]=lb[ys[x]][1];lb[bs][2]=lb[ys[x]][2];\n\t\t\tlb[ys[x]=bs][0]=i;read(bl[bs]);bl[bs]^=sum[lb[bs][1]]^sum[lb[bs][2]];\n\t\t}\n\t}\n\tzd[0]=1;\n\tfor (i=1;i<=bs;i++) if (!zd[ys[i]])\n\t{\n\t\tz=lb[dt=ys[i]][0];y=q;zd[ys[i]]=1;\n\t\tsol(1);\n\t}\n\tdfs2(1);\n}\n```\n",
        "postTime": 1556026526,
        "uid": 29826,
        "name": "SSerxhs",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3733 \u3010[HAOI2017]\u516b\u7eb5\u516b\u6a2a\u3011"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff08\u5305\u542b\u91cd\u8fb9\u548c\u81ea\u73af\uff09\u548c $q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u589e\u52a0\u4e00\u6761\u8fb9\u3001\u5220\u9664\u4e00\u6761\u8fb9\u6216\u66f4\u6539\u4e00\u6761\u8fb9\u7684\u6743\u503c\u3002\u5b9a\u4e49\u4e00\u6761\u8def\u5f84\u7684\u4ef7\u503c\u4e3a\u6240\u6709\u7ecf\u8fc7\u7684\u8fb9\u7684\u6743\u503c\u5f02\u6216\u8d77\u6765\u7684\u503c\uff0c\u95ee\u7b2c $1$ \u6b21\u64cd\u4f5c\u524d\u548c\u6bcf\u6b21\u64cd\u4f5c\u540e\u4ece $1$ \u53f7\u8282\u70b9\u51fa\u53d1\u6700\u540e\u56de\u5230 $1$ \u53f7\u8282\u70b9\uff08\u53ef\u4ee5\u91cd\u590d\u7ecf\u8fc7\u8fb9\uff09\u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c\u3002\n\n### \u601d\u8def\n\n\u4ece $1$ \u53f7\u8282\u70b9\u51fa\u53d1\u518d\u56de\u5230 $1$ \u53f7\u8282\u70b9\uff0c\u80fd\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u7684\u53ea\u4f1a\u662f\u73af\u3002\u56e0\u4e3a\u5982\u679c\u4f60\u8d70\u4e86\u4e00\u6761\u94fe\uff0c\u4f60\u4e3a\u4e86\u8d70\u56de\u51fa\u53d1\u70b9\u53ea\u80fd\u539f\u8def\u8fd4\u56de\u6216\u8d70\u53e6\u5916\u4e00\u6761\u8def\u8fd4\u56de\u3002\u5982\u679c\u539f\u8def\u8fd4\u56de\u5b83\u7684\u6bcf\u6761\u8fb9\u90fd\u7ecf\u8fc7\u4e86\u4e24\u6b21\uff0c\u5f02\u6216\u8d77\u6765\u5bf9\u7b54\u6848\u6ca1\u6709\u8d21\u732e\uff1b\u5982\u679c\u8d70\u53e6\u5916\u4e00\u6761\u8def\u8fd4\u56de\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u73af\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5148\u6839\u636e\u539f\u56fe\u751f\u6210\u4e00\u68f5\u6811\uff0c\u8fd9\u6837\u6bcf\u52a0\u5165\u4e00\u6761\u8fb9\u5c31\u4e0e\u8fd9\u68f5\u6811\u751f\u6210\u4e00\u4e2a\u73af\uff0c\u628a\u8fd9\u4e2a\u73af\u4e0a\u6bcf\u6761\u8fb9\u6743\u5f02\u6216\u8d77\u6765\u7684\u503c\u52a0\u5165\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002\u5982\u679c\u52a0\u5165\u7684\u8fb9\u5728\u56fe\u4e2d\u751f\u6210\u4e86\u591a\u4e2a\u73af\uff0c\u6211\u4eec\u4e5f\u53ea\u9700\u8981\u5c06\u5b83\u4e0e\u6811\u5f62\u6210\u7684\u73af\u7684\u4ef7\u503c\u52a0\u5165\u96c6\u5408\uff0c\u56e0\u4e3a\u5176\u5b83\u7684\u73af\u7684\u4ef7\u503c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u73af\u4e0e\u96c6\u5408\u4e2d\u5df2\u6709\u7684\u73af\u7684\u4ef7\u503c\u5f02\u6216\u5f97\u5230\u3002\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u96c6\u5408\u4e2d\u4efb\u610f\u5143\u7d20\u5f02\u6216\u8d77\u6765\u7684\u6700\u5927\u503c\u3002\u4e3a\u4e86\u627e\u5230\u8fd9\u4e2a\u6700\u5927\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6027\u57fa\u6765\u7ef4\u62a4\u8fd9\u4e2a\u96c6\u5408\u3002\u5982\u679c\u4e0d\u4e86\u89e3\u7ebf\u6027\u57fa\u7684\uff0c\u53ef\u4ee5\u53bb[\u8fd9\u91cc](http://oi-wiki.com/math/basis/)\u770b\u4e00\u770b\u3002\u56e0\u4e3a\u53ef\u80fd\u4f1a\u51fa\u73b0\u5220\u9664\u8fb9\u548c\u66f4\u6539\u8fb9\u6743\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u628a\u6240\u6709\u64cd\u4f5c\u79bb\u7ebf\u4e0b\u6765\uff0c\u5e76\u5728\u52a0\u5165\u4e00\u6761\u8fb9\u5373\u52a0\u5165\u4e00\u4e2a\u73af\u7684\u65f6\uff0c\u8bb0\u5f55\u5b83\u4f1a\u5728\u4ec0\u4e48\u65f6\u523b\u5220\u53bb\u3002\u5728\u7ebf\u6027\u57fa\u4e2d\u63d2\u5165\u65f6\uff0c\u82e5\u540c\u4e00\u4f4d\u4e0a\u6709\u4e24\u4e2a\u6570\uff0c\u5219\u8ba9\u5220\u9664\u65f6\u95f4\u8f83\u665a\u7684\u6570\u5360\u636e\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u53e6\u4e00\u4e2a\u6570\u5411\u540e\u627e\u4f4d\u7f6e\u3002\u5728\u7ebf\u6027\u57fa\u4e2d\u67e5\u8be2\u65f6\uff0c\u5219\u53ea\u7528\u5220\u9664\u65f6\u95f4\u665a\u4e8e\u67e5\u8be2\u65f6\u7684\u65f6\u95f4\u7684\u6570\u66f4\u65b0\u7b54\u6848\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll bitset<1005>\ninline ll read()\n{\n\tll x;\n\tstring s;\n\tcin>>s;\n\tfor(register int i=s.size();i;--i) x[s.size()-i]=s[i-1]-'0';\n\treturn x;\n}\ninline void write(ll x)\n{\n\tbool flag=0;\n\tfor(register int i=1000;i>=0;--i)\n\t{\n\t\tif(x[i]) flag=1;\n\t\tif(flag) putchar(x[i]+'0');\n\t}\n\tif(!flag) putchar('0');\n\tputs(\"\");\n}\nstruct node\n{\n\tstring op;\n\tint x,y;\n\tll z;\n}p[1005];\nstruct edge\n{\n\tint to;\n\tll val;\n};\nvector<edge>s[1005];\nint n,m,q,t[1005],pos[1005],tot,del[1005];\nll dis[1005],a[1005];\ninline void insert(ll x,int now)\n{\n\tfor(register int i=1000;i>=0;--i)\n\t{\n\t\tif(!x[i]) continue;\n\t\tif(t[i]<now)\n\t\t{\n\t\t\tswap(t[i],now);\n\t\t\tswap(a[i],x);\n\t\t}\n\t\tif(!now) break;\n\t\tx^=a[i];\n\t}\n}\ninline void dfs(int u,ll d)\n{\n\tdis[u]=d;\n\tfor(register int i=0;i<s[u].size();++i)\n\t{\n\t\tint v=s[u][i].to;\n\t\tll w=s[u][i].val;\n\t\tif(dis[v]==-1) dfs(v,d^w);\n\t\telse insert(d^w^dis[v],1e9);\n\t}\n}\ninline ll query(int now)\n{\n\tll res=0;\n\tfor(register int i=1000;i>=0;--i) if(t[i]>now&&!res[i]) res^=a[i];\n\treturn res;\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\tfor(register int i=1;i<=n;++i) dis[i]=-1;\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tll w=read();\n\t\ts[u].push_back((edge){v,w});\n\t\ts[v].push_back((edge){u,w});\n\t}\n\tdfs(1,0);\n\twrite(query(0));\n\tfor(register int i=1;i<=q;++i)\n\t{\n\t\tcin>>p[i].op;\n\t\tif(p[i].op[1]=='d')\n\t\t{\n\t\t\tpos[++tot]=i;\n\t\t\tscanf(\"%d%d\",&p[i].x,&p[i].y);\n\t\t\tp[i].z=read();\n\t\t}\n\t\telse if(p[i].op[1]=='a')\n\t\t{\n\t\t\tint k;\n\t\t\tscanf(\"%d\",&k);\n\t\t\tdel[pos[k]]=i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint k;\n\t\t\tscanf(\"%d\",&k);\n\t\t\tdel[pos[k]]=i;\n\t\t\tp[i].x=p[pos[k]].x;\n\t\t\tp[i].y=p[pos[k]].y;\n\t\t\tp[i].z=read();\n\t\t\tpos[k]=i;\n\t\t}\n\t}\n\tfor(register int i=1;i<=q;i=-~i)\n\t{\n\t\tif(p[i].op[1]!='a')\n\t\t{\n\t\t\tif(!del[i]) insert(dis[p[i].x]^dis[p[i].y]^p[i].z,1e9);\n\t\t\telse insert(dis[p[i].x]^dis[p[i].y]^p[i].z,del[i]);\n\t\t}\n\t\twrite(query(i));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1661937854,
        "uid": 488734,
        "name": "wrzSama",
        "ccfLevel": 7,
        "title": "P3733 [HAOI2017]\u516b\u7eb5\u516b\u6a2a \u9898\u89e3"
    },
    {
        "content": "## \u89e3\r\n\r\n### \u524d\u7f6e\u9898\u76ee\r\n\r\n1.WC2011 \u6700\u5927 xor \u8def\u5f84\r\n\r\n2.bzoj4184 shallot  http://123.56.142.67/bzoj-4184-shallot-%e9%a2%98%e8%a7%a3/\r\n\r\n\r\n\r\n\u6709\u4e86\u8fd9\u4e24\u9898\u7684\u57fa\u7840\u5c31\u53ef\u4ee5\u8003\u8651\u9996\u5148\u9700\u8981\u627e\u5230\u4e00\u4e9b\u73af\uff0c\u5c06\u8fd9\u4e9b\u73af\u63d2\u5165\u5f02\u6216\u57fa\uff0c\u518d\u6c42\u5f97\u6700\u5927\u503c\r\n\r\n\u9700\u8981\u63d2\u5165\u5220\u9664\u7684\u5f02\u6216\u57fa\u662f\u4e0d\u597d\u5b8c\u6210\u7684\uff0c\u8003\u8651\u50cf bzoj4184 \u4e00\u6837\u79bb\u7ebf\u4f7f\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\r\n\r\n\u6b64\u5904\u770b\u5230 $len$ \u7684\u53d6\u503c $\\leq 1000$ \u6240\u4ee5\u4f7f\u7528\u5bb9\u5668 `bitset` \u7ef4\u62a4\u5f02\u6216\u57fa\uff0c\u6574\u4f53\u4ee3\u7801\u7ec6\u8282\u5f88\u591a\r\n\r\n\r\n\r\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u539f\u56fe\u5bfb\u627e\u5230\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u628a\u975e\u6811\u8fb9\u5168\u90e8\u5b58\u8d77\u6765\u7ef4\u62a4\u5b83\u4eec\u7684\u5b58\u5728\u65f6\u95f4\uff08\u6ce8\u610f\uff0c\u5728\u4e00\u5f00\u59cb\u7ed9\u5b9a\u7684\u8fb9\u4e2d\u6709\u975e\u6811\u8fb9\uff0c\u5c06\u5176\u65f6\u95f4\u8bbe\u4e3a $0-q$ \u5c31\u53ef\u4ee5\u4e86\uff09\u3002\u5982\u6b64\u6bcf\u6b21\u6dfb\u52a0\u4e00\u6761\u8fb9\uff0c\u90fd\u4f1a\u6784\u6210\u4e00\u4e2a\u73af\uff0c\u5c06\u6811\u4e0a\u8def\u5f84\u9884\u5904\u7406\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5f97\u5230\u73af\u7684\u5f02\u6216\u503c\u5e76\u63d2\u5165\u5f02\u6216\u57fa\u3002\u4e3a\u4e86\u907f\u514d\u7a7a\u95f4\u7206\u70b8\uff0c\u6bcf\u6b21\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u80fd\u591f\u6210\u73af\u7684\u975e\u6811\u8fb9\u7684\u6807\u53f7\uff0c\u4e0d\u7528\u6bcf\u6b21\u90fd\u63d2\u5165\u5f02\u6216\u57fa\u3002\r\n\r\n\r\n\r\n\u5f02\u6216\u57fa\u63d2\u5165\u8bb0\u5f97\u5199 \r\n\r\n```cpp\r\nbreak\r\n```\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\n#define mid ((lc[u]+rc[u])>>1)\r\n#define ls (u<<1)\r\n#define rs (u<<1 | 1)\r\nusing namespace std;\r\n#define bs bitset<1005> \r\nint maxbit;\r\nstruct linearbase\r\n{\r\n    bs p[1005];\r\n    void insert(bs x)\r\n    {\r\n        for(int i=maxbit;i>=0;i--) \r\n        {\r\n            if(!x[i]) continue;\r\n            if(!p[i].any()) {p[i]=x;break;}\r\n            else x^=p[i];\r\n        }\r\n    }\r\n    bs query()\r\n    {\r\n        bs tmp;\r\n        tmp.reset();\r\n        for(int i=maxbit;i>=0;i--) if(!tmp[i]) tmp^=p[i];\r\n        return tmp;\r\n    }\r\n}Ba;\r\nvoid print(bs res)\r\n{\r\n    bool flag=0;\r\n    for(int i=maxbit;i>=0;i--)\r\n    {\r\n        if(!flag && res[i]) flag=1;\r\n        if(flag) putchar(res[i]+'0');\r\n    }if(!flag) putchar('0');\r\n    putchar('\\n');\r\n}\r\n/*\r\nstruct linearbase\r\n{\r\n    int p[33];\r\n    linearbase() {memset(p,0,sizeof p);}\r\n    void insert(int x)\r\n    {\r\n        for(int i=31;i>=0;i--)\r\n        {\r\n            if(!(x>>i)) continue;\r\n            if(!p[i]) {p[i]=x;break;}\r\n            x^=p[i];\r\n        }\r\n    }\r\n    int query()\r\n    {\r\n        int res=0;\r\n        for(int i=31;i>=0;i--) if(res^p[i]>res) res^=p[i];\r\n        return res;\r\n    }\r\n};\r\n*/\r\nconst int maxn=1200;\r\nint n,m,P;\r\nstruct bcj\r\n{\r\n    int fa[maxn];\r\n    void init()\r\n    {\r\n        for(int i=1;i<=n;i++) fa[i]=i;\r\n    }\r\n    int getfa(int u)\r\n    {\r\n        while(fa[u]!=u) u=fa[u]=fa[fa[u]];\r\n        return u;\r\n    }\r\n    void merge(int x,int y)\r\n    {\r\n        x=getfa(x);y=getfa(y);\r\n        fa[x]=y;\r\n    }\r\n}A;\r\nstruct node\r\n{\r\n    int v,next;\r\n    bs w;\r\n}e[maxn<<1];\r\nint head[maxn],cnt;\r\nvoid add(int u,int v,bs w)\r\n{\r\n    e[++cnt].next=head[u];\r\n    e[cnt].v=v;\r\n    e[cnt].w=w;\r\n    head[u]=cnt;\r\n}\r\nbs dis[maxn];\r\nvoid dfs(int u,int fa)\r\n{\r\n    for(int i=head[u];i;i=e[i].next)\r\n    {\r\n        int v=e[i].v;\r\n        if(v==fa) continue;\r\n        dis[v]=dis[u]^e[i].w;\r\n        dfs(v,u);\r\n    }\r\n}\r\nstruct Edge\r\n{\r\n    int u,v,l,r;\r\n    bs w;\r\n}E[maxn<<1];\r\nstruct segment_tree\r\n{\r\n    vector<int> ver[maxn<<2];\r\n    int lc[maxn<<2],rc[maxn<<2];\r\n    bs ans[maxn];\r\n    void build(int u,int l,int r)\r\n    {\r\n        lc[u]=l;rc[u]=r;\r\n        if(l==r) return ;\r\n        ver[u].clear();\r\n        build(ls,l,mid);\r\n        build(rs,mid+1,r);\r\n    }\r\n    void modify(int u,int l,int r,int x)\r\n    {\r\n    \t//cout<<u<<' '<<l<<' '<<r<<endl;\r\n        if(l<=lc[u] && rc[u]<=r)\r\n        {\r\n            ver[u].push_back(x);\r\n            return ;\r\n        }\r\n        if(l<=mid) modify(ls,l,r,x);\r\n        if(mid<r) modify(rs,l,r,x);\r\n    }\r\n    void query(int u,linearbase tmp)\r\n    {\r\n        for(int i=0;i<ver[u].size();i++)\r\n        {\r\n            int x=ver[u][i];\r\n            tmp.insert(dis[E[x].u]^dis[E[x].v]^E[x].w);\r\n            //print(dis[E[x].u]^dis[E[x].v]^E[x].w);\r\n            //tmp.insert(ver[u][i]);\r\n        } \r\n        if(lc[u]==rc[u]) {ans[lc[u]]=tmp.query();return ;}\r\n        query(ls,tmp);query(rs,tmp);\r\n    }\r\n}T;\r\nint tot;\r\nint pos[maxn],tim;\r\nint main()\r\n{\r\n//cout<<114514<<endl;\r\n    scanf(\"%d%d%d\",&n,&m,&P);\r\n    A.init();\r\n    for(int i=1;i<=m;i++)\r\n    {\r\n        int x,y;string st;\r\n        scanf(\"%d%d\",&x,&y);cin>>st;\r\n        maxbit=max(maxbit,(int)st.size());\r\n        if(A.getfa(x)!=A.getfa(y)) A.merge(x,y),add(x,y,bs(st)),add(y,x,bs(st));\r\n        else E[++tot]={x,y,0,P,bs(st)};   \r\n    }\r\n    //cout<<114514<<endl;\r\n    dfs(1,0);\r\n    //cout<<114514<<endl;\r\n    for(int i=1;i<=P;i++)\r\n    {\r\n    //cout<<i<<endl;\r\n        string opt,st;\r\n        int x,y;\r\n        cin>>opt;\r\n        //cout<<opt<<endl;\r\n        if(opt[0]=='A')\r\n        {\r\n            scanf(\"%d%d\",&x,&y);cin>>st;\r\n            maxbit=max(maxbit,(int)st.size());\r\n            E[++tot]={x,y,i,P,bs(st)};pos[++tim]=tot;\r\n        }\r\n        else if(opt[1]=='a')\r\n        {\r\n            scanf(\"%d\",&x);\r\n            E[pos[x]].r=i-1;\r\n            //pos[x]=0;\r\n        }\r\n        else\r\n        {\r\n            //cout<<114514432412<<endl;\r\n            //cout<<142314<<endl;\r\n            scanf(\"%d\",&x);cin>>st;\r\n            maxbit=max(maxbit,(int)st.size());\r\n            E[pos[x]].r=i-1;\r\n            E[++tot]=E[pos[x]];E[tot].w=bs(st);\r\n            E[tot].l=i;E[tot].r=P;\r\n            pos[x]=tot;\r\n        \r\n        }\r\n    }\r\n    T.build(1,0,P);\r\n    //cout<<114514<<endl;\r\n    \r\n    for(int i=1;i<=tot;i++)\r\n\t{\r\n\t\t//cout<<E[i].u<<' '<<E[i].v<<' '<<E[i].l<<' '<<E[i].r<<endl;\r\n\t\tT.modify(1,E[i].l,E[i].r,i);///MLE\t\r\n\t} \r\n    //cout<<114514<<endl;\r\n    T.query(1,Ba); \r\n    print(T.ans[0]);\r\n    for(int i=1;i<=P;i++) print(T.ans[i]);\r\n    return 0;\r\n}\r\n/*\r\n5 8 0\r\n4 4 1010010010000000011000010000000\r\n1 2 1100011100010100011010101110000\r\n3 5 100001000010001100110100\r\n1 4 100101000000100001000000000\r\n4 5 1010100000010000000100000001101\r\n5 1 1010011100100001010000010000\r\n2 5 100001010001000001001010001000\r\n2 1 100000000010000100000000010\r\n\r\n1111101011101110011111000011010\r\n\r\n*/\r\n```\r\n\r\n\u601d\u8def\u6709\u501f\u9274 @[**teafrogsf**](https://www.luogu.com.cn/user/7020) \u7684\uff0c\u4e0d\u5c3d\u611f\u6fc0\u3002",
        "postTime": 1657508598,
        "uid": 178804,
        "name": "\u592a\u9633\u8d77\u665a\u4e86\u5462",
        "ccfLevel": 0,
        "title": "3733\u9898\u89e3"
    },
    {
        "content": "\u7ed9\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5206\u6cbb\u7ef4\u62a4\u751f\u6210\u6811\u7684 SB \u505a\u6cd5\u3002\n\n\u521a\u521a\u505a\u4e86 CF938G\uff08\u8fd9\u9898\u52a0\u5f3a\u7248\uff09\uff0c\u7136\u540e\u53d7\u4e86\u5f88\u5927\u7684\u5f71\u54cd\u3002\n\n\u76f4\u63a5\u5b9e\u73b0\u4e00\u4e0b\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n1. \u52a8\u6001\u7ef4\u62a4\u4e24\u70b9\u4e4b\u95f4\u4efb\u610f\u4e00\u6761\u5f02\u6216\u8def\u5f84\u957f\n\n2. \u52a0\u8fb9\u540e\u627e\u5230\uff08\u53ef\u80fd\u51fa\u73b0\u7684\uff09\u73af\u957f\uff0c\u52a0\u5165\u7ebf\u6027\u57fa\n\n\u5bf9\u4e8e 1. \u53ef\u4ee5\u7528\u5e26\u6743\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u9897\u751f\u6210\u6811\uff08\u9898\u76ee\u4fdd\u8bc1\u4efb\u610f\u65f6\u523b\u8fde\u901a\uff09\uff0c2. \u5219\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u51fa\u73b0\u4e86\u73af\uff0c\u8fd9\u4fe9\u90fd\u4e0d\u597d\u76f4\u63a5\u8fdb\u884c\u5220\u9664\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u8bb0\u5f55\u6bcf\u6b21\u7684\u64cd\u4f5c\u6765\u9010\u6b21\u64a4\u56de\uff0c\u6240\u4ee5\u4e0a\u7ebf\u6bb5\u6811\u5206\u6cbb\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\u64cd\u4f5c\uff0c\u5206\u6cbb\u9012\u5f52\u5230\u5f53\u524d\u65f6\u95f4\u65f6\u76f4\u63a5\u5728\u7ebf\u6027\u57fa\u4e2d\u67e5\u8be2\u5373\u53ef\u3002\n\n\u4e0a\u4e2a bitset\uff0c\u590d\u6742\u5ea6 $O(\\frac{q\\log q(\\log n + L)}{w})$\u3002\n\nCode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define N 505\n#define V 1000\nint n, m, q;\nstruct edge\n{\n\tint u, v;\n\tbitset<V> w;\n};\ninline void print(const bitset<V> &x)\n{\n\tint flag = 1;\n\tfor(int i = V - 1; i >= 0; i--)\n\t{\n\t\tflag &= (x[i] == 0);\n\t\tif(!flag)\n\t\t{\n\t\t\tcout << x[i];\n\t\t}\n\t}\n\tcout << endl;\n\treturn;\n}\nstruct linebase\n{\n\tbitset<V> p[V];\n\tstack<int> st;\n\tinline void insert(bitset<V> x)\n\t{\n\t\tfor(int i = V - 1; i >= 0; i--)\n\t\t{\n\t\t\tif(!x[i])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(p[i].none())\n\t\t\t{\n\t\t\t\tst.push(i);\n\t\t\t\tp[i] = x;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx ^= p[i];\n\t\t}\n\t\treturn;\n\t}\n\tinline bitset<V> query()\n\t{\n\t\tbitset<V> ret;\n\t\tret.reset();\n\t\tfor(int i = V - 1; i >= 0; i--)\n\t\t{\n\t\t\tif(!ret[i] && p[i][i])\n\t\t\t{\n\t\t\t\tret ^= p[i];\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tinline void del(int size)\n\t{\n\t\twhile((int)st.size() != size)\n\t\t{\n\t\t\tp[st.top()].reset();\n\t\t\tst.pop();\n\t\t}\n\t\treturn;\n\t}\n};\nlinebase LB;\nstruct mergeset\n{\n\tint fa[N], dep[N];\n\tbitset<V> dis[N];\n\tstruct node\n\t{\n\t\tint f1, f2, dep;\n\t};\n\tstack<node> st;\n\tinline void init()\n\t{\n\t\tfor(int i = 1; i <= n; i++)\n\t\t{\n\t\t\tfa[i] = i;\n\t\t\tdep[i] = 1;\n\t\t}\n\t\treturn;\n\t}\n\tinline int getfa(int x)\n\t{\n\t\twhile(x != fa[x])\n\t\t{\n\t\t\tx = fa[x];\n\t\t}\n\t\treturn x;\n\t}\n\tinline bitset<V> qdis(int x)\n\t{\n\t\tbitset<V> ret;\n\t\tret.reset();\n\t\twhile(x != fa[x])\n\t\t{\n\t\t\tret ^= dis[x];\n\t\t\tx = fa[x];\n\t\t}\n\t\treturn ret;\n\t}\n\tinline void merge(edge x)\n\t{\n\t\tint f1 = getfa(x.u), f2 = getfa(x.v);\n\t\tif(f1 == f2)\n\t\t{\n\t\t\tLB.insert(qdis(x.u) ^ qdis(x.v) ^ x.w);\n\t\t\treturn;\n\t\t}\n\t\tif(dep[f1] < dep[f2])\n\t\t{\n\t\t\tswap(f1, f2);\n\t\t}\n\t\tst.push((node){f1, f2, dep[f1]});\n\t\tdis[f2] = qdis(x.u) ^ qdis(x.v) ^ x.w;\n\t\tfa[f2] = f1;\n\t\tdep[f1] = max(dep[f1], dep[f2] + 1);\n\t\treturn;\n\t}\n\tinline void del(int size)\n\t{\n\t\twhile((int)st.size() != size)\n\t\t{\n\t\t\tfa[st.top().f2] = st.top().f2;\n\t\t\tdep[st.top().f1] = st.top().dep;\n\t\t\tdis[st.top().f2] = 0;\n\t\t\tst.pop();\n\t\t}\n\t\treturn;\n\t}\n};\nmergeset MS;\nvector<edge> tmp[N << 3];\nvoid update(int root, int l, int r, int L, int R, edge v)\n{\n\tif(L <= l && r <= R)\n\t{\n\t\ttmp[root].emplace_back(v);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(L <= mid)\n\t{\n\t\tupdate(root << 1, l, mid, L, R, v);\n\t}\n\tif(mid < R)\n\t{\n\t\tupdate(root << 1 | 1, mid + 1, r, L, R, v);\n\t}\n\treturn;\n}\nvoid dfs(int root, int l, int r)\n{\n\tint mem1 = MS.st.size(), mem2 = LB.st.size();\n\tfor(auto x : tmp[root])\n\t{\n\t\tMS.merge(x);\n\t}\n\tif(l == r)\n\t{\n\t\tprint(LB.query());\n\t}\n\telse\n\t{\n\t\tint mid = (l + r) >> 1;\n\t\tdfs(root << 1, l, mid), dfs(root << 1 | 1, mid + 1, r);\n\t}\n\tMS.del(mem1), LB.del(mem2);\n\treturn;\n}\nedge e[N << 1];\nint last[N << 1];\nsigned main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.tie(0);\n\tcin >> n >> m >> q;\n\tMS.init();\n\tint u, v;\n\tbitset<V> w;\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tcin >> u >> v >> w;\n\t\tMS.merge((edge){u, v, w});\n\t}\n\tprint(LB.query());\n\tstring opt;\n\tint cnt = 0, x;\n\tfor(int i = 1; i <= q; i++)\n\t{\n\t\tcin >> opt;\n\t\tif(opt == \"Add\")\n\t\t{\n\t\t\tcnt++;\n\t\t\tcin >> e[cnt].u >> e[cnt].v >> e[cnt].w;\n\t\t\tlast[cnt] = i;\n\t\t}\n\t\telse if(opt == \"Cancel\")\n\t\t{\n\t\t\tcin >> x;\n\t\t\tupdate(1, 1, q, last[x], i - 1, e[x]);\n\t\t\tlast[x] = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcin >> x >> w;\n\t\t\tupdate(1, 1, q, last[x], i - 1, e[x]);\n\t\t\te[x].w = w;\n\t\t\tlast[x] = i;\n\t\t}\n\t}\n\tfor(int i = 1; i <= cnt; i++)\n\t{\n\t\tif(last[i])\n\t\t{\n\t\t\tupdate(1, 1, q, last[i], q, e[i]);\n\t\t}\n\t}\n\tif(q)\n\t{\n\t\tdfs(1, 1, q);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1643077757,
        "uid": 90027,
        "name": "GG_jok_er",
        "ccfLevel": 0,
        "title": "P3733 [HAOI2017]\u516b\u7eb5\u516b\u6a2a \u9898\u89e3"
    },
    {
        "content": "\u975e\u5e38\u7ecf\u5178\u7684\u4f7f\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\u7ef4\u62a4\u6700\u5927\u5f02\u6216\u548c\u8def\u5f84\u7684\u9898\u76ee\u3002\n\n\u9996\u5148\u770b\u5230\u6700\u5927\u5f02\u6216\u548c\u8def\u5f84\uff0c\u5c31\u53ef\u4ee5\u8fc5\u901f\u8054\u60f3\u8d77 [WC2011]\u6700\u5927 XOR \u548c\u8def\u5f84\u3002\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u628a\u6bcf\u4e2a\u65f6\u523b\u7684\u7ebf\u6027\u57fa\u641e\u51fa\u6765\u5c31\u884c\u4e86\uff0c\u7531\u4e8e\u8fd9\u4e2a\u9898\u662f\u6c42 $1 \\rightarrow 1$ \u7684\u8def\u5f84\u6240\u4ee5\u751a\u81f3\u4e0d\u9700\u8981\u627e\u94fe\u3002\n\n\u6bcf\u4e2a\u65f6\u523b\u90fd\u91cd\u505a\u4e00\u6b21\u80af\u5b9a\u662f\u4f1a $\\text{T}$ \u7684\u3002\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u7ecf\u5178\u505a\u6cd5\uff0c\u5c31\u662f\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u5148\u968f\u4fbf\u627e\u4e00\u4e2a\u539f\u56fe\u7684\u751f\u6210\u6811\uff0c\u7136\u540e\u5c06\u539f\u56fe\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u73af\u4e22\u8fdb\u7ebf\u6027\u57fa\u3002\u7531\u4e8e\u539f\u56fe\u4e2d\u7684\u8fb9\u662f\u4e0d\u4f1a\u6539\u53d8\u8fb9\u6743\u6216\u8005\u88ab\u5220\u6389\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u7ba1\u4e86\u3002\u5bf9\u4e8e\u540e\u9762\u7684\u6bcf\u4e00\u6b21\u52a0\u8fb9\uff0c\u6211\u4eec\u628a\u8fd9\u6761\u65b0\u8fb9\u548c\u539f\u56fe\u7684\u751f\u6210\u6811\u6240\u6784\u6210\u7684\u90a3\u4e2a\u73af\u7ed9\u4e22\u8fdb\u7ebf\u6027\u57fa\u91cc\u9762\u3002\u5bb9\u6613\u8bc1\u660e\u8fd9\u4e9b\u63d2\u5165\u7ebf\u6027\u57fa\u4e2d\u7684\u73af\u53ef\u4ee5\u8868\u793a\u51fa\u6765\u65b0\u56fe\u4e2d\u7684\u6240\u6709\u73af\uff08\u611f\u6027\u7406\u89e3\uff09\u3002\n\n\u7531\u4e8e\u9898\u76ee\u4e2d\u8bf4 $w$ \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u7684\u4f4d\u6570 $len \\leq 1000$\uff0c\u6240\u4ee5\u5fc5\u987b\u4f7f\u7528 $\\text{bitset}$ \u6765\u5b58\u50a8\u8fb9\u7684\u6743\u503c\u548c\u7ebf\u6027\u57fa\u91cc\u9762\u7684\u6570\u3002\n\n\u539f\u56fe\u7684\u751f\u6210\u6811\u548c\u73af\u53ef\u4ee5\u4e00\u5f00\u59cb\u76f4\u63a5\u7528\u4e00\u904d $\\text{dfs}$ \u5f97\u5230\uff08\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u76f4\u63a5\u7528\u4e00\u5f00\u59cb\u5904\u7406\u51fa\u6765\u7684\u503c\uff0c\u4e0d\u9700\u8981\u5e26\u6743\u5e76\u67e5\u96c6\uff09\uff0c\u4e2d\u95f4\u7684\u4e00\u6b21\u52a0\u8fb9\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\frac{len ^ 2}{\\omega})$ \u7684\u3002\u4e8e\u662f\u53ea\u6709\u52a0\u8fb9\u64cd\u4f5c\u7684\u60c5\u51b5\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 $O(m + \\frac{Q len^2}{\\omega})$ \u7684\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u3002\n\n\u90a3\u4e48\u73b0\u5728\u8003\u8651\u4e00\u4e0b\u6709\u4e86\u6539\u8fb9\u6743\u548c\u5220\u9664\u64cd\u4f5c\u7684\u60c5\u51b5\u3002\u7531\u4e8e\u6539\u8fb9\u6743\u6211\u4eec\u53ef\u4ee5\u770b\u4f5c\u662f\u64a4\u9500\u6389\u539f\u6765\u7684\u8fd9\u6761\u8fb9\uff0c\u52a0\u5165\u4e00\u6761\u65b0\u7684\u6743\u503c\u662f $w'$ \u7684\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ea\u7528\u8003\u8651\u5982\u4f55\u5220\u9664\u3002\u7ebf\u6027\u57fa\u8fd9\u4e2a\u4e1c\u897f\u662f\u4e0d\u592a\u597d\u76f4\u63a5\u8fdb\u884c\u5220\u9664\u7684\uff0c\u4e8e\u662f\u8003\u8651\u7ebf\u6bb5\u6811\u5206\u6cbb\u628a\u5220\u9664\u53d8\u6210\u64a4\u9500\u3002\u8fd9\u4e2a\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u628a\u6bcf\u6761\u8fb9\u7684\u65f6\u95f4\u533a\u95f4 $[l, r]$ \u6c42\u51fa\u6765\u7136\u540e\u63d2\u5165\u7ebf\u6bb5\u6811\u91cc\u9762\uff0c\u7136\u540e\u9012\u5f52\u5230\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u5f00\u4e00\u4e2a\u65b0\u7684\u7ebf\u6027\u57fa\u6765\u5907\u4efd\u5f53\u524d\u72b6\u6001\uff08\u7531\u4e8e\u7ebf\u6bb5\u6811\u9ad8\u662f $\\log Q$ \u7684\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $len \\log Q$\uff0c\u4e0d\u4f1a $\\text{MLE}$\uff09\uff0c\u56de\u6eaf\u7684\u65f6\u5019\u8fd8\u539f\u7ebf\u6027\u57fa\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m + \\frac{Q \\log Q len^2}{\\omega})$\u3002\u5f00\u4e86 $\\text{O2}$ \u4e4b\u540e\u8dd1\u7684\u98de\u5feb\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ls (num << 1)\n#define rs ((num << 1) | 1)\n#define mid ((l + r) >> 1)\n#define pb push_back\n\nusing namespace std;\n\nconst int N = 1e3 + 7;\nconst int MT = 1e3 + 7;\n\n#define bi bitset<MT + 1>\n\nstruct Ope {\n    int u, v;\n    bi w;\n};\n\nint n, m, Q, k;\nint head[N], pre[N], ver[N];\nint st[N], ed[N], unc[N], ti[N];\nint cnt = 0, vis[N];\nbi val[N], Xor[N], B[MT + 1], ept, col[MT + 1];\nvector<Ope> upd[N << 2];\nbi Ansn[MT + 1];\n\nvoid add_edge(int u, int v, bi w) {\n    pre[++cnt] = head[u];\n    head[u] = cnt;\n    ver[cnt] = v, val[cnt] = w;\n    return;\n}\n\nbool ins(bi x) {\n    bool flag = 0;\n    for(int i = MT; ~i; --i) {\n        if(x[i]) {\n            if(B[i] == ept) {\n                flag = 1, B[i] = x;\n                break;\n            }\n            else x ^= B[i];\n        }\n    }    \n    return flag;\n}\n\nbi qmx() {\n    bi Ans;\n    for(int i = MT; ~i; --i) {\n        if(B[i] == ept) continue;\n        else if(Ans[i] == 0) Ans ^= B[i];\n    }\n    return Ans;\n}\n\nvoid dfs(int nown) {\n    if(vis[nown]) return;\n    vis[nown] = 1;\n    for(int i = head[nown]; i; i = pre[i]) {\n        int v = ver[i];\n        if(vis[v]) {\n            ins((Xor[nown] ^ Xor[v] ^ val[i]));\n            continue;\n        }\n        Xor[v] = Xor[nown] ^ val[i];\n        dfs(v);\n    }\n    return;\n}\n\nvoid update(int num, int l, int r, int a, int b, Ope v) {\n    if(a <= l && b >= r) {\n        upd[num].pb(v);\n        return;\n    }\n    if(a <= mid) update(ls, l, mid, a, b, v);\n    if(b > mid) update(rs, mid + 1, r, a, b, v);\n    return;\n}\n\nvoid solve(int num, int l, int r) {\n    bi bacB[MT + 1];\n    for(int i = 0; i <= MT; ++i) bacB[i] = B[i];\n    for(Ope op : upd[num]) {\n        int u = op.u, v = op.v; bi w = op.w;\n        ins(Xor[u] ^ Xor[v] ^ w);\n    }\n    if(l == r) {\n        Ansn[l] = qmx();\n        for(int i = 0; i <= MT; ++i) B[i] = bacB[i];\n        return;\n    }\n    solve(ls, l, mid), solve(rs, mid + 1, r);\n    for(int i = 0; i <= MT; ++i) B[i] = bacB[i];\n    return;\n}\n\nint main() {\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n    cin >> n >> m >> Q;\n    for(int i = 1; i <= m; ++i) {\n        int u, v; bi w; string s;\n        cin >> u >> v;\n        cin >> s; reverse(s.begin(), s.end());\n        for(int j = 0; j < s.length(); ++j) if(s[j] - '0' == 1) w.set(j);\n        add_edge(u, v, w);\n        add_edge(v, u, w);\n    }\n    dfs(1);\n    Q++;\n    for(int i = 2; i <= Q; ++i) {\n        string opt; int x, y; bi z;\n        cin >> opt;\n        if(opt[0] == 'A') {\n            ++k; cin >> x >> y; string s;\n            cin >> s; reverse(s.begin(), s.end());\n            for(int j = 0; j < s.length(); ++j) if(s[j] - '0' == 1) z.set(j);\n            unc[k] = 1, st[k] = x, ed[k] = y, col[k] = z, ti[k] = i;\n        }\n        else if(opt == \"Cancel\") {\n            cin >> x; unc[x] = 0;\n            update(1, 1, Q, ti[x], i - 1, (Ope){st[x], ed[x], col[x]});\n        }\n        else {\n            cin >> x; string s;\n            cin >> s; reverse(s.begin(), s.end());\n            for(int j = 0; j < s.length(); ++j) if(s[j] - '0' == 1) z.set(j);\n            update(1, 1, Q, ti[x], i - 1, (Ope){st[x], ed[x], col[x]});\n            ti[x] = i, col[x] = z;\n        }\n    }\n    for(int i = 1; i <= k; ++i) {\n        if(!unc[i]) continue;\n        update(1, 1, Q, ti[i], Q, (Ope){st[i], ed[i], col[i]});\n    }\n    solve(1, 1, Q);\n    for(int i = 1; i <= Q; ++i) {\n        int cur = MT;\n        while(Ansn[i][cur] == 0 && cur) cur--;\n        for(int j = cur; ~j; --j) cout << Ansn[i][j];\n        cout << '\\n';\n    }\n    return 0;\n}\n\n/* \n    Author: _LiMLE_\n    start coding at: 15:08\n    finish debugging at: 15:50\n*/\n```",
        "postTime": 1682064440,
        "uid": 480934,
        "name": "_LiMLE_",
        "ccfLevel": 0,
        "title": "P3733 \u9898\u89e3"
    },
    {
        "content": "\u6ce8\u610f\u9898\u610f\uff0c\u5b83\u539f\u5148\u5c31\u6709\u4e00\u4e2a\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u540e\u6765\u9644\u52a0\u4e86\u4e00\u4e9b\u8fb9\u3002\n\n\u7531\u4e8e\u5b83\u662f\u65e0\u5411\u56fe\uff0c\u4e14\u6bcf\u6761\u8fb9\u53ef\u4ee5\u8d70\u591a\u6b21\uff0c\u6240\u4ee5\u4ed6\u7684\u6700\u5927\u6743\u503c\u73af\u7684\u6743\u503c\u5c31\u662f\u56fe\u4e2d\u4efb\u9009\u4e00\u4e9b\u73af\u6743\u503c\u5f02\u6216\u8d77\u6765\u7684\u6700\u5927\u503c\uff0c\u8fd9\u5e94\u8be5\u5f88\u597d\u7406\u89e3\uff0c\u56e0\u4e3a\u8003\u8651\u8d70\u5230\u4e00\u4e2a\u73af\u548c\u8d70\u56de\u53bb\uff0c\u6765\u548c\u53bb\u7684\u8def\u5f84\u6743\u503c\u5f02\u6216\u8d77\u6765\u4e3a\u96f6\uff0c\u6ca1\u6709\u5f71\u54cd\uff0c\u6240\u4ee5\u5982\u679c\u5f53\u524d\u5f02\u6216\u4e00\u4e2a\u56fe\u4e2d\u7684\u73af\u6743\u503c\u53ef\u4ee5\u66f4\u5927\u7684\u8bdd\uff0c\u90a3\u4e48\u8d70\u4e00\u904d\u8fd9\u4e2a\u73af\u540e\u80af\u5b9a\u662f\u66f4\u4f18\u7684\uff08\u4f46\u662f\u5e76\u4e0d\u4ee3\u8868\u8fd9\u9898\u662f\u8d2a\u5fc3\uff0c\u542c\u6211\u8bb2\uff09\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u7ebf\u6027\u57fa\u3002\n\n\u628a\u73af\u7684\u6743\u503c\u90fd\u653e\u8fdb\u7ebf\u6027\u57fa\u91cc\uff0c\u6700\u540e\u7b97\u51fa\u7b54\u6848\u3002\n\n\u6ce8\u610f\uff0c\u5e76\u4e0d\u662f\u8981\u628a\u6240\u6709\u53ef\u4ee5\u5f62\u6210\u7684\u73af\u90fd\u653e\u8fdb\u53bb\uff0c\u7531\u4e8e\u7ebf\u6027\u57fa\u7684\u6027\u8d28\uff0c\u53ea\u9700\u8981\u4fdd\u8bc1\u653e\u8fdb\u53bb\u7684\u6240\u6709\u73af\u7ec4\u6210\u7684\u5b50\u56fe\u5185\u5305\u542b\u4e86\u539f\u56fe\u7684\u6240\u6709\u73af\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u8fd9\u4e48\u4e00\u5f20\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/thdu9n2v.png)\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u653e\u5165\u201c$A-B-C-D$\u201d\u3001\u201c$A-B-D$\u201d\u3001\u201c$B-C-D$\u201d\u4e09\u4e2a\u73af\u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u3002\n\n\u7531\u4e8e\u5b83\u653e\u5165\u7684\u8fb9\u8981\u6539\u6743\u503c\uff0c\u5e76\u4e14\u8981\u5220\u8fb9\uff0c\u7ebf\u6027\u57fa\u4e0d\u652f\u6301\u5220\u8fb9\uff0c\u6240\u4ee5\uff08\u89c2\u5bdf\u6570\u636e\u53d1\u73b0\uff09\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u5220\u8fb9\u3001\u6539\u6743\u503c\u5168\u90fd\u53d8\u6210\u52a0\u8fb9\u64cd\u4f5c\uff0c\u53ea\u662f\u591a\u4e86\u4e2a2\u7684\u5e38\u6570~~\u5427\uff1f~~\n\n\u8981\u7ef4\u62a4\u6bcf\u6b21\u52a0\u8fb9\u540e\u589e\u52a0\u7684\u73af\uff0c\u770b\u4f3c\u6709\u70b9\u9ebb\u70e6\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\u6bcf\u52a0\u4e00\u6b21\u8fb9\u6700\u591a\u53ea\u4f1a\u5728\u7ebf\u6027\u57fa\u91cc\u591a\u52a0\u4e00\u4e2a\u73af\uff0c\u800c\u4e14\u7531\u4e8e\u539f\u672c\u5c31\u662f\u4e00\u4e2a\u8fde\u901a\u56fe\uff0c\u6240\u4ee5\u53ef\u4ee5\u968f\u4fbf\u5efa\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u7136\u540e\u628a\u591a\u4f59\u7684\u8fb9\uff08\u6bcf\u6761\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u73af\uff01\uff09\u8ba1\u7b97\u5bf9\u5e94\u7684\u73af\u2014\u2014\u5373\u4e24\u7aef\u70b9\u8fde\u5411lca\u7684\u73af\u7684\u6743\u503c\u63d2\u5165\u7ebf\u6027\u57fa\uff0cAdd\u64cd\u4f5c\u52a0\u7684\u8fb9\u4e5f\u662f\u4e00\u4e2a\u9053\u7406\u3002\n\n\u6700\u540e\u7531\u4e8e\u5b83\u7684\u4e8c\u8fdb\u5236\u6570\u6709$10004$\u4f4d\uff0c\u6211\u4eec\u5fc5\u987b\u7528$bitset$\u6765\u6253\u7ebf\u6027\u57fa\uff0c\u5176\u4e2d\u9700\u8981\u4e00\u4e9b\u5361\u7a7a\u95f4\u7684\u6280\u5de7\u3002\n\nWARNING\uff1a\u8981\u7279\u5224P=0\u7684\u60c5\u51b5\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<algorithm>\n#include<map>\n#include<cmath>\n#include<bitset>\n#include<iostream>\n#define MAXN 7005\n#define LL long long\n#define ULL unsigned LL\n#define rg register\n#define lowbit(x) (-(x) & (x))\n#define ENDL putchar('\\n')\n#define DB double\n#define bs bitset<1005>\nusing namespace std;\ninline int read() {\n\tint f = 1,x = 0;\n\tchar s = getchar();\n\twhile(s < '0' || s > '9') {\n\t\tif(s == '-') f = -1;\n\t\ts = getchar();\n\t}\n\twhile(s >= '0' && s <= '9') {\n\t\tx = x * 10 - '0' + s;\n\t\ts = getchar();\n\t}\n\treturn x * f;\n}\nstruct it {\n\tint v,id;\n\tit() {\n\t\tid = v = 0;\n\t}\n\tit(int V,int I) {\n\t\tv = V;\n\t\tid = I;\n\t}\n};\nint n,m,i,j,s,o,k;\nbs w0[MAXN],w[MAXN],sum[MAXN];\nint u[MAXN],v[MAXN],tm[MAXN];\nvector<it> g[MAXN];\nint f[MAXN],d[MAXN],fe[MAXN];\nbool vis[MAXN];\nbs ans[MAXN],lc[MAXN];\ninline int highbit(bs x) {\n\tint l = 0,r = 1000,mid;\n\twhile(l^r) {\n\t\tmid = (l + r) >> 1;\n\t\tif((x>>(mid+1)).none()) r=mid;\n\t\telse l=mid+1;\n\t}\n\treturn l;\n}\ninline void Cout(bs x) {\n\tint le = highbit(x);\n\tfor(int i = le; i >= 0; i --) {\n\t\tputchar(x.test(i) ? '1':'0');\n\t}\n\treturn ;\n}\nstruct XXJ {\n\tbs F[1202];\n\tint cnt;\n\tXXJ() {\n\t\tcnt = 0;\n\t}\n\tinline void ins(bs x) {\n\t\twhile(x.any()) {\n\t\t\tint j = highbit(x);\n\t\t\tif(F[j].none()) {\n\t\t\t\tF[j] = x;\n\t\t\t\tcnt ++;\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tx ^= F[j];\n\t\t}\n\t}\n} xxj[35];\nvector<bs> tre[MAXN<<2];\ninline void addtree(int a,int l,int r,int al,int ar,bs y) {\n\tif(al > r || ar < l) return ;\n\tif(al >= l && ar <= r) {\n\t\ttre[a].push_back(y);\n\t\treturn ;\n\t}\n\tint mid = al + ar >> 1;\n\taddtree(a<<1,l,r,al,mid,y);\n\taddtree(a<<1|1,l,r,mid+1,ar,y);\n\treturn ;\n}\ninline void pushdown(int a,int al,int ar,int id) {\n\tfor(int i = 0; i < tre[a].size(); i ++) {\n\t\txxj[id].ins(tre[a][i]);\n\t}\n\tif(al == ar) {\n\t\tbs as;\n\t\tfor(int i = 1000; i >= 0; i --) {\n\t\t\tif(xxj[id].F[i].any() && !as.test(i)) {\n\t\t\t\tas = as ^ xxj[id].F[i];\n\t\t\t}\n\t\t}\n\t\tans[al] = as;\n\t\treturn ;\n\t}\n\txxj[id+1] = xxj[id];\n\tint mid = al + ar >> 1;\n\tpushdown(a<<1,al,mid,id+1);\n\txxj[id+1] = xxj[id];\n\tpushdown(a<<1|1,mid+1,ar,id+1);\n\treturn ;\n}\ninline void dfs(int x,int fa,int ie) {\n\tvis[x] = 1;\n\td[x] = d[fa] + 1;\n\tfe[x] = ie;\n\tf[x] = fa;\n\tsum[x] = sum[fa] ^ w0[ie];\n\tfor(int i = 0; i < g[x].size(); i ++) {\n\t\tif(!vis[g[x][i].v]) {\n\t\t\tdfs(g[x][i].v,x,g[x][i].id);\n\t\t} else if(g[x][i].v != fa) {\n\t\t\txxj[0].ins(sum[x] ^ w0[g[x][i].id] ^ sum[g[x][i].v]);\n\t\t}\n\t}\n}\nsigned main() {\n\tstring ss;\n\tn = read();\n\tm = read();\n\tk = read();\n\tfor(int i = 1; i <= m; i ++) {\n\t\ts = read();\n\t\to = read();\n\t\tcin>>ss;\n\t\tbs ww(ss);\n\t\tw0[i] = ww;\n\t\tg[s].push_back(it(o,i));\n\t\tg[o].push_back(it(s,i));\n\t}\n\tdfs(1,0,0);\n\tint kk = 0;\n\tfor(int i = 1; i <= k; i ++) {\n\t\tchar S[15];\n\t\tscanf(\"%s\",S + 1);\n\t\tif(S[1] == 'A') {\n\t\t\tkk ++;\n\t\t\tu[kk] = s = read();\n\t\t\tv[kk] = o = read();\n\t\t\tcin>>ss;\n\t\t\tlc[kk] = sum[s] ^ sum[o];\n\t\t\tbs ww(ss);\n\t\t\tw[kk] = ww;\n\t\t\ttm[kk] = i;\n\t\t} else if(S[2] == 'h') {\n\t\t\ts = read();\n\t\t\tcin>>ss;\n\t\t\tbs ww(ss);\n\t\t\taddtree(1,tm[s],i-1,1,k,lc[s] ^ w[s]);\n\t\t\tw[s] = ww;\n\t\t\ttm[s] = i;\n\t\t} else {\n\t\t\ts = read();\n\t\t\taddtree(1,tm[s],i-1,1,k,lc[s] ^ w[s]);\n\t\t\ttm[s] = 0;\n\t\t}\n\t}\n\tfor(int i = 1; i <= kk; i ++) {\n\t\tif(tm[i]) {\n\t\t\taddtree(1,tm[i],k,1,k,lc[i] ^ w[i]);\n\t\t\ttm[i] = 0;\n\t\t}\n\t}\n\tif(1) {\n\t\tbs as;\n\t\tfor(int i = 1000; i >= 0; i --) {\n\t\t\tif(xxj[0].F[i].any() && !as.test(i)) {\n\t\t\t\tas = as ^ xxj[0].F[i];\n\t\t\t}\n\t\t}\n\t\tCout(as);\n\t\tENDL;\n\t}\n\tif(k < 1) return 0;\n\tpushdown(1,1,k,0);\n\tfor(int i = 1; i <= k; i ++) {\n\t\tCout(ans[i]);\n\t\tENDL;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1612320256,
        "uid": 306255,
        "name": "\u65e5\u5fa1\u8353\u7ff3",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3733 \u3010[HAOI2017]\u516b\u7eb5\u516b\u6a2a\u3011"
    },
    {
        "content": "\u6700\u8fd1\u5728\u5199\u7ebf\u6027\u57fa\u7684\u9898\uff0c\u60f3\u628a\u8fd9\u9053\u809d\u51fa\u6765\n\n\u7f51\u4e0a\u8d44\u6599\u5f88\u5c11\uff0c\u627e\u4e86\u7bc7\u53ef\u8bfb\u6027\u8f83\u9ad8\u7684\uff0c\u7167\u7740\u5543\uff0c\u75db\u82e6\u4e4b\u540e\uff0c\u60f3\u53d1\u7bc7\u9898\u89e3\uff0c\u62ef\u6551\u4e0b\u50cf\u6211\u4e00\u6837\u7684\u5f31\u9e21\n\n\u524d\u7f6e\u6280\u80fd\uff1a\u7ebf\u6027\u57fa      \n\n\u8fd9\u662f\u4e00\u4e2a\u7528\u6765\u778e\u641exor\uff0c\u96c6\u5408\u7684\u5229\u5668\uff0c\u5355\u6b21\u590d\u6742\u5ea6\u4e3a\u5355\u4e2a\u5411\u91cf\u7684\u5143\u7d20\u6570\uff08xor\u64cd\u4f5c\u53ef\u4ee5\u7406\u89e3\u4e3alog\u7ea7\u522b\u7684\uff09\n\n~~\u5565\uff0c\u4f60\u4e0d\u61c2\uff1f~~     ~~sengxian\u548cmenci\u7684\u535a\u5ba2\u767e\u5ea6\u4e0b~~\n\n\u53e6\u5916\uff0c\u5e38\u88ab\u4eba\u5ffd\u89c6\u7684\u7ebf\u6027\u57fa\u7684\u4ee3\u7801\u5b9e\u8df5\uff0c\u672c\u8d28\u5176\u5b9e\u662f\u9ad8\u65af\u6d88\u5143\u6c42\u5012\u4e09\u89d2\u77e9\u9635\n\n\n**\u56de\u5f52\u672c\u9898\uff1a**\n\nQ: \u8fb9\u6709\u6743\u503c\uff0c\u6c42\u56fe\u91cc\u7684\u6700\u5927xor   \n\ndalao\uff1a\u627e\u73af\u63d2\u5165\u7ebf\u6027\u57fa\n\nQ: \u5e26\u5220\u9664\uff0c\u4fee\u6539\n\ndalao: WTF?   (PS\uff1a\u7ebf\u6027\u57fa\u4e0d\u652f\u6301\u5220\u9664)\n\njulao: \u7ebf\u6bb5\u6811\u5206\u6cbb\n\n\u5bf9\u4e86\uff0c\u8fd9\u5c31\u662f\u672c\u9898\u7cbe\u9ad3\n\n~~\u6211\u4e5f\u662f\u521a\u61c2~~ \u5c31\u662f\u4ee5\u65f6\u95f4\u4e3a\u8f74\u8fdb\u884c\u5206\u6cbb\uff0c\u5de7\u5999\u5730\u907f\u5f00\u5220\u9664\u64cd\u4f5c\uff0c\u53ea\u8fdb\u884c\u63d2\u5165\n\n\u4e0a\u4ee3\u7801\n\n\n~~\u7f51\u4e0a\u6ca1\u51e0\u7bc7\u80fd\u770b\u7684\uff0c\u6211\u4e5f\u662f\u5b66\u522b\u4eba\u7684~~\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<bitset>\n#include<queue>\n#include<vector>\n#include<algorithm>\n#define mx 1000\nusing namespace std;\ntypedef bitset<1105> bt;//1000\u4f4d\uff0c\u5e26xor,\u5fc5\u987bbitset\u554a\nbt dis[5050],Q;\nvector<bt> val[1005<<4];//val\u5b58\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6dfb\u52a0\u7684\u503c\nint n,m,q,h[5050],cnt,vis[5005],pre[1005<<4],top;//pre\u662f\u65b0\u52a0\u8fb9\u7684\u5b58\u5728\u7684\u8d77\u59cb\u65f6\u95f4\nchar s[1005<<4];\nstruct wfff{\n\tint fro,to;\n\tbt w;\n}E[1005<<4];//\u65b0\u52a0\u7684\u8fb9\nstruct wff{\n\tint to,nxt;\n\tbt w;\n}edge[1005<<4];//\u539f\u6709\u7684\u8fb9\nstruct wf{\n\tbt b[1105];\n}fir;//\u521d\u59cb\u7ebf\u6027\u57fa\nvoid add(int u,int v,bt w)\n{\n\tedge[++cnt].to=v;\n\tedge[cnt].nxt=h[u];\n\tedge[cnt].w=w;\n\th[u]=cnt;\n}\nvoid readBT(bt &x)\n{\n\tscanf(\"%s\",s);\n\tint len=strlen(s)-1;\n\tfor (int i=0;i<=len;i++)\n\t  x[i]=s[len-i]-'0';//\u8bfb\u5165bitset\u65f6\uff0c\u6389\u4e2a\u4e2a\u513f\uff0c\u56e0\u4e3a\u540e\u9762\u7ebf\u6027\u57fa\u4e00\u822c\u90fd\u6309\u6743\u503c\u7531\u9ad8\u5230\u4f4e\u679a\u4e3e\n}\nvoid charu(wf &a,bt x)//\u63d2\u5165\u7ebf\u6027\u57fa\n{\n\tif (!x.any()) return;\n\tfor (int i=mx;i>=0;i--)//mx\u662f\u6700\u9ad8\u6743\u503c\u4f4d\n\t{\n\t\tif (!x[i]) continue;\n\t\tif (!a.b[i].any())\n\t\t{\n\t\t\ta.b[i]=x;\n\t\t\tbreak;\n\t\t}\n\t\telse x^=a.b[i];//\u7ebf\u6027\u57fa\u57fa\u672c\u64cd\u4f5c\n\t}\n}\nvoid printans(wf a)//\u7edf\u8ba1\u7b54\u6848\n{\n\tint i;\n\tQ.reset();//Q\u4fdd\u5b58\u7b54\u6848\n\tfor (i=mx;i>=0;i--)\n\t  if (a.b[i].any()) break;//\u628a\u77e9\u9635\u7a7a\u884c\u53bb\u6389\n\tif (i<0)\n\t{\n\t\tprintf(\"0\\n\");//\u5168\u7a7a\u5c31\u8f93\u51fa0\n\t\treturn;\n\t}\n\tint pos=i;\n\tfor (int j=i;j>=0;j--)\n\t  if (a.b[j].any()&&!Q[j]) Q^=a.b[j];\n\tfor (int i=pos;i>=0;i--)\n\t  if (Q[i]==0) printf(\"0\");//\u57fa\u672c\u64cd\u4f5c\n\t  else printf(\"1\");\n\tprintf(\"\\n\");\n}\nvoid dfs(int u,int fa)\n{//\u521d\u59cb\u65f6\u5efa\u56fe\u8dd1\u4e00\u904d\n\tvis[u]=1;\n\tfor (int i=h[u];i;i=edge[i].nxt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif (v!=fa)\n\t\t{\n\t\t\tif (!vis[v])\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]^edge[i].w;\n\t\t\t\tdfs(v,u);\n\t\t\t}\n\t\t\telse charu(fir,dis[u]^dis[v]^edge[i].w);\n\t\t}//\u5982\u679c\u4e0b\u4e00\u4e2a\u70b9\u5df2\u88ab\u8bbf\u95ee\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u73af\uff0cxor\u4e24\u6b21\u4f1a\u6d88\uff0c\u56e0\u6b64\u63d2\u5165\u7684\u4fbf\u662f\u73af\u7684\u6743\u503c\n\t}\n}\nvoid change(int l,int r,int L,int R,bt x,int root)\n{\n\tif (l>=L&&r<=R)\n\t{\n\t\tval[root].push_back(x);//\u5728\u7ba1\u7406\u64cd\u4f5c\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u4e0a\u6807\u8bb0\uff0c\u8bb0\u5f55\u5c06\u4f1a\u8fdb\u884c\u54ea\u4e9b\u66f4\u6539\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tif (mid>=L) change(l,mid,L,R,x,root<<1);\n\tif (mid<R) change(mid+1,r,L,R,x,root<<1|1);\n}\nvoid query(int l,int r,wf x,int root)\n{\n\tfor (int i=val[root].size()-1;i>=0;i--) \n\t  charu(x,val[root][i]);//\u4e00\u80a1\u8111\u5168\u63d2\u5165\u5b8c\n\tif (l==r)\n\t{\n\t\tprintans(x);//\u5230\u4e86\u67d0\u4e00\u65f6\u523b\uff0c\u4fbf\u8f93\u51fa\u7b54\u6848\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tquery(l,mid,x,root<<1);\n\tquery(mid+1,r,x,root<<1|1);\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\tint u,v; \n\tbt w;\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tw.reset();\n\t\tscanf(\"%d%d\",&u,&v);\n\t\treadBT(w);\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\tdfs(1,0);\n\tfor (int i=1;i<=q;i++)\n\t{\n\t\tscanf(\"%s\",s);\n\t\tif (s[0]=='C')\n\t\t{\n\t\t\tscanf(\"%d\",&u);//\u7ebf\u6bb5\u6811\u7684l,r\u662f\u4e00\u6761\u8fb9\u5b58\u5728\u65f6\u95f4\u7684\u533a\u95f4\u4e86\uff08\u51fa\u751f\u5230\u6b7b\u4ea1\uff09\n\t\t\tchange(1,q,pre[u],i-1,dis[E[u].fro]^dis[E[u].to]^E[u].w,1);\n\t\t\tif (s[1]=='h')//\u540c\u7406\uff0c\u63d2\u5165\u7684\u662f\u4e00\u4e2a\u73af\u7684xor\u503c\uff08\u8fd9\u4e5f\u662f\u6211\u4eec\u4e3a\u4ec0\u4e48dfs\u6c42dis\u6570\u7ec4\u7684\u539f\u56e0\uff09\n\t\t\t{\n\t\t\t\tpre[u]=i;//\u5f00\u59cb\u5b58\u5728\u65f6\u95f4\n\t\t\t\tE[u].w.reset();\n\t\t\t\treadBT(E[u].w);\n\t\t\t}\n\t\t\telse pre[u]=0;//\u8fb9\u88ab\u64a4\u9500\u4e86\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpre[++top]=i;\n\t\t\tscanf(\"%d%d\",&E[top].fro,&E[top].to);\n\t\t\treadBT(E[top].w);\n\t\t} \n\t}\n\tfor (int i=1;i<=top;i++)//\u53ef\u80fd\u6709\u4e9b\u8fb9\u5230\u6700\u540e\u4e5f\u6ca1\u88ab\u64a4\u9500\uff0c\u6211\u4eec\u4e5f\u8981\u8fdb\u884c\u7edf\u8ba1\n\t  if (pre[i]) change(1,q,pre[i],q,dis[E[i].fro]^dis[E[i].to]^E[i].w,1);\n\tprintans(fir);//\u770b\u6e05\u9898\u610f\uff0c\u6539\u9020\u524d\u8981\u8f93\u51fa\u4e00\u6b21\n\tif (q!=0) query(1,q,fir,1);//\u8fdb\u884c\u7edf\u8ba1\uff0cfir\u4f1a\u5728\u7ebf\u6bb5\u6811\u7684\u5206\u6cbb\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u8fdb\u884c\u6539\u53d8\u4ee5\u6c42\u5f97\u7ed3\u679c\n\treturn 0;\n}\n```\n\n\u51fa\u9505\u6216\u54ea\u91cc\u4e0d\u61c2\u60a8\u8054\u7cfb\u6211 ~~\u5495\u5495\u5495~~\n\n\u8fd8\u662f\u5f88\u5f31\uff0c\u6211\u600e\u4e48\u624d\u80fd\u53d8\u5f3a\u5440",
        "postTime": 1548007359,
        "uid": 41528,
        "name": "jiuguaiwf",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3733 \u3010[HAOI2017]\u516b\u7eb5\u516b\u6a2a\u3011"
    }
]