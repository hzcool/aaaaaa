[
    {
        "content": "![](https://cdn.luogu.com.cn/upload/image_hosting/63qhwg5z.png)\n\n\u5173\u4e8e\u6811\u5256\uff0c\u5b83\u8fd8\u6d3b\u7740... ~~\u5927\u5bb6\u73c2\u4ee5\u5ffd\u7565\u90a3\u4e2a\u7fa4\u540d\u7247...~~\n\n---\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u52a8\u6001\u7ef4\u62a4\u68ee\u6797\u7684\u8fde\u901a\u72b6\u6001\uff0c\u7136\u540e\u6211\u4eec\u5c31\u77e5\u9053\u4e86\u54ea\u4e9b\u8fb9/\u4f20\u9001\u95e8\u8981\u7559\u4e0b\u3002\n\n\u7136\u540e\u8003\u8651\u600e\u4e48\u5904\u7406\u4f20\u9001\u95e8\uff1a\n\n\u9996\u5148\u975e\u5e38 naive \u7684\u60f3\u6cd5\u662f\uff1a\u76f4\u63a5\u6811\u5256\uff0c\u5256\u51fa\u6765\u4e4b\u540e\u518d\u5f3a\u4e0a\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\n\n\u597d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(m \\log^3 n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(m \\log^2 n)$\uff0c\u4f60\u4eba\u6ca1\u4e86\u3002\u3002\n\n---\n\n\u5982\u679c\u4f60\u6253\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684 ~~shit~~ \u51fa\u6765\uff0c\u53d1\u73b0\u7a7a\u95f4\u8017\u5f97\u8d3c\u5927\uff0c\u8dd1\u5230\u5929\u8352\u5730\u8001\u624d\u8dd1\u51fa\u4e00\u5768\u4e1c\u897f\u51fa\u6765\uff0c\u7136\u540e\u53c8\u4e0d\u60f3\u5220\u6389\u5b83\uff0c\u4f60\u5c31\u53ef\u4ee5\u60f3\u4e00\u60f3\u600e\u4e48\u4f18\u5316\u5b83\uff1a\n\n\u4f60\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4ece\u4e00\u6761\u5256\u51fa\u6765\u7684\u94fe \u4e2d\u95f4\u7684\u70b9 \u5230 \u94fe\u9876 \u7684\u4e00\u6bb5\u533a\u95f4 \u8fde\u8fb9\u7684\u6bb5\u6570\u5b9e\u9645\u4e0a\u662f $O(m \\log n)$ \u7ea7\u522b\u7684\u3002\u5982\u679c\u8fd9\u91cc\u8fde\u7684\u8fb9\u6570\u4e0d\u662f\u7ebf\u6bb5\u6811\u4f18\u5316\u7684 $O(\\log n)$ \u800c\u662f $O(1)$ \u7684\u8bdd\uff0c\u4f60\u5c31\u8d62\u4e86~~\u5f15\u7528\u4e00\u4e0b\u795e\u4ed9zzq\u7684\u540d\u8a00~~\u3002\n\n\u90a3\u4e48\u600e\u4e48\u641e\u5462\uff1f\n\n\u6211\u4eec\u77e5\u9053\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u5982\u679c\u6211\u4eec\u53ea\u8981\u6c42\u8fd9\u4e2a\u5e8f\u5217\u7684**\u524d\u7f00**\u4fe1\u606f **\u4e14\u4e0d\u7528\u4fee\u6539** \uff0c\u5b8c\u5168\u53ef\u4ee5\u4e0d\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u800c\u662f\u53ef\u4ee5\u76f4\u63a5\u6c42\u524d\u7f00\u548c\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u7ebf\u6bb5\u6811\u7684 $O(\\log n)$ \u7ea7\u522b\u7684\u4fe1\u606f\u7ef4\u62a4\u8f6c\u5316\u4e3a\u4e86 $O(1)$\u3002\n\n\u6240\u4ee5\u8fd9\u6837\u53ef\u80fd\u4f60\u5c31\u660e\u767d\u4e86\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u5f00\u4e24\u4e2a\u865a\u70b9\uff0c\u4e00\u4e2a\u8868\u793a\u8fde\u51fa\u53bb\u7684\uff0c\u4e00\u4e2a\u8868\u793a\u8fde\u8fdb\u6765\u7684\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u8fde\u8fdb\u6765\u7684\uff0c\u6211\u4eec\u628a\u4e00\u6761\u91cd\u94fe\u4e0a\u7684\u6240\u6709\u8fd9\u6837\u7684\u865a\u8fb9\u7531\u6df1\u5ea6\u5927\u7684\u8fde\u5411\u6df1\u5ea6\u5c0f\u7684\uff0c\u7136\u540e\u4e32\u6210\u4e00\u6761\u94fe\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fde\u5411\u4e00\u4e2a\u70b9\u7684\u865a\u70b9\u6765\u5b9e\u73b0\u8fde\u5411\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u7684\u5b9e\u70b9\u4e00\u76f4\u5230\u94fe\u9876\u7684\u8fd9\u6837\u4e00\u6761\u94fe\u3002\n\n\u5bf9\u4e8e\u8fde\u51fa\u53bb\u7684\u540c\u7406\uff0c\u65b9\u5411\u53cd\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\u753b\u6210\u4e00\u5f20\u56fe\u5927\u6982\u5c31\u957f\u8fd9\u6837\u4e86\uff1a(1-2-3\u7684\u4e00\u6761\u94fe\uff0c\u5de6\u8fb9\u662f\u8fde\u8fdb\u6765\u7684\uff0c\u53f3\u8fb9\u662f\u8fde\u51fa\u53bb\u7684)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/x0pcx2lf.png)\n\n\u7136\u540e\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0 $O(m \\log n)$ \u6761\u8fb9\u4e86\u3002\n\n\u5565\uff1f\u4f60\u8bf4\u6700\u540e\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u4e2a\u91cd\u94fe\u4e0a\u7684\u65f6\u5019\u600e\u4e48\u529e\uff1f\uff1f\n\n\u4f60\u4e4b\u524d\u5199\u7684\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u5c31\u53ef\u4ee5\u7528\u4e0a\u4e86\u3002\u3002\n\n\u53cd\u6b63\u8fde\u4e0a\u53bb\u4e5f\u662f $O(m \\log n)$ \u7ea7\u522b\u7684\u8fb9\u6570\u3002\n\n\u7136\u540e\u914d\u4e0a\u4e00\u4e2a ${\\rm Dijsktra}$\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u662f $O(m \\log^2 n)$ \u4e86\u3002\n\n\u4ee3\u7801\u592a\u957f\u4e86\uff0c\u8fd9\u91cc\u5c31\u7ed9\u4e2a\u526a\u8d34\u677f\u7684[\u94fe\u63a5](https://www.luogu.org/paste/vo6jk8sn)",
        "postTime": 1571142531,
        "uid": 20782,
        "name": "CYJian",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5344 \u3010\u3010XR-1\u3011\u901b\u68ee\u6797\u3011"
    },
    {
        "content": "[\u4e5f\u597d\u4e0d\u4e86\u591a\u5c11\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/whale-at-cola/p/solution-p5344.html)\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/solution/P5344)\n\n\u672c\u9898\u89e3\u4e3b\u8981\u9762\u5411\u500d\u589e\u4f18\u5316\u5efa\u56fe\u7684\u521d\u5b66\u8005\uff0c\u7c7b\u4f3c\u4e8e\u6211\u4e2a\u4eba\u500d\u589e\u4f18\u5316\u5efa\u56fe\u7684\u5b66\u4e60\u7b14\u8bb0\u3002\n\n\u524d\u7f6e\u829d\u58eb\uff1aDijkstra \uff0c\u6811\u4e0a\u500d\u589e\u3002\n\n## \u601d\u8def\n\n\u660e\u663e\u5148\u79bb\u7ebf\u628a\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u7684\u6811\u5efa\u597d\u4ee5\u540e\u518d\u628a\u7b26\u5408\u6761\u4ef6\u7684\u7b2c\u4e00\u7c7b\u64cd\u4f5c\u52a0\u4e0a\u4f1a\u66f4\u65b9\u4fbf\u3002\n\n\u5177\u4f53\u5c31\u662f\u5148\u628a\u8bfb\u5165\u64cd\u4f5c\uff0c\u7136\u540e\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e0b\u8fde\u901a\u6027\u5224\u65ad\u8fd9\u4e2a\u64cd\u4f5c\u662f\u5426\u5408\u6cd5\uff0c\u628a\u5408\u6cd5\u7684 2 \u64cd\u4f5c\u76f4\u63a5\u52a0\u8fb9\uff0c\u5408\u6cd5\u7684 1 \u64cd\u4f5c\u5b58\u8d77\u6765\u3002\n\n\u7136\u540e\u5904\u7406\u500d\u589e\u6570\u7ec4\uff0c\u5c06\u5408\u6cd5\u7684 1 \u64cd\u4f5c\u7528\u500d\u589e\u4f18\u5316\u5efa\u56fe\u52a0\u8fb9\u3002\n\n\u6240\u4ee5\u8fd9\u9898\u5927\u6982\u53ef\u4ee5\u5f53\u4e2a\u500d\u589e\u4f18\u5316\u5efa\u56fe\u677f\u5b50\uff08\u4e3a\u4ec0\u4e48\u8fd9\u4e1c\u897f\u4f1a\u6709\u677f\u5b50\u554a\uff09\u3002\n\n### \u500d\u589e\u4f18\u5316\u5efa\u56fe\u677f\u5b50\n\n\u8003\u8651\u5bf9\u4e8e\u4e00\u6761\u94fe\u7684\u4e24\u4e2a\u7aef\u70b9\u6c42 LCA \u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u53ef\u4ee5\u628a\u8df3\u4e00\u6b21\u500d\u589e\u6570\u7ec4\u6240\u8d8a\u8fc7\u7684\u8282\u70b9\u5f53\u505a\u5355\u72ec\u4e00\u4e2a\u70b9\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u70b9\u8fde\u8fb9\u800c\u4e0d\u9700\u8981\u6bcf\u4e2a\u70b9\u90fd\u8d70\u4e00\u6b21\u4e86\u3002\n\n\u57fa\u4e8e\u8fd9\u4e2a\u601d\u8def\uff0c\u53ef\u4ee5\u5bf9\u4e8e\u500d\u589e\u6240\u4f7f\u7528\u7684 $f$ \u6570\u7ec4\u5f00\u4e24\u4e2a\u865a\u8282\u70b9\uff0c\u79f0\u4f5c $in$ \u548c $out$ \uff0c$in$ \u6765\u5b58\u5165\u8fb9\uff0c$out$ \u6765\u5b58\u51fa\u8fb9\uff0c\u7136\u540e\u5c06\u500d\u589e\u4e2d\u4e0b\u4e00\u7ea7\u7684 $out$ \u5411\u672c\u7ea7\u7684 $out$ \u8fde\u8fb9\uff0c\u672c\u7ea7\u7684 $in$ \u5411\u4e0b\u7ea7\u7684 $in$ \u8fde\u8fb9\u3002\n\n\u6b64\u5904\u5efa\u8bae\u770b\u56fe\u7406\u89e3\uff0c$x0$ \u81f3 $x4$ \u4e3a\u6811\u4e0a\u7684\u67d0\u6761\u94fe\uff0c\u9ed1\u8fb9\u4e3a\u6811\u8fb9\uff0c\u7ea2\u8fb9\u4e3a\u500d\u589e\u7684\u6570\u7ec4\uff0c\u9644\u52a0\u4e86 $in$\u3001$out$ \u7ed3\u70b9\u53ca\u4e0b\u6807\uff0c\u7eff\u8fb9\u4e3a\u500d\u589e\u65f6\u7684\u65b0\u52a0\u8fb9\u3002\n\n\uff08\u5168\u753b\u4f1a\u5f88\u6324\uff0c\u56fe\u4e2d\u7701\u7565\u4e86\u90e8\u5206\u5185\u5bb9\uff0c\u6211\u5c3d\u529b\u753b\u4e86\uff0c\u56fe\u4e11\u52ff\u55b7\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/on6s3lwz.png)\n\n\u663e\u7136\uff0c\u8fd9\u6837\u7684\u7ed3\u70b9\u6570\u548c\u8fb9\u6570\u90fd\u662f $O(n \\log n)$ \u7684\u3002\n\n\u90a3\u4e48\u5982\u4f55\u52a0\u8fb9\u5462\uff1f1 \u64cd\u4f5c\u4e2d\uff0c\u5bf9\u4e8e\u8fb9\u7684\u51fa\u70b9\uff0c\u5373 $u1$ \u81f3 $v1$ \u8fd9\u6761\u94fe\u4e0a\u7684\u70b9\uff0c\u53ef\u4ee5\u5728\u6c42\u4ed6\u4eec\u7684 LCA \u65f6\uff0c\u6bcf\u8df3\u4e00\u6b21\u500d\u589e\u6570\u7ec4\u5c06\u5176 $out$ \u8fd9\u4e2a\u865a\u8282\u70b9\u5411\u65b0\u5efa\u7684\u865a\u8282\u70b9\u8fde\u4e00\u6761\u6743\u4e3a $0$ \u7684\u8fb9\uff0c\u540c\u6837\u7684\uff0c\u5bf9\u4e8e\u8fb9\u7684\u5165\u70b9\uff0c\u5373 $u2$ \u81f3 $v2$ \u8fd9\u6761\u94fe\u4e0a\u7684\u70b9\uff0c\u53ef\u4ee5\u5728\u6c42\u4ed6\u4eec\u7684 LCA \u65f6\uff0c\u6bcf\u8df3\u4e00\u6b21\u500d\u589e\u6570\u7ec4\u5c06\u65b0\u5efa\u7684\u865a\u8282\u70b9\u5411\u5176 $in$ \u8fd9\u4e2a\u865a\u8282\u70b9\u8fde\u4e00\u6761\u6743\u4e3a $0$ \u7684\u8fb9\u3002\u6700\u540e\u628a\u8fd9\u4e24\u4e2a\u65b0\u5efa\u7684\u865a\u8282\u70b9\u8fde\u4e00\u6761\u5e26\u6743\u8fb9\u5c31\u597d\u4e86\u3002\n\n\u6ce8\u610f\u5982\u679c\u500d\u589e LCA \u7684\u540e\u534a\u90e8\u5206\uff08\u5373\u4e24\u4e2a\u7aef\u70b9 $x$ \u548c $y$ \u6df1\u5ea6\u76f8\u540c\u540e\u7684\u90e8\u5206\uff09\u4e00\u6b21\u4e5f\u6ca1\u8df3\u65f6\uff0c$y$ \u4f1a\u6ca1\u6709\u5411\u5916\u8fde\u8fb9\uff0c\u9700\u8981\u7279\u5224\u8fd9\u79cd\u60c5\u51b5\u5c06 $y$ \u5411\u5916\u7684\u8fde\u8fb9\u8865\u4e0a\uff0c\u4f46\u662f\u56e0\u4e3a\u672c\u9898\u662f\u6c42\u6700\u77ed\u8def\u7684\uff0c\u76f4\u63a5\u4e0d\u7279\u5224\u628a $y$ \u7684\u8fb9\u8fde\u4e0a\u4e5f\u884c\u3002\n\n\u641e\u5b8c\u5efa\u56fe\u540e\u76f4\u63a5\u8dd1\u4e00\u904d Dijkstra \u5c31\u884c\u4e86\u3002\n\n\u56e0 $m \\approx n \\log n$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u81f4\u662f  $O(n \\log^2 n)$ \u7684\u3002\n\n## code\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<vector>\nusing std::priority_queue;\nusing std::vector;\nusing std::greater;\nusing std::pair;\n#define re register\n#define pr pair<int,int>\n#define fi first\n#define se second\ninline void swp(int &x,int &y){x^=y^=x^=y;}\ninline int win(){\n\tint x=0;char c=getchar();\n\twhile(c>'9'||c<'0') c=getchar();\n\twhile(c>='0'&&c<='9') x=(x<<1)+(x<<3)+(c^48),c=getchar();\n\treturn x;\n}\n\nconst int inf=0x3f3f3f3f;\nconst int N=50050,M=1000050,NE=4000050,ME=16000050;\nint l,tot,fa[N],v[N<<1],ne[N<<1],h[N],dep[N],f[N][16],in[N][16],ou[N][16];\nint ted;\nstruct oprs{int x1,y1,x2,y2,w;}op[M];\nint cnt,hd[NE],t;\nstruct edge{int v,d,n;}e[ME];\nint dis[NE];\ninline bool cmp(int x,int y){return dis[x]<dis[y];}\nint get(int x){return fa[x]==x?x:(fa[x]=get(fa[x]));}\ninline void addtree(int x,int y){\n//\tprintf(\"addtree:%d %d\\n\",x,y);\n\tv[++tot]=y,ne[tot]=h[x],h[x]=tot;\n\tv[++tot]=x,ne[tot]=h[y],h[y]=tot;\n}\ninline void addedge(int x,int y,int w){e[++t]={y,w,hd[x]},hd[x]=t;}\nvoid dfs(int x,int fr){\n\tdep[x]=dep[f[x][0]=fr]+1;\n\tin[x][0]=++cnt,addedge(cnt,x,0),addedge(cnt,fr,0);\n\tou[x][0]=++cnt,addedge(x,cnt,0),addedge(fr,cnt,0);\n\tfor(re int j=0;j<l;j++){\n\t\tf[x][j+1]=f[f[x][j]][j];\n\t\tin[x][j+1]=++cnt,addedge(cnt,in[x][j],0),addedge(cnt,in[f[x][j]][j],0);\n\t\tou[x][j+1]=++cnt,addedge(ou[x][j],cnt,0),addedge(ou[f[x][j]][j],cnt,0);\n\t}\n\tfor(re int i=h[x];i;i=ne[i]) if(v[i]!=fr) dfs(v[i],x);\n}\ninline void lca1(int x,int y,int k){\n\tif(dep[x]<dep[y]) swp(x,y);\n\taddedge(y,k,0);\n\tfor(re int i=l;i>=0;i--) if(dep[f[x][i]]>=dep[y]) addedge(ou[x][i],k,0),x=f[x][i];\n\tif(x==y) return ;\n\tfor(re int i=l;i>=0;i--) if(f[x][i]!=f[y][i])\n\t\taddedge(ou[x][i],k,0),x=f[x][i],addedge(ou[y][i],k,0),y=f[y][i];\n\taddedge(ou[x][0],k,0);\n}\ninline void lca2(int x,int y,int k){\n\tif(dep[x]<dep[y]) swp(x,y);\n\taddedge(k,y,0);\n\tfor(re int i=l;i>=0;i--) if(dep[f[x][i]]>=dep[y]) addedge(k,in[x][i],0),x=f[x][i];\n\tif(x==y) return ;\n\tfor(re int i=l;i>=0;i--) if(f[x][i]!=f[y][i])\n\t\taddedge(k,in[x][i],0),x=f[x][i],addedge(k,in[y][i],0),y=f[y][i];\n\taddedge(k,in[x][0],0);\n}\ninline void dijkstra(int s){\n\tmemset(dis,0x3f,sizeof dis);\n\tpriority_queue<pr,vector<pr>,greater<pr> > q;\n\tdis[s]=0,q.push((pr){0,s});\n\tpr x;\n\twhile(!q.empty()){\n\t\tx=q.top(),q.pop();\n\t\tif(x.fi>dis[x.se]) continue;\n\t\tfor(re int i=hd[x.se],y;i;i=e[i].n)\n\t\t\tif(dis[y=e[i].v]>x.fi+e[i].d)\n\t\t\t\tq.push((pr){dis[y]=x.fi+e[i].d,y});\n\t}\n}\nsigned main(){\n\tint n=win(),m=win(),s=win(),kd,x1,y1,x2,y2,w;cnt=n;\n\twhile((1<<l)<=n) ++l;\n\tl--;\n//\tprintf(\"%d\\n\",l);\n\tfor(re int i=1;i<=n;i++) fa[i]=i;\n\twhile(m--){\n\t\tkd=win();\n\t\tif(kd==1){\n\t\t\tx1=win(),y1=win(),x2=win(),y2=win(),w=win();\n\t\t\tif(get(x1)!=get(y1)||get(x2)!=get(y2)) continue;\n\t\t\top[++ted]={x1,y1,x2,y2,w};\n\t\t}\n\t\telse{\n\t\t\tx1=win(),y1=win(),x2=get(x1),y2=get(y1),w=win();\n\t\t\tif(x2==y2) continue;\n\t\t\taddtree(x1,y1),addedge(x1,y1,w),addedge(y1,x1,w),fa[x2]=y2;\n\t\t}\n\t}\n\tfor(re int i=1;i<=n;i++) if(!dep[i]) dfs(i,0);\n\tfor(re int i=1;i<=ted;i++)\n\t\tlca1(op[i].x1,op[i].y1,++cnt),lca2(op[i].x2,op[i].y2,++cnt),addedge(cnt-1,cnt,op[i].w);\n\tdijkstra(s);\n\tfor(re int i=1;i<=n;i++) printf(\"%d \",dis[i]==inf?-1:dis[i]);\n\tputs(\"\");\n\treturn 0;\n}\n```\n\n\u7403\u70b9\u4e2a\u8d5e\u5427\uff0c\u87f9\u87f9\u3002",
        "postTime": 1630155791,
        "uid": 232349,
        "name": "WhaleAtCola",
        "ccfLevel": 9,
        "title": "\u3010\u9898\u89e3\u3011XR-1 \u901b\u68ee\u6797"
    },
    {
        "content": "\u4f5c\u4e3a\u51fa\u9898\u4eba\u6765\u5199\u4e00\u7bc7\u9898\u89e3\u54272333  \n\n\u8fd9\u9898\u4e00\u773c\u770b\u4e0a\u53bb\u5c31\u662f\u4e2a\u88f8\u9898 ~~\u5b9e\u9645\u4e0a\u4e5f\u662f\u5982\u6b64~~  \n\u6709\u52a8\u6001\u52a0\u8fb9\uff0c\u4e0d\u592a\u597d\u641e\u3002  \n\u6211\u4eec\u5f88\u5957\u8def\u5730\u79bb\u7ebf\u64cd\u4f5c\uff0c\u628a\u6240\u6709\u6570\u636e\u90fd\u8bfb\u8fdb\u6765\uff0c\u5efa\u597d\u6811\u518d\u5efa\u989d\u5916\u7684\u8fb9\u3002  \n\u7136\u540e\u6709\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u505a\u6cd5\uff0c\u5c31\u662f\u6811\u5256+\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe  \n\n\u7136\u800c\u51fa\u9898\u4eba\u6076\u610f\u5361\u4e86\u6811\u5256\uff0c\u5bfc\u81f4\u8fd9\u79cd\u505a\u6cd5\u4e0dMLE\u4e5f\u4f1aTLE\u3002\u3002  \n\u90a3\u6211\u4eec\u4f18\u5316\u7684\u65b9\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u5728\u6811\u4e0a\u500d\u589e\u4f18\u5316\u5efa\u56fe\u5373\u53ef\u3002   \n\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u7ea6\u662f\u4e24\u4e2a$\\log$\u7684\u3002\n\n\u6700\u540e\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u4e86qwq  \nCode:\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<queue>\n#define N 50007\n#define M 1300003\n#define ll long long\n#define reg register\n#define inf 0x3f3f3f3f\nusing namespace std;\n\nstruct edge{\n    int v,w;\n    edge(int v=0,int w=0):v(v),w(w){}\n};\n\nstruct node{\n    int id,d;\n    node(int id=0,int d=0):id(id),d(d){}\n    bool operator < (const node& nd) const{\n        return d > nd.d;\n    }\n};\n\nstruct oper{\n    int u1,v1,u2,v2,w;\n    oper(int u1=0,int v1=0,int u2=0,int v2=0,int w=0):u1(u1),v1(v1),u2(u2),v2(v2),w(w){}\n}q[M];\n\nvector<edge> adj[M<<1];\nvector<int> g[N];\nint d[M<<1],uf[N],fa[N][18],lg2[N];\nint cid[N][18],rid[N][18],dep[N];\nint n,m,s,qc,img;\n\ninline void read(int &x);\nvoid print(int x);\nvoid dijkstra();\nvoid dfs(int u,int f);\ninline int find(int x);\ninline void link(int u,int v,int w);\ninline int lca(int u,int v);\ninline void build(int u,int v,int w,int t);\ninline int kfa(int u,int k);\n\nsigned main(){\n    int op,u,v,u1,v1,u2,v2,p1,p2,w;\n    read(n),read(m),read(s);\n    for(reg int i=1;i<=n;++i) uf[i] = i;\n    for(reg int i=2;i<=n;++i) lg2[i] = lg2[i>>1]+1;\n    for(reg int i=1;i<=m;++i){\n        read(op);\n        if(op==1){\n            read(u1),read(v1),read(u2),read(v2),read(w);\n            if(find(u1)!=find(v1)||find(u2)!=find(v2)) continue;\n            q[++qc] = oper(u1,v1,u2,v2,w);\n        }else{\n            read(u),read(v),read(w);\n            if(find(u)==find(v)) continue;\n            g[u].push_back(v);\n            g[v].push_back(u);\n            link(u,v,w),link(v,u,w);\n            uf[find(u)] = find(v);\n        }\n    }\n    img = n+1;\n    for(reg int i=1;i<=n;++i){\n        if(dep[i]) continue;\n        dfs(i,0);\n    }\n    for(reg int i=1;i<=qc;++i){\n        u1 = q[i].u1,v1 = q[i].v1;\n        u2 = q[i].u2,v2 = q[i].v2;\n        w = q[i].w;\n        p1 = lca(u1,v1),p2 = lca(u2,v2);\n        ++img;\n        build(u1,p1,0,0);\n        build(v1,p1,0,0);\n        build(u2,p2,w,1);\n        build(v2,p2,w,1);\n    }\n    dijkstra();\n    for(reg int i=1;i<=n;++i){\n        if(d[i]==inf) printf(\"-1\");\n        else print(d[i]);\n        putchar(' ');\n    }\n    return 0;\n}\n\ninline void build(int u,int v,int w,int t){\n    reg int j = 0,u2,v2;\n    for(;(2<<j)<=dep[u]-dep[v]+1;++j);\n    u2 = kfa(u,dep[u]-dep[v]+1-(1<<j));\n    if(t) v2 = rid[u][j];\n    else v2 = cid[u][j];\n    link(t?img:v2,t?v2:img,w);\n    if(t) v2 = rid[u2][j];\n    else v2 = cid[u2][j];\n    link(t?img:v2,t?v2:img,w);\n}\n\ninline int kfa(int u,int k){\n    reg int j = 0;\n    while(k){\n        if(k&1) u = fa[u][j];    \n        k >>= 1;\n        ++j;\n    }\n    return u;\n}\n\ninline int lca(int u,int v){\n    if(dep[u]<dep[v]) swap(u,v);\n    u = kfa(u,dep[u]-dep[v]);\n    if(u==v) return u;\n    for(int k=lg2[dep[u]];~k;--k){\n        if(fa[u][k]==fa[v][k]) continue;\n        u = fa[u][k],v = fa[v][k];\n    }        \n    return fa[u][0];\n}\n\nvoid dfs(int u,int f){\n    fa[u][0] = f;\n    cid[u][0] = rid[u][0] = u;\n    dep[u] = dep[f]+1;\n    for(reg int i=1;(1<<i)<dep[u];++i)\n        fa[u][i] = fa[fa[u][i-1]][i-1];\n    for(reg int i=1;(1<<i)<=dep[u];++i){\n        cid[u][i] = ++img;\n        rid[u][i] = ++img;\n        link(cid[u][i-1],cid[u][i],0);\n        link(rid[u][i],rid[u][i-1],0);\n        link(cid[fa[u][i-1]][i-1],cid[u][i],0);\n        link(rid[u][i],rid[fa[u][i-1]][i-1],0);\n    }        \n    int v,l = g[u].size();\n    for(int i=0;i<l;++i){\n        v = g[u][i];\n        if(v==f) continue;\n        dfs(v,u);\n    }\n}\n\ninline void link(int u,int v,int w){\n    adj[u].push_back(edge(v,w));\n}\n\ninline int find(int x){\n    while(x^uf[x]) x = uf[x] = uf[uf[x]];\n    return x;\n}\n\nvoid dijkstra(){\n    memset(d,inf,sizeof(d));\n    priority_queue<node> q;\n    d[s] = 0;\n    q.push(node(s,0));\n    reg int u,v,w,du,l;\n    while(!q.empty()){\n        u = q.top().id;\n        du = q.top().d;\n        q.pop();\n        if(du>d[u]) continue;\n        l = adj[u].size();\n        for(reg int i=0;i<l;++i){\n            v = adj[u][i].v;\n            w = adj[u][i].w;\n            if(du+w>=d[v]) continue;\n            d[v] = du+w;\n            q.push(node(v,d[v]));\n        }\n    }\n}\n\ninline void read(int &x){\n    x = 0;\n    char c = getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0'&&c<='9'){\n        x = (x<<3)+(x<<1)+(c^48);\n        c = getchar();\n    }\n}\n\nvoid print(int x){\n    if(x>9) print(x/10);\n    putchar(x%10+'0');\n}\n```\n\nupdated on 2019.05.06\uff1a  \n\u51fa\u9898\u4eba\u592a\u83dc\uff0c\u4e0d\u5c0f\u5fc3\u649e\u4e86[BZOJ\u539f\u9898](http://darkbzoj.tk/problem/4699)\u3002  \n\u800c\u4e14std\u4e5f\u88ab$\\Theta((n+m)\\log n)$\u7684\u89e3\u6cd5\u540a\u6253\u4e86\u3002\u3002  \n\u5173\u4e8e\u4e00\u4e2alog\u7684\u6b63\u89e3\uff0c\u53ef\u4ee5\u53c2\u8003[\u8fd9\u7bc7blog](https://www.cnblogs.com/clrs97/p/5870459.html)  \n\nps\uff1a\u4e0d\u8fc7\u500d\u589e\u7684\u5e38\u6570\u4f3c\u4e4e\u8981\u5c0f\u4e0d\u5c11\uff1f\n",
        "postTime": 1556972114,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5344 \u3010\u3010XR-1\u3011\u901b\u68ee\u6797\u3011"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P5344)\n\n\u5f88\u663e\u7136\uff0c\u8fd9\u662f\u4e00\u9053\u6bd2\u7624\u9898\u3002\n\n\u770b\u4e0a\u53bb\u50cf\u4e00\u4e2a\u52a8\u6001\u94fe\u5256\u5206\u7136\u540e\u7528\u4e00\u4e9b\u5947\u602a\u7684\u4f18\u5316\u5efa\u56fe\u6700\u540e\u5728\u8dd1\u4e00\u904d\u6700\u77ed\u8def~~\u5173\u4e8espfa\uff0c\u5979\u6b7b\u4e86~~\uff0c\u7136\u800c\u8fd9\u79cd\u4e1c\u897f\u6839\u672c\u6ca1\u6cd5\u7ef4\u62a4\u2026\u2026\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u8be2\u95ee\u53ea\u6709\u4e00\u6b21\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u79bb\u7ebf\u5904\u7406\u3002\u5148\u5904\u7406\u5b8c2\u64cd\u4f5c\uff08\u4e5f\u5c31\u662f\u4e00\u4e2a\u751f\u6210\u6811\uff09\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u6811\u7684\u5f62\u6001\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5728\u5904\u7406\u751f\u6210\u6811\u7684\u65f6\u5019\u540c\u65f6\u5224\u65ad\u54ea\u4e9b1\u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002\n\n\u56e0\u4e3a\u6811\u7684\u5f62\u6001\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6811\u5256+\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u3002[\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u677f\u5b50\u9898qwq](https://www.luogu.org/problemnew/show/CF786B)\n\n\u6ce8\u610f\u56fe\u6709\u53ef\u80fd\u4e0d\u8fde\u901a\uff0c\u6211\u4eec\u8981\u5bf9\u6bcf\u68f5\u6811\u90fd\u5256\u4e00\u904d\uff08\u7136\u800c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5171\u7528\u4e00\u4e2adfs\u5e8f\uff0c\u7136\u540e\u53ea\u9700\u8981\u4e00\u4e2a\u5927\u7ebf\u6bb5\u6811\uff09\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u662f$O(m\\log^3n)$\u7684\uff0c\u4f1a`TLE/MLE`\u6700\u540e2\u4e2a\u70b9\u3002~~\u5173\u952e\u662f\u8fd9\u79cd\u505a\u6cd5\u5341\u5206\u96be\u5199\uff0c\u6211\u8bd5\u7740\u5199\u4e86\u4e00\u4e0b\u5927\u6982\u67095kb~~\n\n\u5148\u653e\u4e00\u4e0b\u6811\u5256\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u5f9750\u5206\u3002\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n#define maxn 50005\n#define maxm 1000005\n#define Inf 0x3f3f3f3f\ninline int read() {\n    int d=0;char ch=getchar();while(!isdigit(ch))ch=getchar();\n    while(isdigit(ch)){d=d*10+ch-48,ch=getchar();}return d;\n}\nint totedge;\nint n, m, s;\nstruct query {\n    int op;\n    int u1, v1, u2, v2;\n    int w;\n}e[maxm];\n\nnamespace ufs { // \u5e76\u67e5\u96c6\n    int f[maxn];\n    inline void init() {for(int i = 1; i <= n; ++i) f[i] = i;}\n    int getf(int x) {return x == f[x] ? x : f[x] = getf(f[x]);}\n    bool merge(int x, int y) {\n        x = getf(x), y = getf(y); if(x == y) return false;\n        f[x] = y; return true;\n    }\n}\n\nnamespace seg { // \u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe + \u6700\u77ed\u8def\n#define segin(x) (x)\n#define segout(x) ((x)+(n<<2))\n\n    int head[maxn*31], ver[maxm*38], edge[maxm*38], nxt[maxm*38], tot;\n    int epos[maxn*31];\n    \n    inline void add(int u, int v, int w) {++totedge;\n        ver[++tot] = v, edge[tot] = w, nxt[tot] = head[u], head[u] = tot;\n    }\n    \n    void build(int x, int l, int r) {\n        add(segin(x), segout(x), 0);\n        if(l == r)  {epos[l] = x; return;}\n        int mid = (l+r)>>1;\n        add(segin(x), segin(x<<1), 0), add(segin(x), segin(x<<1|1), 0);\n        add(segout(x<<1), segout(x), 0), add(segout(x<<1|1), segout(x), 0);\n        build(x<<1, l, mid), build(x<<1|1, mid+1, r);\n    }\n    \n    void modifyin(int x, int l, int r, int tl, int tr, int pos, int w) {\n        if(l >= tl && r <= tr) return add(pos, segin(x), w);\n        int mid = (l+r)>>1;\n        if(mid >= tl) modifyin(x<<1, l, mid, tl, tr, pos, w);\n        if(mid < tr) modifyin(x<<1|1, mid+1, r, tl, tr, pos, w);\n    }\n    \n    void modifyout(int x, int l, int r, int tl, int tr, int pos, int w) {\n        if(l >= tl && r <= tr) return add(segout(x), pos, w);\n        int mid = (l+r)>>1;\n        if(mid >= tl) modifyout(x<<1, l, mid, tl, tr, pos, w);\n        if(mid < tr) modifyout(x<<1|1, mid+1, r, tl, tr, pos, w);\n    }\n    \n    void connect(int x, int y, int w) {\n        add(segout(epos[x]), segin(epos[y]), w);\n        add(segout(epos[y]), segin(epos[x]), w);\n    }\n    \n    int dist[maxn*31], vis[maxn*31];\n    std::priority_queue< std::pair<int, int> > q;\n    \n    void dij(int sta) {\n        memset(dist, 0x3f, sizeof(dist)), memset(vis, 0, sizeof(vis));\n        dist[sta] = 0, q.push(std::make_pair(0, sta));\n        while(!q.empty()) {\n            int u = q.top().second; q.pop();\n            if(vis[u]) continue;\n            vis[u] = 1;\n            for(int p = head[u]; p; p = nxt[p]) {\n                int v = ver[p];\n                if(dist[v] > dist[u]+edge[p]) {\n                    dist[v] = dist[u]+edge[p];\n                    q.push(std::make_pair(-dist[v], v));\n                }\n            }\n        }\n    }\n}\n\nnamespace gra { // \u539f\u56fe\uff08\u4e00\u4e2a\u68ee\u6797\uff09\n    int head[maxn], ver[maxn<<1], edge[maxn<<1], nxt[maxn<<1], tot;\n    \n    inline void add(int u, int v, int w) {\n        ver[++tot] = v, edge[tot] = w, nxt[tot] = head[u], head[u] = tot;\n        ver[++tot] = u, edge[tot] = w, nxt[tot] = head[v], head[v] = tot;\n    }\n    \n    int fa[maxn], dep[maxn], sz[maxn], wson[maxn];\n    int dfn[maxn], lfs[maxn], top[maxn], cnt;\n    \n    void dfs1(int u, int lst) {\n        fa[u] = lst, dep[u] = dep[lst]+1, sz[u] = 1, wson[u] = 0;\n        for(int p = head[u]; p; p = nxt[p]) {\n            int v = ver[p];\n            if(v != lst) {\n                dfs1(v, u);\n                sz[u] += sz[v];\n                if(sz[wson[u]] < sz[v])\n                    wson[u] = v;\n            }\n        }\n    }\n    \n    void dfs2(int u, int lst) {\n        dfn[u] = ++cnt; lfs[cnt] = u; top[u] = lst;\n        if(!wson[u]) return;\n        dfs2(wson[u], lst);\n        for(int p = head[u]; p; p = nxt[p]) {\n            int v = ver[p];\n            if(v != fa[u] && v != wson[u])\n                dfs2(v, v);\n        }\n    }\n    \n    void pathin(int x, int y, int pos, int w) {\n        while(top[x] != top[y]) {\n            if(dep[top[x]] < dep[top[y]]) std::swap(x, y);\n            seg::modifyin(1, 1, n, dfn[top[x]], dfn[x], pos, w);\n            x = fa[top[x]];\n        }\n        if(dep[x] > dep[y]) std::swap(x, y);\n        seg::modifyin(1, 1, n, dfn[x], dfn[y], pos, w);\n    }\n    \n    void pathout(int x, int y, int pos, int w) {\n        while(top[x] != top[y]) {\n            if(dep[top[x]] < dep[top[y]]) std::swap(x, y);\n            seg::modifyout(1, 1, n, dfn[top[x]], dfn[x], pos, w);\n            x = fa[top[x]];\n        }\n        if(dep[x] > dep[y]) std::swap(x, y);\n        seg::modifyout(1, 1, n, dfn[x], dfn[y], pos, w);\n    }\n}\n\nint main() {\n    n = read(), m = read(), s = read();\n    for(int i = 1; i <= m; ++i) {\n        e[i].op = read();\n        if(e[i].op == 1) e[i].u1 = read(), e[i].v1 = read(), e[i].u2 = read(), e[i].v2 = read();\n        else e[i].u1 = read(), e[i].v1 = read();\n        e[i].w = read();\n    }\n    ufs::init();\n    for(int i = 1; i <= m; ++i)\n        if(e[i].op == 2)\n            if(ufs::merge(e[i].u1, e[i].v1))\n                gra::add(e[i].u1, e[i].v1, e[i].w);\n    for(int i = 1; i <= n; ++i)\n        if(!gra::dfn[i])\n            gra::dfs1(i, 0), gra::dfs2(i, i);\n    seg::build(1, 1, n);\n    ufs::init();\n    for(int i = 1; i <= m; ++i) {\n        if(e[i].op == 1) {\n            int x = ufs::getf(e[i].u1), y = ufs::getf(e[i].v1);\n            if(x != y) continue;\n            x = ufs::getf(e[i].u2), y = ufs::getf(e[i].v2);\n            if(x != y) continue;\n            gra::pathout(e[i].u1, e[i].v1, (n<<3)+i, e[i].w);\n            gra::pathin(e[i].u2, e[i].v2, (n<<3)+i, 0);\n        }\n        else if(ufs::merge(e[i].u1, e[i].v1)) {\n            seg::connect(gra::dfn[e[i].u1], gra::dfn[e[i].v1], e[i].w);\n        }\n    }\n    seg::dij(seg::epos[gra::dfn[s]]);\n    for(int i = 1; i <= n; ++i)\n        printf(\"%d \", seg::dist[seg::epos[gra::dfn[i]]] < Inf ? seg::dist[seg::epos[gra::dfn[i]]] : -1);\n    return 0;\n}\n```\n\n\u7136\u540e\u6211\u4eec\u8fd8\u53ef\u4ee5\u500d\u589e\u4f18\u5316\u5efa\u56fe\uff0c\u601d\u8def\u662f\u5bf9\u4e8e\u500d\u589e\u7684\u6bcf\u4e2a\u70b9\u90fd\u5f00\u4e00\u4e2a\u65b0\u70b9\u3002\n\n\u8bbe$f[i][j]$\u8868\u793a$i$\u7684$2^j$\u7ea7\u7956\u5148\uff0c$g[i][j]$\u8868\u793a\u65b0\u5f00\u7684\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u70b9\u8868\u793a\u7684\u662f\u4ece$i$\u5230$i$\u7684$2^j-1$\u7ea7\u7956\u5148\u7684\u4e00\u6761\u94fe\u3002\u548c\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u4e00\u6837\uff0c\u6211\u4eec\u8fd8\u662f\u9700\u8981\u4e00\u4e2a\u5165\u70b9\u548c\u4e00\u4e2a\u51fa\u70b9\u3002\n\n\u5efa\u56fe\u65b9\u5f0f\u662f\uff1a\u5bf9\u4e8e\u5165\u70b9\uff0c\u7531$g[i][j]$\u5411$g[i][j-1], g[f[i][j-1]][j-1]$\u5206\u522b\u8fde\u8fb9\u3002\u5bf9\u4e8e\u51fa\u70b9\u5219\u8fb9\u53cd\u5411\u3002\u7136\u540e\u540c\u5c42\u7684\u51fa\u70b9\u8fde\u5411\u5165\u70b9\u3002\n\n\u7136\u540e\u6bcf\u6b21\u52a0\u8fb9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u500d\u589e$lca$\u7684\u540c\u65f6\uff0c\u5c06\u4f60\u9700\u8981\u8fde\u8fb9\u7684\u4ee3\u8868\u70b9\u5411\u5bf9\u5e94\u51fa\u70b9\uff08\u6216\u4ece\u5bf9\u5e94\u51fa\u70b9\u5411\u4ee3\u8868\u70b9\uff09\u8fde\u8fb9\u5373\u53ef\u3002\u6ce8\u610f\u5f53$x$\u4e3a$y$\u7684\u7956\u5148\u65f6\uff0c\u8981\u4e0e$g[x][0]$\u8fde\u8fb9\uff0c\u5426\u5219\u4e0e$g[x][1], g[y][1]$\u8fde\u8fb9\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u662f$O(m\\log^2n)$\u7684\uff0c\u5438\u53e3\u6c27\u5c31\u80fd\u8fc7\u4e86\u3002\n\n\u7ed9\u4e00\u4e0b\u4ee3\u7801\uff1a\uff08~~\u56e0\u4e3a\u8fd9\u4e2a\u662f\u76f4\u63a5\u4ece\u4e0a\u9762\u6811\u5256\u7684\u4ee3\u7801\u6539\u7684\uff0c\u6240\u4ee5\u4fdd\u7559\u4e86\u539f\u6765\u7684\u53d8\u91cf\u540d\uff0c\u8bf7\u4e0d\u8981\u5728\u610f\u8fd9\u4e9b\u7ec6\u8282~~qwq\uff09\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n#define maxn 50005\n#define maxm 1000005\n#define Inf 0x3f3f3f3f\ninline int read() {\n    int d=0;char ch=getchar();while(!isdigit(ch))ch=getchar();\n    while(isdigit(ch)){d=d*10+ch-48,ch=getchar();}return d;\n}\n\nint n, m, s;\nstruct query {\n    int op;\n    int u1, v1, u2, v2;\n    int w;\n}e[maxm];\n\nnamespace ufs {\n    int f[maxn];\n    inline void init() {for(int i = 1; i <= n; ++i) f[i] = i;}\n    int getf(int x) {return x == f[x] ? x : f[x] = getf(f[x]);}\n    bool merge(int x, int y) {\n        x = getf(x), y = getf(y); if(x == y) return false;\n        f[x] = y; return true;\n    }\n}\n\nnamespace seg {\n#define segin(x, k) (x+(n*(k)))\n#define segout(x, k) ((x+(n*(k)))+(n*17))\n\n    int head[maxn*54], ver[maxm*37], edge[maxm*37], nxt[maxm*37], tot;\n    \n    inline void add(int u, int v, int w) {\n        ver[++tot] = v, edge[tot] = w, nxt[tot] = head[u], head[u] = tot;\n    }\n    \n    void connect(int x, int y, int w) {\n        add(segout(x, 0), segin(y, 0), w);\n        add(segout(y, 0), segin(x, 0), w);\n    }\n    \n    int dist[maxn*54], vis[maxn*54];\n    std::priority_queue< std::pair<int, int> > q;\n    \n    void dij(int sta) {\n        memset(dist, 0x3f, sizeof(dist)), memset(vis, 0, sizeof(vis));\n        dist[sta] = 0, q.push(std::make_pair(0, sta));\n        while(!q.empty()) {\n            int u = q.top().second; q.pop();\n            if(vis[u]) continue;\n            vis[u] = 1;\n            for(int p = head[u]; p; p = nxt[p]) {\n                int v = ver[p];\n                if(dist[v] > dist[u]+edge[p]) {\n                    dist[v] = dist[u]+edge[p];\n                    q.push(std::make_pair(-dist[v], v));\n                }\n            }\n        }\n    }\n}\n\nnamespace gra {\n    int head[maxn], ver[maxn<<1], edge[maxn<<1], nxt[maxn<<1], tot;\n    \n    inline void add(int u, int v, int w) {\n        ver[++tot] = v, edge[tot] = w, nxt[tot] = head[u], head[u] = tot;\n        ver[++tot] = u, edge[tot] = w, nxt[tot] = head[v], head[v] = tot;\n    }\n    \n    int dep[maxn];\n    int g[maxn][17];\n    \n    void dfs(int u, int lst) {\n        dep[u] = dep[lst]+1;\n        g[u][0] = lst;\n        seg::add(segin(u, 0), segout(u, 0), 0);\n        for(int i = 1; i <= 16; ++i) {\n            g[u][i] = g[g[u][i-1]][i-1];\n            seg::add(segin(u, i), segout(u, i), 0);\n            seg::add(segin(u, i), segin(u, i-1), 0);\n            seg::add(segout(u, i-1), segout(u, i), 0);\n            seg::add(segin(u, i), segin(g[u][i-1], i-1), 0);\n            seg::add(segout(g[u][i-1], i-1), segout(u, i), 0);\n        }\n        for(int p = head[u]; p; p = nxt[p]) {\n            int v = ver[p];\n            if(v != lst) dfs(v, u);\n        }\n    }\n    \n    void pathin(int x, int y, int pos, int w) {\n        if(dep[x] < dep[y]) std::swap(x, y);\n        for(int i = 16; i >= 0; --i)\n            if(dep[g[x][i]] >= dep[y]) {\n                seg::add(pos, segin(x, i), w);\n                x = g[x][i];\n            }\n        if(x == y) {\n            seg::add(pos, segin(x, 0), w);\n            seg::add(pos, segin(y, 0), w);\n            return;\n        }\n        for(int i = 16; i >= 0; --i)\n            if(g[x][i] != g[y][i]) {\n                seg::add(pos, segin(x, i), w);\n                seg::add(pos, segin(y, i), w);\n                x = g[x][i], y = g[y][i];\n            }\n        seg::add(pos, segin(x, 1), w);\n        seg::add(pos, segin(y, 1), w);\n    }\n    \n    void pathout(int x, int y, int pos, int w) {\n        if(dep[x] < dep[y]) std::swap(x, y);\n        for(int i = 16; i >= 0; --i)\n            if(dep[g[x][i]] >= dep[y]) {\n                seg::add(segout(x, i), pos, w);\n                x = g[x][i];\n            }\n        if(x == y) {\n            seg::add(segout(x, 0), pos, w);\n            seg::add(segout(y, 0), pos, w);\n            return;\n        }\n        for(int i = 16; i >= 0; --i)\n            if(g[x][i] != g[y][i]) {\n                seg::add(segout(x, i), pos, w);\n                seg::add(segout(y, i), pos, w);\n                x = g[x][i], y = g[y][i];\n            }\n        seg::add(segout(x, 1), pos, w);\n        seg::add(segout(y, 1), pos, w);\n    }\n}\n\nint main() {\n    n = read(), m = read(), s = read();\n    for(int i = 1; i <= m; ++i) {\n        e[i].op = read();\n        if(e[i].op == 1) e[i].u1 = read(), e[i].v1 = read(), e[i].u2 = read(), e[i].v2 = read();\n        else e[i].u1 = read(), e[i].v1 = read();\n        e[i].w = read();\n    }\n    ufs::init();\n    for(int i = 1; i <= m; ++i)\n        if(e[i].op == 2)\n            if(ufs::merge(e[i].u1, e[i].v1))\n                gra::add(e[i].u1, e[i].v1, e[i].w);\n    for(int i = 1; i <= n; ++i)\n        if(!gra::dep[i])\n            gra::dfs(i, 0);\n    ufs::init();\n    for(int i = 1; i <= m; ++i) {\n        if(e[i].op == 1) {\n            int x = ufs::getf(e[i].u1), y = ufs::getf(e[i].v1);\n            if(x != y) continue;\n            x = ufs::getf(e[i].u2), y = ufs::getf(e[i].v2);\n            if(x != y) continue;\n            gra::pathout(e[i].u1, e[i].v1, n*34+i, e[i].w);\n            gra::pathin(e[i].u2, e[i].v2, n*34+i, 0);\n        }\n        else if(ufs::merge(e[i].u1, e[i].v1))\n            seg::connect(e[i].u1, e[i].v1, e[i].w);\n    }\n    seg::dij(s);\n    for(int i = 1; i <= n; ++i)\n        printf(\"%d \", seg::dist[i] < Inf ? seg::dist[i] : -1);\n    return 0;\n}\n```\n~~\u6bd4\u4e0a\u9762\u90a3\u4e2a\u597d\u5199\u591a\u4e86~~\n\n\u7136\u800c\u6211\u4eec\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u4f18\u5316\uff0c\u5373ST\u8868\u4f18\u5316\u5efa\u56fe\u3002\n\n\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0a\u9762\u7684\u500d\u589e\u6570\u7ec4\u3002\u5148\u6c42\u51fa$x, y$\u7684$lca$\uff0c\u7136\u540e\u5bf9\u4e8e\u4e24\u6761\u94fe\u5206\u522b\u8003\u8651\u3002\u5bf9\u4e8e\u6bcf\u6761\u94fe\uff0c\u8bbe\u5b83\u7684\u957f\u5ea6\u4e3a$2^k+m$\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5148\u8fde\u524d$2^k$\u4e2a\u70b9\u5728\u500d\u589e\u6570\u7ec4\u4e0a\u7684\u70b9\uff0c\u518d\u8fde\u540e$2^k$\u4e2a\u70b9\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(m\\log n)$\u3002\n\n\u4e0b\u9762\u7ed9\u51fa\u90e8\u5206\u4ee3\u7801\uff0c\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u4e0e\u4e0a\u9762\u500d\u589e\u76f8\u540c\u3002\n```cpp\nvoid pathin(int x, int y, int pos, int w) { // y \u4e3a\u6211\u4eec\u6c42\u51fa\u7684 lca\n    int k = log2(dep[x]-dep[y]+1);\n    seg::add(pos, segin(x, k), w);\n    for(int i = 16; i >= 0; --i)\n        if(dep[g[x][i]] >= dep[y]+(1<<k)-1)\n            x = g[x][i];\n    seg::add(pos, segin(x, k), w);\n}\n```",
        "postTime": 1557737124,
        "uid": 79017,
        "name": "\u82b1\u91cc\u5fc3\u7231",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5344 \u3010\u3010XR-1\u3011\u901b\u68ee\u6797\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u662f $O(m\\log n)$ \u7684\u505a\u6cd5\u3002\n\n\u9996\u5148\u53bb\u6389\u4e0d\u5408\u6cd5\u7684\u64cd\u4f5c\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\u5b9e\u73b0\u3002\n\n\u4e3a\u4e86\u4fbf\u4e8e\u5b9e\u73b0\uff0c\u53ef\u4ee5\u5c06\u65e0\u5411\u8fb9\u89c6\u4e3a\u4e24\u4e2a\u4f20\u9001\u95e8 $(u,u,v,v,w)$ \u548c $(v,v,u,u,w)$\u3002\n\n\u7136\u540e\u6709\u5f88\u591a\u4f18\u5316\u5efa\u56fe\u7684\u505a\u6cd5\uff0c\u590d\u6742\u5ea6\u90fd\u5728 $O(n\\log^2n)$ \u4ee5\u4e0a\u3002\n\n\u8003\u8651 [[NOI2019] \u5f39\u8df3](https://www.luogu.com.cn/problem/P5471) \u7684\u4f18\u5316\u65b9\u6cd5\u3002\u53ef\u4ee5\u53c2\u8003 [\u5e38\u89c1\u4f18\u5316\u5efa\u56fe\u6280\u5de7](https://www.luogu.com.cn/blog/221955/chang-jian-you-hua-jian-tu-ji-qiao)\u3002\n\n\u5728 dij \u7684\u8fc7\u7a0b\u4e2d\uff0c\u5806\u4e2d\u4e0d\u5b58\u70b9\uff0c\u800c\u662f\u5b58\u8fb9\uff0c\u8fd9\u6837\u6bcf\u6b21\u8bbf\u95ee\u5230\u7684\u70b9\u6700\u77ed\u8def\u5355\u8c03\u9012\u589e\u3002\n\n\u6bcf\u4e2a\u70b9\u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\u5230\u5f97\u5230\u7684\u5c31\u662f\u6700\u77ed\u8def\uff0c\u7136\u540e\u53ef\u4ee5\u76f4\u63a5\u5c06\u8fd9\u4e2a\u70b9\u5220\u6389\u3002\u6bcf\u6761\u8fb9\u4e5f\u53ea\u9700\u8981\u6269\u5c55\u4e00\u6b21\uff0c\u4e4b\u540e\u53ef\u4ee5\u5220\u6389\u3002\n\n\u6700\u77ed\u8def\u90e8\u5206\u590d\u6742\u5ea6\u5373\u4e3a $O(m\\log n)$\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u627e\u5230\u6bcf\u4e2a\u4f20\u9001\u95e8\u9700\u8981\u6269\u5c55\u7684\u70b9\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u4f20\u9001\u95e8\uff0c\u6c42\u51fa $u_2$ \u548c $v_2$ \u7684 lca\uff0c\u8bb0\u4e3a $l$\u3002\u4e8e\u662f\u53ef\u4ee5\u5c06 $(u2,v2)$ \u62c6\u6210\u4e24\u6761\u8fde\u5411\u7956\u5148\u7684\u8def\u5f84 $(u2,l)$ \u548c $(v2,l)$\u3002\n\n\u5220\u70b9\u7684\u8fc7\u7a0b\u7528\u6811\u4e0a\u5e76\u67e5\u96c6\uff08\u5373\u53ea\u80fd\u5c06\u513f\u5b50\u5411\u7236\u4eb2\u5408\u5e76\u7684\u5e76\u67e5\u96c6\uff09\u5b9e\u73b0\uff0c\u6bcf\u8bbf\u95ee\u5b8c\u4e00\u4e2a\u70b9\u5c31\u5c06\u5b83\u5411\u7236\u4eb2\u5408\u5e76\u3002\u8fd9\u6837\u5728\u8def\u5f84\u4e0a\u8df3 $fa$ \u6bcf\u6b21\u8bbf\u95ee\u5230\u7684\u90fd\u662f\u9700\u8981\u6269\u5c55\u7684\u70b9\u3002\n\n\u6700\u540e\u8003\u8651\u5982\u4f55\u6c42\u51fa\u8d77\u70b9\u7ecf\u8fc7\u70b9 $x$ \u7684\u4f20\u9001\u95e8\u3002\n\n\u8bbe $l_x$ \u4e3a $x$ \u5b50\u6811 dfs \u5e8f\u6700\u5c0f\u503c\uff08\u5373 $x$ \u7684 dfs \u5e8f\uff09\uff0c$r_x$ \u4e3a\u6700\u5927\u503c\u3002\u8d77\u70b9\u4e3a $(u1,v1)$ \u7684\u4f20\u9001\u95e8\u7ecf\u8fc7 $x$\uff0c\u5f53\u4e14\u4ec5\u5f53 $lca(u1,v1)=x$\uff0c\u6216\u8005 $u1,v1$ \u4e2d\u6709\u4e00\u4e2a dfs \u5e8f\u5c5e\u4e8e $[l_x,r_x]$ \u800c\u53e6\u4e00\u4e2a\u4e0d\u5c5e\u4e8e\u3002\n\n\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u5bf9\u6bcf\u4e2a $x$ \u5f00\u4e00\u4e2a vector \u5b58\u50a8 $lca(u1,v1)=x$ \u7684\u4f20\u9001\u95e8\u3002\n\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u4e0d\u59a8\u8bbe $l_{u1}<l_{v1}$\uff0c\u53ea\u9700\u8981\u4e0d\u65ad\u67e5\u8be2 $u1\\in[l_x,r_x]$ \u4e14 $v1$ \u6700\u5927\u7684\u4f20\u9001\u95e8\uff0c\u7136\u540e\u5220\u6389\uff0c\u76f4\u5230 $v1\\leq r_x$\u3002\u540c\u7406\uff0c\u8fd8\u9700\u8981\u4e0d\u65ad\u67e5\u8be2 $v1\\in[l_x,r_x]$ \u4e14 $u1$ \u6700\u5c0f\u7684\u4f20\u9001\u95e8\u3002\n\n\u9700\u8981\u652f\u6301\u5355\u70b9\u5220\uff0c\u533a\u95f4\u6700\u503c\uff0c\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u3002\n\n\u7531\u4e8e\u6b64\u9898\u6570\u636e\u8303\u56f4 $n$ \u8f83\u5c0f\uff0c\u5b9e\u9645\u6548\u7387\u5e76\u4e0d\u5982 ST \u8868\u4f18\u5316\u5efa\u56fe\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=5e4+3;\nstruct E{int a,b,c,d,w,la,lb;bool f;}e[N*22];\nbasic_string<int>g[N],a[N*4][2],p[N];\nusing ar=int[N];\nar f,fa,sz,sn,h,l,r,tp,d;\nint id,u,v,w,n,z[N*22];\nstruct cmp{bool operator()(int x,int y){return e[x].w>e[y].w;}};\npriority_queue<int,vector<int>,cmp>q;\nbool(*c[2])(int,int)={[](int x,int y){return e[x].lb<e[y].lb;},[](int x,int y){return e[x].la>e[y].la;}},b;\nint gf(int x){return f[x]==x?x:f[x]=gf(f[x]);}\nvoid dfs1(int x,int y){\n\th[x]=h[y]+1,fa[x]=y,sz[x]=1;\n\tfor(int i:g[x])if(i!=y)if(dfs1(i,x),sz[x]+=sz[i],sz[i]>sz[sn[x]])sn[x]=i;\n}\nvoid dfs2(int x,int y){\n\tif(l[x]=++id,tp[x]=y,sn[x])dfs2(sn[x],y);\n\tfor(int i:g[x])if(i!=fa[x]&&i!=sn[x])dfs2(i,i);\n\tr[x]=id;\n}\nint lca(int x,int y){\n\tfor(;tp[x]!=tp[y];x=fa[tp[x]])if(h[tp[x]]<h[tp[y]])swap(x,y);\n\treturn h[x]<h[y]?x:y;\n}\nvoid upd(int k,int l,int r){\n\tif(a[k][b]+=w,l==r)return;\n\tint m=l+r>>1;\n\tu>m?upd(k*2+1,m+1,r):upd(k*2,l,m);\n}\nvoid qry(int k,int l,int r){\n\tif(u<=l&&r<=v){\n\t\twhile(e[a[k][b].back()].f)a[k][b].pop_back();\n\t\tif(c[b](w,a[k][b].back()))w=a[k][b].back();\n\t\treturn;\n\t}\n\tint m=l+r>>1;\n\tif(u<=m)qry(k*2,l,m);\n\tif(m<v)qry(k*2+1,m+1,r);\n}\nvoid work(int x){\n\tfor(int i:p[x])if(!e[i].f)e[i].f=1,e[i].w+=d[x],q.push(i);\n\tfor(b=0,u=l[x],v=r[x];w=0,qry(1,1,n),e[w].lb>v;q.push(w))e[w].f=1,e[w].w+=d[x];\n\tfor(b=1,f[x]=gf(fa[x]);w=0,qry(1,1,n),e[w].la<u;q.push(w))e[w].f=1,e[w].w+=d[x];\n}\nint main(){\n\tint m,s,t=0,i,j,k,o,x;\n\tscanf(\"%d%d%d\",&n,&m,&s),e[0].la=N;\n\tfor(i=1;i<=n;++i)f[i]=i;\n\twhile(m--){\n\t\tscanf(\"%d%d%d%d\",&i,&j,&k,&x);\n\t\tif(i==1){\n\t\t\tscanf(\"%d%d\",&o,&i);\n\t\t\tif(gf(j)==gf(k)&&gf(x)==gf(o))e[++t]={j,k,x,o,i};\n\t\t}else if(gf(j)!=gf(k))f[f[j]]=f[k],e[++t]={j,j,k,k,x},e[++t]={k,k,j,j,x},g[j]+=k,g[k]+=j;\n\t}\n\tfor(i=1;i<=n;++i)if(f[i]=i,!l[i])dfs1(i,0),dfs2(i,i);\n\tfor(i=1;i<=t;++i){\n\t\tif(p[lca(e[i].a,e[i].b)]+=i,l[e[i].a]>l[e[i].b])swap(e[i].a,e[i].b);\n\t\te[i].la=l[e[i].a],e[i].lb=l[e[i].b],z[i]=i;\n\t}\n\tfor(i=1;i<N*4;++i)a[i][0]+=0,a[i][1]+=0;\n\tfor(i=1,sort(z+1,z+t+1,c[0]);i<=t;++i)u=e[w=z[i]].la,upd(1,1,n);\n\tfor(i=1;i<=t;++i)z[i]=i;\n\tfor(i=b=1,sort(z+1,z+t+1,c[1]);i<=t;++i)u=e[w=z[i]].lb,upd(1,1,n);\n\tmemset(d,-1,N*4),d[s]=0,work(s);\n\twhile(q.size()){\n\t\ti=q.top(),q.pop(),j=h[lca(e[i].c,e[i].d)];\n\t\tfor(k=gf(e[i].c);h[k]>=j;k=f[k])d[k]=e[i].w,work(k);\n\t\tfor(k=gf(e[i].d);h[k]>=j;k=f[k])d[k]=e[i].w,work(k);\n\t}\n\tfor(i=1;i<=n;++i)printf(\"%d \",d[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1615288620,
        "uid": 221955,
        "name": "panyf",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5344 \u3010XR-1\u3011\u901b\u68ee\u6797"
    },
    {
        "content": "**\u9898\u610f** : \u7ed9\u51fa\u4e00\u4e2a $n$ \u4e2a\u70b9\u7684\u68ee\u6797\u3002\u6709 $m$ \u6b21\u64cd\u4f5c\u6784\u5efa\u4e00\u4e2a\u65b0\u56fe \uff1a\n\n\u6bcf\u6b21\u6311\u4e24\u6761\u7b80\u5355\u8def\u5f84 $t_1=u_1\\leftrightarrow v_1,\\ t_2=u_2\\leftrightarrow v_2$ \uff0c\u5c06 $t_1$ \u4e0a\u7684\u6bcf\u4e2a\u70b9\u5411 $t_2$ \u4e0a\u7684\u6bcf\u4e2a\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $c$\u3002\n\n\u6700\u7ec8\u6c42\u65b0\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def\u3002\n\n$n\\leq 5\\times 10^4,m\\leq 10^6$ \uff0c\u65f6\u9650$\\texttt{3s}$ \uff0c\u7a7a\u9650$\\texttt{500M}$\u3002\n\n------------\n\n\u597d\u7684\u7ec3\u4e60\u9898\u3002\n\n- \u6811\u5256\u4f18\u5316\u5efa\u56fe\n\n\u5c06\u6bcf\u6761\u8def\u5f84\u62c6\u6210 $O(\\log^2n)$ \u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\uff0c\u7136\u540e\u8fde\u8fb9\u3002\n\n\u70b9\u6570 $O(n)$ \u8fb9\u6570 $O(m\\log^2n)$ \uff0c\u6700\u77ed\u8def\u590d\u6742\u5ea6\u4e3a $O(m\\log^3n)$\uff0c\u65e0\u6cd5\u901a\u8fc7\u3002\n\n- \u500d\u589e/ST\u4f18\u5316\u5efa\u56fe\n\n\u6ce8\u610f\u5230\u6811\u5256\u62c6\u51fa\u7684\u8fb9\u591a\u662f\u56e0\u4e3a\u9884\u5148\u51c6\u5907\u7684\u70b9\u592a\u5c11\u4e86\uff0c\u4e0d\u59a8\u4f7f\u7528\u9884\u5904\u7406\u70b9\u66f4\u5bc6\u96c6\u7684\u500d\u589e\u3002\n\n\u8fd9\u6837\u5c31\u80fd\u505a\u5230 $O(n\\log n)$ \u70b9\u6570 $O((n+m)\\log n)$ \u8fb9\u6570\uff0c\u82e5\u7528\u666e\u901a\u5806\u8dd1 $\\rm Dijkstra$ \uff0c\u590d\u6742\u5ea6\u4e3a $O((n+m)\\log^2 n)$ \uff0c\u9700\u8981\u5361\u5e38\u624d\u80fd\u901a\u8fc7\u3002\n\n\u6ce8\u610f\u5230\u91cd\u590d\u5efa\u8fb9\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c ST \u8868\u7684\u65b9\u6cd5\u3002\n\n\u8fd9\u6837\u5373\u53ef\u505a\u5230 $O(n\\log n)$ \u70b9\u6570 $O(n\\log n+m)$ \u8fb9\u6570\uff0c\u590d\u6742\u5ea6\u4e3a $O(n\\log^2n+m\\log n)$ \uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n- \u4e0d\u4f18\u5316\u5efa\u56fe\u4e86\n\n\u8003\u8651 $\\rm Dijkstra$ \u7b97\u6cd5\u7684\u5173\u952e\u6027\u8d28 \uff1a \u7ef4\u62a4\u76ee\u524d\u6700\u5c0f\u7684\u8f6c\u79fb\uff0c\u4f7f\u5f97\u6bcf\u6b21\u8f6c\u79fb\u90fd\u662f\u7b54\u6848\u3002\n\n\u6211\u4eec\u4f7f\u7528\u5c0f\u6839\u5806\u7ef4\u62a4\u76ee\u524d\u6700\u5c0f\u7684\u4e00\u5bf9\u8def\u5f84\u95f4\u8fde\u8fb9\u3002\n\n\u5f53\u8f6c\u79fb\u751f\u6548\u65f6\u4f1a\u89e6\u53d1\u8def\u5f84\u8d4b\u503c\u64cd\u4f5c\u3002\u4f7f\u7528\u5e76\u67e5\u96c6\u5c06\u5df2\u7ecf\u88ab\u8d4b\u503c\u7684\u70b9\u7f29\u8d77\u6765\uff0c\u5373\u53ef\u5feb\u901f\u627e\u5230\u6bcf\u4e2a\u9700\u8981\u8d4b\u503c\u7684\u70b9\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u8d4b\u7684\u503c\u4f1a\u8d8a\u6765\u8d8a\u5927\u3002\u6240\u4ee5\u5f53\u67d0\u4e2a\u70b9\u88ab\u8d4b\u503c\u4e4b\u540e\uff0c\u53ea\u4f1a\u66f4\u65b0\u90a3\u4e9b\u672a\u52a0\u5165\u5c0f\u6839\u5806\u7684\u8f6c\u79fb\u3002\n\n\u73b0\u5728\u95ee\u9898\u8fd8\u5269 \uff1a \u627e\u51fa\u7ecf\u8fc7 $a$ \u70b9\u7684\u6240\u6709\u8def\u5f84\u3002\n\n\u70b9 $a$ \u5728\u8def\u5f84 $u\\leftrightarrow v$ \u4e0a\u7684\u5224\u636e \uff1a ${\\rm lca}(u,v)=a$ \u6216 $[u\\in a]\u2260[v\\in a]$ \uff08\u5176\u4e2d $[u\\in a]$ \u8868\u793a $u$ \u5728 $a$ \u7684\u5b50\u6811\u4e2d\uff09\n\n\u524d\u8005\u751f\u6548\u7684\u603b\u6b21\u6570\u662f $O(m)$ \u7684\uff0c\u968f\u4fbf\u548b\u5927\u529b\u505a\u3002\n\n\u540e\u8005\u53ef\u4ee5\u5229\u7528 $\\rm dfs$ \u5e8f\u8f6c\u5316\u6210\u4e8c\u7ef4\u504f\u5e8f\u3002\n\n\u6ce8\u610f\u6211\u4eec\u53ea\u9700\u8981\u9010\u4e2a\u627e\u51fa\u7b26\u5408\u8981\u6c42\u7684\u8def\u5f84\uff0c\u6240\u4ee5\uff0c\u4e0d\u5fc5\u52a8\u7528\u52a8\u6001\u4e8c\u7ef4\u504f\u5e8f\u3002\n\n\u5c06\u8def\u5f84 $u\\leftrightarrow v$ \u6839\u636e $dfn[u]$ \u653e\u7f6e\u5230\u6570\u7ec4\u4e2d\uff0c\u7ef4\u62a4\u533a\u95f4 $\\min dfn[v]$\u3002\uff08\u901a\u8fc7\u5408\u9002\u7684\u4ea4\u6362\u4f7f\u5f97 $dfn[u]<dfn[v]$\uff09\n\n\u5f53\u5bfb\u627e\u7ecf\u8fc7 $a:[L,R]$ \u7684\u8def\u5f84\u65f6\uff0c\u67e5\u8be2 $\\rm dfs[u]$ \u5e8f\u5728 $[L,R]$ \u4e2d\u7684\u6240\u6709\u8def\u5f84\u4e2d $dfn[v]$ \u6700\u5c0f\u7684\uff0c\u627e\u51fa\u5728 $[1,L)$ \u5185\u7684 $dfn[v]$\u3002\n\n\u8fd8\u9700\u5c06\u6700\u5c0f\u503c\u6539\u6210\u6700\u5927\u503c\u518d\u8dd1\u4e00\u904d\uff0c\u627e\u51fa\u5728 $(R,n]$ \u5185\u7684 $dfn[v]$\u3002\n\n\u8fd9\u53ea\u9700\u8981\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\n\n\u590d\u6742\u5ea6\u4e3a $O((n+m)\\log n)$\u3002\n\n\u4ee3\u7801\u6709\u4ebf\u70b9\u70b9\u957f\uff0c\u4f46\u662f\u7ec6\u8282\u4e0d\u7b97\u7279\u522b\u591a\u3002\n\n```cpp\n#include<algorithm>\n#include<vector>\n#include<cstdio>\n#include<queue>\n#define Pr pair<int,int>\n#define mp make_pair\n#define fir first\n#define sec second\n#define pb push_back\n#define MaxM 1005000\n#define MaxN 50500\nusing namespace std;\nconst int INF=1000000000;\ninline int read(){\n  int X=0;char ch=0;\n  while(ch<48||ch>57)ch=getchar();\n  while(ch>=48&&ch<=57)X=X*10+(ch^48),ch=getchar();\n  return X;\n}\nvector<int> g[MaxN],l[MaxN];\nint tim,dfn[MaxN],out[MaxN],dep[MaxN],f[17][MaxN];\nvoid dfs(int u)\n{\n  dfn[u]=++tim;\n  for (int i=0,v;i<g[u].size();i++)\n    if (!dfn[v=g[u][i]]){\n      dep[v]=dep[f[0][v]=u]+1;\n      dfs(v);\n    }\n  out[u]=tim;\n}\nint lca(int u,int v)\n{\n  if (dep[u]<dep[v])swap(u,v);\n  int k=16;\n  while(k--)\n    while(dep[f[k][u]]>=dep[v])\n      u=f[k][u];\n  if (u==v)return u;\n  k=16;\n  while(k--)\n    while(f[k][u]!=f[k][v])\n      {u=f[k][u];v=f[k][v];}\n  return f[0][u];\n}\nvector<Pr> sp[MaxN];\nvector<int> sg[MaxN];\nstruct Data{\n  int op,u,v,u2,v2,w,d;bool vis;\n  void adl(int p)\n  {\n    int t=lca(u,v);sg[t].pb(p);\n    sp[dfn[u]].pb(mp(dfn[v],p));\n    sp[dfn[v]].pb(mp(dfn[u],p));\n  }\n}b[MaxM];\nint n,pl[MaxN],pr[MaxN],tu[MaxN];\nstruct Node{\n  Pr x0,x1;\n  void clr(){x0.fir=n+1;x1.fir=0;}\n}a[MaxN<<2],ret;\nvoid up(int u)\n{a[u].x0=min(a[u<<1].x0,a[u<<1|1].x0);\n a[u].x1=max(a[u<<1].x1,a[u<<1|1].x1);}\nvoid build(int l=1,int r=n,int u=1)\n{\n  if (l==r){\n    tu[l]=u;\n    sort(sp[l].begin(),sp[l].end());\n    pl[l]=0;pr[l]=sp[l].size()-1;\n    if (pl[l]<=pr[l]){\n      a[u].x0=sp[l][pl[l]];\n      a[u].x1=sp[l][pr[l]];\n    }else {\n      a[u].x0=mp(n+1,0);\n      a[u].x1=mp(0,0);\n    }return ;\n  }int mid=(l+r)>>1;\n  build(l,mid,u<<1);\n  build(mid+1,r,u<<1|1);\n  up(u);\n}\nint wfl,wfr;\nvoid qry(int l=1,int r=n,int u=1)\n{\n  if (wfl<=l&&r<=wfr){\n    ret.x0=min(ret.x0,a[u].x0);\n    ret.x1=max(ret.x1,a[u].x1);\n    return ;\n  }int mid=(l+r)>>1;\n  if (wfl<=mid)qry(l,mid,u<<1);\n  if (mid<wfr)qry(mid+1,r,u<<1|1);\n}\nvoid upd(int t)\n{\n  int u=tu[t];\n  while(pl[t]<=pr[t]&&b[sp[t][pl[t]].sec].vis==1)pl[t]++;\n  while(pl[t]<=pr[t]&&b[sp[t][pr[t]].sec].vis==1)pr[t]--;\n  if (pl[t]<=pr[t]){\n    a[u].x0=sp[t][pl[t]];\n    a[u].x1=sp[t][pr[t]];\n  }else {\n    a[u].x0=mp(n+1,0);\n    a[u].x1=mp(0,0);\n  }while(u>1){u>>=1;up(u);}\n}\nstruct UFS{\n  int f[MaxN];\n  void Init(int n)\n  {for (int i=1;i<=n;i++)f[i]=i;}\n  int find(int u)\n  {return f[u]==u ? u : f[u]=find(f[u]);}\n  bool chk(int x,int y)\n  {return find(x)==find(y);}\n  void merge(int x,int y)\n  {f[find(x)]=find(y);}\n}F;\nint m,S,dis[MaxN+MaxM];\npriority_queue<Pr> q;\nvoid trans(int u,int lim,int d)\n{\n  u=F.find(u);\n  while(dep[u]>=lim){\n    if (dis[u]>d){\n      dis[u]=d;\n      q.push(mp(-dis[u],u));\n    }\n    F.merge(u,f[0][u]);\n    u=F.find(u);\n  }\n}\nvoid ext(Data B,int d){\n  int t=lca(B.u2,B.v2);\n  trans(B.u2,dep[t],d);\n  trans(B.v2,dep[t],d);\n}\ninline void push(int p,int d)\n{\n  if (!b[p].vis){\n    b[p].vis=1;\n    q.push(mp(-(dis[p+n]=d+b[p].w),p+n));\n  }\n}\nvoid ext(int u,int d)\n{\n  for (int i=0,v;i<g[u].size();i++)\n    if (dis[v=g[u][i]]>dis[u]+l[u][i]){\n      dis[v]=dis[u]+l[u][i];\n      q.push(mp(-dis[v],v));\n    }\n  for (int i=0;i<sg[u].size();i++)\n    push(sg[u][i],d);\n  wfl=dfn[u];wfr=out[u];\n  while(1){\n    ret.clr();qry();\n    if (wfl<=ret.x0.fir&&ret.x1.fir<=wfr)break;\n    if (ret.x0.fir<wfl){\n      push(ret.x0.sec,d);\n      upd(dfn[b[ret.x0.sec].u]);\n      upd(dfn[b[ret.x0.sec].v]);\n    }if (wfr<ret.x1.fir){\n      push(ret.x1.sec,d);\n      upd(dfn[b[ret.x1.sec].u]);\n      upd(dfn[b[ret.x1.sec].v]);\n    }\n  }\n}\nint main()\n{\n  n=read();m=read();S=read();\n  for (int i=1;i<=m;i++){\n    b[i].op=read();b[i].u=read();b[i].v=read();\n    if (b[i].op==1)\n      {b[i].u2=read();b[i].v2=read();}\n    b[i].w=read();\n  }\n  F.Init(n);\n  for (int i=1;i<=m;i++){\n    if (b[i].op==2){\n      if (F.chk(b[i].u,b[i].v))continue;\n      g[b[i].u].pb(b[i].v);l[b[i].u].pb(b[i].w);\n      g[b[i].v].pb(b[i].u);l[b[i].v].pb(b[i].w);\n      F.merge(b[i].u,b[i].v);\n    }\n  }\n  dep[0]=-1;\n  for (int i=1;i<=n;i++)if (!dfn[i])dfs(i);\n  for (int j=1;j<16;j++)\n    for (int i=1;i<=n;i++)\n      f[j][i]=f[j-1][f[j-1][i]];\n  F.Init(n);\n  for (int i=1;i<=m;i++){\n    if (b[i].op==1){\n      if (F.chk(b[i].u,b[i].v)&&F.chk(b[i].u2,b[i].v2))\n        b[i].adl(i);\n    }else F.merge(b[i].u,b[i].v);\n  }\n  build();\n  F.Init(n);\n  for (int i=1;i<=n+m;i++)dis[i]=INF;\n  q.push(mp(dis[S]=0,S));\n  while(!q.empty()){\n    Pr u=q.top();q.pop();\n    if (-u.fir!=dis[u.sec])continue;\n    if (u.sec>n)ext(b[u.sec-n],-u.fir);\n    else ext(u.sec,-u.fir);\n  }\n  for (int i=1;i<=n;i++)\n    printf(\"%d \",dis[i]==INF ? -1 : dis[i]);\n  return 0;\n}\n```\n",
        "postTime": 1610361566,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5344 \u3010\u3010XR-1\u3011\u901b\u68ee\u6797\u3011"
    },
    {
        "content": "[P5344 \u901b\u68ee\u6797](https://www.luogu.com.cn/problem/P5344)\n\n### \u9898\u76ee\u5927\u610f\n\n~~\u539f\u9898\u7684\u9898\u76ee\u5927\u610f\u5df2\u7ecf\u5f88\u660e\u786e\u4e86\u8981\u8fd9\u4e2a\u5e72\u561b~~\n\n\u7ed9\u5b9a\u4e00\u4e9b\u5b64\u7acb\u70b9\uff0c\u5c06\u8981\u8fdb\u884c\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n- \u82e5\u4e24\u70b9\u4e4b\u95f4\u4e0d\u53ef\u4ee5\u901a\u8fc7 $1$ \u7c7b\u8fb9\u8fde\u901a\uff0c\u5219\u5728\u4e24\u70b9\u4e4b\u95f4\u8fde\u53cc\u5411 $1$ \u7c7b\u8fb9\n\n- \u82e5 $u_1,v_1$ \u548c $u_2,v_2$ \u5747\u53ef\u4ee5\u901a\u8fc7 $1$ \u7c7b\u8fb9\u8fde\u901a\uff0c\u5219\u4ece $u_1\\to v_1$ \u7684\u552f\u4e00\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u5747\u5411 $u_2\\to v_2$ \u7684\u552f\u4e00\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u8fde\u5355\u5411\u975e $1$ \u7c7b\u8fb9\u3002\n\n\u5728\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\u540e\u6c42\u51fa\u4ece\u7ed9\u5b9a\u7684 $s$ \u51fa\u53d1\u7684\u5355\u6e90\u6700\u77ed\u8def\u3002\n\n### \u524d\u7f6e\u77e5\u8bc6\n\n~~\u5982\u679c\u4f60\u4e0d\u719f\u6089\u4ee5\u4e0b\u5185\u5bb9\uff0c\u90a3\u8fd8\u662f\u6362\u4e00\u7bc7\u9898\u89e3\u770b\u5427\u3002~~\n\n- \u6811\u94fe\u5256\u5206\n\n- \u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\n\n### \u601d\u8def\u5206\u6790\n\n\u9996\u5148\u663e\u7136\u6709\u4e00\u4e2a $O(n\\log^3n)$ \u7684\u5927\u529b\u6811\u5256\u505a\u6cd5\uff0c\u4f46\u8fd9\u4e2a\u505a\u6cd5\u8fc7\u4e8e\u66b4\u529b\uff0c\u65f6\u95f4\u548c\u7a7a\u95f4\u90fd\u4e0d\u5141\u8bb8\uff0c\u65e0\u6cd5\u901a\u8fc7\u672c\u9898\u3002\n\n\u8003\u8651\u4f18\u5316\u8fd9\u4e2a\u505a\u6cd5\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u91cd\u94fe\u90fd\u5728\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u4e00\u6b21\u8fde\u8fb9\u5b9e\u5728\u592a\u8fc7\u4e8e\u66b4\u529b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u9ad8\u5c31\u6765\u6e90\u4e8e\u8fd9\u91cc\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u6761\u91cd\u94fe\u662f\u4e00\u9897\u6811\u4e0a\u72ec\u7acb\u7684\u90e8\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u6bcf\u4e00\u6761\u91cd\u94fe\u9884\u5904\u7406\u51fa\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u4ece\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u76f4\u63a5\u5230\u8fbe\u91cd\u94fe\u4e0a\u7684\u6240\u6709\u70b9\u3002\u8fd9\u6837\u5728\u6811\u5256\u7684\u65f6\u5019\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u91cd\u94fe\u53ea\u9700\u8981\u8fde\u4e00\u6761\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u90a3\u5269\u4e0b\u7684\u90e8\u5206\u600e\u4e48\u529e\u5462\uff1f\u4e0d\u7528\u6015\uff0c\u76f4\u63a5\u603c\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u4e0a\u53bb\u5c31\u53ef\u4ee5\u4e86\uff0c\u53cd\u6b63\u53ea\u6709\u4e00\u4e2a\u533a\u95f4\uff0c\u5bf9\u65f6\u95f4\u590d\u6742\u5ea6\u6ca1\u6709\u5f71\u54cd\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(m\\log^2n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$ \u7684\u4e0d\u90a3\u4e48\u66b4\u529b\u7684\u505a\u6cd5\uff0c\u8db3\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n### \u8be6\u7ec6\u89e3\u91ca\n\n\u4e0a\u9762\u7684\u90e8\u5206\u89e3\u91ca\u4e86\u4e00\u4e0b\u5927\u81f4\u601d\u8def\uff0c\u4f46\u8fd8\u6709\u4ebf\u4e9b\u7ec6\u8282\u3002\n\n- **\u5982\u4f55\u9884\u5904\u7406\u51fa\u91cd\u94fe\u8def\u5f84\uff1f**\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5efa\u7acb\u4e24\u4e2a\u65b0\u7684\u70b9\uff0c\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u7136\u540e\u7531\u8fd9\u4e2a\u70b9\u7684\u5165\u70b9\u5411\u8be5\u70b9\u8fde\u8fb9\uff0c\u8be5\u70b9\u5411\u51fa\u70b9\u8fde\u8fb9\u3002\n\n\u540c\u65f6\uff0c\u81ea\u5df1\u7684\u51fa\u70b9\u5411\u81ea\u5df1\u7684\u91cd\u513f\u5b50\u7684\u51fa\u70b9\u8fde\u8fb9\uff0c\u81ea\u5df1\u7684\u91cd\u513f\u5b50\u7684\u5165\u70b9\u5411\u81ea\u5df1\u7684\u5165\u70b9\u8fde\u8fb9\u3002\u8fd9\u6837\u5c31\u5f62\u6210\u4e86\u4e24\u6761\u8def\u5f84\uff0c\u4e00\u6761\u5f80\u4e0b\u7684\u51fa\u8def\u5f84\u548c\u4e00\u6761\u5f80\u4e0a\u7684\u5165\u8def\u5f84\u3002\n\n![](https://i.328888.xyz/2023/04/23/i5Yof8.png)\n\n- **\u5982\u4f55\u4f7f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff1f**\n\n\u8ddf\u6b63\u5e38\u7684\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u5dee\u4e0d\u591a\uff0c\u53ea\u9700\u8981\u5728\u6811\u5256\u7684\u914d\u5408\u4e0b\u4e0a\u6811\u5c31\u884c\u4e86\u3002\n\n![](https://i.328888.xyz/2023/04/23/i5qq93.png)\n\n```\nstruct STn{int l,r;};//\u6ca1\u4ec0\u4e48\u7528\u7684\u7ed3\u6784\u4f53\nstruct ST{\n    STn a[P<<2];//\u5f00\u56db\u500d\n    void build(int p,int l,int r){\n        a[p].l=l;a[p].r=r;\n        if(a[p].l==a[p].r){\n            idt[p][0]=idt[p][1]=rnk[l];//rnk[l]\u624d\u662f\u5bf9\u5e94\u7684\u70b9\uff0cidt[p][0]\u662f\u5165\u51fa\u7684\u8282\u70b9\u7f16\u53f7\uff0cidt[p][1]\u662f\u51fa\u6811\u7684\n            return ;\n        }\n        int mid=(a[p].l+a[p].r)>>1;\n        build(p<<1,l,mid);build(p<<1|1,mid+1,r);\n        idt[p][0]=build_new_point();//\u52a8\u6001\u5f00\u70b9\uff0c\u8282\u7ea6\u7a7a\u95f4\n        idt[p][1]=build_new_point();\n        add(idt[p][0],idt[p<<1][0],0,0);//\u5165\u6811\u548c\u51fa\u6811\u8fde\u8fb9\n        add(idt[p][0],idt[p<<1|1][0],0,0);\n        add(idt[p<<1][1],idt[p][1],0,0);\n        add(idt[p<<1|1][1],idt[p][1],0,0);\n    }\n    void connect(int p,int point,int l,int r,int f){\n        if(l<=a[p].l&&a[p].r<=r){\n            if(f) add(point,idt[p][0],0,0);//f=1 \u8868\u793a\u70b9\u5411\u533a\u95f4\u8fde\u8fb9\n            else add(idt[p][1],point,0,0);//f=0 \u8868\u793a\u533a\u95f4\u5411\u70b9\u8fde\u8fb9\n            return ;\n        }\n        int mid=(a[p].l+a[p].r)>>1;\n        if(l<=mid) connect(p<<1,point,l,r,f);\n        if(r>mid) connect(p<<1|1,point,l,r,f);\n    }\n}tree;\n```\n\n### \u5176\u4ed6\n\n\u7136\u540e\u5c31\u5e94\u8be5\u6ca1\u4ec0\u4e48\u5927\u95ee\u9898\u4e86\uff0c\u4f46\u662f\u7ec6\u8282\u8fd8\u662f\u5f88\u591a\u7684\u3002\n\n- \u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4 $1$ \u7c7b\u8fb9\u7684\u8fde\u901a\u3002\n\n- \u5165\u70b9\u548c\u51fa\u70b9\uff0c\u5165\u6811\u548c\u51fa\u6811\u4e0d\u8981\u641e\u6df7\u3002\n\n- dfs \u65f6\u53ea\u8d70\u6811\u8fb9\u3002\n\n- \u8fd9\u9898\u5361\u7a7a\u95f4\uff0c\u5efa\u8bae\u4f7f\u7528\u90bb\u63a5\u8868\u5b58\u56fe\u3002\n\n### \u4ee3\u7801\n\n```\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n#include <vector>\n\nusing namespace std;\nconst int N=2500000,P=50100;//n log n \u7a7a\u95f4\n#define inf 0x3f3f3f3f\n\nstruct Edge{int v,w;};\nvector <Edge> E[N];//\u90bb\u63a5\u8868\u5b58\u6240\u6709\u8fb9\nint to[P<<1],head[P],nxt[P<<1];//\u94fe\u661f\u5b58\u6811\u8fb9\nint dfn[P],rnk[P],dep[P],siz[P],son[P],fa[P],top[P];\nint idx=1,n,m,in1,in2,in3,in4,in5,op,s;\nint query_num,dfs_cnt,id;\nint dis[N],vis[N],idt[P<<2][2];\n\nint fat[P];\nint find(int x){return fat[x]==x?x:fat[x]=find(fat[x]);}//\u5e76\u67e5\u96c6\n\nint build_new_point(){//\u52a8\u6001\u5f00\u70b9\n    id++;return id;\n}\n\nvoid add(int u,int v,int c,int f){\n    if(f==1){idx++;to[idx]=v;nxt[idx]=head[u];head[u]=idx;}//f=1 \u8868\u793a\u8fd9\u6761\u8fb9\u662f\u6811\u8fb9\n    E[u].push_back(Edge{v,c});\n}\n\nstruct Query{\n    int u1,v1,u2,v2,w;\n}query[N];\n\nstruct Node{\n    int x,dis;\n}now;\n\nbool operator < (Node a,Node b){\n    return a.dis>b.dis;//\u5927\u6839\u5806\n}\n\npriority_queue <Node> q;\n\nvoid Dijskra(){//\u6700\u77ed\u8def\n    memset(dis,0x3f,sizeof dis);\n    q.push(Node{s,0});dis[s]=0;\n    while(!q.empty()){\n        now=q.top();q.pop();\n        if(vis[now.x]) continue;\n        vis[now.x]=1;\n        for(auto it:E[now.x]){\n            int v=it.v;\n            if(dis[v]<dis[now.x]+it.w) continue;\n            dis[v]=dis[now.x]+it.w;\n            q.push(Node{v,dis[v]});\n        }\n    }\n}\n\nvoid dfs_1(int s,int gr){//\u6811\u5256\u9884\u5904\u7406\n    fa[s]=gr;dep[s]=dep[gr]+1;\n    siz[s]=1;son[s]=-1;\n    for(int i=head[s];i;i=nxt[i]){\n        int v=to[i];\n        if(v==gr) continue;\n        dfs_1(v,s);\n        siz[s]+=siz[v];\n        if(son[s]==-1||siz[son[s]]<siz[v]) son[s]=v;\n    }\n}\n\nvoid dfs_2(int s,int tp){\n    top[s]=tp;\n    dfn[s]=++dfs_cnt;\n    rnk[dfs_cnt]=s;\n    if(son[s]==-1) return ;\n    add(son[s]+n,s+n,0,0);//\u5165\u70b9\u5f80\u4e0a\n    add(s+2*n,son[s]+2*n,0,0);//\u51fa\u70b9\u5f80\u4e0b\n    dfs_2(son[s],tp);\n    for(int i=head[s];i;i=nxt[i]){\n        int v=to[i];\n        if(v==son[s]||v==fa[s]) continue;\n        dfs_2(v,v);\n    }\n}\n\nstruct STn{int l,r;};//\u6ca1\u4ec0\u4e48\u7528\u7684\u7ed3\u6784\u4f53\nstruct ST{\n    STn a[P<<2];//\u5f00\u56db\u500d\n    void build(int p,int l,int r){\n        a[p].l=l;a[p].r=r;\n        if(a[p].l==a[p].r){\n            idt[p][0]=idt[p][1]=rnk[l];//rnk[l]\u624d\u662f\u5bf9\u5e94\u7684\u70b9\uff0cidt[p][0]\u662f\u5165\u51fa\u7684\u8282\u70b9\u7f16\u53f7\uff0cidt[p][1]\u662f\u51fa\u6811\u7684\n            return ;\n        }\n        int mid=(a[p].l+a[p].r)>>1;\n        build(p<<1,l,mid);build(p<<1|1,mid+1,r);\n        idt[p][0]=build_new_point();//\u52a8\u6001\u5f00\u70b9\uff0c\u8282\u7ea6\u7a7a\u95f4\n        idt[p][1]=build_new_point();\n        add(idt[p][0],idt[p<<1][0],0,0);//\u5165\u6811\u548c\u51fa\u6811\u8fde\u8fb9\n        add(idt[p][0],idt[p<<1|1][0],0,0);\n        add(idt[p<<1][1],idt[p][1],0,0);\n        add(idt[p<<1|1][1],idt[p][1],0,0);\n    }\n    void connect(int p,int point,int l,int r,int f){\n        if(l<=a[p].l&&a[p].r<=r){\n            if(f) add(point,idt[p][0],0,0);//f=1 \u8868\u793a\u70b9\u5411\u533a\u95f4\u8fde\u8fb9\n            else add(idt[p][1],point,0,0);//f=0 \u8868\u793a\u533a\u95f4\u5411\u70b9\u8fde\u8fb9\n            return ;\n        }\n        int mid=(a[p].l+a[p].r)>>1;\n        if(l<=mid) connect(p<<1,point,l,r,f);\n        if(r>mid) connect(p<<1|1,point,l,r,f);\n    }\n}tree;\n\nvoid add_edge_one_to_two(int point,int x,int y,int f){\n    while(top[x]!=top[y]){\n        if(dep[top[x]]<dep[top[y]]) swap(x,y);\n        if(f) add(point,x+n,0,0);\n        else add(x+2*n,point,0,0);//\u6ce8\u610f\u662f x \u4e0d\u662f top[x]\n        x=fa[top[x]];\n    }\n    if(dep[x]<dep[y]) swap(x,y);\n    tree.connect(1,point,dfn[y],dfn[x],f);//\u5269\u4e0b\u7684\u90e8\u5206\u7528\u7ebf\u6bb5\u6811\n}\n\nvoid add_edge_two_to_two(int query_id){\n    int u1=query[query_id].u1,v1=query[query_id].v1;\n    int u2=query[query_id].u2,v2=query[query_id].v2;\n    int w=query[query_id].w;//\u628a\u8be2\u95ee\u63d0\u53d6\u51fa\u6765\n    int uu=build_new_point(),vv=build_new_point();\n    add(uu,vv,w,0);//\u5efa\u4e24\u4e2a\u65b0\u7684\u70b9\u5e76\u5728\u8fd9\u4e24\u70b9\u4e4b\u95f4\u8fde\u6709\u6743\u503c\u7684\u8fb9\n    add_edge_one_to_two(vv,u2,v2,1);//\u51fa\u70b9\u5411\u8def\u5f84\u8fde\u8fb9\n    add_edge_one_to_two(uu,u1,v1,0);//\u8def\u5f84\u5411\u5165\u70b9\u8fde\u8fb9\n}\n\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&s);\n    id=3*n;//\u52a8\u6001\u5f00\u70b9\u7684\u7f16\u53f7\u4ece 3n \u5f00\u59cb\uff0cn+1 \u5230 2n \u662f\u5165\u70b9\uff0c2n+1 \u5230 3n \u662f\u51fa\u70b9\n    for(int i=1;i<=n;i++) fat[i]=i;//\u4e0d\u8981\u5fd8\u4e86\u521d\u59cb\u5316\n    for(int i=1;i<=m;i++){\n        scanf(\"%d\",&op);\n        if(op==1){\n            scanf(\"%d%d%d%d%d\",&in1,&in2,&in3,&in4,&in5);\n            if(find(in1)!=find(in2)||find(in3)!=find(in4)) continue;\n            query[++query_num]=Query{in1,in2,in3,in4,in5};//\u4fdd\u5b58\u4e00\u4e0b\u8be2\u95ee\n        }\n        if(op==2){\n            scanf(\"%d%d%d\",&in1,&in2,&in3);\n            if(find(in1)==find(in2)) continue;\n            add(in1,in2,in3,1);add(in2,in1,in3,1);\n            fat[find(in1)]=find(in2);\n        }\n    }\n    for(int i=1;i<=n;i++)\n        add(i+n,i,0,0),add(i,i+2*n,0,0);//\u5148\u628a\u51fa\u5165\u70b9\u4e4b\u95f4\u7684\u8fb9\u8fde\u4e0a\n    for(int i=1;i<=n;i++)\n        if(!dfn[i]){\n            dfs_1(i,0);\n            dfs_2(i,i);\n        }\n    tree.build(1,1,n);//\u4e0d\u8981\u5fd8\u4e86\u5efa\u6811\n    for(int i=1;i<=query_num;i++)//\u8fde\u4e00\u4e0b\u8be2\u95ee\u7684\u8fb9\n        add_edge_two_to_two(i);\n    Dijskra();\n    for(int i=1;i<=n;i++) \n        if(dis[i]==inf) cout<<\"-1 \";\n        else cout<<dis[i]<<' ';\n    cout<<'\\n';\n    return 0;\n}\n```",
        "postTime": 1682248033,
        "uid": 767096,
        "name": "TKXZ133",
        "ccfLevel": 4,
        "title": "P5344 \u901b\u68ee\u6797 \u9898\u89e3"
    },
    {
        "content": "\u4e0d\u96be\u60f3\u5230\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u7136\u540e\u628a\u6240\u6709\u6709\u7528\u76841\u64cd\u4f5c\u5b58\u4e0b\u6765\u3002\u5728\u6700\u7ec8\u7684\u68ee\u6797\u4e0a\u52a0\u8fb9\u3002\n\n\u7136\u540e\u6811\u5256+\u7ebf\u6bb5\u6811\u4f18\u5316\u8fde\u8fb9\u8dd1\u6700\u77ed\u8def\u3002~~SPFA\u4e0d\u4f1a\u7528\u7684~~\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(m\\log^3n)$\uff0c\u8fb9\u6570\u5f00\u4e0d\u4e0b\u3002~~\u7a9d\u592a\u83dc\u5c31\u53ea\u80fd\u60f3\u5230\u8fd9\u513f\u4e86~~\n\n\u795e\u9c7c\u7684\u9898\u89e3\u91cc\u8bf4\u7528\u500d\u589e\u4f18\u5316\u8fde\u8fb9\uff0c\u5c31\u5bf9\u500d\u589e\u6570\u7ec4\u4e0a\u7684\u6bcf\u4e2a\u70b9\u5f00\u4e00\u4e2a\u8282\u70b9\uff0c\u8986\u76d6\u8fd9\u4e00\u6bb5\u533a\u95f4\u3002\u7136\u540e\u6bcf\u6b21\u5411\u627eLCA\u4e00\u6837\u5f80\u4e0a\u8df3\uff0c\u8fb9\u8df3\u8fb9\u8fde\u8fb9\u3002\u4e00\u5f00\u59cb\u662f\u8fd9\u4e48\u7406\u89e3\u7684\u3002\n\n\u7136\u800c\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(m\\log^2 n)$\uff0c\u7a7a\u95f4\u52c9\u5f3a\u80fd\u5f00\u4e0b\uff0c\u4f46\u8fd8\u662f\u4f1aTLE\u3002\n\n~~\u51b7\u9759\u5730\u5403\u4e86\u987f\u996d\u4e4b\u540e\u7a81\u7136\u53cd\u5e94\u4e86\u8fc7\u6765~~\n\n\u5b9e\u9645\u4e0a\uff0c\u4e0e\u5176\u8bf4\u662f\u500d\u589e\uff0c\u4e0d\u5982\u8bf4\u66f4\u50cfST\u8868\u7684\u601d\u60f3\uff08ST\u8868\u5c31\u662f\u94fe\u4e0a\u7684\u500d\u589e\u6570\u7ec4\uff1f\uff09\u3002\n\n\u8003\u8651\u5230\u6700\u77ed\u8def\u4e2d\uff0c\u8fb9\u6743\u76f8\u7b49\u7684\u91cd\u8fb9\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002\u90a3\u4e48\u5bf9\u4e8e\u4e00\u6bb5\u94fe\u8fde\u51fa/\u5165\u957f\u5ea6\u76f8\u7b49\u7684\u6709\u5411\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4\u524d$2^k$\u4e2a\u70b9\u5148\u8fde\uff0c\u540e$2^k$\u4e2a\u70b9\u518d\u8fde\u3002\u8fd9\u6837\u4e2d\u95f4\u5c31\u6709\u53ef\u80fd\u91cd\u590d\uff0c\u4f46\u662f\u662f\u4e0d\u4f1a\u5bf9\u7ed3\u679c\u4ea7\u751f\u5f71\u54cd\u7684\u3002\n\n\u800c\u5bf9\u4e00\u6bb5\u957f\u5ea6\u4e3a$2^k$\u7684\u70b9\u8fde\u51fa/\u5165\u8fb9\uff0c\u5728\u500d\u589e\u6570\u7ec4\u4e0a\u521a\u597d\u5bf9\u5e94\u7740\u4e00\u4e2a\u8282\u70b9\u3002\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a1\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fde\u5f88\u5c11\u7684\u8fb9\u6765\u5b8c\u6210\u3002\n\n\u8fd9\u6837\u8fb9\u5c31\u53ea\u6709$O(m)$\u6761\u4e86\u3002\n\n\u4e8e\u662f\u65f6\u95f4\u590d\u6742\u5ea6$O(m\\log n)$\u3002\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<cstdlib>\n#include<ext/pb_ds/priority_queue.hpp>\nusing namespace __gnu_pbds;\ntypedef unsigned long long LL;\ntypedef priority_queue<LL,std::greater<LL> >heap;\nconst int N=5e5+4,M=3e6;\nchar buf[(int)1e8],*ss=buf;\ninline int init(){buf[fread(buf,1,(int)1e8-1,stdin)]='\\n';fclose(stdin);return EXIT_SUCCESS;}\nconst int __START__=init();\ninline int readint(){\n    int d=0;\n    while(!isdigit(*ss))++ss;\n    while(isdigit(*ss))d=d*10+(*ss++^'0');\n    return d;\n}\nint n,m,S,fa[N],head[M],cnt,id1[16][N],id2[16][N],dep[N],F[16][N];\nint to[12345678],nxt[12345678],dd[12345678];\nstruct extra{\n\tint u1,v1,u2,v2,w;\n}ext[1000005];\nint cne,cnn,dis[M];\ninline void addedge(int u,int v,int w){if(u&&v)to[++cnt]=v,nxt[cnt]=head[u],dd[cnt]=w,head[u]=cnt;}\ninline int find(int x){return x==fa[x]?x:fa[x]=find(fa[x]);}\nvoid dfs(int now,int pre){for(int i=head[now];i;i=nxt[i])if(to[i]!=pre)F[0][to[i]]=now,dep[to[i]]=dep[now]+1,dfs(to[i],now);}\nheap q;\nvoid spfa(){\n\tmemset(dis,0x3f,sizeof dis);\n\tdis[S]=0;\n\tq.push(S);\n\twhile(!q.empty()){\n\t\tconst LL x=q.top();q.pop();\n\t\tconst int d=x>>32,u=(int)x;\n\t\tif(d!=dis[u])continue;\n\t\tfor(int i=head[u];i;i=nxt[i])\n\t\tif(dis[to[i]]>d+dd[i])dis[to[i]]=d+dd[i],q.push((LL)dis[to[i]]<<32|to[i]);\n\t}\n}\ninline int LCA(int u,int v){\n\tif(dep[u]<dep[v])u^=v^=u^=v;\n\tfor(int i=15;~i;--i)if(dep[F[i][u]]>=dep[v])u=F[i][u];\n\tif(u==v)return u;\n\tfor(int i=15;~i;--i)if(F[i][u]!=F[i][v])u=F[i][u],v=F[i][v];\n\treturn F[0][u];\n}\ninline void link1(int u,int top,const int&w){\n\tif(u==top)return addedge(u,cnn,w);\n\tint i=0;\n\twhile(i<15&&F[i+1][u]&&dep[F[i+1][u]]>=dep[top]-1)++i;\n\taddedge(id2[i][u],cnn,w);\n\tif(F[i][u]!=F[0][top]){\n\t\tint d=dep[F[i][u]]-dep[top]+1;\n\t\tfor(int j=15;~j;--j)\n\t\tif(d>>j&1)u=F[j][u];\n\t\taddedge(id2[i][u],cnn,w);\n\t}\n}\ninline void link2(int u,int top){\n\tif(u==top)return addedge(cnn,u,0);\n\tint i=0;\n\twhile(i<15&&F[i+1][u]&&dep[F[i+1][u]]>=dep[top]-1)++i;\n\taddedge(cnn,id1[i][u],0);\n\tif(F[i][u]!=F[0][top]){\n\t\tint d=dep[F[i][u]]-dep[top]+1;\n\t\tfor(int j=15;~j;--j)\n\t\tif(d>>j&1)u=F[j][u];\n\t\taddedge(cnn,id1[i][u],0);\n\t}\n}\nint main(){\n\tn=readint(),m=readint(),S=readint();\n\tcnn=n;\n\tfor(int i=1;i<=n;++i)fa[i]=i;\n\twhile(m--)\n\tif(readint()==1){\n\t\tint u1=readint(),v1=readint(),u2=readint(),v2=readint(),w=readint();\n\t\tif(find(u1)==find(v1)&&find(u2)==find(v2))ext[++cne]=(extra){u1,v1,u2,v2,w};\n\t}else{\n\t\tint u=readint(),v=readint(),w=readint();\n\t\tint x=find(u),y=find(v);\n\t\tif(x!=y)addedge(u,v,w),addedge(v,u,w),fa[y]=x;\n\t}\n\tfor(int i=1;i<=n;++i)\n\tif(find(i)==i)dfs(i,0);\n\tfor(int i=1;i<=n;++i)id1[0][i]=id2[0][i]=i;\n\tfor(int i=1;i<16;++i)\n\tfor(int j=1;j<=n;++j){\n\t\tF[i][j]=F[i-1][F[i-1][j]];\n\t\tif(id1[i-1][j]||id1[i-1][F[i-1][j]])\n\t\tid1[i][j]=++cnn,id2[i][j]=++cnn;else continue;\n\t\taddedge(id1[i][j],id1[i-1][j],0),addedge(id2[i-1][j],id2[i][j],0);\n\t\taddedge(id1[i][j],id1[i-1][F[i-1][j]],0),addedge(id2[i-1][F[i-1][j]],id2[i][j],0);\n\t}\n\tfor(int i=1;i<=cne;++i){\n\t\tconst int w=ext[i].w;\n\t\t++cnn;\n\t\tint u=ext[i].u1,v=ext[i].v1,lca=LCA(u,v);\n\t\tlink1(u,lca,w),link1(v,lca,w);\n\t\tu=ext[i].u2,v=ext[i].v2,lca=LCA(u,v);\n\t\tlink2(u,lca),link2(v,lca);\n\t}\n\tspfa();\n\tfor(int i=1;i<=n;++i)\n\tif(dis[i]==0x3f3f3f3f)printf(\"-1 \");else printf(\"%d \",dis[i]);\n\treturn 0;\n}\n```",
        "postTime": 1557047337,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5344 \u3010\u3010XR-1\u3011\u901b\u68ee\u6797\u3011"
    },
    {
        "content": "\u8003\u8651\u500d\u589e\u4f18\u5316\u8fde\u8fb9.\n\n\u4f18\u5316\u8fde\u8fb9\u901a\u5e38\u5c31\u662f\u8003\u8651\u4e00\u79cd\u6570\u636e\u7ed3\u6784$S$\uff0c\u8fd9\u4e2a$S$\u4e00\u822c\u5177\u6709\u5206\u6cbb\u7ed3\u6784\uff0c\u4e14$S$\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u662f\u56fe\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9.\u5efa\u7acb\u4e00\u4e2a\u5165$S$\u548c\u4e00\u4e2a\u51fa$S$\uff0c\u5176\u4e2d\u51fa$S$\u7684\u8fb9\u7531\u5206\u6cbb\u7ed3\u6784\u7684\u5b50\u533a\u95f4\u6307\u5411\u7236\u4eb2\uff0c\u5165$S$\u7684\u8fb9\u4ece\u7236\u4eb2\u6307\u5411\u513f\u5b50\uff0c\u8fb9\u6743\u90fd\u4e3a$0$.\u6bcf\u6b21\u4ece$[u_1,v_1]$\u5411$[u_2,v_2]$\u8fde\u8fb9\u65f6\uff0c\u5148\u65b0\u5efa\u865a\u70b9$T$\uff0c\u5728\u51fa$S$\u4e0a\u63d0\u53d6\u51fa$[u_1,v_1]$\u5411$T$\u8fde\u8fb9\u6743\u4e3a$w$\u7684\u8fb9\uff0c\u5728\u5165$S$\u4e0a\u63d0\u53d6\u51fa$[u_2,v_2]$\u5e76\u4ece$T$\u5411\u5176\u8fde\u8fb9\uff0c\u5bb9\u6613\u770b\u51fa\u8fd9\u548c\u76f4\u63a5\u8fdb\u884c\u66b4\u529b\u8fde\u8fb9\u662f\u7b49\u6548\u7684.\n\n\u8003\u8651\u5148\u8fde$2$\u64cd\u4f5c\u7684\u8fb9\uff0c\u540c\u65f6\u5b58\u4e0b\u6765\u5408\u6cd5\u7684$1$\u64cd\u4f5c\u7684\u8fb9.$2$\u64cd\u4f5c\u663e\u7136\u53ef\u4ee5\u5e76\u67e5\u96c6\u7ef4\u62a4.\n\n$1$\u64cd\u4f5c\u662f\u4e24\u6761\u6811\u94fe\u4e4b\u95f4\u7684\u8fde\u8fb9\uff0c\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784\u662f\u500d\u589e.\u663e\u7136\u91cd\u590d\u8fde\u8fb9\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff0c\u6240\u4ee5\u53ef\u4ee5\u50cfST\u8868\u90a3\u6837\u628a\u4e00\u6bb5\u94fe\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u7136\u540e\u8fde\u8fb9.\u6bcf\u6b21\u8fde\u8fb9\u6d89\u53ca\u5230\u7684\u70b9\u6570\u548c\u8fb9\u6570\u90fd\u662f$O(1)$\u7684.\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4f1a\u6d89\u53ca\u5230\u4e00\u4e2a\u6c42\u67d0\u4e2a\u70b9\u7684$k$\u7ea7\u7956\u5148\u7684\u64cd\u4f5c\uff0c\u4f7f\u7528\u957f\u94fe\u5256\u5206\u53ef\u4ee5\u505a\u5230$O(1)$\uff0c\u4f46\u662f\u6211\u61d2\u5f97\u5199\u6240\u4ee5\u76f4\u63a5\u66b4\u529b\u500d\u589e\u4e86.\n\n\u8fd9\u6837\u8fde\u5b8c\u8fb9\u4e4b\u540e\u6574\u5f20\u56fe\u7684\u70b9\u6570\u548c\u8fb9\u6570\u90fd\u662f$O(n\\log n+m)$\u7684\uff0cDijkstra\u5373\u53ef\u505a\u5230$O((n\\log n+m)\\log n)$.\n\n\u7406\u8bba\u4e0a\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u9ad8\u5999\u7684\u6570\u636e\u7ed3\u6784\u6280\u5de7\u628a$n\\log n$\u53d8\u6210$n$\uff0c\u4e0d\u8fc7\u6ca1\u5565\u5fc5\u8981\u4e86(\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nconst int N=1e7;\nstruct DSU\n{\n\tint fa[100000];\n\tint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\n}bcj;\nint dfn[100000],euler[100005][20],dep[100005],f[100005][20],id1[100005][20],id2[100005][20],dfs_cnt,lg[100005];\nint nxt[N],fst[3000000],mm,n,m,S,dis[3000000],node_cnt;\nstruct Edge{int v,w;}e[N];\nstruct Q{int u1,v1,u2,v2,w;}qu[1500000];\nvoid ade(int u,int v,int w){e[++mm]=(Edge){v,w},nxt[mm]=fst[u],fst[u]=mm;}\nvoid dfs(int u,int fa)\n{\n\tdfn[u]=++dfs_cnt,euler[dfs_cnt][0]=u;\n\tf[u][0]=fa,id1[u][0]=id2[u][0]=u,dep[u]=dep[fa]+1;\n\tfor(int i=1;(1<<i)<dep[u];i++)f[u][i]=f[f[u][i-1]][i-1];\n\tfor(int i=fst[u];i;i=nxt[i])\n\t{\n\t\tint v=e[i].v;if(v==fa)continue;\n\t\tdfs(v,u);euler[++dfs_cnt][0]=u;\n\t}\n}\nvoid link1(int u,int v,int t,int w)\n{\n\tint len=dep[u]-dep[v]+1;\n\tint x1=id1[u][lg[len]],x2=u,res=len-(1<<lg[len]);\n\tfor(;res;res-=res&-res)x2=f[x2][lg[res&-res]];\n\tx2=id1[x2][lg[len]];\n\tade(x1,t,w),ade(x2,t,w);\n}\nvoid link2(int u,int v,int t,int w)\n{\n\tint len=dep[u]-dep[v]+1;\n\tint x1=id2[u][lg[len]],x2=u,res=len-(1<<lg[len]);\n\tfor(;res;res-=res&-res)x2=f[x2][lg[res&-res]];\n\tx2=id2[x2][lg[len]];\n\tade(t,x1,w),ade(t,x2,w);\n}\nint lca(int u,int v)\n{\n\tu=dfn[u],v=dfn[v];if(u>v)swap(u,v);\n\tint len=lg[v-u+1];\n\treturn dep[euler[u][len]]<dep[euler[v-(1<<len)+1][len]]?euler[u][len]:euler[v-(1<<len)+1][len];\n}\nstruct ZKW_Seg\n{\n\tint l,a[6000000];\n\tvoid build(){l=1;while(l<node_cnt)l<<=1;--l;for(int i=1;i<=node_cnt;i++)a[i+l]=i;}\n\tvoid upd(int x){for(int i=(x+l)>>1;i;i>>=1)a[i]=dis[a[i<<1]]<dis[a[i<<1|1]]?a[i<<1]:a[i<<1|1];}\n\tvoid del(int x){a[x+l]=0;upd(x);}\n}q;\nvoid spfa(int S)\n{\n\tfor(int i=0;i<=node_cnt;i++)dis[i]=1005000000;q.build();\n\tdis[S]=0;q.upd(S);\n\twhile(dis[q.a[1]]!=1005000000)\n\t{\n\t\tint u=q.a[1];q.del(u);\n\t\tfor(int i=fst[u];i;i=nxt[i])\n\t\t{\n\t\t\tint v=e[i].v;\n\t\t\tif(dis[u]+e[i].w<dis[v])\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+e[i].w;\n\t\t\t\tq.upd(v);\n\t\t\t}\n\t\t}\n\t}\n}\nint getin()\n{\n\tint x=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')x=x*10+ch-48,ch=getchar();\n\treturn x;\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&S);\n\tint qn=0;\n\tfor(int i=1;i<=n;i++)bcj.fa[i]=i;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint opt,u1,v1,u2,v2,w;\n\t\topt=getin();\n\t\tif(opt==1)\n\t\t{\n\t\t\tu1=getin(),v1=getin(),u2=getin(),v2=getin(),w=getin();\n\t\t\tif(bcj.find(u1)!=bcj.find(v1)||bcj.find(u2)!=bcj.find(v2))continue;\n\t\t\tqu[++qn]=(Q){u1,v1,u2,v2,w};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tu1=getin(),v1=getin(),w=getin();\n\t\t\tint fu=bcj.find(u1),fv=bcj.find(v1);\n\t\t\tif(fu==fv)continue;\n\t\t\tade(u1,v1,w),ade(v1,u1,w),bcj.fa[fu]=fv;\n\t\t}\n\t}\n\tlg[0]=-1;for(int i=1;i<=(n<<1);i++)lg[i]=lg[i>>1]+1;\n\tfor(int i=1;i<=n;i++)if(!dfn[i])dfs(i,0);\n//\tfor(int i=1;i<=n;i++)cout<<dep[i]<<\" \";puts(\"\");\n\tnode_cnt=n;\n\tfor(int i=1;(1<<i)<n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif((1<<i)<=dep[j])\n\t\t\t{\n\t\t\t\tid1[j][i]=++node_cnt,id2[j][i]=++node_cnt;\n\t\t\t\tade(id1[j][i-1],id1[j][i],0),ade(id1[f[j][i-1]][i-1],id1[j][i],0);\n\t\t\t\tade(id2[j][i],id2[j][i-1],0),ade(id2[j][i],id2[f[j][i-1]][i-1],0);\n\t\t\t}\n\tfor(int i=1;(1<<i)<=dfs_cnt;i++)\n\t\tfor(int j=1;j+(1<<i)-1<=dfs_cnt;j++)\n\t\t\teuler[j][i]=dep[euler[j][i-1]]<dep[euler[j+(1<<(i-1))][i-1]]?euler[j][i-1]:euler[j+(1<<(i-1))][i-1];\n\tfor(int i=1;i<=qn;i++)\n\t{\n\t\tint u1=qu[i].u1,v1=qu[i].v1,u2=qu[i].u2,v2=qu[i].v2,w=qu[i].w;\n\t\tint l1=lca(u1,v1),l2=lca(u2,v2);int u=++node_cnt;\n//\t\tcout<<u1<<\" \"<<v1<<\" \"<<u2<<\" \"<<v2<<endl;\n//\t\tcout<<dfn[u2]<<\" \"<<dfn[v2]<<endl;\n//\t\tcout<<l1<<\" \"<<l2<<endl;\n\t\tlink1(u1,l1,u,w);if(v1!=l1)link1(v1,l1,u,w);\n\t\tlink2(u2,l2,u,0);if(v2!=l2)link2(v2,l2,u,0);\n//\t\tcout<<i<<endl;\n\t}\n\tspfa(S);\n\tfor(int i=1;i<=n;i++)\n\t\tif(dis[i]>1000000000)printf(\"-1 \");\n\t\telse printf(\"%d \",dis[i]);\n\tputs(\"\");\n}\n```",
        "postTime": 1579128927,
        "uid": 22136,
        "name": "qwaszx",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5344 \u3010\u3010XR-1\u3011\u901b\u68ee\u6797\u3011"
    },
    {
        "content": "- \u6b64\u9898\u4e3a\u5f00\u6446\u8ba1\u5212 T3\u3002\n![\u4e0d\u53ef\u63cf\u8ff0\u7684\u6050\u6016\u7269\u4f53](https://cdn.luogu.com.cn/upload/pic/57782.png)\n- [\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u677f\u5b50](https://www.luogu.com.cn/record/64203687)\uff0c[\u57fa\u7840\u8bb2\u89e3](https://www.luogu.com.cn/blog/luo1gu1zui1bang1/xian-duan-shu)\u3002\n- \u7279\u522b\u9e23\u8c22\uff1a[\u5946\u4f6c](https://www.luogu.com.cn/user/58543)\u3002\n\n**[\u9898\u610f](https://www.luogu.com.cn/problem/P5344)**\n- \u7ed9\u51fa\u4e00\u68f5\u68ee\u6797\uff0c\u652f\u6301\u6811\u94fe\u548c\u6811\u94fe\u4e4b\u95f4\u7684\u70b9\u4e24\u4e24\u8fde\u8fb9\uff0c\u6c42\u65b0\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def\u3002\n\n**\u505a\u6cd5 1**\n- \u76f4\u63a5\u6811\u94fe\u5256\u5206\uff08\u7528\u5185\u90e8\u7684\u7ebf\u6bb5\u6811\uff09\u4f18\u5316\u5efa\u56fe\uff01\u4f60\u53d1\u73b0\u53ea\u8981\u6570\u636e\u5361\u6811\u5256\u590d\u6742\u5ea6\u5c31\u662f $O(m\\log^3n)$\uff0c\u663e\u7136\u4f1a\u88ab\u5361\uff0c\u800c\u4e14\u4f30\u8ba1\u5f88\u96be\u6253\u3002\n- \u70b9\u6570 $O(n)$ \u8fb9\u6570 $O(m\\log^2n)$\u2026\u2026\u6211\u89c9\u5f97\u8fd9\u4e0d\u592a\u597d\u3002\n\n**\u505a\u6cd5 2**\n- \u54b1\u4eec\u5c1d\u8bd5\u641e\u591a\u4e00\u70b9\u70b9\uff0c\u4f7f\u7528\u500d\u589e\uff1a\u6bcf\u4e2a\u70b9\u628a\u5b83\u7684 $2^k$ \u7ea7\u7956\u5148\u7684\u6811\u94fe\u5f3a\u884c\u8fde\u8fb9\uff01\u8fd9\u6837\u505a\u70b9\u6570\u662f $O(n\\log n)$\uff0c\u8fb9\u6570\u4e5f\u662f $O(m\\log n)$ \u7684\uff0c\u590d\u6742\u5ea6 $O(m\\log^2n)$\u3002~~\u5361\u5361\u5e38\u80fd\u8fc7\uff01~~ \n\n**\u505a\u6cd5 3**\n- \u4f60\u53d1\u73b0\u4e00\u4e2a\u91cd\u8981\u4e1c\u897f\u662f\u91cd\u590d\u8fde\u8fb9\u4e0d\u5f71\u54cd\u7b54\u6848\u6b38\uff01\u90a3\u4e48\u4f60\u53ef\u4ee5\u6765\u4e2a\u91cc\u5e94\u5916\u5408\uff08\u4f7f\u7528\u7c7b\u4f3c $\\text{ST}$ \u8868\u7684\u65b9\u6cd5\uff09\uff0c\u5982\u4e0b\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/4nq99zkk.png)\n- \u8fd9\u6837\u8fb9\u6570\u4e3a $O(n\\log n+m)$ \u603b\u590d\u6742\u5ea6\u4e3a $O(n\\log^2n+m\\log n)$ \u662f\u53ef\u8fc7\u7684\uff01[\u4ee3\u7801](https://www.luogu.com.cn/paste/8k6s7h4m)\u3002\n\n**\u505a\u6cd5 4**\n- \u6211\u73b0\u5728\u53d1\u73b0\uff0c\u6570\u636e\u7ed3\u6784\u4f18\u5316\u5efa\u8fb9\u7684\u529b\u91cf\u8fd8\u662f\u6709\u9650\u7684\u554a\u2026\u2026\u4eba\u4e0d\u8bba\u600e\u4e48\u4f18\u5316\u5efa\u8fb9\uff0c\u90fd\u65e0\u6cd5\u907f\u514d\u88ab\u5361\u5e38\u7684\u75db\u82e6\u2026\u2026\u6240\u4ee5\uff0c\u6211\u4e0d\u4f18\u5316\u5efa\u8fb9\u4e86\uff01\u6211\u8981\u4f18\u5316\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\uff01\n- ~~\u5176\u5b9e\u662f\u8fd9\u6837\u7684 BZOJ 4699 \u662f\u8fd9\u9898\u7684\u52a0\u5f3a\u7248\uff0c\u867d\u7136 BZOJ \u5df2\u7ecf\u7206\u70b8\u4e86\u4f46\u8fd8\u662f\u53ef\u4ee5\u53bb\u7206\u70b8 OJ \u8bbf\u95ee\u7684\u3002~~\n- \u8003\u8651\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\u7684\u8fc7\u7a0b\uff0c\u53d6\u51fa\u5f53\u524d\u7684\u6700\u5c0f\u70b9\uff0c\u8fdb\u884c\u8fb9\u7684\u66f4\u65b0\uff0c\u770b\u8d77\u6765\u94fe\u7684\u8fb9\u5f88\u591a\uff0c\u4f46\u5176\u5b9e\u5165\u94fe\u53ea\u9700\u8981\u9009\u51fa\u8ddd\u79bb\u6700\u77ed\u7684\u70b9\u66f4\u65b0\u51fa\u94fe\u5c31\u597d\u4e86\u3002\n- \u6211\u4eec\u9009\u51fa\u6700\u5c0f\u7684\u70b9\u4e0e\u94fe\u7684\u7ec4\u5408\uff0c\u8fd9\u6837\u94fe\u7684\u66f4\u65b0\u662f\u5355\u8c03\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u5e76\u67e5\u96c6\u8986\u76d6\u641e\u3002\n- \u63a5\u4e0b\u6765\u7684\u95ee\u9898\u662f\u5feb\u901f\u627e\u5230\u7ecf\u8fc7\u67d0\u70b9\u7684\u6240\u6709\u8def\u5f84\uff0c\u5224\u5b9a\u662f $x=\\text{lca}(u,v)$ \u6216\u8005\u53ea\u6709\u4e00\u4e2a\u70b9\u5728 $x$ \u7684\u5b50\u6811\u4e0a\uff0c\u7b2c\u4e00\u79cd\u60c5\u51b5\u76f4\u63a5\u66b4\u529b\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u8f6c\u5316\u4e3a $\\text{dfs}$ \u5e8f\u3002\n- \u8ba9\u8def\u5f84\u4ece\u5de6\u5411\u53f3\u6392\u5e03\uff0c\u5bf9\u4e8e\u533a\u95f4\uff0c\u67e5\u8be2\u6700\u5de6\u7684\u201c\u5411\u53f3\u8def\u5f84\u201d\u548c\u6700\u53f3\u7684\u5411\u5de6\u8def\u5f84\uff0c\u53ea\u9700\u8981\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u4ee3\u7801\u5b9e\u73b0\u5148\u5495\u7740\u3002",
        "postTime": 1658240606,
        "uid": 260884,
        "name": "WeLikeStudying",
        "ccfLevel": 0,
        "title": "\u3010\u5f00\u6446\u8ba1\u5212 #1\u3011\u5e7f\u8eab\u7075"
    },
    {
        "content": "[P5344 \u3010XR-1\u3011\u901b\u68ee\u6797](https://www.luogu.com.cn/problem/P5344)\n\n\u5728\u5199\u8fd9\u9053\u9898\u4e4b\u524d\uff0c\u672c\u849f\u84bb\u66fe\u5b66\u8fc7\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u4e8e\u662f\u5728\u770b\u5230\u533a\u95f4\u52a0\u8fb9\u64cd\u4f5c\u548c\u5355\u70b9\u52a0\u8fb9\u64cd\u4f5c\u540e\uff0c\u7acb\u9a6c\u60f3\u5230\u4e86\u6811\u5256\u52a0\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u3002\u4f46\u4e00\u770b\u5230\u6570\u636e\u8303\u56f4\uff0c\u8c8c\u4f3c\u4e0d\u592a\u80fd\u8fc7\uff0c\u53ea\u80fd\u8003\u8651\u522b\u7684\u529e\u6cd5\u3002\n\n\u867d\u7136\u6811\u5256\u52a0\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u4e0d\u592a\u80fd\u8fc7\uff0c\u4f46\u662f\u5b83\u53ef\u4ee5\u7ed9\u6211\u4eec\u4e00\u4e9b\u542f\u53d1\uff0c\u6211\u4eec\u8981\u4f7f\u7528\u4e00\u79cd\u5927\u533a\u95f4\u8986\u76d6\u5c0f\u533a\u95f4\u7684 $\\log$ \u7ea7\u522b\u7684\u6570\u636e\u7ed3\u6784\u6765\u4f18\u5316\u5efa\u56fe\u3002\u9664\u4e86\u7ebf\u6bb5\u6811\uff0c\u500d\u589e\u8c8c\u4f3c\u4e5f\u53ef\u4ee5\u6ee1\u8db3\u8fd9\u6837\u7684\u9700\u6c42\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u4ee4 $f_{i,j}$ \u8868\u793a\u4ece\u8282\u70b9 $i$ \u5f00\u59cb\uff0c\u8d70 $2^j$ \u4e2a\u8282\u70b9\u53ef\u4ee5\u5230\u8fbe\u7684\u8282\u70b9\u3002\u8fd9\u91cc\u8d70\u8fc7\u7684\u8282\u70b9\u662f\u6cbf\u7740\u64cd\u4f5c $2$ \u7684\u8fb9\u8d70\u7684\u3002\u5f53\u7136\uff0c\u6211\u4eec\u628a\u65e0\u5411\u8fb9\u770b\u6210\u6709\u5411\u8fb9\uff0c\u5373\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u7531\u65e0\u5411\u8fb9\u6784\u6210\u7684\u8fde\u901a\u5757\u770b\u6210\u4ee5\u67d0\u4e2a\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u4e00\u9897\u6709\u6839\u6811\uff0c\u5177\u4f53\u662f\u54ea\u4e00\u4e2a\u70b9\u53d6\u51b3\u4e8e\u904d\u5386\u7684\u5148\u540e\u987a\u5e8f\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $f_{i,j}$\uff0c\u6211\u4eec\u5efa\u7acb\u4e24\u4e2a\u865a\u70b9\uff0c\u4e00\u4e2a\u4e3a\u5165\u70b9\uff0c\u4e00\u4e2a\u4e3a\u51fa\u70b9\u3002\u4ece\u5b83\u7684\u5165\u70b9\u5411\u5b83\u5305\u542b\u7684\u4e24\u4e2a\u5b50\u533a\u95f4\u7684\u5165\u70b9\u8fde\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\uff0c\u4ece\u5b83\u5305\u542b\u7684\u4e24\u4e2a\u5b50\u533a\u95f4\u7684\u51fa\u70b9\u5411\u5b83\u7684\u51fa\u70b9\u8fde\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u64cd\u4f5c $2$\uff0c\u6211\u4eec\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u64cd\u4f5c $1$\uff0c\u5982\u679c\u5408\u6cd5\uff0c\u6211\u4eec\u5c31\u5b58\u4e0b\u6765\uff0c\u53cd\u4e4b\u5c31\u76f4\u63a5\u820d\u5f03\u3002\u8bfb\u5165\u5b8c\u6240\u6709\u64cd\u4f5c\u540e\uff0c\u6211\u4eec\u6309\u7167\u4e0a\u8ff0\u500d\u589e\u4f18\u5316\u5efa\u56fe\u7684\u65b9\u6cd5\u5efa\u56fe\uff0c\u7136\u540e\u679a\u4e3e\u6211\u4eec\u5b58\u4e0b\u6765\u7684\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u3002\u56e0\u4e3a\u8981\u627e\u5230\u4e24\u70b9\u5728\u6811\u4e0a\u7684\u8def\u5f84\uff0c\u56e0\u6b64\u6211\u4eec\u6c42 LCA\u3002\u5728\u6c42 LCA \u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f1a\u500d\u589e\u5730\u5f80\u4e0a\u8df3\uff0c\u5728\u8df3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8fdb\u884c\u52a0\u8fb9\u3002\u6211\u4eec\u65b0\u5efa\u4e24\u4e2a\u865a\u70b9\uff0c\u4e00\u4e2a\u8fde\u5411\u6240\u6709\u8df3\u5230\u7684 $f_{i,j}$ \u7684\u5165\u70b9\uff0c\u79f0\u4e3a\u5165\u865a\u70b9\u3002\u4e00\u4e2a\u7531\u6240\u6709\u8df3\u5230\u7684 $f_{i,j}$ \u7684\u51fa\u70b9\u8fde\u5411\u5b83\uff0c\u6210\u4e3a\u51fa\u865a\u70b9\u3002\u7136\u540e\u7531\u51fa\u865a\u70b9\u5411\u5165\u865a\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $w$ \u7684\u8fb9\u3002\n\n\u6700\u540e\u8dd1\u4e00\u904d Dijkstra \u5c31\u53ef\u4ee5\u4e86\uff0c\u5177\u4f53\u7ec6\u8282\u770b\u4ee3\u7801\u3002\n\ncode\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=50010,M=1000010,NN=4000010,NE=32000010,INF=0x3f3f3f3f;\ntypedef pair<int,int> pii;\nint n,m,s,maxk,cntv,cntop;\nint p[N];//\u5e76\u67e5\u96c6\nint h[N],to[N<<1],nxt[N<<1],idx;//\u65e0\u5411\u8fb9\nint nh[NN],nto[NE],nnxt[NE],edge[NE],nidx;//\u6709\u5411\u8fb9\nint dist[NN];\nbool st[NN];\nint dep[N],fa[N][16],in[N][16],out[N][16];//\u8282\u70b9\u4fe1\u606f\nstruct Operation{\n\tint u1,v1,u2,v2,w;\n}op[M];//\u64cd\u4f5c\nint find(int x)\n{\n    if (x==p[x]) return x;\n    else return p[x]=find(p[x]);\n}\ninline void add_nodir(int a,int b)\n{\n\tto[++idx]=b,nxt[idx]=h[a],h[a]=idx;\n\tto[++idx]=a,nxt[idx]=h[b],h[b]=idx;\n}//\u5efa\u65e0\u5411\u8fb9\ninline void add_dir(int a,int b,int c)\n{\n\tnto[++nidx]=b;\n\tnnxt[nidx]=nh[a];\n\tedge[nidx]=c;\n\tnh[a]=nidx;\n}//\u5efa\u6709\u5411\u8fb9\nvoid dfs(int u,int f)\n{\n\tdep[u]=dep[fa[u][0]=f]+1;\n\tin[u][0]=++cntv,add_dir(cntv,u,0),add_dir(cntv,f,0);\n    out[u][0]=++cntv,add_dir(u,cntv,0),add_dir(f,cntv,0);\n    for (int j=0;j<maxk;++j)\n    {\n        fa[u][j+1]=fa[fa[u][j]][j];\n        in[u][j+1]=++cntv,add_dir(cntv,in[u][j],0),add_dir(cntv,in[fa[u][j]][j],0);\n        out[u][j+1]=++cntv,add_dir(out[u][j],cntv,0),add_dir(out[fa[u][j]][j],cntv,0);\n    }\n    for (int i=h[u];i;i=nxt[i]) if (to[i]!=f) dfs(to[i],u);\n}//\u521d\u59cb\u5316\u500d\u589e\u6570\u7ec4\u548c\u51fa\u5165\u70b9\ninline void lca_out(int x,int y,int vnode)\n{\n    if (dep[x]<dep[y]) swap(x,y);\n    add_dir(y,vnode,0);\n    for (int i=maxk;i>=0;--i)\n    {\n        if (dep[fa[x][i]]>=dep[y])\n        {\n            add_dir(out[x][i],vnode,0);\n            x=fa[x][i];\n        }\n    }\n    if (x==y) return;\n    for (int i=maxk;i>=0;--i)\n    {\n        if (fa[x][i]!=fa[y][i])\n        {\n            add_dir(out[x][i],vnode,0);\n            x=fa[x][i];\n            add_dir(out[y][i],vnode,0);\n            y=fa[y][i];\n        }\n    }\n    add_dir(out[x][0],vnode,0);\n}//\u51fa\u70b9\u5411\u865a\u70b9\u8fde\u8fb9\ninline void lca_in(int x,int y,int vnode)\n{\n    if (dep[x]<dep[y]) swap(x,y);\n    add_dir(vnode,y,0);\n    for (int i=maxk;i>=0;--i)\n    {\n        if (dep[fa[x][i]]>=dep[y])\n        {\n            add_dir(vnode,in[x][i],0);\n            x=fa[x][i];\n        }\n    }\n    if (x==y) return;\n    for (int i=maxk;i>=0;--i)\n    {\n        if (fa[x][i]!=fa[y][i])\n        {\n            add_dir(vnode,in[x][i],0);\n            x=fa[x][i];\n            add_dir(vnode,in[y][i],0);\n            y=fa[y][i];\n        }\n    }\n    add_dir(vnode,in[x][0],0);\n}//\u865a\u70b9\u5411\u5165\u70b9\u8fde\u8fb9\ninline void dijkstra(int s)\n{\n    memset(dist,0x3f,sizeof dist);\n    priority_queue<pii,vector<pii>,greater<pii>> q;\n    q.push({0,s});\n    dist[s]=0;\n    while (q.size())\n    {\n        auto x=q.top().second;\n        q.pop();\n        if (st[x]) continue;\n        st[x]=true;\n        for (int i=nh[x];i;i=nnxt[i])\n        {\n            int y=nto[i];\n            if (dist[y]>dist[x]+edge[i])\n            {\n                dist[y]=dist[x]+edge[i];\n                q.push({dist[y],y});\n            }\n        }\n    }\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&s);\n\tcntv=n;\n\twhile ((1<<maxk)<=n) maxk++;//\u6c42\u6700\u5927\u533a\u95f4\u957f\u5ea6\n\tmaxk--;\n\tfor (int i=1;i<=n;++i) p[i]=i;//\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n\tfor (int i=1;i<=m;++i)\n\t{\n\t\tint type,u,v,x,y,w;\n\t\tscanf(\"%d\",&type);\n\t\tif (type==1)\n\t\t{\n\t\t\tscanf(\"%d%d%d%d%d\",&x,&y,&u,&v,&w);\n\t\t\tif (find(x)!=find(y)||find(u)!=find(v)) continue;\n\t\t\top[++cntop]={x,y,u,v,w};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d%d%d\",&u,&v,&w);\n            x=find(u),y=find(v);\n\t\t\tif (x==y) continue;\n\t\t\tadd_nodir(u,v);\n\t\t\tadd_dir(u,v,w),add_dir(v,u,w);\n\t\t\tp[x]=y;\n\t\t}\n\t}\n\tfor (int i=1;i<=n;++i) if (!dep[i]) dfs(i,0);\n\tfor (int i=1;i<=cntop;++i)\n\t{\n\t\tlca_out(op[i].u1,op[i].v1,++cntv);\n\t\tlca_in(op[i].u2,op[i].v2,++cntv);\n\t\tadd_dir(cntv-1,cntv,op[i].w);\n\t}\n\tdijkstra(s);\n\tfor (int i=1;i<=n;++i) printf(\"%d \",dist[i]==INF?-1:dist[i]);\n\treturn 0;\n} \n```\n",
        "postTime": 1681917459,
        "uid": 767793,
        "name": "_ZSR_",
        "ccfLevel": 0,
        "title": "P5344 \u3010XR-1\u3011\u901b\u68ee\u6797"
    }
]