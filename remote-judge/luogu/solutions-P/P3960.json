[
    {
        "content": "qwq\u636e\u8bf4\u6b63\u89e3\u662f\u6811\u72b6\u6570\u7ec4\u4f46\u662f\u6211\u5b8c\u5168\u4e0d\u4f1a\u3002\u3002\u3002\n\n\u849f\u84bb\u53ea\u4f1a\u7528splay\u505aqwq\u3002\n\n\u6211\u4eec\u89c2\u5bdf\u6bcf\u4e00\u884c\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u6570\u4e4b\u5916\u7684\u6570\u5728\u64cd\u4f5c\u4e2d\u662f\u5982\u4f55\u53d8\u5316\u7684\u3002\n\n\u5982\u679c\u51fa\u961f\u5728(x,y)\uff0c\u90a3\u4e48\u7b2cx\u884c\uff08\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u6570\uff09\u4f1a\u5f39\u51fa\u7b2cy\u4e2a\u6570\uff0c\u5b83\u540e\u9762\u7684\u6570\u4f9d\u6b21\u5de6\u79fb\uff0c\u518d\u5728\u6700\u540e\u63d2\u5165\u4e00\u4e2a\u6570\uff08\u5c31\u662f\u6700\u540e\u4e00\u5217\u5f53\u524d\u7684\u7b2cx\u4e2a\u6570\uff09\uff1b\u7136\u540e\uff0c\u5bf9\u4e8e\u6700\u540e\u4e00\u5217\uff0c\u6211\u4eec\u8981\u5f39\u51fa\u7b2cx\u4e2a\u6570\uff08\u63d2\u5165\u5230\u7b2cx\u884c\uff09\uff0c\u518d\u5728\u6700\u540e\u63d2\u5165\u4e00\u4e2a\u6570\uff08\u5c31\u662f\u521a\u51fa\u961f\u7684\u90a3\u4e2a\uff09\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u65e0\u8bba\u662f\u5bf9\u4e8e\u884c\u8fd8\u662f\u5217\uff0c\u90fd\u8981\u6267\u884c\u4e24\u79cd\u64cd\u4f5c\uff1a\u7b2c\u4e00\uff0c\u5f39\u51fa\u7b2ck\u4e2a\u6570\uff0c\u7b2c\u4e8c\uff0c\u5728\u5c3e\u90e8\u63d2\u5165\u4e00\u4e2a\u6570\u3002\u8fd9\u53ef\u4ee5\u7528splay\u6765\u5b9e\u73b0\u3002\n\n\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u7a7a\u95f4\u590d\u6742\u5ea6\u662f$O(nm)$\u3002\n\n\u6211\u4eec\u53d1\u73b0\u6709\u4e9b\u4eba\u4ece\u59cb\u81f3\u7ec8\u90fd\u662f\u5de6\u53f3\u76f8\u90bb\u7684\uff0c\u8fd9\u4e9b\u4eba\u5bf9\u5e94\u7684splay\u8282\u70b9\u53ef\u4ee5\u5408\u5e76\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5728\u7ef4\u62a4splay\u7684\u65f6\u5019\uff0c\u6240\u6709\u8fde\u7eed\u7684\u6570\u7684\u533a\u95f4\u6211\u4eec\u7528\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\uff1b\n\n\u5982\u679c\u6211\u4eec\u53d1\u73b0\u8981\u5f39\u51fa\u7684\u6570\u5728\u67d0\u4e2a\u8282\u70b9\u5185\u90e8\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u62c6\u5f00\uff0c\u62c6\u62103\u4e2a\u8282\u70b9\uff08\u5176\u4e2d\u4e2d\u95f4\u90a3\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u6570\uff0c\u5c31\u662f\u6211\u4eec\u8981\u7684\u90a3\u4e2a\u6570\uff09\uff0c\u62c6\u70b9\u7684\u8fc7\u7a0b\u53ef\u4ee5\u76f4\u63a5\u8dd1splay\u4e0a\u7684insert\uff0c\u5220\u9664\u4e2d\u95f4\u90a3\u4e2a\u8282\u70b9\u5c31\u662fsplay\u4e0a\u7684\u5220\u9664\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nlogn)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\nnamespace rqy{            //\u547d\u540d\u7a7a\u95f4\u662f\u4e3a\u4e86\u9632\u6b62\u548c\u67d0\u4e9b\u5947\u602a\u7684\u53d8\u91cf\u547d\u540d\u51b2\u7a81\uff0c\u4e5f\u53ef\u4ee5\u53bb\u6389\n  typedef long long LL;\n  const int N = 3000500;\n  int fa[N], son[N][2], cnt;\n  LL l[N], r[N], siz[N]; //l, r\u8868\u793a\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\uff0c\u6b64\u5904\u5de6\u95ed\u53f3\u5f00\uff08\u4e2a\u4eba\u4e60\u60ef\uff09\n  struct Splay{\n    int root;\n    inline int newNode(LL ll, LL rr) {    //ll, rr\u8868\u793a\u65b0\u8282\u70b9\u7684\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\n      ++cnt;\n      fa[cnt] = son[cnt][0] = son[cnt][1] = 0;\n      siz[cnt] = (r[cnt] = rr) - (l[cnt] = ll);\n      return cnt;\n    }\n    inline void init(LL ll, LL rr) {      //\u521d\u59cb\u5316\u6811\uff0c\u53ea\u6709\u4e00\u4e2a\u5bf9\u5e94[ll,rr)\u7684\u6839\u8282\u70b9\u3002\n      root = newNode(ll, rr);\n    }\n    inline void upd(int x) { siz[x] = siz[son[x][0]] + siz[son[x][1]] + r[x] - l[x]; }\n    inline int dir(int x) { return son[fa[x]][1] == x; }    //x\u662ffa[x]\u7684\u54ea\u4e2a\u513f\u5b50\n    inline void rotate(int x) {   //\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\n      int d = dir(x), f = fa[x];\n      fa[x] = fa[f];\n      if (f == root) root = x;\n      else son[fa[f]][dir(f)] = x;\n      if (son[f][d] = son[x][d ^ 1]) fa[son[f][d]] = f;\n      fa[son[x][d ^ 1] = f] = x;\n      upd(f);\n      upd(x);\n    }\n    void splay(int x) {   //\u540c\u4e0a\n      for (; fa[x]; rotate(x))\n        if (fa[fa[x]]) rotate(dir(x) == dir(fa[x]) ? fa[x] : x);\n    }\n    int splitNode(int x, LL k) {  //\u628a\u8282\u70b9x\u5206\u88c2\uff0c\u5206\u88c2\u540ex\u7684\u533a\u95f4\u91cc\u524dk\u4e2a\u6570\u8fd8\u5728x\u8282\u70b9\u4e0a\uff0c\n      k += l[x];                  //\u540e\u8fb9\u7684\u6570\u5bf9\u5e94\u65b0\u8282\u70b9\uff08\u5373\u8be5\u51fd\u6570\u8fd4\u56de\u503c\uff09\n      int y = newNode(k, r[x]);\n      r[x] = k;\n      if (son[x][1] == 0) {\n        fa[son[x][1] = y] = x;\n      } else {\n        int t = son[x][1];\n        while (son[t][0]) t = son[t][0];\n        fa[son[t][0] = y] = t;\n        while (t != x) upd(t), t = fa[t];\n      }\n      splay(y);\n      return y;\n    }\n    LL popKth(LL k) {             //\u5f39\u51fa\u7b2ck\u5927\u6570\n      int o = root;\n      while (1) {\n        if (siz[son[o][0]] >= k) {\n          o = son[o][0];\n        } else {\n          k -= siz[son[o][0]];\n          if (k <= r[o] - l[o]) {\n            if (k != r[o] - l[o]) splitNode(o, k);\n            if (k != 1) o = splitNode(o, k - 1);\n            break;\n          } else {\n            k -= r[o] - l[o];\n            o = son[o][1];\n          }\n        }\n      }\n      splay(o);\n      fa[son[o][0]] = fa[son[o][1]] = 0;\n      if (!son[o][0]) {           //splay\u5220\u9664\n        root = son[o][1];\n      } else {\n        int t = son[o][0];\n        while (son[t][1]) t = son[t][1];\n        splay(t);\n        upd(root = fa[son[t][1] = son[o][1]] = t);\n      }\n      return l[o];\n    }\n    void pushBack(LL k) {         //\u5c3e\u90e8\u63d2\u5165\u6570k\n      int y = newNode(k, k + 1);\n      if (!root) {\n        root = y;\n      } else {\n        int o = root;\n        while (son[o][1]) o = son[o][1];\n        splay(o);\n        upd(fa[son[o][1] = y] = o);\n      }\n    }\n  };\n  Splay s[N];\n  void main() {\n    cnt = 0;\n    int n, m, q;\n    scanf(\"%d%d%d\", &n, &m, &q);\n    for (LL i = 1; i <= n; ++i) s[i].init((i - 1) * m + 1, i * m);\n    s[0].init(m, m + 1);\n    for (LL i = 2; i <= n; ++i) s[0].pushBack(i * m);\n    int x, y;\n    LL p;\n    while (q--) {\n      scanf(\"%d%d\", &x, &y);\n      s[x].pushBack(s[0].popKth(x));\n      printf(\"%lld\\n\", p = s[x].popKth(y));\n      s[0].pushBack(p);\n    }\n  }\n};\nint main() {\n  rqy::main();\n  return 0;\n}\n\n```",
        "postTime": 1510566225,
        "uid": 7868,
        "name": "_rqy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "> \u6211\u662f\u6d1b\u8c37\u5168\u7ad9\u8dd1\u5f97\u6700\u5feb\u7684\uff0c1488ms\u3002\n> \u4f7f\u7528\u7b5b\u9009\u6700\u4f18\u89e3\u7684\u65b0\u529f\u80fd\u5c31\u53ef\u4ee5\u627e\u5230\u6211\u3002\n> \u4f7f\u7528\u7684\u662f NOIP \u8303\u56f4\u7684\u7b97\u6cd5\uff0c\u4e0d\u662f\u5e73\u8861\u6811\uff0c\u662f\u6811\u72b6\u6570\u7ec4\u3002\n\n------------\n\n\u8003\u8651\u524d $50 \\%$\uff1a\n\n\u89c2\u5bdf\u5230 $q \\leq 500$\uff0c\u4e5f\u5c31\u662f\u8bf4\u6709\u6548\u7684\u884c\u6570\u4e0d\u8d85\u8fc7 $500$ \u884c\u3002\n\n\u6211\u4eec\u628a\u884c\u6570\u79bb\u6563\u5316\u3002\n\n\u90a3\u4e48\u9700\u8981\u7ef4\u62a4\u7684\u6570\u7684\u6570\u91cf\u6700\u591a\u53ea\u6709 $q (m - 1) + n$ \u4e2a\n\n\u4e00\u6b21\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u6700\u591a\u662f $n + m - 1$\u3002\n\n\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O (q \\log q + q (n + m - 1))$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$\\mathcal O (q (m - 1) + n)$\u3002\n\n\n------------\n\n\u518d\u770b\u63a5\u4e0b\u6765\u7684 $30 \\%$\uff1a\n\n\u53d1\u73b0\u6709 $x_i = 1$\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6709\u6548\u7684\u683c\u5b50\u53ea\u6709\u7b2c\u4e00\u884c\u548c\u6700\u540e\u4e00\u5217\u3002\n\n\u6211\u4eec\u628a\u7b2c\u4e00\u884c\u548c\u6700\u540e\u4e00\u5217\u538b\u5230\u4e00\u8d77\u53bb\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5bf9\u8fd9\u4e2a\u5e8f\u5217\u652f\u6301\uff1a\n\n1. \u5220\u9664\u7b2c $k$ \u4e2a\u5143\u7d20\n\n2. \u5728\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\n\n\u8fd9\u4e2a\u64cd\u4f5c\u80fd\u7528\u5e73\u8861\u6811\u5b9e\u73b0\uff0c\u4f46\u662f\u6211\u7528\u6811\u72b6\u6570\u7ec4\u6765\u5b9e\u73b0\u3002\n\n\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e00\u4e2a 01 \u5e8f\u5217\uff0c\u7b2c $i$ \u4f4d\u4e0a\u662f 0 \u8868\u793a\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5df2\u7ecf\u88ab\u5220\u9664\u4e86\u6216\u8005\u8fd8\u6ca1\u6709\u88ab\u63d2\u5165\uff0c\u7b2c $i$ \u4f4d\u4e0a\u662f 1 \u8868\u793a\u8fd9\u4e00\u4f4d\u4e0a\u7684\u6570\u6ca1\u6709\u88ab\u5220\u9664\u3002\n\n\u90a3\u4e48\u5220\u9664\u64cd\u4f5c\u5c31\u662f $1 \\to 0$\uff0c\u63d2\u5165\u64cd\u4f5c\u5c31\u662f $0 \\to 1$\u3002\n\n\u7b2c $k$ \u4e2a\u5143\u7d20\u5c31\u662f\u524d\u7f00\u548c\u4e3a $k$ \u7684\u4f4d\u7f6e\u3002\n\n\u5bf9\u4e8e\u67e5\u627e\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u64cd\u4f5c\uff0c\u6211\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u4e8c\u5206\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\uff0c\u65f6\u95f4 $\\mathcal O (\\log n)$\u3002\n\n\n------------\n\n\u90a3\u4e48\u6700\u540e\u7684 $20 \\%$ \u5462\uff1f\n\n\u5b9a\u4e49\u4e00\u884c\u4e2d\u539f\u6765\u7684\u5143\u7d20\u4e3a**\u521d\u59cb**\u65f6\u8fd9\u4e00\u884c\u524d $m - 1$ \u4e2a\u5143\u7d20\u4e2d\uff0c\u6ca1\u6709\u79bb\u961f\u8fc7\u7684\u5143\u7d20\u3002\n\n\u6211\u4eec\u89c2\u5bdf\u5230\u5bf9\u4e8e\u672c\u6765\u5c31\u5728\u8fd9\u4e00\u884c\u4e2d\u7684\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7b97\u51fa\u5b83\u7684\u503c\uff0c\u800c\u4e0d\u7528\u5b58\u50a8\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5224\u65ad\u6bcf\u4e00\u6b21\u8be2\u95ee\u662f\u4e0d\u662f\u5728\u672c\u884c\u7684\u539f\u6765\u7684\u5143\u7d20\u4e2d\uff0c\u5982\u679c\u662f\uff0c\u76f4\u63a5\u5224\u65ad\u6389\u3002\n\n\u90a3\u4e48\u6bcf\u4e00\u884c\u7684\u201c\u975e\u539f\u6765\u7684\u5143\u7d20\u201d\u6709\u591a\u5c11\u4e2a\u5462\uff1f\n\n\u6211\u4eec\u4e0d\u77e5\u9053\u4e00\u884c\u4f1a\u6709\u591a\u5c11\u4e2a\uff0c\u4f46\u662f\u6211\u4eec\u77e5\u9053\uff0c\u6240\u6709\u884c\u7684\u8fd9\u6837\u7684\u5143\u7d20\u4e2a\u6570\u7684\u603b\u548c\u4e0d\u8d85\u8fc7 $q$ \u4e2a\u3002\n\n\u8fd9\u542f\u53d1\u4e86\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u884c\uff0c\u53ea\u5bf9\u5176\u201c\u975e\u539f\u6765\u7684\u5143\u7d20\u201d\u5f00\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u800c\u5bf9\u4e8e\u201c\u539f\u6765\u7684\u5143\u7d20\u201d\uff0c\u6211\u4eec\u76f4\u63a5\u79bb\u7ebf\u9884\u5904\u7406\u3002\n\n\u9884\u5904\u7406\u65f6\u9700\u8981\u5bf9\u6240\u6709\u7684\u8be2\u95ee\u6309\u7167 $x_i$ \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u8be2\u95ee\u7f16\u53f7\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u3002\n\n\u518d\u5bf9\u6700\u540e\u4e00\u5217\u5355\u72ec\u5904\u7406\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O (q \\log q + q \\log m + q \\log (n + q))$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n + m + q)$\u3002\n\n\u5177\u4f53\u770b\u4ee3\u7801\u5427\uff01\n\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#pragma GCC optimize(\"O2\")\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define F(i,a,b) for(int i=a;i<=b;++i)\n#define dF(i,a,b) for(int i=a;i>=b;--i)\n#define F2(i,a,b) for(int i=a;i<b;++i)\n#define getchar() (SS==TT&&(TT=(SS=BB)+fread(BB,1,1<<15,stdin),TT==SS)?EOF:*SS++)\n#define RR register\nchar BB[1<<15],*SS=BB,*TT=BB;\ninline int read(){\n\tRR int x;RR bool f;RR char c;\n\tfor (f=0; (c=getchar())<'0'||c>'9'; f=c=='-');\n\tfor (x=c-'0'; (c=getchar())>='0'&&c<='9'; x=(x<<3)+(x<<1)+c-'0');\n\treturn f?-x:x;\n}\nusing namespace std;\nint q,I[300010];\nlong long n,m,a[300010],b[300010];\ninline bool cmp(int p1,int p2){return a[p1]==a[p2]?p1<p2:a[p1]<a[p2];}\nint h[300010],len[300010],len2[300010],bit[900010];\nlong long arr[900010];\nlong long Ans[300010];\ninline void Ins(int*array,int siz,int i,int x){for(;i<=siz;array[i]+=x,i+=i&-i);}\ninline int binary(int*array,int siz,int x){\n\tint l=1,r,mid,sum,ans;\n\twhile(l<=siz&&array[l]<x) l<<=1, ans=l;\n\tr=l; sum=array[l>>=1];\n\twhile(l<r-1){\n\t\tmid=l+r>>1;\n\t\tif(mid>siz||array[mid]+sum>=x) r=mid, ans=mid;\n\t\telse l=mid, sum+=array[l];\n\t} ans=r;\n\treturn ans;\n}\nint stk[300001],top;\nint main(){\n\tn=read(), m=read(), q=read();\n\tF(i,1,q) a[i]=read(), b[i]=read(), I[i]=i;\n\tsort(I+1,I+q+1,cmp);\n\tF(i,1,m-1) Ins(bit,m-1,i,1);\n\tF(i,1,n) len[i]=m-1;\n\tF(i,1,q){\n\t\tif(a[I[i-1]]!=a[I[i]])\n\t\t\twhile(top) Ins(bit,m-1,stk[top--],1);\n\t\tif(b[I[i]]>len[a[I[i]]]) continue;\n\t\tint pos=binary(bit,m-1,b[I[i]]);\n\t\tAns[I[i]]=(a[I[i]]-1)*m+pos;\n\t\tIns(bit,m-1,pos,-1);\n\t\tstk[++top]=pos;\n\t\t--len[a[I[i]]];\n\t}\n\tint iter=0;\n\tF(i,1,n){\n\t\twhile(iter<=q&&a[I[iter]]<i) ++iter;\n\t\th[i]=iter-1;\n\t}\n\th[n+1]=q;\n\tmemset(bit,0,sizeof bit);\n\tF(i,1,n) len[i]=0, len2[i]=m-1; len[n+1]=n;\n\tF(i,1,n) Ins(bit+h[n+1],n+q,i,1), arr[q+i]=i*m;\n\tF(i,1,q){\n\t\tif(Ans[i]){\n\t\t\tint pos=binary(bit+h[n+1],n+q,a[i]);\n\t\t\tIns(bit+h[n+1],n+q,pos,-1);\n\t\t\tIns(bit+h[n+1],n+q,++len[n+1],1);\n\t\t\tarr[h[n+1]+len[n+1]]=Ans[i];\n\t\t\tIns(bit+h[a[i]],h[a[i]+1]-h[a[i]],++len[a[i]],1);\n\t\t\tarr[h[a[i]]+len[a[i]]]=arr[h[n+1]+pos];\n\t\t\t--len2[a[i]];\n\t\t}\n\t\telse{\n\t\t\tint pos=binary(bit+h[n+1],n+q,a[i]);\n\t\t\tIns(bit+h[n+1],n+q,pos,-1);\n\t\t\tIns(bit+h[n+1],n+q,++len[n+1],1);\n\t\t\tif(b[i]!=m){\n\t\t\t\tint pos2=binary(bit+h[a[i]],h[a[i]+1]-h[a[i]],b[i]-len2[a[i]]);\n\t\t\t\tIns(bit+h[a[i]],h[a[i]+1]-h[a[i]],pos2,-1);\n\t\t\t\tAns[i]=arr[h[a[i]]+pos2];\n\t\t\t\tIns(bit+h[a[i]],h[a[i]+1]-h[a[i]],++len[a[i]],1);\n\t\t\t\tarr[h[a[i]]+len[a[i]]]=arr[h[n+1]+pos];\n\t\t\t} else Ans[i]=arr[h[n+1]+pos];\n\t\t\tarr[h[n+1]+len[n+1]]=Ans[i];\n\t\t}\n\t}\n\tF(i,1,q) printf(\"%lld\\n\",Ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1515225886,
        "uid": 10703,
        "name": "\u5c0f\u7c89\u5154",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u89c2\u5bdf\u53d1\u73b0\u6bcf\u6b21\u53d8\u52a8\u6709\u5f71\u54cd\u7684\u70b9\u53ea\u6709\u5f53\u524d\u70b9\uff0c\u6700\u540e\u4e00\u884c\u6700\u540e\u4e00\u5217\u7684\u70b9\u4ee5\u53ca\u5f53\u524d\u8fd9\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u70b9\u3002\n\n\n\u6240\u4ee5\u53ef\u4ee5\u7528\u4e00\u4e2a\u652f\u6301\u5355\u70b9\u4fee\u6539\u7684\u7ebf\u6bb5\u6811\uff0c\u5efa\u7acbn + 1\u68f5\uff0c\u524dn\u68f5\u4ee3\u8868\u7b2cn\u884c\u524dm - 1\u4e2a\u7b54\u6848\uff0c\u7b2cn+1\u68f5\u8868\u793a\u6700\u540e\u4e00\u5217\u3002\n\n\n\u6bcf\u6b21\u64cd\u4f5c\u5c06\u5f53\u524d\u70b9(x,y)\u8bb0\u5f55\u8f93\u51fa\u5e76\u5220\u9664\uff0c\u7136\u540e\u52a0\u5165\u7b2cn+1\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u628a\u7b2cn+1\u68f5\u7684x\u4f4d\u7f6e\u8bb0\u5f55\u52a0\u5165\u5230\u7b2cx\u884c\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\n\n\n\u6ce8\u610f\u5982\u679cx\u672c\u8eab\u5c31\u5728\u6700\u540e\u4e00\u5217\u5c31\u4e0d\u7528\u7ba1\u3002\n\n\n\u8003\u8651q\u7684\u8303\u56f4\uff0c\u5373\u6700\u591a\u6709q\u4e2a\u70b9\u52a0\u5165\uff0c\u90a3\u4e48\u7ebf\u6bb5\u6811\u7684\u957f\u5ea6\u6700\u957f\u4e3a max(n,m) + q.\n\n\n\u800cn\uff0cm,q,\u7684\u8303\u56f4\u5747\u57283e5\u7684\u8303\u56f4\uff0c\u6240\u4ee5\u9700\u8981\u52a8\u6001\u5f00\u70b9\uff0c\u6240\u4ee5\u5185\u5b58\u6700\u591a\u53ea\u6709 3 \\* log n \\*q \uff0c\u641e\u5b9a\n\n[\u849f\u84bbnoip\u9898\u89e3\u4f20\u9001\u95e8](http://tgotp.science/noip2017-%E9%A2%98%E8%A7%A3/)\n\nc++\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n\n\n\n\n\n        \n        \n        \n        \n    \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#define rep(i,x,y) for(register int i = x;i <= y; ++ i)\n#define repd(i,x,y) for(register int i = x ;i >= y; -- i)\n#define abs(x) (x > 0 ? x : - (x))\nusing namespace std;\ntypedef long long ll;\ntemplate<class T>inline bool chkmax(T&x,T y) { return x < y ? x = y,1 : 0; }\ntemplate<class T>inline bool chkmin(T&x,T y) { return x > y ? x = y,1 : 0; }\ntemplate<typename T>inline void read(T&x)\n{\n    x = 0;char c;int sign = 1;\n    do { c = getchar();if(c == '-') sign = -1; }while(c < '0' || c > '9');\n    do { x = x * 10 + c - '0'; c = getchar();  }while(c <= '9' && c >= '0');\n    x *= sign;\n}\ninline void init(string name )\n{\n    string in = name + \".in\",out = name + \".out\";\n    freopen(in.c_str(),\"r\",stdin);\n    freopen(out.c_str(),\"w\",stdout);\n}\nconst int N = 3e5 + 500,M = 1e7;\nint n,m,now,o[N],q,root[N],SZ,sz[M],ls[M],rs[M];ll val[M];\ninline int get_sz(int l,int r)\n{\n    if(now == n + 1)\n    {\n        if(r <= n) return r - l + 1;\n        if(l <= n) return n - l + 1;\n        return 0;\n    }\n    if(r < m) return r - l + 1;\n    if(l < m) return m - l ;\n    return 0;\n}\nll query(int&id,int x,int l,int r)\n{\n    if(!id)\n    {\n        id = ++SZ;\n        sz[id] = get_sz(l,r);\n        if(l == r)\n        {\n            if(now <= n) val[id] = (ll)(now - 1) * m + l;\n            else val[id] = (ll)l * m;\n        }\n    }\n    sz[id]--;\n    if(l == r) return val[id];\n    int mid = (l + r) >> 1;\n    if((!ls[id] && x <= (mid - l + 1)) || x <= sz[ls[id]]) return query(ls[id],x,l,mid);\n    else\n    {\n        if(!ls[id]) x -= (mid - l + 1); else x -= sz[ls[id]];\n        return query(rs[id],x,mid + 1,r);\n    }\n}\nvoid update(int&id,int x,ll w,int l,int r)\n{\n    if(!id)\n    {\n        id = ++SZ;\n        sz[id] = get_sz(l,r);\n        if(l == r) val[id] = w;\n    }\n    sz[id]++;\n    if(l == r) return ;\n    int mid = (l + r) >> 1;\n    if(x <= mid) update(ls[id],x,w,l,mid);\n    else update(rs[id],x,w,mid + 1,r);\n}\nint main()\n{\n    init(\"phalanx\");\n    int x,y;\n    read(n); read(m); read(q);\n    int p = max(m,n) + q ;ll z;\n    rep(i,1,q)\n    {\n        read(x);read(y);\n        if(y == m) now = n + 1,z = query(root[now],x,1,p);\n        else now = x,z = query(root[now],y,1,p);\n        printf(\"%lld\\n\",z);\n        now = n + 1;update(root[n + 1],n + ( ++o[n+1] ),z,1,p); \n        if(y != m)\n        {\n            now = n + 1;z = query(root[now],x,1,p);\n            now = x;update(root[x],m - 1 + ( ++o[x] ),z,1,p);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1511348713,
        "uid": 23087,
        "name": "Tgotp",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\nnoip2017\u7684\u65f6\u5019\u6211\u8fde\u7ebf\u6bb5\u6811\u90fd\u4e0d\u4f1a\uff0c\u6811\u72b6\u6570\u7ec4\u4e5f\u53ea\u4f1a\u677f\u5b50\uff0c\u800c\u4e14\u5f53\u65f6\u56e0\u4e3a\u809bT2\u65f6\u95f4\u592a\u591a\u8fde50\u5206\u90fd\u6ca1\u5199\uff0c30\u5206\u5c31\u8dd1\u8def\u4e86\u3002\u73b0\u5728\u56de\u6765\u770b\u8fd9\u4e2a\u9898\uff0c\u771f\u7684\u662f\u4e00\u8a00\u96be\u5c3d\u554a\u3002\n\n## \u7b97\u6cd51\n\n\u5bf9\u4e8e\u524d50%\u7684\u6570\u636e\uff0c\u6211\u4eec\u53d6\u51fa\u6240\u6709\u8be2\u95ee\u7528\u5230\u7684\u884c\u548c\u6700\u540e\u4e00\u5217\u8fdb\u884c\u66b4\u529b\u6a21\u62df\u5373\u53ef\u3002\n\n\u671f\u671b\u5f97\u5206\uff1a50\n\n## \u7b97\u6cd52\n\n\u5bf9\u4e8e11-16\u6d4b\u8bd5\u70b9\uff0c\u6211\u4eec\u5f001/2\u68f5\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\u5b9e\u9645\u5b58\u5728\u7684\u6570\u5b57\u4e2a\u6570\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u533a\u95f4\u957f\u5ea6-sum[x]\u7684\u65b9\u6cd5\u627e\u5230\u533a\u95f4\u7684\u7b2ck\u4e2a\u5143\u7d20\uff0c\u540c\u65f6\u6211\u4eec\u7ef4\u62a41/2\u4e2avector\uff0c\u8868\u793a\u6dfb\u52a0\u5230\u672b\u5c3e\u7684\u6570\u5b57\uff0c\u5982\u679c\u67e5\u627e\u5230\u7684pos\u662f\u5728\u5b9e\u9645\u8303\u56f4\u4ee5\u5185\uff0c\u90a3\u4e48\u76f4\u63a5\u6309\u7167pos\u8ba1\u7b97\uff0c\u5426\u5219\u6211\u4eec\u5728vector\u4e2d\u6309\u7167\u4e0b\u6807\u67e5\u627e\uff0c\u4e4b\u540e\u518d\u66f4\u65b0vector\u548c\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff1a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u662f1~n+q/m+q\u7684\u533a\u95f4\uff0c\u6240\u4ee5\u7a7a\u95f4\u8bb0\u5f97\u5f00\u5927\u4e00\u500d\u3002\n\n## \u7b97\u6cd53\n\n\u5bf9\u6bcf\u4e00\u884c\u548c\u6700\u540e\u4e00\u5217\u7ef4\u62a4n+1\u68f5\u7ebf\u6bb5\u6811\u548cn+1\u4e2avector\uff0c\u7531\u4e8e\u52a8\u6001\u5f00\u70b9\u6211\u4eec\u7684\u5185\u5b58\u80fd\u591f\u63a7\u5236\u5728$nlogn$\u7684\u7ea7\u522b\uff0cvector\u4e2d\u7684\u5143\u7d20\u5728$2q$\u7ea7\u522b\uff0c\u4e0d\u4f1a\u8d85\u51fa\u5185\u5b58\u9650\u5236\uff0c\u5269\u4e0b\u7684\u5c31\u6309\u7167\u7b97\u6cd52\u8fdb\u884c\u5c31\u884c\u4e86\uff0c\u6ce8\u610f\u5982\u679c$y=m$\uff0c\u5c31\u4e0d\u7528\u5bf9\u7b2cx\u884c\u7684\u7ebf\u6bb5\u6811\u8fdb\u884c\u64cd\u4f5c\u4e86\uff0c\u5426\u5219\u6211\u4eec\u5c31\u5148\u5728\u7b2cx\u884c\u627e\u5230\u7b54\u6848\uff0c\u7136\u540e\u5728\u7b2cn+1\u68f5\u7ebf\u6bb5\u6811\u4e2d\u627e\u5230\u7b2cx\u4e2a\u5143\u7d20\u5e76\u6dfb\u52a0\u5230x\u4e2d\uff0c\u7136\u540e\u628aans\u6dfb\u52a0\u5230n+1\u4e2d\u3002\n\n## \u7b97\u6cd53\u4ee3\u7801\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u4ee3\u7801\u8fd8\u662f\u5f88\u597d\u5199\u7684\uff0c35\u884c\uff0c\u4e0d\u52301K\u7684\u957f\u5ea6\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nint n,m,q,x,y,pos,tot,lim,rt[300005],ls[12000005],rs[12000005],sm[12000005];vector<ll>v[300005];\nint que(int x,int l,int r,int v)\n{\n\tif(l==r) return l;\n\tint mid=(l+r)>>1,tmp=mid-l+1-sm[ls[x]];\n\tif(v<=tmp) return que(ls[x],l,mid,v);\n\treturn que(rs[x],mid+1,r,v-tmp);\n}\nvoid upd(int &x,int l,int r,int p)\n{\n\tif(!x) x=++tot;sm[x]++;\n\tif(l==r) return;int mid=(l+r)>>1;\n\tif(p<=mid) upd(ls[x],l,mid,p);\n\telse upd(rs[x],mid+1,r,p);\n}\nll wk1(int x,ll y)\n{\n\tpos=que(rt[n+1],1,lim,x);upd(rt[n+1],1,lim,pos);\n\tll ans=pos<=n?1ll*pos*m:v[n+1][pos-n-1];\n\treturn v[n+1].push_back(y?y:ans),ans;\n}\nll wk2(int x,int y)\n{\n\tpos=que(rt[x],1,lim,y);upd(rt[x],1,lim,pos);\n\tll ans=pos<m?1ll*(x-1)*m+pos:v[x][pos-m];\n\treturn v[x].push_back(wk1(x,ans)),ans;\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&q);lim=max(n,m)+q;\n\tfor(;q--;printf(\"%lld\\n\",y==m?wk1(x,0):wk2(x,y))) scanf(\"%d%d\",&x,&y);\n}\n```\n\n\n\n",
        "postTime": 1533960705,
        "uid": 70545,
        "name": "Awar3ness",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u7eaf\u6811\u72b6\u6570\u7ec4\u89e3\u6cd5\n6500MS\u8fc7\u7684\uff0c\u6700\u6162\u7684\u70b9\u662f1000MS\uff0c\u5e94\u8be5\u662f\u7a33\u7684\u3002\n\n# pre\uff1a\\\n\u8fd9\u6700\u540e\u768420%\u786e\u5b9e\u633a\u6709\u96be\u5ea6\u7684\uff0c\u6709\u4e0d\u5c11\u7684\u7ec6\u8282\uff0c\u5982\u679c\u6211\u662f\u53bb\u6b63\u5f0f\u6bd4\u8d5b\uff0c\u6211\u5e94\u8be5\u8fd8\u662f\u62ff\u524d80%\u7a33\u59a5\u4e00\u70b9...\n\n\u7136\u540e\u5199\u5b8c\u7785\u4e86\u773c\u5927\u5bb6\u7684\u9898\u89e3\uff0c\u5443\uff0c\u601d\u8def\u5e94\u8be5\u662f\u5dee\u4e0d\u591a\u7684\uff0c\u4e0d\u8fc7\u53ef\u80fd\u6709\u51e0\u4efd\u9898\u89e3\u8bb2\u7684\u8fd8\u4e0d\u591f\u8be6\u7ec6\u3002\u8fd9\u91cc\u7a0d\u5fae\u603b\u7ed3\u4e00\u4e0b\u3002\n\n\n# main\uff1a\\\n\u770b\u5230\u9898\u76ee\u9996\u5148\u60f3100%\u7684\u505a\u6cd5\uff0c\u60f310\u5206\u949f\uff0c\u4e00\u70b9\u601d\u8def\u90fd\u6ca1\u6709\uff0c\u5f00\u59cb\u770b\u5c40\u90e8\u5206\u3002\n\n### \u6d4b\u8bd5\u70b91 - 6 30%\n\n\u5b8c\u5168\u662f\u9001\u5206\uff0c\u76f4\u63a5\u66b4\u529b\u5c31\u884c\u4e86\uff0c\u8fd9\u4e2a\u5c31\u4e0d\u8be6\u7ec6\u8bf4\u4e86\n\n\n------------\n\n### \u6d4b\u8bd5\u70b97 - 10 20%\n\nn\u548cm\u589e\u5927\uff0c\u5b58\u4e0d\u4e0b\u8fd9\u4e48\u591a\u6570\u636e\u4e86\u3002\u4e00\u5f00\u59cb\u6211\u6ca1\u4ec0\u4e48\u601d\u8def\uff0c\u5148\u60f3\u7684\u540e\u9762\u7684\u6570\u636e\uff0c\u4e0d\u8fc7\u540e\u9762\u60f3\u5b8c\uff0c\u56de\u8fc7\u5934\u4e00\u4e0b\u5c31\u60f3\u51fa\u6765\u4e86\uff0c\u4e3a\u4e86\u4f7f\u5f97\u5927\u5bb6\u66f4\u597d\u7406\u89e3\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\uff0c\u5927\u5bb6\u53ef\u4ee5\u5148\u770b\u4e0b\u9762\u3002\n\n\n------------\n\n### \u6d4b\u8bd5\u70b911 - 16 30%\n\n15\u548c16 2\u4e2a\u70b9\u5c31n\u53d8\u5927\u4e86\u800c\u5df2\uff0c\u7531\u4e8ex = 1\uff0c\u6240\u4ee5\u9664\u4e86\u7b2c\u4e00\u884c\uff0c\u540e\u9762\u7684n\u5168\u662f\u6d6a\u8d39\u7a7a\u95f4\uff0c\u6839\u672c\u4e0d\u7528\u7ba1\u7684\uff0c\u6240\u4ee511 - 16\u6d4b\u8bd5\u70b9\u5b8c\u5168\u53ef\u4ee5\u7528\u540c\u4e00\u4e2a\u7b97\u6cd5\u3002\n\n\u90a3\u4e48\u4ed4\u7ec6\u89c2\u5bdf\u8fd9\u4e2a\u5217\u961f\u64cd\u4f5c\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u4f1a\u4ea7\u751f\u53d8\u5316\u7684\u53ea\u6709\u7b2c\u4e00\u884c\u548c\u6700\u540e\u4e00\u5217\u3002\n\n\u5148\u8003\u8651\u8fd9\u4e2a\u6700\u540e\u4e00\u5217\uff0c\u628a\u5b83\u5355\u72ec\u62ff\u51fa\u6765\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u64cd\u4f5c\uff0c\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e2a\u4e00\u5217\u7684\u6700\u4e0a\u9762\u8fd9\u4e2a\u6570\u5b57\u4e22\u5230\u7b2c\u4e00\u884c\uff0c\u7136\u540e\u628a\u5220\u6389\u7684\u8fd9\u4e2a\u6570\u5b57\u7ed9\u63d2\u5165\u5230\u8fd9\u4e00\u5217\u7684\u672b\u5c3e\u3002\n\n\u4ed4\u7ec6\u60f3\u60f3\uff0c\u8fd9\u4e0d\u5c31\u4e00\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c\u4e48\uff1f\uff1f\u5148\u8fdb\u5148\u51fa\uff0c\u6240\u4ee5\u76f4\u63a5\u62ff\u4e00\u4e2a\u961f\u5217\u7ef4\u62a4\u8fd9\u4e00\u5217\u5c31\u597d\u4e86\u3002\n\n\u7136\u540e\u8003\u8651\u600e\u4e48\u7ef4\u62a4\u8fd9\u4e00\u884c\uff0c\u6709\u70b9\u9ebb\u70e6\uff0c\u5982\u679c\u6211\u4eec\u66b4\u529b\uff0c\u67e5\u8be2\u662fO\uff081\uff09\uff0c\u4fee\u6539\u662fO\uff08n\uff09\uff0c\u5982\u679c\u6539\u6210\u94fe\u8868\uff0c\u53cd\u8fc7\u6765\uff0c\u603b\u590d\u6742\u5ea6\u8fd8\u662fO\uff08qn\uff09\uff0c\u592a\u5927\u4e86\u3002\n\n\u6211\u4eec\u731c\uff0c\u5e94\u8be5\u53ef\u4ee5\u6709\u67e5\u8be2\u548c\u4fee\u6539\u90fd\u662flog\u7ea7\u522b\u7684\u505a\u6cd5\u3002\u53c8\u662f\u7ebf\u6bb5\uff0c\u7136\u540e\u5f88\u81ea\u7136\u7684\u60f3\u5230\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\uff0c\u6216\u8005\u4e00\u4e9b\u67e5\u627e\u6811\u4e4b\u7c7b\u7684\u3002\n\n\u4e00\u5f00\u59cb\u6211\u60f3\u5230\u7684\u662f\uff0c\u62ff\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5dee\u5206\u6570\u7ec4\u641e\uff0c\u641e\u4e86\u4e00\u4f1a\u6ca1\u6cd5\u63a8\u516c\u5f0f\uff0c\u653e\u5f03\u8fd9\u4e2a\u60f3\u6cd5\u4e86\u3002\n\n\u7136\u540e\u521a\u597d\u60f3\u5230CF\u4e0a\u4ee5\u524d\u505a\u8fc7\u7684\u4e00\u9053\u9898\uff01\u53d1\u73b0\u4e24\u8005\u662f\u4e00\u6837\u7684\\\nCF-978C\n\n\u539f\u672c\u7684\u64cd\u4f5c\uff081,4\uff09\u8868\u793a\u5220\u9664\u7b2c1\u884c\u7b2c4\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u628a\u5b83\u7684\u542b\u4e49\u7a0d\u5fae\u4fee\u6539\u4e00\u4e0b\uff0c\u64cd\u4f5c\uff081,4\uff09\u8868\u793a\uff0c\u5220\u9664\u7b2c1\u884c\u7b2c4\u4e2a\u8fd8\u672a\u88ab\u5220\u9664\u7684\u6570\u5b57\u3002\n\n\u8fd9\u6837\u60f3\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u6211\u4eec\u62ff\u4e00\u4e2a\u6570\u7ec4\uff0c\u4e00\u5f00\u59cb\u90fd\u662f1\uff0c\u8868\u793a\u6ca1\u5220\u9664\uff0c\u5220\u9664\u4ee5\u540e\u6539\u62100\uff08\u8fd9\u90e8\u5206\u662f\u5355\u70b9\u4fee\u6539\uff09\uff0c\u7136\u540e\uff0c\u524d\u7f00\u548c\uff08\u8fd9\u90e8\u5206\u662f\u533a\u95f4\u4fee\u6539\uff09\u7b49\u4e8e4\u7684\u70b9\u662f\u4e0d\u662f\u5c31\u6211\u4eec\u8981\u7684\u7b54\u6848\uff1f\u800c\u4e14\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u60f3\u5230\uff0c\u8fd9\u4e2a\u70b9\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u3002\n\n\u663e\u7136\u8fd9\u4e2a\u524d\u7f00\u548c\u662f\u5355\u8c03\u4e0d\u51cf\u7684\uff0c\u56e0\u6b64\u76f4\u63a5\u53ef\u4ee52\u5206\u627e\u5230\u90a3\u4e2a\u4f4d\u7f6e\uff01\uff01\n\n\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u6811\u72b6\u6570\u7ec4\u57fa\u672c\u64cd\u4f5c\uff0c\u52a0\u4e0a\u4e8c\u5206\uff0c\u590d\u6742\u5ea6qlogmlogm\uff01\uff0c\u8fd9\u90e8\u5206\u5206\u5230\u624b\u4e86\uff01\n\n\n------------\n\u7136\u540e\u56de\u8fc7\u5934\u60f37 - 10\u6d4b\u8bd5\u70b9\uff0c\u663e\u7136\u53f3\u8fb9\u90a3\u4e00\u5217\u6211\u4eec\u5f97\u5355\u72ec\u62ff\u51fa\u6765\u8ba8\u8bba\uff0c\u8fd9\u5728\u521a\u624d\u6211\u4eec\u5df2\u7ecf\u53d1\u73b0\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e00\u5217\u5f88\u7279\u522b\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u6709\u4e2a\u7a81\u7834\u53e3\uff0c\u4e4b\u524dn\u5f88\u5927 x = 1\uff0c\u7136\u540e\u5f88\u591a\u6570\u5b57\u5b8c\u5168\u4e0d\u4f1a\u88ab\u8bbf\u95ee\u5230\uff0c\u56e0\u6b64\u7701\u4e86\u7a7a\u95f4\uff0c\u90a3\u8fd9\u91cc\u662f\u4e0d\u662f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u7684\u529e\u6cd5\u7701\u7a7a\u95f4\u5462\uff1f\n\n\u5e9f\u8bdd\uff0c\u5f53\u7136\u53ef\u4ee5\uff0c\u7a81\u7136\u53d1\u73b0q\u592a\u5c0f\u4e86\uff0c\u624d500\uff0c\u6491\u6b7b500\u884c\u4f1a\u53d1\u751f\u4fee\u6539\uff0c\u4f60\u53ea\u9700\u8981\u5f00500 * 50000\u7684\u6570\u7ec4\u5c31\u5b8c\u4e8b\u4e86\u3002\n\n\u4f60\u9700\u8981\u79bb\u7ebf\u5904\u7406\uff0c\u7136\u540e\u76f4\u63a5\u79bb\u6563\u4e00\u4e0b\uff08\u8bb0\u5f97\u8bb0\u5f55\u884c\u53f7\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\uff09\uff0c\u53ea\u5b58\u5b58\u5728\u4fee\u6539\u7684\u90a3\u51e0\u5217\u5c31\u884c\u4e86\uff0c\u7136\u540e\u6700\u540e\u4e00\u5217\u5355\u72ec\u62ff\u7c97\u6765\u66b4\u529b\u7ef4\u62a4\u3002\n\n\u6574\u4e2a\u7b97\u6cd5\u8fd8\u662f\u66b4\u529b\u7684\uff0c\u56e0\u6b64\u8fd9\u90e8\u5206\u53ef\u4ee5\u8ddf1 - 6\u4e00\u8d77\u505a\uff0c\u603b\u590d\u6742\u5ea6\u5e94\u8be5\u662fq\uff08n + m\uff09\uff0c\u6ca1\u6709\u538b\u529b\u3002\n\n\n\n------------\n\n80\u5206\u5f88\u5feb\u5c31\u5230\u624b\u4e86\uff0c\u60f3\u52a0\u5199\u7a0b\u5e8f\u90fd\u5f88\u8f7b\u677e\uff0c1\u5c0f\u65f6\u4e0d\u5230\u5c31\u5b8c\u6210\u4e86\uff0c\u4e0b\u9762\u8d34\u4e00\u4e0b80\u5206\u7684\u6e90\u7801\u3002\u89c9\u5f97\u6709\u56f0\u96be\u7684\u53ef\u4ee5\u5148\u7ec3\u7ec3\u624b\uff08\u6ce8\u610f\u5f00long long\uff0c\u8fd8\u6709\u5f3a\u8f6c\uff09\n\n```cpp\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\n#include <string.h>\n#include <limits.h>\n#include <string>\n#include <iostream>\n#include <queue>\n#include <math.h>\n#include <map>\n#include <stack>\n#include <set>\n#include <complex>\n#define left (now<<1)\n#define right ((now<<1)+1)\n#define mid ((l + r) >> 1)\n#define midmid ((r + mid) >> 1)\n#define LONG_LONG_MIN -9223372036854775808ll\n#define LONG_LONG_MAX 9223372036854775807ll\nusing namespace std;\ntypedef long long int ll;\n\nconst int MAXN = 3e5 + 10;\n\nstruct s1{\n    int x,y;\n};\n\nint n,m,q,nn;\nqueue<ll> qq;\ns1 a[MAXN];\nint bit[2 * MAXN],len;\nll data[2 * MAXN];\nbool flag;\nll g[510][50010];\nint pos[50010];\n\nint lowbit(int x){\n    return x & (-x);\n}\n\nvoid add(int x,int y){\n    while(x <= 600000){\n        bit[x] += y; x += lowbit(x);\n    }\n}\n\nint getsum(int x){\n    int re = 0;\n    while(x > 0){\n        re += bit[x]; x -= lowbit(x);\n    }\n    return re;\n}\n\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&q); flag = true;\n    for(int i = 1; i <= q; ++i){\n        scanf(\"%d%d\",&a[i].x,&a[i].y);\n        if(a[i].x != 1){\n            flag = false;\n        }\n    }\n    if(flag){\n        for(int i = 2; i <= n; ++i){\n            qq.push(1ll * i * m);\n        }\n        for(int i = 1; i <= 600000; ++i){\n            bit[i] = lowbit(i);\n        }\n        len = m;\n        for(int i = 1; i <= m; ++i){\n            data[i] = i;\n        }\n        for(int i = 1; i <= q; ++i){\n            int l,r; l = 1; r = len;\n            while(l < r){\n                if(getsum(mid) >= a[i].y){\n                    r = mid;\n                }else{\n                    l = mid + 1;\n                }\n            }\n            printf(\"%lld\\n\",data[l]); add(l,-1); qq.push(data[l]);\n            data[++len] = qq.front(); qq.pop();\n        }\n\n    }else{\n        if(q <= 500){\n            for(int i = 1; i <= n; ++i){\n                data[i] = 1ll * m * i;\n                pos[i] = 0;\n            }\n            nn = 0;\n            for(int i = 1; i <= q; ++i){\n                if(pos[a[i].x] == 0){\n                    pos[a[i].x] = ++nn;\n                    for(int j = 1; j <= m - 1; ++j){\n                        g[nn][j] = 1ll * (a[i].x - 1) * m + j;\n                    }\n                }\n            }\n            for(int i = 1; i <= q; ++i){\n                ll x = a[i].x; ll xx = pos[a[i].x];\n                if(a[i].y != m){\n                    ll ans = g[xx][a[i].y];\n                    printf(\"%lld\\n\",ans);\n                    for(int j = a[i].y; j < m - 1; ++j){\n                        g[xx][j] = g[xx][j + 1];\n                    }\n                    g[xx][m - 1] = data[x];\n                    for(int j = x; j < n; ++j){\n                        data[j] = data[j + 1];\n                    }\n                    data[n] = ans;\n                }else{\n                    ll ans = data[x];\n                    printf(\"%lld\\n\",ans);\n                    for(int j = x; j < n; ++j){\n                        data[j] = data[j + 1];\n                    }\n                    data[n] = ans;\n                }\n            }\n        }else{\n            return 0;\n        }\n    }\n    return 0;\n}\n\n```\n\n\u597d\u4e86\uff0c80\u5206\u5230\u624b\u4e86\uff0c\u73b0\u573a\u7684\u8bdd\uff0c1\u5c0f\u65f6T3\u62ff\u4e8680\u8fd8\u662f\u5f88\u8212\u670d\u7684\uff0c\u4f46\u662f\u6211\u4eec\u73b0\u5728\u80af\u5b9a\u4e0d\u6ee1\u8db3\u4e8e\u53ea\u62ff80\u5206\uff0c\u5269\u4e0b20\u5206\u600e\u4e48\u641e\uff1f\uff1f\n\n\u4e00\u822c\u524d\u9762\u7684\u6570\u636e\u70b9\u90fd\u4f1a\u5bf9\u6b63\u89e3\u6709\u63d0\u793a\u6027\uff0c\u5c31\u8ddf\u6570\u5b66\u8003\u8bd5\uff0c\u524d\u51e0\u95ee\u4e00\u822c\u4f1a\u5bf9\u6700\u540e\u4e00\u95ee\u6709\u63d0\u793a\u6027\u4f5c\u7528\u3002\n\n\u6211\u4eec\u60f3\u4e0b\u521a\u624d\u6574\u7406\u7684\u601d\u8def\u3002\n\n\u9996\u5148\u6700\u540e\u4e00\u5217\u80af\u5b9a\u5355\u72ec\u62ff\u51fa\u6765\u7ef4\u62a4\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e2a\u65f6\u5019\u8fd9\u4e2a\u6700\u540e\u4e00\u5217\u662f\u5220\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u5c3e\u90e8\u63d2\u5165\uff0c\u8fd9\u4e0d\u5c31\u662f\u54b1\u4eec11 - 16\u7684\u7b2c\u4e00\u884c\u7684\u7b97\u6cd5\u4e48\uff1f\uff1f\n\n\u76f4\u63a5\u62ff\u90a3\u90e8\u5206\u7b97\u6cd5\u7684\u601d\u8def\u7ef4\u62a4\u8fd9\u4e00\u5217\u5c31OK\u4e86\uff0ceasy\n\n\u7136\u540e\u662f\u7a7a\u95f4\u7684\u95ee\u9898\uff0c\u8003\u8651\u5230\u6211\u4eec\u4e4b\u524d\u7684\u601d\u8def\uff0c\u56e0\u4e3aq\u6bd4\u8d77n * m\u6765\u8bf4\uff0c\u592a\u5c0f\u592a\u5c0f\u4e86\uff0c\u5f88\u591a\u70b9\u76f4\u63a5\u4ecd\u7136\u662f\u539f\u5148\u7684\u76f8\u90bb\u5173\u7cfb\uff0c\u4e00\u5757\u4e00\u5757\u7684\u3002\u800c\u4e14\u4e4b\u524d\u6211\u4eec\u662f\u9760\u79bb\u7ebf\u5904\u7406\uff08\u9884\u5148\u8bfb\u5165q\uff09\u6765\u641e\u4e00\u4e9b\u4e8b\uff0c\u628a\u7a7a\u95f4\u7701\u4e0b\u6765\uff0c\u8fd9\u91cc\u5f88\u53ef\u80fd\u5c31\u662f\u7c7b\u4f3c\u7684\u529e\u6cd5\u3002\n\n\u60f3\u5230\u8fd9\u91cc\u8fd8\u7b97\u8f7b\u677e\uff0c\u540e\u9762\u6211\u5c31\u60f3\u7684\u6709\u70b9\u6162\u4e86\uff0c\u56e0\u4e3a\u89e3\u6cd5\u4e0d\u592a\u6e05\u6670\u3002\n\n\u7531\u4e8e\u6bcf\u6b21\u5bf9\u67d0\u884c\u4fee\u6539\uff0c\u8fd9\u4e00\u884c\u548c\u6700\u540e\u7279\u522b\u7684\u90a3\u4e00\u5217\u6709\u4e92\u52a8\uff0c\u9664\u6b64\u4e4b\u5916\u8ddf\u5176\u4ed6\u884c\u6839\u672c\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\u3002\u56e0\u6b64\u8003\u8651\uff0c\u628a\u67d0\u4e00\u884c\u7684\u64cd\u4f5c\u90fd\u5355\u72ec\u53d6\u51fa\u6765\uff0c\u770b\u770b\u80fd\u4e0d\u80fd\u641e\u70b9\u4e8b\u3002\n\n\u7136\u540e\u6211\u5c31\u7acb\u9a6c\u60f3\u5230\u4e86\u505a\u6cd5\n\n\u5047\u8bbe\u73b0\u5728\u90fd\u662f\u5bf9\u7b2ci\u884c\u64cd\u4f5c\uff0c\u4e00\u884c\u6709m\u4e2a\uff0c\u64cd\u4f5c\u6309\u987a\u5e8f\u4e3a2,2,4\n\n\u6309\u6211\u4eec\u521a\u624d\u7684\u60f3\u6cd5\uff0c\u4f60\u53bb\u5220\u4e862\uff0c\u540e\u97622\u4e2a\u64cd\u4f5c\u5c31\u53d8\u6210\u5b9e\u9645\u5220\u7b2c3\u4e2a\u6570\uff0c\u548c\u7b2c5\u4e2a\u6570\uff0c\u8fd9\u90e8\u5206\u4e5f\u53ef\u4ee5\u62ff\u6811\u72b6\u6570\u7ec4\u641e\u8bf6\uff0c\u8ddf\u6700\u540e\u4e00\u5217\u662f\u4e00\u6837\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u628a\u6bcf\u4e00\u884c\u7684\u64cd\u4f5c\u8fd9\u6837\u5355\u72ec\u53d6\u51fa\u6765\uff0c\u7136\u540e\u7b97\u51fa\u6765\u5b83\u7684\u771f\u5b9e\u5220\u7684\u7b2c\u51e0\u4e2a\u6570\u5b57\u5c31\u597d\u4e86\u3002\n\n\u4f46\u662f\u8fd8\u6709\u4e2a\u5f88\u5927\u7684\u95ee\u9898\uff0c\u5982\u679c\u7b97\u51fa\u6765\u771f\u5b9e\u8981\u5220\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8em\u600e\u4e48\u529e\uff1f\uff1f\uff1f\n\n\u5148\u60f3\u7b49\u4e8em\u7684\uff0c\u7b49\u4e8em\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u5c31\u662f\u5220\u6700\u540e\u4e00\u5217\u53bb\u4e86\u3002\u8fd9\u4e2a\u65f6\u5019\u5176\u5b9e\u8ddf\u8fd9\u4e00\u884c\u6728\u6709\u5173\u7cfb\uff0c\u53ea\u8ddf\u5f53\u524d\u8fd9\u4e00\u5217\u7684\u72b6\u6001\u6709\u5173\uff0c\u90a3\u4e48\u76f4\u63a5\u53bb\u8fd9\u4e00\u5217\u4e0a\u641e\u4e8b\u5c31\u597d\u4e86\uff0c\u6211\u4eec\u5c31\u6807\u8bb0\u4e00\u4e2aflag\uff0c\u8868\u793a\u8fd9\u4e2a\u662f\u76f4\u63a5\u5728\u5217\u4e0a\u641e\u4e8b\uff0c\u4e0d\u9700\u8981\u7b97\u771f\u5b9e\u662f\u5220\u7b2c\u51e0\u4e2a\u6570\u5b57\u3002\n\n\u90a3\u4e48\u5927\u4e8em\u5462\uff08\u5047\u5982\u662f\u7b2ch\u4e2a\uff09\uff1f\u663e\u7136\uff0c\u5220\u7684\u6570\u5b57\u662f\u4ece\u90a3\u4e00\u5217\u7b2ch - \uff08m - 1\uff09\u6b21\u52a0\u8fdb\u6765\u7684\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u53d1\u73b0q\u5f88\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u6240\u6709\u7684\u884c\u6765\u8bf4\uff0c\u52a0\u8fdb\u6765\u7684\u6570\u5b57\u4e0d\u8d85\u8fc7q\u4e2a\uff08\u5176\u5b9e\u5c31\u662fq\u4e2a\uff09,\u90a3\u6211\u4eec\u53ef\u4ee5\u62ff\u4e00\u4e2a\u90bb\u63a5\u8868\uff08vector\u5c31\u5f88\u597d~\uff09\u6765\u5b58\u7b2ci\u884c\u540e\u9762\u52a0\u8fdb\u6765\u7684\u6570\u5b57\u3002\n\n\u90a3\u4e48\u6211\u4eec\u6ee1\u5206\u7684\u7b97\u6cd5\u5c31\u7c97\u6765\u4e86\uff0c\u6211\u4eec\u603b\u7ed3\u4e0b\u3002\n\n\u9996\u5148\u4f60\u628a\u6240\u6709\u64cd\u4f5c\u8bfb\u8fdb\u6765\uff0c\u7136\u540e\u6309\u884c\u6392\u5e8f\uff0c\u540c\u4e00\u884c\u6309\u64cd\u4f5c\u5148\u540e\u6392\u5e8f\uff0c\u7136\u540e\u9884\u5904\u7406\u51fa\u5b83\u771f\u5b9e\u5220\u9664\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u662f\u7b2cm\u4f4d\uff0cflag\u8bb0\u4e00\u4e0b\uff0c\u4e0d\u662f\u5c31\u7b97\u771f\u5b9e\u4f4d\u7f6e\u3002\n\n\u7b97\u5b8c\u4ee5\u540e\u6309\u7f16\u53f7\u91cd\u65b0\u6392\u5e8f\uff0c\u7136\u540e\u6211\u4eec\u5f00\u59cb\u64cd\u4f5c\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u64cd\u4f5c\u7684y\u5c0f\u4e8em\uff0c\u76f4\u63a5\u53ef\u4ee5\u7b97\u51fa\u7b54\u6848\uff0c\u7b54\u6848\u5c31\u662f\uff08x - 1\uff09 * m + y\n\u7136\u540e\u53bb\u7ef4\u62a4\u90a3\u4e00\u5217\uff0c\u5220\u6389\u90a3\u4e00\u5217\u7b2cx\u5927\u7684\u6570\u5b57\uff0c\u4e22\u5230vector<x>\u91cc\uff0c\u628a\u7b54\u6848\u63d2\u5230\u90a3\u4e00\u5217\u672b\u5c3e\n  \n\u5982\u679c\u8fd9\u4e2a\u64cd\u4f5c\u7b49\u4e8em\uff0c\u90a3\u4e48\u5c31\u53ea\u5728\u5217\u4e0a\u641e\u4e8b\u5c31\u597d\u4e86\uff0cvector\u4e5f\u4e0d\u7528\u4e22\u3002\n  \n\u5982\u679c\u5927\u4e8em\uff0c\u5148\u51cf\u53bbm\uff08vector\u662f\u4ece0\u5f00\u59cb\u7684\uff09\uff0c\u7b54\u6848\u5c31\u662fvector[x][m]\uff0c\n\u7136\u540e\u53bb\u7ef4\u62a4\u6700\u540e\u4e00\u5217\uff0c\u5220\u6389\u7b2cx\u5927\u7684\u6570\u5b57........\u8fd9\u90e8\u5206\u4e0d\u91cd\u8ff0\u4e86\n  \n\u7136\u540e\u5c31AC\u5566~~~\n  \n  \n\u8fd9\u91cc\u6709\u4e2a\u7ec6\u8282\uff0c\u5176\u5b9e\u8fd9\u4e2a\u7ec6\u8282\u56f0\u6270\u621120\uff0c30\u5206\u949f\uff0c\u6211\u770b\u9898\u89e3\u5f88\u591a\u4eba\u4e5f\u662f\u7528\u522b\u7684\u529e\u6cd5\u641e\u7684\n  \n\u5c31\u662f\u4f60\u9884\u5904\u7406\u6bcf\u4e00\u884c\u7684\u8be2\u95ee\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u6811\u72b6\u6570\u7ec4\u5904\u7406\u5b8c\uff0c\u4f60\u90fd\u5f97\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u7684\u590d\u6742\u5ea6\u6700\u574f\u662fn * 3E5\uff0c\u80af\u5b9a\u8d85\u65f6\u3002\n\u5982\u679c\u4f60\u5f00n\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u7a7a\u95f4\u5fc5\u7206\n  \n\u6240\u4ee5\u9898\u89e3\u5f88\u591a\u4eba\u5f00\u4e86\u52a8\u6001\u52a0\u70b9\u7684\u7ebf\u6bb5\u6811\uff0c\u5443\n  \n\u5176\u5b9e\u8fd9\u91cc\u540e\u6765\u4ed4\u7ec6\u60f3\u4e86\u60f3\uff0cq\u4e0d\u662f\u5f88\u5c11\u4e48\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5b8c\u4ee5\u540e\uff0c\u8bb0\u4e00\u4e0b\uff0c\u4f60\u628a\u54ea\u4e9b\u70b9\u5355\u70b9\u4fee\u6539\u4e3a0\u4e86\uff0c\u91cd\u65b0\u628a\u90a3\u4e9b\u70b9+1\u5c31\u597d\u4e86\u554a\u3001\n  \n\u8fd9\u91cc\u8bb0\u4e0d\u80fd\u5f00bool\u6570\u7ec4\u8bb0\uff0c\u4e0d\u7136\u679a\u4e3e\u54ea\u4e9b\u88ab\u6539\u4e86\u8fd8\u662f\u8981\u5e73\u65b9\u590d\u6742\u5ea6\u3002\n  \n\u641e\u4e2avector\u8bb0\u5c31\u597d\u4e86\u3002\n  \n\u4e0b\u9762\u662f\u53c2\u8003\u4ee3\u7801\uff1a\n ```cpp\n#include <stdio.h>\n#include <vector>\n#include <algorithm>\n#include <string.h>\n#include <limits.h>\n#include <string>\n#include <iostream>\n#include <queue>\n#include <math.h>\n#include <map>\n#include <stack>\n#include <set>\n#include <complex>\n#define left (now<<1)\n#define right ((now<<1)+1)\n#define mid ((l + r) >> 1)\n#define midmid ((r + mid) >> 1)\n#define LONG_LONG_MIN -9223372036854775808ll\n#define LONG_LONG_MAX 9223372036854775807ll\nusing namespace std;\ntypedef long long int ll;\n\nconst int MAXN = 3e5 + 10;\n\nstruct s1{\n    int x,y,id;\n    bool flag;\n};\n\nvector<ll> v[MAXN];\nvector<int> a;\nint n,m,q,len,len2,st,ed;\ns1 g[MAXN];\nll p[2 * MAXN];\nint bit1[2 * MAXN],bit2[2 * MAXN];\n\nint lowbit(int x){\n    return x & (-x);\n}\n\nvoid add(int x,int y,int *bit){\n    while(x <= 600010){\n        bit[x] += y; x += lowbit(x);\n    }\n}\n\nint getsum(int x,int *bit){\n    int re = 0;\n    while(x > 0){\n        re += bit[x]; x -= lowbit(x);\n    }\n    return re;\n}\n\nbool cmp1(s1 x,s1 y){\n    if(x.x != y.x){\n        return x.x < y.x;\n    }else{\n        return x.id < y.id;\n    }\n}\n\nbool cmp2(s1 x,s1 y){\n    return x.id < y.id;\n}\n\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&q); len = n;\n    for(int i = 1; i <= q; ++i){\n        scanf(\"%d%d\",&g[i].x,&g[i].y);\n        g[i].id = i; g[i].flag = false;\n    }\n    for(int i = 1; i <= n; ++i){\n        p[i] = 1ll * i * m;\n    }\n    for(int i = 1; i <= 600010; ++i){\n        bit1[i] = bit2[i] = lowbit(i);\n    }\n    sort(g + 1,g + 1 + q,cmp1); st = 1; ed = 1;\n    while(st <= q){\n        while(ed < q && g[st].x == g[ed + 1].x){\n            ++ed;\n        }\n        a.clear(); len2 = m;\n        for(int i = st; i <= ed; ++i){\n            if(g[i].y == m){\n                g[i].flag = true; continue;\n            }\n            int l = 1,r = len2;\n            while(l < r){\n                if(getsum(mid,bit2) >= g[i].y){\n                    r = mid;\n                }else{\n                    l = mid + 1;\n                }\n            }\n            add(l,-1,bit2); a.push_back(l); g[i].y = l; ++len2;\n        }\n        for(int i = 0; i < a.size(); ++i){\n            add(a[i],1,bit2);\n        }\n        st = ed + 1;\n    }\n    sort(g + 1,g + 1 + q,cmp2);\n\n    for(int i = 1; i <= q; ++i){\n        ll ans;\n        if(!g[i].flag){\n            if(g[i].y < m){\n                ans = 1ll * (g[i].x - 1) * m + g[i].y;\n                printf(\"%lld\\n\",ans);\n            }else{\n                g[i].y = g[i].y - m;\n                ans = v[g[i].x][g[i].y];\n                printf(\"%lld\\n\",ans);\n            }\n        }\n\n        int l = 1,r = len;\n        while(l < r){\n            if(getsum(mid,bit1) >= g[i].x){\n                r = mid;\n            }else{\n                l = mid + 1;\n            }\n        }\n        add(l,-1,bit1);\n        if(!g[i].flag){\n            v[g[i].x].push_back(p[l]);\n        }else{\n            ans = p[l];\n            printf(\"%lld\\n\",ans);\n        }\n         p[++len] = ans;\n    }\n    return 0;\n}\n\n```\n\n\u7761\u89c9\u53bb\u4e86",
        "postTime": 1562066344,
        "uid": 11087,
        "name": "\u51b2\u554a\u5c0f\u7b3c\u5305",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u9898\u89e3\u5728\u535a\u5ba2[\u98df\u7528](http://www.cnblogs.com/YoungNeal/p/9063703.html)\u6548\u679c\u66f4\u4f73\u54e6~\n\n## Solution\n\n$fhq\\_Treap$ [\u4e86\u89e3\u4e00\u4e0b](http://www.cnblogs.com/YoungNeal/p/8977328.html)\n\n---\n\n### \u7b97\u6cd5\u90e8\u5206\n\n\u8fd9\u9898\u4e0d\u7ba1\u600e\u4e48\u505a\u76f4\u63a5\u5b58\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u70b8\uff0c\u6240\u4ee5\u6211\u4eec\u7528 $Treap$ \u7ef4\u62a4\u533a\u95f4\uff0c\u5373 $Treap$ \u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u662f\u4e00\u4e2a\u533a\u95f4\u3002\n\n\u5bf9\u4e8e\u6bcf\u884c\u4ece\u7b2c $1$ \u5217\u5230\u7b2c $m-1$ \u5217\u7ef4\u62a4\u4e00\u4e2a $Treap$\u3002\n\n\u5bf9\u4e8e\u6700\u540e\u4e00\u5217\u6211\u4eec\u5355\u72ec\u7ef4\u62a4\u4e00\u4e2a $Treap$ \u3002\n\n\u5982\u679c $(x,y)$ \u51fa\u961f\uff0c\u8981\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff0c\u7b2c\u4e00\u79cd $y=m$\uff0c\u5373\u51fa\u961f\u7684\u4eba\u5728\u6700\u540e\u4e00\u5217\u7684\u60c5\u51b5\uff0c\u5982\u679c\u4e0d\u8ba8\u8bba\u7684\u8bdd\u6211\u4eec\u5728\u6bcf\u884c\u7ef4\u62a4\u7684 $Treap$ \u4e0a\u662f\u627e\u4e0d\u5230\u8fd9\u4e2a\u70b9\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5206\u7c7b\u3002  \n\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u76f4\u63a5\u5728\u6700\u540e\u4e00\u5217\u7684 $Treap$ \u4e2d\u627e\u5230\u7b2c $x$ \u4e2a\u4eba\uff0c\u628a\u5b83 $split$ \u51fa\u6765\uff0c\u7136\u540e $merge$ \u5230\u7ed3\u5c3e\u5373\u53ef\u3002\n\n(\u5173\u4e8e\u5982\u4f55 $split$ \u548c $merge$ \u4e0b\u9762\u6709\u8bb2)\n\n\u7b2c\u4e8c\u79cd $y\\neq m$\u3002  \n\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u5728\u7b2c $x$ \u884c\u7684\u90a3\u4e2a $Treap$ \u4e2d\u627e\u5230\u7b2c $y$ \u4e2a\u70b9\uff0c\u628a\u5b83 $split$ \u51fa\u6765\u8bb0\u4e3a\u70b9 $a$\uff0c\u540c\u65f6\u5728\u6700\u540e\u4e00\u5217\u7684 $Treap$ \u4e2d\u627e\u5230\u7b2c $x$ \u4e2a\u70b9\uff0c\u540c\u6837 $split$ \u51fa\u6765\u8bb0\u4e3a\u70b9 $b$ \u3002  \n\u4e4b\u540e\u628a\u70b9 $b$ \u5408\u5e76\u5230\u7b2c $x$ \u884c $Treap$ \u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u628a\u70b9 $a$ \u5408\u5e76\u5230\u6700\u540e\u4e00\u5217\u7684 $Treap$ \u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u5373\u53ef\u3002\n\n---\n\n### \u5b9e\u73b0\u90e8\u5206\n\n\u8fd9\u9898 $fhq\\_Treap$ \u96be\u5b9e\u73b0\u7684\u5730\u65b9\u5c31\u5728\u5982\u4f55 $split$ \u51fa\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u8282\u70b9(\u56e0\u4e3a\u6211\u4eec\u7ef4\u62a4\u7684\u4e00\u76f4\u662f\u533a\u95f4\uff0c\u800c\u8fd9\u9898\u91cc $split$ \u8981\u505a\u7684\u5c31\u662f\u5728\u4e00\u4e2a\u5927\u533a\u95f4\u7684\u57fa\u7840\u4e0a $split$ \u51fa\u4e24\u4e2a\u65b0\u7684\u5c0f\u533a\u95f4)\n\n\u5982\u4f55\u5904\u7406\u5462\uff1f\n\n\u4eff\u7167\u4e00\u822c $fhq\\_Treap$ \u7684 $split$ \u64cd\u4f5c\uff0c\u6211\u4eec\u5b9a\u4e49 \n```cpp\nsplit(int now,int k,int &x,int &y)\n```\n\u8868\u793a\u5728\u4ee5 $now$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u8fdb\u884c\u5206\u79bb\uff0c\u5206\u79bb\u51fa\u7684\u5de6\u5b50\u6811\u5927\u5c0f\u4e3a $k$\uff0c\u6839\u8282\u70b9\u4e3a $x$,\u5206\u79bb\u51fa\u7684\u53f3\u5b50\u6811\u6839\u8282\u70b9\u4e3a $y$ (\u6211\u4eec\u5e76\u4e0d\u80fd\u77e5\u9053\u53f3\u5b50\u6811\u7684\u5927\u5c0f\u662f\u591a\u5c11)\u3002\n\n\u8fd9\u65f6\u6211\u4eec\u5c31\u8981\u5206\u60c5\u51b5\u8ba8\u8bba\u4e86\uff1a\n\n\u5982\u679c $now$ \u7684\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u5df2\u7ecf\u5927\u4e8e\u4e86 $k$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u7528\u628a $now$ \u8fd9\u4e2a\u70b9\u62c6\u5f00\u800c\u662f\u9012\u5f52\u8fdb\u5165 $now$ \u7684\u5de6\u5b50\u6811\u8fdb\u884c\u5904\u7406\u3002\n\n\u5426\u5219\u6211\u4eec\u5c31\u8981\u8fdb\u884c\u9ebb\u70e6\u7684\u88c2\u70b9\u64cd\u4f5c\u4e86\u3002\n\n\u56e0\u4e3a\u8981\u5728\u4ee5 $now$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u5206\u51fa  $k$ \u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u4ece $now$ \u548c $now$ \u7684\u53f3\u5b50\u6811\u91cc\u5206\u51fa $k-sze[ch[now][0]]$ \u4e2a\u3002\n\n\u8fd9\u91cc\u53c8\u8981\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n\u5982\u679c $now$ \u8fd9\u4e2a\u70b9\u7ef4\u62a4\u7684\u533a\u95f4\u5927\u5c0f\u4e0d\u5c0f\u4e8e $k$ \u7684\u8bdd\uff0c\u4ece $now$ \u91cc\u5206\u51fa\u5927\u5c0f\u4e3a\n$k-sze[ch[now][0]]$ \u7684\u533a\u95f4\u5373\u53ef(\u56e0\u4e3a\u5de6\u5b50\u6811\u5df2\u7ecf\u6709\u4e86 $sze[ch[now][0]]$ \u90a3\u4e48\u591a)\u3002\n\n\u5426\u5219\u5c31\u8981\u8c03\u7528\n```cpp\nsplit(ch[now][1],k-sze[ch[now][0]]-(r[now]-l[now]+1),ch[now][1],y)\n```\n\n\u8fd9\u4e2a\u610f\u601d\u662f\uff0c\u628a $now$ \u8fd9\u4e2a\u70b9\u7684\u533a\u95f4\u5168\u90e8\u7ed9\u4e86\u5de6\u5b50\u6811\u8fd8\u662f\u4e0d\u591f\uff0c\u6240\u4ee5\u8981\u8fdb\u5165\u53f3\u5b50\u6811\u5206\u5269\u4e0b\u7684\u5927\u5c0f\u4e3a $k-sze[ch[now][0]]-(r[now]-l[now]+1)$ \u7684\u533a\u95f4\u3002\n\n\u4f46\u662f\u5b9e\u9645\u5199\u4ee3\u7801\u7684\u65f6\u5019\u4e0d\u5fc5\u8981\u90a3\u4e48\u590d\u6742\u7684\u5206\u7c7b\u8ba8\u8bba\u3002\u56e0\u4e3a\u5982\u679c $split$ \u4f20\u8fdb\u53bb\u7684 $k$ \u662f\u975e\u6b63\u6574\u6570\u7684\u8bdd(\u5bf9\u5e94\u7b2c\u4e00\u79cd\u60c5\u51b5)\uff0c\u90a3\u4e48\u9012\u5f52\u4f1a\u4e00\u76f4\u8fdb\u5165\u5de6\u5b50\u6811\uff0c\u76f8\u53cd\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u5728\u5206\u88c2\u65b0\u8282\u70b9\u7684\u65f6\u5019\u5224\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u5927\u6982\u957f\u8fd9\u6837\u3002\n```cpp\nvoid split_new(int now,int k){\n\tif(k>=r[now]-l[now]+1) return;\n\t...\n}\n```\n\n---\n\n## Code\n```cpp\n#include<ctime>\n#include<cstdio>\n#include<cstdlib>\n#include<iostream>\n#define N 300005\n#define int long long\n\nint root[N];\nint n,m,T,tot;\nint ch[N*20][2];\nint l[N*20],r[N*20];\nint sze[N*20],prio[N*20];\n\nint newnode(int x,int y){\n\ttot++;\n\tl[tot]=x;\n\tr[tot]=y;\n\tsze[tot]=y-x+1;\n\tprio[tot]=rand();\n\treturn tot;\n}\n\nvoid pushup(int x){\n\tsze[x]=sze[ch[x][0]]+sze[ch[x][1]]+r[x]-l[x]+1;\n}\n\nint merge(int x,int y){\n\tif(!x or !y) return x+y;\n\tif(prio[x]<prio[y]){\n\t\tch[x][1]=merge(ch[x][1],y);\n\t\tpushup(x);\n\t\treturn x;\n\t}\n\telse{\n\t\tch[y][0]=merge(x,ch[y][0]);\n\t\tpushup(y);\n\t\treturn y;\n\t}\n}\n\nvoid split_new(int now,int k){//\u628anow\u7684\u5927\u5c0f\u53d8\u4e3ak\n\tif(k>=r[now]-l[now]+1) return;\n\tint want=l[now]+k-1;\n\tint nn=newnode(want+1,r[now]);\n\tr[now]=want;\n\tch[now][1]=merge(nn,ch[now][1]);\n\tpushup(now);\n}\n\nvoid split(int now,int k,int &x,int &y){\n\tif(!now) x=y=0;\n\telse{\n\t\tif(sze[ch[now][0]]>=k){\n\t\t\ty=now;\n\t\t\tsplit(ch[now][0],k,x,ch[now][0]);\n\t\t}\n\t\telse{\n\t\t\tsplit_new(now,k-sze[ch[now][0]]);\n\t\t\tx=now;\n\t\t\tsplit(ch[now][1],k-sze[ch[now][0]]-(r[now]-l[now]+1),ch[now][1],y);\n\t\t}\n\t\tpushup(now);\n\t}\n}\n\nsigned main(){\n\tsrand(time(0));\n\tscanf(\"%lld%lld%lld\",&n,&m,&T);\n\tfor(int i=1;i<=n;i++)\n\t\troot[i]=newnode((i-1)*m+1,i*m-1);\n\tfor(int i=1;i<=n;i++)\n\t\troot[n+1]=merge(root[n+1],newnode(i*m,i*m));\n\twhile(T--){\n\t\tint a,b;\n\t\tscanf(\"%lld%lld\",&a,&b);\n\t\tif(b!=m){\n\t\t\tint x,y,z;\n\t\t\tsplit(root[a],b,x,y);\n\t\t\tsplit(x,b-1,x,z);\n\t\t\tprintf(\"%lld\\n\",l[z]);\n\t\t\tint x1,y1,z1;\n\t\t\tsplit(root[n+1],a,x1,y1);\n\t\t\tsplit(x1,a-1,x1,z1);\n\t\t\troot[a]=merge(x,merge(y,z1));\n\t\t\troot[n+1]=merge(x1,merge(y1,z));\n\t\t}\n\t\telse{\n\t\t\tint x,y,z;\n\t\t\tsplit(root[n+1],a,x,y);\n\t\t\tsplit(x,a-1,x,z);\n\t\t\tprintf(\"%lld\\n\",l[z]);\n\t\t\troot[n+1]=merge(x,merge(y,z));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1526804520,
        "uid": 56778,
        "name": "YoungNeal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u79bbnoip\u53ea\u6709\u4e00\u5929\u4e86\uff0c\u6211\u7ec8\u4e8e\u641e\u61c2\u4e86\u7ebf\u6bb5\u6811\u7684\u9a9a\u64cd\u4f5c\uff0c\u4e3a\u4e86\u52a0\u6df1\u7406\u89e3\u4ee5\u53ca\u5e2e\u52a9\u4e00\u4e0b\u548c\u6211\u4e4b\u524d\u4e00\u6837\u4e0d\u4f1a\u5e73\u8861\u6811\uff08\u5176\u5b9e\u6211\u4f1a\u4e00\u70b9\uff09\u4f46\u5374\u770b\u4e0d\u61c2\u7ebf\u6bb5\u6811\u7684\u601d\u8def\u7684\u5c0f\u53ef\u7231\u4eec\uff0c\u5f53\u7136\uff0c~~**\u4e0d\u4f1a\u6709\u4eba\u548c\u6211\u4e00\u6837\u83dc\u7684**~~\u3002\n\n\u4e0b\u9762\u8bb2\u4e00\u8bb2\u601d\u8def\uff0c\u4e3b\u8981\u53c2\u8003@ Sakura_\u68a6\u7476 \u5927\u4f6c\u7684 \u6839\u636e\u7ebf\u6bb5\u6811\u4e8c\u5206\u7684\u6027\u8d28\u6765\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\u662f\u5341\u5206\u65b9\u4fbf\u7684\uff0c\u50cf\u8fd9\u7c7b\u6709\u4e3b\u5e2d\u6811\u548c\u52a8\u6001\u70b9\u5f00\u7ebf\u6bb5\u6811\uff0c\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u662f\u52a8\u6001\u70b9\u5f00\u7ebf\u6bb5\u6811\uff08\u5176\u5b9e\u5728\u8fd9\u4e4b\u524d\u6211\u90fd\u4e0d\u77e5\u9053\u6709\u8fd9\u73a9\u610f\u513f\uff09\u3002\n\n\u7136\u800c\uff0c\u6211skyshow~~\u5883\u6cfd~~\u5c31\u662f\u6b7b\uff0c\u5c31\u662f\u4ece\u8fd9\u8df3\u4e0b\u53bb\u4e5f\u4e0d\u7528\u52a8\u6001\uff0c\u8fd9\u8f88\u5b50\u90fd\u4e0d\u7528vector\uff0c\u6240\u4ee5\uff0c\u6211\u9009\u62e9\u4f7f\u7528\u4ee5\u9759\u6001\u6765\u6a21\u62df\u52a8\u6001\uff0c\u6211\u4eec\u7528n+1\u68f5\u7ebf\u6bb5\u6811\u6765\u5206\u522b\u7ef4\u62a4n\u884c\u7684\u524dm-1\u5217\uff0c\u7b2cn+1\u68f5\u6765\u7ef4\u62a4\u7b2cm\u5217\uff0c\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u4e86\uff0c\u7136\u800c\u503c\u5f97\u6307\u51fa\u7684\u662f\uff0c\u8fd9\u91cc\u6240\u6784\u5efa\u7684\u7ebf\u6bb5\u6811\u4e0d\u540c\u4e8e\u50cf\u6253\u7684\u677f\u5b50\u4e00\u6837\u7684\u90a3\u79cd\uff08\u5f53\u7136\uff0c\u6709\u4eba\u4e5f\u8bb8\u4e00\u5f00\u59cb\u5c31\u6253\u7684\u677f\u5b50\u548c\u6211\u7684\u4e0d\u4e00\u6837\uff09\uff0c\u8fd9\u4e00\u70b9\u6211\u8017\u8d39\u4e86\u5f88\u957f\u65f6\u95f4\u624d\u5f04\u61c2\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u5148\u53d1\u6211\u6700\u5f00\u59cb\u5199\u9519\u7684~~\uff08\u60ca\u559c\u5427\uff01\uff09~~\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<string>\nusing namespace std;\nlong long stree[666666];\nlong long cnt;\nlong long n,m,q;\nlong long us[6666666];\nlong long num[6666666];\nlong long num1;\nlong long x,y;\nlong long lson[6666666];\nlong long rson[6666666];\nlong long sum[666666];\nlong long doa;\nbool flag;\nvoid insert(long long &pos,long long l,long long r,long long k,long long th){\n    if(!pos){\n        pos=++cnt;\n    }\n    if(l==r){\n        num[pos]=k;\n        return;\n    }\n    long long mid=l+r>>1;\n    long long cur=(mid-l+1);\n    if(cur>=th){\n        insert(lson[pos],l,mid,k,th);\n    }\n    else insert(rson[pos],mid+1,r,k,th-cur);\n}\nvoid find_th(long long &pos,long long l,long long r,long long th){\n    if(!pos){\n        pos=++cnt;\n        }\n    us[pos]++;\n    if(l==r){\n        if(num[pos]){\n            num1=num[pos];\n        }\n        else if(flag){\n            num1=(x-1)*m+l;\n        }\n        else{\n            num1=l*m;\n        }\n        return;\n    }\n    long long mid=l+r>>1;\n    long long cur=(mid-l+1)-us[lson[pos]];\n    if(cur>=th){\n        find_th(lson[pos],l,mid,th);\n    }\n    else find_th(rson[pos],mid+1,r,th-cur);\n    return;\n}\nint main(){\n    scanf(\"%lld%lld%lld\",&n,&m,&q);\n    for(long long iakioi=1;iakioi<=q;iakioi++){\n        scanf(\"%lld%lld\",&x,&y);\n        if(y==m){\n            flag=0;\n            //printf(\"%lld %lld\\n\",x,y);\n            find_th(stree[n+1],1,n+q,x);\n            printf(\"%lld\\n\",num1);\n            long long th=++sum[n+1];\n            insert(stree[n+1],1,n+q,num1,n+th);\n        }\n        else{\n            flag=1;\n            find_th(stree[x],1,m+q,y);\n            printf(\"%lld\\n\",num1);\n            doa=num1;\n            y=m;\n            find_th(stree[n+1],1,n+q,x);\n            long long th=++sum[x];\n            insert(stree[x],1,m+q,num1,m+th);\n            th=++sum[n+1];\n            insert(stree[n+1],1,n+q,doa,n+th);\n        }\n    }\n    return 0;\n}\n```\n\n\u4e3a\u4ec0\u4e48\u6211\u8981\u5148\u53d1\u4e00\u6ce2\u9519\u8bef\u4ee3\u7801\u5462\uff1f\uff0c\u5176\u5b9e\u4e0d\u662f\u60f3\u5751\u4eba\u4ec0\u4e48\u7684\uff0c\u662f\u60f3\u63d0\u9192\u5927\u5bb6\u7ec6\u8282\u771f\u7684\u8d85\u91cd\u8981\uff0c\u5bf9\u6bd4\u4ee3\u7801\u8981\u6765\u4e86\uff0c\u4f60\u4eec\u7559\u610f\u4e00\u4e0b\u533a\u522b\uff0c\u8be6\u7ec6\u6ce8\u91ca\u4e5f\u5728\u4e0b\u9762\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<string>\nusing namespace std;\nlong long stree[666666];//\u8fd9\u91cc\u4e0d\u662f\u6307\u7ebf\u6bb5\u6811\uff0c\u800c\u662f\u90a3\u51e0\u9897\u7ebf\u6bb5\u6811\u7684\u521d\u59cb\u6839\u8282\u70b9\nlong long cnt;//\u7ebf\u6bb5\u6811\u8282\u70b9\nlong long n,m,q;\nlong long us[6666666];\nlong long num[6666666];//66666666\u4ec0\u4e48\u7684\uff0c\u4e0d\u8981\u5728\u610f\u5566\nlong long num1;\nlong long x,y;\nlong long lson[6666666];//\u5de6\u5b50\u6811\u6839\u8282\u70b9\nlong long rson[6666666];//\u53f3\u5b50\u6811\u6839\u8282\u70b9\nlong long sum[666666];//\u5f53\u524d\u7ebf\u6bb5\u6811\u6269\u5c55\u7684\u8282\u70b9\u6570\nlong long doa;//\u8f85\u52a9\u50a8\u5b58\u529f\u80fd\nbool flag;//\u5206\u8fa8\u662f\u5426\u662f\u524dm-1\u884c\u7684\nvoid insert(long long &pos,long long l,long long r,long long k,long long th){//\u6ce8\u610f&\u7b26\u53f7\n\tif(!pos){\n\t\tpos=++cnt;//-\u300b\u5f53\u524d\u8282\u70b9\u7f16\u53f7\n\t}\n\tif(l==r){\n\t\tnum[pos]=k;\n\t\treturn;\n\t}\n\tlong long mid=l+r>>1;\n\tlong long cur=(mid-l+1);\n\tif(cur>=th){//\u4e0d\u61c2\u5148\u770b\u4e3b\u7a0b\u5e8f\n\t\tinsert(lson[pos],l,mid,k,th);\n\t}\n\telse insert(rson[pos],mid+1,r,k,th-cur);\n}\nvoid find_th(long long &pos,long long l,long long r,long long th){//\u6ce8\u610f&\u7b26\u53f7\n\tif(!pos){\n\t\tpos=++cnt;\n\t\t}\n\tus[pos]++;//\u8868\u793a\u8fd9\u4e00\u6bb5\u4e2d\u6709\u591a\u5c11\u8282\u70b9\u51fa\u961f\u5217\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7ef4\u62a4\u4e86\uff0c\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\uff08l==r\u65f6\u88ab\u786e\u5b9a\u4e86\uff0c\u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\uff09\n\tif(l==r){\n\t\tif(num[pos]){\n\t\t\tnum1=num[pos];\n\t\t}\n\t\telse if(flag){//flag\u4e3a\u771f\u8868\u793a\u5728\u524dm-1\u5217\n\t\t\tnum1=(x-1)*m+l;//\u8fd9\u91cc\u5f88\u663e\u7136\u662fl\n\t\t}\n\t\telse{\n\t\t\tnum1=l*m;\n\t\t}\n\t\treturn;\n\t}\n\tlong long mid=l+r>>1;\n\tlong long cur=(mid-l+1)-us[lson[pos]];\n\tif(cur>=th){\n\t\tfind_th(lson[pos],l,mid,th);\n\t}\n\telse find_th(rson[pos],mid+1,r,th-cur);\n\treturn;\n}\nint main(){//\u4ece\u4e3b\u7a0b\u5e8f\u5f00\u59cb\u770b\u4ee3\u7801\u662f\u4e2a\u597d\u4e60\u60ef\n\tscanf(\"%lld%lld%lld\",&n,&m,&q);\n\tfor(long long iakioi=1;iakioi<=q;iakioi++){//\u76ae\u8fd9\u4e00\u4e0b\uff0c\u5f00\u68ee\n\t\tscanf(\"%lld%lld\",&x,&y);\n\t\tif(y==m){\n\t\t\tflag=0;\n\t\t\t//printf(\"%lld %lld\\n\",x,y);\n\t\t\tfind_th(stree[n+1],1,n+q,x);\n\t\t\tprintf(\"%lld\\n\",num1);\n\t\t\tlong long th=++sum[n+1];\n\t\t\tinsert(stree[n+1],1,n+q,num1,n+th);\n\t\t}\n\t\telse{\n\t\t\tflag=1;\n\t\t\tfind_th(stree[x],1,m+q-1,y);\n\t\t\tprintf(\"%lld\\n\",num1);\n\t\t\tdoa=num1;\n\t\t\ty=m;\n\t\t\tflag=0;\n\t\t\tfind_th(stree[n+1],1,n+q,x);\n\t\t\tlong long th=++sum[x];\n\t\t\tinsert(stree[x],1,m+q-1,num1,m+th-1);//\u6ce8\u610f\u8fd9\u91cc\u662fm-1+q\u548cm+th-1\uff0c\u8840\u7684\u6559\u8bad\n\t\t\tth=++sum[n+1];\n\t\t\tinsert(stree[n+1],1,n+q,doa,n+th);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u53e6\u5916\uff0c\u5efa\u8bae\u5728\u8003\u573a\u4e0a\u6ca1\u6709\u5f88\u5927\u81ea\u4fe1\u7684\u8bdd\u5c31\u4e0d\u8981\u5f3a\u6c42\u6b63\u89e3\uff0c\u4e0d\u7136\u4e00\u4e2a\u7ec6\u8282\u5c31\u7206\u96f6\u4e86\u5f88\u5403\u4e8f\uff0c\u6211\u8c03\u4e86\u4e00\u4e0a\u5348\uff0c\u65e0\u6570\u6b21\u6000\u7591\u81ea\u5df1\u5199\u9519\u4e86\uff0c\u6700\u540e\u7761\u4e86\u4e2a\u5348\u89c9\u624d\u53d1\u73b0\uff08\u7761\u5348\u89c9\u6709\u76ca\u8eab\u5fc3\u5065\u5eb7\uff09\u3002\n\n\u518d\u770b\u4e0d\u61c2\u7684\u53ef\u4ee5\u79c1\u4fe1\u6211\uff0c\u4f46\u4e00\u5b9a\u8981\u6307\u51fa\u54ea\u91cc\u4e0d\u61c2\n\n\u53e6\u5916\u6c42\u7ba1\u7406\u5458\u80fd\u572810\u53f7\u4e4b\u524d\u8fc7\u5ba1\u6838\u554a\uff0c\u60a8\u6700\u5e05\u4e86~~\uff08\u4e0d\u4f1a\u662f\u5c0f\u59d0\u59d0\u5427\uff09~~\n\n",
        "postTime": 1541660400,
        "uid": 63531,
        "name": "wtime",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "$1.$\u66b4\u529b\uff0c\u76f4\u63a5\u6a21\u62df\u8fd9\u4e2a\u6d41\u7a0b\u3002\n\n$2.Splay$\n\n\u8003\u8651\u5bf9\u6bcf\u4e00\u884c\u5f00\u4e00\u9897$Splay$\u3002\u4f46\u53d1\u73b0\u8fd9\u6837\u4e0d\u884c\uff0c\u5c06\u4e00\u4e2a\u70b9\u5220\u9664\u9996\u5148\u9700\u8981\u5728\u539f$Splay$\u4e2d\u5220\u9664\uff0c\u7136\u540e\u6700\u540e\u4e00\u5217\u4e5f\u53d7\u5230\u5f71\u54cd\uff0c\u4ecd\u7136\u9700\u8981\u6267\u884c\u4e00\u4e2a\u53cd\u590d\u7684\u52a0\u5165\u5220\u9664\u64cd\u4f5c\u3002\n\n\u4ed4\u7ec6\u89c2\u5bdf\u9898\u76ee\u7684\u6027\u8d28\uff0c\u53d1\u73b0\u5176\u5b9e\u53d7\u5230\u5f71\u54cd\u7684\u70b9\u5e76\u4e0d\u591a\uff0c\u5176\u5b9e\u53ea\u6709\u539f\u6765\u7684\u90a3\u4e2a\u6570\u6240\u5728\u7684\u90a3\u4e00\u884c\u548c\u6700\u540e\u4e00\u5217\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\n\n\u6309\u7167\u8fd9\u4e2a\u601d\u8def\uff0c\u5bf9\u6bcf\u4e00\u884c\u7684\u524d$m-1$\u4e2a\u6570\u5f00\u4e00\u9897$Splay$\uff0c\u7136\u540e\u5bf9\u6700\u540e\u4e00\u5217\u5355\u72ec\u5f00\u4e00\u9897$Splay$\n\n\u8003\u8651\u7528$splay$\u7ef4\u62a4\u4e00\u4e0b\u4e2d\u5e8f\u904d\u5386\uff0c\u8fd9\u6837\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u90fd\u5f88\u65b9\u4fbf\u3002\n\n\u6bcf\u6b21\u51fa\u961f\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\uff0c\u5982\u679c\u5176\u4ece\u6700\u540e\u4e00\u5217\u51fa\u6765\u76f4\u63a5\u5728\u6700\u540e\u4e00\u5217$Splay$\u4e2d\u8fdb\u884c\u5220\u9664+\u63d2\u5165\u64cd\u4f5c\u3002\n\n\u5426\u5219\u5148\u5c06\u5176\u5728\u6240\u5728\u884c\u4e2d\u5220\u9664\uff0c\u5e76\u4ece\u6700\u540e\u4e00\u5217\u4e2d\u627e\u5230\u5bf9\u5e94\u884c\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5220\u9664\u5176\uff0c\u5e76\u5c06\u5176\u63d2\u5165\u54ea\u4e00\u884c\u4e2d\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u6570\u63d2\u5165\u6700\u540e\u4e00\u5217\u3002\n\n\u6ce8\u610f\u6bcf\u6b21\u63d2\u5165\u90fd\u662f\u76f4\u63a5\u63d2\u5165\u5230\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a$insert$\u5199\u7684\u7b80\u6d01\u4e00\u70b9\u3002\n\n\u8fd9\u6837\u5904\u7406\u5c31\u4f1a\u65b9\u4fbf\u8bb8\u591a\uff0c\u590d\u6742\u5ea6$O(n*mlogn+q(logn+logm))$\uff0c\u7a7a\u95f4$O(nm)$\u7684\uff0c\u5f00\u4e0d\u4e0b\u3002~~\u53ef\u4ee5\u5f97\u523050\u5206\u7684\u9ad8\u5206~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read() {\n\tchar cc = getchar(); int cn = 0, flus = 1;\n\twhile(cc < '0' || cc > '9') {  if( cc == '-' ) flus = -flus;  cc = getchar();  }\n\twhile(cc >= '0' && cc <= '9')  cn = cn * 10 + cc - '0', cc = getchar();\n\treturn cn * flus;\n}\nconst int N = 3e5 + 5 ; \n#define rep( i, s, t ) for( register int i = s; i <= t; ++ i )\nint n, m, q, root[N], cnt ; \nnamespace splay {\n\t#define rs(x) t[x].son[1]\n\t#define ls(x) t[x].son[0]\n\tstruct Tree {\n\t\tint son[2], fa, size, id ; \n\t\tvoid init( int x, int f ) {\n\t\t\tid = x, fa = f, size = 1 ; \n\t\t}\n\t} t[N * 20]; \n\tvoid pushup( int x ) {\n\t\tt[x].size = t[ls(x)].size + t[rs(x)].size + 1 ; \n\t}\n\tvoid rotate( int x ) {\n\t\tint f = t[x].fa, ff = t[f].fa, z = ( rs(f) == x ), ch = t[x].son[z ^ 1] ; \n\t\tt[x].fa = ff;\n\t\tif(ff) t[ff].son[rs(ff) == f] = x ; \n\t\tt[f].fa = x, t[x].son[z ^ 1] = f, t[ch].fa = f, t[f].son[z] = ch ;\n\t\tpushup(f), pushup(x) ; \n\t}\n\tvoid Splay( int x, int goal, int node ) {\n\t\twhile( t[x].fa != goal ) {\n\t\t\tint f = t[x].fa, ff = t[f].fa ; \n\t\t\tif( ff != goal ) ( ( rs(f) == x ) ^ ( rs(ff) == f ) ) ? rotate(x) : rotate(f) ; \n\t\t\trotate(x) ; \n\t\t}\n\t\tif( goal == 0 ) root[node] = x ; \n\t}\n\tvoid insert( int x, int node ) {\n\t\tint u = root[node], f = 0 ;\n\t\twhile( u ) f = u, u = rs(u) ;\n\t\tt[++ cnt].init( x, f ) ;\n\t\tif(f) t[f].son[1] = cnt, pushup(f) ; \n\t\tSplay( cnt, 0, node ) ;\n\t}\n\tint find( int x, int node ) {\n\t\tint u = root[node] ; \n\t\twhile(1) { \n\t\t\tif( t[ls(u)].size >= x ) u = ls(u) ; \n\t\t\telse if( t[ls(u)].size + 1 == x ) return u ; \n\t\t\telse x -= ( t[ls(u)].size + 1 ) , u = rs(u) ; \n\t\t} \n\t} \n\tint Pre( int x ) {\n\t\tint u = ls(x), f = 0 ;\n\t\twhile( u ) f = u, u = rs(u) ; \n\t\treturn f ; \n\t}\n\tint Nxt( int x ) {\n\t\tint u = rs(x), f = 0 ;\n\t\twhile( u ) f = u, u = ls(u) ; \n\t\treturn f ; \n\t}\n\tint Del( int x, int node ) {\n\t\tint u = find( x, node ); Splay( u, 0, node ) ;\n\t\tint  pre = Pre(u), nxt = Nxt(u) ;\n\t\tif( !pre && !nxt ) root[node] = 0 ;\n\t\telse if( !pre ) Splay( nxt, 0, node ), t[nxt].son[0] = 0, pushup(nxt);\n\t\telse if( !nxt ) Splay( pre, 0, node ), t[pre].son[1] = 0, pushup(pre);\n\t\telse Splay( nxt, 0, node ), Splay( pre, nxt, node ), t[pre].son[1] = 0, pushup(pre);\n\t\treturn t[u].id ; \n\t}\n\tvoid Work() {\n\t\trep( i, 1, n ) rep( j, 1, m )\n\t\t( j != m ) ? insert( (i - 1) * m + j, i ) : insert( (i - 1) * m + j, n + 1 ) ;//\u521d\u59cb\u5316\u63d2\u5165\uff0c\u6700\u540e\u4e00\u5217\u5355\u72ec\u5f00\u4e00\u9897Splay\n\t\tint x, y, u, v ; \n\t\twhile( q -- ) {\n\t\t\tx = read(), y = read() ; \n\t\t\tif( y == m ) u = Del( x, n + 1 ), insert( u, n + 1 ) ;\n\t\t\telse {\n\t\t\t\tu = Del( y, x ), v = Del( x, n + 1 ), \n\t\t\t\tinsert( v, x ), insert( u, n + 1 ) ;\n\t\t\t}\n\t\t\tprintf(\"%d\\n\", u ) ; \n\t\t}\n\t}\n}\nsigned main()\n{\n\tn = read(), m = read(), q = read() ; \n\tsplay::Work() ; \n\treturn 0;\n} \n```\n\n\u6211\u4eec\u60f3\u60f3\uff0c\u8fd9\u4e2a\u505a\u6cd5\u7684\u74f6\u9888\u5728\u90a3\u91cc $=>$ \u521d\u59cb\u5316+\u7a7a\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\u4e86\uff01\n\n\u5982\u679c\u6211\u4eec\u80fd\u4f18\u5316\u521d\u59cb\u5316\u7684\u590d\u6742\u5ea6\u5462\uff1f\u53d1\u73b0\u8be2\u95ee\u53ea\u6709 $3*10^5$ \u6b21\uff0c\u800c\u4e14\u5b9e\u9645\u4e0a\u5bf9\u4e8e\u4e00\u9897$Splay$\u5185\u90e8\u8282\u70b9\uff0c\u5b58\u5728\u8bb8\u591a\u7684\u7f16\u53f7\u662f\u8fde\u7eed\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5c06\u7f16\u53f7\u8fde\u7eed\u7684\u591a\u4e2a\u70b9\u7f29\u6210\u4e00\u4e2a\u70b9$->$\u5373\u4e00\u4e2a\u533a\u95f4\u7528\u4e00\u4e2a\u70b9\u8868\u793a\uff0c\u5f53\u7136\u8fd9\u79cd\u70b9\u7684\u5927\u5c0f\u4e0e\u666e\u901a\u70b9\u5e76\u4e0d\u4e00\u6837\u3002\n\n\u4e8e\u662f\u6211\u4eec\u7684\u4e00\u6b21\u64cd\u4f5c\u4fbf\u53ef\u4ee5\u53d8\u6210\u5148\u627e\u5230\u5305\u542b\u8fd9\u4e2a\u70b9\u7684\u533a\u95f4\u7136\u540e\u5c06\u5176\u5206\u88c2\uff0c\u518d\u5220\u9664\u5176\uff0c\u540e\u63d2\u5165\u3002\n\n\u8fd9\u91cc\u4e5f\u8981\u5206\u7c7b\u8ba8\u8bba\u3002\n\n$1.$\u8981\u5220\u9664\u70b9\u5df2\u7ecf\u88ab\u5206\u88c2\u8fc7\uff0c\u5df2\u7ecf\u5355\u72ec\u7684\u4e00\u4e2a\u70b9\u3002\u4e0d\u7528\u5206\u88c2\n\n$2.$\u8981\u5220\u9664\u70b9\u5728\u8981\u5206\u88c2\u7684\u533a\u95f4\u7684\u6700\u5de6\u8fb9\u3002\u5206\u88c2\u6210\u4e24\u4e2a\u70b9\n\n$3.$\u5176\u5728\u6700\u53f3\u8fb9\u3002\u5206\u88c2\u6210\u4e24\u4e2a\u70b9\n\n$4.$\u5176\u5728\u4e2d\u95f4\u3002\u5206\u88c2\u51fa\u4e09\u4e2a\u70b9\n\n\u8fd9\u6837\u7684\u8bdd\u521d\u59cb\u5316\u5c31\u53ea\u9700\u8981\u5bf9\u6ca1\u68f5$Splay$\u63d2\u5165\u4e00\u4e2a$[l,r]$\u7684\u533a\u95f4\uff0c\u4e5f\u5c31\u662f$O(n)$\u7684\u7a7a\u95f4\uff0c$O(n)$\u7684\u65f6\u95f4\u3002\u7136\u540e\u5bf9\u4e8e\u6700\u540e\u4e00\u5217\u6240\u6709\u5143\u7d20\u90fd\u8fd8\u8981\u63d2\u5165\u4e00\u4e2a\uff0c\u6240\u4ee5\u603b\u7a7a\u95f4\u6d88\u8017\u662f$:O(2n)$\uff0c\u521d\u59cb\u5316\u65f6\u95f4$O(n*\\log n)$\uff0c\u67e5\u8be2\u6bcf\u6b21\u6700\u591a\u5c06\u4e00\u4e2a\u5143\u7d20\u5206\u88c2\u6210\u4e09\u4e2a\u5143\u7d20\uff0c\u7a7a\u95f4\u8fd8\u662f\u7ebf\u6027\uff0c\u603b\u590d\u6742\u5ea6$O(n*\\log n+q*\\log n)$\n\n\u8be6\u89c1\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nint read() {\n    char cc = getchar(); int cn = 0, flus = 1;\n    while(cc < '0' || cc > '9') {  if( cc == '-' ) flus = -flus;  cc = getchar();  }\n    while(cc >= '0' && cc <= '9')  cn = cn * 10 + cc - '0', cc = getchar();\n    return cn * flus;\n}\nconst int N = 3e5 + 5 ; \n#define debug printf(\"Pass Line %d\\n\", __LINE__ ) \n#define rep( i, s, t ) for( register int i = s; i <= t; ++ i )\nint n, m, q, root[N], cnt, Kth ; \nnamespace splay {\n    #define rs(x) t[x].son[1]\n    #define ls(x) t[x].son[0]\n    struct Tree {\n        int son[2], fa, size, l, r, tot ; \n        void init( int ll, int rr, int f ) {\n            l = ll, r = rr, fa = f, tot = size = rr - ll + 1 ; \n        }\n    } t[N * 6]; \n    void pushup( int x ) {\n        t[x].size = t[ls(x)].size + t[rs(x)].size + t[x].tot ; \n    }\n    void rotate( int x ) {\n        int f = t[x].fa, ff = t[f].fa, z = ( rs(f) == x ), ch = t[x].son[z ^ 1] ; \n        t[x].fa = ff;\n        if(ff) t[ff].son[rs(ff) == f] = x ; \n        t[f].fa = x, t[x].son[z ^ 1] = f, t[ch].fa = f, t[f].son[z] = ch ;\n        pushup(f), pushup(x) ; \n    }\n    void Splay( int x, int goal, int node ) {\n        while( t[x].fa != goal ) {\n            int f = t[x].fa, ff = t[f].fa ; \n            if( ff != goal ) ( ( rs(f) == x ) ^ ( rs(ff) == f ) ) ? rotate(x) : rotate(f) ; \n            rotate(x) ; \n        }\n        if( goal == 0 ) root[node] = x ; \n    }\n    void insert( int l, int r, int node ) {\n        int u = root[node], f = 0 ;\n        while( u ) f = u, u = rs(u) ;\n        t[++ cnt].init( l, r, f ) ;\n        if(f) t[f].son[1] = cnt, pushup(f) ; \n        Splay( cnt, 0, node ) ;\n    }\n    int find( int x, int node ) {\n        int u = root[node] ;\n        while(1) { \n            if( t[ls(u)].size >= x ) u = ls(u) ;\n            else if( t[ls(u)].size + t[u].tot >= x ) { Kth = x - t[ls(u)].size; return u ; } \n            else x -= ( t[ls(u)].size + t[u].tot ), u = rs(u) ;\n        } \n    } \n    int Pre( int x ) {\n        int u = ls(x), f = 0 ;\n        while( u ) f = u, u = rs(u) ; \n        return f ; \n    }\n    int Nxt( int x ) {\n        int u = rs(x), f = 0 ;\n        while( u ) f = u, u = ls(u) ; \n        return f ; \n    }\n    void split( int x, int k ) { //\u5206\u88c2\u51fd\u6570. \n        int u = t[x].l + Kth - 1; // \u56e0\u4e3a\u533a\u95f4\u5185\u90e8\u6570\u8fde\u7eed\uff0c\u6211\u4eec\u8981\u5206\u88c2\u51fa\u6765\u7684\u6570\u5e94\u8be5\u662f\u5176\u5de6\u7aef\u70b9+\u6211\u4eec\u8981\u67e5\u8be2\u7684\u533a\u95f4\u5185\u90e8\u6392\u540d-1 \n        if( u == t[x].l && u == t[x].r ) return ; \n        if( u != t[x].r )\n            t[++ cnt].init( u + 1, t[x].r, x ), rs(cnt) = rs(x), t[rs(x)].fa = cnt, rs(x) = cnt, pushup(cnt) ;\n        if( u != t[x].l )\n            t[++ cnt].init( t[x].l, u - 1, x ), ls(cnt) = ls(x), t[ls(x)].fa = cnt, ls(x) = cnt, pushup(cnt) ;\n        t[x].init( u, u, 0 ), pushup(x) ; \n    } \n    int Del( int x, int node ) {\n        int u = find( x, node ); \n        Splay( u, 0, node ), split( u, x );\n        int pre = Pre(u), nxt = Nxt(u) ; //\u5220\u9664\uff0c\u533a\u522b\u4e0e\u677f\u5b50\uff0c\u6ca1\u6709\u63d2\u5165-inf/inf\uff0c\u5220\u9664\u65f6\u5206\u7c7b\u8ba8\u8bbaQAQ \n        if( !pre && !nxt ) root[node] = 0 ;\n        else if( !pre ) Splay( nxt, 0, node ), t[nxt].son[0] = 0, pushup(nxt);\n        else if( !nxt ) Splay( pre, 0, node ), t[pre].son[1] = 0, pushup(pre);\n        else Splay( nxt, 0, node ), Splay( pre, nxt, node ), t[pre].son[1] = 0, pushup(pre);\n        return t[u].l ; \n    }\n    void Work() {\n        rep( i, 1, n ) insert( (i - 1) * m + 1, (i - 1) * m + m - 1, i ), \n            insert( i * m, i * m, n + 1 ); \n        int x, y, u, v ; \n        while( q -- ) {\n            x = read(), y = read() ; \n            if( y == m ) u = Del( x, n + 1 ), insert( u, u, n + 1 ) ;\n            else {\n                u = Del( y, x ), v = Del( x, n + 1 ), \n                insert( v, v, x ), insert( u, u, n + 1 ) ;\n            }\n            printf(\"%lld\\n\", u ) ; \n        }\n    }\n}\nsigned main()\n{\n    n = read(), m = read(), q = read() ; \n    splay::Work() ; \n    return 0;\n} \n```\n\n\u5f53\u7136\u56e0\u4e3a\u6bcf\u6b21\u5206\u88c2\u64cd\u4f5c\u6700\u591a\u4f1a\u5206\u88c2\u51fa\u4e09\u4e2a\u70b9\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u70b9\u6cbf\u7528\u539f\u6765\uff0c\u6240\u4ee5\u4e00\u6b21\u5206\u88c2\u4f1a\u989d\u5916\u6d88\u8017\u4e24\u4e2a\u7a7a\u95f4\u3002\u6700\u574f\u7684\u60c5\u51b5\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a$O(4q+n+m)$\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(qlogn+qlogm+mlogn)$",
        "postTime": 1555935417,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u7bc7\u4f7f\u7528FHQ Treap\u7684\u9898\u89e3\u3002\n\n\u6700\u9ad8\u8d5e\u7684\u90a3\u7bc7FHQ Treap\u7684\u9898\u89e3\u5176\u5b9e\u4f1a\u4f7f\u5f97Treap\u4e0d\u6ee1\u8db3\u5806\u7684\u6027\u8d28QAQ\uff0c\u7136\u540e\u53c8\u53d1\u73b0\u5404\u79cdFHQ Treap\u7684\u505a\u6cd5\u53c8\u8ddf\u6211\u7684\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u7279\u5730\u6765\u5199\u4e00\u4e0b\u8fd9\u7bc7\u9898\u89e3\u3002\n\n\u9996\u5148\u5206\u6790\u8fd9\u9053\u9898\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b83\u5f88\u5bb9\u6613\u7528\u5e73\u8861\u6811\u6765\u7ef4\u62a4\uff0c\u5c31\u662f\u7a7a\u95f4\u4e0d\u591f\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u628a\u7f16\u53f7\u8fde\u7eed\u7684\u4e00\u6bb5\u70b9\u201c\u538b\u7f29\u201d\u6210\u4e00\u4e2a\u70b9\uff0c\u53ea\u6709\u5728\u4fee\u6539\u7684\u65f6\u5019\u6211\u4eec\u624d\u628a\u5b83\u88c2\u5f00\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5bf9FHQ Treap\u7684split\u64cd\u4f5c\u8fdb\u884c\u4e00\u4e9b\u4fee\u6539\u3002\n\u6211\u4eec\u8ba9\u5b83\u6bcf\u6b21\u5272\u6210\u4e09\u9897Treap\uff0c\u5de6\u8fb9\u7684\u90fd\u662f\u5927\u5c0f\u5c0f\u4e8ek\u7684\uff0c\u4e2d\u95f4\u7684\u53ea\u5305\u542b\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e2a\u8282\u70b9\u5c31\u662f\u5305\u542b\u5927\u5c0f\u4e3ak\u7684\u8282\u70b9\u7684\uff0c\u53f3\u8fb9\u7684\u90fd\u662f\u5927\u5c0f\u5927\u4e8ek\u7684\u3002\n\n```cpp\nvoid split(int i,int k,int& x,int& y,int& z)\n{\n\tif(!i) x=y=z=0;\n\telse\n\t{\n\t\tif(nodes[nodes[i].ch[0]].siz>=k)\n\t\t\tz=i,split(nodes[i].ch[0],k,x,y,nodes[i].ch[0]);\n\t\telse\n\t\t{\n\t\t\tk-=nodes[nodes[i].ch[0]].siz;\n\t\t\tif(k<=nodes[i].sum)\n\t\t\t{\n\t\t\t\ty=i;\n\t\t\t\tx=nodes[i].ch[0];\n\t\t\t\tz=nodes[i].ch[1];\n\t\t\t\tnodes[i].ch[0]=nodes[i].ch[1]=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx=i;\n\t\t\t\tk-=nodes[i].sum;\n\t\t\t\tsplit(nodes[i].ch[1],k,nodes[i].ch[1],y,z);\n\t\t\t}\n\t\t}\n\t\tupdate(i);\n\t}\n}\n```\n\n\u6709\u4e86\u8fd9\u6837\u7684split\u4fbf\u5f88\u597d\u5b9e\u73b0\u88c2\u70b9\u7684\u64cd\u4f5c\u4e86\u3002\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<stdio.h>\n#include<stdlib.h>\ntypedef long long ll;\n#define MAXNM 300005\n#define MAXQ MAXNM\nstruct node\n{\n\tint rdm;\n\tll v;\n\tll sum;\n\tll siz;\n\tint ch[2];\n}nodes[MAXNM*2+MAXQ*3];\nint root[MAXNM];\nvoid update(int i)\n{\n\tnodes[i].siz=nodes[nodes[i].ch[0]].siz+nodes[nodes[i].ch[1]].siz+nodes[i].sum; \n}\nint merge(int x,int y)\n{\n\tif(!x||!y) return x+y;\n\tint tmp;\n\tif(nodes[x].rdm>=nodes[y].rdm)\n\t\ttmp=x,nodes[x].ch[1]=merge(nodes[x].ch[1],y);\n\telse\n\t\ttmp=y,nodes[y].ch[0]=merge(x,nodes[y].ch[0]);\n\tupdate(tmp);\n\treturn tmp;\n}\nint tot;\nint new_node(ll v,ll sum)\n{\n\tif(!sum) return 0;\n\ttot++;\n\tnodes[tot].v=v;\n\tnodes[tot].sum=sum;\n\tnodes[tot].siz=sum;\n\tnodes[tot].rdm=rand();\n\treturn tot;\n}\nvoid split(int i,int k,int& x,int& y,int& z)\n{\n\tif(!i) x=y=z=0;\n\telse\n\t{\n\t\tif(nodes[nodes[i].ch[0]].siz>=k)\n\t\t\tz=i,split(nodes[i].ch[0],k,x,y,nodes[i].ch[0]);\n\t\telse\n\t\t{\n\t\t\tk-=nodes[nodes[i].ch[0]].siz;\n\t\t\tif(k<=nodes[i].sum)\n\t\t\t{\n\t\t\t\ty=i;\n\t\t\t\tx=nodes[i].ch[0];\n\t\t\t\tz=nodes[i].ch[1];\n\t\t\t\tnodes[i].ch[0]=nodes[i].ch[1]=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx=i;\n\t\t\t\tk-=nodes[i].sum;\n\t\t\t\tsplit(nodes[i].ch[1],k,nodes[i].ch[1],y,z);\n\t\t\t}\n\t\t}\n\t\tupdate(i);\n\t}\n}\n#ifdef WIN32\n#define LLD \"%I64d\"\n#else\n#define LLD \"%lld\"\n#endif\nint main()\n{\n\tsrand(23333);\n\tint n,m,q,x,y,i,a,b,c;\n\tll t1,t2;\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\tfor(i=1;i<=n;i++)\n\t{\n\t\troot[i]=new_node(1LL*(i-1)*m+1,m-1);\n\t\troot[0]=merge(root[0],new_node(1LL*i*m,1));\n\t}\n\tfor(i=1;i<=q;i++)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tif(y==m)\n\t\t{\n\t\t\tsplit(root[0],x,a,b,c);\n\t\t\tprintf(LLD \"\\n\",nodes[b].v);\n\t\t\troot[0]=merge(merge(a,c),b);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsplit(root[0],x,a,b,c);\n\t\t\troot[0]=merge(a,c);\n\t\t\troot[x]=merge(root[x],b);\n\t\t\tsplit(root[x],y,a,b,c);\n\t\t\ty-=nodes[a].siz;\n\t\t\tprintf(LLD \"\\n\",nodes[b].v+y-1);\n\t\t\troot[0]=merge(root[0],new_node(nodes[b].v+y-1,1));\n\t\t\tt1=y-1;\n\t\t\tt2=nodes[b].sum-y;\n\t\t\tb=merge(new_node(nodes[b].v,t1),new_node(nodes[b].v+y,t2));\n\t\t\troot[x]=merge(merge(a,b),c);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1540864990,
        "uid": 12842,
        "name": "0x3\u55b5\u9171",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "/\\*\n\u9996\u5148\u6709\u4e00\u4e2a\u975e\u5e38\u660e\u663e\u7684\u66b4\u529b\u662f\u8fd9\u4e48\u5199\u7684\uff1a\n\n\u76f4\u63a5\u62ff\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7ef4\u62a4\u5728\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u7f16\u53f7\uff0c\u7136\u540e\u66b4\u529b\u5bf9\u9f50\u5c31\u53ef\u4ee5\u4e86\n\n\u901a\u8fc7\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\u5220\u9664(x,y)\u4f4d\u7f6e\u7684\u70b9\uff0c\u7136\u540e\u6dfb\u52a0\u5230(n,m)\n\n\u53ea\u4f1a\u5f71\u54cd\u5230\u7b2cx\u884c\u548c\u7b2cm\u5217\uff0c\u6240\u4ee5\u6bcf\u6b21\u53ea\u8981\u4fee\u6539n+m\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\n\n\u5177\u4f53\u53c2\u8003\u4ee3\u78011\n\n\n\u5bf9\u4e8e20%\u7684\u6570\u636e\uff0c\u6211\u4eec\u53ea\u8981\u7ef4\u62a4\u90a3\u4e9b\u88ab\u4fee\u6539\u8fc7\u7684\u884c\u548c\u6700\u540e\u4e00\u5217\uff0c\u53ef\u4ee5\u505a\u5230O(nq)\n\n\n\u5bf9\u4e8e30%x=1\u7684\u6570\u636e\uff0c\u6211\u4eec\u53d1\u73b0\u53ea\u8981\u5728\u7b2c\u4e00\u884c\u5220\u6389\u4e00\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u653e\u5728(n,m),\u540e\u9762\u7684\u5143\u7d20\u6574\u4f53\u5f80\u524d\n\n\u5176\u5b9e\u5c31\u662f\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\uff0c\u4e00\u5f00\u59cb\u6709\u591a\u4e2a\u5143\u7d20\uff0c\u652f\u6301\u67e5\u627e\u7b2cx\u4e2a\u5143\u7d20\u5e76\u5220\u9664\uff0c\u4ee5\u53ca\u5728\u6700\u540e\u6dfb\u52a0\u5143\u7d20\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u8bb0\u5f55\u533a\u95f4\u5185\u6709\u591a\u5c11\u4e2a\u53ef\u7528\u70b9\uff0c\n\n\u5982\u679c\u6211\u4eec\u8981\u67e5\u627e\u7b2cx\u4e2a\uff0c\u800c\u5de6\u533a\u95f4\u6709k\u4e2a\uff0c\u82e5x<=k\u90a3\u4e48\u5c31\u5f80\u5de6\u533a\u95f4\u8d70\uff0c\u5426\u5219\u5728\u53f3\u533a\u95f4\u67e5\u8be2\u7b2cx-k\u4e2a\u5143\u7d20\n\n\u5177\u4f53\u53c2\u8003\u4ee3\u78012\n\n\n\u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u7ef4\u62a4n+1\u4e2a\u5e8f\u5217\uff0c\u652f\u6301\u67e5\u627e\u548c\u5220\u9664\u7b2cx\u4e2a\u5143\u7d20\uff0c\u4ee5\u53ca\u5728\u6700\u540e\u6dfb\u52a0\u5143\u7d20\n\n\u524dn\u4e2a\u5e8f\u5217\u7ef4\u62a4\u6bcf\u4e00\u884c\u7684\u524dm-1\u4e2a\u5143\u7d20\uff0c\u6700\u540e\u4e00\u4e2a\u5e8f\u5217\u7ef4\u62a4\u6700\u540e\u4e00\u5217\u7684\u5143\u7d20\n\n\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u9700\u8981\u5efan+1\u9897\u7ebf\u6bb5\u6811\uff0c\u65e0\u6cd5\u627f\u53d7\n\n\u4f46\u662f\u53ef\u4ee5\u53d1\u73b0\u4e00\u5f00\u59cb\u7ebf\u6bb5\u6811\u4e2d\u7684\u5143\u7d20\u662f\u6ee1\u7684\uff0c\u5e76\u4e14\u4e00\u5f00\u59cb\u7684\u5143\u7d20\u7f16\u53f7\u5341\u5206\u6709\u89c4\u5f8b\uff0c\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\n\n\u90a3\u4e48\u6211\u4eec\u4e00\u5f00\u59cb\u5c31\u76f4\u63a5\u628a\u6240\u6709\u7ebf\u6bb5\u6811\u5f53\u4f5c\u6ee1\u7684\uff0c\u7528\u52a8\u6001\u5f00\u70b9\u6bcf\u6b21\u5220\u70b9\uff0c\u540e\u9762\u52a0\u8fdb\u6765\u7684\u70b9\u7528vector\u50a8\u5b58\uff0c\n\n\u5f53\u5220\u9664(x,y)\u65f6\n\n\u5982\u679cy =m\u90a3\u4e48\u53ea\u8981\u64cd\u4f5c\u6700\u540e\u4e00\u5217\uff0c\u5982\u679c\u662f\u539f\u6765\u6700\u540e\u4e00\u5217\u7684\u5143\u7d20\uff0c\u5c31\u76f4\u63a5\u8ba1\u7b97\uff0c\u5426\u5219\u4ecevector\u4e2d\u63d0\u53d6\n\n\u5982\u679cy!=m\u90a3\u4e48\u5148\u5bf9\u7b2cx\u884c\u8fdb\u884c\u4e00\u6b21\u64cd\u4f5c\uff0c\u8f6c\u5316\u6210\u5220\u9664(x,m)\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u7136\u540e\u518d\u5bf9\u6700\u540e\u4e00\u5217\u8fdb\u884c\u64cd\u4f5c\n\n\n\u56e0\u4e3a\u6bcf\u6b21\u64cd\u4f5c\u6700\u591a\u4f1a\u52a0\u5165\u4e24\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u6700\u591a\u53ea\u4f1a\u6709O(2q)\u7684\u5143\u7d20\u50a8\u5b58\u5728vector\u4e2d\n\n\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn),\u7a7a\u95f4\u590d\u6742\u5ea6O(nlogn)\n\n\u5177\u4f53\u53c2\u8003\u4ee3\u78013\n\n\u56e0\u4e3a\u662f\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u4ee3\u7801\u53ef\u4ee5\u5e94\u8be5\u7b97\u6bd4\u8f83\u77ed\u7684\uff0c\u4e5f\u975e\u5e38\u597d\u5199\n\n\\*/\n\n\n\n\n```cpp\n//\u4ee3\u78011\n#include<bits/stdc++.h>\n#define mem(a,b) memset(a,b,sizeof(a))\n#define  For(i,a,b) for(int i=a,i##E=b;i<=i##E;++i)\n#define rFor(i,a,b) for(int i=a,i##E=b;i>=i##E;--i)\nusing namespace std;\ntypedef long long LL;\ntemplate<typename T>inline bool chkmin(T &a,const T &b){return a>b?a=b,1:0;}\ntemplate<typename T>inline bool chkmax(T &a,const T &b){return a<b?a=b,1:0;}\ntemplate<typename T>inline void read(T &x)\n{\n    x=0;int f=0;char ch=getchar();\n    while(!isdigit(ch))f|=(ch=='-'),ch=getchar();\n    while( isdigit(ch))x=x*10+ch-'0',ch=getchar();\n    x=f?-x:x;\n}\ninline void file()\n{\n    freopen(\"phalanx.in\",\"r\",stdin);\n    freopen(\"phalanx.out\",\"w\",stdout);\n}\nint n,m,Q;\nint a[1010][1010];\nint main()\n{\n    int x,y;\n    file();\n    read(n),read(m),read(Q);\n    For(i,1,n)\n        For(j,1,m)\n            a[i][j]=(i-1)*m+j;\n    For(i,1,Q)\n    {\n        read(x),read(y);\n        int ans=a[x][y];\n        printf(\"%d\\n\",ans);\n        For(i,y,m)a[x][i]=a[x][i+1];\n        For(i,x,n)a[i][m]=a[i+1][m];\n        a[n][m]=ans;\n    }\n    return 0;\n}\n//----------------------\u840c\u840c\u54d2\u5206\u5272\u7ebf-------------------------------\n//\u4ee3\u78012\n#include<bits/stdc++.h>\n#define ls l,mid\n#define rs mid+1,r\n#define lc p<<1\n#define rc p<<1|1\n#define mem(a,b) memset(a,b,sizeof(a))\n#define  For(i,a,b) for(int i=a,i##E=b;i<=i##E;++i)\n#define rFor(i,a,b) for(int i=a,i##E=b;i>=i##E;--i)\nusing namespace std;\ntypedef long long LL;\nconst int N=300010;\ntemplate<typename T>inline bool chkmin(T &a,const T &b){return a>b?a=b,1:0;}\ntemplate<typename T>inline bool chkmax(T &a,const T &b){return a<b?a=b,1:0;}\ntemplate<typename T>inline void read(T &x)\n{\n    x=0;int f=0;char ch=getchar();\n    while(!isdigit(ch))f|=(ch=='-'),ch=getchar();\n    while( isdigit(ch))x=x*10+ch-'0',ch=getchar();\n    x=f?-x:x;\n}\ninline void file()\n{\n    freopen(\"phalanx.in\",\"r\",stdin);\n    freopen(\"phalanx.out\",\"w\",stdout);\n}\nint n,m,Q;\nstruct node\n{\n    int x,y;\n    node(){}\n    node(int x,int y):x(x),y(y){}\n}s[N<<3];\nint cnt,Max;\nint sz[N<<4];\ninline void Add(int l,int r,int p,int x,node A)\n{\n    sz[p]++;\n    if(l==r){s[l]=A;return;}\n    int mid=(l+r)>>1;\n    if(x<=mid)Add(ls,lc,x,A);\n    else Add(rs,rc,x,A);\n}\ninline node find(int l,int r,int p,int x)\n{\n    sz[p]--;\n    if(l==r)\n    {\n        node now=s[l];\n        s[l]=node(0,0);\n        return now;\n    }\n    int mid=(l+r)>>1;\n    if(sz[lc]>=x)return find(ls,lc,x);\n    else return find(rs,rc,x-sz[lc]);\n}\nint main()\n{\n    int x,y;\n    file();\n    read(n),read(m),read(Q);\n    Max=n+m+Q;\n    For(i,1,m)Add(1,Max,1,++cnt,node(1,i));\n    For(i,2,n)Add(1,Max,1,++cnt,node(i,m));\n    For(i,1,Q)\n    {\n        read(x),read(y);\n        node ans=find(1,Max,1,y);\n        printf(\"%lld\\n\",(LL)(ans.x-1)*(LL)m+(LL)ans.y);\n        Add(1,Max,1,++cnt,ans);\n    }\n    return 0;\n}\n//----------------------\u840c\u840c\u54d2\u5206\u5272\u7ebf-------------------------------\n//\u4ee3\u78013\n#include<bits/stdc++.h>\n#define ls l,mid\n#define rs mid+1,r\n#define pb push_back\n#define SZ(x) (int)x.size()\n#define mem(a,b) memset(a,b,sizeof(a))\n#define  For(i,a,b) for(int i=a,i##E=b;i<=i##E;++i)\n#define rFor(i,a,b) for(int i=a,i##E=b;i>=i##E;--i)\nusing namespace std;\ntypedef long long LL;\nconst int N=300010;\nconst int M=10000010;\ntemplate<typename T>inline bool chkmin(T &a,const T &b){return a>b?a=b,1:0;}\ntemplate<typename T>inline bool chkmax(T &a,const T &b){return a<b?a=b,1:0;}\ntemplate<typename T>inline void read(T &x)\n{\n    x=0;int f=0;char ch=getchar();\n    while(!isdigit(ch))f|=(ch=='-'),ch=getchar();\n    while( isdigit(ch))x=x*10+ch-'0',ch=getchar();\n    x=f?-x:x;\n}\ninline void file()\n{\n    freopen(\"phalanx.in\",\"r\",stdin);\n    freopen(\"phalanx.out\",\"w\",stdout);\n}\nint n,m,Q,MAX,rt[N],cnt,sz[M],lc[M],rc[M];\nvector<LL>G[N];\ninline int Query(int l,int r,int p,int x)\n{\n    if(l==r)return l;\n    int mid=(l+r)>>1;int h=mid-l+1-sz[lc[p]];\n    if(x<=h)return Query(ls,lc[p],x);\n    else return Query(rs,rc[p],x-h);\n}\ninline void Del(int l,int r,int &p,int x)\n{\n    if(!p)p=++cnt;sz[p]++;\n    if(l==r)return;\n    int mid=(l+r)>>1;\n    if(x<=mid)Del(ls,lc[p],x);\n    else Del(rs,rc[p],x);\n}\ninline LL Del_line(int x,int y)\n{\n    int pos=Query(1,MAX,rt[x],y);\n    Del(1,MAX,rt[x],pos);\n    return pos<m?1ll*(x-1)*n+pos:G[x][pos-m];\n}\ninline LL Del_row(int x)\n{\n    int pos=Query(1,MAX,rt[n+1],x);\n    Del(1,MAX,rt[n+1],pos);\n    return pos<=n?1ll*(pos-1)*n+m:G[n+1][pos-n-1];\n}\nint main()\n{\n    int x,y;\n    file();\n    read(n),read(m),read(Q);\n    MAX=max(n,m)+Q;\n    For(i,1,Q)\n    {\n        read(x),read(y);\n        if(y==m)\n        {\n            LL id=Del_row(x);\n            G[n+1].pb(id);\n            printf(\"%lld\\n\",id);\n        }\n        else\n        {\n            LL id1=Del_line(x,y);\n            G[n+1].pb(id1);\n            LL id2=Del_row(x);\n            G[x].pb(id2);\n            printf(\"%lld\\n\",id1);\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1510661491,
        "uid": 8462,
        "name": "ztzshiwo001219",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u6765\u4e00\u4efd\u6811\u72b6\u6570\u7ec4\u7684\u9898\u89e3qaq\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u64cd\u4f5c\u603b\u662f\u5f53\u524d\u4e00\u4e2a\u4eba\u79bb\u5f00\u3002    \n\u5411\u5de6\u6807\u9f50\uff1a\u5220\u6389\u5f53\u524d\u90a3\u4e00\u4f4d\uff0c**\u540c\u4e00\u884c**\u7684\u4eba\u6765\u8865\u4e0a\u3002   \n\u5411\u4e0a\u6807\u9f50\uff1a\u7531\u4e8e\u6700\u540e\u4e00\u5217\u7684\u4e00\u4e2a\u6570\u88ab\u8865\u5230\u90a3\u4e00\u884c\u4e0a\uff0c\u76f8\u5f53\u4e8e\u6700\u540e\u4e00\u5217\u4e5f\u88ab\u5220\u53bb\u4e00\u4e2a\u6570\u3002\u79bb\u5f00\u7684\u90a3\u4e2a\u4eba\u8865\u4e0a\u3002    \n \n\u6211\u4eec\u53d1\u73b0\u884c\u4e0e\u884c\u4e4b\u95f4\u65e0\u76f4\u63a5\u5173\u8054\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u961f\u5217\u5206\u4e3a $n$ \u884c\uff0c\u6bcf\u884c $m-1$ \u4e2a\u6570\u4e3a\u4e00\u4e2a\u5e8f\u5217\uff0c\u4ee5\u53ca\u6700\u540e\u4e00\u5217\uff0c\u5171 $m$ \u4e2a\u6570\u4e3a\u4e00\u4e2a\u5e8f\u5217\u3002\u5982\u4e0b\u56fe\u6240\u793a\u3002\u6211\u4eec\u628a\u7b2c $1$ \u5230 \u7b2c $n$ \u884c\u7684\u5e8f\u5217\u7f16\u53f7 1~n \uff0c\u6700\u540e\u4e00\u5217\u7684\u5e8f\u5217\u7f16\u53f7\u4e3a $0$ \u53f7\u5e8f\u5217\u3002\n\n\n![1.jpg](https://i.loli.net/2020/10/26/altgksUhvbTfINL.jpg)\n\n\u6bd4\u5982\u6211\u4eec\u73b0\u5728\u8981\u5220\u96648\uff0c\u6211\u4eec\u9996\u5148\u5148\u628a $2$ \u53f7\u5e8f\u5217\u4e2d 8 \u5220\u53bb\uff0c\u628a $0$ \u53f7\u5e8f\u5217\u4e2d 10 \u5220\u53bb \uff0c \u628a 10 \u6dfb\u52a0\u5230 $2$ \u53f7\u5e8f\u5217 \u672b\u5c3e\uff0c\u628a 8 \u6dfb\u52a0\u5230 $0$ \u53f7\u5e8f\u5217\u672b\u5c3e\u3002    \n\n\u6211\u4eec\u53d1\u73b0\u6bcf\u4e2a\u5e8f\u5217\u9700\u8981\u652f\u6301\u7684\u64cd\u4f5c\u662f\u4e00\u6837\u7684\uff1a      \n1. \u4efb\u610f\u67e5\u8be2\u5220\u9664\u961f\u5217\u4e2d\u7684\u7b2c i \u4e2a\u5143\u7d20\u3002   \n2. \u5728\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20\u3002  \n\n\u540c\u65f6\u9700\u8981\u652f\u6301\u4efb\u610f\u67e5\u8be2\u5220\u9664\uff0c\u5728\u4efb\u610f\u4f4d\u7f6e\u6dfb\u52a0\u5143\u7d20\u7684\u6570\u636e\u7ed3\u6784\u9700\u8981\u4f7f\u7528\u5e73\u8861\u6811\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u53ea\u9700\u8981\u652f\u6301**\u5728\u672b\u5c3e\u63d2\u5165\u5143\u7d20**\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206+\u6811\u72b6\u6570\u7ec4\u6765\u5b9e\u73b0\u3002  \n\n\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u6211\u4eec\u521d\u59cb\u5316\u7ed9\u6bcf\u4e2a\u5e8f\u5217\u4e00\u4e2a1\uff0c\u8868\u793a\u5f53\u524d\u6bcf\u4e2a\u6570\u90fd\u5b58\u5728\u3002\u5982\u679c\u7b2c $i$ \u4e2a\u6570\u88ab\u5220\u9664\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u5b83\u7684\u4e0b\u6807\u53d8\u6210 $0$ \uff0c\u8868\u793a\u5f53\u524d\u6570\u5df2\u7ecf\u88ab\u5220\u9664\u3002\u6211\u4eec\u5728\u6c42\u524d $i$ \u4e2a\u6570\u7684\u524d\u7f00\u548c\u65f6\uff0c\u56e0\u4e3a\u53ea\u6709\u5b58\u5728\u624d\u4f1a\u52a01\uff0c\u6211\u4eec\u5f97\u5230\u7684\u5c31\u662f\u524d $i$ \u4e2a\u6570\u8fd8\u6709\u591a\u5c11\u4e2a\u6570\u5b58\u5728\u3002\u5373\u7b2c $i$ \u4e2a\u5143\u7d20\u5c31\u662f\u524d\u7f00\u548c\u4e3a $i$ \u7684\u4f4d\u7f6e\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5**\u4e8c\u5206**\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u8bbf\u95ee\u5220\u9664\u4e86\u3002\u672b\u5c3e\u63d2\u5165\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528vector\u5728\u672b\u5c3e\u63d2\u5165\u5c31\u884c\u4e86\u3002\u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u524d\u7f00\u548c\u5f88\u591a\u4e2a**\u76f8\u7b49**\uff0c\u4ee3\u8868\u6211\u4eec\u8981\u627e\u7684\u6570\u53f3\u8fb9\u6709\u5f88\u591a\u4e2a\u6570\u88ab\u5220\u9664\uff0c\u503c\u4e3a0\uff0c\u6240\u4ee5\u4e00\u76f4\u5230\u4e0b\u4e00\u4e2a\u5b58\u5728\u7684\u6570\u4e3a\u6b62\u524d\u7f00\u548c\u90fd\u76f8\u7b49\u3002\u6240\u4ee5\u6211\u4eec\u4e8c\u5206\u662f\u9700\u8981\u627e**\u4e0b\u6807\u6700\u5c0f\u7684\u6570**\u3002\n\n\n\n```cpp\ninline int lowbit(int x)\n{\n\treturn x&-x;\n} \ninline void add(int x,int k)\n{\n\twhile(x<=mx)\n\t{\n\t\td[x]+=k;\n\t\tx+=lowbit(x);\n\t}\n\treturn;\n}\ninline int query(int x)\n{\n\tint ans=0;\n\twhile(x)\n\t{\n\t\tans+=d[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn ans;\n} //\u6811\u72b6\u6570\u7ec4\u6a21\u677f\nint select(int k)\n{\n\tint l=0,r=mx,ans=mx;\n\twhile(l<=r) //\u4e8c\u5206\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(query(mid)>=k) //\u5f53\u524d\u7684mid\u6bd4\u6211\u4eec\u9700\u8981\u7684\u5927\n\t\t{\n\t\t\tans=mid;\n\t\t\tr=mid-1;\n\t\t}\n\t\telse\n\t\t\tl=mid+1;\n\t}\n\treturn ans;\n}\n```\n\n\u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u5e8f\u5217\u4e86\u3002\u4f46\u6211\u4eec\u76ee\u524d\u53ef\u4ee5\u505a\u5230\u6307\u5b9a\u4e0b\u6807\u5220\u9664\u63d2\u5165\u3002\u4f46\u9898\u76ee\u7ed9\u51fa\u7684\u662f\u5bf9\u4e8e\u5f53\u524d\u5e8f\u5217\u7684\u76f8\u5bf9\u5750\u6807\uff0c\u6211\u4eec\u9700\u8981\u5904\u7406\u51fa\u5b83\u76f8\u5bf9\u4e8e\u539f\u59cb\u5e8f\u5217\u7684\u5750\u6807\u4e3a\u6b62\u3002    \n\u6bd4\u5982\u6709\u4e00\u4e2a\u5e8f\u5217 1 2 3 4 5\u3002\u9996\u5148\u6211\u4eec\u5220\u9664\u7b2c\u4e8c\u4e2a\u6570\uff0c\u53d8\u4e3a 1 3 4 5 6\u3002\u6b64\u65f6\u6211\u4eec\u7ee7\u7eed\u5220\u9664**\u5f53\u524d\u5e8f\u5217**\u7684\u7b2c\u4e8c\u4e2a\u6570\uff0c\u6211\u4eec\u9700\u8981\u5220\u96643\uff0c\u5373\u6211\u4eec\u9700\u8981\u5220\u9664**\u539f\u5e8f\u5217**\u4e2d\u7684\u7b2c3\u4e2a\u6570\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5904\u7406\u51fa\u5bf9\u4e8e\u6bcf\u4e00\u884c\u64cd\u4f5c\uff0c\u9884\u5904\u7406\u51fa\u6570\u7ec4 $pre[i]$ \u8868\u793a\u7b2c $i$ \u4e2a\u8be2\u95ee\u5e94\u8be5\u662f\u7b2c $x$ \u884c\u5bf9\u4e8e\u539f\u5e8f\u5217\u7684\u7b2c\u51e0\u4e2a\u6570\u3002\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u4e5f\u53ef\u4ee5\u6811\u72b6\u6570\u7ec4+\u4e8c\u5206\u5b8c\u6210\u3002\u6211\u4eec\u5148\u628a\u6240\u6709\u7684\u64cd\u4f5c\u5168\u90e8\u79bb\u7ebf\u50a8\u5b58\uff0c\u5bf9\u4e8e\u7b2c $i$ \u884c\uff0c\u6211\u4eec\u4e00\u5171\u9700\u8981\u5220\u9664k\u6b21\uff0c\u6bcf\u6b21\u9700\u8981\u5220\u9664**\u5f53\u524d\u5e8f\u5217**\u7684\u7b2c $x$\u4e2a\u6570\u3002\u7ee7\u7eed\u4f7f\u7528\u4e0a\u9762\u5bf9\u4e8e\u5e8f\u5217\u7684\u64cd\u4f5c\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u5bf9\u4e8e\u6bcf\u4e00\u884c\u6807\u8bb0\uff0c0\u8868\u793a\u5f53\u524d\u884c\u7b2c $i$ \u4e2a\u6570\u5df2\u7ecf\u88ab\u5220\u53bb\uff0c1\u8868\u793a\u5b58\u5728\u3002\u5f53\u524d\u5e8f\u5217\u7b2c $i$ \u4e2a\u5143\u7d20\u5c31\u662f\u524d\u7f00\u548c\u4e3a $i$ \u7684\u4f4d\u7f6e\u3002\n\n```cpp\nstruct node\n{\n\tint k,id; //k\u8868\u793a\u5220\u9664\u7b2ck\u4e2a\u6570\uff0cid\u8868\u793a\u5bf9\u4e8e\u7b2ci\u4e2a\u8be2\u95ee\n\tnode(int _k,int _id)\n\t{\n\t\tk=_k;id=_id;\n\t}\n};\nvector<node> v[MAXN];\n\nn=read();m=read();q=read();\nmx=max(m,n)+q; //\u6811\u72b6\u6570\u7ec4\u5927\u5c0f\uff0c\u540e\u6587\u63d0\u5230\nfor(int i=1;i<=q;i++)\n{\n\tx[i]=read();\n\ty[i]=read();\n\tif(y[i]!=m) //\u4fee\u6539\u6700\u540e\u4e00\u5217\uff0c\u4e0d\u5728\u5f53\u524d\u5e8f\u5217\u4e0a\n\t\tv[x[i]].push_back(node(y[i],i));\n}\nfor(int i=1;i<=mx;i++)\n\tadd(i,1); //\u521d\u59cb\u4e3a1\nfor(int i=1;i<=n;i++)\n{ \n\tfor(int j=0;j<v[i].size();j++) \n\t{\n\t\tnode t=v[i][j];\n\t\tpre[t.id]=select(t.k); //\u8bb0\u5f55\u5b9e\u9645\u4f4d\u7f6e\n\t\tadd(pre[t.id],-1); //\u628a\u5f53\u524d\u6570\u5220\u9664\n\t}\n\tfor(int j=0;j<v[i].size();j++)\n\t{\n\t\tnode t=v[i][j]; \n\t\tadd(pre[t.id],1); //\u8fd8\u539f\u5f53\u524d\u5e8f\u5217\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u907f\u514d\u5e72\u6270\u4e0b\u4e00\u6b21\u6811\u72b6\u6570\u7ec4\u7684\u67e5\u8be2\u3002\n\t}\n}\n```\n\n\u56e0\u4e3a\u6211\u4eec\u6ce8\u610f\u5230\u8fd9\u9053\u9898\u7684\u6570\u636e\u8303\u56f4\u4e3a3e5\uff0c\u6240\u4ee5\u6211\u4eec\u6ca1\u6cd5\u5bf9\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u6bcf\u6b21\u8bfb\u5165\u4e00\u4e2a\u64cd\u4f5c\u5c31\u5728\u5f53\u524d\u884c\u7684\u6811\u72b6\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u79bb\u7ebf\uff0c\u5904\u7406\u51fa\u5f53\u524d\u884c\u6240\u9700\u8981\u7684\u6240\u6709\u64cd\u4f5c\u3002\u8fd9\u6837\u6211\u4eec\u7684\u9884\u5904\u7406\u5c31\u53ef\u4ee5\u5728\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u4e0a\u5b8c\u6210\u4e86\u3002\u8fd9\u662f\u6211\u4eec\u9700\u8981\u6bcf\u6b21\u8fd8\u539f\u6811\u72b6\u6570\u7ec4\u7684\u76ee\u7684\uff0c\u4e5f\u662f\u6211\u4eec\u79bb\u7ebf\u505a\u7684\u76ee\u7684\u3002\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5e8f\u5217\uff0c\u521d\u59cb\u7684\u65f6\u5019\u5e8f\u5217\u4e3a\u4e00\u4e2a\u7b49\u5dee\u5e8f\u5217\uff0c\u6211\u4eec\u79f0\u8fd9\u4e9b\u6570\u4e3a**\u539f\u6570**\u3002\u540e\u9762\u8fd9\u4e9b\u539f\u5e8f\u5217\u4e2d\u7684\u6570\u4f1a\u9010\u6e10\u88ab\u5220\u9664\uff0c\u4ece\u800c\u88ab\u4ece\u672b\u5c3e\u6dfb\u52a0\u8fdb\u6765\u7684**\u65b0\u6570**\u66ff\u4ee3\uff0c\u5bf9\u4e8e\u539f\u6570\uff0c\u4f4d\u4e8e\u884c\u4e0a\u7684\u4e00\u5171\u6709 $m$ \u4e2a\uff0c\u4f4d\u4e8e\u5217\u4e0a\u7684\u4e00\u5171\u6709 $n$ \u4e2a\u3002\u65b0\u6570\u6bcf\u6b21\u5bf9\u5f53\u524d\u884c\u8fdb\u884c\u672b\u5c3e\u6dfb\u52a0\u64cd\u4f5c\u65f6\u4f1a\u589e\u52a0\u4e00\u4e2a\u3002\u4e00\u5171\u6709 $q$ \u6b21\u64cd\u4f5c\uff0c\u6240\u4ee5\u5e8f\u5217\u4e2d\u6700\u591a\u6709$\\max(n,m)+q$ \u4e2a\u5143\u7d20\u3002\u6240\u4ee5\u6211\u4eec\u9009\u53d6\u6811\u72b6\u6570\u7ec4\u5927\u5c0f $mx = \\max(n,m)+q$ \u3002 \n\n\u5bf9\u4e8e\u539f\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u516c\u5f0f\u7b2c $i$ \u884c\u7b2c $j$ \u5217 \u7684\u5b66\u751f\u7684\u7f16\u53f7\u662f  $(i\u22121)\u00d7m+j$ \u76f4\u63a5\u7b97\u51fa\u3002\u5bf9\u4e8e\u65b0\u6570\uff0c\u6211\u4eec\u5219\u4ece\u6bcf\u6b21\u4ece\u672b\u5c3e\u6dfb\u52a0\u65b0\u6570\u7684vector\u4e2d\u53d6\u51fa\u3002\u5bf9\u4e8e\u6bcf\u4e00\u884c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u5f53\u524d\u9700\u8981\u5220\u9664\u7684\u6570 $pre[i]$  \u4e0e $m$ \u7684\u5173\u7cfb\u5c31\u53ef\u4ee5\u5224\u65ad\u51fa\u662f\u5426\u5728\u539f\u6570\u5217\u4e0a\uff0c\u5982\u679c\u5b83\u5728\u65b0\u6570\u5217\u4e0a\uff0c\u56e0\u4e3a\u65b0\u6570\u5217\u7684\u7f16\u53f7\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u5219\u5b83\u5728\u65b0\u6570\u5217\u4e0a\u7684\u7f16\u53f7\u9700\u8981\u51cf\u53bb\u539f\u6570\u5217\u4e2d\u7684\u6570\uff08 $m-1$ \u4e2a\u6570\uff09\uff0c\u5373\u5b83\u7684\u7f16\u53f7\u4e3a $pre[i]-(m-1)+1$ \uff1b\u5bf9\u4e8e\u5217\u4e0a\u7684\u6570\uff0c\u540c\u7406\uff0c\u6211\u4eec\u9700\u8981\u64cd\u4f5c\u7684\u6570\u4e3a\u5f53\u524d\u5e8f\u5217\u7684 $x[i]$ \u5373\u539f\u5e8f\u5217\u7684 $select(x[i])$ \uff0c\u53ea\u9700\u8981\u6bd4\u8f83\u5b83\u4e0e $n$ \u7684\u5173\u7cfb\u5373\u53ef\uff0c\u540c\u7406\u65b0\u6570\u5217\u7684\u7f16\u53f7\u9700\u8981\u51cf\u53bb $n+1$\u3002\n\n\u63a5\u4e0b\u53bb\u6211\u4eec\u5c31\u53ef\u4ee5\u6765\u7ef4\u62a4\u6574\u9053\u9898\u4e86\u3002\u56e0\u4e3a\u4e4b\u524d\u884c\u7684\u4fee\u6539\u5df2\u7ecf\u88ab\u6211\u4eec\u4e0e\u5904\u7406\u597d\u4e86\uff0c\u6211\u4eec\u7684\u6811\u72b6\u6570\u7ec4\u8fd9\u65f6\u5904\u7406\u5217\u4e0a\u7684\u4fee\u6539\u3002\u6211\u4eec\u9996\u5148\u5904\u7406\u51fa\u6211\u4eec\u9700\u8981\u5904\u7406\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6570 $last$\u3002\u5b83\u5728 $0$ \u53f7\u5e8f\u5217\u4e0a\uff0c\u5982\u679c\u5b83\u5728\u662f\u7b2c $t$ \u4e2a\u6570\u4ee3\u8868\u5b83\u5728\u7b2c $t$ \u884c\u4e0a\uff0c\u7f16\u53f7\u4e3a $t \\times m$\u3002\n\n\u5982\u679c $y[i]=m$ \u5219\u5220\u9664\u7684\u6570\u5c31\u5728 $0$ \u53f7\u5e8f\u5217\u4e0a\uff0c$last$ \u5373\u4e3a\u7b54\u6848\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u6570\u6dfb\u52a0\u5230\u5f53\u524d\u884c\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a,\u540c\u65f6\u5728\u884c\u5e8f\u5217\u4e2d\u7b97\u51fa\u5f53\u524d\u79bb\u5f00\u7684\u6570\u5b57 $ans$\uff0c\u5e76\u628a\u5b83\u6dfb\u52a0\u5230 $0$ \u53f7\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u3002\n\n```cpp\nfor(int i=1;i<=q;i++)\n{\n\tint t=select(x[i]),ans,last; //\u9009\u51fa\u5217\u4e0a\u7684\u6570\n\tadd(t,-1); //\u5220\u9664\n\tif(t<=n) \n\t\tlast=t*m; //\u5728\u539f\u6570\u4e2d\n\telse\n\t\tlast=s[0][t-n-1]; //\u5728\u65b0\u6570\u4e2d\n\tif(y[i]!=m) //\u5f53\u524d\u67e5\u8be2\u7684\u6570\u4e0d\u5728\u6700\u540e\u4e00\u5217\u4e0a\n\t{\n\t\ts[x[i]].push_back(last); //\u628a\u5217\u4e0a\u7684\u6570\u653e\u5230\u884c\u4e2d\n\t\tif(pre[i]<m)\n\t\t\tans=(x[i]-1)*m+pre[i];//\u539f\u6570\u4e2d\n\t\telse\n\t\t\tans=s[x[i]][pre[i]-m];//\u65b0\u6570\u4e2d\n    }\n\telse \n\t\tans=last;//\u5982\u679c\u5728\u6700\u540e\u4e00\u5217\u4e0a\uff0clast\u5373\u4e3a\u7b54\u6848\n\ts[0].push_back(ans); //\u628a\u5f53\u524d\u79bb\u961f\u7684\u4eba\u653e\u5230\u961f\u5c3e\n\tcout<<ans<<endl;//\u8f93\u51fa\n}\n```\n\n\n\n\u8fd9\u6837\u8fd9\u9053\u9898\u5c31\u7ed3\u675f\u4e86\uff0c\u4e2a\u4eba\u611f\u89c9\u8fd9\u9053\u9898\u5bf9\u4e8e\u64cd\u4f5c\u7684\u62c6\u5206\u4ee5\u53ca\u5bf9\u4e8e\u6811\u72b6\u6570\u7ec4\u7684\u4f7f\u7528\u8fd8\u662f\u633a\u5999\u7684\u3002  \n\n\u653e\u4e0a\u5b8c\u6574\u4ee3\u7801\uff1a  \n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int MAXN = 3e5+5; \ninline int read()\n{\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0' || c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0' && c<='9'){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nstruct node\n{\n\tint k,id;\n\tnode(int _k,int _id)\n\t{\n\t\tk=_k;id=_id;\n\t}\n};\nint n,m,q,x[MAXN],y[MAXN],mx;\nint d[MAXN<<1],pre[MAXN];\nvector<node> v[MAXN];\nvector<int> s[MAXN];\ninline int lowbit(int x)\n{\n\treturn x&-x;\n}\ninline void add(int x,int k)\n{\n\twhile(x<=mx)\n\t{\n\t\td[x]+=k;\n\t\tx+=lowbit(x);\n\t}\n\treturn;\n}\ninline int query(int x)\n{\n\tint ans=0;\n\twhile(x)\n\t{\n\t\tans+=d[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn ans;\n}\nint select(int k)\n{\n\tint l=0,r=mx,ans=mx;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(query(mid)>=k)\n\t\t{\n\t\t\tans=mid;\n\t\t\tr=mid-1;\n\t\t}\n\t\telse\n\t\t\tl=mid+1;\n\t}\n\treturn ans;\n}\nsigned main()\n{\n\tn=read();m=read();q=read();\n\tmx=max(m,n)+q;\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tx[i]=read();\n\t\ty[i]=read();\n\t\tif(y[i]!=m)\n\t\t\tv[x[i]].push_back(node(y[i],i));\n\t}\n\tfor(int i=1;i<=mx;i++)\n\t\tadd(i,1);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=0;j<v[i].size();j++)\n\t\t{\n\t\t\tnode t=v[i][j];\n\t\t\tpre[t.id]=select(t.k);\n\t\t\tadd(pre[t.id],-1);\n\t\t}\n\t\tfor(int j=0;j<v[i].size();j++)\n\t\t{\n\t\t\tnode t=v[i][j];\n\t\t\tadd(pre[t.id],1);\n\t\t}\n\t}\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tint t=select(x[i]),ans,last;\n\t\tadd(t,-1);\n\t\tif(t<=n)\n\t\t\tlast=t*m;\n\t\telse\n\t\t\tlast=s[0][t-n-1];\n\t\tif(y[i]!=m)\n\t\t{\n\t\t\ts[x[i]].push_back(last);\n\t\t\tif(pre[i]<m)\n\t\t\t\tans=(x[i]-1)*m+pre[i];\n\t\t\telse\n\t\t\t\tans=s[x[i]][pre[i]-m];\n\t\t}\n\t\telse \n\t\t\tans=last;\n\t\ts[0].push_back(ans);\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1603714767,
        "uid": 35998,
        "name": "\u7287\u7287\u7287\u7287",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "~~\u4f3c\u4e4eNOIP\u7684std\u662f\u6811\u72b6\u6570\u7ec4+\u4e8c\u5206\uff0c\u4e0d\u662f\u591a\u4e00\u4e2alog\u5417= =~~\n\n#### \u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811~\n\n\u663e\u7136\u6bcf\u4e00\u884c\uff08\u9664\u6700\u540e\u4e00\u5217\uff09\u662f\u72ec\u7acb\u7684\uff0c\u5982\u679c\u5bf9\u6bcf\u4e00\u884c\u548c\u6700\u540e\u4e00\u5217vector\u6a21\u62df\u7684\u8bdd\u5c31\u662f\u6bcf\u6b21\u53d6\u51fa\u7b2cx\u884cvector\u7684\u7b2cy\u4e2a\u6570a\uff0c\u5728\u6700\u540e\u4e00\u5217\u7684vector\u4e2d\u53d6\u51fa\u7b2cx\u4e2a\u6570push\u5230\u7b2cx\u884c\u7684vector\u540e\u9762\uff0c\u518d\u628aa push\u5230\u6700\u540e\u4e00\u884c\u7684vector\u540e\u9762\uff08\u663e\u7136TLE+MLE QAQ\n\n\u5982\u4f55\u4f18\u5316\n\n\u9996\u5148\uff0c\u6709\u597d\u591a\u8fde\u7eed\u7684\u4eba\u662f\u6ca1\u6709\u51fa\u8fc7\u961f\u7684\uff0c\u4e0d\u9700\u8981\u5bf9\u6bcf\u4e2a\u4eba\u90fd\u8bb0\u5f55\u4fe1\u606f\uff08\u53ef\u4ee5\u7f29\u6210\u4e00\u4e2a\u70b9\uff09\uff0c\u8fd9\u6837\u5c31\u89e3\u51b3\u4e86MLE\uff0c\u5176\u6b21\uff0cvector \u7684 erase\u662fO\uff08n\uff09\u7684\uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6\u63a5\u53d7\u4e0d\u4e86\uff0c\u6240\u4ee5\u8003\u8651\u4e0d\u5220\u9664\uff0c\u53ea\u662f\u5bf9\u51fa\u961f\u7684\u505a\u4e0a\u8bb0\u53f7\uff0c\u7136\u540e\u5728\u8bbf\u95ee\u7684\u65f6\u5019\u8df3\u8fc7\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u5c31ok\u4e86\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u53ea\u60f3\u7ef4\u62a4\u90a3\u4e9b\u51fa\u961f\u7684\u4eba\u4ee5\u53ca\u6700\u540e\u4e00\u5217\u5bf9\u5e94\u4eba\u7684\u4fe1\u606f\uff0c\u5176\u4ed6\u4fe1\u606f\u5e76\u592a\u91cd\u8981\uff0c\u663e\u7136\u8981\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u3002\uff08\u52a8\u6001\u5f00\u70b9\uff0c\u7b80\u5355\u5730\u8bf4\u5c31\u662f\u4e00\u5f00\u59cb\u6240\u6709\u8282\u70b9\u7f16\u53f7\u90fd\u4e3a0\uff0c\u82e5\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u4e3a0\uff0c\u5373\u672a\u88ab\u8bbf\u95ee\u8fc7\uff0c\u8ba9\u8282\u70b9\u603b\u6570+1\u5e76\u4f7f\u5f53\u524d\u70b9\u7684\u7f16\u53f7\u4e3a\u8282\u70b9\u603b\u6570\uff0c\u540c\u65f6\u5728\u7236\u4eb2\u5904\u8bb0\u5f55\u513f\u5b50\u7f16\u53f7\uff09\n\n\u5bf9\u6bcf\u4e00\u884c\u7684\u524dm-1\u4e2a\u4eba\u548c\u6700\u540e\u4e00\u5217n\u4e2a\u4eba\u90fd\u5f00\u4e00\u4e2a\u90fd\u5f00\u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u51fa\u961f\u4fe1\u606f\u3002\u56e0\u4e3a\u6211\u4eec\u5728\u5220\u9664\u6570\u65f6\u5e76\u4e0d\u5220\u9664\uff0c\u53ea\u662f\u505a\u4e0a\u8bb0\u53f7\uff0c\u800c\u540e\u9762\u8fd8\u4f1a\u6709\u65b0\u7684\u6570push\u8fdb\u6765\uff0c\u6240\u4ee5\u6bcf\u4e00\u884c\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u957f\u5ea6\u90fd\u8bbe\u4e3an+q\uff08\u5217\u5c31\u662fm+q\uff09\uff0c\u5bf9\u4e8e\u524dn\uff08m\uff09\u4e2a\u6570\u53ef\u4ee5\u901a\u8fc7\u884c\u5217\u76f4\u63a5\u8ba1\u7b97,\u65e0\u9700\u5b58\u50a8\uff0c\u540eq\u4e2a\u4e2d\u7684\u5bf9\u6bcf\u4e00\u884c\uff08\u548c\u6700\u540e\u4e00\u5217\uff09\u5f00\u4e00\u4e2avector\u8bb0\u5f55\u3002\u6bcf\u6b21\u7b2cx\u884c\u7b2cy\u4e2a\u4eba\u51fa\u5217\u65f6\uff08\u5148\u5047\u8bbey!=m\uff09\uff0c\u6211\u4eec\u9700\u8981\u5728\u7b2cx\u884c\u7684\u7ebf\u6bb5\u6811\u4e2d\u627e\u5230\u7b2cy\u4e2a\u6ca1\u6709\u51fa\u961f\u7684\u6570\u5e76\u8ba9\u5b83\u51fa\u961f\u3002\n\n\u5982\u4f55\u5bfb\u627e\uff08\u597d\u50cf\u662f\u5229\u7528\u4e86\u7ebf\u6bb5\u6811\u4e8c\u5206\u7684\u6027\u8d28\uff1f\uff09\n\n\u6bcf\u6b21\u5230\u8fbe\u4e00\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9p\u65f6\uff0c\u5148\u67e5\u8be2\u5b83\u7684\u5de6\u513f\u5b50\u4e2d\u8fd8\u672a\u51fa\u961f\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5373 \u5de6\u513f\u5b50\u5bf9\u5e94\u7684\u533a\u95f4\u5927\u5c0f\uff08mid-l+1\uff09-\u5de6\u513f\u5b50\u4e2d\u51fa\u961f\u7684\u4e2a\u6570\uff0c\u8bbe\u8fd9\u4e2a\u6570\u4e3alsize\u3002\u82e5\u8981\u67e5\u8be2\u7684\u662f\u533a\u95f4\u4e2d\u7b2ck\u4e2a\u6570\uff0c\u548clsize\u6bd4\u8f83\uff0c\u82e5lsize>=k\uff0c\u5219\u8fdb\u5165\u5de6\u5b50\u6811\u7ee7\u7eed\u641c\u7d22\u7b2ck\u4e2a\u672a\u51fa\u961f\u7684\u6570\uff0c\u5426\u5219\u5c31\u5728\u53f3\u5b50\u6811\u91cc\u5bfb\u627e\u7b2ck-lsize\u4e2a\u672a\u51fa\u961f\u7684\u6570\u3002\u76f4\u5230\u533a\u95f4\u5927\u5c0f\u4e3a1\uff08l==r\uff09\uff0c\u8fd9\u65f6\u5019r\u5c31\u662f\u8981\u627e\u7684\u7b2ck\u4e2a\u672a\u51fa\u961f\u7684\u6570\u3002\u7ef4\u62a4\u8282\u70b9p\u4e2d\u7684\u51fa\u961f\u4e2a\u6570\u7684\u8bdd\uff0c\u53ea\u8981\u5728\u6709\u6570\u51fa\u961f\u65f6\uff0c\u628a\u5bfb\u627e\u5b83\u6240\u7ecf\u8fc7\u7684\u8282\u70b9p\u7684\u51fa\u961f\u4e2a\u6570++\u5c31\u884c\u4e86\u3002\n\n\u8fd9\u4e00\u6bb5\u7684\u4ee3\u7801\u5c31\u662f\u8fd9\u6837\uff08\u4e0d\u4f1a\u52a8\u6001\u5f00\u70b9\u7684\u4e5f\u53ef\u4ee5\u5eb7\u4e86\u5b66\u4e00\u4e0b\u54df\uff09\n\n\n    LL update(int &p,int l,int r,LL k){\n    \t//l,r\u5373\u4e3a\u8282\u70b9p\u5bf9\u5e94\u7684\u533a\u95f4\uff0ck\u4ee3\u8868\u67e5\u8be2\u8be5\u533a\u95f4\u5185\u7b2ck\u4e2a\u672a\u51fa\u961f\u7684\u6570\n        if(!p) p=++cnt;\n        nd[p].use++;//use\u8bb0\u5f55\u8282\u70b9p\u4e2d\u51fa\u961f\u4e2a\u6570\n        if(l==r)return l;\n        int mid=l+r>>1,lsz=mid-l+1;\n        if(nd[p].ls) lsz-=nd[nd[p].ls].use;\n        if(lsz>=k) return update(nd[p].ls,l,mid,k);\n        else {k-=lsz;return update(nd[p].rs,mid+1,r,k);}\n    }\n\n\u627e\u5230\u4e86\u7b2ck\u4e2a\u672a\u51fa\u961f\u7684\u6570\u5728\u7ebf\u6bb5\u6811\u4e2d\uff081~n+q\uff09\u7684\u4f4d\u7f6e\uff08\u8bb0\u4e3ath\uff09\u540e\uff0c\u7f16\u53f7\u4e5f\u5c31\u4e0d\u96be\u77e5\u9053\u4e86\uff0c\u82e5th<=m-1\uff0c\u53ef\u4ee5\u76f4\u63a5\u7b97\u51fa\u7f16\u53f7\uff08\u5c31\u662f _(x\u22121)\u00d7m+th_ \uff09\uff0c\u82e5th>=m\uff0c\u5219\u8be5\u6570\u662f\u540e\u6765push\u5230\u540e\u9762\u7684\uff0c\u5728vector\u4e2d\u67e5\u8be2\u4e0b\u6807\u4e3ath-m-1\u7684\u6570\u5373\u53ef\u3002\n\n\u77e5\u9053\u4e86\u7f16\u597d\u540e\uff0c\u585e\u5230\u6700\u540e\u4e00\u5217\u7684vector\u6700\u540e\u3002\u540c\u65f6\u6700\u540e\u4e00\u5217\u7684\u7b2cx\u4e2a\u672a\u51fa\u961f\u7684\u6570\u4e5f\u5e94\u5220\u6389\u5e76\u585e\u5230\u7b2cx\u884c\u7684vector\u6700\u540e\uff0c\u4e0e\u4e0a\u9762\u7c7b\u4f3c\u505a\u6cd5\u5c31\u884c\u3002\n\n\u82e5\u51fa\u961f\u7684\u662f\u7b2cx\u884c\u7b2cm\u4e2a\u4eba\uff08y==m\uff09\uff0c\u53ea\u9700\u8981\u5c06\u6700\u540e\u4e00\u5217\u7b2cx\u4e2a\u672a\u51fa\u961f\u7684\u6570\u51fa\u961f\u585e\u5230\u6700\u540e\u4e00\u5217\u7684vector\u540e\u9762\u5373\u53ef\u3002\uff08\u8fd9\u4e0d\u5c31\u505a\u5b8c\u4e86\u5417\uff0c\u662f\u4e0d\u662f\u5b8c\u5168\u61c2\u4e86\uff09\n\n\u590d\u6742\u5ea6 _O_ \uff08qlogn\uff09\n\n\u6700\u540eAC\u4ee3\u7801\n\n    #include<bits/stdc++.h>\n    #define LL long long\n    LL n,m,q;\n    int maxn;\n    inline LL read(){\n        int x=0,f=1;char c=getchar();\n        while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n        while(c>='0'&&c<='9')x=(x<<1)+(x<<3)+(c^48),c=getchar();\n        return x*f;\n    }\n    inline void print(LL x){if(x/10) print(x/10);putchar(x%10^48);}\n    LL cnt;\n    int rt[300010];\n    std::vector <LL> vec[300010];\n    struct node{\n        int ls,rs,use;//ls,rs\u5206\u522b\u4e3a\u5de6\u513f\u5b50\u53f3\u513f\u5b50\u7f16\u53f7\uff0cuse\u4e3a\u8282\u70b9p\u4e2d\u51fa\u961f\u7684\u4e2a\u6570\n    } nd[20000010];\n    LL update(int &p,int l,int r,LL k){//\u8fd9\u91ccupdate\u548cquery\u5176\u5b9e\u5199\u4e00\u8d77\u4e86\n        if(!p) p=++cnt;//\u52a8\u6001\u5f00\u70b9\n        nd[p].use++;\n        if(l==r)return l;\n        int mid=l+r>>1,lsz=mid-l+1;\n        if(nd[p].ls) lsz-=nd[nd[p].ls].use;//lsz\u5de6\u513f\u5b50\u4e2d\u672a\u51fa\u961f\u7684\u4e2a\u6570\n        if(lsz>=k) return update(nd[p].ls,l,mid,k);\n        else {k-=lsz;return update(nd[p].rs,mid+1,r,k);}\n    }\n    LL max(LL a,LL b){return a>b?a:b;}\n    int main(){\n        n=read();m=read();q=read();maxn=max(n,m)+q;\n        for(int i=1;i<=q;i++){\n            int x=read(),y=read();\n            if(y==m){\n                int th=update(rt[n+1],1,maxn,x);LL id;\n                //id\u4e3a\u6700\u540e\u4e00\u5217\u7b2cx\u4e2a\u672a\u51fa\u961f\u7684\u4eba\u7684\u7f16\u53f7\uff0c\u4e0b\u9762idy\u4e5f\u662f\n                if(th<=n) id=th*m;\n                else id=vec[n+1][th-n-1];\n                vec[n+1].push_back(id);\n                print(id);puts(\"\");\n            }\n            else {\n                int th=update(rt[x],1,maxn,y);LL idx,idy;\n                if(th<m) idx=x*m-m+th;\n                else idx=vec[x][th-m];\n                th=update(rt[n+1],1,maxn,x);\n                if(th<=n) idy=th*m;\n                else idy=vec[n+1][th-n-1];\n                vec[x].push_back(idy);vec[n+1].push_back(idx);\n                print(idx);puts(\"\");\n            }\n        }\n        return 0;\n    }",
        "postTime": 1573541771,
        "uid": 149644,
        "name": "czdqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u9898\u76ee\u7565\uff08\u5404\u5927OJ\u4e0a\u90fd\u6709\uff09\n\n## \u9898\u89e3\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\u4e00\u4e2a\u89c4\u5f8b\uff0c\u5c31\u662f\u6bcf\u6b21\u79fb\u52a8\u90fd\u53ea\u4f1a\u6539\u53d8\u4e00\u884c\u548c\u6700\u540e\u4e00\u5217\uff08**\u6700\u540e\u4e00\u5217\u662f\u5173\u952e**\uff09\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u65b9\u9635\u5212\u5206\u6210\u8fd9\u6837![](https://cdn.luogu.com.cn/upload/pic/40317.png)\n\n\u6bcf\u4e2a\u5212\u5206\u7684\u533a\u95f4\u53ea\u9700\u8981\u5feb\u901f\u652f\u6301\u8fd9\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n1. \u4ece\u4e2d\u67e5\u8be2\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\u5e76\u5220\u9664\n2. \u5411\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u503c\n\n\n\u56e0\u4e3a\u6700\u591a\u53ea\u6709q\u4e2a\u6dfb\u52a0\u64cd\u4f5c\uff0cq\u6709$3 \\times 10^5$\u800c\u4e00\u4e2a\u5e8f\u5217\u539f\u672c\u5c31\u6709$3 \\times 10^5$\u8fd9\u4e48\u957f,\u7528\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u663e\u7136\u592a\u6d6a\u8d39\uff0c\u52a8\u6001\u5f00\u70b9\u7684\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u641e\u5b9a\uff0c\u4e24\u4e2a\u64cd\u4f5c\u4e00\u6b21\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f$log (n+q)$\uff0c\u65b0\u5f00\u7684\u7a7a\u95f4\u4e5f\u662f$log (n+q)$,\u800c\u4e00\u6b21\u67e5\u8be22\u4e2a\u62164\u4e2a\u64cd\u4f5c\u5c31\u53ef\u4ee5\u641e\u5b9a\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O( nlog(n+q) )$,\u7a7a\u95f4\u540c\n\n\u90a3\u4e48\u8fd9\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u600e\u4e48\u5199\u5462\uff1a\n\n\u628a\u533a\u95f4\u603b\u8303\u56f4\u8bbe\u4e3a$1-(max(n,m)+q)$,\u6bcf\u4e2a\u8282\u70b9\u90fd\u8bbe\u4e00\u4e2a\u503ccal\u8868\u793a\u8282\u70b9\u533a\u95f4\u5305\u542b\u7684\u6709\u6548\u8282\u70b9\u4e2a\u6570,\u53f6\u8282\u70b9\u518d\u52a0\u4e00\u4e2aval\u8868\u793a\u503c\uff0c\u5728\u8fd9\u91cc\uff0c\u5220\u9664\u662f\u6307\u628a\u6b64\u4f4d\u7f6e\u6807\u4e3a\u65e0\u6548\u8282\u70b9\uff0c\u5e76\u6ca1\u6709\u4ece\u5e8f\u5217\u4e2d\u62b9\u9664\uff0c\u800c2\u64cd\u4f5c\u5219\u662f\u76f4\u63a5\u628a\u6700\u540e\u4e00\u4e2a\u6709\u6548\u70b9\u540e\u7684\u4f4d\u7f6e\u66f4\u65b0\u6210\u8981\u6dfb\u52a0\u7684\u503c\u3002\n\n\u5220\u9664\u65f6\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u505a\u4e8c\u5206\uff0c\u628a\u53f6\u8282\u70b9cal\u6539\u62100\uff0c\u4e0a\u9762\u7684\u8def\u5f84\u66f4\u65b0\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u8bbe\u4e00\u4e2aXi\u6570\u7ec4\u8868\u793a\u7b2ci\u4e2a\u5e8f\u5217\u7684Xi\u4f4d\u7f6e\u8fd8\u6ca1\u6709\u88ab\u63d2\u5165\u8fc7\uff0c\u6bcf\u6b21\u63d2\u5165\u65f6\u5c31\u53ef\u4ee5\u7cbe\u51c6\u5b9a\u4f4d\uff0c\u67e5\u5b8c\u540eXi++\uff0c\u867d\u7136\u4e0d\u80fd\u4fdd\u8bc1\u548c\u5f53\u524d\u6700\u540e\u4e00\u4e2a\u6709\u6548\u70b9\u7d27\u6328\u7740\uff0c\u4f46\u4e00\u5b9a\u4e0d\u4f1a\u8d85\u51fa\u8303\u56f4\uff0c\u8fd9\u6837\u6548\u679c\u662f\u4e00\u6837\u7684\u3002\n\n\u4e0b\u56fe\u5c55\u793a\u4e86\u6837\u4f8b\u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u7684\u8fc7\u7a0b\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/40340.png)\n\n\u6709\u4e00\u6b65\u6700\u4e3a\u5173\u952e\uff1a\u5982\u679c\u4e00\u5f00\u59cb\u4e00\u4e2a\u4e00\u4e2a\u5730\u66f4\u65b0\u521d\u59cb\u65b9\u9635\u7684\u6bcf\u4e00\u4e2a\u503c\uff0c\u7a7a\u95f4\u65f6\u95f4\u90fd\u8981\u70b8\u98de\u3002\u53ef\u662f\u4e0d\u66f4\u65b0\u7684\u8bdd\uff0c\u524dn\u6216m-1\u4e2a\u4f4d\u7f6e\u7684\u503c\u90fd\u4e0d\u540c\uff0c\u540eq\u4e2a\u4f4d\u7f6e\u53c8\u90fd\u662f\u65e0\u6548\u4f4d\u7f6e\uff0c\u6ca1\u6cd5\u64cd\u4f5c\u3002\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u60f3\uff0c\u4e00\u4e2a\u8282\u70b9\u6ca1\u6709\u88ab\u5efa\u7acb\uff0c\u8bf4\u660e\u8fd9\u4e2a\u533a\u95f4\u8303\u56f4\u5185\u6ca1\u6709\u88ab\u66f4\u65b0\u8fc7\uff0c\u800c\u6211\u4eec\u77e5\u9053\u8282\u70b9\u6240\u5728\u5e8f\u5217\uff0c\u5177\u4f53\u533a\u95f4\u8303\u56f4\uff0c\u53c8\u77e5\u9053\u521d\u59cb\u72b6\u6001\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u51fa\u6709\u5173\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u6570\u636e\uff0c\u800c\u5982\u679c\u8282\u70b9\u5df2\u88ab\u5efa\u7acb\uff0c\u76f4\u63a5\u4f7f\u7528\u8282\u70b9\u6570\u636e\u5373\u53ef\u3002\n\n\u8fd8\u6709\u5c31\u662f\u6b64\u9898\u5361\u5e38\u4e25\u91cd\uff0c\u975e\u6811\u72b6\u6570\u7ec4\u7684\u7ae5\u978b\u4eec\u6700\u597d\u8fd8\u662f\u5c0f\u5fc3\u4e00\u70b9~~\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <algorithm>\nusing namespace std;\nconst int N=3e5+5;\nstruct Node{\n    Node* l;\n    Node* r;\n    int cal;\n    long long val;\n    Node(){\n        cal=val=0;\n        l=r=NULL;\n    }\n};\nint n,m,q,Len,Xi[N];\nNode* Root[N];\n\nNode* NewNode(){\n    return new Node();\n}\n\ninline int Cal(Node* o,int l,int r,int Limit)\n{\n    if(o!=NULL)\n        return o->cal;\n    r=min(Limit,r);\n    return (l>r?0:r-l+1);\n}\n\nvoid update(Node* o,int l,int r,int k,long long val0,int Limit)\n{\n    o->cal++;\n    if(l==r){\n        o->val=val0;\n        return;\n    }\n    int mid=(l+r)>>1,l_cal=Cal(o->l,l,mid,Limit);\n    if(k<=mid)\n    {\n        if(o->l==NULL){\n            o->l=NewNode();\n            o->l->cal=l_cal;\n        }\n        update(o->l,l,mid,k,val0,Limit);\n    }\n    else\n    {\n        if(o->r==NULL){\n            o->r=NewNode();\n            o->r->cal=o->cal-1-l_cal;\n        }\n        update(o->r,mid+1,r,k,val0,Limit);\n    }\n}\n\nlong long query(Node* o,int l,int r,int k,int Limit,int id)\n{\n    o->cal--;\n    if(l==r){\n        if(!o->val)\n        {\n            long long id0=id,m0=m,l0=l;\n            o->val=(id0?((id0-1ll)*m0+l0):(l0*m0));\n        }\n        return o->val;\n    }\n    int mid=(l+r)>>1,l_cal=Cal(o->l,l,mid,Limit);\t\n    if(k<=l_cal)\n    {\n        if(o->l==NULL){\n            o->l=NewNode();\n            o->l->cal=l_cal;\n        }\n        return query(o->l,l,mid,k,Limit,id);\n    }\n    else\n    {\n        if(o->r==NULL){\n            o->r=NewNode();\n            o->r->cal=o->cal+1-l_cal;\n        }\n        return query(o->r,mid+1,r,k-l_cal,Limit,id);\n    }\n}\n\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&q);\n    for(int i=0;i<=n;i++)\n    {\n        Root[i]=NewNode();\n        Root[i]->cal=m-1;\n        Xi[i]=m;\n    }\n    Root[0]->cal=n;\n    Xi[0]=n+1;\n    Len=max(n,m)+q;\t\n    while(q--)\n    {\n        int x,y;\n        long long ans;\n        scanf(\"%d%d\",&x,&y);\n        ans=query(Root[0],1,Len,x,n,0);\n        if(y!=m)\n        {\n            long long ans1=query(Root[x],1,Len,y,m-1,x);\n            update(Root[x],1,Len,Xi[x],ans,m-1);\n            Xi[x]++;\n            ans=ans1;\n        }\n        printf(\"%lld\\n\",ans);\n        update(Root[0],1,Len,Xi[0],ans,n);\n        Xi[0]++;\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1540713822,
        "uid": 41271,
        "name": "\u59a9\u5a9a\u7684ak\u841d\u8389",
        "ccfLevel": 9,
        "title": "NOIP2017_D2T3 \u5217\u961f"
    },
    {
        "content": "# $\\mathrm{NOIP2017}$ \u5217\u961f\n\n[$$\\huge\\color{blue}\\boxed{\\color{Violet}\\mathfrak{There\\ is \\ my \\ blog}}$$](https://www.luogu.com.cn/blog/wyy2020/)\n\n###  **\u9898\u76ee\u610f\u601d**\n\n* [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3960)\n\n### $\\mathrm{Sol}$\n\n* \u524d\u7f6e\u77e5\u8bc6\uff1a**\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811**\n\n* \u9996\u5148\u6211\u4eec\u8003\u8651\u6bcf\u4e00\u6b21\u53d6$(x,y)$\u4f1a\u53d1\u751f\u54ea\u4e9b\u53d8\u5316\uff1a\u5c31\u662f\u6700\u540e\u4e00\u5217\uff0c\u4e00\u884c\u4ee5\u53ca$x$\u884c\u7b2c$m$\u5217\u5411\u524d\u79fb\u52a8\u4e86\u4e00\u683c\u3002\n\n* \u4e8e\u662f\u6211\u4eec\u7528$n+1$\u68f5\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u6bcf\u4e00\u6b21\u6539\u53d8\u3002\u7b2c$1-n$\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e00\u884c$[1,m)$\u7684\u4fe1\u606f\u3002\u6700\u540e\u4e00\u9897\u7ef4\u62a4\u6700\u540e\u4e00\u5217\u7684\u4fe1\u606f\u3002\n\n* \u6211\u4eec\u4ee5\u53ca\u641e$n+1$\u4e2a$vector$\u6765\u8bb0\u5f55\u6bcf\u4e00\u68f5\u7ebf\u6bb5\u6811\u7684\u4fe1\u606f\n\n* \u5bf9\u4e8e\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u8fd9\u6837\u5b50\u60f3\uff08\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff09\n\n\t* $y=m$ \n    \n    \t\u8fd9\u4e2a\u65f6\u5019\u53d6\u5f97\u662f\u6700\u540e\u4e00\u5217\u3002\u6211\u4eec\u53ea\u8981\u770b\u8fd9\u4e2a\u5143\u7d20\u662f\u4e0d\u662f\u539f\u6765\u5c31\u5728\u6700\u540e\u4e00\u5217\u8fd8\u662f\u4ece\u90a3\u4e00\u6b21\u53d8\u6362\u5f97\u5230\u7684\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u6211\u4eec\u53ea\u8981\u641e\u4e2a$vector$\u8bb0\u5f55\u6bcf\u4e00\u6b21\u52a0\u8fdb\u53bb\u7684\u5143\u7d20\u3002\u5047\u8bbe\u6211\u4eec\u627e\u5230\u7684\u8fd9\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u4e3a$P$\u5982\u679c\u5927\u4e8e$n$\u6211\u4eec\u5c31\u53bb$vector$\u91cc\u627e$\\mathrm{G[n+1][pos-n-1]}$\u7684\u5143\u7d20(\u4e0b\u6807\u4e3a$0$ )\n        \n    * $y\u2208[1,m)$\n    \t\n        \u8fd9\u662f\u6211\u4eec\u53ea\u8981\u628a$(x,y)$\u5143\u7d20\u52a0\u5230$n+1$\u68f5\u7ebf\u6bb5\u6811\uff0c\u4ee5\u53ca\u628a$x$\u884c\u6700\u540e\u4e00\u5217\u5373$(x,m)$\u4ece$n+1$\u68f5\u7ebf\u6bb5\u6811\u79fb\u5230\u7b2c$x$\u5c31\u53ef\u4ee5\u4e86\u3002\u5176\u4f59\u64cd\u4f5c\u4e0e\u4e0a\u9762\u90a3\u79cd\u60c5\u51b5\u7c7b\u4f3c\u3002\n        \n* \u8fd9\u6837\u5b50\u7a7a\u95f4\u4f1a\u51fa\u5927\u95ee\u9898\u3002\u6240\u4ee5\u4e00\u4e2a\u5f88\u5957\u8def\u7684\u60f3\u6cd5\u5c31\u662f\u5f00\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u6765\u8282\u7ea6\u5185\u5b58\u3002\u662f\u7684\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6\u5927\u6982$\\mathrm{O(n\\log n)}$\n\n### $\\mathrm{Code}$\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define pb push_back\nusing namespace std;\n\ninline int read()\n{\n\tint sum=0,ff=1; char ch=getchar();\n\twhile(!isdigit(ch))\n\t{\n\t\tif(ch=='-') ff=-1;\n\t\tch=getchar();\n\t}\n\twhile(isdigit(ch))\n\t\tsum=sum*10+(ch^48),ch=getchar();\n\treturn sum*ff;\n}\n\nconst int N=1e7+5;\n\nint n,m,Q,inf,tot,T[N];\nvector<int> G[N];\n\nstruct Seg\n{\n\tint siz[N],ls[N],rs[N];\n\tinline int ask(int l,int r,int rt,int x)\n\t{\n\t\tif(l==r) return l;\n\t\tint mid=(l+r)/2;\n\t\tint now=mid-l+1-siz[ls[rt]];\n\t\tif(x<=now) return ask(l,mid,ls[rt],x);\n\t\telse return ask(mid+1,r,rs[rt],x-now);\n\t}\n\tinline void del(int l,int r,int &rt,int x)\n\t{\n\t\tif(!rt) rt=++tot;\n\t\tsiz[rt]++;\n\t\tif(l==r) return;\n\t\tint mid=(l+r)/2;\n\t\tif(x<=mid) del(l,mid,ls[rt],x);\n\t\telse del(mid+1,r,rs[rt],x);\n\t}\t\n\tinline int del_lie(int x)\n\t{\n\t\tint pos=ask(1,inf,T[n+1],x);\n\t\tdel(1,inf,T[n+1],pos);\n\t\treturn (pos<=n)?(pos-1)*m+m:G[n+1][pos-n-1];\n\t}\n\tinline int del_hang(int x,int y)\n\t{\n\t\tint pos=ask(1,inf,T[x],y);\n\t\tdel(1,inf,T[x],pos);\n\t\treturn (pos<m)?(x-1)*m+pos:G[x][pos-m];\n\t}\n};\nSeg S;\n\nsigned main()\n{\n\tn=read();\n\tm=read();\n\tQ=read();\n\tinf=max(n,m)+Q;\n\tfor (;Q--;)\n\t{\n\t\tint x,y;\n\t\tx=read();\n\t\ty=read();\n\t\tif(y==m)\n\t\t{\n\t\t\tint P=S.del_lie(x);\n\t\t\tprintf(\"%lld\\n\",P);\n\t\t\tG[n+1].pb(P);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tint P=S.del_hang(x,y);\n\t\t\tprintf(\"%lld\\n\",P);\n\t\t\tG[n+1].pb(P);\n\t\t\tP=S.del_lie(x);\n\t\t\tG[x].pb(P);\n\t\t}\n\t}\n\treturn 0;\n}\n\t\n```\n",
        "postTime": 1588037390,
        "uid": 308464,
        "name": "\u5947\u7c73",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "### **\u4e00\u7bc7\u5bf9\u840c\u65b0\u53cb\u597d\u7684\u9898\u89e3\u9020\u798f\u793e\u4f1a**\n\n#### \u89e3\u9898\u601d\u8def\u5176\u5b9e\u5f88~~\u7b80\u5355~~\uff0c\u5c31\u662f\u7528n+1\u68f5\u7ebf\u6bb5\u6811\u548cvector\u6765\u7ef4\u62a4\uff0c\u5177\u4f53\u7684\u89e3\u91ca\u5728\u4ee3\u7801\u4e2d\u3002\n\n```cpp\n//\u8003\u8651\u7528n+1\u4e2a\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\uff0c\u6bcf\u884c\u524dm-1\u4e2a\u4eba\u4e00\u4e2a\uff0c\u6700\u540e\u4e00\u5217\u4e00\u4e2a \n//\u7ef4\u62a4\u65f6\u5e76\u4e0d\u8fdb\u884c\u79fb\u52a8\uff0c\u53ea\u662f\u5c06\u67d0\u4e00\u4e2a\u91cd\u65b0\u63d2\u5165\u5230\u961f\u5c3e \n//\u7528vector\u7ef4\u62a4\u7684\u5176\u5b9e\u662f\u865a\u62df\u7684 \n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#define N 300005\n#define M 12000005\n#define int long long\nusing namespace std;\nint n,m,q,x,y,lim,tot,pos;\nvector<int> v[N];\nint rt[N],ls[M],rs[M],sm[M];\n//rt \u6839\u8282\u70b9    ls \u5de6\u513f\u5b50\n//rs \u53f3\u513f\u5b50    sm \u8be5\u6bb5\u533a\u95f4\u79fb\u8d70\u4e86\u591a\u5c11\u4eba \ninline void re(int &n){\n\tchar ch=getchar();n=0;\n\twhile(ch>'9'||ch<'0') ch=getchar();\n\twhile(ch>='0'&&ch<='9') n=n*10+ch-'0',ch=getchar();\n}\ninline int query(int x,int l,int r,int p){  //\u4e8c\u5206\u67e5\u8be2\u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u5b9e\u9645\u4f4d\u7f6e \n\tif(l==r) return l;\n\tint mid=(l+r)/2,tmp=mid-l+1-sm[ls[x]];\n\tif(p<=tmp) return query(ls[x],l,mid,p);//\u5982\u679c\u5b83\u672a\u66fe\u88ab\u79fb\u8d70\uff0c\u5411\u5de6 \n\telse return query(rs[x],mid+1,r,p-tmp);//\u79fb\u8d70\u4e86\uff0c\u90a3\u5c31\u5411\u53f3 \n}\ninline void update(int &x,int l,int r,int p){  //\u66f4\u65b0\u72b6\u6001\uff0c\u5c06p\u6240\u5728\u7684\u6240\u6709\u533a\u95f4sm\u589e\u52a01 \n\tif(!x) x=++tot;sm[x]++;\n\tif(l==r) return;\n\tint mid=(l+r)/2;\n\tif(p<=mid) update(ls[x],l,mid,p);//\u4e8c\u5206\u66f4\u65b0 \n\telse update(rs[x],mid+1,r,p);\n}\ninline int work1(int x,int y){  //\u5411\u524d\u770b\u9f50\u7684\u8fc7\u7a0b \n\tpos=query(rt[n+1],1,lim,x);//\u627e\u5230\u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u4f4d\u7f6e \n\tupdate(rt[n+1],1,lim,pos);\n\tint ans=pos<=n?pos*m:v[n+1][pos-n-1];//\u8ba1\u7b97\u7f16\u53f7 \n\tv[n+1].push_back(y?y:ans);//\u6b64\u5904\u4e3a\u96be\u70b9\uff0c\u5373\u5982\u679c\u6211\u5728work2\u4e2d\u5df2\u7ecf\u627e\u5230\u7f16\u53f7\uff0c\u5c31\u76f4\u63a5\u52a0\u5165\uff0c\u5426\u5219\u5c31\u8bf4\u660e\u51fa\u961f\u7684\u672c\u6765\u5c31\u5728\u6700\u540e\u4e00\u5217\uff0c\u52a0\u5165\u8ba1\u7b97\u51fa\u7684\u7f16\u53f7 \n\treturn ans;//\u5982\u679c\u51fa\u961f\u7684\u5728\u6700\u540e\u4e00\u5217\uff0c\u6b64\u65f6ans\u5c31\u662f\u7f16\u53f7\uff0c\u5426\u5219\u5c31\u662f\u5728\u5411\u5de6\u770b\u9f50\u4e2d\u88ab\u6324\u5165\u524d\u9762\u7ebf\u6bb5\u6811\u90a3\u4eba\u7684\u7f16\u53f7 \n}\ninline int work2(int x,int y){  //\u5411\u5de6\u770b\u9f50\u7684\u8fc7\u7a0b \n\tpos=query(rt[x],1,lim,y);  //\u627e\u5230\u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u4f4d\u7f6e \n\tupdate(rt[x],1,lim,pos);\n\tint ans=pos<m?(x-1)*m+pos:v[x][pos-m];//\u8ba1\u7b97\u7f16\u53f7 \n\tv[x].push_back(work1(x,ans));  //\u56e0\u4e3a\u4f1a\u5c06\u539f\u672c\u5728\u8fd9\u4e00\u884c\u7b2cm\u4e2a\u7684\u6324\u5165\u524dm-1\u4e2a \n\treturn ans;//\u8fd4\u56de\u7f16\u53f7 \n}\n//\u6ce8\u610fwork1\u548cwork2\u4e2d\u7684y\u610f\u4e49\u4e0d\u540c\uff0cwork2\u4e2d\u7684\u662f\u5f53\u524d\u5750\u6807\uff0cwork1\u4e2d\u8868\u793a\u662f\u5426\u5df2\u627e\u5230\u7f16\u53f7 \nsigned main()\n{\n\tfreopen(\"phalanx.in\",\"r\",stdin);\n\tfreopen(\"phalanx.out\",\"w\",stdout);\n\tre(n);re(m);re(q);\n\tlim=max(n,m)+q;\n\twhile(q--){\n\t\tre(x);re(y);\n\t\tprintf(\"%lld\\n\",y==m?work1(x,0):work2(x,y));//\u5982\u679c\u662f\u6700\u540e\u4e00\u6392\uff0c\u4e0d\u7ed9y\u503c\uff0c\u7136\u540e\u76f4\u63a5work1 \n\t}\n\treturn 0;\n}\n```\n**\u5173\u4e8e\u5176\u4e2d\u63d0\u5230\u7684\u201c\u6324\u8fc7\u53bb\u201d\u95ee\u9898**\n\n\u6bd4\u5982\u8bf4\u6837\u4f8b\u4e2d\uff0c\u7b2c\u4e00\u6b21\u64cd\u4f5c\u65f6\uff0c2\u672c\u6765\u5728\u961f\u5c3e\uff0c\u53ef\u56e0\u4e3a\u5411\u5de6\u770b\u9f50\uff0c2\u88ab\u6324\u8fdb\u4e86\u524dm-1\u4e2a\uff0c\u4e8e\u662f2\u5c31\u5e94\u8be5\u88ab\u52a0\u5230\u7b2c\u4e00\u6a2a\u884c\u7ebf\u6bb5\u6811\u7684\u672b\u5c3e\u3002\n\n~~\u7ba1\u7406\u5458\u7ed9\u8fc7\u5427...\u5feb\u88ab\u8fd9\u9898\u6298\u78e8\u6b7b\u4e86~~\n",
        "postTime": 1573043604,
        "uid": 211948,
        "name": "Hopearceus",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "## [\u539f\u6587\u5730\u5740](https://www.cnblogs.com/bcoier/p/10788767.html)\n\n\u8003\u8651\u8f6c\u5316\u9898\u610f\uff1a\n\n\u8bbe\u8fd9\u6b21\u64cd\u4f5c\u5220\u6389\u70b9$(x, y)$\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u5411\u5de6\u770b\u9f50\uff1a\u5728\u7b2cx\u884c\u5220\u9664$(x, y)$\uff0c\u5e76\u5c06y\u4ee5\u540e\u7684\u70b9\u5168\u90e8\u524d\u79fb\u4e00\u4f4d\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u5411\u524d\u770b\u9f50\uff1ax\u4ee5\u540e\u7684\u70b9\u5168\u90e8\u4e0a\u79fb\u4e00\u4f4d\uff0c\u5e76\u5728\u6700\u540e\u4e00\u5217\u63d2\u5165$(x, y)$\n\n\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u53ef\u4ee5\u7528$Splay$\u89e3\u51b3\uff1a\n\n\u6211\u4eec\u5f00$N+1$\u68f5$Splay$\uff0c1\u5230N\u68f5\u8868\u793a\u7684\u662f\u7b2ci\u884c\uff0c[1,m-1]\u7684\u4f4d\u7f6e\uff0c\u7b2c$N+1$\u68f5\u8868\u793a\u6700\u540e\u4e00\u5217\u7684\u4f4d\u7f6e\n\n\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u7684\u70b9\u90fd\u6254\u8fdb**\u4e00\u68f5**$Splay$\u91cc\u9762\n\n\u9898\u610f\u6709\u4e00\u6b21\u8f6c\u5316\u6210\uff1a\n\n\u8bbe\u8fd9\u6b21\u64cd\u4f5c\u5220\u6389\u70b9$(x, y)$\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u5411\u5de6\u770b\u9f50\uff1a\u5728\u7b2cx\u68f5$Splay$\u5220\u9664\u6392\u540d\u4e3a$y$\u7684\u8282\u70b9\uff0c\u518d\u5c06N+1\u68f5$Splay$\u5185\u7684\u6392\u540d\u4e3a$x$\u7684\u8282\u70b9\u5220\u9664\u5e76\u63d2\u5165\u5230\u7b2cx\u68f5$Splay$\u4e2d\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u5411\u524d\u770b\u9f50\uff1a\u5728\u7b2c$N+1$\u68f5$Splay$\u4e2d\u63d2\u5165$(x, y)$\n\n\u4f46\u662f\u8fd9\u6837\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5f00\u9500\u5f88\u5927\uff08$NM$\uff09\uff0c\u663e\u7136\u4e0d\u80fd\u8fc7\u8fd9\u9053\u9898\n\n\u53d1\u73b0\u8be2\u95ee\u6b21\u6570\u4e0d\u591a\uff0c\u800c\u6bcf\u4e00\u6b21\u8be2\u95ee\u9700\u8981\u52a8\u7684\u70b9\u4e5f\u5f88\u5c11\uff0c\u6240\u4ee5\u6bcf\u4e00\u68f5$Splay$\u91cc\u9762\u5b58\u7684\u8282\u70b9\u53d8\u6210\u4e86\u4e00\u4e2a\u533a\u95f4\n\n\u6bcf\u4e00\u6b21\u5220\u9664\u628a\u533a\u95f4\u5206\u62103\u4efd\uff1al ~ pos - 1, pos ~ pos, pos + 1 ~ r\n\n\u5220\u6389\u4e2d\u95f4\u4e00\u4efd\u5373\u53ef\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define re register\n#define debug printf(\"Now is Line : %d\\n\",__LINE__)\n#define file(a) freopen(#a\".in\",\"r\",stdin);freopen(#a\".out\",\"w\",stdout)\n#define LL long long\nil int read() {\n    re int x = 0, f = 1; re char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n#define rep(i, s, t) for(re int i = s; i <= t; ++ i)\n#define maxn 10000005\nnamespace splay {\n    int fa[maxn], ch[2][maxn], rt[maxn], tot;\n    #define pushup(x) size[x] = size[ch[0][x]] + size[ch[1][x]] + val[x].size\n    #define get_fa(x) (ch[1][fa[x]] == x)\n    LL size[maxn];\n    struct node {\n        LL l, r, size;\n    }val[maxn];\n    il void rotate(int x) {\n        int y = fa[x], z = fa[y], w = get_fa(x), k = get_fa(y);\n        ch[k][z] = x, fa[x] = z, ch[w][y] = ch[w ^ 1][x];\n        fa[ch[w ^ 1][x]] = y, ch[w ^ 1][x] = y, fa[y] = x;\n        pushup(y), pushup(x);\n    }\n    il void Splay(int k, int x, int want) {\n        while(fa[x] != want) {\n            int y = fa[x];\n            if(fa[y] != want) rotate(get_fa(x) == get_fa(y) ? y : x);\n            rotate(x);\n        }\n        if(!want) rt[k] = x;\n    }\n    il void insert(int k, LL x) {\n        int u = rt[k], f = 0;\n        while(u) f = u, u = ch[1][u];\n        u = ++ tot;\n        size[u] = 1, fa[u] = f, val[u] = (node){x, x, 1}, ch[1][f] = u, Splay(k, u, 0);\n    }\n    il LL spilt(int p, int k, LL x) {\n        LL s = val[k].l, t = val[k].r;\n        if(s != x && t != x) {\n            if(s + 1 < t) {\n                int u = ++ tot;\n                val[u].l = x + 1, val[u].r = val[k].r, val[u].size = (val[u].r - val[u].l + 1);\n                val[k].r = x - 1, val[k].size = (val[k].r - val[k].l + 1);\n                ch[1][u] = ch[1][k], ch[1][k] = u, fa[u] = k, Splay(p, u, 0);\n            }\n            else ++ val[k].l, -- val[k].size, Splay(p, k, 0);\n        }\n        else {\n            if(s == x) ++ val[k].l;\n            else -- val[k].r;\n            -- val[k].size, Splay(p, k, 0);\n        }\n        return x;\n    }\n    il LL K_th(int k, int x) {\n        int u = rt[k];\n        while(1) {\n            if(size[ch[0][u]] >= x) u = ch[0][u];\n            else if(size[ch[0][u]] + val[u].size < x) x -= size[ch[0][u]] + val[u].size, u = ch[1][u];\n            else return spilt(k, u, x - size[ch[0][u]] + val[u].l - 1);\n        }\n    }\n}\nusing namespace splay;\nint n, m, q;\nsigned main() {\n    n = read(), m = read(), q = read();\n    rep(i, 1, n) {\n        rt[i] = ++ tot, val[tot].size = m - 1;\n        val[tot].l = 1ll * (i - 1ll) * m + 1ll, val[tot].r = 1ll * i * m - 1ll;\n    }\n    rep(i, 1, n) insert(0, 1ll * i * m);\n    while(q --) {\n        int x = read(), y = read();\n        if(y == m) {\n            LL u = K_th(0, x);\n            printf(\"%lld\\n\", u), insert(0, u);\n        }\n        else {\n            LL u = K_th(x, y);\n            printf(\"%lld\\n\", u), insert(x, K_th(0, x)), insert(0, u);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1556503683,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u5165\u95e8\u9898\u3002\n\n## \u7b97\u6cd5\u4e00\n\n\u76f4\u63a5\u6309\u9898\u610f\u819c\u62df\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6:$O(nq+mq)$ \u9884\u8ba1\u5f97\u5206:$30$\n\n## \u7b97\u6cd5\u4e8c\n\nn,m\u7279\u522b\u5927\uff0c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5f00\u6570\u7ec4\u819c\u62df\uff0c\u6240\u4ee5\u79bb\u6563\u5316\u4e00\u6ce2\uff0c\u7136\u540e\u819c\u62df\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6:$O(nq+mq)$ \u9884\u8ba1\u5f97\u5206:$50$\n\n## \u7b97\u6cd5\u4e09\n\nx=1\u8fd9\u5c31\u6210\u4e86\u4e00\u4e2a\u6570\u5217\u3002\n\n\u76f4\u63a5\u4e0a\u5e73\u8861\u6811\uff0c\u90fd\u4e0d\u7528\u8fc7\u8111\u5b50\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6:$O(q log m)$ \u9884\u8ba1\u5f97\u5206:$80$\n\n## \u7b97\u6cd5\u56db\n\n\u6211\u4eec\u8003\u8651\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u8fd9\u4e2a\u77e9\u9635\u3002\n\n\u9996\u5148\u6211\u4eec\u5148\u5b9an+1\u68f5\u7ebf\u6bb5\u6811\u524dn\u68f5\u7ef4\u62a4\u6bcf\u884c\u524dm-1\u4e2a\u540c\u5b66\u4e2d\u6ca1\u6709\u79bb\u961f\u8fc7\u7684\u540c\u5b66\uff0c\u8fd8\u6709\u4e00\u68f5\u7ef4\u62a4\u7b2cm\u5217\u4e2d\u6ca1\u6709\u79bb\u961f\u8fc7\u7684\u540c\u5b66\u3002\u518d\u5b9an+1\u68f5\u7ebf\u6bb5\u6811\u524dn\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u884c\u56e0\u4e00\u4e2a\u540c\u5b66\u79bb\u961f\u800c\u4ece\u7b2cm\u5217\u63d2\u2642\u8fdb\u6765\u7684\u540c\u5b66\uff0c\u8fd8\u6709\u4e00\u68f5\u7ef4\u62a4\u5230\u961f\u5c3e\u7684\u540c\u5b66\u3002\n\n\u5177\u4f53\u600e\u4e48\u7ef4\u62a4\uff1f\u6bd4\u5982\u5f53\u524d\u7684\u8be2\u95ee\u662f(x,y),\u5148\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1.\u4e0d\u5728\u7b2cm\u5217\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5148\u770b\u770b\u8fd9\u4e2a\u540c\u5b66\u662f\u4e0d\u662f\u63d2\u2642\u8fdb\u6765\uff0c\u662f\u7684\u8bdd\u5c31\u5728\u90a3\u540en+1\u68f5\u7ebf\u6bb5\u6811\u7684\u7b2cx\u68f5\u91cc\u627e\uff0c\u4e0d\u7136\u5c31\u5728\u524dn+1\u68f5\u7684\u7b2cx\u68f5\u91cc\u627e\u3002\n\n\u7136\u540e\u5728\u5bf9\u5e94\u7ebf\u6bb5\u6811\u7684**\u5bf9\u5e94**\u4f4d\u7f6e\u91cc\u5220\u9664\u79bb\u961f\u7684\u540c\u5b66\uff0c\u5c06\u7b2cm\u5217\u7684\u7b2cx\u884c\u7684\u90a3\u4e2a\u540c\u5b66(\u9700\u8981\u5148\u5224\u65ad\u662f\u5728\u524dn+1\u68f5\u91cc\u7684\u7b2cn+1\u68f5\u8fd8\u662f\u540en+1\u68f5)\u63d2\u2642\u5230\u540en+1\u68f5\u7ebf\u6bb5\u6811\u7684\u7b2cx\u68f5\u7684\u6700\u540e\uff0c\u518d\u628a\u4ed6\u539f\u5148\u6240\u5728\u7684\u90a3\u4e2a\u7ebf\u6bb5\u6811\u91cc\u5bf9\u5e94\u7684\u4f4d\u7f6e\u5220\u6389\u3002\u6700\u540e\u628a\u79bb\u961f\u7684\u540c\u5b66\u63d2\u2642\u5230\u540en+1\u68f5\u7ebf\u6bb5\u6811\u7684\u7b2cn+1\u68f5\u7684\u6700\u540e\u3002\n\n2.\u5728\u7b2cm\u5217\n\n\u5148\u5224\u65ad\u662f\u5728\u524dn+1\u68f5\u91cc\u7684\u7b2cn+1\u68f5\u8fd8\u662f\u540en+1\u68f5\uff0c\u7136\u540e\u4ed6\u6240\u5728\u7684\u90a3\u4e2a\u7ebf\u6bb5\u6811\u91cc\u5bf9\u5e94\u7684\u4f4d\u7f6e\u5220\u6389\uff0c\u6700\u540e\u628a\u79bb\u961f\u7684\u540c\u5b66\u63d2\u2642\u5230\u540en+1\u68f5\u7ebf\u6bb5\u6811\u7684\u7b2cn+1\u68f5\u7684\u6700\u540e\u3002\n\n```\n//by zykykyk\n#include<cstdio>\n#include<ctime>\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<string>\n#include<cstring>\n#define rg register\n#define il inline\n#define vd void\n#define ll long long\n#define N 300010\n#define For(i,x,y) for (rg int i=(x);i<=(y);i++)\n#define Dow(i,x,y) for (rg int i=(x);i>=(y);i--)\n#define cross(i,k) for (rg int i=first[k];i;i=last[i])\nusing namespace std;\nil ll max(ll x,ll y){return x>y?x:y;}\nil ll min(ll x,ll y){return x<y?x:y;}\nil ll read(){\n    ll x=0;int ch=getchar(),f=1;\n    while (!isdigit(ch)&&(ch!='-')&&(ch!=EOF)) ch=getchar();\n    if (ch=='-'){f=-1;ch=getchar();}\n    while (isdigit(ch)){x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n    return x*f;\n}\nint n,m,q,x,y;\n\nint Tot,Rt[N],Sum[N*20],Lson[N*20],Rson[N*20],cnt[N];\nll V[N*20];\nil vd Update(int &u,int l,int r,int ql,ll x,int k){\n\tif (!u) u=++Tot;Sum[u]+=k;\n\tif (l==r){V[u]=x;return;}\n\tint mid=l+r>>1;\n\tif (ql<=mid) Update(Lson[u],l,mid,ql,x,k);\n\t\telse Update(Rson[u],mid+1,r,ql,x,k);\n}\nil ll Query(int u,int l,int r,int k){\n\tif (l==r) return V[u];\n\tint mid=l+r>>1;\n\tif (Sum[Lson[u]]>=k) return Query(Lson[u],l,mid,k);\n\t\telse return Query(Rson[u],mid+1,r,k-Sum[Lson[u]]);\n}\nil int Query_id(int u,int l,int r,int k){\n\t//printf(\"l=%d r=%d Sum[Lson[u]]=%d\\n\",l,r,Sum[Lson[u]]);\n\tif (l==r) return l;\n\tint mid=l+r>>1;\n\tif (Sum[Lson[u]]>=k) return Query_id(Lson[u],l,mid,k);\n\t\telse return Query_id(Rson[u],mid+1,r,k-Sum[Lson[u]]);\n}\n\nint tot,rt[N],v[N*20],lson[N*20],rson[N*20];\nil vd update(int &u,int l,int r,int ql,int k){\n\tif (!u) u=++tot;v[u]+=k;\n\tif (l==r) return;\n\tint mid=l+r>>1;\n\tif (ql<=mid) update(lson[u],l,mid,ql,k);\n\t\telse update(rson[u],mid+1,r,ql,k);\n}\nil ll query(int u,int l,int r,int k){\n\tif (l==r) return l;\n\tint mid=l+r>>1,V=mid-l+1-v[lson[u]];\n\tif (V>=k) return query(lson[u],l,mid,k);\n\t\telse return query(rson[u],mid+1,r,k-V);\n}\n\nil ll work(int x,ll y){\n\tll ans;\n\tif (n-v[rt[n+1]]>=x){\n\t\tll X=query(rt[n+1],1,n,x);\n\t\tans=X*(1ll*m);\n\t\tupdate(rt[n+1],1,n,X,1);//printf(\"X=%lld\\n\",X);\n\t}\n\telse {\n\t\tans=Query(Rt[n+1],1,q,x-n+v[rt[n+1]]);//printf(\"%d 233\\n\",Query_id(Rt[n+1],1,q,x-n+v[rt[n+1]]));\n\t\tUpdate(Rt[n+1],1,q,Query_id(Rt[n+1],1,q,x-n+v[rt[n+1]]),0,-1);\n\t}\n\tcnt[n+1]++;\n\tUpdate(Rt[n+1],1,q,cnt[n+1],y?y:ans,1);\n\treturn ans;\n}\nil ll Work(int x,int y){\n\tll ans;\n\tif (m-1-v[rt[x]]>=y){\n\t\tll X=query(rt[x],1,m-1,y);\n\t\tans=1ll*(x-1)*m+X;\n\t\tupdate(rt[x],1,m-1,X,1);\n\t}\n\telse {\n\t\tans=Query(Rt[x],1,q,y-(m-1-v[rt[x]]));\n\t\tUpdate(Rt[x],1,q,Query_id(Rt[x],1,q,y-(m-1-v[rt[x]])),0,-1);\n\t}\n\tcnt[x]++;\n\tll k=work(x,ans);Update(Rt[x],1,q,cnt[x],k,1);//printf(\"k=%lld\\n\",k);\n\treturn ans;\n}\n\nint main(){\n\tfreopen(\"phalanx.in\",\"r\",stdin);\n\tfreopen(\"phalanx.out\",\"w\",stdout);\n\tn=read(),m=read(),q=read();\n\tFor(i,1,q){\n\t\tx=read(),y=read();\n\t\tif (y==m) printf(\"%lld\\n\",work(x,0));\n\t\t\telse printf(\"%lld\\n\",Work(x,y));\n\t}\n}\n```\n",
        "postTime": 1524148570,
        "uid": 25355,
        "name": "\u590f\u8272\u796d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u4e00\u770b\u5230\u8fd9\u9053\u9898\u5c31\u60f3\u5230\u4e86$Splay$\uff0c\u53ef\u60dc\u611f\u89c9\u6709\u70b9\u5947\u602a\uff0c\u641e\u4e0d\u51fa\u6765\uff0c\u80af\u5b9a\u662f\u56e0\u4e3a\u6211\u592a\u83dc\u4e86\u3002\n\n\u7136\u540e\u542c\u8bf4\u6211\u7684\u540c\u5b66\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811$A$\u4e86$CSP$\u6811\u7684\u91cd\u5fc3\uff0c\u6211\u5c31\u5728\u601d\u8003\u53ef\u4e0d\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u5f00\u70b9$A$\u4e86\u8fd9\u9053\u9898\u3002\n\n~~\u53d1\u73b0\u53ef\u4ee5~~\n\n\u601d\u8003\u5b50\u95ee\u9898\uff08$O(n^2)$\u592a\u6c34\u4e86\uff0c\u5c31\u4e0d\u8bf4\u4e86\uff09\uff1a\n\n\u5e8f\u5217$A$\uff0c\u6bcf\u6b21\u95ee\u4e00\u4e2a\u5750\u6807$x$\uff0c\u6c42$A_x$\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u4e2a\u6570\u653e\u5728\u6700\u540e\u9762\u3002$(|A|\\le1e5,q\\le1e5)$\n\n\u8fd9\u9898\u53ef\u4ee5\u7528$Splay$\u7ffb\u8f6c\u533a\u95f4\u505a\uff0c\u4f46\u662f\u5982\u679c\u6709$n$\u4e2a$A$\u6570\u7ec4\uff0c\u8fd9\u5c82\u4e0d\u662f\u8981$MLE$\uff1f\u6211\u5c31\u601d\u7d22\u6709\u6ca1\u6709\u52a8\u6001\u5f00\u70b9$Splay$\uff0c\u5f88\u53ef\u60dc\uff0c\u6211\u641e\u4e0d\u51fa\u6765\u3002\n\n\u4e8e\u662f\u4fbf\u60f3\u5230\u4e86\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u53ef\u662f\u5982\u4f55\u7ef4\u62a4\u5462\uff1f\uff1f\u3002\n\n## \u597d\u65b9\u6cd5\n1 2 3 4 5 \u5e8f\u5217\u4e2d\u8be2\u95ee4\u6b21\uff0c\u5148\u628a\u5e8f\u5217\u53d8\u6210\u8fd9\u6837\uff1a\n\n1 2 3 4 5 0 0 0 0 -> 0\u4ee3\u8868\u672a\u586b\u7684\u5751\n\n\u540c\u65f6\u6709\u4e00\u4e2a$B$\u6570\u7ec4\uff0c\u7531\u9634\u9633\u7ec4\u6210\uff08\u6587\u8a00\u5e26\u5e08\uff0c\u4ee3\u8868\u8fd9\u4e2a\u6570\u6709\u6ca1\u6709\n\n\u5219\u4e00\u5f00\u59cb$A$\uff0c$B$\u6570\u7ec4\u5982\u4e0b\n\n1 2 3 4 5 0 0 0 0\n\n1 1 1 1 1 1 1 1 1\n\n\u8be2\u95ee$x=2$\uff0c\u6b64\u65f6\u5728$A$\u6570\u7ec4\u6700\u540e\u52a0\u4e00\u4e2a2\uff08\u586b\u4e00\u4e2a\u5751\uff09\uff0c\u4f4d\u7f6e2\u7684$B$\u8bbe\u4e3a0\uff0c\u4ee3\u8868\u88ab\u5e72\u6389\u4e86\n\n1 2 3 4 5 2 0 0 0\n\n1 0 1 1 1 1 1 1 1\n\n\u7136\u540e\u8be2\u95ee\u63891\uff0c4\u8fd9\u4e24\u4e2a\u6570\n\n1 2 3 4 5 2 1 4 0\n\n0 0 1 0 1 1 1 1 1\n\n\u6ce8\u610f\u5230\u6bcf\u6b21\u64cd\u4f5c\u65f6\uff0c\u8be2\u95ee\u4f4d\u7f6e$k$\uff0c\u53ea\u9700\u8981\u627e\u5230\u7b2c$k$\u4e2a1\u4ee3\u8868\u7684\u4f4d\u7f6e\u5373\u53ef\n## \u63a8\u5e7f\n\u63a8\u5e7f\u5230\u6709$n$\u884c\n\n\u5bf9\u6bcf\u4e00\u884c\u5f00\u4e00\u73c2\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u5bf9\u6700\u540e\u4e00\u5217\u5f00\u4e00\u73c2\n\n\u6bcf\u6b21\u8be2\u95ee$x,y$\uff0c\u82e5$x=m$\u7279\u522b\u8ba8\u8bba\uff0c\u7528\u4e0a\u9762\u7684\u7279\u6b8a\u60c5\u51b5\u3002\n\n\u5426\u5219\uff0c\u5c31\u628a$x,y$\u52a0\u5728\u6700\u540e\u4e00\u5217\u7684\u6700\u540e\u4e00\u4e2a\u540e\u9762\uff0c\u5220\u6389$x,m$\uff0c\u52a0\u5728\u7b2c$x$\u884c\u91cc\uff0c\u7531\u4e8e\u4e0d\u80fd\u5b58\u6574\u4e2a\u56fe\uff0c\u5c31\u7528$vector$\u7ef4\u62a4\n____\n\u4ee5\u4e0a\u662f\u65b9\u6cd5\n### $Trick$\n\u52a8\u6001\u5f00\u70b9\u65f6\u76f4\u63a5\u8be2\u95ee+\u4fee\u6539\u5373\u53ef\uff0c\u76ee\u524d$Rank1$\uff08\u9664\u4e86\u4e4b\u524d\u5947\u5947\u602a\u602a\u7684\u8bb0\u5f55\u548c$\\color{purple}luogu$\u4e4b\u5916\n\n### $Code$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define debug(x) cerr<<#x<<' '<<x<<endl\n#ifndef ONLINE_JUDGE\n\t#define fuck getchar\n#else\n\t#define fuck nc\n#endif\nchar nc(){\n  \tstatic char buf[1<<25],*p=buf,*q=buf;\n  \tif(p==q&&(q=(p=buf)+fread(buf,1,1<<25,stdin),p==q))return EOF;\n  \treturn *p++;\n}\ntemplate<class T>void read(T&x){\n\tshort f=1;x=0;\n\tchar ch=fuck();\n\twhile(!isdigit(ch)){\n\t\tif(ch=='-')f=-1;\n\t\tch=fuck();\n\t}while(isdigit(ch)){\n\t\tx=(x<<1)+(x<<3)+(ch^48);\n\t\tch=fuck();\n\t}x*=f;\n}\ntemplate<class T>void write(T x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>=10)write(x/10);\n\tputchar(x%10+48);\n}\n\n#define maxn 300010\nint n,m,q;\nint rt[maxn];\nstruct{\n\tint lc,rc,sum;\n}tree[maxn<<5];\nint tot;\nint ask(int k,int l,int r,int &x){\n\tif(!x)x=++tot,tree[x].sum=r-l+1;\n//\tcout<<k<<' '<<l<<' '<<r<<' '<<x<<endl;\n\ttree[x].sum--;\n\tif(l==r)return l;\n\tint mid=(l+r)>>1;\n\tint res;\n\tif(tree[x].lc)res=tree[tree[x].lc].sum;\n\telse res=mid-l+1;\n\tif(k<=res)return ask(k,l,mid,tree[x].lc);\n\treturn ask(k-res,mid+1,r,tree[x].rc);\n}\nvector<long long>g[maxn];\nlong long num[maxn<<1];\nint x,y;\nint ans;\nsigned main(){\n#ifndef ONLINE_JUDGE\n\tfreopen(\"P3960_5.in\",\"r\",stdin);\n\tfreopen(\"Cindy.txt\",\"w\",stdout);\n#endif\n\tread(n),read(m),read(q);\n\tfor(int i=1;i<=n;i++)num[i]=(long long)i*m;\n\tfor(int i=1;i<=q;i++){\n\t\tread(x),read(y);\n\t\tif(y==m)num[n+i]=num[ask(x,1,n+q,rt[0])];\n\t\telse{\n\t\t\tans=ask(x,1,n+q,rt[0]),\n\t\t\tg[x].push_back(num[ans]);\n\t\t\tans=ask(y,1,m+q,rt[x]);\n\t\t\tif(ans>=m)num[n+i]=g[x][ans-m];//\u56e0\u4e3ay=m\u7684\u60c5\u51b5\u5df2\u7ecf\u6392\u9664\uff0c\u6240\u4ee5\u6b64\u5904ans\u5c31\u662f\u672c\u884c\u4ee5\u5916\u7684\u4e86\uff0c\u6240\u4ee5\u8981ans>=m \n\t\t\telse num[n+i]=ans+m*(x-1ll);\n\t\t}write(num[n+i]),putchar('\\n');\n\t}\n}\n\n```\n###### \u65e0\u803b\u5730\u5f00\u4e86$O2$",
        "postTime": 1600436043,
        "uid": 100325,
        "name": "peterwuyihong",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": ">### [\u6d1b\u8c37\u9898\u76ee\u9875\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3960)\n\n>\u9898\u610f\u89c1\u6d1b\u8c37\u3002\n\n### \u65b9\u6cd5$1$\uff1a\u5e73\u8861\u6811\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u884c\u4e0e\u884c\u4e4b\u95f4\u7684\u64cd\u4f5c\u662f\u72ec\u7acb\u7684\uff0c\u800c\u90fd\u4e0e\u6700\u540e\u4e00\u5217\u6709\u5173\u3002\u5f88\u81ea\u7136\u5730\u60f3\u5230\u7ef4\u62a4\u6bcf\u4e00\u884c\u7684\u524d$m-1$\u4e2a\u5143\u7d20\u548c\u6700\u540e\u4e00\u5217\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u4e00\u6b21$(x,y)$\u79bb\u961f\uff0c\u53ef\u4ee5\u5206\u6210\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. $y=m$\u3002\u53ef\u4ee5\u770b\u4f5c\u5c06\u6700\u540e\u4e00\u5217\u7684\u7b2c$x$\u4e2a\u79fb\u5230\u6700\u540e\uff1b\n1. $y\\neq m$\u3002\u53ef\u4ee5\u770b\u4f5c\uff1a\n   1. \u5c06\u7b2c$x$\u884c\u7b2c$y$\u4e2a\u79fb\u5230\u6700\u540e\u4e00\u5217\u6700\u540e\uff1b\n   1. \u5c06\u6700\u540e\u4e00\u5217\u7b2c$x$\u4e2a\u79fb\u5230\u7b2c$x$\u884c\u6700\u540e\u3002\n\n\u8fd9\u4e9b\u7ef4\u62a4\u5e8f\u5217\u7684\u5220\u9664\u3001\u63d2\u5165\u3001\u67e5\u8be2\u7b2c$k$\u4e2a\uff0c\u4e00\u770b\u5c31\u662f\u5e8f\u5217\u4e4b\u738b\u5e73\u8861\u6811\u7684\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4f7f\u7528fhq-Treap\u3002\n\n\u81f3\u4e8e\uff0c\u5982\u679c\u66b4\u529b\u7ef4\u62a4\u5e73\u8861\u6811\u7684\u8bdd\uff0c\u5efa\u6811\u5c31\u8981MLE\uff0c\u662f$\\mathrm O(nm)$\u7684\u3002\u8003\u8651\u7528[fbb\u7684OJ](https://www.luogu.com.cn/problem/P3285)\u90a3\u9898\u7684trick\uff0c\u4efb\u610f\u65f6\u523b\uff0c\u6240\u6709\u6ca1\u6709\u88ab\u62ce\u51fa\u6765\u7684naive\u5143\u7d20\u7ec4\u6210\u7684\u6781\u5927\u533a\u95f4\uff08\u533a\u95f4\u5185\u7f16\u53f7\u8fde\u7eed\uff09\uff0c\u6211\u4eec\u628a\u5b83\u4eec\u7f29\u6210\u4e00\u4e2a\u70b9\u3002\n\n\u4ee3\u7801\u91cc\u64cd\u4f5c\u80fd\u5408\u5e76\u7684\u5408\u5e76\uff0c\u4fee\u6539\u64cd\u4f5c\u4e5f\u53ef\u4ee5\u8fd4\u56de\u539f\u503c\u51cf\u5c11\u64cd\u4f5c\u91cf\uff0c\u6765\u51cf\u5c0f\u5e38\u6570\uff0c\u6bd5\u7adf\u8fd9\u4e0d\u662f\u6b63\u89e3/cy\n\n\u7531\u4e8e\u8981\u5220\u9664\u8282\u70b9\uff0c\u6211\u5f00\u4e86\u5783\u573e\u56de\u6536\uff0c\u5176\u5b9e\u6839\u672c\u4e0d\u7528\uff0c\u5c31\u5f53\u7ec3\u4e60\u4e00\u4e0b\uff08\n\n\u4e00\u5f00\u59cb\u89c9\u5f97\u633a\u96be\uff0c\u73b0\u5728\u770b\u6765\u662f\u4e2a\u633a\u677f\u7684\u9898\u554a\u3002\u3002\u65f6\u95f4\u590d\u6742\u5ea6$\\mathrm O(q\\log n)$\uff08\u5047\u8bbe$n,m$\u540c\u9636\uff09\u3002\n\n\u8fd9\u91cc\u8bb2\u4e00\u4e2a\u6211\u4ee3\u7801\u91cc\u72af\u7684\u7a00\u6709\u7684\u9519\u8bef\uff1a\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u7528`vector`\u5b58\u8282\u70b9\u5199\u5e73\u8861\u6811\uff0c\u5176\u4e2d\u5efa\u6811\u7684\u65f6\u5019\u6211\u662f\u8fd9\u6837\u5199\u7684\uff1a\n\n```cpp\nif(l<mid)lson(p)=bld(l,mid-1);\nif(r>mid)rson(p)=bld(mid+1,r);\n```\n\u4ee5\u7b2c\u4e00\u53e5\u4e3a\u4f8b\uff0c\u8fd9\u91cc`lson(p)`\u548c`bld(l,mid-1)`\u7684\u6267\u884c\u987a\u5e8f\u76f4\u89c9\u662f\u5148\u540e\u8005\u540e\u5148\u8005\uff0c\u4f46\u5176\u5b9e\u4e0d\u662f\uff0c\u7a76\u7adf\u662f\u5148\u5148\u8005\u540e\u540e\u8005\u8fd8\u662fUB\u6211\u4e5f\u8bf4\u4e0d\u6e05\uff0c\u8be6\u89c1[\u8fd9\u7bc7\u5e16\u5b50](https://www.luogu.com.cn/discuss/show/237813)\u3002\u95ee\u9898\u6765\u4e86\uff0c`bld`\u51fd\u6570\u4f1a\u8c03\u7528`nwnd`\u51fd\u6570\u65b0\u5efa\u8282\u70b9\u5e76\u8c03\u7528`vector`\u7684`push_back`\u51fd\u6570\uff0c\u8fd9\u4f1a\u4f7f`vector`\u91cd\u65b0\u5206\u914d\u5185\u5b58\uff0c\u5bfc\u81f4`lson(p)`\u7684\u5730\u5740\u53d8\u4e86\uff0c\u8fdb\u800c\u5bfc\u81f4\u503c\u8d4b\u4e0d\u8fdb\u53bb\u3002\u6211\u8c03\u8fd9\u4e2a\u4ee3\u7801\u7684\u90a3\u5929\u665a\u4e0a\u8fd8\u4ee5\u4e3a\u95f9\u9b3c\u4e86\uff0c\u5dee\u70b9\u628a\u6211\u6574\u54ed\u4e86\uff08\u6342\u8138\n\n\u6240\u4ee5\u5e94\u8be5\u627e\u4e2a\u4e2d\u95f4\u53d8\u91cf\u5b58\u4e0b\u6765\uff1a\n\n```cpp\nint res;\nif(l<mid)res=bld(l,mid-1),lson(p)=res;\nif(r>mid)res=bld(mid+1,r),rson(p)=res;\n```\n\n\u4ee3\u7801\uff08\u5f00\u6d1b\u8c37\u81ea\u5e26O2\u624d\u80fd\u8fc7\u54e6\uff0c\u6bd2\u7624\uff09\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define pb push_back\n#define mp make_pair\n#define X first\n#define Y second\ntypedef long long ll;\nmt19937 rng(20060617);\nconst int N=300000;\nint n,m,qu;\nstruct fhq_treap{//\u5e73\u8861\u6811 \n\tint root;\n\tstruct node{unsigned key;int lson,rson,sz,real_sz;ll l,r;};\n\t#define key(p) nd[p].key\n\t#define lson(p) nd[p].lson\n\t#define rson(p) nd[p].rson\n\t#define sz(p) nd[p].sz\n\t#define real_sz(p) nd[p].real_sz\n\t#define l(p) nd[p].l\n\t#define r(p) nd[p].r\n\tvector<node> nd;//vector\u5b58\u8282\u70b9 \n\tstack<int> bin;//\u5783\u573e\u6876 \n\tint nwnd(ll l,ll r){//\u65b0\u5efa\u8282\u70b9 \n\t\tif(l>r)return 0;\n\t\tif(bin.size()){//\u7528\u5783\u573e \n\t\t\tint p=bin.top();\n\t\t\tbin.pop();\n\t\t\treturn nd[p]=node({rng(),0,0,1,int(r-l+1),l,r}),p;\n\t\t}\n\t\treturn nd.pb(node({rng(),0,0,1,int(r-l+1),l,r})),nd.size()-1;\n\t}\n\tvoid sprup(int p){sz(p)=sz(lson(p))+1+sz(rson(p));real_sz(p)=real_sz(lson(p))+r(p)-l(p)+1+real_sz(rson(p));}\n\tint bld(int l=1,int r=n){//\u5efa\u6811 \n\t\tint mid=l+r>>1,p=nwnd(1ll*mid*m,1ll*mid*m);\n\t\tint res;\n\t\tif(l<mid)res=bld(l,mid-1),lson(p)=res;\n\t\tif(r>mid)res=bld(mid+1,r),rson(p)=res;//\u8bb7\uff0c\u9519\u8bef\u5c31\u5728\u8fd9\u91cc \n\t\tsprup(p);\n\t\treturn sprup(p),p;\n\t}\n\tvoid init(ll l=0,ll r=0){\n\t\tnd.pb(node({0,0,0,0,0,0,0}));\n\t\tif(l)root=nwnd(l,r);\n\t\telse root=bld();\n\t}\n\tpair<int,int> split(int x,int p=-1){~p||(p=root);\n\t\tif(!x)return mp(0,p);\n\t\tpair<int,int> sp;\n\t\tif(x<=sz(lson(p)))return sp=split(x,lson(p)),lson(p)=sp.Y,sprup(p),mp(sp.X,p);\n\t\treturn sp=split(x-1-sz(lson(p)),rson(p)),rson(p)=sp.X,sprup(p),mp(p,sp.Y);\n\t}\n\tint mrg(int p,int q){\n\t\tif(!p||!q)return p|q;\n\t\tif(key(p)<key(q))return rson(p)=mrg(rson(p),q),sprup(p),p;\n\t\treturn lson(q)=mrg(p,lson(q)),sprup(q),q;\n\t}\n\tpair<int,int> rk(int x,int p=-1){~p||(p=root);//\u5728\u6811\u4e2d\u7684\u6392\u540d\uff08\u7b97naive\u533a\u95f4\uff09 \n\t\tif(x<=real_sz(lson(p)))return rk(x,lson(p));\n\t\tif(x<=real_sz(lson(p))+r(p)-l(p)+1)return mp(sz(lson(p))+1,x-real_sz(lson(p)));\n\t\tpair<int,int> res=rk(x-(real_sz(lson(p))+r(p)-l(p)+1),rson(p));\n\t\treturn mp(sz(lson(p))+1+res.X,res.Y);\n\t}\n\tvoid recyc(int p){bin.push(p);}//\u5783\u573e\u56de\u6536 \n\tll del(int x){//\u5220\u9664\u70b9 \n\t\tpair<int,int> _rk=rk(x);\n\t\tpair<int,int> sp=split(_rk.X-1),sp0=split(1,sp.Y);\n\t\tnode tmp=nd[sp0.X];\n\t\trecyc(sp0.X);//\u5783\u573e\u56de\u6536 \n\t\tint l=nwnd(tmp.l,tmp.l+_rk.Y-2),r=nwnd(tmp.l+_rk.Y,tmp.r);\n\t\treturn root=mrg(sp.X,mrg(l,mrg(r,sp0.Y))),tmp.l+_rk.Y-1;\n\t}\n\tll chg_mv_bk(int x,ll v=0){//\u4fee\u6539\u5e76\u79fb\u5230\u6700\u540e \n\t\tpair<int,int> _rk=rk(x);\n\t\tpair<int,int> sp=split(_rk.X-1),sp0=split(1,sp.Y);\n\t\tll res=l(sp0.X)+_rk.Y-1;\n\t\tint l=nwnd(l(sp0.X),l(sp0.X)+_rk.Y-2),r=nwnd(l(sp0.X)+_rk.Y,r(sp0.X));\n\t\tl(sp0.X)=r(sp0.X)=v?v:res,real_sz(sp0.X)=1;\n\t\treturn root=mrg(sp.X,mrg(l,mrg(r,mrg(sp0.Y,sp0.X)))),res;\n\t}\n\tvoid pb(ll v){//\u5728\u6700\u540e\u538b\u5165 \n\t\troot=mrg(root,nwnd(v,v));\n\t}\n}trp_r[N+1],&trp_c=trp_r[0];\nint main(){\n\tcin>>n>>m>>qu;\n\tfor(int i=1;i<=n;i++)trp_r[i].init(1ll*(i-1)*m+1,1ll*i*m-1);\n\ttrp_c.init();//\u6700\u540e\u4e00\u5217\u8981\u666e\u901a\u5efa\u6811\uff0c\u56e0\u4e3a\u7f16\u53f7\u4e0d\u8fde\u7eed/kk \n\twhile(qu--){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tif(y==m){//\u60c5\u51b51 \n\t\t\tprintf(\"%lld\\n\",trp_c.chg_mv_bk(x));\n\t\t}\n\t\telse{//\u60c5\u51b52 \n\t\t\tll res=trp_r[x].del(y);\n\t\t\tprintf(\"%lld\\n\",res);\n\t\t\ttrp_r[x].pb(trp_c.chg_mv_bk(x,res));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n### \u65b9\u6cd5$2$\uff1a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\n\n\u56de\u60f3\u5f53\u5e74\u4e0d\u4f1a\u5e73\u8861\u6811\u7684\u65f6\u5019\uff0c\u60f3\u7740\u548b\u7528\u73b0\u6709\u77e5\u8bc6\u7ef4\u62a4\u5e8f\u5217\u63d2\u5165\u5220\u9664\u3002\u4e00\u4e2a\u60f3\u6cd5\u662f\uff1a\u7ed9\u6bcf\u4e2a\u4f4d\u7f6e\u8bbe\u4e00\u4e2a\u503c$0/1$\uff0c$1$\u8868\u793a\u8fd8\u5065\u5728\uff0c$0$\u8868\u793a\u88ab\u5220\u4e86\u3002\u5220\u9664\u64cd\u4f5c\u5c31\u8d4b$0$\uff0c\u67e5\u8be2\u7b2c$k$\u4e2a\u5c31\u4e8c\u5206\u51fa\u524d\u7f00\u548c\u7b49\u4e8e$k$\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u63d2\u5165\u5462\uff1f\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u9898\u7684\u63d2\u5165\u64cd\u4f5c\u53ea\u5b58\u5728\u4e8e\u672b\u5c3e\uff0c\u4e8e\u662f\u6211\u4eec\u5728\u672b\u5c3e\u76f4\u63a5\u65b0\u5efa\u8282\u70b9\u5373\u53ef\u3002\u8003\u8651\u5230\u7a7a\u95f4\u5f00\u4e0d\u4e0b\uff0c\u6211\u4eec\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u67e5\u8be2\u7684\u8bdd\u7ebf\u6bb5\u6811\u4e8c\u5206\u3002\u7136\u540e\u5927\u6982\u4e5f\u662f\u8ddf\u5e73\u8861\u6811\u4e00\u6837\u7f29\u70b9\u3002\n\n\u4ee3\u7801\u5f88\u96be\u5199\uff0c\u4e0d\u60f3\u5199\u4e86\u3002\u5e38\u6570\u5e94\u8be5\u5c0f\u4e00\u70b9\uff1f\n\n### \u65b9\u6cd5$3$\uff1aBIT\uff08\u6b63\u89e3\uff09\n\n\u8003\u8651\u7ee7\u7eed\u7f29\u5c0f\u5e38\u6570\u3002\u6ce8\u610f\u5230\uff0c\u5355\u70b9\u67e5\u8be2\u548c\u5728\u524d\u7f00\u548c\u4e0a\u4e8c\u5206\uff08BIT\u500d\u589e\uff0c\u8fd9\u91cc\u7531\u4e8eBIT\u53ea\u80fd\u4ece\u5de6\u5f80\u53f3\u500d\u589e\u6700\u53f3\u503c\uff0c\u800c\u6211\u4eec\u8981\u67e5\u6700\u5de6\u8fb9\u7684$\\geq k$\u7684\u4f4d\u7f6e\uff0c\u53ea\u9700\u8981\u8f6c\u5316\u4e3a\u6700\u53f3\u8fb9\u7684$<k$\u7684\u4f4d\u7f6e\u52a0\u4e00\u5373\u53ef\uff09\u521a\u597d\u90fd\u662fBIT\u80fd\u652f\u6301\u7684\uff0c\u8003\u8651\u4f7f\u7528BIT\u3002\n\n\u4f46\u662fBIT\u4e0d\u80fd\u52a8\u6001\u5f00\u70b9\uff0c\u7a7a\u95f4\u53d7\u4e0d\u4e86\u600e\u4e48\u529e\u5462\uff1f\n\n\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u65b9\u6cd5\uff1a\u5c06\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u4f9d\u6b21\u5904\u7406\u6bcf\u884c\u7684\u524d$m-1$\u4e2a\u5143\u7d20\uff08\u6bcf\u884c\u5185\u90e8\u6309\u65f6\u95f4\u6233\u6392\u5e8f\uff09\uff0c\u628a\u67e5\u8be2\u7684\u7ed3\u679c\u8bb0\u4e0b\u6765\uff0c\u5904\u7406\u5b8c\u4e4b\u540e\u64a4\u9500\u5f71\u54cd\u5904\u7406\u4e0b\u4e00\u4e2a\uff0c\u8fd9\u6837\u7a7a\u95f4\u53ea\u9700\u8981\u5f00\u4e00\u4e2aBIT\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f\u4e0d\u53d8\u7684\u3002\n\n\u7531\u4e8e\u6ca1\u6709\u6309\u539f\u987a\u5e8f\u64cd\u4f5c\uff0c\u6211\u4eec\u5e76\u4e0d\u80fd\u77e5\u9053\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u5177\u4f53\u7f16\u53f7\u3002\u8fd9\u6837\u518d\u4ece\u5934\u6309\u539f\u987a\u5e8f\u6765\u4e00\u904d\uff0c\u6b64\u65f6\u6bcf\u4e2a\u884c\u90fd\u4e0d\u9700\u8981BIT\u4e86\uff0c\u628aBIT\u7559\u7ed9\u6700\u540e\u4e00\u5217\u5b9e\u65f6\u64cd\u4f5c\uff0c\u6bcf\u884c\u53ca\u6700\u540e\u4e00\u5217\u5f00\u4e2a`vector`\u8bb0\u5f55\u63d2\u5165\u672b\u5c3e\u7684\u7f16\u53f7\uff0c\u5c31\u53ef\u4ee5\u5b9e\u65f6\u67e5\u8be2\u4efb\u610f\u5408\u6cd5\u4f4d\u7f6e\u7684\u7f16\u53f7\u4e86\u3002\n\n\u4ee3\u7801\uff08\u4e0d\u5f00O2\u4e5f\u6bcf\u4e2a\u70b9\u5728$1\\mathrm s$\u5185\uff09\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define pb push_back\ntypedef long long ll;\nint lowbit(int x){return x&-x;}\nconst int N=300000,QU=300000;\nint n,m,qu;\nstruct query{int x,y,id;}qry[QU+1];\nbool cmp(query x,query y){return x.id<y.id;}\nvector<query> v[N+1];\nstruct bitree{//BIT \n\tint sum[N+QU+1];\n\tvoid init(){memset(sum,0,sizeof(sum));}\n\tvoid add(int x,int v){//\u5355\u70b9\u52a0 \n\t\twhile(x<=max(n,m)+qu)sum[x]+=v,x+=lowbit(x);\n\t}\n\tint fd(int x){//BIT\u500d\u589e \n\t\tint res=0,now=0;\n\t\tfor(int i=20;~i;i--)if(res+(1<<i)<=max(n,m)+qu&&now+sum[res+(1<<i)]<x)res+=1<<i,now+=sum[res];\n\t\treturn res+1;\n\t}\n}bit;\nint fd[N+1];//\u8bb0\u5f55\u67e5\u8be2\u7ed3\u679c \nvector<ll> bk_r[N+1],&bk_c=bk_r[0];\nint main(){\n\tcin>>n>>m>>qu;\n\tfor(int i=1;i<=qu;i++)scanf(\"%d%d\",&qry[i].x,&qry[i].y),qry[i].id=i,qry[i].y<m&&(v[qry[i].x].pb(qry[i]),0);\n\tbit.init();//\u521d\u59cb\u5316 \n\tfor(int i=1;i<m;i++)bit.add(i,1);\n\tfor(int i=1;i<=n;i++){//\u79bb\u7ebf\u64cd\u4f5c \n\t\tsort(v[i].begin(),v[i].end(),cmp);//\u6309\u65f6\u95f4\u6233\u6392\u5e8f \n\t\tfor(int j=0;j<v[i].size();j++){\n\t\t\tint y=v[i][j].y,id=v[i][j].id;\n\t\t\tfd[id]=bit.fd(y);//\u67e5\u8be2\u5e76\u8bb0\u5f55 \n\t\t\tbit.add(fd[id],-1);bit.add(m+j,1);//\u5220\u9664\u3001\u63d2\u5165 \n\t\t}\n\t\tfor(int j=0;j<v[i].size();j++)bit.add(fd[v[i][j].id],1),bit.add(m+j,-1);//\u64a4\u9500\u5f71\u54cd \n\t}\n\tbit.init();//\u91cd\u7f6e \n\tfor(int i=1;i<=n;i++)bit.add(i,1);\n\tfor(int i=1;i<=qu;i++){\n\t\tint x=qry[i].x,y=qry[i].y;\n\t\tif(y==m){\n\t\t\tint _fd=bit.fd(x);\n\t\t\tll res=_fd<=n?1ll*_fd*m:bk_c[_fd-n-1];//\u4ecevector\u91cc\u67e5 \n\t\t\tprintf(\"%lld\\n\",res);\n\t\t\tbk_c.pb(res);//\u538b\u5165vector \n\t\t\tbit.add(_fd,-1);bit.add(n+bk_c.size(),1);//\u5220\u9664\u3001\u63d2\u5165 \n\t\t}\n\t\telse{\n\t\t\tll res=fd[i]<m?1ll*(x-1)*m+fd[i]:bk_r[x][fd[i]-m];//\u4ecevector\u91cc\u67e5 \n\t\t\tprintf(\"%lld\\n\",res);\n\t\t\tint _fd=bit.fd(x);\n\t\t\tbk_r[x].pb(_fd<=n?1ll*_fd*m:bk_c[_fd-n-1]);bk_c.pb(res);//\u538b\u5165vector \n\t\t\tbit.add(_fd,-1);bit.add(n+bk_c.size(),1);//\u5220\u9664\u3001\u63d2\u5165  \n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1595080212,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "\u6d1b\u8c37 P3960 - \u5217\u961f"
    },
    {
        "content": "\u8fd9\u91cc\u63d0\u4f9b\u4e00\u7bc7\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u9898\u89e3\uff08\u521a\u5b66oi\u521a\u5b66\u4f1a\u5199\u9898\u89e3\u8f7b\u55b7/\n\u8fd9\u91cc\u7ebf\u6bb5\u6811\u7684\u529f\u80fd\uff1a\u5355\u70b9\u4fee\u6539 \u4e00\u4e2a\u7c7b\u4f3c\u4e8ek\u5927\u67e5\u8be2\u7684\u884c\u4e3a.\n\u64cd\u4f5c\u601d\u8def\u5982\u4e0b\uff1a\n\u7ef4\u62a4n-1\u4e2a\u7ebf\u6bb5\u6811\u4ee3\u8868\u6bcf\u884cm-1\u4e2a\u539f\u4f4d\u5143\u7d20\u662f\u5426\u88ab\u79fb\u52a8\u8fc7,\u4e3a\u4e86\u52a0\u5165\u4ece\u6700\u540e\u4e00\u5217\u65b0\u6dfb\u52a0\u7684\u4eba,\u6240\u4ee5r\u5927\u5c0f\u5f00\u5230m-1+q,\u8fd9\u6837\u9884\u7559\u51fa\u51e0\u4e2a\u70b9\u5c31\u4e0d\u7528vector\u4e86;\n\n\u521d\u59cb\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u90fd\u662f\u7a7a\u70b9=0,\u82e5\u9047\u5230\u70b9\u906d\u5230\u79fb\u9664\u5c06\u5b83\u53d8\u62101 \u8868\u793a\u8fd9\u4e2a\u70b9\u4e0d\u5728\u539f\u4f4d.\u8bbexnow\u4e3a\u8fd9\u4e00\u884c\u5df2\u7ecf\u906d\u5230\u4e86\u64cd\u4f5c\u7684\u6b21\u6570.\u5219\u5c06\u672c\u6b21\u65b0\u52a0\u5165\u7684\u70b9\u79fb\u5230\u8be5\u884c\u7ebf\u6bb5\u6811\u7684xnow\u7684\u4f4d\u7f6e\u6743\u503c\u4e3a\u65b0\u52a0\u5165\u7684\u5143\u7d20\u539f\u672c\u7f16\u53f7\uff1b\n\u6bcf\u6b21\u67e5\u8be2\u5c31\u67e5\u627e\u8be5\u7ebf\u6bb5\u6811\u7684\u7b2c\u8981\u6c42\u5217\u6570\u4e2a\u975e1\u7684\u4f4d\u7f6e\u8fd9\u91cc\u5c31\u9700\u8981\u4e00\u4e2a\u7c7b\u4f3ck\u5927\u67e5\u8be2\u7684\u884c\u4e3a.\n\u6211\u7684\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u5b9e\u73b0\u65b9\u5f0f\u6bd4\u8f83\u62bd\u8c61\uff08\u867d\u7136\u5b9e\u73b0\u8d77\u6765\u5f88\u77ed\u4f46\u662f\u7ec6\u8282\u5947\u591a\n\n\n```cpp\n#include<bits/stdc++.h>\n#define left l,mid,tr[pos].ls\n#define righ mid+1,r,tr[pos].rs\nusing namespace std;typedef long long ll;//\u65f6\u95f4\u590d\u6742\u5ea6 300000*(log(600000)=20)*4(\u64cd\u4f5c\u5e38\u5e38\u6570) \nstruct qq{ll num;ll ls,rs,sum;}tr[20*600000];bool flag;\nll res[300010],m,root[300010],q,cnt;ll num,n,x,y,th;\nvoid sak_tr(ll l,ll r,ll &pos){//\u52a8\u6001\u6dfb\u52a0\u5c3e\u90e8 \n    if(!pos)pos=++cnt;\n    if(l==r){tr[pos].num=num;return;}\n    int mid=l+r>>1;\n    if(mid>=res[th])sak_tr(left);else sak_tr(righ);\n}\nvoid sak_th(ll l,ll r,ll &pos,ll rec){//\u627e\u5230\u4e1c\u897f \u5220\u9664 \n    if(!pos)pos=++cnt;tr[pos].sum--; \n    if(l==r){\n        if(tr[pos].num)num=tr[pos].num; \n        else if(flag)num=(x-1)*m+l;\n        else num=l*m; \n        return;\n    }\n    ll mid=l+r>>1,cut=tr[tr[pos].ls].sum+mid-l+1;//\u5de6\u513f\u5b50\u5143\u7d20\u4e2a\u6570 \n    if(rec+cut>=th)sak_th(left,rec);else sak_th(righ,rec+cut);\n}\nint main(){//\u5148\u627e\u5230\u5220\u8c01\u8f93\u51fa\u7b54\u6848 \u627e\u5230\u52a0\u8c01 \u8fdb\u884c\u6dfb\u52a0 //4nlogn   \n//freopen(\"123.in\",\"r\",stdin);\n    cin>>n>>m>>q;for(int i=1;i<=n;i++)res[i]=m-1;res[n+1]=n;\n    for(int i=1;i<=q;i++){\n        scanf(\"%lld%lld\",&x,&y);//x \u884c y\u5217 \n        if(y==m){\n            flag=0,th=x,sak_th(1,n+q,root[n+1],0),printf(\"%lld\\n\",num);//\u5220\u9664\u7b54\u6848 \n            th=n+1,res[th]++,sak_tr(1,n+q,root[n+1]);//\u52a0\u5230\u672b\u5c3e \n        }\n        else{\n            flag=1,th=y,sak_th(1,m+q,root[x],0),printf(\"%lld\\n\",num);//\u5148\u5220\u9664\u7b54\u6848 \n            th=n+1,res[th]++,sak_tr(1,n+q,root[n+1]);//\u6dfb\u52a0\u5230\u5217\u672b\u5c3e \n            flag=0,th=x,sak_th(1,n+q,root[n+1],0);//\u518d\u5220\u9664\u5217\u5bf9\u5e94\u5143\u7d20 \n            th=x,res[th]++,sak_tr(1,m+q,root[x]);//\u5c06\u5176\u6dfb\u52a0\u5230\u884c\u7684\u672b\u5c3e \n        }\n    }\n}\n```",
        "postTime": 1541170779,
        "uid": 59907,
        "name": "Sakura_\u68a6\u7476",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "### [\u5f00\u5934\u5c0f\u5e7f\u544a\uff1a\u81ea\u5df1\u505a\u7684\u4e00\u4e2a\u6a21\u677f\u5e93OwO](https://www.luogu.org/blog/29354/Templet)\n\n------------\n## \u5f15\u8a00\n> \u867d\u7136\u5df2\u7ecf\u6709FHQTreap\u7684\u89e3\u6cd5\u4e86\uff0c\u4e0d\u8fc7\u4ed6\u4eec\u7684\u5206\u88c2\u548c\u5408\u5e76\u64cd\u4f5c\u592a\u9ebb\u70e6\u800c\u4e14\u4e0d\u662f\u5f88\u6613\u61c2\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u81ea\u5df1\u505a\u8fd9\u9053\u9898\u7684\u601d\u8def\u548c\u8be6\u7ec6\u505a\u6cd5\uff1a\n\n\u5982\u679c\u60a8\u53ea\u662f\u60f3\u77e5\u9053FHQTreap\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230**\u64cd\u4f5c**\u8fd9\u4e00\u680f\u3002\n\n------------\n## \u601d\u8def\n> \u9996\u5148\uff0c\u6211\u4eec~~\u770b\u4e86\u9898\u89e3~~\u6839\u636e\u64cd\u4f5c\u53ef\u4ee5\u770b\u51fa\u6bcf\u6b21\u6539\u52a8\u90fd\u662f\u5bf9**\u7b2cx\u884c\u548c\u7b2cm\u5217**\u7684\u6539\u52a8\uff0c\u90a3\u6211\u4eec\u5c31\u7ef4\u62a4\uff1a**n\u884c\uff0c\u4e0d\u5305\u62ec\u6bcf\u884c\u6700\u540e\u4e00\u4e2a\u5e8f\u5217**\u548c**\u6700\u540e\u4e00\u5217**\uff0c\n\n> \u50cf\u8fd9\u79cd\u7ef4\u62a4\u6570\u5217\u4ec0\u4e48\u7684\u9898\u76ee\u5f88\u5bb9\u6613\u80fd\u60f3\u5230\u7528**\u5e73\u8861\u6811**\u89e3\u51b3\uff0c\u4f46\u662f\u5982\u679c\u5bf9\u6bcf\u4e2a\u4eba\u90fd\u5f00\u4e00\u4e2a\u70b9\u7ef4\u62a4\u7684\u8bdd\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f$n^2$\u7684\uff0c\u663e\u7136\u4e0d\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u3002\n\n> \u4e0d\u8fc7\u6ce8\u610f\u9898\u9762\u6709\u8bf4**\u7f16\u53f7\u8fde\u7eed**\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u5f00\u59cb\u7684\u6bcf\u884c\u7684\u5e8f\u5217\u90fd\u662f\u53ef\u4ee5\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u5f00\u59cb\u7684\u7f16\u53f7\u53d8\u6210\u4e00\u4e2a\u533a\u95f4\uff0c\u62ff\u4e00\u4e2a\u70b9\u5728\u4e0a\u9762\u8bb0\u5f55\u533a\u95f4\u7684\u4fe1\u606f\u5373\u53ef\u3002\n\n> \u8fd9\u6837\u505a\u6cd5\u5c31\u5f88\u5bb9\u6613\u60f3\u5230\u4e86\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u5982\u679c\u6211\u4eec\u8981\u627e\u5176\u4e2d\u7684\u6392\u7b2ck\u7684\u7f16\u53f7\uff0c\u53ea\u9700\u8981\u4ece\u5de6\u5f80\u53f3\u6570\u533a\u95f4\uff0c\u76f4\u5230\u4e00\u4e2a\u533a\u95f4$[l,r]$\uff0c\u8bbe\u8fd9\u4e2a\u533a\u95f4\u524d\u9762\u7684\u6240\u6709\u533a\u95f4\u7684\u603b\u957f\u5ea6\u4e3aL\uff0c\u90a3\u4e48\u53ea\u8981\u6ee1\u8db3$L+1<=k<=L+(r-l+1)$\uff0c\u5373\u53ef\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u627e\u7684\u7f16\u53f7\u5c31\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u663e\u7136\u662f\u53ef\u4ee5\u5728\u5e73\u8861\u6811\u4e0a\u4e8c\u5206\u627e\u5230\u7684\uff08\u53ea\u9700\u8981\u8bb0\u5f55\u5b50\u6811**\u533a\u95f4\u957f\u5ea6\u548c**\uff09\n\n> \u5bf9\u4e8e\u6bcf\u6b21\u7684\u64cd\u4f5c\uff0c\u5982\u679c$y==m$\uff0c\u76f4\u63a5\u5728\u6700\u540e\u4e00\u5217\u4e0a\u64cd\u4f5c\uff0c\u627e\u5230\u5f53$k==x$\u65f6\u4e0a\u8ff0\u7684\u533a\u95f4\uff0c\u628a\u4ed6\u65ad\u6210\u4e09\u4e2a\u533a\u95f4\uff0c\u4e2d\u95f4\u7684\u533a\u95f4\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u7f16\u53f7\u3002\u628a\u7f16\u53f7\u53d6\u51fa\u653e\u5230\u6700\u540e\u4e00\u5217\u7684\u5c3e\u90e8\u5373\u53ef\u3002\n\n> \u5982\u679c$y!=m$\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u7b2cx\u884c\u4e0a\u627e\u5230\u5f53$k==y$\u65f6\u4e0a\u8ff0\u7684\u533a\u95f4\uff0c\u4e5f\u662f\u65ad\u6210\u4e09\u4e2a\uff0c\u628a\u4e2d\u95f4\u7684\u585e\u5230\u6700\u540e\u4e00\u5217\u7684\u5c3e\u90e8\uff0c\u518d\u5728\u6700\u540e\u4e00\u5217\u627e\u5230\u5f53$k==x$\u65f6\u4e0a\u8ff0\u7684\u533a\u95f4\n\uff0c\u88c2\u6210\u4e09\u4e2a\u533a\u95f4\uff0c\u628a\u4e2d\u95f4\u7684\u533a\u95f4\u585e\u5230\u7b2cx\u884c\u7684\u5c3e\u90e8\u3002\n\n> \u5982\u679c\u4e0d\u7406\u89e3\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u5728\u7eb8\u4e0a\u6a21\u62df\u4e00\u4e0b\u3002\u5982\u679c\u8fd8\u662f\u4e0d\u7406\u89e3\uff0c\u53ef\u4ee5\u518d\u53c2\u8003\u4e00\u4e0b\u522b\u7684\u9898\u89e3\uff0c\u56e0\u4e3a\u672c\u9898\u89e3\u7684\u91cd\u70b9\u5728FHQTreap\u7684\u64cd\u4f5c\u4e0a\uff0c\u601d\u8def\u6240\u6709\u7684\u9898\u89e3\u5e94\u8be5\u662f\u4e00\u6837\u7684\u3002\n\n------------\n## \u64cd\u4f5c\uff1a\n\n> $Split$\u64cd\u4f5c\u80af\u5b9a\u4e0d\u80fd\u7528\u539f\u6765\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u6539\u4e00\u4e0b\uff1a\n\n```cpp\n\tinline void Split(LL pst, LL &x, LL &y, LL key)\n\t{\n\t\tif (!pst)\n\t\t\tx = y = 0;\n\t\telse if (sz[l[pst]] + len[pst] <= key)\n\t\t\tx = pst, Split(r[pst], r[x], y, key - sz[l[pst]] - len[pst]), PushUp(pst);\n\t\telse\n\t\t\ty = pst, Split(l[pst], x, l[y], key), PushUp(pst);\n\n\t\treturn;\n\t}\n```\n\n> \u5176\u4e2d\uff0clen\u662f\u67d0\u4e2a\u70b9**\u8868\u793a\u7684\u533a\u95f4**\u7684**\u533a\u95f4\u957f\u5ea6**\uff0csz\u662f\u5b50\u6811**\u533a\u95f4\u957f\u5ea6\u548c**\u5927\u5c0f\uff0ckey\u662f\u6211\u4eec\u4e0a\u9762\u8bb2\u7684k\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u628a\u603b\u957f\u5c0f\u4e8e\u7b49\u4e8ekey\u7684\u653e\u5728\u5de6\u6811\uff0c\u5176\u4ed6\u653e\u5728\u53f3\u6811\uff0c\u4f1aFHQTreap\u5e94\u8be5\u4e00\u4e0b\u5c31\u80fd\u770b\u61c2\uff0c\u53ea\u662f\u53d8\u4e86\u4e00\u70b9\u70b9\u6761\u4ef6\u3002\n\n> \u5230\u5de6\u5b50\u6811\u65f6$key=key - sz[l[pst]] - len[pst]$\u662f\u56e0\u4e3a\u6211\u4eec\u8fd9\u662f\u5728\u6811\u4e0a\u4e8c\u5206\uff0c\u53ef\u4ee5\u53c2\u7167\u666e\u901a\u5e73\u8861\u6811\u7684Kth\u64cd\u4f5c\n\n> $Merge$\u64cd\u4f5c\u53ef\u4ee5\u5b8c\u5168\u7528\u539f\u6765\u7684\uff0c\u4e0d\u9700\u8981\u4fee\u6539\uff0c\u56e0\u4e3a\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u7684\u65f6\u5019\u6211\u4eec\u77e5\u9053\u4ed6\u4eec\u7684\u524d\u540e\u5173\u7cfb\uff0c\u4e5f\u5c31\u77e5\u9053\u5408\u5e76\u7684\u524d\u540e\u4e86\u3002\u539f\u6765\u7684\u64cd\u4f5c\u662f\u9ed8\u8ba4\u5de6\u6811\u7684\u6743\u503c\u5168\u90e8\u5c0f\u4e8e\u53f3\u6811\u7684\u6743\u503c\u624d\u80fd\u505a\u7684\uff0c\u4e5f\u5b58\u5728\u8fd9\u79cd\u9ed8\u8ba4\u5173\u7cfb\uff0c\u56e0\u6b64\u53ef\u4ee5\u4e0d\u7528\u4fee\u6539\u3002\n\n```cpp\n\tinline LL Merge(LL x, LL y)\n\t{\n\t\tif (!x || !y)\n\t\t\treturn x + y;\n\n\t\tif (heap[x] < heap[y])\n\t\t\treturn r[x] = Merge(r[x], y), PushUp(x), x;\n\t\telse\n\t\t\treturn l[y] = Merge(x, l[y]), PushUp(y), y;\n\t}\n```\n\n>\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b\uff0cheap\u662f\u968f\u673a\u503c\uff0cPushUp\u662f\u66f4\u65b0\u5f53\u524d\u7684sz\uff0c\u4e5f\u5c31\u662f\u5b50\u6811\u533a\u95f4\u957f\u5ea6\u548c\n\n> \u5bf9\u4e8eKth\u64cd\u4f5c\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u4fee\u6539\uff1a\n```cpp\ninline LL Kth(LL pst, LL k)\n\t{\n\t\tif (k <= sz[l[pst]])\n\t\t\treturn Kth(l[pst], k);\n\t\tif (sz[l[pst]] + 1 <= k && k <= sz[l[pst]] + len[pst])\n\t\t\treturn pst;\n\t\treturn Kth(r[pst], k - sz[l[pst]] - len[pst]);\n\t}\n```\n\n> \u5982\u679ck\u5df2\u7ecf\u5c0f\u4e8e\u7b49\u4e8e\u5de6\u6811\u7684\u6743\u503c\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u7684\u533a\u95f4\u80af\u5b9a\u5728\u5de6\u8fb9\u3002\n> \u5982\u679ck\u7684\u503c\u521a\u597d\u5728\u6ee1\u8db3$sz[l[pst]] + 1 <= k <= sz[l[pst]] + len[pst]$\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u4e0a\u9762\u63d0\u5230\u8fc7\u7684$L+1<=k<=L+(r-l+1)$\n> \u4e0d\u7136\u7684\u8bdd\u6211\u4eec\u8981\u7684\u6743\u503c\u5e94\u8be5\u5728\u540e\u9762\uff0c\u53bb\u53f3\u8fb9\u4e8c\u5206\uff0c\u8bb0\u5f97\u8981\u51cf\u6389\u6392\u540d\n> \u5176\u5b9e\u8fd9\u4e2a\u64cd\u4f5c\u662f\u53ef\u4ee5\u62bd\u8c61\u6210\u4e00\u4e2a\u5e8f\u5217\u4e0a\u7684\u4e8c\u5206\u7684\uff0c\u5982\u679c\u4e0d\u660e\u767d\u53ef\u4ee5\u5229\u7528\u4e0a\u9762L\u7684\u542b\u4e49\uff08\u5373\u5728\u5f53\u524d\u533a\u95f4\u4e4b\u524d\u7684\u6240\u6709\u533a\u95f4\u957f\u5ea6\u548c\uff09\u5728\u7eb8\u4e0a\u6a21\u62df\u4e00\u4e0b\u3002\n\n------------\n## \u5e94\u7528\n> \u5199\u597d\u4e86\u4e0a\u9762\u7684\u64cd\u4f5c\u4ee5\u540e\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u5229\u7528\u64cd\u4f5c\u6a21\u62df\u9898\u76ee\u7684\u63cf\u8ff0\u4e86\uff1a\n\n>\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0cmi\u662f\u533a\u95f4\u7684\u5de6\u7aef\uff0cmx\u662f\u533a\u95f4\u7684\u53f3\u7aef\u3002\u6211\u628aFHQTreap\u5199\u5728\u4e86\u7ed3\u6784\u4f53\u91cc\uff0c\u547d\u540d\u4e3aFT\u3002New\u662f\u65b0\u5efa\u4e00\u4e2a\u70b9\uff0c\n\n### \u5bf9\u4e8e$y!=m$\uff1a\n\n```cpp\n\tif (y != m)\n\t{\n\t\tFT.Split(root[x], a, c, y - 1);//\u628a\u7b2cx\u884c\u7684\u5e8f\u5217\u5206\u6210a\u548cc\u4e24\u6bb5\uff0c\u4f7f\u5f97\u6211\u4eec\u8981\u7684\u533a\u95f4\u521a\u597d\u5728c\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n\t\tFT.Split(c, b, c, len[FT.Kth(c, 1)]);//\u6211\u4eec\u4e0d\u77e5\u9053\u8981\u7684\u533a\u95f4\u5927\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u62ffKth\u67e5\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u518d\u628ac\u5206\u6210b\u548cc\u4e24\u7aef\uff0c\u8fd9\u4e2a\u65f6\u5019b\u521a\u597d\u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\u8868\u793a\u6211\u4eec\u8981\u7684\u533a\u95f4\n\t\tpst = y - sz[a], ans = mi[b] + pst - 1;//\u6211\u4eec\u7528pst\u7b97\u4e00\u4e0b\u6211\u4eec\u5728b\u8fd9\u4e2a\u533a\u95f4\u5185\u8981\u7684\u662f\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u663e\u7136\u662fy-L\uff0c\u90a3\u4e48ans\u8bb0\u5f55\u4e00\u4e0b\u6211\u4eec\u7684\u7b54\u6848\n\n\t\t//\u4e0b\u9762\u8981\u5f00\u59cb\u628ab\u5206\u6210\u4e24\u4e2a\u533a\u95f4[mi[b],ans-1]\u548c[ans+1,mx[b]]\n\t\troot[x] = a;//\u4e0a\u9762\u7684a\u6bb5\u6211\u4eec\u80af\u5b9a\u662f\u8981\u7684\uff0c\u5148\u8d4b\u503c\n        //\u56e0\u4e3a\u8003\u8651\u5230\u7a7a\u533a\u95f4\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u8981\u5224\u65ad\u4e00\u4e0b\n\t\tif (mi[b] <= ans - 1)\n\t\t\troot[x] = FT.Merge(root[x], FT.New(mi[b], ans - 1));\n\t\tif (ans + 1 <= mx[b])\n\t\t\troot[x] = FT.Merge(root[x], FT.New(ans + 1, mx[b]));\n        //c\u6bb5\u6211\u4eec\u80af\u5b9a\u662f\u8981\u7684\uff0c\u5408\u5e76\n\t\troot[x] = FT.Merge(root[x], c);\n\t}\n```\n\n> \u8fd9\u6837\u6211\u4eec\u5c31\u5f88\u8f7b\u677e\u7684\u53d6\u51fa\u4e86\u8fd9\u4e2a\u7f16\u53f7ans\uff0c\u56e0\u4e3a\u4e0d\u7ba1\u600e\u4e48\u6837\u90fd\u8981\u6d89\u53ca\u6700\u540e\u4e00\u5217\u7684\u64cd\u4f5c\uff0c\u90a3\u6211\u4eec\u5c31\u4e0d\u5206\u5f00\u8ba8\u8bba\u4e86\uff0c\u540e\u7eed\u64cd\u4f5c\uff1a\n\n```cpp\n\tFT.Split(root[0], a, c, x - 1);//\u50cf\u4e0a\u9762\u4e00\u6837\uff0c\u6211\u4eec\u628a\u6700\u540e\u4e00\u5217\u5206\u4e00\u4e0b\n\tFT.Split(c, b, c, 1);//\u56e0\u4e3a\u6700\u540e\u4e00\u5217\u4e0d\u53ef\u80fd\u662f\u533a\u95f4\uff0c\u76f4\u63a5\u628a\u5de6\u7aef\u5206\u6210\u4e00\u4e2a\u957f\u5ea6\u5373\u53ef\uff0cb\u5373\u662f\u6700\u540e\u4e00\u5217\u7684\u7b2cx\u4e2a\n\n\tif (ans)//\u5982\u679cans\u6709\u503c\uff0c\u90a3\u4e48\u8bf4\u660ey==m\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u63d2\u5165\u6700\u540e\u4e00\u5217\u7684\u662fans\n\t{\n\t\troot[x] = FT.Merge(root[x], b);//\u50cf\u4e0a\u9762\u6240\u8ff0\u7684\uff0c\u628a\u6700\u540e\u4e00\u5217\u7684\u7b2cx\u4e2a\u653e\u5230\u7b2cx\u884c\u7684\u672b\u5c3e\n\t\troot[0] = FT.Merge(FT.Merge(a, c), FT.New(ans, ans));//\u90a3\u4e48\u6700\u540e\u4e00\u5217\u7684\u672b\u5c3e\u5f53\u7136\u662fans\u5566\uff0c\u521b\u9020\u4e00\u4e2a\u65b0\u70b9\u5408\u5e76\u8d77\u6765\n\t}\n\telse//\u5982\u679cans\u6ca1\u6709\u503c\uff0c\u90a3\u51fa\u5217\u7684\u53ea\u6709b\u4e86\uff0c\u5e76\u4e14\u5408\u5e76\u5230\u6700\u540e\u4e00\u5217\u7684\u672b\u5c3e\u4e5f\u662f\u4ed6\n\t{\n\t\tans = mi[b];//\u8bb0\u5f55\u4e00\u4e0b\n\t\troot[0] = FT.Merge(FT.Merge(a, c), b);//\u5408\u5e76\u8d77\u6765\n\t}\n```\n\n> \u8fd9\u6837\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u5bf9\u9898\u76ee\u7684\u6a21\u62df\uff0c\u6bcf\u6b21\u8f93\u51faans\u5373\u53ef\n\n------------\n## \u590d\u6742\u5ea6\u548c\u5b9e\u9645\u8fd0\u884c\u5206\u6790\n\u7406\u8bba:$O(nlogn)$\uff0c\u4f46\u662f\u56e0\u4e3aMerge\u548cSplit\u8fd8\u6709Kth\u90fd\u662f$logn$\u7684\u64cd\u4f5c\uff0c\u800c\u6211\u4eec\u5728\u4e00\u6b21\u8be2\u95ee\u5927\u6982\u8c03\u7528\u4e8610\u6b21\uff0c\u6240\u4ee5\u5e94\u8be5\u8fd8\u6709\u4e00\u4e2a10\u7684\u5e38\u6570\uff0c\u90a3\u4e48\u8fd0\u884c\u65f6\u95f4\u5c31\u6bd4\u8f83\u957f\u4e86\uff08\u4e0d\u5f00O2\uff09\uff1a\n\nAccepted  100\n\n\u7528\u65f6: 8215ms / \u5185\u5b58: 79032KB\n\n\u6700\u5927\u70b9\u7528\u65f6: 1594ms\n\n\u7a7a\u95f4\u6bcf\u4e2a\u6570\u7ec4\u5f00\u52306e5+5\u5e94\u8be5\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a\u672c\u8eab\u67093e5+1\u4e2a\u533a\u95f4\uff0c\u81f3\u591a\u67093e5\u4e2a\u8be2\u95ee\uff0c\u4e5f\u5c31\u662f\u81f3\u591a\u6dfb\u52a03e5\u4e2a\u70b9\u3002\n\n------------\n## \u5b8c\u6574CODE\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\ntypedef long long LL;\nconst LL MAXN = 1e7 + 5;\n\nLL l[MAXN], r[MAXN], len[MAXN], heap[MAXN], sz[MAXN];\nLL root[MAXN], tot;\nLL mi[MAXN], mx[MAXN];\nstruct FHQTreap\n{\n\tinline void PushUp(LL pst)\n\t{\n\t\tsz[pst] = sz[l[pst]] + sz[r[pst]] + len[pst];\n\n\t\treturn;\n\t}\n\n\tinline LL New(LL x, LL y)\n\t{\n\t\theap[++tot] = rand(), mi[tot] = x, mx[tot] = y, len[tot] = sz[tot] = y - x + 1;\n\n\t\treturn tot;\n\t}\n\n\tinline LL Merge(LL x, LL y)\n\t{\n\t\tif (!x || !y)\n\t\t\treturn x + y;\n\n\t\tif (heap[x] < heap[y])\n\t\t\treturn r[x] = Merge(r[x], y), PushUp(x), x;\n\t\telse\n\t\t\treturn l[y] = Merge(x, l[y]), PushUp(y), y;\n\t}\n\n\tinline void Split(LL pst, LL &x, LL &y, LL key)\n\t{\n\t\tif (!pst)\n\t\t\tx = y = 0;\n\t\telse if (sz[l[pst]] + len[pst] <= key)\n\t\t\tx = pst, Split(r[pst], r[x], y, key - sz[l[pst]] - len[pst]), PushUp(pst);\n\t\telse\n\t\t\ty = pst, Split(l[pst], x, l[y], key), PushUp(pst);\n\n\t\treturn;\n\t}\n\n\tinline LL Kth(LL pst, LL k)\n\t{\n\t\tif (k <= sz[l[pst]])\n\t\t\treturn Kth(l[pst], k);\n\t\tif (sz[l[pst]] + 1 <= k && k <= sz[l[pst]] + len[pst])\n\t\t\treturn pst;\n\t\treturn Kth(r[pst], k - sz[l[pst]] - len[pst]);\n\t}\n\n} FT;\n\nLL n, m, q;\n\ninline void PreWork(void)\n{\n\tfor (LL i = 1; i <= n; i++)\n\t\troot[i] = FT.New(1 + (i - 1) * m, m - 1 + (i - 1) * m);\n\tfor (LL i = 1; i <= n; i++)\n\t\troot[0] = FT.Merge(root[0], FT.New(i * m, i * m));\n\n\treturn;\n}\n\ninline LL Update(LL x, LL y)\n{\n\tLL a, b, c, pst;\n\tLL ans = 0;\n\n\tif (y != m)\n\t{\n\t\tFT.Split(root[x], a, c, y - 1);\n\t\tFT.Split(c, b, c, len[FT.Kth(c, 1)]);\n\t\tpst = y - sz[a], ans = mi[b] + pst - 1;\n\n\t\troot[x] = a;\n\t\tif (mi[b] <= ans - 1)\n\t\t\troot[x] = FT.Merge(root[x], FT.New(mi[b], ans - 1));\n\t\tif (ans + 1 <= mx[b])\n\t\t\troot[x] = FT.Merge(root[x], FT.New(ans + 1, mx[b]));\n\t\troot[x] = FT.Merge(root[x], c);\n\t}\n\n\tFT.Split(root[0], a, c, x - 1);\n\tFT.Split(c, b, c, 1);\n\n\tif (ans)\n\t{\n\t\troot[x] = FT.Merge(root[x], b);\n\t\troot[0] = FT.Merge(FT.Merge(a, c), FT.New(ans, ans));\n\t}\n\telse\n\t{\n\t\tans = mi[b];\n\t\troot[0] = FT.Merge(FT.Merge(a, c), b);\n\t}\n\n\treturn ans;\n}\n\nsigned main(void)\n{\n\tscanf(\"%lld %lld %lld\", &n, &m, &q);\n\n\tPreWork();\n\n\tfor (LL i = 1, x, y; i <= q; i++)\n\t{\n\t\tscanf(\"%lld %lld\", &x, &y);\n\t\tprintf(\"%lld\\n\", Update(x, y));\n\t}\n\n\treturn 0;\n}\n```\n",
        "postTime": 1540350870,
        "uid": 29354,
        "name": "CodyTheWolf",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u7bc750\u5206\u66b4\u529b\u9898\u89e3\uff01\uff01\uff01\u60f3\u8981AC\u7684\u5927\u4f6c\u8bf7\u8df3\u8fc7~~~\n\n\u76f8\u4fe1\u5927\u90e8\u5206\u4eba\u5728\u8003\u573a\u4e0a\u662f\u4e0d\u4f1a\u8003\u8651Splay\u7684......\u6bd5\u7adf\u8fd9\u4e5f\u4e0d\u662fnoip\u8003\u70b9\uff01\n\n\u4f46\u662f\u8fd9\u9053\u9898\u7684\u66b4\u529b\u5206\u8db3\u8db3\u670950\u5206\uff01\uff01\u62ff\u5230\u8fd950\u5206\u4e5f\u662f\u5f88\u503c\u5f97\u7684\uff01\n\n\u56e0\u4e3a50%\u7684\u65f6\u5019\uff0cq\u662f\u5c0f\u4e8e\u7b49\u4e8e500\u7684\uff0c\u4f46\u662f\u5f88\u91cd\u8981\u7684\u4e00\u70b9\uff0c**\u6bcf\u4e00\u6b21\u51fa\u961f\u53ea\u4f1a\u5f71\u54cd\u6240\u5728\u7684\u884c\u548c\u6700\u540e\u4e00\u5217**\uff0c\u4e5f\u5c31\u662f\u8bf4\u6700\u574f\u7684\u60c5\u51b5\u53ea\u9700\u8981\u7ef4\u62a4500\u884c\u548c\u6700\u540e\u4e00\u5217\u5373\u53ef\uff01\uff01\uff01\n\nSTL\uff1aunique\u662f\u628a\u6570\u7ec4\u53bb\u91cd\u540e\uff0c\u8fd4\u56de\u65b0\u7684\u6570\u7ec4\u957f\u5ea6\uff01\u5177\u4f53\u81ea\u884c\u767e\u5ea6\u3002\n\n\u4ee5\u4e0b\u5177\u4f53\u770b50\u5206\u4ee3\u7801\u5427~~~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define ll long long\nusing namespace std;\ninline int r()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nstruct node\n{\n    int x,y;\n}e[300001];\nint n,m,q,tot;\nll last[300001],h[300001],pos[501][50001];\nll ans;\nint main()\n{\n    n=r();m=r();q=r();\n    for(int i=1;i<=q;i++){\n        e[i].x=r();\n        e[i].y=r();\n        h[i]=e[i].x;//h\u6570\u7ec4\u5b58\u7684\u662f\u6bcf\u4e00\u6b21\u51fa\u961f\u4eba\u7684\u6a2a\u5750\u6807\n    }\n    for(int i=1;i<=n;i++){\n        last[i]=last[i-1]+m;//last\u7ef4\u62a4\u6700\u540e\u4e00\u5217\u7684\u7f16\u53f7\uff01\n    }\n    sort(h+1,h+q+1);//\u53bb\u91cd\u4e4b\u524d\u8981\u6392\u5e8f\n    tot=unique(h+1,h+q+1)-h-1;//\u53bb\u91cd\u4e4b\u540e\u539f\u6570\u7ec4\u53ea\u5269\u4e0btot\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4tot\u884c\u5373\u53ef\n    ll t;\n    for(int i=1;i<=tot;i++){\n        t=(ll)(h[i]-1)*m;\n        for(int j=1;j<=m;j++){\n            pos[i][j]=++t;//\u7ed9\u6bcf\u4e00\u884c\u6bcf\u4e00\u5217\u90fd\u6807\u4e0a\u53f7\n        }\n    }\n    int nx;\n    for(int i=1;i<=q;i++){\n        for(int j=1;j<=tot;j++){\n            if(h[j]==e[i].x){//\u5bfb\u627ee[i].x\u5728h\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u5176\u5728\u53bb\u91cd\u540e\u7684\u884c\u6570\n                nx=j;\n                break;\n            }\n        }\n        if(e[i].y==m){//\u5982\u679c\u51fa\u961f\u7684\u8fd9\u4e2a\u4eba\u5728\u6700\u540e\u4e00\u5217\n            ans=last[h[nx]];\n        }\n        else{\n            ans=pos[nx][e[i].y];\n        }\n        printf(\"%lld\\n\",ans);\n        if(e[i].y!=m){//\u5411\u5de6\u770b\u9f50\n            for(int j=e[i].y;j<m-1;j++){\n                pos[nx][j]=pos[nx][j+1];\n            }\n            pos[nx][m-1]=last[h[nx]];\n        }\n        for(int j=h[nx];j<n;++j){\u5411\u524d\u770b\u9f50\n            last[j]=last[j+1];\n        }\n        last[n]=ans;\n    }\n    return 0;\n} \n```\n\n\n",
        "postTime": 1538878808,
        "uid": 55580,
        "name": "LingFengGold",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8[>Here<](https://www.luogu.org/problemnew/show/P3960)\n\n\u8fd9\u9898\u662f[luoguP3285 [SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ](https://www.luogu.org/problemnew/show/P3285)\u7684\u51cf\u5f31\u7248\uff0c\u5148\u505a\u4e86\u65b9\u4f2f\u4f2f\u7684OJ\u518d\u6765\u505a\u8fd9\u9898\u5c31\u5f88\u7b80\u5355\u4e86\u3002\n\n\u8fd9\u9053\u9898\u4e3b\u8981\u96be\u5ea6\u5728\u4e8e\u70b9\u4e0d\u80fd\u5f00\u6ee1\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u52a8\u6001\u5f00\u70b9\u7684\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5bf9\u6bcf\u4e00\u884c\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u5bf9\u7b2cm\u5217\u989d\u5916\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u70b9\u5c31\u53ea\u8981\u4f7f\u5176\u6743\u503c\u5927\u4e8e\u7ebf\u6bb5\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u5c31\u884c\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#define int long long\n\nint root[300001],size[6000001],lson[6000001],rson[6000001],lroot,q,cnt,tem,now[6000001],nn;\nlong long val[6000001],x,y,ans,n,m;\nint min(int a,int b){\n\treturn a<b?a:b;\n}\nint siz(int l,int r,int x){\n\tif(x!=-1)return (l<m)?(min(r,m-1)-l+1):0;\n\telse return(l<=n)?(min(r,n)-l+1):0;\n}\nlong long query(int &root,long long x,int l,int r,int k){\n\tif(!root){\n\t\troot=++cnt,size[root]=siz(l,r,x);\n\t\tif(l==r)\n\t\t\tif(x!=-1)val[root]=(x-1)*m+l;\n\t\t\telse val[root]=l*m;\n\t}\n\tif(l==r){\n\t\ttem=l;\n\t\treturn val[root];\n\t}\n\tint ls=lson[root]?size[lson[root]]:siz(l,(l+r)>>1,x);\n\tif(ls>=k)return query(lson[root],x,l,(l+r)>>1,k);\n\telse return query(rson[root],x,((l+r)>>1)+1,r,k-ls);\n}\nvoid update(int &root,long long x,int l,int r,int e,int ord,int ad){\n\tif(!root)root=++cnt,size[root]=siz(l,r,x);\n\tsize[root]+=ad;\n\tif(l==r){\n\t\tif(ad==1)val[root]=ord;\n\t\telse val[root]=0;\n\t\treturn;\n\t}\n\tif((l+r)>>1>=e)update(lson[root],x,l,(l+r)>>1,e,ord,ad);\n\telse update(rson[root],x,((l+r)>>1)+1,r,e,ord,ad);\n}\n#undef int\nint main(){\n#define int long long\n\tscanf(\"%lld%lld%lld\",&n,&m,&q);\n\tfor(int i=1;i<=q;i++){\n\t\tscanf(\"%lld%lld\",&x,&y);\n\t\tif(y!=m){\n\t\t\tprintf(\"%lld\\n\",ans=query(root[x],x,1,m+q+100,y));\n\t\t\tupdate(root[x],x,1,m+q+100,tem,0,-1);\n\t\t\tupdate(root[x],x,1,m+q+100,++now[x]+m,query(lroot,-1,1,n+q+100,x),1);\n\t\t\tupdate(lroot,-1,1,n+q+100,tem,0,-1);\n\t\t\tupdate(lroot,-1,1,n+q+100,++nn+n,ans,1);\n\t\t}\n\t\telse{\n\t\t\tprintf(\"%lld\\n\",ans=query(lroot,-1,1,n+q+100,x));\n\t\t\tupdate(lroot,-1,1,n+q+100,tem,0,-1);\n\t\t\tupdate(lroot,-1,1,n+q+100,++nn+n,ans,1);\n\t\t}\n\t}\n}\n```",
        "postTime": 1536839987,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP3960 \u5217\u961f"
    },
    {
        "content": "# \u5217\u961f\u8fd9\u9053\u9898\u8fd8\u662f\u5f88\u6709\u610f\u601d\u7684\uff0c\u5341\u5206\u9002\u5408\u7ec3\u4e60\u5e73\u8861\u6811\uff0c\u5bf9\u4e8e\u521a\u5b66\u5e73\u8861\u6811\u7684\u65b0\u624b\u66f4\u662f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u9053\u9898\u9886\u4f1a\u4e00\u4e9b\u57fa\u7840\u7684\u4e1c\u897f\r\n\r\n### \u9996\u5148\u8fd9\u9053\u9898\u7684\u64cd\u4f5c\u5927\u90fd\u9700\u8981\u81ea\u5df1\u624b\u5199\uff0c\u6ca1\u5f97\u677f\u5b50\u5957\uff0c\u800c\u4e14\u5176\u4e2d\u9700\u8981\u5efa\u5f88\u591a\u4e2asplay\uff0c\u4e5f\u662f\u5f88\u6709\u610f\u601d\u7684\r\n\r\n-\r\n\u9996\u5148\u6211\u4eec\u601d\u8003\uff0c\u76f4\u63a5\u5f3a\u884c\u6a21\u62df\u7684\u590d\u6742\u5ea6\u9ad8\u5728\u54ea\u91cc\uff0c\u5176\u5b9e\u4e3b\u8981\u662f\u9ad8\u5728\u884c\u4e0e\u5217\u7684\u5f80\u524d\u8865\u4f4d\u4e0a\uff0c\r\n\r\n\u82e5\u662f\u6bcf\u6b21\u5728\u7b2c\u4e00\u4e2a\u4eba\u64cd\u4f5c\uff0c\u90a3\u4e00\u6b21\u64cd\u4f5c\u5c31\u8981\u52a8n+m\u6b21\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\uff0c\r\n\r\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u94fe\u8868\uff0c\u5c06\u4e4b\u540e\u7684\u5143\u7d20\u76f4\u63a5\u63a5\u4e0a\u6765\uff0c\u8fd9\u53ef\u4ee5\u89e3\u51b3\u79fb\u52a8\u7684\u95ee\u9898\uff0c\r\n\r\n\u4f46\u968f\u4e4b\u800c\u6765\u7684\uff0c\u627e\u5230\u6211\u4eec\u8981\u627e\u7684\u5143\u7d20\u53d8\u5f97\u56f0\u96be\u4e86\uff0c\u8981\u4ece\u94fe\u8868\u4e00\u5f00\u59cb\u5f80\u540e\u627em\u4e2a\uff0c\r\n\r\n\u4e8e\u662f\u8f6c\u5ff5\u4e00\u60f3\uff0c\u4ec0\u4e48\u4e1c\u897f\u53ef\u4ee5\u5c06\u5143\u7d20\u94fe\u5f0f\u8fde\u63a5\u8d77\u6765\uff0c\u7136\u540e\u6bd4\u8f83\u65b9\u4fbf\u5730\u627e\u5230\u7b2cm\u4e2a\u5462\uff1f\r\n\r\n\r\n## \u4e8e\u662f\u6211\u4eec\u60f3\u5230\u7528\u5e73\u8861\u6811\u6765\u5b9e\u73b0\r\n\r\n\r\n\u90a3\u4e48\u6211\u4eec\u5bf9\u6bcf\u4e00\u884c\u548c\u6700\u540e\u4e00\u5217\u5efa\u51fa\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u4e3b\u8981\u662f\u8981\u7406\u89e3**\u627e\u5230\u7b2ck\u4e2a\u4eba\u5176\u5b9e\u662f\u627e\u5230\u6811\u4e2d\u7684\u7b2ck\u4e2a\uff0c\u800c\u8fd9\u4e2a\u662f\u901a\u8fc7\u6811\u7684size\u627e\u4e5f\u5c31\u7b49\u540c\u4e8e\u627e\u7b2ck\u5927\u7684\u8fc7\u7a0b**\u2014\u2014\u6240\u4ee5**\u4e0d\u8981**\u4ee5\u4e3a\u8fd9\u662f\u627e\u6570\u503c\u7684\u7b2ck\u5927(\u5177\u4f53\u7684\u8fc7\u7a0b\u5728main\u51fd\u6570\u4e2d\u6709\u6ce8\u91ca)\r\n\r\n\r\n\r\n\u4e8e\u662f\u95ee\u9898\u8fce\u5203\u800c\u89e3\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u7684\u5b8c\u6210\u64cd\u4f5c\u4e86\uff0c\u4f46\u662f\u8fd8\u6709\u4e00\u70b9\u2014\u2014>\r\n\r\n### \u8fd9\u6570\u636e\u8303\u56f4\u592a\u80a5\u4e86\uff0c\u786c\u5f00\u6839\u672c\u5f00\u4e0d\u4e0b\r\n\r\n\r\n\u90a3\u4e48\u6211\u4eec\u628a\u5e73\u8861\u6811\u91cc\u7684\u70b9\u4ee3\u8868\u4e00\u4e2a\u533a\u95f4\uff0c\u5bf9\u533a\u95f4\u5185\u8fdb\u884c\u64cd\u4f5c\u5c31\u5c06\u5176\u5206\u79bb\u6210\u4e09\u6bb5(\u5176\u5b9e\u662f\u4e24\u6bb5\u2014\u2014\u56e0\u4e3a\u5206\u51fa\u6765\u7684\u90a3\u4e00\u4e2a\u76f4\u63a5\u88ab\u6211\u5220\u6389\u4e86)\uff0c\u8fd9\u6837\u5c31\u5b9e\u65f6\u8c03\u6574\u7a7a\u95f4\u7684\u6d88\u8017\u4e8e\u662f\u4e0d\u4f1a\u7206\u4e86\r\n\r\n\r\n####  \u81f3\u4e8e\u5177\u4f53\u7684\u64cd\u4f5c\u4ec0\u4e48\u7684\uff0c\u60f3\u600e\u4e48\u5199\u5c31\u600e\u4e48\u5199\u5427\uff0c\u76f8\u4fe1\u81ea\u5df1\u5c31\u597d\u54c8(\u6211\u81ea\u5df1\u5199\u7684\u5220\u9664\u5c31\u662f\u76f4\u63a5\u628a\u4e00\u4e2a\u70b9\u5728\u539f\u4f4d\u7f6e\u62c6\u4e86\uff0c \u4e8e\u662f\u88ab\u5927\u4f6cD\u4e86\uff0c\u4f46\u5b9e\u9645\u4e0a\u6ca1\u6709\u4efb\u4f55\u95ee\u9898...)\r\n\r\n``` cpp\r\n#include<cstdio>\r\n#define getchar() (S==T&&(T=(S=BB)+fread(BB,1,1<<15,stdin),S==T)?EOF:*S++)\r\n#define ri register int\r\n#define inf 1047483647\r\n#define maxn 300005\r\n#define fa(x)   p[x].fa\r\n#define lc(x)   p[x].ch[0]\r\n#define rc(x)   p[x].ch[1]\r\n#define si(x)   p[x].size\r\n#define l(x)  p[x].l\r\n#define r(x)  p[x].r\r\n#define ll long long\r\nchar BB[1<<15],*S=BB,*T=BB;\r\nusing namespace std;\r\nint n,m,tot;\r\ninline int read() \r\n{\r\n    int num=0; char ch=0;\r\n    while(ch<'0'||ch>'9') ch=getchar();\r\n    while(ch>='0'&&ch<='9') num=(num<<3)+(num<<1)+ch-'0',ch=getchar();\r\n    return num;\r\n}\r\nstruct A{\r\n    int ch[2],fa;ll size,l,r;\r\n}p[10000005];\r\nstruct Splay_Tree//\u6bcf\u884c\u4e0e\u6700\u540e\u4e00\u5217\u90fd\u662fsplay\r\n{       int root;\r\ninline int newdian(ll l,ll r)\r\n{\r\n    p[++tot].l=l;p[tot].r=r;\r\n    si(tot)=r-l+1;\r\n    return tot;\r\n}\r\ninline void update(int x)\r\n{\r\n    si(x)=si(lc(x))+si(rc(x))+r(x)-l(x)+1;\r\n}\r\ninline void rotate(int x)\r\n{\r\n    int f=fa(x);int gf=fa(f),k=(x==rc(f));\r\n    p[gf].ch[rc(gf)==f]=x;fa(x)=gf;\r\n    p[f].ch[k]=p[x].ch[k^1];fa(p[x].ch[k^1])=f;\r\n    p[x].ch[k^1]=f,fa(f)=x;\r\n    update(f);update(x);\r\n}\r\ninline void splay(int x,int goal)\r\n{\r\n    if(x==goal) return;\r\n    while(fa(x)!=goal)\r\n    {\r\n        int f=fa(x),gf=fa(f);\r\n        if(gf!=goal)    (f==lc(gf))^(x==lc(f))?rotate(x):rotate(f);\r\n        rotate(x);\r\n    }\r\n    if(goal==0)  root=x;\r\n}\r\ninline void insert(ll x)\r\n{\r\n    int u=root;\r\n    while(rc(u))   u=rc(u);\r\n    newdian(x,x);fa(tot)=u;rc(u)=tot;splay(tot,0);\r\n}\r\ninline ll split(int k,ll x)//\u5206\u79bb\u6216\u8005\u5220\u6389k\u53f7\u70b9\r\n{   ll s=l(k),t=r(k);//x\u4e3a\u4f4d\u7f6e\r\n    if(x!=s&&x!=t)    \r\n    {\r\n        if(s+1<t){  int b=newdian(x+1,t);r(k)=x-1;\r\n            rc(b)=rc(k);rc(k)=b;fa(b)=k;update(b);update(k);\r\n            splay(b,0);}\r\n        else{//\u5220\u5355\u70b9\r\n            l(k)++;splay(k,0);\r\n        }\r\n    }\r\n    else    {\r\n        if(x==t)    t=t-1;\r\n        else s=s+1;\r\n        si(k)=t-s+1,l(k)=s,r(k)=t;\r\n        splay(k,0);\r\n    } \r\n    return x;\r\n}\r\ninline ll rank(int k)//\u6839\u636esize\u627e\u7b2ck\u5927\u5f97\u5230\u6570\u5b57\u5e76\u5220\u9664\u6b64\u70b9\r\n{\r\n    int u=root;\r\n    while(1)\r\n    {\r\n        if (si(lc(u))>=k)   u=lc(u);\r\n        else\r\n        {\r\n            k-=si(lc(u));\r\n            if(k<=r(u)-l(u)+1)//\u73b0\u5728\u6392\u7b2ck\u7684\u6570\u4e8e\u8fd9\u6bb5\u533a\u95f4\u4e2d \r\n                return split(u,k+l(u)-1);\r\n            k=k-r(u)+l(u)-1,u=rc(u);\r\n        }\r\n    }\r\n}\r\ninline void init(ll l,ll r)\r\n{\r\n    root=newdian(l,r);\r\n}\r\ninline int build(int l, int r,int ff) \r\n{\r\n    if(l>r) return 0;\r\n    int mid=(l+r)>>1;\r\n    int now=newdian(1ll*m*mid,1ll*m*mid);\r\n    fa(now)=ff;\r\n    lc(now)=build(l,mid-1,now);\r\n    rc(now)=build(mid+1,r,now);\r\n    update(now); return now;\r\n}\r\n}SBT[maxn];\r\nsigned main()\r\n{\r\n    int q,x,y;ll t,u;\r\n    n=read();m=read();q=read();\r\n    for(ri i=1;i<=n;++i)    SBT[i].init((ll)(i-1)*m+1,(ll)i*m-1);\r\n    SBT[0].root=SBT[0].build(1,n,0);//\u5efa\u51fa\u4e00\u68f5\u5b8c\u7f8e\u7684splay\r\n    for(ri i=1;i<=q;++i)\r\n    {\r\n        x=read();y=read();\r\n        if(y==m)\r\n        {    \r\n            printf(\"%lld\\n\", u=SBT[0].rank(x));//\u5728\u6700\u540e\u4e00\u5217\u4e2d\u5220\u9664\r\n            SBT[0].insert(u);//\u653e\u5230\u6700\u540e\u9762\r\n        }\r\n        else{\r\n            printf(\"%lld\\n\",u=SBT[x].rank(y));//\u5728\u6b64\u884c\u4e2d\u5220\u9664\u5e76\u5f97\u5230\u8be5\u70b9\u6570\u5b57\r\n            t=SBT[0].rank(x);//\u5f97\u5230\u8be5\u884c\u6700\u540e\u4e00\u5217\u7684\u6570\u5b57\u5e76\u5220\u53bb\r\n            SBT[x].insert(t);//\u5c06\u5176\u653e\u5165\u884c\u4e2d\r\n            SBT[0].insert(u);//\u5c06\u5220\u6389\u7684\u5143\u7d20\u653e\u5165\u6700\u540e\u4e00\u884c\u6700\u540e\u4e00\u5217\r\n        } \r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\n```",
        "postTime": 1517021670,
        "uid": 45610,
        "name": "lzl123",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "## \u542c\u8bf4\u6b63\u89e3\u662fBIT,\u4f46\u662f\u6211\u4e5f\u4e0d\u4f1a2333. \u4e8e\u662f\u6709\u4e86\u5982\u4e0b\u641e\u4e8b\u505a\u6cd5\u3002\u3002(\u4e8c\u7ef4\u5e8f\u5217\u6298\u817e\u95ee\u9898)\n\n-> \u6d4b\u8bd5\u70b91-6\uff1a\u5e73\u65b9\u7ea7\n\n-> \u6d4b\u8bd5\u70b97-10\uff1a\u66b4\u529b+\u7a7a\u95f4\u4f18\u5316\n\n-> \u6d4b\u8bd5\u70b911-16\uff1a1\u7ef4\u95ee\u9898\n\n-> \u6d4b\u8bd5\u70b917-20\uff1anlogn+\u6bd2\u7624\u5f0f\u5361\u5e38\n\n# Solution\n\n-> 1.\u66b4\u529b\u51fa\u5947\u8ff9\uff01---\u76f4\u63a5\u4e8c\u7ef4\u6570\u7ec4\u6a21\u62df,O(q(n+m))\u65f6\u95f4\uff0cO(nm)\u7a7a\u95f4\u3002\uff0830pts\uff09\n\n-> 2.\u79bb\u6563\u5316\u4e00\u4e0b\uff1f\u5176\u5b9e\u53ea\u6709q\u884c+1\u5217\u53d7\u5f71\u54cd\uff0c\u7a7a\u95f4\u53d8\u6210\u4e86O(qm+n).(50pts)\n\n## -------\u81f3\u6b64\uff0c50\u5206\u6709\u4e86,\u4e0d\u59a8\u987a\u4fbf\u518d\u6c34\u6389\u4e00\u7ef4\u95ee\u989830\u5206\uff1f\n\n-> 3.\u4e00\u7ef4\u95ee\u9898(+30pts)\n\n\u53ea\u632a\u7b2c1\u884c(x=1\u561b)->\u53ea\u6709\u7b2c1\u884c\uff0c\u7b2c1\u5217\u53d7\u5f71\u54cd\u3002\u5176\u5b9e\u5c31\u662f\u4e00\u7ef4\u3002\u3002\u561b\uff0c\u5176\u5b9e\u662f\u6d17\u724c\uff1f\uff08\u597d\uff01\uff09\n\n\u6bcf\u6b21\u632a\u4e00\u5f20\u724c\u5230\u5c3e\u90e8\uff0c\u6c42\u6700\u7ec8\u72b6\u6001\uff1a\u5047\u5220+BIT(\u4e8c\u5206\u67e5\u627e\u524d\u7f00\u548c).\n\n## \u6b63\u89e3\uff08\uff1f\uff09\n\n-> \u7531\u4e8e\u65e0\u6cd5\u79bb\u7ebf\u3002\u3002\u6240\u4ee5O(q)\u5fc5\u7136\u6709\u3002\u5269\u4e0b\u7684\u53ea\u80fdO(logn)\uff0c\u90a3\u4e48\u5c06\u6bcf\u884c+\u6700\u540e\u4e00\u5217\u770b\u4f5cn+1\u4e2a\u4e00\u4f4d\u5e8f\u5217\u3002\n\n-> \u6bcf\u4e2a\u5e8f\u5217\u4e0a\u5179\u78c13\u4e2a\u64cd\u4f5c\uff1a\u70b9\u5220\u9664\uff0c\u5c3e\u90e8\u70b9\u63d2\u5165\u548c\u67e5\u627e\u7b2ck\u4e2a\u6570\u3002\n\n-> \u6bcf\u4e2a\u5e8f\u5217\u5efa\u4e00\u4e2aBST,\u4fdd\u6301\u4e2d\u5e8f\u904d\u5386\u4e3a\u5b9e\u9645\u987a\u5e8f\u3002\n\n-> \u65f6\u95f4\u590d\u6742\u5ea6O(qlog(n+m))\n\n-> O(nm) (\u5443\u3002\u3002\u3002\u7ffb\u8f66\u4e86\uff1f)\n\n## \u53ef\u4ee5\u5f00\u59cb\u641e\u4e8b\u4e86\n\n-> \u79bb\u6563\u5316\u7684\u601d\u60f3\uff1a \u6709\u5f88\u591a\u683c\u5b50\u90fd\u662f\u6c38\u8fdc\u76f8\u90bbder,\u6c38\u8fdc\u4e0d\u4f1a\u62c6\u6563\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u634f\u5728\u4e00\u8d77\u4f5c\u4e3a\u4e00\u4e2a\u70b9\u4fdd\u5b58\u3002\n\n-> \u5bf9\u4e00\u6b21\u64cd\u4f5c\u843d\u5728\u67d0\u4e00\u6bb5\u4e2d\u65f6\uff0c\u9700\u8981\u5206\u62103\u6bb5\uff0c\u53731\u6b21\u5220\u9664\uff0c3\u6b21\u63d2\u5165\uff1b\u603b\u5171\u81f3\u591aq\u6b21\u5206\u88c2\u3002\n\n\u603b\u7ed3\u70b9\u6570:O(n+3q)\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(qlogn) \u7a7a\u95f4O(n+q)\n\n(\u597d\uff01)\n\n## \u5148\u6765\u70b9\u8f85\u52a9\u51fd\u6570\uff1b\n\n```cpp\nll n,m,q,tot,l[N*6],r[N*6],rt[N],ch[N*6][2],c[N*6],s[N*6];\n\nll newNode(ll L, ll R) {\n    ++tot; s[tot]=(r[tot]=R)-(l[tot]=L)+(c[tot]=1);\n    return tot;\n}//\u65b0\u5efa\u5b50\u8282\u70b9\n\nvoid maintain(ll x){\n    s[x]=s[ch[x][0]]+s[ch[x][1]]+(r[x]-l[x]+1)*c[x];\n}//\u91cd\u7b97\u5b50\u6811\u548c\n```\n\np.s: ch=\u5de6\u53f3\u513f\u5b50\u8282\u70b9\u7f16\u53f7\uff0cc=\u91cd\u6570\uff0cs=\u5b50\u6811\u4e3a\u603b\u6570\u5b57\u4e2a\u6570\u3002rt=\u5404BST\u7684\u6839\u8282\u70b9\u3002\n\n## \u7384\u5b66\uff08\uff1f\uff09BST\u64cd\u4f5c\uff1b\n\n//\u7531\u4e8e\u672c\u849f\u84bb\u5b9e\u5728\u662f\u592a\u83dc\u4e86\uff0c\u4e8e\u662f\u6253\u7b97\u968f\u673a\u80e1\u4e71\u65cb\u8f6c\u51edrp\u9632\u6b62\u6811\u9000\u5316\u3002\uff08wtf\uff09\n\n```cpp\nvoid rotate(ll &o,ll d) {\n    ll k=ch[o][d^1];\n    if (k==0) return;\n    ch[o][d^1]=ch[k][d];\n    ch[k][d]=o;\n    maintain(o),maintain(k);\n    o=k;\n}\nvoid pushBack(ll &x,ll L,ll R) { // \u5c3e\u90e8\u63d2\u5165\u65b0\u8282\u70b9[L,R]\n    if (!ch[x][1]) ch[x][1]=newNode(L,R);\n    else pushBack(ch[x][1],L,R);\n    maintain(x);\n    if (rand()&1) rotate(x,0);\n}\nvoid splitNode(ll x,ll k) { // x[l,r]=x[l,l+k-2]+y[l+k,r]\n    if (l[x]==r[x]) c[x]=0; // \u5355\u70b9\u5220\u9664\n    else if (k==1) l[x]++;\n    else if (k==r[x]-l[x]+1) r[x]--;\n    else {\n        if (!ch[x][0]) ch[x][0]=newNode(l[x],l[x]+k-2); // \u8ffd\u52a0\u5de6\u5b50\u6811\n        else pushBack(ch[x][0],l[x],l[x]+k-2); // \u8ffd\u52a0\u5de6\u5b50\u6811\u5c3e\u90e8\n        l[x]=l[x]+k;\n    }\n    maintain(x);\n}\n```\n\n```cpp\nll popKth(ll &x,ll k){ // \u627ek\u5c0f\n    ll ret,d=-1;\n    if (k<=s[ch[x][0]]) ret=popKth(ch[x][0],k),d=0; // \u5728\u5de6\n    else if (k>s[ch[x][0]]+(r[x]-l[x]+1)*c[x]) // \u5728\u53f3\n        ret=popKth(ch[x][1],k-s[ch[x][0]]-(r[x]-l[x]+1)*c[x]),d=1;\n    else k-=s[ch[x][0]],ret=l[x]+k-1,splitNode(x,k);  // \u5206\u88c2\u524d\u4e00\u6bb5\n    maintain(x);\n    if (d>=0 && rand()&1) rotate(x,d^1);\n    return ret;\n}\n```\n\n## \u4e3b\u51fd\u6570\n\n```cpp\nint main() {\n    scanf(\"%lld%lld%lld\",&n,&m,&q);\n    for (ll i=1;i<=n;++i) rt[i]=newNode((i-1)*m+1,i*m-1);\n    rt[0]=newNode(m,m); //\u6700\u540e\u4e00\u5217\u53ea\u80fd\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\n    for (ll i=2;i<=n;++i) pushBack(rt[0],i*m,i*m);\n    for (ll i,j,p;q--;) {\n        scanf(\"%lld%lld\",&i,&j);\n        p=popKth(rt[0],i);\n        pushBack(rt[i],p,p);\n        printf(\"%lld\\n\",p=popKth(rt[i],j));\n        pushBack(rt[0],p,p);\n    }\n    return 0;\n}\n```\n\nOrzOrzOrz, \u6211\u80fdAC\u7d2b\u9898\u4e86\uff1a [AC record](https://www.luogu.org/record/21968239)\n\n\u53cb\u60c5\u63d0\u793a\uff1a\u5982\u679c\u4f60\u5176\u5b83\u4e5f\u60f3\u9760rp\u968f\u673a\u65cb\u8f6cAC\uff0c\u8bb0\u5f97\u5148\u6d17\u628a\u8138\uff0c\u522b\u8ba9\u6811\u9000\u5316\u4e3a\u94fe\u3002",
        "postTime": 1570064639,
        "uid": 91204,
        "name": "Fatalis_Lights",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "# [Noip2017]\u5217\u961f\n\n## \u4e00.\u524d\u8a00\n\n\u200b\t\u54b1\u9ad8\u4e00\u662f\u4e0d\u662f\u4e5f\u8981\u519b\u8bad\u554a\uff0c\u5bb3\u6015 qwq\u2026\u2026[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P3960) \n\n## \u4e8c.\u601d\u8def\n\n\u200b\t\u8fd9\u7bc7\u9898\u89e3\u4f7f\u7528\u7684\u662f\u5e73\u8861\u6811\uff08FHQ\uff09\uff0c\u6811\u72b6\u6570\u7ec4\u4e0d\u4f1a\u5199\u4e5f\u2026\u2026\n\n\u200b\t\u9996\u5148\u901a\u8fc7\u7b80\u5355\u7684 \u6a21\u62df/\u624b\u73a9 \u53ef\u4ee5\u5927\u6982\u7684\u77e5\u9053\uff0c\u5bf9\u4e8e\u4f4d\u7f6e $(x,y)$\uff0c\u79fb\u52a8\u5b83\u4f1a\u5f71\u54cd\u7684\u53ea\u6709 $(x,y+1)$ \u5230 $(x,m)$ \u5168\u90e8\u5de6\u79fb\uff0c\u4ee5\u53ca $(x+1,m)$ \u5230 $(n,m)$ \u5168\u90e8\u4e0a\u79fb\uff0c\u6700\u540e\u5728\u53f3\u4e0b\u89d2\u63d2\u56de\u53bb\u3002\n\n\u200b\t\u89c2\u5bdf\u5230 11~16 \u7684\u6d4b\u8bd5\u70b9\u7ed9\u7684\u662f\u5168\u90e8 $x=1$\uff0c\u4ece\u5c40\u90e8\u5165\u624b\u83b7\u5f97\u7075\u611f\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u7b2c\u4e00\u884c\u548c\u6700\u540e\u4e00\u5217\u5c31\u884c\u3002\u5bf9\u4e8e\u7b2c\u4e00\u884c\uff0c\u64cd\u4f5c\u4e00\u5171\u6709\u4e24\u4e2a\uff1a\u5220\u9664\u7b2c k \u4e2a\u6570\uff0c\u5728\u672b\u5c3e\u63d2\u5165\u4e00\u4e2a\u6570 u\u3002\u5177\u4f53\u7684\u6765\u8bf4\uff0c\u82e5\u662f $(1,i)$ \u79bb\u5f00\uff0c\u90a3\u4e48\u5bf9\u4e8e\u7b2c\u4e00\u884c\u4f1a\u5220\u6389\u7b2c i \u4e2a\u6570\uff0c\u5728\u6700\u540e\u63d2\u5165 $(2,m)$,\u5bf9\u4e8e\u6700\u540e\u4e00\u5217\u4f1a\u5220\u6389\u7b2c 1 \u4e2a\u6570\uff0c\u5728\u672b\u5c3e\u63d2\u5165 $(1,i)$ \n\n\u200b\t\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u51e0\u4e2a\u5171\u540c\u70b9\uff1a\n\n- \u90fd\u662f\u5220\u6389\u5904\u5728\u4f4d\u7f6e k \u7684\u4e00\u4e2a\u6570\n- \u90fd\u662f\u5728\u672b\u5c3e\u63d2\u5165\u4e00\u4e2a\u6570\n\n\u8fd9\u91cc\u82e5\u662f\u9b54\u6539\u4e00\u4e0b\uff0c\u6539\u6210\u5bf9\u4e8e\u884c\u53ea\u7ef4\u62a4 1~m-1 \u5c31\u4f1a\u65b9\u4fbf\u5f88\u591a\u3002\u6b64\u65f6\u540c\u65f6\u5bf9\u7b2c\u4e00\u884c\u4e0e\u6700\u540e\u4e00\u5217\u8fdb\u884c\u7ef4\u62a4\u5c31\u53ef\u4ee5\u4e86\u3002**\u4e0d\u5931\u4e00\u822c\u6027\uff0c\u5c06 1 \u6539\u6210 x \uff0c\u5bf9\u4e8e\u6bcf\u4e00\u884c\u90fd\u7ef4\u62a4\u5c31\u884c\u3002**\n\n\u8fd9\u91cc\u7684\u7ef4\u62a4\u6211\u4eec\u9700\u8981\u7528\u5230\u5e73\u8861\u6811\uff08\u6740\u9e21\u7528\u725b\u5200qwq\uff09\uff0c**\u63a5\u4e0b\u6765\u53ea\u662f\u6309\u6211\u7b28\u62d9\u7684\u60f3\u6cd5\u8bb2\u4e00\u4e0b\u539f\u7406\uff0c\u4e0d\u662f\u771f\u6b63\u7684\u7b97\u6cd5**\uff0c\u6709\u70b9\u5957\u7528\u66ff\u7f6a\u7f8a\u7684\u5efa\u6811\u601d\u60f3\uff0c\u624b\u4e2d\u5df2\u6709\u4e00\u4e2a\u6570\u5217\uff0c\u628a\u4ed6\u62c9\u6210\u4e00\u4e2a\u5e73\u8861\u6811\u2026\u2026\u89c1\u56fe![](https://cdn.luogu.com.cn/upload/image_hosting/uvwmu3y0.png)\n\n\u6b64\u65f6\uff08\u867d\u7136\u4e0d\u600e\u4e48\u50cf\u6811\uff09\uff0c\u4f46\u662f\u901a\u8fc7\u4e2d\u5e8f\u904d\u5386\u662f\u53ef\u4ee5\u5c06\u6574\u4e2a\u6570\u7ec4\u90fd\u627e\u5230\u3002\u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u7ed9\u6bcf\u4e2a\u70b9\u4e00\u4e2a\u968f\u673a\u503c\uff0c\u4f7f\u5f97\u5728\u4e0d\u8fdd\u80cc\u904d\u5386\u987a\u5e8f\u7684\u57fa\u7840\u4e0a\u4ee5\u8fd9\u4e2a\u968f\u673a\u503c\u8fdb\u884c\u65cb\u8f6c\u3002\u89c1\u56fe\u3002![](https://cdn.luogu.com.cn/upload/image_hosting/9yf2og1a.png)\n\n\uff08\u5f69\u8272\u7684\u662f\u968f\u673a\u503c\uff09\u8fd9\u6837\u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u8fd8\u662f\u4e00\u6837\u7684\uff08\u5927\u6982\uff09\u4f46\u662f\u5f88\u6709\u6548\u7684\u5c06\u6811\u7ed9\"\u538b\u6241\"\u4e86\uff0c\u4f7f\u5f97\u6bcf\u6b21\u7684\u67e5\u8be2\u65f6\u95f4\u5927\u5e45\u7f29\u51cf\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a $size$ \u8868\u793a\u5b50\u6811\u5927\u5c0f\uff0c\u5c31\u80fd\u5feb\u901f\u627e\u5230\u7b2c k \u4e2a\u6570\u4e86\u3002\n\n\u200b\t\u7136\u540e\u518d\u8bf4\u5982\u4f55\u57fa\u4e8e FHQ \u6765\u64cd\u4f5c\uff0cFHQ \u7684\u57fa\u64cd merge \u4e0e split \u662f\u91cd\u70b9\uff0c\u4f46\u662f\u4e5f\u4e0d\u96be\uff08\u4e0d\u4f1a\u7684\u5148\u5b66\u4e86\u6765\uff09\u3002merge\u7684\u65f6\u5019\u5c31\u6309\u7167\u968f\u673a\u503cmerge\u5c31\u597d\uff0c\u7ed9\u51fa\u4ee3\u7801\u3002\n\n```c++\nint merge(int x,int y){//\u4ee5 y \u4e3a\u6839\u7684\u5b50\u6811\u8981\u6bd4 x \u540e\u8bbf\u95ee\n\tif(!x||!y)return x+y;\n\tif(rad[x]<rad[y]){//\u6309\u968f\u673a\u503c,\u8fd9\u91cc\u89c4\u5219\u53ef\u4ee5\u968f\u4fbf\u641e\u5176\u5b9ehhhh\u90fd\u53ef\u4ee5A\n\t\tch[x][1]=merge(ch[x][1],y);\n\t\tupdate(x);//\u7ef4\u62a4size\n\t\treturn x;\n\t}\n\telse {\n\t\tch[y][0]=merge(x,ch[y][0]);\n\t\tupdate(y);\n\t\treturn y;\n\t}\n}\n```\n\n\u7136\u540e\u8fd9\u9898\u7684split\u7a0d\u7a0d\u6709\u70b9\u590d\u6742\u2026\u2026\u9996\u5148\u7531\u6570\u636e\u89c4\u6a21\u53ef\u4ee5\u5f97\u51fa\u4e24\u4e2a\u7ed3\u8bba\uff1a\n\n- \u6bcf\u4e2a\u70b9\u90fd\u5f00\uff0c\u7a7a\u95f4\u5f00\u4e0d\u8d77\n- \u7531\u4e8e\u64cd\u4f5c\u6570\u8fdc\u5c0f\u4e8e\u70b9\u6570\uff0c\u4f1a\u6709**\u4e00\u5927\u7247\u662f\u8fde\u7eed\u7684**\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5c06\u8fde\u7eed\u7684\u770b\u4f5c\u662f\u4e00\u4e2a\u70b9\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u7684\u957f\u5ea6\uff08\u603b\u5171\u5305\u62ec\u51e0\u4e2a\u70b9\uff09\uff0c\u4ee5\u53ca\u5f00\u5934\u7684\u503c\uff08\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6240\u6709\u503c\uff09\uff0c\u5f53\u8fd9\u4e2a\u70b9\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\u4f4d\u7f6e\u9700\u8981\u64cd\u4f5c\u65f6\uff0c**\u628a\u8fd9\u4e2a\u70b9\u6495\u5f00\u6210\u8be5\u4f4d\u7f6e\u524d\u4e0e\u540e\u518d\u63d2\u56de\u53bb\u5c31\u884c\u3002**\n\n\u200b\t\u4e8e\u662f split \u8981\u5206\u51fa\u4e09\u68f5\u6811\uff1a\u5728 k \u4f4d\u7f6e\u4e4b\u524d\u7684\uff0c\uff08\u5305\u542b\uff09k \u4f4d\u7f6e\uff08\u53ef\u80fd\u662f\u4e00\u4e2a\u70b9\uff0c\u4e5f\u53ef\u80fd\u662f\u8fde\u7eed\u4e00\u5927\u7247\uff09\uff0ck\u4f4d\u7f6e\u4e4b\u540e\u3002\u7ed9\u51fa\u4ee3\u7801\u3002\n\n```c++\nvoid split(int x,int k,int &a,int &b,int &c){\n\tif(!x)a=b=c=0;\n\telse{\n\t\tif(size[ch[x][0]]>=k)c=x,split(ch[x][0],k,a,b,ch[x][0]);\n        //\u5c31\u5728\u5de6\u5b50\u6811\u91cc\u9762\uff0c\u4e8e\u662f\u8fdb\u5de6\u5b50\u6811\u627e\uff0c\u5f52\u8fd8\u4e00\u4e2a\u53ea\u7559>k\u7684\u90e8\u5206\u7684\u5de6\u5b50\u6811\n\t\telse{\n\t\t\tk-=size[ch[x][0]];//\u76f4\u63a5\u6392\u9664\u5de6\u5b50\u6811\uff0c\u51cf\u53bb\u6d88\u8017\n\t\t\tif(k<=len[x]){//\u6b63\u597d\u5c31\u662f\u8be5\u8282\u70b9\u672c\u8eab\n\t\t\t\tb=x;\n\t\t\t\ta=ch[x][0];\n\t\t\t\tc=ch[x][1];\n\t\t\t\tch[x][0]=ch[x][1]=0;\n\t\t\t}\n\t\t\telse{//\u8fdb\u53f3\u5b50\u6811\u5bfb\u627e\uff0c\u8fd8\u4e00\u4e2a\u53ea\u6709<k \u7684\u53f3\u5b50\u6811\n\t\t\t\ta=x;\n\t\t\t\tk-=len[x];//\u51cf\u53bb\u6d88\u8017\n\t\t\t\tsplit(ch[x][1],k,ch[x][1],b,c);\n\t\t\t}\n\t\t}\n\t\tupdate(x);\n\t}\n}\n```\n\n\u5269\u4e0b\u5c31\u662f\u4e3b\u4f53\u64cd\u4f5c\uff0c\u8981\u6ce8\u610f\u64cd\u4f5c\u7b2c\u4e8c\u7ef4\u4e3a m \u7684\u60c5\u51b5\uff0c\u7279\u5224\u4e00\u4e0b\u3002\u4ee3\u7801\u4f1a\u8be6\u7ec6\u89e3\u91ca\n\n```c++\ninline int add(long long x,int y){\n\tif(!y)return 0;\n\tstart[++tot]=x;\n\tlen[tot]=size[tot]=y;\n\trad[tot]=rand();\n\treturn tot;\n}\ninline void update(int x){\n\tsize[x]=size[ch[x][0]]+size[ch[x][1]]+len[x];\n}\nint main(){\n\tsrand(1415);\n\tn=read();m=read();q=read();\n\tfor(int i=1;i<=n;++i){\n\t\troot[i]=add(1LL*(i-1)*m+1,m-1);//\u76f4\u63a5\u63d2\u5165\u4e00\u884c\n\t\troot[0]=merge(root[0],add(1LL*i*m,1));//\u7ef4\u62a4\u4e00\u4e0b\u6700\u540e\u4e00\u5217\n\t}\n\tfor(int i=1,x,y;i<=q;++i){\n\t\tx=read();y=read();\n\t\tif(y==m){//\u7279\u5224\n\t\t\tint a,b,c;\n\t\t\tsplit(root[0],x,a,b,c);//\u53d6\u51fa\u6765\n\t\t\tprintf(\"%lld\\n\",start[b]);\n\t\t\troot[0]=merge(merge(a,c),b);//\u585e\u5728\u6700\u540e\n\t\t}\n\t\telse{\n\t\t\tint a,b,c;\n\t\t\tsplit(root[0],x,a,b,c);//\u5728\u6700\u540e\u4e00\u5217\u53d6\u51fa\u6765\n\t\t\troot[0]=merge(a,c);//\u5408\u5e76\u4e86\n\t\t\troot[x]=merge(root[x],b);//\u53cd\u624b\u5148\u585e\u8fdb\u53bb\n\t\t\tsplit(root[x],y,a,b,c);//\u53d6\u51fa\u8981\u8f93\u51fa\u7684\u90a3\u4e2a\n\t\t\ty-=size[a];//\u56e0\u4e3a\u6709\u53ef\u80fd\u53d6\u51fa\u6765\u8fde\u7eed\u7684\u4e00\u4e32\uff0c\u9700\u8981\u77e5\u9053\u662f\u8fd9\u4e00\u4e32\u7684\u7b2c\u51e0\u4e2a\n\t\t\tprintf(\"%lld\\n\",start[b]+y-1);//\u8f93\u51fa\u4e86\n\t\t\troot[0]=merge(root[0],add(start[b]+y-1,1));//\u585e\u8fdb\u6700\u540e\u4e00\u5217\u672b\u5c3e\n\t\t\troot[x]=\n\t\t\tmerge(merge(a,merge(add(start[b],y-1),add(start[b]+y,len[b]-y))),c);\n\t\t\t//\u6495\u5f00\u6210\u4e24\u534a\uff0c\u585e\u8fdb\u53bb\n        }\n\t}\n}\n```\n\n",
        "postTime": 1597413135,
        "uid": 68561,
        "name": "clockwhite",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u63d0\u4f9b**\u6307\u9488Splay**\n\n~~\u51fa\u5947\u5730\u6162\u5361\u4e86\u51e0\u6b21\u7ec8\u4e8e\u8fc7\u4e86~~\n\n### \u5982\u4f55\u6784\u9020Splay\n\n\u7528\u5e73\u8861\u6811\u6a21\u62df\u6392\u961f\u8fc7\u7a0b\uff0c\u6709\u4e9b\u9898\u89e3\u8bb2\u7684\u4e0d\u662f\u5f88\u660e\u767d\uff0c\u6211\u89c9\u5f97\u4e00\u697c\u62c6\u70b9\u6709\u70b9\u7e41\u7410\uff0c\uff0c\n\nN\u00d7M max=9*10^10 \u9700\u8981\u5f00long long  \u5e76\u4e14\u5f3a\u884c\u5b58\u8fd9\u4e48\u591a\u70b9\u662f\u5b58\u4e0d\u4e0b\u7684\n\nSplay\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u4ee3\u8868\u4e86\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4[l,r]\uff0c\u4ee3\u8868\u7740l,l+1,l+2,\u2026,r-1,r\u7684\u8fde\u7eed\u6240\u6709\u6570\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u884c\u90fd\u5efa\u4e00\u68f5Splay,\u7b2ci\u884c\u5bf9\u5e94\u7b2ci\u68f5Splay\uff0c\u7279\u6b8a\u5730\uff0c\u8bbe\u7f6e\u7b2c0\u68f5Splay\uff0c\u7528\u4e8e\u7ef4\u62a4\u6700\u540e\u4e00\u5217\u7684\u4fe1\u606f\uff0c\u7b2c1\u5230\u7b2cn\u68f5Splay\u7684\u521d\u59cb\u72b6\u6001\u53ea\u6709\u4e00\u4e2a\u8282\u70b9[(i-1)*m+1,i*m-1]\uff0c\u7b2c0\u68f5Splay\u521d\u59cb\u72b6\u6001\u662fm,2m,3m,\u2026,n*m (\u4ee5\u4e0b\u7b80\u79f0T[0],T[i])\n\n### \u79bb\u961f\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u7684\u79bb\u961f\u64cd\u4f5c\uff0c\u7b2cx\u884c\u7b2cy\u5217\u7684\u540c\u5b66\u79bb\u961f\uff1a\n\n\u9996\u5148\u53d6\u51fa(x,y)\n\n\u5f52\u7eb3\uff1a**\u79bb\u5f00**\uff1a\u5f39\u51faT[x]\u7684\u7b2cy\u4e2a\u6570\uff0c\u5e76\u8bb0\u5f55\u6210ans\u8f93\u51fa\n\n\u4e4b\u540e\u5411\u5de6\u770b\u9f50\uff0c\u90a3\u4e48(x,m)\u5c31\u79fb\u52a8\u5230\u4e86(x,m-1)\n\n\u5f52\u7eb3\uff1a**\u5411\u5de6\u770b\u9f50**\uff1a\u628aT[0]\u7684\u7b2cx\u4e2a\u6570\u53d6\u51fa\uff0c\u63d2\u5165T[x]\u7684\u6700\u540e\n\n\u7531\u4e8e\u662f\u5e73\u8861\u6811\uff0c\u6b64\u65f6\u5df2\u7ecf\u5411\u524d\u770b\u9f50\uff0c\u628a\u4e4b\u524d\u53d6\u51fa\u7684(x,y)\u653e\u5230(n,m)\n\n\u5f52\u7eb3\uff1a**\u5f52\u961f**\uff1a\u628aans\u63d2\u5165\u5230T[0]\u7684\u6700\u540e\n\n### \u5f39\u51fa\u7b2ck\u4f4d\n\n\u4e00\u68f5Splay\u662f\u7531\u4f17\u591a\u5f62\u5982[l,r]\u7684\u8282\u70b9\u7ec4\u6210\u7684\uff0c\u90a3\u4e48\u5982\u4f55\u627e\u5230\u8be5\u68f5Splay\u7684**\u7b2ck\u4e2a\u6570**\u5462(\u6ce8\u610f\u533a\u522b\u7b2ck\u4e2a\u8282\u70b9)\n\n\u6b64\u65f6\u6211\u4eec\u7684size\u5e76\u4e0d\u662f\u7ef4\u62a4\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\uff0c\u800c\u662f\u7ef4\u62a4**\u6570\u7684\u4e2a\u6570**\n\n\u6bd4\u5982\u5355\u4e2a\u8282\u70b9[1,3],\u5b83\u7684size\u4e3a3\n\n\u5355\u4e2a\u8282\u70b9\u521d\u59cb\u5316size\u4e3ar-l+1\uff0c\u4e5f\u5c31\u662flen\u957f\u5ea6\n\n\u6211\u4eec\u666e\u901a\u5e73\u8861\u6811\u4e2d\u7edf\u8ba1\u76f8\u540c\u6743\u503c\u7684\u6570\u7684\u4e2a\u6570\u7684\u7d2f\u8ba1\u5668cnt\uff0c\u6b64\u65f6\u4e5f\u5c31\u662f\u8be5\u533a\u95f4\u7684\u957f\u5ea6,\u8868\u793a\u4e3ar-l+1\uff0c\u4ee3\u8868\u7740\u8be5\u4e2a\u8282\u70b9\u4e2d\u603b\u5171\u6709\u51e0\u4e2a\u6570\n\n\u4e86\u89e3\u4e86\u4e0e\u4f17\u4e0d\u540c\u7684size\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u4e0e\u666e\u901a\u7684\u5e73\u8861\u6811\u4e00\u6837\u8fdb\u884c\u67e5\u627e\u6392\u540d\u4e3ak\u7684\u6570\u4e86\n\n\u627e\u5230\u7b2ck\u4e2a\u6570\u4e4b\u540e\uff0c\u8fd9\u4e2a\u6570\u4e0d\u4e00\u5b9a\u662f\u5355\u72ec\u6210\u70b9\uff0c\u6240\u4ee5\u5728\u5220\u9664\u5b83\u7684\u65f6\u5019\u9700\u8981\u8fdb\u884c**\u62c6\u70b9**\n\n### \u62c6\u70b9\n\u4e00\u65e6\u8fdb\u884c\u4e86\u79bb\u961f\u64cd\u4f5c\uff0c\u8be5\u8282\u70b9\u7684\u8fde\u7eed\u6027\u5c31\u88ab\u7834\u574f\u4e86\uff0c\u5047\u8bbe[l,r]\u533a\u95f4\u4e2d\u7684x\u88ab\u8c03\u8d70\n\n1.x==l&&x==r(\u533a\u95f4\u5185\u4ec5\u6709\u4e00\u4e2a\u6570)  \u76f4\u63a5\u5c06\u8be5\u8282\u70b9\u5220\u9664\n\n2.x==l(x!=r)   \u628a[l,r]\u53d8\u6210[l+1,r]\u5373\u53ef\n\n3.x==r(x!=l)   \u628a[l,r]\u53d8\u6210[l,r-1]\u5373\u53ef\n\n4.l<x<r    \u6b64\u65f6\u662f\u6700\u9ebb\u70e6\u7684\uff0c\u6211\u4eec\u9700\u8981\u628a\u8be5\u8282\u70b9\u5206\u88c2\u6210\u4e24\u6bb5:[l,x-1]\u548c[x+1,r]\uff0c\u5047\u4ee4\u628a\u539f\u8282\u70b9[l,r]\u53d8\u6210\u4e86[l,x-1]\uff0c\u90a3\u4e48\u5269\u4e0b\u7684[x+1,r]\u8be5\u653e\u5230\u54ea\u91cc\u5462\uff1f  \u5f88\u663e\u7136\uff0c[x+1,r]\u4e00\u5b9a\u662f\u7d27\u968f[l,x-1]\u540e\u7684\uff0c\u53ef\u4ee5\u8bf4\u662f[l,x-1]\u6b64\u65f6\u7684\u540e\u7ee7(\u8282\u70b9\u6392\u540d\u4e0b\u4e00\u540d)\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u627e\u5230[l,x-1]\u539f\u5148\u7684\u540e\u7ee7\uff0c\u518d\u5c06[x+1,r]\u63a5\u5230\u8fd9\u4e2a\u540e\u7ee7\u7684\u5de6\u513f\u5b50\u5904\uff0c\u6b64\u65f6[x+1,r]\u4fbf\u6210\u4e3a\u7684[l,x-1]\u7684\u540e\u7ee7\uff0c\u5e76\u4e0d\u7834\u574f\u6574\u68f5\u6811\u7684\u5e73\u8861\u6027\n\n\u7531\u4e8e\u603b\u5171\u7684\u79bb\u961f\u6b21\u6570\u6700\u591a\u53ea\u67093*10^5\u6b21\uff0c\u6240\u4ee5\u6700\u591a\u53ea\u4f1a\u589e\u52a0\u4e09\u5341\u4e07\u4e2a\u8282\u70b9\uff0c\u5e76\u4e0d\u4f1a\u7206\u5185\u5b58\n\n```cpp\n#include<cstdio>\n#include<utility>\n#define reg register //\u4f18\u5316\u5230\u4e86\u6781\u81f4\u3001\u3001\u3001\nusing namespace std;\ntypedef long long ll;\nconst int N=300001;\ninline void read(reg int &in)  //\u8bfb\u4f18\n{\n\tin=0;reg char ch=getchar();\n\twhile (ch<48||ch>57)ch=getchar();\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+ch-48,ch=getchar();\n}\nclass Splay\n{\n    private:\n        struct tree\n        {\n            ll l,r;\n            int size; //\u7531\u4e8e\u4e00\u884c\u4e2d\u6700\u591a\u53ea\u6709m\u4e2a\u6570\uff0c\u6240\u4ee5size\u5f00\u6210int\u662f\u8db3\u591f\u7684\n            tree *fa,*son[2];\n            inline tree(reg ll L,reg ll R)\n            {\n                l=L;r=R;\n                size=r-l+1;  //\u521d\u59cb\u5316\uff0csize\u4e00\u5f00\u59cb\u5c31\u662f\u957f\u5ea6\n                fa=son[0]=son[1]=NULL;\n            }\n            inline void pushup()\n            {\n                size=r-l+1; //\u5c31\u50cf\u666e\u901a\u5e73\u8861\u6811\u4e2d\u7684size=cnt\n                if (son[0])size+=son[0]->size;\n                if (son[1])size+=son[1]->size;\n            }\n            inline int lsize() //\u7531\u4e8e\u4f7f\u7528\u6307\u9488\uff0c\u65b9\u4fbf\u4e0d\u4e00\u5b9a\u6709\u5de6\u513f\u5b50\u7684\u8282\u70b9\u83b7\u53d6\u5de6\u5b50\u6811\u7684size\n            {\n                return son[0]?son[0]->size:0;\n            }\n\t\t\tinline bool relation()\n        \t{\n            \tif (fa)return fa->son[1]==this;\n        \t}\n        }*root;\n        inline void connect(reg tree *&p,reg tree *&fa,reg bool which)\n        {\n            if (p)p->fa=fa;\n            if (fa)fa->son[which]=p,fa->pushup();\n        }\n        inline void rotate(reg tree *&p)\n        {\n            reg tree *fa=p->fa;\n            reg bool lr=p->relation();\n            connect(p,fa->fa,fa->relation());\n            connect(p->son[lr^1],fa,lr);\n            connect(fa,p,lr^1);\n            fa->pushup();p->pushup();\n        }\n        inline void splay(reg tree *&p)\n        {\n            for (reg tree *fa;fa=p->fa;rotate(p))\n                if (fa->fa)\n                    rotate(p->relation()==fa->relation()?fa:p);\n            root=p;\n        }\n        inline pair<tree*,int>find_rank(reg int ranking)  //\u8fd4\u56de\u503c\u8bbe\u5b9a\u4e3apair  \u524d\u4e00\u9879\u4ee3\u8868\u7740\u7b2ck\u4f4d\u6240\u5728\u7684\u8282\u70b9\uff0c\u540e\u4e00\u9879\u4ee3\u8868\u7b2ck\u4f4d\u662f\u5728\u8be5\u8282\u70b9\u4e2d\u7684\u7b2c\u51e0\u4e2a\n        {\n            reg tree *now=root;\n            while (1)\n                if (ranking<=now->lsize())now=now->son[0];\n                else\n                {\n                    ranking-=now->lsize()+now->r-now->l+1;\n                    if (ranking<=0)return make_pair(now,ranking+now->r-now->l+1);\n                    now=now->son[1];\n                }\n        }\n        inline tree *precursor(reg tree *p) //\u524d\u9a71(\u6307\u70b9\u7684\u524d\u9a71\uff0c\u524d\u4e00\u4e2a\u70b9\n        {\n\t\t\tsplay(p);\n\t\t\treg tree *now=p->son[0];\n\t\t\tif (now==NULL)return NULL;\n\t\t\twhile (now->son[1])now=now->son[1];\n\t\t\treturn now;\n\t\t}\n\t\tinline tree *successor(reg tree *p) //\u540e\u7ee7(\u6307\u70b9\u7684\u540e\u7ee7\uff0c\u540e\u4e00\u4e2a\u70b9\n\t\t{\n\t\t\tsplay(p);\n\t\t\treg tree *now=p->son[1];\n\t\t\tif (now==NULL)return NULL;\n\t\t\twhile (now->son[0])now=now->son[0];\n\t\t\treturn now;\n\t\t}\n        inline void Delete(reg tree *&p)\n        {\n            splay(p);\n            if (p->son[0]==NULL&&p->son[1]==NULL)return root=NULL,delete root;\n            if (p->son[0]==NULL)return (root=p->son[1])->fa=NULL,delete p;\n            if (root->son[1]==NULL)return (root=p->son[0])->fa=NULL,delete p;\n            reg tree *pre=precursor(p);splay(pre);connect(p->son[1],pre,1);delete p;\n        }\n        inline ll split(reg pair<tree*,int>P)\n        {\n            reg tree *p=P.first;reg ll pos=P.second*1ll+p->l-1; //\u8fd4\u56de\u8fc7\u6765\u7684\u662f\u4ee3\u8868\u8be5\u8282\u70b9\u4e2d\u7684\u7b2c\u51e0\u4e2a\uff0c\u90a3\u4e48\u5b83\u6240\u4ee3\u8868\u7684\u6570\u8fd8\u8981\u52a0\u4e0al\u518d\u51cf\u53bb1 (\u6bd4\u5982[2,5]\u7684\u7b2c\u4e8c\u4e2a\u5c31\u662f2+2-1=3)\n            if (p->l==p->r)return Delete(p),pos;  //\u957f\u5ea6\u4e3a1\u7684\u70b9\u8fd8\u8981\u518d\u62c6\u70b9\u7684\u8bdd\uff0c\u90a3\u5c31\u662f\u5220\u9664\u4e86\n            if (p->l==pos)return p->l++,p->pushup(),splay(p),pos; //\u6ce8\u610f\u7279\u5224\n            if (p->r==pos)return p->r--,p->pushup(),splay(p),pos;\n            reg tree *k=new tree(pos+1,p->r);\n            p->r=pos-1;p->pushup();\n            tree *nxt=successor(p);\n            if (nxt==NULL)return connect(k,p,1),pos; //\u6ca1\u6709\u540e\u7ee7\u7684\u8bdd\u5c31\u76f4\u63a5\u628a[x+1,r]\u5f53\u4f5c[l,x-1]\u7684\u53f3\u513f\u5b50\n            return connect(k,nxt,0),splay(k),pos; //\u6709\u540e\u7ee7\u5c31\u4f7f[x+1,r]\u6210\u4e3a\u539f\u540e\u7ee7\u7684\u5de6\u513f\u5b50\n        }\n    public:\n        inline void init(reg ll l,reg ll r)\n        {\n            root=new tree(l,r);\n        }\n        inline void push_back(reg ll num) //\u63d2\u5165\u81f3\u672b\u5c3e\uff0c\u7531\u4e8e\u672c\u9898\u63d2\u5165\u64cd\u4f5c\u53ea\u9700\u8981\u63d2\u5165\u5230\u672b\u5c3e\uff0c\u6240\u4ee5push_back\u5c31ok\u4e86\n        {\n\t\t\treg tree *nt=new tree(num,num);\n            if (root==NULL){root=nt;return;}\n            reg tree *p=root;\n            while (p->son[1])p=p->son[1]; //\u627e\u5230\u6700\u53f3\n    \t\tconnect(nt,p,1);\n    \t\tsplay(nt);\n        }\n        inline ll pop_kth(reg int k)\n        {\n            return split(find_rank(k));\n        }\n}T[N];\nint n,m,q;\nint main()\n{\n    read(n);read(m);read(q);\n    for (reg int i=1;i<=n;i++)T[i].init(1ll*(i-1)*m+1,1ll*i*m-1);\n    for (reg int i=1;i<=n;i++)T[0].push_back(1ll*i*m);\n    while (q--)\n    {\n        reg int x,y;reg ll ans;\n        read(x);read(y);\n        T[x].push_back(T[0].pop_kth(x));\n        printf(\"%lld\\n\",ans=T[x].pop_kth(y));\n        T[0].push_back(ans);\n\t}\n    return 0;\n}\n```",
        "postTime": 1536590897,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u4e00\u9053\u975e\u5e38\u6709\u610f\u601d\u7684\u9898\u3002\n\n\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u795e\u5947\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u53ef\u4ee5\u52a8\u6001\u5730\u7ef4\u62a4\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u961f\u5217\uff0c\u5176\u521d\u59cb\u5143\u7d20\u4e3a $1,2,...,n$ \u3002\u8be5\u961f\u5217\u53ef\u4ee5\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff0c\u7b2c\u4e00\u79cd\u4e3a\u5220\u9664\u961f\u5217\u7684\u7b2c $k$ \u9879\u5143\u7d20\uff0c\u6267\u884c\u201c\u5411\u524d\u770b\u9f50\u201d\u64cd\u4f5c\uff0c\u5e76\u5728\u961f\u5217\u7684\u672b\u5c3e\u8865\u5145 $n+1$ \uff08\u4ee5\u6b64\u7c7b\u63a8\uff09\u3002\u7b2c\u4e8c\u79cd\u4e3a\u67e5\u8be2\u961f\u5217\u7684\u7b2c $k$ \u9879\u5143\u7d20\u7684\u6570\u503c\u3002\n\n\u62e5\u6709\u8fd9\u6837\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u672c\u9898\u5c31\u7b80\u5355\u591a\u4e86\uff1b\u89c2\u5bdf\u5230\u201c\u5411\u524d\u770b\u9f50\u201d\u547d\u4ee4\u53ea\u5bf9\u6700\u540e\u4e00\u5217\u4ea7\u751f\u5f71\u54cd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e00\u884c\u7ef4\u62a4\u4e00\u4e2a\u52a8\u6001\u961f\u5217\uff0c\u6700\u540e\u4e00\u5217\u7528\u53e6\u4e00\u4e2a\u52a8\u6001\u961f\u5217\u5355\u72ec\u5904\u7406\u3002\n\n\u5982\u679c\u51fa\u5217\u7684\u540c\u5b66\u4f4d\u4e8e\u6700\u540e\u4e00\u5217\uff0c\u5219\u53ea\u9700\u5bf9\u6700\u540e\u4e00\u5217\u8fdb\u884c\u4e00\u6b21\u5220\u9664\u64cd\u4f5c\u5373\u53ef\uff1b\u5982\u679c\u51fa\u5217\u7684\u540c\u5b66\u4e0d\u5728\u6700\u540e\u4e00\u5217\uff0c\u5219\u9700\u8981\u5bf9\u51fa\u5217\u540c\u5b66\u6240\u5728\u7684\u90a3\u4e00\u884c\u4e0e\u6700\u540e\u4e00\u5217\u540c\u65f6\u8fdb\u884c\u64cd\u4f5c\u3002\u5b9e\u73b0\u7ec6\u8282\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u73b0\u5728\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u5b9e\u73b0\u795e\u5947\u7684\u52a8\u6001\u961f\u5217\u3002\u5728\u672c\u9898\u7684\u60c5\u51b5\u4e2d\uff0c\u5047\u8bbe\u6bcf\u4e2a\u52a8\u6001\u961f\u5217\u6700\u591a\u6709 $Q$ \u6b21\u5220\u9664\u64cd\u4f5c\uff0c\u90a3\u4e48\u52a8\u6001\u961f\u5217\u7684\u65f6\u7a7a\u590d\u6742\u5ea6\u5fc5\u987b\u53ea\u4e0e $Q$ \u76f8\u5173\uff0c\u5426\u5219 $O(n^2)$ \u7684\u65f6\u7a7a\u590d\u6742\u5ea6\u65e0\u6cd5\u627f\u53d7\u3002\u4f3c\u4e4e\u8fd9\u91cc\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u5b9e\u73b0\uff0c\u800c\u6211\u91c7\u7528\u4e86\u8f83\u4e3a\u597d\u5199\u7684**\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811**\u6765\u7ef4\u62a4\u52a8\u6001\u961f\u5217\u3002\n\n\u521d\u59cb\u72b6\u6001\uff0c\u6743\u503c\u7ebf\u6bb5\u6811\u4e0b\u6807\u4e3a $1,2,...,n$ \u7684\u8282\u70b9\u5927\u5c0f\u5747\u4e3a $1$ \u3002\u5bf9\u4e8e\u5220\u9664\u64cd\u4f5c\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u5bf9\u5e94\u7684\u6743\u503c\u5927\u5c0f\u51cf\u4e00\uff0c\u5e76\u5728\u6743\u503c $n+1$ \u7684\u5927\u5c0f\u52a0\u4e00\u5373\u53ef\u3002\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\uff0c\u53ea\u9700\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e2d\u67e5\u8be2\u7b2c $k$ \u5c0f\u5143\u7d20\u5373\u4e3a\u5bf9\u5e94\u6570\u503c\u3002\u5b9e\u73b0\u7ec6\u8282\u540c\u6837\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u8bb0\u5f97\u5f00 long long \u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define lson(u) (node[u].l)\n#define rson(u) (node[u].r)\n#define sum(u) (node[u].sum)\nusing namespace std;\ntypedef long long ll;\n\nconst int MAXN = 300005;\n\nstruct Node {\n    int l, r, sum;\n}node[MAXN * 42];\nint cnt;\nint root[MAXN], size[MAXN];\nvector<ll> ins[MAXN];\n\nint N, M, Q, T;\n\nvoid modify(int& u, int l, int r, int p, int val) {\n    if (u == 0) u = ++cnt;\n    if (l == r) {\n        sum(u) += val;\n        return;\n    }\n    int mid = (l + r) >> 1;\n    if (p <= mid) modify(lson(u), l, mid, p, val);\n    else modify(rson(u), mid + 1, r, p, val);\n    sum(u) = sum(lson(u)) + sum(rson(u));\n}\n\nint query(int u, int l, int r, int k) {\n    if (l == r) return l;\n    int mid = (l + r) >> 1;\n    int lsum = sum(lson(u));\n    if (l <= T) {\n        lsum += (mid > T) ? T - l + 1 : mid - l + 1;\n    }\n    if (k <= lsum) return query(lson(u), l, mid, k);\n    else return query(rson(u), mid + 1, r, k - lsum);\n}\n\nint main() {\n    scanf(\"%d%d%d\", &N, &M, &Q);\n    int Case = Q;\n    while (Case--) {\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        ll ans = 0, tmp = 0;\n        if (y == M) {\n            T = N;\n            ans = query(root[N + 1], 1, N + Q, x);\n            modify(root[N + 1], 1, N + Q, ans, -1);\n            modify(root[N + 1], 1, N + Q, N + (++size[N + 1]), 1);\n            if (ans <= N) ans = ans * (ll)M;\n            else ans = ins[N + 1][ans - N - 1];\n            ins[N + 1].push_back(ans);\n            printf(\"%lld\\n\", ans);\n        } else {\n            T = M - 1;\n            ans = query(root[x], 1, M + Q, y);\n            modify(root[x], 1, M + Q, ans, -1);\n            modify(root[x], 1, M + Q, M - 1 + (++size[x]), 1);\n            if (ans <= M - 1) ans += (ll)(x - 1) * M;\n            else ans = ins[x][ans - M];\n            T = N;\n            tmp = query(root[N + 1], 1, N + Q, x);\n            modify(root[N + 1], 1, N + Q, tmp, -1);\n            modify(root[N + 1], 1, N + Q, N + (++size[N + 1]), 1);\n            if (tmp <= N) tmp = tmp * (ll)M;\n            else tmp = ins[N + 1][tmp - N - 1];\n            ins[N + 1].push_back(ans);\n            ins[x].push_back(tmp);\n            printf(\"%lld\\n\", ans);\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1569339973,
        "uid": 116851,
        "name": "_\u98ce\u4f11\u4f4f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u6ca1\u6709FHQ_Treap\u7684\u9898\u89e3\u554a\uff0cFHQ_Treap\u5199\u8fd9\u4e2a\u9898\u597d\u554a\uff01\n\n\u5229\u7528FHQ_Treap\u7ef4\u62a4\u6bcf\u4e00\u884c\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u4eba\u7ec4\u6210\u7684\u5e8f\u5217\u548c\u6700\u540e\u4e00\u5217\uff0c\u518d\u53e6\u5916\u4e13\u95e8\u7ef4\u62a4\u4e00\u4e0b\u6700\u540e\u5217\u3002\n\n\u6bcf\u6b21\u79fb\u52a8\u7b2cx\u884c\u7b2cy\u4e2a\u4eba\uff0c\u5047\u5982y\u662f\u6700\u540e\u4e00\u5217\u7684\u8bdd\uff0c\u76f4\u63a5\u5220\u6389\u8fd9\u4e2a\u4eba\u5e76\u4e14\u6254\u5230\u6700\u540e\u4e00\u5217\u5217\u5c3e\uff1b\u5047\u5982\u4e0d\u662f\u6700\u540e\u4e00\u5217\u7684\u8bdd\uff0c\u628a\u7b2cx\u884c\u7b2cy\u4e2a\u4eba\u5220\u6389\uff0c\u6254\u5230\u6700\u540e\u4e00\u5217\u5217\u5c3e\uff0c\u518d\u628a\u6700\u540e\u4e00\u5217\u7b2cx\u4eba\u5220\u6389\u6254\u5230\u7b2cx\u884c\u884c\u672b\u3002\n\n\u5229\u7528FHQ_Treap\u5408\u5e76\u62c6\u5206\u7684\u53ef\u4ee5\u5f88\u597d\u7684\u7ef4\u62a4\u8fd9\u4e2a\u591a\u4e2a\u5e8f\u5217\u3002\n\n\u5f53\u7136\uff0c\u6570\u636e\u8303\u56f4\u8f83\u5927\uff0c\u6211\u4eec\u4e0d\u80fd\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u800c\u5e94\u8be5\u7ef4\u62a4\u6bcf\u4e00\u6bb5\u8fde\u7eed\u533a\u95f4\u3002\n\n### \u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\ntypedef unsigned long long ULL;\n\nconst int inf=0x7f7f7f7f;\nconst LL linf=0x7f7f7f7f7f7f7f7f;\nconst int maxn=3e5+10;\n\nclass FHQ_Treap\n{\nprivate:\n    typedef struct TreapNode\n    {\n        LL l,r,len;\n        int priority,size;\n        TreapNode *lch,*rch;\n    }*Treap;\n\n    Treap root,nil;\n    \n    inline long random()\n    {\n        static int seed=19260817;\n        return seed=int(seed*48271LL%2147483647);\n    }\n\n    inline void update(Treap node)\n    {\n        if(node==nil)\n            return;\n        node->len=node->lch->len+node->rch->len+(node->r-node->l+1);\n        node->size=node->lch->size+node->rch->size+1;\n    }\n    \n    inline Treap creat(LL l,LL r)\n    {\n        Treap node=new TreapNode;\n        node->l=l,node->r=r;\n        node->priority=random();\n        node->lch=node->rch=nil;\n        update(node);\n        return node;\n    }\n\n    Treap merge(Treap x,Treap y)\n    {\n        if(x==nil||y==nil)\n        {\n            update(x==nil?y:x);\n            return x==nil?y:x;\n        }\n        if(x->priority < y->priority)\n        {\n            x->rch=merge(x->rch,y);\n            update(x);\n            return x;\n        }\n        else\n        {\n            y->lch=merge(x,y->lch);\n            update(y);\n            return y;\n        }\n    }\n\n    void split(Treap node,int k,Treap &x,Treap &y)\n    {\n        if(node==nil)\n            x=y=nil;\n        else\n        {\n            if(node->lch->size<k)\n            {\n                x=node;\n                split(node->rch,k-node->lch->size-1,node->rch,y);\n            }\n            else\n            {\n                y=node;\n                split(node->lch,k,x,node->lch);\n            }\n            update(node);\n        }\n    }\n\n    int ord(Treap node,int k)\n    {\n        if(!k)\n            return 0;\n        if(node->lch->len<k && k<=node->lch->len+(node->r-node->l+1))\n            return node->lch->size+1;\n        if(k<=node->lch->len)\n            return ord(node->lch,k);\n        else\n            return ord(node->rch,k-node->lch->len-(node->r-node->l+1))+node->lch->size+1;\n    }\n    \npublic:\n\n    FHQ_Treap()\n    {\n        nil=new TreapNode;\n        nil->lch=nil->rch=nil;\n        nil->size=0;\n        nil->l=nil->r=nil->len=0;\n        nil->priority=2147483647;\n        root=nil;\n    }\n\n    void push_back(LL l,LL r)\n    {\n        root=merge(root,creat(l,r));\n    }\n\n    LL find_and_pop(int k)\n    {\n        Treap x,y,z;\n        int t=ord(root,k);\n        split(root,t-1,x,y);\n        split(y,1,y,z);\n        LL ans=k-x->len-1+y->l;\n        if(y->len>=2)\n        {\n            if(y->l==ans)\n            {\n                y->l++;\n                y->len--;\n            }\n            else if(y->r==ans)\n            {\n                y->r--;\n                y->len--;\n            }\n            else\n            {\n                Treap nodel=creat(y->l,ans-1),noder=creat(ans+1,y->r);\n                delete y;\n                y=merge(nodel,noder);\n            }\n            root=merge(merge(x,y),z);\n        }\n        else if(y->len==1)\n        {\n            delete y;\n            y=nil;\n            root=merge(x,z);\n        }\n        return ans;\n    }\t\n}*Que=new FHQ_Treap[maxn],*Last_line=new FHQ_Treap;\n\nint main()\n{\n    int n,m,Q;\n    scanf(\"%d%d%d\",&n,&m,&Q);\n    for(int i=1;i<=n;i++)\n    {\n        Que[i].push_back(1ll*(i-1)*m+1,1ll*i*m-1);\n        Last_line->push_back(1ll*i*m,1ll*i*m);\n    }\n    while(Q--)\n    {\n        int x,y;\n        LL ans;\n        scanf(\"%d%d\",&x,&y);\n        if(y==m)//\u7279\u5224\u6700\u540e\u4e00\u5217\n        {\n            ans=Last_line->find_and_pop(x);//\u627e\u5230\u5e76\u5220\u6389\u8fd9\u4e2a\u4eba\n            Last_line->push_back(ans,ans);//\u6254\u5230\u5217\u5c3e\n        }\n        else\n        {\n            ans=Que[x].find_and_pop(y);//\u627e\u5230\u7b2cx\u884c\u7b2cy\u4e2a\u4eba\u5e76\u5220\u6389\n            LL tmp=Last_line->find_and_pop(x);\n            Que[x].push_back(tmp,tmp);//\u5220\u6389\u6700\u540e\u4e00\u5217\u7b2cx\u4eba\u5e76\u63d2\u5165\u7b2cx\u884c\u884c\u672b\n            Last_line->push_back(ans,ans);//\u5c06\u8fd9\u4e2a\u4eba\u63d2\u5165\u6700\u540e\u4e00\u5217\u5217\u5c3e\n        }\n        printf(\"%lld\\n\",ans);\n    }\n\n    delete [] Que;\n    delete Last_line;\n    return 0;\n}\n\n```",
        "postTime": 1527154626,
        "uid": 48500,
        "name": "AntaresQAQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "## \u601d\u8def\n\n\u201c\u5411\u5de6\u770b\u9f50\u201d\u548c\u201c\u5411\u524d\u770b\u9f50\u201d\u8fd9\u4e24\u6761\u6307\u4ee4\uff0c\u76f8\u5f53\u4e8e\u5728\u5e8f\u5217\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u5e76\u7ef4\u62a4\u884c\u3001\u5217\u4e2d\u7684\u76f8\u5bf9\u987a\u5e8f\u3002\n\n\u7531\u4e8e\u6b64\u9898\u662f\u6559\u7ec3\u7ed9\u51fa\u7684\u5e73\u8861\u6811\u4e60\u9898\uff0c\u60f3\u5230\u7528\u5e73\u8861\u6811\u6765\u7ef4\u62a4\u6240\u8c13\u7684\u5e8f\u5217\u3002\n\n\u5bf9\u6bcf\u4e00\u884c\u5f00\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u5220\u9664 $(x,y)$ \u76f8\u5f53\u4e8e\u5728\u7b2c $x$ \u884c\u7684\u5e73\u8861\u6811\u4e2d\u5220\u9664\u7b2c $y$ \u4e2a\u5143\u7d20\u3002\u5728\u5220\u9664\u4e4b\u540e\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e00\u884c\u5df2\u7ecf\u201c\u5411\u5de6\u770b\u9f50\u201d\u4e86\u3002\n\n\u90a3\u4e48\u600e\u4e48\u505a\u5230\u201c\u5411\u524d\u770b\u9f50\u201d\u5462\uff1f\u5728\u201c\u5411\u5de6\u770b\u9f50\u201d\u4e4b\u540e\uff0c\u7f3a\u4eba\u7684\u4f4d\u7f6e\u4e00\u5b9a\u5728\u6700\u540e\u4e00\u5217\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u6700\u540e\u4e00\u5217\u624d\u4f1a\u56e0\u201c\u5411\u524d\u770b\u9f50\u201d\u800c\u6539\u53d8\u3002\u60f3\u5230\u5bf9\u6700\u540e\u4e00\u5217\u53e6\u5916\u5f00\u4e00\u68f5\u5e73\u8861\u6811\u3002\u5bf9\u4e8e\u5220\u9664 $(x,y)$ \u64cd\u4f5c\uff0c\u5728\u6700\u540e\u4e00\u5217\u7684\u8fd9\u68f5\u5e73\u8861\u6811\u4e0a\u5220\u9664\u7b2c $x$ \u4e2a \u5143\u7d20\uff0c\u518d\u628a\u4e4b\u524d\u7b2c $x$ \u884c\u5220\u9664\u7684\u7b2c $y$ \u4e2a\u5143\u7d20\u52a0\u5230\u8fd9\u68f5\u5e73\u8861\u6811\u7684\u672b\u7aef\u3002\n\n## \u5b9e\u73b0\n\n\u8fd9\u91cc\u7528 Splay \u5b9e\u73b0\n\n\u5bf9\u4e8e\u6bcf $i$ \u884c\uff0c\u5efa\u4e00\u68f5\u5e73\u8861\u6811\u6807\u53f7\u4e3a $i$\n\n\u5bf9\u4e8e\u7b2c $m$ \u5217\uff0c\u5efa\u4e00\u68f5\u5e73\u8861\u6811\u6807\u53f7\u4e3a $0$\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u64cd\u4f5c\uff1a\n\n1. \u5220\u9664\u7b2c $0$ \u68f5\u5e73\u8861\u6811\u4e2d\u7b2c$i$\u4e2a\u5143\u7d20\n2. \u5220\u9664\u7b2c $i$ \u68f5\u5e73\u8861\u6811\u4e2d\u7b2c$j$\u4e2a\u5143\u7d20\n3. \u5728\u7b2c $0$ \u68f5\u5e73\u8861\u6811\u672b\u7aef\u63d2\u5165\u5728 2. \u4e2d\u5220\u9664\u7684\u5143\u7d20\n\n\u8fd9\u6837\u505a\u7684\u539f\u56e0\uff1a\n\n1. \u5728\u7b2c $0$ \u68f5\u5e73\u8861\u6811\u4e2d\u5220\u9664\u5143\u7d20\uff0c\u5b9e\u73b0\u4e86\u201c\u5411\u524d\u770b\u9f50\u201d\n2. \u5728\u7b2c $i$ \u68f5\u5e73\u8861\u6811\u4e2d\u5220\u9664\u5143\u7d20\uff0c\u5b9e\u73b0\u4e86\u201c\u5411\u5de6\u770b\u9f50\u201d\n3. \u5728\u7b2c $0$ \u68f5\u5e73\u8861\u6811\u672b\u63d2\u5165\u5143\u7d20\uff0c\u5b9e\u73b0\u4e86\u201c\u5b66\u751f\u5f52\u961f\u201d\n\n\u53e6\u5916\uff0c**\u5982\u679c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5143\u7d20\u6211\u4eec\u90fd\u5efa\u7acb\u4e86\u4e00\u4e2a\u7ed3\u70b9\u7684\u8bdd\uff0c\u4f1a\u6709\u5927\u91cf\u591a\u4f59\u7684\u7a7a\u95f4\u5f00\u9500**\u3002\u56e0\u4e3a\u6709\u5f88\u591a\u8fde\u5728\u4e00\u8d77\u7684\u5143\u7d20\u81ea\u59cb\u81f3\u7ec8\u90fd\u6ca1\u6709\u5206\u5f00\uff0c\u6211\u4eec\u5c06\u533a\u95f4\u5b58\u5728\u4e00\u4e2a\u7ed3\u70b9\u4e2d\uff0c\u5f53\u7528\u5230\u8fd9\u4e2a\u533a\u95f4\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\u65f6\u518d\u8003\u8651\u5bf9\u533a\u95f4\u62c6\u5206\u4e3a\u4e24\u4e2a\u7ed3\u70b9\u3002\n\n## CODE\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\ninline int gin(){\n    int s=0,f=1;\n    char c=getchar();\n    while(c<'0' || c>'9'){\n        if(c=='-') f=-1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9'){\n        s=(s<<3)+(s<<1)+(c^48);\n        c=getchar();\n    }\n    return s*f;\n}\n\nconst int N=3e6+5;\nint n,m,q,a[N],tot;\nint sz[N],ch[N][2],val[N][2],fa[N];\n\nstruct Splay{\n\n\tint rt;\n\n    inline void push(int x){\n        sz[x]=sz[ch[x][0]]+sz[ch[x][1]]+val[x][1]-val[x][0]+1;\n    }\n\n\tinline bool wrt(int x){return x==ch[fa[x]][1];}\n\tinline void rotate(int x){\n\t    int p=fa[x],g=fa[p],k=wrt(x),b=ch[x][k^1];\n\t    ch[p][k]=b,fa[b]=p;\n\t    ch[g][wrt(p)]=x,fa[x]=g;\n\t    ch[x][k^1]=p,fa[p]=x;\n\t    push(p),push(x);\n\t}\n\t\n\tinline void splay(int x,int tar=0){\n\t    while(fa[x]!=tar){\n\t        if(fa[fa[x]]!=tar)\n\t            wrt(x)==wrt(fa[x])?rotate(fa[x]):rotate(x);\n\t        rotate(x);\n\t    }\n\t    if(!tar) rt=x;\n\t}\n\n    inline int kth(int k){\n        int x=rt;\n        while(1){\n            if(ch[x][0] && k<=sz[ch[x][0]]) x=ch[x][0];\n            else if(ch[x][1] && k>sz[x]-sz[ch[x][1]]) k-=sz[x]-sz[ch[x][1]],x=ch[x][1];\n            else {\n                k-=sz[ch[x][0]];\n                if(k!=1){\n                    fa[ch[++tot][0]=ch[x][0]]=tot,fa[ch[x][0]=tot]=x;\n                    val[tot][0]=val[x][0],val[tot][1]=val[x][0]+k-2,val[x][0]=val[tot][1]+1;\n                    push(tot);\n                    k=1;\n                }\n                if(k!=val[x][1]-val[x][0]+1){\n                    fa[ch[++tot][1]=ch[x][1]]=tot,fa[ch[x][1]=tot]=x;\n                    val[tot][1]=val[x][1],val[tot][0]=val[x][0]+k,val[x][1]=val[tot][0]-1;\n                    push(tot);\n                }\n                return x;\n            }\n        }\n    }\n\n    inline int newNode(int l,int r){\n        int x=++tot;\n        ch[x][0]=ch[x][1]=fa[x]=0;\n        val[x][0]=l,val[x][1]=r;\n        sz[x]=r-l+1;\n        return x;\n    }\n\n    inline int build(int l,int r){\n        if(l>r) return 0;\n        int mid=l+r>>1,x=newNode(a[mid],a[mid]);\n        if(l==r) return x;\n        if(ch[x][0]=build(l,mid-1)) fa[ch[x][0]]=x;\n\t\tif(ch[x][1]=build(mid+1,r)) fa[ch[x][1]]=x;\n        push(x);\n        return x;\n    }\n\n    inline void join(int u,int v){\n        fa[u]=0,fa[v]=0;\n        int w=u;\n        while(ch[w][1]) w=ch[w][1];\n        splay(w);\n        ch[w][1]=v,fa[v]=w;\n        push(w);\n    }\n\n    inline int pop(int k){\n        int x=kth(k);\n        splay(x);\n        if(!ch[x][0] || !ch[x][1])\n            fa[rt=ch[x][0]|ch[x][1]]=0;\n        else join(ch[x][0],ch[x][1]);\n        return val[x][0];\n    }\n\n    inline void push_back(int v){\n        int x=newNode(v,v);\n        if(!rt) rt=x;\n        else {\n            int w=rt;\n            while(ch[w][1]) w=ch[w][1];\n            splay(w);\n            ch[w][1]=x,fa[x]=w;\n            push(w);\n        }\n    }\n\n}s[N];\n\n/*\n\u5bf9\u4e8e\u6bcfi\u884c\uff0c\u5efa\u4e00\u68f5\u5e73\u8861\u6811\u6807\u53f7\u4e3ai\n\u5bf9\u4e8e\u7b2cm\u5217\uff0c\u5efa\u4e00\u68f5\u5e73\u8861\u6811\u6807\u53f7\u4e3a0\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u64cd\u4f5c\uff1a\n1. \u5220\u9664\u7b2c0\u68f5\u5e73\u8861\u6811\u4e2d\u7b2ci\u4e2a\u5143\u7d20\n2. \u5220\u9664\u7b2ci\u68f5\u5e73\u8861\u6811\u4e2d\u7b2cj\u4e2a\u5143\u7d20\n3. \u5728\u7b2c0\u68f5\u5e73\u8861\u6811\u672b\u7aef\u63d2\u5165\u57282.\u4e2d\u5220\u9664\u7684\u5143\u7d20\n\n\u8fd9\u6837\u505a\u7684\u539f\u56e0\uff1a\n1. \u5728\u7b2c0\u68f5\u5e73\u8861\u6811\u4e2d\u5220\u9664\u5143\u7d20\uff0c\u5b9e\u73b0\u4e86\u201c\u5411\u524d\u770b\u9f50\u201d\n2. \u5728\u7b2ci\u68f5\u5e73\u8861\u6811\u4e2d\u5220\u9664\u5143\u7d20\uff0c\u5b9e\u73b0\u4e86\u201c\u5411\u5de6\u770b\u9f50\u201d\n3. \u5728\u7b2c0\u68f5\u5e73\u8861\u6811\u672b\u63d2\u5165\u5143\u7d20\uff0c\u5b9e\u73b0\u4e86\u201c\u5b66\u751f\u5f52\u961f\u201d\n*/\n\nsigned main(){\n//\tfreopen(\"1.in\",\"r\",stdin);\n//\tfreopen(\"my.out\",\"w\",stdout);\n    n=gin(),m=gin(),q=gin();\n    for(int i=1;i<=n;i++){\n        s[i].rt=s[i].newNode((i-1)*m+1,i*m-1);\n        a[i]=i*m;\n    }\n\ts[0].rt=s[0].build(1,n);\n    while(q--){\n        int x=gin(),y=gin(),z;\n\t   \ts[x].push_back(s[0].pop(x));\n\t    printf(\"%lld\\n\",z=s[x].pop(y));\n        s[0].push_back(z);\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1624600480,
        "uid": 135485,
        "name": "Push_Y",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3960 [NOIP2017 \u63d0\u9ad8\u7ec4] \u5217\u961f"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u4e2d\u6ca1\u6709\u65cb\u8f6ctreap \u7684\u505a\u6cd5\uff0c\u4e8e\u662f\u5c31\u60f3\u5728\u9000\u5f79\u524d\u5199\u4e00\u4e2a\u65cb\u8f6ctreap\u7684\u505a\u6cd5\uff0c\u4e5f\u7b97\u662f\u7ed9\u81ea\u5df1\u7684\u7ade\u8d5b\u751f\u6daf\u753b\u4e00\u4e2a\u5b8c\u7f8e\u7684\u53e5\u53f7\n\u601d\u8def\u8ddf\u5927\u591a\u6570\u7684\u9898\u89e3\u4e00\u6837\uff0c\u628a\u70b9\u8f6c\u6362\u4e3a\u533a\u95f4\n\u5982\u679c\u70b9\u5728\u8be2\u95ee\u533a\u95f4\u7684\u7b2c\u4e00\u4e2a\uff0c\u5c31\u8ba9\u5de6\u533a\u95f4++\n\u5982\u679c\u70b9\u5728\u8be2\u95ee\u533a\u95f4\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u53f3\u533a\u95f4--\n\u5982\u679c\u533a\u95f4\u53ea\u6709\u8fd9\u4e00\u4e2a\uff0c\u76f4\u63a5\u5220\u9664\u533a\u95f4\n\u5982\u679c\u5728\u533a\u95f4\u4e2d\u95f4\uff0c\u65b0\u5efa\u8282\u70b9\u628a\u533a\u95f4\u5206\u4e3a\u4e09\u4e2a\u533a\u95f4\uff08[l,x-1] , [x+1,r] , [x,x] \uff09\n\n\u7279\u522b\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u66f4\u65b0\u70b9\u7684\u503c\u7684\u65f6\u5019\uff0c\u5982\u679c\u70b9\u4e3a0\u5c31\u8fd4\u56de\n\u53ef\u4ee5\u770b\u4ee3\u7801\n```c++\nsiz[id] = siz[ch[id][1]] + siz[ch[id][0]] + r[id] - l[id] + 1 ;\n```\n\u90fd\u4e3a0\u65f6\uff0csiz[0]\u4f1a\u66f4\u65b0\u4e3a1\n\u8fd8\u6709\u8981\u6ce8\u610f\u7684\u662f\u4e00\u5b9a\u8981\u5f00long long\n\n\u65cb\u8f6ctreap\u7684AC\u4ee3\u7801\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<iostream>\n#include<queue>\n#include<vector>\n\nusing namespace std ;\ntypedef long long LL ;\nconst int maxn = 5e6+9 ;\nint root[maxn] , val[maxn] , siz[maxn] , ch[maxn][2] , dat[maxn] , tot = 0 ;\nLL r[maxn] , l[maxn] ; LL ans = 0 ;\nint n , m , q ;\n\nvoid pushup ( int id ) { if ( ! id ) return ; siz[id] = siz[ch[id][1]] + siz[ch[id][0]] + r[id] - l[id] + 1 ; return ; }\n//\u5982\u679c\u6ca1\u6709id\u4e3a0\u65f6\u8fd4\u56de\u7684\u64cd\u4f5c\uff0c\u90a3\u4e48siz[0]\u4f1a\u4e3a1\uff08r-l+1)\nint New ( LL ll , LL rr ) { l[++tot] = ll ; r[tot] = rr ; siz[tot] = rr - ll + 1 ; dat[tot] = rand ( ) ; return tot ; }\n//\u521d\u59cb\u5316\u70b9\nvoid Rotate ( int & id , int d ) {\n    int temp = ch[id][d^1] ;\n    if ( ! temp || ! id ) return ;//\u540cpushup\u7684\u64cd\u4f5c\n    ch[id][d^1] = ch[temp][d] ;\n    ch[temp][d] = id ;\n    id = temp ;\n    pushup ( ch[id][d] ) ; pushup ( id ) ;\n}\n//treap\u65cb\u8f6c\u7684\u64cd\u4f5c\nvoid insert ( int & id , LL ll , LL rr ) {\n    if ( ! id ) { id = New ( ll , rr ) ; return ; }\n    insert ( ch[id][1] , ll , rr ) ;\n    pushup ( ch[id][1] ) ; pushup ( id ) ;//\u66f4\u65b0\u70b9\n    if ( dat[ch[id][1]] > dat[id] ) Rotate ( id , 0 ) ;//\u4fdd\u8bc1\u968f\u673a\u503c\u5927\u7684\u5728\u4e0a\u9762\n}\nvoid Remove ( int & id , int x ) {\n    if( ! id ) return ;\n    if ( ch[id][0] || ch[id][1] ) {\n        if ( ! ch[id][0] || dat[ch[id][0]] < dat[ch[id][1]] ) {\n            Rotate ( id , 0 ) ; Remove ( ch[id][0] , x ) ;\n            pushup ( ch[id][0] ) ; pushup ( id ) ;\n            return ;\n        }\n        else {\n            Rotate ( id , 1 ) ; Remove ( ch[id][1] , x ) ;\n            pushup ( ch[id][1] ) ; pushup ( id ) ;\n            return ;\n        }\n    }\n    else id = 0 ;\n}\n//\u5220\u9664\u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5220\u9664\u64cd\u4f5c\u65f6\u4e0d\u9700\u8981\u5224\u65ad\u5f53\u524d\u70b9\u662f\u5426\u4e3a\u9700\u8981\u66f4\u65b0\u7684\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u628a\u66f4\u65b0\u7684\u70b9\u65cb\u8f6c\u5230\u5e95\u90e8\u5220\u9664\nvoid Remove1 ( int & id , int x ) {\n    if ( ! id ) return ;\n    if ( siz[ch[id][0]] >= x ) {\n        Remove1 ( ch[id][0] , x ) ;\n        pushup ( ch[id][0] ) ; pushup ( id ) ;\n        if ( dat[ch[id][0]] > dat[id] ) Rotate ( id , 1 ) ;\n    }//\u5982\u679c\u9700\u8981\u66f4\u65b0\u7684\u70b9\u5728\u5de6\u533a\u95f4\n    else if ( siz[id] - siz[ch[id][1]] < x ) {\n        Remove1 ( ch[id][1] , x - siz[id] + siz[ch[id][1]] ) ;\n        pushup ( ch[id][1] ) ; pushup ( id ) ;\n        if ( dat[ch[id][1]] > dat[id] ) Rotate ( id , 0 ) ;\n    }//\u5982\u679c\u9700\u8981\u66f4\u65b0\u7684\u70b9\u5728\u53f3\u533a\u95f4\n    else {//\u5982\u679c\u5728\u5f53\u524d\u70b9\u533a\u95f4\n        x -= siz[ch[id][0]] ; ans = l[id] + x - 1 ; //x\u8868\u793a\u6240\u6c42\u7684\u70b9\u5728\u5f53\u524d\u533a\u95f4\u7684\u6392\u540d\n        if ( x == 1 && l[id] == r[id]  ) { Remove ( id , id ) ; return ; }//\u5982\u679c\u5f53\u524d\u533a\u95f4\u53ea\u6709\u4e00\u4e2a\u76f4\u63a5\u5220\u9664\u5f53\u524d\u533a\u95f4\u5c31\u597d\u4e86\n        else if ( x == 1 ){ l[id] ++ ; pushup ( id ) ; return ; }//\u5982\u679c\u5f53\u524dx\u5728\u7b2c\u4e00\u4e2a\uff0c\u76f4\u63a5\u4f7f\u5de6\u533a\u95f4++\uff0c\u76f8\u5f53\u4e8e\u5220\u9664\u4e86x\u8fd9\u4e2a\u70b9\n        else if ( x == r[id] - l[id] + 1 ) { r[id] -- ; pushup ( id ) ; return ; }//x\u5728\u6700\u540e\u4e00\u4e2a\n        else {\n            int temp = ++ tot ;\n            l[temp] = l[id] + x ; r[temp] = r[id] ; r[id] = l[id] + x - 2 ;\n            ch[temp][1] = ch[id][1] ; ch[id][1] = temp ;\n            dat[temp] = rand ( ) ;\n            pushup ( temp ) ; pushup ( id ) ;\n            if ( dat[ch[id][0]] > dat[id] ) Rotate ( id , 1 ) ;\n            if ( dat[ch[id][1]] > dat[id] ) Rotate ( id , 0 ) ;\n            return ;\n        }//\u65b0\u5efa\u70b9\u628a\u533a\u95f4\u5206\u4e3a[l,x-1] , [x+1,r] , [x,x]\n    }\n}\nvoid Remove2 ( int & id , int x ) {//\u627e\u6700\u540e\u4e00\u5217\u6392\u540d\u4e3ax\u7684\u70b9\n    if ( ! id ) return ;\n    if ( siz[ch[id][0]] >= x ) {\n        Remove2 ( ch[id][0] , x ) ;\n        pushup ( ch[id][0] ) ; pushup ( id ) ;\n        if ( dat[ch[id][0]] > dat[id] ) Rotate ( id , 1 ) ;\n    }\n    else if ( siz[id] - siz[ch[id][1]] < x ) {\n        Remove2 ( ch[id][1] , x - siz[id] + siz[ch[id][1]] ) ;\n        pushup ( ch[id][1] ) ; pushup ( id ) ;\n        if ( dat[ch[id][1]] > dat[id] ) Rotate ( id , 0 ) ;\n    }\n    else {\n        ans = l[id] ;\n        Remove ( id , id ) ;\n    }\n}\nint main ( ) {\n    srand ( 'DSFLY' ) ;//\u4fe1\u4ef0\u4f18\u5316\n    scanf ( \"%d%d%d\" , & n , & m , & q ) ;\n    for ( LL i = 1 ; i <= n ; i ++ )//\u7b2c\u4e00\u6b21for\u5faa\u73af\u91cc\u7684i\u4e5f\u8981\u5f00long long\n        insert ( root[i] , ( i - 1 ) * m + 1 , ( i - 1 ) * m + 1 + m - 1 - 1 ) ;//\u5bf9\u4e8e\u6bcf\u4e00\u884c\u5f00\u4e00\u4e2aroot\uff0c\u76f8\u5f53\u4e8e\u68ee\u6797\u4e86\n    for ( LL i = 1 ; i <= n ; i ++ ) insert ( root[n+1] , i * m , i * m ) ;\n    while ( q -- ) {\n        int x , y ; scanf ( \"%d%d\" , & x , & y ) ;\n        if ( y != m ) Remove1 ( root[x] , y ) ;//\u5982\u679c\u4e0d\u5728\u6700\u540e\u4e00\u5217\uff0c\u5c31\u5728\u884c\u4e2d\u627e\n        else Remove2 ( root[n+1] , x ) ;//\u5728\u6700\u540e\u4e00\u5217\u5c31\u5728\u5217\u4e2d\u627e\n        LL temp = ans ;//\u8bb0\u5f55\u503c\n        printf ( \"%lld\\n\" , ans ) ;\n        if ( y != m ) {//\u5de6\u5bf9\u9f50\n            Remove2 ( root[n+1] , x ) ;\n            insert ( root[x] , ans , ans ) ;\n        }//\u5411\u524d\u770b\n        insert ( root[n+1] , temp , temp ) ;\n    }\n}\n```\n\n\u6700\u540eCSPS rp++\n\n",
        "postTime": 1573515352,
        "uid": 101351,
        "name": "Amentiraz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\n> \u6709\u4e00\u4e2a$n\u00d7m$\u7684\u65b9\u9635\uff0c\u8fdb\u884c$q$\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5c06\u7b2c$(x,y)$\u4e2a\u5b66\u751f\u51fa\u5217\uff0c\u8f93\u51fa\u8be5\u5b66\u751f\u7684\u7f16\u53f7\uff0c\u5e76\u5c06\u961f\u5217\u5148\u5411\u5de6\u5bf9\u9f50\uff0c\u518d\u5411\u524d\u5bf9\u9f50\uff0c\u6700\u540e\u628a\u8be5\u5b66\u751f\u653e\u5728\u7a7a\u4f4d$(n,m$)\u3002\n\n\u795e\u4ed9\u9898\u3002\u4e00\u76f4\u5728\u60f3\u5982\u4f55\u4f7f\u4e00\u884c\u961f\u4f0d\u6574\u4f53\u5411\u5de6\u79fb\u52a8\uff0c\u5411\u4e0a\u79fb\u52a8\uff0c\u6ca1\u60f3\u5230\u53ef\u4ee5\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u641e\u3002~~\u81ea\u5df1\u592a\u84bb\u60f3\u4e0d\u5230\u8fd9\u79cd\u64cd\u4f5c\u554a\u3002~~\n\n\u8be6\u7ec6\u8bb2\u4e00\u4e0b\u6743\u503c\u7ebf\u6bb5\u6811\u5177\u4f53\u5b9e\u73b0\u64cd\u4f5c\u3002\n\n\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5f53\u524d\u884c\u5b66\u751f\u51fa\u5217\u7684\u4fe1\u606f\uff0c\u533a\u95f4\u7ef4\u62a4\u51fa\u5217\u5b66\u751f\u4e2a\u6570\uff0c\u5e76\u5728\u6bcf\u884c\u5f00\u4e00\u4e2a`vector`\u8bb0\u5f55\u540e\u9762\u52a0\u8fdb\u6765\u7684\u5b66\u751f\u7f16\u53f7\u3002\u7b2c$j$\u5217\u5b66\u751f\u51fa\u5217\uff0c\u5373\u5728\u8fd9\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u5c06\u7b2c$j$\u5217\u5b66\u751f\u539f\u6765\u7684\u4f4d\u7f6e$+1$\uff0c\u8868\u793a\u6b64\u4e0b\u6807\u4f4d\u7f6e\u5b66\u751f\u51fa\u5217\uff0c\u7136\u540e\u5c06\u5176\u653e\u8fdb\u5f53\u524d\u884c\u7684`vector`\u3002\u67e5\u8be2\u5f53\u524d\u884c\u7b2c$j$\u5217\u5b66\u751f\u65f6\uff0c\u6211\u4eec\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\uff0c\u50cf\u5e73\u8861\u6811\u90a3\u6837\uff0c\u53c2\u8003\u533a\u95f4\u5df2\u7ecf\u51fa\u5217\u5b66\u751f\u7684\u4fe1\u606f\u6765\u627e\u5230\u8fd8\u672a\u51fa\u5217\u7684\u7b2c$j$\u4e2a\u5b66\u751f\u6b64\u65f6\u7684\u7ebf\u6bb5\u6811\u4e0b\u6807\uff0c\u8fd9\u91cc\u5982\u679c\u4e0b\u6807\u5c0f\u4e8e\u5217\u6570\u90a3\u4e48\u8bf4\u660e\u5c31\u662f\u4e0b\u6807\u5c31\u662f\u539f\u5217\u7f16\u53f7\uff0c\u5426\u5219\u8bf4\u660e\u5f53\u524d\u884c\u7b2c$j$\u4e2a\u662f\u540e\u9762\u52a0\u5165\u7684\u5b66\u751f\uff0c\u4e8e\u662f\u6211\u4eec\u4ece`vector`\u91cc\u9762\u627e\u5c31\u597d\u4e86\u3002\n\n\u53e6\u5916\uff0c\u4e0d\u7528\u62c5\u5fc3\u51fa\u5217`vector`\u91cc\u9762\u7684\u5b66\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a\u51fa\u5217\u5b66\u751f\u65f6\u4f1a\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u5220\u9664\u4e86\u8fd9\u4e2a\u5b66\u751f\uff0c\u6240\u4ee5\u67e5\u8be2\u65f6\u4e0d\u4f1a\u67e5\u5230\u8fd9\u4e2a\u5df2\u7ecf\u88ab\u5220\u9664\u7684\u5b66\u751f\u3002\n\n\u518d\u770b\u8fd9\u9053\u9898\u672c\u8eab\uff0c\u6211\u4eec\u7ef4\u62a4$n+1$\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u524d$n$\u68f5\u7ef4\u62a4\u524d$n$\u5217\u524d$m-1$\u5217\u7684\u4fe1\u606f\uff0c\u7b2c$n+1$\u68f5\u5355\u72ec\u7ef4\u62a4\u7b2c$m$\u5217\u3002\u51fa\u5217\u65f6\uff0c\u5bf9\u4e8e\u7b2c$m$\u5217\u7684\u70b9\uff0c\u6211\u4eec\u76f4\u63a5\u5bf9\u7b2c$n+1$\u68f5\u7ebf\u6bb5\u6811\u64cd\u4f5c\uff1b\u5bf9\u4e8e\u4e0d\u662f\u7b2c$m$\u5217\u7684\uff0c\u6211\u4eec\u5bf9$x$\u884c\u7684\u7ebf\u6bb5\u6811\u64cd\u4f5c\uff0c\u518d\u5bf9\u7b2c$m$\u5217\u7684\u7b2c$x$\u884c\uff08\u5373\u7b2c$n+1$\u68f5\u7ebf\u6bb5\u6811\uff09\u64cd\u4f5c\u5373\u53ef\u3002\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#define ll long long\nusing namespace std;\ninline int read(){\n    char ch=getchar();int s=0;\n    while(ch<'0'||ch>'9') ch=getchar();\n    while(ch>='0'&&ch<='9') s=s*10+(ch^'0'), ch=getchar();\n    return s;\n}\nint n,m,q,mxr;\n#define MAXN 300003\n#define MAXM MAXN*20\nint tre[MAXM],sl[MAXM],sr[MAXM],cnt;\nvoid change(int &x, int l, int r, int pos){\n    if(x==0) x=++cnt;\n    ++tre[x]; // \u533a\u95f4\u5220\u9664\u7684\u5b66\u751f\u4e2a\u6570+1\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    if(pos<=mid) change(sl[x], l, mid, pos);\n    else change(sr[x], mid+1, r, pos);\n}\nint query(int x, int l, int r, int k){\n    if(l==r) return l;\n    int mid=(l+r)>>1;\n    int lsum=mid-l+1-tre[sl[x]]; // \u5de6\u513f\u5b50\u533a\u95f4\u5b9e\u9645\u5b58\u5728\u7684\u5b66\u751f\u4e2a\u6570\n    if(lsum>=k) return query(sl[x], l, mid, k);\n    else return query(sr[x], mid+1, r, k-lsum);\n}\nint rot[MAXN];\nint rot_last_col;\nvector<ll> ext[MAXN+1];\ninline ll del_last_col(int x){\n    int pos=query(rot_last_col, 1, mxr, x); // \u627e\u5230\u5b9e\u9645\u7b2cx\u4e2a\u5b66\u751f\u7684\u4e0b\u6807\n    change(rot_last_col, 1, mxr, pos);\n    if(pos<=n) return (ll)pos*m;\n    else return ext[n+1][pos-n-1];\n}\ninline ll del(int x, int y){\n    int pos=query(rot[x], 1, mxr, y);\n    change(rot[x], 1, mxr, pos);\n    if(pos<=m-1) return (ll)(x-1)*m+pos;\n    else return ext[x][pos-m];\n}\nint main(){\n    n=read(),m=read(),q=read();\n    mxr=max(n,m)+q;\n    while(q--) {\n        int x=read(),y=read();\n        if(y==m){\n            ll ans=del_last_col(x); // \u5220\u9664\u6700\u540e\u4e00\u5217\u7684\u7b2cx\u884c\n            ext[n+1].push_back(ans); // \u5c06(x,y)\u653e\u5230\u4f4d\u7f6e(n,m)\n            printf(\"%lld\\n\", ans);\n        }else{\n            ll ans=del(x, y); // \u5220\u9664\u7b2cx\u884c\u7b2cy\u5217\n            ll ans2=del_last_col(x); // \u5220\u9664\u6700\u540e\u4e00\u5217\u7684\u7b2cx\u884c\n            ext[x].push_back(ans2);  // \u5c06\u7b2cx\u884c\u6700\u540e\u4e00\u5217\u7684\u5b66\u751f\u52a0\u5165\u5230\u7b2cx\u884c\u4e2d\n            ext[n+1].push_back(ans);  // \u5c06(x,y)\u653e\u5230\u4f4d\u7f6e(n,m)\n            printf(\"%lld\\n\", ans);\n        }\n    }\n    return 0;\n}\n```\n\n\n",
        "postTime": 1572786783,
        "uid": 63896,
        "name": "Santiego",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u8fd9\u662fNOIP 2017\u6700\u540e\u4e00\u9053\u9898\n\n\u4e0d\u77e5\u9053\u8fd9\u9053\u9898\u6709\u6ca1\u6709\u4eba\u4ee3\u7801\u5199\u7684\u548c\u6211\u4e00\u6837\u9ebb\u70e6.\n### Solution\n#### 30\u5206\u66b4\u529b\n\u7ef4\u62a4\u6bcf\u884c\u6bcf\u5217\u7684\u5143\u7d20.\n\n\u6bcf\u6b21\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019, \u9700\u8981\u4fee\u6539\u4e00\u884c\u4e00\u5217\n\n\u56e0\u6b64\u590d\u6742\u5ea6\u4e0a\u754c$O(nmq)$.\n\n#### 50\u5206\u94fe\u8868\n\u56e0\u4e3a\u67e5\u8be2\u64cd\u4f5c\u6bd4\u8f83\u5c11\n\u7136\u540e\u53c8\u9700\u8981\u652f\u6301\u5feb\u901f\u5220\u9664\u4e00\u4e2a\u6570\u7684\u64cd\u4f5c.\n\u663e\u7136\u53ef\u4ee5\u7528\u94fe\u8868\u6765\u5904\u7406.\n\n\u5177\u4f53\u4e00\u70b9\u5c31\u4f3c\u4e4e\n\n#### 70\u5206\u7ebf\u6bb5\u6811\n\u8fd920\u5206\u7684\u90e8\u5206\u5206\u6765\u81ea\u4e8e\u961f\u4f0d\u53ea\u6709\u4e00\u884c\u7684\u60c5\u51b5.\n\n\u8fd9\u4e2a\u505a\u6cd5\u662f\u6bd4\u8f83\u91cd\u8981\u7684\u5427!\n\u5e94\u8be5\u662f100\u5206\u505a\u6cd5\u7684\u57fa\u7840.\n\n\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u961f\u5217\u524dm-1\u4e2a\u4f4d\u7f6e.\n\u8fd9\u4e2a\u4f4d\u7f6e\u6709\u4eba\u8bb0\u4e3a1, \u6ca1\u4eba\u8bb0\u4e3a0, \u90a3\u4e48\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u7b2c\u4e00\u4e2a$s_i=x$\u7684\u4f4d\u7f6e, \u8fd9\u4e2a\u5730\u65b9\u7c7b\u4f3c\u4e8e\u4e3b\u5e2d\u6811\u5427!\n\n#### 100\u5206\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\n\u53d1\u73b0\u5982\u679c\u6309\u4e0a\u976270\u5206\u7684\u505a\u6cd5\u5f00n + 1\u9897\u7ebf\u6bb5\u6811\u5206\u522b\u7ef4\u62a4\u6bcf\u4e00\u884c\u7684\u524d m - 1\u4e2a\u5143\u7d20\u548c\u6700\u540e\u4e00\u5217.\n\u8fd9\u6837\u505a\u7684\u8bdd, \u80af\u5b9a\u4f1a\u8d85\u8fc7\u7a7a\u95f4\u9650\u5236\u7684.\n\u4f46\u662f\u53d1\u73b0\u4e00\u5171\u4fee\u6539q\u6b21\u7684\u8bdd\u7ebf\u6bb5\u6811\u6ca1\u5fc5\u8981\u6bcf\u4e2a\u8282\u70b9\u90fd\u5f00.\n\u6240\u4ee5\u6b63\u89e3\u5927\u6982\u5c31\u662f\u8fd9\u6837\u7684\u5440.\n\n\u6211\u4e0d\u77e5\u9053\u6211\u662f\u548b\u5199\u7684\u53cd\u6b63\u51fa\u6765\u597d\u591a\u7ec6\u8282\n\u56e0\u4e3a\u8003\u8651\u7684\u6bd4\u8f83\u5468\u5230\u52a0\u4e0a70\u5206\u505a\u6cd5\u7684\u57fa\u7840\n\u5927\u6982\u662f\u5199\u5bf9\u4e86\n\n\u4e0d\u8fc7\u6709\u4e00\u4e2a\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u5904\u7406\u7684\u95ee\u9898\n\u5c31\u662f\u6211\u6bcf\u9897\u7ebf\u6bb5\u6811\u5f00\u8282\u70b9\u90fd\u662f$2 ( m - 1)$, \u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u4fee\u6539\u90fd\u5728\u4e00\u884c\u5185\u8fdb\u884c\u5e76\u4e14q\u5927\u4e8em\u7684\u8bdd, \u6211\u662f\u5904\u7406\u4e0d\u4e86\u7684\n70\u5206\u505a\u6cd5\u4e5f\u6709\u8fd9\u6837\u7684\u95ee\u9898, \u4e0d\u8fc7\u4e0d\u662f\u52a8\u6001\u5f00\u8282\u70b9\u7684\u8bdd\u5c31\u968f\u4fbf\u5904\u7406\u4e00\u4e0b\u5c31OK\u4e86.\n\u8fd9\u4e2a\u5982\u679c\u4e25\u683c\u7684\u6309\u7167m - 1 + q\u5f00\u8282\u70b9\u7684\u8bdd, \u6bd4\u8f83\u96be\u529e.\n\n\u6240\u4ee5\u6211\u7684\u89e3\u51b3\u65b9\u6848\u662f\u7b2c\u4e00\u884c\u7684\u7ebf\u6bb5\u6811\u5efa$2q$\u4e2a\u8282\u70b9, \u518d\u628a\u7b2c$m-q$\u4e2a\u8282\u70b9\u66b4\u529b\u4fee\u6539\u5c31OK\u4e86.\n\u5982\u679c\u6709\u4eba\u6709\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848, \u8bf7\u591a\u591a\u6307\u6559.\n\n### Code\n**\u6307\u9488\u8b66\u544a!**\n\n\u6211\u4e00\u822c\u4e0d\u4f1a\u523b\u610f\u5361\u5e38, \u5199\u7684\u5f00\u5fc3\u5c31\u597d.(\u4e0d\u9700\u8981\u5361\u5e38\u5440) \u6240\u4ee5\u5f88\u6162.\n\n\u6839\u636e\u4ee5\u5f80\u5361\u5e38\u7684\u7ecf\u9a8c, \u5f00\u5185\u5b58\u6c60, \u4f7f\u7528\u6b63\u786e\u7684`long long`\u59ff\u52bf, \u8bfb\u5165\u4f18\u5316\u7b49\u5e38\u89c4\u4f18\u5316\u5e94\u8be5\u80fd\u5feb\u4e00\u70b9.\n\n#### 50\u5206\n[50\u5206\u94fe\u8868](https://paste.ubuntu.com/p/7D4ny8bFz3/)\n\n#### 70\u5206\n[70\u5206\u7ebf\u6bb5\u6811](https://paste.ubuntu.com/p/4KYTQ7N5xH/)\n#### 90\u5206\n[90\u5206\u7ebf\u6bb5\u6811](https://paste.ubuntu.com/p/8Q57ddBC7T/)\n\n#### 100\u5206\n[100\u5206](https://paste.ubuntu.com/p/SgGZxnQvzw/)",
        "postTime": 1540779674,
        "uid": 39067,
        "name": "aiyougege",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u5f00n\u68f5\u7ebf\u6bb5\u6811\u5b58\u6bcf\u6392\u524dm-1\u4e2a\u6570\uff0c\u518d\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u5b58\u6700\u540e\u4e00\u5217\n\u5c06\u5220\u9664\u7684\u6570\u5b58\u5165vector\n\u7ebf\u6bb5\u6811\u4e2d\u5b58\u4f7f\u7528\u6807\u8bb0\u5373\u5220\u9664\u6807\u8bb01.1.  \n\u533a\u95f4\u4e2d\u672a\u4f7f\u7528\u7684\u70b9=\u533a\u95f4\u5927\u5c0f-\u4f7f\u7528\u6807\u8bb0 \n\n------------\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#define lson ls[p] \n#define rson rs[p]\n#define LL long long \nusing namespace std;\n\nconst int maxn=3e5+5;\nconst int maxm=1e7+5;\n\nint n,m,q,k,x,y,root[maxn],sum[maxm],ls[maxm],zz,rs[maxm],cnt=0;\n\nvector<LL> G[maxn+5];\n\nvoid change(int &p,int x,int l,int r){//\u6807\u8bb0\u4f7f\u7528 \n    if(!p) p=++cnt;//\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u65b0\u5efa\u8282\u70b9 \n    sum[p]++;//\u8be5\u533a\u95f4\u4f7f\u7528\u6807\u8bb0\u589e\u52a0 1\n    if(l==r) return ;\n    int mid=(l+r)>>1;\n    if(x<=mid)change(lson,x,l,mid);\n    else change(rson,x,mid+1,r);\n}\n\nint rank(int p,int x,int l,int r){//\u6392\u540d\u4e3ak\u7684\u6570 \n    if(l==r) return l;\n    int mid=(l+r)>>1;\n    int lsize=mid-l+1-sum[lson];//\u5de6\u533a\u95f4\u4e2d\u672a\u4f7f\u7528\u7684\u70b9=\u5de6\u533a\u95f4\u5927\u5c0f-\u4f7f\u7528\u6807\u8bb0 \n    if(x<=lsize) return rank(lson,x,l,mid);\n    else return rank(rson,x-lsize,mid+1,r);\n}\n\ninline LL update_m(int x)//\u5bf9\u6700\u540e\u4e00\u5217\u64cd\u4f5c \n{\n    int w=rank(root[n+1],x,1,zz);\n    change(root[n+1],w,1,zz);\n    LL tot=0;\n    if(w>n) tot=G[n+1][w-n-1];\n    else tot=1LL*w*m;\n    return tot;\n}\n\ninline LL update_n(int x,int y)//\u5bf9\u524dn\u6392\u64cd\u4f5c \n{\n    int w=rank(root[x],y,1,zz); \n    change(root[x],w,1,zz);\n    LL tot=0;\n    if(w>=m) tot=G[x][w-m];//\u83b7\u5f97\u7f16\u53f7 \n    else tot=1LL*(x-1)*m+w;\n    return tot;\n}\n\nint main ()\n{\n    scanf(\"%d%d%d\",&n,&m,&q);\n    zz=max(n,m)+q;//\u6700\u5927\u503c\u57df,\u503c\u57df\u8d8a\u5927\uff0c\u5bf9\u5185\u5b58\u6d88\u8017\u8d8a\u5927\uff0c\u64cd\u4f5c\u65f6\u95f4\u82b1\u8d39\u8d8a\u5927 \n    for(int i=1;i<=q;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        if(y==m)\n        {\n        \tLL w=update_m(x);//\u83b7\u5f97\u8be5\u70b9\u7684\u7f16\u53f7\u5e76\u5220\u9664 \n            printf(\"%lld\\n\",w);\n            G[n+1].push_back(w);//\u5728\u8be5\u5217vector\u4e2d\u52a0\u5165\u51fa\u961f\u7f16\u53f7 \n            //\u5173\u952e\u7406\u89e3vector\u5b58\u7f16\u53f7\uff0c\u4ee5\u540e\u67e5\u4e3a\u4ec0\u4e48\u4e0d\u9519 \n        }\n        else\n        {\n        \tLL w=update_n(x,y);\n        \tG[n+1].push_back(w);\n            printf(\"%lld\\n\",w);\n            LL ww=update_m(x);\n            G[x].push_back(ww);                                            \n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1540644502,
        "uid": 47217,
        "name": "int_LL",
        "ccfLevel": 0,
        "title": "noip2017\u5217\u961f\uff08\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff09"
    },
    {
        "content": "\u8fd9\u9053\u9898\u611f\u89c9\u5c31\u662f\u7eaf\u6570\u636e\u7ed3\u6784\u9898\uff0c\u7528\u52a8\u6001segmenttree\u7684\u8bdd\u4ee3\u7801\u4f1a\u77ed\u4e00\u4e9b\u3002\u3002\n\n#### \u601d\u8def\uff1a\n\n\u5bf9\u4e8e\u4e00\u5f20\u56fe\uff0cn\u5217m\u884c\uff0c\u53ef\u4ee5\u5efa\u51fan+1\u4e2a\u7ebf\u6bb5\u6811\n\n--------- |\n\n--------- |\n\n--------- |\n\n\u5982\u56fe\u5c31\u6709\u56db\u4e2a\u7ebf\u6bb5\u6811\uff0c\u73b0\u5728\u5bf9\u4e8e\u4e00\u4e2a\u64cd\u4f5c\u5927\u81f4\u6709\u4e00\u4e0b\u51e0\u4e2a\u6b65\u9aa4\n\n>1.\u67e5\u627e\u8fd9\u4e2a\u7b54\u6848\u5728\u8fd9\u4e2a\u6811\u4e2d\u7684\u4f4d\u7f6e\uff08\u5982\u679c\u7b54\u6848\u5728m\u4ee5\u5185\uff0c\u76f4\u63a5\u8f93\u51fa\uff0c\u5426\u5219\u8f93\u51fa\u65b0\u5efa\u6570\u7ec4\u4e2d\u7684\u503c\uff09\n\n>2.\u5c06\u5b83\u79fb\u52a8\u5230\u6700\u53f3\u8fb9\u4e00\u5217\u6570\n\n>3.\u5220\u6389\u5b83\u548c\u53f3\u8fb9\u4e00\u5217\u6811\u79cd\u7684\u8fd9\u4e00\u884c\u5bf9\u5e94\u7684\u503c\uff0c\u5e76\u628a\u53f3\u8fb9\u6811\u4e2d\u7684\u8fd9\u4e2a\u503c\u79fb\u8fdb\u6765\n\n\u6240\u4ee5\u5185\u5b58\u6700\u591a\u53ea\u6709log\uff08n\uff09*q+m,\u5927\u69826\u767e\u4e07\u5de6\u53f3\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define lowbit(x) (x&(-x))\n#define FOR(i,a,b) for(int i=(a);i<=(b);i++)\n#define DOR(i,a,b) for(int i=(a);i>=(b);i--)\n#define N 300005\ntypedef long long LL;\nvector<LL>G[N];\nint MAXN,x,y,n,m,q,siz=0,rt[N];\nstruct node {\n\tint sum,lson,rson;\n} e[N*20];\nstruct Dynatictree {\n\tvoid Update(int &u,int L,int R,int pos) {\n\t\tif(!u)u=++siz;\n\t\te[u].sum++;\n\t\tif(L==R)return;\n\t\tint mid=(L+R)>>1;\n\t\tif(pos<=mid)Update(e[u].lson,L,mid,pos);\n\t\telse Update(e[u].rson,mid+1,R,pos);\n\t}\n\tLL Query(int u,int L,int R,int kth) {\n\t\tif(L==R)return L;\n\t\tint mid=(L+R)>>1;\n\t\tint tmp=mid-L+1-e[e[u].lson].sum;\n\t\tif(tmp>=kth)return Query(e[u].lson,L,mid,kth);\n\t\telse return Query(e[u].rson,mid+1,R,kth-tmp);\n\t}\n\tLL GETR(int kth,LL val) {\n\t\tLL ans;\n\t\tint id=Query(rt[n+1],1,MAXN,kth);\n\t\tUpdate(rt[n+1],1,MAXN,id);\n\t\tif(id<=n)ans=1LL*(id-1)*m+m;\n\t\telse ans=G[n+1][id-n-1];\n\t\tG[n+1].push_back((val?val:ans));\n\t\treturn ans;\n\t}\n\tLL GETL(int x,int kth) {\n\t\tLL ans;\n\t\tint id=Query(rt[x],1,MAXN,kth);// \u627e\n\t\tUpdate(rt[x],1,MAXN,id);//\u52a0\u70b9\n\t\t//\tcout<<x<<\"-\"<<id<<\"  \";\n\t\tif(id<m)ans=1LL*(x-1)*m+id;//\u5f97\u51fa\u7b54\u6848\n\t\telse ans=G[x][id-m];\n\t\tG[x].push_back(GETR(x,ans));   //\u628a\u70b9\u52a0\u56de\u53bb\n\t\treturn ans;\n\t}\n} Tree;\nint main() {\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\tMAXN=max(n,m)+q;\n\twhile(q--) {\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tif(y==m)printf(\"%lld\\n\",Tree.GETR(x,0));\n\t\telse {\n\t\t\tprintf(\"%lld\\n\",Tree.GETL(x,y));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1538458446,
        "uid": 123398,
        "name": "piupiu\u7684\u8111\u6b8b\u7c89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\n *\t\u5bf9\u6bcf\u4e00\u884c,\u5c06\u64cd\u4f5c\u53d8\u4e3a\u4ee5\u4e0b\u4e24\u79cd\n *\t\u4ece\u8be5\u961f\u5217\u4e2d\u5220\u9664\u4e00\u4e2a\u6570(\u7559\u767d)\n *\t\u5728\u8be5\u961f\u5217\u5c3e\u90e8\u52a0\u5165\u4e00\u4e2a\u6570\n *\t\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u884c\u5f00\u4e00\u4e2a\u5220\u9664\u7ebf\u6bb5\u6811\n *\t\u7136\u540e\u518d\u5f00\u4e00\u4e2a\u6570\u503c\u7ebf\u6bb5\u6811\u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6570\t\u4f46\u662f[1,M-1]\u4e0d\u63d2\u5165\n *\t\u5220\u9664\u65f6\uff0c\u901a\u8fc7\u4e8c\u5206\u5c06\u4e0d\u542b\u7559\u767d\u7684\u4f4d\u7f6e\u8f6c\u5316\u6210\u542b\u6709\u7559\u767d\u7684\u4f4d\u7f6e\n *\t\u5728\u5bf9\u5e94\u4f4d\u7f6e\u6253\u4e00\u4e2a\u5220\u9664\u6807\u8bb0++\n *\n * \t\u5220\u9664\u6807\u8bb0\u7ef4\u62a4\uff1a\n * \t[1,M-1]\u4e4b\u95f4\u5220\u9664\u65f6\uff0c\u5bf9\u5e94\u4e0b\u6807--\n * \t\u5c3e\u90e8\u52a0\u5165\u65f6\uff0c\u5bf9\u5e94\u4e0b\u6807++\n *  [M,pt]\u5220\u9664\u65f6\uff0c\u5bf9\u5e94\u4e0b\u6807--\n * \n *\t\u5728\u5c3e\u90e8\u52a0\u5165\u6570\u65f6\uff0c\u8981\u7ef4\u62a4\u4e00\u4e2a\u542b\u6709\u7559\u767d\u7684\u6807\u53f7\u7684\u6307\u9488pt\uff0c\u6bcf\u6b21\u5411\u6b64\u4f4d\u7f6e(++pt)\u5728\u6570\u503c\u7ebf\u6bb5\u6811\u4e2d\u52a0\u5165\u6570\n *\n *  \u5173\u952e\u64cd\u4f5c\uff1a\u4e8c\u5206\u8f6c\u5316\u4e0b\u6807x\n *  \u5bf9\u4e8e\u524d[1,M-1]\u4e2a\u4f4d\u7f6e\uff0c\u83b7\u53d6\u8be5\u533a\u95f4\u73b0\u6709\u591a\u5c11\u4e2a\u6570t\n *  if(x<=t)\n *  \t//\u5728[1,M-1]\u4e4b\u95f4\u4e8c\u5206\n *  \t\u50cf\u4e3b\u5e2d\u6811\u90a3\u6837\u4e8c\u5206\n *   \t\u6bcf\u6b21\u8ba1\u7b97\u505a\u533a\u95f4\u7684\u6570\u7684\u6570\u91cf\u65f6\u7528\u533a\u95f4\u957f\u5ea6\u51cf\u53bb\u5220\u9664\u6570\u4e2a\u6570\n *  else\n *  \t//\u5728[M+1,pt]\u4e4b\u95f4\u4e8c\u5206\n *  \t\u50cf\u4e3b\u5e2d\u6811\u90a3\u6837\u4e8c\u5206\n *\n * ******************************************\n *\n * \u5bf9\u4e8e\u5c3e\u90e8\u4e00\u5217\u7684\u7ef4\u62a4\uff1a\n * \u5f00\u59cb\u65f6\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u52a0\u4e0a\u5e94\u6709\u7684\u6570\uff0c\u5e76\u4e14\u6253\u597d\u5220\u9664\u6807\u8bb0\uff08\u6216\u8005\u53eb\u5b58\u5728\u6807\u8bb0\uff09\n * \u5220\u9664\u65f6\u76f4\u63a5\u6539\u53d8\u5220\u9664\u6807\u8bb0\uff0c\u63d2\u5165\u540c\u7406\n * \u4e8c\u5206\u4eff\u9020\u4e3b\u5e2d\u6811\n```cpp\n#include <bits/stdc++.h>\nconst int MAXN=3*1e5+30,MAXT=2*MAXN;\n#define ll long long\nusing namespace std;\n//defs==============================\nint N,M,Q;\nint ptr[MAXN];\n//seg_tree=========================\nstruct node{\n\tint l,r,sum;//sum\u8fd9\u91cc\u7ef4\u62a4\u7684\u5c31\u662f\u6240\u8c13\u7684\u5220\u9664\u6807\u8bb0\n\tll num;\n}T[MAXN*60];\nint tot,Rt[MAXN];\nint & LastRoot=Rt[0],&LastPtr=ptr[0];\n//Rt[0] \u6700\u540e\u4e00\u5217 Rt[1-N] \u6309\u884c\nvoid insert_tag(int &x,int pos,ll vv,int L=1,int R=MAXT) {//\u6539\u53d8\u5220\u9664\u6807\u8bb0\n\tif(!x)\tx=++tot;\n\tT[x].sum+=vv;\n\tif(L==R)\treturn;\n\tint mid=(L+R)>>1;\n\tif(pos<=mid)\tinsert_tag(T[x].l,pos,vv,L,mid);\n\telse\t\t\tinsert_tag(T[x].r,pos,vv,mid+1,R);\n}\nvoid insert_num(int &x,int pos,ll vv,int L=1,int R=MAXT) {//\u63d2\u5165\u6570\n\tif(!x)\tx=++tot;\n\tif(L==R)\t{\n\t\tT[x].num=vv;\n\t\treturn;\n\t}\n\tint mid=(L+R)>>1;\n\tif(pos<=mid)\tinsert_num(T[x].l,pos,vv,L,mid);\n\telse\t\t\tinsert_num(T[x].r,pos,vv,mid+1,R);\n}\nll query(int x,int B,int E,int L=1,int R=MAXT) {\n\tif(L>E || R<B)\treturn 0ll;\n\tif(B<=L && R<=E)\treturn T[x].sum;\n\tint mid=(L+R)>>1;\n\treturn query(T[x].l,B,E,L,mid)+query(T[x].r,B,E,mid+1,R);\n}\nll query_num(int x,int pos,int L=1,int R=MAXT) {\n\t//if(!x)\tprintf(\"Error!\");\n\tif(L==R) return T[x].num;\n\tint mid=(L+R)>>1;\n\tif(pos<=mid) return query_num(T[x].l,pos,L,mid);\n\telse return  query_num(T[x].r,pos,mid+1,R);\n}\nint kth_line(int x,int k,int L=1,int R=MAXT) {//[1,M-1]\u4e4b\u95f4\u4e8c\u5206\n\tif(L==R)\treturn L;\n\tint mid=(L+R)>>1;\n\tint t=T[ T[x].l ].sum;\n\tif(L<=M-1)\n\t\tt+=min(mid,M-1)-L+1;\n\tif(k<=t)\treturn kth_line(T[x].l,k,L,mid);\n\telse\t\treturn kth_line(T[x].r,k-t,mid+1,R);\n}\nint kth_seq(int x,int k,int L=1,int R=MAXT) {\n\tif(L==R)\treturn L;\n\tint mid=(L+R)>>1;\n\tint t=T[ T[x].l ].sum;\n\tif(k<=t)\treturn kth_seq(T[x].l,k,L,mid);\n\telse\t\treturn kth_seq(T[x].r,k-t,mid+1,R);\n}\n//main==============================\nint main() {\n\tfreopen(\"2017phalanx.in\",\"r\",stdin);\n\tfreopen(\"2017phalanx.out\",\"w\",stdout);\n\tscanf(\"%d%d%d\",&N,&M,&Q);\n\tfor(int i=1;i<=N;++i) {\n\t\tinsert_num(LastRoot,i,1ll*i*M);\n\t\tinsert_tag(LastRoot,i,1);\n\t\tptr[i]=M-1;\n\t}\n\tLastPtr=N;\n\tfor(int i=1;i<=Q;++i) {\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tif(y!=M) {\n\t\t\tint pos=kth_line(Rt[x],y);\n\t\t\tll ans;\n\t\t\tif(pos<=M-1)\t{\n\t\t\t\tans=1ll*(x-1)*M+pos;\n\t\t\t} else {\n\t\t\t\tans=query_num(Rt[x],pos);\n\t\t\t}  \t\t\t\t\n\t\t\tprintf(\"%lld\\n\",ans);\n\t//\u5220\u9664\n\t\t\tinsert_tag(Rt[x],pos,-1);\n\t\t\tint pos_in=kth_seq(LastRoot,x);\n\t\t\tll num_in=query_num(LastRoot,pos_in);\n\t\t\tinsert_tag(LastRoot,pos_in,-1);//\u5c06\u6700\u540e\u4e00\u5217\u4e2d\u7684\u6570\u5220\u9664\n\t\t\t++ptr[x];//\u5c06\u539f\u6765\u6700\u540e\u4e00\u5217\u7684\u6570\u63d2\u5165\u8fdb\u6765\n\t\t\tinsert_num(Rt[x],ptr[x],num_in);\n\t\t\tinsert_tag(Rt[x],ptr[x],1);\n\t\t\t//\u5c06\u539f\u6765\u7684\u6570\u63d2\u56delastroot\u961f\u5c3e\n\t\t\t++LastPtr;\n\t\t\tinsert_tag(LastRoot,LastPtr,1);\n\t\t\tinsert_num(LastRoot,LastPtr,ans);\t\t\n\t\t} else {//y==M,\u53e6\u5916\u4e00\u79cd\u60c5\u51b5\n\t\t\tint pos_in=kth_seq(LastRoot,x);\n\t\t\tll num_in=query_num(LastRoot,pos_in),ans=num_in;\n\t\t\tprintf(\"%lld\\n\",num_in);\n\t\t\tinsert_tag(LastRoot,pos_in,-1);//\u5c06\u6700\u540e\u4e00\u5217\u4e2d\u7684\u6570\u5220\u9664\n\t\t\t//\u5c06\u539f\u6765\u7684\u6570\u63d2\u56delastroot\u961f\u5c3e\n\t\t\t++LastPtr;\n\t\t\tinsert_tag(LastRoot,LastPtr,1);\n\t\t\tinsert_num(LastRoot,LastPtr,ans);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1527765067,
        "uid": 20565,
        "name": "wzj423",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011\u3010NOIP\u3011\u5217\u961f"
    },
    {
        "content": "\u6700\u5f31\u7684Splay\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u66b4\u529b\u6a21\u62df30\u5206\uff08NOIP2017\u5b9e\u9645\u5f97\u5206\uff0c\u56e0\u4e3a\u90a3\u65f6\u8fdeSplay\u90fd\u4e0d\u4f1a\uff09\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u53d1\u73b0\u53ea\u662f\u4e00\u4e2a\u70b9\u4ece\u5e8f\u5217\u91cc\u642c\u5230\u4e86\u53e6\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5176\u5b83\u70b9\u7684\u76f8\u5bf9\u4f4d\u7f6e\u90fd\u6ca1\u53d8\uff0c\u53ef\u4ee5\u60f3\u5230\u7ef4\u62a4\u6bcf\u4e00\u884c\u7684\u524d$m-1$\u5217\u7684\u5e73\u8861\u6811\uff0c\u8fd8\u6709\u6700\u540e\u4e00\u5217\u7684\u5e73\u8861\u6811\u3002\u4f46\u662f\u5982\u679c\u5bf9\u6240\u6709\u70b9\u90fd\u5f00\u4e00\u4e2aSplay\uff0c\u56e0\u4e3aMLE\u7684\u95ee\u9898\uff0c\u53ea\u80fd\u83b7\u5f9760\u5206\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u56e0\u4e3a\u8be2\u95ee\u6b21\u6570\u53ea\u6709$O(N)$\u7ea7\u522b\uff0c\u53ef\u4ee5\u53d1\u73b0\u64cd\u4f5c\u5b8c\u4e4b\u540e\u8fd8\u6709\u5f88\u591a\u884c\u7684\u67d0\u4e00\u4e9b\u533a\u95f4\u662f\u8fde\u7eed\u7684\u533a\u95f4\u3002\u8003\u8651\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u4e00\u6bb5\u533a\u95f4\uff0c\u5f53\u67d0\u64cd\u4f5c\u4f7f\u5f97\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4\u88ab\u7834\u574f\u6389\u7684\u65f6\u5019\uff0c\u52a8\u6001\u5f00\u70b9\uff0c\u628a\u533a\u95f4\u62c6\u6210\u81f3\u591a$3$\u6bb5\uff08\u5176\u4e2d\u4e2d\u95f4\u4e00\u6bb5\u5c31\u662f\u4e00\u4e2a\u70b9\uff09\uff0c\u518d\u628a\u4e2d\u95f4\u90a3\u4e2a\u70b9\u79fb\u8d70\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(q\\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(4n+2q)$\uff08\u56e0\u4e3a\u9700\u8981\u54e8\u5175\u8282\u70b9\u7684\u7a7a\u95f4\uff09\u3002\u7531\u4e8e\u5e38\u6570\u5de8\u5927\uff0c\u6700\u540e\u4e24\u4e2a\u70b9\u4e0d\u5f00\u6c27\u6c14\u6839\u672c\u8fdb\u4e0d\u4e861000ms\u3002\u3002\u3002\u3002\u3002\u3002insert\u5e38\u6570\u5927\uff0c\u6240\u4ee5\u4e0b\u9762\u7528\u4e86\u4e00\u79cd\u66b4\u529b\u63d2\u5165\u7684\u529e\u6cd5\u2014\u2014\u5f3a\u884c\u628a\u65b0\u70b9\u585e\u5230\u6839\u4e0e\u5de6/\u53f3\u513f\u5b50\u4e4b\u95f4\n\n\u5b9e\u73b0\u7ec6\u8282\u5de8\u591a\uff0cDebug 1day\u3002\u3002\u3002\u3002\u3002\u3002\n```\n#include<cstdio>\n#include<cstdlib>\ntypedef long long LL;\n#define RG register\n#define R RG int\n#define II inline int\n#define IV inline void\n#define G ch=getchar()\n#define lc c[x][0]\n#define rc c[x][1]\nconst int N=300009,M=N*6;//\u7a7a\u95f4\u5f00\u591f\nint f[M],c[M][2],v[M],s[M],end[N];\n//end\u662f\u6bcf\u4e2a\u5e73\u8861\u6811\u7684\u672b\u54e8\u5175\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5b8c\u90fd\u628a\u5b83\u65cb\u5230\u6839\nLL id[M];\nIV in(R&z){\n\tRG char G;\n\twhile(ch<'-')G;\n\tz=ch&15;G;\n\twhile(ch>'-')z*=10,z+=ch&15,G;\n}\nIV pushup(R x){\n\ts[x]=s[lc]+s[rc]+v[x];\n}\nIV rotate(R x){\n\tR y=f[x],z=f[y],k=c[y][1]==x,w=c[x][!k];\n\tc[z][c[z][1]==y]=x;c[x][!k]=y;c[y][k]=w;\n\tpushup(f[w]=y);f[y]=x;f[x]=z;\n}\nIV splay(R x,R tg){\n\tR y;\n\twhile(tg!=(y=f[x])){\n\t\tif(tg!=f[y])\n\t\t\trotate((c[f[y]][0]==y)^(c[y][0]==x)?x:y);\n\t\trotate(x);\n\t}\n\tpushup(x);\n}\nII find(R x,R k){\n\twhile(1){\n\t\tif(k<=s[lc])x=lc;\n\t\telse if((k-=s[lc])<=v[x])break;\n\t\telse k-=v[x],x=rc;\n\t}\n\tsplay(x,0);\n\treturn x;\n}\nII findr(R x){//\u627e\u524d\u9a71\n\twhile(rc)x=rc;\n\treturn x;\n}\nII findl(R x){//\u627e\u540e\u7ee7\n\twhile(lc)x=lc;\n\treturn x;\n}\n#define np(I,V,S) id[++p]=I;v[p]=V;s[p]=S//\u52a8\u6001\u5f00\u70b9\n#define del(P)\\\n\tsplay(rt=findr(lc),0);\\\n\tsplay(x=findl(rc),rt);\\\n\tP=lc;lc=0;pushup(x);pushup(rt)//\u6682\u65f6\u5220\u9664\u5e76\u628a\u4e0b\u6807\u5b58\u5728\u53d8\u91cfP\u4e2d\n#define con(P,C) f[c[P][0]=C]=P//\u5efa\u7acb\u7236\u5b50\u5173\u7cfb\n#define ins(P) con(P,lc);con(x,P)//\u5f3a\u884c\u63d2\u5165\n#define add(P) ins(P);pushup(P);pushup(x)//\u63d2\u5165\u5e76\u66f4\u65b0\nint main(){\n\tR p=0,n,m,q,i,a,b,x,y,z,rt;\n\tin(n);in(m);in(q);\n\tfor(i=1;i<=n;++i){\n\t\tnp(0,1,1);              con(p+1,p);\n\t\tnp((LL)(i-1)*m+1,m-1,m);con(p+1,p);\n\t\tnp(0,1,m+1);            end[i]=p;\n\t}//\u521d\u59cb\u90fd\u662f\u66b4\u529b\u5efa\u6811\uff0c\u76f4\u63a5\u5f04\u4e00\u6761\u94fe\n\tfor(i=0;i<=n;++i){\n\t\tnp((LL)i*m,1,i+1);      con(p+1,p);\n\t}\n\tnp(0,1,i+1);                end[0]=p;\n\twhile(q--){\n\t\tin(a);in(b);\n\t\tif(b==m){//\u7279\u5224\n\t\t\tx=find(end[0],a+1);\n\t\t\tprintf(\"%lld\\n\",id[x]);\n\t\t\tdel(y);splay(x=end[0],0);add(y);\n\t\t\tcontinue;\n\t\t}\n\t\tx=find(end[a],b+1);\n\t\tif(v[x]>1){\n\t\t\ty=s[lc];//\u4ed4\u7ec6\u5224\u65ad\u662f\u5426\u9700\u8981\u5f00\u70b9\n\t\t\tif(y<b){\n\t\t\t\tnp(id[x],b-y,b);ins(p);\n\t\t\t}\n\t\t\tif(y+v[x]-1>b){\n\t\t\t\tnp(id[x]-y+b+1,v[x]+y-b-1,v[p]+s[rc]);\n\t\t\t\tf[c[p][1]=rc]=p;f[rc=p]=x;\n\t\t\t}\n\t\t\tid[x]+=b-y;v[x]=1;\n\t\t}\n\t\tprintf(\"%lld\\n\",id[x]);del(y);\n\t\tx=find(end[0],a+1);del(z);\n\t\tsplay(x=end[a],0);add(z);//\u5728Splay\u4e2d\u4e92\u6362\u4f4d\u7f6e\n\t\tsplay(x=end[0],0);add(y);\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1522631919,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u5217\u961f\u4f5c\u4e3aNOIP2017\u6700\u540e\u4e00\u9053\u9898\uff0c\u5176\u5b9e\u5e76\u4e0d\u96be\uff0c\u53ea\u662f\u76f8\u5bf9\u4e8e\u5176\u5b83\u9898\u76ee\uff0c\u6709\u70b9\u5c0f\u5c0f\u7684\u5de5\u4e1a\n\n\u9996\u5148\uff0c\u8fd9\u9053\u9898\u6211\u7528splay\u7ef4\u62a4\u7684\uff0c\u5982\u679c\u4f60\u4e0d\u4f1asplay\uff0c\u53c8\u60f3\u5b66\u4e00\u4e0bsplay\uff0c\u53ef\u4ee5\u6765[\u8fd9\u91cc](http://www.cnblogs.com/dengyixuan/p/7895910.html)\u5b66\u4e00\u5b66\uff0c\u63a5\u4e0b\u6765\u6b65\u5165\u6b63\u9898\n\n\n\u9996\u5148\u8fd9\u9053\u9898\u548c\u5f80\u5e74\u4e00\u6837\uff0c\u7279\u6b8a\u6570\u636e\u4f1a\u7ed9\u4f60\u6781\u5927\u7684\u542f\u53d1\uff0c\u5728\u8003\u8bd5\u65f6\uff0c\u770b\u5230x=1,\u53ea\u6709\u4e00\u884c\u7684\u6570\u636e\u65f6\uff0c\u6211\u5c31\u60f3\u5230\uff0c\u53ef\u4ee5\u7ef4\u62a4\u4e00\u9897\u5e73\u8861\u6570\uff0c\u6bcf\u6b21\u53ea\u67e5\u8be2\uff08x\uff0cy\uff09\u7531\u4e8ex=1\uff0c\u6240\u4ee5\u53ea\u8981\u67e5\u8be2\u961f\u5217\u4e2d\u7b2cy\u5927\u5373\u53ef\uff0c\u90a3\u4e48\u4f60\u518d\u60f3\u4e00\u60f3\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u884c\u548c\u6700\u540e\u4e00\u5217\u7ef4\u62a4\u90fd\u5206\u522b\u7ef4\u62a4\u4e00\u9897splay\u5373\u53ef\n\n\n\u4f46\u662f\u8fd9\u6837\u7a7a\u95f4\u5e76\u4e0d\u5141\u8bb8n\\*m\u4e2a\u70b9\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5927\u90e8\u5206\u70b9\u81ea\u59cb\u81f3\u7ec8\u90fd\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4\u5b83\u8868\u793a\u4e00\u6392\u8fde\u7eed\u7684\u70b9\uff0c\u5f53\u8981\u67e5\u8be2\u7684\u70b9\u5728\u8fde\u7eed\u7684\u533a\u95f4\u4e2d\uff0c\u6211\u4eec\u5c31\u628a\u8fd9\u4e2a\u70b9\u62c6\u5f00\uff0c\u62c6\u6210\u4e09\u6bb5\uff0c\uff08\u539f\u6765\u7684\u70b9\u53ef\u4ee5\u4fdd\u7559\uff0c\u4fee\u6539\u4e00\u4e0b\u4fe1\u606f\uff0c\u518d\u52a0\u4e00\u4e2a\u70b9\u5373\u53ef\uff09\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u666e\u901asplay\u4e0a\u52a0\u4e00\u4e2aspilt\u6765\u5206\u88c2\u70b9\u5373\u53ef\n\n```cpp\ninline ll split(int now,ll k)//\u8981\u5206\u88c2\u7f16\u53f7\u4e3anow\u7684\u70b9\uff0c\u5176\u4e2d\u7b2ck\u4e2a\u662f\u6211\u4eec\u8981\u7684\u6570\u5b57\n    {\n        splay(now,root);\n        k=k+lef[now]-1;//\u8ba1\u7b97\u51fak\u7684\u6570\u503c\n        int temp=newnode(k+1,rig[now]);//\u7533\u8bf7\u4e00\u4e2a\u65b0\u70b9\uff0c\u533a\u95f4\u4e3ak+1\u81f3rig[now]\n        rig[now]=k-1;//\u65e7\u70b9\u533a\u95f4\u53f3\u7aef\u70b9\u6539\u4e3a\u4e3ak-1\n        if(!ch[now][1])//\u5982\u679c\u6ca1\u6709\u53f3\u513f\u5b50\u5c31\u63a5\u4e0a\n        {\n            ch[now][1]=temp;\n            fa[temp]=now;\n        }\n        else//\u8981\u4e48\u5c31\u628a\u539f\u6765root\u7684\u53f3\u513f\u5b50\u63a5\u5230\u65b0\u70b9\u53f3\u513f\u5b50\u4e0a\n        \n        {\n            int pos=nex(now);\n            ch[pos][0]=temp;fa[temp]=pos;\n            splay(temp,root);\n        }\n        return k;\n    }\n```\n\u4e0b\u9762\u662f\u5b8c\u6574\u4ee3\u7801\uff0c\u5927\u90e8\u5206\u64cd\u4f5c\u548csplay\u4e00\u6837\uff0c\u5c31\u4e0d\u505a\u89e3\u91ca\u4e86\n\n```cpp\n#include<bit/stdc++.h>\nusing namespace std;\ntypedef int sign;\ntypedef long long ll;\n#define For(i,a,b) for(register sign i=(sign)a;i<=(sign)b;++i)\n#define Fordown(i,a,b) for(register sign i=(sign)a;i>=(sign)b;--i)\nconst int N=3e6+5;\nbool cmax(sign &a,sign b){return (a<b)?a=b,1:0;}\nbool cmin(sign &a,sign b){return (a>b)?a=b,1:0;}\ntemplate<typename T>T read()\n{\n    T ans=0,f=1;\n    char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')ch=getchar();\n    if(ch=='-')f=-1,ch=getchar();\n    while(isdigit(ch))ans=(ans<<3)+(ans<<1)+(ch-'0'),ch=getchar();\n    return ans*f;\n}\nvoid file()\n{\n    #ifndef ONLINE_JUDGE\n        freopen(\"splay.in\",\"r\",stdin);\n        freopen(\"splay.out\",\"w\",stdout);\n    #endif\n}\nint fa[N],ch[N][2],sz;\nll lef[N],rig[N],size[N];\nstruct splay_tree\n{\n    int root;\n    inline void clear(int x){fa[x]=ch[x][0]=ch[x][1]=size[x]=lef[x]=rig[x]=0;}\n    inline int get(int x){return x==ch[fa[x]][1];}\n    inline void push_up(int x){size[x]=size[ch[x][0]]+size[ch[x][1]]+rig[x]-lef[x]+1;}\n    inline void rotate(int x,int &k)\n    {\n        int old=fa[x],oldfa=fa[old],o=get(x);\n        if(old==k)k=x;\n        else ch[oldfa][old==ch[oldfa][1]]=x;\n        fa[x]=oldfa;fa[old]=x;fa[ch[x][o^1]]=old;\n        ch[old][o]=ch[x][o^1];ch[x][o^1]=old;\n        push_up(old);push_up(x);\n    }\n    inline void splay(int x,int &k)\n    {\n        while(x^k)\n        {\n            if(fa[x]^k)rotate(get(x)^get(fa[x])?x:fa[x],k);\n            rotate(x,k);\n        }\n        push_up(x);\n    }\n    inline int find_last()//\u56e0\u4e3a\u63d2\u5230\u6700\u540e\u9762\uff0c\u6240\u4ee5\u4e00\u76f4\u5f80\u53f3\u513f\u5b50\u8d70\n    {\n        int now=root;\n        while(ch[now][1])now=ch[now][1];\n        return now;\n    }\n    inline int newnode(ll l,ll r)\n    {\n        ++sz;lef[sz]=l;rig[sz]=r;size[sz]=r-l+1;\n        return sz;\n    }\n    inline void init(ll l,ll r){root=newnode(l,r);}\n    inline void insert(ll v)\n    {\n        int now=newnode(v,v);\n        int pos=find_last();\n        ch[pos][1]=now;fa[now]=pos;\n        splay(now,root);\n    }\n    inline int pre(int x)\n    {\n        int now=ch[x][0];\n        while(ch[now][1])now=ch[now][1];\n        return now;\n    }\n    inline int nex(int x)\n    {\n        int now=ch[x][1];\n        while(ch[now][0])now=ch[now][0];\n        return now;\n    }\n    inline ll split(int now,ll k)\n    {\n        splay(now,root);\n        k=k+lef[now]-1;\n        int temp=newnode(k+1,rig[now]);\n        rig[now]=k-1;\n        if(!ch[now][1])\n        {\n            ch[now][1]=temp;\n            fa[temp]=now;\n        }\n        else\n        {\n            int pos=nex(now);\n            ch[pos][0]=temp;fa[temp]=pos;\n            splay(temp,root);\n        }\n        return k;\n    }\n    inline ll find_ans(ll x)//\u627e\u7b2ck\u5927\n    {\n        int now=root;ll len;\n        while(1)\n        {\n            if(x<=size[ch[now][0]])now=ch[now][0];\n            else\n            {\n                x-=size[ch[now][0]];\n                len=rig[now]-lef[now]+1;\n                if(x<=len)//\u8981\u627e\u7684\u70b9\u5728\u8fd9\u4e2a\u70b9\u7684\u533a\u95f4\u4e2d\n                {\n                 //ps\uff1a\u5982\u679c\u8fd9\u4e2a\u70b9\u5de6\u533a\u95f4\u7b49\u4e8e\u53f3\u533a\u95f4\uff0c\u4e0d\u5fc5\u5220\u6389\u5b83\uff08\u5f88\u6162\uff09\uff0c\u628a\u5de6\u7aef\u70b9++\uff0c\u8fd9\u6837\u8fd9\u4e2a\u70b9\u7684\u957f\u5ea6\u5c31\u53d8\u62100\u4e86\uff0c\u4e0d\u5f71\u54cd\u8fd9\u68f5\u6811\n                     if(x==1)\n                     {\n                        ll res=lef[now];\n                        lef[now]++;\n                        splay(now,root);\n                        push_up(now);\n                        return res;\n                     }\n                     if(x==len)\n                     {\n                        ll res=rig[now];\n                        rig[now]--;\n                        splay(now,root);\n                        push_up(now);\n                        return res;\n                     }\n                     else return split(now,x);\n                }\n                x=x-(rig[now]-lef[now]+1);\n                now=ch[now][1];\n            }\n        }\n    }    \n}s[N];\nll n,m,q;\ninline void input(){n=read<ll>();m=read<ll>();q=read<ll>();}\ninline void init()\n{\n    For(i,1,n)s[i].init(m*(i-1)+1,i*m-1);\n    s[0].init(m,m);\n    For(i,2,n)s[0].insert(i*m);\n}\ninline void work()\n{\n    int x,y;\n    ll v;\n    while(q--)\n    {\n        x=read<int>(),y=read<int>();\n        if(y==m)\n        {\n            printf(\"%lld\\n\",v=s[0].find_ans(x));\n            s[0].insert(v);\n        }\n        else\n        {\n            printf(\"%lld\\n\",v=s[x].find_ans(y));\n            s[x].insert(s[0].find_ans(x));\n            s[0].insert(v);\n        }\n    }\n}\nint main()\n{\n    file();\n    input();\n    init();\n    work();\n    return 0;\n}\n\n                    \n\n```",
        "postTime": 1512267277,
        "uid": 7029,
        "name": "dengyixuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "#### \u524d\u7f6e\u77e5\u8bc6\uff1a fhqtreap\n\n\n#### \u4e00\uff1a \u6570\u636e\u7ef4\u62a4\n\n\u9996\u5148\u6328\u4e2a\u5b58\u50a8\u7ed3\u70b9\u6beb\u65e0\u7591\u95ee\u4f1a\u70b8\uff0c\u6211\u4eec\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\u3002\u5bf9\u4e8e\u6bcf\u4e00\u884c\u5f00\u4e00\u4e2a\u5e73\u8861\u6811\uff0c\u7ef4\u62a4\u8be5\u884c\u7b2c $1$ \u4e2a\u5230\u7b2c $m-1$ \u4e2a\u7ed3\u70b9\uff0c\u5bf9\u4e8e\u6700\u540e\u4e00\u5217\uff0c\u5355\u72ec\u5f00\u4e00\u4e2a\u5e73\u8861\u6811\u53bb\u7ef4\u62a4\u3002\n\n#### \u4e8c\uff1a\u64cd\u4f5c\n\n\u64cd\u4f5c\u5206\u4e3a\u4e24\u7c7b\uff1a\n\n##### \u7b2c\u4e00\u79cd\uff1a$y=m$  \n\u6211\u4eec\u5c06\u7b2c $n+1$ \u4e2a\u5e73\u8861\u6811\u7684\u7b2c $x$ \u4e2a\u7ed3\u70b9\u5206\u88c2\u51fa\u6765\u5e76\u8f93\u51fa\uff0c\u6700\u540e\u5c06\u5176\u5408\u5e76\u5230\u5e73\u8861\u6811\u5c3e\u90e8\n\n##### \u7b2c\u4e8c\u79cd\uff1a$y \\neq m$ \n\u6211\u4eec\u5c06\u7b2c $x$ \u8bfe\u5e73\u8861\u6811\u7684\u7b2c $y$ \u4e2a\u7ed3\u70b9\u5206\u88c2\u51fa\u6765\u8f93\u51fa\uff0c\u518d\u5c06\u7b2c $n+1$ \u68f5\u5e73\u8861\u6811\u7684\u7b2c $x$ \u4e2a\u7ed3\u70b9\u5206\u88c2\u51fa\u6765\u5e76\u63a5\u5230\u7b2c $x$ \u68f5\u5e73\u8861\u6811\u5c3e\u90e8\uff0c\u6700\u540e\u5c06\u7b2c $x$ \u8bfe\u5e73\u8861\u6811\u7684\u7b2c $y$ \u4e2a\u7ed3\u70b9\u63a5\u5230\u7b2c $n+1$ \u68f5\u5e73\u8861\u6811\u5c3e\u90e8\n\n#### \u4e09\uff1a\u5982\u4f55\u5206\u88c2\u6811\n\n\u5206\u88c2\u7684\u65f6\u5019\u4f1a\u9047\u5230\u4e09\u79cd\u60c5\u51b5\uff1a\n\n##### \u7b2c\u4e00\u79cd\uff1a\n$tr[tr[now].son[0]].siz+tr[now].siz \\leq siz$\n\n\u8fd9\u65f6\u9700\u5c06\u5f53\u524d\u7ed3\u70b9\u6302\u5230 $x$ \u6811\u4e0a\uff0c\u7136\u540e\u63a5\u7740\u9012\u5f52\u53f3\u5b50\u6811\u3002\n\n##### \u7b2c\u4e8c\u79cd:\n$tr[tr[now].son[0]].siz+1 \\leq siz \\leq tr[tr[now].son[0]].siz+tr[now].siz-1$ \n\n\u8fd9\u65f6\u9700\u8981\u5c06\u8be5\u7ed3\u70b9\u88c2\u6210\u4e24\u4e2a\uff1a\n\n\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u8868\u793a\u533a\u95f4\u4e3a$[tr[now].l,tr[now].l+siz-tr[tr[now].son[0]].siz]$\n\n\u7b2c\u4e8c\u4e2a\u7ed3\u70b9\u8868\u793a\u533a\u95f4\u4e3a$[tr[now].l+siz-tr[tr[now].son[0]].siz+1,tr[now].r]$\n\n\u7136\u540e\u5c06\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u6302\u5230\u5206\u88c2\u51fa\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u4e0a\uff0c\u5c06\u5f53\u524d\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u6302\u5230\u5206\u88c2\u51fa\u7684\u7b2c\u4e8c\u4e2a\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u4e0a\u3002\n\n\u6700\u540e\u5c06\u5206\u88c2\u51fa\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u6302\u5230 $x$ \u6811\u4e0a\uff0c\u5206\u88c2\u51fa\u7684\u7b2c\u4e8c\u4e2a\u7ed3\u70b9\u6302\u5230 $y$ \u6811\u4e0a\uff0c\u5e76\u8fd4\u56de\u3002\n\n##### \u7b2c\u4e09\u79cd\uff1a\n$siz \\leq tr[tr[now].son[0]].siz$\n\n\u8fd9\u65f6\u9700\u5c06\u5f53\u524d\u7ed3\u70b9\u6302\u5230 $y$ \u6811\u4e0a\uff0c\u5e76\u63a5\u7740\u9012\u5f52\u5de6\u5b50\u6811\u3002\n\n\n#### \u56db\uff1a\u5b8c\u6574\u4ee3\u7801\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int N=3e5+10;\nstruct node\n  {\n      int son[2];\n      int l,r;\n      int siz;\n      int key;\n  } tr[N<<5];\nint root[N],idx;\nvoid pushup(int p)\n  {\n      tr[p].siz=tr[tr[p].son[0]].siz+tr[tr[p].son[1]].siz+tr[p].r-tr[p].l+1;\n  }\nint new_node(int l,int r)\n  {\n      if(r-l+1<=0) return 0;\n      int p=++idx;\n      tr[p].l=l,tr[p].r=r;\n      tr[p].son[0]=tr[p].son[1]=0;\n      tr[p].key=rand();\n      tr[p].siz=r-l+1;\n      return p;\n  }\nvoid split_node(int &x,int &y,int p,int siz)\n  {\n      x=new_node(tr[p].l,tr[p].l+siz-1);\n      y=new_node(tr[p].l+siz,tr[p].r);\n  }\nvoid split(int now,int siz,int &x,int &y)\n  {\n      if(!now)\n        {\n            x=y=0;\n            return;\n        }\n      if(tr[tr[now].son[0]].siz+tr[now].r-tr[now].l+1<=siz)\n        {\n            x=now;\n            split(tr[now].son[1],siz-tr[tr[now].son[0]].siz-tr[now].r+tr[now].l-1,tr[x].son[1],y);\n            pushup(x);\n        }\n       else\n         if(tr[tr[now].son[0]].siz<siz)\n           {\n               int a,b;\n               split_node(a,b,now,siz-tr[tr[now].son[0]].siz);\n               x=a,y=b;\n               tr[x].son[0]=tr[now].son[0];\n               tr[y].son[1]=tr[now].son[1];\n               pushup(a);\n               pushup(b);\n               return;\n           }\n         else\n           {\n               y=now;\n               split(tr[now].son[0],siz,x,tr[y].son[0]);\n               pushup(y);\n           }\n      pushup(now);\n      return;\n  }\nint merge(int x,int y)\n  {\n      if(!x||!y) return x+y;\n      if(tr[x].key<tr[y].key)\n        {\n            tr[x].son[1]=merge(tr[x].son[1],y);\n            pushup(x);\n            return x;\n        }\n      else\n        {\n            tr[y].son[0]=merge(x,tr[y].son[0]);\n            pushup(y);\n            return y;\n        }\n  }\nint n,m,q;\nsigned main() {\n    cin>>n>>m>>q;\n    for(int i=1;i<=n;i++) root[i]=new_node((i-1)*m+1,i*m-1);\n    for(int i=1;i<=n;i++) root[n+1]=merge(root[n+1],new_node(i*m,i*m));\n    while(q--)\n      {\n          int a,b;\n          cin>>a>>b;\n          if(b==m)\n            {\n                int x,y,z;\n                split(root[n+1],a,x,z);\n                split(x,a-1,x,y);\n                cout<<tr[y].l<<endl;\n                root[n+1]=merge(merge(x,z),y);\n            }\n          else\n            {\n                int x,y,z;\n                split(root[a],b,x,z);\n                split(x,b-1,x,y);\n                cout<<tr[y].l<<endl;\n                int xx,yy,zz;\n                split(root[n+1],a,xx,zz);\n                split(xx,a-1,xx,yy);\n                root[a]=merge(merge(x,z),yy);\n                root[n+1]=merge(merge(xx,zz),y);\n            }\n      }\n}\n```\n",
        "postTime": 1633654158,
        "uid": 147401,
        "name": "koishi_offical",
        "ccfLevel": 4,
        "title": "P3960 \u5217\u961f"
    },
    {
        "content": "### \u4e00\u79cd\u52a8\u6001\u88c2\u70b9\u975e\u65cbTreap\u5199\u6cd5\n\u4e3b\u8981\u662f\u8bb0\u5f55\u6bcf\u4e2aTreap\u70b9\u7684\u5de6\u53f3\u7aef\u70b9\u503c\n\n\u6dfb\u52a0\u4e86\u4e00\u4e2asplit_node\u64cd\u4f5c\u5b9e\u73b0\u88c2\u70b9\n\nsplit_node\u64cd\u4f5c\u901a\u8fc7\u8bfb\u53d6\u5f53\u524d\u70b9\u4fe1\u606f\n\n\u65b0\u5efa\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u66f4\u6539\u539f\u8282\u70b9\u7684\u7aef\u70b9\u503c\n\n\u7136\u540emerge\u4e24\u4e2a\u8282\u70b9\u5b8c\u6210\u64cd\u4f5c\n\n\u5173\u4e8e\u9898\u610f\u64cd\u4f5c\u7684\u5b9e\u73b0 \u5176\u4ed6\u9898\u89e3\u8bb2\u7684\u5f88\u8be6\u7ec6 \u672c\u9898\u89e3\u4e3b\u8981\u63d0\u4f9b\u4e00\u79cd\u5199\u6cd5\n\n~~ps \u4e24\u5e74\u524d\u5199\u7684\u4e1c\u897f\u4e86,\u5f53\u65f6\u8fd8\u60f3\u4e86\u4e24\u5929\u7684\u591c\u81ea\u4e60~~\n\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\ninline long long read(){\n    char c=getchar();long long f=1,x=0;\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst long long maxn=3*5e5+10;\nlong long ch[maxn][2],sz[maxn],root[maxn],rnd[maxn],L[maxn],R[maxn],x,y,z,id;\nlong long new_node(long long l,long long r){\n    L[++id]=l;\n    R[id]=r;\n    sz[id]=r-l+1;\n    rnd[id]=rand();\n    return id;\n}\nvoid update(long long x){\n    sz[x]=sz[ch[x][1]]+sz[ch[x][0]]+R[x]-L[x]+1;   \n}\nlong long merge(long long x,long long y){\n    if(!x||!y)return x+y;\n    if(rnd[x]<rnd[y]){\n        ch[x][1]=merge(ch[x][1],y);\n        update(x);\n        return x;\n    }\n    else {\n        ch[y][0]=merge(x,ch[y][0]);\n        update(y);\n        return y;\n    }\n}\nvoid split_node(long long x,long long k){\n    if(k>=(R[x]-L[x]+1))return;\n    long long tmp=R[x];\n    R[x]=L[x]+k-1;\n    ch[x][1]=merge(new_node(L[x]+k,tmp),ch[x][1]);\n}\nlong long split(long long now,long long k,long long &x,long long &y){\n\tlong long siz=R[now]-L[now]+1;\n\tif(!now)x=y=0;\n\telse {\n\t\tif(k<=sz[ch[now][0]]){\n\t\t\ty=now,split(ch[now][0],k,x,ch[now][0]);\n\t\t}\n\t\telse {\n\t\t\tsplit_node(now,k-sz[ch[now][0]]);\n\t\t\tx=now,split(ch[now][1],k-sz[ch[now][0]]-(R[now]-L[now]+1),ch[now][1],y);\n\t\t}\n\t\tupdate(now);\n\t}\n}\nlong long n,m,q;\nint main(){\n    n=read(),m=read(),q=read();\n    for(long long i=1;i<=n;i++){\n    \troot[i]=new_node((i-1)*m+1,(i-1)*m+m-1);\n    }\n    for(long long i=1;i<=n;i++){\n    \tsplit(root[n+1],i-1,x,y);\n    \ty=merge(y,new_node(i*m,i*m));\n    \troot[n+1]=merge(x,y);\n    }\n    while(q--){\n    \tlong long a=read(),b=read();\n    \tif(b==m){\n    \t\tsplit(root[n+1],a,x,z);\n    \t\tsplit(x,a-1,x,y);\n    \t\tprintf(\"%lld\\n\",L[y]);\n    \t\troot[n+1]=merge(x,merge(z,y));\n    \t}\n    \telse{\n    \t\tsplit(root[a],b,x,z);\n    \t\tsplit(x,b-1,x,y);\n    \t\tprintf(\"%lld\\n\",L[y]);\n    \t\tlong long x1,y1,z1;\n  \t\t\tsplit(root[n+1],a,x1,z1);\n  \t\t\tsplit(x1,a-1,x1,y1);\n    \t\troot[a]=merge(x,merge(z,y1));\n    \t\troot[n+1]=merge(x1,merge(z1,y));\n    \t}\n    }\n}\n```\n",
        "postTime": 1600229649,
        "uid": 46750,
        "name": "DefFrancis",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.org/problem/P3960)\n\n\u524d\u8a00\uff1a\u5176\u5b9e\u6211\u7684\u505a\u6cd5\u5e76\u4e0d\u4f18\u79c0\uff08\u590d\u6742\u5ea6$O(nlog^2n)$\uff09\uff0c\u53ea\u662f\u60f3\u7ed9\u5927\u5bb6\u5206\u4eab\u4e00\u4e0b\uff0c\u770b\u4e86\u9898\u89e3\u4ee5\u540e\u624d\u53d1\u73b0\u53ef\u4ee5\u7528splay+\u62c6\u70b9\u7684\u65b9\u6cd5\u4e00\u4e2alog\u53bb\u505a\uff0c\u7136\u800c\u6211\u7684\u505a\u6cd5\u662f\u76f4\u63a5\u7528treap\u786c\u6760\uff0c\u4e3b\u8981\u601d\u60f3\u548c\u9898\u89e3\u5dee\u4e0d\u591a\uff0c\u867d\u7136\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u4f46\u662f\u4e0d\u9700\u8981\u62c6\u70b9\u3002\n\n\u9898\u76ee\u8981\u6c42\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u77e9\u9635\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u6709\u4e00\u4e2a\u521d\u59cb\u7f16\u53f7\uff0c\u4ece\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e(x,y)\u62bd\u51fa\u4e00\u4e2a\u7f16\u53f7\uff0c\u5c06(x,y)\u53f3\u8fb9\u7684\u6570\u96c6\u4f53\u5411\u5de6\u79fb\uff0c\u4f7f(x,m)\u7684\u4f4d\u7f6e\u88ab\u7a7a\u51fa\u6765\uff0c\u7136\u540e\u518d\u5c06(x,m)\u4e0b\u65b9\u7684\u6570\u96c6\u4f53\u5411\u4e0a\u79fb\u52a8\uff0c\u4f7f(n,m)\u7684\u4f4d\u7f6e\u88ab\u7a7a\u51fa\u6765\uff0c\u7136\u540e\u5c06\u62bd\u51fa\u7684\u7f16\u53f7\u653e\u5230(n,m)\u4f4d\u7f6e\uff0c\u5e76\u4e14\u8f93\u51fa\u8be5\u7f16\u53f7\n\n\u6211\u4eec\u80fd\u53d1\u73b0\u6bcf\u4e00\u6b21\u64cd\u4f5c\u53ea\u4f1a\u5f15\u8d77\u7b2cx\u884c\u548c\u7b2cm\u5217\u7684\u7f16\u53f7\u7684\u4f4d\u7f6e\u53d8\u5316\uff0c\u800c\u8fd9\u79cd\u53d8\u5316\u7c7b\u4f3c\u4e8e\u201c\u4ece\u4e00\u4e2a\u5e8f\u5217\u7684\u7b2cx\u4e2a\u4f4d\u7f6e\u4e2d\u5f39\u51fa\u4e00\u4e2a\u6570\uff0c\u518d\u4ece\u5e8f\u5217\u7684\u672b\u5c3e\u63d2\u5165\u4e00\u4e2a\u6570\u201d\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a ($n*m$)\u7684\u77e9\u9635\u5206\u6210$n$\u4e2a\u957f\u5ea6\u4e3a$m-1$\u7684\u5e8f\u5217$S_{1}$~$S_{n}$(\u8868\u793a\u6bcf\u4e00\u884c\u7684\u524d$m-1$\u4e2a\u6570)\u548c\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u5e8f\u5217$T$(\u8868\u793a\u6700\u540e\u4e00\u5217\u7684$n$\u4e2a\u6570)\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u6b21\u64cd\u4f5c\uff1a\n\n 1. \u5982\u679c$y\u2264m-1$\uff0c\u5c31\u4ece$S_{x}$\u4e2d\u5220\u9664\u7b2cy\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u628a\u8be5\u5143\u7d20\u63d2\u5165\u5230$T$\u7684\u672b\u5c3e\uff0c\u518d\u5c06$T$\u4e2d\u7684\u7b2cx\u4e2a\u5143\u7d20\u63d2\u5165\u5230$S_{x}$\u7684\u672b\u5c3e\u3002\n\n 2. \u5982\u679c$y=m$\uff0c\u5c31\u76f4\u63a5\u5c06$T$\u4e2d\u7684\u7b2cx\u4e2a\u5143\u7d20\u79fb\u52a8\u5230\u672b\u5c3e\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u5e8f\u5217\u7528\u5e73\u8861\u6811\u6765\u7ef4\u62a4\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u53d1\u73b0\u7a7a\u95f4\u7206\u70b8\u4e86\uff0cn*m==9e10\u3002\n\n\u56de\u987e\u4e00\u4e0b\u4e4b\u524d\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u80fd\u53d1\u73b0\u6709\u5f88\u591a\u7684\u5e8f\u5217\u4f4d\u7f6e\u5176\u5b9e\u662f\u591a\u4f59\u7684\uff0c\u7531\u4e8e\u64cd\u4f5c\u6b21\u6570$q\u22643e5$\uff0c\u5f88\u591a\u5e8f\u5217\u7684\u4e00\u90e8\u5206\u53ef\u80fd\u81ea\u59cb\u81f3\u7ec8\u90fd\u6ca1\u6709\u4fee\u6539\u8fc7\u3002\n\n\u65e2\u7136\u8fd9\u6837\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u53ea\u8bb0\u5f55\u4fee\u6539\u7684\u4f4d\u7f6e\u5462\uff1f\n\n\u7136\u540e\u5c31\u6709\u4e86\u6211\u7684\u505a\u6cd5\uff1a\n\n\u6211\u4eec\u9996\u5148\u8981\u5efa\u7acb$2n+1$\u68f5\u5e73\u8861\u6811:\n\n 1. $S$\u8868\u793a\u6700\u540e\u4e00\u5217\u7684n\u4e2a\u6570\u6309\u7167**\u4f4d\u7f6e\u987a\u5e8f**\u4e3a\u5173\u952e\u5b57\u7684\u5e73\u8861\u6811\u3002\n\n 2. $A_{1}$~$A_{n}$\u4e2d$A_{i}$\u8868\u793a\u7b2c$i$\u884c\u4e2d\u88ab\u53d6\u8d70\u7684**\u539f\u4f4d\u7f6e\u7684\u7f16\u53f7**\u6309\u7167**\u7f16\u53f7\u5927\u5c0f**\u4e3a\u5173\u952e\u5b57\u7684\u5e73\u8861\u6811\u3002\n\n 3. $B_{1}$~$B_{n}$\u4e2d$B_{i}$\u8868\u793a\u7b2c$i$\u884c\u4e2d\u4ece$S$\u4e2d\u65b0\u53d6\u51fa\u7684\u6570\u6309\u7167**\u4f4d\u7f6e\u987a\u5e8f**\u4e3a\u5173\u952e\u5b57\u7684\u5e73\u8861\u6811\u3002\n\n\u8fd9\u6837\u5bf9\u4e8e\u6bcf\u4e00\u884c\u7684\u7f16\u53f7\u5e8f\u5217\uff0c\u80af\u5b9a\u662f\u7531 **\u539f\u5e8f\u5217\u4e2d\u6ca1\u6709\u53d6\u8d70\u7684\u7f16\u53f7+\u65b0\u8fdb\u5165\u7684\u7f16\u53f7**\u4f9d\u6b21\u6784\u6210\uff0c\u7136\u540e\u8fdb\u884c\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n 1. \u5982\u679c$y\u2264m-1-A_{x}.size$\uff0c\u8bf4\u660e\u8981\u53d6\u8d70\u7684\u7f16\u53f7\u8fd8\u662f\u539f\u5e8f\u5217\u4e2d\u7684\u7f16\u53f7\uff08\u5c3d\u7ba1\u4e0d\u4e00\u5b9a\u4e3a$x*(m-1)+y$\uff09\uff0c\u800c\u4e14\u53d6\u8d70\u7684\u7f16\u53f7\u662f\u5269\u4f59\u539f\u5e8f\u5217\u7f16\u53f7\u7684\u7b2c$y$\u4e2a\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528\u4e8c\u5206\u679a\u4e3e\u7b2c$y$\u4e2a\u7f16\u53f7\u672c\u6765\u7684\u6392\u540d$k$\uff0c\u6bcf\u6b21\u8ba1\u7b97\u73b0\u5b58\u7684\u4e0d\u5927\u4e8e$k$\u7684\u6570\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u8868\u793a\u4e3a $k-$\u88ab\u5220\u53bb\u7684\u6392\u540d\u4e0d\u5927\u4e8e$k$\u7684\u6570\u7684\u6570\u91cf \u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2$A_x$\u4e2d$k$\u7684\u6392\u540d\u6765\u5b9e\u73b0\u3002\u627e\u5230\u8981\u5f39\u51fa\u7684\u7f16\u53f7$p$\u540e\uff0c\u6211\u4eec\u628a$p$\u4e22\u8fdb$A_x$\u4e2d\uff0c\u7136\u540e\u4ece$S$\u4e2d\u5f39\u51fa\u7b2c$x$\u4e2a\u7f16\u53f7$temp$\uff0c\u5c06\u5b83\u63d2\u5165\u5230$B_x$\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u4e2d\uff0c\u6700\u540e\u628a$p$\u63d2\u5165\u5230$S$\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u4e2d\u3002\n\n 2. \u5982\u679c$n-1-A_{x}.size<y\u2264m-1$\uff0c\u8bf4\u660e\u8981\u53d6\u8d70\u7684\u7f16\u53f7\u662f\u4e4b\u524d\u63d2\u5165\u7684\u7f16\u53f7\uff0c\u76f4\u63a5\u4ece$B_x$\u4e2d\u5f39\u51fa\u6392\u540d\u4e3a$y-(n-1-A_{x}.size)$\u7684\u7f16\u53f7$p$\uff0c\u7136\u540e\u4ece$S$\u4e2d\u5f39\u51fa\u7b2c$x$\u4e2a\u7f16\u53f7$temp$\uff0c\u5c06\u5b83\u63d2\u5165\u5230$B_x$\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u4e2d\uff0c\u6700\u540e\u628a$p$\u63d2\u5165\u5230$S$\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u4e2d\u5373\u53ef\u3002\n\n 3. \u5982\u679c$y=m$\uff0c\u5c31\u76f4\u63a5\u5c06$S$\u4e2d\u7684\u7b2cx\u4e2a\u7f16\u53f7\u79fb\u52a8\u5230\u672b\u5c3e\u3002\n\n\u6b63\u786e\u6027\u6ca1\u6709\u95ee\u9898\u4e86\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e86\uff0c\u5bf9\u4e8e2\u30013\u60c5\u51b5\uff0c\u64cd\u4f5c\u4e00\u6b21\u7684\u590d\u6742\u5ea6\u90fd\u662f$O(logn)$\u7ea7\u7684\uff0c\u800c\u5bf9\u4e8e1\u60c5\u51b5\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u4e8c\u5206\u4e2d\u5957\u4e86\u4e00\u4e2a\u5e73\u8861\u6811\u67e5\u8be2\uff0c\u6240\u4ee5\u64cd\u4f5c\u4e00\u6b21\u7684\u590d\u6742\u5ea6\u662f$O(log^2n)$\u7ea7\u7684\uff0c\u56e0\u6b64\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(nlog^2n)$\u7ea7\u7684\u3002\n\n\u5173\u4e8e\u7a7a\u95f4\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u8bb0\u5f55\u4e86\u201c\u539f\u5e8f\u5217\u4e2d\u6ca1\u6709\u53d6\u8d70\u7684\u7f16\u53f7\u201d\u548c\u201c\u65b0\u8fdb\u5165\u7684\u7f16\u53f7\u201d\uff0c\u56e0\u6b64\u8fd9\u4e9b\u5e73\u8861\u6811\u8282\u70b9\u52a0\u8d77\u6765\u6700\u591a\u53ea\u6709$2q$\u4e2a\uff0c\u518d\u52a0\u4e0a\u7ef4\u62a4\u7684\u6700\u540e\u4e00\u5217\u7684$n$\u4e2a\u6570\uff0c\u6240\u4ee5\u4e00\u5171\u53ea\u9700\u8981\u7ef4\u62a4$n$\u6570\u91cf\u7ea7\u7684\u70b9\uff0c\u6240\u4ee5\u7a7a\u95f4\u4e5f\u5e78\u8fd0\u5730\u6ca1\u6709\u7206\u70b8\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u7801\u529b\u7684\u95ee\u9898\u4e86\uff0c\u53cd\u6b63\u8003\u573a\u4e0a\u6211\u662f\u4e0d\u80fd\u601d\u8003+\u5199\u51fa\u8fd9\u79cd\u505a\u6cd5\u7684QAQ\u3002\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<ctime>\n#include<vector>\n#define ll long long\nusing namespace std;\nconst int N=300005;\nint n,m,q,rtn2[N],rtn1[N],rtm;\n//rtn1:\u7b2cn\u884c\u88ab\u5220\u9664\u7684\u6570\u5347\u5e8f\u6392\u5e8f\u540e\u7684\u5e8f\u5217 \n//rtn2:\u7b2cn\u884c\u7684\u65b0\u52a0\u5165\u7684\u6570\u6784\u6210\u7684\u5e8f\u5217 \n//rtm:\u7b2cm\u5217\u7684n\u4e2a\u6570\u6784\u6210\u7684\u5e8f\u5217 \nvector<int>s;\nstruct BST\n{\n\tint size;ll v;int pri,lc,rc;\n}t[4*N];\nvoid up(int x)\n{\n\tt[x].size=t[t[x].lc].size+t[t[x].rc].size+1;\n}\nvoid zig(int &x)\n{\n\tint y=t[x].lc;\n\tt[x].lc=t[y].rc;\n\tt[y].rc=x;\n\tup(x),up(y);\n\tx=y;\n}\nvoid zag(int &x)\n{\n\tint y=t[x].rc;\n\tt[x].rc=t[y].lc;\n\tt[y].lc=x;\n\tup(x),up(y);\n\tx=y;\n}\nvoid Insert(int &x,ll v)\n{\n\tif(!x)\n\t{\n\t\tx=s.back(),s.pop_back();\n\t\tt[x]=(BST){1,v,rand()*rand(),0,0};\n\t\treturn;\n\t}\n\tt[x].size++;\n\tInsert(t[x].rc,v);\n\tif(t[t[x].rc].pri>t[x].pri)zag(x);\n}\nvoid Insert2(int &x,ll v)\n{\n\tif(!x)\n\t{\n\t\tx=s.back(),s.pop_back();\n\t\tt[x]=(BST){1,v,rand()*rand(),0,0};\n\t\treturn;\n\t}\n\tt[x].size++;\n\tif(v<t[x].v)\n\t{\n\t\tInsert2(t[x].lc,v);\n\t\tif(t[t[x].lc].pri>t[x].pri)zig(x);\n\t}\n\telse\n\t{\n\t\tInsert2(t[x].rc,v);\n\t\tif(t[t[x].rc].pri>t[x].pri)zag(x);\n\t}\n}\nvoid Delete(int &x,int k)\n{\n\tif(t[t[x].lc].size+1==k)\n\t{\n\t\tif(!t[x].lc||!t[x].rc)s.push_back(x),x=t[x].lc+t[x].rc;\n\t\telse if(t[t[x].lc].pri>t[t[x].rc].pri)zig(x),Delete(x,k);\n\t\telse zag(x),Delete(x,k);\n\t\treturn;\n\t}\n\tt[x].size--;\n\tif(t[t[x].lc].size+1>k)Delete(t[x].lc,k);\n\telse Delete(t[x].rc,k-t[t[x].lc].size-1);\n}\nint ask_pre(int x,int v,int res)\n{\n\tif(!x)return res;\n\telse if(v==t[x].v)return res+t[t[x].lc].size+1;\n\telse if(v<t[x].v)return ask_pre(t[x].lc,v,res);\n\telse return ask_pre(t[x].rc,v,res+t[t[x].lc].size+1);\n}\nll ask_rank(int x,int k)\n{\n\twhile(t[t[x].lc].size+1!=k)\n\t{\n\t\tif(t[t[x].lc].size+1>k)x=t[x].lc;\n\t\telse k-=t[t[x].lc].size+1,x=t[x].rc;\n\t}\n\treturn t[x].v;\n}\nvoid init()\n{\n\tfor(int i=m+q*3;i>=1;i--)s.push_back(i);\n\tfor(ll i=m;i<=(ll)m*(ll)n;i+=(ll)m)Insert(rtm,i);\n}\nint main()\n{\n\tsrand(time(0));\n\tscanf(\"%d %d %d\",&n,&m,&q);\n\tinit();\n\tfor(int i=1,x,y;i<=q;i++)\n\t{\n\t\tll p;\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tif(m-1-t[rtn1[x]].size>=y)\n\t\t{\n\t\t\tint l=1,r=m-1,mid;\n\t\t\twhile(l<r)\n\t\t\t{\n\t\t\t\tmid=(l+r)>>1;\n\t\t\t\tint temp=mid-ask_pre(rtn1[x],mid,0);\n\t\t\t\tif(temp<y)l=mid+1;\n\t\t\t\telse r=mid;\n\t\t\t}\n\t\t\tInsert2(rtn1[x],l);\n\t\t\tll temp=ask_rank(rtm,x);\n\t\t\tDelete(rtm,x);\n\t\t\tp=((ll)x-1)*(ll)m+(ll)l;\n\t\t\tprintf(\"%lld\\n\",p);\n\t\t\tInsert(rtm,p);\n\t\t\tInsert(rtn2[x],temp);\n\t\t}\n\t\telse if(m-1>=y)\n\t\t{\n\t\t\ty-=m-1-t[rtn1[x]].size;\n\t\t\tp=ask_rank(rtn2[x],y);\n\t\t\tDelete(rtn2[x],y);\n\t\t\tll temp=ask_rank(rtm,x);\n\t\t\tDelete(rtm,x);\n\t\t\tInsert(rtm,p);\n\t\t\tprintf(\"%lld\\n\",p);\n\t\t\tInsert(rtn2[x],temp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tll p=ask_rank(rtm,x);\n\t\t\tDelete(rtm,x);\n\t\t\tprintf(\"%lld\\n\",p);\n\t\t\tInsert(rtm,p);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1568799674,
        "uid": 110471,
        "name": "Tommy_clas",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u5148\u6765\u770b\u770b\u66b4\u529b\u5206\u5427\u3002\n\nP30: \u6211\u4eec\u8fdb\u884c\u76f4\u63a5\u6a21\u62df\u90fd\u80fd\u62ff\u5230\n\nP50: \u6211\u4eec\u4f1a\u53d1\u73b0,\u6570\u7ec4\u5f00\u4e0d\u4e0b,\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u79bb\u6563\u5316\u90a3\u4e9b\u6709\u7528\u5230\u7684\u884c,\u5e76\u628a\u6700\u540e\u4e00\u5217\u72ec\u7acb\u51fa\u6765,\u7136\u540e\u8fdb\u884c\u6a21\u62df\u3002\n\n\u5927\u6982\u8fd9\u4e9a\u5b50\u5427\n\n```cpp\n\nstruct P50{\n\tstatic const int M=5e4+5,Q=500+5;\n\tll squ[Q][M],li[M];\n\tint X[Q],Y[Q],B[Q];\n\tinline void solve(){\n\t\trep(i,1,q){\n\t\t\tX[i]=rd<int>(),Y[i]=rd<int>();\n\t\t\tB[i]=X[i];\n\t\t}\n\t\tsort(B+1,B+q+1);\n\t\tint qcnt=unique(B+1,B+q+1)-B-1;\n\t\trep(i,1,q){\n\t\t\tX[i]=lower_bound(B+1,B+qcnt+1,X[i])-B;\n\t\t\trepp(j,1,m) squ[i][j]=1ll*(B[i]-1)*m+j;\n\t\t}\n\t\trep(i,1,n) li[i]=1ll*i*m;\n\t\trep(i,1,q){\n\t\t\tll res=squ[X[i]][Y[i]];\n\t\t\tif(Y[i]==m) res=li[B[X[i]]];\n\t\t\tprintf(\"%lld\\n\",res);\n\t\t\trepp(j,Y[i],m)\n\t\t\t\tsqu[X[i]][j]=squ[X[i]][j+1];\n\t\t\tif(Y[i]!=m) squ[X[i]][m-1]=li[B[X[i]]];\n\t\t\trepp(j,B[X[i]],n)\n\t\t\t\tli[j]=li[j+1];\n\t\t\tli[n]=res;\n\t\t}\n\t}\n}p50;\n```\n\nP70: $n=1$\u8fd9\u79cd\u60c5\u51b5,\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u7b2c\u4e00\u884c,\u6bcf\u6b21\u5728\u53d6\u6570\u7684\u65f6\u5019,\u53d6\u51fa\u7b2cy\u4e2a\u6570,\u56e0\u6b64,\u6211\u4eec\u53ea\u9700\u8981\u5229\u7528**\u6811\u72b6\u6570\u7ec4**\u7ef4\u62a4\u8fd9\u4e2a\u70b9\u8fd8\u80fd\u4e0d\u80fd\u7528(\u6709\u6ca1\u6709\u88ab\u53d6\u8fc7),\u7136\u540e\u8fdb\u884c\u4e8c\u5206,\u770b\u7b2c\u51e0\u4e2a\u70b9,\u5b83\u7684\u524d\u7f00\u4e2a\u6570\u6070\u597d\u4e3ay,\u8f93\u51fa\u7b54\u6848\u540e,\u5c06\u8fd9\u4e2a\u4f4d\u5b50\u4e0a\u6709\u7684\u6570-1,\u518d\u5728\u7ed3\u5c3e\u4e0a\u52a0\u4e0a\u8fd9\u4e2a\u6570\u5373\u53ef\u3002\n\nP80: \u63a5\u7740\u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\u60f3,x=1\u4f46n\u4e0d\u4e00\u5b9a=1\u65f6,\u5176\u5b9e\u4e0en=1\u65f6\u662f\u5341\u5206\u76f8\u4f3c\u7684,\u56e0\u4e3a\u6211\u4eec\u6709\u7528\u5230\u7684\u53ea\u6709\u7b2c\u4e00\u884c\u4e0e\u6700\u540e\u4e00\u5217,\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f62\u8c61\u5730**\u628a\u5b83\u4eec\u62c9\u6210\u4e00\u6761\u76f4\u7ebf**,\u7136\u540e\u8fdb\u884c\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u5927\u6982\u8fd9\u4e2a\u4e9a\u5b50\u3002\n\n```cpp\nstruct P80{\n\tstruct BIT{\n\t\tint sum[N+M+Q];\n\t\tinline void Modify(int x, int val){\n\t\t\tfor(; x<=N+M+Q; sum[x]+=val,x+=lowbit(x));\n\t\t\treturn;\n\t\t}\n\t\tinline int Sum(int x){\n\t\t\tint res=0;\n\t\t\tfor(; x>0; res+=sum[x],x-=lowbit(x));\n\t\t\treturn res;\n\t\t}\n\t\tinline void clear() { ms(sum,0); return; }\n\t}bit;\n\tll A[N+M+Q];\n\tinline void solve(){\n\t\tbit.clear();\n\t\tint cnt=0;\n\t\trep(i,1,m){\n\t\t\tA[++cnt]=i;\n\t\t\tbit.Modify(cnt,1);\n\t\t}\n\t\trep(i,2,n) A[++cnt]=1ll*i*m,bit.Modify(cnt,1);\n\t\trep(i,1,q){\n\t\t\tint l=1,r=cnt,ans=-1;\n\t\t\twhile(l<=r){\n\t\t\t\tint mid=(l+r)>>1;\n\t\t\t\tif(bit.Sum(mid)>=Y[i]) ans=mid,r=mid-1;\n\t\t\t\telse l=mid+1;\n\t\t\t}\n\t\t\tbit.Modify(ans,-1);\n\t\t\tprintf(\"%lld\\n\",A[ans]);\n\t\t\tA[++cnt]=A[ans]; bit.Modify(cnt,1);\n\t\t}\n\t\treturn;\n\t}\n}p80;\n```\n\n\u63a5\u4e0b\u6765\u770b\u666e\u904d\u60c5\u51b5\u4e86\u3002\n\n> \u505a\u6cd51: \u7ebf\u6bb5\u6811\u52a8\u6001\u5f00\u70b9\n\n\u9996\u5148,\u6211\u4eec\u5229\u7528\u4e0a\u9762\u7684\u601d\u60f3,\u5c06\u6bcf\u4e00\u884c\u90fd\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811,\u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2$y\\le m-1$\u65f6,\u6211\u4eec\u5c31\u5728\u6bcf\u4e00\u884c\u7684\u6811\u4e0a\u8fdb\u884c\u67e5\u8be2\u3002\n\n\u5982\u679c\u6211\u4eec\u8981\u627e\u7684$y<m$,\u8bf4\u660e\u6211\u4eec\u8981\u5728\u5217\u7684\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u3002\n\n\u5982\u679c\u6211\u4eec\u627e\u5230\u7684\u503c\u662f$<m$\u7684,\u8bf4\u660e\u6211\u4eec\u8981\u627e\u7684\u6570\u5c31\u5728\u672c\u6765\u7684\u4f4d\u7f6e\u4e0a(\u56e0\u4e3a\u6211\u4eec\u662f\u4fdd\u7559\u539f\u6765\u7684\u5e8f\u5217,\u5e76\u505a\u6807\u8bb0,\u800c\u975e\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u5220\u9664),\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\u3002\n\n\u5426\u5219,\u6211\u4eec\u5c31\u8981\u5728**\u540e\u9762\u65b0\u52a0\u7684\u6570\u7ec4\u91cc\u9762\u627e\u5230\u5bf9\u5e94\u7684\u503c**\u3002\u6bcf\u6b21\u7ed3\u675f\u540e,\u5728\u6700\u540e\u4e00\u5217\u7684\u6570\u7ec4\u5bf9\u4f4d\u63a8\u5165\u8fd9\u4e2a\u6570,\u5e76\u5728\u8fd9\u884c\u7684\u540e\u9762\u65b0\u52a0\u6570\u7ec4\u52a0\u5165**\u5728\u6700\u540e\u4e00\u5217\u7684\u6570\u7ec4\u91cc\u9762\u7b2cx\u4e2a\u6570**(\u5176\u5b9e\u5c31\u8ddf\u4e4b\u524d\u7684\u64cd\u4f5c\u4e00\u6837\u3002)\n\n\u5982\u679c\u6211\u4eec\u8981\u627e\u7684$y\\ge m$,\u8bf4\u660e\u6211\u4eec\u8981\u627e\u7684\u5728\u6700\u540e\u4e00\u5217,\u6211\u4eec\u5bf9\u6b64\u8fdb\u884c\u7ef4\u62a4\u5373\u53ef\u3002(\u8ddf\u4e0a\u9762P80\u7684\u6811\u72b6\u6570\u7ec4\u5dee\u4e0d\u591a)\n\n#### Code:\n\n```cpp\n//\u4e07\u5e74\u4e0d\u5220\u5207\u5206-_-|||\n#include<bits/stdc++.h>\n#define re register\n#define rep(i,a,b) for(re int i=a,i##end=b; i<=i##end; i++)\n#define drep(i,a,b) for(re int i=a,i##end=b; i>=i##end; i--)\n#define repp(i,a,b) for(re int i=a,i##end=b; i<i##end; i++)\n#define drepp(i,a,b) for(re int i=a,i##end=b; i>i##end; i--)\n#define Erep(i,x) for(int i=head[x]; ~i; i=Edge[i].nxt)\n#define ms(x,a) memset(x,a,sizeof x)\n#define debug(x) cout<<#x<<\" = \"<<x<<endl\n#define lowbit(x) ((x)&(-x))\ntypedef long long ll;\nusing namespace std;\ntemplate<class T>inline T rd(){\n\tstatic char ch;static bool neg;static T x;\n\tfor(neg=0,ch=0; ch>'9'||ch<'0'; neg|=(ch=='-'),ch=getchar());\n\tfor(x=0; ch>='0' && ch<='9'; x=(x<<1)+(x<<3)+(ch^'0'), ch=getchar());\n\treturn neg?-x:x;\n}\ntemplate<class T>inline T Max(T &x, T y){\n\treturn x>y?x:y;\n}\n\n//bool S1;\n\nconst int N=3e5+5,M=3e5+5,Q=3e5+5;\nint n,m,q;\nstruct P30{\n\tstatic const int N=1000+5,M=1000+5;\n\tint sum[N][M];\n\tinline void solve(){\n\t\trep(i,1,n)\n\t\t\trep(j,1,m) sum[i][j]=(i-1)*m+j;\n\t\twhile(q--){\n\t\t\tint x=rd<int>(),y=rd<int>(),res=sum[x][y];\n\t\t\tprintf(\"%d\\n\",res);\n\t\t\trepp(i,y,m) sum[x][i]=sum[x][i+1];\n\t\t\trepp(i,x,n) sum[i][m]=sum[i+1][m];\n\t\t\tsum[n][m]=res;\n\t\t}\n\t\treturn;\n\t}\n}p30;\n\nstruct P50{\n\tstatic const int M=5e4+5,Q=500+5;\n\tll squ[Q][M],li[M];\n\tint X[Q],Y[Q],B[Q];\n\tinline void solve(){\n\t\trep(i,1,q){\n\t\t\tX[i]=rd<int>(),Y[i]=rd<int>();\n\t\t\tB[i]=X[i];\n\t\t}\n\t\tsort(B+1,B+q+1);\n\t\tint qcnt=unique(B+1,B+q+1)-B-1;\n\t\trep(i,1,q){\n\t\t\tX[i]=lower_bound(B+1,B+qcnt+1,X[i])-B;\n\t\t\trepp(j,1,m) squ[i][j]=1ll*(B[i]-1)*m+j;\n\t\t}\n\t\trep(i,1,n) li[i]=1ll*i*m;\n\t\trep(i,1,q){\n\t\t\tll res=squ[X[i]][Y[i]];\n\t\t\tif(Y[i]==m) res=li[B[X[i]]];\n\t\t\tprintf(\"%lld\\n\",res);\n\t\t\trepp(j,Y[i],m)\n\t\t\t\tsqu[X[i]][j]=squ[X[i]][j+1];\n\t\t\tif(Y[i]!=m) squ[X[i]][m-1]=li[B[X[i]]];\n\t\t\trepp(j,B[X[i]],n)\n\t\t\t\tli[j]=li[j+1];\n\t\t\tli[n]=res;\n\t\t}\n\t}\n}p50;\n\nint X[Q],Y[Q];\n\nstruct P80{\n\tstruct BIT{\n\t\tint sum[N+M+Q];\n\t\tinline void Modify(int x, int val){\n\t\t\tfor(; x<=N+M+Q; sum[x]+=val,x+=lowbit(x));\n\t\t\treturn;\n\t\t}\n\t\tinline int Sum(int x){\n\t\t\tint res=0;\n\t\t\tfor(; x>0; res+=sum[x],x-=lowbit(x));\n\t\t\treturn res;\n\t\t}\n\t\tinline void clear() { ms(sum,0); return; }\n\t}bit;\n\tll A[N+M+Q];\n\tinline void solve(){\n\t\tbit.clear();\n\t\tint cnt=0;\n\t\trep(i,1,m){\n\t\t\tA[++cnt]=i;\n\t\t\tbit.Modify(cnt,1);\n\t\t}\n\t\trep(i,2,n) A[++cnt]=1ll*i*m,bit.Modify(cnt,1);\n\t\trep(i,1,q){\n\t\t\tint l=1,r=cnt,ans=-1;\n\t\t\twhile(l<=r){\n\t\t\t\tint mid=(l+r)>>1;\n\t\t\t\tif(bit.Sum(mid)>=Y[i]) ans=mid,r=mid-1;\n\t\t\t\telse l=mid+1;\n\t\t\t}\n\t\t\tbit.Modify(ans,-1);\n\t\t\tprintf(\"%lld\\n\",A[ans]);\n\t\t\tA[++cnt]=A[ans]; bit.Modify(cnt,1);\n\t\t}\n\t\treturn;\n\t}\n}p80;\n\nvector<ll>vec,li[N];\nint sum[N*60],ls[N*60],rs[N*60],tree[N*60],tot;\n\nstruct P100{\n\tint Upd_Que(int &rt, int l, int r, int x){\n\t\tif(!rt) rt=++tot,sum[rt]=r-l+1;\n\t\tsum[rt]--;\n\t\tif(l==r) return l;\n\t\tint mid=(l+r)>>1,res=(!ls[rt])?(mid-l+1):(sum[ls[rt]]);\n\t\tif(res>=x) return Upd_Que(ls[rt],l,mid,x);\n\t\telse return Upd_Que(rs[rt],mid+1,r,x-res);\n\t}\n\tinline void solve(){\n\t\tint len=Max(n,m)+q; tot=0;\n\t\trep(i,1,n) vec.push_back(1ll*i*m);\n\t\trep(i,1,q){\n\t\t\tint x=X[i],y=Y[i];\n\t\t\tll ans=0;\n\t\t\tif(y==m){\n\t\t\t\tint res=Upd_Que(tree[0],1,len,x);\n\t\t\t\tans=vec[res-1];\n\t\t\t\tprintf(\"%lld\\n\",ans);\n\t\t\t\tvec.push_back(ans);\n\t\t\t}else{\n\t\t\t\tint res=Upd_Que(tree[x],1,len,y);\n\t\t\t\tans=(res<m)?((1ll*(x-1)*m+res)):(li[x][res-m]);\n\t\t\t\tvec.push_back(ans);\n\t\t\t\tprintf(\"%lld\\n\",ans);\n\t\t\t\tres=Upd_Que(tree[0],1,len,x);\n\t\t\t\tli[x].push_back(vec[res-1]);\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n}p100;\n\n//bool S2;\n\nint main(){\n//\tprintf(\"%.6fMB\\n\",(&S2-&S1)/1024.0/1024);\n\tn=rd<int>(),m=rd<int>(),q=rd<int>();\n\tif(n<=1000 && m<=1000 && q<=500) p30.solve();\n\telse if(n<=5e4 && m<=5e4 && q<=500) p50.solve();\n\telse{\n\t\tbool flag=1;\n\t\trep(i,1,q){\n\t\t\tX[i]=rd<int>(),Y[i]=rd<int>();\n\t\t\tflag&=(X[i]==1);\n\t\t}\n\t\tif(flag) p80.solve();\n\t\telse\n\t\t\tp100.solve();\n\t}\n\treturn 0;\n}\n```\n\n> \u505a\u6cd52: \u6811\u72b6\u6570\u7ec4\n\n\u5176\u5b9e\u5b83\u7684\u601d\u60f3\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684P80\u5206\u505a\u6cd5(\u4e24\u79cd\u5176\u5b9e\u90fd\u7c7b\u4f3c\u2026\u2026),\u5c31\u662f\u5148\u5c06\u6bcf\u4e00\u884c\u4e2d\u5b83\u771f\u5b9e\u8981\u627e\u7684y\u503c\u901a\u8fc7\u6811\u72b6\u6570\u7ec4\u6c42\u51fa\u6765,\u66f4\u65b0\u3002\n\n\u63a5\u7740\u518d\u901a\u8fc7\u8be2\u95ee\u987a\u5e8f\u8fdb\u884c\u66f4\u65b0\u6700\u540e\u4e00\u5217\uff0c\u5e76\u540c\u65f6\u628a\u7b2cx\u4e2a\u6570\u63a8\u8fc7\u53bb,\u8be2\u95ee\u627e\u5230\u7684\u6570\u63a8\u5230\u6700\u540e\u4e00\u5217\u7684\u5c3e\u90e8,\u518d\u505a\u4e0a\u6807\u8bb0\u5373\u53ef\u3002\n\n(\u8fd9\u91cc\u76f4\u63a5\u7528\u5927\u6570\u7ec4\u628a\u6bcf\u4e00\u884c\u90fd\u653e\u5230\u4e00\u5757\u53bb\u4e86,l\u8868\u793a\u8fd9\u4e00\u5217\u7684\u5f00\u59cb,r\u8868\u793a\u8fd9\u4e00\u5217\u7684\u7ed3\u675f)\n\n#### Code:\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\n#define rep(i,a,b) for(re int i=a,i##end=b; i<=i##end; i++)\n#define drep(i,a,b) for(re int i=a,i##end=b; i>=i##end; i--)\n#define repp(i,a,b) for(re int i=a,i##end=b; i<=i##end; i++)\n#define drepp(i,a,b) for(re int i=a,i##end=b; i>=i##end; i--)\n#define Erep(i,x) for(re int i=head[x]; ~i; i=Edge[i].nxt)\n#define ms(x,a) memset(x,a,sizeof x);\n#define lowbit(x) ((x)&(-x))\n#define getchar() getChar()\ntypedef long long ll;\nusing namespace std;\n\nconst int N=3e5+5;\nchar buf[N*1500],*p1,*p2;\ninline int getChar(){//\u8bf7\u65e0\u89c6\u8fd9\u4e2a\u8bfb\u5165\u6302-_-|||\n\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,N*1500,stdin),p1==p2)?EOF:*p1++;\n}\n\ntemplate<class T>inline T rd(){\n\tstatic T x; static bool neg; static char ch;\n\tfor(ch=0,neg=0; ch>'9'||ch<'0'; neg|=(ch=='-'),ch=getchar());\n\tfor(x=0; ch>='0'&&ch<='9'; x=(x<<1)+(x<<3)+(ch^'0'),ch=getchar());\n\treturn neg?-x:x;\n}\ntemplate<class T>inline T Max(const T &x, const T &y){\n\treturn x>y?x:y;\n}\ntemplate<class T>inline T Min(const T &x, const T &y){\n\treturn x<y?x:y;\n}\n\nstruct BIT{\n\tint sum[N<<1];\n\tint top;\n\tinline void Modify(int x, int val){\n\t\tfor(; x<=top; sum[x]+=val,x+=lowbit(x));\n\t\treturn;\n\t}\n\tinline int Sum(int x){\n//\u8fd9\u91cc\u7684\u67e5\u503c\u8ddf\u4e4b\u524d\u5199\u8fc7\u7684\u6811\u72b6\u6570\u7ec4\u677f\u5b50\u4e0d\u592a\u4e00\u6837,\u6211\u4eec\u8fd9\u6837\u500d\u589e\u7684\u8df3\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\u5bf9\u5e94\u4f4d\u7f6e(res+1\u7684\u539f\u56e0\u5176\u5b9e\u662f\u56e0\u4e3a\u6211\u4eec\u8df3\u5230\u7684\u662f\u6700\u8fd1\u4e8e\u90a3\u4e2a\u70b9\u7684\u70b9,\u800c\u975e\u76f4\u63a5\u8df3\u5230\u90a3\u4e2a\u70b9,\u4e2a\u4eba\u611f\u89c9\u8ddf\u6c42LCA\u633a\u50cf\u7684)\n\t\tint res=0;\n\t\tdrep(i,19,0){\n\t\t\tint now=res|(1<<i);\n\t\t\tif(now<=top && x>sum[now]){\n\t\t\t\tx-=sum[now]; res=now;\n\t\t\t}\n\t\t}\n\t\treturn res+1;\n\t}\n}bit;\n\nint n,m,q,l[N],r[N];\n\nstruct ask{\n\tint x,y;\n\tinline void read() { x=rd<int>(); y=rd<int>(); return; }\n\tvoid Print(){\n\t\tprintf(\"%d %d\\n\",x,y);\n\t}\n}A[N];\nstruct LIST{\n\tint to,id,nxt;\n}List[N];\nint head[N],tcnt;\nvoid AddList(int u, int v, int id){\n\tList[++tcnt]=(LIST)<%v,id,head[u]%>;\n\thead[u]=tcnt; return;\n}\n\nll Lian[N<<1],behind[N];\n\nint main(){\n\tms(head,-1);\n\tn=rd<int>(); m=rd<int>(); q=rd<int>();\n\trep(i,1,q){\n\t\tA[i].read();\n\t}\n\tdrep(i,q,1) AddList(A[i].x,A[i].y,i);\n\tbit.top=m+q;\n\trep(i,1,m) bit.Modify(i,1);\n\tint tot=0;\n\trep(i,1,n){\n\t\tint cnt=0;\n\t\tl[i]=tot+1; r[i]=tot;\n\t\tfor(re int j=head[i]; ~j; j=List[j].nxt){\n\t\t\tLIST y=List[j];\n\t\t\tint res=bit.Sum(y.to);\n\t\t\tA[y.id].y=res;\n\t\t\tcnt++; tot++;\n\t\t\tbit.Modify(res,-1);\n\t\t\tbit.Modify(m+cnt,1);\n\t\t}\n\t\tcnt=0;\n\t\tfor(re int j=head[i]; ~j; j=List[j].nxt){\n\t\t\tLIST y=List[j];\n\t\t\tbit.Modify(A[y.id].y,1);\n\t\t\tcnt++;\n\t\t\tbit.Modify(m+cnt,-1);\n\t\t}\n\t}\n\trep(i,1,m) bit.Modify(i,-1);\n\tbit.top=n+q;\n\trep(i,1,n){\n\t\tbit.Modify(i,1);\n\t\tLian[i]=1ll*i*m;\n\t}\n\trep(i,1,q){\n\t\tint x=A[i].x,y=A[i].y;\n\t\tint res=bit.Sum(x);\n\t\tbehind[++r[x]]=Lian[res];\n\t\tbit.Modify(res,-1);\n\t\tll ans=(y<m)?(1ll*(x-1)*m+y):(behind[l[x]+y-m]);\n\t\tLian[n+i]=ans;\n\t\tbit.Modify(n+i,1);\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1566516941,
        "uid": 81715,
        "name": "ppp204",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u5728$noilinux$\u4e0a\u9762\u8bd5\u673a\u7684\u65f6\u5019\uff0c\u60f3\u5230\u6253\u4e00\u4e0b\u5e73\u8861\u6811\u7ec3\u4e00\u4e0b\u624b\u3002\n\n\u8fd9\u91cc\u6211\u91c7\u7528\u7684\u662f$leafytree$\u7684\u5206\u88c2\u5e73\u8861\uff0c\u65cb\u8f6c\u5e73\u8861\u7248\u672c\u7684\u6233[\u8fd9\u91cc](https://www.luogu.org/blog/user7035/solution-p3960)\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5229\u7528\u5206\u88c2\u5e73\u8861\u7684$leafytree$\u7684\u5b9e\u73b0\u7ec6\u8282\u660e\u663e\u5c11\u4e86\u5f88\u591a\uff0c\u597d\u8c03\u5f88\u591a~~(\u4f46\u662f\u8dd1\u5f97\u6162\u5f88\u591a)~~\u3002\u4e4b\u540e\u5199\u8fd9\u4e2a\u5927\u6982\u90fd\u4f1a\u5229\u7528\u5206\u88c2\u5e73\u8861\u6765\u5b9e\u73b0\u5427\u3002\n\n\u4ee3\u7801:\n```cpp\n#include<bits/stdc++.h>\n#define Rep(i,a,b) for(register int i=(a);i<=(b);++i)\n#define Repe(i,a,b) for(register int i=(a);i>=(b);--i)\n#define pb push_back\n#define pf push_front\n#define mp make_pair\n#define fi first\n#define se second\n\nusing namespace std;\n\ntemplate<typename T>inline void read(T&x)\n{\n    T f=1;register char ch;x=0;\n    for(ch=getchar();!isdigit(ch);ch=getchar());\n    for(;isdigit(ch);ch=getchar())x=x*10+(ch^48);\n    x*=f;\n}\n\ninline void file()\n{\n    freopen(\"phalanx.in\",\"r\",stdin);\n    freopen(\"phalanx.out\",\"w\",stdout);\n}\n\nstatic int n,m,q;\n\ninline void init()\n{\n    read(n),read(m),read(q);\n}\n\nconst int MAXN=3e5+7;\n\nnamespace BST\n{\n    const int NODE=2e6+7,ND=2e6;\n\n    const double alp=1-sqrt(2)/2,lim=alp/(1-alp);\n\n    typedef long long ll;\n    typedef pair<int,int>PII;\n    \n    static int siz[NODE],sz[NODE],son[NODE][2];\n\n    static ll lb[NODE],rb[NODE];\n\n    namespace BUFF\n    {\n        static int BUF[NODE],e;\n\n        inline int newnode(){return BUF[e--];}\n        \n        inline void del(int u)\n        {siz[u]=sz[u]=son[u][0]=son[u][1]=lb[u]=rb[u]=0;BUF[++e]=u;}\n    }\n    using BUFF::newnode;\n    using BUFF::del;\n\n    inline void pushup(int u)\n    {\n        sz[u]=sz[son[u][0]]+sz[son[u][1]];\n        siz[u]=siz[son[u][0]]+siz[son[u][1]];\n    }\n\n    inline int merge(int u,int v)\n    {\n        if(!u||!v)return u|v;\n        if(sz[u]<=sz[v]&&sz[u]>=lim*sz[v]||sz[v]<=sz[u]&&sz[v]>=lim*sz[u])\n        {\n            int cur=newnode();\n            son[cur][0]=u,son[cur][1]=v;\n            pushup(cur);\n            return cur;\n        }\n        if(sz[u]>sz[v])\n        {\n            int lp=son[u][0],rp=son[u][1];\n            del(u);\n            if(sz[lp]>=alp*(sz[lp]+sz[rp]+sz[v]))return merge(lp,merge(rp,v));\n            else\n            {\n                int ll=son[rp][0],rr=son[rp][1];\n                del(rp);\n                return merge(merge(lp,ll),merge(rr,v));\n            }\n        }\n        else\n        {\n            int lp=son[v][0],rp=son[v][1];\n            del(v);\n            if(sz[rp]>=alp*(sz[u]+sz[lp]+sz[rp]))return merge(merge(u,lp),rp);\n            else\n            {\n                int ll=son[lp][0],rr=son[lp][1];\n                del(lp);\n                return merge(merge(u,ll),merge(rr,rp));\n            }\n        }\n    }\n\n    static struct leafy_tree\n    {\n        int rt,typ;\n\n        PII csplit(int u,int k)\n        {\n            if(!u||!k)return mp(0,u);\n            if(k==siz[u])return mp(u,0);\n            if(!son[u][0])\n            {\n                int cur=newnode();sz[cur]=1;\n                lb[cur]=lb[u]+1ll*typ*k;\n                rb[cur]=rb[u];\n                rb[u]=lb[u]+1ll*(k-1)*typ;\n                siz[cur]=siz[u]-k,siz[u]=k;\n                return mp(u,cur);\n            }\n            int lp=son[u][0],rp=son[u][1];\n            del(u);\n            if(siz[lp]>=k)\n            {\n                PII y=csplit(lp,k);\n                return mp(y.fi,merge(y.se,rp));\n            }\n            else\n            {\n                k-=siz[lp];\n                PII y=csplit(rp,k);\n                return mp(merge(lp,y.fi),y.se);\n            }\n        }\n\n        inline int breakout(int k)\n        {\n            PII y=csplit(rt,k-1),z=csplit(y.se,1);\n            rt=merge(y.fi,z.se);\n            return z.fi;\n        }\n    }lin[MAXN],cur;\n}\nusing namespace BST;\ninline void solve()\n{\n    Rep(i,1,ND)BUFF::BUF[++BUFF::e]=ND-i+1;\n    Rep(i,1,n)\n    {\n        lin[i].rt=newnode();\n        lb[lin[i].rt]=1ll*i*m-m+1,rb[lin[i].rt]=1ll*i*m-1;\n        sz[lin[i].rt]=1,siz[lin[i].rt]=m-1,lin[i].typ=1;\n    }\n    cur.rt=newnode(),cur.typ=m;\n    lb[cur.rt]=m,rb[cur.rt]=1ll*n*m,sz[cur.rt]=1,siz[cur.rt]=n;\n    static int x,y;\n    Rep(i,1,q)\n    {\n        read(x),read(y);\n        if(y==m)\n        {\n            int now=cur.breakout(x);\n            printf(\"%lld\\n\",lb[now]);\n            cur.rt=merge(cur.rt,now);\n        }\n        else\n        {\n            int now=lin[x].breakout(y),sf=cur.breakout(x);\n            printf(\"%lld\\n\",lb[now]);\n            cur.rt=merge(cur.rt,now);\n            lin[x].rt=merge(lin[x].rt,sf);\n        }\n    }\n}\n\nint main()\n{\n    init();\n    solve();\n    return 0;\n}\n```",
        "postTime": 1541598892,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u5feb\u5230$noip$\u590d\u8d5b\u4e86\uff0c\u8d76\u7d27\u5199\u4e00\u4e0b\u5e73\u8861\u6811\u7ec3\u624b\u3002\n\n\u8fd9\u91cc\u91c7\u7528\u7684\u662f$leafytree$\u7ef4\u62a4\u8fd9\u9053\u9898\u3002\u5982\u679c\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f$leafytree$\u7684\u8bdd\u53ef\u4ee5\u770b\u4eca\u5e74\u56fd\u5bb6\u96c6\u8bad\u961f\u8bba\u6587\u6216\u8005\u6233[\u8fd9\u91cc](https://www.luogu.org/blog/user7035/solution-p3369)~~(\u6700\u597d\u8fc7\u4e86\u590d\u8d5b\u518d\u770b\uff0c\u8003\u8bd5\u524d\u5c11\u5b66\u4e9b\u82b1\u91cc\u80e1\u54e8\u7684\u4e1c\u897f)~~\u3002\n\n\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u6309\u63d0\u8bae\u6a21\u62df\u3002\n\n\u4ee3\u7801:\n\n```cpp\n#include<bits/stdc++.h>\n#define Rep(i,a,b) for(register int i=(a);i<=(b);++i)\n#define Repe(i,a,b) for(register int i=(a);i>=(b);--i)\n#define pb push_back\n#define mp make_pair\n#define eb emplace_back\n#define ef emplace_front\n#define ob pop_back\n#define of pop_front\n#define Chkmax(a,b) a=a>b?a:b\n#define Chkmin(a,b) a=a<b?a:b\ntypedef unsigned long long uint64;\ntypedef unsigned int uint32;\ntypedef long long ll;\n\nusing namespace std;\n\nnamespace IO\n{\n    const uint32 Buffsize=1<<15,Output=1<<23;\n    static char Ch[Buffsize],*S=Ch,*T=Ch;\n    inline char getc()\n    {\n        return((S==T)&&(T=(S=Ch)+fread(Ch,1,Buffsize,stdin),S==T)?0:*S++);\n    }\n    static char Out[Output],*nowps=Out;\n    \n    inline void flush(){fwrite(Out,1,nowps-Out,stdout);nowps=Out;}\n\n    template<typename T>inline void read(T&x)\n    {\n        x=0;static char ch;T f=1;\n        for(ch=getc();!isdigit(ch);ch=getc())if(ch=='-')f=-1;\n        for(;isdigit(ch);ch=getc())x=x*10+(ch^48);\n        x*=f;\n    }\n\n    template<typename T>inline void write(T x,char ch='\\n')\n    {\n        if(!x)*nowps++='0';\n        if(x<0)*nowps++='-',x=-x;\n        static uint32 sta[111],tp;\n        for(tp=0;x;x/=10)sta[++tp]=x%10;\n        for(;tp;*nowps++=sta[tp--]^48);\n        *nowps++=ch;\n    }\n}\nusing namespace IO;\n\ninline void file()\n{\n#ifndef ONLINE_JUDGE\n    FILE*DSA=freopen(\"water.in\",\"r\",stdin);\n    FILE*SDU=freopen(\"water.out\",\"w\",stdout);\n#endif\n}\n\nconst int MAXN=3e5+7,NODE=2.5e6+7;\n\nstatic int n,m,q;\n\nvoid init(){read(n),read(m),read(q);}\n\nnamespace BST\n{\n    static int e,sta[NODE],son[NODE][2],Sz[NODE],sz[NODE],fa[NODE];\n\n    static ll lb[NODE],rb[NODE];\n\n    const double alp=1.0-sqrt(2)/2,lim=(1-2*alp)/(1-alp);\n\n    inline int newnode(void){return sta[e--];}\n\n    inline void del(int u)\n    {\n        son[u][0]=son[u][1]=Sz[u]=sz[u]=lb[u]=rb[u]=fa[u]=0;\n        sta[++e]=u;\n    }\n\n    inline void refresh(int u)\n    {\n        if(son[u][0])\n        {\n            sz[u]=sz[son[u][0]]+sz[son[u][1]];\n            Sz[u]=Sz[son[u][0]]+Sz[son[u][1]];\n        }\n    }\n\n    inline bool isl(int u){return u==son[fa[u]][1];}\n\n    static struct leafy_tree\n    {\n        int rt,sp;\n\n        inline void rotate(int u)\n        {\n            static int f,ff,k;f=fa[u],ff=fa[f],k=isl(u);\n            fa[u]=ff;if(ff)son[ff][isl(f)]=u;\n            fa[son[f][k]=son[u][k^1]]=f;\n            fa[son[u][k^1]=f]=u;\n            refresh(f),refresh(u);\n            if(f==rt)rt=u;\n        }\n\n        inline void maintain(int u)\n        {\n            static int dir;\n            if(son[u][0])\n            {\n                if(Sz[son[u][0]]<Sz[u]*alp)dir=1;\n                else if(Sz[son[u][1]]<Sz[u]*alp)dir=0;\n                else return;\n                if(Sz[son[son[u][dir]][dir^1]]>=Sz[son[u][dir]]*lim)\n                    rotate(son[son[u][dir]][dir^1]);\n                rotate(son[u][dir]);\n            }\n        }\n\n        inline void append(int&nw,int u)\n        {\n            if(!nw){nw=u;return;}\n            if(!son[nw][1])\n            {\n                static int cur;cur=newnode();\n                lb[cur]=lb[nw],rb[cur]=rb[nw],sz[cur]=sz[nw],Sz[cur]=1;\n                lb[nw]=rb[nw]=0;\n                son[fa[cur]=nw][0]=cur;\n                son[fa[u]=nw][1]=u;\n            }\n            else append(son[nw][1],u);\n            refresh(nw);\n            maintain(nw);\n        }\n\n        inline int breakout(int u,int x)\n        {\n            if(u==rt&&!son[u][0]&&lb[u]==rb[u]){rt=0;return u;}\n            static int nd;\n            if(son[u][0])nd=x<=sz[son[u][0]]?breakout(son[u][0],x)\n                :breakout(son[u][1],x-sz[son[u][0]]);\n            else\n            {\n                if(lb[u]==rb[u])\n                {\n                    int f=fa[u],cur=son[f][isl(u)^1];\n                    fa[cur]=fa[f];\n                    if(!fa[f])rt=cur;\n                    else son[fa[f]][isl(f)]=cur;\n                    del(f),fa[u]=0;\n                    return u;\n                }\n                else if(x==1)\n                {\n                    int cur=newnode();\n                    lb[cur]=rb[cur]=lb[u];\n                    lb[u]+=sp;\n                    Sz[cur]=sz[cur]=1,--sz[u];\n                    return cur;\n                }\n                else if(x==sz[u])\n                {\n                    int cur=newnode();\n                    lb[cur]=rb[cur]=rb[u];\n                    rb[u]-=sp,--sz[u];\n                    Sz[cur]=sz[cur]=1;\n                    return cur;\n                }\n                else\n                {\n                    int cur=newnode(),ls=newnode(),rs=newnode();\n                    assert(u!=ls&&u!=rs&&cur!=u);\n                    lb[ls]=lb[u],rb[rs]=rb[u];\n                    Sz[ls]=Sz[rs]=Sz[cur]=sz[cur]=1;\n                    sz[ls]=x-1,sz[rs]=sz[u]-x;\n                    rb[ls]=(ll)(sz[ls]-1)*sp+lb[u],lb[rs]=(ll)(sz[ls]+1)*sp+lb[u];\n                    fa[son[u][0]=ls]=fa[son[u][1]=rs]=u;\n                    lb[cur]=rb[cur]=(ll)sz[ls]*sp+lb[u];\n                    refresh(u);\n                    return cur;\n                }\n            }\n            refresh(u);\n            maintain(u);\n            return nd;\n        }\n    }p[MAXN],ls;\n}\nusing namespace BST;\n\nconst int MAXNODE=2.5e6;\n\nvoid dfout(int u)\n{\n\tcout<<u<<' '<<son[u][0]<<' '<<son[u][1]<<endl;\n\tif(son[u][0])dfout(son[u][0]),dfout(son[u][1]);\n\tcout<<lb[u]<<' '<<rb[u]<<endl;\n}\n\ninline void solve()\n{\n    Repe(i,MAXNODE,1)sta[++e]=i;\n    Rep(i,1,n)\n    {\n        p[i].rt=newnode();\n        p[i].sp=1;\n        Sz[p[i].rt]=1,sz[p[i].rt]=m-1,lb[p[i].rt]=1+1ll*(i-1)*m\n            ,rb[p[i].rt]=m-1+1ll*(i-1)*m;\n    }\n    ls.rt=newnode();\n    ls.sp=m;\n    Sz[ls.rt]=sz[ls.rt]=n,lb[ls.rt]=m,rb[ls.rt]=1ll*n*m;\n    static int x,y;\n    Rep(i,1,q)\n    {\n    \t//dfout(ls.rt),cout<<endl;\n        read(x),read(y);\n        if(y==m)\n        {\n            int cur=ls.breakout(ls.rt,x);\n            write(lb[cur]);\n            ls.append(ls.rt,cur);\n        }\n        else\n        {\n            int cur=p[x].breakout(p[x].rt,y),intoo=ls.breakout(ls.rt,x);\n            write(lb[cur]);\n            ls.append(ls.rt,cur);\n            p[x].append(p[x].rt,intoo);\n        }\n        if(i%100000==0)flush();\n    }\n    flush();\n}\n\nint main()\n{\n\tfile();\n    init();\n    solve();\n    return 0;\n}\n```",
        "postTime": 1540427663,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u6211\u7684\u601d\u8def\u548c1L\u90a3\u4f4d\u7528Splay\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u697c\u4e0a\u7528\u7684\u662fSplay\u6216\u8005FHQtrep\u7ef4\u62a4\u7684\uff0c\u6211\u7528\u7684\u662f\u66ff\u7f6a\u7f8a\u6811\n\n\u4e8b\u5b9e\u4e0a\u6240\u6709\u5e73\u8861\u64cd\u4f5c\u4e0d\u4f9d\u8d56\u6bd4\u8f83\u7684\u5e73\u8861\u6811\u90fd\u53ef\u4ee5\u7ef4\u62a4\u533a\u95f4\uff0c\u53ea\u9700\u8981\u7a0d\u7a0d\u6539\u9020\u4ee5\u4e0b\u5c31\u597d\u4e86\n\n\u7136\u540e\u8bf4\u8bf4\u6211\u7528\u66ff\u7f6a\u7f8a\u6811\u5728\u5199\u6b64\u9898\u65f6\u53d1\u73b0\u4e86\u4e00\u4e2a\u8be1\u5f02\u7684\u4e8b\u60c5\n\n\u5f53\u66ff\u7f6a\u7f8a\u7684alpha\u53d6\u503c\u4e3a**0.9**\u65f6\u8dd1\u7684\u6700\u5feb\n\n![qwq](https://ws4.sinaimg.cn/bmiddle/9150e4e5ly1fjh8msuhbfj201k01gwe9.jpg)0.9,\u8fd9\u8bf4\u660e\u5efa\u51fa\u6765\u7684\u6811\u53ef\u80fd\u6781\u5ea6\u7684\u4e0d\u5e73\u8861,\u4f46\u662f\u5374\u8dd1\u7684\u6700\u5feb??\n\n\u53cd\u6b63\u66ff\u7f6a\u7f8a\u6811\u7ef4\u62a4\u5e73\u5f88\u90fd\u5f88\u7384\u5b66,alpha\u7384\u5b66\u4e5f\u633a...\u633a\u6b63\u5e38\u7684(\u6c42Dalao\u8bc1\u660e)\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n#define ull long long\n#define alpha (double)0.9\n#define lson ch[0]\n#define rson ch[1]\ntemplate<class T,class iT=long long>\nstruct node{\n    #define gl(a) (lson==nullptr?0:lson->a)\n    #define gr(a) (rson==nullptr?0:rson->a)\n    node *ch[2];\n    iT cover,many,size;//\u4e0b\u5c5e(\u5305\u62ec\u81ea\u5df1)\u6709\u6548\u8282\u70b9\u6570\u91cf & ~\u603b\u6570\u91cf \n    T val;\n    inline void maintain(){//\u7ef4\u62a4\n        cover=gl(cover)+gr(cover)+1;\n        size=gl(size)+gr(size)+many;\n    }\n    inline bool isBad(){//\u662f\u4e0d\u662f\u66ff\u7f6a\u7f8a \n        return max(gl(cover),gr(cover))>cover*alpha;\n    }\n    node(){}\n    node(T _val,iT _many){\n    \tch[0]=ch[1]=nullptr;\n    \tmany=_many;\n    \tval=_val;\n    \tmaintain();\n    }\n};\nstatic node<ull> mem_pool[5000000];\nstatic node<ull> *del_pool[5000000];\nstatic node<ull> *memi=mem_pool;\nstatic node<ull> **deli=del_pool;\nnode<ull>* add(node<ull> a){\n    if (deli!=del_pool) return &(**--deli=a);\n    return &(*memi++=a);\n}\nvoid del(node<ull> *a){\n    *deli++=a;\n}\n#define gl(a,n) (n==nullptr||n->lson==nullptr?0:n->lson->a)\n#define gr(a,n) (n==nullptr||n->rson==nullptr?0:n->rson->a)\n#define gt(a,n) (n==nullptr?0:n->a)\ntemplate<class T,class iT=long long>\nstruct STree{\n    node<T> *root;iT maxCover;\n    STree(){root=nullptr;maxCover=0;}\n    inline void toArry(register node<T> *p,register vector<node<T>*> &v){//\u62cd\u6241\u5e76\u56de\u6536 \n        if (p==nullptr) return ;\n        toArry(p->lson,v);\n        if (p->many) v.push_back(p);\n        toArry(p->rson,v);\n        if (!p->many) del(p);\n    }\n    inline node<T>* toTree(register vector<node<T>*> &v,register ull l,register ull r){//\u5efa\u6811 \n        if (l>=r) return nullptr;\n        register ull mid=(l+r)>>1;\n        register node<T> *p=v[mid];\n        p->lson=toTree(v,l,mid);\n        p->rson=toTree(v,mid+1,r);\n        p->maintain();\n        return p;\n    }\n    \n    inline void rebuild(register node<T> *&p){ \t\t\t//\u628a\u524d\u9762\u4e24\u4e2a\u51fd\u6570\u603c\u5728\u4e00\u8d77\u5c31\u662f\u91cd\u5efa\u4e86 \n    \tif (p!=nullptr){          \t\t\t//\u56e0\u4e3a\u91cd\u5efa\u540e\u53ef\u80fd\u5f53\u524d\u8282\u70b9\u4f1a\u53d8,\u6240\u4ee5\u8981\u7528*& \n            vector<node<T>*> v;\n            toArry(p,v);\n            p=toTree(v,0,v.size());\n            maxCover=gt(cover,p);\n        }\n    }\n    \n    node<T> **need,*now;//need\u8868\u793a\u9700\u8981\u91cd\u5efa\u7684\u8282\u70b9\u5173\u7cfb,now\u8868\u793a\u63d2\u5165\u540e\u7684\u8282\u70b9 \n    inline void falseInsert(register node<T> *&p,register node<T> *todo,register iT kth){//\u9012\u5f52\u63d2\u5165 \n        if (p==nullptr){\n            now=p=todo;\n            need=nullptr;\n        }else{\n    \t\tregister ull lsize=gl(size,p);\n    \t\tregister ull all=lsize+p->many;\n            if (kth>=all) falseInsert(p->rson,todo,kth-all);\n            else falseInsert(p->lson,todo,kth);\n            p->cover++;p->size+=todo->many;\n            if (p->isBad()) need=&p;\n        }\n    }\n    \n    inline node<T>* insert(register node<T> to,register iT kth){//\u5bf9\u9012\u5f52\u63d2\u5165\u7684\u7b80\u5355\u5c01\u88c5\n    \tregister node<T> *todo=add(to);\n        falseInsert(root,todo,kth);\n        if (need!=nullptr) rebuild(*need);\n        maxCover=max(maxCover,gt(cover,root));\n        return now;\n    }\t\n    \n\tinline void falseErase(register node<T> *p,register iT k){//\u540c\u4e0a \n\t\tregister ull lsize=gl(size,p);\n\t\tregister ull all=lsize+p->many;\n\t\tif (p!=nullptr){\n        \tif(lsize>=k) falseErase(p->lson,k); else\n        \tif(p->many&&all>=k) now=p;\n            else falseErase(p->rson,k-all);\n            p->size-=gt(many,now);\n        }\n    }\n    \n    inline void erase(register iT k){//\u5bf9\u9012\u5f52\u5220\u9664\u7684\u7b80\u5355\u5c01\u88c5\n        falseErase(root,k);\n        now->many=0;\n        if (root!=nullptr&&root->cover<=alpha*maxCover) rebuild(root),maxCover=gt(cover,root);\n    }\n    \n    inline iT kth(register iT k){//\u6c42\u7b2ck\u5927\u6570 \u8fd4\u56de[a,b],a+1 \n        register node<T> *p=root;\n        while (p!=nullptr){\n    \t\tull lsize=gl(size,p);\n    \t\tull all=lsize+p->many;\n        \tif(lsize>=k) p=p->lson; else\n        \tif(p->many&&all>=k) break;\n            else k-=all,p=p->rson;\n        }\n        now=p;\n        return k-gl(size,p);\n\t}\n};\nSTree<ull> l[300004],e;\null gi(){\n    register ull i=0;register char c;\n    while (!(isdigit(c=getchar())));\n    do i=c-'0'+(i<<3)+(i<<1); while ((isdigit(c=getchar())));\n    return i;\n}\nvoid put(long long a,char split='\\n'){\n    char p[20];int i=0;\n    while (a) p[i++]=a%10+'0',a/=10;\n    while (i) putchar(p[--i]);\n    putchar(split);\n}\null n,m,q;\nint main(){\n    n=gi();m=gi();q=gi();\n    if (m!=1) for (register ull i=1;i<=n;i++) l[i].insert(node<ull>((i-1)*m+1,m-1),1);//\u521d\u59cb\u5316\u6bcf\u884c \n    for (register ull i=1;i<=n;i++) e.insert(node<ull>(i*m,1),gt(size,e.root)+1);//\u521d\u59cb\u5316\u6700\u540e\u4e00\u5217 \n    for (register ull i=1;i<=q;i++){\n        ull x,y;\n        x=gi();y=gi();\n        if (y==m){\n            e.kth(x);\n            register ull a=e.now->val;\n            put(a);\n            e.erase(x);\n            e.insert(node<ull>(a,1),e.root->size+1);\n        }else{\n        \tregister ull py=l[x].kth(y);\n            register ull dv=l[x].now->val;\n        \tregister ull dm=l[x].now->many;\n        \t//\u6bcf\u884c\u88ab\u5206\u6210\u4e86\u4e09\u4e2a\u533a\u95f4 \n        \t//[dv,dv+py-1)\n        \t//[dv+py-1]->\u8981\u6c42\u7684\u503c \n        \t//[dv+py,dv+dm)\n        \tput(dv+py-1);\n        \tl[x].erase(y);\n            if (dm-py>0) l[x].insert(node<ull>(dv+py,dm-py),y-py);\n        \tif (py-1>0) l[x].insert(node<ull>(dv,py-1),y-py);\n            e.kth(x);register ull d1=e.now->val;\n            e.erase(x);\n            l[x].insert(node<ull>(d1,1),l[x].root->size+1);\n            e.insert(node<ull>(dv+py-1,1),e.root->size+1);\n        }\n    }\n}\n```",
        "postTime": 1534995081,
        "uid": 46860,
        "name": "z3475",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    },
    {
        "content": "\u505a\u6cd5\u601d\u8def\u5176\u5b9e\u5dee\u4e0d\u591a\u90fd\u4e00\u6837\u3002\n\n\u4e5f\u53ef\u4ee5\u7528\u975e\u65cb\u8f6ctreap\u6765\u5b9e\u73b0\u3002\n\n~~\u5199\u5b8c\u4f60\u53d1\u73b0\u975e\u65cbtreap\u5199\u8fd9\u4e2a\u9898\u771f\u597d\u5199~~\n\n\u849f\u84bb\u8c03\u4e86\u4e00\u5e74\u3002\n\n\u8003\u8651\u8fd8\u662f\u7ef4\u62a4\u6700\u540e\u4e00\u5217\u548c\u6bcf\u6392\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u7684treap\uff0c\u6bcf\u6b21\u7684\u64cd\u4f5c\u76f8\u5f53\u4e8e\u5220\u9664\u4e00\u4e2a\u70b9\u63d2\u5165\u4e00\u4e2a\u70b9\n\n\u5229\u7528\u975e\u65cb\u8f6ctreap\u7684\u5b9e\u73b0\u5c31\u662fsplit\u548cmerge\n\n\u5f53\u8be2\u95ee\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\u5148\u628a\u5b83split\u6210\u4e09\u6bb5\u513f\u7136\u540e\u518dmerge\u8d77\u6765\u5c31\u884c\u4e86\u3002\n\n\u6ce8\u610f\u5f00long long\u4ee5\u53ca\u7279\u5224y == m\u7684\u60c5\u51b5\n\n```cpp\n# include <bits/stdc++.h>\n\nusing namespace std;\n\n# define REP(i, a, b) for(int i = a; i <= b; ++ i)\n# define REPD(i, a, b) for(int i = a; i >= b; -- i)\n# define CLR(i, a) memset(i, a, sizeof(i))\n# define QAQ puts(\"*\")\n# define STOP system(\"pause\")\n\ntypedef long long LL;\nconst int N = 3e5 + 5;\n\nint n, m, q;\n\n# define gc getchar\ninline int rd() {\n    char ch = gc(); int ret = 0;\n    while(ch < '0' || ch > '9') ch = gc();\n    while(ch <= '9' && ch >= '0') ret = ret * 10 + ch - '0', ch = gc();\n    return ret;\n}\n\nstruct Treap {\n    # define u tr[x]\n    # define o tr[y]\n    # define uls tr[u.ls]\n    # define urs tr[u.rs]\n\n    int rt[N], tot;\n    struct node {\n        LL l, r;\n        int sz, prio, ls, rs;\n        inline void set(LL _l, LL _r) {\n            l = _l, r = _r, ls = rs = 0, prio = rand();\n        }\n    } tr[N * 10];\n    inline void upd(int x) { u.sz = uls.sz + urs.sz + gsz(x); }\n    inline int malloc() { return ++ tot; }\n    inline int gsz(int x) { return u.r ? u.r - u.l + 1 : 0; }\n    struct info { LL x, y; } ;\n\n    int merge(int x, int y) {\n        if(!y) return upd(x), x;\n        if(!x) return upd(y), y;\n        if(u.prio > o.prio) return u.rs = merge(u.rs, y), upd(x), x;\n        else return o.ls = merge(x, o.ls), upd(y), y;\n    }\n    \n    info split(int x, int k) {\n        if(!k) return (info) { 0, x };    \n        if(k >= uls.sz + gsz(x)) {\n//            printf(\"goto rt %d %d %d\\n\", k, uls.sz, gsz(x));\n            k -= uls.sz + gsz(x);\n            info tmp = split(u.rs, k);\n            u.rs = tmp.x;\n            upd(x);\n            return (info) { x, tmp.y };\n        }\n        else if(uls.sz >= k) {\n            info tmp = split(u.ls, k);\n            u.ls = tmp.y;\n            upd(x);\n            return (info) { tmp.x, x };\n        }\n        else {\n            k -= uls.sz;\n            int y = malloc();\n            o.set(u.l + k, u.r);\n            u.r = o.l - 1;\n            y = merge(y, u.rs);\n            u.rs = 0;\n            upd(x);\n            return (info) { x, y };\n        }\n    }\n    \n    void init() {\n        REP(i, 1, n) tr[(rt[i] = malloc())].set(1ll * (i - 1) * m + 1, 1ll * i * m - 1);\n        tr[(rt[0] = malloc())].set(m, m);\n        REP(i, 2, n) {\n            int x = malloc();\n            tr[x].set(1ll * i * m, 1ll * i * m);\n            rt[0] = merge(rt[0], x);\n        }\n    }\n    void print(int x) {\n         if(u.ls) print(u.ls);\n          printf(\"[%d, %d]\\n\", u.l, u.r);\n        if(u.rs) print(u.rs);\n    }\n \n    \n    void solve(int a, int b) {\n        info t1, t2;\n        if(b != m) {\n            t1 = split(rt[a], b - 1);\n            t2 = split(t1.y, 1);\n            rt[a] = merge(t1.x, t2.y);\n        }\n        int pos1;\n        if(b != m) pos1 = t2.x;\n        t1 = split(rt[0], a - 1);\n    //    STOP;\n        t2 = split(t1.y, 1);\n        if(b != m) rt[a] = merge(rt[a], t2.x);\n        rt[0] = merge(t1.x, t2.y);\n        if(b == m) pos1 = t2.x;\n        printf(\"%lld\\n\", tr[pos1].l);\n        rt[0] = merge(rt[0], pos1);\n    }\n} t;\n\nint main() {\n//    freopen(\"phalanx.in\", \"r\", stdin);\n//    freopen(\"phalanx.out\", \"w\", stdout);\n    n = rd(), m = rd(), q = rd();\n    t.init();\n    REP(i, 1, q) {\n        int a = rd(), b = rd();\n        t.solve(a, b);\n    }\n    return 0;\n}\n```",
        "postTime": 1510829997,
        "uid": 16749,
        "name": "shadyqwq",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3960 \u3010\u5217\u961f\u3011"
    }
]