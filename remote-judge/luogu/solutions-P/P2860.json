[
    {
        "content": "\u9898\u89e3 P2860 \u3010\u5197\u4f59\u8def\u5f84\u3011\r\n\r\n\u6ce8\u610f\uff1a\u56e0\u4e3a\u5df2\u6709\u9898\u89e3\u8bb2\u660e\u767d\u4e86\u9898\u610f\u548c\u601d\u8def\uff0c\u6240\u4ee5\u6211\u5c31\u4e0d\u5728\u6b64\u91cd\u590d\u4e86\uff0c\u6211\u53ea\u662f\u60f3\u8bf4\u660e\u4e00\u4e0b\u6700\u7b80\u5355\u6e05\u6670\u7684\u4e00\u4e2a\u65b9\u6cd5\u2014\u2014\u8fd9\u5c31\u662f\u4e00\u4e2a\u6c42\u53cc\u8054\u901a\u5206\u91cf\u7684\u6a21\u677f\uff08\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u65e0\u5411\u56fe\u7f29\u70b9\uff09\r\n\r\n\u6240\u4ee5\uff0c\u6253\u4e00\u904d\u6a21\u677f\u5373\u53ef\u3002\u5f53\u7136\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u6a21\u677f\uff0c\u6211\u60f3\u8981\u8bb2\u7684\u6e05\u695a\u4e00\u4e9b\u3002\r\n\r\n\u5bf9\u4e8e\u65e0\u5411\u56fe\u7684\u7f29\u70b9\uff0c\u7531\u4e8e\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u8981\u4eceu\u5230v\u5efa\u4e00\u6761\u8fb9\uff0c\u53c8\u8981\u4ecev\u5230u\u5efa\u4e00\u6761\u8fb9\uff0c\u4f46\u662f\uff0c\u5728tarjan\u65f6\u4f1a\u6709\u4e24\u6761\u8fb9\u91cd\u590d\uff0c\u8fd9\u662f\u4e00\u4e2a\u9ebb\u70e6\uff0c\u800c\u4e14\uff0c\u8fd8\u4e0d\u5f97\u4e0d\u5efa\u4e24\u6761\u8fb9\uff0c\u8fd9\u8be5\u600e\u4e48\u529e\u5462\uff1f\r\n\r\n\u89e3\u51b3\u7684\u65b9\u6cd5\u5c31\u662f\uff0c\u5f53\u540c\u4e00\u6761\u65e0\u5411\u8fb9\u7684\u4e24\u6761\u6709\u5411\u8fb9\u7684\u5176\u4e2d\u4e00\u6761\u8d70\u8fc7\u65f6\uff0c\u628a\u53e6\u4e00\u6761\u540c\u65f6\u8d4b\u503c\u4e3a\u8d70\u8fc7\uff0c\u8fd9\u5c31\u8981\u7528\u5230\u4e00\u4e2a\u795e\u5947\u7684\u516c\u5f0f\uff0c^1\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c0^1=1,1^1=0; 2^1=3,3^1=2; 4^1=3,3^1=4......\u76f8\u4fe1\u5927\u5bb6\u5df2\u7ecf\u90fd\u53d1\u73b0\u4e86\u89c4\u5f8b\u3002\u800c\u5efa\u8fb9\u7684\u65f6\u5019\uff0c\u4e00\u6761\u65e0\u5411\u8fb9\u7684\u4e24\u6761\u6709\u5411\u8fb9\u521a\u597d\u76f8\u5dee1\uff0c\u8fd9\u4e0d\u5f88OK\u561b\uff1f\u95ee\u9898\u89e3\u51b3\u4e86\u3002\r\n\r\n\u4e0d\u8fc7\u8981\u6ce8\u610f\uff0c\u6211\u7684cnt\uff0c\u5c31\u662f\u8fb9\u7684\u521d\u59cb\u503c\uff0c\u8d4b\u503c\u4e3a1\uff0c\u8fd9\u662f\u7528\u6765\u51d1\u6570\u5b57\u7684\u3002\u6240\u4ee5\u8fb9\uff0c\u662f\u4ece\u7b2c2\uff0c3\u6761\uff1b\u7b2c4,5\u6761......\u8fd9\u6837\u4e0b\u53bb\u7684\uff08\u5bf9\u4e8e0,1\u6761\uff0c\u56e0\u4e3a\u81ea\u5df1\u4ee3\u7801\u4e60\u60ef\uff0c\u6211\u5c31\u76f4\u63a5\u4ece2\u5f00\u59cb\u4e86\uff0c0,1\u6761\u52a0\u8fdb\u53bb\u5e94\u8be5\u4e5f\u53ef\u4ee5\uff0c\u4f60\u60f3\u8bd5\u7684\u8bdd\u4e5f\u53ef\u4ee5\u8bd5\u8bd5\uff09\r\n\r\n\u5176\u4f59\u5730\u65b9\uff0c\u5c31\u548c\u6709\u5411\u56fe\u7684\u7f29\u70b9\u5b8c\u5168\u4e00\u6837\u4e86\u3002\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N=5e3+5,M=1e4+5;\r\nint n,m,vis[M<<1],du[N],ans;\r\nint cnt=1,head[N],u[M],v[M];\r\nint now,top,col,dfn[N],low[N],sta[N],color[N];\r\nstruct edge{int next,to;}e[M<<1];\r\n\r\ninline void add(int u,int v)\r\n{\r\n\tcnt++;\r\n\te[cnt].next=head[u];\r\n\te[cnt].to=v;\r\n\thead[u]=cnt;\r\n\tcnt++;\r\n\te[cnt].next=head[v];\r\n\te[cnt].to=u;\r\n\thead[v]=cnt;\r\n}\r\n\r\ninline void tarjan(int u)\r\n{\r\n\tdfn[u]=low[u]=++now;\t\r\n\tsta[++top]=u;\r\n\tfor (register int i=head[u]; i; i=e[i].next)\r\n\tif (!vis[i])\r\n\t{\r\n\tvis[i]=vis[i^1]=1;\r\n\t\tif (!dfn[e[i].to])\r\n\t\t{\r\n\t\t\ttarjan(e[i].to);\t\r\n\t\t\tlow[u]=min(low[u],low[e[i].to]);\r\n\t\t}\r\n\t\telse low[u]=min(low[u],dfn[e[i].to]);\r\n\t}\r\n\tif (low[u]==dfn[u])\r\n\t{\r\n\t\tcolor[u]=++col;\t\r\n\t\twhile (sta[top]!=u) color[sta[top]]=col,top--;\r\n\t\ttop--;\r\n\t}\r\n}\r\n\r\nint main(){\r\nmemset(head,0,sizeof(head));\r\nmemset(dfn,0,sizeof(head));\r\n//\u4e0b\u9762\u8fc7\u7a0b\u5982\u679c\u4e0d\u61c2\uff0c\u770b\u524d\u9762\u7684\u51e0\u7bc7\u9898\u89e3\u5427\r\n\tscanf(\"%d%d\",&n,&m);\r\n\tfor (register int i=1; i<=m; ++i) scanf(\"%d%d\",&u[i],&v[i]),add(u[i],v[i]);\r\n\tfor (register int i=1; i<=n; ++i) if (!dfn[i]) tarjan(i);\r\n\tfor (register int i=1; i<=m; ++i) if (color[u[i]]!=color[v[i]]) du[color[u[i]]]++,du[color[v[i]]]++;\r\n\tfor (register int i=1; i<=col; ++i) if (du[i]==1) ans++;\r\nprintf(\"%d\\n\",ans+1>>1);\r\nreturn 0;\t\r\n}\r\n```\r\n# \u4ee3\u7801\u53ef\u4ee5\u5f53\u4f5c\u6a21\u677f\u6536\u85cf\u3002\r\n",
        "postTime": 1554052186,
        "uid": 73436,
        "name": "\u8bf4\u597d\u4e0d\u54ed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2860 \u3010[USACO06JAN]\u5197\u4f59\u8def\u5f84Redundant Paths\u3011"
    },
    {
        "content": "\uff08\u5199\u9898\u89e3\u4e0d\u5bb9\u6613\uff0c\u6765[\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/lost-in-tianyi/)\u73a9\u73a9\u54afqwq~\uff09\n\n## \u8be5\u9898\u8003\u5bdf\u7684\u77e5\u8bc6\u70b9\u662f\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\n\n\t\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u5373\u4e00\u4e2a\u65e0\u5411\u56fe\u4e2d\uff0c\u53bb\u6389\u4e00\u6761\u8fb9\u540e\u4ecd\u4e92\u76f8\u8fde\u901a\u7684\u6781\u5927\u5b50\u56fe\u3002\uff08\u5355\u72ec\u7684\u4e00\u4e2a\u70b9\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\uff09\n\n\t\u6362\u8a00\u4e4b\uff0c\u4e00\u4e2a\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\u4e0d\u5305\u542b\u6865\u3002\n\n\u4f8b\u5982\u4e0b\u56fe\uff08\u6837\u4f8b\uff09\u4e2d\u7684\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u6709$(1)$\uff0c$(2,3,5,6)$\uff0c$(4)$\uff0c$(7)$\n\n![](https://i.loli.net/2019/04/07/5ca94d5387496.png)\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5728\u4e00\u4e2a\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u4efb\u610f\u4e24\u70b9\u90fd\u5b58\u5728\u81f3\u5c11\u4e24\u6761\u4e92\u76f8\u5206\u79bb\u7684\u8def\u5f84\uff1b\uff08\u5982$1->2$\u4e0e$1->3->2$\uff09\n\n\u5982\u82e5\u4e0d\u5728\u4e00\u4e2a\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u5219\u53ef\u80fd\u7ecf\u8fc7\u6865\uff08\u751a\u81f3\u4e0d\u8054\u901a\uff09\u5982\uff1a$2->4$\u3002\n\n\u7531\u4e8e\u6865\u662f\u5fc5\u987b\u901a\u8fc7\u7684\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u4e24\u6761\u4e92\u76f8\u5206\u79bb\u7684\u8def\u5f84\uff08\u6216\u6ca1\u6709\u8def\u5f84\uff09\u3002\u6211\u4eec\u8981\u505a\u7684\uff0c\u5c31\u662f\u8fde\u8fb9\u5c06\u6574\u5f20\u56fe\u53d8\u6210\u4e00\u5f20\u8fb9\u53cc\u8fde\u901a\u56fe\u3002\n\n## ~~\uff08\u6b63\u6587\u597d\u50cf\u624d\u5f00\u59cb\uff09~~\n\n\u9996\u5148\u662f\u627e\u51fa\u6240\u6709\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u4e0d\u5305\u542b\u6865\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u5c06\u6865\u65e0\u89c6\u6389\uff0c\u6bcf\u4e00\u4e2a\u8fde\u901a\u7684\u5b50\u56fe\u5c31\u662f\u4e00\u4e2a\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u3002\uff08\u6865\u7684\u516c\u5f0f\u5927\u5bb6\u90fd\u77e5\u9053\u5427\uff09\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nvoid tarjan(int u,int edge)\n{\t\n    dfn[u]=low[u]=++num;\n    for(int i=fst[u];i!=0;i=nex[i])\n    {\n        int v=to[i];\n        if(!dfn[v])\n        {\n            tarjan(v,i);\n            low[u]=min(low[u],low[v]);\n            if(dfn[u]<low[v])\t//\u6865\u7684\u516c\u5f0fqwq\n            {\n                bridg[i]=bridg[i^1]=1;\n            }\n        }\n        else if(i!=(edge^1))\n            low[u]=min(low[u],dfn[v]);\n    }\n}\n```\n\n\n\u56e0\u4e3a\u5728\u4e00\u4e2a\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u4efb\u610f\u4e24\u70b9\u90fd\u5b58\u5728\u81f3\u5c11\u4e24\u6761\u4e92\u76f8\u5206\u79bb\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u7f29\u4e3a\u4e00\u4e2a\u70b9\u3002\u7f29\u5b8c\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u8f6c\u6362\u6210\u4e00\u68f5\u641c\u7d22\u6811\u3002\n\n![](https://i.loli.net/2019/04/07/5ca94eb3be6d9.png)\n\n\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u53bb\u6389\u4e00\u6761\u8fb9\u540e\u53ef\u80fd\u4f1a\u4e0e\u539f\u6811\u4e0d\u8fde\u901a\u7684\uff0c\u662f\u53ea\u8fde\u6709\u4e00\u6761\u8fb9\u7684\u8fb9\uff0c\u5373\u53f6\u7ed3\u70b9\uff08\u8bbe\u5176\u6570\u91cf\u4e3aleaf\uff09\u3002\u4e3a\u4ee4\u539f\u56fe _\u8fb9\u53cc\u8fde\u901a_\uff08\u6211\u4e0d\u77e5\u9053\u8fd9\u4e48\u8bf4\u5bf9\u4e0d\u5bf9\uff09\uff0c\u6211\u4eec\u628a\u4e24\u4e2a\u53f6\u7ed3\u70b9\u4e3a\u4e00\u7ec4\u7528\u65b0\u8fb9\u5c06\u5176\u8fde\u63a5\u8d77\u6765\u3002\u8fd9\u4e48\u770b\uff0c\u7b54\u6848\u4f3c\u4e4e\u662f$leaf\\div2$\u4e86\u3002\n\n\u4e14\u6162\uff01\uff01\u8ba9\u6211\u4eec\u770b\u770b\u4e0a\u56fe\u3002\u4e0a\u56fe$leaf=3$\uff0c\u800c$leaf\\div2=1$\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u9700\u89812\u6761\u8fb9\u3002\u6240\u4ee5\u6700\u7ec8\u516c\u5f0f\u4e3a$(leaf+1)\\div2$\u3002\uff08\u7ec8\u4e8e\u5b8c\u4e86qwq\uff09\n\n\u6700\u540e\u634b\u4e00\u634b\u601d\u8def\uff1a\n\n- \u627e\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\n\n- \u7f29\u70b9\n\n- \u5efa\u6811\uff0c\u627e$leaf$\n\n- $ans=(leaf+1)\\div2$\n\n### \u5b8c\u7ed3\u6492\u82b1qwqwqwqwqwq\n\ncode\uff1a\n\n```cpp\n//Author:\u590f\u76ee\u8d35\u5fd7\n#include<bits/stdc++.h>\nusing namespace std;\nint qwwq,fst[10100],nex[10100],to[10100],a,b,cnt,num,cutn,bridg[10100],br,u[10100]; \nint dfn[10100],low[10100],ans,f[10100],root,pl,n,m,size,t,dcc,c[10100],du[10100];\nvoid add(int a,int b)\n{\n    nex[++t]=fst[a];\n    u[t]=a;\n    to[t]=b;\n    fst[a]=t;\n    return ;\n}\nvoid tarjan(int u,int edge)\n{\t\n    dfn[u]=low[u]=++num;\n    for(int i=fst[u];i!=0;i=nex[i])\n    {\n        int v=to[i];\n        if(!dfn[v])\n        {\n            tarjan(v,i);\n            low[u]=min(low[u],low[v]);\n            if(dfn[u]<low[v])\n            {\n                bridg[i]=bridg[i^1]=1;\n            }\n        }\n        else if(i!=(edge^1))\n            low[u]=min(low[u],dfn[v]);\n    }\n}\nvoid dfs(int u)\n{\n    c[u]=dcc;\n    for(int i=fst[u];i!=0;i=nex[i])\n    {\n        int v=to[i];\n        if(c[v]!=0||bridg[i]==1)\n        continue;\n        dfs(v); \n    } \n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    t=1;\n    for(int i=1;i<=m;i++)\n    {\n     \tscanf(\"%d%d\",&a,&b);\n     \tadd(a,b);add(b,a);\n    }\n    tarjan(1,0);\n    for(int i=1;i<=n;i++)\n    {\n        if(!c[i])\n        {\n            dcc++;\n            dfs(i);\n        } \n    }\n    for(int i=1;i<=m;i++)\n    {\n     \tif(c[u[i*2]]!=c[to[i*2]])\n     \t{\n     \t\tdu[c[u[i*2]]]++;\n     \t\tdu[c[to[i*2]]]++;\n     \t}\n    }\n    for(int i=1;i<=dcc;i++)\n    {\n    \tif(du[i]==1)\n    \tbr++;\n    }\n    cout<<(br+1)/2;\n\n    \n    \n    \n    return 0;\n}\n\n```\n",
        "postTime": 1554600559,
        "uid": 116368,
        "name": "BinDir0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2860 \u3010[USACO06JAN]\u5197\u4f59\u8def\u5f84Redundant Paths\u3011"
    },
    {
        "content": "\u6b64\u9898\u5c31\u662f\u5728\u56fe\u4e0a\u52a0\u4e0a\u6700\u5c11\u7684\u8fb9\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u8282\u70b9\u90fd\u5728\u73af\u4e0a\uff08\u53ef\u80fd\u662f\u4e0d\u540c\u7684\u73af\uff09\u3002\n\n\u6211\u4eec\u8003\u8651$Tarjan$\u7b97\u6cd5\u3002\u9996\u5148\u5c06\u6240\u6709\u8fb9-\u53cc\u8fde\u901a\u5206\u91cf\u7f29\u6210\u70b9\uff0c\u5c06\u6574\u4e2a\u56fe\u8f6c\u53d8\u4e3a\u4e00\u4e2a\u6811\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u56fe\u4e0a\u52a0\u6700\u5c0f\u7684\u8fb9\uff0c\u4f7f\u5f97\u6240\u6709\u7f29\u6210\u7684\u70b9\u90fd\u5728\u73af\u4e0a\u3002\n\n\u63cf\u8ff0\u4e00\u4e0b$Tarjan$\u7b97\u6cd5\u7684\u8fc7\u7a0b\u3002\u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u7684\u8fde\u901a\u5206\u91cf\uff0c\u5236\u5b9a\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u4ece\u8fd9\u4e2a\u8282\u70b9\u5f00\u59cb\u8fdb\u884c$DFS$\u904d\u5386\uff0c\u80fd\u5f62\u6210\u4e00\u4e2a$DFS$\u6811\u3002\u5728$DFS$\u7684\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e2a\u8bbf\u95ee\u987a\u5e8f\uff0c\u5b9a\u4e49\u4e3a$dfn_i$\uff0c\u5373\u8be5\u8282\u70b9\u7684\u65f6\u95f4\u6233\u3002\u5b9a\u4e49\u4e00\u4e2a$low_i$\uff0c\u5b9a\u4e49\u4e3a**\u8be5\u8282\u70b9\u4e0d\u7ecf\u8fc7\u5176\u5230$DFS$\u6811\u4e0a\u7236\u4eb2\u8282\u70b9\u7684\u8fb9\uff0c\u4e2d\u95f4\u53ea\u80fd\u7ecf\u8fc7\u5176\u5728$DFS$\u6811\u4e0a\u7684\u5b50\u5b59\u8282\u70b9\uff0c\u6700\u540e\u80fd\u591f\u5230\u8fbe\u7684\u6700\u5c0f\u65f6\u95f4\u6233**\uff08\u662f\u4e0d\u662f\u5f88\u957f\uff09\u3002\n\n\u6709\u4e86$Tarjan$\u7b97\u6cd5\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u904d\u5386\u4e00\u68f5\u6811\u7684\u65f6\u95f4\u590d\u6742\u5ea6$O(N)$\u4e2d\uff0c\u5904\u7406\u6bcf\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9$i$\u7684$dfn_i=low_i$\uff0c\u90a3\u4e48\u5b83\u7684$DFS$\u6811\u4e0a\u7684\u5b69\u5b50\u90fd\u201c\u5f88\u4e0d\u4e89\u6c14\u201d\uff0c\u5230\u4e0d\u4e86\u6bd4\u5f53\u524d\u8282\u70b9\u65f6\u95f4\u6233\u66f4\u65e9\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u8282\u70b9$i$\u5c5e\u4e8e\u4e00\u4e2a\u65b0\u7684\u53cc\u8fde\u901a\u5206\u91cf\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u7ed3\u6784\u2014\u2014\u6808\uff0c\u53bb\u5224\u65ad\u6bcf\u4e2a\u8282\u70b9\u5f52\u5c5e\u7684\u53cc\u8054\u901a\u5206\u91cf\u3002\u5728$DFS$\u5f00\u59cb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u8be5\u8282\u70b9\u7684\u7f16\u53f7\u538b\u5165\u4e00\u4e2a\u6808\uff0c\u5728$DFS$\u5411\u5176\u4ed6\u8282\u70b9\u7684\u904d\u5386\u7ed3\u675f\u65f6\uff0c\u5982\u679c\u6ee1\u8db3\u65b0\u7684\u8fb9-\u53cc\u8fde\u901a\u5206\u91cf\u7684\u6761\u4ef6\uff0c\u4e0d\u505c\u5730\u5c06\u6808\u9876\u7684\u5143\u7d20\u5f39\u51fa\uff0c\u77e5\u9053\u5f39\u51fa\u7684\u5143\u7d20\u662f\u5f53\u524d\u5143\u7d20\uff0c\u7ec8\u6b62\u64cd\u4f5c\u3002\u8fd9\u6837\u6240\u6709\u5f39\u51fa\u7684\u70b9\u90fd\u5f52\u5c5e\u4e8e\u4e00\u4e2a\u8fb9-\u53cc\u8054\u901a\u5206\u91cf\u3002\n\n\u5c06\u6bcf\u4e2a\u8282\u70b9\u6240\u5f52\u5c5e\u7684\u8fb9-\u53cc\u8fde\u901a\u5206\u91cf\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5f52\u5c5e\u4e8e\u4e00\u4e2a\u8fb9-\u53cc\u8fde\u901a\u5206\u91cf\u7f29\u6210\u65b0\u56fe\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u6837\u6240\u5f62\u6210\u7684\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u5c31\u662f\u4e00\u68f5\u6811\u3002\u7136\u540e\u6211\u4eec\u9700\u8981\u8bc1\u660e\u4e00\u4e2a\u5b9a\u7406\uff1a**\u8fd9\u4e2a\u8fde\u901a\u5206\u91cf\u4e0a\u7684\u5e7f\u4e49\u53f6\u5b50\u8282\u70b9\uff08\u5ea6\u6570\u4e3a$1$\uff09\u9664\u4ee5$2$\u5411\u4e0a\u53d6\u6574\u5373\u4e3a\u6240\u9700\u8981\u52a0\u7684\u8fb9\u6570**\u3002\n\n\u524d\u9762\u76f8\u4fe1\u6709\u5f88\u591a\u5927\u4f6c\u7ed9\u51fa\u4e86\u8bc1\u660e\uff0c\u8fd9\u91cc\u6982\u8ff0\u5982\u4e0b\uff1a\u9898\u76ee\u8981\u6c42\u7684\u662f\u6240\u6709\u70b9\u81f3\u5c11\u5ea6\u6570\u4e3a$2$\uff0c\u5ea6\u6570\u4e3a$1$\u7684\u70b9\u5e94\u8be5\u81f3\u5c11\u8fde\u4e00\u6761\u8fb9\uff0c\u6700\u597d\u7684\u65b9\u6cd5\u5f53\u7136\u662f\u4e00\u6b21\u6027\u8fde\u4e24\u4e2a\u5ea6\u6570\u4e3a$1$\u7684\u70b9\uff0c\u5982\u679c\u6700\u540e\u6ca1\u6709\u5339\u914d\uff08\u4e2a\u6570\u4e3a\u5947\u6570\uff09\uff0c\u4ecd\u7136\u8981\u8fde\u8fb9\uff0c\u6240\u4ee5\u5f97\u51fa\u7ed3\u8bba\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<stack>\nusing namespace std;\nconst int maxn=5010;\nconst int maxm=20010;\nint n,m,u[maxn],v[maxn],x,y,cur,h[maxn],nxt[maxm],p[maxm],index_,dfn[maxn],low[maxn],bcc[maxn],deg[maxn],ans,ltt;\nbool tf[maxm];\nstack<int>st;\ninline void add_edge(int x,int y)\n{\n    cur++;\n    nxt[cur]=h[x];\n    h[x]=cur;\n    p[cur]=y;\n}\nvoid dfs(int cur)\n{\n    dfn[cur]=low[cur]=++index_;\n    for(int j=h[cur];j!=-1;j=nxt[j])if(tf[j])\n    {\n        int i=p[j];\n        if(dfn[i])low[cur]=min(low[cur],dfn[i]);\n        else\n        {\n            st.push(i);\n            tf[j]=tf[(j&1)?j+1:j-1]=false;\n            dfs(i);\n            tf[j]=tf[(j&1)?j+1:j-1]=true;\n            low[cur]=min(low[cur],low[i]);\n        }\n    }\n    if(dfn[cur]==low[cur])\n    {\n        ans++;\n        while(!st.empty())\n        {\n            bcc[st.top()]=ans;\n            if(st.top()==cur){st.pop();break;} \n            st.pop();\n        }\n    } \n}\nint main()\n{\n    memset(h,-1,sizeof h);\n    memset(tf,true,sizeof tf);\n    scanf(\"%d%d\",&n,&m);\n    for(int i=0;i<m;i++)scanf(\"%d%d\",u+i,v+i),add_edge(u[i],v[i]),add_edge(v[i],u[i]);\n    for(int i=1;i<=n;i++)if(!dfn[i])ans=0,st.push(i),dfs(i);\n    for(int i=0;i<m;i++)if(bcc[u[i]]!=bcc[v[i]])deg[bcc[u[i]]]++,deg[bcc[v[i]]]++;\n    for(int i=1;i<=n;i++)if(deg[i]==1)ltt++;\n    printf(\"%d\\n\",(ltt+1)/2);\n    return 0;\n}\n```",
        "postTime": 1522157729,
        "uid": 43486,
        "name": "hsfzLZH1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2860 \u3010[USACO06JAN]\u5197\u4f59\u8def\u5f84Redundant Paths\u3011"
    },
    {
        "content": "Update 2020/11/22\uff1a\u4fee\u590d\u4e86\u4e00\u4e2a\u5c0f\u9519\u8bef\u3002   \n\nUpdate 2021/09/30\uff1a\u4fee\u590d\u4e86\u4e00\u4e2a\u5927\u9519\u8bef\uff0c\u66f4\u65b0\u4e86\u66f4\u4e25\u8c28\u7684\u8bc1\u660e\u3002\n\n\n\n**\u6ce8\u610f\uff1a\u672c\u9898\u89e3\u4e3b\u8981\u8be6\u7ec6\u8bb2\u89e3\u4e3a\u4ec0\u4e48\u7b54\u6848\u662f $\\lfloor\\dfrac{s+1}{2}\\rfloor$($s$ \u4e3a\u53f6\u5b50\u8282\u70b9\u6570)** \n\n\n\u9996\u5148\u6211\u4eec\u8981\u660e\u767d\uff1a  **\u8fdb\u884c e-DCC \u7f29\u70b9\u4e4b\u540e\uff0c\u6700\u7ec8\u5f62\u6210\u7684\u56fe\u662f\u4e00\u68f5\u6811\u3002**\n\n\u56e0\u4e3a\uff1a  \u5047\u8bbe\u7f29\u70b9\u4e4b\u540e\u7684\u56fe\u4e0d\u662f\u6811\uff0c\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u73af\uff0c\u56e0\u6b64\u8fd9\u4e2a\u73af\u8fd8\u53ef\u4ee5\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4ea7\u751f\u4e86\u77db\u76fe\u3002\n\n\u63a5\u4e0b\u6765\u8bb2\u89e3\u4e3a\u4ec0\u4e48\u662f $\\lfloor\\dfrac{s+1}{2}\\rfloor$\uff1a  \n\n\u8fd9\u4e2a\u516c\u5f0f\u5b9e\u9645\u4e0a\u662f**\u5bf9 $s$ \u5947\u5076\u6027\u7684\u8ba8\u8bba\u5f97\u51fa\u6765\u7684\u901a\u5f0f**\u3002  \n\n\u5148\u770b $s$ \u4e3a\u5076\u6570\u7684\u60c5\u51b5\u3002  \n\n\u4e0d\u59a8\u4ece\u57fa\u73af\u6811\u4e0b\u624b\uff0c\u8003\u8651\u5148\u8fde\u4e24\u4e2a\u53f6\u5b50\u8282\u70b9\u3002\n\n\n\n## Step 1\n\n\u90a3\u4e48\u8ba9\u6211\u4eec\u5148\u8bc1\u660e\u4e00\u4e2a\u7ed3\u8bba\uff1a**\u5b58\u5728\u53f6\u5b50\u8282\u70b9 $x,y$\uff0c\u8fde\u63a5 $(x,y)$ \u540e\u6784\u6210\u7684\u57fa\u73af\u6811\u6709\u5076\u6570\u4e2a\u652f\u94fe**\u3002\n\n\u6240\u8c13\u652f\u94fe\uff0c\u5c31\u662f\u57fa\u73af\u6811\u73af\u4e0a\u7684\u70b9\u5411\u5916\u8fde\u8fb9\u7684\u4e2a\u6570\u3002\n\n**\u8bc1\u660e\u8fc7\u7a0b\uff08\u53cd\u8bc1\u6cd5\uff09**\uff1a\n\n\u5047\u8bbe\u6240\u6709\u8fde\u8fb9\u65b9\u6848\u4e2d\uff0c\u57fa\u73af\u6811\u90fd\u6709\u5947\u6570\u4e2a\u652f\u94fe\u3002\u90a3\u4e48\u5bf9\u4e8e\u753b\u51fa\u8fd9\u6837\u7684\u56fe\uff1a  \n\n![\u56fe\u7247.png](https://i.loli.net/2021/09/30/el6kqmYdtJNbFpi.png)\n\n\uff08\u90a3\u4e9b\u6b6a\u6b6a\u66f2\u66f2\u7684\u4ee3\u8868\u5176\u4ed6\u652f\u94fe\uff09\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u65ad\u5f00 $(x,y)$\uff0c\u5c06 $y$\uff08$x$ \u4e5f\u884c\uff0c\u8fd9\u91cc\u53d6\u4e00\u4e2a\u6765\u8bc1\u660e\uff09\u4e0e\u4e00\u4e2a\u652f\u94fe\u7684\u672b\u7aef\u53f6\u8282\u70b9\u76f8\u8fde\u3002\n\n![\u56fe\u7247.png](https://i.loli.net/2021/09/30/H6xgadcykj32bzQ.png)\n\n\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0 $y$ \u5904\u4e8e\u4e00\u4e2a\u65b0\u7684\u73af\u4e2d\uff08\u4e0b\u56fe\u9752\u8272\uff09\u3002\n\n![\u56fe\u7247.png](https://i.loli.net/2021/09/30/W6mkgOZRISHPcfj.png)\n\n\u6839\u636e\u5047\u8bbe\uff0c\u8fd9\u4e2a\u73af\u5e94\u8be5\u62e5\u6709\u5947\u6570\u4e2a\u652f\u94fe\u3002\n\n$x$\uff08\u6216\u8005\u8bf4 $lca$\uff09\u6240\u5728\u7684\u8fd9\u6761\u94fe\u4e0a\u4e3a\u73af\u8d21\u732e\u4e00\u4e2a\u652f\u94fe\uff0c\u90a3\u4e48\u6839\u636e\u5047\u8bbe\uff0c\u8fd9\u4e2a\u73af\u4e0a\u7684\u5176\u4ed6\u5730\u65b9\uff0c\u4e5f\u5c31\u662f\u539f\u56fe\u4e2d\u7684\u90a3\u4e00\u6761\u652f\u94fe\u4e0a\uff0c\u5fc5\u987b\u62e5\u6709\u5076\u6570\u4e2a\u652f\u94fe\u3002\n\n\u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u5f00\u59cb\u5047\u8bbe\u65f6\uff0c\u662f\u5bf9\u4efb\u610f\u56fe\u7684\uff0c\u6240\u4ee5\u4e0d\u4e00\u5b9a\u5728\u8fd9\u6761\u94fe\u4e0a\u6709\u5076\u6570\u4e2a\u652f\u94fe\uff0c\u4ea7\u751f\u77db\u76fe\uff0c\u5047\u8bbe\u4e0d\u6210\u7acb\u3002\n\n\u6240\u4ee5\uff0c**\u5b58\u5728\u53f6\u5b50\u8282\u70b9 $x,y$\uff0c\u8fde\u63a5 $(x,y)$ \u540e\u6784\u6210\u7684\u57fa\u73af\u6811\u6709\u5076\u6570\u4e2a\u652f\u94fe**\u3002\n\n\n\n## Step 2\n\n\u6211\u4eec\u5c06\u5bf9\u8fd9\u4e2a\u62e5\u6709\u5076\u6570\u6761\u652f\u94fe\u7684\u57fa\u73af\u6811\u505a\u4e00\u4e9b\u5904\u7406\u3002\n\n\u4ee5\u4e0b\u9762\u8fd9\u4e2a\u56fe\u4e3a\u4f8b\uff1a\n\n![\u56fe\u7247.png](https://i.loli.net/2021/09/30/K8hX67baQJORgB5.png)\n\n\u6211\u4eec\u5c06\u4e0d\u540c\u652f\u94fe\u4e0a\u7684\u53f6\u5b50\u8282\u70b9\u4e24\u4e24\u914d\u5bf9\uff0c\u76f4\u5230\u65e0\u6cd5\u914d\u5bf9\u4e3a\u6b62\u3002\n\n![\u56fe\u7247.png](https://i.loli.net/2021/09/30/adntC32XqIxY5yf.png)\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e0a\u9762\u6bcf\u4e24\u4e2a\u70b9\u90fd\u6709\u81f3\u5c11\u4e24\u6761\u5206\u79bb\u8def\u5f84\u3002\n\n\u4f46\u662f\u8fd9\u662f\u8fd0\u6c14\u597d\u7684\u60c5\u51b5\uff0c\u5047\u5982\u8fd0\u6c14\u4e0d\u597d\uff0c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\u5462\uff1a\n\n![\u56fe\u7247.png](https://i.loli.net/2021/09/30/a9tuny3gTrjOB1X.png)\n\n$(9,10)$ \u548c $(12,14)$ \u8fde\u4e86\u4e4b\u540e\uff0c\u662f\u65e0\u6cd5\u6ee1\u8db3\u6761\u4ef6\u7684\u3002\n\n\u75c7\u7ed3\u5c31\u5728\u4e8e\u5b83\u4eec\u7684 $lca$ \u4e0d\u5728\u73af\u4e0a\uff0c\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5**\u662f\u7edd\u5bf9\u4e0d\u53ef\u4ee5\u51fa\u73b0\u7684**\uff01\n\n\u4f46\u662f\u8fd0\u6c14\u5f88\u5dee\uff0c\u8fd9\u79cd\u60c5\u51b5\u5c31\u662f\u51fa\u73b0\u4e86\u3002\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u8bc1\u660e\u7684\u5c31\u662f\uff0c**\u8fd9\u79cd\u60c5\u51b5\u662f\u53ef\u4ee5\u6539\u53d8\u6210\u4e00\u4e2a\u5408\u6cd5\u7684\u89e3\u7684**\u3002\n\n\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff1a\n\n![\u56fe\u7247.png](https://i.loli.net/2021/09/30/MXfV6qkw9APOiev.png)\n\n\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u7701\u53bb\u4e86\u6240\u6709\u5df2\u7ecf\u914d\u5bf9\u7684\u94fe\uff0c\u7b80\u5316\u4e3a\u4e00\u4e2a\u73af\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u8fd9\u4e9b\u9057\u7559\u4e0b\u6765\u7684\u53f6\u5b50\u8282\u70b9\u4e00\u5171\u6709\u5076\u6570\u4e2a\uff08\u56e0\u4e3a\u672c\u6765\u6709\u5076\u6570\u4e2a\uff0c\u4e24\u4e24\u914d\u5bf9\uff0c\u4e0d\u80fd\u914d\u5bf9\u5230\u6700\u540e\u80af\u5b9a\u5269\u5076\u6570\u4e2a\uff09\u3002\n\n\u5e76\u4e14\u8fd9\u4e2a\u73af\u4e0a\u9762\u4e00\u5b9a\u6709\u4e24\u4e2a\u53f6\u5b50\u8282\u70b9\uff08\u6bd5\u7adf\u73af\u5c31\u662f\u8fd9\u6837\u6784\u9020\u51fa\u6765\u7684\uff09\uff0c\u6211\u4eec\u59d1\u4e14\u8bbe\u4e3a $3,4$\u3002\n\n\u65ad\u5f00 $(3,4)$\uff0c\u8fde\u63a5 $(3,8),(4,9)$\uff0c\u5f97\u5230\uff1a\n\n![\u56fe\u7247.png](https://i.loli.net/2021/09/30/qw8fWVSlvHUR35O.png)\n\n\u8fd9\u65f6\u5019\u8fde\u63a5 $(6,7)$\uff0c\u5c31\u6ee1\u8db3\u6761\u4ef6\u4e86\uff1a\n\n![\u56fe\u7247.png](https://i.loli.net/2021/09/30/JvtTn4e68uBKOLU.png)\n\n\u53ef\u4ee5\u89c1\u5f97\uff0c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec**\u65ad\u5f00\u73af\u4e0a\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u5c06\u5176\u4e0e\u4e24\u4e2a\u672a\u914d\u5bf9\u7684\u53f6\u5b50\u8282\u70b9\u76f8\u8fde\uff0c\u6784\u6210\u4e00\u4e2a\u65b0\u7684\u5927\u73af**\u3002\n\n\u6b64\u65f6\u5269\u4f59\u7684\u53f6\u5b50\u8282\u70b9\u7684 $lca$ \u5c31\u5728\u73af\u4e0a\u4e86\u3002\n\n\u5f53\u7136\u8fd9\u662f\u4e00\u79cd\u60c5\u51b5\uff0c\u8fd8\u6709\u5176\u4ed6\u60c5\u51b5\uff0c\u6bd4\u5982\uff1a\n\n![\u56fe\u7247.png](https://i.loli.net/2021/09/30/eN8QrDjGCo3vmZU.png)\n\n\u8bc1\u660e\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u8fd9\u6837\uff0c\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u90fd\u53ea\u4e0e\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u76f8\u8fde\uff0c\u6240\u4ee5\u603b\u5171 $\\dfrac{s}{2}$ \u4e2a\u65b0\u589e\u7684\u8fb9\u3002\n\n\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\uff0c\u5947\u6570\u5c31\u597d\u529e\u4e86\uff0c\u53ea\u8981\u65b0\u589e\u7684\u8fd9\u4e2a\u8282\u70b9\u4e0e\u5df2\u7ecf\u6210\u4f53\u7cfb\u7684\u201c\u5927\u73af\u201d\u4e0a\u4e00\u70b9\u76f8\u8fde\uff0c\u5c31\u6ee1\u8db3\u6761\u4ef6\u3002\n\n\u56e0\u6b64\u5947\u6570\u65f6\u7b54\u6848\u4e3a $\\dfrac{s+1}{2}$\u3002  \n\n\n\n\u7efc\u5408\u4e24\u8005\uff0c\u5f97\u51fa\u7b54\u6848\u4e3a $\\lfloor\\dfrac{s+1}{2}\\rfloor$\u3002\u5b8c\u7ed3\u6492\u82b1\uff01\n\n\n\n~~\u8fd9\u4f30\u8ba1\u662f\u8fd9\u4e2a\u9898\u7b2c\u4e00\u7bc7\u5b8c\u6574\u8bc1\u660e\u4e86\u8fd9\u4e2a\u7ed3\u8bba\u7684\u9898\u89e3\u5427~~\n\n",
        "postTime": 1603356071,
        "uid": 223392,
        "name": "Belarus",
        "ccfLevel": 4,
        "title": "P2860 [USACO06JAN]Redundant Paths G \u9898\u89e3"
    },
    {
        "content": "## \u89e3\u9898\u601d\u8def\n\n\u5206\u6790\u9898\u76ee\u8fd9\u4e00\u53e5\uff1a\u4e24\u6761\u8def\u5f84\u76f8\u4e92\u5206\u79bb\uff0c\u662f\u6307\u4e24\u6761\u8def\u5f84\u6ca1\u6709\u4e00\u6761\u91cd\u5408\u7684\u9053\u8def\u3002\u8054\u60f3\u5230\u65e0\u5411\u56fe\u4e2d\u6865\u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u5f97\u5230\u7ed3\u8bba\uff1a\u53ea\u8981\u8fd9\u4e2a\u56fe\u4e2d\u4e0d\u5b58\u5728\u6865\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5b58\u5728\u4e24\u6761\u76f8\u4e92\u5206\u79bb\u7684\u8def\u5f84\u3002\u56e0\u6b64\u8fd9\u4e2a\u9898\u76ee\u53ef\u4ee5\u7406\u89e3\u4e3a\u6c42\u628a\u7ed9\u5b9a\u65e0\u5411\u56fe\u8f6c\u6362\u6210\u4e0d\u542b\u6865\u7684\u65e0\u5411\u56fe\u6240\u9700\u8fde\u8fb9\u7684\u6700\u5c11\u6570\u91cf\u3002\n\n\n\u8fd9\u91cc\u7684\u6700\u5c11\u6570\u91cf\u5982\u4f55\u6c42\u89e3\uff1f\u5b9e\u9645\u4e0a\u7b49\u5230\u6211\u4eec\u628a\u539f\u56fe\u4e2d\u6240\u6709\u7684\u6865\u627e\u51fa\u6765\u4ee5\u540e\uff0c\u5bf9\u4e0d\u542b\u6865\u7684\u8fde\u901a\u5757\u7f29\u70b9\uff0c\u4f1a\u53d1\u73b0\u6700\u540e\u5269\u4e0b\u7684\u56fe\u662f\u4e00\u4e2a\u6811\u3002\u6dfb\u52a0\u6700\u5c11\u7684\u8fb9\u4f7f\u8fd9\u68f5\u6811\u4e0a\u6240\u6709\u7684\u94fe\u90fd\u53d8\u6210\u73af\uff0c\u5219\u662f\u672c\u9898\u7684\u7b54\u6848\u3002\u8fd9\u4e2a\u7b54\u6848\u53ef\u4ee5\u7531\u8fd9\u68f5\u6811\u53f6\u5b50\u8282\u70b9\u6570/2\u5411\u4e0a\u53d6\u6574\u5f97\u51fa\u3002\uff08\u8d2a\u5fc3\uff0c\u6bd4\u8f83\u663e\u7136\uff09\n\n\n\u4ee5\u9898\u76ee\u6837\u4f8b\u4e3a\u4f8b\uff1a\n\n\n\uff081\uff09\u628a\u8fd9\u4e2a\u56fe\u4e2d\u7684\u6865\u627e\u51fa\u6765\uff0c\u4e0b\u56fe\u4e2d\uff0c\u7eff\u8272\u6846\u4e2d\u7684\u5373\u4e3a\u4e0d\u542b\u6865\u7684\u8fde\u901a\u5757\uff0c\u51714\u4e2a\uff0c\u6846\u4e0e\u6846\u4e4b\u95f4\u7684\u8fb9\u5c31\u662f\u6865\u3002\n\n\n\n ![](https://cdn.luogu.com.cn/upload/pic/8546.png) \n\n\uff082\uff09\u7f29\u70b9\u3002\n\n\n\n ![](https://cdn.luogu.com.cn/upload/pic/8547.png) \n\n\uff083\uff09\u7f29\u5b8c\u70b9\u539f\u56fe\u53d8\u6210\u6811\uff0c\u5982\u56fe\u662f\u4e00\u7ec4\u6700\u4f18\u89e3\u3002\u89e3\u4e0d\u552f\u4e00\uff0c\u4f46\u662f\u5efa\u8fb9\u7684\u6570\u91cf\u56fa\u5b9a\u3002\n\n\n\n ![](https://cdn.luogu.com.cn/upload/pic/8548.png) \n\n\u5b9e\u73b0\u4e0a\uff0cTarjan\u627e\u4e00\u4e0b\u6865\uff0c\u628a\u6865\u65ad\u6389\u540e\u627e\u8fde\u901a\u5757\u5e76\u4e14\u7f29\u70b9\uff0c\u6574\u7406\u51fa\u65b0\u7684\u56fe\uff0c\u5bf9\u56fe\u4e2d\u7ed3\u70b9\u7edf\u8ba1\u5ea6\u6570\uff0c\u5ea6\u6570\u4e3a1\u7684\u5c31\u662f\u53f6\u5b50\u8282\u70b9\u3002\u8ba1\u6570\u53f6\u5b50\u8282\u70b9\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e86\u3002\n\n\n\n## \u7a0b\u5e8f\n\n\n```cpp\n// Code by KSkun, 2017/10 \n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\nstruct Edge {\n    int to, nxt;\n    bool vis;\n    \n    Edge() {}\n    Edge(int t, int n):to(t), nxt(n) {}\n} gra[20005];\nint ecnt = 0, head[5005];\n\nbool gra1[5005][5005];\n\nvoid conn(int u, int v) {\n    gra[ecnt] = Edge(v, head[u]);\n    head[u] = ecnt;\n    gra[ecnt + 1] = Edge(u, head[v]);\n    head[v] = ecnt + 1;\n    gra[ecnt].vis = gra[ecnt + 1].vis = false;\n    ecnt += 2;\n}\n\nint f, r;\n\nint dfn[5005], low[5005], par[5005], step = 1;\n\n// Tarjan\u627e\u6865 \nvoid dfs(int u) {\n    dfn[u] = low[u] = step++;\n    int e = head[u];\n    while(e != -1) {\n        if(gra[e].vis) {\n            e = gra[e].nxt;\n            continue;\n        }\n        gra[e].vis = gra[e ^ 1].vis = true;\n        if(dfn[gra[e].to] == 0) {\n            par[gra[e].to] = e;\n            dfs(gra[e].to);\n            low[u] = min(low[gra[e].to], low[u]);\n        } else {\n            low[u] = min(dfn[gra[e].to], low[u]);\n        }\n        e = gra[e].nxt;\n    }\n}\n\nint lable[5005];\n\nvoid sd(int u, int num) {\n    lable[u] = num;\n    int e = head[u];\n    while(e != -1) {\n        if(gra[e].vis && lable[gra[e].to] == 0) {\n            sd(gra[e].to, num);\n        }\n        e = gra[e].nxt;\n    }\n}\n\nint du[5005];\n\nint main() {\n    memset(head, -1, sizeof head);\n    scanf(\"%d%d\", &f, &r);\n    int a, b;\n    // \u94fe\u5f0f\u524d\u5411\u661f\uff0c\u5efa\u56fe \n    for(int i = 0; i < r; i++) {\n        scanf(\"%d%d\", &a, &b);\n        conn(a, b);\n    }\n    dfs(1);\n    // \u8fd9\u91cc\u628a\u6865\u65ad\u6389 \n    for(int i = 1; i <= f; i++) {\n        int opp = par[i] ^ 1;\n        int oppp = gra[opp].to;\n        // \u8fd9\u91cc\u662f\u6838\u5fc3\uff0c\u6865\u7684\u4e00\u4e2a\u6027\u8d28\u5c31\u662f\u6865\u7684\u4e24\u4e2a\u7aef\u70b9\u4e2d\uff0c\u4e00\u4e2a\u7aef\u70b9\u7684low\u5927\u4e8e\u53e6\u4e00\u4e2a\u7aef\u70b9\u7684dfn\n        // \u8fd9\u662f\u56e0\u4e3a\u6865\u7684\u4e24\u7aef\u5206\u522b\u662f\u4e24\u4e2a\u8fde\u901a\u5757\uff08\u73af\uff09\uff0c\u524d\u9762\u4e00\u4e2a\u6865\u4e0a\u7684\u70b9DFS\u5e8f\u80af\u5b9a\u8981\u6bd4\u6865\u53e6\u4e00\u7aef\u7684\u6240\u6709\u70b9DFS\u5e8f\u5927 \n        if(low[i] > dfn[oppp]) {\n            gra[par[i]].vis = false;\n            gra[opp].vis = false;\n        }\n    }\n    // \u7f29\u70b9 \n    int num = 1;\n    for(int i = 1; i <= f; i++) {\n        if(lable[i] == 0) {\n            sd(i, num++);\n        }\n    }\n    // \u628a\u7f29\u5b8c\u70b9\u7684\u56fe\u6574\u7406\u51fa\u6765\uff0c\u7528\u77e9\u9635\u5b58\u4e86\u4e00\u4e0b \n    for(int i = 1; i <= f; i++) {\n        int e = head[i];\n        while(e != -1) {\n            gra1[lable[gra[e].to]][lable[i]] = gra1[lable[i]][lable[gra[e].to]] = true;\n            e = gra[e].nxt;\n        }\n    } \n    // \u7edf\u8ba1\u7ed3\u70b9\u5ea6\u6570 \n    for(int i = 1; i < num; i++) {\n        for(int j = 1; j < num; j++) {\n            if(i != j && gra1[i][j]) du[i]++;\n        }\n    }\n    // \u7edf\u8ba1\u53f6\u5b50\u8282\u70b9\u6570\u91cf \n    int ans = 0;\n    for(int i = 1; i < num; i++) {\n        if(du[i] == 1) ans++;\n    } \n    printf(\"%d\", (int) ceil(ans / double(2)));\n    return 0;\n}\n```",
        "postTime": 1507134639,
        "uid": 35795,
        "name": "KSkun",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2860 \u3010[USACO06JAN]\u5197\u4f59\u8def\u5f84Redundant Paths\u3011"
    },
    {
        "content": "<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\n  \u672c\u9898\u76ee\u7684\uff1a \n  \u4f7f\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u81f3\u5c11\u6709\u4e24\u6761\u76f8\u4e92\u5206\u79bb\uff08\u5373\u4e0d\u540c\u7684\uff09\u7684\u8def\u5f84\u3002\n\n\n<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\n### \u601d\u8def\uff1a\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u4e00\u4e2a\u73af\u4e2d\uff0c\u4eceA\u5230B\u90fd\u81f3\u5c11\u67092\u6761\u8def\u5f84\uff0c\u56e0\u6b64\u5148\u89e3\u51b3\u73af\n\t\n<font face=\"\u5fae\u8f6f\u96c5\u9ed1\">\n\t\u6817\u5b50\u5982\u4e0b\uff1a\n    \n![](http://a2.qpic.cn/psb?/V141COev2OWXS3/oFBdk8AqgVC2gNGOpNtJyvf02uAqulLHK4BjswZwm.s!/c/dGEBAAAAAAAA&ek=1&kp=1&pt=0&bo=0QGKAdEBigEBACc!&vuin=2602723959&tm=1519668000&sce=60-2-2&rf=0-0)\n\n\n#### \u56e0\u6b64\uff0c\u5148\u65e0\u5411\u56fe\u627e\u5230\u5404\u4e2a\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u6216\u8005\u8bf4\u662f\u6865\uff08\u4e0d\u4e25\u8c28\u5730\u8bf4\uff0c\u627e\u73af\uff09\n\n### \u601d\u8003\u5982\u4f55\u8fde\u5269\u4e0b\u7684\u8fb9\u4f7f\u5f97\u5168\u56fe\u6210\u4e3a\u4e00\u4e2a\u73af\uff0c\u8fb9\u6570\u6700\u5c11\n\n#### \u65b9\u6cd5\uff1a\u627e\u5230\u540e\u6570\u6570\u6709\u591a\u5c11\u4e2a\u70b9\u53ea\u8fde\u6709\u4e00\u6761\u8fb9\n\n#### \u624b\u52a8\u6a21\u62df\u4e00\u4e0b\u53d1\u73b0\uff0c\u4efb\u610f\u4e00\u5f20\u56fe\u90fd\u53ef\u4ee5\u8f6c\u6362->\u53f6\u5b50\u7ed3\u70b9\u76f8\u4e92\u8fde\u8fb9\n\n#### \uff08\u56e0\u6709\u9898\u89e3\u8d34\u4e0a\u56fe\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8d34\u4e86\uff0c\u6709\u95ee\u9898\u53ef\u4ee5\u53d1\u79c1\u4fe1\u7ed9\u6211\uff09\n\n#### \u53d1\u73b0\u6700\u5c11\u8fde\u8fb9\u4e3a\uff08\u53ea\u8fde\u6709\u4e00\u6761\u8fb9\u7684\u70b9\u6570+1\uff09\u00f72\n\n------------\n\n\n#### \u6574\u4f53\u4ee3\u7801\u6765\u4e00\u6ce2\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <iostream>\n#define N 100600\n#define M 500000\nusing namespace std;\nstruct node{int u,v,nxt;}e[M];\n\nint n,m,K,hed[N],dfn[N],lows[N],Cnt,E[N],dcc;\n//\tn->\u70b9\u6570\tm->\u8fb9\u6570\tK->\u52a0\u8fb9\u64cd\u4f5c\u4e2d\u8fb9\u53f7\thed[i]->\u524d\u5411\u661f\n//\tCnt:55\u884c\t\n//\tE[i]:\u70b9i\u6240\u5728\u7684\u8fb9\u53cc\u8054\u901a\u5206\u91cf\u7684\u7f16\u53f7\tdcc:\u8ba1\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u53f7\n\nbool bri[M];\nvoid ad (int u,int v){\n    e[++K].u=u;e[K].v=v;e[K].nxt=hed[u];hed[u]=K;\n}\t//\u52a0\u8fb9\u64cd\u4f5c\n\n\nvoid dfs (int x,int fa){\n    dfn[x]=lows[x]=++Cnt;\n    for (int i=hed[x];i;i=e[i].nxt){\n        int v=e[i].v;\n        if (!dfn[v]){\n            dfs (v,x);\n            lows[x]=min(lows[x],lows[v]);\n            if (lows[v]>dfn[x])\t{\n                bri[i]=true;i%2==0?bri[i-1]=true:bri[i+1]=true;\t//\u53cc\u5411\u8fb9\uff0c\u5f88\u91cd\u8981\n           //\u5f53\u7136\u53ef\u4ee5\u4e0d\u8fd9\u6837\u5b58\uff0c\u4e0d\u8fc7\u4e60\u60ef\u4e86\n            }\n        }\n        else if (v!=fa)\tlows[x]=min(dfn[v],lows[x]);//v!=fa\n    }\n}\n\nvoid dfs2 (int x){\n    E[x]=dcc;//\u5c06x\u88c5\u5165\u8fb9\u53cc\u8054\u901a dcc\u4e2d \n    for (int i=hed[x];i;i=e[i].nxt){\n        if (bri[i]==true)\tcontinue;//\u8df3\u8fc7\u6865\n        int v=e[i].v;\n        if (!E[v])\tdfs2(v);//\u6ca1\u6709\u66f4\u65b0\u8fc7\u4fbf\u66f4\u65b0\n    }\n}\n\nint chudu[N];//\u8bb0\u5f55\u51fa\u5ea6\n\nvoid dfs3(){\n    for (int i=1;i<=K;++i){//\u904d\u5386\u6bcf\u6761\u8fb9\uff0cK\u4e0d\u80fd\u6539\u6210m\u54e6\uff0c\u53cc\u5411\uff0c\u6539\u6210m*2\u53ef\u4ee5\n        int u=e[i].u,v=e[i].v;\n            if (E[u]!=E[v]){\n            chudu[E[u]]++;\n            chudu[E[v]]++;\n\t\t\t//\u4e5f\u53ef\u4ee5\u6ce8\u9500\u6389\u4e00\u884c\uff0c\u90a3\u4e48\u4e0b\u9762\u7684ans++\u7684\u5224\u65ad\u6761\u4ef6\u6539\u4e3achudu[i]==1\t[\u539f\u56e0\u662f\u56e0\u4e3a\u539f\u56fe\u53cc\u5411]\n        }\n    }\n    int ans=0;\n    for (int i=1;i<=dcc;++i){\n        if(chudu[i]==2)\tans++;\n    }\n    printf(\"%d\\n\",ans+1>>1);// >>1\u7b49\u4ef7\u4e8e\u00f71\uff0c\u6839\u636e\u8fd0\u7b97\u7b26\u5148\u540e\u7ea7\uff0c\u5b9e\u73b0\u529f\u80fd\u4e3a\u5148\u52a0\u540e\u9664\n} \n\nint main (){\n    scanf (\"%d%d\",&n,&m);\n    int u,v; \n    for (int i=1;i<=m;++i){\n         scanf (\"%d%d\",&u,&v);\n         ad(u,v);ad(v,u);//\u53cc\u5411\n    }\n    \n    for (int i=1;i<=n;++i)\n        if(!dfn[i])\tdfs (i,-1);//\u70b9i\u6ca1\u6709\u66f4\u65b0\u8fc7dfn\u503c\u4fbf\u66f4\u65b0\n        \n    for (int i=1;i<=n;++i){\n        if (!E[i])\n            dcc++,dfs2(i);//\u70b9i\u6ca1\u6709\u66f4\u65b0\u8fc7E[i]\u503c\u4fbf\u66f4\u65b0\n    }\n    \n    dfs3();\n    return 0;\n} \n```\n\n\n\u8fd9\u9053\u9898\u5199\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u5e0c\u671b\u5927\u5bb6\u4e0d\u8981\u5c40\u9650\u4e8e\u4e00\u79cd\u65b9\u6cd5\uff0c\u601d\u60f3\u5230\u4f4d\u5373\u53ef\uff0c\u4ee3\u7801\u5e94\u81ea\u5df1\u5199\uff0c\u5f62\u6210\u81ea\u5df1\u7684\u4ee3\u7801\u98ce\u683c\u3002\n\n\u60f3\u8bf4\u4e00\u70b9\u7684\u662f\uff1a\u5927\u90e8\u5206\u5199\u6cd5\u6700\u540e\u662f\u904d\u5386\u5224\u65ad\uff0c\u5b58\u56fe\u64cd\u4f5c\u4e0d\u4e00\u5b9a\u9700\u8981\uff0c\u80fd\u7701\u5c31\u7701\u5566\uff01\n\n",
        "postTime": 1519669143,
        "uid": 76204,
        "name": "violinwang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2860 \u3010[USACO06JAN]\u5197\u4f59\u8def\u5f84Redundant Paths\u3011"
    },
    {
        "content": "### \u521d\u770b\u9898\u76ee\uff0c\u6709\u70b9\u61f5\n\n#### \u518d\u4e00\u770b\uff1a\n**\u4ec0\u4e48\uff1f\u4e24\u6761\u8def\uff1f\u56fe\uff1f\u8fde\u901a\uff1f**\n\n\u8fd9\u4e9b\u5173\u952e\u5b57\u4e00\u6765\uff0c\u81ea\u7136\u5c31\u60f3\u5230\u4e86**\u6211\u4eec ~~\u53ef\u7231\u53c8\u8ff7\u4eba~~\u7684tarjan\u6851**\uff0c\u5373\u53ef\u4ee5\u50cf[P2746](https://www.luogu.com.cn/problem/P2746)\u4e00\u6837\u7f29\u70b9\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5165\u5ea6\uff0c\u51fa\u5ea6\uff0c\u53d6\u6700\u5927\u503c\u3002\n\n\n------------\n\n**\u7b49\u7b49\uff0c\u65e0\u5411\u56fe\uff1f**\n\n**\u30fd ( # ` \u0414 \u00b4 ) \uff89**\u4f3c\u4e4e\u4e0d\u80fd~~\u53cc\u500d\u7ecf\u9a8c~~**\u540c\u7c7b\u8fc1\u79fb**\u4e86\u554a\n\n\u4f46\u662f\uff0c \u6ca1\u6709\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u65e0\u5411\u8fb9\u8f6c\u6362\u4e3a**\u6700\u4f18**\u6709\u5411\u8fb9\uff0c\u8f6c\u800c\u6c42\u51fa\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5e76\u7f29\u70b9\uff0c\u7531\u4e8e\u6570\u636e\u4fdd\u8bc1\u56fe\u4e00\u5b9a\u8fde\u901a\uff0c\u5373\u4e0d\u5b58\u5728\u5ea6\u6570\u4e3a0\u7684\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u53ea\u7edf\u8ba1\u5165\u5ea6\u4e3a 1 \u7684\u70b9\u7684\u4e2a\u6570**num**\uff0c\u5e76\u5c06\u4ed6\u4eec\u4e24\u4e24\u76f8\u8fde\u3002\n**\u90a3\u4e48\u7b54\u6848 num/2 \u5e76\u5411\u4e0a\u53d6\u6574**\n\n- \u90a3\u4e48\uff0c\u5982\u4f55\u5c06\u65e0\u5411\u8fb9\u8f6c\u5316\u4e3a**\u6700\u4f18\u6709\u5411\u8fb9**\u5462\uff1f\n\n\u90a3\u5c31\u8981\u5b89\u5229\u4e00\u4e2a~~\u5927\u5b9d\u8d1d~~ **\u201c^\u201d \u4e8c\u8fdb\u5236\u5f02\u6216\u8fd0\u7b97\u7b26**\n\n\u5b83\u53ef\u4ee5\u5c06\u4e8c\u8fdb\u5236\u4e0b\u7684\u7684\u6570 \u540c\u4e3a 1\u62160 \u53d8\u4e3a 0\uff0c\u4e0d\u540c\u5219\u4e3a 1\uff1b\n\n\u90a3\u4e48\u6211\u4eec\u5177\u4f53\u5e94\u8be5\u5982\u4f55\u4f7f\u7528\u5462\uff1f\n\n\u5df2\u77e5\u6211\u4eec\u5b58\u56fe\u6240\u7528\u4e3a**\u524d\u5411\u661f\u5b58\u56fe**\uff08\u4ec0\u4e48\uff1f\u4f60\u4e0d\u4f1a\u524d\u5411\u661f\uff0c\u90a3\u4e48\u8bf7\u5148\u5b66\u597d\uff0c\u5b66\u624e\u5b9e\u56fe\u57fa\u7840\uff0c\u518d\u6765\u5b66tarjan\uff09\u7531\u4e8e\u662f\u65e0\u5411\u56fe\uff0c\u6211\u4eec\u4f1a\u5c06\u6bcf\u6761\u8fb9\u5b58\u4e24\u904d\uff0c\u800c\u5176\u4e2d\u80fd\u8d70\u8fc7\u53bb\u7684\u8fb9\u5373\u4e3a\u4ee5\u5f53\u524d\u4e3a\u8d77\u70b9\u7684\u6700\u4f18\u6709\u5411\u8fb9\n\n**\u800c\u6211\u4eec\u8d70\u4e86\u8be5\u6761\u8fb9\u4e4b\u540e\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u5f53\u6709\u5411\u56fe\u5904\u7406\uff0c\u81ea\u7136\u56de\u6765\u7684\u90a3\u6761\u8fb9\u4e5f\u4e0d\u80fd\u8d70**\uff0c\u6240\u4ee5\u6211\u4eec\u7528 **vis[i]=true**\u8868\u793a\u8fd9\u6761\u8fb9\u5df2\u8d70\u8fc7\uff0c\u4f46\u5982\u4f55\u8868\u793a\u53cd\u5411\u7684\u8fb9\u5462\uff1f\n\n\u6211\u4eec\u9996\u5148\u5e94\u660e\u767d **x^1==(x==\u5076\u6570 ? x+1\uff1ax-1)**\n\u4e5f\u5c31\u662f\u8bf4\u53ea\u8981\u6211\u4eec\u5c06\u6bcf\u4e00\u6761\u65e0\u5411\u8fb9\u7684\u6b63\u5411\u8fb9\u7684\u8fb9\u53f7\u50a8\u5b58\u4e3a\u5076\u6570\uff0c\u53cd\u5411\u8fb9\u7684\u8fb9\u53f7\u50a8\u5b58\u4e3a\u5947\u6570\uff0c\u53ea\u8981\u7ecf\u8fc7\u4e86\u8be5\u6761\u8fb9\u65e2\u53ef\u4ee5\u8fdb\u884c\u6807\u8bb0**vis[i]=vis[i^1]=true**\n\n\n\n------------\n\n\n\u4ee3\u7801\u6838\u5fc3\uff1a\n```cpp\n\nvoid tarjan(int u,int fa)\n{\n\tdfn[u]=low[u]=++cnt;\n\ts[++top]=u,ins[u]=true;\n\tfor(int i=head[u];i;i=e[i].last)\n\t{\n\t\tif(vis[i])continue;\n\t\tvis[i]=vis[i^1]=true;\n\t\tint v=e[i].v;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v,u);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(ins[v])\n\t\t\tlow[u]=min(low[u],dfn[v]);\n\t}\n\tif(dfn[u]==low[u])\n\t{\n\t\tso[u]=++bcnt;\n\t\tins[u]=false;\n\t\twhile(u!=s[top])\n\t\t{\n\t\t\tso[s[top]]=bcnt;\n\t\t\tins[s[top]]=false;\n\t\t\ttop--;\n\t\t}\n\t\ttop--;\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&a[i],&b[i]);\n\t\tadd(a[i],b[i]);\n\t\tadd(b[i],a[i]);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(!dfn[i])tarjan(i,i);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(so[a[i]]!=so[b[i]])\n\t\t\t++r[so[a[i]]],++r[so[b[i]]];\n\t}\n\tfor(int i=1;i<=bcnt;i++)\n\t{\n\t\tif(r[i]==1)\n\t\t\tans1++;\n\t}\n\tprintf(\"%d\\n\",(ans1+1)/2);\n\treturn 0;\n}\n```\n\n## \u6ce8\u610f\uff1a\n\n\u5728\u6bd2\u7624\u51fa\u9898\u4eba\u7684\u6bd2\u7624\u6570\u636e\u4e2d\uff0c\u5b58\u5728**\u91cd\u8fb9\uff01**\n\n\n\n",
        "postTime": 1575687036,
        "uid": 224229,
        "name": "Caicz",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2860 \u3010[USACO06JAN]\u5197\u4f59\u8def\u5f84Redundant Paths\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u53ef\u4ee5\u8f6c\u6362\u4e3a\u4e00\u53e5\u8bdd\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u56fe\uff0c\u6c42\u9700\u8981\u6dfb\u52a0\u51e0\u6761\u8fb9\u4f7f\u5176\u6210\u4e3a\u8fb9\u53cc\u8fde\u901a\u56fe\n\n\u53ef\u4ee5\u8bc1\u660e\u5728\u4e00\u4e2a\u8fb9\u53cc\u8fde\u901a\u56fe\u91cc\u7684\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u662f\u4e0d\u4f1a\u51cf\u5c11\u6865\u7684\u6570\u76ee\u7684\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u53cc\u8054\u901a\u5b50\u56fe\u7f29\u4e3a\u4e00\u4e2a\u70b9\n\n\u53cc\u8054\u901a\u5b50\u56fe\u7684\u6c42\u6cd5\u4e3a\uff1a\u5148\u6c42\u51fa\u6bcf\u4e2a\u6865\uff0c\u5220\u9664\u8fd9\u4e9b\u6865\u5269\u4e0b\u7684\u6bcf\u4e2a\u8054\u901a\u5757\u90fd\u662f\u4e00\u4e2a\u53cc\u8054\u901a\u5b50\u56fe\n\n\u518d\u5c06\u6240\u6709\u6865\u6dfb\u52a0\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6811\n\n\u7b54\u6848\u5c31\u662f\u8fd9\u68f5\u6811\u7684(\u53f6\u5b50\u8282\u70b9\u4e2a\u6570+1)/2\n\n```cpp\n/***************************************************************\n\tFile name: A.cpp\n\tAuthor: ljfcnyali\n\tCreate time: 2019\u5e7405\u670821\u65e5 \u661f\u671f\u4e8c 09\u65f635\u520617\u79d2\n***************************************************************/\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define REP(i, a, b) for ( int i = (a), _end_ = (b); i <= _end_; ++ i ) \n#define mem(a) memset ( (a), 0, sizeof ( a ) ) \n#define str(a) strlen ( a ) \n\nconst int maxn = 1000010;\n\nint Begin[maxn], Next[maxn], To[maxn], e, be[maxn], cnt;\nint low[maxn], dfn[maxn], n, m, p[maxn], ans, tot, degree[maxn];\nbool vis[maxn];\nstack<int> Stack;\n\ninline void add(int u, int v)\n{\n\tTo[++ e] = v; Next[e] = Begin[u]; Begin[u] = e; be[e] = e + 1;\n\tTo[++ e] = u; Next[e] = Begin[v]; Begin[v] = e; be[e] = e - 1;\n}\n\ninline void Tarjan(int u)\n{\n\tlow[u] = dfn[u] = ++ cnt; Stack.push(u);\n\tfor ( int i = Begin[u]; i; i = Next[i] )\n\t{\n\t\tvis[i] = true;\n\t\tif ( !vis[be[i]] ) \n\t\t{\n\t\t\tint v = To[i];\n\t\t\tif ( !dfn[v] ) { Tarjan(v); low[u] = min(low[u], low[v]); }\n\t\t\telse low[u] = min(low[u], dfn[v]);\n\t\t}\n\t}\n\tif ( low[u] == dfn[u] ) \n\t{\n\t\tp[u] = ++ tot;\n\t\twhile ( Stack.top() != u ) \n\t\t{\n\t\t\tp[Stack.top()] = tot; Stack.pop();\n\t\t}\n\t\tStack.pop();\n\t}\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n#endif\n\tscanf(\"%d%d\", &n, &m);\n\tREP(i, 1, m) { int u, v; scanf(\"%d%d\", &u, &v); add(u, v); }\n\tTarjan(1);\n\tREP(u, 1, n)\n\t\tfor ( int i = Begin[u]; i; i = Next[i] ) \n\t\t{\n\t\t\tvis[i] = false;\n\t\t\tif ( vis[be[i]] ) \n\t\t\t{\n\t\t\t\tint v = To[i];\n\t\t\t\tif ( p[u] != p[v] ) { ++ degree[p[u]]; ++ degree[p[v]]; }\n\t\t\t}\n\t\t}\n\tREP(i, 1, tot) if ( degree[i] == 1 ) ++ ans;\n\tprintf(\"%d\\n\", (ans + 1) / 2);\n    return 0;\n}\n```",
        "postTime": 1558403783,
        "uid": 8618,
        "name": "\u6c34\u5e93\u4e2d\u7684\u6c34\u5e93",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2860 \u3010[USACO06JAN]\u5197\u4f59\u8def\u5f84Redundant Paths\u3011"
    },
    {
        "content": "## \u8fb9\u53cc\u8054\u901a\u5206\u91cf\u6a21\u7248\n\n\u5148\u7528tarjan\u627e\u6865\uff0c\u518d\u627e\u5230e-dcc\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u8fb9-\u53cc\u8fde\u901a\u5206\u91cf\u7f29\u6210\u65b0\u56fe\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u6837\u6240\u5f62\u6210\u7684\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u5c31\u662f\u4e00\u68f5\u6811\u3002\u7136\u540e\u6211\u4eec\u9700\u8981\u8bc1\u660e\u4e00\u4e2a\u5b9a\u7406\uff1a**\u8fd9\u4e2a\u8fde\u901a\u5206\u91cf\u4e0a\u7684\u5e7f\u4e49\u53f6\u5b50\u8282\u70b9\uff08\u5ea6\u6570\u4e3a1\uff09\u9664\u4ee52\u5411\u4e0a\u53d6\u6574\u5373\u4e3a\u6240\u9700\u8981\u52a0\u7684\u8fb9\u6570\u3002**\n\n\u7edf\u8ba1\u51fa\u53f6\u5b50\u6570\u91cf\u5373\u53ef\u3002\n\n```c\n#include<bits/stdc++.h>\nusing namespace std;\n#define go(i,a,b) for(int i=(a);i<=(b);++(i))\n#define com(i,a,b) for(int i=(a);i>=(b);--(i))\n#define mem(a,b) memset((a),(b),sizeof(a))\n#define inf 0x3f3f3f3f\n#define fin freopen(\"input.txt\",\"r\",stdin)\n#define fout freopen(\"output.txt\",\"w\",stdout)\n#define w first\n#define t second\ntypedef long long ll;\nconst int maxn=5010,maxm=20010;\nint n,m;\nint head[maxn],dfn[maxn],low[maxn],c[maxn],cnt=0,dcc=0,du[maxn];\nbool bridge[maxm];\nstruct node{\n    int nxt,u,v;\n}e[maxm];\nvoid add(int u,int v){\n    e[cnt]=(node){head[u],u,v};\n    head[u]=cnt++;\n}\n\nvoid tarjan(int u,int fedge){\n    dfn[u]=low[u]=++dcc;\n    for(int i=head[u];i+1;i=e[i].nxt){\n        int v=e[i].v;\n        if(!dfn[v]){\n            tarjan(v,i);\n            low[u]=min(low[u],low[v]);\n            if(low[v]>dfn[u]){\n                bridge[i]=bridge[i^1]=1;\n            }\n        }\n        else{\n            if((i^1)!=fedge) low[u]=min(low[u],dfn[v]);//\u6613\u9519,\u8981\u6ce8\u610f\u4f18\u5148\u7ea7\u95ee\u9898\n\t\t\t//\u5f53fa\u4e0eu\u4e4b\u95f4\u6709\u591a\u6761\u8fb9\u65f6\uff0c\uff08x\uff0cfa\uff09\u4e00\u5b9a\u4e0d\u662f\u6865\n\t\t\t//\u6240\u4ee5\u5982\u679c\u5904\u7406\u91cd\u8fb9\u65f6\uff0c\u9700\u8981\u6807\u8bb0\u8fb9\uff0c\u5426\u5219\u53ea\u9700\u6807\u8bb0\u7236\u8282\u70b9 \n        }\n    }\n}\n\nvoid getdcc(int u){\n    c[u]=dcc;\n    for(int i=head[u];i+1;i=e[i].nxt){\n        int v=e[i].v;\n        if(c[v]||bridge[i]) continue;\n        getdcc(v);\n    }\n}\n\nvoid getans(){\n    for(int i=0;i<cnt;i++){\n        int u=e[i].u,v=e[i].v;\n        if(c[u]==c[v]) continue;\n        du[c[u]]++;\n    }\n    int ans=0;\n    go(i,1,dcc){\n        if(du[i]==1) ans++;\n    }\n    printf(\"%d\",(ans+1)>>1);\n}\n\nint main()\n{\n    //fin;\n    mem(head,-1);\n    scanf(\"%d%d\",&n,&m);\n    int x,y;\n    go(i,1,m){\n        scanf(\"%d%d\",&x,&y);\n        add(x,y),add(y,x);\n    }\n    go(i,1,n){\n        if(!dfn[i]) tarjan(i,-1);\n    }\n    dcc=0;\n    go(i,1,n){\n        if(!c[i]) ++dcc,getdcc(i);\n    }\n    getans();\n    return 0;\n}\n```\n",
        "postTime": 1557543137,
        "uid": 109434,
        "name": "\u98ce\u968f\u9010\u5f71",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2860 \u3010[USACO06JAN]\u5197\u4f59\u8def\u5f84Redundant Paths\u3011"
    },
    {
        "content": "## \u601d\u8def\uff1a\n\nTarjan\u7f29\u70b9\uff0c\u7136\u540eans=\uff08\u65b0\u56fe\u4e2d\u5ea6\u4e3a1\u7684\u8282\u70b9\u6570+1\uff09/2\uff1b\n\n\u65b0\u56fe\u4e2d\u901a\u5411\u5ea6\u4e3a1\u7684\u8282\u70b9\u7684\u8fb9\u5373\u4e3a\u6865\uff0c\u5207\u65ad\u5219\u56fe\u4e0d\u8fde\u901a\uff1b\n\n\u6240\u4ee5\u8981\u4f7f\u6bcf\u4e2a\u70b9\u7684\u5ea6\u90fd\u5927\u4e8e1\uff1b\n\n\u8fde\u63a5\u4e24\u4e2a\u5ea6\u4e3a1\u7684\u8282\u70b9\u53ef\u4ee5\u540c\u65f6\u89e3\u51b3\u5b83\u4eec\uff1b\n\n\u5982\u679c\u6709\u5269\u4f59\u7684\u70b9\u5c31\u7279\u4f9b\u7ed9\u5b83\u4e00\u6761\u8fb9\uff1b\n\n\n## \u4ee3\u7801\u5b9e\u73b0\uff1a\n\n```cpp\n#include<cstdio>\nconst int maxn=5e3+10;\nconst int maxm=2e4+10;\ninline int min_(int x,int y){return x<y?x:y;}\nint f,r,ans;\nint a,b;\nint e[maxm][2];\nint h[maxn],hs=1,et[maxm],en[maxm];\nvoid add(int u,int v){\n    ++hs,et[hs]=v,en[hs]=h[u],h[u]=hs;\n    ++hs,et[hs]=u,en[hs]=h[v],h[v]=hs;\n}\nint q[maxn],top;\nint dfn[maxn],dfs,low[maxn];\nint d[maxn],t[maxn],ts;\nbool v[maxm];\nvoid tarjan(int k){\n    dfn[k]=low[k]=++dfs;\n    q[++top]=k;\n    for(int i=h[k];i;i=en[i])\n    if(!v[i]){\n        v[i]=v[i^1]=1;\n        if(dfn[et[i]]) low[k]=min_(low[k],dfn[et[i]]);\n        else tarjan(et[i]),low[k]=min_(low[k],low[et[i]]);\n    }\n    if(!t[k]){\n        ++ts;\n        while(low[k]<=dfn[q[top]]) t[q[top--]]=ts;\n    }\n}\nint main(){\n    freopen(\"rpaths.in\",\"r\",stdin);\n    freopen(\"rpaths.out\",\"w\",stdout);\n    scanf(\"%d%d\",&f,&r);\n    for(int i=1;i<=r;i++){\n        scanf(\"%d%d\",&a,&b);\n        e[i][0]=a,e[i][1]=b;\n        add(a,b);\n    }\n    for(int i=1;i<=f;i++) if(!dfn[i]) tarjan(i);\n    for(int i=1;i<=r;i++) if(t[e[i][0]]!=t[e[i][1]]) ++d[t[e[i][0]]],++d[t[e[i][1]]];\n    for(int i=1;i<=ts;i++) if(d[i]==1) ans++;\n    printf(\"%d\\n\",ans+1>>1);\n    return 0;\n}\n```",
        "postTime": 1498306870,
        "uid": 21020,
        "name": "Long\u00b7J\u00b7William",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2860 \u3010[USACO06JAN]\u5197\u4f59\u8def\u5f84Redundant Paths\u3011"
    },
    {
        "content": "> [P2860 [USACO06JAN]Redundant Paths G](https://www.luogu.com.cn/problem/P2860)\r\n>\r\n> [\u521d\u7ea7\u56fe\u8bba](https://www.cnblogs.com/alex-wei/p/basic_graph_theory.html)\u3002\r\n\r\n\u9898\u76ee\u76f8\u5f53\u4e8e\u6c42\u6dfb\u52a0\u6700\u5c11\u7684\u8fb9\u6570\u4f7f\u5f97\u6574\u5f20\u56fe\u53d8\u6210\u4e00\u4e2a E-BCC\uff0c\u5373\u4e0d\u5b58\u5728\u5272\u8fb9\u3002\r\n\r\n\u8003\u8651 E-BCC \u7f29\u70b9\uff0c\u5f97\u5230\u7684\u6811 $T$ \u4e0a\u6240\u6709\u8fb9\u90fd\u662f\u539f\u56fe\u4e0a\u7684\u5272\u8fb9\u3002\u6839\u636e\u6c42\u5272\u8fb9\u7684\u7ed3\u8bba\uff0c\u5982\u679c\u6211\u4eec\u5728 $(u, v)$ \u4e4b\u95f4\u52a0\u4e00\u6761\u8fb9\uff0c\u8bbe $U$ \u4e3a $u$ \u6240\u5728 E-BCC \u5728\u7f29\u70b9\u540e\u7684\u6811\u4e0a\u5bf9\u5e94\u7684\u8282\u70b9\uff0c$V$ \u540c\u7406\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u5c06 $U, V$ \u4e4b\u95f4\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u5728\u539f\u56fe\u4e0a\u53d8\u6210\u975e\u5272\u8fb9\u3002\r\n\r\n\u56e0\u6b64\uff0c\u6211\u4eec\u5e0c\u671b\u7528\u6700\u5c11\u7684\u8def\u5f84\u8986\u76d6 $T$ \u7684\u6bcf\u4e00\u6761\u8fb9\u3002\u5bf9\u6b64\u6709\u7ecf\u5178\u7ed3\u8bba\uff08\u6216\u8005\u76f4\u63a5\u611f\u6027\u7406\u89e3\uff09\uff0c\u7b54\u6848\u5373 $T$ \u7684\u53f6\u5b50\u4e2a\u6570\u9664\u4ee5 $2$ \u4e0a\u53d6\u6574\u3002\r\n\r\n\u8bc1\u660e\u8fd9\u662f\u7b54\u6848\u4e0b\u754c\u975e\u5e38\u5bb9\u6613\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6761\u94fe\u81f3\u591a\u6d88\u706d\u6389\u4e24\u4e2a\u53f6\u5b50\u5230\u5b83\u552f\u4e00\u76f8\u90bb\u7684\u70b9\u7684\u8fb9\u3002\u5f53\u53ea\u6709\u4e24\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u7279\u6b8a\u8ba8\u8bba\u4e00\u4e0b\uff0c\u8fd9\u662f\u5e73\u51e1\u7684\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u53ea\u9700\u7ed9\u51fa\u4e00\u4e2a\u8fbe\u5230\u8be5\u4e0b\u754c\u7684\u6784\u9020\u65b9\u6cd5\u3002\r\n\r\n\u6211\u4eec\u79f0\u4e24\u4e2a\u8282\u70b9\u5339\u914d\u8868\u793a\u5728\u6700\u7ec8\u65b9\u6848\u4e2d\uff0c\u5b58\u5728\u4e00\u6761\u8fde\u63a5\u5b83\u4eec\u7684\u94fe\u3002\r\n\r\n\u9996\u5148\uff0c\u5f53\u53f6\u5b50\u4e2a\u6570\u4e3a\u5947\u6570\u65f6\uff0c\u5c06\u4e00\u4e2a\u53f6\u5b50\u548c\u5ea6\u6570 $\\geq 3$ \u7684\u8282\u70b9\u5339\u914d\u540e\u53ef\u4ee5\u8f6c\u5316\u4e3a\u53f6\u5b50\u6570\u91cf\u4e3a\u5076\u6570\u7684\u60c5\u51b5\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5ea6\u6570 $\\geq 3$ \u7684\u8282\u70b9\uff0c\u5219 $T$ \u4e3a\u4e00\u6761\u94fe\uff0c\u4e0e\u53f6\u5b50\u4e2a\u6570\u4e3a\u5947\u6570\u77db\u76fe\u3002\r\n\r\n\u8003\u8651\u5148\u5c06\u6240\u6709\u53f6\u5b50\u4efb\u610f\u4e24\u4e24\u914d\u5bf9\uff0c\u518d\u8c03\u6574\u3002\u5982\u679c\u5728\u5f53\u524d\u65b9\u6848\u4e2d\uff0c\u5b58\u5728\u4e00\u6761\u8fb9 $(u, v)$ \u6ca1\u6709\u88ab\u8986\u76d6\uff0c\u8003\u5bdf\u65ad\u6389 $(u, v)$ \u540e $u, v$ \u5206\u522b\u6240\u5728\u7684\u8fde\u901a\u5757 $U, V$\u3002\r\n\r\n$U$ \u6216 $V$ \u4e0d\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u53f6\u5b50\uff08\u8fd9\u91cc\u7684\u53f6\u5b50\u662f\u76f8\u5bf9\u4e8e\u539f\u6811\u800c\u8a00\u7684\uff0c\u5373\u5728\u539f\u6811 $T$ \u4e0a\u662f\u53f6\u5b50\uff0c\u800c\u4e0d\u662f $U$ \u672c\u8eab\u7684\u53f6\u5b50\uff09\uff0c\u56e0\u4e3a\u82e5\u975e\uff0c\u5219\u8be5\u552f\u4e00\u7684\u53f6\u5b50\u548c\u53e6\u5916\u67d0\u4e2a\u53f6\u5b50\u5339\u914d\u65f6\u5fc5\u7136\u7ecf\u8fc7 $(u, v)$\uff0c\u4e0e $(u, v)$ \u6ca1\u6709\u88ab\u8986\u76d6\u77db\u76fe\u3002\r\n\r\n\u540c\u7406\u53ef\u4ee5\u8bc1\u660e $U$ \u6216 $V$ \u4e0d\u53ef\u80fd\u6709\u5947\u6570\u4e2a\u53f6\u5b50\u3002\r\n\r\n\u6839\u636e\u4e0a\u8ff0\u7ed3\u8bba\uff0c\u5f53\u524d\u65b9\u6848\u5fc5\u7136\u662f $U$ \u7684\u6240\u6709\u5076\u6570\u4e2a\u53f6\u5b50\u4e24\u4e24\u5339\u914d\uff0c$V$ \u7684\u6240\u6709\u5076\u6570\u4e2a\u53f6\u5b50\u4e24\u4e24\u5339\u914d\u3002\r\n\r\n\u4e0d\u59a8\u8bbe $U$ \u67d0\u4e24\u4e2a\u914d\u5bf9\u7684\u53f6\u5b50\u4e3a $u_1, u_2$\uff0c\u5b83\u4eec\u5728\u4ee5 $u$ \u4e3a\u6839\u65f6\u7684 LCA \u4e3a $u_d$\uff0c\u5bf9\u4e8e $V$ \u540c\u7406\uff0c\u5b9a\u4e49 $v_1, v_2$ \u548c $v_d$\u3002\r\n\r\n\u5f53\u524d\u7684\u65b9\u6848\u662f $u_1\\to u_d \\to u_2$ \u4ee5\u53ca $v_1 \\to v_d \\to v_2$ \u4e0a\u7684\u6240\u6709\u8fb9\u88ab\u8986\u76d6\uff0c\u4f46\u901a\u8fc7\u8c03\u6574\uff0c\u4ee4 $u_1$ \u548c $v_1$\uff0c$u_2$ \u548c $v_2$ \u5339\u914d\uff0c\u5219 $u_i\\to u_d \\to u\\to v \\to v_d \\to v_i$ \u4e0a\u7684\u6240\u6709\u8fb9\u88ab\u8986\u76d6\u3002\u539f\u6765\u88ab\u8986\u76d6\u7684\u8fb9\u4ecd\u88ab\u8986\u76d6\uff0c\u540c\u65f6 $(u, v)$ \u4e5f\u88ab\u8986\u76d6\u4e86\u3002\r\n\r\n\u56e0\u6b64\uff0c\u82e5\u5bf9\u4e8e\u5f53\u524d\u65b9\u6848\uff0c\u67d0\u6761\u8fb9\u6ca1\u6709\u8986\u76d6\uff0c\u901a\u8fc7\u4e0a\u8ff0\u8c03\u6574\u4e00\u5b9a\u80fd\u4f7f\u5f97\u539f\u6765\u88ab\u8986\u76d6\u7684\u8fb9\u4ecd\u88ab\u8986\u76d6\uff0c\u4e14\u8be5\u8fb9\u4e5f\u88ab\u8986\u76d6\uff0c\u540c\u65f6\u4e0d\u6539\u53d8\u539f\u6765 $\\dfrac {\\# \\mathrm{leaf}}{2}$ \u7684\u94fe\u7684\u6761\u6570\u3002\u7b54\u6848\u4e0a\u754c\u5f97\u8bc1\u3002\r\n\r\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n + m)$\u3002\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 5e3 + 5;\r\nint n, m, dn, deg[N], dfn[N], low[N];\r\nint cn, col[N], stc[N], top;\r\nvector<pair<int, int>> e[N];\r\nvoid form(int id) {\r\n  cn++;\r\n  for(int x = 0; x != id; ) col[x = stc[top--]] = cn;\r\n}\r\nvoid tarjan(int id, int eid) {\r\n  stc[++top] = id, dfn[id] = low[id] = ++dn;\r\n  for(auto _ : e[id]) {\r\n    if(_.second == eid) continue;\r\n    int it = _.first;\r\n    if(!dfn[it]) {\r\n      tarjan(it, _.second);\r\n      low[id] = min(low[id], low[it]);\r\n      if(low[it] > dfn[id]) form(it);\r\n    }\r\n    else low[id] = min(low[id], dfn[it]);\r\n  }\r\n  if(!eid) form(id);\r\n}\r\nint main() {\r\n  cin >> n >> m;\r\n  for(int i = 1; i <= m; i++) {\r\n    int u, v;\r\n    cin >> u >> v;\r\n    e[u].push_back(make_pair(v, i));\r\n    e[v].push_back(make_pair(u, i));\r\n  }\r\n  tarjan(1, 0);\r\n  if(cn == 1) puts(\"0\"), exit(0); // \u8fd9\u53e5\u5224\u65ad\u5176\u5b9e\u4e0d\u8981\u4e5f\u53ef\u4ee5\r\n  for(int i = 1; i <= n; i++)\r\n    for(auto _ : e[i]) {\r\n      int it = _.first;\r\n      if(i < it && col[i] != col[it]) deg[col[i]]++, deg[col[it]]++;\r\n    }\r\n  int leaf = 0;\r\n  for(int i = 1; i <= cn; i++) leaf += deg[i] == 1;\r\n  cout << (leaf + 1 >> 1) << endl;\r\n  return cerr << \"Time: \" << clock() << endl, 0;\r\n}\r\n```",
        "postTime": 1653522731,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "P2860 [USACO06JAN]Redundant Paths G"
    },
    {
        "content": "_\u635e\u4e00\u4e0b\u849f\u84bb[Blog](https://www.luogu.com.cn/blog/quest233/#)_\n\n_\u8fd9\u7bc7\u6587\u7ae0\u91cd\u5728\u8bb2\u89e3\u5728\u5207\u8fd9\u9053\u9898\u65f6\u662f\u5982\u4f55\u60f3\u5230\u6b63\u89e3\u7684\u3002_\n\n\u8bb0\u5f97\u6709\u4e00\u4f4d\u5de8\u4f6c\u8bf4\u8fc7\uff0c\u6bcf\u4e00\u9053\u9898\u90fd\u662f\u677f\u5b50\u5957\u677f\u5b50\u5957\u677f\u5b50\u5957$\\cdots \\cdots$ \uff0c\u4e5f\u5c31\u662f $({\\color{black}\\colorbox{white}{\u677f\u5b50}})^K$\u3002\n\n\u6709\u4e86\u8fd9\u4e00\u57fa\u7840\u7406\u8bba\uff0c\u6211\u4eec\u5c31\u60f3\u60f3\u4ec0\u4e48\u677f\u5b50\u662f\u53ef\u4ee5\u5957\u4e0a\u8fd9\u9898\u7684\u3002\n\n\u5148\u6765\u770b\u9898\u610f\uff0c\u7a0d\u52a0\u7b80\u5316\u4fbf\u662f\u8fd9\u6837\uff1a\n\n```\n\u6709\u4e00\u65e0\u5411\u56fe\u3002\n\u8981\u6c42\u52a0\u4e00\u4e9b\u8fb9\uff0c\u4f7f\u5f97\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u81f3\u5c11\u6709\u4e24\u6761\u8fb9\u76f8\u8fde\u3002\n\u6c42\u6700\u5c11\u52a0\u8fb9\u6570\u3002\n```\n`\u81f3\u5c11\u6709\u4e24\u6761\u8fb9\u76f8\u8fde`\uff1f\u5bb9\u6613\u770b\u51fa\u8fd9\u662f\u4e00\u9053\u56fe\u8bba\u9898\uff0c\u751a\u81f3\u53ef\u4ee5\u770b\u51fa\u662f\u4e00\u9053**\u56fe\u7684\u8fde\u901a\u6027\u4e13\u9898\u7684\u56fe\u8bba\u9898**\u3002\n\n\u8bf4\u5230\u56fe\u7684\u8fde\u901a\u6027\uff0c\u5c31\u5fc5\u7136\u4f1a\u60f3\u5230\u4e00\u4e2a\u4ee4\u4eba\u819c\u62dc\u7684\u4eba\u7269\uff0c$\\mathbf{Tarjan}$ \u3002\u51e0\u4e4e\u6240\u6709\u7684\u56fe\u7684\u8fde\u901a\u6027\u9898\u76ee\u90fd\u548c\u4ed6\u53d1\u660e\u7684\u7b97\u6cd5\uff0c\u501f\u52a9\u4e8e\u65f6\u95f4\u6233\u7684\u8dd1\u5f3a\u8fde\u901a\u5206\u91cf/\u6865/\u5272\u70b9\u7b49\u7b49\u7684\u795e\u4ed9\u64cd\u4f5c\u6709\u5173\u3002\u90a3\u6211\u4eec\u5982\u4f55\u8fd0\u7528\u8fd9\u4e9b\u795e\u4ed9\u64cd\u4f5c\u5b8c\u6210\u4efb\u52a1\u5462\uff1f\n\n\u81f3\u5c11\u6709\u4e24\u6761\u8fb9\u76f8\u8fde\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c**\u5220\u53bb\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u4e00\u6761\u8def\u5f84\u540e\uff0c\u8fd9\u4e24\u70b9\u4f9d\u7136\u8054\u901a**\u3002\n\n\u5220\u53bb\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u4e00\u6761\u8def\u5f84\u540e\uff0c\u8fd9\u4e24\u70b9\u4f9d\u7136\u8054\u901a\uff1f\n\n\u6211\u4eec\u60f3\u8d77\u6865\u7684\u5b9a\u4e49\uff1a\u5220\u53bb\u4e24\u70b9\u4e4b\u95f4\u7684\u4e00\u6761\u8def\u5f84\u540e\uff0c\u8fd9\u4e24\u70b9\u4e0d\u518d\u8054\u901a\u3002\n\n\u5b9e\u5728\u5f88\u96be\u4e0d\u628a\u4ed6\u4eec\u4fe9\u60f3\u5230\u4e00\u5757\u53bb\u3002\n\n\u5982\u679c\u628a\u539f\u56fe\u4e2d\u7684\u6240\u6709\u6865\u90fd\u5220\u6389\uff0c\u4f1a\u7559\u4e0b\u4e00\u4e9b\u8054\u901a\u5757\u3002\u8fd9\u4e9b\u8054\u901a\u5757\u5c31\u6ee1\u8db3\u9898\u4e2d\u8bf4\u7684\uff1a\u4e24\u70b9\u95f4\u81f3\u5c11\u6709\u4e24\u6761\u8fb9\u76f8\u8fde\u3002\n\n\u800c\u8fd9\u79cd\u8054\u901a\u5757\uff0c\u5b66\u540d\u79f0\u4f5c**\u8fb9\u53cc\u8054\u901a\u5206\u91cf**\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u89c4\u5f8b\uff1a\u8fb9\u53cc\u8054\u901a\u5206\u91cf\u4e2d\u4e24\u70b9\u4e4b\u95f4**\u4e0d\u4f1a\u56e0\u4e3a\u52a0\u8fb9\u800c\u51cf\u5c11\u6574\u5e45\u56fe\u4e2d\u539f\u6709\u7684\u6865**\u3002\n\n\u6bd5\u7adf\u4ed6\u4eec\u53ef\u662f\u5728\u62c6\u6865\u8fd0\u52a8\u540e\u4ecd\u7136\u5b58\u6d3b\u7684 ${\\color{red}\\colorbox{white}{\u7262\u4e0d\u53ef\u7834\u7684\u8054\u76df}}$ \uff0c\u5df2\u7ecf\u6ca1\u6709\u518d\u52a0\u56fa\u8054\u76df\u7684\u5fc5\u8981\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u52a0\u56fa\u7684\uff0c\u5b9e\u5219\u662f\u90a3\u4e9b\u5728\u62c6\u6865\u8fd0\u52a8\u540e\uff0c\u652f\u79bb\u7834\u788e\u7684\u7ed3\u70b9\u3002\n\n\u8fd9\u4e00\u6b65\u9aa4\uff0c\u4e00\u6837\u53ef\u4ee5\u7528Tarjan\u7b97\u6cd5\u5b8c\u6210\uff0c\u7528\u7c7b\u4f3c**Tarjan\u6c42\u5f3a\u8fde\u901a\u5206\u91cf**\u7684\u67d3\u8272\u6cd5\u3002\u5728\u540c\u4e00\u4e2a\u8fb9\u53cc\u8054\u901a\u5206\u91cf\u4e2d\u7684\u70b9\u4f1a\u88ab\u67d3\u4e0a\u540c\u4e00\u4e2a\u989c\u8272\u3002\u540c\u4e00\u79cd\u989c\u8272\u7684\u7ed3\u70b9\uff0c\u53c8\u53ef\u4ee5\u7528**Tarjan\u7f29\u70b9**\u7684\u601d\u60f3\u3002\u628a\u4e00\u4e2a\u8fb9\u53cc\u8054\u901a\u5206\u91cf\u7f29\u6210\u4e00\u4e2a\u7ed3\u70b9\u3002\n\n _\uff08\u6ce8\uff1a\u8fd9\u91cc\u8bf4\u4e00\u4e0b\uff0c\u6211\u4eec\u505a\u8fd9\u9053\u9898\u65f6\u53ea\u9700\u8981\u7528\u5230\u6865\u7684\u6982\u5ff5\u548c\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e00\u79cd\u64cd\u4f5c\u601d\u60f3\uff0c\u8fd9\u4e24\u4e2a\u4e1c\u897f\u662f\u4e0d\u7528\u6572\u7684\uff0c\u6240\u4ee5\u4e0d\u7528\u614c\\fad\u3002\uff09_ \n\n\u53c8\u56e0\u4e3a\u5220\u5b8c\u6865\u540e\uff0c\u6865\u7684\u4e24\u7aef\u70b9\u4f1a\u5206\u5230\u4e24\u4e2a\u4e0d\u540c\u7684\u8054\u901a\u5757\u91cc\u3002\u6240\u4ee5\u4e00\u4e2a\u6865\u7684\u4e24\u7aef**\u5fc5\u7136\u662f\u4e0d\u540c\u7684\u989c\u8272**\uff0c\u4e5f\u5c31\u4e0d\u80fd\u88ab\u7f29\u5230\u4e00\u8d77\u3002\n\n\u6240\u4ee5\u7f29\u70b9\u540e\u7684\u56fe\u4f1a\u5fc5\u7136\u6210\u4e3a\u4e00\u68f5\u6811\u7684\u5f62\u72b6\uff0c\u5982\u56fe\uff5e\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/nlek31o2.png)\n\n\u53ef\u4ee5\u770b\u5230\u5c06\u8fb9\u53cc\u8054\u901a\u5206\u91cf\u7f29\u6210\u4e00\u70b9\u540e\uff0c\u56fe\u53d8\u6210\u4e86\u6811\u3002\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u4f1a\u53c2\u609f\u5230\uff0c\u6211\u4eec\u7684\u52a0\u8fb9\u5b9e\u5219\u662f\u8981\u628a\u8fd9\u6574\u68f5\u6811\u8fb9\u53d8\u6210\u4e00\u4e2a\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u3002\n\n\u6211\u4eec\u8981\u627e\u7684\u662f\u652f\u79bb\u7834\u788e\u7684\u70b9\uff0c\u652f\u79bb\u7834\u788e\u662f\u5220\u5b8c\u6865\u4e4b\u540e\u7684\u4e8b\u60c5\u4e86\u3002\u62c6\u6865\u4e4b\u524d\uff0c\u8fd9\u79cd\u70b9\u4ec5\u4ec5\u4f9d\u9760\u4e00\u5ea7\u53ef\u601c\u7684\u6865\u4e0e\u5176\u4ed6\u90e8\u5206\u4fdd\u6301\u8054\u7cfb\u3002\n\n\u8fd9\u6837\u53ef\u601c\u7684\u60c5\u51b5\u4f53\u73b0\u5728\u7f29\u70b9\u540e\u7684\u6811\u4e0a\uff0c\u5c31\u662f**\u4ece\u4e00\u4e2a\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u4e00\u4e2a\u652f\u79bb\u7834\u788e\u7684\u70b9\u88ab\u8dd1\u5230\u7684\u6b21\u6570\u53ea\u6709\u4e00\u6b21**\u3002\n\n\u90a3\u6211\u4eec\u5c31\u5728\u8dd1\u6811\u4e0a\u904d\u5386\u7684\u65f6\u5019\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u7684\u5165\u5ea6 $in$ \u3002**\u5165\u5ea6\u4e3a1**\u7684\u70b9\u5c31\u662f\u652f\u79bb\u7834\u788e\u70b9\u3002\n\n\u73b0\u5728\u8981\u52a0\u8fb9\u8fde\u63a5\u8fd9\u4e9b\u652f\u79bb\u7834\u788e\u70b9\u4e86\u3002\u8fd9\u91cc\u6211\u4eec\u6253\u7b97 $O(1)$ \u5f97\u51fa\u3002\u53ef\u4ee5\u60f3\u51fa\uff0c\u6bcf\u6b21\u6211\u4eec\u7684\u52a0\u8fb9\u884c\u4e3a\u90fd\u5f97\u8fde\u63a5\u4e24\u4e2a\u7834\u788e\u70b9\u3002\n\n \u5982\u679c\u6709\u4e24\u4e2a\u7834\u788e\u70b9\uff0c\u52a0\u4e00\u6761\u8fb9\u8fde\u63a5\u4ed6\u4eec\uff0c\u8fd9\u4e24\u4e2a\u70b9\u5c31\u4e0d\u518d\u4ec5\u6709\u4e00\u5ea7\u6865\u4e0e\u5916\u754c\u8054\u901a\u4e86\u3002\n\n\u90a3\u5982\u679c\u6709\u4e09\u4e2a\u5462\uff0c\u6700\u6700\u7b80\u5355\u7684\u56fe\u5c31\u662f\u4e00\u4e2a\u6839\u4e0b\u9762\u4ee8\u513f\u5b50\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u8fde\u4e24\u6761\u8fb9\u5373\u53ef\u52a0\u56fa\u6240\u6709\u7684\u7834\u788e\u70b9\u3002\uff08\u4e0d\u59a8YY\u4e00\u6ce2\uff09\n\n\u4ee5\u4e09\u4e2a\u70b9**\u5448\u4e09\u89d2\u5f62\u4e92\u76f8\u8fde\u8fb9**\uff08~~\u7a33\u5b9a\u7684\u4e09\u89d2\u5173\u7cfb~~ $\\bigtriangleup$ \uff09\u5e94\u8be5\u662f\u6700\u6700\u7b80\u5355\u7684\u8fb9\u53cc\u8054\u901a\u5206\u91cf\u5355\u4f4d\u3002\n\n\u800c\u6bcf\u4e24\u4e2a\u7834\u788e\u70b9\u5728\u6811\u4e0a\u4e0e\u4ed6\u4eec\u7684\u516c\u5171\u7956\u5148\u7684\u5173\u7cfb\u4e00\u5b9a\u662f\u5448\u5927\u5c0f\u4e0d\u5b9a\u7684 $\\bigwedge$ \u5b57\u5f62\u72b6\uff0c\u8981\u5f62\u6210\u4e09\u89d2\u5173\u7cfb\u53ea\u9700\u8981**\u518d\u52a0\u4e00\u7b14**\u3002\u5373**\u4e00\u7b14\u81f3\u591a\u52a0\u56fa\u4e24\u4e2a\u7834\u788e\u70b9**\u3002\n\n- \u6240\u4ee5\u7834\u788e\u70b9\u4e3a\u5076\u6570\u4e2a\u65f6\uff0c\u52a0\u8fb9\u6570\u4e3a $\\dfrac{N}{2}$ \u3002\n\n- \u800c\u5947\u6570\u4e2a\u65f6\uff0c\u603b\u662f\u4f1a\u5269\u4e00\u4e2a\u4e0d\u80fd\u7ec4\u6210\u4e09\u89d2\u5173\u7cfb\uff0c\u90a3\u5c31\u9700\u8981\u591a\u52a0\u4e00\u6761\u8fb9\uff0c\u8ba9\u5269\u4e0b\u7684\u8fd9\u4e2a\u70b9\u968f\u4fbf\u548c\u4e00\u4e2a\u4e09\u89d2\u5173\u7cfb\u8fde\u63a5\uff0c\u52a0\u8fb9\u6570\u4e3a $\\dfrac{N}{2}+1$ \u3002\n\n\u8fd9\u4e24\u4e2a\u5f0f\u5b50\u6211\u4eec\u53c8\u53ef\u4ee5\u5408\u4e8c\u4e3a\u4e00\uff0c\u5373\u52a0\u8fb9\u6570 $\\left\\lfloor\\dfrac{(N+1)}{2}\\right\\rfloor$ \u3002\n\n\u81f3\u6b64\u6211\u4eec\u6709\u4e86\u6b63\u89e3\u3002\n\n~~\u65e0\u975e\u65e0\u5411\u56fe\u7f29\u70b9\u677f\u5b50~~\u3002\uff08\u9996\u5c3e\u547c\u5e94\uff09\n\n\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n```cpp\n#include <iostream>\n#include <stack>\nusing namespace std;\nconst int MAX = 2e4 + 7;\nint N, M;\n\n/*\u524d\u5411\u661f\u7ec4\u4ef6*/\nstruct edge\n{\n     int to;\n     int next;\n} e[MAX << 2];\nint head[MAX], eid = 0;\nvoid adde(int x, int y)\n{\n     e[++eid].to = y;\n     e[eid].next = head[x];\n     head[x] = eid;\n}\n\n/*Tarjan\u7f29\u70b9\u7ec4\u4ef6\uff08\u8d3a\u677f\u5b50\u5c31\u5b8c\u4e8b\uff09*/\nint low[MAX], dfn[MAX], t = 0, cnt = 0, id[MAX], in[MAX];\nstack<int> st;\nvoid tarjan(int u, int lst_e)\n{\n\t\n     low[u] = dfn[u] = ++t;\n     st.push(u);\n     //tarjan\u7279\u8272\n     for (int i = head[u]; i; i = e[i].next)\n     {\n          int v = e[i].to;\n          if (!dfn[v])\n          {\n               tarjan(v, i);\n               low[u] = min(low[u], low[v]);//\u66f4\u65b0\n          }\n          else if (i != (lst_e ^ 1))\n          //\u8fd9\u91cc\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u8f93\u5165\u4e00\u6761\u65e0\u5411\u8fb9\u6211\u4eec\u4f1a\u5b58\u5165\u4e24\u6761\u6709\u5411\u8fb9\n          //\u4f46\u8fd9\u6837\u4f1a\u5728tarjan\u65f6\u5bfc\u81f4\u4e8c\u4eba\u8f6c\uff08\u96fe\n          //\u6545\u8fd8\u8981\u5224\u8fd9\u662f\u4e0d\u662f\u4e0a\u4e00\u6761\u8fb9\u7684\u53cd\u8fb9\n          //\u7528\u5f02\u6216\u8868\u793a\u53cd\u8fb9\u7684\u9a9a\u64cd\u4f5c\u5c5e\u5b9e\u79c0\n          //\u4f46\u6ce8\u610f\u8fb9\u7684id\u8981\u4ece1\u5f00\u59cb\u8ba1\u6570\n          //\u5426\u5219\u5c31\u7528\u4e0d\u4e86\u9a9a\u64cd\u4f5c\n          {\n               low[u] = min(low[u], dfn[v]);//\u66f4\u65b0\n          }\n     }\n     if (low[u] == dfn[u])//\u82e5\u8fd9\u4e00\u8054\u901a\u5757\u7ed3\u675f\u4e86\n     {\n          int k;\n          ++cnt;\n          while (k != u)\n          {\n               k = st.top();\n               st.pop();\n               id[k] = cnt;//\u67d3\u8272\n          }\n     }\n}\nint main()\n{\n     cin >> N >> M;\n     eid = 1;\n     //\u8c28\u8bb0\uff01\uff01\uff01\uff01\uff01\n     for (int i = 1; i <= M; i++)\n     {\n          int fr, to;\n          cin >> fr >> to;\n          adde(fr, to);\n          adde(to, fr);\n     }\n     for (int i = 1; i <= N; i++)\n     {\n          if (!dfn[i])\n          {\n               tarjan(i, -1);//Tarjan\u57fa\u64cd\n          }\n     }\n     for (int u = 1; u <= N; u++)\n     {\n          for (int i = head[u]; i; i = e[i].next)\n          {\n               int v = e[i].to;//\u524d\u5411\u661f\u904d\u5386\n               \n               if (id[u] == id[v])\n                    continue;\n                    //\u8fd9\u91cc\u5c31\u770b\u51fa\u7f29\u70b9\u7684\u610f\u5473\u4e86\n                    //\u540c\u4e00\u8054\u901a\u5757\u7684\u5728\u8fd9\u91cc\u9ed8\u8ba4\u7f29\u6210\u4e00\u70b9\n                    //\u4e0d\u4f1a\u904d\u5386\u8fc7\u53bb\n                    \n               in[id[v]]++;//\u8bb0\u5f55\u5165\u5ea6\n          }\n     }\n     int res = 0;\n     for (int i = 1; i <= cnt; i++)\n     {\n          if (in[i] == 1)\n          {\n               res++;//\u7edf\u8ba1\u7834\u788e\u70b9\n          }\n     }\n     cout << (res + 1) / 2 << endl;//\u51fa\u89e3\n}\n```\n\n\u90a3\u4f4d\u5927\u4f6c\u8bf4\u7684\u6ca1\u9519\uff0c\u65e0\u975e\u4e00\u9053\u677f\u5b50\u9898\uff08~~\u518d \u653e \u9001~~\uff09\u3002",
        "postTime": 1597890177,
        "uid": 150879,
        "name": "quest_2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2860 \u3010[USACO06JAN]Redundant Paths G\u3011"
    },
    {
        "content": "[\u6233\u6211\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8cqwq](https://www.goldenpotato.cn/%E5%9B%BE%E8%AE%BA/usaco06jan%E5%86%97%E4%BD%99%E8%B7%AF%E5%BE%84redundant-paths/)\n\n---\n# Solution\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u9898\u76ee\u8981\u6c42\u6bcf\u4e00\u4e2a\u70b9\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u8def\u5f84\u4e0d\u53ea\u6709\u4e00\u6761\uff0c**\u8fd9\u672c\u8d28\u4e0a\u5c31\u662f\u8981\u6211\u4eec\u628a\u8fd9\u4e2a\u56fe\u6240\u6709\u7684\u6865\u90fd\u6d88\u9664\u6389\u3002**  \n\n\u8981\u6d88\u9664\u6389\u6865\uff0c\u9996\u5148\u5fc5\u987b\u8981\u628a\u8fb9\u53cc\u5148\u7f29\u8d77\u6765\u3002\u7f29\u8fb9\u53cc\u5f88\u7b80\u5355\uff1a**\u548c\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u4e00\u6a21\u4e00\u6837\uff0c\u552f\u4e00\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u8981\u591a\u8bb0\u5f55\u4e00\u4e2a$fa$\uff0c\u9632\u6b62\u6211\u4eec\u6c42$low$\u7684\u65f6\u5019\u76f4\u63a5\u628a$fa$\u7b97\u8fdb\u6765\u3002**  \n\u6c42\u5b8c\u8fb9\u53cc\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u539f\u56fe\u53d8\u6210\u4e00\u4e2a\u6811\u7684\u5f62\u5f0f\u3002\u60f3\u8c61\u4e00\u4e0b\uff1a\u6211\u4eec\u8981\u628a\u8fd9\u4e2a\u6811\u4e0a\u6240\u6709\u7684\u5355\u8fb9\u53bb\u6389\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u53f6\u5b50\u8282\u70b9\u4e24\u4e24\u8fde\u8d77\u6765\u5373\u53ef\u3002**\uff08\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u53f6\u5b50\u8282\u70b9\u662f\u5e7f\u4e49\u7684\uff08\u5373\u6839\u4e5f\u6709\u53ef\u80fd\u662f\u53f6\u5b50\u8282\u70b9\uff09\uff09**  \n\u8fd8\u6709\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff1a\u5bf9\u4e8e\u76f4\u63a5\u5c31\u662f\u4e00\u4e2a\u73af\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u8981\u7279\u5224\u4e00\u4e0b\uff0c\u76f4\u63a5\u8f93\u51fa0\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n)$  \n\u5c31\u9171\uff0c\u8fd9\u9898\u5c31\u88ab\u6211\u4eec\u5207\u6389\u5566\ufe3f(\uffe3\ufe36\uffe3)\ufe3f\n\n---\n# Code\n```cpp\n//Luogu P2860 [USACO06JAN]\u5197\u4f59\u8def\u5f84Redundant Paths\n//Apr,8th,2019\n//\u8fb9\u53cc\n#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\nlong long read()\n{\n\tlong long x=0,f=1; char c=getchar();\n\twhile(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n\twhile(isdigit(c)){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int N=5000+100;\nvector <int> e[N],e2[N];\nint n,m;\nint dfn[N],low[N],dfn_to,InStack[N],mstack[N],top,belong[N],cnt;\nbool vis[N];\nvoid Tarjan(int now,int father)\n{\n\tvis[now]=InStack[now]=true;\n\tdfn[now]=low[now]=++dfn_to;\n\tmstack[++top]=now;\n\tfor(int i=0;i<int(e[now].size());i++)\n\t\tif(vis[e[now][i]]==false)\n\t\t{\n\t\t\tTarjan(e[now][i],now);\n\t\t\tlow[now]=min(low[now],low[e[now][i]]);\n\t\t}\n\t\telse if(e[now][i]!=father and InStack[e[now][i]]==true)\n\t\t\tlow[now]=min(low[now],dfn[e[now][i]]);\n\tif(low[now]==dfn[now])\n\t{\n\t\tcnt++;\n\t\twhile(mstack[top+1]!=now)\n\t\t\tInStack[mstack[top]]=false,\n\t\t\tbelong[mstack[top--]]=cnt;\n\t}\n}\nint GetAns(int now,int father)\n{\n\tint ans=0;\n\tfor(int i=0;i<int(e2[now].size());i++)\n\t\tif(e2[now][i]!=father)\n\t\t\tans+=GetAns(e2[now][i],now);\n\treturn max(1,ans);\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++)\n\t\te[i].reserve(4);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint s=read(),t=read();\n\t\te[s].push_back(t);\n\t\te[t].push_back(s);\n\t}\n\t\n\tTarjan(1,0);\n\t\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=0;j<int(e[i].size());j++)\n\t\t\tif(belong[i]!=belong[e[i][j]])\n\t\t\t\te2[belong[i]].push_back(belong[e[i][j]]);\n\tint ans=GetAns(belong[1],belong[1])+(e2[belong[1]].size()==1);\n\tif(cnt==1)//\u7279\u5224\u53ea\u6709\u4e00\u4e2a\u73af\n\t\tans=0;\n\tprintf(\"%d\",ans/2+ans%2);\n\treturn 0;\n}\n\n```\n\n\n\n\n",
        "postTime": 1554735814,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2860 \u3010[USACO06JAN]\u5197\u4f59\u8def\u5f84Redundant Paths\u3011"
    },
    {
        "content": "\u5272\u8fb9\u7ecf\u5178\u9898\uff0c\u600e\u4e48\u53ef\u4ee5\u6ca1\u6709 vector \u9898\u89e3\uff1f\n\n\u7b80\u5316\u9898\u610f\uff1a\u5728\u4e00\u4e2a\u65e0\u5411\u56fe\u4e0a\u6700\u5c11\u589e\u52a0\u51e0\u6761\u8fb9\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u70b9\u4e4b\u95f4\u90fd\u6709\u4e24\u79cd\u8def\u5f84\u3002\n\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u8fd9\u4e2a\u6700\u7ec8\u7684\u76ee\u6807\u56fe\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u4e00\u5b9a\u662f\u8fb9\u53cc\u8054\u901a\u56fe\u3002\uff08 \u53bb\u6389\u4efb\u4f55\u4e00\u904d\u8fd8\u662f\u8054\u901a\u7684\uff0c\u81ea\u7136\u5c31\u4f1a\u6709\u4e00\u6761\u8def\u5f84 \uff09\n\n\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u5b9a\u7406\uff1a\u7edf\u8ba1\u51fa\u6811\u4e2d\u5ea6\u4e3a $1$ \u7684\u7ed3\u70b9\u7684\u4e2a\u6570\uff0c\u5373\u53f6\u7ed3\u70b9\u7684\u4e2a\u6570\uff0c\u8bb0\u4e3a leaf \uff0c\u5219\u81f3\u5c11\u5728\u6811\u4e0a\u6dfb\u52a0 ( leaf+1 ) / 2  \u6761\u8fb9\uff0c\u5c31\u80fd\u4f7f\u6811\u8fbe\u5230\u8fb9\u53cc\u8054\u901a\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u539f\u56fe\u8fdb\u884c tarjan \u7f29\u70b9\uff08 \u5206\u522b\u628a\u6240\u6709\u53cc\u8054\u901a\u5206\u91cf\u7f29\u6210\u4e00\u4e2a\u70b9 \uff09\u3002\u7136\u540e\u91cd\u65b0\u5efa\u56fe\uff0c\u6c42\u5ea6\u4e3a $1$ \u7684\u70b9\u7684\u4e2a\u6570\uff0c\u5373\u53ef\u3002( \u5ea6\u5305\u62ec\u5165\u5ea6\u548c\u51fa\u5ea6 )\n\n$Tips:$ \u8fd9\u91cc\u4e3b\u8981\u662f\u60f3\u4f53\u73b0 vector \u5b9e\u73b0\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node{\n\tint to,num,op;\n};\nint n,m;\nstack<int> d;\nvector<node> p[100010];\nint dfn[100010],low[100010];\nint vis[100010],s[100010];\nbool st[100010];\nint t,num,cnt,ans;\nvoid add(int u,int v)\n{\n\tnode t,T;\n\tcnt++;\n\tt.to=v;\n\tt.num=cnt;\n\tt.op=cnt+1;\n\tp[u].push_back(t); \n\tcnt++;\n    \n\tT.to=u;\n\tT.num=t.op;\n\tT.op=t.num;//\u5efa\u53cd\u8fb9\uff0cnum\u548cop\u4e3b\u8981\u7528\u4e8e\u5224\u5b9a\u662f\u5426\u904d\u5386\u8fc7\n\tp[v].push_back(t); \n}\nvoid tarjan(int u)\n{\n\tint v,i;\n\tnum++;\n\tlow[u]=num;\n\tdfn[u]=num;\n\td.push(u);\n\tfor(i=0;i<p[u].size();i++)\n\t{\n\t\tif(!st[p[u][i].op])\n\t\t{\n\t\t\tst[p[u][i].num]=1;\n\t\t\tv=p[u][i].to;\n\t\t\tif(!dfn[v])\n\t\t\t{\n\t\t\t\ttarjan(v);\n\t\t\t\tlow[u]=min(low[u],low[v]);\n\t\t\t}\n\t\t\telse low[u]=min(low[u],dfn[v]);\n\t\t}\n\t\telse st[p[u][i].num]=1;\n\t}\n\tif(dfn[u]==low[u])\n\t{\n\t\tvis[u]=++t;\n\t\twhile(u!=d.top())\n\t\t{\n\t\t\tvis[d.top()]=t;\n\t\t\td.pop();\n\t\t}\n\t\td.pop();\n\t}\n}\nint main()\n{\n\tint a,b;\n\tint i,j;\n\tcin>>n>>m;\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tcin>>a[i]>>b[i];\n\t\tadd(a[i],b[i]);\n\t}\n\ttarjan(1);\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tfor(j=0;j<p[i].size();j++)\n\t\t{\n\t\t\tif(st[p[i][j].op])//\u56e0\u4e3a\u5982\u679c\u8be5\u8fb9\u904d\u5386\u8fc7\uff0c\u90a3\u4e48\u6807\u8bb0\u7684\u662fnum\u3002\u800c\u53cd\u8fb9\u7684op\u5c31\u662f\u6b63\u8fb9\u7684num\n\t\t\t{\n\t\t\t\tst[p[i][j].num]=0;\n\t\t\t\tif(vis[i]!=vis[p[i][j].to])\n\t\t\t\t{\n\t\t\t\t\ts[vis[i]]++;\n\t\t\t\t\ts[vis[p[i][j].to]]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=1;i<=t;i++)\n\tif(s[i]==1)\n\tans++;\n\tcout<<(ans+1)/2;\n\treturn 0;\n}\n```\n\n\u65f6\u95f4\u590d\u6742\u5ea6$:O(n+m)$ \u7a33\u8fc7\u300282ms \u800c\u4e14\uff0cvector \u4e00\u70b9\u4e5f\u4e0d\u6162.....\u5f53\u7136\u4ee5\u540e\u7684\u9898\u76ee\u6211\u5c31\u4e0d\u4fdd\u8bc1\u4e86\uff0c\u81f3\u5c11\u76ee\u524d\u4e3a\u6b62\u6ca1\u5361\u8fc7 \n",
        "postTime": 1601026717,
        "uid": 225100,
        "name": "ice_in_sky",
        "ccfLevel": 0,
        "title": "P2860 [USACO06JAN]Redundant Paths G"
    },
    {
        "content": "# P2860\u9898\u89e3\n\u9898\u76ee\u7406\u89e3\uff1a\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e24\u6761\u4e0d\u91cd\u5408\u7684\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u628a\u539f\u56fe\u901a\u8fc7\u52a0\u8fb9\u53d8\u6210\u4e00\u4e2a\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u3002\n\n### \u90a3\u4e48\u600e\u4e48\u505a\u5462\uff1f\n\n1. \u4ee5\u6837\u4f8b\u4e3a\u4f8b\u5b50\uff0c\u6211\u4eec\u5148\u6c42\u51fa\u539f\u56fe\u7684\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u7136\u540e\u7f29\u70b9\u3002\n1. \u4e3a\u4e86\u4f7f\u7f29\u70b9\u540e\u7684\u56fe\u8fb9\u53cc\u8fde\u901a\uff0c\u6211\u4eec\u9700\u8981\u628a\u5ea6\u6570\u4e3a1\u7684\u70b9\uff0c\u901a\u8fc7\u52a0\u8fb9\u589e\u52a0\u5ea6\u6570\u3002\n1. \u5c06\u6bcf\u4e24\u4e2a\u7f29\u4e86\u4e4b\u540e\u7684\u5ea6\u6570\u4e3a\u4e00\u7684\u70b9\u914d\u5bf9\uff0c\u4e5f\u5c31\u662f\u8f93\u51fa\u5ea6\u6570\u4e3a\u4e00\u7684\u70b9\u7684\u4e2a\u6570\u52a0\u4e00\u9664\u4ee5\u4e8c\n\n### \u90a3\u4e48\u5982\u4f55\u6c42\u8fb9\u53cc\u8054\u901a\u5206\u91cf\uff1f\n\n\u76f4\u63a5\u7528tarjan\u628a\u56fe\u4e2d\u6240\u6709\u7684\u6865\u5220\u6389\u5c31\u53ef\u4ee5\u4e86\n#### \u5229\u7528tarjan\u5220\u6865\u7684\u4ee3\u7801\n```\n\nvoid tarjan(int u,int last){\n\tlow[u]=dfn[u]=++tot;\n\tfor(int i=head[u];i;i=edge[i].next){\n\t\tif(!dfn[edge[i].to]){\n\t\t\ttarjan(edge[i].to,i);\n\t\t\tif(low[edge[i].to]>dfn[u]){\n\t\t\t\tbridge[i]=bridge[i^1]=1;//\u6807\u8bb0\u6865\n\t\t\t}\n\t\t\telse low[u]=min(low[u],low[edge[i].to]);\n\t\t}\n\t\telse\n\t\t\tif(i!=last&&(i^1)!=last)low[u]=min(low[u],dfn[edge[i].to]);\n\t}\n}\n```\n\u53cb\u60c5\u63d0\u793a\uff0c\u56e0\u4e3a\u8981\u4f7f\u7528\u5f02\u6216\u7b26\u53f7\u5224\u65ad\u662f\u5426\u91cd\u8fb9\uff0c\u6240\u4ee5\u5728\u7528\u524d\u5411\u661f\u5b58\u8fb9\u65f6\u5e94\u4ece2\u53f7\u5f00\u59cb\u5b58\n\n### \u90a3\u4e48\u5982\u4f55\u7f29\u70b9\uff1f\n1. \u4ece\u4e00\u53f7\u8282\u70b9\u5f00\u59cb\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u6ca1\u6709\u88ab\u4f7f\u7528\u8fc7\uff0c\u5c31\u7528\u5b83\u8fdb\u884c\u5e7f\u641c\u3002\u6269\u5c55\u70b9\u7684\u6761\u4ef6\u4e3a\u7528\u4e8e\u6269\u5c55\u7684\u8fb9\u4e0d\u4e3a\u6865\u4e14\u70b9\u6ca1\u6709\u5230\u8fc7\u3002\n1. \u5982\u679c\u641c\u5230\u7684\u70b9\u88ab\u5230\u8fc7\uff0c\u4e14\u8fb9\u4e3a\u6865\uff0c\u8bf4\u660e\u6b64\u70b9\u4e0e\u6b63\u5728\u6269\u5c55\u7684\u70b9\u4e0d\u5728\u4e00\u4e2a\u8fb9\u53cc\u8054\u901a\u5206\u91cf\u91cc\u9762\uff0c\u4e24\u4e2a\u5206\u91cf\u7684\u5ea6\u90fd\u8981++\n\n#### \u7f29\u70b9\u4ee3\u7801\n```\n\tfor(int i=1;i<=n;i++){\n\t\tif(vis[i])continue;\n\t\tvis[i]=1;\n\t\tsc++;\n\t\tq.push(i);\n\t\twhile(!q.empty()){\n\t\t\tint u=q.front();\n\t\t\tco[u]=sc;\n\t\t\tq.pop();\n\t\t\tfor(int j=head[u];j;j=edge[j].next){\n\t\t\t\tint v=edge[j].to;\n\t\t\t\tif(!vis[v]&&!bridge[j]){\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t}\n\t\t\t\tif(vis[v]&&bridge[j]){\n\t\t\t\t\tdu[co[u]]++;\n\t\t\t\t\tdu[co[v]]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n\u7136\u540e\u5c31\u53ef\u4ee5AC\u4e86\n#### \u5b8c\u6574\u4ee3\u7801\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1000005;\nint en=1,n,m,low[N],dfn[N],x,y,tot,ans,co[N];\nbool bridge[N],vis[N];\nstruct Edge{\n\tint next,to;\n}edge[N];\nint head[N],sc,du[N];\nvoid add(int a,int b){\n\tedge[en+1].next=head[a];\n\thead[a]=++en;\n\tedge[en].to=b;\n\treturn;\n}\nvoid tarjan(int u,int last){\n\tlow[u]=dfn[u]=++tot;\n\tfor(int i=head[u];i;i=edge[i].next){\n\t\tif(!dfn[edge[i].to]){\n\t\t\ttarjan(edge[i].to,i);\n\t\t\tif(low[edge[i].to]>dfn[u]){\n\t\t\t\tbridge[i]=bridge[i^1]=1;\n\t\t\t}\n\t\t\telse low[u]=min(low[u],low[edge[i].to]);\n\t\t}\n\t\telse\n\t\t\tif(i!=last&&(i^1)!=last)low[u]=min(low[u],dfn[edge[i].to]);\n\t}\n}\nqueue<int> q;\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>x>>y;\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(!dfn[i]){\n\t\t\ttarjan(i,0);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(vis[i])continue;\n\t\tvis[i]=1;\n\t\tsc++;\n\t\tq.push(i);\n\t\twhile(!q.empty()){\n\t\t\tint u=q.front();\n\t\t\tco[u]=sc;\n\t\t\tq.pop();\n\t\t\tfor(int j=head[u];j;j=edge[j].next){\n\t\t\t\tint v=edge[j].to;\n\t\t\t\tif(!vis[v]&&!bridge[j]){\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t}\n\t\t\t\tif(vis[v]&&bridge[j]){\n\t\t\t\t\tdu[co[u]]++;\n\t\t\t\t\tdu[co[v]]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=sc;i++)\n\t\tif(du[i]==1)ans++;\n\tcout<<(ans+1)/2;\n\treturn 0;\n}\n```\n",
        "postTime": 1591017178,
        "uid": 181521,
        "name": "\u73c8\u4e50\u552f\u6bd2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2860 \u3010[USACO06JAN]Redundant Paths G\u3011"
    },
    {
        "content": "\u4e00\u53e5\u8bdd\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u6c42\u81f3\u5c11\u52a0\u51e0\u6761\u8fb9\u80fd\u4f7f\u5176\u53d8\u4e3a\u4e00\u4e2a\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u3002\n\n\u601d\u8def\uff1a\u627e\u8fb9\u53cc\uff0c\u7f29\u70b9\uff0c\u6c42\u53f6\u8282\u70b9\u4e2a\u6570\uff0c\u52a0\u4e00\uff0c\u9664\u4ee5\u4e8c\u3002\n\n\u7136\u800c\u627e\u8fb9\u53cc\u53ef\u80fd\u4f1a\u840e\u3002\n\n\u6c42\u8fb9\u53cc\u901a\u5e38\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\u8bb0\u4f4f\u524d\u9a71\u8282\u70b9\uff0c\u6216\u662f\u8bb0\u4f4f\u524d\u9a71\u8fb9\u3002\n\n\u7136\u800c\u7531\u4e8e\u6b64\u9898\u6709\u91cd\u8fb9\uff0c\u8bb0\u70b9\u4f1aWA on #9...\n\n\u4f46\u6211\u4eec\u8fd8\u662f\u6709\u529e\u6cd5\u3002\n\n~~\u672c\u7740\u8001\u6b7b\u4e0d\u91cd\u6784\u4ee3\u7801\u7684\u601d\u60f3\uff0c~~ \u6211\u4eec\u8bbe\u6cd5\u4f7f\u8bb0\u70b9\u548c\u8bb0\u8fb9\u53d8\u5f97\u7b49\u6548\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a$vis$\u6570\u7ec4\uff0c\u5224\u65ad\u6b64\u6761\u8fb9\u662f\u5426\u88ab\u52a0\u8fc7\u3002\n\n\u5982\u679c\u6ca1\u6709\u5c31\u76f4\u63a5\u52a0\u3002\u5982\u679c\u52a0\u8fc7\u4e86...\n\n\u65b0\u5f00\u4e00\u4e2a\u8282\u70b9\uff0c\u628a\u8fd9\u4e2a\u8282\u70b9\u63a5\u5230\u8fb9\u7684\u8d77\u70b9\u4e0e\u7ec8\u70b9\u4e4b\u95f4\u3002\n\n\u4e8e\u662f\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u90fd\u6709\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u524d\u9a71\u8282\u70b9...\n\n\u4e8e\u662f\u91cd\u8fb9\u4ec0\u4e48\u7684\u5c31\u4e0d\u7528\u5728\u610f\u4e86\u3002\n\n\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<stack>\n\nconst int N=300005,M=600005;\n\nint n,m,head[N],dis[N],from[N];\nint cnt,cir_cnt,dfn[N],low[N],cir[N];\nint _head[N],_dis[N];\n\nstruct Edge\n{\n    int from,next,to;\n};\nEdge E[M],_E[M];\n\nint new_node=300005;//\u4e3a\u4e86\u9632\u6b62\u5f71\u54cd\u5176\u4ed6\u8282\u70b9\uff0c\u65b0\u8282\u70b9\u4ece\u540e\u5f80\u524d\u4f9d\u6b21\u7533\u8bf7\n\nbool vis[5005][5005];\n\nvoid add(int u,int v)\n{\n    static int tot=0;\n    E[++tot].next=head[u];\n    E[tot].to=v;\n    head[u]=tot;\n}\nvoid _add(int u,int v)\n{\n    static int tot=0;\n    _E[++tot].next=_head[u];\n    _E[tot].from=u;\n    _E[tot].to=v;\n    _head[u]=tot;\n}\n\nvoid tarjan(int u,int fa)\n{\n    static std::stack<int> s;\n    low[u]=dfn[u]=++cnt;\n    s.push(u);\n    for(int i=head[u];i;i=E[i].next)\n    {\n    \tint v=E[i].to;\n        if(v==fa)continue;\n        if(!dfn[v])\n        {\n            tarjan(v,u);\n            low[u]=std::min(low[u],low[v]);\n        }\n        else\n        {\n            if(cir[v]==0)low[u]=std::min(low[u],dfn[v]);\n        }\n    }\n    if(low[u]!=dfn[u])return;\n    cir_cnt++;\n    while(1)\n    {\n        int x=s.top();\n        s.pop();\n        cir[x]=cir_cnt;\n        if (x==u)break;\n    }\n}\n\nint deg[N];\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=0;i<m;++i)\n    {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        if(vis[u][v])\n        {\n            --new_node;//\u5173\u952e\u64cd\u4f5c\n            add(u,new_node);\n            add(new_node,u);\n            add(v,new_node);\n            add(new_node,v);\n        }\n        else\n        {\n            vis[u][v]=1;\n            add(u,v);\n            add(v,u);\n        }\n    }\n    tarjan(1,0);\n    if(cir_cnt==1)\n    {\n        puts(\"0\");\n        return 0;\n    }\n    for(int u=1;u<=n;++u)\n    {\n        for(int i=head[u];i;i=E[i].next)\n        {\n            int v=E[i].to;\n            if(cir[u]!=cir[v])\n            {\n                _add(cir[u],cir[v]);\n                ++deg[cir[u]];\n                ++deg[cir[v]];\n            }\n        }\n    }\n    int res=0;\n    for(int i=1;i<=n;++i)if(deg[i]==2)++res;\n    printf(\"%d\",(res+1)/2);\n}\n```\n\n\n\n",
        "postTime": 1561634169,
        "uid": 60489,
        "name": "\u5c0f\u83dc\u9e1f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2860 \u3010[USACO06JAN]\u5197\u4f59\u8def\u5f84Redundant Paths\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u9898\u76ee\u7684\u610f\u601d\u5e94\u8be5\u5f88\u6e05\u695a\u8fb9\u4e0d\u91cd\u590d\u7684\u8def\u5f84\u3002\u8fd9\u4e0d\u5c31\u662f\u8fb9-\u53cc\u8054\u901a\u5206\u91cf\u561b\u3002\n\u5148\u6765\u590d\u4e60\uff08\u9884\u4e60\uff09\u51e0\u4e2a\u6982\u5ff5\uff1a\n\u5f3a\u8fde\u901a\uff1a\u5bf9\u4e8e\u6709\u5411\u56feG\u4e2d\u4e24\u4e2a\u70b9a\u548cb\uff0c\u5982\u679c\u5b58\u5728\u4e00\u6761\u8def\u5f84a->b\uff0c\u90a3\u4e48\u6211\u4eec\u6210a\u548cb\u5f3a\u8fde\u901a\u3002\n\n------------\n\n\u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5411\u56fe\u7684\u6781\u5927\u5b50\u56feG',\u5bf9\u4e8eG'\u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u70b9a,b\u3002\u5982\u679ca\u548cb\u5f3a\u8fde\u901a\uff0cb\u548ca\u5f3a\u8fde\u901a\u3002\u90a3\u4e48\u8fd9\u4e2a\u6781\u5927\u5b50\u56fe\u5c31\u662f\u539f\u56fe\u7684\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\u8fd9\u91cc\u9762\u8981\u7b80\u5355\u8bf4\u5c31\u662f\uff1a\u4efb\u610f\u4e24\u4e2a\u70b9\u8981\u76f8\u4e92\u5230\u8fbe\uff0c\u4e0d\u80fd\u8bf4\u4ecea\u80fd\u5230b\uff0c\u4f46\u662f\u4eceb\u5230\u4e0d\u4e86a\u3002\n\u8fd9\u5c31\u4e0d\u662f\u5f3a\u8fde\u901a\u5206\u91cf\u4e86\u3002\n\n------------\n\n\u53cc\u8054\u901a\uff08\u70b9\u53cc\u8054\u901a\uff09\uff1a\u4e00\u822c\u6ca1\u6709\u7279\u522b\u6ce8\u91ca\u7684\u53cc\u8054\u901a\u90fd\u662f\u70b9\u53cc\u8054\u901a\u3002\u5728\u4e00\u4e2a\u56fe\u4e2d\u5bf9\u4e8e\u4efb\u610f\u7684a\u548cb\u5982\u679ca\u5230b\u6709\u81f3\u5c11\u4e24\u6761\u8def\u5f84\uff0c\u5e76\u4e14\u8def\u5f84\u4e0a\u7684\u70b9\u6ca1\u6709\u4e00\u4e2a\u91cd\u590d\uff08\u76f8\u540c\uff09\uff0c\u6211\u4eec\u79f0\u4e3a\u70b9\u53cc\u8054\u901a\uff0c\u6216\u8005\u8bf4\u5bf9\u4e8e\u4e00\u4e2a\u56fe\uff0c\u5982\u679c\u8fd9\u4e2a\u56fe\u6ca1\u6709\u5272\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u5c31\u662f\u53cc\u8054\u901a\uff08\u70b9\u53cc\u8054\u901a\uff09\u3002\n\n------------\n\n\u8fb9\u53cc\u8054\u901a\uff1a\u8fb9\u53cc\u8054\u901a\u6307\u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u5982\u679ca\u5230b\u5b58\u5728\u81f3\u5c11\u4e24\u6761\u8def\u5f84\uff0c\u5e76\u4e14\u8fd9\u4e24\u6761\u8def\u5f84\u4e0a\u6ca1\u6709\u4e00\u6761\u662f\u91cd\u5408\u7684\uff08\u4e00\u6837\u7684\uff09\u3002\u90a3\u4e48\u5c31\u662f\u8fb9\u53cc\u8054\u901a\u5206\u91cf\uff0c\u6216\u8005\u8bf4\u8fd9\u4e2a\u56fe\u6ca1\u6709\u5272\u8fb9\uff0c\u4ed6\u5c31\u662f\u8fb9\u53cc\u8054\u901a\u5206\u91cf\u3002\n\n------------\n\u601d\u8def\uff1a\u5148\u627e\u51fa\u6865\uff0c\u53bb\u6389\u6865\u4ee5\u540e\uff0c\u5404\u4e2a\u8fde\u901a\u5757\u5c31\u662f\u4e00\u4e2a\u8fb9\u53cc\u8054\u901a\u5206\u91cf\u3002\u6240\u4ee5\u6211\u4eec\u4f7f\u7528dfs\u5148\u627e\u5230\u6865\uff0c\u6807\u8bb0\u51fa\u6765\u3002\u518d\u8fdb\u884c\u7b2c\u4e8c\u904ddfs\uff0c\u8fd9\u4e00\u8fb9dfs\u6211\u4eec\u627e\u8fde\u901a\u5757\u3002\u6700\u540e\u95ee\u9700\u8981\u591a\u5c11\u6761\u8fb9\u624d\u80fd\u4f7f\u5f97\u6240\u6709\u70b9\u8fb9\u53cc\u8054\u901a\uff0c\u6211\u4eec\u5c06\u5ea6\u4e3a1\u7684\u70b9\u90fd\u6539\u62102\uff0c\u5c31\u597d\u4e86\u3002\u6240\u4ee5\u7edf\u8ba1\u5ea6\u4e3a1\u7684\u70b9\uff0c\u7136\u540e\u52a0\u4e0a1.\u6700\u540e\u9664\u4ee52\u5c31\u662f\u7ed3\u679c\u4e86\u3002\n\uff08\u8fd9\u90e8\u5206\u4e0b\u9762\u6709\u597d\u51e0\u4e2a\u5927\u4f6c\u753b\u56fe\u89e3\u91ca\u4e86\uff0c\u6211\u5c31\u662f\u660e\u786e\u4e00\u4e0b\u51e0\u4e2a\u6982\u5ff5\uff0c\u540c\u65f6\u7ed9\u51fa\u4e00\u4e0b\u5218\u6c5d\u4f73\u7248\u7684\u8fb9\u53cc\u8054\u901a\u6c42\u6cd5\u3002\u4ee3\u7801\u5199\u7684\u4f18\u70b9\u5783\u573e\uff0c\u4e0d\u8fc7\u5e94\u8be5\u80fd\u770b\u61c2\uff09\u3002\n\n------------\n\n\u4e0b\u9762\u7ed9\u51fa\u5218\u6c5d\u4f73\u7248\u7684AC\u4ee3\u7801\uff1a\uff08\u7ed9\u51fa\u7684\u6d4b\u8bd5\u6837\u4f8b\u7b2c9\u4e2a\u6709\u91cd\u8fb9\uff0c\u6240\u4ee5\u5728\u4f7f\u7528\u524d\u9700\u8981\u5224\u91cd\uff0c\u53bb\u6389\u91cd\u8fb9\uff09\n\n\n------------\n\u7ed9\u51fa\u4e00\u7ec4\u6709\u91cd\u8fb9\u7684\u6d4b\u8bd5\u6570\u636e\uff0c\u5e0c\u671b\u5927\u5bb6\u4e0d\u8981\u8c03\u5230\u91cd\u8fb9\u7684\u5751\u91cc\u53bb\u3002\n```c\n16 22\n1 3\n7 1\n5 1\n12 7\n6 3\n4 7\n8 3\n10 7\n14 6\n11 5\n9 7\n15 4\n2 6\n13 12\n8 2\n2 11\n6 1\n4 11\n1 14\n3 10\n13 16\n13 16\n\u8f93\u51fa\u7ed3\u679c\uff1a2\n\u4e0d\u5224\u91cd\u7ed3\u679c\uff1a1\n```\n\n\n```c\n#include<bits/stdc++.h>\n#pragma GCC optimize(2)\n#define MAXN 100100\n#define maxnode 2000005\n#define sigma_size 26\n#define md 12345678\nusing namespace std;\ntypedef long long LL;\n\nstruct Edge\n{\n    int from,to;\n    Edge(int from=0,int to=0):from(from),to(to){};\n};\nbool mp[5005][5005];\nvector<Edge> edges;\nint iscut[MAXN],bccno[MAXN],pre[MAXN];\nint dfs_clock,bcc_cnt;\nvector<int> bccn[MAXN],G[MAXN];\nstack<int> S;\nbool vis[MAXN];\nint n,m;\n\nint dfs(int u,int fa)                                                              //\u7b2c\u4e00\u904d\u627e\u5230\u6865\n{\n    int lowu=pre[u]=++dfs_clock;\n    for(int i=0;i<G[u].size();i++)\n    {\n        Edge &e=edges[G[u][i]];\n        int v=e.to;\n        if(!pre[v])                                                                  //\u7528\u81ea\u5df1\u7684\u540e\u9a71\u6765\u8ddf\u65b0\u81ea\u5df1\n        {\n            int lowv=dfs(v,u);\n            lowu=min(lowu,lowv);\n            if(lowv>pre[u])\n            {\n                int pp=G[u][i];\n                vis[pp]=true;                                                      //\u6807\u8bb0\u51fa\u8fd9\u4e00\u6761\u8fb9\u5c31\u662f\u6865\n                vis[pp^1]=true;                                                  //\u7531\u4e8e\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u5c31\u662f\u8fde\u7eed\u7684\u4e24\u4e2a\u90fd\u6807\u8bb0\n            }\n        }\n        else if(pre[v]<pre[u]&&v!=fa)                                //\u7528\u53cd\u5411\u8fb9\u66f4\u65b0\u81ea\u5df1\n        {\n            lowu=min(lowu,pre[v]);\n        }\n    }\n    return lowu;\n}\n\nint DFS(int u,int fa)                                                          //\u73b0\u5728\u6ca1\u6709\u4e86\u6865\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u904d\u5386\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u6765\u627e\u5230\u8fb9\u53cc\u8054\u901a\n{\n    int lowu=pre[u]=++dfs_clock;\n    for(int i=0;i<G[u].size();i++)\n    {\n        if(vis[G[u][i]]||vis[G[u][i]^1])                                                                 //\u4e0d\u5141\u8bb8\u8d70\u6865\uff0c\u53bb\u6389\u6865\u4ee5\u540e\u5269\u4e0b\u7684\u90fd\u662f\u8fde\u901a\u5757\n            continue;\n        Edge &e=edges[G[u][i]];\n        int v=e.to;\n        if(!pre[v])                                                                                                   //\u6ca1\u8bbf\u95ee\u8fd9\u4e2a\u8282\u70b9\u7528\u54ea\u4e2a\u81ea\u5df1\u7684\u540e\u9a71\u8282\u70b9\u66f4\u65b0\n        {\n            S.push(G[u][i]);\n            int lowv=DFS(v,u);\n            lowu=min(lowu,lowv);\n        }\n        else if(pre[v]<pre[u]&&v!=fa)                                 //\u7528\u53cd\u5411\u8fb9\u8ddf\u65b0\u81ea\u5df1\n        {\n            S.push(G[u][i]);\n            lowu=min(lowu,pre[v]);\n        }\n    }\n    return lowu;\n}\n\nvoid AddEdge(int from,int to)\n{\n    edges.push_back({from,to});\n    edges.push_back({to,from});\n    int mm=edges.size();\n    G[from].push_back(mm-2);\n    G[to].push_back(mm-1);\n}\n\nvoid Find_Bcc(int n)\n{\n    dfs_clock=bcc_cnt=0;\n    memset(pre,0,sizeof(pre));\n    memset(vis,0,sizeof(vis));\n    memset(bccno,0,sizeof(bccno));\n    for(int i=1;i<=n;i++)\n    {\n        if(!pre[i])\n            dfs(i,-1);\n    }\n    memset(pre,0,sizeof(pre));\n    memset(bccno,0,sizeof(bccno));\n    dfs_clock=0;\n    bcc_cnt=n+1;\n    for(int i=1;i<=n;i++)\n    {\n        if(!pre[i])\n        {\n            bcc_cnt++;\n            DFS(i,-1);\n        }\n        while(!S.empty())\n        {\n            int x=S.top();\n            S.pop();\n            Edge &e=edges[x];\n            if(bccno[e.from]!=bcc_cnt)\n                bccno[e.from]=bcc_cnt,bccn[bcc_cnt].push_back(e.from);\n            if(bccno[e.to]!=bcc_cnt)\n                bccno[e.to]=bcc_cnt,bccn[bcc_cnt].push_back(e.to);\n        }\n    }\n    int len=edges.size();\n    int num[MAXN];\n    int ans=0;\n    for(int i=0;i<len;i++)\n    {\n        Edge &e=edges[i];\n        if(vis[i])\n        {\n            int xx=bccno[e.from];\n            int yy=bccno[e.to];\n            if(xx)\n                num[xx]++;\n            else\n                num[e.from]++;\n            if(yy)\n                num[yy]++;\n            else\n                num[e.to]++;\n        }\n    }\n    ans/=2;\n    for(int i=1;i<=bcc_cnt+n;i++)\n    {\n        if(num[i]==2)\n            ans++;\n    }\n    printf(\"%d\\n\",(ans+1)/2);\n}\n\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    int u,v;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d %d\",&u,&v);\n        if(mp[u][v])\n            continue;\n        mp[u][v]=mp[v][u]=true;\n        AddEdge(u,v);\n    }\n    Find_Bcc(n);\n    return 0;\n}\n\n```\n\n\n\n",
        "postTime": 1574664633,
        "uid": 210155,
        "name": "abandentsky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2860 \u3010[USACO06JAN]\u5197\u4f59\u8def\u5f84Redundant Paths\u3011"
    }
]