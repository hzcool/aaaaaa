[
    {
        "content": "\u4e3a\u4ec0\u4e48\u8981\u591a\u53c9\u6811\u8f6c\u4e8c\u53c9\u6811\uff1f\n\n\u672c\u849f\u84bb\u89c9\u5f97\u6839\u672c\u4e0d\u9700\u8981\u3002\n\n\u770b\u5230\u697c\u4e0a\u90fd\u662f\u8f6c\u6811\uff0c\u592a\u9ebb\u70e6\uff0c\u5bf9\u4e8e\u65b0\u624b\u4e5f\u4e0d\u53cb\u597d\uff0c\u6211\u9042\u53d1\u4e00\u9053\u4e0d\u9700\u8981\u8f6c\u6811\u7684\u505a\u6cd5\u3002\n\n\u8fd9\u9053\u9898\u7684DP\u5f0f\u6bd4\u8f83\u96be\u60f3\uff0c\u6211\u4e4b\u524d\u4e00\u76f4\u4ee5\u4e3a\u662f\u4e8c\u7ef4DP\uff0c\u5374\u53d1\u73b0\u662f3\u7ef4\n\nF[i][j][k]\u8868\u793a\u4ee5i\u4e3a\u6839\u7684\u6811\uff0cj\u662fi\u7684\u67d0\u4e2a\u7956\u5148\uff0cj\u4e0a\u6709\u4f10\u6728\u573a\uff0ci\u548ci\u7684\u5b50\u6811\u4e00\u5171\u7528\u4e86k\u4e2a\u4f10\u6728\u573a\u6240\u9700\u8981\u7684\u6700\u5c0f\u8d39\u7528\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5f00\u4e24\u4e2a\u6570\u7ec4\uff0cf\u8868\u793ai\u6ca1\u5efa\uff0cg\u8868\u793ai\u5efa\u4e86\u4f10\u6728\u573a\u3002\u4e3a\u4e86\u65b9\u4fbf\u6700\u540e\u7528f\u8868\u793a\u7b54\u6848\u5373\u53ef\u3002\n\n\u9012\u63a8\u5f0f\u7684\u8bdd\uff0c\u770b\u770b\u4ee3\u7801\u5c31\u53ef\u4ee5\u770b\u61c2\u4e86\u3002\n\n\u795d\u5927\u5bb6NOIP2017 RP++\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint head[501],nxt[1001],point[1001],weight[1001],sum[501],stack[1001],deep[1001];\nlong long f[111][111][51],g[111][111][51];\nint n,tot,K,vi,di,size;\nvoid addedge(int x,int y,int cap){\n    tot++;nxt[tot]=head[x];head[x]=tot;point[tot]=y;weight[tot]=cap;\n}\nvoid dfs(int i){\n    stack[++size]=i;\n    for(int tmp=head[i];tmp;tmp=nxt[tmp]){\n        int v=point[tmp];\n        deep[v]=deep[i]+weight[tmp];\n        dfs(v);\n        for(int j=1;j<=size;j++)\n            for(int k=K;k>=0;k--){\n                f[i][stack[j]][k]+=f[v][stack[j]][0];\n                g[i][stack[j]][k]+=f[v][i][0];\n                for(int x=0;x<=k;x++){\n                    f[i][stack[j]][k]=min(f[i][stack[j]][k],f[i][stack[j]][k-x]+f[v][stack[j]][x]);\n                    g[i][stack[j]][k]=min(g[i][stack[j]][k],g[i][stack[j]][k-x]+f[v][i][x]);\n                }\n            }\n    }\n    //\u8fd9\u91cc\u662f\u5c06f\u548cg\u5408\u5e76\u4e86\uff0c\u56e0\u4e3a\u4e4b\u540e\u5c31\u4e0d\u5728\u4e4ei\u6709\u6ca1\u6709\u5efa\u4f10\u6728\u573a\uff0c\u53ea\u5173\u5fc3i\u548ci\u7684\u5b50\u6811\u5efa\u4e86\u591a\u5c11\u3002\n    for(int j=1;j<=size;j++)\n        for(int k=0;k<=K;k++){\n            if(k>=1)\n                f[i][stack[j]][k]=min(f[i][stack[j]][k]+sum[i]*(deep[i]-deep[stack[j]]),g[i][stack[j]][k-1]);\n    //\u8fd9\u91cc\u662fg[i][stack[j]][k-1]\u7684\u539f\u56e0\u662f\uff1a\u56e0\u4e3a\u6211\u4eec\u4e4b\u524d\u7b97g\u7684\u65f6\u5019\uff0c\u662f\u5047\u8bbei\u4e0a\u6709\u4f10\u6728\u573a\u3002\u800c\u6211\u4eec\u5b9e\u9645\u4e0a\u6ca1\u6709\u628a\u8fd9\u4e2a\u4f10\u6728\u573a\u7684\u6570\u91cf\u52a0\u8fdb\u53bb\u3002\u6240\u4ee5\u5408\u5e76\u524dg[i][j][k]\u5b9e\u9645\u4e0a\u4ee3\u8868\u7684\u662fg[i][j][k+1]\n            else \n                f[i][stack[j]][k]+=sum[i]*(deep[i]-deep[stack[j]]);\n        }\n        \n    size--;\n}\nint main(){\n    scanf(\"%d%d\",&n,&K);\n    for(int i=1;i<=n;i++){\n        scanf(\"%d%d%d\",&sum[i],&vi,&di);\n        addedge(vi,i,di);\n    }\n    dfs(0);\n    printf(\"%d\\n\",f[0][0][K]);\n}\n```",
        "postTime": 1506776956,
        "uid": 24559,
        "name": "Treeloveswater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3354 \u3010\u6cb3\u6d41\u3011"
    },
    {
        "content": "## \u9898\u76ee\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P3354)\n\n## \u601d\u8def\n\n\u6574\u9053\u9898\u770b\u8d77\u6765\u6709\u5f88\u591a\u8981\u70b9\u8981\u8003\u8651\n\n\u6700\u5148\u60f3\u51fa\u7684DP\u65b9\u7a0b\n\n```cpp\ndp[i][j]\u8868\u793a\u7b2ci\u4e2a\u7ed3\u70b9\u6240\u5728\u5b50\u6811\u5efaj\u4e2a\u4f10\u6728\u573a\u7684\u6700\u5c0f\u82b1\u8d39\ndp[i][j] = min(dp[v][k] + cost)\n```\n\n\u770b\u8d77\u6765\u633a\u597d\u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e0d\u9ad8\uff0c\u4f46\u95ee\u9898\u6765\u4e86\n\ncost\u600e\u4e48\u7b97\u554a\n\n\u4e0d\u77e5\u9053\u5269\u4f59\u6728\u6750 \u4e0d\u77e5\u9053\u8d70\u7684\u8ddd\u79bb\n\n\u4e8e\u662f\u8001\u5e08\u8bf4 $\\color{red}\\text{\u8981\u4e09\u7ef4}$\n\n```cpp\n\u5b9a\u4e49dp[i][j][k]\u8868\u793a\u7b2ci\u4e2a\u7ed3\u70b9\u6240\u5728\u5b50\u6811\u5efaj\u4e2a\u4f10\u6728\u573a\u4e14\u6700\u8fd1\u7684\u4e00\u4e2a\u4f10\u6728\u573a\u5728k\n```\n\n\u7136\u540e\u6211  $\\color{blue}\\text{\u6ca1\u6709\u60f3\u51fa\u6765}$\n\n\u4e8e\u662f\u53bb\u770b\u4e86\u6d1b\u8c37\u9898\u89e3\uff0c\u4f46\u89c9\u5f97\u8bb2\u7684\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u7279\u4e8e\u6b64\u518d\u5199\u4e00\u7bc7\n\n\u5b9a\u4e49\u56db\u7ef4\u7684\n\n```cpp\ndp[i][j][k]\u8868\u793a\u7b2ci\u4e2a\u7ed3\u70b9\u6700\u8fd1\u4e14\u5efa\u4e86\u4f10\u6728\u573a\u7684\u4e3aj \u5171\u5efak\u4e2a\u7684\u6700\u5c0f\u82b1\u8d39 1 \u8868\u793a\u5728i\u70b9\u5efa\u4e86\n```\n\n\u6ce8\u610f \u4e0a\u9762\u7684\u6700\u8fd1\u4f10\u6728\u573a\u6307\u7684\u662f\u7956\u5148\u7ed3\u70b9\u4e0a\u7684\n\n\u8bb0\u5f55\u7956\u5148 \u8003\u8651\u7528\n\n```cpp\nancestor[++tot] = x;\u653e\u5728dfs\u91cc\u7684\u9996\u884c\n```\n\n```cpp\ntot--\uff1b\u653e\u5728\u672b\u884c\n```\n\n\u975e\u5e38\u597d\u7406\u89e3\n\n\u8bb0\u5f55\u8ddd\u79bb\u548c\u6728\u6750\u6570\n\n\u53ea\u8981\u77e5\u9053\u5e94\u524d\u5f80\u4e4b\u5730\u548c\u73b0\u5728\u6240\u5728\u4e4b\u5730 \u5c31\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u8868\u793a\n\n```cpp\nu:\u73b0\u5728\u6240\u5728\u4e4b\u5730\nv:\u5e94\u524d\u5f80\u4e4b\u5730\ndep[i]\u8bb0\u5f55i\u5230\u68391\u7684\u8ddd\u79bb\n\u5373dis(u,v) = |dep[v] - dep[u]|\n```\n\n\u6728\u6750\u6570\u5219\u4ece\u8fd9\u91cc\u4e00\u6b21\u6027\u8fd0\u5230\u4f10\u6728\u573a\uff0c\u6240\u4ee5\u4e0d\u8bb0\u5f55\u4e2d\u95f4\u72b6\u6001\n\n```cpp\nwood[i]\u8868\u793ai\u70b9\u7684\u6728\u6750\n```\n\u7136\u540e\u5c31\u662f\u6700\u91cd\u8981\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e86\n\n```cpp\ndp[x][fa][k][0] = Min(dp[x][fa][k][0],dp[v][fa][l][0] + dp[x][fa][k - l][0]);\ndp[x][fa][k][1] = Min(dp[x][fa][k][1],dp[v][x][l][0] + dp[x][fa][k - l][1]);\t\n```\n\n\u7136\u540e\u5c31\u6709\u975e\u5e38\u8bb2\u7a76\u7684\u4e8b\u513f\u4e86\n\n```cpp\nfor(j = 1;j <= tot;j++)\n{\n//j\u7684\u987a\u5e8f\u65e0\u6240\u8c13\n\tint fa = ancestor[j];\n\tfor(k = maxk;k >= 0;k--)\n\t{\n\t//k\u7684\u987a\u5e8f\u4e0d\u80fd\u5012\uff0c\u56e0\u4e3a\u4e0d\u80fd\u7528\u66f4\u65b0\u8fc7\u7684\u72b6\u6001\u6765\u66f4\u65b0\uff08\u4f1a\u8ba9dp[v]\u591a\u6b21\u88ab\u8ba1\u7b97\uff09\n\t\tdp[x][fa][k][0] += dp[v][fa][0][0];\n\t\tdp[x][fa][k][1] += dp[v][x][0][0];\n\t\t/*\u56e0\u4e3a\u6ca1\u6709\u521d\u59cb\u5316dp\uff0c\u6700\u5148\u5b83\u81ea\u5df1\u4e00\u5b9a\u4e3a0\n\t\t\u5982\u679c\u4e0d\u5355\u72ec\u63d0\u51fa\u6765\u5904\u7406\uff0c\u4f1a\u4fdd\u63010\u7684\u72b6\u6001 \u4e0d\u88ab\u66f4\u65b0\n\t\t*/\n\t\tfor(l = 0;l <= k;l++)\n\t\t{\n\t\t//\u8fd9\u4e2al\u987a\u5e8f\u4e5f\u65e0\u6240\u8c13\n\t\t\tdp[x][fa][k][0] = Min(dp[x][fa][k][0],dp[v][fa][l][0] + dp[x][fa][k - l][0]);\n\t\t\tdp[x][fa][k][1] = Min(dp[x][fa][k][1],dp[v][x][l][0] + dp[x][fa][k - l][1]);\t\n\t\t}\n\t}\n}\n```\n\n\u8fd8\u6709\u4e00\u70b9\u5f97\u77e5\u9053\n\n```cpp\n\u7b2c\u56db\u7ef4 \u8868\u793a\u7684\u662f\u5f53\u524d\u7ed3\u70b9\u662f\u5426\u6709\u4f10\u6728\u573a\n\u5728\u56de\u6eaf\u540e\u5c31\u6ca1\u7528\u4e86\uff0c\u56e0\u6b64\u9700\u8981\u8fdb\u884c\u5408\u5e76\uff0c\u4e14\u8fd8\u5f97\u5c06\u5f53\u524d\u7ed3\u70b9\u7684\u6728\u6750\u8fd0\u81f3\u65b9\u7a0b\u4e2d\u7684fa\nfor(i = 1;i <= tot;i++)\n{\n//i\u7684\u987a\u5e8f\u65e0\u6240\u8c13\n\tint fa = ancestor[i];\n\tfor(j = 0;j <= maxk;j++)\n\t{\n\t//j\u7684\u987a\u5e8f\u4e5f\u65e0\u6240\u8c13\n\t\tif(j >= 1)\n\t\t\tdp[x][fa][j][0] = Min(dp[x][fa][j][0] + wood[x] * (dep[x] - dep[fa]),dp[x][fa][j - 1][1]);\n\t\t//\u5355\u72ec\u5904\u7406\u662f\u56e0\u4e3a0 - 1 = -1 \u9020\u6210\u6570\u7ec4\u8d8a\u754c\n\t\t/*\n\t\t\u90a3\u4e3a\u4ec0\u4e48\u4f1a\u6709-1\u7684\u64cd\u4f5c\u4e86\n\t\t\u539f\u9898\u89e3\u8bf4\u7684\u633a\u6e05\u695a\u7684\n\t\t\u5148\u524d\u7b97\u7684dp[x][fa][k][1]\u662f\u7528dp[v][x][l][0] + dp[x][fa][k - l][1]\u6765\u66f4\u65b0\u7684\n\t\t\u800cl + k - l = k < k + 1\uff0c\u4f46\u6211\u4eec\u6b64\u65f6\u8868\u793a\u7684\u662fk + 1 \u7684\u72b6\u6001\uff0c\u6545\u9700-1\n\t\t\u4e5f\u53ef\u4ee5\u5728\u4e0a\u8bc9\u65b9\u7a0b\u4e2d\u52a0\u4e2a-1\n\t\t\u6539\u6210dp[v][x][l][0] + dp[x][fa][k - l + 1][1]\n\t\t*/\n\t\telse dp[x][fa][j][0] += wood[x] * (dep[x] - dep[fa]);\n\t\t//\u5148\u524d\u7684\u8bb0\u5f55\n\t}\n}\n```\n\n## \u4ee3\u7801\n\n```cpp\n#include <vector>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n  \ninline void Read(int &x)\n{\n    x = 0;\n    char a = getchar();\n    bool f = 0;\n    while(a < '0'||a > '9') {if(a == '-') f = 1;a = getchar();}\n    while(a >= '0'&&a <= '9') {x = x * 10 + a - '0';a = getchar();}\n    if(f) x *= -1;\n}\nconst int MAXN = 202;\nvector<int> G[MAXN],Road[MAXN];\nint maxk,wood[MAXN],ancestor[MAXN],tot,dep[MAXN],dp[MAXN][MAXN][52][2];\nbool vis[MAXN];\n//dp[i][j][k]\u8868\u793a\u7b2ci\u4e2a\u7ed3\u70b9\u6700\u8fd1\u4e14\u5efa\u4e86\u4f10\u6728\u573a\u7684\u4e3aj \u5171\u5efak\u4e2a\u7684\u6700\u5c0f\u82b1\u8d39 1 \u8868\u793a\u5728i\u70b9\u5efa\u4e86 \n\ntemplate<typename T>\ninline T Min(T a,T b) {if(a < b) return a;return b;}\ninline void dfs(int x)\n{\n\tint i,j,k,l;;\n\tancestor[++tot] = x;\n\tfor(i = 0;i < G[x].size();i++)\n\t{\n\t\tint v = G[x][i],w = Road[x][i];\n\t\tif(!vis[v])\n\t\t{\n\t\t\tvis[v] = 1;\n\t\t\tdep[v] = dep[x] + w; \n\t\t\tdfs(v);\n\t\t\tfor(j = tot;j >= 1;j--)\n\t\t\t{\n\t\t\t\tint fa = ancestor[j];\n\t\t\t\tfor(k = maxk;k >= 0;k--)\n\t\t\t\t{\n\t\t\t\t\tdp[x][fa][k][0] += dp[v][fa][0][0];\n\t\t\t\t\tdp[x][fa][k][1] += dp[v][x][0][0];\n\t\t\t\t\tfor(l = k;l >= 0;l--)\n\t\t\t\t\t{\n\t\t\t\t\t\tdp[x][fa][k][0] = Min(dp[x][fa][k][0],dp[v][fa][l][0] + dp[x][fa][k - l][0]);\n\t\t\t\t\t\tdp[x][fa][k][1] = Min(dp[x][fa][k][1],dp[v][x][l][0] + dp[x][fa][k - l][1]);\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(i = 1;i <= tot;i++)\n\t{\n\t\tint fa = ancestor[i];\n\t\tfor(j = maxk;j >= 0;j--)\n\t\t{\n\t\t\tif(j >= 1)\n\t\t\t\tdp[x][fa][j][0] = Min(dp[x][fa][j][0] + wood[x] * (dep[x] - dep[fa]),dp[x][fa][j - 1][1]);\n\t\t\telse dp[x][fa][j][0] += wood[x] * (dep[x] - dep[fa]);\n\t\t}\n\t}\n\ttot--;\n}\nint main()\n{\n\tint n,i;\n\tRead(n),Read(maxk);\n\tfor(i = 1;i <= n;i++)\n\t{\n\t\tint v,dis;\n\t\tRead(wood[i]),Read(v),Read(dis);\n\t\tG[i].push_back(v);\n\t\tG[v].push_back(i);\n\t\tRoad[i].push_back(dis);\n\t\tRoad[v].push_back(dis);\n\t}\n\tvis[0] = 1;\n\tdfs(0);\n\tprintf(\"%d\",dp[0][0][maxk][0]);\n    return 0;\n}\n```",
        "postTime": 1548933303,
        "uid": 73992,
        "name": "resftlmuttmotw",
        "ccfLevel": 0,
        "title": "Riv\u2014\u2014\u6811\u5f62DP"
    },
    {
        "content": "\u4e00\u9053\u6bd4\u8f83\u96be\u60f3\u7684\u6811\u5f62dp\u3002\n\n\u6211\u4eec\u5148\u6309\u7167\u4e00\u822c\u601d\u8def\u8003\u8651\uff0c\u5148\u8bbe$f[u][j]$\u4e3a\u5f53\u524d\u5728$u$\u53f7\u70b9\uff0c$u$\u53ca$u$\u7684\u5b50\u6811\u5efa\u4e86$j$\u4e2a\u4f10\u6728\u573a\u7684\u8fd0\u8d39\u6700\u5c0f\u503c\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u6bcf\u6bb5\u8def\u7684\u8fd0\u8d39\u4e0d\u597d\u7edf\u8ba1\uff0c\u539f\u56e0\u662f\u6211\u4eec\u4e0d\u5bb9\u6613\u77e5\u9053\u4ece$u$\u7684\u5b50\u6811\u8fd0\u4e0a\u6765\u7684\u6728\u6599\u6570\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53cd\u7740\u8003\u8651\uff0c\u8003\u8651\u8ba1\u7b97\u5c06$u$\u4e0e$u$\u7684\u5b50\u6811\u4e2d\u6240\u6709\u7684\u6728\u6599\u8fd0\u4e0a\u53bb\u6240\u9700\u8981\u7684\u6700\u5c0f\u82b1\u8d39\u3002\u8fd9\u65f6\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u6211\u4eec\u9700\u8981\u77e5\u9053$u$\u4e2d\u7684\u6728\u6599\u8fd0\u53bb\u4e86\u54ea\u91cc\uff0c\u5373\u79bb$u$\u6700\u8fd1\u7684\u5efa\u4e86\u4f10\u6728\u573a\u7684\u7956\u5148\u3002\u6700\u540e\u518d\u5408\u5e76$u$\u5b50\u6811\u4e2d\u7684\u7b54\u6848\u5373\u53ef\u3002\n\n\u8bbe$f[u][i][j]$\u8868\u793a\u5f53\u524d\u5728$u$\u53f7\u70b9\uff0c\u79bb$u$\u6700\u8fd1\u7684\u5efa\u4e86\u4f10\u6728\u573a\u7684\u7956\u5148\u4e3a$i$\uff0c$u$\u53ca$u$\u7684\u5b50\u6811\u5efa\u4e86$j$\u4e2a\u4f10\u6728\u573a\u7684\u8fd0\u8d39\u6700\u5c0f\u503c\u3002\n\n\u7136\u540e\u6211\u4eec\u8fd8\u9700\u8981\u8003\u8651\u5728$u$\u5efa\u4f10\u6728\u573a\u7684\u60c5\u51b5\u3002\u518d\u8bbe$g[u][i][j]$\u8868\u793a\u5f53\u524d\u5728$u$\u53f7\u70b9\uff0c\u79bb$u$\u6700\u8fd1\u7684\u5efa\u4e86\u4f10\u6728\u573a\u7684\u7956\u5148\u4e3a$i$\uff0c$u$\u5efa\u4e86\u4f10\u6728\u573a\uff0c\u4e14$u$\u7684\u5b50\u6811\u5efa\u4e86$j$\u4e2a\u4f10\u6728\u573a\u7684\u8fd0\u8d39\u6700\u5c0f\u503c\u3002\n\n\u5219\u72b6\u6001\u8f6c\u79fb\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u80cc\u5305\u6a21\u578b\u3002\n\n\u5b9e\u73b0\u7684\u7ec6\u8282\u8fd8\u662f\u5f88\u591a\u7684\uff0c\u4e0b\u9762\u4e0a\u4ee3\u7801\uff08\u5177\u4f53\u8f6c\u79fb\u548c\u5b9e\u73b0\u7ec6\u8282\u5728\u6ce8\u91ca\u91cc\uff09\uff1a\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <algorithm>\n#define maxn 105\ninline int read() {\n    int d=0;char ch=getchar();while(!isdigit(ch))ch=getchar();\n    while(isdigit(ch)){d=d*10+ch-48;ch=getchar();}return d;\n}\n\nint n, k;\nint w[maxn], v[maxn], d[maxn];\nint head[maxn], ver[maxn], nxt[maxn], tot;\n\ninline void add(int u, int v) {\n    ver[++tot] = v, nxt[tot] = head[u], head[u] = tot;\n}\n\nint dep[maxn]; // \u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\nint f[maxn][maxn][maxn], g[maxn][maxn][maxn];\nint stk[maxn], tots; // \u4e3a\u4e86\u65b9\u4fbf\u8f6c\u79fb\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u6808\u7ef4\u62a4u\u7684\u7956\u5148\n\nvoid dfs(int u) {\n    stk[++tots] = u;\n    for(int p = head[u]; p; p = nxt[p]) {\n        int v = ver[p];\n        dep[v] = dep[u]+d[v], dfs(v);\n        // \u5148\u5411\u4e0b\u9012\u5f52\uff0c\u7b97\u51fa\u5b50\u6811\u7684\u7b54\u6848\n        // \u5f53\u524d\u8981\u7edf\u8ba1\u7684\u5b50\u6811\u4e3av\n        for(int i = 1; i <= tots; ++i) { // \u679a\u4e3e\u7956\u5148\n            for(int j = k; j >= 0; --j) { // \u8fd9\u91ccj\u7684\u987a\u5e8f\u4e0d\u80fd\u53cd\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u62ff\u4e4b\u524d\u7684\u72b6\u6001\u53bb\u66f4\u65b0\u65b0\u7684\u72b6\u6001\n                f[u][stk[i]][j] += f[v][stk[i]][0];\n                g[u][stk[i]][j] += f[v][u][0];\n                // \u6ce8\u610f\u5728\u589e\u52a0\u4e00\u68f5\u5b50\u6811\u7684\u65f6\u5019\uff0c\u72b6\u6001\u8868\u793a\u7684\u8303\u56f4\u6269\u5927\u4e86\n                // \u6240\u4ee5\u5fc5\u987b\u5148\u5c06\u4e00\u4e2a\u72b6\u6001\u62ff\u51fa\u6765\u5148\u66f4\u65b0\uff0c\u5426\u5219f\u548cg\u8868\u793a\u7684\u7b54\u6848\u4e0d\u5305\u62ec\u5f53\u524d\u5b50\u6811\n                for(int l = 1; l <= j; ++l) {\n                    // \u5f53\u524d\u5b50\u6811v\u603b\u5171\u5efa\u4e86l\u4e2a\u4f10\u6728\u573a\uff0c\u6b64\u65f6u\u524d\u9762\u7684\u5b50\u6811\u5efa\u4e86j-l\u4e2a\u4f10\u6728\u573a\n                    \n                    // u\u4e0d\u5efa\u4f10\u6728\u573a\uff0c\u6b64\u65f6\u5b50\u6811\u4e2d\u672a\u88ab\u5904\u7406\u7684\u6728\u6599\u8981\u5168\u90e8\u8fd0\u5f80stk[i]\n                    f[u][stk[i]][j] = std::min(f[u][stk[i]][j], f[v][stk[i]][l]+f[u][stk[i]][j-l]);\n                    \n                    // u\u5efa\u4f10\u6728\u573a\uff0c\u5b50\u6811\u4e2d\u672a\u88ab\u5904\u7406\u7684\u6728\u6599\u9700\u8981\u8fd0\u5f80u\n                    g[u][stk[i]][j] = std::min(g[u][stk[i]][j], f[v][u][l]+g[u][stk[i]][j-l]);\n                }\n            }\n        }\n    }\n    \n    // \u7edf\u8ba1\u70b9u\u7684\u8d21\u732e\uff0c\u66f4\u65b0\u6700\u7ec8\u7b54\u6848\n    for(int i = 1; i <= tots; ++i) {\n        for(int j = k; j >= 1; --j)\n            f[u][stk[i]][j] = std::min(f[u][stk[i]][j]+w[u]*(dep[u]-dep[stk[i]]), g[u][stk[i]][j-1]);\n        f[u][stk[i]][0] += w[u]*(dep[u]-dep[stk[i]]);\n        // \u8981\u628au\u4e2d\u7684\u6728\u6599\u8fd0\u5230stk[i]\uff0c\u9700\u8981\u82b1\u8d39w[u]*(dep[u]-dep[stk[i]])\n        // \u6211\u4eec\u4e0d\u9700\u8981\u8003\u8651u\u5b50\u6811\u7684\u82b1\u8d39\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u5728\u4e4b\u524d\u88ab\u7b97\u8fc7\u4e86\n    }\n    --tots;\n}\n\nint main() {\n    n = read(), k = read();\n    for(int i = 1; i <= n; ++i) {\n        w[i] = read(), v[i] = read(), d[i] = read();\n        add(v[i], i);\n    }\n    dfs(0);\n    printf(\"%d\", f[0][0][k]); // \u6700\u540e\u7b54\u6848\u5373\u4e3af[0][0][k]\n    return 0;\n}\n```",
        "postTime": 1554257033,
        "uid": 79017,
        "name": "\u82b1\u91cc\u5fc3\u7231",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3354 \u3010[IOI2005]Riv \u6cb3\u6d41\u3011"
    },
    {
        "content": "\u3000\u3000\u4e00\u8282\u8bed\u6587\u8bfe\u60f3\u51fa\u6765\u7684\u73a9\u610f\u513f\uff0c\u8c03\u4e86\u51e0\u4e2a\u5c0f\u65f6\u2026\u2026\u53ef\u89c1\u7ec6\u5fc3&\u597d\u7684\u4ee3\u7801\u4e60\u60ef\u662f\u6709\u591a\u4e48\u7684\u91cd\u8981 (\uff1b\u3078\uff1a)\n\n\u3000\u3000\u597d\u50cf\u8fd9\u9898\u7684\u6b63\u89e3\u662f\u591a\u53c9\u6811\u8f6c\u4e8c\u53c9\u6811\uff1f\u53ef\u662f\u6211\u5e76\u4e0d\u4f1a\u554a\u3002\u9996\u5148\u6211\u4eec\u770b\u5230\u8fd9\u9898\u7684\u8303\u56f4\u975e\u5e38\u7684\u5c0f\uff0c\u6240\u4ee5\u80af\u5b9a\u9664\u4e86\u7206\u641c\u4e4b\u5916\u7684\u4e71\u641e\u90fdOK\u3002\uff08\u8bf4\u4e0d\u5b9a\u7206\u641c+\u8d85\u5f3a\u526a\u679d\u5565\u7684\u4e5f\u53ef\u4ee5\uff1f\u4f46\u6211\u6ca1\u6709\u5c1d\u8bd5\u4e86\u2026\u2026\uff09\u90a3\u6211\u4eec\u5f00\u59cb\u5206\u6790\u4e00\u6ce2\uff1a\u52a8\u6001\u89c4\u5212\u6700\u5fcc\u628a\u6240\u6709\u4e1c\u897f\u90fd\u7cca\u5728\u4e00\u5768\uff0c\u91cd\u5728\u5206\u522b\u72b6\u6001\uff0c\u6240\u4ee5\u81ea\u7136\u6211\u4eec\u7b2c\u4e00\u6b65\u9700\u8981\u5efa\u7acb\u51fa\u72b6\u6001&\u5206\u6790\u51fa\u6bcf\u4e00\u4e2a\u8282\u70b9\u72ec\u7acb\u7684\u8d21\u732e\u3002\u5efa\u7acb\u72b6\u6001\u6211\u4eec\u5148\u91c7\u7528\u6700\u81ea\u7136\u7684\u60f3\u6cd5\uff1adp[u][k]\u8868\u793au\u8282\u70b9\u4e0bk\u4e2a\u8282\u70b9\u5efa\u7acb\u4e86\u4f10\u6728\u573a\u7684\u6700\u5927\u8d21\u732e\u3002\n\n\u3000\u3000\u6700\u5927\u8d21\u732e\u2026\u2026\u4ec0\u4e48\u662f\u8d21\u732e\uff1f\u6b63\u5411\u7684\u7edf\u8ba1\u8282\u70b9\u7684\u82b1\u8d39\u597d\u50cf\u4e0d\u662f\u5f88\u5bb9\u6613\uff0c\u4e0d\u5982\u8003\u8651\u51cf\u5c11\u7684\u82b1\u8d39\u3002\u5982\u679c\u6211\u4eec\u5728\u4e00\u4e2a\u8282\u70b9\u4e0a\u5efa\u7acb\u4e86\u4f10\u6728\u573a\uff0c\u5219\u8be5\u8282\u70b9\u5411\u4e0b\u5f80\u53f6\u5b50\u4e0a\u8d70\uff0c\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u4f10\u6728\u573a\u4e4b\u95f4\u7684\u8282\u70b9\u90fd\u4f1a\u8fd0\u5411\u8be5\u4f10\u6728\u573a\uff0c\u6240\u8282\u7701\u7684\u6210\u672c\u5373\u4e3adis[u] \u00d7 w[v]\u3002\u90a3\u4e48\u6211\u4eec\u7684\u601d\u8def\u5c31\u5f62\u6210\u4e86\uff1adp[u][k] \u8868\u793au\u8282\u70b9\u4e0bk\u4e2a\u8282\u70b9\u5efa\u7acb\u4e86\u4f10\u6728\u573a\u7684\u6700\u5927\u8d21\u732e\uff0c\u4e14\u5f3a\u5236\u7b2ck\u4e2a\u5efa\u7acb\u5728u\u8282\u70b9\u4e0a\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2au\u8282\u70b9\u800c\u8a00\uff0c\u6211\u4eec\u90fd\u904d\u5386\u4e00\u904d\u5b83\u7684\u5b50\u6811\uff0c\u6c42\u51fa f \u6570\u7ec4\uff0cf[u][k] \u8868\u793au & u\u7684\u5b50\u6811\u4e2d\u5efa\u7acbk\u4e2a\u4f10\u6728\u573a\u7684\u6700\u5927\u8d21\u732e\uff08\u4e0d\u5f3a\u5236\u5efa\u5728u\u8282\u70b9\u4e0a\uff09\u3002\n\n\u3000\u3000\u8f6c\u79fb\u65b9\u7a0b\uff1a\u80cc\u5305\u6c42\u51fa\u7ec4\u5408\u6700\u4f18\u89e3\uff0c\u6c42f\u6570\u7ec4\u65f6\u679a\u4e3e\uff1a\u8be5\u8282\u70b9\u5efa\u4f10\u6728\u573a\uff1a\u4f10\u6728\u573a\u6570\u91cf+1\uff0c\u8d21\u732e + dis[v] \u00d7 w[v]\uff1b\u8be5\u8282\u70b9\u4e0d\u5efa\u7acb\u4f10\u6728\u573a\uff1a\u53d7\u5f53\u524d dp \u5efa\u7acb\u7684\u4f10\u6728\u573a\u7684\u2018\u7ba1\u8f96\u2019\uff0c\u8d21\u732e + dis[u] \u00d7 w[v]\uff1b\u6700\u5173\u952e\u7684\u5730\u65b9\u8fd8\u662f\u5728\u4e8e\u5c06\u5b50\u6811\u72b6\u6001\u4e0e\u7236\u4eb2\u72b6\u6001\u5206\u79bb\u5f00\u6765\uff0c\u8fd9\u6837\u5c31\u65b9\u4fbf\u8fdb\u884c\u72b6\u6001\u7684\u8f6c\u79fb\u4e86\u3002\n\n\u3000\u3000\u867d\u7136\u611f\u89c9\u590d\u6742\u5ea6\u975e\u5e38\u7684\u9ad8\uff1a\u8fbe\u5230\u4e86n * n * k * k\n\u7684\u7ea7\u522b\uff0c\u7136\u800c\u5728rank1\uff1f\u5927\u6982\u662f\u7384\u5b66\u2026\u2026\n\n\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c + \u4f5c\u8005\u5fc3\u58f0\u3010\u7b11\u54ed\u3011\n[Twilight's Blog](http://www.cnblogs.com/twilight-sx/p/9053516.html)\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 105\nint n, K, cnp = 1, ans, head[maxn], w[maxn];\nint dis[maxn], size[maxn]; \nint dp[maxn][maxn], f[maxn][maxn];\n\nstruct edge\n{\n\tint to, co, last;\n}E[maxn];\n\nint read()\n{\n    int x = 0, k = 1;\n    char c;\n    c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') k = -1; c = getchar(); }\n    while(c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n    return x * k;\n}\n\nvoid add(int u, int v, int w)\n{\n\tE[cnp].to = v, E[cnp].co = w;\n\tE[cnp].last = head[u], head[u] = cnp ++;\n}\n\nvoid gmax(int &a, int b) { a = a > b ? a : b; } \n\nvoid DP(int u, int gra)\n{\n\tf[u][0] = dis[gra] * w[u];\n\tfor(int i = head[u]; i; i = E[i].last) \n\t{\n\t\tDP(E[i].to, gra);\n\t\tfor(int j = min(size[u], K); ~j; j --)\n\t\t{\n\t\t\tint lim = min(size[E[i].to], j); \n\t\t\tfor(int k = 0; k <= lim; k ++)\n\t\t\t\tgmax(f[u][j], f[E[i].to][k] + f[u][j - k]);\n\t\t}\n\t}\n\tfor(int j = size[u]; j; j --) gmax(f[u][j], dp[u][j]);\n}\n\nvoid dfs(int u)\n{\n\tsize[u] = 1;\n\tfor(int i = head[u]; i; i = E[i].last)\n\t{\n\t\tint v = E[i].to;\n\t\tdis[v] = E[i].co + dis[u]; \n\t\tdfs(v); size[u] += size[v];\n\t}\n\tdp[u][0] = 0, ans += dis[u] * w[u];\n\tmemset(f, 0, sizeof(f));\n\tfor(int i = head[u]; i; i = E[i].last) \n\t{\n\t\tDP(E[i].to, u);\n\t\tfor(int j = min(K, size[u]); ~j; j --)\n\t\t\tfor(int k = 0; k <= min(j, size[E[i].to]); k ++)\n\t\t\t\tgmax(dp[u][j], f[E[i].to][k] + dp[u][j - k]);\n\t}\n\tfor(int i = min(size[u], K); i; i --) dp[u][i] = dp[u][i - 1] + dis[u] * w[u];\n}\n\nint main()\n{\n\tn = read(), K = read();\n\tmemset(dp, 0, sizeof(dp));\n\tfor(int i = 1; i <= n; i ++)\n\t{\n\t\tw[i] = read(); int v = read(), z = read(); \n\t\tadd(v, i, z);\n\t}\n\tdfs(0); int tem = 0;\n\tmemset(f, 0, sizeof(f)); \n\tfor(int i = head[0]; i; i = E[i].last) \n\t{\n\t\tDP(E[i].to, 0);\n\t\tfor(int j = min(size[0], K); ~j; j --)\n\t\t{\n\t\t\tint lim = min(size[E[i].to], j); \n\t\t\tfor(int k = 0; k <= lim; k ++)\n\t\t\t\tgmax(f[0][j], f[E[i].to][k] + f[0][j - k]);\n\t\t}\n\t}\n\tfor(int i = 1; i <= size[0]; i ++) tem = max(tem, f[0][i]);\n\tprintf(\"%d\\n\", ans - tem);\n\treturn 0;\n}\n```",
        "postTime": 1526565496,
        "uid": 47135,
        "name": "Twilight_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3354 \u3010[IOI2005]Riv \u6cb3\u6d41\u3011"
    },
    {
        "content": "\u600e\u4e48\u6ca1\u6709wqs\u4e8c\u5206\u7684\u9898\u89e3\u2026\u2026\n\n\u6811\u5f62dp\u7684\u505a\u6cd5\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\uff0c $f(i,j,k)$ \u8868\u793a\u70b9 $i$ \u4e0b\u6e38\u7b2c\u4e00\u4e2a\u4f10\u6728\u573a\u5728\u70b9 $j$ \uff0c $i$ \u548c\u5176\u5b50\u6811\u5185\u5efa $k$ \u4e2a\u4f10\u6728\u573a\u65f6 \uff0c \u70b9 $i$ \u548c\u5176\u5b50\u6811\u5185\u7684\u6728\u6750\u8fd0\u81f3\u4f10\u6728\u573a\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\u7406\u8bba\u590d\u6742\u5ea6 $O(nk^2)$ \uff0c\u7ec6\u8282\u5904\u7406\u4e0d\u597d\u5bb9\u6613\u88ab\u94fe\u5361\u5230 $O(nk^3)$ , \u6ce8\u610f\u4e8b\u9879\u5728\u4ee3\u7801\u4e2d\u6709\u6ce8\u91ca\u3002\n\n\u9898\u76ee\u8981\u6c42\u6070\u9009\u62e9 $k$ \u4e2a\u4f10\u6728\u573a \uff0c\u53ef\u4ee5\u610f\u4f1a\u5230\u968f\u7740\u9009\u7684\u4f10\u6728\u573a\u4e2a\u6570\u7684\u589e\u52a0 \uff0c \u4ee3\u4ef7\u7684\u51cf\u5c11\u7684\u901f\u5ea6\u5728\u964d\u4f4e (\u51f8\u6027\uff09\uff0c\u8003\u8651\u4f7f\u7528wqs\u4e8c\u5206\u89e3\u51b3\u3002 \u6211\u4eec\u53bb\u6389\u6811\u5f62dp\u7684\u7b2c\u4e09\u7ef4\u7684\u4e2a\u6570\u9650\u5236 \uff0c\u5e76\u7ed9\u6bcf\u4e2a\u4f10\u6728\u573a\u7684\u5efa\u7acb\u9644\u52a0 $C$ \u7684\u4ee3\u4ef7 \uff0c dp\u65f6\u8bb0\u5f55\u5efa\u7acb\u7684\u4f10\u6728\u573a\u6570 \uff0c\u636e\u6b64\u8c03\u6574 $C$ \u7684\u5927\u5c0f\u3002\u7279\u522b\u7684\uff0c\u65e0\u8bba $C$ \u662f\u591a\u5c11\uff0c\u5f53\u524d\u5efa\u7acb\u7684\u4f10\u6728\u573a\u6570\u6070\u7b49\u4e8e $k$ \u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\u4e8c\u5206\uff0c\u56e0\u4e3a\u5efa\u7acb\u4f10\u6728\u573a\u6570\u4e00\u5b9a\u65f6\u6700\u5c0f\u4ee3\u4ef7\u663e\u7136\u4e00\u5b9a\u3002\u590d\u6742\u5ea6 $O(n^2loga)$ \uff0ca\u6307\u6700\u5927\u53ef\u80fd\u7684\u7b54\u6848\uff08\u6240\u6709\u7684\u6728\u6599\u6d41\u5230 bytetown \u7684\u8fd0\u8d39\uff09\u3002\n\n\u5173\u4e8ewqs\u4e8c\u5206\u5b9e\u73b0\u7684\u4e2a\u4eba\u5efa\u8bae\uff1a\n\n1. \u53d6\u503c\uff08\u5982\u5206\u6bb5\u6570\uff0c\u6b64\u9898\u5373\u5efa\u4f10\u6728\u573a\u6570\uff09\u6700\u5927/\u5c0f\u5316\uff0c\u65b9\u4fbf\u8003\u8651\u4e8c\u5206\u8303\u56f4\u7684\u8f6c\u79fb\n\n1. \u7b54\u6848\u7684\u8ba1\u7b97\u3001dp\u7684\u7ec6\u8282\u3001\u4e8c\u5206\u8303\u56f4\u90fd\u8ddf\u53d6\u503c\u7684\u6700\u5927/\u5c0f\u5316\u7684\u9009\u62e9\u76f8\u9002\u5e94\n\n1. \u6709\u4e9b\u6570\u636e\u5bfc\u81f4\u6700\u7ec8\u4e8c\u5206\u51fa\u6765\u7684\u9619\u503c\u5206\u7684\u6bb5\u6570\u591a/\u5c11\uff0c\u8003\u8651\u5230\u5206\u7684\u6bb5\u6570\u56fa\u5b9a\uff0c\u7b54\u6848\u7684\u6700\u503c\u552f\u4e00\uff0c\u5f53\u524d\u6bb5\u6570\u7b49\u4e8e\u6240\u9700\u6bb5\u6570\u65f6\u76f4\u63a5\u9000\u51fa\u4e8c\u5206\u53d6\u5f53\u524d\u503c\uff0c\u901f\u5ea6\u548c\u6b63\u786e\u6027\u90fd\u6709\u4fdd\u969c\u3002\u9619\u503c\u9700\u8981\u5c0f\u6570\u624d\u80fd\u5206\u6bb5\u6b63\u786e\u7684\u60c5\u51b5\u5c3d\u91cf\u901a\u8fc7 1 \u907f\u514d\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u7ec6\u8282\u5728\u6ce8\u91ca\u4e2d\uff09\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=105,inf=0x3f3f3f3f;\nint n,k,cnt,top;\nint head[N],c[N],fa[N],len[N],dep[N],st[N];\nstruct edge\n{\n\tint to,nxt;\n}pl[N*2];\nvoid add(int u,int v)\n{\n\tpl[++cnt].nxt=head[u];\n\tpl[cnt].to=v;\n\thead[u]=cnt;\n}\nstruct wqs\n{\n\tint mid,ansv,sumf;\n\tint f[N][N],g[N][N];\n\tvoid dfs(int u)\n\t{\n\t\tint v;\n\t\tsumf+=c[u]*dep[u];\n\t\tfor(int i=head[u];i;i=pl[i].nxt)\n\t\t{\n\t\t\tv=pl[i].to;\n\t\t\tif(v==fa[u])continue;\n\t\t\tdep[v]=dep[u]+len[v];\n\t\t\tdfs(v);\n\t\t}\n\t}\n\tvoid dp(int u)\n\t{\n\t\tint v;\n\t\tst[++top]=u;\n\t\tfor(int i=1;i<=top;i++)f[u][st[i]]=g[u][st[i]]=0;//\u6ce8\u610f\u521d\u59cb\u5316 \n\t\tfor(int i=head[u];i;i=pl[i].nxt)\n\t\t{\n\t\t\tv=pl[i].to;\n\t\t\tif(v==fa[u])continue;\n\t\t\tdp(v);\n\t\t\tfor(int j=1;j<=top;j++)\n\t\t\t{\n\t\t\t\tf[u][st[j]]+=f[v][st[j]];\n\t\t\t\tg[u][st[j]]+=g[v][st[j]];\n\t\t\t}\n\t\t}\n\t\tf[u][u]+=mid;g[u][u]++;//\u7528\u7956\u5148\u662f\u81ea\u5df1\u4ee3\u8868\u8be5\u70b9\u5efa\u4f10\u6728\u573a\u7684\u60c5\u51b5 \n\t\tfor(int i=1;i<=top;i++)\n\t\t{\n\t\t\tf[u][st[i]]+=c[u]*(dep[u]-dep[st[i]]);\n\t\t\tif(f[u][u]<=f[u][st[i]])f[u][st[i]]=f[u][u],g[u][st[i]]=g[u][u];//\u5c0f\u4e8e\u7b49\u4e8e\u53f7\u8868\u793a\u4e86\u5728\u4ee3\u4ef7\u6700\u5c11\u65f6\u5c3d\u53ef\u80fd\u591a\u5efa\u4f10\u6728\u573a \n\t\t}\n\t\ttop--;\n\t}\n\tvoid solve()\n\t{\n\t\tk++;// \u5148\u9009\u4e0a bytetown\n\t\tsumf=0;\n\t\tdfs(0);\n\t\tint l=0,r=sumf;\n\t\twhile(l<=r)\n\t\t{\n\t\t\tmid=(l+r)>>1;\n\t\t\tdp(0);\n\t\t\tif(g[0][0]>=k)ansv=mid;//\u5c3d\u53ef\u80fd\u591a\u9009\u540e\u5927\u4e8e\u7b49\u4e8e k\uff0c\u8bf4\u660e\u53ef\u80fd\u8c03\u6574\u5230 k \uff0c\u8bb0\u5f55\u7b54\u6848 \n\t\t\tif(g[0][0]==k)break;\n\t\t\tif(g[0][0]>k)l=mid+1;\n\t\t\telse r=mid-1;\n\t\t}\n\t\tmid=ansv;dp(0);\n\t\t//cout<<ansv<<endl;\n\t\tcout<<f[0][0]-k*mid;//\u6700\u7ec8\u7b54\u6848\u51cf\u53bb\u9644\u52a0\u7684\u4ee3\u4ef7 \n\t}\n}s1;\nstruct treedp// \u8fd9\u91cc\u6211\u4eec\u7684\u7b2c\u4e8c\u7ef4 j \u8868\u793a \u7956\u5148\u662f st[j] ,f[u][u][k] \u8868\u793a u \u5efa\u4f10\u6728\u573a \uff0c\u9664 u \u5916\u8fd8\u5efa\u4e86 k \u4e2a\u4f10\u6728\u573a \n{\n\tint siz[N],f[N][N][N];\n\tvoid solve()\n\t{\n\t\tdp(0);\n\t\tcout<<f[0][1][k];\n\t}\n\tvoid dp(int u)\n\t{\n\t\tint v;\n\t\tst[++top]=u;\n\t\tsiz[u]=1;\n\t\tfor(int i=head[u];i;i=pl[i].nxt)\n\t\t{\n\t\t\tv=pl[i].to;\n\t\t\tif(v==fa[u])continue;\n\t\t\tdep[v]=dep[u]+len[v];\n\t\t\tdp(v);\n\t\t\tfor(int j=1;j<=top;j++)\n\t\t\t{\n\t\t\t\tfor(int t=min(siz[u]+siz[v],k);t>=0;t--)\n\t\t\t\t{\n\t\t\t\t\tf[u][j][t]+=f[v][j][0];//\u56e0\u4e3a f \u7684\u521d\u503c\u90fd\u662f 0 \uff0c\u5148\u9009\u4e00\u4e2a\u72b6\u6001\u5f3a\u5236\u8f6c\u79fb\u5728\u53d6 min \n\t\t\t\t\tfor(int l=max(1,t-siz[u]);l<=min(siz[v],t);l++)// \u6b64\u65f6 siz[u] \u8868\u793a v \u4e4b\u524d\u7684\u5b50\u6811\u5927\u5c0f\u548c \uff0c\u7b2c\u4e09\u7ef4\u5927\u4e8esiz[u] \u7684\u72b6\u6001\u8fd8\u672a\u8ba1\u7b97\u65e0\u610f\u4e49 \n\t\t\t\t\t\tf[u][j][t]=min(f[u][j][t],f[u][j][t-l]+f[v][j][l]);//\u56e0\u6b64 t-l<=siz[u] \uff0c\u5373 l>=t-siz[u] ,\u4e0d\u6ce8\u610f\u8fd9\u91cc\u4f1a\u88ab\u94fe\u5361\u5230\u66f4\u52a3\u7684\u590d\u6742\u5ea6 \n\t\t\t\t}\n\t\t\t}\n\t\t\tsiz[u]+=siz[v];\n\t\t}\t\n\t\tfor(int i=top;i>=1;i--)\n\t\t\tfor(int j=0;j<=min(siz[u],k);j++)\n\t\t\t{\n\t\t\t\tf[u][i][j]+=c[u]*(dep[u]-dep[st[i]]);\n\t\t\t\tif(j>=1)f[u][i][j]=min(f[u][i][j],f[u][top][j-1]); \n\t\t\t}\n\t\ttop--;\n\t}\n}s2;\nint main()\n{\n\tcin>>n>>k;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>c[i]>>fa[i]>>len[i];\n\t\tadd(fa[i],i);\n\t}\n\ts2.solve();\n\treturn 0;\n}\n```\n",
        "postTime": 1594886794,
        "uid": 68865,
        "name": "slgdsxw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3354 [IOI2005]Riv \u6cb3\u6d41"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u4e2a\u5e26\u6709\u6743\u503c\u7684\u70b9\uff0c\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u5c31\u5730\u6d88\u6389\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5e26\u6709\u6743\u503c\u7684\u8fb9\u9001\u5230\u5b83\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u8981\u6c42\u6240\u6709\u70b9\u90fd\u6d88\u6389\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n\n\u9996\u5148\u9700\u8981\u4e86\u89e3\u7684\u77e5\u8bc6\u70b9\u5c31\u662f\u591a\u53c9\u6811\u8f6c\u4e8c\u53c9\u6570\uff0c\u4e5f\u5c31\u662f\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u4ece\u540e\u5f80\u524ddp\u3002\u81f3\u4e8e\u5b9e\u73b0\u4ece\u540e\u5f80\u524d\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u9012\u5f52\u5b9e\u73b0\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u9884\u5904\u7406\u4e00\u4e0b\uff0c\u641c\u4e00\u904d\u5c06\u8f6c\u6362\u540e\u7684\u4e8c\u53c9\u6811\uff0c\u8ba9\u6bcf\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u548c\u5144\u5f1f\u5728\u65b0\u5e8f\u5217\u7684\u540e\u9762\u3002\u4e24\u79cd\u65b9\u6cd5\u7686\u53ef\u3002\n\n\n\u81f3\u4e8e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u7528 f[i][j][k] \u8868\u793a\u76ee\u524d\u8003\u8651\u7b2c i \u4e2a\u70b9\uff0c j \u8868\u793a i \u6240\u6709\u7684\u7956\u5148\u4e2d\u79bb i \u6700\u8fd1\u5e76\u4e14\u5efa\u4e86\u4f10\u6728\u573a\u7684\u8282\u70b9\uff0c i \u7684\u513f\u5b50\u4ee5\u53ca i \u7684\u5144\u5f1f\u4e00\u5171\u5efa\u4e86 k \u4e2a\u4f10\u6728\u573a\u3002\u90a3\u4e48\u5bf9\u4e8e i \u8fd9\u4e2a\u70b9\u5c31\u6709\u4e24\u79cd\u9009\u62e9\uff1a1\u3001\u4e0d\u5728\u8fd9\u4e2a\u8282\u70b9\u5efa\u9020\u4f10\u6728\u573a\u30022\u3001\u5728\u8fd9\u4e2a\u8282\u70b9\u5efa\u3002\n\n\u8f6c\u79fb\u5982\u4e0b\uff1a\n\n\uff08\u5728\uff09f[i][j][k]=min(f[i][j][k],f[leftson][i][l]+f[rightson][j][k-l-1])\n\n\uff08\u4e0d\u5728\uff09f[i][j][k]=min(f[i][j][k],f[leftson][j][l]+f[rightson][j][k-l]+val[i]\\*(dis i..j))\n\n\n\u8fd9\u91cc\u89e3\u91ca\u4e00\u4e0b\uff1a\n\n\n\u5728\u8fd9\u4e2a\u8282\u70b9\u5efa\u4f10\u6728\u573a\u65f6\uff0c i \u7684\u513f\u5b50\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u9001\u5230 i \u8282\u70b9\uff0c\u56e0\u6b64\u5de6\u513f\u5b50\u4e3a f[leftson][i][l] \uff1b\u4f46 i \u7684\u5144\u5f1f\u4eec\u65e0\u6cd5\u5230\u8fbe i \uff0c\u6240\u4ee5\u5b83\u4eec\u4f9d\u7136\u9700\u8981\u9001\u5230 j \uff08\u79bb i \u6700\u8fd1\u5e76\u4e14\u5efa\u4e86\u4f10\u6728\u573a\u7684\u8282\u70b9\uff09\uff0c\u56e0\u6b64\u53f3\u513f\u5b50\u4e3a f[rightson][j][k-l-1] \u3002\u53e6\u5916\uff0c\u7531\u4e8e i \u5efa\u9020\u7528\u53bb\u4e00\u4e2a\u4f10\u6728\u573a\uff0c\u6240\u4ee5\u65b9\u7a0b\u4e2d\u7684\u7b2c\u4e09\u7ef4\u9700\u51cf\u4e00\u3002\n\n\n\u4e0d\u5728\u8fd9\u91cc\u5efa\u65f6\uff0c\u5de6\u53f3\u513f\u5b50\u90fd\u9700\u9001\u5230 j \uff0c\u4f46\u8fd8\u8981\u52a0\u4e0a i \u70b9\u6743 \\* i..j \u7684\u8ddd\u79bb\u3002\u8fd9\u4e2a\u5f88\u597d\u7406\u89e3\uff0c\u4f46\u662f\u6b64\u5904\u4e0d\u9700\u8981\u5904\u7406 i..j \u8282\u70b9\u4e2d\u7684\u8282\u70b9\u7684\u70b9\u6743\uff0c\u56e0\u4e3a\u6b64\u5904\u53ea\u8003\u8651 i \u70b9\uff0c i..j \u7684\u8282\u70b9\u4ee5\u540e\u53ef\u4ee5\u63a8\u51fa\u3002\n\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\nusing namespace std;\nstruct node{\n    int left,right,num,dis;\n}gg[105];\nint dui[105],deep[105],child[105],f[105][105][51],tot,fa[105];\nconst int INF=0x7f7f7f7f;\nvoid dfs(int k,int dep)//\u751f\u6210\u4ece\u540e\u5f80\u524d\u63a8\u7684\u5e8f\u5217\n{\n    dui[++tot]=k;\n    deep[k]=dep+gg[k].dis;\n    int i=gg[k].left;\n    while(i)\n    {\n        dfs(i,deep[k]);\n        i=gg[i].right;\n    }\n}\nint main()\n{\n    int n,K;\n    cin>>n>>K;\n    memset(fa,-1,sizeof fa);\n    for(int i=1;i<=n;i++)\n    {\n        int a,b,c;\n        cin>>a>>b>>c;\n        if(!child[b])\n            gg[b].left=i;\n        else\n            gg[child[b]].right=i;\n        child[b]=i;\n        gg[i].num=a;\n        gg[i].dis=c;\n        fa[i]=b;\n    }//\u591a\u53c9\u8f6c\u4e8c\u53c9 \n    dfs(0,0);\n    memset(f,INF,sizeof f);//\u9700\u8981\u8d4b\u521d\u503c\n    memset(f[0],0,sizeof f[0]);//\n    for(int i=n+1;i>=2;i--)\n    {\n        int now=dui[i];\n        int le=gg[now].left;\n        int ri=gg[now].right;\n        for(int j=fa[now];j!=-1;j=fa[j])//\u679a\u4e3e\u7236\u4eb2\u8282\u70b9 \n            for(int k=0;k<=K;k++)\n            {\n                for(int l=0;l<=k;l++)//\u4e0d\u9009 i\n                    if(f[le][j][l]!=INF&&f[ri][j][k-l]!=INF)\n                    {\n                        int add=gg[now].num*(deep[now]-deep[j]);\n                        int op=f[le][j][l]+f[ri][j][k-l]+add;\n                        f[now][j][k]=min(f[now][j][k],op);\n                    }\n                for(int l=0;l<k;l++)//\u9009 i\n                    if(f[le][now][l]!=INF&&f[ri][j][k-l-1]!=INF)\n                    {\n                        int op=f[le][now][l]+f[ri][j][k-l-1];\n                        f[now][j][k]=min(op,f[now][j][k]);\n                    }\n            }\n    }\n    printf(\"%d\",f[gg[0].left][0][K]);\n}\n```",
        "postTime": 1484140576,
        "uid": 32378,
        "name": "Malgr\u00e9_L_Guerre",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3354 \u3010\u6cb3\u6d41\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/P3354)\n\n\u8fd9\u9053\u9898\u7684\u5927\u81f4\u610f\u601d\u5c31\u662f\uff0c\u5728\u4e00\u4e2a\u4ee50\u53f7\u8282\u70b9\u4e3a\u6839\u7684\u6811\u4e0a\uff0c\u6211\u9700\u8981\u5728k\u4e2a\u7ed3\u70b9\u4fee\u5efa\u4f10\u6728\u573a\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5b83\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u662f\u4ed6\u6728\u5934\u4ea7\u91cf\u4e58\u4e0a\u5b83\u79bb\u4e0b\u6e38\u6700\u8fd1\u4f10\u6728\u573a\u7684\u8ddd\u79bb\u3002\u8ba9\u4f60\u5408\u7406\u5206\u914d\u4f10\u6728\u573a\u5b89\u7f6e\u8ddd\u79bb\u4ee5\u4f7f\u5f97\u8d21\u732e\u6700\u5c0f\u3002\n\n\u5176\u5b9e\u5f88\u5bb9\u6613\u5c31\u4f1a\u60f3\u5230\u7528$f_{i,j}$\u6765\u8868\u793a\u5728i\u53f7\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u4fee\u5efaj\u4e2a\u4f10\u6728\u573a\u6240\u5f97\u7684\u6700\u5c0f\u8d21\u732e\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u72b6\u6001\u5e76\u4e0d\u597d\u7ef4\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6539\u53d8\u4e00\u5b9a\u7684\u60f3\u6cd5\u3002\n\n\u6211\u4eec\u8fd9\u91cc\u91c7\u7528$f_{i,j,k}$\u8868\u793a\u5728i\u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u4fee\u5efak\u4e2a\u4f10\u6728\u573a\uff0c\u5e76\u4e14i\u4e0b\u6e38\u7684\u7b2c\u4e00\u4e2a\u4f10\u6728\u573a\u5728j\uff0c\u7136\u540e\u8be5\u72b6\u6001\u4e0b\u8d21\u732e\u7684\u6700\u5c0f\u503c\u3002\u7136\u540e\u6211\u4eec\u518d\u8bb0\u5f55$g_{i,j,k}$\u4e3ai\u53f7\u70b9\u4e0a\u5efa\u9020\u4f10\u6728\u573a\uff0c\u5e76\u4e14\u5728i\u7684\u5b50\u6811\u4e0a\u4e00\u5171\u6709k\u4e2a\u4f10\u6728\u573a\uff0ci\u4e0b\u6e38\u7684\u7b2c\u4e00\u4e2a\u4f10\u6728\u573a\u662fj\uff0c\u7136\u540e\u8be5\u72b6\u6001\u4e0b\u7684\u6700\u5c0f\u503c\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u6700\u540e\u63a8\u5230$f_{0,0,k}$\u7136\u540e\u8f93\u51fa\u5c31\u662f\u6700\u540e\u7b54\u6848\u4e86\u3002\n\n\u518d\u8003\u8651\u52a8\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u8f6c\u79fb\u7684\u8fc7\u7a0b\u5c31\u662f\u4e00\u4e2a\u80cc\u5305\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u4e3a\u4e86\u8bb0\u5f55\u67d0\u4e00\u7ed3\u70b9\u6240\u6709\u7684\u7956\u5148\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728dfs\u91cc\u52a0\u4e0a\u624b\u5199\u6808\uff08\u6211\u6bd4\u8f83\u61d2\uff0c\u7528\u4e86\u4e00\u4e2adeque\uff09\uff0c\u8fd9\u6837\u53ea\u9700\u8981\u904d\u5386\u6808\u5c31\u53ef\u4ee5\u77e5\u9053\u8be5\u70b9\u6240\u6709\u7684\u7956\u5148\u3002\n\n## \u4ee3\u7801\n\n\u7b80\u5355\u80cc\u5305\u6a21\u62df\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 105;\n\nstruct edge\n{\n\tint to, dist;\n};\n\nvector<vector<edge> > graph;\n\nint c[maxn], depth[maxn];\nlong long f[maxn][maxn][maxn], g[maxn][maxn][maxn];\ndeque<int> st;\nint n, k;\n\nvoid dfs(int p)\n{\n\tst.push_back(p);\n\tfor (vector<edge>::iterator i = graph[p].begin(); i != graph[p].end(); i++)\n\t{\n\t\tdepth[i->to] += depth[p] + i->dist;\n\t\tdfs(i->to);\n\t\tfor (deque<int>::iterator j = st.begin(); j != st.end(); j++)\n\t\t\tfor (int l = k; ~l; l--)\n\t\t\t{\n\t\t\t\tf[p][*j][l] += f[i->to][*j][0];\n\t\t\t\tg[p][*j][l] += f[i->to][p][0];\n\t\t\t\tfor (int x = 0; x <= l; x++)\n\t\t\t\t{\n\t\t\t\t\tf[p][*j][l] = min(f[p][*j][l], f[p][*j][l - x] + f[i->to][*j][x]);\n\t\t\t\t\tg[p][*j][l] = min(g[p][*j][l], g[p][*j][l - x] + f[i->to][p][x]);\n\t\t\t\t}\n\t\t\t}\n\t}\n\tfor (deque<int>::iterator j = st.begin(); j != st.end(); j++)\n\t{\n\t\tf[p][*j][0] += c[p] * (depth[p] - depth[*j]);\n\t\tfor (int l = 1; l <= k; l++)\n\t\t\tf[p][*j][l] = min(f[p][*j][l] + c[p] * (depth[p] - depth[*j]), g[p][*j][l - 1]);\n\t}\n\tst.pop_back();\n\treturn;\n}\n\nint main()\n{\n\t// freopen(\"riv.in\", \"r\", stdin);\n\t// freopen(\"riv.out\", \"w\", stdout);\n\tscanf(\"%d%d\", &n, &k);\n\tgraph.resize(n + 1);\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tint fa, dist;\n\t\tscanf(\"%d%d%d\", c + i, &fa, &dist);\n\t\tgraph[fa].push_back((edge){i, dist});\n\t}\n\tdfs(0);\n\tprintf(\"%d\\n\", f[0][0][k]);\n\treturn 0;\n}\n```",
        "postTime": 1591915436,
        "uid": 98482,
        "name": "Macesuted",
        "ccfLevel": 0,
        "title": "P3354"
    },
    {
        "content": "### [LG3354](https://www.luogu.com.cn/problem/P3354) [IOI2005]Riv \u6cb3\u6d41\r\n\r\n> \u7ed9\u5b9a\u4e00\u9897\u70b9\u7684\u7f16\u53f7\u4e3a $0\\sim n$ \u5e76\u4ee5 $0$ \u4e3a\u6839\u7684\u6709\u6839\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u6743\u503c $w_i$ \u548c\u5b83\u7236\u4eb2\u5230\u5b83\u7684\u8ddd\u79bb $d_i$\u3002$0$ \u53f7\u70b9\u521d\u59cb\u4e3a\u5173\u952e\u70b9\uff0c\u73b0\u5728 $1\\sim n$ \u4e2d\u9009\u62e9 $k$ \u4e2a\u70b9\u4f5c\u4e3a\u5173\u952e\u70b9\uff0c\u5b9a\u4e49\u8fd9\u68f5\u6811\u7684\u82b1\u8d39\u4e3a\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u4e58\u4e0a\u5230\u5176\u4e3a\u5173\u952e\u70b9\u7684**\u7956\u5148**\u7684\u8ddd\u79bb\u7684\u548c\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u672c\u8eab\u4e3a\u5173\u952e\u70b9\u5219\u8ddd\u79bb\u4e3a $0$\u3002\u73b0\u5728\u8be2\u95ee\u4f60\u8fd9\u4e2a\u82b1\u8d39\u7684\u6700\u5c0f\u503c\u3002\r\n>\r\n> $n\\leq 100,k\\leq \\min(n,50)$\u3002\r\n\r\n\u6b63\u89e3\u662f\u6811\u5f62 DP\uff0c\u800c\u4e14\u8fd9\u4e2a DP \u5bf9\u6211\u6765\u8bf4\u5e76\u4e0d\u597d\u60f3\u3002\u6ce8\u610f\u5230\u8fd9\u9898\u7684 $n$ \u6bd4\u8f83\u5c0f\uff08\u4e3b\u8981\u662f\u56e0\u4e3a\u8fd9\u662f\u9053\u8001\u9898\u4e86\uff09\uff0c\u5e76\u4e14\u662f\u6700\u4f18\u5316\u95ee\u9898\uff0c\u4e8e\u662f\u53ef\u4ee5\u60f3\u5230\u6a21\u62df\u9000\u706b\u3002\r\n\r\n\u5047\u5982\u6211\u4eec\u786e\u5b9a\u4e86\u8fd9 $k$ \u4e2a\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u975e\u5e38\u6734\u7d20\u7684\u904d\u5386\u6765\u6c42\u51fa\u6b64\u79cd\u60c5\u51b5\u7684\u82b1\u8d39\u3002\r\n\r\n```cpp\r\nvoid dfs(int u,int s){\r\n\tif(isk[u])s=0;//\u5047\u5982\u662f\u5173\u952e\u70b9\r\n\tnow+=w[u]*s;\r\n\tfor(int i=head[u];i;i=edge[i].next)\r\n\t\tdfs(edge[i].to,s+edge[i].weight);\r\n}\r\n```\r\n\r\n\u7136\u540e\u5c06\u8fd9 $n$ \u4e2a\u70b9\u5206\u6210\u524d $k$ \u4e2a\u548c\u540e $n-k$ \u4e2a\uff0c\u6bcf\u6b21\u5c1d\u8bd5\u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5e76\u4ee5\u524d $k$ \u4e2a\u70b9\u4e3a\u5173\u952e\u70b9\u8ba1\u7b97\u6b64\u65f6\u7b54\u6848\u3002\u5982\u679c\u6b64\u65f6\u7b54\u6848\u6bd4\u5f53\u524d\u6700\u4f18\u89e3\u66f4\u4f18\uff0c\u5219\u76f4\u63a5\u66ff\u6362\u6700\u4f18\u89e3\uff1b\u5426\u5219\u5224\u65ad\u6839\u636e\u5f53\u524d\u6e29\u5ea6\u5224\u65ad\u662f\u5426\u4ea4\u6362\u3002\r\n\r\n```cpp\r\ninline void SA(){\r\n\tfor(double T=1000;T>=1e-9;T*=0.999){\r\n\t\trandom_shuffle(a+1,a+1+k);\r\n\t\trandom_shuffle(a+1+k,a+1+n);\r\n\t\tswap(a[k],a[k+1]);\r\n\t\tsolve();\r\n\t\tint der=now-ans;\r\n\t\tif(der<0)ans=now;\r\n\t\telse if(exp(-der/T)*100000<=dist(gen))swap(a[k],a[k+1]);\r\n\t}\r\n}\r\n```\r\n\r\n#### \u4f18\u5316\r\n\r\n\u7136\u800c\u8fd9\u6837\u5c31\u8db3\u591f\u4e86\u5417\uff1f\u4f60\u4f1a\u53d1\u73b0\u4f60\u4f1a\r\n\r\n![](https://cdn.luogu.com.cn/upload/image_hosting/9utt411l.png)\r\n\r\n\u5e76\u4e14\u6211\u8c03\u53c2\u8c03\u4e86\u4e00\u4e2a\u534a\u5c0f\u65f6\u4ecd\u672a\u53d6\u5f97\u8fdb\u6b65\u3002\r\n\r\n\u6211\u4eec\u663e\u7136\u5e0c\u671b\u5173\u952e\u70b9\u5c3d\u91cf\u5206\u6563\u3002\u5982\u679c\u662f $n=100,k=50$ \u8fd9\u79cd\u60c5\u51b5\uff0c\u5728\u6570\u636e\u57fa\u672c\u968f\u673a\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u5173\u952e\u70b9\u4e4b\u95f4\u95f4\u9694\u6446\u653e\u4f1a\u66f4\u52a0\u4f18\u79c0\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u53ef\u4ee5\u8ba9\u521d\u59cb\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u70b9\u7684\u5206\u5e03\u60c5\u51b5\u5c3d\u53ef\u80fd\u9760\u8fd1\u6700\u4f18\u89e3\u3002\r\n\r\n\u4e8e\u662f\u6211\u4eec\u6309\u7167\u70b9\u7684\u6df1\u5ea6\u8fdb\u884c\u6446\u653e\uff0c\u8ddd\u79bb $0$ \u53f7\u70b9\u4e3a\u5076\u6570\u7684\u70b9\u653e\u7f6e\u5728\u5de6\u4fa7\uff0c\u5947\u6570\u7684\u70b9\u653e\u7f6e\u5728\u53f3\u4fa7\u3002\u7136\u540e\u53d6\u5de6\u4fa7 $k$ \u4e2a\u70b9\u4f5c\u4e3a\u5173\u952e\u70b9\u8fdb\u884c\u6a21\u62df\u9000\u706b\u3002\r\n\r\n\u6700\u540e\u914d\u5408\u79cd\u5b50 $1919810$ \u5373\u53ef\u901a\u8fc7\u6b64\u9898\u3002\r\n\r\n\u6700\u540e\u5949\u4e0a\u4e11\u964b\u7684\u4ee3\u7801\u3002\r\n\r\n```cpp\r\nmt19937 gen(1919810);\r\nuniform_int_distribution<>dist(1,100000);\r\nconst int N=102,INF=0x7fffffff;\r\nstruct chainstar{\r\n\tint next,to,weight;\r\n}edge[N<<1];int head[N],cnt;\r\ninline void addline(int u,int v,int w){\r\n\tedge[++cnt].to=v;\r\n\tedge[cnt].next=head[u];\r\n\thead[u]=cnt;\r\n\tedge[cnt].weight=w;\r\n}\r\nint a[N],n,k,w[N],ans=INF,now,p1,p2;\r\nbool isk[N];\r\nvoid dfs(int u,int s){\r\n\tif(isk[u])s=0;\r\n\tnow+=w[u]*s;\r\n\tfor(int i=head[u];i;i=edge[i].next)\r\n\t\tdfs(edge[i].to,s+edge[i].weight);\r\n}\r\ninline void solve(){\r\n\tnow=0;\r\n\tfor(int i=1;i<=k;++i)isk[a[i]]=1;\r\n\tfor(int i=k+1;i<=n;++i)isk[a[i]]=0;\r\n\tdfs(0,0);\r\n}\r\ninline void SA(){\r\n\tfor(double T=1000;T>=1e-9;T*=0.999){\r\n\t\trandom_shuffle(a+1,a+1+k);\r\n\t\trandom_shuffle(a+1+k,a+1+n);\r\n\t\tswap(a[k],a[k+1]);\r\n\t\tsolve();\r\n\t\tint der=now-ans;\r\n\t\tif(der<0)ans=now;\r\n\t\telse if(exp(-der/T)*100000<=dist(gen))swap(a[k],a[k+1]);\r\n\t}\r\n}\r\nvoid getlis(int u,int d){\r\n\tif(u!=0){\r\n\t\tif(d&1)a[++p1]=u;\r\n\t\telse a[p2--]=u;\r\n\t}\r\n\tfor(int i=head[u];i;i=edge[i].next)\r\n\t\tgetlis(edge[i].to,d+1);\r\n}\r\nint main(){\r\n//\tfreopen(\"data.in\",\"r\",stdin);\r\n//\tfreopen(\"mine.out\",\"w\",stdout);\r\n\tsrand(1919810);\r\n\tp2=n=read(),k=read();\r\n\tfor(int i=1;i<=n;++i){\r\n\t\tw[i]=read();\r\n\t\tint f=read(),d=read();\r\n\t\taddline(f,i,d);\r\n\t}\r\n\tgetlis(0,1);\r\n\twhile((double)clock()/CLOCKS_PER_SEC<=0.90)SA();\r\n\tprintf(\"%d\\n\",ans);\r\n\treturn 0;\r\n}\r\n```\r\n\r\n",
        "postTime": 1666183655,
        "uid": 360491,
        "name": "BigSmall_En",
        "ccfLevel": 6,
        "title": "LG3354 [IOI2005]\u6cb3\u6d41 \u9898\u89e3"
    },
    {
        "content": "\u672c\u9898\u867d\u4e3aioi\u539f\u9898\uff0c\u4f46\u6574\u4f53\u601d\u8def\u7b97\u6cd5\u96be\u5ea6\u5374\u4e0d\u5fc5\u63d0\u9ad8\u7ec4\u9ad8\u591a\u5c11\u3002\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u6df1\u641c\u4e0edp\u7684\u7ed3\u5408\u3002\u6838\u5fc3\u7b97\u6cd5\u662f\u5c06\u6734\u7d20\u7684\u7236\u4eb2\u8868\u793a\u6cd5\u8f6c\u6362\u4e3a\u5144\u5f1f\u513f\u5b50\u8868\u793a\u6cd5\uff0c\u81f3\u4e8edp\u65b9\u7a0b\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u63a8\u5bfc\u4e00\u4e0b\uff0c\u5982\u679c\u4e0d\u4f1a\u5144\u5f1f\u513f\u5b50\u8868\u793a\u6cd5\u53ef\u4ee5\u5728\u6570\u636e\u7ed3\u6784\u4e66\u4e0a\u627e\u5230\u81ea\u884c\u5b66\u4e60\uff0c\u8fd9\u662f\u672c\u9898\u6700\u5927\u7684\u96be\u70b9\u3002\n\n\u4e0d\u591a\u8bf4\u4e86\uff0c\u8d34\u4ee3\u7801\uff1a\n\n\n\n```cpp\n#include<cstring> \n#include<iostream>\nusing namespace std;\nint son[105],bro[105],w[105],v[105],d[105],dis[105][105],n,i,k,f[105][105][105];\nvoid dfs(int u,int liml)\n{\n int s=son[u];\n int b=bro[u];\n for(int l=1; l<=liml; l++)\n   dis[u][l]=dis[v[u]][l-1]+d[u];\n if(s!=0) dfs(s,liml+1);\n if(b!=0) dfs(b,liml);\n for(int i=0; i<=n; i++)\n  for(int j=0; j<=n-i; j++)\n   for(int l=1; l<=liml; l++)\n   {\n    f[u][i+j][l]=min(f[u][i+j][l],f[s][i][l+1]+f[b][j][l]+w[u]*dis[u][l]); \n    f[u][i+j+1][l]=min(f[u][i+j+1][l],f[s][i][1]+f[b][j][l]);\n   }\n}\nint main()\n{\n cin>>n>>k;\n for(int i=1; i<=n; i++) \n {\n  cin>>w[i]>>v[i]>>d[i];\n  bro[i]=son[v[i]];\n  son[v[i]]=i;\n }\n memset(f,0x7f,sizeof(f));\n for (int i = 0; i <= n; i++) \n   for (int j = 0; j <= n; j++)\n     f[0][i][j] = 0;\n dfs(son[0],1);\n cout<<f[son[0]][k][1]<<endl; \n}\n```",
        "postTime": 1502508655,
        "uid": 9156,
        "name": "\u5fae\u96e8\u71d5\u53cc\u98de",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3354 \u3010\u6cb3\u6d41\u3011"
    },
    {
        "content": "\u79c1\u4ee5\u4e3a\u6ca1\u5fc5\u8981\u8f6c\u4e8c\u53c9\u6811\n\n\u672c\u9898\u5e94\u4e3a\u4e09\u7ef4dp,\u4f53\u73b0\u7684\u662f\u6cdb\u5316\u7269\u54c1\u7684\u80cc\u5305\u7684\u601d\u60f3(\u8be6\u89c1<\u80cc\u5305\u4e5d\u8bb2>)\n\n\u53ea\u662f\u51b3\u5b9a\u4ef7\u503c(\u672c\u9898\u4f53\u73b0\u4e3a`\u8282\u7701\u7684\u8d39\u7528`)\u7684\u56e0\u7d20\u4e0d\u662f\u5355\u4e00\u7684\u91cd\u91cf(\u4f53\u73b0\u4e3a`\u4ea7\u6811\u91cf`),\u6b64\u5916\u8fd8\u6709\u4e00\u4e2a\u7ef4\u5ea6`\u636e\u4e0a\u4e00\u4e2a\u4f10\u6728\u573a\u7684\u8ddd\u79bb`\n\n\u4ee3\u7801\u89c1\u4e0b.\u84bb\u7684\u82f1\u8bed\u4e0d\u662f\u5f88\u597d\u8bf7\u89c1\u8c05\n\n```c++\n//by beautyyu\n#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#define ull unsigned long long\nusing namespace std;\nstruct edge{\n    int v,w,nxt;\n}e[40000];\nint head[200],pwp[200],pre[200],memf[200][200][100],memd[200][200][100];\n//pwp--sum weight of a subtree,pre--distance from a node to root\n//memf--memory for function'f',the same as memd\nint w[200],n,k;\nint f(int rt,int fa,int kk);\nint d(int l,int fa,int kk);\nint dfs(int rt,int pr){//calculate 'pwp' and 'pre'\n\tpre[rt] = pr;\n\tpwp[rt] = w[rt];\n\tfor (int i = head[rt];i;i = e[i].nxt)\n\t\tpwp[rt] += dfs(e[i].v,pr + e[i].w);\n\treturn pwp[rt];\n}\nint main (){\n\tscanf(\"%d%d\",&n,&k);\n\tint al,be,cnt = 0;\n\tfor (int i = 1;i <= n;++ i){\n\t\tscanf(\"%d%d%d\",&w[i],&al,&be);\n\t\te[++ cnt] = edge{i,be,head[al]};\n\t\thead[al] = cnt;\n\t}\n\t//read end\n\t//first set\n\tdfs(0,0);\n\tint sum_ = 0;\n\tfor (int i = 1;i <= n;++ i)\n\t\tsum_ += w[i] * pre[i];\n\tmemset(memf,-1,sizeof(memf));\n\tmemset(memd,-1,sizeof(memd));\n\t//main code\n\tcout << sum_ - f(0,0,k);\n    return 0;\n}\nint f(int rt,int fa,int kk){\n//the value produced by a subtree'rt',the last sawmill 'fa',the rest sawmill I can build\n\tif(memf[rt][fa][kk] != -1) return memf[rt][fa][kk];\n\tif(!kk) return memf[rt][fa][kk] = 0;\n\treturn  memf[rt][fa][kk] =  max(d(head[rt],fa,kk),\n\t\td(head[rt],rt,kk - 1) + pwp[rt] * (pre[rt] - pre[fa]));\n}\nint d(int l,int fa,int kk){\n//the value produced by a list begin with 'l','fa'and'kk'are the same as the function 'f'\n\tif ((!l)||(!kk)) return memd[l][fa][kk] = 0;\n\tif(memd[l][fa][kk] != -1) return memd[l][fa][kk];\n\tint ans = 0;\n\tfor (int i = 0;i <= kk;++ i)\n\t\tans = max(ans,f(e[l].v,fa,i) + d(e[l].nxt,fa,kk - i));\n\treturn memd[l][fa][kk] = ans;\n}\n```",
        "postTime": 1526394209,
        "uid": 61353,
        "name": "BeautyYu\u8a00\u91b4",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3354 \u3010[IOI2005]Riv \u6cb3\u6d41\u3011"
    }
]