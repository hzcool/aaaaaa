[
    {
        "content": "\u63d0\u4f9b\u7b80\u6d01\u7684\u4ee3\u7801\n\n\"\u76ee\u524d\u5438\u6c27\u6700\u4f18\u89e3\"\n\n\u8fd9\u9053\u9898\u76ee\u603b\u4f53\u4e0d\u96be\n\n\u7b80\u5355\u9898\u610f\uff1a\u5c06\u6811\u4e2d\u7684\u67d0\u4e9b\u8fb9\u5220\u53bb\u540e\uff0c\u4f7f\u5404\u4e2a\u8fde\u901a\u5757\u4e2d\u6700\u5927\u76f4\u5f84\u6700\u5c0f\n\n\u8bf6\uff0c\"\u6700\u5927\u76f4\u5f84\u6700\u5c0f\"\uff0c\u8fd9\u4e0d\u662f\u4e8c\u5206\u5417\n\n\u4e8e\u662f\u6211\u4eec\u60f3\u5230\uff0c\u4e8c\u5206\u76f4\u5f84\u7684\u6700\u5927\u957f\u5ea6\uff0c\u663e\u7136\uff0c\u7531\u4e8e\u7b54\u6848\u5408\u6cd5\u7684\u5355\u8c03\u6027\uff0c\u6b63\u786e\u6027\u662f\u53ef\u4ee5\u4fdd\u8bc1\u7684\n\n\u90a3\u4e48\u8be5\u5982\u4f55\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u6ee1\u8db3\u5462\uff1f\n\n\u6211\u4eec\u8bbe$f[x]$\u8868\u793a\"\u4ece$x$\u51fa\u53d1\u7684\u5728$x$\u5b50\u6811\u4e2d\u8def\u5f84\u7684\u6700\u5927\u957f\u5ea6\"\n\n\u5982\u679c\"$f[x]$\"\u52a0\u4e0a\"$max(f[to])$\"\u5927\u4e8e\u6211\u4eec\u4e8c\u5206\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u5c31\u65ad\u8fb9\u3002\n\uff08$max(f[to]$\u4e2d\u9664\u53bb$f[x]$\u6240\u5230\u7684\u90a3\u4e2a$f[to]$\uff0c\u5373\u6700\u5927\u7684\u4e24\u4e2a$f[to]$\u4e4b\u548c\u5927\u4e8e\u4e8c\u5206\u957f\u5ea6\uff0c\u4e0b\u6587\u7686\u662f\u6b64\u610f\uff09\n\n\u65ad\u54ea\u6761\uff1f\n\n\u8d2a\u5fc3\u7684\u60f3\uff0c\u56e0\u4e3a\"\u65ad\u8fb9\u540e\u88ab\u65ad\u7684\u8fb9\u518d\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u5f71\u54cd\"\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u7559\u4e0b\u6765\u7684\u8fb9\u5c3d\u53ef\u80fd\u7684\u5c0f\uff0c\u5c31\u7559\u4e0b$min(f[x]-1,f[to])+1$\u3002\n\n$min(f[x]-1,f[to])$\u8868\u793a\u513f\u5b50\u7684\u6700\u5927\u8def\u5f84\u957f\u5ea6\uff0c$+1$\u8868\u793a\u52a0\u4e0a\u513f\u5b50\u5230\u7236\u4eb2\u7684\u8fb9\u3002\n\n\u5224\u65ad\u7684\u6b63\u786e\u6027\uff1a\n\n\u56e0\u4e3a\u6211\u4eec\u4ece\u4e0b\u5f80\u4e0a\u65ad\u8fb9\uff0c\u800c\u4e14\u662f\u975e\u65ad\u4e0d\u53ef\u65f6\u624d\u65ad\uff0c\u53c8\u80fd\u4fdd\u8bc1\u65ad\u8fb9\u65f6\u4e00\u5b9a\u7559\u4e0b\u6700\u4f18\u89e3\uff0c\u6240\u4ee5\u5224\u65ad\u662f\u6b63\u786e\u7684\u3002\n\n### \u5b8c\u6574\u4ee3\u7801\u5949\u4e0a:\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<ctype.h>\nusing namespace std;\ninline int read(){\n\tint x=0,f=0;char ch=getchar();\n\twhile(!isdigit(ch))f|=ch=='-',ch=getchar();\n\twhile(isdigit(ch))x=x*10+(ch^48),ch=getchar();\n\treturn f?-x:x;\n}\nstruct Edge{\n\tint next,to;\n}edge[200007];\nint head[100007],cnt;\nint f[100007];\ninline void add_edge(int from,int to){\n\tedge[++cnt].next=head[from];\n\tedge[cnt].to=to;head[from]=cnt;\n}\nint t,n,s;//t\u8868\u793a\u5f53\u524d\u5220\u8fb9\u7684\u4e2a\u6570\nvoid dfs(int x,int fa,int maxl){\n\tif(t>s)return;//t>s\u8bf4\u660e\u4e0d\u80fd\u5b8c\u6210\n\tint lx=0;//lx\u8868\u793a\u6700\u5927f[to]\n\tfor(int i=head[x];i;i=edge[i].next){\n\t\tint to=edge[i].to;if(to==fa)continue;\n\t\tdfs(to,x,maxl);\n\t\tif(lx+f[to]>maxl)++t,lx=min(lx,f[to]);//\u5982\u679c\u9700\u8981\u5220\u8fb9\uff0c\u5c31\u4fdd\u7559\u6700\u5c0f\u503c\n\t\telse lx=max(lx,f[to]);//\u5426\u5219\u5c31\u66f4\u65b0\u4e3a\u6700\u5927\u503c\n\t}\n\tf[x]=lx+1;\n}\ninline bool check(int maxl){\n\tt=0;dfs(1,0,maxl);//\u6ce8\u610f\u6e05\u7a7a\u8ba1\u6570\u5668t\n\treturn t<=s;\n}\nint main(){\n\tn=read(),s=read();\n\tfor(int i=1;i<n;++i){\n\t\tint u=read(),v=read();\n\t\tadd_edge(u,v),add_edge(v,u);\n\t}//\u4ee5\u4e0a\u4e3a\u8bfb\u5165\u5efa\u56fe\n\tint l=0,r=n/s;//\u4e8c\u5206\u4e0b\u754c\u663e\u7136\u662f0\uff0c\u4e0a\u754c\u5176\u5b9e\u53ea\u8981\u5230(n-s)/s\u5411\u4e0a\u53d6\u6b63\uff08\u5df2\u7ecf\u5220\u53bb\u4e86s\u6761\u8fb9\uff09\u3002\n\twhile(l<=r){//\u666e\u901a\u4e8c\u5206\n\t\tint mid=l+r>>1;\n\t\tif(check(mid))r=mid-1;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\\n\",l);//\u8f93\u51fa\u7b54\u6848\n\treturn 0;//\u597d\u4e60\u60ef\n}\n```\n\u5bf9\u4e86\uff0c\u6700\u540e\u8bf4\u4e00\u4e0b\u4e8c\u5206\n```cpp\nif(check(mid))r=mid-1;\nelse l=mid+1;\n```\n\u5f88\u591a\u4eba\u4e00\u76f4\u5bf9\u6b64\u6709\u7591\u60d1\n\n\u4e00\u822c\u6709\u4e09\u79cd\uff0c\u6700\u5e38\u89c1\u7684\u597d\u50cf\u662f$if(check(mid))$\u540e\u8bb0\u5f55\u4e00\u4e0b$ans$\n\n\u8fd9\u91cc\u8bc1\u660e\u4e00\u4e0b\u6211\u4e60\u60ef\u5199\u7684\n\n$if(check(mid))$\u540e$r$\u4f1a$-1$\uff0c\u6240\u4ee5$r$\u4e0d\u4e00\u5b9a\u662f\u6700\u7ec8\u7b54\u6848\n\n\u76f8\u53cd\uff0c\u56e0\u4e3a\u5728$check$\u4e0d\u6210\u7acb\u540e$l$\u4f1a$+1$\uff0c\u5230\u6700\u540e\u7684\u6781\u9650$l=r$\u65f6\u7b54\u6848\u5c31\u662f\u6b63\u786e\u7684\n",
        "postTime": 1570935187,
        "uid": 56653,
        "name": "\u73c5\u8090",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3000 \u3010[USACO10DEC]\u725b\u7684\u5065\u7f8e\u64cdCow Calisthenics\u3011"
    },
    {
        "content": "## \u4e3a\u4ec0\u4e48\u6ca1\u6709C++\u7684\u9898\u89e3\n\n\u4e0d\u5982\u81ea\u5df1\u5199\u4e00\u7bc7\u5427\n\n\u9898\u76ee\u4e2d\u5df2\u7ecf\u8bf4\u4e86\uff0c\u8981\u6c42\u6ee1\u8db3\u6700\u5927\u503c\u6700\u5c0f\uff0c\u90a3\u4e48\u5f88\u660e\u663e\u662f\u4e8c\u5206\uff0c\u8fd9\u91cc\u5c31\u4e0d\u505a\u8fc7\u591a\u89e3\u91ca\n\n\u4f46\u662f\u4e8c\u5206\u5b8c\u540e\u5982\u4f55\u9a8c\u8bc1\n\n\u56e0\u4e3a\u9700\u8981\u6c42\u7684\u662f\u6811\u7684\u76f4\u5f84\uff0c\u76f4\u63a5\u8bb0\u5f55\u6df1\u5ea6\u80af\u5b9a\u6709\u6709\u95ee\u9898\n\n\u65e2\u7136\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u8bb0\u5f55\u5f53\u524d\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8ddd\u79bb\u7684\u6700\u5927\u503c\u548c\u4e00\u4e2a\u6b21\u5927\u503c\uff0c\u5982\u679c\u6700\u5927+\u6b21\u5927 > \u90a3\u4e48\u6211\u4eec\u5c31\u526a\u6389\u6700\u5927\u7684\u8fb9\uff0c\u526a\u8fb9\u7684\u6b21\u6570 +1 \uff0c\u7136\u540e\u68c0\u67e5\u662f\u5426\u5408\u7406\uff0c\u8c03\u6574\u4e8c\u5206\u533a\u95f4\n\n### \u6ce8\u610f\uff0c\u4e0a\u9762\u7684\u53ea\u662f\u601d\u8def\uff0c\u5982\u679c\u4f60\u8fd9\u4e48\u505a\uff0c\u4f1a\u53d8\u5f97\u5341\u5206\u9ebb\u70e6\n\n\u7b80\u5316\u65b9\u6cd5\uff1a\n\ndfs\u7684\u65f6\u5019\u548c\u4e0b\u4e00\u5c42\u7684\u5404\u4e2a\u8282\u70b9\u7684\u6bd4\u8f83\u4e00\u4e0b\uff0c\u5982\u679c\u5df2\u7ecf\u4e0d\u6ee1\u8db3\u4e86\uff0c\u5c31\u76f4\u63a5\u5c06\u8f83\u5927\u7684\u526a\u6389\uff0c\u4fdd\u7559\u8f83\u5c0f\u7684\uff0c\u5982\u679c\u6ee1\u8db3\uff0c\u5f53\u524d\u7684\u8ddd\u79bb\u66f4\u65b0\u4e3a\u8f83\u5927\u7684\n\n\u8d34\u4e0a\u6700\u4f18\u89e3\u4ee3\u7801\uff1a\n\n```cpp\n//\u8bf7\u7528c++11\u8fd0\u884c\n#pragma GCC optimize (3)\n#pragma GCC optimize (\"Ofast\")\n#pragma GCC optimize (\"inline\")\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int MAX=400005;\nstruct node\n{\n\tint to,next;\n};\nint head[MAX];\nnode edge[MAX*2];\nint len[MAX];\nint k,cnt,mid,K;\n\ninline int cmin(int x,int y) { return x<y?x:y; }\ninline int cmax(int x,int y) { return x>y?x:y; }\n\ntemplate <typename T = int>\ninline void add(T come,T to)\n{\n\tedge[++K]=(node){to,head[come]};\n\thead[come]=K;\n}\n\ntemplate <typename T = int>\ninline int read()\n{\n\tregister T X=0;\n\tregister char c=getchar();\n\twhile(c<'0' || c>'9') c=getchar();\n\twhile(c>='0'&&c<='9') X=(X<<3)+(X<<1)+c-'0',c=getchar();\n\treturn X;\n}\n\nvoid dfs(int u,int fa)\n{\n\tif(cnt>k) return ;\n\tregister int now=0;\n\tfor(register int i=head[u];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(v==fa)\tcontinue;\n\t\tdfs(v,u);\n\t\tif(now+len[v]>mid)\n\t\t{\n\t\t\tcnt++;\t//\u4fdd\u7559\u8f83\u5c0f\u7684\u8ddd\u79bb\n\t\t\tnow=cmin(now,len[v]);\n\t\t}\n\t\telse\n\t\t\tnow=cmax(now,len[v]);\t//\u66f4\u65b0\u6700\u5927\u503c\n\t}\n    //\u5f53\u7136\u8981\u52a0\u4e0a\u81ea\u5df1\n\tlen[u]=now+1;\n}\n\nbool check()\n{\n\tcnt=0;\n\tdfs(1,0);\n\treturn cnt<=k;\n}\n\nint main()\n{\n\tregister int n,ans;\n\tscanf(\"%d%d\",&n,&k);\n\tregister int x,y;\n\tfor(register int i=1;i<n;i++)\n\t{\n\t\tx=read();y=read();\n\t\tadd(x,y);\tadd(y,x);\n\t}\n\t\n\tregister int l=0,r=n/k+10;\n\twhile(l<=r)\n\t{\n\t\tmid=(l+r)>>1;\n\t\tif(check())\n\t\t{\n\t\t\tans=mid;\n\t\t\tr=mid-1;\n\t\t}\n\t\telse\n\t\t\tl=mid+1;\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\n\u597d\u50cf\u6700\u4f18\u89e3\u57fa\u672c\u5168\u662f\u6211\u4eec\u673a\u623f\u7684\uff1f\uff1f\uff1f",
        "postTime": 1539258402,
        "uid": 61667,
        "name": "YitsuHolo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3000 \u3010[USACO10DEC]\u725b\u7684\u5065\u7f8e\u64cdCow Calisthenics\u3011"
    },
    {
        "content": "\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u662f\u4ece\u6839\u5230\u513f\u5b50\uff0c\u53ea\u8981\u6c42\u51fa\u6811\u7684\u76f4\u5f84\uff0c\u4e4b\u540e\u6bcf\u6b21\u679a\u4e3e\u76f4\u5f84\u4e0a\u7684\u70b9\u505a\u6839\u8282\u70b9\uff0c\u5237\u5230\u53f6\u8282\u70b9\u7684\u6700\u77ed\u8def\uff0c\u6bcf\u6b21\u628a\u6700\u8fdc\u7684\u53bb\u6389\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8fd8\u6709\u4e00\u79cd\u662f\u4ece\u53f6\u8282\u70b9\u5f52\u5230\u6839\u8282\u70b9\uff0c\u53f6\u8282\u70b9\u5c31\u662f\u5ea6\u6570\u4e3a1\u7684\u8282\u70b9\uff0c\u5176\u4ed6\u8ddf\u4e0a\u9762\u4e00\u6837\u3002\n\n\u4e3b\u8981\u89c1\u4ee3\u7801\uff0c\u4ee3\u7801~~\u7b80\u5355\u6613\u61c2~~\u3002\n\nCode:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN=100005;\nint n,m,cnt,mid,tot,dis[MAXN],F[MAXN],son[2*MAXN],lnk[MAXN],nxt[2*MAXN];\nint read(){\n\tint ret=0,f=1;char ch=getchar();\n\twhile (!isdigit(ch)){if (ch=='-')f=-f;ch=getchar();}\n\twhile (isdigit(ch)) ret=(ret<<3)+(ret<<1)+ch-'0',ch=getchar();\n\treturn ret*f;\n}\nvoid add_e(int x,int y){son[++tot]=y;nxt[tot]=lnk[x];lnk[x]=tot;}\nvoid DFS(int x,int fa) {\n    for (int j=lnk[x];j;j=nxt[j])\n      if (son[j]!=fa) DFS(son[j],x);\n    int top=0;F[x]=1;\n    for (int j=lnk[x];j;j=nxt[j]) \n      if (son[j]!=fa) dis[++top]=F[son[j]];\n    sort(dis+1,dis+1+top);\n    for (int i=top;i;i--)\n      if (dis[i]+dis[i-1]>mid) cnt++;else {F[x]+=dis[i];break;}\n}\nbool check(){\n    cnt=0;\n    DFS(1,0);\n    return cnt<=m;\n}\nint main(){\n    n=read(),m=read();\n    for (int i=1;i<n;i++) {\n        int x=read(),y=read();\n        add_e(x,y),add_e(y,x);\n    }\n    int L=0,R=n-1;\n    while (L<=R){\n    \tmid=(R-L>>1)+L;\n        if (check()) R=mid-1;else L=mid+1;\n    }\n    printf(\"%d\\n\",L);\n    return 0;\n}\n```\n",
        "postTime": 1595940948,
        "uid": 188879,
        "name": "VioletIsMyLove",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3000 \u3010[USACO10DEC]Cow Calisthenics G\u3011"
    },
    {
        "content": "\u7b80\u5355\u62bd\u8c61\u4e00\u4e0b\u9898\u610f\u5c31\u662f\n\n\u53bb\u6389n\u4e2a\u7ed3\u70b9\u7684\u6811\u4e0a\u6700\u591am\u6761\u8fb9\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u6240\u6709\u8def\u5f84\u4e2d\u6700\u957f\u503c\u6700\u5c0f\uff0c\u6c42\u8fd9\u4e2a\u6700\u5c0f\u503c\u3002\n\n\u4ee5\u8fd9\u6837\u7684\u95ee\u6cd5\u51fa\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u7b54\u6848\u6cd5\u3002\n\n\u5982\u679c\u4f7f\u6700\u5c0f\u503c\u4e3ax\u7684\u65b9\u6848\u5b58\u5728\uff0c\u5219\u4f7f\u6700\u5c0f\u503c\u4e3ax+1\u7684\u65b9\u6848\u5fc5\u7136\u5b58\u5728\u3002\n\n\u4e0d\u5b58\u5728\u540c\u7406\u3002\n\n\u6240\u4ee5\u5f88\u660e\u663e\u8fd9\u9898\u662f\u5177\u6709\u4e8c\u5206\u6027\u7684\u3002\n\n\n\u7136\u540e\u5c31\u662f\u5982\u4f55\u5224\u65ad\u65b9\u6848\u7684\u5b58\u5728\u6027 \u8fd9\u91cc\u7528\u5230\u6811\u5f62DP\u548c\u8d2a\u5fc3\u3002\n\nf[u]\u8bb0\u5f55\u4ee5u\u4e3a\u6df1\u5ea6\u6700\u5c0f\u70b9\u7684\u94fe\u957f\u5ea6\n\n\u4e5f\u5c31\u662fu\u5230 \u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u4e2d \u79bb\u5b83\u6700\u8fdc\u7684\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u957f\u5ea6\n\n\n\u904d\u5386\u8fc7u\u4e3a\u6839\u7684\u6574\u68f5\u5b50\u6811\u4e4b\u540e\uff0c\u7528a\u6570\u7ec4\u8bb0\u5f55\u4e00\u4e0bu\u6bcf\u4e2a\u7684\u5b50\u7ed3\u70b9\u7684f[v]\n\n\u5bf9a\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5982\u679c\u4e24\u6761\u94fe\u957f\u5ea6\u548c\u5927\u4e8emid\uff0c\u5219\u5c06\u957f\u7684\u4e00\u6761\u622a\u65ad\n\n\u5904\u7406\u540e\u65b0\u5f97\u5230\u7684\u6700\u957f\u503c\u4e5f\u5c31\u662ff[u]\u7684\u503c\n\n\u53e6\u5916\uff0c\u7531\u4e8edfs\u5e8f\u904d\u5386\u7684\u62ec\u53f7\u5316\u5b9a\u7406\uff0c\n\n\u5f53\u6211\u4eec\u5904\u7406u\u4e3a\u6839\u7684\u5b50\u6811\u7684\u65f6\u5019\uff0c\u5df2\u7ecf\u4fdd\u8bc1\u5176\u5b50\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u8def\u5f84\u957f\u7b26\u5408\u8981\u6c42\u3002\n\n\n\u5976\u725b\u4eec\u591a\u597d\u554a...\n\n\u4e00\u8def\u661f\u79fb\u7269\u6362\uff0c\u6211\u4eec\u6ca1\u6709\u6563....\n\n\n\n\n\n```cpp\nEnd.\n{Beginner_df016}\nvar i,j,k,n,m,x,y,s,tot,anst,l,r,mid,ans:longint;\n      b,head,next:array[0..200007]of longint;\n      a,f:array[0..100007]of longint;\nprocedure add(x,y:longint);\nbegin\n    inc(tot);\n    b[tot]:=y;\n    next[tot]:=head[x];\n    head[x]:=tot;\nend;\n procedure qsort(l,r:longint);\n var i,j,m,t:longint;\nbegin\n    i:=l; j:=r;\n    m:=a[(l+r) div 2];\n    repeat\n        while a[i]>m do inc(i);\n        while m>a[j] do dec(j);\n        if not(i>j) then\n           begin t:=a[i]; a[i]:=a[j]; a[j]:=t;\n                    inc(i); dec(j); end;\n    until i>j;\n    if l<j then qsort(l,j);\n    if i<r then qsort(i,r);\nend;\nprocedure dfs(u,fa:longint);\nvar i,v,num:longint;  p:boolean;\nbegin\n    f[u]:=0; p:=false;\n    i:=head[u];\n    while i<>0 do\n        begin\n        v:=b[i];\n        if v<>fa then\n           begin\n           p:=true;\n           dfs(v,u);\n           if f[v]+1>f[u] then f[u]:=f[v]+1;\n           end;\n        i:=next[i];\n        end;\n    if not p then begin f[u]:=0; exit; end;\n    num:=0;\n    i:=head[u];\n    while i<>0 do\n        begin\n        v:=b[i];\n        if v<>fa then begin inc(num); a[num]:=f[v]+1; end;\n        i:=next[i];\n        end;\n    qsort(1,num);\n        a[num+1]:=0;\n    for i:=1 to num do\n      if a[i]+a[i+1]>mid then begin inc(anst); a[i]:=0; end;\n    qsort(1,num);\n    f[u]:=a[1];\nend;\nfunction check:boolean;\nbegin\n    anst:=0;\n    dfs(1,0);\n    if anst>m then exit(false);\n    exit(true);\nend;\nbegin\n    readln(n,m);\n    for i:=1 to n-1 do\n       begin\n       readln(x,y);\n       add(x,y);\n       add(y,x);\n       end;\n    l:=1; r:=n;\n    while l<=r do\n        begin\n        mid:=(l+r)>>1;\n        if check then begin ans:=mid; r:=mid-1; end\n                      else l:=mid+1;\n        end;\n    writeln(ans);\nend.\n```",
        "postTime": 1507382129,
        "uid": 24716,
        "name": "Beginner_df016",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3000 \u3010[USACO10DEC]\u725b\u7684\u5065\u7f8e\u64cdCow Calisthenics\u3011"
    },
    {
        "content": "\u4e8c\u5206 + $dp$ \u7684\u597d\u9898\u3002\n\n\u9996\u5148\uff0c\u8981\u6c42\u6700\u5927\u76f4\u5f84\u6700\u5c0f\uff0c\u6211\u4eec\u80af\u5b9a\u4f1a\u60f3\u5230\u4e8c\u5206\u6700\u5927\u76f4\u5f84\u3002 \u96be\u70b9\u5c31\u5728\u4e8e\u600e\u4e48 $check$\u3002\u7531\u4e8e\u6b63\u786e\u6027\u8fc7\u4e8e\u663e\u7136\uff0c\u4e8c\u5206\u53ef\u884c\u6027\u8bc1\u660e\u5c31\u7565\u4e86\u5427\u3002\n\n\u8bb0\u5f55\u6570\u7ec4 $dp_u$ \u8868\u793a\u5728 $u$ \u53f7\u70b9\uff0c\u5176\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u5230\u8fbe $u$ \u53f7\u70b9\u7684\u6700\u5927\u94fe\u957f\u3002\u8f6c\u79fb\u65f6\uff0c\u8003\u8651\u5176\u548c\u5b50\u6811\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c$u$ \u53f7\u70b9\u5c31\u7c7b\u4f3c\u4e8e\u4e00\u4e2a $lca$\uff0c\u4e24\u4e2a\u6700\u957f\u7684\u513f\u5b50\u62fc\u8d77\u6765\u7684\u6700\u957f\u94fe\u5c31\u662f\u8fd9\u68f5\u5b50\u6811\u7684\u6700\u5927\u76f4\u5f84\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 $dp_v$ \u4e2d\u6240\u5b58\u6700\u957f\u94fe\u5747\u5df2\u4fdd\u8bc1\u5b50\u6811\u5185\u90e8\u5408\u6cd5\u3002\n\n\u63a5\u7740\u8003\u8651\u5b50\u6811\u4e2d\u76f4\u5f84\u8d85\u8fc7\u4e8c\u5206\u7684\u4e0a\u9650\u600e\u4e48\u529e\uff1f\u8d2a\u5fc3\u5730\u60f3\uff0c\u6211\u4eec\u80af\u5b9a\u662f\u8981\u65ad\u6389\u6700\u957f\u7684\u90a3\u6761\u94fe\uff0c\u4fdd\u7559\u6b21\u957f\u7684\u3002\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u7684\u603b\u957f\u5ea6\u5c3d\u53ef\u80fd\u5c0f\uff0c\u4ece\u800c\u8fbe\u5230\u6700\u4f18\u6b21\u6570\u3002\n\u6700\u540e\uff0c\u5982\u679c\u5fc5\u987b\u65ad\u8fb9\u7684\u6b21\u6570\u5927\u4e8e\u4e0a\u9650 $s$, \u5219\u4e0d\u5408\u683c\uff0c\u5e94\u8be5\u8c03\u5927\u533a\u95f4\uff0c\u5426\u5219**\u4e00\u5b9a\u5408\u683c**\u3002\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\u3002\uff08~~\u9898\u76ee\u4e2d\u4e0d\u662f\u8981\u6c42\u6211\u4eec\u65ad\u6389 $s$ \u6761\u8fb9\u5417~~\uff09\n\n\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\uff1a \n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define N 1000010\nconst int inf = 2e9; \n\ntemplate <class T>\ninline void read(T& a){\n    T x = 0, s = 1;\n    char c = getchar();\n    while(!isdigit(c)){ if(c == '-') s = -1; c = getchar(); }\n    while(isdigit(c)){ x = x * 10 + (c ^ '0'); c = getchar(); }\n    a = x * s;\n    return ; \n}\n\nstruct node{\n    int v, next;\n} t[N << 1];\nint f[N];\n\nint bian = 0;\ninline void add(int u, int v){\n    t[++bian] = (node){v, f[u]}, f[u] = bian;\n    return ; \n}\n\nint n, s;\nint dp[N];\nint sum = 0;   // \u65ad\u4e86\u591a\u5c11\u6b21 \n\nvoid dfs(int now, int father, int lim){\n    int maxn = 0, minn = inf; \n    for(int i = f[now]; i; i = t[i].next){\n        int v = t[i].v;\n        if(v == father) continue; \n        dfs(v, now, lim); \n        if(dp[v] + maxn > lim) sum++, maxn = min(maxn, dp[v]);   // \u4fdd\u7559\u6700\u5c0f\u503c\n        else maxn = max(maxn, dp[v]);     // \u5426\u5219\u66f4\u65b0\u6210\u6700\u5927\u503c\n    }\n    dp[now] = maxn + 1; \n    return ; \n}\n\nbool check(int lim){\n    sum = 0;   // \u8bb0\u5f97\u6e05\u7a7a \n    dfs(1, 0, lim);\n    return sum <= s; \n}\n\nint main(){\n    read(n); read(s); \n    for(int i = 1; i < n; i++){\n        int x, y;\n        read(x), read(y);\n        add(x, y); add(y, x); \n    }\n    int l = 1, r = n, ans = 0;   // \u6700\u591a\u65ad n \u6b21 \n    while(l <= r){\n        int mid = l + r >> 1;\n        if(check(mid)) ans = mid, r = mid - 1;\n        else l = mid + 1; \n    }\n    cout << ans << endl;\n    return 0; \n}\n```",
        "postTime": 1606901441,
        "uid": 234224,
        "name": "\u9752\u9e1f_Blue_Bird",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3000 \u3010[USACO10DEC]Cow Calisthenics G\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f$:$\n\n\u7ed9\u4f60\u4e00\u68f5\u6811,\u4f60\u53ef\u4ee5\u5728\u6811\u4e2d\u5220\u53bb$s$\u6761\u4f7f\u4e4b\u6210\u4e3a\u68ee\u6797,\u6c42\u5982\u4f55\u5220,\u80fd\u4f7f\u68ee\u6797\u4e2d\u6700\u5927\u7684\u76f4\u5f84\u6700\u5c0f.\n\n\u9898\u9762\u4e2d,\u4e8c\u5206\u7684\u7279\u5f81\u6bd4\u8f83\u660e\u663e,\u6bd4\u8f83\u5bb9\u6613\u5c31\u53ef\u4ee5\u60f3\u5230\u5982\u4e0b\u65b9\u6848:\n\n\u6bcf\u6b21\u4e8c\u5206\u4e00\u4e2a\u6700\u5927\u76f4\u5f84$mid$,\u6c42\u5728\u5220$s$\u6761\u8fb9\u7684\u60c5\u51b5\u4e0b\u662f\u5426\u53ef\u4ee5\u4f7f\u4e4b\u5728\u5927\u76f4\u5f84\u4e3a$mid$.\n\n\u5173\u952e\u5728\u4e8e\u5982\u4f55$check$.\n\n\u6211\u4eec\u53ef\u4ee5\u8d2a\u5fc3\u7684\u53bb\u8003\u8651,\u5bf9\u4e8e\u6ca1\u4e00\u4e2a\u8282\u70b9,\u8bb0\u5f55\u4e00\u4e2a$maxdepth$\u8868\u793a\u8be5\u8282\u70b9\u5411\u5b50\u6811\u65b9\u5411\u5ef6\u4f38\u7684\u6700\u5927\u6df1\u5ea6.\n\n\u5bf9\u4e8e\u5f53\u524d\u904d\u5386\u5230\u7684\u8282\u70b9$u$,\u6211\u4eec\u5c06\u5176\u5b50\u8282\u70b9\u904d\u5386\u5b8c\u540e,\u53ef\u4ee5\u5c06\u5176\u5b50\u8282\u70b9\u653e\u5165\u4e00\u4e2a\u5bb9\u5668\u4e2d,\u8fd9\u4e2a\u5bb9\u5668\u53ef\u4ee5\u5feb\u901f\u67e5\u627e\u6700\u5927\u503c.\n\n\u7136\u540e\u6bcf\u6b21\u5c06\u6700\u5927\u7684\u4e24\u4e2a$v_1,v_2$\u7684$maxdepth$\u6c42\u51fa\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb,\u5982\u679c\u5927\u4e8e\u4e8c\u5206\u503c,\u5c31\u5c06$maxdepth$\u66f4\u5927\u7684\u90a3\u4e2a\u70b9\u4e0e$u$\u7684\u8fb9\u5220\u53bb.\n\n\u8fd9\u4e2a\u53ef\u4ee5\u7528\u4e00\u4e2a\u4e8c\u53c9\u5806\u7ef4\u62a4,\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(Nlog^2N)$,\u7b97\u4e0a\u754c\u8fd9\u4e2a\u9898\u6ca1\u95ee\u9898,\u4f46\u5982\u679c\u7528\u4f18\u5148\u961f\u5217\u4e0d\u5438\u6c27\u8fc7\u4e0d\u53bb,\u8fd9\u91cc\u4e0d\u5f97\u4e0d\u5410\u69fd\u4e00\u4e0b$STL$\u5e38\u6570\u5927...\n\n```cpp\n//O(Nlog^2N),\u5438\u6c27\u53ef\u4ee5\u8fc7;\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int N=1e5+10;\n\nint s,n,now,cnt,maxdepth[N],depth[N];\n\nint to[N<<1],nex[N<<1],head[N],tt;\n\ninline void add(int x,int y){\n\tto[++tt]=y,nex[tt]=head[x],head[x]=tt;\n\treturn ;\n}\n\npriority_queue<int>Q;\n\nbool dfs(int g,int f){\n\tpriority_queue<int>Q;\n\tmaxdepth[g]=depth[g];\n\tfor(int i=head[g],u;i;i=nex[i]){\n\t\tu=to[i];\n\t\tif(u==f)\n\t\t\tcontinue;\n\t\tdepth[u]=depth[g]+1;\n\t\tif(!dfs(u,g))\n\t\t\treturn false;//\u6709\u4e00\u4e2a\u5b50\u6811\u4e0d\u884c\u5c31\u6574\u4e2a\u4e0d\u884c;\n\t\tif(maxdepth[u]-depth[g]>now){//\u4f18\u5148\u5c06\u8ddd\u79bb\u5df2\u7ecf\u8d85\u8fc7now\u7684\u526a\u53bb,\u51cf\u5c11\u4e00\u70b9\u65f6\u95f4\u6d88\u8017;\n\t\t\t++cnt;\n\t\t\tif(cnt>s)\n\t\t\t\treturn false;\n\t\t\tcontinue;\n\t\t}\n\t\tQ.push(maxdepth[u]);\n\t}\n\t\n\tif(Q.empty())\n\t\treturn true;\n//\t\tif(g==5&&now==2)\n//\t\t\tcout<<Q.size()<<endl;\n\tQ.push(depth[g]);//\u65b9\u4fbf\u5904\u7406;\n\tint last=Q.top();\n\tQ.pop();\n\twhile(Q.top()+last-depth[g]*2>now){//\u53bb\u9664\u6700\u5927\u7684\u4e24\u4e2a\u7b97\u8ddd\u79bb;\n\t\t++cnt;\n\t\tlast=Q.top();\n\t\tQ.pop();\n\t\tif(cnt>s)\n\t\t\treturn false;\n\t}\n\t\n\tmaxdepth[g]=last;\n\t\n\treturn true;\n}\n\nbool check(){\n\tcnt=0;\n\tdepth[1]=0;\n\treturn dfs(1,0);\n}\n\nint main(){\n\t\n\tcin>>n>>s;\n\t\n\tint x,y;\n\t\n\tfor(int i=1;i<n;++i)\n\t\tcin>>x>>y,\n\t\tadd(x,y),\n\t\tadd(y,x);\n\t\n\tint l=1,r=n-1;\n\t\n\twhile(l<r){\n\t\tint mid=l+r>>1;\n\t\tnow=mid;\n\t\tif(check())\n\t\t\tr=mid;\n\t\telse\n\t\t\tl=mid+1;\n\t}\n\t\n\tcout<<l<<endl;\n\treturn 0;\n}\n\n```\n\n\u4f46\u540e\u6765\u53c8\u601d\u8003\u4e86\u4e00\u4e0b:\n\n\u5bf9\u4e8e\u5f53\u524d\u5b50\u8282\u70b9$v$,\u5b83\u53ea\u4f1a\u4e4b\u524d\u8282\u70b9\u4e2d\u6700\u5927\u7684\u8fdb\u884c\u6bd4\u8f83.\n\n\u540c\u65f6,\u5982\u679c\u5f53\u524d\u8282\u70b9\u4e0e\u4e4b\u524d\u8282\u70b9\u4e2d\u6700\u5927\u7684\u90a3\u4e2a\u76f8\u6bd4\u8ddd\u79bb\u5927\u4e8e$mid$,\u5219\u5f53\u524d\u8282\u70b9\u4e00\u5b9a\u662f\u5230\u76ee\u524d\u4e3a\u6b62$maxdepth$\u6700\u5927\u4e24\u4e2a\u8282\u70b9\u4e4b\u4e00(\u6b64\u5904\u4e0d\u5305\u62ec\u5df2\u7ecf\u7531\u4e8e\u88ab\u5220\u8fb9\u800c\u4e0e$u$\u4e0d\u8fde\u901a\u7684\u70b9)\u3002\n\n\u5982\u679c\u8ddd\u79bb\u5927\u4e8e$mid$,\u53ea\u9700\u8981\u5c06\u5f53\u524d\u4e3a\u6b62\u6700\u5927\u503c\u548c\u5f53\u524d\u70b9$v$\u7684$maxdepth$\u4e2d\u8f83\u5c0f\u7684\u4e00\u4e2a\u4f5c\u4e3a\u65b0\u7684\u6700\u5927\u6df1\u5ea6\u5373\u53ef,\u56e0\u4e3a\u65e2\u7136\u4f60\u4e00\u5b9a\u8981\u5220\u9664\u4e00\u6761\u8fb9,\u80af\u5b9a\u5c06$maxdepth$\u5927\u7684\u5220\u53bb\u8981\u66f4\u4f18\u79c0\u4e00\u4e9b.\n\n\u800c\u5982\u679c\u8ddd\u79bb\u5c0f\u4e8e$mid$,\u5c31\u5fc5\u987b\u53d6$max$,\u56e0\u4e3a\u4f60\u5e76\u6ca1\u6709\u5220\u53bb\u4e00\u6761\u8fb9.\n\n\u8fd9\u6837\u53ef\u4ee5\u4e0d\u7528\u4e8c\u53c9\u5806\u7ef4\u62a4,\u65f6\u95f4\u4e0a\u5c11\u4e86\u4e00\u4e2a$logN$(\u800c\u4e14\u8fd8\u662f\u628a$STL$\u91cc\u7684\u7701\u53bb\u4e86),\u90a3\u4e48\u5c31\u53ef\u4ee5\u8f7b\u677e\u901a\u8fc7\u6d4b\u8bd5\u4e86.\n\n``` cpp\n//O(NlogN);\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int N=1e5+10;\n\nint s,n,now,cnt,maxdepth[N],depth[N];\n\nint to[N<<1],nex[N<<1],head[N],tt;\n\ninline void add(int x,int y){\n\tto[++tt]=y,nex[tt]=head[x],head[x]=tt;\n\treturn ;\n}\n\nbool dfs(int g,int f){\n\tmaxdepth[g]=depth[g];\n\tfor(int i=head[g],u;i;i=nex[i]){\n\t\tu=to[i];\n\t\tif(u==f)\n\t\t\tcontinue;\n\t\tdepth[u]=depth[g]+1;\n\t\tif(!dfs(u,g))\n\t\t\treturn false;\n\t\tif(maxdepth[u]+maxdepth[g]-depth[g]*2>now){\n\t\t\t++cnt;\n\t\t\tif(cnt>s)\n\t\t\t\treturn false;\n\t\t\tmaxdepth[g]=min(maxdepth[g],maxdepth[u]);//\u5982\u679c\u4e00\u5b9a\u8981\u5220,\u5220\u53bb\u6df1\u5ea6\u8f83\u6df1\u7684\u663e\u7136\u66f4\u4f18\u79c0;\n\t\t\tcontinue;\n\t\t}\n\t\tmaxdepth[g]=max(maxdepth[g],maxdepth[u]);//\u4e0d\u5220\u5c31\u5fc5\u987b\u53d6max;\n\t}\n\treturn true;\n}\n\nbool check(){\n\tcnt=0;\n\tdepth[1]=0;\n\treturn dfs(1,0);\n}\n\nint main(){\n\t\n\tcin>>n>>s;\n\t\n\tint x,y;\n\t\n\tfor(int i=1;i<n;++i)\n\t\tcin>>x>>y,\n\t\tadd(x,y),\n\t\tadd(y,x);\n\t\n\tint l=1,r=n-1;\n\t\n\twhile(l<r){\n\t\tint mid=l+r>>1;\n\t\tnow=mid;\n\t\tif(check())\n\t\t\tr=mid;\n\t\telse\n\t\t\tl=mid+1;\n\t}\n\t\n\tcout<<l<<endl;\n\treturn 0;\n}\n\n```",
        "postTime": 1570881757,
        "uid": 124890,
        "name": "bugaile",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3000 \u3010[USACO10DEC]\u725b\u7684\u5065\u7f8e\u64cdCow Calisthenics\u3011"
    }
]