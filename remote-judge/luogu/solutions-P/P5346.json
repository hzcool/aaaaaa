[
    {
        "content": "\u9898\u76ee\u5730\u5740\uff1a[P5346 \u3010XR-1\u3011\u67ef\u5357\u5bb6\u65cf](https://www.luogu.org/problemnew/show/P5346)\n\nQ\uff1a\u5b98\u65b9\u9898\u89e3\u4f1a\u5495\u4e48\uff1f\n\nA\uff1a\u4e0d\u4f1a\uff01~~\uff08\u5927\u96fe~~\n\n## \u9898\u89e3\u73af\u8282\n\n\u9996\u5148\uff0c\u6211\u4eec\u5047\u8bbe\u5df2\u7ecf\u6c42\u51fa\u4e86 $n$ \u4e2a\u4eba\u806a\u660e\u7a0b\u5ea6\u7684\u6392\u540d\u3002\n\n$op = 1$ \u662f\u53ef\u4ee5 $O(1)$ \u56de\u7b54\u7684\u3002\n\n\u5bf9\u4e8e $op = 2$ \u548c $op = 3$\uff0c\u7531\u4e8e\u6c42\u7b2c $k$ \u5927\u5f88\u5bb9\u6613\u60f3\u5230\u4e3b\u5e2d\u6811\u3002\n\n$op = 2$ \u53ea\u9700\u8981\u5728\u8282\u70b9\u7684\u7236\u4eb2\u7248\u672c\u4e0a\u66f4\u65b0\u5373\u53ef\u3002\n\n$op = 3$ \u53ea\u9700\u8981\u6309\u7167 $dfs$ \u5e8f\u66f4\u65b0\u5373\u53ef\u3002\n\n\u90a3\u4e48 $op = 2$ \u548c $op = 3$ \u53ef\u4ee5\u505a\u5230\u5355\u6b21 $O(\\log n)$ \u56de\u7b54\u3002\n\n\u4ee5\u4e0a\u90fd\u633a\u5957\u8def\u7684\uff0c\u73b0\u5728\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u5982\u4f55 $sort$\u3002\n\n### \u7b97\u6cd5\u4e00\uff1a\u66b4\u529b\n\n\u76f4\u63a5\u6a21\u62df\u6bd4\u8f83\u65b9\u5f0f\u5373\u53ef\uff0c\u8fd9\u91cc\u7ed9\u51fa\u6bd4\u8f83\u51fd\u6570\u3002\n\n```cpp\ninline bool cmp(int x, int y) {\n\tint fx = x, fy = y;\n\twhile (fx != fy && a[fx] == a[fy]) {\n\t\tx = fx, y = fy;\n\t\tfx = f[fx], fy = f[fy];\n\t}\n\treturn a[fx] < a[fy] || (a[fx] == a[fy] && x < y);\n}\n```\n\n\u7136\u540e\u76f4\u63a5\u8c03\u7528 $sort$ \u51fd\u6570\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2)$\uff0c\u671f\u671b\u5f97\u5206 $14$ \u5206\u3002\n\n### \u7b97\u6cd5\u4e8c\uff1a\u6811\u4e0a\u500d\u589e + \u54c8\u5e0c\n\n\u8fd9\u662f\u5e94\u8be5\u7b97\u662f\u5bf9\u66b4\u529b\u7684\u4f18\u5316\u3002\n\n```cpp\n//g[x]:log(x)\n//d[x]:x\u7684\u6df1\u5ea6\n//h[x]:\u4ece\u6839\u8282\u70b9\u5230x\u7684\u54c8\u5e0c\u503c\n//f[i][x]:\u6811\u4e0a\u500d\u589e\u4e2dx\u7684\u7b2ci\u7956\u5148\n//H(x,y):x\u5230y\u7684\u54c8\u5e0c\u503c\ninline bool cmp(int x, int y) {\n\tint w = g[min(d[x],d[y])];\n\tif (h[x] != h[y]) {\n\t\tfor (int i = w; ~i; i--)\n\t\t\tif (H(f[i][x], x) == H(f[i][y], y)) {\n\t\t\t\tx = f[0][f[i][x]];\n\t\t\t\ty = f[0][f[i][y]];\n\t\t\t}\n\t\tif (a[x] == a[y]) {\n\t\t\tx = f[0][x];\n\t\t\ty = f[0][y];\n\t\t}\n\t\treturn a[x] < a[y];\n\t} else {\n\t\tfor (int i = w; ~i; i--)\n\t\t\tif (f[i][x] != f[i][y]) {\n\t\t\t\tx = f[i][x];\n\t\t\t\ty = f[i][y];\n\t\t\t}\n\t\treturn x < y;\n\t}\n}\n```\n\n\u9700\u8981\u9884\u5904\u7406\u4e00\u5927\u5806\u4e1c\u897f\uff0c\u7136\u540e\u4ecd\u7136\u76f4\u63a5\u8c03\u7528 $sort$ \u51fd\u6570\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log ^ 2 n)$\uff0c\u671f\u671b\u5f97\u5206 $32$ \u5206\u3002\n\n~~\u6ca1\u9519\uff0c\u4e24\u53ea $\\log$ \u5f88\u6210\u529f\u7684\u88ab\u6211\u5361\u6389\u4e86\u3002~~\n\n### \u7b97\u6cd5\u4e09\uff1a\u540e\u7f00\u6392\u5e8f SA\n\n\u8003\u8651\u90e8\u5206\u5206\uff1a\n\n> \u5bf9\u4e8e\u53e6 $20\\%$ \u7684\u6570\u636e\uff0c\u4fdd\u8bc1\u4e00\u4e2a\u4eba\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u70b9 $9$ \u5206\uff0c\u65f6\u9650 4s\u3002\n\n\u5373\u6574\u4e2a\u5bb6\u65cf\u5f62\u6210\u4e00\u6761\u94fe\u3002\n\n\u90a3\u4e48\u5176\u5b9e\u8fd9\u5c31\u662f\u4e00\u4e2a\u4ee5 $n$ \u8282\u70b9\u4e3a\u5934\uff0c\u6839\u8282\u70b9\u4e3a\u5c3e\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u9898\u76ee\u6240\u8981\u6c42\u7684\u5176\u5b9e\u5c31\u662f\u540e\u7f00\u6392\u5e8f\u3002\n\n\u7531\u4e8e\u667a\u5546\u503c\u7684\u89c4\u6a21\u9ad8\u8fbe $10^9$ \uff0c\u79bb\u6563\u5316\u4e00\u4e0b\uff0c\u7136\u540e\u4f7f\u7528 SA \u8fdb\u884c\u6392\u5e8f\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$ \uff0c\u671f\u671b\u5f97\u5206 $18$ \u5206\uff0c\u7ed3\u5408\u65b9\u6cd5\u4e8c\u53ef\u4ee5\u5f97\u5230 $50$ \u5206\u3002\n\n### \u7b97\u6cd5\u56db\uff1a\n\n\u770b\u4e00\u773c\u6570\u636e\u8303\u56f4 $1 \\le n \\le 5 \\times 10 ^ 5$\uff0c\u8fd9\u663e\u7136\u8981\u6c42\u6211\u4eec\u7528\u4e00\u79cd $O(n \\log n)$ \u7684\u7b97\u6cd5\u8fdb\u884c\u6392\u5e8f\u3002\n\n\u53d7\u5230\u65b9\u6cd5\u4e09\u7684\u542f\u53d1\uff0c\u6211\u4eec\u80fd\u4e0d\u80fd\u628a SA \u642c\u5230\u6811\u4e0a\u5462\uff1f\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165**\u6811\u4e0a SA**\u3002\n\n### \u6a21\u677f\uff1a[\u3010\u6a21\u677f\u3011\u6811\u4e0a\u540e\u7f00\u6392\u5e8f](https://www.luogu.org/problemnew/show/P5353)\n\n~~\u4e3a\u4e86\u5199\u7bc7\u9898\u89e3\u6211\u8fd8\u9020\u4e86\u9053\u6a21\u677f\u9898\u3002~~\n\n\u6211\u4eec\u5c1d\u8bd5\u628a\u666e\u901a SA \u6539\u6210\u6811\u4e0a SA\uff0c\u6240\u4ee5\u5148\u628a\u666e\u901a SA \u8d34\u4e0a\u6765\u3002\n\n```cpp\nnamespace SA {\n    int sa[N], rk[N], tp[N], tx[N];\n    \n    inline void tsort() {\n        for (int i = 1; i <= m; i++) tx[i] = 0;\n        for (int i = 1; i <= n; i++) ++tx[rk[i]];\n        for (int i = 1; i <= m; i++) tx[i] += tx[i-1];\n        for (int i = n; i; i--) sa[tx[rk[tp[i]]]--] = tp[i];\n    }\n\n    inline bool pd(int i, int w) {\n        return tp[sa[i-1]] == tp[sa[i]] && tp[sa[i-1]+w] == tp[sa[i]+w];\n    }\n\n    inline void main() {\n        for (int i = 1; i <= n; i++) rk[i] = s[i] - 'a' + 1, tp[i] = i;\n        tsort();\n        for (int w = 1, p = 0; p < n; w <<= 1, m = p) {\n            p = 0;\n            for (int i = 1; i <= w; i++) tp[++p] = n - w + i;\n            for (int i = 1; i <= n; i++) if (sa[i] > w) tp[++p] = sa[i] - w;\n            tsort(), swap(rk, tp), rk[sa[1]] = p = 1;\n            for (int i = 2; i <= n; i++) rk[sa[i]] = pd(i, w) ? p : ++p;\n        }\n    }\n}\n```\n\n\u60f3\u8981\u628a\u666e\u901a SA \u6539\u6210\u6811\u4e0a SA\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u53d1\u73b0\uff1a\n\n1. $tsort$ \u51fd\u6570\u80af\u5b9a\u662f\u4e0d\u7528\u6539\u7684\uff1b\n2. $pd$ \u51fd\u6570\u53ef\u4ee5\u7528\u6811\u4e0a\u500d\u589e\u5b9e\u73b0\uff1b\n3. $main$ \u51fd\u6570\u4f3c\u4e4e\u4e5f\u5f88\u597d\u6539\uff1f\n\n\u4e8e\u662f\u5f00\u59cb\u6539\u6539\u6539\uff0c\u7a81\u7136\u53d1\u73b0\u6709\u4e2a\u95ee\u9898\uff1a**\u7531\u4e8e\u5e8f\u5217\u4e0a\u6bcf\u4e2a\u540e\u7f00\u957f\u5ea6\u90fd\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u51fa\u73b0\u5b8c\u5168\u76f8\u540c\u7684\u5b57\u7b26\u4e32\uff0c\u53ef\u662f\u5728\u6811\u4e0a\u662f\u53ef\u80fd\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u3002**\n\n\u7136\u540e\u5c31\u6ca1\u529e\u6cd5\u4e86\u4e48\uff1f\n\n\u529e\u6cd5\u80af\u5b9a\u662f\u6709\u7684~~\u8981\u4e0d\u7136\u8fd9\u9053\u9898\u662f\u548b\u51fa\u51fa\u6765\u7684~~\u3002\n\n\u6211\u4eec\u6765\u601d\u8003\u4e00\u4e0b\uff0c\u5728\u500d\u589e\u7684\u6bcf\u4e00\u8f6e\uff0c**\u57fa\u6570\u6392\u5e8f**\u7a76\u7adf\u8981\u8fbe\u5230\u4ec0\u4e48\u76ee\u7684\uff1f\n\n\u5bf9\u4e8e\u666e\u901a SA\uff0c\u5728\u500d\u589e\u7684\u6bcf\u4e00\u8f6e\uff0c\u5047\u8bbe\u5df2\u7ecf\u5bf9\u6240\u6709\u957f\u5ea6\u4e3a $x$ \u7684\u4e32\u6392\u597d\u5e8f\u4e86\u3002\u201c\u7b2c\u4e00\u5173\u952e\u5b57\u201d\u548c\u201c\u7b2c\u4e8c\u5173\u952e\u5b57\u201d\u4ee3\u8868\u4e86\u4e24\u4e2a\u9996\u5c3e\u76f8\u63a5\u7684\u957f\u5ea6\u4e3a $x$ \u7684\u4e32\uff0c\u79f0\u4e3a\u201c\u4e3b\u4e32\u201d\u548c\u201c\u6b21\u4e32\u201d\u3002\u57fa\u6570\u6392\u5e8f\u901a\u8fc7 $O(n)$ \u7684\u65f6\u95f4\uff0c\u5c06\u6bcf\u4e00\u5bf9\u201c\u4e3b\u4e32\u201d\u548c\u201c\u6b21\u4e32\u201d**\u5408\u5e76**\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a $2x$ \u7684\u65b0\u4e32\u5e76\u4fdd\u6301\u5408\u5e76\u540e**\u6709\u5e8f**\u3002\n\n\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1 $O(\\log n)$ \u6b21\u540e\uff0c\u6240\u6709\u540e\u7f00\u5448\u6709\u5e8f\u72b6\u6001\u3002\n\n\u5bf9\u4e8e\u6811\u4e0a SA\uff0c\u4e5f\u662f\u540c\u6837\u7684\u3002\u53ea\u4e0d\u8fc7\uff0c\u9664\u4e86\u201c\u4e3b\u4e32\u201d\u4f5c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u201c\u6b21\u4e32\u201d\u4f5c\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u4ee5\u5916\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u5408\u5e76\u540e\u7684\u6709\u5e8f\u6027\uff0c\u6211\u4eec\u8fd8\u8981\u989d\u5916\u5c06\u4e0a\u4e00\u8f6e\u7684\u6709\u5e8f\u72b6\u6001\u4f5c\u4e3a\u7b2c\u4e09\u5173\u952e\u5b57\u3002\u540c\u65f6\u7b2c\u4e8c\u5173\u952e\u5b57\u4e5f\u4e0d\u80fd\u7b80\u5355\u5730\u7528\u539f\u5148\u7684 $rk$ \u6570\u7ec4\u6784\u9020\uff08\u56e0\u4e3a $rk$ \u6570\u7ec4\u4f1a\u51fa\u73b0\u76f8\u540c\u7684\u6392\u540d\uff09\uff0c\u800c\u8981\u989d\u5916\u4f7f\u7528\u6ca1\u6709\u91cd\u590d\u7684\u6570\u7ec4\uff08\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684 $rkk$ \u6570\u7ec4\uff09\u6784\u9020\u3002\n\n\u603b\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e24\u6b21\u57fa\u6570\u6392\u5e8f\u6765\u8fbe\u5230\u76ee\u7684\uff0c\u5177\u4f53\u5b9e\u73b0\u8bf7\u53c2\u8003\u4ee3\u7801~~\u56e0\u4e3a\u8fd9\u8bf4\u5f97\u5b9e\u5728\u662f\u592a\u62bd\u8c61\u4e86~~\uff1a\n\n```cpp\nnamespace SA {\n    int sa[N], rk[N], rkk[N], tp[N], rk2[N], tx[N];\n\n    inline void tsort(int *sa, int *rk, int *tp, int m) {\n        for (int i = 0; i <= m; i++) tx[i] = 0;\n        for (int i = 1; i <= n; i++) ++tx[rk[i]];\n        for (int i = 1; i <= m; i++) tx[i] += tx[i-1];\n        for (int i = n; i; i--) sa[tx[rk[tp[i]]]--] = tp[i];\n    }\n\n    inline bool pd(int i, int t) {\n        return tp[sa[i-1]] == tp[sa[i]] && tp[f[t][sa[i-1]]] == tp[f[t][sa[i]]];\n    }\n\n    inline void main() {\n        int p = 0;\n        for (int i = 1; i <= n; i++) a[i] = s[i] - 'a' + 1, tp[i] = i;\n        tsort(sa, a, tp, n);\n        rk[sa[1]] = rkk[sa[1]] = p = 1;\n        for (int i = 2; i <= n; i++) {\n            rk[sa[i]] = a[sa[i-1]] == a[sa[i]] ? p : ++p;\n            rkk[sa[i]] = i;\n        }\n        for (int w = 1, t = 0; w < n; w <<= 1, ++t) {\n            for (int i = 1; i <= n; i++) rk2[i] = rkk[f[t][i]];\n            tsort(tp, rk2, sa, n);\n            tsort(sa, rk, tp, p);\n            swap(rk, tp);\n            rk[sa[1]] = rkk[sa[1]] = p = 1;\n            for (int i = 2; i <= n; i++) {\n                rk[sa[i]] = pd(i, t) ? p : ++p;\n                rkk[sa[i]] = i;\n            }\n        }\n    }\n}\n```\n\n~~\u5f53\u7136\u4e5f\u8bb8\u8fd8\u6709\u5176\u4ed6\u5199\u6cd5\u3002~~\n\n\u6709\u4e86\u6811\u4e0a SA\uff0c\u539f\u9898\u5c31\u5f88\u7b80\u5355\u4e86~~\u5c31\u662f\u4e2a\u677f\u5b50~~\uff0c\u4e0b\u9762\u8d34\u4e0a std\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nnamespace IO {\n\tconst int SIZE = (1 << 21) + 1;\n\tchar ibuf[SIZE], *iS, *iT, obuf[SIZE], *oS = obuf, *oT = oS + SIZE - 1, c, qu[55];\n\tint f, qr;\n#define gc() (iS == iT ? (iT = (iS = ibuf) + fread(ibuf, 1, SIZE, stdin), (iS == iT ? EOF : *iS++)) : *iS++)\n\n\tinline void flush() {\n\t\tfwrite(obuf, 1, oS - obuf, stdout);\n\t\toS = obuf;\n\t}\n\n\tinline void putc(char x) {\n\t\t*oS++ = x;\n\t\tif (oS == oT) flush();\n\t}\n\n\ttemplate <class I>\n\tinline void rd(I &x) {\n\t\tfor (f = 1, c = gc(); c < '0' || c > '9'; c = gc())\n\t\t\tif (c == '-') f = -1;\n\t\tfor (x = 0; c <= '9' && c >= '0'; c = gc())\n\t\t\tx = x * 10 + (c & 15);\n\t\tx *= f;\n\t}\n\n\ttemplate <class I>\n\tinline void print(I x) {\n\t\tif (!x) putc('0');\n\t\tif (x < 0) putc('-'), x = -x;\n\t\twhile (x) qu[++qr] = x % 10 + '0', x /= 10;\n\t\twhile (qr) putc(qu[qr--]);\n\t\tputc('\\n');\n\t}\n\n\tstruct Flusher_ {\n\t\t~Flusher_() {\n\t\t\tflush();\n\t\t}\n\t} io_flusher_;\n}\nusing IO::rd;\nusing IO::print;\n\nconst int N = 5e5 + 6;\nint n, q, f[21][N], a[N], b[N];\nvector<int> e[N];\n\nnamespace SA {\n\tint sa[N], rk[N], rkk[N], tp[N], rk2[N], tx[N];\n\n\tinline void tsort(int *sa, int *rk, int *tp, int m) {\n\t\tfor (int i = 0; i <= m; i++) tx[i] = 0;\n\t\tfor (int i = 1; i <= n; i++) ++tx[rk[i]];\n\t\tfor (int i = 1; i <= m; i++) tx[i] += tx[i-1];\n\t\tfor (int i = n; i; i--) sa[tx[rk[tp[i]]]--] = tp[i];\n\t}\n\n\tinline bool pd(int i, int t) {\n\t\treturn tp[sa[i-1]] == tp[sa[i]] && tp[f[t][sa[i-1]]] == tp[f[t][sa[i]]];\n\t}\n\n\tinline void main() {\n\t\tint p = 0;\n\t\tfor (int i = 1; i <= n; i++) tp[i] = i;\n\t\ttsort(sa, a, tp, n);\n\t\trk[sa[1]] = rkk[sa[1]] = p = 1;\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\trk[sa[i]] = a[sa[i-1]] == a[sa[i]] ? p : ++p;\n\t\t\trkk[sa[i]] = i;\n\t\t}\n\t\tfor (int w = 1, t = 0; w < n; w <<= 1, ++t) {\n\t\t\tfor (int i = 1; i <= n; i++) rk2[i] = rkk[f[t][i]];\n\t\t\ttsort(tp, rk2, sa, n);\n\t\t\ttsort(sa, rk, tp, p);\n\t\t\tswap(rk, tp);\n\t\t\trk[sa[1]] = rkk[sa[1]] = p = 1;\n\t\t\tfor (int i = 2; i <= n; i++) {\n\t\t\t\trk[sa[i]] = pd(i, t) ? p : ++p;\n\t\t\t\trkk[sa[i]] = i;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= n; i++) a[i] = rkk[i];\n\t}\n}\n\nnamespace Seg {\n\tstruct T {\n\t\tint l, r, c;\n\t} t[2][N*20];\n\tint tot[2], rt[2][N], dfn[N], s[N], num;\n\n\tinline int ins(int o, int p, int l, int r, int x) {\n\t\tint q = ++tot[o];\n\t\tt[o][q] = t[o][p];\n\t\t++t[o][q].c;\n\t\tif (l ^ r) {\n\t\t\tint mid = (l + r) >> 1;\n\t\t\tif (x <= mid) t[o][q].l = ins(o, t[o][p].l, l, mid, x);\n\t\t\telse t[o][q].r = ins(o, t[o][p].r, mid + 1, r, x);\n\t\t}\n\t\treturn q;\n\t}\n\n\tinline int ask(int o, int p, int q, int l, int r, int k) {\n\t\tif (l == r) return l;\n\t\tint mid = (l + r) >> 1, rc = t[o][t[o][q].r].c - t[o][t[o][p].r].c;\n\t\tif (k <= rc) return ask(o, t[o][p].r, t[o][q].r, mid + 1, r, k);\n\t\treturn ask(o, t[o][p].l, t[o][q].l, l, mid, k - rc);\n\t}\n\n\tinline void dfs(int x) {\n\t\tdfn[x] = ++num;\n\t\trt[1][num] = ins(1, rt[1][num-1], 1, n, a[x]);\n\t\ts[x] = 1;\n\t\tfor (unsigned int i = 0; i < e[x].size(); i++) {\n\t\t\tint y = e[x][i];\n\t\t\trt[0][y] = ins(0, rt[0][x], 1, n, a[y]);\n\t\t\tdfs(y);\n\t\t\ts[x] += s[y];\n\t\t}\n\t}\n\n\tinline void main() {\n\t\trt[0][1] = ins(0, 0, 1, n, a[1]);\n\t\tdfs(1);\n\t\twhile (q--) {\n\t\t\tint o, x;\n\t\t\trd(o), rd(x);\n\t\t\tif (o == 1) print(n + 1 - a[x]);\n\t\t\telse {\n\t\t\t\tint k;\n\t\t\t\trd(k);\n\t\t\t\tif (o == 2) print(SA::sa[ask(0, 0, rt[0][x], 1, n, k)]);\n\t\t\t\telse print(SA::sa[ask(1, rt[1][dfn[x]-1], rt[1][dfn[x]+s[x]-1], 1, n, k)]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\trd(n), rd(q);\n\tfor (int i = 2; i <= n; i++) {\n\t\trd(f[0][i]);\n\t\te[f[0][i]].push_back(i);\n\t}\n\tint t = 0;\n\tbool flag = 1;\n\twhile (flag && ++t) {\n\t\tflag = 0;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tif ((f[t][i] = f[t-1][f[t-1][i]])) flag = 1;\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\trd(a[i]);\n\t\tb[i] = a[i];\n\t}\n\tsort(b + 1, b + n + 1);\n\tint p = unique(b + 1, b + n + 1) - (b + 1);\n\tfor (int i = 1; i <= n; i++)\n\t\ta[i] = lower_bound(b + 1, b + p + 1, a[i]) - b;\n\tSA::main();\n\tSeg::main();\n\treturn 0;\n}\n```\n\n~~\u4ee3\u7801\u4e0d\u957f\uff0c\u4e5f\u5c31 $4k$\u3002~~\n\n### \u7b97\u6cd5\u4e94\uff1a\n\n\u6bd4\u8d5b\u65f6\u6709\u4e24\u4e2a\u4eba AC \u4e86\u6b64\u9898\uff1a[\u79df\u9165\u96e8](https://www.luogu.org/space/show?uid=47654)\uff0c[\u7a76\u6781\u9f99\u9a91\u58eb](https://www.luogu.org/space/show?uid=47803)\u3002\n\n\u5148 Orz ~~\u8fd9\u53eb\u5b98\u65b9\u819c\u62dc\u3002~~\n\n\u4ed6\u4eec\u7528\u7684\u90fd\u662f\u66ff\u7f6a\u7f8a\u6811\u7ef4\u62a4~~\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u53eb\u540e\u7f00\u5e73\u8861\u6811~~\u3002\n\n~~\u7136\u800c\u6211\u751a\u81f3\u4e0d\u4f1a\u66ff\u7f6a\u7f8a\u6811\u3002~~\n\n\u8fd9\u4e2a\u65b9\u6cd5\u73b0\u5728\u5df2\u77e5\u6709\u4e24\u4e2a\u4eba\u5199\u4e86\u9898\u89e3\uff1a[Owen_codeisking](https://www.luogu.org/blog/Owencodeisking/solution-p5346)\uff0c[dsidsi](https://blog.csdn.net/DSL_HN_2002/article/details/89854445)\u3002\n\n\u90a3\u6211\u5c31\u4e0d\u5199\u4e86~~\u53cd\u6b63\u672c\u6765\u5c31\u4e0d\u4f1a\u3002~~\n\n\u603b\u7ed3\u4e00\u4e0b\u8fd9\u4e24\u7bc7\u9898\u89e3\u7684\u5171\u6027\uff1a\u90fd\u53c2\u8003[\u79df\u9165\u96e8](https://www.luogu.org/space/show?uid=47654)\u7684\u4ee3\u7801~~\u8fd8\u90fd diss \u4e86\u7a9d\uff08\u59d4\u5c48~~\u3002\n\n## \u6545\u4e8b\u73af\u8282\n\n### idea \u6765\u6e90\n\n~~\u51ed\u7a7a\u60f3\u5230\u7684\u3002~~\n\n\u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\uff0c\u6811\u4e0a**\u500d\u589e**\u548c SA \u7684**\u500d\u589e**\u53ef\u4ee5\u7ed3\u5408\u4e00\u4e0b\u561b\u3002\n\n\u7136\u540e\u540e\u6765\u5c31\u641e\u51fa\u4e86\u6811\u4e0a SA \u8fd9\u4e48\u4e2a\u4e1c\u897f\u3002\n\n\u540e\u6765 World Final \u6709\u9053\u9898\u4f3c\u4e4e\u8981\u7528\u6811\u4e0a SA ~~\u4e0d\u8fc7\u542c\u8bf4\u88ab\u51fa\u9898\u4eba\u5bf9\u7740\u5361\uff1f~~\n\n\u5f53\u65f6\u8fd8\u56e0\u4e3a\u5976\u4e2d\u4e86 WF \u7684\u7b97\u6cd5\u5174\u594b\u4e86\u597d\u4e00\u9635\u5b50\u3002\n\n~~\u7136\u540e\u7701\u9009\u5c31\u51c9\u4e86\u3002~~\n\n### \u5f69\u86cb\n\n\u4e0d\u77e5\u9053\u5927\u5bb6\u6709\u6ca1\u6709\u53d1\u73b0\u672c\u573a\u6bd4\u8d5b\u7684\u5f69\u86cb\u5462\uff1f\n\n\u672c\u573a\u6bd4\u8d5b\u7684\u65e5\u671f\u662f 05-04\uff0c\u8fd9\u4e2a\u65e5\u671f\u662f\u4e0d\u662f\u6709\u4ec0\u4e48\u7279\u6b8a\u7684\u610f\u4e49\u5462\uff1f\n\n> \u6c5f\u6237\u5ddd\u67ef\u5357\uff1a\u771f\u5b9e\u8eab\u4efd\u662f\u9ad8\u4e2d\u751f\u4fa6\u63a2\u5de5\u85e4\u65b0\u4e00\u3002$17$ \u5c81\uff0c\u56e0\u670d\u4e0b\u6bd2\u836f\u8eab\u4f53\u53d8\u5c0f\u540e\u7ea6 $7$ \u5c81\u3002\u751f\u65e5\u662f $5$ \u6708 $4$ \u65e5\uff0c\u6765\u6e90\u4e8e $1891$ \u5e74 $5$ \u6708 $4$ \u65e5\u798f\u5c14\u6469\u65af\u548c\u83ab\u91cc\u4e9a\u8482\u6559\u6388\u5760\u5165\u83b1\u8f9b\u5df4\u8d6b\u7011\u5e03\u7684\u65e5\u671f\u3002\n> \n> \u5de5\u85e4\u65b0\u4e00\uff1a $17$ \u5c81\u7684\u9ad8\u4e2d\u751f\u4fa6\u63a2\u3002\u751f\u65e5\u4e3a $5$ \u6708 $4$ \u65e5\uff0c\u6765\u6e90\u4e8e\u300a\u798f\u5c14\u6469\u65af\u63a2\u6848\u96c6\u4e4b\u6700\u540e\u4e00\u6848\u300b\u4e2d\uff0c $1891$ \u5e74 $5$ \u6708 $4$ \u65e5\u798f\u5c14\u6469\u65af\u548c\u83ab\u91cc\u4e9a\u8482\u6559\u6388\u5728\u83b1\u8f9b\u5df4\u8d6b\u7011\u5e03\u5c55\u5f00\u5bf9\u51b3\uff0c\u83ab\u91cc\u4e9a\u8482\u6389\u5230\u7011\u5e03\u91cc\u6b7b\u4ea1\uff0c\u798f\u5c14\u6469\u65af\u751f\u8fd8\u3002\n\n**\u795d\u67ef\u5357\u548c\u65b0\u4e00\u751f\u65e5\u5feb\u4e50\uff01**\n\n\u6ca1\u4e86\u4e48\uff1f\n\n~~\u8fd8\u6709\u4e48\uff1f~~\n\n\u8fd9\u662f xht37 \u5728\u6d1b\u8c37\u7684\u4e2a\u4eba\u4fe1\u606f\uff1a\n\n> - **\u7528\u6237 ID** 100544\n> - **\u7528\u6237\u7c7b\u578b** \u666e\u901a\u7528\u6237\n> - **\u6ce8\u518c\u65f6\u95f4** 2018-05-04 08:29\n\n**xht37 \u6765\u6d1b\u8c37\u5df2\u7ecf\u6574\u6574\u4e00\u5e74\u5566 QwQ**",
        "postTime": 1557138363,
        "uid": 100544,
        "name": "xht",
        "ccfLevel": 9,
        "title": "P5346 \u3010XR-1\u3011\u67ef\u5357\u5bb6\u65cf"
    },
    {
        "content": "\u9996\u5148\u4e00\u770b\u9898,\u88f8\u9898\u554a,\u8fd8\u4e0d\u5e26\u4fee! \u8fd9\u4e2a\u4e0d\u662f\u6c42\u51fa\u6bcf\u4e00\u4e2a\u70b9\u7684\u6392\u540d\u540e,\u7956\u5148\u94fe\u4e0a\u5efa\u4e3b\u5e2d\u6811,\u5b50\u6811\u91cc\u5c31\u7ebf\u6bb5\u6811\u5408\u5e76\u5c31\u505a\u5b8c\u4e86\u5417\u3002\n\n\u7a0d\u5fae\u8be6\u7ec6\u4e00\u70b9\u5c31\u662f: \u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5f53\u524d\u5b58\u5728\u7684\u6392\u540d,\u6bcf\u4e2a\u8282\u70b9\u4e0a\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u5b50\u6811\u5185\u7684\u5df2\u6709\u6392\u540d\u4e2a\u6570,\u8be2\u95ee\u7684\u65f6\u5019\u5728\u7ebf\u6bb5\u6811\u4e0a\u8d70\u5c31\u884c\u4e86\u3002\n\n~~(\u7136\u540e\u4f60\u53d1\u73b0\u4f60\u4e0d\u4f1a\u6392\u5e8f...\u8fd9\u4e2a\u771f\u81ea\u95ed\u4e86,\u660e\u660e\u9a6c\u4e0a\u5c31\u8981\u5207\u4e86\u4f46\u662f\u88ab\u8fd9\u4e2a\u4e1c\u897f\u6446\u4e00\u9053\u3002)~~\n\n\u9996\u5148\u7684\u60f3\u6cd5\u662f\u6309\u7167\u6df1\u5ea6\u987a\u5e8f\u4f9d\u6b21\u6392\u5e8f,\u8fd9\u6837\u5bf9\u4e8e\u9700\u8981\u6bd4\u8f83\u7236\u4eb2\u7684\u6392\u540d\u65f6\u5c31\u80fd\u591f\u76f4\u63a5O(1)\u5f97\u5230\u4e86\uff0c\u4f46\u662f\u8fd9\u4e2a\u6837\u5b50\u4e0d\u80fd\u76f4\u63a5\u66b4\u529b\u5408\u5e76\u6392\u540d,\u590d\u6742\u5ea6\u4f1a\u4e0d\u5bf9\u3002\n\n\u4e8e\u662f\u6211\u4eec\u796d\u51fa\u540e\u7f00\u5e73\u8861\u6811\u5bf9\u4e8e\u6b64\u7c7b\u95ee\u9898\u7684\u505a\u6cd5,\u5f53\u6211\u4eec\u8981\u5feb\u901f\u53d6\u5f97\u5e73\u8861\u6811\u4e2d\u4e24\u4e2a\u70b9\u7684\u5148\u540e\u5173\u7cfb\u65f6\u91c7\u7528\u7ed9\u6bcf\u4e00\u4e2a\u70b9\u8d4b\u4e00\u4e2a\u6743\u503c\u7684\u65b9\u5f0f\u3002\n\n\u6bd4\u5982\u8bf4\u6743\u503c\u8303\u56f4\u5728 (0,1) \u4e2d\u53d6,\u90a3\u4e48\u6839\u8282\u70b9\u7684\u6743\u503c\u5c31\u662f 0.5 \u5b83\u7684\u5de6\u53f3\u513f\u5b50\u7684\u6743\u503c\u8303\u56f4\u5206\u522b\u53d8\u6210 (0,0.5) , (0.5,1)\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5 O(1) \u7684\u6bd4\u8f83\u51fa\u4e24\u4e2a\u70b9\u7684\u5927\u5c0f\u5173\u7cfb\u4e86\u3002\u5b9e\u73b0\u4e0a\u5199\u4e00\u4e2a\u66ff\u7f6a\u7f8a\u6811\u5c31\u5f88\u65b9\u4fbf\u4e86\u3002\n\n\u6574\u7406\u4e00\u4e0b\u6d41\u7a0b\u5c31\u662f\u5148\u7528 \u66ff\u7f6a\u7f8a\u6811+\u8d4b\u4e88\u8282\u70b9\u6743\u503c\u7684\u65b9\u5f0f\u5b9e\u73b0\u5bf9\u8282\u70b9\u7684\u6392\u5e8f,\u7136\u540e\u518d\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5f97\u5230\u7b54\u6848\u3002(\u5927\u66b4\u529b\u89e3\u6cd5)\n\n\u590d\u6742\u5ea6$O(nlogn)$\n\n\u4ee3\u7801:\n```code\n#include<bits/stdc++.h>\nusing namespace std;\n#define Set(a,b) memset(a,b,sizeof(a))\ntemplate<class T>inline void init(T&x){\n\tx=0;char ch=getchar();bool t=0;\n\tfor(;ch>'9'||ch<'0';ch=getchar()) if(ch=='-') t=1;\n\tfor(;ch>='0'&&ch<='9';ch=getchar()) x=(x<<1)+(x<<3)+(ch-48);\n\tif(t) x=-x;return;\n}typedef long long ll;\nconst int N=5e5+10;\nconst int MAXN=2e7+10;\nint rk[N];int ls[MAXN],rs[MAXN],size[MAXN],cnt=0;\nint id[N],rt1[N],rt2[N],fa[N],IQ[N];\nint n,q;\nstruct edge{int to,next;}a[N];\nint head[N];\ninline void add(int x,int y){a[++cnt]=(edge){y,head[x]};head[x]=cnt;}\nint ans[N];\ntypedef pair<int,int> PA;\nvector<PA> Q1[N];\nvector<PA> Q2[N];\nint HEAD=0;\n#define MID (l+r)>>1\ninline void Insert(int&u,int l,int r,int p){\n\t++cnt;ls[cnt]=ls[u],rs[cnt]=rs[u],size[cnt]=size[u];\n\tu=cnt;++size[u];\n\tif(l==r) return;\n\tint mid=MID;\n\tif(mid>=p) Insert(ls[u],l,mid,p);\n\telse       Insert(rs[u],mid+1,r,p);\n\treturn;\n}\nint Query(int u,int l,int r,int K){\n\tif(!u) return 0;if(l==r) return l;\n\tint mid=MID;\n\tif(size[ls[u]]>=K) return Query(ls[u],l,mid,K);\n\treturn Query(rs[u],mid+1,r,K-size[ls[u]]);\n}\nint Merge(int u,int v,int l,int r){\n\tif(!u||!v)return u|v;size[u]+=size[v];\n\tif(l==r) return u;int mid=MID;\n\tls[u]=Merge(ls[u],ls[v],l,mid);\n\trs[u]=Merge(rs[u],rs[v],mid+1,r);\n\treturn u;\n}\nvoid Dfs(int u){\n\tInsert(rt2[u],1,n,rk[u]);\n\tfor(PA P:Q1[u]) {int ID=P.second;int K=P.first;ans[ID]=id[Query(rt1[u],1,n,K)];}\n\tfor(int v,i=head[u];i;i=a[i].next) {\n\t\tv=a[i].to;\n\t\trt1[v]=rt1[u];Insert(rt1[v],1,n,rk[v]);\n\t\tDfs(v);\n\t\trt2[u]=Merge(rt2[u],rt2[v],1,n);\n\t}\n\tfor(PA P:Q2[u]) {\n\t\tint ID=P.second;int K=P.first;\n\t\tans[ID]=id[Query(rt2[u],1,n,K)];\n\t}return;\n}\n\nnamespace SORT{\n\ttypedef double db;\n\tint dep[N];const double alpha=0.75;\n\tint ls[N],rs[N],size[N];int rt=0;double val[N];\n\tqueue<int> Q;bool mark[N];\n\tinline bool cmp(int i,int j){\n\t\tif(IQ[i]!=IQ[j]) return IQ[i]>IQ[j];\n\t\tif(fa[i]&&fa[j]&&fa[i]!=fa[j]) return (IQ[fa[i]]>IQ[fa[j]]||val[fa[i]]<val[fa[j]]);\n\t\treturn i>j;\n\t}\n\tinline bool Jud(int u){\n\t\tconst int LIM=size[u]*alpha;\n\t\tif(!LIM) return 0;\n\t\tif(LIM<=size[ls[u]]||LIM<=size[rs[u]]) return 1;\n\t\treturn 0;\n\t}\n\tint stk[N];int top=0;\n\tvoid dfs1(int u){if(!u) return;dfs1(ls[u]);stk[++top]=u;dfs1(rs[u]);return;}\n\tvoid dfs2(int&u,int l,int r,db L,db R){\n\t\tif(l>r) {u=0;return;}\n\t\tint mid=MID;u=stk[mid];\n\t\tdb Mid=(L+R)/2.0;val[u]=Mid;\n\t\tdfs2(ls[u],l,mid-1,L,Mid);\n\t\tdfs2(rs[u],mid+1,r,Mid,R);\n\t\tsize[u]=1+size[ls[u]]+size[rs[u]];\n\t\treturn;\n\t}\n\tinline void Rebuild(int&u,db l,db r){top=0;dfs1(u);dfs2(u,1,top,l,r);return;}\n\tvoid Insert(int&u,db L,db R,int v,bool reb){\n\t\tif(!u) {u=v;val[v]=(L+R)/2;size[u]=1;return;}\n\t\t++size[u];bool Reb=0;\n\t\tif(reb&&Jud(u)) Reb=1;\n\t\tif(cmp(v,u)) Insert(ls[u],L,(L+R)/2.0,v,Reb^1);\n\t\telse         Insert(rs[u],(L+R)/2.0,R,v,Reb^1);\n\t\tif(Reb) Rebuild(u,L,R);return;\n\t}\n\tvoid Dfs(int u){\n\t\tif(!u) return;\n\t\tDfs(ls[u]);\n\t\tid[++HEAD]=u,rk[u]=HEAD;\n\t\tDfs(rs[u]);\n\t\treturn;\n\t}\n\tvoid Work(){\n\t\tQ.push(1);\n\t\twhile(!Q.empty()) {\n\t\t\tint u=Q.front();Q.pop();Insert(rt,0,1.0,u,1);\n\t\t\tfor(int v,i=head[u];i;i=a[i].next) {v=a[i].to;Q.push(v);}\n\t\t}HEAD=0;Dfs(rt);\n\t}\n}\nint main()\n{\n\tinit(n),init(q);\n\tfor(int i=2;i<=n;++i) init(fa[i]),add(fa[i],i);\n\tfor(int i=1;i<=n;++i) init(IQ[i]),id[i]=i;\n\tSORT::Work();\n\tcnt=0;\n\tfor(int i=1;i<=q;++i) {\n\t\tint op;init(op);\n\t\tint x,k;init(x);\n\t\tif(op==1) ans[i]=rk[x];\n\t\telse {\n\t\t\tinit(k);\n\t\t\tif(op==2) Q1[x].push_back(PA(k,i));\n\t\t\telse      Q2[x].push_back(PA(k,i));\n\t\t}\n\t}Insert(rt1[1],1,n,rk[1]);\n\tDfs(1);\n\tfor(int i=1;i<=q;++i) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n\n```",
        "postTime": 1557039942,
        "uid": 47803,
        "name": "NeosKnight",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5346 \u3010\u3010XR-1\u3011\u67ef\u5357\u5bb6\u65cf\u3011"
    },
    {
        "content": "**\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c$\\Longrightarrow $[Blog](https://i.cnblogs.com/PostDone.aspx?postid=10820513&actiontip=%E4%BF%9D%E5%AD%98%E4%BF%AE%E6%94%B9%E6%88%90%E5%8A%9F)**\n## \u9898\u76ee\n[P5346 \u3010XR-1\u3011\u67ef\u5357\u5bb6\u65cf](https://www.luogu.org/problemnew/show/P5346)\n## \u505a\u6cd5\n\u806a\u660e\u6027\u662f\u5177\u6709\u4f20\u9012\u6027\u7684\uff0c\u4e14\u6392\u5217\u662f\u56fa\u5b9a\u7684\n\u90a3\u4e48\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u7684\u540d\u6b21\uff0c\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4$k$\u5927\u503c\n\n\u4e00\u773c\u5e73\u8861\u6811\uff0c\u904d\u5386\u7684\u540c\u65f6\u63d2\u5165$O(log^2n)$\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog^2n)$\n\n\u663e\u7136\u8fd8\u9700\u8981\u4f18\u5316\uff0c\u8003\u8651\u4e24\u4e2a\u70b9\u7684\u6bd4\u8f83\uff1a\u6309\u6df1\u5ea6\u9012\u51cf\u6bd4\u8f83\u503c\uff0c\u5982\u679c\u5728\u7b49\u957f\u524d\u63d0\u4e0b\u503c\u76f8\u7b49\uff0c\u5219\u6bd4\u8f83\u6df1\u5ea6\u6700\u6d45\u4e14\u7684\u4e0d\u4e00\u6837\u7684\u7956\u5148\u7684\u5927\u5c0f\n\n\u8fd9\u548c\u540e\u7f00\u6bd4\u8f83\u5927\u5c0f\u76f8\u4f3c\uff0c\u6211\u4eec\u540e\u7f00\u6570\u7ec4\u6765\u5b9e\u73b0\u6392\u5217\u7684\u8fd9\u4e2a\u8fc7\u7a0b\n## Code\n```cpp\n#include<bits/stdc++.h>\ntypedef int LL;\nconst LL maxn=1e6+9;\ninline LL Read(){\n\tLL x(0),f(1); char c=getchar();\n\twhile(c<'0' || c>'9'){\n\t\tif(c=='-') f=-1; c=getchar();\n\t}\n\twhile(c>='0' && c<='9'){\n\t\tx=(x<<3)+(x<<1)+c-'0'; c=getchar();\n\t}return x*f;\n}\nstruct node{\n\tLL to,nxt;\n}dis[maxn];\nLL n,num,q,m,tim;\nLL head[maxn],fa[maxn],a[maxn],sa[maxn],x[maxn],y[maxn],z[maxn],c[maxn],rk[maxn],inc[maxn][25],b[maxn],dfn[maxn],low[maxn];\ninline void Add(LL u,LL v){\n\tdis[++num]=(node){v,head[u]}; head[u]=num;\n}\ninline void Sort(){\n\tfor(LL i=1;i<=n;++i) ++c[x[i]=a[i]];\n    for(LL i=2;i<=m;++i) c[i]+=c[i-1];\n    for(LL i=n;i>=1;--i) sa[c[x[i]]--]=i;\n    for(LL i=1;i<=n;++i) rk[sa[i]]=i;\n\tfor(LL len=1,t=0;len<n;len<<=1,++t){\n\t\tLL num(0);\n\t\tfor(LL i=1;i<=n;++i) z[i]=rk[inc[i][t]];\n\t\tfor(LL i=0;i<=n;++i) c[i]=0;\n\t\tfor(LL i=1;i<=n;++i) ++c[z[i]]; for(LL i=1;i<=n;++i) c[i]+=c[i-1];\n        for(LL i=n;i>=1;--i) y[c[z[sa[i]]]--]=sa[i];\n\t\t\n\t\tfor(LL i=0;i<=m;++i) c[i]=0;\n\t\tfor(LL i=1;i<=n;++i) ++c[x[i]]; for(LL i=1;i<=m;++i) c[i]+=c[i-1];\n\t\tfor(LL i=n;i>=1;--i) sa[c[x[y[i]]]--]=y[i];\n\t\tfor(LL i=1;i<=n;++i) rk[sa[i]]=i;\n\t\tstd::swap(x,y);\n\t\tx[sa[1]]=num=1;\n\t\tfor(LL i=2;i<=n;++i)\n\t\t    x[sa[i]]=(y[sa[i]]==y[sa[i-1]] && y[inc[sa[i]][t]]==y[inc[sa[i-1]][t]])?num:++num;\n\t\tif(num==n) break;\n\t\tm=num;\n\t}\n}\nstruct Tree{\n\tLL root[maxn],nod,size[maxn*10],son[maxn*10][2];\n\tvoid Update(LL &now,LL pre,LL l,LL r,LL x){\n\t\tnow=++nod; size[now]=size[pre]+1;\n\t\tif(l==r) return; LL mid(l+r>>1);\n\t\tif(x<=mid){ Update(son[now][0],son[pre][0],l,mid,x); son[now][1]=son[pre][1]; }\n\t\telse{ Update(son[now][1],son[pre][1],mid+1,r,x); son[now][0]=son[pre][0]; }\n\t}\n\tLL Query1(LL now,LL l,LL r,LL k){\n\t\tif(l==r) return sa[l]; LL mid(l+r>>1);\n\t\tLL ret(size[son[now][0]]);\n\t\treturn k<=ret?Query1(son[now][0],l,mid,k):Query1(son[now][1],mid+1,r,k-ret);\n\t}\n\tLL Query2(LL pre,LL now,LL l,LL r,LL k){\n\t\tif(l==r) return sa[l]; LL mid(l+r>>1);\n\t\tLL ret(size[son[now][0]]-size[son[pre][0]]);\n\t\treturn k<=ret?Query2(son[pre][0],son[now][0],l,mid,k):Query2(son[pre][1],son[now][1],mid+1,r,k-ret);\n\t}\n}T1,T2;\nvoid Fir(LL u){\n\tinc[u][0]=fa[u];\n\tfor(LL i=1;i<=20;++i){\n\t\tinc[u][i]=inc[inc[u][i-1]][i-1]; if(!inc[u][i]) break;\n\t}\n\tfor(LL i=head[u];i;i=dis[i].nxt) Fir(dis[i].to);\n}\nvoid Dfs(LL u){\n\tdfn[u]=++tim;\n\tT1.Update(T1.root[u],T1.root[fa[u]],1,n,rk[u]);\n\tT2.Update(T2.root[tim],T2.root[tim-1],1,n,rk[u]);\n\tfor(LL i=head[u];i;i=dis[i].nxt) Dfs(dis[i].to);\n\tlow[u]=tim;\n}\ninline void Init(){\n\tn=Read(); q=Read();\n\tfor(LL i=2;i<=n;++i) Add(fa[i]=Read(),i);\n\tfor(LL i=1;i<=n;++i) b[i]=a[i]=Read();\n\tstd::sort(b+1,b+1+n); m=std::unique(b+1,b+1+n)-b-1;\n\tfor(LL i=1;i<=n;++i) a[i]=std::lower_bound(b+1,b+1+m,a[i])-b;\n}\nint main(){\n\tInit();\n\tFir(1);\n\tSort();\n\tstd::reverse(sa+1,sa+1+n);\n\tfor(LL i=1;i<=n;++i) rk[sa[i]]=i;\n\tDfs(1);\n\twhile(q--){\n\t\tLL op(Read()),x(Read());\n\t\tif(op==1) printf(\"%d\\n\",rk[x]);\n\t\telse{\n\t\t\tLL k(Read());\n\t\t\tif(op==2) printf(\"%d\\n\",T1.Query1(T1.root[x],1,n,k));\n\t\t    else printf(\"%d\\n\",T2.Query2(T2.root[dfn[x]-1],T2.root[low[x]],1,n,k));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1557132064,
        "uid": 88804,
        "name": "y2823774827y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5346 \u3010\u3010XR-1\u3011\u67ef\u5357\u5bb6\u65cf\u3011"
    },
    {
        "content": "\u56e0\u4e3a\u8fd9\u7bc7\u9898\u89e3\u662f\u9996\u53d1\uff0c\u6240\u4ee5\u539a\u989c\u65e0\u803b\u5730\u8d34\u4e00\u4e0b\u81ea\u5df1\u7684[\u535a\u5ba2](https://blog.csdn.net/DSL_HN_2002/article/details/89854445)\n\n# Solution\n\n\u8fd9\u91cc\u5199\u7684\u662f @\u79df\u9165\u96e8 \u5728\u8003\u573a\u7684\u5199\u6cd5\u3002\n\n\u663e\u7136\uff0c\u806a\u660e\u7a0b\u5ea6\u7684\u6bd4\u8f83\u5177\u6709\u4f20\u9012\u6027\u3002\u6240\u4ee5\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u628a\u6bcf\u4e2a\u4eba\u7684\u806a\u660e\u7a0b\u5ea6\u6392\u5e8f\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8f7b\u6613\u7684\u56de\u7b54\u8be2\u95ee\u4e86\u3002\n\n\u8003\u8651\u6309\u627e\u67d0\u79cd\u987a\u5e8f\u5f80\u5df2\u7ecf\u6392\u597d\u7684\u5e8f\u5217\u6dfb\u52a0\u4e00\u4e2a\u6570\uff0c\u6ee1\u8db3\u5b83\u7684\u7236\u4eb2\u5df2\u7ecf\u88ab\u6bd4\u8f83\u4e86\uff08\u6bd4\u5982\u76f4\u63a5\u6309\u8f93\u5165\u987a\u5e8f\uff09\u3002\n\n\u6bd4\u8f83\u663e\u7136\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u8fd9\u4e2a\u5e8f\u5217\uff0c\u6bcf\u6b21\u5f80\u5e73\u8861\u6811\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u70b9\u3002\u4f46\u662f\u628a\u4e00\u4e2a\u70b9\u63d2\u5165\u5e73\u8861\u6811\u9700\u8981$O(logn)$\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u6bd4\u8f83\u662f$O(logn)$\u7684\uff0c\u603b\u590d\u6742\u5ea6$O(nlog^2n)$\uff0c\u52a0\u4e0a\u5e73\u8861\u6811\u7684\u5927\u5e38\u6570\u663e\u7136\u65e0\u6cd5\u901a\u8fc7\u3002\n\n\u8003\u8651\u4f18\u5316\u6bd4\u8f83\u7684\u590d\u6742\u5ea6\u3002\u6211\u4eec\u4e3a\u6bcf\u4e00\u4e2a\u4eba\u8d4b\u4e0a\u4e00\u4e2a$[0,1]$\u7684\u5b9e\u6570\u6743\u503c\uff0c\u7528\u8fd9\u4e2a\u6765\u8868\u793a\u4e00\u4e2a\u4eba\u7684\u806a\u660e\u7a0b\u5ea6\uff0c\u65b0\u52a0\u7684\u4eba\u7684\u6743\u503c\u4e3a\u4ed6\u524d\u9a71\u540e\u7ee7\u7684\u5e73\u5747\u503c\u3002\u4f46\u662f\u76f4\u63a5\u8fd9\u6837\u4f1a\u70b8\u7cbe\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u7528\u66ff\u7f6a\u7f8a\u6811\uff0c\u5728\u91cd\u6784\u7684\u540c\u65f6\u91cd\u6784\u628a\u6743\u503c\u5e73\u5747\u5206\u914d\u3002\u8fd9\u6837\u7531\u4e8e\u5e73\u8861\u6811\u7684\u6811\u9ad8\u662f$O(logn)$\u7684\uff0c\u6240\u4ee5\u6211\u4eec$/2$\u7684\u6b21\u6570\u4e5f\u662f$O(logn)$\u7684\uff0c\u5c31\u4e0d\u4f1a\u70b8\u7cbe\u5ea6\u4e86\u3002\n\n\u81f3\u4e8e\u8be2\u95ee\u662f\u4e3b\u5e2d\u6811\u57fa\u672c\u64cd\u4f5c\u5c31\u4e0d\u8bb2\u4e86\u3002\n\n\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u5c0f\u5170\u6ca1\u6709\u53d1\u73b0\u67ef\u5357\u5bb6\u65cf\u7684\u4eba\u90fd\u662f\u4e00\u4e2a\u4eba\u5c31\u53ef\u4ee5\u7e41\u6b96\u540e\u4ee3\u5417\uff1f\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int gi()\n{\n    char c = getchar();\n    while (c < '0' || c > '9') c = getchar();\n    int sum = 0;\n    while ('0' <= c && c <= '9') sum = sum * 10 + c - 48, c = getchar();\n    return sum;\n}\n\nconst int maxn = 500005;\nconst double alpha = 0.7;\n\nint n, q, fa[maxn], c[maxn];\n\nint rt, lch[maxn], rch[maxn], siz[maxn], cnt, tmp[maxn];\ndouble w[maxn];\n\nvoid dfs(int u)\n{\n    if (lch[u]) dfs(lch[u]);\n    tmp[++cnt] = u;\n    if (rch[u]) dfs(rch[u]);\n}\n\nvoid build(int &u, int l, int r, double wl, double wr)\n{\n    int mid = (l + r) >> 1;\n    u = tmp[mid]; w[u] = (wl + wr) / 2;\n    if (l < mid) build(lch[u], l, mid - 1, wl, w[u]); else lch[u] = 0;\n    if (mid < r) build(rch[u], mid + 1, r, w[u], wr); else rch[u] = 0;\n    siz[u] = 1 + siz[lch[u]] + siz[rch[u]];\n}\n\nvoid rebuild(int &u, double l, double r) {cnt = 0; dfs(u); build(u, 1, cnt, l, r);}\n\ninline bool cmp(int a, int b)\n{\n    if (c[a] != c[b]) return c[a] > c[b];\n    else if (fa[a] && fa[b] && fa[a] != fa[b]) return w[fa[a]] < w[fa[b]];\n    else return a > b;\n}\n\nvoid insert(int &u, int x, double l, double r, bool f)\n{\n    if (!u) return u = x, siz[u] = 1, w[x] = (l + r) / 2, void();\n    ++siz[u];\n    bool flg = 0;\n    if (cmp(x, u)) {\n        flg |= alpha * (siz[lch[u]] + 1) > siz[rch[u]];\n        insert(lch[u], x, l, w[u], flg);\n    } else {\n        flg |= alpha * (siz[rch[u]] + 1) > siz[lch[u]];\n        insert(rch[u], x, w[u], r, flg);\n    }\n    if (flg && !f) rebuild(u, l, r);\n}\n\nstruct edge\n{\n    int to, next;\n} e[maxn];\nint h[maxn], rk[maxn], dfn[maxn], low[maxn], T, ecnt;\n\ninline void add(int u, int v) {e[++ecnt] = (edge) {v, h[u]}; h[u] = ecnt;}\n\nstruct node\n{\n    int lch, rch, siz;\n} s[maxn * 60];\nint tot, rt1[maxn], rt2[maxn];\n\nvoid modify(int &x, int l, int r, int p)\n{\n    ++tot; s[tot] = s[x]; ++s[x = tot].siz;\n    if (l == r) return ;\n    int mid = (l + r) >> 1;\n    if (p <= mid) modify(s[x].lch, l, mid, p);\n    else modify(s[x].rch, mid + 1, r, p);\n}\n\nint query(int x, int y, int l, int r, int k)\n{\n    if (l == r) return tmp[l];\n    int mid = (l + r) >> 1;\n    if (k > s[s[y].lch].siz - s[s[x].lch].siz) return query(s[x].rch, s[y].rch, mid + 1, r, k - (s[s[y].lch].siz - s[s[x].lch].siz));\n    else return query(s[x].lch, s[y].lch, l, mid, k);\n}\n\nvoid t_dfs(int u)\n{\n    dfn[u] = ++T;\n    rt1[u] = rt1[fa[u]]; modify(rt1[u], 1, n, rk[u]);\n    rt2[T] = rt2[T - 1]; modify(rt2[T], 1, n, rk[u]);\n    for (int i = h[u], v; v = e[i].to, i; i = e[i].next)\n        if (v != fa[u]) t_dfs(v);\n    low[u] = T;\n}\n\nint main()\n{\n    n = gi(); q = gi();\n    for (int i = 2; i <= n; ++i) add(fa[i] = gi(), i);\n    for (int i = 1; i <= n; ++i) {\n        c[i] = gi();\n        insert(rt, i, 0, 1, 0);\n    }\n\n    rebuild(rt, 0, 1);\n    for (int i = 1; i <= n; ++i) rk[tmp[i]] = i;\n    \n    t_dfs(1);\n\n    int tp, x;\n    while (q--) {\n        tp = gi(); x = gi();\n        if (tp == 1) printf(\"%d\\n\", rk[x]);\n        else if (tp == 2) printf(\"%d\\n\", query(0, rt1[x], 1, n, gi()));\n        else printf(\"%d\\n\", query(rt2[dfn[x] - 1], rt2[low[x]], 1, n, gi()));\n    }\n\n    return 0;\n}\n```",
        "postTime": 1557058837,
        "uid": 119899,
        "name": "dsidsi",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5346 \u3010\u3010XR-1\u3011\u67ef\u5357\u5bb6\u65cf\u3011"
    },
    {
        "content": "\u8bb2\u4e00\u4e0b\u540e\u7f00\u5e73\u8861\u6811\u7684\u505a\u6cd5\u3002\n\n\u6628\u5929\u82b1\u4e86\u4e00\u4e2a\u4e0b\u5348\u5199\u4e86\u4e00\u4e2a $O(n\\log^2 n)$ \u7684\u505a\u6cd5\uff0c\u600e\u4e48\u5361\u90fd\u5361\u4e0d\u8fc7\u53bb\u3002 ~~\u8111\u5b50\u60f3\u4e00\u60f3\u4e24\u53ealog\u600e\u4e48\u8fc7\u4e94\u5341\u4e07~~\n\n\u7b2c $k$ \u5927\u53ef\u4ee5\u4e0d\u7528\u7ba1\u5b83\uff0c\u56e0\u4e3a\u5176\u5b9e\u4f60\u628a\u5927\u5c0f\u5173\u7cfb\u6392\u597d\u540e\uff0c\u52a0\u4e00\u4e2a $dfs$ \u5e8f\u4e3b\u5e2d\u6811\u548c\u6811\u4e0a\u8def\u5f84\u524d\u7f00\u4e3b\u5e2d\u6811\u5c31\u884c\u4e86\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5982\u4f55\u6bd4\u8f83\u4e24\u4e2a\u4eba\u7684\u806a\u660e\u7a0b\u5ea6\u3002\n\n\u9996\u5148\uff0c\u8fd9\u53ef\u4ee5\u500d\u589e\u3002\u6211\u4eec\u54c8\u5e0c\u4e00\u4e0b\uff0c\u66b4\u529b\u8df3\u5230\u4e24\u4e2a\u70b9\u6743\u503c\u4e0d\u4e00\u6837\u7684\u7956\u5148\uff0c\u7136\u540e\u6309\u7167\u9898\u610f\u6a21\u62df\u5373\u53ef\u3002\n\n\u4f46\u662f\u663e\u7136\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u80fd $O(1)$ \u6bd4\u8f83\uff0c\u74f6\u9888\u5728\u6bd4\u8f83\u4e24\u4e2a\u7236\u4eb2\u8c01\u66f4\u806a\u660e\u4e0a\u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u5176\u5b9e\u80fd\u60f3\u5230\u540e\u7f00\u5e73\u8861\u6811\u3002\u8bdd\u8bf4\u521a\u5b66\u7684\u4e1c\u897f\u90fd\u80fd\u5fd8\u6389\uff0c\u6211\u4e5f\u662f\u5389\u5bb3\u3002\n\n~~Owen\u53cb\u60c5\u63d0\u793a\uff1a\u4e0d\u8981\u6ca1\u770b\u61c2\u9898\u9762\u5c31\u8bf4\u9898\u76ee\u7b80\u5355\uff0c\u5206\u5206\u949f\u6253\u8138~~\n\n\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u63d2\u8fdb\u5e73\u8861\u6811\u5c31\u884c\u4e86\u3002\u51fa\u9898\u4eba\u7528\u7684\u662f\u6811\u4e0a $SA$\uff0c\u4f60\u53ef\u4ee5\u53bb\u95ee\u4ed6\u5177\u4f53\u600e\u4e48\u505a\u7684\u3002\n\n~~zsy2K\u662f\u600e\u4e48\u5199\u5b8c\u7684~~\n\n$Code\\ Below:$\n\n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=500000+10;\nconst double alpha=0.75;\nint n,q,fa[maxn],a[maxn],rnk[maxn],ch[maxn][2],siz[maxn],s[maxn],top,rt;double val[maxn];\nint st[maxn],ed[maxn],mp[maxn],tim,head[maxn],to[maxn],nxt[maxn],tot;\n\ninline void addedge(int x,int y)\n{\n    to[++tot]=y;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\nvoid dfs(int x)\n{\n    st[x]=++tim;mp[tim]=x;\n    for(int i=head[x];i;i=nxt[i]) dfs(to[i]);\n    ed[x]=tim;\n}\ninline bool cmp(int x,int y)\n{\n    if(a[x]!=a[y]) return a[x]>a[y];\n    if(fa[x]&&fa[y]&&fa[x]!=fa[y]) return val[fa[x]]<val[fa[y]];\n    return x>y;\n}\nvoid build(int &x,int l,int r,double _l,double _r)\n{\n\tif(l>r) {x=0;return;}\n\tint mid=(l+r)>>1;val[x=s[mid]]=(_l+_r)/2;siz[x]=r-l+1;\n\tbuild(ch[x][0],l,mid-1,_l,val[x]);\n\tbuild(ch[x][1],mid+1,r,val[x],_r);\n}\nvoid recycle(int &x)\n{\n\tif(!x) return ;\n\trecycle(ch[x][0]);s[++top]=x;recycle(ch[x][1]);x=0;\n}\nvoid rebuild(int &x,double l,double r)\n{\n\ttop=0;recycle(x);build(x,1,top,l,r);\n}\nvoid insert(int &x,int y,double l,double r,bool f)\n{\n\tif(!x) {x=y;siz[y]=1;val[y]=(l+r)/2;return;}\n\tbool fg=f;siz[x]++;\n\tif(cmp(y,x))\n\t{\n\t\tfg|=(alpha*siz[x]<=siz[ch[x][0]]+1);\n\t\tinsert(ch[x][0],y,l,val[x],fg);\n\t}\n\telse\n\t{\n\t\tfg|=(alpha*siz[x]<=siz[ch[x][1]]+1);\n\t\tinsert(ch[x][1],y,val[x],r,fg);\n\t}\n\tif(fg&&!f) rebuild(x,l,r);\n}\n\nstruct CT\n{\nint rt[maxn],sz,ls[maxn*20],rs[maxn*20],siz[maxn*20];\nvoid update(int &x,int y,int l,int r,int k)\n{\n    x=++sz;ls[x]=ls[y];rs[x]=rs[y];siz[x]=siz[y]+1;\n    if(l == r) return ;\n    int mid=(l+r)>>1;\n    if(k <= mid) update(ls[x],ls[y],l,mid,k);\n    else update(rs[x],rs[y],mid+1,r,k);\n}\nint query(int u,int v,int l,int r,int k)\n{\n    if(l == r) return l;\n    int mid=(l+r)>>1,now=siz[ls[v]]-siz[ls[u]];\n    if(k <= now) return query(ls[u],ls[v],l,mid,k);\n    else return query(rs[u],rs[v],mid+1,r,k-now);\n}\nvoid dfs(int x,int f)\n{\n    rt[x]=rt[f];update(rt[x],rt[x],1,n,rnk[x]);\n    for(int i=head[x];i;i=nxt[i]) dfs(to[i],x);\n}\ninline void init1() {dfs(1,0);}\ninline void init2()\n{\n    for(int i=1;i<=n;i++) rt[i]=rt[i-1],update(rt[i],rt[i],1,n,rnk[mp[i]]);\n}\ninline int ask1(int x,int k) {return s[query(0,rt[x],1,n,k)];}\ninline int ask2(int x,int k) {return s[query(rt[st[x]-1],rt[ed[x]],1,n,k)];}\n}S,T;\n\nint main()\n{\n    scanf(\"%d%d\",&n,&q);\n    for(int i=2;i<=n;i++) scanf(\"%d\",&fa[i]),addedge(fa[i],i);\n    for(int i=1;i<=n;i++) scanf(\"%d\",&a[i]),insert(rt,i,0,1,0);\n    top=0;recycle(rt);\n    for(int i=1;i<=n;i++) rnk[s[i]]=i;\n    dfs(1);S.init1();T.init2();\n    int op,x,k;\n    while(q--)\n    {\n        scanf(\"%d%d\",&op,&x);\n        if(op==1) printf(\"%d\\n\",rnk[x]);\n        if(op==2) scanf(\"%d\",&k),printf(\"%d\\n\",S.ask1(x,k));\n        if(op==3) scanf(\"%d\",&k),printf(\"%d\\n\",T.ask2(x,k));\n    }\n    return 0;\n}\n```",
        "postTime": 1557023858,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5346 \u3010\u3010XR-1\u3011\u67ef\u5357\u5bb6\u65cf\u3011"
    }
]