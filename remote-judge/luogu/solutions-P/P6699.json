[
    {
        "content": "\u53cb\u60c5\u63d0\u793a\uff1a\u524d\u5f80 [github blog](https://potassiumwings.github.io/2021/09/10/from_hungary_to_blossom_tree/) \u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c :)\n\n## \u5f15\u5165\n\n\u524d\u4e9b\u5929\u770b\u5230\u4e86\u4e00\u4e2a\u6bd4\u8f83\u6709\u8da3\u7684\u9898\u76ee\uff0c\u9700\u8981\u7528\u5230\u4e00\u822c\u56fe\u6700\u5927\u6743\u5339\u914d\u3002\u53ef\u662f\u6211\u53ea\u4f1a\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u751a\u81f3\u4e0d\u4f1a KM \u548c\u5e26\u82b1\u6811\u7684\u539f\u7406\uff0c\u4e8e\u662f\u5c31\u8fdb\u884c\u4e86\u4e00\u4e2a\u8d44\u6599\u7684\u641c\uff0c\u987a\u4fbf\u589e\u957f\u4e00\u4e0b\u677f\u5b50\u5e93\u3002\u7136\u800c\u2014\u2014\n\n\u5bf9\u4e00\u822c\u56fe\u6700\u5927\u6743\u5339\u914d\uff0c\u7f51\u4e0a\u73b0\u6210\u9ad8\u8d28\u91cf\u8d44\u6599\u8f83\u5c11\u3002\n\n![](https://potassiumwings.github.io/images/oiwiki_match.png)\n\n\u82e6\u4e8e\u8d44\u6599\u6742\u4e71\u3001\u4e14\u65e0\u8bba\u6b63\u786e\u6027\u8fd8\u662f\u4ee3\u7801\u5177\u4f53\u5b9e\u73b0\u90fd\u6ca1\u6709\u4e00\u4e2a\u6e05\u6670\u7684\u5168\u6d41\u7a0b\u6559\u7a0b\uff0c\u5728\u5438\u53d6\u4f17\u957f\u3001\u594b\u6597\u4e09\u5929\u540e\uff0c\u7ec8\u4e8e\u901a\u8fc7\u4e86 UOJ \u4e0a\u7684[\u6a21\u677f\u9898](https://uoj.ac/problem/81)\u3002\n\n![](https://potassiumwings.github.io/images/uoj_submission.png)\n\n\n\u8fd9\u7bc7\u535a\u5ba2\u4e3b\u8981\u76ee\u7684\u5728\u4e8e\uff0c\u68b3\u7406\u6574\u4e2a\u6d41\u7a0b\uff08\u5305\u542b\u4ee3\u7801\u5b9e\u73b0\uff09\u4e2d\u5e94\u7528\u7684\u539f\u7406\u548c\u4f7f\u7528\u7684\u6280\u5de7\u3002\u4e00\u822c\u56fe\u6700\u5927\u6743\u5339\u914d\u4e3b\u8981\u901a\u8fc7\u4e0b\u9762\u56db\u4e2a\u95ee\u9898\u9010\u6b65\u8f6c\u5316\uff1a\n\n1. \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\n2. \u4e00\u822c\u56fe\u6700\u5927\u5339\u914d\n3. \u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d\n4. \u4e00\u822c\u56fe\u6700\u5927\u6743\u5339\u914d\n\n\u672c\u6587\u4e3b\u8981\u63cf\u8ff0\uff0c\u5982\u4f55\u901a\u8fc7\u89e3\u51b3\u524d\u4e09\u4e2a\u95ee\u9898\u7684\u601d\u8def\uff0c\u89e3\u51b3\u7b2c\u56db\u4e2a\u66f4\u4e3a\u590d\u6742\u7684\u95ee\u9898\u3002**\u672c\u6587\u7684\u524d\u7f6e\u77e5\u8bc6\u53ea\u6709\u5308\u7259\u5229\u7b97\u6cd5**\u3002\n\n## \u57fa\u672c\u5b9a\u4e49\n\n\u5339\u914d\uff1a\u5bf9\u4e8e\u56fe $G=(V,E)$ \u7684\u4e00\u4e2a\u5339\u914d $M$ \u662f\u8fb9\u96c6  $E$ \u7684\u5b50\u96c6\uff0c\u5176\u4e2d\u4e24\u4e24\u4e0d\u5171\u7528\u9876\u70b9\u3002\n\n\u6700\u5927\u5339\u914d\uff1a\u8fb9\u6570\u6700\u591a\u7684\u5339\u914d\u3002\n\n\u5b8c\u7f8e\u5339\u914d\uff1a\u5305\u542b\u539f\u56fe\u6240\u6709\u70b9\u7684\u5339\u914d\u3002\n\n\u6700\u5927\u6743\u5339\u914d\uff1a\u5bf9\u4e8e\u56fe $G(V,E)$\uff0c\u8fb9 $e\\in E$ \u7684\u6743\u91cd\u4e3a $w(e)$\uff0c\u6700\u5927\u6743\u5339\u914d $M=(V',E')$ \u4e3a $\\sum_e w(e)$ \u6700\u5927\u7684\u5339\u914d\u3002\n\n\u6700\u5927\u6743\u6700\u5927\u5339\u914d\uff1a\u6700\u5927\u6743\u6700\u5927\u5339\u914d $M(V',E')$ \u4e3a $\\sum_e w(e)$ \u6700\u5927\u7684\u6700\u5927\u5339\u914d\u3002\n\n\u5339\u914d\u70b9\u3001\u672a\u5339\u914d\u70b9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\uff1a\u5b57\u9762\u542b\u4e49\uff0c\u5bf9\u5e94\u4e8e\u67d0\u4e2a\u5339\u914d\u7684\u72b6\u6001\u3002\n\n\u4ea4\u9519\u8def\u5f84\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c**\u4f9d\u6b21\u4ea4\u9519\u7ecf\u8fc7**\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u5f62\u6210\u7684\u8def\u5f84\u3002\n\n\u589e\u5e7f\u8def\uff1a\u4e00\u4e2a\u672b\u5c3e\u662f\u672a\u5339\u914d\u70b9\u7684\u4ea4\u9519\u8def\u5f84\u3002**\u8fd9\u6837\u7684\u8def\u5f84\u53ef\u4ee5\u901a\u8fc7\u7ffb\u8f6c\u6574\u6761\u8def\u4e0a\u8fb9\u7684\u9009\u62e9\u72b6\u6001\u83b7\u5f97\u4e00\u4e2a\u957f\u5ea6\u6070\u597d\u589e\u52a0 $1$ \u7684\u5339\u914d**\u3002\n\n\u4e0b\u5217\u5404\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u65e0\u5411\u4e8c\u5206\u56fe\uff08\u7bad\u5934\u53ea\u662f\u8868\u793a\u589e\u5e7f\u8def\u7684\u987a\u5e8f\uff09\u67d0\u65f6\u523b\u5bf9\u589e\u5e7f\u8def\u589e\u5e7f\u7684\u60c5\u51b5\uff0c\u5206\u522b\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\u3001\u4e00\u6761\u4ea4\u9519\u8def\u3001\u4e00\u6761\u589e\u5e7f\u8def\u548c\u5bf9\u589e\u5e7f\u8def\u589e\u5e7f\u7684\u7ed3\u679c\u3002\uff08\u600e\u4e48\u4e0d\u652f\u6301 html \u554a\uff0c\u4e0d\u4f1a\u6a2a\u7740\u653e\uff0c\u518d\u6b21[\u4f20\u9001\u95e8\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://potassiumwings.github.io/2021/09/10/from_hungary_to_blossom_tree/)\uff09\n\n| ![](https://potassiumwings.github.io/images/augment_path_bipartite.png) | \n![](https://potassiumwings.github.io/images/alternating_path_bipartite.png) | ![](https://potassiumwings.github.io/images/augment_path_bipartite_2.png) | \n![](https://potassiumwings.github.io/images/augment_path_bipartite_3.png) |\n| -----------: | -----------: | -----------: | -----------: |\n\n\n\n\n\n\n\n\n\n\n\n\u4ea4\u9519\u6811\uff1a\u4ece\u672a\u5339\u914d\u70b9 $r$ \u5f00\u59cb\u5bfb\u627e\u589e\u5e7f\u8def\u65f6\uff0c\u4ea4\u9519\u8def\u5f84\u7ec4\u6210\u7684\u6811\u3002\u5176\u4e2d\uff0c\u6211\u4eec\u79f0**\u5411\u6839\u65b9\u5411\u5339\u914d\u7684\u70b9\u4e3a $S$ \u70b9\uff08\u9ed1\u70b9\uff0c\u5076\u70b9\uff09**\uff0c**\u80cc\u5411\u6839\u65b9\u5411\u5339\u914d\u7684\u70b9\u4e3a $T$ \u70b9\uff08\u767d\u70b9\uff0c\u5947\u70b9\uff09**\u3002\u4e0b\u56fe\u5c55\u793a\u4e86\u4e8c\u5206\u56fe\u548c\u4ee5 1 \u4e3a\u6839\u7684\u4ea4\u9519\u6811\u3002\n\n| ![](https://potassiumwings.github.io/images/alternating_tree_1.png) | ![](https://potassiumwings.github.io/images/alternating_tree_2.png) |\n| -----------: | -----------: |\n\n\n\n\n\n\n\n## \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\n\n\u4e8c\u5206\u56fe\u5339\u914d\u53ef\u4ee5\u7528\u7f51\u7edc\u6d41\u505a\uff0cDinic \u5728\u4e8c\u5206\u56fe\u4e0a\u7684\u590d\u6742\u5ea6\u548c Hopcroft-Karp \u76f8\u540c\uff0c\u5747\u4e3a $O(E\\sqrt{V})$ \uff0c\u4e0d\u8d58\u8ff0\u3002\n\n\u5308\u7259\u5229\u7b97\u6cd5\u6d41\u4f20\u8f83\u5e7f\u7684\u662f DFS \u505a\u6cd5\uff0c\u5373\u679a\u4e3e\u5de6\u90e8\u6bcf\u4e2a\u672a\u5339\u914d\u70b9\uff0c\u8bb0\u5f55\u53f3\u90e8\u8282\u70b9\u5339\u914d\u7684\u5de6\u90e8\u6807\u53f7 $match_q$\uff0c\u68c0\u67e5\u4ea4\u9519\u8def\u662f\u5426\u4e3a\u589e\u5e7f\u8def\uff0c\u590d\u6742\u5ea6 $O(VE)$\u3002\u6b63\u786e\u6027\u662f\u901a\u8fc7 Berge's Theorm \uff08\u5982\u679c\u627e\u4e0d\u5230\u67d0\u70b9\u4e3a\u7aef\u70b9\u7684\u589e\u5e7f\u8def\uff0c\u5219\u6700\u5927\u5339\u914d\u53ef\u4ee5\u4e0d\u5305\u62ec\u8fd9\u4e2a\u70b9\uff09\u8bc1\u660e\u7684\uff0c\u6bd4\u8f83\u663e\u7136\u3002\n\n```cpp\nint dfs(int p,int t){ // p: \u5de6\u534a\u8fb9\u7f16\u53f7 \n\tfor(auto q:G[p])\n\t\tif(t!=vis[q]){\n\t\t\tvis[q]=t;\n\t\t\tif(match[q]==-1||dfs(mt[q],t))\n                return match[q]=p,1;\n\t\t}\n\treturn 0;\n}\nint maxmatch(){\n\tint ans=0;\n    memset(match,-1,sizeof(match));\n\tfor(int i=1;i<=n;i++)\n\t\tif(match[i]==-1&&dfs(i,i))ans++;\n\treturn ans;\n}\n```\n\n\u540c\u6837\u5730\uff0c\u53ef\u4ee5\u8fdb\u884c BFS\uff0c\u5373\u521d\u59cb\u65f6\u6240\u6709\u70b9\u90fd\u672a\u5339\u914d\uff0c\u5c06\u672a\u5339\u914d\u70b9\u5165\u961f\u3002\u9010\u4e2a\u53d6\u51fa\u961f\u9996\u5143\u7d20\u4f5c\u4e3a\u4ea4\u9519\u6811\u7684\u6839\uff0c**\u5bf9\u4ea4\u9519\u6811\u8fdb\u884c BFS** \u5339\u914d\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u589e\u5e7f\u7684\u672c\u8d28\u662f\u5728**\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6839\u7684\u4ea4\u9519\u6811\u4e0a\u5bfb\u627e\u589e\u5e7f\u8def**\u3002\u800c\u4e8c\u5206\u56fe\u5de6\u90e8\u6c38\u8fdc\u662f\u9ed1\u70b9\uff0c\u53f3\u90e8\u6c38\u8fdc\u662f\u767d\u70b9\uff0c\u56e0\u6b64\u589e\u5e7f\u8def\u7684\u9996\u672b\u5fc5**\u5206\u522b\u5728\u5de6\u90e8\u548c\u53f3\u90e8**\u3002\n\n## \u4e00\u822c\u56fe\u6700\u5927\u5339\u914d\n\n\u5bf9\u4e8e\u4e00\u822c\u56fe\uff0c\u5c31\u6ca1\u6709\u8fd9\u4e48\u597d\u7684\u6027\u8d28\u4e86\u3002\u4f46\u552f\u4e00\u7684\u4e0d\u540c\u662f\uff0c\u4e00\u822c\u56fe\u4e2d\u53ef\u80fd\u6709\u5947\u6570\u957f\u5ea6\u7684\u73af\uff0c\u4e0b\u7b80\u79f0\u5947\u73af\u3002\u5728\u5947\u73af\u4e0a\u7684**\u6bcf\u4e00\u4e2a\u70b9**\u8fde\u51fa\u53bb\u7684\u975e\u5339\u914d\u8fb9\uff0c\u90fd\u80fd\u591f\u6210\u4e3a**\u67d0\u4e2a\u589e\u5e7f\u8def**\u4e0a\u7684\u8fb9\uff0c\u8fd9\u5bfc\u81f4\u5728\u589e\u5e7f\u7684\u8fc7\u7a0b\u4e2d\u96be\u4ee5\u5224\u65ad\u5982\u4f55\u7ffb\u8f6c\u3002\u4e0b\u56fe\u662f\u589e\u5e7f\u8def\u7ecf\u8fc7\u5947\u73af\u7684\u4e24\u79cd\u5f62\u5f0f\u3002\n\n![](https://potassiumwings.github.io/images/general_matching_1.png)\n\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5947\u73af\u5177\u6709\u4e86\u6240\u6709\u9ed1\u70b9\u9700\u8981\u5177\u5907\u7684\u6027\u8d28\uff1a\u4efb\u610f\u70b9\u8fde\u51fa\u53bb\u7684\u975e\u5339\u914d\u8fb9\u90fd\u53ef\u4ee5\u5728\u4ece\u6839\u5f00\u59cb\u7684\u4ea4\u9519\u8def\u4e0a\uff1b\u5947\u73af\u7684\u6839\u5411\u6839\u65b9\u5411\u5339\u914d\u3002\u4e8e\u662f\uff0c\u5c06\u5947\u73af\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u79f0\u4e3a**\u82b1**\u3002\u5947\u73af\u7684**\u6839**\uff0c\u4e5f\u5c31\u662f\u6574\u4e2a\u73af\u4e2d\u552f\u4e00\u8fde\u4e86\u4e24\u4e2a\u73af\u5185\u975e\u5339\u914d\u8fb9\u7684\u70b9\uff0c\u79f0\u4e3a**\u82b1\u6258**\uff08\u4e0a\u56fe\u4e2d\u7684 root\uff09\u3002\n\n\u5c06\u82b1\u7f29\u6210\u4e00\u4e2a\u70b9\u540e\uff0c\u73af\u4e0a\u6240\u6709\u70b9\u53d8\u6210\u9ed1\u70b9\uff0c\u5e76\u53ef\u4ee5\u5728\u4ea4\u9519\u6811\u4e0a\u5411\u5916\u5ef6\u4f38\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u4e2d\uff0c\u4e0d\u9700\u8981\u771f\u6b63\u5730\u8bb0\u5f55\u82b1\uff0c\u53ea\u9700\u8981\u8bb0\u5f55**\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u82b1\u6839\u4f4d\u7f6e $fa$**\uff08\u672c\u8d28\u662f\u4e2a\u5e76\u67e5\u96c6\uff09\uff1b\u540c\u65f6\u4e3a\u4e86**\u65b9\u4fbf\u4e0a\u8ff0\u4e24\u79cd\u60c5\u51b5\u7684\u5224\u65ad**\uff0c\u5bf9\u4e8e\u6240\u6709**\u9ed1\u70b9**\uff0c\u8bb0\u5f55\u4ea4\u9519\u6811\u4e0a**\u4ece\u6839\u5f00\u59cb\u8fde\u5411\u5f53\u524d\u70b9\u7684\u975e\u5339\u914d\u8fb9** $pre$\uff08\u5bf9\u4e8e\u975e\u82b1\u70b9 $i$\uff0c$pre_i$ \u5c31\u662f\u7236\u8282\u70b9\uff09\u3002\n\n\u6bcf\u5f53\u627e\u5230\u9ed1-\u9ed1\u8fb9\uff08S-S \u8fb9\uff09\u65f6\u8fdb\u884c\u7f29\u82b1\uff08`shrink`\uff09\u64cd\u4f5c\uff0c\u82b1\u6258\u5c31\u662f\u4e24\u70b9\u7684 LCA \uff0c\u53ef\u4ee5\u66b4\u529b\u6c42\u51fa\uff1b\u5c06\u82b1\u5185\u6240\u6709\u767d\u70b9\u53d8\u9ed1\u5165\u961f\uff0c\u5e76\u66f4\u65b0\u8fd9\u4e9b\u70b9\u7684 $pre$ \u3002\u7531\u4e8e\u5b9e\u73b0\u6bd4\u8f83\u5bb9\u6613\uff0c\u4e0b\u9762\u4e0d\u89e3\u91ca\u5730\u7ed9\u51fa\u53c2\u8003\u4ee3\u7801\uff08~~\u540e\u6765\u8fd8\u662f\u5199\u4e86\u4e00\u4e9b\u6ce8\u91ca\u4fbf\u4e8e\u7406\u89e3~~\uff09\u3002\n\n```cpp\nint mat[N],color[N],n; // color 1: black 2: white\nint pre[N]; // walk through a unmatched edge\nint fa[N]; // union-find set\nvector<int>G[N];\nqueue<int>Q; \nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\nvoid rev(int p){ // reverse augment path from rt to p\n\t// !!!!!!!!!!!! graph needs to be [1,n]\n\tif(p){\n\t\trev(mat[pre[p]]);\n\t\tmat[p]=pre[p];mat[pre[p]]=p;\n\t}\n}\nvoid shrink(int u,int v,int r){\n\t// shrink odd cycle into 1 point: color all along to black ([x])\n\t// pre: -> [x] ->\n\t//             <- [y] <-\n\twhile(find(u)!=r){\n\t\t// [pre[mat[u]] <- mat[u] -- [u] -- [v]\n\t\t// turn into (-> stands for pre)\n\t\t//         [u]  <- [v]    -- []  -> []\n\t\tpre[u]=v;\n\t\tfa[mat[u]]=fa[u]=r;\n\t\tif(color[mat[u]]==2)color[mat[u]]=1,Q.push(mat[u]);\n\t\tv=mat[u];u=pre[v];\n\t}\n}\nint vis[N];\nint lca(int x,int y){\n    static int t=0;\n\t++t;\n\twhile(1){\n\t\tif(vis[x=find(x)]==t)return x;\n\t\telse if(x)vis[x]=t;\n\t\tx=pre[mat[x]];\n\t\tswap(x,y);\n\t}\n}\nint augment(int rt){\n\tint i;\n\tfor(i=0;i<=n;i++)fa[i]=i,color[i]=pre[i]=0;\n\tcolor[rt]=1;\n\tQ=queue<int>({rt});\n\twhile(!Q.empty()){\n\t\tp=Q.front();Q.pop();\n\t\tassert(color[p]==1); // black\n\t\tfor(auto q:G[p]){\n\t\t\tif(color[q]==1){\n\t\t\t\tint r=lca(p,q); // root of flower\n\t\t\t\tshrink(p,q,r);\n\t\t\t\tshrink(q,p,r);\n\t\t\t}\n\t\t\telse if(!color[q]){\n\t\t\t\tcolor[q]=2; // white\n\t\t\t\tpre[q]=p;\n\t\t\t\tif(!mat[q]){\n\t\t\t\t\trev(q);\n\t\t\t\t\treturn 1;\n\t\t\t\t}else{\n\t\t\t\t\tcolor[mat[q]]=1;\n\t\t\t\t\tQ.push(mat[q]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint maxmatch(){\n\tint i,m;\n\tscanf(\"%d%d\",&n,&m);\n\tint ans=0;\n\tfor(i=0;i<m;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tG[x].pb(y);G[y].pb(x);\n\t\tif(!mat[x]&&!mat[y])mat[x]=y,mat[y]=x,ans++;\n\t}\n\tfor(i=1;i<=n;i++)if(!mat[i])ans+=augment(i);\n    return ans;\n}\n```\n\n## \u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d\n\n\u548c\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u4e00\u6837\uff0c\u6700\u5927\u6743\u5339\u914d\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u6d41\u90a3\u4e00\u5957\u6c42\u89e3\uff1a\u5c06\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u770b\u505a\u4e00\u4e2a\u8d39\u7528\uff0c\u7136\u540e\u6c42\u4e00\u4e0b\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\u4f46\u4e3a\u4e86\u6269\u5c55\u5230\u4e00\u822c\u56fe\uff0c\u8003\u8651 KM \u7b97\u6cd5\u3002\n\n\u5b66\u4e4b\u524d\uff0c\u6211\u5bf9\u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d\u7684\u5370\u8c61\u4ec5\u505c\u7559\u5728 KM \u7b97\u6cd5\u7684\u677f\u5b50\u4e0a\uff0c\u6ca1\u6709\u771f\u6b63\u53bb\u7406\u89e3 KM \u7b97\u6cd5\u3002\u4e0b\u9762\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b KM \u7b97\u6cd5\uff08\u5982\u679c\u4f60\u662f\u7b2c\u4e00\u6b21\u5b66\u4e60 KM \u7b97\u6cd5\uff0c\u63a8\u8350\u4e00\u4e2a\u6bd4\u8f83\u6709\u8da3\u7684\u5f15\u5165\uff1a[KM\u7b97\u6cd5\u8be6\u89e3+\u6a21\u677f](https://www.cnblogs.com/wenruo/p/5264235.html)\uff0c\u4ec5\u770b\u627e\u5bf9\u8c61\u90e8\u5206\u5927\u81f4\u4e86\u89e3\u4e00\u4e0b\u5373\u53ef\uff09\u3002\n\n### \u6700\u5927\u6743\u5b8c\u7f8e\u5339\u914d\n\n\u6211\u4eec\u5148\u8003\u8651\u6700\u5927\u6743**\u5b8c\u7f8e**\u5339\u914d\uff08\u6700\u5927\u6743\u5339\u914d\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u96f6\u8fb9\u53d8\u6210\u5b8c\u7f8e\u5339\u914d\uff09\u3002\u8bbe\u5bf9\u4e8e\u8fb9 $e$\uff0c\u9009/\u4e0d\u9009\u8be5\u8fb9\u8868\u793a\u4e3a $x_e=0$ \u6216 $x_e=1$\uff1b\u8bbe $\\delta(v)$ \u8868\u793a $v$ \u6240\u8fde\u7684\u8fb9\u96c6\uff0c\u5219\u6211\u4eec\u8981\u6c42\u7684\u6700\u5927\u6743\u5339\u914d\u5373\u4e3a\n\n $\\max\\sum_{e\\in E} w(e)x_e$\uff0c\u6ee1\u8db3\u6761\u4ef6 $\\left\\{\\begin{aligned}&x(\\delta(v))=1:\\forall v\\in V\\\\&x_e\\in\\{0, 1\\}:\\forall e\\in E\\end{aligned}\\right.$\n\n\u8fd9\u662f\u4e00\u4e2a\u6574\u6570\u89c4\u5212\u95ee\u9898\uff0c\u901a\u8fc7\u539f\u59cb\u5bf9\u5076\uff08Primal-Dual\uff09\u601d\u60f3\u8f6c\u5316\u4e3a\u5bf9\u5076\u95ee\u9898\uff1a\n\n$\\min \\sum_{v\\in V}z_v$\uff0c\u6ee1\u8db3\u6761\u4ef6 $\\left\\{\\begin{aligned}&z_e=z_u+z_v-w(e)\\ge 0:\\forall e\\in E\\\\& z_u\\ge 0:\\forall v\\in V\\end{aligned}\\right.$\n\n\u540c\u65f6\uff0c\u6839\u636e\u4e92\u8865\u677e\u5f1b\u6761\u4ef6\uff0c $x_e>0\\Rightarrow z_e=0$\u3002\u5373\uff0c\u5bf9\u4e8e\u9009\u4e2d\u7684\u8fb9 $e$\uff0c\u5fc5\u6709 $z_e=0$\u3002\n\n\u8fd9\u91cc\u7684 $z$ \u5c31\u662f $KM$ \u7b97\u6cd5\u4e2d\u7684\u9876\u6807\uff08vertex labeling\uff09\u3002\u5b9a\u4e49\u8fb9 $e(u,v)$ \u4e3a\u201d\u7b49\u8fb9\u201c\u5f53\u4e14\u4ec5\u5f53 $z_u+z_v=w(e)$\uff0c\u4e5f\u5373 $z_e=0$\uff0c\u6839\u636e\u4e0a\u8ff0\u4e92\u8865\u677e\u5f1b\u6761\u4ef6\uff0c**\u5339\u914d\u53ea\u80fd\u5728\u7b49\u8fb9\u6784\u6210\u7684\u5b50\u56fe\u4e0a\u5efa**\u3002\u521d\u59cb\u65f6\uff0c\u5de6\u90e8\uff08\u9ed1\u70b9\uff09\u6bcf\u4e2a\u70b9\u7684\u9876\u6807\u5747\u4e3a\u5176\u80fd\u591f\u8fde\u5230\u7684\u6700\u5927\u8fb9\u6743\uff0c\u53f3\u90e8\uff08\u767d\u70b9\uff09\u6bcf\u4e2a\u70b9\u7684\u9876\u6807\u5747\u4e3a $0$\u3002\u4e0e\u5308\u7259\u5229\u7b97\u6cd5\u7c7b\u4f3c\uff0c\u6bcf\u6b21\u589e\u5e7f\u5148**\u5728\u201c\u7b49\u8fb9\u201d\u6784\u6210\u7684\u4e00\u5f20\u4e8c\u5206\u5b50\u56fe\u4e0a**\u8fdb\u884c\u5c1d\u8bd5\u5339\u914d\uff0c\u5982\u679c\u5339\u914d\u4e0d\u5230\uff0c\u5219**\u677e\u5f1b**\uff08\u5c06\u6807\u51c6\u653e\u4f4e\u4e00\u4e9b\uff09\u540e\u7ee7\u7eed\u5c1d\u8bd5\uff1b\u76f4\u81f3\u6240\u6709\u8fb9\u90fd\u6210\u4e3a\u7b49\u8fb9\u4ecd\u672a\u627e\u5230\u589e\u5e7f\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002\n\n**\u677e\u5f1b**\u7684\u76ee\u7684\u662f**\u4f7f\u4e00\u4e9b\u65b0\u8fb9\u6210\u4e3a\u7b49\u8fb9**\uff0c\u52a0\u5165\u4e8c\u5206\u5b50\u56fe\uff0c\u8ba9\u5de6\u90e8\u70b9\u80fd\u5c1d\u8bd5\u5339\u914d\u7684\u70b9\u66f4\u591a\uff1b\u540c\u65f6\u4fdd\u8bc1**\u5df2\u6709\u5339\u914d\u8fb9 $z_e=0$** \u3002\u5bf9\u4e8e\u6240\u6709**\u672a\u5339\u914d\u8fb9**\uff0c\u6c42\u51fa\u6700\u5c0f\u7684 $delta=\\min_e z_e=z_u+z_v-w(e)$\uff0c\u7136\u540e\u5c06**\u4ea4\u9519\u6811\u4e2d**\u9ed1\u70b9\u7684\u9876\u6807\u964d\u4f4e $delta$\uff0c\u4ea4\u9519\u6811\u4e2d\u767d\u70b9\u7684\u9876\u6807\u589e\u52a0 $delta$\u3002\u8fd9\u6837\u66b4\u529b\u505a\u7684\u590d\u6742\u5ea6\u662f $O(n^4)$\uff0c\u4e0b\u9762\u7ed9\u51fa\u53c2\u8003\u4ee3\u7801\u3002\n\n### \u66b4\u529b\u5b9e\u73b0\n\n```cpp\nconst ll inf=0x3f3f3f3f3f3f3f3f;\nll w[N][N],lx[N],ly[N];\nint mat[N],visx[N],visy[N],n;\nint dfs(int x){\n\tvisx[x]=1;\n\tint y;\n\tfor(y=1;y<=n;y++){\n\t\tif(!visy[y]&&lx[x]+ly[y]==w[x][y]){\n\t\t\tvisy[y]=1;\n\t\t\tif(!mat[y]||dfs(mat[y]))return mat[y]=x,1;\n\t\t}\n\t}\n\treturn false;\n}\nll km(){\n\tint i,x,y;\n\tmemset(lx,0,sizeof(lx));\n\tmemset(ly,0,sizeof(ly));\n\tmemset(mat,0,sizeof(mat));\n\tfor(x=1;x<=n;x++)\n\t\tfor(y=1;y<=n;y++)\n\t\t\tlx[x]=max(lx[x],w[x][y]);\n\tfor(i=1;i<=n;i++){\n\t\twhile(1){\n\t\t\tmemset(visx,0,sizeof(visx));\n\t\t\tmemset(visy,0,sizeof(visy)); \n\t\t\tif(dfs(i))break;\n\t\t\tll d=inf;\n\t\t\tfor(x=1;x<=n;x++)\n\t\t\t\tfor(y=1;y<=n;y++)\n\t\t\t\t\tif(visx[x]&&!visy[y])\n\t\t\t\t\t\td=min(d,lx[x]+ly[y]-w[x][y]);\n\t\t\tif(d==inf)break;\n\t\t\tfor(x=1;x<=n;x++)if(visx[x])lx[x]-=d;\n\t\t\tfor(y=1;y<=n;y++)if(visy[y])ly[y]+=d;\n\t\t}\n\t}\n\tll ans=0;\n\tfor(i=1;i<=n;i++)ans+=w[mat[i]][i];\n\treturn ans;\n}\n```\n\n\u4e0d\u592a\u884c\uff0c\u8003\u8651\u4f18\u5316\u3002\n\n### \u4f18\u5316\u65b9\u6848\n\n\u4e00\u79cd\u53ef\u884c\u7684\u65b9\u6848\u662f\uff0c\u5bf9\u4e8e\u6240\u6709\u53f3\u90e8\u70b9 $y$\uff0c\u8bb0\u5f55 $slv_y=\\text{argmin}_{x\\in T}(z_x+z_y-w(x,y))$ \uff0c\u5373\u56fa\u5b9a\u4e86 $y$ \u540e\uff0c $z_e$ \u6700\u5c0f\u503c\u5bf9\u5e94 $x$ \uff0c\u5176\u4e2d $T$ \u4e3a\u4ea4\u9519\u6811\u3002\u6bcf\u6b21\u6269\u5c55\u7684\u65f6\u5019\uff0c\u90fd\u662f\u53d6 $slv_y$ \u8ba1\u7b97\u51fa\u7ed3\u679c\u6700\u5c0f\u7684 $y$ \u8fdb\u884c\u6269\u5c55\uff0c\u8fd9\u6837\u5c31\u80fd\u591f**\u4fdd\u7559\u5df2\u6709\u7684\u4ea4\u9519\u6811**\u8fdb\u800c\u7ee7\u7eed\u589e\u5e7f\uff0c\u6bcf\u6b21\u589e\u5e7f\u7684\u590d\u6742\u5ea6\u53d8\u6210 $O(n^2)$\uff0c\u603b\u590d\u6742\u5ea6 $O(n^3)$\u3002\u4e0b\u9762\u7ed9\u51fa\u793a\u4f8b\u4ee3\u7801\uff0c\u5176\u4e2d\u4e3a\u65b9\u4fbf\u589e\u5e7f\uff0c\u4f7f\u7528 $pre$ \u8bb0\u5f55\u9ed1\u70b9\u5728\u4ea4\u9519\u4e0a\u7236\u4eb2\u7684\u7236\u4eb2\uff08\u6700\u8fd1\u9ed1\u70b9\u7956\u5148\uff09\u3002\n\n```cpp\nconst ll inf=0x3f3f3f3f3f3f3f3f;\nll w[N][N],lx[N],ly[N];\nint mx[N],my[N],visx[N],visy[N],n;\nint slv[N],pre[N];\nqueue<int>Q;\nll calc_slv(int u,int v){return lx[u]+ly[v]-w[u][v];}\nvoid add_to_tree(int x){ // add x to tree, update all slv[y]\n\tQ.push(x);\n\tvisx[x]=1;\n\tint y;\n\tfor(y=1;y<=n;y++)\n\t\tif(!slv[y]||calc_slv(x,y)<calc_slv(slv[y],y))slv[y]=x;\n}\nvoid link(int x,int y){\n\tint tx,ty;\n\twhile(x){\n\t\ttx=pre[x];ty=mx[x];\n\t\tmy[y]=x;mx[x]=y;\n\t\tx=tx,y=ty;\n\t}\n}\nint augment(int p){\n\tint x,y;\n\twhile(1){\n\t\twhile(!Q.empty()){\n\t\t\tint x=Q.front();Q.pop();\n\t\t\tfor(y=1;y<=n;y++)if(!visy[y]&&!calc_slv(x,y)){\n\t\t\t\tvisy[y]=1;\n\t\t\t\tif(!my[y])return link(x,y),1;\n\t\t\t\tpre[my[y]]=x;\n\t\t\t\tadd_to_tree(my[y]);\n\t\t\t}\n\t\t} \n\t\tll d=inf;\n\t\tfor(y=1;y<=n;y++)\n\t\t\tif(!visy[y])\n\t\t\t\td=min(d,calc_slv(slv[y],y));\n\t\tif(d==inf)break;\n\t\tfor(x=1;x<=n;x++)if(visx[x])lx[x]-=d;\n\t\tfor(y=1;y<=n;y++)if(visy[y])ly[y]+=d;\n\t\t// add new edges\n\t\tfor(y=1;y<=n;y++)if(!visy[y]&&!calc_slv(slv[y],y)){\n\t\t\tvisy[y]=1;\n\t\t\tif(!my[y])return link(slv[y],y),1;\n\t\t\tpre[my[y]]=slv[y]; // tree: slv -> y == my[y], == stands for match\n\t\t\tadd_to_tree(my[y]);\n\t\t}\n\t}\n\treturn 0;\n}\nll km(){\n\tint i,x,y;\n\tmemset(lx,0,sizeof(lx));\n\tmemset(ly,0,sizeof(ly));\n\tmemset(mx,0,sizeof(mx));\n\tmemset(my,0,sizeof(my));\n\tfor(x=1;x<=n;x++)\n\t\tfor(y=1;y<=n;y++)\n\t\t\tlx[x]=max(lx[x],w[x][y]);\n\tfor(i=1;i<=n;i++){\n\t\tmemset(visx,0,sizeof(visx));\n\t\tmemset(visy,0,sizeof(visy)); \n\t\tmemset(slv,0,sizeof(slv)); \n\t\tQ=queue<int>();\n\t\tadd_to_tree(i);\n\t\taugment(i);\n\t}\n\tll ans=0;\n\tfor(i=1;i<=n;i++)ans+=w[my[i]][i];\n\treturn ans;\n}\n```\n\n### Bonus\n\n\u8fd8\u6709\u4e00\u79cd\u4f7f\u7528\u540c\u6837\u601d\u60f3\uff0c\u5229\u7528**\u5c40\u90e8\u6700\u4f18**\u83b7\u5f97\u5168\u5c40\u6700\u4f18\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9ed1\u70b9 $x$\uff0c\u627e\u5230\u67d0\u4e2a\u767d\u70b9\u52a0\u5165\u4ea4\u9519\u6811\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u59cb\u7ec8\u662f**\u9009\u62e9 $z_e$ \u8f83\u5c0f\u7684\u8fb9\u8fdb\u884c\u6269\u5c55**\u7684\uff0c\u76f4\u5230\u627e\u5230 $x$ \u6240\u5bf9\u5e94\u7684\u589e\u5e7f\u8def\u3002\n\n\u5047\u8bbe\u5f53\u524d\u5df2\u7ecf\u5904\u7406\u5230 $x$\uff0c$1\\dots  x-1$ \u90fd\u5df2\u7ecf\u6709\u5bf9\u5e94\u7684\u589e\u5e7f\u8def\u4e86\u3002\u8bbe\u5bf9\u4e8e\u672a\u5339\u914d\u767d\u70b9 $y$\uff0c\u4e0e\u6240\u6709\u5df2\u5339\u914d\u9ed1\u70b9 $x$ \u4e2d\u7684 $z_e$ \u6700\u5c0f\u503c\u4e3a $slack_y$\uff0c\u6709 $slack_y=\\min_{i\\in[1,x)}z_i+z_y-w_{i,y}$\u3002\u90a3\u4e48\u52a0\u5165\u4ea4\u9519\u6811\u7684 $yy=\\text{argmin}_yslack_y$\uff1b\u540c\u65f6\uff0c\u6839\u636e $yy$ \u7684 $z_{(i,yy)}$ \u53bb\u66f4\u65b0\u9ed1\u767d**\u5df2\u5339\u914d\u70b9\u7684\u9876\u6807**\u548c**\u4e0b\u4e00\u8f6e\u7684 $slack$**\uff0c\u540c\u65f6\u5c06 $mat_{yy}$ \u8fd9\u4e2a\u9ed1\u70b9\u52a0\u5165\u4ea4\u9519\u6811\uff08\u5982\u679c $yy$ \u6ca1\u6709\u5339\u914d\u90a3\u5c31\u8bf4\u660e\u589e\u5e7f\u8def\u627e\u7740\u4e86\uff0c\u9000\u51fa\u5faa\u73af\uff09\u3002\n\n\u8fd9\u6837\u7684\u65b9\u6cd5\u5bf9\u4e8e\u9876\u6807\u7684\u521d\u59cb\u503c\u6ca1\u6709\u8981\u6c42\uff08\u53ef\u4ee5\u4e0d\u521d\u59cb\u5316\uff09\uff0c\u6bcf\u6b21\u5f97\u5230\u7684\u662f $x$ \u7684\u5c40\u90e8\u6700\u4f18\u89e3\uff0c\u4f46\u7531\u4e8e\u53ef\u4ee5\u8fdb\u884c\u589e\u5e7f\uff0c\u56e0\u6b64\u6700\u540e\u5f97\u5230\u7684\u4e5f\u662f\u5168\u5c40\u6700\u4f18\u89e3\uff0c\u975e\u5e38\u5de7\u5999\u3002\u4e0b\u9762\u7ed9\u51fa\u4ee3\u7801\u3002\u5176\u4e2d $pre$ \u8bb0\u5f55\u7684\u662f\u767d\u70b9\u5728\u4ea4\u9519\u6811\u4e0a\u7236\u4eb2\u7684\u7236\u4eb2\uff08\u6700\u8fd1\u767d\u70b9\u7956\u5148\uff09\uff0c$visy$ \u8bb0\u5f55\u767d\u70b9 $i$ \u662f\u5426\u5728\u4ea4\u9519\u6811\u4e2d\u3002\u8fd9\u4e2a\u5b9e\u73b0\u5e38\u6570\u7565\u5c0f\u4e00\u70b9\u3002\n\n```cpp\nconst ll inf=0x3f3f3f3f3f3f3f3f;\nll a[N],p[N],b[N],c[N];\nll w[N][N],slack[N],lx[N],ly[N];\n// for right points\n//   pre: last right point in augment path\n//   visy: if i is in augment path\n//   left: left match\nint pre[N],visy[N],left[N]; \nint n;\nvoid augment(int p){\n\tint i,x=p,y=0,yy;\n\tmemset(pre,0,sizeof(pre));\n\tmemset(slack,0x3f,sizeof(slack));\n\tleft[0]=p;\n\twhile(1){\n\t\tx=left[y],visy[y]=1;\n\t\tll delta=inf;\n\t\tfor(i=1;i<=n;i++){\n\t\t\tif(visy[i])continue;\n\t\t\tll d=lx[x]+ly[i]-w[x][i];\n\t\t\tif(slack[i]>d)slack[i]=d,pre[i]=y;\n\t\t\tif(slack[i]<delta)delta=slack[i],yy=i;\n\t\t}\n\t\tfor(i=0;i<=n;i++){\n\t\t\tif(visy[i])lx[left[i]]-=delta,ly[i]+=delta;\n\t\t\telse slack[i]-=delta;\n\t\t}\n\t\ty=yy;\n\t\tif(left[y]==-1)break;\n\t}\n    // reverse augment path\n\twhile(y)left[y]=left[pre[y]],y=pre[y]; \n}\nll km(){\n\tint i,j;\n\tmemset(left,-1,sizeof(left));\n\tmemset(lx,0,sizeof(lx));\n\tmemset(ly,0,sizeof(ly));\n\tfor(i=1;i<=n;i++){\n\t\tmemset(visy,0,sizeof(visy));\n\t\taugment(i);\n\t}\n\tll res=0;\n\tfor(i=1;i<=n;i++)if(left[i]>0)res+=w[left[i]][i];\n\treturn res;\n}\n```\n\n### \u5176\u4ed6\u5339\u914d\u7684\u5f62\u5f0f\n\n\u4e0a\u8ff0\u8ba8\u8bba\u7684\u90fd\u662f**\u5de6\u53f3\u90e8\u5927\u5c0f\u76f8\u7b49**\u7684**\u5b8c\u5168\u4e8c\u5206\u56fe**\u4e0a\u7684**\u6700\u5927\u6743\u5b8c\u7f8e\u5339\u914d**\uff1b\u5bf9\u4e8e $n_1\\neq n_2$ \u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u8865\u9f50\u4e0d\u8db3\u5143\u7d20\u8fdb\u884c\u8ba1\u7b97\uff1b\u5bf9\u4e8e\u4e0d\u8981\u6c42\u5b8c\u7f8e\u5339\u914d\u7684\u6700\u5927\u6743\u5339\u914d\uff0c\u53ef\u4ee5\u76f4\u63a5\u5e94\u7528\u672c\u6a21\u677f\uff1b\u5bf9\u4e8e\u975e\u5b8c\u5168\u4e8c\u5206\u56fe\uff0c\u589e\u5e7f\u8fc7\u7a0b\u4e2d\u5bf9\u4e0d\u5b58\u5728\u7684\u8fb9\u8fdb\u884c\u7279\u5224\u5373\u53ef\u3002\n\n## \u4e00\u822c\u56fe\u6700\u5927\u6743\u5339\u914d\n\n\u4ecd\u7136\u8003\u8651 KM \u7b97\u6cd5\u5728\u5e26\u82b1\u6811\u4e0a\u8dd1\u7684\u8fc7\u7a0b\u3002\u5f53\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u65f6\uff0c\u5982\u679c\u4ecd\u7136\u6309\u7167\u4e0a\u9762\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u767d\u70b9 $+delta$\uff0c\u9ed1\u70b9 $-delta$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u7f29\u6210\u70b9\u7684\u82b1\u6765\u8bf4\uff0c\u5176\u4e2d\u6709\u5f88\u591a\u4ea4\u9519\u6811\u4e0a\u7684\u8fb9 $(u,v)$\uff0c$u$ \u548c $v$ \u7684\u9876\u6807\u90fd\u88ab\u52a0\u6216\u8005\u51cf\u6389\u4e86 $delta$\uff0c\u5bfc\u81f4\u8fd9\u6761\u8fb9\u4e0d\u6ee1\u8db3 $z_e\\ge 0$ \u7684\u6761\u4ef6\u3002\u4e8e\u662f\u9700\u8981\u5bf9\u4e8e\u6574\u4e2a\u82b1 $B$\uff0c\u8bbe\u7f6e\u989d\u5916\u7684\u82b1\u6807 $z_B$\uff0c\u5728\u677e\u5f1b\u65f6\u989d\u5916\u5bf9\u6240\u6709\u9ed1\u82b1 $+2delta$\uff0c\u5bf9\u767d\u82b1 $-2delta$\uff0c\u624d\u80fd\u4fdd\u6301\u5e73\u8861\u3002\n\n### \u5bf9\u5076\u95ee\u9898\n\n\u8bbe $O$ \u4e3a\u5927\u5c0f\u4e3a $\\ge 3$ \u5947\u6570\u7684\u96c6\u5408\u7684\u96c6\u5408\uff08\u5305\u542b\u6240\u6709\u82b1\uff09\uff0c$\\gamma(S)$ \u8868\u793a $S$ \u96c6\u5408\u4e2d\u7684\u8fb9\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4ecd\u7136\u53ef\u901a\u8fc7\u7ebf\u6027\u89c4\u5212\u8f6c\u5316\u4e3a\u5bf9\u5076\u95ee\u9898\uff1a\n\n$\\max \\sum_{e\\in E}w(e)x_e$\uff0c\u6ee1\u8db3\u6761\u4ef6 $\\left\\{\\begin{aligned}&x(\\delta(v))=1:\\forall v\\in V\\\\&x_e\\in\\{0,1\\}:\\forall e\\in E\\\\&x(\\gamma(B))\\le \\lfloor\\frac{|B|}{2}\\rfloor:\\forall B\\in O\\end{aligned}\\right.$\n\n\u5bf9\u5076\u95ee\u9898\n\n$\\min \\sum_{v\\in V}z_v+\\sum_{B\\in O}\\lfloor\\frac{|B|}{2}\\rfloor z_B$\uff0c\u6ee1\u8db3\u6761\u4ef6 $\\left\\{\\begin{aligned}&z_B\\ge 0:\\forall B\\in O\\\\&z_e=z_u+z_v-w(e)+\\sum_{B\\in O,(u,v)\\in \\gamma(B)} Z_B \\ge 0:\\forall e\\in E\\end{aligned}\\right.$\n\n\u4e0e\u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d\u76f8\u540c\uff0c\u6839\u636e\u4e92\u8865\u677e\u5f1b\u6761\u4ef6\uff0c $x_e>0\\Rightarrow z_e=0$\u3002\u5373\uff0c\u5bf9\u4e8e\u9009\u4e2d\u7684\u8fb9 $e$\uff0c\u5fc5\u6709 $z_e=0$\uff1b\u9664\u6b64\u4ee5\u5916\uff0c\u8fd8\u6709 $z_B>0\\Rightarrow x(\\gamma(B))=\\lfloor\\frac{|B|}2\\rfloor$\uff0c\u5373\u6240\u6709 $z_B>0$ \u7684\u96c6\u5408 $B$\uff0c\u90fd\u88ab\u9009\u4e86\u96c6\u5408\u5927\u5c0f\u4e00\u534a\u7684\u8fb9\uff0c\u4e5f\u5373 $B$ \u662f\u4e00\u6735\u82b1\u3002\u540c\u65f6\uff0c\u6211\u4eec\u52a0\u5165\u4e00\u4e2a\u6761\u4ef6\uff1a $z_B>0\\Rightarrow x(\\delta(B))=1$\uff0c\u5373\u53ea\u6709\u82b1 $B$ \u5411\u5916\u8fde\u4e86\u4e00\u6761\u8fb9\u7684\u65f6\u5019\uff0c $z_B>0$ \u624d\u662f\u6709\u610f\u4e49\u7684\u3002\u8fd9\u5f88\u5bb9\u6613\u6839\u636e $z_B$ \u7684\u7528\u9014\u7406\u89e3\u3002\n\n### \u5177\u4f53\u5b9e\u73b0\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u5c31\u662f\uff1a\n\n1. \u4efb\u610f\u8fb9 $z_e\\ge 0$\uff0c\u53d6\u7b49\u65f6\u662f\u4ea4\u9519\u6811\u91cc\uff08\u5305\u62ec\u5f62\u6210\u82b1\u7684\u8fb9\uff09\u7684\u8fb9\uff1b\n2. $z_B\\ge 0$\u3002\n\n\u901a\u8fc7\u7c7b\u4f3c KM \u7684\u529e\u6cd5\uff0c~~\u6211\u4eec\u5c31\u53ef\u4ee5\u5bb9\u6613\u5730\u7ef4\u62a4\u5e26\u82b1\u6811\u4e86\uff01\u672c\u6587\u5b8c~~\n\n\u96be\u70b9\u5c31\u5728\u5b83\u7684\u5b9e\u73b0\u6b65\u9aa4\u3002\u8fd9\u91cc\u6211\u5206\u4eab\u4e00\u4e0b\u901a\u8fc7\u501f\u9274\u4e00\u6d3e UOJ \u795e\u4ed9\u63d0\u4ea4\u4ee3\u7801\uff0c\u63d0\u7eaf\u7ed3\u6676\u540e\u5f97\u5230\u7684\u6a21\u677f\u5b9e\u73b0\u601d\u8def\u4e0e\u7ec6\u8282\u3002~~[min25 \u7684\u677f\u5b50](https://uoj.ac/submission/221981)\u771f\u5fc3\u770b\u4e0d\u61c2~~\uff0c\u6709\u61c2\u54e5\u6b22\u8fce\u8865\u5145\uff01\n\n\u5148\u6446\u4e00\u4e0b\u662f\u5982\u4f55\u5b58\u50a8\u8fd9\u5f20\u5e26\u82b1\u6811\u7684\uff1a\u4f7f\u7528 $edge$ \u7c7b\u578b\u5b58\u8fb9\uff0c\u5927\u6709\u8bb2\u7a76\uff01\u5bf9\u4e8e\u6709\u82b1\u53c2\u4e0e\u7684\u8fde\u8fb9\uff0c$edge$ \u5b58\u50a8\u7684 $u,v$ \u4e0d\u662f\u82b1\u672c\u8eab\uff0c\u800c\u662f\u82b1\u5185**\u771f\u5b9e\u8282\u70b9**\u7684\u8fb9\u3002\n\n```cpp\n#define N M*2+1\nstruct edge{\n    int u,v;T w;\n    edge(){}\n    edge(int u,int v,T w):u(u),v(v),w(w){}\n};\n// Graph\nint n,n_x; // [1, n]: point; [n+1, n_x]: flower\nedge g[N][N]; // adjacent matrix\n// flower\nvector<int>flower[N]; // nodes in flower i (outer flower)\nint root[N]; // flower root, root<=n root=i: normal nodes\nint flower_from[N][N]; // flower_from[b][x]: outermost flower in b that contains x\n```\n\n\u5176\u4e2d\uff0c\u4e0e\u666e\u901a\u5e26\u82b1\u6811\u4e0d\u540c\uff0c\u8fd9\u91cc\u7684\u82b1\u662f\u989d\u5916\u8fdb\u884c\u5b58\u50a8\u7684\uff08\u5b58\u50a8\u5728 $n+1$ \u5230 $n_x$ \u5185\uff09\uff0c\u56e0\u6b64**\u9700\u8981\u5f00\u4e24\u500d\u7a7a\u95f4**\u3002\u82b1\u53ef\u4ee5\u5d4c\u5957\uff0c\u800c\u4e14\u82b1\u9700\u8981\u5728\u67d0\u4e9b\u65f6\u523b\u8fdb\u884c**\u5c55\u5f00**\uff08\u540e\u9762\u4f1a\u8be6\u7ec6\u8bb2\u8ff0\uff09\uff0c\u56e0\u6b64\u9700\u8981\u4fdd\u5b58\u989d\u5916\u7684\u4fe1\u606f\u3002\u5bf9\u4e8e\u4e00\u4e2a\u82b1 $B$\uff0c\u5b58\u50a8\u5176\u6839 $root$\uff0c\u5bf9\u4e8e\u82b1\u5185\u4efb\u610f\u70b9\u6709 $root_{i\\in B}=B$\uff1b\u5b58\u50a8\u82b1\u5185\u6240\u6709\u8282\u70b9 $flower_B$\uff0c\u662f\u4ee5**\u82b1\u6258\u4e3a\u8d77\u59cb**\u7684\u73af\uff1b\u540c\u65f6\uff0c\u82b1\u5185\u6bcf\u4e00\u70b9 $i$ \u4fdd\u5b58\u201c\u82b1\u5185\u6700\u5927\u7236\u82b1\u201d $flower\\_from_{B,i}$ \u8868\u793a\u6700\u5927\u7684\u5305\u542b $i$ \u7684 $B$ \u7684\u5b50\u82b1\u3002\n\n![](https://potassiumwings.github.io/images/flowered_tree_1.png)\n\n\u5bf9\u4e8e\u4e0a\u9762\u8fd9\u6735\u5d4c\u5957\u82b1\uff1a$\\{1,2,3\\}\\in B1,\\{B1,4,5,6\\}\\in B2$\uff0c\u5b58\u50a8\u4e3a\uff1a\n\n```cpp\nflower[B1]={1,2,3} // 1 \u662f\u82b1\u6258\uff0c\u6309\u7167\u67d0\u4e2a\u987a\u5e8f\u8f6c\u5708\uff0c\u4e5f\u53ef\u80fd\u662f {1,3,2}\nflower[B2]={6,B1,4,5} // 6 \u662f\u82b1\u6258\uff0c\u6309\u7167\u67d0\u4e2a\u987a\u5e8f\u8f6c\u5708\uff0c\u4e5f\u53ef\u80fd\u662f {6,5,4,B1}\nroot[1]=root[6]=root[B1]=root[B2]=B2 // i \u6700\u5916\u5c42\u7684\u82b1\u6258\nflower_from[B2][B1]=B1\nflower_from[B2][1]=B1\nflower_from[B2][4]=4\nflower_from[B1][1]=1\nroot[7]=7 // \u975e\u82b1\u70b9 root \u4e3a\u81ea\u8eab\n```\n\n\u7136\u540e\u662f $slack$ \u548c\u5339\u914d\u76f8\u5173\uff1a\n\n```cpp\n// slack\nT label[N]; // node label, [1, n] point label, [n+1, n_x] flower label\nint col[N]; // color saved at flower root\nint slv[N]; // slack node of NON LEAF NODES, slv[y]=x z(x,y) min_x\n// match\nint mat[N]; // match, mat[x]=y (x,y)\\in E\nint fa[N]; // fa in cross tree\nint vis[N]; // if in path\n\nqueue<int>Q; // bfs queue\n```\n\n$label$ \u4e5f\u5c31\u662f\u5bf9\u5076\u95ee\u9898\u91cc\u7684 $z$\u3002$col$ \u662f\u8282\u70b9\u989c\u8272\uff0c\u4e3a\u9ed1\u8272\u6216\u767d\u8272\u3002$slv_y$ \u8868\u793a\u4e0e $y$ \u90bb\u63a5\u4e14\u4e0d\u5728\u4e00\u6735\u82b1\u7684\u3001 $z(x,y)$ \u6700\u5c0f\u7684 $x$\uff0c**\u56e0\u4e3a\u4ec5\u4f1a\u5728 $x,y$ \u4e0d\u5728\u4e00\u6735\u82b1\u4e2d\u7684\u65f6\u5019\u7528\u5230**\uff0c\u8ba1\u7b97\u65f6\u53ef\u4ee5\u76f4\u63a5 $z_x+z_y-w(x,y)$\u3002 $slv$ \u7684\u76ee\u7684\u662f\u8ba1\u7b97\u677e\u5f1b\uff1a\u6bcf\u6b21\u677e\u5f1b\u65f6\uff0c\u627e\u5230\u7684\u8fb9**\u53ea\u6709\u4e24\u79cd**\uff0c\u5373\u672a\u8bbf\u95ee\u70b9 $y$ \u548c\u67d0\u4e2a\u9ed1\u70b9 $x$ \u4e4b\u95f4\u7684\u8fb9\uff1b\u5df2\u8bbf\u95ee\u7684\u9ed1\u70b9 $y$ \u548c\u67d0\u4e2a\u5df2\u8bbf\u95ee\u4e14\u4e0d\u540c\u82b1\u9ed1\u70b9\u4e4b\u95f4\u7684\u8fb9\u3002\u56e0\u6b64\u901a\u8fc7 $slv$ \u53ef\u4ee5\u65b9\u4fbf\u5730\u8fdb\u884c\u8ba1\u7b97\uff0c\u603b\u590d\u6742\u5ea6 $O(n^3)$\u3002\n\n$mat$ \u53ef\u80fd\u662f\u82b1\u4e4b\u95f4\u7684\u5339\u914d\uff0c\u5373 $mat_x=y$ \u4e2d $x>n,y>n$ \u5747\u662f\u88ab\u5141\u8bb8\u7684\u3002$vis$ \u53ea\u7528\u6765\u8ba1\u7b97 $LCA$ \uff0c\u53ef\u4ee5\u6682\u65f6\u5ffd\u7565\u3002$fa$ \u8868\u793a\u67d0\u767d\u70b9\u5728\u4ea4\u9519\u6811\u4e0a\u7684\u7236\u8282\u70b9\u3002\u6ce8\u610f\u5230\u9ed1\u70b9\u4ea4\u9519\u6811\u4e0a\u7684\u7236\u8282\u70b9\u662f $mat_i$\uff0c**\u5229\u7528\u8fd9\u4e24\u4e2a\u4e1c\u897f\u5c31\u53ef\u4ee5\u5728\u4ea4\u9519\u6811\u4e0a\u8ffd\u6eaf\u5230\u6839\u4e86**\u3002\n\n\u63a5\u4e0b\u6765\u662f\u5bf9 $slv$ \u7684\u66f4\u65b0\u548c\u8ba1\u7b97\uff1a\n\n```cpp\n// calculate slv\ninline T calc_slv(edge e){return label[e.u]+label[e.v]-e.w;}\ninline void update_slv(int u,int v){\n    if(!slv[v]||calc_slv(g[u][v])<calc_slv(g[slv[v]][v]))slv[v]=u;\n}\ninline void recalc_slv(int u){\n    slv[u]=0;\n    for(int i=1;i<=n;i++)\n        if(g[i][u].w>0&&root[i]!=u&&col[root[i]]==1)\n            update_slv(i,u);\n}\n```\n\n\u5bf9\u4e8e BFS \u961f\u5217\uff0c\u5728\u5c06\u82b1\u52a0\u5165\u961f\u5217\u65f6\u9700\u8981\u5c06\u82b1\u4e2d\u6240\u6709\u70b9\u90fd\u52a0\u5165\u961f\u5217\uff1b\u8bbe\u7f6e\u6700\u5916\u5c42\u82b1\u65f6\uff0c\u5bf9\u4e8e\u82b1\u4e2d\u6240\u6709\u70b9\u90fd\u8981\u8fdb\u884c\u8bbe\u7f6e\u3002\n\n```cpp\n// only push nodes, not flowers\nvoid q_push(int x){\n    if(x<=n)Q.push(x);\n    else for(auto p:flower[x])q_push(p);\n}\n\n// set root of all nodes in x to r\nvoid set_root(int x,int r){\n    root[x]=r;\n    if(x>n)for(auto p:flower[x])set_root(p,r);\n}\n```\n\n\u83b7\u53d6\u67d0\u6735\u82b1 $b$ \u4e2d\uff0c\u4ece\u82b1\u6258\u5230 $x$ \u4e00\u6761\u4ea4\u9519\u8def\u5f84\uff1a\u5bf9\u82b1\u8fde\u51fa\u53bb\u8fb9\u7684\u4e24\u79cd\u60c5\u51b5\u5206\u522b\u5904\u7406\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\u3002\n\n```cpp\n// return a (+-)^k path in flower b from root[b] to x\nint get_even_path_in_flower(int b,int x){\n    int pr=find(flower[b].begin(),flower[b].end(),x)-flower[b].begin();\n    assert(b>n&&b<=n_x&&pr<flower[b].size()); // b is flower, x in b\n    if(pr%2==0)return pr;\n    reverse(flower[b].begin()+1,flower[b].end());\n    return flower[b].size()-pr;\n}\n```\n\n\u67d0\u6b21\u589e\u5e7f\u4f7f\u5f97\u9700\u8981\u8bbe\u7f6e $u$ \u5339\u914d $v$\uff0c$u$ \u53ef\u80fd\u662f\u82b1\uff08$v$ \u4e0d\u7ba1\uff09\uff1a\u5bf9\u4e8e $u$ \u4e3a\u82b1\u7684\u60c5\u51b5\uff0c\u4ece\u82b1\u6258\u5230\u771f\u5b9e $u$ \u7684\u8fb9\u90fd\u8fdb\u884c\u7ffb\u8f6c\u5339\u914d\uff0c\u6700\u540e\u82b1\u6258\u79fb\u4f4d\uff0c\u65cb\u8f6c\u82b1\u5230\u6b63\u786e\u4f4d\u7f6e\u3002\n\n```cpp\n// set (u->v) match, can be flower\nvoid set_match(int u,int v){\n    mat[u]=g[u][v].v;\n    if(u>n){\n        edge e=g[u][v];\n        int xr=flower_from[u][e.u];\n        int pr=get_even_path_in_flower(u,xr);\n        for(int i=0;i<pr;i++)set_match(flower[u][i],flower[u][i^1]);\n        set_match(xr,v);\n        rotate(flower[u].begin(),flower[u].begin()+pr,flower[u].end()); // change receptacle\n    }\n}\n```\n\n\u8fde\u63a5\u4e24\u4e2a**\u4e0d\u5728\u540c\u4e00\u4e2a\u82b1\u91cc**\u7684 S \u70b9\uff08\u9ed1\u70b9\uff09\uff1a\u4e24\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\uff0c\u52a0\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\uff0c\u80fd\u6784\u6210\u4e00\u6761\u589e\u5e7f\u8def\u3002\n\n```cpp\n// link 2 S points\nvoid side_augment(int u,int v){\n    int nv=root[mat[u]],nu=root[fa[nv]];\n    while(1){\n        set_match(u,v);\n        u=nu,v=nv;\n        if(!nv)break;\n        set_match(nv,nu);\n        nv=root[mat[u]],nu=root[fa[nv]];\n    }\n}\nvoid linkSS(int u,int v){\n    side_augment(u,v); \n    side_augment(v,u);\n}\n```\n\n\u66b4\u529b\u67e5\u8be2\u4e24\u70b9 LCA\uff1a\u76f4\u63a5\u8df3\u7236\u94fe\u6253\u6807\u8bb0\u3002\n\n```cpp\nint get_lca(int u,int v){\n\tstatic int t=0;\n\t++t; // to avoid clearing vis\n\twhile(u||v){\n\t\tif(vis[u]==t)return u;\n\t\tvis[u]=t;\n\t\tu=root[mat[u]];\n\t\tif(u)u=root[fa[u]];\n\t\tif(!u)swap(u,v);\n\t}\n\treturn 0;\n}\n```\n\n\u589e\u52a0\u4e00\u6735\u5947\u82b1\uff1a\u9700\u8981\u7533\u8bf7\u4e00\u4e2a $id$ \u8bbe\u4e3a $b$\uff0c\u6e05\u7a7a\u6240\u6709\u6570\u636e\uff0c\u5e76\u91cd\u6784\u3002\u9700\u8981\u91cd\u6784\u7684\u90e8\u5206\u6709\uff1a\u989c\u8272\uff1b\u5339\u914d\uff08\u7ee7\u627f\u82b1\u6258\u7684\u5339\u914d\uff09\uff1b\u82b1\u5185\u8282\u70b9\uff1b\u82b1\u5185\u8282\u70b9\u7684 `root`\u3001`flower_from`\uff1b\u90bb\u63a5\u77e9\u9635\uff1b`slv` \u503c\u3002\u5176\u4e2d\uff0c\u90bb\u63a5\u77e9\u9635\u53d6\u7684\u662f $z_e$ \u6700\u5c0f\u7684\u503c\uff0c\u8fd9\u53ef\u4ee5\u4fdd\u8bc1\u6b63\u786e\u6027\u3002\n\n```cpp\nvoid add_blossom(int u,int v,int r){\n\tint i,b=n+1;\n\twhile(b<=n_x&&root[b])b++;\n\tif(b>n_x)++n_x;\n\t// clear\n\tcol[b]=1;label[b]=0;mat[b]=mat[r];flower[b].clear();\n\tfor(i=1;i<=n_x;i++)g[i][b].w=g[b][i].w=0;\n\tfor(i=1;i<=n;i++)flower_from[b][i]=0;\n\t// construct flower\n\twhile(u!=r){\n\t\tflower[b].pb(u);u=root[mat[u]];q_push(u);\n\t\tflower[b].pb(u);u=root[fa[u]];\n\t}\n\tflower[b].pb(r);\n\treverse(flower[b].begin(),flower[b].end());\n\twhile(v!=r){\n\t\tflower[b].pb(v);v=root[mat[v]];q_push(v);\n\t\tflower[b].pb(v);v=root[fa[v]];\n\t}\n\t// set as outermost flower\n\tset_root(b,b);\n\t// calculate slack\n\tfor(auto p:flower[b]){\n\t\tfor(i=1;i<=n_x;i++){\n\t\t\t// set to min slave\n\t\t\tif(!g[b][i].w||calc_slv(g[p][i])<calc_slv(g[b][i])){\n\t\t\t\tg[b][i]=g[p][i];\n\t\t\t\tg[i][b]=g[i][p];\n\t\t\t}\n\t\t}\n\t\tfor(i=1;i<=n;i++)if(flower_from[p][i])flower_from[b][i]=p;\n\t}\n\trecalc_slv(b);\n}\n```\n\n\u5c1d\u8bd5\u589e\u5e7f\u4e00\u6761\u7b49\u8fb9\uff1a\u5982\u679c\u5bf9\u70b9\u672a\u67d3\u8fc7\u8272\uff0c\u5219\u5fc5\u7136\u5df2\u7ecf\u6709\u5339\u914d\uff0c\u5c06\u5176\u5339\u914d\u67d3\u8272\u540e\u4e22\u5165\u961f\u5217\uff1b\u5982\u679c\u5bf9\u70b9\u662f\u9ed1\u70b9\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u679c $LCA=0$ \u5373\u4e0d\u5728\u540c\u4e00\u82b1\u5185\uff0c\u5219 `linkSS`\uff0c\u5426\u5219\u6dfb\u52a0\u82b1\u3002\n\n```cpp\n// found_edge\nint augment_path(edge e){\n    int u=root[e.u],v=root[e.v];\n    if(!col[v]){\n        assert(mat[v]);\n        fa[v]=e.u;\n        col[v]=2;\n        int nu=root[mat[v]];\n        slv[nu]=slv[v]=0;\n        col[nu]=1;\n        q_push(nu);\n    }else if(col[v]==1){\n        int r=get_lca(u,v);\n        if(r)add_blossom(u,v,r);\n        else return linkSS(u,v),1;\n    }\n    return 0;\n}\n```\n\n\u4e00\u6b21\u589e\u5e7f\uff1a\u5c06\u6240\u6709\u672a\u5339\u914d\u70b9\u5165\u961f\u8fdb\u884c BFS\u3002\u5148\u5c1d\u8bd5\u4f7f\u7528\u5f53\u524d $label$ \u4e0b\u7684\u7b49\u8fb9\u6784\u6210\u7684\u5b50\u56fe\u8dd1\u589e\u5e7f\uff0c\u5982\u679c\u589e\u5e7f\u6210\u529f\u76f4\u63a5\u8fd4\u56de\u3002\u5982\u679c\u65e0\u6cd5\u6210\u529f\uff0c\u5219\u9700\u8981\u8ba1\u7b97\u51fa\u677e\u5f1b\u7684\u5927\u5c0f\uff0c\u5e76\u5c06 $z_u,z_B$ \u5206\u522b\u8fdb\u884c\u66f4\u65b0\u3002\u66f4\u65b0\u540e\uff0c\u5982\u679c\u67d0\u70b9 $(i,slv_i)$ \u8def\u5f84\u88ab\u52a0\u5165\u7b49\u8fb9\u5b50\u56fe\u4e2d\uff0c\u5219\u8fdb\u884c\u5c1d\u8bd5\u589e\u5e7f\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5219\u8fdb\u884c\u65b0\u7684\u4e00\u8f6e\u589e\u5e7f\u3002\n\n\u6709\u51e0\u4e2a\u7ec6\u8282\u9700\u8981\u6ce8\u610f\uff1a\n\n1. \u767d\u82b1 $z_B$ \u4f1a\u51cf\u6389\u4e00\u4e2a\u6b63\u6570\uff0c\u4f46\u8981\u6c42\u4fdd\u8bc1 $z_B\\ge 0$\u3002\n2. \u5982\u4f55\u8ba1\u7b97\u677e\u5f1b\u7684\u5927\u5c0f\n\n\u7531\u4e8e\u6709 $z_B\\ge 0$ \u8fd9\u6837\u7684\u7279\u6b8a\u7ea6\u675f\uff0c\u5f53\u4e00\u6735\u767d\u82b1 $z_B=0$ \u65f6\uff0c\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u5f00\u82b1\u64cd\u4f5c `expand_blossom`\uff0c\u5373\u5c06\u82b1\u5c55\u5f00\uff0c\u5c06\u82b1\u4e2d\u5728\u4ea4\u9519\u6811\u4e0a\u7684\u90e8\u5206\u94fe\u52a0\u5165\u4ea4\u9519\u6811\u4e2d\uff0c\u5e76\u5c06\u5176\u4ed6\u8282\u70b9\u8bbe\u7f6e\u4e3a\u201c\u6ca1\u6709\u542c\u8bf4\u8fc7\u201d\uff0c\u5373 $col_i=0$\u3002\n\n\u4e0a\u9762\u4e5f\u63d0\u5230\u8fc7\uff0c\u6bcf\u6b21\u677e\u5f1b\u9700\u8981\u8003\u8651\u7684\u53ea\u6709\u4e0b\u5217\u60c5\u51b5\uff1a\n\n1. \u67d0\u4e2a\u9ed1\u70b9 $u$ \u548c\u67d0\u4e2a\u672a\u5339\u914d\u70b9 $v$ \u4e4b\u95f4\u7684\u8fb9\n2. \u67d0\u4e24\u4e2a\u4e0d\u5728\u540c\u4e00\u4e2a\u82b1\u5185\u7684\u9ed1\u70b9 $u,v$ \u4e4b\u95f4\u7684\u8fde\u8fb9\n\n\u52a0\u4e0a $z_B\\ge 0,z_u\\ge 0$ \u4e24\u4e2a\u6761\u4ef6\uff0c\u603b\u5171\u9700\u8981\u627e\u7684\u662f\u56db\u79cd\u60c5\u51b5\uff0c**\u5176\u4e2d\u8981\u7528\u5230 $\\frac{z_B}2$\u3001$\\frac{z_e}{2}$ \u7684\u5f62\u5f0f\uff0c\u56e0\u6b64\u8fb9\u6743\u6574\u4f53\u4e58\u4e8c**\uff1b\u4f46 $z_B$ \u8981\u5c0f\u4e8e\u96f6\u4e86\u53ef\u4ee5\u62c6\u82b1\uff0c$z_u$ \u8981\u5c0f\u4e8e\u96f6\u53ef\u5c31\u771f\u7684\u627e\u4e0d\u5230\u5339\u914d\u8def\u5f84\u4e86\uff0c\u56e0\u6b64\u5982\u679c\u67d0\u6b21\u7ed3\u675f\u540e $z_u=0$\uff0c\u76f4\u63a5\u8fd4\u56de\u589e\u5e7f\u5931\u8d25\u3002\n\n```cpp\nint augment(){\n    int i;\n    memset(col,0,sizeof(int)*(n_x+1));\n    memset(slv,0,sizeof(int)*(n_x+1));\n    memset(fa,0,sizeof(int)*(n_x+1));\n    Q=queue<int>();\n    for(i=1;i<=n_x;i++)\n        if(root[i]==i&&!mat[i]){\n            // add all unmatched points\n            col[i]=1;\n            q_push(i);\n        }\n    if(Q.empty())return 0;\n    while(1){\n        while(!Q.empty()){\n            int p=Q.front();Q.pop();\n            assert(col[root[p]]==1);\n            for(i=1;i<=n;i++){\n                if(g[p][i].w==0||root[i]==root[p])continue;\n                // not in same flower\n                T d=calc_slv(g[p][i]);\n                if(!d){if(augment_path(g[p][i]))return 1;}\n                else if(col[root[i]]!=2)update_slv(p,root[i]);\n            }\n        }\n        T delta=INF;\n        // calc delta\n        for(i=1;i<=n;i++)if(col[root[i]]==1)delta=min(delta,label[i]);\n        for(i=n+1;i<=n_x;i++)if(root[i]==i&&col[i]==2)delta=min(delta,label[i]/2);\n        for(i=1;i<=n_x;i++){\n            if(root[i]!=i||!slv[i])continue;\n            if(!col[i])delta=min(delta,calc_slv(g[slv[i]][i]));\n            else if(col[i]==1)delta=min(delta,calc_slv(g[slv[i]][i])/2);\n        }\n        // update label\n        for(i=1;i<=n;i++){\n            if(col[root[i]]==1)label[i]-=delta;\n            else if(col[root[i]]==2)label[i]+=delta;\n        }\n        for(i=n+1;i<=n_x;i++){\n            if(root[i]!=i)continue;\n            if(col[i]==1)label[i]+=2*delta;\n            else if(col[i]==2)label[i]-=2*delta;\n        }\n        for(i=1;i<=n;i++)if(label[i]<=0)return 0;\n        for(i=1;i<=n_x;i++){\n            if(root[i]!=i||!slv[i]||root[slv[i]]==i)continue;\n            if(calc_slv(g[slv[i]][i])==0&&augment_path(g[slv[i]][i]))return 1;\n        }\n        // expand\n        for(i=n+1;i<=n_x;i++)\n            if(root[i]==i&&col[i]==2&&label[i]==0)\n                expand_blossom(i);\n    }\n    return 0;\n}\n```\n\n~~\u4e24~~\u5f00\u82b1\u7684\u5177\u4f53\u5b9e\u73b0\uff1a\n\n```cpp\n// only expand outermost blossom b, b is T(white) blossom\nvoid expand_blossom(int b){\n    int i,x;\n    for(auto p:flower[b])set_root(p,p);\n    x=flower_from[b][g[b][fa[b]].u];\n    // [0,pr]: (+-)^k, insert into tree, add black to queue\n    int pr=get_even_path_in_flower(b,x);\n    col[x]=2;fa[x]=fa[b];\n    for(i=0;i<pr;i+=2){\n        // from bottom to upper layer in tree\n        int white=flower[b][i];\n        int black=flower[b][i+1];\n        col[black]=1;col[white]=2;\n        fa[white]=g[black][white].u;\n        slv[black]=slv[white]=0;\n        q_push(black);\n    }\n    // others: color=0\n    for(i=pr+1;i<flower[b].size();i++){\n        col[flower[b][i]]=0;\n        recalc_slv(flower[b][i]);\n    }\n    // delete b\n    root[b]=0;\n    flower[b].clear();\n}\n```\n\n### \u53c2\u8003\u4ee3\u7801\n\n\u52a0\u4e0a\u4e3b\u51fd\u6570\uff0c\u4e0b\u9762\u653e\u4e00\u4e0b\u5b8c\u6574\u7684\u6a21\u677f\u5b9e\u73b0\uff08\u9898\u76ee\u662f UOJ #81\uff09\uff1a\n\n```cpp\n#define M 403\nusing T=ll;\nconst T INF=0x3f3f3f3f3f3f3f3f;\nnamespace blossom_tree{\n#define N M*2+1\n\tstruct edge{\n\t\tint u,v;T w;\n\t\tedge(){}\n\t\tedge(int u,int v,T w):u(u),v(v),w(w){}\n\t};\n\t// Graph\n\tint n,n_x; // [1, n]: point; [n+1, n_x]: flower\n\tedge g[N][N]; // adjacent matrix\n\t// flower\n\tvector<int>flower[N]; // nodes in flower i (outer flower)\n\tint root[N]; // flower root, root<=n root=i: normal nodes\n\tint flower_from[N][N]; // flower_from[b][x]: outermost flower in b that contains x\n\t// slack\n\tT label[N]; // node label, [1, n] point label, [n+1, n_x] flower label\n\tint col[N]; // color saved at flower root\n\tint slv[N]; // slack node of NON LEAF NODES, slv[y]=x z(x,y) min_x\n\t// match\n\tint mat[N]; // match, mat[x]=y (x,y)\\in E\n\tint fa[N]; // fa in cross tree\n\tint vis[N]; // if in path\n\t\n\tqueue<int>Q; // bfs queue\n\t\n\t// calculate slv\n\tinline T calc_slv(edge e){return label[e.u]+label[e.v]-e.w;}\n\tinline void update_slv(int u,int v){if(!slv[v]||calc_slv(g[u][v])<calc_slv(g[slv[v]][v]))slv[v]=u;}\n\tinline void recalc_slv(int u){\n\t\tslv[u]=0;\n\t\tfor(int i=1;i<=n;i++)if(g[i][u].w>0&&root[i]!=u&&col[root[i]]==1)update_slv(i,u);\n\t}\n\t\n\t// only push nodes, not flowers\n\tvoid q_push(int x){\n\t\tif(x<=n)Q.push(x);\n\t\telse for(auto p:flower[x])q_push(p);\n\t}\n\t\n\t// set root of all nodes in x to r\n\tvoid set_root(int x,int r){\n\t\troot[x]=r;\n\t\tif(x>n)for(auto p:flower[x])set_root(p,r);\n\t}\n\t\n\t// return a (+-)^k path in flower b from root[b] to x\n\tint get_even_path_in_flower(int b,int x){\n\t\tint pr=find(flower[b].begin(),flower[b].end(),x)-flower[b].begin();\n\t\tassert(b>n&&b<=n_x&&pr<flower[b].size()); // b is flower, x in b\n\t\tif(pr%2==0)return pr;\n\t\treverse(flower[b].begin()+1,flower[b].end());\n\t\treturn flower[b].size()-pr;\n\t}\n\t\n\t// set (u,v) match, can be flower\n\tvoid set_match(int u,int v){\n\t\tmat[u]=g[u][v].v;\n\t\tif(u>n){\n\t\t\tedge e=g[u][v];\n\t\t\tint xr=flower_from[u][e.u];\n\t\t\tint pr=get_even_path_in_flower(u,xr);\n\t\t\tfor(int i=0;i<pr;i++)set_match(flower[u][i],flower[u][i^1]);\n\t\t\tset_match(xr,v);\n\t\t\trotate(flower[u].begin(),flower[u].begin()+pr,flower[u].end()); // change receptacle\n\t\t}\n\t}\n\t\n\t// link 2 S points\n\tvoid side_augment(int u,int v){\n\t\tint nv=root[mat[u]],nu=root[fa[nv]];\n\t\twhile(1){\n\t\t\tset_match(u,v);\n\t\t\tu=nu,v=nv;\n\t\t\tif(!nv)break;\n\t\t\tset_match(nv,nu);\n\t\t\tnv=root[mat[u]],nu=root[fa[nv]];\n\t\t}\n\t}\n\tvoid linkSS(int u,int v){\n\t\tside_augment(u,v); \n\t\tside_augment(v,u);\n\t}\n\t\n\tint get_lca(int u,int v){\n\t\tstatic int t=0;\n\t\t++t; // to avoid clearing vis\n\t\twhile(u||v){\n\t\t\tif(vis[u]==t)return u;\n\t\t\tvis[u]=t;\n\t\t\tu=root[mat[u]];\n\t\t\tif(u)u=root[fa[u]];\n\t\t\tif(!u)swap(u,v);\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\tvoid add_blossom(int u,int v,int r){\n\t\tint i,b=n+1;\n\t\twhile(b<=n_x&&root[b])b++;\n\t\tif(b>n_x)++n_x;\n\t\t// clear\n\t\tcol[b]=1;label[b]=0;mat[b]=mat[r];flower[b].clear();\n\t\tfor(i=1;i<=n_x;i++)g[i][b].w=g[b][i].w=0;\n\t\tfor(i=1;i<=n;i++)flower_from[b][i]=0;\n\t\t// construct flower\n\t\twhile(u!=r){\n\t\t\tflower[b].pb(u);u=root[mat[u]];q_push(u);\n\t\t\tflower[b].pb(u);u=root[fa[u]];\n\t\t}\n\t\tflower[b].pb(r);\n\t\treverse(flower[b].begin(),flower[b].end());\n\t\twhile(v!=r){\n\t\t\tflower[b].pb(v);v=root[mat[v]];q_push(v);\n\t\t\tflower[b].pb(v);v=root[fa[v]];\n\t\t}\n\t\t// set as outermost flower\n\t\tset_root(b,b);\n\t\t// calculate slack\n\t\tfor(auto p:flower[b]){\n\t\t\tfor(i=1;i<=n_x;i++){\n\t\t\t\t// set to min slave\n\t\t\t\tif(!g[b][i].w||calc_slv(g[p][i])<calc_slv(g[b][i])){\n\t\t\t\t\tg[b][i]=g[p][i];\n\t\t\t\t\tg[i][b]=g[i][p];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(i=1;i<=n;i++)if(flower_from[p][i])flower_from[b][i]=p;\n\t\t}\n\t\t//recalc_slv(b);\n\t}\n\t\n\t// only expand outermost blossom b, b is T(white) blossom\n\tvoid expand_blossom(int b){\n\t\tint i,x;\n\t\tfor(auto p:flower[b])set_root(p,p);\n\t\tx=flower_from[b][g[b][fa[b]].u];\n\t\t// [0,pr]: (+-)^k, insert into tree, add black to queue\n\t\tint pr=get_even_path_in_flower(b,x);\n\t\tcol[x]=2;fa[x]=fa[b];\n\t\tfor(i=0;i<pr;i+=2){\n\t\t\t// from bottom to upper layer in tree\n\t\t\tint white=flower[b][i];\n\t\t\tint black=flower[b][i+1];\n\t\t\tcol[black]=1;col[white]=2;\n\t\t\tfa[white]=g[black][white].u;\n\t\t\tslv[black]=slv[white]=0;\n\t\t\tq_push(black);\n\t\t}\n\t\t// others: color=0\n\t\tfor(i=pr+1;i<flower[b].size();i++){\n\t\t\tcol[flower[b][i]]=0;\n\t\t\trecalc_slv(flower[b][i]);\n\t\t}\n\t\t// delete b\n\t\troot[b]=0;\n\t\tflower[b].clear();\n\t}\n\t\n\t// found_edge\n\tint augment_path(edge e){\n\t\tint u=root[e.u],v=root[e.v];\n\t\tif(!col[v]){\n\t\t\tassert(mat[v]);\n\t\t\tfa[v]=e.u;\n\t\t\tcol[v]=2;\n\t\t\tint nu=root[mat[v]];\n\t\t\tslv[nu]=slv[v]=0;\n\t\t\tcol[nu]=1;\n\t\t\tq_push(nu);\n\t\t}else if(col[v]==1){\n\t\t\tint r=get_lca(u,v);\n\t\t\tif(r)add_blossom(u,v,r);\n\t\t\telse return linkSS(u,v),1;\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\tint augment(){\n\t\tint i;\n\t\tmemset(col,0,sizeof(int)*(n_x+1));\n\t\tmemset(slv,0,sizeof(int)*(n_x+1));\n\t\tmemset(fa,0,sizeof(int)*(n_x+1));\n\t\tQ=queue<int>();\n\t\tfor(i=1;i<=n_x;i++)\n\t\t\tif(root[i]==i&&!mat[i]){\n\t\t\t\t// add all unmatched points\n\t\t\t\tcol[i]=1;\n\t\t\t\tq_push(i);\n\t\t\t}\n\t\tif(Q.empty())return 0;\n\t\twhile(1){\n\t\t\twhile(!Q.empty()){\n\t\t\t\tint p=Q.front();Q.pop();\n\t\t\t\tassert(col[root[p]]==1);\n\t\t\t\tfor(i=1;i<=n;i++){\n\t\t\t\t\tif(g[p][i].w==0||root[i]==root[p])continue;\n\t\t\t\t\t// not in same flower\n\t\t\t\t\tT d=calc_slv(g[p][i]);\n\t\t\t\t\tif(!d){if(augment_path(g[p][i]))return 1;}\n\t\t\t\t\telse if(col[root[i]]!=2)update_slv(p,root[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tT delta=INF;\n\t\t\t// calc delta\n\t\t\tfor(i=1;i<=n;i++)if(col[root[i]]==1)delta=min(delta,label[i]);\n\t\t\tfor(i=n+1;i<=n_x;i++)if(root[i]==i&&col[i]==2)delta=min(delta,label[i]/2);\n\t\t\tfor(i=1;i<=n_x;i++){\n\t\t\t\tif(root[i]!=i||!slv[i])continue;\n\t\t\t\tif(!col[i])delta=min(delta,calc_slv(g[slv[i]][i]));\n\t\t\t\telse if(col[i]==1)delta=min(delta,calc_slv(g[slv[i]][i])/2);\n\t\t\t}\n\t\t\t// update label\n\t\t\tfor(i=1;i<=n;i++){\n\t\t\t\tif(col[root[i]]==1)label[i]-=delta;\n\t\t\t\telse if(col[root[i]]==2)label[i]+=delta;\n\t\t\t}\n\t\t\tfor(i=n+1;i<=n_x;i++){\n\t\t\t\tif(root[i]!=i)continue;\n\t\t\t\tif(col[i]==1)label[i]+=2*delta;\n\t\t\t\telse if(col[i]==2)label[i]-=2*delta;\n\t\t\t}\n\t\t\tfor(i=1;i<=n;i++)if(label[i]<=0)return 0;\n\t\t\tfor(i=1;i<=n_x;i++){\n\t\t\t\tif(root[i]!=i||!slv[i]||root[slv[i]]==i)continue;\n\t\t\t\tif(calc_slv(g[slv[i]][i])==0&&augment_path(g[slv[i]][i]))return 1;\n\t\t\t}\n\t\t\t// expand\n\t\t\tfor(i=n+1;i<=n_x;i++)\n\t\t\t\tif(root[i]==i&&col[i]==2&&label[i]==0)\n\t\t\t\t\texpand_blossom(i);\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\tvoid init(int _n,vector<pair<T,pii>>edges){\n\t\tint i,j;\n\t\tn=n_x=_n;\n\t\tmemset(mat,0,sizeof(mat));\n\t\tfor(i=0;i<=n;i++){\n\t\t\troot[i]=i;\n\t\t\tflower[i].clear();\n\t\t\tfor(j=0;j<=n;j++){\n\t\t\t\tflower_from[i][j]=(i==j)?i:0;\n\t\t\t\tg[i][j]=edge(i,j,0);\n\t\t\t}\n\t\t}\n\t\tT w_max=0;\n\t\tfor(auto pr:edges){\n\t\t\tint u=pr.se.fi,v=pr.se.se;\n\t\t\tT w=pr.fi;\n\t\t\tg[u][v]=edge(u,v,w*2);\n\t\t\tg[v][u]=edge(v,u,w*2);\n\t\t\tw_max=max(w_max,w);\n\t\t}\n\t\tfor(i=1;i<=n;i++)label[i]=w_max;\n\t}\n\t\n\tpair<int,T>calc(){\n\t\tint i,cnt=0;T s=0;\n\t\twhile(augment())++cnt;\n\t\tfor(i=1;i<=n;i++)if(mat[i]>i)s+=g[i][mat[i]].w/2;\n\t\treturn mp(cnt,s);\n\t}\n}\nint main(){\n\tint i,n,m;\n\tvector<pair<T,pii>>edges;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(i=0;i<m;i++){\n\t\tint u,v;T w;\n\t\tscanf(\"%d%d%lld\",&u,&v,&w);\n\t\tedges.pb(mp(w,mp(u,v)));\n\t}\n\tblossom_tree::init(n,edges);\n\tprintf(\"%lld\\n\",blossom_tree::calc().se);\n\tfor(i=1;i<=n;i++)printf(\"%d \",blossom_tree::mat[i]);\n\treturn 0;\n}\n```\n\n\uff08\u5168\u6284\u4f1a WA \u7684\u54e6\uff01\uff09\n\n## \u53c2\u8003\u8d44\u6599\u4e0e\u5de5\u5177\n\n1. OI-wiki\uff0c[\u4e00\u822c\u56fe\u6700\u5927\u5339\u914d](https://oi-wiki.org/graph/graph-matching/general-match/)\n2. Fuyuki\uff0c[\u9898\u89e3 P6113 \u3010\u6a21\u677f\u3011\u4e00\u822c\u56fe\u6700\u5927\u5339\u914d](https://www.luogu.com.cn/blog/Fuyuki/solution-p6113)\n3. \u80e1\u62c9\u54e5\uff0c[\u7b97\u6cd5\u8bbe\u8ba1\u6280\u5de7\uff1aPrimal-Dual](https://blog.csdn.net/qx3501332/article/details/105546208/)\n4. wenruo\uff0c[KM\u7b97\u6cd5\u8be6\u89e3+\u6a21\u677f](https://www.cnblogs.com/wenruo/p/5264235.html)\n5. Shawn-Yang\uff0c[KM\u7b97\u6cd5--\u5b66\u4e60\u7b14\u8bb0](https://blog.csdn.net/yangss123/article/details/88716680)\n6. \u9648\u80e4\u4f2f\uff0c2015 \u5e74\u56fd\u5bb6\u96c6\u8bad\u961f\u8bba\u6587\u300a\u6d45\u8c08\u56fe\u7684\u5339\u914d\u7b97\u6cd5\u53ca\u5176\u5e94\u7528\u300b\n7. jacky860226\uff0c[general-graph-weighted-match-slides](https://github.com/jacky860226/general-graph-weighted-match-slides)\n8. vfleaking\uff0c[\u5988\u5988\u6211\u7ec8\u4e8e\u4f1a\u4e00\u822c\u56fe\u6700\u5927\u6743\u5339\u914d\u4e86\uff01](https://vfleaking.blog.uoj.ac/blog/339)\n9. Joris_VR\uff0c[Maximum Weighted Matching](http://jorisvr.nl/article/maximum-matching)\n10. zhongzihao\uff0c[\u4e00\u822c\u56fe\u6700\u5927\u6743\uff08\u6700\u5927\uff09\u5339\u914d](https://wiki.buaaacm.com/doku.php?id=technique:general_matching_weighted)\n11. Kurt Mehlhorn et al.\uff0c[Implementation of O(nmlogn) weighted matchings in general graphs: the power of data structures](https://dl.acm.org/doi/pdf/10.1145/944618.944622)\n12. [Visualizations of Graph Algorithms](https://algorithms.discrete.ma.tum.de/)\n13. [Graph Editor](https://csacademy.com/app/graph_editor/)\n14. [NetworkX](https://networkx.org/)\n\n## \u63d0\u4ea4\u901a\u9053\n\n1. [\u6d1b\u8c37](https://www.luogu.com.cn/problem/P6699)\n2. [UOJ](https://uoj.ac/problem/81)\n3. [Library checker](https://judge.yosupo.jp/problem/general_weighted_matching)\n\n## \u7ed3\u8bed\n\n\u6b22\u8fce\u7ea0\u9519\u4e0e\u8ba8\u8bba\u3002\u611f\u8c22\u9605\u8bfb\uff01",
        "postTime": 1631281685,
        "uid": 108971,
        "name": "Potassium",
        "ccfLevel": 0,
        "title": "\u4ece\u5308\u7259\u5229\u7b97\u6cd5\u5230\u5e26\u6743\u5e26\u82b1\u6811\u2014\u2014\u8be6\u89e3\u5bf9\u5076\u95ee\u9898\u5728\u56fe\u5339\u914d\u4e0a\u7684\u5e94\u7528"
    }
]