[
    {
        "content": "# \u5199\u5728\u524d\u9762\uff1a\n\u5f88\u597d\u7684\u601d\u8def\u9898\uff0c\u5f53\u60a8\u957f\u65f6\u95f4\u601d\u8003\u800c\u65e0\u89e3\u65f6\u518d\u6765\u770b\u672c\u7bc7\u9898\u89e3\uff0c\u8bf7\u52a1\u5fc5\u72ec\u7acb\u8ba4\u771f\u601d\u8003\u3002\u5f53\u7136\u60a8\u4e5f\u53ef\u4ee5\u628a\u672c\u7bc7\u9898\u89e3\u6765\u4e0e\u60a8\u7684\u601d\u8def\u8fdb\u884c\u5bf9\u6bd4\u8fdb\u884c\u81ea\u6211\u80fd\u529b\u7684\u63d0\u5347\u3002\n\n### \u72ec\u4e0a\u9ad8\u697c\uff0c\u671b\u5c3d\u5929\u6daf\u8def\u3002\n\n\n------------\n\n# \u6b65\u5165\u6b63\u9898\uff1a\n\n## \u901a\u8fc7\u601d\u8003\uff0c\u53ef\u4ee5\u770b\u51fa\uff1a\n\n \u9898\u76ee\u4e2d\u7684\u70b9\u53ef\u4ee5\u5206\u4e3a\u4e09\u79cd\uff1a\n \n \u2460 \u81ea\u5df1\u6307\u5411\u7684\u8282\u70b9\u90fd\u53ef\u4ee5\u5230\u8fbe\u7ec8\u70b9\u3002\n \n \u2461 \u81ea\u5df1\u53ef\u4ee5\u5230\u8fbe\u7ec8\u70b9\u7684\u70b9\u3002\n \n \u2462 \u666e\u901a\u7684\u70b9\u3002\n### \u90a3\u4e48\u9898\u76ee\u9700\u8981\u7684\u5c31\u662f\uff1a\n\u7531\u2460\u7ec4\u6210\u7684\u8fde\u63a5\u4e86\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\n# \u601d\u8def\uff1a\n\u663e\u7136\u2462\u5305\u542b\u2461\uff0c\u2461\u5305\u542b\u2460\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5148\u901a\u8fc7\u2462\u6c42\u51fa\u6240\u6709\u7684\u2461\uff0c\u518d\u901a\u8fc7\u2461\u6c42\u51fa\u2460\u3002\n\n\u6700\u540e\u518d\u6765\u4e00\u904dBFS\u5c31\u80fd\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u4e86\u3002\n\n#### update 2019.11.06 :\n\u611f\u8c22 @WestTree \u7684 HACK \u6570\u636e\n~~~\n4 6\n4 2\n4 4\n1 1\n1 4\n1 1\n1 3\n1 3 \n~~~\n\n\u8fd9\u7ec4\u6570\u636e\u4e2d\u8d77\u70b9\u672c\u8eab\u4e0d\u7b26\u5408\u6761\u4ef6 \u2460 \uff0c\u6240\u4ee5\u539f\u5148\u7684\u4ee3\u7801\u672a\u5224\u5b9a\u8d77\u70b9\u5c31\u76f4\u63a5\u5165\u961f\u662f\u9519\u8bef\u7684\u3002\u73b0\u5df2\u66f4\u6b63\u3002\n## \u6b65\u9aa4\uff1a\n#### 1.\u8bfb\u5165\u6570\u636e\uff0c\u5e76\u5efa\u7acb\u6b63\u5411\u548c\u53cd\u5411\u8fb9\u3002\n#### 2.\u4ece\u7ec8\u70b9\u53cd\u5411BFS\uff0c\u6c42\u51fa\u6240\u6709\u7684\u2461\u3002\n#### 3.\u5bf9\u6bcf\u4e2a\u70b9\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u2460\u3002\n#### 4.\u4ece\u8d77\u70b9\u6b63\u5411BFS\uff0c\u53ea\u7ecf\u8fc7\u2460\u70b9\uff0c\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u3002\n## \u6570\u7ec4\u89e3\u91ca\uff1a\n#### 1.inroad \u8868\u793a\u662f\u5426\u4e3a \u2460\n#### 2.can  \u8868\u793a\u662f\u5426\u4e3a \u2461\n#### 3.dis \u8868\u793a\u8ddd\u79bb\u8d77\u70b9\u7684\u8ddd\u79bb\uff0c\u8ba1\u7b97\u957f\u5ea6\u7528\uff0c\n#### 4.side \u6b63\u5411\u8fb9\n#### 5.edis \u53cd\u5411\u8fb9\n# \u603b\u7ed3\uff1a\n\u5bf9\u4e8e\u8fd9\u79cd\u7c7b\u578b\u56fe\u8bba\u9898\uff0c\u5982\u679c\u7b54\u6848\u4ec5\u4e0e\u7ec8\u70b9\u6709\u5173\u7684\u8bdd\uff0c\u90a3\u4e48\u5efa\u53cd\u5411\u8fb9\u8dd1\u53cd\u5411\u56fe\u7684\u601d\u8def\u662f\u5341\u5206\u9ad8\u6548\u5e76\u4e14\u597d\u7406\u89e3\u7684\uff0c\u4ee3\u7801\u5b9e\u73b0\u4e5f\u5f88\u5bb9\u6613\u3002\n\n\u4ec5\u6709\u4e00\u4e2a\u7ec8\u70b9\uff0c\u800c\u4e0d\u77e5\u8d77\u70b9\u3002\u90a3\u4e48\u663e\u7136\u4efb\u610f\u8def\u5f84\u90fd\u4f1a\u5c06\u7ec8\u70b9\u4f5c\u4e3a\u8def\u5f84\u4e0a\u7684\u4e00\u4e2a\u5fc5\u7136\u70b9\u3002\u5229\u7528\u6240\u6709\u8def\u5f84\u7684\u8fd9\u4e2a\u901a\u6027\uff0c\u6539\u53d8\u601d\u8def\uff0c\u8f6c\u800c\u8d70\u53cd\u5411\u56fe\uff0c\u5c31\u80fd\u6539\u4e3a\u4ece **\u5df2\u77e5\u7684\u8d77\u70b9** , \u8d70\u5230 **\u672a\u77e5\u7684\u7ec8\u70b9** \u4e86\u3002\n\n _**\u672a\u77e5\u7684\u8d77\u70b9\uff0c\u786e\u5b9a\u7684\u7ec8\u70b9**_\u3002\u5982\u679c\u679a\u4e3e\u8d77\u70b9\u8dd1\u5230\u7ec8\u70b9\u7684\u8bdd\u81ea\u7136\u4e0d\u4f18\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6761\u4ef6\u8f6c\u6362\uff0c\u4ece\u5df2\u7ecf\u786e\u5b9a\u597d\u7684\u7ec8\u70b9\u53cd\u5411\u67e5\u627e\u8d77\u70b9\uff0c\u590d\u6742\u5ea6\u5c31\u4f1a\u4e0b\u964d\u5f88\u591a\u3002\u8fd9\u5c31\u662f\u6211\u5bf9\u8fd9\u7c7b\u9898\u7684\u7ecf\u9a8c\u3002\n# \u4ee3\u7801\uff1a\n80\u884c\uff0c\u6709\u70b9\u957f\u3002\u5982\u679c\u4f60\u5927\u62ec\u53f7\u6362\u884c\u5e76\u4e14\u518d\u538b\u538b\u884c\uff0c60\u884c\u80fd\u641e\u5b9a\u3002\n\n~~~cpp\n#include<iostream>\n#include<vector>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nbool inroad[10010],can[10010];       //inroad \u8868\u793a\u6b64\u70b9\u662f\u5426\u53ef\u4ee5\u51fa\u73b0\u5728\u8def\u5f84\u4e0a  can \u8868\u793a\u6b64\u70b9\u662f\u5426\u53ef\u4ee5\u5230\u8fbe\u7ec8\u70b9 \nint dis[10010];                      //dis \u8868\u793a\u6b64\u70b9\u8ddd\u79bb\u8d77\u70b9\u7684\u8ddd\u79bb \nvector<int>side[10010];              //\u6b63\u5411\u5efa\u8fb9 \nvector<int>edis[10010];              //\u53cd\u5411\u5efa\u8fb9 \nint main()\n{\n    int n,m,a,b,s,t;\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)            //\u8bfb\u5165\u5e76\u6b63\u53cd\u5411\u5efa\u8fb9 \n    {\n        cin>>a>>b;\n        side[a].push_back(b);\n        edis[b].push_back(a);\n    }\n    cin>>s>>t;\n    can[t]=1;                        //\u7ec8\u70b9\u5148\u8bbe\u7f6e\u4e3a 1 \n    queue<int>que; \n    que.push(t);\n    while(!que.empty())              //\u4ece\u7ec8\u70b9\u53cd\u5411\u67e5\u627e\u2461 \n    {\n        int now=que.front();\n        que.pop();\n        for(int i=edis[now].size()-1;i>=0;i--)\n        {\n            int to=edis[now][i];\n            if(!can[to])\n            {\n                que.push(to);   \n                can[to]=1;\n            }\n        }\n    }\n    if(!can[s])         //\u8d77\u70b9\u65e0\u6cd5\u5230\u8fbe\u7ec8\u70b9\u5c31\u76f4\u63a5\u7ed3\u675f\u7a0b\u5e8f \n    {\n        cout<<\"-1\";\n        return 0;\n    }\n    for(int i=1;i<=n;i++)       //\u5224\u65ad\u54ea\u4e9b\u70b9\u662f\u2460\n    {\n        if(can[i])\n        {\n            inroad[i]=1;\n            for(int j=side[i].size()-1;j>=0;j--)    //\u904d\u5386\u6240\u6709\u7684\u8fb9 \n            {\n                int to=side[i][j];\n                if(!can[to])            //\u5982\u679c\u5b83\u51fa\u8fb9\u6240\u5230\u8fbe\u7684\u70b9\u65e0\u6cd5\u5230\u8fbe\u7ec8\u70b9,\u8fd9\u4e2a\u70b9\u5c31\u4e0d\u53ef\u4ee5\u51fa\u73b0\u5728\u8def\u5f84\u4e0a \n                {\n                    inroad[i]=0;\n                    break;\n                }\n            }\n        }\n    }\n    if(!inroad[s])\t\t\t            //\u8fd9\u91cc\u9700\u8981\u7279\u6b8a\u5224\u5b9a\u4e00\u4e0b\u8d77\u70b9\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u611f\u8c22 @WestTree \u7684HACK\t\t\n    {\n    \tcout<<\"-1\";\n    \treturn 0;\n        }\n    dis[s]=1;que.push(s);\n    while(!que.empty())                 //\u4ece\u8d77\u70b9bfs\uff0c\u53ea\u7ecf\u8fc7\u2460\u70b9\uff0c\u627e\u51fa\u6700\u77ed\u8ddd\u79bb \n    {\n        int now=que.front();\n        que.pop();\n        if(now==t)                  //\u5230\u8fbe\u7ec8\u70b9,\u8f93\u51fa\u7ed3\u679c \n        {\n            cout<<dis[t]-1;\n            return 0;\n        }\n        for(int i=side[now].size()-1;i>=0;i--)\n        {\n            int to=side[now][i];\n            if(inroad[to]&&!dis[to])\n            {\n                dis[to]=dis[now]+1;\n                que.push(to);\n            }\n        }\n    }\n    cout<<\"-1\";                     //\u5426\u5219\u8fd8\u662f\u65e0\u6cd5\u5230\u8fbe \n}\n~~~\n## \u72ec\u81ea\u83ab\u51ed\u680f\uff0c\u65e0\u9650\u6c5f\u5c71\u3002\u522b\u65f6\u5bb9\u6613\u89c1\u65f6\u96be\uff01\n### ~~\u5982\u679c\u770b\u4e86\u8fd9\u7bc7\u9898\u89e3\u540e\u6709\u6536\u83b7\uff0c\u5e0c\u671b\u60a8\u4e0d\u8981\u541d\u556c\u70b9\u8d5e\uff01~~\n",
        "postTime": 1559213748,
        "uid": 89785,
        "name": "\u7a7a\u306e\u8ecc\u8de1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u9884\u5904\u7406\uff0c\u628a\u6bcf\u6761\u8fb9\u53cd\u5411\u3002\n\n\u4ece\u7ec8\u70b9\u5f00\u59cbbfs\uff0c\u6807\u8bb0\u4ece\u7ec8\u70b9\u5f00\u59cb\u53ef\u4ee5\u8d70\u5230\u7684\u70b9\u3002\n\n\u7b2c\u4e8c\u6b65\uff0c\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u6709\u88ab\u6807\u8bb0\uff0c\u5219\u679a\u4e3e\u5b83\u7684\u6bcf\u4e00\u6761\u51fa\u8fb9\uff08\u53cd\u5411\u540e\u7684\uff09\uff0c\u5982\u679c\u5b83\u6307\u5411\u7684\u70b9\u88ab\u6807\u8bb0\uff0c\u5219\u8bf4\u660e\u8fd9\u4e2a\u88ab\u6807\u8bb0\u7684\u70b9\u4e0d\u5408\u6cd5\uff0c\u5220\u9664\u3002\n\n\u7b2c\u4e09\u6b65\uff0c\u5728\u5408\u6cd5\u70b9\u4e0abfs\uff0c\u5355\u6e90\u6700\u77ed\u8def\u3002\u627e\u5230\u7b54\u6848\u3002\u8be6\u89c1\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read()\n{\n    int x=0,y=1;char c=getchar();\n    while(c>'9'||c<'0'){if(c=='0')y=-1;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n    return x*y;\n}\nint n,m;\nvector<int>v[10005];\nbool cando[10005],er[10005];\nqueue<int>q;\nint st,ed;\nint ans[10005];\nint main()\n{    \n    n=read(),m=read();\n    for(int i=1;i<=m;i++)\n    {\n        int a=read(),b=read();\n        if(a==b)continue;//\u53bb\u9664\u81ea\u73af\n        v[b].push_back(a);\n    }\n    st=read(),ed=read();\n    cando[ed]=1;//\u7b2c\u4e00\u904dbfs\n    q.push(ed);\n    while(!q.empty())\n    {\n        int no=q.front();\n        q.pop();\n        for(int i=0,j=v[no].size();i<j;i++)\n            if(!cando[v[no][i]]){cando[v[no][i]]=1;q.push(v[no][i]);}//\u6807\u8bb0\u4ece\u7ec8\u70b9\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\n    }\n    memcpy(er,cando,sizeof(cando));//\u51c6\u5907\u7b2c\u4e8c\u6b21\u6807\u8bb0\n        //\u6ce8\u610f\u8fd9\u91cc\u6700\u597d\u6709\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u6807\u8bb0\uff0c\u5728\u4e00\u4e2a\u6570\u7ec4\u91cc\u5220\u70b9\u6709\u540e\u6548\u578b\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u5f00\u59cb\u88ab\u6807\u8bb0\uff0c\u5b83\u901a\u8fc7\u4e00\u4e2a\u5e8f\u53f7\u6bd4\u5b83\u5c0f\u7684\u70b9\u5220\u9664\u4e86\uff0c\n       //\u90a3\u4e48\u8bbf\u95ee\u5230\u5b83\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u88ab\u5f53\u6210\u5f00\u59cb\u5c31\u6ca1\u88ab\u6807\u8bb0\u7684\u70b9\uff0c\u4f1a\u901a\u8fc7\u5b83\u628a\u5408\u6cd5\u70b9\u5220\u9664\u3002\n      //\u8fd9\u6837\u505a\u5b8c\u4e4b\u540e\uff0c\u5408\u6cd5\u70b9\u90fd\u88ab\u6807\u8bb0\u4e86\u3002\n    for(int i=1;i<=n;i++)\n        if(!cando[i])\n            for(int j=0,k=v[i].size();j<k;j++)\n                if(er[v[i][j]])\n                    er[v[i][j]]=0;\n        //\u6700\u540e\u4e00\u904dbfs\u627e\u7b54\u6848\u3002\n    q.push(ed);\n    while(!q.empty())\n    {\n        int no=q.front();\n        q.pop();\n        for(int i=0,j=v[no].size();i<j;i++)\n            if(er[v[no][i]])\n            {\n                q.push(v[no][i]);\n                er[v[no][i]]=0;\n                ans[v[no][i]]=ans[no]+1;\n            }\n    }\n       //\u9898\u76ee\u8981\u6c42\u8f93\u51fa\u3002\n    if(ans[st]==0)printf(\"-1\");\n    else printf(\"%d\",ans[st]);\n    return 0;\n}\n\n```",
        "postTime": 1509352864,
        "uid": 39844,
        "name": "_\u7a7a_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "## \u8fd9\u9898\u8d85\u7ea7\u953b\u70bc\u601d\u7ef4\u7684\uff01\u6700\u597d\u662f\u80fd\u81ea\u5df1\u60f3\u4e00\u60f3\u505a\u51fa\u6765\uff01\n### \u5982\u679c\u4f60\u5b9e\u5728\u4e0d\u4f1a\u5206\u6790\uff0c\u6211\u5c31\u6765\u8bf4\u8bf4\u6211\u505a\u8fd9\u9053\u9898\u662f\u600e\u4e48~~\u4ece10\u5206\u5230AC~~\u60f3\u7684\u5427_(:\u0437\u300d\u2220)_\n---\n\u5bf9\u4e8e\u9898\u76ee\u7684\u4e24\u4e2a\u8981\u6c42\u6211\u4eec\u53ef\u4ee5\u505a\u5982\u4e0b\u5206\u6790\uff1a\n\n- ### \u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u3002\n\n\u8fd9\u53e5\u8bdd\u4e4d\u4e00\u770b\u4e0d\u597d\u7406\u89e3\uff0c\u4f46\u662f\u89c2\u5bdf\u6837\u4f8b\u89e3\u91ca\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u9650\u5236\u7684\u5b9e\u8d28\u5c31\u662f\uff1a**\u5220\u9664\u4e0d\u4e0e\u7ec8\u70b9\u8fde\u901a\u7684\u70b9\uff0c\u4ee5\u53ca\u4e0e\u4ed6\u4eec\u8fde\u4e00\u6761\u8fb9\u7684\u70b9**\u3002\n\n1. \u5220\u9664\u8fd9\u4e2a\u64cd\u4f5c\u6211\u4eec\u5e38\u7528**\u6253\u6807\u8bb0**\u7684\u65b9\u6cd5\uff0c\u5728\u679a\u4e3e\u56fe\u7684\u65f6\u5019\u9047\u5230\u6ca1\u6253\u6807\u8bb0\u7684\u70b9\u5c31\u8df3\u8fc7\u5373\u53ef\u3002\n2. \u5220\u9664\u4e0d\u4e0e\u7ec8\u70b9\u8fde\u901a\u7684\u70b9\uff0c\u7528\u901a\u4fd7\u7684\u8bdd\u8bb2\u5c31\u662f\u4f60\u5012\u7740\u4ece\u7ec8\u70b9\u51fa\u53d1\uff0c\u628a\u56fe\u641c\u5b8c\u90fd\u5230\u4e0d\u4e86\u7684\u70b9\u3002**\u5012\u7740\u4ece\u7ec8\u70b9\u51fa\u53d1\u53ef\u4ee5\u76f4\u63a5\u53cd\u5411\u5b58\u8fb9\uff0c\u66b4\u529b\u641c\u7d22\uff0c\u7ed9\u641c\u7d22\u5230\u7684\u70b9\u6253\u4e0a\u6807\u8bb0\u5373\u53ef**\n3. \u5bf9\u4e8e\u6ca1\u641c\u5230\u7684\u70b9\uff0c\u5982\u4f55\u5220\u53bb\u4ed6\u4eec\u8fde\u8fb9\u7684\u70b9\u5462\uff1f\u4f9d\u7136\u7528\u66b4\u529b\u7684\u60f3\u6cd5\uff08O(10000\uff09\u590d\u6742\u5ea6\uff09\uff0c**\u679a\u4e3e\u6240\u6709\u6ca1\u6253\u6807\u8bb0\u7684\u70b9\uff0c\u679a\u4e3e\u4ed6\u4eec\u7684\u8fde\u8fb9\u6d88\u53bb\u4ed6\u4eec\u7684\u6807\u8bb0\u4e0d\u5c31\u597d\u4e86\u5417\uff1f**\n\n\u81f3\u6b64\uff0c\u7b2c\u4e00\u4e2a\u8981\u6c42\u4fbf\u5206\u6790\u5b8c\u6bd5\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u7ec6\u8282\u8981\u6ce8\u610f\uff1a\n\n**\u4e0d\u80fd\u76f4\u63a5\u6d88\u53bb\u7b2c\u4e00\u6b21\u6253\u4e0a\u7684\u6807\u8bb0\uff01\uff01**\u4f60\u5728\u7b2c\u4e8c\u6b21\u5220\u9664\u6807\u8bb0\u65f6\u662f\u53ef\u80fd\u6709\u540e\u6548\u6027\u7684\uff0c\u5373\u5220\u53bb\u4e00\u4e2a\u4e0e\u4e0d\u4e0e\u7ec8\u70b9\u8fde\u63a5\u7684\u70b9\u540e\uff0c\u4e0b\u4e00\u6b21\u641c\u5230\u90a3\u4e2a\u70b9\u4ed6\u8fd8\u4f1a\u505a\u4e00\u904d\u5220\u9664\u64cd\u4f5c\uff0c\u5373\u628a\u76f8\u9694\u4e24\u6761\u8fb9\u7684\u70b9\u7ed9\u53bb\u6389\u4e86\uff0c\u4e0e\u9898\u4e0d\u7b26\uff01\uff01\n### \u4e8e\u662f\u91cd\u65b0\u5907\u4efd\u4e00\u4e0b\u6807\u8bb0\uff0c\u7528\u90a3\u4e2a\u5907\u4efd\u6807\u8bb0\u5224\u65ad\u5373\u53ef\u3002\u611f\u8c22[\u5927\u4f6c\u63d0\u9192](https://www.luogu.org/discuss/show?postid=27491)\n---\n- \u5728\u6ee1\u8db3\u6761\u4ef6 1 \u7684\u60c5\u51b5\u4e0b\u4f7f\u8def\u5f84\u6700\u77ed\u3002\n\n\u8fd9\u4e2a\u5f88\u597d\u7406\u89e3\uff0c\u8df3\u8fc7\u6ca1\u6709\u6807\u8bb0\u7684\u70b9\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\u5373\u53ef\u3002\u56e0\u4e3a\u4f60\u4e00\u5f00\u59cb\u5b58\u8fb9\u662f\u5012\u7740\u5b58\u7684\uff0c\u5176\u5b9e\u4f60\u4e0d\u5fc5\u91cd\u65b0\u5b58\u4e00\u904d\uff0c**\u76f4\u63a5\u4ece\u7ec8\u70b9\u51fa\u53d1\uff0c\u627e\u5230\u8d77\u70b9\u7684\u6700\u77ed\u8def\u5373\u53ef\u3002**\u4e24\u8005\u5e94\u8be5\u662f\u7b49\u4ef7\u7684\u3002_(:\u0437\u300d\u2220)_\n\n---\n\u6700\u540e\u4e0a\u6211\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n```\n#include <iostream>\n#include <queue>\n#include <cstring>\nusing namespace std;\nstruct ed{\n\tint u;\n\tint nex;\n}e[300000];\nint n,m,x,y,d[300000],fir[20000],st,s,t;\nbool v[20000],ok[20000],vis[20000];\nvoid add(int u,int v)\n{\n\te[++st].u=u; e[st].nex=fir[v]; fir[v]=st;\n}\n\nvoid spfa(int b)  //\u6700\u77ed\u8def \n{\n\tmemset(v,0,sizeof(v));\n\tmemset(d,0x3f3f,sizeof(d));\n\tqueue<int> q; q.push(b); v[b]=1; d[b]=0;\n\twhile (!q.empty())\n\t{\n\t\tint k=q.front(); q.pop(); v[b]=0;\n\t\tfor (int i=fir[k];i;i=e[i].nex)\n\t\t{\n\t\t\tint u=e[i].u,w=1;\n\t\t\tif (d[u]>d[k]+w&&ok[e[i].u]) {\n\t\t\t\td[u]=d[k]+w;\n\t\t\t\tif (!v[u]) v[u]=1,q.push(u);\n\t\t\t}\t\n\t\t}\n\t}\n}\n\nvoid bfs(int t)  //\u7b2c\u4e00\u6b21\u7684\u641c\u8fb9 \n{\n\tmemset(v,0,sizeof(v));\n\tqueue<int> q; q.push(t); ok[t]=v[t]=1;\n\twhile (!q.empty())\n\t{\n\t\tint k=q.front(); q.pop();\n\t\tfor (int i=fir[k];i;i=e[i].nex)\n\t\tif (!v[e[i].u]){\n\t\t\tint u=e[i].u; if (!v[u]) v[u]=1,ok[u]=1,q.push(u);\n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor (int i=1;i<=m;i++) cin>>x>>y,add(x,y);\n\tcin>>s>>t; \n\tbfs(t);\n\tfor (int i=1;i<=n;i++) vis[i]=ok[i];\n\tfor (int i=1;i<=n;i++) \n\tif (!vis[i]) for (int j=fir[i];j;j=e[j].nex){\n\tif (ok[e[j].u]) ok[e[j].u]=0; \n\t// \u4e0d\u80fd\u76f4\u63a5\u4fee\u6539\uff0c\u6709\u540e\u6548\u6027\u3002 \n\t}\n\tspfa(t);\n\tif (d[s]>=(0x3f3f)) cout<<\"-1\"<<endl;\n\telse cout<<d[s]<<endl;\n    retrun 0;\n}\n```\n\u5404\u4f4d\u628a\u5173\u952e\u90e8\u5206\u770b\u770b\u5c31\u597d\uff0c\u5982\u4ee3\u7801\u6709\u9519\u8bef\u90a3\u4e00\u5b9a\u662f\u6211\u6545\u610f\u7684_(:\u0437\u300d\u2220)_",
        "postTime": 1533479678,
        "uid": 15984,
        "name": "\u5929\u6cfd\u9f9f",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "# \u8863\u5e26\u6e10\u5bbd\u7ec8\u4e0d\u6094\uff0c\u4e3a\u4f0a\u6d88\u5f97\u4eba\u6194\u60b4\u3002\n***\n\n\u7801\u4e86\u4e00\u4e2a\u65e9\u4e0a(~~\u867d\u7136\u53ea\u662f\u4e00\u9053\u7eff\u9898~~)\uff0c\u7ec8\u4e8e\u4ece10\u5206\u5230AC\uff08\u6cea\u5954TAT\uff09\u3002\n\n\u5176\u5b9e\u8fd8\u662f\u6709\u6536\u83b7\u7684\uff0c\n\n\u4e8e\u662f\u5199\u4e86\u4e00\u7bc7\u5411\u5404\u4f4d\u540c\u6211\u4e00\u6837\u53d7\u56f0\u4e8e\u672c\u9898\u7684Coder\u5206\u4eab\u5fc3\u8def\u5386\u7a0b\u4ee5\u53ca\u89e3\u9898\u65b9\u6cd5\u7684\u9898\u89e3\uff08\u849f\u84bb\u6c34\u5e73\u6709\u9650\uff0c\u6b22\u8fce\u5404\u4f4d\u795e\u7287\u6279\u8bc4\u6307\u6b63\uff09\u3002\n\n\u4ee3\u7801\u6bd4\u8f83\u957f\uff08~~\u624b\u6253\u5934\u6587\u4ef6+\u6253\u6b7b\u4e0d\u538b\u884c+\u5206\u5757\u5199\u4ee3\u7801+\u975e\u5e38\u8be6\u5c3d\u7684\u6ce8\u91ca~~\uff09\uff0c\u6211\u4eec\u4e0d\u59a8\u5148\u68b3\u7406\u4e00\u4e0b\u601d\u8def\uff1a\n\n***\n### Step 1\uff1a \u5ba1\u9898\uff08\u795e\u7287\u8bf7\u81ea\u52a8\u8df3\u8fc7\uff09\n***\n\n\u7531\u9898\u8bbe\u53ef\u77e5\u672c\u9898\u4e0e\u666e\u901a\u7684\u5355\u6e90\u6700\u77ed\u8def\u6a21\u677f\u9898\u7684\u5dee\u522b\u53ea\u662f\u591a\u4e86\u4e00\u4e2a\u8981\u6c42\uff0c\u5373\uff1a\n\n> #### \u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u3002\n\n**\u8fd9\u53e5\u8bdd\u7684\u7406\u89e3\u5341\u5206\u5173\u952e**\uff08~~\u679c\u7136\u5f97\u8bed\u6587\u8005\u5f97\u5929\u4e0bQAQ~~\uff09\uff0c\n\n\u6b63\u662f\u7531\u4e8e\u672c\u849f\u84bb\u5bf9\u8fd9\u53e5\u8bdd\u7406\u89e3\u9519\u8bef\uff0c\u5bfc\u81f4\u4e86\u75af\u72c2\u8c03\u8bd5\u4e00\u4e0a\u5348\u7684\u60e8\u6848\u3002\n\n\n\n**\u6574\u7406\u53e5\u610f\uff0c\u6709\u4ee5\u4e0b\u51e0\u4e2a\u8981\u70b9**\uff1a\n\n> #### <1 \u201c\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u201d\n> \u5373**\u8d77\u70b9**\u548c**\u7ec8\u70b9**\u4ee5\u53ca\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7ecf\u8fc7\u7684\u6240\u6709\u70b9\uff08~~\u5e9f\u8bdd~~\uff09\u3002\n\n> #### <2 \u201c\u6240\u6709\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u201d\n> \u5373\u8be5\u8282\u70b9\u7684**\u6240\u6709**\u5b50\u8282\u70b9\uff08**~~\u8c8c\u4f3c\u662f\u5e9f\u8bdd~~**\uff09\u3002\n\n> #### <3 \u201c\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u201d\n> \u5373**\u80fd\u5230\u8fbe**\u7ec8\u70b9\uff08**~~\u8c8c\u4f3c\u8fd8\u662f\u5e9f\u8bdd~~**\uff09\u3002\n\n~~\u7ffb\u8bd1\u6210\u4eba\u8bdd~~\u6574\u53e5\u8bdd\u7684\u610f\u601d\u662f\uff1a\n\n> #### \u5bf9\u4e8e\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u8def\u5f84\u4e0a\u4efb\u4e00\u70b9\uff0c\u5176\u6240\u6709\u5b50\u8282\u70b9\u90fd\u80fd\u5230\u8fbe\u7ec8\u70b9\u3002\n\n\u90a3\u4e48\u6574\u4e2a\u9898\u76ee\u7684\u8981\u6c42\u5c31\u662f\uff1a\n\n> #### \u6c42\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u4e00\u6761\u6700\u77ed\u8def\uff0c\u4f7f\u5176\u4e0a\u4efb\u4e00\u70b9\u6240\u6709\u5b50\u8282\u70b9\u90fd\u80fd\u5230\u8fbe\u7ec8\u70b9\u3002\n\n\u56e0\u6b64\u9898\u76ee\u7684\u672c\u8d28\u5c31\u662f**\u6c42\u5355\u6e90\u6700\u77ed\u8def**\uff0c\n\n\u786e\u5b9a\u89e3\u9898\u6838\u5fc3\u7b97\u6cd5\u4e3a\u6c42\u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5\u3002\n\n\u672c\u849f\u84bb\u4ee5**\u4f18\u5148\u961f\u5217\u4f18\u5316\u7684Dijkstra\u7b97\u6cd5**\u4e3a\u4f8b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO((m+n)logn)\u3002\n\n~~\u5982\u679c\u4e0d\u4f1aDijkstra\u7b97\u6cd5\u53ca\u5176\u4f18\u5316\u7684\u8bdd\u8bf7\u81ea\u884c\u767e\u5ea6\u7b97\u6cd5\u539f\u7406\u3002~~\n\n\u81f3\u6b64\uff0c\u5ba1\u9898\u5b8c\u6bd5\u3002\n\n\u65e2\u7136\u9898\u76ee\u8bfb\u5b8c\u4e86\uff0c\u6211\u4eec\u7740\u624b\u8003\u8651\u5982\u4f55\u89e3\u8fd9\u9053\u9898\u3002\n\n***\n### Step 2\uff1a \u601d\u8def\n***\n\n\u6211\u4eec\u91c7\u53d6**\u81ea\u9876\u5411\u4e0b\u9010\u6b65\u6c42\u7cbe**\u7684\u7b56\u7565\uff0c\u601d\u8003\u5982\u4f55\u6c42\u8fd9\u6761\u6700\u77ed\u8def\u3002\n\n\u518d\u6b21\u8bfb\u9898\uff1a\n\n> #### \u6c42\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u4e00\u6761\u6700\u77ed\u8def\uff0c\u4f7f\u5176\u4e0a\u4efb\u4e00\u70b9\u6240\u6709\u5b50\u8282\u70b9\u90fd\u80fd\u5230\u8fbe\u7ec8\u70b9\u3002\n\n\u6839\u636e\u9898\u610f\uff0c~~\u663e\u7136~~\u6c42\u89e3\u5206\u4e3a**\u4e24\u90e8\u5206**\uff0c\u5373\uff1a\n\n> #### \u00b7  \u6c42\u6700\u77ed\u8def\n> #### \u00b7 \u4fdd\u8bc1\u8def\u5f84\u4e0a\u4efb\u4e00\u70b9\u6240\u6709\u5b50\u8282\u70b9\u90fd\u80fd\u5230\u8fbe\u7ec8\u70b9\n\n\u8fd9\u4e24\u90e8\u5206~~\u663e\u7136~~\u662f**\u6709\u987a\u5e8f\u7684**\uff0c\u5373\uff1a\n\n> #### \uff081 \u5148\u6c42\u6700\u77ed\u8def\u518d\u9a8c\u8bc1\n> #### \uff082 \u5148\u6807\u8bb0\u518d\u6c42\u6700\u77ed\u8def\n\n\u6211\u4eec\u8003\u8651\u4ee5\u4e0a\u7b56\u7565\uff1a\n\n> #### \uff081 \u5148\u6c42\u6700\u77ed\u8def\u518d\u9a8c\u8bc1\n\n> \u672c\u849f\u84bb\u7684\u7b97\u6cd5\u6d41\u7a0b\uff1a\n\n>> ##### 1. \u4f7f\u7528\u4f18\u5148\u961f\u5217\u4f18\u5316\u7684Dijkstra\u7b97\u6cd5\u7b97\u51fa\u8d77\u70b9s\u5230\u7ec8\u70b9t\u7684\n>> ##### \u6700\u77ed\u8def\uff08\u6bcf\u6b21\u6c42\u89e3\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08(m+n)logn\uff09\uff09\u3002\n\n>> ##### 2. \u9a8c\u8bc1\u7b54\u6848\u662f\u5426\u7b26\u5408\u8981\u6c42\u3002\u9700\u8981**\u8bb0\u5f55\u8def\u5f84**\uff0c \u5e76\u679a\u4e3e\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u70b9\n>> ##### \u9a8c\u8bc1\uff08\u6bcf\u6b21\u6c42\u89e3\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6\u4e3aO\uff08n\uff09\uff09\u3002\n\n>> ##### 3. \u82e5\u7b54\u6848\u4e0d\u7b26\u5408\u8981\u6c42\uff0c\u5219\u5220\u53bb\u8def\u5f84\u4e0a\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u70b9\u4ee5\u53ca\u5176\u76f8\u5173\u7684\u8fb9\uff08~~\u65f6\u95f4\u590d\u6742\u5ea6\u96be\u4ee5\u4f30\u8ba1~~\uff09\uff0c\u5e76\u91cd\u65b0Dijkstra\u6c42\u89e3\uff1b\n>> ##### \u5426\u5219\u8f93\u51fa\u7b54\u6848\u3002\n\n> ~~\u56e0\u4e3a\u592a\u5f31~~\u8be5\u7b56\u7565\u6781\u5176\u96be\u4ee5\u5b9e\u73b0\uff0c~~\u5c31\u7b97\u80fd\u591f\u5b9e\u73b0\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e0d\u5bb9\u4e50\u89c2~~\u56e0\u6b64\u8003\u8651\u7b2c\u4e8c\u79cd\u7b56\u7565\u3002\n\n> #### \uff082 \u5148\u6807\u8bb0\u518d\u6c42\u6700\u77ed\u8def\n\n> \u672c\u849f\u84bb\u7684\u7b97\u6cd5\u6d41\u7a0b\uff1a\n\n>> ##### 1. \u6807\u8bb0\u80fd\u51fa\u73b0\u5728\u8def\u5f84\u4e0a\u7684\u70b9\uff08~~\u65f6\u95f4\u590d\u6742\u5ea6\u76ee\u524d\u96be\u4ee5\u4f30\u8ba1~~\uff09\u3002\n\n>> ##### 2. \u5bf9\u4e8e\u5df2\u7ecf\u6807\u8bb0\u7684\u70b9\uff08\u5373\u5728**\u80fd\u51fa\u73b0\u5728\u8def\u5f84\u4e0a\u7684\u70b9\u96c6**\u4e2d\uff09,\n>> ##### \u4f7f\u7528\u4f18\u5148\u961f\u5217\u4f18\u5316\u7684Dijkstra\u7b97\u6cd5\u6c42\u89e3\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08(m+n)logn\uff09\uff09,\n>> ##### \u5f53\u7136\u5982\u679c\u8d77\u70b9\u4e0d\u5728\u70b9\u96c6\u4e2d\u5219\u65e0\u89e3\uff0c\u8f93\u51fa-1\u3002\n\n>> ##### 3. \u5f97\u51fa\u7b54\u6848\u5e76\u8f93\u51fa\u3002\n\n~~\u7b56\u7565\u4e8c\u8c8c\u4f3c\u7b80\u5355\u4e86\u8bb8\u591a\u3002~~\n\n\u4e24\u79cd\u7b56\u7565\u76f8\u6bd4\u8f83\u53ef\u4ee5\u770b\u51fa\uff0c\u7b56\u7565\u4e8c\uff08**\u5148\u6807\u8bb0\u518d\u6c42\u6700\u77ed\u8def**\uff09\u5b9e\u73b0\u96be\u5ea6\u8f83\u4f4e\uff0c\u800c\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4\u8f83\u53ef\u89c2\u3002\n \n _\u8bf4\u660e\uff1a\u56e0\u4e3a\u5728\u5206\u6790\u8fc7\u7a0b\u4e2d\u91c7\u53d6\u9010\u6b65\u6c42\u7cbe\uff0c\u6240\u6709\u5e76\u6ca1\u6709\u8003\u8651\u7cbe\u786e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6b64\u5904\u6807\u660e\u4f30\u8ba1\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e3a\u4e86\u6bd4\u8f83\u7b56\u7565\u4e00\u4e0e\u7b56\u7565\u4e8c\u7684\u6027\u80fd\u4f18\u52a3\u4ee5\u786e\u5b9a\u89e3\u9898\u65b9\u5411\u3002_\n\n> \u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u4e8e\u7b56\u7565\u7684\u601d\u8003\u5df2\u7ecf\u7ed9\u4e86\u6211\u4eec\u4e00\u4e9b\u63d0\u793a\uff1a\n\n> \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7**\u6539\u53d8\u6c42\u89e3\u987a\u5e8f**\u6765\u7b80\u5316\u95ee\u9898\u3002\n\n\u56e0\u6b64\u6211\u4eec**\u5c1d\u8bd5\u4e30\u5bcc\u7b56\u7565\u4e8c\u5b9e\u73b0\u7684\u7ec6\u8282**\u3002\n\n***\n### Step 3\uff1a \u6c42\u7cbe\uff08~~\u6df1\u5165\u6e7f\u70e4~~\uff09\n***\n\n\u65e2\u7136\u786e\u5b9a\u4e86**\u5148\u6807\u8bb0\u518d\u6c42\u6700\u77ed\u8def**\u7684\u7b56\u7565\uff0c\u6211\u4eec\u5c31\u6765\u4e30\u5bcc\u5b83\u7684\u7ec6\u8282\uff0c\u5373\u4e3a\u6c42\u7cbe\u3002\n\n> \u56de\u987e\u6211\u4eec\u7684\u7b97\u6cd5\u6d41\u7a0b\uff1a\n\n>> ##### 1. \u6807\u8bb0\u80fd\u51fa\u73b0\u5728\u8def\u5f84\u4e0a\u7684\u70b9\u3002\n\n>> ##### 2. \u5bf9\u4e8e\u5df2\u7ecf\u6807\u8bb0\u7684\u70b9\uff08\u5373**\u5728\u80fd\u51fa\u73b0\u5728\u8def\u5f84\u4e0a\u7684\u70b9\u96c6\u4e2d**\uff09,\n>> ##### \u4f7f\u7528\u4f18\u5148\u961f\u5217\u4f18\u5316\u7684Dijkstra\u7b97\u6cd5\u6c42\u89e3\uff08\u5f53\u7136\u5982\u679c\u8d77\u70b9\u4e0d\u5728\u70b9\u96c6\u4e2d\u5219\u65e0\u89e3\uff0c\u8f93\u51fa-1)\u3002\n\n>> ##### 3. \u5f97\u51fa\u7b54\u6848\u5e76\u8f93\u51fa\u3002\n\n\u524d\u8def\u5341\u5206\u660e\u6717\uff0c\u6253\u4e0a\u6807\u8bb0\uff0c\u8dd1\u4e00\u904dDijkstra\u5c31\u80fd\u5feb\u4e50\u5730AC\u5566\uff08~~\u4e5f\u6ca1\u4ec0\u4e48\u96be\u5ea6\u561b~~\uff09\uff01\n\n\u7136\u800c\u95ee\u9898\u6765\u4e86\uff0c\u5982\u4f55\u6807\u8bb0\u70b9\u5462\uff1f\n\n\u8fd9\u65f6\u5c31\u9700\u8981\u6211\u4eec\u56de\u5230Step 1\u5bfb\u627e\u7b54\u6848\u4e86\u3002\n\n\u5bf9\u4e8e\u80fd\u5728\u8def\u5f84\u4e2d\u7684\u70b9\uff0c\u6211\u4eec\u8003\u8651\u8981\u70b92\u30013\uff1a\n\n> #### <2 \u201c\u6240\u6709\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u201d\n> \u5373\u8be5\u8282\u70b9\u7684**\u6240\u6709**\u5b50\u8282\u70b9\uff08**~~\u8c8c\u4f3c\u662f\u5e9f\u8bdd~~**\uff09\u3002\n\n> #### <3 \u201c\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u201d\n> \u5373**\u80fd\u5230\u8fbe**\u7ec8\u70b9\uff08**~~\u8c8c\u4f3c\u8fd8\u662f\u5e9f\u8bdd~~**\uff09\u3002\n\n\u7ed3\u5408\u8d77\u6765\uff0c\u4e5f\u5c31\u662f\uff1a\n\n> #### \u00b7 \u8be5\u8282\u70b9\u7684**\u6240\u6709**\u5b50\u8282\u70b9**\u80fd\u5230\u8fbe**\u7ec8\u70b9\u3002\n\n\u53c8\u56e0\u4e3a\u6709\u4e00\u4e2a\u57fa\u672c\u4e8b\u5b9e\uff1a\n\n> #### <4 \u5bf9\u4e8e\u8def\u5f84\u4e2d\u4efb\u4e00\u70b9\uff0c\u82e5\u5b83\u76f4\u63a5\u4e0e\u7ec8\u70b9\u76f8\u8fde\u901a\u6216\u5b83\u7684\u4efb\u4e00\u5b50\u8282\u70b9\u4e0e\u7ec8\u70b9\u76f8\u8fde\u901a\uff0c\u5219\u5b83\u6ee1\u8db3\u8981\u70b93\u3002\n\n\u90a3\u4e48\u65b9\u5411\u5c31\u6e10\u6e10\u660e\u6670\u4e86\uff0c\u5982\u679c\u52a0\u4e4b\u6211\u4eec\u4eceStep 2\u7684\u7b56\u7565\u9009\u62e9\u4e2d\u5f97\u5230\u7684\u63d0\u793a\uff1a\n\n> #### \u2022 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u6c42\u89e3\u987a\u5e8f\u6765\u7b80\u5316\u95ee\u9898\u3002\n~~\u663e\u800c\u6613\u89c1~~\u5219\u6211\u4eec\u53ef\u4ee5\u75314\u30013->2\uff0c\u5373**\u5148\u6807\u8bb0\u6bcf\u4e2a\u70b9\u80fd\u5426\u5230\u8fbe\u7ec8\u70b9**\uff0c**\u518d\u6807\u8bb0\u6bcf\u4e2a\u70b9\u80fd\u5426\u5b58\u5728\u4e8e\u8def\u5f84\u4e2d**\uff0c\u4ece\u800c\u5f97\u51faDijkstra\u6c42\u89e3\u7684\u70b9\u96c6\u3002\n\n> \u73b0\u5728\u6211\u4eec\u7684\u7b56\u7565\u7684\u7ec6\u8282\u5f97\u5230\u4e86\u4e30\u5bcc\uff0c\u5373\uff1a\n\n>> ##### 1. \u6807\u8bb0\u6240\u6709\u80fd\u5230\u8fbe\u7ec8\u70b9\u7684\u70b9\uff08\u5982\u679c\u8d77\u70b9\u4e0d\u5728\u70b9\u96c6\u4e2d\u5219\u65e0\u89e3\uff0c\u8f93\u51fa-1\uff09\u3002\n>> ##### 2. \u7b5b\u9009\u3001\u6807\u8bb0\u51fa\u80fd\u51fa\u73b0\u5728\u8def\u5f84\u4e0a\u7684\u70b9\u3002\n>> ##### 3. \u5bf9\u4e8e\u5df2\u7ecf\u6807\u8bb0\u7684\u70b9\uff08\u5373\u5728**\u80fd\u51fa\u73b0\u5728\u8def\u5f84\u4e0a\u7684\u70b9\u96c6**\u4e2d\uff09\u4f7f\u7528\u4f18\u5148\u961f\u5217\u4f18\u5316\u7684Dijkstra\u7b97\u6cd5\u6c42\u89e3\u3002\n>> ##### 4. \u5f97\u51fa\u7b54\u6848\u5e76\u8f93\u51fa\u3002\n\n\u5bf9\u4e8eNo.1\uff0c\u6211\u4eec\u4e0d\u59a8\u6362\u4e2a\u8bed\u5e8f\uff0c\u5373\uff1a\n\n>> ##### 1. \u6807\u8bb0\u7ec8\u70b9\u80fd\u5230\u8fbe\u7684\u70b9\u3002\n\n~~\u8c41\u7136\u5f00\u6717\u6709\u6ca1\u6709\uff01\uff01\uff01~~\n\n~~\u5f88\u663e\u7136\u5730~~\u6211\u4eec**\u4ee5\u7ec8\u70b9t\u4e3a\u904d\u5386\u8d77\u70b9\uff0cBFS\u904d\u5386\u6807\u8bb0\u7ec8\u70b9\u80fd\u5230\u8fbe\u7684\u70b9**\uff08\u4e5f\u5373\u80fd\u5230\u8fbe\u7ec8\u70b9\u7684\u70b9\uff09\uff0c\n\n\u552f\u4e00\u8981\u6ce8\u610f\u7684\u5730\u65b9\u662f**\u5bf9\u4e8e\u80fd\u91cd\u590d\u5230\u8fbe\u7684\u70b9\u7684\u5904\u7406**\uff08\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u5224\u65ad\uff0c\u7136\u800c\u4e0d\u52a0\u53ef\u80fd\u4f1aT\uff09\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u4ee5\u8d77\u70b9s\u4e3a\u904d\u5386\u8d77\u70b9\uff0cBFS\u904d\u5386\u6807\u8bb0\u80fd\u51fa\u73b0\u5728\u8def\u5f84\u4e0a\u7684\u70b9\uff08\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u91cc\u904d\u5386\u987a\u5e8f\u65e0\u59a8\uff0c\u7b49\u5f85\u5927\u4f6c\u9a8c\u8bc1O.O\uff09\u3002\n\n\u6700\u540e\u6211\u4eec\u53ea\u9700\u8981\u8dd1\u4e00\u904dDijsktra\uff0c\u95ee\u9898\u5c31\u89e3\u51b3\u5566\uff01\n\n\u5206\u6790\u5b8c\u6bd5\u5341\u5206\u6109\u60a6\uff0c\u53ef\u4ee5\u5f00\u59cb\u6109\u5feb\u5730\u6253\u4ee3\u7801\u4e86\u3002\n\n***\n### Step 4\uff1a \u4ee3\u7801\n***\n\n\u7ec8\u4e8e\u5230\u4e86~~\u6fc0\u52a8\u4eba\u5fc3\u7684~~\u4ee3\u7801\u5b9e\u73b0\u73af\u8282\u4e86\uff01\n\n\u5173\u4e8e\u4ee3\u7801\u5b9e\u73b0\uff0c\u4e2a\u4eba\u4e60\u60ef\u662f\u5206\u4ee3\u7801\u5757\u6765\u5199\uff08~~\u5957\u6a21\u677f~~\uff09\uff0c\n\n\u8fd9\u6837\u5199\u4ee3\u7801\u53ef\u8bfb\u6027\u6bd4\u8f83\u5f3a\uff08~~\u4e5f\u8bb8...\u5427~~\uff09\uff0c\u4e14\u6709\u5229\u4e8e\u601d\u8def\u91cd\u73b0\uff08\u4e2a\u4eba\u89c1\u89e3\uff0c\u4e0d\u559c\u6b22\u53ef\u4ee5\u6309\u7167\u81ea\u5df1\u7684\u4e60\u60ef\u5b9e\u73b0\uff09\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a\n\n> #### <1 \u8f6c\u7f6e\u56fe\uff08\u5373\u628a\u539f\u56fe\u6240\u6709\u7684\u8fb9\u53cd\u5411\uff09\u7684\u4f7f\u7528\n>> No.1\u8981\u6c42\u4ece\u7ec8\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u8f6c\u7f6e\u56fe\u4e5f\u56e0\u6b64\u663e\u5f97\u5f88\u6709\u5fc5\u8981\u4e86\u3002\n\n> #### <2 \u4f7f\u7528\u4e0d\u540c\u7684\u6570\u7ec4\u8868\u793a\u4e24\u6b21\u6807\u8bb0\u7684\u7ed3\u679c\n>> \u7406\u7531\u5982**Step 3**\u4e2d\u7684\u5206\u6790\uff0c\n\u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u4fdd\u8bc1\u904d\u5386\u987a\u5e8f\uff08\u7b2c\u4e00\u6b21\u4ece\u7ec8\u70b9\u5f00\u59cb\uff0c\u7b2c\u4e8c\u6b21\u4ece\u8d77\u70b9\u5f00\u59cb\uff09\uff0c\n\n>> \u53c8\u56e0\u4e3a\u7b2c\u4e00\u6b21\u6807\u8bb0\u7ed3\u679c\u662f\u7b2c\u4e8c\u6b21\u6807\u8bb0\u7684\u57fa\u7840\uff0c\n\n>> \u56e0\u6b64\u6709\u540e\u6548\uff0c\u4e0d\u80fd\u7528\u540c\u4e00\u6570\u7ec4\u8868\u793a\uff08\u53ef\u4ee5\u5bf9\u7167DP\u8981\u6c42\u7684\u65e0\u540e\u6548\u6027\u7406\u89e3\uff09\u3002\n\n> #### <3 Dijkstra\u4f18\u5148\u961f\u5217\u4f18\u5316\n>> \u7528**\u7ed3\u6784\u4f53\u548c\u4f18\u5148\u961f\u5217**\u5b9e\u73b0\uff08\u5177\u4f53\u89c1\u4ee3\u7801\uff09\u3002\n\n> * **E[ ],Head[ ]\u8868\u793a\u539f\u56fe\u7684\u8fb9\u96c6\u548c\u94fe\u8868\uff1b**\n\n> * **OppE[ ],OppHead[ ]\u8868\u793a\u8f6c\u7f6e\u56fe\u7684\u8fb9\u96c6\u548c\u94fe\u8868\uff08\u5176\u4f59\u540c\u7406\uff09\u3002**\n\n> * **Reachable[i]=1\u8868\u793a\u70b9i\u80fd\u5230\u8fbe\u7ec8\u70b9\uff08\u6216\u8005\u8bf4\u7ec8\u70b9\u80fd\u5230\u8fbe\u70b9i\uff09;**\n\n> * **Mark[i]=1\u8868\u793a\u70b9i\u80fd\u51fa\u73b0\u5728\u8def\u5f84\u4e0a\u3002**\n\n\u4ee3\u7801\u6ce8\u91ca\u5341\u5206\u8be6\u5c3d\uff0c\u8fc7\u591a\u7ec6\u8282\u8fd9\u91cc\u4e0d\u518d\u4e00\u4e00\u8d58\u8ff0\u4e86\u3002\n \n _\u518d\u6b21\u63d0\u9192\u4e0d\u4f1aDijkstra\u7684\u5c0f\u4f19\u4f34\u4eec\u53ef\u4ee5\u6362\u7528\u5176\u4ed6\u81ea\u5df1\u559c\u6b22\u7684\u7b97\u6cd5\u6216\u8005\u767e\u5ea6\u7b97\u6cd5\u539f\u7406\u54e6\uff08~~\u5176\u5b9e\u8fd8\u662f\u633a\u597d\u7406\u89e3\u7684~~\uff09\u3002_\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<string>\n#include<stack>\n#include<queue>\n#include<algorithm>\n#define LL long long\n#define INF 999999999\n#define Maxn 10005\n#define Maxm 200005\nusing namespace std;\nint n,m;//\u9898\u76ee\u6570\u636e\nint s,t;\nstruct Edge//\u94fe\u5f0f\u524d\u5411\u661f\u5efa\u56fe\u7684\u4ee3\u7801\u5757\n{\n\tint u,v,w;\n\tint Pre;\n}E[Maxm],OppE[Maxm];\nint Cnt;\nint Head[Maxn],OppHead[Maxn];\nvoid Add(int u,int v)//\u539f\u56fe\u4e0e\u8f6c\u7f6e\u56fe\u7684\u6784\u5efa \n{\n\tE[++Cnt].u=u;\n\tE[Cnt].v=v;\n\tE[Cnt].w=1;\n\tE[Cnt].Pre=Head[u];\n\tHead[u]=Cnt;\n\tswap(u,v);\n\tOppE[Cnt].u=u;\n\tOppE[Cnt].v=v;\n\tOppE[Cnt].w=1;\n\tOppE[Cnt].Pre=OppHead[u];\n\tOppHead[u]=Cnt;\n\treturn;\n}\nqueue<int> Point;//\u7b2c\u4e00\u6b21\u6807\u8bb0\u6bcf\u4e2a\u70b9\u80fd\u5426\u5230\u8fbe\u7ec8\u70b9t\u7684\u4ee3\u7801\u5757\nint Reachable[Maxn];\nvoid BFS_reachable(int Start)//\u4ece\u7ec8\u70b9t\u7528BFS\u904d\u5386\u6807\u8bb0\u53ef\u4ee5\u5230\u8fbe\u7ec8\u70b9t\u7684\u70b9\n{\n\tReachable[Start]=1;//\u521d\u59cb\u5316 \n\tPoint.push(Start);\n\twhile(!Point.empty())\n\t{\n\t\tint u=Point.front();\n\t\tPoint.pop();\n\t\tfor(int i=OppHead[u];i>0;i=OppE[i].Pre)//\u904d\u5386\u8f6c\u7f6e\u56fe\u4e2d\u904d\u5386\u8d77\u70b9\uff08\u5f00\u59cb\u4e3a\u7ec8\u70b9t\uff09\u7684\u6bcf\u4e2a\u5b50\u8282\u70b9 \n\t\t{\n\t\t\tint Oppv=OppE[i].v;\n\t\t\tif(Reachable[Oppv]==0)//\u5982\u679c\u6ca1\u6709\u6807\u8bb0\u8fc7\u5219\u6807\u8bb0\u5e76\u52a0\u5165\u961f\u5217 \n\t\t\t{\n\t\t\t\tReachable[Oppv]=1;\n\t\t\t\tPoint.push(Oppv);\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\nint Mark[Maxn];//\u7b2c\u4e8c\u6b21\u6807\u8bb0\u80fd\u5426\u9009\u4e2d\u7684\u4ee3\u7801\u5757\nvoid BFS_mark()//\u4ece\u8d77\u70b9s\u7528BFS\u904d\u5386\u6807\u8bb0\u53ef\u4ee5\u9009\u4e2d\u7684\u70b9\n{\n\tfor(int i=1;i<=n;i++)\n\t\tif(Reachable[i])//\u9996\u5148\u8981\u6c42\u8be5\u70b9\u5fc5\u987b\u80fd\u5230\u7ec8\u70b9t \n\t\t{\n\t\t\tMark[i]=1;\n\t\t\tfor(int j=Head[i];j>0;j=E[j].Pre)//\u5176\u6b21\u5224\u65ad\u8be5\u70b9\u6240\u6709\u5b50\u8282\u70b9\u80fd\u5426\u5230\u8fbe\u7ec8\u70b9t \n\t\t\t{\n\t\t\t\tint v=E[j].v;\n\t\t\t\tif(Reachable[v]==0)//\u82e5\u8be5\u70b9\u5b58\u5728\u4efb\u4e00\u5b50\u8282\u70b9\u65e0\u6cd5\u5230\u8fbe\u5219\u8be5\u70b9\u4e0d\u80fd\u5728\u8def\u5f84\u4e2d \n\t\t\t\t{\n\t\t\t\t\tMark[i]=0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\treturn;\n}\nstruct Node//Dijsktra\u4f18\u5148\u961f\u5217\u4f18\u5316\u7684\u4ee3\u7801\u5757\n{\n\tint w,Pos;\n\tfriend bool operator <(Node A,Node B)\n\t{\n\t\treturn A.w>B.w;\n\t}\n};\nNode Init(int w,int Pos)//\u5c06\u72b6\u6001\u8f6c\u6362\u4e3a\u7ed3\u6784\u4f53\u5b58\u5165\u4f18\u5148\u961f\u5217  \n{\n\tNode T;\n\tT.w=w;\n\tT.Pos=Pos;\n\treturn T;\n}\npriority_queue<Node> Array;\nint Dis[Maxn],Vis[Maxn];\nvoid Dijsktra(int Start)//\u6c42\u89e3\u6700\u77ed\u8defDis(t->s) \n{\n\tfor(int i=0;i<=n;i++) Dis[i]=INF;\n\tDis[Start]=0;\n\tArray.push(Init(Dis[Start],Start));\n\twhile(!Array.empty())\n\t{\n\t\tNode Tmp=Array.top();\n\t\tArray.pop();\n\t\tint u=Tmp.Pos;\n\t\tif(Vis[u]) continue;\n\t\tVis[u]=1;\n\t\tfor(int i=OppHead[u];i>0;i=OppE[i].Pre)//\u5728\u8f6c\u7f6e\u56fe\u4e2d\u6c42\u89e3\uff08\u4e0d\u8fc7\u8c8c\u4f3c\u65e0\u6240\u8c13QAQ\uff09 \n\t\t{\n\t\t\tint v=OppE[i].v;\n\t\t\tif(Mark[v]==0) continue;\n\t\t\tif(Dis[v]>Dis[u]+OppE[i].w)\n\t\t\t{\n\t\t\t\tDis[v]=Dis[u]+OppE[i].w;\n\t\t\t\tArray.push(Init(Dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\nint main()\n{\n\t//freopen(\"testdata.in\",\"r\",stdin);\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)//\u8bfb\u5165\u5e76\u5efa\u56fe\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tAdd(x,y);\n\t}\n\tcin>>s>>t;\n\tBFS_reachable(t);//\u7b2c\u4e00\u6b21\u6807\u8bb0\u6bcf\u4e2a\u70b9\u80fd\u5426\u5230\u8fbe\u7ec8\u70b9t\n\tif(Reachable[s]==0)//\u8d77\u70b9s\u4e0d\u80fd\u5230\u8fbe\u7ec8\u70b9t\u5219\u8f93\u51fa-1\u5e76\u7ed3\u675f\u7a0b\u5e8f\n\t{\n\t\tcout<<\"-1\\n\";\n\t\treturn 0;\n\t}\n\tBFS_mark();//\u7b2c\u4e8c\u6b21\u6807\u8bb0\u6bcf\u4e2a\u70b9\u80fd\u5426\u51fa\u73b0\u5728\u8def\u5f84\u4e2d\n\t//for(int i=1;i<=n;i++) printf(\"NO %d If_accesable %d\\n\",i,Mark[i]);\n\tDijsktra(t);//Dijsktra\u89e3\u51b3\u5355\u6e90\u6700\u77ed\u8def\n\tcout<<((Dis[s]==INF)?-1:Dis[s])<<\"\\n\";//\u5728\u9898\u76ee\u6761\u4ef6\u4e0bDis(s->t)\u4e0eDis(t->s)\u7b49\u4ef7\n\treturn 0;\n}\n```\n\n***\n### \u603b\u7ed3\n***\n\n\u672c\u9898\u6700\u5173\u952e\u7684\u662f**\u6c42\u89e3\u987a\u5e8f**\u7684\u8f6c\u6362\uff0c\n\u65e0\u8bba\u662f\u5bf9\u9898\u76ee\u9650\u5236\u7684\u5206\u6790\u3001\u7b56\u7565\u7684\u9009\u62e9\u8fd8\u662f\u4ee3\u7801\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\n\n\u90fd\u7528\u5230\u4e86\u6539\u53d8\u6c42\u89e3\u987a\u5e8f\u751a\u81f3\u9006\u5411\u6c42\u89e3\u7684\u65b9\u6cd5\uff08\u5982\u8f6c\u7f6e\u56fe\u53cd\u5411BFS\uff09\u3002\n\n\u5e0c\u671b\u672c\u7bc7\u9898\u89e3\u5bf9\u8bfb\u8005\u6709\u5e2e\u52a9~~\u4e5f\u795d\u5404\u4f4d\u8bfb\u8005\u90fd\u80fd\u6210\u4e3aAC\u81ea\u52a8\u673a~~\uff01\uff08\u9003\n\n***\n_2019-08-07 Update_\n***\n\n***\n> # $END$\n***",
        "postTime": 1564124941,
        "uid": 130626,
        "name": "MONIEN",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "# \u5e8f\u8a00\uff1a\n\u8fd9\u9053\u9898\u771f\u7684\u5f88\u953b\u70bc\u601d\u7ef4\u80fd\u529b\uff0c~~\u5c31\u50cf\u5176\u4ed6\u51e0\u7bc7\u9898\u89e3\u91cc\u8bf4\u7684\u90a3\u6837~~\uff0c\u5efa\u8bae\u5927\u5bb6\u81ea\u5df1\u5c1d\u8bd5\u7740\u5199\u4e00\u4e0b\uff0c\u7ec6\u8282\u5f88\u591a\uff0c\u771f\u7684\u5f88\u6709\u610f\u601d\u3002\n# \u6b63\u6587\uff1a\n### \u9898\u76ee\u94fe\u63a5\uff1a[\u4f20\u9001\u95e8](https://www.luogu.org/problem/P2296)\n### \u9898\u76ee\u63cf\u8ff0\uff1a\n\u5728\u6709\u5411\u56feG\u4e2d\uff0c\u6bcf\u6761\u8fb9\u957f\u5ea6\u5747\u4e3a1\uff0c\u73b0\u7ed9\u5b9a\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8bf7\u4f60\u5728\u56fe\u4e2d\u627e\u51fa\u4e00\u6761\u8def\u5f84\uff0c\u8be5\u8def\u5f84\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n\n _1.\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u3002_ \n \n _2.\u5728\u6ee1\u8db31\u7684\u6761\u4ef6\u4e0b\u4f7f\u8def\u5f84\u66f4\u77ed_ \n \n\u6ce8\u610f\uff1a\u56feG\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u9898\u76ee\u4fdd\u8bc1\u7ec8\u70b9\u6ca1\u6709\u51fa\u8fb9\n\n\u8bf7\u4f60\u8f93\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\u7684\u957f\u5ea6\n### \u5927\u81f4\u601d\u8def\uff1a\n\u9898\u76ee\u4e2d\u5df2\u7ecf\u8bf4\u4e86\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u5747\u4e3a1\uff0c\u6545\u91cd\u8fb9\u548c\u81ea\u73af\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u5f71\u54cd\uff0c\u53ef\u5ffd\u7565\n\n\u56e0\u4e3a\u8fb9\u6743\u56fa\u5b9a\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u8f7b\u6613\u5730\u60f3\u5230\u7528BFS\u6c42\u6700\u77ed\u8def\u7684\u65b9\u6cd5\u3002\u56e0\u4e3a\u5728BFS\u4e2d\uff0c\u8282\u70b9\n\u5165\u961f\u65f6\u4f1a\u5c06\u6574\u5f20\u56fe\u7684\u8282\u70b9\u5206\u5c42\uff0c\u8bbe\u8d77\u70b9\u7684\u5c42\u6570\u4e3a0\uff0c\u5219\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\u5c31\u662f\u8fb9\u6743\u4e58\u4ee5\u5c42\u6570\n![\u56fe1](https://cdn.luogu.com.cn/upload/image_hosting/vmqz54j2.png)\n\n\u5982\u56fe\uff0c\u82e5\u8fb9\u6743\u5747\u4e3a1\uff0c\u5219\u8d77\u70b9\uff08\u7ea2\u8272\uff09\u5230\u7ec8\u70b9\uff08\u84dd\u8272\uff09\u7684\u8ddd\u79bb\u4e3a1x3=3\n\n _Code:_ \n ```cpp\nvoid bfs_c(){\n\twhile(p.size()){\n\t\tint v=p.front();p.pop();\n\t\tif(v==et)break;\n\t\tfor(int i=hc[v];i;i=nc[i]){\n\t\t\tint x=vc[i];\n\t\t\tif(vis_c[x])continue;\n\t\t\tdist[x]=dist[v]+1;//\u7edf\u8ba1\u5c42\u6570\n\t\t\tp.push(x);vis_c[x]=1;\n\t\t}\n\t}\n}\n\n```\n\n\n\u800c\u5bf9\u4e8e\u5904\u7406\u9898\u76ee\u4e2d\u7684\u6761\u4ef6\u4e00\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u53cd\u5411\u5efa\u56fe+BFS\u7684\u65b9\u5f0f\u53bb\u5bfb\u627e\u4ece\u7ec8\u70b9\u51fa\u53d1\u80fd\u591f\u5230\u8fbe\u7684\u70b9\u5e76\u6807\u8bb0\uff0c\u5219\u5269\u4e0b\u6ca1\u6709\u88ab\u6807\u8bb0\u7684\u70b9\u5c31\u662f\u4e0d\u4e0e\u7ec8\u70b9\u8fde\u901a\u4e14\u4e0d\u4e0e\u7ec8\u70b9\u95f4\u63a5\u8fde\u901a\u7684\u70b9\uff0c\u4ee5\u6837\u4f8b\u4e8c\u7684\u56fe\u4e3a\u4f8b\uff0c\u53cd\u5411\u5efa\u56fe\u5e76\u6807\u8bb0\u8282\u70b9\u540e\uff1a\n\n![\u56fe2](https://cdn.luogu.com.cn/upload/image_hosting/s01btys8.png)\n\n\u5982\u56fe\uff0c\u8282\u70b96\u5c31\u662f\u4e0d\u4e0e\u7ec8\u70b9\u8fde\u901a\u6216\u95f4\u63a5\u8fde\u901a\u7684\u70b9\n\n\u6309\u9898\u76ee\u6761\u4ef6\u4e00\u8981\u6c42\uff0c\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u4e0d\u80fd\u6307\u5411\u4e0d\u4e0e\u7ec8\u70b9\u8fde\u901a\u6216\u4e0d\u4e0e\u91cd\u70b9\u95f4\u63a5\u8fde\u901a\u7684\u70b9\n\n\u56e0\u6b64\uff0c\u5728\u53cd\u5411\u56fe\u4e2d\uff0c\u672a\u88ab\u6807\u8bb0\u7684\u8282\u70b9\u6307\u5411\u7684\u6240\u6709\u8282\u70b9\u5747\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u6545\u5c06\u4e0e\u672a\u88ab\u6807\u8bb0\u7684\u8282\u70b9\u6307\u5411\u7684\u6240\u6709\u7684\u70b9\u7684\u6807\u8bb0\u90fd\u6e05\u9664\uff0c\u56fe\u4e3a\u6e05\u9664\u6807\u8bb0\u540e\uff1a\n\n![\u56fe3](https://cdn.luogu.com.cn/upload/image_hosting/kbcxyzyb.png)\n\n\u6b64\u65f6\u5728\u6253\u597d\u6807\u8bb0\u7684\u8282\u70b9\uff08\u7ea2\u5708\uff09\u7684\u6b63\u5411\u56fe\u4e2d\u8fdb\u884cBFS\u6c42\u6700\u77ed\u8def\u5c31\u53ef\u4ee5\u6c42\u51fa\u6700\u77ed\u7684\u5408\u6cd5\u8def\u5f84\n\n### \u5177\u4f53\u505a\u6cd5&\u7ec6\u8282\uff1a\n\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86\u5927\u81f4\u7684\u7b56\u7565\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u8ba8\u8bba\u4e00\u4e9b\u9898\u76ee\u7684\u7ec6\u8282\n####  1.\u9898\u76ee\u4e2d0<n<=10000\uff0c\u90bb\u63a5\u77e9\u9635\u80af\u5b9a\u4f1a\u8d85\u7a7a\u95f4\uff0c\u53ef\u4ee5\u4f7f\u7528\u90bb\u63a5\u94fe\u8868\u6765\u50a8\u5b58\n _Code:_ \n ```cpp\nconst int N=100010,M=1000010;\nint ver[M],Next[M],head[N],tot;\nvoid add(int x,int y){\n\tver[++tot]=y,Next[tot]=head[x],head[x]=tot;\n}\n```\n#### 2.\u7b2c\u4e00\u6b21\u6253\u7684\u6807\u8bb0\u5177\u6709\u540e\u6548\u6027\uff0c\u6e05\u9664\u6807\u8bb0\u65f6\u4e0d\u80fd\u76f4\u63a5\u6e05\u9664\u7b2c\u4e00\u6b21\u7684\u6807\u8bb0\n\u4ee5\u56fe\u4e3a\u4f8b\uff0c1\u4e3a\u8d77\u70b94\u4e3a\u7ec8\u70b9\uff1a\n![\u56fe4](https://cdn.luogu.com.cn/upload/image_hosting/y6nln2b9.png)\n\n\u53cd\u5411\u5efa\u56fe\u5e76\u6253\u6807\u8bb0\u540e:\n![\u56fe5](https://cdn.luogu.com.cn/upload/image_hosting/b26fs4ko.png)\n\n\u6b64\u65f6\u82e5\u679a\u4e3e\u6240\u6709\u7684\u8282\u70b9\uff0c\u53d1\u73b0\u8282\u70b92\u4e0d\u5408\u6cd5\uff0c\u5c06\u4e0e\u8282\u70b92\u76f8\u8fde\u7684\u8282\u70b93\u7684\u6807\u8bb0\u6e05\u9664\uff0c\u8fc7\u540e\u679a\u4e3e\u5230\u8282\u70b93\u65f6\u4e5f\u4f1a\u5c06\u4e0e\u8282\u70b93\u76f8\u8fde\u7684\u8282\u70b9\u6807\u8bb0\u6e05\u9664\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u89e3\u662f\u9519\u8bef\u7684\u3002\u9762\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u4e24\u4e2a\u6807\u8bb0\uff0c\u679a\u4e3e\u6807\u8bb01\u6e05\u9664\u6807\u8bb02\u5373\u53ef\n#### 3.\u7b2c\u4e00\u6b21BFS\u6253\u6807\u8bb0\u65f6\u4e0d\u80fd\u4ee5\u5224\u65ad\u961f\u9996\u5143\u7d20\u662f\u5426\u4e3a\u8d77\u70b9\u4f5c\u4e3aBFS\u7ec8\u6b62\u7684\u6761\u4ef6\n\u8fd9\u5c31\u662f\u5361\u4e86\u6211\u4e00\u4e2a\u5c0f\u65f6\u7684\u70b9\uff0c\u6c42\u5de8\u4f6c\u4eec\u653e\u8fc7\uff0c\u522b\u7b11\u6211\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff0c\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u7684\u4e0d\u662f\u6700\u77ed\u8def\u5f84\u800c\u662f\u6700\u77ed\u7684\u5408\u6cd5\u8def\u5f84\uff0c\u8fd9\u6837\u641c\u7d22\u4f1a\u5bfc\u81f4\u6709\u4e9b\u70b9\u6ca1\u80fd\u6765\u5f97\u53ca\u6253\u4e0a\u6807\u8bb0\uff0c\u65e0\u6cd5\u5f97\u51fa\u6b63\u786e\u89e3\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\uff1a\n\u6709\u4e86\u4e0a\u9762\u7684\u94fa\u57ab\uff0c\u76f8\u4fe1\u5b9e\u73b0\u672c\u9898\u7684\u4ee3\u7801\u5bf9\u4e8e\u5927\u5bb6\u6765\u8bf4\u4e00\u5b9a\u4e0d\u662f\u4e00\u4ef6\u96be\u4e8b\u5427\n\n_Code:_\n ```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100010,M=1000010;\nint ver[M],Next[M],head[N],tot;\nint vc[M],nc[M],hc[N],tc;\nint n,m,st,et,dist[N];\nbool vis[N],vis_c[N];//\u53cc\u6807\u8bb0 \nqueue<int> q,p;\nvoid add(int x,int y){\n\tver[++tot]=y,Next[tot]=head[x],head[x]=tot;\n}//\u90bb\u63a5\u8868\u5b58\u53cd\u5411\u56fe\nvoid add_c(int x,int y){\n\tvc[++tc]=y,nc[tc]=hc[x],hc[x]=tc;\n}//\u90bb\u63a5\u8868\u5b58\u6b63\u5411\u56fe \nvoid bfs(){\n\twhile(q.size()){\n\t\tint v=q.front();q.pop();\n\t\tfor(int i=head[v];i;i=Next[i]){\n\t\t\tint x=ver[i];\n\t\t\tif(vis[x])continue;\n\t\t\tq.push(x);vis[x]=1;\n\t\t}\n\t}\n}//\u7b2c\u4e00\u904d\u641c\u7d22&&\u6253\u6807\u8bb0 \nvoid bfs_c(){\n\twhile(p.size()){\n\t\tint v=p.front();p.pop();\n\t\tif(v==et)break;\n\t\tfor(int i=hc[v];i;i=nc[i]){\n\t\t\tint x=vc[i];\n\t\t\tif(vis_c[x])continue;\n\t\t\tdist[x]=dist[v]+1;//\u7edf\u8ba1\u5c42\u6570 \n\t\t\tp.push(x);vis_c[x]=1;\n\t\t}\n\t}\n}//\u7b2c\u4e8c\u904d\u641c\u7d22&&\u6c42\u6700\u77ed\u8def \nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(y,x);add_c(x,y);//\u6b63\u53cd\u5411\u5206\u522b\u5efa\u56fe \n\t}\n\tscanf(\"%d%d\",&st,&et);\n\tq.push(et);vis[et]=1;\n\tbfs();//\u7b2c\u4e00\u6b21\u641c\u7d22 \n\tfor(int u=1;u<=n;u++){//\u679a\u4e3e\u8282\u70b9\u6e05\u9664\u6807\u8bb0 \n\t\tif(vis[u])continue;vis_c[u]=1;\n\t\tfor(int i=head[u];i;i=Next[i]){\n\t\t\tint x=ver[i];\n\t\t\tvis_c[x]=1;\n\t\t}\n\t}\n\tp.push(st);vis_c[st]=1;\n\tbfs_c();//\u7b2c\u4e8c\u6b21\u641c\u7d22 \n\tif(dist[et]==0)puts(\"-1\");\n\telse printf(\"%d\\n\",dist[et]);\n\treturn 0;\n}\n```\n# \u7ed3\u8bed\uff1a\n\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u72ec\u7acb\u5b8c\u6210\u6b64\u9898&&\u6709\u9519\u8bef\u9ebb\u70e6\u5728\u8bc4\u8bba\u533a\u6307\u6b63\uff0c\u8c22\u8c22\n\n~~\u80fd\u7ed9\u6211\u4e2a\u8d5e\uff0c\u628a\u6211\u9876\u5230\u7b2c\u4e00\u9875\u4e48~~",
        "postTime": 1572012905,
        "uid": 137242,
        "name": "Dia\u043esi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u6211\u89c9\u5f97SPFA\u66f4\u5bb9\u6613\u7406\u89e3\n\n\u4ec0\u4e48\u5efa\u53cd\u56fe\u3001\u4ece\u7ec8\u70b9\u641c\u7d22\u4e0d\u80fd\u5230\u7684\u70b9\u3001\u53bb\u9664\u4e0d\u80fd\u5230\u7684\u70b9\u6240\u8fde\u63a5\u7684\u70b9\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u4e0b\u9762\u7684\u9898\u89e3\u90fd\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86\n\n\u4e0d\u8fc7\u6709\u4e00\u4e2a\u5751\u70b9\uff1a\u53bb\u9664\u4e0d\u80fd\u5230\u7684\u70b9\u6240\u8fde\u63a5\u7684\u70b9\u7684\u65f6\u5019\uff0c\u8981\u65b0\u5efa\u4e00\u4e2a\u6570\u7ec4\u4fdd\u5b58\uff0c\u7136\u540e\u518d\u62f7\u8d1d\u56de\u539f\u6570\u7ec4\uff08\u89c1\u4ee3\u7801\uff09\uff0c\u4e0d\u7136\u4f1a\u628a\u4e0d\u8be5\u5220\u9664\u7684\u70b9\u5220\u6389\u7684\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nqueue <int> q;\nstruct node\n{\n    int t,nt;\n}a[200005],b[200005];\nint n,m,vs[10005],head[10005],vv[10005],hf[10005],lf,len,visited[10005],dis[10005],s,t;\nvoid dfs(int x)\n{\n    visited[x]=1;\n    for (int i=hf[x];i;i=b[i].nt)\n    if (visited[b[i].t]==0)dfs(b[i].t);\n}\nvoid spfa()\n{\n    for (int i=1;i<=n;i++)\n    if (i!=s)dis[i]=0x7fffffff/3;\n    vs[s]=1;\n    q.push(s);\n    int temp;\n    while (!q.empty())\n    {\n        temp=q.front();\n        q.pop();\n        vs[temp]=0;\n        if (visited[temp]==0)continue;\n        for (int i=head[temp];i;i=a[i].nt)\n        {\n            if (dis[a[i].t]>dis[temp]+1)\n            {\n                dis[a[i].t]=dis[temp]+1;\n                if (vs[a[i].t]==0)\n                {\n                    vs[a[i].t]=1;\n                    q.push(a[i].t);\n                }\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    int u,v;\n    for (int i=1;i<=m;i++)\n    {\n        scanf(\"%d %d\",&u,&v);\n        a[++len].t=v;\n        a[len].nt=head[u];\n        head[u]=len;\n        b[++lf].t=u;\n        b[lf].nt=hf[v];\n        hf[v]=lf;\n    }\n    scanf(\"%d %d\",&s,&t);\n    dfs(t);\n    for (int i=1;i<=n;i++)\n    if (visited[i]==0)\n    for (int j=hf[i];j;j=b[j].nt)\n    vv[b[j].t]=1;//\u5c31\u662f\u8fd9\u4e2a\u5730\u65b9\uff0c\u4e3a\u4ec0\u4e48\u8981\u521b\u5efa\u4e00\u4e2avv\u6570\u7ec4\uff1f\u56e0\u4e3avisited\u6570\u7ec4\u8fd8\u6ca1\u641c\u7d22\u5b8c\uff0c\u4e0d\u80fd\u4fee\u6539\u5176\u6570\u636e\n    for (int i=1;i<=n;i++)\n    if (vv[i]==1)visited[i]=0;\n    spfa();\n    printf(\"%d\",dis[t]==0x7fffffff/3?-1:dis[t]);\n}\n```",
        "postTime": 1506602802,
        "uid": 33930,
        "name": "vani_prcups",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u5927\u81f4\u601d\u8def\uff1a\n\n\u56e0\u4e3a\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u59a8\u628a\u6240\u6709\u7684\n\n\u8fb9\u53cd\u5411\uff0c\u7136\u540e\u6c42t\u5230s\u7684\u6700\u77ed\u8def\u5f84\n\n\u5927\u81f4\u8bc1\u660e\uff1a\n\n\u5148\u5c06\u6240\u6709\u8fb9\u6309\u7167\u8bfb\u5165\u987a\u5e8f\u6807\u53f7\n\n\u6240\u6709\u6ee1\u8db3\u6761\u4ef61\u7684\u4eces\u5230t\u8def\u5f84\uff0c\u5728\u8fb9\u90fd\u53cd\u5411\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u5e94\u4e00\u6761t\u5230s\u7684\u8def\u5f84\uff0c\u5e76\u4e14\u6ee1\u8db3\u4e00\n\n\u4e00\u5bf9\u5e94\uff08\u56e0\u4e3a\u8def\u5f84\u4e0a\u8fb9\u7684\u6807\u53f7\u90fd\u76f8\u540c\uff09\n\nTips\uff1a\u8fd9\u91cc\u7684\u6700\u77ed\u8def\u53ef\u4ee5BFS\u6c42\u5f97\uff08\u56e0\u4e3a\u8def\u5f84\u957f\u5ea6\u90fd\u662f1\uff09\n\n\u6838\u5fc3\u4ee3\u7801\uff1a\n\n```cpp\nvoid travel(int k)\n{\n    h[k]=true;\n    for(int i=p[k];i;i=next[k])\n    if(!h[x[k]]) travel(x[k]);\n}\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d %d\",&x[i],&y[i]);\n        next[i]=p[y[i]]; p[y[i]]=i;\n    }\n    scanf(\"%d %d\",&s,&t);\n    travel(t);\n    memset(p,0,sizeof(p));\n    for(int i=1;i<=m;i++) { next[i]=p[x[i]]; p[x[i]]=i; }\n    memset(f,true,sizeof(f));\n    for(int i=1;i<=n;i++)\n        for(int j=p[i];j;j=next[j])\n            if(!h[y[j]]) f[i]=false;\n    memset(d,127,sizeof(d));\n    memset(h,false,sizeof(h));\n    if(f[s]) d[s]=0;\n    list[0]=s; h[s]=true;\n    while(head<=tail)\n    {\n        for(int i=p[list[head]];i;i=next[i])\n            if(f[y[i]] && d[x[i]]+1<d[y[i]])\n            {\n                d[y[i]]=d[x[i]]+1;\n                if(!h[y[i]])\n                {\n                    list[++tail]=y[i];\n                    h[y[i]]=true;\n                }\n            }\n        h[list[head++]]=false;\n    }\n    printf(\"%d\",d[t]<n?d[t]:-1);\n    return 0;\n}\n```",
        "postTime": 1512892361,
        "uid": 41785,
        "name": "\u591c\u5200\u795e\u5341\u9999\u10e6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u6253\u5f00\u9898\u9762\u770b\u5230\u201c\u6700\u77ed\u8def\u5f84\u201d\u9a6c\u4e0a\u5c31\u65e0\u8111\u6253\u4e86dij\n\n\u7ed3\u679c\u53d1\u73b0\u597d\u50cf\u54ea\u91cc\u4e0d\u592a\u5bf9 \u597d\u50cf\u4e0d\u662f\u666e\u901a\u6700\u77ed\u8def\n\n\u4f46\u662f \u65e2\u7136\u5199\u4e86dij \u90a3\u5c31\u5c3d\u91cf\u7528\u5427\n\n\u7136\u540e\u672c\u83dc\u9e21\u7684\u8fd9\u7bc7\u9898\u89e3\u5c31\u51fa\u73b0\u4e86\n\n------------\n\n\u7b2c\u4e00\u904ddij\n\n- \u53cd\u5411\u5efa\u56fe \u6807\u8bb0\u6240\u6709\u65e0\u6cd5\u5230\u8fbe\u7684\u70b9\n\n- \u6807\u8bb0\u4e0e\u5df2\u6807\u8bb0\u70b9\u76f8\u8fde\u7684\u70b9\n\n\u7b2c\u4e8c\u904ddij\n\n- \u6b63\u5411\u5efa\u56fe \u8df3\u8fc7\u6807\u8bb0\u70b9\n\n------------\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\n\nusing namespace std;\n\nconst int maxn=10005;\n\nconst int maxm=200005;\n\nint cnt,n,m,s,t;\n\nint first[maxn],dis[maxn],u[maxm],v[maxm];\n\nbool vis[maxn],b1[maxn],b2[maxn];\n\nstruct Edge\n{\n\tint to,dis,nxt;\n}a[maxm];\n\nstruct Node\n{\n\tint num,dis;\n};\n\ninline int read()\n{\n\tint p=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){p=(p<<1)+(p<<3)+(c^48),c=getchar();}\n\treturn p*f;\n}\n\ninline void addedge(int from,int to,int dis)\n{\n\ta[++cnt]=(Edge){to,dis,first[from]};\n\tfirst[from]=cnt;\n}\n\ninline void init()\n{\n\tmemset(vis,0,sizeof(vis));\n\tfor(int i=1;i<=n;i++)\n\t\tdis[i]=2147483647;\n}\n\nbool operator <(Node a,Node b)\n{\n\treturn a.dis>b.dis;\n}\n\ninline void dij(int s)\n{\n\tinit();\n\tpriority_queue<Node>q;\n\tq.push((Node){s,0});\n\tdis[s]=0;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.top().num;\n\t\tq.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(register int i=first[u];i;i=a[i].nxt)\n\t\t{\n\t\t\tint v=a[i].to;\n\t\t\tif(b1[v]||b2[v]) continue;\n\t\t\tif(dis[v]>dis[u]+a[i].dis)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+a[i].dis;\n\t\t\t\tq.push((Node){v,dis[v]});\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tn=read(),m=read();\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tu[i]=read(),v[i]=read();\n\t\tif(u[i]==v[i]) continue;\n\t\taddedge(v[i],u[i],1);\n\t}\n\ts=read(),t=read();\n\tdij(t);\n\tfor(register int i=1;i<=n;i++)\n\t\tif(dis[i]==2147483647)\n\t\t{\n\t\t\tb1[i]=1;\n\t\t\tfor(register int j=first[i];j;j=a[j].nxt)\n\t\t\t\tb2[a[j].to]=1;//\u5c3d\u91cf\u7528\u53e6\u4e00\u4e2a\u6570\u7ec4\u5b58\uff0c\u5426\u5219\u6709\u540e\u6548\u6027\n\t\t}\n\tmemset(a,0,sizeof(a));\n\tmemset(first,0,sizeof(first));\n\tcnt=0;\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tif(u[i]==v[i]) continue;\n\t\taddedge(u[i],v[i],1);\n\t}\t\n\tdij(s); \n\tif(dis[t]==2147483647) cout<<\"-1\";\n\telse cout<<dis[t];\n\treturn 0;\n}\n```\n",
        "postTime": 1569408856,
        "uid": 124764,
        "name": "suuuuy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "# \u4e24\u904dSPFA\n### \uff08\u53cd\u5411\u6807\u8bb0\u70b9 \u6b63\u5411\u6700\u77ed\u8def\uff09\n\n------------\n\n\u662f\u672c\u849f\u84bb\u7b2c\u4e00\u7bc7\u9898\u89e3\u4e86\uff01\uff08\u8ddf\u90b9\u8001\u677f\u5b66\u5199\u7684\uff09\n\n\n------------\n\n\u9898\u76ee\u63cf\u8ff0\n\n\u5728\u6709\u5411\u56fe GG \u4e2d\uff0c\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6\u5747\u4e3a 11\uff0c\u73b0\u7ed9\u5b9a\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8bf7\u4f60\u5728\u56fe\u4e2d\u627e\u4e00\u6761\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\uff0c\u8be5\u8def\u5f84\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n \n 1.\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u3002\n 2.\u5728\u6ee1\u8db3\u6761\u4ef6 1 1\u7684\u60c5\u51b5\u4e0b\u4f7f\u8def\u5f84\u6700\u77ed\u3002\n\n \u6ce8\u610f\uff1a\u56fe GG \u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u9898\u76ee\u4fdd\u8bc1\u7ec8\u70b9\u6ca1\u6709\u51fa\u8fb9\u3002\n\n\u8bf7\u4f60\u8f93\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\u7684\u957f\u5ea6\u3002\n\n ~~\u6ce8\u610f\u662f\u4e0d\u9700\u8981\u6ce8\u610f\u7684~~\n \n \u6211\u4eec\u53ea\u770b\u8def\u5f84\u6ee1\u8db3\u7684\u6761\u4ef6\uff1a\n\n\n------------\n\n \u7b2c\u4e00\u70b9\u6709\u70b9\u96be\u7406\u89e3\uff0c\u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u5f20\u56fe\n### ![](https://cdn.luogu.com.cn/upload/pic/1351.png)\n \u5927\u5bb6\u53ef\u80fd\u4f1a\u5bf9\u6837\u4f8b\u4e8c\u4e2d 2 \u8fd9\u4e2a\u70b9\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u7528\u4ea7\u751f\u7591\u95ee\n \n ~~\u5176\u5b9e\u5c31\u662f\u6211~~\n \n \u53ef\u4ee5\u770b\u51fa\u6765\uff1a5 \u5230\u4e0d\u4e86 6 \uff08\u7528\u53cd\u5411\u56fe\u8dd1\uff09\uff0c\u90a3\u4e48 2 \u7684\u51fa\u8fb9\u4e0d\u4e0e\u7ec8\u70b9 5 \u76f8\u8fde\uff0c\u6240\u4ee5 2 \u4e5f\u4e0d\u53ef\u4ee5\u5305\u542b\u5728\u8def\u5f84\u91cc\n\n\n------------\n\n\n------------\n\n  \u7b2c\u4e8c\u70b9\u5c31\u662f\u6b63\u5e38\u7684\u6700\u77ed\u8def\u4e86\uff0c\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\uff0c\u6211\u9009\u62e9\u7528\u52a0\u8fc7\u5806\u4f18\u5316\u7684spfa\uff08~~~~~~~~\u5176\u5b9e\u5c31\u662fdijisitra\u5806\u4f18\u5316\u4f46\u662f\u6211\u4eec\u673a\u623f\u90fd\u7ba1\u5b83\u53ebspfa\u5806\u4f18\u5316~~~~~~~~\uff09\n\n#### \u90a3\u5c31\u4e0d\u5e9f\u8bdd\u4e86 \u4e0a\u4ee3\u7801 \u91cc\u9762\u6709\u6ce8\u91ca\uff01\uff01\n\n\n```cpp\n#include <bits/stdc++.h>\n#define I return\n#define like 0\n#define guanliyuan ;\nusing namespace std;\n\nconst int maxn=5000000;\nstruct node{\n\tint v,next;\n}edge[maxn],edge1[maxn];\nint head[maxn],head1[maxn],cnt,cnt1;\nint n,m,s,t;\nint dis[maxn],dis1[maxn],vis[maxn],vis1[maxn],bj[maxn];\n\nstruct cmp{\n\tbool operator()(int a,int b){\n\t\treturn dis[a]>dis[b];\n\t}\n};\nstruct cmp1{\n\tbool operator()(int a,int b){\n\t\treturn dis1[a]>dis1[b];\n\t}\n};\npriority_queue<int,vector<int>,cmp> q;//\u4e24\u4e2a\u961f\u5217\u5806\u4f18\u5316\uff01\npriority_queue<int,vector<int>,cmp1> q1;//\u6709\u65e01\u8981\u770b\u6e05\n\nvoid addedge(int u,int v){\n\tedge[++cnt].v=v;\n\tedge[cnt].next=head[u];\n\thead[u]=cnt;\n}\n\nvoid addedge1(int u,int v){\n\tedge1[++cnt1].v=v;\n\tedge1[cnt1].next=head1[u];\n\thead1[u]=cnt1;\n}\n\nvoid spfa1(){\n\tmemset(dis1,0x3f,sizeof(dis1));\n\tq1.push(t);\n\tdis1[t]=0;\n\tvis1[t]=1;\n\twhile(!q1.empty()){\n\t\tint u=q1.top();\n\t\tq1.pop();\n\t\tvis[u]=0;\n\t\tfor(int i=head1[u];i;i=edge1[i].next){\n\t\t\tint v=edge1[i].v;\n\t\t\tif(dis1[v]>dis1[u]+1){\n\t\t\t\tdis1[v]=dis1[u]+1;\n\t\t\t\tif(!vis1[v]){\n\t\t\t\t\tq1.push(v);\n\t\t\t\t\tvis1[v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\tif(dis1[i]==1061109567){//1061109567\u662f\u624b\u52a8\u590d\u5236memset\u51fa\u6765\u7684\u503c\uff01\uff01\n\t        bj[i]=1;//\u5982\u679c\u4ece\u7ec8\u70b9\u5230\u4e0d\u4e86\u5c31\u628a\u8fd9\u4e2a\u70b9\u6807\u8bb0\uff0c\u6b63\u5411\u8dd1spfa\n\t\t        //\u65f6\u4e0d\u53ef\u7528\n        //\u518d\u628a\u8fd9\u4e2a\u70b9\u4e4b\u524d\u9664\u4e86\u8d77\u5916\u7684\u70b9\u90fd\u6807\u8bb0\uff08\u524d\u9762\u89e3\u91ca\u7684\u5f88\u6e05\u695a\u4e86\uff09\n        for(int j=head1[i];j;j=edge1[j].next)\n     \tif(edge1[j].v!=s) bj[edge1[j].v]=1;\n\t}\n}\n\nvoid spfa(){//\u6b63\u5411spfa\n\tmemset(dis,0x3f,sizeof(dis));\n\tq.push(s);\n\tdis[s]=0;\n\tvis[s]=1;\n\twhile(!q.empty()){\n\t\tint u=q.top();\n\t\tq.pop();\n\t\tvis[u]=0;\n\t\tfor(int i=head[u];i;i=edge[i].next){\n\t\t\tint v=edge[i].v;\n\t\t\tif(bj[v]==1) continue;\n\t\t\tif(dis[v]>dis[u]+1){\n\t\t\t\tdis[v]=dis[u]+1;\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tint a,b;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&a,&b);\n\t\taddedge(a,b);//\u524d\u5411\u661f\u5efa\u56fe\uff0c\u6b63\u53cd\u4e24\u904d\n\t\taddedge1(b,a);\n\t}\n\tscanf(\"%d%d\",&s,&t);\n \tspfa1();//\u53cd\u5411\u8dd1\u4e00\u8fb9\u5220\u70b9\n\t//for(int i=1;i<=n;i++)\n\t//cout<<bj[i]<<endl;\n\tif(bj[s]==1) cout<<\"-1\";//\u5982\u679c\u6839\u672c\u5230\u4e0d\u4e86\u8d77\u70b9\uff0c\u8f93\u51fa-1\n \telse{//\u53ef\u4ee5\u5230\u7684\u8bdd\u5c31\u8dd1\u4e00\u904dspfa \n\t\tspfa();\n\t\tcout<<dis[t]<<endl;//\u8f93\u51fa\u6700\u77ed\u8ddd\u79bb\n\t} \n\tI like guanliyuan//\u90b9\u8001\u677f\u5fae\u64cd\n} \n```",
        "postTime": 1570188421,
        "uid": 119279,
        "name": "LitShone",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u662f\u4e00\u4e2a\u56fe\u8bba\u9898\n\u5bf9\u4e8e\u9898\u76ee\u7684\u4e24\u4e2a\u8981\u6c42\u6211\u4eec\u53ef\u4ee5\u505a\u5982\u4e0b\u5206\u6790\uff1a\n\n## \u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u3002\n\n\u8fd9\u53e5\u8bdd\u89c2\u5bdf\u6837\u4f8b\u89e3\u91ca\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u9650\u5236\u7684\u5b9e\u8d28\u5c31\u662f\uff1a\u5220\u9664\u4e0d\u4e0e\u7ec8\u70b9\u8fde\u901a\u7684\u70b9\uff0c\u4ee5\u53ca\u4e0e\u4ed6\u4eec\u8fde\u4e00\u6761\u8fb9\u7684\u70b9\u3002\n\n\n\u5176\u4e2d\uff0c\u5220\u9664\u70b9\u548c\u4e0e\u5b83\u8fde\u4e00\u6761\u8fb9\u7684\u70b9 \u8fd9\u4e2a\u64cd\u4f5c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6253\u6807\u8bb0\u5b9e\u73b0\uff0c\u5728\u904d\u5386\u56fe\uff08\u6211\u7528\u7684\u90bb\u63a5\u8868\uff09\u7684\u65f6\u5019\u9047\u5230\u6ca1\u6253\u6807\u8bb0\u7684\u70b9\u5c31\u8df3\u8fc7\u5373\u53ef\u3002\n\n\u5220\u9664\u4e0d\u4e0e\u7ec8\u70b9\u8fde\u901a\u7684\u70b9\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5012\u7740\u4ece\u7ec8\u70b9\u51fa\u53d1\uff0c\u628a\u56fe\u641c\u5b8c\u90fd\u5230\u4e0d\u4e86\u7684\u70b9\u3002\u5012\u7740\u4ece\u7ec8\u70b9\u51fa\u53d1\u53ef\u4ee5\u76f4\u63a5\u53cd\u5411\u5efa\u56fe\uff0c\u66b4\u529b\u641c\u7d22\uff0c\u7ed9\u641c\u7d22\u5230\u7684\u70b9\u6253\u4e0a\u6807\u8bb0\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6ca1\u641c\u5230\u7684\u70b9\uff0c\u5982\u4f55\u5220\u53bb\u4ed6\u4eec\u8fde\u8fb9\u7684\u70b9\u5462\uff1f\u4f9d\u7136\u7528\u66b4\u529b\u7684\u60f3\u6cd5\uff0c\u679a\u4e3e\u6240\u6709\u6ca1\u6253\u6807\u8bb0\u7684\u70b9\uff0c\u679a\u4e3e\u4ed6\u4eec\u7684\u8fde\u8fb9\u6d88\u53bb\u4ed6\u4eec\u7684\u6807\u8bb0\u4e0d\u5c31\u597d\u4e86\u5417\uff1f\n\n\u6240\u4ee5\uff0c\u7b2c\u4e00\u4e2a\u8981\u6c42\u4fbf\u5206\u6790\u5b8c\u6bd5\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u7ec6\u8282\u8981\u6ce8\u610f\uff1a\n\n\u4e0d\u80fd\u76f4\u63a5\u6d88\u53bb\u7b2c\u4e00\u6b21\u6253\u4e0a\u7684\u6807\u8bb0\uff01\n\u4f60\u5728\u7b2c\u4e8c\u6b21\u5220\u9664\u6807\u8bb0\u65f6\u662f\u53ef\u80fd\u6709\u540e\u6548\u6027\u7684\uff0c\u5373\u5220\u53bb\u4e00\u4e2a\u4e0e\u4e0d\u4e0e\u7ec8\u70b9\u8fde\u63a5\u7684\u70b9\u540e\uff0c\u4e0b\u4e00\u6b21\u641c\u5230\u90a3\u4e2a\u70b9\u4ed6\u8fd8\u4f1a\u505a\u4e00\u904d\u5220\u9664\u64cd\u4f5c\uff0c\u5373\u628a\u76f8\u9694\u4e24\u6761\u8fb9\u7684\u70b9\u7ed9\u53bb\u6389\u4e86\uff0c\u4e0e\u9898\u4e0d\u7b26\uff01\uff01\n\n\u4e8e\u662f\u91cd\u65b0\u5907\u4efd\u4e00\u4e0b\u6807\u8bb0\uff0c\u7528\u90a3\u4e2a\u5907\u4efd\u6807\u8bb0\u5224\u65ad\u5373\u53ef\u3002\n\n##   \u5728\u6ee1\u8db3\u6761\u4ef61\u7684\u60c5\u51b5\u4e0b\u4f7f\u8def\u5f84\u6700\u77ed\u3002#### \n\n\u8fd9\u4e2a\u5f88\u597d\u7406\u89e3\uff0c\u8df3\u8fc7\u6ca1\u6709\u6807\u8bb0\u7684\u70b9\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\u5373\u53ef\u3002\u56e0\u4e3a\u4f60\u4e00\u5f00\u59cb\u5b58\u8fb9\u662f\u5012\u7740\u5b58\u7684\uff0c\u5176\u5b9e\u4f60\u4e0d\u5fc5\u91cd\u65b0\u5b58\u4e00\u904d\uff0c\u76f4\u63a5\u4ece\u7ec8\u70b9\u51fa\u53d1\uff0c\u627e\u5230\u8d77\u70b9\u7684\u6700\u77ed\u8def\u5373\u53ef\u3002\u4e24\u8005\u5e94\u8be5\u662f\u7b49\u4ef7\u7684\u3002\n\n\u4e8e\u662f\u5c31\u7ed3\u675f\u4e86\u3002\n\n\n```c\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\n#include<cctype>\nusing namespace std;\nconst int maxa = 300001;\nconst int maxm = 20001;\nconst int inf = 0x3f3f3f;\nstruct edge{\n\tint to,next;\n}e[maxa];\ninline int read(){\n    int X=0,w=0; char ch=0;\n    while(!isdigit(ch)) {w|=ch=='-';ch=getchar();}\n    while(isdigit(ch)) X=(X<<3)+(X<<1)+(ch^48),ch=getchar();\n    return w?-X:X;\n} \nint n,m,s,t,x,y;\nint dis[maxm],head[maxa];\nbool vis[maxm],ok[maxm];\nint cnt=0;\nvoid add(int u,int v){\n\te[++cnt].next=head[u];\n\te[cnt].to=v;\n\thead[u]=cnt;\n}\nvoid spfa(int w){\n\tqueue<int>q;\n\tmemset(vis,0,sizeof(vis));\n\tmemset(dis,inf,sizeof(dis));\n\tq.push(w);\n\tdis[w]=0;\n\tvis[w]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvis[u]=0;\n\t\tfor(int i=head[u];i;i=e[i].next){\n\t\t\tint v=e[i].to;\n\t\t\tint z=1;\n\t\t\tif(dis[v]>dis[u]+z&&ok[v]){\n\t\t\t\tdis[v]=dis[u]+1;\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid bfs(int t){\n\tqueue<int>q;\n\tmemset(vis,0,sizeof(vis));\n\tq.push(t);\n\tok[t]=vis[t]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u];i;i=e[i].next)\n\t\t    if(!vis[e[i].to]){\n\t\t    \tvis[e[i].to]=1;\n\t\t    \tok[e[i].to]=1;\n\t\t    \tq.push(e[i].to);\n\t\t\t}\n\t}\n}\nint main(){\n\tn=read();m=read();\n\tfor(int i=1;i<=m;i++){\n\t\tx=read();y=read();\n\t\tadd(y,x);\n\t}\n\ts=read();t=read();\n\tbfs(t);\n\tfor(int i=1;i<=n;i++){\n\t\tvis[i]=ok[i];\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(!vis[i]){\n\t\t\tfor(int j=head[i];j;j=e[j].next){\n\t\t\t\tint u=e[j].to;\n\t\t\t\tif(ok[u])\n\t\t\t\tok[u]=0;\n\t\t\t}\n\t\t}\n\t}\n\tspfa(t);\n\tif(dis[s]<=inf)cout<<dis[s]<<endl;\n\telse cout<<-1<<endl;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1535445109,
        "uid": 55050,
        "name": "\u6700\u559c\u6b22saber\u4e86",
        "ccfLevel": 0,
        "title": "P2296\u5bfb\u627e\u9053\u8def"
    },
    {
        "content": "# **\u6211\u770b\u5f88\u591a\u5927\u4f6c\u90fd\u7528\u7684\u662fbfs\uff0c\u6211\u4eca\u5929\u6765\u53d1\u4e00\u7bc7dfs\u7684\u9898\u89e3\u3002**\n\n------------\n~~\u4f5c\u4e3a\u4e00\u540d\u7701\u961f\u6c34\u5e73\u9009\u624b\u6211\u7adf\u7136\u4e0d\u4f1abfs~~\n## \u4f46\u662f\u5f88\u663e\u7136\u8fd9\u9053\u9898dfs\u66f4\u597d\u7406\u89e3\uff08\u81ea\u5356\u81ea\u5938\uff09\n\u5f88\u663e\u7136\u8fd9\u9053\u9898\u4e2d\u4e0d\u662f\u6240\u6709\u7684\u8fb9\u90fd\u80fd\u8dd1\u7684\uff0c\u6240\u4ee5\u627e\u5230\u90a3\u4e9b\u8fb9\u53ef\u4ee5\u8d70\u624d\u662f\u8fd9\u9053\u9898\u7684\u5173\u952e\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u4e00\u4e2a\u6700\u77ed\u8def\u7684\u677f\u4e86\uff0c\u90a3\u4e48\u600e\u4e48\u627e\u5462\uff1f\n\n\u9996\u5148\u6211\u4eec\u5728\u5efa\u6b63\u56fe\u7684\u65f6\u5019\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\uff0c\u7136\u540e\u5728\u5efa\u53cd\u56fe\u3002\n\u6211\u4eec\u7528\u4e00\u4e2acnt[]\u6570\u7ec4\u6765\u5b58\u5728\u8dd1\u53cd\u56fe\u7684\u65f6\u5019\u6bcf\u4e2a\u70b9\u80fd\u5230\u8fbe\u7684\u6b21\u6570\uff0c\u800c\u4e14\u8fd8\u8981\u7528\u4e00\u4e2avis[]\u6570\u7ec4\u6765\u6807\u8bb0\u6bcf\u4e2a\u70b9\u53ea\u80fd\u8dd1\u4e00\u6b21\u3002\n\n\u5f88\u663e\u7136\u6211\u4eec\u5728\u8dd1\u5b8cdfs\u540e\u4e00\u4e2afor\u5faa\u73af\u904d\u5386\u6bcf\u4e2a\u70b9\u770b\u4ed6\u7684cnt[]\u503c\u662f\u4e0d\u662f\u5927\u4e8e\u7b49\u4e8e\u4ed6\u7684\u51fa\u5ea6\uff0c\u5982\u679c\u662f\u8fd9\u4e2a\u70b9\u5c31\u53ef\u4ee5\u8dd1\uff0c\u53cd\u4e4b\u5c31\u4e0d\u884c\u3002\n\n\u5269\u4e0b\u7684\u5c31\u662f\u4e00\u4e2adij\u7684\u677f\u4e86\n\n\u8bdd\u4e0d\u591a\u8bf4\u76f4\u63a5\u4e0a\u4ee3\u7801\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\nusing namespace std;\npriority_queue<pair<int ,int> > p;\nstruct node {\n    int f,t,nex;\n}rt[200010],rt1[200010];\nint head[200010];\nint cnt;\nint head1[200010];\nint cnt1;\nint vis[200010];\nint qaq[200010];\nint chudu[200010];\nint vis1[200010];\nint val[200010];\nvoid add(int x,int y) {\n    cnt ++;\n    rt[cnt].f = x;\n    rt[cnt].t = y;\n    rt[cnt].nex = head[x];\n    head[x] = cnt;\n}\nvoid add1(int x,int y) {\n    cnt1 ++;\n    rt1[cnt1].f = x;\n    rt1[cnt1].t = y;\n    rt1[cnt1].nex = head1[x];\n    head1[x] = cnt1;\n}\nvoid dfs(int x) {\n    if(!vis[x]) {\n        vis[x] = 1;\n        qaq[x] ++;\n        for (int i = head1[x]; i  ; i = rt1[i].nex) {\n            dfs(rt1[i].t);\n        }\n    }\n    else {\n        qaq[x] ++;\n    }\n}\nint main() {\n    int a,b;\n    cin>>a>>b;\n    for (int i = 1; i <= b; ++i) {\n        int x,y;\n        cin>>x>>y;\n        chudu[x] ++;\n        add(x,y);\n        add1(y,x);\n    }\n    int f,t;\n    cin>>f>>t;\n    dfs(t);\n    memset(val,0x7f, sizeof(val));\n    val[f] = 0;\n    p.push(make_pair(0,f));\n    for (int j = 1; j <= a; ++j) {\n        if(chudu[j] <= qaq[j]) {\n            vis1[j] = 1;\n        }\n    }\n    while (!p.empty()) {\n        int faq = p.top().second;\n        p.pop();\n        for (int i = head[faq]; i  ; i = rt[i].nex) {\n            if(vis1[rt[i].t]) {\n                if(val[rt[i].t] > val[faq] + 1) {\n                    val[rt[i].t] = val[faq] + 1;\n                    p.push(make_pair(-val[rt[i].t],rt[i].t));\n                }\n            }\n        }\n    }\n    if(val[t] == 0x7f7f7f7f) {\n        cout<<-1;\n    }\n    else {\n        cout<<val[t];\n    }\n    return 0;\n}\n```\n\n\n",
        "postTime": 1570069589,
        "uid": 128066,
        "name": "\u7acb\u5fd7\u6210\u5201\u6c11",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "## \u9898\u610f\u5206\u6790\n\n- \u7ed9\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u7684\u8fde\u8fb9\u957f\u5ea6\u90fd\u662f1\u3002\n- \u518d\u7ed9\u51fa\u8d77\u70b9\u3001\u7ec8\u70b9\uff0c\u8ba9\u60a8\u627e\u51fa\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u4f46\u8fd9\u4e2a\u6700\u77ed\u8def\u5f84\u5fc5\u987b\u6ee1\u8db3\uff1a\u4f60\u627e\u7684\u90a3\u4e2a\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\uff0c**\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u8fde\u63a5\u7684\u70b9\u90fd\u8981\u201c\u80fd\u53bb\u7ec8\u70b9\u201d**\uff0c\u4e0d\u7136\u5c31\u4e0d\u6761\u4ef6\u3002\n- \u6211\u4eec\u5c31\u62ff\u6837\u4f8b\u8fd9\u4e2a\u56fe\u6765\u5206\u6790\u4e00\u4e0b\uff0c\n- ![](https://cdn.luogu.com.cn/upload/pic/1351.png)\uff0c\u5728\u8fd9\u91cc\uff0c2\u662f\u4e0d\u80fd\u9009\u5728\u8def\u5f84\u91cc\u9762\u7684\uff0c\u56e0\u4e3a 2\u6240\u6709\u8fde\u63a5\u7684\u70b9 \u6709 5 \u548c 6\uff0c\u800c6\u662f\u4e0d\u80fd\u53bb\u7ec8\u70b95\u7684\u3002\n- \u65452\u4e0d\u80fd\u88ab\u9009\u53bb\u8def\u5f84\u91cc\u9762\u3002\n\n## \u89e3\u9898\u601d\u8def\n\n- [\u8003\u573a\u601d\u8def\uff0c\u975e\u6700\u7b80\u89e3\u6cd5]\u3002\u770b\u5230\u9898\u9762\u91cc\u9762\u5df2\u7ecf\u8bf4\u4e86\u201c\u6700\u77ed\u8ddd\u79bb\u201d\uff0c\u5916\u52a0\u8fd9\u91cc\u5df2\u7ecf\u662f\u5355\u4e2a\u8d77\u70b9\uff0c\u9a6c\u4e0a\u60f3\u5230\u4e86\u201c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u201d\u3002\n- \u518d\u770b\u70b9\u7684\u4e2a\u6570$\\leq 10000$\uff0c\u5e94\u8be5\u4e0d\u4f1a\u8d85\u8fc7\u201c\u5355\u6e90\u6700\u77ed\u8def\u5f84\u201d\u6240\u80fd\u5904\u7406\u7684\u6570\u636e\u89c4\u6a21\u3002\n- \u4e8e\u662f\uff0c\u6211\u7684\u89e3\u9898\u601d\u8def\u5c31\u662f\uff1a\u201c\u5806\u4f18Dij\u201d\u3002\n\n\n\n- \u4f46\u662f\u8fd9\u91cc\u8def\u5f84\u662f\u7279\u6b8a\u7684\uff0c**\u6211\u4eec\u4e0d\u80fd\u628a\u90a3\u4e9b\u4e0d\u5408\u6cd5\u7684\u70b9\u62c9\u8fdb\u53bb**\u3002\u4e8e\u662f\u6211\u51b3\u5b9a\u5f00\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4BlackList\uff0c\u7528\u6765\u8bb0\u5f55\u54ea\u4e9b\u70b9\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u8fd9\u4e9b\u70b9\u662f\u7edd\u5bf9\u4e0d\u80fd\u62c9\u8fdb\u8def\u5f84\u91cc\u9762\u7684\u3002\n\n### Prob.1 \u5224\u65ad\u4e0d\u5408\u6cd5\n\n- \u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u4e0d\u5408\u6cd5\uff0c\u5219\n  - \u8fd9\u4e2a\u70b9\u6ca1\u6709\u51fa\u5ea6\u3002\uff086\u6ca1\u6709\u51fa\u5ea6\uff0c6\u5f88\u663e\u7136\u4e0d\u80fd\u88ab\u52a0\u5230\u8def\u5f84\u91cc\u9762\u7684\u3002\uff09\n  - \u8fd9\u4e2a\u70b9\u4e0d\u662f\u7ec8\u70b9\u3002\uff085\u6ca1\u6709\u51fa\u5ea6\uff0c\u4f46\u662f5\u4e0d\u662f\u4e0d\u5408\u6cd5\u3002\uff09\n- \u90a3\u4e00\u5f00\u59cb\u6211\u4eec\u8bfb\u5165\u5b8c\u4e4b\u540e\uff0c\u5c31\u9700\u8981\u628a\u8fd9\u4e9b\u4e2a\u4e0d\u5408\u6cd5\u7684\u70b9 \u62c9\u8fdb BlackList\uff0c\u7136\u540e\u518d\u8fdb\u884c\u201c\u5220\u70b9\u201d\u540e\u7684 \u5806\u4f18 Dijkstra\u3002\n- \u8fd9\u91cc\u4e3a\u4e86\u5b58\u50a8\u4e00\u4e2a\u70b9\u7684\u7236\u4eb2\u90fd\u662f\u4e9b\u8c01\uff0c\u6211\u4eec\u5c31\u9700\u8981\u53cd\u5411\u5b58\u8fb9\u4e86\u3002\n- \u6bd4\u59821\u8fde\u63a5\u52302\uff0c\u6211\u4eec\u8981\u8bb0\u5f552\u7684\u7236\u4eb2\u6709\u4e00\u4e2a\u662f1\uff08`G[2].push_back(1);`\uff09\n\n- \u7136\u540e\u76f4\u63a5\u4ece1\u5230n\uff0cfor\u5faa\u73af\u5224\u65ad\u8fd9\u4e9b\u70b9\u662f\u5426**\u65e0\u51fa\u5ea6 && \u975e\u7ec8\u70b9**\uff0c\u5982\u679c\u662f\uff0c\u5219**i\u548ci\u7684\u6240\u6709\u7236\u4eb2(G[i]\u6240\u6709)**\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u62c9\u5165\u9ed1\u540d\u5355\u3002\n\n- \u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u7684\u65f6\u5019\uff0c\u5224\u65ad\u4e00\u4e2a\u70b9i\u662f\u5426\u51fa\u5ea6\u4e3a0\uff0c\u53ea\u9700\u8981\u5224\u65adfront[i]\u662f\u5426\u4e3a\u4f60\u8d4b\u7684\u521d\u59cb\u503c\uff08\u4e00\u822c\u662f-1\uff09\u3002**\u5982\u679cfront\u53c8-1\uff0c\u8fd9\u4e2a\u70b9\u53c8\u4e0d\u662f\u7ec8\u70b9\uff0c\u90a3\u4e48\u76f4\u63a5\u5224\u65ad\u8fd9\u4e2a\u70b9\u53ca\u5176\u6240\u6709\u7236\u4eb2\u662f\u4e0d\u5408\u6cd5\u7684**\u3002\n\n- \u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\uff0c\u5e76\u7528`vector<int> G[i]`\u5b58\u50a8i\u7684\u6240\u6709\u7236\u4eb2\u8282\u70b9\u7f16\u53f7\u7684\u201c\u5224\u65ad\u4e0d\u5408\u6cd5\u201d\u4ee3\u7801\u6bb5\u5982\u4e0b\uff1a\n\n- ```cpp\n  for(int i=1;i<=n;i++)\n  {\n      if(front[i]==-1&&i!=End)\t//\u65e2\u51fa\u5ea6\u4e3a0\uff0c\u53c8\u4e0d\u662f\u7ec8\u70b9\n      {\n          BlackList[i]=true;\t//\u81ea\u8eab\u62c9\u8fdb\u9ed1\u540d\u5355\n          for(int j=0;j<G[i].size();j++)\n              BlackList[G[i][j]]=true;\t//\u53ca\u5176\u7236\u4eb2\u88ab\u62c9\u8fdb\u9ed1\u540d\u5355\n      }\n  }\n  ```\n\n### Prob.2 \u5806\u4f18Dij\n\n- \u73b0\u5728\u5c31\u662f\u8981\u505a**\u4ee5\u8d77\u70b9\u4e3a\u6e90\u70b9\uff0c\u5230\u7ec8\u70b9\uff08\u4f46\u4e0d\u80fd\u53bb\u4e0d\u5408\u6cd5\u7684\u70b9\uff09**\u7684\u6700\u77ed\u8def\u5f84\u3002\n\n- \u6ca1\u95ee\u9898\u7684\u8bdd\uff0c\u90a3\u6211\u4eec\u76f4\u63a5\u4e0a\u5806\u4f18Dij\u5c31\u884c\u4e86\u3002\u5982\u679c\u4e0d\u61c2\u5806\u4f18Dij\uff0c\u5806\u4f18Dij\u7684\u88f8\u9898\u5c31\u662fP4779\u53ef\u4ee5\u505a\u505a~\u3002\n\n- \u4e0b\u9762\u5c31\u662f\u5806\u4f18Dij\u7684\u4e3b\u4f53\u4ee3\u7801\uff0c\n\n- ```cpp\n  while(!Q.empty())\n  {\n      HeapNode x=Q.top();\n      int u=x.u;\n  \n      if(x.d>dis[u])\n          continue;\n  \n      Q.pop();\n      for(int i=front[u];i!=-1;i=E[i].nxt)//\u904d\u5386\u5f53\u524d\u70b9\u6240\u6709\u8fde\u63a5\u7684\u70b9\n          if(!BlackList[E[i].to])\t\t\t//\u9ed1\u540d\u5355\u7684\u9650\u5236\n          {\n              int v=E[i].to;\n              if(dis[u]+1<dis[v])\n              {\n                  dis[v]=dis[u]+1;\n                  Q.push((HeapNode){v,dis[v]});\n              }\n          }\n  }\n  ```\n\n- \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u5806\u4f18Dij\u548c\u666e\u901a\u7684\u5806\u4f18Dij\u7684\u533a\u522b\u5c31\u662f\u8fd9\u4e2a**\u5728\u904d\u5386\u5f53\u524d\u70b9\u6240\u6709\u8fde\u63a5\u7684\u70b9**\u7684\u65f6\u5019\uff0c**\u52a0\u5165\u4e86\u9ed1\u540d\u5355\u7684\u9650\u5236**\uff08\u5373\u52a0\u5165\u4e86BlackList\u7684\u70b9\u4e0d\u53ef\u4ee5\u88ab\u904d\u5386\u5230\uff09\n\n- \u8fb9\u957f\u4e3a1\u3002\u5c31\u8fd9\u6837\uff0c\u6211\u4eec\u5220\u9664\u4e0d\u5408\u6cd5\u7684\u70b9\u4e4b\u540e\uff0c\u53ef\u4ee5\u5f00\u59cb\u5806\u4f18Dij\u4e86\u3002\u6700\u540e\u8f93\u51fadis[\u7ec8\u70b9]\u5c31\u53ef\u3002\n\n## \u53c2\u8003\u7a0b\u5e8f\n\n```cpp\n#include<queue>\n#include<vector>\n#include<stdio.h>\nusing namespace std;\n\nint n,m,x,y,Start,End,cnt;\n\nint front[10005];\nstruct OneEdge\n{\n\tint to,nxt;\n} E[200005];\ninline void add(int x,int y)\n{\n\tcnt++;\n\tE[cnt].to=y;\n\tE[cnt].nxt=front[x];\n\tfront[x]=cnt;\n}\t\t\t\t\t\t//\u94fe\u5f0f\u524d\u5411\u661f\u5efa\u8fb9\uff0c\u8fb9\u957f\u90fd\u4e3a1\u8fd9\u91cc\u4e0d\u8bb0\u5f55\u8fb9\u957f\u4e86\u3002\n\nbool BlackList[10005];\t//\u9ed1\u540d\u5355\u7684\u9650\u5236\n\nvector<int> G[10005];\n\nint dis[10005];\n\n//\u5806\u4f18dij\u2193\nstruct HeapNode\n{\n\tint u,d;\n};\nbool operator <(const HeapNode& now,const HeapNode& rhs)\n{\n\treturn now.d>rhs.d;\n}\npriority_queue<HeapNode> Q;\n \nvoid Dijkstra()\n{\n\tfor(int i=1;i<=n;i++)\n\t\tdis[i]=987654321;\n\tdis[Start]=0;\n\t\n\tint u,d;\n\tQ.push((HeapNode){Start,0});\n\twhile(!Q.empty())\n\t\t{\n\t\t\tHeapNode x=Q.top();\n\t\t\tint u=x.u;\n\t\t\t\n\t\t\tif(x.d>dis[u])\n\t\t\t\tcontinue;\n\t\t\t\t \n\t\t\tQ.pop();\n\t\t\t//\u62c9\u51fa\uff0c\u540e\u904d\u5386\u6240\u6709\u8fde\u8fb9\n\t\t\tfor(int i=front[u];i!=-1;i=E[i].nxt)\n\t\t\t\t if(!BlackList[E[i].to])\n\t\t\t\t \t{\n\t\t\t\t \t\tint v=E[i].to;\n\t\t\t\t \t\tif(dis[u]+1<dis[v])\n\t\t\t\t \t\t\t{\n\t\t\t\t \t\t\t\tdis[v]=dis[u]+1;\n\t\t\t\t \t\t\t\tQ.push((HeapNode){v,dis[v]});\n\t\t\t\t \t\t\t}\n\t\t\t\t \t}\n\t\t}\n\t\t\n}\n//\u5806\u4f18Dij\u2191\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tfront[i]=-1;\n\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tadd(x,y);\n\t\t\tG[y].push_back(x);\n\t\t}\n\tscanf(\"%d%d\",&Start,&End);\n\t\n\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tif(front[i]==-1&&i!=End)\n\t\t\t\t{\n\t\t\t\t\tBlackList[i]=true;\n\t\t\t\t\tfor(int j=0;j<G[i].size();j++)\n\t\t\t\t\t\tBlackList[G[i][j]]=true;\n\t\t\t\t}\n\t\t}\n\t\n\tDijkstra();\n\tprintf(\"%d\",dis[End]==987654321?-1:dis[End]);\n\treturn 0;\n}\n\n```\n\n- G\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2 \u90fd\u662f\u4e9b\u54ea\u4e9b\u70b9\u3002\n- \u4f7f\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5efa\u56fe\uff08\u6bcf\u6761\u8fb9\u4e2d\u90fd\u6709\u4e00\u4e2anxt\uff09\u3002\n\n## \u89e3\u9898\u53cd\u601d\n\n- \u6ca1\u6709\u60f3\u5230\u7b80\u5355\u89e3\u51b3\u65b9\u6cd5\uff0c\u4e0b\u6b21\u8981\u4e00\u4e0b\u628a\u6700\u4f18\u89e3\u627e\u5230\u5c31\u597d\u4e86",
        "postTime": 1572166056,
        "uid": 30391,
        "name": "milk_candy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u672c\u849f\u84bb\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u8c22\u8c22\u8d44\u74f7\uff0c\u5728\u4e8e\u70b9\u660e\u505a\u9898\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u5404\u79cd\u5751\u548c\u89e3\u9898\u601d\u8def\n\n\u8fd9\u9053\u9898\u5927\u5bb6\u5e94\u8be5\u90fd\u77e5\u9053\uff0c\u9884\u5904\u7406\u4e00\u4e0b\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\u5c31\u884c\u4e86\u3002\u90a3\u4e48\u91cd\u70b9\u5c31\u662f\u9884\u5904\u7406\u4e86\u3002\u521a\u5f00\u59cb\u60f3\u7740\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u4e00\u4e2a\u70b9\u548c\u7ec8\u70b9\u8054\u4e0d\u8054\u901a\u2026\u2026 \u8fd8\u9ad8\u5174\u4e86\u4e00\u4e0b\u672c\u849f\u84bb\u7adf\u7136~~\u4f1a\u505a~~\u3002\u679c\u7136\u662f\u6211\u592a\u5ae9\u4e86\uff01\uff01\uff01\n\n\u60f3\u4e86\u4e00\u4e0b\uff0c\u7528\u5e76\u67e5\u96c6\u597d\u50cf\u53ea\u80fd\u7ef4\u62a4\u65e0\u5411\u8fb9\uff0c\u55ef\u2026\u2026\uff08\u8fd9\u662f\u4e2a\u6709\u5411\u56fe\uff09\u3002\u90a3\u4e48\u672c\u849f\u84bb\u5f00\u59cb\u60f3\u5176\u4ed6\u505a\u6cd5\u4e86\n\n#### \u8fd9\u4e0d\u662f\u53ef\u4ee5\u53cd\u5411\u5efa\u56fe\u7136\u540e\u4ece\u7ec8\u70b9\u8dd1\u4e00\u904ddfs\u7528\u4e00\u4e2a\u6570\u7ec4 ju[ ] \u6807\u8bb0\u4e00\u4e0b\u548c\u4e0d\u548c\u7ec8\u70b9\u8054\u901a\u5417\uff1f\u5148\u628a ju[ ] \u521d\u59cb\u5316\u4e3a 0,\u5982\u679c\u88ab\u904d\u5386\u5230\u5c31\u8bb0\u5f55\u4e3a 1\n\n\u7136\u540e\u6211\u5feb\u4e50\u5730\u8fc7\u4e86\u6837\u4f8b\uff0c\u51c6\u5907\u4ea4\u4e0a\u53bb\u4e4b\u540e\n![](https://cdn.luogu.com.cn/upload/image_hosting/58e2it4h.png)\n\u6211\u679c\u7136\u8fd8\u662f\u592a\u5ae9\u4e86\uff08\u9b3c\u77e5\u9053\u600e\u4e48\u8fc7\u7684\u6837\u4f8b\uff09\u3002\u55ef\u2026\u2026\u849f\u84bb\u53c8\u5f00\u59cb~~\u601d\u8003~~\u4e86\u3002\u518d\u770b\u4e86\u4e00\u4e0b\u9898\u76ee\u53d1\u73b0\n\n#### \u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u3002\n\u8ba4\u771f\u8bfb\u9898\u771f\u7684\u5f88\u91cd\u8981\uff01\uff01\uff01 \u6240\u4ee5\u8dd1\u5b8c\u53cd\u5411\u5efa\u56fe\u7684dfs\u6253\u5b8c\u6807\u8bb0\uff0c\u6211\u4eec\u8fd8\u8981\u5e72\u4e00\u4ef6\u4e8b\uff1a\n###  \u904d\u5386\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u6709\u88ab\u6253\u6807\u8bb0\uff0c\u90a3\u4e48\u6240\u6709\u53cd\u5411\u5efa\u56fe\u540e\u8be5\u70b9\u80fd\u5230\u8fbe\u7684\u70b9\u90fd\u4e0d\u80fd\u8d70\uff0c\u7ed9\u8fd9\u4e9b\u70b9\u6253\u4e0a\u6807\u8bb0\uff01\uff01\uff01\n\n\u4e5f\u5c31\u662f\u628a ju[ ] \u6570\u7ec4\u4e3a 0 \u7684\u70b9\u904d\u5386\u4e00\u904d\uff0c\u7136\u540e\u6807\u8bb0\u4e3a 0 \u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nfor(int i=1;i<=n;i++){\n\tif(ju[i] == 0)\n\t\tfor(int k = head2[i];k;k=edge2[k].next){\n\t\t\tif(ju[edge2[k].to]) ju[edge2[k].to] = 0;\t\n\t}\n}\n```\n\n\n\u6211\u672c\u6765\u4ee5\u4e3a\u8fd9\u6837\u5c31AC\u4e86\uff0c\u4ea4\u4e86\u4e0a\u53bb\uff0c\u55ef\u2026\u2026\u53c8WA\u4e86\u3002\u6211\u771f\u662f\u83dc\u5462\u3002\u518d\u6b21~~\u51b7\u9759\u5206\u6790~~\u4e86\u4e00\u6ce2\u540e\uff0c\u55ef\u2026\u2026\u53d1\u73b0\u95ee\u9898\u4e86\n\n\u6211\u4eec\u7528\u4e0b\u9762\u8fd9\u5f20\u56fe\u6765\u4e3e\u4f8b\uff08\u4e0b\u56fe\u672a\u53cd\u5411\u5efa\u8fb9\uff0c\u8d77\u70b9\u662f1\uff0c\u7ec8\u70b9\u662f7\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/uojlea8d.png)\n\n\u5728\u4e00\u904ddfs\u540e\uff0c\u53ea\u6709 ju[3] \u662f0\uff0c\u5982\u679c\u6211\u4eec\u8dd1\u4e86\u4e0a\u9762\u90a3\u4e2a\u4ee3\u7801\uff0c\u90a3\u4e48\u2026\u2026\n#### \u5148\u662f ju[4] \u8bbe\u6210\u4e860\uff0c\u7136\u540e\u56e0\u4e3a\u662f\u4ece 1 \u679a\u4e3e\u5230 n \u6240\u4ee5\u679a\u4e3e\u5230 4 \u7684\u65f6\u5019\uff0c\u4e5f\u4f1a\u628a ju[5] \u7ed9\u8bbe\u6210 0 \uff0c\u63a5\u7740\u4f1a\u628a ju[1] \u8bbe\u62100\u3002\n\u8fd9\u6837\u8dd1\u6700\u77ed\u8def\u7684\u8bdd\u4f1a\u51fa\u6765 4 \u4f46\u662f\u7b54\u6848\u5e94\u8be5\u662f 2\u3002\u8bf4\u5230\u8fd9\u5e94\u8be5\u660e\u767d\u4e86\u5427\uff0c\u6211\u4eec\u628a\u4e0d\u8be5\u6392\u9664\u7684\u70b9\u6392\u9664\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f00\u4e86\u4e2a kkk[ ] \u6570\u7ec4\u6765\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff08\u9003\u2026\u2026\n```cpp\nfor(int i=1;i<=n;i++){\n\tif(ju[i] == 0 && !kkk[i]){\n\t\tkkk[i] = 1;\t\t//\u6253\u4e0a\u6807\u8bb0 \n\t\tfor(int k = head2[i];k;k=edge2[k].next){\n\t\t\tif(ju[edge2[k].to]){\n\t\t\t\tkkk[edge2[k].to] = 1;\n\t\t\t\tju[edge2[k].to] = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\u57fa\u672c\u4e0a\u5c31\u662f\u8fd9\u6837\u4e86\uff0c\u4ee5\u4e0b\u662f\u5b8c\u6574AC\u4ee3\u7801\uff0c\u4e2a\u4eba\u89c9\u5f97\u8fd8\u662f\u597d\u8bfb\u7684\uff0c\u6211\u4e2a\u4eba\u559c\u6b22\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#define ll long long\n#define INF 0x3f3f3f3f\n\nusing namespace std;\nconst int MAXN = 1e4+100, MAXM = MAXN<<5;\n\n\t//\u94fe\u5f0f\u524d\u5411\u661f\nstruct edge{\n\tint next,to,val;\n}edge[MAXM],edge2[MAXM];\n\t\n\t//\u6b63\u5411\u5efa\u56fe \nll head[MAXN],tot;\nvoid addedge(int u,int v){\n\tedge[++tot].next = head[u];\n\tedge[tot].val = 1;\n\tedge[tot].to = v;\n\thead[u] = tot;\n}\n\t\n\t//\u53cd\u5411\u5efa\u56fe \nint head2[MAXN],tot2;\nvoid addedge2(int u,int v){\n\tedge2[++tot2].next = head2[u];\n\tedge2[tot2].to = v;\n\thead2[u] = tot2;\n}\n\t\n\t//\u5feb\u8bfb\ntemplate <class T>\ninline void read(T &a){\n\ta = 0; int f = 1;char t =getchar();\n\twhile(t<'0'||t>'9'){if(t=='-')f=-1;t=getchar();}\n\twhile(t>='0'&&t<='9'){a=(a<<1)+(a<<3)+(t^48);t=getchar();}\n\ta*=f;\n}\n\t \n\t//\u4ee5\u4e0b\u662fdijkstra\u5355\u6e90\u6700\u77ed\u8def \nll dis[MAXN],vis[MAXN],kkk[MAXN],ju[MAXN],st,ed,n,m,a1,a2;\n\nstruct node{\n\tint s,num;\n};\n\nbool operator <(const node &a,const node &b){\n\treturn a.s > b.s;\n}\n\npriority_queue<node> q;\n\ninline void dijkstra(int x){\n\tfor(int i = 1;i<MAXN;i++) dis[i] = INF;\n\tq.push((node){0,x});\n\tdis[x] = 0;\n\twhile(!q.empty()){\n\t\tint now = q.top().num;q.pop();\n\t\tif(vis[now]) continue;\n\t\tif(!ju[now]) continue;\n\t\t\t//\u8fd9\u4e00\u53e5\u4e00\u5b9a\u4e0d\u8981\u5fd8\uff0c \u4e0d\u7136\u767d\u5e72\u4e86 \n\t\tvis[now] = 1;\n\t\tfor(int i=head[now];i;i=edge[i].next){\n\t\t\tint p = edge[i].to;\n\t\t\tif(dis[p] > dis[now]+1){\n\t\t\t\tdis[p] = dis[now]+1;\n\t\t\t\tq.push((node){dis[p],p});\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\t//\u7528\u6765\u5bfb\u627e\u9898\u76ee\u4e2d\n\t//\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u3002 \ninline void dfs(int x){\n\tju[x] = 1;\n\tfor(int i=head2[x];i;i=edge2[i].next){\n\t\tif(!ju[edge2[i].to]) dfs(edge2[i].to);\n\t}\n}\n\t//\u7ee7\u7eed\u628adfs\u540e\u672a\u6253\u6807\u8bb0\u7684\u70b9\u6307\u5411\u7684\u70b9\u6807\u8bb0\u5220\u9664\n\t//\u4e5f\u5c31\u662f\u8bbe\u4e3a 0 \ninline void dele(){\n\tfor(int i=1;i<=n;i++){\n\t\t//\u904d\u5386\u6240\u6709\u70b9 \n\t\tif(ju[i] == 0 && !kkk[i]){\n\t\t\tkkk[i] = 1;\t\t//\u6253\u4e0a\u6807\u8bb0 \n\t\t\tfor(int k = head2[i];k;k=edge2[k].next){\n\t\t\t\tif(ju[edge2[k].to]){\n\t\t\t\t\tkkk[edge2[k].to] = 1;\n\t\t\t\t\tju[edge2[k].to] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tread(n);read(m);\n\tfor(int i=1;i<=m;i++){\n\t\tread(a1);read(a2);\n\t\tif(a1 == a2) continue;\n\t\t\t//\u6392\u9664\u81ea\u73af \n\t\taddedge(a1,a2);\n\t\taddedge2(a2,a1);\n\t}\n\tread(st);read(ed);\n\t\n\tdfs(ed);\n\t\n\tdele(); \n\t\n\tdijkstra(st);\n\t\n\tif(dis[ed] >=INF) printf(\"-1\");\n\telse printf(\"%d\",dis[ed]);\n\t\n\treturn 0;\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1570297001,
        "uid": 136064,
        "name": "jrhzf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://xiaohuang888.github.io/2019/08/22/%E3%80%8E%E9%A2%98%E8%A7%A3%E3%80%8F%E6%B4%9B%E8%B0%B7P2296%20%E5%AF%BB%E6%89%BE%E9%81%93%E8%B7%AF/)\n\n### Solution\n\n\u6211\u4eec\u5148\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\n\u4e0d\u59a8\u4ee4\u8d77\u70b9\u4e3a$1$\uff0c\u7ec8\u70b9\u4e3a$3$\u3002\n\n![](https://s2.ax1x.com/2019/08/22/mdORPg.png)\n\n\u8fd9\u4e2a\u4f8b\u5b50\u7684\u7b54\u6848\u662f$3$\uff0c\u8def\u5f84\u662f$1 \\to 4 \\to 5 \\to 3$\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u68c0\u9a8c\u51fa\u6bcf\u4e00\u4e2a\u70b9\u662f\u5426\u80fd\u5230\u7ec8\u70b9\u3002\u53ef\u4ee5\u4ece\u7ec8\u70b9\u51fa\u53d1\uff0c\u6309\u7167\u53cd\u5411\u8fb9\u8d70\u4e00\u904d\uff0c\u7136\u540e\u628a\u8d70\u4e0d\u5230\u7684\u70b9\u4ee5\u53ca\u5b83\u7684\u5165\u8fb9\u8fde\u7684\u70b9\u90fd\u5220\u9664\uff0c\u50cf\u8fd9\u6837\uff1a\n\n![](https://s2.ax1x.com/2019/08/22/mdzHC8.png)\n\n\u6700\u540e\u5728\u8dd1\u4e00\u8fb9$bfs$\u5e8f\uff0c\u6c42\u51fa\u6700\u77ed\u8def\u5c31\u53ef\u4ee5\u4e86\u3002\n\n### Code\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<queue>\n\nusing namespace std;\n\nconst int MAXN = 200005;\nstruct EDGE {\n    int to, nxt;\n} edge1[MAXN], edge2[MAXN];\nint n, m, u, v, S, T, cnt1, cnt2, dis[MAXN], head1[MAXN], head2[MAXN];\nbool vis[MAXN];\ninline void addedge(int u, int v) {//\u90bb\u63a5\u8868\u5b58\u56fe\n    edge1[++cnt1].to = v; edge1[cnt1].nxt = head1[u]; head1[u] = cnt1;\n    edge2[++cnt2].to = u; edge2[cnt2].nxt = head2[v]; head2[v] = cnt2;//\u53cd\u5411\u8fb9\n}\ninline void bfs1(int cur) {\n    queue<int> Q;\n    Q.push(cur);\n    vis[cur] = 1;\n    while (!Q.empty()) {\n        int u = Q.front();\n        Q.pop();\n        for (int i = head2[u]; ~i; i = edge2[i].nxt) {//\u904d\u5386\u6bcf\u4e00\u4e2a\u70b9\n            int v = edge2[i].to;\n            if (!vis[v]) {\n                vis[v] = 1;\n                Q.push(v);\n            }\n        }\n    }\n}\ninline bool check(int u) {//\u5224\u65ad\u662f\u5426\u80fd\u5230\u8fbe\u7ec8\u70b9\n    for (int i = head1[u]; ~i; i = edge1[i].nxt)\n        if (!vis[edge1[i].to]) return 0;\n    return 1;\n}\ninline bool bfs2(int cur) {\n    queue<int> Q;\n    Q.push(cur);\n    while (!Q.empty()) {\n        int u = Q.front();\n        Q.pop();\n        if (!check(u)) continue;\n        for (int i = head1[u]; ~i; i = edge1[i].nxt) {//\u904d\u5386\u6bcf\u4e00\u4e2a\u70b9\n            int v = edge1[i].to;\n            if (dis[v] == -1) {\n                dis[v] = dis[u] + 1;\n                Q.push(v);\n                if (v == T) {\n                    printf(\"%d\\n\", dis[T] + 1);\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    memset(head1, -1, sizeof(head1));\n    memset(head2, -1, sizeof(head2));\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%d%d\", &u, &v);\n        addedge(u, v);//\u52a0\u8fb9\n    }\n    scanf(\"%d%d\", &S, &T);\n    bfs1(T);//\u6c42\u51fa\u7ec8\u70b9\u80fd\u5230\u7684\u70b9\n    memset(dis, -1, sizeof(dis));\n    if (!bfs2(S)) printf(\"-1\\n\");\n    return 0;\n}\n```",
        "postTime": 1566459807,
        "uid": 19729,
        "name": "xiaohuang",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u7531\u4e8e\u53ea\u6709\u6240\u6709\u51fa\u8fb9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u6307\u5411\u7ec8\u70b9\u7684\u70b9\u624d\u53ef\u80fd\u88ab\u9009\u62e9\uff0c\u6240\u4ee5\u5c31\u5efa\u53cd\u8fb9\uff0c\u4ee5\u7ec8\u70b9\u4e3a\n\n\u8d77\u70b9\u5f00\u59cb\u626b\uff0c dfs\uff0c bfs\u5747\u53ef\uff0c\u5728\u628a\u6240\u6709\u7ec8\u70b9\u80fd\u8fbe\u5230\u7684\u70b9\u6253\u4e0a\u6807\u8bb0\uff0c\u8fd9\u4e9b\u70b9\u4f5c\u4e3a\u5907\u9009\u70b9\u3002\n\n\u7136\u540e\u5728\u539f\u6b63\u5411\u56fe\u8dd1\u6700\u77ed\u8def\u5373\u53ef\uff0c\u6ce8\u610f\u8dd1\u6700\u77ed\u8def\u6ee1\u8db3\uff1a\n\n\u2460 \u8be5\u70b9\u5728\u4e0a\u4e00\u6b65\u5efa\u53cd\u56fe\u641c\u7d22\u4e2d\u5df2\u7ecf\u88ab\u6807\u8bb0\n\n\u2461 \u8be5\u70b9\u7684\u6240\u6709\u5b69\u5b50\u4e5f\u5728\u4e0a\u4e00\u6b65\u5efa\u53cd\u56fe\u641c\u7d22\u4e2d\u88ab\u6807\u8bb0\n\n\u540c\u65f6\u6ee1\u8db3\u8fd9\u6837\u4e24\u4e2a\u8981\u6c42\u7684\u70b9\u624d\u53ef\u80fd\u4e3a\u76ee\u6807\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u70b9\u3002\n\u8fb9\u6743\u957f\u5ea6\u90fd\u662f1\uff0c\u6c42\u6700\u77ed\u8def\u5f84\u53ef\u4ee5BFS\u6216\u8005dijkstra \u3001 SPFA\u7b49\n\n\u4e0a\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=100010;\nint n,m,s,t,u,v,vis1[maxn],dis[maxn];\nvector<int>map[maxn];\nvector<int>reb[maxn];\nqueue<int>q,p;\nvoid bfs1(int x){//\u7b2c\u4e00\u6b21\u6807\u8bb0\u6240\u6709\u7ec8\u70b9\u80fd\u5230\u7684\u70b9\n\tq.push(x),vis1[x]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=0;i<(int)reb[u].size();i++){\n\t\t\tint v=reb[u][i];\n\t\t\tif(!vis1[v]){\n\t\t\t\tvis1[v]=1,q.push(v);//\u6807\u8bb0\n\t\t\t}\n\t\t}\n\t}\n}\nbool check(int x){//\u770b\u662f\u5426\u80fd\u5230\u8fbe\u7ec8\u70b9\n\tfor(int i=0;i<map[x].size();i++){\n\t\tif(!vis1[map[x][i]])return false;\n\t}\n\treturn true;\n}\nbool bfs2(int x){//\u7b2c\u4e8c\u6b21\u4ece\u539f\u70b9\u904d\u5386\u6240\u6709\u70b9\n\tp.push(x);\n\twhile(!p.empty()){\n\t\tint u=p.front();p.pop();\n\t\tif(!check(u))continue;\n\t\tfor(int i=0;i<map[u].size();i++){\n\t\t\tint v=map[u][i];\n\t\t\tif(dis[v]==-1){\n\t\t\t\tdis[v]=dis[u]+1;//\u8bb0\u5f55\u8ddd\u79bb\n\t\t\t\tp.push(v);\n\t\t\t\tif(v==t){//\u627e\u5230\u4e86\u5c31\u8f93\u51fa\n\t\t\t\t\tprintf(\"%d\",dis[t]+1);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>u>>v;\n\t\tmap[u].push_back(v);\n\t\treb[v].push_back(u);//\u5efa\u7acb\u53cd\u8fb9\n\t}\n\tcin>>s>>t;\n\tbfs1(t);\n\tmemset(dis,-1,sizeof(dis));\n\tif(!bfs2(s))//\u6ca1\u627e\u5230\u5c31\u8f93\u51fa-1\n\t\tprintf(\"-1\\n\");\n\treturn 0;\n}\n```\n",
        "postTime": 1564717136,
        "uid": 168385,
        "name": "gwx123456",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u6b64\u9898\u7684\u6570\u636e\u91cf\u5e76\u4e0d\u662f\u5f88\u5927\uff0c\u5bbd\u641c\u4e5f\u662f\u53ef\u4ee5\u8fc7\u5f97\u3002\n\n\u5982\u4f55\u9664\u53bb\u7b2c\u4e00\u4e2a\u6761\u4ef6\uff0c\u8fd9\u9898\u8fd8\u662f\u6bd4\u8f83\u88f8\u7684\uff0c\u4f46\u662f\u52a0\u4e0a\u7b2c\u4e00\u6761\u4ef6\u5c31\u4e0d\u4e00\u6837\u4e86\u3002\n\n\u4f46\u662f\u7ecf\u8fc7\u601d\u8003\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u9884\u5148\u5c06\u5176\u4e2d\u5230\u4e0d\u4e86\u7ec8\u70b9\u7684\u70b9\u76f4\u63a5\u53bb\u6389\uff0c\u4fdd\u7559\u5176\u4ed6\u70b9\uff0c\u8fd9\u4e0d\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u88f8\u9898\u4e86\u5417\u3002\n\n\u6211\u4eec\u5f00\u59cb\u601d\u8003\u5982\u4f55\u9884\u5904\u7406\u3002\n\n\u5982\u679c\u6211\u4eec\u987a\u5411\u53bb\u627e\uff0c\u4e0d\u5c3d\u7a0b\u5e8f\u53d8\u5f97\u590d\u6742\uff0c\u800c\u4e14\u540c\u65f6\u8fd8\u4f1a\u589e\u52a0\u590d\u6742\u5ea6\u3002\n\n\u65e2\u7136\u8fd9\u6837\u90a3\u4e48\u8981\u627e\u5230t\u7684\uff0c\u6211\u4eec\u4e3a\u4f55\u4e0d\u4ecet\u5f00\u59cb\u5411\u524d\u627e\uff0c\u53ea\u8981\u4ecet\u53ef\u4ee5\u6269\u5c55\u7684\u70b9\uff0c\u4e00\u5b9a\u53ef\u4ee5\u4ece\u5b83\u8f7d\u6269\u5c55\u5230t\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7b80\u7b80\u5355\u5355\u51e0\u884c\u5c0f\u7a0b\u5e8f\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u9884\u5904\u7406\u3002\n\n\u6700\u540e\u52a0\u4e0abfs\u6216\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n\u3010time complexity\u3011\n\nO(n)\n\n\u3010accepted code\u3011\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n \n\nint n,m;\n\nvector<int>a[11111],ab[11111];\n\n \n\nstruct node {\n\n  int po,step;\n\n  node(int _po,int _step):po(_po),step(_step){}\n\n};\n\nqueue<node>dl;\n\n \n\nint s,t;\n\nint vhash[11111],vh[11111];\n\n \n\n \n\nvoid dfs(int k){\n\n    vhash[k]=1;\n\n     for(int i=0;i<ab[k].size();i++)\n\n    if(vhash[ab[k][i]]==0)\n\n   dfs(ab[k][i]);\n\n}\n\n \n\n \n\nint main(){\n\n   freopen(\"road.in\",\"r\",stdin);\n\n   freopen(\"road.out\",\"w\",stdout);\n\n   cin>>n>>m;\n\n   for(int i=1;i<=m;i++)\n\n   {\n\n      int x,y;\n\n      cin>>x>>y;\n\n      a[x].push_back(y);\n\n      ab[y].push_back(x);\n\n   }\n\n   cin>>s>>t;\n\n   dfs(t);\n\n   for(int i=1;i<=n;i++)\n\n   {\n\n      bool flag;\n\n      if (vhash[i]) flag=true;else flag=false;\n\n      for(int j=0;j<a[i].size();j++)\n\n        if(vhash[a[i][j]]==0) flag=false;\n\n      if(flag){vh[i]=1;//cout<<i<<endl;*/}\n\n   }\n\n}\n\n   dl.push(node(s,0));\n\n   while(!dl.empty()){\n\n      int qt=dl.front().po;\n\n      int f=dl.front().step;\n\n       for(int i=0;i<a[qt].size();i++){\n\n           if(vh[a[qt][i]]==1){\n\n              vh[a[qt][i]]=0;\n\n            dl.push(node(a[qt][i],f+1));\n\n      if(a[qt][i]==t){\n\n          cout<<f+1<<endl;\n\n          return 0;\n\n      }\n\n         }\n\n      }\n\n      dl.pop();\n\n   }\n\n   cout<<\"-1\"<<endl;\n\n   return 0;\n\n}\n```",
        "postTime": 1541692642,
        "uid": 25193,
        "name": "glimmer",
        "ccfLevel": 0,
        "title": "\u3010NOIP2014T\u3011\u5bfb\u627e\u9053\u8def"
    },
    {
        "content": "### \u4e3b\u8981\u601d\u8def\uff1aDFS + Dijkstra + \u5806\u4f18\u5316 + \u53cd\u5411\u601d\u7ef4\n\n~~\u8981\u4e0d\u662f\u5199\u4ee3\u7801\u7684\u65f6\u95f4\u95ee\u9898\u6211\u5c31\u7528[\u7ebf\u6bb5\u6811\u4f18\u5316](https://yizimiyuanxin.blog.luogu.org/solution-p1339-new)\u4e86~~\n\n\u9996\u5148\uff0c\u9898\u76ee\u8981\u6c42\u662f\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u4e0d\u8003\u8651\u5982\u4f55\u901a\u8fc7\u67d0\u70b9\u5230\u8fbe\u7ec8\u70b9\uff0c\u6211\u4eec\u60f3\u8c61\u5982\u679c\u901a\u8fc7\u4e00\u4e2a\u70b9\u53ef\u4ee5\u518d\u5230\u8fbe\u7ec8\u70b9\uff0c\u8bf4\u660e\u628a\u8fb9\u53cd\u8fc7\u6765\u540e\uff0c\u7ec8\u70b9\u53ef\u4ee5\u5230\u8fbe\u8fd9\u4e2a\u70b9\u3002\n\n\u90a3\u6211\u4eec\u53ef\u4ee5\u5efa\u53cd\u8fb9\uff0c\u901a\u8fc7DFS\u6c42\u51fa\u53ef\u4ee5\u53bb\u5411\u7ec8\u70b9\u7684\u70b9\u4e86\u3002\u5230\u8fbe\u4e0d\u4e86\u7684\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5220\u70b9\u4e86\u3002\n\ndfs:\n\n```cpp\nint vis[mn];//\u8868\u793a\u662f\u5426\u53bb\u8fc7\nvoid dfs(int x){\n    if(vis[x]) return; vis[x] = 1;\n    for (int i = hh[x]; i; i=ee[i].nxt) if (!vis[ee[i].v])\n            dfs(ee[i].v);\n    //printf(\"%d\\n\", x);\n}\n```\n\n\u6211\u4eec\u5982\u4f55\u5220\u70b9\uff1f\n\n\u56e0\u4e3a\u6211\u4eec\u6700\u7ec8\u8fd8\u662f\u8981\u8dd1\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fd9\u6761\u8fb9\u8fb9\u6743\u5f00\u5230\u4e0d\u53ef\u80fd\u5230\u8fbe\u7684\u957f\u5ea6\u3002\n\n\u50cf\u8fd9\u6837\n```cpp\n\tgo(x, 1, n, 1) \n        if (!vis[x]) \n            for (int i = hh[x]; i; i = ee[i].nxt) {\n                int v = ee[i].v;\n                for (int j = h[v]; j; j = e[j].nxt)\n                    e[j].w = 100000;\n            }\n```\n\u7136\u540e\u628a\u53cd\u5411\u7684\u8fb9\u53d8\u6210\u6b63\u8fb9\uff08\u6211\u662f\u76f4\u63a5\u5b58\u7684\u4e24\u79cd\u8fb9\uff0c\u5176\u5b9e\u90fd\u4e00\u6837\uff09\uff0c\u7136\u540e\u8dd1Dijkstra + \u5806\u4f18\u5316\u5c31\u597d\u4e86\u3002\u6ce8\u610f\uff0c\u5982\u679c\u6211\u4eec\u628a\u8fb9\u6743\u503c\u53d8\u5316\u540e\u5c31\u4e0d\u80fd\u62ffbfs\u50cf\u539f\u6765\u4e00\u6837\u90a3\u4e48\u505a\u4e86\n\n### \u4ee3\u7801\uff1a\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <vector>\nusing namespace std;\n#define go(i, j, n, k) for (int i = j; i <= n; i += k)\n#define fo(i, j, n, k) for (int i = j; i >= n; i -= k)\n#define rep(i, x) for (int i = h[x]; i; i = e[i].nxt)\n#define mn 10010\n#define mm 200010\n#define inf 2147483647\n#define ll long long\n#define ld long double\n#define fi first\n#define se second\n#define root 1, n, 1\n#define lson l, m, rt << 1\n#define rson m + 1, r, rt << 1 | 1\n#define bson l, r, rt\n//#define LOCAL\n#define mod \n#define Debug(...) fprintf(stderr, __VA_ARGS__)\ninline int read(){\n    int f = 1, x = 0;char ch = getchar();\n    while (ch > '9' || ch < '0'){if (ch == '-')f = -f;ch = getchar();}\n    while (ch >= '0' && ch <= '9'){x = x * 10 + ch - '0';ch = getchar();}\n    return x * f;\n}\n//This is AC head above...\nstruct edge{\n    int f, v, w, nxt;\n    edge(int _f = 0, int _v = 0, int _w = 1, int _nxt = 0) : f(_f), v(_v), w(_w), nxt(_nxt){}\n} e[mm << 1], ee[mm << 1];\nint p, h[mn],pp,hh[mn];\ninline void add(int a, int b, int c = 1){\n    e[++p].nxt = h[a], h[a] = p, e[p].f = a, e[p].v = b, e[p].w = c;\n}\ninline void fadd(int a,int b){\n    ee[++pp].nxt = hh[a], hh[a] = pp, ee[pp].f = a, ee[pp].v = b;\n}\n//Dij + \u5806\u4f18\u5316\nstruct node{\n    int u,v;\n    bool operator <(const node &b) const{\n        return u > b.u;\n    }\n};//\u91cd\u8f7d\u8fd0\u7b97\u7b26\nint n,m,s,t;\nint dis[mn];//\u8d77\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\npriority_queue<node> q;//\u4f18\u5148\u961f\u5217\ninline void Dij(int s){//s\u4e3a\u8d77\u70b9\n    go(i, 0, n, 1)\n        dis[i] = inf;\n    dis[s] = 0;\n    node o;\n    o.u = 0;o.v = s;\n    q.push(o);\n    while (q.size()){\n        int u = q.top().v, d = q.top().u;\n        q.pop();\n        if(d!=dis[u])\n            continue;\n        rep(i,u){\n            int v = e[i].v, w = e[i].w;\n            if (dis[v] > dis[u] + w){\n                dis[v] = dis[u] + w;\n                node p;\n                p.u = dis[v], p.v = v;\n                q.push(p);\n            }\n        }\n    }\n}\nint vis[mn];\nvoid dfs(int x){\n    if(vis[x]) return; vis[x] = 1;\n    for (int i = hh[x]; i; i=ee[i].nxt) if (!vis[ee[i].v])\n            dfs(ee[i].v);\n    //printf(\"%d\\n\", x);\n}\ninline void debug(){\n    go(i, 1, p, 1) printf(\"%d->%d %d\\n\", e[i].f, e[i].v, e[i].w);\n    go(i, 1, pp, 1) printf(\"%d->%d %d\\n\", ee[i].f, ee[i].v, ee[i].w);\n}\nint main(){\n    n = read(), m = read();\n    go(i,1,m,1){\n        int a = read(), b = read();\n        fadd(b, a);\n        add(a, b);\n    }\n    s = read(), t = read();\n    //debug();\n    dfs(t);\n    go(x, 1, n, 1) \n        if (!vis[x]) \n            for (int i = hh[x]; i; i = ee[i].nxt) {\n                int v = ee[i].v;\n                for (int j = h[v]; j; j = e[j].nxt)\n                    e[j].w = 100000;\n            }\n    //debug();\n    Dij(s);\n    if(dis[t]!=inf)\n        cout << dis[t];\n    else\n        cout << -1;\n#ifdef LOCAL\n    Debug(\"\\nMy Time: %.3lfms\\n\", (double)clock() / CLOCKS_PER_SEC);\n#endif\n    return 0;\n}\n\n```\n\n#### \u7b2c\u5341\u516d\u6b21\u53d1\u9898\u89e3\uff0c\u5e0c\u671b\u5e2e\u52a9\u540c\u5b66\u4eec\u5efa\u7acb\u53cd\u5411\u601d\u7ef4",
        "postTime": 1537378620,
        "uid": 71168,
        "name": "yizimi\u8fdc\u6b23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u96be\u70b9\u5728\u4e8e\u201c**\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a**\u201d\u8fd9\u53e5\u8bdd\uff0c\u610f\u601d\u5c31\u662f\u8bf4\u4e00\u4e2a\u70b9\u662f\u5408\u6cd5\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u6240\u6709\u5b50\u8282\u70b9\u90fd\u4e0e\u7ec8\u70b9\u8054\u901a\u3002\u4f46\u662f\uff0c**\u4e00\u4e2a\u70b9\u662f\u5408\u6cd5\u7684\uff0c\u4e0d\u4ee3\u8868\u4ed6\u7684\u5b50\u8282\u70b9\u90fd\u662f\u5408\u6cd5\u7684**\uff01\n\n\n\u7406\u89e3\u4e86\u8fd9\u53e5\u8bdd\u540e\uff0c\u53ef\u4ee5\u5bb9\u6613\u7684\u60f3\u5230\u6240\u6709\u3010\u4e0d\u5408\u6cd5\u3011\u7684\u70b9\u662f\u3010\u4e0d\u4e0e\u7ec8\u70b9\u8054\u901a\u7684\u70b9\u3011+\u3010\u4e0d\u4e0e\u7ec8\u70b9\u8054\u901a\u7684\u70b9\u7684\u6240\u6709\u5b50\u7ed3\u70b9\uff08\u54ea\u6015\u8be5\u5b50\u8282\u70b9\u4e0e\u7ec8\u70b9\u8054\u901a\u4e5f\u4e0d\u5408\u6cd5\uff09\u3011\u4e8e\u662f\uff0c\u4e09\u6b65\u89e3\u51b3\u95ee\u9898\u3002\n\n\n1.\u53cd\u5411bfs\u627e\u5230\u6240\u6709\u4e0d\u4e0e\u7ec8\u70b9\u8054\u901a\u7684\u70b9\u3002\n\n2.\u7528for\u5faa\u73af\u904d\u5386\u6240\u6709\u4e0d\u4e0e\u7ec8\u70b9\u8054\u901a\u7684\u70b9\u5e76\u5c06\u5176\u5b50\u8282\u70b9\u4e5f\u627e\u51fa\u6765(\u540c\u6837\u53cd\u5411)\n\n3.\u6b63\u5411bfs\u4eces->t\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n\n\n\n\n\n\n\n \n \n \n```cpp\n#include<iostream>\n#include<queue>\n#include<vector>\nusing namespace std;\nvector<int> edge[10005];//\u6b63\u8fb9\nvector<int> anti_edge[10005];//\u53cd\u8fb9\nint connect[10005];//connect[i]\u8868\u793ai\u70b9\u662f\u5426\u4e0e\u7ec8\u70b9\u8054\u901a      1\u8054\u901a     0\u4e0d\u8054\u901a\nint true_connect[10005];// true_connect[i]\u8868\u793ai\u70b9\u662f\u5426\u5408\u6cd5       1\u5408\u6cd5      0\u4e0d\u5408\u6cd5\nint visit[10005];//\u5c0f\u4f18\u5316\uff0c\u907f\u514d\u7b2c\u4e09\u6b65\u7684\u6b63\u5411bfs\u9677\u5165\u73af\u4e2d\u3002\u6ca1\u6709\u4e5f\u80fd\u8fc7\nint s,t;\nstruct node{\n    int now;\n    int d;\n    node(int n1,int d1): now(n1),d(d1) {}\n};\nint main(){\nint n,m; cin>>n>>m;\nfor(int i=1;i<=m;i++){\n    int u,v; cin>>u>>v;\n    if(u==v) continue;\n    edge[u].push_back(v);\n    anti_edge[v].push_back(u);\n}\ncin>>s>>t;\n//\u4ece\u7ec8\u70b9\u9006\u5411bfs \nqueue<int> q1;\nq1.push(t);\nwhile(!q1.empty()){\n    int now=q1.front(); q1.pop();\n    connect[now]=1;\n    for(int i=0;i<anti_edge[now].size();i++){\n        int to=anti_edge[now][i];\n        if(connect[to]==0) q1.push(to);\n    }\n} \nfor(int i=1;i<=n;i++) true_connect[i]=1;\nfor(int i=1;i<=n;i++){\n    if(connect[i]==0){\n        true_connect[i]=0;\n        for(int j=0;j<anti_edge[i].size();j++){\n            int to=anti_edge[i][j];\n            true_connect[to]=0;\n        }\n    }     \n} \nqueue<node> q2;\nq2.push( node(s,0) );\nwhile(!q2.empty()){\n    node n=q2.front(); q2.pop();\n    int now=n.now;\n    int d=n.d;\n    visit[now]=1;\n    if(now==t) { cout<<d; return 0;    }\n    for(int i=0;i<edge[now].size();i++){\n        int to=edge[now][i];\n        if(true_connect[to]==1 && visit[to]==0 )    q2.push( node(to,d+1) );\n    }    \n}\n    cout<<-1; \n    return 0;\n}\n\n```",
        "postTime": 1510305036,
        "uid": 36788,
        "name": "4396\u778e",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u72b9\u8bb0\u4e00\u5237\u7684\u65f6\u5019\u89c9\u5f97\u8fd9\u9898\u8d3c\u96be\uff0c\u8001\u8001\u5b9e\u5b9e\u7684\u5efa\u53cd\u56fe\u5220\u70b9\u8c03\u4e86\u5de8\u4e45\u3002\n\n\u73b0\u5728\u4e00\u770b\uff0c\u61d2\u5f97\u60f3\u90a3\u4e48\u591a\uff0c\u5e72\u8106\u91c7\u7528\u6700\u7b80\u5355\u7684\u601d\u8def\u5427\u3002\n\n\u9996\u5148\u660e\u767d\u4e00\u70b9\u3002**\u53cd\u56fe\u4e0a\u4e0e\u7ec8\u70b9\u4e0d\u8fde\u901a**\u7684\u70b9\uff0c\u5c31\u662f\u9898\u4e2d\u6240\u8c13\u7684\u4e0d\u4e0e\u7ec8\u70b9\u8fde\u901a\u7684\u70b9\uff08\u4ed4\u7ec6\u60f3\u4e00\u60f3\uff09\n\n\u6240\u4ee5\u627e\u8fd9\u6837\u7684\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u53cd\u56fe\u5e7f\u641c\u3002\u6ca1\u88ab\u8bbf\u95ee\u5230\u7684\u5c31\u662f\n\n\u7136\u540e\uff0c**\u6b63\u56fe\u7684\u6700\u77ed\u8def\u4ecd\u7136\u662f\u53cd\u56fe\u7684\u6700\u77ed\u8def**\uff0c\u56e0\u4e3a\u4e00\u7ec4\u8fb9\u9f50\u9f50\u8f6c\u5411\uff0cs\u548ct\u7684\u8fde\u901a\u6027\uff0c\u957f\u5ea6\uff0c\u8fd9\u4e24\u8005\u90fd\u4e0d\u4f1a\u6539\u53d8\n\n\u7efc\u4e0a\uff0c\u5efa\u4e00\u904d\u53cd\u56fe\uff0c\u4e00\u904d\u5e7f\u641c\u5220\u70b9\uff0c\u518d\u8dd1\u4e00\u904d\u6700\u77ed\u8def\n\n\u4ee5\u53ca\u3002spfa\u7684\u6846\u67b6\u5c31\u662f\u5e7f\u641c\uff0c**\u6240\u4ee5\u5220\u70b9\u548c\u6700\u77ed\u8def\u53ef\u4ee5\u7528\u540c\u4e00\u4e2a\u51fd\u6570\uff01\uff01\uff01**\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#define N 10010\nusing namespace std;\nstruct node{\n  int v,nxt;\n}e[200010];\nint head[N],num;\nvoid add(int u,int v){\n  e[num].v=v;\n  e[num].nxt=head[u];\n  head[u]=num++;\n}\nint que[N*10],top,dist[N],vis[N];\nbool fk[N];\nvoid spfa(int s,int t){\n  memset(vis,0,sizeof(vis));\n  memset(dist,0x3f,sizeof(dist));\n  que[0]=s;\n  dist[s]=0;\n  top=1;\n  for(int i=0;i<top;i++){\n    int u=que[i];\n    vis[u]=0;\n    for(int j=head[u];j!=-1;j=e[j].nxt){\n      int v=e[j].v;\n      if(fk[v])continue;\n      if(dist[v]>dist[u]+1){\n    dist[v]=dist[u]+1;\n    if(!vis[v]){\n      vis[v]=1;\n      que[top++]=v;\n    }\n      }\n    }\n  }\n}\nint main(){\n  freopen(\"hh.in\",\"r\",stdin);\n  freopen(\"hh.out\",\"w\",stdout);\n  memset(head,-1,sizeof(head));\n  int n,m,a,b,s,t;\n  cin>>n>>m;\n  while(m--){\n    scanf(\"%d%d\",&a,&b);\n    add(b,a);\n  }\n  cin>>s>>t;\n  spfa(t,s);\n  for(int i=1;i<=n;i++){\n    if(dist[i]==dist[0]){\n      for(int j=head[i];j!=-1;j=e[j].nxt){\n    fk[e[j].v]=1;\n      }\n    }\n  }\n  spfa(t,s);\n  if(dist[s]==dist[0])cout<<-1;\n  else cout<<dist[s];\n  return 0; \n}\n\n```",
        "postTime": 1506003370,
        "uid": 31337,
        "name": "\u91d1\u95ea\u95ea\u6570\u636e\u7403",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u6240\u6709\u8fb9\u8fb9\u6743\u4e00\u6837\uff0c\u6240\u4ee5\u6211\u4eec\u7528bfs\u5c31\u80fd\u6c42\uff08\u4f55\u51b5~~\u672c\u849f\u84bb\u89c9\u5f97~~dij\u5f88\u96be\u5199\uff09  \n\u9996\u5148\uff0c\u8fd9\u91cc\u6709\u7684\u70b9\u4e0d\u80fd\u8d70\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u628a\u8fd9\u4e9b\u70b9\u53bb\u6389\u5373\u53ef  \n\u600e\u4e48\u53bb\u6389\u5462\uff1f\u603b\u4e0d\u80fd\u628a\u6bcf\u4e00\u4e2a\u70b9\u90fd\u8dd1\u4e00\u904dbfs\u5427......  \n\u53cd\u7740\u4ece\u7ec8\u70b9\u5f00\u59cb\u8dd1\uff0c\u53ea\u9700\u8981\u53cd\u5411\u5efa\u56fe\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u7701\u53bb\u5927\u91cf\u65f6\u95f4\uff0c\u800c\u4e14\u56e0\u4e3a\u6570\u636e\u6bd4\u8f83\u5c0f\uff0c\u4e0d\u4f1a\u70b8  \n\u53cd\u5411\u8dd1\u4e4b\u540e\u6807\u51fa\u6240\u6709\u53ef\u4ee5\u8d70\u7684\u70b9\uff0c\u518d\u6b63\u5411\u8dd1\u4e00\u6b21\u5373\u53ef  \n```\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,start,end;\nbool lian[10000],cu[10000];\nvector<int> path[10000],fanpath[10000];\nstruct qu\n{\n\tint ni,w;\n};\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint st,ed;\n\t\tcin>>st>>ed;\n\t\tpath[st].push_back(ed);\n\t\tfanpath[ed].push_back(st);\n\t}\n\tcin>>start>>end;\n\tmemset(lian,false,sizeof(lian));\n\tmemset(cu,true,sizeof(cu));\n\t//\u53cd\u5411 \n\tqueue<int> q1;\n\tq1.push(end);\n\twhile(!q1.empty())\n\t{\n\t\tint now=q1.front();\n\t\tq1.pop();\n\t\tlian[now]=true;\n\t\tfor(int i=0;i<fanpath[now].size();i++)\n\t\t\tq1.push(fanpath[now][i]);\n\t}\n\tif(!lian[start])\n\t{\n\t\tcout<<-1<<endl;\n\t\treturn 0;\n\t}\n\t//\u5904\u7406 \n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=0;j<path[i].size();j++)\n\t\t\tif(!lian[i]||!lian[path[i][j]])\n\t\t\t\tcu[i]=false;\n\t//\u6b63\u5411 \n\tqueue<qu> q2;\n\tq2.push(qu{start,0});\n\twhile(!q2.empty())\n\t{\n\t\tint now=q2.front().ni,wei=q2.front().w;\n\t\tq2.pop();\n\t\tif(now==end)\n\t\t{\n\t\t\tcout<<wei<<endl;\n\t\t\treturn 0;\n\t\t}\n\t\tfor(int i=0;i<path[now].size();i++)\n\t\t\tif(cu[path[now][i]])\n\t\t\t\tq2.push(qu{path[now][i],wei+1});\n\t}\n}\n```\n\u849f\u84bb\u575a\u6301\u5df1\u89c1\u89c9\u5f97\u8fd9\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5e76\u4e14\u4e0d\u63a5\u53d7\u53cd\u9a73",
        "postTime": 1572612630,
        "uid": 182525,
        "name": "yangyujia18",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "#### \u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u4eba\u8fd9\u6837\u505a\uff0c\u53d1\u4e00\u7bc7\u9898\u89e3\u770b\u770b\u80fd\u4e0d\u80fd\u8fc7\n\n\u672c\u849f\u84bb\u521a\u5f00\u59cb\u770b\u8fd9\u9898\u4ee5\u4e3a\u5c31\u662f\u4e00\u4e2a\u6700\u77ed\u8def\u7684\u677f\u5b50\uff0c\u4e8e\u662f\u6b22\u5feb\u7684\u6253\u4e86\u4e00\u4e2adijkstra\n\n\u55ef\u597d\u7684\u7b2c\u4e00\u4e2a\u6837\u4f8b\u8fc7\u4e86\uff0c\u5fc3\u60f3\u8fd9\u9898\u771f\u662f~~\u592a\u6c34\u4e86~~\n\n\u7ed3\u679c\u5230\u4e86\u7b2c\u4e8c\u4e2a\u6570\u636e\u5c31\u61f5\u4f4f\u4e86\uff0c\u55ef\u600e\u4e48\u8f93\u51fa\u7684\u662f2\uff1f\n\n\u518d\u4e00\u770b\u6837\u4f8b\u89e3\u91ca\u5c31\u627e\u5230\u95ee\u9898\u4e86\uff0c\u5982\u679c\u5f53\u524d\u627e\u5230\u7684\u6700\u77ed\u8def\u4e0a\u6709\u4e00\u4e2a\u70b9\u6307\u5411\u4e00\u4e2a\u4e0d\u4e0e\u7ec8\u70b9\u76f8\u8fde\u7684\u70b9\uff0c\u90a3\u4e48\u6b64\u8def\u4e0d\u901a\uff0c\u5c31\u627e\u7b2c\u4e8c\u77ed\u7684\u8def\uff0c\u4ee5\u6b64\u7c7b\u63a8\n\n\u5982\u679c\u90fd\u4e0d\u80fd\u8d70\uff0c\u8f93\u51fa-1\u5373\u53ef\n\n\u7136\u540e\u672c\u849f\u84bb\u5c31\u628adijkstra\u53cd\u7740\u8dd1\u4e86\u4e00\u904d\u5c1d\u8bd5\u627e\u51fa\u6240\u6709\u4e0d\u548c\u7ec8\u70b9\u76f8\u8fde\u7684\u70b9\u6807\u8bb0\u4e00\u4e0b\uff0c\u518d\u628a\u4e0e\u8be5\u70b9\uff08\u5373\u4e0d\u4e0e\u7ec8\u70b9\u76f8\u8fde\u7684\u70b9\uff09\u76f8\u8fde\u7684\u70b9\u4e5f\u6807\u8bb0\u4e00\u904d\uff0c\u6807\u8bb0\u8fc7\u7684\u70b9\u5728\u7b2c\u4e8c\u904ddijkstra\u65f6\u4e0d\u80fd\u8d70\uff08\u5f53\u7136\u8d77\u70b9\u80af\u5b9a\u53ef\u4ee5\u8d70\uff09\n\n\u55ef\u5927\u6982\u5c31\u662f\u8fd9\u6837\uff0c\u7531\u4e8e\u672c\u849f\u84bb\u592a\u849f\u84bb\u4e86\uff0c\u6240\u4ee5\u4ee3\u7801\u5f88\u5197\u6742......\n\n```\n#include <bits/stdc++.h>\n#define ll long long\n\nusing namespace std;\n\nconst int INF=2147483647;\nconst int N=6000001;\nconst int M=10001;\nint cnt=1;\nint to[N],nxt[N],head[N],dis[N],vis[N],a[N],b[N],frog[N];\nll bi[N];\nint n,m,s,t;\nstruct node\n{\n    int dis,pos;\n    bool operator <(const node &x)const\n    {\n        return x.dis<dis;\n    }\n};\nvoid qxx(int x,int y)\n{\n    to[++cnt]=y;\n    nxt[cnt]=head[x];\n    head[x]=cnt;\n}\npriority_queue<node> q;\nvoid dijkstra()\n{\n    dis[t]=0;\n    q.push((node){0,t});\n    while(!q.empty())\n    {\n        node k=q.top();\n        q.pop();\n        int x=k.pos;\n        if(vis[x])\n            continue;\n        vis[x]=1;\n        for(register int i=head[x];i;i=nxt[i])\n        {\n            int kk=to[i];\n            if(dis[kk]>dis[x]+1)\n            {\n                dis[kk]=dis[x]+1;\n                if(!vis[kk])\n                q.push((node){dis[kk],kk});\n            }\n        }\n    }\n}\nvoid dijkstra1()\n{\n    dis[s]=0;\n    q.push((node){0,s});\n    while(!q.empty())\n    {\n        node k=q.top();\n        q.pop();\n        int x=k.pos;\n        if(vis[x]||!frog[x])\n            continue;\n        vis[x]=1;\n        for(register int i=head[x];i;i=nxt[i])\n        {\n            int kk=to[i];\n            if(dis[kk]>dis[x]+1)\n            {\n                dis[kk]=dis[x]+1;\n                if(!vis[kk])\n                q.push((node){dis[kk],kk});\n            }\n        }\n    }\n}\nvoid init()//\u521d\u59cb\u5316 \n{\n\tmemset(head,0,sizeof(head));\n\tcnt=1;//\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48\u662f1\uff0c\u968f\u4fbf\u7ed9\u4e00\u4e2a\u6570\u90fd\u53ef\u4ee5 \n\tmemset(vis,0,sizeof(vis));\n\tmemset(dis,63,sizeof(dis));\n}\nvoid dfs()//\u5bfb\u627e\u4e0e\u4e0d\u4e0e\u7ec8\u70b9\u76f8\u8fde\u7684\u70b9\u76f8\u8fde\u7684\u70b9\u5e76\u6807\u8bb0 \n{\n\tmemset(frog,1,sizeof(frog));//\u4e0d\u8981\u5728\u610f\u8fd9\u4e2afrog   qwq \n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tif(!bi[i])\n\t\t{\n\t\t\tfor(register int j=head[i];j;j=nxt[j])\n\t\t\t{\n\t\t\t\tint kk=to[j];\n\t\t\t\tfrog[kk]=0;\n\t\t\t}\n\t\t}\n\t}\n\tfrog[s]=1;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    init();\n    for(register int i=1;i<=n;i++)\n    {\n        dis[i]=INF;\n    }\n    for(register int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&a[i],&b[i]);\n        qxx(b[i],a[i]);//\u53cd\u5411\u8dd1\u80af\u5b9a\u8981\u53cd\u7740\u5efa\u8fb9 \n    }\n\tscanf(\"%d%d\",&s,&t);\n    dijkstra();//\u53cd\u7740\u8dd1 \n    for(register int i=1;i<=n;i++)\n    {\n    \tif(!vis[i])\n    \t\tbi[i]=0;\n    \t\telse bi[i]=1;//\u5982\u679c\u53cd\u7740\u8dd1\u80fd\u8dd1\u5230\u5c31\u8bf4\u660e\u8fd9\u4e2a\u70b9\u548c\u7ec8\u70b9\u76f8\u8fde \n\t}\n\tdfs();\n\tinit();\n\tfor(register int i=1;i<=m;i++)\n        qxx(a[i],b[i]);\n    dijkstra1();\n\tif(dis[t]==dis[0])//\u6ca1\u6709\u8dd1\u5230\u7ec8\u70b9 \n    \tprintf(\"-1\");//\u8f93\u51fa-1 \n    \telse printf(\"%d\",dis[t]);\n    return 0;\n}\n```\n\n### \u6700\u540e\u65e5\u5e38\u819c[\u795e\u4ed9](https://www.luogu.org/space/show?uid=122988)\n\n#### \u7ba1\u7406\u5458\u6c42\u901a\u8fc7qwq",
        "postTime": 1546838085,
        "uid": 123318,
        "name": "ViXpop",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "## \u9898\u89e3\n\u9996\u5148\u611f\u8c22\u90a3\u4e9b\u544a\u8bc9\u6211\u9006\u5411\u601d\u7ef4\u7684\u5927\u4f6c\u4eec\uff0c\u8fd9\u4e2a\u9898\u6211\u4e5f\u7684\u786e\u662f\u7528\u7684\u9006\u5411\u601d\u7ef4\uff0c\u4f46\u662f\u8ddf\u5176\u4ed6\u5927\u4f6c\u4eec\u7684\u65b9\u6cd5\u8fd8\u662f\u6709\u4e00\u5b9a\u5dee\u522b\u7684\u3002~~\uff08\u624d\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u7528\u5176\u4ed6\u9898\u89e3\u7684\u65b9\u6cd5\u5199\u6302\u4e86\uff09~~\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\u9898\u610f\uff0c\u73b0\u5728\u6240\u6709\u70b9\u90fd\u88ab\u4ed6\u7684\u51fa\u8fb9\u675f\u7f1a\u4f4f\u4e86\uff0c\u6709\u51e0\u4e2a\u51fa\u8fb9\uff0c\u5c31\u6709\u51e0\u5c42\u675f\u7f1a\uff0c\u800c\u6211\u4eec\u4e3a\u4e86\u89e3\u6551\u4ed6\u4eec\uff0c\u4ece\u53cd\u5411\u8fb9\u5f80\u56de\u5e7f\u641c\uff0c\u5982\u679c\u9047\u5230\u4e00\u4e2a\u70b9\uff0c\u5c31\u4f7f\u5176\u7684\u675f\u7f1a\u51cf\u5c11\u4e00\u5c42\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u6700\u540e\u6ca1\u6709\u675f\u7f1a\u7684\u70b9\u5c31\u662f\u6211\u4eec\u5728\u6700\u540e\u6c42\u6700\u77ed\u8def\u65f6\u53ef\u4ee5\u7ecf\u8fc7\u7684\u70b9\u3002\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u51fa\u5ea6\u8bb0\u5f55\u675f\u7f1a\uff08\u6709\u6ca1\u6709\u53d1\u73b0\u50cf\u62d3\u6251\u6392\u5e8f\uff1f\uff09\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\n### \u65b9\u6cd5\n\n1. \u6211\u4eec\u53ef\u4ee5\u5148\u7edf\u8ba1\u539f\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\u3002\n2. \u53cd\u5411\u641c\u7d22\uff0c\u5e76\u51cf\u5c11\u675f\u7f1a\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u91cc\u8981\u8bb0\u5f55\u6bcf\u4e2a\u8fb9\u53ea\u80fd\u6709\u4e00\u6b21\u51cf\u5c11\u675f\u7f1a\u7684\u673a\u4f1a\uff0c\u4e0d\u7136\u5728\u5e7f\u641c\u7684\u65f6\u5019\uff0c\u5f88\u6709\u53ef\u80fd\u4e00\u6761\u8fb9\u4f1a\u88ab\u641c\u5230\u591a\u6b21\uff0c\u4ece\u800c\u5bfc\u81f4\u7b54\u6848\u9519\u8bef\uff09\n3. \u5224\u65ad\u54ea\u4e9b\u70b9\u53ef\u4ee5\u8d70\n4. \u8dd1\u6700\u77ed\u8def  \n\n### \u4ee3\u7801\uff1a\nps:(\u5c06\u4ee3\u7801\u91cc\u65e0\u5173\u7d27\u8981\u7684\u4ee3\u7801\u8fdb\u884c\u4e86\u538b\u884c\uff0c\u5982\u6709\u4e0d\u9002\uff0c\u8bf7\u8c05\u89e3)\n```\n#include <bits/stdc++.h>\nusing namespace std;\nstruct edge {\n\tint from, to, nex;\n} e[200100], ef[200010];\nint n, m, s, t, a, b, cnt, out_degree[10010], lin[10010], linf[10010], check[10100], vis[10100], dis[10010], flag[200010];\ninline void add(int a, int b)\n{\n\te[++cnt].from = a; e[cnt].to = b; e[cnt].nex = lin[a]; lin[a] = cnt; \n    ef[cnt].from = b; ef[cnt].to = a; ef[cnt].nex = linf[b]; linf[b] = cnt; \n    out_degree[a]++; \n}\ninline void init()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tint a, b;\n\t\tscanf(\"%d%d\", &a, &b);\n\t\tadd(a, b);\n\t}\n\tscanf(\"%d%d\", &s, &t);\n}\ninline void bfs()\n{\n\tqueue <int> q;\n\tq.push(t);\n\twhile(!q.empty())\n\t{\n\t\tint cur = q.front(); q.pop();\n\t\tfor (int i = linf[cur]; i; i = ef[i].nex)\n\t\t{\n\t\t\tif (flag[i]) continue; flag[i] = 1;//\u5751\uff1a\u4e00\u6761\u8fb9\u53ea\u80fd\u51cf\u5c11\u4e00\u6b21\n\t\t\tif (!out_degree[ef[i].to])//\u5751\uff1a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\n\t\t\t\t\tcontinue;\n\t\t\tout_degree[ef[i].to]--;\n\t\t\tq.push(ef[i].to);\n\t\t}\n\t}\n}\ninline void spfa()//\u6b7b\u6389\u7684\u7b97\u6cd5\n{\n\tfor (int i = 1; i <= n; i++)\n\t\tdis[i] = 2147483647;\n\tqueue <int> q;\n\tq.push(s);\n\tdis[s] = 0;\n\twhile (!q.empty())\n\t{\n\t\tint cur = q.front();\n\t\tq.pop();\n\t\tvis[cur] = 0;\n\t\tfor (int i = lin[cur]; i; i = e[i].nex)\n\t\t\tif (check[e[i].to] && dis[cur] + 1 < dis[e[i].to])\n\t\t\t{\n\t\t\t\tdis[e[i].to] = dis[cur] + 1;\n\t\t\t\tif (!vis[e[i].to])\n\t\t\t\t\tvis[e[i].to] = 1, q.push(e[i].to);\n\t\t\t}\n\t}\n}\nint main()\n{\n\tinit();\n\tbfs();\n\tfor (int i = 1; i <= n; i++)//\u5224\u65ad\u675f\u7f1a\u662f\u5426\u5df2\u7ecf\u6d88\u5931\n\t\tif (!out_degree[i])\n\t\t\tcheck[i] = 1;\n\tspfa();\n\tprintf(\"%d\", dis[t]);\n}\n```",
        "postTime": 1541507945,
        "uid": 60367,
        "name": "dagggg",
        "ccfLevel": 0,
        "title": "P2296 \u5bfb\u627e\u9053\u8def \u9898\u89e3"
    },
    {
        "content": "~~\u611f\u89c9\u601d\u8def\u4e0d\u9700\u8981\u89e3\u91ca\u4e86~~\n\n\u8fd9\u9053\u9898\u4e3b\u8981\u662f\u8981\u4ece\u540e\u5f80\u524d**\u9006\u5411\u601d\u8003**\u2014\u2014\u4ece\u7ec8\u70b9\u4fbf\u5229\u4e00\u904d\uff0c\u904d\u5386\u4e0d\u5230\u7684\u70b9\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\u70b9\n\n\u6240\u4ee5\u6211\u4eec\u4ece\u7ec8\u70b9\u4e00\u6b21bfs\u5904\u7406\u51fa\u8fd9\u4e9b\u4e0d\u5408\u6cd5\u7684\u70b9\uff0c\u7136\u540e\u4e00\u904d\u6700\u77ed\u8def\u5c31\u53ef\u4ee5A\u6389\u8fa3\n\n~~\u6211\u8ba4\u4e3a\u6211\u7684\u4ee3\u7801\u5f88\u597d\u61c2\u5c31\u662f\u6709\u70b9\u957f~~\n~~\u4e0d\u8fc7\u5199\u8d77\u6765\u597d\u50cf\u6bd4\u697c\u4e0a\u7684DALAO\u4eec\u65b9\u4fbf~~\n\n```\n//\n\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN=2e5+10;\nconst int INF=0x3f3f3f3f;\n\nint n,m,s,t;\nint head[MAXN],ver[MAXN],edge[MAXN],next[MAXN];//\u6b63\u7684\u524d\u5411\u661f\nint cnt;\nint rhead[MAXN],rver[MAXN],redge[MAXN],rnext[MAXN];//\u53cd\u7684\u524d\u5411\u661f\nint rcnt;\nbool vis[MAXN],rvis[MAXN];//\u6240\u6709\u5e26r\u7684\u90fd\u662f\u53cd\u7684\u2026\u2026\nint d[MAXN];\n\nqueue<int> rq;\npriority_queue<pair<int,int> > q;\n\ninline void add(int x,int y,int w)//\u6b63\u5411\u5b58\u8fb9\n{\n\t++cnt;\n\t\n\tver[cnt]=y,edge[cnt]=w,next[cnt]=head[x],head[x]=cnt;\n}\n\ninline void radd(int x,int y,int w)//\u53cd\u5411\u5b58\u8fb9\n{\n\t++rcnt;\n\t\n\trver[rcnt]=y,redge[rcnt]=w,rnext[cnt]=rhead[x],rhead[x]=rcnt;\n}\n\ninline void bfs(int t)\n{\n\tmemset(rvis,0,sizeof(rvis));\n\t\n\trq.push(t);\n\trvis[t]=1;\n\t\n\twhile(!rq.empty())\n\t{\n\t\tint u=rq.front();\n\t\trq.pop();\n\t\t\n//\t\tcout<<u<<endl;\n\t\t\n//\t\tcout<<u<<\" \"<<rvis[u]<<endl;\n\t\t\n\t\tfor(int i=rhead[u];i;i=rnext[i])\n\t\t{\n\t\t\tint y=rver[i];\n\t\t\t\n//\t\t\tcout<<y<<\" \"<<rvis[y]<<endl;\n\t\t\t\n\t\t\tif(rvis[y])continue;\n\t\t\t\n\t\t\trvis[y]=1;\n\t\t\trq.push(y);\n\t\t}\n\t}\n}\n\ninline void dijkstra(int s)\n{\n\tmemset(d,INF,sizeof(d));\n\tmemset(vis,0,sizeof(vis));\n\t\n\td[s]=0;\n\tq.push(make_pair(-d[s],s));\n\t\n\twhile(!q.empty())\n\t{\n\t\tint u=q.top().second;\n\t\tq.pop();\n\t\t\n\t\tif(vis[u])continue;\n\t\t\n\t\tvis[u]=1;\n\t\t\n\t\tfor(int i=head[u];i;i=next[i])\n\t\t{\n\t\t\tint y=ver[i],w=edge[i];\n\t\t\t\n            /*---------------------------*/\n\t\t\tbool flag=1;\n\t\t\tfor(int j=head[y];j;j=next[j])\n\t\t\t{\n\t\t\t\tint y2=ver[j];\n\t\t\t\t\n\t\t\t\tif(!rvis[y2])flag=0;\n\t\t\t}\n\t\t\tif(!flag)continue;\n            //\u5bf9\u6bcf\u4e2a\u70b9\u5904\u7406\uff1a\u5982\u679c\u51fa\u5ea6\u6307\u5411\u7684\u70b9\u6ca1\u6709\u88ab\u904d\u5386\u5230\uff0c\u8bf4\u660e\u8fd9\u4e2a\u70b9\u4e0d\u5408\u6cd5\n            /*---------------------------*/\n\t\t\t\n\t\t\tif(vis[y])continue;\n\t\t\tif(!rvis[y])continue;//\u7a33\u59a5\u4e00\u70b9\n\t\t\t\n\t\t\tif(d[y]>d[u]+w)\n\t\t\t{\n\t\t\t\td[y]=d[u]+w;\n\t\t\t\tq.push(make_pair(-d[y],y));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(false);\n\t\n\tcin>>n>>m;\n\t\n\tint x,y;\n\t\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tcin>>x>>y;\n\t\t\n\t\tadd(x,y,1);\n\t\tradd(y,x,1);\n\t}\n\t\n\tcin>>s>>t;\n\t\n\tbfs(t);\n\t\n//\tfor(int i=1;i<=n;++i)\n//\t\tcout<<rvis[i]<<endl;\n\n\tdijkstra(s);\n\t\n\tif(d[t]==INF)d[t]=-1;\n\tcout<<d[t]<<endl;\n\t\t\n\treturn 0;\n}\n```",
        "postTime": 1541238250,
        "uid": 56787,
        "name": "EAT_NH4HCO3",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u731b\u7136\u53d1\u73b0\u4ee5\u524d\u7684NOIP\u7684\u9898\u76ee\u597d\u660e\u6670\u5440\uff01 ~~\u6bd4\u67d0\u4e9b\u82b1\u91cc\u80e1\u54e8\u7684\u597d\u591a\u4e86~~\n\n\u73b0\u5728\u628a\u8fd9\u9053\u9898\u7684\u9898\u89e3\u5199\u4e86\u5427\uff01\n\n------------\n\u4e0a\u9898\uff1a[ P2296 \u5bfb\u627e\u9053\u8def](https://www.luogu.org/problemnew/show/P2296)\n\n\u672c\u9898\u5927\u81f4\u7684\u60c5\u51b5\u662f\u627e\u5230\u7b26\u5408\u8981\u6c42\u7684\u7684\u70b9\uff0c\u7136\u540e\u8dd1\u4e00\u904dBFS\u5c31\u591f\u4e86\u3002\uff08\u56e0\u4e3a\u6ca1\u6709\u8fb9\u6743\u3001\u70b9\u6743\uff09\n\n------------\n### \u601d\u8def\u5982\u4e0b\uff1a\n\n1. \u5b58\u4e00\u4e2a\u53cd\u56fe\uff08\u8fb9\u7684\u65b9\u5411\u4e0e\u539f\u6765\u76f8\u53cd\uff09\uff0c\u4ee5\u7ec8\u70b9\u4e3a\u8d77\u70b9\u641c\u4e00\u904d\uff0c\u627e\u5230\u6240\u6709\u4e0e\u7ec8\u70b9\u76f4\u63a5\u6216\u95f4\u63a5\u8fde\u63a5\u7684\u70b9\uff0c\u6253\u4e0a\u6807\u8bb0\uff08\u672c\u7a0b\u5e8f\u4e2d\u4e3avis\uff09\u3002\n2. \u518d\u627e\u6bcf\u4e2a\u70b9\u51fa\u5ea6\u6240\u5bf9\u7684\u70b9\uff0c\u9a8c\u8bc1\u662f\u5426\u6ee1\u8db3\u6bcf\u6761\u51fa\u5ea6\u6307\u5411\u7684\u70b9\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u76f8\u8fde\uff08\u5373vis\u503c\u662f\u5426\u4e3a1\uff09\uff0c\u7ed3\u679c\u8bb0\u5f55\u4e0b\u6765\uff08\u672c\u7a0b\u5e8f\u4e3aok\uff09\u3002\n3.  \u6109\u5feb\u5730\u8dd1BFS\uff0c\u672c\u4eba\u4f7f\u7528STL\u7684queue\u3002\n\n------------\n## CODE\uff1a\n\n```\n#include<bits/stdc++.h>\n#define Maxn 10002\n#define Maxm 200002\n\nusing namespace std;\n\nint n,m;\n\nstruct lline{\n\tint st,en,w,pre;\n}line1[Maxm],line2[Maxm];\n//1\nint tot1=0;\nint head1[Maxn];\nvoid push1(int a,int b){\n\ttot1++;\n\tline1[tot1].st=a;\n\tline1[tot1].en=b;\n\tline1[tot1].pre=head1[a];\n\thead1[a]=tot1;\n}\n//2\nint tot2=0;\nint head2[Maxn];\nvoid push2(int a,int b){\n\ttot2++;\n\tline2[tot2].st=a;\n\tline2[tot2].en=b;\n\tline2[tot2].pre=head2[a];\n\thead2[a]=tot2;\n}\n\nint ok[Maxn];\nint vis[Maxn];\n\nstruct bbfs{\n\tint loc,step;\n}bfs[Maxn];\n\nvoid DFS(int now){\n\t\n\tvis[now]=1;\n\tfor(int i=head2[now];i;i=line2[i].pre){\n\t\tint e=line2[i].en;\n\t\tif(vis[e]==0)\n\t\t\tDFS(e);\n\t}\n\t\n}\n\nint main(){\n\t\n\tcin>>n>>m;\n\t\n\tfor(int i=1;i<=m;i++){\n\t\tint s,e; cin>>s>>e;\n\t\tpush1(s,e); push2(e,s);\n\t}\n\tint S,T; cin>>S>>T;\n\t\n\tDFS(T);\n\t\n\tfor(int i=1;i<=n;i++){\n\t\tbool flag=true;\n\t\tbool DO=false;\n\t\tfor(int j=head1[i];j;j=line1[j].pre){\n\t\t\tint e=line1[j].en;\n\t\t\tDO=true;\n\t\t\tif(vis[e]==0){\n\t\t\t\tflag=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag&&DO)\n\t\t\tok[i]=1;\n\t}\n\tok[T]=1;\n\t\n//\tfor(int i=1;i<=n;i++) cout<<vis[i]<<\" \"; cout<<endl;\n//\tfor(int i=1;i<=n;i++) cout<<ok[i]<<\" \"; cout<<endl;\n\t\n\tqueue <int> q;\n\twhile(!q.empty()) q.pop();\n\t\n\tif(ok[S]==0){\n\t\tcout<<-1;\n\t\treturn 0;\n\t}\n\t\n\tmemset(vis,0,sizeof(vis));\n\tint frot=1; int tail=1;\n\tbfs[1].loc=S; bfs[1].step=0; vis[S]=1;\n\twhile(frot<=tail){\n\t\tint now=bfs[frot].loc;\n\t\tint ns=bfs[frot].step;\n\t\t//cout<<now<<endl;\n\t\tif(now==T){\n\t\t\tcout<<ns;\n\t\t\treturn 0;\n\t\t}\n\t\tfrot++;\n\t\tfor(int k=head1[now];k;k=line1[k].pre){\n\t\t\tint e=line1[k].en;\n\t\t\t//cout<<\" \"<<i<<\" \"<<e<<endl;\n\t\t\tif(vis[e]==0&&ok[e]==1){\n\t\t\t\tvis[e]=1;\n\t\t\t\ttail++;\n\t\t\t\tbfs[tail].loc=e;\n\t\t\t\tbfs[tail].step=ns+1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tcout<<-1;\n\treturn 0;\n}\n```",
        "postTime": 1540648416,
        "uid": 29304,
        "name": "DYI_ZJZGC",
        "ccfLevel": 0,
        "title": "10.27\u65e5\u5fd7\uff08NOIP2014D2T2\uff09"
    },
    {
        "content": "~~\u6211\u6ca1\u6709\u5176\u4ed6\u9898\u89e3\u91cc\u9762\u7684\u5927\u4f6c\u4eec\u5389\u5bb3\uff0c\u6240\u4ee5\u7528\u4e86\u6700\u6734\u7d20\u7684\u65b9\u6cd5\u2026\u2026\u8c8c\u4f3c\u53ef\u4ee5\u88abhack\uff0c\u4e0d\u4fe1\u4f60\u8bd5\u8bd5\uff08\u9003~~\n\n1.\u8f93\u5165\u7684\u65f6\u5019\u5efa\u4e24\u5f20\u56fe\uff0c\u6b63\u56fe\u548c\u53cd\u56fe\uff08\u5f85\u4f1a\u7528\u5f97\u4e0a\uff09\n\n2.bfs\u4e00\u904d\u53cd\u56fe\uff0c\u6c42\u51fa\u7ec8\u70b9\u80fd\u5230\u8fbe\u7684\u70b9\uff0c\u6253\u4e0avis\u6807\u8bb0\n\n3.\u6839\u636e\u9898\u76ee\u4e2d\u7684\u6761\u4ef6\uff0c\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5224\u65ad\u4e0e\u8be5\u70b9\u8fde\u63a5\u7684\u70b9\u662f\u5426**\u90fd**\u53ef\u4ee5\u88ab\u7ec8\u70b9\u8bbf\u95ee\n\n4.\u5982\u679c\u4e0d\u6ee1\u8db33\u4e2d\u7684\u6761\u4ef6\uff0c\u6253\u4e0adel\u6807\u8bb0\n\n5.\u6700\u77ed\u8defdij\u4e00\u904d\uff0c\u6ce8\u610f\u5728\u538b\u5165\u961f\u5217\u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e0bdel\u6807\u8bb0\n\n~~**\u63d0\u9192\u81ea\u5df1\u4e5f\u63d0\u9192\u4f60\uff1a**\u5982\u679c\u4f60\u662f\u91cd\u8f7d\u7684\u8bdd\uff0c\u4e0d\u7b49\u53f7\u5343\u4e07\u4e0d\u8981\u5199\u9519\u3002~~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#include<set>\n#define INF 2147483647\nusing namespace std;\ninline char nc(){\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\ninline int _read(){ char ch=nc();int sum=0; while(!(ch>='0'&&ch<='9'))ch=nc(); while(ch>='0'&&ch<='9')sum=sum*10+ch-48,ch=nc(); return sum; }\ntemplate<typename __Type_of_print>\nvoid print(__Type_of_print x)\n{ if(x<0){putchar('-');x=-x;} if(x>9)print(x/10); putchar(x%10+'0'); }\n\nstruct Node {\n\tint to , next;\n};\nNode e[200005] , z[200005];\nstruct Que {\n\tint num , len;\n\tbool operator < (const Que &a) const {\n\t\treturn a.len < len;\n\t}\n\tQue(int nn , int dd) {\n\t\tnum = nn , len = dd;\n\t}\n};\nint n , m , head[10005] , tot , s , t , ans , del[10005] , dis[10005] , vis[10005] , headz[10005] , totz;\ninline int mymax(int a , int b) { return a>b?a:b; }\n\ninline void add(int x , int y) {\n\ttot++;\n\te[tot].next = head[x];\n\te[tot].to = y;\n\thead[x] = tot;\n}\n\ninline void addz(int x , int y) {\n\ttotz++;\n\tz[totz].next = headz[x];\n\tz[totz].to = y;\n\theadz[x] = totz;\n}\n\ninline void bfs(int x) {\n\tqueue<int>q;\n\tq.push(x);\n\tvis[x] = 1;\n\twhile(!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u]; i; i=e[i].next) {\n\t\t\tint v = e[i].to;\n\t\t\tif(vis[v])\n\t\t\t\tcontinue;\n\t\t\tq.push(v);\n\t\t\tvis[v] = 1;\n\t\t}\n\t}\n}\n\ninline void dij(int s) {\n\tpriority_queue<Que>q;\n\tfor(int i=1; i<=n; i++)\n\t\tdis[i] = INF;\n\tdis[s] = 0;\n\tq.push(Que(s,dis[s]));\n\twhile(!q.empty()) {\n\t\tQue u = q.top();\n\t\tq.pop();\n\t\tif(dis[u.num] != u.len)\n\t\t\tcontinue;\n\t\tfor(int i=headz[u.num]; i; i=z[i].next) {\n\t\t\tint v = z[i].to;\n\t\t\tif(del[v])\n\t\t\t\tcontinue;\n\t\t\tif(dis[v] > dis[u.num] + 1) {\n\t\t\t\tdis[v] = dis[u.num] + 1;\n\t\t\t\tq.push(Que(v , dis[v]));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tn = _read() , m = _read();\n\tfor(int i=1; i<=m; i++) {\n\t\tint x , y;\n\t\tx = _read() , y = _read();\n\t\tadd(y , x); addz(x , y);\n\t}\n\ts = _read();\n\tt = _read();\n\tbfs(t);\n\tfor(int i=1; i<=n; i++) {\n\t\tint flag = 0;\n\t\tfor(int j=headz[i]; j; j=z[j].next) {\n\t\t\tint v = z[j].to;\n\t\t\tif(!vis[v]) {\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t\tdel[i] = 1;\n\t}\n\tdij(s);\n\tif(dis[t]==INF)\n\t\tdis[t] = -1;\n\tprint(dis[t]);\n\treturn 0;\n}\n```",
        "postTime": 1540177643,
        "uid": 37427,
        "name": "\u66f9\u8001\u5e08",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u4f3c\u4e4e\u6ca1\u6709dijstra\u5806\u4f18\u5316\u7684\u4ee3\u7801\uff0c\u5728\u6b64\u6765\u53d1\u4e00\u53d1\u3002\n\n\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e00\u9898bfs\u5373\u53ef\uff0c\u4f46\u662f\u4e3a\u4e86\u89c4\u8303\u5316\uff0c\u672c\u4eba\u8fd8\u662f\u6253\u4e86\u4e00\u4e2adijstra\u7ec3\u6700\u77ed\u8def\u3002\n\n\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4ece\u7ec8\u70b9\u5f80\u56de\u641c\uff0c\u82e5\u6709\u641c\u4e0d\u5230\u7684\u70b9\uff0c\u5219\u4e0e\u5b83\u76f8\u8fde\u7684\u70b9\u90fd\u4e0d\u80fd\u8d70\u3002\u7136\u540e\u518d\u6700\u77ed\u8def\u4e00\u53d1\uff0c\u5c31\u5b8c\u4e86\u2026\u2026\n\n\u518d\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u6211\u7684\u7a0b\u5e8f\u5427\uff0cSTL\u961f\u5217\uff0c\u5355\u8c03\u961f\u5217\uff0c\u90bb\u63a5\u8868\uff0cdijstra\uff0c\u5c31\u7528\u8fd9\u51e0\u4e2a\u7b97\u6cd5\u6216\u6570\u636e\u7ed3\u6784\uff0c\u662f\u4ec0\u4e48\u76f8\u4fe1\u5927\u5bb6\u5df2\u7ecf\u975e\u5e38\u4e86\u89e3\u4e86\u3002\n\n\u9274\u4e8e\u697c\u4e0b\u5404\u5927\u795e\u7287\u5df2\u7ecf\u5c06\u601d\u8def\u7684\u7ec6\u8282\u8bf4\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8865\u5145\u4e86\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<cmath>\n#include<queue>\n#include<vector>\nusing namespace std;\nint kd[500000]={0};\nint head[500000]={0},tail[500000]={0};\nint cnt=0;\nstruct Edge\n{\n    int t,w;\n    int tnext;\n    int hnext;\n}edge[500000];//\u90bb\u63a5\u8868\ninline void _insert(int a,int b)//\u90bb\u63a5\u8868\u63d2\u5165\u8fb9\n{\n    for(int i=head[a];i!=0;i=edge[i].hnext)//\u5224\u91cd\u8fb9\uff0c\u5176\u5b9e\u4e5f\u6ca1\u6709\u4ec0\u4e48\u5fc5\u8981\n    {\n        if(edge[i].w==b)\n        {\n            return;\n        }\n    }\n    cnt++;\n    edge[cnt].t=a;\n    edge[cnt].w=b;\n    edge[cnt].hnext=head[a];\n    edge[cnt].tnext=tail[b];\n    head[a]=tail[b]=cnt;//\u6dfb\u52a0\u8fb9\n}\nstruct E\n{\n    int node,v;\n};//\u4f18\u5148\u961f\u5217\u7ed3\u6784\u4f53\nstruct cmp//\u4f18\u5148\u961f\u5217\u6bd4\u8f83\u7ed3\u6784\u4f53\n{\n    bool operator()(const E a,const E b)\n    {\n        return a.v>b.v;\n    }\n};\nqueue<int>arrive;//\u7528\u4e8e\u5224\u65ad\u662f\u5426\u80fd\u5230\u7ec8\u70b9\nbool visit[500000]={0};\nint dis[500000];\nbool cd[500000]={0};\ninline int dy()//\u8bfb\u5165\u4f18\u5316\uff0c\u9632\u6b62\u5361\u5e38\n{\n    int shu=0;\n    char c;\n    c=getchar();\n    while(c<'0'||c>'9')c=getchar();\n    while(c>='0'&&c<='9')shu=shu*10+c-'0',c=getchar();\n    return shu;\n}\nint main()\n{\n    int n,m;\n    int s,e;\n    int a,b;\n    int lc;\n    n=dy(),m=dy();\n    for(int i=1;i<=n;i++)\n    {\n        dis[i]=2e9;\n    }\n    for(int i=0;i<m;i++)\n    {\n        a=dy(),b=dy();\n        _insert(a,b);\n    }\n    s=dy(),e=dy();\n    kd[e]=2;\n    arrive.push(e);\n    while(!arrive.empty())//\u641c\u904d\u6240\u6709\u80fd\u5230\u7ec8\u70b9\u7684\u70b9\n    {\n        lc=arrive.front();\n        if(!cd[lc])\n        {\n            cd[lc]=true;//\u5df2\u7ecf\u641c\u5230\u8fc7\uff0c\u9632\u6b62\u73af\n            for(int i=tail[lc];i!=0;i=edge[i].tnext)\n            {\n                lc=edge[i].t;\n                kd[lc]=2;//kd==2\u5373\u53ef\u4ee5\u5230\u8fbe\n                arrive.push(lc);\n            }\n        }\n        arrive.pop();\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(!kd[i])//\u82e5\u4e0d\u53ef\u5230\u8fbe\uff0c\u5373kd==0\n        {\n            for(int j=tail[i];j!=0;j=edge[j].tnext)\n            {\n                lc=edge[j].t;\n                kd[lc]=1;//\u6ce8\u610f\u4e0d\u80fd\u8d4b\u503c\u4e3a0\uff0c\u8981\u8981\u8d4b\u503c\u4e3a1\uff0c\u5426\u5219\u4fbf\u4f1a\u65e0\u7ebf\u7684\u641c\u4e0b\u53bb\uff0c\u80cc\u79bb\u4e86\u53ea\u5f80\u5916\u62d3\u5c55\u4e00\u5c42\u7684\u76ee\u7684\n            }\n        }\n    }\n    int curr=s;\n    dis[curr]=0;\n    priority_queue<E,vector<E>,cmp>dij;//dijstra\u4f18\u5148\u961f\u5217\n    E wl;\n    wl.node=s,wl.v=0;\n    dij.push(wl);\n    while(!dij.empty())//dijstra\u4e3b\u7a0b\u5e8f\uff0c\u5982\u679c\u770b\u4e0d\u61c2\uff0c\u505a\u505a\u6a21\u677f\u9898\uff0c\u8fd9\u91cc\u4e0d\u8be6\u7ec6\u8bb2\u8ff0\n    {\n        curr=dij.top().node;\n        dij.pop();\n        if(visit[curr])continue;//\u5df2\u7ecf\u4e3a\u6700\u77ed\n        visit[curr]=true;\n        for(int i=head[curr];i!=0;i=edge[i].hnext)\n        {\n            lc=edge[i].w;\n            if(kd[lc]==2)//\u53ef\u4ee5\u5230\u8fbe\n            {\n                if(dis[lc]>dis[curr]+1)\n                {\n                    dis[lc]=dis[curr]+1;\n                    wl.node=lc,wl.v=dis[lc];\n                    dij.push(wl);//\u66f4\u65b0\n                }\n            }\n        }\n    }\n    if(curr==e)//\u5df2\u5230\u8fbe\u7ec8\u70b9\u65f6curr\u4e0d\u80fd\u518d\u52a8\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u8fd9\u6837\u5224\u65ad\n    {\n        printf(\"%d\",dis[e]);\n    }\n    else//\u8bb0\u5f97\u5224\u65ad\n    {\n        printf(\"-1\");\n    }\n    return 0;\n}\n```",
        "postTime": 1506268402,
        "uid": 32275,
        "name": "KesdiaelKen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u770b\u4e86\u51e0\u7bc7\u9898\u89e3\u53d1\u73b0\u6ca1\u6709\u7528**\u4e24\u904ddijkstra**\u7684\uff0c\u90a3\u6211\u5c31\u6765\u6c34\u4e00\u53d1\n\n\u9996\u5148\u8bfb\u9898\uff1a\u8fd9\u4e2a\u9898\u7684\u672c\u8d28\u662f\u627e\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5f88\u5bb9\u6613\u60f3\u5230dijkstra\n\n\u4f46\u662f\u5728\u5355\u6e90\u6700\u77ed\u8def\u7684\u57fa\u7840\u4e0a\uff0c\u8fd9\u4e2a\u9898\u52a0\u4e86\u4e00\u4e2a\u9650\u5236\u6761\u4ef6\uff1a**\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a**\n\n\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u5c31\u662f\u8bf4\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u51fa\u8fb9\u76f4\u63a5\u76f8\u8fde\u7684\u6240\u6709\u8282\u70b9\u90fd\u53ef\u4ee5\u5230\u8fbe\u7ec8\u70b9\u3002\n\n\u5b9a\u4e49\u4e00\u4e2a\u70b9\u7684\u62d3\u5c55\u4e3a\u8fd9\u4e00\u4e2a\u8282\u70b9\u7684\u51fa\u8fb9\u6240\u8fde\u63a5\u7684\u70b9\u7684\u96c6\u5408\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5982\u679c\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u7684\u62d3\u5c55\u7684\u96c6\u5408\u6709\u81f3\u5c11\u4e00\u4e2a\u70b9\u4e0d\u80fd\u5230\u8fbe\u7ec8\u70b9\uff0c\u8fd9\u6761\u8def\u5f84\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\u3002\n\n\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u80fd\u591f\u5230\u8fbe\u7ec8\u70b9\uff0c\u5f88\u5bb9\u6613\u5c31\u60f3\u5230**\u5efa\u53cd\u56fe**\uff0c\u7136\u540e\u8dd1\u5355\u6e90\u6700\u77ed\u8def\u3002\u8fd9\u6837\u5982\u679c\u7ec8\u70b9\u548c\u8fd9\u4e2a\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u4e3ainf\uff0c\u5219\u8bc1\u660e\u8fd9\u4e24\u4e2a\u70b9\u4e0d\u80fd\u4e92\u76f8\u5230\u8fbe\n\n\u7136\u540e\u53ea\u9700\u8981\u6b63\u7740\u6765\u4e00\u904ddijkstra\u5c31\u884c\u4e86\u3002\u6ce8\u610f\u5728\u8fdb\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u5224\u65ad\u4e00\u4e2a\u70b9\u7684\u62d3\u5c55\u662f\u5426\u80fd\u591f\u5230\u8fbe\uff0c\u4e5f\u5c31\u662f\u770b\u53cd\u56fe\u4e0a\u8fd9\u4e2a\u70b9\u548c\u7ec8\u70b9\u7684\u8ddd\u79bb\n\n\u5b9e\u9645\u5199\u8d77\u6765\u4e5f\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c~~\u4e3b\u8981\u5c31\u662fCV\u5927\u6cd5~~\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nconst int N=10005,M=200005,inf=0x7fffffff;\nint n,m,s,t;\nint head1[N],head2[N],cnt1,cnt2;\nstruct edge\n{\n\tint to,dis,nxt;\n}edg1[M],edg2[M];\nvoid add1(int u,int v)\n{\n\tedg1[++cnt1].dis=1;\n\tedg1[cnt1].to=v;\n\tedg1[cnt1].nxt=head1[u];\n\thead1[u]=cnt1;\n}\nvoid add2(int u,int v)\n{\n\tedg2[++cnt2].dis=1;\n\tedg2[cnt2].to=v;\n\tedg2[cnt2].nxt=head2[u];\n\thead2[u]=cnt1;\n}\nint dis1[N],dis2[N];\nbool vis1[N],vis2[N];\n\nvoid dij2()\n{\n\tpriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > q;\n\tq.push(make_pair(0,t));\n\tfor(int i=1;i<=n;i++) dis2[i]=inf;dis2[t]=0;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.top().second;\n\t\tq.pop();\n\t\tif(vis2[u]) continue;\n\t\tvis2[u]=1;\n\t\tfor(int i=head2[u];i;i=edg2[i].nxt)\n\t\t{\n\t\t\tint v=edg2[i].to;\n\t\t\tif(dis2[u]+edg2[i].dis<dis2[v])\n\t\t\t{\n\t\t\t\tdis2[v]=dis2[u]+edg2[i].dis;\n\t\t\t\tq.push(make_pair(dis2[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid dij1()\n{\n\tpriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > q;\n\tq.push(make_pair(0,s));\n\tfor(int i=1;i<=n;i++) dis1[i]=inf;dis1[s]=0;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.top().second;\n\t\tq.pop();\n\t\tif(vis1[u]) continue;\n\t\tvis1[u]=1;\n\t\tfor(int i=head1[u];i;i=edg1[i].nxt)\n\t\t{\n\t\t\tint v=edg1[i].to;bool flag=0;\n\t\t\tif(dis1[u]+edg1[i].dis<dis1[v]&&dis2[v]!=inf)\n\t\t\t{\n\t\t\t\tfor(int j=head1[v];j;j=edg1[j].nxt)\n\t\t\t\t{\n\t\t\t\t\tint v1=edg1[j].to;\n\t\t\t\t\tif(dis2[v1]==inf) flag=1;\n\t\t\t\t}\n\t\t\t\tif(flag==1) continue;\n\t\t\t\tdis1[v]=dis1[u]+edg1[i].dis;\n\t\t\t\tq.push(make_pair(dis1[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,u,v;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd1(u,v);\n\t\tadd2(v,u);\n\t}\n\tscanf(\"%d%d\",&s,&t);\n\tdij2();\n\tdij1();\n\tif(dis1[t]==inf) printf(\"-1\\n\");\n\telse printf(\"%d\",dis1[t]);\n}\n```\n\n",
        "postTime": 1573195727,
        "uid": 177510,
        "name": "\u5c0f\u849f\u84bb\u76ae\u76ae\u9c7c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u601d\u8def\u6bd4\u8f83\u76f4\u63a5\uff1a\n\n1\u00b0 \u5efa\u53cd\u56fe\uff0c\u4ece$t$\u5f00\u59cb$dfs$\uff0c\u4ee5\u5f97\u5230\u6240\u6709\u80fd\u5230\u8fbe\u5230$t$\u7684\u70b9\uff0c\u7528$rc[]$\u6570\u7ec4\u8bb0\u5f55\u3002$rc[u]==1$\u8868\u793a$u$\u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u5230\u8fbe$t$\uff1b\n```cpp\n//vector<int> RG[N];\u8868\u793a\u53cd\u56fe\nvoid dfs(int u)\n{\n    rc[u]=1;\n    for(int i=0;i<RG[u].size();i++)\n    {\n        int v=RG[u][i];\n        if(rc[v]==0)dfs(v);\n    }\n}\n                                   \n```\n\n\n2\u00b0  \u63a2\u7a76\u6bcf\u4e00\u4e2a\u70b9$u$\u662f\u5426\u80fd\u88ab\u9009\u62e9\uff08\u80fd\u5426\u53c2\u4e0e\u6784\u6210\u8def\u5f84\uff09\uff0c\u7528$sel[]$\u6570\u7ec4\u8bb0\u5f55\u3002$sel[u]==1$\u8868\u793a$u$\u662f\u53ef\u4ee5\u51fa\u73b0\u5728\u8def\u5f84\u4e0a\u7684\u70b9\u3002\u679a\u4e3e$u$\u7684\u51fa\u8fb9\uff0c\u6c42$sel[u]$:\n$$\nsel[u]=rc[v_1] \\& rc[v_2] \\&...\\&rc[v_{end}].\n$$\n\u5176\u4e2d\uff0c$v_1,v_2,...v_{end}$\u662f$u$\u7684\u51fa\u8fb9\u76f4\u8fde\u7684\u70b9\uff1b$\\&$\u662f\u903b\u8f91\u4e0e\u8fd0\u7b97\u7b26\uff1b\n```cpp\n//vector<int> G[N];\u8868\u793a\u539f\u56fe\nfor(int u=1;u<=n;u++)\n{\n    for(int i=0;i<G[u].size();i++)\n    {\n       \tint v=G[u][i];\n        sel[u]&=rc[v];\n    }\n}\n```\n\n\n3\u00b0 \u5bf9\u4e8e\u6240\u6709$sel[vertex]==1$\u7684\u70b9\uff0c\u8dd1$Dijkstra$\u6a21\u677f\u3002\n\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ninline int read()\n{\n    char c=getchar();int x=0;\n    for(;!isdigit(c);c=getchar());\n    for(;isdigit(c);c=getchar())\n        x=x*10+c-'0';\n    return x;\n}\nconst int N=10005,M=200005,INF=0x3f3f3f3f;\nbool rc[N],GG[N][N],sel[N];\nint d[N];\nint n,m,s,t;\nvector<int> G[N];\nvector<int> RG[N];\nbool vis[N];\npriority_queue< pair<int,int> >Q;\n\nvoid dfs(int u)\n{\n    rc[u]=1;\n    for(int i=0;i<RG[u].size();i++)\n    {\n        int v=RG[u][i];\n        if(rc[v]==0)dfs(v);\n    }\n}\n\nvoid dijk()\n{\n    for(int i=1;i<=n;i++)d[i]=INF;\n    memset(vis,0,sizeof(vis));\n    d[s]=0;\n    Q.push(make_pair(0,s));\n    if(sel[s]==0)return;\n    while(!Q.empty())\n    {\n        int u=Q.top().second;\n        Q.pop();\n        if(vis[u])continue;\n        vis[u]=1;\n        for(int i=0;i<G[u].size();i++)\n        {\n            int v=G[u][i];\n            if(sel[v]&&d[v]>d[u]+1)\n            {\n                d[v]=d[u]+1;\n                Q.push(make_pair(-d[v],v));\n            }\n        }\n    }\n}\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n    {\n        int u=read();\n        int v=read();\n        if(u==v)continue;\n        if(GG[u][v])continue;\n        GG[u][v]=1;\n        G[u].push_back(v);\n        RG[v].push_back(u);\n    }\n    cin>>s>>t;\n    dfs(t);\n    for(int i=1;i<=n;i++)sel[i]=1;\n    for(int u=1;u<=n;u++)\n    {\n        for(int i=0;i<G[u].size();i++)\n        {\n            int v=G[u][i];\n            sel[u]&=rc[v];\n        }\n    }\n    dijk(); \n    if(d[t]!=INF)cout<<d[t];\n    else cout<<\"-1\";\n\treturn 0;\n}\n\n```\n",
        "postTime": 1573115393,
        "uid": 68987,
        "name": "kion",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u5199\u5728\u524d\u9762:\n\n[\u5728\u7a9d\u7684\u535a\u5ba2\u98df\u7528\u53e3\u611f\u66f4\u4f73](https://www.luogu.org/blog/zdsrs060330/solution-p2296)\n\n\u8fd9\u5e94\u8be5\u662f2019CSP\u4e4b\u524d\u5199\u7684\u6700\u540e\u4e00\u7bc7\u9898\u89e3\u5427\n\n\u5173\u4e8e\u7801\u98ce\u7b49\u7ec6\u8282\u8bf4\u660e:\n\n- \u7528\u4e86\u94fe\u5f0f\u524d\u5411\u661f\n\n- \u7801\u98ce\u5947\u5f02,\u662f\u849f\u84bb\u98ce\u7684\n\n- $n^2$\u80fd\u8fc7,\u6ca1\u52a0\u5806\u4f18\u5316\n\n------------\n\n\u601d\u8def:\n\n- \u53cd\u5411\u5efa\u8fb9,\u4ece\u7ec8\u70b9\u8dd1\u4e00\u6b21dijkstra\n\n- inf\u503c\u7684\u5220\u6389\u81ea\u5df1\u548c\u51fa\u8fb9\u662f\u5230\u81ea\u5df1\u7684\u70b9 \n\n- \u6b63\u5e38\u7684\u5efa\u8fb9\u4ece\u8d77\u70b9\u8dd1\u4e00\u6b21dijkstra \n\n\n------------\n\n\n\u8be6\u7ec6\u89e3\u6790:\n\n\u5c31\u662f\u56e0\u4e3a\u6761\u4ef6\u4e00\u5bfc\u81f4\u6211\u4e0d\u5f97\u5957\u677f\u5b50!\u6211\u8981\u628a\u6761\u4ef6\u4e00\u541e\u6389!\n\n\u600e\u4e48\u541e\u5462?\u6211\u4eec\u53ea\u4fdd\u7559\u90a3\u4e9b\u6240\u6709\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u7684\u70b9\u5373\u53ef\n\n\n\u6211\u4eec\u53ef\u4ee5\u53cd\u5411\u5efa\u56fe,\u4ece\u7ec8\u70b9\u51fa\u53d1\u8dd1\u4e00\u8fb9dijkstra\n\n\u8fd9\u6837\u6240\u6709\u8ddd\u79bb\u7ec8\u70b9\u4e3ainf\u7684\u5c31\u65e0\u6cd5\u5230\u8fbe\u7ec8\u70b9,\u5220\u6389\u5b83\u4eec!\n\n(\u5f00\u4e2abool\u6570\u7ec4flag,\u5c06\u5b83\u4eec\u7684flag\u503c\u8bbe\u4e3a1)\n\n\u628a\u51fa\u8fb9\u5230\u8ddd\u79bb\u7ec8\u70b9\u662finf\u7684\u70b9\u5220\u6389,\u4ecd\u7136\u4f7f\u7528flag\u6570\u7ec4\u53ef\u80fd\u4f1a\u591a\u5220\u4e00\u4e9b\u70b9\u600e\u4e48\u529e?\n\n\u7528bool\u6570\u7ec4tmp\u5b58\u50a8\u4e00\u5f00\u59cb\u7684flag\u6570\u7ec4\u7684\u503c,\u66f4\u65b0\u5168\u90e8\u66f4\u65b0\u5230flag\u6570\u7ec4\n\n```\nfor(int i=1;i<=n;i++)\n\tif(dist[i]==inf)\n\t\ttmp[i]=flag[i]=1;\nfor(int i=1;i<=m;i++)\n\tif(tmp[V[i]]) flag[U[i]]=1;\n```\n\n\u63a5\u4e0b\u6765\u5c31\u53ea\u8981\u5728\u5269\u4e0b\u7684\u56fe\u4e0a\u6109\u5feb\u5730\u8dd1dijkstra\u4e86\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define inf 0x3f3f3f3f\nint n,m,cnt,s,t;\nint hd[10005],dist[10005];\nbool vis[100005],flag[100005],tmp[100005];\n//vis[i]:i\u70b9\u662f\u5426\u5df2\u88ab\u786e\u5b9a\u6700\u77ed\u8def,flag[i]:i\u70b9\u662f\u5426\u88ab\u5220 \nint U[200005],V[200005],to[200005],nex[200005];\nvoid add(int u,int v){\n\tto[++cnt]=v;\n\tnex[cnt]=hd[u];\n\thd[u]=cnt;\n}\nvoid dijkstra(int from){\n\tmemset(dist,0x3f,sizeof(dist));\n\tint cur=from;\n\tdist[from]=0;\n\twhile(!vis[cur]){\n\t\tvis[cur]=1;\n\t\tfor(int i=hd[cur];i;i=nex[i]){\n\t\t\tint v=to[i];\n\t\t\tif(dist[v]>dist[cur]+1)\n\t\t\t\tdist[v]=dist[cur]+1;\n\t\t}\n\t\tint minn=inf;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(!flag[i]&&!vis[i]){\n\t\t\t\tif(minn>dist[i]){\n\t\t\t\t\tminn=dist[i];\n\t\t\t\t\tcur=i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&U[i],&V[i]);\n\t\tadd(V[i],U[i]);\n\t}\n\tscanf(\"%d%d\",&s,&t);\n\tdijkstra(t);\n\tfor(int i=1;i<=n;i++)\n\t\tif(dist[i]==inf)\n\t\t\ttmp[i]=flag[i]=1;\n\tcnt=0;\n\tmemset(vis,0,sizeof(vis));\n\tmemset(hd,0,sizeof(hd));\n\tmemset(to,0,sizeof(to));\n\tmemset(nex,0,sizeof(nex));\n\tfor(int i=1;i<=m;i++)\n\t\tif(tmp[V[i]]) flag[U[i]]=1;\n\tfor(int i=1;i<=m;i++)\n\t\tif(!flag[U[i]]&&!flag[V[i]])\n\t\t\tadd(U[i],V[i]);\n\tdijkstra(s);\n\tif(dist[t]==inf) printf(\"-1\\n\");\n\telse printf(\"%d\\n\",dist[t]);\n\treturn 0;\n}\n```",
        "postTime": 1573024683,
        "uid": 106738,
        "name": "_Felix",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "> \u8fd9\u662f\u4e00\u9053\u6709\u70b9\u8ba9\u6211\u96be\u53d7\u7684\u9898\n>\n> \u867d\u7136\u5176\u5b9e\u5f88\u7b80\u5355\n\n# \u9898\u610f\n\n\u5728\u4e00\u4e2a\u53ea\u4fdd\u8bc1\u7ec8\u70b9\u6ca1\u6709\u51fa\u8fb9\u7684\uff0c\u4e14\u8fb9\u6743\u5747\u4e3a $0$ \u7684\u6709\u5411\u56fe\u4e0a\u6c42\u6700\u77ed\u8def\n\n\u4f46\u662f\u8fd9\u6761\u8def\u7ecf\u8fc7\u7684\u6bcf\u4e00\u4e2a\u70b9\u5fc5\u987b\u6ee1\u8db3\uff0c\u5b83\u7684\u6bcf\u4e00\u6761\u51fa\u8fb9\u8fde\u63a5\u7684\u70b9\u90fd\u53ef\u4ee5\u5230\u8fbe\u7ec8\u70b9\n\n\u4f3c\u4e4e\u5f88\u9ebb\u70e6\uff08\u6211\u63cf\u8ff0\u80fd\u529b\u4e0d\u592a\u884c\n\n\u9898\u76ee\u4e2d\u7684\u56fe\u4e5f\u53ef\u4ee5\u5f88\u597d\u7684\u7ed9\u4f60\u63d0\u793a\n\n# \u89e3\u6cd5\n\n\u6700\u77ed\u8def\u7684\u8bdd\u7528\u4ec0\u4e48\u90fd\u53ef\u4ee5\uff08bfs \u6216 dij\n\n\u9898\u76ee\u7684\u91cd\u70b9\u5728\u4e8e\u627e\u51fa\u8fd9\u4e9b\u4e0d\u80fd\u7ecf\u8fc7\u7684\u70b9\n\n\u65e2\u7136\u4e00\u4e2a\u70b9\u5230\u4e0d\u4e86\u7ec8\u70b9\uff0c\u90a3\u4e48\u4ece\u7ec8\u70b9\u5012\u7740\u8d70\uff0c\u4e5f\u5230\u4e0d\u4e86\u8fd9\u4e9b\u70b9\n\n\u5efa\u53cd\u56fe\u6df1\u641c\u5373\u53ef\uff08\u4e0d\u592a\u61c2\u4e3a\u4ec0\u4e48dalao\u4eec\u90fd\u7528\u7684\u662fbfs\n\n```cpp\ninline void dfs(int x){\t\t// rab \u662f\u6807\u8bb0\u6570\u7ec4\n\tif(rab[x]) return;\t\t// \u9047\u4e0a\u73af\u4fbf\u8fd4\u56de\n\trab[x]=1;\n\tfor(int i=hear[x];i;i=rxt[i]){\n\t\tdfs(ro[i]);\n\t}\t\t\t\t\t\t// \u4e0d\u53bb\u9664\u6807\u8bb0\uff0c\u53ef\u4ee5\u5f97\u5230\u7ec8\u70b9\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\n}\n```\n\n\u7136\u540e\u5bf9\u6bcf\u4e2a\u70b9\u62d3\u5c55\u5b83\u7684\u8fb9\n\n```cpp\nfor(int i=1;i<=n;++i){\t\t// \u904d\u5386\u6bcf\u4e2a\u70b9\n\ttret[i]=1;\n\tfor(int j=head[i];j;j=nxt[j])\t// \u904d\u5386\u6bcf\u4e2a\u70b9\u7684\u51fa\u8fb9\n\t\tif(rab[to[j]]==0){\n\t\t\ttret[i]=0;\t\t// \u5982\u679c\u51fa\u8fb9\u4e2d\u6709\u65e0\u6cd5\u5230\u8fbe\u7684\u70b9\uff0c\u6807\u8bb0\u8fd9\u4e2a\u70b9\u4e0d\u53ef\u7ecf\u8fc7\n\t\t\tbreak;\n\t\t}\n}\n```\n\n\u7136\u540e\u7b80\u5355\u7684spfa\n\n## \u4e0a\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++\u00b7h>\nusing namespace std;\n\nconst int N = 10009,M = 200009,inf = 1061109567;\nint n,m,s,t;\nint head[N],nxt[M],to[M],tl=0;\t\t\t// \u6b63\u8fb9\nint hear[N],rxt[M],ro[M],rl=0;\t\t\t// \u53cd\u8fb9\nint dis[N];\n//bitset<N> used,rab,hdb,tret;\t\t\t// \u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u8d77\u53d8\u91cf\u540d\uff1f\u6211\u4e5f\u4e0d\u77e5\u9053\nbool rab[N],tret[N];\t\t\t\t\t// tret\u6570\u7ec4\u6807\u8bb0\u4e0d\u80fd\u7ecf\u8fc7\u7684\u70b9\n\t\t\t\t\t\t\t\t\t\t// rab\u6570\u7ec4\u6807\u8bb0\u80fd\u5230\u8fbe\u7ec8\u70b9\u7684\u70b9\ninline int read(){\n\tint s=0,w=1;char ch;\n\twhile(ch=getchar(),!isdigit(ch)) if(ch=='-') w=-1;\n\twhile(isdigit(ch)) s=s*10+ch-'0',ch=getchar();\n\treturn s*w;\n}\n\ninline void adde(int x,int y){\t\t\t// \u5efa\u6b63\u8fb9\n\tto[++tl]=y;nxt[tl]=head[x];head[x]=tl;\n}\ninline void addr(int x,int y){\t\t\t// \u5efa\u53cd\u8fb9\n\tro[++rl]=y;rxt[rl]=hear[x];hear[x]=rl;\n}\n\ninline int _spfa(){\n\tqueue<int> spfa;\n\tmemset(dis,0x3f,sizeof(dis));\n\tspfa.push(s);\n\tdis[s]=0;\n\twhile(!spfa.empty()){\n\t\tint w=spfa.front();spfa.pop();\n\t\tfor(int i=head[w];i;i=nxt[i]){\n\t\t\tif(dis[to[i]]>dis[w]+1&&tret[to[i]]){\n\t\t\t\tdis[to[i]] = dis[w]+1;\n\t\t\t\tspfa.push(to[i]); \n\t\t\t}\n\t\t}\n\t}\n\treturn dis[t]==inf?-1:dis[t];\n}\n\n/*\ninline int dfs(int x){\t\t\t\t// \u5c1d\u8bd5\u6b63\u5411\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u9057\u9ab8\n\tif(used[x]) return -1;\t\t\t// \u8be5\u600e\u4e48\u505a\u5c31\u600e\u4e48\u505a\uff0c\u4e0d\u8981\u60f3\u6843\u5b50\n\tif(hdb[x]) return rab[x];\n\tused[x]=1;\n\tint ret=-1;\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tint j=dfs(to[i]);\n\t\tif(j==1) ret=1;\n\t\tif(j==0&&ret==-1) ret=0;\n\t}\n\tused[x]=0;\n\tif(ret!=-1) hdb[x]=1,rab[x]=ret;\n\treturn ret;\n}\n*/\n\ninline void dfs(int x){\n\tif(rab[x]) return;\n\trab[x]=1;\n\tfor(int i=hear[x];i;i=rxt[i]){\n\t\tdfs(ro[i]);\n\t}\n}\n\nint main(){\n\tn=read(),m=read();\n\tfor(int i=1,x,y;i<=m;++i){\n\t\tx=read(),y=read();\n\t\tadde(x,y);addr(y,x);\n\t}\n\ts=read(),t=read();\n\tdfs(t);\n\tif(rab[s]==0){\t\t\t\t\t// \u7279\u5224\u5230\u4e0d\u4e86\uff08\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\n\t\tcout<<-1;\n\t\treturn 0;\n\t}else{\n\t\tfor(int i=1;i<=n;++i){\n\t\t\ttret[i]=1;\n\t\t\tfor(int j=head[i];j;j=nxt[j])\n\t\t\t\tif(rab[to[j]]==0){\n\t\t\t\t\ttret[i]=0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t}\n\t\tcout<<_spfa();\n\t}\n\treturn 0;\n}\n```\n---\n$thanks~for~reading$\n\n$$The~End$$\n\n\n",
        "postTime": 1571659688,
        "uid": 148352,
        "name": "WNico",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "### \u56fe\u8bba\u9898\n\n\n------------\n\n\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u3002\n\n\u53cd\u5411\u5efa\u8fb9\uff0c\u7136\u540e\u4ece\u7ec8\u70b9bfs\uff0c\u7136\u540e\u628a\u80fd\u8d70\u5230\u7684\u70b9\u8bbe\u6210true\u3002\n\n\u7136\u540e\u628afalse\u7684\u70b9\u6309\u53cd\u5411\u8fb9\u6269\u5c55\u4e00\u5c42\uff0c\u628a\u6269\u5c55\u5230\u7684\u70b9\u5361\u6389\u3002\n\n\u7136\u540e\u6b63\u5411bfs.\n\n\n------------\nc++\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#define po 10010\n#define ed 200010\n#define ll long long \nusing namespace std;\nlong long  q[10000000],head,tail,vis[po],g[po],t,to,dep[po];\nlong long st,end,n,m,i,o,p,flag;\nbool f[po];\nstruct nodea\n{\n\tll from,to,next;\n}a[ed];\nvoid bfs1(ll x)\n{\n\thead=tail=1;\n\tq[tail]=x;\n\twhile (head<=tail)\n\t{\n\t\tfor (ll k=g[q[head]];k;k=a[k].next)\n\t\t{\n\t\t\tif (vis[a[k].to]) continue;\n\t\t\tvis[a[k].to]=1;\n\t\t\tq[++tail]=a[k].to;\n\t\t}\n\t\thead++;\n\t}\n}\nvoid bfs2(ll x)\n{\n\thead=tail=1;\n\tq[tail]=x;\n\twhile (head<=tail)\n\t{\n\t\tif (q[head]==st)\n\t\t\t{\n\t\t\t\tcout<<dep[q[head]];\n\t\t\t\texit(0);\n\t\t    }\n\t\tfor (ll k=g[q[head]];k;k=a[k].next)\n\t\t{\n\t\t\t\n\t\t\tif (vis[a[k].to]||!f[a[k].to]) continue;\n\t\t\tvis[a[k].to]=1;\n\t\t\tdep[a[k].to]=dep[q[head]]+1;\n\t\t\tq[++tail]=a[k].to;\n\t\t}\n\t\thead++;\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor (i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%lld %lld\",&o,&p);\n\t\ta[i].from=p;\n\t\ta[i].to=o;\n\t\ta[i].next=g[p];\n\t\tg[p]=i;\n\t}\n\tscanf(\"%lld %lld\",&st,&end);\n\tbfs1(end);\n\tvis[end]=1;\n\tmemset(f,true,sizeof(f));\n\tfor (i=1;i<=n;i++)\n\t{\n\t\tif (!vis[i])\n\t\tfor (int k=g[i];k;k=a[k].next)\n\t\t{\n\t\t\tf[a[k].to]=false;\n\t\t}\n\t}\n\tmemset(vis,0,sizeof(vis));\n\tmemset(q,0,sizeof(q));\n\tbfs2(end);\n\tcout<<-1;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1570239555,
        "uid": 224253,
        "name": "\u795e\u4e4b\u6b87",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u672c\u4ee5\u4e3a\u8fd9\u9898\u5f88\u96be\u7684\u2026\u2026\n\n# \u4f7f\u7528dfs\u5220\u70b9\uff0cdijkstra\u6c42\u6700\u77ed\u8def\n\n\u8fd9\u9053\u9898\u96be\u60f3\u7684\u5730\u65b9\u5728\uff1a\n\n- \u4e00\u4e2a\u70b9A\u5982\u679c\u4e0d\u80fd\u5728\u6700\u77ed\u8def\u4e2d\uff0c\u90a3\u4e48\u88ab\u8fd9\u4e2a\u70b9A\u76f4\u63a5\u6216\u95f4\u63a5\u6307\u5411\u7684\u70b9B\u7684**\u51fa\u5ea6\u5fc5\u7136\u4e3a0**\uff08\u53bb\u6389\u81ea\u73af\uff09\u6216\u8005\u8fd9\u4e2a\u70b9A**\u4e0d\u5728\u80fd\u8054\u901a\u8d77\u70b9\u4e0e\u7ec8\u70b9\u7684\u6240\u6709\u8def\u5f84\u91cc**\n\n\t\u6bd4\u5982\u6837\u4f8b2\u4e2d\u76846\u53f7\u70b9\uff1aA\uff0cB\u60c5\u51b5\u90fd\u7b26\u5408\n    \n    \u6837\u4f8b1\u4e2d\u76842\u53f7\u70b9\uff1a\u7b26\u5408A\u7684\u60c5\u51b5\n    \n### \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u6709\u4efb\u4f55\u64cd\u4f5c\n\n\u56e0\u4e3a\u8fd9\u4e2a\u70b9\u5728dijkstra\u6700\u77ed\u8def\u4e2d\u4e0d\u4f1a\u51fa\u73b0\uff08\u56e0\u4e3a\u5b83\u4e0d\u4e0e\u7ec8\u70b9\u8d77\u70b9\u540c\u65f6\u8fde\u901a\n\n\u90a3\u4e48\u6211\u4eec\u4e13\u5fc3\u6765\u641e\u4e00\u4e0b\u7b2c\u4e00\u79cd\u60c5\u51b5\n\n\u6211\u7528\u4e00\u4e2a\u6570\u7ec4sumna\u5728\u8f93\u5165\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\uff0c\u518d\u679a\u4e3e\u6bcf\u4e2a\u70b9\uff0c**dfs**\u51fa\u5ea6\u4e3a\u96f6\u7684\u70b9\n\n### \u4e3a\u4ec0\u4e48\u8981dfs\n\n- \u5047\u5982\u4e00\u4e2a\u70b9A\u51fa\u5ea6\u4e3a0\uff0c\u90a3\u4e48\u6307\u5411\u5b83\u7684\u6240\u6709\u70b9\u5fc5\u7136\u4e0d\u80fd\u5728\u6700\u77ed\u8def\u4e2d\u51fa\u73b0\uff0c\u90a3\u4e48\u6211\u4eec\u6109\u5feb\u5730\u6807\u8bb0\u5b83\u5c31\u597d\u54af\u3002\n\n\t\u53ef\u662f\u4e00\u4e2a\u51fa\u5ea6\u4e3a\u4e00\u7684\u70b9B\uff0c\u53bb\u6389A\u70b9\u540e\u51fa\u5ea6\u4e3a0\uff0c\u90a3\u4e48\u6240\u6709\u6307\u5411\u5b83\u7684\u70b9\u663e\u7136\u4e5f\u4e0d\u80fd\u51fa\u73b0\u5728\u6700\u77ed\u8def\u4e2d\uff08\u56e0\u4e3aB\u70b9\u6ca1\u6709\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u76f8\u8fde\uff0c\u5982\u6837\u4f8b2\u4e2d2\u53f7\u70b9\uff09\u4e00\u76f4\u6df1\u5165\uff0c\u4fbfdfs\u4e86\n    \n### \u600e\u6837dfs\n- \u5982\u679c\u4e00\u4e2a\u70b9\u6307\u5411\u51fa\u5ea6\u4e3a0\u7684\u70b9\uff0c\u5c31\u628a\u4ed6\u7684\u51fa\u5ea6-1\uff0c\u5982\u679c\u5b83\u7684\u51fa\u5ea6\u53d8\u4e3a\u4e860\uff0c\u5c31dfs\u5b83\n\n```\nvoid dfs(int x)\n{\n    for(int i=head2[x];i;i=e2[i].next)\n    {\tint v=e2[i].to;\n    \tsumna[v]--;cvis[v]=true;if(sumna[v]==0)dfs(v);\n    }\n    return;\n}\n```\n\n\t\u54e6\uff0c\u6211\u7528**cvis**\u6570\u7ec4\u6807\u8bb0\u5220\u9664\u7684\u70b9\n    \n    \u4e3a\u4e86dfs\u53cd\u5411\u67e5\u627e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u53cd\u5411\u5b58\u8fb9\n    \n```\nvoid add(int x,int y)\n{e[++cnt].to=y;e[cnt].next=head[x];head[x]=cnt;//\u6b63\u5411\ne2[++cnt2].to=x;e2[cnt2].next=head2[y];head2[y]=cnt2;}//\u53cd\u5411\n```\n\n\n\u5269\u4e0b\u7684\u5c31\u5f88\u597d\u529e\u4e86\n\n\u91cd\u8fb9\u81ea\u73af\u4ec0\u4e48\u7684\n\n```\n#include<iostream>//P2296\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<iomanip>\n#include<algorithm>\n#include<queue>\n#include<stack>\n#include<cmath>\n#define ll long long\nusing namespace std;\nconst int INF=0x3FFFFFFF;\nstruct node\n{int next,to;}e[200010],e2[200010];\nint head[100010],head2[100010],n,m;\nint cnt=0,cnt2=0,ed,st,sumna[100010],dis[100010];\nvoid add(int x,int y)\n{e[++cnt].to=y;e[cnt].next=head[x];head[x]=cnt;\ne2[++cnt2].to=x;e2[cnt2].next=head2[y];head2[y]=cnt2;}\nbool vis[100010],cvis[100010];\npriority_queue<pair<int,int> > q;\nvoid dfs(int x)\n{\n    for(int i=head2[x];i;i=e2[i].next)\n    {\tint v=e2[i].to;\n    \tsumna[v]--;cvis[v]=true;if(sumna[v]==0)dfs(v);\n    }\n    return;\n}\nint main()\n{\n    int i,j,k;\n    cin>>n>>m;memset(sumna,0,sizeof(sumna));\n    for(i=1;i<=m;i++){cin>>j>>k;\n    if(j==k)continue;//\u53bb\u9664\u81ea\u73af\n    add(j,k);\n    sumna[j]++;}//\u8bb0\u5f55\u51fa\u5ea6\n    cin>>st>>ed;\n    for(i=1;i<=n;i++)if(i!=ed&&!sumna[i])cvis[i]=true,dfs(i);\n    \n    //\u4e0b\u9762\u662f\u5806\u4f18\u5316\u7684dijkstra\u677f\u5b50\n    fill(dis+1,dis+n+1,INF);\n    dis[st]=0;\n    q.push(make_pair(0,st));\n    while(!q.empty())\n    {\n        int x=q.top().second;q.pop();\n        if(vis[x])continue;\n        vis[x]=true;\n        for(i=head[x];i;i=e[i].next)\n        {\n            int y=e[i].to;if(cvis[y])continue;\n            if(dis[y]>dis[x]+1)dis[y]=dis[x]+1,q.push(make_pair(-dis[y],y));\n        }\n    }\n    if(dis[ed]==INF)cout<<-1;else cout<<dis[ed];\n\treturn 0;\n}\n```\n\u987a\u624b\u7559\u8d5e\uff0c\u611f\u8c22\u03c6(>\u03c9<*)\n",
        "postTime": 1570194346,
        "uid": 102377,
        "name": "shajjl",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "### \u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662f\u4e00\u9053\u6700\u77ed\u8def\u7684\u6a21\u677f\u9898\u3002\n#### step1:\u6839\u636e\u8def\u7ebf\u7684\u7b2c\u4e00\u4e2a\u8981\u6c42\uff0c\u53ea\u9700\u8981\u5c06\u5f62\u5982\u4e0b\u9762\u5f62\u5f0f\u7684\u70b9\u5220\u53bb\uff0c\u518d\u6c42\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5373\u53ef\u3002\n#### \u4ec0\u4e48\u70b9\u8be5\u5220\uff1a\n##### 1\uff1a\u51fa\u5ea6\u4e3a\u96f6\u4f46\u4e0d\u4e3a\u7ec8\u70b9\u7684\u70b9\u3002\n##### 2\uff1a\u76f4\u63a5\u8fde\u5411\u4e0a\u8ff0\uff081\uff09\u7c7b\u578b\u70b9\u7684\u70b9\u3002\n#### step2:\u53ea\u9700\u6c42\u5355\u6e90\u6700\u77ed\u8def\u5c31\u53ef\u4ee5AC\u4e86\u3002\n#### \u4e0b\u9762\u9644\u4e0a\u672c\u4ebaAC\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint a,b;\nvector<int> v[10009];\nvector<int> va[10009];\nint vi[10009];\nint vt[10009];\nqueue<int> q;\nint main(){\n\tmemset(vi,0,sizeof(vi));\n\tmemset(vt,127,sizeof(vt));\n\tcin>>a>>b;\n\tfor(int i=0;i<b;i++){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tv[x].push_back(y);\n\t\tva[y].push_back(x);\n\t}\n\tint s,t;\n\tcin>>s>>t;\n\tfor(int i=1;i<=a;i++){//\u5220\u70b9\u64cd\u4f5c\n\t\tif(v[i].size()==0&&i!=t){\n\t\t\tfor(int j=0;j<va[i].size();j++){\n\t\t\t\tvi[va[i][j]]=1;\n\t\t\t}\n\t\t}\n\t}\n\tq.push(s);\n\tvt[s]=0;\n\twhile(!q.empty()){//spfa\n\t\tfor(int i=0;i<v[q.front()].size();i++){\n\t\t\tif(vi[v[q.front()][i]]==0){\n\t\t\t\tif(vt[v[q.front()][i]]>vt[q.front()]+1){\n\t\t\t\t\tvt[v[q.front()][i]]=vt[q.front()]+1;\n\t\t\t\t\tq.push(v[q.front()][i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tq.pop();\n\t}\n\tif(vt[t]>99999999){//\u522b\u5fd8\u8f93\u51fa-1\n\t\tcout<<-1;\n\t}else{\n\t\tcout<<vt[t];\n\t}\n}\n```\n### \u672c\u9898\u5f88\u5584\u826f\uff0c\u4ec0\u4e48\u90fd\u4e0d\u5361\u3002",
        "postTime": 1568975765,
        "uid": 158058,
        "name": "JQ6561",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "# \u6307\u9488\u94fe\u63a5\u8868\n\n\u770b\u5230n\u7684\u8303\u56f4\uff0c\u6211\u77e5\u9053\u8fd9\u9898\u5f00\u4e00\u4e2amap[10001][10001]\u7684\u6570\u7ec4\u4e0d\u592a\u9760\u8c31\u2026\u2026\u7136\u540e\u5c31\u60f3\u8981\u4e0d\u679a\u4e3e\u6bcf\u6761\u8fb9\u6765\u641c\u7d22\uff0c\u7136\u540e\u770b\u4e86\u770bm\u7684\u8303\u56f4\uff0c\u7b97\u4e86\u2026\u2026\n\n\u90a3\u548b\u529e\u561b\u3002\n\n\u7ecf\u8fc7\u51e0\u6839\u5934\u53d1\u843d\u4e0b\u7684\u601d\u7d22\uff0c\u6211\u56de\u60f3\u8d77\u4e86\u6307\u9488\u94fe\u8868= =\uff0c\u597d\u50cf\u53ef\u4ee5\u505a\uff1f\uff1f\uff08\u7528\u6307\u9488\u94fe\u8868\u5b58\u50a8\u5730\u56fe\u6570\u636e\u53ef\u4ee5\u8282\u7ea6\u5f88\u591a\u7a7a\u95f4\uff0c\u4e0d\u5fc5\u5f00\u592a\u5927\u7684\u6570\u7ec4\uff09\n\n\u4e0b\u9762\u662f\u4ee3\u7801\n```\n#include<stdio.h>\n#include <stdlib.h>\nint n,m,in[10001],que[20000],h,t,dis[10001];\ntypedef struct line{\n\tint t;\n\tstruct line *nxt;\n}line;\nstruct head{\n    line *fst;\n}to[10001],from[10001];\nvoid dfs(int now){\n\tline *p;\n\tp=from[now].fst;\n\twhile(p!=NULL){\n\t\tif(!in[p->t]){\n\t\t\tin[p->t]=1;\n\t\t\tdfs(p->t);\n\t\t}\n\t\tp=p->nxt;\n\t}\n}\nint exm(int x){\n\tline *p=to[x].fst;\n\twhile(p!=NULL){\n\t\tif(!in[p->t])return 0;\n\t\tp=p->nxt;\n\t}\n\treturn 1;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tint i,j,s,e;\n\tline *x,*y;\n\tfor(i=1;i<=n;i++){//\u5f00\u59cb\u6784\u5efa\u94fe\u63a5\u8868\uff0c\u5b58\u50a8\u56fe\u7684\u6570\u636e\uff0cto[i]\u50a8\u5b58\u4ecei\u80fd\u591f\u5230\u8fbe\u7684\u70b9\uff0cfrom[i]\u50a8\u5b58\u80fd\u591f\u76f4\u63a5\u5230\u8fbei\u7684\u70b9\n\t\tto[i].fst=NULL,from[i].fst=NULL,dis[i]=-1;\n\t}\n\tfor(i=0;i<m;i++){\n\t\tscanf(\"%d%d\",&s,&e);\n\t\tx=(line *)malloc(sizeof(line));//\u4e3a\u7a7ax\u548cy\u6307\u9488\u7533\u8bf7\u5730\u5740\n\t\ty=(line *)malloc(sizeof(line));\n\t\tx->t=e,y->t=s;\n\t\tx->nxt=to[s].fst;\n\t\ty->nxt=from[e].fst;\n\t\tto[s].fst=x;\n\t\tfrom[e].fst=y;\n\t}\n\tscanf(\"%d%d\",&s,&e);\n\tin[e]=1;//in[i]\u8868\u793a\u70b9i\u662f\u5426\u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u5230\u8fbe\u7ec8\u70b9e\uff0c\u6807\u8bb0\u4e3a1\u8868\u793a\u80fd\u5230\u8fbe\n\tdfs(e);//\u4ece\u7ec8\u70b9e\u5012\u7740\u6df1\u641c\uff0c\u628a\u80fd\u591f\u5230\u76f4\u63a5\u6216\u95f4\u63a5\u8fbee\u7684\u70b9\u6807\u8bb0\n\tque[t++]=e;\n\tdis[e]=0;\n\twhile(h<t){//\u5f00\u59cb\u5e7f\u641c\u627e\u6700\u77ed\u8def\u5f84\n\t\tint now=que[h];\n\t\tx=from[now].fst;\n\t\twhile(x!=NULL){\n\t\t\tint will=x->t;\n\t\t\tif(exm(will)){//\u68c0\u67e5\u70b9now\u7684\u51fa\u8fb9\u6307\u5411\u7684\u70b9will\u80fd\u5426\u5230\u8fbee\n\t\t\t\tif(dis[will]>dis[now]+1||dis[will]==-1){\n\t\t\t\t\tque[t++]=will;\n\t\t\t\t\tdis[will]=dis[now]+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tx=x->nxt;\n\t\t}\n\t\th++;\n\t}\n\tprintf(\"%d\\n\",dis[s]);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1568723925,
        "uid": 41387,
        "name": "Malefic",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "### ~~\u597d\u4e0d\u5bb9\u6613\u8fc7\u4e86\u8fd9\u9053\u7eff\u9898\uff0c\u8fd9\u9053\u9898\u5361\u4e86\u6211\u51e0\u4e2a\u6708\u4e86~~\n\n## \u5148\u8bf4\u8bf4\u601d\u8def\u5427\n\n### \u601d\u8def\uff1a\n\u7528\u4e00\u4e2avector\u5b58\u4e0b\u6bcf\u4e00\u6761\u53cd\u5411\u8fb9\uff0c\u7136\u540e\u4ece\u7ec8\u70b9\u5f00\u59cbbfs\uff0c\u80fd\u5230\u8fbe\u7684\u70b9\u5c31\u7528\u4e00\u4e2aflag\u6570\u7ec4\u6253\u4e2a\u6807\u8bb0\uff0c\u8fd9\u6837\u4fbf\u4e8e\u4e4b\u540e\u641c\u7d22\u2026\u2026\n\n\u7136\u540e\u6e05\u7a7avector\uff0c\u5c06\u6b63\u5411\u8fb9\u5b58\u8fdb\u53bb\uff08\u6ce8\u610f\u8981\u4f7f\u7528\u6570\u7ec4\u5b58\u8fb9\uff0c\u8fd9\u6837\u624d\u80fd\u6b63\u53cd\u5b582\u6b21\uff09\u2026\u2026\n\n\u63a5\u7740\u6211\u4eec\u67e5\u770b\u6bcf\u4e2a\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u662f\u5426\u80fd\u5230\u8fbe\u7ec8\u70b9\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u8fbe\u4e0d\u5230\uff0c\u7528check\u6570\u7ec4\u6807\u8bb0\uff08\u6ce8\u610f\u4e0d\u80fd\u76f4\u63a5\u4fee\u6539\uff0c\u4f1a\u6709\u540e\u6548\u6027\uff09\n\n\u6700\u540e\u8dd1\u4e00\u904ddijkstra\u5c31\u597d\u4e86\uff0c\u6ce8\u610f\u6709\u8f93\u51fa-1\u7684\u60c5\u51b5\n\n## \u4e0a\u4ee3\u7801\u4e86\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <cstring>\n\nusing namespace std;\n\n#define MAXN 10100\n#define MAXM 201000\n#define INF 0x3f3f3f3f\n\nqueue<int> que;//\u641c\u7d22\u7528\u7684\u961f\u5217\nvector<int> vec[MAXN];//\u5b58\u8fb9\u7528\u7684vector\nint n, m, s, t;//\u9898\u76ee\u6240\u8ff0\nint x[MAXM], y[MAXM], dis[MAXN];//\u5b58\u8fb9\u548cdijkstra\u7684\u6570\u7ec4\nbool flag[MAXN], vis[MAXN], check[MAXN];//\u521a\u624d\u8bb2\u8fc7\u4e86\uff0cvis\u6570\u7ec4\u6807\u8bb0\u662f\u5426\u904d\u5386\u8fc7\n\nvoid pre()//\u9884\u5904\u7406\u6bcf\u4e2a\u70b9\u662f\u5426\u80fd\u5230\u8fbe\u7ec8\u70b9\n{\n    que.push(t);\n    vis[t] = flag[t] = 1;\n    while (! que.empty())\n    {\n        int x = que.front();\n        que.pop();\n        for (int i = 0; i < vec[x].size(); ++ i)\n        {\n            int v = vec[x][i];\n            if (vis[v])\n                continue;\n            flag[v] = vis[v] = 1;\n            que.push(v);\n        }\n    }\n    for (int i = 1; i <= n; ++ i)\n        vec[i].clear();\n    for (int i = 1; i <= m; ++ i)\n        vec[x[i]].push_back(y[i]);\n    for (int i = 1; i <= n; ++ i)//\u67e5\u770b\u6bcf\u4e2a\u70b9\u51fa\u8fb9\u6307\u5411\u7684\u70b9\u80fd\u5426\u5230\u8fbe\u7ec8\u70b9\n        for (int j = 0; j < vec[i].size(); ++ j)\n            if (! flag[vec[i][j]])\n            {\n                check[i] = true;\n                break;\n            }\n    for (int i = 1; i <= n; ++ i)\n        flag[i] = (! check[i]);//\u6807\u8bb0\n}\n\nint bfs()\n{\n    memset(vis, 0, sizeof(vis));//\u6ce8\u610f\u518d\u6b21\u641c\u7d22\u8981\u6e050\n    for (int i = 1; i <= n; ++ i)\n        dis[i] = INF;\n    dis[s] = 0;\n    vis[s] = 1;\n    que.push(s);\n    while (! que.empty())\n    {\n        int x = que.front();\n        que.pop();\n        vis[x] = false;\n        for (int i = 0; i < vec[x].size(); ++ i)\n        {\n            int v = vec[x][i];\n            if (dis[v] > dis[x] + 1 && flag[v])\n            {\n                dis[v] = dis[x] + 1;\n                if (! vis[v])\n                    que.push(v), vis[v] = 1;\n            }\n        }\n    }\n    return dis[t] == INF ? -1 : dis[t];//\u8f93\u51fa\u7b54\u6848\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= m; ++ i)//\u5efa\u53cd\u5411\u8fb9\n    {\n        scanf(\"%d%d\", &x[i], &y[i]);\n        if (x[i] == y[i])\n            -- i, -- m;\n        vec[y[i]].push_back(x[i]);\n    }\n    scanf(\"%d%d\", &s, &t);\n    pre();//\u9884\u5904\u7406\n    printf(\"%d\", bfs());//\u8f93\u51fa\n    return 0;\n}\n```",
        "postTime": 1564571925,
        "uid": 126669,
        "name": "BCZSX",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "//\u770b\u5230\u4e0b\u9762\u7684\u5927\u4f6c\u90fd\u662f\u53cd\u5411\u5efa\u56fe\uff0c\u8eab\u4e3a\u849f\u84bb\u7684\u6211\uff0c\u53ea\u80fd\u7528\u666e\u901a\u65b9\u6cd5\u6765\u6c34\u4e00\u53d1\n\n//\u9996\u5148\u770b\u9898\u610f\uff0c\u4ed6\u76f8\u5f53\u4e8e\u662f\u8981\u627e\u4ece\u4e00\u4e2a\u70b9\u5230\u53e6\u4e00\u7ed9\u70b9\u7684\u6700\u5c0f\u6b65\u6570\uff0c\u56e0\u4e3a\u8fb9\u7684\u6743\u503c\u90fd\u662f\u4e00\uff0c\u6240\u4ee5\u8981\u628a\u4e0d\u80fd\u8d70\u7684\u70b9\u53bb\u9664\n\n//\u56e0\u4e3a\u5b83\u4e0d\u4ec5\u8981\u53bb\u6389\u4e0d\u76f4\u63a5\u76f8\u8fde\u7684\uff0c\u8fd8\u8981\u53bb\u6389\u4e0e\u4e0d\u76f4\u63a5\u76f8\u8fde\u7684\u76f8\u8fde\u7684\n\n//\u8fd9\u5c31\u6709\u70b9\u9ebb\u70e6\u4e86\uff0c\u672c\u6765\u4ee5\u4e3a\u76f4\u63a5\u7528\u5faa\u73af\u53bb\u627e\u4f1a\u51fa\u9519\uff0c\u4f46\u662f\u7adf\u7136A\u4e86\uff0c\u8ba9\u6211\u5f88\u610f\u5916\u3002\n\n//\u5269\u4e0b\u7684\u5c31\u662f\u5fc3\u9178\u548c\u6cea\u6c34\uff0c\u4e3a\u4e86A\u6389\uff0c\u6211\u4e0d\u5e78\u7684WA\u4e8625\u904d\uff0c\u53ea\u56e0\u4e3amemset\uff08\u6d41\u6cea\uff09\n\n//\u8bdd\u4e0d\u591a\u8bf4\uff0c\u5269\u4e0b\u7684\u63d0\u4ea4\u4ee3\u7801\u5427\uff08\u6ce8\u91ca\u5728\u91cc\u9762\uff09\n\n```\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<string>\n#include<stack>\n#include<algorithm>\n#include<cmath>\n#include<queue>\n#include<vector>\n#include<map>//\u4ee5\u4e0a\u4e3a\u7f3a\u7701\u6e90\u5e2e\u6253\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528<bits/stdc++.h>\u4ee3\u66ff \nusing namespace std;\ninline int read() {\n\tchar c = getchar();\n\tint x = 0, f = 1;\n\twhile(c < '0' || c > '9') {\n\t\tif(c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile(c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n\treturn x * f;\n}//\u4e0a\u9762\u662f\u5feb\u8bfb\uff0c\u53ef\u4ee5\u63d0\u4f9b\u501f\u9274\uff0c\u4e5f\u53ef\u4ee5\u5ffd\u7565\u6389\u3002\nint n,m,rd[10001],cd[10001],a,b,s,t,ans[10001];//n,m\u6309\u7167\u9898\u76ee\u8981\u6c42\u5b9a\u4e49\uff0cs\uff0ct\u8868\u793a\u8d77\u70b9\u548c\u7ec8\u70b9\uff0cans\u6570\u7ec4\u8bb0\u5f55\u7b54\u6848\uff0crd\u6ca1\u4ec0\u4e48\u7528\uff0c\u61d2\u5f97\u5220\uff0ccd\u8bb0\u5f55\u70b9\u7684\u51fa\u5ea6 \uff0ca\uff0cb\u662f\u9700\u8981\u8f93\u5165\u7684\u3002 \nbool road[10001][10001],f[10001];//road\u6570\u7ec4\u8868\u793a\u662f\u5426\u76f8\u8fde\uff0cf\u8868\u793a\u662f\u4e0d\u662f\u201c\u53db\u5f92 \u201d \nqueue<int>Q;//\u961f\u5217 \nvoid pd() {\n\twhile(Q.empty() == 0) {\n\t\tint q=Q.front();\n\t\tQ.pop();\n\t\tfor(int i=1; i<=n; ++i) {\n\t\t\tif(f[i]==0 && road[q][i]==1 && ans[i]>ans[q]+1) {\n\t\t\t\tans[i]=ans[q]+1;\n\t\t\t\tQ.push(i);\n\t\t\t\tif(i==t) {\n\t\t\t\t\tcout<<ans[i];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcout<<\"-1\";\n\treturn ;\n}//\u8fd9\u4e2a\u662f\u7528\u6765\u5224\u65ad\u7684\uff0c\u53ea\u8981\u961f\u5217\u91cc\u7684\u5143\u7d20\u4e0d\u7a7a\uff0c\u8868\u793a\u53ef\u4ee5\u7ee7\u7eed\u8d70\uff0c\u76f4\u5230\u627e\u5230\u7ec8\u70b9\u6216\u8005\u961f\u5217\u4e3a\u7a7a\u3002 \nint main() {\n\tmemset(ans,9999999,sizeof(ans));//\u8fd9\u91cc\u5361\u4e86\u6211\u597d\u4e45\u597d\u4e45\uff0c\u597d\u50cf\u8ba9\u6211\u9519\u4e86\u5341\u51e0\u904d\uff0c\u90fd\u6ca1\u53d1\u73b0\u662f\u8fd9\u91cc\u7684\u95ee\u9898\uff0c\u3002 \n\tn=read();\n\tm=read();//\u8bfb\u5165\u70b9\u6570\u548c\u8fb9\u6570 \n\tfor(int i=1; i<=m; ++i) {\n\t\ta=read();\n\t\tb=read();\n\t\troad[a][b]=1;\n\t\tcd[a]++;\n\t\trd[b]++;\n\t}//\u8bfb\u5165\u76f8\u8fde\u7684\u70b9\uff0c\u987a\u4fbf\u628a\u5165\u5ea6\u548c\u51fa\u5ea6\u8bb0\u5f55\u4e00\u4e0b\u3002 \n\ts=read();\n\tt=read();//\u8bfb\u5165\u8d77\u70b9\u548c\u7ec8\u70b9 \n\tfor(int i=1; i<=n; ++i) {\n\t\tif(cd[i]==0&&i!=t) {\n\t\t\tf[i]=1;\n\t\t\tfor(int j=1; j<=n; ++j) {\n\t\t\t\tif(road[j][i]==1) {\n\t\t\t\t\tf[j]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}//\u8fd9\u662f\u627e\u53db\u5f92\u548c\u654c\u4eba\u7684\u5730\u65b9\u3002 \n\tans[s]=0;//\u5427\u8d77\u70b9\u7684\u7b54\u6848\u8bbe\u7f6e\u62100 \n\tQ.push(s);//\u628a\u8d77\u70b9\u5165\u961f \n\tpd();//\u8fdb\u884c\u5224\u65ad \n\treturn 0;//\u5e26\u6cea\u7ed3\u675f\n}\n```\n\n//\u8fd8\u5e0c\u671b\u80fd\u591f\u901a\u8fc7",
        "postTime": 1556500219,
        "uid": 188217,
        "name": "\u4e03\u591c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u5148AC\u8fd9\u4e2a[P1629 \u90ae\u9012\u5458\u9001\u4fe1](https://www.luogu.org/problemnew/show/P1629)\n\u601d\u8def\u4f1a\u5f00\u9614\u5f88\u591a\n\n[P2296 \u5bfb\u627e\u9053\u8def](https://www.luogu.org/problemnew/show/P2296)\n\n\u81ea\u5df1\u601d\u8003\uff0c\u624b\u6253ac\u7684\u9898\u76ee\uff0c\u633a\u6709\u610f\u601d\uff0c\u82b1\u4e86\u597d\u4e45\u3002\n\n\u9996\u5148\u8bfb\u5165\u6570\u636e\u65f6\u5b58\u56fe\u65f6\u5b58\u4e24\u4efd\uff0c\u4e00\u4efd\u6b63\u5411\uff0c\u4e00\u4efd\u53cd\u5411\uff0c\u53cd\u5411\u7684\u56fe\u7528\u4e8ebfs\u641c\u7d22\uff08\u6216\u8005dijkstra\u90fd\u884c\uff09\uff0c\u5c06\u53ef\u4ee5\u641c\u641c\u5230\u7684\u6253\u4e0a\u6807\u8bb01\uff0c\u5728\u6ca1\u6253\u6807\u8bb01\u7684\u70b9\u6253\u4e0a2\u518d\u5c06\u5176\u6240\u8fde\u7684\u9053\u8def\u4e5f\u6253\u4e0a\u6807\u8bb02\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u8981\u627e\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u5220\u8fb9\uff0c\u5c06\u8fb9\u8d4b\u4e88\u4e00\u4e2a\u6700\u5927\u503c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u4f1a\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u4e86\u3002\n\n\u6700\u540e\u518ddijkstra\u5c31\u884c\u4e86\u3002\n\n\u4ee3\u78011\uff08bfs\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int size=400000;\nconst int INF=0x3f3f;\n\nint n,m;\nint s,t;\n\nint ver1[size],edge1[size],Next1[size],head1[size],tot1,v1[size],d1[size];\nint ver2[size],edge2[size],Next2[size],head2[size],tot2,v2[size],d2[size];\nint dis[size];\nvoid add1(int x,int y,int z)\n{\n    ver1[++tot1]=y;\n    edge1[tot1]=z;\n    Next1[tot1]=head1[x];\n    head1[x]=tot1;\n}\nvoid add2(int x,int y,int z)\n{\n    ver2[++tot2]=y;\n    edge2[tot2]=z;\n    Next2[tot2]=head2[x];\n    head2[x]=tot2;\n}\n\nvoid dijkstra1(int s)\n{\n    priority_queue<pair<int,int> > q;\n    memset(v1,0,sizeof(v1));\n    for(int i=1;i<=n;i++)\n    {\n    \td1[i]=999999999;\n\t}\n    d1[s]=0;\n    q.push(make_pair(0,s));\n    while(q.size())\n    {\n        int x=q.top().second;\n        q.pop();\n        if(v1[x]) continue;\n        v1[x]=1;\n        for(int i=head1[x];i;i=Next1[i])\n        {\n            int y=ver1[i],z=edge1[i];\n            if(d1[y]>d1[x]+z) \n            {\n                d1[y]=d1[x]+z;\n                q.push(make_pair(-d1[y],y));\n            }\n        }\n    }\n}\nint f[size],k[size],pd[size];\nvoid bfs(int x)\n{\n\tfor(int i=head2[x];i;i=Next2[i])\n\t{\n\t\tint y=ver2[i];\n\t\tif(!f[y])\n\t\t{\n\t\t\tk[y]=1;\n\t\t\tf[y]=1;\n\t\t\tbfs(y);\n\t\t}\n\t}\n\treturn;\n}\n\n\n\nint main()\n{\n////\tfreopen(\"input.in\",\"r\",stdin);\n////\tfreopen(\"input.out\",\"w\",stdout);\n\tscanf(\"%d\",&n);\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tadd1(x,y,1);\n\t\tadd2(y,x,1);\n\t}\n\tscanf(\"%d %d\",&s,&t);\n\tf[t]=1;\n\tk[t]=1;\n\tbfs(t);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(!k[i])\n\t\t{\n//\t\t\tcout<<i;\n\t\t\tfor(int j=head2[i];j;j=Next2[j])\n\t\t\t{\n\t\t\t\tpd[ver2[j]]=1;\n//\t\t\t\tcout<<ver2[j];\n\t\t\t}\n\t\t}\n\t}\n//\tcout<<f[1];\n\tfor(int i=1;i<=n;i++)\n\t{\n//\t\tcout<<f[i];\n\t\tif(pd[i])\n\t\t{\n//\t\t\tcout<<i;\n\t\t\tfor(int j=head1[i];j;j=Next1[j])\n\t\t\t{\n\t\t\t\tedge1[j]=999999999;\n\t\t\t } \n\t\t}\n\t}\n\tdijkstra1(s);\n\tif(d1[t]==999999999) cout<<\"-1\";\n\telse cout<<d1[t];\n\treturn 0;\n}\n```\n\n\u4ee3\u78012\uff08dijkstra\uff0c\u539f\u7406\u76f8\u540c\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int size=400000;\nconst int INF=0x3f3f;\n\nint n,m;\nint s,t;\n\nint ver1[size],edge1[size],Next1[size],head1[size],tot1,v1[size],d1[size];\nint ver2[size],edge2[size],Next2[size],head2[size],tot2,v2[size],d2[size];\nint dis[size];\nvoid add1(int x,int y,int z)\n{\n    ver1[++tot1]=y;\n    edge1[tot1]=z;\n    Next1[tot1]=head1[x];\n    head1[x]=tot1;\n}\nvoid add2(int x,int y,int z)\n{\n    ver2[++tot2]=y;\n    edge2[tot2]=z;\n    Next2[tot2]=head2[x];\n    head2[x]=tot2;\n}\n\nvoid dijkstra1(int s)\n{\n    priority_queue<pair<int,int> > q;\n    memset(v1,0,sizeof(v1));\n    for(int i=1;i<=n;i++)\n    {\n    \td1[i]=999999999;\n    }\n    d1[s]=0;\n    q.push(make_pair(0,s));\n    while(q.size())\n    {\n        int x=q.top().second;\n        q.pop();\n        if(v1[x]) continue;\n        v1[x]=1;\n        for(int i=head1[x];i;i=Next1[i])\n        {\n            int y=ver1[i],z=edge1[i];\n            if(d1[y]>d1[x]+z) \n            {\n                d1[y]=d1[x]+z;\n                q.push(make_pair(-d1[y],y));\n            }\n        }\n    }\n}\nint f[size],k[size],pd[size];\nvoid bfs(int x)\n{\n    for(int i=head2[x];i;i=Next2[i])\n    {\n        int y=ver2[i];\n        if(!f[y])\n        {\n            k[y]=1;\n            f[y]=1;\n            bfs(y);\n        }\n    }\n    return;\n}\n\nvoid dijkstra2()\n{\n    priority_queue<pair<int,int> > q;\n    memset(v2,0,sizeof(v2));\n    for(int i=1;i<=n;i++)\n    {\n    \td2[i]=999999999;\n    }\n    d2[t]=0;\n    q.push(make_pair(0,t));\n    while(q.size())\n    {\n        int x=q.top().second;\n        q.pop();\n        if(v2[x]) continue;\n        v2[x]=1;\n        for(int i=head2[x];i;i=Next2[i])\n        {\n            int y=ver2[i],z=edge2[i];\n            if(d2[y]>d2[x]+z) \n            {\n                d2[y]=d2[x]+z;\n                q.push(make_pair(-d2[y],y));\n            }\n        }\n    }\n}\n\nint main()\n{\n////\tfreopen(\"input.in\",\"r\",stdin);\n////\tfreopen(\"input.out\",\"w\",stdout);\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++)\n    {\n        int x,y;\n        scanf(\"%d %d\",&x,&y);\n        add1(x,y,1);\n        add2(y,x,1);\n    }\n    scanf(\"%d %d\",&s,&t);\n    f[t]=1;\n    k[t]=1;\n    dijkstra2();\n    for(int i=1;i<=n;i++)\n    {\n        if(d2[i]==999999999)\n        {\n//\t\t\tcout<<i;\n            for(int j=head2[i];j;j=Next2[j])\n            {\n                pd[ver2[j]]=1;\n//\t\t\t\tcout<<ver2[j];\n            }\n        }\n    }\n//\tcout<<f[1];\n    for(int i=1;i<=n;i++)\n    {\n//\t\tcout<<f[i];\n        if(pd[i])\n        {\n//\t\t\tcout<<i;\n            for(int j=head1[i];j;j=Next1[j])\n            {\n                edge1[j]=999999999;\n             } \n        }\n    }\n    dijkstra1(s);\n    if(d1[t]==999999999) cout<<\"-1\";\n    else cout<<d1[t];\n    return 0;\n}\n```\n\n",
        "postTime": 1553225542,
        "uid": 108459,
        "name": "lizh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "### \u601d\u8def\u7b80\u5355\uff0c\u6570\u636e\u826f\u5fc3\u7684~~\u6c34~~\u9898\n\u6839\u636e\u9898\u610f\uff0c\u5f88\u660e\u663e\u6211\u4eec\u9700\u8981\u9884\u5904\u7406\u51fa\u6240\u6709\u80fd\u548c\u7ec8\u70b9\u8054\u901a\u7684\u8282\u70b9\uff0c\u6b64\u5904\u4ece\u7ec8\u70b9\u53cd\u5411bfs\u5373\u53efO(n)\u8f7b\u677e\u89e3\u51b3\n\n\u518d\u63a5\u4e0b\u6765\uff0c\u76f4\u63a5spfa\u5c31\u5b8c\u4e8b\u4e86\uff0c\u597d\u50cf\u4e5f\u6ca1\u4ec0\u4e48\u8bb2\u7684\u3002\n\n\u6ce8\u610f\u5224\u65ad\u6761\u4ef6\uff1a\u8981\u6c42\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684\u6240\u6709\u51fa\u8fb9\u6307\u5411\u7684\u70b9\u90fd\u4e0e\u7ec8\u70b9\u8fde\u901a\u3002\u6211\u4eec\u5df2\u7ecf\u5728\u521a\u624d\u7684bfs\u4e2d\u9884\u5904\u7406\u8fc7\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<cstdlib>\n#include<ctime>\n#include<algorithm>\n#include<string>\n#include<stack>\n#include<queue>\n#include<set>\n#include<map>\n#include<vector>\nusing namespace std;\n\nint n,m,s,t;\nbool book[10001];\n//book\u7528\u4e8e\u8bb0\u5f55\u9884\u5904\u7406\u51fa\u7684\u6240\u6709\u548c\u7ec8\u70b9\u8054\u901a\u7684\u70b9\n\n//\u6b64\u5904\u4e3a\u6b63\u5411\u8fb9\u4e34\u63a5\u8868\nint head[10001],total=1;\nstruct edge\n{\n\tint to;\n\tint next;\n}e[400002];\nvoid addedge(int from,int to)\n{\n\te[total].to=to;\n\te[total].next=head[from];\n\thead[from]=total;\n\ttotal++;\n}\n\n\n//\u6b64\u5904\u4e3a\u53cd\u5411\u8fb9\u4e34\u63a5\u8868\nint uhead[10001],utotal=1;\nstruct untiedge\n{\n\tint to;\n\tint next;\n}ue[400002];\nvoid adduntiedge(int from,int to)\n{\n\tue[utotal].to=to;\n\tue[utotal].next=uhead[from];\n\tuhead[from]=utotal;\n\tutotal++;\n}\n\n//\u6b64\u5904bfs\u9884\u5904\u7406\u6240\u6709\u548c\u7ec8\u70b9\u8054\u901a\u7684\u70b9\n//\u5f88\u57fa\u7840\u7684bfs\u4e86\nvoid bfs(int _start)\n{\n\tqueue<int>q;\n\tq.push(_start);\n\tbook[_start]=1;\n\tint qfront=_start;\n\twhile(!q.empty())\n\t{\n\t\tqfront=q.front();\n\t\tfor(int i=uhead[qfront];i;i=ue[i].next)\n\t\t{\n\t\t\tif(!book[ue[i].to])\n\t\t\t{\n\t\t\t\tq.push(ue[i].to);\n\t\t\t\tbook[ue[i].to]=1;\n\t\t\t}\n\t\t}\n\t\tq.pop();\n\t}\n}\n\n//spfa\u5bfb\u627e\u6700\u77ed\u8def\nint dist[10001];\nbool inqueue[10001];\nvoid spfa(int _start)\n{\n\tmemset(dist,0x3f,sizeof(dist));\n    //\u6ce8\u610f\u4ee5\u4e0b\u4e24\u4e2aif\u5224\u65ad\u8d77\u70b9\u662f\u5426\u5408\u6cd5\n    //\u5982\u679c\u8d77\u70b9\u90fd\u4e0d\u5408\u6cd5\u5c31\u4e0d\u7528spfa\u4e86\n\tif(!book[_start])\n\t\treturn;\n\tfor(int i=head[_start];i;i=e[i].next)\n\t{\n\t\tif(!book[e[i].to])\n\t\t\treturn;\n\t}\n\tqueue<int>q;\n\tq.push(_start);\n\tinqueue[_start]=1;\n\tdist[_start]=0;\n\tint qfront=_start;\n\twhile(!q.empty())\n\t{\n\t\tqfront=q.front();\n\t\tfor(int i=head[qfront];i;i=e[i].next)\n\t\t{\n        //\u8fd9\u4e2afor\u5faa\u73af\u7528\u4e8e\u5224\u65ad\u8bbf\u95ee\u7684\u8fd9\u4e2a\u8282\u70b9\u662f\u5426\u5408\u6cd5\n\t\t\tfor(int j=head[e[i].to];j;j=e[j].next)\n\t\t\t\tif(!book[e[j].to])\n\t\t\t\t\tgoto tt;//tt\u5728\u5f80\u4e0b\u67e510\u884c\n\t\t\tif(dist[e[i].to]>dist[qfront]+1)\n\t\t\t{\n\t\t\t\tdist[e[i].to]=dist[qfront]+1;\n\t\t\t\tif(!inqueue[e[i].to])\n\t\t\t\t{\n\t\t\t\t\tq.push(e[i].to);\n\t\t\t\t\tinqueue[e[i].to]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttt:;\n\t\t}\n\t\tinqueue[qfront]=0;\n\t\tq.pop();\n\t}\n}\n\nint main()\n{\n\tcin>>n>>m;\n    for(int i=0,a,b;i<m;i++)\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tif(a==b)\n\t\t\tcontinue;\n\t\taddedge(a,b);\n\t\tadduntiedge(b,a);\n\t}\n\tcin>>s>>t;\n\tbfs(t);\n\tspfa(s);\n    //\u5982\u679c\u6ca1\u6709\u66f4\u65b0\u8ddd\u79bb\uff0c\u90a3\u4e48\u8bf4\u660e\u65e0\u6cd5\u5230\u8fbe\n\tif(dist[t]==0x3f3f3f3f)\n\t\tcout<<-1;\n\telse\n\t\tcout<<dist[t];\n\treturn 0;       \n}\n\n\n\n```",
        "postTime": 1540208544,
        "uid": 84562,
        "name": "EzioAuditoreFirenze",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u5927\u4f53\u601d\u8def \uff1a \u641c\u7d22 + \u6700\u77ed\u8def\n\n\u9996\u5148\n\n\u8981\u6c42\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u70b9\u7684\u51fa\u8fb9\u6307\u5411\u7684\u70b9\u5747\u4e0e\u7ec8\u70b9\u8054\u901a\n\n\u53ef\u662f\u4e00\u4e2a\u4e00\u4e2a\u7684\u68c0\u6d4b\u7684\u8bdd\n\n\u5c82\u4e0d\u662f\u51c9\u51c9\u4e86\uff1f\uff1f\uff1f\uff1f\n\n\u8fd9\u662f\u6709\u4e00\u4e2a~~\u7070\u5e38\u5f04\u8981~~\u975e\u5e38\u91cd\u8981\u7684\u4e1c\u4e1c\n\n # \u9006\u5411\u601d\u7ef4\n \n\u4f55\u4e0d\u628a\u7ec8\u70b9\u4f5c\u4e3a\u8d77\u70b9 \u53cd\u5411\u5efa\u8fb9\n\ndfs or bfs\n\n\u7136\u540e\u53ef\u4ee5\u904d\u5386\u5230\u7684\u70b9 \u5747\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0\n\n\u8fd9\u6837\u7684\u8bdd\n\n# \u6709\u4e00\u4e2a\u70b9\u65e0\u6cd5\u8054\u901a\n\n# \u4ed6\u6240\u4f4d\u4e8e\u51fa\u8fb9\u7684\u70b9 \u5168\u90e8\u51c9\u51c9\n\n```cpp\nfor(R ll i=1;i<=n;++i)\n     if(!have[i])\n      for(R ll j=lat[i];j;j=bx[j].nex)\n       want[bx[j].to]=1;\n//\u8fd9\u4e2a\u524d\u5411\u661f\u662f\u53cd\u5411\u524d\u5411\u661f \n//\u8be5\u70b9\u672a\u88ab\u904d\u5386\u5230 \u56e0\u4e3a\u662f\u53cd\u8fb9\n//\u6240\u4ee5 \u51fa\u5ea6\u6253\u4e0atag\n```\n\n\u7136\u540e\u6211\u4eec\u4fbf\u53ef\u4ee5\u5feb\u4e50\u5730\n\n\u8dd1Dijkstra \u6216\u8005 ~~\u5df2\u7ecf\u6b7b\u4e86\u7684~~spfa\n\n```cpp\n#pragma GCC optimize(3)\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#include<string>\n#include<queue>\n#include<map>\n#include<stack>\n#include<list>\n#include<set>\n#include<deque>\n#include<vector>\n#include<ctime>\n#define ll long long\n#define inf 0x7fffffff\n#define N 500008\n#define IL inline\n#define M 1008611\n#define D double\n#define ull unsigned long long\n#define R register\nusing namespace std;\ntemplate<typename T>void read(T &a)\n{\n    T x=0,f=1;char ch=getchar();\n    while(!isdigit(ch))\n    {\n        if(ch=='-')f=0;ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        x=(x<<1)+(x<<3)+ch-'0';ch=getchar();\n    }\n    a=f?x:-x;\n}\n/*-------------OI\u4f7f\u6211\u5feb\u4e50-------------*/\nstruct node{\n    ll fro,to,nex;\n}ax[N],bx[N];\nll head[N],lat[N],dis[N];\nbool have[N],vis[N],want[N];\nll n,m,tot,all;\nll sta,end;\nIL void dfs(ll now){\n    have[now]=1;\n    for(R ll i=lat[now];i;i=bx[i].nex){\n        ll v=bx[i].to;\n        if(!have[v]) dfs(v);\n    }\n}\nIL void spfa(){\n    queue<ll> Q;\n    for(R ll i=1;i<=n;++i) {dis[i]=inf;vis[i]=0;}\n    Q.push(sta);vis[sta]=1;dis[sta]=0;\n    while(Q.size()){\n        ll u=Q.front();Q.pop();\n        for(R ll i=head[u];i;i=ax[i].nex){\n            ll v=ax[i].to;\n            if(have[v] && dis[v]>dis[u]+1){\n                dis[v]=dis[u]+1;\n                if(!vis[v]) {vis[v]=1;Q.push(v);}\n            }\n        }\n    }\n}\nint main()\n{\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n    read(n);read(m);\n    for(R ll i=1;i<=m;++i){\n        ll xi,yi;\n        read(xi);read(yi);\n        if(xi!=yi){\n            ax[++tot].fro=xi;\n            ax[tot].to=yi;\n            ax[tot].nex=head[xi];\n            head[xi]=tot;\n            bx[++all].fro=yi;\n            bx[all].to=xi;\n            bx[all].nex=lat[yi];\n            lat[yi]=all;\n        }\n    } \n    read(sta);read(end);\n    dfs(end);\n    for(R ll i=1;i<=n;++i)\n     if(!have[i])\n      for(R ll j=lat[i];j;j=bx[j].nex)\n       want[bx[j].to]=1;\n    for(R ll i=1;i<=n;++i) if(want[i]==1) have[i]=0;   \n    spfa();\n    printf(\"%lld\\n\",(dis[end] == inf ? -1ll : dis[end]));\n//\tfclose(stdin);\n//\tfclose(stdout);\n    return 0;\n}\n\n```",
        "postTime": 1535616641,
        "uid": 87931,
        "name": "tcswuzb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "## Problem\n\n[P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011](https://www.luogu.org/problemnew/show/P2296)\n\n## solution\n\n\u9996\u5148\u58f0\u660e\uff0c\u8fd9\u9898\u6211\u7528\u4e86spfa\uff0c\u800c\uff1a\n\n> \u5173\u4e8espfa\uff1a\u5b83\u6b7b\u4e86\u3002\n\n> \u6740\u624b\uff1a$NOI\\ {2018}-T1$\u51fa\u9898\u4eba\n\n\u611f\u8c22\u51fa\u9898\u4eba\uff0c\u6ca1\u6709\u5361spfa\n\n\n- \u7528\u65f6\uff1a 20ms \n- \u7a7a\u95f4\uff1a 5082KB(4.74MB)\n- \u4ee3\u7801\u957f\u5ea6\uff1a 3.32KB\n- \u63d0\u4ea4\u8bb0\u5f55\uff1a [R9776986](https://www.luogu.org/recordnew/show/9776986)\n\n\n\u5148\u8bf4\u601d\u8def\uff1a\n\n1. \u9996\u5148\uff0c\u8981\u5904\u7406\u51fa\u54ea\u4e9b\u70b9**\u4e0d\u80fd**\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\n\t- \u51fd\u6570\uff1a``void live(void)``\n\t- \u8fd9\u91cc\u7684\u65b9\u6cd5\u662f\u5efa\u53cd\u56fe\u8dd1spfa\n    - **\u4e0d\u80fd**\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u7684\u70b9\u5b58\u5728``temp_alive``\u6570\u7ec4\u91cc\uff0c``1``\u4e3a\u6d3b\u7740\uff0c``0``\u4e3a\u6b7b\u4e86\n2. \u5176\u6b21\uff0c\u8981\u628a\u6240\u6709\u6307\u5411``\u4e0d\u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u7684\u90a3\u4e9b\u70b9``\u7684\u90a3\u4e9b\u70b9\u8bbe\u7f6e\u4e3a~~``\u6b7b\u4e86``~~\n\t- \u5728\u51fd\u6570``live()``\u91cc\u6267\u884c\n\t- \u5b58\u5230``alive``\u6570\u7ec4\uff0c``1``\u4e3a\u6d3b\u7740\uff0c``0``\u4e3a\u6b7b\u4e86\n\t- \u6ce8\u610f\uff1a\u7b2c\u4e8c\u6b65\u7684\u7ed3\u679c\u4e0d\u80fd\u76f4\u63a5\u76f4\u63a5\u5b58\u50a8\u5728\u7b2c\u4e00\u6b65\u7684\u6570\u7ec4\u91cc\uff0c\u5426\u5219\u4f1a~~\u6740\u6389\u4e00\u4e9b\u6709\u7528\u7684\u70b9~~\n3. \u4e00\u904dspfa\u6c42\u6700\u77ed\u8def\uff0c\u6c42\u7684\u8fc7\u7a0b\u4e2d\u6392\u9664\u6240\u6709\u90a3\u4e9b~~``\u6b7b\u4e86``~~\u7684\u70b9\u3002\n\t- \u51fd\u6570\uff1a``void spfa(void)``\n    - \u6ce8\u610f\u8def\u5f84\u957f\u5ea6\u5747\u4e3a``1``\n4. \u5b8c\u7ed3\u6563\u82b1\u266a(^\u2207^*)\n\n\n\n## Code\n\n```\n// luogu-judger-enable-o2\n/*\n    Problem: P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011 \n    Author: \u822a\u7a7a\u4fe1\u5965 \n    Date: 2018/08/16\n*/\n#include <stdio.h>\n#include <string.h>\n#include <vector>\n#include <queue>\n#define Clear(a, x) memset(a, x, sizeof(a))\nusing namespace std;\n\nnamespace hkxa { /* \u9632\u91cd\u540d */\n    inline char Getchar();\n    template <typename _TpInt> inline _TpInt read();\n    template <typename _TpInt> inline void write(_TpInt x);\n       \n#\tdefine Max_N 10003\n    \n    vector<int> to[Max_N];\n    vector<int> fr[Max_N]; /* \u53cd\u56fe */\n    int n, m;\n    int start, finish;\n    bool alive[Max_N] = {0};\n    int dis[Max_N] = {0};\n    \n    void live()\n    {\n        bool temp_alive[Max_N] = {0};\n        queue <int> q;\n        q.push(finish);\n        temp_alive[finish] = 1;\n        int point;\n        while (!q.empty()) {\n            point = q.front();\n            q.pop();\n            for (int i = 0; i < fr[point].size(); i++) {\n                if (!temp_alive[fr[point][i]]) {\n                    q.push(fr[point][i]);\n                    temp_alive[fr[point][i]] = 1;\n                }\n            }\n        }\n        Clear(alive, 1);\n        for (int i = 1; i <= n; i++) {\n            if (!temp_alive[i]) {\n                alive[i] = 0;\n                for (int j = 0; j < fr[i].size(); j++) {\n                    alive[fr[i][j]] = 0;\n                }\n            }\n        }\n    } \n    \n    void spfa()\n    {\n        Clear(dis, 0x3f);\n        dis[start] = 0;\n        queue <int> q;\n        q.push(start);\n        int point;\n        while (!q.empty()) {\n            point = q.front();\n            q.pop();\n            for (int i = 0; i < to[point].size(); i++) {\n                if (alive[to[point][i]] && dis[point] + 1 < dis[to[point][i]]) {\n                    q.push(to[point][i]);\n                    dis[to[point][i]] = dis[point] + 1;\n                }\n            }\n        }\n    } \n    \n    int main() \n    {\t\t\n        n = read<int>();\n        m = read<int>();\n        int f, t;\n        for (int i = 0; i < m; i++) {\n            f = read<int>();\n            t = read<int>();\n            to[f].push_back(t);\n            fr[t].push_back(f);\n        }\n        start = read<int>();\n        finish = read<int>();\n        \n        live();\n        spfa();\n        if (dis[finish] == 0x3f3f3f3f)\n            dis[finish] = -1;\n        write(dis[finish]);\n        puts(\"\");\n        \n        return 0;\n    }\n\n    char BufferRead[1 << 15];\n    int rLen = 0, rPos = 0;\n    inline char Getchar()\n    {\n        if (rPos == rLen) rPos = 0, rLen = fread(BufferRead, 1, 1 << 15, stdin);\n        if (rPos == rLen) return EOF;\n        return BufferRead[rPos++];\n    } \n\n    template <typename _TpInt>\n    inline _TpInt read()       \n    {\n        register int flag = 1;\n        register char c = Getchar();\n        while ((c > '9' || c < '0') && c != '-') \n            c = Getchar();\n        if (c == '-') flag = -1, c = Getchar();\n        register _TpInt init = (c & 15);\n        while ((c = Getchar()) <= '9' && c >= '0') \n            init = (init << 3) + (init << 1) + (c & 15);\n        return init * flag;\n    }\n\n    template <typename _TpInt>\n    inline void write(_TpInt x)\n    {\n        if (x < 0) {\n            putchar('-');\n            write<_TpInt>(~x + 1);\n        }\n        else {\n            if (x > 9) write<_TpInt>(x / 10);   \n            putchar(x % 10 + '0');\n        }\n    }\n}\n\nint main()\n{\n    hkxa::main();\n    return 0;\n}\n```",
        "postTime": 1534390676,
        "uid": 63720,
        "name": "brealid",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "## \u601d\u8def\n- \u9898\u76ee\u8981\u6c42\u6211\u4eec\u7684\u6700\u77ed\u8def\u5fc5\u987b\u7ecf\u8fc7\u6ee1\u8db3task1\u8981\u6c42\u7684\u7ed3\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u5f53\u4f18\u5148\u5904\u7406\u51fa\u6240\u6709\u6ee1\u8db3task1\u7684\u7ed3\u70b9\uff1b\n- \u89e3\u51b3\u4e86\u4e0a\u8ff0\u95ee\u9898\uff0c\u6211\u4eec\u53ea\u9700\u5728bfs\u6269\u5c55\u4e2d\u7a0d\u5fae\u52a0\u4e00\u70b9\u9650\u5236\u6761\u4ef6\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u9898\u76ee\u8981\u6c42\u4e86\u3002\n\n## \u9884\u5904\u7406\n- \u7ed3\u70b9\u53ef\u8fbe\u7ec8\u70b9 <=> \u7ec8\u70b9\u53ef\u8fbe\u7ed3\u70b9\u3002\u6211\u4eec\u53ea\u9700\u8981\u5efa\u53cd\u56fe\u5e76\u6267\u884c\u4e00\u4e2a\u4ece\u7ec8\u70b9\u5f00\u59cbbfs\uff0c\u5c31\u53ef\u4ee5\u5728\u8fd9\u5f20\u6709\u5411\u56fe\u4e0a\u5904\u7406\u51fa\u6240\u6709\u201c\u53ef\u8fbe\u7ec8\u70b9\u201d\u7684\u7ed3\u70b9\u4e86\u3002\n- \u57fa\u4e8e\u4e0a\u4e00\u4e2a\u505a\u6cd5\uff0c\u6211\u4eec\u5728\u6269\u5c55\u5b50\u72b6\u6001\u7684\u65f6\u5019\uff0c\u4e0d\u59a8\u5bf9\u6bcf\u4e00\u53ef\u6269\u5c55\u7684\u7ed3\u70b9j\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4deg[j]\uff0cdeg[j]\u8bb0\u5f55\u7740**j\u7684\u51fa\u8fb9\u4e2d\u6709\u591a\u5c11\u201c\u53ef\u8fbe\u7ec8\u70b9\u201d\u7684\u7ed3\u70b9**\u3002\n\n## \u5b9e\u73b0\u7ec6\u8282\n- \u56e0\u4e3a\u6211\u4eec\u9700\u8981\u5bf9j\u7ed3\u70b9\u6267\u884cdeg[j]++\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u7684\u5224\u91cd\u5e94\u5f53\u5728\u53d6\u51fa\u961f\u9996\u4e4b\u540e\u8fdb\u884c\u3002\n- \u7528vector\u5b58\u56fe\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u5229\u7528deg[j]==G[j].size()\u6765\u4fdd\u8bc1\u5408\u6cd5\u7684bfs\u6269\u5c55\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e4+10,maxm=2e5+10;\nint n,m,st,ed;\n\nint deg[maxn];//\u8bb0\u5f55\u70b9\u7684\u5408\u6cd5\u51fa\u5ea6 \nvector<int> tow_G[maxn],rev_G[maxn];//\u6b63\u53cd\u5b58\u56fe \nbool vis[maxn];//\u5224\u91cd\u6570\u7ec4 \n\nqueue<int> q;\nvoid read_preBFS(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;++i){\n\t\tint u,v; scanf(\"%d%d\",&u,&v);\n\t\ttow_G[u].push_back(v);//\u6b63\u53cd\u5b58\u56fe \n\t\trev_G[v].push_back(u);\n\t}\n\tcin>>st>>ed;\n\t//\u4ee5\u4e0b\u662f\u666e\u901a\u7684bfs\u64cd\u4f5c \n\tq.push(ed);\n\twhile(!q.empty()){\n\t\tint tmp=q.front(); q.pop();\n\t\tif(vis[tmp]) continue; vis[tmp]=true;\n\t\tfor(int i=0;i<rev_G[tmp].size();++i){\n\t\t\tint j=rev_G[tmp][i];\n\t\t\tdeg[j]++;\n\t\t\tq.push(j);\n\t\t}\n\t}\n}\n\nint dis[maxn];\nvoid solve_BFS(){\n\tmemset(vis,0,sizeof(vis));//\u91cd\u7f6evis\u6570\u7ec4 \n\tmemset(dis,0x3f,sizeof(dis)); \n\tdis[st]=0;\n\tq.push(st);\n\twhile(!q.empty()){\n\t\tint tmp=q.front(); q.pop();\n\t\tif(vis[tmp]) continue; vis[tmp]=true;\n\t\tif(deg[tmp]!=tow_G[tmp].size()) continue;\n\t\tfor(int i=0;i<tow_G[tmp].size();++i){\n\t\t\tint j=tow_G[tmp][i];\n\t\t\tif(dis[j]>dis[tmp]+1){\n\t\t\t\tdis[j]=dis[tmp]+1;\n\t\t\t\tq.push(j);\t\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tread_preBFS();\n\tsolve_BFS();\n\tcout<<(dis[ed]!=0x3f3f3f3f?dis[ed]:-1);\n\treturn 0;\n}\n```",
        "postTime": 1532084457,
        "uid": 38283,
        "name": "Dog_Two",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "** _2018.6.11\u4e2d\u5348 \u534e\u5e08\u4e00\u673a\u623f_ **\n\n\n------------\n\n\u539f\u9898\uff1a[P2296 \u5bfb\u627e\u9053\u8def](https://www.luogu.org/problemnew/show/P2296)\n\n### \u9898\u76ee\u63cf\u8ff0\n\n\u5728\u6709\u5411\u56fe _G_ \u4e2d\uff0c\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6\u5747\u4e3a _1_ \uff0c\u73b0\u7ed9\u5b9a\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8bf7\u4f60\u5728\u56fe\u4e2d\u627e\u4e00\u6761\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\uff0c\u8be5\u8def\u5f84\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n\n1. \u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\u3002\n2. \u5728\u6ee1\u8db3\u6761\u4ef6 _1_ \u7684\u60c5\u51b5\u4e0b\u4f7f\u8def\u5f84\u6700\u77ed\u3002\n\n\u6ce8\u610f\uff1a\u56fe _G_ \u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u9898\u76ee\u4fdd\u8bc1\u7ec8\u70b9\u6ca1\u6709\u51fa\u8fb9\u3002\n\n\u8bf7\u4f60\u8f93\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\u7684\u957f\u5ea6\u3002\n\n### \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570 _n_ \u548c _m_ \uff0c\u8868\u793a\u56fe\u6709 _n_ \u4e2a\u70b9\u548c _m_ \u6761\u8fb9\u3002\n\n\u63a5\u4e0b\u6765\u7684 _m_ \u884c\u6bcf\u884c _2_ \u4e2a\u6574\u6570 _x,y_ \uff0c\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u8868\u793a\u6709\u4e00\u6761\u8fb9\u4ece\u70b9 _x_ \u6307\u5411\u70b9 _y_ \u3002\n\n\u6700\u540e\u4e00\u884c\u6709\u4e24\u4e2a\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570 _s, t_ \uff0c\u8868\u793a\u8d77\u70b9\u4e3a _s_ \uff0c\u7ec8\u70b9\u4e3a _t_ \u3002\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\n\u8f93\u51fa\u53ea\u6709\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6ee1\u8db3\u9898\u76ee\u63cf\u8ff0\u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u3002\u5982\u679c\u8fd9\u6837\u7684\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u8f93\u51fa -1\u22121 \u3002\n\n### \u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\n\u8f93\u5165\u6837\u4f8b#1\uff1a \n\n```\n3 2  \n1 2  \n2 1  \n1 3\n```\n\n\u8f93\u51fa\u6837\u4f8b#1\uff1a \n\n```\n-1\n```\n\n\u8f93\u5165\u6837\u4f8b#2\uff1a \n\n```\n6 6  \n1 2  \n1 3  \n2 6  \n2 5  \n4 5  \n3 4  \n1 5\n```\n\n\u8f93\u51fa\u6837\u4f8b#2\uff1a \n\n```\n3\n```\n\n### \u8bf4\u660e\n\n\u89e3\u91ca1\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/1350.png)\n\n\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u7bad\u5934\u8868\u793a\u6709\u5411\u9053\u8def\uff0c\u5706\u70b9\u8868\u793a\u57ce\u5e02\u3002\u8d77\u70b9 _1_ \u4e0e\u7ec8\u70b9 _3_ \u4e0d\u8fde\u901a\uff0c\u6240\u4ee5\u6ee1\u8db3\u9898\u76ee\u63cf\u8ff0\u7684\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u6545\u8f93\u51fa _-1_ \u3002\n\n\u89e3\u91ca2\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/1351.png)\n\n\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u5f84\u4e3a _1_  - >  _3_  - >  _4_  - >  _5_  \u3002\u6ce8\u610f\u70b9 _2_ \u4e0d\u80fd\u5728\u7b54\u6848\u8def\u5f84\u4e2d\uff0c\u56e0\u4e3a\u70b9 _2_ \u8fde\u4e86\u4e00\u6761\u8fb9\u5230\u70b9 _6_ \uff0c\u800c\u70b9 _6_ \u4e0d\u4e0e\u7ec8\u70b9 _5_ \u8fde\u901a\u3002\n\n\u3010\u6570\u636e\u8303\u56f4\u3011\n\n\u5bf9\u4e8e _30%_ \u7684\u6570\u636e\uff0c _0<n\u226410_ \uff0c _0<m\u226420_ ;\n\n\u5bf9\u4e8e _60%_ \u7684\u6570\u636e\uff0c _0<n\u2264100_ \uff0c _0<m\u22642000_ ;\n\n\u5bf9\u4e8e _100%_ \u7684\u6570\u636e\uff0c _0<n\u226410000,0<m\u2264200000,0<x,y,s,t\u2264n,x,s\u2260t_ \u3002\n\n------------\n\n#### \u6ce8\uff1a2014 NOIP D2T2\n\n## \u961f\u5217BFS\u601d\u8def\n\n\u6211\u4eec\u5728\u5efa\u56fe\u7684\u540c\u65f6\u5efa\u7acb\u4e00\u5f20\u53cd\u5411\u56fe\uff0c\u5e76\u5728\u53cd\u5411\u56fe\u4e0a\u4ece\u7ec8\u70b9\u5f00\u59cb\u627e\u4e0e\u7ec8\u70b9\u76f8\u8fde\u7684\u8fde\u901a\u70b9\u3002\u627e\u5b8c\u4e4b\u540e\uff0c\u4ece\u7ec8\u70b9\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9\u548c\u53cd\u5411\u56fe\u4e0a\u8fd9\u4e2a\u70b9\u7684\u51fa\u70b9\u90fd\u4e0d\u5728\u9898\u76ee\u6240\u6c42\u7684\u8def\u5f84\u4e4b\u4e0a\u3002\n\n#### \u5f15\u7406\uff1a\n\n\u6240\u6c42\u8def\u5f84\u4e0d\u5305\u62ec\u4ee5\u4e0b\u4e24\u79cd\u70b9\uff1a\n\n1. \u5728\u53cd\u5411\u56fe\u4e0a\u4ece\u7ec8\u70b9\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9\uff1b\n2. \u4e0e\u4e0a\u8ff0\u70b9\u76f4\u63a5\u76f8\u8fde\u7684\u70b9\u7684\u3002\n\n#### \u8bc1\u660e\uff1a\n\n1. \u5047\u8bbe\u5728\u53cd\u5411\u56fe\u4e2d\u4ece\u7ec8\u70b9\u4e0d\u80fd\u5230\u8fbe\u70b9A\uff0c\u90a3\u4e48\u5728\u539f\u56fe\u4e2d\u4e5f\u65e0\u6cd5\u4eceA\u70b9\u5230\u8fbe\u7ec8\u70b9\uff1b\n2. \u82e5\u70b9A\u5728\u53cd\u5411\u56fe\u4e0a\u4e0e\u70b9B\u76f4\u63a5\u76f8\u8fde\uff0c\u4e14\u70b9B\u5728\u9898\u76ee\u6240\u6c42\u8def\u5f84\u4e0a\uff0c\u90a3\u4e48\u56e0\u4e3a\u70b9A\u4e0d\u4e0e\u7ec8\u70b9\u8fde\u901a\uff0c\u6240\u4ee5\u8be5\u8def\u5f84\u4e0d\u4e3a\u6240\u6c42\u8def\u5f84\u3002\n\n\u8bc1\u6bd5\u3002\n\n\u90a3\u4e48\u65e2\u7136\u8fd9\u5f20\u56fe\u6709\u4e0a\u8ff0\u7684\u8fd9\u6837\u4e00\u4e9b\u6027\u8d28\uff0c\u8fd9\u9053\u9898\u5c31\u4e0d\u96be\u89e3\u51b3\u4e86\u3002\n\n| \u5b9e\u73b0\u65f6\u95f4 | \u7a0b\u5e8f\u8017\u65f6 | \u5360\u7528\u5185\u5b58 | \u6700\u7ec8\u5f97\u5206 |\n| :----------: | :----------: | :----------: | :----------: |\n| 20min | 112ms | 5109KB | 100 |\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int MAXN=10005;\nint n,m,s,t,dis[MAXN];\nbool ltk[MAXN],vis[MAXN];\n///\u5728\u53cd\u5411\u56fe\u4e2d,\u80fd\u7531\u7ec8\u70b9\u5230\u8fbe\u7684\u70b9ltk\u503c\u4e3atrue,\u5426\u5219\u4e3afalse\n///vis\u6570\u7ec4\u4e2d\u503c\u4e3atrue\u7684\u70b9\u8868\u793a\u6709\u6548\u70b9(\u6240\u6c42\u8def\u5f84\u4e0a\u53ef\u80fd\u5b58\u5728\u7684\u70b9)\nvector<int>G[MAXN];///\u539f\u56feGraph\nvector<int>op[MAXN];///\u53cd\u5411\u56fepposite Graph\nqueue<int>Q;\nint read()///\u5feb\u8bfb\u52a0\u901f\n{\n    int re=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9') ch=getchar();\n    while(ch>='0'&&ch<='9') re=re*10+ch-'0',ch=getchar();\n    return re;\n}\nint main()\n{\n    n=read(),m=read();\n    while(m--)\n    {\n        s=read(),t=read();\n        G[s].push_back(t);///\u5efa\u539f\u56fe\n        op[t].push_back(s);///\u5efa\u53cd\u56fe\n    }\n    s=read(),t=read();\n    Q.push(t);\n    while(!Q.empty())///\u6c42\u7ec8\u70b9\u65e0\u6cd5\u5230\u8fbe\u7684\u70b9\n    {\n        int now=Q.front();Q.pop();\n        if(ltk[now]) continue;///\u6392\u9664\u5197\u4f59\n        ltk[now]=1;///\u8be5\u70b9\u80fd\u8d70\n        for(int i=0;i<op[now].size();i++)\n        {\n            int hjj=op[now][i];\n            if(!ltk[hjj]) Q.push(hjj);\n        }\n    }\n    memcpy(vis,ltk,sizeof ltk);///\u6392\u9664\u6ee1\u8db3\u6027\u8d281\u7684\u70b9\n    for(int i=1;i<=n;i++)\n        if(!ltk[i])\n            for(int j=0;j<op[i].size();j++)\n                vis[op[i][j]]=false;///\u6392\u9664\u6ee1\u8db3\u6027\u8d282\u7684\u70b9\n    if(!vis[s])///\u8d77\u70b9\u4e0d\u53ef\u80fd\u5728\u8def\u5f84\u4e0a\u5219\u8f93\u51fa-1\n    {\n        printf(\"-1\");\n        return 0;\n    }\n    Q.push(s);\n    while(!Q.empty())///\u6c42\u6700\u77ed\u8def\n    {\n        int now=Q.front();Q.pop();\n        if(!vis[now]) continue;\n        vis[now]=0;\n        for(int i=0;i<G[now].size();i++)\n        {\n            int hjj=G[now][i];\n            if(vis[hjj]&&!dis[hjj])\n            {\n                dis[hjj]=dis[now]+1;\n                Q.push(hjj);\n            }\n        }\n    }\n    printf(\"%d\",dis[t]);\n    return 0;\n}\n\n```\n",
        "postTime": 1528695949,
        "uid": 51983,
        "name": "Uranus",
        "ccfLevel": 4,
        "title": "\u3010\u9898\u76ee\u603b\u7ed3\u3011P2296 \u5bfb\u627e\u9053\u8def"
    },
    {
        "content": "### \u5bfb\u627e\u9053\u8def\n#### Solution\n\u3000\u3000\u8981\u6c42\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u70b9\u6240\u5230\u8fbe\u7684\u70b9\u90fd\u80fd\u5230\u8fbe\u7ec8\u70b9.\u90a3\u4e48\u5c31\u53ef\u4ee5\u5148\u6c42\u51fa\u6240\u6709**\u4e0d\u80fd\u5230\u8fbe\u7ec8\u70b9\u7684\u70b9$V$**.\u5c06\u80fd\u5230\u8fbe$V$\u7684\u70b9**\u5220\u9664**, \u7136\u540e\u6c42\u8d77\u70b9\u5230\u7ec8\u70b9\u7684**\u6700\u77ed\u8def**.\n\n- \u53ef\u4ee5\u4ece**\u7ec8\u70b9\u53cd\u5411\u904d\u5386**, \u80fd\u88ab\u904d\u5386\u5230\u7684\u70b9\u5c31\u80fd\u5230\u8fbe\u7ec8\u70b9, \u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u4e00\u4e2a\u70b9\u80fd\u4e0d\u80fd\u76f4\u63a5\u5230\u8fbe\u7ec8\u70b9.\u8fd9\u4e2a\u8981\u6c42\u6211\u4eec\u63d0\u524d\u5efa\u51fa**\u53cd\u5411\u8fb9**.\n- \u904d\u5386\u4e00\u4e2a\u70b9$u$\u6240\u80fd\u5230\u8fbe\u7684\u70b9$v$, \u5982\u679c\u5b58\u5728\u4e00\u4e2a$v$\u4e0d\u80fd\u76f4\u63a5\u5230\u8fbe\u7ec8\u70b9, \u8bf4\u660e\u8fd9\u4e2a\u70b9$u$\u4e0d\u5141\u8bb8\u5b58\u5728\u4e8e\u6240\u6c42\u8def\u5f84\u4e0a.\u56e0\u6b64\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u88ab\u4ece\u56fe\u4e2d\u5220\u9664.\n- \u7528\u6700\u77ed\u8def\u7b97\u6cd5(\u5982spfa)\u6c42\u51fa\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def, \u5982\u679c\u9047\u5230\u4e86\u5df2\u88ab\u6807\u8bb0\u5220\u9664\u7684\u70b9\u5c31\u8df3\u8fc7\u8fd9\u4e2a\u70b9\u7684\u66f4\u65b0.\n\n#### Code\n```cpp\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#define N 200005\n#define inf 0x3f3f3f3f\nusing std::queue;\n\nstruct Edge{\n    int v,nxt;\n}e[N],E[N];\n\nint n,m,s,t;\nint head[N],tot;\nint h[N],tol;\n\nvoid AddEdge(int u,int v){\n    e[++tot]=(Edge){v,head[u]};head[u]=tot;//\u6b63\u5411\u8fb9\n    E[++tol]=(Edge){u,h[v]};h[v]=tol;//\u53cd\u5411\u8fb9\n}\n\nint vis[N];//\u8868\u793a\u8fd9\u4e2a\u70b9\u80fd\u76f4\u63a5\u5230\u8fbe\u7ec8\u70b9\nint be[N];//if be[i]== true \u8868\u793ai\u6ca1\u6709\u88ab\u5220\u9664\nint tt;\n\nint dfs(int x,int f){//\u4ece\u7ec8\u70b9\u5f00\u59cb\u53cd\u5411\u904d\u5386\u6240\u6709\u70b9\n    vis[x]=true;\n    for(int i=h[x];i;i=E[i].nxt){//\u53cd\u5411\u8fb9\n        int to=E[i].v;\n        if(to==f)continue;\n        if(vis[to])continue;\n        dfs(to,x);\n    }\n}\n\nint init(){//\u5220\u9664\u4e0d\u80fd\u5b58\u5728\u4e8e\u8def\u5f84\u4e0a\u7684\u70b9\n    for(int i=1;i<=n;++i){\n        if(!vis[i])continue;bool flag=0;\n        for(int j=head[i];j;j=e[j].nxt){\n            int to=e[j].v;\n            if(!vis[to])flag=true;//\u5982\u679c\u70b9 i \u6240\u5230\u8fbe\u7684\u70b9\n        }//       to \u4e0d\u80fd\u76f4\u63a5\u5230\u8fbe\u7ec8\u70b9, \u5c31\u5220\u9664\u8fd9\u4e2a\u70b9\n        if(!flag)be[i]=true;\n    }\n}\n\nint dis[N];\n\nint spfa(int s,int t){// \u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(vis,false,sizeof(vis));\n\tint top,to;\n\tdis[s]=0;queue<int>que;que.push(s);vis[s]=true;\n\twhile(!que.empty()){\n\t\ttop=que.front();\n\t\tque.pop();\n\t\tfor(int i=head[top];i;i=e[i].nxt){\n\t\t\tto=e[i].v;\n            if(!be[to])continue;//\u5982\u679c\u70b9 to           \n            int l;//\u5df2\u88ab\u6807\u8bb0\u5220\u9664, \u5c31\u8df3\u8fc7\u8fd9\u4e2a\u70b9\u7684\u66f4\u65b0\n\t\t\tif(dis[top]+1<dis[to]){\n\t\t\t\tdis[to]=dis[top]+1;\n\t\t\t\tif(!vis[to]){\n\t\t\t\t\tvis[to]=true;\n\t\t\t\t\tque.push(to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[t];\n}\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;++i){\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        AddEdge(u,v);\n    }\n    scanf(\"%d%d\",&s,&t);\n    dfs(t,0);\n\tinit();\n\tint ans=spfa(s,t);\n\tif(ans==inf)ans=-1;\n\tprintf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1523953172,
        "uid": 39067,
        "name": "aiyougege",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u6709\u4eba\u95ee\u6211\uff0c\u8fd9\u9898\u7528\u666e\u901a\u7684\u4e8c\u7ef4\u6570\u7ec4\u8981\u7206\u5440\uff0c\u5185\u5b58\u4e0d\u591f\u5440\u00b7 \u00b7 \u00b7\n\n\u751a\u81f3\u6709\u4eba\u63d0\u4ea4\u51fa\u73b0\u4e86MLE\uff08\u4e0d\u591a\u89c1\uff01\uff09\n\n\u4e8e\u662f\uff0c\u6211\u56de\u590d\uff1avector\u4e0d\u5c31\u884c\u5566\uff1f\uff1f\uff1f\n\n\u5343\u4e07\u4eba\n# \u604d\u7136\u5927\u609f\u00b7 \u00b7 \u00b7\n\n```cpp\n#include <cstdio>\n#include <vector>\nusing namespace std;\nint n,m,started,ended;\nint arr[10001]={0};\nint que[10001],head,tail,step[10001],book[10001];\nvector <int> e[10001],re[10001];\nvoid dfs(int u)\n{\n    if(arr[u]==1) return;\n    arr[u]=1;\n    for(int i=0;i<re[u].size();i++)\n    {\n        dfs(re[u][i]);\n    }\n    return ;\n}\nint main()\n{\n    int u,v;\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d %d\",&u,&v);\n        e[u].push_back(v);\n        re[v].push_back(u);\n    }\n    scanf(\"%d %d\",&started,&ended);\n    dfs(ended);\n    for(int i=1;i<=n;i++)\n    {\n        if(arr[i]==1)\n        {\n            for(int j=0;j<e[i].size();j++)\n            {\n                v=e[i][j];\n                if(arr[v]==0)\n                {\n                    arr[i]=-1;\n                }\n            }\n        }\n    }\n    head=1;\n    tail=1;\n    que[tail]=started;\n    step[tail]=0;\n    tail++;\n    int flag=0;\n    while(head<tail)\n    {\n        u=que[head];\n        for(int i=0;i<e[u].size();i++)\n        {\n            v=e[u][i];\n            if(book[v]==0 && arr[v]==1)\n            {\n                book[v]=1;\n                que[tail]=v;\n                step[tail]=step[head]+1;\n                tail++;\n            }\n            if(v==ended)\n            {\n                flag=1;\n                break;\n            }\n        }\n        if(flag==1)\n        {\n            break;\n        }\n        head++;\n    }\n    if(head<tail)\n    {\n        printf(\"%d\",step[tail-1]);\n    }\n    else\n    {\n        printf(\"-1\");\n    }\n    return 0;\n}\n```",
        "postTime": 1522579626,
        "uid": 61096,
        "name": "\u6838\u5f39\u5934AC",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "spfa\u5927\u6cd5\u597d\uff01\u9996\u5148\u6211\u4eec\u601d\u8003\u9898\u76ee\uff0c\u4ed6\u8981\u6211\u4eec\u8fde\u7684\u8fb9\u5fc5\u987b\u95f4\u63a5\u6216\u76f4\u63a5\u8fde\u7ec8\u70b9\uff0c\u90a3\u6211\u4eecdfs\u4ece\u7ec8\u70b9\u770b\u770b\u54ea\u4e9b\u70b9\u80fd\u5230\uff0c\u8bb0\u5f97\u662f\u6b63\u5411\u53cd\u5411\u90fd\u5b58\u4e00\u6b21\n\n\uff0c\u4f46\u8bb0\u4f4f\u6211\u4eec\u8981\u628a\u90a3\u4e9b\u4e0d\u80fd\u5230\u7ec8\u70b9\u7684\u518d\u6269\u5c55\u4e00\u4e0b\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e9b\u70b9\u7684\u8fde\u8fb9\u6837\u4f8b\u4e8c\u7684\u5c31\u5f88\u6e05\u695a\uff0c6\u4e0d\u80fd2\u5c31\u4e0d\u80fd;\u7136\u540espfa\uff01\uff01\uff01\n\n```cpp\n#include <bits/stdc++.h>\n#define inf 1000000\nusing namespace std;\nconst int maxn=200010;\nstruct cnm{int u;int v,w,head,next;}e[maxn],t[maxn];\nint read(){\n    int x=0,y=1;char c=getchar();\n    while(c>'9'||c<'0'){\n    if(c=='-') y=-1;c=getchar();}\n    while(c>='0'&&c<='9'){\n    x=x*10+c-'0';c=getchar();}    \n    return x*y;}\nint n,m,m1,m2,x,y,dis[maxn],h[maxn],book[maxn],vis[maxn],book1[maxn];    \nvoid add(int u,int v,int w){\nm1++;e[m1].u=u;e[m1].v=v;e[m1].w=w;e[m1].next=e[u].head;e[u].head=m1;}\nvoid add2(int u,int v,int w){\nm2++;t[m2].u=u;t[m2].v=v;t[m2].w=w;t[m2].next=t[u].head;t[u].head=m2;}//\u53cd\u5411\u8fb9\nvoid dfs(int xx){\n    if(book1[xx]) return;\n    h[xx]=1;book1[xx]=1;\n    for(int i=t[xx].head;i;i=t[i].next){\n    int v=t[i].v;\n    h[v]=1;\n    dfs(v);}\n```\n}//\u627e\u80fd\u5230\u7684\u70b9\n```cpp\nvoid dfs1(int en)    {\n    book[en]=1;\n    for(int i=t[en].head;i;i=t[i].next)\n    book[t[i].v]=1;}//\u6269\u5c55\u4e0b\nvoid spfa(int v0){\n    for(int i=1;i<=n;i++) dis[i]=inf;\n    queue <int> q;\n    dis[v0]=0;q.push(v0);vis[v0]=1;\n    while(!q.empty()){\n    int u=q.front();q.pop();vis[u]=0;\n    for(int i=e[u].head;i;i=e[i].next)\n    {int v=e[i].v,w=e[i].w;\n        if(dis[v]>dis[u]+w&&!book[v])\n        {dis[v]=dis[u]+w;\n        if(!vis[v]){q.push(v);vis[v]=1;}}}}}    //spfa\u6a21\u677f\nint main(){\n    n=read();m=read();\n    for(register int i=1;i<=m;i++)\n    {int u,v,w;u=read();v=read();w=1;\n    add(u,v,w);add2(v,u,w);}\n    x=read();y=read();\n    dfs(y);    \n    if(h[x]==0) {cout<<-1<<endl;return 0;}//\u8d77\u70b9\u6ca1\u6709\u5c31-1\n    for(int i=1;i<=n;i++) \n    {if(!h[i]) dfs1(i);}\n    spfa(x);\n    cout<<dis[y]<<endl;//\u8f93\u51fa\u7ec8\u70b9\u7684\u8ddd\u79bb\nreturn 0;}\n```",
        "postTime": 1509427554,
        "uid": 37069,
        "name": "\u6b64\u540e\u65e0\u826f\u8fb0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u4e00\u904dAC\uff0c\uff0c\u672c\u849f\u84bb\u8868\u793a\u5f88\u5f00\u5fc3\n\n\u8bba\u5982\u4f55\u627e\u5230\u53ef\u4ee5\u8d70\u7684\u70b9\uff1a\n\n\u5148\u4ece\u7ec8\u70b9\u53cd\u5411\u904d\u5386\u4e00\u6b21\uff0c\u5e76\u628a\u904d\u5386\u5230\u7684\u70b9\u6253\u4e2agood\u6807\u8bb0\uff1b\n\n\u5982\u679c\u8d77\u70b9\u6ca1\u6709good\u6807\u8bb0\uff0c\u5c31\u4ee3\u8868\u5230\u4e0d\u4e86\u8d77\u70b9\uff0c\u90a3\u4e48\u5c31\u8f93\u51fa-1\n\n\u7136\u540e\u5728\u5faa\u73af\u627e\u4e00\u904d\u6240\u4ee5\u7684\u6ca1\u6709good\u6807\u8bb0\u7684\u70b9\uff0c\u5e76\u5bf9\u5176\u76f4\u63a5\u76f8\u8fde\u7684\u70b9\u6253\u4e0acan\u6807\u8bb0\uff0c\u5373\u4e0d\u80fd\u4f7f\u7528\n\n\u6700\u540e\u5c31\u6109\u5feb\u7684\u518d\u4e00\u6b21BFS\uff0c\u4e00\u65e6\u904d\u5386\u5230\u7ec8\u70b9\uff0c\u5c31\u8f93\u51faans\n\n                \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct abc{\n    int date,next;\n};\nint n,m,head[11000],headback[11000],ans[11000],tot,totback,s,t;\nabc chain[201000],chainback[201000];\nint q[11000];bool may[11000],good[11000],can[11000];\nint read()\n{\n    char c;int x=0;\n    c=getchar();\n    while(c>'9'||c<'0')c=getchar();\n    while(c<='9'&&c>='0')x=x*10+c-'0',c=getchar();\n    return x;\n}\nvoid add(int from,int want)//\u52a0\u8fb9\n{\n    tot++;\n    chain[tot].date=want;\n    chain[tot].next=head[from];\n    head[from]=tot;\n}\nvoid addback(int from,int want)//\u53cd\u5411\u52a0\u8fb9\n{\n    totback++;\n    chainback[totback].date=want;\n    chainback[totback].next=headback[from];\n    headback[from]=totback;\n} \nvoid first()//\u627e\u51fa\u6240\u6709\u597d\u70b9 \n{\n    int want,now,he=0,tail=1;\n    q[1]=t;\n    good[t]=true;\n    while(he!=tail)\n    {\n        he++;\n        want=headback[q[he]];\n        now=chainback[want].date;\n        while(now)//\u8fdb\u884c\u62d3\u5c55\n        {\n            if(!good[now])//\u5982\u679c\u8fd8\u6ca1\u6709\u88ab\u904d\u5386\u8fc7\u5c31\u52a0\u5165\u961f\u5217\n            {\n                good[now]=true;\n                q[++tail]=now;\n            }\n            want=chainback[want].next;\n            now=chainback[want].date;\n        }\n    }\n    if(!good[s])//\u5982\u679c\u5230\u4e0d\u4e86\u8d77\u70b9\n    {\n        printf(\"-1\");\n        exit(0);\n    }\n}\nvoid second()\n{\n    int he=0,tail=1,i,now,want;\n    memset(q,0,sizeof(q));\n    q[1]=s;\n    may[s]=true;\n    while(he!=tail)\n    {\n        he++;\n        want=head[q[he]];\n        now=chain[want].date;\n        while(now)\n        {\n            if(!good[now]||can[now])//\u5982\u679c\u8fd9\u4e2a\u70b9\u53f3\u8fb9\u662f\u574f\u7684\uff0c\u6216\u8005\u672c\u8eab\u5c31\u662f\u574f\u7684\uff08\u8c8c\u4f3c\u8fd9\u4e2a\u5224\u65ad\u662f\u591a\u4f59\u7684\uff1f\u56e0\u4e3a\u4e0e\u574f\u70b9\u76f8\u8fde\u7684\u70b9\u6839\u672c\u8fdb\u4e0d\u6765\uff09\n            {\n                want=chain[want].next;\n                now=chain[want].date;    \n                continue;\n            }\n            if(!may[now])//\u5982\u679c\u6ca1\u88ab\u8bbf\u95ee\u8fc7\n            {\n                may[now]=true;//\u6807\u8bb0\u5df2\u8bbf\u95ee\n                q[++tail]=now;//\u52a0\u5165\u961f\u5217\n                ans[now]=ans[q[he]]+1;//\u8bb0\u5f55ans\uff0c\u7531\u4e8eBFS\u7279\u6027\uff0c\u76f4\u63a5+1\u5373\u53ef\n            }\n            want=chain[want].next;\n            now=chain[want].date;\n        }\n    }\n}\nvoid mid()//\u6807\u8bb0\u6240\u6709\u574f\u70b9 \n{\n    int now,want,i;\n    for(i=1;i<=n;i++)\n    {\n        if(!good[i])//\u5982\u679c\u4e0d\u662f\u597d\u70b9 \n        {\n            want=headback[i];\n            now=chainback[want].date;\n            while(now)\n            {\n                can[now]=true;//\u6807\u8bb0 \n                want=chainback[want].next;\n                now=chainback[want].date;\n            }\n        }\n    } \n}\nint main()\n{\n    int i,a,b;\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=m;i++)\n    {\n        a=read();b=read();\n        add(a,b);\n        addback(b,a);//\u7528\u4e8e\u53cd\u5411\u9884\u5904\u7406 \n    }\n    scanf(\"%d%d\",&s,&t);\n    first();\n    mid();\n    second();\n    printf(\"%d\",ans[t]);//\u8f93\u51fa\u5230t\u7684\u6700\u77ed\u8ddd\u79bb\n    return 0;\n}\n```",
        "postTime": 1509203419,
        "uid": 47136,
        "name": "ww3113306",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u770b\u52302\u6761\u4ef6\u6211\u4eec\u77e5\u9053\u8fd9\u9898\u662f\u6c42\u4e66\u4e0a\u6700\u77ed\u8def\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u600e\u4e48\u6ee1\u8db3\u6761\u4ef61\n\n\u6211\u4eec\u81ea\u7136\u7684\u60f3\u5230\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u641c\u7d22\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5230\u7ec8\u70b9\n\n\u7136\u800c\u4f3c\u4e4e\u5f88\u590d\u6742\u3002\u3002\n\n**\u9006\u5411\u601d\u7ef4**  \u6211\u4eec\u8fd9\u4e48\u8003\u8651\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u80fd\u6b63\u7740\u5224\u65ad\uff0c\u90a3\u6211\u4eec\u5c31\u9006\u5411\u5224\u65ad\uff0c\u4ece\u7ec8\u70b9\u5f00\u59cbbfs\u5224\u65ad\u54ea\u4e9b\u70b9\u53ef\u4ee5\u5230\u7ec8\u70b9\uff0c\u590d\u6742\u7a0b\u5ea6\u5c31\u5927\u5927\u964d\u4f4e\u4e86\u3002\n\n\u6709\u70b9\u60f3\u6211\u4eec\u8d70\u8ff7\u5bab\uff0c\u82e5\u662f\u4ece\u8d77\u70b9\u8d70\u5361\u4f4f\u4e86\uff0c\u5c31\u4ece\u7ec8\u70b9\u5f00\u59cb\u8d70\u3002\u3002\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<string>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#define siz 10001\nusing namespace std;\nint n,m,s,t,pos,rpos;\nint first[siz],rfirst[siz];\nbool hav[siz][siz],reach[siz],vis[siz];\nstruct Node {\n    int nx,num;\n} node[siz*20],rnode[siz*20];\ninline void ins(int u,int v) { // \n    node[++pos].num=v;\n    node[pos].nx=first[u];\n    first[u]=pos;\n}\ninline void rins(int u,int v) { // \n    rnode[++rpos].num=v;\n    rnode[rpos].nx=rfirst[u];\n    rfirst[u]=rpos;\n}\nvoid bfs() {    // \n    int line[siz],head=1,tail=1;\n    line[1]=t; vis[t]=1;\n    while(head<=tail) {\n        for(int i=rfirst[line[head]]; i; i=rnode[i].nx)\n            if(!vis[rnode[i].num]) {\n                reach[rnode[i].num]    =1;\n                vis[rnode[i].num]=1;\n                line[++tail]=rnode[i].num;\n            }\n        head++;\n    }\n}\nvoid answer() {\n    int line[siz][2],head=1,tail=1,pd=0;\n    line[1][0]=s; vis[s]=1;\n    while(head<=tail) {\n        for(int i=first[line[head][0]]; i; i=node[i].nx)\n            if(!vis[node[i].num]) {\n                vis[node[i].num]=1;\n                line[++tail][0]=node[i].num;\n                line[tail][1]=line[head][1]+1;\n                if(line[tail][0]==t) {\n                    printf(\"%d\",line[tail][1]);\n                    pd=1;\n                    break;\n                }\n            }\n        head++;\n    }\n    if(!pd) puts(\"-1\");\n}\nint main() {\n//    freopen(\".in\",\"r\",stdin);\n//    freopen(\".out\",\"w\",stdout);\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1; i<=m; i++) {\n        scanf(\"%d%d\",&s,&t);\n        if(s!=t&&!hav[s][t]&&!hav[t][s]) {  \n            ins(s,t);\n            rins(t,s);\n            hav[s][t]=hav[t][s]=1;\n        }\n    }\n    scanf(\"%d%d\",&s,&t);\n    bfs(); reach[t]=1;\n    if(!reach[s]) {\n        puts(\"-1\");\n        return 0;\n    }\n    memset(vis,0,sizeof(vis));\n    for(int i=1; i<=n; i++)\n        if(!reach[i]) vis[i]=1;\n        else for(int j=first[i]; j; j=node[j].nx)\n                if(!reach[node[j].num]) {\n                    vis[i]=1;\n                    break;\n                }\n    answer();\n    return 0;\n}\n```",
        "postTime": 1506825589,
        "uid": 18416,
        "name": "Nepenthe",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u770b\u5927\u4f6c\u90fd\u662fspfa\n\n\u840c\u65b0\u6c34\u4e00\u6ce2bfs\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvector<int>cun[10005];\nvector<int>fan[10005];\nint cha[10005],dis[10005];//cha\u662f\u526a\u679d\u6570\u7ec4\uff0cdis\u8bb0\u5f55\u8ddd\u79bb\nint n,m,s,t,len=0;\nvector<int>::iterator it;\nvoid dfs(int x) {\n    vector<int>::iterator i;\n    for(i=fan[x].begin() ; i!=fan[x].end(); i++) {\n        if(!cha[*i]) {\n//            if(cha[*i]==1)continue;\n            cha[*i]=1;\n            dfs(*i);\n        }\n    }\n```\n}//\u526a\u679d\n```cpp\nvoid bfs() {\n    queue<int> fuzhu;\n    fuzhu.push(s);\n    while(!fuzhu.empty()){\n        int tmp;\n        tmp=fuzhu.front();\n        fuzhu.pop();\n        if(!cha[tmp])continue;\n        vector<int>::iterator i;\n        for(i=cun[tmp].begin() ; i!=cun[tmp].end() ; i++) {\n            if(dis[*i]!=0) continue;\n            if(!cha[*i])continue;\n            fuzhu.push(*i);\n            dis[*i]=dis[tmp]+1;//\u66f4\u65b0\u8ddd\u79bb\n        }\n    }\n```\n}//\u56e0\u4e3a\u8fb9\u7684\u6743\u503c\u662f\u4e00\uff0c\u6240\u4ee5bfs\u7b2c\u4e00\u6b21\u627e\u5230\u7ec8\u70b9\u5c31\u662f\u6700\u77ed\u8def\n```cpp\nint main() {\n    cin>>n>>m;\n    for(int i=1; i<=m; i++) {\n        int a,b;\n        cin>>a>>b;\n        cun[a].push_back(b) ;\n        fan[b].push_back(a);\n    }\n    memset(cha,0,sizeof(cha));\n    memset(dis,0,sizeof(dis));\n    cin>>s>>t;\n    cha[t]=1;\n    dfs(t);\n//    printf(\"%d*****\\n\",cha[6]);\n    for(int i=1; i<=n; i++) {\n        if(!cha[i]) {\n            vector<int>::iterator j;\n            for(j=fan[i].begin() ; j!=fan[i].end() ; j++) {\n                cha[*j]=2;\n            }\n        }\n    }\n    for(int i=1;i<=n;i++) if(cha[i]==2) cha[i]=0;\n    bfs();\n    if(dis[t]==0)cout<<-1;\n    else cout<<dis[t];\n}\n```",
        "postTime": 1506330619,
        "uid": 31984,
        "name": "\u4f1a\u70b8\u7684\u7532\u70f7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "//\u524d\u9762\u50bb\u4e86,road\u6570\u7ec4\u5f00\u5c0f\u4e86,\u5e94\u8be5\u662f\u8981\u5bf9\u5e94m\u7684\u8303\u56f4.\n\n//\u4e0b\u9762\u8bf4\u4e00\u4e0b\u6211\u7684\u601d\u8def\u5427,\u8fd9\u9053\u9898\u662f\u6709\u6761\u4ef6\u7684\u6700\u77ed\u8def\u95ee\u9898,\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5728\u6ee1\u8db3\u6761\u4ef6\u4e0a\u7684\u70b9\u8fdb\u884c\u6700\u77ed\u8def\u5373\u53ef\n\n//\u90a3\u4e48\u8fd9\u4e48\u627e\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u5462,\u5148\u5728\u5faa\u73af\u4e2d\u5c31\u6807\u8bb0\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6,\u6211\u4eec\u73b0\u5728\u7ec8\u70b9\u8fdb\u884c\u4e00\u6b21bfs,\u7ecf\u8fc7\u4e00\u4e2a\u70b9\u90a3\u4e48\u5b83\u7684num\u6570\u7ec4++,\u4e5f\u5c31\u662f\u6807\u8bb0\u4e00\u4e0b\u5b83\u7684\u5165\u5ea6,\u90a3\u4e48spfa\u65f6\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u5c31\u662f\u51fa\u5ea6\u7b49\u4e8e\u5165\u5ea6\u7684\u70b9~~\u662f\u4e0d\u662f\u611f\u89c9\u5f88\u7b80\u5355,\u4e0b\u9762\u662f\u6211\u7684\u4ee3\u7801\u4e86\n\n\n\n\n\n\n\n```cpp\n#include <cstdlib>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <iostream>\n#include <queue>\nusing namespace std;\nconst int INF=100000111;\nint n,m,s,t,tail,vis[350001],head1[350001],head2[350001],sign[350001],inqueue[350001],chu[350001],num[350001];\nstruct node {\n    int u,v,next;\n};\nnode r1[350001],r2[350001];\nqueue<int>q;\nvoid add(int x,int y) {\n    r1[++tail].u=x;\n    r1[tail].v=y;\n    r1[tail].next=head1[x];\n    head1[x]=tail;\n    r2[tail].u=y;\n    r2[tail].v=x;\n    r2[tail].next=head2[y];\n    head2[y]=tail;\n}\nvoid bfs(int sx) {             \n    q.push(sx);\n    sign[sx]=1;\n    while (!q.empty()) {\n        int sx=q.front();\n        q.pop();\n        for (int i=head2[sx];i;i=r2[i].next) {\n            int nex=r2[i].v;\n            num[nex]++; \n            if (!sign[nex]) {\n                sign[nex]=1;\n                q.push(nex);\n            }\n        }\n    }\n}\nvoid spfa(int sx,int sy) {\n    for (int i=1;i<=n;i++)\n        vis[i]=INF;\n    q.push(sx);\n    inqueue[sx]=1;\n    vis[sx]=0;\n    while (!q.empty()) {\n        int sx=q.front();\n        q.pop();\n        for (int i=head1[sx];i;i=r1[i].next) {\n            int nex=r1[i].v;\n            if (vis[sx]+1 < vis[nex] && num[nex]==chu[nex]) {\n                vis[nex]=vis[sx]+1;\n                if (!inqueue[nex]) {\n                    inqueue[nex]=1;\n                    q.push(nex);\n                }\n            }\n        }\n    } \n    if (vis[sy] == INF) printf(\"-1\"); \n    else printf(\"%d\",vis[sy]);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=m;i++) {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n        chu[x]++;\n    }\n    scanf(\"%d%d\",&s,&t);\n    bfs(t);\n    spfa(s,t);\n    return 0;\n}\n```",
        "postTime": 1504320291,
        "uid": 53302,
        "name": "Vimpire_D",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u5206\u522b\u987a\u5e8f \u9006\u5e8f   \u50a8\u5b58\u8fb9   \u5148\u9006\u5411\u8dd1\u4e00\u8fb9  \u627e\u51fa\u80fd\u5230\u7684\u70b9 \u518d\u8dd1\u4e00\u8fb9SPFA   \u5148\u8dd1\u4e00\u8fb9 \u6211\u7edf\u8ba1\u4ece\u7ec8\u70b9\u51fa\u53d1\u7684\u70b9 \u88ab\u8bbf\u95ee\u8fc7\u51e0\u6b21  \u88ab\u8bbf\u95ee\u7684\u6b21\u6570\u7b49\u4e8e\u51fa\u8fb9\u6570 \u5c31\u662f\u5408\u6cd5\u7684  \u7b7e\u5230\u9898\n\n  \n\n     \n            \n            \n        \n    \n    \n        \n    \n            \n    \n \n    \n    \n    \n    \n    \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<queue>\nusing namespace std;\nvector<int>p[10010];//ni\nint ru[10010]={0};\nint chu[10010]={0};\nbool map[10010];\nbool vis[10010];\nint n,m;\nint s,t;\nqueue<int>q;\nqueue<int>Q;\nint dis[10010];\nint ans[10010];\nvector<int>P[10010];//shun\nvoid bfs(int x)\n{\n    while(!Q.empty())\n    {\n        int tmp=Q.front();\n        Q.pop();\n        int l=p[tmp].size();\n        for(int i=0;i<l;i++)\n        {\n            int temp=p[tmp][i];\n            if(i==1)\n            {\n            }\n            ans[temp]++;\n            if(vis[temp])\n            {\n                Q.push(temp);\n                vis[temp]=false;\n            }\n        }\n    }\n}\nvoid spfa(int x)\n{\n    while(!q.empty())\n    {\n        int tmp=q.front();\n        q.pop();\n        int t=P[tmp].size();\n        for(int i=0;i<t;i++)\n        {\n            int temp=P[tmp][i];\n            if(map[temp]&&vis[temp])\n            {\n                if(dis[temp]>dis[tmp]+1)\n                {\n                    dis[temp]=dis[tmp]+1;\n                    q.push(temp);\n                    vis[temp]=false;\n                }\n            }\n        }\n        vis[tmp]=true;\n    }\n}\nint main()\n{\n    memset(dis,127,sizeof(dis));\n    memset(vis,true,sizeof(vis));\n    memset(map,false,sizeof(map));\n    memset(ans,0,sizeof(ans));\n    memset(chu,0,sizeof(chu));\n    memset(ru,0,sizeof(ru));\n    int x,y;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        map[i]=true;\n    }\n    for(int i=1;i<=m;i++)\n    {\n        cin>>x>>y;\n        if(x!=y)\n        {\n        P[x].push_back(y);\n        p[y].push_back(x);\n        chu[x]++;\n        ru[y]++;\n    }\n    }\n    cin>>s>>t;\n    map[t]=true;\n    Q.push(t);\n    bfs(t);\n    for(int i=1;i<=n;i++)\n    {\n        if(ans[i]==chu[i]&&chu[i]!=0)\n        {\n            map[i]=true;\n        }\n        else\n        {\n            map[i]=false;\n        }\n    }\n   map[t]=true;\n    memset(vis,true,sizeof(vis));\n    dis[s]=0;\n    q.push(s);\n    spfa(s);\n    if(dis[t]>99999)\n    {\n        cout<<\"-1\";\n    }\n    else\n    {\n        cout<<dis[t];\n    }\n    return 0;\n}\n\n```",
        "postTime": 1503572240,
        "uid": 35804,
        "name": "KEIONG",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u5148\u7528bfs\u67d3\u8272\n\n\u53bb\u70b9\n\u518d\u7528bfs\u627e\u6700\u77ed\u8def\n\n\u7528vector\u8981\u6ce8\u610f\u4ece0\u5f00\u59cb\n\n\u5728bool\u4e2d 1\u4e3atrue 0\u4e3afalse\n\ntypedef\u4f5c\u7528\u76f8\u5f53\u4e8e\u7ed3\u6784\u4f53\n\n\u4e0b\u9762\u662f\u4ee3\u7801\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int INF=1000000000;//\u8fb9 \nconst int MAXN=10001+100;//\u70b9 \ntypedef pair<int,int> pii;\n//strust pii{int en,nsxt;}; \u4f5c\u7528\u76f8\u540c \nvector<int> ed[MAXN],de[MAXN];\nqueue<int> q;\nqueue<pii> q2;\nbool can[MAXN]={false};//\u7528\u4e8e\u67d3\u8272 \nbool fgcan[MAXN]={false};//\u7528\u4e8e\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u8d70 \nbool done[MAXN]={false};//\u5728bfs\u4e2d\u5224\u65ad\u662f\u5426\u5728\u961f\u5217 \nint n,m,s,t;\nint main(){\n    //\u8f93\u5165 \u5b58\u50a8\u6b63\u53cd\u56fe ed\u6b63 de\u53cd\n    cin>>n>>m;\n    int x,y;\n    for(int i=1;i<=m;i++){\n        cin>>x>>y;\n        ed[x].push_back(y);\n        de[y].push_back(x);\n    }\n    cin>>s>>t;\n    //bfs\u67d3\u8272\n    //\u5728bool\u4e2d 1\u4e3atrue 0\u4e3afalse \n    q.push(t);\n    can[t]=1;\n    while(q.size())\n    {\n        int x=q.front();\n        q.pop();\n        for(int i=0;i<de[x].size();i++)\n        {\n            int y=de[x][i];\n            if(!can[y])\n            {\n                can[y]=1;//\u67d3\u8272 \n                q.push(y);\n            }\n        }\n    } \n    //for\u5220\u9664\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u70b9\n    for(int i=1;i<=n;i++)\n    {\n        if(!can[i]) continue;\n        else\n        {\n            bool cant=false;\n            for(int j=0;j<ed[i].size();j++)\n            {\n                int x=ed[i][j];//x\u4e3a\u70b9i\u8fde\u63a5\u7684\u70b9 \u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u5408\u8981\u6c42\u5c31\u7ed3\u675f\u5faa\u73af \n                if(!can[x]){cant=1; break;}\n            }\n            if(cant) continue;//cant\u6539\u53d8\u5c31\u8bf4\u660e\u6b64\u70b9\u4e0d\u5408\u8981\u6c42 \n            else //\u6ca1\u6539\u53d8\u662f\u7b26\u5408\u8981\u6c42\n            { \n                fgcan[i]=1;\n            }\n        }\n    } \n    if(!fgcan[s]){cout<<-1;return 0;}//\u5224\u65ad\u8d77\u70b9\u53ef\u4e0d\u53ef\u4ee5\u5230\u8fbe\u7ec8\u70b9  \n    //bfs\u627e\u6700\u77ed\u8def\u5f84\n    q2.push(make_pair(s,0));\n    done[s]=1;//\u6570\u7ec4\u5224\u65ad\u5728\u4e0d\u5728\u961f\u5217\n    while(q2.size()){\n        pii g=q2.front();\n        int x1=g.first;\n        q2.pop();\n        for(int i=0;i<ed[x1].size();i++)\n        {\n            int y=ed[x1][i];//\u53d6\u70b9 \n            if(y==t)//\u5230\u8fbe\u7ec8\u70b9 \n            {\n                cout<<g.second+1;\n                return 0;\n            }\n            if(fgcan[y]&&!done[y])//\u70b9\u53ef\u7528 \u4e0d\u5728\u961f\u5217 \n            {\n                q2.push(make_pair(y,g.second+1));\n                done[y]=true;\n            }\n        }\n    } \n     cout<<-1;\n    return 0;\n}\n```",
        "postTime": 1499257573,
        "uid": 33858,
        "name": "ilovem",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u5bf9\u4e00\u822c\u53cd\u5411\u8fb9\u7684\u505a\u6cd5\u8fdb\u884c\u8865\u5145\u3002\n\n1.\u9898\u76ee\u7684\u610f\u601d\u662f\uff0c\u5982\u679c\u4e00\u4e2a\u70b9**\u6240\u80fd\u5230\u8fbe\u7684\u70b9**\u4e2d\uff0c\u6709\u4e00\u4e2a\u70b9**\u5b8c\u5168\u65e0\u6cd5\u901a\u8fc7\u4efb\u4f55\u8def\u5f84\u5230\u8fbe\u7ec8\u70b9**\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9**\u4e0d\u80fd\u5b58\u5728\u4e8e\u6700\u77ed\u8def\u5f84\u4e0a**\u3002\n\n\u4e8e\u662f\u4f7f\u7528\u6807\u8bb0\u6570\u7ec4\uff0c\u4e09\u79cd\u72b6\u6001\uff0c0\u4e3a\u53ef\u4ee5\u5230\u8fbe\uff0c-1\u4e3a\u5b8c\u5168\u65e0\u6cd5\u5230\u8fbe\uff0c1\u4e3a\u4e0d\u80fd\u5b58\u5728\u4e8e\u6700\u77ed\u8def\u5f84\u4e0a\u3002\u663e\u7136\u53ea\u6709\u503c\u4e3a0\u7684\u70b9\u624d\u53ef\u80fd\u5b58\u5728\u4e8e\u6700\u77ed\u8def\u5f84\u4e0a\u3002\n\n2.\u5173\u4e8e\u6548\u7387\u95ee\u9898\uff0c\u521a\u5f00\u59cb\u7528\u7684\u662fSTL\u7ed3\u679c\u8d85\u65f6\uff0c\u9664\u4e86vector\u5168\u6539\u6210\u624b\u6253\u8fd8\u662f\u8d85\u65f6\uff0c\u7ed3\u679c\u53d1\u73b0\u662f\u5fd8\u8bb0\u5224BFS\u7684\u6807\u8bb0\uff08\u5bfc\u81f4RE\u4e0eTLE\uff09...\u56e0\u4e3a\u8fb9\u6743\u4e3a1\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528BFS\u5373\u53ef\uff0c\u6548\u7387\u66f4\u9ad8\u4e00\u70b9\uff0c\u4e3aO(n)\u3002\n\n3.\u53cd\u5411\u8fb9\u5982\u4f55\u5199\u7684\u95ee\u9898\uff0c\u7ed3\u6784\u4f53\u4e24\u4e2avector\u578b\u90bb\u63a5\u8868\uff0c\u7b97\u662f\u7a7a\u95f4\u6362\u65f6\u95f4\u800c\u4e14\u4e5f\u4e0d\u7b97\u5f88\u590d\u6742\u3002\n\n\u5bf9\u53cd\u5411\u8fb9\u7684\u505a\u6cd5\u8fdb\u884c\u8bf4\u660e\uff1a\n\n\u770b\u4ee3\u7801\u5427XD\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<vector>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int N=10010;\n\nint gi(){\n    int x=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x;\n} //\u8bfb\u5165\u4f18\u5316 \n\nstruct Graph{\n    int glen[N];\n    vector<int> to[N];\n}G1,G2;//\u4e24\u4e2a\u90bb\u63a5\u8868 \nvoid insm(Graph &g,int a,int b){\n    g.glen[a]++;\n    g.to[a].push_back(b);\n}//\u90bb\u63a5\u8868\u901a\u7528\u5904\u7406\u51fd\u6570 \n\nstruct Que{\n    int a,len;\n}qb[N];\nint head,tail,qlen;\ninline void insq(Que x){\n    qb[tail++]=x;\n    tail%=N,qlen++;\n}\ninline Que delq(){\n    Que ret=qb[head++];\n    head%=N,qlen--;\n    return ret;\n}//\u961f\u5217\u4e4b\u4e8c \n\nint tag[N];//\u6807\u8bb0\u70b9\uff0c-1\u4e3a\u4e0d\u53ef\u81f3\uff0c1\u4e3a\u4e0d\u53ef\u8d70\uff0c0\u4e3a\u6b63\u5e38 \nbool tagb[N];//\u961f\u5217\u6807\u8bb0 \n\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    int a,b;\n    for(int i=0;i<m;i++){\n        a=gi(),b=gi();\n        insm(G1,a,b),insm(G2,b,a);\n    }\n    int s,t;\n    scanf(\"%d%d\",&s,&t);\n    memset(tag,-1,sizeof(tag));\n    //\u7b2c\u4e00\u5c42BFS\n    int qu[N];//\u961f\u5217\u4e4b\u4e00\uff0cqlen\u548ctail\u7b49\u5148\u7528\u7740\uff0c\u4e4b\u540e\u6e05\u96f6 \n    qu[tail++]=t,qlen++,tail%=N;\n    tag[t]=0;\n    while(qlen){\n        a=qu[head++],qlen--,head%=N;\n        for(int i=0;i<G2.glen[a];i++){\n            if(!tagb[G2.to[a][i]]){\n                tagb[G2.to[a][i]]=1;\n                tag[G2.to[a][i]]=0;\n                qu[tail++]=G2.to[a][i],qlen++,tail%=N;\n            }\n            \n        }\n    }\n    //\u5904\u7406\u7c7b\u578b\u70b91 \n    for(int i=1;i<=n;i++){\n        if(tag[i]<0){\n            for(int j=0;j<G2.glen[i];j++)\n                tag[G2.to[i][j]]=1;\n        }\n    }\n    //\u7b2c\u4e8c\u5c42BFS\n    qlen=head=tail=0;\n    memset(tagb,0,sizeof(tagb));//\u961f\u5217\u4e4b\u4e8c\u521d\u59cb\u5316 \n    Que c;\n    c.a=s,c.len=0;\n    insq(c);\n    while(qlen){\n        c=delq();\n        for(int i=0;i<G1.glen[c.a];i++){\n            if(!tag[G1.to[c.a][i]]&&!tagb[G1.to[c.a][i]]){\n                tagb[G1.to[c.a][i]]=1;\n                Que d=c;\n                d.a=G1.to[c.a][i];\n                d.len++;\n                if(d.a==t){\n                    cout<<d.len<<endl;\n                    return 0;\n                }\n                insq(d);\n            }\n        }\n    }\n    cout<<-1<<endl;\n    return 0;\n} \n```",
        "postTime": 1494676042,
        "uid": 5554,
        "name": "Sino_E",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u53cd\u5411\u8fb9\u518d\u8dd1\u4e00\u6b21\uff0c\u4ece\u5f00\u59cb\u52a0\u8fb9\u5c31\u53cd\u5411\u3002\u5148\u4ece\u7ec8\u70b9\u904d\u5386\u4e00\u6b21\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u70b9\u88ab\u8bbf\u95ee\u6b21\u6570\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u53ea\u6709\u8bbf\u95ee\u6b21\u6570\u7b49\u4e8e\u5165\u5ea6\u7684\u70b9\u662f\u53ef\u4ee5\u8d70\u7684\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u501f\u52a9\u8bb0\u5f55\u597d\u7684inde\u6570\u7ec4\u548ccnt\u6570\u7ec4\u68c0\u67e5\u8fd9\u4e2a\u70b9\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002\u518d\u4ece\u7ec8\u70b9BFS\u4e00\u6b21\uff08\u4e0d\u7528SPFA\uff0c\u8fb9\u5168\u90fd\u662f1\uff09\uff0c\u5f97\u5230\u7b54\u6848\u3002\n\n\n\n\n\n\n\n\n\n    \n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <utility>\nusing namespace std;\n#define MAXN 10000\n#define MAXM 200000 \n#define pii pair<int,int>\n#define dis first\n#define id second\nstruct Edge\n{\n    int to,nex;\n    Edge(){}\n    Edge(int _to, int _nex):to(_to),nex(_nex){}\n};\nEdge e[MAXM+5];\nint first[MAXN+5], inde[MAXN+5], cnt[MAXN+5], n, m, S, T, tot;\npii q[MAXN+5];\nbool book[MAXN+5]; \nvoid Add(int a, int b)\n{\n    e[tot] = Edge(b,first[a]);\n    first[a] = tot++;\n    inde[b]++;\n    return;\n}\nvoid DFS(int p)\n{\n    if(cnt[p]++)\n        return;\n    for(int u = first[p]; u != -1; u = e[u].nex) \n        DFS(e[u].to);\n    return;\n}\nint BFS()\n{\n    int head = 0, tail = 1;\n    book[S] = true, q[0] = pii(0,S);\n    for(pii t; head < tail; )\n    {\n        t = q[head++];\n        for(int u = first[t.id]; u != -1; u = e[u].nex)\n            if(!book[e[u].to] && inde[e[u].to] == cnt[e[u].to])\n            {\n                if(e[u].to == T)\n                    return t.dis+1;\n                book[e[u].to] = true, q[tail++] = pii(t.dis+1,e[u].to);\n            }\n    }\n    return -1;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m), memset(first,-1,sizeof(int)*(n+5));\n    for(int i = 1, a, b; i <= m; i++)\n        scanf(\"%d%d\",&a,&b), Add(b,a);\n    scanf(\"%d%d\",&T,&S),DFS(S);\n    printf(\"%d\\n\",BFS());\n    return 0;\n}\n```",
        "postTime": 1479390053,
        "uid": 16528,
        "name": "magolor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "#\u7ec8\u4e8e\u78b0\u5230\u53ef\u4ee5\u505a\u51fa\u6765\u7684\u9898\u4e86O(\u2229\\_\u2229)O\n\n\u9996\u5148\u770b\u5230\u8fd9\u9898\u5c31\u60f3\uff0c\u8fd9\u9898TM\u8111\u6b8b\u5427\uff0c\u7b2c\u4e00\u4e2a\u6761\u4ef6\u6700\u77ed\u8def\u80af\u5b9a\u53ef\u4ee5\u6ee1\u8db3\u554a\uff0c\u88f8\u7684\u6700\u77ed\u8def\u9898\u76ee\n\n##\u7136\u540e\uff0c\u5b9a\u775b\u4e00\u770b\n\n2333333\u8fd9\u6761\u8def\u7684\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u51fa\u5ea6\u90fd\u53ef\u4ee5\u8d70\u8fde\u5230\u7ec8\u70b9\n\n#\u61f5\u903c1S\n\n\u256d\ufe3f\ufe3f\ufe3f\u256e\n\n{/ #  # /} \n\n ( (oo) )\n\n\ufe36\ufe36\ufe36\n\n\u6539\u53d8\u601d\u8def233333\n\n\u6211\u4eec\u6765\u60f3\uff0c\u65e2\u7136\u5fc5\u987b\u8981\u80fd\u8d70\u5230\u7ec8\u70b9\uff0c\u90a3\u6211\u4eec\u6765\u4ece\u7ec8\u70b9\u8d70\u56de\u53bb\u5440\n\n\u4e8e\u662f\uff0c\u9996\u5148\u5f00\u59cb\u4ece\u7ec8\u70b9\u5012\u7740\u641c\u7d22\uff0c\u628a\u6240\u6709\u7ec8\u70b9\u80fd\u8d70\u5230\u7684\u70b9\u90fd\u6807\u8bb0\u4e0a\n\n\u8fd9\u6837\u5c31\u53ea\u9700\u8981\u518d\u987a\u7740\u6765\u4e00\u904dspfa\u5c31\u53ef\u4ee5AC\u4e86\uff0c\u78b0\u5230\u6ca1\u88ab\u6807\u8bb0\u7684\u70b9\u5c31\u4e0d\u505a\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u8def\u5f84\u7b26\u5408\u9898\u610f\n\n\u9644\u4e0aAC\u4ee3\u7801\uff1a\n\n```pascal\ntype node=record\n         u,v,c,q:longint;\n     end;\nvar dl,dist:array[1..20000]of longint;\n    s,t,i,m,n,x,y:longint;\n    f,p,pd:array[1..10000]of boolean;\n    h,h2:array[1..200000]of longint;\n    r,r2:array[1..200000]of node;\n    bl:boolean;\n\nprocedure dfs2;\nvar head,tail,tt,y,x:longint;\nbegin\ndl[1]:=t;f[t]:=true;p[t]:=true;\nhead:=0;tail:=1;\nrepeat\n    inc(head);x:=dl[head];\n    tt:=h2[x];\n    while tt<>0 do\n    begin\n       y:=r2[tt].v;\n       p[y]:=true;\n       if f[y]=false then begin\n           inc(tail);\n           dl[tail]:=y;\n           f[y]:=true;\n       end;\n       tt:=r2[tt].q;\n    end;\nuntil head>=tail;\nend;\n\nfunction relax(t:longint):boolean;\nvar x,y:longint;\nbegin\nx:=r[t].u;y:=r[t].v;\nif dist[x]+r[t].c<dist[y] then\nbegin\n   dist[y]:=dist[x]+r[t].c;\n   exit(true);\nend;\nexit(false);\nend;\n\nprocedure spfa;\nvar head,tail,x,y,tt:longint;\nbegin\nfillchar(f,sizeof(f),false);\nhead:=0;tail:=1;dl[1]:=s;f[s]:=true;\nfor i:=1 to n do dist[i]:=maxlongint;\ndist[s]:=0;\nrepeat\n   inc(head);\n   x:=dl[head];f[x]:=false;\n   tt:=h[x];\n   while tt<>0 do\n   begin\n       y:=r[tt].v;\n       if relax(tt)and(f[y]=false)and(pd[y]) then\n       begin\n           inc(tail);\n           dl[tail]:=y;\n       end;\n       f[y]:=true;\n       tt:=r[tt].q;\n   end;\nuntil head>=tail;\nend;\n\nbegin\nreadln(n,m);\nfor i:=1 to m do\nbegin\n   readln(x,y);\n   r[i].u:=x;r[i].v:=y;r[i].c:=1;r[i].q:=h[x];h[x]:=i;\n   r2[i].u:=y;r2[i].v:=x;r2[i].c:=1;r2[i].q:=h2[y];h2[y]:=i;\nend;\nreadln(s,t);\ndfs2;\nfor i:=1 to n do\nbegin\nif p[i]=false then continue;\n   x:=h[i];bl:=true;\n   while x<>0 do\n   begin\n      if p[r[x].v]=false then begin bl:=false;break;end;\n      x:=r[x].q;\n   end;\n   pd[i]:=bl;\nend;\nif pd[s]=false then begin writeln(-1);halt;end;\nspfa;\nif dist[t]=maxlongint then writeln(-1) else writeln(dist[t]);\nend.\n```\n+|+\n                ))\\_|      |  \n                 |\\     \\_\\_|  \n\\_\u2229\\_ / \\    |\\\n\n/\u25a1\u25a1\u25a1\\_\\_\\_/\\_ \\ ---+---\n\n\\_\\_\\_\\_\\_\\_-\u2229 /   \u2605  \u221a\u221a\u221a \\|   (~>===6 \n\n\\ 265 ~~~~~~~~~~\\_\u2220\u2220\u2220\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_|\n\n##\u2191\u2191\u2191\u2191\u2191\u2191\u65e0\u89c6\u2191\u2191\u2191\u2191\u2191\u2191\n\n\uff08\u53ea\u662f\u4e3a\u4e86\u8bd5\u8bd5\u6392\u7248\uff09\n",
        "postTime": 1478922262,
        "uid": 10632,
        "name": "Sunshine\u96e2",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u5e76\u4e0d\u9700\u8981BFS\n\n\u8bfb\u9898\u540e\u53d1\u73b0\uff0c\u4e0d\u80fd\u8d70\u7684\u70b9\u4e3a\u9664\u7ec8\u70b9\u4ee5\u5916\u51fa\u5ea6\u4e3a0\u7684\u70b9\uff0c\u4ee5\u53ca\u4e0e\u8fd9\u4e9b\u70b9\u76f4\u63a5\u76f8\u8fde\u7684\u70b9\u3002\n\n\u90a3\u5c31\u5220\u4e86\u5c31\u597d\u4e86\u3002\u3002\u3002\u3002\n\n\u8bbe\u4e00\u4e2a\u6570\u7ec4del[i]\u8868\u793ai\u8282\u70b9\u5df2\u88ab\u5220\u9664\uff0c\u626b\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\u3002\n\n\u6ce8\u610f\u4e3a\u4e86\u907f\u514d\u5220\u9664\u95f4\u63a5\u4e0e\u90a3\u4e9b\u70b9\u76f8\u8fde\u7684\u70b9\uff0c\u53ef\u4ee5\u518d\u8bb0\u5f55\u4e00\u4e0b\u561b\u3002\u3002\n\n\u7136\u540eSPFA\u5c31\u597d\u4e86\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<queue>\n#define maxn 10005\n#define inf dis[10004]\nusing namespace std;\ninline void read(int &num){\n    char c;num=0;\n    while((c=getchar())==' '||c=='\\r'||c=='\\n');\n    num+=c-48;\n    while((c=getchar())>=48&&c<=57)num=num*10+c-48;\n    return;\n}\nstruct Edges{int from,to;};\nvector<Edges>edge;\nvector<int>G[maxn];\ninline void addedge(int u,int v){\n    edge.push_back((Edges){u,v});\n    G[u].push_back(edge.size()-1);\n    return;\n}\nint n,m,s,t,outd[maxn];\nbool del[maxn],mark[maxn];\nbool vis[maxn];int dis[maxn];\nint spfa(int U,int V){\n    queue<int>q;\n    memset(dis,0x7f,sizeof(dis));\n    dis[U]=0;\n    q.push(U);\n    Edges e;int u,tmp;\n    while(!q.empty()){\n        u=q.front();q.pop();\n        vis[u]=0;\n        tmp=G[u].size();\n        for(int j=0;j<tmp;++j){\n            e=edge[G[u][j]];\n            if(dis[e.to]>dis[e.from]+1&&!del[e.to]&&!del[e.from]){\n                dis[e.to]=dis[e.from]+1;\n                if(!vis[e.to]){\n                    vis[e.to]=1;\n                    q.push(e.to);\n                }\n            }\n        }\n    }\n    if(dis[V]<inf)return dis[V];\n    return -1;\n}\nint main(){\n    read(n);read(m);\n    int x,y,z;\n    for(int i=1;i<=m;++i){\n        read(x);read(y);\n        if(x!=y){\n            addedge(x,y);\n            ++outd[x];\n        }\n    }\n    read(s);read(t);\n    ++outd[t];\n    for(int i=1;i<=n;++i)\n        if(!outd[i]) del[i]=1;\n    int tmp;\n    for(int i=1;i<=n;++i){\n        tmp=G[i].size();\n        bool flag=0;int v;\n        for(int j=0;j<tmp;++j){\n            if(del[edge[G[i][j]].to]&&!mark[edge[G[i][j]].to]){\n                flag=1;\n                break;\n            }\n        }\n        if(flag)del[i]=mark[i]=1;\n    }\n    cout<<spfa(s,t);\n    return 0;\n}\n```",
        "postTime": 1478877439,
        "uid": 20695,
        "name": "DreamDraw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u5c06\u6240\u6709\u8fb9\u5012\u8fc7\u6765\u6765\u4ece\u7ec8\u70b9\u5f80\u56de\u641c\u770b\u80fd\u5426\u641c\u5230\u3002\n\n\n\u7136\u540e\u4ece\u8d77\u70b9\u5f00\u59cb\u5e7f\u641c\uff0c\u5165\u961f\u524d\u5148\u5224\u65ad\u5b83\u6240\u8fde\u7684\u70b9\u662f\u5426\u80fd\u5230\u8fbe\u7ec8\u70b9\u3002\n\n\n\u8fb9\u96c6\u6570\u7ec4\u6bd4vector\u5feb\u2026\u2026\n\n\n\u5177\u4f53\u89c1\u4ee3\u7801\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<set>\n#include<algorithm>\nusing namespace std;\nint n,m;//n\u4e2a\u70b9m\u6761\u8fb9\nint e[200010],ee[200010];\nint u[200010],v[200010];//\u8fb9\u96c6\u6570\u7ec4 \nint uu[200010],vv[200010];//\u8fb9\u96c6\u6570\u7ec4 \nint d[10010],dd[10010];//\u6700\u540e\u4e00\u4e2a\u70b9\u4f4d\u7f6e\u3002 \nint ff[10010];//\u6807\u8bb0\u662f\u5426\u53ef\u5230\u8fbe\u7ec8\u70b9 \nint f[10010];//\u6807\u8bb0\u662f\u5426\u641c\u8fc7\u3002 \nstruct he\n{\n    int n;//\u7f16\u53f7\n    int s;//\u8ddd\u79bb \n}q[10010];\nint s,t;//\u8d77\u70b9\u7ec8\u70b9\nint xx,yy,i,j; \nint mmin,l,r;\nvoid dfs(int i)\n{\n    int j=i;\n    while (j!=-1)\n    {\n        if (ff[vv[j]]==0)//\u6ca1\u641c\u8fc7 \n        {\n            ff[vv[j]]=1;//\u6807\u8bb0\u53ef\u4ee5\u5230\u8fbe \n            dfs(dd[vv[j]]);//\u5f80\u4e0b\u704c\u6c34 \n        } \n        j=ee[j];\n    }\n} \nint main()\n{\n    freopen(\"1.in\",\"r\",stdin);\n    freopen(\"1.out\",\"w\",stdout);\n    scanf(\"%d%d\",&n,&m);\n    for (i=1;i<=n;i++)//\u521d\u59cb\u5316 \n    {\n        d[i]=-1;\n        dd[i]=-1; \n    }\n    for (i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&u[i],&v[i]);\n        e[i]=d[u[i]];//\u5b58\u4e0a\u4e00\u6761\u8fb9\u7684\u4f4d\u7f6e \n        d[u[i]]=i; \n        \n        uu[i]=v[i];vv[i]=u[i];//\u53cd\u8fc7\u6765\u3002\n        ee[i]=dd[v[i]];//\u5b58\u4e0a\u4e00\u6761\u8fb9\u7684\u4f4d\u7f6e \n        dd[v[i]]=i;\n    }\n    scanf(\"%d%d\",&s,&t);\n    ff[t]=1;\n    dfs(dd[t]); \n    //for (i=1;i<=n;i++) cout<<ff[i]<<endl;\n    if (ff[s]!=1)//\u8d77\u70b9\u65e0\u6cd5\u5230\u8fbe\u7ec8\u70b9 \n    {\n        printf(\"-1\\n\");\n        return 0;\n    }\n    q[1].n=s;\n    q[1].s=0;//\u8d77\u70b9\u5165\u961f\n    l=0;\n    r=1;\n    mmin=-1;//\u521d\u59cb\u5316 \n    f[s]=1;     \n    while (l!=r)\n    {\n        l++;//\u961f\u9996\u51fa\u961f\n        if (q[l].n==t)//\u627e\u5230\u4e86\u70b9t \n        {\n            if (mmin==-1) mmin=q[l].s;//\u627emin \n            mmin=min(mmin,q[l].s);\n            continue;\n        }\n        i=d[q[l].n];//\u641ci\u8fde\u7684\u6240\u6709\u8fb9 \n        while (i!=-1)\n        {\n            j=d[v[i]];\n            int f3=0;//\u6807\u8bb0\u7528 \n            while (j!=-1)//\u770b\u4e0e\u70b9v[i]\u76f8\u8fde\u7684\u70b9\u662f\u5426\u90fd\u80fd\u5230\u8fbe\u7ec8\u70b9\uff0c\u82e5\u90fd\u80fd\uff0cv[i]\u5165\u961f \n            {\n                if (ff[v[j]]!=1)\n                {\n                    f3=1;//\u6807\u8bb0 \n                }\n                j=e[j];\n            } \n            if (f3==1)//\u70b9v[i]\u6709\u70b9\u4e0d\u80fd\u5230\u8fbe\u7ec8\u70b9 \n            {\n                i=e[i];\n                continue;\n            }\n            if (ff[v[i]]==1&&f[v[i]]!=1)//\u53ef\u4ee5\u5230\u8fbe\u7ec8\u70b9,\u4e14\u6ca1\u641c\u8fc7\u3002 \n            {\n                f[v[i]]=1;//\u6807\u8bb0\n                r++;//\u5165\u961f\n                q[r].n=v[i];\n                q[r].s=q[l].s+1; \n            }\n            i=e[i];\n        }\n    } \n    cout<<mmin;//\u8f93\u51fa \n    return 0;\n}\n```",
        "postTime": 1478698957,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "/\\*\nproblem:road(lg2296,noip20d2t2)\n\nalgorithm:\u641c\u7d22\u526a\u679d,\u6700\u77ed\u8def\n\n\u8fd9\u9053\u9898\u786c\u662f\u505a\u4e86\u4e00\u4e2a\u4e0b\u5348, \u5199\u7684\u6211\u8981\u6b7b\u554a...\n\n\u53cd\u5411\u5efa\u8fb9\u5e94\u8be5\u4e0d\u8981\u8bb2\u4e86\u5427,\u4e0d\u7ba1\u662fspfa,dfs\u67d3\u8272,bfe\u67d3\u8272\u90fd\u53ef\u4ee5,\u4e3b\u8981\u662f\u4f7f\u51fa\u8fb9\u5230\u7684\u4e86\u7684\u60c5\u51b5\u597d\u5224\u65ad\n\n\u63a5\u7740\u6b63\u7740\u6765:\n\n\u4e00\u5f00\u59cb\u60f3\u52a0\u4e2a\u5c0f\u526a\u679d,\u5728\u641c\u7d22\u7684\u65f6\u5019\u52a0\u6700\u4f18\u6027\u526a\u679d,\u987a\u4fbf\u5224\u65ad\u662f\u5426\u7b26\u5408\u51fa\u8fb9\u90fd\u53ef\u4ee5\u5230,\u5982\u679c\u6570\u636e\u597d\u7684\u8bdd\u5e94\u8be5\u53ef\u4ee5\u8fc770\n\n\u7136\u5e76\u5375,30\n\n\u4e8e\u662f\u5c31\u4e0d\u65ad\u5730\u52a0\u526a\u679d,\u5220\u6389\u91cd\u8fb9\u554a\u4e4b\u7c7b\u7684,\u7136\u540e\u8fd8\u7528\u4e86set;\n\n\u6700\u540e\u5fcd\u4e0d\u4f4f\u8fd8\u662f\u770b\u4e86\u5927\u795e\u7684\u601d\u8def, \u539f\u6765\u53ef\u4ee5\u5220\u70b9\u554a,\u4e8e\u662f\u8f7b\u677e\u7684\u5220\u4e86\u70b9\u540e,\u8fd8\u662f30\n\n\u518d\u4e00\u770b,\u53d1\u73b0\u6b63\u7740\u6765\u4e0d\u53ef\u4ee5\u6df1\u641c,\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u5927\u4e86,\u5982\u679c\u6570\u636e\u4e2d\u53ea\u6709\u4e00\u6761\u5f88\u5c0f\u7684\u6ee1\u8db3\u60c5\u51b5\u7684\u8fb9,\u526a\u679d\u5c31\u53d8\u5f97\u6beb\u65e0\u7528\u5904\n\n\u4e8e\u662f\u679c\u65ad\u7528bfs\u6216\u8005\u6700\u77ed\u8def\u561b\n\n\u6211\u9009\u7684\u6700\u77ed\u8def,\u770b\u4e86\u8fb9\u6bd4\u70b9\u591a,\u6211\u5c31\u987a\u624b\u6253\u4e86\u4e2a\u5806\u4f18\u5316dijkstra\u7684\u6a21\u677f,\u5f53\u7136\u53ef\u4ee5\u8fc7\n\nheap\u4f18\u5316\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3anlog(n+m),\u8ba1\u7b97\u5668\u7b97\u51fa\u6765\u5927\u7ea62790419\n\n\u800cspfa\u662fkm,k\u4e00\u822c<=2,\u6240\u4ee5\u5927\u7ea6\u4e3a400000,\u5c0f\u4e86\u4e0d\u77e5\u9053\u591a\u5c11...\n\n\u6700\u540e\u53c8\u6253\u4e86\u4e00\u904dspfa\n\n\u4ee5\u4e0b\u662f\u4ee3\u7801,\u6211\u5c06dijkstra\u7684\u6a21\u677f\u548c\u611a\u8822\u7684\u6df1\u641c\u52a0\u6700\u4f18\u6027\u526a\u679d\u90fd\u7559\u7740\u4e86,\u4ee5\u6b64\u796d\u5960\u6211\u5b9d\u8d35\u7684\u65f6\u95f4\n\n\u8fd8\u6709dijkstra\u7684\u6a21\u677f\u8981\u662f\u60f3\u5957\u7528\u7684\u8bdd\u8981\u6ce8\u610f\u51e0\u4e2a\u70b9:\n\n1.\u6211\u7528pair\u4e4b\u524d\u5c06pair<>\u548cmake\\_pair\u90fd\u7528define\u4ee3\u66ff\u4e86\n\n2.\u6211\u5728\u8ba9\u4ed6\u5165\u5806\u4e4b\u524d\u4f9d\u9898\u76ee\u9700\u8981\u8fd8\u6709\u4e2a\u6761\u4ef6col[v]&&pd[v]==0\u53ef\u4ee5\u53bb\u6389\n\n3.\u56e0\u4e3a\u9898\u4e2d\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6\u5747\u4e3a\u4e00,\u56fa\u76f4\u63a5\u52a01,\u5176\u4ed6\u8981\u52a0val[i]\n\n4.\u4f18\u5148\u961f\u5217\u7684\u5b9a\u4e49\u4e3apriority\\_queue<p,vector<p >,greater<p > > q;\n\n5.dijkstra\u53ef\u4ee5\u91cd\u590d\u5165\u5806\n\n\u53e6\u5916\u9644\u8d60\u8bfb\u5165\u4f18\u5316\u7684\u6a21\u677f>\\_<\n\n\\*/\n \n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<queue>\n#define maxn 10000+10\n#define maxm 200000\n#include<set>\n#define p pair<int,int>\n#define mp(a,b) make_pair(a,b)\nusing namespace std;\n///////////////////////////\nint bs,b[maxn],to[maxm],next[maxm];\nint BS,B[maxn],TO[maxm],NEXT[maxm];\nint n,m,S,T,ans=2100000000;\nint dis[maxn];\nbool col[maxn],pd[maxn],done[maxn];\nqueue<int> q;\n///////////////////////////\ninline int gi()\n{\n    int ans=0;char temp=getchar();\n    while(temp>'9'||temp<'0')\n      temp=getchar();\n    while(temp<='9'&&temp>='0')\n      {\n          ans*=10;\n          ans+=temp-'0';\n          temp=getchar();\n      }\n    return ans;\n}\ninline void link(int u,int v)\n{\n    next[++bs]=b[u];\n    b[u]=bs;\n    to[bs]=v;\n}\ninline void knil(int u,int v)\n{\n    NEXT[++BS]=B[u];\n    B[u]=BS;\n    TO[BS]=v;\n}\n/*inline void dijkstra(int s)\n{\n    memset(dis,0x3f,sizeof(dis));\n    q.push(mp(0,s));\n    dis[s]=0;\n    while(!q.empty())\n      {\n          p x=q.top();\n          q.pop();\n          int u=x.second;\n          for(int i=b[u];i;i=next[i])\n            {\n                int v=to[i];\n                if(col[v]&&pd[v]==0&&dis[v]>dis[u]+1)\n                  {\n                      dis[v]=dis[u]+1;\n                      q.push(mp(dis[v],v));\n              }\n          }\n      }\n    for(int i=1;i<=n;i++)\n      cout<<dis[i]<<\" \";\n    cout<<endl;\n}*/\ninline void spfa(int s)\n{\n    memset(dis,0x3f,sizeof(dis));\n    dis[s]=0;\n    done[s]=1;\n    q.push(s);\n    while(!q.empty())\n      {\n          int u=q.front();\n          q.pop();\n          for(int i=b[u];i;i=next[i])\n            {\n                int v=to[i];\n                if(col[v]&&!pd[v]&&!done[v]&&dis[v]>dis[u]+1)\n                  {\n                      dis[v]=dis[u]+1;\n                      q.push(v);\n              }\n          }\n      }\n}\ninline void in()\n{\n    //cin>>n>>m;\n    n=gi(),m=gi();\n    for(int i=1;i<=m;i++)\n      {\n        int u,v;\n        //scanf(\"%d %d\",&u,&v);\n        u=gi(),v=gi();\n        link(u,v);\n        knil(v,u);\n      }\n    //cin>>S>>T;\n    S=gi(),T=gi();\n}\nint DFS(int x)\n{\n    col[x]=1;\n    for(int i=B[x];i;i=NEXT[i])\n      {\n          int v=TO[i];\n          if(col[v]==0)\n            {\n                col[v]=1;\n                DFS(v);\n          }\n      }\n}\ninline void check(int i)\n{\n    for(int j=B[i];j;j=NEXT[j])\n      {\n          int v=TO[j];\n          pd[v]=1;\n      }\n}\n/*int dfs(int x,int d)\n{\n    if(d>ans)\n      return 0;\n    if(x==T)\n      ans=min(ans,d);\n    for(int i=b[x];i;i=next[i])\n      {\n          int v=to[i];\n          if(pd[v]==0&&col[v]==1)\n            {\n                pd[v]=1;\n                road[++num]=v;\n                dfs(v,d+1);\n                pd[v]=0;\n                road[num--]=0;\n          }\n      }\n}\n```\n\\*/\n```cpp\n///////////////////////////\nint main()\n{\n    //freopen(\"2296(4).in\",\"r\",stdin);\n    in();\n    DFS(T);\n    for(int i=1;i<=n;i++)\n      if(col[i]==0)\n        check(i);\n    //dijkstra(S);\n    spfa(S);\n    if(dis[T]==0x3f3f3f3f)\n      cout<<-1;\n    else\n      cout<<dis[T];\n}0.\n```",
        "postTime": 1478083937,
        "uid": 14941,
        "name": "\u65f6\u5149_Memory",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u8fd9\u9898\u2026\u2026\u65e0\u8111BFS\uff08\u6211\u8fd8\u8111\u6b8b\u5730\u6253\u4e86SPFA\uff0c\u770b\u6d1b\u8c37\u4e0a\u5927\u795e\u4eec\u7528\u7684\u90fd\u662f\u4e24\u6b21BFS\u2026\u2026\uff09\n\n\u9996\u5148\u5728\u53cd\u56fe\u4e0a\u8dd1\u4e00\u904dBFS\u770b\u770b\u54ea\u4e9b\u70b9\u4e0d\u7b26\u5408\u6761\u4ef6\u3002\u9898\u76ee\u8bf4\u8def\u5f84\u4e0a\u7684\u70b9\u51fa\u8fb9\u6307\u5411\u7684\u70b9\u90fd\u4e0e\u7ec8\u70b9\u8fde\u901a\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u6574\u5f20\u56fe\u53cd\u8fc7\u6765\uff0c\u770b\u770b\u6709\u54ea\u4e9b\u70b9\u4ece\u7ec8\u70b9\u51fa\u53d1\u4e0d\u53ef\u8fbe\uff0c\u7136\u540e\u5728\u56fe\u4e0a\u628a\u539f\u56fe\u4e2d\u6307\u5411\u8fd9\u4e9b\u4e0d\u53ef\u8fbe\u70b9\u7684\u70b9\u5220\u6389\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7136\u540e\uff0c\u65e0\u8111\u6700\u77ed\u8defSPFA\u2026\u2026(Orz\u5404\u8def\u5927\u795e\u7528BFS\u2026\u2026\u7b97\u4e86\uff0c\u5f53\u7ec3\u4e00\u4e0b\u6a21\u677f)\n\n  \n```cpp\n#include<iostream>  \n#include<cstdio>  \n#include<cmath>  \n#include<queue>  \n#include<algorithm>  \n#include<cstring>  \n#define repu(i,l,r) for(int i=l;i<=r;i++)  \n#define repd(i,r,l) for(int i=r;i>=l;i--)  \n#define M 225000  \n#define N 15000  \nusing namespace std;  \nstruct e  \n{  \n    int en,next;  \n}edge[M],redge[M];  \nint n,m,s,t,x,y,head[M],rhead[M],cnt,rcnt,able[N]={0},legal[N]={0},d[N],vis[N]={0};  \nqueue<int> q;  \nvoid addedge(int x,int y)  \n{  \n    cnt++;  \n    edge[cnt].en=y;  \n    edge[cnt].next=head[x];  \n    head[x]=cnt;  \n}  \nvoid addredge(int y,int x)  \n{  \n    rcnt++;  \n    redge[rcnt].en=x;  \n    redge[rcnt].next=rhead[y];  \n    rhead[y]=rcnt;  \n}  \nint read()  \n{  \n    char ch=getchar();  \n    int ret=0;  \n    while (ch>'9'||ch<'0') ch=getchar();  \n    while (ch<='9'&&ch>='0')  \n    {  \n        ret=ret*10+ch-'0';  \n        ch=getchar();  \n    }  \n    return ret;  \n}  \nint main()  \n{  \n    n=read(),m=read();  \n    repu(i,1,m)  \n    {  \n        x=read(),y=read();  \n        addedge(x,y);  \n        addredge(y,x);  \n    }  \n    s=read(),t=read();  \n    q.push(t);  \n    able[t]=1;  \n    while(!q.empty())  \n    {  \n        x=q.front();  \n        q.pop();  \n        for(int e=rhead[x];e;e=redge[e].next)  \n        {  \n            y=redge[e].en;  \n            if (!able[y])  \n            {  \n                able[y]=1;  \n                q.push(y);  \n            }  \n        }  \n    }  \n    repu(i,1,n)  \n    {  \n        if (!able[i]) continue;  \n        else  \n        {  \n            int ability=1;  \n            for(int e=head[i];e;e=edge[e].next)  \n            {  \n                y=edge[e].en;  \n                if (!able[y])  \n                {  \n                    ability=0;  \n                    break;  \n                }  \n            }  \n            legal[i]=ability;  \n        }  \n    }  \n    if (!legal[s])   \n    {  \n        printf(\"-1\");  \n        return 0;  \n    }  \n    repu(i,1,n)  \n    d[i]=M;  \n    d[s]=0;  \n    vis[s]=1;  \n    memset(vis,0,sizeof(vis));  \n    queue<int> qs;  \n    qs.push(s);  \n    while (!qs.empty())  \n    {  \n        x=qs.front();  \n        qs.pop();  \n        for(int e=head[x];e;e=edge[e].next)  \n        {  \n            int to=edge[e].en;  \n            if (!legal[to]) continue;  \n            if (d[to]>d[x]+1)  \n            {  \n                d[to]=d[x]+1;  \n                if (!vis[to])  \n                {  \n                    vis[to]=1;  \n                    qs.push(to);  \n                }  \n            }  \n        }  \n        vis[x]=0;  \n    }  \n    if (d[t]==M) printf(\"-1\");  \n    else printf(\"%d\",d[t]);  \n    return 0;  \n}\n```",
        "postTime": 1476942993,
        "uid": 5263,
        "name": "DrCell_CellTech",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "```cpp\nbfs\u89e3\u51b3\u4e00\u5207\u95ee\u9898\u3002\u3002\n\u9898\u76ee\u8bf4\u4e0d\u80fd\u8d70\u6240\u8fde\u63a5\u7684\u70b9\u6ca1\u7ecf\u8fc7\u7ec8\u70b9\u7684\uff0c\u800c\u4e14\u8981\u6700\u77ed\u8def\u3002\n\u9996\u5148\uff0c\u4eces\u5230t\u80af\u5b9a\u4e0d\u53ef\u80fd\u7ecf\u8fc7\u65e0\u6cd5\u4ece\u8be5\u70b9\u51fa\u53d1\u5230\u8fbe\u7ec8\u70b9\u7684\u70b9\u3002\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u628a\u4e0d\u80fd\u4ece\u70b9\u51fa\u53d1\u5230\u8fbe\u7ec8\u70b9\u7684\u70b9\u5220\u6389\uff0c\u8fd8\u6709\u8fde\u63a5\u7684\u70b9\u4e0d\u80fd\u5230\u8fbe\u7ec8\u70b9\u7684\u70b9\u4e5f\u5220\u6389\uff0c\u7136\u540e\u8dd1bfs\u5c31\u884c\u4e86\n\u65f6\u95f4\u590d\u6742\u5ea6O(n)\n\u600e\u4e48\u5220\uff1f  \u6784\u9020\u4e00\u4e2a\u53cd\u56fe\uff0c\u4ece\u7ec8\u70b9\u51fa\u53d1\u5f00\u59cbbfs \u9047\u5230\u7684\u70b9\u67d3\u8272\n\u7136\u540e\u518d\u7528\u4e00\u4e2a\u5faa\u73af\u679a\u4e3e\uff0c\u628a\u67d3\u8272\u70b9\u4e2d\u6240\u8fde\u63a5\u7684\u70b9\u4e2d\u6ca1\u88ab\u67d3\u8272\u7684\u5220\u6389\u5c31\u884c\u4e86\n\u7136\u540e\u5728\u5e78\u5b58\u4e0b\u6765\u6ca1\u88ab\u5220\u6389\u7684\u70b9\u6784\u6210\u7684\u56fe\u91cc\u4ece\u8d77\u70b9\u5f00\u59cb\u8dd1dfs \u7528\u4e00\u4e2apair first\u8bb0\u5f55\u70b9\u7f16\u53f7\uff0csecond\u8bb0\u5f55\u6b65\u6570\n\u627e\u5230\u5c31\u8f93\u51fa \u6ca1\u627e\u5230\u5c31-1\n\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <cstring>\nusing namespace std;\nconst int INF=1000000000;\nconst int MAXN=10001+100;\ntypedef pair<int,int> pii;\nvector<int> edges[MAXN],downedges[MAXN];\nqueue<int> q;\nqueue<pii> q2;\nbool can[MAXN]={false},pcan[MAXN]={false},done[MAXN]={false};\n\nint main()\n{\n//    freopen(\"data.in\",\"r\",stdin);\n    int n,m,s,t;\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n    {\n        int x,y;\n        cin>>x>>y;\n        edges[x].push_back(y);\n        downedges[y].push_back(x); //\u521d\u59cb\u5316 \u8bfb\u5165\u4e34\u63a5\u8868 \u518d\u987a\u624b\u6784\u9020\u4e00\u4e2a\u53cd\u56fe \n    }\n    cin>>s>>t;\n    q.push(t);  \n    can[t]=1;\n    while(q.size())  //\u5728\u53cd\u56fe\u4e0a\u4ece\u7ec8\u70b9\u5f00\u59cbbfs \n    {\n        int x=q.front();\n        for(int i=0;i<downedges[x].size();i++)\n        {\n            int y=downedges[x][i];\n            if(!can[y])\n            {\n                can[y]=1;  //\u67d3\u8272\uff0cy\u662f\u80fd\u5230\u7ec8\u70b9\u7684\u70b9 \n                q.push(y);\n            }\n        }\n        q.pop();\n    }\n    for(int i=1;i<=n;i++) //\u8fdb\u4e00\u6b65\u8fc7\u6ee4\u6389y\u4e2d\u8fde\u63a5\u7684\u70b9\u4e0d\u80fd\u901a\u8fc7\u7ec8\u70b9\u7684\u70b9 \n    {\n        if(!can[i]) continue;\n        else\n        {\n            bool _cant=false;\n            for(int j=0;j<edges[i].size();j++)\n            {\n                int x=edges[i][j];\n                if(!can[x]) {_cant=1; break;}\n            }\n            if(_cant) continue;\n            else\n            {\n                pcan[i]=1;    \n            }\n        }\n    }\n    if(!pcan[s]) {cout<<-1; return 0;} //\u5982\u679c\u8d77\u70b9\u4e0d\u80fd\u5230\u8fbe\u91cd\u70b9 return -1 \n    q2.push(make_pair(s,0));  //\u7b2c\u4e00\u4f4d\u662f\u70b9\uff0c\u7b2c\u4e8c\u4f4d\u662f\u6b65\u6570 \n    done[s]=1;\n    while(q2.size())  //\u4ece\u8d77\u70b9\u5f00\u59cbbfs\n    {\n        pii x=q2.front();\n        int x1=x.first;\n        for(int i=0;i<edges[x1].size();i++)\n        {\n            int y=edges[x1][i];\n            if(y==t) //\u627e\u5230\u4e86 \u8f93\u51fa \n            {\n                cout<<x.second+1;\n                return 0;\n            }\n            if(pcan[y]&&!done[y])\n            {\n                q2.push(make_pair(y,x.second+1));\n                done[y]=true;\n            }\n        }\n        q2.pop();\n    }\n    cout<<-1; //\u6ca1\u627e\u5230 \u8f93\u51fa-1 \n    return 0;\n}\n```",
        "postTime": 1471102313,
        "uid": 11585,
        "name": "\u4f0a\u65af\u5361\u5c14\u7684\u98ce",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u9996\u5148\u628a\u8def\u7ebf\u5168\u5012\u8fc7\u6765\uff0c\u4ece\u7ec8\u70b9\u5f80\u8d77\u70b9\u8d70\u4e00\u904d\uff0c\u628a\u4e0d\u884c\u7684\u70b9\u6807\u8d77\u6765\uff0c\u7136\u540e\u518d\u4ece\u8d77\u70b9\u5f80\u7ec8\u70b9\u505a\u4e00\u4e2abfs\uff0c\u6c42\u6700\u77ed\u7684\u8def\u7ebf\uff0c\u5c31\u884c\u4e86\n\n```cpp\n\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<iostream>\n#include<vector>\nusing namespace std;\nint x,y,s,t,n,m,h[10002],f[10002],tr;\nvector<int>a[10002],b[10002];\nvoid dfs(int u){\n    if (h[u])return;\n    f[u]=1;h[u]=1;\n    for (int i=0;i<b[u].size();i++)\n    dfs(b[u][i]);\n}\nvoid bfs(int u){\n    int g[10002],ans[10002],l=0,fl[10002],xx;\n    memset(fl,0,sizeof(fl));memset(ans,0,sizeof(ans));\n    for (int i=0;i<a[u].size();i++)\n    if (!fl[a[u][i]] && f[a[u][i]])\n    {ans[l]=1;g[l++]=a[u][i];fl[a[u][i]]=1;}\n    for (int i=0;i<l;i++)\n    {\n        if (g[i]==t){tr=1;printf(\"%d\",ans[i]);break;}\n        xx=g[i];\n        for (int j=0;j<a[xx].size();j++)\n        if (!fl[a[xx][j]] && f[a[xx][j]])\n        {ans[l]=ans[i]+1;g[l++]=a[xx][j];fl[a[xx][j]]=1;}\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=0;i<m;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        a[x].push_back(y);b[y].push_back(x);\n    }\n    scanf(\"%d%d\",&s,&t);\n    dfs(t);\n    memset(h,0,sizeof(h));\n    for (int i=1;i<=n;i++)\n    {\n        if (!f[i])continue;\n        for (int j=0;j<a[i].size();j++)\n        if (!f[a[i][j]]){h[i]=1;break;}\n    }\n    for (int i=1;i<=n;i++)\n    if (h[i])f[i]=0;\n    if (f[s])bfs(s);\n    if (!tr)printf(\"-1\");\n    return 0;\n}\n\n```",
        "postTime": 1465615906,
        "uid": 14738,
        "name": "1124828077ccj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u601d\u8def\u8be6\u89c1\uff1ahttp://iyyy.sinaapp.com/?p=765\n\n```cpp\n\n#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<queue>\n#include<vector>\nconst int N=200001;\nusing namespace std;\nstruct wxy\n{\n int point,k;\n};\nwxy newpush(int point,int k)\n{\n wxy temp;\n temp.point = point;\n temp.k = k;\n return temp;\n}\nvector <int> map[N];//\u90bb\u63a5\u8868\u7684\u5efa\u7acb\nwxy mdzz[2*N]={0};\nint head=0,tail=1;//\u641c\u7d22\u961f\u5217 \nint n,m,s,t;\nbool _able[N]= {false},able[N]= {false};\nint main()\n{\n scanf(\"%d %d\",&n,&m);\n for (int i=1,x,y; i<=m; i++)\n {\n scanf(\"%d %d\",&x,&y);\n map[y].push_back(x);//\u53cd\u7740\u5b58\u56fe\u4ee5\u4fbf\u4ece\u7ec8\u70b9\u7206\u809d\n }\n scanf(\"%d %d\",&s,&t);\n //\u8f93\u5165\u5b8c\u6bd5\n mdzz[tail]=newpush(t,0);\n while(head<=tail)//bfs\uff0c\u627e\u51fa\u65e0\u6cd5\u8bbf\u95ee\u7684\u5e9f\u70b9\n {\n wxy now=mdzz[head++];\n able[now.point]=true;\n for (int i=0; i<map[now.point].size(); i++)\n if (!able[map[now.point][i]])\n {\n mdzz[++tail]=newpush(map[now.point][i],now.k+1);\n }\n }\n /*for (int i=0;i<=3;i++)\n cout<<_able[i]<<\" \";*/\n for (int i=0; i<=n; i++)\n _able[i]=able[i];\n for (int i=1; i<=n; i++) //\u6392\u9664\u70b9\n if (!_able[i])\n for (int j=0; j<map[i].size(); j++)\n able[map[i][j]] = false;//\u628a\u5e9f\u70b9\u7684\u7236\u8282\u70b9\u7b5b\u53bb\n //\u53ef\u9009\u70b9\u7b5b\u9009\u5b8c\u6bd5\n head=0;\n tail=1;\n mdzz[tail]=newpush(t,0);\n while(head<=tail) //bfs\u5bfb\u627e\u6700\u77ed\u8def\u5f84\n {\n wxy now=mdzz[head++];\n if (!able[now.point]) \n continue;\n for (int i=0; i<map[now.point].size(); i++)\n if (map[now.point][i]!=t)\n {\n mdzz[++tail]=newpush(map[now.point][i],now.k+1);\n if (map[now.point][i] == s)\n {\n printf(\"%d\\n\",now.k+1);\n return 0;\n }\n }\n }\n printf(\"-1\\n\");\n //\u83b7\u5f97\u6210\u5c31[\u7f16\u5199\u5b8c\u6210] \n return 0;\n}\n\n```",
        "postTime": 1456326602,
        "uid": 5846,
        "name": "yyy2015c01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "Opps :) \u6700\u540e\u4e09\u4e2a\u70b9\u8c8c\u4f3c\u8d85\u65f6\u4e0d\u80fd\u8fc7,\u5982\u679c\u6211\u7528\u90bb\u63a5\u8868\u53ef\u80fd\u80fdAC,\u4f46\u662f\u8003\u573a\u4e0a\u6700\u591a\u5141\u8bb8\u6211\u82b12h\u518d\u4e0a\u9762,\u6240\u4ee5\u6211\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1,\u4f7f\u7528\u4e86\u76f4\u63a5\u50a8\u5b58\u8def\u5f84\u7684\u65b9\u6cd5.\n\n\u6211\u89c9\u5f97\u8fd9\u9898\u7684\u89e3\u6cd5\u662f\u5148\u5efa\u56fe,\u7136\u540e\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u8fdb\u884cDFS,\u5224\u65ad\u4ed6\u4eec\u548c\u7ec8\u70b9\u662f\u5426\u8054\u901a,\u5f00\u4e00\u4e2adielist\u6570\u7ec4\u6765\u50a8\u5b58\u6bcf\u4e00\u4e2a\u70b9\u548c\u7ec8\u70b9\u8054\u4e0d\u8054\u901a,\u7136\u540e\u518d\u8fdb\u884c\u4e0b\u4e00\u6b65\u5904\u7406:\u6240\u6709\u7684\u548cdielist\u76f8\u8fde\u7684\u8282\u70b9\u90fd\u8bbe\u7f6e\u4e3a\u88ab\u5305\u542b\u4e8edielist2\u6570\u7ec4\u91cc\u9762,\u4e14dielist1\u2282dielist2;\u6700\u540e\u518d\u4ece\u8d77\u70b9\u8fdb\u884cBFS,\u6bcf\u4e00\u6b21\u5165\u961f\u7684\u65f6\u5019\u5982\u679c \u5f53\u524d\u5143\u7d20\u2208dielist2 \u5219\u4e0d\u52a0\u5165\u961f\u5217,\u6700\u540e\u5f97\u5230\u6700\u77ed\u8def\u5f84ans,\u8f93\u51fa\u5373\u53ef.\n\n```cpp\n\n#include<stdio.h>\n#include<stdlib.h>\n#define dead 0\n#define life 1\n#define taked 1\n#define untaked 0\nstruct aaa{\n    int beg,end;\n}way[200001];\nstruct queue{\n    int T,total;\n    struct queue *next,*last;\n}orginial;\nint m,n,flag[100000]={0},flag1[100000]={0},dielist[100000]={0},dielist2[100000],beg,end,quen=1,ans;\nstruct queue *head,*teil;\nint dfs(int T){\n    int i;\n    if(T == end){\n        dielist[T]=life;\n        return 1;\n    }\n    flag[T]=taked;\n    for(i=1;i<=m;i++){\n        if(way[i].beg == T){\n            if(flag[way[i].end] == untaked){\n                if(dfs(way[i].end) == 1){\n                    dielist[T]=life;\n                    flag[T]=untaked;\n                    return 1;\n                }\n            }\n        }\n    }\n    flag[T]=untaked;\n    return 0;\n}\nint orgbfs(int T){\n    orginial.T=T;\n    head=&orginial;\n    teil=head;\n    orginial.total=0;\n}\nint pop(){\n    teil=teil->last;\n    quen--;\n}\nint push(int T,int total){\n    struct queue *newone;\n    newone=(struct queue *)malloc(sizeof(struct queue));\n    newone->next=head;\n    newone->T=T;\n    newone->total=total+1;\n    head->last=newone;\n    head=newone;\n    quen++;\n}\nint bfs(){\n    int i;\n    if(quen != 0){\n        if(teil->T != end){\n            for(i=1;i<=m;i++){\n                if(way[i].beg == teil->T && dielist2[way[i].end] == 1 && flag1[way[i].end] == untaked){\n                    flag1[way[i].end]=taked;\n                    push(way[i].end,teil->total);\n                }\n            }\n        }\n        else{\n            ans=teil->total;\n            return 1;\n        }\n    }\n    pop();\n    return 0;\n}\nint undo(int i)\n{\n    int j;\n    for(j=1;j<=m;j++){\n        if(way[j].beg == i){\n            dielist2[way[j].end]=dead;\n        }\n        else{\n            if(way[j].end == i){\n                dielist2[way[j].beg]=dead;\n            }\n        }\n    }\n}\n\nint main()\n{\n    int i,getansornot=0;\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=m;i++){\n        scanf(\"%d%d\",&way[i].beg,&way[i].end);\n    }\n    scanf(\"%d%d\",&beg,&end);\n    for(i=1;i<=n;i++){\n        dfs(i);\n    }\n    for(i=1;i<=n;i++){\n        dielist2[i]=dielist[i];\n    }\n    for(i=1;i<=n;i++){\n        if(dielist[i] == dead){\n            undo(i);\n        }\n    }\n    for(i=1;i<n;i++){\n        if(dielist2[i] != 0 && i != end){\n            orgbfs(beg);\n            while(getansornot == 0){\n                getansornot=bfs();\n            }\n            printf(\"%d\",ans);\n            return 0;\n        }\n    }\n    printf(\"-1\");\n}\n\n```\uff08c/c++\uff09",
        "postTime": 1446321614,
        "uid": 8296,
        "name": "March",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u5927\u5bb6\u90fd\u8bf4\u7528spfa\u2026\u2026\n\n\u4e00\u5f00\u59cb\u5176\u5b9e\u6211\u662f\u62d2\u7edd\u7684\uff0c\u540e\u6765\u5404\u79cd\u6700\u77ed\u8def\u6c42\u6cd5\u90fd\u8d85\u65f6(=\uff9f\u0414\uff9f=)\uff0c\u6211\u8fd8\u662f\u7528\u4e86spfa\u2026\u2026\n\n\n\u601d\u8def\u5f88\u7b80\u5355\uff0c\u7528\u6570\u7ec4\u6a21\u62df\u90bb\u63a5\u8868\u50a8\u5b58\uff0c\u9006\u5411\u904d\u5386\u67d3\u4e00\u4e0b\u8272\uff08bfs\u548cdfs\u90fd\u884c\uff09\uff0c\u628a\u6240\u6709\u4e0d\u80fd\u8fc7\u7684\u70b9\u90fd\u6807\u8bb0\u4e00\u4e0b\uff0c\u4e4b\u540e\u5c31\u7528spfa\u6c42\u6700\u77ed\u8def\u5f84\u5c31\u884c\u4e86\n\n\n```delphi\nconst\n  inf=30000;\nvar\n  a:array[1..10000,0..10000] of longint;\n  bool,b:array[1..10000] of integer;\n  dis:array[1..10000] of longint;\n  n,m,x,y,s,t:longint;\n  i,j,min,k:longint;\nprocedure dfs(m:integer);//\u6807\u8bb0\u4e0d\u80fd\u8fc7\u7684\u70b9\uff0c\u4ece\u7ec8\u70b9\u5f00\u59cb\u904d\u5386\n  var\n    i:integer;\n  begin\n    for i:=1 to a[m,0] do\n      if bool[a[m,i]]=0 then\n        begin\n          bool[a[m,i]]:=1;\n          dfs(a[m,i]);\n        end;\n  end;\nprocedure spfa;\n  var\n    i,tail,head:longint;\n    team:array[1..10000] of longint;\n  begin\n    fillchar(bool,sizeof(bool),0);\n    for i:=1 to n do dis[i]:=inf;\n    dis[s]:=0;bool[s]:=1;team[1]:=s;head:=0;tail:=1;\n    while head<tail do\n      begin\n        inc(head);bool[team[head]]:=0;\n        for i:=1 to a[team[head],0] do\n          if b[a[team[head],i]]=0 then\n            if dis[a[team[head],i]]>dis[team[head]]+1 then\n              begin\n                dis[a[team[head],i]]:=dis[team[head]]+1;\n                if bool[a[team[head],i]]=0 then\n                  begin\n                    inc(tail);team[tail]:=a[team[head],i];\n                    bool[a[team[head],i]]:=1;\n                  end;\n              end;\n      end;\n  end;\nbegin\n  read(n,m);\n  for i:=1 to m do\n    begin\n      read(x,y);\n      inc(a[y,0]);//\u6570\u7ec4\u6a21\u62df\u90bb\u63a5\u8868\uff0ca[i,0]\u8868\u793ai\u70b9\u6709\u591a\u5c11\u4e2a\u540e\u7eed\u5b50\u8282\u70b9\uff08\u5373\u51fa\u8fb9\u6761\u6570\uff09\n      a[y,a[y,0]]:=x;//\u4e3a\u4e86\u65b9\u4fbf\uff0c\u76f4\u63a5\u5c06\u6709\u5411\u56fe\u5012\u7740\u5b58\n    end;\n  read(t,s);//\u5c06\u8d77\u70b9\u548c\u7ec8\u70b9\u5012\u8fc7\u6765,\u76f4\u63a5\u4ece\u7ec8\u70b9\u5f00\u59cb\n  fillchar(bool,sizeof(bool),0);\n  bool[s]:=1;\n  dfs(s);\n\n  for i:=1 to n do\n    if bool[i]=0 then\n      begin\n        for j:=1 to a[i,0] do\n          b[a[i,j]]:=1;\n        b[i]:=1;\n      end;//\u5c06\u5230\u8fbe\u4e0d\u4e86\u7ec8\u70b9\u7684\u70b9\u7684\u524d\u8d8b\u70b9\u4e00\u8d77\u6807\u8bb0\u4e3a\u4e0d\u80fd\u8fc7\u7684\u70b9\uff08\u4e5f\u5c31\u662f\u5c06\u53cd\u5411\u7684\u56fe\u7684\u540e\u7ee7\u70b9\u6807\u8bb0\uff09\n\n  spfa;\n\n  if dis[t]=inf then write(-1)\n  else write(dis[t]);\nend.\n```",
        "postTime": 1446278097,
        "uid": 5938,
        "name": "\u5c0f\u9ed1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u90fd\u8bf4\u7528spfa\u2026\u2026\u7136\u800c\u5bf9\u4e8e\u6211\u8fd9\u79cd\u521a\u521a\u5f00\u59cb\u770bspfa\u5374\u8fd8\u6ca1\u641e\u61c2\u7684\u849f\u84bb\u2026\u2026\u8fd8\u662f\u7528dfs+bfs\u628a\u8fd9\u9898\u7ed9ac\u4e86\u2026\u2026\n\n\u8bfb\u5165\u7684\u65f6\u5019\u5b58\u8fb9\u5b58\u4e24\u7ec4\uff0c\u6b63\u7740\u8d70\u7684\u4e00\u7ec4\u5012\u7740\u8d70\u7684\u518d\u4e00\u7ec4\uff0c\u7136\u540e\u7528dfs\u4ece\u7ec8\u70b9\u5f80\u56de\u904d\u5386\uff0c\u780d\u6389\u4e0d\u80fd\u5230\u8fbe\u7ec8\u70b9\u7684\u70b9\u4ee5\u53ca\u6307\u5411\u4e0d\u80fd\u5230\u8fbe\u7ec8\u70b9\u7684\u70b9\u7684\u70b9\uff0c\u7136\u540e\u518d\u7528bfs\u4ece\u8d77\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u641c\u5230\u7ec8\u70b9\u5c31\u8f93\u51fa\u2026\u2026\uff08\u8fb9\u6743\u90fd\u662f1\u6240\u4ee5\u5c31\u76f4\u63a5\u7528bfs\u4e86\uff09\n\n\u4ee3\u7801\u5c31\u4e0d\u52a0\u6ce8\u91ca\u4e86\u53cd\u6b63\u53d8\u91cf\u540d\u5df2\u7ecf\u591f\u957f\u7684\u4e86\uff08front\u4ece\u524d\u5f80\u540e\uff0cback\u4ece\u540e\u5f80\u524d\uff09\u2026\u2026\u5982\u679c\u4f60\u4eec\u770b\u5230\u4e86\u4e9b\u5947\u602a\u7684\u7a7a\u683c\uff0c\u5176\u5b9e\u662f\u88ab\u6d1b\u8c37\u541e\u6389\u4e86\u7684\u4e0b\u5212\u7ebf\u2026\u2026\n\n```delphi\ntype\n    int = longint;\n    bool = boolean;\n    ace = record\n        v, next : int;\n    end;\n    acq = record\n        u, l : int;\n    end;\n\nvar\n    head_front, head_back : array[1..10009] of int;\n    edge_front, edge_back : array[1..200009] of ace;\n    b_front, b_back : array[1..10009] of bool;\n    queue : array[1..200009] of acq;\n    n, m : int;\n\nprocedure add_front(u, v, i : int);\nbegin\n    edge_front[i].v := v;\n    edge_front[i].next := head_front[u];\n    head_front[u] := i;\nend;\n\nprocedure add_back(u, v, i : int);\nbegin\n    edge_back[i].v := v;\n    edge_back[i].next := head_back[u];\n    head_back[u] := i;\nend;\n\nfunction bfs_front(u, back : int) : int;\nvar\n    i, h, t : int;\n    q, p : acq;\n    e : ace;\nbegin\n    h := 1;\n    t := 0;\n    queue[1].u := u;\n    queue[1].l := 0;\n    while h > t do\n    begin\n        inc(t);\n        q := queue[t];\n        if not b_front[q.u] then continue;\n        b_front[q.u] := false;\n        i := head_front[q.u];\n        while i <> 0 do\n        begin\n            e := edge_front[i];\n            if b_front[e.v] then\n            begin\n                p.u := e.v;\n                p.l := q.l + 1;\n                if p.u = back then exit(p.l);\n                inc(h);\n                queue[h] := p;\n            end;\n            i := e.next;\n        end;        \n    end;\nend;\n\nprocedure dfs_back(u : int);\nvar\n    i : int;\n    e : ace;\nbegin\n    i := head_back[u];\n    while i <> 0 do\n    begin\n        e := edge_back[i];\n        if not b_back[e.v] then\n        begin\n            b_back[e.v] := true;\n            dfs_back(e.v);\n        end;\n        i := e.next;\n    end;\nend;\n\nprocedure dele_head(u : int);\nvar\n    i : int;\n    e : ace;\nbegin\n    if not b_front[u] then exit;\n    b_front[u] := false;\n    i := head_back[u];\n    while i <> 0 do\n    begin\n        e := edge_back[i];\n        b_front[e.v] := false;\n        i := e.next;\n    end;\nend;\n\nfunction cyc() : int;\nvar\n    i, s, t : int;\nbegin\n    readln(n, m);\n    fillchar(head_front, sizeof(head_front), 0);\n    fillchar(head_back, sizeof(head_back), 0);\n    for i := 1 to m do \n    begin\n        readln(s, t);\n        if s = t then continue;\n        add_front(s, t, i);\n        add_back(t, s, i);\n    end;\n    readln(s, t);\n    if s = t then exit(0);\n    fillchar(b_back, sizeof(b_back), false);\n    b_back[t] := true;\n    dfs_back(t);\n    fillchar(b_front, sizeof(b_front), true);\n    for i := 1 to n do\n        if not b_back[i] then dele_head(i);\n    if not b_front[s] then exit(-1)\n    else exit(bfs_front(s, t));    \nend;\n\nbegin\n    assign(input, 'road.in');\n    assign(output, 'road.out');\n    reset(input);\n    rewrite(output);\n    writeln(cyc());\n    close(input);\n    close(output);\nend .\n```",
        "postTime": 1446129492,
        "uid": 6518,
        "name": "baqkqpfhv",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6709\u4e00\u4e2a\u6bd4\u8f83\u597d\u60f3\u7684\u641e\u6cd5\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u770b\u5230\u6761\u4ef61\uff0c\"\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u4e0e\u7ec8\u70b9\u8fde\u901a\".\u9996\u5148\u6211\u4eec\u901a\u8fc7\u641c\u7d22\u627e\u51fa\u6240\u6709\u4e0e\u7ec8\u70b9\u53ef\u4ee5\u8fde\u901a\u7684\u70b9\uff0c\u5269\u4e0b\u7684\u70b9\u5c31\u662f\u65e0\u8bba\u5982\u4f55\u4e5f\u4e0d\u80fd\u8fde\u901a\u7684\uff0c\u6807\u8bb0\u5b83\u4eec\u3002\u518d\u627e\u51fa\u6240\u6709\u51fa\u8fb9\u6307\u5411\u8fd9\u4e9b\u70b9\u7684\u70b9\uff0c\u6807\u8bb0\u5b83\u4eec\u3002\u8fd9\u4e00\u6b65\u5b58\u53cd\u8fb9\u53ef\u80fd\u66f4\u597d\u5199\u3002\n\n\u7136\u540e\uff0c\u5ffd\u7565\u6240\u6709\u6253\u6807\u8bb0\u7684\u70b9\uff0c\u6c42\u6700\u77ed\u8def\uff08\u5b58\u53cd\u8fb9\u5c31\u53cd\u8fc7\u6765\u6c42\uff0c\u662f\u7b49\u4ef7\u7684\uff09\u3002SPFA\u662f\u4e00\u4e2a\u6bd4\u8f83\u5408\u9002\u7684\u7b97\u6cd5\u3002\n\nPascal\u4ee3\u7801\u5982\u4e0b\n\n```delphi\nprogram p1351;\nconst maxn=10001;\n      maxm=200001;\nvar v,nt:array[1..maxm] of longint;\n    h,d,able2,able:array[1..maxn] of longint;\n    queue:array[1..maxm] of longint;\n    en:array[1..maxn] of boolean;\n\n    i,j,x,k,m,n,p,s,t,t1,hd,tl,z:longint;\nprocedure bl(dian:longint);\nvar c:longint;\nbegin\n    c:=h[dian];\n    while c>0 do\n    begin\n        if able[v[c]]=0 then\n        begin\n            able[v[c]]:=1;\n            bl(v[c]);\n        end;\n    c:=nt[c];\n    end;\nend;\nprocedure dl;\nvar c,b:longint;\nbegin\n    for b:=1 to n do\n        if able[b]=0 then\n        begin\n        c:=h[b];\n        while c>0 do\n            begin\n            able2[v[c]]:=0;\n            c:=nt[c];\n            end;\n        end;\nend;\nbegin\n    fillchar(able,sizeof(able),0);\n    fillchar(en,sizeof(en),true);\n    read(n,m);\n    for k:=1 to m do\n    begin\n        read(i,j);\n        inc(p);\n        v[p]:=i;\n        nt[p]:=h[j];\n        h[j]:=p;\n    end;\n    read(s,t);\n    bl(t);\n    able[t]:=1;\n    able2:=able;\n    dl;\n    able:=able2;\n    for k:=1 to n do d[k]:=200000;\n    hd:=0;\n    tl:=1;\n    queue[tl]:=t;\n    en[t]:=false;\n    d[t]:=0;\n    while hd<tl do\n    begin\n        inc(hd);\n        t1:=queue[hd];\n        z:=h[t1];\n        while z>0 do\n        begin\n           if (able[v[z]]=1)and(d[v[z]]>d[t1]+1) then\n           begin\n               d[v[z]]:=d[t1]+1;\n               if en[v[z]] then\n               begin\n               inc(tl);queue[tl]:=v[z];en[v[z]]:=false;\n               if v[z]=s then begin writeln(d[v[z]]);halt;end;\n               end;\n           end;\n           z:=nt[z];\n        end;\n    end;\n    writeln(-1);\nend.\n```\n",
        "postTime": 1439976732,
        "uid": 6553,
        "name": "why_always_china",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u6211\u4e0d\u77e5\u9053\u6211\u662f\u4e0d\u662f\u72ec\u521b\u4e86\u4e00\u79cd\u65b0\u7684\u505a\u6cd5\u3002\u3002\n\u6211\u7684\u601d\u8def\u662f\u53cd\u5411\u5efa\u8fb9\uff0c\u56e0\u4e3a\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u4f60\u4ece\u8d77\u70b9\u76f4\u63a5\u8d70\u5411\u7ec8\u70b9\uff0c\u80af\u5b9a\u6709\u597d\u591a\u60c5\u51b5\u7684\u554a\uff0c\u51fa\u9898\u4eba\u5361\u7684\u5c31\u662f\u8fd9\u79cd\uff0c\u6240\u4ee5\u4f60\u53cd\u5411\u5efa\u4e00\u4e0b\u8fb9\uff0c\u4f1a\u7701\u53bb\u597d\u591a\u5361\u4f60\u7684\u6570\u636e\uff0c\u662f\u4e0d\u662f\u5f88\u7384\u5b66\u3002\u3002\u6700\u540e\u4ece\u7ec8\u70b9\u5f00\u59cb\u904d\u5386\u5230\u8d77\u70b9\u3002\u8fd9\u91cc\u6211\u7528\u7684bfs\uff0c\u56e0\u4e3a\u5b83\u7684\u6027\u8d28\u5c31\u662f\u53ea\u8981\u641c\u7d22\u5230\uff0c\u5c31\u662f\u6700\u4f18\u89e3\u3002lalalala\n\n\u7136\u540e\u5e72\u6270\u7684\u60c5\u51b5\uff0c\u4f60\u628a\u6240\u6709\u9664\u4e86\u7ec8\u70b9\u7684\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\u6240\u8fde\u7684\u70b9\uff0c\u5c31\u662f\u9898\u76ee\u4e2d\u4e0d\u80fd\u8d70\u7684\u70b9\uff0c\u5168\u90e8\u67d3\u8272\uff0c\u5c31\u7b26\u5408\u4e86\u7b2c\u4e00\u4e2a\u6761\u4ef6\u4e86\u3002\u5f53\u4f60\u628a\u8fd9\u4e2a\u70b9\u67d3\u8272\uff0c\u4ed6\u6240\u5728\u7684\u8def\u5f84\u5c31\u4e0d\u80fd\u88ab\u8d70\u4e86\uff0c\u90a3\u4f60\u5c31\u653e\u5fc3\u5927\u80c6\u7684\u66b4\u529b\uff0clalalala\n\n\u4ee3\u7801\u5f88\u7b80\u5355\uff0chahahahaha\n```cpp\n#include <bits/stdc++.h>\n#define N 500000\nusing namespace std;\nint n , m , head[N] , tot , path[N] , vis[N] , sta , en , ind[N];\nstruct edge\n{\n\tint next , to;\n} e[N];\ninline void add(int x , int y)\n{\n\te[++tot].next = head[x];\n\thead[x] = tot;\n\te[tot].to = y;\n}\nqueue<int>q;\nvoid bfs(int x)\n{\n\tvis[x] = 1;\n\tq.push(x);\n\tpath[x] = 0;\n\twhile(!q.empty())\n\t{\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor (int i = head[u]; i; i = e[i].next)\n\t\t{\n\t\t\tint v = e[i].to;\n\t\t\tif(!vis[v])//\u5982\u679c\u8fd9\u4e2a\u70b9\u53ef\u8d70 \n\t\t\t{\n\t\t\t\tint v = e[i].to;\n\t\t\t\tpath[v] = path[u] + 1;//path\u8bb0\u5f55\u8def\u5f84\u957f\u5ea6 \n\t\t\t\tif(v == sta)\n\t\t\t\t{\n\t\t\t\t\tcout << path[v];//\u8f93\u51fa \n\t\t\t\t\texit(0);//\u7ed3\u675f\u7a0b\u5e8f \n\t\t\t\t}\n\t\t\t\tvis[v] = 1;//\u5426\u5219\u67d3\u8272 \n\t\t\t\tq.push(v);//\u5165\u961f \n\t\t\t}\n\n\t\t}\n\t}\n}//\u8fd9\u4e2a\u66b4\u529b\u5f88\u7b80\u5355\u7684\u5466 \nvoid judge(int x)\n{\n\tfor (int i = head[x]; i; i = e[i].next)\n\t{\n\t\tint v = e[i].to;\n\t\tvis[v] = 1;\n\t}\n}\nint main()\n{\n\tcin >> n >> m;\n\tfor (int i = 1; i <= m; i ++)\n\t{\n\t\tint a , b;\n\t\tcin >> a >> b;\n\t\tadd(b , a);\n\t\tind[a]++;//\u4e3a\u4e86\u641c\u5bfb\u54ea\u4e00\u4e2a\u70b9\u7684\u5165\u5ea6\u4e3a\u96f6\uff0c\u5c31\u6807\u8bb0\u4e00\u4e0b \n\t}\n\tcin >> sta >> en;\n\tfor (int i = 1; i <= n; i ++)\n\t{\n\t\tif(!ind[i] && i != en)\n\t\t\tjudge(i);//judge\u51fd\u6570\u7528\u6765\u628a\u8fd9\u4e2a\u70b9\u6240\u6709\u8fde\u7684\u70b9\u67d3\u8272 \n\t}\n\tbfs(en);//\u5f00\u59cb\u904d\u5386 \n\tcout << -1;\n}\n```\n\n\u7ba1\u7406\u5927\u5927\u6c42\u8fc7",
        "postTime": 1527768189,
        "uid": 78228,
        "name": "\u6211\u6ca1\u6709\u5c0f\u767d",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    },
    {
        "content": "\u601d\u8def\u5982\u4e0b\uff1a\u4ece\u8d77\u70b9\u51fa\u53d1\uff0cbfs\u904d\u5386\uff0c\u53ea\u8d70\u90a3\u4e9b\u4e0e\u7ec8\u70b9\u8fde\u901a\u7684\u70b9\u3002\n\n\u9700\u8981\u521d\u59cb\u5316\u54ea\u4e9b\u70b9\u7ec8\u70b9\u8fde\u901a\u7684\u70b9\u3002//dfs O(n+m)\n\nbfs\u627e\u6700\u77ed\u8def\uff0c\u6bcf\u6b21\u5224\u65ad\u8be5\u70b9\u51fa\u8fb9\u7684\u70b9\u662f\u5426\u4e0e\u7ec8\u70b9\u8fde\u901a\u3002\n\n\u7531\u4e8e\u6bcf\u4e2a\u70b9\u53ea\u88ab\u8bbf\u95ee\u4e00\u6b21\uff0c\u56e0\u6b64O(n+m)\n\nedge1,head1\u8868\u793a\u539f\u56fe;\n\nedge2,head2\u8868\u793a\u53cd\u56fe\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring> \nbool exist[10001];\nbool judge[10001];\nint i,n,m,a,b;\nint st,en;\nstruct Edge\n{\n    int next,to;\n} edge1[200001],edge2[200001];\nint size=0,head1[10001],head2[10001];\nstruct ele\n{\n    int dot,dep;\n} q[10001],u,v;\nint f=1,r=1;\nvoid addedge(Edge edge[], int head[], int from, int to)\n{\n    edge[size].next=head[from];\n    edge[size].to=to;\n    head[from]=size;\n}\nvoid dfs(int st)\n{\n    judge[st]=1;\n    for (int i=head2[st]; i!=0; i=edge2[i].next)\n    {\n        int tmp=edge2[i].to;\n        if (judge[tmp]==0)\n          dfs(tmp);\n    }\n}\nvoid bfs(Edge edge[], int head[])\n{\n    q[1].dot=st; q[1].dep=0;\n    memset(exist,0,sizeof(exist));\n    while (f<=r)\n    {\n        u=q[f++];\n        bool flag=1;\n        for (i=head[u.dot]; i!=0; i=edge[i].next)\n          if (judge[edge[i].to]==0){\n              flag=0;\n              break;\n          }\n        if (flag)\n        {\n          for (i=head[u.dot]; i!=0; i=edge[i].next)\n          if (judge[edge[i].to] && !(exist[edge[i].to]))\n          {\n              int tmp=edge[i].to;\n              exist[tmp]=1; //\u6ce8\u610f\u8981\u5224\u91cd\uff0c\u56e0\u4e3a\u53ef\u80fd\u5b58\u5728\u73af\uff0c\u8fd9\u6837\u7684\u8bdd\u5982\u679c\u6700\u77ed\u8def\u5f88\u957f\uff0c\u5219\u65f6\u95f4\u5f88\u5dee\u3002 \n              v.dep=u.dep+1; v.dot=tmp;\n              q[++r]=v;\n              if (v.dot==en)\n              {\n                  printf(\"%d\",v.dep);\n                  return;\n              }\n          }\n        }\n    }\n    printf(\"-1\");\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (i=1; i<=m; i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        if (a==b) continue;\n        size++; //seperate\n        addedge(edge1,head1,a,b);\n        addedge(edge2,head2,b,a);\n    }\n    scanf(\"%d%d\",&st,&en);\n    memset(judge,0,sizeof(judge));\n    dfs(en);\n    bfs(edge1,head1);\n    return 0;\n}\n```",
        "postTime": 1478765964,
        "uid": 19884,
        "name": "\u7fe0\u7af9\u53f6\u98de",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2296 \u3010\u5bfb\u627e\u9053\u8def\u3011"
    }
]