[
    {
        "content": "## \u5206\u6790\uff1a\n\u9996\u5148\u6709\u4e00\u79cd\u60f3\u6cd5\u662f\u76f4\u63a5\u679a\u4e3e\u6bcf\u573a\u6bd4\u8d5b\u6240\u6709\u53c2\u8d5b\u8005\u7684\u6700\u9ad8\u5f97\u5206\uff0c\u5e76\u8ba1\u7b97\u65b9\u6848\u6570\uff0c\u7136\u540e\u62ff\u8fd9\u4e2a\u65b9\u6848\u6570\u4e0e\u7ed9\u51fa\u7684\u90a3\u4e2a $C$ \u6bd4\u8f83\u3002\u4f46\u8fd9\u6837\u7684\u53ef\u80fd\u662f\u9519\u7684\uff08~~\u6c42\u8bc1\u660eQAQ~~\uff09\uff0c\u56e0\u4e3a\u65b9\u6848\u6570\u53ef\u80fd\u4e3a $0$\uff0c\u56e0\u800c\u65e0\u6cd5\u4fdd\u8bc1\u904d\u5386\u5230\u7684\u72b6\u6001\u4e0d\u4f1a\u8d85\u8fc7 $C$ \u79cd\u3002\n\n\u4e00\u4ef6\u5947\u602a\u7684\u4e8b\u60c5\u662f\u8003\u8651\u5bf9\u4e8e\u4efb\u4f55\u4e00\u79cd $k$ \u4e2a\u53c2\u8d5b\u9009\u624b\u7684\u96c6\u5408\uff0c\u6c42\u4e00\u4e2a\u8fd9 $k$ \u4e2a\u9009\u624b\u7684\u6392\u5e8f\u3002\u53ef\u4ee5\u91c7\u7528\u7684\u4e00\u79cd\u7b56\u7565\u662f\uff1a\u628a\u7b2c\u4e00\u573a\u6bd4\u8d5b\u5f97\u5206\u6700\u9ad8\u7684\u6392\u5728\u7b2c\u4e00\u4f4d\uff0c\u5269\u4e0b\u7684\u4eba\u4e2d\u7b2c\u4e8c\u573a\u6bd4\u8d5b\u5f97\u5206\u6700\u9ad8\u7684\u6392\u5728\u7b2c\u4e8c\u4f4d\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u8003\u8651\u600e\u4e48\u6c42\u6700\u4f18\u89e3\u3002\u4e00\u79cd\u53ef\u884c\u7684\u7b56\u7565\u662f\uff0c\u5148\u9009\u7b2c\u4e00\u573a\u6bd4\u8d5b\u5f97\u5206\u6700\u9ad8\u7684\uff0c\u518d\u5728\u5269\u4e0b\u7684\u4eba\u4e2d\u9009\u7b2c\u4e8c\u573a\u6bd4\u8d5b\u5f97\u5206\u6700\u9ad8\u7684\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u663e\u7136\u8fd9\u4e2a\u8d2a\u5fc3\u9009\u53d6\u7684\u987a\u5e8f\u662f\u7b26\u5408\u4e0a\u8ff0\u6392\u5e8f\u7684\u3002\n\n\u6c42\u51fa\u6700\u4f18\u89e3\u540e\uff0c\u4e0d\u96be\u628a\u5269\u4e0b\u7684\u6240\u6709\u65b9\u6848\u6839\u636e\u4e0e\u5f53\u524d\u65b9\u6848\u7684 $lcp$ \u5212\u5206\u6210 $k$ \u7c7b\uff0c\u6bcf\u4e00\u7c7b\u90fd\u76f8\u5f53\u4e8e\u56fa\u5b9a\u4e86\u65b9\u6848\u7684\u4e00\u4e2a\u524d\u7f00\uff0c\u4e14\u8981\u6c42\u8fd9\u4e2a\u524d\u7f00\u7684\u4e0b\u4e00\u4f4d\u4e0d\u80fd\u662f\u67d0\u4e2a\u9009\u624b\u3002\n\u800c\u6839\u636e\u524d\u9762\u8bb2\u7684\u90a3\u4e2a\u6392\u5e8f\uff0c\u4f1a\u53d1\u73b0\u4e00\u4e2a\u957f\u5ea6\u4e3a $j$ \u7684\u524d\u7f00\u4e00\u5b9a\u4f1a\u786e\u5b9a\u524d $j$ \u573a\u6bd4\u8d5b\u7684\u6700\u9ad8\u5f97\u5206\uff0c\u4e5f\u5c31\u662f\u8bf4\u9650\u5236\u4e00\u4e2a\u56fa\u5b9a\u524d\u7f00\u7684\u4e0b\u4e00\u4f4d\u4e0d\u80fd\u586b\u539f\u672c\u7684\u6700\u5927\u503c\u7b49\u4ef7\u4e8e\u9650\u5236\u4e86\u8fd9\u4e2a\u539f\u672c\u7684\u6700\u5927\u503c\u518d\u4e5f\u4e0d\u80fd\u51fa\u73b0\u3002\n\u56e0\u6b64\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a bitset \u7ef4\u62a4\u5c1a\u53ef\u4ee5\u51fa\u73b0\u5728\u65b9\u6848\u4e2d\u7684\u9009\u624b\u3002\n\nSo\uff0c\u641c\u7d22\u7684\u72b6\u6001\u9700\u8981\u8bb0\u5f55\u4ee5\u4e0b\u4fe1\u606f\uff1a\u4e00\u4e2a\u88ab\u56fa\u5b9a\u7684\u524d\u7f00\uff0c\u5c1a\u53ef\u4ee5\u9009\u7684\u96c6\u5408\uff0c\u4ee5\u53ca\u6743\u503c\u3002\n\u72b6\u6001\u7684\u6743\u503c\u5e94\u88ab\u5b9a\u4e49\u4e3a\u8fd9\u4e2a\u72b6\u6001\u80fd\u7ed9\u51fa\u7684\u6743\u503c\u6700\u5927\u7684\u65b9\u6848\u7684\u6743\u503c\uff0c\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u6743\u503c\u53ef\u4ee5\u4f7f\u7528\u4e0a\u8ff0\u7684\u8d2a\u5fc3\uff0c\u7d27\u63a5\u7740\u4fbf\u53ef\u4ee5\u518d\u6839\u636e\u5269\u4f59\u4e0e\u5f53\u524d\u65b9\u6848\u7684 $lcp$ \u5212\u5206\u6210\u4e0d\u8d85\u8fc7 $k$ \u4e2a\u5b50\u72b6\u6001\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u662f $O(nk2C)$ \u3002\n\n------------\n\n## \u4ee3\u7801\uff1a\n```cpp\n#include \"cstdio\"\n#include \"algorithm\"\n#include \"queue\"\n#include \"bitset\"\n#include \"cstring\"\nusing namespace std;\nstruct node {\n    bitset<505> S;\n    vector<int> V;\n    int pos, val;\n    bool operator<(const node& b) const { return val < b.val; }\n} O;\nint n, k, c, a[505][10];\npriority_queue<node> Q;\ninline void fix(node x) {\n    static int tmp[10];\n    for (int i = 1; i <= k; ++i) tmp[i] = 0;\n    x.pos = x.V.size();\n    for (int i = 1; i <= x.pos; ++i)\n        for (int j = 1; j <= k; ++j) tmp[j] = max(tmp[j], a[x.V[i - 1]][j]);\n    for (int i = x.pos + 1; i <= k; ++i) {\n        int id = -1;\n        for (int j = 1; j <= n; ++j)\n            if (x.S[j] && (id == -1 || a[j][i] >= a[id][i]))\n                id = j;\n        if (id == -1)\n            return;\n        for (int j = 1; j <= k; ++j) tmp[j] = max(tmp[j], a[id][j]);\n        x.V.push_back(id);\n        x.S[id] = 0;\n    }\n    x.val = 0;\n    for (int i = 1; i <= k; ++i) x.val += tmp[i];\n    Q.push(x);\n}\nint main() {\n    scanf(\"%d%d%d\", &n, &k, &c);\n    for (int i = 1; i <= n; ++i)\n        for (int j = 1; j <= k; ++j) scanf(\"%d\", &a[i][j]);\n    O.S.set();\n    fix(O);\n    while (c--) {\n        node x = Q.top();\n        Q.pop();\n        if (!c)\n            return printf(\"%d\", x.val), 0;\n        for (int i = x.pos; i < k; ++i) {\n            node y = x;\n            y.V.resize(i);\n            y.S[x.V[i]] = 0;\n            for (int j = i + 1; j < k; ++j) y.S[x.V[j]] = 1;\n            fix(y);\n        }\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1601205966,
        "uid": 269295,
        "name": "WarningQAQ",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P6230 \u3010[BalticOI 2019 Day2]\u5965\u8fd0\u4f1a\u3011"
    }
]