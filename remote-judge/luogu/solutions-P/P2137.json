[
    {
        "content": "### Part0.\u9898\u5916\u8bdd\n\n\u603b\u7b97\u641e\u51fa\u6765\u8fd9\u4e00\u9053\u9898\u4e86\n\n\u4ece\u4e0a\u53488:30\u505a\u5230\u4e0b\u53482:30\n\n\u996d\u90fd\u6ca1\u5403\n\n\u7d2f\u6b7b\u6211\u4e86\n\n~~\u4e0d\u8fc7\u60f3\u5230\u660e\u5929\u80fd\u53bb\u4e70\u8f7b\u5c0f\u8bf4\u5c31\u6572\u5f00\u5fc3~~\n\n\u8fd9\u7bc7\u9898\u89e3\u662f\u4e00\u8fb9\u505a\u996d\u4e00\u8fb9\u5199\u51fa\u6765\u7684\n\n\u53e6\u5916\uff0c\u7a9d\u7684\u505a\u6cd5\u662f\u76ee\u524d(2019/2/15)\u6240\u6709\u9898\u89e3\u5185\u4e2d\u6700\u4f18\u590d\u6742\u5ea6\n\n\u4e0d\u77e5\u9053\u8fd8\u6709\u6ca1\u6709\u795e\u4ed9\u80fd\u591f\u66f4\u5feb\n\n### Part1.\u524d\u7f6e\u77e5\u8bc6\n\n\u5206\u5757\u3001\u5206\u5757\u3001\u8fd8\u6709\u5206\u5757\n\n\u597d\u5427\u5176\u5b9e\u8fd8\u6709\u4e00\u4e2a\u5e76\u67e5\u96c6\n\n### Part2.BB\u4e86\u90a3\u4e48\u4e45\u603b\u7b97\u5f00\u59cb\u4e86\n\n\u9996\u5148\u8fd9\u4e00\u9898\u7684\u6240\u8c13\u300c\u6811\u5206\u5757\u300d\u7684\u505a\u6cd5\u662f\u9519\u8bef\u7684\uff0c\u53ef\u4ee5\u88ab\u83ca\u82b1\u56fe\u5361\u6389\n\n\u6240\u4ee5\u8981\u6362\u79cd\u65b9\u6cd5\u5206\u5757\n\n\u56de\u7b54\u4e00\u4e2a\u8be2\u95ee\uff0c\u5c31\u662f\u628a\u521d\u59cb\u7b54\u6848\u4e0e\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u5e26\u6765\u7684\u5f71\u54cd\u6240\u6574\u5408\u8d77\u6765\n\n\u5230\u8fd9\u4e00\u9898\u4e0a\uff0c\u5047\u8bbe\u7a9d\u4eec\u5bf9\u4e8e\u521d\u59cb\u90a3\u68f5\u6811\uff08\u6ca1\u6267\u884c\u8fc7\u4efb\u4f55\u4e00\u6b21\u4fee\u6539\u64cd\u4f5c\u7684\uff09\u8fdb\u884c\u4e00\u6b21dfs\u7b97\u51fadfs\u5e8f\u540e\n\n\u6811\u4e0a\u95ee\u9898\u5c31\u6210\u4e86\u5e8f\u5217\u95ee\u9898\n\n\u90a3\u4e48\u4ee5$u$\u4e3a\u6839\u7684\u5b50\u6811\u6240\u5bf9\u5e94\u7684\u533a\u95f4\u5c31\u662f$[dfn[u] , dfn[u] + sz[u] - 1]$\n\n(dfn\u4ee3\u8868dfs\u5e8f\uff09\n\n\u6240\u4ee5\u53ef\u4ee5\u62ff\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u521d\u59cb\u6811\n\n\u8bb0`T1`\u4e3a\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u5355\u6b21\u67e5\u8be2\u590d\u6742\u5ea6\uff0c`T2`\u4e3a\u6784\u9020\u590d\u6742\u5ea6\n\n\u90a3\u63a5\u4e0b\u6765\u7a9d\u4eec\u53ea\u9700\u8981\u56de\u7b54\u6bcf\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\u5bf9\u8be2\u95ee\u64cd\u4f5c\u7684\u5f71\u54cd\u4e86\n\n\u7b2c\u4e00\u4e2a\u95ee\u9898 **\u64cd\u4f5c1\u5982\u4f55\u5f71\u54cd\u8be2\u95ee**\n\n\u64cd\u4f5c1\u662f\u4e00\u4e2a\u70b9\u6743\u4fee\u6539\n\n\u90a3\u5b83\u60f3\u5f71\u54cd\u4e00\u4e2a\u8be2\u95ee\uff0c\u5fc5\u987b\u662f\u4fee\u6539\u8fd9\u4e2a\u5b50\u6811\u91cc\u7684\u70b9\u6743\n\n\u64cd\u4f5c2\u662f\u4e00\u4e2a\u5efa\u4e00\u4e2a\u65b0\u7684\u5b50\u8282\u70b9\uff0c\u4ed6\u53ea\u9700\u8981\u5728\u8fd9\u68f5\u5b50\u6811\u91cc\u5efa\u7684\u5c31\u4f1a\u5f71\u54cd\u4e86\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u73b0\u5728\u5f97\u5230\u7684\u601d\u8def\u662f\u8fd9\u6837\u7684\n\n\u5148\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u521d\u59cb\u72b6\u6001\uff0c\u63a5\u7740\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff0c\u626b\u4e00\u6b21\u5b83\u524d\u9762\u6240\u6709\u7684\u4fee\u6539\u64cd\u4f5c\uff0c\u5982\u679c\u53d1\u73b0\u80fd\u591f\u5f71\u54cd\u7b54\u6848\uff0c\u90a3\u5c31\u5c06\u7b54\u6848\u6539\u53d8\n\n\u4f46\u8fd9\u6837\u590d\u6742\u5ea6\u662f\u4e0d\u5bf9\u7684\uff0c\u56e0\u4e3a\u8fd9\u548c\u66b4\u529b\u6ca1\u4ec0\u4e48\u533a\u522b\n\n\u8981\u4e0d\u6211\u4eec\u6bcf`T`\u6b21\u64cd\u4f5c\u4e4b\u540e\uff0c\u5c06\u521d\u59cb\u72b6\u6001\u63d0\u524d\u4e00\u6b21\uff1f\n\n\u4f60\u53ef\u80fd\u6ca1\u6709\u7406\u89e3\u8fd9\u53e5\u8bdd\uff0c\u5c31\u662f\u8bf4\u6bcf`T`\u6b21\u64cd\u4f5c\u4e4b\u540e\uff0c\u6211\u4eec\u628a\u6267\u884cT\u6b21\u64cd\u4f5c\u5f97\u5230\u7684\u65b0\u6811\u4f5c\u4e3a\u65b0\u7684\u521d\u59cb\u72b6\u6001\n\n\u6362\u53e5\u8bdd\u6765\u8bf4\uff0c\u6bcf`T`\u6b21\u64cd\u4f5c\uff0c\u91cd\u65b0dfs+\u5efa\u6570\u636e\u7ed3\u6784\u4e00\u6b21\n\n\u8fd9\u4e2a\u65f6\u5019\u4f60\u5c31\u53d1\u73b0\uff0c\u6bcf\u4e00\u6b21\u8be2\u95ee\u5f80\u540e\u9762\u626b\u7684\u4e0d\u662f`M`\u6b21\u4e86\uff0c\u800c\u662f`M/T`\u6b21\n\n\u4f60\u5f88\u806a\u660e\u77e5\u9053`T`\u5e94\u8be5\u53d6 $\\sqrt{M}$\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u8981\u5b9e\u73b0\u7684\u64cd\u4f5c\u53ea\u5269\u4e0b\u4e24\u4e2a\u4e86\n\n1.\u5199\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u80fd\u591f\u7ef4\u62a4\u533a\u95f4rank\uff08\u5c31\u662f\u533a\u95f4$[l,r]$\u6709\u591a\u5c11\u4e2a\u6bd4$c$\u5927\uff09\n\n2.\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u4e00\u4e2a\u5b50\u6811\u4e2d\n\n\u770b\u52301\u7a9d\u4eec\u5c31\u60f3\u5230\u4e3b\u5e2d\u6811\uff0c2\u7684\u8bdd\u56e0\u4e3a\u6709\u4fee\u6539\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u500d\u589e\n\n$O(N * \\log N * \\sqrt{M})$\uff0c\u4f46\u662f\u8fd9\u6837\u4e0d\u662f\u6700\u4f18\u7684\n\n\u74f6\u9888\u5728\u4e8e\u500d\u589e\u4e0e\u4e3b\u5e2d\u6811\u7684\u6784\u9020\u4e0a\n\n\u4e3b\u5e2d\u6811\u6784\u9020\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(N * \\log N)$\uff0c\u4e00\u5171\u8981\u66b4\u529b\u6784\u9020$\\sqrt{M}$\u6b21\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O(N * \\log N * \\sqrt{M})$\n\n\u7531\u4e8e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\u64cd\u4f5c\u6211\u4eec\u90fd\u8981\u5f80\u524d\u626b$\\sqrt{M}$\u4e2a\u4fee\u6539\u5e76\u4e14\u6bcf\u4e2a\u4fee\u6539\u82b1$\\log N$\u7684\u65f6\u95f4\u500d\u589e\uff0c\u6700\u540e\u518d\u52a0\u4e0a\u4e00\u4e2a\u4e3b\u5e2d\u6811$\\log N$\u67e5\u8be2\u3002\n\n\u6bcf\u4e00\u6b21\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u662f$O(\\log N * \\sqrt{M} + \\log N)$\n\n\u603b\u590d\u6742\u5ea6 $O(M * (\\log N * \\sqrt{M} + \\log N))$\n\n\u6781\u5927\u7684\u590d\u6742\u5ea6\u4e0d\u5e73\u8861\u3002\n\n\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u500d\u589e\u5462\uff1f\n\n\u8def\u5f84\u538b\u7f29\u96be\u9053\u5fd8\u4e86\u5417\uff1f\n\n\u5747\u644a\u590d\u6742\u5ea6\u5206\u6790\u96be\u9053\u5fd8\u4e86\u5417\uff1f\n\n\u6211\u4eec\u5c06\u500d\u589e\u6362\u6210\u52a0\u4e86\u8def\u5f84\u538b\u7f29\u7684\u66b4\u529b\uff0c\u518d\u914d\u5408\u4e00\u4e0b\u6b27\u62c9\u5e8f\n\n\u5747\u644a\u5206\u6790\u4e00\u4e0b\u590d\u6742\u5ea6\n\n\u4e0d\u5c31\u6210\u4e86$O(M * \\sqrt{N})$\u4e86\u5417\n\n\u518d\u628a\u4e3b\u5e2d\u6811\u6362\u6210\u4e00\u4e2a\u5757\u5185\u7ef4\u62a4\u6709\u5e8f\u7684\u5206\u5757\uff0c\u6784\u9020\u65f6\u95f4\u4e3a$O(N * \\log{\\sqrt{N}})$\n\n\u603b\u590d\u6742\u5ea6\u4e3a$O(N * \\sqrt{M} * \\log{\\sqrt{N}})$\n\n\u8fd8\u6709\u8bb8\u591a\u5c0f\u7ec6\u8282\uff0c\u53ef\u4ee5\u770b\u770b\u4ee3\u7801\n\n### Part3. Code\n\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<cstring>\nusing namespace std;\n\nconst int MAXN = 60000 + 5;\n\nvector <int> G[MAXN];\n\nint n , m , num , f[MAXN] , sz[MAXN] , val[MAXN] , dfn[MAXN] , tp[MAXN];\nint real_node , all_node;\n\nnamespace DFS{\n    int dfs_clock , st[MAXN] , ed[MAXN];\n    void dfs(int u , int fa) {\n        sz[u] = 1 , f[u] = fa , dfn[u] = num++ , st[u] = ++dfs_clock; \n        for(int i = 0 , v ; i < (int)G[u].size() ; ++i) {\n            if((v = G[u][i]) == fa) continue;\n            dfs(v , u);\n            sz[u] += sz[v];\n        }\n        ed[u] = ++dfs_clock;\n    }\n    inline bool check(int u , int v) { //\u8282\u70b9v\u662f\u5426\u5728\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u4e2d \n        return st[u] <= st[v] && ed[v] <= ed[u];\n    }\n    void rebuild() {\n        num = dfs_clock = 0;\n        dfs(1 , 0);\n    }\n} \n\nnamespace BLOCK{\n    int SIZE , j , cnt , A[MAXN] , b[MAXN] , ord[MAXN / 100][MAXN / 100];\n    void rebuild() {\n        for(int i = 0 ; i < cnt ; ++i) memset(ord[i] , 0 , sizeof ord[i]);\n        memset(ord[cnt] , 0 , sizeof ord[cnt]);\n        SIZE = (int)sqrt(all_node + 0.5);\n        j = 0 , cnt = 0;\n        for(int i = 1 ; i <= all_node ; ++i) A[dfn[i]] = val[i];\n        for(int i = 0 ; i < all_node ; ++i) {\n            if(j == SIZE) j = 0 , ++cnt; \n            ord[cnt][j] = A[i] , b[i] = cnt;\n            ++j;\n        }\n        for(int i = 0 ; i < cnt ; ++i) sort(ord[i] , ord[i] + SIZE);\n        sort(ord[cnt] , ord[cnt] + j);\n    }\n    int query(int l , int r , int c) {\n        int lb = b[l] , rb = b[r] , res = 0;\n        if(lb == rb) {\n            for(int i = l ; i <= r ; ++i) if(A[i] > c) ++res;\n            return res;\n        }\n        for(int i = l ; i < (lb + 1) * SIZE ; ++i) if(A[i] > c) ++res;\n        for(int i = rb * SIZE ; i <= r ; ++i) if(A[i] > c) ++res;\n        for(int i = lb + 1 ; i < rb ; ++i) res += ord[i] + SIZE - upper_bound(ord[i] , ord[i] + SIZE , c);\n        return res;\n    }\n}\n\nstruct Node{\n    int opt , u , x , lst;\n    Node(int opt = 0 , int u = 0 , int x = 0 , int lst = 0) : opt(opt) , u(u) , x(x) , lst(lst) {}\n};\nvector <Node> v;\n\ninline int real(int u) {return u <= real_node;} \ninline int Get(int v) {\n    if(real(f[v])) return f[v];\n    return tp[v] = Get(f[v]);\n}\ninline bool check(int u , int v) {\n    if(real(u) ^ real(v)) {\n        if(real(v) == 1) return false;\n        if(!tp[v]) tp[v] = Get(v);\n        return DFS::check(u , tp[v]);\n    }\n    else {\n        if(real(u) == 1) return DFS::check(u , v);\n        while(!real(f[v])) {\n            if(v == u) return true;\n            v = f[v];\n        }\n        return v == u;\n    }\n}\n\nint main() {\n    int last_ans = 0;\n    scanf(\"%d\" , &n);\n    for(int i = 1 , u , vv ; i < n ; ++i) {\n        scanf(\"%d %d\" , &u , &vv);\n        G[u].push_back(vv); G[vv].push_back(u);\n    }\n    for(int i = 1 ; i <= n ; ++i) scanf(\"%d\" , val + i);\n    real_node = all_node = n;\n    DFS::rebuild();\n    BLOCK::rebuild();\n    scanf(\"%d\" , &m);int SIZE = (int)sqrt(m + 0.5) + 1 , j = 0;\n    while(m--) {\n        int opt , u , x;\n        scanf(\"%d %d %d\" , &opt , &u , &x);\n        if(j == SIZE) {\n            memset(tp , 0 , sizeof tp);\n            for(int i = 0 ; i < (int)v.size() ; ++i) \n                if(v[i].opt == 2) G[v[i].lst].push_back(++real_node);\n            DFS::rebuild(); BLOCK::rebuild();\n            v.clear();\n            j = 0;\n        }\n        u ^= last_ans , x ^= last_ans;\n        if(opt == 0) {\n            int ans = BLOCK::query(dfn[u] , dfn[u] + sz[u] - 1 , x);\n            for(int i = 0 ; i < (int)v.size() ; ++i) {\n                if(check(u , v[i].u)) {\n                    if(v[i].opt == 1) {\n                        if(v[i].lst > x && v[i].x <= x) --ans;\n                        if(v[i].lst <= x && v[i].x > x) ++ans;\n                    }\n                    if(v[i].opt == 2)\n                        ans += v[i].x > x;\n                }\n            }\n            printf(\"%d\\n\" ,\tlast_ans = ans); \n        }\n        else if(opt == 1) {\n            v.push_back(Node(opt , u , x , val[u]));\n            val[u] = x;\n        }\n        else {\n            v.push_back(Node(opt , ++all_node , x , u));\n            val[all_node] = x; f[all_node] = u;\n        }\n        ++j;\n    }\n    return 0;\n} \n```",
        "postTime": 1550214493,
        "uid": 55537,
        "name": "Parabola",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2137 \u3010Gty\u7684\u59b9\u5b50\u6811\u3011"
    },
    {
        "content": "### \u6b63\u786e\u7684\u6811\u5206\u5757\u505a\u6cd5\n\u8fd9\u662f\u4e00\u79cd\u672c\u9898\u5bf9\u6240\u6709\u6811\u90fd\u9002\u7528\u7684\u6811\u5206\u5757\u505a\u6cd5\u3002\n___\n### \u524d\u7f6e\uff1a\u4f18\u5316\u601d\u8def\n\u6811\u5206\u5757\u7684\u74f6\u9888\u5728\u4e8e\uff0c\u5f53\u6811\u4e3a\u83ca\u82b1\u56fe\u65f6\uff0c\u8bbf\u95ee\u7684\u8054\u901a\u5757\u6bd4\u8f83\u591a\u3002\u672c\u8d28\u4e0a\u8bf4\uff0c\u5355\u6b21\u8be2\u95ee\u8bbf\u95ee\u4e86\u8bb8\u591a\u8fb9\uff0c\u4e2a\u6570\u4e3a$O(n)$\u3002\n\n\u6240\u4ee5\u60f3\u529e\u6cd5\u4f7f\u5f97\u4e0d\u518d\u8bbf\u95ee\u90a3\u4e48\u591a\u8fb9\u3002\n### \u6b63\u9898\uff1a\u505a\u6cd5\n\u6211\u4eec\u5bf9\u539f\u6811\u8fdb\u884c\u5206\u5757\uff0c\u4e00\u5b9a\u8981\u4fdd\u8bc1\u662f\u5757\u5185\u8fde\u901a\uff0c\u8bbe\u5757\u7684\u5927\u5c0f\u4e3a$O(S)$\u3002\n\n\u6211\u4eec\u518d\u5efa\u4e00\u68f5\u6811\uff0c\u8fd9\u68f5\u6811\u662f\u539f\u6811\u8fb9\u96c6\u4e3a\u539f\u8fb9\u96c6\u53bb\u6389\u8fde\u63a5\u5757\u4e0e\u5757\u4e4b\u95f4\u7684\u8fb9\uff0c\u5269\u4e0b\u7684\u8fb9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u539f\u6811\u5f62\u6210\u4e86\u68ee\u6797\uff0c\u6bcf\u4e00\u68f5\u6811\u5c31\u662f\u4e00\u4e2a\u5757\u3002\u6211\u4eec\u53ef\u4ee5\u53eb\u5b83\u201c\u5757\u68ee\u6797\u201d\u3002\n\n\u6211\u4eec\u5b9a\u4e49\u8fde\u63a5\u5757\u4e0e\u5757\u4e4b\u95f4\u7684\u8fb9\u79f0\u4e3a**\u865a\u8fb9**\uff0c\u5757\u5185\u7684\u8fb9\u79f0\u4e3a**\u5b9e\u8fb9**\u3002\u4ee51\u4e3a\u6839\u540e\uff0c\u539f\u6811\u5c31\u6709\u4e86\u7236\u5b50\u5173\u7cfb\u3002\u5b9a\u4e49\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u513f\u5b50\u4e0e\u5176\u4e4b\u95f4\u7684\u8fb9\u4e3a\u865a\u8fb9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u513f\u5b50\u53eb**\u865a\u513f\u5b50**\uff0c\u5426\u5219\u53eb**\u5b9e\u513f\u5b50**\u3002\u5c31\u50cf\u8fd9\u6837\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/t99i4gs0.png)\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5728\u6bcf\u4e2a\u70b9$x$\u90fd\u6302\u4e00\u4e2a\u53ef\u91cd\u96c6\u5408$Set(x)$\u3002\u96c6\u5408\u5185\u4fdd\u5b58\u7684\u662f\u8be5\u70b9**\u6240\u6709\u865a\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u6743\u503c**\u3002\n\n- \u5bf9\u4e8e\u70b91\uff0c$Set(1)=\\{value[7]\\}$.\n- \u5bf9\u4e8e\u70b92\uff0c$Set(2)=\\{value[4],value[5],value[6]\\}$.\n\n\u6211\u4eec\u5b9a\u4e49$fa[x]$\u8868\u793ax\u7684\u539f\u6811\u7684\u7236\u4eb2\u8282\u70b9\uff0c$top[x]$\u8868\u793ax\u6240\u5728\u5757\u5185\u7684\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\uff08\u663e\u7136\u552f\u4e00\uff09\u3002$size[x]$\u8868\u793a\u7f16\u53f7\u4e3ax\u7684\u8282\u70b9\u6240\u5728\u5757\u7684\u8282\u70b9\u6570\u91cf\u3002\u6211\u4eec\u63a5\u4e0b\u6765\u8981\u9891\u7e41\u7528\u5230\u5b83\u4eec\u3002\n\n\u81f3\u4e8e\u5206\u5757\u7684\u65b9\u5f0f\uff0c\u6211\u4f7f\u7528\u7684\u662fbfs\u5206\u5757\uff08\u8bc1\u660e\u5904\u4ecb\u7ecd\uff09\uff0c\u5c1a\u4e0d\u660e\u786e\u662f\u5426\u6240\u6709\u5757\u5185\u8054\u901a\u5f0f\u5206\u5757\u5747\u80fd\u4fdd\u8bc1\u590d\u6742\u5ea6\u3002\n\n**\u81f3\u6b64\uff0c\u6570\u636e\u7ed3\u6784\u90e8\u5206\u5b8c\u7ed3\uff0c\u4e0b\u9762\u5f00\u59cb\u8bb2\u5177\u4f53\u8981\u5982\u4f55\u64cd\u4f5c\u3002**\n\n\u6ce8\uff1a\u5757\u7684\u5927\u5c0f\u4e3aS\uff0c\u8bfb\u5165u\uff0cx\u3002\n- \u64cd\u4f5c2\uff1a\u52a0\u5165\u4e00\u4e2a\u8282\u70b9u\uff0c\u4ee4\u5176\u6743\u503c\u4e3ax\n\n\u5982\u679c$fa[u]$\u7684\u5757\u7684\u5927\u5c0f$size[fa[u]]\\leq S-1$,\u90a3\u4e48\u6211\u4eec\u5c06u\u5e76\u5165$fa[u]$\u6240\u5728\u7684\u5757.\u5982\u679c$fa[u]$\u7684\u5757\u7684\u5927\u5c0f$size[fa[u]]= S$,\u90a3\u4e48\u6211\u4eec\u5c06u\u5355\u72ec\u5206\u4e00\u5757.\u8fd9\u5f88\u663e\u7136,\u5c31\u662f\u666e\u901a\u6811\u5206\u5757\u7684\u65b9\u6cd5.\n\n\u5f97\u5230\u65b0\u8282\u70b9\u7684\u5757\u5f52\u5c5e\u4e4b\u540e\uff0c\u63a5\u4e0b\u6765\u662f\u8fd9\u6bb5\u64cd\u4f5c\uff0c\u4e5f\u662f\u6700\u4e3a\u5173\u952e\u7684\u64cd\u4f5c\uff0c\u8bf7\u8bfb\u8005\u4ed4\u7ec6\u7406\u89e3\u3002\n```cpp\nint data=value[u];\nwhile (true) {\n\tu=fa[top[u]];\n\tif (u) set[u].insert(data);\n\telse break;\n}\n```\n\u5b83\u8868\u793a\u7684\u610f\u601d\u662f\uff0c\u5bf9\u4e8eu\uff0c\u5176\u5230\u6839\u8def\u5f84\u4e0a\u4f1a\u7ecf\u8fc7\u4e00\u4e9b\u5757\u7684\u5185\u90e8\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7ecf\u8fc7\u7684\u5757\uff0c\u6211\u4eec\u5c06\u5b83\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\u6df1\u5ea6\u6700\u6df1\u7684\u8282\u70b9\u6240\u5728\u7684\u53ef\u91cd\u96c6\u5408\u4e2d\u63d2\u5165u\u7684\u6743\u503c\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/e8ohn3i9.png)\n\n\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f\u5373\u5c06\u5448\u73b0\u3002\n\n- \u64cd\u4f5c0\uff1a\u8be2\u95ee\u8282\u70b9u\u5b50\u6811\u5185\u6743\u503c\u5927\u4e8ex\u7684\u8282\u70b9\u4e2a\u6570\n\n\u6211\u4eec\u904d\u5386**u\u6240\u5728\u7684\u5757\u5185\u4e14\u5728u\u5b50\u6811\u5185\u7684\u70b9**\u3002\u5bf9\u4e8e\u904d\u5386\u5230\u7684\u6bcf\u4e00\u4e2a\u70b9v\uff0c\u6211\u4eec\u5728v\u7684\u53ef\u91cd\u96c6\u5408\u5185\uff08\u4e5f\u5c31\u662f\u4e00\u9897\u5e73\u8861\u6811\u4e2d\uff09\u67e5\u5230\u6743\u503c\u5927\u4e8ex\u7684\u8282\u70b9\u4e2a\u6570\uff0c\u518d\u6839\u636ev\u81ea\u8eab\u7684\u6743\u503c\u662f\u5426\u5927\u4e8ex\u51b3\u5b9a\u7b54\u6848\u8981\u4e0d\u8981\u518d\u52a0\u4e0a1\u3002\u5bf9\u4e8e\u904d\u5386\u5230\u7684\u6bcf\u4e00\u4e2a\u70b9\u5229\u7528\u4e0a\u53e5\u65b9\u6cd5\u7b97\u51fa\u7684\u7b54\u6848\u6c42\u548c\u5373\u4e3a\u64cd\u4f5c\uff080\uff0cu\uff0cx\uff09\u7684\u7b54\u6848\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/wp3i0c20.png)\n\n\u6211\u4eec\u5148\u524d\u5b9a\u4e49\u8fc7\uff1a\n\n>\u6211\u4eec\u5728\u6bcf\u4e2a\u70b9$x$\u90fd\u6302\u4e00\u4e2a\u53ef\u91cd\u96c6\u5408$Set(x)$\u3002\u96c6\u5408\u5185\u4fdd\u5b58\u7684\u662f\u8be5\u70b9**\u6240\u6709\u865a\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684\u6743\u503c**\u3002\n\n\u662f\u4e0d\u662f\u4e00\u76ee\u4e86\u7136\u4e86\uff1f\u6211\u4eec\u4e0d\u518d\u9700\u8981\u53bb\u626b\u63cf\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u865a\u5b50\u6811\uff0c\u800c\u662f\u5728\u539f\u6811\u57fa\u7840\u4e0a\u65b0\u5efa\u7684\u201c\u5757\u68ee\u6797\u201d\u4e2d\u7684\u90a3\u68f5\u5757\u6811\u4e0adfs\u7edf\u8ba1\u7b54\u6848\u3002\n\n- \u64cd\u4f5c1\uff1a\u4fee\u6539\u6743\u503c\n\n\u8054\u60f3\u521a\u624d\u7684\u64cd\u4f5c2\uff0c\u8fd9\u91cc\u4f1a\u53d8\u5f97\u5341\u5206\u7b80\u5355\u3002\n```cpp\n//\u64cd\u4f5c(1,u,x)\nint data=value[u];\nwhile (true) {\n\tu=fa[top[u]];\n\tif (u) set[u].delete(data),set[u].insert(x);\n\telse break;\n}\n```\n\u505a\u5b8c\u4e86\u3002\n\n### \u6700\u4e3a\u91cd\u8981\u7684\u90e8\u5206\uff1a\u65f6\u7a7a\u590d\u6742\u5ea6\u4e0e\u8bc1\u660e\n\u8bbe\u5757\u7684\u5927\u5c0f\u4e3a$S$\u4e14\u59cb\u7ec8\u4e3a\u5b9a\u503c\uff0c\u8282\u70b9\u603b\u6570$n$\u53ef\u80fd\u968f\u7740\u64cd\u4f5c\u800c\u53d8\u5316\uff0c\u4f46\u662f\u5b9a\u683c\u5728\u6bcf\u4e2a\u65f6\u523b$n$\u80af\u5b9a\u662f\u4e0d\u53d8\u7684\u3002\n\n- \u201cbfs\u201d\u5206\u5757\n\n\n\u6211\u81ea\u5df1\u53e3\u80e1\u7684\u65b9\u6cd5\u548c\u540d\u5b57\uff0c\u672a\u4e0a\u7f51\u8003\u8bc1\u662f\u5426\u5df2\u51fa\u73b0\u8fc7\u3002\n\u5177\u4f53\u662f\u8fd9\u6837\u505a\uff1a\u6211\u4eec\u5148\u4ece\u4e00\u68f5\u6811\u7684\u6839\u5f00\u59cbbfs\uff0c\u9009\u524d$S$\u4e2a\u70b9\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u5220\u6389\uff0c\u8fd9\u68f5\u6811\u6811\u88c2\u53d8\u6210\u68ee\u6797\u3002\u518d\u5bf9\u68ee\u6797\u4ece\u6bcf\u4e00\u9897\u6811\u7684\u6839\u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c\u3002\n\n- \u5f15\u74061\uff1abfs\u5206\u5757\u540e\uff0c\u5bf9\u4e8e\u4e00\u6761\u865a\u8fb9\uff0c\u5176\u4e0a\u7aef\u7236\u4eb2\u8282\u70b9\u6240\u5728\u7684\u5757\u5927\u5c0f\u5fc5\u4e3a$S$\u3002\n\n\u6839\u636e\u521a\u624d\u7684\u5206\u5757\u65b9\u5f0f\uff0c\u5047\u8bbe\u865a\u8fb9\u4e0a\u7aef\u7236\u4eb2\u8282\u70b9\u6240\u5728\u5757\u7684\u5927\u5c0f\u5c0f\u4e8e$S$\uff0c\u90a3\u4e48\u8fd9\u6761\u865a\u8fb9\u4e0b\u7aef\u513f\u5b50\u8282\u70b9\u5b9a\u7136\u4f1a\u5728\u521d\u59cb\u5206\u5757\u65f6\u6216\u64cd\u4f5c\u8fdb\u884c\u65f6\u5206\u7ed9\u5176\u7236\u4eb2\u6240\u5728\u7684\u5757\uff0c\u6545\u8fd9\u6761\u8fb9\u662f\u5b9e\u8fb9\uff0c\u4e0e\u5047\u8bbe\u4e0d\u7b26\u3002\n\n- \u5b9a\u74061\uff1abfs\u5206\u5757\u540e\uff0c\u64cd\u4f5c1\u4e0e\u64cd\u4f5c2\u7684while\u5faa\u73af\u6b21\u6570\u4e0d\u8d85\u8fc7$\\left\\lfloor\\dfrac{n}{S}\\right\\rfloor$\u3002\n\n\u8fd9\u4e5f\u8bb8\u662f\u4e00\u4e2a\u91cd\u8981\u6027\u8d28\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u867d\u7136\u65e0\u6cd5\u4fdd\u8bc1\u5757\u7684\u603b\u6570\u4e3a$O(\\frac{n}{S})$\uff0c\u4f46\u662f\u53ef\u4ee5\u4fdd\u8bc1\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u4ec5\u4ec5\u4f1a\u7ecf\u8fc7\u6700\u591a$\\left\\lceil\\dfrac{n}{S}\\right\\rceil$\u4e2a\u5757\uff0c\u5176\u4e2d\u5f53\u524d\u8282\u70b9$x$\u6240\u5728\u7684\u5757\u5927\u5c0f\u4e3a$0\\lt size[x] \\leq S$\uff0c\u5176\u4f59\u7684\u5757\u7684\u5927\u5c0f\u4e3a$S$\u3002\n\n\u8bc1\u660e\u5982\u4e0b\uff1a\u5047\u8bbe\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5176\u5230\u6839\u8def\u5f84\u4e0a\u5b58\u5728\u5757\u7684\u6570\u91cf$M\\geq \\left\\lceil\\dfrac{n}{S}\\right\\rceil+1$\uff0c\u5219\u5b58\u5728\u865a\u8fb9\u6761\u6570\u81f3\u5c11\u4e3a$\\left\\lceil\\dfrac{n}{S}\\right\\rceil$\u3002\u6839\u636e\u5f15\u74061\uff0c\u81f3\u5c11\u5b58\u5728$\\left\\lceil\\dfrac{n}{S}\\right\\rceil$\u4e2a\u5927\u5c0f\u4e3aS\u7684\u5757\u3002\u53bb\u6389\u8fd9$\\left\\lceil\\dfrac{n}{S}\\right\\rceil$\u4e2a\u5927\u5c0f\u4e3aS\u7684\u5757\uff0c\u5269\u4f59\u5757\u6570$M - \\left\\lceil\\dfrac{n}{S}\\right\\rceil \\geq 1$,\u5219\u5269\u4f59\u7684\u8282\u70b9\u603b\u6570$X\\gt 0$\u3002\u5219\u6b64\u65f6\u81f3\u5c11\u5b58\u5728$\\left\\lceil\\dfrac{n}{S}\\right\\rceil\\times S+X \\geq n+X \\gt n$\u4e2a\u8282\u70b9\u3002\u800c\u6b64\u65f6\u8282\u70b9\u6570\u91cf\u5148\u524d\u88ab\u8bbe\u4e3a$n$\uff0c\u6545\u5047\u8bbe\u4e0d\u6210\u7acb\u3002\u518d\u6839\u636e\u4ee3\u7801\uff0c\u5faa\u73af\u6b21\u6570\u4e3a$M-1\\leq\\left\\lceil\\dfrac{n}{S}\\right\\rceil-1 \\leq \\left\\lfloor\\dfrac{n}{S}\\right\\rfloor$\uff0c\u6240\u4ee5\u5373\u5b9a\u74061\u6210\u7acb\u3002\n\n- \u5b9a\u74062\uff1a\u8bbe\u672c\u9898\u7684\u8282\u70b9\u603b\u6570\u4e3a$N=O(n+m)$\uff0c\u672c\u9898\u53ef\u4ee5\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(N\\sqrt{N}\\;logN)$\u4ee5\u53ca\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a$O(N\\sqrt{N})$\u4e0b\u5b8c\u6210\u3002\n\n\u8bc1\u660e\uff1a\u9996\u5148\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u6839\u636e\u5b9a\u74061\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\u4f1a\u88ab\u63d2\u5165$O(\\dfrac{N}{S})$\u6b21\uff0c\u63d2\u5165\u53ca\u67e5\u8be2\u533a\u95f4\u5185\u6743\u503c\u4e2a\u6570\u53ef\u7528\u5e73\u8861\u6811\u5b9e\u73b0\u3002\u5355\u6b21\u8be2\u95ee\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(SlogN)$\uff0c\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(\\dfrac{N}{S}logN)$\u3002\n\n\u7136\u540e\u662f\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\u7531\u4e8e\u63d2\u5165$O(\\dfrac{N}{S})$\u6b21\uff0c\u5e73\u8861\u6811\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a$O(N)$\uff0c\u6545\u7a7a\u95f4\u590d\u6742\u5ea6$O(\\dfrac{N^2}{S})$\u3002\n\n\u5f53\u53d6$S=\\sqrt{N}$\u65f6\uff0c\u5b9a\u74062\u6210\u7acb\u3002\n___\n**\u603b\u7ed3**\n\n\u300aGty\u7684\u59b9\u5b50\u6811\u300b\u4e2d\uff0c\u666e\u901a\u7684\u6811\u5206\u5757\u7b97\u6cd5\u5df2\u7ecf\u57fa\u672c\u88ab\u5ba3\u544a\u5b8c\u86cb\u3002\u4f46\u662f\u6211\u4eec\u5982\u679c\u5c1d\u8bd5\u4f18\u5316\u5176\u77ed\u5904\uff0c\u5e76\u5c1d\u8bd5\u7ee7\u7eed\u62a2\u6551\uff0c\u4e5f\u8bb8\u4f1a\u53d1\u73b0\u8bb8\u591a\u65b0\u7684\u9053\u7406\u4e0e\u601d\u8def\u3002\n\n\u65b0\u4eba\u7b2c\u4e00\u6b21\u5199\u8bc1\u660e\uff0c\u6709\u95ee\u9898\u8fd8\u8bf7\u5927\u5bb6\u6307\u51fa\u3002\u7279\u522b\u9e23\u8c22[\u53cc\u7ba1\u8367\u5149\u706f](https://www.luogu.com.cn/user/13185)WCAu\u5de8\u4f6c\u63d0\u4f9b\u5b9a\u74061\u7684\u8bc1\u660e\u601d\u8def\u7684\u65b9\u5411\u3002\u5e0c\u671b\u6709\u5927\u4f6c\u80fd\u591f\u7ed9\u51fa\u4efb\u610f\u7684\u5757\u5185\u8054\u901a\u5f0f\u6811\u5206\u5757\u80fd\u5426\u4fdd\u8bc1\u590d\u6742\u5ea6\u7684\u5224\u65ad\u548c\u8bc1\u660e\u3002\n\n~~[\u4ee3\u7801\u5462\uff1f\uff1f\uff1f](https://www.cnblogs.com/Algebra-hy/p/12177281.html)~~",
        "postTime": 1578648613,
        "uid": 34907,
        "name": "Hygebra",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2137 \u3010Gty\u7684\u59b9\u5b50\u6811\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7ec6\u8282\u5de8\u591a\uff0c\u7136\u800c\u6570\u636e\u5f88\u9b54\u6027\uff08\u51e0\u4e2a\u6700\u5927\u7684\u70b9\u6ca1\u67091,2\u64cd\u4f5c\uff09\uff0c\u5bfc\u81f4\u4e3b\u5e2d\u6811+\u66b4\u529b\u80fd\u8fc7\uff0c\u5e0c\u671b\u6709\u5927\u4f6c\u5427\u6570\u636e\u591a\u9020\u51e0\u4e2a\u2026\u2026\n\n\u4e0d\u5f97\u4e0d\u8bf4\u8fd9\u9053\u9898\u8fd8\u662f\u633a\u7ecf\u5178\u7684\u3002\n\n\u9996\u5148\uff0c\u4e0d\u8003\u86511,2\u64cd\u4f5c\uff0c\u5982\u679c\u53ea\u6709\u8be2\u95ee\u7684\u8bdd\uff0c\u8fd9\u9053\u9898\u5c31\u662f\u4e00\u4e2a\u5341\u5206simple\u7684dfs\u5e8f\u4e3b\u5e2d\u6811\u3002\n\n\u5982\u679c\u60a8\u65e0\u6cd5\u5b8c\u6210\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u5efa\u8bae\u770b\u770b\u8fd9\u4e24\u9053\u9898\uff1a\n\n[P3834 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u4e3b\u5e2d\u6811\uff09](https://www.luogu.org/problemnew/show/P3834)\n\n[P2633 Count on a tree](https://www.luogu.org/problemnew/show/P2633)\n\n\u63a5\u4e0b\u6765\u8003\u8651\u52a0\u4e0a\u64cd\u4f5c1,2\uff0c\u4e00\u4e2a\u5f88naive\u7684\u60f3\u6cd5\u5c31\u662f\uff1a\u6bcf\u6b21\u66b4\u529b\u91cd\u6784\u4e3b\u5e2d\u6811\u3002\n\n\u4f46\u8fd9\u6837\u80af\u5b9a\u4e0d\u5212\u7b97\uff0c\u6211\u4eec\u8003\u8651\u628a\u4e00\u4e9b\u64cd\u4f5c\u6682\u5b58\u8d77\u6765\uff0c\u5148\u4e0d\u91cd\u6784\u3002\n\n\u4f46\u95ee\u9898\u5728\u4e8e\u6211\u4eec\u8fd8\u5f97\u56de\u7b54\u8be2\u95ee\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u8fd9\u4e9b\u4fee\u6539\u5bf9\u8be2\u95ee\u7684\u8d21\u732e\uff08\u81f3\u4e8e\u600e\u4e48\u7b97\u8bf7\u89c1\u4ee3\u7801\uff09\u3002\n\n\u5177\u4f53\u65b9\u6cd5\u662f\uff1a\u5148\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6743\u503c\u9650\u5236\uff0c\u518d\u5224\u65ad\u662f\u5426\u5728\u5b50\u6811\u5185\u3002\n\n\u5982\u679c\u79ef\u538b\u7684\u4fee\u6539\u8fc7\u591a\u5219\u91cd\u6784\u3002\n\n\u8bf4\u8d77\u6765\u7b80\u5355\uff0c\u5199\u8d77\u6765\u8fd8\u662f\u6709\u5f88\u591a\u7ec6\u8282\uff1a\n\n- \u4e3a\u4e86\u5361\u5e38\u6570\u91c7\u7528\u4e86\u79bb\u6563\u5316\uff0c\u8981\u5206\u6e05\u79bb\u6563\u5316\u524d\u540e\u7684\u503c\u3002\n\n- \u8be5\u6e05\u96f6\u7684\u522b\u5fd8\u8bb0\n\n- \u53ef\u80fd\u4fee\u6539\u8fd8\u5728\u79ef\u538b\u4e2d\u7684\u65b0\u8282\u70b9\u7684\u503c\n\n- \u540c\u4e00\u4e2a\u8282\u70b9\u4fee\u6539\u4e24\u6b21\n\n\u603b\u7684\u6765\u8bf4\uff0c\u8fd9\u9053\u9898\u56ca\u62ec\u4e86{\u65f6\u95f4\u5206\u5757\u601d\u60f3\uff0cdfs\u5e8f\uff0c\u4e3b\u5e2d\u6811\uff0c\u500d\u589e\u6c42\u7236}\u7b49\u77e5\u8bc6\uff0c\u8fd8\u662f\u52c9\u5f3a\u7b97\u4f5c\u7801\u519c\u9898\u2026\u2026\n\n~~\u7801\u98ce\u6781\u7aef\u4e0d\u826f\uff0c\u4ee3\u7801\u4ec5\u4f9b\u53c2\u8003~~\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#define MaxN 60500\nusing namespace std;\ninline int read()\n{\n  register int X=0;\n  register char ch=0;\n  while(ch<48||ch>57)ch=getchar();\n  while(ch>=48&&ch<=57)X=X*10+(ch^48),ch=getchar();\n  return X;\n}\nint n,m,w[MaxN];\nvector<int> g[MaxN];\nstruct Node\n{int l,r,c;}a[MaxN*20];\nint tn,to,rt[MaxN];\ninline void up(int num)\n{a[num].c=a[a[num].l].c+a[a[num].r].c;}\nvoid add(int l,int r,int num)\n{\n  if(l==r){a[++tn].c=a[num].c+1;return ;}\n  int mid=(l+r)>>1;\n  if (to<=mid){\n    add(l,mid,a[num].l);\n    tn++;a[tn].r=a[num].r;a[tn].l=tn-1;\n  }else {\n    add(mid+1,r,a[num].r);\n    tn++;a[tn].l=a[num].l;a[tn].r=tn-1;\n  }up(tn);\n}\nint wfl;\nint query(int l,int r,int num1,int num2)\n{\n  if (wfl<=l)return a[num2].c-a[num1].c;\n  int mid=(l+r)>>1;\n  if (wfl<=mid)\n   return a[a[num2].r].c-a[a[num1].r].c\n         +query(l,mid,a[num1].l,a[num2].l);\n  return query(mid+1,r,a[num1].r,a[num2].r);\n}\nint in[MaxN],out[MaxN],tim,b[MaxN];\nint dis[MaxN],f[MaxN][17];\nvoid dfs(int num,int fa)\n{\n  f[num][0]=fa;\n  for (int j=1;j<=15;j++)\n   f[num][j]=f[f[num][j-1]][j-1];\n  b[in[num]=++tim]=w[num];\n  for (int i=0;i<g[num].size();i++)\n   if (g[num][i]!=fa){\n   \t dis[g[num][i]]=dis[num]+1;\n     dfs(g[num][i],num);\n   }\n  out[num]=tim;\n}\nstruct Data\n{int pos,x;}\nt[MaxN];\nint lastn,tot;\nint xx[MaxN];\nvoid build()\n{\n  for (int i=1;i<=lastn;i++)w[i]=xx[w[i]];\n  //\u8fd9\u91cc\u8981\u8fd8\u539f \n  for (int i=1;i<=tot;i++)\n   w[t[i].pos]=t[i].x;\n  tot=0;\n  for (int i=1;i<=n;i++)xx[i]=w[i];\n  sort(xx+1,xx+n+1);\n  for (int i=1;i<=n;i++)\n   w[i]=lower_bound(xx+1,xx+n+1,w[i])-xx;\n  for (int i=1;i<=tn;i++)\n    a[i]=(Node){0,0,0};\n  tn=tim=0;//\u8be5\u6e05\u96f6\u7684\u522b\u5fd8\u8bb0 \n  dfs(1,0);\n  for (int i=1;i<=n;i++)\n   {to=b[i];add(1,n,rt[i-1]);rt[i]=tn;}\n  lastn=n;\n}\nbool snt(int x,int y)\n{\n  int dep=dis[y]-dis[x];\n  if (dep<0)return 0;\n  int k=15;\n  while(k>-1){\n  \twhile(dep>=(1<<k)){\n      dep-=(1<<k);\n      y=f[y][k];\n  \t}k--;\n  }return y==x;\n}\nint lastans;\nint main()\n{\n  n=read();\n  xx[0]=0;dis[0]=-1;\n  for (int i=1,f,t;i<n;i++){\n  \tf=read();t=read();\n  \tg[f].push_back(t);\n    g[t].push_back(f);\n  }for (int i=1;i<=n;i++)w[i]=read();\n  build();\n  m=read();\n  for (int i=1,u,x,op;i<=m;i++){\n  \top=read();u=read()^lastans;x=read()^lastans;\n  \tif (op==0){\n  \t  int ans=0;\n  \t  wfl=upper_bound(xx,xx+lastn+1,x)-xx;\n  \t  if (u<=lastn)\n        ans=query(1,lastn,rt[in[u]-1],rt[out[u]]);\n  \t  for (int i=lastn+1;i<=n;i++)\n  \t    if (w[i]>x&&snt(u,i))ans++;\n\t  for (int i=1,p;i<=tot;i++){\n  \t  \tp=t[i].pos;\n  \t  \tif (in[u]<=in[p]&&out[p]<=out[u])\n  \t  \t  if (t[i].x<=x&&w[p]>=wfl)ans--;\n  \t  \t  else if (t[i].x>x&&w[p]<wfl)ans++;\n  \t  \t  //\u6ce8\u610f\u8fd9\u91cc\u7684wfl \n  \t  }printf(\"%d\\n\",lastans=ans);\n  \t}if (op==1){\n  \t  if (u>lastn)w[u]=x;//\u8fd9\u91cc\u8981\u6ce8\u610f \n  \t  else {\n  \t  \tbool flag=0;\n\t\tfor (int j=1;j<=tot;j++)\n  \t  \t if (t[j].pos==u)\n  \t  \t  {t[j].x=x;flag=1;break;}\n  \t  \t//\u8fd9\u91cc\u4e5f\u8981\u6ce8\u610f \n  \t    if (!flag)t[++tot]=(Data){u,x};\n  \t  }\n  \t}if (op==2){\n  \t  g[u].push_back(++n);\n      g[n].push_back(u);\n  \t  f[n][0]=u;\n      for (int j=1;j<=15;j++)\n        f[n][j]=f[f[n][j-1]][j-1];\n      w[n]=x;\n      dis[n]=dis[u]+1;\n  \t}if (tot+(n-lastn)*20>=10000)build();\n  }return 0;\n}\n```",
        "postTime": 1554987037,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2137 \u3010Gty\u7684\u59b9\u5b50\u6811\u3011"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u8fd9\u9053\u9898\u6ca1\u6709\u9898\u89e3\u554a\uff0c\u90a3\u4e0d\u5982\u6211\u6765\u8d21\u732e\u4e00\u53d1\u5427\u3002\n\n\u505a\u5b8c\u4e4b\u540e\u53bb\u7f51\u4e0a\u641c\u4e86\u4e00\u4e0b\u5176\u5b83\u505a\u6cd5\uff0c\u53d1\u73b0\u5c45\u7136\u8981\u6811\u5206\u5757\uff0c\u8fd9\u4e0d\u662f\u8d85\u9ebb\u70e6\u7684\u5417\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u53e6\u4e00\u79cd\u5206\u5757\u65b9\u6cd5\uff1a\u5bf9**\u65f6\u95f4**\u5206\u5757\u3002\n\n\u5bf9\u65f6\u95f4\u5206\u6cbb\u662f\u9700\u8981\u79bb\u7ebf\u7684\uff0c\u4f46\u662f\u5bf9\u65f6\u95f4\u5206\u5757\u662f\u53ef\u4ee5\u5728\u7ebf\u7684\u3002\n\n\u6211\u4eec\u5148\u53ef\u4ee5\u8003\u8651\u9759\u6001\u7684\u60c5\u51b5\uff0c\u5982\u679c\u8fd9\u9053\u9898\u662f\u9759\u6001\u7684\u8be2\u95ee\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u6839\u636edfs\u5e8f\u5217\u5efa\u4e00\u68f5\u5f52\u5e76\u6811(\u7ebf\u6bb5\u6811\u7684\u4e00\u79cd\uff0c\u6bcf\u4e2a\u8282\u70b9\u4fdd\u5b58\u8fd9\u4e2a\u533a\u95f4\u7684\u6743\u503c\u6392\u5e8f\u8fc7\u4ee5\u540e\u7684\u5e8f\u5217)\uff0c\u518d\u8fdb\u884c\u533a\u95f4\u67e5\u8be2\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u90a3\u4e48\u5982\u679c\u5728\u67e5\u8be2\u4e4b\u524d\u8fdb\u884c\u8fc7\u82e5\u5e72\u6b21\u4fee\u6539\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u626b\u63cf\u4e00\u904d\u8fd9\u4e9b\u4fee\u6539\uff0c\u5bf9\u67e5\u8be2\u7684\u7b54\u6848\u8ba1\u7b97\u8d21\u732e\u3002\u5206\u4e24\u79cd\u4fee\u6539\u8ba8\u8bba\uff1a\n\n\u5982\u679c\u662f\u4fee\u6539\u70b9\u6743\uff0c\u6211\u4eec\u53ea\u8981\u5148\u67e5\u8be2\u8fd9\u4e2a\u70b9\u662f\u5426\u5728\u88ab\u67e5\u8be2\u7684\u70b9\u7684\u5b50\u6811\u5185\uff0c\u518d\u67e5\u8be2\u5b83\u7684\u4fee\u6539\u5bf9\u7b54\u6848\u662f\u5426\u6709\u5f71\u54cd\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5982\u679c\u662f\u6dfb\u52a0\u4e00\u4e2a\u70b9\uff0c\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u67e5\u8be2\u662f\u5426\u5728\u8fd9\u68f5\u5b50\u6811\u5185\u4ee5\u53ca\u662f\u5426\u5bf9\u7b54\u6848\u6709\u5f71\u54cd\u5373\u53ef\u3002\n\n\u90a3\u4e48\u5982\u4f55\u67e5\u8be2\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u88ab\u67e5\u8be2\u70b9\u7684\u5b50\u6811\u5185\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5728\u6dfb\u52a0\u70b9\u7684\u65f6\u5019\u9884\u5148\u8fdb\u884c\u500d\u589e\u5904\u7406\u8fd9\u4e2a\u70b9\u5411\u4e0a\u8df3$2^i$\u5c42\u7684\u7956\u5148\uff0c\u8fd9\u6837\u53ea\u8981\u7528\u500d\u589e\u6570\u7ec4\u5f80\u4e0a\u8df3\u5c31\u53ef\u4ee5\u67e5\u8be2\u4e86\u3002\n\n\u7efc\u5408\u4e00\u4e0b\u4e4b\u524d\u7684\u8ba8\u8bba\uff0c\u5982\u679c\u6211\u4eec\u5728\u67e5\u8be2\u4e4b\u524d\u7684\u4fee\u6539\u4e0d\u8d85\u8fc7$\\sqrt m$\u6b21\u65f6\uff0c\u5c31\u5728\u5f52\u5e76\u6811\u4e0a\u67e5\u8be2\u540e\u66b4\u529b\u626b\u63cf\u4fee\u6539\u8ba1\u7b97\u8d21\u732e\uff1b\u5982\u679c\u4fee\u6539\u8d85\u8fc7\u4e86$\\sqrt m$\u6b21\u65f6\uff0c\u6211\u4eec\u53ea\u8981\u6839\u636e\u4fee\u6539\u91cd\u5efa\u4e00\u4e0b\u5f52\u5e76\u6811\u5c31\u53ef\u4ee5\u6e05\u9664\u6389\u8fd9\u4e9b\u4fee\u6539\uff0c\u53ef\u4ee5\u53d1\u73b0\u5f52\u5e76\u6811\u7684\u91cd\u5efa\u4e0d\u4f1a\u8d85\u8fc7$\\sqrt m$\u6b21\u3002\n\n\u6765\u5206\u6790\u4e00\u4e0b\u590d\u6742\u5ea6\uff0c\u4e3a\u4e86\u7701\u4e8b\u6211\u4eec\u628a$n$\u548c$m$\u770b\u6210\u662f\u540c\u9636\u7684\uff0c\u74f6\u9888\u663e\u7136\u5728\u66b4\u529b\u626b\u63cf\u8ba1\u7b97\u8d21\u732e\u548c\u5f52\u5e76\u6811\u7684\u91cd\u5efa\u4e0a\uff0c\u8ba1\u7b97\u8d21\u732e\u65f6\uff0c\u6700\u591a\u626b\u63cf$O(\\sqrt n)$\u6b21\u4fee\u6539\uff0c\u6bcf\u6b21\u9700\u8981$O(\\log n)$\u7684\u590d\u6742\u5ea6(\u500d\u589e)\uff0c\u6240\u4ee5\u8fd9\u90e8\u5206\u7684\u590d\u6742\u5ea6\u662f$O(n\\sqrt n \\log n)$\u3002\u800c\u91cd\u5efa\u5f52\u5e76\u6811\u6bcf\u6b21\u662f$O(n\\log n)$\u7684\uff0c\u4e00\u5171$O(\\sqrt n)$\u6b21\uff0c\u56e0\u6b64\u8fd9\u90e8\u5206\u7684\u590d\u6742\u5ea6\u4e5f\u662f$O(n\\sqrt n \\log n)$\u3002\n\n\u56e0\u6b64\u590d\u6742\u5ea6\u662f$O(n\\sqrt n \\log n)$\uff0c\u901a\u8fc7\u4e86\u8fd9\u9053\u9898\u3002\n\n\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\u6ce8\u91ca\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<vector>\nusing std::upper_bound;\nusing std::merge;\nusing std::vector;\ninline int read()\n{\n\tint res=0;\n\tchar x;\n\twhile((x=getchar())<'0'||x>'9');\n\tfor(;x>='0'&&x<='9';x=getchar())\n\t\tres=res*10+x-'0';\n\treturn res;\n}\ninline void write(int x)\n{\n\tif(x>=10)\n\t\twrite(x/10);\n\tputchar(x%10+'0');\n\treturn;\n}\nconst int N=1e5+5,LGN=25;\nint n,m,unit,tot,idx,lastans;\nint w[N],wi[N],id[N],deep[N],size[N];\nint p[N][LGN];//\u500d\u589e\u6570\u7ec4\nint v[N<<1],first[N],next[N<<1];\nstruct cell\n{\n\tint opt,u,x,y;\n};\nvector<cell> V;\nstruct node\n{\n\tint l,r;\n\tvector<int> V;\n}sgt[N<<2];\nvoid build(int now,int l,int r)//\u6784\u5efa\u5f52\u5e76\u6811\n{\n\tsgt[now].l=l;sgt[now].r=r;\n\tsgt[now].V.clear();\n\tif(l==r)\n\t{\n\t\tsgt[now].V.push_back(wi[l]);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(now<<1,l,mid);\n\tbuild(now<<1|1,mid+1,r);\n\tsgt[now].V.resize(r-l+1);\n\tmerge(sgt[now<<1].V.begin(),sgt[now<<1].V.end(),sgt[now<<1|1].V.begin(),sgt[now<<1|1].V.end(),sgt[now].V.begin());\n\treturn;\n}\nint query(int now,int l,int r,int k)//\u67e5\u8be2\n{\n\tif(sgt[now].l>r||sgt[now].r<l)\n\t\treturn 0;\n\tif(sgt[now].l>=l&&sgt[now].r<=r)\n\t\treturn sgt[now].V.end()-upper_bound(sgt[now].V.begin(),sgt[now].V.end(),k);\n\treturn query(now<<1,l,r,k)+query(now<<1|1,l,r,k);\n}\ninline void add_edge(int from,int to)\n{\n\ttot+=2;\n\tv[tot+1]=from;v[tot]=to;\n\tnext[tot]=first[from];first[from]=tot;\n\tnext[tot+1]=first[to];first[to]=tot+1;\n\treturn;\n}\nvoid dfs(int now,int father)//dfs\uff0c\u7528\u4e8e\u5728\u91cd\u5efa\u5f52\u5e76\u6811\u4e4b\u524d\u66f4\u65b0\u4e00\u4e9b\u6570\u636e\n{\n\tregister int go;\n\tid[now]=++idx;size[now]=1;\n\twi[id[now]]=w[now];/*\u8fd9\u4e2a\u662f\u4e3a\u4e86\u65b9\u4fbf\u5efa\u5f52\u5e76\u6811*/p[now][0]=father;\n\tfor(go=first[now];go;go=next[go])\n\t\tif(v[go]!=father)\n\t\t{\n\t\t\tdeep[v[go]]=deep[now]+1;\n\t\t\tdfs(v[go],now);\n\t\t\tsize[now]+=size[v[go]];\n\t\t}\n\treturn;\n}\ninline bool anc(int u,int v)//\u67e5\u8be2v\u662f\u5426\u5728u\u7684\u5b50\u6811\u5185\n{\n\tint res=v;\n\tregister int i;\n\tif(deep[v]<deep[u])\n\t\treturn 0;\n\tfor(i=20;~i;i--)\n\t\tif((deep[v]-deep[u])>>i&1)\n\t\t\tres=p[res][i];\n\treturn res==u;\n}\ninline void rebuild()//\u66f4\u65b0\u5e76\u91cd\u5efa\n{\n\tV.clear();\n\tidx=0;dfs(1,0);\n\tbuild(1,1,n);\n\treturn;\n}\nsigned main()\n{\n\tint from,to;\n\tint u,x,res;\n\tregister int i,j;\n\tn=read();\n\tfor(i=1;i<=n-1;i++)\n\t{\n\t\tfrom=read();to=read();\n\t\tadd_edge(from,to);\n\t}\n\tfor(i=1;i<=n;i++)\n\t\tw[i]=read();\n\tidx=0;dfs(1,0);\n\tfor(i=1;i<=n;i++)\n\t\tfor(j=1;j<=20;j++)\n\t\t\tp[i][j]=p[p[i][j-1]][j-1];\n\tbuild(1,1,n);\n\tm=read();unit=ceil(sqrt(m)*5);//\u5757\u5927\u5c0f\n\twhile(m--)\n\t\tswitch(read())\n\t\t{\n\t\t\tcase 0:\n\t\t\t\tu=read()^lastans;x=read()^lastans;\n\t\t\t\tres=query(1,id[u],id[u]+size[u]-1,x);\n\t\t\t\tfor(i=0;i<(int)V.size();i++)\n\t\t\t\t\tif(V[i].opt==1)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(((V[i].x>x)^(V[i].y>x))&&anc(u,V[i].u))\n\t\t\t\t\t\t\tres+=(V[i].y>x)?1:-1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif((V[i].y>x)&&anc(u,V[i].u))\n\t\t\t\t\t\t\tres++;\n\t\t\t\t\t}\n\t\t\t\twrite(lastans=res);putchar('\\n');\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tu=read()^lastans;x=read()^lastans;\n\t\t\t\tV.push_back(cell{1,u,w[u],x});w[u]=x;\n\t\t\t\tif((int)V.size()>=unit)\n\t\t\t\t\trebuild();\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tu=read()^lastans;x=read()^lastans;\n\t\t\t\tV.push_back(cell{2,n+1,u,x});\n\t\t\t\tadd_edge(u,++n);\n\t\t\t\tw[n]=x;deep[n]=deep[u]+1;\n\t\t\t\tp[n][0]=u;\n\t\t\t\tfor(i=1;i<=20;i++)\n\t\t\t\t\tp[n][i]=p[p[n][i-1]][i-1];\n\t\t\t\tif((int)V.size()>=unit)\n\t\t\t\t\trebuild();\n\t\t\t\tbreak;\n\t\t}\n\treturn 0;\n}\n```",
        "postTime": 1531227272,
        "uid": 7253,
        "name": "Mr_Spade",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2137 \u3010Gty\u7684\u59b9\u5b50\u6811\u3011"
    },
    {
        "content": "\u7ffb\u4e86\u4e00\u4e0b\u9898\u89e3\u533a\u53d1\u73b0\u597d\u50cf\u6ca1\u6709\u5757\u72b6\u94fe\u8868\u7684\u9898\u89e3...\u90a3\u6211\u5c31\u5199\u4e00\u53d1\u5427\u3002\n\n\u8bb0\u5206\u5757\u5927\u5c0f\u4e3a $T$ \uff0c\u4e0d\u59a8\u4ee4 $n,m$ \u540c\u7ea7\uff0c\u6b64\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\n\n- \u8be2\u95ee\uff1a $O(\\frac{N}{T}\\log_2n+\\log_2^2n) $ \u3002\n- \u589e\u52a0\u8282\u70b9\uff1a $O(\\log_2n+T)$ \u3002\n- \u4fee\u6539\u6743\u503c\uff1a $O(T)$ \u3002\n\n\u5728 $T$ \u53d6 $\\sqrt{n\\log_2n}$ \u65f6\u6709\u6700\u4f18\u65f6\u95f4\u590d\u6742\u5ea6 $O(n(\\sqrt{n\\log_2n}+\\log^2n))$ \u3002\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log_2n)$\u3002\n\n\u63a5\u4e0b\u6765\u8fdb\u5165\u6b63\u9898\u3002\n\n####  \u5757\u72b6\u94fe\u8868\n\n- \u5b9a\u4e49\n\n\u5757\u72b6\u94fe\u8868\uff0c\u901a\u4fd7\u5730\u8bf4\uff0c\u5c31\u662f\u4e00\u79cd\u7ed3\u5408\u4e86\u5206\u5757\u548c\u94fe\u8868\u4e24\u79cd\u6570\u636e\u7ed3\u6784\u4f18\u52bf\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u5b83\u53ef\u4ee5\u505a\u5230 $O(\\sqrt{n})$ \u5728\u4efb\u610f\u4f4d\u7f6e \u63d2\u5165/\u5220\u9664 \u5143\u7d20\u3001$O(\\sqrt{n})$ \uff08\u6216\u8005 $O(1)$\uff09 \u5b9a\u4f4d\u4e00\u4e2a\u5143\u7d20\u3001\u4ee5\u53ca\u7ef4\u62a4\u5f53\u524d\u5e8f\u5217\u4e0a\u7684\u4e00\u4e9b\u4e1c\u897f\u3002\n\n- \u5b9e\u73b0\n\n> \u94fe\u8868\u7ed3\u6784\uff08\u672c\u9898\uff09\n> \n> `int pii::p` \u503c\u57df\u4e3a $[1,...,sz]$ \uff0c\u8868\u793a\u5757\u5185\u7684 $dfs$ \u5e8f\u3002\n> \n> `int pii::v` $p$ \u5bf9\u5e94\u7684\u8282\u70b9\u7684\u6743\u503c\u3002\n> \n> `int pii::Id` $p$ \u5bf9\u5e94\u7684\u8282\u70b9\u5728\u539f\u6811\u4e0a\u7684\u6807\u53f7\u3002\n> \n> `pii v[][]` \u7528\u6765\u5b58\u50a8\u6bcf\u4e2a\u5757\u7684\u4fe1\u606f\u3002\uff08\u4e0d\u8981\u8ddf\u4e0a\u6587\u7684 $v$ \u5f04\u6df7\uff01\uff09\n> \n> `int sz[]` \u6bcf\u4e2a\u5757\u7684 $ size$ \u3002\n> \n> `int Nx[]` \u8868\u793a\u67d0\u4e00\u4e2a\u5757\u5728 $ dfs$ \u5e8f\u4e0a\u7684\u540e\u7ee7\uff0c\u4e3a0\u8868\u793a\u662f\u6700\u540e\u4e00\u4e2a\u5757\u3002\n> \n> `int Las[]` \u8bb0\u5f55\u4e00\u4e2a\u5757\u5185 $ dfn$ \u6700\u5927\u7684\u8282\u70b9\u3002\n> \n> `int bel[]` \u8bb0\u5f55\u4e00\u4e2a\u6811\u4e0a\u7684\u8282\u70b9\u6240\u5c5e\u7684\u5757\u6807\u53f7\u3002\n> \n> \u5bf9\u4e8e\u8fd9\u9053\u9898\u800c\u8a00\uff0c\u6211\u4eec\u53ef\u4ee5\u968f\u65f6\u4fdd\u8bc1\u5757\u4e2d\u6240\u6709 `pii` \u7684\u6743\u503c $v$ \u5355\u8c03\u9012\u589e\uff0c\u65b9\u6cd5\u53c2\u89c1\u4e0b\u6587\u3002\n\n> `void split(x)`\uff08\u6838\u5fc3\u64cd\u4f5c\uff09\n> \n> \u76ee\u7684\uff1a\u5c06\u5757 $x$ \u5206\u88c2\u6210\u4e24\u5757\u3002\n> \n> \u5f00\u4e00\u4e2a\u65b0\u5757\uff0c\u8bb0\u5176\u4e3a $New$ \uff0c\u7136\u540e\u4fee\u6539 $Nx[New]=Nx[x],Nx[x]=New$\u3002\n> \n> \u8bb0 $mid=sz[x]/2$ \u3002\n> \n> \u5c06 $v[x][i]$ \u4e2d $p$ \u503c\u5927\u4e8e $mid$ \u7684\u51cf\u53bb $mid$ \uff0c\u5e76\u5206\u5230\u65b0\u5757\u4e2d\u3002\n> \n> \u91cd\u8ba1\u7b97\u53d7\u5f71\u54cd\u7684 $sz[]$ \u3001 $Las[]$ \u548c $bel[]$ \u3002\n> \n> \u7531\u4e8e\u539f\u672c $v[x][i]$ \u7684\u6743\u503c\u5c31\u5355\u8c03\u9012\u589e\uff0c\u5206\u88c2\u4e3a\u4e24\u4e2a\u5b50\u5e8f\u5217\uff0c\u5747\u5300\u5206\u914d\u7ed9\u4e24\u4e2a\u5757\u4e4b\u540e\u4e5f\u4e00\u5b9a\u6ee1\u8db3\u5355\u8c03\u6027\u3002\n\n```cpp\nvoid split(int x)\n{\n\tNx[++total]=Nx[x],Nx[x]=total;\n\tint spl=sz[x]>>1;\n\tLas[total]=Las[x];\n\tregister int i,p=0;\n\tfor(i=1;i<=sz[x];i++)\n\t{\n\t\tpii t=v[x][i];\n\t\tif(t.p==spl)Las[x]=t.Id;\n\t\tif(t.p>spl)t.p-=spl,v[total][++sz[total]]=t,bel[t.Id]=total;\n\t\telse v[x][++p]=t;\n\t}sz[x]=p;\n}\n```\n\n\u56de\u5230\u8fd9\u9898\u4e0a\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u7684\u6bcf\u4e2a\u8be2\u95ee\u662f\u5728\u6811\u7684dfs\u5e8f\u4e0a\uff0c\u56e0\u6b64\u5c31\u6bd4\u8f83\u9002\u5408\u7528\u5757\u72b6\u94fe\u8868\u7ef4\u62a4\u3002\n\n1. \u5982\u4f55\u5904\u7406\u8be2\u95ee\uff1f\n\n\u6211\u4eec\u968f\u65f6\u4fdd\u8bc1\u6bcf\u4e2a\u5757\u5185\u7684\u7ed3\u6784\u4f53\u7684\u6743\u503c\u5355\u8c03\u9012\u589e\uff0c\u8fd9\u6837\u8be2\u95ee\u4e00\u4e2a\u6574\u5757\u65f6\u5c31\u53ef\u4ee5\u5728 $O(\\log_2n)$ \u4f7f\u7528 \u4e8c\u5206/upper_bound \u6c42\u51fa\u89e3\u3002\n\n\u663e\u800c\u6613\u89c1\u7684\u662f\uff0c\u901a\u8fc7 $bel$ \u6570\u7ec4\uff0c\u6211\u4eec\u80fd\u5feb\u901f\u5b9a\u4f4d\u8be2\u95ee\u7684\u5de6\u7aef\u70b9\uff08\u56e0\u4e3a\u8be2\u95ee\u7684\u533a\u95f4\u5de6\u7aef\u70b9\u5c31\u662f\u8be2\u95ee\u70b9\u6240\u5728\u4f4d\u7f6e\uff09\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u80fd\u901a\u8fc7\u5224\u65ad\u4e00\u4e2a\u5757\u7684 $ Las $ \u662f\u5426\u5728\u8be2\u95ee\u70b9\u7684\u5b50\u6811\u5185\uff0c\u6765 $O(\\frac{n}{T}\\log_2n)$ \u6c42\u51fa\u8be2\u95ee\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u5728\u54ea\u4e2a\u5757\u4e0a\u3002\n\n\u7531\u4e8e\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u70b9\u7684 $fa$ \uff0c\u6240\u4ee5\u53ef\u4ee5\u500d\u589e\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684 $2^k$ \u7ea7 $fa$ \u4ece\u800c\u5728 $O(\\log_2n)$ \u65f6\u95f4\u5185\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u53e6\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u4e2d\u3002\n\n\u5bf9\u4e8e\u4e24\u4fa7\u7684\u6563\u5757\uff0c\u76f4\u63a5\u66b4\u529b\u8ba1\u7b97\u8d21\u732e\u662f $O(T\\log_2n)$\u7684\uff0c\u590d\u6742\u5ea6\u5c06\u9000\u5316\u5230 $O((\\frac{n}{T}+T)\\log_2n) = O(\\sqrt{n}\\log_2n)$\u3002\n\n\u8003\u8651\u4f18\u5316\u8fd9\u4e2a\u7b97\u6cd5\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6563\u5757\u4e2d\u5728\u8be2\u95ee\u70b9\u5b50\u6811\u5185\u7684\u70b9\u4e00\u5b9a\u5728 $dfs$ \u5e8f\u4e0a\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u5e76\u4e14\u4f60\u5df2\u7ecf\u77e5\u9053\u4e86\u8fd9\u4e9b\u6563\u5757\u5728\u8be2\u95ee\u70b9\u5b50\u6811\u5185\u7684\u70b9\u7684\u5de6\u7aef\u70b9\u3002\uff08\u5982\u679c\u8be2\u95ee\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u5728\u540c\u4e00\u4e2a\u5757\u5185\uff0c\u90a3\u4e48\u5de6\u7aef\u70b9\u5c31\u662f\u8be2\u95ee\u7684\u5de6\u7aef\u70b9\uff0c\u5426\u5219\u5de6\u7aef\u70b9\u663e\u7136\u662f $dfs$ \u5e8f\u6700\u5c0f\u7684\u8282\u70b9\uff09\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c~~\u4ee4\u4eba\u611f\u5230\u6109\u60a6\u7684~~\u4e8c\u5206\u3002\n\n\u4e8c\u5206\u53f3\u7aef\u70b9\uff0c\u590d\u6742\u5ea6\u964d\u5230\u4e86 $O(\\log_2^2n)$ \u3002\n\n\u6b64\u65f6\uff0c\u6211\u4eec\u6210\u529f\u628a\u8be2\u95ee\u590d\u6742\u5ea6\u4f18\u5316\u5230\u4e86  $O(\\frac{n}{T}\\log_2n+T+\\log^2n)$ \uff0c\u6700\u4f18\u4e3a $O(\\sqrt{n\\log_2n}+\\log^2n)$ \u3002\n\n2. \u5982\u4f55\u5904\u7406\u6dfb\u52a0\u8282\u70b9\uff1f\n\n\u6dfb\u52a0\u8282\u70b9\u65f6\uff0c\u7528\u540c\u4e0a\u7684\u65b9\u6cd5\u5b9a\u4f4d\u7236\u8282\u70b9\u6240\u5728\u5757\u4e0e\u5176\u51c6\u786e\u4f4d\u7f6e\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4e0d\u59a8\u5047\u8bbe\u6dfb\u52a0\u7684\u8282\u70b9\u7684 $dfs$ \u5e8f\u6210\u4e3a\u4e86\u5176\u7236\u8282\u70b9\u7684 $dfs$ \u5e8f $+1$ \u3002\n\n\u8fd9\u6837\u76f8\u5f53\u4e8e\u6240\u6709 $dfs$ \u5e8f\u5927\u4e8e\u7236\u8282\u70b9\u7684 $dfs$ \u5e8f\u90fd\u589e\u52a0 $1$\u3002\n\n\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u53ea\u6709\u7236\u8282\u70b9\u6240\u5c5e\u5757\u7684\u4e00\u90e8\u5206 $p$ \u53d7\u5230\u4e86\u5f71\u54cd\u3002\n\n\u66b4\u529b\u66f4\u65b0\u8fd9\u4e9b $p$ \uff0c\u7136\u540e\u63d2\u5165\u65b0\u7684\u8282\u70b9\uff0c\u540c\u65f6\u7528\u63d2\u5165\u6392\u5e8f\u7684\u65b9\u5f0f\u5c06\u5757\u5185\u7684\u6743\u503c\u987a\u5e8f\u66f4\u65b0\u3002\n\n\u53e6\u5916\uff0c\u4e0d\u8981\u5fd8\u4e86\u6c42\u4e00\u4e0b\u65b0\u63d2\u5165\u8282\u70b9\u7684 $fa$ \u6570\u7ec4\u3002\n\n\u590d\u6742\u5ea6 $O(T+\\log_2n)$ \u3002\n\n\u4e0d\u8981\u76f4\u63a5 $sort$ \uff0c\u4e0d\u7136\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u81f3  $O(T\\log_2n)$ \u3002\n\n3. \u5982\u4f55\u5904\u7406\u8282\u70b9\u6743\u503c\u4fee\u6539\uff1f\n\n\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u5b9a\u4f4d\u8fd9\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u66b4\u529b\u4fee\u6539\u3002\n\n\u4fee\u6539\u4e4b\u540e\uff0c\u628a\u8fd9\u4e2a\u70b9\u4e22\u51fa\u6765\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002\n\n\u590d\u6742\u5ea6 $O(T)$ \u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u5728 $O(n(\\sqrt{n\\log_2n}+\\log^2n))$ \u7684\u65f6\u95f4\u5185\u901a\u8fc7\u4e86\u6b64\u9898\u3002\n\nP.S. \u5982\u679c\u590d\u6742\u5ea6\u8bc1\u660e\u4e0d\u6b63\u786e\uff0c\u53ef\u4ee5\u79c1\u4fe1\u6211\u3002\n\n\uff08\u6b64\u7b97\u6cd5\u5e38\u6570\u5e76\u4e0d\u5c0f\uff0c\u6709\u65f6\u5019\u8fd8\u8dd1\u4e0d\u8fc7 $O(n\\sqrt{n}\\log_2n)$ \u7684\u65f6\u95f4\u5206\u5757...\uff09\n\n\u4ee5\u4e0b\u662f\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nstruct pii\n{int p,v,Id;};\nbool operator<(const pii x,const pii y)\n{return x.v<y.v;}\npii v[2222][2222];\nint sz[111111],Nx[111111],Las[111111];\nint rank(pii x,int p)\n{return v[p]+sz[p]+1-std::upper_bound(v[p]+1,v[p]+sz[p]+1,x);}  //\u4e8c\u5206\u6574\u5757\nint n,m,blo=360,last=0,total=1;\nstd::vector<int>w[111111];\nint g[111111],bel[111111];\nvoid split(int x)  //\u5206\u88c2\u5757 x \n{\n\tNx[++total]=Nx[x],Nx[x]=total;\n\tint spl=sz[x]>>1;\n\tLas[total]=Las[x];\n\tregister int i,p=0;\n\tfor(i=1;i<=sz[x];i++)\n\t{\n\t\tpii t=v[x][i];\n\t\tif(t.p==spl)Las[x]=t.Id;\n\t\tif(t.p>spl)t.p-=spl,v[total][++sz[total]]=t,bel[t.Id]=total;\n\t\telse v[x][++p]=t;\n\t}sz[x]=p;\n}\nint dep[111111],fa[111111][22];\n#define lowbit(x) (x&-x)\nint rv[111111];\nbool isin(int x,int y)  //\u5224\u65ad x \u662f\u5426\u5728 y \u5b50\u6811\u5185\n{\n\tregister int i=dep[x]-dep[y];\n\tif(i<0)return 0;\n\tfor(;i;i-=lowbit(i))x=fa[x][rv[lowbit(i)]];\n\treturn x==y;\n}\nint rev(int x,int r,int p)  //\u66b4\u529b\u7edf\u8ba1\u5757 x \u7684\u7b54\u6848 \n{\n\tint L=0,D=1,R=sz[p]+1;\n\tregister int i;\n\tfor(i=1;i<R;i++)v[0][v[p][i].p]=v[p][i];\n\tfor(i=1;i<R;i++)if(v[0][i].Id==r){D=L=i;break;}\n\twhile(L+1<R)  //\u4e8c\u5206\u8be2\u95ee\u5b50\u6811\u7684\u53f3\u7aef\u70b9\n\t{\n\t\tint mid=(L+R)>>1;\n\t\tif(isin(v[0][mid].Id,r))L=mid;\n\t\telse R=mid;\n\t}int ret=0;\n\tfor(i=D;i<R;i++)ret+=v[0][i].v>x;\n\treturn ret;\n}\nint query(int p,int x)\n{\n\tint ans=0,in=0;\n\tfor(register int i=1;i;i=Nx[i])\n\t{\n\t\tif(bel[p]==i)in=1,ans+=rev(x,p,i);\n\t\telse if(in)\n\t\t{\n\t\t\tif(!isin(Las[i],p)){ans+=rev(x,p,i);break;}\n\t\t\telse ans+=rank(pii{0,x,0},i);\n\t\t}\n\t}return ans;\n}\nvoid insert(int f,int d)  //\u63d2\u5165\u65b0\u7684\u8282\u70b9\n{\n\tint vc=bel[f],cg=0;n++;\n\tpii verd=pii{0,d,n};\n\tregister int i;\n\tfa[n][0]=f,dep[n]=dep[f]+1,bel[n]=vc;\n\tfor(i=0;fa[n][i];i++)fa[n][i+1]=fa[fa[n][i]][i];\n\tfor(i=1;i<=sz[vc];i++)if(v[vc][i].Id==f){i=v[vc][i].p+1;break;}\n\tverd.p=i;\n\tfor(i=1;i<=sz[vc];i++)if(v[vc][i].p>=verd.p)v[vc][i].p++,cg=1;\n\tif(!cg)Las[vc]=n;\n\tfor(i=1;i<=sz[vc];i++)\n\t\tif(v[vc][i].v>verd.v){pii gg=verd;verd=v[vc][i],v[vc][i]=gg;}\n\tv[vc][++sz[vc]]=verd;\n\tif(sz[vc]>blo*2)split(vc);\n}\nvoid modify(int x,int d)  //\u4fee\u6539\u70b9\u6743\n{\n\tint vc=bel[x];\n\tregister int i;\n\tfor(i=1;i<=sz[vc];i++)\n\t\tif(v[vc][i].Id==x){v[vc][i].v=d;break;}\n\tpii tp;\n\tfor(i=2;i<=sz[vc];i++)\n\t\tif(v[vc][i]<v[vc][i-1])\n\t\t\ttp=v[vc][i],v[vc][i]=v[vc][i-1],v[vc][i-1]=tp;\n\tfor(i=sz[vc];i^1;i--)\n\t\tif(v[vc][i]<v[vc][i-1])\n\t\t\ttp=v[vc][i],v[vc][i]=v[vc][i-1],v[vc][i-1]=tp;\n}\nint ss=0;\nvoid dfs(int p=1,int f=0)  //\u9884\u5904\u7406\u521d\u59cb\u6811\n{\n\tfa[p][0]=f,dep[p]=dep[f]+1,ss++;\n\tint GG=blo*1.9;\n\tif(ss>GG)ss-=GG,Nx[total]=total+1,total++;\n\tv[total][++sz[total]]=pii{ss,g[p],p},bel[p]=total;\n\tregister int i;\n\tfor(i=0;fa[p][i];i++)fa[p][i+1]=fa[fa[p][i]][i];\n\tfor(auto t:w[p])if(t^f)dfs(t,p);\n}\nvoid precalc()\n{\n\tdfs();\n\tfor(register int i=1;i<=total;i++)\n\t\tLas[i]=v[i][sz[i]].Id,std::sort(v[i]+1,v[i]+sz[i]+1);\n}\nvoid solve()\n{\n\tint o,u,x;\n\tscanf(\"%d%d%d\",&o,&u,&x),u^=last,x^=last;\n\tif(o&1)modify(u,x);\n\telse if(o&2)insert(u,x);\n\telse printf(\"%d\\n\",last=query(u,x));\n}\nint main()\n{\n\tregister int i;\n\tfor(i=0;i<=16;i++)rv[(1<<i)]=i;\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y),w[x].push_back(y),w[y].push_back(x);\n\t}for(i=1;i<=n;i++)scanf(\"%d\",g+i);\n\tprecalc(),scanf(\"%d\",&m);\n\tfor(i=1;i<=m;i++)solve();\n}\n```",
        "postTime": 1591317969,
        "uid": 85053,
        "name": "namespace_std",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2137 \u3010Gty\u7684\u59b9\u5b50\u6811\u3011"
    },
    {
        "content": "\u6765\u4e00\u4e2a\u65f6\u95f4 $O(m \\sqrt n)$\uff0c\u7a7a\u95f4 $O(n)$ \u7684\u89e3\u6cd5\n  \n\u9996\u5148\u5148\u8bb2\u4e00\u4e0b\u5982\u4f55 $O(n)$ \u9884\u5904\u7406\uff0c$O(\\sqrt n)$ \u5728\u7ebf\u67e5\u8be2\u533a\u95f4 $[l,r]$ \u5185\u6709\u591a\u5c11\u4e2a\u6570 $\\le x$\n  \n\u5bf9\u5e8f\u5217\u3001\u503c\u57df\u90fd\u6309\u7167\u5757\u957f $\\sqrt n$ \u8fdb\u884c\u5206\u5757\uff0c\u6ce8\u610f\u503c\u57df\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\uff0c\u6bcf $\\sqrt n$ \u4e2a\u5212\u5206\u4e00\u5757\uff0c\u56e0\u6b64\u4e24\u4e2a\u76f8\u540c\u7684\u6570\u53ef\u80fd\u5728\u4e0d\u540c\u7684\u5757\u4e2d\n  \n\u8ba1 $s_{i,j}$ \u4e3a\u524d $i$ \u4e2a\u5757\u6709\u591a\u5c11\u4e2a\u6570\u843d\u5728\u7b2c $j$ \u4e2a\u503c\u57df\u5757\uff0c\u8fd9\u90e8\u5206\u4e0d\u96be $O(n)$ \u9884\u5904\u7406\n  \n\u8bb0 $l,r$ \u843d\u5728 $fl,fr$ \u5757\uff0c$x$ \u843d\u5728 $fx$\uff0c\u5148\u7b97\u51fa $\\sum\\limits_{i=1}^{fx-1} s_{fr - 1,i} - s_{fl,i}$\n  \n\u7136\u540e\u626b\u4e00\u904d\u4e24\u4e2a\u8fb9\u89d2\u5757\uff0c\u7b97\u51fa\u6709\u591a\u5c11\u4e2a\u6570 $\\le x$\n  \n\u63a5\u4e0b\u6765\u5bf9\u4e8e\u7b2c $fx$ \u4e2a\u503c\u57df\u5757\uff0c\u626b\u4e00\u904d\u5176\u4e2d\u7684\u6bcf\u4e2a\u503c\uff0c\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u6570\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e14**\u5f53\u524d\u672a\u88ab\u8ba1\u6570**\uff0c\u4e5f\u5c31\u662f\u4e0d\u5728\u8fb9\u89d2\u5757\n  \n\u63a5\u4e0b\u6765\u56de\u5230\u672c\u95ee\u9898\n  \n\u5bf9\u65f6\u95f4\u8f74\u5206\u5757\u7684\u95ee\u9898\u5c31\u4e0d\u8d58\u8ff0\u4e86\uff0c\u552f\u4e00\u7684\u95ee\u9898\u5c31\u662f $O(1)$ \u67e5\u8be2\u4e24\u4e2a\u70b9\u662f\u5426\u6709\u7956\u8f88\u5173\u7cfb\n  \n\u6211\u4eec\u79f0\u6700\u540e\u4e00\u6b21\u91cd\u6784\u524d\u52a0\u5165\u7684\u70b9\u4e3a\u65e7\u70b9\uff0c\u65b0\u52a0\u5165\u7684\u70b9\u4e3a\u65b0\u70b9\n  \n\u5982\u679c\u8fd9\u4e24\u4e2a\u70b9\u90fd\u662f\u65e7\u70b9\uff0c\u90a3\u4e48\u6839\u636e dfs \u5e8f\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\n  \n\u5982\u679c\u4e24\u4e2a\u70b9\u90fd\u662f\u65b0\u70b9\uff0c\u76f8\u90bb\u4e24\u6b21\u91cd\u6784\u95f4\u53ea\u4f1a\u6709 $O(n)$ \u5bf9\u8fd9\u6837\u7684\u5173\u7cfb\uff0c\u53ef\u4ee5\u5728\u52a0\u5165 $x$ \u70b9\u540e\u4e0d\u65ad\u5f80\u4e0a\u8df3\uff0c\u6bcf\u6b21\u8bb0\u4e0b $x$ \u7684\u7956\u5148\u4e2d\u54ea\u4e9b\u662f\u65b0\u70b9\uff0c\u53ea\u4f1a\u8df3 $O(\\sqrt n)$ \u6b21\n  \n\u5982\u679c\u4e00\u4e2a\u662f\u65e7\u70b9\uff0c\u4e00\u4e2a\u662f\u65b0\u70b9\uff0c\u552f\u4e00\u7684\u60c5\u51b5\u5c31\u662f\u65e7\u70b9\u662f\u65b0\u70b9\u7684\u7956\u5148\uff0c\u8bb0\u5f55\u65e7\u70b9\u5f80\u4e0a\u8df3\u5230\u7684\u7b2c\u4e00\u4e2a\u65b0\u70b9\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u70b9\u5b58\u5728\u7956\u8f88\u5173\u7cfb\uff0c\u90a3\u4e48\u8fd9\u5bf9\u70b9\u4e5f\u5b58\u5728\u7956\u8f88\u5173\u7cfb\n  \n\u6700\u540e\u63d0\u4e2a\u5c0f\u4e8b\uff1a\u4f60\u4f1a\u53d1\u73b0 $O(n)$ \u91cd\u6784\u7684\u524d\u63d0\u662f\u4f60\u6709\u6392\u5e8f\u540e\u7684\u6570\u7ec4\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u6bcf\u6b21\u5f52\u5e76\u6765\u7ef4\u62a4\n\n\u4f3c\u4e4e\u662f\u56e0\u4e3a\u5e38\u6570\u592a\u5927\uff0c\u8fd9\u4e2a\u7406\u8bba\u590d\u6742\u5ea6\u6bd4\u8f83\u4f18\u79c0\u7684\u7b97\u6cd5\u6210\u529f\u62ff\u4e0b\u6b21\u52a3\u89e3\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <unordered_set>\n#include <vector>\n#define ll long long\nusing namespace std;\n\nstruct range_rank_query{\n\tint n;\n\tint a[100005];\n\tstruct num{\n\t\tint id,val;\n\t}b[100005];//\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \n\tint s[350][350];\n\t#define S 317\n\t#define from(x) ((x - 1) / S + 1)\n\t#define L(x) (x * S - S + 1)\n\t#define R(x) (x * S)\n\tvoid init(){\n\t\tmemset(s,0,sizeof(s));\n\t\tfor(int i = 1;i <= n;i++) s[from(b[i].id)][from(i)]++;\n\t\tfor(int i = 1;i <= from(n);i++){\n\t\t\tfor(int j = 1;j <= from(n);j++){\n\t\t\t\ts[i][j] += s[i - 1][j];\n\t\t\t}\n\t\t}\n\t}\n\tint slv(int r,int v){\n\t\tint x = 0;\n\t\tfor(int i = 17;i >= 0;i--) if(x + (1 << i) <= n && b[x + (1 << i)].val <= v) x += 1 << i;\n\t\tint fr = from(r),fx = from(x),ans = 0;\n\t\tfor(int i = 1;i <= fx - 1;i++) ans += s[fr - 1][i];\n\t\tfor(int i = L(fr);i <= r;i++) ans += a[i] <= v;\n\t\tfor(int i = L(fx);i <= x;i++) ans += from(b[i].id) < fr;\n\t\treturn ans;\n\t}\n\tint query(int l,int r,int x) {return (r - l + 1) - (slv(r,x) - slv(l - 1,x));}\n}DS;\nint n,m;\nint a[100005];\n\nint ecnt;\nint head[200005];\nstruct eg{\n\tint to,nxt;\n}edge[200005];\n\nvoid make(int u,int v){\n\tedge[++ecnt].to = v;\n\tedge[ecnt].nxt = head[u];\n\thead[u] = ecnt;\n}\n\nint cnt,f[100005],dfn[100005],siz[100005],tag[100005],cg[100005],tp[100005];\n\nvoid dfs(int now,int fa){\n\tdfn[now] = ++cnt;\n\tf[now] = fa;\n\tsiz[now] = 1;\n\tfor(int i = head[now];i;i = edge[i].nxt){\n\t\tif(edge[i].to == fa) continue;\n\t\tdfs(edge[i].to,now);\n\t\tsiz[now] += siz[edge[i].to];\n\t}\n}\n\nstruct num{\n\tint id,val;\n}b[100005],c[100005],d[100005];\n\nbool cmp(num a,num b){\n\treturn a.val < b.val;\n}\n\nstruct opt{\n\tint id,w,val;\n};\nvector <opt> Q;\nunordered_set <ll> anc;\n\nint solve(int u,int x){\n\tint ans = DS.query(dfn[u],dfn[u] + siz[u] - 1,x);\n\tfor(int i = 0;i < Q.size();i++){\n\t\tint v = Q[i].id;\n\t\t//u \u4e3a v \u7684\u7956\u5148 \n\t\tif(tag[u] && tag[v]){\n\t\t\tif(dfn[u] <= dfn[v] && dfn[v] <= dfn[u] + siz[u] - 1 && Q[i].w > x) ans += Q[i].val;\n\t\t}else if(tag[u] && !tag[v]){\n\t\t\tv = tp[v];\n\t\t\tif(dfn[u] <= dfn[v] && dfn[v] <= dfn[u] + siz[u] - 1 && Q[i].w > x) ans += Q[i].val;\n\t\t}else if(!tag[u] && !tag[v]){\n\t\t\tif(anc.count((ll)u * 200000 + v) && Q[i].w > x) ans += Q[i].val;\n\t\t}\n\t}\n\treturn ans;\n}\n\nvoid modify(int u,int x){\n\tcg[u] = 0;\n\tQ.push_back({u,a[u],-1});\n\tQ.push_back({u,x,1});\n\ta[u] = x;\n}\n\nvoid add(int u,int x){\n\t++n;\n\tf[n] = u;\n\tmake(u,n);\n\tif(tag[u]) tp[n] = u;\n\telse tp[n] = tp[u];\n\ta[n] = x;\n\tb[n] = {n,x};\n\tQ.push_back({n,x,1});\n\tint v = n;\n\twhile(!tag[v]){\n\t\tanc.insert((ll)v * 200000 + n);\n\t\tv = f[v];\n\t}\n}\n\nvoid rebuild(){\n\tint l1 = 0,l2 = 0,l = 0;\n\tfor(int i = 1;i <= n;i++){\n\t\tif(cg[b[i].id]) c[++l1] = b[i];\n\t\telse d[++l2] = {b[i].id,a[b[i].id]};\n\t}\n\tsort(d + 1,d + l2 + 1,cmp);\n\tint i = 1,j = 1;\n\twhile(i <= l1 && j <= l2){\n\t\tif(c[i].val < d[j].val){\n\t\t\tb[++l] = c[i++];\n\t\t}else{\n\t\t\tb[++l] = d[j++];\n\t\t}\n\t}\n\twhile(i <= l1) b[++l] = c[i++];\n\twhile(j <= l2) b[++l] = d[j++];\n\tcnt = 0;\n\tdfs(1,0);\n\tDS.n = n;\n\tfor(int i = 1;i <= n;i++){\n\t\tDS.a[dfn[i]] = a[i];\n\t\tDS.b[i].val = b[i].val;\n\t\tDS.b[i].id = dfn[b[i].id];\n\t}\n\tDS.init();\n\tQ.clear();\n\tanc.clear();\n\tfor(int i = 1;i <= n;i++){\n\t\ttp[i] = 0;\n\t\ttag[i] = cg[i] = 1;\n\t}\n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i = 1;i < n;i++){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tmake(u,v);make(v,u);\n\t}\n\tfor(int i = 1;i <= n;i++) scanf(\"%d\",&a[i]);\n\tfor(int i = 1;i <= n;i++) b[i] = {i,a[i]};\n\tdfs(1,0);\n\tsort(b + 1,b + n + 1,cmp);\n\tDS.n = n;\n\tfor(int i = 1;i <= n;i++){\n\t\tDS.a[dfn[i]] = a[i];\n\t\tDS.b[i].val = b[i].val;\n\t\tDS.b[i].id = dfn[b[i].id];\n\t}\n\tDS.init();\n\tfor(int i = 1;i <= n;i++) tag[i] = 1;\n\tfor(int i = 1;i <= n;i++) cg[i] = 1;\n\tscanf(\"%d\",&m);\n\tint op,u,x,last = 0;\n\tfor(int i = 1;i <= m;i++){\n\t\tscanf(\"%d%d%d\",&op,&u,&x);\n\t\tu ^= last;x ^= last;\n\t\tif(op == 0){\n\t\t\tlast = solve(u,x);\n\t\t\tprintf(\"%d\\n\",last);\n\t\t}else if(op == 1){\n\t\t\tmodify(u,x);\n\t\t}else{\n\t\t\tadd(u,x);\n\t\t}\n\t\tif(Q.size() == 300) rebuild();\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1617279885,
        "uid": 49776,
        "name": "chenxinyang2006",
        "ccfLevel": 0,
        "title": "P2137 \u9898\u89e3"
    },
    {
        "content": "\u697c\u4e0b\u628a\u4fee\u6539\u64cd\u4f5c\u5206\u5757\u5df2\u7ecf\u8bb2\u5f97\u5341\u5206\u6e05\u695a\u4e86;\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u540c\u6837\u662f\u5c06\u4fee\u6539\u64cd\u4f5c\u5206\u5757\u4f46\u662f\u4e0d\u7528\u5f52\u5e76\u6811\u7684\u65b9\u6cd5: \n\ndfs\u5e8f+\u4e3b\u5e2d\u6811 \n\n\u5148\u6c42\u4e00\u904ddfs\u5e8f, \u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u5efa\u7acb\u4e00\u9897\u4e3b\u5e2d\u6811,\u6839\u636edfs\u5e8f\u8fde\u63a5\u4e0a\u4e00\u9897\u6811; \n\n\u9996\u5148\u5bf9\u4e8e\u67e5\u8be2,\u5982\u679c\u6ca1\u6709\u4fee\u6539\u64cd\u4f5c,\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u67e5\u8be2u\u7684rt[last[u]]-rt[dfn[u]-1]\u7684\u6bd4x\u5927\u7684\u4e2a\u6570\n\n\u518d\u66b4\u529b\u67e5\u8be2\u6b64\u65f6\u5757\u5185\u7684\u64cd\u4f5c1\u548c\u64cd\u4f5c2\u7684x,\u770b\u662f\u5426\u5927\u4e8e\u5f53\u524d\u67e5\u8be2\u7684x,\u5728\u7528\u500d\u589e\u5224\u65ad\u64cd\u4f5c1\u548c\u64cd\u4f5c2\u7684\u70b9\u662f\u5426\u5728\u6b64\u65f6\u67e5\u8be2\u7684\u5b50\u6811\u5185\uff0c\u5c06\u7b54\u6848\u4fee\u6539 \n\n\u6bcf\u5f53\u4fee\u6539\u64cd\u4f5c\u5927\u4e8eblock(\u5206\u5757\u7684\u5927\u5c0f)\u6211\u4eec\u5c31\u66b4\u529b\u91cd\u5efadfs\u5e8f\u548c\u6240\u6709\u4e3b\u5e2d\u6811(dfs\u5e8f O(n),\u4e3b\u5e2d\u6811O(nlog(n)));\n\u7136\u540e\u8fd9\u9898\u5c31\u7ed3\u675f\u4e86;\n\n\u4f18\u5316:\u8fd9\u9898\u5361\u5e38\u5361\u7684\u6211\u5fc3\u529b\u6194\u60b4\n\n1.\u66b4\u529b\u91cd\u5efa\u6811\u7684\u5e38\u6570\u8fc7\u5927,\u53ef\u4ee5\u628a\u5206\u5757\u7684\u5927\u5c0f \u8c03\u5927,\u6765\u51cf\u5c11\u91cd\u5efa\u7684\u6b21\u6570;\n\n2.\u6c42\u500d\u589e\u6570\u7ec4\u65f6,\u53ea\u8981\u7b2c\u4e00\u6b21\u6c42dfs\u5e8f\u7684\u65f6\u5019\u6c42\u5373\u53ef,\u6bcf\u6b21\u64cd\u4f5c2\u7684\u65f6\u5019\u76f4\u63a5\u6c42\u8be5\u70b9\u7684\u500d\u589e\u6570\u7ec4;\n\n\u6ce8\u610f:\n\n1.\u7531\u4e8e\u6211\u7684\u4e3b\u5e2d\u6811\u662f\u6bcf\u6b21\u67e5\u8be2\u90fdquery(rt[last[u]],rt[dfn[u]-1],1,n,x+1);\n\n\u4f46\u662f\u64cd\u4f5c2\u7684\u65f6\u5019\u4f1a\u628an\u589e\u5927,\u4f7f\u5f97\u67e5\u8be2\u51fa\u9519,\u53ef\u4ee5\u5148\u7528\u53d8\u91cf\u7ef4\u62a4\u64cd\u4f5c2\u5f71\u54cd\u7684n,\u91cd\u5efa\u6811\u7684\u65f6\u5019\u518d\u628an\u66f4\u65b0;\n\n2.\u6bcf\u6b21\u91cd\u5efa\u6811\u8981\u6e05\u7a7a\u4e3b\u5e2d\u6811\u6570\u7ec4\u7b49\u8be5\u6e05\u7a7a\u7684\u53d8\u91cf; \n\n------------\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#define ll long long\n#define rr read()\nusing namespace std;\nconst int M=60009;\nint n,m,nn,num=0,id=0,block,sz=0,blocknow=0,ans=0,ld=0;\nint head[M],son[M],f[M],tid[M],top[M],dep[M],last[M],wei[M],rt[M],yuan[M];\nint b[M];\nint sum[M*20],ls[M*20],rs[M*20];\nint d[M][23];\nstruct P{\n    int to,ne;\n    P(int t1=0,int t2=0):to(t1),ne(t2){}\n}e[M<<1];\nstruct Q{\n    int o,u,x,yuan;\n    Q(int t1=0,int t2=0,int t3=0,int t4=0):o(t1),u(t2),x(t3),yuan(t4){}\n}q[M];\nstruct V{\n    int val,id;\n    bool operator < (const V&o)const{\n        return val<o.val;\n    }\n}a[M],c[M];\ninline int read(){\n    int rex=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){rex=rex*10+ch-'0';ch=getchar();}\n    return rex*f;\n}\ninline void add(int u,int v){\n    e[++num]=P(v,head[u]);head[u]=num;\n    e[++num]=P(u,head[v]);head[v]=num;\n}\nvoid zdfs(int u,int fa){\n    dep[u]=dep[fa]+1;f[u]=fa;son[u]=1;\n    d[u][0]=fa;\n    if(blocknow==1)for(int i=1;i<=17;++i){\n        d[u][i]=d[d[u][i-1]][i-1];\n    }\n    for(int i=head[u];i;i=e[i].ne){\n        int v=e[i].to;\n        if(v==fa)continue;\n    \t\tzdfs(v,u);son[u]+=son[v];\n    \t\tif(son[v]>son[wei[u]])wei[u]=v;\n    }\n}\nvoid qdfs(int u,int tp){\n    tid[u]=++id;top[u]=tp;last[u]=tid[u]+son[u]-1;\n    yuan[tid[u]]=u;\n    if(wei[u])qdfs(wei[u],tp);\n    for(int i=head[u];i;i=e[i].ne){\n        int v=e[i].to;\n        if(v==wei[u]||v==f[u])continue;\n    \t\tqdfs(v,v);\n    }\n}\nvoid build(int&root,int la,int l,int r,int now){\n    if(!root)root=++sz;\n    sum[root]=sum[la]+1;\n    if(l==r)return;\n    int mid=(l+r)>>1;\n    if(now<=mid){build(ls[root],ls[la],l,mid,now);rs[root]=rs[la];}\n    else {build(rs[root],rs[la],mid+1,r,now);ls[root]=ls[la];}\n}\nint query(int root,int la,int l,int r,int x){\n    if(l==r){if(c[l].val>=x)return sum[root]-sum[la];return 0;}\n    int mid=(l+r)>>1,rex=0;\n    if(c[mid+1].val>=x){\n        rex=sum[rs[root]]-sum[rs[la]];\n        if(ls[root])rex+=query(ls[root],ls[la],l,mid,x);\n    }\n    else {if(rs[root])rex=query(rs[root],rs[la],mid+1,r,x);}\n    return rex;\n}\ninline void rebuild(){\n    blocknow++;\n    memset(rt,0,sizeof(rt));\n    memset(sum,0,sizeof(sum));\n    memset(ls,0,sizeof(ls));\n    memset(rs,0,sizeof(rs));\n    sz=0;id=0;ld=0;n=nn;\n    zdfs(1,0);qdfs(1,1);\n    for(int i=1;i<=n;++i)c[i]=a[i];\n    sort(c+1,c+n+1);\n    for(int i=1;i<=n;++i)b[c[i].id]=i;\n    for(int i=1;i<=n;++i){\n        build(rt[i],rt[i-1],1,n,b[yuan[i]]);\n    }\n}\ninline int lca(int x,int y){\n    if(dep[x]<dep[y])swap(x,y);\n    for(int i=17;i>=0;--i){\n        if(dep[d[x][i]]>=dep[y])x=d[x][i];\n    }\n    if(x==y)return x;\n    for(int i=17;i>=0;--i){\n        if(dep[d[x][i]]!=dep[d[y][i]])x=d[x][i],y=d[y][i];\n    }\n    return d[x][0];\n}\ninline void update(int u,int fa){\n    d[u][0]=fa;\n    dep[u]=dep[fa]+1;\n    for(int i=1;i<=17;++i){\n        d[u][i]=d[d[u][i-1]][i-1];\n    }\n}\nint main(){\n    nn=rr;\n    for(int i=1,u,v;i<nn;++i){\n        u=rr;v=rr;add(u,v);\n    }\n    for(int i=1;i<=nn;++i)a[i].val=rr,a[i].id=i;\n    m=rr;\n    block=sqrt(m*5);\n    rebuild();\n    for(int i=1,o,u,x;i<=m;++i){\n        o=rr;u=rr^ans;x=rr^ans;\n        if(o==0){\n            if(tid[u]>0)ans=query(rt[last[u]],rt[tid[u]-1],1,n,x+1);\n            else ans=0;\n            for(int j=1;j<=ld;++j){\n                if(q[j].o==1){\n                    if(((q[j].yuan>x)^(q[j].x>x))&&lca(u,q[j].u)==u)\n                    ans+=(q[j].x>x)?1:-1;\n                }\n                if(q[j].o==2){\n                    if(lca(q[j].yuan,u)!=u)continue;\n                    if(q[j].x>x)ans++;\n                }\n            }\n            printf(\"%d\\n\",ans);\n        }\n        if(o==1){\n            q[++ld]=Q(o,u,x,a[u].val);a[u].val=x;\n            if(ld>block)rebuild();\n        }\n        if(o==2){\n            q[++ld]=Q(o,u,x,nn+1);\n            nn++;a[nn].val=x;a[nn].id=nn;\n            add(nn,u);\n            update(nn,u);\n            if(ld>block)rebuild();\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1533810553,
        "uid": 31216,
        "name": "sjie",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2137 \u3010Gty\u7684\u59b9\u5b50\u6811\u3011"
    },
    {
        "content": "### [\u3010\u539f\u9898\u94fe\u63a5\u3011](https://www.luogu.com.cn/problem/P2137)\n\n## \u89e3\u9898\u601d\u8def\n\n~~\u5176\u5b9e\u6211\u662f\u8ddf\u7740\u5e73\u8861\u6811\u7684\u6807\u7b7e\u627e\u5230\u8fd9\u91cc\uff0c\u7136\u540e\u5199\u4e86\u4e00\u53d1\u5757\u72b6\u94fe\u8868\u3002~~\n\n\u597d\u50cf\u9898\u89e3\u533a\u91cc\u552f\u4e00\u4e00\u4e2a\u5757\u72b6\u94fe\u8868\u9898\u89e3\u548c\u6211\u7684\u601d\u8def\u4e5f\u4e0d\u592a\u4e00\u6837\u3002\n\n\u9996\u5148\u8fd9\u9898\u9700\u8981\u7ef4\u62a4\u5b50\u6811\u64cd\u4f5c\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528 dfs \u5e8f\u8f6c\u5316\u4e3a\u5e8f\u5217\u95ee\u9898\uff0c\u8fd9\u6837\u5355\u70b9\u4fee\u6539\u548c\u5b50\u6811\u67e5\u8be2\u90fd\u53ef\u4ee5\u7528\uff08\u6811\u5957\u6811\uff1f\uff09\u7ef4\u62a4\u3002\n\n\u8003\u8651\u4e00\u4e0b\u7ed9\u8282\u70b9 $u$ \u6dfb\u52a0\u4e00\u4e2a\u513f\u5b50\u540e dfs \u5e8f\u4f1a\u53d8\u6210\u4ec0\u4e48\u6837\u3002\u5047\u8bbe\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7528\u4e24\u4e2a\u4f4d\u7f6e $lb_u,\\ rb_u$ \u6765\u8bb0\u5f55\u5176\u5728 dfs \u5e8f\u4e2d\u7684\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u662f\u5728 $lb_u$ \u7684\u540e\u9762\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f $rb_u$ \u7684\u524d\u9762\uff09\u63d2\u5165\u4e00\u5bf9\u65b0\u7684 $lb_v,\\ rb_v$\u3002\n\n\u65e2\u7136\u6709\u4e86\u63d2\u5165\u64cd\u4f5c\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5199\u5e73\u8861\u6811\u5957\u7ebf\u6bb5\u6811\uff0c\u5e76\u4e14\u6beb\u65e0\u7591\u95ee\u5730\u7206\u65f6\u95f4\u7206\u7a7a\u95f4\u3002\n\n\u4f46\u662f\u6211\u4eec\u6709\u4e00\u4e2a\u5f88\u4f18\u79c0\u7684\u652f\u6301\u63d2\u5165\u7684\u6570\u636e\u7ed3\u6784\u2014\u2014\u5757\u72b6\u94fe\u8868\u3002\n\n\u63d2\u5165\u64cd\u4f5c\u4e0d\u518d\u8d58\u8ff0\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5757\uff0c\u7ef4\u62a4\u5176\u672c\u8eab\u4ee3\u8868\u7684\u5e8f\u5217 $a$\uff0c\u4ee5\u53ca\u6392\u5e8f\u540e\u7684\u5e8f\u5217 $b$\u3002\u6574\u5757\u67e5\u8be2\u65f6\uff0c\u53ef\u4ee5\u7528 $\\text{upper\\_bound}$ \u5728 $b$ \u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e $x$ \u7684\u4f4d\u7f6e $pos$\uff0c\u8be5\u5757\u7684\u8d21\u732e\u5c31\u662f $size-pos+1$\u3002\n\n\u96f6\u6563\u5757\u5c31\u76f4\u63a5\u5728 $a$ \u6570\u7ec4\u4e2d\u66b4\u529b\u8ba1\u7b97\u3002\n\n\u73b0\u5728\u53ea\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u7531\u4e8e dfn \u5e8f\u5217\u662f\u4e0d\u65ad\u53d8\u5316\u7684\uff0c\u6211\u4eec\u600e\u4e48\u77e5\u9053 $lb_u,\\ rb_u$ \u7684\u4f4d\u7f6e\u6807\u53f7\u5462\uff1f\u55ef\uff0c\u5206\u5757\u5f53\u7136\u53ef\u4ee5\u76f4\u63a5\u7ef4\u62a4\uff0c\u4f46\u662f\u6211\u9009\u62e9\u4e86\u518d\u7528\u4e00\u68f5 $\\text{Splay}$ \u7ef4\u62a4\u4f4d\u7f6e\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n\n/*\n  \u7701\u7565100\u591a\u884c\u7684\u5feb\u8bfb\u5feb\u5199\uff0c\u5373\u540e\u9762\u7684qin\u3001qout\n  \u3010\u5e7f\u544a\u3011https://www.luogu.com.cn/blog/explodingkonjac/fast-io\n*/\n\ntypedef long long LL;\nint n,m,zt[60005],w[30005];\nstruct Edge{ int to,nxt; }e[60005];\nint cnt,hd[30005];\ninline void addEdge(int u,int v)\n\t{ e[++cnt]=(Edge){v,hd[u]},hd[u]=cnt; }\nvoid dfs(int u,int fa)\n{\n\tzt[++cnt]=u;\n\tfor(int i=hd[u];i;i=e[i].nxt)\n\t\tif(e[i].to!=fa)\n\t\t\tdfs(e[i].to,u);\n\tzt[++cnt]=-u;\n}\nstruct SplayNode\n{\n\tint siz;\n\tSplayNode *ch[2],*fa;\n\tSplayNode(): siz(1)\n\t\t{ ch[0]=ch[1]=fa=nullptr; }\n}*rt;\ntypedef SplayNode *pNode;\n#define which(i) (i->fa->ch[1]==i)\ninline void pushup(pNode i)\n{\n\ti->siz=1;\n\tif(i->ch[0])\ti->siz+=i->ch[0]->siz;\n\tif(i->ch[1])\ti->siz+=i->ch[1]->siz;\n}\ninline void rotate(pNode i)\n{\n\tpNode f=i->fa,gf=f->fa;\n\tbool x=which(i);\n\ti->fa=gf;\n\tif(gf)\tgf->ch[which(f)]=i;\n\tf->ch[x]=i->ch[!x];\n\tif(f->ch[x])\tf->ch[x]->fa=f;\n\ti->ch[!x]=f,f->fa=i;\n\tpushup(f),pushup(i);\n}\ninline void splay(pNode x,pNode y=nullptr)\n{\n\tfor(pNode f;(f=x->fa)!=y;rotate(x))\n\t\tif(f->fa!=y)\n\t\t\trotate(which(f)==which(x)?f:x);\n\tif(!y)\trt=x;\n}\npNode insert(int k)\n{\n\tpNode i=rt,x;\n\twhile(true)\n\t{\n\t\tint sz=i->ch[0]?i->ch[0]->siz:0;\n\t\tif(sz>=k)\ti=i->ch[0];\n\t\telse\n\t\t\tif(!(k-=sz+1))\n\t\t\t{\n\t\t\t\tx=new SplayNode,x->ch[1]=i->ch[1],x->fa=i;\n\t\t\t\tif(i->ch[1])\ti->ch[1]->fa=x;\n\t\t\t\treturn i->ch[1]=x,pushup(x),splay(x),x;\n\t\t\t}\n\t\t\telse\ti=i->ch[1];\n\t}\n}\nint getRank(pNode i)\n\t{ return splay(i),(i->ch[0]?i->ch[0]->siz:0)+1; }\npNode lb[60005],rb[60005];\nvoid build1(int l,int r,pNode &i=rt,pNode f=nullptr)\n{\n\tif(l<=r)\n\t{\n\t\ti=new SplayNode,i->fa=f;\n\t\tint mid=(l+r)>>1;\n\t\t(zt[mid]>0?lb[zt[mid]]:rb[-zt[mid]])=i;\n\t\tbuild1(l,mid-1,i->ch[0],i);\n\t\tbuild1(mid+1,r,i->ch[1],i);\n\t\tpushup(i);\n\t}\n}\nint SIZE;\nstruct Block\n{\n\tint cnt,*a,*b;\n\tBlock *nxt;\n\tBlock(): cnt(0),nxt(nullptr)\n\t\t{ a=new int[SIZE+5],b=new int[SIZE+5]; }\n\tinline bool full()\n\t\t{ return cnt==SIZE; }\n\tinline void update()\n\t\t{ memcpy(b+1,a+1,cnt*4),sort(b+1,b+cnt+1); }\n}*head;\nvoid build2(Block *&i,int j=1)\n{\n\ti=new Block;\n\tfor(;j<=2*n && !i->full();j++)\n\t\ti->a[++i->cnt]=zt[j]>0?w[zt[j]]:-1;\n\ti->update();\n\tif(j<=2*n)\tbuild2(i->nxt,j);\n}\nBlock *find(int &x)\n{\n\tBlock *i=head;\n\tfor(;i->cnt<x;x-=i->cnt,i=i->nxt);\n\treturn i;\n}\nvoid insert(int p,int x)\n{\n\tBlock *i=find(p),*j;\n\tif(i->full())\n\t{\n\t\tj=i->nxt;\n\t\tif(!j || j->full())\n\t\t\ti->nxt=new Block,i->nxt->nxt=j,j=i->nxt;\n\t\tfor(int k=++j->cnt;k>1;k--)\tj->a[k]=j->a[k-1];\n\t\tj->a[1]=(p==SIZE)?x:i->a[SIZE];\n\t\tj->update();\n\t}\n\telse\ti->cnt++;\n\tfor(int k=i->cnt;k>p+1;k--)\ti->a[k]=i->a[k-1];\n\ti->a[p+1]=x,i->update();\n}\nint main()\n{\n\tqin>>n,SIZE=sqrt(n);\n\tint x,y,ans=0;\n\tfor(int i=1;i<n;i++)\tqin>>x>>y,addEdge(x,y),addEdge(y,x);\n\tfor(int i=1;i<=n;i++)\tqin>>w[i];\n\tcnt=0,dfs(1,0),build1(1,2*n),build2(head);\n\tqin>>m;\n\twhile(m--)\n\t{\n\t\tint opt,l,r;\n\t\tBlock *i,*j;\n\t\tqin>>opt>>x>>y,x^=ans,y^=ans;\n\t\tif(opt==0)\n\t\t{\n\t\t\tans=0;\n\t\t\tl=getRank(lb[x]),r=getRank(rb[x]),i=find(l),j=find(r);\n\t\t\tif(i==j)\n\t\t\t\tfor(int k=l;k<=r;k++)\tans+=(i->a[k]>y);\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor(int k=l;k<=i->cnt;k++)\tans+=(i->a[k]>y);\n\t\t\t\twhile((i=i->nxt)!=j)\n\t\t\t\t\tans+=i->cnt-(upper_bound(i->b+1,i->b+i->cnt+1,y)-i->b)+1;\n\t\t\t\tfor(int k=1;k<=r;k++)\tans+=(j->a[k]>y);\n\t\t\t}\n\t\t\tqout.writeln(ans);\n\t\t}\n\t\telse if(opt==1)\n\t\t{\n\t\t\tl=getRank(lb[x]),i=find(l);\n\t\t\ti->a[l]=y,i->update();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl=getRank(lb[x]),++n;\n\t\t\tinsert(l,-1),rb[n]=insert(l);\n\t\t\tinsert(l,y),lb[n]=insert(l);\n\t\t}\n\t}\n\treturn qout.flush(),0;\n}\n```\n",
        "postTime": 1631328023,
        "uid": 279800,
        "name": "ExplodingKonjac",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011P2137 Gty\u7684\u59b9\u5b50\u6811"
    },
    {
        "content": "\u8be2\u95ee\u7684\u5316\u6211\u4eec\u53ef\u4ee5\u5efa\u4e3b\u5e2d\u6811\u3002\u7136\u540e\u4fee\u6539\uff1f\uff0c\u6811\u5957\u6811\u3002\u3002\u3002\uff0c\u6700\u540e\u63d2\u5165\uff1f\u70b8\u4e86\u3002\n\u6240\u4ee5\u6211\u4eec\u5bf9\u64cd\u4f5c\u8fdb\u884c\u5206\u5757\u3002  \n\u6211\u4eec\u5148\u5bf9\u6574\u68f5\u6811\u5efa\u4e00\u4e2a\u4e3b\u5e2d\u6811\u3002\u4fee\u6539\uff0c\u63d2\u5165\u6211\u4eec\u5148\u8bb0\u5f55\u4e0b\u6765\u3002\u7136\u540e\u8be2\u95ee\u7684\u65f6\u5019\u5148\u5bf9\u4e3b\u5e2d\u6811\u67e5\u8be2\uff0c\u7136\u540e\u66b4\u529b\u904d\u5386\u6211\u4eec\u8bb0\u5f55\u4e0b\u6765\u7684\u4fee\u6539\u63d2\u5165\u64cd\u4f5c\u3002\u6bcf$\\sqrt{m}$\u6b21\u64cd\u4f5c\u540e\u6211\u4eec\u91cd\u65b0\u6784\u5efa\u4e00\u4e2a\u4e3b\u5e2d\u6811\u3002\u8fd9\u6837\u6211\u4eec\u4fdd\u8bc1\u4e86\u91cd\u5efa\u4e3b\u5e2d\u6811\u548c\u8be2\u95ee\u7684\u603b\u590d\u6742\u5ea6\u4e3a$O(nlogn\\sqrt{m})$\u7136\u540e\u5c31\u628a\u8fd9\u9053\u9898\u89e3\u51b3\u4e86\u3002    \n\u6709\u4e00\u4e2a\u96be\u529e\u7684\u4e8b\u5c31\u662f\u5982\u4f55\u8bb0\u5f55\u4fee\u6539\u548c\u63d2\u5165\u7684\u64cd\u4f5c\u3002\u53ef\u4ee5\u4f7f\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4fee\u6539\u548c\u63d2\u5165\u662f\u5426\u5728$u$\u7684\u5b50\u6811\u4e2d\u4ee5\u4fbf\u6211\u4eec\u5224\u65ad\u662f\u5426\u8981\u8ba9\u8fd9\u4e9b\u4fee\u6539\u548c\u8be2\u95ee\u4ea7\u751f\u8d21\u732e\u3002\u56e0\u4e3a\u6ca1\u8003\u8651\u5230\u53ef\u4ee5\u8be2\u95ee\u63d2\u5165\u7684\u8282\u70b9\uff0c\u5728\u591a\u6b21\u5c1d\u8bd5\u540e\u6211\u51b3\u5b9a\u7ef4\u62a4\u4e00\u4e2a$f[i][j]$\u4ee3\u8868i\u5411\u4e0a\u8df3$i^j$\u7684\u6df1\u5ea6\u5230\u8fbe\u7684\u8282\u70b9\u3002\u5904\u7406\u8be2\u95ee\u7684\u65f6\u5019\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4fee\u6539\u548c\u63d2\u5165\u90fd\u8df3\u5230\u548cu\u4e00\u4e2a\u6df1\u5ea6\u770b\u662f\u5426\u76f8\u7b49\u3002  \n\u5f53\u7136\u8fd8\u8981\u8bb0\u5f55\u4e00\u4e9b\u5e38\u89c4\u7684\u4fe1\u606f\u6bd4\u5982\u8fd9\u4e2a\u70b9\u88ab\u4fee\u6539\u4e4b\u524d\u7684\u6743\u503c\u4ec0\u4e48\u7684\u3002\u3002\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=101000;\nint head[N],cnt;\nint n,m,ans,a[N],b[N],CNT,more;\nint be[N],ed[N],dep[N],fa[N][25],tot,id[N],top,w[N],from[N];\nint root[N],ch[N*20][2],sum[N*20],num;\nstruct edge{\n    int to,nxt;\n}e[N*2];\ninline void add_edge(int u,int v){\n    cnt++;\n    e[cnt].nxt=head[u];\n    e[cnt].to=v;\n    head[u]=cnt;\n}\ninline void add(int l,int r,int x,int pre,int &now){\n\tnow=++num;\n\tsum[now]=sum[pre]+1;\n\tch[now][0]=ch[pre][0];\n\tch[now][1]=ch[pre][1];\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tif(x>mid)add(mid+1,r,x,ch[pre][1],ch[now][1]);\n\telse add(l,mid,x,ch[pre][0],ch[now][0]);\n}\ninline int check(int l,int r,int L,int R,int pre,int now){\n\tif(l==L&&r==R)return sum[now]-sum[pre];\n\tint mid=(l+r)>>1;\n\tif(L>mid)return check(mid+1,r,L,R,ch[pre][1],ch[now][1]);\n\telse if(R<=mid)return check(l,mid,L,R,ch[pre][0],ch[now][0]);\n\telse return check(l,mid,L,mid,ch[pre][0],ch[now][0])+check(mid+1,r,mid+1,R,ch[pre][1],ch[now][1]); \n}\ninline void dfs(int u,int f){\n    be[u]=++tot;\n    dep[u]=dep[f]+1;\n    add(1,n,lower_bound(b+1,b+1+n,a[u])-b,root[be[u]-1],root[be[u]]);\n    fa[u][0]=f;\n    for(int i=1;i<=20;i++)fa[u][i]=fa[fa[u][i-1]][i-1];\n    for(int i=head[u];i;i=e[i].nxt){\n        int v=e[i].to;\n        if(v==f)continue;\n        dfs(v,u);\n    }\n    ed[u]=tot;\n}\ninline bool judge(int x,int to){\n\tfor(int i=20;i>=0;i--)\n\t\tif(dep[fa[x][i]]>=dep[to])x=fa[x][i];\n\tif(x==to)return true;\n\telse return false;\n}\ninline int read(){\n    int sum=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){sum=(sum<<1)+(sum<<3)+ch-'0';ch=getchar();}\n    return sum*f;\n}\nint main(){\n    n=read();\n    for(int i=1;i<n;++i){\n        int u=read(),v=read();\n        add_edge(u,v);add_edge(v,u);\n    }\n    for(int i=1;i<=n;++i)a[i]=read();\n    m=read();\n    int Block=sqrt(m*25);\n    while(m--){\n        int type=read(),u=read()^ans,x=read()^ans;\n        if(CNT==0){\n            tot=0;top=0;num=0;n+=more;more=0;\n            for(int i=1;i<=n;i++)b[i]=a[i];\n            sort(b+1,b+1+n);\n            dfs(1,1);\n        }\n        if(type==0){\n        \tif(u<=n){\n            \tint tmp=upper_bound(b+1,b+1+n,x)-b;\n            \tif(tmp<=n)ans=check(1,n,tmp,n,root[be[u]-1],root[ed[u]]);\n            \telse ans=0;\n            }\n\t\t\telse ans=0;\n            for(int i=1;i<=top;++i)\n                if(judge(id[i],u)){\n                    if(from[i]>x)ans--;\n                    if(w[i]>x)ans++;\n                }\n            for(int i=n+1;i<=n+more;++i){\n            \tif(judge(i,u)){\n            \t\tif(w[i]>x)ans++;\n            \t}\n            }\n            printf(\"%d\\n\",ans);\n            CNT++;\n        }\n        else if(type==1){\n            ++top;\n            w[top]=x;from[top]=a[u];id[top]=u;\n            ++CNT;\n            a[u]=x;\n        }\n        else{\n            ++more;\n\t\t\tadd_edge(n+more,u);\n\t\t\tadd_edge(u,n+more);\n\t\t\ta[n+more]=x;\n            fa[n+more][0]=u;dep[n+more]=dep[u]+1;\n            for(int i=1;i<=20;i++)fa[n+more][i]=fa[fa[n+more][i-1]][i-1];\n            w[n+more]=x;\n            ++CNT;\n        }\n      \tif(CNT==Block)CNT=0;\n    }\n    return 0;\n}\n```",
        "postTime": 1546216158,
        "uid": 52173,
        "name": "xudaxia",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2137 \u3010Gty\u7684\u59b9\u5b50\u6811\u3011"
    },
    {
        "content": "###\u5206\u6790\uff1a###\n\n\u90fd\u8bf4\u8fd9\u9053\u63d0\u7684\u7ecf\u5178\u505a\u6cd5\u4e4b\u4e00\u662f\u6811\u5206\u5757\uff0c\u4f46\u4e3a\u4ec0\u4e48\u6ca1\u4eba\u5199\u8fd9\u4e2a\u505a\u6cd5\u7684\u9898\u89e3\u5462\uff1f\n\n\u5757\u72b6\u6811\u4e0e\u6811\u94fe\u5256\u5206\u7684\u601d\u60f3\u6709\u4e9b\u7c7b\u4f3c\uff0c\u90fd\u662f\u5c06\u6811\u8fdb\u884c\u9002\u5f53\u7684\u5212\u5206\u3002\u5757\u72b6\u6811\u501f\u7528\u4e86\u5206\u5757\u7684\u601d\u60f3\uff0c\u901a\u8fc7\u628a\u4e00\u4e2a\u6811\u5206\u6210\u82e5\u5e72\u5757\u4ee5\u5b9e\u73b0\u66f4\u5feb\u7684\u6811\u4e0a\u67e5\u8be2\u548c\u4fee\u6539\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u904ddfs\u5b9e\u73b0\u5bf9\u6811\u7684\u5206\u5757\uff0c\u5177\u4f53\u65b9\u6cd5\u662f\uff1a\u4ee4\u6839\u8282\u70b9\u6240\u5728\u5757\u4e3a\u7b2c0\u5757\uff0c\u7136\u540e\u5411\u4e0bdfs\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u6240\u5728\u5757\u7684\u5927\u5c0f\u5c0f\u4e8e\u4f60\u9884\u8bbe\u7684SIZE\uff08\u5757\u7684\u5927\u5c0f\uff09\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8ba9\u8fd9\u4e2a\u8282\u70b9\u4e0e\u5176\u7236\u8282\u70b9\u5728\u540c\u4e00\u5757\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u6240\u5728\u5757\u7684\u5927\u5c0f\u7b49\u4e8e\u4f60\u9884\u8bbe\u7684SIZE\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u65b0\u5efa\u4e00\u4e2a\u5757\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2avector\u7ef4\u62a4\u8fd9\u4e2a\u5757\u5185\u8282\u70b9\u7684\u6743\u503c\uff0c\u5e76\u7ef4\u62a4\u8d77\u6709\u5e8f\u6027\uff0c\u5373\u4fdd\u8bc1vector\u5185\u5143\u7d20**\u5355\u8c03\u4e0d\u964d**\uff08\u539f\u56e0\u7a0d\u540e\u4f1a\u63d0\u5230\uff09\uff0c\u7ef4\u62a4\u65b9\u6cd5\u7c7b\u4f3c\u4e8e\u5192\u6ce1\u6392\u5e8f\u3002\n\n\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ece\u5b50\u6811\u6839\u8282\u70b9dfs\u5b9e\u73b0\uff0c\u7c7b\u4f3c**\u6563\u5757\u66b4\u529b\uff0c\u6574\u5757\u7ef4\u62a4**\u7684\u601d\u60f3\uff08\u6ce8\u610f\u8fd9\u91cc\u8981\u5b9e\u73b0\u4e24\u4e2adfs\u51fd\u6570dfsans()\u548cdfsblock()\uff0c\u5206\u522b\u5bf9\u5e94\u6563\u5757\u7684\u67e5\u8be2\u548c\u6574\u5757\u7684\u67e5\u8be2\uff09\u3002\u6574\u5757\u7684\u67e5\u8be2\uff0c\u6211\u4eec\u53ef\u901a\u8fc7upper_bound()\u4e8c\u5206\u5b9e\u73b0\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u8981\u4fdd\u8bc1vector\u5185\u5143\u7d20\u5355\u8c03\u4e0d\u964d\u3002\n\n\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7ef4\u62a4vector\uff0c\u7136\u540e\u66f4\u6539w[u]\u5373\u53ef\uff08\u6ce8\u610f\u987a\u5e8f\uff09\u3002\n\n\u5bf9\u4e8e\u63d2\u5165\u64cd\u4f5c\uff0c\u7c7b\u4f3c\u4e8e\u4e00\u5f00\u59cbdfs\u5bf9\u6811\u5206\u5757\u65f6\u7684\u65b9\u6cd5\uff0c\u6839\u636e\u7236\u4eb2\u8282\u70b9\u6240\u5728\u5757\u7684\u5927\u5c0f\u51b3\u5b9a\u662f\u5426\u65b0\u5efa\u5757\u3002\n\n###\u4ee3\u7801\uff1a###\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cctype>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <set>\nusing namespace std;\nstruct ios{\n    inline char read(){\n        static const int IN_LEN=1<<18|1;\n        static char buf[IN_LEN],*s,*t;\n        return (s==t)&&(t=(s=buf)+fread(buf,1,IN_LEN,stdin)),s==t?-1:*s++;\n    }\n    template <typename _Tp> inline ios & operator >> (_Tp&x){\n        static char c11,boo;\n        for(c11=read(),boo=0;!isdigit(c11);c11=read()){\n            if(c11==-1)return *this;\n            boo|=c11=='-';\n        }\n        for(x=0;isdigit(c11);c11=read())x=x*10+(c11^'0');\n        boo&&(x=-x);\n        return *this;\n    }\n}io;\nconst int MAXN=60005;\nconst int SIZE=305;\nint n,m,w[MAXN],head[MAXN],bhead[MAXN],ecnt,becnt,tot,fa[MAXN],belong[MAXN];\nstruct Edge{\n\tint to,nxt;\n}e[MAXN<<1];\nstruct BlockEdge{\n\tint to,nxt;\n}be[MAXN<<1];\nstruct Block{\n\tvector<int> a;\n\tBlock(){\n\t\ta.clear();\n\t}\n\tinline void ins(int x){\n\t\ta.push_back(x);\n\t\tfor(int i=a.size()-1;i;i--)\n\t\t\tif(a[i-1]>a[i]) swap(a[i-1],a[i]);\n\t\t\telse break;\n\t}\n\tinline void upd(int x,int k){\n\t\tint pos=lower_bound(a.begin(),a.end(),x)-a.begin();\n\t\ta[pos]=k;\n\t\tfor(int i=pos;i;i--)\n\t\t\tif(a[i-1]>a[i]) swap(a[i-1],a[i]);\n\t\t\telse break;\n\t\tfor(int i=pos;i<a.size()-1;i++)\n\t\t\tif(a[i]>a[i+1]) swap(a[i],a[i+1]);\n\t\t\telse break;\n\t}\n\tinline int query(int x){\n\t\treturn a.end()-upper_bound(a.begin(),a.end(),x);\n\t}\n}bl[MAXN];\ninline void add_edge(int bg,int ed){\n\tecnt++;\n\te[ecnt].to=ed;\n\te[ecnt].nxt=head[bg];\n\thead[bg]=ecnt;\n}\ninline void add_blockedge(int bg,int ed){\n\tbecnt++;\n\tbe[becnt].to=ed;\n\tbe[becnt].nxt=bhead[bg];\n\tbhead[bg]=becnt;\n}\nvoid dfs(int x,int pre){\n\tfa[x]=pre;\n\tif(bl[belong[pre]].a.size()==SIZE){\n\t\tbelong[x]=++tot;\n\t\tbl[tot].ins(w[x]);\n\t\tadd_blockedge(belong[pre],tot);\n\t}\n\telse{\n\t\tbelong[x]=belong[pre];\n\t\tbl[belong[x]].ins(w[x]);\n\t}\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\tint ver=e[i].to;\n\t\tif(ver==pre) continue;\n\t\tdfs(ver,x);\n\t}\n}\nint dfsblock(int x,int k){\n\tint ans=bl[x].query(k);\n\tfor(int i=bhead[x];i;i=be[i].nxt){\n\t\tint ver=be[i].to;\n\t\tans+=dfsblock(ver,k);\n\t}\n\treturn ans;\n}\nint dfsans(int x,int k){\n\tint ans=(w[x]>k?1:0);\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\tint ver=e[i].to;\n\t\tif(ver==fa[x]) continue;\n\t\tif(belong[ver]==belong[x]) ans+=dfsans(ver,k);\n\t\telse ans+=dfsblock(belong[ver],k);\n\t}\n\treturn ans;\n}\nint main(){\n\tio>>n;\n\tfor(int i=1;i<n;i++){\n\t\tint u,v;io>>u>>v;\n\t\tadd_edge(u,v);\n\t\tadd_edge(v,u);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tio>>w[i];\n\tdfs(1,0);\n\tio>>m;\n\tint lastans=0;\n\twhile(m--){\n\t\tint opt,u,x;\n\t\tio>>opt>>u>>x;\n\t\tu^=lastans,x^=lastans;\n\t\tif(opt==0){\n\t\t\tlastans=dfsans(u,x);\n\t\t\tprintf(\"%d\\n\",lastans);\n\t\t}\n\t\telse if(opt==1){\n\t\t\tbl[belong[u]].upd(w[u],x);\n\t\t\tw[u]=x;\n\t\t}\n\t\telse{\n\t\t\tw[++n]=x;\n\t\t\tadd_edge(u,n);\n\t\t\tfa[n]=u;\n\t\t\tif(bl[belong[u]].a.size()==SIZE){\n\t\t\t\tbelong[n]=++tot;\n\t\t\t\tbl[tot].ins(w[n]);\n\t\t\t\tadd_blockedge(belong[u],tot);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tbelong[n]=belong[u];\n\t\t\t\tbl[belong[n]].ins(w[n]);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u6211\u4e3a\u4e86\u5361\u5e38\u5199\u4e86fread()......",
        "postTime": 1534080261,
        "uid": 52468,
        "name": "ErkkiErkko",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2137 \u3010Gty\u7684\u59b9\u5b50\u6811\u3011"
    },
    {
        "content": "## \u5206\u5757\u7684\u4e3b\u5e2d\u6811\u505a\u6cd5\uff1a\n\n\u5206\u5757\u4e0d\u662f\u5bf9\u6811\u5206\u5757\uff0c**\u6211\u4eec\u8981\u5bf9\u4ee3\u7801\u5206\u5757**\uff01\n\n\u5bf9\u4e8e\u6ca1\u6709 $1,2$ \u64cd\u4f5c\u7684\u505a\u6cd5\uff1a\u5728 $dfn$ \u5e8f\u4e0a\u5efa\u4e3b\u5e2d\u6811\uff0c\u6bcf\u6b21\u8be2\u95ee\u5c31\u76f8\u5f53\u4e8e\u95ee\u4e00\u4e2a\u533a\u95f4\u4e2d\u4e25\u683c\u5927\u4e8e\u4e00\u4e2a\u503c\u7684\u6570\u6709\u591a\u5c11\u4e2a\u3002~~\u968f\u4fbf\u505a\u6c34\u6c34\u6c34~~\n\n\u53ef\u662f\u6709\u4e86\u4fee\u6539\u548c\u52a0\u8282\u70b9\u64cd\u4f5c\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u6bcf\u6b21\u4fee\u6539\u70b9\u6743\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u4fee\u6539\u5c31\u884c\u4e86\uff0c\u6bcf\u6b21\u52a0\u8282\u70b9\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u52a0\u5c31\u884c\u4e86\uff0c\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u5019 $dfs$ \u4e00\u904d\u5b50\u6811\u5c31\u884c\u4e86\u3002\n\n\u6211\u7ba1\u8fd9\u4e2a\u65b9\u6cd5\u53eb **\u66b4\u529b**\n\n\u4e8e\u662f\u4f60\u5c31\u6709\u4e86 $80$ \u5206\uff0c\u4e0d\u8fc7\u524d\u4e24\u4e2a\u70b9 $T$ \u98de\u4e86\n\n~~\u4e0d\u8fc7\u6211\u624d\u4e0d\u4f1a\u544a\u8bc9\u4f60\uff0c\u524d\u4e24\u4e2a\u70b9\u53ea\u670930000\u6b21\u8be2\u95ee\u64cd\u4f5c\uff01~~\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u6709\u4e86\u4e24\u4e2a~~\u4f18\u79c0~~\u505a\u6cd5\uff01\n\n~~\u5408\u5e76\u4e24\u4e2a\u4ee3\u7801\u5373\u53efAC~~\n\n\n\uff08\u524d\u4e24\u4e2a\u70b9\u52a0\u8d77\u6765\u53ea\u670950+ms\uff0c\u8dd1\u7684\u8d3c\u5feb\uff09\n\n**\u4ee3\u7801\uff1a**\n\n```c\n#include<bits/stdc++.h>\n#define N 40005\n#define M N*30\n#define R register\n#define mid ((l+r)>>1)\nusing namespace std;\n\ninline bool rd(int &X)\n{\n    X=0;char ch=0;\n    while(!isdigit(ch))ch=getchar();\n    while( isdigit(ch))X=(X<<3)+(X<<1)+(ch^48),ch=getchar();\n    return 1;\n}\n\nint n,m,K,dfn[N],tot;\nint a[N],ans,pd,x,y,w[N];\nint head[N],cnt,fa[N],size[N];\nstruct nd{int nxt,to;}e[N<<1];\nint rt[N],sum[M],ls[M],rs[M],num;\n#define For(x) for(R int y,i=head[x];(y=e[i].to);i=e[i].nxt)\n\ninline void add(int x,int y){\n  e[++cnt]=(nd){head[x],y};head[x]=cnt;\n  e[++cnt]=(nd){head[y],x};head[y]=cnt;\n}\nvoid dfs1(R int x){\n  dfn[x]=++tot;w[tot]=a[x];size[x]=1;\n  For(x) if(y!=fa[x])\n    fa[y]=x,dfs1(y),size[x]+=size[y];\n}\nvoid dfs(R int x){\n  ans+=a[x]>K; For(x) if(y!=fa[x]) dfs(y);\n}\nvoid ins(R int r1,int &p,R int x,int l=1,int r=1e7){\n  sum[p=++num]=sum[r1]+1;ls[p]=ls[r1];rs[p]=rs[r1]; if(l==r) return ;\n  x<=mid ? ins(ls[r1],ls[p],x,l,mid) : ins(rs[r1],rs[p],x,mid+1,r);\n}\nint ask(R int r1,int p,R int x,int l=1,int r=1e7){\n  if(l==r or !p) return 0;\n  return x<=mid ? ask(ls[r1],ls[p],x,l,mid)+sum[rs[p]]-sum[rs[r1]] : ask(rs[r1],rs[p],x,mid+1,r);\n}\nvoid work()\n{\n  for(R int i=1;i<=n;i++)\n    ins(rt[i-1],rt[i],w[i]);\n  while(m--)\n    rd(pd),rd(x),rd(y),x^=ans,y^=ans,\n    printf(\"%d\\n\",ans=ask(rt[dfn[x]-1],rt[dfn[x]+size[x]-1],y));\n}\nsigned main()\n{\n  for(R int x,y,i=rd(n);i<n;i++)\n    rd(x),rd(y),add(x,y);\n  for(R int i=1;i<=n;i++) rd(a[i]);\n  rd(m);dfs1(1);\n  if(n==30000) return work(),0;\n  while(m--) {\n    rd(pd),rd(x),rd(y);\n    x^=ans;y^=ans;\n    if(pd==1) a[x]=y;\n    if(pd==2) a[++n]=y,add(fa[n]=x,n);\n    if(pd==0) K=y,ans=0,dfs(x),printf(\"%d\\n\",ans);\n  }\n}\n```",
        "postTime": 1535427948,
        "uid": 56659,
        "name": "AubRain",
        "ccfLevel": 0,
        "title": "[P2137]Gty\u7684\u59b9\u5b50\u6811\u2014\u2014\u4e3b\u5e2d\u6811+\u66b4\u529b"
    },
    {
        "content": "\u5206\u5757\u5427\uff01\u8fd9\u9898\u7684\u5206\u5757\u4e0d\u662f\u7ed9\u6811\u5206\u5757\uff0c\u800c\u662f\u7a0b\u5e8f\u5206\u5757\uff0c\u5c31\u6ca1\u4e86\uff01\n\n\u597d\u50cf3\u64cd\u4f5c\u6570\u636e\u91cc\u5e76\u6ca1\u6709\uff0c\u800c\u4e14\u6570\u636e\u8303\u56f4\u6ca1\u9053100000\u5427\uff0c\u6240\u4ee5\u76f4\u63a5\u6c34\uff01\n\n\u5c31\u662f\u8be2\u95ee\u5957\u5957\u4e3b\u5e2d\u6811\uff0c\u5176\u4ed6\u778e\u641e\uff0c\u66b4\u529b+\u5361\u5e38\u5c31\u53ef\u4ee5\u8dd1\u8fc7\u4e86\uff0c\u975e\u5e38\u5f00\u5fc3\u5427\uff01\n\n\u7136\u540e\u8981\u6ce8\u610f\u4e0d\u80fd\u79bb\u6563\u5316\uff0c\u540c\u65f6\u8981\u5f53\u5fc3\u67090\n\n\u6240\u4ee5\u76f4\u63a5\u57280 - 2 ^ 30 \u641e\u4e00\u4e0b\u5373\u53ef\uff01\uff08chairman tree\u5927\u6cd5\u597d\uff09\n\n\u5475\u5475\uff0c\u6211\u8fd9\u7bc7\u535a\u5ba2\u5176\u5b9e\u548c\u6211\u5728P2166\u5199\u7684\u535a\u5ba2\u5dee\u4e0d\u591a\u5427\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 60005, M = (N << 1), P = (1 << 30);\nint n, ecnt, val[N], to[M], nxt[M], fir[N];\ntemplate <class T> void cmax(T &x, T y) {x = x > y ? x : y;}\ntemplate <class T> void cmin(T &x, T y) {x = x < y ? x : y;}\ntemplate <class T> void rd(T &x) {\n\tchar c = getchar(); int f = 1; x = 0;\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n\tfor (; isdigit(c); c = getchar()) x = x * 10 + c - '0';\n\tx *= f;\n}\nvoid ae(int u, int v) {to[++ecnt] = v; nxt[ecnt] = fir[u]; fir[u] = ecnt;}\nnamespace subtask1 {\n\tint ls[N * 60], rs[N * 60], size[N * 60], Rt[N], siz[N], dfn[N], idx = 0, tot = 0, ans = 0;\n\tstruct Segment_Tree {\n\t\t#define mid (l + r >> 1)\n\t\t#define lc ls[rt]\n\t\t#define rc rs[rt] \n\t\tvoid modify(int rt, int pre, int l, int r, int x) {\n\t\t\tsize[rt] = size[pre] + 1;\n\t\t\tif (l == r) return; lc = ls[pre], rc = rs[pre];\n\t\t\tif (x <= mid) modify(lc = ++tot, ls[pre], l, mid, x);\n\t\t\telse modify(rc = ++tot, rs[pre], mid + 1, r, x); \t\t\t\n\t\t}\n\t\tint query(int rt, int pre, int l, int r, int x) {\n\t\t\tif (l == r) return size[rt] - size[pre];\n\t\t\tif (x < mid) return size[rc] - size[rs[pre]] + query(lc, ls[pre], l, mid, x);\n\t\t\treturn query(rc, rs[pre], mid + 1, r, x);\n\t\t}\n\t} T;\n\tvoid dfs(int u, int f) {\n\t\tint i; dfn[u] = ++idx, siz[u] = 1; T.modify(Rt[idx] = ++tot, Rt[idx - 1], 1, P, val[u]);\n\t\tfor (i = fir[u]; i; i = nxt[i]) {\n\t\t\tint v = to[i];\n\t\t\tif (v != f) dfs(v, u), siz[u] += siz[v];\n\t\t}\n\t}\n\tvoid solve() {\n\t\tint Q; rd(Q); dfs(1, 0);\n\t\twhile (Q--) {\n\t\t\tint opt, x, y; rd(opt); rd(x); rd(y); x ^= ans, y ^= ans;\n\t\t\tprintf(\"%d\\n\", ans = T.query(Rt[dfn[x] + siz[x] - 1], Rt[dfn[x] - 1], 0, P, y));\n\t\t}\n\t}\n};\nnamespace subtask2 {\n\tint fa[N], k, ans = 0;\n\tvoid dfs(int u, int f) {\n\t\tint i; fa[u] = f;\n\t\tfor (i = fir[u]; i; i = nxt[i]) {\n\t\t\tint v = to[i];\n\t\t\tif (v != f) dfs(v, u); \n\t\t}\n\t}\n\tvoid work(int u) {\n\t\tint i; ans += val[u] > k;\n\t\tfor (i = fir[u]; i; i = nxt[i]) {\n\t\t\tint v = to[i];\n\t\t\tif (v != fa[u]) work(v);\n\t\t}\n\t}\n\tvoid solve() {\n\t\tint Q; rd(Q); dfs(1, 0);\n\t\twhile (Q--) {\n\t\t\tint opt, x, y; rd(opt); rd(x); rd(y); x ^= ans, y ^= ans;\n\t\t\tif (!opt) ans = 0, k = y, work(x), printf(\"%d\\n\", ans);\n\t\t\tif (opt == 1) val[x] = y;\n\t\t\tif (opt == 2) val[++n] = y, fa[n] = x, ae(x, n);\n\t\t}\n\t}\n}\nint main() {\n\tint i; rd(n);\n\tfor (i = 1; i < n; ++i) {\n\t\tint u, v; rd(u); rd(v);\n\t\tae(u, v); ae(v, u);\n\t}\n\tfor (i = 1; i <= n; ++i) rd(val[i]);\n\tif (n == 30000) subtask1 :: solve();\n\telse subtask2 :: solve();\n\treturn 0;\n}\n\n```",
        "postTime": 1547522659,
        "uid": 30817,
        "name": "muller",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2137 \u3010Gty\u7684\u59b9\u5b50\u6811\u3011"
    }
]