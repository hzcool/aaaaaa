[
    {
        "content": "\u5f88\u597d\u7684\u4e00\u9053\u6700\u5c0f\u751f\u6210\u6811\u7684\u9898\u76ee\uff0c\u5199\u5b8c\u5bf9Kruskal\u6709\u4e86\u66f4\u6df1\u7684\u7406\u89e3\u3002\n\n68pts\u505a\u6cd5\uff1a\u6309\u7167\u9898\u76ee\u8bf4\u7684\u5efa\u4e00\u5f20\u56fe\uff0c\u7136\u540e\u65e0\u8111\u8dd1Kruskal\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <stdlib.h>\n#include <stack>\n#include <queue>\n#define ri register int\n#define N 300005\n#define M 90000005\n\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}\n    return x*f;\n}\n\nstruct node{\n\tint q,z,b;\n}edge[M];\n\nint f[M],n,m,cnt=0,suma=0,sumb=0;\nlong long ans=0;\nint d;\n\nbool cmp(node x,node y){\n\treturn x.b<y.b;\n}\n\nint get(int p){\n\tif(f[p]==p)return p;\n\treturn f[p]=get(f[p]);\n}\nint main(){\n    n=read(),m=read();d=n*m-1;\n    for(ri i=1;i<=n;i++){\n    \tint w=read(),q=(i-1)*m+1,z=q+1;\n    \tfor(ri j=1;j<m;j++){\n    \t\tedge[++cnt].b=w,edge[cnt].q=q,edge[cnt].z=z;\n    \t\tq+=1,z+=1;\n\t\t}\n\t}\n\tfor(ri i=1;i<=m;i++){\n\t\tint w=read(),q=i,z=i+m;\n\t\tfor(ri j=1;j<n;j++){\n\t\t\tedge[++cnt].b=w,edge[cnt].q=q,edge[cnt].z=z;\n\t\t\tq+=m,z+=m;\n\t\t}\n\t}\n\tfor(ri i=1;i<=d+1;i++)f[i]=i;\n\tstd::sort(edge+1,edge+cnt+1,cmp);\n    while(true){\n    \tint x=edge[++sumb].q,y=edge[sumb].z;\n    \tif(get(x)!=get(y)){\n    \t\tsuma++;\n    \t\tans+=(long long)edge[sumb].b;\n    \t\tf[get(x)]=get(y);\n\t\t}\n\t\tif(sumb==cnt||suma==d)break;\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\n\n\u60f3\u8981\u62ff\u5230\u6ee1\u5206\uff0c\u8003\u8651Kruskal\u7684\u672c\u8d28\uff0c\u4e0d\u65ad\u53d6\u51fa\u6700\u5c0f\u7684\u8fb9\u8fd0\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4fdd\u8bc1\u4e0d\u4f1a\u51fa\u73b0\u73af\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53d1\u73b064pts\u7684\u505a\u6cd5\u4e8b\u5b9e\u4e0a\u975e\u5e38\u6d6a\u8d39\uff0c\u56e0\u4e3a\u5176\u5b9e\u53ea\u6709n+m\u6761\u4e0d\u540c\u7684\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53ea\u5bf9\u8fd9n+m\u6761\u8fb9\u6392\u5e8f\u5373\u53ef\u3002\n\nKruskal\u4e8b\u5b9e\u4e0a\u4e00\u76f4\u5728\u5e72\u4e24\u4e2a\u4e8b\u60c5\uff1b\n\n- \u4e0d\u65ad\u53d6\u51fa\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\u3002\n- \u5728\u6b64\u8fc7\u7a0b\u4e2d\u4fdd\u8bc1\u6ca1\u6709\u73af\u7684\u51fa\u73b0\u3002\n\n\u4e8e\u662f\u6211\u4eec\u7d27\u7d27\u56f4\u7ed5\u8fd9\u4e24\u4e2a\u8fdb\u884c\u8ba8\u8bba\uff0c\u53ea\u8981\u6ee1\u8db3\u4ee5\u4e0a\u4e24\u6761\u6027\u8d28\uff0c\u90a3\u4e48\u6c42\u51fa\u6765\u7684\u4e00\u5b9a\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n1. \u5c06$a,b$\u6570\u7ec4\u5206\u522b\u6392\u5e8f\uff0c\u7ef4\u62a4\u4e24\u4e2a\u6307\u9488\u53d8\u91cf$p1,p2$\u5206\u522b\u6307\u5411$a,b$\u6570\u7ec4\uff0c\u7528\u6765\u5224\u65ad\u6211\u4eec\u8be5\u53d6\u54ea\u4e2a\u6570\u7ec4\u91cc\u7684\u8fb9\u3002\n\n2. \u5f53\u6211\u4eec\u786e\u5b9a\u4e86\u8be5\u53d6\u54ea\u6761\u8fb9\u4ee5\u540e\uff0c\u5c31\u8981\u786e\u5b9a\u53d6\u591a\u5c11\u6761\uff0c\u7b54\u6848\u5f88\u7b80\u5355\uff0c\u53d6\u5728\u4fdd\u8bc1\u4e0d\u51fa\u73b0\u73af\u7684\u524d\u63d0\u4e0b\u6700\u5927\u6570\u91cf\u7684\u8fb9\u3002\uff08\u5177\u4f53\u89c1\u4ee3\u7801\uff09\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <stdlib.h>\n#include <stack>\n#include <queue>\n#define ri register int\n#define N 300005\n\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}\n    return x*f;\n}\n\nint a[N],b[N],n,m,edge;\nint sum=0,h=1,l=1,p1=2,p2=2;\nlong long ans=1;\n\nint main(){\n    n=read(),m=read(),edge=n*m-1;\n    for(ri i=1;i<=n;i++)a[i]=read();\n\tfor(ri i=1;i<=m;i++)b[i]=read();\n\tstd::sort(a+1,a+n+1);\n\tstd::sort(b+1,b+m+1);\n\tans=1ll*a[1]*(m-1)+1ll*b[1]*(n-1),sum=n+m-2; \n\tfor(;;){\n\t\tif(a[p1]<b[p2])ans+=(1ll*a[p1++]*(m-h)),l++,sum+=(m-h);\n\t\telse ans+=(1ll*b[p2++]*(n-l)),h++,sum+=(n-l);\n\t\tif(sum==edge)break;\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\nqwq",
        "postTime": 1594996126,
        "uid": 174897,
        "name": "zjrdmd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5687 \u3010[CSP-SJX2019]\u7f51\u683c\u56fe\u3011"
    },
    {
        "content": "\u8fd1\u65e5\uff0c\u56de\u987e\u4e86CSP2019\u2014JX\u7684\u8d5b\u9898\uff0c\u505a\u5230T3\u65f6\u611f\u5230\u8fd9\u9053\u9898\u5f88\u6709\u610f\u601d\uff0c\u62ff\u6765\u5206\u4eab\u4e00\u4e0b\u3002\u5173\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u5c06\u5206\u6b63\u89e3\u548c\u90e8\u5206\u5206\u4e24\u5757\u8fdb\u884c\u8bb2\u89e3\uff0c**\u4e3a\u66b4\u529b\u9a97\u5206\u9009\u624b\u4e0eAK\u795e\u7287\u63d0\u4f9b\u601d\u8def**\u3002\n\n# \u90e8\u5206\u5206\n-\n\n\u89c2\u5bdf\u6570\u636e\u8303\u56f4\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\uff0c\u5bf9\u4e8e$64%$\u7684\u6570\u636e:\n\n$n,m\u2264300,a_i,b_j\u22641000$\n\n\u800c\u514b\u9c81\u65af\u5361\u5c14\uff08$Kruskal$\uff09\u6700\u5c0f\u751f\u6210\u6811\u7684\u590d\u6742\u5ea6\u662f$O(N log N)$,\u5b58\u56fe\u7684\u65f6\u65f6\u95f4\u590d\u6742\u5ea6\u662f$n\u00d7m$,\u6240\u4ee5\uff0c\u6211\u6709\u4e00\u4e2a\u5927\u80c6\u7684\u60f3\u6cd5\uff08~~\u624b\u52a8\u6ed1\u7a3d~~\uff09\n\n## \u5efa\u56fe\n\u8fd9\u4e2a\u5efa\u56fe\u90e8\u5206\u662f\u5c5e\u5b9e\u7684\u6076\u5fc3\uff0c\u7b2c\u4e00\u904d\u6211\u90fd\u5b58\u9519\u4e86\u3002\u9898\u89e3\u533a\u597d\u50cf\u4e5f\u6ca1\u6709\u5177\u4f53\u5206\u6790\u8fd9\u4e2a\u90e8\u5206\u5206\u5b58\u56fe\u65b9\u5f0f\u7684\uff0c\u6211\u6765\u505a\u7b2c\u4e00\u4e2a\u5403\u8783\u87f9\u7684\u4eba\uff0c**\u8be6\u7ec6\u5206\u6790\u4e00\u4e0b\u5b58\u56fe**\u3002\n\n\u6211\u4eec\u624b\u52a8\u753b\u4e00\u4e0b\u6837\u4f8b\u7684\u7f51\u683c\u56fe\uff0c\u53d1\u73b0\u540c\u4e00\u884c,\u540c\u4e00\u5217\u7684\u6743\u90fd\u76f8\u7b49\uff0c\u5373\n\n$W_{i,j}=W_{i,j+1} \\ \\ W_{i,j}=W_{i+1,j}$\n\n\u663e\u7136\uff0c\u76f4\u63a5\u5efa\u56fe\u5e76\u4e0d\u662f\u4e00\u4e2a\u6b63\u786e\u7684\u9009\u62e9\uff0c\u6211\u4eec\u9700\u8981**\u7ed9\u70b9\u6807\u53f7**\uff0c\u8bbe\u5750\u6807\u4e3a$(1,1)$\u7684\u70b9\u4e3a$1$\uff0c**\u4ece\u5de6\u5f80\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u9012\u589e**\u3002\u6839\u636e\u6837\u4f8b\uff0c\u6211\u4eec\u5f97\u5230\u5982\u4e0b\u7f51\u683c\u56fe\uff08\u6570\u5b57\u5373\u6807\u53f7\uff09\uff1a\n```cpp\n1 2 3\n\n4 5 6\n\n7 8 9\n```\n\n\u6211\u4eec\u5c31**\u6839\u636e\u8fd9\u4e2a\u7f16\u53f7\u5b58\u56fe\u5373\u53ef**\u3002\n\n\u5efa\u56fe\u4ee3\u7801\uff1a\n```cpp\nfor(fint i=1;i<=n;i++)\n{\n\tx=read();\n\tfor(fint j=1;j<m;j++)\n\tadds((i-1)*m+1+(j-1),(i-1)*m+2+(j-1),x);\n}\nfor(fint i=1;i<=m;i++)\n{\n\tx=read();\n\tfor(fint j=1;j<n;j++)\n\tadds(i+(j-1)*m,i+j*m,x);\n}\n```\n\n## \u6c42\u89e3\n\u7136\u540e\u6211\u4eec\u8dd1\u4e00\u4e2a**\u88f8\u7684Kruskal\u6700\u5c0f\u751f\u6210\u6811**\u5373\u53ef\n\n\u6b64\u90e8\u5206\u4ee3\u7801\uff1a\n```cpp\nsort(e+1,e+cnt+1,cmp);\nfor(fint i=1;i<=n*m;i++)\nf[i]=i;\nint ans=0,vis_tim=0;\nfor(fint i=1;i<=cnt;i++)\nif(findx(e[i].from)!=findx(e[i].to))\n{\n\tf[findx(e[i].from)]=findx(e[i].to);\n\tans+=e[i].val;\n\tvis_tim++;\n\tif(vis_tim==n*m-1)\n\tbreak;\n}\ncout<<ans;\nreturn 0;\n```\n\u5c31\u8fd9\u6837\uff0c\u6211\u4eec\u62ff\u4e0b\u4e86**64\u5206**\n\n# \u6b63\u89e3\n-\n\n\u5f53\u6211\u4eec\u62ff\u5230$64pts$\u65f6\uff0c\u6211\u4eec\u5c31\u8be5\u79bb\u6210\u529f\u4e0d\u8fdc\u4e86\u3002$100pts$\u90e8\u5206$3e5$\u7684\u5927\u6570\u636e\u663e\u7136\u4e0d\u518d\u9002\u5408\u66b4\u529b\u7684$Kruskal$\u7b97\u6cd5\uff0c\u4f46\u662f$Kruskal$\u6ca1\u6709\u8fc7\u65f6\uff0c\u7a0d\u52a0\u6539\u52a8\u4ecd\u80fd\u5947\u8ff9\u518d\u73b0\uff01\n\n## \u601d\u8def\n\n\u4e4b\u524d\u6211\u4eec\u5728\u8dd1\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u6743\u503c\u76f8\u7b49\u7684\u8fb9\u4e0d\u65ad\u88ab\u52a0\u5165\u5224\u65ad\u4e4b\u4e2d\uff0c\u663e\u5f97\u5341\u5206\u81c3\u80bf\uff0c\u90a3\u6211\u4eec\u80fd\u4e0d\u80fd\u8003\u8651\u4f18\u5316\u4e00\u4e0b\uff0c\u4f7f\u6bcf\u4e2a\u5168\u76f8\u7b49\u7684\u540c\u884c\u540c\u5217\u8fb9\u4e0d\u91cd\u590d\u5224\u65ad\u5462\uff1f\u5176\u5b9e\uff0c\u6211\u4eec\u53ea\u9700**\u4f7f\u7528\u6574\u4f53\u601d\u60f3\uff0c\u5c06\u540c\u4e00\u884c\uff0c\u540c\u4e00\u5217\u7684\u8fb9\u5408\u4e3a\u4e00\u4f53**\uff0c\u90a3\u4e48$AC$\u5c31\u6307\u65e5\u53ef\u5f85\u4e86\uff01\n\n## \u5177\u4f53\u5b9e\u73b0\n\u6211\u4eec\u53ea\u9700**\u5206\u522b\u5bf9a,b\u6570\u7ec4\u6392\u5e8f**\uff0c**\u5bf9\u6743\u8fdb\u884c\u5904\u7406\uff0c\u5e76\u52a0\u5165\u751f\u6210\u6811\u5185**\uff0c\u6b64\u65f6\u4f18\u5316\u540e\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5c31\u662f\u6211\u4eec\u6700\u7ec8\u7684\u7b54\u6848\u4e86\uff01\u8bb0\u5f97\u5f00$long long$\n```\nsort(a+1,a+n+1);\nsort(b+1,b+m+1);\nint ans=a[1]*(m-1LL)+b[1]*(n-1LL);\nint sa=1,sb=1,aa=2,bb=2;\nwhile(aa<=n&&bb<=m)\n{\n\tif(a[aa]<=b[bb])\n\tans+=a[aa]*(m-sb),sa++,aa++;\n\telse\n\tans+=b[bb]*(n-sa),sb++,bb++;\n}\ncout<<ans;\nreturn 0;\n```\n\n\u5982\u6b64\u8be6\u7ec6\u7684\u4e00\u7bc7\u9898\u89e3\uff0c\u5982\u679c\u5bf9\u4f60\u505a\u9898\u6709\u5e2e\u52a9\u8bdd\uff0c\u90a3\u53ef\u662f\u518d\u597d\u4e0d\u8fc7\u4e86\u5462\uff01\uff01\n\n\u4e24\u79cd\u505a\u6cd5\uff08$64pts/100pts$\uff09\u7684\u4ee3\u7801\u6709\u9700\u8981\u7684\u8bdd[\u70b9\u6b64\u9886\u53d6](https://www.luogu.com.cn/paste/3qbsm468)\uff0c\u6700\u540e\uff0c\u795d\u5927\u5bb6AC\u6109\u5feb\u54e6\uff01",
        "postTime": 1597580291,
        "uid": 244059,
        "name": "king_xbz",
        "ccfLevel": 0,
        "title": "P5687\u2014\u2014\u2014\u2014 [CSP-SJX2019]\u7f51\u683c\u56fe"
    },
    {
        "content": "```\n\u6c42\u6c42\u7ba1\u7406\u9020\u9020\u6570\u636e\u5427\u2026\u2026\n```\n\n\u4eff\u7167$\\text{Kruskal}$\u7684\u601d\u60f3\uff0c\u5148\u5bf9\u6240\u6709\u7684\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u867d\u7136\u603b\u8fb9\u6570\u8fbe\u5230\u4e86$O(nm)$\u7684\u7ea7\u522b\uff0c\u4f46\u4e0d\u540c\u7684\u8fb9\u6743\u5374\u81f3\u591a$n+m$\u4e2a\uff0c\u6b64\u6b65\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O((n+m)\\text{log}(n+m))$\u3002\n\n\u9996\u5148\u53d6\u51fa\u6700\u5c0f\u7684\u8fb9\u6743\u3002\u4e0d\u5931\u4e00\u822c\u6027\uff0c\u4e0b\u9762\u7684\u8ba8\u8bba\u57fa\u4e8e\u8fd9\u4e2a\u8fb9\u6743**\u51fa\u73b0\u5728\u884c\u4e2d**\u8fdb\u884c\u3002\u663e\u7136\u8fd9\u4e9b\u8fb9\u90fd\u8981\u8fde\u4e0a\u3002\n\n\u63a5\u4e0b\u6765\u4e00\u76f4\u5411\u4e0b\u53d6\uff0c\u76f4\u5230\u53d6\u5230**\u4e0d\u662f\u884c\u4e2d\u7684\u8fb9\u6743**\u4e3a\u6b62\u3002\u6b64\u65f6\u4e0d\u53ef\u80fd\u6709\u73af\uff0c\u5fc5\u987b\u8981\u5168\u53d6\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a**\u5217\u4e2d\u7684\u8fb9\u6743**\uff0c\u663e\u7136\u6b64\u65f6\u4e5f\u4e0d\u53ef\u80fd\u6709\u73af\uff0c\u5fc5\u987b\u8981\u5168\u53d6\u3002\n\n\u5bf9\u4e8e\u63a5\u4e0b\u6765\u7684\u6bcf\u4e00\u79cd\u8fb9\u6743\uff0c\u6211\u4eec\u7ef4\u62a4\u4e24\u4e2a\u96c6\u5408$S_r,S_c$\uff0c\u5206\u522b\u8868\u793a\u5df2\u7ecf\u8003\u8651\u8fc7\u7684\u884c\u548c\u5217\u3002\n\n\u5bf9\u4e8e\u63a5\u4e0b\u6765\u7684\u6bcf\u4e00\u79cd**\u884c\u4e2d\u7684\u8fb9\u6743**\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e00\u884c\u7684$m$\u4e2a\u70b9\u4e2d\uff0c\u6240\u6709\u51fa\u73b0\u5728$S_c$\u4e2d\u7684\u70b9\u5df2\u548c\u5916\u754c\u8054\u901a\uff0c\u800c\u4e0d\u5728$S_c$\u4e2d\u7684\u70b9\u4e00\u5b9a\u6ca1\u6709\u8fde\u51fa\u4efb\u4f55\u4e00\u6761\u8fb9\u3002\u6545\u884c\u4e2d\u7684\u8fb9\u8981\u8fde\u7684\u6761\u6570\u4e3a$m-|S_c|$\u6761\u3002\n\n\u540c\u7406\uff0c\u5bf9\u4e8e\u6bcf\u79cd**\u5217\u4e2d\u7684\u8fb9\u6743**\uff0c\u8fd9\u79cd\u8fb9\u7684\u6761\u6570\u4e3a$n-|S_r|$\u6761\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u53ea\u7528\u5230\u4e86\u4e24\u4e2a\u53d8\u91cf$sr=|S_r|,sc=|S_c|$\uff0c\u7ef4\u62a4\u8fd9\u4e24\u4e2a\u53d8\u91cf\u5373\u53ef\u3002\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u7684\u7b97\u6cd5\u662f\uff1a\n\n- \u6392\u5e8f\uff1b\n- \u8bbe\u6700\u5c0f\u7684\u8fb9\u6743\u51fa\u81ea\u884c\u4e2d\uff0c\u4e0d\u65ad\u5206\u6790\u8fb9\u6743\uff0c\u76f4\u5230\u53d6\u5b8c\u4e86\u7b2c\u4e00\u4e2a\u5217\u4e2d\u7684\u8fb9\u6743\uff1b\n- \u5bf9\u4e8e\u4e4b\u540e\u7684\u8fb9\uff0c\u7ef4\u62a4$sr,sc$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u884c\u4e2d\u7684\u8fb9\u6743$vr$\uff0c\u4ee4$sr=sr+1$\uff0c\u5e76\u5c06$vr\\times (m-sc)$\u7d2f\u52a0\u5165\u7b54\u6848\u4e2d\uff1b\u5217\u4e2d\u8fb9\u6743\u540c\u7406\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O((n+m)\\text{log}(n+m))$\u3002",
        "postTime": 1575126100,
        "uid": 112794,
        "name": "\u5468\u5b50\u8861",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5687 \u3010\u7f51\u683c\u56fe\u3010\u6682\u65e0\u6570\u636e\u3011\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u4e00\u9053\u4e0d\u9700\u8981\u7528\u5230\u7b97\u6cd5\u7684\u9898\uff0c\u8fd9\u7740\u5b9e\u662f\u4e00\u9053\u597d\u9898\uff01\n\n\u9898\u610f\u7b80\u8ff0\uff1a\u7528\u6700\u5c0f\u7684\u4ee3\u4ef7\uff0c\u5728\u8fd9\u4e2a\u70b9\u9635\u4e2d\u8fde\u8fb9\uff0c\u4f7f\u5f97\u6240\u6709\u70b9\u4e92\u76f8\u8054\u901a\u3002\n\n\u60f3\u60f3\u6700\u5c0f\u751f\u6210\u6811\u7684\u601d\u60f3\u2014\u2014\u8d2a\u5fc3\u3001\u4e0d\u5728\u5df2\u7ecf\u8054\u901a\u7684\u5757\u4e2d\u8fde\u8fb9\uff08\u5373\u4e0d\u6784\u6210\u73af\uff09\u3002\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u4e5f\u662f\u4e00\u6837\uff0c\u5728\u5df2\u7ecf\u8fde\u4e0a\u7684\u8fb9\u6240\u6784\u6210\u7684\u4e00\u4e9b\u8fde\u901a\u5757\u5f53\u4e2d\uff0c\u6211\u4eec\u53ea\u5728\u4e92\u76f8\u72ec\u7acb\u7684\u4e24\u4e2a\u5757\u4e4b\u95f4\u8fde\u8fb9\u4f7f\u5176\u5408\u5e76\u3002\n\n\u5bf9\u4e8e $10^5$ \u6570\u91cf\u7ea7\u7684 $n,m$\uff0c\u663e\u7136\u4e0d\u53ef\u80fd\u76f4\u63a5\u5efa\u56fe+\u66b4\u529b\u6700\u5c0f\u751f\u6210\u6811\u3002\u4f46\u662f\u53ef\u4ee5\u786e\u5b9a\u7684\u4e00\u70b9\u662f\uff0c\u6211\u4eec\u9996\u5148\u5bf9\u6240\u6709\u7684\u6743\u503c\uff08\u4e0d\u8bba\u662f\u884c\u7684\u8fd8\u662f\u5217\u7684\uff09\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u6bcf\u6b21\u53d6\u6700\u5c0f\u7684\u90a3\u4e2a\u6743\u503c\u770b\u5728\u5b83\u7684\u8fd9\u4e00\u884c\uff08\u6216\u5217\uff09\u6700\u5c11\u8fde\u591a\u5c11\u8fb9\u3002\u663e\u7136\u6700\u591a\u8981\u8fde $n-1$\uff08$m-1$\uff09\u6761\u3002\u90a3\u4e48\u8003\u8651\u4ec0\u4e48\u60c5\u51b5\u4e0b\u662f\u5fc5\u987b\u8981\u8fde\u5168\u90e8\u7684\u8fb9\u7684\u3002\u6216\u8005\u8bf4\u4ec0\u4e48\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u6709\u90e8\u5206\u8fb9\u4e0d\u9700\u8981\u8fde\u7684\uff1f\u9996\u5148\u6211\u4eec\u59d1\u4e14\u628a\u5168\u90e8\u7684\u8fb9\u8fde\u4e0a\uff0c\u7136\u540e\u518d\u53bb\u770b\u80fd\u4e0d\u80fd\u820d\u53bb\u4e00\u4e9b\u3002\n- \u5f53\u6211\u4eec\u5728\u8fde\u7684\u662f\u884c\u7684\u6743\u503c\u65f6\uff1a\u5982\u679c\u6211\u4eec\u770b\u5230\u8fde\u5b8c\u4e4b\u540e\u51fa\u73b0\u4e86\u73af\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7701\u53bb (\u3010\u76ee\u524d\u5df2\u7ecf\u8fde\u8fc7\u7684\u5217\u6570\u3011-1) \u6761\u8fb9\u3002\n- \u5f53\u6211\u4eec\u5728\u8fde\u7684\u662f\u5217\u7684\u6743\u503c\u65f6\uff1a\u5982\u679c\u6211\u4eec\u770b\u5230\u8fde\u5b8c\u4e4b\u540e\u51fa\u73b0\u4e86\u73af\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7701\u53bb (\u3010\u76ee\u524d\u5df2\u7ecf\u8fde\u8fc7\u7684\u884c\u6570\u3011-1) \u6761\u8fb9\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/x9ru4brm.png)\n\n\u6784\u6210\u4e86\u73af\u3002\u5f53\u524d\u6211\u4eec\u5728\u8fde\u7684\u662f\u5217\u7684\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u770b\u3010\u76ee\u524d\u5df2\u7ecf\u8fde\u8fc7\u7684\u884c\u6570\u3011\uff08\u5373\u7ea2\u7ebf\u6761\u7684\u6570\u91cf\uff09\uff0c\u5f97\u5230 $2$\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c11\u8fde\u4e24\u6761\u8fb9\uff0c\u56e0\u6b64\u5f53\u524d\u64cd\u4f5c\u7684\u8fd9\u4e00\u5217\u8981\u52a0\u7684\u6743\u503c\u5c31\u662f $w\\times (n-1) - w\\times (2-1)$\u3002\u7701\u6389\u4e4b\u540e\u5927\u6982\u662f\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2ehbbtcy.png)\n\n\u6240\u4ee5\u73b0\u5728\u8981\u8003\u8651\u7684\u5c31\u662f\u4ec0\u4e48\u6761\u4ef6\u4e0b\u53ef\u4ee5\u7701\uff0c\u4ec0\u4e48\u6761\u4ef6\u4e0b\u4e0d\u80fd\u7701\uff0c\u5982\u4f60\u6240\u77e5\uff0c\u5f53\u7136\u4e0d\u662f\u6240\u6709\u7684\u60c5\u51b5\u90fd\u53ef\u4ee5\u7701\u53bb (\u3010\u76ee\u524d\u5df2\u7ecf\u8fde\u8fc7\u7684\u884c\uff08\u5217\uff09\u6570\u3011-1) \u6761\u8fb9\u7684\u3002\u6362\u8a00\u4e4b\uff0c\u5c31\u662f\u6211\u4eec\u8fde\u5168\u90e8\u7684\u8fb9\u4e4b\u540e\u770b\u5230\u7684\u666f\u8c61\u4ec0\u4e48\u65f6\u5019\u4f1a\u51fa\u73b0\u73af\u3002\n\n\u4e00\u4e2a\u73af\uff0c\u4fd7\u4e00\u70b9\u8bf4\uff0c\u81f3\u5c11\u8981\u6709\u4e24\u6839\u6a2a\u6760\u4e24\u6839\u7ad6\u6760\uff0c\u6240\u4ee5\u5224\u65ad\u6761\u4ef6\u5c31\u662f\uff1a\u3010\uff08\u8fde\u5b8c\u8fd9\u6b21\u4e4b\u540e\uff09\u76ee\u524d\u5df2\u7ecf\u8fde\u8fc7\u7684\u5217\u6570\u3011\u5927\u4e8e\u7b49\u4e8e $2$ \u4e14\u3010\uff08\u8fde\u5b8c\u8fd9\u6b21\u4e4b\u540e\uff09\u76ee\u524d\u5df2\u7ecf\u8fde\u8fc7\u7684\u884c\u6570\u3011\u5927\u4e8e\u7b49\u4e8e $2$\u3002\n\n\u4ee3\u7801\uff1a\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=6e5+5;\nstruct node { int ty,val; } a[N];\nbool cmp(node a,node b) { return a.val<b.val; }\nint main()\n{\n    int n,m,x=0,y=0;\n    long long sum=0;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) scanf(\"%d\",&a[i].val),a[i].ty=1;\n    for(int i=n+1;i<=n+m;i++) scanf(\"%d\",&a[i].val),a[i].ty=2;\n    sort(a+1,a+n+m+1,cmp);\n    for(int i=1;i<=n+m;i++){\n        if(a[i].ty==1){\n            sum+=1ll*(m-1)*a[i].val;\n            x=x<n?x+1:x;\n            if(x>1&&y>1) sum-=1ll*(y-1)*a[i].val;\n        }\n        else {\n            sum+=1ll*(n-1)*a[i].val;\n            y=y<m?y+1:y;\n            if(x>1&&y>1) sum-=1ll*(x-1)*a[i].val;\n        }\n    }\n    cout<<sum<<endl;\n    return 0;\n}\n```",
        "postTime": 1601700522,
        "uid": 300078,
        "name": "pengyule",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5687 \u3010[CSP-SJX2019]\u7f51\u683c\u56fe\u3011"
    },
    {
        "content": "\u9996\u5148\u6709\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u8d2a\u5fc3\uff1a\u5bf9\u4e8e\u70b9 $(i,j)$ \uff0c\u5982\u679c\u70b9 $(i-1,j)$ \u548c\u70b9 $(i,j-1)$ **\u90fd\u5df2\u7ecf\u5728\u5f53\u524d\u7684\u6700\u5c0f\u751f\u6210\u6811\u5185**\uff0c\u90a3\u4e48\u5c06\u70b9 $(i,j)$ \u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u540e\uff0c\u7b54\u6848\u7684\u53d8\u5316\u5e94\u8be5\u662f $min(a_i,b_j)$\u3002\n\n~~\u7136\u540e\u505a\u6cd5\u5c31\u5f88\u663e\u7136\u4e86\u3002~~\n\n\u6211\u4eec\u5c06 $a$ \u6570\u7ec4\u548c $b$ \u6570\u7ec4\u5206\u522b\u6392\u5e8f\uff0c\u663e\u7136\u8fd9\u5bf9\u6700\u5c0f\u751f\u6210\u6811\u7684\u5927\u5c0f\u4e0d\u4f1a\u6709\u5f71\u54cd\u3002\u6211\u4eec\u5148\u628a $(1,1)$ \u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u6211\u4eec\u4f1a\u53d1\u73b0\u77e9\u5f62\u7684\u7b2c\u4e00\u884c\u4ece\u5de6\u5230\u53f3\u80af\u5b9a\u90fd\u8981\u8fde\u8fb9\uff0c\u540c\u7406\uff0c\u7b2c\u4e00\u5217\u4ece\u4e0a\u5230\u4e0b\u90fd\u8981\u8fde\u8fb9\uff08\u539f\u56e0\u663e\u7136\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\uff09\u3002\n\n\u7136\u540e\u6211\u4eec\u5206\u522b\u8003\u8651\u6bcf\u4e00\u884c\uff0c\u8bbe\u5f53\u524d\u8003\u8651\u5230\u7b2c $i$ \u884c\uff0c\u6839\u636e\u4e0a\u9762\u7684\u8d2a\u5fc3\uff0c\u5c06\u8fd9\u4e00\u884c\u7684\u6240\u6709\u6570\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u4ee3\u4ef7\u4e3a $\\sum \\limits _{j=2}^m min(a[i],b[j])$\u3002\u6211\u4eec\u7528 `lower_bound` \u627e\u5230 $b$ \u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e $a_i$ \u7684\u6570\uff0c\u8bbe\u5b83\u7684\u4f4d\u7f6e\u4e3a $x$ \uff0c\u5219\u4ee3\u4ef7\u4e3a $sum[x-1]-sum[1]+(M-x+1)*a_i$\uff0c\u5176\u4e2d $sum$ \u6570\u7ec4\u662f $b$ \u6570\u7ec4\u7684\u524d\u7f00\u548c\uff0c\u7d2f\u52a0\u7b54\u6848\u5373\u53ef\u3002\n\nCode\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#include<cmath>\n#include<stack>\nusing namespace std;\n\nconst int MAXN=3e5+50;\ntypedef long long LL;\n\nLL N,M,a[MAXN],b[MAXN],sum[MAXN],Ans=0;\n\nvoid Init(){\n\tscanf(\"%lld%lld\",&N,&M);\n\tfor(int i=1;i<=N;++i) scanf(\"%lld\",&a[i]);\n\tfor(int i=1;i<=M;++i) scanf(\"%lld\",&b[i]);\n}\n\nvoid Solve(){\n\tsort(a+1,a+1+N);//\u6392\u5e8f\n\tsort(b+1,b+1+M);\n\tAns=a[1]*(M-1)+b[1]*(N-1);//\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u90fd\u8981\u8fde\u8fb9\n\tfor(int i=1;i<=M;++i) sum[i]=sum[i-1]+b[i];//\u6c42\u524d\u7f00\u548c\n\tfor(int i=2;i<=N;++i){\n\t\tint x=lower_bound(b+2,b+1+M,a[i])-b;\n\t\tAns+=sum[x-1]-sum[1];//\u7d2f\u52a0\u7b54\u6848\n\t\tAns+=(M-x+1)*a[i];\n\t}\n}\n\nvoid Print(){\n\tcout<<Ans<<endl;\n}\n\nint main()\n{\n\tInit();\n\tSolve();\n\tPrint(); \n\treturn 0;\n}\n```",
        "postTime": 1597933770,
        "uid": 208529,
        "name": "Konnyaku_LXZ",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5687 \u3010[CSP-SJX2019]\u7f51\u683c\u56fe\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u53ea\u8981\u4f60\u5bf9 $Kruskal$ \u7684\u672c\u8d28\u8db3\u591f\u719f\u6089\uff0c\u5c31\u53ef\u4ee5\u77ac\u95f4\u60f3\u5230\u6b63\u89e3\u3002\n\n\u4ed4\u7ec6\u770b\u770b $Kruskal$ \u7684\u672c\u8d28\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u5c06 $a[\\,\\,]$ \u548c $b[\\,\\,]$ \u6392\u5e8f\u540e\uff0c\u5982\u679c\u8981\u52a0\u4e00\u6761\u8fb9\uff0c\u5c31\u76f4\u63a5\u53ef\u4ee5\u5c06\u90a3\u4e00\u884c \u6216 \u90a3\u4e00\u5217\u5168\u90e8\u52a0\u4e0a\u3002\u4f8b\u5982\u4e0b\u56fe\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/roslj0pa.png)\n\n\u4e0d\u59a8\u8bbe\u6b64\u65f6\u7684 $a[\\,\\,]$ \u548c $b[\\,\\,]$ \u7686\u662f\u5347\u5e8f\u6392\u5e8f\u540e\u7684\uff0c\u90a3\u5982\u679c\u53d6 $a_1$ \u90a3\u4e48\u53d6 $a_1$ \u8fd9\u4e00\u5217\u90fd\u662f\u6700\u4f18\u7684\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5171\u53d6 $n*m-1$ \u5373\u53ef\u3002\uff08**\u4f46\u662f\u5728\u52a0\u8fb9\u662f\u8981\u5224\u662f\u5426\u6210\u73af**\uff09\n\n\u90a3\u4e48\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((n+m)log(n+m))$\u3002\n\n#### \u4e0a\u83dc\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c))f|=(c=='-'),c=getchar();\n\twhile(isdigit(c))x=x*10+(c&15),c=getchar();\n\treturn f?-x:x;\n}\nint n,m,a[300005],b[300005];\nlong long ans;//\u4e0d\u5f00long long\u89c1\u7956\u5b97\u3002 \nint main()\n{\tn=read(),m=read();\n\tfor(register int i=1;i<=n;i++)a[i]=read();\n\tfor(register int i=1;i<=m;i++)b[i]=read();\n\tsort(a+1,a+n+1);\n\tsort(b+1,b+m+1);\n\tans=(long long)a[1]*(m-1)+(long long)b[1]*(n-1);//\u9996\u5148\u5c06\u6700\u5c0f\u7684\u4e00\u884c \u548c \u6700\u5c0f\u7684\u4e00\u5217\u52a0\u4e0a\u3002 \n\tint cnta=2,cntb=2,h=1,l=1;\n\twhile(cnta<=n&&cntb<=m)\n\t{\tif(a[cnta]<=b[cntb])ans+=(long long)a[cnta++]*(m-l),h++;//\u5224\u73af\u52a0\u8fb9\u3002 \n\t\telse ans+=(long long)b[cntb++]*(n-h),l++;\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1597156214,
        "uid": 127036,
        "name": "woshiSB",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5687 \u3010[CSP-SJX2019]\u7f51\u683c\u56fe\u3011"
    },
    {
        "content": "\u5c51$lzy$\u7684\u5c51\u9898\u89e3\u2014\u2014$P5687$\n\n$1.64pts$\u505a\u6cd5\n\n\u5c31\u662f\u8dd1$Kruskal$\uff08\u4e0d\u6653\u5f97\u62fc\u6ca1\u62fc\u9519\n\n\u4f46\u662f\u6211\u4eec\u7ec6\u7ec6\u4e00\u60f3\uff0c\u8fd9\u4e2a$Kruskal$\u9700\u8981\u6392\u5e8f$n*m$\u6761\u8fb9\uff0c\u975e\u5e38\u6d6a\u8d39\uff0c\u8fd9\u6837\u8dd1\u4e0d\u8fc7$3<=n,m<=3*105$\u7684\u6570\u636e\u8303\u56f4\uff0c\u8fd9\u6837\u5c31\u4e0d\u662f\u6700\u4f18\u7684\u3002\n\n\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u4ee5\u8fb9\u4e3a\u4e3b\u5bfc\u5730\u4f4d\uff0c\u59cb\u7ec8\u9009\u62e9\u5f53\u524d\u53ef\u7528\u7684\u6700\u5c0f\u8fb9\u6743\u7684\u8fb9\uff08\u53ef\u4ee5\u76f4\u63a5$sort$\uff09\u3002\u6bcf\u6b21\u9009\u62e9\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\u94fe\u63a5\u4e24\u4e2a\u7aef\u70b9\u662f$Kruskal$\u7684\u89c4\u5219\uff0c\u5e76\u5b9e\u65f6\u5224\u65ad\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6709\u6ca1\u6709\u95f4\u63a5\u8054\u901a\u3002\n\n\u8fd9\u6837\u7684\u8bdd64pts\u5c31\u62ff\u5230\u624b\u4e86\u3002\n\n2.$68pts$\u505a\u6cd5\n\n\u628a\u6570\u7ec4\u5f00\u5927\u70b9\uff0c$68pts$\u5371\u9669\u7684\u62ff\u5230\u4e86\uff01\n\n\uff08\u5947\u602a\u7684\u5206\u6570\u589e\u52a0\u4e86\uff01\uff01\uff01\n\n3.$100pts$\u505a\u6cd5\n\n\u5eb7\u5eb7\u514b\u9c81\u65af\u5361\u5c14\u7684\u601d\u60f3\uff0c\u6211\u4eec\u518d\u5eb7\u5eb7\u9898\u76ee\uff0c\u5c31\u4f1a\u53d1\u73b0\u5176\u5b9e\u6709\u5f88\u591a\u8fb9\u7684\u8fb9\u6743\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba9\u8fd9\u4e9b\u591a\u4f59\u7684\u8fb9\u4e0d\u53c2\u4e0e$Kruskal$\u7684\u6392\u5e8f\uff0c\u8fd9\u6837\u53ea\u4f1a\u6392\u5e8f$n+m$\u6761\u8fb9\u4e86\u3002\uff08\u56e0\u4e3a\u8fd9\u4e9b\u8fb9\u6743\u4e00\u6837\uff0c\u5176\u4e2d\u4e00\u6761\u8fb9\u4e3a\u6700\u5c0f\uff0c\u5219\u8fd9\u4e9b\u8fb9\u90fd\u4e3a\u6700\u5c0f\uff09\n\n\u6211\u4eec\u8fd8\u5e94\u8be5\u7ef4\u62a4\u4e24\u4e2a\u6307\u9488\uff0c\u6307\u5411\u6a2a\u5411\u7684\u8fb9\u548c\u7eb5\u5411\u7684\uff0c\u6765\u8bb0\u5f55\u6211\u4eec\u4e0b\u4e00\u6b65\u5e94\u8be5\u53d6\u54ea\u4e00\u6761\u8fb9\uff08\u54ea\u4e00\u6761\u8fb9\u6700\u5c0f\uff09\n\u6211\u4eec\u5982\u4f55\u786e\u5b9a\u53d6\u591a\u5c11\u8fb9\u5462\uff1f\n\n\u5f88\u7b80\u5355\uff0c\u5728\u6ca1\u6709\u73af\u7684\u60c5\u51b5\u4e0b\u6700\u591a\u7684\u8fb9\u6570\u5c31\u662f\u6211\u4eec\u8981\u53bb\u7684\u8fb9\u6570\u3002\n\u8fd9\u6837\u5927\u4f53\u601d\u8def\u5c31\u6709\u4e86\u3002\n\n\u90a3\u4e48\u4e0a\u4ee3\u7801\uff01\n```\n#include<algorithm> \n#include<iostream> \nusing namespace std; \nint n,m,a[300010],b[300010];\nlong long ans;//\u8981\u7528longlong!!!\uff08\u5751\u6b7b\u6211\u4e86\uff08awsl \nint main()\n{ \n     cin>>n>>m; \n     for(int i=1;i<=n;i++) cin>>a[i]; \n     for(int i=1;i<=m;i++) cin>>b[i]; \n     sort(a+1,a+n+1);//\u6392\u4e00\u4e0b\u5e8f\uff0c\u4fdd\u8bc1\u53d6\u51fa\u7684\u90fd\u662f\u6700\u5c0f\u7684 \n     sort(b+1,b+m+1); \n     ans=(long long)a[1]*(m-1)+(long long)b[1]*(n-1);//\u6700\u5c0f\u7684\u8fb9\u662f\u80af\u5b9a\u8981\u53d6\u7684 \n     int a_=2,b_=2,l=1,r=1; \n     while(a_<=n&&b_<=m)//\u5982\u679c\u6ca1\u6709\u904d\u5386\u5b8c\n     { \n        if(a[a_]<=b[b_])/*\u5982\u679c\u6b64\u65f6\u6a2a\u5217\u5c0f\u4e8e\u7ad6\u5217*/ans+=(long long)a[a_++]*(m-r),l++;/*ans\u5c31\u52a0\u4e0a\u6574\u4e2a\u6a2a\u5217\uff0c\u884c\u6570++*/ \n        else ans+=(long long)b[b_++]*(n-l),r++;//\u5426\u5219\u52a0\u4e0a\u6574\u4e2a\u7ad6\u5217\uff0c\u5217\u6570++\n     } \n     cout<<ans; \n     return 0; \n}\n```",
        "postTime": 1595062297,
        "uid": 197149,
        "name": "\u591c\u67ad\u53ea\u4f1a\u8214fufu",
        "ccfLevel": 0,
        "title": "\u5c51lzy\u7684\u5c51\u9898\u89e3 P5687 \u3010[CSP-SJX2019]\u7f51\u683c\u56fe\u3011"
    },
    {
        "content": "\u4e00\u9053\u5173\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u7684\u5999\u9898\uff0c\u4e0d\u592a\u96be\u5427\uff0c\u4e3b\u8981\u662f\u770b\u4f60\u4f1a\u4e0d\u4f1a\u8f6c\u6362\u5230kruskal\u7684\u7b97\u6cd5\u6d41\u7a0b\u3002\n\n\u9996\u5148\u6211\u4eec\u53d1\u73b0\u6211\u4eeckruskal\u662f\u628a\u6240\u6709\u7684\u8fb9\u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u7136\u540e\u6211\u4eec\u67e5\u770b\u662f\u5426\u8fde\u901a\u7684\u8fc7\u7a0b\uff01\n\n\u8fd9\u9898\u6211\u4eec\u8003\u8651\u5230\u4e0d\u540c\u7684\u8fb9\u6743\u4e00\u8d77\u8003\u8651\uff0c\u6211\u4eec\u521a\u5f00\u59cb\u53ea\u9700\u8981\u5bf9\u4e00\u4e2a\u8fb9\u6743\u6700\u5c0f\u7684\u884c\u548c\u5217\u628a\u4ed6\u8fde\u63a5\u8d77\u6765\uff0c\u5176\u6b21\u6211\u4eec\u8003\u8651\u8fde\u63a5\u884c\u7684\u65f6\u5019\u6211\u4eec\u8003\u8651\u5df2\u7ecf\u8fde\u63a5\u4e86\u51e0\u5217\uff0c\n\n\u7136\u540e\u5c31\u662f\u539f\u6765\u6240\u6709\u7684\u5217\u6570\u51cf\u53bb\u5df2\u7ecf\u8fde\u7684\u4e2a\u6570\u6211\u4eec\u53ea\u80fd\u8fde\u8fd9\u4e48\u591a\uff0c\u56e0\u4e3a\u90a3\u4e9b\u5df2\u7ecf\u8054\u901a\u4e86\u3002\n\n\u4e3b\u8981\u7684\u539f\u7406\u662f\u6211\u4eec\u8003\u8651\u76f8\u540c\u7684\u6743\u503c\u7684\u8fb9\u5728\u4fdd\u8bc1\u8054\u901a\u7684\u60c5\u51b5\u4e0b\uff0c\u8fde\u54ea\u4e9b\u8fb9\u7684\u610f\u4e49\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\u3002\n\n\u6211\u4eec\u5c31\u6309\u7167\u8fb9\u6743\u628a\u884c\u5217\u653e\u5728\u4e00\u8d77\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u6a21\u62df\uff0c\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u8fde\u4e86\u591a\u5c11\u884c\u548c\u5217\uff0c\u6a21\u62df\u66b4\u529b\u7684\u8fc7\u7a0b\u5c31\u53ef\uff01\n\n\uff08\u4ee3\u7801\u91cc\u7684fl\u548cfl2\u662f\u5206\u522b\u8bb0\u5f55\u4e86\u7b2c\u4e00\u4e2a\u8fde\u7684\u884c\u548c\u7b2c\u4e00\u4e2a\u8fde\u7684\u5217\u6709\u6ca1\u6709\u8fde\u63a5\uff0c\u56e0\u4e3a\u884c\u548c\u5217\u90fd\u5fc5\u987b\u8981\u8fde\u63a5\u4f9d\u6b21\u7684\uff09\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\nusing namespace std;\nconst int N=3e5+5;\nstruct node{int x,type;}a[N<<1];\nint n,m,res,res2,len;bool fl,fl2;LL ans;\nbool cmp(node a,node b){return a.x<b.x;}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,x;i<=n;i++)scanf(\"%d\",&x),a[++len]=(node){x,1};\n\tfor(int i=1,x;i<=m;i++)scanf(\"%d\",&x),a[++len]=(node){x,2};\n\tsort(a+1,a+len+1,cmp);res=n-1;res2=m-1;\n\tfor(int i=1;i<=len;i++)\n\t\tif(a[i].type==1){\n\t\t\tif(!fl)ans+=(LL)(m-1)*a[i].x,fl=true;\n\t\t\telse ans+=(LL)res2*a[i].x,res--; \n\t\t}else{\n\t\t\tif(!fl2)ans+=(LL)(n-1)*a[i].x,fl2=true;\n\t\t\telse ans+=(LL)res*a[i].x,res2--; \n\t\t}\n\tprintf(\"%lld\\n\",ans); \n\treturn 0;\n}\n```\n",
        "postTime": 1600695052,
        "uid": 203968,
        "name": "ConorGallagher23",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5687 \u3010[CSP-SJX2019]\u7f51\u683c\u56fe\u3011"
    },
    {
        "content": "\u9898\u610f\u786e\u5b9e\u6709\u70b9\u96be\u7406\u89e3\uff0c\u6837\u4f8b\u89e3\u91ca\u5982\u4e0b\uff0c\u6ca1\u770b\u61c2\u9898\u7684\u53ef\u4ee5\u53c2\u8003\uff1a\n\n```cpp\no-2-o-2-o\n|   |   |\n1   3   2\n|   |   |\no-4-o-4-o\n|   |   |\n1   3   2\n|   |   |\no-3-o-3-o\n```\n\n\u53d1\u73b0\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u5bf9\u7ed3\u679c\u6ca1\u6709\u5f71\u54cd\uff0c\u5148\u6392\u5e8f\u3002\n\n\u6392\u5e8f\u540e\uff0c\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u663e\u7136\u90fd\u53d6\uff0c\u5148\u52a0\u4e0a\u3002\n\n\u73b0\u5728 $a_i$ \u548c $b_j$ \u90fd\u5355\u8c03\u9012\u589e\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u627e\u5230\u6bcf\u4e00\u884c\u4e2d $b_j$ \u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e $a_i$ \u7684\uff0c\u4e0b\u6807\u8bb0\u4f5c $pos$\uff0c\u5219\u4fdd\u8bc1\u4e86\u8fd9\u4e00\u884c\u4ece $2$ \u5230 $m$ \u6bcf\u4e00\u6b65\u90fd\u53d6\u6700\u5c0f\u3002\n\n\u5f62\u8c61\u7684\u6765\u8bf4\uff0c\u6392\u5e8f\u540e\uff0c\u5f53\u524d\u70b9\u53ea\u6709\u4e0a\u6216\u548c\u5de6\u65b9\u80fd\u4ee5\u6700\u77ed\u7684\u8def\u5230\u8fbe\u5f53\u524d\u70b9\uff0c\u8003\u8651\u6bcf\u4e00\u6b21\u662f\u4ece\u4e0a\u65b9\u4e0b\u6765\u8fd8\u662f\u4ece\u5de6\u8fb9\u8fc7\u6765\u3002\u7531\u4e8e\u5e8f\u5217\u5355\u8c03\uff0c\u6240\u4ee5\u5fc5\u6709\u4e00\u4e2a\u4e2d\u65ad\u70b9\uff0c\u4e8c\u5206\u67e5\u627e\u5373\u53ef\u3002\n\n\u6bcf\u4e00\u6b21\u52a0\u4e0a $sum[pos-1]-b[1]+a[i]\\times (m-pos+1)$\uff0c\u5176\u4e2d $sum$ \u6570\u7ec4\u8868\u793a $b$ \u6570\u7ec4\u7684\u524d\u7f00\u548c\uff0c\u7531\u4e8e $b_1$ \u5df2\u7ecf\u9009\u8fc7\uff0c\u6240\u4ee5\u8981\u51cf\u53bb\u3002\n\n- \u6ce8\u610f\uff1a$sum$ \u6570\u7ec4\u662f\u6392\u5e8f\u540e $b$ \u6570\u7ec4\u7684\u524d\u7f00\u548c\uff01\uff01\uff01\n\n- \u6ce8\u610f\uff1a\u4e8c\u5206\u67e5\u627e\u7684\u533a\u95f4\u662f $[2,m]$\uff01\uff01\uff01\n\n- \u6ce8\u610f\uff1a\u5f00 `long long`\uff01\uff01\uff01\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n\ninline int read(){\n\tint x=0,f=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9'){\n\t\tif(c=='-')f=-1;\n\t\tc=getchar();\n\t}\n\twhile(c<='9'&&c>='0'){\n\t\tx=(x<<1)+(x<<3)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn x*f;\n}\n\ninline void print(ll x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>9)print(x/10);\n\tputchar(x%10^48);\n}\n\nconst int MAXN=3e5+5;\nint n,m;\nll a[MAXN],b[MAXN],sum[MAXN],ans;\n\nint find(int x){\n\tint l=2,r=m;\n\twhile(l<=r){\n\t\tint mid=l+r>>1;\n\t\tif(b[mid]>x)r=mid-1;\n\t\telse l=mid+1;\n\t}\n\treturn l;\n}\n\nint main(){\n    n=read(),m=read();\n    for(int i=1;i<=n;++i){\n    \ta[i]=read();\n\t}\n\tfor(int i=1;i<=m;++i){\n\t\tb[i]=read();\n\t}\n\tsort(a+1,a+n+1);\n\tsort(b+1,b+m+1);\n\tfor(int i=1;i<=m;++i){\n\t\tsum[i]=sum[i-1]+b[i];\n\t}\n\tans=a[1]*(m-1)+b[1]*(n-1);\n\tfor(int i=2;i<=n;++i){\n\t\tint pos=find(a[i]);\n\t\tans+=sum[pos-1]-b[1]+a[i]*(m-pos+1);\n\t}\n\tprint(ans);\n    return 0;\n}\n```",
        "postTime": 1628091198,
        "uid": 271736,
        "name": "Daidly",
        "ccfLevel": 6,
        "title": "P5687 [CSP-S2019 \u6c5f\u897f] \u7f51\u683c\u56fe \u9898\u89e3"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa\u4e00\u4e2a $n*m$ \u7684\u77e9\u9635\uff0c\u77e9\u9635\u4e2d\u6bcf\u4e00\u884c\uff0c\u6bcf\u4e00\u5217\u7684\u70b9\u8fde\u8fb9\uff0c\u540c\u4e00\u884c\u6216\u540c\u4e00\u5217\u7684\u8fb9\u7684\u8fb9\u6743\u76f8\u540c\u3002\u7ed9\u5b9a\u6bcf\u884c\u548c\u6bcf\u5217\u7684\u8fb9\u6743\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u3002\n\n### \u601d\u8def\u5206\u6790\n\n\u89c2\u5bdf\u6570\u636e\u70b9\u53d1\u73b0\uff0c\u524d $64%$ \u7684\u6570\u636e\u53ef\u4ee5\u901a\u8fc7\u66b4\u529b\u5efa\u56fe\uff0c\u8dd1 Kruskal \u89e3\u51b3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n*m*log(n*m))$\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u65e2\u7136\u6bcf\u4e00\u884c\u6bcf\u4e00\u5217\u7684\u8fb9\u6743\u90fd\u662f\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u7528 Kruskal \u591a\u6b21\u52a0\u5165\u8fb9\u6743\u76f8\u540c\u7684\u8fb9\u662f\u5f88\u6d6a\u8d39\u65f6\u95f4\u7684\u3002\u53ef\u4ee5\u5bf9\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684 $a$ \u6570\u7ec4\u548c $b$ \u6570\u7ec4\u5206\u522b\u6392\u5e8f\uff0c\u6392\u5b8c\u5e8f\u540e\uff0c\u52a0\u8fb9\u65f6\u53ef\u4ee5\u4e00\u6b21\u52a0\u4e00\u6574\u884c\u6216\u4e00\u6574\u5217\u7684\u8fb9\uff0c\u540c\u65f6\u5224\u65ad\u662f\u5426\u5f62\u6210\u73af\u5373\u53ef\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define N 300005\nusing namespace std;\n\nint read(){\n    int res=0;\n    char ch=getchar();\n    int f=1;\n    while(ch<'0' || ch>'9'){\n        if(ch=='-')\n            f=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9'){\n        res=res*10+ch-'0';\n        ch=getchar();\n    }\n    return res*f;\n}\n\nvoid out(int x){\n    if(x>=10)\n        out(x/10);\n    putchar(x%10+'0');\n}\nvoid out1(int x){\n    if(x<0)\n        putchar('-');\n    out(abs(x));\n}\nvoid out2(int x){\n    out1(x);\n    putchar('\\n');\n}\n\nint n,m;\nint a[N],b[N];\n/*\nstruct node{\n    int from;\n    int to;\n    int next;\n    int val;\n}edge[N*N*2];\nint head[N*N+10];\nint cnt;\n\nvoid add(int u,int v,int val){\n    edge[++cnt].to=v;\n    edge[cnt].from=u;\n    edge[cnt].val=val;\n    edge[cnt].next=head[u];\n    head[u]=cnt;\n}\n\nint fa[N*N+10];\n\nvoid init(){\n    for(int i=1;i<=cnt;i++){\n        fa[i]=i;\n    }\n}\n\nint find(int x){\n    if(fa[x]==x)\n        return fa[x]=x;\n    return fa[x]=find(fa[x]);\n}\n\nvoid merge(int x,int y){\n    int rt1=find(x);\n    int rt2=find(y);\n    if(rt1!=rt2)\n         fa[rt1]=rt2;\n}\n\nbool cmp(node a,node b){\n    return a.val<b.val;\n}*/\n\nint tot,ans;\n\nsigned main(){\n    n=read(),m=read();\n    for(int i=1;i<=n;i++){\n        a[i]=read();\n    }\n    for(int i=1;i<=m;i++){\n        b[i]=read();\n    }\n    sort(a+1,a+1+n);\n    sort(b+1,b+1+m);\n    //init();\n    /*\n    for(int i=1;i<=cnt;i++){\n        int u=edge[i].from;\n        int v=edge[i].to;\n        int val=edge[i].val;\n        if(find(u)!=find(v)){\n            merge(u,v);\n            tot++;\n            ans+=val;\n        }\n        if(tot==n*m-1)\n            break;\n    }*/\n    ans+=a[1]*(m-1)+b[1]*(n-1);\n    int la=1;\n    int lb=1;\n    int na=2;\n    int nb=2;\n    while(na<=n && nb<=m){\n        if(a[na]<=b[nb]){\n            ans+=a[na]*(m-lb);\n            na++;\n            la++;\n        }\n        else{\n            ans+=b[nb]*(n-la);\n            nb++;\n            lb++;\n        }\n    }\n    out2(ans);\n    return 0;\n}\n```\n",
        "postTime": 1622122097,
        "uid": 225607,
        "name": "hellhell",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P5687 [CSP-S2019 \u6c5f\u897f] \u7f51\u683c\u56fe"
    }
]