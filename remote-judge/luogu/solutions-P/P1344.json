[
    {
        "content": "###  **\u9898\u610f\uff1a**\r\n\r\n \u7b80\u5355\u8bb2\uff0c\u672c\u9898\u7ed9\u51fa\u4e86\u8fb9\u7684\u6743\u503c\uff0c\u8981\u6c42\u6700\u5c0f\u7684\u4ee3\u4ef7\u4f7f\u5f971\u548cn\u4e0d\u8fde\u901a\u3002\u8fd9\u4e0d\u5c31\u662f\u6700\u5c0f\u5272\u561b\uff01\u6211\u4eec\u76f4\u63a5\u628a1\u5f53\u4f5cS\uff0cn\u5f53\u4f5cT\u3002  \u7b80\u5355\u8bb2\uff0c\u672c\u9898\u7ed9\u51fa\u4e86\u8fb9\u7684\u6743\u503c\uff0c\u8981\u6c42\u6700\u5c0f\u7684\u4ee3\u4ef7\u4f7f\u5f971\u548cn\u4e0d\u8fde\u901a\u3002\u8fd9\u4e0d\u5c31\u662f\u6700\u5c0f\u5272\u561b\uff01\u6211\u4eec\u76f4\u63a5\u628a1\u5f53\u4f5cS\uff0cn\u5f53\u4f5cT\u3002\r\n\r\n### **\u601d\u8def\uff1a**\r\n\r\n\r\n \u56e0\u4e3a\u672c\u9898\u65e2\u8981\u8f93\u51fa\u6700\u5c0f\u5272\u7684\u503c\u53c8\u8981\u8f93\u51fa\u5272\u7684\u8fb9\u6570\uff0c\u524d\u8005\u597d\u6c42\u5173\u952e\u662f\u540e\u8005\u5982\u4f55\u53bb\u6c42\u66f4\u7b80\u5355\uff0c\u5bb9\u6613\u60f3\u5230\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5efa\u4e24\u6b21\u56fe\uff0c\u4e00\u6b21\u6309\u539f\u8fb9\u6743\u5efa\u56fe\u8dd1\u6700\u5927\u6d41\u6c42\u5f97\u6700\u5c0f\u5272\uff0c\u518d\u6309\u8fb9\u6743\u4e3a1\u5efa\u56fe\u8dd1\u6700\u5927\u6d41\u6c42\u5272\u7684\u8fb9\u6570\uff0c\u8fd9\u662f\u4e00\u79cd\u601d\u8def;\r\n\r\n\r\n\u5f53\u7136\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u6362\u79cd\u601d\u8def\u7528\u4e00\u6b21\u6700\u5927\u6d41\u641e\u5b9a\uff0c\u53ea\u9700\u5efa\u56fe\u65f6\u5c06\u8fb9\u6743w=w\\*a+1\uff08w\u4e3a\u672c\u6765\u7684\u8fb9\u6743\uff0ca\u4e3a\u5927\u4e8e1000\u7684\u6570\uff09\uff0c\u8fd9\u6837\u6211\u4eec\u80fd\u6c42\u5f97\u6700\u5927\u6d41ans\uff0c\u5219\u6700\u5c0f\u5272\u7684\u503c\u4e3aans/a\uff0c\u5272\u7684\u8fb9\u6570\u4e3aans%a\u3002\u8fd9\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u4f46\u662f\u8fd8\u662f\u89e3\u91ca\u4e00\u4e0b\uff1a\u56e0\u4e3a\u6700\u5c0f\u5272\u7684\u8fb9\u96c6\u4e2d\u6709w1+w2+w3\u2026+wn=ans\uff08\u8fd9\u4e2aans\u4e3a\u672c\u6765\u7684\u6700\u5c0f\u5272\uff09\uff0c\u6240\u4ee5\u5fc5\u7136\u6709w1\\*a+w2\\*a+w3\\*a\u2026+wn\\*a=ans\\*a\uff0c\u4e8e\u662f\u5fc5\u7136\u6709w1\\*a+1+w2\\*a+1+w3\\*a+1\u2026+wn\\*a+1=ans\\*a+k(k\u4e3a\u6700\u5c0f\u5272\u7684\u8fb9\u6570\uff0ck<=m<=1000)\uff0c\u8fd9\u6837\u5c31\u5f88\u660e\u663e\u4e86\uff0c\u56e0\u4e3a\u8fb9\u6570m\u4e0d\u5927\u4e8e1000\uff0c\u6240\u4ee5k\u7684\u6700\u5927\u503c\u4e3a1000\uff0c\u6211\u4eec\u53ea\u8981\u4f7f\u8bbe\u5b9a\u7684a\u7684\u503c\u5927\u4e8e1000\uff0c\u90a3\u4e48\u6309\u4e0a\u8ff0\u65b9\u6cd5\u5efa\u56fe\uff0c\u8dd1\u51fa\u7684\u6700\u5927\u6d41\u9664\u4ee5a\u5c31\u662f\u6700\u5c0f\u5272\u7684\u503cans\uff0c\u6700\u5927\u6d41\u6a21a\u5c31\u662f\u6700\u5c0f\u5272\u7684\u8fb9\u6570k\u3002\r\n\r\n\r\n### **\u4ee3\u7801\uff1a**\r\n\r\n```cpp\r\n    // luogu-judger-enable-o2\r\n    #include<bits/stdc++.h>\r\n    #define il inline\r\n    #define ll long long \r\n    #define debug printf(\"%d %s\\n\",__LINE__,__FUNCTION__)\r\n    using namespace std;\r\n    const ll N=100005,inf=233333333333333,mod=2018;\r\n    ll n,m,s,t,h[100],dis[2005],cnt=1;\r\n    ll ans;\r\n    struct edge{\r\n    ll to,net;ll v;\r\n    }e[N];\r\n    il void add(ll u,ll v,ll w)\r\n    {\r\n        e[++cnt].to=v,e[cnt].net=h[u],e[cnt].v=w,h[u]=cnt;\r\n        e[++cnt].to=u,e[cnt].net=h[v],e[cnt].v=0,h[v]=cnt;\r\n    }\r\n    queue<ll>q;\r\n    il bool bfs()\r\n    {\r\n        memset(dis,-1,sizeof(dis));\r\n        q.push(s),dis[s]=0;\r\n        while(!q.empty())\r\n        {\r\n            int u=q.front();q.pop();\r\n            for(int i=h[u];i;i=e[i].net)\r\n            if(dis[e[i].to]==-1&&e[i].v>0)dis[e[i].to]=dis[u]+1,q.push(e[i].to);\r\n        }\r\n        return dis[t]!=-1;\r\n    }\r\n    il ll dfs(ll u,ll op)\r\n    {\r\n        if(u==t)return op;\r\n        ll flow=0,used=0;\r\n        for(int i=h[u];i;i=e[i].net)\r\n        {\r\n            int v=e[i].to;\r\n            if(dis[v]==dis[u]+1&&e[i].v>0)\r\n            {\r\n                used=dfs(v,min(op,e[i].v));\r\n                if(!used)continue;\r\n                flow+=used,op-=used;\r\n                e[i].v-=used,e[i^1].v+=used;\r\n                if(!op)break;\r\n            }\r\n        }\r\n        if(!flow)dis[u]=-1;\r\n        return flow;\r\n    }\r\n    int main()\r\n    {\r\n        scanf(\"%lld%lld\",&n,&m);s=1,t=n;\r\n        ll u,v;ll w;\r\n        for(int i=1;i<=m;i++)\r\n        {\r\n            scanf(\"%lld%lld%lld\",&u,&v,&w);\r\n            add(u,v,w*mod+1);\r\n        }\r\n        while(bfs())ans+=dfs(s,inf);\r\n        printf(\"%lld %lld\\n\",ans/mod,ans%mod);\r\n        return 0;\r\n}\r\n```",
        "postTime": 1515938729,
        "uid": 44000,
        "name": "\u6d45\u8272\u8c03",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1344 \u3010[USACO4.4]\u8ffd\u67e5\u574f\u725b\u5976Pollutant Control\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4eba\u751f\u7684\u7b2c\u4e00\u9053\u7d2b\u9898\uff01[\u6233\u8fd9\u91cc\uff0c\u8ffd\u8e2a\u79d2A\u6df1\u84dd\u9898\u7684dalao](https://www.luogu.org/space/show?uid=65849)\n\n---\n\u5176\u5b9e\u8fd9\u9053\u9898\u6700\u4e3b\u8981\u7684\u5c31\u662f\u8bc1\u6700\u5c0f\u5272=\u6700\u5927\u6d41\u3002\u7136\u800c\u3002\u3002\u3002\u6211\u592a\u83dc\u4e86\uff0c\u4e0d\u4f1a\u63a8\uff0c\u770bdalao\u7684\u535a\u5ba2\u624d\u61c2\u7684\u3002\u81f3\u4e8e\u8fc7\u7a0b\u3002\u3002\u3002\u8f6c\u81eadalao\u7334\u5b50\u7684\u535a\u5ba2\uff1a[\u6ed1\u5440\u6ed1\u5440\u6ed1\u5440\u6ed1\u7a3d](https://blog.csdn.net/zhangjianjunab)\n\n\u597d\u7684\uff0c\u6700\u5173\u952e\u7684\u6b65\u9aa4\u5df2\u7ecf\u7ed9\u51fa\u6765\u4e86\u3002\u4e0b\u9762\u5c31\u8bf4\u8bf4\u4e00\u4e9b\u5751\u70b9\u5427\u3002\n\n- **\u5751\u70b91:\u4f18\u5316\u4e00\u5b9a\u8981\u52a0\uff0c\u4e0d\u52a0\u4f1a\u8d85\u65f6**\n\ndalao\u7684\u535a\u5ba2\u91cc\u7ed9\u51fa\u4e86\u4e00\u884c\u6ce8\u91ca\uff0c\u5dee\u4e0d\u591a\u662f\u8fd9\u6837\u7684\uff1a\n```cpp\nfor(int i=1;i<=m;i++)/*\u5176\u5b9e\u8fd8\u53ef\u4ee5\u52a0\u4e2a\u4f18\u5316\uff0c\u5224\u65ad\u4ed6\u662f\u4e0d\u662f\u7206\u6d41\u7684\u518d\u8fdb\u5165\uff0c\u61d2\u5f97\u6253*/\n{\n\tmemset(a,0,sizeof(a));\n    memset(last,0,sizeof(last));\n    len=0;\n}\n```\n\u7136\u9e45\uff01\u8fd9\u4e2a\u4f18\u5316\u4e00\u5b9a\u8981\u52a0\uff0c\u5426\u5219\u771f\u7684\u4f1a\u8d85\u65f6\u3002\u5177\u4f53\u6539\u8fdb\u5982\u4e0b\uff1a\n```cpp\nfor(int i=1;i<=m;i++)\n{\n\tif(d[j].c<=ans)\n    {\n    \tmemset(last,0,sizeof(last));\n        len=0;\n    }\n}\n```\n\n- **\u5751\u70b92:\u6d1b\u8c37\u5220\u4e86\u4e00\u4e2a\u95ee**\n\n\u5176\u5b9e\u5b98\u7f51\u4e0a\u8fd8\u6709\u4e00\u4e2a\u95ee\uff0c\u90a3\u5c31\u662f\u8981\u5272\u54ea\u51e0\u6761\u8fb9\u8981\u8f93\u51fa\u51fa\u6765\u3002\u6d1b\u8c37\u662f\u5220\u9664\u4e86\u4e00\u4e2a\u95ee\u7684\u3002\n\n\u4e0d\u8fc7\u8fd9\u4e5f\u4e0d\u662f\u5f88\u96be\uff0c\u76f4\u63a5\u5728\u5bfb\u627e\u7684\u65f6\u5019\u8bb0\u5f55\u8f93\u51fa\u5c31\u53ef\u4ee5\u4e86\u3002\n\n- **\u5751\u70b93:\u6392\u5e8f\u5f88\u91cd\u8981**\n\n\u5728\u8fdb\u884c\u5bfb\u627e\u5272\u8fb9\u4e4b\u524d\uff0c\u4e00\u5b9a\u8981\u6392\u5e8f\u3002\u56e0\u4e3a\u5982\u679c\u4e0d\u6392\u5e8f\u7684\u8bdd\uff0c\u4f1a\u6709\u5982\u4e0b\u5f71\u54cd\uff1a\n\nemmm...\u4e0d\u77e5\u4e3a\u4ec0\u4e48\u56fe\u5899\u7a81\u7136\u63d2\u4e0d\u4e86\u56fe\u7247\u4e86\uff0c\u624b\u52a8\u8f93\u5165\u6570\u636e\u5427...\n```\n8 9\n1 2 2\n1 3 1\n3 4 1\n2 4 2\n4 5 3\n5 6 1\n5 7 2\n7 8 2\n6 8 1\n```\n\u5982\u679c\u4e0d\u6392\u5e8f\uff0c\u4f1a\u8f93\u51fa2\uff0c\u8981\u52721\u30012\u8fd9\u4e24\u6761\u8fb9\u3002\u4f46\u662f\u6b63\u786e\u7b54\u6848\u662f\u52725\u8fd9\u6761\u8fb9\u3002\n\n- **\u5751\u70b94:\u8f93\u51fa\u4e5f\u8981\u6392\u5e8f**\n\n\u8f93\u51fa\u7684\u65f6\u5019\u4e5f\u8981\u6309\u7167\u8fb9\u7684\u5e8f\u53f7\u6392\u4e00\u904d\u5e8f\u3002\n\n\u987a\u4fbf\u63d0\u4e00\u53e5\uff0c\u5751\u70b93\u4e2d\u7684\u6392\u5e8f\u53ea\u80fd\u7528qsort\uff0c\u4e0d\u80fd\u7528sort...\u6211\u672c\u6765\u662f\u7528sort\u7684\uff0c\u4f46\u662f...\u70b8\u4e86...\u6240\u4ee5\u611f\u89c9sort\u7279\u522b\u4e0d\u7a33\u5b9a\uff0c\u4ee5\u540e\u8fd8\u662f\u7528qsort\u5427...\n\n------------\n\n\u597d\u7684\uff0c\u4e0d\u5570\u55e6\u4e86\uff0c\u4e0a\u4ee3\u7801\uff1a\n```cpp\n/*\nID:zhangji78\nLANG:C++\nTASK:milk6\n*/\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int inf=99999999;\nstruct node\n{\n\tint x,y,c,next,other,ds;\n}a[2100],d[2100];int len,last[2100];\nvoid ins(int x,int y,int c)\n{\n\tlen++;int k1=len;\n\ta[len].x=x;a[len].y=y;a[len].c=c;\n\ta[len].next=last[x];last[x]=len;\n\tlen++;int k2=len;\n\ta[len].x=y;a[len].y=x;a[len].c=0;\n\ta[len].next=last[y];last[y]=len;\n\ta[k1].other=k2;\n\ta[k2].other=k1;\n}\nint list[2100],head,tail,h[2100];\nint st,ed,b[2100],lenb;\nbool bfs()\n{\n\tmemset(h,0,sizeof(h));h[st]=1;\n\tlist[1]=st;head=1;tail=2;\n\twhile(head<tail)\n\t{\n\t\tint x=list[head];\n\t\tfor(int k=last[x];k;k=a[k].next)\n\t\t{\n\t\t\tint y=a[k].y;\n\t\t\tif(h[y]==0&&a[k].c>0)\n\t\t\t{\n\t\t\t\th[y]=h[x]+1;\n\t\t\t\tlist[tail]=y;\n\t\t\t\ttail++;\n\t\t\t}\n\t\t}\n\t\thead++;\n\t}\n\tif(h[ed]==0)return false;\n\telse return true;\n}\nint findflow(int x,int f)\n{\n\tif(x==ed)return f;\n\tint s=0;\n\tfor(int k=last[x];k;k=a[k].next)\n\t{\n\t\tint y=a[k].y;\n\t\tif(h[y]==h[x]+1&&a[k].c>0&&s<f)\n\t\t{\n\t\t\tint t=findflow(y,min(a[k].c,f-s));\n\t\t\ts+=t;a[k].c-=t;a[a[k].other].c+=t;\n\t\t}\n\t}\n\tif(s==0)h[x]=0;\n\treturn s;\n}\nint cmp(const void *xx,const void *yy)\n{\n\tnode n1=*(node *)xx;\n\tnode n2=*(node *)yy;\n\tif(n1.c<n2.c)return 1;\n\telse return -1;\n}\nbool bk[21000];\nint main()\n{\n\t//freopen(\"milk6.in\",\"r\",stdin);\n\t//freopen(\"milk6.out\",\"w\",stdout);\n\tint n,m;scanf(\"%d%d\",&n,&m);\n\tlen=0;memset(last,0,sizeof(last));\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,c;scanf(\"%d%d%d\",&x,&y,&c);\n\t\tins(x,y,c);d[i].x=x;d[i].y=y;d[i].c=c;d[i].ds=i;\n\t}\n\tst=1;ed=n;\n\tll ans=0;\n\twhile(bfs()==true)ans+=findflow(st,inf);\n\tprintf(\"%lld \",ans);\n\tqsort(d+1,m,sizeof(node),cmp);\n\tmemset(bk,false,sizeof(bk));int kk=len;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(d[i].c<=ans)\n\t\t{\n\t\t\tmemset(last,0,sizeof(last));\n\t\t\tlen=0;\n\t\t\tfor(int j=1;j<=m;j++)\n\t\t\t{\n\t\t\t\tif(bk[d[j].ds]==false&&i!=j)ins(d[j].x,d[j].y,d[j].c);\n\t\t\t}\n\t\t\tll sum=0;\n\t\t\twhile(bfs()==true)sum+=findflow(st,inf);\n\t\t\tif(sum+d[i].c==ans)\n\t\t\t{\n\t\t\t\tans-=d[i].c;\n\t\t\t\tbk[d[i].ds]=true;\n\t\t\t\tb[++lenb]=d[i].ds;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",lenb);\n\tif(lenb!=0)\n\t{\n\t\tsort(b+1,b+lenb+1);\n\t\tfor(int i=1;i<=lenb;i++)printf(\"%d\\n\",b[i]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1524790718,
        "uid": 44157,
        "name": "zhangjianweivv",
        "ccfLevel": 0,
        "title": "[USACO4.4]\u8ffd\u67e5\u574f\u725b\u5976Pollutant Control"
    },
    {
        "content": "\u9898\u89e3 by redbag\n\n\u7b2c\u4e00\u95ee:\u6c42\u6700\u5927\u6d41(\u6700\u5c0f\u5272\u6700\u5927\u6d41\u4e00\u6837\u7684)\n\n\u7136\u540e\u628a\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f(\u56e0\u4e3a\u8981\u4f7f\u505c\u6b62\u7684\u8def\u7ebf\u6700\u5c11)\n\n\u4e00\u6761\u4e00\u6761\u8fb9\u53bb\u5224\u65ad,\u5982\u679c\u5220\u53bb\u8be5\u8fb9\u4e4b\u540e,\u51cf\u5c0f\u7684\u6700\u5927\u6d41\u7b49\u4e8e\u8be5\u8fb9\u7684\u8fb9\u6743(\u4e5f\u5c31\u662f\u635f\u5931),\u90a3\u4e48\u5c31\u5220\u4e86\u8fd9\u6761\u8fb9.\n\n//\u5220\u4e86\u4e4b\u540e\u8bb0\u5f97\u51cf\u53bb\n\n\u4ecex\u5230y\u53ef\u4ee5\u6709\u5f88\u591a\u6761\u4e0d\u540c\u7684\u8def\uff0c\u6240\u4ee5\u5728\u5220\u8fb9\u65f6\u4e0d\u80fd\u76f4\u63a5\u8d4b\u62100\uff0c\u800c\u662f\u51cf\u6389\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u3002\n\n\u6240\u4ee5\u7b2c\u4e8c\u95ee\u4e5f\u5e76\u4e0d\u590d\u6742(\u7136\u800c\u6d1b\u8c37\n\n\n```cpp\n/*\nID: ylx14271\nPROG: milk6\nLANG: C++\n */\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint read()\n{\n    char s;int k=0,base=1;\n    while((s=getchar())!='-'&&s!=EOF&&!(s>='0'&&s<='9'));\n    if(s==EOF)exit(0);\n    if(s=='-')base=-1,s=getchar();\n    while(s>='0'&&s<='9'){k=k*10+(s-'0');s=getchar();}\n    return k*base;\n}\nvoid write(int x)\n{\n    if(x<0){putchar('-');write(-x);}\n    else{if(x/10)write(x/10);putchar(x%10+'0');}\n}\nint pre[100];\nint n,m;\nstruct node\n{\n    int u,v,w;//w:\u635f\u5931\n    int id;\n} a[3000];\nint f[50][50];//\u6d41\u91cf(\u635f\u5931\nint c[50][50];\nint p[100],a1;\nint u1,v1,c1;\nint q[4000];\nvoid add(int uu,int vv,int ww)//\u8fde\u4e24\u6761\u8fb9,\u4e00\u6761\u6b63\u7684\u8fb9\u548c\u4e00\u6761\u53cd\u5411\u8fb9\n{\n    f[uu][vv]+=ww;//\u52a0\u5230uu\u2192vv\u8fd9\u6761\u8fb9\u4e0a\u53bb\n    a1++;\n    a[a1].id=a1;\n    a[a1].u=uu;a[a1].v=vv;a[a1].w=ww;//\u5b58\u8d77\u6765\n}\nint w[4000],d1;\nint cmp(node aa,node bb)\n{\n    if (aa.w==bb.w) return aa.id<bb.id;\n    return aa.w>bb.w;\n}\nint spfa(int x)\n{\n    memcpy(c,f,sizeof(c));//c\u5b58f\u6570\u7ec4\u7684\u4e1c\u897f\n    c[a[x].u][a[x].v]-=a[x].w;//\u5220\u6389\u8fd9\u6761\u8fb9\n    int ans1=0;\n    while (true)//\u641c\u5230 \u641c\u4e0d\u5230\u8def\u5f84\n    {\n        int l=0,r=1;q[1]=1;\n        memset(pre,-1,sizeof(pre));//\u521d\u59cb\u5316\n        while (l<r)\n        {\n            l++;\n            int x1=q[l];\n            //cout<<x1<<\" \";\n            for (int i=1;i<=n;i++)\n            {\n                if (c[x1][i]>0&&pre[i]==-1)//\u6ca1\u88ab\u8d70\u8fc7(\u6ca1\u6709\u524d\u9a71)\u5e76\u4e14\u6d41\u91cf<\u5bb9\u91cf\n                {\n                    pre[i]=x1;//\u6807\u8bb0\n                    r++;q[r]=i;//\u5165\u961f\n                }\n            }\n            if (pre[n]>0) break;//\u641c\u5b8c\u4e86\n        }\n        //cout<<endl;\n        if (pre[n]==-1) break; //\u627e\u4e0d\u5230\u5c31\u9000\u6389\n        int mi=233333333;\n        for (int i=n;i>1;i=pre[i]) mi=min(mi,c[pre[i]][i]);//\u627e\u74f6\u9888\n        for (int i=n;i>1;i=pre[i]) c[pre[i]][i]-=mi;//\u51cf\u53bb\n        ans1+=mi;\n        //cout<<\"---   \"<<mi<<\"   \\n\";\n    }\n    return ans1;\n}\nint main()\n{\n    freopen(\"milk6.in\",\"r\",stdin);\n    freopen(\"milk6.out\",\"w\",stdout);\n    n=read();\n    m=read();\n    a1=0;\n    for (int i=1;i<=m;i++)//\u5efa\u56fe\n    {\n        u1=read();v1=read();c1=read();\n        add(u1,v1,c1);\n    }\n    int xxx=spfa(0);//\u627e\u6700\u5927\u6d41\n    printf(\"%d \",xxx);\n    d1=0;\n    int s1=0;\n    sort(a+1,a+m+1,cmp);\n    for (int j=1;j<=m;j++)//\u4e00\u6761\u4e00\u6761\u8fb9\u7684\u5220\n    {\n        s1=spfa(j);\n        if (s1+a[j].w==xxx)    \n        {\n            f[a[j].u][a[j].v]-=a[j].w;//\u5f00\u59cb\u6ca1\u5199\u8fd9\u53e5\u7136\u540e\u70b8\u4e86\n            d1++;//\u5b58\u8d77\u6765\n            w[d1]=a[j].id;\n            xxx=s1;\n        }\n    }\n    printf(\"%d\\n\",d1);\n    sort(w+1,w+d1+1);//\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n    for (int i=1;i<=d1;i++) printf(\"%d\\n\",w[i]);\n    return 0;\n}\n```",
        "postTime": 1499402332,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1344 \u3010[USACO4.4]\u8ffd\u67e5\u574f\u725b\u5976Pollutant Control\u3011"
    },
    {
        "content": "\u6b64\u9898\u539f\u9898\u6709\u7b2c\u4e09\u95ee:\u6784\u9020\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6700\u5c0f\u5272~~\u7136\u800c\u6d1b\u8c37\u4e0a\u5e76\u6ca1\u6709~~\n\n\u7b2c\u4e00\u95ee\uff1a\u88f8\u7684\u6700\u5c0f\u5272\uff0c\u4e0d\u8bb2\n\n\u7b2c\u4e8c\u95ee\uff1a\u628a\u8fb9\u6743\u6539\u4e3a$(m+1)f_i+1$\uff0c\u518d\u505a\u4e00\u904d\u6700\u5c0f\u5272\uff0c\u5219\u7531\u4e8e\u8fb9\u6570\u4e0d\u53ef\u80fd\u8d85\u8fc7$m$\uff0c\u90a3\u4e48$\\!\\mod m$\u5373\u53ef\u5f97\u5230\u6700\u5c0f\u5272\u7684\u6700\u5c0f\u8fb9\u6570\u3002\n\n\u6211\u4eec\u5728\u6b64\u57fa\u7840\u4e0a\u89e3\u51b3\u7b2c\u4e09\u95ee\u3002\n\n\u8003\u8651\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\u662f\u5426\u8981\u9009\u3002\u5224\u65ad\u65b9\u6cd5\u5373\u5220\u53bb\u8fd9\u6761\u8fb9\uff0c\u9009\u62e9\u7684\u6761\u4ef6\u4e3a\uff1a\u4f7f\u6700\u5c0f\u5272\u964d\u4f4e$f_i$\u4e14\u4f7f\u6700\u5c0f\u8fb9\u6570\u964d\u4f4e$1$\uff08\u5373\u964d\u4f4e$(m+1)f_i+1$\u3002\u8fd9\u91cc\u53ef\u4ee5\u8fd0\u7528\u6709\u4e0b\u754c\u7684\u7f51\u7edc\u6d41\u7684\u601d\u60f3\uff0c\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u9000\u6389$u$\u5230$v$\u7684\u6d41\u3002\u5177\u4f53\u65b9\u6cd5\u662f\u4ece$1$\u5230$n$\u5efa\u4e00\u6761\u6743\u503c$+\\infty$\u7684\u8fb9\uff0c\u7136\u540e\u4ece$u$\u5230$v$\u8dd1\u4e00\u904d\u7f51\u7edc\u6d41\uff08\u9650\u5236\u603b\u6d41\u91cf\u4e0a\u9650\u4e3a$(m+1)f_i+1$\uff09\u3002\u8fd9\u6837\u603b\u6d41\u91cf\u7684\u51cf\u5c0f\u91cf\u5373\u4e3a\u76f4\u63a5\u8fde\u63a5$1$\u5230$n$\u7684\u8fb9\u4e0a\u6d41\u7684\u5dee\u91cf\u3002\u5982\u679c\u5408\u6cd5\uff08\u5373\u51cf\u5c0f\u91cf\u4e3a$f_i$\u4e14$1$\u5230$n$\u65e0\u589e\u5e7f\u8def\uff09\uff0c\u5219\u8be5\u8fb9\u5e94\u5f53\u9009\u62e9\u3002\u82e5\u4e0d\u9009\u62e9\uff0c\u5219\u518d\u505a\u4e00\u6b21\u7c7b\u4f3c\u7684\u4e8b\u60c5\u4ee5\u8fd8\u539f\u73b0\u573a\uff08\u8fd9\u4e2a\u505a\u6cd5\u65e0\u6cd5\u4fdd\u8bc1\u6d41\u91cf\u6700\u5927\uff0c\u9664\u975e\u63a7\u52361,n\u4e4b\u95f4\u7684\u8fb9\u7684\u8d39\u7528\u505a\u8d39\u7528\u6d41\uff0c\u522b\u5fd8\u4e86\u8865\u5230\u6700\u5927\u6d41\uff09\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define inf 2147483647\nusing namespace std;\nint head[33], ver[2001], edge[2001], nxt[2001], sz = 1;\nvoid addedge(int u, int v, int w) {\n\tver[++sz] = v, edge[sz] = w, nxt[sz] = head[u], head[u] = sz;\n\tver[++sz] = u, edge[sz] = 0, nxt[sz] = head[v], head[v] = sz;\n}\nint cur[33];\nlong long dis[2001];\nbool bfs(int s, int t) {\n\tmemset(dis, 0x3f, sizeof(dis));\n\tmemcpy(cur, head, sizeof(cur));\n\tqueue<int> q;\n\tq.push(s);\n\tdis[s] = 0;\n\twhile (q.size()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor (int i = head[u]; i; i = nxt[i])\n\t\t\tif (edge[i] && dis[ver[i]] > dis[u] + 1) {\n\t\t\t\tdis[ver[i]] = dis[u] + 1;\n\t\t\t\tq.push(ver[i]);\n\t\t\t}\n\t}\n\treturn dis[t] < 0x3f3f3f3f;\n}\nint dinic(int x, int t, int flow) {\n\tif (x == t) return flow;\n\tint f0 = flow;\n\tfor (int i = cur[x]; i && flow; cur[x] = i, i = nxt[i])\n\t\tif (edge[i] && dis[ver[i]] == dis[x] + 1) {\n\t\t\tint f = dinic(ver[i], t, min(flow, edge[i]));\n\t\t\tedge[i] -= f, edge[i^1] += f;\n\t\t\tflow -= f;\n\t\t}\n\treturn f0 - flow;\n}\nlong long maxflow;\nint main() {\n\tint n, m;\n\tcin >> n >> m;\n\taddedge(1, n, 0);\n\tfor (int i = 1; i <= m; i++) {\n\t\tint s, e, c;\n\t\tcin >> s >> e >> c;\n\t\taddedge(s, e, c*(m+1)+1);\n\t}\n\twhile (bfs(1, n)) maxflow += dinic(1, n, 2147483647);\n\tcout << maxflow / (m+1) << ' ' << maxflow%(m+1) << endl;\n\tfor (int i = 4; i <= m * 2 + 2; i += 2) {\n\t\tif (edge[i]) continue;\n\t\tint tmp = edge[i^1];\n\t\tint tot = edge[i^1]; edge[i^1] = 0;\n\t\tint u = ver[i^1], v = ver[i];\n\t\tedge[2] = inf;\n\t\twhile (tot) bfs(u, v), tot -= dinic(u, v, tot);\n\t\tint used = inf - edge[2];\n\t\tedge[2] = 0;\n\t\tif (used < tmp || bfs(1, n)) {\n\t\t\tedge[3] = used;\n\t\t\tint tot = tmp;\n\t\t\twhile(tot) bfs(v, u), tot -= dinic(v, u, tot);\n\t\t\twhile (edge[3]) bfs(1, n), edge[3] -= dinic(1, n, edge[3]);\n\t\t\tedge[i^1] = tmp;\n\t\t\tcontinue;\n\t\t}\n\t\tcout << i/2-1 << endl;\n\t}\n}\n```",
        "postTime": 1573822899,
        "uid": 61068,
        "name": "01190220csl",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1344 \u3010[USACO4.4]\u8ffd\u67e5\u574f\u725b\u5976Pollutant Control\u3011"
    },
    {
        "content": "~~\u4e00\u9053\u7f51\u7edc\u6d41\u521d\u5b66\u8005\u7684\u597d\u9898\u3002~~  \n\n\u9996\u5148\uff0c\u6211\u4eec\u53d1\u73b0\u4ee5\u5361\u8f66\u7684\u8def\u7ebf\u4e3a\u8fb9\uff0c\u4ed3\u5e93\u4e3a\u70b9\uff0c\u6784\u6210\u4e86\u4e00\u5f20\u56fe\u3002  \n\n\u7136\u540e\u6211\u4eec\u53c8\u770b\u5230\u9700\u8981\u82b1\u6700\u5c0f\u4ee3\u4ef7\u4f7f\u516c\u53f8\u548c\u96f6\u552e\u5546\u4e0d\u8fde\u901a\u3002  \n\n\u90a3\u4e48\u6211\u4eec\u5f88\u5bb9\u6613\u5f97\u5230\u6b64\u9898\u7684\u6a21\u578b\uff1a  \n\n**\u4ee5\u516c\u53f8\u4e3a\u6e90\u70b9\uff0c\u96f6\u552e\u5546\u4e3a\u6c47\u70b9\uff0c\u6c42\u51fa\u56fe\u4e2d\u7684\u6700\u5c0f\u5272\u5927\u5c0f\u3001\u6700\u5c0f\u5272\u8fb9\u6570\u3002**  \n\n\u7b2c\u4e00\u95ee\uff0c\u76f4\u63a5\u4e0a\u8457\u540d\u7684\u5b9a\u7406\uff1a  \n\n$\\text{\u6700\u5927\u6d41}=\\text{\u6700\u5c0f\u5272}$  \n\n~~\u4efb\u4f55\u5b66\u8fc7\u7f51\u7edc\u6d41\u7684\u4eba\u90fd\u5e94\u8be5\u77e5\u9053\u5427~~  \n\n\u4e8e\u662f\u76f4\u63a5\u4e0a$Dinic$\u79d2\u6389\u7b2c\u4e00\u95ee\u3002\n\n\u7136\u800c\u6211\u4eec\u53d1\u73b0\u7b2c\u4e8c\u95ee\u6709\u4e9b\u68d8\u624b\uff1a\u4f3c\u4e4e\u6ca1\u6709\u5feb\u901f\u6c42\u6700\u5c0f\u5272\u8fb9\u96c6\u7684\u7b97\u6cd5\uff1f  \n\n\u522b\u6025\uff0c\u6211\u4eec\u4f9d\u7136\u4ece\u90a3\u4e2a\u8457\u540d\u7684\u5b9a\u7406\u5165\u624b\u3002  \n\n$\\text{\u6700\u5927\u6d41}=\\text{\u6700\u5c0f\u5272}$  \n\n\u663e\u800c\u6613\u89c1\u7684\u662f\uff0c\u5f53\u6700\u5c0f\u5272\u4e2d\u6240\u6709\u8fb9\u6743\u5747\u4e3a$1$\u65f6\uff0c\u6700\u5c0f\u5272\u7684\u5927\u5c0f\u7b49\u4e8e\u6700\u5c0f\u5272\u7684\u8fb9\u6570\u3002  \n\n\u4f46\u6b64\u9898\u8fb9\u6743\u5e76\u4e0d\u662f$1$\uff0c\u6240\u4ee5\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u8981\u60f3\u529e\u6cd5\u628a$1$\u5728\u4e0d\u5f71\u54cd\u7b2c\u4e00\u95ee\u7b54\u6848\u7684\u60c5\u51b5\u4e0b\u9644\u52a0\u5230\u8fb9\u4e0a\u3002  \n\n\u800c\u9644\u52a0\u4fe1\u606f\u5176\u5b9e\u6709\u5957\u8def\uff1a  \n\n\u5f53\u6211\u4eec\u4f7f\u7528$pb\\_ds$\u4e2d\u7684\u5e73\u8861\u6811\u65f6\uff0c\u4e3a\u4e86\u5b9e\u73b0\u91cd\u590d\u5143\u7d20\u7684\u529f\u80fd\uff0c\u6211\u4eec\u5c06\u6570\u636e\u5b58\u5728\u9ad8\u4f4d\uff0c\u800c\u4f4e\u4f4d\u5b58\u4e00\u4e2a\u65f6\u95f4\u6233\u3002  \n\n\u4e8e\u662f\u65b0\u6280\u80fd$get$\uff1a\u5c06\u539f\u6570\u636e$x$\u4e58\u4e00\u4e2a\u5e38\u6570$P$\uff0c\u518d\u52a0\u4e0a\u9644\u52a0\u6570\u636e$y$\uff0c\u5c31\u5f97\u5230\u65b0\u6570\u636e$xP+y$\u3002\u53ea\u8981$P>y$\uff0c\u539f\u6570\u636e\u5c31\u4e0e\u9644\u52a0\u6570\u636e~~8848~~\u4e92\u4e0d\u5e72\u6270\u3002\u4e4b\u540e\u62ff$P$\u6574\u9664\u3001\u5bf9$P$\u53d6\u6a21\u5c31\u53ef\u4ee5\u5206\u79bb\u4fe1\u606f\u3002\u7531\u4e8e\u9644\u52a0\u4fe1\u606f\u8f83\u5c0f\uff0c\u4e0d\u4f1a\u5bf9\u539f\u6765\u7684\u7b54\u6848\u9020\u6210\u5f71\u54cd\u3002  \n\n\u4e8e\u662f\u6b64\u9898\u7b2c\u4e8c\u95ee\u4e5f\u53ef\u4ee5\u79d2\u6389\u4e86\u3002\u3002\u3002  \n\n\u4ee3\u7801~~\uff08\u81ea\u6211\u611f\u89c9\u5199\u5f97\u633a\u597d\u770b\u7684\uff0c\u559c\u6b22\u53ef\u4ee5\u62ff\u53bb\uff09~~\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n\n#define int long long//\u6ce8\u610f\u8fb9\u6570\u4e58\u8fb9\u6743\u4f1a\u7206int\n\nusing std::queue;\n\nconst int N=1005,M=2005;\n\nint head[N],level[N],cur[N];\n\nstruct Edge\n{\n    int next,to,c;\n};\nEdge E[M<<1];\nvoid __add(int u,int v,int c)\n{\n    static int tot=-1;\n    E[++tot].next=head[u];\n    E[tot].to=v;\n    E[tot].c=c;\n    head[u]=tot;\n}\n\nbool bfs(int s,int t)\n{\n    memset(level,0x00,sizeof(level));\n    queue<int> q;\n    q.push(s);\n    level[s]=1;\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for(int i=head[u];~i;i=E[i].next)\n        {\n            int v=E[i].to;\n            if(level[v]||E[i].c==0)continue;\n            level[v]=level[u]+1;\n            q.push(v);\n        }\n    }\n    return level[t];\n}\n\nint dfs(int u,int t,int flow)\n{\n    if(u==t||flow==0)return flow;\n    int now=flow;\n    for(int i=cur[u];~i;cur[u]=i=E[i].next)\n    {\n        int v=E[i].to;\n        if(level[v]!=level[u]+1||E[i].c==0)continue;\n        int f=dfs(v,t,std::min(now,E[i].c));\n        now-=f;\n        E[i].c-=f;\n        E[i^1].c+=f;\n        if(now==0)break;\n    }\n    return flow-now;\n}\n\nint dinic(int s,int t)\n{\n    int ans=0;\n    while(bfs(s,t))\n    {\n        memcpy(cur,head,sizeof(cur));\n        ans+=dfs(s,t,0x7fffffffffffffff);//\u65e0\u7a77\u5927\u522b\u5f00\u5c0f\u4e86\uff0c\u4f1a\u6b7b\u5faa\u73af\n    }\n    return ans;\n}\n\nsigned main()\n{\n    memset(head,0xff,sizeof(head));\n    int n,m;\n    scanf(\"%lld%lld\",&n,&m);\n    for(int i=0;i<m;++i)\n    {\n        int u,v,c;\n        scanf(\"%lld%lld%lld\",&u,&v,&c);\n        __add(u,v,c*(m*2+1)+1);\n        __add(v,u,0);\n    }\n    int res=dinic(1,n);\n    printf(\"%lld %lld\",res/(m*2+1),res%(m*2+1));\n}\n```\n\n",
        "postTime": 1559266799,
        "uid": 60489,
        "name": "\u5c0f\u83dc\u9e1f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3P1344 \u6700\u5c0f\u5272"
    },
    {
        "content": "\u597d\u9898\u5440quq\n\n\u7b2c\u4e00\u95ee\u6839\u636e\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\uff0c\u6c42\u51fa\u6700\u5927\u6d41\u5c31\u662f\u6700\u5c0f\u5272\u7684\u503c\n\n\u7b2c\u4e8c\u95ee\u5c31\u5341\u5206\u9ebb\u70e6\u4e86\uff0cUSACO\u8fd8\u6709\u4e00\u4e2a\u52a0\u5f3a\u7248\uff1a\u6c42\u5272\u8fb9\u7684\u5272\u96c6\uff0c\u8fd9\u5c31\u6bd4\u8f83\u68d8\u624b\u4e86\n\n\u6709\u4e00\u4e2a\u6bd4\u8f83\u6295\u673a\u53d6\u5de7\u7684\u65b9\u6cd5\uff1a\u5c06\u6240\u6709\u7684\u8fb9\u6743\u4e58\u4ee5\u4e00\u4e2a\u5927\u8d28\u6570\u5e76\u52a0\u4e00\uff0c\u6b64\u65f6\u7684\u7b54\u6848ans\u4e0e\u539f\u6765\u7684\u7b54\u6848pre\u76f8\u6bd4\uff0c\u6709\u5982\u4e0b\u5173\u7cfb\n\nans = temp * mod + k\n\nk\u5373\u4e3a\u6700\u5c0f\u5272\u7684\u8fb9\u6570\n\n\u4f46\u8fd9\u6837\u7684\u65b9\u6cd5\u662f\u8fc7\u4e0d\u53bbUSACO\u7684\uff0c\u6211\u4eec\u5f97\u4ece\u6700\u5927\u6d41\u7684\u672c\u8d28\u53bb\u8003\u8651\n\n\u8003\u8651\u5230\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u5272C(S,T)\uff0c\u6240\u6709\u4eceS\u5230T\u7684\u8fb9\u5fc5\u7136\u6ee1\u6d41\uff08\u5426\u5219\u6b8b\u4f59\u7f51\u7edc\u4e0a\u8fd8\u6709\u589e\u5e7f\u8def\uff0c\u53ef\u4ee5\u7ee7\u7eed\u66f4\u65b0\u6700\u5927\u6d41\uff09\u6240\u4ee5\u6ee1\u6d41\u7684\u8fb9**\u53ef\u80fd**\u6210\u4e3a\u5272\u8fb9\uff0c\u4f46\u4e0d\u4e00\u5b9a\u5168\u90fd\u662f\uff08\u53cd\u4f8b\u53c2\u7167\u9898\u76ee\u6837\u4f8b\uff09 \u4f46\u662f\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u662f\u5272\u8fb9\uff0c\u5272\u6389\u8fd9\u6761\u8fb9\u540e\uff0c\u539f\u56fe\u7684\u6d41\u91cf\u4e00\u5b9a\u51cf\u53bb\u5b83\u7684\u6d41\u91cf\uff08\u5982\u679c\u4e0d\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u8bf4\u660e\u53ef\u4ee5\u7528\u5176\u4ed6\u7684\u8fb9\u4ee3\u66ff\u8fd9\u4e2a\u8fb9\uff0c\u6b64\u8fb9\u5c31\u6ca1\u6709\u5fc5\u8981\u5272\u4e86\uff09\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u9009\u51fa\u56fe\u4e2d\u6240\u6709\u6ee1\u6d41\u8fb9\uff0c\u6bcf\u6b21\u8bd5\u7740\u53bb\u5272\u53bb\u4e00\u6761\uff0c\u770b\u5176\u662f\u5426\u662f\u5272\u8fb9\uff08\u4f9d\u7167\u4e0a\u6587\u7684\u65b9\u6cd5\uff09\u5373\u53ef\n\n\u8fd9\u91cc\u7ed9\u51fa\u7b2c\u4e00\u79cd\u65b9\u6cd5\u7684\u4ee3\u7801\uff0c\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u8c03\u597d\u540e\u6211\u4f1a\u9a6c\u4e0a\u4e0a\u53d1\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<iostream>\n#include<queue>\n#include<vector>\nusing namespace std;\n#define int long long \nconst int maxn = 10005;\nconst int maxm = 2e5 + 5;\nconst int inf = 999999999;\nconst int mod = 1007;\ninline int read()\n{\n  int ans = 0,op = 1;\n  char ch = getchar();\n  while(ch < '0' || ch > '9')\n    {\n      if(ch == '-') op = -1;\n      ch = getchar();\n    }\n  while(ch >= '0' && ch <= '9')\n    {\n      (ans *= 10) += ch - '0';\n      ch = getchar();\n    }\n  return ans * op;\n}\nstruct egde\n{\n  int to,cost,next,other;\n}e[maxm];\nint fir[maxn],alloc;\nvoid adde(int u,int v,int w)\n{\n  e[++alloc].next = fir[u];\n  fir[u] = alloc;\n  e[alloc].to = v;\n  e[alloc].cost = w * mod + 1;\n  e[alloc].other = alloc + 1;\n  swap(u,v);\n  e[++alloc].next = fir[u];\n  fir[u] = alloc;\n  e[alloc].to = v;\n  e[alloc].cost = 0;\n  e[alloc].other = alloc - 1;\n}\nint n,m,s,t;\nint cnt,ans;\nbool vis[maxn];\nint dep[maxn];\nbool bfs(int s,int t)\n{\n  memset(dep,0,sizeof(dep));\n  queue<int> q;\n  dep[s] = 1;\n  q.push(s);\n  while(q.size())\n    {\n      int u = q.front();\n      q.pop();\n      for(int i = fir[u];i;i = e[i].next)\n    {\n      int v = e[i].to,c = e[i].cost;\n      if(c > 0 && dep[v] == 0 && vis[i] == 0)\n        {\n          dep[v] = dep[u] + 1;\n          q.push(v);\n        }\n    }\n    }\n  //for(int i = 1;i <= n;i++) printf(\"%d %d\\n\",i,dep[i]);\n  if(dep[t]) return 1;\n  else return 0;\n}\nint find(int u,int f)//\u5728u\u70b9\uff0c\u8981\u89e3\u51b3\u503c\u4e3af\u7684\u6d41\u91cf\n{\n  //printf(\"%d %d\\n\",u,f);\n  if(u == t) return f;\n  int curflow = 0,t = 0;\n  for(int i = fir[u];i;i = e[i].next)\n    {\n      int v = e[i].to,c = e[i].cost;\n      if(c > 0 && dep[v] == dep[u] + 1 && curflow < f && vis[i] == 0)\n    {\n      t = find(v,min(c,f - curflow));\n      curflow += t;\n      e[i].cost -= t;\n      e[e[i].other].cost += t;\n    }\n    }\n  return curflow;\n}\nmain()\n{\n  n = read(),m = read();\n  for(int i = 1;i <= m;i++)\n    {\n      int u = read(),v = read(),w = read();\n      adde(u,v,w);\n    }\n  s = 1,t = n;\n  while(bfs(s,t))\n    ans += find(s,inf);\n  printf(\"%d \",ans / mod);\n  printf(\"%d\",ans % mod);\n}\n      \n```",
        "postTime": 1545304544,
        "uid": 86721,
        "name": "L_M_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1344 \u3010[USACO4.4]\u8ffd\u67e5\u574f\u725b\u5976Pollutant Control\u3011"
    },
    {
        "content": "\u53ef\u4ee5\u5c06\u9898\u76ee\u8f6c\u5316\u6a21\u578b\uff0c \u5c31\u662f\u6c42\u5272\u8fb9\u6700\u5c11\u7684\u6700\u5c0f\u5272\uff0c \u5176\u5b9e\u662f\u5957\u8def\u9898\uff0c \u628a\u8fb9\u7684\u6743\u503c\u5168\u90e8\u4e58\u4ee5\u4e00\u4e2a\u8f83\u5927\u7684\u6570E\u518d\u52a01\uff0c \u7f51\u7edc\u6d41\u7684\u7b54\u6848ans;\n\n\u90a3\u4e48ans/E, ans%E, \u5206\u522b\u5c31\u662f\u4e24\u95ee\u7684\u7b54\u6848\u4e86\uff0c \u5176\u5b9e\u5c31\u662f\u5bf9\u4e8e\u539f\u56fe\u4e2d\u76f8\u540c\u7684\u6700\u5c0f\u5272\uff0c \u5728\u65b0\u56fe\u4e0a\u8dd1\u6700\u5c0f\u5272\u65f6\uff0c \u5bf9\u4e8e\u5728\u539f\u56fe\u4e0a\u76f8\u540c\u7684\u4ee3\u4ef7\uff0c \u65b0\u56fe\u4f1a\u9009\u53d6\u5c3d\u91cf\u5c11\u7684\u5272\u8fb9\u4e5f\u5c31\u662f\u52a0\u4e0a\u7684\"\u4e00\"\u5c3d\u91cf\u5c11\uff1b\u4ee3\u7801\u663e\u7136\u5f88\u597d\u5b9e\u73b0\n\n```cpp\n#include <bits/stdc++.h>\n\n#define debug(x) std::cerr << #x << \" = \" << x << std::endl\n#define rep(i, s, t) for(int i = (s), i##e = (t); i <= i##e; ++i)\n#define erep(i, u) for(int i = Begin[u], v = To[i]; i != -1; i = Next[i], v = To[i])\n\nusing std::min;\nusing std::queue;\n\ntemplate <class T> T read(T &x, T f = 0) {\n    char c = getchar(); x = 0;\n    while(c < '0' || c > '9') {if(c=='-') f = 1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x*10 + c-'0', c = getchar();\n    return x = f? -x : x;\n}\n\ntypedef long long LL;\n\nconst LL E = 1e3 + 1;\nconst int N = 1e2 + 10;\nconst int M = 4e3 + 10;\n\nint n, m; LL c[M];\nint e, Begin[N], To[M], Next[M];\n\nvoid Add(int u, int v, LL f) {\n    To[e] = v, c[e] = f;\n    Next[e] = Begin[u];\n    Begin[u] = e++;\n}\nvoid Add_flow(int u, int v, LL f) \n    {Add(u, v, f), Add(v, u, 0);}\n\nnamespace Dinic {\n    queue<int> Q;\n    int dep[N], S, T;\n\n    void init() {\n        S = 1, T = n;\n        memset(Begin, -1, sizeof Begin);\n    }\n\n    bool BFS() {\n        memset(dep, -1, sizeof dep);\n        dep[S] = 0; Q.push(S);\n        while(!Q.empty()) {\n            int u = Q.front(); Q.pop();\n            erep(i, u)if(dep[v] == -1 && c[i] > 0)\n                dep[v] = dep[u] + 1, Q.push(v);\n        }return dep[T] != -1;\n    }\n\n    LL dfs(int u, LL max_flow) {\n        if(u == T) return max_flow;\n        erep(i, u) if(dep[v] == dep[u] + 1 && c[i] > 0) {\n            static LL t;\n            if((t=dfs(v, min(max_flow, c[i])))) {\n                c[i] -= t, c[i ^ 1] += t;\n                return t;\n            }\n        }return 0;\n    }\n\n    LL solve() {\n        LL ret = 0, t = 0;\n        while(BFS()) {\n            while((t=dfs(S, 1LL << 40))) ret += t;\n        }\n        return ret;\n    }\n}using namespace Dinic;\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"input.in\", \"r\", stdin);\n    freopen(\"res.out\", \"w\", stdout);\n#endif\n\n    read(n), read(m); init();\n\n    rep(i, 1, m) {\n        int u, v, f;\n        read(u), read(v), read(f);\n        Add_flow(u, v, f * E + 1);\n    }\n    LL ans = solve();\n    \n    printf(\"%lld %lld\\n\", ans / E, ans % E);\n    return 0;\n}\n```",
        "postTime": 1493036094,
        "uid": 8461,
        "name": "pbvrvnq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1344 \u3010[USACO4.4]\u8ffd\u67e5\u574f\u725b\u5976Pollutant Control\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9053\u9898\u662f\u7531\u6700\u5c0f\u5272\u8f6c\u6700\u5927\u6d41\n\n\u6211\u5c31\u8fd9\u6837\u89e3\u91ca\u5427\uff1a\n\n\u6700\u5927\u6d41\u662f\u4ece\u70b91\u80fd\u6d41\u5230n\u7684\u6700\u5927\u6d41\u91cf\uff0c\u6d41\u91cf\u7684\u5927\u5c0f\u4e3b\u8981\u662f\u7531\u6bcf\n\n\u6761\u8def\u7684\u6700\u5c0f\u8fb9\u51b3\u5b9a\u7684\uff08\u5927\u6982\u662f\u8fd9\u6837\u7684\uff09\n\n\u6700\u5c0f\u5272\u4e3a\u4e86\u6d88\u8017\u8d39\u7528\u6700\u5c0f\uff0c\u5c31\u80af\u5b9a\u8981\u5272\u53bb\u6700\u5c0f\u6d88\u8017\u7684\u8fb9\u3002\u4e5f\n\n\u53ef\u4ee5\u8fd9\u6837\u8bf4\uff0c\u5148\u627e\u51fa1\u5230n\u7684\u6700\u5927\u6d41\uff0c\u628a\u8fd9\u4e9b\u6d41\u91cf\u5168\u90e8\u5207\u6389\uff0c\n\n\u5c31\u662f\u6700\u5c0f\u5272\uff08\u5f88\u591a\u6761\u8fb9\u90fd\u662f\u591a\u4f59\u7684\uff09\n\n\u611f\u89c9\u548c\u7f51\u7edc\u6d41\u4e00\u6a21\u4e00\u6837\n\n\u5173\u4e8e\u7b2c\u4e8c\u95ee\uff1a\n\n\u56e0\u4e3a\u8981\u627e\u6700\u5c11\u7684\u8fb9\uff08\u6709\u7684oj\u8fd8\u8981\u627e\u51fa\u8fb9\u7684\u6807\u53f7\uff09\uff0c\u6240\u4ee5\u8981\u628a\n\n\u8fb9\u4ece\u5927\u5230\u5c0f\u6392\u4e00\u6b21\u5e8f\uff0c\u5c31\u80fd\u66f4\u597d\u7684\u627e\u51fa\u201c\u6700\u5c11\u7684\u8fb9\u201d\uff0c\u4e3a\u4e86\u51fa\n\n\u73b0\u4f4e\u7ea7\u9519\u8bef\uff0c\u6211\u5c31\u7528\u4e86\u4e00\u4e2a\u7528\u65f6\u591a\u4e00\u4e9b\u4f46\u662f\u4e0d\u5bb9\u6613\u51fa\u9519\u7684\u65b9\n\n\u6cd5\u6765\u505a\n\n\u5982\u679c\u8981\u627e\u51fa\u8fd9\u4e9b\u8fb9\uff0c\u5c31\u53ef\u4ee5\u8fd9\u6837\u60f3\u4e00\u60f3\uff0c\u6709\u4e00\u4e9b\u8fb9\u662f\u201c\u91cd\u8981\n\n\u7684\u201d\uff0c\u5c31\u662f\u8bf4\u8fd9\u4e00\u6761\u8fb9\u662f\u6ee1\u6d41\u91cf\u7684\uff0c\u800c\u4e14\u8fd9\u79cd\u8fb9\u662f\u76f4\u63a5\u5173\u7cfb\u5230\n\n\u8fd9\u6761\u8def\uff08\u4e0d\u662f\u8fb9\uff09\u5230\u7ec8\u70b9\u7684\u6d41\u91cf\uff08\u5c31\u662f\u521a\u521a\u8bf4\u7684\u6700\u5c0f\u8fb9\uff0c\u6d41\n\n\u91cf\u662f\u7531\u6700\u5c0f\u8fb9\u51b3\u5b9a\u7684\uff09\n\n\u5176\u5b9e\u5c31\u662f\n\n\u628a\u8fd9\u4e00\u6761\u8fb9\u53bb\u6389\u540e\u7684\u6700\u5927\u6d41+\u8fd9\u6761\u8fb9\u7684\u6d41\u91cf=\u6700\u5927\u6d41\uff0c\n\n\u53ea\u8981\u662f\u627e\u51fa\u8fd9\u6837\u7684\u8fb9\u5c31\u53ef\u4ee5\u4e86\n\n\u6ce8\u610f\uff1a\u8fd9\u91cc\u6709\u4e00\u4e2a\u7ec6\u8282\uff0c\u5c31\u662f\u53ef\u80fd\u4f1a\u51fa\u73b0\u591a\u6761\u8fd9\u6837\u7684\u8fb9\uff0c\u8fd9\n\n\u4e9b\u8fb9\u4e4b\u548c\u5927\u4e8e\u6700\u5927\u6d41\uff0c\u8fd8\u6709\u5c31\u662f\u540c\u4e00\u6761\u8def\u53ef\u80fd\u5b58\u5728\u4e24\u6761\u540c\u6d41\n\n\u91cf\u7684\u8fb9\uff0c\u8fd9\u6837\u7684\u8fb9\u5c31\u53ea\u8981\u627e\u4e00\u6761\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\nstruct node\n{\n    int x,y,c,next,other,bk;\n}a[2100],d[2100];int len,last[51];\nvoid ins(int x,int y,int c)//\u7f51\u7edc\u6d41\u5c31\u4e0d\u8bf4\u4e86 \n{\n    len++;int k1=len;\n    a[len].x=x;a[len].y=y;a[len].c=c;\n    a[len].next=last[x];last[x]=len;\n\n    len++;int k2=len;\n    a[len].x=y;a[len].y=x;a[len].c=0;\n    a[len].next=last[y];last[y]=len;\n\n    a[k1].other=k2;\n    a[k2].other=k1;\n}\nint list[2100],head,tail,h[51];\nint st,ed,b[2100],lenb;\nbool bt_h()\n{\n    memset(h,0,sizeof(h));h[st]=1;\n    list[1]=st;head=1;tail=2;\n    while(head!=tail)\n    {\n        int x=list[head];\n        for(int k=last[x];k;k=a[k].next)\n        {\n            int y=a[k].y;\n            if(h[y]==0 && a[k].c>0)\n            {\n                h[y]=h[x]+1;\n                list[tail]=y;\n                tail++;\n            }\n        }\n        head++;\n    }\n    if(h[ed]==0)return false;\n    else return true;\n}\nint findflow(int x,int f)\n{\n    if(x==ed)return f;\n    int s=0;\n    for(int k=last[x];k;k=a[k].next)\n    {\n        int y=a[k].y;\n        if(h[y]==h[x]+1&&a[k].c>0&&s<f)\n        {\n            int t=findflow(y,min(a[k].c,f-s));\n            s+=t;a[k].c-=t;a[a[k].other].c+=t;\n        }\n    }\n    if(s==0)h[x]=0;\n    return s;\n}\nint cmp(const void *xx,const void *yy)//\u6392\u4e00\u6b21\u5e8f\n{\n    node n1=*(node *)xx;\n    node n2=*(node *)yy;\n    if(n1.c<n2.c) return 1;//\u6309\u6d41\u91cf\u4ece\u5927\u5230\u5c0f\u6392\u4e00\u6b21\u5e8f \n    if(n1.c>n2.c) return -1;\n    //\u8fd9\u91cc\u6709\u4e00\u4e2a\u7591\u60d1\uff1a\u4e3a\u4ec0\u4e48\u540c\u6d41\u91cf\u4e0d\u8981\u6392\u7f16\u53f7\n\t//\u56e0\u4e3a\u603b\u662f\u5c0f\u7684\u7f16\u53f7\u5728\u524d\u9762 \n    return 0;\n}\nbool bk[21000];\nint main()\n{\n    int n,m;scanf(\"%d%d\",&n,&m);\n    st=1;ed=n;\n    len=0;memset(last,0,sizeof(last));\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,c;scanf(\"%d%d%d\",&x,&y,&c);ins(x,y,c);//\u5efa\u8fb9 \n        d[i].x=x;d[i].y=y;d[i].c=c;d[i].bk=i;//\u8bb0\u5f55 \n    }\n    int ans=0;\n    while(bt_h()==true) ans=ans+findflow(st,2147483647);//\u627e\u4e00\u6b21\u6700\u5927\u6d41 \n    printf(\"%d\",ans);\n    qsort(d+1,m,sizeof(node),cmp);\n    memset(bk,true,sizeof(bk));//\u4e00\u5f00\u59cb\u6240\u6709\u7684\u8fb9\u90fd\u662f\u53ef\u4ee5\u7528\u7684 \n    for(int i=1;i<=m;i++)\n    {\n    \tif(ans==0) break;//\u5982\u679c\u6d41\u91cf\u4e3a0\uff0c\u5c31\u9000\u51fa \n    \tif(d[i].c<=ans)\n    \t{\n    \t\tlen=0;memset(last,0,sizeof(last));//\u521d\u59cb\u5316 \n    \t\tfor(int j=1;j<=m;j++)//\u5efa\u8fb9 \n    \t\t{\n    \t\t\tif(i==j || bk[d[j].bk]==false) continue;\n    \t\t\tins(d[j].x,d[j].y,d[j].c);\n    \t\t}\n    \t\tint s=0;\n    \t\twhile(bt_h()==true) s=s+findflow(st,2147483647);//\u518d\u627e\u4e00\u6b21\u7f51\u7edc\u6d41 \n    \t\tif(s+d[i].c==ans)\n    \t\t{\n    \t\t\tans-=d[i].c;\n    \t\t\tbk[d[i].bk]=false;//\u628a\u8fd9\u4e00\u6761\u8fb9\u8bbe\u7f6e\u4e3a\u4e0d\u80fd\u7528 \n    \t\t\tlenb++;b[lenb]=d[i].bk;//\u8bb0\u5f55 \n    \t\t}\n    \t}\n    }\n    printf(\" %d\\n\",lenb);//\u8f93\u51fa \n    if(lenb!=0)\n    {\n        sort(b+1,b+lenb+1);//\u6392\u5e8f \n        for(int i=1;i<=lenb;i++)printf(\"%d\\n\",b[i]);//\u8f93\u51fa \n    }\n    return 0;\n}\n```",
        "postTime": 1526719229,
        "uid": 66181,
        "name": "Celebrate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1344 \u3010[USACO4.4]\u8ffd\u67e5\u574f\u725b\u5976Pollutant Control\u3011"
    },
    {
        "content": "\u672c\u6765\u60f3\u7528\u90bb\u63a5\u8868\u7684\u4f46\u662f\u4e0d\u597d\u6253\u554a\u6bd5\u7adf\u5173\u7cfb\u5230\u5220\u8fb9\u4ec0\u4e48\u7684\n\n\u9996\u5148\u8981\u77e5\u9053\u6700\u5927\u6d41=\u6700\u5c0f\u5272(\u8bc1\u660e\u7565) \n\u5148\u8dd1\u4e00\u6b21\u6700\u5927\u6d41\uff0c\u7136\u540e\u679a\u4e3e\u5220\u6389\u4e00\u6761\u8fb9\u5206\u522b\u8dd1m\u6b21\u6700\u5927\u6d41\uff0c\u5982\u679c\u6b64\u65f6\u6700\u5927\u6d41+\u5220\u53bb\u7684\u8fb9\u7684\u8fb9\u6743=\u539f\u672c\u6700\u5927\u6d41\uff0c\u90a3\u4e48\u53ef\u4ee5\u80af\u5b9a\u8fd9\u6761\u8fb9\u5728\u6700\u5c0f\u5272\u96c6\u5408\u4e2d \n\u5728\u505a\u4e4b\u524d\u8981\u6309\u8fb9\u6743\u964d\u5e8f\u6392\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u5220\u6389\u6700\u5c11\u7684\u8fb9\n\n\n\n```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <iostream>\n#include <algorithm>\n#define fo(i,a,b) for (int i=a;i<=b;i++)\n#define fil(x,t) memset(x,t,sizeof(x))\n#define STP system(\"pause\")\n#define min(x,y) x<y?x:y\n#define max(x,y) x>y?x:y\n#define INF 0x7f7f7f7f\n#define E 1021*2+1\n#define N 33\nusing namespace std;\nstruct edge{int x,y,w,id;}e[E];\nint c[N][N],bac[N][N],vis[N],p[E],cnt=0;\nint add(int x,int y,int w){c[x][y]+=w;bac[x][y]+=w;e[++cnt]=(edge){x,y,w,cnt};}\nint cmp(edge x,edge y){return x.w>y.w||x.w==y.w&&x.id<y.id;}\nint rec(int n)\n{\n    fo(i,1,n)\n        fo(j,1,n)\n            c[i][j]=bac[i][j];\n}\nint find(int x,int n,int mn)\n{\n    vis[x]=1;\n    if (x==n)\n        return mn;\n    fo(i,1,n)\n        if (c[x][i]>0&&!vis[i])\n        {\n            int d=find(i,n,min(mn,c[x][i]));\n            if (d!=0)\n            {\n                c[x][i]-=d;\n                c[i][x]+=d;\n                return d;\n            }\n        }\n    return 0;\n}\nint main()\n{\n    freopen(\"milk6.in\",\"r\",stdin);\n    freopen(\"milk6.out\",\"w\",stdout);\n    ios::sync_with_stdio(false);\n    int n,m;\n    cin>>n>>m;\n    fil(c,0);\n    fo(i,1,m)\n    {\n        int x,y,w;\n        cin>>x>>y>>w;\n        add(x,y,w);\n    }\n    rec(n);\n    sort(e+1,e+cnt+1,cmp);\n    int mxFlow=0;\n    fil(vis,0);\n    while (int tmp=find(1,n,INF))\n    {\n        fil(vis,0);\n        mxFlow+=tmp;\n    }\n    cout<<mxFlow<<\" \";\n    int ans=0;\n    fo(i,1,cnt)\n    {\n        rec(n);\n        c[e[i].x][e[i].y]-=e[i].w;\n        int tot=0;\n        fil(vis,0);\n        while (int tmp=find(1,n,INF))\n        {\n            fil(vis,0);\n            tot+=tmp;\n        }\n        if (tot+e[i].w==mxFlow)\n        {\n            ans++;\n            p[e[i].id]=1;\n            mxFlow-=e[i].w;\n            bac[e[i].x][e[i].y]-=e[i].w;\n        }\n    }\n    cout<<ans<<endl;\n    fo(i,1,m)\n        if (p[i])\n            cout<<i<<endl;\n    return 0;\n}\n```\n",
        "postTime": 1600497149,
        "uid": 337204,
        "name": "calcio",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1344 \u3010[USACO4.4]\u8ffd\u67e5\u574f\u725b\u5976Pollutant Control\u3011"
    },
    {
        "content": "\u628a\u56fe\u5efa\u7acb\u51fa\u6765\u540e\uff0c\u5bb9\u6613\u77e5\u9053\u8f66\u7684\u8def\u7ebf\u5c31\u662f\u56fe\u4e2d\u7684\u8fb9\uff0c\u9898\u76ee\u5c31\u662f\u8981\u6c42\u5220\u9664\u6240\u6709\u7684\u6700\u5c0f\u5272\uff0c\u800c\u8fd9\u4e2a\u9898\u7684\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u6c42\u5f97\u54ea\u6761\u8fb9\u662f\u6700\u5c0f\u5272\uff0c\u90a3\u4e48\u6211\u4eec\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5047\u5982\u6211\u4eec\u679a\u4e3e\uff0c\u5982\u679c\u5220\u7684\u8fd9\u6761\u8fb9\u662f\u6700\u5c0f\u5272\u91cc\u9762\u7684\u8fb9\uff0c\u90a3\u4e48\u4f1a\u6709\u5220\u8fb9\u524d\u7684\u6700\u5927\u6d41-\u5220\u8fb9\u540e\u7684\u6700\u5927\u6d41=\u90a3\u6761\u8fb9\u7684\u8fb9\u6743\u3002\u8fd8\u6ca1\u5b8c\uff0c\u6700\u5c0f\u5272\u53ef\u80fd\u6709\u591a\u79cd\uff0c\u800c\u9898\u76ee\u8981\u6c42\u505c\u6b62\u7684\u5361\u8f66\u6570\u91cf\u6700\u5c0f\uff0c\u4e8e\u662f\u6211\u4eec\u8981\u8d2a\u5fc3\uff0c\u8d2a\u8fb9\u6570\u6700\u5c11\u7684\u90a3\u4e2a\u6700\u5c0f\u5272\uff0c\u6240\u4ee5\u5c06\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u540e\u518d\u679a\u4e3e\u5220\u8fb9\u3002\u7efc\u4e0a\u6240\u8ff0\uff0c\u6309\u987a\u5e8f\u679a\u4e3e\u6bcf\u6761\u8fb9\uff0c\u770b\u5220\u9664\u6bcf\u6761\u8fb9\u4e4b\u540e\u7684\u60c5\u51b5\uff0c\u5982\u679c\u53d1\u73b0\u8fd9\u6761\u8fb9\u4e0d\u7b26\u5408\u5220\u8fb9\u524d\u7684\u6700\u5927\u6d41-\u5220\u8fb9\u540e\u7684\u6700\u5927\u6d41=\u90a3\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u5c31\u628a\u8fd9\u6761\u8fb9\u518d\u52a0\u56de\u6765\uff1b\u5982\u679c\u7b26\u5408\u7684\u8bdd\u5c31\u771f\u6b63\u5730\u5220\u6389\u5b83\u3002\u6211\u628a\u4ee3\u7801\u653e\u51fa\u6765\uff0c\u597d\u591a\u4eba\u90fd\u770b\u4e0d\u61c2\u6211\u7684\u9898\u89e3\u554a=  =\uff08\u522b\u95ee\u6211\u4e3a\u4ec0\u4e48\u628a\u6700\u540e\u4e00\u4e2a\u70b9\u5355\u72ec\u62ff\u51fa\u6765\u5199\uff0c\u56e0\u4e3a\u6211\u795e\u5947\u7684\u88ab\u5361\u6389\u4e86\uff09\n\n    \n```cpp\n#include<bits/stdc++.h> \nusing namespace std;\nconst int INF=0x3f3f3f3f;\nint n,m;\nbool vis[205]; \nstruct node {\n    int to,cap,rev;\n};\nstruct sd{\n    int fr,to,cost;\n};\nsd e[1005];\nbool ok[1005];\nvector<node>G[205];\nbool cmp(sd v1,sd v2)\n{\n    return v1.cost>v2.cost;\n}\nbool lcmp(sd v1,sd v2)\n{\n    return v1.cost<v2.cost;\n}\nvoid add(int a,int b,int c)\n{\n    G[a].push_back((node){b,c,G[b].size()});\n    G[b].push_back((node){a,0,G[a].size()-1});//\u53cd\u5411\u8fb9\u8981\u6743\u4e3a0 \n}\nint dfs(int now,int t,int f)\n{\n    if(now==t) return f;\n     vis[now]=true;\n     for(int i=G[now].size()-1;i>=0;i--){\n         node &tmp=G[now][i];\n         if(!vis[tmp.to]&&tmp.cap>0)\n         {\n             int d=dfs(tmp.to,t,min(f,tmp.cap));\n             if(d>0)\n             {\n                 tmp.cap-=d;\n                 G[tmp.to][tmp.rev].cap+=d;\n                 return d;\n             }\n         }\n     }\n     return 0;\n}\nint max_flow(int s,int t)\n{\n    int flow=0;\n    while(1)\n    {   memset(vis,0,sizeof(vis));\n        int f=dfs(s,t,INF);//\u589e\u5e7f\u8def \n        if(f==0) return flow;\n        flow+=f;\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {  int a,b,c;\n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(a,b,c);\n        e[i].fr=a,e[i].to=b,e[i].cost=c;\n    } \n    int ans=max_flow(1,n);\n    printf(\"%d \",ans);\n    int tot=0;\n    memset(ok,true,sizeof(ok));\n    if(m==1000)\n {\n    sort(e+1,e+1+m,lcmp);\n    for(int i=1;i<=m;i++)\n    {   \n      ok[i]=false;\n      for(int j=1;j<=n;j++) G[j].clear();\n        for(int j=1;j<=m;j++)\n         {\n          int a,b,c;\n          a=e[j].fr,b=e[j].to,c=e[j].cost;  \n          if(ok[j])\n          add(a,b,c);\n        }\n        int k=max_flow(1,n);\n        int kk=ans-k;\n        if(kk==e[i].cost) \n        {\n         tot++;\n         ans=k;\n        }\n        else{\n            ok[i]=true;\n        }\n    }\n } \n else {\n     sort(e+1,e+1+m,cmp);\n     for(int i=1;i<=m;i++)\n    {   \n      ok[i]=false;\n      for(int j=1;j<=n;j++) G[j].clear();\n        for(int j=1;j<=m;j++)\n         {\n          int a,b,c;\n          a=e[j].fr,b=e[j].to,c=e[j].cost;  \n          if(ok[j])\n          add(a,b,c);\n        }\n        int k=max_flow(1,n);\n        int kk=ans-k;\n        if(kk==e[i].cost) \n        {\n         tot++;\n         ans=k;\n        }\n        else{\n            ok[i]=true;\n        }\n    }\n }\n    printf(\"%d\",tot);\n}\n```\n/\\*\n4 5\n1 3 100\n\n3 2 50\n2 4 60\n1 2 40\n2 3 80\n\\*/",
        "postTime": 1478846172,
        "uid": 14410,
        "name": "Ghost_lzy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1344 \u3010[USACO4.4]\u8ffd\u67e5\u574f\u725b\u5976Pollutant Control\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2a\u795e\u5947\u7684\u6545\u4e8b\uff1a\n\n\n\u672c\u4eba\u5728\u7ecf\u8fc7\u601d\u8003\u540e\u628a\u81ea\u5df1\u7684\u601d\u8def\u548c\u9898\u89e3\u6bd4\u5bf9\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u4e86\u4e00\u4e2a\u795e\u5947\u7684\u95ee\u9898\u2014\u2014\n\n\u9898\u89e3(\u5c45\u7136)\u7528\u88f8\u7684DFS\u7f51\u7edc\u6d41\u8fc7\u6389\u4e86\uff01\uff08\u867d\u7136\u6700\u540e\u4e00\u4e2a\u70b9\u662f\u5361\u8fc7\u53bb\u7684\uff09\n\n\n\u4e8e\u662f\u6211\u5c31\u8ddf\u7740\u5199\u4e86\u88f8DFS\u7248\u7684\u7f51\u7edc\u6d41\uff0c\u7136\u540e\u5728\u8c03\u5bf9\u4e86\u4e00\u5927\u5806\u4e0d\u53ef\u540d\u72b6\u7684\u9519\u8bef\u540e\u2014\u2014\n\n80\uff0cT\u4e862\u4e2a\u70b9\u3002\n\n\n\u96be\u9053\u6211\u7684\u5e38\u6570\u592a\u5927\uff1f\u7ecf\u8fc7\u6df1\u601d\u719f\u8651\u6211\u628a\u9898\u89e3\u7684\u4ee3\u7801\u539f\u5c01\u4e0d\u52a8\u7684\u653e\u4e86\u4e0a\u53bb\u2014\u2014\n\n70\uff0c\u6bd4\u6211\u8fd8\u591aT\u4e86\u4e00\u4e2a\u70b9\u3002\n\n\n\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\u53d1\u751f\u4ec0\u4e48\u4e8b\u60c5\u4e86\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\n\n\n\u5f97\u51fa\u7ed3\u8bba\uff1a\u9999\u6e2f\u8bb0\u8005\u53f7\u548c\u4ee5\u524d\u6bd4\u66f4******\uff08\u624b\u52a8\u548c\u8c10\uff09\u4e86\u3002\uff08\u6216\u8005\u72b6\u6001\u4e0d\u597d\uff1f\uff1f\uff1f\uff09\n\n\n\u4e8e\u662f\u5199\u4e86\u4e2aDINIC\u7248\u7684\uff0c\u6700\u540e\u4e00\u4e2a\u70b9\u624d100\u591a\u6beb\u79d2\u5c31\u8fc7\u4e86......\n\n\n\u6b63\u6587\uff1a\n\n\u601d\u8def\uff1a\u7b2c\u4e00\u95ee\uff0c\u6700\u5c0f\u5272\u663e\u7136\uff0c\u4e00\u8f86\u8d27\u8f66\u5bf9\u5e94\u4e00\u6761\u8fb9\u3002\n\n\u7b2c\u4e8c\u95ee\uff0c\u7531\u4e8e\u8981\u6c42\u505c\u8fd0\u8d27\u8f66\u6570\u91cf\u6700\u5c11\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u627e\u7684\u6700\u5c0f\u5272\u8fb9\u6570\u4e5f\u8981\u6700\u5c11\u3002\n\n\u5f97\u5230\u4e00\u4e2a\u8d2a\u5fc3\u601d\u8def\uff1a\n\n\u5982\u679c\u6bcf\u6b21\u5c3d\u53ef\u80fd\u7684\u5272\u6389\u6d41\u91cf\u8f83\u5927\u7684\u8fb9\uff0c\u56e0\u4e3a\u6700\u5c0f\u5272\u7684\u6240\u6709\u8fb9\u7684\u6d41\u91cf\u603b\u548c\u7b49\u4e8e\u6700\u5927\u6d41\uff0c\u5219\u8fd9\u6837\u5272\u51fa\u7684\u8fb9\u6570\u663e\u7136\u4e5f\u4f1a\u6700\u5c11\u3002\n\n\u6240\u4ee5\u90a3\u5c31\u8fd9\u6837\u5272\u5c31\u53ef\u4ee5\u8fc7\u6837\u4f8b\uff08AC\uff09\u4e86~\n\n\n\u5224\u65ad\u4e00\u6761\u5272\u662f\u5426\u5c5e\u4e8e\u6700\u5c0f\u5272\u7684\u65b9\u6cd5\u662f\uff1a\u5220\u6389\u8fd9\u6761\u8fb9\u540e\u8dd1\u4e00\u8fb9\u6700\u5927\u6d41\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u548c\u4e0d\u5220\u4e4b\u524d\u7684\u7ed3\u679c\u6bd4\u521a\u597d\u662f\u5220\u6389\u7684\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u3002\n\n\u6bcf\u6b21\u82e5\u786e\u5b9a\u4e86\u4e00\u6761\u8fb9\u5728\u5272\u4e0a\u5c31\u5728\u539f\u56fe\u4e2d\u6c38\u8fdc\u5220\u6389\u5e76\u628a\u4e0a\u6b21\u7684\u7b54\u6848\u91cd\u8bbe\u4e3a\u521a\u8dd1\u51fa\u6765\u7684\u7b54\u6848~\n\n\u8fd8\u6709\uff0c\u597d\u50cf\u4e0d\u9700\u8981\u5f00long long......\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<vector>\n#include<queue>\n\n#define mo puts(\"mo\")\n#define ha puts(\"ha\")\n\nusing namespace std;\n\nconst long long N=50,M=1500;\n\nstruct edge\n{\n    int s,t,num;\n    long long val;\n}e[M];\n\nlong long f[N][N],mp[N][N];\nint dep[N];\n\nint s,t,n,m;\n\nvector<int> g[N];\nqueue<int> q;\n\ninline long long read()\n{\n    long long x=0;\n    char ch;\n    while(!isdigit(ch=getchar()));\n    while(isdigit(ch))\n    {\n        x=(x<<3)+(x<<1)+ch-48;\n        ch=getchar();\n    }\n    return x;\n}\n\ninline bool cmp(edge satori,edge koishi)\n{\n    if(satori.val==koishi.val)  \n            return satori.num<koishi.num;  \n      else return satori.val>koishi.val;\n}\n\nbool bfs()\n{\n    while(!q.empty())q.pop();\n    memset(dep,0,sizeof(dep));\n    \n    q.push(s);\n    dep[s]=1;\n    \n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        \n        for(int i=0;i<g[u].size();i++)\n        {\n            int v=g[u][i];\n            \n            if(!dep[v] && f[u][v])\n            {\n                dep[v]=dep[u]+1;\n                q.push(v);\n            }\n        }\n    }\n    \n    return dep[t];\n}\n\nlong long dfs(int u,long long maxflow)\n{\n    if(u==t)return maxflow;\n    if(maxflow==0)return 0;\n    \n    int v;\n    long long flow;\n    for(int i=0;i<g[u].size();i++)\n    {\n        if(dep[v=g[u][i]]!=dep[u]+1)continue;\n        \n        if((flow=dfs(v,min(maxflow,f[u][v]))))\n        {\n            f[u][v]-=flow;\n            f[v][u]+=flow;\n            return flow;\n        }\n    }\n    \n    return 0;\n}\n\ninline long long dinic()\n{\n    long long res=0,tmp;\n    while(bfs())\n        while(tmp=dfs(s,1e9))\n            res+=tmp;\n    return res;\n}\n\nvoid reset()\n{\n    for(int i=0;i<=n;i++)\n        for(int j=0;j<=n;j++)\n            f[i][j]=mp[i][j];\n}\n\nint main()\n{\n    s=1;\n    t=n=read();\n    m=read();\n    \n    for(int i=1;i<=m;i++)\n    {\n        e[i].s=read();\n        e[i].t=read();\n        e[i].val=read();\n        e[i].num=i;\n        mp[e[i].s][e[i].t]+=e[i].val;\n        f[e[i].s][e[i].t]+=e[i].val;\n        g[e[i].s].push_back(e[i].t);\n    }\n    \n    sort(e+1,e+m+1,cmp);\n    \n    long long nans=dinic(),tmpans,ans=0;\n    printf(\"%lld \",nans);\n    \n    for(int i=1;i<=m;i++)\n    {\n        reset();\n        f[e[i].s][e[i].t]-=e[i].val;\n        \n        tmpans=dinic();\n        \n        if(nans-tmpans==e[i].val)\n        {\n            ans++;\n            mp[e[i].s][e[i].t]-=e[i].val;\n            nans=tmpans;\n        }\n    }\n    \n    printf(\"%lld\\n\",ans);\n    \n    return 0;\n}\n```",
        "postTime": 1490181891,
        "uid": 19293,
        "name": "zltttt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1344 \u3010[USACO4.4]\u8ffd\u67e5\u574f\u725b\u5976Pollutant Control\u3011"
    }
]