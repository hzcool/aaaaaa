[
    {
        "content": "\n\u8fd9\u9898\u5e94\u8be5\u4e0d\u96be\u60f3\u5230\u4f7f\u7528dp\u6c42\u89e3\u3002\n\n\u6211\u4eec\u5148\u5c06\u6bcf\u5757\u6728\u677f\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\u3002\n\u7136\u540e\u6211\u4eec\u6309\u7167\u4ece\u77ee\u5230\u9ad8\u7684\u987a\u5e8f\u5012\u5e8f\u904d\u5386\u8fd9\u4e9b\u6728\u677f\u3002\n\u53ef\u80fd\u4f60\u4f1a\u95ee\u4e3a\u4ec0\u4e48\u8981\u4ece\u77ee\u5230\u9ad8\u7684\u987a\u5e8fdp\u3002\n\u5176\u5b9e\u4ece\u9ad8\u5230\u5230\u77ee\u7684\u987a\u5e8fdp\uff0c\u5176\u5b9e\u4ece\u9ad8\u5230\u77ee\u5e76\u4e0d\u662f\u4e0d\u53ef\u4ee5\u3002\n\u4f46\u4ece\u4f4e\u5230\u9ad8\u4f1a\u6765\u7684\u66f4\u65b9\u4fbf\u3002\n\u56e0\u4e3a\u4ece\u4f4e\u5230\u9ad8\u7684\u8bdd\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u4ece\u5de6\u8fb9\u4e0b\u843d\u5230\u8fbe\u7684\u6728\u677f\uff0c\u548c\u4ece\u53f3\u8fb9\u4e0b\u843d\u5230\u8fbe\u7684\u4e24\u4e2a\u6728\u677f\u7ee7\u627f\u5c31\u53ef\u4ee5\u4e86\u3002\n\u7136\u800c\u4ece\u9ad8\u5230\u4f4e\u6211\u4eec\u5e76\u4e0d\u65b9\u4fbf\u627e\u5230\u54ea\u4e9b\u4e0b\u843d\u53ef\u4ee5\u5230\u8fbe\u8be5\u6728\u677f\u3002\n\n~~\u4ee5\u4e0a\u90fd\u662f\u5e9f\u8bdd~~\n\n\u5047\u82e5\u6211\u4eec\u5df2\u7ecf\u6c42\u5f97\u4e86\u8fd9\u4e2a\u6728\u677f\u5de6\u53f3\u4e0b\u843d\u4f1a\u5230\u8fbe\u54ea\u4e9b\u6728\u677f\uff0c\n\u6211\u4eec\u8bb0 \nch[i][1/0] 0\u8868\u793ai\u7684\u5de6\u8fb9\u4e0b\u843d\u5230\u8fbe\u7684\u6728\u677f\uff0c1\u8868\u793a\u53f3\u8fb9\u4e0b\u843d\u5230\u8fbe\u7684\u6728\u677f\u3002\n\ndp[i][1/0] 0\u8868\u793a\u5982\u679c\u4e0b\u843d\u5230\u5de6\u8fb9\u6728\u677f\uff0c\u6700\u5c0f\u8d39\u65f6\uff0c1\u8868\u793a\u4e0b\u843d\u5230\u53f3\u8fb9\u6728\u677f\u7684\u6700\u5c0f\u8d39\u65f6\u3002\n\u3000\u3000\u3000 \n\nla[i] \u8868\u793a i \u7684\u53f3\u7aef\u70b9\u6a2a\u5750\u6807\uff0c ra[i] \u8868\u793a i \u7684\u5de6\u7aef\u70b9\u6a2a\u5750\u6807\u3002\n\na[i].h \u8bb0\u5f55 i \u6728\u677f\u7684\u9ad8\u5ea6\u3002\n\n**dp \u65b9\u7a0b\u5982\u4e0b\uff1a**\u3000\n\n**dp[i][0]=min(dp[i][0],dp[ch[i][0]][0]+la[i]-la[ch[i][0]]+a[i].h-a[ch[i][0]].h)**\n\n**dp[i][0]=min(dp[i][0],dp[ch[i][0]][1]+ra[ch[i][0]]-la[i]+a[i].h-a[ch[i][0]].h);**\n\n**dp[i][1]=min(dp[i][1],dp[ch[i][1]][0]+ra[i]-la[ch[i][1]]+a[i].h-a[ch[i][1]].h);**\n\n**dp[i][1]=min(dp[i][1],dp[ch[i][1]][1]+ra[ch[i][1]]-ra[i]+a[i].h-a[ch[i][1]].h);**\n\n\u5176\u5b9e\u8fd9\u540e\u9762\u8f6c\u79fb\u5c31\u662f\u8def\u5f84\u7684\u6a21\u62df\uff0c\u4e0d\u96be\u7406\u89e3\u3002\n\ndp\u65b9\u7a0b\u89e3\u51b3\u4e86\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u5982\u4f55\u5904\u7406\u51fa\u6bcf\u4e2a\u6728\u677f\u5de6\u53f3\u4e0b\u843d\u540e\u5230\u8fbe\u7684\u6728\u677f\uff1f\n\n\u4e00\u4e2a\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u65b9\u6848\u662f\u7528\u7ebf\u6bb5\u6811\u9884\u5904\u7406\u3002\n\n \n\n\u8fd9\u91cc\u4f7f\u7528\u4e86**\u533a\u95f4\u8d4b\u503c\u548c\u5355\u70b9\u4fee\u6539**\u3002\n\n\u6211\u4eec\u4ece\u4f4e\u5230\u9ad8\u679a\u4e3e\u6728\u677f\uff0c\u67e5\u8be2\u5de6/\u53f3\u7aef\u70b9\u4e0b\u7ebf\u6bb5\u6811\u4e0a\u5bf9\u5e94\u7684\u503c\u3002\n\u8fd9\u503c\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u662f\u843d\u5230\u7684\u90a3\u4e2a\u6728\u677f\u7f16\u53f7\u3002\n\u5f53\u5904\u7406\u5b8c\u8fd9\u4e2a\u6728\u677f\u5b8c\u540e\uff0c\u4ed6\u5c31\u662f\u5bf9\u5e94\u533a\u95f4(\u6728\u677f\u7684\u5de6\u7aef\u70b9\u5230\u53f3\u7aef\u70b9)\uff0c\u6700\u4e0a\u9762\u7684\u6728\u677f\u4e86\u3002\n\u5b83\u4e0a\u9762\u7684\u5e94\u5f53\u4f1a\u843d\u5728\u5b83\u7684\u4e0a\u9762\u3002\n\u4e8e\u662f\u533a\u95f4\u4fee\u6539\u3002\u628a\u8fd9\u6bb5\u533a\u95f4\u7684\u503c\u4fee\u6539\u4e3a\u8fd9\u4e2a\u6728\u677f\u7684\u7f16\u53f7\u3002\n\n~~\u5230\u6b64\uff0c\u95ee\u9898\u5f97\u5230\u5b8c\u7f8e\u89e3\u51b3~~\n\n\u7b49\u7b49\uff0c\u6211\u4eec\u5343\u4e07\u4e0d\u8981\u5fd8\u8bb0**\u79bb\u6563\u5316**\uff0c\u4ee5\u53cadp\u65f6\u7279\u5224\u3002\n\u5982\u679c\u5f53\u524d\u7684\u6728\u677f\u4e0b\u843d\u5230\u7684\u6728\u677f\u7f16\u53f7\u4e3a0\uff0c\u90a3\u4e48dp\u503c\u662f\u5f53\u524d\u6728\u677f\u7684\u9ad8\u5ea6\u3002\n\n\u5177\u4f53\u770b\u4ee3\u7801\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define ls k<<1\n#define rs k<<1|1\ntypedef long long ll;\nusing namespace std;\nconst int N=1e6;\nll n,m,cnt;\nll lx[N<<2],ch[N][2],w[N<<4],tag[N<<4];//\nll la[N<<2],ra[N<<2],dp[N][2];//\nstruct node{\n    ll l,r,h,id;//\u9700\u8981\u8bb0\u5f55\u4e00\u4e2a\u7f16\u53f7\uff0c\u56e0\u4e3a\u9700\u8981\u6392\u5e8f\n    bool operator < (const node &b) const {\n        return h<b.h;//\u6309\u9ad8\u5ea6\u4ece\u77ee\u5230\u9ad8\u6392\u5e8f\n    }\n}a[N];\ninline void read(ll &x){\n    x=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9') ch=getchar();\n    while(ch>='0'&&ch<='9') x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n}\ninline void update(ll k,ll x,ll y){\n    tag[ls]=tag[k];\n    w[ls]=tag[k];\n    tag[rs]=tag[k];\n    w[rs]=tag[k];\n    tag[k]=0;\n}\ninline void change(ll k,ll x,ll y,ll l,ll r,ll val){\n    if(x>r||y<l) return;\n    if(x>=l&&y<=r){//\u533a\u95f4\u8d4b\u503c\n        tag[k]=val;\n        w[k]=val;\n        return;\n    }\n    ll mid=x+y>>1;\n    if(tag[k]) update(k,x,y);//\u533a\u95f4\u8d4b\u503c\u7684\u6807\u8bb0\u4e0b\u4f20\n    change(ls,x,mid,l,r,val);\n    change(rs,mid+1,y,l,r,val);\n}\ninline ll query(ll k,ll x,ll y,ll pos){\n    if(x>pos||y<pos) return 0;\n    if(x==y) return w[k];//\u5355\u70b9\u67e5\u8be2\uff0cw\u8bb0\u5f55\u5f53\u524d\u533a\u95f4\u5bf9\u5e94\u6700\u4e0a\u65b9\u7684\u6728\u677f\u7f16\u53f7\n    ll mid=x+y>>1;\n    if(tag[k]) update(k,x,y);\n    return query(ls,x,mid,pos)+query(rs,mid+1,y,pos);\n}\nint main()\n{\n    ll i,j,stx,sty;\n    read(n),read(m);\n    read(stx),read(sty);\n    n++;//\u6709\u4e00\u4e2a\u8d77\u59cb\u4f4d\u7f6e\n    a[n].l=a[n].r=stx;\n    a[n].h=sty,a[n].id=n;\n    la[n]=stx,ra[n]=stx;\n    lx[++cnt]=a[n].l;\n    for(i=1;i<n;i++){\n        read(a[i].h),read(a[i].l),read(a[i].r);\n        a[i].id=i;\n        la[i]=a[i].l;\n        ra[i]=a[i].r;//la[] ra[]\u8bb0\u5f55\u539f\u6765i\u6728\u677f\u7684\u5de6\u53f3\u7aef\u70b9\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u9700\u8981\u79bb\u6563\u5316\u3002\n        lx[++cnt]=a[i].l;//lx[] \u4e3a\u79bb\u6563\u5316\u6570\u7ec4\n        lx[++cnt]=a[i].r;\n    }\n    sort(lx+1,lx+cnt+1);//\u79bb\u6563\u5316\u6570\u7ec4\u6392\u5e8f\n    sort(a+1,a+1+n);//\u6728\u677f\u9ad8\u5ea6\u6392\u5e8f\n    for(i=1;i<=n;i++){//\u533a\u95f4\u79bb\u6563\u5316\n        a[i].l=lower_bound(lx+1,lx+1+cnt,a[i].l)-lx;\n        a[i].r=lower_bound(lx+1,lx+1+cnt,a[i].r)-lx;\n    }\n    for(i=1;i<=n;i++){//\u70b9\u67e5\u8be2\uff0c\u4e0d\u518d\u591a\u8bf4\n        ch[i][0]=query(1,1,cnt,a[i].l);\n        ch[i][1]=query(1,1,cnt,a[i].r);\n        change(1,1,cnt,a[i].l,a[i].r,i);\n    }\n    memset(dp,0x3f,sizeof(dp));\n    dp[0][0]=dp[0][1]=0;//\u663e\u800c\u6613\u89c1\u7684\u521d\u59cb\u5316\n    for(i=1;i<=n;i++){\n        if(a[i].h-a[ch[i][0]].h<=m){//\u5982\u679c\u5927\u4e8em\u4e0d\u80fd\u8f6c\u79fb\n            if(ch[i][0]){//\u7f16\u53f7\u4e3a0\u8fd9\u5e26\u5230\u5230\u8fbe\u5730\u9762\n                 dp[i][0]=min(dp[i][0],dp[ch[i][0]][0]+la[a[i].id]-la[a[ch[i][0]].id]+a[i].h-a[ch[i][0]].h);\n                 dp[i][0]=min(dp[i][0],dp[ch[i][0]][1]+ra[a[ch[i][0]].id]-la[a[i].id]+a[i].h-a[ch[i][0]].h);//\u52a0\u4e86\u79bb\u6563\u6570\u7ec4\u7684\u65b9\u7a0b\uff0c\u4e00\u70b9\u70b9\u5c0f\u53d8\u5316\n             }\n             else dp[i][0]=a[i].h;\n        }\n        if(a[i].h-a[ch[i][1]].h<=m){\n            if(ch[i][1]){\n                dp[i][1]=min(dp[i][1],dp[ch[i][1]][0]+ra[a[i].id]-la[a[ch[i][1]].id]+a[i].h-a[ch[i][1]].h);\n                dp[i][1]=min(dp[i][1],dp[ch[i][1]][1]+ra[a[ch[i][1]].id]-ra[a[i].id]+a[i].h-a[ch[i][1]].h);\n            }\n            else dp[i][1]=a[i].h;\n        }\n    }\n    printf(\"%d\",min(dp[n][0],dp[n][1]));//\u6700\u540e\u7b54\u6848\u4e3a\u8f6c\u79fb\u5230\u8d77\u59cb\u4f4d\u7f6e n \u7684\u503c\u3002\n}//\u521a\u597d99\u884c\n```\n",
        "postTime": 1571997441,
        "uid": 209801,
        "name": "\u738bsky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1442 \u3010\u94c1\u7403\u843d\u5730\u3011"
    },
    {
        "content": "### \u770b\u5230\u5404\u4f4d\u90fd\u662f\u62ff\u7ebf\u6bb5\u6811\u4f18\u5316DP\u5199\u7684\uff0c\u5176\u5b9e\u8fd9\u9898\u8dd1\u6700\u77ed\u8def\u4f1a\u66f4\u5bb9\u6613\u7406\u89e3\uff0c\u4ee3\u7801\u4e5f\u597d\u6253\u3002\n\n### \u6700\u4e3b\u8981\u662f\u4ee3\u7801\u8dd1\u7684\u98de\u5febww\uff0c\u662f\u76ee\u524d\u7684rank1\n\n\u5168\u90e8\u8282\u70b9\uff1aAccepted  100 \n\u7528\u65f6: 136ms / \u5185\u5b58: 8304KB\n\n\n------------\n\n## \u5927\u81f4\u601d\u8def\uff1a\n\n### 1.\u5bf9\u6728\u677f\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n### 2.\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6728\u677f\uff0c\u66b4\u529b\u679a\u4e3e\u66f4\u4f4e\u7684\u6728\u677f\uff0c\u5982\u679c\u53ef\u4ee5\u627f\u63a5\u6389\u4e0b\u7684\u5c0f\u7403\uff0c\u4f7f\u5f53\u524d\u6728\u677f\u7684\u5de6\u6216\u53f3\u7aef\u70b9\u548c\u53ef\u5230\u8fbe\u7684\u6728\u677f\u7684\u5de6\u53f3\u7aef\u70b9\u76f8\u8fde\uff0c\u8def\u7684\u6743\u503c\u53ef\u4ee5\u7528\u5750\u6807\u8ba1\u7b97\u5f97\u5230\u3002\u6ce8\u610f\uff1a\u7528DFS\u6216\u8005BFS\u8ddf\u7740\u5c0f\u7403\u80fd\u4e0b\u843d\u7684\u6728\u677f\u679a\u4e3e\uff0c\u800c\u4e0d\u662f\u5168\u90e8\u90fd\u679a\u4e3e\uff0c\u56e0\u4e3a\u6709\u4e9b\u6728\u677f\u5c0f\u7403\u6839\u672c\u843d\u4e0d\u4e0b\u3002\u8fd8\u8981\u8bb0\u5f97\u6253\u6807\u8bb0\u9632\u6b62\u4e00\u4e2a\u6728\u677f\u88ab\u91cd\u590d\u641c\u7d22\u3002\u5982\u679c\u5f53\u524d\u6728\u677f\u6709\u7aef\u70b9\u6ca1\u6709\u627f\u63a5\u7684\u6728\u677f\uff0c\u5224\u65ad\u5176\u4f1a\u4e0d\u4f1a\u6389\u5230\u5730\u677f\u4e0a\u5e76\u8fde\u8fb9\u3002\n _**\u5c0f\u6280\u5de7\uff1a\u5c0f\u7403\u75280\u8868\u793a\uff0c\u5de6\u7aef\u70b9\u75281-n\u8868\u793a\uff0c\u53f3\u7aef\u70b9\u7528(n+1)-2n\u8868\u793a\uff0c\u5730\u677f\u75282n+1\u8868\u793a**_ \n### 3.\u968f\u4fbf\u8dd1\u4e2a\u6700\u77ed\u8def\u5f84\u5f97\u5230\u7b54\u6848\uff08\u52302n+1\u7684\u6700\u5c0f\u503c\uff09\u5373\u53ef\u3002\n\n\n------------\n## \u4ee3\u7801\u5982\u4e0b\uff1a\u90e8\u5206\u64cd\u4f5c\u6709\u6ce8\u91ca\n```cpp\n#pragma warning (disable:4996)\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <deque>\n#include <queue>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nconst int maxn = 2e5 + 5, maxm = 4e5 + 5, inf = 0x7fffffff;\nint head[maxm], nxt[maxm], v[maxm], w[maxm], h[maxn], x[maxn], y[maxn], dis[maxn];//h\u4e3a\u9ad8\u5ea6\uff0cxy\u4e3a\u5de6\u53f3\u7aef\u70b9\nbool vis[maxn];\nint n, m, cnt, sx, sy;\n\ninline void addline(int x, int y, int z) { v[cnt] = y, w[cnt] = z, nxt[cnt] = head[x], head[x] = cnt++; }\n\ninline int read()\n{\n\tregister int x = 0;\n\tregister char c = getchar();\n\twhile (c<'0' || c>'9') c = getchar();\n\twhile (c >= '0'&&c <= '9') x = (x << 3) + (x << 1) + c - '0', c = getchar();\n\treturn x;\n}\n\ninline void qsort(int l, int r)//\u624b\u5199\u5feb\u6392\n{\n\tregister int mid = h[(l + r) >> 1], L = l, R = r;\n\twhile (l <= r)\n\t{\n\t\twhile (h[l] > mid)\tl++;\n\t\twhile (h[r] < mid)\tr--;\n\t\tif (l <= r) { swap(h[l], h[r]), swap(x[l], x[r]), swap(y[l], y[r]), l++, r--; }\n\t}\n\tif (L < r)\tqsort(L, r);\n\tif (l < R)\tqsort(l, R);\n\treturn;\n}\n\ninline void connect()//\u91cd\u70b9\u64cd\u4f5c\uff1a\u8fde\u8fb9\n{\n\t//0\u53f7\u4e3a\u94c1\u7403\uff0c\u4e00\u500d\u70b9\uff081-n\uff09\u4e3a\u5de6\u7aef\u70b9\uff0c\u4e8c\u500d\u70b9\uff08n+1-2n)\u4e3a\u53f3\u7aef\u70b9\uff0c2*n+1\u4e3a\u5730\u677f\uff08\u6700\u7ec8\u6c47\u70b9\uff09\n\taddline(0, 1, sy - h[1] + sx - x[1]), addline(0, n + 1, sy - h[1] + y[1] - sx);\n\t//\u5e94\u8be5\u662f\u6570\u636e\u539f\u56e0\u5bfc\u81f4\u6392\u5e8f\u540e\u7b2c\u4e00\u5757\u6728\u677f\u4e00\u5b9a\u5728\u94c1\u7403\u4e0b\u65b9\uff0c\u6240\u4ee5\u8ba9\u5176\u548c\u6728\u677f\u7684\u5de6\u53f3\u4e24\u7aef\u70b9\u76f8\u8fde\uff0c\u5047\u5982\u6539\u6570\u636e\u4e5f\u6ca1\u95ee\u9898\uff0c\u5728\u8bfb\u5165\u65f6\u628a\u5927\u4e8e\u5c0f\u7403\u9ad8\u5ea6\u7684\u6728\u677f\u5168\u90e8\u5220\u9664\uff0c\u518d\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u6309\u9ad8\u5ea6\u679a\u4e3e\u5230\u80fd\u63a5\u5230\u5c0f\u7403\u7684\u6728\u677f\u5f53\u62101\u53f7\u6728\u677f\u5373\u53ef\n\tqueue<int> Q;//\u7528\u961f\u5217\u8f85\u52a9\u94fe\u63a5\n\twhile (!Q.empty())\tQ.pop();\n\tQ.push(1);//\u7b2c\u4e00\u5757\u6728\u677f\u5165\u961f\n\twhile (!Q.empty())\n\t{\n\t\tint i = Q.front(); Q.pop();\n\t\tbool left = false, right = false;//\u5c0f\u526a\u679d\uff1a\u5de6\u53f3\u90fd\u6709\u6728\u677f\u627f\u63a5\u5c31\u53ef\u4ee5\u4e0d\u7528\u679a\u4e3e\u4e86\n\t\tfor (int j = i + 1; h[i] > h[j] && h[i] - h[j] <= m && j <= n; j++)//\u66b4\u529b\u679a\u4e3e\u80fd\u843d\u4e0b\u7684\u6728\u677f\n\t\t{\n\t\t\tif (!left && x[j] < x[i] && x[i] < y[j])//\u8ba1\u7b97\u6728\u677fi\u7684\u5de6\u7aef\u70b9\u662f\u5426\u80fd\u843d\u5230\u6728\u677fj\uff0c\u6839\u636e\u4e0d\u7b49\u5f0f\u63a8\u4e00\u4e0b\u5c31\u660e\u767d\u4e86\n\t\t\t{\n\t\t\t\t//\u5982\u679c\u53ef\u4ee5\n\t\t\t\taddline(i, j, h[i] - h[j] + x[i] - x[j]);//\u6728\u677fi\u7684\u5de6\u7aef\u70b9\u94fe\u63a5\u6728\u677fj\u7684\u5de6\u7aef\u70b9\n\t\t\t\taddline(i, j + n, h[i] - h[j] + y[j] - x[i]);//\u6728\u677fi\u7684\u5de6\u7aef\u70b9\u94fe\u63a5\u6728\u677fj\u7684\u53f3\u7aef\u70b9\uff08\u4e8c\u500d\u70b9\uff09\n\t\t\t\tleft = true;\n\t\t\t\tif (!vis[j])\tQ.push(j), vis[j] = true;//j\u6ca1\u5165\u961f\u8fc7\u624d\u80fd\u641c\uff0c\u9632\u6b62\u641c\u591a\u8d85\u65f6\n\t\t\t}\n\t\t\tif (!right && x[j] < y[i] && y[i] < y[j])//\u8ba1\u7b97\u6728\u677fi\u7684\u53f3\u7aef\u70b9\u662f\u5426\u80fd\u843d\u5230\u6728\u677fj\uff0c\u4e0e\u4e0a\u9762\u540c\u7406\n\t\t\t{\n\t\t\t\taddline(i + n, j, h[i] - h[j] + y[i] - x[j]);\n\t\t\t\taddline(i + n, j + n, h[i] - h[j] + y[j] - y[i]);\n\t\t\t\tright = true;\n\t\t\t\tif (!vis[j])\tQ.push(j), vis[j] = true;\n\t\t\t}\n\t\t\tif (left && right)\tbreak;//\u5de6\u53f3\u7aef\u70b9\u90fd\u6709\u6728\u677f\u63a5\u7740\u5c31\u4e0d\u7528\u679a\u4e3e\u4e86\n\t\t}\n\t\tif (!left&&h[i] <= m)\taddline(i, n << 1 | 1, h[i]);//\u5982\u679c\u5de6\u7aef\u70b9\u6ca1\u6709\u843d\u70b9\uff0c\u5224\u65ad\u80fd\u4e0d\u80fd\u843d\u5230\u5730\u4e0a(\u70b9\u4e3a2*n+1)\n\t\tif (!right&&h[i] <= m)\taddline(i + n, n << 1 | 1, h[i]);//\u5224\u65ad\u53f3\u7aef\u70b9\uff0c\u540c\u7406\n\t}\n\treturn;\n}\n\ninline void SPFA()//SPFA+SLF\u4f18\u5316\n{\n\tmemset(dis, 0x3f, sizeof(dis));\n\tmemset(vis, 0, sizeof(vis));\n\tdeque<int> Q;\n\twhile (!Q.empty())\tQ.pop_back();\n\tdis[0] = 0, Q.push_back(0), vis[0] = true;\n\twhile (!Q.empty())\n\t{\n\t\tint x = Q.front(); Q.pop_front(); vis[x] = false;\n\t\tfor (register int i = head[x]; i != -1; i = nxt[i])\n\t\t\tif (dis[v[i]] > dis[x] + w[i])\n\t\t\t{\n\t\t\t\tdis[v[i]] = dis[x] + w[i];\n\t\t\t\tif (!vis[v[i]])\n\t\t\t\t{\n\t\t\t\t\tvis[v[i]] = true;\n\t\t\t\t\tif (!Q.empty())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (dis[v[i]] > dis[Q.front()])\tQ.push_back(v[i]);\n\t\t\t\t\t\telse  Q.push_front(v[i]);\n\t\t\t\t\t}\n\t\t\t\t\telse  Q.push_back(v[i]);\n\t\t\t\t}\n\t\t\t}\n\t}\n\treturn;\n}\n\nint main()\n{\n\tmemset(head, -1, sizeof(head));\n\tn = read(), m = read(), sx = read(), sy = read();//sx,sy\u4e3a\u5c0f\u7403\u5750\u6807\n\tfor (int i = 1; i <= n; i++)\th[i] = read(), x[i] = read(), y[i] = read();\n\tqsort(1, n), connect(), SPFA();//\u5148\u6392\u5e8f\uff0c\u8fde\u63a5\u597d\u8fb9\u5c31\u8dd1\u4e00\u8fb9SPFA\n\tprintf(\"%d\\n\", dis[n << 1 | 1]);//\u6700\u7ec8\u6c47\u70b9\uff0c\u5373\u5730\u677f\uff082*n+1\uff09\u79bb\u5c0f\u7403\u7684\u6700\u77ed\u8ddd\u79bb\u5373\u662f\u7b54\u6848\n\treturn 0;\n}\n```\n\n\n------------\n### \u5c0f\u5410\u69fd\uff1a\n\u4e00\u5f00\u59cb\u8fde\u8fb9\u6ca1\u6709\u6253\u6807\u8bb0\uff0c\u4ee5\u4e3a\u662f\u6700\u77ed\u8def\u8d85\u65f6\u4e86\uff0c\u4e0a\u4e86\u5404\u79cd\u4f18\u5316\uff08SPFA+SLF\uff0c\u5feb\u8bfb\uff0c\u624b\u5199\u5feb\u6392\u7b49\u7b49\uff09\uff0c\u6240\u4ee5\u5bfc\u81f4\u4ee3\u7801\u5f88\u957f\u8fd8\u8c03\u4e86\u5f88\u4e45QwQ",
        "postTime": 1532423082,
        "uid": 29354,
        "name": "CodyTheWolf",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1442 \u3010\u94c1\u7403\u843d\u5730\u3011"
    },
    {
        "content": "## \u5199\u5728\u524d\u9762\n\n\u6211\u6ca1\u7528\u7ebf\u6bb5\u6811\uff08\u8eb2\u8fdb\u5c0f\u88ab\u51e0.jpg\uff09\n\n## \u601d\u8def\n\n\u7403\u662f\u4ece\u4e0a\u5f80\u4e0b\u6389\u843d\u7684\u554a\uff0c\u6240\u4ee5\u6309\u9ad8\u5ea6\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\n\n\u4ece\u54ea\u4e2a\u5e73\u53f0\u5f00\u59cb\u662f\u53ef\u4ee5\u786e\u5b9a\u7684\uff0c\u4e00\u5f00\u59cb\u6bd4\u7403\u9ad8\u7684\u5e73\u53f0\u5c31\u76f4\u63a5\u7565\u8fc7\uff0c\u7136\u540e\u518d\u627e\u80fd\u63a5\u5230\u7403\u7684\u7b2c\u4e00\u4e2a\u5e73\u53f0\uff0c\u8bbe\u4e0b\u6807\u4e3a now\uff0c\n\n\u8bbe `c[i].l` \u548c `c[i].r` \u5206\u522b\u8868\u793a\u5230\u67d0\u4e2a\u5e73\u53f0\u7684\u5de6\u8fb9\u7f18\u3001\u53f3\u8fb9\u7f18\u6240\u8017\u65f6\u95f4\uff08\u56e0\u4e3a\u5c0f\u7403\u6389\u843d\u7684\u5782\u76f4\u8ddd\u79bb\u662f\u4e00\u5b9a\u7684\uff0c\u6240\u4ee5\u6240\u4ee5\u8fd9\u91cc c \u6570\u7ec4\u53ea\u8bb0\u5f55\u6c34\u5e73\u6240\u8017\u65f6\u95f4\uff09\n\n\u4ece now \u679a\u4e3e\u5230 n\uff0c\u8003\u8651\u5f53\u524d\u679a\u4e3e\u5230\u7684\u5e73\u53f0\u4ece\u5de6\u3001\u53f3\u4e24\u8fb9\u7f18\u5206\u522b\u6389\u5230\u54ea\u91cc\uff0c\u5c31\u66f4\u65b0\u54ea\u4e2a\u5e73\u53f0\u7684\u503c\uff0c\u6240\u4ee5\u6bcf\u4e2a\u5e73\u53f0\u7684\u4e24\u8fb9\u7f18\u53ea\u9700\u627e\u5230\u7b2c\u4e00\u4e2a\u63a5\u5230\u7403\u7684\u5e73\u53f0\u5c31\u597d\u4e86\uff0c\u8003\u8651\u5230\u4e00\u4e2a\u5e73\u53f0\u80fd\u63a5\u53d7\u5230\u4ece\u4e0d\u540c\u5e73\u53f0\u7684\u8fb9\u7f18\u6389\u843d\u7684\u7403\uff0c\u6240\u4ee5\u66f4\u65b0\u65f6\u53d6max\uff0c\u6240\u4ee5\u4e8b\u5148\u5c06 c \u6570\u7ec4\u8d4b\u6700\u5927\u503c\n\n**\u6ce8\u610f**\n* now \u7684 c \u6570\u7ec4\u7684\u503c\u5148\u7b97\u51fa\u6765\u518d\u53bb\u679a\u4e3e; \n* \u6700\u540e\u522b\u5fd8\u4e86\u52a0\u7403\u7684\u521d\u59cb\u9ad8\u5ea6\n\n---\n\n**\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u66b4\u529b\u80fd\u8fc7**\uff0c\u5927\u6982\u56e0\u4e3a\u5e73\u53f0\u8fc7\u4e8e\u5bc6\u96c6\u5bfc\u81f4\u8be5\u5e73\u53f0\u4e0e\u5176\u7b2c\u4e00\u4e2a\u63a5\u5230\u7403\u7684\u5e73\u53f0\u8ddd\u79bb\u8fc7\u8fd1\uff0c~~\u800c\u6211\u5077\u9e21\u53d6\u5de7~~\uff0c\u4e0d\u6392\u9664\u6570\u636e\u6c34\u7684\u539f\u56e0\uff08\uff1f\u96fe\uff09\n\n\u4ee3\u7801\u6709\u6ce8\u91ca\uff0c\u4e0d\u61c2\u8bf7\u79c1\u4fe1 \n\n```c++\n#include <bits/stdc++.h>\n#define N 100010\n#define inf 999999999\nusing namespace std;\ninline int in() {\n    int x = 0, f = 1; char C = getchar();\n    while(C < '0' or C > '9') { if(C == '-') f = -1; C = getchar(); }\n    while(C >= '0' and C <= '9') x = (x << 3) + (x << 1) + (C ^ 48), C = getchar();\n    return x * f;\n}\nint n, H, sx, sy, ans = inf;\nstruct hh { int h, l, r; } o[N];\nstruct hhh { int l, r; } c[N];\nbool cmp(hh x, hh y) { return x.h > y.h; }\n// H\uff1a\u6389\u843d\u9ad8\u5ea6\u9650\u5236 o\uff1a\u8bb0\u5f55\u5e73\u53f0\u4fe1\u606f c:\u8bb0\u5f55\u5230\u7b2ci\u4e2a\u5e73\u53f0\u5de6\u53f3\u8fb9\u7f18\u5206\u522b\u6240\u8017\u6700\u77ed\u65f6\u95f4\n\nint main() {\n    n = in(), H = in(), sx = in(), sy = in();\n    for(int i = 1; i <= n; i ++) o[i].h = in(), o[i].l = in(), o[i].r = in();\n    for(int i = 1; i <= n; i ++) c[i].l = c[i].r = inf; //\u521d\u59cb\u5316\n    sort(o + 1, o + n + 1, cmp); \n    //\u4ece\u4e0b\u9762\u5f00\u59cb\u627e\u7b2c\u4e00\u4e2a\u63a5\u5230\u7403\u7684\u5e73\u53f0\n    int now = 1;\n    while(sy < o[now].h) now ++; //\u6bd4\u7403\u9ad8\u7684\u7565\u8fc7\n    while(sx > o[now].r or sx < o[now].l) now ++; //\u76f4\u5230\u80fd\u63a5\u5230\u7403\u4e3a\u6b62\n    c[now].l = sx - o[now].l; //\u53ea\u8003\u8651\u6c34\u5e73\u65b9\u5411\u7684\u8017\u65f6\n    c[now].r = o[now].r - sx;\n    for(register int i = now, oo, flag; i <= n; i ++) {\n        if(c[i].l == inf) continue; //\u7403\u6ca1\u80fd\u5230\u8fbe\u8fc7\u6b64\u5e73\u53f0\uff0c\u81ea\u7136\u65e0\u6cd5\u66f4\u65b0\u522b\u4eba\uff0c\u8df3\u8fc7\n\t//\u5de6\u8fb9\u7f18\u2193\n        oo = i + 1, flag = 1; \n        //oo\uff1a\u679a\u4e3ei\u4e4b\u540e\u7684\u5e73\u53f0\u7684\u4e0b\u6807\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u80fd\u63a5\u4f4f\u4ece\u7b2ci\u4e2a\u5e73\u53f0\u5de6\u8fb9\u7f18\u6389\u843d\u7684\u7403\u7684\u5e73\u53f0\n        //flag\uff1a\u82e5\u4ece\u5de6\u8fb9\u7f18\u6389\u843d\u80fd\u66f4\u65b0\u5230\u67d0\u4e2a\u5e73\u53f0\uff0c\u4e0d\u80fd\u6389\u5230\u5730\u4e0a\uff0c\u8d4b\u4e3a0\n        while(o[i].h - o[oo].h <= H and oo <= n) {//\u6389\u843d\u9ad8\u5ea6\u9650\u5236\u5185&&n\u4e2a\u5185\n            if(o[oo].l <= o[i].l and o[i].l <= o[oo].r) {//\u82e5\u80fd\u63a5\u5230\n                c[oo].l = min(c[oo].l, c[i].l + o[i].l - o[oo].l);\n                c[oo].r = min(c[oo].r, c[i].l + o[oo].r - o[i].l);\n                flag = 0; break;//\u80fd\u66f4\u65b0\u5230\u522b\u4eba\uff0c\u8d4b0\uff0c\u9000\u51fa\n            } oo ++;\n        }\n        if(o[i].h <= H and flag) ans = min(ans, c[i].l);\n        //\u82e5\u6ca1\u6709\u5e73\u53f0\u80fd\u63a5\u5230\u7403\uff0c\u4e14\u5728H\u8303\u56f4\u5185\uff0c\u5c31\u53ef\u4ee5\u66f4\u65b0\u7b54\u6848\u4e86\n        //\u53f3\u8fb9\u7f18\u2193\uff0cctrl+c and ctrl+v and \u5fae\u521b\n        oo = i + 1, flag = 1;\n        while(o[i].h - o[oo].h <= H and oo <= n) {\n            if(o[oo].l <= o[i].r and o[i].r <= o[oo].r) {\n                c[oo].l = min(c[oo].l, c[i].r + o[i].r - o[oo].l);\n                c[oo].r = min(c[oo].r, c[i].r + o[oo].r - o[i].r);\n                flag = 0; break;\n            } oo ++;\n        }\n        if(o[i].h <= H and flag) ans = min(ans, c[i].r);\n    }\n    cout << ans + sy;//\u6c34\u5e73\u79fb\u52a8\u8017\u65f6+\u521d\u59cb\u9ad8\u5ea6\n    return 0;\n}\n```",
        "postTime": 1605351342,
        "uid": 247531,
        "name": "hulne",
        "ccfLevel": 0,
        "title": "P1442 \u94c1\u7403\u843d\u5730"
    },
    {
        "content": "# \u5efa\u56fe\u8dd1Dijkstra\n\n\u6b64\u9898\u5361\u6211\u534a\u5929...\u6211\u592a\u83dc\u4e86...o(\u2565\ufe4f\u2565)o\n\n~~\u5927\u5bb6\u53ef\u4ee5\u770b\u770b\u8bc4\u6d4b\u8bb0\u5f55\uff0c\u6709\u4e00\u9875\u591a\u90fd\u662f\u6211...~~\n\n\u672c\u6765\u4ee5\u4e3aTLE\u662f\u54ea\u91cc\u51fa\u4e86\u70b9\u5c0f\u95ee\u9898,\u7136\u540e\u8c03\u4e86\u534a\u5929\uff0c\u53c8\u662f\u4e0d\u7528vector\u53c8\u662f\u7384\u5b66\u4f18\u5316\u7684...\u6700\u540e\u770b\u4e86\u9898\u89e3\u624d\u53d1\u73b0\u662f\u5efa\u56fe\u592a\u6162\u4e86...\n\n------------\n\n~~\u6b64\u5206\u754c\u7ebf\u4ee5\u4e0a\u662f\u5e9f\u8bdd...~~\n\n------------\n\n### \u601d\u8def\n\n- \u8bfb\u5165\u6570\u636e\uff0c\u5e76\u6839\u636e\u5c0f\u7403\u521d\u59cb\u9ad8\u5ea6**\u5220\u9664\u9ad8\u5ea6\u6bd4\u5c0f\u7403\u521d\u59cb\u9ad8\u5ea6\u9ad8\u7684\u5e73\u53f0**\uff08\u56e0\u4e3a\u5b83\u53ea\u80fd\u5f80\u4e0b\u6eda...\uff09\n\n- \u6392\u5e8f\u5e73\u53f0\uff0c\u6765\u52a0\u901f\u5efa\u56fe\uff08\u56e0\u4e3a\u5c0f\u7403\u4f1a\u88ab**\u7b2c\u4e00\u4e2a\u8986\u76d6\u5176\u4e0b\u843dx\u5750\u6807**\u7684\u677f\u5b50\u63a5\u4f4f\uff09\uff0c\u6240\u4ee5\u8ba9\u5e73\u53f0\u5355\u8c03\u9012\u589e\uff08\u6216\u9012\u51cf\uff09\u5c31\u884c...\n\n- \u5728\u5168\u90e8\u5e73\u53f0\u6392\u5e8f\u540e\uff0c\u63d2\u5165\u5c0f\u7403\u7684\u521d\u59cb\u4f4d\u7f6e\u3002\u5c0f\u7403\u521d\u59cb\u4f4d\u7f6e\u53ef\u4ee5\u89c6\u4e3a\u5728\u4e00\u4e2a\u9ad8\u5ea6\u662f**y**\uff08y\u8868\u793a\u521d\u59cb\u9ad8\u5ea6\uff09\uff0c\u8986\u76d6**[x,x]**\uff08x\u8868\u793a\u521d\u59cb\u6a2a\u5750\u6807\uff09\u8303\u56f4\u7684\uff08\u6ca1\u6709\u5bbd\u5ea6\u7684\uff09\u5e73\u53f0\u4e0a\uff0c\u8ba9n+1\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5e73\u53f0\u4fdd\u5b58\u8fdb\u53bb\u3002\n\n- \u4e4b\u540e\u7528\u961f\u5217\u4f18\u5316\u5efa\u56fe\u3002\u56e0\u4e3a**\u4e0d\u662f\u6240\u6709\u5e73\u53f0\u90fd\u4f1a\u88ab\u5c0f\u7403\u4f7f\u7528**\uff0c\u6240\u4ee5\u4e0d\u7528\u7ba1\u591a\u4f59\u7684\u5e73\u53f0\u3002\n\n- \u5efa\u56fe\u65f6\u4ece\u5f53\u524d\u7684\u5e73\u53f0**\u5de6\u7aef**\u548c**\u53f3\u7aef**\u5206\u522b\u5f80\u4e0b\u627e\u53ef\u4ee5\u627f\u63a5\u5c0f\u7403\u7684\u5e73\u53f0\u3002\u5982\u679c\u627e\u5230\u5e73\u53f0\u4e14**\u9ad8\u5ea6\u5dee\u5c0f\u4e8emax**\uff08\u4e0d\u8981\u5fd8\u4e86...\uff09\uff0c\u5c31\u8bb0\u5f55\u4ece\u5c0f\u7403\u6389\u843d\u4f4d\u7f6e\u5206\u522b\u5230\u5e73\u53f0\u4e24\u8fb9\u7684\u8ddd\u79bb\u5e76\u8fde\u63a5\uff08\u4e0d\u7528\u8bb0\u5f55\u9ad8\u5ea6\u5dee\uff0c\u56e0\u4e3a\u5230\u5730\u9762\u7684**\u4e0b\u843d\u8ddd\u79bb\u4e00\u5b9a\u662fy**\uff09\u3002\u5982\u679c\u627e\u4e0d\u5230\u5e73\u53f0\uff0c\u518d\u53bb\u5224\u65ad**\u5730\u9762**\u80fd\u4e0d\u80fd\u627f\u63a5\uff0c\u5982\u679c\u80fd\u5c31\u8fde\u63a5\u3002\u5efa\u56fe\u7684\u65f6\u5019\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u628a\u7b2ci\u5757\u5e73\u53f0\u7684\u5de6\u7aef\u5750\u6807\u5b9a\u4e3a**i**\uff0c\u53f3\u7aef\u5750\u6807\u5b9a\u4e49\u4e3a**i+n**\uff0c\u4e24\u4e2a\u5750\u6807\u4e4b\u95f4\u6ca1\u6709\u76f4\u63a5\u7684\u8fb9\u8fde\u63a5\uff08\u56e0\u4e3a\u4e0d\u9700\u8981\uff09\u3002\n\n ##### //P.S. \u4e0d\u8981\u7528\u4ec0\u4e48Vector\uff0c\u6ca1\u6709\u5fc5\u8981...\n\n- \u6700\u540e\u8dd1\u4e00\u904d\u5806\u4f18\u5316\u7684**Dijkstra**\uff08\u5f53\u7136\uff0cSPFA\u5728\u8fd9\u9053\u9898\u4e5f\u8bb8\u66f4\u5feb...\u5982\u679c\u8ffd\u6c42\u901f\u5ea6\u8fd8\u53ef\u4ee5\u5b66\u4e60\u66f4\u5f3a\u5927\u7684\u6700\u77ed\u8def\u7b97\u6cd5\uff09\n\n------------\n\n### \u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<algorithm>\n#include<cctype>\n#include<cstring>\n#define rint register int\ninline int read()\n{\n    rint k=0,c=getchar();\n    while(!isdigit(c))\n        c=getchar();\n    while(isdigit(c))\n    {\n        k=10*k+c-'0';\n        c=getchar();\n    }\n    return k;\n}\nstruct Q{\n    int h,x,y;\n    Q(){}\n    Q(int _h,int _x,int _y):h(_h),x(_x),y(_y){}\n}a[100005];\nstruct P{\n    int x,d;\n    P(){}\n    P(int _x,int _d):x(_x),d(_d){}\n}v[200005][2];\nconst bool operator <(P a,P b)\n{\n    return a.d>b.d;\n}\ninline bool cmp(Q a,Q b)\n{\n    return a.h<b.h;\n}\nstd::priority_queue<P> que;\nint vis[200005],n,max,x,y;\nint main()\n{\n\tstd::memset(v,-1,sizeof(v));//init\n    n=read();\n    max=read();\n    x=read();\n    y=read();\n    for(rint i=1;i<=n;++i)\n    {\n        a[i].h=read();\n        a[i].x=read();\n        a[i].y=read();\n        if(a[i].h>y)//delete\n        {\n        \t--n;\n        \t--i;\n\t\t}\n    }\n    std::sort(a+1,a+n+1,cmp);\n    a[++n]=Q(y,x,x);\n    std::queue<int> tq;\n    tq.push(n); \n    while(!tq.empty())\n    {\n    \tint i=tq.front();\n    \ttq.pop();\n        //find left\n        int mem=0,point=a[i].x,h=a[i].h;\n        for(int j=i-1;j>=1&&h-max<=a[j].h;--j)\n            if(a[j].x<=point&&a[j].y>=point)\n            {\n                mem=j;\n                break;\n            }\n        int delta=h-a[mem].h;\n        if(delta<=max)\n        {\n        \tif(mem==0)\n                v[i][0]=P(0,0);\n            else\n            {\n            \tv[i][1]=P(n+mem,a[mem].y-point),v[i][0]=P(mem,point-a[mem].x);\n            \tif(!vis[mem])\n                {\n                \ttq.push(mem); \n                \tvis[mem]=1;\n\t\t\t\t}\n\t\t\t}\n        }\n        //find right\n        mem=0,point=a[i].y;\n        for(int j=i-1;j>=1&&h-max<=a[j].h;--j)\n            if(a[j].x<=point&&a[j].y>=point)\n            {\n                mem=j;\n                break;\n            }\n        delta=h-a[mem].h;\n        if(delta<=max)\n        {\n        \tif(mem==0)\n            \tv[n+i][0]=P(0,0);\n        \telse\n        \t{\n        \t\tv[n+i][1]=P(n+mem,a[mem].y-point),v[n+i][0]=P(mem,point-a[mem].x);\n        \t\tif(!vis[mem])\n                {\n                \ttq.push(mem); \n                \tvis[mem]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n    std::memset(vis,0,sizeof(vis));\n    que.push(P(n,0));\n    rint now,d;\n    while(!que.empty())//Dijkstra\n    {\n        now=que.top().x;\n        d=que.top().d;\n        que.pop();\n        if(now==0)\n        {\n            printf(\"%d\",d+y);\n            return 0;\n        }\n        if(vis[now])\n            continue;\n        vis[now]=1;\n        for(rint i=0;i<=1;++i)\n            if(v[now][i].x!=-1&&!vis[v[now][i].x])\n                que.push(P(v[now][i].x,v[now][i].d+d));\n    }\n    return 0;\n} \n```\n\n------------\n\n### \u8bc4\u6d4b\u7ed3\u679c\uff1a130ms/5.63MB \n\n\u76ee\u524d**RANK1**\uff0c\u8fd8\u7b97\u53ef\u4ee5\u4e86~~\uff08\u7b49\u90a3\u4e9b\u4f18\u5316\u795e\u4f6c\u4e00\u6765\u5c31\u4e0b\u53bb\u4e86...\uff09~~",
        "postTime": 1545581411,
        "uid": 67013,
        "name": "Zachary_260325",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1442 \u3010\u94c1\u7403\u843d\u5730\u3011"
    },
    {
        "content": "#### \u83ab\u540d\u60f3\u5199\u4e00\u7bc7\u9898\u89e3\n\u8bb2\u7684\u4e0d\u597d\uff0cdalao\u4eec\u52ff\u55b7\n\n\u8fd9\u662f\u4e00\u9053\u5f88\u7ecf\u5178\u7684\u7ebf\u6bb5\u6811\u4f18\u5316dp\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u4ece\u6bcf\u4e2a\u5e73\u53f0\u7684\u4e24\u7aef\u5411\u4e0b\u843d\uff0c\u843d\u70b9\u5177\u6709\u552f\u4e00\u6027\n\n\u4e8e\u662f\u5c31\u628a\u5e73\u53f0\u6a2a\u5750\u6807\u79bb\u6563\u5316\u4e00\u4e0b\uff0c\n\n\u4ece\u4e0b\u5f80\u4e0a\u8986\u76d6\uff0c\u7528\u7ebf\u6bb5\u6811\u9884\u5904\u7406\u4e00\u4e0b\u6bcf\u4e2a\u5e73\u53f0\u4e24\u7aef\u6389\u843d\u5230\u7684\u5e73\u53f0\n\n\u518d\u8ba1\u7b97\u8f6c\u79fb\u65b9\u7a0b\uff0c\u65b9\u7a0b\u5c31\u7565\u4e86\n\n\u65f6\u95f4\u590d\u6742\u5ea6 O(nlogn)\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n//\u5904\u5904\u7559\u5fc3\u79bb\u6563\u5316 \n//\u5411\u4e0b\u6389\u5177\u6709\u552f\u4e00\u6027 \n//\u4ece\u5e95\u5411\u4e0a\u8986\u76d6\u9884\u5904\u7406\u6bcf\u5757\u80fd\u6389\u5230\u7684\u5757(Segtree)\n#include<bits/stdc++.h>\nusing namespace std;\n#define MAXN 200005\n#define INF 1<<30\nstruct Node\n{\n    int shu,cover;\n}segtree[MAXN<<2];//\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\nstruct DD\n{\n    int ld,rd,hd;\n}kuai[MAXN];\nbool cmp(DD a,DD b)\n{\n    return a.hd<b.hd;\n}\nint pai[MAXN];int paitail=1;\nint duiy[MAXN];int f[MAXN][2];\nint hhnext[MAXN][2];int start_next;\nint n,maxt,startx,starty;\ninline void pushup(int cur)\n{\n    segtree[cur].shu=max(segtree[cur<<1].shu,segtree[cur<<1|1].shu);\n    return;\n}\ninline void pushdown(int cur)\n{\n    if(segtree[cur].cover==0)return;\n    segtree[cur<<1].cover=segtree[cur<<1|1].cover=segtree[cur].cover;\n    segtree[cur<<1].shu=segtree[cur<<1|1].shu=segtree[cur].cover;\n    segtree[cur].cover=0;return;\n}\ninline int query(int cur,int l,int r,int L,int R)\n{\n    if(L<=l&&r<=R){\n        return segtree[cur].shu;\n    }\n    pushdown(cur);int ans=0;\n    int mid=(l+r)>>1;\n    if(L<=mid)ans=max(ans,query(cur<<1,l,mid,L,R));\n    if(R>mid)ans=max(ans,query(cur<<1|1,mid+1,r,L,R));\n    return ans;\n}\ninline void add(int cur,int l,int r,int L,int R,int t)\n{\n    if(L<=l&&r<=R)\n    {\n        segtree[cur].shu=segtree[cur].cover=t;\n        return;\n    }\n    pushdown(cur);\n    int mid=(l+r)>>1;\n    if(L<=mid)add(cur<<1,l,mid,L,R,t);\n    if(R>mid)add(cur<<1|1,mid+1,r,L,R,t);\n    pushup(cur);\n    return;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&maxt);scanf(\"%d%d\",&startx,&starty);\n    for(register int i=1;i<=n;i++)\n    {\n        scanf(\"%d%d%d\",&kuai[i].hd,&kuai[i].ld,&kuai[i].rd);\n        pai[paitail++]=kuai[i].ld;pai[paitail++]=kuai[i].rd;\n    }\n    sort(pai+1,pai+paitail);\n    for(register int i=1;i<=n;i++)\n    {\n        int searchh=lower_bound(pai+1,pai+paitail,kuai[i].ld)-pai;\n        duiy[searchh]=kuai[i].ld;kuai[i].ld=searchh;\n        searchh=lower_bound(pai+1,pai+paitail,kuai[i].rd)-pai;\n        duiy[searchh]=kuai[i].rd;kuai[i].rd=searchh;\n    }\n    sort(kuai+1,kuai+n+1,cmp);\n    for(register int i=1;i<=n;i++)\n    {\n        hhnext[i][0]=query(1,1,200000,kuai[i].ld,kuai[i].ld);\n        if(kuai[i].hd-kuai[hhnext[i][0]].hd>maxt)hhnext[i][0]=-1;\n        hhnext[i][1]=query(1,1,200000,kuai[i].rd,kuai[i].rd);\n        if(kuai[i].hd-kuai[hhnext[i][1]].hd>maxt)hhnext[i][1]=-1;\n        add(1,1,200000,kuai[i].ld,kuai[i].rd,i);\n    }\n    int h = lower_bound(pai + 1, pai + paitail, startx) - pai;\n    start_next = query(1, 1, 200000, h, h); if (starty - kuai[start_next].hd>maxt)start_next = -1;\n    for(register int i=0;i<=n;i++)\n    {\n        f[i][0]=f[i][1]=INF;\n    }\n    f[start_next][0]=abs(duiy[kuai[start_next].ld]-startx);\n    f[start_next][1]=abs(duiy[kuai[start_next].rd]-startx);\n    for(register int i=start_next;i>=1;i--)\n    {\n        if(hhnext[i][0]!=-1){\n        f[hhnext[i][0]][0]=min(f[hhnext[i][0]][0],f[i][0]+(hhnext[i][0]==0?0:abs(duiy[kuai[hhnext[i][0]].ld]-duiy[kuai[i].ld])));\n        f[hhnext[i][0]][1]=min(f[hhnext[i][0]][1],f[i][0]+(hhnext[i][0]==0?0:abs(duiy[kuai[hhnext[i][0]].rd]-duiy[kuai[i].ld])));\n        }\n        if(hhnext[i][1]!=-1){\n        f[hhnext[i][1]][0]=min(f[hhnext[i][1]][0],f[i][1]+(hhnext[i][1]==0?0:abs(duiy[kuai[hhnext[i][1]].ld]-duiy[kuai[i].rd])));\n        f[hhnext[i][1]][1]=min(f[hhnext[i][1]][1],f[i][1]+(hhnext[i][1]==0?0:abs(duiy[kuai[hhnext[i][1]].rd]-duiy[kuai[i].rd])));\n        }\n    }\n    //for(register int i=0;i<=n;i++)printf(\"%d %d\\n\",f[i][0],f[i][1]);\n    int ans=min(f[0][0],f[0][1]);\n    ans+=starty;\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1519301965,
        "uid": 47032,
        "name": "hu1029282594",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1442 \u3010\u94c1\u7403\u843d\u5730\u3011"
    },
    {
        "content": "### \u7ebf\u6bb5\u6811 + DP\n\n\u5148\u628a\u5e73\u53f0\u79bb\u6563\u5316\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811\u66f4\u65b0\u5e76\u67e5\u8be2\u5f53\u524d\u843d\u70b9\u5728\u54ea\u4e2a\u5e73\u53f0\uff0c\u8fd9\u91cc\u7684\u7ebf\u6bb5\u6811\u53ea\u9700\u8981\u533a\u95f4\u8d4b\u503c\u548c\u5355\u70b9\u67e5\u8be2\u64cd\u4f5c\u5373\u53ef\uff0c\u6240\u4ee5\u6807\u8bb0\u6570\u7ec4\u4e5f\u53ef\u4ee5\u7701\u7565\uff0c\u6bcf\u6b21\u7684\u4e0b\u653e\u64cd\u4f5c\u9700\u8981\u6e05\u9664\u4e00\u4e0b\u975e\u53f6\u8282\u70b9\u7684\u503c\n\n$dp[i][0/1]$ \u5206\u522b\u8868\u793a$i$\u53f7\u5e73\u53f0\u4ece\u4e0a\u8f6c\u79fb\u8fc7\u6765\u5e76\u5411\u5de6\u8d70\u6216\u5411\u53f3\u8d70\u7684\u6700\u5c0f\u503c\uff0c\u8f6c\u79fb\u7684\u65f6\u5019\u4e5f\u662f\u4ece\u9ad8\u5f80\u4f4e\u8f6c\u79fb\uff0c\u8fd8\u8981\u5148\u521d\u59cb\u5316\u4e00\u4e0b\u5c0f\u7403\u7b2c\u4e00\u4e2a\u843d\u5230\u7684\u5e73\u53f0\uff0c\u5e76\u7279\u5224\u5982\u679c\u843d\u70b9\u662f\u5730\u9762\uff0c\u5c31\u66f4\u65b0\u4e00\u4e0b\u7b54\u6848\n\n\u6700\u540e\u8f93\u51fa\u7b54\u6848\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b(\u6ce8\u610f\u79bb\u6563\u6570\u7ec4\u8981\u5f00\u4e24\u500d\uff0c\u7ebf\u6bb5\u6811\u5f00\u516b\u500d\u54c7)\n\n```cpp\n#include <cctype>\n#include <cstdio>\n#include <algorithm>\n\n#define MAXN 100010\n#define INF 0x3f3f3f3f\n#define mid ((l + r) >> 1)\n\nvoid read(int &res)\n{\n    char ch = getchar();\n    res = 0;\n    for (; !std::isdigit(ch); ) ch = getchar();\n    for (; std::isdigit(ch); ) res = (res << 1) + (res << 3) + (ch ^ 48), ch = getchar();\n}\n\nstruct Roof\n{\n    int l, r, ll, rr, lx, rx, h;\n\n    bool operator < (const Roof &A) const\n    {\n        return h < A.h;\n    }\n} a[MAXN];\n\nstruct Point\n{\n    int id, pos;\n\n    bool operator < (const Point &A) const\n    {\n        return pos < A.pos;\n    }\n} b[MAXN << 1];\n\nint n, Max, x, y, N, L, R, val, ans = INF, dp[MAXN][2], tree[MAXN << 3];\n\nvoid update(int rt, int l, int r)\n{\n    if (l >= L && r <= R)\n    {\n        tree[rt] = val;\n        return ;\n    }\n    if (tree[rt])\n    {\n        tree[rt << 1] = tree[rt << 1 | 1] = tree[rt];\n        tree[rt] = 0;\n    }\n    if (L <= mid)\n        update(rt << 1, l, mid);\n    if (R > mid)\n        update(rt << 1 | 1, mid + 1, r);\n}\n\nint query(int rt, int l, int r)\n{\n    if (l == L && r == L)\n        return tree[rt];\n    if (tree[rt])\n    {\n        tree[rt << 1] = tree[rt << 1 | 1] = tree[rt];\n        tree[rt] = 0;\n    }\n    if (L <= mid)\n        return query(rt << 1, l, mid);\n    else\n        return query(rt << 1 | 1, mid + 1, r);\n}\n\nint main()\n{\n    read(n), read(Max), read(x), read(y);\n    for (int i = 1; i <= n; ++i)\n    {\n        b[N + 1].id = b[N + 2].id = i;\n        read(a[i].h), read(a[i].ll), read(a[i].rr);\n        b[++N].pos = a[i].ll, b[++N].pos = a[i].rr;\n    }\n    a[0].h = 0;\n    std::sort(b + 1, b + N + 1);\n    for (int i = 1; i <= N; ++i)\n        a[b[i].id].r = i;\n    for (int i = N; i; --i)\n        a[b[i].id].l = i;\n    std::sort(a + 1, a + n + 1);\n    for (int i = 1; i <= n; ++i)\n    {\n        dp[i][0] = dp[i][1] = INF;\n        L = a[i].l, a[i].lx = query(1, 1, N), L = a[i].r, a[i].rx = query(1, 1, N);\n        if (a[i].h - a[a[i].lx].h > Max)\n            a[i].lx = -1;\n        if (a[i].h - a[a[i].rx].h > Max)\n            a[i].rx = -1;\n        L = a[i].l, R = a[i].r, val = i;\n        update(1, 1, N);\n    }\n    if (a[n].lx != -1)\n        dp[n][0] = x - a[n].ll + y - a[n].h;\n    if (a[n].rx != -1)\n        dp[n][1] = a[n].rr - x + y - a[n].h;\n    for (int u = n, v; u; --u)\n    {\n        if (a[u].lx != -1)\n        {\n            if (a[u].lx)\n            {\n                v = a[u].lx;\n                dp[v][0] = std::min(dp[v][0], dp[u][0] + a[u].h - a[v].h + a[u].ll - a[v].ll);\n                dp[v][1] = std::min(dp[v][1], dp[u][0] + a[u].h - a[v].h + a[v].rr - a[u].ll);\n            }\n            else\n                ans = std::min(ans, dp[u][0] + a[u].h);\n        }\n        if (a[u].rx != -1)\n        {\n            if (a[u].rx)\n            {\n                v = a[u].rx;\n                dp[v][0] = std::min(dp[v][0], dp[u][1] + a[u].h - a[v].h + a[u].rr - a[v].ll);\n                dp[v][1] = std::min(dp[v][1], dp[u][1] + a[u].h - a[v].h + a[v].rr - a[u].rr);\n            }\n            else\n                ans = std::min(ans, dp[u][1] + a[u].h);\n        }\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1539651390,
        "uid": 32380,
        "name": "\u6563\u534e\u793c\u5f25",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1442 \u3010\u94c1\u7403\u843d\u5730\u3011"
    },
    {
        "content": "\u597d\u9898\n\n\u8003\u8651\u663e\u7136\u505a\u6cd5\uff1a\u4ee4 $f_{i,0}$\uff0c$f_{i,1}$ \u5206\u522b\u4e3a\u7403\u4ece\u7b2c $i$ \u4e2a\u677f\u5b50\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u6eda\u843d\u540e**\u6a2a\u5411\u79fb\u52a8**\u7684\u6700\u77ed\u8ddd\u79bb\uff08\u56e0\u4e3a\u4e0b\u843d\u65f6\u95f4\u56fa\u5b9a\u4e3a $y$ \u6240\u4ee5\u53ef\u4ee5\u653e\u5230\u6700\u540e\u8003\u8651\uff09\u3002\u90a3\u4e48\u53ef\u4ee5\u5047\u8bbe\u6389\u843d\u540e\u4f1a\u6389\u5230 $x$ \u677f\u4e0a\uff0c\u5219\u6709\uff1a\n\n$f_{i,0}=\\min(l_i-l_x+f_{x,0},r_x-l_i+f_{x,1})$  \n$f_{i,1}=\\min(r_i-l_x+f_{x,0},r_x-r_i+f_{x,1})$\n\n\u5982\u679c\u6309 $y$ \u5750\u6807\u5347\u5e8f\u6392\u5e8f\uff0c\u53ef\u4ee5\u4fdd\u8bc1 $x$ \u5728 $i$ \u524d\u88ab\u5904\u7406\uff0c\u4f46\u662f\u5904\u7406 $2n$ \u4e2a\u70b9\u4e0b\u843d\u540e\u7684\u677f\u5b50\u9700\u8981 $O(n^2)$ \u7684\u65f6\u95f4\uff0c\u5bf9\u4e8e $n \\leqslant 10^5$ \u7684\u6570\u636e\u8303\u56f4\u662f\u4e0d\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\n\n\u7531\u4e8e\u6309 $y$ \u6392\u5e8f\u540e\u672c\u8d28\u662f\u6c42\u67d0\u4e2a $x$ \u4e0b\u65b9\u6700\u9ad8\u7684\u677f\u5b50\uff0c\u53ef\u4ee5\u8054\u60f3\u5230\u67d3\u8272\u95ee\u9898\u6c42\u7684\u662f\u67d0\u4e2a\u70b9\u6700\u540e\u4e00\u4e2a\u67d3\u4e0a\u7684\u989c\u8272\u3002\u5373\u5229\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3\u3002\u7531\u4e8e\u6570\u636e\u8303\u56f4\u4e3a $l_i,r_i \\leqslant 10^9$ \u6545\u9700\u8981\u79bb\u6563\u5316\u3002\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\uff08\uff1f\uff09\uff0c\u4ece\u4e0b\u5f80\u4e0a\u6bcf\u6b21\u5148\u67e5\u8be2\u4e24\u4e2a\u7aef\u70b9\u4e0b\u9762\u7684\u677f\u5b50\u662f\u4ec0\u4e48\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u533a\u95f4\u63d2\u5165\u8fdb\u7ebf\u6bb5\u6811\u91cc\u3002\u6ce8\u610f\uff0c\u867d\u7136\u7403\u7684\u4f53\u79ef\u65e0\u9650\u5c0f\u4f46\u662f\u4ecd\u7136\u53ef\u4ee5\u88ab\u677f\u5b50\u7684\u8fb9\u63a5\u4f4f\uff0c\u6240\u4ee5\u63d2\u5165\u7684\u65f6\u5019\u8981\u5305\u62ec\u4e24\u4e2a\u7aef\u70b9\u3002\n\n\u7403\u6240\u843d\u5230\u7684\u677f\u5b50\u53ef\u4ee5\u5728\u6c42\u5404\u4e2a\u7aef\u70b9\u4e0b\u843d\u65f6 $O(\\log n)$ \u6c42\u4f46\u662f\u90a3\u6837\u4f1a\u589e\u52a0\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u4ee3\u7801\u590d\u6742\u5ea6\uff0c\u65e2\u7136\u53ea\u6c42\u4e00\u6b21\u53ef\u4ee5\u76f4\u63a5\u6700\u540e $O(n)$ \u6c42\u3002\u6ce8\u610f\u7403\u6240\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u677f\u5b50\u4e5f\u53ef\u4ee5\u9009\u62e9\u5f80\u5de6\u6216\u8005\u5f80\u53f3\u6eda\u6240\u4ee5\u4e5f\u8981\u4e24\u4e2a\u53d6 $\\min$\u3002\n\n\u849f\u84bb\u7684\u4ee3\u7801\uff1a\n```c++\n#include <cstdio>\n#include <algorithm>\n#define N 100010\n#define s tree[o]\nstruct seg{int l,r,lazy;}tree[N*8];\nvoid pushdown(int o)\n{\n    if(s.lazy==-1) return;\n    tree[o<<1].lazy=tree[o<<1|1].lazy=s.lazy;\n    s.lazy=-1;\n}\nvoid cover(int l,int r,int c,int o=1)\n{\n    if(s.l==l&&s.r==r) {s.lazy=c; return;}\n    int mid=(s.l+s.r)/2;\n    pushdown(o);\n    if(r<=mid) cover(l,r,c,o<<1);\n    else if(l>mid) cover(l,r,c,o<<1|1);\n    else {cover(l,mid,c,o<<1); cover(mid+1,r,c,o<<1|1);}\n}\nint query(int x,int o=1)\n{\n    if(s.l==x&&s.r==x) return s.lazy;\n    int mid=(s.l+s.r)/2;\n    pushdown(o);\n    return query(x,x<=mid?o<<1:o<<1|1);\n}\nvoid mktree(int l,int r,int o=1)\n{\n    s.l=l;s.r=r;s.lazy=-1;\n    if(l!=r)\n    {\n        int mid=(l+r)/2;\n        mktree(l,mid,o<<1);\n        mktree(mid+1,r,o<<1|1);\n    }\n}\nstruct board{int l,r,h;bool operator<(board b) const{return h<b.h;}}a[N];\nint n,t[N*2],f[N][2],g[N][2];\ninline int min(int x,int y){return x<y?x:y;}\n//\u4ecex\u5904\u843d\u5230z\u677f\u540e\u843d\u5730\u7684\u6700\u5c0f\u65f6\u95f4\ninline int calc(int x,int z)\n    {return min(x-t[a[z].l]+f[z][0],t[a[z].r]-x+f[z][1]);}\nint main()\n{\n    int h;\n    scanf(\"%d%d\",&n,&h);\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    for(int i=0;i<n;i++)\n    {\n        int h,l,r;\n        scanf(\"%d%d%d\",&h,&l,&r);\n        a[i]=board{l,r,h};\n        t[i<<1]=l,t[i<<1|1]=r;\n    }\n    //O(nlogn)\u79bb\u6563\u5316\n    std::sort(t,t+2*n);\n    for(int i=0;i<n;i++)\n    {\n        a[i].l=std::lower_bound(t,t+2*n,a[i].l)-t;\n        a[i].r=std::lower_bound(t,t+2*n,a[i].r)-t;\n    }\n    std::sort(a,a+n);\n    mktree(0,2*n-1);//\u521d\u59cb\u5316\u4e3a-1\n    //O(nlogn)\u9884\u5904\u7406\n    for(int i=0;i<n;i++)\n    {\n        int x=query(a[i].l),mn=a[i].h-h;\n        g[i][0]=a[x].h>=mn?x:-2;\n        x=query(a[i].r);\n        g[i][1]=a[x].h>=mn?x:-2;\n        cover(a[i].l,a[i].r,i);\n    }\n    //O(n) DP\n    for(int i=0;i<n;i++)\n    {\n        f[i][0]=f[i][1]=0x3f3f3f3f;\n        if(g[i][0]!=-2)\n        {\n            //\u4ece\u5de6\u4fa7\u843d\u4e0b\n            int x=g[i][0],y=a[i].l;\n            //\u5730\u9762\n            if(x==-1) f[i][0]=0;\n            else f[i][0]=calc(t[a[i].l],x);\n        }\n        if(g[i][1]!=-2)\n        {\n            //\u4ece\u53f3\u4fa7\n            int x=g[i][1],y=a[i].r;\n            if(x==-1) f[i][1]=0;\n            else f[i][1]=calc(t[a[i].r],x);\n        }\n    }\n    //O(n)\u5bfb\u627e\u7403\u843d\u70b9\n    int z=-1;\n    for(int i=n-1;i>=0;i--)\n        if(a[i].h<=y&&t[a[i].l]<=x&&x<=t[a[i].r]) {z=i;break;}\n    printf(\"%d\",(z!=-1?calc(x,z):0)+y);\n}\n```\n\n[\u63d0\u4ea4\u8bb0\u5f55](https://www.luogu.com.cn/record/72644677)\uff08\u6709\u5c0f\u5e45\u538b\u7f29\uff09",
        "postTime": 1648472394,
        "uid": 298051,
        "name": "xkcdjerry",
        "ccfLevel": 7,
        "title": "P1442 \u9898\u89e3"
    },
    {
        "content": "\u7ebf\u6bb5\u6811+DP\u3002\n\n\u5148\u6309\u677f\u7684\u9ad8\u5ea6\u6392\u5e8f\uff0c\u4e4b\u540e\u901a\u8fc7\u7ebf\u6bb5\u6811\u533a\u95f4Tag\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u677f\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u53ef\u4ee5\u843d\u5230\u54ea\u4e2a\u677f\u4e0a\uff08\u6ce8\u610f\u5982\u679c\u8d85\u8fc7\u6700\u5927\u9650\u5236\u9ad8\u5ea6\u5219\u4e0d\u80fd\u4e0b\u843d\uff09\u3002\n\n\u518d\u4e4b\u540edp\u5c31\u53ef\u4ee5\u4e86\uff0c\u53d6\u5411\u5de6\u8d70\u548c\u5411\u53f3\u8d70\u7684\u6700\u4f18\u503c\uff08\u56e0\u4e3a\u6700\u4f18\u60c5\u51b5\u80af\u5b9a\u4e0d\u4f1a\u5728 \u4e00\u4e2a\u677f\u4e0a\u8d70\u56de\u5934\u8def\uff09.\n\n\ncode:\n\n\n\n\n\n    \n\n    \n\n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n        \n        \n        \n    \n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\n#define maxn 100005\nstruct node{\n    ll l,r,al,ar,h;\n}pl[maxn];\nbool cmp(node x,node y){\n    return(x.h<y.h);    \n}\nll a[maxn<<1],n,m,mx,N;\nll f[maxn][2],p[maxn][2];\nll se[maxn*9],le,ri,v,beg;\ninline ll mabs(ll x){ return(x>0?x:-x); }\ninline void pushdown(ll o){\n    if(se[o]){\n       ll lc=o<<1,rc=(o<<1)|1;\n       se[lc]=se[rc]=se[o];\n       se[o]=0;\n    }\n}\nvoid update(ll o,ll l,ll r){\n    if(l>=le&&r<=ri){\n        se[o]=v;\n        return;\n    }\n    pushdown(o);\n    ll mid=l+r>>1,lc=o<<1,rc=(o<<1)|1;\n    if(le<=mid) update(lc,l,mid);\n    if(ri>mid) update(rc,mid+1,r);\n}\nll query(ll o,ll l,ll r){\n    if(se[o]) return se[o];\n    if(l==r) return 0;\n    ll mid=l+r>>1,lc=o<<1,rc=(o<<1)|1;\n    if(le<=mid) return query(lc,l,mid);\n    else return query(rc,mid+1,r);    \n}\nll dp(ll x,ll pos){\n    if(p[x][pos]) return p[x][pos];\n    ll now=(pos?pl[x].r:pl[x].l);\n    p[x][pos]=(ll)(1<<30);\n    if(!f[x][pos]) p[x][pos]=min(p[x][pos],(ll)0);\n    else if(f[x][pos]>0) p[x][pos]=min(p[x][pos],min(dp(f[x][pos],0)+mabs(now-pl[f[x][pos]].l),dp(f[x][pos],1)+mabs(now-pl[f[x][pos]].r)));\n    return p[x][pos];\n}\nint main(){\n    cin>>n>>mx;\n    n++;\n    scanf(\"%lld%lld\",&pl[n].l,&pl[n].h),pl[n].r=pl[n].l;\n    a[1]=pl[n].l;\n    for(int i=1;i<n;i++){\n        scanf(\"%lld%lld%lld\",&pl[i].h,&pl[i].l,&pl[i].r);\n        a[i<<1]=pl[i].l,a[(i<<1)|1]=pl[i].r;\n    }\n    N=(n<<1)-1;\n    sort(a+1,a+N+1);\n    for(int i=1;i<=n;i++) pl[i].al=lower_bound(a+1,a+N+1,pl[i].l)-a,pl[i].ar=lower_bound(a+1,a+N+1,pl[i].r)-a;\n    sort(pl+1,pl+n+1,cmp);\n    pl[0].h=0;\n    for(int i=1;i<=n;i++){\n        le=pl[i].al;\n        f[i][0]=query(1,1,N);\n        if(pl[i].h-pl[f[i][0]].h>mx) f[i][0]=-1;\n        le=pl[i].ar;\n        f[i][1]=query(1,1,N);\n        if(pl[i].h-pl[f[i][1]].h>mx) f[i][1]=-1;\n        if(pl[i].l==pl[i].r) beg=i;        \n        ri=le,le=pl[i].al,v=i;\n        update(1,1,N);\n    }\n    printf(\"%lld\\n\",dp(beg,0)+pl[beg].h);\n    return 0;\n}\n\n```",
        "postTime": 1506559925,
        "uid": 31377,
        "name": "\u91d1\u7237\u7237\u54c8\u54c8",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1442 \u3010\u94c1\u7403\u843d\u5730\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](/problem/P1442)\n\n\u7ed9\u51fa\u4e00\u79cd\u7528 STL \u7ef4\u62a4\u7684\u65b9\u6cd5\u3002\n\n#### \u524d\u7f6e\u77e5\u8bc6\uff1a\n\nset\uff0cdp\u3002\n\n#### \u9898\u610f\uff1a\n\n- \u7ed9\u5b9a\u4e8c\u7ef4\u5750\u6807\u7cfb\u4e0a\u7684 $n$ \u6761\u5e73\u884c\u4e8e $x$ \u8f74\u7684\u5f00\u7ebf\u6bb5\uff08\u6a2a\u5750\u6807\u4e3a $(l_i,r_i)$\uff0c\u7eb5\u5750\u6807\u4e3a $h_i$\uff09\u3002\n- \u7ed9\u5b9a\u4e00\u4e2a\u7403\u7684\u5750\u6807\u3002\u82e5\u7403\u4e0d\u5728\u7ebf\u6bb5\u4e0a\uff0c\u6bcf\u79d2\u7eb5\u5750\u6807\u51cf $1$\uff1b\u5426\u5219\uff0c\u53ef\u4ee5\u9009\u62e9\u6a2a\u5750\u6807\u52a0 $1$ \u6216\u51cf $1$\u3002\n- \u8981\u6c42\u7403\u7684\u7eb5\u5750\u6807\u4e0d\u80fd\u8fde\u7eed\u51cf $h$ \u6b21\uff0c\u95ee\u6700\u77ed\u591a\u5c11\u65f6\u95f4\u53ef\u4ee5\u4f7f\u7eb5\u5750\u6807\u4e3a $0$\u3002\u4fdd\u8bc1\u6709\u89e3\u3002\n- $n\\le10^5$\uff0c$h_i$ \u4e92\u4e0d\u76f8\u540c\uff0c$l_i<r_i$\uff0c$\\forall i,j,l_i\\ne r_j$\u3002\n\n#### \u5206\u6790\uff1a\n\n\u4e3a\u65b9\u4fbf\uff0c\u589e\u52a0\u4e00\u6761 $0$ \u53f7\u7ebf\u6bb5\u8868\u793a $x$ \u8f74\u3002\n\n\u9996\u5148\uff0c\u5982\u679c\u7403\u5728\u7ebf\u6bb5\u4e0a\uff0c\u90a3\u4e48\u79bb\u5f00\u7ebf\u6bb5\u524d\uff0c\u7403\u4e00\u5b9a\u4f1a\u4e00\u76f4\u52a0\u6a2a\u5750\u6807\u6216\u4e00\u76f4\u51cf\u6a2a\u5750\u6807\uff0c\u56e0\u4e3a\u56de\u5934\u5c31\u4f1a\u56de\u5230\u4e0a\u4e00\u4e2a\u65f6\u523b\u7684\u72b6\u6001\uff0c\u80af\u5b9a\u4e0d\u4f18\u3002\n\n\u56e0\u6b64\uff0c\u7403\u843d\u5230\u4e00\u4e2a\u7ebf\u6bb5\u4e0a\u540e\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u542f\u53d1\u6211\u4eec\u5c06\u4e24\u79cd\u60c5\u51b5\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u5206\u522b\u8868\u793a\u51fa\u6765\uff0c\u9009\u62e9\u5176\u4e2d\u8f83\u5c0f\u7684\u4e00\u79cd\u3002\n\n\u5177\u4f53\u5730\uff0c\u8bb0 $dp_{i,0/1}$ \u8868\u793a\u4ece $i$ \u53f7\u7ebf\u6bb5\u7684\u5de6 / \u53f3\u7aef\u70b9\u5f00\u59cb\u4e0b\u843d\u5230\u7eb5\u5750\u6807\u4e3a $0$ \u6240\u9700\u7684\u6700\u5c11\u65f6\u95f4\uff0c\u5219\uff0c\u82e5\u7403\u4ece\u6a2a\u5750\u6807\u4e3a $x_0$ \u7684\u4f4d\u7f6e\u843d\u5728 $i$ \u53f7\u7ebf\u6bb5\u4e0a\uff0c\u5219\u4e4b\u540e\u6240\u9700\u7684\u6700\u5c11\u65f6\u95f4\u4e3a\uff1a\n\n$$\n\\min(x_0-l_i+dp_{i,0},\\,r_i-x_0+dp_{i,1})\n$$\n\n\u8003\u8651 $dp$ \u5982\u4f55\u8f6c\u79fb\u3002\u5982\u679c\u6211\u4eec\u5df2\u77e5\u4ece $i$ \u53f7\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u5f00\u59cb\u4e0b\u843d\u4f1a\u843d\u5230 $j$ \u53f7\u7ebf\u6bb5\uff0c\u5219\uff1a\n\n$$\ndp_{i,0}=\\begin{cases}\nh_i&j=0\\\\\nh_i-h_j+\\min(l_i-l_j+dp_{j,0},\\,r_{j}-l_i+dp_{j,1})&j\\ne0\n\\end{cases}\n$$\n\n\u4ece $i$ \u53f7\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\u5f00\u59cb\u4e0b\u843d\u540c\u7406\u3002\n\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u6c42\u4ece\u4e00\u6761\u7ebf\u6bb5\u7684\u5de6\u3001\u53f3\u7aef\u70b9\u4e0b\u843d\u4f1a\u843d\u5230\u54ea\u6761\u7ebf\u6bb5\u3002\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u6309\u7167 $h_i$ \u4ece\u5c0f\u5230\u5927\u8003\u8651\uff0c\u5e76\u7ef4\u62a4\u4ece\u5f53\u524d $h_i$ \u4e0a\u6bcf\u4e2a\u6a2a\u5750\u6807\u4e0b\u843d\u4f1a\u843d\u5230\u54ea\u6761\u7ebf\u6bb5\uff0c\u6bcf\u6b21\u4fee\u6539\u76f8\u5f53\u4e8e\u5c06 $(l_i,r_i)$ \u7684\u7b54\u6848\u6539\u4e3a $i$\u3002\n\n\u53ef\u4ee5\u7528 set \u7ef4\u62a4\u3002\u5177\u4f53\u5730\uff0c\u5728 set \u4e2d\u7ef4\u62a4\u82e5\u5e72\u4e8c\u5143\u7ec4 $(x_i,col_i)$\uff0c\u8868\u793a\u4ece $(x_{i-1},x_i]$ \u8fd9\u6bb5\u533a\u95f4\u4e0b\u843d\u7684\u7403\u6700\u540e\u4f1a\u843d\u5230\u7b2c $col_i$ \u53f7\u7ebf\u6bb5\u3002\n\n\u521d\u59cb\u65f6 set \u4e2d\u53ea\u6709\u4e24\u4e2a\u5143\u7d20 $(-\\infty,0)$\uff0c$(\\infty,0)$\u3002\u6bcf\u6b21\u4fee\u6539\u9700\u8981\u533a\u95f4\u8986\u76d6\uff0c\u5373\uff0c\u5c06\u6ee1\u8db3 $x_j\\in(l_i,r_i)$ \u7684\u5143\u7d20\u5220\u5149\uff0c\u518d\u52a0\u5165\u5143\u7d20 $(r_i,i)$\uff0c$(l_i,c)$\uff0c\u5176\u4e2d $c$ \u662f\u4e00\u4e2a\u503c\u5f97\u8003\u8651\u7684\u503c\uff1a$l_i$ \u5de6\u4fa7\u9700\u8981\u4fdd\u7559\u5176\u539f\u6709\u7684\u989c\u8272\uff0c\u6545\u5c06\u539f\u5148\u6ee1\u8db3 $x_j\\ge l_i$ \u7684\u7b2c\u4e00\u4e2a\u4e8c\u5143\u7ec4 $(x_j,col_j)$ \u7684 $col_j$ \u4f5c\u4e3a $c$\u3002\u5177\u4f53\u64cd\u4f5c\u89c1\u4ee3\u7801\u3002\n\n\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$\uff0c\u7406\u8bba\u4e0a\u5e38\u6570\u8f83\u5927\u3002\n\n---\n\n\u7531\u4e8e $l,r$ \u7684\u4f18\u79c0\u6027\u8d28\uff0c\u51e0\u4e4e\u4e0d\u600e\u4e48\u9700\u8981\u8003\u8651\u533a\u95f4\u7684\u5f00\u95ed\u95ee\u9898\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int mN=1e5+9, inf=0x3f3f3f3f;\nint n, H, x, y;\n\nstruct Line {\n\tint h, l, r;\n} p[mN];\n\nset<pair<int, int> > S;\nint dp[mN][2];\n\ninline void update(int &dp, const int x, const int h, const int j) {\n//\u8f6c\u79fb\n\tif(h-p[j].h>H) return;\n\tif(j) {\n\t\tdp=h-p[j].h+min(x-p[j].l+::dp[j][0], p[j].r-x+::dp[j][1]);\n\t} else {\n\t\tdp=h;\n\t}\n}\n\nint main() {\n\tmemset(dp, 0x3f, sizeof dp);\n\n\tscanf(\"%d%d%d%d\", &n, &H, &x, &y);\n\tfor(int i=1; i<=n; ++i) {\n\t\tscanf(\"%d%d%d\", &p[i].h, &p[i].l, &p[i].r);\n\t}\n\tsort(p+1, p+n+1, [](Line x, Line y) {\n\t\treturn x.h<y.h;\n\t});\n\n\tS.insert({inf, 0});\n\tS.insert({-inf, 0});\t//\u5176\u5b9e\u8fd9\u4e2a\u5143\u7d20\u53ef\u4ee5\u4e0d\u52a0\n\tfor(int i=1; i<=n; ++i) {\n\t\tconst int l=p[i].l, r=p[i].r, h=p[i].h;\n\t\tif(h>y) break;\n\t\tauto itl=S.lower_bound({l, 0}), itr=S.lower_bound({r, 0});\n\t\t/*assert(itl!=S.end()), assert(itr!=S.end());*/\n\t\tupdate(dp[i][0], l, h, itl->second);\n\t\tupdate(dp[i][1], r, h, itr->second);\n\n\t\tconst int c=itl->second;\n\t\twhile(itl->first<=r) {\t//\u5220\u5149 l r \u4e4b\u95f4\u7684\u5143\u7d20\n\t\t\titl=S.erase(itl);\n\t\t\t/*assert(itl!=S.end());*/\n\t\t}\n\t\tS.insert({l, c}), S.insert({r, i});\n\t}\n\tint ans=114514;\n\tupdate(ans, x, y, S.lower_bound({x, 0})->second);\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```\n\n\u5b9e\u5728\u770b\u4e0d\u61c2\u53ef\u4ee5\u5c1d\u8bd5\u5728\u6bcf\u6b21\u5faa\u73af\u540e\u8f93\u51fa `S` \u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002 ",
        "postTime": 1666873515,
        "uid": 364963,
        "name": "\u963f\u4e11",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1442 \u94c1\u7403\u843d\u5730"
    },
    {
        "content": "\u8003\u8651\u5efa\u56fe\u3002\n\n\u5c0f\u7403\u7f16\u53f7\u4e3a $0$\uff0c\u4ece\u4e0b\u5f80\u4e0a\u6570\u7b2c $i$ \u4e2a\u5e73\u53f0\u7684\u5de6\u7aef\u70b9\u7684\u7f16\u53f7\u4e3a $2i-1$\uff0c\u53f3\u7aef\u70b9\u7684\u7f16\u53f7\u4e3a $2i$\uff0c\u5730\u9762\u7f16\u53f7\u4e3a $2n+1$\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5e73\u53f0\uff0c\u5206\u522b\u5224\u65ad\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u5206\u522b\u843d\u5728\u54ea\u4e00\u4e2a\u5e73\u53f0\uff08\u6216\u5730\u9762\uff09\u4e0a\uff0c\u5982\u679c\u53ef\u4ee5\u4e0b\u843d\uff08\u5373\u4e0d\u4f1a\u6454\u788e\uff09\u5219\u5206\u522b\u4ece\u8be5\u7aef\u70b9\u5411\u76ee\u6807\u5e73\u53f0\uff08\u5982\u679c\u662f\u5e73\u53f0\uff09\u7684\u5de6\u53f3\u7aef\u70b9\u8fde\u8fb9\uff08\u6709\u5411\u8fb9\uff09\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u5224\u65ad\u6bcf\u4e00\u4e2a\u5e73\u53f0\u7684\u5de6\u53f3\u7aef\u70b9\u5206\u522b\u843d\u5728\u54ea\u4e00\u4e2a\u5e73\u53f0\uff08\u6216\u5730\u9762\uff09\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u6240\u6709\u5de6\u53f3\u7aef\u70b9\u7684\u5750\u6807\u79bb\u6563\u5316\uff0c\u518d\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u88ab\u79bb\u6563\u5316\u7684\u5750\u6807\u6240\u5206\u5272\u6210\u7684\u7ebf\u6bb5\uff08\u800c\u975e\u70b9\uff09\u5904\u7684\u201c\u6700\u9ad8\u6d77\u62d4\u201d\uff08\u5373\u5f53\u524d\u5305\u542b\u8be5\u7ebf\u6bb5\u4e14\u9ad8\u5ea6\u6700\u5927\u7684\u5e73\u53f0\u7684\u7f16\u53f7\uff09\uff0c\u8ba1\u7b97\u5b8c\u540e\u5728\u5c06\u8be5\u5e73\u53f0\u52a0\u8fdb\u53bb\u3002\n\n\u6700\u540e\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff1a\u7531\u4e8e\u6240\u6709\u5de6\u53f3\u7aef\u70b9\u5171\u6709 $2n$ \u4e2a\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u5927\u5c0f\u5e94\u4e3a $4n$\u3002\n\n\u5177\u4f53\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define _ 100010\nusing namespace std;\nint n, d, x, y;\nvector<pair<int,int> > G[_+_];\nint dis[_+_];\n\nvoid add(int u, int v, int w) {\n\tG[u].push_back(make_pair(v, w));\n}\n\nstruct node {\n\tint h;\n\tint l;\n\tint r;\n\tint ll;\n\tint rr;\n}arr[_];\n\nint lrs[_+_];\n\nbool cmp(node a, node b) {\n\treturn a.h < b.h;\n}\n\nstruct SEG_TREE {\n\tint siz;\n\tstruct SEG_TREE_NODE {\n\t\tint l;\n\t\tint r;\n\t\tint ls;\n\t\tint rs;\n\t\tint mmax;\n\t\tint tag;\n\t}st[_+_+_+_];\n\tint create_ST (int l, int r) {\n\t\tint ret = ++siz;\n\t\tst[ret].l = l;\n\t\tst[ret].r = r;\n\t\tst[ret].mmax = st[ret].tag = 0;\n\t\tif (l == r) {\n\t\t\tst[ret].ls = st[ret].rs = -1;\n\t\t} else {\n\t\t\tint mid = (l + r) >> 1;\n\t\t\tst[ret].ls = create_ST(l , mid);\n\t\t\tst[ret].rs = create_ST(mid+1,r);\n\t\t}\n\t\treturn ret;\n\t}\n\tvoid cover(int p, int l, int r, int k) {\n\t\tif (st[p].l == l && st[p].r == r) {\n\t\t\tst[p].tag = max(st[p].tag, k);\n\t\t\tst[p].mmax = max(st[p].mmax, k);\n\t\t} else {\n\t\t\tint mid = (st[p].l + st[p].r) >> 1;\n\t\t\tif (r <= mid) cover(st[p].ls, l, r, k);\n\t\t\telse if (l > mid) cover(st[p].rs, l, r, k);\n\t\t\telse cover(st[p].ls, l, mid, k), cover(st[p].rs, mid+1, r, k);\n\t\t}\n\t}\n\tint calc(int p, int l, int r) {\n\t\tif (st[p].l == l && st[p].r == r) {\n\t\t\treturn st[p].mmax;\n\t\t} else {\n\t\t\tint mid = (st[p].l + st[p].r) >> 1;\n\t\t\tst[st[p].ls].tag = max(st[st[p].ls].tag, st[p].tag);\n\t\t\tst[st[p].rs].tag = max(st[st[p].rs].tag, st[p].tag);\n\t\t\tst[st[p].ls].mmax = max(st[st[p].ls].mmax, st[p].tag);\n\t\t\tst[st[p].rs].mmax = max(st[st[p].rs].mmax, st[p].tag);\n\t\t\tst[p].tag = 0;\n\t\t\tif (r <= mid) return calc(st[p].ls, l, r);\n\t\t\telse if (l > mid) return calc(st[p].rs, l, r);\n\t\t\telse return max(calc(st[p].ls, l, mid), calc(st[p].rs, mid+1, r));\n\t\t}\n\t}\n}ST;\n\nint main() {\n\tcin >> n >> d >> x >> y;\n\tfor (int i = 1; i <= n; i++) {\n\t\tcin >> arr[i].h >> arr[i].l >> arr[i].r;\n\t\tlrs[i*2-1] = arr[i].l;\n\t\tlrs[i*2] = arr[i].r;\n\t}\n\tsort(arr+1, arr+n+1, cmp);\n\tsort(lrs+1, lrs+n+n+1);\n\tint s = unique(lrs+1, lrs+n+n+1)-lrs-1;\n\tST.create_ST(0, s+1);\n\tfor (int i = 1; i <= n; i++) {\n\t\tarr[i].ll = upper_bound(lrs+1, lrs+n+n+1, arr[i].l) - lrs - 1;\n\t\tarr[i].rr = upper_bound(lrs+1, lrs+n+n+1, arr[i].r) - lrs - 1;\n\t\tint L = ST.calc(1, arr[i].ll-1, arr[i].ll-1);\n\t\tint R = ST.calc(1, arr[i].rr, arr[i].rr);\n\t\tif (arr[i].h - arr[L].h <= d) {\n\t\t\tif (L) {\n\t\t\t\tadd(i*2-1, L*2-1, arr[i].h - arr[L].h + arr[i].l - arr[L].l);\n\t\t\t\tadd(i*2-1, L*2  , arr[i].h - arr[L].h + arr[L].r - arr[i].l);\n\t\t\t} else {\n\t\t\t\tadd(i*2-1, n*2+1, arr[i].h);\n\t\t\t\tadd(i*2  , n*2+1, arr[i].h);\n\t\t\t}\n\t\t}\n\t\tif (arr[i].h - arr[R].h <= d) {\n\t\t\tif (R) {\n\t\t\t\tadd(i*2, R*2-1, arr[i].h - arr[R].h + arr[i].r - arr[R].l);\n\t\t\t\tadd(i*2, R*2  , arr[i].h - arr[R].h + arr[R].r - arr[i].r);\n\t\t\t} else {\n\t\t\t\tadd(i*2-1, n*2+1, arr[i].h);\n\t\t\t\tadd(i*2  , n*2+1, arr[i].h);\n\t\t\t}\n\t\t}\n\t\tST.cover(1, arr[i].ll, arr[i].rr-1, i);\n\t}\n\tint X = lower_bound(lrs+1, lrs+n+n+1, x) - lrs - 1;\n\tint T = ST.calc(1, X, X);\n\tadd(0, T*2-1, y - arr[T].h + x - arr[T].l);\n\tadd(0, T*2  , y - arr[T].h + arr[T].r - x);\n\tmemset(dis, 0x3F, sizeof(dis));\n\tpriority_queue<pair<int,int> > Q;\n\tQ.push(make_pair(0, 0));\n\twhile (!Q.empty()) {\n\t\tint u = Q.top().second;\n\t\tint d = -Q.top().first;\n\t\tQ.pop();\n\t\tif (d >= dis[u]) continue;\n\t\tdis[u] = d;\n\t\tif (u == n*2+1) {\n\t\t\tcout << d << endl;\n\t\t\treturn 0;\n\t\t}\n\t\tfor (int i = 0; i < G[u].size(); i++) {\n\t\t\tint v = G[u][i].first;\n\t\t\tint w = G[u][i].second;\n\t\t\tQ.push(make_pair(-(d+w), v));\n\t\t}\n\t}\n}\n```",
        "postTime": 1624458057,
        "uid": 153422,
        "name": "0x3F",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1442\u3010\u94c1\u7403\u843d\u5730\u3011"
    },
    {
        "content": "\u256e(\u256f_\u2570)\u256d\u4e00\u9053\u7801\u529b\u9898\u3002\u5bf9\u4e8e\u6211\u8fd9\u79cd\u849f\u84bb\u8d85\u7ea7\u4e0d\u53cb\u597d\n\n\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u4f5c\u9884\u5904\u7406\uff0c\u4ece\u4e0b\u5f80\u4e0a\u626b\u63cf\u7ebf\uff0c\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u7ebf\u6bb5\u5728\u5de6\u8fb9\u8df3\u548c\u5728\u53f3\u8fb9\u8df3\u80fd\u8df3\u5230\u54ea\u4e00\u6761\u7ebf\u6bb5\u3002\n\n\u63a5\u7740\u6211\u4eec\u53ef\u4ee5\u6253\u4e2adp\uff0c$dp[i][0/1]$\u8868\u793a\u8d77\u70b9\u5230\u8fbe\u7b2ci\u4e2a\u7ebf\u6bb5\u5de6\u8fb9/\u53f3\u8fb9\u8981\u591a\u5c11\u65f6\u95f4\uff0c\u5730\u9762\u7279\u5224\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\u5148\u524d\u75af\u72c2WA\uff0c\u540e\u6765\u81ea\u5df1\u548cstd\u62cd\u51fa\u4e00\u4e2a\u6570\u636e\uff0c\u624d\u53d1\u73b0\u81ea\u5df1\u7684flag\u6807\u8bb0\u5728pushdown\u7684\u65f6\u5019\u6ca1\u6709\u4e0b\u653e\uff08\u771f\u7684\u8822\uff09\uff0c\u6240\u4ee5\u8fd9\u7ec4\u6570\u636e\u5c31\u653e\u8fd9\u4e86\u3002\n\n\u4e00\u4e2a\u62cd\u51fa\u6765\u7684\u6570\u636e\uff1a\n\n5 3\n\n11 11\n\n1 3 33\n\n2 4 55\n\n4 3 44\n\n7 7 11\n\n9 11 16\n\n\u8f93\u51fa19\n\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define fo(i, a, b) for (Re int i = (a); i <= (b); ++i)\n#define fd(i, a, b) for (Re int i = (a); i >= (b); --i)\n#define edge(i, u) for (Re int i = head[u], v = e[i].v; i; i = e[i].nxt, v = e[i].v)\n#define N 200005\n#define Re register\n#define pb push_back\n#define F first\n#define S second\n#define ll long long\n#define inf 1000000007\n#define mp std::make_pair\n#define lowbit(x) (x & -x)\n#define ls (k << 1)\n#define rs (k << 1 | 1)\n#define mod 1000000007\nint n, T, X, Y, a[N], tot, cnt, ans, x, y, w, i, pos, now, dp[N][2], L, R, m, X0, Y0;\nstruct line{\n    int x1, x2, y, l, r;\n    friend bool operator < (line qwq, line qaq)\n    {\n        return qaq.y < qwq.y;\n    }\n}p[N];\nstruct tree{\n    int v;\n    bool flag;\n}t[N << 2];\ninline void pushdown (int k)\n{\n    if (t[k].flag)\n    {\n        t[k].flag = 0;\n        t[ls].v = t[rs].v = t[k].v;\n        t[rs].flag = t[ls].flag = 1;\n    }\n}\ninline void add (int k, int l, int r)\n{\n    if (L <= l && R >= r)\n    {\n        t[k].v = i;\n        t[k].flag = 1;\n        return;\n    }\n    pushdown(k);\n    int mid = l + r >> 1;\n    if (L <= mid) add(ls, l, mid);\n    if (mid < R) add(rs, mid + 1, r);\n}\ninline int query (int k, int l, int r)\n{\n    if (t[k].flag && l <= now && now <= r || l == r && l == now)\n    {\n        return t[k].v;\n    }\n    pushdown(k);\n    int mid = l + r >> 1;\n    if (now <= mid) return query(ls, l, mid);\n    if (mid < now) return query(rs, mid + 1, r);\n}\ninline int abs (int x) {return x < 0 ? -x : x;}\ninline int dis (int x1, int y1, int x2, int y2) {return abs(x1 - x2) + abs(y1 - y2);}\nint main ()\n{\n    scanf(\"%d %d\", &n, &m);\n    scanf(\"%d %d\", &X0, &Y0);\n    fo (i, 1, n)\n    {\n        scanf(\"%d %d %d\", &p[i].y, &p[i].x1, &p[i].x2);\n        a[i] = p[i].x1;\n        a[i + n] = p[i].x2;\n    }\n    std::sort(a + 1, a + n + n + 1);\n    cnt = std::unique(a + 1, a + n + n + 1) - a - 1;\n    std::sort(p + 1, p + n + 1);//y\u503c\u4ece\u9ad8\u5230\u4f4e\n    fo (i, 1, n)\n        if (p[i].y <= Y0 && p[i].x1 <= X0 && p[i].x2 >= X0)\n        {\n            pos = i;\n            break;\n        }\n    int j;\n    i = 0;\n    L = 1; R = cnt;\n    add(1, 1, cnt);\n    for (i = n; i; --i)\n    {\n        now = std::lower_bound(a + 1, a + cnt + 1, p[i].x1) - a;\n        j = query(1, 1, cnt);\n        if (p[i].y - p[j].y <= m) p[i].l = j; else p[i].l = -1;\n        now = std::lower_bound(a + 1, a + cnt + 1, p[i].x2) - a;\n        j = query(1, 1, cnt);\n        if (p[i].y - p[j].y <= m) p[i].r = j; else p[i].r = -1;\n        L = std::lower_bound(a + 1, a + cnt + 1, p[i].x1) - a;\n        R = std::lower_bound(a + 1, a + cnt + 1, p[i].x2) - a;\n        add(1, 1, cnt);\n    }\n    memset(dp, 0x3f, sizeof dp);\n//    fo (i, 1, n)\n//        printf(\"i = %d l = %d r = %d\\n\", i, p[i].l, p[i].r);\n    dp[pos][0] = dis(X0, Y0, p[pos].x1, p[pos].y);\n    dp[pos][1] = dis(X0, Y0, p[pos].x2, p[pos].y);\n    fo (i, 1, n)\n    {\n        int nxt = p[i].l;\n        if (nxt != -1)\n        {\n            if (!nxt)\n                dp[0][0] = std::min(dp[0][0], dp[i][0] + p[i].y);\n            else\n            {\n                dp[nxt][0] = std::min(dp[nxt][0], dp[i][0] + dis(p[i].x1, p[i].y, p[nxt].x1, p[nxt].y));\n                dp[nxt][1] = std::min(dp[nxt][1], dp[i][0] + dis(p[i].x1, p[i].y, p[nxt].x2, p[nxt].y));\n            }\n        }\n        nxt = p[i].r;\n        if (nxt != -1)\n        {\n            if (!nxt)\n                dp[0][0] = std::min(dp[0][0], dp[i][1] + p[i].y);\n            else\n            {\n                dp[nxt][0] = std::min(dp[nxt][0], dp[i][1] + dis(p[i].x2, p[i].y, p[nxt].x1, p[nxt].y));\n                dp[nxt][1] = std::min(dp[nxt][1], dp[i][1] + dis(p[i].x2, p[i].y, p[nxt].x2, p[nxt].y));\n            }\n        }\n    }\n    printf(\"%d\\n\", dp[0][0]);\n    return 0;\n}\n```",
        "postTime": 1541072645,
        "uid": 13137,
        "name": "HomuraCat",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1442 \u3010\u94c1\u7403\u843d\u5730\u3011"
    }
]