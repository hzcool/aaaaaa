[
    {
        "content": "\u8fd9\u662f\u6bd4\u8d5b\u9898\uff0c\u9644\u4e0a[\u94fe\u63a5](https://www.luogu.org/contestnew/show/9354)\uff0c\u91cc\u9762\u6709\u5b98\u65b9\u9898\u89e3\u3002  \n\n------------\n\nCDQ\u5957CDQ\u88f8\u9898...  \n\u4e0d\u4f1aCDQ\u5206\u6cbb\u7684\u8bf7\u53bb\u964c\u4e0a\u82b1\u5f00\u3002\n\n\u7136\u540e\u5173\u4e8eCDQ\u5957CDQ\uff0c\u6211\u89c9\u5f97[stdcall\u7684\u535a\u5ba2](https://www.cnblogs.com/mlystdcall/p/6232324.html)\u5199\u7684\u4e0d\u9519\u3002\n\n\u5927\u6982\u5c31\u662f\uff0c\u5728\u7b2c\u4e00\u5c42CDQ\u5206\u6cbb\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u5de6\u8fb9\u548c\u53f3\u8fb9\u8fdb\u884c\u6807\u8bb0\uff0c\u7136\u540e\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u6309\u7167\u7b2c\u4e8c\u7ef4\u6392\u5e8f\u540e\u8fdb\u5165\u7b2c\u4e8c\u5c42CDQ\u5206\u6cbb\u3002  \n\u5728\u7b2c\u4e8c\u5c42\u91cc\u9762\u4e5f\u5bf9\u5de6\u53f3\u8fdb\u884c\u6807\u8bb0\uff0c\u7136\u540e\u6309\u7167\u7b2c\u4e09\u7ef4\u6392\u5e8f\uff0c\u6811\u72b6\u6570\u7ec4\u66f4\u65b0DP\u503c\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u8981\u8bf4\u4e00\u4e2aCDQ\u5206\u6cbb\u521a\u5b66\u65f6\u6781\u6613\u5199\u9519\u7684\u70b9\uff1a**\u6392\u5e8f\u4e00\u5b9a\u8981\u5f7b\u5e95\uff01**  \n\u6309\u7167\u7b2c\u4e8c\u7ef4\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u5982\u679c\u4e8c\uff0c\u4e09\uff0c\u56db\u7ef4\u90fd\u76f8\u540c\uff0c\u90a3\u4e48\u8981\u6309\u7167\u7b2c\u4e00\u7ef4\u6392\u5e8f\u3002\u540c\u7406\uff0c\u6309\u7167\u7b2c\u4e09\u7ef4\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u5982\u679c\u4e09\uff0c\u56db\u7ef4\u90fd\u76f8\u540c\uff0c\u5c31\u8981\u518d\u6309\u7167\u4e00\uff0c\u4e8c\u7ef4\u6765\u6392\u5e8f\u3002  \n\u4e0d\u8fd9\u6837\u505a\u5c31\u4f1a\u4ee5\u5947\u602a\u7684\u59ff\u52bf\u6302\u6389...  \n\u6bd4\u5982\u6211\u6709\u4e24\u4e2a\u56db\u5143\u7ec4\uff1a  \n```text\n2 2 2 3\n1 2 2 3\n```\n\u663e\u7136\u7b2c\u4e8c\u4e2a\u662f\u53ef\u4ee5\u66f4\u65b0\u7b2c\u4e00\u4e2a\u7684\uff0c\u4f46\u662f\u5982\u679c\u4f60\u5728\u6309\u7167\u7b2c\u4e09\u7ef4\u6392\u5e8f\u7684\u65f6\u5019\u4e0d\u5c0f\u5fc3\u628a\u7b2c\u4e8c\u4e2a\u653e\u5728\u540e\u9762(c++ sort\u662f\u4e0d\u7a33\u5b9a\u7684)\uff0c\u5c31\u51c9\u4e86\u3002\n\n\u7136\u540e\u8981\u8bb0\u5f97\u968f\u65f6\u53d6\u6a21\uff0c\u5c31\u6ca1\u5565\u95ee\u9898\u4e86\u3002\n\nCDQ\u5206\u6cbb\u5d4c\u5957\u5176\u5b9e\u53ef\u4ee5\u53ea\u7528\u4e00\u4e2a\u51fd\u6570\u5b8c\u6210\uff0c\u53c2\u8003\u6807\u7a0b\u7684\u5b9e\u73b0\u3002\n\n~~\u4e3a\u4ec0\u4e48\u6211\u5199\u7684\u6bd4\u6807\u7a0b\u61622\u500d\u554a......~~  \n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\ntypedef long long LL;\nconst int N = 80010;\nconst LL MO = 998244353;\n\nstruct Node {\n    int a, b, c, d, id;\n    bool A, B; \u3000\n    LL val, cnt, f;\n    inline bool operator <(const Node &w) const {\n        if(a != w.a) {\n            return a < w.a;\n        }\n        if(b != w.b) {\n            return b < w.b;\n        }\n        if(c != w.c) {\n            return c < w.c;\n        }\n        return d < w.d;\u3000\n    }\n    inline bool operator ==(const Node &w) const {\n        return a == w.a && b == w.b && c == w.c && d == w.d;\n    }\n}node[N], t1[N], t2[N];\n\nint n, X[N];\n\u3000\nnamespace ta {\n    LL cnt[N], f[N];\n    inline void add(int x, LL v, LL sum) {\n        for(; x <= n; x += x & (-x)) {\n            if(v > f[x]) {\n                f[x] = v;\n                cnt[x] = sum;\n            }\n            else if(v == f[x]) {\n                cnt[x] += sum;\n                cnt[x] %= MO;\n            }\n        }\n        return;\n    }\u3000\n    inline void ask(int x, LL &ff, LL &sum, LL val) {\n        for(; x > 0; x -= x & (-x)) {\n            if(f[x] + val > ff) {\n                ff = f[x] + val;\n                sum = cnt[x];\n            }\n            else if(f[x] + val == ff) {\n                sum += cnt[x];\n                sum %= MO;\n            }\n        }\n        return;\n    }\n    inline void del(int x) {\u3000\n        for(; x <= n; x += x & (-x)) {\n            cnt[x] = f[x] = 0;\n        }\n        return;\n    }\n}\n\ninline bool cmp_c(const Node &x, const Node &y) {\n    if(x.c != y.c) {\n        return x.c < y.c;\n    }\n    if(x.d != y.d) {\u3000\n        return x.d < y.d;\n    }\n    if(x.a != y.a) {\n        return x.a < y.a;\n    }\n    return x.b < y.b;\n}\n\ninline bool cmp_b(const Node &x, const Node &y) {\n    if(x.b != y.b) {\n        return x.b < y.b;\n    }\n    if(x.c != y.c) {\n        return x.c < y.c;\n    }\u3000\n    if(x.d != y.d) {\n        return x.d < y.d;\n    }\n    return x.a < y.a;\n}\n\nvoid CDQ_2(int l, int r) {\n    if(l == r) {\n        return;\n    }\n    int mid = (l + r) >> 1;\n    CDQ_2(l, mid);\n\n    for(int i = l; i <= r; i++) {\n        t1[i].B = (i > mid);\n        t2[i] = t1[i];\n        t2[i].id = i;\n    }\u3000\n    std::sort(t2 + l, t2 + r + 1, cmp_c);\n\n    for(int i = l; i <= r; i++) {\n        if(t2[i].A && t2[i].B) {\n            ta::ask(t2[i].d, t2[i].f, t2[i].cnt, t2[i].val);\n            t1[t2[i].id].f = t2[i].f;\n            t1[t2[i].id].cnt = t2[i].cnt;\n        }\n        if(!t2[i].A && !t2[i].B) {\n            ta::add(t2[i].d, t2[i].f, t2[i].cnt);\n        }\n    }\u3000\n\n    for(int i = l; i <= mid; i++) {\n        if(!t1[i].A) {\n            ta::del(t1[i].d);\n        }\n    }\n    CDQ_2(mid + 1, r);\n    return;\n}\n\nvoid CDQ_1(int l, int r) {\n    if(l == r) {\n        return;\n    }\n\u3000\n    int mid = (l + r) >> 1;\n    CDQ_1(l, mid);\n\n    for(int i = l; i <= r; i++) {\n        node[i].A = (i > mid);\n        t1[i] = node[i];\n        t1[i].id = i;\n    }\n    std::sort(t1 + l, t1 + r + 1, cmp_b);\n    CDQ_2(l, r);\n    for(int i = l; i <= r; i++) {\n        node[t1[i].id].f = t1[i].f;\u3000\n        node[t1[i].id].cnt = t1[i].cnt;\n    }\n\n    CDQ_1(mid + 1, r);\n    return;\n}\n\nint main() {\n\n    int m;\n    scanf(\"%d%d\", &n, &m);\n    for(int i = 1; i <= n; i++) {\n        scanf(\"%d%d%d%d%lld\", &node[i].a, &node[i].b, &node[i].c, &node[i].d, &node[i].val);\n    }\n    std::sort(node + 1, node + n + 1);\u3000\n    int temp = 1;\n    for(int i = 2; i <= n; i++) { /// unique\n        if(node[i] == node[temp]) {\n            node[temp].val += node[i].val;\n        }\n        else {\n            node[++temp] = node[i];\n        }\n    }\n    n = temp;\n\n    for(int i = 1; i <= n; i++) {\n        X[i] = node[i].a;\n    }\n    std::sort(X + 1, X + n + 1);\n    temp = std::unique(X + 1, X + n + 1) - X - 1;\n    for(int i = 1; i <= n; i++) {\u3000\n        node[i].a = std::lower_bound(X + 1, X + temp + 1, node[i].a) - X;\n    }\n\n    for(int i = 1; i <= n; i++) {\n        X[i] = node[i].b;\n    }\n    std::sort(X + 1, X + n + 1);\n    temp = std::unique(X + 1, X + n + 1) - X - 1;\n    for(int i = 1; i <= n; i++) {\n        node[i].b = std::lower_bound(X + 1, X + temp + 1, node[i].b) - X;\n    }\n\n    for(int i = 1; i <= n; i++) {\n        X[i] = node[i].c;\n    }\u3000\n    std::sort(X + 1, X + n + 1);\n    temp = std::unique(X + 1, X + n + 1) - X - 1;\n    for(int i = 1; i <= n; i++) {\n        node[i].c = std::lower_bound(X + 1, X + temp + 1, node[i].c) - X;\n    }\n\n    for(int i = 1; i <= n; i++) {\n        X[i] = node[i].d;\n    }\n    std::sort(X + 1, X + n + 1);\n    temp = std::unique(X + 1, X + n + 1) - X - 1;\n    for(int i = 1; i <= n; i++) {\u3000\n        node[i].d = std::lower_bound(X + 1, X + temp + 1, node[i].d) - X;\n    }\n\n    for(int i = 1; i <= n; i++) {\n        node[i].f = node[i].val;\n        node[i].cnt = 1;\n        node[i].id = i;\n    }\n\n    // prework OVER\n\n    CDQ_1(1, n);\u3000\n\n    LL sum = 0, ans = 0;\n    for(int i = 1; i <= n; i++) {\n        if(node[i].f > ans) {\n            ans = node[i].f;\n            sum = node[i].cnt;\n        }\n        else if(node[i].f == ans) {\n            sum += node[i].cnt;\n            sum %= MO;\n        }\n    }\n    \n    printf(\"%lld\\n%lld\\n\", ans, sum);\u3000\n\n    return 0;\n}\n```",
        "postTime": 1542865624,
        "uid": 55600,
        "name": "huyufeifei",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4849 \u3010\u5bfb\u627e\u5b9d\u85cf\u3011"
    },
    {
        "content": "\u9996\u5148\u5bf9\u9898\u76ee\u8fdb\u884c\u4e00\u4e9b\u8f6c\u5316\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u65f6\u8981\u6c42\u51fa\u6700\u5927\u4ef7\u503c\u7684\u56db\u7ef4\u4e0a\u5347\u5e8f\u5217\u3002\n\n\u770b\u5230\u504f\u5e8f\u95ee\u9898\u60f3\u5230 cdq \u5206\u6cbb\u3002\u9996\u5148\u60f3\u5230\u4e09\u7ef4\u504f\u5e8f\u95ee\u9898\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6392\u5e8f\u4f7f\u7b2c\u4e00\u7ef4\u6709\u5e8f\uff0c\u901a\u8fc7\u4e00\u6b21 cdq \u5206\u6cbb\u4f7f\u7b2c\u4e8c\u7ef4\u6709\u5e8f\uff0c\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7b2c\u4e09\u7ef4\u3002\n\n\u73b0\u5728\u591a\u51fa\u4e86\u4e00\u7ef4\uff0c\u53ef\u4ee5\u4f7f\u7528 cdq \u5206\u6cbb\u5d4c\u5957\u6765\u89e3\u51b3\u3002\n\n\u5177\u4f53\u7684\uff0c\u9996\u5148\u5c06\u7b2c\u4e00\u7ef4\u6392\u5e8f\uff0c\u7136\u540e\u4f7f\u7528 cdq \u5206\u6cbb\u7ef4\u62a4\u7b2c\u4e8c\u7ef4\uff0c\u5c06\u4f4d\u7f6e\u5c5e\u4e8e $l\\sim mid$ \u7684\u70b9\u6253\u4e0a\u6807\u8bb0 $0$ \u5e76\u5c06\u4f4d\u7f6e\u5c5e\u4e8e $mid+1\\sim r$ \u7684\u70b9\u6253\u4e0a\u8868\u793a $1$\u3002\n\n\u7136\u540e\u518d\u4f7f\u7528\u4e00\u4e2a cdq \u5206\u6cbb\u7ef4\u62a4\u7b2c $3$ \u7ef4\uff0c\u8fd9\u4e00\u7ef4\u50cf\u4e09\u7ef4\u504f\u5e8f\u7684\u7b2c\u4e8c\u7ef4\u4e00\u6837\u7ef4\u62a4\u5373\u53ef\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u5411\u6811\u72b6\u6570\u7ec4\u63d2\u5165\u6570\u65f6\u9700\u8981\u68c0\u67e5\u8fd9\u4e2a\u6570\u7b2c\u4e8c\u7ef4\u662f\u5426\u5728 $l\\sim mid$\uff0c\u5373\u6807\u8bb0\u662f\u5426\u4e3a $0$\uff0c\u67e5\u8be2\u65f6\u68c0\u67e5\u8fd9\u4e2a\u6570\u7b2c\u4e8c\u7ef4\u662f\u5426\u5728 $mid+1\\sim r$\uff0c\u5373\u8868\u793a\u662f\u5426\u4e3a $1$\uff0c\u6765\u786e\u4fdd\u8f6c\u79fb\u6b63\u786e\u3002\n\n\u7b2c\u56db\u7ef4\u76f4\u63a5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u4e0b\u9762\u56de\u5230\u672c\u9898\uff0c\u672c\u9898\u672c\u8d28\u662f cdq \u5206\u6cbb\u7ef4\u62a4\u52a8\u6001\u89c4\u5212\u3002\u6240\u4ee5\u8fd9\u91cc**\u9700\u8981\u8003\u8651\u8f6c\u79fb\u987a\u5e8f**\u3002\n\n\u666e\u901a\u7684 cdq \u5206\u6cbb\u4e2d\uff0c\u6211\u4eec\u5148\u9012\u5f52\u5de6\u53f3\u4e24\u4e2a\u5b50\u95ee\u9898\u6c42\u89e3\uff0c\u800c\u540e\u518d\u7ef4\u62a4\u8de8\u8fc7\u5de6\u53f3\u7684\u8d21\u732e\u3002\u4f46\u662f\u5728\u52a8\u6001\u89c4\u5212\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u7ef4\u62a4\u5de6\u8fb9\u5bf9\u53f3\u4fa7\u7684\u8d21\u732e\u800c\u76f4\u63a5\u7ef4\u62a4\u53f3\u4fa7\u5185\u90e8\u7684\u8d21\u732e\uff0c\u4f1a\u5bfc\u81f4\u8d21\u732e\u4e0d\u5b8c\u5168\uff0c\u4ece\u800c\u4f7f\u7b54\u6848\u9519\u8bef\u3002\n\n\u6211\u4eec\u5e94\u65f6\u523b**\u4fdd\u8bc1\u5de6\u4fa7\u5df2\u7ecf\u8d21\u732e\u5b8c\u53f3\u4fa7**\u3002\u53ef\u4ee5\u91c7\u7528\u5148\u9012\u5f52\u5de6\u5b50\u6811\uff0c\u7136\u540e\u7ef4\u62a4\u8de8\u8fc7\u5de6\u53f3\u7684\u8d21\u732e\uff0c\u6700\u540e\u9012\u5f52\u53f3\u5b50\u6811\u7684\u987a\u5e8f\u6765\u5b9e\u73b0\u3002\n\n\u672c\u9898\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u65b9\u6848\u6570\uff0c\u53ef\u4ee5\u5728\u6811\u72b6\u6570\u7ec4\u4e2d\u7ef4\u62a4\u5f53\u524d\u6700\u5927\u503c\u4ee5\u53ca\u65b9\u6848\u6811\uff0c\u5e76\u5728\u67e5\u8be2\u65f6\u8d21\u732e\u5373\u53ef\u3002\n\n\u53e6\u5916\u672c\u9898\u503c\u57df\u8f83\u5927\uff0c\u9700\u8981\u5bf9\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7684\u4e00\u7ef4\uff0c\u5373\u7b2c\u56db\u4f4d**\u79bb\u6563\u5316**\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n \\log^2 n)$\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nnamespace IO{\n\ttemplate<typename T>inline bool read(T &x){\n\t\tx=0;\n\t\tchar ch=getchar();\n\t\tbool flag=0,ret=0;\n\t\twhile(ch<'0'||ch>'9') flag=flag||(ch=='-'),ch=getchar();\n\t\twhile(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar(),ret=1;\n\t\tx=flag?-x:x;\n        return ret;\n\t}\n\ttemplate<typename T,typename ...Args>inline bool read(T& a,Args& ...args){\n\t    return read(a)&&read(args...);\n\t}\n\ttemplate<typename T>void prt(T x){\n\t\tif(x>9) prt(x/10);\n\t\tputchar(x%10+'0');\n\t}\n\ttemplate<typename T>inline void put(T x){\n\t\tif(x<0) putchar('-'),x=-x;\n\t\tprt(x);\n\t}\n\ttemplate<typename T>inline void put(char ch,T x){\n\t\tif(x<0) putchar('-'),x=-x;\n\t\tprt(x);\n\t\tputchar(ch);\n\t}\n\ttemplate<typename T,typename ...Args>inline void put(T a,Args ...args){\n\t    put(a);\n\t\tput(args...);\n\t}\n\ttemplate<typename T,typename ...Args>inline void put(const char ch,T a,Args ...args){\n\t    put(ch,a);\n\t\tput(ch,args...);\n\t}\n\tinline void putstr(string s){\n\t\tfor(int i=0,sz=s.length();i<sz;i++) putchar(s[i]);\n\t}\n}\nusing namespace IO;\n#define N 80005\n#define mod 998244353\nint n,m,cnt;\nlong long maxn[N],ans,res;\nint tim[N];\nstruct node{\n\tint a,b,c,d,id,op;\n\tlong long v;\n\tinline bool operator==(const node &y)const{\n\t\treturn a==y.a&&b==y.b&&c==y.c&&d==y.d;\n\t}\n}t[N],w[N];\ninline bool cmp1(const node &x,const node &y){\n\treturn x.a==y.a?(x.b==y.b?(x.c==y.c?x.d<y.d:x.c<y.c):x.b<y.b):x.a<y.a;\n}//\u6392\u5e8f\u5fc5\u987b\u5b8c\u5168\ninline bool cmp2(const node &x,const node &y){\n\treturn x.b==y.b?(x.a==y.a?(x.c==y.c?x.d<y.d:x.c<y.c):x.a<y.a):x.b<y.b;\n}//\u6392\u5e8f\u5fc5\u987b\u5b8c\u5168\ninline bool cmp3(const node &x,const node &y){\n\treturn x.c==y.c?(x.a==y.a?(x.b==y.b?x.d<y.d:x.b<y.b):x.a<y.a):x.c<y.c;\n}//\u6392\u5e8f\u5fc5\u987b\u5b8c\u5168\ninline int add(int x,int y){//\u9700\u8981\u53d6\u6a21\n\treturn x+y>=mod?x+y-mod:x+y;\n}\nnamespace BIT{\n\t#define lowbit(x) (x&-x)\n\tlong long c[N];//\u540c\u65f6\u7ef4\u62a4\u6700\u5927\u503c\u548c\u8fbe\u5230\u6700\u5927\u503c\u7684\u65b9\u6848\n\tint num[N];\n\tinline void update(int x,long long v,int t){\n\t\tfor(;x<=m;x+=lowbit(x)){\n\t\t\tif(v>c[x]) c[x]=v,num[x]=t;\n\t\t\telse if(c[x]==v) num[x]=add(num[x],t);\n\t\t}\n\t}\n\tinline void query(int x,long long &Max,int &s,long long val){\n\t\tfor(;x;x^=lowbit(x)){\n\t\t\tif(val+c[x]>Max) Max=val+c[x],s=num[x];\n\t\t\telse if(val+c[x]==Max) s=add(s,num[x]);\n\t\t}\n\t}\n\tinline void erase(int x){\n\t\tfor(;x<=n;x+=lowbit(x)) num[x]=c[x]=0;\n\t}\n\t#undef lowbit\n}\nusing BIT::update;\nusing BIT::query;\nusing BIT::erase;\nvoid mergesort(int l,int r){//\u7ef4\u62a4\u7b2c\u4e09\u7ef4\u7684cdq\u5206\u6cbb\n\tif(l==r) return;\n\tint mid=l+r>>1;\n\tmergesort(l,mid);//\u6309\u7167\u6b63\u786e\u7684\u987a\u5e8f\n\tsort(w+l,w+mid+1,cmp3),sort(w+mid+1,w+r+1,cmp3);//\u7531\u4e8e\u4e0a\u9762\u987a\u5e8f\u7684\u539f\u56e0\uff0c\u53f3\u4fa7\u4e0d\u4e00\u5b9a\u6709\u5e8f\uff0c\u6240\u4ee5\u4e0d\u80fd\u4f7f\u7528\u5f52\u5e76\n\tint i=l,j=mid+1,k=l;\n\twhile(i<=mid&&j<=r)//\u5de6\u53f3\u8d21\u732e\n\t\tif(w[i].c<=w[j].c){\n\t\t\tif(!w[i].op) update(w[i].d,maxn[w[i].id],tim[w[i].id]);\n\t\t\ti++;\n\t\t}else{\n\t\t\tif(w[j].op) query(w[j].d,maxn[w[j].id],tim[w[j].id],w[j].v);\n\t\t\tj++;\n\t\t}\n\twhile(i<=mid){\n\t\tif(!w[i].op) update(w[i].d,maxn[w[i].id],tim[w[i].id]);\n\t\ti++;\n\t}\n\twhile(j<=r){\n\t\tif(w[j].op) query(w[j].d,maxn[w[j].id],tim[w[j].id],w[j].v);\n\t\tj++;\n\t}\n\tfor(i=l;i<=mid;i++) erase(w[i].d);\n\tsort(w+l,w+r+1,cmp2);\n\tmergesort(mid+1,r);//\u6700\u540e\u5904\u7406\u53f3\u4fa7\n}\ninline void merge_sort(int l,int r){\n\tif(l==r) return;\n\tint mid=l+r>>1;\n\tmerge_sort(l,mid);\n\tfor(int i=l;i<=r;i++) w[i]=t[i],w[i].op=(i>mid);//\u5bf9\u7b2c\u4e8c\u7ef4\u6253\u6807\u8bb0\u3002\u4e3a\u9632\u6b62\u6392\u5e8f\u9020\u6210\u987a\u5e8f\u5f71\u54cd\uff0c\u4f7f\u7528w\u6570\u7ec4\u8fdb\u5165\u4e0b\u4e00\u7ef4\n\tsort(w+l,w+r+1,cmp2);\n\tmergesort(l,r);\n\tmerge_sort(mid+1,r);\t//\u9012\u5f52\u53f3\u4fa7\n}\nint p[N];\nint main(){\n\tread(n,m),m=1;\n\tfor(int i=1;i<=n;i++) read(t[i].a),read(t[i].b),read(t[i].c),read(t[i].d),read(t[i].v),p[i]=t[i].d;\n\tsort(p+1,p+n+1);\n\tcnt=unique(p+1,p+n+1)-p-1;\n\tfor(int i=1;i<=n;i++) t[i].d=lower_bound(p+1,p+cnt+1,t[i].d)-p;//\u79bb\u6563\u5316\n\tfor(int i=2;i<=n;i++)//\u53bb\u91cd\n\t\tif(t[i]==t[m]) t[m].v+=t[i].v;\n\t\telse t[++m]=t[i];\n\tswap(n,m);\n\tsort(t+1,t+n+1,cmp1);\n\tfor(int i=1;i<=n;i++) maxn[i]=t[i].v,tim[i]=1,t[i].id=i;\n\tmerge_sort(1,n);\n\tfor(int i=1;i<=n;i++) \n\t\tif(maxn[i]>ans) ans=maxn[i],res=tim[i];\n\t\telse if(maxn[i]==ans) res=add(res,tim[i]);//\u7edf\u8ba1\u7b54\u6848\n\tput('\\n',ans,res);\n\treturn 0;\n}\n\n```",
        "postTime": 1642564996,
        "uid": 172370,
        "name": "fzj2007",
        "ccfLevel": 0,
        "title": "P4849 \u5bfb\u627e\u5b9d\u85cf"
    },
    {
        "content": "\u6628\u5929\u6211\u8fd8\u5728\u505a\u4e09\u7ef4\u504f\u5e8f\u2026\u2026\n\n```cpp\n\u4e09\u7ef4\u504f\u5e8f\u9898\u89e3\u533a:\n\n\u5176\u5b9ecdq\u5206\u6cbb\u53ef\u4ee5\u4e00\u76f4\u5d4c\u5957\u4e0b\u53bb\uff0c\u4e0d\u4e00\u5b9a\u9700\u8981\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u3002\n\n\u8fd8\u6709\u5927\u5bb6\u5199cdq\u7684\u65f6\u5019\uff0c\u8981\u5199\u5f52\u5e76\u6392\u5e8f\uff0c\u5e76\u5148\u5206\u6cbb\u5de6\u53f3\uff0c\u518d\u4e2d\u95f4\u3002\n\u5047\u5982\u9898\u76ee\u4e0d\u5141\u8bb8\uff08\u6bd4\u5982\u4f18\u5316\u4e00\u4e9bdp\u4e4b\u7c7b\u7684\uff0c\u5f3a\u5236\u5de6\u4e2d\u53f3\u7684\uff09\uff0c\n\u53ef\u4ee5\u9884\u5904\u7406\u6bcf\u5c42\u5f52\u5e76\u7684\u7ed3\u679c\uff0c\u6765\u4fdd\u8bc1\u590d\u6742\u5ea6\u5c11\u4e00\u4e2alog\u3002\n\n                                         \u2014\u2014Shadows\u5de8\u4f6c\n```\n\n\u6211\u5c31\u819c\u62dcdalao\u4ee3\u7801\u7136\u540e\u5b66\u4e60\u4e86CDQ\u5206\u6cbb(~~\u540c\u5b66\u4eec\u597d\u50cf\u521d\u4e00\u5c31\u4f1a\u4e86~~)\u3002\n\nP.S:\u5982\u679c\u9605\u8bfb\u7684dalao\u4e0d\u4e86\u89e3CDQ\u5d4c\u5957\u7684\u8bdd,\u5efa\u8bae\u98df\u7528Shadows\u7684\u9898\u89e3\u6765\u5165\u95e8\u3002\n\n\u7136\u540e\u6211\u770b\u5230\u4e86\u8fd9\u9053\u9898,\u770b\u4e00\u773c\u4f53\u9762:`WC?\u8fd9\u4e0d\u5c31\u662f\u4e2a\u88f8\u76844\u7ef4\u504f\u5e8f\u4e48?`\n\n\u7801\u7801\u7801\u5b8c\u4e86\u4e4b\u540eWA\u4e86\u4e00\u665a\u4e0a,\u624d\u53d1\u73b0\u4e8b\u60c5\u6ca1\u6709\u90a3\u4e48\u7b80\u5355\u2026\u2026\n\n\u8fd9\u9053\u9898\u5c31\u662fShadows\u53e3\u4e2d\u7684`cdq\u4f18\u5316dp`\u7684\u9898\u76ee,\u5f3a\u5236\u5de6\u4e2d\u53f3\u8f6c\u79fb\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u9884\u5904\u7406\u6392\u5e8f\u7ed3\u679c,\u4e0d\u7136\u76f4\u63a5sort\u590d\u6742\u5ea6\u8981\u591a\u4e00\u4e2alog\u3002\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\u5982\u679c\u6700\u540e\u4e00\u4f4d\u91c7\u7528\u6811\u72b6\u6570\u7ec4\u7684\u8bdd,\u524d\u4e24\u7ef4\u76f4\u63a5sort\u4e0d\u4f1a\u589e\u52a0\u590d\u6742\u5ea6,\u6240\u4ee5\u5199\u8d77\u6765\u5341\u5206\u65b9\u4fbf,\u7f3a\u70b9\u5c31\u662f\u8981\u79bb\u6563\u5316\u3002\n\n\u8981\u628a\u540c\u4e00\u4e2a\u4f4d\u7f6e\u7684\u5b9d\u7269\u4ef7\u503c\u76f8\u52a0,\u89c6\u4f5c\u4e00\u4e2a,\u53ef\u4ee5\u51cf\u5c11\u5f88\u591a\u7ec6\u8282\u3002\n\n\u800c\u4e14\u9ad8\u7ef4cdq\u8981\u6ce8\u610f:\u6211\u4eec\u53ef\u4ee5\u89c6\u4f5c\u5728\u6bcf\u4e00\u7ef4\u91cc\u9762\u63d2\u5165\u4e86\u4e00\u4e2a\u677f\u5b50,\u53ea\u6709\u90fd\u5728\u4e09\u4e2a\u677f\u5b50\u5de6\u4fa7\u7684\u4e1c\u897f,\u80fd\u5411\u90fd\u5728\u4e09\u4e2a\u677f\u5b50\u53f3\u4fa7\u7684\u4e1c\u897f\u8d21\u732e(\u53d6\u4ea4\u96c6,\u8fd9\u91cc\u91c7\u7528\u4e86\u4f4d\u8fd0\u7b97\u4f18\u5316)\n\n\u4e0d\u8fc7\u76f4\u63a5\u4fdd\u5b58\u7ed3\u679c\u7a7a\u95f4\u590d\u6742\u5ea6$O(nlogn)$\u56e0\u4e3a\u5de8\u5927\u81f315\u7684\u5e38\u6570MLE\u4e86,\u53ea\u597d\u4fdd\u5b58\u6307\u9488,\u4ee3\u4ef7\u5c31\u662f\u4ee3\u7801\u57fa\u672c\u4e0d\u80fd\u770b\u4e86\u3002\n\nCDQ\u7a7a\u95f4\u5c45\u7136\u6bd4\u6811\u72b6\u6570\u7ec4\u9ad8?\u5495\u5495\u5495\u2026\u2026\n\n\u8dd1\u7684\u6bd4\u51fa\u9898\u4eba\u7a0d\u5fae\u5feb\u4e86\u4e00\u70b9,\u8fd9\u4e00\u5927\u5806\u6570\u7ec4copy\u5e94\u8be5\u8fd8\u6709\u4f18\u5316\u7684\u7a7a\u95f4\u5427\u3002\n\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<map>\n#define mod 998244353\n#define MaxN 80500\nusing namespace std;\ninline int read()\n{\n  register int X=0;\n  register char ch=0;\n  while(ch<48||ch>57)ch=getchar();\n  while(ch>=48&&ch<=57)X=X*10+(ch^48),ch=getchar();\n  return X;\n}\nint n,k;\nstruct Data\n{\n  int a,b,c,d,fl;\n  long long x,*v,*sum;\n  bool operator < (const Data B) const\n  {return a<B.a||(a==B.a&&b<B.b)||(a==B.a&&b==B.b&&c<B.c)\n          ||(a==B.a&&b==B.b&&c==B.c&&d<B.d);}\n  bool operator == (const Data B) const\n  {return a==B.a&&b==B.b&&c==B.c&&d==B.d;}\n}a1[MaxN],*s1[18][MaxN],\n a2[MaxN],*s2[18][MaxN],\n a3[MaxN],*s3[18][MaxN],\n a4[MaxN],sav[MaxN];\nint sf1[18][MaxN],sf2[18][MaxN],sf3[18][MaxN];\nint tn;\nlong long v[MaxN],sum[MaxN];\nvoid sort3(int l,int r,int lev)\n{\n  if (l==r)return ;\n  int mid=(l+r)>>1;\n  int pl=l,pr=mid+1;\n  sort3(l,mid,lev+1);\n  sort3(mid+1,r,lev+1);\n  for (int i=l;i<=r;i++)\n    if (pl<=mid&&(pr>r||a3[pl].d<=a3[pr].d))\n      {a4[i]=a3[pl++];a4[i].fl&=6;}\n    else {a4[i]=a3[pr++];a4[i].fl|=1;}\n  for (int i=l;i<=r;i++){\n    a3[i]=a4[i];\n    s3[lev][i]=sav+(a3[i].v-v);\n    sf3[lev][i]=a3[i].fl;\n  }\n}\nvoid cdq3(int l,int r,int lev)\n{\n  if (l==r)return ;\n  int mid=(l+r)>>1;\n  cdq3(l,mid,lev+1);\n  long long maxx=0,sum=0;\n  for (int i=l;i<=r;i++){\n    a4[i]=*s3[lev][i];\n    a4[i].fl=sf3[lev][i];\n  }\n  for (int i=l;i<=r;i++){\n    if (a4[i].fl==0){\n      if (maxx<*a4[i].v+a4[i].x){\n        maxx=*a4[i].v+a4[i].x;\n        sum=*a4[i].sum;\n      }else if (maxx==*a4[i].v+a4[i].x)\n        sum=(sum+*a4[i].sum)%mod;\n    }if (a4[i].fl==7){\n      if (maxx>*a4[i].v){\n        *a4[i].v=maxx;\n        *a4[i].sum=sum;\n      }else if (maxx==*a4[i].v)\n        *a4[i].sum=(*a4[i].sum+sum)%mod;\n    }\n  }cdq3(mid+1,r,lev+1);\n}\nvoid sort2(int l,int r,int lev)\n{\n  if (l==r)return ;\n  int mid=(l+r)>>1;\n  int pl=l,pr=mid+1;\n  sort2(l,mid,lev+1);\n  sort2(mid+1,r,lev+1);\n  for (int i=l;i<=r;i++)\n    if (pl<=mid&&(pr>r||a2[pl].c<=a2[pr].c))\n      {a3[i]=a2[pl++];a3[i].fl&=5;}\n    else {a3[i]=a2[pr++];a3[i].fl|=2;}\n  for (int i=l;i<=r;i++){\n    a2[i]=a3[i];\n    s2[lev][i]=sav+(a2[i].v-v);\n    sf2[lev][i]=a2[i].fl;\n  }\n}\nvoid cdq2(int l,int r,int lev)\n{\n  if (l==r)return ;\n  int mid=(l+r)>>1;\n  cdq2(l,mid,lev+1);\n  for (int i=l;i<=r;i++){\n    a3[i]=*s2[lev][i];\n    a3[i].fl=sf2[lev][i];\n  }\n  sort3(l,r,lev);\n  cdq3(l,r,lev);\n  cdq2(mid+1,r,lev+1);\n}\nvoid sort1(int l,int r,int lev)\n{\n  if (l==r)return ;\n  int mid=(l+r)>>1;\n  int pl=l,pr=mid+1;\n  sort1(l,mid,lev+1);\n  sort1(mid+1,r,lev+1);\n  for (int i=l;i<=r;i++)\n    if (pl<=mid&&(pr>r||a1[pl].b<=a1[pr].b))\n      {a2[i]=a1[pl++];a2[i].fl&=3;}\n    else {a2[i]=a1[pr++];a2[i].fl|=4;}\n  for (int i=l;i<=r;i++){\n    a1[i]=a2[i];\n    s1[lev][i]=sav+(a1[i].v-v);\n    sf1[lev][i]=a1[i].fl;\n  }\n}\nvoid cdq1(int l,int r,int lev)\n{\n  if (l==r)return ;\n  int mid=(l+r)>>1;\n  cdq1(l,mid,lev+1);\n  for (int i=l;i<=r;i++){\n    a2[i]=*s1[lev][i];\n    a2[i].fl=sf1[lev][i];\n  }\n  sort2(l,r,lev);\n  cdq2(l,r,lev);\n  cdq1(mid+1,r,lev+1);\n}\nint main()\n{\n  n=read();k=read();\n  for (int i=1;i<=n;i++){\n    a1[i].a=read();a1[i].b=read();\n    a1[i].c=read();a1[i].d=read();\n    a1[i].x=read();\n  }a1[tn=n+1]=(Data){k+1,k+1,k+1,k+1};\n  sort(a1+1,a1+tn+1);\n  tn=1;\n  for (int i=2,pos=1;i<=n+1;i++)\n    if (a1[i]==a1[pos])\n      a1[pos].x+=a1[i].x;\n    else a1[pos=++tn]=a1[i];\n  for (int i=1;i<=tn;i++){\n    a1[i].sum=sum+i;\n    *a1[i].sum=1;\n    a1[i].v=v+i;\n    sav[i]=a1[i];\n  }\n  sort1(1,tn,0);\n  cdq1(1,tn,0);\n  printf(\"%lld\\n%lld\",*a1[tn].v+a1[tn].x,*a1[tn].sum);\n  return 0;\n}\n```",
        "postTime": 1561090990,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4849 \u3010\u5bfb\u627e\u5b9d\u85cf\u3011"
    },
    {
        "content": "### \u9898\u610f\n\u7ed9\u51fa $n$ \u4e2a\u56db\u7ef4\u7a7a\u95f4\u4e0a\u7684\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6709\u70b9\u6743\uff0c\u6c42\u6700\u5927\u6743\u4e0d\u964d\u5b50\u70b9\u5217\u7684\u6743\u503c\u548c\u65b9\u6848\u6570\u3002  \n$n \\le 80000$\n### \u9898\u89e3\n\u53ef\u4ee5\u770b\u51fa\u8fd9\u662f\u4e2a\u88f8\u7684\u56db\u7ef4\u504f\u5e8f\u4f18\u5316 dp\uff0c\u6309\u7167\u5957\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 cdq \u5957 cdq \u89e3\u51b3\u3002  \n\u4f46\u662f\u6211\u662f\u4e2a\u83dc\u9e21\uff0c\u8fde\u666e\u901acdq\u90fd\u5199\u4e0d\u6e05\u695a\uff0c\u5957\u5728\u4e00\u8d77\u5c31\u66f4\u4e0d\u4f1a\u5199\u4e86\u3002\u800c\u4e14\uff0c\u8fd9\u6837\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log^3n)$ \uff0c\u5e38\u6570\u8fd8\u5f88\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u60f3\u66f4\u66b4\u529b\u7684\u505a\u6cd5\u3002\n\n\u8003\u8651\u5728 $k$ \u7ef4\u7a7a\u95f4\u4e0a\u5efa\u7acb k-d tree\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u63d2\u5165\u8282\u70b9\u590d\u6742\u5ea6\u4e3a $O(\\log n)$\uff0c$k$ \u7ef4\u8d85\u7acb\u65b9\u4f53\u67e5\u8be2\u590d\u6742\u5ea6\u4e3a $O(n^{\\frac{k-1}{k}})$\u3002  \n\u4f46\u662f\uff0c\u5982\u679c\u76f4\u63a5\u5efa\u7acb $4$ \u7ef4 k-d tree\uff0c\u7b97\u4e0a\u5e38\u6570\uff0c\u590d\u6742\u5ea6\u4e5f\u6ca1\u6709\u6bd4\u66b4\u529b\u4f18\u79c0\u5230\u54ea\u91cc\u53bb\u3002\u6211\u4eec\u8003\u8651\u5148\u5bf9\u6240\u6709\u70b9\u6309\u7b2c\u4e00\u7ef4\u6392\u5e8f\uff0c\u5229\u7528\u540e $3$ \u7ef4\u5efa\u7acb $3$ \u7ef4 k-d tree\uff0c\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u628a\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u4e86 $O(n^{\\frac{2}{3}})$\u3002  \n\u8003\u8651\u63d2\u5165\u65f6\u4ee5\u7c7b\u4f3c\u66ff\u7f6a\u7f8a\u6811\u7684\u65b9\u6cd5\uff0c\u5bf9\u4e0d\u5e73\u8861\u8282\u70b9\u62cd\u6241\u91cd\u6784\uff0c\u6211\u4eec\u5c31\u80fd\u7ef4\u6301\u6811\u5f62\u6001\u7684\u57fa\u672c\u5e73\u8861\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e86\u603b\u590d\u6742\u5ea6\u4e3a $O(n^{\\frac{5}{3}})$\u3002\n\n\u8fd9\u79cd\u65b9\u6cd5\u7684\u5b9e\u9645\u8fd0\u884c\u901f\u5ea6\u76f8\u5f53\u5feb\uff0c\u76ee\u524d\u6392\u5728\u6240\u6709\u63d0\u4ea4\u7684\u7b2c $2$ \u540d\u3002\n### \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define reg register\ntypedef long long ll;\nusing namespace std;\nconst int mod=998244353;\nconst int MN=80005;\nconst double alpha=.75;\nstruct point{int x[3],cnt;ll f;}b[MN];\nint sgn,n,root;\ninline bool operator<(point a,point b){return a.x[sgn]<b.x[sgn];}\nstruct data{\n\tint mx[3],mn[3],ls,rs,siz,cnt;\n\tll val;point p;\n}tr[MN];\nint tot,dtop,dust[MN];\ninline int newnode(){return dtop?dust[dtop--]:++tot;}\ninline void pushup(int t){\n\treg int l=tr[t].ls,r=tr[t].rs;\n\ttr[t].siz=tr[l].siz+tr[r].siz+1;\n\ttr[t].val=max(tr[t].p.f,max(tr[l].val,tr[r].val));\n\ttr[t].cnt=0;\n\tif(tr[t].val==tr[l].val)tr[t].cnt+=tr[l].cnt;\n\tif(tr[t].val==tr[r].val)tr[t].cnt+=tr[r].cnt;\n\ttr[t].cnt%=mod;\n\tif(tr[t].val==tr[t].p.f)tr[t].cnt+=tr[t].p.cnt;\n\ttr[t].cnt%=mod;\n\tfor(reg int i=0;i<3;i++){\n\t\ttr[t].mx[i]=tr[t].mn[i]=tr[t].p.x[i];\n\t\tif(l){\n\t\t\ttr[t].mx[i]=max(tr[t].mx[i],tr[l].mx[i]);\n\t\t\ttr[t].mn[i]=min(tr[t].mn[i],tr[l].mn[i]);\n\t\t}\n\t\tif(r){\n\t\t\ttr[t].mx[i]=max(tr[t].mx[i],tr[r].mx[i]);\n\t\t\ttr[t].mn[i]=min(tr[t].mn[i],tr[r].mn[i]);\n\t\t}\n\t}\n}\ninline bool check(int t){\n\treturn max(tr[tr[t].ls].siz,tr[tr[t].rs].siz)>tr[t].siz*alpha;\n}\nint Top,N;\nvoid pia(int t){\n\tif(tr[t].ls)pia(tr[t].ls);\n\tb[++N]=tr[t].p;dust[++dtop]=t;\n\tif(tr[t].rs)pia(tr[t].rs);\n}\n#define mid (l+r>>1)\nint rebuild(int l,int r,int f){\n\tif(l>r)return 0;\n\treg int t=newnode();sgn=f;\n\tnth_element(b+l,b+mid,b+r+1);\n\ttr[t].p=b[mid];\n\ttr[t].ls=rebuild(l,mid-1,(f+1)%3);\n\ttr[t].rs=rebuild(mid+1,r,(f+1)%3);\n\tpushup(t);return t;\n}\nvoid insert(int& t,point v,int f){\n\tif(!t){\n\t\tt=newnode();\n\t\tfor(reg int i=0;i<3;i++)\n\t\t\ttr[t].mx[i]=tr[t].mn[i]=v.x[i];\n\t\ttr[t].val=v.f;tr[t].cnt=v.cnt;tr[t].ls=tr[t].rs=0;\n\t\ttr[t].siz=1;tr[t].p=v;return;\n\t}\n\tif(v.x[f]<=tr[t].p.x[f])insert(tr[t].ls,v,(f+1)%3);\n\telse insert(tr[t].rs,v,(f+1)%3);\n\tpushup(t);\n\tif(!check(t)){\n\t\tif(Top){\n\t\t\tN=0;pia(Top);\n\t\t\tif(Top==tr[t].ls)tr[t].ls=rebuild(1,N,(f+1)%3);\n\t\t\telse tr[t].rs=rebuild(1,N,(f+1)%3);\n\t\t\tTop=0;\n\t\t}\n\t}\n\telse Top=t;\n}\nint Res;\nll Ans;\ninline bool hstar(point a,point b){\n\tfor(reg int i=0;i<3;i++)\n\t\tif(a.x[i]<b.x[i])return 0;\n\treturn 1;\n}\nvoid query(int t,point v){\n\tif(!t||Ans>tr[t].val)return;\n\tif(v.x[0]<tr[t].mn[0]||v.x[1]<tr[t].mn[1]||v.x[2]<tr[t].mn[2])return;\n\tif(hstar(v,(point){tr[t].mx[0],tr[t].mx[1],tr[t].mx[2]})){\n\t\tif(Ans<tr[t].val)Ans=tr[t].val,Res=tr[t].cnt;\n\t\telse if(Ans==tr[t].val)Res=(Res+tr[t].cnt)%mod;\n\t\treturn;\n\t}\n\tif(hstar(v,tr[t].p)){\n\t\tif(Ans<tr[t].p.f)Ans=tr[t].p.f,Res=tr[t].p.cnt;\n\t\telse if(Ans==tr[t].p.f)Res=(Res+tr[t].p.cnt)%mod;\n\t}\n\tquery(tr[t].ls,v);\n\tquery(tr[t].rs,v);\n}\nint X[MN][4],Val[MN],id[MN];\nint main(){\n\tscanf(\"%d%*d\",&n);\n\tfor(reg int i=1,pos;i<=n;i++)\n\t\tscanf(\"%d%d%d%d%lld\",&X[i][0],&X[i][1],&X[i][2],&X[i][3],&Val[i]),id[i]=i;\n\tsort(id+1,id+1+n,[](int x,int y){\n\t\tfor(reg int i=0;i<4;i++)\n\t\t\tif(X[x][i]!=X[y][i])return X[x][i]<X[y][i];\n\t\treturn false;\n\t});\n\treg ll ans=0;reg int cans=1;\n\tfor(reg int t=1,i=id[1];t<=n;i=id[++t]){\n\t\treg point p=(point){X[i][1],X[i][2],X[i][3],0,0};\n\t\tAns=0;Res=1;query(root,p);\n\t\tp.f=Ans+Val[i];p.cnt=Res;\n\t\tTop=0;insert(root,p,0);\n\t\tif(Top)N=0,pia(root),root=rebuild(1,N,0);\n\t\tif(ans<p.f)ans=p.f,cans=p.cnt;\n\t\telse if(ans==p.f)cans=(cans+p.cnt)%mod;\n\t}\n\tprintf(\"%lld\\n%d\\n\",ans,cans);\n\treturn 0;\n}\n```",
        "postTime": 1586094373,
        "uid": 17930,
        "name": "Marser",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4849 \u3010\u5bfb\u627e\u5b9d\u85cf\u3011"
    },
    {
        "content": "## Problem\n\n\u56db\u7ef4\u7a7a\u95f4\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u5411\u6b63\u534a\u8f74\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\uff0c\u53ef\u4ee5\u83b7\u5f97\u9014\u7ecf\u7684\u6240\u6709\u70b9\u7684\u8d21\u732e\u3002\u6c42\u4ece $(1,1,1,1)$ \u5230 $(m,m,m,m)$ \u7684\u6240\u6709\u8def\u5f84\u4e2d\u7684\u6700\u5927\u8d21\u732e\uff0c\u5e76\u6c42\u51fa\u65b9\u6848\u6570\u3002\n\n## Solution\n\n\u9996\u5148\u6709\u4e00\u4e2a\u975e\u5e38 naive \u7684 dp \u505a\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u53ef\u4ee5\u8f6c\u79fb\u7684\u70b9\u5bf9\u8fde\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u6700\u540e\u5728 DAG \u4e0a dp\u3002\n\n\u8fd9\u79cd\u505a\u6cd5\u662f $O(n^2)$ \u7684\uff0c\u663e\u7136\u65e0\u6cd5\u901a\u8fc7\u3002\n\n\u8003\u8651\u4f18\u5316\u8fd9\u4e2a dp\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u4e00\u4e2a\u70b9\u5bf9\u53e6\u4e00\u4e2a\u70b9\u53ef\u4ee5\u4ea7\u751f\u8d21\u732e\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e8c\u8005\u6ee1\u8db3\u504f\u5e8f\u5173\u7cfb\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u88f8\u7684\u56db\u7ef4\u504f\u5e8f\uff0c\u7528 CDQ \u4f18\u5316 dp \u5373\u53ef\u3002\n\n~~\u4f17\u6240\u5468\u77e5~~\u9ad8\u7ef4\u504f\u5e8f\u6bcf\u5957\u4e00\u5c42 CDQ \u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a log \u7684\u590d\u6742\u5ea6\u964d\u6389\u4e00\u7ef4\uff0c\u4e8e\u662f\u6211\u4eec\u6709\u4e86\u4e00\u4e2a CDQ \u5957 CDQ \u7684\u505a\u6cd5\uff0c\u590d\u6742\u5ea6 $O(nlog^3n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u9ed8\u8ba4\u5927\u5bb6\u5df2\u7ecf\u4f1a\u4e86 CDQ\u3002\u4e09\u7ef4\u504f\u5e8f\u5927\u5bb6\u90fd\u4f1a\uff0c\u8fd9\u91cc\u8bb2\u4e00\u4e0b\u600e\u6837\u5b9e\u73b0\u56db\u7ef4\u504f\u5e8f\uff08\u8fd9\u4e2a\u505a\u6cd5\u4e5f\u9002\u7528\u4e8e\u66f4\u9ad8\u7ef4\u7684\u504f\u5e8f\uff09\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u5e8f\u5217\uff0c\u7b2c\u4e00\u7ef4\u6709\u5e8f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4 $[l,r]$\uff0c\u8003\u8651\u8ba1\u7b97 $[l,mid]$ \u5bf9 $[mid+1,r]$ \u7684\u8d21\u732e\u3002\n\n\u7531\u4e8e\u7b2c\u4e00\u7ef4\u6709\u5e8f\uff0c$[l,mid]$ \u7b2c\u4e00\u7ef4\u4e00\u5b9a\u5c0f\u4e8e $[mid+1,r]$ \u7b2c\u4e00\u7ef4\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u7ed9\u4e24\u6bb5\u5e8f\u5217\u6253\u4e0a\u6807\u8bb0\uff08\u6211\u628a\u5de6\u534a\u6bb5\u6807\u8bb0\u4e3a 1\uff0c\u53f3\u534a\u6bb5\u6807\u8bb0\u4e3a 0\uff09\uff0c\u5220\u53bb\u8fd9\u4e00\u7ef4\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u666e\u901a\u7684\u4e09\u7ef4\u504f\u5e8f\u4e86\uff0c\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u626b\u63cf\u533a\u95f4\u65f6\u53ea\u6709\u5de6\u6307\u9488\u6307\u5411\u6807\u8bb0\u662f 1 \u7684\u70b9\u65f6\u624d\u52a0\u5165\u6570\u636e\u7ed3\u6784\uff0c\u53f3\u6307\u9488\u6307\u5411\u6807\u8bb0\u662f 0 \u7684\u70b9\u65f6\u624d\u8ba1\u7b97\u8d21\u732e\u3002\n\n\u6570\u636e\u7ed3\u6784\u9700\u8981\u7ef4\u62a4\u6700\u5927\u503c\u548c\u5bf9\u5e94\u7684\u65b9\u6848\u6570\uff0c\u7c7b\u4f3c[[SDOI2011]\u62e6\u622a\u5bfc\u5f39](https://www.luogu.com.cn/problem/P2487)\uff0c\u6700\u540e\u7edf\u8ba1\u6240\u6709\u7b54\u6848\u7b49\u4e8e\u6700\u5927\u503c\u7684\u70b9\u7684\u65b9\u6848\u6570\u53ea\u548c\u5373\u53ef\u3002\n\n\u6ce8\u610f\u4e00\u4e2a\u70b9\u53ef\u80fd\u6709\u591a\u4e2a\u8d21\u732e\uff0c\u8981\u5148\u53bb\u91cd\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst long long mod=998244353;\nlong long n,m,p[80001],cnt,ans[80001],val[80001],sum,tot;\npair<long long,long long> dp[80001];\nstruct element\n{\n    long long x,y,z,w,id,val,cnt;\n    bool tag;\n    bool operator ==(const element &other) const\n    {\n        return x==other.x&&y==other.y&&z==other.z&&w==other.w;\n    }\n}a[80001],b[80001],c[80001];\ninline bool cmp1(element x,element y)\n{\n    return x.x^y.x? x.x<y.x:x.y^y.y? x.y<y.y:x.z^y.z? x.z<y.z:x.w<y.w;\n}\ninline bool cmp2(element x,element y)\n{\n    return x.y^y.y? x.y<y.y:x.z^y.z? x.z<y.z:x.w^y.w? x.w<y.w:x.x<y.x;\n}\ninline bool cmp3(element x,element y)\n{\n    return x.z^y.z? x.z<y.z:x.w^y.w? x.w<y.w:x.x^y.x? x.x<y.x:x.y<y.y;\n}\ninline long long read()\n{\n    long long x=0;\n    char c=getchar();\n    while(c<'0'||c>'9')\n        c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=(x<<1)+(x<<3)+(c^48);\n        c=getchar();\n    }\n    return x;\n}\ninline int lowbit(int x)\n{\n    return x&-x;\n}\ninline void update(int k,long long p,long long v)\n{\n    v%=mod;\n    for(;k<=cnt;k+=lowbit(k))\n    {\n        if(ans[k]==p)\n            val[k]=(val[k]+v)%mod;\n        if(p>ans[k])\n        {\n            ans[k]=p;\n            val[k]=v;\n        }\n    }\n}\ninline pair<long long,long long> query(int k)\n{\n    pair<long long,long long> res=make_pair(0,0);\n    for(;k;k-=lowbit(k))\n    {\n        if(ans[k]==res.first)\n            res.second=(res.second+val[k])%mod;\n        if(ans[k]>res.first)\n        {\n            res.first=ans[k];\n            res.second=val[k];\n        }\n    }\n    return res;\n}\ninline void clear(int k)\n{\n    for(;k<=cnt;k+=lowbit(k))\n        ans[k]=val[k]=0;\n}\nvoid cdq2(int l,int r)\n{\n    if(l==r)\n        return;\n    int mid=(l+r)>>1;\n    cdq2(l,mid);\n    for(register int i=l;i<=r;++i)\n        c[i]=b[i];\n    sort(c+l,c+mid+1,cmp3);\n    sort(c+mid+1,c+r+1,cmp3);\n    int i=l,j=mid+1;\n    while(j<=r)\n    {\n        if(c[j].tag)\n        {\n            ++j;\n            continue;\n        }\n        while(i<=mid&&c[i].z<=c[j].z)\n        {\n            if(c[i].tag)\n                update(c[i].w,dp[c[i].id].first,dp[c[i].id].second);\n            ++i;\n        }\n        pair<long long,long long> tmp=query(c[j].w);\n        tmp.first+=c[j].val;\n        if(tmp.first==dp[c[j].id].first)\n            dp[c[j].id].second=(dp[c[j].id].second+tmp.second)%mod;\n        if(tmp.first>dp[c[j].id].first)\n            dp[c[j].id]=tmp;\n        sum=max(sum,dp[c[j].id].first);\n        ++j;\n    }\n    for(register int t=l;t<i;++t)\n        if(c[t].tag)\n            clear(c[t].w);\n    cdq2(mid+1,r);\n}\nvoid cdq1(int l,int r)\n{\n    if(l==r)\n        return;\n    int mid=(l+r)>>1;\n    cdq1(l,mid);\n    for(register int i=l;i<=r;++i)\n        b[i]=a[i];\n    for(register int i=l;i<=mid;++i)\n        b[i].tag=1;\n    sort(b+l,b+r+1,cmp2);\n    cdq2(l,r);\n    cdq1(mid+1,r);\n}\nint main()\n{\n    n=read(),m=read();\n    for(register int i=1;i<=n;++i)\n    {\n        a[i].x=read(),a[i].y=read(),a[i].z=read(),a[i].w=read(),a[i].val=read();\n        p[i]=a[i].w;\n    }\n    sort(p+1,p+n+1);\n    cnt=unique(p+1,p+n+1)-p-1;\n    for(register int i=1;i<=n;++i)\n        a[i].w=lower_bound(p+1,p+cnt+1,a[i].w)-p;\n    sort(a+1,a+n+1,cmp1);\n    tot=1;\n    for(register int i=2;i<=n;++i)\n        if(a[i]==a[tot])\n            a[tot].val+=a[i].val;\n        else\n            a[++tot]=a[i];\n    n=tot;\n    tot=0;\n    for(register int i=1;i<=n;++i)\n    {\n        a[i].id=i;\n        dp[i].first=a[i].val;\n        dp[i].second=1;\n    }\n    cdq1(1,n);\n    printf(\"%lld\\n\",sum);\n    for(register int i=1;i<=n;++i)\n        if(dp[i].first==sum)\n            tot=(tot+dp[i].second)%mod;\n    printf(\"%lld\\n\",tot);\n    return 0;\n}\n```\n",
        "postTime": 1610030407,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4849 \u3010\u5bfb\u627e\u5b9d\u85cf\u3011"
    },
    {
        "content": "### CDQ \u5206\u6cbb $+$ \u6811\u72b6\u6570\u7ec4\n------------\n\u505a\u5b8c\u8fd9\u9053\u9898\uff0c\u5bf9 CDQ \u5206\u6cbb\u7684\u5370\u8c61\u6ca1\u600e\u4e48\u52a0\u6df1\uff0c\u5bf9\u6811\u72b6\u6570\u7ec4\u7684\u7406\u89e3\u66f4\u6df1\u523b\u4e86\u3002\n\n\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u8ba8\u8bba\u6811\u72b6\u6570\u7ec4\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u5bf9\u6e05\u695a\u6811\u72b6\u6570\u7ec4\u5728\u8fd9\u9053\u9898\u4e2d\u600e\u4e48\u4f7f\u7528\u7684\u8bfb\u8005\u4ef7\u503c\u5e76\u4e0d\u5927\u3002\n\n\u770b\u5230\u9898\u9762\uff0c\u53d1\u73b0\u662f\u56db\u7ef4\u504f\u5e8f\u3002\u5148\u628a\u6240\u6709\u7684\u5b9d\u85cf\u70b9\u4ee5\u7ef4\u5ea6\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u6392\u5e8f\u4ece\u54ea\u4e2a\u7ef4\u5ea6\u5f00\u59cb\u5e76\u4e0d\u91cd\u8981\uff0c\u5176\u76ee\u7684\u662f\u628a\u76f8\u540c\u4f4d\u7f6e\u7684\u5b9d\u85cf\u5408\u5e76\uff0c\u4fdd\u8bc1\u7b54\u6848\u6b63\u786e\u7edf\u8ba1\u3002\u79bb\u6563\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5728\u6700\u540e\u4e00\u5c42\u5206\u6cbb\u65f6\u7528\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\u8fd9\u4e2a\u79bb\u6563\u540e\u7684\u7ef4\u5ea6\u3002\n\n\u63a5\u4e0b\u6765\u4f7f\u7528\u4e24\u5c42 CDQ \u5206\u6cbb\uff0c\u7531\u4e8e\u5148\u524d\u7684\u6392\u5e8f\uff0c\u5df2\u7ecf\u6709\u4e00\u4e2a\u7ef4\u5ea6\u88ab\u65e0\u6548\u5316\u3002\u5728\u7b2c\u4e8c\u5c42\u5206\u6cbb\u4e2d\u52a0\u5165\u6811\u72b6\u6570\u7ec4\u3002\u5bf9\u4e8e\u52a8\u6001\u89c4\u5212\uff0c\u7c7b\u4f3c\u4e8e\u6811\u72b6\u6570\u7ec4\u6c42 LIS\uff0c\u5728\u7b2c\u56db\u7ef4\u67e5\u8be2\u67d0\u4e2a\u4f4d\u7f6e\u4e4b\u524d\u5b58\u5728\u7684\u6700\u5927\u503c\u548c\u76f8\u5e94\u7684\u65b9\u6848\u6570\u91cf\uff0c\u66f4\u65b0\u8fd9\u4e2a\u6570\u7684\u65b9\u6848\u6570\u91cf\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6700\u5927\u503c\u3001\u65b9\u6848\u6570\u91cf\u6302\u8f7d\u5728\u6811\u72b6\u6570\u7ec4\u4e2d\u3002\n\n\u7136\u540e\u5199\u51fa\u8fd9\u6837\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\uff1a[\u8bc4\u6d4b\u8bb0\u5f55](https://www.luogu.com.cn/record/100359307)\n\n```cpp\npair<long long,long long> c[80001];\nvoid add(const Yuan &x){//Yuan\u662f\u8bb0\u5f55\u5b9d\u85cf\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\n\tfor(int i=x.k;i<=cnt;i+=i&-i)//dp\u4e3a\u62b5\u8fbe\u8be5\u70b9\u6700\u5927\u53ef\u4ee5\u83b7\u5f97\u7684\u5b9d\u85cf\u4ef7\u503c\n\t\tif(x.dp<c[i].first) break;\n\t\telse if(x.dp>c[i].first) c[i]=make_pair(x.dp,x.ans);\n\t\telse (c[i].second+=x.ans)%=mod;//ans\u4e3adp\u5bf9\u5e94\u7684\u65b9\u6848\u6570\u91cf\n}\nvoid del(const Yuan &x){\n\tfor(int i=x.k;i<=cnt;i+=i&-i)\n\t\tif(c[i]==emp) break;//emp=make_pair(0ll,0ll)\n\t\telse c[i]=emp;\n}\nvoid update(Yuan &x){\n\tauto ret=emp;\n\tfor(int i=x.k;i;i-=i&-i) ret=max(ret,c[i]);\n\tif(x.w+ret.first>x.dp) x.dp=x.w+ret.first,x.ans=ret.second;\n\telse if(x.w+ret.first==x.dp) (x.ans+=ret.second)%=mod;\n}\n```\n\n\u5927\u81f4\u5206\u6790\u9519\u8bef\u539f\u56e0\uff0c\u5e94\u8be5\u662f ```update``` \u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u8fd9\u91cc\u6d89\u53ca\u6811\u72b6\u6570\u7ec4\u672c\u8eab\u7684\u6027\u8d28\uff0c\u4f7f\u7b14\u8005\u5bf9\u6b64\u9898\u5370\u8c61\u6df1\u523b\u3002\n\n\u6811\u72b6\u6570\u7ec4\u662f\u7ef4\u62a4\u524d\u7f00\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5c06\u6574\u4e2a\u5e8f\u5217\u7684\u524d\u7f00\u4fe1\u606f\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u80fd\u591f\u505a\u5230\u5feb\u901f\u4fee\u6539\u548c\u5feb\u901f\u7edf\u8ba1\u3002\u9898\u4e2d\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u524d\u7f00\u6700\u5c0f\u503c\u548c\u5bf9\u5e94\u7684\u65b9\u6848\u6570\u91cf\uff0c\u4f46\u5728 ```update``` \u8fc7\u7a0b\u4e2d\uff0c**\u53ea\u62ff\u51fa\u4e86\u8be2\u95ee\u533a\u95f4\u67d0\u4e00\u6bb5\u7684\u6700\u503c\u548c\u5176\u76f8\u5e94\u65b9\u6848\u6570\uff0c\u867d\u7136\u53d6\u5f97\u7684\u6700\u503c\u662f\u6b63\u786e\u7684\uff0c\u4f46\u5e76\u6ca1\u6709\u83b7\u5f97\u533a\u95f4\u5185\u90e8\u7684\u6240\u6709\u5408\u6cd5\u65b9\u6848\u6570\u3002**\n\n\u89e3\u51b3\u65b9\u6cd5\uff1a\u5bf9\u6b63\u5728\u7edf\u8ba1\u7684\u533a\u95f4\u6700\u503c\u5206\u7c7b\u8ba8\u8bba\uff0c\u82e5\u5927\u4e8e\u5f53\u524d\u6700\u503c\u5219\u66ff\u6362\u7b54\u6848\uff1b\u82e5\u7b49\u4e8e\u5f53\u524d\u6700\u503c\u5219\u7d2f\u52a0\u5230\u7b54\u6848\u4e2d\u3002\u6216\u8005\u4f7f\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3\uff0c\u5408\u5e76\u533a\u95f4\u65f6\u5224\u65ad\u5de6\u53f3\u533a\u95f4\u6700\u503c\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u76f8\u7b49\u5219\u7d2f\u52a0\u4e8c\u8005\u65b9\u6848\u6570\uff0c\u4e0d\u7b49\u5219\u7ee7\u627f\u8f83\u5927\u503c\u548c\u5176\u65b9\u6848\u6570\u3002\n\n```cpp\nvoid add(const Yuan &x){\n\tfor(int i=x.k;i<=cnt;i+=i&-i)\n\t\tif(x.dp<c[i].first) break;\n\t\telse if(x.dp>c[i].first) c[i]=make_pair(x.dp,x.ans);\n\t\telse (c[i].second+=x.ans)%=mod;\n}\nvoid del(const Yuan &x){\n\tfor(int i=x.k;i<=cnt;i+=i&-i)\n\t\tif(c[i]==emp) break;\n\t\telse c[i]=emp;\n}\nvoid update(Yuan &x){\n\tfor(int i=x.k;i;i-=i&-i) \n\t\tif(c[i].first+x.w>x.dp) x.dp=c[i].first+x.w,x.ans=c[i].second;\n\t\telse if(c[i].first+x.w==x.dp) (x.ans+=c[i].second)%=mod;\n}\n```\n\u4ee5\u4e0a\u7684\u6811\u72b6\u6570\u7ec4\u4ee3\u7801\u642d\u914d\u4e00\u4e2a\u6b63\u786e\u7684 CDQ \u5957 CDQ \u5c31\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u4e86\uff0c[Code](https://www.luogu.com.cn/paste/pf2c840a)\u3002",
        "postTime": 1676870681,
        "uid": 662295,
        "name": "Flanksy",
        "ccfLevel": 0,
        "title": "P4849 \u5bfb\u627e\u5b9d\u85cf"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4849)\n\n---\n# \u9898\u76ee\u5927\u610f\n\u5728\u4e00\u4e2a\u56db\u7ef4\u5750\u6807\u7cfb\u4e2d\uff0c\u7ed9\u5b9a $n$ \u4e2a\u70b9\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u9009\u62e9\u70b9\u7684\u65b9\u6848\uff0c\n\n\u4f7f\u5f97\u8fd9\u4e9b\u70b9\u6392\u5e8f\u540e\u4efb\u610f\u5750\u6807\u5355\u8c03\u4e0d\u964d\uff0c\u5e76\u4e14\u9009\u62e9\u7684\u70b9\u6743\u548c\u6700\u5927\uff0c\u540c\u65f6\u8f93\u51fa\u6700\u5927\u503c\n\n---\n# \u5206\u6790\n\u8bbe $f[i]$ \u8868\u793a\u6700\u540e\u4e00\u4e2a\u70b9\u4e3a$i$\u65f6\u7684\u6700\u5927\u70b9\u6743\u548c\uff0c\n\n\u5219 $f[i]=\\max\\{f[j]\\}+a[i],p[j]\\leq p[i]$\uff0c $p$ \u4e3a\u56db\u7ef4\u5750\u6807\n\n\u8bbe $dp[i]$ \u8868\u793a\u5728\u53d6\u5230\u6700\u5927\u70b9\u6743\u548c\u65f6\u7684\u65b9\u6848\u6570\uff0c\n\n\u5219 $dp[i]=\\begin{cases}\\sum dp[j'],f[j']=\\max\\{f[j]\\}\\\\ 1,otherwise\\end{cases}$\n\n\u8fd9\u662f $O(n^2)$ \u7684\u505a\u6cd5\uff0c\u8003\u8651\u7528KD-Tree\u7ef4\u62a4\u504f\u5e8f\u5173\u7cfb\uff0c\n\n\u9700\u8981\u8bb0\u5f55\u5b50\u6811\u5185\u6700\u5927\u503c\u4ee5\u53ca\u51fa\u73b0\u6b21\u6570\uff0c\u8003\u8651\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\u3002\n\n- \u5efa\u6811\uff1a\u7b2c\u4e00\u7ef4\u53ef\u4ee5\u6392\u5e8f\u540e\u7701\u6389\uff0c\u5176\u5b9e\u5c31\u5269\u4e0b\u4e09\u7ef4\uff0c\u7136\u540e\u91cd\u6784\u8fd9\u91cc\u7528\u66ff\u7f6a\u7f8a\u6811\u7684\u65b9\u6cd5\n- \u526a\u679d1\uff1a\u7ef4\u62a4\u5b50\u6811\u5185\u6bcf\u4e2a\u5750\u6807\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u5982\u679c\u5b50\u6811\u5185\u5b58\u5728\u4e00\u4e2a\u6700\u5c0f\u503c\u5927\u4e8e\u5f53\u524d\u5750\u6807\uff0c\u90a3\u4e48\u65e0\u987b\u904d\u5386\u8be5\u5b50\u6811\n- \u526a\u679d2\uff1a\u5982\u679c\u5f53\u524d\u7b54\u6848\u6bd4\u5b50\u6811\u5185\u7684\u7b54\u6848\u5927\u90a3\u4e48\u8fd9\u68f5\u5b50\u6811\u4e0d\u7528\u904d\u5386\n- \u526a\u679d3\uff1a\u5982\u679c\u5b50\u6811\u5185\u6240\u6709\u6700\u5927\u503c\u90fd\u4e0d\u5c0f\u4e8e\u5f53\u524d\u5750\u6807\uff0c\u90a3\u4e48\u8fd9\u68f5\u5b50\u6811\u7684\u7b54\u6848\u53ef\u4ee5\u76f4\u63a5\u7528\n\n---\n# \u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <algorithm>\n#define rr register\nusing namespace std;\nconst int N=80011; const double alp=0.75;\ntypedef long long lll; lll Ans,ans[N]; int AC,root,n,ran;\ninline signed iut(){\n\trr int ans=0,f=1; rr char c=getchar();\n\twhile (!isdigit(c)) f=(c=='-')?-f:f,c=getchar();\n\twhile (isdigit(c)) ans=(ans<<3)+(ans<<1)+(c^48),c=getchar();\n\treturn ans*f;\n}\nstruct rec{\n\tint X,p[3]; lll w,c;\n\tinline bool operator <(const rec &t)const{\n\t    return p[ran]<t.p[ran];\n\t}\n}a[N];\ninline lll min(lll a,lll b){return a<b?a:b;}\ninline lll max(lll a,lll b){return a>b?a:b;}\ninline signed mo(int x,int y){return (x+y)%998244353;}\nstruct KD_Tree{\n\tint mn[N][3],mx[N][3],son[N][2],siz[N],stac[N],TOP,tot;\n\tlll w[N],wc[N]; rec pt[N],p[N];\n\tinline void pup(int now){//\u4e0a\u4f20pushup\n\t\tfor (rr int i=0;i<3;++i){\n\t\t\tmn[now][i]=mx[now][i]=p[now].p[i];\n\t\t\tif (son[now][0]){\n\t\t\t\tmn[now][i]=min(mn[now][i],mn[son[now][0]][i]);\n\t\t\t\tmx[now][i]=max(mx[now][i],mx[son[now][0]][i]);\n\t\t\t}\n\t\t\tif (son[now][1]){\n\t\t\t\tmn[now][i]=min(mn[now][i],mn[son[now][1]][i]);\n\t\t\t\tmx[now][i]=max(mx[now][i],mx[son[now][1]][i]);\n\t\t\t}\n\t\t}\n\t\tw[now]=max(p[now].w,max(w[son[now][0]],w[son[now][1]])),wc[now]=0;//\u6700\u5927\u503c\u53ea\u6709\u4e09\u79cd\u60c5\u51b5\n\t\tif (w[now]==p[now].w) wc[now]=p[now].c;\n\t\tif (w[now]==w[son[now][0]]) wc[now]+=wc[son[now][0]];\n\t\tif (w[now]==w[son[now][1]]) wc[now]+=wc[son[now][1]];\n\t\tsiz[now]=siz[son[now][0]]+siz[son[now][1]]+1;\n\t}\n\tinline bool balance(int now){return alp*siz[now]>=(max(siz[son[now][0]],siz[son[now][1]]));}//\u66ff\u7f6a\u7f8a\u6811\u5224\u5b9a\u5e73\u8861\n\tinline void recycle(int now){//\u56de\u6536\n\t\tif (son[now][0]) recycle(son[now][0]);\n\t\tstac[++TOP]=now,pt[TOP]=p[now];\n\t\tif (son[now][1]) recycle(son[now][1]);\n\t}\n\tinline signed build(int l,int r,int Ran){//\u5efa\u6811\n\t\tif (l>r) return 0;\n\t\trr int mid=(l+r)>>1,now=stac[mid];\n\t\tran=Ran,nth_element(pt+l,pt+mid,pt+1+r),p[now]=pt[mid];\n\t\tson[now][0]=build(l,mid-1,(Ran+1)%3);\n\t\tson[now][1]=build(mid+1,r,(Ran+1)%3);\n\t\tpup(now);\n\t\treturn now;\n\t}\n\tinline void rebuild(int &now,int Ran){//\u91cd\u6784\n\t\tTOP=0,recycle(now);\n\t\tnow=build(1,TOP,Ran);\n\t}\n\tinline void Insert(int &now,rec W,int Ran){//\u63d2\u5165\n\t\tif (!now) now=++tot,p[now]=W;\n\t\telse{\n\t\t\tif (W.p[Ran]<=p[now].p[Ran]) Insert(son[now][0],W,(Ran+1)%3);\n\t\t\t    else Insert(son[now][1],W,(Ran+1)%3);\n\t\t}\n\t\tpup(now);\n\t\tif (!balance(now)) rebuild(now,Ran);\n\t}\n\tinline bool check0(int j,int i){\n\t\tfor (rr int o=0;o<3;++o)\n\t\t    if (p[j].p[o]>p[i].p[o]) return 0;\n\t\treturn 1;\n\t}\n\tinline bool check1(int j,int i){\n\t\tfor (rr int o=0;o<3;++o)\n\t\t    if (mn[j][o]>p[i].p[o]) return 1;\n\t\treturn 0;\n\t}\n\tinline bool check2(int j,int i){\n\t\tfor (rr int o=0;o<3;++o)\n\t\t    if (mx[j][o]>p[i].p[o]) return 0;\n\t\treturn 1;\n\t}\n\tinline signed query(int now,lll &ans,int x){\n\t\trr int f=0;\n\t\tif (check0(now,x)){\n\t\t\tif (ans<p[now].w) f=p[now].c,ans=p[now].w;\n\t\t\t    else if (ans==p[now].w) f=mo(f,p[now].c);\n\t\t}\n\t    while (son[now][0]){\n\t\t\trr int t=son[now][0];\n\t\t\tif (check1(t,x)||ans>w[t]) break;//\u526a\u679d1\u30012\uff0c\u4e0b\u540c\n\t\t\tif (check2(t,x)){//\u526a\u679d3\n\t\t\t\tif (ans<w[t]) f=wc[t],ans=w[t];\n\t\t\t\t    else if (ans==w[t]) f=mo(f,wc[t]);\n\t\t\t}else{\n\t\t\t\trr lll o=ans,NOW=query(t,ans,x);\n\t\t\t\tif (o<ans) o=ans,f=NOW;\n\t\t\t\t    else if (o==ans) f=mo(f,NOW);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t    while (son[now][1]){\n\t\t\trr int t=son[now][1];\n\t\t\tif (check1(t,x)||ans>w[t]) break;\n\t\t\tif (check2(t,x)){\n\t\t\t\tif (ans<w[t]) f=wc[t],ans=w[t];\n\t\t\t\t    else if (ans==w[t]) f=mo(f,wc[t]);\n\t\t\t}else{\n\t\t\t\trr lll o=ans,NOW=query(t,ans,x);\n\t\t\t\tif (o<ans) o=ans,f=NOW;\n\t\t\t\t    else if (o==ans) f=mo(f,NOW);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\treturn f;\n\t}\n}Tre;\nbool cmp(rec x,rec y){\n\tif (x.X!=y.X) return x.X<y.X;//\u5728KD-Tree\u4e2d\u7701\u7565\u7b2c\u4e00\u7ef4\n\tfor (rr int i=0;i<3;++i)\n\tif (x.p[i]!=y.p[i]) return x.p[i]<y.p[i];\n\treturn 0;\n}\nsigned main(){\n\tn=iut(),iut();\n\tfor (rr int i=1;i<=n;++i) a[i]=(rec){iut(),iut(),iut(),iut(),iut(),0};\n\tsort(a+1,a+1+n,cmp);\n\tfor (rr int i=1;i<=n;++i){\n\t\tTre.p[i]=a[i],a[i].c=Tre.query(root,ans[i],i); \n\t\tif (!a[i].c) a[i].c=1;//\u5982\u679c\u4e4b\u524d\u6ca1\u6709\u7b54\u6848\u90a3\u4e48\u65b9\u6848\u6570\u4e3a1\n\t\ta[i].w+=ans[i],Tre.Insert(root,a[i],0);\n\t}\n\tfor (rr int i=1;i<=n;++i)\n\tif (Ans<a[i].w) Ans=a[i].w,AC=a[i].c;\n\t    else if (Ans==a[i].w) AC=mo(AC,a[i].c);\n\treturn !printf(\"%lld\\n%d\",Ans,AC);\n}\n```",
        "postTime": 1620094410,
        "uid": 37782,
        "name": "lemondinosaur",
        "ccfLevel": 0,
        "title": "KD-Tree\u7ef4\u62a4dp"
    }
]