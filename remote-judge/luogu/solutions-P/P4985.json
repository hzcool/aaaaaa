[
    {
        "content": "~~\u8fd9\u4e2a\u9898\u5176\u5b9e\u662f\u4e2a\u5927\u6a21\u62df\uff08\u9003~~\n\nPs. \u8fd9\u91cc\u7684$n$\u4e3a\u9898\u4e2d\u7684$n$\u52a0\u4e0a\u5f00\u59cb\u5e73\u53f0\u7684\u957f\u5ea6\u518d\u52a02\u3002\n\n~~\u6570\u636e\u6709\u4e24\u4e2a\u662f\u6837\u4f8b\uff0c\u6570\u636e\u592a\u96be\u9020\u4e86\uff0cQWQ~~\n\n~~\u4e3a\u4ec0\u4e48\u90a3\u4e48\u591a\u4eba\u53ea\u8f93\u51fa\u4e86\u6837\u4f8bQAQ~~\n\n## \u7b97\u6cd51\n\n\u6211\u4eec\u76f4\u63a5\u6df1\u641c\u6a21\u62df\uff0c\u9009\u53d6\u524d$k$\u5927\u7684\u52a0\u5230\u7b54\u6848\u5373\u53ef\u3002\n\n- \u590d\u6742\u5ea6\uff1a$O(n!+(n!)log(n!)+k)$\n- \u671f\u671b\u5f97\u5206\uff1a$20$\n\n## \u7b97\u6cd52\n\n\u6211\u4eec$n^3$\u66b4\u529b\u5c06\u53d1\u5c04\u4e0e\u96c6\u4e2d\u7684\u5173\u7cfb\u5efa\u6709\u5411\u56fe\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u73af\u662f\u4e0d\u80fd\u8d70\u591a\u6b21\u7684\uff0c\u6240\u4ee5\u662f\u4e2aDAG\uff08\u6709\u5411\u65e0\u73af\u56fe\uff09\uff0c\u7136\u540e\u5728\u4e0a\u9762\u641c\u4e00\u904d\uff0c\u53d6\u524d$k$\u5927\u7684\u52a0\u5165\u7b54\u6848\u5373\u53ef\u3002\n\n\n- \u590d\u6742\u5ea6\uff1a$O(n^3+n^2+nlogn+k)$\n- \u671f\u671b\u5f97\u5206\uff1a$30\\sim 60$\n\n## \u7b97\u6cd53\n\n\u6211\u4eec\u53d1\u73b0\u5efa\u56fe\u65f6\uff0c\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u8fde\u51fa\u53bb\u6700\u591a\u4e24\u6761\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u5e73\u53f0\u6309\u7167$y$\u7684\u5927\u5c0f\u6392\u5e8f\uff0c\u7136\u540e$n^2$\u7684\u5c31\u53ef\u4ee5\u5efa\u5b8c\u56fe\u4e86\uff0c\u540c\u6837\u7684\u641c\u4e00\u904d\uff0c\u53d6\u524d$k$\u5927\u7684\u52a0\u5165\u7b54\u6848\u5373\u53ef\u3002\n\n- \u590d\u6742\u5ea6\uff1a$O(n^2+nlogn+k)$\n- \u671f\u671b\u5f97\u5206\uff1a$70$\n\n## \u7b97\u6cd54\n\n\u6211\u4eec\u53d1\u73b0\uff0c$DP$\u65f6\uff0c\u5bf9\u4e8e\u5df2\u7ecf\u5728\u4e4b\u524d\u641c\u8fc7\u7684\u72b6\u6001\uff0c\u662f\u4e0d\u4f1a\u53d8\u7684\uff0c\u6240\u4ee5\u7528\u7c7b\u4f3c\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5c06\u641c\u7d22\u7684\u590d\u6742\u5ea6\u5c06\u4e3a$n$\u3002\n\n- \u590d\u6742\u5ea6\uff08\u56e0\u4e3a\u5efa\u56fe\u7684$n^2$\u8fd8\u6ca1\u89e3\u51b3\uff09\uff1a$O(n^2+nlogn+k)$\n- \u671f\u671b\u5f97\u5206:$70\\sim 80$\n\n## \u7b97\u6cd55\n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5e73\u53f0\u62c6\u4e3a\u82e5\u5e72\u70b9\uff0c\u7136\u540e\u5bf9\u5e73\u53f0\u6309\u7167$y$\u548c$x$\u6392\u5e8f\u540e\u76f4\u63a5\u7528\u76f4\u7ebf\u51fd\u6570\u6c42\u4ea4\u70b9\uff0c\u76f4\u63a5\u5efa\u56fe\uff0c\u5f53\u6bcf\u4e2a\u5e73\u53f0\uff08\u9664\u4e86\u5f00\u59cb\u5e73\u53f0\u548c\u98de\u8239\uff09\u5efa\u8fb9\u8d85\u8fc72\u6761\u65f6\uff08\u8fd9\u4e24\u6761\u8981\u5408\u6cd5\uff09\uff0c\u5c31\u4e0d\u7528\u518d\u5efa\u4e86\u3002\n\n\u7c7b\u4f3c\u4e0b\u56fe,1234\u4e3a\u4e00\u4e2a\u5e73\u53f0\uff0c56\u4e3a\u4e00\u4e2a\uff0c78\u4e3a\u4e00\u4e2a\u3002\n![](https://cdn.luogu.com.cn/upload/pic/37928.png)\n\n\u5efa\u56fe\u7684\u590d\u6742\u5ea6\u4e3a$\\sum\\text{\u5e73\u53f0\u957f\u5ea6}\\sim (\\sum\\text{\u5e73\u53f0\u957f\u5ea6})^2$,\u4f46\u662f\u6700\u574f\u662f\u8fbe\u4e0d\u5230\u7684\u3002\n\n- \u671f\u671b\u590d\u6742\u5ea6\uff1a$O(\\sum\\text{\u5e73\u53f0\u957f\u5ea6}+nlogn+k)$\n- \u671f\u671b\u5f97\u5206\uff1a$80\\sim 90$\n\n\n## \u7b97\u6cd56\n\n\u6709\u7684\u70b9\u592a\u591a\u4e86\uff0c\u6240\u4ee5\u8981\u5c06\u5176\u7f29\u4e3a\u4e00\u4e2a\u70b9\uff0c\u6240\u4ee5\u5c06\u5176\u4ed6\u5e73\u53f0\u5168\u90e8\u770b\u6210\u4e00\u4e2a\u70b9\u3002\n\n\u6211\u4eec\u53d1\u73b0\u53ea\u6709\u4e24\u79cd\u8fb9\uff0c\u4e00\u79cd\u4e3a\u5317\u504f\u4e1c$45^{\\circ}$\uff0c\u4e00\u79cd\u4e3a\u5357\u504f\u4e1c$45^{\\circ}$\uff0c\u5176\u5b9e\u6700\u540e\u5efa\u51fa\u6765\u7684\u8fb9\u53ea\u6709\u6700\u591a$2n$\u6761\u3002\n\n\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u626b\u63cf\u7ebf\u548c\u5e73\u8861\u6811\u8f85\u52a9\u5efa\u8fb9\uff0c\u5c06\u590d\u6742\u5ea6\u964d\u4e3a$nlogn$\u3002\n\n\u626b\u63cf\u7ebf\uff0c\u8fd9\u91cc\u53ef\u4e0d\u662f\u5e73\u884c\u4e8e$x$\u6216\u8005$y$\u8f74\u626b\uff0c\u56e0\u4e3a\u662f\u659c\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5728$y=x$\u548c$y=-x$\u4e24\u4e2a\u65b9\u5411\u4e0a\u626b\u4e24\u6b21\uff0c\u53ef\u4ee5\u5206\u522b\u6309\u7167\u7b2c\u4e00\u5173\u952e\u5b57\u4e3a$x+y$\u548c$x-y$\u7b2c\u4e8c\u5173\u952e\u5b57\u4e3a$y$\u5bf9\u70b9\u6392\u5e8f\uff0c\u800c\u5e73\u8861\u6811\u7528$y$\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57$x+y$\u548c$x-y$\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u3002\n\n\u7136\u540e\u5c06\u4e00\u4e2a\u5e73\u53f0\u62c6\u6210\u5165\u70b9\u51fa\u70b9\u548c\u53d1\u5c04\u70b9\uff0c\u4e09\u4e2a\u70b9\u3002\n\n\u5f00\u59cb\u5e73\u53f0\u5219\u62c6\u4e3a$x2-x1+1$\u4e2a\u70b9\uff0c\u98de\u8239\u62c6\u4e3a\u4e24\u4e2a\u70b9\u3002\n\n\u7136\u540e\u5bf9\u70b9\u6392\u5e8f\uff0c\u505a\u4e24\u6b21\u626b\u63cf\u7ebf\u5efa\u56fe\uff0c\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u5373\u53ef\u62ff\u5230\u5168\u90e8\u7684\u5206\u3002\n\n\u8fd9\u91cc\u7684\u5e73\u8861\u6811\u53ef\u4ee5\u7528$STL$\u4e2d\u7684$set$\u5b9e\u73b0\u3002\n\n- \u590d\u6742\u5ea6$O(nlogn+k)$\n- \u671f\u671b\u5f97\u5206$100$\n\n\u4e0b\u9762\u4e3acode\uff08\u4e0d\u8981copy\uff0c\u53ef\u80fd\u4e0d\u5bf9\uff09\uff1a\n\n~~~cpp\n#include<set>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define ll long long\nusing namespace std;\nconst int M=4e6+10;\nint n,m,x1,x2,K,yy,wx,sy,ty;\uff1b\nll vall[M],V;\nint lstot,CMP\uff1b\nstruct point{\n    int x,y,id,type,upd;\n    point(){}\n    point(int x,int y,int id,int type,int upd)\n    :x(x),y(y),id(id),type(type),upd(upd){}\n    bool operator <(const point &a)const{\n        if(CMP){\n            return y<a.y||((y==a.y)&&(x-y)<(a.x-a.y));\n        }else{\n            return y>a.y||((y==a.y)&&(x+y)<(a.x+a.y));\n        }\n    }\n}pp[M]\uff1b\nbool isin[M];\nmultiset <point> S;\ntypedef multiset<point>::iterator iter;\nstruct Line{\n    int type,xl,xr,y,pos,w,upd;\n    Line(){}\n    Line(int a,int b,int c,int d,int e,int f,int g)\n    :type(a),xl(b),xr(c),y(d),w(e),upd(f),pos(g){}\n    void in(int i){\n        scanf(\"%d%d%d%d\",&type,&xl,&xr,&y);\n        pp[++lstot]=point(xl,y,i,1,-1);\n        pp[++lstot]=point(xr,y,i,-1,-1);\n        if(type==1){\n            scanf(\"%d%d%d\",&pos,&w,&upd);\n            vall[i]=w;\n            pp[++lstot]=point(pos,y,i,0,upd);\n        }else if(type==2){\n            scanf(\"%d%d\",&pos,&w);\n            vall[i]=w;\n            pp[++lstot]=point(pos,y,i,0,2);\n        }\n    }\n}L;\nbool cmp1(const point &a,const point &b){\n    if((a.x-a.y)==(b.x-b.y)){\n        if(a.y==b.y){\n            return a.type>b.type;\n        }else if(a.type!=b.type){\n            return a.type>b.type;\n        }else{\n            return a.y>b.y;\n        }\n    }else return (a.x-a.y)<(b.x-b.y);\n}\nbool cmp2(const point &a,const point &b){\n    if((a.x+a.y)==(b.x+b.y)){\n        if(a.y==b.y){\n            return a.type>b.type;\n        }else if(a.type!=b.type){\n            return a.type>b.type;\n        }else{\n            return a.y<b.y;\n        }\n    }else return (a.x+a.y)<(b.x+b.y);\n}\nint ed;\nll rec[M],inf,anss[M],cct[M];\nstruct ss{\n    int to,last;\n    ss(){}\n    ss(int a,int b):to(a),last(b){}\n}g[M<<2];\nint head[M],cnt;\nint dfn[M],top;bool in[M];\nvoid add(int a,int b){g[++cnt]=ss(b,head[a]);head[a]=cnt;}\nll dfs(int a,ll v){\n    if(a==ed) return cct[ed]=1,rec[ed]=0,0;\n    ll val=0,ans=0;in[a]=1;\n    for(int i=head[a];i;i=g[i].last){\n        if(rec[g[i].to]!=inf){\n            val+=cct[g[i].to]*vall[a]+rec[g[i].to];\n        }else if(!in[g[i].to]){\n            ll to=dfs(g[i].to,v+vall[a]);\n            val+=cct[g[i].to]*vall[a]+rec[g[i].to];\n        }\n        cct[a]+=cct[g[i].to];\n    }\n    in[a]=0;\n    rec[a]=val;\n    return v*cct[a]+val;\n}\nvoid Init_1(){\n    int nowtot=n;\n    for(int i=x1;i<=x2;i++){\n        ++nowtot;\n        pp[++lstot]=point(i,yy,nowtot,0,0);\n        vall[nowtot]=V;\n    }\n    ++nowtot;ed=nowtot;\n    pp[++lstot]=point(wx,sy,nowtot,-1,1);pp[++lstot]=point(wx,ty,nowtot,1,-1);\n}\nvoid tu(point a){\n    S.insert(a);\n    iter p=S.find(a);\n    if(p!=S.begin()){\n        for(--p;;--p){\n            point t=*p;\n            if(isin[t.id]&&t.id!=a.id){\n                add(a.id,t.id);break;\n            }else if(!isin[t.id]){\n                S.erase(p);\n                p=S.find(a);\n            }\n            if(p==S.begin()) break;\n        }\n    }\n}\nvoid UP(point a){\n    if(a.type==1){\n        S.insert(a);\n        isin[a.id]=1;\n    }else if(a.type==0){\n        if(a.upd==2||a.upd==0)tu(a);\n    }else if(a.type==-1){\n        isin[a.id]=0;\n    }\n}\nvoid DOWN(point a){\n    if(a.type==1){\n        S.insert(a);\n        isin[a.id]=1;\n    }else if(a.type==0){\n        if(a.upd==2||a.upd==1) tu(a);\n    }else if(a.type==-1){\n        isin[a.id]=0;\n    }\n}\nvoid workup(){\n    sort(pp+1,pp+lstot+1,cmp1);\n    int now;\n    for(int i=1;i<=lstot;){\n        now=pp[i].x-pp[i].y;\n        UP(pp[i]);\n        ++i;\n        while(i<=lstot&&pp[i].x-pp[i].y==now)UP(pp[i++]);\n    }\n}\nvoid workdown(){\n    sort(pp+1,pp+lstot+1,cmp2);\n    int now;\n    for(int i=1;i<=lstot;){\n        now=pp[i].x+pp[i].y;\n        DOWN(pp[i]);\n        ++i;\n        while(i<=lstot&&pp[i].x+pp[i].y==now)DOWN(pp[i++]);\n    }\n}\nvoid Init_2(){\n    workup();\n    CMP=1;\n    memset(isin,0,sizeof(isin));\n    for(int i=1;i<=lstot;i++){\n        if(pp[i].id==ed){\n            if(pp[i].type==-1) pp[i].type=1;\n            else if(pp[i].type==1) pp[i].type=-1;\n        }\n    }\n    workdown();\n}\nvoid Read(){\n    memset(rec,0x3f,sizeof(rec));inf=rec[0];\n    scanf(\"%d%d\",&K,&n);\n    scanf(\"%d%d%d%lld\",&x1,&x2,&yy,&V);\n    scanf(\"%d%d%d\",&wx,&sy,&ty);\n    for(int i=1;i<=n;i++)L.in(i);\n}\nvoid Init(){Init_1();Init_2();}\nbool cmp3(ll a,ll b){return a>b;}\nvoid Work(){\n    int tot=0;ll ans=0;\n    for(int i=x1;i<=x2;i++)anss[++tot]=dfs(n+i-x1+1,0);\n    sort(anss+1,anss+tot+1,cmp3);\n    for(int i=1,up=min(tot,K);i<=up;i++)ans+=anss[i];\n    printf(\"%lld\\n\",ans);\n}\nint main(){\n    Read();\n    Init();\n    Work();\n    return 0;\n}\n~~~\n\n\n",
        "postTime": 1541466478,
        "uid": 62235,
        "name": "TimeTraveller",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4985 \u3010\u53cd\u5c04\u3011"
    }
]