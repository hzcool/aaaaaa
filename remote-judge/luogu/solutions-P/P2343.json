[
    {
        "content": "------------------------\n\u9898\u76ee\u5927\u610f\uff1a\u5f00\u59cb\u7ed9\u51fam\u4e2a\u5b9d\u77f3\uff0c~~\u5979~~\u5b83\u4eec\u6709\u5404\u81ea\u7684\u4ef7\u503c\uff0c\u7136\u540e\u4f1a\u6709\u597d\u591a\u8be2\uff0c\u6216\u540e\u8005\u6dfb\u52a0\u5b9d\u77f3\u64cd\u4f5c\uff0c\u6dfb\u52a0\u5b9d\u77f3\u5c31\u662f\u628a\u65b0\u5b9d\u77f3\u52a0\u5165\u5b9d\u77f3\u5806\u91cc\uff0c\u8be2\u95ee\u7684\u8bdd\u662f\u627e\u4ef7\u503c\u7b2cn\u5927\u7684\u5b9d\u77f3\u3002\n\n-----------------------\n\u6211\u4e00\u770b\u8fd9\u9898\u5c31\u60f3\u5230\u4e86\u4e00\u4e2a\u53eb\u505a\u5e73\u8861\u6811\u7684\u4e1c\u897f\uff0c\u5e73\u8861\u6811\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u548c\u5806\u5408\u5e76\u6784\u6210\u7684\u65b0\u6570\u636e\u7ed3\u6784\uff0c\u6240\u4ee5\u5b83\u7684\u540d\u5b57\u53d6\u4e86Tree\u548cHeap\u5404\u4e00\u534a\uff0c\u53eb\u505aTreap\uff0c\u975e\u5e38\u597d\u7528\uff0c\u800c\u4e14\u8fd9\u9053\u9898\u5e76\u4e0d\u9700\u8981\u6253\u6574\u9897\u5e73\u8861\u6811\uff0c\u53ea\u9700\u8981\u63d2\u5165\u5b9d\u77f3\u5230\u6570\u4e2d\uff0c\u5728rank\u5c31\u884c\u4e86\n\n![](https://img-blog.csdn.net/20160619172814634)\n\n\u8fd9\u4e2a\u5c31\u662f\u4e00\u4e2a\u5e73\u8861\u6811\u3002\u4e0d\u4f1a\u7684\u8bdd\u5c31\u987a\u4fbf\u53bb\u8fd9\u91cc\uff1a(https://blog.csdn.net/qq_21120027/article/details/51713248)\n\u5b66\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u7ed3\u6784\u5427\u3002\u3002\u3002\n\n\n```\n/*\nID:wang1441\nLANG: C++\nTASK:\n*/\n#include<bits/stdc++.h>\n#define ll long long\n\nusing namespace std;\n\ninline int read()\n{\n    int x=0;\n    char ch=getchar();\n    char c=ch;\n    while(ch>'9'||ch<'0')c=ch,ch=getchar();\n    while(ch<='9'&&ch>= '0')x=x*10+ch-'0',ch=getchar();\n    if(c=='-')x=x*-1;\n    return x;\n}\n//const int maxn=,maxm=;\nstruct node{\n\tnode *wudi[2];\n\tint r,v,s;\n\tint cmp(int x)const\n\t{\n\t\treturn x>v?0:1;\n\t}\n\tvoid maintain(){\n\t\ts=wudi[0]->s+wudi[1]->s+1;\n\t}\n}*null,*root;\n\nint a[100010];\nint n,m;\nint q,c;\n\nvoid wwwwww(node * &o,int d)\n{\n\tnode * k=o->wudi[d^1];\n\to->wudi[d^1]=k->wudi[d];\n\to->maintain();\n\tk->maintain();\n\tk->wudi[d]=o;\n\to=k;\n}\n\nvoid eeeeee(node * &o,int x)\n{\n\tif(o==null){\n\t\to=new node();\n\t\to->wudi[0]=o->wudi[1]=null;\n\t\to->v=x;\n\t\to->r=rand();\n\t\to->maintain();\n\t}\n\telse{\n\t\tint d=o->cmp(x);\n\t\teeeeee(o->wudi[d],x);\n\t\tif(o->wudi[d]->r>o->r)\n\t\t    wwwwww(o,d^1);\n\t\to->maintain();\n\t}\n}\n\nvoid tttttttttt()\n{\n\tnull=new node();\n\tnull->s=0;\n\troot=null; \n}\n\n\nvoid rrrrrrrrrrr(node * o,int x)\n{\n\tif(o==null)\n\t    return ;\n\tint d=o->wudi[0]->s;\n\tif(x==d+1){\n\t\tprintf(\"%d\\n\",o->v);\n\t\treturn ;\n\t}\n\tif(x<d+1)\n\t    rrrrrrrrrrr(o->wudi[0],x);\n\telse\n\t    rrrrrrrrrrr(o->wudi[1],x-d-1);\n}\n\nint main()\n{\n    //freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\ttttttttttt();\n\tm=read();\n\tq=read();\n\tsrand(time(NULL));\n\tfor(register int i=1;i<=m;i++){\n\t\ta[i]=read();\n\t\teeeeee(root,a[i]);\n\t}\n\tfor(register int i=1;i<=q;i++){\n\t\tc=read();\n\t\tn=read();\n\t\tif(c==1){\n\t\t\trrrrrrrrrrr(root,n);\n\t\t}\n\t\tif(c==2){\n\t\t\teeeeee(root,n);\n\t\t}\n\t}\n}\n\n```",
        "postTime": 1536893678,
        "uid": 74872,
        "name": "\u5f52\u892f\u96fe\u5d4a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u4e00\u9898\u53ea\u7528\u66b4\u529b\u679a\u4e3e\u5c31\u884c\u4e86\uff0c\u8bb0\u5f97\u7528register\u52a0\u5feb\u4e00\u70b9\u901f\u5ea6\u3002\n\n\u8bfb\u5165\u65f6\u9996\u5148\u5b58\u5165\u6570\u7ec4\u6392\u5e8f\uff0c\u7136\u540e\u53ef\u4ee5\u8f7b\u677e\u5904\u7406c==1\u7684\u60c5\u51b5\uff1b\u800c\u7531\u4e8ec==2\u7684\u60c5\u51b5\u8f83\u5c11\uff0c\u4f7f\u7528\u6570\u7ec4\u4e5f\u53ef\u4ee5\u5904\u7406\u3002\n\n```\n//\u5934\u6587\u4ef6\u5df2\u7701\u7565\nint v[200010];\n\nint main() {\n\tint m, q; cin >> m >> q;\n\tfor (register int i = 0; i < m; ++i) cin >> v[i]; //\u8bfb\u5165\u6570\u636e\n\tsort(v, v + m, greater<int>()); //\u8bb0\u5f97\u662f\u4ece\u5927\u5230\u5c0f\u6392\u5217\n\tfor (register int i = 0; i < q; ++i) {\n\t\tint x, y; cin >> x >> y;\n        //\u4ece0\u5f00\u59cb\u5b58\u50a8\uff0c\u6240\u4ee5y\u8981\u51cf\u4e00\n\t\tif (x == 1) cout << v[y - 1] << endl;\n\t\tif (x == 2) {\n        \t//\u5176\u5b9e\u4e0d\u9700\u8981\u7528lower_bound\u4ec0\u4e48\u7684\uff0c\u76f4\u63a5\u987a\u5e8f\u904d\u5386\u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u5373\u53ef\n\t\t\tregister int* w = v;\n\t\t\tfor (; w != v + m && *w > y; ++w);\n            //\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n\t\t\tfor (register int* q = v + m - 1; q >= w; --q)\n\t\t\t\t*(q + 1) = *q;\n\t\t\t*w = y; ++m;\n\t\t}\n\t}\n}\n```",
        "postTime": 1517999583,
        "uid": 64757,
        "name": "huang_yue",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u597d\u50cf\u8fd8\u6ca1\u6709\u4eba\u5199fhq treap\u7684\n\n~~\u6211\u5148\u6c34\u4e00\u7bc7~~\n\n\u5176\u5b9e\u5c31\u662f\u7ef4\u62a4\u4e00\u68f5\u53ef\u4ee5\u6c42\u533a\u95f4\u7b2ck\u5927\u7684\u5e73\u8861\u6811\uff08~~\u6a21\u677f\u9898~~\uff09\u3002\n\n\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u4e0a\u4ee3\u7801\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node\n{\n\tint l,r,sz,pri,val;\n}tree[150005];\nint tot=0,root,m,q;\nint newnode(int x)\n{\n\ttree[++tot].val=x;\n\ttree[tot].pri=rand();\n\ttree[tot].sz=1;\n\treturn tot;\n}\nvoid pushup(int u)\n{\n\ttree[u].sz=tree[tree[u].l].sz+tree[tree[u].r].sz+1;\n}\nvoid split(int u,int x,int &l,int &r)\n{\n\tif(!u)\n\t{\n\t\tl=r=0;\n\t\treturn;\n\t}\n\tif(tree[u].val<=x)\n\t{\n\t\tl=u;\n\t\tsplit(tree[u].r,x,tree[u].r,r);\n\t}\n\telse\n\t{\n\t\tr=u;\n\t\tsplit(tree[u].l,x,l,tree[u].l);\n\t}\n\tpushup(u);\n}\nint merge(int l,int r)\n{\n\tif(!l||!r)return l+r;\n\tif(tree[l].pri<tree[r].pri)\n\t{\n\t\ttree[l].r=merge(tree[l].r,r);\n\t\tpushup(l);\n\t\treturn l;\n\t}\n\telse\n\t{\n\t\ttree[r].l=merge(l,tree[r].l);\n\t\tpushup(r);\n\t\treturn r;\n\t}\n}\nint kth(int u,int rank)\n{\n\twhile(1)\n\t{\n\t\tif(rank<=tree[tree[u].l].sz)\n\t\t{\n\t\t\tu=tree[u].l;\n\t\t}\n\t\telse if(rank==tree[tree[u].l].sz+1)\n\t\t{\n\t\t\treturn tree[u].val;\n\t\t}\n\t\telse\n\t\t{\n\t\t\trank=rank-tree[tree[u].l].sz-1;\n\t\t\tu=tree[u].r;\n\t\t}\n\t}\n}\nvoid ins(int x)\n{\n\tint L,R;\n\tsplit(root,x,L,R);\n\troot=merge(merge(L,newnode(x)),R);\n}\nint main()\n{\n\tsrand(19260817);\n\tscanf(\"%d%d\",&m,&q);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint v;\n\t\tscanf(\"%d\",&v);\n\t\tins(v);\n\t}\n\tfor(int i=1;i<=q;++i)\n\t{\n\t\tint c,n;\n\t\tscanf(\"%d%d\",&c,&n);\n\t\tif(c==1)\n\t\t{\n\t\t\tprintf(\"%d\\n\",kth(root,tree[root].sz-n+1));\n\t\t}\n\t\tif(c==2)\n\t\t{\n\t\t\tins(n);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1564575375,
        "uid": 34217,
        "name": "Katsura_Hinagiku",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "### \u4e8c\u5206+\u6811\u72b6\u6570\u7ec4\n\n\u6811\u72b6\u6570\u7ec4\u5927\u6cd5\u597d\uff0c\u770b\u697c\u4e0b\u4e00\u5806\u5e73\u8861\u6811\u7ea7\u522b\u7684\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u4ec5\u6253\u4e2a\u5bd2\u98a4\uff08\u4e0d\u4f1a\u5e73\u8861\u6811\uff09\uff0c\u7136\u540e\u4e71\u641e\u641e\u51fa\u4e86\u8fd9\u4e48\u4e00\u4e2a\u73a9\u610f\n\n\u5927\u81f4\u5c31\u662f\u79bb\u6563\u5316\u4e4b\u540e\u7ef4\u62a4\u4e00\u4e2a\u6743\u503c\u6811\u72b6\u6570\u7ec4\uff0c\u52a0\u5165\u5b9d\u77f3\u5c31\u5728\u76f8\u5e94\u7684\u4f4d\u7f6e+1\uff0c\u7136\u540e\u67e5\u8be2\u65f6\u4e8c\u5206\u7b54\u6848\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u7b97\u51fa\u5f53\u524d\u5b9d\u77f3\u7684\u6392\u540d\uff0c\u8fdb\u800c\u8c03\u6574\u7b54\u6848\uff0c\u603b\u590d\u6742\u5ea6O(q log^2m)\uff0c\u4ee3\u7801\u5982\u4e0b\n\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <cmath>\n#include <queue>\n#include <cmath>\n#define LL long long\n#define mp make_pair\n#define pb push_back\nusing namespace std; \nint n,m,tot;\nstruct BIT{\n    int s[200200],sum;\n    void add(int p){for(int i=p;i<=tot;i+=i&(-i))s[i]++;sum++;}\n    int query(int p){int rtn=0;for(int i=p;i;i-=i&(-i))rtn+=s[i];return rtn;}\n}S;\nstruct Qry{\n    int c,v;\n};\nvector<Qry>q;\nint a[200200];\nint num[200200];\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&a[i]),num[++num[0]]=a[i];\n    for(int i=1;i<=m;i++){\n        int x,y;scanf(\"%d%d\",&x,&y);\n        if(x==2)num[++num[0]]=y;\n        q.pb({x,y});\n    }\n    sort(num+1,num+1+num[0]);\n    num[0]=unique(num+1,num+1+num[0])-num-1;\n    tot=num[0];\n    for(int i=1;i<=n;i++){\n        int rnk=lower_bound(num+1,num+1+num[0],a[i])-num;\n        S.add(rnk);\n    }\n    for(int i=0;i<m;i++){\n        if(q[i].c==1){\n            int l=1,r=tot;\n            while(l<r){\n                int mid=l+r>>1;\n                if(S.sum-S.query(mid)>=q[i].v)l=mid+1;\n                else r=mid;\n            }\n            printf(\"%d\\n\",num[l]);\n        }else {\n            int rnk=lower_bound(num+1,num+1+num[0],q[i].v)-num;\n            S.add(rnk);\n        }\n    }    \n}\n```",
        "postTime": 1507426708,
        "uid": 29674,
        "name": "Anoxiacxy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://aday526.github.io/%E9%A2%98%E8%A7%A3%20P2343%20%E3%80%90%E5%AE%9D%E7%9F%B3%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E3%80%91/)\n\n\u597d\u50cf\u8fd8\u6ca1\u6709`vector`\u6c34\u8fc7\u7684\u9898\u89e3~~\u8d76\u7d27\u6c34\u4e00\u53d1~~\n\n\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a $\\texttt{\u5143\u7d20\u6709\u5e8f\u7684}$ `vector`,\u4ee5\u65b9\u4fbf\u8be2\u95ee\u64cd\u4f5c\u3002\n\n\u90a3\u4e48\u8fd9\u65f6\u5bf9\u4e8e\u63d2\u5165\u64cd\u4f5c\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u4fdd\u8bc1\u4e86\u5b83\u662f\u6709\u5e8f\u7684\uff0c\u6211\u4eec\u53ef\u4ee5**\u4e8c\u5206\u67e5\u627e\u51fa\u5c0f\u4e8e\u6b64\u6570\u7684\u6700\u5927\u5143\u7d20**\uff0c\u7528`insert`\u51fd\u6570\u63d2\u5165\u5728\u5b83\u524d\u9762\u5373\u53ef\u3002\n\n\u800c`insert`\u51fd\u6570\uff0c\u5b83\u7684\u590d\u6742\u5ea6\u5728\u6211\u770b\u6765\u662f$\\mathcal {O}(\\text{\u7384\u5b66})$\uff0c\u770b\u4e0a\u53bb\u5b83\u662f$\\mathcal O(log\\;n)$\uff0c\u4f46\u6709\u5f88\u591a\u5927\u4f6c\u8bf4\u662f$\\mathcal O(n)$\uff0c\u53ea\u662f\u5e38\u6570\u5c0f\u7f62\u4e86\u3002\u603b\u4e4b\uff0c\u80fd\u8fc7\u6b64\u9898\n\n\u4f46\u8981\u6ce8\u610f\u4e00\u4e0b\uff0c\u56e0\u4e3a\u6211\u61d2\u4e0d\u60f3\u81ea\u5df1\u5199\u4e8c\u5206\uff0c\u5c31\u7528\u4e86`STL`\u7684`upper_bound`\u53d6\u5927\u4e8e\u5b83\u7684\u6700\u5c0f\u6570\uff0c\u6240\u4ee5\u6bcf\u6b21\u6211\u4eec\u63d2\u5165\u65f6\u8981\u63d2\u5165\u90a3\u4e2a\u6570\u7684\u76f8\u53cd\u6570\uff0c\u540c\u7406\u8be2\u95ee\u4e5f\u53d6\u76f8\u53cd\u6570\n\n\u601d\u8def\u7684\u786e\u633a\u7b80\u5355\uff0c\u4e0a\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define upp(x) (upper_bound(a.begin(),a.end(),x))//\u61d2qwq\nusing namespace std;\n\ninline int read()//\u5feb\u8bfb\n{\n    int s=0,f=1;\n    char ch=getchar();\n    while(!isdigit(ch))\n    {\n        if(ch=='-')f=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        s=s*10+ch-48;\n        ch=getchar();\n    }\n    return s*f;\n}\n\nint m,q,c,n;\nvector<int>a;//\u5c31\u662f\u90a3\u4e2avector\n\nint main()\n{\n    m=read();q=read();\n    while(m--)\n    {\n        n=read();\n        a.insert(upp(-n),-n);//\u63d2\u5165\u76f8\u53cd\u6570\n    }\n    while(q--)\n    {\n        c=read();n=read();\n        if(c==1)\n            printf(\"%d\\n\",-a[n-1]);//\u8be2\u95ee\u76f8\u53cd\u6570\n        else\n            a.insert(upp(-n),-n);//\u63d2\u5165\u76f8\u53cd\u6570\n    }\n    return 0;\n}\n```",
        "postTime": 1592136644,
        "uid": 312393,
        "name": "ADay",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "~~\u770b\u5230\u8fd8\u6ca1\u7528\u9898\u89e3\u7528\u5757\u72b6\u94fe\u8868\u7684\uff0c\u8d76\u7d27\u6765\u6c34\u4e00\u53d1\u3002~~\n___\n\u9898\u610f\uff1a  \n\u7ed9\u4f60 $m$ \u4e2a\u6570\uff0c$q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u6570 $n$ \u6216\u67e5\u8be2\u5168\u5c40\u7b2c $k$ \u5927\u3002\n___\n\u5176\u5b9e\u5c31\u662f\u7528\u5206\u5757\u4f18\u5316\u7684\u66b4\u529b\u3002\u5148\u627e\u5230\u662f\u5bf9\u54ea\u4e00\u5757\u64cd\u4f5c\uff0c\u518d\u52a0\u4e2a\u66b4\u529b\u5373\u53ef\uff0c\u5982\u679c\u4e00\u5757\u8fc7\u5927\uff0c\u5219\u5f3a\u884c\u62c6\u6210\u4e24\u5757\uff0c\u63d2\u5165\u548c\u67e5\u8be2\u90fd\u662f $O(\\sqrt{m})$ \u7684\u3002\u56e0\u4e3a\u6211\u5199\u7684\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6240\u4ee5\u6bcf\u6b21\u67e5\u8be2\u8981\u7a0d\u5fae\u6539\u4e00\u70b9\u3002\n\n\u4ee3\u7801\uff1a\uff08\u7801\u98ce\u90aa\u6559\uff0c\u590d\u6742\u5ea6\uff1a$O((m+q)\\sqrt{m})$\uff0c\u5f00 O2 \u4e4b\u540e\u8dd1\u5f97\u98de\u8d77\uff09\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint c,n,m,q,a[501][501],al[501],an=1,v0,nxt[501],h=1;\nvoid ins(int k)//\u63d2\u5165\n{\n\tint i,j;\n\tfor(j=h;nxt[j]&&a[nxt[j]][1]<k;j=nxt[j]);\n\tfor(i=1;i<=al[j]&&a[j][i]<k;i++);\n\t++al[j];\n\tfor(;i<=al[j];i++)swap(k,a[j][i]);\n\tif(al[j]==500)\n\t{\n\t\tnxt[++an]=nxt[j];\n\t\tnxt[j]=an;\n\t\tal[j]=al[an]=250;\n\t\tfor(i=251;i<=500;i++)swap(a[an][i-250],a[j][i]);\n\t}\n}\nint find(int k)//\u67e5\u8be2\n{\n\tint j,n1=0;\n\tfor(j=h;nxt[j]&&n1+al[j]<k;j=nxt[j])n1+=al[j];\n\treturn a[j][k-n1];\n}\nint main()\n{\n\tscanf(\"%d%d\",&m,&q);\n\tfor(int i=1;i<=m;i++)scanf(\"%d\",&v0),ins(v0);//\u5176\u5b9e\u53ef\u4ee5\u7528sort\u6765\u4f18\u5316\u7684\u3002\n\twhile(q--)\n\t{\n\t\tscanf(\"%d%d\",&c,&n);\n\t\tif(c==1)printf(\"%d\\n\",find(m-n+1));\n\t\telse ins(n),++m;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1581815869,
        "uid": 44840,
        "name": "123456zmy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u628a$4$\u7248\u9898\u89e3\u7ffb\u4e86\u4e2a\u904d\uff0c\u53d1\u73b0\u597d\u50cf\u6ca1\u6709\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\uff0c\u90a3\u4e48\u5c31\u7531\u6211\u6765\u8865\u4e00\u4e2a\u5427\u3002\n\n\u9996\u5148\u6211\u4eec\u8981\u5148\u4e86\u89e3\u4e00\u4e0b\u4ec0\u4e48\u662f\u6743\u503c\u7ebf\u6bb5\u6811\u3002\n\n\u65e2\u7136\u5b83\u7684\u540d\u5b57\u91cc\u6709\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u5c31\u8bf4\u660e\u5b83\u80af\u5b9a\u662f\u901a\u8fc7\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u3002\u901a\u8fc7\u8fdb\u4e00\u6b65\u7684\u4e86\u89e3\uff0c\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\uff0c\u5b83\u7ef4\u62a4\u7684\u4e1c\u897f\u975e\u5e38\u7279\u6b8a\u3002\u5728\u79bb\u6563\u5316\u4e4b\u540e\uff0c\u5b83\u7684\u53f6\u8282\u70b9\uff08\u6807\u53f7\u987a\u5e8f\u4ece\u5de6\u5f80\u53f3\uff09\u5b58\u7684\u5c31\u662f\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n\u5982\u679c\u4f60\u89c9\u5f97\u6211\u8bb2\u5f97\u6709\u4e00\u70b9\u62bd\u8c61\uff0c\u6216\u8005\u662f\u4f60\u6726\u6726\u80e7\u80e7\u542c\u61c2\u4e86\u4e00\u70b9\u4f46\u662f\u6ca1\u6709\u5f88\u660e\u767d\uff0c\u90a3\u4e48\u8bf7\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002\n\n\u6211\u4eec\u4ee5\u6570\u7ec4$[11,11,422,422,422,3472,4197,4197]$\u4e3a\u4f8b\u3002\n\n\u5728\u79bb\u6563\u5316\u4e4b\u540e\uff0c\u6570\u7ec4\u53d8\u4e3a$[1,1,2,2,2,3,4,4]$\n\n\u5bf9\u8fd9\u4e2a\u6570\u7ec4\u5efa\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/4w0tsrf0.png)\n\n\u7528\u8fd9\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u529e\u5230\u5f88\u591a\u5e73\u8861\u6811\u80fd\u591f\u529e\u5230\u7684\u4e8b\u60c5\u3002\n\n- **\u6c42\u4e00\u4e2a\u6570x\u7684\u6392\u540d**\n\n\u8fd9\u4e2a\u5e94\u8be5\u5f88\u597d\u7406\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6c42\u51fa\u533a\u95f4$[1,x-1]$\u7684\u533a\u95f4\u548c\uff0c\u7136\u540e\u518d$+1$\uff0c\u5c31\u80fd\u591f\u5f97\u5230$x$\u7684\u6392\u540d\u3002\n\n```cpp\nint rank(int x, int nowl, int nowr, int wantl, int wantr) {\n\tint ret = 0;\n\tif(wantl <= nowl && nowr <= wantr) {\n\t\treturn tree[x];\n\t}\n\tint mid = (nowl + nowr) >> 1;\n\tif(wantl <= mid) ret += rank(ls(x), nowl, mid, wantl, wantr);\n\tif(wantr > mid) ret += rank(rs(x), mid+1, nowr, wantl, wantr);\n\treturn ret;\n}\n```\n\n- **\u6c42\u6392\u540d\u4e3ak\u7684\u6570**\n\n\u8fd9\u4e2a\u548c\u5e73\u5e38\u7684\u7ebf\u6bb5\u6811\u6709\u4e00\u70b9\u70b9\u4e0d\u4e00\u6837\u3002\n\n\u5982\u679c\u5f53\u524d\u8282\u70b9\u5de6\u513f\u5b50\u7684\u6743\u503c$\\geq k$\uff0c\u5c31\u8bf4\u660e\u6392\u540d\u4e3a$k$\u7684\u6570\u80af\u5b9a\u5728\u5de6\u5b50\u6811\uff0c\u5426\u5219\u5c31\u5728\u53f3\u5b50\u6811\u3002\n\n```cpp\nint kth(int x, int l, int r, int k) {\n\tif(l == r) {\n\t\treturn l;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(tree[ls(x)] >= k) return kth(ls(x), l, mid, k);\n\tif(tree[ls(x)] < k) return kth(rs(x), mid+1, r, k-tree[ls(x)]);//\u6ce8\u610f\u8fd9\u91cc\uff0ck\u8981\u53d8\u6210k-tree[ls(x)]\uff0c\u56e0\u4e3a\u6211\u4eec\u51cf\u53bb\u4e86\u5de6\u5b50\u6811\u7684\u6743\u503c\n}\n```\n\n- **\u6c42\u4e00\u4e2a\u6570x\u7684\u524d\u9a71**\n\n\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u7528\u4e0a\u9762$rank$\u64cd\u4f5c\u548c$kth$\u64cd\u4f5c\u5171\u540c\u5b8c\u6210\u3002\n\n\u9996\u5148\u6c42\u51fa$x$\u7684\u6392\u540d\uff0c\u518d\u51cf\u53bb$1$\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5c31\u7b97\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u6211\u4eec\u8fd9\u91cc\u6c42\u51fa\u6765\u7684\u6392\u540d\u662f\u5f53\u524d\u6240\u6709\u91cd\u590d\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\uff0c\u51cf\u53bb$1$\u5c31\u662f\u524d\u9762\u4e00\u79cd\u5143\u7d20\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u5e76\u4e0d\u788d\u4e8b\u3002\n\n```cpp\nint used = lower_bound(use+1, use+1+maxsize, xx[i])-use;\nint rankx = rank(1, 1, maxsize, 1, used-1)+1;\nprintf(\"%d\\n\", use[kth(1, 1, maxsize, rankx-1)]);\n```\n\n- **\u6c42\u4e00\u4e2a\u6570x\u7684\u540e\u7ee7**\n\n\u8fd9\u4e2a\u64cd\u4f5c\u548c\u4e0a\u9762\u90a3\u4e2a\u64cd\u4f5c\u5dee\u4e0d\u591a\uff0c\u4f3c\u4e4e\u66f4\u7b80\u5355\u4e00\u70b9\u3002\n\n\u9996\u5148\u6c42\u51fa$[1,x]$\u7684\u533a\u95f4\u548c\uff0c\u518d\u52a0\u4e0a1\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230$x+1$\u7684\u6392\u540d\uff0c\u518d\u7528$kth$\u51fd\u6570\u6c42\u51fa$x$\u7684\u540e\u7ee7\u5373\u53ef\u3002\n\n\u5728\u672c\u9898\uff0c\u6211\u4eec\u53ea\u9700\u8981$kth$\u64cd\u4f5c\u3002\n\n\u5982\u679c\u60f3\u8981\u5b9e\u73b0\u4ee5\u4e0a\u7684\u64cd\u4f5c\uff0c\u8bf7\u79fb\u6b65[**\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811**](https://www.luogu.org/problem/P3369)\u3002\n\n\u4e0b\u9762\u662f\u672c\u9898\u7684\u601d\u8def\u3002\n\n\u9996\u5148\u79bb\u6563\u5316\uff0c\u7136\u540e\u628a\u5df2\u7ecf\u53d6\u51fa\u7684\u5b9d\u77f3\u52a0\u5165\u7ebf\u6bb5\u6811\uff08\u6211\u592a\u61d2\u4e86\u4e0d\u60f3\u989d\u5916\u518d\u5199\u4e00\u4e2a\u5efa\u6811\uff0c\u6240\u4ee5\u76f4\u63a5$O(nlogn)$\u628a\u5b9d\u77f3\u52a0\u8fdb\u53bb\u4e86\uff09\uff0c\u6700\u540e\u5904\u7406$q$\u4e2a\u64cd\u4f5c\uff0c$c[i]=1$\u5c31\u7528$kth$\u51fd\u6570\uff0c$c[i]=2$\u66f4\u65b0\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u6709\u4e24\u4e2a\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a\n\n1.\u672c\u9898\u7684\u7a7a\u95f4\u5e94\u8be5\u5f00\u5230$M+Q$\uff0c\u6211\u4e00\u5f00\u59cb\u53ea\u5f00\u4e86$M$\u7684\u7a7a\u95f4\uff0c$WA$\u6210\u4e86$90pts$\n\n2.\u4e60\u60ef\u4e0a\uff0c\u6211\u559c\u6b22\u6309\u79bb\u6563\u5316\u987a\u5e8f\u4ece\u5c0f\u5230\u5927\u5efa\u6811\uff08\u4e8b\u5b9e\u4e0a\u8fd9\u79cd\u5199\u6cd5\u66f4\u4e5f\u4e0d\u5bb9\u6613\u9519\uff09\uff0c\u7136\u800c\u8fd9\u9898\u662f\u8981\u6c42\u4ef7\u503c\u7b2c$n$\u5927\u7684\u5b9d\u77f3\u3002\u6240\u4ee5\u6211\u5b9a\u4e49\u4e86\u4e00\u4e2a$nowsize$\u6765\u8868\u793a\u5f53\u524d\u6709\u591a\u5c11\u4e2a\u5b9d\u77f3\u5df2\u7ecf\u52a0\u5165\u7cfb\u7edf\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define ls(x) (x << 1)\n#define rs(x) (x << 1 | 1)\nusing namespace std;\n\nint m, q;\nint cnt;\nint v[200010], use[200010], opt[200010], c[200010];\nint tree[200010 << 2]; \n\nvoid update(int x, int l, int r, int num) {\n\tif(l == r) {\n\t\ttree[x]++;\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(num <= mid) update(ls(x), l, mid, num);\n\telse update(rs(x), mid+1, r, num);\n\ttree[x] = tree[ls(x)] + tree[rs(x)];\n\treturn ;\n}\n\nint kth(int x, int l, int r, int k) {\n\tif(l == r) {\n\t\treturn l;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(k <= tree[ls(x)]) return kth(ls(x), l, mid, k);\n\telse return kth(rs(x), mid+1, r, k-tree[ls(x)]);\n}\n\nvoid init() {\n\tscanf(\"%d%d\", &m, &q);\n\tfor(register int i = 1; i <= m; i++) {\n\t\tscanf(\"%d\", &v[i]);\n\t\tuse[i] = v[i];\n\t}\n\tcnt = m;\n\tfor(register int i = 1; i <= q; i++) {\n\t\tscanf(\"%d%d\", &opt[i], &c[i]);\n\t\tif(opt[i] == 2) {\n\t\t\tuse[++cnt] = c[i];\n\t\t}\n\t}\n   return ;\n}\n\nvoid solve() {\n\tsort(use+1, use+1+cnt);\n\tint used, nowsize = m, maxsize = unique(use+1, use+1+cnt) - use - 1;\n\tfor(register int i = 1; i <= m; i++) {\n\t\tused = lower_bound(use+1, use+1+maxsize, v[i]) - use;\n\t\tupdate(1, 1, maxsize, used);\n\t}\n\tfor(register int i = 1; i <= q; i++) {\n\t\tif(opt[i] == 1) {\n\t\t\tprintf(\"%d\\n\", use[kth(1, 1, maxsize, (nowsize-c[i]+1))]);\n\t\t}\n\t\telse {\n\t\t\tused = lower_bound(use+1, use+1+maxsize, c[i]) - use;\n\t\t\tupdate(1, 1, maxsize, used);\n\t\t\t++nowsize;\n\t\t}\n\t}\n   return ;\n}\n\nint main() {\n\tinit();\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1572100212,
        "uid": 32107,
        "name": "Fraction",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u8bba\u719f\u7ec3\u638c\u63e1pbds\u7684\u91cd\u8981\u6027\u3002\n\n\u4e00\u773c\u5c31\u53ef\u4ee5\u770b\u51fa\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u3002\u9700\u8981\u67e5rank\u65e0\u6cd5\u4f7f\u7528set\uff0c\u53ef\u4ee5\u7528pbds\u4e2d\u7684tree\u3002\u4f46\u662fpbds\u4e0d\u652f\u6301\u91cd\u590d\u5143\u7d20\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u53d1\u73b0\uff0c\u5143\u7d20\u603b\u6570\u4e0d\u8d85\u8fc71e6\u7ea7\u522b\uff0c\u53ea\u9700\u8981\u7528double\u5b58\u50a8\uff0c\u6bcf\u4e2a\u6570\u5b57\u52a0\u4e0a\u4e00\u4e2a1e7\u7ea7\u522b\u7684\u6570\u4fbf\u53ef\u4ee5\u89e3\u51b3\u91cd\u590d\u95ee\u9898\u4e86\u3002\u4ee3\u7801\u91cf\u8d3c\u77ed\uff0c\u5b89\u5229\u5b66\u4e00\u6ce2\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n    #include<bits/stdc++.h>\n    #include<cctype>\n    #include<ext/pb_ds/assoc_container.hpp>\n    #include<ext/pb_ds/tree_policy.hpp>\n    #define For(i,a,b) for(i=(a),i##end=(b);i<=i##end;++i)\n    #define Forward(i,a,b) for(i=(a),i##end=(b);i>=i##end;--i)\n    #define Rep(i,a,b) for(register int i=(a),i##end=(b);i<=i##end;++i)\n    #define Repe(i,a,b) for(register int i=(a),i##end=(b);i>=i##end;--i)\n    using namespace std;\n    template<typename T>inline void read(T &x){\n        T s=0,f=1;char k=getchar();\n        while(!isdigit(k)&&k^'-')k=getchar();\n        if(!isdigit(k)){f=-1;k=getchar();}\n        while(isdigit(k)){s=s*10+(k^48);k=getchar();}\n        x=s*f;\n    }\n    void file(void){\n        #ifndef ONLINE_JUDGE\n        freopen(\"water.in\",\"r\",stdin);\n        freopen(\"water.out\",\"w\",stdout);\n        #endif\n    }\n    using namespace __gnu_pbds;\n    tree<double,null_type,greater<double>,rb_tree_tag,tree_order_statistics_node_update>G;\n    static int n,m;\n    const double eps=1e-7;\n    void init()\n    {\n        read(n);read(m);\n        static int x;\n        Rep(i,1,n)read(x),G.insert(x+eps*i);\n    }\n    void solve()\n    {\n        static int opt,x;\n        Rep(i,1,m)\n        {\n            read(opt);read(x);\n            if(opt==2)G.insert(x+eps*(++n));\n            else printf(\"%d\\n\",(int)floor(*G.find_by_order(x-1)));\n        }\n    }\n    int main(void){\n        file();\n        init();\n        solve();\n        return 0;\n    }\n\n```",
        "postTime": 1514204568,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "## \u6b64\u9898\u6709\u9677\u9631\uff01\n\n\u62ff\u5230\u6b64\u9898\uff0c\u63d2\u5165\u548c\u67e5\u8be2kth\uff0c\u7b2c\u4e00\u53cd\u5e94\uff1a\u5e73\u8861\u6811\uff1b\n\n\u9677\u96311\uff1a\u6709\u4eba\u4f1a\u5f00\u503c\u57df\u6811\u72b6\u6570\u7ec4\u6216\u7ebf\u6bb5\u6811\uff0c\u4f46\u4ed6\u6ca1\u6709\u8bf4\u660e\u503c\u57df\u5927\u5c0f\u5f88\u53ef\u80fd\u5f00\u9519RE\n\u867d\u7136\u9898\u89e3\u91cc\u6709\u4eba\u7ed9\u51fa\uff0c\u4f46\u8fd9\u5f88\u5192\u9669\uff01\uff01\uff01\n\n\u4e8e\u662f\uff0c\u6211\u6109\u5feb\u7684\u6253\u4e86\u4e2aSplay\u3002\uff08Treap && FHQ Treap \u9760\u8138\u5403\u996d\uff09\n\n\u4f46\u662f\u3002\u3002\u3002 \u4ef7\u503c\u7b2ck\u5927\u662f\u4ece\u5230\u5c0f\u6392\u7684\uff08\u6216\u79f0\u964d\u5e8fkth\uff09 \u800c\u4f20\u7edf\u5e73\u8861\u6811\u7ef4\u62a4\u7684\u662f\u5347\u5e8fkth\u3002\u6240\u4ee5\u8981\u7ef4\u62a4find_kth\uff08cnt\uff08\u603b\u6570\uff09- kth + 1\uff09\n\n\u597d\uff0c\u90a3\u6211\u8d34\u51faSplay\u6a21\u677f\uff08\u5982\u6709\u4e0d\u61c2\u5de6\u8f6c P3369 \u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811\uff09\uff1a\n\n```cpp\nstruct Splay {\n    int root, total;\n    int child[Maxn][2], size[Maxn], cnt[Maxn];\n    int father[Maxn], data[Maxn];\n    \n    Splay () {\n        root = total = 0; Ms(data, 0);\n        Ms(child, 0); Ms(size, 0);\n        Ms(cnt, 0); Ms(father, 0);\n    }\n    \n    inline bool get(int pos) {\n        return pos == child[father[pos]][1];\n    }\n    \n    inline void update(int pos) {\n        size[pos] = cnt[pos] + size[child[pos][0]];\n        size[pos] += size[child[pos][1]]; return;\n    }\n    \n    inline void rotate(int pos) {\n        if (father[pos] == 0) return;\n        int f = father[pos], g = father[f];\n        bool tmp = get(pos), tnp = get(f);\n        child[f][tmp] = child[pos][tmp ^ 1];\n        if (child[pos][tmp ^ 1])\n            father[child[pos][tmp ^ 1]] = f;\n        child[pos][tmp ^ 1] = f;\n        father[f] = pos; father[pos] = g;\n        if (g) child[g][tnp] = pos;\n        update(f); update(pos); return;\n    }\n    \n    inline void splay(int pos) {\n        for (int f = father[pos]; (f = father[pos]); rotate(pos))\n            if (get(pos) == get(f)) rotate(f);\n            else rotate(pos); root = pos; return;\n    }\n    \n    inline void insert(int val) {\n        if (root == 0) {\n            root = ++total;\n            data[root] = val;\n            cnt[1] = size[1] = 1;\n            return;\n        } int now = root;\n        for (; ;) {\n            if (val == data[now]) {\n                ++cnt[now]; splay(now); return;\n            } bool tmp = data[now] < val;\n            if (child[now][tmp]) now = child[now][tmp];\n            else {\n                child[now][tmp] = ++total;\n                father[total] = now;\n                data[total] = val;\n                cnt[total] = size[total] = 1;\n                splay(total); return;\n            }\n        }\n    }\n    \n    inline int rank(int val) {\n        int now = root, ans = 1;\n        for (; ;) {\n            if (data[now] <= val) {\n                ans += size[child[now][0]];\n                if (data[now] == val) {\n                    splay(now); return ans;\n                } ans += cnt[now]; \n                now = child[now][1];\n            } else now = child[now][0];\n        }\n    }\n    \n    inline int pre_idx(void) {\n        int now = child[root][0];\n        while (child[now][1])\n            now = child[now][1];\n        return now;\n    }\n    \n    inline int suc_idx(void) {\n        int now = child[root][1];\n        while (child[now][0])\n            now = child[now][0];\n        return now;\n    }\n    \n    inline void remove(int val) {\n        int tmp = rank(val);\n        if (cnt[root] >= 2) {\n            cnt[root]--;\n            size[root]--;\n            return;\n        }\n        \n        if (child[root][0] == 0 && child[root][1] == 0)\n        {\n            root = 0; return;\n        }\n        \n        if (child[root][0] == 0) {\n            root = child[root][1];\n            father[root] = 0;\n            return;\n        }\n        \n        if (child[root][1] == 0) {\n            root = child[root][0];\n            father[root] = 0;\n            return;\n        }\n        \n        splay(pre_idx());\n        child[root][1] = child[child[root][1]][1];\n        father[child[root][1]] = root;\n        update(root);\n    }\n    \n    inline int findkth(int x) {\n        int now = root;\n        for (; ;) {\n            if (x <= size[child[now][0]]) now = child[now][0];\n            else {\n                x -= size[child[now][0]];\n                if (x <= cnt[now]) {\n                    splay(now);\n                    return data[now];\n                }\n                x -= cnt[now];\n                now = child[now][1];\n            }\n        }\n    }\n    \n    inline int pred(int val) {\n        insert(val);\n        int ans = data[pre_idx()];\n        remove(val); return ans;\n    }\n    \n    inline int succ(int val) {\n        insert(val);\n        int ans = data[suc_idx()];\n        remove(val); return ans;\n    }\n\n} splaytree;\n```\n\n## CODE\uff1a\n```cpp\n//Program written by Liu Zhaozhou ~~~\n#include <bits/stdc++.h>\n#include <algorithm>\n#include <queue>\n#include <set>\n#include <vector>\n#include <deque>\n#include <string>\n\n#define lowbit(x) x & -x\n\n#pragma GCC optimize(3)\n\nusing namespace std;\n\nnamespace Base {\ninline char gc(void)\n{\n    static char buf[100000], *p1 = buf, *p2 = buf;\n    return p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;\n}\n\n#define gc() getchar()\n\ntemplate <class T> inline void read(T &x)\n{\n    T flag = 1; x = 0; register char ch = gc();\n    for (; !isdigit(ch); ch = gc()) if (ch == '-') flag = -1;\n    for (; isdigit(ch); ch = gc()) x = (x << 1) + (x << 3) + (ch & 15);\n    x *= flag; return;\n}\n\ntemplate <class T> inline void write(T x) {\n    if (x < 0) putchar('-'), x = -x;\n    register T y = 1; int len = 1;\n    for (; y <= x / 10; y *= 10) ++len;\n    for (; len; --len, x %= y, y /= 10) putchar(x / y + 48);\n}\n\ntemplate <class T> inline void writeln(T x) {write(x); puts(\"\");}\ntemplate <class T> inline void writeln(T x, char c) {write(x); putchar(c);}\ntemplate <class T> inline void writeln(char c, T x) {putchar(c); write(x);}\n\ntemplate <class T> inline void chkmax(T &x, const T y) {x > y ? x = x : x = y;}\ntemplate <class T> inline void chkmin(T &x, const T y) {x < y ? x = x : x = y;}\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\n\n#define Ms(arr, opt) memset(arr, opt, sizeof(arr))\n#define Mp(x, y) make_pair(x, y)\n\ninline void file(string str) {\n    freopen((str + \".in\").c_str(), \"r\", stdin);\n    freopen((str + \".out\").c_str(), \"w\", stdout);\n}\n}\n\nusing namespace Base;\n\nenum {\n    Maxn = 100005\n};\n\nstruct Splay {\n    int root, total;\n    int child[Maxn][2], size[Maxn], cnt[Maxn];\n    int father[Maxn], data[Maxn];\n    \n    Splay () {\n        root = total = 0; Ms(data, 0);\n        Ms(child, 0); Ms(size, 0);\n        Ms(cnt, 0); Ms(father, 0);\n    }\n    \n    inline bool get(int pos) {\n        return pos == child[father[pos]][1];\n    }\n    \n    inline void update(int pos) {\n        size[pos] = cnt[pos] + size[child[pos][0]];\n        size[pos] += size[child[pos][1]]; return;\n    }\n    \n    inline void rotate(int pos) {\n        if (father[pos] == 0) return;\n        int f = father[pos], g = father[f];\n        bool tmp = get(pos), tnp = get(f);\n        child[f][tmp] = child[pos][tmp ^ 1];\n        if (child[pos][tmp ^ 1])\n            father[child[pos][tmp ^ 1]] = f;\n        child[pos][tmp ^ 1] = f;\n        father[f] = pos; father[pos] = g;\n        if (g) child[g][tnp] = pos;\n        update(f); update(pos); return;\n    }\n    \n    inline void splay(int pos) {\n        for (int f = father[pos]; (f = father[pos]); rotate(pos))\n            if (get(pos) == get(f)) rotate(f);\n            else rotate(pos); root = pos; return;\n    }\n    \n    inline void insert(int val) {\n        if (root == 0) {\n            root = ++total;\n            data[root] = val;\n            cnt[1] = size[1] = 1;\n            return;\n        } int now = root;\n        for (; ;) {\n            if (val == data[now]) {\n                ++cnt[now]; splay(now); return;\n            } bool tmp = data[now] < val;\n            if (child[now][tmp]) now = child[now][tmp];\n            else {\n                child[now][tmp] = ++total;\n                father[total] = now;\n                data[total] = val;\n                cnt[total] = size[total] = 1;\n                splay(total); return;\n            }\n        }\n    }\n    \n    inline int rank(int val) {\n        int now = root, ans = 1;\n        for (; ;) {\n            if (data[now] <= val) {\n                ans += size[child[now][0]];\n                if (data[now] == val) {\n                    splay(now); return ans;\n                } ans += cnt[now]; \n                now = child[now][1];\n            } else now = child[now][0];\n        }\n    }\n    \n    inline int pre_idx(void) {\n        int now = child[root][0];\n        while (child[now][1])\n            now = child[now][1];\n        return now;\n    }\n    \n    inline int suc_idx(void) {\n        int now = child[root][1];\n        while (child[now][0])\n            now = child[now][0];\n        return now;\n    }\n    \n    inline void remove(int val) {\n        int tmp = rank(val);\n        if (cnt[root] >= 2) {\n            cnt[root]--;\n            size[root]--;\n            return;\n        }\n        \n        if (child[root][0] == 0 && child[root][1] == 0)\n        {\n            root = 0; return;\n        }\n        \n        if (child[root][0] == 0) {\n            root = child[root][1];\n            father[root] = 0;\n            return;\n        }\n        \n        if (child[root][1] == 0) {\n            root = child[root][0];\n            father[root] = 0;\n            return;\n        }\n        \n        splay(pre_idx());\n        child[root][1] = child[child[root][1]][1];\n        father[child[root][1]] = root;\n        update(root);\n    }\n    \n    inline int findkth(int x) {\n        int now = root;\n        for (; ;) {\n            if (x <= size[child[now][0]]) now = child[now][0];\n            else {\n                x -= size[child[now][0]];\n                if (x <= cnt[now]) {\n                    splay(now);\n                    return data[now];\n                }\n                x -= cnt[now];\n                now = child[now][1];\n            }\n        }\n    }\n    \n    inline int pred(int val) {\n        insert(val);\n        int ans = data[pre_idx()];\n        remove(val); return ans;\n    }\n    \n    inline int succ(int val) {\n        insert(val);\n        int ans = data[suc_idx()];\n        remove(val); return ans;\n    }\n\n} splaytree;\n\nint n, m, cnt = 0;\nint opt, x;\n\nsigned main(void) {\n    //file(\"\");\n\tread(n); read(m);\n\tfor (int i = 1; i <= n; i++)\n\t\tread(x), splaytree.insert(x), ++cnt;\n\t\n\twhile (m--) {\n\t\tread(opt); read(x);\n\t\tif (opt == 2)\n\t\t\t splaytree.insert(x), ++cnt;\n\t\telse writeln(splaytree.findkth(cnt - x + 1));\n\t}\n    return 0;\n}\n\n\n```\n\n\u8c22\u8c22\u8d44\u74f7\uff01\uff01\uff01\n",
        "postTime": 1562121730,
        "uid": 50925,
        "name": "EternalEpic",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u968f\u673a\u8df3\u9898\u8df3\u5230\u4e86\u8fd9\u4e00\u9898\u3002\u7b2c\u4e00\u773c\u770b\u4e0a\u53bb\uff0c\u55ef\uff0c\u5e73\u8861\u6811\u88f8\u9898\u3002\u63d2\u5165\u548c\u67e5\u8be2 $k$ \u5927\u7684\u7ecf\u5178\u64cd\u4f5c\u3002\n\n### \u7b97\u6cd5 0\uff1a\u4f18\u96c5\u7684\u66b4\u529b\n\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u5199\u4efb\u4f55\u7684\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u5373\u53ef\u5b8c\u6210\u8fd9\u9053\u9898\u76ee\u3002\u6211\u4eec\u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u7684\u4e00\u53e5\u5173\u952e\u7684\u8bdd\uff1a\n\n> \u6709\u53ef\u80fd\u8981\u5f80\u73b0\u6709\u7684\u7cfb\u7edf\u4e2d\u6dfb\u52a0\u5b9d\u77f3\u3002\u8fd9\u4e9b\u5b9d\u77f3\u7684\u4e2a\u6570\u6bd4\u8f83\u5c11\u3002\n\n\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u9700\u8981\u5904\u7406\u592a\u591a\u6b21\u63d2\u5165\u64cd\u4f5c\u3002\u52a0\u4e4b\u6570\u5217\u7684\u957f\u5ea6\u4e3a $10^5$\uff0c\u8be2\u95ee\u6b21\u6570\u4e5f\u975e\u5e38\u5c11\uff08$10^4$ \u7ea7\u522b\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f5c\u51fa\u4e00\u4e2a\u5927\u80c6\u7684\u5047\u8bbe\uff1a\n\n> \u8fd9\u4e2a\u6570\u5217\u5728\u5927\u591a\u6570\u65f6\u95f4**\u51e0\u4e4e**\u662f\u9759\u6001\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7528\u4e00\u4e2a `vector` \u641e\u4e00\u4e0b\u4e8b\u60c5\u5373\u53ef\uff08\u5176\u5b9e\u7528 `vector` \u4e5f\u80fd\u6c34\u8fc7\u4e00\u4e9b\u6570\u636e\u4e0d\u662f\u592a\u5f3a\u7684\u5e73\u8861\u6811\u7684\u9898\uff09\u3002\u867d\u7136\u8bf4 `vector` \u81ea\u5e26\u7684 `insert()` \u51fd\u6570\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n)$ \u7684\uff0c\u4f46\u662f\u9762\u5bf9\u6570\u636e\u4e0d\u662f\u592a\u5f3a\u7684\u9898\u76ee\u8fd8\u662f\u7ef0\u7ef0\u6709\u4f59\u7684\u3002\u4e8e\u662f\u6211\u4eec\u5728\u7ebf\u5904\u7406\u6240\u6709\u7684\u63d2\u5165\u548c\u8be2\u95ee\u64cd\u4f5c\uff0c\u4f7f\u7528 `lower_bound()` \u51fd\u6570\u67e5\u627e\u6570\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\u6240\u6709\u63d2\u5165\u64cd\u4f5c\u6700\u5dee\u60c5\u51b5\u4e0b\u603b\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n^2\\log n)$\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u80fd\u8fbe\u5230\u8fd9\u4e00\u590d\u6742\u5ea6\uff08\u6ca1\u6709\u7279\u6b8a\u6784\u9020\u6570\u636e\u7684\u8bdd\u6bcf\u4e00\u6b21\u63d2\u5165\u6700\u5c0f\u7684\u4e00\u4e2a\u6570\u662f\u4e0d\u73b0\u5b9e\u7684\uff09\u3002\n\n\u53ea\u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u7ec6\u8282\uff0c\u7531\u4e8e\u6211\u4eec\u9700\u8981\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6240\u4ee5\u628a\u6bcf\u4e2a\u6570\u90fd\u53d8\u6210\u5b83\u7684\u76f8\u53cd\u6570\u518d\u63d2\u5165\u5373\u53ef\u3002\n\n```cpp\n// luogu-judger-enable-o2\n// 697ms 1.27M with O2\n#include <cstdio>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\nvector<int> BST;\ninline void Insert(int v) {\n  BST.insert(upper_bound(BST.begin(), BST.end(), v), v);\n}\ninline void Query(int rank) {\n  assert(rank <= int(BST.size()));\n  printf(\"%d\\n\", -BST[rank - 1]);\n}\nint m, q, x, opt;\nint main() {\n  scanf(\"%d%d\", &m, &q);\n  while(m--) {\n    scanf(\"%d\", &x);\n    Insert(-x);\n  }\n  while(q--) {\n    scanf(\"%d%d\", &opt, &x);\n    if(opt & 1) Query(x);\n    else Insert(-x);\n  }\n  return 0;\n}\n```\n\n### \u7b97\u6cd5 1\uff1a\u66f4\u4f18\u96c5\u7684\u66b4\u529b\n\n\u5982\u679c\u611f\u89c9\u66b4\u529b\u63d2\u5165\u4f1a TLE \u7684\u8bdd\uff0c\u53ef\u4ee5\u5bf9\u4e00\u5f00\u59cb\u63d2\u5165\u7684\u6240\u6709\u6570\uff08\u6ca1\u6709\u67e5\u8be2\u7684\u4e00\u90e8\u5206\uff09\u4f7f\u7528 `sort()` \u8fdb\u884c\u6392\u5e8f\uff0c\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n\\log_2n)$\uff0c\u8fd9\u4e00\u90e8\u5206\u7684\u590d\u6742\u5ea6\u4e0d\u5230 180 \u4e07\u3002\u540e\u671f\u5f3a\u5236\u5728\u7ebf\u7684\u90e8\u5206\u4e3a $3\\times10^4$ \u6b21\uff0c\u5176\u4e2d\u63d2\u5165\u4e0d\u8d85\u8fc7 $10^4$ \u6b21\uff0c\u6700\u5dee\u60c5\u51b5\u4e0b\u603b\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(10^4\\times\\log_210^5\\times10^5)\\approx\\mathcal{O}(18\\times 10^9)$\uff0c\u5176\u4e2d $18$ \u592a\u5c0f\u4e86\u53ef\u4ee5\u770b\u4f5c\u5e38\u6570\uff0c\u6bcf\u6b21\u67e5\u8be2\u90fd\u662f\u4e25\u683c $\\mathcal{O}(1)$ \u7684\u3002\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u4ee5\u6700\u5dee\u60c5\u51b5\u4e0b $\\mathcal{O}(10^9)$ \u7684\u590d\u6742\u5ea6\u901a\u8fc7\u8fd9\u9053\u9898\u76ee\u4e86\u3002\u8fd9\u663e\u7136\u662f\u53ef\u4ee5\u5728 1s \u5185\u901a\u8fc7\u7684\uff0c\u5e76\u4e14\u4e5f\u4e0d\u592a\u53ef\u80fd\u4f1a\u8fbe\u5230\u8fd9\u4e2a\u6700\u5dee\u7684\u590d\u6742\u5ea6\uff08\u66b4\u529b AC\uff09\u3002\n\n\u4e0d\u7ba1\u7406\u8bba\u8fd8\u662f\u5b9e\u8df5\u90fd\u8bc1\u660e\u4e86\u8fd9\u6837\u4e0d\u4f1a\u592a\u6162\uff0c\u8fd9\u4e0b\u53ef\u4ee5\u653e\u5fc3\u4e86\u5427\uff1f\n\n```cpp\n// luogu-judger-enable-o2\n// 158ms 1.47M with O2\n#include <cstdio>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\nvector<int> BST;\ninline void Insert(int v) {\n  BST.insert(upper_bound(BST.begin(), BST.end(), v), v);\n}\ninline void Query(int rank) {\n  assert(rank <= int(BST.size()));\n  printf(\"%d\\n\", -BST[rank - 1]);\n}\nint m, q, x, opt;\nint main() {\n  scanf(\"%d%d\", &m, &q);\n  while(m--) {\n    scanf(\"%d\", &x);\n    BST.push_back(-x);\n  }\n  sort(BST.begin(), BST.end());\n  while(q--) {\n    scanf(\"%d%d\", &opt, &x);\n    if(opt & 1) Query(x);\n    else Insert(-x);\n  }\n  return 0;\n}\n```\n\uff08\u51e0\u4e4e\u5c31\u662f\u4e0a\u4e00\u4efd\u4ee3\u7801\u7a0d\u5fae\u6539\u4e86\u4e00\u4e0b\uff09\n\n### \u7b97\u6cd5 2\uff1a\u4e0d\u4f1a\u5199\u5e73\u8861\u6811\u8005\u7684\u5e73\u8861\u6811\u2014\u2014 01-Trie\n\n\u4e0a\u8ff0\u4e24\u4e2a\u7b97\u6cd5\u5927\u6982\u90fd\u662f\u5361\u590d\u6742\u5ea6\u8fc7\u53bb\u7684\uff0c\u6548\u7387\u4e0d\u662f\u592a\u597d\u3002\u6211\u4eec\u518d\u56de\u6765\u770b\u770b\u8fd9\u9053\u9898\u76ee\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5199\u4e00\u68f5\u5e73\u8861\u6811\uff08\u663e\u7136\u5e76\u4e0d\u662f\u53ea\u6709\u5e73\u8861\u6811\u8fd9\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u624d\u80fd\u7ef4\u62a4\u8fd9\u4e24\u4e2a\u7b80\u5355\u7684\u4fe1\u606f\uff09\uff0c\u6211\u4eec\u8003\u8651 01-Trie \u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u3002\u5b83\u5c31\u80fd\u80dc\u4efb\u8fd9\u4e00\u4efb\u52a1\u4e86\u3002\n\n\u5c06\u6bcf\u4e00\u4e2a\u6570\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u5b58\u5165 Trie \u6811\u4e2d\uff0c\u5bf9\u4e8e Trie \u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u90fd\u989d\u5916\u5f00\u4e00\u4e2a `size` \u4fdd\u5b58\u4ee5\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u63d2\u5165\u7684\u65f6\u5019\u987a\u4fbf\u76f4\u63a5\u66f4\u65b0\u8282\u70b9\u7684 `size` \u503c\u3002\u67e5\u8be2\u7684\u8bdd\uff0c\u53ea\u9700\u8981\u5728 Trie \u6811\u4e0a\u6309\u7167 `size` \u7684\u6307\u5f15\u641c\u7d22\u5373\u53ef\uff0c\u5355\u6b21\u67e5\u8be2\u548c\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(\\log_2\\max(a_i))$\uff0c\u90a3\u4e48\u6700\u5dee\u60c5\u51b5\u4e0b\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(1.3\\times10^5\\log_2\\mathrm{INT\\_MAX})\\approx\\mathcal{O}(4.16\\times10^6)$\uff0c\u662f\u4e00\u4e2a\u76f8\u5f53\u4f18\u79c0\u7684\u590d\u6742\u5ea6\u4e86\u3002\n\n\u5e76\u4e14\u8fd9\u6837\u5199\u5e38\u6570\u4e5f\u6bd4\u8f83\u5c0f\u3010\u6bd4\u5e38\u7528\u7684\u5e73\u8861\u6811\u5e38\u6570\u5c0f\u5f88\u591a\uff0c\u80fd\u8fbe\u5230\u5341\u5206\u63a5\u8fd1\u7ea2\u9ed1\u6811\u7684\u6548\u7387\uff0876ms \u8fc7\u666e\u901a\u5e73\u8861\u6811\uff09\u3011\uff0c\u7f16\u7801\u96be\u5ea6\u548c\u8c03\u8bd5\u96be\u5ea6\u90fd\u5f88\u5c0f\uff08\u76f8\u5bf9\u4e8e\u5e73\u8861\u6811\u538b\u884c\u540e\u8fd1 100 \u884c\u7684\u957f\u5ea6\uff0c01-Trie \u53ef\u4ee5\u5728 50 \u884c\u4e4b\u5185\u5b8c\u6210\uff0c\u5e76\u4e14\u51e0\u4e4e\u4e0d\u9700\u8981\u4efb\u4f55\u8c03\u8bd5\uff09\u3002\n\n\u53ef\u6301\u4e45\u5316\u4ec0\u4e48\u7684\u4e5f\u5341\u5206\u5bb9\u6613\uff08\u522b\u544a\u8bc9\u6211\u60a8\u4e0d\u4f1a Trie \u6811\u7684\u53ef\u6301\u4e45\u5316\uff09\u3002\u7f3a\u9677\u5728\u4e8e\u4e0d\u80fd\u533a\u95f4\u6253\u6807\u8bb0\u3001\u7a7a\u95f4\u5360\u7528\u8f83\u5927\u3010\u6700\u591a\u662f\u5e73\u8861\u6811\u5360\u7528\u7a7a\u95f4\u7684\u5e73\u65b9\u7684\u5e38\u6570~~\uff08\u771f\u7684\u4e0d\u5c0f\uff09~~\u500d\u3011\u7b49\u7b49\uff0c\u4f46\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\u66ff\u4ee3\u5e73\u8861\u6811\u8fd8\u662f\u53ef\u4ee5\u7684\u3002\n\n```cpp\n// luogu-judger-enable-o2\n// 191 ms 19.48M with O2\n#include <cstdio>\nusing namespace std;\nconst int maxn = 120000 * 35;\nconst int fix = 2147483647, full = 33;\nstruct node {\n  node *ch[2];\n  int size;\n}*nil, *root, mem[maxn];\nint cnt;\ninline void newnode(node *&p) {\n  mem[cnt].ch[0] = mem[cnt].ch[1] = nil;\n  p = mem + cnt++;\n}\ninline void Insert(node *rt, long long x) {\n  x += fix;\n  for(register int i = full; ~i; --i) {\n    bool op = x >> i & 1;\n    if(rt->ch[op] == nil) newnode(rt->ch[op]);\n    rt = rt->ch[op];\n    rt->size += 1;\n  }\n}\ninline void Query(node *rt, int k) {\n  long long res = 0;\n  for(register int i = full; ~i; --i) {\n    if(k > rt->ch[0]->size)\n      k -= rt->ch[0]->size, res |= 1 << i, rt = rt->ch[1];\n    else rt = rt->ch[0];\n  }\n  printf(\"%lld\\n\", fix - res);\n}\nint main() {\n  int m, opt, q;\n  long long x;\n  newnode(nil), nil->ch[0] = nil->ch[1] = nil; newnode(root);\n  scanf(\"%d%d\", &m, &q);\n  while(m--) {\n    scanf(\"%lld\", &x);\n    Insert(root, -x);\n  }\n  while(q--) {\n    scanf(\"%d%lld\", &opt, &x);\n    if(opt & 1) Query(root, x);\n    else Insert(root, -x);\n  }\n  return 0;\n}\n```\n\n\u6211\u592a\u5931\u8d25\u4e86\uff0c\u5728 `int` \u8fb9\u754c\u7684\u6570\u636e\u4e00\u76f4\u7206\uff0c\u7136\u540e\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u4e0d\u662f\u5f88\u597d\uff0c\u88ab\u66b4\u529b\u540a\u6253\u4e86\u2026\u2026\n\n\u540e\u9762\u4e24\u4e2a\u7b97\u6cd5 Rank \u90fd\u4e0d\u5dee\u7684\u6837\u5b50\u5462~\n",
        "postTime": 1538090020,
        "uid": 35485,
        "name": "Hatsune_Miku",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u672c\u6765\u4ee5\u4e3a\u4e00\u5b9a\u4f1a\u6709\u5e73\u8861\u6811\u7684\u9898\u89e3\uff0c\u7ed3\u679c\u6ca1\u6709\uff0c\u90a3\u6211\u5c31\u6765\u4e00\u4e2a\uff1b\n\n\u8fd9\u4e2a\u9898\u8003\u8651\u53ea\u6709\u4e24\u79cd\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u53eb\u505atreap\u7684\u5e73\u8861\u6811\uff0c\u6ca1\u6709\u542c\u8bf4\u8fc7\u7684\u53ef\u4ee5\u53bb\u81ea\u5b66\u4e00\u4e0b\uff0c\u975e\u5e38\u5de7\u5999\n\n\u8fd9\u91cc\u6211\u4eec\u53ea\u5199\u4e00\u9897\u5c0ftreap\uff0c\u652f\u6301\u63d2\u5165\u548crank\u5c31\u884c\u4e86\n\n```cpp\n#include<iostream>\n#include<stdio.h> \n#include<time.h>\n#include<stdlib.h>\nusing namespace std;\nstruct Node\n{\n    Node *ch[2];\n    int r,v,s;\n    int cmp(int x) const \n    {\n        return x>v?0:1;\n    }\n    void maintain()\n    {\n        s=ch[0]->s+ch[1]->s+1;\n    }\n}*null,*root;\n\nvoid rot(Node* &o,int d) \n{\n    Node* k=o->ch[d^1];\n    o->ch[d^1]=k->ch[d];\n    o->maintain();\n    k->maintain();\n    k->ch[d]=o;\n    o=k;\n}\nvoid insert(Node* &o,int x)\n{\n    if (o==null) \n    {\n        o=new Node();\n        o->ch[0]=o->ch[1]=null;\n        o->v=x;\n        o->r=rand();\n        o->maintain();\n    }\n    else \n    {\n        int d=o->cmp(x);\n        insert(o->ch[d],x); if (o->ch[d]->r > o->r ) rot(o,d^1);\n        o->maintain();\n    }\n}\nvoid init()\n{\n    null=new Node(); null->s=0; root=null;\n}\nvoid print(Node *o)\n{\n    if (o==null) return;\n    print(o->ch[0]);\n    printf(\"%d %d\\n\",o->v,o->s);\n    print(o->ch[1]);\n}\nvoid find(Node* o,int x) \n{\n    if (o==null) return;\n    int d=o->ch[0]->s;\n    if (x==d+1) \n    {\n        printf(\"%d\\n\",o->v);\n        return;\n    }\n    if (x<d+1) find(o->ch[0],x);\n    else find(o->ch[1],x-d-1);\n}\nint n,m,ch,x;\ninline void solve()\n{\n    init();\n    cin>>n>>m;\n    srand(time(NULL));\n    for(int i=1;i<=n;i++) scanf(\"%d\",&x),insert(root,x);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&ch,&x);\n        if(ch==1) find(root,x);\n        else insert(root,x);\n    }\n}\nint main()\n{\n    solve(); \n    return 0;\n}\n```",
        "postTime": 1506393635,
        "uid": 47497,
        "name": "FendtSilence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u8fd9\u4e0d\u662f\u6570\u636e\u7ed3\u6784xjb\u7ef4\u62a4\u7684\u88f8\u9898\u3002\u3002\u3002\n\n\u63d2\u5165\uff0bkth\n\n\n\u597d\u5427\u76f4\u63a5\u66b4\u529b\u79fb\u52a8\u5c31\u884c\u4e86\u3002\u3002\u3002\n\n\u505a\u6cd5\u5c31\u662f\u4e8c\u5206\u4e00\u4e0b\u9700\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u770b\u4e00\u4e0b\u8fd9\u4e2a\u4f4d\u7f6e\u5de6\u9762\u6709\u591a\u5c11\u4e2a\u6570\uff0c\u53f3\u9762\u6709\u591a\u5c11\u4e2a\u6570\uff0c\u7136\u540e\u770b\u90a3\u4e2a\u5c11\u5f80\u54ea\u91cc\u66b4\u529b\u79fb\u52a8\uff08\u8fd9\u4e48\u505a\u662flogn+n/2\u7684\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f4\u662f\u53ef\u4ee5\u52c9\u5f3a\u8279\u8fc7\uff09\u3002\u5f53\u7136\u5f80\u5de6\u79fb\u52a8\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u8d1f\u6570\u4e0b\u6807\uff0c\u4fdd\u5b58\u7684\u65f6\u5019\u4ece\u6570\u7ec4\u4e2d\u95f4\u5f00\u59cb\u4fdd\u5b58\u6570\u636e\u5c31\u884c\uff08\u5927\u6982\uff09\u3002\n\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <vector>\n#include <cmath>\n#include <set>\n\nusing namespace std;\n\nconst int N = 100010;\n\nint ch[N * 35][2], cnt[N * 35], tot = 1;\n\n#define walk for(int i = 31, bit, rt = 1 ; (bit = ((x >> i) & 1)), i >= 0 ; i --)\n\nvoid ins(int x) {\n    walk {\n        if(!ch[rt][bit]) ch[rt][bit] = ++ tot;\n        cnt[rt = ch[rt][bit]] ++;\n    }\n}\n\nint kth(int x) {\n    int ret = 0;\n    walk {\n        if(x > cnt[ch[rt][0]]) x -= cnt[ch[rt][0]], rt = ch[rt][1], ret |= 1 << i;\n        else rt = ch[rt][0];\n    }\n    return ret;\n}\n\nint n, q;\n\nint main() {\n    scanf(\"%d%d\", &n, &q);\n    for(int i = 1, x ; i <= n ; i ++) {\n        scanf(\"%d\", &x);\n        ins(x);\n    }\n    for(int i = 1, x, y ; i <= q ; i ++) {\n        scanf(\"%d%d\", &x, &y);\n        if(x == 1) {\n            printf(\"%d\\n\", kth(n - y + 1));\n        } else {\n            n ++;\n            ins(y);\n        }\n    }\n}\n```",
        "postTime": 1505650053,
        "uid": 47111,
        "name": "nekko",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P2343)\n\n---\n\n\u9898\u76ee\u8981\u6c42\u6211\u4eec\u6c42\u4ec0\u4e48\uff0c~~\u6211\u4eec\u5c31\u6c42\u4ec0\u4e48~~\uff0c\u6c42\u7b2c$\\texttt{n}$\u73cd\u8d35\u7684\u5b9d\u77f3\uff0c\n\n\u540c\u65f6\u652f\u6301\u63d2\u2642\u5165\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4ec0\u4e48\u5462\uff1f\u5f53\u7136\u662f\u5e73\u8861\u6811\u5566\uff01\uff01\uff01\n\n$\\texttt{Ps:}$\u5176\u5b9e\u8fd9\u9053\u9898\u8fd8\u633a\u7248\u7684\uff0c\u8bc4\u5206\u597d\u50cf\u8bc4\u9ad8\u4e86\uff08\u6bd5\u7adf\u6570\u636e\u6c34\uff09\u3002\n\n----\n\n\u8bf4\u53e5\u95f2\u8bdd\uff1a\u8fd9\u9898\u9762\u8ba9\u6211\u60f3\u5230\u4e86\u300a\u5b9d\u77f3\u5546\u4eba\u7406\u67e5\u5fb7\u7684\u8c1c\u9274\u5b9a\u300b\uff0c\u7136\u540e\u53c8\u60f3\u5230\u4e86$\\texttt{BL}$\uff0c\u7136\u540e\u5c31\u4e0a\u4e86\u4e0b\u8d34\u5427\uff0c\u7136\u540e\u6709\u4eba\u62cd\u4e86\u62cd\u6211\u80a9......\n\n----\n\n\u8fd9\u91cc\u63d0\u4f9b\u7684\u662f$\\texttt{splay}$\uff0c\u4f18\u5316\u8fc7\u7684\uff0c\u8fd8\u4e0d\u7b97\u592a\u6162\u3002\n\n```cpp\n#include <cmath>\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <climits>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntemplate<typename T>void read(T &x) {\n\tT f = 1;x = 0;char s = getchar();\n\twhile(s < '0' || s > '9') {if(s == '-')f = -1;s = getchar();}\n\twhile(s >= '0' && s <= '9') {x = x * 10 + s - '0';s = getchar();}\n\tx *= f;\n}\ntemplate<typename T>void print(T x) {\n\tif(x < 0) putchar('-'),x = -x;\n\tif(x > 9) print(x / 10);\n\tputchar(x % 10 + '0');\n}\nconst int maxn = 3e5 + 5;\nstruct Node {\n\tint fa,ch[2],val,cnt,sz;\n} spl[maxn];\nint root,cnt,n,m;\n\nvoid update(int x) {\n\tspl[x].sz = spl[spl[x].ch[0]].sz + spl[spl[x].ch[1]].sz + spl[x].cnt;\n}\n\nbool ident(int x,int f) { return spl[f].ch[1] == x;}\n\nvoid connect(int x,int f,int s) {\n\tspl[f].ch[s] = x;\n\tspl[x].fa = f;\n}\n\nvoid rotate(int x) {\n\tint f = spl[x].fa,ff = spl[f].fa,k = ident(x,f);\n\tconnect(spl[x].ch[k ^ 1],f,k);\n\tconnect(x,ff,ident(f,ff));\n\tconnect(f,x,k ^ 1);\n\tupdate(f),update(x);\n}\n\nvoid splaying(int x,int top) {\n\tif (!top) root = x;\n\twhile (spl[x].fa != top) {\n\t\tint f = spl[x].fa,ff = spl[f].fa;\n\t\tif (ff != top) ident(f,ff) ^ ident(x,f) ? rotate(x) : rotate(f);\n\t\trotate(x);\n\t}\n}\n\nvoid newnode(int &now,int fa,int val) {\n\tspl[now = ++ cnt].val = val;\n\tspl[now].fa = fa;\n\tspl[now].sz = spl[now].cnt = 1;\n}\n\nvoid ins(int val,int &now = root,int fa = 0) {\n\tif (!now) newnode(now,fa,val),splaying(now,0);\n\telse if (val < spl[now].val) ins(val,spl[now].ch[0],now);\n\telse if (val > spl[now].val) ins(val,spl[now].ch[1],now);\n\telse spl[now].cnt ++,spl[now].sz ++,splaying(now,0);\n}\n\nint getrank(int val) {\n\tint x = root,rank = 1;\n\twhile (x) {\n\t\tif (spl[x].val == val) {\n\t\t\trank += spl[spl[x].ch[0]].sz;\n\t\t\tsplaying(x,0);\n\t\t\tbreak;\n\t\t}\n\t\tif (val <= spl[x].val) x = spl[x].ch[0];\n\t\telse {\n\t\t\trank += spl[spl[x].ch[0]].sz + spl[x].cnt;\n\t\t\tx = spl[x].ch[1];\n\t\t}\n\t}\n\treturn rank;\n}\n\nint getnum(int rank) {\n\tint x = root;\n\twhile (x) {\n\t\tint lsz = spl[spl[x].ch[0]].sz;\n\t\tif (lsz + 1 <= rank && rank <= lsz + spl[x].cnt) {\n\t\t\tsplaying(x,0);\n\t\t\tbreak;\n\t\t}\n\t\telse if (lsz >= rank) x = spl[x].ch[0];\n\t\telse {\n\t\t\trank -= lsz + spl[x].cnt;\n\t\t\tx = spl[x].ch[1];\n\t\t}\n\t}\n\treturn spl[x].val;\n}\n\nint id(int x) {\n\tint now = root;\n\twhile (now) {\n\t\tif (x == spl[now].val) return now;\n\t\telse now = spl[now].ch[x > spl[now].val];\n\t}\n}\n\nvoid delnode(int x) {\n\tsplaying(x,0);\n\tif (spl[x].cnt > 1) spl[x].cnt --,spl[x].sz --,splaying(x,0);\n\telse if (spl[x].ch[1]) {\n\t\tint p = spl[x].ch[1];\n\t\twhile (spl[p].ch[0]) p = spl[p].ch[0];\n\t\tsplaying(p,x);\n\t\tconnect(spl[x].ch[0],p,0);\n\t\troot = p;\n\t\tspl[p].fa = 0;\n\t\tupdate(root);\n\t}\n\telse root = spl[x].ch[0],spl[root].fa = 0;\n}\n\nvoid del(int val,int now = root) {\n\tif (val == spl[now].val) delnode(now);\n\telse if (val < spl[now].val) del(val,spl[now].ch[0]);\n\telse del(val,spl[now].ch[1]);\n}\n\nint kth(int x) {\n\tint now = root;\n\twhile (1) {\n\t\tif (spl[now].ch[0] && x <= spl[spl[now].ch[0]].sz) now = spl[now].ch[0];\n\t\telse {\n\t\t\tint tmp = spl[spl[now].ch[0]].sz + spl[now].cnt;\n\t\t\tif (x <= tmp) return spl[now].val;\n\t\t\tx -= tmp;\n\t\t\tnow = spl[now].ch[1];\n\t\t}\n\t}\n}\n\nvoid Find(int x) {\n\tint u = root;\n\tif (!u) return;\n\twhile (spl[u].ch[x > spl[u].val] && spl[x].val != x) u = spl[u].ch[x > spl[u].val];\n\tsplaying(u,0);\n}\n\nint Next(int x,int f) {\n\tFind(x);\n\tint u = root;\n\tif ((spl[u].val > x && f) || (spl[u].val < x && !f)) return u;\n\tu = spl[u].ch[f];\n\twhile (spl[u].ch[f ^ 1]) u = spl[u].ch[f ^ 1];\n}\n\nint main() {\n\tread(n);read(m);\n\tint x,y;\n\tfor (int i = 1 ; i <= n ; ++ i) {\n\t\tread(x);ins(x);\n\t}\n\twhile (m --) {\n\t\tread(x);read(y);\n\t\tif (x == 1) printf(\"%d\\n\",kth(spl[root].sz - y + 1));\n\t\telse ins(y);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1596028193,
        "uid": 163516,
        "name": "Strelitzia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u8fd8\u6ca1\u6709\u4eba\u5199Splay\u8bf6\uff0c\u90a3\u6211\u5c31\u6765\u6070\u4e00\u53d1\u3002\n\n\u6b63\u5982\u5199\u4e86\u9898\u89e3\u7684\u4e00\u7fa4\u5de8\u4f6c\u6240\u8a00\uff0c\u8fd9\u9898\u662f\u4e00\u9053\u5e73\u8861\u6811\u3002treap\u3001fhq-treap\u7b49\u7b49\u90fd\u6709\u5927\u4f6c\u5199\u8fc7\u4e86\uff0c\u90a3\u6211\u5c31\u6765\u4e00\u53d1Splay\u5427\u3002\n\nSplay\u5b66\u4e60\u94fe\u63a5\u6070\u4e00\u53d1(https://baijiahao.baidu.com/s?id=1613228134219334653&wfr=spider&for=pc)\n\n\u8fd9\u91cc\uff0c\u552f\u4e00\u6709\u4e00\u70b9\u4e0d\u540c\u7684\u662f\uff0c\u67e5\u8be2\u7684\u53d8\u6210\u4e86\u533a\u95f4\u7b2cK\u5927\uff0c\u800c\u4e0d\u662f\u7b2cK\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u628a\u67e5\u8be2\u7b2cK\u5927\u6539\u4e3a\u67e5\u8be2\u7b2c\uff08n-k+1\uff09\u5c0f\u7684\u6570\uff0c\u5c31\u80fd\u8fbe\u5230\u76ee\u7684\u4e86\u3002\u4e0d\u8981\u5fd8\u8bb0\uff0cn\u5728\u63d2\u5165\u6570\u7684\u65f6\u5019\u8981++\u54e6\uff01\n\n\u4e0a\u4ee3\u7801\uff1a\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\ninline void read(T &x) {\n\tx = 0;\n\tT f = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n\tfor (; isdigit(c); c = getchar()) x = (x << 1) + (x << 3) + (c ^ 48);\n\tx *= f;\n}\ntemplate <typename T>\ninline void w(T x) {\n\tif (x > 9) w(x / 10);\n\tputchar(x % 10 + 48);\n}\ntemplate <typename T>\ninline void write(T x, char c) {\n\tif (x < 0){\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tw(x);\n\tputchar(c);\n}\nstruct info{\n\tint child[2], cnt, siz, fa;\n\tlong long val;\n}t[5000005];\nint rt, tot;\ninline void upd(int x) {\n\tt[x].siz = t[t[x].child[0]].siz + t[t[x].child[1]].siz + t[x].cnt;\n}\ninline bool  ask(int x) {\n\treturn x == t[t[x].fa].child[1];\n}\ninline void rot(int x) {\n\tint f = t[x].fa, g = t[f].fa;\n\tint tmp = ask(x), tnp = ask(f);\n\tif (g) t[g].child[tnp] = x;\n\tt[x].fa = g;\n\tt[f].child[tmp] = t[x].child[tmp ^ 1];\n\tt[t[x].child[tmp ^ 1]].fa = f;\n\tt[x].child[tmp ^ 1] = f;\n\tt[f].fa = x;\n\tupd(f);\n\tupd(x);\n}\ninline void splay(int x) {\n\tint y, z;\n\twhile(t[x].fa) {\n\t\ty = t[x].fa; z = t[y].fa;\n\t\tif (z) {\n\t\t\tif (ask(x) == ask(y)) rot(y);\n\t\t\telse rot(x);\n\t\t}\n\t\trot(x);\n\t}\n\trt = x;\n\tupd(rt);\n\treturn;\n}\ninline void ins (long long x) {\n\tint cur = rt, f = 0;\n\twhile(cur) {\n\t\tif (t[cur].val == x) break;\n\t\tf = cur;\n\t\tcur = t[cur].child[x > t[cur].val];\n\t}\n\tif (cur) t[cur].cnt ++, t[cur].siz ++;\n\telse {\n\t\tcur = ++ tot;\n\t\tif (f) t[f].child[x > t[f].val] = cur;\n\t\tt[cur].fa = f;\n\t\tt[cur].child[1] = t[cur].child[0] = 0;\n\t\tt[cur].cnt = t[cur].siz = 1;\n\t\tt[cur].val = x;\n\t}\n\tsplay(cur);\n\treturn;\n}\ninline long long kth(int k) {\n\tint cur = rt;\n\twhile(cur) {\n\t\tif (k > t[cur].cnt + t[t[cur].child[0]].siz) {\n\t\t\tk -= t[cur].cnt + t[t[cur].child[0]].siz;\n\t\t\tcur = t[cur].child[1];\n\t\t}\n\t\telse if (k <= t[t[cur].child[0]].siz) cur = t[cur].child[0];\n\t\telse{\n\t\t\tsplay(cur);\n\t\t\treturn t[rt].val;\n\t\t}\n\t}\n}\nint main(){\n\tint n, m;\n\tread(n); read(m);\n\tfor (int i = 1; i <= n; i ++) {\n\t\tlong long x;\n\t\tread(x);\n\t\tins(x);\n\t}\n\tfor (int i = 1; i <= m; i ++) {\n\t\tint opt;\n\t\tlong long sum;\n\t\tread(opt); read(sum);\n\t\tif (opt & 1) {\n\t\t\twrite(kth(n - sum + 1), '\\n');\n\t\t}\n\t\telse ins(sum), n ++;\n\t} \n\treturn 0;\n}\n```\n",
        "postTime": 1592014690,
        "uid": 46820,
        "name": "Wall_breaker",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "# P2343 \u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\n[\u539f\u9898\u5730\u5740](https://www.luogu.org/problem/P2343)\n\n[Github\u9898\u96c6](https://github.com/jerrykcode/luogu)\n\n## \u601d\u8def\n\n### \u5927\u90e8\u5206\u5e73\u8861\u6811\u7684\u9898\u89e3\u662fSplay\uff0c\u597d\u50cf\u8fd8\u6ca1\u6709\u7528SBT\u7684\n\n\u4f7f\u7528\u4f9d\u636e\u7ed3\u70b9\u6570\u91cf\u5e73\u8861\u7684SBT\u6811\u3002\n* \u5bf9\u4e8e\u63d2\u5165\u64cd\u4f5c\uff0c\u5c06\u65b0\u7ed3\u70b9\u63d2\u5165SBT\u5373\u53ef\n* \u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\uff0c\u6392\u540d\u4e3an\u5373\u6709n - 1\u4e2a\u5143\u7d20\u5927\u4e8e\u5b83\uff0c\u7528\u51fd\u6570``` int rank(Tree tree, int n) ```\u67e5\u8be2tree\u4e2d\u6709n\u4e2a\u7ed3\u70b9\u6bd4\u5b83\u5927\u7684\u7ed3\u70b9 \uff0c\n\t\u90a3\u4e48```rank(n - 1)```\u5c31\u662f\u67e5\u8be2\u7684\u7b54\u6848\u3002\n\trank\u51fd\u6570\u7684\u5b9e\u73b0\uff1a\u7531\u4e8eSBT\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\u8bb0\u5f55\u4e86\u4ee5\u8be5\u7ed3\u70b9\u4e3a\u6839\u7684\u6811\u7684\u7ed3\u70b9\u6570\u91cf(size)\uff0c\u4ece\u6839\u7ed3\u70b9tree\u5f00\u59cb\u9012\u5f52\uff1a\n\t\u8bbe`tree\u7684\u53f3\u5b50\u6811\u7684size`\u4e3a`rightSize`\n\t* \u82e5n == rightSize\uff0c\u5219\u6b63\u597d\u6709n\u4e2a\u7ed3\u70b9\u6bd4tree\u5927\uff0c\u90a3\u4e48tree\u5c31\u662f\u67e5\u8be2\u7684\u7ed3\u70b9\u3002\n\t* \u82e5n < rightSize\uff0c\u5219\u9012\u5f52```rank(tree->right, n)```\n\t* \u82e5n > rightSize\uff0c\u5219\u9012\u5f52```rank(tree->left, n - rightSize - 1)```\n\n## \u4ee3\u7801\n\n### C\n\n```c\n#include \"stdio.h\"\n#include \"stdlib.h\"\n\ntypedef struct TNode {\n\tint key;\n\tsize_t size;\n\tstruct TNode * left;\n\tstruct TNode * right;\n} *Tree;\n\n#define SIZE(tree) (tree ? tree->size : 0)\n\nTree newTNode(int key) {\n\tTree tree = (Tree)malloc(sizeof(struct TNode));\n\ttree->key = key;\n\ttree->size = 1;\n\ttree->left = tree->right = NULL;\n\treturn tree;\n}\n\nTree leftRotate(Tree tree);\nTree rightRotate(Tree tree);\n\nTree maintain(Tree tree);\nTree maintainLeft(Tree tree);\nTree maintainRight(Tree tree);\n\nTree insert(Tree tree, int key);\nint rank(Tree tree, int n);\n\nvoid deleteTree(Tree tree);\n\nTree leftRotate(Tree tree) {\n\tTree k = tree->right;\n\ttree->right = k->left;\n\tk->left = tree;\n\ttree->size = SIZE(tree->left) + SIZE(tree->right) + 1;\n\tk->size = tree->size + SIZE(k->right) + 1;\n\treturn k;\n}\n\nTree rightRotate(Tree tree) {\n\tTree k = tree->left;\n\ttree->left = k -> right;\n\tk->right = tree;\n\ttree->size = SIZE(tree->left) + SIZE(tree->right) + 1;\n\tk->size = SIZE(k->left) + tree->size + 1;\n\treturn k;\n}\n\nTree maintain(Tree tree) {\n\ttree = maintainLeft(tree);\n\ttree = maintainRight(tree);\n\treturn tree;\n}\n\nTree maintainLeft(Tree tree) {\n\tif (tree == NULL) return tree;\n\tif (tree->left == NULL) return tree;\n\tif (tree->left->left && tree->left->left->size > SIZE(tree->right)) {\n\t\ttree = rightRotate(tree);\n\t\ttree->right = maintain(tree->right);\n\t\ttree = maintain(tree);\n\t}\n\tif (tree->left->right && tree->left->right->size > SIZE(tree->right)) {\n\t\ttree->left = leftRotate(tree->left);\n\t\ttree = rightRotate(tree);\n\t\ttree->left = maintain(tree->left);\n\t\ttree->right = maintain(tree->right);\n\t\ttree = maintain(tree);\n\t}\n\treturn tree;\n}\n\nTree maintainRight(Tree tree) {\n\tif (tree == NULL) return tree;\n\tif (tree->right == NULL) return tree;\n\tif (tree->right->right && tree->right->right->size > SIZE(tree->left)) {\n\t\ttree = leftRotate(tree);\n\t\ttree->left = maintain(tree->left);\n\t\ttree = maintain(tree);\n\t}\n\tif (tree->right->left && tree->right->left->size > SIZE(tree->left)) {\n\t\ttree->right = rightRotate(tree->right);\n\t\ttree = leftRotate(tree);\n\t\ttree->left = maintain(tree->left);\n\t\ttree->right = maintain(tree->right);\n\t\ttree = maintain(tree);\n\t}\n\treturn tree;\n}\n\nTree insert(Tree tree, int key) {\n\tif (tree == NULL) {\n\t\treturn newTNode(key);\n\t}\n\ttree->size++;\n\tif (key < tree->key) {\n\t\ttree->left = insert(tree->left, key);\n\t\ttree = maintainLeft(tree);\n\t}\n\telse {\n\t\ttree->right = insert(tree->right, key);\n\t\ttree = maintainRight(tree);\n\t}\t\n\treturn tree;\n}\n\nint rank(Tree tree, int n) {\n\tint right_size = SIZE(tree->right);\n\tif (n == right_size) {\n\t\treturn tree->key;\n\t}\n\telse if (n < right_size) {\n\t\treturn rank(tree->right, n);\n\t}\n\telse {\n\t\treturn rank(tree->left, n - right_size - 1);\n\t}\n}\n\nvoid deleteTree(Tree tree) {\n\tif (tree == NULL) return;\n\tif (tree->left) deleteTree(tree->left);\n\tif (tree->right) deleteTree(tree->right);\n\tfree(tree);\n}\n\nint main() {\n\tTree tree = NULL;\n\tint m, q;\n\tscanf(\"%d %d\", &m, &q);\n\tint c, n;\n\tfor (int i = 0; i < m; i++) {\n\t\tscanf(\"%d\", &n);\n\t\ttree = insert(tree, n);\n\t}\t\n\tfor (int i = 0; i < q; i++) {\n\t\tscanf(\"%d %d\", &c, &n);\n\t\tif (c == 1) {\n\t\t\tprintf(\"%d\\n\", rank(tree, n - 1));\n\t\t}\n\t\telse {\n\t\t\ttree = insert(tree, n);\t\t\t\n\t\t}\n\t}\n\tdeleteTree(tree);\n\treturn 0;\n}\n```",
        "postTime": 1564804783,
        "uid": 194439,
        "name": "rediserver",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u672c\u4eba\u4eca\u5929\u521d\u5b66Splay\uff0c\u4e3a\u4e86\u5de9\u56fa\u7ec3\u4e60Splay\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u6211\u7279\u610f\u7528Splay\u5b9e\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\n\n**Description**\n\n\u8bbe\u8ba1\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u63d2\u5165\u5143\u7d20\uff0c\u67e5\u8be2\u6392\u540d\u4e3ax\u7684\u503c\u3002\n\n**Solution**\n\n\u8fd9\u662fSplay\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u6211\u4eec\u660e\u786e\u540e\u6587\u4ee3\u7801\u4e2d\u51fd\u6570\u7684\u4f5c\u7528\n\n1. update\u51fd\u6570\u7528\u4e8e\u7ef4\u62a4\u8282\u70b9\u7684sum\u4fe1\u606f\n2. connect\u7528\u4e8e\u8fde\u63a5\u7236\u5b50\u5173\u7cfb\n3. rotate\u51fd\u6570\u7528\u4e8e\u5b9e\u73b0Splay\u7684\u65cb\u8f6c\n4. splay\u51fd\u6570\u7528\u4e8e\u5b9e\u73b0\u5e73\u8861\u6811\u7684\u4f38\u5c55\u64cd\u4f5c\uff0c\u4f7f\u5f97\u67d0\u4e00\u8282\u70b9\u4f38\u5c55\u5230\u53e6\u4e00\u8282\u70b9\n5. insert\u51fd\u6570\u7528\u4e8e\u63d2\u5165\u5143\u7d20\n6. query\u51fd\u6570\u7528\u4e8e\u8fd4\u56de\u8be2\u95ee\u7684\u7b54\u6848\n\n\u6211\u4eec\u8bb2\u4e00\u4e0b\u4e24\u79cd\u64cd\u4f5c\u5982\u4f55\u5b9e\u73b0\n\n1. insert\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\uff0c\u627e\u5230\u5f85\u63d2\u5165\u5143\u7d20\u5e94\u8be5\u5728\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u5982\u679c\u8be5\u4f4d\u7f6e\u6ca1\u6709\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u5426\u5219\u6211\u4eec\u5c31\u5c06\u8be5\u8282\u70b9\u91cd\u590d\u6b21\u6570+1\u5373\u53ef\u3002\u4e3a\u4e86\u7ef4\u62a4Splay\uff0c\u63d2\u5165\u5b8c\u6210\u540e\u6211\u4eec\u8c03\u7528splay()\u5c06\u5f53\u524d\u8282\u70b9\u4f38\u5c55\u81f3\u6811\u6839\u3002\n\n2. query\uff0c\u6ce8\u610f\uff0c\u672c\u9898\u6240\u6307\u7684\u201c\u6392\u540d\u4e3ai\u201d\u6307\u7684\u662f\u4ece\u5927\u5230\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u8f6c\u5316\u6210\u4ece\u5c0f\u5230\u5927\u5373\u53ef\u3002\u6211\u4eec\u5229\u7528\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u6027\u8d28\u627e\u5230\u76f8\u5e94\u8282\u70b9\u8fd4\u56de\u5373\u53ef\u3002\n\n**Code**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ninline int read() {\n\tint ret = 0, op = 1;\n\tchar c = getchar();\n\twhile (!isdigit(c)) {\n\t\tif (c == '-') op = -1; \n\t\tc = getchar();\n\t}\n\twhile (isdigit(c)) {\n\t\tret = ret * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\treturn ret * op;\n}\nstruct Splay {\n\tint sum, fa, val, ch[2], cnt;\n} a[100010];\nint n, m, root, tot;\nvoid update(int now) {\n\ta[now].sum = a[a[now].ch[0]].sum + a[a[now].ch[1]].sum + a[now].cnt;\n}\nvoid connect(int x, int fa, int op) {\n\ta[x].fa = fa;\n\ta[fa].ch[op] = x;\n}\nvoid rotate(int x) {\n\tint y = a[x].fa;\n\tint z = a[y].fa;\n\tint xson = a[y].ch[1] == x ? 1 : 0;\n\tint yson = a[z].ch[1] == y ? 1 : 0;\n\tint B = a[x].ch[xson ^ 1];\n\tconnect(B, y, xson); connect(y, x, xson ^ 1); connect(x, z, yson);\n\tupdate(y); update(x);\n}\nvoid splay(int from, int to) {\n\twhile (a[from].fa != to) {\n\t\tint y = a[from].fa;\n\t\tint z = a[y].fa;\n\t\tif (z != to)\n\t\t\t(a[y].ch[0] == from) ^ (a[z].ch[0] == y) ? rotate(from) : rotate(y);\n\t\trotate(from);\n\t}\n\tif (to == 0) root = from;\n}\nvoid insert(int val) {\n\tint now = root, fa = 0;\n\twhile (now && a[now].val != val) fa = now, now = a[now].ch[val > a[now].val];\n\tif (now) a[now].cnt++;\n\telse {\n\t\tnow = ++tot;\n\t\ta[now].val = val;\n\t\ta[now].sum = a[now].cnt = 1;\n\t\ta[now].ch[0] = a[now].ch[1] = 0;\n\t\ta[now].fa = fa;\n\t\tif (fa) a[fa].ch[val > a[fa].val] = now;\n\t}\n\tsplay(now, 0);\n}\nint query(int x) {\n\tint now = root;\n\tif (a[now].sum < x) return 0;\n\twhile (1) {\n\t\tif (x <= a[a[now].ch[0]].sum) now = a[now].ch[0];\n\t\telse if(x > a[a[now].ch[0]].sum + a[now].cnt) {\n\t\t\tx -= a[a[now].ch[0]].sum + a[now].cnt;\n\t\t\tnow = a[now].ch[1];\n\t\t}\n\t\telse return a[now].val;\n\t}\n}\nint main() {\n\tint n = read(), m = read();\n\tinsert(-2147483647);\n\tinsert(2147483647);\n\tfor (register int i = 1; i <= n; ++i) insert(read());\n\twhile (m--) {\n\t\tint op = read(), x = read();\n\t\tif (op == 1) printf(\"%d\\n\", query(n - x + 2));\n\t\telse insert(x), ++n;\n\t} \n\treturn 0;\n}\n```\n",
        "postTime": 1564498978,
        "uid": 43385,
        "name": "Infinity_shl",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "**\u672c\u9898\u7b2c\u4e00\u7bc7\u66ff\u7f6a\u7f8a\u6811\u9898\u89e3**\n\n\u9898\u89e3\u91cc\u4ee5Splay\u548cTreap\u4e3a\u4e3b\u3002\u4f46\u662f\u5982\u679c\u53ea\u505a\u6743\u503c\u6811\uff0c\u611f\u89c9\u66ff\u7f6a\u7f8a\u6811\u7801\u91cf\u6700\u5c0f\uff0c\u8dd1\u7684\u8fd8\u6700\u5feb\u3002~~\u6bd5\u7adf\u66b4\u529b\u51fa\u5947\u8ff9~~\n\n## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u4e00\u7ec4\u6570\u636e\u548c\u4e24\u79cd\u64cd\u4f5c\uff0c\u5206\u522b\u4e3a\u63d2\u5165\u4e00\u4e2a\u6570\u548c\u67e5\u8be2**\u7b2c$k$\u5927**\n\n## \u89e3\u6cd5\n\n- \u4f7f\u7528\u66ff\u7f6a\u7f8a\u6811\u7ef4\u62a4\uff0c\u6ce8\u610f**\u6570\u636e\u662f\u4ece\u5927\u5230\u5c0f\u6392\u7684**\n\n- \u5bf9\u4e8e\u7ed9\u51fa\u7684\u6570\u636e\uff0c**\u964d\u5e8f**\u6392\u5e8f\u540e\u4e8c\u5206\u5efa\u6811~~\u5982\u679c\u61d2\u7684\u8bdd\u4e00\u4e2a\u4e00\u4e2ainsert\u4e5f\u95ee\u9898\u4e0d\u5927\uff0c\u591a\u4e2a$log$\u65e0\u4f24\u5927\u96c5~~\n\n- \u5bf9\u4e8e\u4e24\u79cd\u64cd\u4f5c\uff0c\u5e73\u8861\u6811\u677f\u5b50\n\n## \u4ee3\u7801\n\n```cpp\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include <iostream>\n#include <vector>\n#include <cstdlib>\n\nusing namespace std;\n\nconst int MAXN = 1e5 + 5;\nconst double A = 0.8;\n\nint a[MAXN];\n\nstruct Node{\n    int val, siz;\n    Node *ch[2];\n    \n    Node(int val): val(val) {\n        siz = 1;\n        ch[0] = ch[1] = NULL;\n    }\n\n    void Update() {\n        siz = (ch[0] ? ch[0]->siz : 0) + (ch[1] ? ch[1]->siz : 0) + 1;\n    }\n\n    bool Bad() {\n        int ls = ch[0] ? ch[0]->siz : 0, rs = ch[1] ? ch[1]->siz : 0;\n        return (double)ls > (double)siz * A || (double)rs > (double)siz * A;\n    }\n};\n\nNode *rt = NULL;\n\nvector<Node*> vec;\n\nvoid Build(Node *&now, int l, int r) {\n    if (l > r) return;\n    int mid = l + r >> 1;\n    now = new Node(a[mid]);\n    Build(now->ch[0], l, mid - 1);\n    Build(now->ch[1], mid + 1, r);\n    now->Update();\n}\n\nvoid Dfs(Node *now) {\n    if (!now) return;\n    Dfs(now->ch[0]);\n    Node *tmp = now->ch[1];\n    now->ch[0] = now->ch[1] = NULL;\n    now->siz = 1;\n    vec.push_back(now);\n    Dfs(tmp);\n}\n\nvoid Rebuild(Node *&now, int l, int r) {\n    if (l > r) return;\n    int mid = l + r >> 1;\n    now = vec[mid];\n    Rebuild(now->ch[0], l, mid - 1);\n    Rebuild(now->ch[1], mid + 1, r);\n    now->Update();\n}\n\nvoid Insert(Node *&now, int val) {\n    if (now == NULL) {\n        now = new Node(val);\n        return;\n    } else {\n        Insert(val > now->val ? now->ch[0] : now->ch[1], val);\n        now->Update();\n        if (now->Bad()) {\n            vec.clear();\n            Dfs(now);\n            int tot = vec.size();\n            Rebuild(now, 0, tot - 1);\n        }\n    }\n}\n/*\nint Kth(Node *now, int k) {\n    if (!now) return 0;\n    int ls = now->ch[0] ? now->ch[0]->siz : 0;\n    if (k <= ls) return Kth(now->ch[0], k);\n    else if (k == ls + 1) return now->val;\n    else return Kth(now->ch[1], k - ls - 1);\n}\n*/\nint Kth(int rank) {\n    if (!rt) return 1;\n    Node *now = rt, *prev = NULL;\n    while (now) {\n        prev = now;\n        int ls = now->ch[0] ? now->ch[0]->siz : 0;\n        if (rank <= ls) now = now->ch[0];\n        else if (rank <= ls + 1) break;\n        else rank -= ls + 1, now = now->ch[1];\n    }\n    return prev->val;\n}\n\nint cmp(const void *a, const void *b) {\n    return *(int*)b - *(int*)a;\n}\n\nint main() {\n    ios :: sync_with_stdio(false); cin.tie(NULL);\n    int m, q;\n    cin >> m >> q;\n    for (int i = 1; i <= m; i++) cin >> a[i];\n    qsort(a + 1, m, sizeof(int), cmp);\n    Build(rt, 1, m);\n    for (int i = 1; i <= q; i++) {\n        int op, x;\n        cin >> op >> x;\n        if (op == 1) \n            cout << Kth(x) << endl;\n        else\n            Insert(rt, x);\n    }\n    return 0;\n}\n\n```",
        "postTime": 1556099307,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u6bd4\u8f83\u7b80\u6d01\u7684$splay$\u9898\u89e3\n\n\u5176\u5b9e\u53ea\u9700\u8981\u4e24\u4e2a\u57fa\u672c\u64cd\u4f5c\uff1a$insert$\u548c$find$_$rank$(\u67e5\u6392\u540d)\n\n\u64cd\u4f5c2\u76f4\u63a5$insert$\u5373\u53ef\uff0c\u800c\u64cd\u4f5c1\u7531\u4e8e\u627e\u7684\u662f\u73cd\u8d35\u503c\u7b2cn**\u5927**\uff0c\u6240\u4ee5\u53ef\u4ee5\u7edf\u8ba1\u5b9d\u77f3\u603b\u4e2a\u6570(\u4ee3\u7801\u4e2d\u7684$final$)\uff0c\u7136\u540e\u901a\u8fc7$find$_$rank$\u8f93\u51fa\u7b2c$final-n+1$\u5c0f\u7684\u73cd\u8d35\u503c\n\n~~\u6211\u77e5\u9053treap\u8dd1\u7684\u6bd4splay\u5feb\uff0c\u4e0d\u8fc7\u53cd\u6b63\u90fd\u80fd\u8fc7\u561b~~\n\n$Code$:\n\n```\n#include <cstdio>\n#include <iostream>\nusing namespace std;\nint n,m,opt,x,final;\nint root,tot;\nconst int INF=0x7fffffff;\nstruct tree{\n    int val,siz,cnt;\n    int son[2],fa;\n}a[200001];\nvoid update(int p){\n    if(!p)return;\n    a[p].siz=a[a[p].son[0]].siz+a[a[p].son[1]].siz+a[p].cnt;\n}\nint fson(int p){\n    return p==a[a[p].fa].son[1];\n}\nvoid contact(int son,int father,int lr){\n    a[father].son[lr]=son;\n    a[son].fa=father;\n}\nvoid rotate(int p){\n    int father=a[p].fa,gfather=a[father].fa,lr=fson(p);\n    contact(a[p].son[!lr],father,lr);\n    contact(p,gfather,fson(father));\n    contact(father,p,!lr);\n    update(p);update(father);update(gfather);\n}\nvoid splay(int p,int to){\n    if(p==to||!p)return;\n    while(a[p].fa!=to){\n        int father=a[p].fa,gfather=a[father].fa;\n        if(gfather==to)rotate(p);\n        else{\n            if(fson(p)==fson(father))rotate(father);\n            else rotate(p);\n        }\n        update(p);update(father);update(gfather);\n    }\n    if(!to)root=p;\n}\nvoid New(int val,int father){\n    a[++tot].val=val;\n    a[tot].siz=a[tot].cnt=1;\n    contact(tot,father,val>a[father].val);\n    if(!root)root=tot;\n    splay(tot,0);\n}\nvoid find(int val){\n    if(!root)return;\n    int now=root;\n    while(a[now].son[val>a[now].val]&&a[now].val!=val)\n    now=a[now].son[val>a[now].val];\n    splay(now,0);\n}\nint find_rank(int p,int val){\n    if(!p)return 0;\n    if(a[a[p].son[0]].siz>=val)return find_rank(a[p].son[0],val);\n    else if(a[a[p].son[0]].siz+a[p].cnt>=val)return a[p].val;\n    else find_rank(a[p].son[1],val-a[a[p].son[0]].siz-a[p].cnt);\n}\nvoid ins(int p,int val,int las){\n    if(!p){New(val,las);return;}\n    if(a[p].val==val){a[p].cnt++;update(p);return;}\n    ins(a[p].son[val>a[p].val],val,p);\n    update(p);\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);final=n;\n    for(int i=1;i<=n;i++){\n    \tscanf(\"%d\",&x);\n    \tins(root,x,0);\n    }\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d\",&opt,&x);\n        switch(opt){\n            case 1:printf(\"%d\\n\",find_rank(root,final-x+1));break;\n            case 2:ins(root,x,0);final++;break;\n        }\n    }\n}\n```",
        "postTime": 1553676084,
        "uid": 14559,
        "name": "AFOier",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u5e73\u8861\u6811\u7684\u6bd4\u8f83\u88f8\u7684\u9898\u76ee\uff0c\u5c31\u662f\u67e5\u8be2\u533a\u95f4\u7b2ck\u5927\uff0c\u5c31\u76f8\u5f53\u4e8e\u67e5\u8be2\u533a\u95f4\u7b2cn-k+1\u5c0f\u3002\n\n\u53ef\u4ee5\u8111\u8865\u4e00\u4e0b\uff0c\u4e0d\u4f1a\u5e73\u8861\u6811\u7684\u540c\u5b66\u53ef\u4ee5\u5148\u53bb\u770b\u4e00\u4e0b\u8fd9\u9053\u9898\uff1a\n\n[\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3369)\n\n\u6700\u540e\uff0c\u4ee3\u7801\u5949\u4e0a\uff1a\n``` cpp\n#include<cstdio>\n#include<cctype>\n#define maxn 100007\nusing namespace std;\nint rt,tot,n,fa[maxn],cnt[maxn],siz[maxn],val[maxn],ch[maxn][2],q;\nconst int inf=0x3f3f3f3f;\ninline int qread() {\n  char c=getchar();int num=0,f=1;\n  for(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n  for(;isdigit(c);c=getchar()) num=num*10+c-'0';\n  return num*f;\n}\ninline void pushup(int k) {\n  siz[k]=siz[ch[k][0]]+siz[ch[k][1]]+cnt[k];\n}\ninline void rotate(int x) {\n  int y=fa[x],z=fa[y];\n  int k=ch[y][1]==x;\n  ch[z][ch[z][1]==y]=x;\n  fa[x]=z;\n  ch[y][k]=ch[x][k^1];\n  fa[ch[x][k^1]]=y;\n  ch[x][k^1]=y,fa[y]=x;\n  pushup(y),pushup(x);\n}\nvoid splay(int x, int k) {\n  while(fa[x]!=k) {\n  \tint y=fa[x],z=fa[y];\n  \tif(z!=k) (ch[z][0]==y)^(ch[y][0]==x)?rotate(x):rotate(y);\n  \trotate(x);\n  }\n  if(!k) rt=x;\n}\nvoid insert(int x) {\n  int u=rt,f=0;\n  while(u&&val[u]!=x) {\n  \tf=u;\n  \tu=ch[u][x>val[u]];\n  }\n  if(u) ++cnt[u];\n  else {\n  \tu=++tot;\n  \tif(f) ch[f][x>val[f]]=u;\n  \tfa[u]=f,val[u]=x;\n  \tcnt[u]=siz[u]=1;\n  }\n  splay(u,0);\n}\ninline int kth(int x) {\n  int u=rt;\n  if(siz[u]<x) return 0;\n  while(233) {\n  \tint y=ch[u][0];\n  \tif(x>siz[y]+cnt[u]) {\n  \t  x-=siz[y]+cnt[u];\n\t  u=ch[u][1];\t\n\t}\n\telse if(siz[y]>=x) u=y;\n\telse return val[u];\n  }\n}\nint main() {\n  n=qread(),q=qread();\n  for(int i=1,x;i<=n;++i) x=qread(),insert(x);\n  while(q--) {\n  \tint c=qread();\n  \tif(c==2) {\n  \t  int x=qread();\n\t  insert(x);\t\n\t  ++n;\n\t}\n\telse {\n\t  int x=qread();\n\t  printf(\"%d\\n\",kth(n-x+1));\n\t}\n  }\n  return 0;\n}\n```",
        "postTime": 1553432138,
        "uid": 68622,
        "name": "King\u4e28\u5e1d\u5fa1\u5a01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "## \u672c\u9898\u6211\u505a\u4e86\u56db\u904d\u2026\u2026\uff08\u672c\u4eba\u849f\u84bb\uff09\n\n\u8fd9\u9898\u2026\u2026\u6211\u7528\u4e86\u66b4\u529b\u7684\u6570\u7ec4\uff08\u5927\u4f6c\u52ff\u55b7\uff09\n\n\u770b\u6709\u4e00\u4e2a\u9898\u89e3\u7528\u4e86\u6307\u9488\uff0c\u6211\u5c31\u53d1\u4e2a\u7b80\u5355\u7684\n\n~~\u5de8\u7b80\u5355~~\uff0c\u4f1a\u6570\u7ec4\u548c\u5feb\u6392\u5c31\u884c\n\n------------\n\u5148\u6392\u5e8f\uff0c\u6211\u7528\u7684\u5feb\u6392\uff0c\u7701\u65f6\u95f4\u561b\u3002\n\n\u4e4b\u540e\uff0cscanf(\"%d%d\",&c,&n)\n\n\u5982\u679cc==1\uff0c\u8f93\u51faa[n-1]\n\n\u5982\u679cc==2,\u628an\u653e\u5230\u6570\u7ec4\u540e\u9762\uff0c\u518d\u6392\u5e8f\n\n### \u8d34\u4ee3\u7801\uff1a\n\n------------\n```\n#include<cstdio>\n#include<iostream>\nint m,q,c,d[130001],n;\nvoid qsort(int l,int r)//\u5feb\u6392\n{\n    int i=l,j=r,mid=d[(l+r)/2];\n    while(i<=j)\n    { while(d[i]>mid)i++;\n      while(d[j]<mid)j--;\n      if(i<=j){std::swap(d[i],d[j]);i++;j--;} \n    }//            \u2191\u61d2\u5f97\u6253using\u2026\u2026\u7684\u540e\u679c\n    if(i<r)qsort(i,r);\n    if(l<j)qsort(l,j);\n}\nvoid work()\n{\n    scanf(\"%d%d\",&m,&q);\n    for(int i=0;i<m;i++)scanf(\"%d\",&d[i]);\n    qsort(0,m-1);\n    for(int i=0;i<q;i++)\n    { scanf(\"%d%d\",&c,&n);\n      if(c==1)printf(\"%d\\n\",d[n-1]);\n      else{m++;d[m-1]=n;qsort();}\n    }\n}\nint main()\n{\n    work();\n    return 0;\n}\n```\n\n------------\n\n\u8c01\u53d1\u4e86\u8fd9\u4e2a\u9898\u89e3\u8c01\u4f5c\u6b7b\u3002\u56e0\u4e3a\n\n# \u53ea\u670960\u5206\uff0c\u5269\u4e0b\u7684TLE\u6389\u4e86\u2026\u2026\n\n\u56e0\u4e3a\u5feb\u6392\u5728\u90e8\u5206\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd8\u4e0d\u5982\u6539\u8fdb\u7684\u5192\u6ce1\u2026\u2026\n\n\u601d\u8def\uff1a\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8e\u524d\u9762\u5c31\u4ea4\u6362\uff0c\u5927\u4e8e\u524d\u9762\u5c31\u8df3\u51fa\n\n\u518d\u8d34\u4ee3\u7801\n\n------------\n```\n#include<cstdio>\n#include<iostream>\nint m,q,c,d[130001],n;\nvoid sort()\n{\n    for(int i=m-1;i>0;i--)\n      if(d[i]>d[i-1])\n        std::swap(d[i],d[i-1]);//\u540c\u4e0a\n      else return;\n} \nvoid qsort(int l,int r)\n{\n    int i=l,j=r,mid=d[(l+r)/2];\n    while(i<=j)\n    { while(d[i]>mid)i++;\n      while(d[j]<mid)j--;\n      if(i<=j){std::swap(d[i],d[j]);i++;j--;} \n    }//            \u540c\u4e0a\n    if(i<r)qsort(i,r);\n    if(l<j)qsort(l,j);\n}\nvoid work()\n{\n    scanf(\"%d%d\",&m,&q);\n    for(int i=0;i<m;i++)scanf(\"%d\",&d[i]);\n    qsort(0,m-1);\n    for(int i=0;i<q;i++)\n    { scanf(\"%d%d\",&c,&n);\n      if(c==1)printf(\"%d\\n\",d[n-1]);\n      else{m++;d[m-1]=n;sort();}\n    }\n}\nint main()\n{\n    work();\n    return 0;\n}\n```\n\n\n------------\n\n\u8fd9\u9898\u89e3\u2026\u2026\u53c8\u662f\u8fc7\u4e0d\u4e86\u7684\uff0c90\u5206\u2026\u2026\n\n\u6240\u4ee5\uff0c\n### \u8981\u5f00O2\u4f18\u5316\uff01\n## \u8981\u5f00O2\u4f18\u5316\uff01\n# \u8981\u5f00O2\u4f18\u5316\uff01\n\u8fd9\u6837\u624d\u80fd100\u5206\u554a\uff01\n\n\u672c\u9898\u89e3\u4e13\u95e8\u9632\u6284\u88ad\u2026\u2026\u6c42\u7ba1\u7406\u5458\u7ed9\u8fc7\uff01",
        "postTime": 1537195594,
        "uid": 118040,
        "name": "\u4ec0\u4e48\u53eb\u4e2d\u4e8c\u5440",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6ca1\u6709splay\u600e\u4e48\u80fd\u884c\u5462\n\u770b\u5230\u4e00\u5927\u5806\u5199\u66b4\u529b\u7684\uff0c\u5982\u679c\u6570\u636e\u52a0\u5f3a\u4e0d\u4e45\u8fc7\u4e0d\u4e86\u4e86\u4e48\n\u867d\u7136splay\u4e5f\u4e0d\u7b97\u5feb\n\u600e\u4e48\u4e5f\u7b97\u4e2a\u6b63\u7ecf\u5199\u6cd5\n\u64cd\u4f5c\u8fd8\u662f\u5f88\u5c11\u7684\n\u63d2\u5165\uff0c\u67e5rank\u4e24\u4e2a\u64cd\u4f5c\u5c31\u597d\u4e86\n\u6211\u5199\u7684\u8fd8\u662f\u6bd4\u8f83\u4e11\u7684\uff0c\u800c\u4e14\u6211\u8fd9splay\u6570\u662f\u53cd\u7740\u5efa\u7684\uff08\u8c01\u8ba9\u8fd9\u9898\u662f\u4ece\u5927\u5230\u5c0f\u7684\uff09\n\u4e0b\u9762\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\nint n,m,rt,cnt,v[110001],size[110001],f[110001],ch[110001][2];\nvoid update(int x)\n{\n\tsize[x]=size[ch[x][0]]+size[ch[x][1]]+1;\n}\nvoid move(int x,int &k)\n{\n\tint tmp=ch[f[x]][1]==x,fa=f[x],faa=f[fa];\n\tif(fa==k)k=x;\n\telse ch[faa][ch[faa][1]==fa]=x;\n\tch[fa][tmp]=ch[x][tmp^1];\n\tf[ch[x][tmp^1]]=fa;\n\tch[x][tmp^1]=fa;\n\tf[fa]=x;\n\tf[x]=faa;\n\tupdate(fa),update(x);\n}\nvoid splay(int x,int &k)\n{\n\twhile(x!=k)\n\t\t{\n\t\t\tint y=f[x],z=f[y];\n\t\t\tif(y!=k)\n\t\t\t\t{\n\t\t\t\t\tif(ch[z][0]==y&&ch[y][0]==x)move(y,k);\n\t\t\t\t\telse move(x,k);\n\t\t\t\t}\n\t\t\tmove(x,k);\n\t\t}\n}\nvoid ins(int x)\n{\n\tif(!rt)\n\t\t{\n\t\t\trt=++cnt;\n\t\t\tv[cnt]=x;\n\t\t\tsize[cnt]=1;\n\t\t\treturn ;\n\t\t}\n\tint now=rt;\n\twhile(1)\n\t\t{\n\t\t\tif(v[now]>x)\n\t\t\t\t{\n\t\t\t\t\tif(!ch[now][1])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tf[++cnt]=now;\n\t\t\t\t\t\t\tch[now][1]=cnt;\n\t\t\t\t\t\t\tsize[cnt]=1;\n\t\t\t\t\t\t\tv[cnt]=x;\n\t\t\t\t\t\t\tupdate(cnt),update(now);\n\t\t\t\t\t\t\tsplay(cnt,rt);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\telse now=ch[now][1];\n\t\t\t\t}\n\t\t\telse \n\t\t\t\t{\n\t\t\t\t\tif(!ch[now][0])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tf[++cnt]=now;\n\t\t\t\t\t\t\tch[now][0]=cnt;\n\t\t\t\t\t\t\tsize[cnt]=1;\n\t\t\t\t\t\t\tv[cnt]=x;\n\t\t\t\t\t\t\tupdate(cnt),update(now);\n\t\t\t\t\t\t\tsplay(cnt,rt);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\telse now=ch[now][0];\n\t\t\t\t}\n\t\t}\n}\nint find(int x,int k)\n{\n\tif(x==size[ch[k][0]]+1)return v[k];\n\tif(x<=size[ch[k][0]])return find(x,ch[k][0]);\n\treturn find(x-size[ch[k][0]]-1,ch[k][1]);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,x;i<=n;i++)\n\t\tscanf(\"%d\",&x),ins(x);\n\tfor(int i=1,x,y;i<=m;i++)\n\t\t{\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tif(x==1)printf(\"%d\\n\",find(y,rt));\n\t\t\telse ins(y);\n\t\t}\n}\n```",
        "postTime": 1523451486,
        "uid": 49834,
        "name": "lichenxi",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    },
    {
        "content": "Tags: \u6a21\u62df,\u601d\u7ef4,\u4e8c\u5206\n\n\n\u6233\u7740\u94fe\u63a5\u98df\u7528=>    <www.cnblogs.com/tonylim/p/6849927.html>\n\n\n\n## **Pre**\n\n\n\u597d\u628a\uff0c\u8fd9\u9898\u5176\u5b9e\u662fzyf\u5c0f\u76c6\u53cb\u53eb\u6211\u53bb\u505a\u7684\uff0c\u4e00\u5f00\u59cb\u60f3\u7528\u6570\u7ec4next\u6a21\u62df\u94fe\u8868\uff0c\u7ed3\u679c\u6253\u4e86\u4e2a\u9519\u8bef\u767e\u51fa\u7684\u7248\u672c\u4ea4\u4e86\u4e0a\u53bb\uff0c\n\n\u7136\u540e\u5c31WA+TLE\u4e86\u7136\u540e\u731b\u7136\u610f\u8bc6\u5230\u8fd9\u9898\u76f4\u63a5\u6a21\u62df\u94fe\u8868\u7684\u65f6\u590d\u8d85\u9ad8\n\n\n\u6240\u4ee5\u5f00\u59cb\u60f3\u7528\u6811\u72b6\u6570\u7ec4\u6765\u8bb0\u5f55\uff0c\u7136\u540e\u5c31\u6002\u4e86\uff0c\u5f00\u59cb\u5bfb\u627e\u5176\u4ed6\u65b9\u6cd5\u2026\u2026\n\n\n\u66b4\u529bqsort\u4e00\u904d\uff0c\u7136\u540e\u6bcf\u6b21\u52a0\u5165\u540e\u518dqsort = 60 points\n\n\nfor\u4e00\u904d\u5c1d\u8bd5\u627e\u7b2c\u4e00\u6bd4\u4ed6\u5c0f\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u63d2\u5165\u5230\u5b83\u524d\u9762 \uff0c\u7136\u540e\u5e73\u79fb\u6570\u7ec4= 80 points\n\n\n \n## **Solution**\n\n\n\n**// \u6ce8\u610f\uff1a\u611f\u89c9\u8fd9\u4f3c\u4e4e\u4e0d\u662f\u6b63\u89e3qwq**\n\n\u4e8e\u662f\u8fdb\u5165\u6b63\u9898\n\n\n\u9996\u5148\u65e2\u7136\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u63d2\u5165\u52a0\u5e73\u79fb\u6570\u7ec4\uff0c\u65e2\u7136\u53ef\u4ee5\u5f80\u53f3\u5e73\u79fb\uff0c\u4e3a\u5565\u4e0d\u80fd\u5f80\u5de6\u5462\uff1f\n\n\n**\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u5e73\u79fb\u65f6\u52a0\u4e2a\u4f18\u5316\u5224\u65ad\u5411\u5de6\u5e73\u79fb\u65b9\u4fbf\u8fd8\u662f\u5411\u53f3\u5e73\u79fb\u65b9\u4fbf**\n\n\n**------------ubuntu\u4e0a\u7684gdb\u574f\u4e86\uff0c\u4e8e\u662f\u53ea\u80fd\u7528write\u6765debug .... \u3010\u6b32\u54ed\u65e0\u6cea\u3011**\n\n\n\u597d,\u5904\u7406\u5b8c\u540e\u5566\uff0c\u8fd8\u662f80 points \uff1f\n\n\n\n\u4e8e\u662f\u4e4e\uff0c\u673a\u667a\u7684\u4f60\u60f3\u5230\u4e86\u4e8c\u5206\n\n\u6ca1\u9519\u518d\u52a0\u4e0a\u4e8c\u5206\u627e\u7b2c\u4e00\u6bd4\u4ed6\u5c0f\u7684 \u5c31AC\u5566\n\n \n\u539f\u6765\u8fd9\u4e48\u6c34\u3002\u3002\u3002\n\n\n\nCodes:\n\n\n\n\n\n   \n\n\n\n\n\n\n```cpp\nprogram wonder;\nvar\n  n,q,i,c,x,left,right,aa,bb:longint;\n  a:array[-110000..110000] of longint;\nprocedure qsort(l,r:longint);  //\u4ece\u5927\u5230\u5c0fqsort\nvar i,j,m,x:longint;\nbegin\n    i:=l;  j:=r;  m:=a[(l+r) div 2];\n    repeat\n    while a[i]>m do inc(i);\n    while a[j]<m do dec(j);\n    if i<=j then begin\n                  x:=a[i];a[i]:=a[j];a[j]:=x;\n                  inc(i);dec(j);\n                end;\n    until i>j;\n    if i<r then qsort(i,r);\n    if j>l then qsort(l,j);\nend;\nprocedure add;\nvar\n   ii,jj,m:longint;\nbegin\n  ii:=left;  jj:=right;\n  while ii<jj do\n    begin\n      m:=ii+(jj-ii) div 2;\n      if a[m]>x then ii:=m+1\n        else jj:=m-1;\n    end;                    //\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u6bd4\u4ed6\u5c0f\u7684\n  for ii:=ii to right do    //insert\n   if x>a[ii] then\n    begin\n      bb:=n-ii+1;          //bb\u4e3a\u53f3\u79fb\u6570\u7ec4\u7684\u82b1\u8d39\n      aa:=n-bb;            //aa\u4e3a\u5de6\u79fb\u6570\u7ec4\u7684\u82b1\u8d39\n      inc(n);              //n\u4e3a\u5143\u7d20\u4e2a\u6570                          \n      if bb<aa then begin\n                      inc(right); \n                      for jj:= right downto ii+1 do a[jj]:=a[jj-1];\n                      a[ii]:=x;\n                    end\n      else  begin\n               dec(left);\n               for jj:= left to ii-2 do a[jj]:=a[jj+1];\n               a[ii-1]:=x;\n             end;\n       break;\n    end;\nend;\nbegin\n  readln(n,q);\n  for i:= 1 to n do\n    read(a[i]);\n  qsort(1,n);\n  left:=1;  right:=n;\n  for i:= 1 to q do\n  begin\n   readln(c,x);\n    if c=1 then writeln(a[left+x-1])  \n      else add;              \n  end;\nend.\n\n```",
        "postTime": 1494673658,
        "uid": 19015,
        "name": "bobble",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2343 \u3010\u5b9d\u77f3\u7ba1\u7406\u7cfb\u7edf\u3011"
    }
]