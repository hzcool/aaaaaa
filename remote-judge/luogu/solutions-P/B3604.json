[
    {
        "content": "# B3604 [\u56fe\u8bba\u4e0e\u4ee3\u6570\u7ed3\u6784 302] \u6700\u77ed\u6811\u95ee\u9898_2\n\n\u8fd9\u9053\u9898\u662f\u4e00\u9053\u88f8\u7684\u6c42**\u6700\u5c0f\u751f\u6210\u6811**\uff0c\u96be\u5ea6\u666e\u53ca\u2014\u3002\n\n\u7b97\u6cd5\uff1a**Kruskal**\n\n**Kruskal** \u662f\u4e00\u79cd\u8d2a\u5fc3\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\uff0c~~\u975e\u5e38de\u597d\u7528~~\u3002\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1a$1 \\le n \\le 100000,1 \\le m \\le 300000$ ,\u8fb9\u6743\u5747\u662f $[0,10^9]$ \u4e2d\u7684\u6574\u6570\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7528\u5230 long long \u7c7b\u578b\u5b58\u50a8\u7b54\u6848\u3002\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u5f88\u8f7b\u677e\u7684\u901a\u8fc7\u5566\u3002\n\n _**My Code\uff1a**_ \n\n```cpp\n#include<cstdio>\n#include<algorithm> //sort\u5934\u6587\u4ef6\n\nusing namespace std;\n\n#define int long long //\u6ce8\u610flong long\uff0c\u6211\u5728\u8fd9\u91cc\u88ab\u5361\u4e862\u6b21\n\nint n,m,fa[300005],ans;\nstruct node{\n\tint x,y,z;\n}h[300005]; //\u7ed3\u6784\u4f53\u5b58\u56fe\n\nbool operator < (node x,node y){\n\treturn x.z<y.z;\n} //\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u8ddf\u624b\u5199\u4e00\u4e2acmp\u6ca1\u4ec0\u4e48\u533a\u522b\n\nint get(int x){\n\tif(x==fa[x])return x;\n\treturn fa[x]=get(fa[x]);\n} //\u5e76\u67e5\u96c6\n\nvoid Kruskal(){\n\tsort(h+1,h+m+1);\n\tfor(int i=1;i<=n;i++)fa[i]=i;\n\tfor(int i=1;i<=m;i++){\n\t\tint x=get(h[i].x),y=get(h[i].y);\n\t\tif(x==y)continue;\n\t\tfa[x]=y;\n\t\tans+=h[i].z;\n\t}\n} //\u8d2a\u5fc3\u6cd5\u6c42\u6700\u5c0f\u751f\u6210\u6811\n\nsigned main(){\n\tscanf(\"%lld %lld\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%lld %lld %lld\",&h[i].x,&h[i].y,&h[i].z); //\u5b58\u56fe\n\tKruskal();\n\tprintf(\"%lld\",ans);\n\treturn 0; //\u5b8c\u7f8e\u7ed3\u675fqwq\n}\n```\n\n\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u671b\u7ba1\u7406\u5458\u5927\u5927\u901a\u8fc7\u3002",
        "postTime": 1627528505,
        "uid": 420692,
        "name": "Leonid",
        "ccfLevel": 0,
        "title": "B3604 [\u56fe\u8bba\u4e0e\u4ee3\u6570\u7ed3\u6784 302] \u6700\u77ed\u6811\u95ee\u9898_2 \u9898\u89e3"
    },
    {
        "content": "\u6b64\u9898\u5176\u5b9e\u4e0e\u201c\u6700\u77ed\u6811\u95ee\u9898_1\u201d \u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\u3002\uff08\u9664\u4e86\u6570\u636e\u8303\u56f4\uff09\n\n\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5e9e\u5927\uff1a$1\u2264n\u2264100000$\uff0c$1\u2264m\u2264300000$\n\n\u800c\u9762\u5bf9\u8fd9\u4e48\u5e9e\u5927\u7684\u6570\u636e\uff0c\u5f53\u7136\u662f\u8981\u7528\u901f\u5ea6\u8f83\u5feb\u7684 Kruskal \u7b97\u6cd5\u4e86\u3002\n\n### Kruskal \u7b97\u6cd5\u6c42\u6700\u5c0f\u751f\u6210\u6811\n\n![](https://cdn.luogu.com.cn/upload/pic/28091.png)\n\n\uff08\u6765\u6e90\u4e8e\u7f51\u7edc\uff0c\u4fb5\u79c1\u5220\uff09\n\n\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0b Kruskal \u7b97\u6cd5\u3002\n\nKruskal\u7684\u65b9\u6cd5\u5341\u5206\u660e\u4e86\uff0c\u7b97\u6cd5\u8fc7\u7a0b\u4e2d\u8981\u8fd0\u7528\u5230 [\u5e76\u67e5\u96c6](https://www.luogu.com.cn/problem/P3367) \u4e0d\u77e5\u9053\u7684\u540c\u5b66\u53ef\u4ee5\u70b9\u8fdb\u8fd9\u4e2a\u94fe\u63a5\u770b\u4e00\u4e0b\u76f8\u5173\u7684\u4f8b\u9898\u3002\n\n\u6211\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u4e2a\u7b97\u6cd5\u6bd4 Prim \u7b97\u6cd5\u66f4\u52a0\u5bb9\u6613\u61c2\u4e00\u4e9b\uff0c\u5c31\u662f\u5c06\u6240\u6709\u56fe\u4e4b\u95f4\u7684\u8fb9\u6743\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u5c0f\u5230\u5927\u7684\u4e00\u4e2a\u4e00\u4e2a\u8fde\u3002\n\n\u4f1a\u4e0d\u4f1a\u4f60\u8ba4\u4e3a\u8fd9\u6837\u5c31\u5b8c\u4e86\uff1f\u4e0d\uff0c\u8fd8\u8981**\u5224\u73af**\u3002\u56e0\u4e3a\u8981\u6784\u9020\u7684\u662f\u6700\u5c0f\u751f\u6210**\u6811**\uff0c\u4e0d\u80fd\u51fa\u73b0\u73af\u3002\u5982\u679c\u51fa\u73b0\u4e86\u600e\u4e48\u529e\u5462\uff1f\u7b80\u5355\uff0c\u820d\u53bb\u540e\u7ee7\u7eed\u627e\u5c31\u884c\u4e86\uff0c\u76f4\u5230\u8fde\u6210\u4e86\u603b\u70b9\u6570\u51cf\u4e00\u7684\u70b9\u5c31\u505c\u6b62\u3002\n\n\u8fb9\u6743\u6392\u5e8f\u4ece\u5c0f\u53d6\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u5224\u73af\u5c31\u9700\u8981\u7528\u5e76\u67e5\u96c6\u7b97\u6cd5\u6765\u5224\u4e86\u3002\u5047\u8bbe\u5bf9\u4e8e\u70b9 $x$ \u4e0e\u70b9 $y$\uff0c\u5229\u7528\u5e76\u67e5\u96c6\u67e5\u627e\u8fd9\u4e24\u4e2a\u70b9\u7684\u7956\u5148\u662f\u5426\u76f8\u540c\u3002\u5982\u679c\u76f8\u540c\u4fbf\u6709\u73af\uff0c\u4e0d\u76f8\u540c\u5219\u65e0\u73af\u3002\n\nKruskal \u7b97\u6cd5\u7684\u57fa\u672c\u539f\u7406\u4e5f\u5df2\u7ecf\u660e\u4e86\uff0c\u4e0a\u4ee3\u7801\uff01\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define INF INT_MAX\nusing namespace std;\nconst int N = 100005;\nconst int M = 300005;\nint ans = 0, sum = 0;\nint n, m;\nint fa[N]; //\u7528\u6765\u5b58\u50a8\u8fd9\u4e2a\u70b9\u7684\u7236\u8282\u70b9 \nstruct node{\n\tint from, to, value;\n}edge[M << 1]; \nbool cmp(node x, node y){ //\u5b9a\u4e49\u6392\u5e8f\u51fd\u6570 \n\treturn x.value < y.value;\n}\nint find(int x){ //\u5e76\u67e5\u96c6\uff0c\u627e\u5230x\u7684\u6839\u8282\u70b9 \n\tif(fa[x] != x) return fa[x] = find(fa[x]);\n\treturn x;\n}\nvoid Kruskal(){ //Kruskal \n\tint tot = 0;\n\tsort(edge + 1, edge + 1 + m, cmp); //\u5c06\u8fb9\u6743\u8fdb\u884c\u6392\u5e8f \n\tfor(int i = 1; i <= m; i++){\n\t\tint ft = find(edge[i].to);\n\t\tint ff = find(edge[i].from); //\u5206\u522b\u627e\u5230\u8fd9\u4e24\u4e2a\u70b9\u7684\u6839\u8282\u70b9 \n\t\tif(ft != ff){ //\u5982\u679c\u4e0d\u76f8\u540c\u8bc1\u660e\u76f8\u8fde\u4e0d\u4f1a\u6709\u73af \n\t\t\ttot++; //\u8ba1\u6570\u5668\u52a0\u4e00 \n\t\t\tfa[ft] = ff; //\u5c06\u8fd9\u4e24\u4e2a\u70b9\u5408\u5e76 \n\t\t\tans += edge[i].value; //\u7b54\u6848\u52a0\u4e0a\u8fd9\u4e2a\u70b9\u7684\u503c \n\t\t}\n\t\tif(tot == n) break; //\u5982\u679c\u8fdb\u884c\u4e86n\u6b21\u5408\u5e76\uff0c\u90a3\u4e48\u9000\u51fa\u5faa\u73af\uff0c\u5df2\u7ecf\u6784\u9020\u51fa\u6700\u5c0f\u751f\u6210\u6811\u4e86\u3002 \n\t}\n}\nint main(){\n    cin >> n >> m;\n    for(int i = 1; i <= n; i++) fa[i] = i; //\u6700\u5f00\u59cb\u8fd9\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u5c31\u662f\u5b83\u81ea\u5df1 \n    for(int i = 1; i <= m; i++){\n    \tcin >> edge[i].from >> edge[i].to >> edge[i].value; \n\t} \n\tKruskal(); //\u8fdb\u884cKruskal\u7b97\u6cd5\u6c42\u89e3 \n\tcout << ans << endl; //\u8f93\u51fa\u7b54\u6848 \n\treturn 0;\n}\n//B3604 by szkzyc\n\n```",
        "postTime": 1628495866,
        "uid": 402269,
        "name": "szkzyc",
        "ccfLevel": 5,
        "title": "B3604[\u6700\u77ed\u6811\u95ee\u9898_2]\u9898\u89e3"
    },
    {
        "content": "## \u9898\u89e3\u7d22\u5f15\n1. **\u9898\u76ee\u5927\u610f**\n2. **Solution**\n3. **AC code**\n4. **\u7c7b\u4f3c\u9898\u578b**\n\n\u4ee3\u7801\u7c7b\u578b\uff1a C++\uff08cpp\uff09\n\n\u662f\u5426\u5438\u6c27\uff1a\u5426\n\n\u4e0d\u538b\u884c\u4ee3\u7801\u957f\u5ea6\uff1a41\n\n------------\n\n\u6b64\u9898\u4e3a [B3603](https://www.luogu.com.cn/problem/B3601) \u7684\u52a0\u5f3a\u7248\n\n\u672c\u9898\u89e3\u4f7f\u7528 Kruskal \u7b97\u6cd5\uff0c\u4e0d\u4e86\u89e3\u7684\u53ef\u4ee5 [\u6233\u8fd9\u91cc](https://www.luogu.com.cn/blog/wugu-2333/wu-gu-bo-ke-suo-yin) \uff0c\u5bfb\u627e\u6700\u5c0f\u751f\u6210\u6811\u6709\u5173\u77e5\u8bc6\u3002\n\n## \u9898\u76ee\u5927\u610f\n\u9898\u9762\uff1a [<\u4f20\u9001\u95e8>](https://www.luogu.com.cn/problem/B3604)\n\n\u9898\u610f\uff1a\u7ed9\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684 **\u65e0\u5411\u56fe** \uff0c\u6c42\u8fd9\u4e2a\u56fe\u4e0a\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u548c\uff08\u5e76\u4e0d\u77e5\u9053\u9898\u9762\u4e2d\u7684\u201c\u6700\u5c0f\u6811\u201d\u7684\u8bf4\u6cd5\u662f\u54ea\u6765\u7684\u2026\u2026\uff09\u3002\n\n~~\u672f\u8bed\u7406\u89e3\uff1a\u6700\u5c0f\u751f\u6210\u6811\u677f\u5b50\u9898\u3002~~\n\n\u4e0e\u5f31\u5316\u7248\u4e0d\u540c\uff0c\u8fd9\u4e2a\u9898\u7684\u6570\u636e\u8303\u56f4\u4ece $1\\le n\\le 2\\times 10^3,1\\le m\\le 3\\times 10^3$ \u53d8\u6210\u4e86 $1\\le n\\le 10^5,1\\le m\\le 3\\times 10^5$ \n\n\u4e0d\u8fc7\u95ee\u9898\u4e0d\u5927\uff0c\u6211\u4eec Kruskal \u9488\u5bf9\u7684\u662f\u6240\u6709\u7a00\u758f\u56fe\uff0c\u50cf\u8fd9\u79cd\u6570\u636e\u8303\u56f4\u8fd8\u662f\u80fd\u8f7b\u677e\u8fc7\u53bb\u7684\n\n## Solution\n\n### Kruskal\n\n#### \u4e00\u3001\u4e2d\u5fc3\u601d\u60f3\n\n------------\n\n\u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u4ece\u5927\u5230\u5c0f\u3002\n\n\u6bcf\u6761\u8fb9\u90fd\u8dd1\u4e00\u904d\uff08\u5f53\u7136\uff0c\u5982\u679c\u5f53\u524d\u5df2\u7ecf\u6709\u4e86 $n-1$ \u6761\u8fb9\u90a3\u4e48\u5c31\u8df3\u51fa\uff09\u3002\n\n\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u9996\u5148\u5224\u65ad\u5176\u8fde\u7740\u7684\u4e24\u4e2a\u70b9\u4e0e\u6b63\u5728\u6784\u6210\u7684\u6700\u5c0f\u751f\u6210\u6811\u662f\u5426\u5df2\u7ecf\u8fde\u901a\uff0c\u5982\u679c\u4e24\u4e2a\u90fd\u5df2\u7ecf\u8fde\u901a\u5219\u8df3\u8fc7\u6b64\u8fb9\uff0c\u5426\u5219\u4f7f\u6700\u5c0f\u751f\u6210\u6811\u8fde\u901a\u6b64\u8fb9\u3002\n\n------------\n\n#### \u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\n\n1. \u6392\u5e8f\u90e8\u5206\u4ea4\u7ed9 `sort` \u5373\u53ef\uff0c\u5199\u4e2a\u81ea\u5b9a\u4e49\u51fd\u6570 `cmp` \u6765\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u6392\u5e8f\u65b9\u5f0f\u3002\n\n```cpp\nbool cmp(Edge a,Edge b){return a.w<b.w;}\n```\n\n\u8fb9\u6743\u662f **\u5411\u5c0f\u6392\u5e8f** \uff01\n\n2. \u94fe\u5f0f\u524d\u5411\u661f\u90e8\u5206\n\n\u56e0\u4e3a Kruskal \u4e0d\u9700\u8981\u5b58\u90bb\u8fb9\uff0c\u4f46\u9700\u8981\u5b58\u8d77\u59cb\u70b9\uff0c\u4e8e\u662f\u94fe\u5f0f\u524d\u5411\u661f\u6539\u6210\uff1a\n\n```cpp\nstruct Edge{\n    int from,to,w;\n}edge[MAXM];\n```\n\n3. Kruskal \u4e2d\u7684\u5224\u65ad\u4e00\u6761\u8fb9\u4e24\u4e2a\u7aef\u70b9\u662f\u5426 **\u90fd** \u88ab\u6700\u5c0f\u751f\u6210\u6811\u8fde\u901a\u90e8\u5206\n\n\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u6210\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u7684\u95ee\u9898\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u5b9e\u73b0\u3002\n\n```cpp\nint findf(int u){return f[u]==u?u:f[u]=findf(f[u]);}\n```\n\n\u81f3\u4e8e\u5408\u5e76\uff0c\u6211\u4eec\u76f4\u63a5\u624b\u5199\uff08\u5728 Kruskal \u4e2d\u624b\u5199\uff09\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u80fd\u8fd8\u8981\u8fdb\u884c\u5176\u5b83\u64cd\u4f5c\uff08\u8fd9\u9053\u9898\u7684\u7279\u6b8a\u64cd\u4f5c\u662f\u6c42\u548c\uff09\n\n4. Kruskal \u90e8\u5206\uff08\u633a\u7b80\u5355\u7684\uff0c\u81ea\u5df1\u770b\u770b\u5c31\u4f1a\u4e86\uff09\n\n```cpp\nvoid kruskal(){\n    sort(edge+1,edge+m+1,cmp);\n    int num=0;\n    for(int i=1;i<=m;i++){\n        if(num==n-1)break;\n        int from=edge[i].from,to=edge[i].to,w=edge[i].w;\n        int from_father=findf(from),to_father=findf(to);\n        if(from_father==to_father)continue;\n        f[from_father]=to_father;\n        ans+=w;\n        num++;\n    }\n}\n```\n\n5. \u5efa\u8fb9\u90e8\u5206\uff08\u7ec6\u8282\uff09\n\nQ\uff1a\u4e3a\u5565\u5efa\u5355\u5411\u8fb9\uff1f\u9898\u76ee\u4e2d\u4e0d\u662f\u8bf4\u5efa\u65e0\u5411\u8fb9\u5417\uff1f\n\nA\uff1a\u7531\u4e8e Kruskal \u6392\u5e8f\u7684\u95ee\u9898\uff0c\u7531\u4e8e\u65e0\u5411\u8fb9\u5728\u94fe\u5f0f\u524d\u5411\u661f\u4e2d\u662f\u4ee5\u4e24\u6761\u6709\u5411\u8fb9\u7684\u5f62\u5f0f\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u540c\u4e00\u6761\u8fb9\u5728 Kruskal \u7684\u6392\u5e8f\u4e2d\u53ef\u80fd\u4f1a\u540c\u65f6\u6392\u5728\u524d\u9762\uff08\u56e0\u4e3a\u5728\u94fe\u5f0f\u524d\u5411\u661f\u4e2d\u65e0\u5411\u8fb9\u6240\u5316\u6210\u7684\u4e24\u6761\u6709\u5411\u8fb9\u7684\u8fb9\u6743\u662f\u76f8\u540c\u7684\uff09\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e86\u539f\u672c\u9009 $n-1$ \u6761\u8fb9\uff0c\u5374\u9009\u4e86\u597d\u51e0\u6761\u4e00\u6837\u7684\u8fb9\uff0c\u662f\u80af\u5b9a\u9519\u8bef\u7684\u3002\n\nQ\uff1a\u5199\u4e2a\u53bb\u91cd\u51fd\u6570\u4e0d\u884c\u5417\uff1f\n\nA\uff1a\u8fd9\u4e2a\u95ee\u9898\u6211\u4e5f\u60f3\u8fc7\uff0c\u53ef\u6211\u6d4b\u8bd5\u7684\u65f6\u5019\u53d1\u73b0\u7ed3\u6784\u4f53\u597d\u50cf\u4e0d\u80fd\u53bb\u91cd\uff08\u53ef\u80fd\u6211\u592a\u5f31\u4e86\uff09\u3002\u5c31\u7b97\u80fd\u53bb\u91cd\uff0c\u4f60\u60f3\u60f3\uff0c\u4f60\u524d\u9762\u521a\u91cd\u590d\u52a0\u8fb9\uff0c\u540e\u9762\u63a5\u7740\u53bb\u91cd\uff0c\u8fd9\u4e0d\u662f\u591a\u6b64\u4e00\u4e3e\u5417\uff1f\n\n## AC code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<stack>\nusing namespace std;\nconst int MAXM=6e5+9,MAXN=2e5+9;\nstruct Edge{\n    int from,to,w;\n}edge[MAXM];\nint n,m;\nint num_edge=0,f[MAXN];\nvoid add_edge(int from,int to,int w){\n\tedge[++num_edge]=(Edge){from,to,w};\n}long long ans=0;\nbool cmp(Edge a,Edge b){return a.w<b.w;}\nint findf(int u){return f[u]==u?u:f[u]=findf(f[u]);}\nvoid kruskal(){\n    sort(edge+1,edge+m+1,cmp);\n    int num=0;\n    for(int i=1;i<=m;i++){\n        if(num==n-1)break;\n        int from=edge[i].from,to=edge[i].to,w=edge[i].w;\n        int from_father=findf(from),to_father=findf(to);\n        if(from_father==to_father)continue;\n        f[from_father]=to_father;\n        ans+=w;\n        num++;\n    }\n}\nint main(){\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i=1;i<=n;i++)f[i]=i;\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v,w;\n\t\tscanf(\"%d %d %d\",&u,&v,&w);\n\t\tadd_edge(u,v,w);\n\t}kruskal();\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\nAC \u8bb0\u5f55[<\u4f20\u9001\u95e8>](https://www.luogu.com.cn/record/54278201)\n\n## \u7c7b\u4f3c\u9898\u578b\n\n[P1396 \u8425\u6551](https://www.luogu.com.cn/problem/P1396)\n\n~~\u6700\u5c0f\u751f\u6210\u6811\u5b66\u4f1a\u4e86\uff0c\u6765\u5b66[\u6b21\u5c0f\u751f\u6210\u6811](https://www.luogu.com.cn/blog/wugu-2333/ci-xiao-sheng-cheng-shu)~~",
        "postTime": 1627466565,
        "uid": 359422,
        "name": "\u65e0\u5495_",
        "ccfLevel": 4,
        "title": "B3604 [\u56fe\u8bba\u4e0e\u4ee3\u6570\u7ed3\u6784 302] \u6700\u77ed\u6811\u95ee\u9898_2 \u9898\u89e3"
    },
    {
        "content": "\u672c\u4f53\u4e0e B3603 \u9898\u9762\u76f8\u540c\uff0c\u53ea\u662f\u9898\u76ee\u6570\u636e\u4e0d\u540c\u3002~~\u4f46\u8fd9\u5e76\u4e0d\u4f1a\u5f71\u54cd\u6211\u4eec\u4f7f\u7528\u4e0a\u4e00\u9898\u7684\u4ee3\u7801\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff08\u56e0\u4e3a\u6570\u636e\u8fd8\u662f\u592a\u6c34\uff09\u3002~~\n\n### \u9898\u610f\uff1a\n\u9898\u76ee\u8981\u6c42\u51fa\u5e26\u6743\u65e0\u5411\u56fe\u4e2d\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u6700\u5c0f\u751f\u6210\u6811\u4e00\u822c\u4f7f\u7528 Kruskal \u6216\u8005 Prim \u8fd9\u4e24\u79cd\u7b97\u6cd5\u6765\u6c42\u89e3\u3002Kruskal \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(m \\log m)$\uff0cPrim \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e00\u822c\u4e3a $O(n^2)$\u3002\u5bf9\u4e8e\u6b64\u9898\u7684\u6570\u636e\u8303\u56f4 $1\u2264n\u2264100000$\uff0c$1\u2264m\u2264300000$ \u663e\u7136\u4f7f\u7528 Kruskal \u66f4\u5feb\u3002\n\n### \u601d\u8def:\n1. \u76f4\u63a5\u4f7f\u7528\u6734\u7d20\u7684 Kruskal \u5373\u53ef\uff0c\u65e0\u9700\u4efb\u4f55\u4f18\u5316\u3002\n2. \u7531\u4e8e\u6570\u636e\u8303\u56f4\u8f83\u5927\uff0c\u6240\u4ee5\u9700\u8981\u5f00 long long\u3002\n\n\u5bf9\u4e8e Kruskal \u7b97\u6cd5\u8f83\u4e3a\u8be6\u7ec6\u7684\u8bb2\u89e3\u53ef\u4ee5\u53c2\u89c1\u6211\u7684[\u8fd9\u7bc7\u9898\u89e3](https://www.luogu.com.cn/blog/Kevin-FOS-Blog/solution-b3603)\n\n### \u7a0b\u5e8f\u5982\u4e0b\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>//\u9700\u8981\u4f7f\u7528 sort \u6392\u5e8f\nusing namespace std;\nstruct node{long long x,y,z;}a[300001];//\u7528\u6765\u5b58\u653e\u6bcf\u6761\u8fb9\u7684\u8d77\u70b9x\uff0c\u7ec8\u70b9y\u4ee5\u53ca\u8fb9\u6743z\nlong long n,m,k,ans,father[100001];\nbool cmp(node a,node b){return a.z<b.z;}\nlong long find(long long x){//\u4f7f\u7528\u5e76\u67e5\u96c6\u67e5\u8be2\u7ed3\u70b9\u662f\u5426\u5df2\u7ecf\u52a0\u5165\u751f\u6210\u6811\n    if(father[x]!=x)father[x]=find(father[x]);\n    return father[x];\n}\nint main(){\n    scanf(\"%lld%lld\",&n,&m);\n    for(long long i=1;i<=m;i++)scanf(\"%lld%lld%lld\",&a[i].x,&a[i].y,&a[i].z);\n    for(long long i=1;i<=n;i++)father[i]=i;\n    sort(a+1,a+m+1,cmp);//\u5c06\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n    for(long long i=1;i<=m;i++){\n        long long fx=find(a[i].x),fy=find(a[i].y);\n        if(fx!=fy){//\u5982\u679cx\u7684\u7956\u5148\u4e0d\u7b49\u4e8ey\u7684\u7956\u5148\uff0c\u8bf4\u660ey\u70b9\u6ca1\u6709\u5165\u961f\uff0c\u5c06\u5176\u5165\u961f\n            father[fy]=fx;\n            k++;\n            ans+=a[i].z;\n        }\n        if(k==n-1)break;//\u5f53\u6240\u6709\u7ed3\u70b9\u90fd\u5165\u961f\u540e\uff0c\u7ed3\u675f\u5faa\u73af\n    }\n    printf(\"%lld\\n\",ans);//\u7531\u4e8e\u9898\u76ee\u5df2\u7ecf\u4fdd\u8bc1\u8f93\u5165\u5408\u6cd5\uff0c\u6240\u4ee5\u6211\u4eec\u65e0\u9700\u5224\u65ad\u662f\u5426\u8fde\u901a\n    return 0;\n}\n```\n\n### THE END",
        "postTime": 1627906341,
        "uid": 299883,
        "name": "HYdroKomide",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 B3604"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/B3604)\n\n\u8fd9\u9053\u9898\u5c31\u662f\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff08\u6a21\u677f\u9898\uff09\uff0c\u672c\u9898\u89e3\u4f7f\u7528\u7684\u662f **Kruskal** \u7b97\u6cd5\uff0c[\u5173\u4e8e Kruskal \u7b97\u6cd5](http://data.biancheng.net/view/41.html)\u3002\n\n## \u601d\u8def\n### 1. \u9884\u5148\u5904\u7406\uff1a\u6392\u5e8f\n\u5bf9\u4e8e $u$\u3001$v$ \u548c $w$\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u5b58\u50a8\u8fd9\u4e9b\u4fe1\u606f\uff1a\n\n```cpp\nstruct bi{\n\tll u,v,w;\n}a[300001];\n```\n\n\u7136\u540e\u4f7f\u7528 STL \u4e2d\u7684 ```sort(a+1,a+n+1\uff0ccmp);``` \u51fd\u6570\u8fdb\u884c\u6392\u5e8f\uff1a\n\n```cpp\n//\u2026\u2026\n#include<algorithm>//\u4f7f\u7528sort\u65f6\u8981\u52a0\nusing namespace std; //\u8fd9\u4e5f\u8981\u52a0\u4e0a\n//\u2026\u2026\nbool cmp(const bi &a,const bi &b){return a.w<b.w;}\n//cmp\u6bd4\u8f83\u51fd\u6570\u9700\u8981\u624b\u5199\uff0c\u8fb9\u6743\u5c0f\u7684\u6392\u524d\u9762 \nint main(){\n\t//\u2026\u2026\n\tsort(a+1,a+m+1,cmp);\n\t//\u2026\u2026\n\treturn 0;\n}\n```\n\n### 2. \u8fde\u63a5\u8fb9\n\u9898\u76ee\u8981\u6c42\uff1a\n>\u6ee1\u8db3\u9009\u7528\u8fb9\u7684\u8fb9\u6743\u548c\u6700\u5c0f\n\n\u6240\u4ee5\uff0c$n$ \u4e2a\u70b9\u53ea\u9700\u8981\u8fde\u63a5 $n-1$ \u6761\u8fb9\u5373\u53ef\uff0c\u800c\u4e14**\u4e0d\u80fd\u9020\u6210\u91cd\u8fb9\u548c\u81ea\u73af**\u7684\u73b0\u8c61\uff0c\u6bcf\u6b21\u628a\u4e24\u4e2a**\u5904\u4e8e\u4e0d\u540c\u96c6\u5408**\u7684\u70b9\u8fde\u8d77\u6765\u3002\n\nQ\uff1a\u5982\u4f55\u5728 $1 \\leq n \\leq 10^5$ \u7684\u6570\u636e\u91cf\u4e0b**\u5feb\u901f\u5224\u65ad**\u4e24\u4e2a\u70b9\u662f\u5426\u5904\u4e8e\u540c\u4e00\u96c6\u5408\uff1f\n\nA\uff1a\u4f7f\u7528[\u5e76\u67e5\u96c6](https://zhuanlan.zhihu.com/p/93647900)\uff01\n\n\u6838\u5fc3\u4ee3\u7801\uff1a\n\n```cpp\nfor(int i=1;i<=n;i++) fl[i]=i;\n//\u6bcf\u4e2a\u8282\u70b9\u4e00\u5f00\u59cb\u90fd\u662f\u81ea\u5df1\u7684\u5e2e\u4e3b\nfor(int i=1;i<=m;i++){\t\t\n\tfa=find(a[i].u); fb=find(a[i].v); //\u627e\u201c\u5e2e\u4e3b\u201d \n\tif(fa!=fb){ \n\t\tfl[fa]=fb;\n\t\ts++; cnt+=a[i].w; //\u7edf\u8ba1\u8def\u5f84\u603b\u6570\u548c\u8fb9\u6743\u603b\u548c \n\t}\n\telse continue; //\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\u7684\u65e0\u9700\u518d\u8fde\u8fb9 \n\tif(s==n-1) break; //\u8fde\u901an-1\u6761\u8fb9\uff0c\u7ed3\u675f \n}\n```\n\n\u5b8c\u7ed3~",
        "postTime": 1627479008,
        "uid": 390228,
        "name": "DWT8125",
        "ccfLevel": 0,
        "title": "B3604 \u9898\u89e3"
    },
    {
        "content": "\u5bf9\u4e8e\u6734\u7d20\u7684 Prim \u548c Kruskal \u8fd9\u9053\u9898\u76ee\u90fd\u4f1a\u88ab\u5361\uff0c\u56e0\u6b64\u6211\u4eec\u8003\u8651\u4f18\u5148\u961f\u5217\u4f18\u5316\u7684 Prim \u7b97\u6cd5\u3002\u672c\u6587\u53ea\u8bb2\u89e3 Prim \u7b97\u6cd5\uff0c\u5982\u9700 Kruskal \u7b97\u6cd5\u5185\u5bb9\uff0c\u8bf7\u8bbf\u95ee [\u3010\u666e\u53ca\u3011\u6700\u5c0f\u751f\u6210\u6811\u7b14\u8bb0](https://www.luogu.com.cn/blog/LinearExpectation/easy-MST-note)\u3002\n\n## \u6982\u5ff5\n\n\u6700\u5c0f\u751f\u6210\u6811\u662f\u65e0\u5411\u56fe\u4e2d\u7684\u4e00\u4e2a\u5e38\u89c1\u95ee\u9898\uff0c\u63cf\u8ff0\u5982\u4e0b\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u53ef\u4ee5\u5220\u53bb\u4e00\u4e9b\u8fb9\uff0c\u95ee\u5e94\u8be5\u4fdd\u7559\u54ea\u4e9b\u8fb9\u80fd\u4f7f\u5f97\u56fe\u4f9d\u7136\u8fde\u901a\uff0c\u5e76\u4e14\u8fb9\u6743\u548c\u6700\u5c0f\u3002\n\n\u6211\u4eec\u628a\u8fd9\u4e2a\u751f\u6210\u51fa\u6765\u7684\u6811\uff08\u4e3a\u4ec0\u4e48\u662f\u6811\uff1f\u56e0\u4e3a\u4fdd\u7559 $n-1$ \u6761\u8fb9\u65f6\u6700\u7701\uff0c\u4f46\u51e1\u591a\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u6709\u4e00\u6761\u8fb9\u662f\u591a\u4f59\u7684\uff0c\u4ed6\u5c31\u4e0d\u6ee1\u8db3\u6700\u5c0f\u8fb9\u6743\u548c\u4e86\uff09\u79f0\u4e4b\u4e3a\u6700\u5c0f\u751f\u6210\u6811\uff08$\\small\\bm{Minimal\\ Spanning\\ Tree,MST}$\u3002\n\n## \u601d\u8def\u5f15\u5bfc\n\n\u300a\u7b97\u6cd5\u7ade\u8d5b\u4ece\u5165\u95e8\u5230\u8fdb\u9636\u300b\u4e2d\u7684\u4e00\u6bb5\u8bdd\u7279\u522b\u5177\u6709\u542f\u53d1\u6027\uff1a\n\n> \u56fe\u7684\u4e24\u4e2a\u57fa\u672c\u5143\u7d20\u662f\u70b9\u548c\u8fb9\uff0c\u4e8e\u6b64\u5bf9\u5e94\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u6784\u9020\u6700\u5c0f\u751f\u6210\u6811 $T$\u3002\u8fd9\u4e24\u79cd\u7b97\u6cd5\u90fd\u57fa\u4e8e\u8d2a\u5fc3\u6cd5\uff0c\u56e0\u4e3a MST \u95ee\u9898\u6ee1\u8db3\u8d2a\u5fc3\u6cd5\u7684\u201c\u6700\u4f18\u6027\u5b9a\u7406\u201d\uff0c\u5373\u5168\u5c40\u6700\u4f18\u5305\u542b\u5c40\u90e8\u6700\u4f18\u3002\n\n\u4e24\u79cd\u7b97\u6cd5\u662f $\\rm\\small Prim$ \u548c $\\small\\rm Kruskal$ \u7b97\u6cd5\u3002\u5176\u4e2d $\\rm\\small Prim$ \u7b97\u6cd5\u57fa\u4e8e\u8fd9\u6837\u4e00\u4e2a\u601d\u60f3\uff1a\u201c\u6700\u8fd1\u7684\u90bb\u5c45\uff08\u8282\u70b9\uff09\u4e00\u5b9a\u5728 MST \u4e0a\u3002\u201d\uff0c\u4e8e\u6b64\u76f8\u5bf9\u5730\uff0c$\\rm\\small Kruskal$ \u7684\u57fa\u672c\u601d\u60f3\u662f\u201c\u6700\u77ed\u7684\u8fb9\u4e00\u5b9a\u5728 MST \u4e0a\u201d\u3002\n\n\u4ece\u8fd9\u91cc\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u4e24\u79cd\u622a\u7136\u4e0d\u540c\u7684 MST \u7b97\u6cd5\uff0c\u5f97\u5230\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e00\u6837\u561b\uff1f\u8bf4\u4e0d\u51c6\uff0c\u56e0\u4e3a MST \u5728\u6709\u4e9b\u56fe\uff08\u5f88\u591a\u56fe\uff09\u4e0a\u662f\u4e0d\u552f\u4e00\u7684\uff0c\u4e8e\u662f\u4f60\u4f1a\u5f97\u51fa\u4e24\u4e2a\uff08\u751a\u81f3\u66f4\u591a\uff09\u4e0d\u540c\u7684\uff08\u4f46\u662f\u603b\u8fb9\u6743 $\\sum w$ \u76f8\u540c\u7684\uff09\u7b54\u6848\u3002\u4f46\u662f\u6d1b\u8c37\u7684\u4f8b\u9898\u5c31\u7279\u522b\u826f\u5fc3\uff0c\u53ea\u8ba9\u4f60\u8f93\u51fa\u603b\u8fb9\u6743\uff0c\u4e8e\u662f\u4f60\u53ef\u4ee5\u9009\u62e9\u4f60\u7528\u5f97\u987a\u624b\u7684\u7b97\u6cd5\u3002\n\n## Prim \u666e\u5229\u59c6\n\nPrim \u7b97\u6cd5\u548c Dijkstra \u5f88\u50cf\uff0c\u9996\u5148\u4efb\u610f\u9009\u53d6\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u6839\uff08\u4e0d\u5982\u5c31\u7528 $1$ \u8282\u70b9\u5427\uff09\uff0c\u7136\u540e\u4f9d\u6b21\u5bfb\u627e\u8ddd\u79bb\u4ed6\u6700\u8fd1\u7684\u70b9\uff08\u5c31\u662f Dij \u4e2d\u7684 $d$ \u6570\u7ec4\uff09\uff0c\u6211\u4eec\u53ea\u8981\u4e0d\u505c\u5730\u5bfb\u627e\u8fd9\u6837\u7684\u70b9\u52a0\u5165\u96c6\u5408\u5c31\u884c\u3002\n\n\u5f15\u7528 $\\rm\\small N\\color{red}emlit$ \u7684\u4e00\u53e5\u8bdd\uff1a\n\n> $\\rm\\small Prim$ \u7b97\u6cd5\u4e4b\u6240\u4ee5\u662f\u6b63\u786e\u7684\uff0c\u4e3b\u8981\u57fa\u4e8e\u4e00\u4e2a\u5224\u65ad\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u9876\u70b9 $u$\uff0c\u8fde\u63a5\u5230\u8be5\u9876\u70b9\u7684\u6240\u6709\u8fb9\u4e2d\u7684\u4e00\u6761\u6700\u77ed\u8fb9 $u,u_j$ \u5fc5\u7136\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\uff08\u5373\u4efb\u610f\u4e00\u4e2a\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fde\u901a\u5b50\u56fe\uff0c\u4ece\u5916\u90e8\u8fde\u63a5\u5230\u8be5\u8fde\u901a\u5b50\u56fe\u7684\u6240\u6709\u8fb9\u4e2d\u7684\u4e00\u6761\u6700\u77ed\u8fb9\u5fc5\u7136\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\uff09\u3002\n\n\u5bf9\u4e8e\u5bfb\u627e\u6700\u5c0f\u7684 $d_i$ \u8fd9\u4e00\u6b65\u9aa4\u53ef\u4ee5\u4f18\u5316\uff0c\u4f7f\u5f97\u590d\u6742\u5ea6\u4e3a $O(m\\log n)$\u3002\n\n\u6211\u4eec\u6765\u5177\u4f53\u7814\u7a76\u4e00\u4e0b Prim \u7b97\u6cd5\u3002\u9996\u5148\u5b58\u5728\u4e24\u4e2a\u96c6\u5408 $S,T$\uff0c\u5176\u4e2d\u96c6\u5408 $T$ \u5728\u521d\u59cb\u60c5\u51b5\u4e0b\u662f\u70b9\u96c6\u5168\u96c6\uff0c\u800c $S$ \u5219\u5e94\u8be5\u662f\u7a7a\u96c6\u3002\u6211\u4eec\u7528 $S$ \u6765\u8868\u793a\u4e00\u4e2a\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u70b9\u96c6\u3002\n\n\u6211\u4eec\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u80fd\u8fdb\u5165\u70b9\u96c6\u7684\u6807\u51c6\u662f\u5b83\u548c\u6574\u4e2a\u751f\u6210\u6811\u76f8\u8fde\u7684\u4ee3\u4ef7\u662f\u5426\u6700\u5c0f\u3002\u5b83\u5230\u6240\u6709\u751f\u6210\u6811\u4e2d\u7684\u70b9\u90fd\u4f1a\u6709\u4e00\u6761\u6700\u77ed\u8def\uff0c\u8fd9\u4e9b\u6700\u77ed\u8def\u4e2d\u6700\u77ed\u7684\u90a3\u4e00\u6761\u5c31\u662f\u5b83\u5230\u8fd9\u4e2a\u751f\u6210\u6811\u7684\u4ee3\u4ef7\u3002\n\n\u6bcf\u5f53\u6211\u4eec\u52a0\u5165\u4e86\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u4e0e\u8fd9\u4e2a\u70b9\u76f8\u8fde\u7684\u6240\u6709\u70b9\u5230\u751f\u6210\u6811\u7684\u4ee3\u4ef7\u8fdb\u884c\u4e00\u4e2a\u66f4\u65b0\uff08\u7c7b\u4f3c\u4e8e\u677e\u5f1b\uff09\uff0c\u5982\u679c\u8fd9\u4e00\u6b21\u66f4\u65b0\u4f7f\u5f97\u5b83\u7684\u8ddd\u79bb\u7f29\u5c0f\u4e86\uff0c\u8fd9\u4e2a\u70b9\u5c31\u53ef\u4ee5\u653e\u5728\u51c6\u5907\u5904\u7406\u7684\u680f\u76ee\u4e4b\u4e2d\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\ntypedef pair<int,int>pr;\nint k,n,m,cnt,sum;\nint head[100005],dis[100005];\nbool vis[100005];\nstruct Edge{\n    int v,w,next;\n}e[600005];\nvoid add(int u,int v,int w){//\u90bb\u63a5\u8868\u52a0\u8fb9 \n    e[++k].v=v;e[k].w=w;\n    e[k].next=head[u];\n    head[u]=k;\n}priority_queue<pr,vector<pr>,greater<pr> >q;\nvoid Prim(){\n    dis[1]=0;\n    q.push(make_pair(0,1));\n    while(!q.empty()&&cnt<n){\n        int d=q.top().first;//\u5f53\u524d\u70b9\u8fdb\u5165\u70b9\u96c6\u7684\u4ee3\u4ef7 \n\t\tint u=q.top().second;//\u5f53\u524d\u70b9\u7684\u7f16\u53f7 \n        q.pop();\n        if(vis[u])continue;\n        cnt++;sum+=d;vis[u]=1;//\u7d2f\u52a0\u4e0e\u6807\u8bb0 \n        for(int i=head[u];i!=-1;i=e[i].next)\n            if(e[i].w<dis[e[i].v]){\n            \tdis[e[i].v]=e[i].w;//\u5982\u679c\u677e\u5f1b\u6709\u6548\uff0c\u52a0\u5165\u5f85\u5904\u7406\u961f\u5217 \n\t\t\t\tq.push(make_pair(dis[e[i].v],e[i].v));\n\t\t\t}   \n    }\n}signed main(){\n    memset(dis,127,sizeof(dis));\n    memset(head,-1,sizeof(head));\n    scanf(\"%lld%lld\",&n,&m);\n    for(int i=1;i<=m;i++){\n    \tint u,v,w;\n        scanf(\"%lld%lld%lld\",&u,&v,&w);\n        add(u,v,w);add(v,u,w);\n    }Prim();\n    if (cnt==n)printf(\"%lld\\n\",sum);\n    else puts(\"orz\");\n    return 0;\n}\n```\n",
        "postTime": 1626279517,
        "uid": 212283,
        "name": "Aw\u987f\u987f",
        "ccfLevel": 5,
        "title": "\u3010\u9898\u89e3\u3011[\u56fe\u8bba\u4e0e\u4ee3\u6570\u7ed3\u6784 302] \u6700\u77ed\u6811\u95ee\u9898_2"
    },
    {
        "content": "* **\u3010\u9898\u76ee\u94fe\u63a5\u3011**\n\n[Link:B3604](https://www.luogu.com.cn/problem/B3604)\n\n* **\u3010\u89e3\u9898\u601d\u8def\u3011**\n\n\u8fd9\u9898\u5982\u679c\u7528\u666e\u901aPrim\u53ef\u4ee5\u5361\u5230 $\\operatorname O(n^2)$\uff0c\u4f1aT\uff0c\u6240\u4ee5\u6211\u7528\u4e86 $\\operatorname O(m\\log_2 m)$ \u7684Kruskal\u3002\n\n### Kruskal\u7b97\u6cd5\n\n\u8fd9\u4e2a\u7b97\u6cd5\u4e2a\u4eba\u8ba4\u4e3a\u5f88\u597d\u8bb0\uff0c\u81f3\u5c11\u6bd4Prim\u597d\u8bb0\u3002\n\n\u7b97\u6cd5\u6d41\u7a0b\uff1a\n\n1. \u9996\u5148\u628a\u6240\u6709\u7684\u8fb9\u6309\u7167\u8fb9\u6743\u6392\u5e8f\uff08\u5728\u8fd9\u9898\u4ece\u5c0f\u5230\u5927\u6392\uff09\uff0c\u7136\u540e\u4ece\u7b2c\u4e00\u6761\u8fb9\u5f00\u59cb\u9009\u53d6\u3002\n\n2. \u4e3a\u4e86\u4e0d\u5f62\u6210\u73af\uff0c\u6bcf\u9009\u4e00\u6761\u8fb9\u5c31\u628a\u8d77\u70b9\u548c\u7ec8\u70b9\u6807\u4e3a\u4e00\u7ec4\uff08\u7528\u5e76\u67e5\u96c6\u5b9e\u73b0\uff09\u3002\n\n3. \u9009\u53d6\u5230\u4e00\u6761\u8fb9\u65f6\uff0c\u5982\u679c\u8d77\u70b9\u4e0e\u7ec8\u70b9\u662f\u4e00\u7ec4\uff0c\u5c31\u8df3\u8fc7\u8fd9\u6761\u8fb9\u3002\n\n4. \u6700\u540e\uff0c\u5f53\u9009\u53d6\u5230 $n-1$\uff08$n$ \u4e3a\u70b9\u6570\uff09\u8fb9\u65f6\uff0c\u8bf4\u660e\u6811\u5df2\u7ecf\u6784\u5efa\u5b8c\u6210\uff0c\u6240\u6709\u7684\u70b9\u90fd\u5df2\u7ecf\u5212\u4e3a\u4e00\u7ec4\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002\n\n* **\u4e3a\u4ec0\u4e48\u8fd9\u662f\u6b63\u786e\u7684\uff1f**\n\n\u4ee5\u4e0b\u5185\u5bb9\u5f15\u7528\u81eaNemlit\u7684[\u9898\u89e3](https://www.luogu.com.cn/blog/tbr-blog/solution-p3366)\u3002\n\n\u5982\u679c\u67d0\u4e2a\u8fde\u901a\u56fe\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u6240\u6709\u4ece\u5916\u90e8\u8fde\u63a5\u5230\u8be5\u8fde\u901a\u56fe\u7684\u8fb9\u4e2d\u7684\u4e00\u6761\u6700\u77ed\u7684\u8fb9\u5fc5\u7136\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u6240\u4ee5\u4e0d\u96be\u53d1\u73b0\uff0c\u5f53\u6700\u5c0f\u751f\u6210\u6811\u88ab\u62c6\u5206\u6210\u5f7c\u6b64\u72ec\u7acb\u7684\u82e5\u5e72\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u65f6\u5019\uff0c\u6240\u6709\u80fd\u591f\u8fde\u63a5\u4efb\u610f\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u8fb9\u4e2d\u7684\u4e00\u6761\u6700\u77ed\u8fb9\u5fc5\u7136\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n* **\u3010\u4ee3\u7801\u5b9e\u73b0\u3011**\n\n```cpp\n#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\nstruct edge\n{\n\tint from,to;\n\tlong long val;\n\tbool operator<(edge that)\n\t{\n\t\treturn val<that.val;\n\t}\n};\n\nint ust_root(int father[],int node)\n{\n\twhile(father[node]!=node)\n\t\tnode=father[node]=father[father[node]];\n\treturn node;\n}\n\nint main(int argc,char *argv[],char *envp[])\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n\tint cntnode,cntedge;\n\tcin>>cntnode>>cntedge;\n\tint father[cntnode+1];\n\tfor(int i=1;i<=cntnode;i++)\n\t\tfather[i]=i;\n\tedge edges[cntedge];\n\tfor(auto& tmp:edges)\n\t\tcin>>tmp.from>>tmp.to>>tmp.val;\n\tsort(edges,edges+cntedge);\n\tlong long picked=0,sum=0;\n    for(int i=0;picked<cntnode-1;i++)\n\t\tif(ust_root(father,edges[i].from)!=ust_root(father,edges[i].to))\n\t\t{\n\t\t\tfather[ust_root(father,edges[i].to)]=ust_root(father,edges[i].from);\n\t\t\tsum+=edges[i].val;\n\t\t\tpicked++;\n\t\t}\n\tcout<<sum;\n \treturn 0;\n}\n```",
        "postTime": 1625371617,
        "uid": 372983,
        "name": "Antarctic_Cube",
        "ccfLevel": 6,
        "title": "Solution:B3604([\u56fe\u8bba\u4e0e\u4ee3\u6570\u7ed3\u6784 302] \u6700\u77ed\u6811\u95ee\u9898_2)"
    }
]