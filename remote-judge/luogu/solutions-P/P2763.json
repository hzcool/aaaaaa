[
    {
        "content": "\u66f4\u6539\u5185\u5bb9\uff1a\u56fe\u7247\u7a0d\u6709\u6539\u52a8\n\n\u8fd9\u91cc\u7ed9\u5927\u5bb6\u63d0\u4f9b\u4e00\u4e0b\u9898\u76ee\u5927\u610f\u548c\u5efa\u6a21\u601d\u60f3\n# \u9898\u76ee\u5927\u610f\n\u6709$k$\u79cd\u7c7b\u578b\u548c$n$\u4e2a\u9898\u76ee\uff0c\u6bcf\u4e2a\u9898\u76ee\u4f1a\u9002\u5e94\u90e8\u5206\u7c7b\u578b\uff0c`\u4e00\u79cd\u7c7b\u578b\u53ef\u80fd\u9700\u8981\u591a\u79cd\u9898\uff0c\u4e00\u9053\u9898\u53ef\u80fd\u591a\u79cd\u7c7b\u578b\u90fd\u9700\u8981\uff0c\u4f46\u4e00\u9053\u9898\u53ea\u80fd\u6ee1\u8db3\u4e00\u79cd\u7c7b\u578b`\uff0c\u73b0\u8981\u6c42\u51fa\u6ee1\u8db3\u51fa\u5b8c\u6240\u6709\u7c7b\u578b\u7684\u9898\u76ee\u7684\u65b9\u6848\n# \u89e3\u9898\u601d\u8def\n\u7f51\u7edc\u6d41\u64c5\u957f\u4e8e\u89e3\u51b3\u5404\u79cd\u6709\u8981\u6c42\u7684\u5339\u914d\uff0c\u663e\u7136\u8fd9\u9053\u9898\u662f\u6709\u6761\u4ef6\u7684\u5339\u914d\uff0c\u53ef\u4ee5\u7528\u6700\u5927\u6d41\u6765\u89e3\u51b3\u3002\n\n\u9996\u5148\u5efa\u7acb\u8d85\u6e90\u70b9\u548c\u8d85\u6c47\u70b9\uff0c\u6e90\u70b9\u4e0e\u8bd5\u9898\u76f8\u8fde\uff0c\u6c47\u70b9\u4e0e\u7c7b\u578b\u76f8\u8fde\uff0c\u5bf9\u5e94\u8bd5\u9898\u4e0e\u5bf9\u5e94\u7c7b\u578b\u76f8\u8fde\n\n\u73b0\u5728\u6211\u4eec\u6765\u8003\u8651\u8fb9\u7684\u5bb9\u91cf\n\n\u56e0\u4e3a\u4e00\u9053\u9898\u53ea\u53ef\u4ee5\u6709\u4e00\u4e2a\uff0c\u6240\u4ee5\u6e90\u70b9\u548c\u8bd5\u9898\u7684\u8fb9\u7684\u5bb9\u91cf\u4e3a1\n\n\u540c\u7406\u4e00\u9053\u9898\u53ea\u80fd\u6ee1\u8db3\u4e00\u79cd\u7c7b\u578b\uff0c\u6240\u4ee5\u8bd5\u9898\u548c\u7c7b\u578b\u7684\u8fb9\u7684\u5bb9\u91cf\u4e5f\u4e3a1\n\n\u800c\u9700\u8981\u6ee1\u8db3\u7684\u7c7b\u578b\u662f\u6709\u591a\u4e2a\u7684\uff0c\u6240\u4ee5\u7c7b\u578b\u4e0e\u6c47\u70b9\u7684\u8fb9\u7684\u5bb9\u91cf\u4e3a\u6240\u9700\u7c7b\u578b\u7684\u6570\u91cf\n\n\u5982\u56fe![](https://cdn.luogu.com.cn/upload/pic/21711.png)\n\n\u8fd9\u65f6\u8dd1\u6700\u5927\u6d41\u5373\u53ef\n\n\u7edf\u8ba1\u65b9\u6848\u53ea\u9700\u627e\u5230\u6ca1\u6709\u88ab\u5272\u6389\u7684\u8fb9\uff08\u53ef\u80fd\u6709\u4eba\u4e0d\u61c2\u4ec0\u4e48\u662f\u88ab\u5272\u6389\uff0c\u56e0\u4e3a\u6700\u5927\u6d41=\u6700\u5c0f\u5272\uff09\u3002\u7136\u540e\u8f93\u51fa\u5176\u5373\u53ef\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8f93\u51fa\u7684\u4e0d\u80fd\u662f\u6c47\u70b9",
        "postTime": 1529817073,
        "uid": 52915,
        "name": "Ajwallet",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "# [P2763 \u8bd5\u9898\u5e93\u95ee\u9898](https://www.luogu.org/problemnew/show/P2763)\n\n\u9898\u610f\u6709\u70b9\u4e0d\u6e05\n\n\u8981\u6ce8\u610f\u6bcf\u9053\u9898\u867d\u53ef\u4ee5\u6709\u591a\u79cd\u7c7b\u578b\uff0c\u4f46\u5374\u53ea\u80fd\u4e0e\u4e00\u79cd\u7c7b\u578b\u76f8\u5339\u914d\n\n\u5373\u6700\u540e\u8f93\u51fa\u65f6\u4e0d\u80fd\u5728\u4e0d\u540c\u79cd\u7c7b\u578b\u4e2d\u51fa\u73b0\u540c\u4e00\u9053\u9898\n\n\u7406\u89e3\u4e86\u9898\u610f\u540e\u663e\u7136\u662f\u8981\u6211\u4eec\u6c42\u67d0\u79cd\u9898\u4e0e\u7c7b\u578b\u4e4b\u95f4\u7684\u7684\u5339\u914d\n\n\u800c\u7c7b\u578b\u53ef\u4ee5\u5339\u914d\u591a\u9053\u9898\uff0c\u800c\u4e14\u8981\u6c42\u67d0\u4e2a\u7c7b\u578b\u53ea\u80fd\u5339\u914d\u7279\u5b9a\u6570\u91cf\u7684\u9898\n\n\u6545\u5c06\u7c7b\u578b\uff08n+i\uff09\u4f5c\u4e3a\u53f3\u90e8\uff0c\u4e0e\u6c47\u70b9t\u8fde\u5bb9\u91cf\u4e3a\u9898\u76ee\u7ed9\u51fa\u7684\u5339\u914d\u6570\u91cf\u7684\u8fb9\n\n\u6c42\u5b8c\u6700\u5927\u6d41\u540e\u8fd9\u4e9b\u8fb9\u662f\u5426\u6ee1\u6d41\u81ea\u7136\u5c31\u610f\u5473\u7740\u662f\u5426\u6709\u89e3\n\n\u9898\u4e0e\u7c7b\u578b\u4e4b\u95f4\u4e5f\u6839\u636e\u9898\u7684\u7c7b\u578b\u8fde\u8fb9\uff0c\u6bcf\u9053\u9898\u6700\u591a\u53ea\u80fd\u67091\u7684\u8d21\u732e\uff0c\u6545\u5bb9\u91cf\u4e3a1\n\n\u518d\u5c06\u6e90\u70b9s\u4e0e\u5404\u9053\u9898\u8fde\u8fb9\uff0c\u6c42\u6700\u5927\u6d41\n\n\u5982\u4e0a\u6240\u8ff0\uff0c\u82e5\u6700\u5927\u6d41\u4e0d\u7b49\u4e8em\u5219\u65e0\u89e3\n\n\u82e5\u76f8\u7b49\uff0c\u5219\u4ece1\u5230k\u904d\u5386\u6240\u6709\u53f3\u90e8\u70b9\uff08\u7c7b\u578b\uff09\uff0c\u5bf9\u6bcf\u4e2a\u53f3\u90e8\u70b9\u904d\u5386\u90bb\u63a5\u70b9\uff0c\u5c06\u6240\u6709\u503c\u4e3a1\uff08\u8fd9\u4e2a\u522b\u5fd8\u4e86\uff09\uff0c\u4e14\u6307\u5411\u5de6\u90e8\u7684\u8fb9\u6307\u5411\u7684\u70b9\u8f93\u51fa\u5373\u53ef\n\n\uff08\u559c\u6b22\u5c31\u7ed9\u4e2a\u8d5e\u9876\u9876\u6211\u5427\uff09\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nconst int N=1000+5,K=20+5;\nconst int inf=0x7fffffff;\ntemplate<class T>inline void read(T &num){\n\tchar ch;\n\twhile(!isdigit(ch=getchar()));\n\tnum=ch-'0';\n\twhile(isdigit(ch=getchar()))num=num*10+ch-'0';\n}\nint hea[N<<1],to[N*N<<1],nex[N*N<<1],val[N*N<<1],tot=1,n,k,dep[N<<1],s,t,m;\n\ninline void add_edge(const int x,const int y,const int w){\n\tto[++tot]=y,nex[tot]=hea[x],hea[x]=tot,val[tot]=w;\n}\n\ninline void Add_edge(const int x,const int y,const int w){\n//printf(\"%d --> %d ( %d )\\n\",x,y,w);\n\tadd_edge(x,y,w);\n\tadd_edge(y,x,0);\n}\n\nqueue<int> que;\nbool bfs(){\n\tmemset(dep,0,sizeof(dep));\n\tdep[s]=1; \n\twhile(que.size())que.pop();\n\tque.push(s);\n\tint x;\n\twhile(que.size()){\n\t\tx=que.front();que.pop();\n\t\tfor(int i=hea[x];i;i=nex[i]){\n\t\t\tint y=to[i];\n\t\t\tif(val[i]&&!dep[y]){\n\t\t\t\tdep[y]=dep[x]+1;\n\t\t\t\tif(y==t)return true;\n\t\t\t\tque.push(y);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nint dfs(const int x,const int flow){\n//printf(\"dfs(%d,%d) %d\\n\",x,flow,x==t);\n\tif(x==t)return flow;\n\tint rest=flow,k;\n\tfor(int i=hea[x];i&&rest;i=nex[i]){\n\t\tint y=to[i];\n\t\tif(val[i]&&dep[y]==dep[x]+1){\n\t\t\tk=dfs(y,min(rest,val[i]));\n\t\t\tif(k){\n\t\t\t\tval[i]-=k;\n\t\t\t\tval[i^1]+=k;\n\t\t\t\trest-=k;\n\t\t\t}\n\t\t\telse dep[y]=0;\n\t\t}\n\t}\n//printf(\"\\t%d x=%d,return %d\\n\",x==s,x,flow-rest);\n\treturn flow-rest;\n}\n\nint dinic(){\n\tint maxflow=0,flow;\n\twhile(bfs())while(flow=dfs(s,inf))maxflow+=flow;\n//printf(\"return %d\\n\",maxflow);\n\treturn maxflow;\n}\n\ninline void print(const int x){\n\tfor(int i=hea[x];i;i=nex[i]){\n\t\tint y=to[i];\n//printf(\"\\ny=%d\\n\",y);\n\t\tif(val[i]&&y<=n){\n\t\t\tprintf(\" %d\",y);\n\t\t}\n\t}\n}\n\nint main(){\n\tread(k),read(n);\n\ts=n+k+1;\n\tt=s+1;\n\tfor(int i=1,w;i<=k;++i){\n\t\tread(w);\n\t\tm+=w;\n\t\tAdd_edge(n+i,t,w);\n\t}\n\tfor(int i=1,b,h;i<=n;++i){\n\t\tAdd_edge(s,i,1);\n\t\tread(h);\n\t\tfor(int j=1;j<=h;++j){\n\t\t\tread(b);\n\t\t\tAdd_edge(i,b+n,1);\n\t\t}\n\t}\n\tif(dinic()==m){\n\t\tfor(int i=1;i<=k;++i){\n\t\t\tprintf(\"%d:\",i); \n\t\t\tprint(n+i);\n\t\t\tputchar('\\n');\n\t\t}\n\t}\n\telse{\n\t\tprintf(\"No Solution!\\n\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1548941022,
        "uid": 106642,
        "name": "Ajsoabk",
        "ccfLevel": 0,
        "title": "\u7f51\u7edc\u6d4124\u9898-\u8bd5\u9898\u5e93\u95ee\u9898"
    },
    {
        "content": "***\n# [$\\large\\color{#F0F}\\text{\u535a\u5ba2\u98df\u7528\u6548\u679c\u66f4\u4f73}$](https://www.cnblogs.com/lzxzy-blog/p/10369235.html)\n***\n# \u8fd9\u9898\u53ef\u4ee5\u7528\u7f51\u7edc\u6d41\uff0c\u4f46\u6211\u7528\u7684\u662f$\\large\\color{#f00}\\text{\u5308\u7259\u5229\u7b97\u6cd5}$\n---\n# \u8fdb\u5165\u6b63\u9898\n\n- \u8bbe\u7b2c$k$\u4e2a\u7c7b\u578b\u9700\u8981$need_k$\u4e2a.\u5c06\u6bcf\u4e2a\u7c7b\u578b\u62c6\u6210$need_k$\u4e2a\u70b9\uff0c\u7528\u4e00\u4e2a\u8fb9\u96c6\u6570\u7ec4\u8bb0\u5f55\u5b83\u62c6\u6210\u7684\u70b9\u3002\n- \u7b2c$n$\u4e2a\u8bd5\u9898\u6709$p$\u4e2a\u7c7b\u578b\uff0c\u5206\u522b\u5c06$n$\u4e0e$p$\u62c6\u6210\u7684\u70b9\u8fde\u8fb9\uff0c\u8fd9\u6837\u4fbf\u6784\u6210\u4e86\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\n- \u4f7f\u7528**\u5308\u7259\u5229\u7b97\u6cd5**\u8ba1\u7b97\u6700\u5927\u5339\u914d\uff0c\u82e5\u6700\u5927\u5339\u914d\u5c0f\u4e8e$need$\u7684\u603b\u6570\uff0c\u5219\u65e0\u89e3\u3002\n- \u8f93\u51fa\u65f6\u4f7f\u7528\u4f18\u5148\u961f\u5217\u3002\n\n# OK\u4e86\uff01\uff01\uff01\n## code\uff1a\n***\n- \u62c6\u70b9\uff1a\n\n```cpp\nint main()\n{\n\tfor (int i=1;i<=k;i++)\n\t{\n\t\tneed[i]=read();\n\t\tfor (int j=1;j<=need[i];j++)Addedge(0,i,++cnt);\n\t}\n}\n```\n***\n- \u5c06\u8bd5\u9898\u4e0e\u7c7b\u578b\u8fde\u8fb9\uff1a\n\n```cpp\nvoid dot(int u,int v)\n{\n\tfor (int k=head[v];k>0;k=set[k].nx)\n\t\tAddedge(u,set[k].v);\n\treturn ;\n}\n\nint main()\n{\n\tint p;\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tp=read();\n\t\tfor (int j=1;j<=p;j++)dot(i,read());\n\t}\n}\n```\n***\n- \u5308\u7259\u5229\u7b97\u6cd5\uff1a\n```cpp\nbool dfs(int u)\n{\n\tint v;\n\tfor (int k=head[1][u];k>0;k=set[1][k].nx)\n\t{\n\t\tv=set[1][k].v;\n\t\tif (!vis[v])\n\t\t{\n\t\t\tvis[v]=true;\n\t\t\tif ((match[v]==-1)||dfs(match[v]))\n\t\t\t{\n\t\t\t\tmatch[v]=u;return true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n```\n***\n- \u8f93\u51fa\uff1a\n```cpp\npriority_queue<int,vector<int>,greater<int> > Q;\nint main()\n{\n\tfor (int i=1;i<=k;i++)\n\t{\n\t\tprintf(\"%d: \",i);\n\t\tfor (int j=head[0][i];j>0;j=set[0][j].nx)Q.push(match[set[0][j].v]);\n\t\twhile (!Q.empty()){printf(\"%d \",Q.top());Q.pop();}\n\t\tprintf(\"\\n\");\n\t}\n}\n```\n***\n- ##  \u603b\u4ee3\u7801\uff1a\n\n```cpp\n#include <functional>\n#include <cstdio>\n#include <bitset>\n#include <queue>\nusing namespace std;\n\nint read()\n{\n\tint x=0,f=1;char c=getchar();\n\twhile (c<'0' || c>'9'){if (c=='-')f=-1;c=getchar();}\n\twhile (c>='0'&&c<='9'){x=(x<<3)+(x<<1)+c-48;c=getchar();}\n\treturn x*f;\n}\n\nconst int MAXK=25;\nconst int MAXN=1010;\nint n,k,cnt;\n\nstruct edge\n{\n\tint v,nx;\n}set[2][MAXN*MAXN];\nint id[2];\nint head[2][MAXN];\nint need[MAXK],match[MAXN*MAXN];\nbitset<MAXN> vis;\npriority_queue<int,vector<int>,greater<int> > Q;\n\ninline void Addedge(int loca,int u,int v)\n{\n\tid[loca]++;set[loca][id[loca]].v=v;set[loca][id[loca]].nx=head[loca][u];\n\thead[loca][u]=id[loca];\n}\n\ninline void dot(int u,int v)\n{\n\tfor (int k=head[0][v];k>0;k=set[0][k].nx)\n\t\tAddedge(1,u,set[0][k].v);\n\treturn ;\n}\n\ninline bool dfs(int u)\n{\n\tint v;\n\tfor (int k=head[1][u];k>0;k=set[1][k].nx)\n\t{\n\t\tv=set[1][k].v;\n\t\tif (!vis[v])\n\t\t{\n\t\t\tvis[v]=true;\n\t\t\tif ((match[v]==-1)||dfs(match[v]))\n\t\t\t{\n\t\t\t\tmatch[v]=u;return true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nint main()\n{\n\tk=read();n=read();\n\tfor (int i=1;i<=k;i++)\n\t{\n\t\tneed[i]=read();\n\t\tfor (int j=1;j<=need[i];j++)Addedge(0,i,++cnt);\n\t}\n\tint p;\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tp=read();\n\t\tfor (int j=1;j<=p;j++)dot(i,read());\n\t}\n\tint ans=0;\n\tfor (int i=1;i<=cnt;i++)match[i]=-1;\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tvis.reset();\n\t\tif (dfs(i))ans++;\n\t}\n\tif (ans<cnt)puts(\"No Solution!\");\n\telse \n\t{\n\t\tfor (int i=1;i<=k;i++)\n\t\t{\n\t\t\tprintf(\"%d: \",i);\n\t\t\tfor (int j=head[0][i];j>0;j=set[0][j].nx)Q.push(match[set[0][j].v]);\n\t\t\twhile (!Q.empty()){printf(\"%d \",Q.top());Q.pop();}\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n//\u4e11\u4ee3\u7801\n```\n~~\u70b9\u8d5e\u5427~~",
        "postTime": 1549978000,
        "uid": 141348,
        "name": "\u26a1LZSY01_XZY\u26a1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "\u672c\u9898\u6211\u4f7f\u7528\u4e86\u4e8c\u5206\u56fe\u5339\u914d\u3002\uff08\u4ee3\u7801\u91cf\u6bd4\u7f51\u7edc\u6d41\u5c0f\uff09\n\n\u5efa\u56fe\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a\n\n\u5de6\u4fa7\u7684\u70b9\u662f\u9898\u76ee\u7c7b\u578b\uff0c\u53f3\u4fa7\u7684\u70b9\u662f\u9898\u76ee\u7f16\u53f7\u3002\u5c06\u6bcf\u4e00\u4e2a\u5de6\u4fa7\u7684\u9898\u76ee\u7c7b\u578b\u70b9\u62c6\u6210\u5f88\u591a\u4e2a\uff0c\u8fd9\u7c7b\u9898\u76ee\u8981\u591a\u5c11\u9053\u9898\u5c31\u62c6\u6210\u591a\u5c11\u4e2a\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9898\u76ee\u7c7b\u578b\u62c6\u5206\u51fa\u6765\u7684\u6240\u6709\u70b9\uff0c\u90fd\u5bf9\u53f3\u4fa7\u7684\u9898\u76ee\u8fde\u540c\u6837\u7684\u8fb9\uff0c\u5c5e\u4e8e\u6b64\u7c7b\u578b\u7684\u9898\u76ee\u5c31\u8fde\u8fb9\u3002\n\n\u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u4e8c\u5206\u56fe\u5339\u914d\u4e86\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <memory.h>\nusing namespace std;\nconst int MAXK=25,MAXN=1005;\nstruct Node\n{\n    int v;\n    Node *next;\n}*h[MAXN],pool[MAXN*MAXN];//\u90bb\u63a5\u8868\u7ed3\u6784\u4f53\u5b58\u56fe\nint tot=0;\nvoid addEdge(int u,int v)\n{\n    Node *p=&pool[++tot];\n    p->v=v; p->next=h[u]; h[u]=p;//\u5efa\u56fe\u65f6\u5efa\u6709\u5411\u8fb9\n}\nint k,n,num[MAXK],p,a,cnt,cnt2,ans,match[MAXN],tag[MAXN*MAXN];\n/*num\uff1a\u6bcf\u4e2a\u7c7b\u578b\u7684\u9898\u76ee\u8981\u591a\u5c11\u9053\u9898\ncnt\uff1a\u5de6\u4fa7\u70b9\u7684\u603b\u6570\nmatch\uff1a\u4e8c\u5206\u56fe\u5339\u914d\u7528\u7684\u6570\u7ec4\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u5339\u914d\u60c5\u51b5\ntag\uff1a\u6bcf\u4e2a\u5de6\u4fa7\u70b9\u662f\u7531\u7b2c\u51e0\u4e2a\u9898\u76ee\u7c7b\u578b\u62c6\u51fa\u6765\u7684\n*/\nbool vis[MAXN*MAXN];//\u4e8c\u5206\u56fe\u5339\u914d\u4f7f\u7528\nvector<int> v[MAXK];//\u8f85\u52a9\u5efa\u56fe\nvector<int> res[MAXK];//\u8bb0\u5f55\u7b54\u6848\nbool dfs(int u)//\u9012\u5f52\u5b9e\u73b0\u4e8c\u5206\u56fe\u5339\u914d\n{\n    for(Node *p=h[u]; p; p=p->next)\n    {\n        if(!vis[p->v])\n        {\n            vis[p->v]=true;\n            if(match[p->v]<0 || dfs(match[p->v]))\n            {\n                match[p->v]=u;\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main()\n{\n    scanf(\"%d%d\",&k,&n);\n    for(int i=1; i<=k; i++)\n    {\n        scanf(\"%d\",&num[i]);\n        cnt+=num[i];//\u7edf\u8ba1\u5de6\u4fa7\u70b9\u603b\u6570\n    }\n    for(int i=1; i<=n; i++)\n    {\n        scanf(\"%d\",&p);\n        for(int j=1; j<=p; j++)\n        {\n            scanf(\"%d\",&a);\n            v[a].push_back(i);//vector\u8bb0\u5f55\u6bcf\u4e2a\u9898\u76ee\u7c7b\u578b\u90fd\u6709\u54ea\u4e9b\u9898\n        }\n    }\n    for(int i=1; i<=k; i++)\n    {\n        for(int j=1; j<=num[i]; j++)\n        {\n            cnt2++;//\u8bb0\u5f55\u5f53\u524d\u5de6\u4fa7\u70b9\u7684\u7f16\u53f7\n            tag[cnt2]=i;\n            for(int K=0; K<v[i].size(); K++)//\u6ce8\u610f\u5927\u5c0f\u5199\n            {\n                addEdge(cnt2,v[i][K]);\n            }\n        }\n    }\n    //\u4e8c\u5206\u56fe\u5339\u914d\n    memset(match,-1,sizeof(match));\n    for(int i=1; i<=cnt; i++)\n    {\n        memset(vis,0,sizeof(vis));\n        if(dfs(i)) ans++;\n    }\n    if(ans<cnt)\n    {\n        printf(\"No Solution!\\n\");//\u65e0\u89e3\u7279\u5224\n        return 0;\n    }\n    for(int i=1; i<=n; i++)\n    {\n        res[tag[match[i]]].push_back(i);//\u5b58\u7b54\u6848\n    }\n    for(int i=1; i<=k; i++)//\u505a\u5b8c\u4e86\uff0c\u8f93\u51fa\n    {\n        printf(\"%d:\",i);\n        for(int j=0; j<res[i].size(); j++) printf(\" %d\",res[i][j]);\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1509802019,
        "uid": 31025,
        "name": "nstk0513",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "# \u7f51\u7edc\u6d4124\u9898---\u8bd5\u9898\u5e93\u95ee\u9898\n\n\u9898\u76ee:[\u81ea\u5df1\u5eb7](https://www.luogu.org/problem/P2763)\n\n## \u89e3\u6cd5:\u6c42\u7f51\u7edc\u6700\u5927\u6d41\n\u5bf9\u4e8e\u8fd9\u4e00\u9898,\u6211\u4eec\u53ef\u4ee5\u628ak\u79cd\u4e0d\u540c\u7684\u9898\u76ee\u7c7b\u578b\u4e0e\u6e90\u70b9\u76f8\u8fde \u5176\u6bcf\u6761\u7ba1\u9053\u7684\u6700\u5927\u6d41\u91cf\u4e3a\u8be5\u79cd\u9898\u76ee\u6240\u9700\u7684\u591a\u5c11   \n\u7136\u540e \u8bfb\u5165n\u4e2a\u9898\u76ee \u6211\u4eec\u628a\u8fd9 n \u4e2a\u6570\u4e0e\u5176\u5bf9\u5e94\u7684 p \u79cd\u7c7b\u578b\u76f8\u8fde(\u6d41\u91cf\u4e3a1)  \n\u6700\u540e \u628a\u8fd9n\u4e2a\u6570\u4e0e\u6c47\u70b9\u76f8\u8fde(\u6d41\u91cf\u4e3a1)\n\u76f4\u63a5\u5728\u56fe\u4e2d\u8dd1\u6700\u5927\u6d41\u5373\u53ef\n\n**\u4ee3\u7801\u9171 OVO\u2193**\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define N 1000000\n#define v to[i] \n#define inf 0x7f7f7f7f\n\nint n,m,k,s,t;\nint type[N];\nint dep[N],from[N],to[N],w[N],head[N],nex[N],ecnt;\n\nvoid ae(int x,int y,int z){\n    from[ecnt]=x;\n    to[ecnt]=y;\n    w[ecnt]=z;\n    nex[ecnt]=head[x];\n    head[x]=ecnt++;\n}\n\nbool bfs(){\n    memset(dep,-1,sizeof(dep));\n    queue<int> q;\n    dep[s]=1; \n    q.push(s);\n    while(!q.empty()){\n        int u=q.front();\n        q.pop();\n        for(int i=head[u];i!=-1;i=nex[i]){\n            if(dep[v]==-1 and w[i]>0){\n                dep[v]=dep[u]+1;\n                q.push(v);\n            }\n        }\n    }\n    return dep[t]!=-1;\n}\n\nint dfs(int u,int low){\n    if(u==t)\n        return low;\n    int ret=low;\n    for(int i=head[u];i!=-1;i=nex[i]){\n        if(dep[v]==dep[u]+1 and w[i]>0){\n            int flow=dfs(v,min(ret,w[i]));\n            if(flow>0){\n                w[i]-=flow;\n                w[i^i]+=flow;\n            }\n            ret-=flow;\n            if(!ret)\n                break;\n        }\n    }\n    return low-ret;\n}\n\nint dinic(){\n    int res=0;\n    while(bfs()){\n        res+=dfs(s,inf);\n    }\n    return res;\n}\n\nvoid pre(){\n    scanf(\"%d%d\",&k,&n);\n    for(int i=1;i<=k;i++){\n        scanf(\"%d\",&type[i]);\n        ae(s,i,type[i]);\n        ae(i,s,0);\n    }\n    for(int i=1+k;i<=n+k;i++){\n        ae(i,t,1);\n        ae(t,i,0);\n    }\n    int tmp,x;\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&tmp);\n        for(int j=1;j<=tmp;j++){\n            scanf(\"%d\",&x);\n            ae(x,k+i,1);\n            ae(k+i,x,0);\n        }\n    }\n    //for(int i=1;i<=ecnt;i+=2)printf(\"from->%d to->%d w=%d\\n\",from[i],to[i],w[i]);\n}\n\nint main(){\n    memset(head,-1,sizeof(head));\n    s=0,t=10000;\n    pre();\n    int ans=dinic();\n    //printf(\"%d\\n\",ans);\n    //\u79cd\u7c7b\n    for(int u=1;u<=k;u++){\n        printf(\"%d: \",u);\n        for(int i=head[u];i!=-1;i=nex[i]){\n            if(!w[i] and v!=s)\n                printf(\"%d \",v-k);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n\n```",
        "postTime": 1572824272,
        "uid": 58751,
        "name": "VanillaYuzume",
        "ccfLevel": 0,
        "title": "\u8bd5\u9898\u5e93\u95ee\u9898"
    },
    {
        "content": "## \u8fd9\u9053\u9898\u96be\u5ea6\u6709\u70b9~~\u865a\u9ad8~~\n\n #### ~~\u597d\u4e45\u6ca1\u5199\u9898\u89e3\u4e86~~ \n\u597d\u50cf\u548c\u5706\u684c\u95ee\u9898\u5f88\u76f8\u4f3c\u3002\uff08\u6bd5\u7adf\u90fd\u662f\u6700\u5927\u5339\u914d\uff09\n\n\u5927\u81f4\u5c31\u662f\u8bbe\u8d85\u7ea7\u6e90\u70b9\u4e3a0\uff0c\u7136\u540e\u5c06\u6240\u6709\u8bd5\u5377\u4e2d\u7684\u8bd5 \u9898\u7c7b\u578b\u4e0e\u8d85\u7ea7\u6e90\u70b9\u76f8\u8fde\uff0c\u6d41\u91cf\u8bbe\u4e3a\u8bd5\u5377\u4e2d\u8fd9\u7c7b\u9898\u7684\u6570\u76ee\u3002\n\n\u518d\u5c06\u6240\u6709\u7684\u9898\u76ee\u4e0eTa\u4eec\u6240\u5c5e\u7684\u7c7b\u578b\u8fde\u4e00\u6761\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u518d\u628a\u8fd9\u4e9b\u9898\u76ee\u4e0e\u8d85\u7ea7\u6c47\u70b9\uff08k+n+1\uff09\u8fde\u8d77\u6765.\n\u7136\u540e\u8dd1\u4e00\u8fb9\u6700\u5927\u6d41\n\n\u5982\u679c\u7ed3\u679c\u4e0em(\u8bd5\u5377\u4e2d\u8981\u6c42\u7684\u9898\u76ee\u6570\u91cf)\u4e0d\u76f8\u540c\uff0c\u5c31\u8f93\u51faNo solution\uff01\n\n\u5426\u5219\u5c31\u5faa\u73af\u6240\u6709\u7684\u8bd5\u9898\u7c7b\u578b\n\u5982\u679c\u8fd9\u6761\u8fb9dis=0\u5e76\u4e14\u4e0d\u8fde\u54110,\u5c31\u8f93\u51fa\uff0c\u4f46\u8f93\u51fa\u7684\u65f6\u5019\u8981-k,\u56e0\u4e3a\u5efa\u8fb9\u7684\u65f6\u50191~k\u662f\u8bd5\u9898\u7c7b\u578b\n\n\n\u7136\u540e\u653e\u4e00\u4e0bZZ\u7684\u4ee3\u7801\u3002\n\n```\n#include<cstring>\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int M = 1005 ;\nconst int N = 25 ;\nconst int inf = 210000000 ;\ninline int read(){\n\tchar c=getchar(); int x=0,w=1;\n\twhile(c>'9'||c<'0'){\n\t\tif(c=='-') w=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9'){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn x*w ;\n}\nstruct E{\n\tint nex,to,dis;\n}edge[M<<3];\nint hea[M<<3],num;\ninline void add_edge(int from,int to,int dis){\n\tedge[num].nex=hea[from]; edge[num].to=to;\n\tedge[num].dis=dis;  hea[from]=num++;\n}\nint n,k,d[M<<3],f[N],m,s,t;\nbool bfs(){\n\tqueue<int>q; q.push(s);\n\tmemset(d,0,sizeof(d)); d[s]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front(); q.pop();\n\t\tfor(int i=hea[u];~i;i=edge[i].nex){\n\t\t\tint v=edge[i].to;\n\t\t\tif(!d[v]&&edge[i].dis>0){\n\t\t\t\tq.push(v);\n\t\t\t\td[v]=d[u]+1; \n\t\t\t}\n\t\t}\n\t}\n\treturn d[t] ;\n}\nint Dfs(int u,int dis){\n\tif(u==t||!dis) return dis;\n\tint sum =0 ;\n    for(int i=hea[u];~i;i=edge[i].nex){\n    \tint v=edge[i].to;\n    \tif(d[v]==d[u]+1&&edge[i].dis>0){\n    \t\tint diss=Dfs(v,min(dis,edge[i].dis));\n    \t\tif(diss>0){\n    \t\t\tedge[i].dis-=diss; edge[i^1].dis+=diss;\n    \t\t\tsum+=diss; dis-=diss;\n\t\t\t    if(!dis) return sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum ;\n}\nint dinic(){\n\tint Ans=0;\n\twhile(bfs()) Ans+=Dfs(s,inf);\n\treturn Ans;\n}\nint main(){\n\tmemset(hea,-1,sizeof(hea));\n\tk=read(); n=read() ; t=n+k+1 ;\n\tfor(int i=1;i<=k;i++){\n        f[i]=read();\n\t\tm+=f[i];\n\t\tadd_edge(i,s,0);\n\t\tadd_edge(s,i,f[i]);\n\t}\n\tfor(int i=1,p;i<=n;i++){\n\t    p=read();\n\t    for(int j=1,r;j<=p;j++){\n\t    \tr=read();\n\t    \tadd_edge(i+k,r,0);\n\t    \tadd_edge(r,i+k,1);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tadd_edge(t,i+k,0);\n\t\tadd_edge(i+k,t,1);\n\t}\n\tif(dinic()==m){\n\t\tfor(int i=1;i<=k;i++){\n\t\t\tprintf(\"%d: \",i);\n\t\t\tfor(int j=hea[i];~j;j=edge[j].nex)\n\t\t\t    if(edge[j].to>0&&!edge[j].dis)\n\t\t\t      printf(\"%d \",edge[j].to-k);\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\telse printf(\"No Solution!\\n\");\n    return 0;\n}\n```",
        "postTime": 1517818244,
        "uid": 53884,
        "name": "beretty",
        "ccfLevel": 8,
        "title": "P2763 \u8bd5\u9898\u5e93\u95ee\u9898 \u9898\u89e3"
    },
    {
        "content": "# \u9996\u5148\uff0c\u8fd9\u662f\u4e00\u9053\u7f51\u7edc\u6700\u5927\u6d41\u7684\u5e94\u7528\u9898\n\n\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u60f3\u5230\uff0c\u5e94\u8be5\u8981\u5efa\u7acb\u4e00\u4e2a\\*\u4e8c\u5206\u56fe\\*\n\n\u800c\u56fe\u7684\u5de6\u8fb9\u662f\u6bcf\u9053\u8bd5\u9898\uff0c\u53f3\u8fb9\u5219\u662f\u8bd5\u9898\u7c7b\u578b\n\n###### ~~\u5077\u5077\u5730\u544a\u8bc9\u5927\u5bb6\uff0c\u8fd9\u9053\u9898\u6ca1\u6709No solution\u7684\u60c5\u51b5~~\n\n### \u6784\u56fe\u6cd5\u5982\u4e0b\uff1a\n\n1. \u5efa\u7acb\u8d85\u7ea7\u6e90\uff0c\u8ba9\u5b83\u4e0e\u6bcf\u9053\u8bd5\u9898\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u5bb9\u91cf\u4e3a1\u5f88\u597d\u7684\u4fdd\u8bc1\u4e86\u6bcf\u9053\u9898\u53ea\u80fd\u88ab\u9009\u4e2d\u4e00\u6b21\n\n2. \u5efa\u7acb\u8d85\u7ea7\u6c47\uff0c\u6bcf\u79cd\u8bd5\u9898\u7c7b\u578b\u4e0e\u5b83\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u8be5\u79cd\u8bd5\u9898\u9700\u6c42\u91cf\u7684\u8fb9\uff0c\u8fd9\u6837\u5b9a\u4e49\u5bb9\u91cf\u5f88\u597d\u7684\u4fdd\u8bc1\u4e86\u5bf9\u6bcf\u79cd\u8bd5\u9898\u7684\u9700\u6c42\n\n3. \u6bcf\u9053\u9898\u4e0e\u5b83\u6240\u5c5e\u7684\u7c7b\u578b\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\n\n#### \u8fd9\u6837\uff0c\u6211\u4eec\u53ea\u9700\u8dd1\u4e00\u904d\u6700\u5927\u6d41\uff0c\u5c31\u53ef\u4ee5\u627e\u5230\u89e3\u51b3\u65b9\u6848\n\n\u8dd1\u5b8c\u6700\u5927\u6d41\u4e4b\u540e\uff0c\u6211\u4eec\u5bf9\u6240\u6709\u8fb9\u8fdb\u884c\u641c\u7d22\uff0c\u5f53\u641c\u7d22\u5230\u4e00\u6761\u4ece\u8bd5\u9898\u8fde\u5411\u8bd5\u9898\u7c7b\u578b\uff0c\u4e14\u6d41\u91cf\u5927\u4e8e0\u7684\u8fb9\u65f6\uff0c\u6211\u4eec\u5c31\u7528\u7ed3\u679c\u6570\u7ec4\u5c06\u5b83\u5b58\u4e0b\u6765\u3002\u5177\u4f53\u5b58\u6cd5\u53c2\u89c1\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684result\u6570\u7ec4\u548ccnt\u6570\u7ec4\n\n##### \u6b64\u5916\uff0c\u7531\u4e8e\u8fd9\u9898\u6570\u636e\u6bd4\u8f83\u5c0f\uff0cEK\u7b97\u6cd5\u5e94\u8be5\u662f\u80fdA\u7684\uff0c\u4f46\u6211\u51fa\u4e8e\u4fdd\u9669\u8d77\u89c1\uff0c\u8fd8\u662f\u7528\u4e86Dinic\u3002\u4e0d\u4f1a\u7f51\u7edc\u6d41\u7684\u540c\u5b66\u6b22\u8fce\u79c1\u4fe1\u9a9a\u6211\uff01\n\n\n    \n    \n    \n    \n    \n    \n```cpp\n    #include<iostream>\n    #include<cstdio>\n    #include<cstring>\n    #include<queue>\n    #define INF 0x7fffffff\n    using namespace std;\n    struct Edge{int from,to,capa,flow,next;} e[2000000];\n    int h[5000],d[5000],cur[5000];\n    bool vis[5000];\n    int cnt[25];\n    int result[25][1010];\n    int n,k,s,t;\n    int sum=-1;\n    void add_edge(int u,int v,int c)\n    {\n        sum++;\n        e[sum].from=u;\n        e[sum].to=v;\n        e[sum].capa=c;\n        e[sum].flow=0;\n        e[sum].next=h[u];\n        h[u]=sum;\n    }\n    int BFS()\n    {\n        memset(vis,0,sizeof(vis));\n        d[s]=0;\n        vis[s]=1;\n        queue<int> q;\n        q.push(s);\n        while(!q.empty())\n        {\n            int o=q.front();\n            for(int tmp=h[o];tmp!=-1;tmp=e[tmp].next)\n            {\n                if(e[tmp].capa>e[tmp].flow&&vis[e[tmp].to]==0)\n                {\n                    vis[e[tmp].to]=1;\n                    d[e[tmp].to]=d[o]+1;\n                    q.push(e[tmp].to);\n                }\n            }\n            q.pop();\n        }\n        return vis[t];\n    }\n    int DFS(int u,int a)\n    {\n        if(u==t||a==0) return a;\n        int flow=0,f;\n        for(int& tmp=cur[u];tmp!=-1;tmp=e[tmp].next)\n        {\n            if(d[e[tmp].to]==d[u]+1)\n            {\n                f=DFS(e[tmp].to,min(a,e[tmp].capa-e[tmp].flow));\n                if(f>0)\n                {\n                    flow+=f;\n                    a-=f;\n                    e[tmp].flow+=f;\n                    e[tmp^1].flow-=f;\n                    if(a==0) break;\n                }\n            }\n        }\n        return flow;\n    }\n    void Dinic()\n    {\n        int flow=0;\n        while(BFS())\n        {\n            for(int i=s;i<=t;i++) cur[i]=h[i];\n            flow+=DFS(s,INF);\n        }\n    }\n    int main()\n    {\n        cin>>k>>n;\n        s=0;\n        t=k+n+1;\n        for(int i=s;i<=t;i++) h[i]=-1;\n        for(int i=1;i<=n;i++)\n        {\n            add_edge(s,i,1);\n            add_edge(i,s,0);\n        }\n        int tmp,tmp2;\n        for(int i=1;i<=k;i++)\n        {\n            scanf(\"%d\",&tmp);\n            add_edge(n+i,t,tmp);\n            add_edge(t,n+i,0);\n        }\n        for(int i=1;i<=n;i++)\n        {\n            scanf(\"%d\",&tmp);\n            for(int j=1;j<=tmp;j++)\n            {\n                scanf(\"%d\",&tmp2);\n                add_edge(i,n+tmp2,1);\n                add_edge(n+tmp2,i,0);\n            }\n        }\n        Dinic();\n        memset(cnt,0,sizeof(cnt));\n        //cout<<sum<<endl;\n        for(int i=0;i<=sum;i++)\n        {\n            //if(e[i].flow<0) printf(\"from: %d   to: %d   \\n\",e[i].from,e[i].to);\n            if(e[i].flow>0&&e[i].from>s&&e[i].from<=n&&e[i].to>n&&e[i].to<t)\n            {\n                cnt[e[i].to-n]++;\n                result[e[i].to-n][cnt[e[i].to-n]]=e[i].from;\n            }\n        }\n        for(int i=1;i<=k;i++)\n        {\n            printf(\"%d: \",i);\n            for(int j=1;j<=cnt[i];j++)\n                printf(\"%d \",result[i][j]);\n            printf(\"\\n\");\n        }\n        return 0;\n    }\n\n```",
        "postTime": 1516284051,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\uff1a\n\n\u603b\u5171 $n$ \u9053\u9898\uff0c\u9898\u76ee\u5206\u4e3a $k$ \u4e2a\u7c7b\u578b\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7c7b\u578b $i$ \u90fd\u6709\u4e00\u4e2a\u9898\u76ee\u6570\u91cf\u7684\n\n\u9650\u5236\uff0c\u9700\u8981 $m$ \u9053\u9898\uff0c\u9009\u51fa\u7684\u65b9\u6848\u9700\u8981\u6ee1\u8db3\u6bcf\u4e2a\u9898\u76ee\u7c7b\u578b\u6570\u91cf\u8fbe\u5230\u7ed9\u5b9a\u8981\u6c42\u6570\n\n\u91cf\uff0c\u9700\u8981\u6c42\u51fa\u4e00\u4e2a\u5408\u6cd5\u7684\u9898\u76ee\u65b9\u6848\u3002\n\n## Solution\uff1a\n\n\u7f51\u7edc\u6d41\u7684\u9898\u76ee\u4e3b\u8981\u9760\u5efa\u6a21\uff0c\u4f46\u5206\u6790\u5efa\u6a21\u601d\u8def\u548c\u8fc7\u7a0b\u662f\u6bd4\u5efa\u6a21\u65b9\u6cd5\u66f4\u91cd\u8981\u7684\u3002\n\n\u603b\u7684\u6765\u8c08\uff0c\u8fd9\u662f\u4e00\u4e2a\u5339\u914d\u95ee\u9898\uff0c\u4ed4\u7ec6\u5206\u6790\uff0c\u6bcf\u79cd\u9898\u76ee\u7c7b\u578b\u90fd\u6709\u4e00\u4e2a\u6570\u91cf\u7684\u9650\u5236\uff0c\u8fd9\n\n\u5c31\u4e0e\u7f51\u7edc\u6d41\u4e2d\u6bcf\u6761\u8fb9\u7684\u5bb9\u91cf\u5f88\u76f8\u4f3c\uff0c\u800c\u95ee\u9898\u4e2d\u5f88\u660e\u663e\u7684\u5212\u5206\u51fa\u4e86\u4e24\u7c7b\u7269\u54c1\uff0c\u4e00\u7c7b\u662f\n\n\u9898\u76ee\uff0c\u4e00\u7c7b\u662f\u9898\u76ee\u7c7b\u578b\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u81ea\u7136\u7684\u5212\u5206\u8fc7\u7a0b\u4e86\uff0c\u5206\u6790\u7ed3\u675f\uff0c\u4e8e\u662f\u53ef\u4ee5\u8003\u8651\n\n\u4f7f\u7528\u7f51\u7edc\u6d41\u6c42\u89e3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u4e0b\u9762\u5c31\u662f\u5982\u4f55\u5efa\u56fe\u4e86\uff0c\u524d\u9762\u8bf4\u5230\uff0c\u95ee\u9898\u5212\u5206\u4e3a\u4e86\u4e24\u7c7b\u70b9\uff0c\u6545\u5efa\u7acb\u4e00\u4e2a\u6e90\u70b9 $S$\uff0c\u7531\n\n\u8be5\u70b9 $S$ \u5411\u6bcf\u9053\u9898\u8fde\u4e00\u6761\u8fb9\uff0c\u800c\u9898\u76ee\u53ea\u80fd\u4e3a\u4e00\u9053\uff0c\u4e8e\u662f\u8be5\u8fb9\u5bb9\u91cf\u4e3a $1$ \u3002\n\n\u518d\u8003\u8651\u4e24\u79cd\u70b9\u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u6bcf\u9053\u9898\u53ea\u80fd\u5bf9\u5e94\u552f\u4e00\u7684\u4e00\u79cd\u9898\u76ee\u7c7b\u578b\uff0c\u6240\u4ee5\u6bcf\u9053\u9898\u5411\u81ea\n\n\u5df1\u6240\u5c5e\u7684\u9898\u76ee\u7c7b\u578b\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\u3002\n\n\u6700\u540e\u5c31\u662f\u901a\u5411\u6c47\u70b9 $T$ \u7684\u95ee\u9898\u4e86\uff0c\u6bcf\u79cd\u7c7b\u578b $i$ \u9700\u8981 $a_i$ \u9053\u9898\uff0c\u53ea\u9700\u5c06\u6bcf\u79cd\n\n\u7c7b\u578b\u5411\u6c47\u70b9 $T$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $a_i$ \u7684\u8fb9\u5373\u53ef\uff0c\u4e0b\u9762\u662f\u6211\u7684\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define M 1000000\nusing namespace std;\nint k,n,m,S,T,first[M],nex[M],v[M],now[M],C,p;\nint num=1,A,B;\nint ans,w[M],dep[M];\nint INF=999999999;\nvector<int>vec[10000];\nvoid Add(int s,int e,int cd)\n{\n\tnex[++num]=first[s];\n\tfirst[s]=num;\n\tv[num]=e;\n\tw[num]=cd;\n}\nbool bfs(int s,int t)\n{\n\tmemset(dep,0,sizeof(dep));\n\tqueue<int>q;\n\tdep[s]=1;\n\tq.push(s);\n\tnow[s]=first[s];\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=first[x];i;i=nex[i])\n\t\t{\n\t\t\tif(w[i]>0&&dep[v[i]]==0) \n\t\t\t{\n\t\t\t\tnow[v[i]]=first[v[i]];\n\t\t\t\tdep[v[i]]=dep[x]+1;\n\t\t\t\tq.push(v[i]);\n\t\t\t\tif(v[i]==t) return 1; \n\t\t\t}\n\t\t}\n\t} \n\treturn 0;\n}\nint dfs(int s,int t,int flow) \n{\n\tif(s==t||!flow) return flow;\n\tint b=0,mmin;\n\tfor(int i=now[s];i;i=nex[i])\n\t{\n\t\tnow[s]=i;\n\t\tif(dep[v[i]]==dep[s]+1&&w[i]>0)\n\t\t{\n\t\t\tmmin=dfs(v[i],t,min(flow,w[i]));\n\t\t\tw[i]-=mmin;\n\t\t\tw[i^1]+=mmin;\n\t\t\tb=b+mmin;\n\t\t\tflow-=mmin;\n\t\t\tif(!flow) break;\n\t\t}\n\t}\n\treturn b;\n}\nint main()\n{\n    scanf(\"%d%d\",&k,&n);\n    S=2*n+1;T=2*n+2;\n    for(int i=1;i<=k;i++)\n    {\n    \tscanf(\"%d\",&A);\n    \tAdd(i+n,T,A);\n    \tAdd(T,i+n,0);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&p);\n\t\tAdd(S,i,1);\n\t\tAdd(i,S,0);\n\t\tfor(int j=1;j<=p;j++)\n\t\t{\n\t\t\tscanf(\"%d\",&A);\n\t\t\tAdd(i,A+n,1);\n\t\t\tAdd(A+n,i,0);\n\t\t}\n\t}\n\twhile(bfs(S,T))\n\t{\n\t\tans=ans+dfs(S,T,INF);\n\t}\n\tif(ans) \n\t{\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tfor(int j=first[i];j;j=nex[j])\n\t\t\t{\n\t\t\t\tif(w[j]==0&&w[j^1]==1)\n\t\t\t\t{\n\t\t\t\t\tvec[v[j]-n].push_back(i);\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t\tfor(int i=1;i<=k;i++)\n\t\t{\n\t\t    printf(\"%d: \",i);\n\t\t\tfor(vector<int>::iterator j=vec[i].begin();j!=vec[i].end();j++)\n\t\t\t{\n\t\t\t\tprintf(\"%d \",(*j));\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\telse cout<<\"No Solution!\";\n    return 0;\n}\n```\n",
        "postTime": 1614766497,
        "uid": 213256,
        "name": "Constant",
        "ccfLevel": 7,
        "title": "P2763 \u8bd5\u9898\u5e93\u95ee\u9898"
    },
    {
        "content": "\u672c\u9898\u5efa\u6a21\u6bd4\u8f83\u5e38\u89c4\uff1a\n\n\u6bcf\u9053\u9898\u9009\u4e00\u6b21\uff0c\u6240\u4ee5\u6e90\u70b9\u8fde\u9898\uff0c\u8fb9\u6743\u4e3a 1 \n\n\u6bcf\u9053\u9898\u53ea\u80fd\u5bf9\u4e00\u4e2a\u7c7b\u522b\u4f5c\u8d21\u732e\uff0c\u6240\u4ee5\u9898\u8fde\u5bf9\u5e94\u7c7b\u522b\uff0c\u8fb9\u6743\u4e3a 1 \n\n\u7c7b\u522b\u6709\u8981\u6c42\u5927\u5c0f\uff0c\u6240\u4ee5\u7c7b\u522b\u8fde\u6c47\u70b9\uff0c\u8fb9\u6743\u4e3a\u8be5\u7c7b\u522b\u9700\u8981\u7684\u6570\u91cf\n\n\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u5efa\u6a21\u7684\u7ec6\u8282\u3002\n\n**\u8fdb\u5165\u6b63\u9898\uff1a**\n\n## \u8bba\u9884\u6d41\u63a8\u8fdb\u8bb0\u5f55\u65b9\u6848\n\n _\u9884\u6d41\u63a8\u8fdb\u771f\u662f\u4e2a\u5f88\u7384\u5b66\u7684\u4e1c\u897f_ \n\n~~\u4f17\u6240\u5468\u77e5\uff0c~~ \u9884\u6d41\u63a8\u8fdb\u5728\u63a8\u6d41\u7684\u65f6\u5019\u4f1a\u66f4\u65b0\u4e00\u4e9b\u70b9\u7684\u9ad8\u5ea6\uff0c\u8fd8\u4f1a\u628a\u4e00\u4e9b\u70b9\u79fb\u51fa\u7f51\u7edc\u3002\u540c\u65f6\uff0c\u5b83\u63a8\u51fa\u4e00\u6761\u8fb9\u7684\u6d41\u540e\u4f1a\u76f8\u5e94\u7684\u66f4\u65b0\u53cd\u5411\u8fb9\u6d41\u7684\u5927\u5c0f\u3002\n\n\n\u56e0\u6b64\u4f7f\u7528\u9884\u6d41\u63a8\u8fdb\u6765\u5bfb\u627e\u65b9\u6848\u4e00\u822c\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\n\n1. \u53cd\u5411\u8fb9\u4e0a\u662f\u5426\u6709\u6d41\n\n2. \u70b9\u662f\u5426\u5728\u7f51\u7edc\u5185\n\n\u7136\u800c\u672c\u9898\u7684~~\u5947\u7279~~\u5efa\u6a21\u4f7f\u5f97\u8fd9\u4e24\u79cd\u57fa\u672c\u7684\u5224\u5b9a\u65b9\u5f0f\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\n\n\u901a\u8fc7\u5224\u65ad\u8fb9\u4e0a\u7684\u6d41\u6765\u8f93\u51fa\u65b9\u6848\u7684\u8bdd\uff0c\u6837\u4f8b\u8f93\u51fa\u5c31\u662f\u8fd9\u6837\uff1a\n\n```latex\n1: 1 13 14\n2: 9 10 11\n3: 2 3 4 5 6 7 8 12 15\n```\n\n\u800c\u901a\u8fc7\u5224\u65ad\u70b9\u662f\u5426\u5728\u7f51\u7edc\u4e2d\u6765\u8f93\u51fa\u5c31\u662f\u8fd9\u6837\uff1a\n\n```\n1: \n2: \n3: \n```\n\n~~\u5c31\u633a\u79bb\u8c31\u7684~~\n\n**\u6211\u731c\u6d4b**\uff0c\u5224\u65ad\u8fb9\u4e0a\u7684\u6d41\u6765\u8f93\u51fa\u65b9\u6848\u4e4b\u6240\u4ee5\u4e0d\u53ef\u884c\u662f\u56e0\u4e3a\u5b9e\u9645\u4e0a\u6709\u591a\u79cd\u7ec4\u5408\u53ef\u4ee5\u8fbe\u5230\u7b54\u6848\u7684\u8981\u6c42\uff0c\u6240\u4ee5\u6700\u540e\u8f93\u51fa\u65f6\u76f8\u5f53\u4e8e\u628a\u6240\u6709\u7b54\u6848\u7ec4\u5408\u8d77\u6765\u8f93\u51fa\u4e86\u3002\n\n\u5bf9\u5e94\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u907f\u514d\u8f93\u51fa\u591a\u4f59\u7684\u70b9\uff1a\u6dfb\u52a0\u4e00\u4e2a\u8ba1\u6570\u6570\u7ec4\u6765\u8ba1\u7b97\u8f93\u51fa\u7684\u70b9\u662f\u5426\u8db3\u591f\u3002\n\n\u6700\u540e\u7684\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a ~~\uff08\u8bdd\u8bf4\u771f\u7684\u4f1a\u6709\u4eba\u5199\u8fd9\u9898\u7528 HLPP \u5417\uff09~~\n\n```cpp\n#include<bits/stdc++.h>\n#define ite vector<Edge>::iterator\n#define ith list<int>::iterator\nusing namespace std;\n\nconst int INF=INT_MAX;\n\nint n,m,s,t,u,v,w,highest,now_height,tmp,N,ans,sum,k,use[100005];\n\nstruct Edge\n{\n\tint next,targ,wght;\n\tEdge(int n,int t,int w): next(n),targ(t),wght(w) {}\n};\n\nqueue<int>q;\n\nlist<int>h[100005];\n\nvector<int>l,ph,gap,bs[100005];\n\nvector<Edge>head[100005];\n\nvector<list<int>::iterator>it;\n\nvoid add(int u,int v,int w)\n{\n\thead[u].push_back(Edge(head[v].size(),v,w));\n\thead[v].push_back(Edge(head[u].size()-1,u,0));\n}\n\nvoid relabel()\n{\n\tgap.assign(n+5,0);\n\tph.assign(n+5,n);\n\tph[t]=0;\n\tq.push(t);\n\twhile(!q.empty())\n\t{\n\t\ttmp=q.front();\n\t\tq.pop();\n\t\tfor(ite i=head[tmp].begin();i!=head[tmp].end();i++)\n\t\t\tif(ph[i->targ]==n && head[i->targ][i->next].wght)\n\t\t\t{\n\t\t\t\tph[i->targ]=ph[tmp]+1;\n\t\t\t\tgap[ph[i->targ]]++;\n\t\t\t\tq.push(i->targ);\n\t\t\t}\n\t}\n\tfor(int i=s;i<=t;i++)\n\t{\n\t\tbs[i].clear();\n\t\th[i].clear();\n\t}\n\tfor(int i=s;i<=t;i++)\n\t\tif(ph[i]<n)\n\t\t{\n\t\t\tit[i]=h[ph[i]].insert(h[ph[i]].begin(),i);\n\t\t\tif(l[i])\n\t\t\t\tbs[ph[i]].push_back(i);\n\t\t}\n\thighest=now_height=ph[tmp];\n}\n\nvoid push(int u,Edge &e)\n{\n\tint v=e.targ,df=min(l[u],e.wght);\n\tl[u]-=df;\n\tl[v]+=df;\n\te.wght-=df;\n\thead[v][e.next].wght+=df;\n\tif(l[v] && l[v]==df)\n\t\tbs[ph[v]].push_back(v);\n}\n\nvoid push(int u)\n{\n\tint new_height=n,u_height=ph[u];\n\tfor(ite i=head[u].begin();i!=head[u].end();i++)\n\t\tif(i->wght)\n\t\t{\n\t\t\tif(ph[i->targ]==ph[u]-1)\n\t\t\t{\n\t\t\t\tpush(u,*i);\n\t\t\t\tif(!l[u])\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t\tnew_height=min(new_height,ph[i->targ]+1);\n\t\t}\n\tif(gap[u_height]==1)\n\t{\n\t\tfor(int i=u_height;i<=highest;i++)\n\t\t\tfor(ith p=h[i].begin();p!=h[i].end();p++)\n\t\t\t{\n\t\t\t\tgap[ph[*p]]--;\n\t\t\t\tph[*p]=n;\n\t\t\t}\n\t\thighest=u_height-1;\n\t}\n\telse\n\t{\n\t\tgap[u_height]--;\n\t\tit[u]=h[u_height].erase(it[u]);\n\t\tph[u]=new_height;\n\t\tif(ph[u]==n)\n\t\t\treturn;\n\t\tgap[ph[u]]++;\n\t\tit[u]=h[ph[u]].insert(h[ph[u]].begin(),u);\n\t\thighest=max(highest,now_height=new_height);\n\t\tbs[ph[u]].push_back(u);\n\t}\n}\n\nint HLPP()\n{\n\tnow_height=highest=0;\n\tph.assign(n+5,0);\n\tph[s]=n;\n\tit.resize(n+5);\n\tfor(int i=s;i<=t;i++)\n\t\tif(i!=s)\n\t\t\tit[i]=h[ph[i]].insert(h[ph[i]].begin(),i);\n\tgap.assign(n+5,0);\n\tgap[0]=n-1;\n\tl.assign(n+5,0);\n\tl[s]=INF;\n\tl[t]=-INF;\n\tfor(ite i=head[s].begin();i!=head[s].end();i++)\n\t\tpush(s,*i);\n\trelabel();\n\tfor(int i;now_height;)\n\t{\n\t\tif(bs[now_height].empty())\n\t\t\tnow_height--;\n\t\telse\n\t\t{\n\t\t\ti=bs[now_height].back();\n\t\t\tbs[now_height].pop_back();\n\t\t\tpush(i);\n\t\t}\n\t}\n\treturn l[t]+INF;\n}\n\nint main()\n{\n\tcin>>k>>n;\n\ts=0;\n\tt=n+k+1;\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tcin>>tmp;\n\t\tsum+=tmp;\n\t\tadd(i+n,t,tmp);\n\t\tuse[i]=tmp;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>m;\n\t\tadd(s,i,1);\n\t\tfor(int j=1;j<=m;j++)\n\t\t{\n\t\t\tcin>>tmp;\n\t\t\tadd(i,tmp+n,1);\n\t\t}\n\t}\n\tN=n;\n\tn=t+1;\n\tans=HLPP();\n\tif(ans!=sum)\n\t{\n\t\tcout<<\"No Solution!\";\n\t\treturn 0;\n\t}\n\tn=N;\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tcout<<i<<\": \";\n\t\tfor(ite p=head[i+n].begin();p!=head[i+n].end() && use[i];p++)\n\t\t\tif(p->targ>=1 && p->targ<=n && p->wght)\n\t\t\t{\n\t\t\t\tcout<<p->targ<<\" \";\n\t\t\t\tuse[i]--;\n\t\t\t}\n\t\tcout<<endl;\n\t}\n}\n```\n",
        "postTime": 1607693513,
        "uid": 252015,
        "name": "Shiroko",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "### 3.\u8bd5\u9898\u5e93\u95ee\u9898\n\n\u9898\u76ee [$link$](https://www.luogu.com.cn/problem/P2763)\n\n\u5982\u679c\u6211\u4eec\u628a\u8bd5\u9898\u7c7b\u578b\u548c\u8bd5\u9898\u90fd\u62bd\u8c61\u4e3a\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u5728\u4e24\u4e2a\u70b9\u96c6\u4e4b\u95f4\u6c42\u5339\u914d\uff0c\u70b9\u96c6\u5185\u90e8\u4e0d\u80fd\u6709\u5339\u914d\u5173\u7cfb\u3002\n\n\u5177\u6709\u70b9\u96c6\u53ef\u4e8c\u5206\u7684\u7279\u5f81\uff0c\u6c42\u67d0\u79cd\u5339\u914d\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7f51\u7edc\u6d41\u3002\n\n**\u5177\u4f53\u5efa\u56fe\u65b9\u6cd5**\uff1a\n\n\u5efa\u7acb\u8d85\u7ea7\u6e90\u6c47\u70b9 $S,T$\n\n\u7531 $S$ \u5411\u6bcf\u4e2a\u8bd5\u9898\u7c7b\u578b\u7684\u70b9\u90fd\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a\u9700\u9009\u8bd5\u9898\u6570\u7684\u8fb9(\u6bcf\u4e2a\u7c7b\u578b\u6700\u591a\u9009\u8fd9\u4e48\u591a\u9898)\uff0c\u518d\u7531\u6bcf\u4e2a\u8bd5\u9898\u5411 $T$ \u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9(\u6bcf\u4e2a\u9898\u53ea\u80fd\u9009\u4e00\u6b21)\u3002\n\n\u6309\u7167\u5bf9\u5e94\u5173\u7cfb\u5728\u56fe\u4e2d\u4ece\u7c7b\u578b\u5411\u9898\u8fde\u8fb9\u3002\n\n\u5efa\u5b8c\u56fe\uff0c\u6211\u4eec\u53d1\u73b0**\u539f\u95ee\u9898\u4e2d\uff0c\u6bcf\u4e00\u79cd\u5404\u7c7b\u578b\u9009\u9898\u6570\u5c0f\u4e8e\u9898\u9762\u4e2d\u7ed9\u7684\u9700\u9009\u8bd5\u9898\u6570\u7684\u9009\u9898\u65b9\u6848\uff0c\u5728\u8fd9\u4e2a\u56fe\u4e2d\u90fd\u80fd\u627e\u5230\u5bf9\u5e94\u7684\u53ef\u884c\u6d41\u4e0e\u4e4b\u5bf9\u5e94**\uff0c\u4e14**\u6d41\u7684\u503c\u5bf9\u5e94\u4e86\u9009\u9898\u603b\u6570\u91cf**\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u653e\u5fc3\u5927\u80c6\u7684\u6c42\u6700\u5927\u6d41\u3002\n\n**\u65e0\u89e3\u60c5\u51b5**\uff1a\u5c31\u662f\u6700\u5927\u6d41\u7684\u503c\u5c0f\u4e8e\u4e0e\u6e90\u70b9\u8fde\u63a5\u7684\u6240\u6709\u8fb9\u7684\u5bb9\u91cf\u548c\u3002\n\n**\u5bfb\u627e\u65b9\u6848**\uff1a\u53ea\u9700\u8981\u904d\u5386\u8bd5\u9898\u7c7b\u578b\u70b9\uff0c\u518d\u904d\u5386\u4e0e\u5b83\u4eec\u76f8\u90bb\u7684\u8fb9\uff0c\u82e5\u5b58\u5728\u4e00\u6761\u8fb9\u6ee1\u6d41\uff0c\u8f93\u51fa\u7aef\u70b9\u6807\u53f7\u3002\u7531\u4e8e\u6211\u4eec\u662f\u5728\u6b8b\u7559\u7f51\u7edc\u4e2d\u64cd\u4f5c\u7684\uff0c\u8bb0\u5f97\u907f\u5f00\u6e90\u70b9\u3002\n\ncode(Dinic)\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N=1e4,M=2e4+1e3,INF=1e8;\nint head[N],ver[M],nxt[M],cc[M],tot=0;\nvoid add(int x,int y,int c)\n{\n\tver[tot]=y; cc[tot]=c; nxt[tot]=head[x]; head[x]=tot++;\n\tver[tot]=x; cc[tot]=0; nxt[tot]=head[y]; head[y]=tot++;\n}\nint q[N],d[N],cur[N];\nint n,k,S,T;\n\nbool bfs()\n{\n\tint hh=0,tt=0;\n\tmemset(d,-1,sizeof d);\n\tq[0]=S,d[S]=0,cur[S]=head[S];\n\twhile(hh<=tt)\n\t{\n\t\tint x=q[hh++];\n\t\tfor(int i=head[x];~i;i=nxt[i])\n\t\t{\n\t\t\tint y=ver[i];\n\t\t\tif(d[y]==-1 && cc[i])\n\t\t\t{\n\t\t\t\td[y]=d[x]+1;\n\t\t\t\tcur[y]=head[y];\n\t\t\t\tif(y==T) return 1;\n\t\t\t\tq[++tt]=y;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint find(int u,int lim)\n{\n\tif(u==T) return lim;\n\tint flow=0;\n\tfor(int i=cur[u];~i&&flow<lim;i=nxt[i])\n\t{\n\t\tcur[u]=i;\n\t\tint y=ver[i];\n\t\tif(d[y]==d[u]+1 && cc[i])\n\t\t{\n\t\t\tint tmp=find(y,min(cc[i],lim-flow));\n\t\t\tif(!tmp) d[y]=-1;\n\t\t\tcc[i]-=tmp;cc[i^1]+=tmp;flow+=tmp;\n\t\t}\n\t}\n\treturn flow;\n}\n\nint dinic()\n{\n\tint res=0,flow;\n\twhile(bfs())\n\t{\n\t\twhile(flow=find(S,INF)) res+=flow;\n\t}\n\treturn res;\n}\n\nint main()\n{\n\tmemset(head,-1,sizeof head);\n\tscanf(\"%d%d\",&k,&n);\n\tT=n+k+1,S=0;\n\tint sum=0;\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tadd(S,i,x);\n\t\tsum+=x;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint p;\n\t\tadd(k+i,T,1);\n\t\tscanf(\"%d\",&p);\n\t\tfor(int j=1;j<=p;j++)\n\t\t{\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tadd(x,k+i,1);\n\t\t}\n\t}\n\n\tint ans=dinic();\n\tif(ans<sum) printf(\"No Solution!\\n\");\n\telse\n\t{\n\t\tfor(int x=1;x<=k;x++)\n\t\t{\n\t\t\tprintf(\"%d:\",x);\n\t\t\tfor(int i=head[x];~i;i=nxt[i])\n\t\t\t\tif(!cc[i] && ver[i]!=S) printf(\"%d \",ver[i]-k);\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n}\n```",
        "postTime": 1612399067,
        "uid": 278259,
        "name": "RemiliaScarlet\u25ce",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "> \u4f20\u9001\u95e8 [$\\looparrowright$](https://www.luogu.com.cn/problem/P2763)  \n\n## \u9898\u76ee\u63cf\u8ff0  \n### \u95ee\u9898\u63cf\u8ff0  \n&emsp;&emsp;\u5047\u8bbe\u4e00\u4e2a\u8bd5\u9898\u5e93\u4e2d\u6709 $n$ \u9053\u8bd5\u9898\u3002\u6bcf\u9053\u8bd5\u9898\u90fd\u6807\u660e\u4e86\u6240\u5c5e\u7c7b\u522b\u3002\u540c\u4e00\u9053\u9898\u53ef\u80fd\u6709\u591a\u4e2a\u7c7b\u522b\u5c5e\u6027\u3002\u73b0\u8981\u4ece\u9898\u5e93\u4e2d\u62bd\u53d6 $m$ \u9053\u9898\u7ec4\u6210\u8bd5\u5377\u3002\u5e76\u8981\u6c42\u8bd5\u5377\u5305\u542b\u6307\u5b9a\u7c7b\u578b\u7684\u8bd5\u9898\u3002\u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\u7ec4\u5377\u7b97\u6cd5\u3002  \n### \u7f16\u7a0b\u4efb\u52a1  \n&emsp;&emsp;\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7ec4\u5377\u8981\u6c42\uff0c\u8ba1\u7b97\u6ee1\u8db3\u8981\u6c42\u7684\u7ec4\u5377\u65b9\u6848\u3002  \n## \u8f93\u5165\u683c\u5f0f  \n&emsp;&emsp;\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6b63\u6574\u6570 $k$ \u548c $n$\u3002$k$ \u8868\u793a\u9898\u5e93\u4e2d\u8bd5\u9898\u7c7b\u578b\u603b\u6570\uff0c$n$ \u8868\u793a\u9898\u5e93\u4e2d\u8bd5\u9898\u603b\u6570\u3002  \n&emsp;&emsp;\u7b2c\u4e8c\u884c\u6709 $k$ \u4e2a\u6b63\u6574\u6570\uff0c\u7b2c $i$ \u4e2a\u6b63\u6574\u6570\u8868\u793a\u8981\u9009\u51fa\u7684\u7c7b\u578b $i$ \u7684\u9898\u6570\u3002\u8fd9 $k$ \u4e2a\u6570\u76f8\u52a0\u5c31\u662f\u8981\u9009\u51fa\u7684\u603b\u9898\u6570 $m$\u3002  \n&emsp;&emsp;\u63a5\u4e0b\u6765\u7684 $n$ \u884c\u7ed9\u51fa\u4e86\u9898\u5e93\u4e2d\u6bcf\u4e2a\u8bd5\u9898\u7684\u7c7b\u578b\u4fe1\u606f\u3002\u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570 $p$ \u8868\u660e\u8be5\u9898\u53ef\u4ee5\u5c5e\u4e8e $p$ \u7c7b\uff0c\u63a5\u7740\u7684 $p$ \u4e2a\u6570\u662f\u8be5\u9898\u6240\u5c5e\u7684\u7c7b\u578b\u53f7\u3002  \n\n## \u8f93\u51fa\u683c\u5f0f  \n&emsp;&emsp;\u8f93\u51fa\u5171 $k$ \u884c\uff0c\u7b2c $i$ \u884c\u8f93\u51fa ```i:``` \u540e\u63a5\u7c7b\u578b $i$ \u7684\u9898\u53f7\u3002  \n&emsp;&emsp;\u5982\u679c\u6709\u591a\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\u65b9\u6848\uff0c\u53ea\u8981\u8f93\u51fa\u4e00\u4e2a\u65b9\u6848\u3002  \n&emsp;&emsp;\u5982\u679c\u95ee\u9898\u65e0\u89e3\uff0c\u5219\u8f93\u51fa```No Solution!```\u3002  \n\n## \u8f93\u5165\u8f93\u51fa\u6837\u4f8b  \n### \u8f93\u5165 \\#1  \n> 3 15  \n> 3 3 4  \n> 2 1 2  \n> 1 3  \n> 1 3  \n> 1 3   \n> 1 3  \n> 3 1 2 3  \n> 2 2 3  \n> 2 1 3  \n> 1 2  \n> 1 2  \n> 2 1 2  \n> 2 1 3  \n> 2 1 2  \n> 1 1  \n> 3 1 2 3  \n\n## \u8f93\u51fa \\#1  \n> 1: 1 6 8  \n> 2: 7 9 10  \n> 3: 2 3 4 5  \n\n## \u8bf4\u660e/\u63d0\u793a  \n&emsp;&emsp;$2\\leqslant k \\leqslant 20$\uff0c$k \\leqslant n \\leqslant 10^3$\u3002  \n## \u5206\u6790  \n&emsp;&emsp;\u9996\u5148\u8981\u660e\u786e\u4e00\u4e0b\u9898\u610f\uff0c\u9898\u76ee\u63cf\u8ff0\u6709\u4e00\u4e9b\u4e0d\u4e25\u8c28\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6bcf\u9053\u9898\u867d\u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2a\u7c7b\u578b\uff0c\u4f46\u5374\u53ea\u80fd\u4e0e\u4e00\u79cd\u7c7b\u578b\u76f8\u5339\u914d\uff0c\u5373\u6700\u540e\u8f93\u51fa\u65f6\u4e0d\u80fd\u5728\u4e0d\u540c\u79cd\u7c7b\u578b\u4e2d\u51fa\u73b0\u540c\u4e00\u9053\u9898\u3002  \n&emsp;&emsp;\u6bcf\u4e2a\u7c7b\u578b\u4e4b\u95f4\u548c\u6bcf\u9053\u9898\u76ee\u76f4\u63a5\u90fd\u4e0d\u4f1a\u6709\u5185\u5728\u8054\u7cfb\uff0c\u6b64\u9898\u8981\u6c42\u8fdb\u884c\u7c7b\u578b\u4e0e\u9898\u76ee\u7684\u5339\u914d\uff1a\u8981\u6c42\u4e00\u4e2a\u7c7b\u578b\u6709\u591a\u4e2a\u9898\u76ee\uff0c\u53ef\u4ee5\u5efa\u7acb\u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d\u6a21\u578b\u3002\u9996\u5148\u89c4\u5b9a\u8282\u70b9\u7f16\u53f7\uff0c\u7f16\u53f7\u4e3a $1\\sim n$ \u7684\u8282\u70b9\u8868\u793a\u9898\u76ee\uff0c\u7f16\u53f7\u4e3a $n+1\\sim n+k$ \u7684\u8282\u70b9\u8868\u793a\u7c7b\u578b\u3002\u82e5\u9898\u76ee $i$ \u5c5e\u4e8e\u7c7b\u578b $j$\uff0c\u5219\u5efa\u7acb\u4e00\u6761 $i$ \u5230 $j+n$ \u7684\u8fb9\u3002  \n&emsp;&emsp;\u7f51\u7edc\u6d41\u662f\u89e3\u51b3\u4e8c\u5206\u56fe\u6700\u5e38\u7528\u4e5f\u662f\u8f83\u4e3a\u9ad8\u6548\u7684\u65b9\u6cd5\u3002\u8bbe\u8d85\u7ea7\u6e90\u70b9 $s$\uff0c\u7f16\u53f7\u4e3a $0$\uff1b\u8d85\u7ea7\u6c47\u70b9 $t$\uff0c\u7f16\u53f7\u4e3a $n+k+1$\u3002\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u8bbe\u7f6e\u5404\u6761\u8fb9\u7684\u5bb9\u91cf\uff0c\u5176\u6838\u5fc3\u662f\uff1a**\u901a\u8fc7\u8bbe\u7f6e\u5bb9\u91cf\u6765\u4fdd\u8bc1\u7f51\u7edc\u6d41\u91cf\u5177\u6709\u5b9e\u9645\u610f\u4e49**\u3002\u4ee4 $s$ \u5411 $1\\sim n$ \u7684\u8282\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a $1$\uff0c\u9898\u76ee\u8282\u70b9\u548c\u7c7b\u578b\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u5bb9\u91cf\u4e5f\u8bbe\u7f6e\u4e3a $1$\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u4e00\u9053\u9898\u76ee\u81f3\u591a\u53ea\u4f1a\u88ab\u4f7f\u7528\u4e00\u6b21\u3002\u63a5\u7740\u4ee4 $n+1\\sim n+k$ \u7684\u8282\u70b9\u5411 $t$ \u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u5404\u4e2a\u7c7b\u578b\u9700\u8981\u7684\u9898\u76ee\u6570\u91cf\uff1b\u8fd9\u5c31\u610f\u5473\u7740\u7f51\u7edc\u6700\u5927\u6d41\u4e00\u5b9a\u4e0d\u8d85\u8fc7 $m$\uff0c\u5e76\u4e14\uff0c\u5f53\u6700\u5927\u6d41\u8fbe\u5230 $m$ \u65f6\uff0c\u6d41\u5165 $n+1\\sim n+k$ \u4e2d\u4efb\u610f\u8282\u70b9\u7684\u6d41\u91cf\u5c31\u7b49\u4e8e\u8be5\u70b9\u8868\u793a\u7684\u7c7b\u578b\u9700\u8981\u7684\u9898\u76ee\u6570\u91cf\u3002  \n&emsp;&emsp;\u5efa\u56fe\u5b8c\u6210\u540e\uff0c\u7528 $\\text{Dinic}$ \u7b97\u6cd5\u8ba1\u7b97\u51fa\u6700\u5927\u6d41 $\\mathrm{maxflow}$\uff0c\u82e5 $\\text{maxflow}=m$\uff0c\u5219\u5b58\u5728\u5339\u914d\u65b9\u6848\uff1b\u5426\u5219\uff0c\u4e0d\u5b58\u5728\u3002\u5f53\u5b58\u5728\u5339\u914d\u65b9\u6848\u65f6\uff0c\u9700\u8981\u8003\u8651\u5339\u914d\u65b9\u6848\u5982\u4f55\u8f93\u51fa\u3002\u6211\u4eec\u6ce8\u610f\u5230\uff0c$\\text{Dinic}$ \u7b97\u6cd5\u5efa\u8fb9\u65f6\uff0c\u4f1a\u76f8\u5e94\u5efa\u7acb\u4e00\u6761\u53cd\u5411\u8fb9\uff0c\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u589e\u5e7f\u65f6\uff0c\u53cd\u5411\u8fb9\u7684\u5bb9\u91cf\u4f1a\u88ab\u6539\u53d8\uff1b\u53cd\u5411\u8fb9\u5bb9\u91cf\u521d\u59cb\u4e3a $0$\uff0c\u82e5\u53cd\u5411\u8fb9\u5bb9\u91cf\u4e0d\u4e3a\u96f6\uff0c\u8bf4\u660e\u5176\u5bf9\u5e94\u7684\u6b63\u5411\u8fb9\u5bf9\u6700\u5927\u6d41\u6709\u8d21\u732e\u3002\u56e0\u6b64\uff0c\u4e0d\u59a8\u679a\u4e3e\u7531\u7c7b\u578b\u8282\u70b9\u6d41\u5411\u9898\u76ee\u8282\u70b9\u7684\u53cd\u5411\u8fb9\uff0c\u82e5\u53cd\u5411\u8fb9\u6307\u5411\u4e00\u4e2a\u9898\u76ee\u8282\u70b9\uff0c\u4e14\u5176\u4e0a\u7684\u6d41\u91cf\u4e0d\u4e3a\u96f6\uff0c\u8bf4\u660e\u8be5\u9898\u76ee\u4e0e\u8be5\u7c7b\u578b\u5339\u914d\u3002   \n\n## \u4ee3\u7801   \n```cpp\n/******************************************************************\nCopyright: 11D_Beyonder All Rights Reserved\nAuthor: 11D_Beyonder\nProblem ID: \u6d1b\u8c37 P2763\nDate: 7/25/2020 \nDescription: Maximum Flow\n*******************************************************************/\n#include<cstring>\n#include<iostream>\n#include<queue>\n#include<cstdio>\nusing namespace std;\nconst int N=1006;\nconst int inf=0x3f3f3f3f;\nstruct E\n{\n\tint to;\n\tint cap;\n\tint Next;\n}edge[N*N<<1];\nint head[N],tot;\nint s,t;//\u6e90\u70b9 \u6c47\u70b9\nint depth[N];//\u8282\u70b9\u5c42\u6b21\nint n,k,m;\nvoid init();\ninline void add_edge(int,int,int);\nbool bfs();\nint dfs(int x,int flow);\nint Dinic();\nint main()\n{\n\tcin>>k>>n;\n\tinit();\n\tint i,j;\n\tfor(i=1;i<=k;i++)\n\t{\n\t\tint num;//\u6bcf\u79cd\u7c7b\u578b\u7684\u8981\u6c42\u6570\u91cf\n\t\tscanf(\"%d\",&num);\n\t\tm+=num;\n\t\tadd_edge(n+i,t,num);\n\t}\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tint p;\n\t\tscanf(\"%d\",&p);\n\t\twhile(p--)\n\t\t{\n\t\t\tint type;\n\t\t\tscanf(\"%d\",&type);\n\t\t\tadd_edge(i,type+n,1);\n\t\t}\n\t}\n\tfor(i=1;i<=n;i++) add_edge(s,i,1);\n\tif(Dinic()==m)\n\t{\n\t\t//\u679a\u4e3e\u7c7b\u578b\n\t\tfor(i=1;i<=k;i++)\n\t\t{\n\t\t\tprintf(\"%d: \",i);\n\t\t\t//\u8bbf\u95ee\u7c7b\u578b\u6307\u5411\u9898\u76ee\u7684\u8fb9\n\t\t\tfor(j=head[i+n];~j;j=edge[j].Next)\n\t\t\t{\n\t\t\t\tif(edge[j].to>n||edge[j].to==s) continue;\n\t\t\t\tif(edge[j].cap) printf(\"%d \",edge[j].to);\n\t\t\t}\n\t\t\tputchar('\\n');\n\t\t}\n\t}\n\telse puts(\"No Solution!\");\n\treturn 0;\n}\nvoid init()\n{\n\ttot=1;\n\ts=0;\n\tt=n+k+1;\n\tmemset(head,-1,sizeof(head));\n}\ninline void add_edge(int u,int v,int cap)\n{\n\ttot++;\n\tedge[tot].to=v;\n\tedge[tot].cap=cap;\n\tedge[tot].Next=head[u];\n\thead[u]=tot;\n\t//\u5efa\u7acb\u53cd\u8fb9\n\ttot++;\n\tedge[tot].to=u;\n\tedge[tot].cap=0;\n\tedge[tot].Next=head[v];\n\thead[v]=tot;\n}\nbool bfs()\n{\n\tmemset(depth,0,sizeof(depth));\n\tqueue<int>q;\n\tq.push(s);\n\tdepth[s]=1;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(register int i=head[x];~i;i=edge[i].Next)\n\t\t{\n\t\t\tint y=edge[i].to;\n\t\t\t//\u6b8b\u91cf\u7f51\u7edc\u4e0a\u6784\u5efa\u5206\u5c42\u56fe\n\t\t\tif(edge[i].cap&&!depth[y])\n\t\t\t{\n\t\t\t\tq.push(y);\n\t\t\t\tdepth[y]=depth[x]+1;\n\t\t\t\tif(y==t) return 1;//\u6c47\u70b9\u53ef\u8fbe\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint dfs(int x,int flow)//\u5f53\u524d\u8282\u70b9 \u5f53\u524d\u6d41\u91cf\n{\n\t//dfs \u8fd4\u56de\u6b8b\u91cf\u7f51\u7edc\u4e0a\u53ef\u589e\u5e7f\u7684\u6d41\u91cf\n\tif(x==t) return flow;\n\tint rest=flow;//rest \u5269\u4f59\u6d41\u91cf\n\tint temp;\n\tfor(register int i=head[x];~i&&rest;i=edge[i].Next)\n\t{\n\t\tint y=edge[i].to;\n\t\tif(edge[i].cap&&depth[y]==depth[x]+1)\n\t\t{\n\t\t\ttemp=dfs(y,min(rest,edge[i].cap));\n\t\t\tif(!temp) depth[y]=0;//\u526a\u679d \u53bb\u6389\u589e\u5e7f\u5b8c\u6bd5\u7684\u70b9\n\t\t\tedge[i].cap-=temp;\n\t\t\tedge[i^1].cap+=temp;\n\t\t\trest-=temp;\n\t\t}\n\t}\n\treturn flow-rest;\n}\nint Dinic()\n{\n\tint maxflow=0;\n\twhile(bfs()) maxflow+=dfs(s,inf);\n\treturn maxflow;\n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1595692715,
        "uid": 253240,
        "name": "11D_Beyonder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "## \u8bd5\u9898\u5e93\u95ee\u9898\n### \u9898\u610f\n\n\u6709k\u5f20\u8bd5\u5377\uff0c\u6bcf\u5f20\u4e0a\u8981\u6c42\u6709 $a_i$ \u9053\u9898\uff0c\u4e0d\u80fd\u591a\uff0c\u4e5f\u4e0d\u80fd\u5c11\uff0c\u591a\u4e86\u4f1a\u6491\u6b7b\uff0c\u5c11\u4e86\u4f1a\u997f\u6b7b\u3002\n\n\u4f60\u6709 $n$ \u9053\u9898\uff0c\u6bcf\u9053\u9898\u53ef\u7ed9\u67d0\u4e9b\u8bd5\u5377\uff08\u53ea\u80fd\u7ed9\u5176\u4e2d\u4e00\u5f20\uff09\uff0c\u6c42\u6ee1\u8db3\u9898\u610f\u7684\u4e00\u79cd\u65b9\u6848\u3002\n\n\u662f\u4e0d\u662f\u6572\u597d\u60f3\u3002\u3002\n\n### solution\n\n\u90fd\u6e05\u695a\u662f\u7f51\u7edc\u6d41\u628a\u3002\u3002\u5c31\u76f4\u63a5\u8bf4\u4e86\uff0c\n\n1.\u628a\u9898\u53f7\u8fde\u5411\u8be5\u9898\u53ef\u4f9b\u8bd5\u5377\u7f16\u53f7\uff0c\u6743\u503c\u4e3a $1$ \uff1b\n\n2.\u8bbe\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\uff0c\u8fde\u5411\u6240\u6709\u9898\u53f7\uff0c\u6743\u503c\u4e3a $1$ \uff1b\n\n3.\u8bbe\u4e00\u4e2a\u8d85\u7ea7\u6c47\u70b9\uff0c\u7531\u6240\u6709\u8bd5\u5377\u7f16\u53f7\u8fde\u5411\u5176\uff0c\u6743\u503c\u4e3a\u8be5\u8bd5\u5377\u6240\u9700\u7684\u9898\u76ee\u91cf\u3002\n\n**\u76ee\u6807\u4e4d\u73b0**\n\n\u8dd1\u4e2a\u6700\u5927\u6d41\u5373\u53ef\u6c42\u51fa\u6700\u5927\u5339\u914d\u91cf\u3002\n\n\u4f46\u662f\u6211\u4eec\u8981\u5e72\u4ec0\u4e48\uff0c\u5224\u80fd\u5426\uff0c\u5199\u65b9\u6848\uff01\n\n1.\u5224\u80fd\u5426\uff1a\u6c42\u51fa\u6700\u5927\u5339\u914d\u91cf\u540e\uff0c\u4e0e\u8bd5\u5377\u6240\u9700\u9898\u76ee\u603b\u6570\u6bd4\u8f83\uff0c\u5982\u6ca1\u6709\u8fbe\u5230\u603b\u6570\uff0c\u8bf4\u660e\u6ca1\u6709\u6ee1\u8db3\u65b9\u6848\uff0c\u5373\u53ef\u6563\u82b1\u3002\u3002\n\n2.\u5199\u65b9\u6848\uff1a\u627e\u9898\u8fde\u5411\u8bd5\u5377\u4e14\u662f\u4f7f\u7528\u5b8c\u4e86\u7684\u8fb9\uff0c\u76f4\u63a5\u8f93\u51fa\u9898\u53f7\uff0c\u4e0d\u865a.\uff08\u56e0\u4e3a\u6709 SPJ \u3002\u3002\uff09\n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=2e3+10,M=4e4+2e3+48+10;\nconst int INF=0x3f3f3f3f;\nint n,m,k,s,t,cur[N],gap[N],dep[N],q[N];\n//cur[i]:\u5f53\u524d\u5f27\u4f18\u5316,gap[i]:GAP\u4f18\u5316 \nint fst[N],nxt[M],to[M],val[M],tot=2;\ninline int read()\n{\n\tint s=0,w=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n\treturn s*w;\n}\ninline void add(int u,int v,int w)\n{\n\tnxt[tot]=fst[u];\n\tto[tot]=v,val[tot]=1ll*w;\n\tfst[u]=tot;++tot;\n\tnxt[tot]=fst[v];\n\tto[tot]=u,val[tot]=0;\n\tfst[v]=tot;++tot;\n}\ninline void bfs()\n{\n\tfor(int i=1;i<=n;++i)\n\tdep[i]=q[i]=gap[i]=0;\n\tint hd=0,tl=1;\n\tdep[t]=1,gap[1]=1;q[tl]=t;\n\t//\u8fd9\u662f\u4ece\u6c47\u70b9\u5f00\u59cb\n\twhile(hd<tl)\n\t{\n\t\tint u=q[++hd];\n\t\tfor(int i=fst[u];i;i=nxt[i])\n\t\t{\n\t\t\tint v=to[i];\n\t\t\tif(!dep[v])\n\t\t\t{\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\t++gap[dep[v]];\n\t\t\t\tq[++tl]=v;\n\t\t\t}\n\t\t}\n\t}\n}\nll dfs(int u,ll lim)\n{\n\tif(u==t)return lim;\n\tint ans=0,tmp;\n\tfor(int i=cur[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tcur[u]=i;\n\t\tif(dep[v]==dep[u]-1&&val[i])\n\t\t{\n\t\t\ttmp=dfs(v,min(lim,1ll*val[i]));\n\t\t\tval[i]-=tmp,lim-=tmp;\n\t\t\tans+=tmp,val[i^1]+=tmp;\n\t\t\tif(!lim)break;\n\t\t}\n\t}\n\tif((!ans)||lim)\n\t{\n\t\tif(--gap[dep[u]]==0)dep[s]=n+m+3;\n\t\t++gap[++dep[u]];\n\t}\n\treturn ans;\n}\ninline ll isap()\n{\n\tll ans=0;\n\tbfs();\n\twhile(dep[s]<=n+m+2)\n\t{\n\t\tmemcpy(cur,fst,sizeof(cur));\n\t\tans+=dfs(s,INF);\n\t}\n\treturn ans;\n}\nint main()\n{\n\tm=read(),n=read(),s=0,t=n+m+1;\n\tfor(int i=1;i<=n;++i)add(s,i,1);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint w=read();k+=w;\n\t\tadd(i+n,t,w);\n\t}\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tint p=read();\n\t\tfor(int j=1;j<=p;++j)\n\t\t{\n\t\t\tint id=read();\n\t\t\tadd(i,id+n,1);\n\t\t}\n\t}\n\tll ans=isap();\n\tif(ans!=k)\n\t{\n\t\tputs(\"No Solution!\");\n\t\treturn 0;\n\t}\n\telse\n\t{\n\t\tfor(int id=1;id<=m;++id)\n\t\t{\n\t\t\tprintf(\"%d:\",id);\n\t\t\tfor(int i=fst[id+n];i;i=nxt[i])\n\t\t\t{\n\t\t\t\tint v=to[i];\n\t\t\t\tif(val[i]&&v<=n)\n\t\t\t\tprintf(\" %d\",v);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\u53ea\u6c42\u80fd\u5e2e\u52a9\u5230\u51e0\u4e2a\u4eba\u7f62\u3002\u3002",
        "postTime": 1614765170,
        "uid": 206024,
        "name": "Illusory_dimes",
        "ccfLevel": 7,
        "title": "P2763 \u8bd5\u9898\u5e93\u95ee\u9898 \u9898\u89e3"
    },
    {
        "content": "# \u8bd5\u9898\u5e93\u95ee\u9898\n\n## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a $k$ \u4e2a\u9898\u76ee\u7c7b\u578b\u548c $n$ \u4e2a\u9898\u76ee\u3002\u6bcf\u4e2a\u9898\u76ee\u4f1a\u5bf9\u5e94 $sign$ \u4e2a\u7c7b\u578b\uff0c\u4f46\u662f\u6700\u7ec8\u6bcf\u4e2a\u9898\u76ee\u53ea\u80fd\u5f52\u5c5e\u4e8e\u4e00\u79cd\u7c7b\u578b\uff0c\u4e14\u53ea\u80fd\u88ab\u9009\u62e9\u4e00\u6b21\u3002\n\n\u7ed9\u51fa\u5bf9\u4e8e\u6bcf\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u6240\u9700\u6c42\u7684\u6570\u91cf\uff0c\u6c42\u51fa\u4e00\u79cd\u65b9\u6848\u4f7f\u5176\u6210\u7acb\u3002\n\n## \u5206\u6790\n\n### \u5efa\u56fe\n\n\u6b64\u9898\u5982\u679c\u53bb\u6389\u8f93\u51fa\u65b9\u6848\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a**\u4e8c\u5206\u56fe\u5339\u914d**\u7f51\u7edc\u6d41\u7684\u6a21\u677f\u9898\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u53ef\u4ee5\u628a\u9898\u76ee\u7f16\u53f7\u548c\u9898\u76ee\u7c7b\u578b\u5206\u4e3a\u4e8c\u5206\u56fe\u7684\u4e24\u8fb9\uff0c\u4ece\u800c\u8fdb\u884c\u5339\u914d\u3002\n\n\u5177\u4f53\u5efa\u56fe\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n- \u5efa\u7acb\u4e00\u4e2a**\u8d85\u7ea7\u6e90\u70b9**\u548c\u4e00\u4e2a**\u8d85\u7ea7\u6c47\u70b9**\uff0c\u8d85\u7ea7\u6e90\u70b9\u5411\u8868\u793a\u9898\u76ee\u7684\u70b9\u5404\u8fde\u63a5\u4e00\u6761\u6d41\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u800c\u8868\u793a\u9898\u76ee\u7c7b\u578b\u7684\u70b9\u5411\u8d85\u7ea7\u6c47\u70b9\u540c\u6837\u4e2a\u8fde\u63a5\u4e00\u6761\u6d41\u91cf\u4e3a $1$ \u7684\u8fb9\u3002\n\n- \u5bf9\u4e8e\u6bcf\u4e2a\u9898\u76ee\u5339\u914d\u7684\u6bcf\u79cd\u7c7b\u578b\uff0c\u5206\u522b\u6709\u6bcf\u4e2a\u9898\u76ee\u8fde\u5411\u5176\u6240\u5339\u914d\u7c7b\u578b\u4e00\u6761\u6d41\u91cf\u4e3a $1$ \u7684\u8fb9\u3002\n\n\u5982\u4e0b\u56fe\uff1a\n\n![](https://www.helloimg.com/images/2021/02/28/BwvEWK.md.png)\n\n\u7136\u540e\u518d\u8dd1\u4e00\u4e0b\u6700\u5927\u6d41\u5c31\u884c\u4e86\u3002\n\n### \u8f93\u51fa\n\n\u5bf9\u4e8e\u8f93\u51fa\uff0c\u5f88\u663e\u7136\u5339\u914d\u7684\u4e2a\u6570\u5fc5\u987b\u8981\u7b49\u4e8e\u6bcf\u79cd\u7c7b\u578b\u9700\u6c42\u7684\u4e2a\u6570\u4e4b\u548c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u4ece\u6bcf\u79cd\u7c7b\u578b\u5012\u56de\u53bb\u627e\u5230\u6bcf\u6761\u8fde\u63a5\u4ed6\u4e14**\u6d41\u91cf\u4e3a $0$ \u7684\u8fb9**\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u88ab\u9009\u5230\u7684\u7c7b\u578b\uff0c\u7136\u540e\u518d\u6309\u7167\u4ed6\u7684\u8981\u6c42\u8f93\u51fa\u5c31\u884c\u4e86\u3002\n\n## CODE\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long \nusing namespace std; \nconst int N=1e3+10;\nint n,k,s,t;\ninline int read()\n{\n    int s=0,w=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n    return s*w;\n}\nint tot=-1,v[N*N],w[N*N],nex[N*N],first[2*N];\ninline void Add(int x,int y,int z)\n{\n\tnex[++tot]=first[x];\n\tfirst[x]=tot;\n\tv[tot]=y,w[tot]=z;\n}\nint head[2*N],deep[N]; \ninline bool BFS()\n{\n\tmemset(deep,-1,sizeof(deep));\n\tqueue<int> q;\n\tq.push(s);\n\tdeep[s]=0;\n\twhile(!q.empty()){\n\t\tint now=q.front(); q.pop();\n\t\tfor(register int i=first[now];i!=-1;i=nex[i]){\n\t\t\tint to=v[i];\n\t\t\tif(w[i]>0&&deep[to]==-1) deep[to]=deep[now]+1,q.push(to);\n\t\t}\n\t}\n\treturn deep[t]!=-1; //\u5982\u679c\u8fd8\u80fd\u6709\"\u6d41\"\u5230\u8fbe\u7ec8\u70b9 \n}\ninline int DFS(int S,int T,int flow)\n{\n\tif(S==T) return flow;\n\tint res=0;\n\tfor(register int& i=head[S];i!=-1;i=nex[i]){\n\t\tint to=v[i];\n\t\tif(deep[to]==deep[S]+1){ //\u53ea\u5f80\u4e0b\u4e00\u5c42\u6d41\u52a8 \n\t\t\tint temp=DFS(to,T,min(flow,w[i])); //\u8bb0\u5f55\u8be5\u8def\u5f84\u53ef\u6d41\u5411\u7ec8\u70b9\u7684\u503c \n\t\t\t//\u53cd\u6094\u64cd\u4f5c\uff0c\u53ef\u4ee5\u91cd\u65b0\u5ef6\u76ee\u6807\u70b9\u5f97\u5230\u76f8\u540c\u7684\u6d41\u91cf\u8fd4\u56de\u6e90\u70b9 \n\t\t\tw[i]-=temp,w[i^1]+=temp;\n\t\t\tflow-=temp; //\u8be5\u8282\u70b9\u5f53\u524d\u6d41\u91cf\u51cf\u6389\u5411\u8be5\u8def\u5f84\u6d41\u8d70\u7684\u6d41\u91cf \n\t\t\tres+=temp; //\u8be5\u8def\u5f84\u8d70\u901a\u4e86\uff0c\u8fd4\u56de\u7684\u7b54\u6848\u52a0\u4e0a\u5230\u8fbe\u7ec8\u70b9\u7684\u6d41\u91cf \n\t\t\tif(!flow) return res;\n\t\t}\n\t}\n\treturn res;\n}\ninline int dinic()\n{\n\tint res=0;\n\twhile(BFS()){\n\t\tmemcpy(head,first,sizeof(first));\n\t\tres+=DFS(s,t,1e9);\n\t}\n\treturn res;\n}\nsigned main()\n{\n\tmemset(first,-1,sizeof(first));\n\tk=read(),n=read();\n\tint sum=0;\n\ts=0,t=n+k+1;\n\t//\u9898\u53f7\u4e0e\u8d85\u7ea7\u6e90\u70b9 \n\tfor(register int i=1;i<=n;i++) Add(s,i,1),Add(i,s,0);\n\t//\u7c7b\u522b\u4e0e\u8d85\u7ea7\u6c47\u70b9 \n\tfor(register int i=1;i<=k;i++) { int num=read(); Add(i+n,t,num),Add(t,i+n,0); sum+=num; } \n\tfor(register int i=1;i<=n;i++){\n\t\tint sign=read();\n\t\tfor(register int j=1;j<=sign;j++){\n\t\t\tint x=read();\n\t\t\tAdd(i,x+n,1),Add(x+n,i,0); //\u9898\u53f7\u4e0e\u7c7b\u522b\u8fde\u8fb9 \n\t\t}\n\t}\n\tif(dinic()==sum){\n\t\tfor(register int now=1;now<=k;now++){\n\t\t\tprintf(\"%lld: \",now);\n\t\t\tfor(register int i=first[now+n];i!=-1;i=nex[i])\n\t\t\t\tif(w[i]&&v[i]!=t) printf(\"%lld \",v[i]);\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\telse printf(\"No Solution!\\n\"); \n\treturn 0;\n}\n```\n",
        "postTime": 1614518952,
        "uid": 258460,
        "name": "Booksnow",
        "ccfLevel": 0,
        "title": "P2763 \u8bd5\u9898\u5e93\u95ee\u9898[\u9898\u89e3]"
    },
    {
        "content": "## \u9898\u610f\n\u6709$k$\u5957\u8bd5\u9898\u4e0e$n$\u9053\u9898\u76ee\uff0c\u6bcf\u9053\u9898\u76ee\u53ef\u4ee5\u5c5e\u4e8e $p$ \u7c7b\uff0c\u6bcf\u5957\u8bd5\u9898\u9700\u8981\u82e5\u5e72\u9053\u9898\uff0c\u6c42\u80fd\u5426\u6709\u5408\u6cd5\u7684\u7ec4\u5377\u65b9\u6848\n## \u9898\u89e3\n~~\u5c31\u662f\u4e00\u4e2a\u6700\u5927\u5339\u914d\u7684\u677f\u5b50~~\n\n\u663e\u7136\uff0c\u6bcf\u5957\u8bd5\u9898\u6709\u6570\u91cf\u4e0a\u9650\uff0c\u6bcf\u9053\u9898\u76ee\u53c8\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u8fd8\u662f\u8981\u6c42\u6700\u5927\u7684\u5339\u914d\uff0c\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\u5f53\u7136\u662f**\u7f51\u7edc\u6d41**\u5440\u3002\n\n\u6765\u8003\u8651\u4e00\u4e0b\u4e8c\u5206\u56fe\u5339\u914d\u662f\u600e\u4e48\u505a\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/391bksxr.png)\n\n1. \u4ece\u6e90\u70b9$S$\u5411\u6240\u6709\u5de6\u4fa7\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$1$\u7684\u8fb9\n1. \u5c06\u80fd\u5339\u914d\u7684\u70b9\u8fde\u6d41\u91cf\u4e3a$1$\u7684\u8fb9\n1. \u4ece\u53f3\u4fa7\u70b9\u5411\u6c47\u70b9$T$\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$1$\u7684\u8fb9\n\n\u90a3\u4e48\uff0c\u8fd9\u4e0e\u672c\u9898\u552f\u4e00\u7684\u533a\u522b\u5c31\u5728\u4e8e\u5de6\u4fa7\u70b9\uff08\u8bd5\u9898\uff09\u80fd\u5426\u7528\u591a\u6b21\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u7b2c$1$\u6b65\u4e2d\u6d41\u91cf\u6539\u4e3a\u8bd5\u9898\u6570\u91cf\u5c31\u884c\u4e86\u3002\n\n\u5982\u679c\u6700\u7ec8\u6d41\u91cf$=$\u603b\u9898\u6570\uff0c\u90a3\u4e48\u5c31\u5fc5\u5b9a\u6709\u89e3\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5c06\u4ece\u5de6\u4fa7\u70b9\u51fa\u53d1\u6d41\u91cf\u4e3a$0$\u7684\u8fb9\u8f93\u51fa\u5c31\u53ef\u4ee5\u4e86\n## \u4ee3\u7801\n```cpp\n #pragma GCC optimize(3,\"Ofast\",\"inline\")\n#include<bits/stdc++.h>\nnamespace in{\n\tchar buf[1<<21],*p1=buf,*p2=buf;\n\tinline int getc(){\n\t    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;\n\t}\n\ttemplate <typename T>inline void read(T& t){\n\t    t=0;int f=0;char ch=getc();\n\t    while (!isdigit(ch)){\n\t        if(ch=='-')f = 1;\n\t        ch=getc();\n\t    }\n\t    while(isdigit(ch)){\n   \t    \tt=t*10+ch-48;\n   \t    \tch = getc();\n   \t\t}\n\t\tif(f)t=-t;\n\t}\n\ttemplate <typename T,typename... Args> inline void read(T& t, Args&... args){\n\t    read(t);read(args...);\n\t}\n}\nnamespace out{\n\tchar buffer[1<<21];\n\tint p1=-1;\n\tconst int p2 = (1<<21)-1;\n\tinline void flush() {\n\t\tfwrite(buffer,1,p1+1,stdout),\n\t\tp1=-1;\n\t}\n\tinline void putc(const char &x) {\n\t\tif(p1==p2)flush();\n\t\tbuffer[++p1]=x;\n\t}\n\ttemplate <typename T>void write(T x) {\n\t\tstatic char buf[15];\n\t\tstatic int len=-1;\n\t\tif(x>=0){\n\t\t\tdo{\n    \t\t\tbuf[++len]=x%10+48,x/=10;\n    \t\t}while (x);\n\t\t}else{\n    \t\tputc('-');\n\t\t\tdo {\n    \t\t\tbuf[++len]=-(x%10)+48,x/=10;\n\t\t\t}while(x);\n\t\t}\n\t\twhile (len>=0)\n\t\t\tputc(buf[len]),--len;\n\t}\n}\nusing namespace std;\nconst int maxn=100010,maxe=100010*2;\nstruct Graph{\n\tstruct node{\n\t\tint v,w,nxt;\n\t}e[maxe<<1];\n\tint head[maxn],cur[maxn],tot;\n\tint dis[maxn];\n\tint s,t;\n\tvoid init(int _s,int _t){s=_s,t=_t;tot=1;memset(head,0,sizeof head);}\n\tGraph(int _s=0,int _t=0){init(_s,_t);}\n\tvoid add(int u,int v,int w){\n\t\t//printf(\"%d %d %d\\n\",u,v,w);\n\t\te[++tot]=(node){v,w,head[u]},head[u]=tot;\n\t\te[++tot]=(node){u,0,head[v]},head[v]=tot;\n\t}\n\t#define v e[i].v\n\tinline bool bfs(){\n\t\tqueue<int>q;\n\t\tmemset(dis,0,sizeof dis);\n\t\tmemcpy(cur,head,sizeof head);\n\t\tdis[s]=1;q.push(s);\n\t\twhile(q.size()){\n\t\t\tint u=q.front();q.pop();\n\t\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\t\t\tif(!dis[v]&&e[i].w){\n\t\t\t\t\tdis[v]=dis[u]+1,q.push(v);\n\t\t\t\t\tif(v==t)return true;\n\t\t\t\t}\n\t\t}\n\t\treturn  false;\n\t}\n\tint dfs(int u,int flow){\n\t\tif(u==t)return flow;\n\t\tint rest=flow;\n\t\tfor(int i=cur[u];i&&rest;i=e[i].nxt){\n\t\t\tif(dis[v]==dis[u]+1&&e[i].w){\n\t\t\t\tint tmp=dfs(v,min(rest,e[i].w));\n\t\t\t\trest-=tmp,e[i].w-=tmp,e[i^1].w+=tmp;\n\t\t\t}\n\t\t\tcur[u]=i;\n\t\t}\n\t\tif(rest==0)dis[u]=-1;\n\t\treturn flow-rest;\n\t}\n\t#undef v\n\tint dinic(){\n\t\tint ans=0;\n\t\twhile(bfs())\n\t\t\twhile(int sth=dfs(s,2e9))\n\t\t\t\tans+=sth;\n\t\treturn ans;\n\t}\n}G;\nint k,n,m,x; \nsigned main(){\n\t//freopen(\"1.in\",\"r\",stdin);\n\tin::read(k,n);\n\tG.init(0,n+k+1);\n\tfor(int i=1;i<=k;i++)\n\t\tin::read(x),m+=x,G.add(G.s,i,x);\n\tfor(int i=1;i<=n;i++){\n\t\tint p;in::read(p);\n\t\tfor(int j=1;j<=p;j++)\n\t\t\tin::read(x),G.add(x,i+k,1);\n\t\tG.add(i+k,G.t,1);\n\t}\n\tif(G.dinic()!=m){\n\t\tprintf(\"No Solution!\");\n\t\treturn 0;\n\t}\n\tfor(int i=1;i<=k;i++){\n\t\tprintf(\"%d:\",i);\n\t\tfor(int j=G.head[i];j;j=G.e[j].nxt)\n\t\t\tif(G.e[j].v!=G.s&&G.e[j].w==0)\n\t\t\t\tprintf(\"%d \",G.e[j].v-k);\n\t\tprintf(\"\\n\");\n\t}\n\tout::flush();\n\treturn 0;\n}\n```",
        "postTime": 1595056234,
        "uid": 174304,
        "name": "jun\u5934\u5409\u5409",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6211\u4eec\u53ef\u4ee5\u7528\u6700\u5927\u6d41\u6c34\u8fc7\u53bb\uff0c\u76f8\u4fe1\u4f60\u5728\u505a\u8fd9\u9898\u4e4b\u524d\u5e94\u8be5\u77e5\u9053\u4ec0\u4e48\u662f\u6700\u5927\u6d41\uff08\u611f\u89c9\u4e5f\u5c31\u84dd\u9898\u7684\u96be\u5ea6\uff09\n![](https://s2.ax1x.com/2019/09/17/nI1FYT.png)\n\n\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u548c\u4e00\u4e2a\u6c47\u70b9\uff0c\u4fdd\u8bc1\u6bcf\u5f20\u8bd5\u5377\u7684\u6d41\u91cf\u5230\u7ec8\u70b9\u7684\u6d41\u91cf\u90fd\u88ab\u6d88\u8017\u6389\u90a3\u4e48\u5c31\u80fd\u591f\u786e\u5b9a\u80fd\u591f\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u60c5\u51b5\u3002\n\u53cd\u4e4b\u5982\u679c\u8fd8\u6709\u6d41\u91cf\u6ca1\u6709\u88ab\u6d88\u8017\u5b8c\uff0c\u90a3\u4e48\u5c31\u65e0\u89e3\u3002\n\u9898\u76ee\u8981\u6c42\u7684\u7edf\u8ba1\u7684\u54ea\u4e9b\u8bd5\u5377\u662f\u9009\u54ea\u4e9b\u9898\u6211\u4eec\u53ea\u8981\u8ba1\u7b97\u54ea\u4e9b\u8fb9\u7684\u6d41\u91cf\u88ab\u6d88\u8017\u5c31\u884c\u4e86\u3002\n\u4e0b\u9762\u9644\u4e0a\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,k,S,T,cnt=1,deth[555555],head[555555],s,sum,ans;\nint f[22][1111],num[22],m[22];\nstruct f{\n\tint to,next,dis;\n}a[555555];\ninline void add(int u,int v,int d)\n{\n\tcnt++;\n\ta[cnt].to=v;\n\ta[cnt].next=head[u];\n\ta[cnt].dis=d;\n\thead[u]=cnt;\n}\nbool bfs()\n{\n\tmemset(deth,0,sizeof(deth));\n\tqueue<int>q;\n\tq.push(S);\n\tdeth[S]=1;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u];i;i=a[i].next)\n\t\t{\n\t\t\tint t=a[i].to;\n\t\t\tif(!deth[t]&&a[i].dis)\n\t\t\t{\n\t\t\t\tq.push(t);\n\t\t\t\tdeth[t]=deth[u]+1;\n\t\t\t}\n\t\t}\n\t}\n\treturn deth[T];\n}\nint dfs(int u,int dist)\n{\n\tif(u==T)\n\treturn dist;\n\tint ret=0;\n\tfor(int i=head[u];i;i=a[i].next)\n\t{\n\t\tif(ret==dist)\n\t\treturn dist;\n\t\tint t=a[i].to;\n\t\tif(deth[t]==deth[u]+1&&a[i].dis)\n\t\t{\n\t\t\tint di=dfs(t,min(a[i].dis,dist));\n\t\t\tif(di>0)\n\t\t\t{\n\t\t\t\tret+=di;\n\t\t\t\ta[i].dis-=di;\n\t\t\t\ta[i^1].dis+=di;\n\t\t\t}\n\t\t}\n\t}\n\tif(ret>0)\n\tdeth[u]=0;\n\treturn ret;\n}\nint main()\n{\n\tscanf(\"%d%d\",&k,&n);\n\tT=n+k+k+1;\n\tS=n+k+k;\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tscanf(\"%d\",&s);\n\t\tm[i]=s;\n\t\tsum+=s;\n\t\tadd(i+n,T,s);\n\t\tadd(T,i+n,0);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint t;\n\t\tscanf(\"%d\",&t);\n\t\tadd(S,i,1);\n\t\tadd(i,S,0);\n\t\tfor(int j=1;j<=t;j++)\n\t\t{\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tadd(i,x+n,1);\n\t\t\tadd(x+n,i,0);\n\t\t}\n\t}\n\twhile(bfs())\n\t{\n\t\twhile(int di=dfs(S,0x7fffffff))\n\t\t{\n\t\t\tans+=di;\n\t\t}\n\t}\n\tif(ans!=sum)\n\t{\n\t\tcout<<\"No Solution!\";\n\t}\n\telse\n\t{\n\t\tfor(int i=2;i<=cnt;i+=2)\t\n\t\t{\n\t\t\tint t=a[i].to;\n\t\t\tif(a[i].dis==0&&t>n&&t<=n+k)\n\t\t\t{\n\t\t\t\t++num[t-n];\n\t\t\t\tf[t-n][num[t-n]]=a[i^1].to;\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=k;i++)\n\t\t{\n\t\t\tprintf(\"%d:\",i);\n\t\t\tfor(int j=1;j<=m[i];j++)\n\t\t\t{\n\t\t\t\tprintf(\" %d\",f[i][j]);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\treturn 0;\t\n}\n```\n",
        "postTime": 1568724903,
        "uid": 155626,
        "name": "\u8001\u54b8\u9c7c\u4e86",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u5178\u578b\u7684\u7f51\u7edc\u6d41\uff0c\u6709\u70b9\u50cf\u662f\u677f\u5b50\u9898\uff0c\u4f46\u662f\u9700\u8981\u5bf9\u589e\u5e7f\u8def\u8fdb\u884c\u5206\u6790\uff0c\u7136\u540e\u624d\u80fd\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\uff0c\u5728\u6b64\uff0c\u5728\u6b64\u611f\u8c22spj\uff01\uff01\uff01  \n### \u9996\u5148\u6765\u5206\u6790\u4e00\u4e0b\u601d\u8def\uff1a  \n\u9996\u5148\u6211\u4eec\u8981\u601d\u8003\u7684\u662f\u5982\u4f55\u5efa\u56fe\uff0cXie_BR\u5728\u8fd9\u91cc\u63d0\u4f9b\u81ea\u5df1\u7684\u5efa\u56fe\u65b9\u6848\uff1a  \n\n1\uff1a\u56e0\u4e3a\u6ca1\u6709\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u81ea\u5df1\u8bbe\u7f6e\u8d77\u70b9&\u7ec8\u70b9\uff0c\u53ca\u6309\u7167\u6570\u636e\u8303\u56f4  \u4e3a\uff0c\u8bbe\u7f6e\u4e0d\u5728\u6240\u6709\u70b9\u6570\u4e4b\u548c\u7684\u4e24\u4e2a\u6570\u503c\uff0c\u4f5c\u4e3a\u8d77\u70b9&\u7ec8\u70b9  \n2\uff1a\u5176\u6b21\uff0c\u518d\u8003\u8651\u5982\u4f55\u5efa\u56fe\u3002\u56e0\u4e3a\u8fd9\u9053\u9898\u7684\u9650\u5236\u6761\u4ef6\u662f\u6bcf\u9053\u9898\u53ea\u80fd\u9009\u62e9\u4e00\u6b21\uff0c\u5e76\u4e14\u6bcf\u4e2a\u79cd\u7c7b\u7684\u9898\u76ee\u6709\u6570\u91cf\u9650\u5236\uff0c\u6240\u4ee5\u8003\u8651\u5230\u6b64\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u9053\u8def\u7684\u6d41\u91cf\u6765\u4f5c\u4e3a\u9650\u5236\uff0c\u53ca\u79cd\u7c7b\u548c\u9898\u76ee\u76f8\u8fde\uff1a  \n\n#### \u9898\u76ee\u8fde\u5230\u79cd\u7c7b\u7684\u8fb9\u6743\u4e3a1\uff08\u6bcf\u9053\u9898\u53ea\u80fd\u9009\u62e9\u4e00\u6b21\uff09  \n#### \u79cd\u7c7b\u8fde\u5230\u7ec8\u70b9\u7684\u8fb9\u6743\u4e3a\u5bf9\u5e94\u7684\u7b2c\u4e8c\u884c\u8f93\u5165\u7684\u91cf\uff08\u6bcf\u4e2a\u7c7b\u578b\u7684\u9898\u76ee\u9700\u8981\u591a\u5c11\u9053\uff09  \n\u5982\u6b64\u5c31\u53ef\u4ee5\u5f88\u987a\u7545\u7684\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u4e86  \n## BUT  \n\u600e\u4e48\u6c42\u8def\u5f84\uff1a  \n\u56e0\u4e3a\u6211\u4eec\u5efa\u7acb\u589e\u5e7f\u8def\u7684\u65f6\u5019\u4f1a\u820d\u53bb\u8fb9\u6743\u4e3a0\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u5982\u679c\u67d0\u4e00\u6761\u8def\u5f84\u7684\u6b63\u5411\u8fb9\u6743\u4e3a0\uff0c\u90a3\u4e48\u4ed6\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u8def\u5f84\u5566  \n## \u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u6765\u4e0aAC\u4ee3\u7801\uff1a  \n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define MK 20010\nusing namespace std;\nint k,n,p,ei=1,h[MK];\nint S=5000,T=5001;\n\nstruct node\n{\n\tint next,to,v;\n};\nnode e[MK];\nint ans=0,dep[MK];\n\ninline int add(int x,int y,int v)\n{\n\tei++;\n\te[ei].next=h[x];\n\te[ei].to=y;\n\te[ei].v=v;\n\th[x]=ei;\n\treturn 0;\n}\n\nint bfs()\n{\n\tqueue<int>qu;\n\tmemset(dep,0,sizeof(dep));\n\tdep[S]=1;\n\tqu.push(S);\n\twhile(!qu.empty())\n\t{\n\t\tint f1=qu.front();\n\t\tqu.pop();\n\t\tfor(int i=h[f1];i;i=e[i].next)\n\t\t{\n\t\t\tint to=e[i].to;\n\t\t\tif(dep[to]!=0||e[i].v==0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tqu.push(to);\n\t\t\tdep[to]=dep[f1]+1;\n\t\t}\n\t} \n\treturn dep[T]!=0;\n}\n\nint dfs(int from,int maxflow)\n{\n\tif(from==T)\n\t{\n\t\treturn maxflow;\n\t}\n\tint flow=0;\n\tfor(int i=h[from];i;i=e[i].next)\n\t{\n\t\tint to=e[i].to;\n\t\tif(dep[to]!=dep[from]+1||e[i].v==0) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tint rst=dfs(to,min(maxflow-flow,e[i].v));\n\t\tif(rst==0) \n\t\t{\n\t\t\tdep[to]=0;\n\t\t}\n\t\te[i].v-=rst;\n\t\te[i^1].v+=rst;\n\t\tflow+=rst;\n\t\tif(flow==maxflow) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flow;\n}\n\nint hehe[25][1010];\nint ha[25];\n\nsigned main()\n{\n\tscanf(\"%lld%lld\",&k,&n);\n\tint i,j;\n\tfor(i=1;i<=k;i++)\n\t{\n\t\tscanf(\"%lld\",&ha[i]);\n\t\tadd(i,T,ha[i]);\n\t\tadd(T,i,0);\n\t}\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tint x;\n\t\tscanf(\"%lld\",&p);\n\t\tfor(j=1;j<=p;j++)\n\t\t{\n\t\t\tscanf(\"%lld\",&x);\n\t\t\tadd(i+k,x,1);\n\t\t\tadd(x,i+k,0);\n\t\t}\n\t}\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tadd(S,i+k,1);\n\t\tadd(i+k,S,0);\n\t}\n\twhile(bfs())\n\t{\n\t\tans+=dfs(S,LLONG_MAX);\n\t} \n\tif(ans==0) \n\t{\n\t\tprintf(\"No Solution!\");\n\t\treturn 0;\n\t}\n\tfor(i=1;i<=k;i++)\n\t{\n\t\tint w=0;\n\t\tfor(j=h[i];j;j=e[j].next)\n\t\t{\n\t\t\tint to=e[j].to;\n\t\t\tif(to==T) \n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(e[j].v!=0)\n\t\t\t{\n\t\t\t\tw++;\n\t\t\t\thehe[i][w]=to;\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=1;i<=k;i++)\n\t{\n\t\tprintf(\"%lld: \",i);\n\t\tfor(j=1;j<=ha[i];j++)\n\t\t{\n\t\t\tprintf(\"%lld \",hehe[i][j]-k);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n\n\u563b\u563b\uff0c\u849f\u84bb\u7684\u60f3\u6cd5\u53ef\u80fd\u6bd4\u8f83\u80a4\u6d45\uff0c\u671b\u5927\u4f6c\u6307\u6559\uff01",
        "postTime": 1565604660,
        "uid": 90646,
        "name": "Xie_BR",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "\u5410\u69fd\u4e00\u4e0b\uff1a\u871c\u6c41[UKE](https://www.luogu.org/record/22272395 )\u662f\u4ec0\u4e48\u73a9\u610f\uff1f\uff01\n\n***\n\n## \u9898\u76ee\u5206\u6790\uff1a\n\n1. \u89c2\u5bdf\u9898\u9762\uff0c`\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7ec4\u5377\u8981\u6c42\uff0c\u8ba1\u7b97\u6ee1\u8db3\u8981\u6c42\u7684\u7ec4\u5377\u65b9\u6848`\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u662f\u4e00\u9053\u660e\u663e\u7684**\u6709\u6761\u4ef6**\u7684**\u4e8c\u5206\u56fe\u5339\u914d**\u95ee\u9898\uff0c\u4e8e\u662f\u8003\u8651\u5efa\u6a21\u3002\n\n   - \u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\uff0c\u4e00\u4e2a\u8d85\u7ea7\u6c47\u70b9\uff1b\u6e90\u70b9\u4e0e\u8bd5\u9898\u76f8\u8fde\uff0c\u6c47\u70b9\u4e0e\u7c7b\u578b\u76f8\u8fde\u3002\n\n   - \u91cd\u70b9\u662f**\u7c7b\u578b\u7684\u9898\u6570**\u7684\u5efa\u6a21\u3002\u53ef\u4ee5\u4ece\u611f\u6027\u6765\u7406\u89e3\u4e00\u4e0b\uff0c\u5176\u5b9e\u8fd9\u6709\u4e00\u70b9\u9650\u6d41\u7684\u610f\u601d\uff0c\u6bcf\u4e2a\u7c7b\u578b\u53ea\u8981\u6c42\u6709\u8fd9\u4e48\u591a\u7684\u9898\u91cf\uff0c\u4e0d\u80fd\u8d85\u51fa\uff0c\u4e8e\u662f\u8003\u8651\u5728\u7c7b\u578b\u4e0e\u6c47\u70b9\u76f8\u8fde\u7684\u65f6\u5019\u5c06\u5bb9\u91cf\u8bbe\u4e3a\u7c7b\u578b\u7684\u9898\u6570\uff0c\u5728\u7b97\u6700\u5927\u6d41\u7684\u65f6\u5019\u5c06\u9898\u91cf\u9650\u5236\u4f4f\uff0c\u5c31\u80fd\u6ee1\u8db3\u9898\u9762\u7684\u8981\u6c42\u4e86\u3002(\u5e0c\u671b\u5927\u5bb6\u80fd\u660e\u767d\u6211\u7684\u610f\u601d $QwQ$ )\n\n   - \u6700\u540e\u7684\u56fe\u5373\u4e3a\uff1a\u8d85\u7ea7\u6e90\u70b9\u4e0e\u8bd5\u9898\u76f8\u8fde\uff0c\u5bb9\u91cf\u4e3a1\uff1b\u7c7b\u578b\u4e0e\u5bf9\u5e94\u7684\u8bd5\u9898\u76f8\u8fde\uff0c\u5bb9\u91cf\u4e3a1\uff1b\u7c7b\u578b\u4e0e\u8d85\u7ea7\u6c47\u70b9\u76f8\u8fde\uff0c\u5bb9\u91cf\u4e3a\u7c7b\u578b\u7684\u9898\u6570\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u8d85\u7ea7\u6e90\u70b9 $S$ \u4e3a\u8282\u70b9 $1$ ,\u8bd5\u9898\u4e3a\u8282\u70b9 $2\u2014n+1$\uff0c\u7c7b\u578b\u4e3a\u8282\u70b9 $n+2\u2014n+k+1$ \u8d85\u7ea7\u6c47\u70b9 $T$ \u4e3a\u8282\u70b9 $n+k+2$ \u3002 \n2. \u5efa\u6a21\u5b8c\u6210\u4e4b\u540e\uff0c\u8003\u8651\u8bb0\u5f55\u65b9\u6848\u3002\n   - \u56e0\u4e3a $Dinic$ \u7b97\u6cd5\u662f\u901a\u8fc7 $Xor\\;1$ \u6765\u5b8c\u6210\u6b63\u5411\u8fb9\u4e0e\u53cd\u5411\u8fb9\u7684\u8f6c\u53d8\u7684\uff0c\u6545\u6b63\u5411\u8fb9\u7684 $e[i].to$ \u4e3a\u8def\u5f84\u7ec8\u70b9\uff0c\u53cd\u5411\u8fb9\u7684 $e[i\\;Xor\\;1].to$ \u4e3a\u8def\u5f84\u8d77\u70b9\uff0c \u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\u6765\u627e\u5230\u76f8\u5e94\u7684\u8282\u70b9\u3002\n   - \u53c8\u56e0\u4e3a\u53cd\u5411\u8fb9\u7684 $e[i\\;Xor\\;1].v$ \u7684\u521d\u59cb\u5316\u4e3a0\uff0c\u5f53 $e[i\\;Xor\\;1].v\\neq0$ \u65f6\uff0c\u5373\u4ee3\u8868\u8fd9\u6761\u8fb9\u662f\u6700\u5927\u6d41\u8dd1\u8fc7\u7684\u8fb9\uff0c\u4e5f\u76f8\u5f53\u4e8e\u8fd9\u6761\u8fb9\u88ab\u5339\u914d\u4e86\u3002 \n   - \u6700\u540e\u6392\u9664\u6389\u8d85\u7ea7\u6e90\u70b9\u4e0e\u8d85\u7ea7\u6c47\u70b9\u7684\u60c5\u51b5\u3002\n3. \u5982\u679c $Dinic$ \u8dd1\u4e00\u904d\u4e0b\u6765\uff0cans(\u5373\u6700\u5927\u6d41)\u4f9d\u7136\u4e3a0\uff0c\u5219\u672c\u6570\u636e\u6ca1\u6709\u7b54\u6848(\u5373\u8f93\u51fa\"No Solution!\")\u3002\n\n***\n\n## code(\u5e26\u8be6\u7ec6\u6ce8\u91ca):\n\n```cpp\n#include<bits/stdc++.h>\n#define Maxn 4010\n#define Maxm 10010\n#define int long long \nusing namespace std;\nint k,n;\ninline void read(int &x)\n{\n    int f=1;x=0;char s=getchar();\n    while(s<'0'||s>'9'){if(s=='-')f=-1;s=getchar();}\n    while(s>='0'&&s<='9'){x=x*10+s-'0';s=getchar();}\n    x*=f;\n}\nint S,T;\nint ans=0,dep[Maxn];\nstruct edge\n{\n\tint to,next,v;\n}e[Maxm<<1];//\u4e00\u5b9a\u6ce8\u610f\u8981\u5f00\u4e24\u500d\u7a7a\u95f4(\u6b63\u53cd\u4e24\u6761\u8fb9) \nint head[Maxn],ei=1;//\u4e00\u5b9a\u6ce8\u610f\u8fd9\u91cc\u7684ei\u4e3a\u5947\u6570 \nvoid add(int x,int y,int v)\n{\n\tei++;\n\te[ei].to=y;\n\te[ei].v=v;\n\te[ei].next=head[x];\n\thead[x]=ei;\n}\nint bfs()\n{\n\tqueue<int>qu;\n\tmemset(dep,0,sizeof(dep));\n\tdep[S]=1;\n\tqu.push(S);\n\twhile(!qu.empty())\n\t{\n\t\tint fr=qu.front();\n\t\tqu.pop();\n\t\tfor(int i=head[fr];i;i=e[i].next)\n\t\t{\n\t\t\tint to=e[i].to;\n\t\t\tif(dep[to]!=0||e[i].v==0) continue;\n\t\t\tqu.push(to);\n\t\t\tdep[to]=dep[fr]+1;\n\t\t}\n\t}\n\treturn dep[T]!=0;\n}\nint dfs(int from,int maxflow)\n{\n\tif(from==T) return maxflow;\n\tint flow=0;\n\tfor(int i=head[from];i;i=e[i].next)\n\t{\n\t\tint to=e[i].to;\n\t\tif(dep[to]!=dep[from]+1||e[i].v==0) continue;\n\t\tint rst=dfs(to,min(maxflow-flow,e[i].v));\n\t\tif(rst==0) dep[to]=0;\n\t\te[i].v-=rst;\n\t\te[i^1].v+=rst;\n\t\tflow+=rst;\n\t\tif(flow==maxflow) break;\n\t}\n\treturn flow;\n}\nvoid dinic()\n{\n\twhile(bfs())\n\t{\n\t\tans+=dfs(S,LLONG_MAX);\n\t}\n}\nsigned main()\n{\n\tread(k),read(n);\n\tS=1,T=k+n+2;//\u8d85\u7ea7\u6e90\u70b9\u4e0e\u8d85\u7ea7\u6c47\u70b9 \n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tadd(S,i+1,1);\n\t\tadd(i+1,S,0);\n\t\t//\u8d85\u7ea7\u6e90\u70b9\u4e0e\u8bd5\u9898\u76f8\u8fde\uff0c\u5bb9\u91cf\u4e3a1 \n\t}\n\tfor(int i=1,x;i<=k;i++)\n\t{\n\t\tread(x);\n\t\tadd(i+n+1,T,x);\n\t\tadd(T,i+n+1,0);\n\t\t//\u7c7b\u578b\u4e0e\u8d85\u7ea7\u6c47\u70b9\u76f8\u8fde\uff0c\u5bb9\u91cf\u4e3a\u7c7b\u578b\u7684\u9898\u6570 \n\t}\n\tfor(int i=1,p;i<=n;i++)\n\t{\n\t\tread(p);\n\t\tfor(int j=1,x;j<=p;j++)\n\t\t{\n\t\t\tread(x);\n\t\t\tadd(i+1,x+n+1,1);\n\t\t\tadd(x+n+1,i+1,0);\n\t\t\t//\u7c7b\u578b\u4e0e\u5bf9\u5e94\u7684\u8bd5\u9898\u76f8\u8fde\uff0c\u5bb9\u91cf\u4e3a1\n\t\t}\n\t}\n\tdinic();//\u8dd1dinic \n\tif(ans==0)//\u6ca1\u6709\u7b54\u6848 \n\t{\n\t\tputs(\"No Solution!\");\n\t\treturn 0;\n\t} \n\tfor(int num=1;num<=k;num++)//\u679a\u4e3e\u6240\u6709\u7c7b\u578b \n\t{\n\t\tprintf(\"%lld:\",num);\n\t\tfor(int i=2;i<=ei;i+=2)//\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\u6765\u627e\u5230\u76f8\u5e94\u7684\u8282\u70b9 \n\t\t{\n\t\t\tif(e[i].to!=S&&e[i].to!=T&&e[i^1].to!=S&&e[i^1].to!=T)//\u6392\u9664\u6389\u8d85\u7ea7\u6e90\u70b9\u4e0e\u8d85\u7ea7\u6c47\u70b9\u7684\u60c5\u51b5\n\t\t\t{\n\t\t\t\tif(e[i^1].v!=0)//\u8fd9\u6761\u8fb9\u5df2\u7ecf\u88ab\u5339\u914d\u4e86 \n\t\t\t\t{\n\t\t\t\t\tif(e[i].to-n-1==num)//\u5224\u65ad\u662f\u5426\u4e3a\u5f53\u524d\u7c7b\u578b \n\t\t\t\t\t{\n\t\t\t\t\t\tprintf(\"%lld \",e[i^1].to-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n\n***\n\n## \u7f51\u7edc\u6d41\u6ce8\u610f\u4e8b\u9879\uff1a\n\n> 1. \u7f51\u7edc\u6d41\u5173\u952e\u5728\u4e8e\u5efa\u6a21\uff0c\u7cbe\u9ad3\u4e5f\u5728\u5efa\u6a21\u3002\u50cf\u672c\u9898\u4e00\u6837\u7684\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898\u53ef\u91c7\u53d6\u6211\u4f7f\u7528\u7684\u5efa\u6a21\u65b9\u5f0f\uff1a**\u6700\u5927\u5339\u914d=\u6700\u5927\u6d41**\u3002\n> 2. \u524d\u5411\u661f\u7684\u8ba1\u6570\u5668\u521d\u59cb\u5316\u65f6\uff0c\u4e00\u5b9a\u8981\u4e3a**\u5947\u6570**\u3002\u56e0\u4e3a\u7b2cn\u6761\u8fb9\u4e3a\u6b63\u5411\u8fb9\uff0c\u7b2cn+1\u6761\u8fb9\u4e3a\u53cd\u5411\u8fb9\uff0c\u8981\u5b9e\u73b0  $e[i]$ \u4e3a\u6b63\u5411\u8fb9\uff0c$e[i\\;Xor\\;1]$ \u4e3a\u53cd\u5411\u8fb9\uff0c\u5c31\u8981\u4fdd\u8bc1\u6b63\u5411\u8fb9\u7684i\u4e3a\u5947\u6570\uff0c\u5373\u8ba1\u6570\u5668\u8981\u521d\u59cb\u5316\u4e3a\u5947\u6570\u3002\n> 3. \u524d\u5411\u661f\u8fb9\u6570\u4e00\u5b9a\u8981**\u5f00\u4e24\u500d\u7a7a\u95f4**\uff0c\u56e0\u4e3a\u6b63\u5411\u8fb9\u4e00\u6761\uff0c\u53cd\u5411\u8fb9\u4e00\u6761\u3002\n\n***\n\n\u4e0d\u8981\u8138\u7684\u5ba3\u4f20\u4e00\u4e0b[$\\mathfrak {\\color{Black}BLOG }$](https://www.cnblogs.com/nth-element/p/11313897.html)",
        "postTime": 1565144683,
        "uid": 77131,
        "name": "nth_element",
        "ccfLevel": 5,
        "title": "P2763\u9898\u89e3"
    },
    {
        "content": "\u8fd9\u79cd\u9898\u76ee\u6700\u91cd\u8981\u7684\u8fd8\u662f\u5efa\u51fa\u4e00\u5f20\u6b63\u786e\u7684\u56fe\uff0c\u56fe\u4e00\u65e6\u5efa\u5bf9\u4e86\u5c31\u6ca1\u4ec0\u4e48\u96be\u5ea6\u53ef\u8a00\u4e86\uff1b\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u9898\u76ee\u6211\u4eec\u8003\u8651\uff1a\n\n1.\u6bcf\u4e2a\u9898\u76ee\u53ea\u53ef\u4ee5\u7528\u4e00\u6b21\uff0c\u6240\u4ee5\u4ece\u6e90\u70b9\u5411\u6bcf\u4e2a\u9898\u76ee\u5efa\u4e00\u6761\u8fb9\u6743\u4e3a1\u7684\u8fb9\uff0c\u8868\u793a\u4e00\u4e2a\u9898\u76ee\u53ea\u53ef\u7528\u4e00\u6b21\u3002\n\n2.\u9898\u76ee\u5206\u5c5e\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ece\u6bcf\u4e2a\u9898\u76ee\u5411\u8be5\u9898\u6240\u5c5e\u7684\u7c7b\u578b\u5efa\u4e00\u6761\u6743\u503c\u4e3a1\u7684\u8fb9\u3002\n\n3.\u603b\u9898\u76ee\u6570\u7531\u4e0d\u540c\u7c7b\u578b\u7684\u9898\u76ee\u5171\u540c\u7ec4\u6210\uff0c\u6240\u4ee5\u53ef\u4ece\u6bcf\u4e2a\u7c7b\u578b\u5411\u6c47\u70b9\u5efa\u4e00\u6761\u6743\u503c\u4e3a\u8981\u9009\u51fa\u7684\u8be5\u7c7b\u578b\u7684\u9898\u6570\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u5176\u4e2d\u6709\u6ce8\u91ca\u54e6\uff09\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst long long inf=2147483647;\nint n,k,p,s,t,sum,maxflow;\nstruct edge{\n\tint v,val,next;\n}e[100000];\nint chose[10000],dis[10000];\nint cnt=1,head[100000];\nvoid add(int u,int v,int val){\n\te[++cnt].v=v;\n\te[cnt].val=val;\n\te[cnt].next=head[u];\n\thead[u]=cnt;\n\te[++cnt].v=u;\n\te[cnt].val=0;\n\te[cnt].next=head[v];\n\thead[v]=cnt;\n}\nqueue<int>q;\nbool bfs(){\n\tmemset(dis,-1,sizeof(dis));\n\tq.push(s);\n\tdis[s]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=head[u];i;i=e[i].next){\n\t\t\tint v=e[i].v;\n\t\t\tif(dis[v]==-1&&e[i].val>0){\n\t\t\t\tdis[v]=dis[u]+1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[t]!=-1;\n}\nint dfs(int u,int flow){\n\tif(u==t) return flow;\n\tint res=0;\n\tfor(int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].v;\n\t\tif(dis[v]==dis[u]+1&&e[i].val){\n\t\t\tint fl=dfs(v,min(flow,e[i].val));\n\t\t\tif(fl){\n\t\t\t\te[i].val-=fl;\n\t\t\t\te[i^1].val+=fl;\n\t\t\t\tflow-=fl;\n\t\t\t\tres+=fl;\n\t\t\t\tif(flow==0)\n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t}\n\tif(!res)\n\tdis[u]=-1;\n\treturn res;\n}//E-k\u548cDinic\u90fd\u53ef\u4ee5 \nint main(){\n\tscanf(\"%d %d\",&k,&n);\n\ts=n+k+1;t=s+1;\n\tfor(int i=1;i<=k;i++){\n\t\tscanf(\"%d\",&chose[i]);\n\t\tsum+=chose[i];\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tadd(s,i,1);//\u4ece\u6e90\u70b9\u5411\u9898\u76ee\u5efa\u8fb9 \n\t\tscanf(\"%d\",&p);\n\t\tint a;\n\t\tfor(int j=1;j<=p;j++){\n\t\t\tscanf(\"%d\",&a);\n\t\t\tadd(i,a+n,1);//\u4ece\u9898\u76ee\u5411\u9898\u76ee\u7c7b\u578b\u5efa\u8fb9 \n\t\t}\n\t}\n\tfor(int i=1;i<=k;i++)\n\tadd(i+n,t,chose[i]);//\u4ece\u9898\u76ee\u7c7b\u578b\u5411\u6c47\u70b9\u5efa\u8fb9 \n\twhile(bfs())\n\tmaxflow+=dfs(s,1<<29);\n\t//cout<<maxflow<<endl;\u8fd9\u9898\u76ee\u6709\u9b3c\uff0c\u6211\u4e4b\u524d\u628a\u8fd9\u53e5\u8bdd\u4e5f\u8f93\u51fa\u4e86\u5c45\u7136\u8fc7\u4e86.... \n\tif(maxflow==sum){\n\t\tfor(int j=1;j<=k;j++){\n\t\t\tprintf(\"%d: \",j);\n\t\t\tfor(int i=1;i<=n;i++){\n\t\t\t\tfor(int l=head[i];l;l=e[l].next){\n\t\t\t\t\tint v=e[l].v;\n\t\t\t\t\tif(v==j+n&&e[l].val==0){\n\t\t\t\t\t\tprintf(\"%d \",i);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\telse \n\tcout<<\"No Solution!\"<<endl;//\u8fd9\u4e2a\u4e5f\u662f\u4e0d\u7528\u7684\uff0c\u672c\u4eba\u4eb2\u6d4b\u4e0d\u52a0\u662f\u53ef\u4ee5\u8fc7\u7684... \n\treturn 0;\n}\n```\n",
        "postTime": 1564823479,
        "uid": 203825,
        "name": "\u5207\u683c\u74e6\u00b7\u661f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "\u548cLOJ #6004\u5706\u684c\u805a\u9910\u5f88\u50cf\n\n\u5efa\u6a21\uff1a\n\n1.\u4ece\u6e90\u70b9\u5411\u6bcf\u9053\u8bd5\u9898$x_i$\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n2.\u4ece\u6bcf\u79cd\u7c7b\u578b$y_i$\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u8be5\u7c7b\u578b\u9700\u6c42\u6570\u91cf\u7684\u8fb9\n\n3.\u5982\u679c\u8bd5\u9898$x_i$\u5c5e\u4e8e\u7c7b\u578b$y_i$\u5219\u4ece$x_i$\u5411$y_i$\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n\u7136\u540e\u8dd1\u88f8\u7684\u7f51\u7edc\u6700\u5927\u6d41\uff0c\u5982\u679c\u6700\u5927\u6d41$\\not=$\u9700\u6c42\u8bd5\u9898\u603b\u6570\u5219\u65e0\u89e3\n\n\u65b9\u6848\uff1a\n\n\u5bf9\u4e8e\u6bcf\u79cd\u7c7b\u578b\uff0c\u5b83\u8fde\u51fa\u7684\u6240\u6709\u6ee1\u6d41\u91cf\u8fb9\u5373\u4e3a\u8be5\u7c7b\u578b\u6240\u5bf9\u5e94\u7684\u8bd5\u9898\n\n```cpp\n#include <bits/stdc++.h>\n\n#define R register\n#define ll long long\n#define cmax(a, b) ((a < b) ? b : a)\n#define cmin(a, b) ((a < b) ? a : b)\n#define sum(a, b, mod) ((a + b) % mod)\n\nconst int MaxN = 2e4 + 10;\nconst int MaxM = 5e5 + 10;\nconst int inf = (1 << 30);\n\nstruct edge\n{\n    int to, next, cap;\n};\n\nedge e[MaxM];\nint k, n, s = 20000, t = 20001, cnt = 1, ans;\nint head[MaxN], dep[MaxN], cur[MaxN], a[MaxN];\n\ninline void add(int u, int v, int c)\n{\n    ++cnt;\n    e[cnt].to = v;\n    e[cnt].next = head[u];\n    e[cnt].cap = c;\n    head[u] = cnt;\n}\n\ninline void add_edge(int u, int v, int c) { add(u, v, c), add(v, u, 0); }\n\ninline int read()\n{\n    int x = 0;\n    char ch = getchar();\n    while (ch > '9' || ch < '0')\n        ch = getchar();\n    while (ch <= '9' && ch >= '0')\n        x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n    return x;\n}\n\ninline int bfs()\n{\n    memset(dep, 0, sizeof(dep));\n    memcpy(cur, head, sizeof(head));\n    std::queue<int> q;\n    dep[s] = 1;\n    q.push(s);\n    while (!q.empty())\n    {\n        int u = q.front();\n        q.pop();\n        for (int i = head[u]; i; i = e[i].next)\n        {\n            int v = e[i].to, c = e[i].cap;\n            if (dep[v] || !c)\n                continue;\n            dep[v] = dep[u] + 1;\n            q.push(v);\n        }\n    }\n    return dep[t];\n}\n\ninline int dinic(int u, int flow)\n{\n    if (u == t)\n        return flow;\n    int rest = flow;\n    for (int i = cur[u]; i && (flow - rest < flow); i = e[i].next)\n    {\n        int v = e[i].to, c = e[i].cap;\n        if (dep[v] != dep[u] + 1 || !c)\n            continue;\n        int k = dinic(v, cmin(rest, c));\n        if (!k)\n            dep[v] = dep[u] + 1;\n        else\n        {\n            e[i].cap -= k;\n            e[i ^ 1].cap += k;\n            rest -= k;\n        }\n    }\n    if (flow - rest < flow)\n        dep[u] = -1;\n    return flow - rest;\n}\n\ninline void solve()\n{\n    int now = 0;\n    while (bfs())\n        while ((now = dinic(s, inf)))\n            ans += now;\n}\n\nint main()\n{\n    int tmp = 0;\n    k = read(), n = read();\n    for (int i = 1; i <= k; i++)\n    {\n        int x = read();\n        add_edge(i, t, x);\n        tmp += x;\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        int p = read();\n        add_edge(s, i + k, 1);\n        for (int j = 1; j <= p; j++)\n        {\n            int x = read();\n            add_edge(i + k, x, 1);\n        }\n    }\n    solve();\n    if (ans != tmp)\n        return 0 * printf(\"No Solution!\");\n    for (int i = 1; i <= k; i++)\n    {\n        int t = head[i];\n        printf(\"%d: \", i);\n        while (t)\n        {\n            if (e[t].cap == 1)\n                printf(\"%d \", e[t].to - k);\n            t = e[t].next;\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1560076057,
        "uid": 61966,
        "name": "little_sun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u662f\u6211\u4eec\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u8981\u6c42\u8f93\u51fa\u65b9\u6848\u7684\u95ee\u9898\n\n\u8003\u8651\u5efa\u56fe\u7136\u540e\u7528\u6700\u5927\u6d41\u601d\u60f3\uff1a\n\n\u9996\u5148\u7531\u6e90\u70b9\u5411\u6bcf\u4e00\u9053\u8bd5\u9898\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a1\n\n\u7136\u540e\u7531\u6bcf\u4e00\u79cd\u8bd5\u9898\u7c7b\u578b\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u9700\u6c42\u91cf\n\n\u6700\u540e\u7531\u6bcf\u4e00\u9053\u8bd5\u9898\u5411\u53ef\u80fd\u5c5e\u4e8e\u7684\u8bd5\u9898\u7c7b\u578b\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a1\n\n\u7136\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u5982\u679c\u6d41\u91cf\u7b49\u4e8e\u603b\u9700\u6c42\u91cf\u7684\u8bdd\u5373\u8bc1\u660e\u5408\u6cd5\uff08\u6bcf\u4e00\u6761\u5230\u6c47\u70b9\u7684\u8fb9\u6d41\u91cf\u90fd\u8dd1\u6ee1\u624d\u80fd\u4f7f\u6d41\u91cf\u7b49\u4e8e\u603b\u9700\u6c42\u91cf\uff0c\u8fd9\u65f6\u4e00\u5b9a\u662f\u5408\u6cd5\u7684\uff09\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5728\u5408\u6cd5\u65f6\u5982\u4f55\u8f93\u51fa\u65b9\u6848\n\n\u6839\u636e\u7f51\u7edc\u6d41\u7684\u7279\u5f81\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u67d0\u4e00\u9053\u8bd5\u9898\u88ab\u5f52\u5165\u4e86\u67d0\u4e00\u4e2a\u7c7b\u578b\uff0c\u90a3\u4e48\u8fd9\u9053\u8bd5\u9898\u5230\u8fd9\u4e2a\u7c7b\u578b\u7684\u8fb9\u5c31\u4f1a\u8dd1\u4e0a1\u7684\u6d41\u91cf\n\n\u800c\u5982\u679c\u6b63\u5411\u8fb9\u8dd1\u4e0a\u4e861\u7684\u6d41\u91cf\uff0c\u6b63\u5411\u8fb9\u7684\u5bb9\u91cf\u5373\u53d8\u4e3a0\uff0c\u800c\u53cd\u5411\u8fb9\u7684\u5bb9\u91cf\u5373\u6210\u4e3a1\n\n\u6240\u4ee5\u6211\u4eec\u4ec5\u9700\u68c0\u9a8c\u6b63\u5411\u8fb9\u5bb9\u91cf\u4e3a0/\u53cd\u5411\u8fb9\u5bb9\u91cf\u4e3a1\u4efb\u610f\u4e00\u4e2a\u6761\u4ef6\uff0c\u5373\u53ef\u8bf4\u660e\u8fd9\u9053\u8bd5\u9898\u5f52\u5c5e\u5230\u4e86\u8fd9\u4e2a\u8bd5\u9898\u7c7b\u578b\u4e2d\n\n\u8003\u8651\u5230\u662f\u6309\u8bd5\u9898\u7c7b\u578b\u8f93\u51fa\u9009\u62e9\u7684\u8bd5\u9898\u7f16\u53f7\uff0c\u6240\u4ee5\u6211\u4eec\u68c0\u9a8c\u53cd\u5411\u8fb9\u66f4\u52a0\u7b80\u5355\u4e00\u4e9b\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <stack>\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nstruct Edge\n{\n    int next;\n    int to;\n    int val;\n}edge[40005];\nint head[1505];\nint dis[1505];\nint cur[1505];\nint k,n;\nint cnt=1;\nint st,ed;\nvoid init()\n{\n    memset(head,-1,sizeof(head));\n    cnt=1;\n}\nvoid add(int l,int r,int w)\n{\n    edge[cnt].next=head[l];\n    edge[cnt].to=r;\n    edge[cnt].val=w;\n    head[l]=cnt++;\n}\nbool bfs()\n{\n    memcpy(cur,head,sizeof(head));\n    memset(dis,0,sizeof(dis));\n    dis[st]=1;\n    queue <int> M;\n    M.push(st);\n    while(!M.empty())\n    {\n        int u=M.front();\n        M.pop();\n        for(int i=head[u];i!=-1;i=edge[i].next)\n        {\n            int to=edge[i].to;\n            if(!dis[to]&&edge[i].val)dis[to]=dis[u]+1,M.push(to);\n        }\n    }\n    return dis[ed];\n}\nint ide(int x)\n{\n    return (x&1)?x+1:x-1;\n}\nint dfs(int x,int lim)\n{\n    if(x==ed)return lim;\n    int ret=0;\n    for(int i=head[x];i!=-1;i=edge[i].next)\n    {\n        int to=edge[i].to;\n        if(edge[i].val&&dis[to]==dis[x]+1)\n        {\n            int temp=dfs(to,min(lim,edge[i].val));\n            if(temp)\n            {\n                edge[i].val-=temp;\n                edge[ide(i)].val+=temp;\n                lim-=temp;\n                ret+=temp;\n                if(!lim)break;\n            }\n        }\n        cur[x]=i;\n    }\n    return ret;\n}\nint dinic()\n{\n    int ret=0;\n    while(bfs())ret+=dfs(st,inf);\n    return ret;\n}\nint main()\n{\n    scanf(\"%d%d\",&k,&n);\n    init();\n    st=k+n+1,ed=k+n+2;\n    int s=0;\n    for(int i=1;i<=k;i++)\n    {\n        int x;\n        scanf(\"%d\",&x);\n        s+=x;\n        add(i+n,ed,x);\n        add(ed,i+n,0);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        int num;\n        scanf(\"%d\",&num);\n        for(int j=1;j<=num;j++)\n        {\n            int x;\n            scanf(\"%d\",&x);\n            add(i,x+n,1);\n            add(x+n,i,0);\n        }\n        add(st,i,1);\n        add(i,st,0);\n    }\n    int t=dinic();\n    if(t!=s)printf(\"No Solution!\\n\");\n    else\n    {\n        for(int i=1;i<=k;i++)\n        {\n            printf(\"%d: \",i);\n            for(int j=head[i+n];j!=-1;j=edge[j].next)\n            {\n                if(edge[j].to!=ed&&edge[j].val==1)printf(\"%d \",edge[j].to);\n            }\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1556234829,
        "uid": 66905,
        "name": "leozhang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "## \u6ca1\u6709ISAP\u7684\u9898\u89e3\uff0c\u6211\u6765\u53d1\u4e00\u7bc7\n\n### \u9898\u76ee\u5927\u610f\n\n\u6709\u5f88\u591a\u9898\u76ee\u548c\u5f88\u591a\u7c7b\u578b\uff0c\u6bcf\u4e2a\u9898\u76ee\u53ef\u4ee5\u5bf9\u5e94\u591a\u79cd\u7c7b\u578b\uff0c\u73b0\u5728\u7ed9\u51fa\u6bcf\u79cd\u7c7b\u578b\u9700\u8981\u591a\u5c11\u9898\u76ee\uff0c\u8f93\u51fa\u65b9\u6848  \n\n### \u524d\u7f6e\u77e5\u8bc6\uff1aISAP\u7b97\u6cd5\n\n\u53ef\u4ee5\u770b~~pica~~\u5b66\u957f\u7684[\u535a\u5ba2](https://www.cnblogs.com/ubospica/p/9974285.html)\uff08\u54ce?\uff09\n\n### \u5efa\u56fe\n\n\u4e00\u770b\uff0c\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u4e8e\u662f\u6211\u9009\u62e9\u8dd1\u6700\u5927\u6d41\u8f83\u5feb\u7684$ISAP$\u7b97\u6cd5\n\n(1) \u9996\u5148\u628a$0$\u5f53\u505a\u8d85\u7ea7\u6e90\u70b9\uff0c\u5bf9\u4ece$1$\u5230$n$\u6bcf\u4e2a\u9898\u76ee\u5efa\u7acb\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n(2) \u5bf9\u4e8e\u9898\u76ee$i$\u5982\u679c\u53ef\u4ee5\u5c5e\u4e8e$j$\u7c7b\u578b\uff0c\u90a3\u4e48\u4ece$i$\u5230$n + j$\u5efa\u7acb\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n(3) \u6700\u540e\u628a$n + k + 1$\u5f53\u505a\u8d85\u7ea7\u6c47\u70b9\uff0c\u5bf9\u4e8e\u7c7b\u578b$i$\u5982\u679c\u9700\u8981$x$\u9053\u9898\uff0c\u90a3\u4e48\u4ece$n + i$\u5230$n + k + 1$\u5efa\u7acb\u5bb9\u91cf\u4e3a$x$\u7684\u8fb9\uff0c\u9700\u8981\u7684\u603b\u9898\u6570\u5c31\u662f\u8fd9\u4e9b\u8fb9\u7684\u5bb9\u91cf\u603b\u548c\n\n$PS$:\u6309\u7167\u9898\u76ee\u7684\u8f93\u5165\u987a\u5e8f\u5efa\u56fe\u6b65\u9aa4\u5e94\u8be5\u662f(1)(3)(2)\n\n### \u8f93\u51fa\u65b9\u6848\n\n\u4ee5$0$\u4e3a\u6e90\u70b9\uff0c$n + k + 1$\u4e3a\u6c47\u70b9\u8dd1$ISAP$\u6700\u5927\u6d41\uff0c\u5982\u679c\u6700\u5927\u6d41\u5c0f\u4e8e\u603b\u9898\u6570\uff0c\u8bf4\u660e\u65e0\u6cd5\u5b8c\u6210\u8bd5\u5377\u5b89\u6392\uff0c\u8f93\u51fa$No$ $Solution!$\u5e76\u7ed3\u675f\u7a0b\u5e8f\u3002\n\n\u904d\u5386\u6bcf\u4e2a\u5728$[n + 1, n + k]$\u7684\u8d77\u70b9\uff0c\u904d\u5386\u7ec8\u70b9\u5728$[1, n]$\u7684\u8fb9\uff0c\u4e5f\u5c31\u662f\u5efa\u56fe\u6b65\u9aa4(2)\u4e2d\u5efa\u7684\u53cd\u8fb9\uff0c\u5982\u679c\u8fb9\u6743\u4e0d\u4e3a$0$\uff0c\u8bf4\u660e\u6b63\u8fb9\u6709\u6d41\u91cf\uff0c\u5219\u9009\u62e9\u4e86\u8fd9\u7ec4\u5339\u914d\uff0c\u8f93\u51fa\u7ec8\u70b9\n\n### \u4ee3\u7801\n\n\u7531\u4e8e\u672c\u4eba\u8f83\u61d2\uff0c\u505a\u7f51\u7edc\u6d41\u7684\u9898\u4e0d\u613f\u610f\u7b97\u6700\u591a\u9700\u8981\u591a\u5c11\u6761\u8fb9\uff0c\u4e8e\u662f\u4e60\u60ef\u91c7\u7528\u6307\u9488\u52a8\u6001\u5f00\u7a7a\u95f4\u5b58\u56fe\uff0c$new$\u51fd\u6570\u7684\u901f\u5ea6\u8f83\u6162\u3002\u4f46\u662f\u7531\u4e8e\u52a0\u4e86\u5f53\u524d\u5f27\u4f18\u5316\u7684$ISAP$\u7b97\u6cd5\u672c\u8eab\u5f88\u5feb\uff0c\u5373\u4f7f\u662f\u6709\u803d\u8bef\u65f6\u95f4\u7684$new$\u51fd\u6570\uff0c\u4e5f\u53ea\u8dd1\u4e86$30ms$\uff0c\u53ef\u89c1$ISAP$\u8868\u73b0\u4f18\u5f02  \n\n```cpp\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nusing std::queue;\nusing std::min;\nusing std::max;\n\nconst int MAXN = 1e4 + 5;\nconst int MAXK = 25;\nconst int INF = 0x3f3f3f3f;\n\nint k, n;\n\nstruct Edge{\n    int to, val;\n    Edge *next, *opps;//\u9700\u8981\u8bb0\u5f55\u53cd\u8fb9\u6307\u9488\n    Edge(int to, int val, Edge *next):to(to), val(val), next(next){};\n};\n\nEdge *head[MAXN + MAXK];\n\nvoid AddEdge(int from, int to, int val) {\n    head[from] = new Edge(to, val, head[from]);\n    head[to] = new Edge(from, 0, head[to]);\n    head[to]->opps = head[from]; head[from]->opps = head[to];\n}\n\nnamespace ISAP{\n    int dep[MAXN + MAXK], gap[MAXN + MAXK], maxflow = 0;\n    int s, t;\n    Edge *cur[MAXN + MAXK];\n\n    void Bfs() {\n        memset(dep, -1, sizeof(dep));\n        memset(gap, 0, sizeof(gap));\n        queue<int> q;\n        dep[t] = 0; gap[0]++;\n        q.push(t);\n        int u, v;\n        while (!q.empty()) {\n            u = q.front(); q.pop();\n            for (Edge *e = head[u]; e; e = e->next) {\n                v = e->to;\n                if (dep[v] != -1) continue;\n                dep[v] = dep[u] + 1;\n                gap[dep[v]]++;\n                q.push(v);\n            }\n        }\n    }\n\n    int Dfs(int u, int flow) {\n        if (u == t) {\n            maxflow += flow;\n            return flow;\n        }\n        int used = 0;\n        for (Edge *&e = cur[u]; e; e = e->next) {//\u5f53\u524d\u5f27\u4f18\u5316\n            int v = e->to;\n            if (e->val && dep[v] == dep[u] - 1) {\n                int mi = Dfs(v, min(flow - used, e->val));\n                if (mi) {\n                    used += mi;\n                    e->val -= mi;\n                    e->opps->val += mi;\n                }\n                if (used == flow) return used;\n            }\n        }\n        gap[dep[u]]--;\n        if (gap[dep[u]] == 0) dep[s] = n + 1;\n        dep[u]++;\n        gap[dep[u]]++;\n        cur[u] = head[u];//\u590d\u539f\u5f53\u524d\u5f27\n        return used;\n    }\n    void Work() {\n        for (int i = 0; i <= n + k + 1; i++) cur[i] = head[i];\n        maxflow = 0;\n        Bfs();\n        while (dep[s] < n) Dfs(s, INF);\n    }\n    void OutPut() {\n        for (int i = 1; i <= k; i++) {\n            printf(\"%d: \", i);\n            for (Edge *e = head[n + i]; e; e = e->next) {//\u904d\u5386\u53cd\u8fb9\u8f93\u51fa\u5339\u914d\n                int v = e->to;\n                if (v >= 1 && v <= n && e->val) printf(\"%d \", v);\n            }\n            putchar('\\n');\n        }\n    }\n}\n\nint main() {\n    memset(head, 0, sizeof(head));\n    scanf(\"%d %d\", &k, &n);\n    ISAP::s = 0; ISAP::t = n + k + 1;//\u8bb0\u5f55\u8d85\u7ea7\u6e90\u70b9\u6c47\u70b9\n    int m = 0;\n    for (int i = 1; i <= n; i++) AddEdge(0, i, 1);//\u5efa\u56fe\u6b65\u9aa4(1)\n    for (int i = 1, x; i <= k; i++) {//\u5efa\u56fe\u6b65\u9aa4(3)\n        scanf(\"%d\", &x);\n        m += x;\n        AddEdge(n + i, n + k + 1, x);\n    }\n    for (int i = 1, p; i <= n; i++) {//\u5efa\u56fe\u6b65\u9aa4(2)\n        scanf(\"%d\", &p);\n        for (int j = 1, x; j <= p; j++) {\n            scanf(\"%d\", &x);\n            AddEdge(i, n + x, 1);\n        }\n    }\n    ISAP::Work();//\u8dd1\u6700\u5927\u6d41\n    if (ISAP::maxflow < m) return printf(\"No Solution!\") & 0;//\u538b\u884c\uff08\u96fe\uff09+\u7279\u5224\n    ISAP::OutPut();//\u8f93\u51fa\u65b9\u6848\n    return 0;\n}\n/*\n3 15\n3 3 4\n2 1 2\n1 3\n1 3\n1 3\n1 3\n3 1 2 3\n2 2 3\n2 1 3\n1 2\n1 2\n2 1 2\n2 1 3\n2 1 2\n1 1\n3 1 2 3\n*/\n```",
        "postTime": 1549170984,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "\u73b0\u5728\u6211\u4eec\u6709N\u9053\u9898\uff0cK\u4e2a\u7c7b\u522b\u3002\u800c\u540c\u4e00\u9053\u9898\u6709Pi\u4e2a\u7c7b\u522b\u5c5e\u6027\u3002\u6211\u4eec\u88ab\u8981\u6c42\u9009\u51faM\u9053\u9898\u5e76\u7b26\u5408\u6761\u4ef6(\u6bcf\u4e2a\u7c7b\u578b\u9009Ti\u9053\u9898)\u3002\n\n\u663e\u7136\u8fd9\u662f\u4e00\u9053\u7c7b\u4f3c\u4e8c\u5206\u56fe\u5339\u914d\u7684\u9898\uff0c\u6bcf\u4e2a\u9898\u76ee\u5bf9\u5e94\u4e00\u4e9b\u7c7b\u522b\uff0c\u800c\u6211\u4eec\u8981\u6c42\u6700\u5927\u7684\u4e00\u4e2a\u80fd\u6ee1\u8db3M\u4e2a\u5339\u914d\u7684\u65b9\u6848\u3002\n\n\u6240\u4ee5\u76f4\u63a5\u7b80\u56fe\uff0c\u8dd1\u4e00\u904d\u6700\u5927\u6d41\uff0c\u5982\u679c\u6700\u5927\u6d41\u7b49\u4e8eM\uff0c\u8f93\u51fa\u65b9\u6848\u3002\n\n\u63a5\u4e0b\u6765\u662f\u5efa\u56fe\u7684\u95ee\u9898\uff0c\u7406\u6240\u5f53\u7136\u7684\uff0c\u6bcf\u9053\u9898\u53ea\u80fd\u9009\u4e00\u6b21\uff0c\u6240\u4ee5\u4ece\u8d85\u7ea7\u539f\u70b9S\uff0c\u8fde\u4e00\u67611\u7684\u8fb9\u5230\u6bcf\u9053\u9898\u3002\n\n\u6bcf\u9053\u9898\u53ea\u80fd\u5e76\u5165\u4e00\u4e2a\u7c7b\u578b\u4e2d\uff0c\u6240\u4ee5\u4ece\u6bcf\u9053\u9898\u8fdePi\u67611\u7684\u8fb9\u5230\u8fd9\u9053\u9898\u6240\u5bf9\u5e94\u7684\u7c7b\u578b\u3002\n\n\u56e0\u4e3a\u7b2ci\u4e2a\u7c7b\u578b\u7684\u9898\u8981\u9009Ti\u9053\uff0c\u6240\u4ee5\u4ece\u6bcf\u4e2a\u7c7b\u578b\u7684\u70b9\u8fde\u4e00\u6761\u4e3aTi \u7684\u8fb9\u5230\u8d85\u7ea7\u6c47\u70b9T(T=K+N+1)\u3002\n\n![](https://img-blog.csdn.net/20180718190124129?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RISVNfSVNfSFBR/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n(\u6ca1\u6709\u6807\u51fa\u7684\u8fb9\u6743\u503c\u90fd\u4e3a1\uff0c\u8fd9\u4e2a\u56fe\u548c\u6837\u4f8b\u65e0\u5173)\n\n\u5efa\u5b8c\u56fe\u540e\uff0c\u76f4\u63a5\u8dd1\u7f51\u7edc\u6d41\u5c31\u597d\u4e86\u3002\u5224\u65ad\u6700\u5927\u6d41\u662f\u5426\u7b49\u4e8e\u9898\u76ee\u6570\u3002\n\n\u5269\u4e0b\u7684\u662f\u8981\u8f93\u51fa\u8def\u5f84\u3002\n\n\u901a\u5e38\u6765\u8bf4\uff0c\u7f51\u7edc\u6d41\u8f93\u51fa\u8def\u5f84\u53ea\u9700\u8981\u627e\u5230\u6b8b\u91cf\u4e3a0\u7684\u8fb9\u8dd1DFS\uff0c\u8bbe\u4e2abool\u6570\u7ec4\u5224\u65ad\u662f\u5426\u8d70\u8fc7\u5c31\u597d\u4e86\u3002\n\n\u7531\u4e8e\u6709SPJ\uff0c\u6240\u4ee5\u4e5f\u6ca1\u6709\u4ec0\u4e48\u9650\u5236\uff0c\u8def\u5f84\u53ef\u4ee5\u8dd1\u7684\u5f88\u968f\u610f\u3002\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=2001;\nconst int INF=104859600;\nstruct edge\n{\n\tint node,w,next;\n}h[MAXN*10];\nint Head[MAXN],Depth[MAXN],Stack[MAXN];\nint k,n,m,p,tot=-1,x,y,kind,sum=0,s,t,top,ans=0;\nbool visit[MAXN];\ninline void add(int u,int v,int w)\n{\n\th[++tot].next=Head[u];\n\th[tot].node=v;\n\th[tot].w=w;\n\tHead[u]=tot;\n}\ninline bool bfs()\n{\n\tint q[MAXN*10],head=1,tail=1;\n\tmemset(Depth,0,sizeof(Depth));\n\tDepth[s]=1;\n\tq[head]=s;\n\twhile(head<=tail)\n\t{\n\t\tint x=q[head++];\n\t\tfor(register int i=Head[x];i!=-1;i=h[i].next)\n\t\t{\n\t\t\tint v=h[i].node;\n\t\t\tif(h[i].w>0&&Depth[v]==0)\n\t\t\t{\n\t\t\t\tDepth[v]=Depth[x]+1;\n\t\t\t\tq[++tail]=v;\n\t\t\t}\n\t\t}\n\t}\n\treturn Depth[t];\n}\ninline int dfs(int x,int dist)\n{ \n\tif(x==t)\n\t   return dist;\n\tfor(register int i=Head[x];i!=-1;i=h[i].next)\n\t{\n\t\tint v=h[i].node;\n\t\tif(h[i].w>0&&Depth[v]==Depth[x]+1)\n\t\t{\n\t\t\tint di=dfs(v,min(dist,h[i].w));\n\t\t\tif(di>0)\n\t\t\t{\t\n\t\t\t\th[i].w-=di;\n\t\t\t\th[i^1].w+=di;\n\t\t\t\treturn di;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\ninline void run(int x)\n{\n\tfor(register int i=Head[x];i!=-1;i=h[i].next)\n\t{\n\t\tint v=h[i].node;\n\t\tif(h[i].w==0&&visit[v]==0)\n\t\t{\n\t\t\tStack[++top]=v-k;\n\t\t\tvisit[v]=1;\n\t\t}\n\t}\n}\nint main()\n{\n\tmemset(Head,-1,sizeof(Head));\n\tscanf(\"%d %d\",&k,&n);\n\ts=0,t=n+k+1;\n\tfor(register int i=1;i<=k;i++)\n\t{\t\t\t\t\t\t\t\n\t\tscanf(\"%d\",&kind);\t\t \n\t\tsum+=kind;\n\t\tadd(s,i,kind);\t\n\t\tadd(i,s,0);\n\t}\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tadd(i+k,t,1);\n\t\tadd(t,i+k,0);\n\t\tscanf(\"%d\",&p);\n\t\tfor(register int j=1;j<=p;j++)\n\t\t{\n\t\t\tscanf(\"%d\",&y);\n\t\t\tadd(y,i+k,1);\n\t\t\tadd(i+k,y,0);\n\t\t}\t\n\t}\n\twhile(bfs())\n\t\tans+=dfs(s,INF);\n\tif(ans!=sum)\n\t\tputs(\"No Solution!\");\n\telse\n\t{\n\t\tfor(register int i=1;i<=k;i++)\n\t\t{\t\n\t\t\ttop=0;\n\t\t\trun(i);\n\t\t\tprintf(\"%d: \",i);\n\t\t\tfor(int j=top;j>=1;j--)\n\t\t\t\tprintf(\"%d \",Stack[j]);\n\t\t\tputs(\"\");\n\t\t}\n\t}\t\n\treturn 0;\n}\n```",
        "postTime": 1541646546,
        "uid": 98954,
        "name": "\u4e0d\u5b58\u5728\u4e4b\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "\u539f\u9898\u4f20\u9001\u95e8[>Here<](https://www.luogu.org/problemnew/show/P2763)\n\n\u7f51\u7edc\u6d41\u6c34\u9898\u3002\u8003\u8651\u6bcf\u79cd\u9898\u76ee\u6570\u91cf\u4e3a\u5b9a\u503c\uff0c\u4e14\u6bcf\u9053\u9898\u53ea\u80fd\u5bf9\u5e94\u4e00\u79cd\u9898\u578b\uff0c\u7528\u4e8c\u5206\u56fe\u7684\u65b9\u6cd5\u5efa\u56fe\uff1a\n\n1\uff1a\u4ece\u6e90\u70b9\u5230\u6bcf\u9053\u9898\u76ee\u8fde\u4e00\u6761\u6d41\u4e3a1\u7684\u8fb9\uff1b\n\n2\uff1a\u4ece\u6bcf\u9053\u9898\u76ee\u5230\u5176\u5c5e\u4e8e\u7684\u9898\u578b\u5efa\u6d41\u4e3a1\u7684\u8fb9\uff1b\n\n3\uff1a\u4ece\u6bcf\u79cd\u9898\u578b\u5230\u6c47\u70b9\u5efa\u6d41\u4e3a\uff08\u8981\u6c42\u6570\u91cf\uff09\u7684\u8fb9\u3002\n\n\u7136\u540e\u8dd1\u4e00\u904d\u7f51\u7edc\u6d41\u5c31\u8fc7\u4e86\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#define min(X,Y) ((X)<(Y)?(X):(Y))\n\nint head[4001],nxt[50001],b[50001],v[50001],k=1,n,K,tem,S,T;\nint dis[4001],q[4001],h,t,p[4001],pre[4001],ans[4001];\nvoid push(int s,int t,int val){\n\tnxt[++k]=head[s];\n\thead[s]=k;\n\tb[k]=t;\n\tv[k]=val;\n}\nvoid link(int s,int t,int val){\n\tpush(s,t,val);\n\tpush(t,s,0); \n}\nbool bfs(){\n\tmemset(dis,0,sizeof dis);\n\tdis[S]=1;\n\th=t=0;\n\tq[++t]=S;\n\twhile(h<=t){\n\t\t++h;\n\t\tfor(int i=head[q[h]];i;i=nxt[i]){\n\t\t\tif(v[i]&&!dis[b[i]]){\n\t\t\t\tdis[b[i]]=dis[q[h]]+1;\n\t\t\t\tq[++t]=b[i];\n\t\t\t\tif(b[i]==T)return 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint dfs(int x,int flow){\n\tif(x==T||!flow)return flow;\n\tint used=0;\n\tfor(int i=p[x];i;i=nxt[i])\n\t\tif(v[i]&&dis[b[i]]==dis[x]+1){\n\t\t\tint w=dfs(b[i],min(flow-used,v[i]));\n\t\t\tv[i]-=w;\n\t\t\tv[i^1]+=w;\n\t\t\tused+=w;\n\t\t\tif(w)p[x]=i,ans[x]=b[i];\n\t\t\tif(used==flow)return flow;\n\t\t}\n\tif(!used)dis[x]=0;\n\treturn used;\n}\nint main(){\n\tscanf(\"%d%d\",&K,&n);\n\tS=0,T=n+K+1; \n\tfor(int i=1;i<=K;i++){\n\t\tscanf(\"%d\",&tem);\n\t\tlink(i+n,T,tem);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&tem);\n\t\tint x;\n\t\tfor(int j=1;j<=tem;j++)scanf(\"%d\",&x),link(i,x+n,1);\n\t}\n\tfor(int i=1;i<=n;i++)link(S,i,1);\n\twhile(bfs()){\n\t\tmemcpy(p,head,sizeof p);\n\t\tdfs(S,0x7f7f7f7f);\n\t}\n\tfor(int i=1;i<=K;i++){\n\t\tprintf(\"%d: \",i);\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(ans[j]==i+n)printf(\"%d \",j);\n\t\t}\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1533468787,
        "uid": 30903,
        "name": "Isonan",
        "ccfLevel": 0,
        "title": "luoguP2763 \u8bd5\u9898\u5e93\u95ee\u9898"
    },
    {
        "content": "\u5efa\u56fe\uff1a \n\u8fd9\u9898\u4e00\u770b\u5c31\u662f\u7f51\u7edc\u6d41\u95ee\u9898\uff0c\u7136\u540e\u5c31\u662f\u600e\u4e48\u5efa\u56fe~ \n\u9996\u5148\uff0c\u6211\u4eec\u81ea\u5df1\u9009\u62e9\u4e24\u4e2a\u70b9\uff08\u4e00\u4e2a\u6e90\u70b9\uff1a0\uff0c \u4e00\u4e2a\u6c47\u70b9\uff1ak+n+1(\u4e0b\u9762\u518d\u8bb2\u4e3a\u4ec0\u4e48)\uff09\uff0c\u7136\u540e\u5bf9\u4e8e\u6e90\u70b9\uff080\uff09\u6765\u8bf4\uff0c\u8981\u548c\u6bcf\u4e00\u9053\u9898\u76ee\u5efa\u7acb\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff1b\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u7c7b\u578b\u6765\u8bf4\uff0c\u90fd\u8981\u4e0e\u6c47\u70b9\uff08n+k+1\uff09\u5efa\u7acb\u4e00\u6761\u5bb9\u91cf\u4e3a\u6240\u8981\u9009\u62e9\u6b64\u7c7b\u578b\u7684\u9898\u76ee\u6570\u91cf\u7684\u8fb9\uff1b\u5bf9\u4e8e\u6bcf\u4e00\u9053\u9898\u76ee\u6765\u8bf4\uff0c\u90fd\u8981\u4e0e\u8fd9\u9053\u9898\u76ee\u6240\u5c5e\u7c7b\u578b\u5efa\u7acb\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\u3002\u5982\u6b64\uff0c\u56fe\u5c31\u5efa\u597d\u4e86\u3002\uff08\u6240\u6709\u53cd\u5411\u8fb9\u6211\u90fd\u6ca1\u8bf4\uff0c\u4f46\u662f\u8981\u5efa\u7acb\uff09 \n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#define INF 0x3f3f3f3f\nusing namespace std;\n#define MAX 1400\nstruct edge\n{\n    int to, cap, rev;\n    //\u7ec8\u70b9\uff0c\u5bb9\u91cf\uff0c\u53cd\u5411\u8fb9\n};\nvector<edge>G[MAX];//\u4e8c\u7ef4\nint level[MAX];//bfs\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u6765\u8bf4\u7ed9\u51fa\u4e00\u4e2a\u5c42\u6b21\uff0c\u5206\u5c42\u56fe\nint iter[MAX];//\u4f18\u5316\uff0c\u5f53\u524d\u5f27\uff0c\u5728\u5176\u4e4b\u524d\u7684\u8fb9\u5df2\u7ecf\u6ca1\u6709\u7528\u4e86\nint a[1234], cost;//  \u5bf9\u4e8e\u7b2ci\u79cd\u7c7b\u578b\uff0c\u8981\u9009\u62e9a[i]\u4e2a\u9898\u76ee  \u8981\u9009\u62e9\u7684\u603b\u9898\u76ee\u6570\uff08a\u6570\u7ec4\u52a0\u548c\uff09\nvoid add_edge(int from, int to, int cap)//\u5efa\u8fb9\n{\n    struct edge a;\n    a.to=to;\n    a.cap = cap;\n    a.rev = G[to].size();\n    G[from].push_back(a);\n    a.to = from;\n    a.cap = 0;\n    a.rev = G[from].size()-1;\n    G[to].push_back(a);\n}\nvoid bfs(int s)\n{\n    memset(level, -1, sizeof(level));\n    queue<int>q;\n    level[s] = 0;\n    q.push(s);\n    while(!q.empty())\n    {\n        int v = q.front();\n        q.pop();\n        for(int i=0; i<G[v].size(); i++)\n        {\n            edge &e = G[v][i];\n            if(level[e.to]<0&&e.cap>0)\n            {\n                level[e.to] = level[v]+1;\n                q.push(e.to);\n            }\n        }\n    }\n}\nint dfs(int v, int t, int f)\n{\n    if(v==t)\n        return f;\n    for(int &i=iter[v]; i<G[v].size(); i++)\n    {\n        edge & e= G[v][i];\n        if(level[e.to]>level[v]&&e.cap>0)\n        {\n            int d = dfs(e.to, t, min(f, e.cap));\n            if(d>0)\n            {\n                e.cap -= d;\n                G[e.to][e.rev].cap += d;\n                return d;\n            }\n        }\n    }\n    return 0;\n}\nint max_flow(int s, int t)\n{\n    int flow = 0;\n    for(;;)\n    {\n        bfs(s);\n        if(level[t]<0)\n            return flow;\n        memset(iter, 0, sizeof(iter));\n        int f;\n        while((f=dfs(s, t, INF))>0)\n        {\n            flow += f;\n            if(flow==cost)//\u6bcf\u589e\u52a0\u4e00\u9053\u9898\u76ee\uff0c\u5c31\u4f1a\u51cf\u5c111\uff0c\u6240\u4ee5\u53ea\u8981\u5224\u65ad\u6d41\u91cf==\u9700\u8981\u7684\u9898\u76ee\u6570\u5c31\u627e\u5230\u4e86\n                return flow;\n        }\n    }\n}\nint main()\n{\n    int k, n;\n    scanf(\"%d %d\", &k, &n);\n    //k:\u7c7b\u578b    n:\u9898\u6570\n    for(int i=0; i<n+k+2; i++)\n    {\n        G[i].clear();\n    }\n    for(int i=1; i<=k; i++)//\u6bcf\u79cd\u7c7b\u578b\u6240\u9700\u8981\u7684\u9898\u76ee\u6570\n    {\n        scanf(\"%d\", &a[i]);\n        cost += a[i];//\u9700\u8981\u7684\u603b\u9898\u76ee\u6570\n        add_edge(i+n, k+n+1, a[i]);//\u4ece\u7c7b\u578b\u5230\u6c47\u70b9\uff0c\u589e\u52a0\u8fb9\u5bb9\u91cf\u4e3aa[i]\n    }\n    for(int i=1; i<=n; i++)//\u5bf9\u4e8e\u6bcf\u9053\u9898\u76ee\n    {\n        int p;\n        scanf(\"%d\", &p);//\u5c5e\u4e8e\u51e0\u4e2a\u7c7b\u578b\n        add_edge(0, i, 1);\n        for(int kk=1; kk<=p; kk++)//\u5206\u522b\u662f\u54ea\u51e0\u4e2a\n        {\n            int u;\n            scanf(\"%d\", &u);\n            add_edge(i, u+n, 1);//\u5efa\u8fb9\n        }\n    }\n    int f = max_flow(0, n+k+1);//dinic \u627e\u6d41\n    if(f!=cost)//\u53ea\u8981\u4e0d\u662f\u548c\u603b\u9898\u76ee\u6570\u4e00\u6837\uff0c\u5c31\u6ca1\u6709\u7b54\u6848\n    {\n        printf(\"No Solution!\\n\");\n    }\n    else\n    {\n        for(int i=1;i<=k;i++)//\u6bcf\u4e00\u79cd\u7c7b\u578b\n        {\n            printf(\"%d:\", i);\n            for(int j=0;j<G[n+i].size();j++)//\u89c2\u5bdf\u4ed6\u4eec\u7684\u53cd\u5411\u8fb9\uff0c\u5982\u679c\u6d41\u91cf\u4e3a1\u5c31\u8bf4\u660e\u8fd9\u9053\u9898\u76ee\u7b26\u5408\n            {\n                edge & e = G[n+i][j];\n                if(e.cap==1)\n                {\n                    printf(\" %d\", e.to);\n                }\n            }\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1526279018,
        "uid": 98879,
        "name": "feather2016",
        "ccfLevel": 0,
        "title": "P2763 \u8bd5\u9898\u5e93\u95ee\u9898 \u9898\u89e3"
    },
    {
        "content": "## P2763 \u8bd5\u9898\u5e93\u95ee\u9898\n\n\u9898\u76ee\u63cf\u8ff0\n\n\u00ab\u95ee\u9898\u63cf\u8ff0\uff1a\n\n\u5047\u8bbe\u4e00\u4e2a\u8bd5\u9898\u5e93\u4e2d\u6709n\u9053\u8bd5\u9898\u3002\u6bcf\u9053\u8bd5\u9898\u90fd\u6807\u660e\u4e86\u6240\u5c5e\u7c7b\u522b\u3002\u540c\u4e00\u9053\u9898\u53ef\u80fd\u6709\u591a\u4e2a\u7c7b\u522b\u5c5e\u6027\u3002\u73b0\u8981\u4ece\u9898\u5e93\u4e2d\u62bd\u53d6m \u9053\u9898\u7ec4\u6210\u8bd5\u5377\u3002\u5e76\u8981\u6c42\u8bd5\u5377\u5305\u542b\u6307\u5b9a\u7c7b\u578b\u7684\u8bd5\u9898\u3002\u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\u7ec4\u5377\u7b97\u6cd5\u3002\n\n\u00ab\u7f16\u7a0b\u4efb\u52a1\uff1a\n\n\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7ec4\u5377\u8981\u6c42\uff0c\u8ba1\u7b97\u6ee1\u8db3\u8981\u6c42\u7684\u7ec4\u5377\u65b9\u6848\u3002\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c1\u884c\u67092\u4e2a\u6b63\u6574\u6570k\u548cn (2 <=k<= 20, k<=n<= 1000)\n\nk \u8868\u793a\u9898\u5e93\u4e2d\u8bd5\u9898\u7c7b\u578b\u603b\u6570\uff0cn \u8868\u793a\u9898\u5e93\u4e2d\u8bd5\u9898\u603b\u6570\u3002\u7b2c2 \u884c\u6709k \u4e2a\u6b63\u6574\u6570\uff0c\u7b2ci \u4e2a\u6b63\u6574\u6570\u8868\u793a\u8981\u9009\u51fa\u7684\u7c7b\u578bi\u7684\u9898\u6570\u3002\u8fd9k\u4e2a\u6570\u76f8\u52a0\u5c31\u662f\u8981\u9009\u51fa\u7684\u603b\u9898\u6570m\u3002\u63a5\u4e0b\u6765\u7684n\u884c\u7ed9\u51fa\u4e86\u9898\u5e93\u4e2d\u6bcf\u4e2a\u8bd5\u9898\u7684\u7c7b\u578b\u4fe1\u606f\u3002\u6bcf\u884c\u7684\u7b2c1 \u4e2a\u6b63\u6574\u6570p\u8868\u660e\u8be5\u9898\u53ef\u4ee5\u5c5e\u4e8ep\u7c7b\uff0c\u63a5\u7740\u7684p\u4e2a\u6570\u662f\u8be5\u9898\u6240\u5c5e\u7684\u7c7b\u578b\u53f7\u3002\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u7b2ci \u884c\u8f93\u51fa \u201ci\uff1a\u201d\u540e\u63a5\u7c7b\u578bi\u7684\u9898\u53f7\u3002\u5982\u679c\u6709\u591a\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\u65b9\u6848\uff0c\u53ea\u8981\u8f93\u51fa1\u4e2a\u65b9\u6848\u3002\u5982\u679c\u95ee\u9898\u65e0\u89e3\uff0c\u5219\u8f93\u51fa\u201cNo Solution!\u201d\u3002\n\n---\n\n\u641e\u61c2\u4e86\u8fd9\u9898\uff0c\u4f1a\u5bf9\u6700\u5927\u6d41\u6709\u4e00\u4e2a\u66f4\u900f\u5f7b\u7684\u7406\u89e3\n\n# \u5206\u6790\n\n\u9996\u5148\uff0c\u8fd9\u9898\u662f\u4e00\u4e2a\u4e0e**\u5339\u914d**\u6709\u5173\u7684\u9898\uff0c\u9047\u5230\u6709\u5173\u5339\u914d\u7684\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8054\u60f3\u7f51\u7edc\u6d41\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a**\u6700\u5927\u6d41\u7684\u6838\u5fc3\u662f\u9650\u5236**\uff0c\u800c\u5339\u914d\u7c7b\u9898\u76ee\u7ecf\u5e38\u548c\u9650\u5236\u6709\u5173\uff08\u4e00\u9053\u9898\u53ea\u80fd\u9009\u4e00\u6b21\uff0c\u8fd9\u5c31\u662f\u9650\u5236\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u6700\u5927\u6d41\u8fdb\u884c\u6c42\u89e3\n\n\u8fd9\u9898\u9700\u8981\u6c42\u7684\u662f\u5339\u914d\u65b9\u6848\uff0c\u53ef\u80fd\u521a\u5f00\u59cb\u4f1a\u6bd4\u8f83\u96be\u7406\u89e3\uff0c\u90a3\u4e48\u6211\u4eec\u5148\u89e3\u51b3 \u6b64\u95ee\u9898\u662f\u5426\u6709\u89e3\u8fd9\u4e2a\u5b50\u95ee\u9898\u5148\n\n# \u662f\u5426\u6709\u89e3\uff1f\n\n\u600e\u4e48\u77e5\u9053\u662f\u5426\u6709\u89e3\u5462\uff1f\u6211\u4eec\u77e5\u9053\uff0c\u53ef\u4ee5\u6c42\u6700\u5927\u5339\u914d\u6570\uff0c\u82e5\u6bd4\u8981\u6c42\u7684\u5339\u914d\u6570\u5c0f\uff0c\u5219\u65e0\u89e3\u3002\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a**\u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d\u95ee\u9898**\uff0c\u53ef\u4ee5\u7528\u6700\u5927\u6d41\u6c42\u89e3\uff1a\n\n\u5efa\u6a21\u601d\u8def\uff1a \u6e90\u70b9\u8fde\u4e00\u90e8\uff0c\u5bb9\u91cf\u4e3a\u8981\u6c42\u7684\u5339\u914d\u6570\uff0c\u6309\u5339\u914d\u6761\u4ef6\u8fde\u63a5\u4e00\u90e8\u548c\u4e8c\u90e8\uff0c\u5bb9\u91cf\u4e3aINF\uff0c\u4e8c\u90e8\u8fde\u6c47\u70b9\uff0c\u5bb9\u91cf\u4e3a\u8981\u6c42\u5339\u914d\u6570\uff0c\u6700\u5927\u6d41\u5373\u53ef\u6c42\u51fa\u5339\u914d\u6570\u3002\u753b\u56fe\u5373\u53ef\u5f88\u5feb\u5f97\u5230\u8bc1\u660e\u3002\n\n\u6b64\u9898\u4e2d\uff0c\u4e00\u90e8\u4e3a\u8bd5\u9898\uff0c\u5bb9\u91cf\u90fd\u4e3a1\uff08\u9650\u5236\u6bcf\u9898\u53ea\u80fd\u7528\u4e00\u6b21\uff09\uff0c\u4e8c\u90e8\u4e3a\u9898\u7c7b\uff0c\u5bb9\u91cf\u4e3a\u6240\u9700\u9898\u76ee\u6570\n\n# \u9009\u54ea\u4e9b\u9898\uff1f\n\n\u77e5\u9053\u4e86\u6709\u89e3\uff0c\u6211\u4eec\u600e\u4e48\u6c42\u89e3\u65b9\u6848\u5462\uff1f\n\n\u56de\u60f3\u4e00\u4e0b\u6700\u5927\u6d41\uff08\u6211\u7528\u7684\u662fDinic\uff09\u7684\u8fd0\u884c\u8fc7\u7a0b\uff0c\u8054\u7cfb\u6240\u5b66\uff0c\u6211\u4eec\u77e5\u9053\uff1a\u6700\u5927\u6d41\u6709\u4e00\u4e2a**\u540e\u6094\u673a\u5236**\uff0c\u5373\u66f4\u65b0\u4e00\u6761\u5f27\u7684\u5269\u4f59\u5bb9\u91cf\u662f\uff0c\u540c\u4e8b\u66f4\u65b0\u53cd\u5411\u8fb9\u7684\u5269\u4f59\u5bb9\u91cf\uff0c\u4ee3\u7801\u8868\u73b0\u5728\u8fd9\uff1a\n\n```cpp\nint Dinic(int u,int flow){\n    if(u == t)return flow;\n    int rest = flow,k;\n    for(int i = head[u];i;i = E[i].nxt){\n        int v = E[i].v;\n        if(E[i].dis && lev[v] == lev[u] + 1 && rest){\n            k = Dinic(v,min(rest,E[i].dis));\n            if(!k)lev[v] = 0;\n            E[i].dis -= k;//\u8fd9\u8fd9\u8fd9\n            E[i ^ 1].dis += k;//\u8fd8\u6709\u8fd9\n            rest -= k;\n            }\n        }\n    return flow - rest;\n    }\n```\n\n\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u6c42\u65b9\u6848\n\n\u8bd5\u60f3\uff0c\u5982\u679c\u8bd5\u9898\u5e93 $S$ \u4e2d\u6709\u4e00\u9898 $R$ \uff0c\u90a3\u4e48\u6700\u5927\u6d41\u4e00\u5b9a\u4ece\u8fd9$R-->S$\u8fd9\u6761\u5f27\u8d70\u8fc7\u8fc7\uff0c\u6362\u8a00\u4e4b\uff0c\u8fd9\u6761\u5f27\u4e00\u5b9a\u5bf9\u6700\u5927\u6d41\u91cf\u6709\u6240\u8d21\u732e\n\n\u65e2\u7136\u6b63\u8fb9\u6709\u6240\u8d21\u732e\uff0c\u90a3\u4e48\u4f9d\u636e\u540e\u6094\u673a\u5236\uff0c\u5176\u53cd\u8fb9\u5bb9\u91cf\u4e0d\u5c31\u4e0d\u4e3a0\u4e86\u5417\uff1f\n\n\u6211\u4eec\u4ece\u8bd5\u9898\u5e93\u51fa\u53d1\uff0c\u904d\u5386\u6240\u6709\u8fde$T$\u7684\u53cd\u8fb9\uff08\u8fde\u5411\u9898\u76ee\uff09\uff0c\u82e5\u67d0\u8fb9\u4e0d\u4e3a0\uff0c\u5219\u88ab\u8fde\u7684\u9898\u76ee\u4e00\u5b9a\u88ab\u6b64\u8bd5\u9898\u5e93\u9009\u4e2d\n\n```cpp\n    for(int u = 1 + numl;u <= numr + numl;u++){//\u6240\u6709\u8bd5\u9898\u5e93\n        printf(\"%d:\",u - numl);\n        for(int i = head[u];i;i = E[i].nxt){\n            int v = E[i].v;\n            if(v == t)continue;//\u4e0d\u80fd\u8bbf\u95ee\u6c47\u70b9\n            if(E[i].dis == 1){//\u5bf9\u6700\u5927\u6d41\u91cf\u6709\u8d21\u732e\n                printf(\"%d \",v);\n                need[u - numl]--;\n                if(!need[u - numl])break;//\u9898\u76ee\u591f\u4e86\n                }\n            }\n        printf(\"\\n\");\n        }\n```\n\n# AC\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<algorithm>\n#define ll long long\nusing namespace std;\nint RD(){\n    int out = 0,flag = 1;char c = getchar();\n    while(c < '0' || c >'9'){if(c == '-')flag = -1;c = getchar();}\n    while(c >= '0' && c <= '9'){out = out * 10 + c - '0';c = getchar();}\n    return flag * out;\n    }\nconst int maxn = 10019,INF = 1e9;\nint numr,numl,tot,nume = 1;\nint need[maxn];\nint s,t,maxflow;\nint head[maxn];\nstruct Node{\n    int v,dis,nxt;\n    }E[maxn << 2];\nvoid add(int u,int v,int dis){\n    E[++nume].nxt = head[u];\n    E[nume].v = v;\n    E[nume].dis = dis;\n    head[u] = nume;\n    }\nint lev[maxn];\nbool bfs(){\n    queue<int>Q;\n    memset(lev,0,sizeof(lev));\n    lev[s] = 1;\n    Q.push(s);\n    while(!Q.empty()){\n        int u = Q.front();Q.pop();\n        for(int i = head[u];i;i = E[i].nxt){\n            int v = E[i].v;\n            if(E[i].dis && !lev[v]){\n                lev[v] = lev[u] + 1;\n                if(v == t)return 1;\n                Q.push(v);\n                }\n            }\n        }\n    return 0;\n    }\nint Dinic(int u,int flow){\n    if(u == t)return flow;\n    int rest = flow,k;\n    for(int i = head[u];i;i = E[i].nxt){\n        int v = E[i].v;\n        if(E[i].dis && lev[v] == lev[u] + 1 && rest){\n            k = Dinic(v,min(rest,E[i].dis));\n            if(!k)lev[v] = 0;\n            E[i].dis -= k;\n            E[i ^ 1].dis += k;\n            rest -= k;\n            }\n        }\n    return flow - rest;\n    }\nint main(){\n    numr = RD();numl = RD();//\u5de6\u90e8\u4e3a\u9898\u76ee\u3002\u53f3\u90e8\u4e3a\u9898\u7c7b\uff0c\u53f3\u90e8i\u4e3a\u4ecenuml + i\n    s = numr + numl + 1,t = numr + numl + 2;\n    int temp;\n    for(int i = numl + 1;i <= numl + numr;i++){\n        temp = RD();\n        need[i - numl] = temp;\n        tot += temp;\n        add(i,t,temp);\n        add(t,i,0);\n        }\n    int num;\n    for(int i = 1;i <= numl;i++){\n        num = RD();\n        add(s,i,1);\n        add(i,s,0);\n        for(int j = 1;j <= num;j++){\n            temp = RD();\n            add(i,numl + temp,1);\n            add(numl + temp,i,0);//\u5efa\u56fe\n            }\n        }\n    int flow = 0;\n    while(bfs()){\n        while(flow = Dinic(s,INF))maxflow += flow;\n        }\n    if(maxflow < tot){\n        printf(\"No Solution!\\n\");//\u5224\u65ad\u662f\u5426\u6709\u89e3\n        return 0;\n        }\n    for(int u = 1 + numl;u <= numr + numl;u++){\n        printf(\"%d:\",u - numl);\n        for(int i = head[u];i;i = E[i].nxt){\n            int v = E[i].v;\n            if(v == t)continue;//\u4e0d\u80fd\u8bbf\u95ee\u6c47\u70b9\n            if(E[i].dis == 1){//\u5bf9\u6700\u5927\u6d41\u91cf\u6709\u8d21\u732e\n                printf(\"%d \",v);\n                need[u - numl]--;\n                if(!need[u - numl])break;//\u9898\u76ee\u591f\u4e86\n                }\n            }\n        printf(\"\\n\");\n        }\n    return 0;\n    }\n```",
        "postTime": 1523535687,
        "uid": 56230,
        "name": "\u5929\u4e0a\u4e00\u9897\u86cb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u6ce2\u64cd\u4f5c\u5c31\u4ee4\u6211\u5f88\u96be\u53d7\uff0c\u65e5\u5e38\u5404\u79cd\u5199\u9519\n\u6700\u6050\u6016\u7684\u662f\u6700\u540e\u7684\u8ba1\u6570\u64cd\u4f5c\u4e5f\u5c31\u662f\u8fa3\u4e2a\u5783\u573e\u53d8\u91cfzongshu\u5c45\u7136\u6ca1\u6709\u5199\n\u6240\u4ee5\u53ea\u80fd\u542c\u53d6WA\u58f0\u4e00\u7247\n\u82df\u4e00\u82df\u6700\u5927\u6d41\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint tot=1,kind[50005],head[50005],next[50005],to[50005];\nint w[50005],shu,k,p,n,dis[50005],delta,m,zongshu;\nbool pd[50005];\nqueue <int> que;\nvector <int> sum[25];\nvoid add(int x,int y,int z)\n{\n\tto[++tot]=y;\n\tnext[tot]=head[x];\n\thead[x]=tot;\n\tw[tot]=z;\n\tkind[tot]=x-1;\n\tto[++tot]=x;\n\tnext[tot]=head[y];\n\thead[y]=tot;\n\tw[tot]=0;\n}\nbool bfs()\n{\n\tmemset(pd,0,sizeof(pd));\n\tmemset(dis,0,sizeof(dis));\n\tque.push(1);\n\tpd[1]=1;\n\twhile(!que.empty())\n\t{\n\t\tint x=que.front();\n\t\tque.pop();\n\t\tfor(int i=head[x];i;i=next[i])\n\t\t{\n\t\t\tint y=to[i];\n\t\t\tif(!pd[y]&&w[i])\n\t\t\t{\n\t\t\t\tque.push(y);\n\t\t\t\tpd[y]=1;\n\t\t\t\tdis[to[i]]=dis[x]+1;\n\t\t\t}\n\t\t}\n\t}\n\treturn pd[n+k+2];\n}\nint dinic(int x,int delta)\n{\n\tif(x==n+k+2)\n\treturn delta;\n\tint all=0;\n\tfor(int i=head[x];i;i=next[i])\n\t{\n\t\tint y=to[i];\n\t\tif(dis[y]==dis[x]+1&&w[i])\n\t\t{\n\t\t\tint shu=dinic(y,min(delta,w[i]));\n\t\t\tw[i]-=shu;\n\t\t\tw[i^1]+=shu;\n\t\t\tdelta-=shu;\n\t\t\tall+=shu;\n\t\t}\n\t}\n\treturn all;\n}\nint main()\n{\n\tcin>>k>>n;\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tscanf(\"%d\",&shu);\n\t\tm+=shu;\n\t\tadd(1,i+1,shu);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&p);\n\t\tfor(int j=1;j<=p;j++)\n\t\t{\n\t\t\tscanf(\"%d\",&shu);\n\t\t\tadd(shu+1,i+k+1,1);\n\t\t\tzongshu++;\n\t\t}\n\t}\n\tfor(int i=k+2;i<=k+n+1;i++)\n\t\tadd(i,n+k+2,1);\n\tint ans=0;\n\twhile(bfs())\n\t{\n\t\tans+=dinic(1,m);\n\t}\n\tif(ans!=m)\n\t{\n\t\tprintf(\"No Solution!\");\n\t}\n\telse \n\t{\n\t\tfor(int i=k*2+2;i<=2*zongshu+2*k+1;i+=2)\n\t\t\tif(!w[i])\n\t\t\t\tsum[kind[i]].push_back(to[i]-k-1);\n\t\tfor(int i=1;i<=k;i++)\n\t\t{\n\t\t\tprintf(\"%d:\",i);\n\t\t\tfor(int j=0;j<sum[i].size();j++)\n\t\t\t\tprintf(\" %d\",sum[i][j]);\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1519302810,
        "uid": 79871,
        "name": "ENESAMA",
        "ccfLevel": 0,
        "title": "\u4e00\u9053\u5f88\u7b80\u5355\uff08\u5bf9\u6211\u5f88\u96be\uff09\u7684\u9898"
    },
    {
        "content": "\u5018\u82e5\u67d0\u4e2a\u8bd5\u9898\u5df2\u7ecf\u88ab\u9009\u5230\u67d0\u4e2a\u7c7b\u578b\u91cc\u4e86\uff0c\u90a3\u4e48\u5b83\u5c31\u4e0d\u53ef\u518d\u88ab\u9009\u8fdb\u522b\u7684\u7c7b\u578b\u4e86\u3002\n\n\u6240\u4ee5\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7c7b\u578b\uff0c\u6211\u4eec\u5c06\u5176\u4e0e\u6c47\u8fde\u8fb9\uff0c\u6743\u503c\u662f\u5b83\u7684\u8981\u6c42\u7684\u9898\u76ee\u6570\u91cf\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u9898\u76ee\uff0c\u6211\u4eec\u5c06\u6e90\u4e0e\u5176\u8fde\u8fb9\uff0c\u6743\u503c\u662f1\uff0c\u4ee3\u8868\u53ea\u80fd\u7528\u4e00\u6b21\u3002\u7136\u540e\u518d\u5c06\u5176\u4e0e\u5b83\u6240\u5bf9\u5e94\u7684\u6240\u6709\u7c7b\u578b\u8fde\u8fb9\u3002\n\n\u5018\u82e5\u6700\u5927\u6d41\u5c0f\u4e8em\uff0c\u5219\u8bf4\u660e\u4e0d\u80fd\u7ec4\u5377\u3002\n\n\n\u8f93\u51fa\u8def\u5f84\u6211\u89c9\u5f97\u8fd8\u662f\u6bd4\u8f83\u597d\u505a\u7684\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7c7b\u578b\uff0c\u679a\u4e3e\u5b83\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u5018\u82e5\u8fb9\u7684\u53e6\u4e00\u5934\u662f\u8bd5\u9898\uff0c\u5e76\u4e14\u8fd9\u6761\u8fb9\u4e0a\u6709\u6d41\uff0c\u5219\u8bf4\u660e\u90a3\u4e2a\u9898\u662f\u8981\u9009\u4e0a\u7684\u3002\uff08\u56e0\u4e3a\u53cd\u5411\u8fb9\uff09\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <queue>\nusing namespace std;\nstruct Edge{\n    int too, nxt, val;\n}edge[50005];\nint k, n, ss, tt, uu, vv, hea[2005], cnt, maxFlow, tot, lev[2005];\nconst int oo=0x3f3f3f3f;\nqueue<int> d;\nvoid add_edge(int fro, int too, int val){\n    edge[cnt].nxt = hea[fro];\n    edge[cnt].too = too;\n    edge[cnt].val = val;\n    hea[fro] = cnt++;\n}\nvoid addEdge(int fro, int too, int val){\n    add_edge(fro, too, val);\n    add_edge(too, fro, 0);\n}\nbool bfs(){\n    memset(lev, 0, sizeof(lev));\n    d.push(ss);\n    lev[ss] = 1;\n    while(!d.empty()){\n        int x=d.front();\n        d.pop();\n        for(int i=hea[x]; i!=-1; i=edge[i].nxt){\n            int t=edge[i].too;\n            if(!lev[t] && edge[i].val>0){\n                d.push(t);\n                lev[t] = lev[x] + 1;\n            }\n        }\n    }\n    return lev[tt]!=0;\n}\nint dfs(int x, int lim){\n    if(x==tt)    return lim;\n    int addFlow=0;\n    for(int i=hea[x]; i!=-1 && addFlow<lim; i=edge[i].nxt){\n        int t=edge[i].too;\n        if(lev[t]==lev[x]+1 && edge[i].val>0){\n            int tmp=dfs(t, min(lim-addFlow, edge[i].val));\n            edge[i].val -= tmp;\n            edge[i^1].val += tmp;\n            addFlow += tmp;\n        }\n    }\n    return addFlow;\n}\nvoid dinic(){\n    while(bfs())    maxFlow += dfs(ss, oo);\n}\nint main(){\n    memset(hea, -1, sizeof(hea));\n    cin>>k>>n;\n    ss = 0; tt = k + n + 1;\n    for(int i=1; i<=k; i++){\n        scanf(\"%d\", &uu);\n        addEdge(i+n, tt, uu);\n        tot += uu;\n    }\n    for(int i=1; i<=n; i++){\n        scanf(\"%d\", &uu);\n        for(int j=1; j<=uu; j++){\n            scanf(\"%d\", &vv);\n            addEdge(i, vv+n, 1);\n        }\n        addEdge(ss, i, 1);//\u6bcf\u9898\u53ea\u80fd\u7528\u4e00\u6b21\n    }\n    dinic();\n    if(maxFlow<tot)    cout<<\"No Solution!\"<<endl;\n    else\n        for(int i=n+1; i<=n+k; i++){\n            printf(\"%d: \", i-n);\n            for(int j=hea[i]; j!=-1; j=edge[j].nxt){\n                int t=edge[j].too;\n                if(t<=n && edge[j].val)\n                    printf(\"%d \", t);\n            }\n            printf(\"\\n\");\n        }\n    return 0;\n}\n```",
        "postTime": 1514343406,
        "uid": 44733,
        "name": "poorpool",
        "ccfLevel": 0,
        "title": "\u8bd5\u9898\u5e93\u95ee\u9898"
    },
    {
        "content": "\u8981\u6c42\u6bcf\u79cd\u7c7b\u578b\u8fbe\u5230\u4e00\u5b9a\u7684\u6570\u91cf\u3002\n\n\u5148\u90fd\u5047\u8bbe\u6bcf\u4e2a\u8bd5\u9898\u90fd\u9009\u7b2c\u4e00\u79cd\uff0c\u90a3\u4e48\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u79cd\u7c7b\u7f3a\u5c11\n\n\u6211\u4eec\u5c31\u9700\u8981\u8c03\u6574\u3002\n\n\u8bd5\u5377\u4e4b\u95f4\u662f\u6ca1\u6709\u8054\u7cfb\u7684\uff0c\u4f46\u662f\u6700\u7ec8\u4ed6\u4eec\u7684\u548c\u4e00\u5b9a\uff0c\u5148\u5047\u8bbe\u6709k\u4e2a\u7ec8\u70b9\n\n\u5355\u72ec\u6765\u770b\u4e00\u4e2a\u8bd5\u5377\n\n\u8981\u4f7f\u5b83\u6709\u6548\uff0c\u5b83\u6709\u4e14\u4ec5\u6709\u4e00\u79cd\u7c7b\u578b\uff0c\u7136\u800c\u6211\u4eec\u8fd8\u9700\u8981\u5bf9\u4ed6\u8fdb\u884c\u8c03\u6574\uff0c\u5373\n\n\u5bf9\u6bcf\u4e00\u4e2a\u7ec8\u70b9\u90fd\u8fdb\u884c\u8fde\u63a5\uff0c\u800c\u4ed6\u672c\u8eab\u53ea\u80fd\u5c5e\u4e8e\u4e00\u79cd\u3002\n\n\u90a3\u4e48\u628a\u8fd9\u4e2a\u70b9\u5206\u5272\u5f00\u6765\uff0c\u5206\u6210\u7684\u4e24\u4e2a\u70b9\u6ee1\u8db3\u4f7f\u8fd9\u4e2a\u70b9\u53ea\u88ab\u4f7f\u7528\u4e00\u6b21\n\n\u90a3\u4e48\u73b0\u5728\u6765\u770b\u7ec8\u70b9\uff0c\u6839\u636e\u6211\u4eec\u7684\u601d\u8def\uff0c\u8c03\u6574\u9700\u8981\u6ee1\u8db3\u4e0d\u540c\u7ec8\u70b9\u7684\u8c03\u6574\n\n\u663e\u7136\u6700\u5927\u6d41\u662f\u96be\u4ee5\u5b9e\u73b0\u7684\uff0c\n\n\u6709\u6ca1\u6709\u4e00\u79cd\u65b9\u6cd5\u5b9e\u73b0\u5462\uff1f\n\n\u90a3\u4e48\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u6700\u7ec8\u6c47\u70b9\uff0c\u6d41\u5411\u6c47\u70b9\u4e0d\u80fd\u968f\u4fbf\uff0c\u5fc5\u987b\u662f\u90a3\u4e9b\u7ec8\u70b9\u624d\u53ef\u4ee5\n\n\u6709\u4e86\u6c47\u70b9\u600e\u4e48\u8c03\u6574\u5462\uff1f\u9650\u5236\u6700\u5927\u6d41\u4e3a\u6570\u91cf\uff01\n\n```cpp\n    #include<iostream>\n    #include<cstdio>\n    #include<cstring>\n    #include<iomanip>\n    #include<algorithm>\n    #include<cmath>\n    #include<queue>\n    #define in(x) scanf(\"%d\",&x)\n    using namespace std;\n    const int maxn=100007,pn=5007;\n    queue<int>q;\n    int k,n,cnt=1,s=0,t,nxt[maxn],to[maxn],w[maxn];\n    int head[maxn],d[pn],ans=0,m=0,xia[pn],b[1007][1007];\n    void add(int x,int y,int we)\n    {\n        nxt[++cnt]=head[x];head[x]=cnt;to[cnt]=y;w[cnt]=we;\n        nxt[++cnt]=head[y];head[y]=cnt;to[cnt]=x;w[cnt]=0;\n    }\n    int bfs()\n    {\n        q.push(s);memset(d,0,sizeof(d));d[s]=1;\n        while(q.size())\n        {\n            int x=q.front();q.pop();\n            for(int i=head[x];i;i=nxt[i])\n            {\n                int u=to[i];\n                if(d[u]||w[i]<=0) continue;\n                d[u]=d[x]+1;q.push(u);\n            }\n        }\n        return d[t];\n    }\n    int dfs(int x,int flow)\n    {\n        if(x==t) return flow;int r;\n        for(int i=head[x];i;i=nxt[i])\n        {\n            int u=to[i];\n            if(d[u]!=d[x]+1||w[i]<=0) continue;\n            if(r=dfs(u,min(w[i],flow)))\n            {    \n                xia[x]=u;\n                w[i]-=r;w[i^1]+=r;return r;\n            }\n        }\n        return 0;\n    }\n    void dinic()\n    {\n        int p;\n        while(bfs())\n        {\n            while(1)\n            {\n                p=dfs(s,1e9);\n                if(!p) break;\n                ans+=p;\n            }\n        }\n    }\n    int main()\n    {\n        in(k);in(n);t=n*2+k+3;\n        for(int i=1;i<=k;++i) \n        {\n            int x;in(x);m+=x;\n            add(n*2+i,t,x);\n        }\n        for(int i=1;i<=n;++i)\n        {\n            add(s,i,1);add(i,i+n,1);\n            int x;in(x);\n            for(int j=1;j<=x;++j)\n            {\n                int y;in(y);\n                add(i+n,n*2+y,1);\n            }\n        }\n        dinic();\n        if(ans<m) \n        {\n            printf(\"No Solution!\");return 0;\n        }\n        for(int i=1+n;i<=n*2;++i)\n        {\n            int o=xia[i]-n*2;\n            if(o>0&&o<=k)\n            b[o][++b[o][0]]=i-n;\n        }\n        for(int i=1;i<=k;++i)\n        {\n            printf(\"%d: \",i);\n            for(int j=1;j<=b[i][0];++j)\n            printf(\"%d \",b[i][j]);\n            printf(\"\\n\");\n        } \n        return 0;\n}\n```",
        "postTime": 1514022881,
        "uid": 43140,
        "name": "zhaoyifan",
        "ccfLevel": 0,
        "title": "P2763 \u8bd5\u9898\u5e93\u95ee\u9898"
    },
    {
        "content": "\u56e0\u4e3a\u6bcf\u4e2a\u9898\u6700\u591a\u9009\u4e00\u6b21\uff0c\u90a3\u4e48\u628a\u6bcf\u4e2a\u9898\u548ct\uff08\u6216s\uff09\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u6bcf\u4e2a\u5e93\u548cs\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u6240\u9700\u8bd5\u9898\u6570\u76ee\u7684\u8fb9\uff0c\u8dd1\u6700\u5927\u6d41\u3002\u5982\u679c\u6700\u5927\u6d41\u8dd1\u51fa\u6765\u7684\u6700\u5927\u6d41\u91cf\u521a\u597d\u4e3a\u6240\u6709\u8bd5\u9898\u6570\u76ee\u603b\u548c\uff0c\u5c31\u4ee3\u8868\u6709\u53ef\u884c\u7684\u65b9\u6848\uff0c\u8f93\u51fa\u65b9\u6848\u5373\u53ef\uff08\u597d\u50cf\u5c31\u8f93\u51fa\u65b9\u6848\u6bd4\u8f83\u9ebb\u70e6\uff09\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u56e0\u4e3a\u7f51\u7edc\u6d41\u8981\u53cc\u5411\u8fde\u8fb9\uff0c\u6240\u4ee5\u5728\u8f93\u51fa\u65f6\u4f1a\u8f93\u51fas\u6216t\u70b9\uff0c\u9700\u8981\u52a0\u4e0a\u7279\u5224\uff08\u5df2\u7ecf\u597d\u51e0\u6b21\u5728\u8fd9wa\u4e86\uff09\u3002\n\n\n```cpp\ninclude<cstdio>\ninclude<iostream>\ninclude<cstring>\ninclude<queue>\nusing namespace std;\n\nconst int max_m = 22001; const int max_n = 1021;\n\nint point[max_n],nxt[max_m],v[max_m],remain[max_m],val[max_n]; int deep[max_n],cur[max_n]; int n,k,s,t,tot,inf=1e9,x,maxn;\n\ninline void clear() { memset(point,-1,sizeof(point)); memset(nxt,-1,sizeof(nxt)); tot=-1; }\n\ninline void addedge(int x,int y,int val) { ++tot; nxt[tot]=point[x]; point[x]=tot; v[tot]=y; remain[tot]=val; ++tot; nxt[tot]=point[y]; point[y]=tot; v[tot]=x; remain[tot]=0; }\n\ninline bool bfs(int s,int t) { memset(deep,0x7f,sizeof(deep));\n\nfor(int i=s; i<=t; ++i)\n  cur[i]=point[i];\n\nqueue<int> q;\ndeep[s]=0;\nq.push(s);\n\nwhile(!q.empty())\n{\n    int now=q.front();q.pop();\n    for(int i=point[now]; i!=-1; i=nxt[i])\n      if(deep[v[i]]>inf && remain[i])\n      {\n          deep[v[i]]=deep[now]+1;\n          q.push(v[i]);\n      }\n}\n\nreturn deep[t]<inf;\n}\n\ninline int dfs(int now,int t,int limit) { if(!limit || now==t) return limit; int flow=0,f;\n\nfor(int i=cur[now]; i!=-1; i=nxt[i])\n{\n    cur[now]=i;\n    if(deep[v[i]]==deep[now]+1 && (f=dfs(v[i],t,min(limit,remain[i]))))\n    {\n        flow+=f;\n        limit-=f;\n        remain[i]-=f;\n        remain[i^1]+=f;\n        if(!limit) break;\n    }\n}\n\nreturn flow;\n}\n\ninline int dinic(int s,int t) { int ans=0;\n\nwhile(bfs(s,t))\n  ans+=dfs(s,t,inf);\n\nreturn ans;\n}\n\ninline void output() { int ans=dinic(s,t); if(ans!=maxn) printf(\"No Solution!\"); else { for(int i=1; i<=k; ++i) { printf(\"%d: \",i); for(int j=point[i]; j!=-1; j=nxt[j]) if(!remain[j] && v[j]!=s && v[j]!=t) printf(\"%d \",v[j]-k); printf(\"\\n\"); } } }\n\nint main() { clear(); scanf(\"%d%d\",&k,&n); s=0; t=n+k+1;\n\nfor(int i=1; i<=k; ++i)\n{\n    scanf(\"%d\",&val[i]);\n    maxn+=val[i];\n    addedge(s,i,val[i]);\n}\n\nfor(int i=1; i<=n; ++i)\n  addedge(i+k,t,1);\n\nfor(int i=1; i<=n; ++i)\n{\n    int f;\n    scanf(\"%d\",&f);\n\n    for(int j=1; j<=f; ++j)\n    {\n        scanf(\"%d\",&x);//\u5c06\u8fde\u901a\u7684\u7c7b\u578b\u548c\u8bd5\u9898\u8fde\u8fb9 \n        addedge(x,i+k,1);\n    }\n}\n\noutput();\nreturn 0;\n}\n```",
        "postTime": 1490085961,
        "uid": 19912,
        "name": "\u5c0f\u5f3a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2763 \u3010\u8bd5\u9898\u5e93\u95ee\u9898\u3011"
    }
]