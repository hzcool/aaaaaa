[
    {
        "content": "~~HAOI2008\u4e5f\u8003\u4e86\u8fd9\u9898\uff0c\u4e00\u6a21\u4e00\u6837\uff01\u3002~~\n### Solution\uff1a\n\n\u3000\u3000\u672c\u9898\u7eafpbds\u6a21\u62df~~\u5e73\u8861\u6811+hash~~\u3002\n\n\u3000\u3000\u8fd9\u79cd\u52a8\u6001\u52a0\u70b9\u3001\u6539\u503c\u3001\u67e5\u8be2\u6392\u540d\u548ck\u5927\u503c\u7684\u95ee\u9898\uff0c\u76f4\u63a5\u60f3\u5230\u5e73\u8861\u6811\u3002\n\n\u3000\u3000\u9898\u76ee\u4e2d\u9700\u8981\u7528\u5230\u7684\u4fe1\u606f\u6709\uff1a\u5b57\u7b26\u4e32\u3001\u5f97\u5206\u3001\u65f6\u523b\uff0c\u5176\u4e2d\u65f6\u523b\u5c31\u662f\u8be5\u5b57\u7b26\u4e32\u5f97\u5230\u5f53\u524d\u5206\u6570\u662f\u7b2c\u51e0\u6b21\u64cd\u4f5c\uff0c\u7ef4\u62a4\u65f6\u523b\u662f\u56e0\u4e3a\u5bf9\u4e8e\u5f97\u5206\u76f8\u540c\u7684\u5b57\u7b26\u4e32\uff0c\u65f6\u523b\u5c0f\u7684\u8981\u6392\u5728\u524d\u9762\u3002\n\n\u3000\u3000\u6211\u4eec\u7528~~\u4e00\u68f5Splay\u6765\u7ef4\u62a4~~pbds\u4e2d\u7684rb_tree\u6765\u7ef4\u62a4\u3002\n\n\u3000\u3000\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u628a\u5176\u548c\u63d2\u5165\u7684\u65f6\u523b\u8fdb\u884cmap\u6620\u5c04\uff0c\u7136\u540e\u6bcf\u4e2a\u8282\u70b9\u4ee5\u5206\u6570\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u3001\u65f6\u523b\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u6784\u5efa\u5e73\u8861\u6811\u3002\u5bf9\u4e8e\u6bcf\u79cd\u64cd\u4f5c\uff1a1\u3001\u63d2\u5165\u8282\u70b9\uff0c\u76f4\u63a5\u53ef\u4ee5insert ; 2\u3001\u6539\u53d8\u8282\u70b9\u5206\u6570\u548c\u65f6\u523b\uff0c\u6211\u4eec\u76f4\u63a5\u6539\u4e3a\u5220\u9664\u8fd9\u4e2a\u8282\u70b9\uff0c\u5e76\u52a0\u5165\u65b0\u7684\u503c\u7684\u8282\u70b9 ; 3\u3001\u67e5\u8be2\u6392\u540d\uff0c\u6211\u4eec\u6709order_of_key ; 4\u3001\u67e5\u8be2\u7b2ck\u5927\u503c\uff0c\u6211\u4eec\u6709find_by_order\u3002\n\n\u3000\u3000\u53ea\u9700\u8981\u6a21\u62df\u5c31\u597d\u4e86\uff0c\u51cf\u5c11\u4e86\u5f88\u591a\u5197\u4f59\u7684\u7801\u519c\u64cd\u4f5c\uff08pbds\u5927\u6cd5\u597d\uff01\uff09\n\n$\\quad\\;\\;$\u6b22\u8fce\u6765\u8e29\u535a\u5ba2\uff1a[five20](http://www.cnblogs.com/five20/p/9690055.html)\uff08\u849f\u84bb\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\uff0c\u4e07\u5206\u611f\u8c22\uff01\uff5e\uff09\n### \u4ee3\u7801\uff1a\n```cpp\n    /*Code by 520 -- 9.21*/\n    #include<bits/stdc++.h>\n    #include<ext/pb_ds/assoc_container.hpp>\n    #include<ext/pb_ds/tree_policy.hpp>\n    #define il inline\n    #define ll long long\n    #define RE register\n    #define For(i,a,b) for(RE int (i)=(a);(i)<=(b);(i)++)\n    #define Bor(i,a,b) for(RE int (i)=(b);(i)>=(a);(i)--)\n    using namespace std;\n    using namespace __gnu_pbds;\n    const int N=500005;\n    int n,val[N],cnt,tot;\n    map<string,int> mp;\n    string ss[N];\n    struct node{\n        int v,id;\n        bool operator < (const node &x) const {return v==x.v?id<x.id:v>x.v;}\n    };\n    tree<node,null_type,less<node>,rb_tree_tag,tree_order_statistics_node_update> T;\n    il bool isdig(char x){return x>='0'&&x<='9';}\n    int main(){\n        ios::sync_with_stdio(0);\n        cin>>n;char c;string s;int x,tp;\n        while(n--){\n            cin>>c>>s;\n            if(c=='+') {\n                if(mp[s]) {\n                    tp=mp[s],T.erase(node{val[tp],tp});tot--;\n                }\n                mp[s]=++cnt,cin>>val[cnt],T.insert(node{val[cnt],cnt});tot++;\n                ss[cnt]=s;\n            }\n            else if(c=='?'&&!isdig(s[0])) {\n                x=mp[s];cout<<T.order_of_key(node{val[x],x})+1<<endl;\n            }\n            else {\n                x=0;\n                For(i,0,s.size()-1) x=(x<<3)+(x<<1)+(s[i]^48);\n                tp=min(tot,x+9);\n                For(i,x-1,tp-1) cout<<ss[T.find_by_order(i)->id]<<' ';cout<<endl;\n            }\n        }\n        return 0;\n    } \n```",
        "postTime": 1538118556,
        "uid": 44000,
        "name": "\u6d45\u8272\u8c03",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2584 \u3010[ZJOI2006]GameZ\u6e38\u620f\u6392\u540d\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u9898\u610f\u662f~~\u5f88\u5bb9\u6613\u7406\u89e3\u7684~~\uff0c\u57fa\u672c\u5c31\u662f\u5957\u4e2a\u5e73\u8861\u6811\u7136\u540e\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\n\n[\u6a21\u677f\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P3369)\n\n\u672c\u4eba\u7528\u7684FHQ Treap\u4ee5\u53ca\u4e00\u4e9b~~\u975e\u5e38\u6162~~\u7684STL~~<map>~~\u8fd8\u6709~~<pair>~~\n \n \u57fa\u672c\u7684\u601d\u8def\u5c31\u662f\u8bfb\u53d6\u8fd9\u4e2a\u4eba\u7684\u540d\u5b57\u5b58\u5230map\u91cc\uff0c\u7136\u540e\u5c31\u8fdb\u884c\u6b63\u5e38\u7684FHQ\u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\u6709\u540c\u5206\u7684\u60c5\u51b5\u6240\u4ee5\u8981\u4ee5\u4e24\u4e2a\u5173\u952e\u8bcd\u8fdb\u884c\u6bd4\u8f83\uff0c\u8fd9\u4e00\u90e8\u5206\u5c31\u662f\u672c\u9898\u7684\u7cbe\u9ad3,~~\u8bdd\u4e0d\u591a\u8bf4\u4e0a\u4ee3\u7801~~\n ```cpp\n#include <bits/stdc++.h>\n#define re register int\n#define INF 1e9\n#define N 260000\nusing namespace std;\nint read()\n{\n    int sum=0,fg=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')fg=-1;ch=getchar();}\n    while(ch<='9'&&ch>='0'){sum=sum*10+ch-'0';ch=getchar();}\n    return sum*fg;\n}\nstruct noode\n{\n    long long val,tim;\n};\nmap<string,noode>player;\nmap<pair<int,int>,string>players;//\u8fd9\u91cc\u53ef\u4ee5\u5b58\u5230\u8282\u70b9\u91cc\u9762\u53bb\uff0c\u6216\u8005\u7528\u7ed3\u6784\u4f53\uff0c\u4f46\u672c\u4eba\u61d2\u5f97\uff08\u4e0d\u4f1a\uff09\u91cd\u8f7d\u8fd0\u7b97\u7b26\nstruct node\n{\n    int siz,key,lch,rch;//key\u4e3arand\u503c\n    noode val;\n}t[N];\nint n,m;\nint tot,root;\nint _add_new_point(noode val)\n{\n    t[++tot].siz=1;\n    t[tot].val=val;\n    t[tot].key=rand();\n    t[tot].lch=t[tot].rch=0;\n    return tot;\n}\nvoid updata(int p)\n{\n    t[p].siz=t[t[p].lch].siz+t[t[p].rch].siz+1;\n}\nbool judge(int x,noode val)//\u6838\u5fc3\u90e8\u5206\n{\n    if(t[x].val.val==val.val)return t[x].val.tim<=val.tim;\n    else return t[x].val.val>val.val;\n}\nvoid split(int now,int &a,int &b,noode val)\n{\n    if(now==0){a=b=0;return;}\n    if(judge(now,val))\n    {\n        a=now;split(t[now].rch,t[a].rch,b,val);\n    }\n    else\n    {\n        b=now;split(t[now].lch,a,t[b].lch,val);\n    }\n    updata(now);\n}\nvoid _merge(int &now,int a,int b)//\u5c06a,b\u5408\u5e76\u7ed9now\n{\n    if(a==0||b==0){now=a+b;return;}\n    //key=rand\n    if(t[a].key<t[b].key)\n    {\n        now=a;_merge(t[now].rch,t[a].rch,b);\n    }\n    else\n    {\n        now=b;_merge(t[now].lch,a,t[b].lch);\n    }\n    updata(now);\n}\nvoid _insert(noode val)\n{\n    int x=0,y=0,z;\n    z=_add_new_point(val);\n    split(root,x,y,val);\n    _merge(x,x,z);\n    _merge(root,x,y);\n}\nvoid _del(noode val)\n{\n    int x=0,y=0,z=0;\n    split(root,x,y,val);\n    val.tim--;\n    split(x,x,z,val);\n    _merge(z,t[z].lch,t[z].rch);\n    _merge(x,x,z);\n    _merge(root,x,y);\n}\nvoid _rank(noode val)\n{\n    val.tim--;\n    int x=0,y=0;\n    split(root,x,y,val);\n    printf(\"%d\\n\",t[x].siz+1);\n    _merge(root,x,y);\n}\nvoid _find(int now,int _rank)\n{\n    while(t[t[now].lch].siz+1!=_rank)\n    {\n        if(t[t[now].lch].siz>=_rank)now=t[now].lch;\n        else _rank-=(t[t[now].lch].siz+1),now=t[now].rch;\n    }\n    cout<<players[make_pair(t[now].val.val,t[now].val.tim)]<<' ';\n}\nint main()\n{\n    srand(time(NULL));//19260817\u6bd5\u7adf\u592a\u66b4\u529b\u4e86..\n    scanf(\"%d\",&n);\n    string s;\n    for(int i=1;i<=n;i++)\n    {\n        s.clear();\n        cin>>s;\n        switch(s[0])\n        {\n            case '+':if(s[1]<='Z'&&s[1]>='A')\n                    {\n                        s.erase(s.begin());\n                        if(player.count(s))\n                        {\n                            noode w;\n                            scanf(\"%lld\",&w.val);w.tim=i;\n                            _del(player[s]);\n                            player[s]=w;\n                            players[make_pair(w.val,w.tim)]=s;\n                            _insert(w);\n                        }\n                        else\n                        {\n                            noode w;\n                            scanf(\"%lld\",&w.val);w.tim=i;\n                            player[s]=w;\n                            players[make_pair(w.val,w.tim)]=s;\n                            _insert(w);\n                        }\n                    }\n                    break;\n            case '?':\n            if(s[1]<='Z'&&s[1]>='A')\n            {\n                s.erase(s.begin());\n                _rank(player[s]);\n            }\n            else\n            {\n                int opps=0;\n                for(int j=1;j<s.size();j++)\n                {\n                    opps=opps*10+s[j]-'0';\n                }\n                for(int j=0;j<10;j++)\n                {\n                    if(t[root].siz<opps+j)break;\n                    _find(root,opps+j);\n                }\n                printf(\"\\n\");\n            }\n            break;\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1534331341,
        "uid": 60072,
        "name": "JYTS",
        "ccfLevel": 0,
        "title": "P2584 GameZ\u6e38\u620f\u6392\u540d\u7cfb\u7edf \u540cP4291"
    },
    {
        "content": "### \u5f15\u8a00\n\n\u770b\u4e86\u4e00\u4e0b\uff0c\u8fd9\u9053\u9898\u90fd\u6ca1\u6709\u5de8\u4f6c\u4f7f\u7528\u8fd9\u79cd\u601d\u8def\n\n\u672c\u849f\u84bb\u518d\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u6211\u81ea\u8ba4\u4e3a\u6bd4\u8f83\u5de7\uff08t\u014du\uff09\u5999\uff08l\u01cen\uff09\u7684\u505a\u6cd5\n\n### \u601d\u8def\n\n\u6700\u521d\u770b\u5230\u8fd9\u4e2a\u9898\uff0c\u6211\u9ad8\u5174\u574f\u4e86\uff0c\u8fd9\u4e0d\u5c31\u548csplay\u6a21\u677f\u4e00\u6837\u5417\uff1f~~\u53c8\u53ef\u4ee5\u6c34\u4e00\u9053\u7d2b\u9898\u4e86~~\n\n\u7136\u540e\uff0c\u6211\u53d1\u73b0\u6211\u9519\u4e86\u2026\u2026\n\n\u56e0\u4e3a\u8fd9\u4e2a\u9898\u76ee\u91cc\u5b58\u5728\u6392\u540d\u7cfb\u7edf\uff0c\u4f1a\u51fa\u73b0\u591a\u4e2a\u4eba\u4f7f\u7528\u4e00\u4e2a\u5206\u6570\u7684\u60c5\u51b5\n\n\u597d\u5427\uff0c\u770b\u8d77\u6765\u4f3c\u4e4e\u662f\u53ea\u80fd\u5728\u6811\u7684\u8282\u70b9\u4e0a\u5efa\u94fe\u4e86\u2026\u2026\n\n\u60f3\u60f3\u5c31\u5934\u5927\u6709\u6728\u6709\uff1f\u597d\u9ebb\u70e6\u7684\u2026\u2026\n\n\u4e8e\u662f\u4e4e\uff0c\u672c\u849f\u84bb\u5f00\u59cb\u5bfb\u627e\u5176\uff08t\u014du\uff09\u4ed6\uff08l\u01cen\uff09\u7684\u65b9\u6cd5\n\n\u91cd\u65b0\u8bfb\u9898\uff0c\u53d1\u73b0\u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u60c5\uff1a\u4eba\u6570\u6700\u591a1e6,\u4e5f\u5c31\u662f\u8bf4\u540c\u4e00\u4e2a\u5206\u6570\u6700\u591a1e6\u4e2a\u4eba\u5728\u4f7f\u7528\uff08\u4f46\u8fd9\u770b\u8d77\u6765\u597d\u50cf\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\uff09\n\n\u4ed4\u7ec6\u60f3\u60f3\uff1a\u5982\u679c\u6211\u4eec\u628a\u6bcf\u4e2a\u4eba\u7684\u5206\u6570\u4e58\u4e0a1e6\uff0c\u90a3\u5c31\u662f\u8bf4\uff0c\u65e0\u8bba\u5982\u4f55\u79bb\u5b83\u6700\u8fd1\u7684\u5206\u6570\u4e5f\u4f1a\u5dee\u4e2a1e6\n\n\u8fd9\u76f8\u5f53\u4e8e\u662f\u5206\u5757\u7684\u601d\u60f3\uff0c\u5c06\u5b83\u4eec\u7684\u5206\u6570\u5212\u5206\u6210\u533a\u95f4\u957f\u5ea6\u4e3a1e6\u7684\u82e5\u5e72\u4e2a\u533a\u95f4\uff0c\u533a\u95f4\u8303\u56f4\u4e3an * 1e6  ~  \uff08n - 1\uff09* 1e6 + 1\uff0c\u5176\u4e2dn\u4e3a\u8f93\u5165\u7684\u5206\u6570\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e48\u5206\u548c\u540e\u9762\u7684\u67d0\u4e9b\u5904\u7406\u6709\u5173\n\n\u6839\u636e\u9898\u610f\uff1a\u76f8\u540c\u5206\u6570\u5148\u4f20\u8005\u6392\u540d\u9ad8\n\n\u4e8e\u662f\u4e4e\uff0c\u6211\u4eec\u5728\u6bcf\u4e2a\u5206\u6570\u5165\u7684\u65f6\u5019\uff0c\u5728\u5206\u6570\u4e0a\u51cf\u53bb\u5f53\u524d\u6307\u4ee4\u7f16\u53f7 i \u7684\u503c\uff08\u53cd\u6b63\u6307\u4ee4\u4e5f\u5c31\u90a3\u4e48\u591a\uff0c\u5c31\u7b97\u51cf\u4e86\u4e5f\u4e0d\u53ef\u80fd\u4f1a\u5230\u4e0b\u4e00\u4e2a\u533a\u95f4\u7684\uff09\n\n\u81ea\u7531\u5c31\u662f\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u7ec6\u8282\u4e86\uff0c\u6bd4\u5982\u600e\u4e48\u8f93\u5165\u8f93\u51fa\u4ec0\u4e48\u7684\uff0c\u5e76\u4e0d\u96be\u5904\u7406\n~~\uff08\u4e2a\u4eba\u8868\u793a\u88ab\u5361\u4e86\u5f88\u4e45\uff09~~\n\n\u989d\u2026\u2026\u597d\u50cf\u6709\u70b9\u62bd\u8c61\uff0c\u4f46\u6211\u5b9e\u5728\u4e0d\u77e5\u9053\u600e\u4e48\u753b\u56fe\uff0c\u6240\u4ee5\u4e0d\u61c2\u7684\u540c\u5b66\u8bf7\u770b\u4ee3\u7801\uff08\u5185\u9644\u90e8\u5206\u89e3\u91ca\uff09\n\n### \u4ee3\u7801\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define maxn 1000005\nint n,m,rt,tot,fa[maxn],ch[maxn][2],sz[maxn],cnt[maxn],val[maxn];\nstring s,name[maxn];\nmap<string,int> p;\nint read(){\n\tint x = 0,f = 1;\n\tchar s = getchar();\n\twhile(s < '0' || s > '9'){\n\t\tif(s == '-') f = -1;\n\t\ts = getchar();\n\t}\n\twhile(s >= '0' && s <= '9'){\n\t\tx = (x << 1) + (x << 3) + s - '0';\n\t\ts = getchar();\n\t}\n\treturn x * f;\n}\nvoid maintain(int x){sz[x] = sz[ch[x][1]] + sz[ch[x][0]] + cnt[x];}\nbool get(int x){return x == ch[fa[x]][1];}\nvoid clear(int x){ch[x][1] = ch[x][0] = val[x] = cnt[x] = fa[x] = 0;}\nvoid rotate(int x){\n\tint y = fa[x],z = fa[y],chk = get(x);\n\tch[y][chk] = ch[x][chk ^ 1];\n\tif(ch[x][chk ^ 1]) fa[ch[x][chk ^ 1]] = y;\n\tch[x][chk ^ 1] = y;\n\tfa[x] = z;fa[y] = x;\n\tif(z) ch[z][y == ch[z][1]] = x;\n\tmaintain(y);maintain(x);\n}\nvoid splay(int x){\n\tfor(int f = fa[x];f = fa[x],f;rotate(x)) if(fa[f]) rotate(get(x) == get(f) ? f : x);\n\trt = x;\n}\nvoid ins(int k){\n\tif(!rt){\n\t\tval[tot] = k;\n\t\tcnt[tot]++;\n\t\trt = tot;\n\t\tmaintain(tot);\n\t\treturn;\n\t}\n\tint cur = rt,f = 0;\n\twhile(1){\n\t\tif(k == val[cur]){\n\t\t\tcnt[cur]++;\n\t\t\tmaintain(cur);\n\t\t\tmaintain(f);\n\t\t\tsplay(tot);\n\t\t\treturn;\n\t\t}\n\t\tf = cur;cur = ch[cur][val[cur] < k];\n\t\tif(!cur){\n\t\t\tval[tot] = k;\n\t\t\tcnt[tot]++;\n\t\t\tfa[tot] = f;\n\t\t\tch[f][val[f] < k] = tot;\n\t\t\tmaintain(tot);\n\t\t\tmaintain(f);\n\t\t\tsplay(tot);\n\t\t\treturn;\n\t\t}\n\t}\n}\nint rk(int k){\n\tint cur = rt,s = 0;\n\twhile(1){\n\t\tif(k < val[cur]) cur = ch[cur][0];\n\t\telse{\n\t\t\ts += sz[ch[cur][0]];\n\t\t\tif(k == val[cur]){\n\t\t\t\tsplay(cur);\n\t\t\t\treturn s + 1;\n\t\t\t}\n\t\t\ts += cnt[cur];\n\t\t\tcur = ch[cur][1];\n\t\t}\n\t}\n}\nint kth(int k){\n\tint cur = rt;\n\twhile(1){\n\t\tif(k <= sz[ch[cur][0]]) cur = ch[cur][0];\n\t\telse{\n\t\t\tk -= sz[ch[cur][0]] + cnt[cur];\n\t\t\tif(k <= 0){\n\t\t\t\tsplay(cur);\n\t\t\t\treturn cur;\n\t\t\t}\n\t\t\tcur = ch[cur][1];\n\t\t}\n\t}\n}\nint pre(){\n\tint cur = ch[rt][0];\n\twhile(ch[cur][1]) cur = ch[cur][1];\n\tsplay(cur);\n\treturn cur;\n}\nint nxt(){\n\tint cur = ch[rt][1];\n\twhile(ch[cur][0]) cur = ch[cur][0];\n\tsplay(cur);\n\treturn cur;\n}\nvoid del(int k){\n\trk(k);\n\tif(cnt[rt] > 1){\n\t\tcnt[rt]--;\n\t\tmaintain(rt);\n\t\treturn;\n\t}\n\tif(!ch[rt][0] && !ch[rt][1]){\n\t\tclear(rt);\n\t\trt = 0;\n\t\treturn;\n\t}\n\tif(!ch[rt][0]){\n\t\tint cur = rt;\n\t\trt = ch[rt][1];\n\t\tfa[rt] = 0;\n\t\tclear(cur);\n\t\treturn;\n\t}\n\tif(!ch[rt][1]){\n\t\tint cur = rt;\n\t\trt = ch[rt][0];\n\t\tfa[rt] = 0;\n\t\tclear(cur);\n\t\treturn;\n\t}\n\tint cur = rt,x = pre();\n\tch[x][1] = ch[cur][1];\n\tfa[ch[cur][1]] = x;\n\trt = x;\n\tclear(cur);\n\tmaintain(x);\n\treturn;\n}//\u4ece\u8fd9\u91cc\u5f80\u4e0a\u90fd\u662fsplay\u6a21\u677f \nint number(){\n\tint len = s.size(),x = 0;\n\tfor(int i = 0; i < len; i++) x = (x << 1) + (x << 3) + s[i] - '0';\n\treturn x; \n}\nvoid query(int k){\n\tfor(int i = k; i < min(k + 10,sz[rt] + 1); i++){\n\t\tcout << name[kth(i)] << \" \";\n\t}\n\tputs(\"\");\n}\nsigned main(){\n\tchar t;\n\tn = read();\n\tfor(int i = 1; i <= n; i++){\n\t\tcin >> t;tot++;\n\t\tif(t == '+'){\n\t\t\tcin >> name[i];\n\t\t\tif(p[name[i]]) del(p[name[i]]);\n\t\t\tp[name[i]] = read() * -1000000 + tot; \n            \t\t//\u8fd9\u53e5\u8bdd\u662f\u91cd\u70b9\uff01\uff01\uff01\uff01\uff01 \n\t\t\tins(p[name[i]]);\n\t\t}\n\t\tif(t == '?'){\n\t\t\tcin >> s;\n\t\t\tif(s[0] >= '0' && s[0] <= '9') query(number());\n\t\t\telse printf(\"%lld\\n\",rk(p[s]));\n\t\t}\n\t}\n}\n```\n",
        "postTime": 1615638702,
        "uid": 78390,
        "name": "\u6ca7\u6d77\u6620\u7e41\u661f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2584 \u3010[ZJOI2006]GameZ\u6e38\u620f\u6392\u540d\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u4e00\u5f00\u59cb\u72af\u50bb\uff0cWA\u4e86\u534a\u9875\u3002\u3002\u3002\n\n\u65e2\u7136\u6ca1\u6709\u6307\u9488\u7248SBT\u90a3\u6211\u5c31\u5199\u4e00\u4e2a\u597d\u4e86\n\n\u601d\u8def\u5c31\u662f\u8f93\u5165\u4e00\u4e2a\u4eba\u7684\u5206\u6570\u65f6\uff0c\u5206\u522b\u7528\u5f00\u4e24\u4e2amap\u5206\u522b\u4fdd\u5b58TA\u7684\u5206\u6570\u548c\u8fd9\u4e2a\u5206\u6570\u5bf9\u5e94\u7684\u540d\u5b57\uff0c\u4ecb\u4e8e\u6709\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u7684\u5206\u6570\uff0c\u800c\u5206\u6570<1e8\u6240\u4ee5\u6211\u4eec\u5c31\u628a\u5206\u6570\\*1e8\u518d\u52a0\u4e0a\u5b83\u7684\u64cd\u4f5c\u7f16\u53f7\uff08\u7b2c\u51e0\u4e2a\uff09\uff0c\u5c31\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\u6211\u4eec\u5c31\u628a\u5b83\u7684\u503c\u5220\u6389\uff0c\u518d\u63d2\u5165\u65b0\u7684\u503c\u4fbf\u53ef\u3002\n\n\u4e0b\u9762\u662f\u849f\u84bb\u7684\u4ee3\u7801\uff1a\n\n        \n```cpp\n#include<iostream>\n#include<stdio.h>\n#include<algorithm>\n#include<string.h>\n#include<map>\n#define x 19260817\nusing namespace std;\nint n;\nlong long a;\nchar c,ss[100000];\nstring s;\nmap<int,long long>score;\nmap<long long,string>name;\ntypedef struct Node{\n    Node *l,*r;\n    int size,cnt;\n    long long val;\n}SBT,*LE;\nLE Null,root;\nvoid L_Rotate(LE&k){\n    LE tmp=k->r;\n    k->r=tmp->l;\n    tmp->l=k;\n    tmp->size=k->size;\n    k->size=k->l->size+k->r->size+1;\n    k=tmp;\n}\nvoid R_Rotate(LE&k){\n    LE tmp=k->l;\n    k->l=tmp->r;\n    tmp->r=k;\n    tmp->size=k->size;\n    k->size=k->l->size+k->r->size+1;\n    k=tmp;\n}\nvoid Insert(LE&k,long long val){\n    if(k==Null){\n        k=new Node;\n        k->l=k->r=Null;\n        k->val=val;\n        k->cnt=k->size=1;\n        return;\n    }\n    k->size++;\n    if(val<k->val){\n        Insert(k->l,val);\n        if(k->l->l->size>k->r->size)\n            R_Rotate(k);\n    }\n    else\n    if(val>k->val){\n        Insert(k->r,val);\n        if(k->r->r->size>k->l->size)\n            L_Rotate(k);\n    }\n    else\n    if(k->val==val){\n        k->cnt++;\n        return;\n    }\n}\nvoid Delete(LE&k,long long val,int cnt){\n    if(k==Null)return;\n    k->size-=cnt;\n    if(k->val>val)\n        Delete(k->l,val,cnt);\n    if(k->val<val)\n        Delete(k->r,val,cnt);\n    if(k->val==val){\n        k->cnt-=cnt;\n        if(k->cnt!=0)return;\n        if(k->l==Null)\n            k=k->r;\n        else\n        if(k->r==Null)\n            k=k->l;\n        else{\n            LE tmp=k->l;\n            while(tmp->r!=Null){\n                tmp=tmp->r;\n            }\n            k->val=tmp->val;\n            k->cnt=tmp->cnt;\n            Delete(k->l,k->val,k->cnt);\n            return;\n        }\n    }\n}\nint Query_rank(LE k,long long val,int &Cnt){\n    if(k==Null)return 1;\n    if(k->val==val){\n        Cnt=k->cnt;\n        return k->l->size+1;\n    }\n    if(k->val>val)return Query_rank(k->l,val,Cnt);\n    if(k->val<val)return Query_rank(k->r,val,Cnt)+k->l->size+1;\n}\nlong long Query_num(LE k,int rank){\n    if(k==Null)return 0;\n    if(k->l->size>=rank)return Query_num(k->l,rank);\n    if(k->l->size+k->cnt>=rank)return k->val;\n    rank=rank-(k->l->size+1);\n    Query_num(k->r,rank);\n}\nint main()\n{\n    Null=new Node;\n    Null->l=Null->r=Null;\n    Null->size=Null->cnt=0;\n    Null->val=-1;\n    root=Null;\n    scanf(\"%d\",&n);\n    int k=n;\n    while(k--){\n        int hash=0;\n        s.clear();\n        scanf(\"\\n%c\",&c);\n        if(c=='+'){\n            cin>>s;\n            int l=s.size();\n            int cc=x;\n            for(int i=0;i<l;i++){\n                hash+=cc*s[i];\n                cc=cc*x;\n            }\n            scanf(\"%lld\",&a);\n            a=a*100000000+k;\n            if(score[hash]!=0)\n                Delete(root,score[hash],1);\n            name[a]=s;\n            score[hash]=a;\n            Insert(root,a);\n        }\n        if(c=='?'){\n            cin>>s;\n            if(s[0]>'9'||s[0]<'0'){\n                int l=s.size();\n                int cc=x;\n                for(int i=0;i<l;i++){\n                    hash+=cc*s[i];\n                    cc=cc*x;\n                }\n                long long val=score[hash];\n                int aa;\n                printf(\"%d\\n\",root->size-Query_rank(root,val,aa)+1);\n            }    \n            else{\n                int l=s.size();\n                int cc=1;\n                int rank=0;\n                for(int i=l-1;i>=0;i--){\n                    rank+=cc*(s[i]-'0');\n                    cc=cc*10;\n                }\n                for(int i=0;i<10;i++){\n                    if(rank+i>root->size)break;\n                    long long val=Query_num(root,root->size-rank-i+1);\n                    cout<<name[val]<<' ';\n                }\n                putchar(10);\n            }\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1506433258,
        "uid": 25606,
        "name": "G_hz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2584 \u3010[ZJOI2006]GameZ\u6e38\u620f\u6392\u540d\u7cfb\u7edf\u3011"
    },
    {
        "content": "## \u7b80\u8981\u9898\u610f\n\u7ed9\u4f60\u6bcf\u4e2a\u4eba\u7684\u5206\u6570\u66f4\u65b0\u4fe1\u606f\uff0c\u8981\u6c42\u67e5\u8be2\u67d0\u4e9b\u4eba\u7684\u6392\u540d\u548c\u67d0\u4e2a\u6392\u540d\u533a\u95f4\u7684\u4eba\u3002\n## \u9898\u89e3\n\u5bf9\u4e8e\u8fd9\u79cd\u6392\u540d\u7c7b\u9898\u76ee\uff0c\u6beb\u65e0\u7591\u95eeFHQtreap\u662f\u975e\u5e38\u9002\u5408\u7684\uff0c\u5728\u5e73\u8861\u6811\u4e2d\u6309\u5206\u6570\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u66f4\u65b0\u65f6\u95f4\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u8fd9\u4e9b\u662f\u6bd4\u8f83\u57fa\u7840\u7684\u64cd\u4f5c\uff0c\u4e0d\u591a\u89e3\u91ca\uff0c\u8be6\u7ec6\u770b\u4ee3\u7801\u3002\n\n\u5728\u6839\u636e\u4eba\u540d\u627e\u6392\u540d\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7528map\u5b58\u4e0b\u4eba\u7684\u5206\u6570\u548c\u66f4\u65b0\u65f6\u95f4\u3002\u5728\u6392\u540d\u7c7b\u95ee\u9898\u4e2d\uff0c\u4e00\u822c\u6bcf\u4e2a\u5bf9\u8c61\u7684\u4fe1\u606f\u90fd\u662f\u6bd4\u8f83\u72ec\u7279\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u5728\u5e73\u8861\u6811\u4e4b\u5916\u7ef4\u62a4\u5bf9\u8c61\u7684\u6709\u5173\u4fe1\u606f\uff0c\u5728\u5e73\u8861\u6811\u4e2d\u67e5\u627e\u7684\u65f6\u5019\u53ef\u4ee5\u6839\u636e\u8fd9\u4e9b\u4fe1\u606f\u6765\u627e\u5230\u5bf9\u8c61\uff0c\u5728\u8fd9\u9053\u9898\u4e2d\u4e00\u4e2a\u65f6\u95f4\u7684\u5bf9\u8c61\u662f\u552f\u4e00\u7684\uff0c\u6240\u4ee5\u6839\u636e\u5206\u6570\u548c\u65f6\u95f4\u53ef\u4ee5\u627e\u5230\u5bf9\u8c61\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e6+5;\ntypedef long long ll;\nint n,pri[N],siz[N],son[N][2],cnt,root;\nstruct node\n{\n\tll s;int t;string name;\n\tnode (){s=t=0;}\n\tbool operator < (const node &a)const\n\t{\n\t\tif(s!=a.s) return s<a.s;\n\t\treturn t>a.t;\n\t}\n}val[N];\nmap<string,node> m;\nint add(ll x,int y,string s)\n{\n\tsiz[++cnt]=1;pri[cnt]=rand();val[cnt].s=x;val[cnt].t=y;val[cnt].name=s;return cnt;\n}\nvoid update(int x)\n{\n\tsiz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n}\nvoid split1(int rt,int &x,int &y,node z)//\u6309\u7167\u6743\u503c\u5206\u88c2\n{\n\tif(!rt)\n\t{\n\t\tx=y=0;return;\n\t}\n\tif(z<val[rt])\n\t{\n\t\ty=rt;split1(son[rt][0],x,son[y][0],z);\n\t}\n\telse x=rt,split1(son[rt][1],son[x][1],y,z);\n\tupdate(rt);\n}\nvoid split2(int rt,int &x,int &y,int z)//\u6309\u7167\u5927\u5c0f\u5206\u88c2\n{\n\tif(!rt)\n\t{\n\t\tx=y=0;return;\n\t}\n\tif(siz[son[rt][0]]>=z)\n\t{\n\t\ty=rt;split2(son[rt][0],x,son[y][0],z);\n\t}\n\telse x=rt,split2(son[rt][1],son[x][1],y,z-siz[son[rt][0]]-1);\n\tupdate(rt);\n}\nint merge(int x,int y)\n{\n\tif(!x || !y) return x+y;\n\tif(pri[x]<pri[y])\n\t{\n\t\tson[x][1]=merge(son[x][1],y);\n\t\tupdate(x);return x;\n\t}\n\tson[y][0]=merge(x,son[y][0]);\n\tupdate(y);return y;\n}\nvoid insert(int x)\n{\n\tint r1,r2;\n\tsplit1(root,r1,r2,val[x]);\n\troot=merge(r1,merge(x,r2));\n}\nvoid print(int x)//\u904d\u5386\n{\n\tif(son[x][1]) print(son[x][1]);\n\tcout<<val[x].name<<\" \";\n\tif(son[x][0]) print(son[x][0]);\n}\nvoid query(int x)\n{\n\tx=siz[root]-x+1;\n\tint r1,r2,r3;\n\tsplit2(root,r1,r2,x);\n\tif(siz[r1]>10)\n\t{\n\t\tsplit2(r1,r1,r3,siz[r1]-10),print(r3);\n\t\troot=merge(merge(r1,r3),r2);\n\t}\n\telse{\n\t\tprint(r1);root=merge(r1,r2);\n\t}\n\tprintf(\"\\n\");\n}\nvoid queryrank(node x)\n{\n\tint r1,r2;\n\tsplit1(root,r1,r2,x);\n\tprintf(\"%d\\n\",siz[r2]+1);\n\troot=merge(r1,r2);\n}\nint main()\n{\n\tsrand(19260817);\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tchar opt;string name;ll x;\n\t\tcin>>opt>>name;\n\t\tif(opt=='+')\n\t\t{\n\t\t\t scanf(\"%lld\",&x);\n\t\t\t int r1,r2,r3;\n\t\t\t if(m[name].t!=0)\n\t\t\t {\n\t\t\t\t split1(root,r1,r3,m[name]);\n\t\t\t\t split2(r1,r1,r2,siz[r1]-1);\n\t\t\t\t root=merge(r1,r3);\n\t\t\t\t val[r2].s=x;val[r2].t=i;\n\t\t\t }\n\t\t\t else r2=add(x,i,name),m[name].name=name;\n\t\t\t m[name].t=i;m[name].s=x;\n\t\t\t insert(r2);\n\t\t}\n\t\telse{\n\t\t\tif(name[0]>='0' && name[0]<='9')\n\t\t\t{\n\t\t\t\tx=name[0]-'0';\n\t\t\t\tfor(int j=1;j<(int)name.size();j++) x=x*10+name[j]-'0';\n\t\t\t\tquery(x);\n\t\t\t}\n\t\t\telse queryrank(m[name]);\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n[\u53cc\u500d\u7ecf\u9a8c](https://www.luogu.com.cn/problem/P4291)",
        "postTime": 1668323207,
        "uid": 300710,
        "name": "xuyuansu",
        "ccfLevel": 0,
        "title": "P2584 [ZJOI2006]GameZ\u6e38\u620f\u6392\u540d\u7cfb\u7edf"
    },
    {
        "content": "\u5e73\u8861\u6811\u597d\u9898\uff0c\u672c\u4eba\u4f7f\u7528 fhq\u3002  \n\u89c2\u5bdf\u672c\u9898\uff0c\u53d1\u73b0\u672c\u9898\u4e0e\u4e00\u822c\u7684 fhq \u9898\u76ee\u6709\u4e9b\u8bb8\u4e0d\u540c\uff1a\n - \u9700\u8981\u652f\u6301\u6309\u6392\u540d\u5206\u88c2\u6216\u8005\u6309\u6743\u503c\u5206\u88c2\uff0c\u5206\u522b\u5b9e\u73b0\u5373\u53ef\uff1b\n - \u5206\u6570\u76f8\u540c\u6309\u65f6\u95f4\u6392\u5e8f\uff0c\u53ef\u4ee5\u53cc\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u4f46\u7b14\u8005\u4f7f\u7528\u4e86\u6309\u7167\uff08\u5206\u6570 $\\times260000+$ \u65f6\u95f4\uff08\u65f6\u95f4\u4e3a\u5012\u5e8f\uff09\uff09\u4f5c\u4e3a\u8282\u70b9\u7684\u6743\u503c\uff0c\u6392\u5e8f\u8d77\u6765\u66f4\u65b9\u4fbf~~\u5176\u5b9e\u672c\u8d28\u8fd8\u662f\u53cc\u5173\u952e\u5b57\u6392\u5e8f~~\u3002\n\n\u63a5\u4e0b\u6765\u5206\u6790\u9898\u76ee\u6240\u7ed9\u7684\u64cd\u4f5c\u3002\n\n## \u4e0a\u4f20\u5206\u6570\n\n\u6211\u4eec\u7ed9\u6bcf\u4e2a\u4eba\u7f16\u53f7\uff0c\u5982\u679c\u8fd9\u4e2a\u540d\u5b57\u4ee5\u524d\u6ca1\u6709\u88ab\u7f16\u8fc7\u53f7\uff0c\u5c31\u7f16\u4e00\u4e2a\u53f7\uff0c\u5e76\u628a\u6743\u503c\u6254\u8fdb fhq \u4e2d\uff1b\u5982\u679c\u8fd9\u4e2a\u540d\u5b57\u5df2\u7ecf\u7f16\u8fc7\u53f7\u4e86\uff0c\u5c31\u628a\u65e7\u7684\u6743\u503c\u5220\u9664\uff0c\u66f4\u65b0\u6743\u503c\uff08\u5916\u90e8\u6570\u7ec4\u8bb0\u5f55\uff09\uff0c\u5e76\u5c06\u65b0\u6743\u503c\u6254\u8fdb fhq \u4e2d\u3002\n\n## \u67e5\u8be2\u6392\u540d\n\n\u5bf9\u4e8e\u8f93\u5165\u7ed9\u5b9a\u7684\u540d\u5b57\uff0c\u5148\u67e5\u9605\u5176\u7f16\u53f7\uff0c\u518d\u7528\u5916\u90e8\u6570\u7ec4\u67e5\u4ed6\u7684\u6743\u503c\uff0c\u5c06 fhq \u6309\u6743\u503c\u5206\u88c2\uff0c\u5f97\u5230\u4ed6\u7684\u6392\u540d\u3002\n\n## \u67e5\u8be2\u540d\u5b57\n\n\u9996\u5148\u6309\u6392\u540d\u5206\u88c2\uff0c\u7531\u4e8e\u7b14\u8005\u7684 fhq \u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\uff0c\u6545\u9700\u8981\u5148\u5c06\u6392\u540d\u53d6\u4e2a\u53cd\u3002  \n\u4e4b\u540e\u5c31\u53d8\u6210\u4e86\u5728\u4e00\u68f5\u5b50\u6811\u4e2d\u67e5\u8be2\u6392\u540d\u4e3a $1\\sim\\min(10,size)$ \u7684\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u5176\u4e2d $size$ \u4e3a\u5b50\u6811\u5927\u5c0f\u3002  \n\u7531\u4e8e\u7b14\u8005\u4e0d\u662f\u5f88\u806a\u660e\uff0c\u91c7\u7528\u4e86 `for` \u5faa\u73af\u52a0\u66b4\u529b\u5206\u88c2\u5408\u5e76\u7684\u65b9\u6cd5\uff0c\u5e38\u6570\u5de8\u5927~~\u5dee\u70b9\u8fc7\u4e0d\u53bb~~\u3002  \n\u5177\u4f53\u5730\uff0c\u82e5\u67e5\u8be2\u6392\u540d\u4e3a $i$ \u7684\u8282\u70b9\u7684\u6743\u503c\uff0c\u5219\u5c06 $i$ \u4f5c\u4e3a\u5173\u952e\u5b57\u6309\u6392\u540d\u5206\u88c2\uff0c\u518d\u5728\u5de6\u5b50\u6811\u4e2d\u5c06 $i-1$ \u4f5c\u4e3a\u5173\u952e\u5b57\u6309\u6392\u540d\u5206\u88c2\uff0c\u6ce8\u610f\u5982\u679c\u67e5\u8be2\u5230\u4e3a\u7a7a\u5c31\u53ca\u65f6\u9000\u51fa\uff0c\u9632\u6b62 RE\u3002  \n\n## code\n\ntrick\uff1a\u5b57\u7b26\u4e32\u5904\u7406\u63a8\u8350\u7528 string\uff0c\u7528\u8d77\u6765\u5f88\u65b9\u4fbf\uff0c\u4f46\u5b83\u53ea\u80fd cin \u548c cout\uff0c\u6b64\u65f6\u53ef\u4ee5\u5173\u95ed\u540c\u6b65\u6d41**\u548c\u5c06 endl \u6539\u4e3a \\`\\n\\`**\u3002\uff08\u5b9e\u6d4b\u80fd\u5feb\u4ebf\u500d\uff0c\u5b66\u6821 OJ \u8fc7\u4e0d\u53bb\u5c31\u662f\u8fd9\u6837\u5361\u8fc7\u53bb\u7684\uff09  \n\u5173\u95ed\u540c\u6b65\u6d41\u7684\u65b9\u6cd5\uff1a\n\n```cpp\nios::sync_with_stdio (0); cin.tie (0); cout.tie (0);\n```\n\n\u4f46\u9700\u6ce8\u610f\u4e4b\u540e\u53ea\u80fd cin \u548c cout\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u51fa\u4e00\u4e9b\u795e\u5947\u7684\u95ee\u9898\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define fq(i,a,b) for (int i = (a); i <= (b); i++)\n#define fnq(i,a,b) for (int i = (a); i < (b); i++)\n#define nfq(i,a,b) for (int i = (a); i >= (b); i--)\n#define nfnq(i,a,b) for (int i = (a); i > (b); i--)\n#define fqs(i,a,b,c) for (int i = (a); i <= (b); i += (c))\n#define fnqs(i,a,b,c) for (int i = (a); i < (b); i += (c))\n#define nfqs(i,a,b,c) for (int i = (a); i >= (b); i -= (c))\n#define nfnqs(i,a,b,c) for (int i = (a); i > (b); i -= (c))\n#define elif else if\nusing namespace std;\n\n#define int long long\n\n//#define GRAPH\n//const int EDGES = -1;\n//const int VERTEXES = -1;\n////# define EDGE_W\n////typedef int W_TYPE;\n\n//#define COMPLEX\n\ninline int rd () {\n\tint f = 1;\n\tchar ch = getchar ();\n\twhile (!isdigit (ch)) (ch == '-' ? (f = -1) : 0), ch = getchar ();\n\tint num = 0;\n\twhile (isdigit (ch)) num = num * 10 + ch - '0', ch = getchar ();\n\treturn num * f;\n}\n#define d rd ()\n\ninline int rd (const int modp) {\n\tint f = 1;\n\tchar ch = getchar ();\n\twhile (!isdigit (ch)) (ch == '-' ? (f = -1) : 0), ch = getchar ();\n\tint num = 0;\n\twhile (isdigit (ch)) num = (num * 10 + ch - '0') % modp, ch = getchar ();\n\treturn (num * f % modp + modp) % modp;\n}\n\n#ifdef GRAPH\nstruct Edge {\n\tint v, nxt;\n# ifdef EDGE_W\n\tW_TYPE w;\n# endif\n\tEdge () {}\n# ifdef EDGE_W\n\tEdge (int _v, W_TYPE _w, int _nxt) {v = _v, w = _w, nxt = _nxt;}\n# else\n\tEdge (int _v, int _nxt) {v = _v, nxt = _nxt;}\n# endif\n} edge[EDGES];\nint head[VERTEXES], ecnt;\n# ifdef EDGE_W\nvoid addedge (int u, int v, W_TYPE w) {edge[++ecnt] = Edge (v, w, head[u]); head[u] = ecnt;}\n#  define fe(u) for (int i = head[u], v, w; v = edge[i].v, w = edge[i].w, i; i = edge[i].nxt)\n# else\nvoid addedge (int u, int v) {edge[++ecnt] = Edge (v, head[u]); head[u] = ecnt;}\n#  define fe(u) for (int i = head[u], v; v = edge[i].v, i; i = edge[i].nxt)\n# endif\nvoid init () {memset (head, 0, sizeof head); ecnt = 0;}\n#endif\n\n#ifdef COMPLEX\nstruct cpx {\n\tdouble a, b;\n\tcpx () {a = 0, b = 0;}\n\tcpx (double _a) {a = _a, b = 0;}\n\tcpx (double _a, double _b) {a = _a, b = _b;}\n\tfriend cpx operator + (cpx a, cpx b) {return cpx (a.a + b.a, a.b + b.b);}\n\tfriend cpx operator - (cpx a, cpx b) {return cpx (a.a - b.a, a.b - b.b);}\n\tfriend cpx operator * (cpx a, cpx b) {return cpx (a.a * b.a - a.b * b.b, a.b * b.a + a.a * b.b);}\n\tfriend cpx operator / (cpx a, cpx b) {return cpx ((a.a * b.a + a.b * b.b) / (b.b * b.b + b.a * b.a), (a.b * b.a - a.a * b.b) / (b.b * b.b + b.a * b.a));}\n\tfriend cpx operator += (cpx &a, cpx b) {return a = a + b;}\n\tfriend cpx operator -= (cpx &a, cpx b) {return a = a - b;}\n\tfriend cpx operator *= (cpx &a, cpx b) {return a = a * b;}\n\tfriend cpx operator /= (cpx &a, cpx b) {return a = a / b;}\n};\n#endif\n// \u4ee5\u4e0a\u5747\u4e3a\u7801\u5934\uff0c\u4ee5\u4e0b\u4e3a\u4e3b\u8981\u7a0b\u5e8f \nconst int maxn = 300300;\nstruct node {\n\tint l, r, pri, sz, key, id;\n\tnode () {}\n\tnode (int k, int i) {l = r = 0; sz = 1; key = k; id = i; pri = rand ();}\n} tree[maxn]; int cnt;\n#define sz(p) tree[p].sz\n#define l(p) tree[p].l\n#define r(p) tree[p].r\n#define pri(p) tree[p].pri\n#define key(p) tree[p].key\n//\u5f00\u59345\u4e2a\u5b8f\uff0c\u4ee3\u7801\u77ed\u4e00\u500d \nvoid push_up (int p) {sz (p) = sz (l (p)) + sz (r (p)) + 1;}\npair <int, int> split (int p, int k) {//\u6309\u6743\u503c\u5206\u88c2\uff0c<k\u653e\u5de6\u5b50\u6811\uff0c>=k\u653e\u53f3\u5b50\u6811 \n\tif (!p) return make_pair (0, 0);\n\tif (k <= key (p)) {\n\t\tpair <int, int> q = split (l (p), k);\n\t\tl (p) = q.second;\n\t\tpush_up (p);\n\t\treturn make_pair (q.first, p);\n\t} else {\n\t\tpair <int, int> q = split (r (p), k);\n\t\tr (p) = q.first;\n\t\tpush_up (p);\n\t\treturn make_pair (p, q.second);\n\t}\n}\npair <int, int> splitt (int p, int k) {//\u6309\u6392\u540d\u5206\u88c2\uff0c<=k\u653e\u5de6\u5b50\u6811\uff0c>k\u653e\u53f3\u5b50\u6811 \n\tif (!k) return make_pair (0, p);\n\tif (!p) make_pair (0, 0);\n\tif (k <= sz (l (p))) {\n\t\tpair <int, int> q = splitt (l (p), k);\n\t\tl (p) = q.second; push_up (p);\n\t\treturn make_pair (q.first, p);\n\t} elif (k == sz (l (p)) + 1) {\n\t\tint rr = r (p);\n\t\tr (p) = 0; push_up (p);\n\t\treturn make_pair (p, rr);\n\t} else {\n\t\tpair <int, int> q = splitt (r (p), k - sz (l (p)) - 1);\n\t\tr (p) = q.first; push_up (p);\n\t\treturn make_pair (p, q.second);\n\t}\n}\nint merge (int x, int y) {//\u5408\u5e76 \n\tif (!x || !y) return x | y;\n\tif (pri (x) > pri (y)) {\n\t\tr (x) = merge (r (x), y);\n\t\tpush_up (x);\n\t\treturn x;\n\t} else {\n\t\tl (y) = merge (x, l (y));\n\t\tpush_up (y);\n\t\treturn y;\n\t}\n}\nint addnode (int id, int k) {tree[++cnt] = node (id, k); return cnt;}\nint root;\nvoid insert (int score, int id) {//\u63d2\u5165 \n\tpair <int, int> q = split (root, score);\n\troot = merge (q.first, merge (addnode (score, id), q.second));\n}\nvoid erase (int score) {//\u5220\u9664 \n\tpair <int, int> q = split (root, score);\n\tpair <int, int> r = split (q.second, score + 1);\n\troot = merge (q.first, r.second);\n}\nmap <string, int> mp; string mmp[maxn]; int ccnt; int sc[maxn];\nconst int shift = 260000;//\u4e58\u4ee5\u4e00\u4e2a\u5f88\u5927\u7684\u6570 \nstring s;\nsigned main () {\n\tios::sync_with_stdio (0); cin.tie (0); cout.tie (0);//\u5173\u95ed\u540c\u6b65\u6d41 \n\tint m; cin >> m; while (m--) {\n\t\tcin >> s;\n\t\tif (s[0] == '+') { int x; cin >> x;\n\t\t\ts = s.substr (1);\n\t\t\tif (!mp[s]) {//\u8fd9\u4e2a\u540d\u5b57\u6ca1\u6709\u88ab\u7f16\u8fc7\u53f7 \n\t\t\t\tmp[s] = ++ccnt;\n\t\t\t\tmmp[ccnt] = s;\n\t\t\t\tsc[ccnt] = x * shift + m;\n\t\t\t\tinsert (x * shift + m, ccnt);\n\t\t\t} else {//\u8fd9\u4e2a\u540d\u5b57\u7f16\u8fc7\u53f7 \n\t\t\t\terase (sc[mp[s]]);\n\t\t\t\tsc[mp[s]] = x * shift + m;\n\t\t\t\tinsert (x * shift + m, mp[s]);\n\t\t\t}\n\t\t} else {\n\t\t\ts = s.substr (1);\n\t\t\tif (isdigit (s[0])) {//\u7ed9\u6392\u540d\u67e5\u8be2\u540d\u5b57 \n\t\t\t\tint num = 0;\n\t\t\t\tfor (auto c : s) num = num * 10 + c - '0';\n\t\t\t\tpair <int, int> q = splitt (root, sz (root) - num + 1);\n\t\t\t\tfq (i, 1, 10) {//\u66b4\u529b\u67e5\u8be2 \n\t\t\t\t\tif (sz (q.first) - i < 0) break;//\u53ca\u65f6\u9000\u51fa\n\t\t\t\t\tpair <int, int> r = splitt (q.first, sz (q.first) - i);\n\t\t\t\t\tpair <int, int> t = splitt (r.second, 1);\n\t\t\t\t\tif (!t.first) {\n\t\t\t\t\t\tq.first = merge (r.first, merge (t.first, t.second));\n\t\t\t\t\t\tbreak;//\u53ca\u65f6\u9000\u51fa\u4e4b\u524d\u4e0d\u8981\u5fd8\u8bb0merge\u56de\u6765\n\t\t\t\t\t}\n\t\t\t\t\tcout << mmp[tree[t.first].id] << ' ';\n\t\t\t\t\tq.first = merge (r.first, merge (t.first, t.second));\n\t\t\t\t} cout << '\\n'; root = merge (q.first, q.second);\n\t\t\t} else {//\u7ed9\u540d\u5b57\u67e5\u8be2\u6392\u540d \n\t\t\t\tint score = sc[mp[s]];\n\t\t\t\tpair <int, int> q = split (root, score);\n\t\t\t\tcout << sz (q.second) << '\\n';\n\t\t\t\troot = merge (q.first, q.second);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n/*\n20\n+A 1\n+B 1\n+C 2\n+D 3\n?1\n*/\n\n```\n\n\u53ef\u4ee5\u4ece\u4ee3\u7801\u770b\u51fa\uff0cfhq \u7684\u4f18\u70b9\u8fd8\u662f\u4ee3\u7801\u77ed\uff0c\u597d\u5199\uff0c\u597d\u5904\u7406\uff0c**\u6613 debug**\u3002",
        "postTime": 1658403235,
        "uid": 300313,
        "name": "_luanyi_",
        "ccfLevel": 6,
        "title": "P2584"
    },
    {
        "content": "\u663e\u7136\u8fd9\u662f\u4e00\u9053Splay\uff0c\u7136\u800c\u88ab\u5404\u79cd\u7ec6\u8282\u548c\u81ea\u8eab\u849f\u84bb\u5751\u6210\u50bb\u903c\u2026\u2026\n\n**\u5206\u6790:**\u697c\u4e0b\u5df2\u7ecf\u8bb2\u7684\u5dee\u4e0d\u591a\u4e86\uff0c\u8fd9\u91cc\u7ed9\u51fa\u51e0\u70b9\u8865\u5145\n\n(1)\u8f93\u51fa\u6392\u540d\u7684\u65f6\u5019\u8981\u6c42\u6309\u53cc\u5173\u952e\u5b57(\u5f97\u5206\u3010\u9ad8\u5206\u5728\u524d\u3011-\u6700\u8fd1\u4e00\u6b21\u4e0a\u4f20\u5f97\u5206\u7684\u65f6\u95f4\u3010\u4e0a\u4f20\u65e9\u5728\u524d\u3011)\u6392\u5e8f(\u7136\u800c\u6076\u5fc3\u7684\u9898\u76ee\u53ea\u5b57\u672a\u63d0QAQ)\uff0c\u4e0d\u8fc7\u4e8b\u5b9e\u4e0a\u53ea\u8981\u5728\u6811\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u57df\uff0c\u7136\u540e\u5728\u63d2\u5165\u65f6\u7a0d\u52a0\u5224\u65ad\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u5c31\u90fd\u662f\u677f\u4e86\uff1b\n\n(2)\u7531\u4e8e\u8bb0\u5f55\u7684\u6570\u91cf\u95ee\u9898\u53ef\u80fd\u65e0\u6cd5\u8f93\u51fa10\u6761\uff0c\u56e0\u6b64\u5728\u4f38\u5c55\u65f6\u5e94\u4e0e\u603b\u8282\u70b9\u6570\u53d6\u6700\u5c0f\u503c\uff1b\n\n(3)\u7531\u4e8e\u8981\u901a\u8fc7\u4f38\u5c55\u628a10\u6761\u6392\u540d\u8bb0\u5f55\u8f93\u51fa\uff0c\u6240\u6709\u8981\u5148\u5efa\u4e24\u4e2a\u54e8\u5175(\u6700\u5927-\u6700\u5c0f\uff0c\u6ce8\u610f\u503c\u53d6\u6781\u7aef\u4e9b\uff0c\u4e4b\u524d\u5f00\u4e0d\u597d\u4e00\u4e2a\u70b9\u4e00\u76f4TLE\u2026\u2026)(\u53ef\u80fd\u4e5f\u4e0d\u7528\u5f00\u54e8\u5175\uff0c\u6bd5\u7adf\u6211\u849f\u84bb\u2026\u2026\u4f46\u5982\u679c\u7531\u4e8e\u7279\u6b8a\u60c5\u51b5\u53ea\u8f93\u51fa1\u6761\u8bb0\u5f55\u65f6\uff0c\u4f38\u5c55\u4f1a\u6b7b\u5faa\u73af)\uff1b\n\n(4)Orz\u697c\u4e0b\u795e\u7287\uff0c\u5b57\u5178\u6811\u4e0d\u77e5\u9053\u6bd4\u4ec0\u4e48map,\u54c8\u5e0c\u9ad8\u5230\u54ea\u91cc\u53bb\u4e86\uff0c\u76ee\u524d\u6570\u7ec4Splay\u7adf\u7136\u62ff\u4e86rank1\n\n**\u4ee3\u7801:**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nconst int Maxn = 2147483647; //\u6781\u7aef\u503c \nconst int N = 250005, M = 1e5;\nint fa[N], lc[N], rc[N], sze[N], vis[N], len[N], pos[N], tag[N];\nint n, m, E, T = 1, rt, tis, G[M][27];\nchar a[N][12], tp[12];\ntemplate <class T> inline T Min(T a, T b) {return a < b? a : b;}\ninline int get()\n{\n    char ch; bool f = false; int res = 0;\n    while (((ch = getchar()) < '0' || ch > '9') && ch != '-');\n    if (ch == '-') f = true;\n     else res = ch - '0';\n    while ((ch = getchar()) >='0' && ch <= '9')\n        res = (res << 3) + (res << 1) + ch - '0';\n    return f? ~res + 1 : res;\n}\ninline void put(int x)\n{\n    if (x < 0)\n      x = ~x + 1, putchar('-');\n    if (x > 9) put(x / 10);\n    putchar(x % 10 + 48);\n}\ninline void Push(int x)\n{\n    sze[x] = sze[lc[x]] + sze[rc[x]] + 1;\n}\ninline bool Wrt(int x) {return rc[fa[x]] == x;}\ninline void Rot(int x)\n{\n    int y = fa[x], z = fa[y];\n    int b = (lc[y] == x) ? rc[x] : lc[x];\n    fa[x] = z; fa[y] = x;\n    if (b) fa[b] = y;\n    if (z) (y == lc[z] ? lc[z] : rc[z]) = x;\n    if (x == lc[y]) rc[x] = y, lc[y] = b;\n     else lc[x] = y, rc[y] = b;\n    Push(y);\n}\ninline void Splay(int x, int tar)\n{\n    while (fa[x] != tar)\n    {\n        if (fa[fa[x]] != tar)\n         Wrt(x) == Wrt(fa[x]) ? Rot(fa[x]) : Rot(x);\n        Rot(x);\n    }\n    Push(x);\n    if (!tar) rt = x;\n}\ninline void Ins(int t, int vi, int ti)\n{\n    int x = rt, y = 0, dir;\n    while (x)\n    {\n        ++sze[y = x];\n        if (vi > vis[x] || (vi == vis[x] && ti < pos[x])) x = rc[x], dir = 1; //\u53cc\u5173\u952e\u5b57 \n         else x = lc[x], dir = 0;\n    }\n    fa[x = t] = y; sze[x] = 1; vis[x] = vi; pos[x] = ti;\n     if (y) (dir == 1 ? rc[y] : lc[y]) = x;\n    Splay(x, 0);\n}\ninline void Join(int x, int y)\n{ \n    lc[fa[x]] = rc[fa[y]] = 0;\n    int k = y;\n    while (lc[k]) k = lc[k];\n    lc[k] = x; fa[x] = k;\n    fa[rt = y] = 0;\n    Splay(k, 0);\n}\ninline void Del(int x)\n{\n    Splay(x, 0);\n    if (!lc[x] || !rc[x])\n     fa[rt = lc[x] + rc[x]] = 0; \n    else Join(lc[x], rc[x]);\n}\ninline int Getkth(int k)\n{\n    int x = rt;\n    while (x)\n    {\n        if (k <= sze[rc[x]]) x = rc[x];\n        else \n        {\n            k -= sze[rc[x]] + 1;\n            if (!k) return x;\n            x = lc[x];\n        }\n    }\n    return 0;\n}\ninline int Putkth(int x)\n{\n    if (!x) return 0;\n    Splay(x, 0);\n    return sze[rc[x]];\n}\ninline void Print(int x, int k)\n{\n    if (!x) return ;\n    Print(rc[x], k);\n    for (int i = 0; i < len[x]; ++i) putchar(a[x][i]);\n    putchar(k != x ? ' ' : '\\n');\n    Print(lc[x], k); \n}\ninline void Que(int k)\n{\n    int x = Getkth(Min(sze[rt], k + 11)),  \n        y = Getkth(k), z;\n    Splay(x, 0); Splay(y, x);\n    z = lc[y]; \n    while (lc[z]) z = lc[z];\n    Print(lc[y], z); \n}\ninline int TrAsk(char *s, int L)\n{\n    int x = 1;\n    for (int i = 0; i < L; ++i) x = G[x][s[i] - 'A'];\n    return tag[x];\n}\ninline void TrIns(char *s, int L)\n{\n    int x = 1, y; \n    for (int i = 0; i < L; ++i)\n    {\n        y = s[i] - 'A';\n        if (!G[x][y]) G[x][y] = ++T;\n        x = G[x][y];\n    }\n    if (!tag[x])\n    {\n        Ins(tag[x] = ++E, get(), ++tis);\n        len[E] = L;\n        for (int i = 0; i < L; ++i) a[E][i] = s[i];\n        a[E][L] = '\\0';\n    }\n    else Del(tag[x]), Ins(tag[x], get(), ++tis);\n}\nint main()\n{\n    n = get(); \n    char cr, fr; int u, v, l;\n    Ins(++E, -Maxn, 0); \n    Ins(++E, Maxn, Maxn); //\u54e8\u5175 \n    while (n--)\n    {\n        l = 0;\n        while ((fr = getchar()) != '+' && fr != '?');\n        while (((cr = getchar()) >= 'A' && cr <= 'Z') || (cr >= '0' && cr <= '9')) tp[l++] = cr;\n        if (fr == '+') TrIns(tp, l);\n        else if (tp[0] >= '0' && tp[0] <= '9')\n        {\n            u = 0;\n            for (int i = 0; i < l; ++i)\n             u = (u << 3) + (u << 1) + tp[i] - '0';\n            Que(u);\n        }\n        else put(Putkth(TrAsk(tp, l))), putchar('\\n');\n    }\n    return 0;\n}\n```",
        "postTime": 1492334051,
        "uid": 17952,
        "name": "Log_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2584 \u3010[ZJOI2006]GameZ\u6e38\u620f\u6392\u540d\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u849f\u84bb\u521a\u5b66\u5e73\u8861\u6811\uff0c\u6765\u6c34\u4e00\u53d1\n\n\n------------\n\n### \u524d\u7f6e\u829d\u58eb:\n#### [FHQtreap-OIwiki](https://oi-wiki.org/ds/treap)\n\n\n------------\n\n### \u524d\u7f6e\u9898\u76ee:\n#### [\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.com.cn/problem/P3369)\n\n\n------------\n### \u9898\u76ee\u7b80\u8ff0\uff1a\n\u8981\u6c42\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u63d2\u5165\uff0c\u5220\u9664\uff0c\u67e5\u8be2\u503c\u7684\u6392\u540d\uff0c\u67e5\u8be2\u8fde\u7eed\u7684 10 \u540d\uff0c\u4e14\u6bcf\u4e2a\u70b9\u662f\u672c\u8d28\u4e0d\u540c\u7684\u3002\n\n### \u9898\u76ee\u601d\u8def\uff1a\n\n\u4f7f\u7528\u65e0\u65cb treap \uff0c\u66b4\u529b\u7ef4\u62a4\u8282\u70b9\u4fe1\u606f\uff08\u5de6\u53f3\u5b69\u5b50\uff0c\u503c\uff0c\u540d\u5b57\uff09\u5373\u53ef\uff0c\u518d\u5f00\u4e00\u4e2a map \u4fdd\u5b58\u540d\u5b57\u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7\n\n\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u4f18\u5316\uff1a\u672c\u9898\u9700\u8981\u7ef4\u62a4\u4e24\u4e2a\u503c $score$ \u548c $count$ \u3002\u4f46\u6ce8\u610f\u5230\u53ea\u6709\u5728 $score$ \u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u624d\u9700\u8981\u6bd4\u8f83 $count$ \uff0c \u6240\u4ee5\u53ef\u4ee5\u7ef4\u62a4\u503c $v$ \u4e3a $score*maxval-count$ \uff0c\u5176\u4e2d $maxval$ \u8868\u793a $score$ \u80fd\u53d6\u5230\u7684\u6700\u5c0f\u503c \u4e0e $count$ \u80fd\u53d6\u5230\u7684\u6700\u5927\u503c\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\uff08\u5f53\u7136\u53ef\u4ee5\u6bd4\u8fd9\u4e2a\u8fd8\u5927\uff09\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u5728 $score$ \u4e0d\u540c\u65f6 $count$ \u4e0d\u4f1a\u5f71\u54cd\u6bd4\u8f83\u7ed3\u679c\n\n\n------------\n\n### \u4e24\u79cd split \u65b9\u5f0f\uff1a\n\u540e\u6587\u7684 ```splitval``` \u548c ```splitrnk``` \u5206\u522b\u662f\u6309\u503c\u5206\u88c2\u548c\u6309\u6392\u540d\u5206\u88c2\uff08\u5728 OIwiki \u4e2d\u8bb2\u5f97\u4e0d\u592a\u6e05\u695a\uff0c\u6240\u4ee5\u6211\u63d0\u4e00\u5634\uff09\u3002\n\n**\u6309\u503c\u5206\u88c2**\uff0c\u4e5f\u662f OIwiki \u4e2d\u7684\u4ee3\u7801\u5b9e\u73b0\uff0c\u5373 ```splitval(root, v, x, y)``` \uff0c\u529f\u80fd\u662f\u5c06\u4ee5 root \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u5206\u88c2\u6210\u4e24\u68f5\u6811\uff0c\u4e00\u4e2a\u6811\u6240\u6709\u8282\u70b9\u7684\u503c\u5c0f\u4e8e\uff08\u53ef\u4ee5\u662f\u5c0f\u4e8e\u7b49\u4e8e\uff0c\u4f46\u662f\u6539\u4e3a\u5c0f\u4e8e\u7b49\u4e8e\u9700\u8981\u76f8\u5e94\u4fee\u6539\u540e\u9762\u7684\u67e5\u8be2\u65f6\u4f20\u9012\u7684\u53c2\u6570\uff09 v \uff0c\u6839\u8282\u70b9\u4e3a x \uff1b\u53e6\u4e00\u9897\u6811\u6240\u6709\u8282\u70b9\u503c\u5927\u4e8e\u7b49\u4e8e v \uff0c\u6839\u8282\u70b9\u4e3a y \u3002\n\n\u5b9e\u73b0\uff1a\uff08 x \u548c y \u90fd\u662f\u4f20\u5f15\u7528\u6765\u9012\u5f52\u4fee\u6539\u503c\uff09\n```cpp\nvoid splitval(long long rt, long long v, long long &x, long long &y)\n{\n\tif(!rt)\n\t{\n\t\tx = 0;\n\t\ty = 0;\n\t\treturn;\n\t}\n\tif(val[rt] <= v)\n\t{\n\t\tx = rt;\n\t\tsplitval(ch[rt][1], v, ch[rt][1], y);\n\t\tpushup(x);\n\t}\n\telse\n\t{\n\t\ty = rt;\n\t\tsplitval(ch[rt][0], v, x, ch[rt][0]);\n\t\tpushup(y);\n\t}\n\treturn;\n}\n```\n\n------------\n\n**\u6309\u6392\u540d\u5206\u88c2**\uff0c\u5373 ```splitrnk(root, k, x, y)``` ,\u529f\u80fd\u662f\u5c06\u4ee5 root \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u5206\u88c2\u6210\u4e24\u68f5\u6811\uff0c\u4e00\u4e2a\u6811\u6240\u6709\u8282\u70b9\u7684\u6392\u540d\u5c0f\u4e8e\uff08\u53ef\u4ee5\u662f\u5c0f\u4e8e\u7b49\u4e8e\uff0c\u4e24\u79cd\u5199\u6cd5\u90fd\u5bf9\uff0c\u6211\u7684\u4ee3\u7801\u4e2d\u662f\u5c0f\u4e8e\u7684\u5199\u6cd5\uff09 k \uff0c\u6839\u8282\u70b9\u4e3a x \uff1b\u53e6\u4e00\u9897\u6811\u6240\u6709\u8282\u70b9\u6392\u540d\u5927\u4e8e\u7b49\u4e8e k \uff0c\u6839\u8282\u70b9\u4e3a y \u3002\n\n\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n```cpp\nvoid splitrnk(long long rt, long long k, long long &x, long long &y)\n{\n\tif(!rt)\n\t{\n\t\tx = 0;\n\t\ty = 0;\n\t\treturn;\n\t}\n\tif(size[ch[rt][0]] + 1 <= k)\n\t{\n\t\tx = rt;\n\t\tsplitrnk(ch[rt][1], k - size[ch[rt][0]] - 1, ch[rt][1], y);\n\t\tpushup(x);\n\t}\n\telse\n\t{\n\t\ty = rt;\n\t\tsplitrnk(ch[rt][0], k, x, ch[rt][0]);\n\t\tpushup(y);\n\t}\n}\n```\n\n\n------------\n\n**1. \u5bf9\u4e8e\u52a0\u5165\u64cd\u4f5c\uff1a**\n\n\u5982\u679c\u4ee5\u524d\u52a0\u5165\u8fc7\u8be5\u4eba\uff0c\u5219\u5148\u5220\u9664\u65e7\u7684\u8bb0\u5f55\uff0c\u5e76\u52a0\u5165\u65b0\u7684\u8bb0\u5f55\n\n**2. \u5bf9\u4e8e\u67e5\u8be2\u67d0\u4eba\u6392\u540d\uff1a**\n\n```splitval(v - 1)``` ,\u5e76\u53d6\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e2a\u6570 +1 \n\n**3. \u5bf9\u4e8e\u67e5\u8be2\u8fde\u7eed\u7684 10 \u540d:**\n\n\u5047\u8bbe\u8fde\u7eed 10 \u540d\u4e2d\u7b2c 1 \u4e2a\u6392\u540d\u662f rank \uff0cnodesize \u8868\u793a\u603b\u8282\u70b9\u6570\uff0c\u56e0\u4e3a\u540d\u6b21\u6309\u4ece\u5927\u5230\u5c0f\u6392\uff0c\u540c\u65f6\u6211\u4eec\u7ef4\u62a4\u7684\u6811\u662f\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u6240\u6709\u8282\u70b9\u5c0f\u4e8e\u6839\uff0c\u53f3\u5b50\u6811\u6240\u6709\u8282\u70b9\u5927\u4e8e\u6839\uff0c\u6240\u4ee5\u8981\u7528\u603b\u7ed3\u70b9\u6570 - rank \u3002\u6613\u77e5\u6211\u4eec\u9700\u8981\u7684\u662f\u6392\u540d $max(nodesize - rank - 9, 0)$ \u548c $nodesize - rank + 1$ \u4e4b\u95f4\u7684\u8282\u70b9\uff08\u5305\u542b\u8fd9\u4e24\u4e2a\uff09\n\n\u5148\u6309 $nodesize - rank + 1$ \u5c06\u6574\u68f5\u6811\u5206\u6210\u5206\u522b\u4ee5 x \uff0c z \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u5176\u4e2d\u4ee5 x \u4e3a\u6839\u7684\u5b50\u6811\u6240\u6709\u8282\u70b9\u6392\u540d\u5c0f\u4e8e $nodesize - rank + 1$ \uff0c\u4ee5 y \u4e3a\u6839\u7684\u5b50\u6811\u6240\u6709\u8282\u70b9\u6392\u540d\u5927\u4e8e\u7b49\u4e8e $nodesize - rank + 1$ \uff0c\u7136\u540e\u518d\u5c06\u4ee5 x \u4e3a\u6839\u7684\u5b50\u6811\u6309 $max(nodesize - rank - 9, 0)$ \u5206\u4e3a\u4ee5 x \uff0c y \u4e3a\u6839\u7684\u5b50\u6811\u3002\u8fd9\u6837\u4ee5 y \u4e3a\u6839\u7684\u5b50\u6811\u5c31\u5305\u542b\u4e86\u6211\u4eec\u9700\u8981\u7684\u8282\u70b9\u3002\n\u5373\uff1a\n\n```splitrnk(root, nodesize - rank + 1, x, z)``` , ```splitrnk(x, max(nodesize - rank - 9, 0), x, y)```\n\n\u904d\u5386\u4ee5 y \u4e3a\u6839\u7684\u5b50\u6811\u8f93\u51fa\u5373\u53ef\u3002\uff08\u524d\u9762\u53d6\u6700\u5927\u503c\u662f\u4e3a\u4e86\u9632\u6b62\u4eba\u6570\u4e0d\u591f 10 \u4e2a\uff0c\u6bd4\u5982\u67e5\u8be2\u4ece\u7b2c 2 \u540d\u5f00\u59cb\u7684 10 \u4e2a\uff09\u3002\n\n### \u4ee3\u7801:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 500005\nlong long ch[maxn][2], size[maxn], rnd[maxn], val[maxn], lastscore[maxn], tot, root;\nmap<string, long long> getname;\nstring name[maxn];\nvoid pushup(long long x)\n{\n\tsize[x] = size[ch[x][0]] + size[ch[x][1]] + 1;\n\treturn;\n}\nlong long newnode(long long v, long long count, string s)\n{\n\tlong long x = ++tot;\n\tname[x] = s;\n\tch[x][0] = 0;\n\tch[x][1] = 0;\n\tval[x] = v * maxn - count;\n\tsize[x] = 1;\n\trnd[x] = rand() % 500000;\n\treturn x;\n}\nlong long merge(long long a, long long b)\n{\n\tif(!a || !b)\n\t{\n\t\treturn  a + b;\n\t}\n\tif(rnd[a] < rnd[b])\n\t{\n\t\tch[a][1] = merge(ch[a][1], b);\n\t\tpushup(a);\n\t\treturn a;\n\t}\n\telse\n\t{\n\t\tch[b][0] = merge(a, ch[b][0]);\n\t\tpushup(b);\n\t\treturn b;\n\t}\n}\nvoid splitrnk(long long rt, long long k, long long &x, long long &y)\n{\n\tif(!rt)\n\t{\n\t\tx = 0;\n\t\ty = 0;\n\t\treturn;\n\t}\n\tif(size[ch[rt][0]] + 1 <= k)\n\t{\n\t\tx = rt;\n\t\tsplitrnk(ch[rt][1], k - size[ch[rt][0]] - 1, ch[rt][1], y);\n\t\tpushup(x);\n\t}\n\telse\n\t{\n\t\ty = rt;\n\t\tsplitrnk(ch[rt][0], k, x, ch[rt][0]);\n\t\tpushup(y);\n\t}\n}\nvoid splitval(long long rt, long long v, long long &x, long long &y)\n{\n\tif(!rt)\n\t{\n\t\tx = 0;\n\t\ty = 0;\n\t\treturn;\n\t}\n\tif(val[rt] <= v)\n\t{\n\t\tx = rt;\n\t\tsplitval(ch[rt][1], v, ch[rt][1], y);\n\t\tpushup(x);\n\t}\n\telse\n\t{\n\t\ty = rt;\n\t\tsplitval(ch[rt][0], v, x, ch[rt][0]);\n\t\tpushup(y);\n\t}\n\treturn;\n}\nvoid del(long long &rt, long long v)\n{\n\tlong long x = 0, y = 0, z = 0;\n\tsplitval(rt, v, x, z);\n\tsplitval(x, v - 1, x, y);\n\trt = merge(x, z);\n\treturn;\n}\nvoid insert(long long &rt, long long score, long long count, string s)\n{\n\tif(getname[s] != 0)\n\t{\n\t\tdel(rt, val[getname[s]]);\n\t}\n\tgetname[s] = newnode(score, count, s);\n\tlong long x = 0, y = 0, z = 0;\n\tsplitval(rt, val[tot], x, y);\n\trt = merge(merge(x, tot), y);\n\treturn;\n}\nlong long rank(long long &rt, long long v)\n{\n\tlong long x = 0, y = 0;\n\tsplitval(rt, v, x, y);\n\tlong long ret = size[y] + 1;\n\trt = merge(x, y);\n\treturn ret;\n}\nvoid dfs(long long x)\n{\n\tif(!x)\n\t{\n\t\treturn;\n\t}\n\tdfs(ch[x][1]);\n\tcout << name[x] << \" \";\n\tdfs(ch[x][0]);\n\treturn;\n}\nvoid index(long long k)\n{\n\tlong long x = 0, y = 0, z = 0, nowtot = size[root];\n\tsplitrnk(root, nowtot - k + 1, x, z);\n\tsplitrnk(x, max(nowtot - k - 9, 0ll), x, y);\n\tdfs(y);\n\tcout << endl;\n\troot = merge(merge(x, y), z);\n\treturn;\n}\nlong long getnum(string s)\n{\n\tlong long ret = 0;\n\tfor(long long i = 0; i < s.size(); i++)\n\t{\n\t\tret = ret * 10 + s[i] - '0';\n\t}\n\treturn ret;\n}\nint main()\n{\n\tios::sync_with_stdio(false);\n\tlong long T, score, time = 0;\n\tchar opt;\n\tstring s;\n\tcin >> T;\n\twhile(T--)\n\t{\n\t\ttime++;\n\t\tcin >> opt;\n\t\tif(opt == '+')\n\t\t{\n\t\t\tcin >> s >> score;\n\t\t\tinsert(root, score, time, s);\n\t\t}\n\t\telse if(opt == '?')\n\t\t{\n\t\t\tcin >> s;\n\t\t\tif(s[0] >= '0' && s[0] <= '9')\n\t\t\t{\n\t\t\t\tindex(getnum(s));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << rank(root, val[getname[s]]) << endl;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1621182044,
        "uid": 90027,
        "name": "GG_jok_er",
        "ccfLevel": 0,
        "title": "P2584 [ZJOI2006]GameZ\u6e38\u620f\u6392\u540d\u7cfb\u7edf \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9898...\u8dd1\u7684\u771f\u6162\n\n~~\u672c\u6765\u524d\u9762\u4e09\u9053\u9898\u79ef\u6512\u4e86\u534a\u79d2\u4f18\u52bf\u8fd9\u9898\u76f4\u63a5\u62d6\u4e861s\u591a~~\n\n\u4e00\u773c\u5c31\u662f\u4e00\u4e2a\u5e73\u8861\u6811\u7684\u95ee\u9898\uff0c\u4f7f\u7528$\\text{FHQ Treap}$\u5b9e\u73b0\n\n- \u67e5\u8be2\u67d0\u4eba\u6392\u540d\n\n\u6211\u4eec\u53ef\u4ee5\u5229\u7528STL\u91cc\u9762\u7684map\u50a8\u5b58\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u5728\u5e73\u8861\u6811\u4e2d\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u7136\u540e\u67e5\u8be2\u6392\u540d\u7684\u65f6\u5019\u5148\u627e\u5230\u90a3\u4e2a\u70b9\u7684\u7f16\u53f7\uff0c\u7136\u540e\u4ece\u4e0b\u5f80\u4e0a\u5230\u6839\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u662f\u4ed6\u7238\u7238\u7684\u53f3\u5b50\u6811\uff0c\u7b54\u6848\u5c31\u52a0\u4e0a$siz[fa[x]]+1$\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u518d\u7ef4\u62a4\u4e00\u4e2a\u7236\u6307\u9488\n\n- \u67e5\u8be2\u4ece\u6392\u540d\u4e3ax\u5f00\u59cb\u7684\u8fde\u7eed10\u4e2a\n\n\u6309\u7167\u6392\u540d\u8fdb\u884c$split$\uff0c\u5206\u522b\u5e94\u8be5\u662f$x+9$\u548c$x-1$\uff0c\u7136\u540e\u904d\u5386\u4e2d\u95f4\u90a3\u4e00\u90e8\u5206\uff0c\u8f93\u51fa\u5373\u53ef\n\n- \u63d2\u5165\n\n\u8fd9\u4e2a\u4e1c\u897f\u6709\u70b9\u6076\u5fc3\uff0c\u6211\u7684\u505a\u6cd5\u975e\u5e38\u9ebb\u70e6\uff0c\u5e94\u8be5\u6709\u66f4\u597d\u7684\u505a\u6cd5\n\n1.\u5f53\u8fd9\u4e2a\u4eba\u4e4b\u524d\u51fa\u73b0\u8fc7\uff0c\u6211\u4eec\u5148\u627e\u5230\u8fd9\u4e2a\u70b9\u7684\u6392\u540d\n\n\u6309\u7167\u6392\u540d\u8fdb\u884c$split$\uff0c\u7136\u540e\u66f4\u6539\u8fd9\u4e2a\u70b9\u7684\u5f97\u5206\n\n\u7136\u540e\u628a\u5de6\u53f3\u90e8\u5206\u5408\u5e76\u8d77\u6765\uff0c\u7136\u540e\u518d\u6309\u6743\u503c\u8fdb\u884c$split$\uff0c\u628a\u8fd9\u4e2a\u70b9\u518d\u5408\u5e76\u56de\u53bb...\n\n2.\u5f53\u8fd9\u4e2a\u4eba\u4e4b\u524d\u6ca1\u51fa\u73b0\u8fc7\uff0c\u66b4\u529b\u66f4\u65b0\n\n\u7136\u540e\u6309\u7167\u6743\u503c$split$\uff0c\u518d\u5408\u5e76\u56de\u53bb\n\n\u5f53\u7136\uff0c\u5982\u679c\u4f60\u8fd9\u4e48\u5199\u662f\u6709\u53ef\u80fd\u6709\u95ee\u9898\u7684\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u4e24\u4e2a\u4eba\u7684\u5f97\u5206\u4e00\u6837\u7684\u65f6\u5019\uff0c\u662f\u6309\u7167\u83b7\u5f97\u5f97\u5206\u7684\u5148\u540e\u987a\u5e8f\u6765\u7684\uff0c\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\u53cc\u5173\u952e\u5b57\uff0c\u4f46\u662f\u8fd9\u540c\u6837\u662f\u6ca1\u6709\u5fc5\u8981\u7684\n\n\u5f53\u6211\u4eec\u518d\u63d2\u5165\u4e00\u4e2a\u6570$k$\u7684\u65f6\u5019\uff0c\u4e4b\u524d\u5728\u5e73\u8861\u6811\u4e2d\u7684\u6240\u6709$\\geq k$\u7684\u6570\u6700\u540e\u90fd\u4f1a\u6bd4\u8fd9\u4e2a\u5927\uff0c\u6240\u4ee5\u6211\u4eec$split$\u7684\u65f6\u5019\u76f4\u63a5\u4ece$rank=k-1$\u5f00\u59cb\u5206\u88c2\u5c31\u53ef\u4ee5\n\n****\n\n\u5f53\u7136\u4f60\u8fd9\u4e48\u5199\u4e4b\u540e\u4f1a\u6536\u83b7\u6837\u4f8b\u90fd\u8fc7\u4e0d\u53bb\u7684\u597d\u6210\u7ee9\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u9898\u76ee\u8981\u6c42\u6211\u4eec\u6c42\u7684\u662f\u524d$k$\u5927\u7684\uff0c\u800c\u4e0d\u662f\u6b63\u5e38\u5e73\u8861\u6811\u64cd\u4f5c\u4e2d\u7684\u524d$k$\u5c0f\u7684\n\n\u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u628a\u6240\u6709\u6743\u503c\u53d6\u53cd\uff0c\u5176\u4ed6\u7684\u6b63\u5e38\u6253\u677f\u5b50\u5c31\u884c\u4e86\uff0c\u4f46\u662f\u6ce8\u610f$split$\u7684\u6761\u4ef6\u9700\u8981\u9002\u5f53\u7684\u4fee\u6539\n\n\u7136\u540e\u8fd8\u6709\u4e00\u4e2a\u6613\u9519\u70b9\u5c31\u662f$\\text{FHQ Treap}$\u7ef4\u62a4\u7236\u6307\u9488\uff0c\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u4fdd\u9669\u66b4\u529b\u4e00\u70b9\u5c31\u53ef\u4ee5\u4e86\uff0c\u8be6\u89c1\u4ee3\u7801\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n\ntypedef long long ll;\n\nconst int N=1e6+5;\n\ntemplate<typename T> void read(T &x){\n   x=0;int f=1;\n   char c=getchar();\n   for(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n   for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n    x*=f;\n}\n\nint n;\nint fa[N],son[N][2],siz[N],val[N],treap[N];\nint tot,rt;\nstring s,name[N];\nmap<string,int> var;\n\nint todigit(string s){\n    int res=0;\n    for(int i=0;i<s.size();i++)\n        res=res*10+s[i]-'0';\n    return res;\n}\n\nvoid update(int x){\n    if(son[x][0])fa[son[x][0]]=x;\n    if(son[x][1])fa[son[x][1]]=x;\n    siz[x]=siz[son[x][0]]+siz[son[x][1]]+1;\n}\n\nint merge(int u,int v){\n    if(!u||!v)return u|v;\n    int rt;\n    if(treap[u]<treap[v])son[rt=u][1]=merge(son[u][1],v);\n    else son[rt=v][0]=merge(u,son[v][0]);\n    return update(rt),rt;\n}\n\nvoid split_by_rnk(int o,int &u,int &v,int k){\n    if(!o){u=v=0;return;}\n    fa[o]=0;\n    int rank=siz[son[o][0]]+1; \n    if(rank<=k)split_by_rnk(son[u=o][1],son[o][1],v,k-rank);\n    else split_by_rnk(son[v=o][0],u,son[o][0],k);\n    update(o);\n}\n\nvoid split_by_val(int o,int &u,int &v,int k){\n    if(!o){u=v=0;return;}\n    fa[o]=0;\n    if(val[o]<=k)split_by_val(son[u=o][1],son[o][1],v,k);\n    else split_by_val(son[v=o][0],u,son[o][0],k);\n    update(o);\n}\n\nint rnk(int x){\n    int res=siz[son[x][0]]+1;\n    while(fa[x]){\n        if(son[fa[x]][1]==x)res+=siz[son[fa[x]][0]]+1;\n        x=fa[x];\n    }\n    return res;\n}\n\nvoid dfs(int x){\n    if(son[x][0])dfs(son[x][0]);\n    cout<<name[x]<<\" \";\n    if(son[x][1])dfs(son[x][1]);\n}\n\nint main()\n{\n    srand(19260817);\n    read(n);\n    Rep(i,1,n){\n        char c=getchar();\n        while(c!='+'&&c!='?')c=getchar();\n        int k,lft,mid,rht;   \n        cin>>s;\n        if(c=='+'){\n            read(k);\n            if(var[s]){\n                int rank=rnk(var[s]);\n                split_by_rnk(rt,lft,rht,rank);\n                split_by_rnk(lft,lft,mid,rank-1);\n                val[mid]=-k;\n                rt=merge(lft,rht);\n                split_by_val(rt,lft,rht,-k);\n                rt=merge(merge(lft,mid),rht);\n            }\n            else{\n                var[s]=++tot;\n                treap[tot]=rand();\n                siz[tot]=1;\n                name[tot]=s,val[tot]=-k;\n                split_by_val(rt,lft,rht,-k);\n                rt=merge(merge(lft,tot),rht);\n            }\n        }\n        if(c=='?'){\n            if(isdigit(s[0])){\n                k=todigit(s);\n                split_by_rnk(rt,lft,rht,k+9);\n                split_by_rnk(lft,lft,mid,k-1);\n                dfs(mid);\n                rt=merge(merge(lft,mid),rht);\n                puts(\"\");\n            }\n            else{\n                k=var[s];\n                int rank=rnk(k);\n                printf(\"%d\\n\",rank);\n            }\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1590498380,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2584 \u3010[ZJOI2006]GameZ\u6e38\u620f\u6392\u540d\u7cfb\u7edf\u3011"
    },
    {
        "content": "# P2584 [ZJOI2006]GameZ\u6e38\u620f\u6392\u540d\u7cfb\u7edf\n[\u539f\u4f53\u5730\u5740](https://www.luogu.com.cn/problem/P2584)\n\n[Github\u9898\u89e3](https://github.com/jerrykcode/luogu)\n\n## \u601d\u8def\n\u4f7f\u7528\u7ed3\u6784\u4f53\n```cpp\nstruct Record {\n\tstring name;\n\tint score;\n\tint count;\n\tRecord() {}\n\tRecord(string name, int score, int count) : name(name), score(score), count(count) {}\n\tbool operator< (const Record& rec) {\n\t\treturn score != rec.score ? score < rec.score : count > rec.count;\n\t}\n\tbool operator> (const Record& rec) {\n\t\treturn score != rec.score ? score > rec.score : count < rec.count;\n\t}\n\tbool operator== (const Record& rec) {\n\t\treturn score == rec.score && count == rec.count;\n\t}\n};\n\n```\n\u5b58\u50a8\u6bcf\u4e00\u6761\u8bb0\u5f55\uff0c\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0cscore\u4e0d\u540c\u65f6\uff0cscore\u5927\u7684\u8bb0\u5f55\u66f4\u5927\uff0cscore\u76f8\u540c\u65f6\uff0ccount\u5373\u63d0\u4ea4\u6b21\u5e8f\u5c0f\u7684\uff0c\u5148\u63d0\u4ea4\u7684\u66f4\u5927\u3002\n\n\u4f7f\u7528\u4e00\u4e2amap\u5b58\u50a8\u540d\u5b57\u4e0e\u8bb0\u5f55\u7684\u5bf9\u5e94\u3002\n\u518d\u7528\u4e00\u4e2aSBT\u5e73\u8861\u6811\u5b58\u50a8\u6240\u6709\u8bb0\u5f55\u3002\n\n\u5bf9\u4e8e+Name Score\u64cd\u4f5c\uff0c\u901a\u8fc7map\u67e5\u8be2Name\uff0c\u82e5\u6709\u5bf9\u5e94\u7684\u8bb0\u5f55\uff0c\u5373\u4ee5\u524d\u8be5\u7528\u6237\u63d0\u4ea4\u8fc7\uff0c\u5219\u4eceSBT\u4e2d\u5220\u9664\u8be5\u8bb0\u5f55\uff0c\u7136\u540emap\u66f4\u65b0\u8bb0\u5f55\uff0c\u518d\u5728SBT\u4e2d\u63d2\u5165\u65b0\u7684\u8bb0\u5f55\u3002\n\n\u5bf9\u4e8e\uff1fName\u64cd\u4f5c\uff0c\u901a\u8fc7map\u67e5\u8be2Name\u5bf9\u5e94\u7684\u8bb0\u5f55\uff0c\u7531\u4e8eSBT\u6811\u5b58\u50a8\u4e86\u6bcf\u4e2a\u7ed3\u70b9\u7684size(\u6240\u6709\u540e\u4ee3\u7ed3\u70b9\u5305\u62ec\u81ea\u5df1\u7684\u4e2a\u6570)\uff0c\u90a3\u4e48\u5728SBT\u4e2d\u641c\u7d22\u4e00\u6761\u8bb0\u5f55\u65f6\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u5927\u4e8e\u8be5\u8bb0\u5f55\u7684\u8bb0\u5f55\u6570\u91cf\uff08\u5411\u5de6\u5b50\u6811\u9012\u5f52\u65f6\uff0c\u53f3\u5b50\u6811\u7684\u6240\u6709\u8bb0\u5f55\u53ca\u6839\u7ed3\u70b9\u7684\u8bb0\u5f55\u5747\u5927\u4e8e\u641c\u7d22\u7684\u8bb0\u5f55\uff1b\u641c\u7d22\u5230\u8be5\u8bb0\u5f55\u65f6\uff0c\u6240\u5728\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u7684\u6240\u6709\u8bb0\u5f55\u4e5f\u5927\u4e8e\u5b83\uff09\uff0c\u8be5\u6570\u91cf+1\u5c31\u662f\u6392\u540d\u3002\n\n\u5bf9\u4e8e\uff1fIndex\u64cd\u4f5c\uff0c\u5faa\u73afIndex\u9012\u589e10\u6b21\uff08\u82e5Index\u5927\u4e8e\u603b\u6570\u5c31\u63d0\u524dbreak\uff09\uff0c\u67e5\u627e\u6392\u540dIndex\u7684\u8bb0\u5f55\u3002\u663e\u7136\u5728SBT\u4e2d\u6709Index - 1\u6761\u8bb0\u5f55\u5927\u4e8e\u5b83\uff0c\u5728SBT\u4e2d\u5199\u4e00\u4e2a\u51fd\u6570`rank(Tree t, int idx)`\uff0c\u7528\u4e8e\u67e5\u627e\u5728SBT\u4e2d\u6709idx\u6761\u8bb0\u5f55\u6bd4\u5b83\u5927\u7684\u8bb0\u5f55\u3002\uff08\u90a3\u4e48\u8c03\u7528\u65f6\u4f20\u9012\u7ed9idx\u7684\u5c31\u662fIndex - 1\u4e86\uff09\u3002rank\u51fd\u6570\u4e2d\uff0c\u4eceSBT\u6839\u7ed3\u70b9\u5f00\u59cb\uff0c\u82e5\u53f3\u5b50\u6811\u7684size\u6b63\u597d\u7b49\u4e8eidx\uff0c\u90a3\u4e48\u6b63\u597d\u6709idx\u4e2a\u8bb0\u5f55\u5927\u4e8e\u6839\u7ed3\u70b9\uff0c\u6240\u4ee5\u8fd4\u56de\u6839\u7ed3\u70b9\u7684\u8bb0\u5f55\u5c31\u53ef\u4ee5\u5566\uff1b\u82e5\u53f3\u5b50\u6811\u7684size\u5c0f\u4e8eidx\uff0c\u90a3\u4e48\u5149\u53f3\u5b50\u6811\u7684\u8bb0\u5f55\u8fd8\u4e0d\u591f\uff0c\u5de6\u5b50\u6811\u4e2d\u8fd8\u8981\u6709`idx - \u53f3\u5b50\u6811\u7684size - 1`\u4e2a\u8bb0\u5f55\u5927\u4e8e\u67e5\u627e\u7684\u8bb0\u5f55\uff0c\u9012\u5f52\u67e5\u627e\u5de6\u5b50\u6811\uff1b\u82e5\u53f3\u5b50\u6811\u7684size\u5927\u4e8eidx\uff0c\u5219\u67e5\u627e\u7684\u8bb0\u5f55\u5728\u53f3\u5b50\u6811\u4e2d\uff0c\u9012\u5f52\u67e5\u627e\u53f3\u5b50\u6811\u3002\n\n\uff08\u82e5\u7ed3\u70b9\u4e3aNULL\uff0c\u5176size\u5e94\u8be5\u4e3a0\uff0c\u5728\u4ee3\u7801\u4f7f\u7528getSize\u51fd\u6570\u5224\u65ad\uff09\n\n\u4ee3\u7801\u4e2d\u5b9e\u73b0\u4e86\u4e00\u4e2aSBT\u6a21\u677f\u7c7b\uff0c\u5176\u5b9e\u5bf9\u4e8e\u4efb\u610f\u7c7b\u578bT\uff0c\u53ea\u8981\u63d0\u4f9b\u4e86<, >, ==\u8fd0\u7b97\uff0cSBT<T>\u5c31\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u53ef\u4ee5\u5b58\u50a8\uff0c\u5220\u9664T\u7c7b\u578b\u7684\u5143\u7d20\uff0c\u4e5f\u53ef\u4ee5\u67e5\u627e\u4e00\u4e2aT\u7c7b\u578b\u5143\u7d20\u7684\u6392\u540d\uff0c\u4ee5\u53ca\u67e5\u627e\u6392\u540d\u4e3aidx\u7684\u5143\u7d20\u3002\u7531\u4e8e\u672c\u9898\u9898\u610f\uff0cSBT<T>\u5728\u5220\u9664\u5143\u7d20\uff0c\u67e5\u627e\u5143\u7d20\u6392\u540d\u65f6\uff0c\u6ca1\u6709\u8003\u8651\u5143\u7d20\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\uff1b\u67e5\u8be2\u6392\u540d\u4e3aidx\u7684\u5143\u7d20\u65f6\uff0c\u4e5f\u6ca1\u6709\u8003\u8651idx\u8d85\u8fc7\u6240\u6709\u5143\u7d20\u6570\u91cf\u7684\u60c5\u51b5\u3002\n\nSBT<Record>\u5373\u53ef\u7528\u4e8e\u5bf9\u8bb0\u5f55\u8fdb\u884c\u64cd\u4f5c\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <map>\n#include <string>\n#include <iostream>\nusing namespace std;\n\nstruct Record {\n\tstring name;\n\tint score;\n\tint count;\n\tRecord() {}\n\tRecord(string name, int score, int count) : name(name), score(score), count(count) {}\n\tbool operator< (const Record& rec) {\n\t\treturn score != rec.score ? score < rec.score : count > rec.count;\n\t}\n\tbool operator> (const Record& rec) {\n\t\treturn score != rec.score ? score > rec.score : count < rec.count;\n\t}\n\tbool operator== (const Record& rec) {\n\t\treturn score == rec.score && count == rec.count;\n\t}\n};\n\ntemplate<typename T>\nclass SBT {\npublic:\n\tSBT() : t(NULL) {}\n\t~SBT() { deleteTree(t); }\n\tvoid insert(T key);\n\tvoid remove(T key);\n\tint rank(T key);\n\tT rank(int idx);\n\tint size();\nprivate:\n\ttypedef struct TNode {\n\t\tT key;\n\t\tint size;\n\t\tstruct TNode *left;\n\t\tstruct TNode *right;\n\t\tTNode(T key) : key(key), size(1), left(NULL), right(NULL) {}\n\t} *Tree;\n\n\tint getSize(Tree t) { return t ? t->size : 0; }\n\t\n\tTree leftRotate(Tree t);\n\tTree rightRotate(Tree t);\n\tTree maintain(Tree t);\n\tTree maintainLeft(Tree t);\n\tTree maintainRight(Tree t);\n\tTree insert(Tree t, T key);\n\tTree remove(Tree t, T key);\n\tint rank(Tree t, T key);\n\tT rank(Tree t, int idx);\n\tvoid deleteTree(Tree t);\nprivate:\n\tTree t;\n};\n\nint main() {\n\tmap<string, Record> name_to_rec;\n\tSBT<Record> recs;\n\tint n;\n\tscanf(\"%d\", &n);\n\tchar cmd;\n\tstring name;\n\tint score, index;\n\tfor (int i = 0; i < n; i++) {\n\t\tscanf(\" %c\", &cmd);\n\t\tif (cmd == '+') {\n\t\t\tcin >> name;\n\t\t\tscanf(\"%d\", &score);\n\t\t\tif (name_to_rec.count(name)) {\n\t\t\t\trecs.remove(name_to_rec[name]);\n\t\t\t}\n\t\t\tRecord rec(name, score, i);\n\t\t\tname_to_rec[name] = rec;\n\t\t\trecs.insert(rec);\n\t\t}\n\t\telse {\n\t\t\tcin >> name;\n\t\t\tif (name[0] >= 'A' && name[0] <= 'Z') {\n\t\t\t\tprintf(\"%d\\n\", recs.rank(name_to_rec[name]));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tindex = stoi(name);\n\t\t\t\tfor (int j = 0; j < 10; j++) {\n\t\t\t\t\tif (index + j > recs.size()) break;\n\t\t\t\t\tif (j) putchar(' ');\n\t\t\t\t\tcout << recs.rank(index + j).name;\n\t\t\t\t}\n\t\t\t\tprintf(\"\\n\");\n\t\t\t}\n\t\t}\n\t}\t\n\tmap<string, Record>().swap(name_to_rec);\n\treturn 0;\n}\n\ntemplate<typename T>\nvoid SBT<T>::insert(T key) {\n\tt = insert(t, key);\n}\n\ntemplate<typename T>\nvoid SBT<T>::remove(T key) {\n\tt = remove(t, key);\n}\n\ntemplate<typename T>\nint SBT<T>::rank(T key) {\n\treturn rank(t, key) + 1;\n}\n\ntemplate<typename T>\nT SBT<T>::rank(int idx) {\n\treturn rank(t, idx - 1);\n}\n\ntemplate<typename T>\nint SBT<T>::size() {\n\treturn t->size;\n}\n\ntemplate<typename T>\ntypename SBT<T>::Tree SBT<T>::leftRotate(SBT<T>::Tree t) {\n\tTree k = t->right;\n\tt->right = k->left;\n\tk->left = t;\n\tk->size = t->size;\n\tt->size = getSize(t->left) + getSize(t->right) + 1;\n\treturn k;\n}\n\ntemplate<typename T>\ntypename SBT<T>::Tree SBT<T>::rightRotate(SBT<T>::Tree t) {\n\tTree k = t->left;\n\tt->left = k->right;\n\tk->right = t;\n\tk->size = t->size;\n\tt->size = getSize(t->left) + getSize(t->right) + 1;\n\treturn k;\n}\n\ntemplate<typename T>\ntypename SBT<T>::Tree SBT<T>::maintain(SBT<T>::Tree t) {\n\tt = maintainLeft(t);\n\treturn maintainRight(t);\n}\n\ntemplate<typename T>\ntypename SBT<T>::Tree SBT<T>::maintainLeft(SBT<T>::Tree t) {\n\tif (t == NULL || t->left == NULL) return t;\n\tif (t->left->left && t->left->left->size > getSize(t->right)) {\n\t\tt = rightRotate(t);\n\t\tt->right = maintain(t->right);\n\t\tt = maintain(t);\n\t}\n\telse if (t->left->right && t->left->right->size > getSize(t->right)) {\n\t\tt->left = leftRotate(t->left);\n\t\tt = rightRotate(t);\n\t\tt->left = maintain(t->left);\n\t\tt->right = maintain(t->right);\n\t\tt = maintain(t);\n\t}\n\treturn t;\n}\n\ntemplate<typename T>\ntypename SBT<T>::Tree SBT<T>::maintainRight(SBT<T>::Tree t) {\n\tif (t == NULL || t->right == NULL) return t;\n\tif (t->right->right && t->right->right->size > getSize(t->left)) {\n\t\tt = leftRotate(t);\n\t\tt->left = maintain(t->left);\n\t\tt = maintain(t);\n\t}\n\telse if (t->right->left && t->right->left->size > getSize(t->left)) {\n\t\tt->right = rightRotate(t->right);\n\t\tt = leftRotate(t);\n\t\tt->left = maintain(t->left);\n\t\tt->right = maintain(t->right);\n\t\tt = maintain(t);\n\t}\n\treturn t;\n}\n\ntemplate<typename T>\ntypename SBT<T>::Tree SBT<T>::insert(SBT<T>::Tree t, T key) {\n\tif (t == NULL) {\n\t\treturn new TNode(key);\n\t}\n\tt->size++;\n\tif (key < t->key) {\n\t\tt->left = insert(t->left, key);\n\t\tt = maintainLeft(t);\n\t}\n\telse {\n\t\tt->right = insert(t->right, key);\n\t\tt = maintainRight(t);\n\t}\n\treturn t;\n}\n\n\ntemplate<typename T>\ntypename SBT<T>::Tree SBT<T>::remove(SBT<T>::Tree t, T key) {\n\tt->size--;\n\tif (key < t->key) {\n\t\tt->left = remove(t->left, key);\n\t\tt = maintainRight(t);\n\t}\n\telse if (key > t->key) {\n\t\tt->right = remove(t->right, key);\n\t\tt = maintainLeft(t);\n\t}\n\telse {\n\t\tif (t->left && t->right) {\n\t\t\tTree left_max = t->left;\n\t\t\twhile (left_max->right) left_max = left_max->right;\n\t\t\tt->key = left_max->key;\n\t\t\tt->left = remove(t->left, left_max->key);\n\t\t\tt = maintainRight(t);\n\t\t}\n\t\telse {\n\t\t\tTree tmp = t;\n\t\t\tt = t->left ? t->left : t->right;\n\t\t\tdelete tmp;\n\t\t}\n\t}\n\treturn t;\n}\n\ntemplate<typename T>\nint SBT<T>::rank(SBT<T>::Tree t, T key) {\n\tif (key < t->key) {\n\t\treturn rank(t->left, key) + getSize(t->right) + 1;\n\t}\n\telse if (key > t->key) {\n\t\treturn rank(t->right, key);\n\t}\n\telse {\n\t\treturn getSize(t->right);\n\t}\n}\n\ntemplate<typename T>\nT SBT<T>::rank(SBT<T>::Tree t, int idx) {\n\tint right_size = getSize(t->right);\n\tif (idx > right_size) {\n\t\treturn rank(t->left, idx - right_size - 1);\n\t}\n\telse if (idx < right_size) {\n\t\treturn rank(t->right, idx);\n\t}\n\telse {\n\t\treturn t->key;\n\t}\n}\n\ntemplate<typename T>\nvoid SBT<T>::deleteTree(SBT<T>::Tree t) {\n\tif (t == NULL) return;\n\tdeleteTree(t->left);\n\tdeleteTree(t->right);\n\tdelete t;\n}\n\n```",
        "postTime": 1576252968,
        "uid": 194439,
        "name": "rediserver",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2584 \u3010[ZJOI2006]GameZ\u6e38\u620f\u6392\u540d\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u7528\u597d\u5e73\u677f\u7535\u89c6\uff08pb\\_ds\uff09\u5e93\u80fd\u7701\u4e0b\u4e0d\u5c11\u4ee3\u7801\u91cf\n\n\u5c31\u662f\u5f00\u4e24\u4e2a\u5e73\u8861\u6811\uff0c\u4e00\u4e2a\u662f\u5f97\u5206->\u540d\u5b57\uff0c\u4e00\u4e2a\u662f\u540d\u5b57\u7684\u54c8\u5e0c\u503c->\u5f97\u5206\n\n\u5f97\u5206\u8981\u5f00\u53cc\u5173\u952e\u5b57\uff0c\u5b58\u6210\u7ee9\u548c\u63d2\u5165\u65f6\u95f4\n\n```cpp\n#include<cstdio>\n#include<string>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\nusing namespace std;\nstruct data{\n    int score,cnt;\n    bool operator<(const data&t)const{return score==t.score?cnt<t.cnt:score>t.score;}\n};\ntree<data,string,less<data>,rb_tree_tag,tree_order_statistics_node_update> T; //\u5f97\u5206->\u540d\u5b57\ntree<int,data,less<int>,rb_tree_tag> M;//\u540d\u5b57\u7684\u54c8\u5e0c\u503c->\u5f97\u5206\nstring getstr(){char c[1001]; scanf(\"%s\",c); return c;}//\u8bfb\u5165\u5b57\u7b26\u4e32\nint f(string s){//\u54c8\u5e0c\n    unsigned int ans=0;\n    for(int i=0;i<s.size();++i) ans=ans*131+s[i];\n    return ans%(1LL<<31);\n}\nint main(){\n    int n; scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i){\n        char c=getchar(); for(;c!='+'&&c!='?';c=getchar());\n        if(c=='+'){\n            string s=getstr(); int x; scanf(\"%d\",&x); data t={x,i};\n            tree<int,data,less<int>,rb_tree_tag>::iterator it=M.find(f(s));\n            if(it!=M.end()){//\u5982\u679c\u5b58\u5728\u5c31\u66ff\u6362\n                T.erase(it->second); M.erase(it);\n            }\n            T.insert(make_pair(t,s)); M.insert(make_pair(f(s),t));\n        }else if(c=='?'){\n            string s=getstr(); if(isalpha(s[0]))\n                printf(\"%d\\n\",T.order_of_key(M.find(f(s))->second)+1);//\u8be2\u95ee\u6392\u540d\n            else{\n                int t=0; for(int j=0;j<s.size();++j) t=t*10+s[j]-'0';\n                for(int j=t;j<=t+9;++j){//\u8be2\u95ee\u7b2ct-t+9\u540d\u7684\u4eba\u7684\u540d\u5b57\n                    if(j>T.size()) break;\n                    printf(\"%s \",T.find_by_order(j-1)->second.data());\n                }\n                printf(\"\\n\");\n            }\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1497062614,
        "uid": 27986,
        "name": "jxcakak",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2584 \u3010[ZJOI2006]GameZ\u6e38\u620f\u6392\u540d\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u8fd9\u9053\u662f\u4e00\u9053 [\u53cc\u500d\u7ecf\u9a8c]( https://www.luogu.com.cn/problem/P4291 )\n\n-----\n\n\u672c\u9898\u662f\u4e00\u9053\u5e73\u8861\u6811\u7684\u6a21\u677f\u9898\uff0c\u5bf9\u4e8e\u60f3\u7ec3\u4e60\u5e73\u8861\u6811\u57fa\u672c\u77e5\u8bc6\u7684\u540c\u5b66\u4eec\u5f88\u6709\u5e2e\u52a9\u3002\n\n~~\u4f46\u662f\u6211\u5c31\u662f\u7528 pb_ds \u6c34\u4e86\u8fc7\u53bb\u3002~~\n\n-----\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u540d\u5b57\uff0c\u4f7f\u7528 map \u5b58\u50a8\u540d\u5b57\u7684\u7f16\u53f7\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u7f16\u53f7\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u8fd9\u4e2a\u7f16\u53f7\u7684\u503c\u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21\u66f4\u65b0\uff0c\u76f4\u63a5\u628a\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\u5220\u6389\uff0c\u518d\u52a0\u5165\u8fd9\u4e2a\u8282\u70b9\u3002\uff08\u6ce8\u610f\u66f4\u65b0\u4e2a\u5e73\u8861\u6811\u6570\uff09\n\n\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u5229\u7528 `` find_by_order(x) `` \u548c `` T.order_of_key(x) `` \u6765\u5904\u7406\u95ee\u9898\u3002\n\n\u5c31\u8fd9\u6837\uff0c\u4e00\u9053\u5e73\u8861\u6811\u7684\u7d2b\u9898\u5c31\u88ab\u6211\u4eec\u5728 80 \u884c\u4e4b\u5185\u7ed9\u6c34\u6389\u4e86\uff01\n\n-----\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/tree_policy.hpp> \nusing namespace std;\nint cnt=0;\nmap<string,int> mp;\nint val[250010];\nstruct Node{\n\tint v,id;\n\tbool operator<(const Node &rhs) const{\n\t\tif(v!=rhs.v)\n\t\t{\n\t\t\treturn v>rhs.v;\n\t\t}\n\t\treturn id<rhs.id;\n\t}\n};\n__gnu_pbds::tree<Node,__gnu_pbds::null_type,less<Node>,\n\t\t\t\t  __gnu_pbds::rb_tree_tag,\n\t\t\t\t  __gnu_pbds::tree_order_statistics_node_update>\nT;\nstring Name[250010]; \nint main()\n{\n\tint Case;\n\tscanf(\"%d\",&Case);\n\tint tot=0;\n\twhile(Case--)\n\t{\n\t\tchar opt;\n\t\tstring nm;\n\t\tcin>>opt>>nm;\n\t\tif(opt=='+')\n\t\t{\n\t\t\tif(mp[nm])\n\t\t\t{\n\t\t\t\tint pos=mp[nm];\n\t\t\t\tNode tmp;\n\t\t\t\tT.erase((Node){val[pos],pos});\n\t\t\t\ttot--;\n\t\t\t}\n\t\t\tmp[nm]=++cnt;\n\t\t\tscanf(\"%d\",&val[cnt]);\n\t\t\tNode tmp;\n\t\t\ttmp.v=val[cnt];\n\t\t\ttmp.id=cnt;\n\t\t\tT.insert(tmp);\n\t\t\tName[cnt]=nm;\n\t\t\ttot++;\n\t\t}else{\n\t\t\tif(isdigit(nm[0]))\n\t\t\t{\n\t\t\t\tint x=0;\n\t\t\t\tfor(int i=0;i<nm.size();i++)\n\t\t\t\t{\n\t\t\t\t\tx=x*10+nm[i]-'0';\n\t\t\t\t}\n\t\t\t\tint N=min(tot,x+9);\n\t\t\t\tfor(int i=x-1;i<=N-1;i++)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%s \",Name[T.find_by_order(i)->id].c_str());\n\t\t\t\t}\n\t\t\t\tputchar('\\n');\n\t\t\t}else{\n\t\t\t\tint id=mp[nm];\n\t\t\t\tprintf(\"%d\\n\",T.order_of_key((Node){val[id],id})+1);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u56e0\u4e3a pb_ds \u5e38\u6570\u5de8\u5927\uff0c\u6240\u4ee5\u4e0d\u5f00 O2 \u53ea\u6709 90 \u5206\uff0c\u6700\u540e\u4e00\u4e2a\u70b9 TLE 1.07 \u79d2\u3002\n\n\u5f53\u7136\uff0c\u4f60\u52a0\u4e0a\u5feb\u8bfb\u548c\u5feb\u8f93\u4e5f\u662f\u53ef\u4ee5\u7684\u2014\u2014\u53ea\u662f\u6211\u61d2\u5f97\u6539\n\n----\n\n\u53e6\u9644\uff1a\u6839\u636e CCF \u7684\u6700\u65b0\u89c4\u5219\uff0cpb_ds \u5df2\u7ecf\u80fd\u5728\u6b63\u89c4\u6bd4\u8d5b\u4e2d\u4f7f\u7528\u5566\uff01\u597d\u65f6\u4ee3\uff0c\u6765\u4e34\u529b\uff01\uff01\uff01\n\n[pb_ds \u7b80\u4ecb](https://oi-wiki.org/lang/pb-ds/)",
        "postTime": 1636973042,
        "uid": 358739,
        "name": "BFSDFS123",
        "ccfLevel": 0,
        "title": "P2584 [ZJOI2006]GameZ\u6e38\u620f\u6392\u540d\u7cfb\u7edf \u9898\u89e3"
    },
    {
        "content": "\u5199\u7684\u7ed3\u6784\u4f53 $Spaly$\uff0c\u7ef4\u62a4\u5f97\u5206\uff0c\u5de6\u5b50\u6811\u7684\u5206\u6570\u6bd4\u7236\u4eb2\u7684\u5f97\u5206\u9ad8\uff0c\u8fd9\u6837\u65b9\u4fbf\u67e5 $Kth$\u3002\n\n\u7528 $map$ \u6620\u5c04\u54ea\u4e2a\u540d\u5b57\u5bf9\u5e94\u5728\u54ea\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u5206\u6570\u90fd\u653e\u5927 $10^n$ \u500d\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2a\u968f\u7740\u64cd\u4f5c\u51cf\u5c0f\u7684\u65f6\u95f4\u6233\uff0c\u5c31\u4fdd\u8bc1\u4e86\u76f8\u540c\u7684\u5206\u6570\u5148\u5b58\u5728\u7684\u6392\u540d\u9760\u524d\u4e86\u3002\n\n\u5bf9\u4e8e $?index$ \u7684\u8be2\u95ee\uff0c$p = Kth(index), s = Kth(min(nidex + 11, tree.size))$\n\n\u628a $p$ \u8f6c\u5230\u6839\uff0c$s$ \u8f6c\u5230 $p$ \u7684\u53f3\u5b69\u5b50\uff0c\u7136\u540e\u904d\u5386 $s$ \u7684\u5de6\u5b69\u5b50\u5c31\u884c\u4e86\u3002\n\n\n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\nconstexpr auto Inf = 0x3F3F3F3F;\ntypedef long long LL;\nusing namespace std;\n\nnamespace IO {\n    inline LL read() {\n        LL o = 0, f = 1; char c = getchar();\n        while (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); }\n        while (c > '/' && c < ':') { o = o * 10 + c - '0'; c = getchar(); }\n        return o * f;\n    }\n    inline char recd() {\n        char o; while ((o = getchar()) != 'C' && o != 'Q' && o != 'D'); return o;\n    }\n}\nusing namespace IO;\n\nconst int SIZE = 2E5 + 7;\n\nmap<string, int> Map;\n\nstruct Node {\n    int son[2], Fa, sze; LL w; string str;\n} Node[SIZE << 2]; int Root, Ind;\n\ninline int which(int now) {\n    return now == Node[Node[now].Fa].son[1];\n}\n\ninline void pushup(int now) {\n    Node[now].sze = Node[Node[now].son[1]].sze + Node[Node[now].son[0]].sze + 1;\n}\n\nvoid Rot(int now) {\n    int F = Node[now].Fa, FF = Node[F].Fa, w = which(now);\n    Node[Node[now].son[!w]].Fa = F, Node[F].son[w] = Node[now].son[!w];\n    Node[now].Fa = FF, Node[FF].son[which(F)] = now;\n    Node[F].Fa = now, Node[now].son[!w] = F, pushup(F), pushup(now);\n}\n\nvoid Splay(int now, int pos) {\n    for (int F = Node[now].Fa; F != pos; Rot(now), F = Node[now].Fa)\n        if (Node[F].Fa != pos)\n            which(F) ^ which(now) ? Rot(now) : Rot(F);\n    if (!pos) Root = now;\n}\n\nint Ins(int& now, int F, LL w) {\n    if (!now) {\n        now = ++Ind, Node[now].Fa = F, Node[now].sze = 1, Node[now].w = w; return now;\n    }\n    int pos = Ins(Node[now].son[Node[now].w > w], now, w); pushup(now);\n    return pos;\n}\n\nint Fnd(LL w) {\n    int now = Root;\n    while (Node[now].son[Node[now].w > w] && Node[now].w != w) \n        now = Node[now].son[Node[now].w > w];\n    return now;\n}\n\n//   \u524d\u9a71\nint Per(LL w) {\n    int pos = Fnd(w); Splay(pos, 0);\n    if (Node[Root].w > w) return Root;\n    int now = Node[Root].son[0];\n    while (Node[now].son[1]) now = Node[now].son[1];\n    return now;\n}\n\n//   \u540e\u7ee7\nint Suf(LL w) {\n    int pos = Fnd(w); Splay(pos, 0);\n    if (Node[Root].w < w) return Root;\n    int now = Node[Root].son[1];\n    while (Node[now].son[0]) now = Node[now].son[0];\n    return now;\n}\n\n//   \u5220\u9664\nvoid Rem(string str) {\n    if (!Map[str]) return;\n    int per = Per(Node[Map[str]].w), suf = Suf(Node[Map[str]].w);\n    Splay(per, 0), Splay(suf, per);\n    Node[Node[Root].son[1]].son[0] = 0;\n    pushup(Node[Root].son[1]), pushup(Root);\n}\n\n//   \u63d2\u5165\nvoid Ins(string str, LL w) {\n    Rem(str); \n    int pos = Ins(Root, 0, w); \n    Map[str] = pos, Node[pos].str = str, Splay(pos, 0);\n}\n\nint Rnk(string str) {\n    Splay(Map[str], 0); return Node[Node[Root].son[0]].sze;\n}\n\nint Kth(int now, int K) {\n    if (K == Node[Node[now].son[0]].sze + 1) return now;\n    if (K <= Node[Node[now].son[0]].sze) return Kth(Node[now].son[0], K);\n    return Kth(Node[now].son[1], K - Node[Node[now].son[0]].sze - 1);\n}\n\n//   \u8f93\u51fa\u540d\u5b57\nvoid Prtview(int now) {\n    if (!now) return;\n    Prtview(Node[now].son[0]);\n    cout << Node[now].str << ' ';\n    Prtview(Node[now].son[1]);\n}\nvoid Prt(int K) {\n    int per = Kth(Root, K), suf = Kth(Root, min(K + 11, Node[Root].sze));\n    Splay(per, 0), Splay(suf, per);\n    Prtview(Node[Node[Root].son[1]].son[0]); puts(\"\");\n}\n\n//   \u8c03\u8bd5\u7528\nvoid DEBUG(int now, int space) {\n    if (!now) { \n        for (int pos = 1; pos <= space; pos++) cout << \"     \";\n        puts(\"NULL\"); return;\n    }\n    DEBUG(Node[now].son[0], space + 1);\n    for (int pos = 1; pos <= space; pos++) cout << \"     \";\n    cout << Node[now].str << \" w = \" << double(Node[now].w) << ' ' << endl;\n    DEBUG(Node[now].son[1], space + 1);\n}\n\nint main() {\n    int N; char o; string Tmp; LL w; cin >> N;\n    Ins(\"Inf\", LLONG_MAX), Ins(\"-Inf\", LLONG_MIN);\n    \n    for(int pos = N, K, I; pos >= 1; pos--) {\n    \n    // pos \u4e3a\u4e00\u4e2a\u4ece\u5927\u5230\u5c0f\u7684\u65f6\u95f4\u6233\n        cin >> o >> Tmp;\n        if (o == '+') \n            cin >> w, Ins(Tmp, w * 1000000 + pos);\n        else if (isupper(Tmp[0]))\n            cout << Rnk(Tmp) << endl;\n        else {\n            for (I = K = 0; Tmp[I]; I++) K = K * 10 + Tmp[I] - '0'; \n            Prt(K);\n        }\n        /*puts(\"\"); DEBUG(Root, 0); puts(\"\");*/\n    }\n}\n\n```",
        "postTime": 1550249800,
        "uid": 110572,
        "name": "\u7720\u3164\u3164\u3164",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2584 \u3010[ZJOI2006]GameZ\u6e38\u620f\u6392\u540d\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u9996\u5148\u8fd9\u9898\u53cc\u500d\u7ecf\u9a8c\uff0c\u60f3\u77e5\u9053\u54ea\u9898\u53bb\u6211[\u535a\u5ba2](https://www.cnblogs.com/Qihoo360/p/10374578.html)\n\n\u4e00\u773c\u770b\u53bb\u5e73\u8861\u6811\u88f8\u9898\uff0c\u6211\u7528$Splay$\u5b9e\u73b0\u7684\u3002\n\n\u672c\u9898\u7684\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u7ef4\u62a4\u540d\u5b57\u548c\u7f16\u53f7\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u73b0\u6709\u7684\u9898\u89e3\u90fd\u662f\u7528$map+$\u5b57\u7b26\u4e32\u54c8\u5e0c\u7684\u65b9\u6cd5\u6765\u7ef4\u62a4\u7684\u3002\n\n\u4f46\u8fd8\u6709\u66f4\u5feb\u7684\u65b9\u6cd5\uff1a$Trie$\n\n\u7801\u91cf\u771f\u7684\u4e0d\u5927\uff0c\u8dd1\u7684\u98de\u5feb\uff08\u603b\u5171479ms\uff0c\u672a\u5438\u6c27\uff09\n\n\u53e6\u5916\u672c\u9898\u8fd8\u6709\u4e2a\u5751\uff0cdebug\u4e86\u597d\u4e45\uff0c\u5c31\u662f\u4f1a\u51fa\u73b0\u5206\u6570\u975e\u5e38\u5927\u7684\u7ae5\u978b\uff0c\u8fbe\u5230\u4e86\u5341\u4f4d\u6570\uff0c\u5982\u679c\u4f60\u7684\u865a\u70b9\u7684\u503c\u4e0d\u591f\u5927\u7684\u8bdd\u5c31\u4f1a\u50cf\u6211\u4e00\u6837TLE\uff0c\u6240\u4ee5INF\u8fd8\u662f\u90fd\u8bbe\u4e3a2147483647\u5427\n\n\u4e00\u4e9b\u7ec6\u8282\u770b\u4ee3\u7801\u5427\u3002\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\n#include <map>\nusing namespace std;\nconst int MAXN = 250010;\ninline int read(){\n    int s = 0;\n    char ch = getchar();\n    while(ch < '0' || ch > '9')ch = getchar(); \n    while(ch >= '0' && ch <= '9'){ s = s * 10 + ch - '0'; ch = getchar(); }\n    return s;\n}\nstruct info{\n    int val, id;\n    int operator > (const info A) const{\n        return val == A.val ? id < A.id : val > A.val;\n    }\n};\nstruct splay{\n    info val;\n    int size, ch[2], fa;\n}t[MAXN];\nint root, num, T;\nstruct Trie{    //\u5b57\u5178\u6811\u7ef4\u62a4\u540d\u5b57\u548c\u7f16\u53f7\u6620\u5c04\u5173\u7cfb\n\tint val;    //\u7f16\u53f7\n\tTrie *ch[26];\n\tTrie(){ for(int i = 0; i < 26; ++i) ch[i] = NULL; val = 0; }\n}rt;\nint Insert(char *s, int pos){ //\u5b57\u5178\u6811\u63d2\u5165\uff0c\u6210\u529f\u8fd4\u56de0\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u4e86\u5c31\u8fd4\u56de\u5df2\u6709\u7684\u7f16\u53f7\n\tint len = strlen(s);\n\tTrie *u = &rt;\n\tfor(int i = 0; i < len; ++i){\n\t   if(u->ch[s[i] - 'A'] == NULL) u->ch[s[i] - 'A'] = new Trie();\n\t   u = u->ch[s[i] - 'A'];\n\t}\n\tif(u->val) return u->val;\n\tu->val = pos;\n\treturn 0;\n}\ninline void pushup(int x){\n    t[x].size = t[t[x].ch[0]].size + t[t[x].ch[1]].size + 1;\n}\ninline void rotate(int x){\n    int y = t[x].fa, z = t[y].fa, k = t[y].ch[1] == x;\n    t[y].ch[k] = t[x].ch[k ^ 1]; t[t[x].ch[k ^ 1]].fa = y;\n    t[y].fa = x; t[x].ch[k ^ 1] = y;\n    t[x].fa = z; t[z].ch[t[z].ch[1] == y] = x;\n    pushup(y); pushup(x);\n}\ninline void Splay(int x, int goal){\n    int y, z;\n    while(t[x].fa != goal){\n        y = t[x].fa; z = t[y].fa;\n        if(z != goal) rotate((t[y].ch[1] == x) ^ (t[z].ch[1] == y) ? x : y);\n        rotate(x);\n    }\n    if(!goal) root = x;\n}\ninline int insert(info x, int num){  //Splay\u63d2\u5165\n    if(!root){ root = num; t[root].val = x; t[root].size = 1; return root; }\n    int u = root, fa = 0;\n    while(u){ fa = u; u = t[u].ch[x > t[u].val]; }\n    int id = num; t[id].val = x; t[id].size = 1; t[id].fa = fa; if(fa) t[fa].ch[x > t[fa].val] = id;\n    Splay(id, 0);\n    return id;\n}\nint limit, tmp, Time;\nvoid find(int x){\n    int u = root;\n    while(233){\n        if(t[t[u].ch[0]].size == x - 1) break;\n        if(t[t[u].ch[0]].size >= x) u = t[u].ch[0];\n        else x -= t[t[u].ch[0]].size + 1, u = t[u].ch[1];\n    }\n    Splay(u, 0);\n}\nchar ch, name[MAXN][12];\nint len[MAXN];\nvoid dfs(int x){\n    if(!limit) return;   //\u9898\u4e2d\u7684\u6392\u540d\u662f\u4ece\u5927\u5230\u5c0f\u7684\uff0c\u6240\u4ee5\u5148\u904d\u5386\u53f3\u513f\u5b50\n    if(t[x].ch[1]) dfs(t[x].ch[1]);\n    if(!limit) return;\n    for(int i = 0; i < len[x]; ++i)\n       putchar(name[x][i]);\n    putchar(' ');\n    --limit;\n    if(t[x].ch[0]) dfs(t[x].ch[0]);\n}\nint next(int x, int mode){\n    Splay(x, 0);\n    int u = t[root].ch[mode]; \n    while(t[u].ch[!mode]) u = t[u].ch[!mode];\n    return u;\n}\nchar s[12];\nint pq;\nint main(){\n\t//freopen(\"1.txt\",\"r\",stdin);\n\t//freopen(\"2.txt\",\"w\",stdout);\n    T = read(); insert((info){ -2147483646, 9999999 }, ++num); insert((info){ 2147483646, -1 }, ++num);\n    while(T--){\n        ch = getchar();\n        while(ch != '+' && ch != '?') ch = getchar();\n        if(ch == '+'){ \n          scanf(\"%s\", s);\n          if(pq = Insert(s, num + 1)){ //\u5df2\u7ecf\u5b58\u5728\u4e86\n          \tint l = next(pq, 0), r = next(pq, 1);  //\u5220\u4e86\u518d\u63d2\u8fdb\u53bb\n            Splay(l, 0);\n            Splay(r, l);\n            t[t[root].ch[1]].ch[0] = 0;\n            Splay(t[root].ch[1], 0);\n            insert((info){ read(), ++Time }, pq);\n          }\n          else{\n            insert((info){read(), ++Time}, ++num); \n            memcpy(name[num], s, sizeof s);\n            len[num] = strlen(name[num]);\n          }\n        }\n        if(ch == '?'){\n            ch = getchar();\n            if(ch >= '0' && ch <= '9'){\n                tmp = 0;\n                while(ch >= '0' && ch <= '9'){ tmp = tmp * 10 + ch - '0'; ch = getchar(); }\n                find(num - tmp);  //\u56e0\u4e3a\u9898\u4e2d\u7684\u6392\u540d\u662f\u4ece\u5927\u5230\u5c0f\u7684\uff0c\u800c\u5e73\u8861\u6811\u6392\u540d\u662f\u4ece\u5c0f\u5230\u5927\u7684\uff0c\u6240\u4ee5\u8981\u53cd\u8fc7\u6765\n\t\t\t\tfor(int i = 0; i < len[root]; ++i)\n       \t\t\t   putchar(name[root][i]);\n    \t\t\tputchar(' '); limit = 9;\n                if(t[root].ch[0]) dfs(t[root].ch[0]);\n                printf(\"\\n\");\n            }\n            else{\n                int p = 0;\n                while(ch >= 'A' && ch <= 'Z'){ s[p++] = ch; ch = getchar(); }\n                for(int i = p; i < 12; ++i) s[i] = 0;\n                Splay(Insert(s, 233), 0);\n                printf(\"%d\\n\", t[t[root].ch[1]].size);\n            }\n        }\n        if(T % 200 == 0) Splay(rand() % num + 1, 0);  //\u4fdd\u6301Splay\u968f\u673a\u6027\n    }\n    return 0;\n}\n```",
        "postTime": 1550128200,
        "uid": 61834,
        "name": "Huami360",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2584 \u3010[ZJOI2006]GameZ\u6e38\u620f\u6392\u540d\u7cfb\u7edf\u3011"
    }
]