[
    {
        "content": "\u505a\u6cd5\u90fd\u5728\u6ce8\u91ca\u91cc\u4e86\n\n\u6bcf\u6b21dfs\u91cc\u9762\u90fd\u6709\u4e09\u79cd\u72b6\u6001\uff1a-1,0,1\n\n-1\u8868\u793a\u8981\u8ba9\u81ea\u5df1\u7684\u7236\u4eb2\u653e\u5929\u7ebf\n\n0\u8868\u793a\u81ea\u5df1\u4e0d\u7528\u653e\u5929\u7ebf\uff0c\u4e0d\u8fc7\u4e5f\u4e0d\u7528\u7236\u4eb2\u653e\u5929\u7ebf\u4e86\uff0c\u56e0\u4e3a\u513f\u5b50\u5e2e\u4f60\u653e\u597d\u4e86\n\n1\u8868\u793a\u81ea\u5df1\u4e0d\u5f97\u4e0d\u653e\u5929\u7ebf\uff0c\u5373\u8981\u5e2e\u7239\uff08\u4e5f\u8868\u793a\u81ea\u5df1\u88ab\u5751\u4e86\uff09\n\n\u522b\u7684\u90fd\u770b\u4ee3\u7801\u7684\u6ce8\u91ca\u5c31\u597d\u4e86\uff08\u53ef\u80fd\u662f\u53f2\u4e0a\u6700\u6ed1\u7a3d\u7684\u6ce8\u91ca\uff09\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <vector>\nusing namespace std;\n#define maxn 100001\nint n; \nint ans=0;\nvector<int> conn_matrix[maxn];       //\u90bb\u63a5\u8868\nint dfs(int u, int p){\n    int chosen=-1;    //\u521d\u59cb\u503c\n    for(auto val:conn_matrix[u]){    //\u5faa\u73af\u6bcf\u4e2a\u90bb\u5c45\uff08\u513f\u5b50&\u7236\u4eb2\uff09\n        if(val!=p){      //\u5982\u679c\u5f53\u524d\u7684val\u4e0d\u662f\u7236\u4eb2\uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u5bf9\u6bcf\u4e2a\u513f\u5b50\u679a\u4e3e\uff0c\u4f46\u4e0d\u5305\u62ec\u7236\u4eb2\n            int ret=dfs(val, u);    //\u770b\u513f\u5b50\u662f\u5565\u72b6\u6001\n            if(ret==-1)        //\u5982\u679c\u513f\u5b50\u8bf4\u8981\u5751\u7239\n                chosen=1;    //\u90a3\u4e48\u8eab\u4e3a\u7236\u4eb2\u7684\u81ea\u5df1\u4e00\u5b9a\u8981\u7acb\u5929\u7ebf\uff0c\u5373\u8981\u5e2e\u7239\n            else if(ret==1 && chosen!=1)    //\u5982\u679c\u513f\u5b50\u8bf4\u201c\u6211\u8981\u5e2e\u4f60\u4e86\uff0c\u6211\u5e2e\u7239\u201d\uff0c\u5e76\u4e14\u6ca1\u6709\u4e00\u4e2a\u5751\u7239\u7684\u513f\u5b50\uff08\u5176\u5b9e\u8fd1\u4f3c\u7b49\u4ef7\u4e8eret==-1\uff09\n                chosen=0;    //\u53ef\u4ee5\u653e\u98de\u81ea\u6211\u4e86\uff01\u5373\u4e0d\u7528\u9760\u7239\uff0c\u4e0d\u8fc7\u4e5f\u4e0d\u7528\u5929\u7ebf\n        }\n    }\n    if(chosen==1) ans++;    //\u8981\u5e2e\u7239\u4e86\uff0c\u90a3\u4e48ans++\n    return chosen;      //\u8fd4\u56de\u81ea\u5df1\u7684\u72b6\u6001\n}\nint main(){\n    cin>>n;\n    for(int i=0; i<n-1; i++){\n        int a, b;\n        cin>>a>>b;\n        conn_matrix[a].push_back(b);\n        conn_matrix[b].push_back(a);    //\u65e0\u5411\u56fe\uff0c\u53cc\u5411\u8fde\u63a5\n    }\n    if(dfs(1, 0)==-1) ans++;    //\u5982\u679c\u6839\u8282\u70b9\u8bf4\uff1a\u6211\u8981\u5751\u7239\uff01\uff01\uff01\u4f46\u53c8\u6ca1\u7239\u53ef\u5751\uff0c\u90a3\u4e48\u53ea\u80fd\u5751\u81ea\u5df1\uff0c\u81ea\u5df1\u653e\u4e00\u6839\u5929\u7ebf\n    cout<<ans<<endl;    //\u8f93\u51fa\u7b54\u6848\n    return 0;\n}\n```",
        "postTime": 1509701331,
        "uid": 52710,
        "name": "InnovatorNZ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "\u6811\u5f62dp\u633a\u597d\u7684\u4e00\u9053\u9898  \n\u8fd9\u9898\u5176\u5b9e\u662f[P2548 \u4fdd\u5b89\u7ad9\u5c97](https://www.luogu.org/problem/P2458)\u7684\u6570\u636e\u5f31\u5316\u7248  \n$QwQ$\u53cc\u500d\u7ecf\u9a8c\n\n---\n\u8fd9\u9898\u663e\u7136\u662f\u8282\u70b9\u9009\u62e9\u7c7b\u7684\u6811\u5f62dp\uff0c\u6211\u4eec\u9700\u8981\u660e\u786e\u7236\u5b50\u5173\u7cfb\uff0c\u4ece\u800c\u5b9a\u4e49\u51fa\u72b6\u6001\uff0c\u518d\u601d\u8003\u66b4\u529b\u7684\u72b6\u6001\u8f6c\u79fb\uff0c\u6700\u540e\u8003\u8651\u4f18\u5316\u8f6c\u79fb\u8fc7\u7a0b\u3002  \n### \u5206\u6790:\n```cpp\n\u7236\u5b50\u5173\u7cfb:\n\u81ea\u5df1(i),\u7236\u4eb2(fa),\u513f\u5b50(son)\u4e2d\u5fc5\u987b\u8981\u5b58\u5728\u4e00\u4e2a\n\u5b9a\u4e49\u72b6\u6001\uff1a \nf[i][0]\u8868\u793ai\u88ab\u81ea\u5df1\u8986\u76d6 \u7684\u6700\u5c0f\u82b1\u8d39\nf[i][1]\u8868\u793ai\u88ab\u513f\u5b50\u8986\u76d6 \u7684\u6700\u5c0f\u82b1\u8d39\nf[i][2]\u8868\u793ai\u88ab\u7236\u4eb2\u8986\u76d6 \u7684\u6700\u5c0f\u82b1\u8d39\n\u72b6\u6001\u8f6c\u79fb\uff1a\n1.f[i][0]+=min(f[son][1],f[son][2],f[son][0]) \n2.f[i][1]=f[x][0]+sigma(min (f[son][0],f[son][1]) ) \n3.f[i][2]+=min(f[son][0],f[son][1])\n    \n\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u4e0a\u9762\u72b6\u6001\u8f6c\u79fb\u7684\u8fc7\u7a0b\uff1a\n1.\u6b64\u65f6\u60c5\u51b5\u662f\u8282\u70b9i\u5904\u653e\u7f6e\u8b66\u5bdf\uff0c\u90a3\u4e48\u5b83\u7684\u513f\u5b50\u53ef\u4ee5\u9009\u62e9\u88ab\u81ea\u5df1\u770b\u5b88(f[son][0])\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u88ab\u513f\u5b50\u770b\u5b88(f[son][1]),\u5f53\u7136\u4e5f\u53ef\u4ee5\u9009\u62e9\u88ab\u7236\u4eb2\u770b\u5b88(f[son][2])\n\u8f6c\u79fb2\u6709\u70b9\u5c0f\u96be\u5ea6\uff0c\u6211\u4eec\u5148\u5206\u6790\u8f6c\u79fb3\n3.\u6b64\u65f6\u7684\u60c5\u51b5\u662f\u8282\u70b9i\u88ab\u7236\u4eb2\u8986\u76d6(\u5373i\u8282\u70b9\u6ca1\u6709\u653e\u7f6e\u8b66\u5bdf),\u90a3i\u7684\u513f\u5b50(son)\u5c31\u53ea\u80fd\u9009\u62e9\u88ab\u81ea\u5df1\u770b\u5b88(f[son][0]),\u6216\u8005\u88ab\u5b83\u7684\u513f\u5b50\u7684\u770b\u5b88(f[son][1])\n```\n\n### \u73b0\u5728\u8ba8\u8bba\u8f6c\u79fb2\uff1a\n\n\u6b64\u65f6\u7684\u60c5\u51b5\u662f\u8282\u70b9$i$\u5904\u4e0d\u653e\u7f6e\u8b66\u5bdf\uff0c\u8282\u70b9$i$\u7531\u5b83\u7684\u513f\u5b50\u770b\u5b88\uff0c\u90a3\u4e48\u6211\u4eec\u663e\u7136\u8981\u5728$i$\u7684\u4f17\u591a\u513f\u5b50\u4e2d\uff0c\u9009\u62e9\u4e00\u4e2a\u513f\u5b50(\u5bf9\u5e94\u4e0a\u9762\u8f6c\u79fb\u65b9\u7a0b\u4e2d\u7684$x$)\u653e\u7f6e\u8b66\u5bdf\uff0c\u8fd9\u6837\u5f53\u524d\u8282\u70b9$i$\u624d\u4f1a\u88ab\u770b\u5b88\u5230\uff0c\u7136\u540e\u5bf9\u4e8e\u5269\u4f59\u7684\u513f\u5b50\uff0c\u6211\u4eec\u8fdb\u884c\u548c\u8f6c\u79fb\u65b9\u7a0b3\u4e00\u6837\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u6b64\u65f6\u8282\u70b9$i$\u6ca1\u6709\u653e\u7f6e\u8b66\u5bdf\uff0c\u90a3$i$\u7684\u513f\u5b50\u5c31\u53ea\u80fd\u9009\u62e9\u88ab\u81ea\u5df1\u770b\u5b88,\u6216\u8005\u88ab\u5b83\u7684\u513f\u5b50\u7684\u770b\u5b88\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u5bf9\u4e8e\u8282\u70b9$i$\u6765\u8bf4\uff0c\u4e00\u4e2a\u6700\u4f18\u7684\u513f\u5b50$x$\u5c31\u884c\u4e86\uff0c\u53ef\u4ee5\u8003\u8651\u679a\u4e3e\u6240\u6709\u513f\u5b50\uff0c\u4f46\u662f\u4e5f\u6709\u6570\u5b66\u65b9\u6cd5\u6765\u4f18\u5316\uff0c\u4ee5\u4e0b\u5185\u5bb9\u53c2\u8003:\n\n\u9898\u89e3 P2458 \u3010[SDOI2006\\]\u4fdd\u5b89\u7ad9\u5c97\u3011](https://www.luogu.org/blog/Parabola/solution-p2458)\n\n\u5bf9\u4e8ex\u6765\u8bf4\uff0c\u6709$f[i][1]=f[x][0]+\\Sigma_{j\\subset son(i),j!=x}{min(f[j][0],f[j][1])}$\n\n\u82e5x\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u5219\u5b58\u5728y\u6ee1\u8db3$f[x][0]+\\Sigma_{j\\subset son(i),j!=x}{min(f[j][0],f[j][1])}<f[y][0]+\\Sigma_{j\\subset son(i),j!=y}{min(f[j][0],f[j][1])}$\n\n\u5408\u5e76\u540c\u7c7b\u9879\uff0c\u6574\u7406\u5f97$f[x][0]-min(f[x][0],f[x][1])>f[y][0]-min(f[y][0],f[y][1])$\n\n\u6240\u4ee5\u5bf9\u4e8e\u6700\u4f18\u7684x\uff0c\u53ea\u9700\u8981\u6ee1\u8db3$f[x][0]-min(f[x][0],f[x][1])$\u662f\u6240\u6709\u513f\u5b50\u4e2d\u6700\u5c0f\u7684\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6211\u4eec\u4e0d\u59a8\u8bbe\u6700\u4f18\u7684$x$\u4e00\u5f00\u59cb\u4e3a0\uff0c\u7136\u540e\u5bf9$f[0][0]$\u8d4b\u4e00\u4e2a\u6781\u5927\u503c\u6765\u8f6c\u79fb.\n## Code:\n```cpp\n\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define Mi return\n#define manchi 0\n\nusing namespace std;\nconst int N = 10000+5;\nconst int INF = 0x3f3f3f3f;\n/*\nf[i][0/1/2]\u88ab\u81ea\u5df1/\u513f\u5b50/\u7236\u4eb2\u8986\u76d6\nf[i][0]+=min(f[son][0/1/2])\nf[i][1]=f[son][0]+sigma(f[other_son][0/1])\nf[i][2]+=min(f[son][0/1])\n \n*/\ninline int read()\n{\n\tint num=0,w=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')w=-1;ch=getchar();}\n\twhile(isdigit(ch)) num=(num<<1)+(num<<3)+ch-'0',ch=getchar();\n\tMi num*w;\n } \n\nint n,f[N<<1][3];\nint tot,head[N],ver[N<<1],Next[N<<1];\n\ninline void add(int x,int y)\n{\n\tver[++tot]=y;\n\tNext[tot]=head[x];\n\thead[x]=tot;\n}\n\ninline void dfs(int x,int fa)\n{\n\tint special_son=0;f[x][0]=1;\n\tfor(int i=head[x];i;i=Next[i])\n\t{\n\t\tint y=ver[i];\n\t\tif(y==fa) continue;\n\t\tdfs(y,x);\n\t\tf[x][0]+=min(f[y][0],min(f[y][1],f[y][2]));\n\t\tf[x][2]+=min(f[y][0],f[y][1]);\n\t\tif((f[special_son][0]-min(f[special_son][0],f[special_son][1])) > (f[y][0]-min(f[y][0],f[y][1])))\n\t\t\tspecial_son=y;\n\t}\n\tf[x][1]=f[special_son][0];\n\tfor(int i=head[x];i;i=Next[i])\n\t{\n\t\tint y=ver[i];\n\t\tif(y==fa || y==special_son) continue;\n\t\tf[x][1]+=min(f[y][0],f[y][1]);\n\t}\n}\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x=read(),y=read();\n\t\tadd(x,y);add(y,x);\n\t}\n\tf[0][0]=INF;dfs(1,-1);\n\tprintf(\"%d\",min(f[1][0],f[1][1]));\n\tMi manchi;\n}\ntyped by zbwer 2019-09-19 16:52\n```\n\n---\n",
        "postTime": 1568883141,
        "uid": 161521,
        "name": "zbwer",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n$n$\u4e2a\u70b9\uff0c$n-1$\u6761\u8fb9\uff08\u8fd9\u5c31\u544a\u8bc9\u6211\u4eec\u8fd9\u662f\u4e00\u68f5\u6811\uff09\uff0c\u4e00\u4e2a\u70b9\u67d3\u8272\u53ef\u4ee5\u4f20\u9012\u7ed9\u76f8\u90bb\u7684\u7ed3\u70b9\uff08\u4e5f\u5c31\u662f\u8bf4\u76f8\u90bb\u7ed3\u70b9\u76f8\u5f53\u4e8e\u88ab\u67d3\u8272\u4e86\uff09\u5e76\u5c06\u8fd9\u4e9b\u76f8\u90bb\u7ed3\u70b9\u8986\u76d6\uff0c\u95ee\u6700\u5c11\u67d3\u591a\u5c11\u4e2a\u7ed3\u70b9\u53ef\u4ee5\u5b8c\u5168\u8986\u76d6\u8fd9$n$\u4e2a\u7ed3\u70b9\n\n### \u505a\u6cd5\n\n\u9996\u5148\uff0c\u8fd9\u662f\u4e00\u9053**\u6811\u5f62DP**\u57fa\u7840\u9898\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u7ed3\u70b9\u53ef\u4ee5\u88ab\u8c01\u67d3\u8272\uff0c\u4e0d\u96be\u60f3\u51fa\uff0c\u53ef\u4ee5\u6709$3$\u79cd\u60c5\u51b5\uff1a\u88ab\u81ea\u5df1\u67d3\u8272\uff0c\u88ab\u513f\u5b50\u67d3\u8272\uff0c\u88ab\u7236\u4eb2\u67d3\u8272\n\n\u6211\u4eec\u7528$f[i][0/1/2]$\u5206\u522b\u8868\u793a$i$\u8fd9\u4e2a\u7ed3\u70b9\u88ab\u81ea\u5df1/\u513f\u5b50/\u7236\u4eb2\u67d3\u8272\u7684\u6700\u5c0f\u67d3\u8272\u6570\uff0c\u5373\u7528$f[i][0]$\u8868\u793a\u81ea\u5df1\u5bf9\u81ea\u5df1\u67d3\u8272\u4e86\uff0c\u7528$f[i][1]$\u8868\u793a\u81ea\u5df1\u88ab\u513f\u5b50\u67d3\u8272\u4e86\uff0c\u7528$f[i][2]$\u8868\u793a\u81ea\u5df1\u88ab\u7236\u4eb2\u67d3\u8272\u4e86\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u63a8\u51fa\u4e09\u79cd\u72b6\u6001\uff0c\u6211\u4eec\u8bbe\u76ee\u524d\u7ed3\u70b9\u4e3a$u$\uff0c\u4ed6\u7684\u513f\u5b50\u7ed3\u70b9\u4e3a$v$\n\n#### $1.$**\u81ea\u5df1\u88ab\u81ea\u5df1\u67d3\u8272**\n\n\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e0b\uff0c$u$\u88ab\u81ea\u5df1\u67d3\u8272\u53ef\u4ee5\u7531\u4ec0\u4e48\u8f6c\u79fb\u8fc7\u6765\uff0c\u5982\u679c$u$\u5df2\u7ecf\u88ab\u81ea\u5df1\u67d3\u8272\u4e86\u7684\u8bdd\uff0c\u4ed6\u7684\u513f\u5b50$v$\u53ef\u4ee5\u9009\u62e9\u81ea\u5df1\u67d3\u8272\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u88ab\u81ea\u5df1\uff08$v$\uff09\u7684\u513f\u5b50\u67d3\u8272\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u88ab$u$\u67d3\u8272\uff0c\u5f53\u7136\uff0c\u6211\u4eec\u8981\u9009\u6700\u5c0f\u7684\uff0c\u6240\u4ee5\u8f6c\u79fb\u65b9\u7a0b\u5c31\u662f\n\n$$f[u][0] += \\min (f[v][0], f[v][1], f[v][2])(v \\in son_u)$$\n\n#### $2.$**\u88ab\u81ea\u5df1\u7684\u7236\u4eb2\u7ed3\u70b9\u67d3\u8272**\n\n\u5982\u679c\u88ab\u7236\u4eb2\u7ed3\u70b9($fa$)\u67d3\u8272\u4e86\uff0c\u90a3\u4e48$u$\u7684\u513f\u5b50$v$\u53ea\u80fd\u9009\u62e9\u81ea\u5df1\u67d3\u8272\u6216\u8005\u88ab\u5b83\u7684\u513f\u5b50\u67d3\u8272\uff0c\u8f6c\u79fb\u65b9\u7a0b\u4e3a\n\n$$f[u][0] += \\min (f[v][0], f[v][1])(v\\in son_u)$$\n\n#### $3.$**\u88ab\u81ea\u5df1\u7684\u513f\u5b50\u7ed3\u70b9\u67d3\u8272**\n\n\u8fd9\u662f\u6700\u9ebb\u70e6\u7684\u4e00\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a$u$\u53ef\u80fd\u6709\u591a\u4e2a\u513f\u5b50\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u513f\u5b50\u81ea\u5df1\u67d3\u8272\u4e86\uff0c\u5c31\u53ef\u4ee5\u5c06$u$\u8986\u76d6\uff0c\u8fd9\u79cd\u60c5\u51b5\u5c31\u6210\u7acb\u4e86\n\n\u800c\u73b0\u5728\u5b83\u7684\u513f\u5b50\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u5206\u522b\u662f\u81ea\u5df1\u67d3\u8272\u548c\u88ab\u5b83\u513f\u5b50\u67d3\u8272\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u5047\u8bbe\u6bcf\u4e2a\u513f\u5b50\u90fd\u662f\u88ab\u5b83\u81ea\u5df1\u67d3\u8272\uff08$v$\u88ab\u81ea\u5df1\u67d3\u8272\uff09\u7684\uff0c\u7136\u540e\u770b\u4e00\u4e0b$u$\u7684\u6bcf\u4e2a\u513f\u5b50\uff08$v$\uff09\u88ab\u5176\u513f\u5b50\u67d3\u8272\u662f\u5426\u4f7f\u7ed3\u679c\u53d8\u5f97\u66f4\u5c0f\uff0c\u628a\u80fd\u8ba9\u7ed3\u679c\u66f4\u5c0f\u7684 \u81ea\u5df1\u67d3\u8272\uff08$v$\u81ea\u5df1\u67d3\u8272\uff09\u7684\u513f\u5b50 \u66ff\u6362\u4e3a \u88ab\u5176\u513f\u5b50\u67d3\u8272\u7684\u513f\u5b50\uff08$v$\u88ab\u5b83\u513f\u5b50\u67d3\u8272\uff09\u7684\u513f\u5b50\n\n(\u53c2\u8003\u4e86$ysner$\u5927\u4f6c\u7684\u601d\u8def)\n\n\u90a3\u4e48\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\n\n1. \u5148\u8ba9$f[u][1]$\u52a0\u4e0a\u6240\u6709\u7684$f[v][0]$\uff08\u4e5f\u5c31\u662f\u5047\u8bbe\u6240\u6709\u7684$v$\u76ee\u524d\u90fd\u662f\u81ea\u5df1\u7ed9\u81ea\u5df1\u67d3\u8272\u7684\uff09\n2. \u5728\u8fdb\u884c\u4e00\u7684\u540c\u65f6\uff0c\u7528\u4e00\u4e2a$g$\u6570\u7ec4\uff0c\u8868\u793a$v$\u88ab\u513f\u5b50\u67d3\u8272\u6240\u9700\u7684\u4ef7\u503c\u51cf\u53bb$v$\u88ab\u81ea\u5df1\u67d3\u8272\u7684\u4ef7\u503c\u7684\u5dee\u503c\uff0c\u540c\u65f6\u7528\u4e00\u4e2a\u53d8\u91cf$tot$\u8bb0\u5f55\u4e00\u4e0b\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u513f\u5b50\uff0c\u5373$g[++tot] = f[v][1] - f[v][0]$\n3. \u5982\u679c$u$\u6ca1\u6709\u513f\u5b50\uff0c\u5373$tot$\u4e3a$0$\uff0c\u8bf4\u660e$u$\u662f\u4e00\u4e2a\u53f6\u7ed3\u70b9\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u4ece\u513f\u5b50\u6765\u7684\u4ef7\u503c\uff0c\u56e0\u4e3a\u8f6c\u79fb\u7684\u65f6\u5019\u6211\u4eec\u8981\u53d6\u5c0f\u7684\uff0c\u6240\u4ee5\u5c31\u628a$f[u][1]$\u8bbe\u4e3a\u4e00\u4e2a\u6781\u5927\u503c\n4. \u5982\u679c$u$\u6709\u513f\u5b50\uff0c\u5c31\u5c06$g$\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5982\u679c\u662f\u8d1f\u503c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u66ff\u6362\uff0c\u56e0\u4e3a\u662f\u8d1f\u503c\u7684\u8bdd\u5c31\u8bf4\u660e\uff0c\u6b64\u65f6\u7684$f[v][1]$\u6bd4$f[v][0]$\u5c0f\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u66ff\u6362\uff0c\u53ea\u8981\u662f\u8d1f\u7684\uff0c\u503c\u8d8a\u5c0f\u8d8a\u597d\uff0c\u6240\u4ee5\u5c31\u6392\u5e8f\u4e00\u4e0b\uff0c\u662f\u8d1f\u7684\u5c31\u66ff\u6362\uff0c\u5426\u5219\u5c31$break$\uff0c\u5f53\u7136\u6211\u4eec\u6700\u591a\u66ff\u6362$tot-1$\u4e2a\uff0c\u56e0\u4e3a\u8981\u4fdd\u8bc1$u$\u88ab\u67d3\u8272\uff0c\u5fc5\u987b\u6709\u4e00\u4e2a\u513f\u5b50\u662f\u81ea\u5df1\u67d3\u8272\u7684\n\n\u81f3\u6b64\u4e3b\u8981\u90e8\u5206\u5c31\u8bb2\u5b8c\u4e86\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u6bcf\u6b21$dfs$\u7684\u65f6\u5019\u5148\u5c06$f[u][0]$\u8bbe\u4e3a$1$\uff0c\u56e0\u4e3a\u81ea\u5df1\u7ed9\u81ea\u5df1\u67d3\u8272\u80af\u5b9a\u81f3\u5c11\u4e3a$1$\n\n\u7136\u540e\u6211\u4eec\u5c31\u505a\u5b8c\u5566~~\n\n### \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\ninline int read() {\n\tchar c = getchar();\n\tint x = 0, f = 1;\n\tfor( ; !isdigit(c); c = getchar()) if(c == '-') f = -1;\n\tfor( ; isdigit(c); c = getchar()) x = (x << 3) + (x << 1) + (c ^ 48);\n\treturn x * f;\n}\n\nconst int M = 1e5 + 11;\nconst int INF = 1e9 + 17;\n\nint n, m;\nint f[M][3];//f[i][0/1/2]0\u8868\u793a\u88ab\u81ea\u5df1\u67d3\u4e86\uff0c1\u8868\u793a\u88ab\u513f\u5b50\u67d3\u4e86\uff0c2\u8868\u793a\u88ab\u7236\u4eb2\u67d3\u4e86 \n\nstruct node {\n\tint nxt, to;\n} e[M];\n\nint head[M], cnt;\n\ninline void add(int from, int to) {\n\te[++cnt].to = to;\n\te[cnt].nxt = head[from];\n\thead[from] = cnt;\n}\n\nbool cmp(int x, int y) {\n\treturn x > y;\n}\n\nvoid dfs(int u, int fa) {\n\tint tot = 0, g[M]; f[u][0] = 1;\n\tfor(int i = head[u]; i; i = e[i].nxt) {\n\t\tint v = e[i].to;\n\t\tif(v == fa) continue;\n\t\tdfs(v, u);\n\t\tf[u][0] += min(f[v][0], min(f[v][1], f[v][2]));\n\t\tf[u][2] += min(f[v][0], f[v][1]);\n\t\tf[u][1] += f[v][0];\n\t\tg[++tot] = f[v][1] - f[v][0];\n\t}\n\tif(!tot) f[u][1] = INF;\n\telse {\t\n\t\tsort(g + 1, g + 1 + tot);\n\t\tfor(int i = 1; i < tot; i++) {\n\t\t\tif(g[i] < 0) f[u][1] += g[i];\n\t\t\telse break;\n\t\t}\n\t}\n\treturn;\n}\n\nint main() {\n\tn = read();\n\tfor(int i = 1; i < n; i++) {\n\t\tint x = read(), y = read();\n\t\tadd(x, y), add(y, x);\n\t}\n\tdfs(1, 0);\n\tprintf(\"%d\", min(f[1][0], f[1][1]));\n\treturn 0;\n}\n\n```\n\n\u5b8c\u7ed3\u6492\u82b1qwq",
        "postTime": 1571972416,
        "uid": 198323,
        "name": "loceaner",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "\n# \u9898\u76ee\n[\u624b\u673a\u7f51\u7edc](https://www.luogu.org/problemnew/show/P2899)\n\n---\n# \u9898\u89e3\n\u9996\u5148\u6211\u4eec\u786e\u5b9a\u8fd9\u9053\u9898\u662f\u6811\u5f62DP\uff0c\u800c\u4e14\u53ef\u4ee5\u770b\u51fa\u8fd9\u9053\u9898\u548c\u6811\u7684\u6700\u5927\u72ec\u7acb\u96c6\u6709\u51e0\u5206\u76f8\u4f3c\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5148\u6253\u4e00\u4e2a\u6811\u7684\u6700\u5927\u72ec\u7acb\u96c6\u51fa\u6765\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u5e76\u4e0d\u80fd`AC`\n\n\u56e0\u4e3a\u6811\u7684\u6700\u5927\u72ec\u7acb\u96c6\u53ef\u4ee5\u5168\u90e8\u7531\u7ed3\u70b9\u7684\u513f\u5b50\u8f6c\u79fb\u8fc7\u6765\uff0c\u800c\u8fd9\u9053\u9898\u8fd8\u6709\u53e6\u4e00\u79cd\u53ef\u80fd\uff0c\u5c31\u662f\u6709\u7ed3\u70b9\u7684\u7236\u4eb2\u8f6c\u79fb\u8fc7\u6765\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u50cf\u6700\u5927\u72ec\u7acb\u96c6\u90a3\u6837\u5b9a\u4e49\u72b6\u6001\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u591a\u5b9a\u4e49\u4e00\u4e2a\u72b6\u6001\n\n$dp[i][j]$\uff0c\u5176\u4e2d$j$\u53ea\u6709\u4e09\u79cd\u53ef\u80fd\uff0c$0$\u8868\u793a$i$\u53f7\u70b9\u6709\u901a\u8baf\u5854\uff0c$1$\u8868\u793a$i$\u53f7\u70b9\u6ca1\u6709\u901a\u8baf\u5854\uff0c\u5b83\u7531\u5b83\u7236\u4eb2\u7684\u901a\u8baf\u5854\u7ba1\u8f96\uff0c$2$\u8868\u793a$i$\u53f7\u70b9\u6ca1\u6709\u901a\u8baf\u5854\uff0c\u5b83\u7531\u5b83\u513f\u5b50\u7684\u901a\u8baf\u5854\u7ba1\u8f96\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u60c5\u51b5\u5bf9\u8fd9\u4e09\u79cd\u72b6\u6001\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u7684\u8ba8\u8bba\uff1a\n\n\u5f53$j$\u7b49\u4e8e$0$\u65f6\uff0c\u56e0\u4e3a$i$\u70b9\u6709\u4e00\u4e2a\u901a\u8baf\u5854\uff0c\u6240\u4ee5$son(i)$\u6709\u53ef\u80fd\u4ece\u5b83\u7684\u7236\u4eb2\uff08\u4e5f\u5c31\u662f$i$\u70b9\uff09\u8f6c\u79fb\u8fc7\u6765\uff0c\u4e5f\u6709\u53ef\u80fd\u6709\u5b83\u7684\u513f\u5b50\u8f6c\u79fb\u8fc7\u6765\uff0c\u5f53\u7136\uff0c\u4e5f\u6709\u53ef\u80fd\u5b83\u81ea\u5df1\u672c\u8eab\u5c31\u6709\u4e00\u4e2a\u901a\u8baf\u5854\uff0c\u5373\n$$dp[i][0]=\\sum Min(dp[son(i)][0],dp[son(i)][1],dp[son(i)][2])+1$$\n(\u56e0\u4e3a\u6211\u4eec\u5728i\u7ed3\u70b9\u5efa\u7acb\u4e86\u4e00\u4e2a\u901a\u8baf\u5854\uff0c\u6240\u4ee5\u8981\u52a01)\n\n\u5f53$j$\u7b49\u4e8e$1$\u65f6\uff0c\u56e0\u4e3a$i$\u70b9\u6ca1\u6709\u901a\u8baf\u5854\uff0c\u6240\u4ee5$son(i)$\u4e0d\u53ef\u80fd\u4ece\u5b83\u7684\u7236\u4eb2\u8f6c\u79fb\u8fc7\u6765\uff0c\u5b83\u53ea\u6709\u53ef\u80fd\u7531\u5b83\u7684\u513f\u5b50\u8f6c\u79fb\u8fc7\u6765\uff0c\u6216\u8005\u662f\u5b83\u81ea\u5df1\u6709\u4e00\u4e2a\u901a\u8baf\u5854\uff0c\u5373\n$$dp[i][1]=\\sum Min(dp[son(i)][0],dp[son(i)][2])$$\n\u5f53$j$\u7b49\u4e8e$2$\u65f6\uff0c\u56e0\u4e3a$i$\u70b9\u6ca1\u6709\u901a\u8baf\u5854\uff0c\u6240\u4ee5$son(i)$\u4e5f\u4e0d\u53ef\u80fd\u4ece\u5b83\u7684\u7236\u4eb2\u8f6c\u79fb\u8fc7\u6765\uff0c\u5b83\u53ea\u6709\u53ef\u80fd\u7531\u5b83\u7684\u513f\u5b50\u8f6c\u79fb\u8fc7\u6765\uff0c\u6216\u8005\u662f\u5b83\u81ea\u5df1\u6709\u4e00\u4e2a\u901a\u8baf\u5854\uff0c\u5373\n$$dp[i][2]=\\sum Min(dp[son(i)][0],dp[son(i)][2])$$\n\u4f46\u8fd9\u6837\u5199\u6211\u4eec\u5f88\u5bb9\u6613\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c$dp[i][2]$\u5168\u662f\u4ece$dp[son(i)][2]$\u8f6c\u79fb\u8fc7\u6765\u7684\u8bdd\uff0c\u5c31\u8bc1\u660e\u5b83\u7684\u6240\u6709\u513f\u5b50\u90fd\u6ca1\u6709\u901a\u8baf\u5854\uff0c\u90a3\u4e48\u5c31\u4e0d\u53ef\u80fd\u5c06\u5b83\u8986\u76d6\uff0c\u5982\u4f55\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u5462\uff1f\n\n\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u4e0b\u6bcf\u4e00\u6b21$dp[son(i)][0]-dp[son(i)][2]$\u7684\u5dee\u503c\uff0c\u518d\u53d6\u4e00\u4e2a$min$\u503c\uff0c\u7b80\u5355\u7684\u6765\u8bf4\uff0c\u5c31\u662f\n$$p=Min(dp[son(i)][0]-dp[son(i)][2])$$\n\u5728\u6700\u540e\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0$dp[i][2]$\u5168\u662f\u4ece$dp[son(i)][2]$\u8f6c\u79fb\u8fc7\u6765\u7684\u8bdd\uff0c\u5c31\u518d\u52a0\u4e0a\u4e00\u4e2a$p$\uff0c\u5c31\u76f8\u5f53\u4e8e\u5c06\u5176\u4e2d\u7684\u4e00\u4e2a$dp[son(i)][2]$\u5f3a\u5236\u8f6c\u6362\u4e3a\u4e86$dp[son(i)][0]$\uff0c\u540c\u65f6\u8fd8\u4fdd\u8bc1\u4e86\u6700\u5c0f\n\n\u7efc\u4e0a\u6240\u8ff0\n$$dp[i][j]=\\begin{cases} \\sum Min(dp[son(i)][0],dp[son(i)][1],dp[son(i)][2])+1(j==0) \\\\ \\sum Min(dp[son(i)][0], dp[son(i)][2])(j==1) \\\\ \\sum Min(dp[son(i)][0], dp[son(i)][2])(j==2\\ and\\ flag==1) \\\\ \\sum Min(dp[son(i)][0], dp[son(i)][2])+p(j==2\\ and\\ flag==0) \\end{cases}$$\n$flag$\u8868\u793a$dp[i][2]$\u662f\u5426\u7531\u4e00\u4e2a\u6216\u591a\u4e2a$dp[son(i)][0]$\u8f6c\u79fb\u8fc7\u6765\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6700\u540e\u8f93\u51fa\u7684\u662f$Min(dp[root][0],dp[root][2])$\uff0c\u56e0\u4e3a\u6700\u540e\u7684\u6839\u7ed3\u70b9\u662f\u4e0d\u53ef\u80fd\u6709\u7236\u4eb2\u7684\n\n----\n# \u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <vector>\nusing namespace std;\n#define reg register\n \ntemplate <class T>\ninline T read() {\n    T x = 0; T f = 1; char s = getchar();\n    while(s < '0' || s > '9') {if(s == '-') f = -1; s = getchar();}\n    while(s >= '0' && s <= '9') {x = (x << 3) + (x << 1) + s - 48; s = getchar();}\n    return x * f;\n}\n \ntemplate <typename T>\ninline void wri(T x) {\n    if(x < 0) {x = -x; putchar('-');}\n    if(x / 10) wri(x / 10);\n    putchar(x % 10 + 48);\n}\n \ntemplate <typename T>\ninline void write(T x, char s) {\n    wri(x);\n    putchar(s);\n}\n \ntemplate <typename T>\ninline T Min(T x, T y) {return x < y ? x : y;}\n \n#define MAXN 10005\n#define INF 0x3f3f3f3f\n \nvector <int> G[MAXN];\n \nint n;\nint dp[MAXN][3];\nbool vis[MAXN];\n \ninline void dfs(int x) {\n    vis[x] = 1;\n    bool flag = 0;\n    int siz = G[x].size(), p = INF;\n    for(reg int i = 0;i <= siz - 1;i ++)\n        if(! vis[G[x][i]]) {\n            dfs(G[x][i]);\n            dp[x][0] += Min(dp[G[x][i]][0], Min(dp[G[x][i]][1], dp[G[x][i]][2]));\t//\u72b6\u6001\u8f6c\u79fb\n            dp[x][1] += Min(dp[G[x][i]][0], dp[G[x][i]][2]);\n            if(dp[G[x][i]][0] <= dp[G[x][i]][2]) {\n                flag = 1;\n                dp[x][2] += dp[G[x][i]][0];\n            }\n            else {\n                p = Min(p, dp[G[x][i]][0] - dp[G[x][i]][2]);\n                dp[x][2] += dp[G[x][i]][2];\n            }\n        }\n    if(! flag)\n        dp[x][2] += p;\n    dp[x][0] ++;\t//\u5982\u679c\u81ea\u5df1\u6709\u901a\u8baf\u5854\uff0c\u8981\u52a0\u4e0a\u81ea\u5df1\u7684\u90a3\u4e00\u4e2a\n}\n \nint main() {\n    n = read<int>();\n    for(reg int i = 1;i <= n - 1;i ++) {\n        int a = read<int>(), b = read<int>();\n        G[a].push_back(b);\t//\u7528\u90bb\u63a5\u8868\u50a8\u5b58\u8fd9\u68f5\u6811\n        G[b].push_back(a);\n    }\n    dfs(1);\t//dfs\u6c42\u89e3DP\n    write(Min(dp[1][2], dp[1][0]), '\\n');\n    return 0;\n}\n```\n\n",
        "postTime": 1563965309,
        "uid": 105150,
        "name": "PI_AC",
        "ccfLevel": 0,
        "title": "[\u6811\u5f62DP] \u624b\u673a\u7f51\u7edc"
    },
    {
        "content": "\u4e00\u9053\u6811\u5f62dp,\u4e0d\u8fc7\u697c\u4e0b\u8bb2\u7684\u5b9e\u5728\u662f\u592a\u7b80\u77ed\u4e86\uff0c\u6211\u8981\u6709\u6240\u8865\u5145\u3002\n\n\u9996\u5148\u67093\u4e2a\u72b6\u6001\uff1a\n\n1.f[i][0]\u8868\u793a\u4e0d\u5728\u7b2ci\u5757\u8349\u5730\u5efa\u4fe1\u53f7\u5854\uff0ci\u548ci\u7684\u5b50\u6811\u5747\u6709\u4fe1\u53f7\n\n2.f[i][1]\u8868\u793a\u5728\u7b2ci\u5757\u8349\u5730\u5efa\u4fe1\u53f7\u5854\uff0ci\u548ci\u7684\u5b50\u6811\u5747\u6709\u4fe1\u53f7\n\n3.f[i][2]\u8868\u793a\u4e0d\u5728\u7b2ci\u5757\u8349\u5730\u5efa\u4fe1\u53f7\u5854\uff0ci\u7684\u5b50\u6811\u5747\u6709\u4fe1\u53f7,i\u65e0\u4fe1\u53f7\n\n\u52193\u4e2a\u72b6\u6001\u7684\u8f6c\u79fb\u65b9\u7a0b\u5206\u522b\u4e3a\n\n1.f[i][2]=\u2211f[i.child][0]\n\n2.f[i][1]=\u2211min(f[i.child][0],f[i.child][1],f[i.child][2])\n\n3.f[i][0]=min(f[i.child-j][1]+\u2211min(f[i.child-k][0],f[i.child-k][1]))  (j\u662fi\u7684\u4e00\u4e2a\u5b69\u5b50\uff0cj!=k)\n\n\u6700\u540e\u8f93\u51famin(f[root][0],f[root][1])\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\nconst int N=200000;\nconst int MAX=100000;\nint n,i,a,b,h[N],t[N],name[N],f[N][3];\nint min(int x,int y){return x<y?x:y;}\nint dfs(int i,int j,int fa){//\u5f53\u524d\u8ba1\u7b97f[i][j],fa\u662fi\u7684\u7236\u4eb2\n    if(f[i][j]>=0)\n        return f[i][j];\n    f[i][j]=0;\n    if(j==2){\n        for(int k=h[i];k;k=t[k])\n            if(name[k]!=fa)\n                f[i][2]+=dfs(name[k],0,i);\n        return f[i][2];\n    }\n    if(j==1){\n        for(int k=h[i];k;k=t[k])\n            if(name[k]!=fa)\n                f[i][1]+=min(min(dfs(name[k],0,i),dfs(name[k],1,i)),dfs(name[k],2,i));\n        return ++f[i][1];\n    }\n    if(j==0){\n        f[i][0]=MAX;int s=0;\n        for(int k=h[i];k;k=t[k])\n            if(name[k]!=fa)\n                s+=min(dfs(name[k],0,i),dfs(name[k],1,i));\n            //s=\u2211min(f[i.child][0],f[i.child][1])\n        for(int k=h[i];k;k=t[k])\n            if(name[k]!=fa)\n                f[i][0]=min(f[i][0],dfs(name[k],1,i)+s-min(dfs(name[k],0,i),dfs(name[k],1,i)));\n                //s-min(dfs(name[k],0,i),dfs(name[k],1,i))=\u2211min(f[i.child-j][0],f[i.child-j][1])(j!=k)\n        return f[i][0];\n    }\n}    \nint main(){\n    scanf(\"%d\",&n);\n    for(i=1;i<n;i++){\n        scanf(\"%d%d\",&a,&b);\n        t[i]=h[a];\n        h[a]=i;\n        name[i]=b;\n        t[i+n]=h[b];\n        h[b]=i+n;\n        name[i+n]=a;\n        f[i][0]=f[i][1]=f[i][2]=-1;\n    }\n    f[i][0]=f[i][1]=f[i][2]=-1;\n    printf(\"%d\",min(min(dfs(1,0,0),dfs(1,1,0)),dfs(1,2,0)+1));//\u8bb0\u5fc6\u5316\u641c\u7d22\n    return 0;\n}\n\n```",
        "postTime": 1502765838,
        "uid": 41485,
        "name": "HybridTheory",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "\u9996\u5148\u8bf42\u4ef6\u4e8b\uff1a\n\n1.\u672c\u9898\u4e0d\u9700\u8981\u6811\u5f62DP~~\uff08\u56e0\u4e3a\u6211\u4e0d\u4f1a\uff09~~\n\n2.\u672c\u9898\u4e5f\u4e0d\u9700\u8981~~\u5947\u602a\u7684~~\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\n\n\u597d\u4e86\uff0c\u7136\u540e\u662f\u6b63\u5e38\u7684\u9898\u89e3\uff1a\n\n\u601d\u8def\u662f\u8d2a\u5fc3\u3002\n\n\u8003\u8651\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u3002\u5982\u679c\u8981\u8986\u76d6\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u6700\u4f18\u7684\u65b9\u6848\u663e\u7136\u662f\u5728\u5b83\u7684\u7236\u4eb2\u8282\u70b9\u4e0a\u5efa\u7acb\u4e00\u4e2a\u4fe1\u53f7\u5854\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u6bcf\u6b21\u627e\u4e00\u4e2a\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u6ee1\u8db3\uff1a\u5b83\u7684\u5b50\u6811\u5df2\u7ecf\u88ab\u5b8c\u5168\u8986\u76d6\u4e86\uff08OR\u53f6\u5b50\u8282\u70b9\uff09\u3002\u7136\u540e\uff0c\u5728\u8fd9\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u5efa\u7acb\u4fe1\u53f7\u5854\uff0c\u5e76\u4e14\u8986\u76d6\u76f8\u90bb\u7684\u8282\u70b9\u3002\u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c\u3002\n\n\u6211\u770b\u5230\u697c\u4e0b\u6709\u4e00\u4f4d\u5199\u8d2a\u5fc3\u7684\u5de8\u4f5b\u8bf4\u8981\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u6df1\u5ea6\u6700\u5927\u4e14\u6ca1\u6709\u88ab\u8986\u76d6\u7684\u8282\u70b9\uff0c\u5176\u5b9e\u4e0d\u9700\u8981\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5728\u5efa\u6811\u65f6\uff0c\u5f53\u56de\u6eaf\u4e0a\u6765\u4ee5\u540e\uff08OR\u5f53\u524d\u70b9\u662f\u53f6\u5b50\u8282\u70b9\u65f6\uff09\u5224\u65ad\u8be5\u70b9\u662f\u5426\u88ab\u8986\u76d6\u8fc7\uff0c\u82e5\u6ca1\u6709\u5219\u8986\u76d6\u5176\u7236\u4eb2\u548c\u7236\u4eb2\u7684\u76f8\u90bb\u8282\u70b9\u3002\u663e\u7136\uff0c\u5f53\u56de\u6eaf\u5230\u5f53\u524d\u8282\u70b9\u65f6\uff0c\u5176\u5b50\u6811\u5df2\u7ecf\u88ab\u5b8c\u5168\u8986\u76d6\u3002\n\n\u7136\u540e\u63a8\u8350\u4e00\u9053\u601d\u8def\u7c7b\u4f3c\u7684\u9898\u76ee\uff1a\n\n[P2279 [HNOI2003]\u6d88\u9632\u5c40\u7684\u8bbe\u7acb](https://www.luogu.org/problemnew/show/P2279)\n\n\u4e0b\u9762\u8d34\u7a0b\u5e8f~~\uff08Ugly\uff09~~\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint n;\nvector<int> path[10003];\ninline void init() {\n    scanf(\"%d\",&n);\n    for (register int i=1;i<n;++i) {\n        int u,v;\n        scanf(\"%d %d\",&u,&v);\n        path[u].push_back(v);\n        path[v].push_back(u);\n    }\n    return;\n}\n\nint dep[10003],grand[10003];\nint ans=0;\nint vis[10003];\ninline void build(int root) {\n    for (register int i=0;i<path[root].size();++i) {\n        int son=path[root][i];\n        if (dep[son]>0) continue;\n        dep[son]=dep[root]+1,grand[son]=root;\n        build(son);\n    }\n    if (!vis[root]) {\n        ++ans;\n        int pos=grand[root];\n        vis[pos]=1;\n        for (register int i=0;i<path[pos].size();++i) \n            vis[path[pos][i]]=1;\n    }\n    return;\n}\n\nint main() {\n    init();\n    memset(dep,0,sizeof(dep));\n    dep[1]=1; grand[1]=1;\n    build(1);\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1534140941,
        "uid": 72520,
        "name": "\u5170\u4ead\u6155\u96e8",
        "ccfLevel": 0,
        "title": "P2899  \u89e3\u9898\u62a5\u544a  By Dean"
    },
    {
        "content": "\u5176\u4ed6\u9898\u89e3\u53ea\u7ed9\u4e86\u8f6c\u79fb\u65b9\u7a0b\u800c\u6ca1\u6709\u7ed9\u6e05\u695a\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\u7684 \u6211\u5728\u8fd9\u5c31\u7b80\u8981\u7684\u5206\u4eab\u4e00\u4e0b\u81ea\u5df1\u7684\u60f3\u6cd5\u5427\n\n### \u9996\u5148\u8fd9\u662f\u4e00\u68f5\u6811\n\n\u6211\u4eec\u5b9a\u4e49 \u4e09\u79cd\u72b6\u6001\uff1a\n\n```cpp\n0.\u6211\u81ea\u5df1\u4e0d\u9009\uff0c\u6211\u6709\u513f\u5b50\u9009\n\n1.\u6211\u81ea\u5df1\u4e0d\u9009\uff0c\u6211\u7236\u4eb2\u9009\n\n2.\u6211\u81ea\u5df1\u9009\n```\n\n0\u72b6\u6001\u9700\u8981\u5efa\u7acb\u53cd\u6094\u673a\u5236\uff0c\u56e0\u4e3a\u6211\u53ea\u9700\u8981\u4e00\u4e2a\u513f\u5b50\u9009\uff0c\n\n\u5148\u63a8\u5bfc dp[x][0]=min(dp[v][0],dp[v][2]); \u6ce8\u610f\uff1a\u56e0\u4e3a\u5f53\u524d\u8282\u70b9\u662f\u4e0d\u9009\u7684\uff0c\u6240\u4ee5\u4ed6\u513f\u5b50\u662f\u7236\u4eb2\u9009\u62e9\u7684\u72b6\u6001\u4e0d\u5e94\u8be5\u5217\u5165\u8003\u6838\u8303\u56f4\u5185\u3002\n\n\u8fd9\u4e2a\u5f0f\u5b50\u63a8\u51fa\u6765\u540e\u53ef\u80fd\u7167\u6210\u7684\u7ed3\u679c\u662f\u513f\u5b50\u90fd\u6ca1\u9009 ~~\u90a3\u6211\u4e0d\u5c31\u51c9\u4e86~~ \u5efa\u7acb\u53cd\u6094\uff0c\n\nt=min(t,dp[v][2]-min(dp[v][0],dp[v][2])) \u4fdd\u8bc1\u4e00\u5b9a\u6709\u4e00\u4e2a\u662f\u513f\u5b50\u9009\u4e86\u7684\uff0c\u800c\u4e14\u5982\u679c\u4e0d\u672c\u8eab\u5c31\u6709\u513f\u5b50\u5df2\u7ecf\u9009\u4e86\u7684\u72b6\u6001t\u4f1a\u4e3a0\n\n\n1\u72b6\u6001\u662f\u4e0d\u9009 \u6240\u4ee5\u4e0d\u80fd\u63a5\u53d7\u513f\u5b50\u5bf9\u4ed6\u7684\u4f9d\u8d56 \u6240\u4ee5 dp[x][1]+=min(dp[v][0],dp[v][2])\n\n\n2\u72b6\u6001\u5462\u662f\u81ea\u5df1\u8981\u9009 \u513f\u5b50\u600e\u6837\u90fd\u53ef\u4ee5 dp[x][2]+=min(dp[v][0],min(dp[v][1],dp[v][2]))\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u6109\u5feb\u7684\u5199\u4ee3\u7801\u4e86\n\n\u53ef\u80fd~~\u6211~~\u5927\u5bb6\u4f1a\u6709\u4e00\u4e2a\u7591\u95ee \u5982\u679c\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u4e0d\u5c31\u4e0d\u80fd\u4ea7\u751f\u513f\u5b50\u9009\u7684\u72b6\u6001\u4e86\u5417\uff1f\uff1f\n\n\u6211\u4eec\u5efa\u7acb\u7684\u53cd\u6094\u673a\u5236\u5728\u8fdb\u5165\u65f6\u7ed9\u7684\u662f\u6781\u5927\u503c\uff0c\u6700\u540e\u4f1a\u52a0\u4e0a\u53bb\uff0c\u5982\u679c\u672c\u8eab\u5c31\u5f88\u5927\uff0c\u6ca1\u6709\u66f4\u65b0\u5c31\u52a0\u4e0a\u53bb\u4e86 \u80af\u5b9a\u4e0d\u4f1a\u6709\u70b9\u9009\u7684\n\n```cpp\n#include<iostream>\n#include<stdio.h>\n#include<algorithm>\n#include<string.h>\n#include<queue>\n#include<stack>\n#include<cmath>\n#define LL long long\nusing namespace std;\ninline void read(int &x){\n\tx=0;int f=1;char c=getchar();\n\twhile(c>'9'||c<'0'){if(c=='-') f=-1;c=getchar();\t}\n\twhile(c>='0'&&c<='9') x=(x<<1)+(x<<3)+(c^48),c=getchar();\n\tx*=f;\n}\nstruct node{\n\tint v,nxt;\n}e[10010<<1];\nint head[10010],tot;\ninline void add(int x,int y)\n{\n\ttot++;\n\te[tot].v = y;\n\te[tot].nxt = head[x];\n\thead[x] = tot;\n}\nint dp[10010][3];//0\u4e0d\u9009 \u513f\u5b50\u9009  1\u4e0d\u9009 \u7236\u4eb2\u9009 2\u81ea\u5df1\u9009 \ninline void dfs(int x,int fa)\n{\n\tdp[x][0]=0;\n\tdp[x][1]=0;\n\tdp[x][2]=1;\n\tint t=99999999;\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint v = e[i].v;\n\t\tif(v == fa) continue;\n\t\tdfs(v,x);\n\t\tdp[x][0]+=min(dp[v][0],dp[v][2]);\n\t\tt=min(t,dp[v][2]-min(dp[v][0],dp[v][2]));\n\t\tdp[x][1]+=min(dp[v][0],dp[v][2]);//\u7236\u4eb2\u9009 \u513f\u5b50\u4e0d\u662f\u7236\u4eb2\u9009\u968f\u4fbf \n\t\tdp[x][2]+=min(dp[v][0],min(dp[v][1],dp[v][2]));//\u6211\u9009 \n\t}\n\tdp[x][0]+=t;\n} \nint n,m,a,b;\nint main()  \n{     \n    read(n);\n    for(int i=1;i<n;i++)\n        read(a),read(b),add(a,b),add(b,a);\n    dfs(1,0);\n    printf(\"%d\",min(dp[1][0],dp[1][2]));\n    return 0;\n}  \n```\n",
        "postTime": 1564300854,
        "uid": 114556,
        "name": "SimonSu",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "\u672c\u9898\u7684\u57fa\u672c\u601d\u8def\u662f\u8d2a\u5fc3\u548c\u56fe\u8bba\u3002\n\n\u770b\u5230\u6709\u7684\u5927\u4f6c\u8fd8\u5199\u4e86\u56de\u6eaf\uff0c\u6b63\u513f\u516b\u7ecf\u5730\u5f53\u68f5\u6811\u6765\u5904\u7406\uff0c\u6211~~\u4e71\u4e03\u516b\u7cdf~~\u5199\u4e86\u4e00\u4e2a\u4ee3\u7801\u4e5f\u6ca1\u8003\u8651\u56de\u6eaf\u4ec0\u4e48\u7684\u5c31\u8fc7\u4e86\u3002\n\n\u9996\u5148\u89c2\u5bdf\u9898\u610f\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u8fd9\u9053\u9898\u7ed9\u51fa\u7684\u662f\u4e00\u68f5\u6811\u3002\u5bf9\u4e8e\u4e00\u68f5\u6811\u800c\u8a00\uff0c\u5b83\u7684\u53f6\u5b50\u7ed3\u70b9\u5982\u679c\u60f3\u8981\u6709\u4fe1\u53f7\u7684\u8bdd\uff0c\u5fc5\u987b\u5728\u5b83\u81ea\u5df1\u6216\u8005\u5b83\u7684\u7236\u4eb2\u90a3\u91cc\u6709\u4e00\u5ea7\u4fe1\u53f7\u5854\uff0c\u800c\u663e\u7136\u5728\u4ed6\u7236\u4eb2\u90a3\u91cc\u5efa\u4e00\u5ea7\u4fe1\u53f7\u5854\u8981\u66f4\u4f18\u4e00\u4e9b\n\u3002\n\n\uff08\u56e0\u4e3a\u5982\u679c\u5efa\u5728\u8fd9\u4e2a\u53f6\u5b50\u7ed3\u70b9\u81ea\u8eab\u7684\u8bdd\uff0c\u53ea\u80fd\u4f7f\u8fd9\u4e2a\u7ed3\u70b9\u548c\u5b83\u7684\u7236\u4eb2\n\u6709\u4fe1\u53f7\uff0c\u800c\u5982\u679c\u5efa\u5728\u5b83\u7684\u7236\u4eb2\u90a3\u91cc\uff0c\u5219\u4f1a\u4f7f\u53f6\u5b50\u7ed3\u70b9\u3001\u5b83\u7684\u7236\u4eb2\u3001\u5b83\n\u7684\u5144\u5f1f\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3001\u5b83\u7684\u7956\u7236\u90fd\u4f1a\u6709\u4fe1\u53f7\uff09\n\n\u7136\u540e\u6211\u4eec\u628a\u8fd9\u4e2a\u53f6\u5b50\u7ed3\u70b9\u5220\u53bb\u3002\u800c\u5bf9\u4e8e\u5df2\u7ecf\u6709\u4fe1\u53f7\u7684\u53f6\u5b50\u7ed3\u70b9\u800c\u8a00\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u628a\u5b83\u5220\u53bb\u4e86\u3002\u8fd9\u6837\uff0c\u4e0d\u65ad\u5730\u5220\u53bb\u6709\u4fe1\u53f7\u7684\u53f6\u5b50\u7ed3\u70b9\uff0c\u6700\u540e\u5c31\u5220\u5b8c\u4e86\uff0c\u8f93\u51fa\u7b54\u6848\u3002\n\n\u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\uff0c\u5f53\u53ea\u5269\u4e0b\u4e24\u4e2a\u76f4\u63a5\u76f8\u8fde\u7684\u7ed3\u70b9\u65f6\uff0c\u5982\u679c\u76f4\u63a5\u5220\u53bb\u5176\u4e2d\u4e00\u4e2a\u5df2\u7ecf\u6709\u4fe1\u53f7\u7684\u70b9\uff0c\u4f1a\u9020\u6210\u6f0f\u6389\u4e00\u5ea7\u5854\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u5e94\u5f53\u6700\u540e\u518d\u904d\u5386\u4e00\u904d\uff0c\u5982\u679c\u6709\u6ca1\u6709\u4fe1\u53f7\u7684\u70b9\uff0c\u5c31\u518d\u52a0\u4e00\u5ea7\u5854\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,du[10001],q[66666],hd,tl,ans;//du[]\u8bb0\u5f55\u4e0e\u67d0\u4e2a\u70b9\u76f8\u8fde\u7684\u8fb9\u6570\uff0c\u5982\u679c\u4e3a1\u5219\u8be5\u70b9\u4e3a\u53f6\u5b50\nint nex[20001],fir[10001],poi[20001],sum;\nbool v[20001],u[20001]; //u[]\u6570\u7ec4\u8bb0\u5f55\u67d0\u4e2a\u70b9\u662f\u5426\u6709\u4fe1\u53f7\ninline void draw(int a,int b)\n{\n\tnex[++sum]=fir[a];\n\tpoi[sum]=b;\n\tfir[a]=sum;\n}\nvoid re(int &num)\n{\n\tchar c;\n\tnum=0;\n\twhile((c=getchar())<'0'||c>'9');\n\tnum=c-'0';\n\twhile((c=getchar())>='0'&&c<='9') num=num*10+c-'0';\n}\nvoid search(int x)//\u6838\u5fc3\u641c\u7d22\u51fd\u6570\n{\n\thd=tl=0;\n\tq[++tl]=x;\n\tv[x]=1;\n\twhile(hd<tl)\n\t{\n\t\tint now=q[++hd];\n\t\tfor(int i=fir[now]; i; i=nex[i])\n\t\t{\n\t\t\tint p=poi[i];\n\t\t\tif(!v[p])\n\t\t\t{\n\t\t\t\tdu[now]--;\n\t\t\t\tdu[p]--;//\u5220\u53bb\u8be5\u70b9\uff0c\u5373\u5220\u53bb\u8be5\u70b9\u7684\u51fa\u8fb9\u4e0e\u8be5\u70b9\u7684\u7236\u4eb2\u7684\u5165\u8fb9\n\t\t\t\tif(du[p]==1)//\u5982\u679c\u8be5\u70b9\u53d8\u4e3a\u53f6\u5b50\uff0c\u5165\u961f\n\t\t\t\t{\n\t\t\t\t\tq[++tl]=p;\n\t\t\t\t\tv[p]=1;\n\t\t\t\t}\n\t\t\t\tif(u[now]) continue;//\u82e5\u8be5\u70b9\u6709\u4fe1\u53f7\uff0c\u5219\u8df3\u8fc7\u5efa\u5854\u8fc7\u7a0b\n\t\t\t\tans++;\n\t\t\t\tu[p]=1;\n\t\t\t\tfor(int j=fir[p]; j; j=nex[j]) //\u5efa\u5854\n\t\t\t\t{\n\t\t\t\t\tint k=poi[j];\n\t\t\t\t\tif(!u[k]) u[k]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\nint main()\n{\n\tint a,b;\n\tscanf(\"%d\",&n);\n\tfor(register int i=1; i<n; i++)\n\t{\n\t\tre(a);re(b);\n\t\tdu[a]++;du[b]++;\n\t\tdraw(a,b);draw(b,a);\n\t}\n\tfor(register int i=1; i<=n; i++)\n\tif(du[i]==1) search(i);         //\u662f\u53f6\u5b50\u8282\u70b9\u7684\u8bdd\u5c31\u904d\u5386\n\tfor(register int i=1; i<=n; i++) //\u904d\u5386\u67e5\u770b\u662f\u5426\u6709\u6f0f\u6389\u7684\u70b9\n\t\tif(!u[i]) ans++;\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1553865430,
        "uid": 88329,
        "name": "Orzalpha",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "# \u603b\u7ed3\uff1a\u6811\u5f62dp\n## dp[u][0] \u88ab\u81ea\u5df1\u5b88\n## dp[u][1] \u88ab\u7236\u4eb2\u5b88\n## dp[u][2] \u88ab\u513f\u5b50\u5b88\n\n\n------------\n\n### dp[u][0] += min(dp[v][1], min(dp[v][0], dp[v][2]));//\u513f\u5b50\u4e09\u79cd\u60c5\u51b5\u90fd\u53ef\u4ee5\n\n### dp[u][1] += min(dp[v][0], dp[v][2]);//\u513f\u5b50\u53ea\u6709\u8fd9\u4e24\u79cd\u60c5\u51b5\n\n### for(\u679a\u4e3ev)//\u679a\u4e3e\u88ab\u54ea\u4e2a\u513f\u5b50\u5b88,\u5229\u7528\u5df2\u7ecf\u8ba1\u7b97\u597d\u7684dp[u][1]\n\n### dp[u][2] = min(dp[u][2], dp[u][1] - min(dp[v][0], dp[v][2]) + dp[v][0]);\n\n \n\n### \u521d\u59cb\u5316dp[u][0] = val[u], dp[u][2] = inf;\n```cpp\n#include<bits/stdc++.h>\n \nusing namespace std;\nconst int maxn = 300005;\n \nint n, head[maxn], cnt = 1;\n \n#define inf 10000007\nint dp[maxn][3], val[maxn];\nstruct Node{\n    int v, nxt;\n} G[maxn];\n \nvoid insert(int u, int v) {\n    G[cnt] = (Node) {v, head[u]}; head[u] = cnt++;\n} int in[maxn];\n/*\ndp[u][0] \u88ab\u81ea\u5df1\u5b88\ndp[u][1] \u88ab\u7236\u4eb2\u5b88\ndp[u][2] \u88ab\u513f\u5b50\u5b88\n*/\nvoid DP(int x, int fa) {\n    dp[x][0] = 1; dp[x][2] = inf;\n    for (int i = head[x]; i; i = G[i].nxt) {\n        int v = G[i].v; if(v == fa) continue;\n        DP(v, x); dp[x][0] += min(dp[v][1], min(dp[v][0], dp[v][2]));\n        dp[x][1] += min(dp[v][0], dp[v][2]);\n    }\n    for (int i = head[x]; i; i = G[i].nxt) {\n        int v = G[i].v; if(v == fa) continue;\n        dp[x][2] = min(dp[x][2], dp[x][1] - min(dp[v][0], dp[v][2]) + dp[v][0]);\n    }\n}\n \nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n - 1; ++i) {\n        int x; scanf(\"%d\", &x);\n            int y; scanf(\"%d\", &y);\n            insert(x, y); insert(y, x);\n    }\n    DP(1, -1);\n    printf(\"%d\\n\", min(dp[1][0], dp[1][2]));\n    return 0;\n}\n```",
        "postTime": 1528271934,
        "uid": 62054,
        "name": "JACKLOVEONE",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "\u672c\u9898\u6b63\u89e3\u6811\u5f62dp\n\n\u4f46\u662fdp\u662f\u4e0d\u53ef\u80fddp\u7684\uff0c\u8fd9\u8f88\u5b50\u90fd\u4e0d\u53ef\u80fddp\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u8d2a\u5fc3\u505a\u6cd5\n\n\u6ce8\u610f\u5230\u6bcf\u4e2a\u70b9\u90fd\u8981\u88ab\u9009\u5230\uff0c\u800c\u4e14\u88ab\u9009\u5230\u7684\u65b9\u6cd5\u53ea\u6709\u81ea\u5df1\u88ab\u9009\u8d70\u6216\u8005\u76f8\u90bb\u7684\u70b9\u88ab\u9009\u8d70\uff0c\u800c\u4e14\u8fd9\u662f\u4e00\u68f5\u6811\n\n\u6240\u4ee5\u6211\u4eec\u5148\u8003\u8651\u4e00\u4e0b\u5728\u6811\u4e2d\u6df1\u5ea6\u6700\u5927\u7684\u8282\u70b9\uff0c\u663e\u7136\u9009\u5b83\u7684\u7236\u4eb2\u66f4\u5212\u7b97\n\n\u6240\u4ee5\u9009\u8d70\u5b83\u7684\u7236\u4eb2\uff0c\u5e76\u5c06\u76f8\u90bb\u7684\u70b9\u5168\u90e8\u6254\u6389\n\n\u4e8e\u662f\u53d1\u73b0\u5bf9\u65b0\u7684\u6811\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u505a\u7136\u540e\u641e\u6210\u4e00\u4e2a\u66f4\u5c0f\u7684\u6811\u76f4\u5230\u6574\u68f5\u6811\u6ca1\u4e86\uff08\u540c\u7406\u5927\u6cd5\u597d\uff09\n\n\u4f46\u662f\u4f60\u5982\u679c\u66b4\u529b\u53bb\u641e\u7684\u8bdd\u4f1a$n^2$\uff0c\u6240\u4ee5\u8003\u8651\u62ff\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e00\u4e0b\n\n\u56e0\u4e3a\u6bcf\u6b21\u90fd\u8981\u9009\u6df1\u5ea6\u6700\u5927\u7684\u70b9\uff0c\u6240\u4ee5\u7528\u5927\u6839\u5806\u6765\u7ef4\u62a4\u6df1\u5ea6\u5c31\u597d\n\n\u8fd9\u6837\u5c31\u80fd$nlogn$\u7ef4\u62a4\n\n\u81f3\u4e8e\u600e\u4e48\u4e22\u6389\u8fd9\u4e9b\u76f8\u90bb\u8282\u70b9\uff0c\u5f00\u4e00\u4e2avis\u6570\u7ec4\u6765\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u6570\u6709\u6ca1\u6709\u88ab\u4e22\u6389\uff0c\u6bcf\u6b21\u4ece\u5806\u4e2dpop\u51fa\u5806\u9876\u7684\u65f6\u5019\u5224\u4e00\u4e0b\u5b83\u6709\u6ca1\u6709\u88ab\u4e22\u6389\u5c31\u597d\n\n\u6b63\u786e\u6027\uff1f~~\uff08\u7559\u7ed9\u8bfb\u8005\u601d\u8003\uff09~~\n\n~~\uff08\u6211\u4e3e\u4e0d\u51fa\u53cd\u4f8b\uff0c\u6240\u4ee5\u5047\u5b9a\u5b83\u662f\u6b63\u786e\u7684\uff0c\u7136\u540e\u4e5f\u786e\u5b9e\u80fd\u8fc7\uff0c\u4e0d\u8fc7\u5982\u679c\u54ea\u4f4d\u5927\u7237\u80fd\u63a8\u7ffb\u6211\u8fd9\u4e2a\u8d2a\u5fc3\u7684\u8bdd\u5c31\u8ddf\u6211\u8bf4\u4e00\u4e0b\u5457\uff0c\u8ba9\u6211\u6da8\u4e00\u4e0b\u59ff\u52bf\uff09~~\n\n\n```\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <queue>\n#include <algorithm>\n#define ll long long\n#define inf 1<<30\n#define il inline \n#define in1(a) read(a)\n#define in2(a,b) in1(a),in1(b)\n#define in3(a,b,c) in2(a,b),in1(c)\n#define in4(a,b,c,d) in2(a,b),in2(c,d)\nil void readl(ll &x){\n    x=0;ll f=1;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')f=-f;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n    x*=f;\n}\nil void read(int &x){\n    x=0;int f=1;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')f=-f;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n    x*=f;\n}\nusing namespace std;\n/*===================Header Template=====================*/\n#define N 100010\nstruct edge{int to,next;}e[N<<2];\nstruct node{\n    int dep,id,f;\n    bool operator < (const node &x) const {\n        return dep<x.dep;\n    }\n}a[N<<1];\nint n,cnt=0,head[N<<2];\nvoid ins(int u,int v){\n    e[++cnt].to=v;e[cnt].next=head[u];head[u]=cnt;\n}\nbool vis[N];\nvoid dfs(int x,int f,int dep){\n    a[x].dep=dep;\n    a[x].f=f;\n    a[x].id=x;\n    for(int i=head[x];i;i=e[i].next)\n        if(e[i].to!=f)\n            dfs(e[i].to,x,dep+1);\n}\npriority_queue<node>q;\nint main(){\n    in1(n);\n    for(int i=1;i<n;i++){\n        int u,v;\n        in2(u,v);\n        ins(u,v);ins(v,u);\n    }\n    dfs(1,1,1);\n    for(int i=1;i<=n;i++)q.push(a[i]);\n    int ans=0;\n    while(!q.empty()){\n        node t=q.top();q.pop();\n        if(vis[t.id])continue;\n        vis[t.id]=1;\n        vis[t.f]=1;\n        ans++;\n        for(int i=head[t.f];i;i=e[i].next){\n            int v=e[i].to;\n            if(!vis[v])vis[v]=1;\n        }\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n ",
        "postTime": 1533439076,
        "uid": 36526,
        "name": "henry_y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "**\u6811\u5f62DP**\n\n\u53ef\u77e5\u4e00\u4e2a\u70b9\u88ab\u63a7\u5236\u6709\u4e14\u4ec5\u6709\u4e00\u4e0b\u4e09\u79cd\u60c5\u51b5\uff1a\n\n**1\u3001\u88ab\u7236\u4eb2\u8282\u70b9\u4e0a\u7684\u4fe1\u53f7\u5854\u63a7\u5236**\n\n**2\u3001\u88ab\u513f\u5b50\u8282\u70b9\u4e0a\u7684\u4fe1\u53f7\u5854\u63a7\u5236**\n\n**3\u3001\u88ab\u5f53\u524d\u8282\u70b9\u4e0a\u7684\u4fe1\u53f7\u5854\u63a7\u5236**\n\n\u6211\u4eec\u8bbedp[u][0/1/2]\u8868\u793au\u8282\u70b9\u6240\u5728\u5b50\u6811\u4e2d\u5168\u90e8\u88ab\u4fe1\u53f7\u6240\u9700\u7684\u6700\u5c0f\u5854\u6570\u3002(u\u4e3a\u7236\u4eb2\uff0cv\u4e3a\u513f\u5b50\uff09\n\ndp[u][0]\u8868\u793a\u8be5\u70b9\u6ca1\u6709\u4fe1\u53f7\uff08\u5c31\u662f\u7236\u4eb2\u6709\u5854\uff09;\ndp[u][1]\u8868\u793a\u8be5\u70b9\u6709\u5854;\ndp[u][2]\u8868\u793a\u8be5\u70b9\u88ab\u95f4\u63a5\u4fe1\u53f7\u3002\n\n\u663e\u7136\uff0cdp[u][0]\u53ef\u4ee5\u627f\u63a5dp[v][2]\u7684\u503c\uff08\u56e0\u81ea\u5df1\u65e0\u4fe1\u53f7,\u6240\u4ee5\u513f\u5b50\u65e0\u5854\uff09\n\ndp[u][1]\u53ef\u627f\u63a5dp[v][0/1/2]\u7684\u503c\uff08\u56e0\u4e0d\u786e\u5b9a\u513f\u5b50\u662f\u5426\u6709\u5854\u3001\u6709\u4fe1\u53f7\uff09\n\n**\u96be\u70b9**\u5176\u5b9e\u5728dp[u][2] 2\u60c5\u51b5,\u56e0\u4e3a\u8981\u6210\u7acb2\u53ea\u8981\u6c42\u4efb\u610f\u4e00\u4e2a\u513f\u5b50\u6709\u5854\uff08\u60c5\u51b51\u513f\u5b50\uff09\u5373\u53ef\n\n\u800c\u6bcf\u4e2a\u513f\u5b50\u6b64\u65f6\u67091,2\u4e24\u79cd\u60c5\u51b5\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5148\u5047\u8bbe\u6bcf\u4e2a\u513f\u5b50\u90fd\u6709\u5854\n\n\u7136\u540e\u6839\u636e\u201c\u513f\u5b50\u65e0\u5854\u662f\u5426\u4f7f\u7ed3\u679c\u66f4\u5c0f\u201d\u8fd9\u4e00\u539f\u7406,\u5c06 \u65e0\u5854\u80fd\u4f7f\u7ed3\u679c\u66f4\u5c0f\u7684 \u60c5\u51b51\u513f\u5b50 \u66ff\u6362\u4e3a \u60c5\u51b52\u513f\u5b50\n\n**\u5b9e\u73b0\u65b9\u5f0f\uff1a**\n\n**step 1\uff1a**\u7ed9f[u][2]\u52a0\u4e0a\u6240\u6709\u7684f[v][1]\u503c\uff08\u5047\u8bbe\u6bcf\u4e2a\u513f\u5b50\u6709\u5854\uff09\n\n**step 2**:\u7528son\u6570\u7ec4\u5b58\u4e0bf[v][2]-f[v][1],\u8fd9\u4e2a\u503c\u4e3a\u8d1f\u5c31\u8bf4\u660e\u5c06\u8be5\u60c5\u51b51\u513f\u5b50\u66ff\u6362\u4e3a\u60c5\u51b52\u513f\u5b50\u6709\u5229,\u8d1f\u503c\u8d8a\u5927\u5c31\u8d8a\u6709\u5229,\u8d8a\u5e94\u4f18\u5148\u66ff\u6362\uff08\u5373f[v][2]\u5c0f\u4e8ef[v][1],\u80fd\u4f7f\u7ed3\u679c\u66f4\u5c0f\uff09\n\n**step 3**:\u7ed9son\u6392\u5e8f,\u8d8a\u6709\u5229\u8d8a\u9760\u524d\n\n**step 4**:\u5728 \u66ff\u6362\u6709\u5229\uff08son[i]<0) \u4e14 \u4e00\u4e2a\u513f\u5b50\u6709\u5854(cnt-1)\u7684\u524d\u63d0\u4e0b,\u5b9e\u73b0\u66ff\u6362\n\n\u8fd8\u662f\u5f88\u8003\u9a8c\u601d\u7ef4\u7684\uff0c\u63a8\u8350\u5927\u5bb6\u770b\u5b8c\u540e\u81ea\u5df1\u518d\u628aDP\u5f0f\u63a8\u4e00\u904d\uff0c\u7136\u540e\u770b\u770b[SDOI2006]\u4fdd\u5b89\u7ad9\u5c97\uff08\u53ea\u662f\u52a0\u4e86\u4e2a\u6743\u503c\u800c\u5df2\uff09\u3002\n\n```\n#include<iostream>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#define ll long long\n#define re register\n#define il inline\n#define fp(i,a,b) for(re int i=a;i<=b;i++)\n#define fq(i,a,b) for(re int i=a;i>=b;i--)\nusing namespace std;\nconst int N=100005;\nint n,m,h[N]={},w[N]={},in[N]={},out[N]={},root,id,u,v,cnt,ans=0;\nll f[N][3]={};//0\u8868\u793a\u6ca1\u6709\u4fe1\u53f7\uff08\u5c31\u662f\u7236\u4eb2\u6709\u5854\uff09,1\u8868\u793a\u6709\u5854,2\u8868\u793a\u88ab\u95f4\u63a5\u4fe1\u53f7,dp\u503c\u4fdd\u8bc1\u8fd9\u4e2a\u5b50\u6811\u4e2d\u9664\u6839\u8282\u70b9\u5916\u4e00\u5b9a\u4f1a\u88ab\u4fe1\u53f7\nstruct Edge\n{\n  int to,next;\n}e[N<<1];\nil void add(re int u,re int v)\n{\n  e[++cnt]=(Edge){v,h[u]};h[u]=cnt;\n}\nil int gi()\n{\n    re int x=0;\n    re int t=1;\n    re char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-') ch=getchar();\n    if(ch=='-') t=-1,ch=getchar();\n    while(ch>='0'&&ch<='9') x=x*10+ch-48,ch=getchar();\n    return x*t;\n}\nil void dfs(re int u,re int fa)\n{\n  f[u][1]=1;\n  re int son[1005]={},cnt=0;\n  for(re int i=h[u];i+1;i=e[i].next)\n    {\n      re int v=e[i].to;\n      if(v==fa) continue;\n      dfs(v,u);\n      f[u][0]+=f[v][2];\n      f[u][1]+=min(f[v][0],min(f[v][1],f[v][2]));\n      f[u][2]+=f[v][1];\n      son[++cnt]=f[v][2]-f[v][1];\n   }\n  if(!cnt) f[u][2]=1e9;//\u6ca1\u513f\u5b50\u5c31\u522b\u8c08\u88ab\u513f\u5b50\u4fe1\u53f7\u4e86\n  sort(son+1,son+1+cnt);\n  fp(i,1,cnt-1)\n    if(son[i]<0) f[u][2]+=son[i];//step 4:\u5728 \u66ff\u6362\u6709\u5229\uff08son[i]<0) \u4e14 \u4e00\u4e2a\u513f\u5b50\u6709\u5854(cnt-1)\u7684\u524d\u63d0\u4e0b,\u5b9e\u73b0\u66ff\u6362\n    else break;\n}\nint main()\n{\n  memset(h,-1,sizeof(h));\n  n=gi();\n  fp(i,1,n-1) u=gi(),v=gi(),add(u,v),add(v,u);\n  dfs(1,0);\n  printf(\"%lld\\n\",min(f[1][1],f[1][2]));//\u6ca1\u6709f[1][0],\u56e0\u4e3a\u6839\u8282\u70b9\u65e0\u7236\u4eb2\n  return 0;\n}\n\n\n```",
        "postTime": 1517795649,
        "uid": 21534,
        "name": "ysner",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "## \u6742\u8a00\uff1a\n\n\u8fd9\u4e2a\u9898\u5f88\u660e\u663e\u53ef\u4ee5\u7528\u6811\u5f62dp\uff0c\u8ddf [P2016\u6218\u7565\u6e38\u620f](https://www.luogu.org/problemnew/show/P2016) \n\u6709\u70b9\u50cf\uff0c\u4e0d\u8fc7\u8fd9\u4e24\u4e2a\u9898\u662f\u4e0d\u540c\u7684\uff0cP2016\u7684\u9898\u662f\u9700\u8981\u5168\u90e8\u8fb9\u88ab\u5360\uff0c\u5305\u542b\u5168\u90e8\u70b9\u88ab\u5360\u7684\u60c5\u51b5\uff0c\u800c\u8fd9\u4e2a\u9898\u5e76\u4e0d\u4e00\u5b9a\u6240\u6709\u8fb9\u90fd\u4f1a\u88ab\u5360\u3002\n\n\u8fd9\u4e2a\u9898\u8ddf\u53e6\u4e00\u4e2a\u6811\u5f62dp [UVA1218 \u5b8c\u7f8e\u670d\u52a1](https://www.luogu.org/problemnew/show/UVA1218) \n\u4e5f\u6709\u70b9\u50cf\uff0c\u4e0d\u8fc7\u672c\u9898\u6bd4\u5b8c\u7f8e\u670d\u52a1\u7684\u9898\u8981\u9ebb\u70e6\u4e00\u70b9\u3002\uff08\u5b8c\u7f8e\u670d\u52a1\u7684\u9898\u53ef\u4ee5\u53c2\u8003\u5218\u6c5d\u4f73\u7684\u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178\u300b\uff08\u7d2b\u4e66\uff09\uff0c\u4f1a\u53d1\u73b0\u8fd9\u4e24\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u51fa\u4e00\u8f99\uff0c\u5f53\u7136\u4e0d\u5b8c\u5168\u76f8\u540c\uff09\n\n===============\u5206\u754c\u7ebf=============\n\n## \u5177\u4f53\u9898\u89e3:\n\n\u65e2\u7136\u662f\u7528\u52a8\u6001\u89c4\u5212\u4e86\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5b9a\u4e49\u72b6\u6001\uff0c\u5f53\u7136\u72b6\u6001\u4e0d\u4e00\u5b9a\u662f\u552f\u4e00\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u591a\u4e2a\u6570\u7ec4\u3002\u65e2\u7136\u662f\u6811\u5f62dp\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u56de\u6eaf\u7684\u65b9\u5f0f\u4ece\u5b50\u8282\u70b9\u63a8\u51fa\u5176\u7236\u8282\u70b9\uff0c\u5373\u6bcf\u4e2a\u8282\u70b9\u7684\u72b6\u6001\u662f\u7531\u5b50\u8282\u70b9\u8f6c\u79fb\u6765\uff0c\u90a3\u4e48\u72b6\u6001\u8f6c\u79fb\u7684\u65f6\u5019\u5c31\u9700\u8981\u4ece\u5b50\u8282\u70b9\u7684\u89c6\u89d2\u8003\u8651\u3002\n\n\u6211\u4eec\u5b9a\u4e49\uff1a\n\n### dp[u][0]\u4e3a u\u4e00\u5b9a\u4e3a\u4fe1\u53f7\u5854\uff0c\u90a3\u4e48\u4ed6\u7684\u513f\u5b50\u548c\u7236\u4eb2\u6709\u53ef\u80fd\u662f\u4fe1\u53f7\u5854\n\n### dp[u][1]\u4e3a u\u4e0d\u662f\u4fe1\u53f7\u5854\uff0cu\u7236\u4eb2\u4e00\u5b9a\u662f\u4fe1\u53f7\u5854\uff0c\u513f\u5b50\u6709\u53ef\u80fd\u662f\u4fe1\u53f7\u5854\n\n### dp[u][2]\u4e3a u\u4e0d\u662f\u4fe1\u53f7\u5854\uff0c\u4ed6\u513f\u5b50\u81f3\u5c11\u6709\u4e00\u4e2a\u662f\u4fe1\u53f7\u5854\uff0c\u7236\u4eb2\u6709\u53ef\u80fd\u662f\u4fe1\u53f7\u5854\n\n\u90a3\u4e48\u6211\u4eec\u4eceu\u7684\u5b50\u8282\u70b9v\u6765\u5206\u6790\uff1a\n\n 0:v\u7684\u7236\u4eb2\u662f\u4fe1\u53f7\u5854\uff0cv\u4ee5\u53cav\u7684\u513f\u5b50\u6709\u53ef\u80fd\u662f\u4fe1\u53f7\u5854\uff0c\u90a3\u4e48dp[u][0]\u7531dp[v][0~2]\u63a8\u51fa\u6765\uff0c\u53d6\u6700\u5c0f\u503c\u3002\n\n 1:v\u7684\u7236\u4eb2\u4e0d\u662f\u4fe1\u53f7\u5854\uff0cv\u548c\u4ed6\u7684\u513f\u5b50\u6709\u53ef\u80fd\u662f\u4fe1\u53f7\u5854\uff0c\u90a3\u4e48dp[u][1]\u7531dp[v][0]\u548cdp[v][2]\u63a8\u51fa\u6765\uff0c\u53d6\u6700\u5c0f\u503c\u3002\n\n 2:v\u7684\u7236\u4eb2\u4e0d\u662f\u4fe1\u53f7\u5854\uff0cv\u548c\u4ed6\u7684\u513f\u5b50\u6709\u53ef\u80fd\u662f\u4fe1\u53f7\u5854\uff0c\u4f46\u662f\u6240\u6709v\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u662f\u4fe1\u53f7\u5854\uff0c\u90a3\u4e48\u8fd9\u4e2a\u72b6\u6001\u5c31\u6bd4\u8f83\u96be\u63a8\u4e86\uff0c\u8fd9\u65f6\u5019\u5c31\u4e0d\u80fd\u53ea\u7531\u4e00\u4e2av\u7684\u89c6\u89d2\u6765\u72b6\u6001\u8f6c\u79fb\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u4e00\u5b9a\u662f\u4fe1\u53f7\u5854\u7684v\uff0c\u679a\u4e3e\u54ea\u4e2av\u4e00\u5b9a\u662f\u4fe1\u53f7\u5854\u540e(\u5bf9\u4e8e\u8fd9\u4e2av\u6765\u8bb2\u662fdp[v][0])\uff0c\u65e0\u89c6\u8fd9\u4e2a\u662f\u4e00\u5b9a\u662f\u4fe1\u53f7\u5854\u7684v\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5176\u4ed6\u4e0d\u4e00\u5b9a\u662f\u4fe1\u53f7\u5854\u7684v\u8282\u70b9\u6765\u8bf4\u72b6\u6001\u8f6c\u79fb\u53d8\u6210\u4e86<1>\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u628a\u4e0d\u4e00\u5b9a\u662f\u4fe1\u53f7\u5854\u7684\u5b50\u8282\u70b9\u7684min(dp[v][0],dp[v][2])\u76f8\u52a0\u548c\u679a\u4e3e\u51fa\u7684\u4e00\u5b9a\u662f\u4fe1\u53f7\u5854\u7684v\u7684dp[v][0]\u76f8\u52a0\u3002\u8bbeu\u7684\u5b50\u8282\u70b9v\u6709m\u4e2a\uff0c\u679a\u4e3e\u4e00\u5b9a\u662f\u4fe1\u53f7\u5854\u7684v\u662fO(m),\u518d\u628a\u5176\u4ed6\u5b50\u8282\u70b9v\u7684min(0,2)\u503c\u76f8\u52a0\u662fO(m)\uff0c\u90a3\u4e48\u603b\u9700\u8981O(m\u00b2\uff09\u6b21\u3002\u5f88\u5bb9\u6613\u8d85\u65f6\u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u60f3\uff0c\u5148\u628a\u6240\u6709\u7684min(dp[v][0],dp[v][2])\u76f8\u52a0\uff08\u5373dp[u][1]\uff09\uff0c\u7136\u540e\u679a\u4e3e\u4e00\u5b9a\u662f\u4fe1\u53f7\u5854\u7684v\u65f6\u628a\u4e00\u5b9a\u662f\u4fe1\u53f7\u5854\u7684v\u7684min(dp[v][0],dp[v][2])\u51cf\u53bb\uff0c\u518d\u52a0\u4e0adp[v][0]\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u7a0b\u5ea6\u5c31\u964d\u5230\u4e86O(2m)\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5f88\u6109\u5feb\u7684\u5199\u51fa\u6765\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e86~\n\n## $ dp[u][0]=\u03a3min(dp[v][1],dp[v][2],dp[v][0]) +1$\n\n## $ dp[u][1]=\u03a3min(dp[v][0],dp[v][2]) $\n\n## $ dp[u][2]=min(dp[u][2],dp[u][1]-min(dp[v][2],dp[v][0])+dp[v][0]) $\n\n\u90a3\u4e48\u9700\u8981\u521d\u59cb\u5316dp[u][0]=1\uff08\u76f8\u5f53\u4e8e\u4e0a\u8ff0\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u7684+1\uff09\n\n$ code: $\uff08\u5947\u602a\u7684\u7801\u98ce\uff09\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll int\n#define gc(a) a=getchar()\n#define pc(a) putchar(a)\n#define rg register\nconst ll maxn=10010;\nconst ll INF=0x3f3f3f3f;\nll read(){\n    char c;ll x=0;bool flag=0;gc(c);\n    while(c<'0'||c>'9'){if(c=='-') flag=1;gc(c);}\n    while(c>='0'&&c<='9'){x=(x<<3)+(x<<1)+(c^48),gc(c);}\n    return flag?-x:x;\n}\nvoid pr(ll x){\n    if(x<0){x=-x;pc('-');}\n    if(x>9) pr(x/10);\n    pc(x%10+48);\n}\n//---------\u5feb\u8bfb------------\nstruct Edge\n{\n    ll v,nx;\n    Edge(ll v,ll nx):v(v),nx(nx){}\n};\nvector<Edge>edge;\nll head[maxn];\nvoid edgepush(ll u,ll v,bool f)\n{\n    edge.push_back(Edge(v,head[u]));\n\thead[u]=edge.size()-1;\n\tif(f) edgepush(v,u,0);//\u53cc\u5411\u5efa\u8fb9\n}\nll n,dp[maxn][3];\nvoid dfs(ll u,ll fa)\n{\n\tdp[u][0]=1;dp[u][2]=INF;\n\tfor(int v,i=head[u];i;i=edge[i].nx)\n\t{\n\t\tv=edge[i].v;if(v==fa) continue;\n\t\tdfs(v,u);\n\t\tdp[u][0]+=min(dp[v][1],min(dp[v][0],dp[v][2]));\n\t\tdp[u][1]+=min(dp[v][0],dp[v][2]);\n\t}\n\tfor(int v,i=head[u];i;i=edge[i].nx)\n\t{\n\t\tv=edge[i].v;if(v==fa) continue;\n\t\tdp[u][2]=min(dp[u][2],dp[u][1]-min(dp[v][2],dp[v][0])+dp[v][0]);\n\t}\n\t\n}\nint main()\n{\n\tedge.push_back(Edge(0,0));\n\tn=read();\n\tfor(int i=1;i<n;i++)\n\tedgepush(read(),read(),1);//\u6b63\u5e38\u5efa\u8fb9\u5c31\u53ef\u4ee5\u4e86\n\tdfs(1,0);\n\tpr(min(dp[1][0],dp[1][2]));//\u56e0\u4e3a\u6839\u8282\u70b9\u6ca1\u6709\u7236\u8282\u70b9\uff0c\u6240\u4ee5\u5c31\u662f0\u548c2\u7684\u6700\u5c0f\u503c\u4e86\n}\n```\n\n\n",
        "postTime": 1556677634,
        "uid": 128616,
        "name": "\u849f\u84bbzExNocs",
        "ccfLevel": 0,
        "title": "P2899 \u624b\u673a\u7f51\u7edc \u9898\u89e3"
    },
    {
        "content": "\u63a8\u8350\u5728\u535a\u5ba2\u4e2d\u770b\u3002\u3002\u3002\n# \u5206\u6790\n\n### \u72b6\u6001\u8868\u793a\n\n\u8003\u8651\u5230\u6bcf\u4e2a\u8282\u70b9\u90fd\u5fc5\u987b\u6709\u4fe1\u53f7\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8282\u70b9\u5b89\u653e\u4fe1\u53f7\u5854\u53ea\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u7528$dp[i][0\\sim 2]$\u6765\u8868\u793a\u8fd9\u4e09\u79cd\u60c5\u51b5\uff1a\n*   $dp[i][0]$\u8868\u793a$i$\u53f7\u8282\u70b9\u653e\u901a\u8baf\u7ad9,\u4ed6\u6240\u5728\u5b50\u6811\u5168\u90e8\u7531\u4fe1\u53f7\u7684\u6700\u5c11\u82b1\u8d39\n*   $dp[i][1]$\u8868\u793a$i$\u53f7\u8282\u70b9\u7684\u7236\u4eb2\u653e\u901a\u8baf\u7ad9,\u4ed6\u6240\u5728\u5b50\u6811\u5168\u90e8\u7531\u4fe1\u53f7\u7684\u6700\u5c11\u82b1\u8d39\n*   $dp[i][2]$\u8868\u793a$i$\u53f7\u8282\u70b9\u7684\u513f\u5b50\u653e\u901a\u8baf\u7ad9,\u4ed6\u6240\u5728\u5b50\u6811\u5168\u90e8\u7531\u4fe1\u53f7\u7684\u6700\u5c11\u82b1\u8d39\n\n### \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\n\u5bf9\u4e8e$dp[u][0]$\uff0c\u6613\u5f97\uff1a\n$$dp[u][0]=\\sum_{v \\epsilon \\ son(v)} \\min{(dp[v][0],dp[v][1],dp[v][2])}+1$$\n\u5bf9\u4e8e$dp[u][1]$:\n$$dp[u][1]=\\sum_{v \\epsilon \\ son(v)} \\min{(dp[v][0],dp[v][2])}$$\n\u5bf9\u4e8e$dp[u][2]$\uff0c\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e$u$\u53f7\u8282\u70b9\uff0c\u5b83\u53ef\u4ee5\u7531$dp[v][0]$\u548c$dp[v][2]$\u8f6c\u79fb\u8fc7\u6765\uff0c\u4f46$u$\u7684\u513f\u5b50\u8282\u70b9\u5fc5\u987b\u81f3\u5c11\u6709\u4e00\u4e2a\u8282\u70b9\u7684\u4fe1\u53f7\u7ad9\u5efa\u7acb\u5728\u672c\u5730\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8bbe$flag$\u53d8\u91cf\u8868\u793a$dp[u][2]$\u662f\u5426\u5168\u90e8\u6309\u7167$dp[v][2]$\u8f6c\u79fb\u8fc7\u6765\u7684\uff0c\u518d\u4ee4\n$$tmp=\\min_{v\\epsilon \\ son(u)}(dp[v][0]-dp[v][2])$$\n\u5f88\u5bb9\u6613\u770b\u51fa\uff0c\u5f53$dp[u][2]$\u5168\u90e8\u6309\u7167$dp[v][2]$\u8f6c\u79fb\u8fc7\u6765\u65f6\uff0c$dp[u][0]+=tmp$\n\n\u6574\u7406\u4e00\u4e0b\uff1a\n$$dp[u][2]=\\left\\{\n    \\begin{aligned}\n    &\\sum_{v\\epsilon\\ son(u)}\\min(dp[v][0],dp[v][2])(flag==0)\\\\\n    & \\sum_{v\\epsilon \\ son(u)} \\min(dp[v][0],dp[v][2])+tmp(dlag==1)\n    \\end{aligned}\n\\right.\n$$\n## code\n```cpp\n/*\ndp[i][0]\u8868\u793ai\u53f7\u8282\u70b9\u653e\u901a\u8baf\u7ad9,\u4ed6\u6240\u5728\u5b50\u6811\u5168\u90e8\u7531\u4fe1\u53f7\u7684\u6700\u5c11\u82b1\u8d39\ndp[i][1]\u8868\u793ai\u53f7\u8282\u70b9\u7684\u7236\u4eb2\u653e\u901a\u8baf\u7ad9,\u4ed6\u6240\u5728\u5b50\u6811\u5168\u90e8\u7531\u4fe1\u53f7\u7684\u6700\u5c11\u82b1\u8d39\ndp[i][2]\u8868\u793ai\u53f7\u8282\u70b9\u7684\u513f\u5b50\u653e\u901a\u8baf\u7ad9,\u4ed6\u6240\u5728\u5b50\u6811\u5168\u90e8\u7531\u4fe1\u53f7\u7684\u6700\u5c11\u82b1\u8d39\n*/\n\n#include<bits/stdc++.h>\nusing namespace std;\n\nint n,dp[10001][3];\nvector<int>g[10001];\n\nvoid dfs(int u,int fa){\n    dp[u][0]++;\n    int tmp=INT_MAX;\n    bool flag=1;\n    for(int i=0;i<g[u].size();i++){\n        int v=g[u][i];\n        if(v!=fa){\n            dfs(v,u);\n            dp[u][0]+=min(dp[v][0],min(dp[v][1],dp[v][2]));\n            dp[u][1]+=min(dp[v][0],dp[v][2]);\n            if(dp[v][0]>dp[v][2])tmp=min(tmp,dp[v][0]-dp[v][2]);\n            else flag=0;\n            dp[u][2]+=min(dp[v][0],dp[v][2]);\n        }\n    }\n    if(flag)dp[u][2]+=tmp;\n}\n\nint main(){\n    cin>>n;\n    for(int i=1;i<n;i++){\n        int u,v;cin>>u>>v;\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    dfs(1,0);\n    cout<<min(dp[1][0],dp[1][2])<<endl;\n    return 0;\n}\n\n```",
        "postTime": 1581986357,
        "uid": 66769,
        "name": "Ji_Kang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u8981\u6c42\u7684\u662f\u6bcf\u4e2a\u70b9\u5468\u56f4\u6709\u81f3\u5c11\u4e00\u4e2a\u67d3\u8272\u70b9\uff0c\u90a3\u4e48\u4e00\u6761\u8fb9\u7684\u4e24\u7aef\u662f\u6709\u53ef\u80fd\u90fd\u6ca1\u6709\u67d3\u8272\u7684\uff0c\u4e00\u4e2a\u8282\u70b9\u88ab\u81f3\u5c11\u4e00\u4e2a\u513f\u5b50\u67d3\u8272\u5c31\u5408\u6cd5\uff0c\u6b64\u65f6\u81ea\u5e95\u5411\u4e0a\u7684\u8d2a\u5fc3\u53ef\u80fd\u66f4\u52a0\u7b80\u5355\u6613\u61c2\u3002\n\n\u8003\u8651\u4e00\u4e2a\u53f6\u8282\u70b9\uff0c\u5b83\u8fd8\u6ca1\u6709\u88ab\u67d3\u8272\uff0c\u53ef\u4ee5\u67d3\u5b83\u6216\u8005\u67d3\u4ed6\u7684\u7236\u4eb2\uff0c\u663e\u7136\u67d3\u5b83\u7684\u7236\u4eb2\u53ef\u4ee5\u8986\u76d6\u66f4\u591a\u7684\u70b9\u3002\u90a3\u4e48\u6211\u4eec\u628a\u6240\u6709\u70b9\u6309\u7167\u6df1\u5ea6\u5012\u5e8f\u6392\u5e8f\uff0c\u5b8c\u5168\u81ea\u5e95\u5411\u4e0a\u8ba1\u7b97\uff0c\u5f53\u8003\u8651\u5230\u70b9`x`\u65f6\uff0c\u5b83\u7684\u513f\u5b50\u5df2\u7ecf\u5904\u7406\u8fc7\uff0c\u4e0d\u7528\u518d\u7ba1\uff0c\u90a3\u4e48\u53ea\u8981`x`\u8fd8\u9700\u8981\u67d3\u8272\uff0c\u6211\u4eec\u67d3\u5b83\u7684\u7236\u8282\u70b9\u4e00\u5b9a\u66f4\u4f18\u3002\n\n\u5efa\u7acb\u6570\u7ec4`f[]`\uff0c`f`\u503c\u4e3a2\u8868\u793a\u8bbe\u7acb\u4e86\u67d3\u8272\u70b9\uff0c\u4e3a`1`\u8868\u793a\u4e0d\u662f\u67d3\u8272\u70b9\u4f46\u662f\u53d7\u5230\u4e86\u67d3\u8272\u5f71\u54cd\uff0c\u5f53`x`\u672a\u67d3\u8272\u65f6\uff0c\u5c06\u7236\u8282\u70b9\u6807\u8bb0\u4e3a2\uff0c\u81ea\u5df1\u548c\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\u6807\u8bb0\u4e3a1\u5373\u53ef\u3002\u56e0\u4e3a\u7236\u8282\u70b9\u7684\u5176\u4ed6\u5b50\u8282\u70b9\u8fd8\u6ca1\u6709\u6807\u8bb0\uff0c\u6240\u4ee5\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u88ab\u5f71\u54cd\u8fd8\u8981\u770b\u4ed6\u7684\u7236\u4eb2\u3002\n\n![](https://s2.ax1x.com/2019/10/26/K0ICVg.png)\n\n\u56e0\u4e3a\u8981\u6392\u5e8f\uff0c\u590d\u6742\u5ea6$O(NlogN)$\uff0c\u5982\u679c\u8ffd\u6c42\u4e25\u683c$O(N)$\u53ef\u4ee5\u5199\u6876\u6392\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define MAX (10000 + 7)\nusing namespace std;\n\nint N, ec, ans, f[MAX], fa[MAX], id[MAX], dep[MAX], head[MAX];\n\nstruct Edge{ int y, nxt; } E[MAX << 1];\nvoid add(int x, int y)\n{\n\tE[++ec] = Edge{y, head[x]};\n\thead[x] = ec;\n}\n\n#define y E[p].y\nvoid DFS(int x)//\u8ba1\u7b97dep\u548cfa \n{\n\tid[x] = x;\n\tfor (int p = head[x]; p; p = E[p].nxt)\n\t\tif (y != fa[x])\n\t\t{\n\t\t\tdep[y] = dep[x] + 1;\n\t\t\tfa[y] = x, DFS(y);\n\t\t}\n}\n#undef y\n\nint main()\n{\n\tscanf(\"%d\", &N);\n\tfor (int i = 1, x, y; i < N; i++)\n\t{\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tadd(x, y), add(y, x);\n\t}\n\tDFS(1);\n\tsort(id+1, id+N+1, [](int a, int b){return dep[a] > dep[b];});//\u786e\u5b9a\u70b9\u7684\u8bbf\u95ee\u987a\u5e8f \n\tfor (int i = 1; i <= N; i++)\n\t{\n\t\tint x = id[i];\n\t\tif (!f[x] && f[fa[x]]!=2)//\u81ea\u8eab\u65e0\u6807\u8bb0\uff0c\u7236\u8282\u70b9\u53c8\u4e0d\u662f\u67d3\u8272\u70b9 \n\t\t{\n\t\t\tf[fa[x]] = 2;\n\t\t\tf[x] = f[fa[fa[x]]] = 1;\n\t\t\tans++;\n\t\t}\n\t} printf(\"%d\\n\", ans);\n}\n```",
        "postTime": 1572059801,
        "uid": 73489,
        "name": "NyaRu_Official",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "\u4ecb\u7ecd\u4e00\u4e2a\u8f6c\u79fb\u7684\u6280\u5de7 **&&** \u8be6\u7ec6\u7684\u72b6\u6001\u8f6c\u79fb\u89e3\u91ca\n\n### \u9898\u76ee\u5206\u6790\uff1a\n\n\u8003\u8651\u6811\u7684\u4e00\u6761\u679d\u5e72\u7684\u4efb\u610f\u5b50\u6bb5\uff0c\u51fa\u73b0\u4ee5\u4e0b $3$ \u4e09\u79cd\u60c5\u51b5\u662f\u5141\u8bb8\u7684\uff1a\n\n1. \u5efa --- \u5efa\n\n2. \u5efa --- \u4e0d\u5efa --- \u5efa\n\n3. \u5efa --- \u4e0d\u5efa --- \u4e0d\u5efa --- \u5efa\n\n\u7ad6\u7740\u770b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u6700\u8fdc\u4e0d\u5efa\u7ad9\u7684\u8282\u70b9\u662f\u81ea\u5df1\u7684\u513f\u5b50\u7684\u513f\u5b50\uff0c\u8fd9\u65f6\u5019\uff0c\u81ea\u5df1\u5fc5\u987b\u8981\u5efa\u7ad9\uff0c\u4e0d\u7136\u513f\u5b50\u5c06\u6ca1\u6709\u4fe1\u53f7\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u8282\u70b9\u6211\u4eec\u5c31\u53ef\u4ee5\u8bbe\u4e09\u79cd\u72b6\u6001\uff0c\u5206\u522b\u662f\uff1a\n\n1. $f[i][0]$ \u81ea\u5df1\u5efa\u7ad9\n\n2. $f[i][1]$ \u81ea\u5df1\u4e0d\u5efa\uff0c\u513f\u5b50\u81f3\u5c11\u6709\u4e00\u4e2a\u5efa\u7ad9\uff08\u8fd9\u79cd\u72b6\u6001\u7684\u610f\u4e49\u662f **\u53ef\u4ee5\u4e0d\u9700\u8981\u7236\u4eb2\u5efa\u7ad9**\uff0c\u56e0\u4e3a\u81ea\u5df1\u7684\u513f\u5b50\u5df2\u7ecf\u7ed9\u4e86\u81ea\u5df1\u4fe1\u53f7\uff09\n\n3. $f[i][2]$ \u81ea\u5df1\u4e0d\u5efa\uff0c\u513f\u5b50\u4e5f\u4e0d\u5efa\uff08\u8fd9\u79cd\u72b6\u6001\u8981\u6c42\u513f\u5b50\u5fc5\u987b\u8981\u5df2\u7ecf\u6709\u4fe1\u53f7\uff0c\u7236\u4eb2\u5fc5\u987b\u8981\u5efa\u7ad9\uff09\n\n\u73b0\u5728\u6765\u5206\u6761\u8003\u8651\u8f6c\u79fb\uff1a\n\n#### 1. \u81ea\u5df1\u5efa\u7ad9\uff1a\n\n- \u81ea\u5df1\u52a8\u624b\uff0c\u4e30\u8863\u8db3\u98df\uff0c\u53ef\u4ee5\u7531\u513f\u5b50\u7684\u6240\u6709\u72b6\u6001\u8f6c\u79fb\u800c\u6765\n\n$$f[i][0]=\\sum_{i->j}\\min(f[j][0],f[j][1],f[j][2])$$\n\n#### 2. \u81ea\u5df1\u4e0d\u5efa\uff0c\u513f\u5b50\u81f3\u5c11\u6709\u4e00\u4e2a\u5efa\u7ad9\uff08\u6700\u70e6\u4eba\u7684\u72b6\u6001\uff09:\n\n- \u9996\u5148\u8fd9\u4e2a\u72b6\u6001\u80af\u5b9a\u4e0d\u80fd\u7531\u513f\u5b50\u7684 $3$ \u72b6\u6001\u8f6c\u79fb\u800c\u6765\uff08\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff09\u3002\u56e0\u4e3a\u53ef\u591a\u4e2a\u513f\u5b50\u5efa\u7ad9\uff0c\u6211\u4eec\u5148\u4e0d\u7ba1\u662f\u5426\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u513f\u5b50\u6700\u4f18\u72b6\u6001\u662f $1$ \u72b6\u6001\uff08\u5efa\u7ad9\u72b6\u6001\uff09\uff0c\u6bcf\u6b21\u8d2a\u5fc3\u53d6\u513f\u5b50 $1,2$ \u72b6\u6001\u6700\u5c0f\u7684\u4ee3\u4ef7\u8f6c\u79fb\uff0c\u540c\u65f6\u8bb0\u5f55\u513f\u5b50\u4ece $2$ \u72b6\u6001\u6539\u53d6\u4e3a $1$ \u72b6\u6001\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u5982\u679c\u6700\u540e\u6700\u5c0f\u82b1\u8d39\u4e3a\u8d1f\uff0c\u8bf4\u660e\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u513f\u5b50\u6700\u4f18\u72b6\u6001\u662f $1$ \u72b6\u6001\uff0c\u8d2a\u5fc3\u6b63\u786e\uff0c\u4e0d\u9700\u8981\u6539\u53d6\u3002\u5426\u5219\u8bf4\u660e\u6240\u6709\u513f\u5b50\u7684\u6700\u4f18\u72b6\u6001\u90fd\u662f $2$ \u72b6\u6001\uff0c\u5c06\u8fd9\u4e2a\u6700\u5c0f\u6539\u53d6\u8d39\u7528\u52a0\u4e0a\u5373\u53ef\u3002\n\n$$f[i][1]=(\\sum_{i->j}\\min(f[j][0],f[j][1]))+\\max(0,\\min(f[j][0]-f[j][1]))$$\n\n#### 3. \u81ea\u5df1\u4e0d\u5efa\uff0c\u513f\u5b50\u4e5f\u4e0d\u5efa\uff1a\n\n- \u56e0\u4e3a\u81ea\u5df1\u4e0d\u5efa\uff0c\u8fd8\u8981\u6c42\u513f\u5b50\u4e0d\u80fd\u5efa\uff0c\u6240\u4ee5\u513f\u5b50\u8981\u6709\u4fe1\u53f7\u6765\u6e90\u5fc5\u987b\u8981\u5411\u5b83\u81ea\u5df1\u7684\u513f\u5b50\u8981\uff0c\u6240\u4ee5\u6b64\u72b6\u6001\u53ea\u80fd\u4ece\u513f\u5b50\u7684 $2$ \u72b6\u6001\u8f6c\u79fb\u800c\u6765\u3002\n\n$$f[i][2]=\\sum_{i->j}f[j][1]$$\n\n#### \u8fb9\u754c\u6761\u4ef6 -> \u5bf9\u4e8e\u53f6\u5b50\u8282\u70b9\uff1a\n\n$f[i][0]=1,f[i][1]=INF,f[i][2]=0$ \u3002 ~~\uff08\u663e\u7136\uff09~~\n\n**\u6700\u540e\uff0c\u6839\u8282\u70b9\u6ca1\u6709\u7236\u4eb2\uff0c\u5b83\u4e0d\u80fd\u5403\u7236\u4eb2\u7684\u672c\uff0c\u5c31\u53ea\u80fd\u81ea\u5df1\u5efa\u6216\u8005\u9760\u513f\u5b50\u7684\u4fe1\u53f7\u5ea6\u65e5\u3002**\n\n\u7ec8\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5199\u51fa\u975e\u5e38\u7b80\u77ed\u7684\u4ee3\u7801\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define N 10005\nusing namespace std;\n\nint n, f[N][3];\nint head[N], to[N << 1], nxt[N << 1], cnt = 1;\n\nvoid addedge(int u, int v) {\n\tto[cnt] = v;\n\tnxt[cnt] = head[u];\n\thead[u] = cnt++;\n}\n\nvoid dfs(int p, int fa) {\n\tf[p][0] = 1;//\u81ea\u5df1\u5efa\u6709\u4e00\u4efd\u521d\u59cb\u82b1\u8d39\n\tint minn = n + 1;//\u6781\u5927\u503c\uff08\u5bf9\u4e8e\u72b6\u6001\u800c\u8a00\u5df2\u7ecf\u6700\u5927\u4e86\uff09\n\tfor(int i = head[p];i;i = nxt[i]) {\n\t\tint v = to[i];\n\t\tif(v == fa) continue;\n\t\tdfs(v, p);\n\t\tf[p][0] += min(min(f[v][0], f[v][1]), f[v][2]);\n\t\tf[p][1] += min(f[v][0], f[v][1]);\n\t\tf[p][2] += f[v][1];\n\t\tif(f[v][0] - f[v][1] < minn) minn = f[v][0] - f[v][1];\n\t}\n\tif(minn > 0) f[p][1] += minn;\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\tint a, b;\n\tfor(int i = 1;i < n;i++) {\n\t\tscanf(\"%d%d\", &a, &b);\n\t\taddedge(a, b);\n\t\taddedge(b, a);\n\t}\n\tdfs(1, -1);//1\u6ca1\u6709\u7236\u4eb2\uff0c\u968f\u4fbf\u8bbe\u4e0d\u5b58\u5728\u7684\u70b9\n\tprintf(\"%d\", min(f[1][0], f[1][1]));//\u4fdd\u8bc11\u6709\u4fe1\u53f7\n\treturn 0;\n}\n```\n\n### \u540e\u8bb0\uff1a\n\n\u5f88\u6709\u610f\u601d\u7684\u6811\u4e0aDP\uff0c\u4e00\u5b9a\u8981\u597d\u597d\u7406\u89e3\uff0c\u4e0e\u6b64\u7c7b\u4f3c\u7684\u9898\u53ef\u89c1\u8ba8\u8bba\u533a\uff0c\u53bb\u591a\u5237\u51e0\u9053 ~~n\u500d\u7ecf\u9a8c~~ \u7684\u9898\u5427\u3002",
        "postTime": 1571924994,
        "uid": 133236,
        "name": "saxiy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2899 \u3010\u624b\u673a\u7f51\u7edc\u3011"
    },
    {
        "content": "#### \u6216\u5c06\u6210\u4e3a\u672c\u9898\u6700\u8be6\u7ec6\u9898\u89e3\u3002\n\n\n## \u601d\u8def\n\u6709\u4e00\u70b9\u50cf\u6811\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\u9996\u5148\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9$i$\uff0c\u90fd\u6709\u5982\u4e0b3\u79cd\u9009\u62e9\uff1a\n\n\u4e0d\u9009\u81ea\u5df1\uff0c\u9009\u513f\u5b50\uff1b\n\n\u4e0d\u9009\u81ea\u5df1\uff0c\u9009\u7236\u4eb2\uff1b\n\n\u6211\u81ea\u5df1\u9009\u6211\u81ea\u5df1\u3002\n\n\u4ee4$dp[i][0/1/2]$\u4e3a\u8282\u70b9$i$\u53ca\u5176\u8282\u70b9$i$\u7684\u5b50\u6811\u4e2d\u5168\u90e8\u88ab\u4fe1\u53f7\u8986\u76d6\u6240\u9700\u7684\u6700\u5c0f\u4fe1\u53f7\u5854\u6570\uff0c$dp[i][0]$\u8868\u793a\u70b9$i$\u6709\u4fe1\u53f7\u5854\uff0c$dp[i][1]$\u4e3a\u70b9$i$\u6ca1\u6709\u4fe1\u53f7\uff0c\u4e5f\u5c31\u662f\u5c31\u662f\u7236\u4eb2\u6709\u4fe1\u53f7\u5854\uff0c$dp[i][2]$\u8868\u793a\u8282\u70b9$i$\u88ab\u95f4\u63a5\u4fe1\u53f7\uff0c\u4e5f\u5c31\u662f\u513f\u5b50\u6709\u4fe1\u53f7\u5854\u3002\n\n**1.$dp[i][0]$**\n\n\u56e0\u4e3a\u8282\u70b9$i$\u6709\u4fe1\u606f\u5854\uff0c\u6240\u4ee5\u5bf9\u4e8e$i$\u7684\u5b50\u8282\u70b9$son$\uff0c\u5b83\u53ef\u4ee5\u6ca1\u6709\u4fe1\u53f7\u5854\uff0c\u4e5f\u53ef\u4ee5\u6709\u4fe1\u53f7\u5854\uff0c\u4e5f\u53ef\u4ee5\u4ece$son$\u7684\u5b50\u8282\u70b9\u8f6c\u79fb\u8fc7\u6765\u3002\u56e0\u6b64\uff1a\n\n$$dp[i][0]=\u2211min(dp[son][1],dp[son][0],dp[son][2])+1$$\n\n\u8fd9\u91cc$+1$\u662f\u56e0\u4e3a\u81ea\u5df1\u672c\u8eab\u653e\u7f6e\u4e86\u4e00\u4e2a\u4fe1\u53f7\u5854\u3002\n\n**2.$dp[i][1]$**\n\n\u56e0\u4e3a\u8282\u70b9$i$\u6ca1\u6709\u4fe1\u606f\u5854\uff0c\u9760\u7684\u662f\u8282\u70b9$i$\u7684\u7236\u4eb2\u624d\u6709\u4fe1\u53f7\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u8282\u70b9$i$\u7684\u5b50\u8282\u70b9$son$\u662f\u4e0d\u53ef\u80fd\u9009\u7236\u4eb2\u7684\u3002\u6240\u4ee5$dp[i][1]$\u53ef\u4ee5\u4ece$dp[son][0]$\u8f6c\u79fb\u8fc7\u6765\uff08\u5b50\u8282\u70b9\u6709\u4fe1\u606f\u5854\uff09\uff0c\u4e5f\u53ef\u4ee5\u4ece$dp[son][2]$\u8f6c\u79fb\u8fc7\u6765\uff08\u5b50\u8282\u70b9\u7684\u513f\u5b50\u6709\u4fe1\u606f\u5854\uff09\u3002\n\n$$dp[i][1]=\u2211min(dp[son][0[,dp[son][2])$$\n\n**3.$dp[i][2]$**\n\n\u56e0\u4e3a\u8282\u70b9$i$\u6ca1\u6709\u4fe1\u606f\u5854\uff0c\u9760\u5b83\u513f\u5b50\uff0c\u6240\u4ee5\u8282\u70b9$i$\u7684\u5b50\u8282\u70b9$son$\u4e5f\u4e0d\u53ef\u80fd\u9009\u7236\u4eb2\uff0c\u5fc5\u7136\u53ef\u4ee5\u4ece$dp[son][0]$\u8f6c\u79fb\u8fc7\u6765\uff0c\u4e5f\u53ef\u4ee5\u4ece$dp[son][2]$\u8f6c\u79fb\u8fc7\u6765\u3002\n\n$$dp[i][2]=\u2211min(dp[son][0],dp[son][2])$$\n\n\u5f88\u5feb\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u7684\u786e\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c$dp[i][2]$**\u5168**\u4ece$dp[son][2]$\u8f6c\u79fb\u8fc7\u6765\uff0c\u4e5f\u5c31\u662f\u82e5**\u6052\u6709**$dp[son][2] \\leq dp[son][0]$\uff0c**\u5c31\u610f\u5473\u7740\u8282\u70b9i\u7684\u6240\u6709\u5b50\u8282\u70b9\u90fd\u6ca1\u6709\u4fe1\u606f\u5854\uff01**\uff08~~\u90a3\u4e0d\u5c31\u51c9\u4e86~~\uff09\u600e\u4e48\u529e\uff1f\n\n\u6240\u4ee5\u6211\u4eec\u8981\u8bbe\u7acb\u4e00\u4e2a**\u53cd\u6094\u673a\u5236**\u3002**\u6211\u53ea\u9700\u8981\u4e00\u4e2a\u513f\u5b50\u9009**\u3002\u53ea\u9700\u8981\u7528$p$\u6765\u8bb0\u5f55\u6bcf\u4e00\u6b21$dp[son][0]-min(dp[son][2],dp[son][0])$\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\uff0c**\u5c31\u7b97\u6052\u6709$dp[son][2] \\leq dp[son][0]$\uff0c\u4e5f\u4e00\u5b9a\u6709\u4e00\u4e2a\u662f\u513f\u5b50\u9009\u4e86\u7684**\uff0c\u5982\u679c\u4e0d\u9009$dp[son][2]$\uff0c\u6700\u540e$p$\u7684\u72b6\u6001\u4e5f\u4e3a$0$\u3002\u82e5\u4e0d\u4fe1\uff0c\u6211\u4eec\u505a\u4e2a\u63a8\u5bfc\uff1a\n\n\u8bb0$p=min(p,dp[son][0]-min(dp[son][0],dp[son][2]))$\n\n$dp[i][2]=min(dp[son][0],dp[son][2])+p$\n\n$=min(dp[son][0],dp[son][2])+dp[son][0]-min(dp[son][0],dp[son][2])$\n\n\u82e5$dp[son][2] \\leq dp[son][0]$\u6052\u6210\u7acb**\uff08\u6ce8\u610f\u6211\u8bf4\u7684\u662f\u6052\u6210\u7acb\uff0c\u610f\u601d\u662f\u8bf4$dp[i][2]$\u5168\u662f\u4ece$dp[son][2]$\u8f6c\u79fb\u8fc7\u6765\uff09**\n\n\u539f\u5f0f$=dp[son][2]+dp[son][0]-dp[son][2]$\n\n$=dp[son][0]$\n\n**\u4e5f\u5c31\u662f\u628a$dp[son][2]$\u5f3a\u5236\u8f6c\u6362\u6210\u4e86$dp[son][0]$\uff01**\n\n\u82e5$dp[son][2]>dp[son][0]$\n\n\u539f\u5f0f$=dp[son][0]+dp[son][0]-dp[son][0]$\n\n$=dp[son][0]$\n\n\u4e5f\u5c31\u662f\u8bf4\u5e76\u4e0d\u5f71\u54cd$dp[son][0]$\u7684\u6b63\u5e38\u53d6\u503c\uff01\n\n\u6700\u540e\u7b54\u6848\u4e3a$min(dp[root][0],dp[root][2])$\u3002\n```cpp\n#include <stdio.h>\n#include <iostream>\n#define inf 2e9+7\n#define maxn 300001\nusing namespace std;\nint n,cnt,head[maxn],s,dp[maxn][3];\nstruct node\n{\n\tint to,nxt;\n}e[maxn<<1];\ninline void add(int u,int v)\n{\n\te[++cnt].to=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\nvoid dfs(int i,int fa)\n{\n\tbool f(0);\n\tregister int j,p(inf);\n\tfor(j=head[i];j;j=e[j].nxt)\n\t{\n\t\tint v(e[j].to);\n\t\tif(v==fa) continue;\n\t\tdfs(v,i);\n\t\tdp[i][0]+=min(dp[v][1],min(dp[v][0],dp[v][2]));\n\t\tdp[i][1]+=min(dp[v][0],dp[v][2]);\n\t\tdp[i][2]+=min(dp[v][0],dp[v][2]);\n\t\tp=min(p,dp[v][0]-min(dp[v][2],dp[v][0]));//\u8868\u793a\u5176\u5b83\u513f\u5b50\u7684\u603b\u548c\n\t}\n\tdp[i][2]+=p;//\u6700\u540e\u518d\u8fdb\u884c\u53cd\u6094\u64cd\u4f5c\n\tdp[i][0]++;//\u6700\u540e\u518d\u8fdb\u884c\u653e\u7f6e\u4fe1\u53f7\u5854\u64cd\u4f5c \n}\nsigned main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.tie(0);\n\tregister int i,j;\n\tcin>>n;\n\tfor(i=1;i<=n-1;i++)\n\t{\n\t\tint u,v;\n\t\tcin>>u>>v;\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\tdfs(1,-1);\n\tcout<<min(dp[1][0],dp[1][2])<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1568213260,
        "uid": 72255,
        "name": "Apro1066",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9053\u9898\u8ddf\u6211\u7684\u4e0a\u4e00\u7bc7\u7684\u4e09\u9053\u9898\u90fd\u633a\u50cf\u7684\n\n\u5c24\u5176\u662f\u6811\u7684\u6700\u5927\u72ec\u7acb\u96c6\n\n\u4f46\u8fd9\u9053\u9898\u8fd8\u662f\u6709\u672c\u8d28\u4e0a\u7684\u5dee\u522b\n\n\u90a3\u4e09\u9053\u9898\u90fd\u662f\u8981\u5c3d\u91cf\u591a\n\n\u800c\u8fd9\u9053\u9898\u8981\u5c3d\u91cf\u5c11\n\n\u6240\u4ee5\u533a\u522b\u8fd8\u662f\u5f88\u5927\u7684\n\n\u800c\u4e14\u8fd9\u9053\u9898\u7684dp\u7684\u5b9a\u4e49\u4ee5\u53ca\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u90fd\u4e0e\u90a3\u4e09\u9898\u5927\u4e0d\u4e00\u6837\n\n\u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e09\u79cd\u4e0d\u540c\u72b6\u6001\u7684 dp \uff1a\uff1a\n\n- dp [ i ] [ 0\u00a0] \uff1a\uff1ai \u8282\u70b9\u7684\u5b50\u6811\u548c i \u8282\u70b9\u88ab\u5168\u8986\u76d6\uff0ci \u8282\u70b9\u4e0a\u6709\u5854\n- dp [ i\u00a0] [ 1\u00a0] \uff1a\uff1ai \u8282\u70b9\u7684\u5b50\u6811\u548c i \u8282\u70b9\u88ab\u5168\u8986\u76d6\uff0ci \u8282\u70b9\u65e0\u5854\n- dp [ i ] [ 2\u00a0] \uff1a\uff1ai \u8282\u70b9\u7684\u5b50\u6811\u88ab\u5168\u8986\u76d6\uff0c\u4f46 i \u8282\u70b9\u672a\u88ab\u8986\u76d6  \n\n\u5bf9\u4e8e\u8fd9\u4e09\u79cd\u72b6\u6001\uff0c\u6211\u4eec\u5206\u522b\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u4e09\u79cd\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\uff1a\n\n\u00a0\ndp [ i ] [ 0 ] + = min ( dp [ son ] [ 0 ] , min ( dp [ son ] [ 1 ] , dp [ son ] [ 2 ] ) ) + 1  \n\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u4ed6\u7684\u513f\u5b50\u8282\u70b9\u7684\u6bcf\u4e00\u79cd\u72b6\u6001\u90fd\u53ef\u4ee5\u8f6c\u79fb\u4e0a\u6765\uff0c\u518d\u52a0\u4e0a\u4ed6\u672c\u8eab\u518d\u67b6\u8bbe\u4e00\u4e2a\n\ndp [ i ] [ 1 ] = min ( dp [ i ][ 1 ] , dp [ son ] [ 0 ] + sum - min ( dp [ son ] [ 0 ] , dp [ son ] [ 1 ] ) )  \n\u8fd9\u4e2a\u662f\u6700\u590d\u6742\u7684\u4e00\u79cd\u4e86\u3002\u56e0\u4e3a\u5982\u679c\u6309\u5b9a\u4e49\u6765\u770b\uff0c\u4ed6\u81f3\u5c11\u6709\u4e00\u4e2a\u5b50\u8282\u70b9\u662f\u6709\u5854\u7684\uff0c\u6240\u4ee5\u3002\u3002\u3002\u81ea\u5df1\u753b\u56fe\u7406\u89e3\u4e00\u4e0b  \nP.S. sum\u8868\u793a\u8986\u76d6\u5b50\u6811\u7684\u6700\u5c0f\u503c\n\ndp [ i ] [ 2 ] + = dp [ son ] [ 1 ]  \n\u7b2c\u4e09\u79cd\u72b6\u6001\u53ea\u80fd\u7531\u7b2c\u4e8c\u4e2a\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765\n\n\u00a0\n\n\u8fd8\u6709\u5c31\u662f\u8fd9\u4e5f\u662f\u4e00\u68f5\u65e0\u6839\u6811\uff0c\u9700\u8981\u81ea\u5df1\u5b9a\u4e49\u6839\n\n~~\uff08\u5176\u5b9e\u8fd9\u4e2a\u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u4e5f\u4e0d\u9700\u8981\u4efb\u4f55\u5904\u7406\uff0c\u968f\u4fbf\u4ece\u54ea\u4e2a\u8282\u70b9\u5f00\u59cb\u90fd\u6ca1\u95ee\u9898\uff09~~\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u968f\u4fbf\u4ece\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u7136\u540edfs\u5c31\u884c\u4e86\n\n\u4ee3\u7801\uff1a\uff1a\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<iostream>\nusing namespace std;\ninline void read(int &x) {\n    x=0;\n    int f=1;\n    char s=getchar();\n    while(s<'0'||s>'9') {\n        if(s=='-')\n            f=-1;\n        s=getchar();\n    }\n    while(s>='0'&&s<='9') {\n        x=x*10+s-48;\n        s=getchar();\n    }\n    x*=f;\n}\ninline void pr(int x) {\n    if(x<0) {\n        putchar('-');\n        x=-x;\n    }\n    if(x>9)\n        pr(x/10);\n    putchar(x%10+48);\n}//\u5feb\u8bfb\u5feb\u8f93\u4e0d\u89e3\u91ca\nvector<int>G[10005];\nint n,k,a,b,dp[10005][3];\nvoid dfs(int x,int fa) {\n    dp[x][0]=1;//\u672c\u8eab\n    dp[x][1]=1000000;//\u8fd9\u91cc\u4e0d\u8981\u5f00\u5f97\u8fc7\u5927\uff0c\u4e0d\u7136\u4e00\u4e0d\u5c0f\u5fc3\u5c31\u7206int\u7136\u540e\u53d8\u6210\u8d1f\u6570\u63a5\u800c\u5c31\u70b8\u4e86\n    int sum=0;//\u6309\u4e0a\u9762\u8bf4\u7684\u7d2f\u548c\n    int o=G[x].size();\n    for(int i=0;i<o;i++) {\n        int v=G[x][i];\n        if(v==fa)//\u7236\u8282\u70b9\n            continue;\n        dfs(v,x);//\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\u9006\u63a8\u4e0a\u6765\n        dp[x][2]+=dp[v][1];//\u6309\u4e0a\u9762\u8bf4\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u63a8\u8fc7\u6765\n        dp[x][0]+=min(dp[v][0],min(dp[v][1],dp[v][2]));//\u540c\u4e0a\n        sum=sum+min(dp[v][0],dp[v][1]);//\u540c\u4e0a\n    }\n    if(o==1&&x!=1)//\u53ea\u6709\u4e00\u4e2a\u513f\u5b50&&\u975e\u6839\u8282\u70b9\n        return;\n    for(int i=0;i<o;i++) {\n        int v=G[x][i];\n        if(v==fa)\n            continue;\n        dp[x][1]=min(dp[x][1],dp[v][0]+sum-min(dp[v][0],dp[v][1]));//\u540c\u4e0a\u4e0a\n    }\n}\nint main() {\n    read(n);\n    for(int i=1;i<n;i++)\n        read(a),read(b),G[a].push_back(b),G[b].push_back(a);\n    dfs(1,0);\n    pr(min(dp[1][0],dp[1][1]));//\u8bfb\u5165+dfs+\u8f93\u51fa\n}\n```\n\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\uff0c\u4e0d\u61c2\u7684\u53ef\u4ee5\u8bc4\u8bba\u8ba8\u8bba",
        "postTime": 1552555023,
        "uid": 104822,
        "name": "\u4e0d\u601d\u8fdb\u53d6\u601d\u4f60",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "\u8d2a\u5fc3\uff0c\u6bcf\u6b21\u4fdd\u8bc1\u6df1\u5ea6\u6700\u6df1\u7684\u70b9\u53ef\u8fbe\u3002\n\n\u4e0d\u8fc7\u6570\u636e\u8303\u56f4\u6709\u5751\uff0c\u5f00\u59cb\u5f001e4\u7206\u6389\u4e86\uff0c\u8c03\u8bd5\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cstdio>\n#include<utility>\n#include<functional>\n#include<queue>\nusing namespace std;\ntypedef pair<int,int> Pair;\nconst int maxn = 1e5 + 15;\nstruct edge{\n    int nxt,to;\n}e[maxn];\nint n,first[maxn],cnt,fa[maxn],dep[maxn],ans=0;\nbool vis[maxn];\npriority_queue < Pair,vector<Pair>,less<Pair> > q;\ninline void addedge(int u,int v)\n{\n    e[++cnt] = (edge) {first[u],v};\n    first[u] = cnt;\n}\nvoid dfs(int x,int f,int deep)\n{\n    fa[x] = f;\n    dep[x] = deep;\n    for(int i=first[x],v;i;i=e[i].nxt) {\n        v = e[i].to;\n        if(v == f) continue;\n        else dfs(v,x,deep+1);\n    }\n}\nvoid bfs(int x)\n{\n    vis[x] = true;\n    for(int i=first[x],v;i;i=e[i].nxt) {\n        v = e[i].to;\n        vis[v] = true;\n    }\n    ans++;\n}\nint main()\n{\n    cin>>n;\n    for(int i=1,x,y;i<n;i++) {\n        scanf(\"%d%d\",&x,&y);\n        addedge(x,y);addedge(y,x);\n    }\n    dfs(1,1,1);//\u5efa\u9020\u4e00\u68f5\u6811\n    for(int i=1;i<=n;i++) q.push(make_pair(dep[i],i));//\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u6df1\u5ea6\n    while(!q.empty()) {\n        int v = q.top().second;//\u6bcf\u6b21\u9009\u6df1\u5ea6\u6700\u5927\u7684\n        q.pop();\n        if(vis[v]) continue;\n        bfs(fa[v]);//\u5728\u7236\u8282\u70b9\u5904\u5b89\u7f6e\u4fe1\u53f7\u5854\n    }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1509840504,
        "uid": 17326,
        "name": "\u6797\u5fd7\u6770",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "\u672c\u9898\u662f\u4e00\u9053\u5f88\u7ecf\u5178\u7684 tree-dp \u9898\u76ee\uff0c\u6211\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u53e6\u5916\u7684\u89d2\u5ea6\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\n\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u8282\u70b9\u5982\u679c\u88ab\u9009\u62e9\uff0c\u90a3\u4e48\u5b83\u548c\u5b83\u76f8\u90bb\u7684\u8282\u70b9\u5c31\u80fd\u6ee1\u8db3\u8986\u76d6\uff0c\u6211\u4eec\u8981\u6c42\u6240\u6709\u8282\u70b9\u90fd\u88ab\u8986\u76d6\u3002\n\n\u8fd9\u9053\u9898\u8981\u6c42\u6211\u4eec\u4ece\u6811\u4e0a\u53d6\u5c3d\u91cf\u5c11\u7684\u70b9\u7ec4\u6210\u4e00\u4e2a\u96c6\u5408\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u6811\u4e0a\u5269\u4f59\u7684\u70b9\u90fd\u4e0e\u53d6\u51fa\u6765\u7684\u70b9\u6709\u8fb9\u76f8\u8fde\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8bbeV\u2018\u662f\u6811\u7684\u4e00\u4e2a\u652f\u914d\u96c6\uff0c\u5219\u5bf9\u4e8e\u6811\u4e0a\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u9876\u70b9u\uff0c\u8981\u4e48\u5c5e\u4e8e\u96c6\u5408V\u2019\uff0c\u8981\u4e48\u4e0eV\u2018\u4e2d\u7684\u9876\u70b9\u76f8\u90bb\u3002\u5728V\u2019\u4e2d\u51fa\u53bb\u4efb\u4f55\u5143\u7d20\u540eV\u2018\u4e0d\u518d\u662f\u652f\u914d\u96c6\uff0c\u5219\u8fd9\u4e2a\u652f\u914d\u96c6\u662f\u6700\u5c0f\u652f\u914d\u96c6\u3002\n\n\u672c\u9898\u6c42\u7684\u5c31\u662f\u4e00\u68f5\u6811\u4e0a\u7684\u6700\u5c0f\u652f\u914d\u96c6\u7684\u5927\u5c0f\u3002\n\n\n\u5bf9\u4e8e\u6811\u4e0a\u7684\u6700\u5c0f\u652f\u914d\u96c6\u95ee\u9898\uff0c\u8d2a\u5fc3\u7b56\u7565\u662f\u9996\u5148\u9009\u62e9\u4e00\u70b9\u4e3a\u6839\uff0c\u6309\u7167\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5f97\u5230\u904d\u5386\u5e8f\u5217\uff0c\u6309\u7167\u6240\u5f97\u5e8f\u5217\u7684\u53cd\u5411\u5e8f\u5217\u7684\u987a\u5e8f\u8fdb\u884c\u8d2a\u5fc3\uff0c**\u5bf9\u4e8e\u4e00\u4e2a\u65e2\u4e0d\u5c5e\u4e8e\u652f\u914d\u96c6\u4e5f\u4e0d\u4e0e\u652f\u914d\u96c6\u4e2d\u7684\u70b9\u76f8\u8fde\u7684\u70b9\u6765\u8bf4\uff0c\u5982\u679c\u4ed6\u7684\u7236\u8282\u70b9\u4e0d\u5c5e\u4e8e\u652f\u914d\u96c6\uff0c\u5c06\u5176\u7236\u8282\u70b9\u52a0\u5165\u652f\u914d\u96c6\u3002**\n\n\u8bf7\u6ce8\u610f\u8fd9\u91cc\u7684\u8d2a\u5fc3\u7684\u7b56\u7565\u4e2d\u8d2a\u5fc3\u7684\u987a\u5e8f\u975e\u5e38\u91cd\u8981\uff0c**\u6309\u7167\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5f97\u5230\u904d\u5386\u5e8f\u5217\u7684\u53cd\u5411\u8fdb\u884c\u8d2a\u5fc3\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6765\u8bf4\uff0c\u5f53\u5176\u5b50\u6811\u90fd\u88ab\u5904\u7406\u8fc7\u540e\u624d\u8f6e\u5230\u8be5\u8282\u70b9\u7684\u5904\u7406\uff0c\u4fdd\u8bc1\u4e86\u8d2a\u5fc3\u7684\u6b63\u786e\u6027\u3002**\n\n\n\u8fd9\u6837\u5904\u7406\uff0c\u5f97\u5230\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) \u7684\u3002\n\n\n\n\n**Code**\n\n\n\n\n\n\n    \n\n\n\n\n    \n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define REP(i, a, b) for (int i = (a), i##_end = (b); i < i##_end; ++i)\ntypedef long long LL;\nvector< vector<int> > edges(10005);\nint n,fm,to,cnt = 0;\nint a[10005],deep[10005],father[10005];\nbool vis[10005];\nvoid dfs(int cur,int d)\n{\n    vis[cur] = true;\n    deep[cur] = d;\n    a[++cnt] = cur;\n    REP(i,0,edges[cur].size())\n    {\n        if (!vis[edges[cur][i]])\n        {\n            father[edges[cur][i]] = cur;\n            dfs(edges[cur][i],d+1);\n        }\n    }\n}\nint greedy()\n{\n    bool s[10005]; // \u67d0\u4e00\u70b9\u662f\u5426\u88ab\u8986\u76d6 \n    bool set[10005]; // \u662f\u5426\u5047\u5982\u652f\u914d\u96c6    \n    int ans = 0;\n    for(int i=n;i>0;i--)\n    {\n        int t = a[i];\n        if(!s[t])\n        {\n            if(!set[father[t]])\n            {\n                set[father[t]]=true;\n                ans++;\n            }\n            s[t]=true;\n            s[father[t]]=true;\n            s[father[father[t]]]=true;\n        }\n    }\n    return ans;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    REP(i,1,n) \n    {\n        scanf(\"%d%d\",&fm,&to);\n        edges[fm].push_back(to);\n        edges[to].push_back(fm);\n    }\n    dfs(1,0);\n    printf(\"%d\",greedy());\n    return 0;\n}\n\n```",
        "postTime": 1503041845,
        "uid": 35575,
        "name": "\u4f55\u5353\u7136",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "\u4eca\u5929\u5237\u5728\u5217\u8868\u91cc\u5237\u62d3\u6251\u6392\u5e8f\u7684\u9898\u76ee\n\u597d\u4e0d\u5bb9\u6613\u627e\u5230\u4e00\u4e2a\u9898\n\u7ed3\u679c\u672c\u849f\u84bb\u7ffb\u9898\u89e3\u7684\u65f6\u5019\u7adf\u7136\u6ca1\u53d1\u73b0\u4e00\u4e2a\u7528\u62d3\u6251\u6392\u5e8f\u7684\u9898\u76ee\n\u65e2\u7136\u8fd9\u6837\u6211\u5c31\u5199\u4e00\u7bc7\u7528\u62d3\u6251\u6392\u5e8f\u7684\u9898\u89e3\u5427\n\u5176\u5b9e\u5927\u81f4\u601d\u8def\u548c\u697c\u4e0a\u4e00\u6837\u5c31\u662f\u6211\u7528\u62d3\u6251\u6392\u5e8f\u66ff\u4ee3\u4e86dfs\uff08~~\u6216\u8bb8\u80fd\u5feb\u4e00\u70b9~~\uff09\n\u7b97\u6cd5\u672c\u8d28\u90fd\u662f\u6811\u5f62dp\n\u8fd9\u91cc\u8bb2\u4e00\u8bb2\u62d3\u6251\u6392\u5e8f\u5728\u8fd9\u91cc\u7684\u5e94\u7528\uff0c\u62d3\u6251\u6392\u5e8f\u5c31\u662f\u8fdb\u884c\u4e00\u4e2a\u6392\u5e8f\uff0c\u6392\u5e8f\u9009\u62e9\u540e\u52a0\u5165\u961f\u5217\uff08\u548cbfs\u6709\u70b9\u76f8\u4f3c\uff09\u4e0d\u8fc7\u8fd9\u91cc\u7684\u6392\u5e8f\u540e\u5404\u4e2a\u8282\u70b9\u7684\u66f4\u65b0\u90fd\u4e0d\u53d7\u5f71\u54cd\uff08\u610f\u601d\u662f\u8bf4\u8fd9\u91cc\u8282\u70b9\u66f4\u65b0\u6240\u9700\u8981\u4e4b\u524d\u7684\u8282\u70b9\u90fd\u5df2\u7ecf\u88ab\u66f4\u65b0\u4e86\uff09\n\u4e0b\u9762\u5c31\u662f\u6fc0\u52a8\u4eba\u5fc3\u7684\u73af\u8282\u8fbd\uff0c\u4e0a\u4ee3\u7801\n\uff08\u91cc\u9762\u8fd8\u662f\u52a0\u5165\u4e86\u5fc5\u8981\u7684\u6ce8\u91ca\uff09\n```\n#include<cstdio>\n#include<iostream>\nusing namespace std;\n#define maxn 100010\n#define INF 0x3f3f3f3f\n\nint e[maxn],ne[maxn],h[maxn],f[maxn][3],q[maxn],idx=1,indeg[maxn],outdeg[maxn],vis[maxn];\n\nvoid add(int a,int b){\n    e[idx]=b;ne[idx]=h[a];h[a]=idx++;\n    e[idx]=a;ne[idx]=h[b];h[b]=idx++;\n    return;\n}\n\n/*\nf[u][0]+=min(f[v][0/1/2]) \u5b50\u6811\u548cu\u5747\u6709\u4fe1\u53f7 \u4e14\u5728u\u5efa\u4fe1\u53f7\u7ad9 \nf[u][1]=f[son][0]+\u03a3f[other_son][0/1]; \u5b50\u6811\u548cu\u5747\u6709\u4fe1\u53f7 \nf[u][2]+=min(f[v][0/1]) \u5b50\u6811\u6709\u4fe1\u53f7u\u65e0\u4fe1\u53f7 \n*/\n\nvoid topsort(int n){\n    int u,tail=0,head=0,updt;\n    for(int i=1;i<=n;i++){\n        if(indeg[i]<=1){\n            q[tail++]=i;\n            f[i][1]=1;\n            vis[i]++;\n        }\n    }\n    while(head<tail){\n        updt=INF;\n        u=q[head++];\n        f[u][0]=1;\n        vis[u]++;//vis[]=0/1/2 \u5206\u522b\u8868\u793a\u672a\u88ab\u66f4\u65b0\u8fc7/\u5728\u961f\u5217\u4e2d\u672a\u88ab\u66f4\u65b0/\u88ab\u66f4\u65b0\u8fc7\n        for(int i=h[u],v=e[h[u]];i!=0;i=ne[i],v=e[i]){\n            if(v==u||vis[v]==1)//\u672a\u5b8c\u6210\u66f4\u65b0\n                continue;\n            indeg[v]--;\n            if(vis[v]==0){//\u672a\u5165\u961f \n                if(indeg[v]<=1){\n                    q[tail++]=v;\n                    vis[v]++;\n                }\n                continue;\n            }\n            f[u][0]+=min(f[v][0],min(f[v][1],f[v][2]));\n            f[u][1]+=min(f[v][0],f[v][1]);\n            f[u][2]+=min(f[v][0],f[v][1]); \n            if(updt>f[v][0]-min(f[v][0],f[v][1])){\n                updt=f[v][0]-min(f[v][0],f[v][1]);\n            }\n        }\n        if(updt!=INF){\n            f[u][1]=f[u][1]+updt;\n        }\n    }\n    printf(\"%d\",min(f[u][0],f[u][1]));\n    //\u6839\u8282\u70b9\u5c31\u662f\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\n    return;\n}\n\nint main(){\n    int n,a,b;\n    scanf(\"%d\",&n);\n    for(int i=1;i<n;i++){\n        scanf(\"%d %d\",&a,&b);\n        add(a,b);\n        indeg[a]++;\n        indeg[b]++;\n        outdeg[a]++;\n        outdeg[b]++;\n    }\n    topsort(n);\n    return 0;\n}\n```\n",
        "postTime": 1576506827,
        "uid": 70019,
        "name": "yzbsy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "## \u9898\u76ee\u7c7b\u578b\u5206\u6790 & \u540c\u7c7b\u9898\u76ee\n\n### \u7c7b\u578b\u5206\u6790\n\n\u8fd9\u79cd\u9898\u76ee\u7684\u7279\u70b9\uff1a\u4e00\u68f5\u6811\u4e0a\u9009\u4e00\u4e9b\u5c3d\u91cf\u5c11\u7684\u70b9\u6253\u6807\u8bb0\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u4e0e\u6700\u8fd1\u7684\u6253\u4e86\u6807\u8bb0\u7684\u70b9\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $distance\\_limit$ (\u672c\u9898\u4e3a $1$)\n\n### similar problem\n\n\u8fd9\u79cd\u9898\u76ee\u6709\u5f88\u591a\u79cd\u53d8\u5f0f\uff0c\u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\uff1a\n\n1. \u6bd4\u8fd9\u9053\u9898\u96be\u4e00\u70b9\u7684\uff08$distance\\_limit$ \u4e3a $2$\uff09 [P2279 [HNOI2003]\u6d88\u9632\u5c40\u7684\u8bbe\u7acb](https://www.luogu.org/problem/P2279) (\u84dd\u9898)   \n2. \u8fd9\u9053\u9898\u7684\u540c\u7c7b\u9898\u76ee\u6a21\u677f [P3942 \u5c06\u519b\u4ee4](https://www.luogu.org/problem/P3942) (\u84dd\u9898)  \n3. \u8d85\u7ea7\u5347\u7ea7\u7248 [P3267 [JLOI2016/SHOI2016]\u4fa6\u5bdf\u5b88\u536b](https://www.luogu.org/problem/P3267) (\u7d2b\u9898)  \n\n\u5176\u4e2d\uff0c\u8fd9\u9053\u9898\u4e0e\u4e0a\u9762\u7684\u7b2c 1, 2 \u9898\u90fd\u53ef\u4ee5\u7528\u8d2a\u5fc3\u89e3\u51b3\uff0c\u7b2c 3 \u9898\u5219\u662f\u6076\u5fc3\u65e0\u654c\u5927DP\n\n### \u8fd9\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u80fd\u591f\u8d2a\u5fc3\u89e3\u51b3\u7684\u6807\u5fd7\n\n\u5728\u6bcf\u4e2a\u70b9\u4e0a\u6253\u6807\u8bb0\u7684\u4ee3\u4ef7\u76f8\u540c\uff08\u90fd\u4e3a $1$\uff09\u4e14\u6240\u6709\u70b9\u90fd\u9700\u8981\u6ee1\u8db3 \u201c\u6bcf\u4e2a\u70b9\u4e0e\u6700\u8fd1\u7684\u6253\u4e86\u6807\u8bb0\u7684\u70b9\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $distance\\_limit$\u201d\n\n\u90a3\u4e48\u6211\u4eec\u8ba8\u8bba\u4e00\u4e0b\u8fd9\u9898\u7684\u8d2a\u5fc3\n\n## solution\n\n\u8003\u8651\u6309 $depth$ \u4ece\u6df1\u5230\u6d45\u904d\u5386\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u7531\u904d\u5386\u987a\u5e8f\u53ef\u77e5\u5176\u5b50\u6811\u90fd\u5df2\u7ecf\u904d\u5386\u8fc7\u3002\n\n\u6240\u4ee5\u5982\u679c\u4ed6\u7684\u513f\u5b50\uff08\u4e0d\u5305\u62ec\u5b59\u5b50\u53ca\u4ee5\u4e0b\uff09\u6ca1\u6709\u4e00\u4e2a\u662f\u5efa\u4e86\u4fe1\u53f7\u5854\u7684\uff0c\u90a3\u8fd9\u4e2a\u70b9\u53ea\u80fd\u5728\u5176\u81ea\u5df1\u5904\u6216\u7236\u4eb2\u5904\u5efa\u5854\u3002\n\n\u8003\u8651\u56e0\u4e3a\u5176\u540e\u4ee3\u90fd\u5df2\u7ecf\u6709\u4fe1\u53f7\u4e86\uff0c\u6240\u4ee5\u5efa\u5728\u81ea\u5df1\u5904\uff08\u53ea\u80fd\u670d\u52a1\u81ea\u5df1\u4e0e\u7236\u4eb2\uff09\u4e0d\u5982\u5efa\u5728\u7236\u4eb2\u5904\uff08\u80fd\u670d\u52a1\u81ea\u5df1\uff0c\u7236\u4eb2\uff0c\u5144\u5f1f\u4ee5\u53ca\u7237\u7237\uff09\u4f18\n\n\u6240\u4ee5\u53ef\u4ee5\u8d2a\u5fc3\u4e86\n\n## \u62d3\u5c55\u5ef6\u4f38\n\n\u5bf9\u4e8e\u8fd9\u4e00\u7c7b\u9898\u76ee\u7684\u901a\u7528\u89e3\u6cd5\uff1a\n\n1. \u5efa\u6811\uff1b  \n2. \u521d\u59cb\u5316 $depth$\uff1b  \n3. \u628a\u8282\u70b9\u6309\u6df1\u5ea6\u4ece\u6df1\u5230\u6d45\u904d\u5386\uff1b  \n   \u5982\u679c\u4ed6\u7684\u540e\u4ee3\u6ca1\u6709\u4e00\u4e2a\u6253\u6807\u8bb0\u7684\u70b9\u4e0e\u4ed6\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $distance\\_limit$\uff0c\u5c31\u5728\u5176\u7956\u5b97\uff08\u4e0e\u5176\u9694\u4e86 $distance\\_limit$ \u4ee3\uff09\u5904\u6253\u6807\u8bb0\u3002\n   \n## \u4ee3\u7801\u8bf4\u660e\n\n1. dfs() \u51fd\u6570 : \u521d\u59cb\u5316\u5bb6\u8c31\u4fe1\u606f\uff08$fa$ \u6570\u7ec4\uff09\u4e0e $depth$ \u6570\u7ec4  \n2. type \u6570\u7ec4 : \u8bf7\u7ed3\u5408\u4ee3\u7801\u4e2d\u7b2c 69 ~ 71 \u884c\u4e00\u8d77\u770b\n   ```cpp\n   #define HAS_SignalTower 2  // \u8fd9\u4e2a\u8282\u70b9\u6709\u4fe1\u53f7\u5854\n   #define NEAR_SignalTower 1 // \u8fd9\u4e2a\u8282\u70b9\u6328\u7740\u4fe1\u53f7\u5854\n   #define NO_SignalTower 0   // \u8fd9\u4e2a\u8282\u70b9\u6ca1\u6709\u4e5f\u4e0d\u6328\u7740\u4fe1\u53f7\u5854\uff08\u65e0\u4fe1\u53f7\uff09\n   ```\n\n## code\n```cpp\n/*************************************\n * problem:      P2899 [USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network.\n * user ID:      63720.\n * user name:    Jomoo.\n * time:         2019-08-19.\n * language:     C++.\n * upload place: Luogu.\n*************************************/ \n\n#include <bits/stdc++.h>\nusing namespace std;\n#define puts_return(x) { puts(x); return 0; }\n#define write_return(x) { write(x); return 0; }\n\ntypedef signed char          int8;\ntypedef unsigned char       uint8;\ntypedef short                int16;\ntypedef unsigned short      uint16;\ntypedef int                  int32;\ntypedef unsigned            uint32;\ntypedef long long            int64;\ntypedef unsigned long long  uint64;\n\ntemplate <typename Int>\ninline Int read()       \n{\n    Int flag = 1;\n    char c = getchar();\n    while ((!isdigit(c)) && c != '-') c = getchar();\n    if (c == '-') flag = -1, c = getchar();\n    Int init = c & 15;\n    while (isdigit(c = getchar())) init = (init << 3) + (init << 1) + (c & 15);\n\treturn init * flag;\n}\n\ntemplate <typename Int>\ninline void write(Int x)\n{\n    if (x < 0) putchar('-'), x = ~x + 1;\n    if (x > 9) write(x / 10);\n    putchar((x % 10) | 48);\n}  \n\ntemplate <typename Int>\ninline void write(Int x, char nextch)\n{\n    write(x);\n    putchar(nextch);\n}\n\nint n, a[10007], fa[10007], depth[10007], type[10007];\nint ans = 0;\nvector<int> G[10007];\n\nbool cmp(int x, int y) \n{\n    return depth[x] > depth[y];\n}\n\nvoid dfs(int p, int f)\n{\n    fa[p] = f;\n    depth[p] = depth[f] + 1;\n    for (int nxt : G[p]) {\n        if (nxt != f) dfs(nxt, p);\n    }\n}\n\n#define HAS_SignalTower 2\n#define NEAR_SignalTower 1\n#define NO_SignalTower 0\n\nint main()\n{\n    scanf(\"%d\", &n);\n    memset(type, NO_SignalTower, sizeof(type));\n    int u, v;\n    for (int i = 1; i <= n; i++) {\n        a[i] = i;\n    }\n    for (int i = 2; i <= n; i++) {\n        u = read<int>();\n        v = read<int>();\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    dfs(1, 0);\n    sort(a + 1, a + n + 1, cmp);\n    for (int i = 1; i <= n; i++) {\n        if ((type[fa[a[i]]] != HAS_SignalTower) && (type[a[i]] == NO_SignalTower)) {\n            ans++;\n            // printf(\"build in %d.\\n\", fa[a[i]]);\n            type[a[i]] = NEAR_SignalTower;\n            type[fa[a[i]]] = HAS_SignalTower;\n            type[fa[fa[a[i]]]] = NEAR_SignalTower;\n        }\n    }\n    write(ans);\n    return 0;\n}\n```",
        "postTime": 1566217010,
        "uid": 63720,
        "name": "brealid",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "\u524d\u9644\uff1a  \n1.$near( i )$\uff1a\u4e0e$i$\u76f8\u90bb\u7684\u8282\u70b9\u7684\u96c6\u5408\uff0c\u4e0d\u5305\u62ec\u8282\u70b9  \n2.$son( i )$\uff1a$i$\u7684\u5b50\u8282\u70b9\u96c6\u5408  \n3.$fa( i )$\uff1a$i$\u7684\u7236\u4eb2\u8282\u70b9\u7f16\u53f7   \n\n# \u5206\u6790:\n\n\u770b\u5230\u8fd9\u9053\u9898\uff0c\u6211\u7b2c\u4e00\u4e2a\u60f3\u5230\u7684\u5c31\u662f\u2014\u2014  \n\u821e\u4f1a\u6a21\u578b\uff01  \n\u8fd9\u786e\u5b9e\u662f\u6700\u5bb9\u6613\u60f3\u5230\u7684\uff0c\u5e76\u4e14\u8fd9\u4e5f\u4f1a\u4e3a\u6211\u4eec\u7684\u8f6c\u79fb\u5e26\u6765\u4e00\u4e9b\u542f\u53d1\u3002  \n\u7136\u800c\uff0c\u5982\u679c\u6211\u4eec\u771f\u7684\u7528\u821e\u4f1a\u6a21\u578b\u53bb\u505a\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u60ca\u5947\u5730\u53d1\u73b0\u2014\u2014\u4e0d\u77e5\u9053\u5f53\u524d\u70b9\u8be5\u5f52\u5c5e\u4e8e\u54ea\u4e2a\u7535\u8bdd\u57fa\u7ad9\uff0c\u6240\u4ee5\u65e0\u6cd5\u6c42\u89e3\uff01   \n\u5176\u5b9e\u8fd9\u4e2a\u95ee\u9898\u5f88\u597d\u89e3\u51b3\uff0c\u6211\u4eec\u5c06\u5f52\u5c5e\u7684\u8fd9\u4e2a\u4fe1\u606f\u8bb0\u5165\u72b6\u6001\u4e4b\u4e2d\uff0c\u6240\u4ee5\u5c31\u6709\u4e86  \uff1a\n## \u5b9a\u4e49\u72b6\u6001\uff1a\n$DP( i, j )$\uff1a\u7b2c$i$\u53f7\u8282\u70b9\u5f52\u5c5e\u4e8e$j$\u53f7\u8282\u70b9\u4e0a\u7684\u57fa\u7ad9\u7684\u60c5\u51b5\u4e0b\u80fd\u4f7f\u5f97\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u7684\u6240\u6709\u8282\u70b9\u90fd\u53ef\u4ee5\u6536\u5230\u4fe1\u53f7\u9700\u8981\u7684\u6700\u5c11\u57fa\u7ad9\u6570\u91cf( $j\\in son(i)$ )  \n$best( i )$\uff1a\u7b2c$i$\u53f7\u8282\u70b9\u5f52\u5c5e\u4e8e\u81ea\u5df1\u7684\u513f\u5b50\u8282\u70b9\u4e0a\u7684\u57fa\u7ad9\u6216\u8005\u81ea\u5df1\u7684\u57fa\u7ad9\u7684\u60c5\u51b5\u4e0b\u80fd\u4f7f\u5f97\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u7684\u6240\u6709\u8282\u70b9\u90fd\u53ef\u4ee5\u6536\u5230\u4fe1\u53f7\u9700\u8981\u7684\u6700\u5c11\u57fa\u7ad9\u6570\u91cf  \n## \u8f6c\u79fb\uff1a\n\u8f6c\u79fb\u5176\u5b9e\u4e5f\u6bd4\u8f83\u597d\u5199\uff1a  \n1.$ DP( i, i ) = 1 + \\{\\sum_{v \\in son(i)}min(best(v), DP(v, i)-1)\\} $   \n\u8fd9\u4e2a\u7c7b\u4f3c\u4e8e\u821e\u4f1a\u6a21\u578b\u7684\u8f6c\u79fb\u3002  \n2.$ DP( i, fa( i ) ) = 1 + \\{\\sum_{v\\in son(i)} best(v)\\} $   \n\u8fd9\u4e2a\u60c5\u51b5\u9ed8\u8ba4i\u8282\u70b9\u4e0d\u653e\u57fa\u7ad9\uff0c\u6240\u4ee5\u5b83\u7684\u5b50\u8282\u70b9\u4eec\u90fd\u53ea\u80fd\u201c\u5404\u5bb6\u81ea\u626b\u95e8\u524d\u96ea\u201d\uff0c\u81ea\u5df1\u5c31\u5728\u81ea\u5df1\u7684\u5b50\u6811\u5185\u89e3\u51b3\u95ee\u9898\u4e86\u3002  \n3.$ DP( i, j ) = DP( j, j ) + \\{\\sum_{v\\in (son(i)\\backslash j)} best(v)\\} $   \n\u8fd9\u4e2a\u60c5\u51b5\u4e5f\u662f\u9ed8\u8ba4i\u8282\u70b9\u4e0d\u653e\u57fa\u7ad9\u3002\u6b64\u65f6\u7531\u4e8ei\u4f9d\u6258\u5728j\u4e0a\uff0c\u6240\u4ee5j\u4e00\u5b9a\u8981\u653e\u57fa\u7ad9\uff1b\u5176\u5b83\u7684\u8282\u70b9\u4e0d\u80fd\u9760i\u4e0a\u7684\u57fa\u7ad9\uff0c\u6240\u4ee5\u662f\u7528\u81ea\u5df1\u7684best\u6765\u89e3\u51b3\u3002  \n4.best\u7684\u8f6c\u79fb\uff1a  \n$best( i ) = min\\{ DP(i, j) | j\\in son(i) \\bigcup j=i \\}$  \n\n# \u4f18\u5316\uff1a\n    \n\u5982\u679c\u5f3a\u884c\u6c42\u89e3\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u65f6\u95f4\u662f$O( n^2 )$\u3002  \n\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u4e00\u4e9b\u8054\u7cfb\u2014\u2014  \n\u6211\u4eec\u53ef\u4ee5\u4ece$DP( i, fa( i ) )$\u8f6c\u79fb\u5230$DP( i, j )$( $j\u2208son( i )$ )\uff0c\u53ea\u9700\u8981\u51cf\u53bb$( best( j ) + 1 )$\u518d\u52a0\u4e0a$DP( j, j )$\u5c31\u53ef\u4ee5\u4e86\u3002  \n\u6240\u4ee5\uff0c\u6211\u4eec\u6700\u540e\u5f97\u5230\u7684\u65f6\u95f4\u662f$O( n )$\uff1b\u7a7a\u95f4\u5219\u53ea\u9700\u8981$O( n )$\uff08\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u8bb0\u5f55$DP( i, i )$\uff0c$DP( i, fa( i ) )$\u548c$best( i )$\uff09 \n# \u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <map>\nusing namespace std;\n \nconst int MAXN = 10005;\n \ntemplate<typename _T>\nvoid read( _T &x )\n{\n    x = 0;char s = getchar();int f = 1;\n    while( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n    while( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n    x *= f;\n}\n \ntemplate<typename _T>\nvoid write( _T x )\n{\n    if( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n    if( 9 < x ){ write( x / 10 ); }\n    putchar( x % 10 + '0' );\n}\n \ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n    return a < b ? a : b;\n}\n \nstruct edge\n{\n    int to, nxt;\n}Graph[MAXN * 2];\n \nint DP[MAXN][2] = {}, best[MAXN];\n//\u7b80\u5316\u4e4b\u540e\u7684DP\uff0c0\u8868\u793a\u9760\u81ea\u5df1\uff0c1\u8868\u793a\u9760\u7236\u4eb2\u8282\u70b9 \nint head[MAXN] = {};\nint n, cnt = 0;\n \nvoid addEdge( const int from, const int To )\n{\n    cnt ++;\n    Graph[cnt].to = To;\n    Graph[cnt].nxt = head[from];\n    head[from] = cnt;\n}\n \nvoid dfs( const int now, const int fa )\n{\n    int v;\n    DP[now][0] = 1;\n    DP[now][1] = 1;\n    //\u4e24\u79cd\u60c5\u51b5\u90fd\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u57fa\u7ad9\u6765\u8ba9\u81ea\u5df1\u63a5\u53d7\u4fe1\u53f7 \n    for( int i = head[now] ; i ; i = Graph[i].nxt )\n    {\n        v = Graph[i].to;\n        if( v ^ fa )\n        {\n            dfs( v, now );\n            DP[now][1] += best[v];\n            DP[now][0] += MIN( best[v], DP[v][1] - 1 );\n            //\u8f6c\u79fb \n        }\n    }\n    best[now] = DP[now][0];\n    //\u5c06\u5728\u81ea\u5df1\u4e0a\u9762\u5efa\u57fa\u7ad9\u7684\u72b6\u6001\u4f5c\u4e3a\u521d\u59cb\u72b6\u6001 \n    for( int i = head[now] ; i ; i = Graph[i].nxt )\n    {\n        v = Graph[i].to;\n        if( v ^ fa )\n        {\n            best[now] = MIN( best[now], DP[now][1] - best[v] - 1 + DP[v][0] );\n            //\u7701\u53bb\u8ba1\u7b97DP( i, j )\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u7528DP( i, fa( i ) )\u4e2d\u5f97\u5230\u7684\u7ed3\u679c\u6765\u8f6c\u79fb \n        }\n    }\n}\n \nint main()\n{\n    int u, v;\n    read( n );\n    for( int i = 1 ; i < n ; i ++ )\n    {\n        read( u ), read( v );\n        addEdge( u, v );\n        addEdge( v, u );\n    }\n    dfs( 1, 0 );\n    write( best[1] ), putchar( '\\n' );\n    //\u6839\u4e0a\u7684\u6700\u4f18\u89e3\u5c31\u662f\u6574\u4f53\u6700\u4f18\u89e3\uff1b1\u7684\u7236\u4eb2\u662f\u865a\u5efa\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528DP( 1, fa( 1 ) )\u7684\u72b6\u6001 \n    return 0;\n}\n```",
        "postTime": 1558588165,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network"
    },
    {
        "content": "#### \u5509\u53c8\u662f\u4e00\u9053n\u500d\u7ecf\u9a8c\u9898\uff0c\u4e0e\u6d88\u9632\u5c40\u7684\u8bbe\u7acb\u90a3\u9898\u6709\u5f02\u66f2\u540c\u5de5\u4e4b\u5999\uff0c~~\u5c31\u7279\u4e48\u4e00\u6837\u597d\u4e0d\u597d~~\n##### \u8bfb\u5b8c\u9898\u540e\u7a0d\u5fae\u601d\u8003\u4e00\u4e0b\u5c31\u77e5\u9053\uff0c\u5728\u4e00\u4e2a\u8fd8\u672a\u88ab\u8986\u76d6\u5230\u7684\u5730\u65b9\uff0c\u9009\u62e9\u81ea\u5df1\u80af\u5b9a\u4e0d\u5982\u9009\u62e9\u7236\u8282\u70b9\u4f18\u554a\uff0c\u6e90\u4e8e\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8d2a\u5fc3\u8fc7\u8fd9\u9898\u3002\n#### \u7136\u540e\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff0c\u5728\u5904\u7406\u7ed3\u70b9\u6df1\u5ea6\u65f6\u53ef\u4ee5\u7528\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u4e5f\u53ef\u4ee5\u50cf\u6211\u5199\u7684\u8fd9\u6837\n## \u8fd8\u662f\u770b\u4ee3\u7801\u5427\uff01\uff01\uff01\n```\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint w=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-') f=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\tw=(w<<3)+(w<<1)+ch-48;\n\t\tch=getchar();\n\t}\n\treturn w*f;\n} //\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48\u6211\u7684\u5feb\u8bfb\u5199\u8fd9b\u6837\nqueue<int> q;\nstack<int> s;\nint n,head[100010],cnt,fa[100010],ans;\nbool vis[100010];\nstruct Edge{\n\tint from,to,next,dis;\n}edge[100010];\ninline void addedge(int u,int v){\n\tcnt++;\n\tedge[cnt].dis=1;\n\tedge[cnt].from=u;\n\tedge[cnt].to=v;\n\tedge[cnt].next=head[u];\n\thead[u]=cnt;\n}//\u5230\u8fd9\u90fd\u662f\u5e38\u89c4\u64cd\u4f5c\uff0c\u5750\u597d\u51c6\u5907\u8d77\u98de\u5427\uff01\uff01\uff01\ninline void bfs(){\n\tint u,v,i,j,k;\n\ts.push(1);\n\tq.push(1);//\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\uff0cbfs\u7684\u8fdb\u961f\u987a\u5e8f\u5c31\u662f\u6309\u7167\u6df1\u5ea6\u6765\u7684\uff0c\u90a3\u4e48\u6211\u5f00\u4e00\u4e2a\u6808\u5b58\u4e00\u4e0b\uff0c\u5f39\u51fa\u7684\u65f6\u5019\u5c31\u662f\u6df1\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u7684\u4e86.\n\twhile(!q.empty()){\n\t\tu=q.front();\n\t\tq.pop();\n\t\tfor(i=head[u];i;i=edge[i].next){\n\t\t\tv=edge[i].to;\n\t\t\tif(fa[u]==v) continue;\n\t\t\ts.push(v);\n\t\t\tq.push(v);\n\t\t\tfa[v]=u;\n\t\t}\n\t}\n}\ninline void affect(int u){\n\tint i,j,k,v;\n\tvis[u]=true;\n\tfor(i=head[u];i;i=edge[i].next){\n\t\tv=edge[i].to;\n\t\tvis[v]=true;\n\t}//\u8fd9\u4e2a\u662f\u6807\u8bb0\u4e00\u4e2a\u70b9\u53ef\u4ee5\u5f71\u54cd\u7684\u70b9\u7684\u60c5\u51b5\n\treturn;\n}\ninline void dfs(){\n\tint u,v,i,j,k;\n\twhile(!s.empty()){\n\t\tu=s.top();\n\t\ts.pop();\n\t\tif(vis[u]) continue;\n\t\tans++;\n\t\taffect(fa[u]);//\u6ce8\u610f\uff1a\u6b64\u5904\u8981\u5728\u7236\u8282\u70b9\u5b89\u88c5\u8986\u76d6\uff0c\u53ef\u4ee5\u624b\u63a8\u4e00\u4e0b\u6b63\u786e\u6027\u3002\n\t}\n}\nint main(){\n\tint i,j,k;\n\tn=read();\n\tfor(i=1;i<n;i++){\n\t\tint x,y;\n\t\tx=read();\n\t\ty=read();\n\t\taddedge(x,y);\n\t\taddedge(y,x);\n\t}\n\tbfs();\n\tdfs();\n\t//while(!s.empty()){\n\t//\tint now=s.top();\n\t//\ts.pop();\n\t//\tcout<<now<<endl;\n\t//}//debug\u597d\u5e2e\u624b\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n#### \u5927\u6982\u5c31\u662f\u8fd9\u6837\u4e86\uff0c\u5e0c\u671b\u5927\u5bb6\u80fd\u987a\u5229a\u6389\u8fd9\u9898",
        "postTime": 1538137759,
        "uid": 106035,
        "name": "\u6e29\u8bcd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "# \u8d2a\u5fc3\n\t\u672c\u9898\u662f\u4e00\u9053\u5f88\u57fa\u672c\u7684\u9898.\n    \u9898\u5e72:\n    Farmer John has decided to give each of his cows a cell phone in hopes to encourage their social interaction. This, however, requires him to set up cell phone towers on his N (1 \u2264 N \u2264 10,000) pastures (conveniently numbered 1..N) so they can all communicate.\n\tExactly N-1 pairs of pastures are adjacent, and for any two pastures A and B (1 \u2264 A \u2264 N; 1 \u2264 B \u2264 N; A \u2260 B) there is a sequence of adjacent pastures such that A is the first pasture in the sequence and B is the last. Farmer John can only place cell phone towers in the pastures, and each tower has enough range to provide service to the pasture it is on and all pastures adjacent to the pasture with the cell tower.\n\tHelp him determine the minimum number of towers he must install to provide cell phone service to each pasture.\n\n\t\u672c\u9898\u8981\u6c42\u4f7f\u7528\u6700\u5c11\u7684\u7535\u78c1\u5854,\u628a\u6240\u6709\u7684\u8282\u70b9\u8986\u76d6\u6389.\u7531N-1\u6761\u8fb9\u6211\u4eec\u53ef\u4ee5\u4e86\u89e3\u5230,\u8fd9\u662f\u4e00\u68f5\u6811.\u4ece\u6811\u7684\u53f6\u5b50\u8282\u70b9\u5411\u4e0a\u770b,\u663e\u7136\u5728\u513f\u5b50\u8282\u70b9\u6446\u7535\u78c1\u5854\u662f\u4e0d\u5408\u7b97\u7684.\u6240\u4ee5\u5f88\u663e\u7136\u5730,\u4ece\u6700\u540e\u4e00\u5c42\u5411\u4e0a\u641c\u7d22,\u6bcf\u9047\u5230\u4e00\u4e2a\u513f\u5b50\u8282\u70b9\u6ca1\u6709\u88ab\u8986\u76d6,\u5c31\u5728\u4ed6\u7236\u4eb2\u4e0a\u6446\u4e00\u4e2a\u7535\u78c1\u5854.\u5f88\u663e\u7136,\u4ece\u4e0b\u5411\u4e0a\u679a\u4e3e,\u5bf9\u4e8e\u672c\u9898\u7684\u6570\u636e\u8fd9\u79cd\u65b9\u6cd5\u662f\u6210\u7acb\u7684.\n    \u4ee3\u7801:\n```cpp\n#pragma GCC optimize (\"Ofast\")\n\n#include \"iostream\"\n#include \"stdio.h\"\n#include \"vector\"\n\n#define rint register int\n\nusing namespace std;\n\ninline int read()\n{\n    int x=0ll,t=1ll;\n    char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-')t=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-48,ch=getchar();\n    return x*t;\n}\n\nbool check[10001];\nint n, fa[10001], ans, mxdp;\nvector <int> mp[10001], fl[10001];\n\ninline void dfs (int u, int de)\n{\n\tmxdp = max (mxdp, de);\n\tfl[de].push_back (u);\n\tint v;\n\tfor (rint i = 0; i < mp[u].size (); i ++)\n\t{\n\t\tv = mp[u][i];\n\t\tif (v == fa[u]) continue;\n\t\tfa[v] = u;\n\t\tdfs (v, de + 1);\n\t}\n}\n\ninline void work (int u)\n{\n\tcheck[u] = true;\n\tfor (rint i = 0; i < mp[u].size (); i ++) check[mp[u][i]] = true;\n}\n\nint main ()\n{\n\tn = read ();\n\tint u, v;\n\tfor (rint i = 1; i < n; i ++)\n\t{\n\t\tu = read (), v = read ();\n\t\tmp[u].push_back (v);\n\t\tmp[v].push_back (u);\n\t}\n\t\n\tdfs (1, 0);\n\t\n\tfor (rint i = mxdp; i >= 0; i --)\n\t{\n\t\tfor (rint j = 0; j < fl[i].size (); j ++)\n\t\t{\n\t\t\tu = fl[i][j], v = fa[u];\n\t\t\tif (check[u]) continue;\n\t\t\tans ++;\n\t\t\twork (v);\n\t\t}\n\t}\n\tprintf (\"%d\", ans);\n}\n```",
        "postTime": 1530171089,
        "uid": 65678,
        "name": "ELLIAS",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    },
    {
        "content": "\u8be6\u89c1\u672c\u4eba\u535a\u5ba2<http://www.cnblogs.com/huangdalaofighting/p/6917309.html\n\n\u5f88\u7ecf\u5178\u7684\u6811\u5f62dp\uff0c\u72b6\u6001\u4e3af[i][3]\u5206\u522b\u8868\u793a\u6b64\u8282\u70b9\u4e0d\u9009\u4e14\u4e0d\u80fd\u88ab\u8986\u76d6\uff0c\u6b64\u8282\u70b9\u9009\uff0c\u6b64\u8282\u70b9\u4e0d\u9009\u4f46\u80fd\u88ab\u8986\u76d6\u4e09\u79cd\u60c5\u51b5\uff0c\u7136\u540e\u52a8\u89c4\u65b9\u7a0b\u5c31\u5f88\u663e\u7136\u4e86\u3002\u4e0d\u8fc7\u591a\u6982\u8ff0\uff0c\u4ee5\u4e0b\u662fAC\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nint n,m;\nint f[10001][3];\nstruct student\n{\n    int next,to;\n}edge[30001];\nint head[10001],size;\nvoid putin(int from,int to)\n{\n    size++;\n    edge[size].next=head[from];\n    edge[size].to=to;\n    head[from]=size;\n}\nvoid dfs(int k,int father)\n{\n    int f0=2000000000,f2=0,f1=0,w=0,i,s=0;\n    for(i=head[k];i!=-1;i=edge[i].next)\n    {\n        int y=edge[i].to;\n        if(y==father)continue;\n        dfs(y,k);\n        s=min(f[y][1],f[y][0]);\n        w+=s;\n        if(f[y][1]-s<f0)f0=f[y][1]-s;\n        f1+=min(f[y][1],min(f[y][0],f[y][2]));\n        if(f2<2000000000)f2+=f[y][0];\n    }\n    f[k][1]=f1+1;f[k][2]=f2;\n    if(f0==2000000000)f[k][0]=2000000000;\n    else f[k][0]=w+f0;\n}\nint main()\n{\n    int i,j,from,to;\n    cin>>n;\n    for(i=1;i<=n;i++)head[i]=-1;\n    for(i=1;i<n;i++)\n    {\n        scanf(\"%d%d\",&from,&to);\n        putin(from,to);\n        putin(to,from);\n    }\n    dfs(1,0);\n    cout<<min(f[1][0],f[1][1]);\n    return 0;\n}\n```",
        "postTime": 1496020470,
        "uid": 36357,
        "name": "kakakaka",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2899 \u3010[USACO08JAN]\u624b\u673a\u7f51\u7edcCell Phone Network\u3011"
    }
]