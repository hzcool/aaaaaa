[
    {
        "content": "**\u9898\u76ee\u5927\u610f**\uff1a\u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u5224\u5b9a\u8fd9\u5f20\u65e0\u5411\u56fe\u662f\u5426\u662f\u4e00\u5f20\u6811\u4e4b\u955c\u50cf\u56fe\u3002\u82e5\u4e00\u5f20\u56fe\u53ef\u4ee5\u7531\u4e24\u68f5\u4e00\u6a21\u4e00\u6837\u7684\u6811\u5171\u7528\u53f6\u8282\u70b9\u5f97\u5230\uff0c\u5219\u79f0\u4e4b\u4e3a\u6811\u4e4b\u955c\u50cf\u56fe\u3002\n\n\u6ce8\u610f\u9664\u6839\u5916\uff0c\u6240\u6709\u53f6\u8282\u70b9\u5373\u5ea6\u6570\u4e3a $1$ \u7684\u70b9\u5fc5\u987b\u5168\u90e8\u5408\u5e76\u3002\n\n**\u6570\u636e\u8303\u56f4**\uff1a\n* $3\\leq n,m\\leq 10^5$\u3002\n\n\u8003\u8651\u5c06\u95ee\u9898\u5206\u6210\u4e24\u6b65\u89e3\u51b3\uff1a\n1. \u627e\u5230\u88ab\u5408\u5e76\u7684\u53f6\u8282\u70b9\u3002\n2. \u4f9d\u9760\u53f6\u8282\u70b9\u5bf9\u56fe\u8fdb\u884c\u5224\u5b9a\u3002\n\n\u6211\u4eec\u5148\u5b8c\u6210\u7b2c\u4e00\u6b65\u3002\n\n\u8003\u8651\u627e\u5230\u56fe\u4e0a\u7684\u67d0\u4e00\u4e2a\u73af\uff0c\u5e76\u53bb\u6389\u73af\u4e0a\u7684\u6240\u6709\u8fb9\u3002\u90a3\u4e48\u5269\u4e0b\u7684\u56fe\u5c06\u4f1a\u662f\u8fd9\u6837\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/b96t0vag.png)\n\n~~\u6211\u7edd\u5bf9\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u8d34\u7684\u5b98\u65b9\u9898\u89e3\u56fe\u3002~~\n\n\u6211\u4eec\u53d1\u73b0\u73b0\u5728\u56fe\u4e2d\u7684\u8fde\u901a\u5757\u6700\u591a\u53ea\u5305\u542b\u4e24\u4e2a\u73af\u4e0a\u7684\u70b9\u3002\u5982\u679c\u6709\u5305\u542b\u4e09\u4e2a\u4ee5\u4e0a\u73af\u70b9\u7684\u8fde\u901a\u5757\u53ef\u4ee5\u76f4\u63a5\u5224\u6389\u3002\n\n\u518d\u8003\u8651\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u73af\u70b9\u7684\u8fde\u901a\u5757\u3002\u6211\u4eec\u5206\u522b\u8ba9\u8fd9\u4e24\u4e2a\u73af\u70b9 $x,y$ \u4f5c\u4e3a\u4e24\u68f5\u6811\u7684\u6839\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u53f6\u8282\u70b9\uff0c\u5176\u5230 $x,y$ \u7684\u8ddd\u79bb\u5fc5\u7136\u76f8\u540c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4efb\u610f\u4e00\u4e2a\u73af\u5e76\u5c06\u5176\u6240\u6709\u8fb9\u5220\u53bb\uff0c\u518d\u627e\u5230\u5220\u53bb\u540e\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u73af\u70b9\u7684\u8fde\u901a\u5757\uff0c\u5e76\u5206\u522b\u4ece\u8fd9\u4e24\u4e2a\u73af\u70b9\u51fa\u53d1 bfs\uff0c\u5373\u53ef\u5b8c\u6210\u7b2c\u4e00\u6b65\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u56fe\u4e2d\u4e0d\u4e00\u5b9a\u5b58\u5728\u73af\uff0c\u73af\u4e0a\u7684\u8fb9\u5220\u53bb\u540e\u4e5f\u53ef\u80fd\u4e0d\u5b58\u5728\u5305\u542b\u4e24\u4e2a\u73af\u70b9\u7684\u8fde\u901a\u5757\u3002\n\n\u5bf9\u4e8e\u56fe\u4e2d\u4e0d\u5b58\u5728\u73af\u7684\u60c5\u51b5\uff0c\u5219\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u5ea6\u4e3a $1$ \u7684\u70b9\u3002\u800c\u6839\u636e\u9898\u610f\uff0c\u663e\u7136\u5ea6\u4e3a $1$ \u7684\u70b9\u53ea\u80fd\u6709 $0$ \u6216 $2$ \u4e2a\u3002\u5982\u679c\u662f $2$ \u4e2a\u70b9\u7684\u8bdd\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4ece\u8fd9\u4e24\u4e2a\u70b9\u51fa\u53d1\u8fdb\u884c bfs\u3002\n\n\u800c\u5bf9\u4e8e\u5b58\u5728\u73af\u4f46\u5220\u53bb\u73af\u8fb9\u4e0d\u5b58\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u5305\u542b\u4e24\u4e2a\u73af\u70b9\u7684\u60c5\u51b5\uff0c\u5982\u679c\u56fe\u4e2d\u4e0d\u5b58\u5728\u4e24\u4e2a\u5ea6\u4e3a $1$ \u7684\u70b9\uff0c\u5219\u56fe\u53ea\u80fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u73af\u3002\u800c\u56fe\u662f\u4e00\u4e2a\u73af\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u76f4\u63a5\u6309\u7167\u70b9\u6570\u7684\u5947\u5076\u6027\u5224\u5b9a\u5373\u53ef\u3002\n\n\u518d\u6765\u5b8c\u6210\u7b2c\u4e8c\u6b65\u3002\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u786e\u4fdd\u53f6\u5b50\u4e24\u8fb9\u90fd\u662f\u6811\u3002\u867d\u7136\u770b\u8d77\u6765\u6709\u5f88\u591a\u4e1c\u897f\u8981\u5224\uff0c\u4f46\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u70b9\u6570\u4e0e\u8fb9\u6570\u7684\u5173\u7cfb\uff0c\u5e94\u6ee1\u8db3\u8fd9\u6837\u4e00\u4e2a\u5173\u7cfb\u5f0f\uff1a\n$$\nn-2+c=m\n$$\n\n\u5176\u4e2d $c$ \u4e3a\u53f6\u5b50\u7684\u4e2a\u6570\u3002\n\n\u4e4b\u540e\u6211\u4eec\u8003\u8651\u4ece\u53f6\u5b50\u5f80\u4e24\u4e2a\u65b9\u5411\u5206\u522b bfs\u3002\u5bb9\u6613\u53d1\u73b0\u6b64\u65f6\u53f6\u5b50\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u5df2\u7ecf\u88ab\u786e\u5b9a\uff0c\u6240\u4ee5\u4e0a\u9762\u7684\u975e\u53f6\u8282\u70b9\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\u4e5f\u5fc5\u7136\u786e\u5b9a\uff0c\u76f4\u63a5\u5224\u65ad\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n+m)$\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=100000;\n\nint n,m;\nstruct side{\n  int y,next,tag;\n}e[N*2+9];\nint lin[N+9],cs;\n\nvoid Ins(int x,int y){e[++cs].y=y;e[cs].next=lin[x];lin[x]=cs;}\nvoid Ins2(int x,int y){Ins(x,y);Ins(y,x);}\n\nint deg[N+9];\n\nvoid into(){\n  scanf(\"%d%d\",&n,&m);\n  cs=1;\n  for (int i=1;i<=m;++i){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    Ins2(x,y);\n    ++deg[x];++deg[y];\n  }\n}\n\nint ans;\n\nbool Check_ans_deg(){  //\u5224\u65ad\u56fe\u4e2d\u5ea6\u6570\u4e3a 1 \u7684\u70b9\u7684\u6570\u91cf\u662f\u5426\u5408\u6cd5\n  int cnt=0;\n  for (int i=1;i<=n;++i) cnt+=deg[i]==1;\n  return !cnt||cnt==2;\n}\n\nint vis[N+9];\n\nvoid Dfs_vis(int k){\n  vis[k]=1;\n  for (int i=lin[k];i;i=e[i].next)\n    if (!vis[e[i].y]) Dfs_vis(e[i].y);\n}\n\nbool Check_ans_connect(){  //\u5224\u65ad\u56fe\u662f\u5426\u8fde\u901a\uff0c\u5e94\u8be5\u6ca1\u5fc5\u8981\n  int cnt=0;\n  for (int i=1;i<=n;++i)\n    if (!vis[i]) ++cnt,Dfs_vis(i);\n  for (int i=1;i<=n;++i) vis[i]=0;\n  return cnt==1;\n}\n\nbool Check_ans_circle(){  //\u5224\u65ad\u56fe\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u73af\u7684\u60c5\u51b5\n  for (int i=1;i<=n;++i)\n    if (deg[i]^2) return 1;\n  ans=n&1^1;\n  return 0;\n}\n\nint cir[N+9],cc;\nint sta[N+9],cst;\n\nbool Dfs_cir(int k,int fa){  //\u627e\u5230\u4efb\u610f\u4e00\u4e2a\u73af\n  int res=0;\n  vis[k]=1;\n  sta[++cst]=k;\n  for (int i=lin[k];i;i=e[i].next){\n    int y=e[i].y;\n    if (y==fa) continue;\n    if (vis[y]){\n      for (int i=cst;i>=1;--i){\n        cir[++cc]=sta[i];\n        if (sta[i]==y) break;\n      }\n      res=1;\n    }else if (Dfs_cir(y,k)) res=1;\n    if (res) break;\n  }\n  --cst;\n  return res;\n}\n\nint bel[N+9];\n\nvoid Dfs_bel(int k,int b){\n  bel[k]=b;\n  for (int i=lin[k];i;i=e[i].next)\n    if (!e[i].tag&&!bel[e[i].y]) Dfs_bel(e[i].y,b);\n}\n\nint rot[2];\n\nvoid Get_rot(){  //\u627e\u5230\u53ef\u4ee5\u4f5c\u4e3a\u6839\u7684\u4e24\u4e2a\u70b9\uff0c\u653e\u5165 rot[0/1] \u4e2d\n  //\u5982\u679c\u6709\u4e24\u4e2a\u5ea6\u6570\u4e3a 1 \u7684\u70b9\uff0c\u76f4\u63a5\u7528\u5b83\u4eec\u4f5c\u4e3a\u6839\n  int cr=0;\n  for (int i=1;i<=n;++i)\n    if (deg[i]==1) rot[cr++]=i;\n  if (cr) return;\n  //\u5426\u5219\u8003\u8651\u627e\u5230\u4e00\u4e2a\u73af\uff0c\u7136\u540e\u65ad\u6389\u6240\u6709\u73af\u8fb9\uff0c\u518d\u627e\u5305\u542b\u4e24\u4e2a\u73af\u70b9\u7684\u8fde\u901a\u5757\n  Dfs_cir(1,0);\n  for (int i=1;i<=cc;++i){\n    int x=cir[i],y=cir[i%cc+1];\n    for (int i=lin[x];i;i=e[i].next)\n      if (e[i].y==y) e[i].tag=e[i^1].tag=1;\n  }\n  for (int i=1;i<=cc;++i)\n    if (!bel[cir[i]]) Dfs_bel(cir[i],cir[i]);\n  for (int i=1;i<=cc;++i)\n    if (cir[i]^bel[cir[i]]) rot[0]=cir[i],rot[1]=bel[cir[i]];\n}\n\nint dis[2][N+9];\nqueue<int>q;\n\nvoid Bfs_dis(int id,int st){\n  dis[id][st]=1;q.push(st);\n  for (;!q.empty();){\n    int t=q.front();q.pop();\n    for (int i=lin[t];i;i=e[i].next)\n      if (!dis[id][e[i].y]) dis[id][e[i].y]=dis[id][t]+1,q.push(e[i].y);\n  }\n}\n\nint leaf[N+9],tag[N+9];\n\nvoid Get_leaf(){  //\u627e\u53f6\u5b50\n  Bfs_dis(0,rot[0]);\n  Bfs_dis(1,rot[1]);\n  for (int i=1;i<=n;++i)\n    if (!(leaf[i]=dis[0][i]==dis[1][i])) tag[i]=dis[0][i]>dis[1][i];\n  //\u5c06\u70b9\u5206\u4e3a\u4e09\u7c7b\n  //leaf[i]=1 \u8868\u793a i \u662f\u53f6\u5b50\n  //tag[i] \u8868\u793a i \u4e0d\u662f\u53f6\u5b50\u7684\u60c5\u51b5\u4e0b\uff0ci \u5c5e\u4e8e\u54ea\u68f5\u6811\n}\n\nint Dfs_leaf_cnt(int k){\n  int res=1;\n  for (int i=lin[k];i;i=e[i].next)\n    if (leaf[e[i].y]&&!vis[e[i].y]) res+=Dfs_leaf_cnt(e[i].y);\n  return res;\n}\n\nbool Check_leaf_cnt(){  //\u6839\u636e\u70b9\u6570\u4e0e\u8fb9\u6570\u7684\u5173\u7cfb\u5224\u65ad\u56fe\u88ab\u53f6\u5b50\u5206\u5f00\u540e\uff0c\u662f\u4e0d\u662f\u4e24\u68f5\u6811\n  int cnt=0;\n  for (int i=1;i<=n;++i) cnt+=leaf[i];\n  return n-2+cnt==m;\n}\n\nint ord[2][N+9],bfs[2][N+9],co[2];\nint fa[2][N+9];\n\nvoid Bfs_ord(){\n  for (int i=1;i<=n;++i)\n    if (leaf[i]) q.push(i);\n  for (;!q.empty();){\n    int t=q.front(),tt=tag[t];q.pop();\n    if (leaf[t]) ord[0][bfs[0][t]=++co[0]]=t,ord[1][bfs[1][t]=++co[1]]=t;\n    else ord[tt][bfs[tt][t]=++co[tt]]=t;\n    for (int i=lin[t];i;i=e[i].next){\n      int y=e[i].y;\n      --deg[y];\n      if (bfs[tag[y]][y]) continue;\n      fa[tag[y]][t]=y;\n      if (deg[y]<=1) q.push(y);\n    }\n  }\n}\n\nbool Check_ans(){  //\u6700\u540e\u7684\u5224\u65ad\n  //\u5148\u8dd1\u51fa\u4e00\u4e2abfs\u5e8f\uff0c\u540c\u65f6\u7ed9\u4e24\u68f5\u6811\u4e0a\u7684\u70b9\u91cd\u65b0\u6807\u53f7\uff0c\u518d\u5229\u7528\u6811\u4e0a\u7684\u7236\u5b50\u5173\u7cfb\u5224\u5b9a\n  Bfs_ord();\n  for (int i=1;i<=co[0];++i)\n    if (bfs[0][fa[0][ord[0][i]]]^bfs[1][fa[1][ord[1][i]]]) return 0;\n  return 1;\n}\n\nvoid Get_ans(){\n  if (!Check_ans_deg()) return;\n  if (!Check_ans_connect()) return;\n  if (!Check_ans_circle()) return;\n  Get_rot();\n  Get_leaf();\n  if (!Check_leaf_cnt()) return;\n  ans=Check_ans();\n}\n\nvoid work(){\n  Get_ans();\n}\n\nvoid outo(){\n  puts(ans?\"YES\":\"NO\");\n}\n\nint main(){\n  into();\n  work();\n  outo();\n  return 0;\n}\n```",
        "postTime": 1601637239,
        "uid": 32331,
        "name": "hezlik",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4672 \u3010[BalticOI 2011 Day2]Tree Mirroring\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u6709\u8da3\u7684\u505a\u6cd5\u3002\n\n[Tree Mirroring](https://www.luogu.com.cn/problem/P4672)\n\n> \u7ed9\u5b9a\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u201c\u6811\u955c\u50cf\u56fe\u201d\u3002\n>\n> \u201c\u6811\u955c\u50cf\u56fe\u201d\u5b9a\u4e49\u4e3a\uff1a\u53ef\u4ee5\u7531\u4e00\u68f5\u6811\u590d\u5236\u4e00\u6b21\uff0c\u518d\u5c06\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\u5408\u5e76\u5f97\u5230\u7684\u56fe\u3002\n\n\u5982\u679c\u786e\u5b9a\u4e86\u5bf9\u79f0\u7684\u4e24\u4e2a\u6811\u7684\u6811\u6839\uff0c\u5224\u65ad\u662f\u5426\u5408\u6cd5\u53ef\u4ee5 $O(n)$ \u89e3\u51b3\u3002\n\n\u5177\u4f53\u65b9\u6cd5\u4e3a\uff0c\u627e\u5230\u5bf9\u79f0\u8f74\u4e0a\u7684\u8282\u70b9\uff08\u5230\u4e24\u4e2a\u6839\u6700\u77ed\u8ddd\u79bb\u76f8\u7b49\u7684\u70b9\uff09\uff0c\u4e0d\u65ad\u5bf9\u5e94\u5230\u7236\u4eb2\uff08\u57fa\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7236\u4eb2\u552f\u4e00\uff09\u3002\n\n\u5982\u679c\u80fd\u4e00\u76f4\u5bf9\u5e94\u4e0a\u53bb\u5c31\u5408\u6cd5\u3002\n\n\u5982\u679c\u679a\u4e3e\u4e24\u4e2a\u6811\u6839\u4e00\u6b21\u5224\u5b9a\uff0c\u590d\u6742\u5ea6\u4e3a $O(n^3)$\u3002\n\n\u7a0d\u52a0\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u6709\u89e3\uff0c\u90a3\u4e48\u4efb\u610f\u975e\u5bf9\u79f0\u8f74\u4e0a\u7684**\u5bf9\u5e94\u8282\u70b9**\u90fd\u80fd\u4f5c\u4e3a\u4e00\u5bf9\u6839\u3002\n\n\u800c\u4e14\u5bf9\u79f0\u8f74\u4e0a\u7684\u8282\u70b9\u5ea6\u6570\u4e00\u5b9a\u4e3a $2$\uff0c\u4e14\u4e00\u5b9a\u8fde\u63a5\u4e24\u4e2a**\u5bf9\u5e94\u8282\u70b9**\uff0c\u6545\u53ef\u4ee5\u53ea\u679a\u4e3e\u67d0\u4e2a\u5728\u5bf9\u79f0\u8f74\u4e0a\u7684\u70b9\uff0c\u590d\u6742\u5ea6 $O(n^2)$\u3002\n\n\u4e4b\u540e\u7684\u4e3b\u8981\u4f18\u5316\u65b9\u5411\u5728\u4e8e\u51cf\u5c11\u5224\u5b9a\u6b21\u6570\uff0c\u800c\u975e\u52a0\u5feb\u5224\u5b9a\u901f\u5ea6\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u56fe\u4e2d\u4e00\u5b9a\u6709\u73af\uff0c\u4e14\u4efb\u610f\u4e00\u4e2a\u73af\u90fd\u7531\u5bf9\u79f0\u7684\u4e24\u90e8\u5206\u6784\u6210\uff0c\u800c\u4e14\u4e00\u5b9a\u662f\u5076\u73af\u3002\n\n\u90a3\u5c31\u53ef\u4ee5\u60f3\u5230\uff0c\u5229\u7528\u5ea6\u6570\u505a\u5339\u914d\uff0c\u53ea\u6709\u4e00\u4e2a\u70b9**\u80fd\u628a\u8fd9\u4e2a\u73af\u5256\u6210\u4e24\u4e2a\u8f74\u5bf9\u79f0\u7684\u90e8\u5206**\uff08Hash \u5224\u65ad\uff09\u65f6\uff0c\u624d\u8fdb\u884c\u5224\u5b9a\u3002\n\n\u5177\u4f53\u4ee3\u7801\u53ef\u4ee5[\u770b\u8fd9\u91cc](https://loj.ac/s/1491768)\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u590d\u6742\u5ea6\u5e76\u4e0d\u6b63\u786e\uff0c\u4f46\u662f\u4e2a\u4eba\u8ba4\u4e3a\u4e5f\u5e76\u4e0d\u597d\u5361\uff0c\u5b9e\u9645\u4e5f\u8dd1\u7684\u98de\u5feb\u3002\n\n\u5f53\u7136\u4e5f\u4e0d\u80fd\u6b62\u6b65\u4e8e\u6b64\uff0c\u56e0\u4e3a\u8fd8\u6709\u66f4\u4f18\u79c0\u7684\u6027\u8d28\u3002\n\n\u5982\u679c\u73af\u7684\u5927\u5c0f\u4e3a $n$\uff0c\u90a3\u4e48\u7279\u5224\u6389\uff0c\u53ea\u6709 $n=m$ \u65f6\u56fe\u5408\u6cd5\u3002\u5426\u5219\u4e00\u5b9a\u80fd\u627e\u5230\u4efb\u610f\u4e00\u4e2a\u73af\u5916\u4e00\u70b9 $o$\u3002\n\n\u5982\u679c\u56fe\u5408\u6cd5\uff0c\u4e0d\u96be\u53d1\u73b0 $o$ \u5230\u73af\u4e00\u5b9a\u6709\u4e14\u53ea\u6709\u4e24\u6761\u8def\u5f84\uff0c\u800c\u4e14\u8def\u5f84\u4e0e\u73af\u7684\u4ea4\u70b9\u6070\u597d\u662f\u5bf9\u79f0\u7684\u5bf9\u5e94\u70b9\uff01\n\n\u8fd9\u6837\u5c31\u53ea\u9700\u8981\u627e\u73af&\u5224\u5b9a\u4e00\u6b21\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e25\u683c $O(n)$\u3002\n\n\u6ce8\u610f\u5728\u5b9e\u73b0\u65f6\u8981\u65f6\u523b `return false`\uff0c\u56e0\u4e3a\u7ed9\u5b9a\u7684\u56fe\u662f\u4efb\u610f\u56fe\uff0c\u4e0d\u80fd\u7eaf\u7cb9\u5f53\u6210\u5408\u6cd5\u56fe\u60f3\u5f53\u7136\u7684\u8fdb\u884c\u4e00\u4e9b\u7edf\u8ba1\u3002\n\n\u8fd8\u6709\u5c31\u662f\u867d\u7136\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u624d\u662f\u4e25\u683c\u590d\u6742\u5ea6\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5b8c\u5168\u6253\u4e0d\u8fc7\u7b2c\u4e00\u79cd\uff0c\u4e16\u4e8b\u96be\u6599\uff08\n\n\u4ee3\u7801\u653e\u7684\u7b2c\u4e8c\u79cd\uff1a\n\n```cpp\n#include<bits/stdc++.h>\ntypedef long long LL;\n#define rep(i, a, b) for(int i = (a); i <= (b); i ++)\n#define per(i, a, b) for(int i = (a); i >= (b); i --)\n#define Ede(i, u) for(int i = head[u]; i; i = e[i].nxt)\nusing namespace std;\n\nint read() {\n\tint x = 0, f = 1; char c = getchar();\n\twhile(c < '0' || c > '9') f = (c == '-') ? - 1 : 1, c = getchar();\n\twhile(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n\treturn x * f;\n}\n\n#define eb emplace_back\ntypedef vector<int> vec;\nconst int N = 1e5 + 10;\nint n, m; vec g[N];\n\nint s, t, par[N]; bool vis[N], flag = false;\n\nvoid dfs(int u, int fa) {\n\tvis[u] = true, par[u] = fa;\n\tfor(int v : g[u]) if(v != fa) {\n\t\tif(vis[v]) {if(! flag) s = u, t = v, flag = true; continue;}\n\t\tdfs(v, u);\n\t}\n}\n\nint tot, cir[N];\n\nvoid getcir() {\n\tdfs(1, 0);\n\trep(i, 1, n) if(! vis[i]) {puts(\"NO\"); exit(0);}\n\tif(!  flag) {puts(\"NO\"); exit(0);}\n\twhile(s != t) cir[++ tot] = s, s = par[s];\n\tcir[++ tot] = t;\n\tif(tot & 1) {puts(\"NO\"); exit(0);}\n\tif(tot == n) {puts(n == m ? \"YES\" : \"NO\"); exit(0);}\n}\n\nint dis[2][N], fat[2][N], mat[N];\n\nvoid dfs(int u, int fa, int o) {\n\tfat[o][u] = fa;\n\tif(dis[0][u] == dis[1][u]) return;\n\tfor(int v : g[u]) if(v != fa) {\n\t\tif(fat[o][v]) {flag = false; return;}\n\t\tdfs(v, u, o);\n\t\tif(! flag) return;\n\t}\n}\n\nbool check(int s, int t) {\n\trep(i, 1, n) dis[0][i] = dis[1][i] = mat[i] = fat[0][i] = fat[1][i] = 0;\n\t\n\tqueue<int> q;\n\tdis[0][s] = 1, q.push(s);\n\twhile(! q.empty()) {int u = q.front(); q.pop(); for(int v : g[u]) if(! dis[0][v]) dis[0][v] = dis[0][u] + 1, q.push(v);}\n\tdis[1][t] = 1, q.push(t);\n\twhile(! q.empty()) {int u = q.front(); q.pop(); for(int v : g[u]) if(! dis[1][v]) dis[1][v] = dis[1][u] + 1, q.push(v);}\n\tflag = true, dfs(s, 0, 0); if(! flag) return false;\n\tflag = true, dfs(t, 0, 1); if(! flag) return false;\n\trep(i, 1, n) if(dis[0][i] == dis[1][i]) mat[i] = i, q.push(i);\n\twhile(! q.empty()) {\n\t\tint u = q.front(); q.pop();\n\t\tint v = mat[u];\n\t\tint nu = fat[0][u], nv = fat[1][v];\n\t\tif(! nu || ! nv) {\n\t\t\tif(! nu && nv) return false;\n\t\t\tif(! nv && nu) return false;\n\t\t\tcontinue;\n\t\t}\n\t\tif(g[nu].size() != g[nv].size()) return false;\n\t\tif(! mat[nu]) mat[nu] = nv, q.push(nu); else if(mat[nu] != nv) return false;\n\t}\n\trep(i, 1, n) mat[mat[i]] = i;\n\trep(i, 1, n) if(! mat[i]) return false;\n\treturn true;\n}\n\nbool valid[N];\n\nbool solve() {\n\trep(i, 1, n) vis[i] = false;\n\trep(i, 1, tot) vis[cir[i]] = true;\n\tint o = 0;\n\trep(i, 1, n) if(! vis[i]) {o = i; break;}\n\tqueue<int> q; q.push(o), valid[o] = true;\n\twhile(! q.empty()) {\n\t\tint u = q.front(); q.pop();\n\t\tif(vis[u]) continue;\n\t\tfor(int v : g[u]) if(! valid[v]) valid[v] = true, q.push(v);\n\t}\n\tint s = 0, t = 0, cnt = 0;\n\trep(i, 1, n) if(vis[i] && valid[i]) {\n\t\tif(++ cnt > 2) return false;\n\t\tif(cnt == 1) s = i; else t = i;\n\t}\n\tif(cnt != 2) return false; else return check(s, t);\n}\n\nint main() {\n\tn = read(), m = read();\n\trep(i, 1, m) {\n\t\tint u = read(), v = read();\n\t\tg[u].eb(v);\n\t\tg[v].eb(u);\n\t}\n\tint s = 0, t = 0, cnt = 0;\n\trep(i, 1, n) if((int) g[i].size() == 1) {\n\t\tif(++ cnt > 2) return puts(\"NO\"), 0;\n\t\tif(cnt == 1) s = i; else t = i;\n\t}\n\tif(cnt) {\n\t\tif(cnt != 2) return puts(\"NO\"), 0;\n\t\treturn puts(check(s, t) ? \"YES\" : \"NO\"), 0;\n\t}\n\tgetcir(); if(solve()) puts(\"YES\"); else puts(\"NO\");\n\treturn 0;\n}\n```\n\n",
        "postTime": 1656162194,
        "uid": 117941,
        "name": "_LPF_",
        "ccfLevel": 9,
        "title": "P4672 [BalticOI 2011 Day2]Tree Mirroring"
    }
]