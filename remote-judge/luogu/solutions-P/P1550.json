[
    {
        "content": "\u672c\u9898\u770b\u4f3c\u5f88\u96be\uff0c\u5b9e\u9645\u4e0a\u601d\u8def\u975e\u5e38\u7b80\u5355\u2014\u2014\u5982\u679c\u4f60\u60f3\u901a\u4e86\u3002\n\n\u9996\u5148\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u56fe\u4e2d\u6709\u51e0\u4e2a\u70b9\uff1f\u5927\u90e8\u5206\u7684\u4eba\u4f1a\u56de\u7b54n\u4e2a\u70b9\u3002\u9519\u4e86\uff0c\u6709n+1\u4e2a\u3002\n\n\u591a\u51fa\u6765\u7684\u90a3\u4e2a\u70b9\u5728\u54ea\uff1f\u5173\u952e\u5728\u4e8e\u4f60\u8981\u7406\u89e3\u6bcf\u4e00\u4e2a\u51b3\u7b56\u7684\u610f\u4e49\u3002\u5b9e\u9645\u4e0a\uff0c\u591a\u51fa\u6765\u7684\u90a3\u4e2a\u70b9\u662f\u5730\u4e0b\u7684~~FarmerJohn\u5c71\u6cc9~~\u5929\u7136\u77ff\u6cc9\u6c34\u3002\u5f53\u6211\u4eec\u6253\u4e95\u65f6\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5728\u5f80\u5730\u4e0b\u8fde\u8fb9\u3002\u7406\u89e3\u4e86\u8fd9\u4e00\u70b9\uff0c\u4ee3\u7801\u5c31\u6ca1\u6709\u4efb\u4f55\u96be\u5ea6\u4e86\u3002\n\n\u6784\u56fe\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u591a\u52a0\u4e00\u4e2a\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9i\uff0c\u6211\u4eec\u8fde\u8fb9i\u2192n+1\uff0c\u8fb9\u6743\u4e3aw\\_i\u3002\u7136\u540e\u76f4\u63a5\u8dd1\u6700\u5c0f\u751f\u6210\u6811\u5c31\u6ca1\u4e86\u3002\u5c31\u6ca1\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\nusing namespace std;\nstruct edge{\n    int from,to,len;\n    const bool operator < (edge b) const{\n        return this->len>b.len;\n    }\n}e[100000];\npriority_queue <edge> que;\nint n,a[302][302],w[301],fa[302],ans;\nint find(int x)\n{\n    if(fa[x]==x)return x;\n    return fa[x]=find(fa[x]);\n}\nint mst()\n{\n    while(!que.empty()){\n        edge p=que.top();\n        if(find(p.from)!=find(p.to))\n        {\n            fa[fa[p.to]]=fa[p.from];\n            ans+=p.len;\n        }\n        que.pop();\n    }\n    return ans;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)scanf(\"%d\",&w[i]);\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=n;j++)\n        {\n            scanf(\"%d\",&a[i][j]);\n            if(i!=j)que.push((edge){i,j,a[i][j]});\n        }\n    }\n    n++;\n    for(int i=1;i<n;i++){\n        que.push((edge){i,n,w[i]});\n        que.push((edge){n,i,w[i]});\n    }\n    for(int i=1;i<=n;i++)fa[i]=i;\n    printf(\"%d\",mst());\n    return 0;\n}\n```\n\u6700\u540e\u63d0\u9192\u4e00\u4e0b\u7528C++STL\u7528\u60ef\u4e86\u7684\u540c\u5b66\uff1a\u6ce8\u610fC++\u4f18\u5148\u961f\u5217\u662f\u4ece\u5927\u5230\u5c0f\u6392\u7684\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u60f3\u6392\u5e8f\uff0c\u4e00\u5b9a\u8bb0\u4f4f\u628a\u5c0f\u4e8e\u53f7\u5b9a\u4e49\u91cc\u7684\u8fd0\u7b97\u53cd\u8fc7\u6765\uff01\u4e00\u5b9a\uff01\u6211\u521a\u624d\u88ab\u8fd9\u4e2a\u5751\u4e86\u534a\u5929\uff01\n",
        "postTime": 1504092444,
        "uid": 30261,
        "name": "Mr_QwQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5176\u5b9e\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811 \u57fa\u672c\u53ea\u8981\u60f3\u5230\u4e00\u70b9\u5c31\u76f4\u63a5\u6253\u6a21\u677f\n\n\u5173\u952e\u70b9\u662f\u4ec0\u4e48\u5462\uff1f \u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c31\u662f\uff1a\u8fde\u63a5 i ,j \u5f88\u597d\u60f3 \u4f46\u662f\u6253\u4e95 \u6211\u4eec\u53ef\u4ee5\u770b\u505a\u4e0e 0 \u8fde\u63a5\n\n\u90a3\u4e48\u5c31\u975e\u5e38\u597d\u5199\u4e86\n\n```cpp\n#include<cmath>\n#include<queue>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int ML=305;\nint f[ML];\nstruct Node{\n    int l,r;\n    int num;\n}a[ML*ML/2];\nbool comp(Node a,Node b){\n    return a.num<b.num;\n}\nint found(int x){\n    if(f[x]==-1) return x;\n    return f[x]=found(f[x]);\n}\nvoid merged(int x,int y){\n    f[x]=y;\n    return;\n}\nint n;\nint ans;\nint main(){\n    scanf(\"%d\",&n);\n    int i,j;\n    int t=0;\n    for(i=1;i<=n;i++){\n        int x;\n        scanf(\"%d\",&x);\n        a[++t].num=x;\n        a[t].l=0;\n        a[t].r=i;\n    }\n    memset(f,-1,sizeof(f));\n    for(i=1;i<=n;i++){\n        for(j=1;j<=n;j++){\n            int x;\n            scanf(\"%d\",&x);\n            if(i>j){\n                a[++t].num=x;\n                a[t].l=i;\n                a[t].r=j;\n            }\n        }\n    }\n    sort(a+1,a+1+t,comp);\n    int x=0;\n    for(i=1;i<=t;i++){\n        int t1,t2;\n        t1=found(a[i].l);\n        t2=found(a[i].r);\n        if(t1!=t2){\n            merged(t1,t2);\n            ++x;\n            ans+=a[i].num;\n        }\n        if(x==n) break;\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1509255603,
        "uid": 31040,
        "name": "\u96ea\u989c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\n\u8fd9\u9053\u662f\u6211\u4eec\u5965\u8d5b\u73ed \u6a21\u62df\u8d5b\u7684 t2\n\u5f53\u65f6\u60f3\u7684\u8d2a\u5fc3 \n~~\u53ef\u662f\u83ab\u5f97\u5b9e\u73b0~~\n\n\u5176\u5b9e\u8fd9\u9053\u9898 ~~\u7528\u4e0d\u5230\u4ec0\u4e48\u8d2a\u5fc3~~ \u5c31\u662f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u7684\u677f\u5b50\u3002\n\u518d\u4ee5\u540e\n\u9700\u8981\u8003\u8651\u4e00\u4e2a\u9690\u85cf\u7684\u70b9 \u5c31\u662f\u90a3\u4e2a\u6253\u6c34\u7684\u4e95\n```\nfor (int i = 1; i <= n; ++ i){\n\t\te [++ t].x = i;\n\t    e [t].y = n + 1;\n\t    e [t].z = w [i];\n\t}\n```\n\n\nAC\u4ee3\u7801\u5982\u4e0b\n\n```\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN = 111111;\nint n,m,ans,t=0,w [MAXN];\nint fa [MAXN];\n\nstruct node{\n\tint x,y,z;\n\tbool operator < (const node &e1) const {\n\t\treturn z < e1.z;\n\t} \n}e [MAXN];\n\nint father (int x){\n\tif (fa [x] == x) return x;\n\treturn fa [x] = father (fa [x]); \n}\n\nint read(){\n    int x = 0,f = 1;\n    char c = getchar();\n    while(c < '0' || c > '9'){\n        if(c == '-')\n        f = -1;\n        c = getchar();\n    }\n    while(c >= '0' && c <= '9'){\n        x = (x << 1) + (x << 3) + (c ^ 48);\n        c = getchar();\n    }\n    return x * f;\n} \n\nint cmpt (int x,int y){\n\treturn x<y;\n}\n\nint main(){\n\tn = read ();\n\tfor (int i = 1; i <= n; i ++) w [i] = read ();\n\tfor(int i = 1; i <= n; i ++)\n\tfor(int j =1; j <= n; j ++){\n\t\tint p;\n\t\tp = read ();\n\t\tif (i!=j){\n\t\t   e [++ t].x = i;\n\t\t   e [t].y = j; \n\t\t   e [t].z = p;\n\t    }\n\t}\n\tfor (int i = 1; i <= n; ++ i){\n\t\te [++ t].x = i;\n\t    e [t].y = n + 1;\n\t    e [t].z = w [i];\n\t}\n\tsort (e + 1, e + 1 + t);\n\tfor (int i = 1; i <= n; i ++) fa [i] = i;\n\tfor (int i = 1; i <= t; i ++){\n\t\tint x = e [i].x,y = e [i].y;\n\t\tint fax = father (x),fay = father (y) ;\n\t\tif (fax == fay) continue ; \n\t\tfa [fax] = fay;\n\t\tans += e [i].z; \n\t}\n\tprintf (\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1565679379,
        "uid": 123198,
        "name": "Pheasant_YQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u673a\u623f\u6a21\u62df\u8003\u8bd5\u9898\uff0c\u8003\u573a\u4e0a\u6ca1\u505a\u51fa\u6765\n\n\u5927\u4f17\u601d\u8def\uff1a\u628a\u6253\u4e95\u770b\u505a\u4e0e\u6c34\u6e90\u8fde\u63a5\n\n\u6700\u5c0f\u751f\u6210\u6811\u677f\u5b50\n\n~~\u8bdd\u8bf4\u7a20\u5bc6\u56fePrim\u5e94\u8be5\u6bd4Kruskal\u597d\u4e00\u70b9~~\n\n\u6211\u7528\u7684\u94fe\u5f0f\u524d\u5411\u661f\u4f18\u5316\n\n\u8fdb\u5165\u6b63\u9898\uff1a\n```\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nlong long n,m,tot;\nlong long h[305*305*305],dis[305*305*305];\nbool u[305*305*305];\n\nstruct Node {\n\tint to,next,w;\n}e[305*305*305];\n\nvoid add(int x,int y,int z) {\n\t++tot;\n\te[tot].next=h[x];\n\te[tot].to=y;\n\te[tot].w=z;\n\th[x]=tot;\n}\n\nvoid input() {\n\tcin>>n;\n\tn+=1;\n\tfor(int i=2;i<=n;i++) {\n\t\tcin>>m;add(1,i,m);add(i,1,m);\n\t\tdis[i]=0x7777777f;\n\t}\n\tfor(int i=2;i<=n;i++) {\n\t\tfor(int j=2;j<=n;j++) {\n\t\t\tcin>>m;\n\t\t\tadd(i,j,m);add(j,i,m);\n\t\t}\n\t}\n}\n\nint prim(int now) {\n\tlong long ans=0;\n\tdis[now]=0;\n\tfor(int k=1;k<=n;k++) {\n\t\tint minn=0x7777777f;\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tif(!u[i]&&minn>dis[i]) {\n\t\t\t\tminn=dis[i];\n\t\t\t\tnow=i;\n\t\t\t}\n\t\t}\n\t\tans+=minn;\n\t\tu[now]=1;\n\t\tfor(int i=h[now];i;i=e[i].next) {\n\t\t\tif(!u[e[i].to]&&dis[e[i].to]>e[i].w) {\n\t\t\t\tdis[e[i].to]=e[i].w;\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\n\nint main() {\n\tinput();\n\tcout<<prim(1)<<endl;\n}\n```",
        "postTime": 1566115792,
        "uid": 99430,
        "name": "Leaved_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u6bcf\u4e2a\u70b9\u90fd\u88ab\u8fde\u5230\uff0c\u663e\u7136\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u521a\u5f00\u59cb\uff0c\u80af\u5b9a\u8981\u627e\u4e2a\u6700\u5c0f\u7684\u4e95\u4f5c\u201c\u6e90\u70b9\u201d\n\n\u63a5\u4e0b\u6765\uff0c\u5c31\u662f\u770b\u5bf9\u4e8e\u672a\u8fde\u7684\u70b9i,\u62ff\u6765\u8fde\u8fd8\u662f\u81ea\u5df1\u6316\u2014\u2014\u628aPRIM\u7684dst\u6570\u7ec4\u7ed9\u4e3a\u5404\u70b9\u7684\u4ee3\u4ef7\uff0c\u518d\u6b63\u5e38\u5237\u4e0d\u5c31\u597d\u4e86\u5417\n\n\u7b80\u77ed\u4ee3\u7801\u3002\u3002\n\n\n\n```cpp\n    #include<cstdio>\n    using namespace std;\n    int n,dst[305],ans,cst[305][305];bool vis[305];\n    inline int read(){\n        int ret=0;char ch=getchar();\n        while(ch<'0'||ch>'9') ch=getchar();\n        while(ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=getchar();\n        return ret;\n    }\n    int main(){\n        n=read();\n        for(int i=1;i<=n;i++) dst[i]=read();\n        for(int i=1;i<=n;i++)\n          for(int j=1;j<=n;j++) cst[i][j]=read();\n        int k,min_x;\n        for(int i=1;i<=n;i++){\n            min_x=1<<30;\n            for(int j=1;j<=n;j++)if(!vis[j]&&dst[j]<min_x) min_x=dst[j],k=j;\n            ans+=min_x,vis[k]=1;\n            for(int j=1;j<=n;j++)if(!vis[j]&&cst[k][j]<dst[j]) dst[j]=cst[k][j];\n        }\n        printf(\"%d\\n\",ans);\n        return 0;\n}\n```",
        "postTime": 1515070486,
        "uid": 36779,
        "name": "ff_666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u5199\u5728\u524d\u9762\u7684\u8bdd\uff1a\u518d\u770b\u9898\u89e3\u4e4b\u524d\uff0c\u8bf7\u4f60\u786e\u4fdd\u4f60\u5df2\u7ecf\u8fdb\u884c\u4e86\u8db3\u591f\u7684\u601d\u8003\uff0c\u5982\u679c\u4f60\u6ca1\u6709\uff0c\u90a3\u4e48\u8fd8\u662f\u8bf7\u4f60\u5728\u597d\u597d\u5206\u6790\u5206\u6790\u9898\u76ee\u3002\u5982\u679c\u4f60\u4f1a\u6700\u5c0f\u751f\u6210\u6811\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e00\u9053\u9898\u5e94\u8be5\u5f97\u4e94\u5341\u5206\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u7684\n\n\u597d\u4e86\uff0c\u6211\u4eec\u76f4\u5165\u4e3b\u9898\u3002\n\n\u5148\u770b\u4e00\u4e0b\u9898\uff0c\u8ba9\u6240\u6709\u7684\u6751\u5b50\u5168\u90e8\u6709\u6c34\uff0c\u8fd9\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u7684\u6a21\u677f\u9898\u554a\uff01\uff01\uff01\u4e8e\u662f\uff0c\u6211\u4eec\u6709\u4e86\u4ee5\u4e0b\u7684\u60f3\u6cd5\uff1a\u5bf9\u4e8e\u6574\u5f20\u56fe\uff0c\u8dd1\u4e00\u8fb9\u6700\u5c0f\u751f\u6210\u6811\uff0c\u518d\u51b3\u5b9a\u5e94\u8be5\u5728\u54ea\u4e2a\u70b9\u6253\u4e95\uff0c\u6700\u540e\u76f8\u52a0\u5f97\u5230ans\uff0c\u8f93\u51fa\u3002\n\n\u4e8e\u662f\uff0c\u5f97\u5230\u4e86\u4e94\u5341\u5206\n\n\u8fd9\u662f\u6211\u4eec\u8981\u60f3\u4e00\u4e2a\u95ee\u9898\uff0c\u9898\u76ee\u91cc\u5e76\u6ca1\u6709\u8bf4\u53ea\u80fd\u6253\u4e00\u53e3\u4e95\u3002\u5982\u679c\u6253\u4e95\u7684\u82b1\u8d39\u8981\u5c0f\u4e8e\u4fee\u8def\u7684\u82b1\u8d39\uff0c\u90a3\u4e48\u6253\u4e95\u5c31\u53ef\u4ee5\u4e86\u3002\u8bf7\u770b\u4e00\u7ec4hack\u6570\u636e\n\n```cpp\n3\n1 1 1\n0 10 10\n10 0 10\n10 10 0\n\n```\n\n\n\u5728\u8fd9\u4e2a\u6570\u636e\u91cc\uff0c\u5982\u679c\u6309\u7167\u4e0a\u9762\u7684\u60f3\u6cd5\uff0c\u5e94\u8be5\u7684\u7b54\u6848\u662f20\uff08\u6700\u5c0f\u751f\u6210\u6811\uff09+1\uff08\u6253\u4e00\u53e3\u4e95\uff09\uff0c\u4f46\u662f\uff0c\u57281\uff0c2\uff0c3\u6bcf\u4e00\u4e2a\u70b9\u90fd\u6253\u4e00\u53e3\u4e95\uff0c\u82b1\u8d39\u4e3a3\uff0c\u663e\u7136\u662f\u8981\u5c0f\u4e8e\u521a\u624d\u90a3\u4e2a\u503c\u7684\u3002\u8fd9\u600e\u4e48\u529e\u5462\uff1f\u96be\u9053\u8981\u7206\u641c\u6240\u6709\u53ef\u80fd\u7684\u6253\u4e95\u60c5\u51b5\uff1f\n\n\u5176\u5b9e\u8fd9\u4e2a\u60f3\u6cd5\u6bd4\u8f83\u9ebb\u70e6\uff0c\u800c\u4e14\u663e\u7136\u4e0d\u597d\u5b9e\u73b0\u3002\u5728OI\u7ade\u8d5b\u91cc\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u4e00\u79cd\u60f3\u6cd5\u6709\u4e9b\u96be\u4ee5\u5b9e\u73b0\u6216\u4e0d\u5207\u5b9e\u9645\uff0c\u5343\u4e07\u4e0d\u8981\u4e00\u6761\u8def\u8d70\u5230\u9ed1\uff0c\u4e00\u5b9a\u8981\u6362\u4e00\u4e2a\u89d2\u5ea6\u60f3\u4e00\u60f3\n\n\u6bd4\u5982\u8fd9\u9053\u9898\uff0c\u8ba9\u6211\u4eec\u56de\u5230\u95ee\u9898\u7684\u672c\u8d28\uff1a\u8ba9\u6bcf\u4e2a\u6751\u5e84\u90fd\u6709\u6c34\u3002\uff08\u524d\u65b9\u9ad8\u80fd\uff09\n\n\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\uff0c\u6240\u6709\u7684\u7ecf\u90fd\u548c\u4e00\u5904\u6c34\u6e90\u8054\u901a\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u7684\u6751\u5e84\u90fd\u548c\u8fd9\u4e2a\u6c34\u6e90\u8fde\u63a5\u8d77\u6765\uff0c\u8fd9\u6837\uff0c\u6211\u4eec\u53ea\u8981\u628a\u8fd9\u4e2a\u6c34\u6e90\u70b9\u4e5f\u770b\u6210\u4e00\u4e2a\u6751\u5e84\uff0c\u8ba9\u4ed6\u548c\u6240\u6709\u7684\u70b9\u90fd\u6216\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u8054\u901a\uff0c\u5e76\u4e14\u8ba9\u6bcf\u4e2a\u70b9\u4e4b\u95f4\u8fde\u901a\uff0c\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\n\n\u8fd9\u6837\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u4e00\u4e2an+1\u4e2a\u70b9\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5e76\u4e14\u6bcf\u4e2a\u70b9\u548c\u6c34\u6e90\u70b9\u8fde\u63a5\u7684\u8d39\u7528\u5c31\u662f\u6253\u4e95\u7684\u8d39\u7528\u3002\n\n\u4e8e\u662f\uff0c\u6837\u4f8b\u7684\u60c5\u51b5\u5c31\u662f1\u53f7\u70b9\u548c\u6c34\u6e90\u70b9\u8054\u901a\uff0c\u5176\u4ed6\u70b9\u4e0e\u4e00\u53f7\u5e97\u8054\u901a\uff0c\u800c\u6211\u7684\u6570\u636e\u5c31\u662f\u6bcf\u4e2a\u70b9\u90fd\u4e0e\u6c34\u6e90\u70b9\u8054\u901a\u3002\n\n\u5176\u5b9e\u5c31\u662f\u8981\u8ba9\u6c34\u6e90\u70b9\u548c\u6bcf\u4e2a\u70b9\u8054\u901a\uff0c\u8fd9\u6837\u6c34\u5c31\u4f1a\u8d70\u8fdb\u6bcf\u4e2a\u6751\u5b50\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u5728\u5efa\u70b9\u548c\u70b9\u7684\u8fb9\u7684\u57fa\u7840\u4e0a\uff0c\u5728\u5efa\u548c\u6c34\u6e90\u70b9\u7684\u8fb9\uff0c\u7136\u540e\u8dd1\u4e00\u8fb9\u6700\u5c0f\u751f\u6210\u6811\u5c31\u53ef\u4ee5\u4e86\u3002\uff08prim\u548ckruskal\u90fd\u53ef\u4ee5\uff0c\u4f46\u6211\u66f4\u559c\u6b22kruskal\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,w[1001]={0},f[1001]={0},p[1001][1001]={0},te=0,ans=0;\nstruct es{\n\tint from,to,value;\n}a[100001];\nvoid adde(int x,int y,int z){\n\t++te;\n\ta[te].to=y;\n\ta[te].from=x;\n\ta[te].value=z;\n}\nbool cmp(es a,es b){return a.value<b.value;}\nint find(int x){\n\tif(x==f[x])return x;\n\telse return f[x]=find(f[x]);\n}\nint main(){\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)cin>>w[i],f[i]=i;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tcin>>p[i][j];\n\t\t\tif(i!=j)\n\t\t\tadde(i,j,p[i][j]);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tadde(i,n+1,w[i]);\n\t\tadde(n+1,i,w[i]);\n\t}\n\tsort(a+1,a+te+1,cmp);\n\tfor(int i=1;i<=te;i++){\n\t\tint x=find(a[i].to);\n\t\tint y=find(a[i].from);\n\t\tif(x==y)continue;\n\t\telse f[x]=y,ans+=a[i].value;\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n\n\u5199\u5728\u540e\u9762\uff1a\u8fd9\u4e00\u9053\u9898\u6211\u4e00\u5f00\u59cb\u4e5f\u6ca1\u6709\u60f3\u5230100\u5206\u505a\u6cd5\uff0c\u53ea\u60f3\u5230\u4e8650\u5206\uff0c\u770b\u4e86\u9898\u89e3\u3002\u6240\u4ee5\u5982\u679c\u4f60\u770b\u4e86\u9898\u89e3\uff0c\u90a3\u4e48\u8bf7\u4f60\u4e00\u5b9a\u7406\u89e3\u900f\u5f7b\u4ee5\u540e\uff0c\u518d\u5199\u4e00\u904d\u4ee3\u7801\u6216\u8005\u50cf\u6211\u4e00\u6837\u5199\u4e00\u7bc7\u9898\u89e3\u6bd5\u7adf\u5982\u679c\u4e00\u5473\u7684\u770b\u9898\u89e3\u662f\u65e0\u6cd5\u53d6\u5f97\u80fd\u529b\u4e0a\u7684\u63d0\u5347\u7684\n\n~~\u60a8\u90fd\u770b\u5230\u8fd9\u4e86\uff0c\u8d5e\u4e00\u4e2a\u597d\u5417QAQ~~",
        "postTime": 1582443148,
        "uid": 141251,
        "name": "\u6c6a\u9e23\u8c26",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u9898\u89e3\u91cc\u5927\u591a\u90fd\u662f\u5efa\u7acb\u4e00\u4e2a\u6e90\u70b9\u518d\u8dd1\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u8d2a\u5fc3\u3002\n\n\u5c06\u5355\u70b9\u6253\u4e95\u6df7\u5728\u8fb9\u91cc\u4e00\u8d77\u6309\u4ef7\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6309\u7167Kruskal\u7684\u601d\u8def\u4e00\u4e2a\u4e2a\u628a\u70b9/\u8fb9\u53d6\u51fa\u3002\u989d\u5916\u8bb0\u5f55\u4e00\u4e2a\u6570\u7ec4well[i]\u8868\u793a\u4ee5i\u4e3a\u5934\u7684\u96c6\u5408\u662f\u5426\u6253\u4e86\u4e95\uff08\u5373i\u6240\u5728\u8fde\u901a\u5757\u662f\u5426\u63a5\u4e0a\u6c34\u6e90\uff09\u3002\n\n\u5f53\u53d6\u51fa\u4e86\u4e00\u6761\u8fb9\uff0c\u5148\u5e38\u89c4\u5e76\u67e5\u96c6\u5224\u65ad\u4e24\u4e2a\u7aef\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\u662f\u5426\u662f\u540c\u4e00\u4e2a\u3002\u5982\u679c\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\uff0c\u5219\u518d\u5224\u65ad\u4e24\u4e2a\u7aef\u70b9\u6240\u5728\u8fde\u901a\u5757\u662f\u5426\u90fd\u63a5\u4e0a\u6c34\u6e90\u3002\u5982\u679c\u90fd\u6709\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u628a\u5b83\u4eec\u8fde\u8d77\u6765\u4e86\uff0c\u5426\u5219\u5c31\u76f8\u8fde\u3002\n\n\u5f53\u53d6\u51fa\u4e86\u4e00\u4e2a\u70b9\uff0c\u5c31\u5224\u65ad\u5b83\u6240\u5728\u8fde\u901a\u5757\u662f\u5426\u63a5\u4e0a\u6c34\u6e90\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u5728\u5b83\u8fd9\u4e2a\u5730\u65b9\u6253\u4e00\u53e3\u4e95\uff0c\u7136\u540e\u6807\u8bb0\u5b83\u7684\u8fde\u901a\u5757\u63a5\u4e0a\u4e86\u6c34\u6e90\u3002\n\n\u8d2a\u5fc3\u7684\u6b63\u786e\u6027\u4e5f\u5f88\u663e\u7136\u3002\u5bb9\u6613\u5f97\u77e5\uff0c\u4e00\u4e2a\u8fde\u901a\u5757\u8981\u63a5\u4e0a\u6c34\u6e90\uff0c\u8981\u4e48\u5c31\u4ece\u53e6\u4e00\u4e2a\u8fde\u901a\u5757\u5f15\u6c34\uff0c\u8981\u4e48\u5c31\u5728\u8fde\u901a\u5757\u4e2d\u67d0\u70b9\u6253\u4e95\u3002\n\n\u4ef7\u683c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u5982\u679c\u53d6\u51fa\u4e00\u6761\u8fb9\u4e14\u4e24\u7aef\u70b9\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u3001\u6240\u5728\u8fde\u901a\u5757\u6ca1\u6709\u90fd\u63a5\u6c34\u65f6\uff0c\u7531\u4e8e\u5176\u4e2d\u4e00\u4e2a\u8fde\u901a\u5757\u5728\u4ee5\u540e\u67d0\u4e2a\u65f6\u523b\u4e00\u5b9a\u4f1a\uff08\u6216\u8005\u5f53\u524d\u5c31\u5df2\u7ecf\uff09\u63a5\u4e0a\u6c34\u6e90\uff0c\u90a3\u4e48\u5c06\u4e24\u4e2a\u8fde\u901a\u5757\u76f8\u8fde\uff0c\u5c31\u80fd\u4fdd\u8bc1\u4ee5\u6700\u5c0f\u82b1\u8d39\u4e3a\u53e6\u4e00\u4e2a\u63a5\u4e0a\u6c34\u6e90\u7684\u65f6\u523b\u66f4\u9760\u540e\u7684\u8fde\u901a\u5757\u5f15\u6c34\u3002\n\n\u8fd9\u662f\u56e0\u4e3a\uff0c\u5b83\u73b0\u5728\u6ca1\u6709\u63a5\u4e0a\u6c34\u6e90\uff0c\u5219\u53ea\u80fd\u4f9d\u9760\u5f15\u522b\u7684\u8fde\u901a\u5757\u7684\u6c34\u6216\u8005\u5728\u81ea\u5df1\u8eab\u4e0a\u6253\u4e95\u3002\u4f46\u662f\u73b0\u5728\u8fd9\u4e9b\u5e76\u6ca1\u6709\u53d1\u751f\uff0c\u8bf4\u660e\u8981\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u5fc5\u987b\u4f9d\u9760\u6bd4\u5f53\u524d\u53d6\u51fa\u7684\u8fb9\u82b1\u8d39\u66f4\u9ad8\u7684\u70b9/\u8fb9\uff0c\u90a3\u4e48\u6253\u901a\u8fd9\u6761\u8fb9\u5c31\u4e00\u5b9a\u662f\u4f7f\u8fd9\u4e2a\u8fde\u901a\u5757\u63a5\u4e0a\u6c34\u6e90\u6700\u4fbf\u5b9c\u7684\u65b9\u6cd5\u3002\n\n\u5982\u679c\u53d6\u51fa\u4e00\u4e2a\u70b9\u4e14\u5b83\u6240\u5728\u8fde\u901a\u5757\u6ca1\u6709\u63a5\u4e0a\u6c34\u6e90\uff0c\u90a3\u4e48\u548c\u4e0a\u8ff0\u7406\u7531\u7c7b\u4f3c\uff0c\u5728\u8fd9\u4e2a\u70b9\u6253\u4e95\u4e00\u5b9a\u662f\u65f6\u5b83\u6240\u5728\u8fde\u901a\u5757\u63a5\u4e0a\u6c34\u6e90\u6700\u4fbf\u5b9c\u7684\u65b9\u6cd5\u3002\n\n\u56e0\u6b64\uff0c\u4e0d\u65ad\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\u8d2a\u5fc3\uff0c\u4fbf\u80fd\u5f97\u5230\u6700\u4f18\u89e3\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define N 301\nusing namespace std;\nint n,num[N], cnt,f[N],well[N], ans=0;\nstruct edge{\n\tint to,from,val;\n\tinline const bool operator<(edge r)const\n\t{\n\t\treturn val<r.val;\n\t}\n}e[N*N<<1];\ninline void adde(int u,int v,int w)\n{\n\te[++cnt].from=u;\n\te[cnt].to=v;\n\te[cnt].val=w;\n\treturn;\n}\ninline int find(int x)\n{\n\tif(f[x]==x)return x;\n\telse return f[x]=find(f[x]);\n}\ninline void merge(int x,int y,int cost)\n{\n\tint fx=find(x),fy=find(y);\n\tif(fx!=fy&&(well[fx]&well[fy])!=1)//\u5224\u65ad\u662f\u5426\u4e24\u4e2a\u8fde\u901a\u5757\u90fd\u63a5\u4e0a\u6c34\u6e90\n\t{\n\t\tif(well[fx])f[fy]=fx;//\u628a\u6ca1\u6c34\u6e90\u7684\u96c6\u5408\u63a5\u5230\u6709\u6c34\u6e90\u7684\u96c6\u5408\u4e0a\n\t\telse f[fx]=fy;\n\t\tans+=cost;\n\t}\n\treturn;\n}\ninline void Kruskal()\n{\n\tfor(int i=1;i<=n;i++)f[i]=i,well[i]=0;\n\tfor(int i=1,u,v;i<=cnt;i++)\n\t{\n\t\tu=e[i].from,v=e[i].to;\n\t\tif(u)//\u4e00\u6761\u201c\u8fb9\u201d\u7684\u5de6\u7aef\u70b9\u4e3a0\u8868\u793a\u8fd9\u662f\u4e2a\u70b9\n\t\t{\n\t\t\tmerge(u,v,e[i].val);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfind(v);\n\t\t\tif(!well[f[v]])//\u5982\u679c\u8fd9\u4e2a\u70b9\u6240\u5728\u8fde\u901a\u5757\u6ca1\u6709\u4e95\n\t\t\t{\n\t\t\t\twell[f[v]]=1;//\u7ed9\u8fd9\u4e2a\u8fde\u901a\u5757\u6253\u4e95\n\t\t\t\tans+=e[i].val;\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&num[i]),adde(0,i,num[i]);\n\tfor(int i=1,u;i<=n;i++)for(int j=1;j<=n;j++)\n\t{\n\t\tscanf(\"%d\",&u);\n\t\tif(i<j)adde(i,j,u);//\u5f3a\u884c\u90bb\u63a5\u77e9\u9635\u8f6c\u90bb\u63a5\u8868\n\t}\n\tsort(e+1,e+cnt+1);//\u8fb9\u70b9\u4e00\u8d77\u6392\u5e8f\n\tKruskal();\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1570111951,
        "uid": 14381,
        "name": "1jia1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u535a\u5ba2\u98df\u7528\u4f53\u9a8c\u66f4\u4f73\uff1a[\u849f\u84bb\u7684\u535a\u5ba2](https://www.cnblogs.com/cptbtptpbcptbtptp/p/11802509.html)\n\n\u6211\u521a\u5f00\u59cb\u770b\u8fd9\u9053\u9898\u76ee\u7684\u65f6\u5019\u53d1\u73b0\u8fd9\u9898\u4f3c\u4e4e\u65e0\u4ece\u4e0b\u624b\n\n\u6211\u9996\u5148\u5f00\u59cb\u4ece\u8d2a\u5fc3\u89d2\u5ea6\u8003\u8651\uff0c\u60f3\u4e86\u4e24\u79cd\u60c5\u51b5\uff1a\u2460 \u4ee5\u6253\u4e95\u7684\u4ee3\u4ef7\u8d2a\u5fc3 \u2461 \u4ee5\u8fde\u63a5\u7684\u4ee3\u4ef7\u8d2a\u5fc3\n\n\u4f46\u662f\u540e\u6765\u90fd\u88ab\u6211\u5426\u8ba4\u4e86\u2014_\u2014\n\n\u8003\u8651\u4e00\u4e0b\u8fd9\u79cd\u60c5\u51b5\uff1a\u4e00) \u6253\u4e95\u7684\u4ef7\u683c\u5f88\u5c0f\u4f46\u662f\u8fde\u63a5\u7684\u4ef7\u683c\u5f88\u5927\uff0c\u6b64\u65f6\uff0c\u2460\u4e0d\u662f\u6700\u4f18\u89e3 \u4e8c) \u6253\u4e95\u7684\u4ef7\u683c\u5f88\u5927\u4f46\u662f\u8fde\u63a5\u7684\u4ef7\u683c\u5f88\u5c0f\uff0c\u6b64\u65f6\u2461\u4e0d\u662f\u6700\u4f18\u89e3\n\n\u6240\u4ee5\u8fd9\u9053\u9898\u4e0d\u80fd\u7528\u4e00\u822c\u7684\u8d2a\u5fc3\u8003\u8651\n\n\u90a3\u8be5\u600e\u4e48\u505a\u5462\uff1f\n\n\u8fd9\u65f6\u5019\u6211\u770b\u5230\u77e9\u9635\u7684\u659c\u7ebf\u4e0a\u90fd\u662f0\uff0c\u611f\u5230\u5f88\u522b\u626d\uff0c\u60f3\u5e72\u70b9\u4e8b\n\n\u7136\u540e\u60f3\u5230\u8fd9\u4e9b0\u7684\u610f\u4e49\uff1a\u4ecei\u5230j\u70b9\u7684\u8fde\u63a5\u4ee3\u4ef7\n\n\u54e6\uff01\u90a3\u81ea\u5df1\u8fde\u81ea\u5df1\u4e0d\u5c31\u662f\u5728\u81ea\u5df1\u8fd9\u4e2a\u70b9\u51ff\u4e95\u7684\u4ee3\u4ef7\u5417\uff1f\n\n\u5047\u8bbe\u6709\u4e00\u4e2ak\u70b9\uff0c\u6211\u4eec\u8ba4\u4e3a\u5982\u679c\u6bcf\u4e2a\u70b9\u8fde\u63a5k\u7684\u4ee3\u4ef7\u90fd\u662f\u51ff\u4e95\u7684\u4ee3\u4ef7\u7684\u8bdd\uff0c\u90a3\u4e48\u77e9\u9635\u4e2d\u5c31\u53ef\u4ee5\u5c06(i,k) 0 \u4fee\u6539\u4e3a val[i]\n\n\u7531\u4e8e\u4e0d\u80fd\u81ea\u5df1\u8fde\u81ea\u5df1\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u75280\u6216n+1\u6765\u5145\u5f53\u8fd9\u4e2ak\n\n\u7136\u540e\u6574\u4e2a\u7b97\u6cd5\u7684\u6d41\u7a0b\u5c31\u662f\u4e0b\u9762\u8fd9\u4e2a\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/i06p580s.png)\n\n\u5f53\u7136\u4ee3\u7801\u662f\u975e\u5e38\u597d\u6253\u7684\uff1a\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int N = 400,M = 160010;\nstruct node\n{\n\tint x,y,v;\n}a[M];\nint fa[N];\nint n,val[N],cnt,Ans;\nbool cmp(node p,node q)\n{\n\treturn p.v<q.v;\n}\nint getfa(int x)\n{\n\tif (fa[x]!=x) fa[x]=getfa(fa[x]);\n\treturn fa[x];\n}\ninline int read()\n{\n\tint x=0,w=1; char c=getchar();\n\twhile (c>'9' || c<'0') {if (c=='-') w=-1; c=getchar();}\n\twhile (c<='9' && c>='0') {x=(x<<3)+(x<<1)+c-'0'; c=getchar();}\n\treturn w*x;\n}\nint main()\n{\n\tn=read();\n\tfor (int i=1;i<=n;++i) val[i]=read(),fa[i]=i;\n\tfa[n+1]=n+1;\n\tfor (int i=1;i<=n;++i)\n\t{\n\t\tfor (int j=1;j<=n;++j)\n\t\t{\n\t\t\tint x; x=read();\n\t\t\tif (i==j) a[++cnt].x=i,a[cnt].y=n+1,a[cnt].v=val[i];\n\t\t\telse a[++cnt].x=i,a[cnt].y=j,a[cnt].v=x;\n\t\t}\n\t}\n\tsort(a+1,a+cnt+1,cmp);\n\tfor (int i=1;i<=cnt;++i)\n\t{\n\t\tint t1,t2; \n\t\tt1=getfa(a[i].x),t2=getfa(a[i].y);\n\t\tif (t1!=t2) fa[t1]=t2,Ans+=a[i].v;\n\t}\n\tprintf(\"%d\\n\",Ans);\n\treturn 0;\n}\n```\n\n\u8fd9\u9898\u7684\u601d\u8def\u8fd8\u662f\u5f88\u5de7\u5999\u7684\n\nCSP-S RP++",
        "postTime": 1572967693,
        "uid": 35148,
        "name": "Lying_Flat666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u8868\u793a\u795e\u7287\u4eec\u7684\u4ee3\u7801\u90fd\u770b\u4e0d\u61c2%%%\n\n\u4e8e\u662f\u501f\u7528\u697c\u4e0a\u697c\u4e0b\u601d\u8def\uff0c~~\u778e\u6539\u6a21\u677f~~\u7cbe\u5fc3\u8c03\u51fa\u4e86\u6613\u61c2\u7248\u672c\n\n\u4ee5\u4e0b\u4ee3\u7801   ~~\u5176\u5b9e\u514b\u9c81\u65af\u5361\u5c14\u6a21\u677f~~\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,e,a[110000],b[110000],w[110000],c[110000],ans,f[11000],num;\nint getf(int x){if(f[x]!=x)f[x]=getf(f[x]);return f[x];}\nvoid quick_sort(int left,int right)//\u624b\u52a8\u6a21\u62df\u5feb\u6392\uff0c\u5199\u5b8c\u53d1\u73b0\u53ef\u4ee5\u91cd\u8f7d\uff08\u9003\n{\n    int i=left,j=right;\n    int mid=c[(left+right)/2];\n    while(i<=j)\n    {\n        while(c[i]<mid)\n            i++;\n        while(c[j]>mid)\n            j--;\n        if(i<=j)\n        {\n            int t;\n\t\t\tt=c[i];c[i]=c[j];c[j]=t;\n\t\t\tt=a[i];a[i]=a[j];a[j]=t;\n\t\t\tt=b[i];b[i]=b[j];b[j]=t;\n            i++;\n            j--;\n        }\n    }\n    if(i<right)\n        quick_sort(i,right);\n    if(left<j)\n        quick_sort(left,j);\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;++i) scanf(\"%d\",&w[i]),f[i]=i;\n\tfor(int i=1;i<=n*n;i++)\n\t\tscanf(\"%d\",&c[i]),a[i]=(i-1)%n+1,b[i]=(i-1)/n+1;//\u56e0\u4e3a\u5b8c\u5168\u56fe\uff0c\u5c31\u987a\u7740\u77e9\u9635\u8bfb\u5165\uff0c\u6ce8\u610fa\uff0cb\u6570\u7ec4\u4e0ei\u7684\u5173\u7cfb\n\tfor(int i=1;i<=n;i++)\n\t\tc[i+n*n]=w[i],a[i+n*n]=i,b[i+n*n]=n+1;//\u6dfb\u52a0\u4e00\u4e2a\u70b9\uff0cc[n*n+1]\u5230c[n*n+n]\u8868\u793a\u6bcf\u4e2a\u70b9\u5230\u6c34\u4e95\u8fd9\u4e2a\u8fb9\u6743\uff0ca\uff0cb\u6570\u7ec4\u540c\u4e0a\uff0c\u8868\u793a\u7b2ci\u6761\u8fb9\u7684\u4e24\u7aef\n\tquick_sort(1,n*n+n);//\u8fb9\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n\tfor(int i=1;i<=n*n+n;i++)\n\t{\n\t\tif(num==n)break;//num\u4ece0\u5f00\u59cb\uff0c\u52a0\u5230n\u8868\u793a\u5df2\u662f\u6700\u5c0f\u751f\u6210\u6811\n\t\tif(getf(a[i])!=getf(b[i]))//\u5e76\u67e5\u96c6\u7ef4\u62a4\u6b63\u786e\u6027\n\t\t{\n\t\t\tf[getf(a[i])]=getf(b[i]);\n\t\t\tnum++;\n\t\t\tans+=c[i];//\u7d2f\u52a0\u8fb9\u6743\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1531554969,
        "uid": 86874,
        "name": "\u6d3e\u5927\u90a3\u4e2a\u661f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "### [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c(\u5b89\u5229\u6211\u81ea\u5df1\u7684\u535a\u5ba2)](https://lllinea.github.io/USACO-Watering-Hole/)\n\n### ~~\u673a\u623f\u6a21\u62df\u8d5b10\u5206\u7684\u7a9d~~\n\n### \u5f53\u65f6\u60f3\u5230\u4e86MST\u4f46\u662f\u6ca1\u6709\u8003\u8651\u592a\u591a\n\n### ~~\u62ff\u4e86\u5341\u5206~~\n\n## \u8ba4\u771f\u601d\u8003\u7684\u8bdd\u5c31\u53d1\u73b0\u4e86\u4e00\u4e2a\u9690\u85cf\u7684\u6761\u4ef6\u5c31\u662f\u6253\u6c34\u7684\u4e95\n\n## \u53ef\u4ee5\u5355\u72ec\u4f5c\u4e3a\u4e00\u4e2a\u70b9\u8fde\u8d77\u6765\n\n```\nfor (int i = 1;i <= n;++i){\n\tcin >> w[i];\n\tadd_edge(i,0,w[i]);\n\tadd_edge(0,i,w[i]);\n}\n```\n## MST\u7684\u8bdd\u6211\u8fd8\u662f\u9009\u62e9Kruskal\u53ed(\u6bd5\u7adf\u4e0d\u4f1a\u5199Prim)\n\n### %%%\u9898\u89e3\u533a\u5199Prim\u7684\u5de8\u4f6c\u4eec\n\n## \u4e0a\u4ee3\u7801\n```\n#include <iostream>\n#include <cstdio>\n#include <iomanip>\n#include <cstring>\n#include <vector>\n#include <queue>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\nconst int maxn = 310000;\nstruct node{\n\tint u,v,c,nxt;\n}e[maxn];\nint n,ans,a,w[maxn],head[maxn],cnt = 0;\nint fa[maxn];\ninline void add_edge(int u,int v,int c){\n\te[++cnt].u = u;\n\te[cnt].v = v;\n\te[cnt].c = c;\n\te[cnt].nxt = head[u];\n\thead[u] = cnt;\n}\ninline int find(int u){\n\tif (fa[u] == u)return u;\n\telse return fa[u] = find(fa[u]);\n}\nvoid Kruskal(){\n\tfor (int i = 0;i <= cnt;++i){\n\t\tint fax = find (e[i].u),fay = find (e[i].v);\n\t\tif (fax == fay)continue;\n\t\tfa[fax] =fay;\n\t\tans += e[i].c;\n\t}\n}\nbool cmp (node a,node b){\n\treturn a.c < b.c;\n}\nint main(){\n\tcin >> n;\n\tfor (int i = 1;i <= n;++i){\n\tcin >> w[i];\n\tadd_edge(i,0,w[i]);\n\tadd_edge(0,i,w[i]);\n\t}\n\tfor (int i = 1;i <= n;++i)\n\t\tfor (int j = 1;j <= n;++j){\n\t\t\tcin >> a;\n\t\t\tif (i > j)\n\t\t\t\tadd_edge(i,j,a);\n\t\t}\n\tfor (int i = 1;i <= n;++i)fa[i] = i;\n\tsort (e,e+cnt+1,cmp);\n\tKruskal();\n\tcout << ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1566292010,
        "uid": 99716,
        "name": "_Grey",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1550 \u6253\u4e95Watering Hole"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662f\u5c06\u4e95\u7684\u4ef7\u94b1\u52a0\u5230\u8fb9\u91cc\n\n\u7136\u540e\u8dd1\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\n\n~~\u7136\u800c\u6211\u53ea\u4f1a\u514b\u9c81\u65af\u5361\u5c14~~\n\n\u7c98\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint fa[1000101],w[1000100];\nint ans,u,v,c,n,m,total;\ninline int find(int a)\n{\n\tif(fa[a]!=a) return fa[a]=find(fa[a]);\n\telse return a;\n} \nstruct io\n{\n\tint u,v,c;\n}e[1010010];\nbool cmp(io a,io b)\n{\n\treturn a.c<b.c;\n}\nint main()\n{\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfa[i]=i;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>w[i];\n\t\ttotal++;\n\t\te[total].u=0;\n\t\te[total].v=i;\n\t\te[total].c=w[i];\n\t\te[total].u=i;\n\t\te[total].v=0;\n\t\te[total].c=w[i];\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tcin>>u;\n\t\t\ttotal++;\n\t\t\te[total].u=i;\n\t\t\te[total].v=j;\n\t\t\te[total].c=u;\n\t\t}\n\t\t\n\t}\n\tsort(e,e+total+1,cmp);\n\tfor(int i=0;i<=total;i++)\n\t{\n\t\tint r1=find(e[i].u),r2=find(e[i].v);\n\t\tif(r1!=r2)\n\t\t{\n\t\t\tfa[r1]=r2;\n\t\t\tans+=e[i].c;\n\t\t}\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1565741881,
        "uid": 122757,
        "name": "PrefixAMS",
        "ccfLevel": 5,
        "title": "P1550 [USACO08OCT]\u6253\u4e95"
    },
    {
        "content": "[${\\color{orange}\\text{\u6b22\u8fce\u62dc\u8bbf\u6211\u8fd9\u4e2a\u849f\u84bb\u7684\u535a\u5ba2}}$](https://www.luogu.org/blog/wzc-wwwwd/)\n\n[P1550 \u3010\\[USACO08OCT\\]\u6253\u4e95Watering Hole\u3011\u4f20\u9001\u95e8](https://www.luogu.org/problem/P1550)\n\n### \u6b64\u9898\u7b97\u6cd5:\u6700\u5c0f\u751f\u6210\u6811Prim\n\n\u5c31\u662f\u6a21\u677f\u9898\n\n\u5927\u81f4\u601d\u8def:\n\n>1.$ $\u628a\u519c\u6c11John(FJ)\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u4ed6\u5230\u4e00\u5757\u7530\u7684\u8fb9\u7684\u6743\u503c\u5c31\u662f\u90a3\u5757\u7530\u201c\u6316\u4e95\u201d\u8981\u7528\u7684\u94b1\u3002\n\n>2.$ $\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u6743\u503c\u548c\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,vis[5010];\nint w,p[5010][5010],ans;\nstruct edge{\n    int to,v;\n    void make(int dt,int dv){\n        to=dt;\n        v=dv;\n    }\n}now;\nbool operator < (edge x,edge y){\n    return x.v>y.v;\n} priority_queue<edge> q;\nvoid prim(int key){\n    vis[key]=1;\n    int i=n;\n    while(i--){\n        for(int j=0;j<=n;j++){\n            if(!vis[j]&&p[key][j]<INT_MAX){\n                now.make(j,p[key][j]);\n                q.push(now);\n            }\n        } while(!q.empty()\n        &&vis[q.top().to])\n            q.pop();\n        if(q.empty()) break;\n        now=q.top();\n        key=now.to;\n        ans+=now.v;\n        vis[key]=1;\n        q.pop();\n    }\n} int main(){\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++){\n    \tscanf(\"%d\",&p[0][i]);\n    \tp[i][0]=p[0][i];\n\t} for(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tscanf(\"%d\",&p[i][j]);\n\tprim(0);\n\tprintf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\u8fd9\u9898\u9898\u89e3\u5e94\u8be5\u6ca1\u4eba\u770b\u5427\uff0c\u592a\u7b80\u5355\u4e86\uff01\n\n\u8c22\u8c22\u5927\u5bb6! !",
        "postTime": 1567431196,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "    \u901a\u8fc7\u9898\u76ee\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff08kruskal\u548cPrim\uff09\n\u672c\u849f\u84bb\u4e60\u60ef\u7528\u5e76\u67e5\u96c6\uff0c\u6240\u4ee5\u7528kruskal\u7b97\u6cd5\uff1b\n\u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u5176\u4ed6\u9898\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff1a\u6bcf\u4e2a**\u70b9**\u90fd\u6709\u4ed6\u81ea\u5df1\u7684\u6743\u503c\uff1b**\u89e3\u51b3\u65b9\u6cd5**\uff1a\u6211\u4eec\u53ef\u4ee5\u628a\u70b9\u7684\u6743\u503c\u52a0\u5230\u70b9\u672c\u8eab\uff1b\n\n\u8f6c[\u5e76\u67e5\u96c6](https://baike.so.com/doc/6119935-6333082.html)\uff1b\n\n**\u5e76\u67e5\u96c6\u7684\u521d\u59cb\u5316**\n```c\nfor(int i=1;i<=cnt;i++)\n\t{\n\t\tf[i]=i;\n\t}\n```\n**find\u64cd\u4f5c**\n```\nint find(int x)\n{\n\tif(x!=f[x])f[x]=find(f[x]);\n\treturn f[x];\n}\n```\n**\u5408\u5e76\u64cd\u4f5c**\n```\nvoid hb(int x,int y)\n{\n      f[find(x)]=find(y);\n}\n```\n**\u6838\u5fc3\u7b97\u6cd5kruska**\n\n```\nint Kruskal()\n{\n\tsort(a+1,a+cnt+1,cmp);\n\t\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\tint x=find(a[i].x);\n\t\tint y=find(a[i].y);\n\t\tif(x!=y)\n\t\t{\n\t\t\tf[x]=y;\n\t\t\t++tot;\n\t\t\tans+=a[i].w;\n\t\t}\n\t\tif(tot==n)\n\t\tbreak;\n\t}\n\t\n\treturn ans;\n}\n\n```\n\n**\u8f93\u5165**\n```\nvoid init()\n{\n\tcin>>n;\n\t\n\tfor(int i=1;i<=n;i++)\n\t{\n\t    int w;\n\t\tcin>>w;\n\t\ta[++cnt].x=0;\n\t\ta[cnt].y=i;\n\t\ta[cnt].w=w;\n\t}\n\t\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tint w;\n\t\t\tcin>>w;\n\t\t\tif(i>j)\n\t\t\t{\n\t\t\t\ta[++cnt].x=i;\n\t\t\t\ta[cnt].y=j;\n\t\t\t\ta[cnt].w=w;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\tf[i]=i;\n\t}\n\t\n}\n```\n~~\u5e9f\u8bdd\u4e0d\u591a\u8bf4~~\uff0c\u4e0a\u4ee3\u7801\uff08\u9003\uff09\n\n**\u5b8c\u6574\u4ee3\u7801**\n```\n#include<bits/stdc++.h>//\u4e07\u80fd\u5934\u6587\u4ef6 \uff1b \nusing namespace std;\nint n,m,ans=0,cnt=0,tot=0,f[100010],w[100010];//\u5b9a\u4e49\u53d8\u91cf\u548c\u6570\u7ec4\uff1b \n\nstruct node{ //\u7ed3\u6784\u4f53\uff1b \n\tint x;\n\tint y;\n\tint w;\n}a[500010];\n\nbool cmp(node a,node b)//cmp\u51fd\u6570\uff08sort\uff09\uff1b \n{\n\treturn a.w<b.w;\n}\n\nint find(int x)//\u627e\u7956\u5b97 \n{\n\tif(x!=f[x])f[x]=find(f[x]);\n\treturn f[x];\n}\n\nvoid init()//\u8f93\u5165\u51fd\u6570 \n{\n\tcin>>n;\n\t\n\tfor(int i=1;i<=n;i++)\n\t{\n\t    int w;\n\t\tcin>>w;\n\t\ta[++cnt].x=0;\n\t\ta[cnt].y=i;\n\t\ta[cnt].w=w;\n\t}\n\t\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tint w;\n\t\t\tcin>>w;\n\t\t\tif(i>j)\n\t\t\t{\n\t\t\t\ta[++cnt].x=i;\n\t\t\t\ta[cnt].y=j;\n\t\t\t\ta[cnt].w=w;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i=1;i<=cnt;i++)//\u521d\u59cb\u5316 \n\t{\n\t\tf[i]=i;\n\t}\n\t\n}\n    \nint Kruskal()//\u6838\u5fc3\u7b97\u6cd5 \n{\n\tsort(a+1,a+cnt+1,cmp);//\u6392\u5e8f \n\t\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\tint x=find(a[i].x);\n\t\tint y=find(a[i].y);\n\t\tif(x!=y)\n\t\t{\n\t\t\tf[x]=y;\n\t\t\t++tot;\n\t\t\tans+=a[i].w;\n\t\t}\n\t\tif(tot==n)\n\t\tbreak;\n\t}\n\t\n\treturn ans;\n}\n\nint main()//\u4e3b\u51fd\u6570 \n{\n\tinit();\n\tcout<<Kruskal()<<endl;\n\treturn 0;\n}\n```\n**\u5b8c\u7ed3**\n\u6700\u540e\u5b89\u5229\u4e00\u4e0b\u6211\u7684[\u535a\u5ba2](https://www.luogu.org/blog/lwhd/)\n\uff08\u9003\uff09\n",
        "postTime": 1565878925,
        "uid": 181404,
        "name": "\u8def\u4eba_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u6253\u4e95Watering Hole"
    },
    {
        "content": "## \u9898\u9762\uff08\u7ffb\u8bd1\u6709\u70b9\u95ee\u9898\uff0c\u6700\u540e\u4e00\u53e5\u8bdd\uff09\n\n\u519c\u6c11John \u51b3\u5b9a\u5c06\u6c34\u5f15\u5165\u5230\u4ed6\u7684n(1<=n<=300)\u4e2a\u7267\u573a\u3002\u4ed6\u51c6\u5907\u901a\u8fc7\u6316\u82e5\n\n\u5e72\u4e95\uff0c\u5e76\u5728\u5404\u5757\u7530\u4e2d\u4fee\u7b51\u6c34\u9053\u6765\u8fde\u901a\u5404\u5757\u7530\u5730\u4ee5\u4f9b\u6c34\u3002\u5728\u7b2ci \u53f7\u7530\u4e2d\u6316\u4e00\u53e3\u4e95\u9700\u8981\u82b1\u8d39W_i(1<=W_i<=100,000)\u5143\u3002\u8fde\u63a5i \u53f7\u7530\u4e0ej \u53f7\u7530\u9700\u8981P_ij (1 <= P_ij <= 100,000 , P_ji=P_ij)\u5143\u3002\n\n\u8bf7\u6c42\u51fa\u519c\u6c11John \u9700\u8981\u4e3a\u4f7f\u6240\u6709\u519c\u573a\u90fd\u4e0e\u6709\u6c34\u7684\u519c\u573a\u76f8\u8fde\u6216\u62e5\u6709\u6c34\u4e95\u6240\u9700\u8981\u7684\u94b1\u6570\u3002\n\n## \u9898\u610f\n\n\u6709n\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u4e4b\u95f4\u90fd\u6709\u8fb9\u6743\uff0c\u4f46\u662f\u6bcf\u4e2a\u70b9\u4e5f\u6709\u70b9\u6743\u3002\n\n\u8981\u6c42\u7b97\u51fa\u6bcf\u4e2a\u70b9\u90fd\u8fde\u901a\u7684\u60c5\u51b5\u4e0b\uff08\u4f46\u662f\u4e0d\u8981\u6c42\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\u90fd\u7b97\u4e0a\uff09\uff0c\u6700\u5c0f\u4ef7\u503c\u3002\n\n## \u9898\u89e3\n\n\u8fd9\u9898\u5f88\u5bb9\u6613\u60f3\u5230\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4f46\u662f\u53c8\u6709\u597d\u591a\u4eba\u4e0d\u6562\u4e0b\u624b\u53bb\u5199\u6700\u5c0f\u751f\u6210\u6811\uff0c\u56e0\u4e3a\u8fd9\u91cc\u7684\u6bcf\u4e2a\u70b9\u8fd8\u6709\u70b9\u6743\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u628a\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\u5f53\u6210\u4e00\u4e2a\u6307\u5411\u81ea\u5df1\u7684\u8fb9\u6743\uff0c\u7136\u540e\u6784\u9020\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u5c31\u597d\u4e86\uff01\n\n## \u4ee3\u7801\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int maxx = 1e3+10;\nint n,cnt = 0,fa[maxx*maxx];\n\nstruct edge{\n    int u,v,w;\n    bool operator < (const edge &qwq)\n    {\n        return w < qwq.w;\n    }\n}G[maxx*maxx];\n\ninline void init()\n{\n    cin >> n;\n    for(int i = 1;i <= n;++i)\n    {\n        int w;\n        cin >> w;\n        G[++cnt].u = 0;\n        G[cnt].v = i;\n        G[cnt].w = w;\n    }\n    for(int i = 1;i <= n;++i)\n    {\n        for(int j = 1;j <= n;++j)\n        {\n            int w;\n            cin >> w;\n            if(i > j)\n            {\n                G[++cnt].u = i;\n                G[cnt].v = j;\n                G[cnt].w = w;\n            }\n        }\n    }\n    for(int i = 1;i <= cnt;++i) fa[i] = i;\n}    \n\ninline int fin(int x)\n{\n    return fa[x] == x ? x : fa[x] = fin(fa[x]);\n}\n\ninline int kul()\n{\n    sort(G+1,G+cnt+1);\n    int ans = 0,qwq = 0;\n    \n    for(int i = 1;i <= cnt;++i)\n    {\n        int x = fin(G[i].u),y = fin(G[i].v);\n        if(x != y)\n        { \n            fa[x] = y;\n            ++qwq;\n            ans += G[i].w;\n        }\n        if(qwq == n) break;\n    }\n\n    return ans;\n}\n\nint main(int argc, char const *argv[])\n{\n    init();\n    cout << kul();\n    return 0;\n}\n```",
        "postTime": 1540177648,
        "uid": 88197,
        "name": "Chicago_01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "emm\u2026\u2026\u8fd9\u9053\u9898\uff0c\u662f\u4e00\u4e2a **\u6700\u5c0f\u751f\u6210\u6811** \u7684\u9898\u76ee\n\n******\n\n\u5177\u4f53\u601d\u8def\uff1a\n\n1. \u9996\u5148\uff0c\u5982\u679c\u628a\u8fd9\u9053\u9898\u4e2d\u7684 **\u6316\u4e95** \u7684\u6761\u4ef6\u7ed9\u53bb\u6389\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u9053\u9898 **\u5c31\u662f\u4e00\u9053\u6700\u5c0f\u751f\u6210\u6811\u88f8\u9898**\n\n2. \u7136\u540e\uff0c\u8ba9\u6211\u4eec\u8003\u8651\u52a0\u4e86 **\u6316\u4e95** \u7684\u8fd9\u79cd\u8d39\u7528\u4e4b\u540e\u600e\u4e48\u505a\u8fd9\u9053\u9898:\n\n*****\n\n\u5176\u5b9e\uff0c\u53ea\u8981\u5c06 **\u5730** \u89c6\u4e3a\u4e00\u4e2a\u8282\u70b9\u6765\u505a\u5c31\u53ef\u4ee5\u4e86\uff0c\u5c06\u5730\u89c6\u4e3a\u4e00\u4e2a\u8282\u70b9\uff0c\u5c06\u6bcf\u4e00\u4e2a\u7267\u573a\u548c\u4e95\u8fde\u63a5\u7684\u8d39\u7528\u4f5c\u4e3a\u8fb9\u6743\n\n*****\n\n\u6211\u4e00\u5f00\u59cb\u6709\u4e00\u79cd\u9519\u8bef\u7684\u601d\u8def\uff0c\u662f\u8fd9\u6837\u7684\uff1a\n\n\u7531\u4e8e\u5bf9\u5730\u4e0a\u7684 **\u7267\u573a** \u6c42 **\u6700\u5c0f\u751f\u6210\u6811** \u4f1a\u8ba9\u6240\u6709\u7684\u7267\u573a\u8fde\u901a\uff0c\u7136\u540e\u518d\u627e\u4e00\u53e3\u8d39\u7528\u6700\u5c0f\u7684\u4e95\u5c31\u597d\uff0c\n\n\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6709\u4e00\u79cd\u60c5\u51b5\uff1a\n\n\u5047\u8bbe\u4e00\u53e3\u4e95\uff0c\u548c\u5176\u4ed6\u4e95\u8981\u8fde\u901a\u7684\u8d39\u7528\u5f88\u5927\uff0c\u4f46\u662f\u6253\u4e95\u7684\u8d39\u7528\u5f88\u5c0f\uff0c\u90a3\u4e48\u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u53ef\u80fd\u5c31\u4e0d\u4f1a\u4e3a\u8fd9\u4e2a\u7267\u573a\u6253\u4e95\uff0c\u5bfc\u81f4\u6700\u540e\u7684\u7ed3\u679c\u9519\u8bef\u3002\n\n****\n\n\u6700\u540e\uff0cAC\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n\nconst int MaxN = 300 + 10;\nconst int INF = 0x3f3f3f3f;\n\nint N, W[MaxN], well = INF, numEdge = 1, P[MaxN][MaxN];\n\nstruct Edge {\n    int u, v, weight;\n} edge[MaxN * MaxN + MaxN];\n\nstruct UnionFindSet {\n    int father[MaxN];\n    inline void Init(const int &__size) {\n        for (int i = 1; i <= __size; ++i) father[i] = i;\n    }\n    inline int Find(int o) {\n        return (father[o] == o) ? o : father[o] = Find(father[o]);\n    }\n} ufs;\n\n\ninline bool cmp(const Edge &__a, const Edge &__b) {\n    return __a.weight < __b.weight;\n}\n\nint Krushal() {\n    int ans = 0, x = 0;\n    std::sort(edge + 1, edge + numEdge + 1, cmp);\n    ufs.Init(N);\n    for (int i = 1; i <= numEdge; ++i) {\n        int xx = ufs.Find(edge[i].u), yy = ufs.Find(edge[i].v);\n        if (xx != yy) {\n            ufs.father[xx] = yy;\n            ++x;\n            ans += edge[i].weight;\n        }\n        if (x == N) return ans;\n    }\n    return ans;\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin >> N;\n    for (int i = 1; i <= N; ++i) {\n        std::cin >> W[i];\n        edge[numEdge++].u = 0;\n        edge[numEdge].v = i;\n        edge[numEdge].weight = W[i];\n    }\n    \n    for (int i = 1; i <= N; ++i) {\n        for (int j = 1; j <= N; ++j) {\n            std::cin >> P[i][j];\n            if (i > j) {\n                numEdge++;\n                edge[numEdge].u = i;\n                edge[numEdge].v = j;\n                edge[numEdge].weight = P[i][j];\n            }\n        }\n    }\n    int ans = Krushal();\n    std::cout << ans;\n    return 0;\n}\n```",
        "postTime": 1528364516,
        "uid": 51211,
        "name": "yjxyjx",
        "ccfLevel": 0,
        "title": "P1550 [USACO08OCT]\u6253\u4e95Watering Hole"
    },
    {
        "content": "\u867d\u7136\u8fd9\u9053\u9898\u5df2\u7ecf\u6709\u5f88\u591a\u5de8\u4f6c\u5199\u4e86\u9898\u89e3\uff0c\u4f46\u6211\u8fd8\u662f\u60f3\u5c1d\u8bd5\u4e00\u4e0b\n\n\u7ffb\u904d\u9898\u89e3\u533a\uff0c\u7528$Prim$\u7684\u597d\u50cf\u53ea\u6709$1$\u4e2a,\u8fd8\u5728\u5f88\u540e\u9762\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u7528$Prim$\u771f\u7684\u6bd4$Kru$\u597d\u554a\uff01\n\n\u90a3\u6211\u5199\u7684\u4ed4\u7ec6\u4e00\u70b9\u5427\uff1a\n\n### \u9996\u5148\u8bf4\u8bf4\u4f18\u70b9\u5728\u54ea\u5427\uff1a\n\n$1.$\u70b9\u5f88\u5c11\uff0c\u8fb9\u5f88\u591a\uff0c$Prim$\u5feb\uff01\n\n$2.$\u601d\u8def$Prim$\u66f4\u597d\u60f3\n\n### \u90a3\u4e48\u5c31\u5f00\u59cb\u8bb2\u89e3\u5566\uff01\n\n\u5927\u5bb6\u90fd\u662f\u975e\u5e38\u4f1a$Prim$\u7684\u4eba\u5bf9\u4e0d\u5bf9\uff01\u5927\u5bb6\u90fd\u61c2$Prim$\u7684\u5bf9\u4e0d\u5bf9\uff01\u5927\u5bb6\u90fd\u662f\u795e\u7287\u5bf9\u4e0d\u5bf9\uff01\uff01\uff01\u6211\u770b\u5230\u4eba\u7fa4\u4e2d\u6709\u90e8\u5206\u53ea\u4f1a$Kru$\u7684\u4eba\u4f4e\u4e0b\u4e86\u5934\u2026\u2026\n\n\u597d\u5566\uff0c\u90a3\u5c31\u8bb2\u4e00\u8bb2$Prim$\u5427\n\n$Prim$\u7684\u5927\u81f4\u601d\u8def\u6211\u5c31\u4e0d\u8bf4\u4e86\uff0c\u5927\u5bb6\u81ea\u884c\u524d\u5f80[P3366 \u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u7684\u9898\u89e3\u533a\uff08\u6709\u94fe\u63a5\uff09](https://www.luogu.org/problemnew/solution/P3366)\uff0c\u5927\u5bb6\u770b\u7b2c\u4e8c\u7bc7\uff0c\u4e2a\u4eba\u89c9\u5f97\u7b2c\u4e8c\u7bc7\u5199\u7684\u6bd4\u8f83\u597d\uff0c\u4f46\u662f$Prim$\u5177\u4f53\u8fd8\u662f\u8981\u53bb\u5b66\u7684\uff0c\u638c\u63e1\u591a\u79cd\u65b9\u6cd5\u8fd8\u662f\u5f88\u91cd\u8981\u7684\n\n\u90a3\u4e48\u6bd4\u8f83\u4e00\u4e0b$Prim$\u548c$Kru$\u5427\n\n$ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $Prim$ $ $ $ $ $ $ $ $  $ $ $ $ $ $ $ $ $ $ $ $$Kru$\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a  $ $ $ $ $O(n^2)$  $ $ $ $ $ $ $O(m$ $lgm)$\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a  $ $ $ $ $O(n^2)$  $ $ $ $  $ $ $ $ $ $ $ $ $ $ $O(m)$\n\n\u5176\u4e2d\uff0c$n$\u4e3a\u70b9\u6570\uff0c$m$\u4e3a\u8fb9\u6570\n\n\u7531\u6b64\u53ef\u89c1\uff0c\u5728\u70b9\u6570\u5c11\u7684\u65f6\u5019\uff0c\u7528$Prim$;\u5728\u8fb9\u5c11\u7684\u65f6\u5019\uff0c\u7528$Kru$\n\n\u90a3\u4e48\u628a\u6807\u7a0b\u653e\u4e0a\u6765\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint a[5005][5005],dis[5005],n,m,u,v,w,ans;\nbool used[5005];\nint Prim()\n{\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(used,false,sizeof(used));\n\tdis[1]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x=0;\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(used[j]==false&&(x==0||dis[x]>dis[j])) x=j;\n\t\tused[x]=true;\n\t\tans+=dis[x];\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(used[j]==false)\n\t\t\t\tdis[j]=min(dis[j],a[j][x]);    //\u624b\u52a8\u505a\u6807\u8bb0\n\t}\n\treturn ans;\n}\n\nint main()\n{\n\tcin>>n>>m;\n\tmemset(a,0x3f,sizeof(a));\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>u>>v>>w;\n\t\ta[u][v]=a[v][u]=min(a[u][v],w);\n\t}\n\tcout<<Prim()<<endl;\n\treturn 0;\n}\n```\n\n\uff08\u8fd9\u4e2a\u7a0b\u5e8f\u63d0\u4ea4$P3366$\u7684\u65f6\u5019\u8981\u5f00$O_2$\u624d\u80fd\u8fc7\uff0c\u539f\u56e0\uff1a\u8fd9\u9053\u9898\u70b9\u592a\u591a\u5566\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff09\n\n\u597d\u4e86\uff0c\u76f8\u4fe1\u4f60\u73b0\u5728\u4e00\u8138\u61f5\uff1a\u4e3a\u4ec0\u4e48\u8981\u628a\u8fd9\u9053\u9898\u7684\u7a0b\u5e8f\u653e\u4e0a\u6765\u5462\uff1f\n\n\u539f\u56e0\uff1a\u8fd9\u9053\u9898\u771f\u7684\uff0c\u53ea\u7528\u6539\u51e0\u4e2a\u5b57\u5c31\u7ed3\u675f\u4e86\n\n\u5728\u6211\u505a\u6807\u8bb0\u7684\u90a3\u4e00\u884c\uff0c\u53ea\u8981\u628a\u81ea\u5df1\u6253\u4e95\u7684\u94b1\u6570\u52a0\u8fdb\u53bb\u4e00\u8d77\u6c42\u6700\u5c0f\u503c\u5c31\u7ed3\u675f\u4e86\uff01\n\n\u8fd9\u5c31\u662f$Prim$\u4f18\u4e8e$Kru$\u7684\u4e00\u4e2a\u5730\u65b9\uff0c$Kru$\u8003\u8651\u8fb9\uff0c\u5f88\u96be\u53d7\uff0c\u5f88\u96be\u60f3\u4f46\u662f$Prim$\u5c31\u5f88\u597d\u60f3\u5230\uff01\n\n\u90a3\u4e48\u5c31\u4e0a\u8fd9\u9053\u9898\u7684\u4ee3\u7801\u4e86\uff01\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint w[305],a[305][305],dis[305],n,ans;\nbool used[305];\nint Prim()\n{\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(used,false,sizeof(used));\n\tint minn=INT_MAX,st=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(minn>w[i])\n\t\t{\n\t\t\tminn=w[i];\n\t\t\tst=i;\n\t\t}\n\t}\n\tans+=minn;\n\tdis[st]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x=0;\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(used[j]==false&&(x==0||dis[x]>dis[j])) x=j;\n\t\tused[x]=true;\n\t\tans+=dis[x];\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(used[j]==false)\n\t\t\t\tdis[j]=min(min(dis[j],a[x][j]),w[j]);    //\u770b\u89c1\u6ca1\u6709\uff1f\uff1fPrim\u725b\u903c\uff01\n\t}\n\treturn ans;\n}\n\nint main()\n{\n\tcin>>n;\n\tmemset(a,0x3f,sizeof(a));\n\tfor(int i=1;i<=n;i++) cin>>w[i];\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tcin>>a[i][j];\n\t\t}\n\t}\n\tcout<<Prim()<<endl;\n\treturn 0;\n}\n```\n\n\u5927\u5bb6\u771f\u7684\u8981\u638c\u63e1\u591a\u79cd\u65b9\u6cd5\u554a\uff01\u4e07\u4e00\u5c31\u6709\u6570\u636e\u5361\u7206\u4e86$Kru$\u600e\u4e48\u529e\uff08\u597d\u50cf\u4e0d\u5927\u53ef\u80fd\u2026\u2026\uff09",
        "postTime": 1566382595,
        "uid": 174867,
        "name": "\u8d64\u971eQvQ",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u8fd9\u9898\u662f\u4e00\u9053**MST**\u7684\u6a21\u677f\u9898\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u8bf4\u5462\uff1f\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u5c06\u6240\u6709\u70b9\u8054\u901a\uff0c\u81ea\u7136\u800c\u7136\u5c31\u4f1a\u60f3\u5230MST\uff0c\u4f46\u8fd9\u9898\u6709\u70b9\u7279\u6b8a\u3002\u5c31\u662f\u53ef\u80fd\u662f\u4e00\u4e2a**\u68ee\u6797**\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8282\u70b9\u662f\u53ef\u4ee5\u81ea\u5df1\u72ec\u7acb\u6210\u4e3a\u4e00\u9897\u6811\u7684\uff0c\u5373\u53ef\u80fd\u4f1a\u6709**\u591a\u9897\u6700\u5c0f\u751f\u6210\u6811**\u3002\n\n\u6c42**\u591a\u9897**\u6700\u5c0f\u751f\u6210\u6811\u80af\u5b9a\u8981\u6bd4\u6c42**\u4e00\u9897**\u590d\u6742\uff08~~\u5176\u5b9e\u662f\u6211\u4e0d\u4f1a~~\uff09\uff0c\u6240\u6709\u6211\u4eec\u8981\u5c06**\u591a\u9897**\u8f6c\u5316\u6210\u4e00\u9897\uff0c\u4f46\u600e\u4e48\u8f6c\u5462\uff1f\n\n\u68ee\u6797\u8f6c\u5316\u4e3a\u6811\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u5728\u68ee\u6797\u4e2d\u5efa\u4e00\u4e2a\u6839\uff0c\u5c06\u6240\u6709\u5b50\u6811\u8054\u5411\u8fd9\u4e2a\u6839\u5c31\u5c06\u8fd9\u4e2a\u68ee\u6797\u8f6c\u5316\u4e3a\u4e00\u9897\u6811\u4e86\u3002\n\n\u8fd9\u9898\u4e5f\u662f\u4e00\u6837\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5411\u6211\u4eec\u65b0\u5efa\u7684\u201c\u68ee\u6797\u7684\u6839\u8282\u70b9\u201d\u8fde\u8fb9\uff0c\u8fb9\u503c\u5c31\u662f\u81ea\u5df1\u6316\u4e95\u7684\u8d39\u7528\uff0c\u5373\u6c42N+1\u4e2a\u8282\u70b9\u7684MST\n\n\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\n#define maxn 305\nusing namespace std;\nint n,fa[maxn],Q[maxn],tot,Ans,x;\nstruct lc{\n\tint x,y,z;\n\tbool operator <(const lc b)const{return z<b.z;}\n}a[maxn*maxn];\ninline int read(){\n\tint ret=0,f=1;char ch=getchar();\n\twhile (ch<'0'||ch>'9'){if (ch=='-') f=-f;ch=getchar();}\n\twhile (ch<='9'&&ch>='0') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret*f;\n}\ninline int getfa(int x){\n\tif (fa[x]==x) return x;\n\treturn fa[x]=getfa(fa[x]);\n}\nint main(){\n\tn=read();\n\tfor (int i=1;i<=n;i++) Q[i]=read(),fa[i]=i;\n\tfor (int i=1;i<=n;i++)\n\tfor (int j=1;j<=n;j++){\n\t\tx=read();\n\t\tif (i!=j) a[++tot].x=i,a[tot].y=j,a[tot].z=x;\n    }\n\tfor (int i=1;i<=n;i++) a[++tot].x=i,a[tot].y=n+1,a[tot].z=Q[i];\n\tsort(a+1,a+tot+1);\n\tfor (int i=1;i<=tot;i++){\n\t\tint fx=getfa(a[i].x),fy=getfa(a[i].y);\n\t\tif (fx==fy) continue;\n\t\tfa[fy]=fx,Ans+=a[i].z;\n\t}\n\tprintf(\"%d\",Ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1565311261,
        "uid": 108047,
        "name": "LlLlCc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u89e3\u9898\u62a5\u544a\uff1a\n\n\u8fd9\u6761\u9898\u76ee\u4e4d\u4e00\u773c\u770b\u4e0a\u53bb\u771f\u7684\u5f88\u96be\u5f88\u96be \n\n\u4e00\u70b9\u601d\u8def\u90fd\u6ca1\u6709\n\n\u5982\u679c\u6ca1\u6709\u6316\u6398\u6bcf\u4e00\u53e3\u4e95\u9700\u8981\u7684\u82b1\u8d39\uff0c\u90a3\u4e48\u8fd9\u6761\u9898\u76ee\u5c31\u53d8\u6210\u4e86\u8fde\u63a5\u6240\u6709\u7684\u70b9\u6240\u82b1\u8d39\u7684\u6700\u5c0f\u6743\u503c\uff0c\u90a3\u4e48\u95ee\u9898\u662f\u4ed6\u6bcf\u4e00\u53e3\u4e95\u8fd8\u6709\u82b1\u8d39\uff0c\u800c\u4e14\u4e5f\u4e0d\u4e00\u5b9a\u53ea\u6316\u4e00\u53e3\u4e95\uff0c\u540c\u65f6\u4e95\u8fd8\u662f\u5fc5\u987b\u8981\u6316\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u601d\u8003\uff1f\n\n\u6c42\u8fde\u63a5\u4e00\u4e2a\u56fe\u91cc\u9762\u7684\u6240\u6709\u8282\u70b9\u7684\u6700\u5c0f\u6743\u503c\u80af\u5b9a\u662f\u6c42\u8fd9\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8fd9\u4e2a\u80af\u5b9a\u662f\u6bcb\u5eb8\u7f6e\u7591\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u6316\u6398\u6bcf\u4e00\u53e3\u7684\u4e95\u6240\u82b1\u8d39\u7684\u4ee3\u4ef7\u662f\u4e0d\u662f\u53ef\u4ee5\u770b\u4f5c\u4e3a\u8be5\u53e3\u4e95\u8fde\u6709\u4e00\u6761\u6307\u5411\u6c34\u6e90\u7684\u8fb9\u5462\uff1f\n\n\u6c34\u6e90\u5934\u6211\u4eec\u62bd\u8c61\u4e3a0\u53f7\u8282\u70b9\uff0c\u589e\u52a0n\u6761\u6307\u5411\u6c34\u6e90\u7684\u8fb9\uff0c\u8fb9\u6743\u503c\u4e3a\u6316\u4e95\u6240\u82b1\u8d39\u7684\u4ee3\u4ef7\uff0c\u90a3\u4e48\u5728\u8fdb\u884cKruskal\u65f6\uff0c\u8981\u4fdd\u8bc1\u8282\u70b9\u5168\u90e8\u8986\u76d6\uff0c\u90a3\u4e48\u5fc5\u5b9a\u6709\u6307\u5411\u6c34\u6e90\u7684\u8fb9\uff0c\u5373\u6709\u6c34\u4e95\u88ab\u6316\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct p{\n\tint x,y,z;\n}a[1000005];\nint tmp,tot,n,px,py,ans,f[305];\nint find(int x){\n\tif (x==f[x]) return x;\n\treturn f[x]=find(f[x]);\n}\nbool cmp(p a,p b){\n\treturn a.z<b.z;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++) f[i]=i;\n\tfor (int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&tmp);\n\t\ttot++;\n\t\ta[tot].x=0;\n\t\ta[tot].y=i;\n\t\ta[tot].z=tmp;\n\t}\n\tfor (int i=1;i<=n;i++)\t\n\t\tfor (int j=1;j<=n;j++){\n\t\t\tscanf(\"%d\",&tmp);\n\t\t\tif (i==j) continue;\n\t\t\ttot++;\n\t\t\ta[tot].x=i;\n\t\t\ta[tot].y=j;\n\t\t\ta[tot].z=tmp;\n\t\t}\n\tsort(a+1,a+tot+1,cmp);\n\tfor (int i=1;i<=tot;i++){\n\t\tpx=find(a[i].x);\n\t\tpy=find(a[i].y);\n\t\tif (px==py) continue;\n\t\tf[px]=py;\n\t\tans+=a[i].z;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1554811579,
        "uid": 99460,
        "name": "Hiraeth",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u9898\u76ee\u8981\u6c42\"\u4f7f\u6240\u6709\u519c\u573a\u90fd\u4e0e\u6709\u6c34\u7684\u519c\u573a\u76f8\u8fde\u6216\u62e5\u6709\u6c34\u4e95\u6240\u9700\u8981\u7684\u94b1\u6570\"\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5**\u8bbe\u4e00\u4e2a\u865a\u70b9\u8868\u793a\u4e95,\u4e95\u4e0e\u6bcf\u4e2a\u70b9\u8fde\u8fb9\u7684\u8fb9\u6743\u5c31\u662f\u5728\u90a3\u4e2a\u70b9\u6253\u4e95\u7684\u5f00\u9500**,\u8fd9\u6837\u5c31\u4f7f\u6700\u540e\u89e3\u5f97\u7684\u65b9\u6848\u662f\u4e00\u68f5\u6811,\u5728\u56fe\u4e2d\u627e\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u6811,\u76f4\u63a5\u8dd1\u6700\u5c0f\u751f\u6210\u6811\u5c31\u884c\n\n\u6309\u7406\u8bf4\u7a20\u5bc6\u56fe\u5e94\u8be5\u7528Prim\u8dd1\u66f4\u5feb,\u7136\u800c\u6211\u53ea\u4f1aKru\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\ntypedef long long ll;\n#define maxn 311\n#define maxm 300001\n\nstruct Edge\n{\n\tll u,v,w;\n\tbool operator <(const Edge &t)\n\tconst\n\t{\n\t\treturn w<t.w;\n\t}\n}e[maxm];\nll n,m=0;\nvoid start()\n{\n\tscanf(\"%lld\",&n);\n\tfor(ll i=1;i<=n;++i)//addedge(0,i,w)\n\t{\n\t\t++m;\n\t\te[m].u=0;e[m].v=i;//\u4e95\u7684\u7f16\u53f7\u662f0,\u4f46\u662fn+1\u4e5f\u53ef\u4ee5\u7684\n\t\tscanf(\"%lld\",&e[m].w);\n\t}\n\tfor(ll i=1;i<=n;++i)\n\t{\n\t\tfor(ll j=1;j<=n;++j)//addedge(i,j,w)\n\t\t{\n\t\t\t++m;\n\t\t\te[m].u=i;e[m].v=j;\n\t\t\tscanf(\"%lld\",&e[m].w);\n\t\t}\n\t}\n}\n\nstruct ufs//\u5c01\u88c5\u5e76\u67e5\u96c6(union find set)\n{\n\tll fa[maxn];\n\tvoid start()\n\t{\n\t\tfor(ll i=0;i<=n;++i)fa[i]=i;//\u4e0d\u80fd\u628a0\u6f0f\u4e86\n\t}\n\tll find(ll x)\n\t{\n\t\tif(fa[x]==x)return x;\n\t\telse return find(fa[x]);\n\t}\n\tbool uni(ll a,ll b)\n\t{\n\t\ta=find(a),b=find(b);\n\t\tif(a==b)return 0;\n\t\tfa[a]=b;\n\t\treturn 1;\n\t}\n}s;\nll Kru()\n{\n\tstd::sort(e+1,e+m+1);\n\tll cnt=0,res=0;\n\tfor(ll i=1;i<=m;++i)\n\t{\n\t\tif(s.uni(e[i].u,e[i].v))\n\t\t{\n\t\t\t++cnt;\n\t\t\tres+=e[i].w;\n\t\t\tif(cnt==n)return res;//\u6709n+1\u4e2a\u70b9,\u6240\u4ee5\u751f\u6210\u6811\u6709n\u6761\u8fb9\n\t\t}\n\t}\n\treturn -1;\n}\nint main()\n{\n\tstart();//\u6a21\u5757\u5316\u7f16\u7a0b\n\ts.start();\n\tprintf(\"%lld\",Kru());\n\treturn 0;\n}\n```",
        "postTime": 1549359731,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u672c\u6587\u65e9\u5df2\u53d1\u5e03\u4e8e[Handwer's Blog](https://blog.handwer-std.top/2019-01-12/BZOJ1601/)\n\n\u5f88\u663e\u7136\u8fd9\u9053\u9898\u9700\u8981\u6700\u5c0f\u751f\u6210\u6811\n\n\u90a3\u4e48\u662f\u4e0d\u662f\u6211\u4eec\u751f\u6210\u6811\u4e4b\u540e\u52a0\u4e0a\u6839\u8282\u70b9\u7684$w$\u503c\u5c31\u53ef\u4ee5\u4e86\uff1f\n\n\u663e\u7136\u4e0d\uff01\n\u5f88\u5bb9\u6613\u5c31\u80fd\u4e3e\u51fa\u53cd\u4f8b\uff1a\n\n\u6700\u5c0f\u751f\u6210\u6811\u7684\u6839\u8282\u70b9$w_1=99999$\uff0c\u6b21\u5c0f\u751f\u6210\u6811\u7684\u6839\u8282\u70b9$w_2=1$\uff0c\u4e24\u4e2a\u751f\u6210\u6811\u7b54\u6848\u4e4b\u5dee $ans_1-ans_2=1$\uff0c\u90a3\u4e48\u6b64\u65f6\u9009\u62e9\u6b21\u5c0f\u751f\u6210\u6811\u662f\u66f4\u4f18\u7684\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u5efa\u4e00\u4e2a\u865a\u62df\u7684\u7f16\u53f7\u4e3a$n+1$\u7684\u70b9\uff0c\u5bf9\u4e8e\u6240\u6709\u7684\u70b9$i$\u4ee5$w_i$\u4e3a\u8fb9\u6743\u8fdb\u884c\u8fde\u63a5\n\n\u6700\u540e\u76f4\u63a5\u8dd1\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\uff0c\u6b63\u786e\u6027\u663e\u7136\n\n# \u4ee3\u7801\u5b9e\u73b0\n```cpp\n/* -- Basic Headers -- */\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cctype>\n#include <algorithm>\n\n/* -- STL Iterators -- */\n#include <vector>\n#include <string>\n#include <stack>\n#include <queue>\n\n/* -- External Headers -- */\n#include <map>\n#include <cmath>\n\n/* -- Defined Functions -- */\n#define For(a,x,y) for (int a = x; a <= y; ++a)\n#define Forw(a,x,y) for (int a = x; a < y; ++a)\n#define Bak(a,y,x) for (int a = y; a >= x; --a)\n\nnamespace FastIO {\n    \n    inline int getint() {\n        int s = 0, x = 1;\n        char ch = getchar();\n        while (!isdigit(ch)) {\n            if (ch == '-') x = -1;\n            ch = getchar();\n        }\n        while (isdigit(ch)) {\n            s = s * 10 + ch - '0';\n            ch = getchar();\n        }\n        return s * x;\n    }\n    inline void __basic_putint(int x) {\n        if (x < 0) {\n            x = -x;\n            putchar('-');\n        }\n        if (x >= 10) __basic_putint(x / 10);\n        putchar(x % 10 + '0');\n    }\n    \n    inline void putint(int x, char external) {\n        __basic_putint(x);\n        putchar(external);\n    }\n}\n\n\nnamespace Solution {\n    struct UnionFind {\n        static const int MAX_SIZ = 100000 + 10;\n        \n        int U[MAX_SIZ];\n        \n        UnionFind() {\n            For (i, 1, MAX_SIZ) U[i] = i;\n        }\n        \n        int Find(int x) {\n            if (U[x] == x) return U[x];\n            return U[x] = Find(U[x]);\n        }\n        \n        void Union(int x, int y) {\n            int xx = Find(x);\n            int yy =  Find(y);\n            if (xx == yy) return;\n            U[x] = y;\n        }\n    };\n    \n    struct Graph {\n        static const int MAXN = 1000 + 10;\n        static const int MAXM = 100000 + 10;\n        \n        struct Node {\n            int nweight, now;\n            \n            Node() { nweight = now = 0; }\n            \n            bool operator < (const Node &that) const {\n                return nweight > that.nweight;\n            }\n        };\n        \n        struct Edge {\n            int now, weight, next;\n            int raw_now, raw_next;\n            \n            bool operator < (const Edge &that) const {\n                return weight < that.weight;\n            }\n        } edge[MAXM * 2];\n        \n        int head[MAXN], dis[MAXN], cnt;\n        \n        inline void addEdge(int prev, int next, int weight, bool isR = true) {\n            if (isR) { addEdge(next, prev, weight, false); }\n            edge[++cnt].now = next;\n            edge[cnt].weight = weight;\n            edge[cnt].next = head[prev];\n            head[prev] = cnt;\n            \n            edge[cnt].raw_next = next;\n            edge[cnt].raw_now = prev;\n        }\n        \n        inline Node NewNode(int nowWeight, int now) {\n            Node tmp;\n            tmp.nweight = nowWeight;\n            tmp.now = now;\n            return tmp;\n        }\n        \n        inline void SPFA() {\n            memset(dis, 0x7f, sizeof(dis));\n            std::priority_queue<Node> q;\n            q.push(NewNode(0, 1));\n            dis[1] = 0;\n            while (!q.empty()) {\n                Node NowNode = q.top();\n                q.pop();\n                int now = NowNode.now;\n                for (int e = head[now]; e; e = edge[e].next) {\n                    int to = edge[e].now;\n                    if (dis[to] > dis[now] + edge[e].weight) {\n                        dis[to] = dis[now] + edge[e].weight;\n                        q.push(NewNode(dis[to], to));\n                    }\n                }\n            }\n        }\n        \n        inline int Kruskal() {\n            int ans = 0, tot = 0;\n            UnionFind u;\n            std::sort(edge + 1, edge + 1 + cnt);\n            for (int i = 1; i <= cnt; ++i) {\n                int eu = u.Find(edge[i].raw_now);\n                int ev = u.Find(edge[i].raw_next);\n                if (eu == ev) continue;\n                u.Union(eu, ev);\n                ans += edge[i].weight;\n                \n                ++tot;\n                if (tot == cnt - 1) break;\n            }\n            return ans;\n        }\n    } g1;\n    \n    int n, m;\n}\n\nsigned main() {\n#define HANDWER_FILE\n#ifndef HANDWER_FILE\n    freopen(\"testdata.in\", \"r\", stdin);\n    freopen(\"testdata.out\", \"w\", stdout);\n#endif\n    using namespace Solution;\n    using FastIO::getint;\n    n = getint();\n    For (i, 1, n) g1.addEdge(i, n + 1, getint());\n    For (i, 1, n) {\n        For (j, 1, n) {\n            int p = getint();\n            g1.addEdge(i, j, p, false);\n        }\n    }\n    FastIO::putint(g1.Kruskal(), '\\n');\n    return 0;\n}\n```",
        "postTime": 1548904678,
        "uid": 56626,
        "name": "HDWR",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u90fd\u8bf4\u8981\u52a0\u4e2a0\u53f7\u70b9\u554a\u3002\u3002\u3002\n\n\u76f4\u63a5kru+\u8d2a\u5fc3\u6700\u540e\u518d\u626b\u4e00\u904d\u4e0d\u597d\u5417\uff1f\n\n\u6bd4\u8f83\u663e\u7136\u7684\u8d2a\u5fc3+\u6700\u5c0f\u751f\u6210\u6811\n\n\u5e76\u67e5\u96c6\u7ef4\u62a4\u7684\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u8054\u901a\u5757\u91cc\u6316\u4e95\u7684\u82b1\u8d39\u6700\u5c0f\u503c\uff0c\u505a\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\u8d2a\u5fc3\u4e00\u4e0b\n\n\u5982\u679c\u8054\u901a\uff08\u4e00\u6761\u8fb9\uff09\u7684\u82b1\u8d39\u52a0\u4e0a\u4e24\u4e2a\u8054\u901a\u5757\u91cc\u6316\u4e95\u7684\u6700\u5c0f\u503c\u7684\u8f83\u5c0f\u503c\u5c0f\u4e8e\u5728\u4e24\u4e2a\u8054\u901a\u5757\u91cc\u6316\u4e95\u7684\u82b1\u8d39\u6700\u5c0f\u503c\u4e4b\u548c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u628a\u5b83\u4eec\u8054\u901a\uff0c\u5426\u5219\u5c31\u8ba9\u4ed6\u4eec\u5206\u522b\u6316\u4e95\u5c31\u597d\u4e86\n\n\n\n\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#define rep(i,l,r) for(int i=l;i<=r;++i)\n#define per(i,l,r) for(int i=l;i>=r;--i)\nusing namespace std;\ninline int read()\n{\n\tchar c;\n\tbool t=0;\n\tint a=0;\n\twhile((c=getchar())==' '||c=='\\n'||c=='\\r');\n\tif(c=='-')\n\t{\n\t\tt=1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\ta*=10;\n\t\ta+=(c-'0');\n\t\tc=getchar();\n\t}\n\treturn a*(t?-1:1);\n}\nstruct Edge{\n\tint from,to,v;\n\tbool operator<(const Edge &b)const\n\t{\n\t\treturn v<b.v;\n\t}\n}e[301*301];\nint n,w[301],cnt;\nint fa[301],minn[301];\nbool water[301];\nint find(int x)\n{\n\treturn fa[x]<0?x:(fa[x]=find(fa[x]));\n}\nvoid merge(int x,int y)\n{\n\tx=find(x);y=find(y);\n\tif(fa[x]>fa[y])\n\t swap(x,y);\n\tfa[x]+=fa[y];\n\tminn[x]=min(minn[x],minn[y]);\n\tfa[y]=x;\n}\nvoid add(const int &from,const int &to,const int &v)\n{\n\te[++cnt].from=from;\n\te[cnt].to=to;\n\te[cnt].v=v;\n}\nint main()\n{\n\t//freopen(\"a.in\",\"r\",stdin);\n\tint tx,ty;\n\tlong long ans=0;\n\tn=read();\n\trep(i,1,n)\n\t fa[i]=-1;\n\trep(i,1,n)\n\t{\n\t\tw[i]=read();\n\t\tminn[i]=w[i];\n\t}\n\trep(i,1,n)\n\t rep(j,1,n)\n\t {\n\t\ttx=read();\n\t\tif(i<j)//not have to add an edge twice\n\t\t add(i,j,tx);\n\t }\n\tsort(e+1,e+cnt+1);\n\trep(i,1,cnt)\n\t{\n\t\ttx=find(e[i].from);ty=find(e[i].to);\n\t\tif(tx==ty)\n\t\t continue;\n\t\tif(min(minn[tx],minn[ty])+e[i].v<=minn[tx]+minn[ty])//e[i].v<=minn[tx]+minn[ty])\n\t\t{\n\t\t\tans+=e[i].v;\n\t\t\tmerge(tx,ty);\n\t\t}\n\t}\n\trep(i,1,n)\n\t{\n\t\ttx=find(i);\n\t\tif(!water[tx])\n\t\t{\n\t\t\tans+=minn[tx];\n\t\t\twater[tx]=1;\n\t\t}\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1539314490,
        "uid": 36194,
        "name": "EightSixSun",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e00\u4e0b\u9898\u89e3\uff0c\u611f\u89c9\u8fd8\u662f\u8bf4\u5f97\u4e0d\u7ec6\uff0c\u4ee5\u8d34\u4ee3\u7801\u4e3a\u4e3b\u3002\n\n\u5176\u5b9e\u53d9\u8ff0\u660e\u786e\u7684\u8bdd\uff0c\u4ee3\u7801\u90fd\u65e0\u6240\u8c13\u4e86\u3002\n\n\u5148\u5047\u8bbe\u4e0d\u7528\u6253\u4e95\uff0c\u5c31\u662f\u6807\u51c6\u7684**\u6700\u5c0f\u751f\u6210\u6811**\u6a21\u677f\u3002\n\n\u7136\u800c\u662f\u8981\u7684\u3002\u5047\u8bbe\u6700\u5c0f\u751f\u6210\u6811\u7684 **\u8fb9\u6743\u548c \u56fa\u5b9a**\uff0c\u5c31**\u8d2a\u5fc3**\u627e\u6700\u4fbf\u5b9c\u7684\u4e95\u3002\n\n\u5982\u679c\u53ea\u80fd\u6253\u4e00\u53e3\u4e95\uff0c\u8fd9\u9898\u5c31\u7ed3\u675f\u4e86\u3002   \n~~\u7136\u800c\u8fd9\u9898\u5145\u5206\u4f53\u73b0\u4e86\u4e07\u6076\u7684\u8d44\u672c\u4e3b\u4e49\u538b\u69a8\u5229\u76ca\u7684\u672c\u8d28\u3002~~\n\n\u6709\u65f6\uff0c\u4e00\u6761\u8fb9\u6743\u53ef\u80fd\u5927\u4e8e\u8fd9\u6761\u8fb9\u76f8\u63a5\u7684\u70b9\u6743\u3002\u66ff\u6362\uff0c\u66f4\u65b0\u7b54\u6848\u3002\n$$the-end.$$\n\n\u5e7f\u544a\uff1a[\u6211\u7684\u6d1b\u8c37\u535a\u5ba2](https://www.luogu.org/blog/IvorLin/)",
        "postTime": 1534689148,
        "uid": 61466,
        "name": "ivorLin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "prim\u505a\u6cd5\uff0c\u5148\u5c06\u6253\u4e95\u7684\u4ef7\u683c\u5b58\u5165dis\u6570\u7ec4\uff0c\u627e\u4e00\u4e2a\u6253\u4e95\u6700\u4fbf\u5b9c\u7684\uff0c\u6253\u4e2a\u4e95\u8bbe\u4e3a\u539f\u70b9\uff0c\u7136\u540e\u8dd1prim\uff0c\u7528\u8fb9\u6743\u66f4\u65b0dis\uff0c\u8fb9\u77ed\u5c31\u8fde\u8fb9\uff0c\u4e95\u5c0f\u5c31\u6253\u4e95\uff0c\u6253\u5b8c\u628adis\u53d80\n\n\u8bc4\u6d4b\u8bb0\u5f55\uff1a42ms  https://www.luogu.org/record/show?rid=2408644\n\n\u00b7\u00b7\u00b7\n    \n    \n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,dis[305],e[305][305],t,w,ans;\nbool flag;\nint main(){\n    scanf(\"%d\",&n);\n    dis[0]=(1<<30);\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&dis[i]);\n        if(dis[i]<dis[0]){//\u627e\u6700\u4fbf\u5b9c\u7684\u4e95\u8bbe\u4e3a\u539f\u70b9 \n            dis[0]=dis[i];\n            t=i;\n        }\n    }\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=n;j++){\n            scanf(\"%d\",&e[i][j]);\n        }\n    }\n    ans+=dis[0];//\u52a0\u4e0a\u539f\u70b9\u6253\u4e95\u7684\u94b1 \n    dis[t]=0;\n    for(int j=1;j<=n;j++){//\u5148\u8dd1\u4e00\u904d\u66f4\u65b0\u5230\u539f\u70b9\u662f\u6253\u4e95\u5212\u7b97\u8fd8\u662f\u94fa\u8def\u5212\u7b97 \n        if(dis[j]>e[t][j]){\n            dis[j]=e[t][j];\n        }\n    }\n    for(int i=1;i<=n-1;i++){//prim\u90e8\u5206 \n        w=(1<<30);\n        for(int j=1;j<=n;j++){//\u770b\u5230\u90a3\u4e2a\u70b9\u6700\u8fd1 \n            if(dis[j]<w&&dis[j]!=0){\n                w=dis[j];\n                t=j;\n            }\n        }\n        ans+=w;//\u52a0\u4e0a\u5230\u6700\u8fd1\u7684\u70b9\u7684\u4ef7\u683c \n        dis[t]=0;\n        for(int j=1;j<=n;j++){\n            if(dis[j]>e[t][j]){\n                dis[j]=e[t][j];//\u66f4\u65b0\u5230\u6bcf\u4e2a\u70b9\u7684\u4ef7\u683c \n            }\n        }\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1498446517,
        "uid": 33084,
        "name": "circlegg",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u91c7\u7528\u7684\u697c\u4e0b\u524d\u8f88\u6784\u9020\u4e00\u4e2a\u65b0\u70b9\u7684\u601d\u8def~\u770b\u5230\u6ca1\u6709c++\u7684\u6700\u5c0f\u751f\u6210\u6811\u9898\u89e3\u611f\u5230\u7070\u5e38\u4e0d\u723d\n\n\u601d\u8def\u662f\u6784\u5efa\u4e00\u4e2a\u865a\u62df\u7684\u70b9\uff0c\u8fd9\u91cc\u5c06\u5176\u7f16\u53f7\u4e3an+1\uff0c\u8be5\u5e97\u4e0e\u539f\u56fe\u7684\u70b9\u7684\u6743\u503c\u4e3a\u8be5\u539f\u56fe\u7684\u70b9\u4e0a\u6253\u4e95\u7684\u8d39\u7528\uff0c\u7136\u540e\u6c42\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u9053\u7406\u662f\u8fd9\u6837\u7684\uff1a\u5982\u679c\u53bb\u6389\u52a0\u4e0a\u7684\u8fd9\u4e2a\u70b9\uff0c\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\u7684\u56fe\u4f1a\u53d8\u6210\u4e00\u4e2a\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u800c\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\u90fd\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u6253\u4e86\u4e95\u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e9b\u4e92\u4e0d\u76f8\u8fde\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u53ef\u4ee5\u770b\u6210\u662f\u7528\u6253\u4e95\u8fde\u901a\u7684\uff0c\u4f7f\u8be5\u56fe\u6210\u4e3a\u4e00\u4e2a\u8fde\u901a\u7684\u56fe\u3002\u5f53\u4f60\u9009\u62e9\u5728\u4e00\u4e2a\u70b9\u6253\u4e95\u65f6\uff0c\u53ef\u4ee5\u770b\u505a\u4f60\u5c06\u8be5\u70b9\u4e0e\u522b\u7684\u6253\u4e95\u4e86\u7684\u70b9\u8fde\u901a\u4e86\uff0c\u8fd9\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\u901a\u8fc7\u6253\u4e95\u8fde\u63a5\u5728\u4e86\u4e00\u8d77\uff0c\u56e0\u6b64\u53ef\u4ee5\u65b0\u5efa\u4e00\u4e2a\u70b9n+1\uff0c\u5230\u539f\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\u7b49\u4e8e\u5728\u8be5\u70b9\u6253\u4e95\u7684\u8d39\u7528\uff0c\u518d\u6c42\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n```cpp\n\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nint cost[301],cnt=0,fa[301];\n\nstruct edge\n{\n    int u,v,w;\n}e[100000];\n\nbool cmp(edge a,edge b)\n{\n    return a.w<b.w;\n}\n\nint find(int x)\n{\n    return fa[x]==x?x:fa[x]=find(fa[x]);\n}\n\nint main()\n{\n    int n,ans=0;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&cost[i]);\n        e[++cnt].u=n+1;\n        e[cnt].v=i;\n        e[cnt].w=cost[i];\n        fa[i]=i;\n    }\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=n;j++)\n        {\n            int t;\n            scanf(\"%d\",&t);\n            if(j>i)\n            {\n                e[++cnt].u=i;\n                e[cnt].v=j;\n                e[cnt].w=t;\n            }\n        }\n    }\n    sort(e+1,e+cnt+1,cmp);\n    int flag=0;\n    for(int i=1;i<=n;i++)\n    {\n        while(1)\n        {\n            ++flag;\n            int t1=find(e[flag].u),t2=find(e[flag].v);\n            if(t1==t2)continue;\n            else\n            {\n                fa[t2]=fa[t1];\n                ans+=e[flag].w;\n                break;\n            }\n        }\n    }\n    printf(\"%d\",ans);\n    return 0;\n} \n\n```",
        "postTime": 1466774236,
        "uid": 14815,
        "name": "crowworks695",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u9996\u5148\u6839\u636e\u6570\u636e\u8303\u56f4\u3002n<=300,\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528O(n^3)\u4ee5\u53ca\u4ee5\u4e0b\u7684\u7b97\u6cd5\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff1a\u53ea\u8981\u6bcf\u6b21\u627e\u5230\u704c\u6c34\u4ee3\u4ef7\u6700\u5c0f\u7684\u7530\uff0c\u603b\u7b56\u7565\u5c31\u4e00\u5b9a\u662f\u6700\u5c0f\u4ee3\u4ef7\u3002\u56e0\u65e0\u6cd5\u653e\u56fe\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u518d\u8be6\u7ec6\u5206\u6790\u3002\n\n\u7531\u4e0a\uff0c\u9009\u62e9\u8d2a\u5fc3\u7b97\u6cd5\u3002\n\n\u6bcf\u4e00\u7247\u7530\u8981\u704c\u6c34\uff0c\u6709\u4e24\u79cd\u9009\u62e9\uff1a\u7b2c\u4e00\u79cd\u662f\u6253\u4e95\uff0c\u7b2c\u4e8c\u79cd\u662f\u5f15\u6c34\u3002\n\n\u5148\u5bfb\u627e\u5f53\u524d\u6253\u4e95\u4ee3\u4ef7\u6700\u5c0f\u7684\u7530\uff0c\u7136\u540e\u518d\u5bfb\u627e\u5f15\u6c34\u4ee3\u4ef7\u6700\u5c0f\u7684\u7530\uff0c\u4e24\u4e2a\u6700\u5c0f\u503c\u6bd4\u8f83\u540e\u518d\u5c06\u4ee3\u4ef7\u7d2f\u52a0\u3002\n\n\u4e0b\u9762\u7ed9\u51faAC\u4ee3\u7801\uff1a\n\n```delphi\n\nvar n,i,j,k,top,min,minx,miny,sum:longint;\n    w:array[0..300]of longint;\n    p:array[0..300,0..300]of longint;\n    b:array[1..300]of boolean;\n    order:array[1..300]of integer;\n\nbegin\n    readln(n);\n    sum:=0;\n    fillchar(b,300,false);\n    for i:=1 to n do begin\n        p[i,0]:=maxlongint;\n    end;\n    for i:=1 to n do readln(w[i]);\n    for i:=1 to n do begin\n        for j:=1 to n do\n            read(p[i,j]);\n        readln;\n    end;\n    w[0]:=maxlongint;\n    top:=1;\n    p[0,0]:=maxlongint;;\n    for i:=1 to n do begin\n        min:=0;\n        for j:=1 to n do\n            if (w[j]<w[min])and(b[j]=false) then\n                min:=j;\n        minx:=0;\n        miny:=0;\n        for j:=1 to top do\n            for k:=1 to n do\n                if (b[k]=false)and(order[j]<>k) then\n                    if p[minx,miny]>p[k,order[j]] then begin\n                        minx:=k;\n                        miny:=order[j];\n                    end;\n        if p[minx,miny]<w[min] then\n            sum:=sum+p[minx,miny]\n        else begin\n            sum:=sum+w[min];\n            minx:=min;\n        end;\n        order[top]:=minx;\n        inc(top);\n        b[minx]:=true;\n    end;\n    writeln(sum);\nend.\n\n```(pascal)\n\u4ee3\u7801\u7a0d\u5fae\u6709\u70b9\u51cc\u4e71..\u51d1\u5408\u7740\u770b..\n\n\u5c31\u662f\u8fd9\u6837=-=\n\n",
        "postTime": 1447395956,
        "uid": 11141,
        "name": "ARSKB",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u6211\u4eec\u5047\u5b9a\u6709\u4e00\u4e2a\u7ed3\u70b9,~~\u662f\u4e07\u6076~~\u6c34\u529b\u4e4b\u6e90\u3002\u6240\u6709\u6253\u4e95\u53ef\u4ee5\u7b49\u6548\u4e3a\u4e0e\u6c34\u529b\u4e4b\u6e90\u7b7e\u8ba2\u534f\u8bae\u8fde\u63a5\u3002  \n\u4e8e\u662f\u6240\u6709\u64cd\u4f5c\u53d8\u6210\u4e86\u8fde\u8fb9\u64cd\u4f5c,\u90a3\u4e48\u76f4\u63a5\u5f53\u6700\u5c0f\u751f\u6210\u6811\u5957prim\u677f\u5b50\u5373\u53ef\u3002  \n```cpp\n#include <cstdio>\n\nusing namespace std;\n\nconst int N = 345, INF = 0x3f3f3f3f;\nint d[N][N], dis[N], vis[N], ans = 0;\ninline int min(int x, int y) { return x < y ? x : y; }\n\nint main() {\n\tint n;\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; ++i) scanf(\"%d\", dis + i);\n\tfor(int i = 1; i <= n; ++i)\n\t\tfor(int j = 1; j <= n; ++j)\n\t\t\tscanf(\"%d\", &d[i][j]);\n\tint cur = 0; dis[cur] = INF;\n\tfor(int i = 1; i <= n; ++i) if(dis[i] < dis[cur]) cur = i;\n\tans += dis[cur]; vis[cur] = 1;\n\tfor(int i = 1; i <= n; ++i) if(!vis[i]) dis[i] = min(dis[i], d[cur][i]);\n\tfor(int i = 1; i < n; ++i) {\n\t\tcur = 0;\n\t\tfor(int i = 1; i <= n; ++i) if(!vis[i] && dis[i] < dis[cur]) cur = i;\n\t\tvis[cur] = 1; ans += dis[cur];\n\t\tfor(int i = 1; i <= n; ++i) if(!vis[i]) dis[i] = min(dis[i], d[cur][i]); \n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1572787925,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "(prim)\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u5c31\u662f\u4e00\u9053\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6211\u4eec\u8bbe\u4e00\u4e2a\u70b9\uff0c\u5230\u6240\u6709\u4e95\u90fd\u6709\u8fb9\u76f8\u8fde\uff0c\u8fb9\u6743\u4e3a\u6253\u4e95\u7684\u4ee3\u4ef7\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint a[305][305],minn,mine[305],ans,i,j,n,x,b;\nint prim()\n{\n    for (i=1;i<=n;i++)\n      mine[i]=a[1][i];\n    mine[1]=0;\n    for (i=1;i<n;i++)\n    {\n        minn=100000;\n        for (j=1;j<=n;j++)\n        if ((mine[j]!=0)&&(minn>mine[j]))\n        {x=j;minn=mine[j];}\n        ans=ans+minn;\n        mine[x]=0;\n        for (j=1;j<=n;j++)\n        if ((mine[j]!=0)&&(a[x][j]<mine[j]))\n          mine[j]=a[x][j];\n    }\n}\nint main()\n{\n    cin>>n;\n    for (i=1;i<=n;i++)\n      for (j=1;j<=n;j++)\n        a[i][j]=100000;\n    for(i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&b);\n        a[n+1][i]=a[i][n+1]=b;\n    }\n    for (i=1;i<=n;i++)\n      for (j=1;j<=n;j++)\n      {\n          scanf(\"%d\",&b);\n        if(i!=j) a[i][j]=b;\n      }\n    n++;\n    prim();\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1466848695,
        "uid": 18730,
        "name": "\u6d77\u7eb3\u767e\u5ddd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    },
    {
        "content": "\u4e4d\u4e00\u770b\uff0c\u8fd9\u9898\u5c31\u662f\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u3002\u7136\u800c\uff0c\u53ef\u4ee5\u6253\u4e95\u4f3c\u4e4e\u53c8\u5426\u5b9a\u4e86\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u5176\u5b9e\uff0c\u8fd8\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u589e\u52a0\u4e00\u4e2a\u70b9S\uff0c\u4e0e\u6bcf\u4e2a\u70b9\u90fd\u6709\u8fb9\u76f8\u8fde\uff0c\u8fb9\u6743\u4e3a\u6253\u4e95\u7684\u4ee3\u4ef7\u3002\n\n\u518d\u6c42\u8fd9\u4e2a\u65b0\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u5c31\u53ef\u4ee5\u4e86\u3002\n",
        "postTime": 1380640839,
        "uid": 203,
        "name": "JOHNKRAM",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1550 \u3010[USACO08OCT]\u6253\u4e95Watering Hole\u3011"
    }
]