[
    {
        "content": "\u770b\u5b8c\u4e86\u539f\u9898\u540e\uff0c\u6709\u7528\u7684\u4fe1\u606f\u6709\u5982\u4e0b\u8fd9\u4e9b\uff1a\n\n1. \u77e9\u5f62\u4e4b\u95f4\u53ea\u4f1a\u6709\u5305\u542b\u6216\u76f8\u79bb\u7684\u5173\u7cfb\uff08\u8fd9\u70b9\u975e\u5e38\u91cd\u8981\uff0c\u662f\u89e3\u9898\u7684\u5173\u952e\u6b65\u9aa4\uff09\n\n1. \u7531 1 \u53ef\u5f97\u77e9\u5f62\u95f4\u4f1a\u6784\u6210\u68ee\u6797\n\n1. \u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u82e5\u5b83\u5728\u67d0\u4e2a\u77e9\u5f62\u5185\uff0c\u5219\u5728\u5b83\u7684\u7236\u4eb2\u5185\n\n\u4e8e\u662f\u539f\u9898\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\n\n### part 1.  \u5904\u7406\u77e9\u5f62\u7684\u7236\u5b50\u5173\u7cfb\u4ee5\u53ca\u5305\u542b\u6bcf\u4e2a\u70b9\u7684\u6700\u5c0f\u77e9\u5f62\n\n### part 2.  \u7236\u4eb2\u7ee7\u627f\u513f\u5b50\u7684\u4fe1\u606f\n\n\u9996\u5148\uff0c\u7b2c 2 \u6b65\u975e\u5e38\u597d\u5904\u7406\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528 set + \u542f\u53d1\u5f0f\u5408\u5e76\u5c31\u53ef\u4ee5\u505a\u5230 $O(n \\log n)$ \u7684\u590d\u6742\u5ea6\u4e86\u3002\n\n\u7b2c 1 \u6b65\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4f46\u5176\u5b9e\u6709\u975e\u5e38\u7c7b\u4f3c\u7684\u9898\u76ee\uff1a\u725b\u5ba2\u7f51\u7684 \u201c\u5706\u4e0e\u5706\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u4e0d\u80fd\u4e00\u6982\u800c\u8bba\u7684\u201d \n\n\u5728\u8fd9\u91cc\u6709 2 \u79cd\u505a\u6cd5\uff0c\u6211\u7528\u7684\u662f\u6bd4\u8f83\u50bb\u7684 set \uff0c\u6211\u4eec\u5148\u5bf9 $x$ \u8f74\u626b\u63cf\u7ebf\uff0c\u90a3\u4e48\u6bcf\u4e2a\u77e9\u5f62\u4f1a\u53d8\u6210\u4e0a\u7ebf\u6bb5\u548c\u4e0b\u7ebf\u6bb5\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u77e9\u5f62\uff0c\u82e5\u5b83\u7684\u4e0a\u7ebf\u6bb5\u7684\u4e0a\u65b9\u7684\u7b2c\u4e00\u4e2a\u7ebf\u6bb5\u662f\u4e0a\u7ebf\u6bb5\uff0c\u90a3\u4e48\u4ed6\u5c31\u88ab\u8fd9\u4e2a\u77e9\u5f62\u6240\u5305\u542b\uff0c\u5426\u5219\u5c31\u88ab\u5b83\u7684\u7236\u4eb2\u6240\u5305\u542b\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/c0951tzx.png?x-oss-process=image/resize,m_lfit,h_250,w_250)![](https://cdn.luogu.com.cn/upload/image_hosting/ge6fkv20.png?x-oss-process=image/resize,m_lfit,h_250,w_250)\n\n\u7136\u540e\u5bf9\u4e8e\u70b9\u4e5f\u662f\u540c\u7406\uff0c\u53ea\u4e0d\u8fc7\u8981\u6ce8\u610f\u4e0b\u8fb9\u754c\uff0c\u5c31\u53ef\u4ee5\u7528 set \u7ef4\u62a4\uff0c\u53e6\u4e00\u79cd\u7b97\u6cd5\u662f\u7ebf\u6bb5\u6811\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8d58\u8ff0\u4e86\u3002\n\n\u8fd8\u6709\u4e00\u4ef6\u4e8b\uff0c\u6ce8\u610f set \u7684\u6392\u5e8f\u987a\u5e8f\uff0c\u8981\u5148\u52a0\u518d\u67e5\u6700\u540e\u5220\n\n~~luogurank1\u4ee3\u7801~~\n\n```cpp\n#include<bits/stdc++.h>\n#define N 200005\nusing namespace std;\nint n,m,cnt,rt,fa[N];\nint h[N],ans[N];\nvector<set<int> >st;\nstruct node {\n\tint to,next;\n} e[N<<1];\nstruct Line {\n\tint l,opt,id;\n\tLine(int L=0,int O=0,int Id=0) {\n\t\tl=L,opt=O,id=Id;\n\t}\n\tbool operator <(Line a) const {\n\t\treturn l==a.l?opt>a.opt:l<a.l;\n\t}\n};\nset<Line>line;\nstruct Pair {\n\tint l,r,x,opt,id;\n\tbool operator <(Pair a) const {\n\t\treturn x==a.x?opt<a.opt:x<a.x;\n\t}\n} p[N],q[N];\nconst int Mxdt=100000;\ninline char gc() {\n\tstatic char buf[Mxdt],*p1=buf,*p2=buf;\n\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,Mxdt,stdin),p1==p2)?EOF:*p1++;\n}\ninline char pc(char ch,bool bj) {\n\tstatic char buf[Mxdt],*p1=buf,*p2=buf+Mxdt;\n\treturn (bj||(*p1++=ch)&&p1==p2)&&fwrite(p1=buf,1,p1-buf,stdout),0;\n}\ninline int read() {\n\tint res=0;\n\tchar ch=gc();\n\twhile(ch<'0')ch=gc();\n\twhile(ch>='0')res=(res<<3)+(res<<1)+(ch^48),ch=gc();\n\treturn res;\n}\nvoid print(int x) {\n\tif(x>9)print(x/10);\n\tpc(x%10^48,false);\n}\ninline void printnum(int x,char ch) {\n\tif(x<0)pc('-',false),x=-x;\n\tprint(x),pc(ch,false);\n}\nvoid Addedge(int x,int y) {\n\te[++cnt]=(node) {y,h[x]},h[x]=cnt;\n}\nset<Line>::iterator it;\nvoid Merge(int x,int y) {\n\tif(st[x].size()<st[y].size())swap(st[x],st[y]);\n\tfor(int a:st[y])st[x].insert(a);\n\tst[y].clear();\n}\nvoid Dfs(int x) {\n\tfor(int i=h[x]; i; i=e[i].next)Dfs(e[i].to),Merge(x,e[i].to);\n\tans[x]=st[x].size();\n}\nint main() {\n\tn=read(),m=read();st.resize(n+1);\n\tfor(int i=1,a,b,c,d; i<=n; ++i) {\n\t\ta=read(),b=read(),c=read(),d=read();\n\t\tp[++cnt].id=i,p[cnt].opt=1,p[cnt].l=b,p[cnt].r=d,p[cnt].x=a;\n\t\tp[++cnt].id=i,p[cnt].opt=2,p[cnt].l=b,p[cnt].r=d,p[cnt].x=c;\n\t}\n\tfor(int i=1; i<=m; ++i)q[i].x=read(),q[i].l=read(),q[i].r=read();\n\tsort(p+1,p+cnt+1),sort(q+1,q+m+1);\n\tfor(int i=1,j=1; i<=m; ++i) {\n\t\twhile(j<=cnt&&(q[i].x>p[j].x||(q[i].x==p[j].x&&p[j].opt==1))) {\n\t\t\tif(p[j].opt==1) {\n\t\t\t\tif((it=line.lower_bound(Line(p[j].l)))!=line.end())\n\t\t\t\t\tfa[p[j].id]=((*it).opt==2)?(*it).id:fa[(*it).id];\n\t\t\t\tline.insert(Line(p[j].l-1,1,p[j].id)),line.insert(Line(p[j].r,2,p[j].id));\n\t\t\t} else line.erase(Line(p[j].l-1,1,p[j].id)),line.erase(Line(p[j].r,2,p[j].id));\n\t\t\t++j;\n\t\t}\n\t\tif((it=line.lower_bound(Line(q[i].l,3)))!=line.end()) {\n\t\t\tif((*it).opt==2)st[(*it).id].insert(q[i].r);\n\t\t\telse st[fa[(*it).id]].insert(q[i].r);\n\t\t}\n\t}\n\tcnt=0;\n\tfor(int i=1; i<=n; ++i)if(fa[i])Addedge(fa[i],i);\n\tfor(int i=1; i<=n; ++i)if(!fa[i])Dfs(i);\n\tfor(int i=1; i<=n; ++i)printnum(ans[i],'\\n');\n\treturn pc('0',1);\n}\n```\n\n",
        "postTime": 1605274243,
        "uid": 112569,
        "name": "Time_tears",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4416 \u3010[COCI2017-2018#1] Plahte\u3011"
    },
    {
        "content": "\u9898\u9762\u5f88\u957f\uff0c\u53ef\u5f80\u5f80\u771f\u6b63\u6709\u7528\u7684\u9898\u610f\u5374\u6ca1\u6709\u8fd9\u4e48\u957f\uff0c\u4f8b\u5982\u8bf4\u8fd9\u4e48\u4e00\u53e5\uff1a\r\n- \r\n       \u5e8a\u5355\u653e\u5728\u4e0a\u9762\uff0c\u4f7f\u5b83\u4eec\u4e4b\u95f4\u89d2\u6216\u8fb9\u4e0d\u4f1a\u4e92\u76f8\u63a5\u89e6\uff0c\r\n       \u8fb9\u4e5f\u4e0d\u4f1a\u76f8\u4ea4\uff0c\u4f46\u4ed6\u53ef\u80fd\u628a\u8f83\u5c0f\u7684\u5e8a\u5355\u653e\u5728\u5927\u7684\u4e0a\u9762\uff0c\u6216\u8005\u4e00\u4e2a\u5b8c\u5168\u8986\u76d6\u53e6\u4e2a\u3002\r\n\r\n\u4ece\u8fd9\u53e5\u8bdd\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u77e9\u5f62\u662f\u4e0d\u4f1a\u76f8\u4ea4\u7684\uff0c\u4e14\u53ea\u6709\u5305\u542b\u5173\u7cfb\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u4ec5\u9700\u8bb0\u5f55\u4e00\u4e2a\u77e9\u5f62\u7684\u7236\u4eb2\u4e3a\u5305\u542b\u5b83\u7684\u6240\u6709\u77e9\u5f62\u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a\uff0c\u539f\u56fe\u53ef\u7531\u6b64\u5316\u4e3a\u4e00\u68f5\u68ee\u6797\u3002\r\n\r\n\u90a3\u4e48\uff0c\u6211\u4eec\u600e\u4e48\u6784\u9020\u4e00\u4e2a\u68ee\u6797\u5462\uff1f\u6211\u4eec\u8fd9\u91cc\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\r\n- \u7528\u626b\u63cf\u7ebf\uff0c\u7ebf\u6bb5\u6811\u5904\u7406y\u8f74\uff0c\u6bcf\u6b21\u627e\u5230\u4e00\u4e2a\u77e9\u5f62\u4e4b\u540e\u5224\u65ad\u8fd9\u4e2a\u77e9\u5f62\u7684\u4e0b\u8fb9\u754c\u662f\u5426\u5408\u6cd5\uff0c\u5982\u4e0d\u5408\u6cd5\u5c31\u500d\u589e\u5f80\u5176\u7236\u4eb2\u8d70\uff0c\u76f4\u5230\u5408\u6cd5\u3002\r\n- \u5bf9\u4e8ey\u8f74\uff0c\u6211\u4eec\u5efa\u4e00\u68f5\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u7ebf\u6bb5\u6811\u3002\u626b\u5230\u5de6\u8fb9\u754c\u65f6\uff0c\u76f4\u63a5\u628a\u6807\u8bb0\u6253\u5230\u76f8\u5e94\u533a\u95f4\uff0c\u76f4\u63a5\u8986\u76d6\u3002\r\n\r\n\u6784\u9020\u51fa\u68ee\u6797\u8fc7\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u6b64\u68ee\u6797\u4e0a\u8fdb\u884c\u7ebf\u6bb5\u6811\u5408\u5e76\u6216\u8005\u662fset\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\u3002\r\n```cpp\r\n#include<iostream>\r\n#include<cstdio>\r\n#include<cstring>\r\n#include<cmath>\r\n#include<algorithm>\r\n#include<set>\r\n#include<queue>\r\n#include<ctime>\r\n#define MAXN 200005\r\n#define ll long long\r\n#define maxn 15\r\n#define maxs 1000005\r\n#define inf 1e9\r\n#define eps 1e-9\r\nusing namespace std;\r\ninline char gc() {\r\n\tstatic char now[1<<16],*S,*T;\r\n\tif (T==S) {\r\n\t\tT=(S=now)+fread(now,1,1<<16,stdin);\r\n\t\tif (T==S) return EOF;\r\n\t}\r\n\treturn *S++;\r\n}\r\ninline ll readlong() {\r\n\tll x=0,f=1;\r\n\tchar ch=getchar();\r\n\twhile(ch<'0'||ch>'9') {\r\n\t\tif(ch=='-')f=-1;\r\n\t\tch=getchar();\r\n\t}\r\n\twhile(ch>='0'&&ch<='9') {\r\n\t\tx*=10;\r\n\t\tx+=ch-'0';\r\n\t\tch=getchar();\r\n\t}\r\n\treturn x*f;\r\n}\r\ninline int read() {\r\n\tint x=0,f=1;\r\n\tchar ch=getchar();\r\n\twhile(ch<'0'||ch>'9') {\r\n\t\tif(ch=='-')f=-1;\r\n\t\tch=getchar();\r\n\t}\r\n\twhile(ch>='0'&&ch<='9') {\r\n\t\tx*=10;\r\n\t\tx+=ch-'0';\r\n\t\tch=getchar();\r\n\t}\r\n\treturn x*f;\r\n}\r\nvoid putint(long long t) {\r\n\tint ans[40]= {0};\r\n\tfor(; t; t/=10)ans[++ans[0]]=t%10;\r\n\tfor(; ans[0]; ans[0]--)putchar('0'+ans[ans[0]]);\r\n\tputchar('\\n');\r\n}\r\nconst int N=500005;\r\nint n,m;\r\nstruct edge{\r\n\tint to,nxt;\r\n}e[N];\r\nint h[N],cnt;\r\nvoid add(int x,int y){\r\n//\tcout<<x<<' '<<y;\r\n\te[++cnt]=(edge){y,h[x]};\r\n\th[x]=cnt;\r\n}\r\nint pre[N],_k[N],_y[N],rt[N];\r\nint ans[N];\r\nint dx,dy,dv;\r\nint g[N<<5];\r\nint col[N<<5],f[N<<5][2];\r\nint cntt,cnty,cnts;\r\nint tot;\r\nstruct bed{\r\n\tint x,y,k,i;\r\n\tbool operator <(const bed &a)const{\r\n\t\tif(x==a.x){\r\n\t\t\treturn i>a.i;\r\n\t\t}\r\n\t\treturn x<a.x;\r\n\t}\r\n}mp[N<<2];\r\nint query(int x,int l,int r){\r\n\tif(g[x]>=0||l==r){\r\n\t\treturn g[x];\r\n\t}\r\n\tif(!x){\r\n\t\treturn 0;\r\n\t}\r\n\tint mid=(l+r)>>1;\r\n\tif(dx<=mid){\r\n\t\treturn query(x<<1,l,mid);\r\n\t}\r\n\telse{\r\n\t\treturn query(x<<1|1,mid+1,r);\r\n\t}\r\n}\r\nvoid push(int x){\r\n\tif(g[x]<0){\r\n\t\treturn ;\r\n\t}\r\n\tg[x<<1]=g[x<<1|1]=g[x];\r\n\tg[x]=-1;\r\n}\r\nvoid modify(int x,int l,int r){\r\n//\tcout<<\"Asdf\"<<endl;\r\n\tif(dx<=l&&dy>=r){\r\n\t\tg[x]=dv;\r\n\t\treturn ;\r\n\t}\r\n\tpush(x);\r\n\tint mid=(l+r)>>1;\r\n\tif(dx<=mid){\r\n\t\tmodify(x<<1,l,mid);\r\n\t}\r\n\tif(dy>mid){\r\n\t\tmodify(x<<1|1,mid+1,r);\r\n\t}\r\n}\r\nvoid add_cor(int &x,int l,int r){\r\n\tif(!x){\r\n\t\tx=++tot;\r\n\t}\r\n\tif(l==r){\r\n\t\tcol[x]=1;\r\n\t\treturn;\r\n\t}\r\n\tint mid=(l+r)>>1;\r\n\tif(dx<=mid){\r\n\t\tadd_cor(f[x][0],l,mid);\r\n\t}\r\n\telse{\r\n\t\tadd_cor(f[x][1],mid+1,r);\r\n\t}\r\n\tcol[x]=col[f[x][0]]+col[f[x][1]];\r\n}\r\nint merge(int a,int b,int l,int r){\r\n\tif(!a|!b){\r\n\t\treturn a^b;\r\n\t}\r\n\tif(l==r){\r\n\t\treturn a;\r\n\t}\r\n\tint mid=(l+r)>>1;\r\n\tf[a][0]=merge(f[a][0],f[b][0],l,mid);\r\n\tf[a][1]=merge(f[a][1],f[b][1],mid+1,r);\r\n\tcol[a]=col[f[a][0]]+col[f[a][1]];\r\n\treturn a;\r\n}\r\nvoid dfs(int x){\r\n\tfor(int i=h[x];i;i=e[i].nxt){\r\n\t\tint y=e[i].to;\r\n\t\tif(y!=pre[x]){\r\n\t\t\tdfs(y);\r\n\t\t\trt[x]=merge(rt[x],rt[y],1,cnts);\r\n\t\t}\r\n\t}\r\n\tans[x]=col[rt[x]];\r\n}\r\nint main(){\r\n\tmemset(g,-1,sizeof(g));\r\n\tn=read();\r\n\tm=read();\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tint a=read();\r\n\t\tint b=read();\r\n\t\tint c=read();\r\n\t\tint d=read();\r\n\t\tmp[++cntt]=(bed){a,b,d,i};\r\n\t\t_y[++cnty]=b;\r\n\t\tmp[++cntt]=(bed){c,b,d,-i};\r\n\t\t_y[++cnty]=d;\r\n\t}\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tint x=read();\r\n\t\tint y=read();\r\n\t\tint k=read();\r\n\t\tmp[++cntt]=(bed){x,y,k,0};\r\n\t\t_y[++cnty]=y;\r\n\t\t_k[++cnts]=k;\r\n\t}\r\n\tsort(_y+1,_y+1+cnty);\r\n\tcnty=unique(_y+1,_y+1+cnty)-_y-1;\r\n\tsort(_k+1,_k+1+cnts);\r\n\tcnts=unique(_k+1,_k+1+cnts)-_k-1;\r\n\tsort(mp+1,mp+cntt+1);\r\n\tfor(int i=1;i<=cntt;i++){\r\n\t\tmp[i].y=lower_bound(_y+1,_y+1+cnty,mp[i].y)-_y;\r\n\t\tif(mp[i].i){\r\n\t\t\tmp[i].k=lower_bound(_y+1,_y+1+cnty,mp[i].k)-_y;\r\n\t\t\tif(mp[i].i>0){\r\n\t\t\t\tdx=mp[i].y;\r\n\t\t\t\tdy=mp[i].k;\r\n\t\t\t\tdv=mp[i].i;\r\n\t\t\t\tif((pre[dv]=query(1,1,cnty))>0){\r\n\t\t\t\t\tadd(pre[dv],dv);\r\n\t\t\t\t}\r\n\t\t\t\tmodify(1,1,cnty);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tdx=mp[i].y;\r\n\t\t\tdy=mp[i].k;\r\n\t\t\tdv=max(pre[-mp[i].i],0);\r\n\t\t\tmodify(1,1,cnty);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tmp[i].k=lower_bound(_k+1,_k+cnts+1,mp[i].k)-_k;\r\n\t\tdx=mp[i].y;\r\n\t\tint tmp=query(1,1,cnty);\r\n\t\tif(tmp>0){\r\n\t\t\tdx=mp[i].k;\r\n\t\t\tadd_cor(rt[tmp],1,cnts);\r\n\t\t}\r\n\t}\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tif(pre[i]<=0){\r\n\t\t\tdfs(i);\r\n\t\t}\r\n\t}\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tprintf(\"%d\\n\",ans[i]);\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n```",
        "postTime": 1536739508,
        "uid": 53028,
        "name": "\u521d\u6625\u9970\u5229",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4416 \u3010[COCI2017-2018#1] Plahte\u3011"
    },
    {
        "content": "[link](https://www.luogu.com.cn/problem/P4416)\n\n\u9996\u5148\u5982\u679c\u628a\u77e9\u5f62\u62bd\u8c61\u6210\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e9b\u70b9\u4e00\u5b9a\u4f1a\u5f62\u6210\u4e00\u7247\u68ee\u6797\u3002\u7406\u7531\uff1a\u77e9\u5f62\u4e4b\u95f4\u53ea\u91cd\u53e0\u4e0d\u76f8\u4ea4\uff0c\u6545\u800c\u5bf9\u4e8e\u4e00\u4e2a\u77e9\u5f62\u6765\u8bf4\u4e00\u5b9a\u6709\u81f3\u591a\u4e00\u4e2a\u5b8c\u5168\u8986\u76d6\u5b83\u5e76\u4e14\u6700\u5c0f\u7684\u5927\u77e9\u5f62\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\u4e0d\u8d85\u8fc7\u4e00\u3002\u53c8\u7531\u4e8e\u6bcf\u4e2a\u70b9\u8fde\u63a5\u7684\u70b9\u80af\u5b9a\u4e25\u683c\u6bd4\u81ea\u5df1\u5927\uff0c\u6240\u4ee5\u4e5f\u4e0d\u4f1a\u6784\u6210\u73af\u3002\u7efc\u4e0a\uff0c\u6700\u540e\u8fd9\u4e9b\u70b9\u4f1a\u5f62\u6210\u4e00\u7247\u68ee\u6797\u3002\u800c\u7531\u4e8e\u8fde\u8fb9\u7684\u65b9\u5f0f\u7279\u5f81\uff08\u4e5f\u53ef\u4ee5\u53c2\u7167\u9898\u76ee\u90a3\u53e5\u201c\u90a3\u5f20\u5e8a\u5355\u4f1a\u628a\u7403\u7684\u989c\u8272\u6e17\u5230\u4e0b\u9762\u7684\u6240\u6709\u5e8a\u5355\u4e0a\u201d\uff0c\u53ef\u4ee5\u628a\u201c\u4e0b\u9762\u6240\u6709\u5e8a\u5355\u201d\u60f3\u8c61\u6210\u70b9\u5230\u6839\u7684\u8def\u5f84\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u53d1\u5b50\u5f39\u627e\u5230\u6700\u5c0f\u7684\u8986\u76d6\u5230\u5b83\u7684\u77e9\u5f62\uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u904d\u5386\u6574\u7247\u68ee\u6797\u7528 set \u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\uff08\u53ef\u4ee5\u6784\u9020\u51fa\u6240\u6709\u5b50\u5f39\u6253\u5728\u53f6\u5b50\u4e0a\u7684\u6570\u636e\uff0c\u8fd9\u6837\u5982\u679c\u5355\u7eaf\u53f6\u5b50\u5f80\u6839\u5408\u5e76\u4f1a\u6b7b\u6389\uff09\u3002\n\n\u4e8e\u662f\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5982\u4f55\u5efa\u6811\u548c\u5982\u4f55\u627e\u6bcf\u53d1\u5b50\u5f39\u5bf9\u5e94\u7ed3\u70b9\u7684\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u6211\u4eec\u53ef\u4ee5\u7528\u626b\u63cf\u7ebf\u7684\u601d\u60f3\uff0c\u6bcf\u4e2a\u77e9\u5f62\u62c6\u5206\u6210\u4e0a\u4e0b\u4e24\u6761\u7ebf\uff08\u79f0\u4e3a\u4e0a\u4e0b\u7ebf\uff09\uff0c\u628a\u6a2a\u5750\u6807\u79bb\u6563\u5316\u4e4b\u540e\u518d\u6309\u7eb5\u5750\u6807\u6392\u5e8f\u3002\u627e\u6bcf\u4e2a\u77e9\u5f62\u5728\u6811\u4e0a\u7684\u7236\u4eb2\u8fd9\u4e00\u6b65\u9aa4\u653e\u5728\u4e0b\u7ebf\u8fdb\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\u8fdb\u884c\uff0c\u7531\u4e8e\u626b\u63cf\u7ebf\u7684\u539f\u7406\uff0c\u5047\u5982\u4e00\u4e2a\u77e9\u5f62\u548c\u5f53\u524d\u77e9\u5f62\u5728\u7eb5\u65b9\u5411\u4e0a\u6ca1\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u5b83\u8981\u4e48\u5df2\u7ecf\u88ab\u4e22\u51fa\u53bb\u4e86\uff0c\u8981\u4e48\u8fd8\u6ca1\u6709\u8003\u8651\u8fdb\u6765\uff0c\u6240\u4ee5\u6b64\u65f6\u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u6240\u6709\u77e9\u5f62\u90fd\u5728\u7eb5\u5750\u6807\u4e0a\u5305\u542b\u5f53\u524d\u77e9\u5f62\u3002\u4f46\u662f\u5462\u6211\u4eec\u5e0c\u671b\u627e\u5230\u7684\u662f\u6a2a\u5750\u6807\u4e5f\u5305\u542b\u7684\u3001\u800c\u4e14\u6700\u5c0f\u7684\u77e9\u5f62\uff0c\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u8981\u6c42\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u7531\u4e8e\u6309\u7eb5\u5750\u6807\u6392\u4e86\u5e8f\uff0c\u53ef\u4ee5\u60f3\u5230\u8d8a\u540e\u5165\u7ebf\u6bb5\u6811\u7684\u77e9\u5f62\u8d8a\u5c0f\uff0c\u6240\u4ee5\u76f4\u63a5\u67e5\u8be2\u6808\u9876\u5373\u53ef\uff0c\u4e00\u5b9a\u53ef\u4ee5\u4fdd\u8bc1\u662f\u7b26\u5408\u6761\u4ef6\u7684\u6700\u5c0f\u77e9\u5f62\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u6761\u4ef6\uff0c\u5148\u8bf4\u7ed3\u8bba\uff0c\u76f4\u63a5\u67e5\u8be2\u6240\u6709\u5728\u7ebf\u6bb5\u6811\u4e2d\u8bbf\u95ee\u5230\u7684\u7ed3\u70b9\u4e2d\u6808\u9876\u5143\u7d20\u7684\u6700\u5c0f\u503c\u5373\u53ef\uff0c\u7136\u540e\u63d2\u5165\u4e00\u6761\u7ebf\u6bb5\u7684\u65f6\u5019\u76f4\u63a5\u628a\u5b83\u62c6\u5230\u4e00\u4e9b\u533a\u95f4\uff08\u5c31\u662f\u6309\u7740\u7ebf\u6bb5\u6811\u7684\u65b9\u5f0f\u62c6\uff09\uff0c\u7ed9\u5bf9\u5e94\u7684\u7ed3\u70b9\u7684\u6808\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u5373\u53ef\u3002\n\n\u4e3a\u4ec0\u4e48\u4e0a\u9762\u7684\u90a3\u79cd\u65b9\u6cd5\u662f\u5bf9\u7684\u5462\uff1f\u5148\u8003\u8651\u6b63\u786e\u6027\uff0c\u6211\u4eec\u8bbf\u95ee\u5230\u7684\u6240\u6709\u7ebf\u6bb5\u6811\u4e0a\u7684\u7ed3\u70b9\u90fd\u662f\u5f53\u524d\u7ebf\u6bb5\u62c6\u5f00\u7684\u7ed3\u70b9\u7684\u7956\u5148\uff0c\u6240\u4ee5\u5047\u5982\u4e4b\u524d\u7684\u67d0\u6761\u7ebf\u6bb5\u8986\u76d6\u4e86\u8bbf\u95ee\u5230\u7684\u70b9\uff0c\u90a3\u4e48\u8be5\u7ebf\u6bb5\u4e00\u5b9a\u53ef\u4ee5\u8986\u76d6\u8fd9\u4e2a\u7ed3\u70b9\u7684\u5b50\u5b59\uff0c\u8fd9\u5c31\u4fdd\u8bc1\u4e86\u6211\u4eec\u627e\u5230\u7684\u70b9\u662f\u6b63\u786e\u7684\u3002\u518d\u8003\u8651\u5b8c\u5907\u6027\uff0c\u4e5f\u5c31\u662f\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u672a\u66fe\u8986\u76d6\u5230\u8bbf\u95ee\u7ed3\u70b9\u7684\u7ebf\u6bb5\u4f1a\u6210\u4e3a\u7b54\u6848\uff0c\u800c\u8fd9\u663e\u7136\u662f\u4e0d\u4f1a\u7684\uff0c\u6bd5\u7adf\u80fd\u8986\u76d6\u67d0\u6761\u7ebf\u6bb5\u7684\u7ebf\u6bb5\u62c6\u5f00\u6765\u7684\u6240\u6709\u8282\u70b9\u80af\u5b9a\u4e0d\u4f1a\u6bd4\u77ed\u7ebf\u6bb5\u62c6\u5f00\u7684\u7ed3\u70b9\u8981\u6df1\uff0c\u6240\u4ee5\u6211\u4eec\u627e\u5230\u7684\u70b9\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\u7efc\u4e0a\uff0c\u8fd9\u6837\u627e\u7236\u4eb2\u7684\u65b9\u6cd5\u662f\u6b63\u786e\u7684\u3002\n\n\u7136\u540e\u5c31\u6ca1\u6709\u4ec0\u4e48\u4e86\u3002\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u76f4\u63a5\u627e\u5b83\u5728\u7ebf\u6bb5\u6811\u4e2d\u8bbf\u95ee\u5230\u7684\u7ed3\u70b9\u4e2d\u6700\u5927\u7684\u7f16\u53f7\uff0c\u8fd9\u4e2a\u7f16\u53f7\u5bf9\u5e94\u7684\u77e9\u5f62\u663e\u7136\u662f\u6700\u5c0f\u4e14\u5305\u542b\u5b83\u7684\u77e9\u5f62\uff0c\u4e22\u5230\u4e00\u4e2a set \u91cc\u5c31\u53ef\u4ee5\u4e86\uff08\u4e3b\u8981\u662f\u56e0\u4e3a\u6709\u989c\u8272\u76f8\u540c\u7684\u5b50\u5f39\uff09\uff0c\u6240\u4ee5\u5efa\u6811\u548c\u5bfb\u627e\u6bcf\u4e2a\u5b50\u5f39\u5bf9\u5e94\u7684\u7ed3\u70b9\u90fd\u662f $O(N\\log N)$ \u7684\u3002\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u5c31\u662f\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u590d\u6742\u5ea6 $O(N\\log^2N)$\u3002\u5b9e\u9645\u4e0a\u624b\u65f6\u7a7a\u90fd\u4e0d\u592a\u7d27\u5f20\u3002\u6709\u4e00\u4e9b\u9700\u8981\u6ce8\u610f\u7684\uff1a\n\n- \u6ce8\u610f\u6392\u5e8f\u51fd\u6570\u4e2d\u7eb5\u5750\u6807\u76f8\u540c\u7684\u65f6\u5019\u4e0a\u7ebf\u6bb5\u548c\u4e0b\u7ebf\u6bb5\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u8fd9\u5173\u7cfb\u5230\u662f\u5426\u505a\u5230\u4e0d\u91cd\u4e0d\u6f0f\u7684\u5173\u952e\u3002\n- \u7531\u4e8e\u4e0d\u77e5\u540d\u539f\u56e0\u6211\u5199 stack \u4f1a\u5d29\uff0c\u6240\u4ee5\u5199\u7684\u662f\u6307\u9488\u7248\u7684\u6808\uff0c\u53ef\u80fd\u8ba9\u4ee3\u7801\u7e41\u7410\u4e86\u70b9\u3002\n- \u542f\u53d1\u5f0f\u5408\u5e76\u8981\u7a0d\u5fae\u6ce8\u610f\u4e00\u4e0b\u5199\u6cd5\u3002\n- \u53e6\u5916\u5c31\u662f\u7531\u4e8e\u4e00\u5bf9\u4e0a\u7ebf\u6bb5\u548c\u4e0b\u7ebf\u6bb5\u5bf9\u5e94\u7684\u533a\u95f4\u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u62c6\u5f00\u6765\u7684\u7ed3\u70b9\u4e5f\u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u5904\u7406\u4e0a\u7ebf\u6bb5\u65f6\u4e0d\u9700\u8981\u5224\u65ad\u76f4\u63a5\u5f39\u51fa\u6808\u9876\u5143\u7d20\u5373\u53ef\u3002\n- \u4ee3\u7801\u6709\u6ce8\u91ca\u3002\u7801\u98ce\u6c22\u6c14\u89c1\u8c05\u2026\u2026\n\n```cpp\n#include<bits/stdc++.h>\n//#define feyn\nconst int N=160010;\nconst int M=N*3;\nusing namespace std;\ninline void read(int &wh){\n    wh=0;int f=1;char w=getchar();\n    while(w<'0'||w>'9'){if(w=='-')f=-1;w=getchar();}\n    while(w<='9'&&w>='0'){wh=wh*10+w-'0';w=getchar();}\n    wh*=f;return;\n}\ninline int max(int s1,int s2){\n\treturn s1<s2?s2:s1;\n}\n\nstruct st{int data;st* next;};\ninline void insert(st* &top,int data){\n\tst* now=new st();\n\tnow->data=data,now->next=top;top=now;\n}\ninline void del(st* &top){top=top->next;}\n\n//\u7ebf\u6bb5\u6811\u90e8\u5206 \n#define lc (wh<<1)\n#define rc (wh<<1|1)\n#define mid (t[wh].l+t[wh].r>>1)\nstruct node{\n\tint l,r;\n\tst* top;//\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6808 \n}t[M<<2];\ninline void build(int wh,int l,int r){\n\tt[wh].l=l,t[wh].r=r;t[wh].top=NULL;\n\tif(l==r)return;\n\tbuild(lc,l,mid);\n\tbuild(rc,mid+1,r);\n}\ninline int change(int wh,int wl,int wr,int data){\n\tint an=0;\n\tif(t[wh].top!=NULL)an=t[wh].top->data;//\u4e00\u8def\u5bfb\u627e\u6240\u6709\u8bbf\u95ee\u5230\u7684\u70b9\u7684\u6808\u9876\u7684\u6700\u5927\u503c \n\tif(wl<=t[wh].l&&t[wh].r<=wr){//\u627e\u5230\u4e86\u62c6\u51fa\u6765\u7684\u7ed3\u70b9 \n\t\tif(data)insert(t[wh].top,data);//\u5982\u679c\u662f\u4e0b\u7ebf\u6bb5\u8981\u52a0\u5165 \n\t\telse del(t[wh].top);//\u5426\u548b\u5f39\u51fa\u6765 \n\t\treturn an;\n\t}\n\tif(wl<=mid)an=max(an,change(lc,wl,wr,data));\n\tif(wr>mid)an=max(an,change(rc,wl,wr,data));\n\treturn an;\n}\ninline int ask(int wh,int pl){\n\tint an=0;if(t[wh].top!=NULL)an=t[wh].top->data;\n\tif(t[wh].l==t[wh].r)return an;\n\treturn max(an,ask(pl<=mid?lc:rc,pl));//\u5982\u9898\uff0c\u627e\u4e00\u4e2a\u70b9\u7684\u7b54\u6848 \n}\n#undef lc\n#undef rc\n#undef mid\n\nint m,n,b[M];\nstruct sq{int l,r,h,data,id;}a[N<<1];//\u7ebf\u6bb5\uff0cl\u548cr\u662f\u7ebf\u6bb5\u7684\u7aef\u70b9\uff0ch\u662f\u9ad8\u5ea6\uff0cdata\u662f\u4e0a\u4e0b \ninline bool cmp_sq(sq s1,sq s2){return s1.h==s2.h?s1.data<s2.data:s1.h<s2.h;}\nstruct po{int x,y,co;}p[N];//\u5b50\u5f39\u5bf9\u5e94\u7684\u70b9\uff0cco\u662f\u989c\u8272 \ninline bool cmp_po(po s1,po s2){return s1.y<s2.y;}\n\nvector<int>son[N<<1];set<int>data[N<<1];int ff[N<<1];\ninline void add_sq(int wh){\n\tif(a[wh].data==1){\n\t\tint fa=change(1,a[wh].l,a[wh].r,wh);\n\t\tif(fa)son[fa].push_back(wh);ff[wh]=fa;//\u8bb0\u5f55\u7236\u4eb2\u513f\u5b50\u5173\u7cfb\uff0c\u5e94\u8be5\u6709\u66f4\u7b80\u6d01\u7684\u5199\u6cd5 \n\t}\n\telse change(1,a[wh].l,a[wh].r,0);\n}//\u52a0\u5165\u4e00\u6761\u7ebf\u6bb5 \n\nint ans[N],set_[N<<1];\ninline void solve(int wh){\n\tset_[wh]=wh;\n\tfor(vector<int>::iterator it=son[wh].begin();it!=son[wh].end();it++){\n\t\tint th=*it;solve(th);\n\t\tif(data[set_[th]].size()>data[set_[wh]].size())swap(set_[wh],set_[th]);\n\t\t//\u4fdd\u8bc1\u5c0f\u96c6\u5408\u5411\u5927\u96c6\u5408\u5408\u5e76 \n\t\tfor(set<int>::iterator ii=data[set_[th]].begin();ii!=data[set_[th]].end();ii++){\n\t\t\tdata[set_[wh]].insert(*ii);\n\t\t}\n\t}\n\tans[a[wh].id]=data[set_[wh]].size();\n\treturn;\n}\n\nsigned main(){\n\t\n\t#ifdef feyn\n\tfreopen(\"in.txt\",\"r\",stdin);\n\t#endif\n\t\n\tread(m);read(n);\n\tint x1,x2,y1,y2,co;\n\tint cnt_a=0,cnt_b=0;\n\tfor(int i=1;i<=m;i++){\n\t\tread(x1);read(y1);read(x2);read(y2);\n\t\ta[++cnt_a]=(sq){x1,x2,y1,1,i};\n\t\ta[++cnt_a]=(sq){x1,x2,y2+1,-1,i};\n\t\tb[++cnt_b]=x1;b[++cnt_b]=x2;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tread(x1);read(y1);read(co);\n\t\tb[++cnt_b]=x1;p[i]=(po){x1,y1,co};\n\t}\n\tsort(b+1,b+cnt_b+1);\n\tint num=unique(b+1,b+cnt_b+1)-b-1;\n\tbuild(1,1,num);//\u5bf9\u6a2a\u5750\u6807\u79bb\u6563\u5316 \n\tfor(int i=1;i<=cnt_a;i+=2){\n\t\ta[i].l=a[i+1].l=lower_bound(b+1,b+num+1,a[i].l)-b;\n\t\ta[i].r=a[i+1].r=lower_bound(b+1,b+num+1,a[i].r)-b;\n\t}\n\tfor(int i=1;i<=n;i++)p[i].x=lower_bound(b+1,b+num+1,p[i].x)-b;\n\t//\u79bb\u6563\u5316 \n\tsort(a+1,a+cnt_a+1,cmp_sq);\n\tsort(p+1,p+n+1,cmp_po);\n\t//\u6309\u7eb5\u5750\u6807\u6392\u5e8f \n\tfor(int i=1,j=1;i<=n;i++){\n\t\twhile(j<=cnt_a&&a[j].h<=p[i].y)add_sq(j++);\n\t\tint wh=ask(1,p[i].x);\n\t\tdata[wh].insert(p[i].co);\n\t}\n\tfor(int i=1;i<=cnt_a;i++){\n\t\tif(a[i].data<0||ff[i])continue;\n\t\tsolve(i);//\u5982\u679c\u4e00\u4e2a\u70b9\u662f\u6811\u6839\u90a3\u4e48\u904d\u5386\u8fd9\u68f5\u6811\u5e76\u7edf\u8ba1\u7b54\u6848 \n\t}\n\tfor(int i=1;i<=m;i++)printf(\"%d\\n\",ans[i]);\n\t\n\treturn 0;\n}\n```",
        "postTime": 1660209555,
        "uid": 302383,
        "name": "Feyn",
        "ccfLevel": 0,
        "title": "P4416"
    },
    {
        "content": "\u8bfb\u9898\uff0c\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6761\u4ef6\uff1a\u77e9\u5f62\u4e0d\u76f8\u4ea4\u3002\u4e00\u4e2a\u663e\u7136\u7684\u601d\u8def\uff1a\u628a\u77e9\u5f62\u7684\u5305\u542b\u5173\u7cfb\u8868\u793a\u51fa\u6765\u3002\u77e9\u5f62\u7684\u5305\u542b\u5173\u7cfb\u6784\u6210\u4e86\u6811\uff0c\u539f\u56fe\u8f6c\u5316\u4e3a\u68ee\u6797\u3002\n\n\u7528\u626b\u63cf\u7ebf\u8f85\u52a9\u5efa\u7acb\u6811\u7684\u5173\u7cfb\u3002\u6309$x$\u6392\u5e8f\uff0c\u628a\u77e9\u5f62\u62c6\u4e3a\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n- \u5165\u64cd\u4f5c\uff1a\u626b\u63cf\u5230\u77e9\u5f62\u5de6\u8fb9\u65f6\u5728$y$\u76f8\u5e94\u533a\u95f4\u4e0a\u52a0\u5165\u77e9\u5f62\u3002\n\n- \u51fa\u64cd\u4f5c\uff1a\u626b\u63cf\u5230\u77e9\u5f62\u53f3\u8fb9\u65f6\u5728$y$\u76f8\u5e94\u533a\u95f4\u4e0a\u5220\u9664\u77e9\u5f62\u3002\n\n\u7ef4\u62a4$y$\u7684\u4e00\u6bb5\u533a\u95f4\u5185\u7684\u77e9\u5f62\uff0c\u53ef\u4ee5\u52a8\u6001\u5f00\u70b9\u7528\u7ebf\u6bb5\u6811\u3002\u5220\u9664\u65f6\uff0c\u628a\u8fd9\u6bb5\u533a\u95f4\u8bbe\u4e3a\u5220\u9664\u7684\u77e9\u5f62\u7684\u7236\u4eb2\u5373\u53ef\u3002\n\n\u628a\u70b9\u6807\u8bb0\u5728\u5305\u542b\u5b83\u7684\u6700\u5c0f\u77e9\u5f62\u4e0a\u3002\u540c\u6837\u7528\u626b\u63cf\u7ebf\uff0c\u628a\u70b9\u770b\u505a$1 \\times 1$\u7684\u77e9\u5f62\u5904\u7406\u3002$O(nlogn)$\u3002\n\n\u5efa\u51fa\u68ee\u6797\u540e\uff0c\u7528set\u505adsu on tree\uff08\u628a\u5c0fset\u5408\u5e76\u5230\u5927set\uff09\u3002$O(nlog^2n)$\u3002\n\n\u4e24\u4e2a\u5751\u70b9\uff1a\u64cd\u4f5c\u7684\u6392\u5e8f\u987a\u5e8f\uff1b\u7ebf\u6bb5\u6811\u53ef\u80fd\u4fee\u6539\u4e3a$0$\uff0c\u6ce8\u610f\u6807\u8bb0\u4e0b\u4f20\u5199\u6cd5\u3002\n\n~~\u6240\u4ee5\u8fd9\u9898\u4e3a\u4ec0\u4e48\u96be\u5ea6\u662f\u7eff\u7684~~\n\n```cpp\n#include <bits/stdc++.h>\n\ntemplate <typename T = int>\ninline T rd() {\n\tT a = 1, b = 0; char c = getchar();\n\twhile (!isdigit(c)) a = c == '-' ? 0 : 1, c = getchar();\n\twhile (isdigit(c)) b = b * 10 + c - '0', c = getchar();\n\treturn a ? b : -b;\n}\n\nconst int N = 80000 * 2 + 233, LIM = 1e9 + 10;\n\nint n, m;\n\nstruct Operation {\n\tint x, y1, y2, t, id;\n} op[N * 3];\n\nint ls[N * 32], rs[N * 32], seg_tag[N * 32], seg_color[N * 32], root, tot;\n\nvoid pushdown(int p) {\n\tif (seg_tag[p] != -1) {\n\t\tseg_color[ls[p]] = seg_color[rs[p]]\n\t\t\t= seg_tag[ls[p]] = seg_tag[rs[p]]\n\t\t\t= seg_tag[p];\n\t\tseg_tag[p] = -1;\n\t}\n}\n\nvoid change(int &p, int l, int r, int v, int L, int R) {\n\tif (p == 0)\n\t\tp = ++tot;\n\tif (l <= L && r >= R) {\n\t\tseg_color[p] = seg_tag[p] = v;\n\t\treturn;\n\t}\n\tpushdown(p);\n\tint mid = (L + R) >> 1;\n\tif (l <= mid)\n\t\tchange(ls[p], l, r, v, L, mid);\n\tif (r > mid)\n\t\tchange(rs[p], l, r, v, mid + 1, R);\n}\n\nint query(int p, int x, int L, int R) {\n\tif (p == 0)\n\t\treturn -1;\n\tif (L == R)\n\t\treturn seg_color[p];\n\tpushdown(p);\n\tint mid = (L + R) >> 1, w = 0;\n\tif (x <= mid)\n\t\tw = query(ls[p], x, L, mid);\n\telse\n\t\tw = query(rs[p], x, mid + 1, R);\n\tif (w == -1)\n\t\treturn seg_color[p];\n\telse return w;\n}\n\nint father[N];\nstd::vector<int> son[N];\n\nstd::set<int> set[N];\nint which[N];\n\nint ans[N];\n\nvoid dsu_on_tree(int x) {\n\tif (!which[x])\n\t\twhich[x] = x;\n\n\tint max_son = x;\n\n\tfor (auto y : son[x]) {\n\t\tdsu_on_tree(y);\n\t\tif (set[which[y]].size() > set[which[max_son]].size())\n\t\t\tmax_son = y;\n\t}\n\n\tstd::swap(which[x], which[max_son]);\n\n\tfor (auto y : son[x])\n\t\tfor (auto i : set[which[y]])\n\t\t\tset[which[x]].insert(i);\n\t\n\tans[x] = set[which[x]].size();\n}\n\nint main() {\n\tn = rd(), m = rd();\n\n\tfor (int i = 1, j = 0; i <= n; ++i) {\n\t\tint a = rd(), b = rd(), c = rd(), d = rd();\n\t\top[++j] = { a, b, d, -1, i };\n\t\top[++j] = { c, b, d, 1, i };\n\t}\n\n\tfor (int i = 1; i <= m; ++i) {\n\t\tint x = rd(), y = rd(), c = rd();\n\t\top[n * 2 + i] = { x, y, y, 0, c };\n\t}\n\n\tstd::sort(op + 1, op + n * 2 + m + 1,\n\t\t[](const Operation &a, const Operation &b)\n\t\t{ return a.x == b.x ? a.t < b.t : a.x < b.x; });\n\n\tmemset(seg_color, -1, sizeof(seg_color));\n\tmemset(seg_tag, -1, sizeof(seg_tag));\n\n\tfor (int i = 1; i <= n * 2 + m; ++i) {\n\t\tif (op[i].t == 1)\n\t\t\tchange(root, op[i].y1, op[i].y2, father[op[i].id], 1, LIM);\n\t\telse if (op[i].t == -1) {\n\t\t\tint fa = query(root, op[i].y1, 1, LIM);\n\t\t\tif (fa == -1) fa = 0;\n\t\t\tfather[op[i].id] = fa;\n\t\t\tson[fa].push_back(op[i].id);\n\t\t\tchange(root, op[i].y1, op[i].y2, op[i].id, 1, LIM);\n\t\t} else {\n\t\t\tint w = query(root, op[i].y1, 1, LIM);\n\t\t\tif (w != -1)\n\t\t\t\tset[w].insert(op[i].id);\n\t\t}\n\t}\n\n\tdsu_on_tree(0);\n\n\tfor (int i = 1; i <= n; ++i)\n\t\tprintf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1563934633,
        "uid": 52068,
        "name": "kai586123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4416 \u3010[COCI2017-2018#1] Plahte\u3011"
    },
    {
        "content": "#### \u9898\u610f\u7b80\u8ff0\uff1a\n\n\u7ed9\u5b9a $n$ \u4e2a\u4e92\u4e0d\u76f8\u4ea4\uff0c\u53ef\u4ee5\u91cd\u53e0\u7684\u77e9\u9635\uff0c\u5bf9\u67d0\u4e9b\u70b9\u67d3\u8272\uff0c\u8fd9\u4e2a\u70b9\u4e0a\u7684\u6240\u6709\u77e9\u9635\u4f1a\u88ab\u67d3\u4e0a\u8fd9\u4e2a\u989c\u8272\uff0c\u6c42\u6700\u540e\u6bcf\u4e2a\u77e9\u9635\u4f1a\u6709\u591a\u5c11\u79cd\u989c\u8272\u3002\n\n---\n\n#### \u89e3\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u77e9\u9635\u62c6\u6210\u4e0a\u4e0b\u4e24\u6761\u6c34\u5e73\u7ebf\u6bb5\uff0c\u7136\u540e\u79bb\u7ebf\u5c06\u67d3\u8272\u4e0e\u7ebf\u6bb5\u6a2a\u5750\u6807\u79bb\u6563\u5316\uff0c\u4ee5\u7eb5\u5750\u6807\u5c06\u77e9\u9635\u5c06\u7ebf\u6bb5\u4e0e\u67d3\u8272\u4e00\u8d77\u5904\u7406\u3002\n\n\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u77e9\u9635\u7684\u4e0b\u65b9\u7ebf\u6bb5\u52a0\u5165\uff0c\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u5bf9\u5e94\u8282\u70b9\u5c06\u5176\u5165\u6808\uff0c\u5bf9\u4e8e\u4e0a\u65b9\u7ebf\u6bb5\uff0c\u76f4\u63a5\u5728\u5bf9\u5e94\u8282\u70b9\u5f39\u51fa\u6808\u9876\u5373\u53ef\uff0c\u56e0\u4e3a\u77e9\u9635\u65e0\u76f8\u4ea4\uff0c\u6240\u4ee5\u6808\u9876\u4e00\u5b9a\u662f\u9700\u8981\u5f39\u51fa\u7684\u7ebf\u6bb5\u3002\n\n\u5bf9\u4e8e\u67d3\u8272\u64cd\u4f5c\uff0c\u6211\u4eec\u627e\u5230\u7ebf\u6bb5\u6811\u5bf9\u5e94\u7684\u6808\u9876\u5143\u7d20\uff0c\u7528 set \u8bb0\u5f55\u4e00\u4e0b\u3002\n\n\u7531\u4e8e\u82e5\u5c06\u5927\u77e9\u9635\u8986\u76d6\u5c0f\u77e9\u9635\u770b\u6210\u5927\u77e9\u9635\u4e3a\u5c0f\u77e9\u9635\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u90a3\u4e48\u4e0d\u96be\u53d1\u73b0\u8fd9\u662f\u68f5\u68ee\u6797\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u67d3\u8272\u7684\u8282\u70b9\uff0c\u5b83\u4eec\u7236\u4eb2\u4e5f\u9700\u8981\u67d3\u8fd9\u4e2a\u989c\u8272\uff0c\u8fd9\u4e2a\u5c31\u904d\u5386\u4e00\u904d\u6811\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n\\times \\log_2^2(n))$\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<set> \n#include<stack>\n#include<algorithm>\nusing namespace std;\nconst int N=8e4+5;\nint n,m,cnt,ans[N],cnp,ru[N],len1[12*N],len2[12*N];\nset<int>num[N];\nvector<int>b[N];\nstruct node\n{\n\tint name,x,y,h,k,flag;\n}a[3*N];\nstruct node2\n{\n\tint name,data;\n\tbool flag;\n}t[3*N];\nint cmp(node2 fi,node2 se)\n{\n\treturn fi.data<se.data;\n}\nint cmp2(node fi,node se)\n{\n\tif(fi.h==se.h)return fi.flag<se.flag;\n\treturn fi.h<se.h;\n}\nvector<int>f[12*N];\ninline int ls(int x)\n{\n\treturn x<<1;\n}\ninline int rs(int x)\n{\n\treturn x<<1|1;\n}\nvoid update(int x,int l,int r,int nl,int nr,int id,bool flag)\n{\n\tif(l>=nl&&r<=nr)\n\t{\n\t\tif(flag==0)\n\t\t{\n\t\t\tif(len1[x]==len2[x])f[x].push_back(id),len1[x]++,len2[x]++;\n\t\t\telse f[x][len1[x]++]=id;\n\t\t}\n\t\telse len1[x]--;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(mid>=nl)update(ls(x),l,mid,nl,nr,id,flag);\n\tif(mid<nr)update(rs(x),mid+1,r,nl,nr,id,flag);\n}\nint search(int x,int l,int r,int nl)\n{\n\tint ans=0;\n\tif(len1[x]>0)ans=f[x][len1[x]-1];\n\tif(l==r)return ans;\n\tint mid=(l+r)>>1;\n\t\n\tif(mid>=nl)ans=max(ans,search(ls(x),l,mid,nl));\n\telse ans=max(ans,search(rs(x),mid+1,r,nl));\n\treturn ans;\n}\nvoid dfs(int x)\n{\n\tint len=b[x].size();\n\tfor(int i=0;i<len;i++)\n\t{\n\t\tdfs(b[x][i]);\n\t\tif(num[b[x][i]].size()>num[x].size())swap(num[x],num[b[x][i]]);\n\t\tfor(set<int>::iterator j=num[b[x][i]].begin();j!=num[b[x][i]].end();j++)num[x].insert(*j);\n\t}\n\tans[x]=num[x].size();\n}\nint main()\n{\n\t//freopen(\"plahteplahte.in\",\"r\",stdin);\n\t//freopen(\"Plahte.out\",\"w\",stdout);\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d%d%d\",&a[i*2-1].x,&a[i*2-1].h,&a[i*2].y,&a[i*2].h);\n\t\ta[i*2-1].name=a[i*2].name=i;\n\t\ta[i*2-1].y=a[i*2].y;\n\t\ta[i*2].x=a[i*2-1].x;\n\t\tt[++cnp]={i,a[i*2-1].x,0};\n\t\tt[++cnp]={i,a[i*2-1].y,1};\n\t\ta[i*2-1].flag=0;\n\t\ta[i*2].flag=2;\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&a[i+2*n].x,&a[i+2*n].h,&a[i+2*n].k);\n\t\tt[++cnp]={i+2*n,a[i+2*n].x,0};\n\t\ta[i+2*n].flag=1;\n\t}\n\tsort(t+1,t+1+cnp,cmp);\n\tt[0].data=-1;\n\tfor(int i=1;i<=cnp;i++)\n\t{\n\t\tif(t[i].data!=t[i-1].data)cnt++;\n\t\tif(t[i].flag==0)\n\t\t{\n\t\t\tif(t[i].name<=2*n)a[t[i].name*2-1].x=a[t[i].name*2].x=cnt;\n\t\t\telse a[t[i].name].x=cnt;\n\t\t}\n\t\telse a[t[i].name*2-1].y=a[t[i].name*2].y=cnt;\n\t}\n\tsort(a+1,a+1+2*n+m,cmp2);\n\tfor(int i=1;i<=2*n+m;i++)\n\t{\n\t\t//cout<<a[i].name<<\" \"<<a[i].x<<\" \"<<a[i].y<<\" \"<<a[i].flag<<endl;\n\t\tif(a[i].flag==0)\n\t\t{\n\t\t\tint x=search(1,1,cnt,a[i].x);\n\t\t\tif(x)b[a[x].name].push_back(a[i].name),ru[a[i].name]++;\n\t\t\tupdate(1,1,cnt,a[i].x,a[i].y,i,0);\n\t\t}\n\t\telse if(a[i].flag==1)\n\t\t{\n\t\t\tint x=search(1,1,cnt,a[i].x);\n\t\t\tif(x)num[a[x].name].insert(a[i].k);\n\t\t}\n\t\telse update(1,1,cnt,a[i].x,a[i].y,i,1);\n\t}\n\tfor(int i=1;i<=n;i++)if(!ru[i])dfs(i);\n\tfor(int i=1;i<=n;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1668157492,
        "uid": 275793,
        "name": "Gmt\u4e36FFF",
        "ccfLevel": 5,
        "title": "P4416 [COCI2017-2018#1] Plahte \u9898\u89e3"
    }
]