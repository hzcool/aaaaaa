[
    {
        "content": "[LingFengGold\u535a\u5ba2](https://blog.csdn.net/qq_42386465/article/details/82854199)\n\n\u5ba3\u4f20\u4e00\u4e0b\u535a\u5ba2~~~\n\n[P2453 [SDOI2006]\u6700\u77ed\u8ddd\u79bb](https://www.luogu.org/problemnew/show/P2453)\n\n**\u72b6\u6001**\uff1af[i][j]\u8868\u793a\u521d\u59cb\u4e32\u521d\u59cb\u4e32\u5220\u9664\u5230\u7b2ci\u4e2a\u5b57\u7b26\uff0c\u76ee\u6807\u4e32\u5b8c\u6210\u5230\u7b2cj\u4e2a\u5b57\u7b26\uff1b\n\n\u521d\u59cb\u4e32\u4e3as1,len1\uff1b\n\n\u76ee\u6807\u4e32\u4e3as2,len2\uff1b\n\n**\u8fb9\u754c**\uff1a\n\nc[i][0]=cost(delet)*i\uff1b\uff08\u76ee\u6807\u4e32\u6ca1\u6709\u5b57\u7b26\uff0c\u521d\u59cb\u4e32\u53ea\u80fd\u5168\u5220\u4e86\uff09\n\nc[0][j]=cost(insert)*j\uff1b\uff08\u521d\u59cb\u4e32\u4e00\u4e2a\u5b57\u7b26\u90fd\u6ca1\u6709\uff0c\u76ee\u6807\u4e32\u53ea\u80fd\u7528insert\u4e00\u4e2a\u4e00\u4e2a\u63d2\u8fdb\u53bb\uff09\n\n\u679a\u4e3ei\uff0c\u679a\u4e3ej\n\n**Copy**\uff1a\u5f53a[i]==b[j]\u65f6\uff08\u6b64\u6761\u4ef6\u9700\u8981\u5224\u65ad\uff09\uff0c\u4e00\u6837\u7684\u8bdd\u5c31copy\u5c31\u597d\uff1b\n\nc[i][j]=min(c[i][j],c[i-1][j-1]+cost[copy]);\n\n**Repalce**\uff1a\u5f53a[i]!=b[j]\u65f6\uff08\u6b64\u6761\u4ef6\u65e0\u9700\u5224\u65ad\uff09\uff0c\u5c31\u628a\u521d\u59cb\u4e32\u7684\u5220\u4e86\uff0c\u76ee\u6807\u4e32\u586b\u4e00\u4e2a\uff1b\n\nc[i][j]=min(c[i][j],c[i-1][j-1]+cost[replace]);\n\n**Delet**\uff1a\u662f\u5220\u9664\u4e00\u4e2a\u521d\u59cb\u4e32\u7684\uff0c\u5bf9\u4e8e\u76ee\u6807\u4e32\u65e0\u5f71\u54cd\uff1b\n\nc[i][j]=min(c[i][j],c[i-1][j]+cost[delet]);\n\n**Insert**\uff1a\u7ed9\u76ee\u6807\u4e32\u591a\u5b8c\u6210\u4e00\u4e2a\uff0c\u5bf9\u521d\u59cb\u4e32\u65e0\u5f71\u54cd\uff1b\n\nc[i][j]=min(c[i][j],c[i][j-1]+cost[insert]);\n\n**Twiddle**\uff1a\u5f53a[i-1]==b[j]&&a[i]==b[i-1]&&i>=2&&j>=2\u65f6\uff08\u6b64\u6761\u4ef6\u9700\u8981\u5224\u65ad\uff09\uff0c\u5c31twiddle\uff1b\n\nc[i][j]=min(c[i][j],c[i-2][j-2]+cost[twiddle]);\n\n\u679a\u4e3e\u7ed3\u675f\uff01\n\n\n------------\n\n**Kill**\uff1a\u5355\u72ec\u62ff\u51fa\u6765\uff0c\u679a\u4e3e\u5f53\u76ee\u6807\u4e32\u5df2\u7ecf\u5b8c\u6210\u7684\u60c5\u51b5\u4e0b\uff08i=len2)\uff0c\u521d\u59cb\u4e32\u8981\u6e05\u96f6\u7684\u6700\u5c0f\u503c\n\nc[len1][len2]=min(c[len1][len2],c[i][len2]+cost[delet]*(len1-i)-1);\n\n**\u7ed3\u679c**\uff1af[len1][len2]\u3002\n\n\u4e0a\u9762\u89e3\u91ca\u7684\u5f88\u6e05\u695a\uff0c\u9644\u4e0a\u4ee3\u7801\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<stack>\n#define inf 1e18+5\n#define ll long long\nusing namespace std;\nll inline read()\n{\n    ll x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nchar a[2050],b[2050];\nll c[2050][2050];\nll cost[6];\nint main()\n{\n    scanf(\"%s%s\",a+1,b+1);\n    for(int i=1;i<=5;i++){\n        cost[i]=read();\n    }\n    //1=delet,2=replace,3=copy,4=insert,5=twiddle\n    int len1=strlen(a+1),len2=strlen(b+1);\n    if(len1==0&&len2==0){\n        printf(\"0\");\n        return 0;\n    }\n    if(len1==0&&len2!=0){\n        printf(\"%lld\",len2*cost[4]);\n        return 0;\n    }\n    if(len1!=0&&len2==0){\n        printf(\"%lld\",len1*cost[1]);\n        return 0;\n    }\n    for(int i=1;i<=len1;i++){\n        for(int j=1;j<=len2;j++){\n            c[i][j]=inf;\n        }\n    }\n    c[0][0]=0;\n    for(int i=1;i<=len1;i++){\n        c[i][0]=i*cost[1];\n    }\n    for(int i=1;i<=len2;i++){\n        c[0][i]=i*cost[4];\n    }\n    for(int i=1;i<=len1;i++){\n        for(int j=1;j<=len2;j++){\n            if(a[i]==b[j]){\n                c[i][j]=min(c[i][j],c[i-1][j-1]+cost[3]);\n            }\n            c[i][j]=min(c[i][j],c[i-1][j-1]+cost[2]);\n            c[i][j]=min(c[i][j],c[i-1][j]+cost[1]);\n            c[i][j]=min(c[i][j],c[i][j-1]+cost[4]);\n            if(i>=2&&j>=2&&a[i-1]==b[j]&&a[i]==b[j-1]){\n                c[i][j]=min(c[i][j],c[i-2][j-2]+cost[5]);\n            }\n        }\n    }\n    for(int i=1;i<len1;i++){\n        c[len1][len2]=min(c[len1][len2],c[i][len2]+cost[1]*(len1-i)-1);\n    }\n    printf(\"%lld\",c[len1][len2]);\n    return 0;\n}\n```",
        "postTime": 1537950025,
        "uid": 55580,
        "name": "LingFengGold",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2453 \u3010[SDOI2006]\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": "# \u8fd9\u9053\u9898\u7b2c\u4e00\u773c\u770b\u4e0a\u53bb\u5bf9\u4e8e\u6211\u8fd9\u79cd\u849f\u84bb\u6765\u8bf4\u597d\u50cf\u4e0d\u53ef\u505a\u3002\n\u4e8e\u662f\uff0c\u6211\u4eec\u672c\u7740\u628a\u8003\u8bd5\u505a\u5230\u65e5\u5e38\u7684\u60f3\u6cd5\u53bb\u505a\u8fd9\u9053\u9898\uff0c\u5728\u771f\u6b63\u7684\u8003\u8bd5\u4e0b\u6211\u4eec\u80af\u5b9a\u8981\u5c3d\u91cf\u4e0d\u62e9\u624b\u6bb5\u7684\u62ff\u5206\u3002\n## \u6211\u4eec\u5148\u4ece\u66b4\u529b\u5f00\u59cb\u3002\n\u4e00\u4e2a\u5f88\u5bb9\u6613\u8bc1\u660e\u7684\u662f\u6211\u4eec\u6bcf\u6b64\u64cd\u4f5c\u8981\u4e48\u4e0d\u66f4\u65b0\u76ee\u6807\u4e32\uff0c\u8981\u4e48\u6211\u4eec\u5fc5\u5b9a\u8981\u8ba9\u8fd9\u4e00\u4f4d\u7b26\u5408\u76ee\u6807\u4e32\uff0c\u4e0d\u5b58\u5728\u6211\u4eec\u628a\u8fd9\u4e00\u4f4d\u641e\u6210\u4e0e\u76ee\u6807\u4e32\u4e0d\u76f8\u7b26\u7684\u5b57\u7b26\u3002\n#### \u5927\u529b\u7a77\u4e3e\n\u5f53$a_{i}=b_{j}$\u65f6\u6211\u4eec\u624d\u80fd\u7528copy\uff0c\u5f53$a_{i}=b_{j+1}$&&$a_{i+1}=b_{j}$\u65f6\u624d\u80fd\u7528twiddle\u3002\n\u9664\u6b64\u4e4b\u5916\u76843\u79cd\u64cd\u4f5c\u662f\u4efb\u610f\u60c5\u51b5\u4e0b\u90fd\u53ef\u4ee5\u4f7f\u7528\u7684\u3002\n\n\u63a5\u7740\u6211\u4eec\u8003\u8651\u641c\u7d22\u7684\u7ed3\u675f\u6761\u4ef6\uff0c**\u7b2c\u4e00\u79cd**\u60c5\u51b5\u65f6\u9898\u76ee\u79cd\u660e\u786e\u8bf4\u4e86\u7684\uff0c\u8fbe\u5230\u4e86\u76ee\u6807\u4e14\u539f\u4e32\u8fd8\u5269\u7740\u5c31\u5168\u90e8\u5220\u6389\uff0c**\u7b2c\u4e8c\u79cd**\u662f\u6211\u4eec\u5df2\u7ecf\u628a\u539f\u4e32\u7528\u5b8c\u4e86\u4f46\u8fd8\u6ca1\u6709\u8fbe\u5230\u76ee\u6807\uff0c\u6211\u4eec\u53ea\u80fd\u628a\u5269\u4e0b\u7684\u672a\u8fbe\u5230\u7684\u76ee\u6807\u5b57\u7b26\u5168\u90e8insert\u8fdb\u53bb\u3002\n\n### Code\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 201;\nstring a,b;\nint pay[5],ans=0x3f3f3f3f;\ninline void Init(){\n    cin>>a>>b;\n    for(int i=0;i<5;i++)\n    cin>>pay[i];\n}\nvoid dfs(int len1,int len2,int pays){\n    if(len1==a.size()){\n        ans=min(ans,pays+(int)(b.size()-len2)*pay[3]);\n        return;\n    }\n    if(len2==b.size()){\n        ans=min(ans,pays+(int)(a.size()-len1)*pay[0]-1);\n        return;\n    }\n    if(a[len1]==b[len2])\n    dfs(len1+1,len2+1,pays+pay[2]);\n    if(a[len1]==b[len2+1]&&a[len1+1]==b[len2])\n    dfs(len1+2,len2+2,pays+pay[4]);\n    dfs(len1+1,len2,pays+pay[0]);\n    dfs(len1+1,len2+1,pays+pay[1]);\n    dfs(len1,len2+1,pays+pay[3]);\n}\nint main(){\n    Init();\n    dfs(0,0,0);\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n\n\u7136\u540e\u6211\u89c2\u5bdf\u4e86\u4e00\u4f1a\u8fd9\u4e2a\u7206\u641c\uff0c\u53d1\u73b0\u6211\u4eec\u7684\u66f4\u65b0\u597d\u60f3\u53ea\u548c\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u6709\u4e00\u70b9\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u4e24\u4e32\u7684\u957f\u5ea6\u4e3a\u72b6\u6001\u60f3LCS\u4e00\u6837\u53bbDP\u3002\n\n#### \u4e8e\u662f\u6211\u4eec\u76f4\u63a5\u6539\u6210\u8bb0\u641c\n\n### Code:\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 201;\nstring a,b;\nint pay[5],ans=0x3f3f3f3f;\ninline void Init(){\n\tcin>>a>>b;\n\tfor(int i=0;i<5;i++)\n\tcin>>pay[i];\n}\nint dp[MAXN][MAXN];\nint dfs(int len1,int len2){\n\tif(dp[len1][len2]!=0x3f3f3f3f)return dp[len1][len2];\n\tif(len1==a.size())\n\t\treturn (int)((b.size()-len2)*pay[3]);\n\tif(len2==b.size())\n\t\treturn (int)((a.size()-len1)*pay[0]-1);\n\tif(a[len1]==b[len2])\n\tdp[len1][len2]=min(dp[len1][len2],dfs(len1+1,len2+1)+pay[2]);\n\tif(a[len1]==b[len2+1]&&a[len1+1]==b[len2])\n\tdp[len1][len2]=min(dfs(len1+2,len2+2)+pay[4],dp[len1][len2]);\n\tdp[len1][len2]=min(dfs(len1+1,len2)+pay[0],dp[len1][len2]);\n\tdp[len1][len2]=min(dfs(len1+1,len2+1)+pay[1],dp[len1][len2]);\n\tdp[len1][len2]=min(dp[len1][len2],dfs(len1,len2+1)+pay[3]);\n\treturn dp[len1][len2];\n}\nint main(){\n\tInit();\n\tmemset(dp,0x3f,sizeof(dp));\n\tcout<<dfs(0,0);\n\treturn 0;\n}\n```\n### \u5230\u6b64\u4e3a\u6b62\u6211\u4eecAC\u6389\u4e86\u8fd9\u9053\u9898\uff0c\u4f46\u6211\u4eec\u4ece\u8fd9\u9053\u9898\u8981\u83b7\u5f97\u4e00\u4e9b\u7ecf\u9a8c\u3002\n## \u5e73\u65f6AC\u5e76\u4e0d\u662f\u6211\u4eec\u7684\u6700\u7ec8\u76ee\u7684\uff0cAC\u7684\u6570\u76ee\u5e76\u4e0d\u80fd\u5168\u9762\u4f53\u73b0\u4f60\u7684\u5b9e\u529b\u3002\u8fd9\u9053\u9898\u867d\u7136\u6211\u505a\u51fa\u6765\u4e86\uff0c\u53d1\u4e86\u9898\u89e3\u4e86\uff0c\u4f46\u4e00\u770b\u65f6\u95f4\u5df2\u7ecf\u8fc7\u53bb\u4e862h\uff0c\u653e\u5230NOIP\u9876\u591aDAY1T2\u7684\u96be\u9053\u4e0d\u5230\uff0c\u5982\u679c\u662f\u8003\u573a\u4e0a\u59a5\u59a5\u7684\u51c9\u51c9\u3002\n# \u8003\u573a\u4e0a\u6700\u91cd\u8981\u7684\u901f\u5ea6\u548c\u6b63\u786e\u7387\uff0c\u800c\u8fd9\u65f6\u5e73\u5e38\u6211\u4eec\u505a\u9898\u7ecf\u5e38\u5ffd\u7565\u7684\u4e1c\u897f\u3002\n## \u76ee\u6807\u662f500\uff0c\u5c31\u8981\u4ece\u5feb\u51c6\u72e0\u7684\u66b4\u529b\u5f00\u59cb\u3002",
        "postTime": 1560305975,
        "uid": 165030,
        "name": "Sweetie_Liu",
        "ccfLevel": 6,
        "title": "P2453 [SDOI2006]\u6700\u77ed\u8ddd\u79bb"
    },
    {
        "content": "\u5173\u4e8e\u8fd9\u79cd\u5e8f\u5217\u5339\u914d\u7684\u95ee\u9898\uff0c\u601d\u8def\u90fd\u662f\u4e00\u6837\u7684\u3002\n\n\u8bbef[i][j]\u8868\u793a\u76ee\u6807\u4e32\u5df2\u7ecf\u5b8c\u6210\u4e86\u524di\u4f4d\uff0c\u521d\u59cb\u4e32\u5df2\u7ecf\u5220\u9664\u4e86j\u4f4d\u3002\n\n\u8fb9\u754c\uff1a\n\nf[0][j]=cost(delete)\\*j\uff08\u56e0\u4e3a\u76ee\u6807\u4e32\u4e00\u4f4d\u90fd\u6ca1\u6709\uff0c\u6240\u4ee5\u521d\u59cb\u4e32\u53ea\u80fd\u5220\uff09\n\nf[i][0]=cost(insert)\\*i\uff08\u56e0\u4e3a\u521d\u59cb\u4e32\u4e00\u4f4d\u4e5f\u6ca1\u52a8\u8fc7\uff0c\u6240\u4ee5\u53ea\u80fd\u5f80\u76ee\u6807\u4e32\u91cc\u6dfb\u52a0\uff09\n\n\u5bf9\u4e8e\u6bcf\u79cd\u64cd\u4f5c\uff1a\uff08\u8bbe\u76ee\u6807\u4e32\u4e3as2,\u521d\u59cb\u4e32s1\uff09\n\n```cpp\ndelete->f[i][j]=min(f[i][j],f[i][j-1]+cost(delete))\nreplace->f[i][j]=min(f[i][j],f[i-1][j-1]+cost(replace))\ncopy->f[i][j]=min(f[i][j],f[i-1][j-1]+cost(copy))(s2[i]==s1[j])\ninsert->f[i][j]=min(f[i][j],f[i-1][j]+cost(insert))\ntwiddle->f[i][j]=min(f[i][j],f[i-2][j-1]+cost(triddle))(s2[i]==s1[j-1]&&s2[i-1]==s1[j])\n```\n\u7136\u540e\u8f6c\u79fb\u5c31\u597d\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(len(s1)\\*len(s2))\n\u6700\u540e\u679a\u4e3ef[len(s2][j](0<=j<len(s1)),\u628a\u7b54\u6848\u52a0\u4e0a(len(s1)-j)\\*del-1;\n\n\u7136\u540e\u548cf[len(s2)][len(s1)]\u6bd4\u8f83\uff0c\u6240\u6709\u7684\u503c\u91cc\u9762\u53d6\u6700\u5c0f\u503c\u3002\n\n\u9644\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint cop,tri,del,ins,rep;\nchar s1[1001],s2[1001];\nint f[202][202];\nint ans;\ninline int min(int a,int b)\n{\n    return a<b?a:b;\n}\nint main()\n{\n    memset(f,127,sizeof(f));\n    scanf(\"%s\",s1+1);\n    scanf(\"%s\",s2+1);\n    f[0][0]=0;\n    scanf(\"%d%d%d%d%d\",&del,&rep,&cop,&ins,&tri);\n    int m=strlen(s1+1),n=strlen(s2+1);\n    for(int i=1;i<=n;i++)\n    f[i][0]=i*ins;\n    for(int i=1;i<=m;i++)\n    f[0][i]=i*del;\n    for(int i=1;i<=n;i++)\n    for(int j=1;j<=m;j++)\n    {\n        f[i][j]=min(f[i][j],f[i][j-1]+del);\n        f[i][j]=min(f[i][j],f[i-1][j-1]+rep);\n        if(s2[i]==s1[j])\n        f[i][j]=min(f[i][j],f[i-1][j-1]+cop);\n        f[i][j]=min(f[i][j],f[i-1][j]+ins);\n        if(i>1&&j>1&&s2[i-1]==s1[j]&&s2[i]==s1[j-1])\n        f[i][j]=min(f[i][j],f[i-2][j-2]+tri);\n    }\n    ans=0x7fffffff;\n    for(int i=1;i<m;i++)\n    ans=min(ans,f[n][i]+(m-i)*del-1);\n    ans=min(ans,f[n][m]);\n    printf(\"%d\",ans);\n}\n```",
        "postTime": 1493711356,
        "uid": 17828,
        "name": "revenger",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2453 \u3010[SDOI2006]\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u6bd4\u8f83\u72ec\u7279\u7684\u505a\u6cd5\uff1a\u6700\u77ed\u8def\n\n![MetL4J.png](https://s2.ax1x.com/2019/11/09/MetL4J.png)\n\n~~\u8bdd\u8bf4\u9898\u76ee\u4e2d\u4e0d\u90fd\u6697\u793a\u4e86\u561b~~\n\n\u5176\u5b9e\u5f88\u591a\u72b6\u6001\u538b\u7f29\u7c7b\u52a8\u6001\u89c4\u5212\u53ef\u4ee5\u8f6c\u6362\u6210\u6700\u77ed\u8def\u95ee\u9898\uff0c\u53ea\u9700\u8981\u5c06\u72b6\u6001\u538b\u7f29\u4e3a\u4e00\u4e2a\u70b9\u5c31\u884c\uff0c\u4e00\u822c\u5904\u7406\u53d8\u6362\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002\n\n\u5b9e\u9645\u4e0a\u6700\u77ed\u8def\u95ee\u9898\u5c31\u662f\u5728\u56fe\u4e0a\u8dd1$DP$\uff0c\u4f46\u7531\u4e8e$DP$\u8f6c\u79fb\u53d7\u987a\u5e8f\u9650\u5236\u9700\u8981\u5728\u62d3\u6251\u5e8f\u4e0a\u8dd1\uff0c\u800c$dijkstra$\u53ea\u9700\u8981\u6307\u5b9a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u5c31\u884c\u3002\n\n\u5728\u8fd9\u7c7b\u9898\u4e2d\uff0c\u6211\u4eec\u5efa\u51fa\u6765\u7684\u56fe\u5c31\u662f\u4e00\u4e2a\u72b6\u6001\u8f6c\u79fb\u56fe\uff0c\u800c\u4e00\u822c\u7684\u72b6\u538b$DP$\u5c31\u662f\u5728\u56fe\u4e0a\u8dd1$DP$\uff0c\u548c$dijkstra$\u662f\u7b49\u6548\u7684\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u9898\uff0c\u5173\u952e\u70b9\u5728\u4e8e\u5982\u4f55\u8bbe\u8ba1\u72b6\u6001\u548c\u8fde\u8fb9\u5efa\u56fe\n\n# $Solution$\n\u8fd9\u9053\u9898\u6709\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684\u6027\u8d28\uff1a\u5c31\u5bf9\u4e8e\u6700\u4f18\u53d8\u6362\u65b9\u6848\uff0c\u6bcf\u4e2a\u65f6\u523b\u76ee\u6807\u4e32\u4e00\u5b9a\u662f\u6700\u7ec8\u4e32\u7684\u524d\u7f00\uff0c\u6e90\u4e32\u4e00\u5b9a\u662f\u8d77\u59cb\u4e32\u7684\u540e\u7f00\u3002\n\n\u8bc1\u660e\uff1a\u5047\u8bbe\u5f53\u524d\u76ee\u6807\u4e32\u4e0d\u662f\u6700\u7ec8\u4e32\u7684\u524d\u7f00\uff0c\u90a3\u4e48\u6709\u4e24\u79cd\u53ef\u80fd\uff1a\n$1.$\u957f\u5ea6\u8d85\u8fc7\u6700\u7ec8\u4e32\uff1a\u90a3\u5c31\u5fc5\u987b\u5220\u9664\uff0c\u8fd9\u548c\u5728\u63d2\u5165\u524d\u5220\u9664\u662f\u7b49\u6548\u7684\n$2.$\u76ee\u6807\u4e32\u6709\u5b57\u7b26\u4e0d\u5339\u914d\u6700\u7ec8\u4e32\uff0c\u90a3\u4e48\u4e4b\u540e\u8fd8\u9700\u8981$delete$\u6216\u8005\u6309\u4e4b\u524d\u7684\u8def\u4fee\u6539\u56de\u53bb\uff0c\u4e0d\u5982\u63d0\u524d\u5c31\u4fee\u6539\u6216\u8005\u76f4\u63a5$delete$\n\n\u6709\u4e86\u8fd9\u4e2a\u6027\u8d28\uff0c\u72b6\u6001\u5c31\u6bd4\u8f83\u597d\u8868\u793a\u4e86\uff0c\u53ea\u6709$(lena+1)\\times(lenb+1)$\u79cd\u72b6\u6001\n\n![Me0ip4.png](https://s2.ax1x.com/2019/11/09/Me0ip4.png)\n\n\u72b6\u6001\u8ba1\u7b97\u51fd\u6570\u5c31\u662f\u8fd9\u4e2a\n```\nint id(int x,int y)//x\u662f\u76ee\u6807\u4e32\u957f\u5ea6,y\u662f\u6e90\u4e32\u957f\u5ea6 \n{\n\treturn x*(lena+1)+y+1;\n}\n```\n\u8003\u8651\u5982\u4f55\u8fde\u8fb9\n\n\u64cd\u4f5c\u4e00\u3001\u4e8c\u3001\u56db\u662f\u6bd4\u8f83\u663e\u7136\u7684\uff0c\u64cd\u4f5c\u4e09\u8981\u6ce8\u610f\u5224\u65ad\u4e00\u4e0b\uff0c\u76f8\u540c\u624d\u80fd\u8fde\u8fb9\uff0c\u64cd\u4f5c\u4e94\u540c\u7406\uff0c\u5bf9\u4e8e\u64cd\u4f5c\u6e05\u7a7a\u8981\u7279\u522b\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u76f4\u63a5$id(i,j)->id(i,0)$\u662f\u9519\u8bef\u7684\uff0c\u5047\u8bbe$j$\u662f$0$\uff0c\u90a3\u4e48\u6839\u636e\u9898\u9762\u5c31\u53ef\u4ee5\u4e0d\u65ad\u5220\u9664\uff0c\u800c\u4ee3\u4ef7\u662f$-1$\uff0c\u6240\u4ee5\u8981\u7279\u522b\u5224\u65ad\u8fd9\u4e2a\u60c5\u51b5\n\n```\nvoid link()\n{\n\tfor(re int i=0;i<=lenb;++i)\n\t for(re int j=0;j<=lena;++j)\n\t {\n\t \tif(j>=1) add(id(i,j),id(i,j-1),w[1]);//del\n\t \tif(j>=1&&i<lenb)\n\t \t{\n\t \t\tadd(id(i,j),id(i+1,j-1),w[2]);//replace\u4efb\u4f55\u60c5\u51b5\u90fd\u884c \n\t \t\tif(B[i+1]==A[lena-j+1]) add(id(i,j),id(i+1,j-1),w[3]);//\u76f8\u7b49\u5219\u53ef\u4ee5\u76f4\u63a5copy \n\t\t}\n\t\tif(i<lenb)\n\t\t{\n\t\t\tadd(id(i,j),id(i+1,j),w[4]);\n\t\t}\n\t\tif(j>=2&&i<=lenb-2)\n\t\t{\n\t\t\tif(B[i+1]==A[lena-j+2]&&B[i+2]==A[lena-j+1])\n\t\t\tadd(id(i,j),id(i+2,j-2),w[5]);//\u5224\u65ad \n\t\t}\n\t\tif(i==lenb&&j!=0)//\u8fd9\u91cc\u4e00\u5b9a\u8981\u6ce8\u610f \n\t\t{\n\t\t\tadd(id(i,j),id(i,0),j*w[1]-1);\n\t\t}\n\t }\n}\n```\n\n\u7136\u540e\u52a0\u4e2a$dijkstra$\u4ece$id(0,lena)$\u8dd1\u5230$id(lenb,0)$\u5373\u53ef\n\n\u5b8c\u6574\u4ee3\u7801\n# $Code$\n```\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#define re register\n#define maxn 200010\n#define INF 0x3f3f3f3f\nusing namespace std;\ninline int read()\n{\n\tint x=0,f=1; char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nstruct Edge{\n\tint v,w,nxt;\n}e[maxn<<2];\nint w[101],cnt,head[maxn],vis[maxn];\nchar A[220],B[220];\nint lena,lenb,T,S,dis[maxn];\nint id(int x,int y)//x\u662f\u76ee\u6807\u4e32\u957f\u5ea6,y\u662f\u6e90\u4e32\u957f\u5ea6 \n{\n\treturn x*(lena+1)+y+1;\n}\ninline void add(int u,int v,int w)\n{\n\te[++cnt].v=v;\n\te[cnt].w=w;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\nstruct node{\n\tint u,d;\n\tbool operator <(const node&rhs) const{\n\t\treturn rhs.d<d;\n\t}\n};\npriority_queue<node> q;\nvoid dijkstra(int s)\n{\n\twhile(!q.empty()) q.pop();\n\tq.push((node){s,0});\n\tmemset(dis,INF,sizeof(dis));\n\tdis[s]=0;\n\twhile(!q.empty())\n\t{\n\t\tnode now=q.top();\n\t\tq.pop();\n\t\tif(vis[now.u]) continue;\n\t\tvis[now.u]=1;\n\t\tfor(int i=head[now.u];i;i=e[i].nxt)\n\t\t{\n\t\t\tint ev=e[i].v;\n\t\t\tif(dis[ev]>dis[now.u]+e[i].w)\n\t\t\t{\n\t\t\t\tdis[ev]=dis[now.u]+e[i].w;\n\t\t\t\tq.push((node){ev,dis[ev]});\n\t\t\t}\n\t\t}\n\t}\n}\nvoid link()\n{\n\tfor(re int i=0;i<=lenb;++i)\n\t for(re int j=0;j<=lena;++j)\n\t {\n\t \tif(j>=1) add(id(i,j),id(i,j-1),w[1]);//del\n\t \tif(j>=1&&i<lenb)\n\t \t{\n\t \t\tadd(id(i,j),id(i+1,j-1),w[2]);//replace\u4efb\u4f55\u60c5\u51b5\u90fd\u884c \n\t \t\tif(B[i+1]==A[lena-j+1]) add(id(i,j),id(i+1,j-1),w[3]);//\u76f8\u7b49\u5219\u53ef\u4ee5\u76f4\u63a5copy \n\t\t}\n\t\tif(i<lenb)\n\t\t{\n\t\t\tadd(id(i,j),id(i+1,j),w[4]);\n\t\t}\n\t\tif(j>=2&&i<=lenb-2)\n\t\t{\n\t\t\tif(B[i+1]==A[lena-j+2]&&B[i+2]==A[lena-j+1])\n\t\t\tadd(id(i,j),id(i+2,j-2),w[5]);//\u5224\u65ad \n\t\t}\n\t\tif(i==lenb&&j!=0)//\u8fd9\u91cc\u4e00\u5b9a\u8981\u6ce8\u610f \n\t\t{\n\t\t\tadd(id(i,j),id(i,0),j*w[1]-1);\n\t\t}\n\t }\n}\n\nint main()\n{\n    cin>>A+1,lena=strlen(A+1);\n    cin>>B+1,lenb=strlen(B+1);\n    for(re int i=1;i<=5;++i) w[i]=read();\n    S=id(0,lena);\n    T=id(lenb,0);\n    link();\n    dijkstra(S);\n    printf(\"%d\\n\",dis[T]);\n\treturn 0;\n}\n\n```",
        "postTime": 1573266609,
        "uid": 127018,
        "name": "ZORO",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2453 \u3010[SDOI2006]\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": "dp\u7684\u5b9a\u4e49\u89c1\u4ee3\u7801\u6ce8\u91ca  \n\u53d8\u91cfc_xxx\u610f\u4e3acost_xxx  \n\u4e4b\u540e\u7684dp\u65b9\u7a0b\u5c31\u5f88\u6e05\u6670\u4e86\uff0c\u840c\u65b0\u4f3c\u4e4e\u4e5f\u80fd\u770b\u61c2~~(\u521d\u5b66OI\u7cfb\u5217)~~  \n**kill**\u653e\u5230\u6700\u540e\u7edf\u4e00\u5904\u7406\uff0c\u628a\u5404\u79cd\u60c5\u51b5kill\u5230\u96f6\uff0c\u6bd4\u8f83\u8f93\u51fa\u6700\u5927\u503c\u5373\u53ef  \n**\u6ce8\u610f\uff01dp[lena][lenb]\u5fc5\u987b\u5728\u5916\u9762\u5904\u7406**\uff0c\u56e0\u4e3ata**\u4e0d\u7528kill**\uff0c\u6240\u4ee5**\u4e0d\u7528-1**  \n~~(\u6211\u4e00\u5f00\u59cb\u5c31\u88ab\u5751\u4e86\uff0c\u6211\u8fd8\u662f\u592a\u83dc)~~  \nM_sea\u592a\u5f3a\u5566!!!  \n\n------------\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint dp[210][210],lena,lenb,ans;//dp[i][j]\u8868\u793aa\u5220i\u4e2a,b\u5230j\u4e2a\u7684\u6700\u5c0f\u503c \nint c_delete,c_replace,c_copy,c_insert,c_twiddle;\nchar a[210],b[210];\nint main()\n{\n\tcin>>a>>b;\n\tlena=strlen(a);\n\tlenb=strlen(b);\n\tcin>>c_delete>>c_replace>>c_copy>>c_insert>>c_twiddle;\n\tfor(int i=1;i<=max(lena,lenb);i++)\n\t{\n\t\tdp[0][i]=c_insert*i;\n\t\tdp[i][0]=c_delete*i;\n\t}\n\tfor(int i=1;i<=lena;i++)\n\t{\n\t\tfor(int j=1;j<=lenb;j++)\n\t\t{\n\t\t\tdp[i][j]=999999999;//\u521d\u59cb\u5316\n\t\t}\n\t}\n\tfor(int i=1;i<=lena;i++)\n\t{\n\t\tfor(int j=1;j<=lenb;j++)\n\t\t{\n\t\t\tdp[i][j]=min(dp[i][j],dp[i-1][j]+c_delete);\n\t\t\tdp[i][j]=min(dp[i][j],dp[i-1][j-1]+c_replace);\n\t\t\tif(a[i-1]==b[j-1])//\u6211\u662f\u4ece0\u8bfb\u5165\u7684\uff0c\u6240\u4ee5\u51cf1\n\t\t\t{\n\t\t\t\tdp[i][j]=min(dp[i][j],dp[i-1][j-1]+c_copy);\n\t\t\t}\n\t\t\tdp[i][j]=min(dp[i][j],dp[i][j-1]+c_insert);\n\t\t\tif(i>=2&&j>=2&&a[i-1]==b[j-2]&&a[i-2]==b[j-1])//\u4e0d\u5224\u524d\u4e24\u4e2a\u4f1a\u70b8\n\t\t\t{\n\t\t\t\tdp[i][j]=min(dp[i][j],dp[i-2][j-2]+c_twiddle);\n\t\t\t}\n\t\t}\n\t}\n\tans=dp[lena][lenb];\n\tfor(int i=0;i<lena;i++)\n\t{\n\t\tans=min(ans,dp[i][lenb]+(lena-i)*c_delete-1);\n\t}\n\tcout<<ans;\n}\n```",
        "postTime": 1548646912,
        "uid": 97593,
        "name": "G_A_TS",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2453 \u3010[SDOI2006]\u6700\u77ed\u8ddd\u79bb\u3011"
    },
    {
        "content": "\u5148\u5410\u69fd\u4e00\u53e5\uff1a\u8fd9\u9898\u8ddf\u72b6\u538b\u6709\u4ec0\u4e48\u5173\u7cfb\u3002\u3002\n\n\u597d\uff0c\u73b0\u5728\u6765\u770b\u9898\u3002\u89c2\u5bdf\u4e00\u4e0b\u9898\u76ee\u91cc\u4e3e\u7684\u4f8b\u5b50\uff0c\u5728\u64cd\u4f5c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u76ee\u6807\u4e32\u5fc5\u7136\u662f\"altruistic\"\u7684\u4e00\u4e2a\u524d\u7f00\uff1b\u6e90\u4e32\u5fc5\u7136\u662f\"algorithm\"\u7684\u4e00\u4e2a\u540e\u7f00\u3002\u4e8e\u662f\u6211\u4eec\u8bbef[i][j]\u4e3a\u6e90\u4e32\u5220\u9664\u4e86i\u4e2a\uff0c\u76ee\u6807\u4e32\u5199\u51fa\u4e86j\u4e2a\u6240\u9700\u7684\u6700\u5c0f\u4ef7\u683c\u3002\n\n\u7136\u540e\u56e0\u4e3a\u9898\u76ee\u91cc\u8bf4\u8981\u6c42\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u628a\u5b83\u8f6c\u5316\u6210\u6700\u77ed\u8def ~~\uff08\u63a9\u76d6\u6211\u6211\u4e0d\u4f1a\u8bb0\u641c\u7684\u4e8b\u5b9e\uff09~~ \uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u8fde\u4e00\u6761\u8fb9\uff0c\u5177\u4f53\u8fde\u6cd5\u770b\u4e0b\u9762\u7684\u4ee3\u7801\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\nconst int MAXN=114514,MAXM=233333;\nstruct node{\n\tint v,c;\n\tnode*next;\n}*h[MAXN],pool[MAXM];\nint dis[MAXN],s,t,n=1,m=1,tot=0,del,rep,cop,ins,twi;\nbool vis[MAXN];\nchar a[233],b[233];\n\nstruct que{\n\tint id,dis;\n\tbool operator<(const que p)const\n\t{\n\t\treturn dis>p.dis;\n\t}\n}tmp;\npriority_queue <que> q;\n\nvoid addedge(int u,int v,int c){\n\tnode*p=&pool[++tot];\n\tp->v=v;p->c=c;p->next=h[u];h[u]=p;\n}\n\nvoid dijkstra(){\n\tmemset(dis,0x3f,sizeof(dis));\n\ttmp.dis=0;tmp.id=s;\n\tdis[s]=0;\n\tq.push(tmp);\n\twhile(!q.empty()){\n\t\ttmp=q.top();q.pop();\n\t\tint u=tmp.id;\n\t\tif(vis[u]){\n\t\t\tcontinue;\n\t\t}\n\t\tvis[u]=1;\n\t\tfor(node*p=h[u];p;p=p->next){\n\t\t\tif(dis[p->v]>dis[u]+p->c&&!vis[p->v]){\n\t\t\t\tdis[p->v]=dis[u]+p->c;\n\t\t\t\ttmp.id=p->v;tmp.dis=dis[p->v];\n\t\t\t\tq.push(tmp);\n\t\t\t}\n\t\t}\n\t}\n}//dijkstra\u6c42\u6700\u77ed\u8def\n\nint pos(int x,int y){\n\treturn x*(m+1)+y+1;\n}\n\nint main(){\n\tscanf(\"%s%s\",a+1,b+1);\n\tscanf(\"%d%d%d%d%d\",&del,&rep,&cop,&ins,&twi);\n\tfor(;a[n];n++);\n\tfor(;b[m];m++);\n\ts=pos(0,0);\n\tn--;m--;\n\tfor(int i=0;i<=n;i++){\n\t\tfor(int j=0;j<=m;j++){\n\t\t\tif(i<n){\n\t\t\t\taddedge(pos(i,j),pos(i+1,j),del);//\u5355\u4e2a\u5220\u9664\u64cd\u4f5c\uff0c\u6e90\u4e32\u5fc5\u987b\u6709\u5b57\u6bcd\n\t\t\t\taddedge(pos(i,j),pos(n,j),del*(n-i)-1);//\u5168\u90e8\u5220\u9664\u64cd\u4f5c\uff0c\u6e90\u4e32\u5fc5\u987b\u6709\u5b57\u6bcd\n\t\t\t}\n\t\t\tif(i<n&&j<m&&a[i+1]==b[j+1]){\n\t\t\t\taddedge(pos(i,j),pos(i+1,j+1),cop);//\u590d\u5236\u64cd\u4f5c\uff0c\u6e90\u4e32\u5fc5\u987b\u6709\u5b57\u6bcd\uff0c\u76ee\u6807\u4e32\u6ca1\u6ee1\uff0c\u4e0b\u4e24\u4e2a\u5b57\u6bcd\u76f8\u540c\n\t\t\t}\n\t\t\tif(i<n&&j<m){\n\t\t\t\taddedge(pos(i,j),pos(i+1,j+1),rep);//\u66ff\u6362\u64cd\u4f5c\uff0c\u6e90\u4e32\u5fc5\u987b\u6709\u5b57\u6bcd\uff0c\u76ee\u6807\u4e32\u6ca1\u6ee1\n\t\t\t}\n\t\t\tif(j<m){\n\t\t\t\taddedge(pos(i,j),pos(i,j+1),ins);//\u63d2\u5165\u64cd\u4f5c\uff0c\u76ee\u6807\u4e32\u6ca1\u6ee1\n\t\t\t} \n\t\t\tif(i<n-1&&j<m-1&&a[i+1]==b[j+2]&&a[i+2]==b[j+1]){\n\t\t\t\taddedge(pos(i,j),pos(i+2,j+2),twi);//\u4ea4\u6362\u5e76\u590d\u5236\uff0c\u7559\u7ed9\u8bfb\u8005\u81ea\u5df1\u601d\u8003\n\t\t\t}\n\t\t}\n\t}\n\tdijkstra();\n\tprintf(\"%d\\n\",dis[pos(n,m)]);\n\treturn 0;\n}\n```\n",
        "postTime": 1579345447,
        "uid": 89929,
        "name": "wanghanjun",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2453 \u3010[SDOI2006]\u6700\u77ed\u8ddd\u79bb\u3011"
    }
]