[
    {
        "content": "[P5423 [USACO19OPEN]Valleys P](https://www.luogu.com.cn/problem/P5423)\n\n\u4f5c\u4e3a\u4e00\u4e2a\u849f\u84bb\uff0c\u81ea\u5df1\u7684\u505a\u6cd5\u53ef\u80fd\u4f1a\u6709\u4e9b\u5730\u65b9\u6bd4\u8f83\u50bb\uff0c\u6b22\u8fce\u5927\u4f6c\u4eec\u6307\u51fa\u5e76\u6539\u8fdb~~\u5e76\u5632\u8bbd\u6211\u8fd9\u4e2a\u849f\u84bb~~\u3002\n\n# Solution\n\n\u9996\u5148\uff0c\u5bb9\u6613\u60f3\u5230\u5c06\u6240\u6709\u7684\u65b9\u683c\u6309\u7167 $b[i][j]$ \u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u4f9d\u6b21\u904d\u5386\u3002\n\n\u4e3a\u65b9\u4fbf\u53d9\u8ff0\uff0c\u5c06\u6ee1\u8db3\u533a\u57df\u5185\u7684\u4efb\u610f\u683c\u5b50\u7684\u9ad8\u5ea6\u4f4e\u4e8e\u8be5\u533a\u57df\u8fb9\u754c\u4e0a\u4efb\u610f\u683c\u5b50\u7684\u9ad8\u5ea6\u7684\u533a\u57df\u53eb\u505a\u201c\u5f31\u5c71\u8c37\u201d\u3002\n\n\u8bbe\u904d\u5386\u5230\u7684\u65b9\u683c\u662f $(i,j)$ \uff0c\u5c06 $(i,j)$ \u548c\u4e0e\u5b83**\u6709\u8fb9\u76f8\u8fde**\u7684\u65b9\u683c\u4e2d\uff0c$b$ \u503c\u6bd4 $b[i][j]$ \u5c0f\u7684\u5408\u5e76\u5230\u540c\u4e00\u4e2a\u96c6\u5408\u5185\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u6bcf\u6b21\u5408\u5e76\u540e\u7684\u96c6\u5408\u90fd\u662f\u5f31\u5c71\u8c37\u3002\n\n\u6240\u4ee5\u53ea\u7528\u5224\u65ad\u8be5\u533a\u57df\u662f\u5426\u6709\u6d1e\u5373\u53ef\u3002\n\n\u9996\u5148\u8ba1\u7b97\u5c06 $(i,j)$ \u52a0\u5165\u5f31\u5c71\u8c37\u540e\uff0c\u8be5\u5f31\u5c71\u8c37\u4f1a\u589e\u52a0\u591a\u5c11\u4e2a\u6d1e\u3002\n\n\u7ef4\u62a4\u53e6\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u5c06\u91cc\u9762\u6bcf\u4e00\u4e2a\u65b9\u683c\u90fd\u548c\u4e0e\u5b83**\u6709\u70b9\u76f8\u8fde**\u7684\u65b9\u683c\u8fde\u8fb9\uff08\u8fd9\u91cc\u7684\u65b9\u683c\u5305\u62ec\u5728 $N \\times N$ \u65b9\u9635\u4e4b\u5916\u7684\u65e0\u9650\u9ad8\u683c\u5b50\uff09\u3002\n\n\u5c06\u5e76\u67e5\u96c6\u4e2d\u8fd9\u4e2a\u65b9\u683c\u6240\u8fde\u7684\u8fb9\u5220\u53bb\u540e\uff0c\u8bbe\u4e0e\u5b83**\u6709\u70b9\u76f8\u8fde**\u7684\u65b9\u683c\u5b58\u5728\u4e8e $x$ \u4e2a\u4e0d\u540c\u7684\u8fde\u901a\u5757\u4e2d\u3002\n\n\u663e\u7136\uff0c\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5c31\u662f $\\max(0, x - 1)$\u3002\n\n\u4f46\u662f\u4ece\u5e76\u67e5\u96c6\u4e2d\u5220\u8fb9\u4e0d\u597d\u7ef4\u62a4\uff0c\u8003\u8651\u4f7f\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u3002\n\n\u6309\u7167\u628a\u8fb9\u5220\u53bb\u7684\u987a\u5e8f\u53cd\u8fc7\u6765\u7684\u987a\u5e8f\u52a0\u8fb9\uff0c\u5220\u8fb9\u76f4\u63a5\u64a4\u9500\u4e0a\u4e00\u6b21\u64cd\u4f5c\u5373\u53ef\u3002\n\n\u518d\u8003\u8651\u5c06 $(i,j)$ \u52a0\u5165\u5f31\u5c71\u8c37\u540e\uff0c\u8be5\u5f31\u5c71\u8c37\u662f\u5426\u4f1a\u51cf\u5c11\u6d1e\u3002\n\n\u7ef4\u62a4 $f[i][j]$ \u8868\u793a\u4e0e $(i,j)$ **\u6709\u70b9\u76f8\u8fde**\u7684\u65b9\u683c\u4e2d\uff0c\u5df2\u7ecf\u52a0\u5165\u5f31\u5c71\u8c37\u7684\u6570\u91cf\u3002\n\n\u663e\u7136\uff0c\u5982\u679c $f[i][j] = 8$\uff0c\u90a3\u4e48\u5c06 $(i,j)$ \u52a0\u5165\u5f31\u5c71\u8c37\u540e\uff0c\u8be5\u5f31\u5c71\u8c37\u7684\u6d1e\u7684\u6570\u91cf\u4f1a\u51cf\u5c11 $1$\u3002\n\n\u5426\u5219\u5c31\u4e0d\u4f1a\u51cf\u5c11\u3002\n\n\u6bcf\u6b21\u64cd\u4f5c\u540e\u5224\u65ad\u5f53\u524d\u7684\u5f31\u5c71\u8c37\u662f\u5426\u6709\u6d1e\uff0c\u6ca1\u6709\u6d1e\u7684\u8bdd\u5c31\u52a0\u5165\u7b54\u6848\u3002\n\n\u8bf4\u7684\u53ef\u80fd\u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff0c\u8bf7\u5927\u4f6c\u4eec\u539f\u8c05\uff0c\u628a\u6211\u7684\u5783\u573e\u4ee3\u7801\u8d34\u5230\u4e0b\u9762\u3002\n\n# Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst ll maxn = 750;\nconst ll N = maxn + 10;\nconst ll INF = 0x3f3f3f3f3f3f3f3fll;\nll n, m, l, cnt, ans, a[N][N], f[N][N], fa[N * N], g[N * N], sz[N * N], fa1[N * N], sz1[N * N];\nbool c[N][N];\nll dx[5] = {0, 1, -1, 0, 0};\nll dy[5] = {0, 0, 0, 1, -1};\nstruct nde{\n    ll x, y, w;\n}b[N * N];\nbool cmp(nde p, nde q) {\n    return p.w < q.w;\n}\nll get_fa(ll x){\n    if (fa[x] == x) {\n        return x;\n    }\n    else {\n        fa[x] = get_fa(fa[x]);\n        return fa[x];\n    }\n}\nvoid mrge(ll x, ll y) {\n    ll p = get_fa(x), q = get_fa(y);\n    if (p == q) {\n        return;\n    }\n    fa[q] = p;\n    g[p] += g[q];\n    g[q] = 0;\n    sz[p] += sz[q];\n    sz[q] = 0;\n}\nll slve(ll x, ll y) {\n    return (x - 1) * n + y;\n}\nstruct nde1 {\n    ll x, y, u, v;\n}B[N * N * 8];\nll slve1(ll x, ll y) {\n    return x * (n + 2) + y + 1;\n}\nll get_fa1(ll x) {\n    if (fa1[x] == x) {\n        return x;\n    }\n    else {\n        return get_fa1(fa1[x]);\n    }\n}\nvoid mrge1(ll x, ll y, ll u, ll v) {\n    ll p = get_fa1(x), q = get_fa1(y);\n    if (p == q) {\n        return;\n    }\n    if (sz1[p] < sz1[q]) {\n        swap(p, q);\n    }\n    ++cnt;\n    B[cnt].x = q;\n    B[cnt].y = fa1[q];\n    B[cnt].u = u;\n    B[cnt].v = v;\n    fa1[q] = p;\n    sz1[p] += sz1[q];\n    sz1[q] = 0;\n}\nvoid re_mrge1() {\n    fa1[B[cnt].x] = B[cnt].y;\n    --cnt;\n}\nset<ll> st;\nint main() {\n    scanf(\"%lld\", &n);\n    l = 0;\n    for (ll i = 1; i <= n; ++i) {\n        for (ll j = 1; j <= n; ++j) {\n            scanf(\"%lld\", &a[i][j]);\n            ++l;\n            b[l].x = i;\n            b[l].y = j;\n            b[l].w = a[i][j];\n        }\n    }\n    for (ll i = 1; i <= n; ++i) {\n        for (ll j = 1; j <= n; ++j) {\n            f[i][j] = 0;\n            c[i][j] = 0;\n        }\n    }\n    for (ll i = 1; i <= l; ++i) {\n        fa[i] = i;\n        g[i] = 0;\n        sz[i] = 1;\n    }\n    for (ll i = 0; i <= n + 1; ++i) {\n        a[0][i] = INF;\n        a[n + 1][i] = INF;\n    }\n    for (ll i = 0; i <= n + 1; ++i) {\n        a[i][0] = INF;\n        a[i][n + 1] = INF;\n    }\n    // \u9884\u5904\u7406\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\n    for (ll i = 1; i <= (n + 2) * (n + 2); ++i) {\n        fa1[i] = i;\n        sz1[i] = 1;\n    }\n    for (ll i = 0; i <= n; ++i) {\n        mrge1(slve1(0, i), slve1(0, i + 1), 0, 0);\n        mrge1(slve1(n + 1, i), slve1(n + 1, i + 1), 0, 0);\n    }\n    for (ll i = 0; i <= n; ++i) {\n        mrge1(slve1(i, 0), slve1(i + 1, 0), 0, 0);\n        mrge1(slve1(i, n + 1), slve1(i + 1, n + 1), 0, 0);\n    }\n    sort(b + 1, b + l + 1, cmp);\n    cnt = 0;\n    for (ll p = l; p >= 1; --p) {\n        ll x = b[p].x, y = b[p].y, w = b[p].w;\n        for (ll i = -1; i <= 1; ++i) {\n            for (ll j = -1; j <= 1; ++j) {\n                ll xx = x + i, yy = y + j;\n                if (!(xx == x && yy == y)) {\n                    if (a[xx][yy] > a[x][y]) {\n                        mrge1(slve1(x, y), slve1(xx, yy), x, y);\n                    }\n                }\n            }\n        }\n    }\n    ans = 0;\n    for (ll p = 1; p <= l; ++p) {\n        ll x = b[p].x, y = b[p].y, w = b[p].w;\n        // \u5c06\u8be5\u65b9\u683c\u548c\u4e0e\u5b83\u6709\u8fb9\u76f8\u8fde\u7684\u4e14\u9ad8\u5ea6\u5c0f\u4e8e\u5b83\u7684\u5408\u5e76\u5230\u540c\u4e00\u4e2a\u96c6\u5408\n        for (ll i = 1; i <= 4; ++i) {\n            ll xx = x + dx[i], yy = y + dy[i];\n            if (xx >= 1 && xx <= n && yy >= 1 && yy <= n) {\n                if (a[xx][yy] < a[x][y]) {\n                    mrge(slve(x, y), slve(xx, yy));\n                }\n            }\n        }\n        ll u = get_fa(slve(x, y));\n        // \u5220\u9664\u6d1e\n        if (f[x][y] >= 8) {\n            --g[u];\n        }\n        // \u66f4\u65b0f\u503c\n        f[x][y] = 0;\n        c[x][y] = 1;\n        for (ll i = -1; i <= 1; ++i) {\n            for (ll j = -1; j <= 1; ++j) {\n                ll xx = x + i, yy = y + j;\n                if (xx >= 1 && xx <= n && yy >= 1 && yy <= n) {\n                    if (!(xx == x && yy == y)) {\n                        if (!c[xx][yy]) {\n                            ++f[xx][yy];\n                        }\n                    }\n                }\n            }\n        }\n        // \u7edf\u8ba1\u589e\u52a0\u4e86\u591a\u5c11\u4e2a\u6d1e\n        while (cnt > 0 && (B[cnt].u == x && B[cnt].v == y)) {\n            re_mrge1();\n        }\n        st.clear();\n        for (ll i = -1; i <= 1; ++i) {\n            for (ll j = -1; j <= 1; ++j) {\n                ll xx = x + i, yy = y + j;\n                if (!(xx == x && yy == y)) {\n                    if (!c[xx][yy]) {\n                        ll q = get_fa1(slve1(xx, yy));\n                        st.insert(q);\n                    }\n                }\n            }\n        }\n        if (ll(st.size()) >= 1) {\n            g[u] += (ll(st.size()) - 1);\n        }\n        if (g[u] == 0) {\n            ans += sz[u];\n        }\n    }\n    printf(\"%lld\", ans);\n    return 0;\n}\n```\n",
        "postTime": 1675435617,
        "uid": 677124,
        "name": "panhongxuanyyds",
        "ccfLevel": 6,
        "title": "P5423 [USACO19OPEN]Valleys P\u9898\u89e3"
    },
    {
        "content": "\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u628a\u5728\u5c71\u8c37\u5185\u7684\u70b9\u79f0\u4e3a\u9ed1\u70b9\uff0c\u5176\u4ed6\u70b9\u79f0\u4e3a\u767d\u70b9\uff0c\u9ed1\u8fde\u901a\u5757\u5185\u90e8\u4e0d\u4e0e\u5916\u90e8\u8054\u901a\u7684\u767d\u70b9\u4e3a\u7a7a\u8154\u3002\n\n\u6027\u8d28\u4e00\uff1a\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6700\u5927\u503c\u7684\u5c71\u8c37\u5982\u679c\u5b58\u5728\u662f\u552f\u4e00\u7684\u3002\u56e0\u4e3a\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cb\uff0c\u76f8\u90bb\u7684\u6bd4\u4ed6\u5c0f\u7684\u70b9\u4e00\u5b9a\u9009\uff0c\u6bd4\u4ed6\u5927\u7684\u70b9\u4e00\u5b9a\u4e0d\u9009\u3002\n\n\u6027\u8d28\u4e8c\uff1a\u4e24\u4e2a\u4e0d\u540c\u7684\u9ed1\u8fde\u901a\u5757\u9664\u4e86\u5b83\u4eec\u5185\u90e8\u4ee5\u5916\u4e0d\u4f1a\u5f62\u6210\u7a7a\u8154\u3002\u8fd9\u662f\u7531\u9898\u76ee\u6027\u8d28\u51b3\u5b9a\u7684\uff0c\u6211\u4eec\u5728\u8003\u8651\u9ed1\u8fde\u901a\u5757\u65f6\u662f\u56db\u8054\u901a\uff0c\u800c\u767d\u8fde\u901a\u5757\u662f\u516b\u8054\u901a\u3002\u7b80\u5355\u753b\u4e00\u753b\u53ef\u4ee5\u53d1\u73b0\u65e0\u8bba\u8fd9\u4e24\u4e2a\u9ed1\u8fde\u901a\u5757\u6328\u5f97\u518d\u8fd1\u90fd\u4e00\u5b9a\u53ef\u4ee5\u88ab\u516b\u8054\u901a\u7684\u767d\u70b9\u5206\u5f00\uff08\u5982\u4e0b\u56fe\uff09\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/bc90agai.png)\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4ece\u5c0f\u5230\u5927\u52a0\u5165\u9ed1\u70b9\uff0c\u53d1\u73b0\u52a0\u5165\u4e86\u4e00\u4e2a\u9ed1\u70b9\u540e\u53ef\u80fd\u4f1a\u628a\u82e5\u5e72\u4e2a\u9ed1\u8fde\u901a\u5757\u8fde\u8d77\u6765\u3002\u53d1\u73b0\u8fd9\u6837\u53ef\u4ee5\u5f62\u6210\u4e00\u68f5\u6811\u7684\u7ed3\u6784\uff0c\u7c7b\u4f3c\u4e8e\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\u3002\n\n\u8fd9\u68f5\u6811\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u7531\u4e8e\u6211\u4eec\u8981\u770b\u767d\u70b9\u662f\u5426\u5168\u90e8\u8054\u901a\uff0c\u5982\u679c\u662f\u52a0\u5165\u9ed1\u70b9\u5219\u9700\u8981\u5220\u8fb9\uff0c\u4e0d\u597d\u5904\u7406\u3002\u800c\u5982\u679c\u662f\u52a0\u8fb9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u52a8\u6001\u7ef4\u62a4\u8fde\u901a\u5757\u4e2a\u6570\u4e86\u3002\u800c\u8fd9\u68f5\u6811\u5c31\u662f\u6211\u4eec\u8981\u8fdb\u884c\u7684\u52a0\u8fb9\u987a\u5e8f\u3002\n\n\u90a3\u4e48\u6211\u4eec\u904d\u5386\u5230\u4e86\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u628a\u5b83\u53d8\u6210\u767d\u70b9\uff0c\u8fde\u4e00\u5708\u8fb9\uff0c\u7ef4\u62a4\u51fa\u4e86\u8fde\u901a\u5757\u4e2a\u6570\u3002\u73b0\u5728\u6211\u4eec\u8981\u4ee5\u6b64\u8003\u8651\u5b83\u7684\u5b50\u6811\u662f\u4e0d\u662f\u5408\u6cd5\u7684\u5c71\u8c37\uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u7a7a\u8154\u3002\n\n\u5982\u679c\u662f\u5168\u5c40\u6ca1\u6709\u7a7a\u8154\uff0c\u6761\u4ef6\u663e\u7136\u662f\u8fde\u901a\u5757\u4e2a\u6570\u4e3a $1$\u3002\u4f46\u662f\u5176\u4ed6\u5b50\u6811\u5185\u90e8\u4e5f\u53ef\u80fd\u6709\u7a7a\u8154\uff0c\u4f1a\u9020\u6210\u5f71\u54cd\u3002\u4f46\u7531\u4e8e\u6027\u8d28\u4e8c\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u8003\u8651\u5b50\u6811\u4e24\u4e24\u4e4b\u95f4\u4f1a\u5f62\u6210\u7a7a\u8154\u3002\n\n\u53d1\u73b0\u5982\u679c\u4e00\u68f5\u5b50\u6811\u5185\u90e8\u6ca1\u6709\u7a7a\u8154\u7684\u8bdd\uff0c\u628a\u8fd9\u68f5\u5b50\u6811\u5168\u90e8\u53d8\u6210\u767d\u70b9\u540e\u8fde\u901a\u5757\u4e2a\u6570\u662f\u4e0d\u53d8\u7684\u3002\u4e8e\u662f\u6211\u4eec\u5728\u8fdb\u5165\u4e00\u68f5\u5b50\u6811\u65f6\u8bb0\u5f55\u4e0b\u5f53\u524d\u7684\u8fde\u901a\u5757\u4e2a\u6570\uff0c\u9012\u5f52\u5b8c\u540e\u5224\u65ad\u4e00\u4e0b\u548c\u5f53\u524d\u7684\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002\n\n\u9664\u4e86\u5e76\u67e5\u96c6\u5916\u590d\u6742\u5ea6 $O(N^2)$\u3002",
        "postTime": 1662711987,
        "uid": 304536,
        "name": "Talaodi",
        "ccfLevel": 0,
        "title": "P5423 [USACO19OPEN]Valleys P \u9898\u89e3"
    },
    {
        "content": "\u73b0\u6709\u7684\u90a3\u7bc7\u9898\u89e3\u770b\u8d77\u6765\u6709\u70b9\u8d39\u52b2\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u66f4\u76f4\u63a5\u7684\u505a\u6cd5\u3002\n\n\u5982\u679c\u4e0d\u9700\u8981\u6ca1\u6709\u6d1e\uff0c\u90a3\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u52a0\u70b9\u5e76\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\u5927\u5c0f\u5373\u53ef\u3002\u56e0\u6b64\uff0c\u53ea\u9700\u8981\u8003\u8651\u5982\u4f55\u5224\u65ad\u6d1e\u662f\u5426\u5b58\u5728\u3002\n\n\u6211\u4eec\u6ce8\u610f\u5230\u6d1e\u7684\u5224\u5b9a\u662f\u516b\u8fde\u901a\u7684\u3002\u8003\u8651\u4ee5\u6bcf\u4e2a\u683c\u5b50\u4e3a\u70b9\uff0c\u8fde\u8fb9\uff0c\u53d8\u6210\u5e73\u9762\u56fe\u3002\u5219\u6d1e\u5c31\u662f\u4e00\u4e2a\u5728\u56fe\u5f62\u5185\u90e8\u7684\u533a\u57df\u3002  \n\u90a3\u4e48\u6211\u4eec\u6839\u636e\u6b27\u62c9\u516c\u5f0f $V-E+F=2$\uff0c\u53ef\u5f97 $F = E - V + 2$\u3002\u800c\u8fd9\u6837\u5f97\u5230\u7684 $F$ \u5b9e\u9645\u4e0a\u5305\u62ec\u5916\u56f4\u7684\u4e00\u4e2a\u533a\u57df\u548c\u6240\u6709\u56db\u4e2a\u5df2\u8bbf\u95ee\u70b9\u6784\u6210\u7684\u6b63\u65b9\u5f62\u3002\u989d\u5916\u7ef4\u62a4\u4e4b\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(N^2 \\alpha(N^2))$\u3002",
        "postTime": 1675654415,
        "uid": 75840,
        "name": "deserter",
        "ccfLevel": 0,
        "title": "\u300cUSACO 2019 US Open Platinum\u300dValleys"
    }
]