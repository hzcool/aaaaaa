[
    {
        "content": "\u672c\u6587\u5c06\u540c\u6b65\u53d1\u5e03\u4e8e\uff1a\n\n- [\u6d1b\u8c37\u535a\u5ba2](https://www.luogu.com.cn/blog/Lu-Anlai/solution-p7028)\uff1b\n- [csdn](https://blog.csdn.net/Lu_Anlai/article/details/117381947)\uff1b\n- [\u535a\u5ba2\u56ed](https://www.cnblogs.com/Lu-Anlai/p/14824907.html)\uff1b\n- [\u7b80\u4e66](https://www.jianshu.com/p/052a4e936683)\u3002\n\n## \u9898\u76ee\n\n\u9898\u76ee\u94fe\u63a5\uff1a[\u6d1b\u8c37 P7028](https://www.luogu.com.cn/problem/P7028)\u3001[gym101612J](https://codeforces.com/gym/101612/problem/J)\u3002\n\n### \u9898\u610f\u6982\u8ff0\n\n\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u5217\uff0c\u7b2c $i$ \u4e2a\u5143\u7d20\u7684\u503c\u4e3a $a_i$\uff0c\u5176\u4e2d $a_i\\neq 0$\uff0c\u5b9a\u4e49 $P$ \u4e3a\u6570\u5217\u4e2d\u6240\u6709\u6b63\u6574\u6570\u7684\u548c\uff0c$N$ \u4e3a\u6240\u6709\u8d1f\u6574\u6570\u7684\u548c\u3002\u5b9a\u4e49\u4e00\u4e2a\u5143\u7d20\u7684\u91cd\u8981\u503c $w_i=\\begin{cases}\\dfrac{a_i}{P}&a_i>0\\\\\n\\dfrac{a_i}{|N|}&\\text{otherwise}\\end{cases}$\n\uff0c\u5e76\u5b9a\u4e49 $s_i$ \u4e3a\u524d $i$ \u4e2a\u5143\u7d20\u7684\u91cd\u8981\u503c\u4e4b\u548c\uff0c\u5373 $\\sum\\limits_{j=1}^iw_j$\u3002\n\n\u8bf7\u5148\u6c42\u51fa\u5f53\u524d\u6570\u5217\u4e2d\u4f7f $s_i$ \u6700\u5c0f\u7684 $i$\u3002\u7136\u540e\u6709 $m$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u67d0\u4e2a\u5143\u7d20\u6539\u6210\u4e00\u4e2a\u7ed9\u5b9a\u7684\u503c\uff0c\u8bf7\u5728\u6bcf\u6b21\u64cd\u4f5c\u540e\u6c42\u51fa\u5f53\u6570\u5217\u4e2d\u4f7f $s_i$ \u6700\u5927\u6700\u5c0f\u4e0b\u6807 $i$\u3002\n\n## \u9898\u89e3\n\n### \u5206\u6790\u6027\u8d28\n\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u6700\u5c0f\u7684 $i$ \u4f7f\u5f97\n\n$$s_i=\\max_{j=1}^n\\{s_j\\}$$\n\n\u8003\u8651\u5230 $P$ \u548c $|N|$ \u5747\u4e3a\u6b63\u6574\u6570\uff08\u82e5\u6709\u4e00\u9879\u662f $0$\uff0c\u5219\u663e\u7136\u7b54\u6848\u4e3a $n$\uff09\uff0c\u6211\u4eec\u7ed9\u7b49\u5f0f\u4e24\u8fb9\u540c\u65f6\u4e58\u4e0a $P\\cdot |N|$\uff0c\u5f97\u5230\n\n$$s_i\\cdot P\\cdot |N|=\\max_{j=1}^n\\left\\{s_j\\cdot P\\cdot |N|\\right\\}$$\n\n\u62c6\u5f00 $s_i$ \u7684\u5b9a\u4e49\u5f0f\uff0c\u5f97\u5230\n\n$$\\sum_{k=1}^iw_k\\cdot P\\cdot |N|=\\max_{j=1}^n\\left\\{\\sum_{k=1}^jw_k\\cdot P\\cdot |N|\\right\\}$$\n\n\u518d\u4ee3\u5165 $w_i$ \u7684\u5b9a\u4e49\u5f0f\uff0c\u5f97\u5230\u5355\u4e2a\u70b9\u7684\u503c\u4e3a\n\n$$\n\\begin{aligned}\n&\\sum_{k=1}^i\\left(\\frac{a_k[a_k<0]}{|N|}P|N|+\\frac{a_k[a_k>0]}{P}P|N|\\right)\\\\\n=&\\sum_{k=1}^i\\left(a_k[a_k<0]\\cdot P+a_k[a_k>0]\\cdot |N|\\right)\\\\\n=&\\sum_{k=1}^i\\left(a_k[a_k<0]\\cdot P+a_k[a_k>0]\\cdot |N|\\right)\\\\\n=&\\left(\\sum_{a_k<0,k\\leq i}^ia_k\\right)\\cdot P+\\left(\\sum_{a_k>0,k\\leq i}a_k\\right)\\cdot|N|\\\\\n=&-\\left(\\sum_{a_k<0,k\\leq i}^i-a_k\\right)\\cdot P+\\left(\\sum_{a_k>0,k\\leq i}a_k\\right)\\cdot |N|\\\\\n=&\\left(\\sum_{a_k>0,k\\leq i}a_k\\right)\\cdot |N|-\\left(\\sum_{a_k<0,k\\leq i}^i-a_k\\right)\\cdot P\n\\end{aligned}\n$$\n\n### \u56fe\u5f62\u8f6c\u6362\n\n\u6211\u4eec\u89c2\u5bdf\u4e0a\u5f0f\uff0c\u4e0d\u96be\u53d1\u73b0\u5b83\u4e0e\u53c9\u79ef\u7684\u5f62\u5f0f\u7c7b\u4f3c\u3002\n\n\u6211\u4eec\u4e0d\u59a8\u5b9a\u4e49\n\n$$\\vec{p}_i=\n\\begin{cases}\n(a_i,0),&a_i>0\\\\\n(0,-a_i),&a_i<0\n\\end{cases}\n$$\n\n\u518d\u5b9a\u4e49 $\\overrightarrow{\\texttt{sum}}_i=\\sum\\limits_{j=1}^i\\vec{p}_j$\n\n\u90a3\u4e48\n\n$$\\left(\\sum_{a_k>0,k\\leq i}a_k\\right)\\cdot |N|-\\left(\\sum_{a_k<0,k\\leq i}^i-a_k\\right)\\cdot P$$\n\n\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\n\n$$\\overrightarrow{\\texttt{sum}}_i\\times \\overrightarrow{\\texttt{sum}}_n$$\n\n\u73b0\u5728\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u7ed9\u5b9a\u4e00\u4e2a\u5411\u91cf $\\overrightarrow{\\texttt{sum}}_n$ \u548c\u4e00\u5806\u5411\u91cf $\\overrightarrow{\\texttt{sum}}_i$\uff0c\u6c42\u89e3\u5176\u53c9\u79ef\u7684\u6700\u5927\u503c\u3002\n\n\u6211\u4eec\u4e0d\u96be\u5f97\u5230\uff0c\u53c9\u79ef\u7684\u6700\u5927\u503c\u4e00\u5b9a\u5728 $\\overrightarrow{\\texttt{sum}}_i$ \u5bf9\u5e94\u7684\u4e0b\u51f8\u5305\u4e0a\u53d6\u5230\u3002\n\n### \u5206\u6790\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u73b0\u5728\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u4e0b\u51f8\u5305\uff0c\u6bcf\u6b21\u8be2\u95ee\u5728\u51f8\u5305\u4e0a\u4e8c\u5206\u5f97\u5230\u7b54\u6848\uff0c\u800c\u6bcf\u6b21\u4fee\u6539\u6211\u4eec\u9700\u8981\u66b4\u529b\u91cd\u6784\u51f8\u5305\u3002\n\n- \u8be2\u95ee\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(\\log_2n)$\uff1b\n- \u4fee\u6539\uff1a\u7531\u4e8e\u8fd9\u4e9b\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\u90fd\u5177\u6709\u5355\u8c03\u6027\uff0c\u65e0\u9700\u6392\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(n)$\u3002\n\n\u4e24\u79cd\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u5747\u8861\uff0c\u800c\u64cd\u4f5c\u6b21\u6570\u5374\u76f8\u540c\uff0c\u8fd9\u63d0\u793a\u6211\u4eec\u7528 **\u5e8f\u5217\u5206\u5757** \u7684\u65b9\u6cd5\u5747\u8861\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n### \u5e8f\u5217\u5206\u5757\n\n\u8003\u8651\u5bf9\u6bcf $B$ \u4e2a\u64cd\u4f5c\u5206\u4e00\u5757\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u53ea\u8003\u8651\u81ea\u5df1 \u5757\u5185\u7684\u6240\u6709\u5411\u91cf\u3002\n\n\u6839\u636e\u53c9\u79ef\u5206\u914d\u7387 $\\bold{a}\\times(\\bold{b}+\\bold{c})=\\bold{a}\\times\\bold{b}+\\bold{a}\\times\\bold{c}$\uff0c\u6211\u4eec\u4e0d\u96be\u5f97\u51fa\uff0c\u8fd9\u6837\u5728\u6bcf\u4e2a\u5757\u5185\u90e8\u67e5\u8be2\u5230\u7684\u6700\u5927\u503c\u4e00\u5b9a\u662f\u5757\u7684\u5c40\u90e8\u6700\u5927\u503c\u3002\n\n- \u4fee\u6539\uff1a\u6211\u4eec\u6bcf\u6b21\u4fee\u6539\u90fd\u66b4\u529b\u91cd\u6784\u4e00\u4e2a\u5757\u5185\u90e8\u7684\u4e0b\u51f8\u5305\uff0c\u5e76\u7ef4\u62a4\u524d\u7f00\u548c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(B+\\log_2n)$\uff1b\n- \u67e5\u8be2\uff1a\u6211\u4eec\u6bcf\u6b21\u67e5\u8be2\u90fd\u8be2\u95ee\u6240\u6709\u5757\u7684\u5c40\u90e8\u6700\u5927\u503c\uff0c\u518d\u901a\u8fc7\u5feb\u901f\u67e5\u8be2\u524d\u7f00\u548c\uff08\u6811\u72b6\u6570\u7ec4\uff09\u5f97\u5230\u771f\u5b9e\u6700\u5927\u503c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(\\frac{q}{B}\\log_2B+\\frac{q}{B}\\log_2n)$\u3002\n\n\u7406\u8bba\u5206\u6790\u5f97\u5230 $B=\\sqrt{n\\log_2n}$ \u65f6\u590d\u6742\u5ea6\u6700\u4f18\uff08\u4e3a\u4e86\u65b9\u4fbf\uff0c\u89c6 $\\log_2B$ \u4e0e $\\log_2n$ \u540c\u9636\uff0c$n$ \u4e0e $q$ \u540c\u9636\uff09\uff0c\u4e3a $\\Theta(n\\sqrt{n\\log_2n})$\u3002\n\n### \u53c2\u8003\u7a0b\u5e8f\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\ntypedef long long ll;\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nstatic char buf[1<<21],*p1=buf,*p2=buf;\n#define flush() (fwrite(wbuf,1,wp1,stdout),wp1=0)\n#define putchar(c) (wp1==wp2&&(flush(),0),wbuf[wp1++]=c)\nstatic char wbuf[1<<21];int wp1;const int wp2=1<<21;\ninline int read(void){\n\treg bool f=false;\n\treg char ch=getchar();\n\treg int res=0;\n\twhile(!isdigit(ch))f|=(ch=='-'),ch=getchar();\n\twhile(isdigit(ch))res=10*res+(ch^'0'),ch=getchar();\n\treturn f?-res:res;\n}\n\ninline void writeln(reg int x){\n\tstatic char buf[32];\n\treg int p=-1;\n\tif(!x) putchar('0');\n\telse while(x) buf[++p]=(x%10)^'0',x/=10;\n\twhile(~p) putchar(buf[p--]);\n\tputchar('\\n');\n\treturn;\n}\n\nstruct Vector{\n\tint x,y;\n\tinline Vector(reg int x=0,reg int y=0):x(x),y(y){\n\t\treturn;\n\t}\n\tinline Vector operator+(const Vector& a)const{\n\t\treturn Vector(x+a.x,y+a.y);\n\t}\n\tinline Vector operator-(const Vector& a)const{\n\t\treturn Vector(x-a.x,y-a.y);\n\t}\n\tinline Vector operator-(void)const{\n\t\treturn Vector(-x,-y);\n\t}\n};\n\ninline ll dot(const Vector& a,const Vector& b){\n\treturn 1ll*a.x*b.x+1ll*a.y*b.y;\n}\n\ninline ll cross(const Vector& a,const Vector& b){\n\treturn 1ll*a.x*b.y-1ll*a.y*b.x;\n}\n\ntypedef Vector Point;\n\nconst int MAXN=5e4+5;\nconst int MAXM=5e4+5;\nconst ll inf=0x3f3f3f3f3f3f3f3f;\n\nint n,m;\nint a[MAXN];\nint lef[MAXN],rig[MAXN],id[MAXN];\n\nstruct Node{\n\tint id;\n\tPoint p;\n\tinline Node(reg int id,const Point& p):id(id),p(p){\n\t\treturn;\n\t}\n};\n\nvector<Node> S[MAXN];\n\ninline void build(reg int id){\n\tS[id].clear();\n\tPoint sum(0,0);\n\tfor(reg int i=lef[id];i<=rig[id];++i){\n\t\tif(a[i]>0)\n\t\t\tsum=sum+Point(a[i],0);\n\t\telse\n\t\t\tsum=sum+Point(0,-a[i]);\n\t\twhile(S[id].size()>=2u&&cross(S[id].back().p-(S[id].end()-2)->p,sum-S[id].back().p)<0)\n\t\t\tS[id].pop_back();\n\t\tS[id].push_back(Node(i,sum));\n\t}\n\treturn;\n}\n\ninline int query(reg int id,const Vector& p){\n\treg int _l=0,_r=S[id].size()-1,_mid;\n\twhile(_l<_r){\n\t\t_mid=(_l+_r)>>1;\n\t\tif(cross(S[id][_mid+1].p-S[id][_mid].p,p)>0)\n\t\t\t_l=_mid+1;\n\t\telse\n\t\t\t_r=_mid;\n\t}\n\treturn S[id][_l].id;\n}\n\nnamespace BIT{\n\tinline int lowbit(reg int x){\n\t\treturn x&(-x);\n\t}\n\tint n;\n\tVector unit[MAXN];\n\tinline void Init(reg int s){\n\t\tn=s;\n\t\treturn;\n\t}\n\tinline void update(reg int id,const Vector& a){\n\t\tfor(reg int i=id;i<=n;i+=lowbit(i))\n\t\t\tunit[i]=unit[i]+a;\n\t\treturn;\n\t}\n\tinline Vector query(reg int id){\n\t\tVector res;\n\t\tfor(reg int i=id;i;i^=lowbit(i))\n\t\t\tres=res+unit[i];\n\t\treturn res;\n\t}\n}\n\nint main(void){\n\tn=read(),m=read();\n\tfor(reg int i=1;i<=n;++i)\n\t\ta[i]=read();\n\tBIT::Init(n);\n\tfor(reg int i=1;i<=n;++i)\n\t\tif(a[i]>0)\n\t\t\tBIT::update(i,Vector(a[i],0));\n\t\telse\n\t\t\tBIT::update(i,Vector(0,-a[i]));\n\treg int B=max(100,int(sqrt(n*log2(n)))),tot=(n+B-1)/B;\n\tpair<ll,int> ans=make_pair(inf,-1);\n\tfor(reg int i=1;i<=tot;++i){\n\t\tlef[i]=(i-1)*B+1,rig[i]=min(i*B,n);\n\t\tfor(reg int j=lef[i];j<=rig[i];++j)\n\t\t\tid[j]=i;\n\t\tbuild(i);\n\t\tVector sum=BIT::query(n);\n\t\tint pos=query(i,sum);\n\t\tans=min(ans,make_pair(-cross(BIT::query(pos),sum),pos));\n\t}\n\twriteln(ans.second);\n\twhile(m--){\n\t\tstatic int p,v;\n\t\tp=read(),v=read();\n\t\tif(a[p]>0)\n\t\t\tBIT::update(p,-Vector(a[p],0));\n\t\telse\n\t\t\tBIT::update(p,-Vector(0,-a[p]));\n\t\ta[p]=v;\n\t\tif(a[p]>0)\n\t\t\tBIT::update(p,Vector(a[p],0));\n\t\telse\n\t\t\tBIT::update(p,Vector(0,-a[p]));\n\t\tbuild(id[p]);\n\t\tans=make_pair(inf,-1);\n\t\tVector sum=BIT::query(n);\n\t\tfor(reg int i=1;i<=tot;++i){\n\t\t\tint pos=query(i,sum);\n\t\t\tans=min(ans,make_pair(-cross(BIT::query(pos),sum),pos));\n\t\t}\n\t\twriteln(ans.second);\n\t}\n\tflush();\n\treturn 0;\n}\n```\n",
        "postTime": 1622254905,
        "uid": 38502,
        "name": "agicy",
        "ccfLevel": 9,
        "title": "\u300c\u9898\u89e3\u300dNWRRC2017 Joker"
    }
]