[
    {
        "content": "\u9996\u5148\u6211\u4eec\u8981\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff0c\u5c31\u662f**\u6700\u5927\u7684**\u4f2a\u5149\u6ed1\u6570\u6240\u6709\u8d28\u56e0\u6570\u76f8\u540c\u3002\u5982\u679c\u4e00\u4e2a\u5408\u6cd5\u7684\u4f2a\u5149\u6ed1\u6570\u6709\u4e0d\u76f8\u540c\u7684\u8d28\u56e0\u6570\uff0c\u6211\u4eec\u628a\u5c0f\u7684\u8d28\u56e0\u6570\u5168\u90e8\u6362\u6210\u6700\u5927\u7684\uff0c\u9700\u8981\u6ee1\u8db3\u7684\u5f0f\u5b50$a_k^k\\leq N$\u4e2d\uff0c$k$\u6ca1\u6709\u53d8\u5316\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6570\u4ecd\u65e7\u5408\u6cd5\uff0c\u5374\u6bd4\u539f\u6765\u7684\u6570\u5927\u3002\n\n\u89c2\u5bdf\u5230\u8981\u6c42\u7684\u7b2c$K$\u5927\u7684$K$\u8f83\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u7528\u5806\u7ef4\u62a4\u3002\u6bcf\u6b21\u53d6\u51fa\u6700\u5927\u503c\uff0c\u5982\u679c\u8fd9\u4e2a\u6570\u6700\u5927\u8d28\u56e0\u6570\u7684\u5e42\u6b21\u5927\u4e8e$1$\uff0c\u90a3\u4e48\u628a\u5176\u4e2d\u4e00\u4e2a\u6700\u5927\u8d28\u56e0\u6570\u6362\u6210\u8f83\u5c0f\u7684\u6254\u8fdb\u5806\u91cc\u3002\u7531\u4e8e\u6700\u5927\u8d28\u56e0\u6570\u548c\u5206\u89e3\u7684\u9879\u6570$k$\u4e0d\u53d8\uff0c\u6240\u4ee5\u59cb\u7ec8\u6ee1\u8db3$a_k^k\\leq N$\u3002\u540c\u65f6\u4e5f\u5f88\u5bb9\u6613\u53d1\u73b0\u8fd9\u6837\u679a\u4e3e\u662f\u6ca1\u6709\u9057\u6f0f\u548c\u91cd\u590d\u7684\u3002\n\n$Code\\ Below:$\n```cpp\n#include<bits/stdc++.h>\n#define ts cout<<\"ok\"<<endl\n#define int long long\n#define hh puts(\"\")\n#define pc putchar\n//#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n//char buf[1<<21],*p1=buf,*p2=buf;\nusing namespace std;\nint n,k;\nint pr[105]={0,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,\n59,61,67,71,73,79,83,89,97,101,103,107,109,113,127};//31\u4e2a\nstruct node{\n    int val,p,mi,lim;//\u503c,\u6700\u5927\u8d28\u6570,\u5e42\u6b21,\u4e0b\u4e2a\u6570\u7684\u9650\u5236 \n    friend bool operator < (node A,node B){\n        return A.val<B.val;\n    }\n};\npriority_queue<node> q; \ninline int read(){\n    int ret=0,ff=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-') ff=-1;ch=getchar();}\n    while(isdigit(ch)){ret=ret*10+(ch^48);ch=getchar();}\n    return ret*ff;\n}\nvoid write(int x){if(x<0){x=-x,pc('-');}if(x>9) write(x/10);pc(x%10+48);}\nvoid writeln(int x){write(x),hh;}\nvoid writesp(int x){write(x),pc(' ');}\nsigned main(){\n    n=read(),k=read();\n    for(int i=1;i<=31;i++){\n        int now=pr[i];\n        for(int j=1;now<=n;j++,now=now*pr[i])\n            q.push((node){now,pr[i],j,i-1});\n    }\n    while(k--){\n        node now=q.top();\n        q.pop();\n        if(!k){\n            write(now.val);\n            return 0;\n        }\n        if(now.mi>1)\n            for(int i=1;i<=now.lim;i++)\n                q.push((node){now.val/now.p*pr[i],now.p,now.mi-1,i});\n    }\n    return 0;\n}\n```\n",
        "postTime": 1572220513,
        "uid": 27858,
        "name": "ycyaw",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4359 \u3010[CQOI2016]\u4f2a\u5149\u6ed1\u6570\u3011"
    },
    {
        "content": "\u524d\u8a00\uff1a\n\n\u8fd9\u662f\u4e00\u7bc7\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811\u7684\u9898\u89e3\u3002\n\n\u4e3a\u4ec0\u4e48\u9898\u89e3\u533a\u91cc\u5168\u662f\u66b4\u529b\uff0c\u8fd8\u5361\u4e0d\u6389\u2026\u2026\n\n\u7406\u8bba\u4e0a\u5982\u679c\u5f00\u5c0f N \uff0c\u5f00\u5927\u8d28\u6570\u4e2a\u6570\uff0c\u66b4\u529b\u5c31\u80fd\u5361\u7684\u6389\u3002\uff08\u4f46\u662f\u4e3a\u4ec0\u4e48\u4e0d\u5361\u5462\uff1f\uff09\n\n___\n\n\u9996\u5148\u53d1\u73b0 k \u5f88\u5c0f\uff0c\u6839\u636e\u8fd9\u79cd k \u5927\u9898\u4e00\u822c\u7684\u5957\u8def\uff0c\u90fd\u662f\u5bf9\u6570\u5206\u7c7b\uff0c\u7136\u540e\u6bcf\u4e00\u4e2a\u7c7b\u653e\u4e00\u4e2a\u8fdb\u5806\u4e2d\uff0c\u6bcf\u6b21\u53d6\u4e86\u4e4b\u540e\u653e\u8fd9\u7c7b\u4e2d\u53ef\u80fd\u7684\u6b21\u5927\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5982\u4f55\u5bf9\u6570\u5206\u7c7b\u3002\u5bf9\u4e8e\u672c\u9898\uff0c\u7531\u4e8e\u4e00\u4e2a\u7c7b\u8981\u8fdb\u884c\u5408\u6cd5\u6027\u5224\u5b9a\uff0c\u5373\u90a3\u4e2a $a_k^k\\leq N$\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5c06\u62e5\u6709\u76f8\u540c\u7684 $a_k,k$ \u7684\u6570\u5206\u4f5c\u4e00\u7c7b\u5373\u53ef\u3002\n\n\u90a3\u4e48\u5982\u4f55\u5f97\u5230\u6bcf\u4e00\u4e2a\u7c7b\u4e2d\u7684\u6570\u5462\uff1f\u8003\u8651**\u5bf9\u6570\u96c6 dp**\u3002\n\n\u6211\u4eec\u8bbe\u96c6\u5408 $f_{i,j}$ \u8868\u793a $k$ \u4e3a $i$\uff0c$a_k$ \u4e3a\u7b2c $k$ \u4e2a\u8d28\u6570\u7684\u7c7b\u4e2d\u6240\u6709\u7684\u6570\u3002\n\n\u6709\u8f6c\u79fb\uff1a$f_{i,j} = \\sum_{k=1}^j f_{i-1,k}\\times pr_j$\u3002\u5176\u4e2d $\\times$ \u8868\u793a\u5bf9\u8fd9\u4e2a\u6570\u96c6\u4e2d\u6bcf\u4e2a\u6570\u4e58\u4e0a\u4e00\u4e2a\u6570\uff0c$+$ \u8868\u793a\u96c6\u5408\u7684\u5e76\u3002\n\n\u76f4\u63a5\u8fd9\u4e48\u8f6c\u79fb\u662f\u7acb\u65b9\u590d\u6742\u5ea6\uff0c\u8003\u8651\u4f18\u5316\u3002\n\n\u6211\u4eec\u53c8\u8bbe $g_{i,j} = \\sum_{k=1}^j f_{i,k}$\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u6bcf\u6b21 $f_{i,j} = g_{i-1,j},g_{i,j} = g_{i-1,j}\\times pr_j + f_{i,j}$ \u5373\u53ef\u3002\u5c31\u964d\u4e86\u4e00\u7ef4\u590d\u6742\u5ea6\u4e0b\u6765\u3002\n\n\u73b0\u5728\u6211\u4eec\u8fd8\u6ca1\u6709\u786e\u5b9a\u7528\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u6765\u8868\u793a\u8fd9\u4e2a\u6570\u96c6 DP\uff0c\u4f46\u662f\u7531\u4e8e\u6700\u540e\u6c42\u7b54\u6848\u7684\u65f6\u5019\u9700\u8981 pop \u6700\u4f18\u89e3\uff0c\u63d2\u5165\u6b21\u4f18\u89e3\u2014\u2014\u8fd9\u663e\u7136\u662f\u5806\u5e94\u5f53\u505a\u7684\u4e8b\u60c5\u3002\n\n\u8fdb\u4e00\u6b65\u7684\uff0c\u7531\u4e8e\u8981\u652f\u6301\u5feb\u901f\u5408\u5e76\u96c6\u5408\u4e0e\u6253\u6807\u8bb0\uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u5de6\u504f\u6811\u3002\n\n\u518d\u8fdb\u4e00\u6b65\u7684\uff0c\u7531\u4e8e\u6211\u4eec\u8981\u5728\u5408\u5e76\u4e4b\u540e\u4fdd\u7559\u539f\u5148\u7684\u7248\u672c\uff0c\u6240\u4ee5\u8981\u7528\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\uff1a\n\n- \u6211\u4eec\u9996\u5148\u7528\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811\u5b8c\u6210\u6570\u96c6 Dp\uff0c\u7136\u540e\u5c06\u6bcf\u4e00\u4e2a\u5806\u7684\u5806\u9876\u63d2\u5165\u4e00\u4e2a\u5806\u4e2d\u3002\n\n- \u6bcf\u6b21\u53d6\u51fa\u5927\u5806\u4e2d\u7684\u5806\u9876\uff0c\u5c06\u8fd9\u4e2a\u5143\u7d20\u6240\u5728\u5806\u7684\u5806\u9876 pop \u6389\uff0c\u7136\u540e\u63d2\u5165\u65b0\u7684\u5806\u9876\u3002\n\n- \u5982\u6b64\u6267\u884c k \u6b21\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u7ec8\u7684\u7b54\u6848\u3002\n\n\u590d\u6742\u5ea6\uff1f\u5bf9\u4e0d\u8d77\uff0c\u6211\u65e0\u6cd5\u7ed9\u51fa\u4e00\u4e2a\u51c6\u786e\u7684\u590d\u6742\u5ea6\uff0c\u4f46\u65e0\u8bba\u5982\u4f55\u8fd9\u4e2a\u505a\u6cd5\u7edd\u5bf9\u6bd4\u66b4\u529b\u66f4\u503c\u5f97\u4fe1\u8d56\u3002\n\n___\n\n\u4ee3\u7801\uff1a\n\n\u8bf7\u6ce8\u610f\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811\u4e0b\u4f20\u6807\u8bb0\u7684\u5199\u6cd5\uff0c\u53c2\u7167\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811\u3002\n\n\u672c\u4eba\u901a\u8fc7\u62d9\u52a3\u7684\u624b\u6bb5\u91cd\u8f7d\u4e86\u5806\u7684\u8fd0\u7b97\u7b26\uff0c\u8fd9\u6837\u6570\u96c6 Dp \u90e8\u5206\u4f1a\u597d\u770b\u4e00\u70b9\u3002\u4f46\u662f\u8fd9\u5e76\u63a9\u76d6\u4e0d\u4e86\u8fd9\u4e2a\u4ee3\u7801\u4e11\u7684\u4e8b\u5b9e\u3002\n```cpp\n#include <queue>\n#include <cstdio>\ntypedef long long ll;\nconst int maxn = 5e5+5,maxpw = 65,maxpr = 35,pr[maxpr] = {0,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127};\ninline void swap(int &x,int &y){x ^= y ^= x ^= y;}\nll n,mul[maxn<<5],val[maxn<<5];\nint m,ch[maxn<<5][2],dist[maxn<<5],tot;\nvoid cp(int x,int to){dist[to] = dist[x],mul[to] = mul[x],val[to] = val[x],ch[to][0] = ch[x][0],ch[to][1] = ch[x][1];}\nvoid gmul(int &x,ll v){if(!x)return ;int px = x;x = ++tot,cp(px,x),mul[x] *= v,val[x] *= v;}\nvoid psd(int x){if(mul[x] ^ 1)gmul(ch[x][0],mul[x]),gmul(ch[x][1],mul[x]),mul[x] = 1;}\nint merge(int x,int y){\n\tif(!x || !y)return x+y;\n\tif(val[x] < val[y])swap(x,y);\n\tint now = ++tot;cp(x,now),psd(now),ch[now][1] = merge(ch[now][1],y);\n\tif(dist[ch[now][0]] < dist[ch[now][1]])swap(ch[now][0],ch[now][1]);\n\treturn dist[now] = dist[ch[now][1]] + 1,now;\n}\nll minn[maxpw][maxpr];\nstruct Rt{\n\tint rt;\n\tRt(int R=0):rt(R){};\n\tRt operator *(int v){int tmp=++tot;cp(rt,tmp),gmul(tmp,v);return tmp;}\n\tvoid pop(){psd(rt),rt = merge(ch[rt][0],ch[rt][1]);}\n\tvoid operator +=(Rt b){return rt = merge(rt,b.rt),void();}\n}f[maxpw][maxpr],g[maxpw][maxpr];\nstruct Sta{\n\tll val;Rt rt;\n\tSta(ll v=0,Rt R=Rt()):val(v),rt(R){};\n\tbool operator <(Sta b)const{return val<b.val;}\n};\nstd :: priority_queue<Sta> q;\nint legal[maxpw][maxpr];\nint main(){\n\tscanf(\"%lld %d\",&n,&m);\n\tfor(int j=1;j<=31;++j){\n\t\tll now = 1;\n\t\tfor(int i=1;;++i){\n\t\t\tif(n/now < pr[j])break;\n\t\t\tnow *= pr[j],legal[i][j] = 1;\n\t\t}\n\t}\n\tfor(int i=1;legal[1][i];++i)++tot,val[tot] = pr[i],mul[tot] = 1,g[1][i] = f[1][i] = Rt(tot),g[1][i] += g[1][i-1];\n\tfor(int i=2;i<=60;++i)\n\t\tfor(int j=1;legal[i][j];++j)\n\t\t\tg[i][j] = f[i][j] = g[i-1][j]*pr[j],g[i][j] += g[i][j-1];\n\tfor(int i=1;i<=60;++i)\n\t\tfor(int j=1;legal[i][j];++j)\n\t\t\tq.push(Sta(val[f[i][j].rt],f[i][j].rt));\n\twhile(1){\n\t\tSta u = q.top();\n\t\tq.pop(),u.rt.pop(),q.push(Sta(val[u.rt.rt],u.rt));\n\t\tif(!(--m))return printf(\"%lld\\n\",u.val),0;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1624627525,
        "uid": 114153,
        "name": "Sali\u0435ri",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 [CQOI2016]\u4f2a\u5149\u6ed1\u6570"
    },
    {
        "content": "\u65e2\u7136\u8981\u6c42\u6700\u5927\u7684\uff0c\u90a3\u6211\u4eec\u5bf9\u4e8e$128$\u4ee5\u5185\u7684\u6240\u6709\u8d28\u6570$p_i$\uff0c\u6c42\u51fa\u6700\u5927\u7684$k$\u4f7f$p_i^k\\le N$\u7136\u540e\u628a\u5b83\u4eec\u90fd\u653e\u5230\u4e00\u4e2a\u5927\u6839\u5806\u91cc\u9762\u3002\n\n\u7136\u540e\u53d6$K$\u6b21\uff0c\u6bcf\u6b21\u90fd\u628a\u6700\u5927\u7684\u62ff\u51fa\u6765\u3002  \n\u5047\u5b9a\u6b64\u65f6\u8be5\u6570\u7684\u503c\u4e3a$Val$\uff0c\u5b83\u7684\u6700\u5927\u8d28\u56e0\u6570\u4e3a$maxP$\uff0c\u6700\u5927\u8d28\u56e0\u6570\u6b21\u6570\u4e3a$k$\u3002  \n$$Val=maxP^k\\times other$$\n$other$\u6307\u7684\u662f\u9664\u4e86\u6700\u5927\u8d28\u56e0\u6570\u5916\u5176\u4ed6\u56e0\u6570\u7684\u79ef\n\n\u90a3\u4e48\u5982\u679c$k>1$\u5c31\u53ef\u4ee5\u628a\u5176\u4e2d\u4e00\u4e2a$maxP$\u6362\u4e3a$P,P<maxP$\uff0c\u5373\uff1a\n$$Val=maxP^{k-1}\\times P\\times other$$\n\u6216\u8005\u5199\u4f5c\n$$Val=Val\\div maxP\\times P$$\n\u628a\u5b83\u7ee7\u7eed\u52a0\u5165\u5806\u4e2d\uff0c\u4e14\u8be5\u6570\u7edd\u5bf9\u4e0d\u4f1a\u548c\u5806\u4e2d\u51fa\u73b0\u8fc7\u7684\u6570\u91cd\u590d\u3002   \n\u4e8e\u662f\u7ecf\u8fc7$k$\u6b21\u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u53d6\u51fa\u7b2c$k$\u5927\u7684\u4e86\u3002\n## $code$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline long long read()//\u5feb\u8bfb\n{\n    long long x=0,p=1;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')p=-1;c=getchar();}\n    while(c>='0'&&c<='9') {x=(x<<1)+(x<<3)+(c-48);c=getchar();}\n    return x*=p;   \n}\nlong long  n,k;//\u6570\u636e\u8303\u56f4\u5927\nint p[]={0,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,\n59,61,67,71,73,79,83,89,97,101,103,107,109,113,127};//\u6253\u8868128\u4ee5\u5185\u8d28\u6570\nstruct node//val\uff0cmaxp\uff0ck\u5982\u4e0a\uff0c\u800cnext\u4e3a\u4f7fp[i]<maxp\u6700\u5927\u7684i\n{\n    long long val;\n    int maxp,k,next;\n    friend bool operator <(node a,node b)\n    {\n        return a.val<b.val;\n    }\n};\npriority_queue<node>q;//\u5927\u6839\u5806\n\nint main()\n{\n    n=read(),k=read();//\u8bfb\u5165\n    for(int i=1;i<=31;i++)//\u679a\u4e3e\uff0c\u9009\u51fa\u53ea\u4ee5p[i]\u4e3a\u56e0\u6570\u7684\u6700\u5927\u7684\u4e0d\u5927\u4e8eN\u7684\u6570\n    {\n        long long now=p[i];\n        for(int j=1;now<=n;j++,now*=p[i])\n            q.push((node){now,p[i],j,i-1});\n    }\n    while(k--)//\u53d6\u7b2ck\u5927\n    {\n        node tmp=q.top();//\u53d6\u51fa\u5806\u9876\n        q.pop();\n        if(!k)//\u5df2\u7ecf\u53d6\u5230\u7b2ck\u5927\u4e86\uff0c\u8f93\u51fa\n        {\n            printf(\"%lld\",tmp.val);\n            system(\"pause\");\n            return 0;\n        }\n        if(tmp.k>1)//\u6700\u5927\u56e0\u6570\u7684\u6307\u6570\u5927\u4e8e1\n            for(int i=1;i<=tmp.next;i++)\n                q.push((node){tmp.val/tmp.maxp*p[i],tmp.maxp,tmp.k-1,i});\n        //\u679a\u4e3e\u6240\u6709P\u4f7fVal=Val/maxP*P\uff0c\u52a0\u5165\u5806\n    }\n    return 0;\n}\n```\n",
        "postTime": 1592639729,
        "uid": 115855,
        "name": "Yyxxxxx",
        "ccfLevel": 4,
        "title": "P4359 [CQOI2016]\u4f2a\u5149\u6ed1\u6570 \u9898\u89e3"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a[\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811](https://oi-wiki.org/ds/persistent-heap/#_1)\n\n~~\u7ec8\u4e8e\u627e\u5230\u4e00\u9053 k \u77ed\u8def\u4e4b\u5916\u7684\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811\u7684\u5e94\u7528\u4e86\uff01~~\n\n\u8003\u8651\u4ece\u5c0f\u5230\u5927\u8003\u8651 $\\Omega$ \u503c\u4e0d\u540c\u7684\u6570\u3002\u4e3a\u4e86\u65b9\u4fbf\u8ba8\u8bba\u9898\u76ee\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6761\u4ef6\uff0c\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u5728\u4e0a\u4e00\u4e2a\u7684\u57fa\u7840\u4e0a\u4e58\u4e0a\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u4e0a\u4e00\u4e2a\u8ba8\u8bba\u7684\u8d28\u6570\u7684\u8d28\u6570\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u60f3\u5230\u5bf9**\u96c6\u5408** dp\u3002\u8bbe $dp_{i, j}$ \u8868\u793a $\\Omega$ \u503c\u4e3a $i$ \u4e14\u6700\u5927\u8d28\u56e0\u6570\u4e3a $p_j$ \u7684\u6570\u7684**\u96c6\u5408**\u3002\u663e\u7136\uff0c$dp_{i, j} = p_j \\displaystyle\\sum_{k = 1}^j dp_{i - 1, k}$\uff0c\u5176\u4e2d\u4e58\u6cd5\u8868\u793a\u96c6\u5408\u4e2d\u6bcf\u4e2a\u6570\u90fd\u4e58\u4e0a\u67d0\u4e2a\u6570\uff0c\u52a0\u6cd5\u8868\u793a\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u3002\n\n\u524d\u7f00\u5e76\u96c6\u4f18\u5316\u540e\u534a\u90e8\u5206\u5373\u53ef\u3002\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6c42\u524d $K$ \u5927\u4e14 $K$ \u8f83\u5c0f\uff0c\u6211\u4eec\u76f4\u63a5\u7528**\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811**\u7ef4\u62a4\u5373\u53ef\u3002\n\n~~\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u4f1a\u7b97\u3002~~\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <queue>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef __int128 lll;\n\ntypedef struct {\n\tint ls;\n\tint rs;\n\tint dis;\n\tll mul;\n\tll val;\n} LeftistTreeNode;\n\ntypedef struct PriorityQueueNode_tag {\n\tll val;\n\tint id;\n\tPriorityQueueNode_tag(ll val_, int id_){\n\t\tval = val_;\n\t\tid = id_;\n\t}\n} PriorityQueueNode;\n\nconst int N = 59 + 7, M = 31, K = 999967 + 7;\nint id = 0;\nint dp[N][M + 7], prime[M + 7] = {0, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127};\nLeftistTreeNode tree[K];\npriority_queue<PriorityQueueNode> q;\n\nbool operator <(const PriorityQueueNode a, const PriorityQueueNode b){\n\treturn a.val < b.val;\n}\n\ninline ll log2(ll n){\n\tll ans = log2((double)n);\n\twhile ((1ll << ans) <= n) ans++;\n\treturn ans - 1;\n}\n\ninline lll quick_pow_with_max_val(lll x, ll p, ll max_val){\n\tlll ans = 1;\n\twhile (p){\n\t\tif (x > max_val) return max_val + 1;\n\t\tif (p & 1){\n\t\t\tans *= x;\n\t\t\tif (ans > max_val) return max_val + 1;\n\t\t}\n\t\tx *= x;\n\t\tp >>= 1;\n\t}\n\treturn ans;\n}\n\ninline void pushdown(int x){\n\tif (tree[x].ls != 0){\n\t\tint ls = ++id;\n\t\ttree[ls] = tree[tree[x].ls];\n\t\ttree[x].ls = ls;\n\t\ttree[ls].mul *= tree[x].mul;\n\t\ttree[ls].val *= tree[x].mul;\n\t}\n\tif (tree[x].rs != 0){\n\t\tint rs = ++id;\n\t\ttree[rs] = tree[tree[x].rs];\n\t\ttree[x].rs = rs;\n\t\ttree[rs].mul *= tree[x].mul;\n\t\ttree[rs].val *= tree[x].mul;\n\t}\n\ttree[x].mul = 1;\n}\n\nint merge(int x, int y){\n\tpushdown(x);\n\tpushdown(y);\n\tif (x == 0 || y == 0) return x + y;\n\tint ans = ++id;\n\tif (tree[x].val < tree[y].val) swap(x, y);\n\ttree[ans] = tree[x];\n\ttree[ans].rs = merge(tree[x].rs, y);\n\tif (tree[tree[ans].ls].dis < tree[tree[ans].rs].dis) swap(tree[ans].ls, tree[ans].rs);\n\ttree[ans].dis = tree[tree[ans].rs].dis + 1;\n\treturn ans;\n}\n\nint main(){\n\tint k;\n\tll n, m;\n\tcin >> n >> k;\n\tm = log2(n);\n\tid++;\n\ttree[id].mul = tree[id].val = 1;\n\tdp[0][1] = id;\n\tq.push(PriorityQueueNode(1, id));\n\tfor (register ll i = 1; i <= m; i++){\n\t\tint pre = 0;\n\t\tfor (register int j = 1; j <= M && quick_pow_with_max_val(prime[j], i, n) <= n; j++){\n\t\t\tpre = merge(pre, dp[i - 1][j]);\n\t\t\tid++;\n\t\t\ttree[id] = tree[pre];\n\t\t\tdp[i][j] = id;\n\t\t\ttree[id].mul *= prime[j];\n\t\t\ttree[id].val *= prime[j];\n\t\t\tq.push(PriorityQueueNode(tree[id].val, id));\n\t\t}\n\t}\n\tfor (register int i = 0; ; ){\n\t\tPriorityQueueNode cur = q.top();\n\t\tq.pop();\n\t\tif (++i == k){\n\t\t\tcout << cur.val;\n\t\t\tbreak;\n\t\t}\n\t\tpushdown(cur.id);\n\t\tif (tree[cur.id].ls != 0) q.push(PriorityQueueNode(tree[tree[cur.id].ls].val, tree[cur.id].ls));\n\t\tif (tree[cur.id].rs != 0) q.push(PriorityQueueNode(tree[tree[cur.id].rs].val, tree[cur.id].rs));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1642925678,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4359 \u3010[CQOI2016] \u4f2a\u5149\u6ed1\u6570\u3011"
    },
    {
        "content": "### \u5206\u6790\uff1a\n#### 1.\u56e0\u4e3a\u4f2a\u5149\u6ed1\u6570\u7684\u6700\u5927\u8d28\u56e0\u5b50\u8981\u5c0f\u4e8e128\uff0c\u6240\u4ee5\u5148\u6253\u51fa1~128\u4e2d\u8d28\u6570\u7684\u8868\uff0e\n#### 2. \u7136\u540e\u94a6\u5b9a\u4e00\u4e2a\u6700\u5927\u7684\u8d28\u6570\uff0c\u4e0d\u65ad\u66ff\u6362\u5373\u53ef\uff08\u4e22\u8fdb\u5927\u6839\u5806\u91cc\u9762\uff0c\u7136\u540e\u53d6\u51fa\u4e00\u4e2a\uff0c\u66ff\u6362\u5728\u4e22\u8fdb\u53bb\u5373\u53ef\uff09.\uff08\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u904d\u5386\u5230\u8fd9\u4e2a\u6570\u524d\u9762\u7684\u6240\u6709\u6bd4\u5b83\u5c0f\u7684\u6570\uff09\n#### 3. \u5177\u4f53\u6765\u8bf4\uff0c\u8bbe\u4e00\u4e2a\u56db\u5143\u7ec4[t,x,y,z]\u8868\u793a\u5f53\u524d\u7684\u603b\u4e58\u79ef\u4e3at\uff0cx\u4e3a\u6700\u5927\u7684\u8d28\u6570\uff0cy\u8868\u793a\u4e3ax\u7684\u591a\u5c11\u6b21\u65b9\uff0c\u6700\u540e\u4e00\u4e2az\u8868\u793a\u5f53\u524d\u80fd\u679a\u4e3e\u7684\u53f3\u754c\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define RN register int\ninline int read()\n{\n    int k=1;int x=0;\n    char c=getchar();\n    while ((c<'0'||c>'9')&&c!='-')c=getchar();\n    if(c=='-')\n    k=-1,c=getchar();\n    while(c>='0'&&c<='9')\n    x=(x<<3)+(x<<1)+c-'0',c=getchar();\n    return k*x;\n} \nll N;\nint K, p[] = {1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127};\nstruct Node\n{\n    ll t;\n    int x, y, z;\n};\nbool operator < (const Node &a, const Node &b)\n{\n    return a.t < b.t;\n}//\u5927\u6839\u5806\npriority_queue<Node> q;\nint main ()\n{\n    N=read(), K=read();\n    for(int i=1;i<=31;i++)\n    {\n        ll tmp = p[i];\n        for(RN j = 1; tmp <= N; ++j, tmp *= p[i]) \n            q.push((Node){tmp, p[i], j, i - 1}); \n    }\n    while(K--)\n    {\n        Node now = q.top();\n        q.pop();\n        if(!K) printf(\"%lld\\n\", now.t);//\u5982\u679c\u5230\u4e86\u7b2ck\u4e2a\uff0c\u5219\u8f93\u51fa\uff0e\n        else if(now.y > 1)//\u5982\u679c\u6307\u6570>1\uff0c\u5219\u628a\u5927\u8d28\u6570\u56e0\u5b50\u7528\u5c0f\u8d28\u6570\u56e0\u5b50\u4ee3\u66ff\uff0c\u904d\u5386\u6bd4\u5b83\u5c0f\u7684\u6570\n            for(RN i = 1; i <= now.z; ++i)\n                q.push((Node){now.t / now.x * p[i], now.x, now.y - 1, i});\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1553007171,
        "uid": 111487,
        "name": "\u9f99\u7fd4\u51e4\u7fe5",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4359 \u3010[CQOI2016]\u4f2a\u5149\u6ed1\u6570\u3011"
    },
    {
        "content": "\u8fd9\u9898\u65e2\u7136\u6ca1\u6709\u9898\u89e3\uff0c\u90a3\u4e48\u5c0f\u849f\u84bb\u6211\u5c31\u6765\u53d1\u4e00\u7bc7\u5427\n\n\u8bf4\u5b9e\u8bdd\u7b2c\u4e00\u6b21\u968f\u673a\u5230\u8fd9\u9053\u9898\uff0c\u611f\u89c9\u601d\u8def\u8fd8\u662f\u6df7\u4e71\u7684\uff0c\u770b\u5230\u90a3\u4e2ak\u6b21\u5c31\u8054\u60f3\u5230\u9ad8\u7cbe\u5e42\uff0c\u7136\u540e\u8fd9\u65f6\u673a\u623f\u5927\u4f6c\u8fc7\u6765\u770b\u4e86\u4e00\u773c\uff0c\u8fd9\u4e0d\u5c31\u662f\u53ef\u6301\u4e45\u5316\u5de6\u504f\u6811\u7ef4\u62a4\u6781\u503c\u5417\n\n\u4e00\u8138\u9ed1\u7ebf\u7684\u6211~~\u5e76\u4e0d\u77e5\u9053\u5de6\u504f\u6811~~\uff0c\u4e5f\u4e0d\u77e5\u9053\u53ef\u6301\u4e45\u5316\u662f\u4ec0\u4e48\u9ad8\u7ea7\u7684\u4e1c\u897f\uff0c\u4e8e\u662f\u5f00\u59cb\u5f00\u5fc3\u7684\u6253\u8d77\u4e86\u66b4\u529b\n\n\u9996\u5148\u770b\u4e00\u4e0b\u9898\u76ee\u6761\u4ef6\uff0c\u8d28\u6570\u6700\u5927\u4e0d\u80fd\u8d85\u8fc7128\uff0c\u90a3\u5c31\u76f4\u63a5\u6253\u51fa\u4e00\u5f20\u8868\u6765\uff0c\u65b9\u4fbf\n\n\u65e2\u7136\u4e0d\u80fd\u8d85\u8fc7N\uff0c\u90a3\u4e48\u5c31\u628a\u6bcf\u4e2a\u8d28\u6570\u7684\u5404\u6b21\u9010\u4e2a\u52a0\u5165\u5806\uff0c\u76f4\u5230\u4e0a\u9650\uff08\u53ef\u80fd\u975e\u5e38\u62d7\u53e3\uff09\u7136\u540e\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u5927\u7fa4\u6b22\u8131\u7684\u8d28\u6570\uff0c\u56e0\u4e3a\u662f\u8981\u6c42\u7b2cK\u5927\uff0c\u90a3\u4e48\u5e94\u8be5\u6bcf\u6b21\u90fd\u4ece\u5806\u4e2d\u53d6\u51fa\u6700\u5927\u7684\u503c\uff0c\u6362\u6389\u4e00\u4e2a\u4ed6\u7684\u8d28\u56e0\u5b50\uff0c\u5e76\u4e14\u4e58\u4e0a\u4e00\u4e2a\u6bd4\u4ed6\u5c0f\u7684\u8d28\u56e0\u5b50\u91cc\u9762\u6700\u5927\u7684\uff08\u53c8\u662f\u975e\u5e38\u62d7\u53e3\uff09\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5806\u91cc\u9762\u6ca1\u6709\u91cd\u590d\u7684\n\n\u8bc1\u660e\uff1a\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u641c\u7d22\u7684\u601d\u8def\uff0c\u6bcf\u6b21\u90fd\u7528\u7b2c\u4e00\u4e2a\u6bd4\u4ed6\u5c0f\u7684\u8d28\u6570\u6765\u66ff\u6362\u4ed6\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u641c\u7d22\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u5f80\u4e0b\u7684\u8fc7\u7a0b\uff0c\u56e0\u4e3a\u53ea\u53d6\u6bd4\u4ed6\u5c0f\u7684\u6570\uff0c\u5e76\u4e14\u521a\u5f00\u59cb\u5806\u91cc\u9762\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u8d28\u56e0\u6570\u662f\u552f\u4e00\u4e00\u5b9a\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0\u91cd\u590d\uff08\u597d\u5427\u6709\u70b9\u5570\u55e6\uff0c\u4f46\u662f\u4f60\u4eec\u770b\u61c2\u5c31\u597d\uff09\n\n\n\u4ee3\u7801\n```\n//Shikita\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nll k,n;\nint p[32]={1,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127};\nstruct node\n{\n    ll val;\n    int id,lst,nxt;\n    bool operator < (const node &a) const\n    {\n        return val<a.val;\n    }\n};\npriority_queue<node> q;\nint main()\n{\n    scanf(\"%lld%lld\",&n,&k);\n    for(int i=1;i<=31;i++)\n    {\n    \tint j=0;\n    \tll tmp=1;\n        for(;tmp<=n/p[i];tmp*=p[i],++j);\n        struct node x= {tmp,i,j-1,0};\n        q.push(x);\n    }\n    while(--k)\n    {\n        node x=q.top();q.pop();\n        if(x.id)\n        {\n        \tstruct node y={x.val/p[x.id]*p[x.id-1],x.id-1,1,x.lst-1};\n            q.push(y);\n        }\n        if(x.nxt)\n        {\n        \tstruct node y={x.val/p[x.id+1]*p[x.id],x.id,x.lst+1,x.nxt-1};\n            q.push(y);\n        }\n    }\n    node x=q.top();\n    printf(\"%lld\",x.val);\n    return 0;\n}\n```\n\u4ee3\u7801\u5f88\u4e11\uff0c\u591a\u591a\u5305\u6db5\uff0c\u5c0f\u849f\u84bb\u6211\u5c31\u5199\u5230\u8fd9\u91cc\u5566\n\n\u795d\u5927\u5bb6noip2018 RP++(\u6765\u81ea\u4e00\u4e2aZJ\u63d0\u9ad8\u7ec4\u6302\u6389\u521d\u8d5b\u7684\u849f\u84bb\u7684\u795d\u798f)",
        "postTime": 1540389987,
        "uid": 41887,
        "name": "Shikita",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4359 \u3010[CQOI2016]\u4f2a\u5149\u6ed1\u6570\u3011"
    }
]