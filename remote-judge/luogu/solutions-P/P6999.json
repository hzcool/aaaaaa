[
    {
        "content": "## Description\n\n\u7ed9\u4e00\u4e9b\u5355\u8bcd\uff0c\u8981\u6c42\u5efa\u4e00\u68f5\u8282\u70b9\u6700\u5c11\u7684\u5b57\u5178\u6811\uff0c\u4f7f\u5b57\u5178\u5e8f\u4e2d\u5305\u542b\u7ed9\u5b9a\u6240\u6709\u7684\u5355\u8bcd\uff08\u5355\u8bcd\u8def\u5f84\u5728\u6811\u4e0a\u51fa\u73b0\u8fc7\uff09\u3002\n\n## Solution\n\n\u82e5 $a$ \u662f $b$ \u7684\u5b50\u4e32\uff0c\u90a3\u4e48 $b$ \u7684\u9650\u5236\u5f3a\u4e8e $a$\uff0c$a$ \u53ef\u4ee5\u5220\u53bb\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e24\u4e24\u4e0d\u5305\u542b\u7684\u5355\u8bcd\u96c6\u3002\n\n\u8003\u8651\u5982\u679c\u8981\u628a\u5355\u8bcd $x$ \u63d2\u5165\u5230\u5f53\u524d\u5b57\u5178\u5e8f\uff0c\u53ef\u4ee5\u627e\u4e00\u4e2a\u5305\u542b $x$ \u6700\u957f\u524d\u7f00\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u53ef\u4ee5\u6dfb\u52a0\u5c3d\u91cf\u5c11\u7684\u540e\u7f00\u51d1\u6ee1\u6574\u4e2a\u5355\u8bcd\uff0c\u5e76\u4e14\u8fd9\u6b65\u5e76\u4e0d\u5f71\u54cd\u540e\u7eed\u5355\u8bcd\u52a0\u5165\uff0c\u56e0\u4e3a\u5b57\u5178\u6811\u80fd\u8868\u793a\u7684\u4e32\u8fd8\u662f\u4e00\u6837\uff0c\u56e0\u6b64\u662f\u72ec\u7acb\u7684\u3002\u5e76\u4e14 $x$ \u6700\u957f\u524d\u7f00\u4e00\u5b9a\u4ec5\u5c5e\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5426\u5219\u5373\u8de8\u8d8a\u4e86\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u5373 $x$ \u5305\u542b\u90a3\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u79cd\u60c5\u51b5\u5df2\u7ecf\u53bb\u6389\u4e86\u3002\n\n\u56e0\u6b64\u5bf9\u4e8e\u4e24\u4e2a\u5355\u8bcd $a, b$\uff0c\u53ef\u4ee5\u8bbe $w(a, b)$ \u4e3a\u628a $b$ \u63a5\u5728 $a$ \u540e\u9762\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u5373 $len_b - $ $b$ \u7684\u524d\u7f00\u4e0e $a$ \u80fd\u5339\u914d\u7684\u6700\u957f\u957f\u5ea6\uff0c\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5 KMP \u5feb\u901f\u6c42\uff0c\u4e0d\u8fc7\u6b64\u9898\u6ca1\u6709\u5fc5\u8981\u3002\n\n\u628a\u8fd9\u4e2a\u4e1c\u897f\u770b\u6210\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8fd9\u6837\u6784\u6210\u4e00\u4e2a\u8054\u901a\u7684\u5b57\u5178\u6811 $\\Leftrightarrow$ \u8be5\u56fe\u8054\u901a\u3002\n\n\u679a\u4e3e\u6839\uff0c\u6c42\u6700\u5c0f\u6811\u5f62\u56fe\u5373\u53ef\u3002 \n\n\u8fd9\u9898\u8fd8\u8981\u8bb0\u5f55\u65b9\u6848\uff0c\u8003\u8651\u6731\u5218\u7b97\u6cd5\u7684\u5b9a\u4e49\uff0c\u7f29\u70b9\u7684\u65b0\u8fb9\u9009\u62e9\u7684\u610f\u4e49\u662f\u9009\u62e9\u8fd9\u6761\u8fb9\uff0c\u53bb\u6389\u539f\u6765\u7684\u5165\u8fb9\u3002\u6bcf\u4e00\u5c42\u6bcf\u79cd\u65b0\u8fb9\u7684\u9009\u62e9\u5bf9\u5e94\u90091\u67401\uff0c\u56e0\u6b64\u6bcf\u6b21\u65b0\u8fb9\u53ef\u4ee5\u65b0\u5f00\u4e00\u4e2a\u7f16\u53f7\uff0c\u5728\u6700\u7ec8\u72b6\u6001\uff0c\u8003\u8651\u6bcf\u4e2a\u9009\u62e9\u7f16\u53f7\u5bf9\u5e94\u4e0a\u4e00\u5c42\u9009\u62e9\u4e0d\u9009\u54ea\u4e24\u6761\u8fb9\u5373\u53ef\u3002\u628a\u8fb9\u5f04\u51fa\u6765\u4e4b\u540e\uff0c\u9700\u8981\u6784\u9020\u5b57\u5178\u6811\uff0c\u8fd9\u91cc\u6ce8\u610f\u6bcf\u4e2a\u70b9\u53ef\u80fd\u4ee3\u8868\u82e5\u5e72\u4e32\u7684\u67d0\u4e2a\u4e0b\u6807\uff0c\u800c\u8fb9\u7684\u542b\u4e49\u662f\u67d0\u70b9\u8981\u5728\u67d0\u70b9\u7684\u67d0\u5904\u5f80\u4f38\uff0c\u6211\u662f\u628a\u8fb9\u9884\u5904\u7406\u6210\u6700\u9760\u8fd1\u6839\u7684\u70b9\u7684\u4f4d\u7f6e\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^4)$\u3002\n\n",
        "postTime": 1608220041,
        "uid": 161687,
        "name": "Remake",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6999 \u3010[NEERC2013]Dictionary\u3011"
    },
    {
        "content": "\u6784\u9020\u4e00\u5f20 $n+1$ \u4e2a\u70b9\u7684\u56fe\uff0c\u5176\u4e2d\u7b2c $n + 1$ \u4e2a\u70b9\u8868\u793a\u7a7a\u4e32 $s_{i+1}=\\epsilon$\uff0c\u4f7f\u5f97 $w(i,j)$ \u8868\u793a $s_j$ \u63a5\u5728 $s_i$ \u6240\u5728\u7684\u94fe\u4e0a\u7684\u6700\u5c0f\u82b1\u8d39\u3002\u5373 $|s_j|$ \u51cf\u53bb $s_j$ \u7684\u524d\u7f00\u4e2d\u4e3a $s_i$ \u5b50\u4e32\u7684\u6700\u957f\u957f\u5ea6\u3002\u6ce8\u610f\u5230\u6211\u4eec\u603b\u662f\u80fd\u5bf9\u4e32\u4e24\u4e24\u62fc\u63a5\u7ec4\u6210\u60f3\u8981\u7684\u6811\uff0c\u8bc1\u660e\u8003\u8651\u6700\u5c0f\u7684\u65b9\u6848\u4e3a $T$\uff0c\u6211\u4eec\u5bf9\u6240\u6709\u4e32\u627e\u5230\u5176\u5728 $T$ \u4e2d\u5bf9\u5e94\u7684\u4e32\u7684\u8d77\u70b9\u4ece\u6d45\u5230\u6df1\u52a0\u5165\u70b9\uff0c\u90a3\u4e48\u8981\u4e48\u5b83\u4e3a\u6839\uff0c\u8981\u4e48\u5fc5\u7136\u53ef\u4ee5\u627e\u5230\u4e00\u6761\u8986\u76d6\u4e86\u5b83\u524d\u7f00\u7684\u4e32\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8981\u6c42\u7684\u5b9e\u9645\u4e0a\u662f\u8fd9\u5f20\u56fe\u4ee5\u7a7a\u4e32\u4e3a\u6839\u7684\u6700\u5c0f\u6811\u5f62\u56fe\uff0c\u66b4\u529b\u8dd1\u6731\u5218\u7b97\u6cd5\u5373\u53ef\u3002\n\n\u7136\u540e\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u6784\u9020\u65b9\u6848\uff0c\u6211\u7684\u5b9e\u73b0\u662f\uff1a\u8bb0\u5f55\u9009\u53d6\u6bcf\u6761\u73af\u8fb9\u4e92\u65a5\u7684\u8fb9\u7684\u96c6\u5408 $\\operatorname {eRep}_i$\uff0c\u7136\u540e\u6309\u7167\u88ab\u7f29\u8d77\u6765\u7684\u65f6\u95f4\u987a\u5e8f\u5012\u5e8f\u52a0\u8fb9\uff0c\u82e5\u4e00\u6761\u73af\u8fb9\u7684\u4e00\u4e2a\u4e92\u65a5\u7684\u8fb9\u4ee5\u53ca\u88ab\u52a0\u4e86\uff0c\u90a3\u4e48\u5b83\u5c31\u4e0d\u7528\u52a0\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n^3)$\u3002\n\n```cpp\nconst int N = 50 + 5, M = 3000 + 5;\n\nstruct Edge {\n\tint u, v, w;\n} E[M];\nstd::vector <int> T, e_rep[M];\nbool e_chs[M];\nint n, m, W[N][N];\nstd::string s[N];\n\nint CheckSubstr(std::string t, std::string str) {\n\tif(t.empty()) return 0;\n\tint t_len = t.size(), str_len = str.size();\n\tfor(int i = 0; i + t_len <= str_len; ++i)\n\t\tif(str.substr(i, t_len) == t) return i;\n\treturn -1;\n}\n\nint idx[N], n_idx[N], in_id[N], pre[N], vis[N];\nint Choose(int i) {\n\tT.push_back(i);\n\treturn E[i].w;\n}\nint DMST(int r) {\n\tint res = 0, cur_n = n + 1;\n\tfor(int i = 1; i <= cur_n; ++i) idx[i] = i;\n\twhile(true) {\n\t\tint v_cnt = 0;\n\t\tfor(int i = 1; i <= cur_n; ++i)\n\t\t\tpre[i] = vis[i] = n_idx[i] = 0;\n\t\tfor(int i = 1; i <= m; ++i) {\n\t\t\tint u = idx[E[i].u], v = idx[E[i].v], w = E[i].w;\n\t\t\tif(v != idx[r] && u != v && (!pre[v] || w < E[in_id[v]].w))\n\t\t\t\tin_id[v] = i, pre[v] = u;\n\t\t}\n\t\tfor(int i = 1; i <= cur_n; ++i) {\n\t\t\tint u = i;\n\t\t\tfor(; u && !vis[u]; u = pre[u]) vis[u] = i;\n\t\t\tif(u != idx[r] && vis[u] == i) {\n\t\t\t\tn_idx[u] = ++v_cnt;\n\t\t\t\tres += Choose(in_id[u]);\n\t\t\t\tfor(int v = pre[u]; v != u; v = pre[v]) {\n\t\t\t\t\tn_idx[v] = v_cnt;\n\t\t\t\t\tres += Choose(in_id[v]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 1; i <= m; ++i) {\n\t\t\tint u = idx[E[i].u], v = idx[E[i].v];\n\t\t\tif(n_idx[u] != n_idx[v] && n_idx[v]) {\n\t\t\t\tE[i].w -= E[in_id[v]].w;\n\t\t\t\te_rep[in_id[v]].push_back(i);\n\t\t\t}\n\t\t}\n\t\tfor(int i = 1; i <= cur_n; ++i)\n\t\t\tif(!n_idx[i]) n_idx[i] = ++v_cnt;\n\t\tfor(int i = 1; i <= n + 1; ++i) idx[i] = n_idx[idx[i]];\n\t\tif(v_cnt == cur_n) {\n\t\t\tfor(int i = 1; i <= cur_n; ++i)\n\t\t\t\tif(i != idx[r]) res += Choose(in_id[i]);\n\t\t\tbreak;\n\t\t}\n\t\tcur_n = v_cnt;\n\t}\n\tstd::reverse(T.begin(), T.end());\n\tfor(int i : T) {\n\t\te_chs[i] = true;\n\t\tfor(int j : e_rep[i])\n\t\t\tif(e_chs[j]) {\n\t\t\t\te_chs[i] = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t}\n\treturn res;\n}\n\nint tr_cnt;\nstd::vector <int> nxt[N], pos_id[N];\nvoid Dfs(int u, int p) {\n\tif(p) {\n\t\tint su_siz = s[u].size(), k = su_siz - W[p][u],\n\t\t\tx = CheckSubstr(s[u].substr(0, k), s[p]);\n\t\tfor(int i = 0; i <= k; ++i)\n\t\t\tpos_id[u].push_back(pos_id[p][x + i]);\n\t\tfor(int i = k + 1, j = pos_id[p][x + k]; i <= su_siz; ++i) {\n\t\t\tprintf(\"%d %c\\n\", j, s[u][i - 1]);\n\t\t\tpos_id[u].push_back(j = ++tr_cnt);\n\t\t}\n\t} else {\n\t\tpos_id[u].push_back(++tr_cnt);\n\t\tprintf(\"0\\n\");\n\t}\n\tfor(int v : nxt[u]) {\n\t\tDfs(v, u);\n\t}\n}\nvoid Construct() {\n\tfor(int i : T) {\n\t\tif(!e_chs[i]) continue;\n\t\tint u = E[i].u, v = E[i].v;\n\t\tnxt[u].push_back(v);\n\t}\n\tDfs(n + 1, 0);\n}\n\nint main() {\n    std::cin >> n;\n    for(int i = 1; i <= n; ++i)\n        std::cin >> s[i];\n    for(int i = 1; i <= n; ++i)\n        for(int j = 1; j <= n; ++j) {\n            int k = 0, sj_siz = s[j].size();\n            for(; k + 1 <= sj_siz && ~CheckSubstr(s[j].substr(0, k + 1), s[i]); ++k);\n            k = sj_siz - k;\n            W[i][j] = k;\n            E[++m] = (Edge) { i, j, k };\n        }\n    for(int i = 1; i <= n; ++i) {\n        int si_siz = s[i].size();\n        E[++m] = (Edge) { n + 1, i, si_siz };\n        W[n + 1][i] = si_siz;\n    }\n    printf(\"%d\\n\", DMST(n + 1) + 1);\n    Construct();\n\treturn 0;\n}\n```\n",
        "postTime": 1642337120,
        "uid": 34238,
        "name": "zhylj",
        "ccfLevel": 9,
        "title": "P6999"
    }
]