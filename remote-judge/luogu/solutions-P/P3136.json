[
    {
        "content": "# \u672c\u6587\u7ea6\u5b9a\n\n\n$\\left\\vert S\\right\\vert$:\u96c6\u5408$S$\u7684\u5143\u7d20\u6570\u91cf\n\n\n$$\\{x\\vert p(x)\\}$$:\u7b26\u5408$p(x)$\u7684\u5143\u7d20\u7ec4\u6210\u7684\u96c6\u5408\n\n\n$\\land$:\u903b\u8f91\u4e0e\n\n\n$\\lor$:\u903b\u8f91\u6216\n\n\n# \u601d\u8def\n\n\n\u9996\u5148\u6839\u636e\u9898\u610f(\u4ee5\u53ca\u5b98\u65b9\u9898\u89e3)\uff0c\u4e00\u4e2a\u4ea4\u70b9\u5e94\u8be5\u53ea\u4f1a\u51fa\u73b0\u4e00\u6b21\uff0c\u6240\u4ee5\u53ea\u8981\u8003\u8651\u65f6\u95f4\u5728\u8303\u56f4\u5916\u7684\u4ea4\u70b9\u6570\u5373\u53ef\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0e\u7b2c$i$\u6761\u7ad6\u76f4\u7ebf\u6bb5\u76f8\u4ea4\u7684\u7ebf\u6bb5\n\n\n$$c_i=\\left\\vert\\{j\\vert x_j^l<x_i<x_j^r\\land y_i^l<y_j<y_i^r\\land\\left\\vert t_i-t_j\\right\\vert\\ge T\\}\\right\\vert$$\n\n\n\u5f53\u7136\uff0c\u8fd9\u4e2a\u53ef\u4ee5$O(N^2)$\u679a\u4e3e\u3002\u5982\u679c\u628a\u7edd\u5bf9\u503c\u62c6\u5f00\uff0c\u5c31\u53d8\u6210$t_j+T\\le t_i\\le t_j+T$\uff0c\u8fd9\u65f6\u5c31\u53d8\u6210\u7ecf\u5178\u7684\u4e09\u7ef4\u504f\u5e8f\u95ee\u9898\u4e86\uff0c\u53ef\u4ee5\u5728$O(N\\log^2N)$\u5185\u89e3\u51b3\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u7ad6\u76f4\u7ebf\u6bb5\u4f5c\u4e3a\u67e5\u8be2\u64cd\u4f5c\u3002\u6309\u7167x\u5750\u6807\u6392\u5e8f\uff0c\u7528\u626b\u63cf\u7ebf\u7ef4\u62a4\u6c34\u5e73\u7ebf\u6bb5$i$\uff0c\u4fdd\u5b58\u70b9$(t_i,y_i)$\u3002\u5bf9\u4e8e\u7ad6\u76f4\u7ebf\u6bb5$i$\uff0c\u67e5\u8be2$$\\left\\vert\\{(t_j,y_j)\\vert(t_j\\le t_i-T\\lor t_j\\ge t_i+T)\\land(y_i^l<y_j<y_i^r)\\}\\right\\vert$$\u5373\u4e3a\u7b54\u6848\u3002\u6ce8\u610f\uff0c\u7ebf\u6bb5\u7aef\u70b9\u76f8\u4ea4\u4e0d\u8ba1\u5165\u7b54\u6848\uff0c\u5728\u5904\u7406x\u5750\u6807\u65f6\u4e5f\u8981\u6ce8\u610f\u3002\n\n\n\u81f3\u4e8e\u6570\u636e\u7ed3\u6784\uff0c\u6211\u7528\u4e86\u5b98\u65b9\u7684\u6811\u72b6\u6570\u7ec4\u5957\u7ebf\u6bb5\u6811\u3002\n\n\n# \u4ee3\u7801\n\n\n```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int N = 100005, LOGN = 32;\nstruct node\n{\n    int sum, ls, rs;\n} tree[N * LOGN * 4];\nint cc;\n//\u7ebf\u6bb5\u6811\nvoid modify(int &id, int l, int r, int x, int val)\n{\n    if (!id)\n        id = ++cc;\n    if (l == r)\n        tree[id].sum += val;\n    else\n    {\n        int mid = (l + r) / 2;\n        if (x <= mid)\n            modify(tree[id].ls, l, mid, x, val);\n        else\n            modify(tree[id].rs, mid + 1, r, x, val);\n        tree[id].sum = tree[tree[id].ls].sum + tree[tree[id].rs].sum;\n    }\n}\nint query(int id, int l, int r, int L, int R)\n{\n    if (!id)\n        return 0;\n    if (L <= l && R >= r)\n        return tree[id].sum;\n    int mid = (l + r) / 2;\n    if (R <= mid)\n        return query(tree[id].ls, l, mid, L, R);\n    if (L > mid)\n        return query(tree[id].rs, mid + 1, r, L, R);\n    return query(tree[id].ls, l, mid, L, R) + query(tree[id].rs, mid + 1, r, L, R);\n}\nint n, t;\n//\u6811\u72b6\u6570\u7ec4\nstruct BIT\n{\n    int root[N];\n    void modify(int t, int x, int val)\n    {\n        for (; t <= n; t += t & -t)\n            ::modify(root[t], 0, 1e9, x, val);\n        //  ^  \u5168\u5c40\u540d\u79f0\u7a7a\u95f4\n    }\n    int query(int t, int l, int r)\n    {\n        int ans = 0;\n        for (; t; t -= t & -t)\n            ans += ::query(root[t], 0, 1e9, l, r);\n        return ans;\n    }\n} T;\nstruct event\n{\n    int x, y, t, val;\n    event() {}\n    event(int x, int y, int t, int val) : x(x), y(y), t(t), val(val) {}\n    bool operator<(const event &rhs) const\n    {\n        return x < rhs.x;\n    }\n} E[N * 2];\nstruct query_t\n{\n    int x, yl, yr, t;\n    query_t() {}\n    query_t(int x, int yl, int yr, int t) : x(x), yl(yl), yr(yr), t(t) {}\n    bool operator<(const query_t &rhs) const\n    {\n        return x < rhs.x;\n    }\n} Q[N];\nint main()\n{\n    ios::sync_with_stdio(false);\n    int px, py;\n    cin >> n >> t >> px >> py;\n    int en = 0, qn = 0;\n    for (int i = 2; i <= n; i++)\n    {\n        int x, y;\n        cin >> x >> y;\n        if (y == py)\n        {\n            E[++en] = event(min(px, x) + 1, y, i, 1);\n            E[++en] = event(max(px, x), y, i, -1);\n            //\u672c\u6765\u5e94\u8be5\u4e3a[l,r+1]\uff0c\u53bb\u9664\u7aef\u70b9\u4e3a[l+1,r]\n        }\n        else\n            Q[++qn] = query_t(x, min(py, y) + 1, max(py, y) - 1, i);\n        px = x;\n        py = y;\n    }\n    sort(E + 1, E + en + 1);\n    sort(Q + 1, Q + qn + 1);\n    long long ans = 0;\n    for (int i = 1, j = 1; i <= qn; i++)\n    {\n        for (; j <= en && E[j].x <= Q[i].x; j++)\n            T.modify(E[j].t, E[j].y, E[j].val);\n        if (Q[i].t - t > 0)\n            ans += T.query(Q[i].t - t, Q[i].yl, Q[i].yr);\n        if (Q[i].t + t <= n)\n            ans += T.query(n, Q[i].yl, Q[i].yr) - T.query(Q[i].t + t - 1, Q[i].yl, Q[i].yr);\n    }\n    cout << ans << endl;\n    return 0;\n}\n```",
        "postTime": 1505129871,
        "uid": 9406,
        "name": "zhzh2001",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3136 \u3010[USACO16JAN]\u5272\u8349\u573aMowing the Field\u3011"
    }
]