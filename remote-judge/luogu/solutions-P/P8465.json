[
    {
        "content": "## \u3010\u9898\u89e3\u3011\u8c03\u6574\u5723\u5251\r\n\r\n\u9996\u5148\uff0c\u8fd9\u662f\u4e2a\u6700\u5c0f\u5272\u6a21\u578b\u3002\r\n\r\n\u5efa\u5206\u5c42\u56fe\uff0c\u4e00\u5171 $k$ \u5c42\uff0c\u6bcf\u5c42 $n+1$ \u4e2a\u70b9 \uff0c $n$ \u6761\u8fb9\uff0c\u7b2c $i$ \u6761\u8fb9\u7684\u6743\u503c\u4e3a $a_i$ \uff0c\u5272\u6389\u8fd9\u6761\u8fb9\u8868\u793a\u8fd9\u6b21\u9009\u62e9\u4e86\u7b2c $i$ \u4e2a\u62a4\u7b26\u3002\r\n\r\n\u8003\u8651\u9650\u5236\uff0c\u5bf9\u4e8e\u9650\u5236 $(i,j,x,y)$ \u6211\u4eec\u4ece\u7b2c $i$ \u5c42\u7684\u7b2c $x+1$ \u4e2a\u70b9\u5411\u7b2c $j$ \u5c42\u7684\u7b2c $n-y+1$ \u4e2a\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a $INF$ \u7684\u8fb9\uff0c\u8fd9\u6837\u5982\u679c\u7b2c $i$ \u5c42\u4e0d\u5272\u6389\u524d $x$ \u6761\u8fb9\u4e2d\u7684\u4e00\u6761\u4e14\u7b2c $j$ \u5c42\u4e0d\u5272\u6389\u540e $y$ \u6761\u8fb9\u4e2d\u7684\u4e00\u6761\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e00\u6761\u8def\u5f84\uff0c\u4e0d\u7b26\u5408\u6700\u5c0f\u5272\u5b9a\u4e49\u3002\r\n\r\n\u6700\u540e\u4ece\u6e90\u70b9\u5411\u6bcf\u4e00\u5c42\u7684\u7b2c\u4e00\u4e2a\u70b9\u8fde $INF$ \u8fb9\uff0c\u4ece\u6bcf\u4e00\u5c42\u7684\u6700\u540e\u4e00\u4e2a\u70b9\u5411\u6c47\u70b9\u8fde $INF$ \u7684\u8fb9\uff0c\u5c31\u53ef\u4ee5\u8dd1 $MaxFlow-MinCut$ \u4e86\u3002\r\n\r\n\r\n\r\n\u90a3\u4e48\u6709\u4e86\u8fd9\u4e24\u70b9\u601d\u8def\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6837\u4f8b $1$ \u7684\u56fe\u5efa\u51fa\u6765\u3002\r\n\r\n![](https://cdn.luogu.com.cn/upload/image_hosting/uk35no05.png)\r\n\r\n\u4f46\u662f\u53d1\u73b0\u4ee5 $n \\le 10^5$ \uff0c $k,q \\le 10^4$ \u7684\u6570\u636e\u91cf\uff0c $n \\times k$ \u4e2a\u70b9\u8fde\u5efa\u90fd\u5efa\u4e0d\u51fa\u6765\u3002\r\n\r\n\r\n\r\n\u600e\u4e48\u4f18\u5316\u5462\uff1f\u4ece\u6700\u5927\u6d41\u7684\u89d2\u5ea6\u601d\u8003\u3002\u6211\u4eec\u53d1\u73b0\u539f\u56fe\u91cc\u6709\u5f88\u591a\u957f\u957f\u7684\u94fe\u3002\r\n\r\n![](https://cdn.luogu.com.cn/upload/image_hosting/fz8gdn81.png)\r\n\r\n\u8fd9\u4e9b\u94fe\u4ee3\u8868\u4e86 $1-n$ \u4e2d\u7684\u4e00\u4e9b\u533a\u95f4\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u53ea\u80fd\u5411\u4e00\u4e2a\u65b9\u5411\u6d41\u7684\u94fe\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u94fe\u7f29\u6210\u8fb9\uff0c\u8fb9\u7684\u5bb9\u91cf\u4e3a\u8fd9\u4e9b\u94fe\u6d41\u91cf\u4e2d\u7684\u6700\u5c0f\u503c\u3002\u7531\u4e8e\u662f\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u7528 $RMQ$ \u5373\u53ef\u3002\r\n\r\n\u5230\u4e86\u8fd9\u4e00\u6b65\u8fd8\u6ca1\u6709\u7ed3\u675f\u3002\r\n\r\n![](https://cdn.luogu.com.cn/upload/image_hosting/xm73rdlj.png)\r\n\r\n\u6709\u65f6\u5019\u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u5bfc\u81f4\u4e00\u6b21\u9009\u62e9\u9009\u53d6\u4e86\u4e24\u4e2a\u62a4\u7b26\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u628a\u6bcf\u4e00\u6761\u8fb9\u52a0\u4e0a\u4e00\u4e2a\u5927\u6570\uff08\u5982 $10^{10}$\uff09\uff0c\u4f7f\u5f97\u5272 $k+1$ \u6761\u8fb9\u7684\u60c5\u51b5\u4e25\u683c\u52a3\u4e8e\u5272 $k$ \u6761\u8fb9\u7684\u60c5\u51b5\u3002\r\n\r\n\u4e8e\u662f\u6211\u4eec\u83b7\u5f97\u4e86\u6700\u7ec8\u7684\u5efa\u56fe\u65b9\u5f0f\uff0c\u4ee5\u4e0b\u662f\u6837\u4f8b $3$ \u7684\u5efa\u56fe\u3002\r\n\r\n![](https://cdn.luogu.com.cn/upload/image_hosting/szc4gotx.png)\r\n\r\n\u5206\u6790\u4e00\u4e0b\u590d\u6742\u5ea6\uff1a\u4e00\u5f00\u59cb\u6709 $k$ \u6761\u8fb9\uff0c\u6bcf\u52a0\u4e00\u4e2a\u9650\u5236\u4f1a\u591a\u51fa $2$ \u4e2a\u70b9\u548c $3$ \u6761\u8fb9\uff0c\u8fb9\u548c\u70b9\u7684\u6570\u91cf\u7ea7\u90fd\u548c $k,q$ \u76f8\u540c\uff08\u5373 $10^4$\uff09 \uff0c\u8dd1 $Dinic$ \u53ef\u4ee5\u901a\u8fc7\uff0c\u5f53\u7136\u8981\u662f\u4f60\u89c9\u5f97\u8fd9\u4e2a\u7406\u8bba\u590d\u6742\u5ea6\u4e0d\u7b26\u7684\u8bdd\uff0c\u53ef\u4ee5\u6362\u66f4\u5feb\u7684\u7f51\u7edc\u6d41\u7b97\u6cd5\u3002\r\n\r\n\u9644\u4e0a $std$ \r\n\r\n```cpp\r\n\r\n#include<bits/stdc++.h>\r\n#define N 40010\r\n#define M 500010\r\n#define mk make_pair\r\nusing namespace std;\r\ntypedef pair<int,int> pii;\r\ntypedef long long ll;\r\nnamespace MaxFlow{\r\n\tint cnt=1,head[N],cur[N],dep[N],to[M],nxt[M];\r\n\tll val[M],INF=1e14;\r\n\tvoid insert(int u,int v,ll w){\r\n\t\tcnt++;\r\n\t\tto[cnt]=v;\r\n\t\tval[cnt]=w;\r\n\t\tnxt[cnt]=head[u];\r\n\t\thead[u]=cnt;\r\n\t}\r\n\tvoid ins(int u,int v,ll w) {\r\n\t\tinsert(u,v,w);\r\n\t\tinsert(v,u,0);\r\n\t}\r\n\tbool bfs(int ss,int tt) {\r\n\t\tqueue<int> q;\r\n\t    memset(dep,0,sizeof(dep));\r\n\t    q.push(ss),dep[ss]=1;\r\n\t    while(!q.empty()) {\r\n\t    \tint now=q.front();q.pop();\r\n\t    \tfor(int i=head[now]; i; i=nxt[i]) \r\n\t    \t    if(val[i]&&!dep[to[i]]) {\r\n\t    \t    \tdep[to[i]]=dep[now]+1;\r\n\t    \t    \tq.push(to[i]);\r\n\t    \t    }\r\n\t    }\r\n\t    return dep[tt]!=0;\r\n\t}\r\n    ll dfs(int now,ll dis,int tt) {\r\n    \tif(now==tt) return dis;\r\n    \tll res=0;\r\n    \tfor(int& i=cur[now]; i; i=nxt[i])\r\n    \t    if(val[i]&&dep[to[i]]==dep[now]+1) {\r\n    \t    \tll tmp=dfs(to[i],min(dis-res,val[i]),tt);\r\n    \t    \tres+=tmp,val[i]-=tmp,val[i^1]+=tmp;\r\n    \t    \tif(res==dis) return res;\r\n    \t    }\r\n    \tif(!res) dep[now]=-1;\r\n    \treturn res;\r\n    }\r\n\tll Dinic(int ss,int tt) {\r\n        ll res=0;\r\n        while(bfs(ss,tt)) {\r\n        \tmemcpy(cur,head,sizeof(head));\r\n        \twhile(ll tmp=dfs(ss,INF,tt)) res+=tmp;\r\n        }\r\n        return res;\t\t\r\n\t}\r\n}\r\ninline ll read() {\r\n\tll res=0,f=1;char ch=getchar();\r\n\twhile(!isdigit(ch)) f=ch=='-'?-1:1,ch=getchar();\r\n\twhile(isdigit(ch)) res=res*10+ch-'0',ch=getchar();\r\n\treturn f*res;\r\n}\r\nusing namespace MaxFlow; \r\nvector<int> cut[M];//\u5206\u5272\u70b9 \r\nint n,k,q,a[M],mn[M][22],lg[M];\r\nint RMQ(int l,int r) { \r\n\tint lg2=lg[r-l+1]; \r\n\treturn min(mn[l][lg2],mn[r-(1<<lg2)+1][lg2]);\r\n}\r\nint tot,s,t;\r\nmap<pii,int> mp;\r\npii b1[M],b2[M];\r\nint main()\r\n{\r\n\tn=read(),k=read(),q=read();s=0,t=40000;\r\n\tfor(int i=2; i<=n; i++) lg[i]=lg[i/2]+1;\r\n\tfor(int i=1; i<=n; i++) a[i]=mn[i][0]=read();\r\n\tfor(int d=1; d<=q; d++) {\r\n\t\tint i=read(),j=read(),x=read(),y=read();\r\n\t\tif(x==n||y==n) continue;//\u7279\u5224\uff0c\u5982\u679cx\u6216y\u4e3an\u8868\u793a\u5176\u4e2d\u4e00\u4e2a\u9009\u4e86\u4efb\u610f\u4e00\u4e2a\u90fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u76f8\u5f53\u4e8e\u6ca1\u6709\u6761\u4ef6 \r\n\t\tcut[i].push_back(x),cut[j].push_back(n-y);\r\n\t\tb1[d]=mk(i,x),b2[d]=mk(j,n-y);\r\n\t}\r\n\tfor(int i=1; i<=n; i++) sort(cut[i].begin(),cut[i].end());\r\n\tfor(int d=1; d<20; d++)//RMQ\r\n\t    for(int i=1; i+(1<<d)-1<=n; i++) mn[i][d]=min(mn[i][d-1],mn[i+(1<<(d-1))][d-1]);\r\n\tfor(int i=1; i<=k; i++) {\r\n\t\tcut[i].push_back(n);//\u6700\u540e\u4e00\u6bb5\u5373\u4f7f\u6ca1\u6709\u4e5f\u5f97\u7f29 \r\n\t\tint now=0,nid=++tot;\r\n\t\tins(s,nid,INF);\r\n\t\tfor(int j=0; j<cut[i].size(); j++) \r\n\t\t\tif(!j||(j>0&&cut[i][j]!=cut[i][j-1]))//\u6709\u53ef\u80fd\u6709\u91cd\u590d\u70b9 \r\n\t\t\t    ins(nid,++tot,RMQ(now+1,cut[i][j])+1e10),//\u9632\u6b62\u4e00\u6761\u8fb9\u9009\u591a\u6b21 \r\n\t\t\t\tnow=cut[i][j],nid=tot,mp[mk(i,cut[i][j])]=tot;\r\n\t\tins(nid,t,INF);\r\n\t} \r\n\tfor(int i=1; i<=q; i++) ins(mp[b1[i]],mp[b2[i]],INF);\r\n\tll ans=Dinic(s,t)-k*1e10;\r\n\tprintf(\"%lld\",ans);\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\n",
        "postTime": 1641719952,
        "uid": 124918,
        "name": "LinkyChristian",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011\u8c03\u6574\u5723\u5251"
    }
]