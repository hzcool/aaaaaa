[
    {
        "content": "\u8fd9\u79cd\u9898\u5927\u591a\u662f\u591a\u6e90\u591a\u6c47\u8dd1\u7f51\u7edc\u6d41\u3002\u5f80\u8fd4$a_n/b_n$\u6b21\u53ef\u4ee5\u770b\u505a\u53bb$a_n/b_n$\u6b21\uff0c\u76f4\u63a5\u628a\u5371\u6865\u80fd\u8d70\u7684\u6b21\u6570\u770b\u505a$1$\u3002\n\n\u5148\u4e0d\u8003\u8651\u522b\u7684\uff0c\u76f4\u63a5\u6309\u539f\u56fe\u5efa\u6a21\uff1a\u5371\u6865\u5efa\u53cc\u5411\u8fb9\u5bb9\u91cf\u4e3a$1$\uff0c\u666e\u901a\u6865\u5bb9\u91cf\u4e3a$INF$\uff1b\u7136\u540e\u6e90\u70b9$S$\u5411$a_1,b_1$\u5206\u522b\u8fde\u5bb9\u91cf$a_n,b_n$\u7684\u8fb9\uff0c$a_2,b_2$\u5206\u522b\u5411\u6c47\u70b9$T$\u8fde\u5bb9\u91cf$a_n/b_n$\u7684\u8fb9\u3002\n\n\u8fd9\u6837\u8dd1\u51fa\u6765\u7684\u6700\u5927\u6d41\u4f1a\u6709\u4e24\u4e2a\u95ee\u9898\uff08\u597d\u591a\u9898\u89e3\u90fd\u6ca1\u63d0\u95ee\u9898\u4e8c\uff1f\uff09\uff1a\n\n\u4e00\u662f\uff0c$b_2\\to T$\u7684$b_n$\u7684\u4e00\u90e8\u5206\u6d41\u91cf\u53ef\u80fd\u662f\u6765\u81ea$a_1$\u7684\uff0c\u540c\u7406$a_2\\to T$\u7684\u4e00\u4e9b\u6d41\u91cf\u53ef\u80fd\u6765\u81ea$b_1$\u3002\n\n\u4e8c\u662f\uff0c\u5371\u6865\u53ea\u80fd\u8d70\u4e00\u6b21\uff0c\u4f46\u8fd9\u6837\u53ef\u80fd\u4f1a\u6b63\u53cd\u8d70\u4e24\u6b21\u3002\n\n\u4e5f\u5c31\u662f\u4e0d\u80fd\u76f4\u63a5\u5224\u65ad\u662f\u5426\u6ee1\u6d41\u6765\u5224\u65ad\u662f\u5426\u53ef\u884c\u3002\u529e\u6cd5\u662f\uff0c\u4ea4\u6362$b_1,b_2$\uff08$S$\u8fde$b_2$\uff0c$b_1$\u8fde$T$\uff09\uff0c\u91cd\u65b0\u5efa\u56fe\uff0c\u518d\u8dd1\u6700\u5927\u6d41\u3002\u53ea\u6709\u4e24\u6b21\u5747\u6ee1\u6d41\u624d\u4e00\u5b9a\u5b58\u5728\u53ef\u884c\u65b9\u6848\u3002\n\n\u4ea4\u6362$b_1,b_2$\u540e\u518d\u5224\u65ad\u662f\u5426\u6ee1\u6d41\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u95ee\u9898\u4e00\u663e\u7136\u5df2\u7ecf\u88ab\u89e3\u51b3\u4e86\u53ef\u4ee5\u8df3\u8fc7\u4e0b\u9762\u8fd9\u6bb5\u3002\n\n> \u5982\u679c\u6ee1\u6d41\u4e14\u4ecd\u7136\u5b58\u5728\u95ee\u9898\u4e00\u90a3\u79cd\u60c5\u51b5\u5462\uff1f\u753b\u4e2a\u56fe\u3002\n\n> \u5047\u8bbe\u7b2c\u4e00\u6b21\u8dd1\u6700\u5927\u6d41\uff0c$a_1\\to b_2$\u7684\u6d41\u91cf\u4e3a$x$\uff0c\u90a3\u4e48$b_1\\to b_2$\u7684\u6d41\u91cf\u4e3a$b_n-x$\uff0c$b_1\\to a_2$\u7684\u6d41\u91cf\u4e5f\u662f$x$\uff0c$a_1\\to a_2$\u7684\u6d41\u91cf\u662f$a_n-x$\u3002\n\n> \u800c\u7b2c\u4e8c\u6b21\u8dd1\u6700\u5927\u6d41\uff0c\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c$a_1\\to a_2$\u548c$b_2\\to b_1$\u7684\u6d41\u91cf\u53ef\u4ee5\u4e0d\u53d8\uff0c\u8fd8\u662f$a_n-x,b_n-x$\u3002\u90a3\u4e48$a_1\\to b_2$\u548c$b_2\\to a_1$\u7684\u6d41\u91cf\u4e5f\u90fd\u8fd8\u662f$x$\u3002\n\n> \u800c\u8fd9\u4e24\u6b21\u8bf4\u660e\u4e86\u4ec0\u4e48\u5462\uff0c$a_1$\u53ef\u4ee5\u6d41\u5230$b_1$ $x$\u6d41\u91cf\uff0c\u8fd8\u53ef\u4ee5\u6d41\u5230$b_2$ $x$\u6d41\u91cf\uff0c\u540c\u65f6\u4e0d\u5f71\u54cd$a_1$\u4e0e$a_2$\uff0c$b_1$\u4e0e$b_2$\u4e4b\u95f4\u7684\u6d41\u91cf\u3002\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u5c06$a_1\\to b_1$\u7684\u6d41\u91cf\u53cd\u5411\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230$b_1\\to b_2$ $x$\u7684\u6d41\u91cf\u3002$b_1,b_2$\u4e4b\u95f4\u7684\u6d41\u5c31\u5408\u6cd5\u4e86\u3002\n\n> \u540c\u7406$a_1,a_2$\u4e4b\u95f4\u7684\u6d41\u4e5f\u5408\u6cd5\u3002\n\n> \u6240\u4ee5\u5982\u679c\u4ea4\u6362$b_1,b_2$\u540e\u4ecd\u6ee1\u6d41\uff0c\u4e00\u5b9a\u4e0d\u5b58\u5728\u95ee\u9898\u4e00\u90a3\u79cd\u60c5\u51b5\u3002\n\n\u5bf9\u4e8e\u95ee\u9898\u4e8c\uff0c~~\u597d\u591a\u9898\u89e3\u90fd\u6ca1\u6709\u5199\u4e5f\u8bb8\u662f\u592a\u663e\u7136\u4e86\uff1f~~\n\n> \u5047\u5982$a_1\\to a_2$\u6b63\u5411\u7ecf\u8fc7\u4e86\u4e00\u5ea7\u5371\u6865\uff0c\u800c$b_1\\to b_2$\u53cd\u5411\u7ecf\u8fc7\u4e86\u8fd9\u5ea7\u6865\uff0c\u90a3\u4e48\u4ea4\u6362$b_1,b_2$\uff0c\u4ee5$b_2$\u4e3a\u8d77\u70b9\u540e\uff0c$a_1\\to a_2,b_2\\to b_1$\u4e24\u6761\u8def\u5f84\u90fd\u662f\u6b63\u5411\u901a\u8fc7\u4e86\u8fd9\u6761\u8fb9\uff0c\u5c31\u53d7\u5230\u4e86\u6d41\u91cf\u7684\u9650\u5236\u3002\n\n> \u6240\u4ee5\u5982\u679c\u4ecd\u6ee1\u6d41\uff0c\u4e0d\u5b58\u5728\u95ee\u9898\u4e8c\u3002\n\n\u6240\u4ee5\u4e24\u904d\u6700\u5927\u6d41\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\u5c31\u4e0d\u9700\u8981\u653e\u4e86\u3002\u3002",
        "postTime": 1546387478,
        "uid": 39887,
        "name": "SovietPower\u2728",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3163 \u3010[CQOI2014]\u5371\u6865\u3011"
    },
    {
        "content": "\u9898\u89e3\u4e2d\u6ca1\u6709\u4e25\u8c28\u7684\u8bc1\u660e.jpg\n\n\u5148\u6765\u4e00\u4e2a\u7ed3\u8bba\uff1a\n\n\u9996\u5148\u5efa\u51fa\u7ed9\u5b9a\u7684\u7f51\u7edc\u6d41\u56fe\uff0c\u5371\u6865\u5bb9\u91cf\u4e3a 2\uff0c\u5176\u4ed6\u5bb9\u91cf\u4e3a $+\\infty$\n\n\u7136\u540e\u5efa\u51fa\u8d85\u7ea7\u6e90\u70b9 $s,t$\n\n\u63a5\u7740\u8fde $s\\to a_1$\uff0c\u5bb9\u91cf\u4e3a $2\\times a_n$\uff1b\u8fde $s\\to b_1$\uff0c\u5bb9\u91cf\u4e3a $2\\times b_n$\uff1b\u8fde $a_2\\to t$\uff0c\u5bb9\u91cf\u4e3a $2\\times a_n$\uff1b\u8fde $b_2\\to t$\uff0c\u5bb9\u91cf\u4e3a $2\\times b_n$\uff0c\u5e76\u8dd1\u4e00\u904d\u6700\u5927\u6d41\n\n\u63a5\u4e0b\u6765\u8fde $s\\to a_1$\uff0c\u5bb9\u91cf\u4e3a $2\\times a_n$\uff1b\u8fde $s\\to b_2$\uff0c\u5bb9\u91cf\u4e3a $2\\times b_n$\uff1b\u8fde $a_2\\to t$\uff0c\u5bb9\u91cf\u4e3a $2\\times a_n$\uff1b\u8fde $b_1\\to t$\uff0c\u5bb9\u91cf\u4e3a $2\\times b_n$\uff0c\u5e76\u8dd1\u4e00\u904d\u6700\u5927\u6d41\n\n\u82e5\u8fd9\u4e24\u904d\u6700\u5927\u6d41\u8dd1\u51fa\u6765\u7684\u7ed3\u679c\u5747\u4e3a $2\\times(a_n+b_n)$ \u5219\u7ed3\u679c\u4e3a ```Yes```\uff0c\u5426\u5219\u4e3a ```No```\n\n\u5982\u679c\u4f60\u5bf9\u8bc1\u660e\u4e0d\u611f\u5174\u8da3\uff0c**[code here](https://www.luogu.com.cn/paste/oqvwgllf)**\n\n\u7136\u540e\u6211\u4eec\u6765\u8bc1\u660e\u4e00\u4e0b\uff1a\n\n\u8bc1\u660e\u7684\u8fc7\u7a0b $\\LaTeX$ \u653e\u5728\u535a\u5ba2\u91cc\u597d\u50cf\u4f1a\u5d29\uff0c\u5c31\u653e\u5230\u526a\u5207\u677f\u91cc\u4e86\uff08\n\n**[here](https://www.luogu.com.cn/paste/tjpn1fjw)**",
        "postTime": 1596617511,
        "uid": 65681,
        "name": "UltiMadow",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3163 \u3010[CQOI2014]\u5371\u6865\u3011"
    },
    {
        "content": "\u200b\t\n\n\u8fd9\u4e2a\u9898\u8fd8\u86ee\u6709\u610f\u601d\u7684\uff0c\u603b\u7ed3\u4e0b\u6765\u5c31\u662f\u4e2a\u6700\u5927\u6d41\u7684\u53d8\u5f62\u3002  \n\u6700\u5927\u6d41\u5f88\u597d\u5206\u6790\uff0c\u56e0\u4e3a\u662f\u5f80\u8fd4\uff0c\u5728\u65e0\u5411\u56fe\u91cc\u9762\uff0c\u5371\u6865\u53ef\u4ee5\u8dd1\u4e24\u6b21\uff0c\u90a3\u4e48\u5c31\u628a\u5371\u6865\u4f5c\u4e3a\u6700\u5927\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u5efa\u8fb9\u8dd1\u6700\u5927\u6d41\uff0c\u5982\u679c\u6ee1\u6d41\u4e86\u8bf4\u660e\u53ef\u884c \u3002  \n\u4f3c\u4e4e\u8fd9\u6837\u5c31\u7ed3\u675f\u4e86\u3002\n\n#### \u4f46\u8fd9\u4e2a\u9898\u91cd\u70b9\u5728\u4e8e\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/0nlcpfzx.png)\n\n\u8fd9\u6837\u663e\u7136\u4ecd\u7136\u4f1a\u8dd1\u51fa\u6ee1\u6d41\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8003\u8651\u89e3\u51b3\u529e\u6cd5\u3002  \n\u8fd9\u91cc\u6211\u4eec\u5c31\u53ef\u4ee5\u91cd\u65b0\u5efa\u56fe\uff0c\u65b0\u7684\u56fe\u8ba9S\u8fde\u63a5 b2\uff0cT\u8fde\u63a5 b1\u3002    \n\n\u8bc1\u660e\u8fc7\u7a0b\u5982\u4e0b\uff08\u5927\u6982\uff09\n\n\u6211\u4eec\u5b9a$f(a,b)$\u4e3a a \u5230 b \u7684\u6d41\u91cf\uff0c\u56e0\u4e3a\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u4e5f\u662fb\u5230a\u7684\u6d41\u91cf\u3002  \n\n\u9996\u5148\u5982\u679c\u51fa\u73b0\u4e86\u5982\u56fe\u6240\u793a\u7684\u60c5\u51b5\uff0c\u8bf4\u660e\n$$\nf(a1,b2)=f(b1,a2)>0\n$$\n\u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u5e0c\u671b\u7684\u60c5\u51b5\u662f\n$$\nf(a1,a2)=an\\space f(b1,b2)=bn\n$$\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6b63\u5411\u5efa\u56fe\u548c\u53cd\u5411\u5efa\u56fe\uff0c\u4e24\u4e2a\u5bf9\u5e94\u6c47\u70b9\uff08\u7b2c\u4e00\u6b21\u7684 a2b2 \u548c\u7b2c\u4e8c\u6b21\u7684 a2b1\uff09\u7684\u6d41\u91cf\u5e94\u8be5\u5206\u522b\u4e3a\n\n$$\nf(a1,a2)+f(b1,a2)\\space f(b1,b2)+f(a1,b2)\n$$\n\n$$\nf(a1,a2)+f(b2,a2)\\space f(b1,b2)+f(a1,b1)\n$$\n\n\u663e\u7136\u5982\u679c\u53ea\u6709$f(a1,a2)$ $f(b1,b2)$\u90a3\u4e48\u5c31\u4f1a\u662f\u6211\u4eec\u671f\u671b\u7684\u7ed3\u679c\uff0c\u5982\u679c\u6b63\u53cd\u5411\u56fe\u6ca1\u5bf9\u70b9\u6709\u4e00\u4e2a\u9664\u4e86\u8fd9\u4e24\u9879\u4ee5\u5916\u7684\u9879\u4e0d\u5b58\u5728\u8fd8\u80fd\u8dd1\u5230\u6ee1\u6d41\u5c31\u8bf4\u660e\u662f\u671f\u671b\u7684\u60c5\u51b5\u3002  \n\n#### \u5269\u4e0b\u6211\u4eec\u6765\u8003\u8651\u6b63\u53cd\u5411\u56fe\u989d\u5916\u9879\u90fd\u5b58\u5728\u7684\u60c5\u51b5\n\n\u4ee5 a1 \u548c a2 \u70b9\u4e3a\u4f8b\uff0c\u5982\u679c\u989d\u5916\u9879\u5747\u5b58\u5728\uff0c\u5e76\u4e14\u80fd\u6ee1\u6d41\uff0c\u8bf4\u660e b1 \u548c b2 \u90fd\u6709\u8fde\u5411 a1 \u548c a2 \u7684\u8fb9\uff0c\u5e76\u4e14\u8fd9\u4e9b\u8fb9\u6700\u5c0f\u6d41\u91cf\u7684\u4e00\u5bf9\u4e5f\u53ef\u4ee5\u6ee1\u6d41\u3002  \n\n\u90a3\u4e48\u5c31\u8bf4\u660e\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u6761 a1->b1 \u6216\u8005 b2->a2 \u7684\u589e\u5e7f\u8def\uff0c\u5c31\u4e0d\u7528\u8fc7\u591a\u8003\u8651\uff0c\u5927\u6982\u662f\u4e0b\u56fe\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/xjhfw000.png)\n\n\uff08\u7531\u521a\u624d\u7684\u7ed3\u8bba\uff0c\u9ed1\u8272\u548c\u7ea2\u8272\u7684\u6d41\u91cf\u5404\u81ea\u76f8\u7b49\uff0c\u5206\u522b\u4e3a\u4e24\u6b21\u7684\u989d\u5916\u6d41\uff0c\u5982\u679c\u90fd\u8dd1\u51fa\u4e86\u6ee1\u6d41\u90a3\u4e48\u8bf4\u660ea1\u5230a2\u53ea\u9700\u8981\u5229\u7528\u4e00\u6761\u4e24\u6761\u8def\u6d41\u91cf\u6700\u5c0f\u7684\u90a3\u6761\u589e\u5e7f\u5c31\u53ef\u4ee5\u8fbe\u5230\u6ee1\u6d41\uff09\n\n\u8003\u8651\u4e86\u8fd9\u4e9b\u4ee5\u540e\uff0c\u4e24\u79cd\u60c5\u51b5\u4e0b\u53d1\u73b0\u6211\u4eec\u7684\u7ed3\u8bba\u90fd\u662f\u6210\u7acb\u7684\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u653e\u4e0b\u4ee3\u7801\n\n\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <queue>\nusing namespace std;\nconst int MAXN=1005,INF=1000005;\nint s=51,t=52;\nint n,a1,a2,an,b1,b2,bn,ans=0,sum;\nint hed[MAXN],to[MAXN*MAXN*2],nxt[MAX*MAXN*2],w[MAXN*MAXN*2],cnt=1;\nint dep[MAXN];\nchar c[MAXN][MAXN];\nqueue<int> que;\ninline void inst(int x,int y,int _w){\n\tnxt[++cnt]=hed[x];\n\tto[cnt]=y;\n\tw[cnt]=_w;\n\thed[x]=cnt;\n\tnxt[++cnt]=hed[y];\n\tto[cnt]=x;\n\thed[y]=cnt;\n\tw[cnt]=_w;\n}\ninline void clear(){\n\tmemset(hed,0,sizeof hed);\n\tcnt=1;\n\tans=0;\n}\ninline bool BFS(){\n\tmemset(dep,0,sizeof dep);\n\tdep[s]=1;\n\tque.push(s);\n\twhile(!que.empty()){\n\t\tint u=que.front();\n\t\tque.pop();\n\t\tfor(register int i=hed[u];i;i=nxt[i]){\n\t\t\tint v=to[i];\n\t\t\tif(!w[i]||dep[v])continue;\n\t\t\tdep[v]=dep[u]+1;\n\t\t\tque.push(v);\n\t\t}\n\t}\n\treturn dep[t];\n}\nint DFS(int u,int in){\n\tif(u==t||!in)return in;\n\tint out=0;\n\tfor(register int i=hed[u];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(!w[i]||dep[v]!=dep[u]+1)continue;\n\t\tint res=DFS(v,min(w[i],in));\n\t\tw[i]-=res;\n\t\tw[i^1]+=res;\n\t\tin-=res;\n\t\tout+=res;\n\t\tif(!in)return out;\n\t}\n\tif(!out)dep[u]=0;\n\treturn out;\n}\ninline void solve(){\n\tfor(register int i=1;i<=n;++i)\n\t\tfor(register int j=i+1;j<=n;++j){\n\t\t\tif(c[i][j]=='N')\n\t\t\t\tinst(i,j,INF);\n\t\t\telse if(c[i][j]=='O')\n\t\t\t\tinst(i,j,1);\n\t\t}\n\tinst(s,a1,an);\n\tinst(s,b1,bn);\n\tinst(a2,t,an);\n\tinst(b2,t,bn);\n\twhile(BFS())\n\t\tans+=DFS(s,INF);\n}\nint main(){\n\twhile(~scanf(\"%d%d%d%d%d%d%d\",&n,&a1,&a2,&an,&b1,&b2,&bn)){\n\t\t++a1;++b1;++a2;++b2;\n\t\tfor(register int i=1;i<=n;++i)\n\t\t\tfor(register int j=1;j<=n;++j)\n\t\t\t\tcin>>c[i][j];\n\t\tsum=0;\n\t\tclear();\n\t\tsolve();\n\t\tif(ans==an+bn)++sum;\n\t\tclear();\n\t\tswap(b1,b2);\n\t\tsolve();\n\t\tif(ans==an+bn)++sum;\n\t\tswap(b1,b2);\n\t\tif(sum==2)\n\t\t\tprintf(\"Yes\\n\");\n\t\telse\n\t\t\tprintf(\"No\\n\");\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1617033227,
        "uid": 206258,
        "name": "SDNetFriend",
        "ccfLevel": 7,
        "title": "P3163\u9898\u89e3"
    },
    {
        "content": "~~\u8c03\u4e86\u534a\u5929TLE\uff0c\u53d1\u73b0\u521d\u59cb\u5316\u7684\u4f4d\u7f6e\u6709\u95ee\u9898\u3002\uff08\u81ea\u95ed\uff09~~\n\n### \u9898\u610f:\n\u7ed9\u4f60\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u5c9b\u5c7f\u95f4\u6709\u6865\uff0c\u6709\u4e00\u4e9b\u6ca1\u6709\uff0c\u7136\u540e\u6865\u53c8\u6709\u4e00\u4e9b\u662f\u5371\u6865\uff0c\u53ea\u80fd\u8d70\u4e24\u6b21\u3002 ~~\uff08\u5371\u6865\u96be\u9053\u4e0d\u5e94\u8be5\u53ea\u80fd\u8d70\u4e00\u6b21\u5417\uff09~~ \n\n\u7136\u540e $Alice$ \u548c $Bob$ ~~\u4e24\u4e2a\u62c6\u6865\u5927\u961f\u961f\u5458\u6765\u4e86~~ \uff0c$Alice$\u5e0c\u671b\u5728$a_1$\u548c$a_2$\u4e24\u4e2a\u5c9b\u5c7f\u4e4b\u95f4\u5f80\u8fd4$a_n$\u6b21\uff0c$Bob$\u5e0c\u671b\u5728$b_1$\u548c$b_2$\u4e24\u4e2a\u5c9b\u5c7f\u4e4b\u95f4\u5f80\u8fd4$b_n$\u6b21\uff0c\u95ee\u4e24\u4e2a\u4eba\u7684\u5e0c\u671b\u80fd\u4e0d\u80fd\u6210\u529f\u3002 ~~\uff08\u53ef\u662f\u5e0c\u671b\u591a\u534a\u8981\u843d\u7a7a,Alice \u548c Bob\u7684\u4e5f\u4e0d\u4f8b\u5916...\uff09~~\n\n### \u5206\u6790\uff1a\n\u9898\u76ee\u8ba9\u6211\u4eec\u5224\u65ad\u662f\u5426\u8fd9\u4e2a\u56fe\u80fd\u5b8c\u6210$Alice$ \u548c $Bob$\u7684\u613f\u671b\u662f\u5426\u80fd\u6210\u529f\u3002\n\n\u5f80\u8fd4$a_n$\u6b21\u76f8\u5f53\u4e8e\u4ece$a_1$~$a_2$\u8d70$2 \\times a_n$\u6b21\uff0c$b_n$\u540c\u7406\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u660e\u4e86\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u6709\u5371\u6865\u5141\u8bb8\u8d70\u4e24\u6b21~~\u7684\u5947\u8469\u8bbe\u5b9a~~\u4e86\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u770b\u6210\u4ece$a_1$ ~ $a_2$ \u8d70$ a_n$\u6b21\uff0c$b_n$\u540c\u7406\uff0c\u4e14\u5371\u6865\u53ea\u80fd\u8d70\u4e00\u6b21\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5efa\u51fa\u4e00\u4e2a\u56fe\uff0c\u53d1\u73b0\u4ece$a_1$ ~ $a_2$ \u8d70 $a_n$ \u6b21\u76f8\u5f53\u4e8e\u4ece$a_1$ ~$a_2$\u7684\u6700\u5927\u6d41\uff0c\u4e14\u6d41\u91cf\u4e0d\u80fd\u5c0f\u4e8e$a_n$\uff0c$b_n$\u4f9d\u7136\u540c\u7406\u3002\n\n\u5230\u8fd9\u91cc\u96be\u9053\u8fd9\u9053\u9898\u5c31$A$\u4e86\u5417\uff1f\uff1f\uff1f\n\n**\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e9b\u6d41\u91cf\u5728$a_1$\uff0c$b_2$\u95f4\u5f80\u8fd4\uff0c\u4e00\u4e9b\u5728$b_1$,$a_2$\u4e2d\u5f80\u8fd4\uff0c\u603b\u4e4b\u778e \u6d41\u3002**\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u4ea4\u6362$b_1$\uff0c$b_2$\uff08$a_1$,$a_2$\u4e5f\u53ef\u4ee5\uff09\u518d\u8dd1\u4e00\u6b21\u6700\u5927\u6d41\uff0c\u5982\u679c\u6700\u5927\u6d41\u4e5f\u4e0d\u5c0f\u4e8e$a_n$,$b_n$\u5373\u53ef\u884c\u3002\n\n**\u90a3\u4e48\u4f1a\u4e0d\u4f1a\u51fa\u73b0\u4e24\u6b21\u90fd\u5728\u778e\u6d41\u5462\uff1f\uff1f\uff1f**\n\n\u62ff$nodgd$\u7684\u8bdd\u6765\u8bb2\uff1a**\u5982\u679c\u4e24\u6b21\u90fd\u5728\u778e\u6d41\uff0c\u90a3\u4e48\u4e00\u5b9a\u80fd\u5728\u56fe\u4e2d\u627e\u5230\u4e00\u4e2a\u4e0d\u5728\u778e\u6d41\u4e14\u5408\u6cd5\u7684\u6d41\u3002**\n\n### \u6ce8\u610f\uff1a\n\n- \u8fd9\u9053\u9898\u662f\u4ece$0$~$n-1$\u7f16\u53f7\uff0c\u6240\u4ee5\u9700\u8981$a_1,a_2,b_1,b_2+1$\n- \u6709\u591a\u7ec4\u6570\u636e\uff0c\u4e0d\u8981\u5fd8\u4e86\u521d\u59cb\u5316\n- \u6ce8\u610f\u8f93\u51fa\u662f\"Yes\"\u800c\u4e0d\u662f\"YES\" ~~(\u53ef\u80fd\u53ea\u6709\u6211\u4e00\u4e2a\u4eba\u72af\u4e86\u8fd9\u6837\u7684\u9519\uff09~~\n- \u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6e90\u70b9\u5230$a_1,b_1$ \u6c47\u70b9\u5230$a_2$,$b_2$\u7684\u8fb9\u6743\u8bbe\u4e3a$a_n$,$b_n$\u8fd9\u6837\u4fdd\u8bc1\u6700\u5927\u6d41\u4e0d\u4f1a\u8d85\u8fc7$a_n,b_n$\u6700\u540e\u53ea\u9700\u8981\u5224\u65ad\u662f\u5426$flow$\u662f\u5426\u7b49\u4e8e$a_n+b_n$\n- \u6b64\u56fe\u662f**\u65e0\u5411\u56fe**\n\n$code(isap):$\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int inf=1e9;\nconst int N=20005;\nconst int M=100005;\nchar ma[105][105];\nint n,a1,a2,an,b1,b2,bn,S,T;\nint Next[M],End[M],len[M],tot;\nint Last[N],_last[N],gap[N],dis[N];\ninline void cb(int x,int y,int z){\n    End[tot]=y,Next[tot]=Last[x],len[tot]=z,Last[x]=tot++;\n    End[tot]=x,Next[tot]=Last[y],len[tot]=z,Last[y]=tot++;\n}\nvoid bfs(){\n    for(int i=1;i<=T;i++) dis[i]=T,gap[i]=0,_last[i]=Last[i];\n    gap[0]=dis[T]=0;\n    queue<int> q;\n    q.push(T);\n    while(q.size()){\n        int x=q.front();\n        q.pop();\n        for(int i=Last[x];i;i=Next[i]){\n            int y=End[i];\n            if(dis[y]>dis[x]+1){\n                dis[y]=dis[x]+1;\n                q.push(y);\n            }\n        }\n    }\n    for(int i=1;i<=T;i++) gap[dis[i]]++;\n    return;\n}\nint isap(int x,int flow){\n    if(x==T) return flow;\n    int flow_now=0;\n    for(int &i=_last[x];i;i=Next[i]){\n        int y=End[i];\n        if(len[i] && dis[x]==dis[y]+1){\n            int f=isap(y,min(len[i],flow-flow_now));\n            flow_now+=f;\n            len[i]-=f;\n            len[i^1]+=f;\n            if(flow==flow_now || dis[S]==T) return flow_now;\n        }\n    }\n    gap[dis[x]]--;\n    if(!gap[dis[x]]) dis[S]=T;\n    dis[x]++;\n    gap[dis[x]]++;\n    _last[x]=Last[x];\n    return flow_now;\n}\nvoid _main(){\n    a1++,a2++,b1++,b2++;\n    S=n*n+1,T=S+1,tot=2;\n    for(int i=1;i<=n;i++)\n        scanf(\"%s\",ma[i]+1);\n    for(int i=1;i<=n;i++){\n        for(int j=i+1;j<=n;j++){\n            if(ma[i][j]=='O') cb(i,j,1);\n            else if(ma[i][j]=='N') cb(i,j,inf);\n        }\n    }\n    //\u5efa\u7acb\u6e90\u70b9\uff0c\u6c47\u70b9\u7684\u9650\u5236\u6d41\u91cf(\u8fb9\u6743)\n    cb(S,a1,an),cb(a2,T,an);\n    cb(S,b1,bn),cb(b2,T,bn);\n    int flow=0;\n    bfs();\n    while(dis[S]<T) flow+=isap(S,inf);\n    memset(Last,0,sizeof(Last));\n    if(flow!=an+bn){\n        puts(\"No\");\n        return;\n    }\n    tot=2;\n    for(int i=1;i<=n;i++){\n        for(int j=i+1;j<=n;j++){\n            if(ma[i][j]=='O') cb(i,j,1);\n            else if(ma[i][j]=='N') cb(i,j,inf);\n        }\n    }\n    cb(S,a1,an),cb(a2,T,an);\n    cb(S,b2,bn),cb(b1,T,bn);\n    bfs();\n    while(dis[S]<T) flow-=isap(S,inf);\n    if(flow!=0) puts(\"No\");\n    else puts(\"Yes\");\n    memset(Last,0,sizeof(Last));\n    return;\n}\nint main(){\n    while(scanf(\"%d%d%d%d%d%d%d\",&n,&a1,&a2,&an,&b1,&b2,&bn)!=EOF) _main();\n    return 0;\n}\n```",
        "postTime": 1582807395,
        "uid": 156001,
        "name": "TheAutumnGlory",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3163 \u3010[CQOI2014]\u5371\u6865\u3011"
    },
    {
        "content": "### \u601d\u8def\n\n\u9996\u5148\u8003\u8651\u5206\u5f00\u8dd1\u7f51\u7edc\u6d41\uff0c\u4e0d\u8fc7\u8fd9\u660e\u663e\u4e0d\u600e\u4e48\u5408\u7406\uff0c\u56e0\u4e3a\u67d0\u4e00\u6761\u8def\u5f84\u53ef\u80fd\u4f1a\u88ab\u91cd\u590d\u4f7f\u7528\u3002\n\n\u5982\u679c\u8bf4\uff0c\u6211\u4eec\u9700\u8981 $a_n$ \u6b21 \u4ece $a_1$ \u5230\u8fbe $a_2$\uff0c\u540c\u65f6\u9700\u8981 $b_n$ \u6b21\u4ece $b_1$ \u5230\u8fbe $b_2$\uff0c\u5219\u8bf4\u660e\uff0c\u4ece $a_1$ \u51fa\u53d1\u5230\u8fbe $a_2$ \u7684\u603b\u6b21\u6570\u4e4b\u548c $b_1$ \u5230\u8fbe $b_2$ \u7684\u603b\u6b21\u6570\u4e3a $a_n+b_n$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\uff0c\u4ece\u6e90\u70b9\u5411\u4e24\u4e2a\u8d77\u70b9 $a_1$ \u548c $b_1$ \u8fde\u8fb9\uff0c\u4ece\u4e24\u4e2a\u7ec8\u70b9 $a_2$ \u548c $b_2$ \u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u6839\u636e\u9898\u610f\u4e2d\u7684\u201c\u5f80\u8fd4\u201d\u8981\u6c42\uff0c\u53c8\u56e0\u4e3a\u5371\u6865\u6b63\u597d\u53ef\u4ee5\u901a\u8fc7 $2$ \u6b21\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1\u5728\u901a\u8fc7\u6b21\u6570\u9664\u4ee5 $2$ \u540e\uff0c\u4fdd\u8bc1\u6700\u5927\u6d41\u7684\u7b54\u6848\u4e3a $a_n + b_n$ \u5373\u53ef\u3002\n\n\u4e0d\u8fc7\u6b64\u65f6\u6d89\u53ca\u5230\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\u5efa\u56fe\uff0c\u5982\u679c\u662f\u4ece $a_1$ \u6d41\u5411 $b_2$ \u6216\u8005\u4ece $b_1$ \u6d41\u5411 $a_2$\uff0c\u8fd9\u660e\u663e\u4e0d\u5408\u7406\u3002\n\n\u6240\u4ee5\u6211\u4eec\u518d\u6765\u8003\u8651\u5982\u4f55\u89e3\u51b3\u8fd9\u4e00\u4e2a\u95ee\u9898\u3002\n\n\u89e3\u51b3\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u628a $b_1$ \u548c $b_2$ \u4ea4\u6362\u4e00\u4e0b\uff0c\u518d\u8dd1\u4e00\u6b21\u6700\u5927\u6d41\uff0c\u4fdd\u8bc1\u7b54\u6848\u4f9d\u7136\u4e3a $a_n + b_n$ \u5c31\u884c\u4e86\uff0c\u56e0\u4e3a\u7b2c\u4e00\u6b21\u7f51\u7edc\u6d41\u8dd1\u51fa\u6765\u7684\u90a3\u4e9b\u4e0d\u7b26\u5408\u60c5\u51b5\u7684\u7b54\u6848\u4e0d\u4f1a\u88ab\u7edf\u8ba1\u5230\u7b2c\u4e8c\u6b21\u7f51\u7edc\u6d41\u7684\u7b54\u6848\u4e2d\u6765\uff0c\u7b2c\u4e8c\u6b21\u7f51\u7edc\u6d41\u7684\u90a3\u4e9b\u4e0d\u7b26\u5408\u60c5\u51b5\u7684\u6d41\u91cf\u4e5f\u4e0d\u4f1a\u5728\u7b2c\u4e00\u6b21\u7f51\u7edc\u6d41\u7684\u7b54\u6848\u51fa\u73b0\u3002\n\nCode\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint sss=0;\n\tchar chh=getchar();\n\twhile(chh<'0'||chh>'9') chh=getchar();\n\twhile(chh>='0'&&chh<='9'){\n\t\tsss=sss*10+chh-'0';\n\t\tchh=getchar();\n\t}\n\treturn sss;\n}\ninline char get_char(){\n\tchar chh=getchar();\n\twhile(chh!='N'&&chh!='X'&&chh!='O') chh=getchar();\n\treturn chh;\n}\nint n,a1,a2,an,b1,b2,bn;\nint s,t;\nchar edge[55][55];\nint depth[55];\nint head[55],to[1000005],val[1000005],nxt[1000005],tot=1;\nvoid add(int u,int v,int w){\n\tto[++tot]=v;\n\tval[tot]=w;\n\tnxt[tot]=head[u];\n\thead[u]=tot;\n}\nvoid build(){\n\tmemset(head,-1,sizeof head); tot=1;\n\tfor(register int i=1;i<=n;i++){\n\t\tfor(register int j=i+1;j<=n;j++){\n\t\t\tif(edge[i][j]=='N'){\n\t\t\t\tadd(i,j,1e9); add(j,i,1e9);\n\t\t\t}\n\t\t\telse if(edge[i][j]=='O'){\n\t\t\t\tadd(i,j,1); add(j,i,1);\n\t\t\t}\n\t\t}\n\t}\n\tadd(s,a1,an); add(a1,s,an);\n\tadd(s,b1,bn); add(b1,s,bn);\n\tadd(a2,t,an); add(t,a2,an);\n\tadd(b2,t,bn); add(t,b2,bn);\n}\nbool bfs(){\n\tmemset(depth,0,sizeof depth); depth[s]=1;\n\tqueue<int> q; q.push(s);\n\twhile(!q.empty()){\n\t\tint x=q.front(); q.pop();\n\t\tfor(register int i=head[x];i;i=nxt[i]){\n\t\t\tint u=to[i];\n\t\t\tif(val[i]&&!depth[u]){\n\t\t\t\tdepth[u]=depth[x]+1;\n\t\t\t\tq.push(u);\n\t\t\t}\n\t\t}\n\t}\n\treturn depth[t];\n}\nint dfs(int now,int flow){\n\tif(now==t) return flow;\n\tint out_flow=0;\n\tfor(register int i=head[now];i&&flow;i=nxt[i]){\n\t\tint u=to[i];\n\t\tif(val[i]&&depth[u]==depth[now]+1){\n\t\t\tint tmp=dfs(u,min(val[i],flow));\n\t\t\tval[i]-=tmp; val[i^1]+=tmp;\n\t\t\tflow-=tmp; out_flow+=tmp;\n\t\t}\n\t}\n\tif(out_flow==0) depth[now]=0;\n\treturn out_flow;\n}\nint Dinic(){\n\tint ret=0;\n\twhile(bfs()) ret+=dfs(s,1e9);\n\treturn ret;\n}\nint main(){\n\twhile(scanf(\"%d%d%d%d%d%d%d\",&n,&a1,&a2,&an,&b1,&b2,&bn)!=EOF){\n\t\ta1++,a2++,b1++,b2++;\n\t\ts=0,t=n+1;\n\t\tfor(register int i=1;i<=n;i++){\n\t\t\tfor(register int j=1;j<=n;j++){\n\t\t\t\tedge[i][j]=get_char();\n\t\t\t}\n\t\t}\n\t\tbuild();\n\t\tif(Dinic()==an+bn){\n\t\t\tswap(b1,b2);\n\t\t\tbuild();\n\t\t\tif(Dinic()==an+bn) puts(\"Yes\");\n\t\t\telse puts(\"No\");\n\t\t}\n\t\telse puts(\"No\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1647594766,
        "uid": 367316,
        "name": "Foreverxxx",
        "ccfLevel": 0,
        "title": "P3163 [CQOI2014]\u5371\u6865 \u9898\u89e3"
    },
    {
        "content": "# \u5e7f\u544a\n\n[\u849f\u84bb\u306eblog](http://www.cnblogs.com/dedicatus545/p/8781597.html)\n\n# \u6b63\u6587\n\n\u8fd9\u9053\u9898\u4e2d\u60df\u4e00\u7684\u7279\u522b\u4e4b\u5904\uff0c\u5c31\u5728\u4e8e\u201c\u5371\u6865\u201d\u8fd9\u4e00\u4e2a\u53ea\u80fd\u8d70\u4e24\u6b21\u7684\u4e1c\u897f\n\n\u6211\u7684\u7b2c\u4e00\u60f3\u6cd5\u662f\u505a\u4e00\u4e2adp\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u53ea\u9700\u8981\u80fd\u4e0d\u80fd\u8d70\uff0c\u4e5f\u6ca1\u6709\u5fc5\u8981\n\n\u7f51\u7edc\u6d41\uff1f\u8c8c\u4f3c\u662f\u4e2a\u5f88\u597d\u7684\u9009\u62e9\n\n\u6211\u4eec\u628a\u6240\u6709\u8fb9\u4f5c\u4e3a\u65e0\u5411\u8fb9\u52a0\u5165\u56fe\u4e2d\uff0c\u6d41\u91cf\u4e0a\u9650inf\n\n\u5371\u6865\u5219\u4f5c\u4e3a\u4e0a\u96502\u7684\u65e0\u5411\u8fb9\n\n\u4ece\u6e90\u70b9\u8fde\u8fb9\u5230a1b1\uff0c\u6c47\u70b9\u8fde\u8fb9\u5230a2b2\uff0c\u6d41\u91cf\u90fd\u662f2\\*an\u62162\\*bn\uff0c\u76f8\u5f53\u4e8e\u4e00\u6b21\u628a\u4e24\u904d\u8d70\u4e86\n\n\u6700\u540e\uff0c\u53ea\u8981\u770b\u770b\u6700\u5927\u6d41\u4e0d\u662f(2\\*an+2\\*bn)\n\n\u7136\u800c\u6709\u4e2a\u95ee\u9898\uff0c\u4e07\u4e00\u6211\u4eec\u6700\u7ec8\u6c42\u5f97\u7684\u6700\u5927\u6d41\u4e2d\uff0c\u662fa1\u6d41\u5230b2\u3001b1\u6d41\u5230a2\u5462\uff1f\n\n\u6b64\u65f6\u6709\u4e00\u4e2a\u597d\u529e\u6cd5\uff1a\u6211\u4eec\u628a\u6e90\u70b9\u8fde\u8fb9\u5230a1b2\uff0c\u6c47\u70b9\u8fde\u8fb9\u5230a2b1\uff0c\u5982\u679c\u8fd8\u80fd\u6ee1\u6d41\uff0c\u5c31OK\u4e86\n\n\u5177\u4f53\u4e3a\u4ec0\u4e48\uff1f\u81ea\u5df1\u753b\u56fe\u7406\u89e3\u4e00\u4e0b\u5373\u53ef~\n\n# Code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define inf 1e9\nusing namespace std;\nint n,cnt=-1,first[110],dep[110],cur[110],a1,a2,an,b1,b2,bn;\nstruct edge{\n\tint to,next,w;\n}a[10010];\ninline void add(int u,int v,int w){\n\ta[++cnt]=(edge){v,first[u],w};first[u]=cnt;\n\ta[++cnt]=(edge){u,first[v],w};first[v]=cnt;\n}\nbool bfs(int s,int t){\n\tint q[110],head=0,tail=1,u,v,i;\n\tfor(i=s;i<=t;i++) dep[i]=-1,cur[i]=first[i];\n\tq[0]=s;dep[s]=0;\n\twhile(head<tail){\n\t\tu=q[head++];\n\t\tfor(i=first[u];~i;i=a[i].next){\n\t\t\tv=a[i].to;\n\t\t\tif(~dep[v]||!a[i].w) continue;\n\t\t\tdep[v]=dep[u]+1;q[tail++]=v;\n\t\t}\n\t}\n\treturn ~dep[t];\n}\nint dfs(int u,int t,int limit){\n\tif(u==t||!limit) return limit;\n\tint i,v,f,flow=0;\n\tfor(i=first[u];~i;i=a[i].next){\n\t\tv=a[i].to;\n\t\tif(dep[v]==dep[u]+1&&(f=dfs(v,t,min(limit,a[i].w)))){\n\t\t\ta[i].w-=f;a[i^1].w+=f;\n\t\t\tflow+=f;limit-=f;\n\t\t\tif(!limit) return flow;\n\t\t}\n\t}\n\treturn flow;\n}\nint dinic(int s,int t){\n\tint re=0;\n\twhile(bfs(s,t)) re+=dfs(s,t,inf);\n\treturn re;\n}\nvoid init(){memset(first,-1,sizeof(first));memset(a,0,sizeof(a));cnt=-1;}\nint e[110][110];\nint main(){\n\tint i,j,tmp1,tmp2;char s[110];\n\twhile(~scanf(\"%d%d%d%d%d%d%d\",&n,&a1,&a2,&an,&b1,&b2,&bn)){\n\t\tinit();a1++;a2++;b1++;b2++;\n\t\tfor(i=1;i<=n;i++){\n\t\t\tscanf(\"%s\",s);\n\t\t\tfor(j=1;j<=n;j++){\n\t\t\t\tif(s[j-1]=='X') e[i][j]=0;\n\t\t\t\tif(s[j-1]=='O') e[i][j]=2;\n\t\t\t\tif(s[j-1]=='N') e[i][j]=1;\n\t\t\t}\n\t\t}\n\t\tfor(i=1;i<=n;i++){\n\t\t\t\tfor(j=i+1;j<=n;j++){\n\t\t\t\tif(e[i][j]) add(i,j,((e[i][j]==1)?inf:2));\n\t\t\t}\n\t\t}\n\t\tadd(0,a1,an<<1);add(0,b1,bn<<1);add(a2,n+1,an<<1);add(b2,n+1,bn<<1);\n\t\ttmp1=dinic(0,n+1);\n\t\tinit();\n\t\tfor(i=1;i<=n;i++){\n\t\t\t\tfor(j=i+1;j<=n;j++){\n\t\t\t\tif(e[i][j]) add(i,j,((e[i][j]==1)?inf:2));\n\t\t\t}\n\t\t}\n\t\tadd(0,a1,an<<1);add(0,b2,bn<<1);add(a2,n+1,an<<1);add(b1,n+1,bn<<1);\n\t\ttmp2=dinic(0,n+1);\n\t\tif((tmp1!=(an<<1)+(bn<<1))||(tmp2!=(an<<1)+(bn<<1))) puts(\"No\");\n\t\telse puts(\"Yes\");\n\t}\n}\n```",
        "postTime": 1523357939,
        "uid": 27753,
        "name": "Orion545",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3163 \u3010[CQOI2014]\u5371\u6865\u3011"
    },
    {
        "content": "\u5f88\u5bb9\u6613\u60f3\u5230\u5efa\u56fe\u65b9\u6848\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u56fe\u4e0a\u7684\u4efb\u610f\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u6709\u666e\u901a\u7684\u6865\u76f8\u8fde\uff0c\u90a3\u4e48\u5efa\u4e00\u6761\u5bb9\u91cf\u4e3a$\\infty$\u7684\u8fb9\uff0c\u5426\u5219\u662f\u5371\u6865\uff0c\u5efa\u4e00\u6761\u5bb9\u91cf\u4e3a$2$\u7684\u8fb9\u3002\u7136\u540e\u628a\u5f80\u8fd4$an$\u6b21\u548c$bn$\u6b21\u770b\u6210\u8d70$2*an$\u6b21\u548c$2*bn$\u6b21\uff0c\u7531\u6e90\u70b9\u5411$a1$\u548c$b1$\u8fde\u5bb9\u91cf\u5206\u522b\u4e3a$2*an$\u548c$2*bn$\u7684\u8fb9\uff0c\u518d\u7531$a2$\u548c$b2$\u5411\u6c47\u70b9\u8fde\u5bb9\u91cf\u5206\u522b\u4e3a$2*an$\u548c$2*bn$\u7684\u8fb9\uff0c\u5224\u65ad\u6700\u5927\u6d41\u662f\u5426\u7b49\u4e8e$2(an+bn)$\u3002\n\n\u6ce8\u610f\u5751\u70b9\uff1a\u4ece$a1$\u53d1\u51fa\u7684\u6d41\u91cf\u6709\u53ef\u80fd\u8dd1\u5230$b2$\u5904\u3002\u6240\u4ee5\u8fd8\u8981\u518d\u5efa\u4e00\u904d\u56fe\uff0c\u6e90\u70b9\u5411$a1,b2$\u5efa\u8fb9\uff0c$a2,b1$\u5411\u6c47\u70b9\u5efa\u8fb9\uff0c\u5982\u679c\u4e24\u6b21\u6700\u5927\u6d41**\u90fd\u7b49\u4e8e**$2(an+bn)$\uff0c\u90a3\u4e48\u6709\u89e3\u3002\u5426\u5219\u65e0\u89e3\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\ninline char get() {\n    char c; while ((c = getchar()) != 'X' && c != 'O' && c != 'N');\n    return c;\n}\nconst int N = 2e4 + 5, M = 55, INF = 0x3f3f3f3f;\nint n, A1, A2, An, B1, B2, Bn, ecnt, nxt[N], adj[N], go[N], cap[N],\nS, T, len, que[N], lev[N];\nchar s[M][M];\nvoid add_edge(int u, int v, int w) {\n    nxt[++ecnt] = adj[u]; adj[u] = ecnt; go[ecnt] = v; cap[ecnt] = w;\n    nxt[++ecnt] = adj[v]; adj[v] = ecnt; go[ecnt] = u; cap[ecnt] = 0;\n}\nbool bfs() {\n    int i; memset(lev, -1, sizeof(lev));\n    lev[que[len = 1] = S] = 0;\n    for (i = 1; i <= len; i++) {\n        int u = que[i];\n        for (int e = adj[u], v; e; e = nxt[e])\n            if (cap[e] > 0 && lev[v = go[e]] == -1) {\n                lev[que[++len] = v] = lev[u] + 1;\n                if (v == T) return 1;\n            }\n    }\n    return 0;\n}\nint dinic(int u, int flow) {\n    if (u == T) return flow;\n    int res = 0, delta;\n    for (int e = adj[u], v; e; e = nxt[e])\n        if (cap[e] > 0 && lev[u] < lev[v = go[e]]) {\n            delta = dinic(v, min(cap[e], flow - res));\n            if (delta) {\n                cap[e] -= delta; cap[e ^ 1] += delta;\n                res += delta; if (res == flow) break;\n            }\n        }\n    if (res != flow) lev[u] = -1;\n    return res;\n}\nint solve() {\n    int ans = 0;\n    while (bfs()) ans += dinic(S, INF);\n    return ans;\n}\nvoid work() {\n    int i, j, res1, res2;\n    A1 = read() + 2; A2 = read() + 2; An = read();\n    B1 = read() + 2; B2 = read() + 2; Bn = read();\n    for (i = 1; i <= n; i++) for (j = 1; j <= n; j++)\n        s[i][j] = get(); S = 1; T = n + 2;\n    ecnt = 1; memset(adj, 0, sizeof(adj));\n    for (i = 1; i <= n; i++) for (j = 1; j <= n; j++) {\n        if (i == j) continue;\n        if (s[i][j] == 'O') add_edge(i + 1, j + 1, 2);\n        else if (s[i][j] == 'N') add_edge(j + 1, i + 1, INF);\n    }\n    add_edge(S, A1, An << 1); add_edge(S, B1, Bn << 1);\n    add_edge(A2, T, An << 1); add_edge(B2, T, Bn << 1);\n    res1 = solve();\n    ecnt = 1; memset(adj, 0, sizeof(adj));\n    for (i = 1; i <= n; i++) for (j = 1; j <= n; j++) {\n        if (i == j) continue;\n        if (s[i][j] == 'O') add_edge(i + 1, j + 1, 2);\n        else if (s[i][j] == 'N') add_edge(j + 1, i + 1, INF);\n    }\n    add_edge(S, A1, An << 1); add_edge(S, B2, Bn << 1);\n    add_edge(A2, T, An << 1); add_edge(B1, T, Bn << 1);\n    res2 = solve();\n    puts(res1 == (An + Bn << 1) && res2 == (An + Bn << 1) ? \"Yes\" : \"No\");\n}\nint main() {\n    while (~scanf(\"%d\", &n)) work();\n    return 0;\n}\n```",
        "postTime": 1511875483,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3163 \u3010[CQOI2014]\u5371\u6865\u3011"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P3163)\n# \u96f6.\u524d\u8bb0\n\u7f51\u7edc\u6d41\u521d\u59cb\u5316\u7684\u65f6\u5019\u5343\u4e07\u4e0d\u80fd\u5fd8\u8bb0\u6e90\u70b9\u548c\u6c47\u70b9\n\n# \u4e00.\u5927\u4f53\u601d\u8def\n\u672c\u9898\u6709\u7684\u8fb9\u53ef\u4ee5\u8d70\u65e0\u6570\u6b21\uff0c\u6709\u7684\u8fb9\u53ea\u53ef\u4ee5\u8d702\u6b21\n\n\u56e0\u6b64\u4e0d\u96be\u60f3\u5230\u8fd9\u662f\u4e00\u9053\u7f51\u7edc\u6d41\n\n\u8fd9\u91cc\u67092\u4e2a\u6e90\u70b9\u548c2\u4e2a\u6c47\u70b9\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u548c\u4e00\u4e2a\u8d85\u7ea7\u6c47\u70b9\n\n\u518d\u8dd1\u4e00\u904d\u7f51\u7edc\u6d41\n\n# \u4e8c.\u5b9e\u73b0\u7ec6\u8282\n\u4e0d\u96be\u53d1\u73b0\u6709\u7684\u60c5\u51b5\u4e0b\u5149\u7528\u8d85\u7ea7\u6e90\u70b9\u8d85\u7ea7\u6c47\u70b9\u4f1a\u7ffb\u8f66\n\n\u4f8b\u5982\u8fd9\u6837:\n\n![](https://s1.ax1x.com/2020/04/11/G7R7ng.png)\n\n\u867d\u7136\u8089\u773c\u53ef\u89c1\u7b54\u6848\u662fno\n\n\u4f46\u662f\u6d41\u91cf\u8fd8\u662f\u5bf9\u7684\n\n\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u8981\u5206\u522b\u8dd1\u4e24\u6b21\uff0c\u7b2c\u4e8c\u6b21\u628ab1b2\u53cd\u8fc7\u6765\n\n\u8fd9\u6837\u4e0d\u4f1a\u5f71\u54cd\u5bf9\u7684\u60c5\u51b5\uff0c\u4f46\u80af\u5b9a\u53ef\u4ee5\u6392\u9664\u9519\u8bef\u7684\u60c5\u51b5\n\n\u53e6\u5916\uff0c\u9898\u76ee\u6c42\u7684\u662f\u4e24\u70b9\u4e4b\u95f4\u6765\u5f80anbn\u6b21\n\n\u76f8\u5f53\u4e8e\u4ecea1\u5230a2 $2\\times an$\u6b21\n\n\u4eceb1\u5230b2 $2\\times bn$\u6b21\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u7f51\u7edc\u6d41\u89e3\u51b3\u4e86\n\n# \u4e09.\u5177\u4f53\u4ee3\u7801\n```\n#include<cstdio>\n#include<cctype>\n#include<queue>\n#include<iostream>\nusing namespace std;\nconst int INF=0x7fffffff;\ninline int fan(int a){return a%2==0? a-1:a+1;}\ninline void swap(int &a,int &b){int t=a;a=b;b=t;}\ninline int R(){\n\tint r=0;char c=getchar();\n\twhile(!isdigit(c)) c=getchar();\n\twhile(isdigit(c)) r=(r<<1)+(r<<3)+(c^48),c=getchar();\n\treturn r;\n}\nstruct node{\n\tint to,next,flow;\n}edge[5050];\nint n,a1,a2,an,b1,b2,bn,head[55],tot,dis[55],s,t,gap[55],cur[55],ans;\ninline void add(int from,int to,int flow){\n\tedge[++tot].flow=flow;\n\tedge[tot].next=head[from];\n\tedge[tot].to=to;\n\thead[from]=tot;\n\treturn ;\n}\ninline void bfs(int start){\n    for(register int i=1;i<t;i++) dis[i]=-1;\n    int l=0,r=1;\n    int dl[205];\n    dl[1]=start;\n    while(l<r){\n        l++;\n        int u=dl[l];\n        for(register int i=head[u];i;i=edge[i].next){\n            if(edge[i].flow || dis[edge[i].to]>0) continue;\n            dis[edge[i].to]=dis[u]+1;\n            gap[dis[edge[i].to]]++;\n            r++;\n            dl[r]=edge[i].to;\n        }\n    }\n    if(dis[s]==-1) dis[s]=t;\n    return ;\n}\ninline int isap(int now,int nowflow){\n    if(now==t) return nowflow;\n    int sum=0;\n    for(register int i=head[now];i;i=edge[i].next){\n        if(!edge[i].flow || dis[edge[i].to]!=dis[now]-1) continue;\n        int akak=isap(edge[i].to,min(nowflow-sum,edge[i].flow));\n        sum+=akak;edge[i].flow-=akak;edge[fan(i)].flow+=akak;\n        if(dis[s]>=t || nowflow==sum) return sum;\n    }\n    cur[now]=head[now];\n    if(!--gap[dis[now]]) dis[s]=t;\n    dis[now]++;\n    gap[dis[now]]++;\n    return sum;\n}\nint mp[55][55];\ninline void clear(){\n\tans=0;tot=0;\n\tfor(register int i=1;i<=n+2;i++) head[i]=gap[i]=cur[i]=dis[i]=0;\n\tfor(register int i=1;i<=n;i++){\n\t\tfor(register int j=1;j<=n;j++){\n\t\t\tif(mp[i][j]==1) add(i,j,INF),add(j,i,0);\n\t\t\tif(mp[i][j]==2) add(i,j,2),add(j,i,0);\n\t\t}\n\t}\n\tadd(s,a1,2*an);add(a1,s,0);add(t,a2,0);add(a2,t,2*an);\n\tadd(s,b1,2*bn);add(b1,s,0);add(t,b2,0);add(b2,t,2*bn);\n}\nint main(){\n\twhile(cin>>n){\n\t\ts=n+1,t=n+2;\n\t\ta1=R()+1,a2=R()+1,an=R();\n\t\tb1=R()+1,b2=R()+1,bn=R();\n\t\tfor(register int i=1;i<=n;i++){\n\t\t\tfor(register int j=1;j<=n;j++){\n\t\t\t\tchar ch=getchar();\n\t\t\t\twhile(ch!='N'&&ch!='X'&&ch!='O') ch=getchar();\n\t\t\t\tif(ch=='X') mp[i][j]=0;\n\t\t\t\tif(ch=='N') mp[i][j]=1;\n\t\t\t\tif(ch=='O') mp[i][j]=2;\n\t\t\t}\n\t\t}\n\t\tclear();\n\t\tfor(register int i=1;i<=t;i++) cur[i]=head[i];\n\t\tbfs(t);\n\t\twhile(dis[s]<t){\n\t\t\tans+=isap(s,INF);\n\t\t}\n\t\tif(ans<2*(an+bn)){\n\t\t\tprintf(\"No\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tswap(b1,b2);\n\t\tclear();\n\t\tfor(register int i=1;i<=t;i++) cur[i]=head[i];\n\t\tbfs(t);\n\t\twhile(dis[s]<t){\n\t\t\tans+=isap(s,INF);\n\t\t}\n\t\tif(ans<2*(an+bn)) printf(\"No\\n\");\n\t\telse printf(\"Yes\\n\");\n\t}\n}\n```\n# \u56db.\u540e\u8bb0\n\u672c\u9898\u8003\u67e5\u7684\u662f\u5bf9\u591a\u6e90\u70b9\u6c47\u70b9\u7684\u8003\u5bdf\n\n\u6ce8\u610f\u5728\u7f51\u7edc\u6d41\u4e2d\u51fa\u73b0\u7684\u7a9c\u6d41\u7684\u60c5\u51b5\n\n\u53ef\u4ee5\u901a\u8fc7\u591a\u6b21\u6362\u70b9\u6765\u89e3\u51b3\u95ee\u9898\n\nFinally,\u8c22\u8c22\u5927\u5bb6\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.luogu.com.cn/blog/HongseFox/solution-p3163)",
        "postTime": 1586564669,
        "uid": 93838,
        "name": "Hongse_Fox",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3163 \u3010[CQOI2014]\u5371\u6865\u3011"
    },
    {
        "content": "### $Solution$\n\u9996\u5148\u5f80\u8fd4$n$\u6b21\u7b49\u4ef7\u4e8e\u8d70$2n$\u6b21\u3002\n\n\u5c06 $a_n*2,b_n*2$;\n\n\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u6309\u539f\u56fe\u6784\u56fe\uff0c\u7136\u540e\uff1a\n\n$(S,a_1,a_n),(S,b_1,b_n),(a_2,T,a_n),(b_2,T,b_n)$\n\n\u4f46\u76f4\u63a5\u5224\u65ad\u6700\u5927\u6d41\u662f\u5426\u7b49\u4e8e$a_n+b_n$\u662f\u4e0d\u5bf9\u7684\u3002\u56e0\u4e3a$a_2$\u53ef\u80fd\u6709\u6765\u81ea$b_1$\u7684\u6d41\u91cf\uff0c$b_2$\u4e5f\u6709\u53ef\u80fd\u6709\u6765\u81ea$a_1$\u7684\u6d41\u91cf\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06$b_1$\u548c$b_2$\u4ea4\u6362\u518d\u8dd1\u4e00\u6b21\u6700\u5927\u6d41\u3002\u5982\u679c\u4e24\u6b21\u6700\u5927\u6d41\u90fd\u7b49\u4e8e$a_n+b_n$ \u90a3\u4e48\u6709\u89e3\u3002\n\n\u81f3\u4e8e\u8bc1\u660e\uff0c\u5c06$a_1->a_2$\u7684\u6d41\u91cf\u8bbe\u4e3a$x$\u7136\u540e\u5728\u63a8\u4e00\u4e0b\u5c31\u6ca1\u4e86\uff0c\u81ea\u5df1\u60f3\u60f3\u5427\n\n### $Code$\n\n``` cpp\n#include<bits/stdc++.h>\n#define int long long\n#define rg register\n#define file(x) freopen(x\".in\",\"r\",stdin);freopen(x\".out\",\"w\",stdout);\nusing namespace std;\nconst int inf=1e12;\nint read(){\n    int x=0,f=1;char c=getchar();\n    while(c<'0'||c>'9') f=(c=='-')?-1:1,c=getchar();\n    while(c>='0'&&c<='9') x=x*10+c-48,c=getchar();\n    return f*x;\n}\nstruct node{\n    int to,next,v;\n}a[200001];\nint head[100001],cnt=1,n,m,s,t,x,y,z,dep[100001],a1,a2,an,b1,b2,bn;\nvoid add(int x,int y,int c){\n    a[++cnt].to=y,a[cnt].next=head[x],a[cnt].v=c,head[x]=cnt;\n    a[++cnt].to=x,a[cnt].next=head[y],a[cnt].v=0,head[y]=cnt;\n}\nqueue<int> q;\nint bfs(){\n    memset(dep,0,sizeof(dep));\n    q.push(s);\n    dep[s]=1;\n    while(!q.empty()){\n        int now=q.front();\n        q.pop();\n        for(int i=head[now];i;i=a[i].next){\n            int v=a[i].to;\n            if(!dep[v]&&a[i].v>0)\n                dep[v]=dep[now]+1,q.push(v);\n        }\n    }\n    if(dep[t])\n        return 1;\n    return 0;\n}\nint dfs(int k,int list){\n    if(k==t||!list)\n       return list;\n    for(int i=head[k];i;i=a[i].next){\n        int v=a[i].to;\n        if(dep[v]==dep[k]+1&&a[i].v>0){\n            int p=dfs(v,min(list,a[i].v));\n            if(p){\n                a[i].v-=p;\n                a[i^1].v+=p;\n                return p;\n            }\n        }\n    }\n    return dep[k]=0;\n}\nint Dinic(){\n    int ans=0,k;\n    while(bfs())\n        while((k=dfs(s,inf)))\n            ans+=k;\n    return ans;\n}\nchar c[101][101];\nbool build(){\n    s=0,t=n+1;\n    memset(head,0,sizeof(head)),cnt=1;\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++){\n            if(c[i][j]=='O')\n                add(i,j,2);\n            if(c[i][j]=='N')\n                add(i,j,inf);\n        }\n    add(s,a1,an),add(a2,t,an);\n    add(s,b1,bn),add(b2,t,bn);\n    return Dinic()==an+bn;\n}\nmain(){\n    while(scanf(\"%d%d%d%d%d%d%d\",&n,&a1,&a2,&an,&b1,&b2,&bn)!=EOF){\n        a1++,a2++,b1++,b2++,an*=2,bn*=2;\n        for(int i=1;i<=n;i++)\n            scanf(\"%s\",c[i]+1);\n        int ans=build();\n        swap(b1,b2);\n        ans+=build();\n        if(ans==2) puts(\"Yes\");\n        else puts(\"No\");\n    }\n}\n\n```",
        "postTime": 1561365400,
        "uid": 19805,
        "name": "\u64a4\u4e91",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3163 \u3010[CQOI2014]\u5371\u6865\u3011"
    },
    {
        "content": "\u7b97\u662f\u7ec3\u4e60dinic\u6a21\u677f\u4e86\uff083\u4e2a\u6708\u6ca1\u6253\u4e86\u5c45\u7136\u4e00\u904d\u6253\u5bf9\u4e86\uff09\n\n\u5efa\u56fe\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u5c31\u662f\u88f8\u7684\u56fe\uff08\u4e2a\u4eba\u611f\u89c9\u53ef\u4ee5\u5148\u5e76\u67e5\u96c6\u4e00\u6ce2\u628a\u666e\u901a\u6865\u8fde\u63a5\u7684\u70b9\u5e76\u8d77\u6765\u52a0\u901f\uff09\n\n\u6b64\u9898\u6ce8\u610f\u70b9\uff1a\n\n1.\u7092\u9e21\u539f\u70b9\u5230\u4e24\u4e2a\u539f\u70b9\u7684\u6d41\u91cf\u662f\u4e0d\u540c\u7684\uff082an\u30012bn\uff09\uff0c\u4e0d\u662fINF\n\n2.\u6d41\u5b8c\u4e00\u6b21\u4ea4\u6362b1b2\u518d\u6765\u4e00\u904d\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u4e2a\u6d41\u4e0d\u662f\u4ecea\u6d41\u5230b\n\n3.\u7b2c\u4e8c\u6b21\u6d41\u524d\u91cd\u65b0\u5efa\u56fe\uff01\uff01\uff08\u5e94\u8be5\u53ea\u6709\u6211\u4f1a\u5fd8\u8bb0\u5efa\u5427\uff09\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,h,t,a1,a2,an,b1,b2,bn,flow,now;char ch;\nint dis[52],l[52],d[52][52];char c[52][52];\nchar getch()\n{\n    for(ch=getchar();ch!='O' && ch!='N' && ch!='X';ch=getchar());\n    return ch;\n}\nbool bfs()\n{\n    for(int i=1;i<=n+1;i++)\n        dis[i]=0;\n    for(h=1,t=1,l[1]=0,dis[0]=1;h<=t;h++)\n        for(int i=1;i<=n+1;i++)\n            if(d[l[h]][i] && !dis[i])\n                l[++t]=i,dis[i]=dis[l[h]]+1;\n    return dis[n+1];\n}\nint dfs(int now,int maxflow)\n{\n    if(now==n+1) return maxflow;\n    int flow=0;\n    for(int i=0;i<=n+1;i++)\n    if(dis[i]==dis[now]+1 && d[now][i])\n    {\n        int thi=dfs(i,min(maxflow,d[now][i]));\n        d[now][i]-=thi;d[i][now]+=thi;\n        maxflow-=thi;flow+=thi;\n        if(maxflow==0) return flow;\n    }\n    if(flow==0)\n        dis[now]=-1;\n    return flow;\n}\nvoid INIT()\n{\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n        switch(c[i][j])\n        {\n            case'O':d[j][i]=d[i][j]=2;break;\n            case'N':d[j][i]=d[i][j]=flow;break;\n            case'X':d[j][i]=d[i][j]=0;break;\n        }\n    for(int i=0;i<=n+1;i++)\n        d[0][i]=d[i][0]=d[i][n+1]=d[n+1][i]=0;\n    d[a1][0]=d[0][a1]=an<<1;d[b1][0]=d[0][b1]=bn<<1;\n    d[a2][n+1]=d[n+1][a2]=an<<1;d[b2][n+1]=d[n+1][b2]=bn<<1;\n    now=0;\n}\nint main()\n{\n    while(~scanf(\"%d%d%d%d%d%d%d\",&n,&a1,&a2,&an,&b1,&b2,&bn))\n    {\n    a1++;a2++;b1++;b2++;\n    flow=an+bn<<1;\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n            c[i][j]=getch();\n    INIT();\n    while(now<flow && bfs()) now=now+dfs(0,flow);\n    if(now<flow)\n    {\n        puts(\"No\");\n        continue;\n    }\n    swap(b1,b2);\n    INIT();\n    while(now<flow && bfs()) now=now+dfs(0,flow);\n    if(now<flow)\n        puts(\"No\");\n    else\n        puts(\"Yes\");\n    }\n    return 0;\n}\n```",
        "postTime": 1480595523,
        "uid": 885,
        "name": "wanglichao1121",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3163 \u3010[CQOI2014]\u5371\u6865\u3011"
    },
    {
        "content": "\u9898\u89e3\u5f88\u591a\u4eba\u90fd\u5728\u524d\u9762\u5199\u8fc7\u4e86\uff0c\u6211\u5c31\u5728\u8fd9\u91cc\u653e\u4e00\u4e2aISAP\u7684\u677f\u5b50\u597d\u4e86\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#define N 30007\n#define INF 0x3f3f3f3f\nusing namespace std;\nstruct Graph {\n    struct Edge {\n        int to, nxt, cap;\n        Edge() {}\n        Edge(const int& to, const int& nxt, const int& cap) : to(to), nxt(nxt), cap(cap) {}\n    } e[N << 2];\n    int n, s, t;\n    int tot, head[N], d[N], cur[N], pre[N], gap[N];\n    inline void clear(int n, int s, int t) {\n        this -> n = n; this -> s = s; this -> t  = t; tot = 0;\n        memset(head, -1, sizeof(head));\n        memset(cur, 0, sizeof(cur));\n        memset(pre, 0, sizeof(pre));\n    }\n\n    inline void AddEdge(const int& u, const int& v, const int& c) {\n        e[tot] = Edge(v, head[u], c), head[u] = tot++;\n        e[tot] = Edge(u, head[v], 0), head[v] = tot++;\n    }\n\n    inline void bfs() {\n        queue<int> q;\n        memset(d, -1, sizeof(d));\n        memset(gap, 0, sizeof(gap));\n        d[t] = 0; gap[d[t]] = 1; q.emplace(t);\n        while (!q.empty()) {\n            int u = q.front(); q.pop();\n            for (int i = head[u]; ~i; i = e[i].nxt) {\n                int v = e[i].to;\n                if (d[v] == -1) {\n                    d[v] = d[u] + 1;\n                    ++gap[d[v]];\n                    q.emplace(v);\n                }\n            }\n        }\n    }\n\n    inline int ISAP() {\n        memcpy(cur, head, sizeof(cur));\n        int flow = 0, u = (pre[s] = s);\n        bfs();\n        while (d[s] < n + 2) {\n            if (u == t) {\n                int f = INF;\n                for (int i = s; i != t; i = e[cur[i]].to)\n                    if (f > e[cur[i]].cap) f = e[cur[(u = i)]].cap;\n                flow += f;\n                for (int i = s; i != t; i = e[cur[i]].to)\n                    e[cur[i]].cap -= f, e[cur[i] ^ 1].cap += f;\n            }\n            int c;\n            for (c = cur[u]; ~c; c = e[c].nxt) {\n                int v = e[c].to;\n                if (e[c].cap && d[u] == d[v] + 1) break;\n            }\n            if (~c) {\n                cur[u] = c;\n                pre[e[c].to] = u;\n                u = e[c].to;\n            } else {\n                if (--gap[d[u]] == 0) break;\n                int mn = n + 2;\n                for (int i = head[u]; ~i; i = e[i].nxt) {\n                    int v = e[i].to;\n                    if (e[i].cap && mn > d[v]) {\n                        mn = d[v];\n                        cur[u] = i;\n                    }\n                }\n                d[u] = mn + 1;\n                ++gap[d[u]];\n                u = pre[u];\n            }\n        }\n        return flow;\n    }\n} G[2];\n\nint n, a1, a2, an, b1, b2, bn;\n\nint main()\n{\n    //freopen(\"test.in\", \"r\", stdin);\n    while (scanf(\"%d%d%d%d%d%d%d\", &n, &a1, &a2, &an, &b1, &b2, &bn) == 7) {\n        getchar();\n        G[0].clear(n, n, n + 1), G[1].clear(n, n, n + 1);\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                char ch = getchar();\n                if (i == j || ch == 'X') continue;\n                if (ch == 'O') G[0].AddEdge(i, j, 2), G[1].AddEdge(i, j, 2);\n                if (ch == 'N') G[0].AddEdge(i, j, INF), G[1].AddEdge(i, j, INF);\n            }\n            getchar();\n        }\n        G[0].AddEdge(n, a1, an << 1); G[0].AddEdge(n, b1, bn << 1);\n        G[0].AddEdge(a2, n + 1, an << 1); G[0].AddEdge(b2, n + 1, bn << 1);\n        G[1].AddEdge(n, a1, an << 1); G[1].AddEdge(n, b2, bn << 1);\n        G[1].AddEdge(a2, n + 1, an << 1); G[1].AddEdge(b1, n + 1, bn << 1);\n        int f1 = G[0].ISAP(), f2 = G[1].ISAP();\n        if (f1 == ((an + bn) << 1) && f2 == ((an + bn) << 1)) printf(\"Yes\\n\");\n        else printf(\"No\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1537602412,
        "uid": 31766,
        "name": "LoliconAutomaton",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3163 \u3010[CQOI2014]\u5371\u6865\u3011"
    },
    {
        "content": "\u505a\u8fd9\u9053\u9898\u7684\u4eba\u597d\u5c11\u2026\u2026\n\n\nDinic\u6b63\u5e38\u5efa\u56fe\uff0c\u6e90\u70b9\u8fdea1,b1       \uff0c       a2,b2\u8fde\u6c47\u70b9\u3002\n\n\u8dd1\u5b8c\u4ee5\u540e\u662f\u4e0d\u4e00\u5b9a\u5bf9\u7684\uff0c \u6709\u53ef\u80fda1\u8dd1\u5230b2\u53bb\u4e86\uff0c\u90a3\u4e48\u53cd\u8fc7\u6765\uff0c\u6e90\u70b9\u8fdea1,b2       \uff0c       a2,b1\u8fde\u6c47\u70b9\u3002\n\n\u5982\u679c\u8fd9\u6837\u4e5f\u8dd1\u8fc7\uff0c\u5c31\u8bf4\u660e\u5bf9\u4e86\uff0c\u8bb0\u5f97\u7b54\u6848\u662f2\\*(an\\_bn)\uff0c\u548c\u6700\u5927\u6d41\u6bd4\u8f83\u4e00\u4e0b\u662f\u4e0d\u662f\u6ee1\u6d41\u3002\n\n\u8bb0\u5f97\u521d\u59cb\u5316\u548c\u591a\u7ec4\u6570\u636e\uff0c\u3010\u4ee5\u53caYes\u548cNo\u7684\u5927\u5c0f\u5199\uff01\uff01\uff01\u3011\n\n\uff08Dinic\u677f\u5b50\u7565\u6709\u538b\u884c\uff09\n\n\n\n\n\n\n\n\n\n\n        \n\n\n    \n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define MAXN 100\n#define MAXM 10000\n#define INF 0x3f3f3f3f\nstruct Edge\n{\n    int to,nex,c;\n    Edge(){}\n    Edge(int _to, int _nex, int _c):to(_to),nex(_nex),c(_c){}\n};\nEdge e[MAXM+5];\nint first[MAXN+5], level[MAXN+5], cur[MAXN+5], q[MAXN+5], n, tot, S, T, a1, a2, an, b1, b2, bn, F1, F2;\nchar g[MAXN+5][MAXN+5]; \nvoid Add(int a, int b, int w)\n{\n    e[tot] = Edge(b,first[a],w);\n    first[a] = tot++;\n    e[tot] = Edge(a,first[b],0);\n    first[b] = tot++;\n    return;\n}\nvoid Init(int N)\n{\n    memset(first,-1,sizeof(first)), tot = 0, S = 0, T = N;\n    return;\n}\nbool BFS()\n{\n    memset(level,0,sizeof(level)), q[0] = S, level[S] = 1;\n    for(int head = 0, tail = 1; head < tail; )\n        for(int t = q[head++], u = first[t]; u != -1; u = e[u].nex)\n            if(!level[e[u].to] && e[u].c > 0)\n            {\n                level[e[u].to] = level[t] + 1;\n                q[tail++] = e[u].to;\n                if(e[u].to == T)\n                    return true;\n            }\n    return false;\n}\nint DFS(int p, int f)\n{\n    if(p == T)\n        return f;\n    int tag = 0, del;\n    for(int &u = cur[p]; u != -1; u = e[u].nex)\n        if(level[e[u].to] == level[p]+1 && e[u].c > 0)\n        {\n            del = DFS(e[u].to,min(f-tag,e[u].c));\n            e[u].c -= del, e[u^1].c += del, tag += del;\n            if(tag == f)\n                return tag;\n        }\n    return tag;\n}\nint Dinic()\n{\n    int ans = 0;\n    for(; BFS(); ans += DFS(S,INF))\n        for(int i = 0; i <= n+1; i++)\n            cur[i] = first[i];\n    return ans;\n}\nint main()\n{\n    for(; ~scanf(\"%d%d%d%d%d%d%d\",&n,&a1,&a2,&an,&b1,&b2,&bn); puts((F1<2*(an+bn) || F2<2*(an+bn) ? \"No\" : \"Yes\")))\n    {\n        a1++, a2++, b1++, b2++;\n        for(int i = 1; i <= n; i++)\n            scanf(\"%s\",g[i]+1);\n        Init(n+1);\n        for(int i = 1; i <= n; i++)\n            for(int j = 1; j < i; j++)\n                if(g[i][j] == 'O')\n                    Add(i,j,2), Add(j,i,2);\n                else if(g[i][j] == 'N')\n                    Add(i,j,INF), Add(j,i,INF);\n        Add(S,a1,an*2), Add(S,b1,bn*2), Add(a2,T,an*2), Add(b2,T,bn*2), F1 = Dinic();\n        Init(n+1);\n        for(int i = 1; i <= n; i++)\n            for(int j = 1; j < i; j++)\n                if(g[i][j] == 'O')\n                    Add(i,j,2), Add(j,i,2);\n                else if(g[i][j] == 'N')\n                    Add(i,j,INF), Add(j,i,INF);\n        Add(S,a1,an*2), Add(S,b2,bn*2), Add(a2,T,an*2), Add(b1,T,bn*2), F2 = Dinic();\n    }\n     return 0;\n}\n```",
        "postTime": 1483273734,
        "uid": 16528,
        "name": "magolor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3163 \u3010[CQOI2014]\u5371\u6865\u3011"
    }
]