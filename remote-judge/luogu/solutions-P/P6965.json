[
    {
        "content": "\u6ce8\u610f\u5230\u6bcf\u4e2a\u4e32\u53ea\u6709\u4e00\u4e2a ? (\u53ea\u6709 $2$ \u79cd\u72b6\u6001)\uff0c\u6240\u6c42\u7684\u662f\u6784\u9020\u65b9\u6848\uff0c\u6240\u4ee5\u8003\u8651\u4f7f\u7528 2-SAT\u3002\n\n\u4e8e\u662f\u8fdb\u4e00\u6b65\u60f3\u5230\u5982\u679c $x_0,y_0$ \u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u524d\u7f00\uff0c\u5c31 $x_0\\to y_1,y_0\\to x_1$\u3002\n\n\u90a3\u4e48\u5bb9\u6613\u60f3\u5230\u66b4\u529b $n^2$ \u5efa\u56fe\uff0c\u4e0b\u4e00\u6b65\u663e\u7136\u5c31\u662f\u51cf\u5c11\u8fb9\u6570\u3002\n\n\u8003\u8651\u4f7f\u7528 trie\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u72b6\u6001 $x_0$ \uff0c\u8bbe trie \u4e0a\u5bf9\u5e94\u70b9\u4e3a $cur$\uff0c\u5219\uff1a\n\n- $x_0$ \u8fde\u5411 $cur$ \u7684\u7956\u5148\u8282\u70b9\u7684\u53e6\u4e00\u4e2a\u72b6\u6001(\u6bd4\u5982\u8bf4 $cur$ \u7684\u7956\u5148\u4e2d\u6709\u4e00\u4e2a $y_1$\uff0c\u5219\u8fde\u5411 $y_0$ )\n\n\u53ef\u4ee5\u590d\u5236\u4e00\u904d trie\uff0ctrie \u6811\u4e0a\u513f\u5b50\u8fde\u7236\u4eb2\uff0c\u7136\u540e $x_0\\to fa(cur),cur\\to x_1$ (\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8fde\u81ea\u5df1)\uff0c\u589e\u52a0 $m$ \u4e2a\u70b9($m$ \u4e3a trie \u7684\u8282\u70b9\u4e2a\u6570)\uff0c $m+2n$ \u6761\u8fb9\u3002\n```cpp\ninline void build1(){\n    for(register int i=1; i<=trie_cnt; i++) if(fa(i)) Add_Edge(i+node_cnt,fa(i)+node_cnt);\n    for(register int i=1, x; i<=n; i++){\n        x = loc[0][i]; if(x) Add_Edge(x+node_cnt,Y(i)); if(fa(x)) Add_Edge(N(i),fa(x)+node_cnt);\n        x = loc[1][i]; if(x) Add_Edge(x+node_cnt,N(i)); if(fa(x)) Add_Edge(Y(i),fa(x)+node_cnt);\n    }\n    node_cnt += trie_cnt;\n}\n```\n\n- $x_0$ \u8fde\u5411 $cur$ \u7684\u513f\u5b50\u8282\u70b9\u7684\u53e6\u4e00\u4e2a\u72b6\u6001(\u540c\u4e0a)\n\n\u8fd8\u662f\u590d\u5236\u4e00\u904d trie\uff0c\u7236\u4eb2\u8fde\u513f\u5b50\uff0c\u7136\u540e $x_0\\to cur, fa(cur)\\to x_1$ \uff0c\u589e\u52a0 $m$ \u4e2a\u70b9\uff0c $m+2n$ \u6761\u8fb9\u3002\n```cpp\ninline void build2(){\n    for(register int i=1; i<=trie_cnt; i++) if(fa(i)) Add_Edge(fa(i)+node_cnt,i+node_cnt);\n    for(register int i=1, x; i<=n; i++){\n        x = loc[0][i]; if(x) Add_Edge(N(i),x+node_cnt); if(fa(x)) Add_Edge(fa(x)+node_cnt,Y(i));\n        x = loc[1][i]; if(x) Add_Edge(Y(i),x+node_cnt); if(fa(x)) Add_Edge(fa(x)+node_cnt,N(i));\n    }\n    node_cnt += trie_cnt;\n}\n```\n\n- $x_0$ \u8fde\u5411 $cur$ \u5bf9\u5e94\u7684\u5176\u4ed6\u72b6\u6001\u7684\u53e6\u4e00\u4e2a\u72b6\u6001\n\n\u8bbe\u70b9 $cur$ \u5bf9\u5e94\u7684\u72b6\u6001\u4e3a $a_1,a_2\\cdots$\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u628a $a_i$ \u548c $a_j'$ ( $a_j$ \u7684\u5bf9\u5e94\u72b6\u6001)\u4e24\u4e24\u8fde\u8fb9\uff0c\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u524d\u7f00\u4f18\u5316\u5efa\u56fe\u6a21\u578b\uff0c\u589e\u52a0 $2n$ \u4e2a\u70b9\uff0c $12n$ \u6761\u8fb9\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/cpstf7c5.png)\n```cpp\ninline void build3(){\n    static int tmp[MAXN], num;\n    for(register int i=1; i<=trie_cnt; i++){\n        num = vec[i].size();\n        if(num>=2){\n            for(register int j=1; j<=num; j++)\n                tmp[j] = vec[i][j-1],\n                Add_Edge(tmp[j],j+node_cnt),\n                Add_Edge(j+num+node_cnt,tmp[j]^1);\n            for(register int j=1; j<num; j++)\n                Add_Edge(j+node_cnt,j+1+node_cnt),\n                Add_Edge(j+node_cnt,tmp[j+1]^1),\n                Add_Edge(tmp[j+1],j+num+node_cnt),\n                Add_Edge(j+1+num+node_cnt,j+num+node_cnt);\n            node_cnt += num*2;\n        }\n    }\n}\n```\n\n\u7136\u540e\u8d70\u4e00\u822c 2-SAT \u6d41\u7a0b\u5c31\u884c\u4e86\uff0c\u8f93\u51fa\u65b9\u6848\u770b\u54ea\u4e2a\u72b6\u6001\u7684 $belong$ \u5c0f\uff0c\u5c31\u9009\u54ea\u4e2a\u72b6\u6001\u3002\n\n**\u4e00\u70b9\u5c0f\u7ec6\u8282**\n\n\u4ed4\u7ec6\u770b\u9898\uff0c*\u6700\u591a\u4e00\u4e2a\"?\"*\uff0c\u610f\u601d\u662f\u4f1a\u6709\u6ca1\u6709 ? \u7684\u5b57\u7b26\u4e32(\u6837\u4f8b2)\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u5047\u8bbe\u4efb\u610f\u4e00\u4f4d\u4e3a ? \uff0c\u7136\u540e\u5f3a\u5236\u8fd9\u4e00\u4f4d\u9009 $0/1$ \u3002(\u5373 $x_0\\to x_1$ \u6216\u8005 $x_1\\to x_0$ )\n\n[\u5b8c\u6574\u4ee3\u7801](https://www.luogu.com.cn/paste/m08w0rpy)\n",
        "postTime": 1614655519,
        "uid": 56825,
        "name": "oisdoaiu",
        "ccfLevel": 9,
        "title": "P6965 [NEERC2016]Binary Code"
    },
    {
        "content": "\u524d\u60c5\u63d0\u8981\uff1a\u672c\u9898\u89e3\u4ee3\u7801\u957f\u5ea6\u4e0d\u8d85\u8fc7 $\\mathtt{2kb}$\uff0c\u4e0d\u538b\u884c\u4e0d\u6bd2\u7624\uff0c\u662f\u4e00\u7bc7\u4f18\u79c0\u7684\u5c0f\u6e05\u65b0\u9898\u89e3\u3002\n\n\u90e8\u5206\u601d\u8def\u6765\u81ea @Sali\u0435ri\uff0c\u5927\u5bb6\u5feb\u6765\u819c\u5979\uff01\n\n## \u9898\u610f\n\u7565\u3002\n\n## \u9898\u89e3\n\u56e0\u4e3a\u53ea\u9700\u8981\u524d\u7f00\u5339\u914d\uff0c\u540c\u65f6\u53c8\u662f $01$ \u4e32\uff0c\u663e\u7136\u53ef\u4ee5 trie \u626f\u4e0a\u5173\u7cfb\u3002  \n\u53c8\u6ce8\u610f\u5230 $?$ \u6700\u591a\u6709\u4e00\u4e2a\uff0c\u663e\u7136\u53ef\u4ee5\u548c 2-sat \u626f\u4e0a\u5173\u7cfb\u3002\n\n\u8003\u8651\u5982\u4f55\u5efa\u56fe\u3002\n\n\u6ce8\u610f\u5230\uff0c\u5982\u679c\u9009\u62e9\u5c06\u67d0\u4e32\u7f6e\u4e3a trie \u6811\u4e0a $x$ \u6240\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u5219 $x$ \u5728 trie \u6811\u4e0a\u7684\u5b50\u6811\u548c\u7956\u5148\u90fd\u4e0d\u80fd\u9009\u3002\n\n\u90a3\u4e48\u4ea7\u751f\u4e86\u4e00\u4e2a naive \u7684\u60f3\u6cd5\uff1a\u5bf9\u4e8e trie \u4e0a\u7684\u8fb9 $(pa,x)$\uff0c\u8fde\u8fb9 $pa\\rightarrow x$\u3001$x\\rightarrow pa$\uff1b\u540c\u65f6\uff0c\u5bf9\u4e8e\u5b57\u7b26\u4e32 $S$ \u53ca\u5176 trie \u4e0a\u5bf9\u5e94\u8282\u70b9 $x$\uff0c\u8fde\u8fb9 $S\\rightarrow x$\uff0c$x\\rightarrow opp(S)$\u3002  \n\u6709\u95ee\u9898\uff1f\u4e0d\u7528\u614c\uff0c\u8fd9\u4e2a\u80af\u5b9a\u6709\u95ee\u9898\uff0c\u6211\u4eec\u4e00\u4e2a\u4e00\u4e2a\u6765\u89e3\u51b3\u3002\n\n\u9996\u5148\u4f1a\u53d1\u73b0\u5728\u4e00\u5f20\u56fe\u4e0a\u8fde\u4e0a\u884c\u4e0b\u884c\u7684\u7ed3\u679c\u5c31\u662f\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/il9ox3pv.png)  \n\u90a3\u4e48\u8003\u8651\u9650\u5236\u5176\u53ea\u80fd\u4e0a/\u4e0b\uff0c\u5bb9\u6613\u60f3\u5230\u62c6\u6210\u4e24\u5f20\u56fe\uff0c\u5206\u522b\u8fde\u3002\n\n\u7136\u540e\u4f60\u5c31\u4f1a\u53d1\u73b0\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/6r505n9p.png)  \n\u5176\u4e2d $x$\uff0c$y$ \u5206\u522b\u662f trie \u6811\u4e0a $S$ \u548c $S$ \u7684\u53cd\u9762 $S'$ \u5bf9\u5e94\u7684\u8282\u70b9\u3002\n\n\u548b\u529e\uff1f\u4e0d\u8fde\u4e0d\u5c31\u5b8c\u4e8b\u4e86\uff01  \n\u8ba9 $S\\rightarrow pa(x)/son(x)$ \u5373\u53ef\u89e3\u51b3\u3002\n\n\u4f60\u63a5\u7740\u53d1\u73b0\u4e0d\u5bf9\uff0c\u5982\u679c\u6709\u591a\u4e2a $S$ \u5bf9\u5e94\u7684\u662f\u4e00\u4e2a $x$\uff0c\u548b\u529e\u5462\uff1f  \n\u72ec\u7acb\u4e8e trie \u4e4b\u5916\uff0c\u5355\u72ec\u62ce\u51fa\u6765\u641e\uff1f\u66b4\u529b\u4f1a\u88ab\u5361\u5230 $O(n^2)$\uff0c\u6240\u4ee5\u518d\u6574\u4e00\u524d\u540e\u7f00\u4f18\u5316\u5efa\u56fe\uff1f\n\n\u592a\u9ebb\u70e6\u3002\u60f3\u60f3\uff0c**\u4f60\u7684\u66b4\u529b\u771f\u7684\u4f1a\u88ab\u5361\u5230 $O(n^2)$ \u5417**\uff1f\u5982\u679c\u4e00\u4e2a\u4e32\u51fa\u73b0\u8d85\u8fc7 $3$ \u6b21\uff0c\u8fd9\u4e2a\u56fe\u771f\u7684\u8fd8\u80fd\u6709\u89e3\u5417\uff1f  \n\u663e\u7136\u4e0d\u80fd\uff01\u6240\u4ee5\u4e00\u4e2a\u5b57\u7b26\u4e32\u6700\u591a\u51fa\u73b0\u4e24\u6b21\u3002\n\n\u9664\u4e86\u8fd9\u4e2a\uff0c\u8fd8\u80fd\u600e\u4e48\u5361\uff1f\u53ea\u80fd\u5c06\u67d0\u5b57\u7b26\u4e32\u7684\u6240\u6709\u4f4d\u7f6e\u4f9d\u6b21\u6362\u4e0a $?$\uff0c\u8fd9\u6837\u6570\u636e\u5927\u5c0f\u4e3a\u957f\u5ea6\u7684\u5e73\u65b9\u7684\u5509\uff1f\u603b\u957f\u5ea6\u53c8\u4fdd\u8bc1\u4e86\u5728 $5\\times 10^5$ \u4ee5\u5185\uff0c\u90a3\u4e0d\u5c31\u8bf4\u660e\u6211\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u5e73\u65b9\u7684\u5efa\u56fe\u4e5f\u5728 $5\\times 10^5$ \u8303\u56f4\uff1f\n\n[\u6012\u53f7\u5149\u660e.jpg](https://cdn.luogu.com.cn/upload/image_hosting/8ri3s40m.png)\n\n\u6709\u4e86\u8fd9\u4e2a\uff0c\u76f4\u63a5\u66b4\u529b\u5efa\u56fe\u5c31\u5f97\u4e86\u3002  \n\u8fd8\u8981\u52a0\u4e0a\u4e2a hash \u5224\u4e00\u4e0b\u76f8\u540c\u5b57\u7b26\u4e32\uff0c\u4e0d\u8fc7\u4f60\u76f4\u63a5 `map<string,int>` \u8fd9\u9898\u4e5f\u6ca1\u5361\u3002\n\n\u5b8c\u7ed3\u6492\u6124\u6012\uff0c\u70b9\u4e2a\u8d5e\u5427\u3002  \n\u653e\u4e2a\u4e0a\u9762\u627f\u8bfa\u7684 $\\mathtt{2kb}$ \u4ee3\u7801\u3002\n\n```cpp\n//\u6708\u4eae\u7167\u8000\u9752\u7a97\uff0c\u7a97\u91cc\u7a97\u5916\u7686\u6709\u9752\u8272\u7684\u5149\u3002\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef unsigned long long ull;\nconst int maxn = 3e6+10;\n#define opp(x) (x>n?x-n:x+n)\nvector<int>g[maxn];int qa,n,tot,dfn[maxn],low[maxn],dfx,B[maxn],iss[maxn],q[maxn],scc;\nvoid ADD(int x,int y) {g[x].push_back(y);}\nvoid tar(int x) {\n\tdfn[x]=low[x]=++dfx,iss[x]=1,q[++q[0]]=x;\n\tfor(auto y:g[x])\n\t\tif(!dfn[y]) tar(y),low[x]=min(low[x],low[y]);\n\t\telse if(iss[y]) low[x]=min(low[x],dfn[y]);\n\tif(dfn[x]==low[x]) for(++scc;B[q[q[0]]]=scc,iss[q[q[0]]]=0,q[q[0]--]^x;);\n}\nchar SCC() {for(int i=1;i<=tot;i++) if(!dfn[i]) tar(i);for(int i=1;i<=n;i++) if(B[i]==B[n+i]) return 0;return 1;}\nvoid CLS() {for(int i=1;i<=tot;i++) dfn[i]=low[i]=0;dfx=scc=0;}\nint rt,ch[maxn][2],N[maxn];\nvector<int>ve[maxn];\nvoid ins(char*S,int nm) {\n\tint x=rt;\n\tfor(int i=0;S[i];i++) x=(ch[x][S[i]^48]?ch[x][S[i]^48]:ch[x][S[i]^48]=++tot);\n\tve[x].push_back(nm);\n}\nvoid byd(int x,int pa) {\n\tif(!x) return;N[x]=++tot;\n\tif(pa) ADD(x,pa),ADD(N[pa],N[x]);\n\tfor(auto y:ve[x]) ADD(y,pa),ADD(x,opp(y)),ADD(N[x],opp(y));\n\tfor(auto y:ve[pa]) ADD(y,N[x]);\n\tfor(auto y:ve[x])\n\t\tfor(auto z:ve[x]) if(y^z) ADD(y,opp(z));\n\tbyd(ch[x][0],x),byd(ch[x][1],x);\n}\nchar S[maxn];string s[maxn];\nunordered_map<ull,int>mp;\null has(char*S) {ull r=0;for(int i=0;S[i];i++) r=r*137+S[i];return r;}\nsigned main() {\n\tscanf(\"%d\",&n),rt=tot=(n<<1|1);\n\tfor(int i=1;i<=n;i++) {\n\t\tscanf(\"%s\",S),s[i]=S;if(++mp[has(S)]==3) return cout<<\"NO\\n\",0;\n\t\tfor(int j=0;;j++)\n\t\t\tif(!S[j]) {ins(S,i),ins(S,n+i);break;}\n\t\t\telse if(S[j]=='?') {S[j]='0',ins(S,i),S[j]='1',ins(S,n+i);break;}\n\t}byd(rt,0);\n\tif(SCC()) {\n\t\tcout<<\"YES\\n\";\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=0;;j++)\n\t\t\t\tif(!s[i][j]) {cout<<s[i]<<'\\n';break;}\n\t\t\t\telse if(s[i][j]=='?') {s[i][j]='0'+(B[i]>B[n+i]);cout<<s[i]<<'\\n';break;}\n\t} else cout<<\"NO\\n\";\n\treturn 0;\n}\n```",
        "postTime": 1631063623,
        "uid": 106182,
        "name": "KaisuoShutong",
        "ccfLevel": 0,
        "title": "P6965 [NEERC2016]Binary Code \u9898\u89e3"
    },
    {
        "content": "\u6ce8\u610f\u5230\u5173\u952e\u6027\u8d28\uff1a\u6bcf\u4e2a\u4e32\u81f3\u591a\u5305\u542b\u4e00\u4e2a\u95ee\u53f7\u3002\u56e0\u6b64\u6bcf\u4e2a\u4e32\u81f3\u591a\u53ea\u6709\u4e24\u79cd\u72b6\u6001\uff0c\u53ef\u4ee5\u7528 bool \u53d8\u91cf\u8868\u793a\u3002\n\n\u4e8e\u662f\u60f3\u5230 2-SAT\u3002\u4f46\u662f\u4e24\u4e24\u679a\u4e3e\u70b9\u5bf9\u5efa\u56fe\u4f1a\u8d85\u65f6\u3002\n\n\u6ce8\u610f\u5230\u4e32\u7684\u603b\u957f\u4e0d\u8d85\u8fc7 $5\\times10^5$\uff0c\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u4e32\u7684\u6240\u6709\u524d\u7f00\u5efa\u4e00\u4e2a\u65b0\u70b9\u3002\u5efa\u70b9\u7684\u8fc7\u7a0b\u53ef\u4ee5\u7528 hash \u6216\u5b57\u5178\u6811\u5b9e\u73b0\u3002\n\n\u9009\u4e86\u4e00\u4e2a\u4e32\u5c31\u4e0d\u80fd\u9009\u5b83\u7684\u524d\u7f00\uff0c\u56e0\u6b64\u8981\u5411\u5b83\u7684\u6240\u6709\u524d\u7f00\u8fde\u8fb9\u3002\u7528\u524d\u7f00\u4f18\u5316\u5efa\u56fe\u7684\u5957\u8def\u53ef\u4ee5\u5c06\u8fb9\u6570\u4f18\u5316\u5230\u7ebf\u6027\u3002\n\n\u7136\u800c\u8fd9\u6837\u5efa\u56fe\u4e0d\u80fd\u5904\u7406\u76f8\u540c\u4e32\u7684\u60c5\u51b5\uff0c\u8fd8\u8981\u5728\u76f8\u540c\u4e32\u4e4b\u95f4\u8fde\u8fb9\uff0c\u540c\u6837\u53ef\u4ee5\u524d\u7f00\u4f18\u5316\u5efa\u56fe\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n+\\sum|S|)$\uff0c\u4ee3\u7801\u5b9e\u73b0\u7ec6\u8282\u8f83\u591a\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ul unsigned long long\nconst ul P=1ll<<60|7;\nconst int A=5e5+7,B=3e6+7,N=6e6+7,M=1e7+7;\n#define Y(x) ((x)*2)\n#define N(x) ((x)*2+1)\nint t,o,m,he[N],to[M],ne[M],lo[N],id,bl[N],ct,st[N],tp,p[A],a[A],pr[N],v[B];\nstring s[A];\nunordered_map<ul,int>mp;\nvoid add(int x,int y){ne[++t]=he[x],to[t]=y,he[x]=t;}\nvoid ins(int x,int y){add(x,y),add(y^1,x^1);}\nvoid tar(int x){//Tarjan \u6c42\u5f3a\u8fde\u901a\u5206\u91cf\n\tint p=++id,i=he[x],j;\n\tfor(lo[st[++tp]=x]=p;i;i=ne[i])if(!lo[j=to[i]])tar(j),lo[x]=min(lo[x],lo[j]);else if(!bl[j])lo[x]=min(lo[x],lo[j]);\n\tif(lo[x]==p)for(++ct;bl[st[tp]]=ct,st[tp--]!=x;);\n}\nvoid g1(ul u,int k){//\u5411\u524d\u7f00\u8fde\u8fb9\n\tif(!mp[u]){\n\t\tint p=++m;\n\t\tif(mp[u]=++m,pr[Y(m)]=p,ins(Y(m),Y(p)),k)ins(Y(pr[Y(k)]),Y(p)),ins(Y(m),N(pr[Y(k)]));\n\t}\n}\nvoid g2(int k,int a){//\u76f8\u540c\u4e32\u8fde\u8fb9\n\tins(a,Y(pr[a]=++m)),ins(a,Y(k));\n\tif(v[k])ins(Y(v[k]),Y(m)),ins(a,N(v[k]));\n\tv[k]=m;\n}\nint main(){\n\tint n,i,j,k,l;\n\tul u;\n\tios::sync_with_stdio(0),cin.tie(0),cout.tie(0),cin>>n;\n\tfor(i=1;i<=n;++i){\n\t\tif(cin>>s[i],p[i]=s[i].find('?'),a[i]=++m,l=s[i].size(),~p[i])s[i][p[i]]='0';\n\t\tfor(u=j=k=0;j<l;k=mp[u],++j)g1(u=(u*7+s[i][j])%P,k);\n\t\tif(g2(k,Y(a[i])),~p[i]){\n\t\t\tfor(u=j=k=0,s[i][p[i]]='1';j<l;k=mp[u],++j)g1(u=(u*7+s[i][j])%P,k);\n\t\t\tg2(k,N(a[i]));\n\t\t}else add(N(a[i]),Y(a[i]));\n\t}\n\tfor(i=0;i<N;++i)if(!lo[i])tar(i);\n\tfor(i=1;i<=m;++i)if(bl[Y(i)]==bl[N(i)])return cout<<\"NO\\n\",0;\n\tfor(i=1,cout<<\"YES\\n\";i<=n;cout<<s[i++]<<'\\n')if(~p[i]&&bl[Y(a[i])]<bl[N(a[i])])s[i][p[i]]='0';\n\treturn 0;\n}\n```\n",
        "postTime": 1605235860,
        "uid": 221955,
        "name": "panyf",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P6965 \u3010[NEERC2016]Binary Code\u3011"
    },
    {
        "content": "*[P6965 [NEERC2016] Binary Code](https://www.luogu.com.cn/problem/P6965)\n\n\u4e00\u4e2a\u5b57\u7b26\u4e32\u81f3\u591a\u542b\u6709\u4e00\u4e2a\u95ee\u53f7\uff0c\u6240\u4ee5\u72b6\u6001\u81f3\u591a\u6709\u4e24\u79cd\uff0c\u8003\u8651 2-SAT\uff0c\u8bbe $x_i$ \u8868\u793a\u7b2c $i$ \u4e2a\u5b57\u7b26\u4e32\u7684\u95ee\u53f7\u586b $0$\uff0c$\\lnot x_i$ \u8868\u793a\u7b2c $i$ \u4e2a\u5b57\u7b26\u4e32\u7684\u95ee\u53f7\u586b $1$\u3002\u73b0\u5728\u6211\u4eec\u6709 $2n$ \u4e2a\u5b57\u7b26\u4e32\u548c $2n$ \u4e2a\u6587\u5b57\uff0c\u5b83\u4eec\u4e4b\u95f4\u4e00\u4e00\u5bf9\u5e94\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u82e5\u5b57\u7b26\u4e32 $s$ \u662f $t$ \u7684\u524d\u7f00\uff0c\u5219\u82e5 $s$ \u5bf9\u5e94\u6587\u5b57\u4e3a\u771f\uff0c\u5219 $t$ \u5bf9\u5e94\u6587\u5b57\u4e3a\u5047\uff1b\u82e5 $t$ \u5bf9\u5e94\u6587\u5b57\u4e3a\u771f\uff0c\u5219 $s$ \u5bf9\u5e94\u6587\u5b57\u4e3a\u5047\u3002\u8fd9\u8bf4\u660e\u82e5 $s$ \u5219\u975e $t$\uff0c\u82e5 $t$ \u5219\u975e $s$\u3002\n\n\u523b\u753b\u524d\u7f00\u5173\u7cfb\u7684\u7ed3\u6784\u662f\u5b57\u5178\u6811\u3002\u5bf9\u4e8e\u82e5 $s$ \u5219\u975e $t$ \u7684\u9650\u5236\uff0c\u6211\u4eec\u9700\u8981\u4ece $s$ \u5411\u5b83\u7684\u5b50\u6811\u5185\u6240\u6709\u5b57\u7b26\u4e32\u7684 **\u5426\u5b9a** \u8fde\u8fb9\u3002\u5bf9\u4e8e\u82e5 $t$ \u5219\u975e $s$ \u7684\u9650\u5236\uff0c\u6211\u4eec\u9700\u8981\u4ece $t$ \u5411\u5b83\u7684\u7956\u5148\u5bf9\u5e94\u7684\u6240\u6709\u5b57\u7b26\u4e32\u7684 **\u5426\u5b9a** \u8fde\u8fb9\u3002\u56e0\u6b64\uff0c\u5efa\u51fa\u6839\u5411\u5b57\u5178\u6811\u548c\u53f6\u5411\u5b57\u5178\u6811\u3002\u5728\u4e24\u68f5\u5b57\u5178\u6811\u4e0a\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u72b6\u6001\u5411\u5b83\u5bf9\u5e94\u6587\u5b57\u7684\u5426\u5b9a\u8fde\u8fb9\u3002\u4e3a\u9632\u6b62\u51fa\u73b0 $s$ \u548c $t$ \u5bf9\u5e94\u540c\u4e00\u5b57\u7b26\u4e32\u7684\u60c5\u51b5\uff0c\u5728\u53f6\u5411\u5b57\u5178\u6811\u4e0a\uff0c$s$ \u5bf9\u5e94\u6587\u5b57\u53ea\u80fd\u5411\u5b83\u5bf9\u5e94\u72b6\u6001\u7684\u4e24\u4e2a\u513f\u5b50\u8fde\u8fb9\uff0c\u5426\u5219 $s$ \u4f1a\u5411 $s$ \u7684\u5426\u5b9a\u8fde\u8fb9\uff0c\u5bfc\u81f4\u5fc5\u7136\u65e0\u89e3\u3002\u540c\u7406\uff0c\u5728\u6839\u5411\u5b57\u5178\u6811\u4e0a\uff0c$s$ \u5bf9\u5e94\u6587\u5b57\u5411\u5b83\u5bf9\u5e94\u8282\u70b9\u7684\u7236\u4eb2\uff08\u800c\u975e\u5b83\u672c\u8eab\uff09\u8fde\u8fb9\u3002\n\n\u6211\u4eec\u8fd8\u8981\u5904\u7406 $s = t$ \u4f46\u5bf9\u5e94\u4e0d\u540c\u5b57\u7b26\u4e32\u7684\u60c5\u51b5\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u5c06\u76f8\u7b49\u7684\u5b57\u7b26\u4e32\u6392\u6210\u4e00\u884c\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4f1a\u5411\u6240\u6709\u9664\u4e86\u5b83\u672c\u8eab\u7684\u5176\u5b83\u5b57\u7b26\u4e32\u7684 **\u5426\u5b9a** \u8fde\u8fb9\uff0c\u53ef\u4ee5\u901a\u8fc7\u524d\u7f00\u540e\u7f00\u4f18\u5316\u5efa\u56fe\u505a\u5230\u3002\n\n\u7efc\u4e0a\uff0c\u70b9\u6570\u548c\u8fb9\u6570\u5173\u4e8e $n$ \u548c\u5b57\u5178\u6811\u5927\u5c0f $m$ \u7ebf\u6027\u3002\u70b9\u6570\u4e0d\u8d85\u8fc7 $4n + 2m$\uff0c\u800c $m \\leq 2n$\uff0c\u6240\u4ee5\u70b9\u6570\u4e0d\u8d85\u8fc7 $8n$\u3002[\u4ee3\u7801](https://codeforces.com/gym/101190/submission/178906838)\u3002",
        "postTime": 1667359742,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "P6965 [NEERC2016] Binary Code"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a[2-SAT](https://oi-wiki.org/graph/2-sat/)\u3001[Trie \u6811](https://oi-wiki.org/string/trie/)\n\n\u770b\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u81f3\u591a\u4e00\u4e2a `?`\uff0c\u5bb9\u6613\u60f3\u5230 2-SAT\u3002\u5bf9\u4e8e\u90a3\u4e9b\u6ca1\u6709 `?` \u7684\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u94a6\u5b9a\u4e00\u4e2a\u4f4d\u7f6e\u6709 `?` \u5e76\u5f3a\u5236\u9009\u62e9\u5176\u672c\u6765\u7684\u5b57\u7b26\u3002\n\n\u770b\u5230\u5b57\u7b26\u4e32\u7684\u524d\u7f00\uff0c\u5bb9\u6613\u60f3\u5230 Trie \u6811\u3002\u4e00\u4e2a\u5b57\u7b26\u4e32 $a$ \u662f\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32 $b$ \u7684\u524d\u7f00\uff0c\u5f53\u4e14\u4ec5\u5f53 $a$ \u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u6240\u5728\u8282\u70b9\u662f $b$ \u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u6240\u5728\u8282\u70b9\u7684\u7956\u5148\u3002\n\n\u4e8e\u662f\u6211\u4eec\u4f3c\u4e4e\u53e3\u80e1\u51fa\u6765\u4e86\uff1a\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u5206\u522b\u4ee3\u8868 `?` \u5904\u586b `0` \u548c `1` \u65f6\u6240\u5f97\u7684\u5b57\u7b26\u4e32\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5b9e\u73b0\u65b9\u9762\u7684\u95ee\u9898\u4e86\u3002\n\n1. \u5982\u4f55\u5b9e\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u9009\u4e86\u4ee5\u5b83\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u5c31\u4e0d\u80fd\u9009\u4ee5\u5b83\u7684\u7956\u5148\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff1f\n\n\u6811\u4e0a\u524d\u7f00\u4f18\u5316\u5efa\u56fe\u5373\u53ef\u3002\n\n2. \u5982\u4f55\u5b9e\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u4ee5\u5b83\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u81f3\u591a\u53ea\u80fd\u9009\u4e00\u4e2a\uff1f\n\n\u524d\u540e\u7f00\u4f18\u5316\u5efa\u56fe\u5373\u53ef\u3002\n\n3. \u5982\u4f55\u5b9e\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u9009\u4e86\u4ee5\u5b83\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u5c31\u4e0d\u80fd\u9009\u4ee5\u5b83\u5b50\u6811\u4e2d\uff08\u9664\u4e86\u5b83\u672c\u8eab\uff09\u7684\u8282\u70b9\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff1f\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a Trie \u6811\u4e0a\u7684\u8282\u70b9\uff0c\u65b0\u5efa\u4e00\u4e2a\u70b9\u8868\u793a\u4e0d\u80fd\u9009\u5b83\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u5373\u53ef\u3002\n\n\u7efc\u4e0a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n + \\sum |S|)$\u3002~~\u5176\u5b9e\u5e38\u6570\u8fd8\u86ee\u5927\u7684\uff08~~\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <stack>\n#include <vector>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\ntypedef struct {\n\tint other;\n\tint son[7];\n} Node;\n\ntypedef struct {\n\tint nxt;\n\tint end;\n} Edge;\n\nint dot_id = 1, cnt = 0;\nint blank[500007], fa[2000007], id[500007][7], head[5000007], pos[2000007], subtree[2000007], pre[2000007], dfn[5000007], low[5000007], belong[5000007];\nchar s[500007];\nbool mark[2000007], vis1[5000007], vis2[5000007];\nNode tree[2000007];\nEdge edge[9000007];\nstack<int> stk;\nvector<int> v1[2000007], v2[2000007], v3[2000007];\nvector<string> v4;\n\ninline void add_edge(int start, int end){\n\tcnt++;\n\tedge[cnt].nxt = head[start];\n\thead[start] = cnt;\n\tedge[cnt].end = end;\n}\n\ninline int insert(char s[]){\n\tint len = strlen(&s[1]), pos = 1;\n\tfor (register int i = 1; i <= len; i++){\n\t\tint ch = s[i] - '0';\n\t\tif (tree[pos].son[ch] == 0){\n\t\t\tdot_id++;\n\t\t\ttree[pos].son[ch] = dot_id;\n\t\t\tfa[dot_id] = pos;\n\t\t}\n\t\tpos = tree[pos].son[ch];\n\t}\n\tdot_id++;\n\tfa[dot_id] = pos;\n\tmark[dot_id] = true;\n\tv1[pos].push_back(dot_id);\n\treturn dot_id;\n}\n\nvoid tarjan(int u, int &id, int &scc_cnt){\n\tdfn[u] = low[u] = ++id;\n\tvis1[u] = vis2[u] = true;\n\tstk.push(u);\n\tfor (register int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tif (!vis1[x]){\n\t\t\ttarjan(x, id, scc_cnt);\n\t\t\tlow[u] = min(low[u], low[x]);\n\t\t} else if (vis2[x]){\n\t\t\tlow[u] = min(low[u], dfn[x]);\n\t\t}\n\t}\n\tif (dfn[u] == low[u]){\n\t\tint cur;\n\t\tscc_cnt++;\n\t\tdo {\n\t\t\tcur = stk.top();\n\t\t\tstk.pop();\n\t\t\tvis2[cur] = false;\n\t\t\tbelong[cur] = scc_cnt;\n\t\t} while (cur != u);\n\t}\n}\n\nint main(){\n\tint n, dfn_id = 0, scc_cnt = 0, t;\n\tscanf(\"%d\", &n);\n\tfor (register int i = 1; i <= n; i++){\n\t\tint len;\n\t\tscanf(\"%s\", &s[1]);\n\t\tlen = strlen(&s[1]);\n\t\tblank[i] = -1;\n\t\tv4.push_back((string)&s[1]);\n\t\tfor (register int j = 1; j <= len; j++){\n\t\t\tif (s[j] == '?'){\n\t\t\t\tblank[i] = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (blank[i] == -1){\n\t\t\tid[i][0] = insert(s);\n\t\t\ts[1] = s[1] == '0' ? '1' : '0';\n\t\t\tid[i][1] = insert(s);\n\t\t\tadd_edge(id[i][1], id[i][0]);\n\t\t} else {\n\t\t\ts[blank[i]] = '0';\n\t\t\tid[i][0] = insert(s);\n\t\t\ts[blank[i]] = '1';\n\t\t\tid[i][1] = insert(s);\n\t\t}\n\t\ttree[id[i][0]].other = id[i][1];\n\t\ttree[id[i][1]].other = id[i][0];\n\t}\n\tt = dot_id;\n\tfor (register int i = 1; i <= t; i++){\n\t\tif (mark[i]){\n\t\t\tif (tree[fa[i]].other == 0) tree[fa[i]].other = ++dot_id;\n\t\t\tadd_edge(tree[fa[i]].other, tree[i].other);\n\t\t}\n\t}\n\tfor (register int i = t; i >= 1; i--){\n\t\tif (!mark[i]){\n\t\t\tsubtree[i] = ++dot_id;\n\t\t\tif (tree[i].other != 0) add_edge(subtree[i], tree[i].other);\n\t\t\tif (tree[i].son[0] != 0) add_edge(subtree[i], subtree[tree[i].son[0]]);\n\t\t\tif (tree[i].son[1] != 1) add_edge(subtree[i], subtree[tree[i].son[1]]);\n\t\t}\n\t}\n\tfor (register int i = 1; i <= t; i++){\n\t\tif (!mark[i]){\n\t\t\tint size = v1[i].size(), cur_id = ++dot_id;\n\t\t\tv2[i].resize(size);\n\t\t\tv3[i].resize(size);\n\t\t\tfor (register int j = 0; j < size; j++){\n\t\t\t\tpos[v1[i][j]] = j;\n\t\t\t\tv2[i][j] = ++dot_id;\n\t\t\t\tv3[i][j] = ++dot_id;\n\t\t\t\tif (tree[i].son[0] != 0) add_edge(v1[i][j], subtree[tree[i].son[0]]);\n\t\t\t\tif (tree[i].son[1] != 0) add_edge(v1[i][j], subtree[tree[i].son[1]]);\n\t\t\t}\n\t\t\tfor (register int j = 0; j < size; j++){\n\t\t\t\tadd_edge(v2[i][j], tree[v1[i][j]].other);\n\t\t\t\tadd_edge(v3[i][j], tree[v1[i][j]].other);\n\t\t\t\tif (j > 0) add_edge(v2[i][j], v2[i][j - 1]);\n\t\t\t\tif (j + 1 < size) add_edge(v3[i][j], v3[i][j + 1]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (register int i = 1; i <= t; i++){\n\t\tif (!mark[i]){\n\t\t\tpre[i] = ++dot_id;\n\t\t\tif (tree[i].other != 0) add_edge(pre[i], tree[i].other);\n\t\t\tif (fa[i] != 0) add_edge(pre[i], pre[fa[i]]);\n\t\t} else {\n\t\t\tif (pos[i] > 0) add_edge(i, v2[fa[i]][pos[i] - 1]);\n\t\t\tif (pos[i] + 1 < v1[fa[i]].size()) add_edge(i, v3[fa[i]][pos[i] + 1]);\n\t\t\tif (fa[fa[i]] != 0) add_edge(i, pre[fa[fa[i]]]);\n\t\t}\n\t}\n\tfor (register int i = 1; i <= dot_id; i++){\n\t\tif (!vis1[i]) tarjan(i, dfn_id, scc_cnt);\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tif (belong[id[i][0]] == belong[id[i][1]]){\n\t\t\tprintf(\"NO\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"YES\\n\");\n\tfor (register int i = 1; i <= n; i++){\n\t\tint i_d = i - 1;\n\t\tif (blank[i] != -1){\n\t\t\tif (belong[id[i][0]] < belong[id[i][1]]){\n\t\t\t\tv4[i_d][blank[i] - 1] = '0';\n\t\t\t} else {\n\t\t\t\tv4[i_d][blank[i] - 1] = '1';\n\t\t\t}\n\t\t}\n\t\tprintf(\"%s\\n\", v4[i_d].c_str());\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1645452037,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6965 \u3010[NEERC2016] Binary Code\u3011"
    },
    {
        "content": "> (**2021\u96c6\u8bad\u961f\u4f5c\u4e1a P6965 \u3010[NEERC2016]Binary Code\u3011**)\u7ed9\u5b9a $n$ \u4e2a\u603b\u957f\u5ea6\u4e0d\u8d85\u8fc7 $5\\times10^5$ \u7684\u4e8c\u8fdb\u5236\u4e32\uff0c\u6bcf\u4e2a\u4e32\u4e2d\u6700\u591a\u6709\u4e00\u4e2a\u4f4d\u7f6e\u4e0d\u786e\u5b9a\uff08\u6807\u8bb0\u4e3a $\\texttt{?}$\uff09\uff0c\u6c42\u4e00\u79cd\u66ff\u6362\u95ee\u53f7\u7684\u65b9\u6848\u4f7f\u5f97\u8fd9\u4e9b\u4e32\u4e2d\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u524d\u7f00\uff0c\u6216\u8f93\u51fa\u65e0\u89e3\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u6b21\u63a5\u89e6\u76f8\u5173\u5957\u8def\u7684\u4eba\u6765\u8bf4\u7ec6\u8282\u8f83\u591a\uff0c~~\u6211\u4e24\u4e09\u4e2a\u5c0f\u65f6\u624d\u5b8c\u5168\u634b\u6e05\u695a\u3002~~\n\n\u8bb0 $(i,t)$ \u8868\u793a\u4e32 $s_i$ \u7684\u95ee\u53f7\u586b\u4e86 $t(t\\in\\{0,1\\})$ \u540e\u5f62\u6210\u7684\u4e32\uff0c\u5c06\u4e0d\u8d85\u8fc7 $2n$ \u4e2a\u4e32 $(i,t)$ \u63d2\u5165 Trie\uff0c\u9898\u76ee\u6240\u6c42\u5373\u7b49\u4ef7\u4e8e\u5728\u5176\u4e2d\u9009\u62e9 $n$ \u4e2a\u70b9\uff08\u5bf9\u6bcf\u4e2a $s_i$\uff0c\u4ece $(i,0),(i,1)$ \u4e2d\u6070\u597d\u9009\u62e9\u4e00\u4e2a\u70b9\uff09\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e92\u4e0d\u4e3a\u7956\u5148\u5173\u7cfb\u3002\n\n\u8003\u8651 2-SAT\uff0c$u\\rightarrow v$ \u8868\u793a\u82e5\u9009\u4e86 $u$ \u5219\u5fc5\u7136\u9009 $v$\u3002\u82e5 $v$ \u662f $u$ \u7684\u7956\u5148\uff0c\u5219\u5e94\u5f53\u6709\u8def\u5f84 $u \\leadsto \\neg v$\u3002\u5982\u679c\u66b4\u529b\u76f4\u63a5\u8fde\u8fb9\u663e\u7136\u4f1a `MLE+TLE`\uff0c\u53ef\u4ee5\u8003\u8651\u5c06 $u$ \u8fde\u63a5\u5230 Trie \u4e0a\u5bf9\u5e94\u7684\u70b9\uff0c\u518d\u628a $v$ \u5728 Trie \u4e0a\u7684\u5b9a\u70b9\u8fde\u63a5\u5230 $\\neg v$\u3002\u5bf9\u4e8e Trie \u4e0a\u7684\u70b9\uff0c\u7531\u513f\u5b50\u8fde\u5411\u7236\u8282\u70b9\u3002\n\n\u4f46\u662f\u6ce8\u610f\u5230\u8fd9\u6837\u8fde\u8fb9\u6709\u4e2a\u95ee\u9898\uff0c\u4f1a\u51fa\u73b0 $(i,t)\\rightarrow u\\rightarrow(i,\\neg t)$ \u7684\u8fde\u8fb9\uff0c\u8fd9\u662f\u77db\u76fe\u7684\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u66ff\u4ee3\u65b9\u6848\uff1a\u82e5 Trie \u4e2d\u4e00\u4e2a\u70b9\u4e0a\u6709 $m$ \u4e2a\u4e32\uff0c\u5219\u628a\u8fd9\u4e2a\u7ed3\u70b9\u62c6\u6210 $m$ \u4e2a\u5c0f\u7ed3\u70b9\uff0c\u9996\u5148\u4ece\u5927\u7ed3\u70b9\u5230\u6240\u6709\u5c0f\u7ed3\u70b9\u8fde\u4e00\u6761\u8fb9\u3002\u8bbe $(i,t)$ \u5bf9\u5e94\u7684\u5c0f\u7ed3\u70b9\u4e3a $u$\uff0c\u5219\u5bf9\u4e8e\u5176\u4ed6 $m-1$ \u4e2a\u5c0f\u7ed3\u70b9 $v\\not=u$\uff0c\u8fde\u63a5 $(i,t)\\rightarrow v$\u3002\u7136\u540e\u6b63\u5e38\u8fde\u6240\u6709\u5c0f\u7ed3\u70b9\u5230 $(i,\\neg t)$ \u7684\u8fb9\u3002\u6613\u89c1\u6b64\u65f6\u5c31\u4e0d\u5b58\u5728 $(i,t)\\leadsto(i,\\neg t)$ \u7684\u8def\u5f84\u4e86\uff0c\u77db\u76fe\u88ab\u89e3\u51b3\u4e86\u3002\u7136\u540e\u6240\u6709\u5c0f\u7ed3\u70b9\u5168\u90e8\u8fde\u5411\u5927\u7ed3\u70b9\u7684\u7236\u4eb2\u5927\u7ed3\u70b9\u3002\n\n\u7136\u800c\u8fd9\u6837\u8fb9\u6570\u6781\u591a\uff0c\u4f9d\u7136\u4f1a `MLE+TLE`\u3002\u8003\u8651\u524d\u540e\u7f00\u4f18\u5316\u5efa\u8fb9\uff08\u8fd9\u91cc\u91c7\u7528\u524d\u7f00\u7684\u5199\u6cd5\uff09\uff0c\u8bbe $m$ \u4e2a\u5c0f\u7ed3\u70b9\u5206\u522b\u4e3a $v_1,v_2,...,v_m$\uff0c\u6211\u4eec\u9996\u5148\u8fde\u6240\u6709\u8fb9 $v_{i+1}\\rightarrow v_i$\uff0c\u90a3\u4e48\u4ece\u67d0\u4e2a $s$ \u8fde\u63a5\u5230 $v_i$ \u5c31\u7b49\u4ef7\u4e8e\u540c\u65f6\u8fde\u63a5 $v_1,...,v_i$\uff0c\u7c7b\u4f3c\u5730\uff0c\u4ece $v_i,...,v_m$ \u540c\u65f6\u8fde\u63a5\u5230 $s$ \u5c31\u7b49\u4ef7\u4e8e\u4ece $v_i$ \u8fde\u63a5\u5230 $s$\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6765\u4f18\u5316\u4e0a\u9762\u7684\u5efa\u8fb9\u8fc7\u7a0b\u4e86\u3002\u8bbe $(i,t)$ \u5bf9\u5e94\u7ed3\u70b9 $v_j$\uff08\u6539\u7528 j \u662f\u4e3a\u4e86\u9632\u6b62\u540d\u79f0\u6b67\u4e49\uff09\uff0c\u5219\u76ee\u7684\u662f\u4ece $(i,t)$ \u8fde\u5411\u6240\u6709 $v_k(k\\not=j)$\u3002\u6ce8\u610f\u5230 $u\\rightarrow\\neg v$ \u548c $v\\rightarrow \\neg u$ \u4e2d\u53ea\u8981\u6709\u4e00\u4e2a\u5c31\u8db3\u591f\u8868\u8fbe\u4e92\u65a5\u5173\u7cfb\uff0c\u6211\u4eec\u7ea6\u5b9a\u4ece\u7f16\u53f7\u8f83\u5c0f\u7684\u5927\u8282\u70b9\u5bf9\u5e94\u7684\u4e32\u8fde\u5411\u7f16\u53f7\u8f83\u5c0f\u7684\u5c0f\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u4ece $(i,t)$ \u8fde\u5411 $v_1,...,v_{j-1}$\u3002\u56e0\u6b64\u8f6c\u5316\u4e3a\u4ece $(i,t)$ \u8fde\u5411 $v_{j-1}$\uff08\u524d\u7f00\u4f18\u5316\u5efa\u8fb9\uff09\uff0c\u7c7b\u4f3c\u5730\uff0c\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u65b9\u5411\uff0c\u6211\u4eec\u7ea6\u5b9a\u4ece\u7f16\u53f7\u8f83\u5927\u7684\u5c0f\u8282\u70b9\u8fde\u5411\u7f16\u53f7\u8f83\u5c0f\u7684\u5c0f\u8282\u70b9\u5bf9\u5e94\u7684\u4e32\uff08\u7684\u53d6\u53cd\uff09\uff0c\u4e5f\u5c31\u662f\u4ece $v_j,...,v_m$ \u8fde\u5411 $(i,\\neg t)$\uff0c\u524d\u7f00\u4f18\u5316\u5efa\u8fb9\u4e4b\u540e\u8f6c\u53d8\u4e3a\u4ece $v_j$ \u8fde\u5411 $(i,\\neg t)$\u3002\n\n\u5bf9\u4e8e\u6ca1\u6709\u95ee\u53f7\u7684\u60c5\u51b5\uff0c\u968f\u4fbf\u94a6\u5b9a\u4e00\u4e2a\u95ee\u53f7\uff0c\u5047\u8bbe\u95ee\u53f7\u5904\u539f\u6765\u662f $t$\uff0c\u8fde\u63a5 $(i,\\neg t)\\rightarrow(i,t)$ \u5373\u53ef\u3002\u8fd9\u6837\u5c31\u53ea\u80fd\u9009 $t$ \u4e86\u3002\n\n\u5c0f\u6280\u5de7\uff1a\u7531\u62bd\u5c49\u539f\u7406\u7a0d\u52a0\u5206\u6790\u53ef\u4ee5\u5f97\u51fa\uff0c\u5b57\u7b26\u4e32\u6570\u91cf\u8d85\u8fc7 $10^5$ \u65f6\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\u65e0\u89e3\u3002\n\n```cpp\n#define P(x) (((x) << 1) - 1) // \u539f\u547d\u9898\n#define Q(x) ((x) << 1) // \u53cd\u547d\u9898\n#define neg(x) ((((x) - 1) ^ 1) + 1)\nconst int N = 1e6 + 10;\nint n, lst[N], zero[N], one[N];\nchar s[N];\nvector<int> vec[N];\nstruct Trie {\n\tint tot, ch[N][2], c[N], fa[N];\n\tchar outp[N], *tt;\n\tTrie() : tot(1) {}\n\tinline int insert(const char *s) {\n\t\tint ptr = 1, len = strlen(s);\n\t\tfor (int i = 0, t; i < len; ++i) {\n\t\t\tt = s[i] - 48 & 1;\n\t\t\tif (ch[ptr][t]) ptr = ch[ptr][t];\n\t\t\telse ++tot, fa[tot] = ptr, c[tot] = t, ptr = ch[ptr][t] = tot;\n\t\t}\n\t\treturn ptr;\n\t}\n\tinline void print(int ptr) {\n\t\ttt = outp;\n\t\twhile (ptr != 1) *tt++ = c[ptr] + 48, ptr = fa[ptr];\n\t\tdo putchar(*--tt); while (tt != outp);\n\t\tputchar('\\n');\n\t}\n} tr;\nnamespace SAT {\n\tconst int M = N << 2;\n\tvector<int> eg[M];\n\tinline void addedge(int u, int v) {eg[u].push_back(v), eg[neg(v)].push_back(neg(u));}\n\tint tot, dfn[M], low[M], bl[M], mch[M], tmp[M], res[M], tim, cnt;\n\tbool ins[M];\n\tstack<int> S;\n\tvoid tarjan(int x) {\n\t\tdfn[x] = low[x] = ++tim, ins[x] = true, S.push(x);\n\t\tfor (int v : eg[x])\n\t\t\tif (!dfn[v]) tarjan(v), low[x] = min(low[x], low[v]);\n\t\t\telse if (ins[v]) low[x] = min(low[x], dfn[v]);\n\t\tif (dfn[x] == low[x]) {\n\t\t\tint y; ++cnt;\n\t\t\tdo y = S.top(), ins[y] = false, bl[y] = cnt, S.pop(); while (y != x);\n\t\t}\n\t}\n\tinline bool solve() {\n\t\tfor (int i = 1; i <= tot; ++i)\n\t\t\tif (!dfn[i]) tarjan(i);\n\t\tfor (int i = 1, u, v; i <= tot; i += 2) {\n\t\t\tif (bl[i] == bl[i + 1]) return false;\n\t\t\tmch[i] = i + 1, mch[i + 1] = i;\n\t\t}\n\t\tfor (int i = 1; i <= tot; ++i)\n\t\t\tres[i] = bl[i] < bl[mch[i]] ? 1 : -1;\n\t\treturn true;\n\t}\n}\nint main() {\n\tios :: sync_with_stdio(0), cin.tie(0);\n\tcin >> n;\n\tif (n > 100000) return puts(\"NO\"), 0;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tcin >> s; int len = strlen(s);\n\t\tint pos = find(s, s + len, '?') - s;\n\t\tif (pos != len) s[pos] = 48, zero[i] = tr.insert(s), s[pos] = 49, one[i] = tr.insert(s);\n\t\telse zero[i] = tr.insert(s), SAT :: addedge(Q(i), P(i));\n\t\tvec[zero[i]].push_back(P(i));\n\t\tif (one[i]) vec[one[i]].push_back(Q(i));\n\t}\n\tint num = n + tr.tot;\n\tfor (int i = 2; i <= tr.tot; ++i) {\n\t\tlst[i] = tr.fa[i] + n;\n\t\tfor (int j = 0, k = vec[i].size(); j < k; ++j) {\n\t\t\tSAT :: addedge(vec[i][j], P(lst[i]));\n\t\t\tSAT :: addedge(P(num + j + 1), neg(vec[i][j]));\n\t\t\tSAT :: addedge(P(num + j + 1), P(lst[i]));\n\t\t\tlst[i] = num + j + 1;\n\t\t}\n\t\tnum += vec[i].size();\n\t}\n\tfor (int i = 2; i <= tr.tot; ++i)\n\t\tSAT :: addedge(P(i + n), P(lst[i]));\n\tSAT :: tot = num << 1;\n\tif (!SAT :: solve()) return puts(\"NO\"), 0;\n\tputs(\"YES\");\n\tfor (int i = 1; i <= n; ++i)\n\t\ttr.print(SAT :: res[P(i)] == 1 ? zero[i] : one[i]);\n\treturn 0;\n}\n```",
        "postTime": 1636471710,
        "uid": 75765,
        "name": "Starlight237",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6965 \u3010[NEERC2016]Binary Code\u3011"
    },
    {
        "content": "# P6965 NERRC2016 Binary Code\n\n\u4f20\u9001\u95e8: [P6965](https://www.luogu.com.cn/problem/P6965) + [LOJ6036](https://loj.ac/p/6036)\n\n\u6811\u94fe\u5256\u5206\u4f18\u5316\u5efa\u56fe\uff0c\u590d\u6742\u5ea6 $O(n\\log^2n)$\uff0c[\u5f00\u4e86 `-O2` \u8dd1\u5f97\u771f\u4e0d\u6162](https://www.luogu.com.cn/record/58780653)\u3002\n\n## \u9898\u610f\n\n\u6709 $n$ \u4e2a\u4e8c\u8fdb\u5236\u4e32\uff0c\u6bcf\u4e2a\u4e32\u6700\u591a\u6709\u4e00\u4f4d\u662f `?`\u3002\n\n\u4f60\u8981\u7ed9 `?` \u586b\u4e0a `0/1`\uff0c\u4f7f\u5f97\u4e0d\u5b58\u5728 $i$\uff0c$j$ \u4f7f $s_i$ \u662f $s_j$ \u7684\u524d\u7f00\u3002\n\n\u6d1b\u8c37\u4e0a\u8981\u8f93\u51fa\u65b9\u6848\uff0c\u800c LOJ \u53ea\u9700\u8981\u5224\u65ad\u53ef\u884c\u6027\uff0c\u76f8\u5f53\u4e8e\u5f31\u5316\u7248\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u653e P6965 \u7684\u505a\u6cd5\u3002\n\n## \u505a\u6cd5 \n\n\u5c06\u6bcf\u4e2a\u5b57\u7b26\u4e32 `?` \u53d6 `0` \u548c `1` \u7684\u60c5\u51b5\u90fd\u5b58\u5230 Trie \u91cc\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u9009\u4e86\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u5b50\u6811\u4e0a\u7684\u8282\u70b9\u90fd\u4e0d\u80fd\u9009\uff0c\u5b83\u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u4e5f\u4e0d\u80fd\u9009\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5f80\u8fd9\u4e9b\u70b9\u7684\u5bf9\u5e94\u70b9\u4e0a\u8fde\u8fb9\u3002\n\n\u6211\u4eec\u77e5\u9053\u6709\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u8fb9\uff0c\u5f53\u7ebf\u6bb5\u6811\u4ece\u5e8f\u5217\u4e0a\u653e\u5230 Trie \u4e0a\uff0c\u5c31\u9700\u8981\u6811\u94fe\u5256\u5206\u4e86\uff0c(\u663e\u7136\u6211\u6ca1\u6709\u60f3\u5230\u53ef\u4ee5\u53ea\u8fde\u7236\u5b50)\n\n\u6811\u94fe\u5256\u5206\u5efa\u8fb9\u662f $O(n\\log^2n)$\uff0c\u5bf9\u4e8e\u5e38\u6570\u6781\u5927\u7684\u7ebf\u6027\u7b97\u6cd5\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u589e\u52a0\u7684 $\\log^2n$ \u7684\u590d\u6742\u5ea6\u6ca1\u6709\u660e\u663e\u5730\u6bd4\u522b\u7684\u7b97\u6cd5\u6162\uff0c\u53ea\u662f\u4e0d\u5f00 `-O2` \u4f1a\u8d85\u65f6\uff0c\u4f46\u662f\u5f00\u4e86 `-O2` \u4fbf\u8dd1\u5230\u4e86\u6700\u4f18\u89e3\u7b2c\u4e00\u9875\u7684\u524d\u534a\u90e8\u5206\u3002\n\n\u5efa\u8fb9\u4e4b\u540e\u8dd1 2-SAT \u5373\u53ef\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n\u6211\u89c9\u5f97\u8fd9\u4efd\u4ee3\u7801\u6700\u5999\u7684\u5730\u65b9\u83ab\u8fc7\u4e8e\u5728\u9012\u5f52\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u7ebf\u6bb5\u6811\u533a\u95f4\u957f\u5ea6\uff0c\u7136\u540e\u7528 `vector` \u5b58\u56fe\uff0c\u5b9e\u73b0\u4e86\u7ebf\u6bb5\u6811\u548c\u6709\u5411\u56fe\u7684\u65e0\u7f1d\u8854\u63a5\uff0c\u8fd9\u867d\u7136\u5bf9\u6570\u7ec4\u6765\u8bf4\u662f\u5f88\u6b63\u5e38\u7684\u4e8b\uff0c\u4f46\u662f\u5bf9\u4e8e\u6307\u9488\u6765\u8bf4\uff0c\u5c11\u5b9a\u4e49\u4e24\u4e2a\u7ed3\u6784\u4f53 (\u5b58\u8fb9\u548c\u5b58\u7ebf\u6bb5\u6811) \u786e\u5b9e\u5927\u5927\u51cf\u5c11\u4e86\u4ee3\u7801\u96be\u5ea6\u3002\n\n```cpp\nunsigned m, n, n2;\nunsigned A, B, C, D, t;\nunsigned Tmp(0);\nunsigned DFSCnt(1), STop(0), SCC(0);\nchar TmpI[500005], UnSur[500005], Cr(0), Flg(0);\nvector<char> Ans[500005];\nstruct Trie;\nstruct Node {\n  vector<Node*> To;\n  Trie* Tr;\n  unsigned Bel, Low, DFSr;\n  char InS;\n}N[2000005], * List[2000005], * CntN, * Frm, * Root;\nstruct Trie {\n  Trie* Son[2], * Top, * Fa;\n  unsigned RL, RR, Size, Cnt;\n  char Heavy;\n  inline void PreDFS() {\n    unsigned Mx(0);\n    if (Son[0]) Son[0]->Fa = this, Son[0]->PreDFS(), Heavy = 0, Mx = Son[0]->Size;\n    if (Son[1]) {\n      Son[1]->Fa = this, Son[1]->PreDFS();\n      if (Son[1]->Size > Mx) Heavy = 1;\n    }\n  }\n  inline void DFS() {\n    RL = DFSCnt, RR = RL + Cnt - 1, DFSCnt += Cnt;\n    if (!Son[Heavy]) return;\n    Son[Heavy]->Top = Top, Son[Heavy]->DFS();\n    Trie* Cur(Son[Heavy ^ 1]);\n    if (Cur) Cur->Top = Cur, Cur->DFS();\n  }\n}T[1000005], * CntT(T), * Lst1, * Lst2;\ninline void Link(Node* x, unsigned L, unsigned R) {\n  if ((A <= L) && (R <= B)) { Frm->To.emplace_back(x);return; }\n  unsigned Mid((L + R) >> 1);\n  if (A <= Mid) Link(x->To[0], L, Mid);\n  if (B > Mid) Link(x->To[1], Mid + 1, R);\n}\ninline Node* Build(unsigned L, unsigned R) {\n  if (L == R) { return N + ((List[L] - N) ^ 1); }\n  unsigned Mid((L + R) >> 1);\n  Node* Cur(++CntN);\n  Cur->To.emplace_back(Build(L, Mid));\n  Cur->To.emplace_back(Build(Mid + 1, R));\n  return Cur;\n}\ninline void Tarjan(Node* x) {\n  x->DFSr = x->Low = ++DFSCnt, List[++STop] = x, x->InS = 1;\n  for (auto Cur : x->To) {\n    if (Cur->DFSr) { if (Cur->InS) x->Low = min(x->Low, Cur->Low); }\n    else Tarjan(Cur), x->Low = min(x->Low, Cur->Low);\n  }\n  if (x->DFSr == x->Low) {\n    ++SCC;\n    do List[STop]->Bel = SCC, List[STop]->InS = 0;\n    while (List[STop--] != x);\n  }\n}\nsigned main() {\n  CntN = N + (n2 = ((n = RD()) << 1)) - 1;\n  for (unsigned i(0), j(1); i < n; ++i) {\n    scanf(\"%s\", TmpI + 1), Lst1 = Lst2 = T, j = 1;\n    while (TmpI[j] >= '0') {\n      ++(Lst1->Size), ++(Lst2->Size);\n      Ans[i].push_back(TmpI[j]);\n      if (TmpI[j] == '?') {\n        UnSur[i] = 1;\n        if (!(Lst1->Son[0])) Lst1->Son[0] = ++CntT;\n        if (!(Lst2->Son[1])) Lst2->Son[1] = ++CntT;\n        Lst1 = Lst1->Son[0];\n        Lst2 = Lst2->Son[1];\n      }\n      else {\n        Cr = TmpI[j] - '0';\n        if (!(Lst1->Son[Cr])) Lst1->Son[Cr] = ++CntT;\n        if (!(Lst2->Son[Cr])) Lst2->Son[Cr] = ++CntT;\n        Lst1 = Lst1->Son[Cr];\n        Lst2 = Lst2->Son[Cr];\n      }\n      ++j;\n    }\n    ++(Lst1->Cnt), ++(Lst1->Size), N[i << 1].Tr = Lst1;\n    ++(Lst2->Cnt), ++(Lst2->Size), N[(i << 1) ^ 1].Tr = Lst2;\n  }\n  T->PreDFS(), T->Top = T, T->DFS();\n  for (unsigned i(0); i < n2; ++i) List[(N[i].Tr)->RL + (--((N[i].Tr)->Cnt))] = N + i;\n  for (unsigned i(1); i <= n2; ++i) List[i]->DFSr = i;\n  Root = Build(1, n2);\n  for (Frm = N + n2 - 1; Frm >= N; --Frm) {\n    Trie* Cur(Frm->Tr);\n    A = Frm->DFSr + 1, B = Cur->RL + Cur->Size - 1;\n    if (A <= B) Link(Root, 1, n2);\n    A = Cur->Top->RL, B = Frm->DFSr - 1;\n    if (A <= B) Link(Root, 1, n2);\n    Cur = Cur->Top->Fa;\n    while (Cur) {\n      A = Cur->Top->RL, B = Cur->RR;\n      if (A <= B) Link(Root, 1, n2);\n      Cur = Cur->Top->Fa;\n    }\n  }\n  for (unsigned i(1); i <= n2; ++i) List[i]->DFSr = 0;\n  DFSCnt = 0, Tarjan(Root);\n  for (unsigned i(0); i < n; ++i)\n    if (N[i << 1].Bel == N[(i << 1) ^ 1].Bel) { Flg = 1;break; }\n    else UnSur[i] = (N[i << 1].Bel > N[(i << 1) ^ 1].Bel ? 1 : 0);\n  if (Flg) { printf(\"NO\\n\"); return 0; }\n  printf(\"YES\\n\");\n  for (unsigned i(0); i < n; ++i) {\n    for (auto j : Ans[i]) {\n      if (j == '?') putchar(UnSur[i] + '0');\n      else putchar(j);\n    }\n    putchar('\\n');\n  }\n  return Wild_Donkey;\n}\n```\n",
        "postTime": 1633158863,
        "uid": 143771,
        "name": "\u6bd4\u5229\u2642\u6d77\u7075\u987f",
        "ccfLevel": 8,
        "title": "P6965_NERRC2016_Binary_Code"
    },
    {
        "content": "## P6965 [NEERC2016]Binary Code \u9898\u89e3\n\n### \u9898\u610f\u4e0d\u518d\u8d58\u8ff0\u5566\n\n[P6965 [NEERC2016]Binary Code](https://www.luogu.com.cn/problem/P6965)\n\n### \u77e5\u8bc6\u70b9\n\n2-SAT , Tarjan , \u524d\u7f00\u4f18\u5316\u5efa\u56fe , \u5b57\u5178\u6811 , Hash\n\n### \u5206\u6790\n\n\u9996\u5148\uff0c\u6211\u4eec\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e00\u4e0b\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4e32\u81f3\u591a\u6709\u4e00\u4e2a\u201c\uff1f\u201d,\u6240\u4ee5\u76f8\u5f53\u4e8e\u662f\u5728\u6bcf\u4e2a\u4e32\u7684\u95ee\u53f7\u4e3a $0$ \u6216 $1$ \u7684\u60c5\u51b5\u91cc\u9762\u6311\u4e00\u79cd\uff0c\u5e76\u4e14\u56e0\u4e3a\u8981\u4fdd\u8bc1\u201c\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e0d\u662f\u5176\u5b83\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u201d\uff0c\u5373\u6709\u4e00\u4e9b\u51b2\u7a81\u6761\u4ef6\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u7ecf\u5178\u7684 2-SAT \u95ee\u9898\u3002\n\n\u90a3\u600e\u4e48\u80fd\u628a\u8fd9\u4e2a\u51b2\u7a81\u63cf\u8ff0\u51fa\u6765\u5462\uff1f\u6211\u4eec\u77e5\u9053\u5b57\u5178\u6811\u53c8\u540d\u201c\u524d\u7f00\u6811\u201d\uff0c\u4e5f\u5c31\u662f\u8bb2\uff0c\u4e24\u4e2a\u4e32\u5982\u679c\u5728\u5b57\u5178\u6811\u4e0a\u7684\u7ec8\u70b9\u662f\u201c\u7956\u5148-\u540e\u4ee3\u201d\u5173\u7cfb\u90a3\u4e48\u8fd9\u5bf9\u5c31\u4e0d\u53ef\u4ee5\u540c\u65f6\u9009\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u628a\u6bcf\u4e2a\u5e26\u95ee\u53f7\u7684\u4e32\u62c6\u6210\u4e24\u4e2a\u585e\u8fdb\u5b57\u5178\u6811\u91cc\u9762\uff0c\u7136\u540e\u5efa\u8fb9\u8dd1 2-SAT \uff0c\u4f46\u6709\u4e2a\u5927\u95ee\u9898\uff0c\u5373\u8fb9\u7684\u6570\u91cf\u53ef\u80fd\u8fbe\u5230 $O(n^2)$\uff0c\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u4e3b\u8981\u7684\u4efb\u52a1\u662f\u89e3\u51b3\u8fb9\u6570\u592a\u5927\u7684\u95ee\u9898\u3002\n\n#### \u65b9\u6848 1\n\n**\u6211\u89c9\u5f97\u8fb9\u4e0d\u4f1a\u5f88\u591a\uff01**\n\n\u5b9e\u9645\u4e0a\u786e\u5b9e\u4e0d\u662f\u5f88\u591a\u3002\n\n\u5047\u8bbe\u62c6\u51fa\u6765\u7684\u4e32\u6ca1\u6709\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u6bcf\u4e2a\u70b9\u8fb9\u7684\u6570\u91cf\u5c31\u6700\u591a\u662f\u81ea\u5df1\u7684\u957f\u5ea6\uff0c\u800c\u9898\u76ee\u7ed9\u4e86\u9650\u5236 $\\sum len\\leq 5\\times 10^5$\uff0c\u8fd9\u6837\u4e0d\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\u3002\n\n\u73b0\u5728\u95ee\u9898\u5c31\u5728\u4e8e\u53ef\u80fd\u51fa\u73b0\u4e00\u5768\u4e32\u5168\u90fd\u585e\u8fdb\u4e86\u4e00\u4e2a\u70b9\u91cc\u9762\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e00\u4e2a\u70b9\u524d\u9762\u53ef\u80fd\u6709 $n$ \u4e2a\u9700\u8981\u8fde\u7684\u4e32\uff0c\u8fd9\u8be5\u600e\u4e48\u529e\uff1f\n\n\u8003\u8651\uff0c\u5047\u8bbe\u51fa\u73b0\u4e86 $3$ \u4e2a\u8fde\u95ee\u53f7\u90fd\u4e00\u6837\u7684\u4e32\uff0c\u90a3\u4e48\u6700\u540e\u80af\u5b9a\u662f\u65e0\u89e3\u7684\u3002\u8fd9\u6709\u4ec0\u4e48\u7528\u5462\uff1f\n\n\u5047\u8bbe\u5b57\u5178\u6811\u4e0a\u4e00\u4e2a\u70b9\u4ee3\u8868\u957f\u5ea6\u4e3a $len$ \uff0c\u90a3\u4e48\u56e0\u4e3a\u8fde\u95ee\u53f7\u90fd\u76f8\u540c\u7684\u4e32\u4e0d\u8d85\u8fc7 $2$ \u4e2a\uff0c\u6240\u4ee5 $len$ \u4e2a\u4f4d\u7f6e\uff0c\u6700\u591a\u53ef\u4ee5\u653e\u4e0b $2\\times len$ \u4e2a\u5e26\u95ee\u53f7\u7684\uff0c\u8fd8\u80fd\u653e\u4e0b\u4e00\u4e2a\u4e0d\u5e26\u95ee\u53f7\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2a\u70b9\u6700\u591a\u6709 $2\\times len +1$ \u4e2a\u4e32\u3002\n\n\u5e76\u4e14\uff0c\u56e0\u4e3a\u6709\u603b\u957f\u5ea6\u7684\u9650\u5236\uff0c\u6240\u4ee5\u6bcf\u4e2a\u70b9\u7684\u4e32\u6570\u4e0a\u754c\u5e94\u8be5\u662f $\\frac{\\sum len}{len}$\uff0c\u4e24\u4e2a\u5e73\u8861\u4e00\u4e0b\u80fd\u5f97\u51fa\u6bcf\u4e2a\u70b9\u4e32\u6570\u6700\u591a\u662f $\\sqrt {\\sum len}$ \u8fd9\u4e2a\u6c34\u5e73\uff0c\u4e5f\u5c31\u662f\u81ea\u5df1\u70b9\u8fde\u81ea\u5df1\u4e0d\u4f1a\u5f88\u591a\u3002\n\n\u90a3\u8fde\u5176\u5b83\u7684\u600e\u4e48\u529e\uff1f\u6211\u5c1d\u8bd5\u7528\u7a0b\u5e8f\u6784\u9020\u4e86\u4e00\u4e0b\uff0c\u8ba9\u957f\u5ea6\u4e3a $1,2,3,...$ \u7684\u8282\u70b9\u5206\u522b\u585e\u8fdb\u53bb $3,5,7,...$ \u4e2a\u4e32\uff0c\u7136\u540e\u7b97\u4e86\u7b97\uff0c\u4e0a\u754c\u4e0d\u5230 $10^8$\uff0c\u5e76\u4e14\u51e0\u4e4e\u8dd1\u4e0d\u6ee1\u3002\n\n\u800c\u4e14\u6211\u4eec\u53ef\u4ee5\u4e00\u4e2a\u8282\u70b9\u5efa\u4e00\u4e2a\u526f\u8282\u70b9\u4e0e\u5176\u4e2d\u6240\u6709\u4e32\u8fde\u8fb9\u3002\u7c7b\u4f3c\u64cd\u4f5c\u4f18\u5316\u4f18\u5316\uff0c\u5b9e\u9645\u4e0a\u4e0d\u4f18\u5316\u5e38\u6570\u4f18\u79c0\u70b9\u4e5f\u53ef\u4ee5\u8dd1\u8fc7\u53bb\u3002\n\n\u53ea\u8981\u641e\u641e\u54c8\u5e0c\u5224\u4e0b\u5b8c\u5168\u76f8\u540c\u7684\u4e32\u662f\u5426\u8d85\u8fc7\u4e24\u4e2a\u5373\u53ef\u3002\n\n#### \u65b9\u6848 2\n\n\u4ee3\u7801\u5373\u662f\u6b64\u79cd\u65b9\u6848\u7684\u4ee3\u7801\u3002\n\n\u6211\u4eec\u53d1\u73b0\u6bcf\u6b21\u5efa\u8fb9\uff0c\u6bcf\u4e2a\u70b9\u90fd\u5411\u81ea\u5df1\u7684\u524d\u7f00\uff0c\u4ee5\u53ca\u81ea\u5df1\u201c\u88ab\u524d\u7f00\u201d\u7684\u8282\u70b9\u5efa\u4e86\u8fb9\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u5b57\u5178\u6811\u6839\u5411\u548c\u53f6\u5411\u7684\u524d\u7f00\u3002\n\n\u90a3\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u4e32\u90fd\u5f00\u51e0\u4e2a\u8f85\u52a9\u8282\u70b9\uff0c\u4e13\u95e8\u7528\u6765\u8fdb\u884c\u524d\u7f00\u5efa\u8fb9\u7684\u8f85\u52a9\uff0c\u8fd9\u6837\u95ee\u9898\u5c31\u80fd\u5f97\u5230\u89e3\u51b3\u3002\n\n\u8fd9\u91cc\u7ec6\u8282\u6bd4\u8f83\u591a\uff0c\u5728\u8fd9\u91cc\u7b80\u5355\u5206\u6790\u4e0b\u3002\n\n\u6211\u7528 $p_{i,0/1}$ \u5206\u522b\u8868\u793a $i$ \u53f7\u4e32\uff08\u62c6\u5b8c\u4e4b\u540e\u7684\u7f16\u53f7\uff09\u524d\u7f00\u548c\u88ab\u524d\u7f00\u7684\u8f85\u52a9\u8282\u70b9\uff0c\u7136\u540e\u7528 $ep_{i,0/1}$ \u8868\u793a $i$ \u8fd9\u4e2a\u5b57\u5178\u6811\u8282\u70b9\u6700\u540e\u4e00\u4e2a\u524d\u7f00\u548c\u88ab\u524d\u7f00\u7684\u8f85\u52a9\u8282\u70b9\u7684\u7f16\u53f7\u65b9\u4fbf\u5404\u70b9\u4e4b\u95f4\u8fde\u63a5\u3002\u7528 $x_{0/1}$ \u8868\u793a\u540c\u4e00\u4e2a\u95ee\u53f7\u4e32\u884d\u751f\u51fa\u6765\u7684\u4e32\u3002\n\n\u540c\u65f6\u6211\u4eec\u968f\u624b\u58f0\u660e\u4e00\u4e2a $md$ \u8868\u793a\u4e24\u4e2a\u53f6\u5b50\u8282\u70b9\u5230\u7236\u8282\u70b9\u7684\u88ab\u524d\u7f00\u8f85\u52a9\u8282\u70b9\u7684\u8f85\u52a9\u8282\u70b9\uff08\u8fd9\u4e2a\u7a0b\u5e8f\u91cc\u5e76\u6ca1\u6709\u4fdd\u5b58\u4e0b\u6765\uff09\u3002\u4ee5\u53ca\u4e0a\u4e00\u4e2a\u4e32\u7684\u5bf9\u5e94\u8282\u70b9\u7528 $lst$ \u8868\u793a\u3002\n\n- $x_0\\to ep_{fa_x,0}$\n\n- $p_{x_0,0}\\to p_{lst,0}$\n\n- $p_{x_0,0},x_1$\n\n- $md\\to ep_{lc,1}$ , $md\\to ep_{rc,1}$\n\n- $x_0\\to p_{lst,1}/md$\n\n- $p_{x_0,1}\\to p_{lst,1}/md$\n\n- $p_{x_0,1}\\to x_1$\n\n\u5269\u4e0b\u771f\u7684\u7ec6\u8282\u4e0d\u5c11\uff0c\u5927\u6982\u5c31\u8fd9\u6837\u3002\n\n**\u4ee3\u7801\u4e2d\u5404\u53d8\u91cf\u542b\u4e49\u4e0e\u6587\u4e2d\u7565\u6709\u4e0d\u540c**\n\n### \u8d34\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define lint long long\n#define rint register int\nusing namespace std;\ninline int read(){\n\tchar c;int f=1,res=0;\n\twhile(c=getchar(),!isdigit(c))if(c=='-')f*=-1;\n\twhile(isdigit(c))res=res*10+c-'0',c=getchar();\n\treturn res*f;\n}\nconst lint N=2e6+5,M=2e7+5;\nint hed[M],nxt[M<<1],ver[M<<1],cnt=1;\ninline void inst(int u,int v){\n\tif(!u||!v)return;\n\tver[++cnt]=v;\n\tnxt[cnt]=hed[u];\n\thed[u]=cnt;\n}\nint n,np,a[2][N],p[N][2];\nstring s[N],_s[N][2];//_s\u4e3a\u5b58\u7b54\u6848\u7684\u6570\u7ec4 \nint tot=1,ch[N][2],ep[N][2]={0};\nvector<int> id[N];\n//p\u4e3a\u8bb0\u5f55\u524d\u7f00\u548c\u7684\u70b9\u6807\u53f7\n//ep\u4e3a\u8bb0\u5f55\u5bf9\u5e94Trie\u6811\u8282\u70b9\u524d\u7f00\u548c\u7684\u7ed3\u675f\u7f16\u53f7 \n//id\u5b58\u50a8\u5f53\u524d\u70b9\u662f\u54ea\u4e9b\u6807\u53f7\u70b9\u7684\u7ec8\u70b9\ninline void inst(int _id,int *arr,int len){\n\tint x=1;\n\tfor(rint i=1;i<=len;++i){\n\t\tint c=arr[i];\n\t\tif(!ch[x][c])\n\t\t\tch[x][c]=++tot;\n\t\tx=ch[x][c];\n\t}\n\tid[x].push_back(_id);\n}\n//\u524d\u7f00\u4f18\u5316\u5efa\u56fe 0\u641e\u524d\u7f00 1\u641e\u88ab\u524d\u7f00 \nvoid build(int x,int fa){\n\t//\u5148\u5efa\u51fa\u524d\u7f00\u56fe\n\tint lst=ep[fa][0];\n\tfor(rint i=0;i<id[x].size();++i){\n\t\tint y=id[x][i];\n\t\tp[y][0]=++np;\n\t\tinst(y,lst);//\u8fdey\u7684\u524d\u7f00 \n\t\tinst(p[y][0],lst);//\u524d\u7f00\u8fde\u524d\u7f00 \n\t\tinst(p[y][0],y^1);//\u524d\u7f00\u8fdey\u7684\u76f8\u5bf9 \n\t\tlst=p[y][0];\n\t}ep[x][0]=lst;\n\t//\u518d\u5efa\u88ab\u524d\u7f00\u56fe \n\tint lc=ch[x][0],rc=ch[x][1];lst=++np;\n\tif(lc)build(lc,x),inst(lst,ep[lc][1]);\n\tif(rc)build(rc,x),inst(lst,ep[rc][1]);\n\t//\u7528\u4e00\u4e2a\u88ab\u524d\u7f00\u8282\u70b9\u8fde\u5de6\u53f3\u513f\u5b50\u88ab\u524d\u7f00\u7ec8\u70b9\n\tfor(rint i=id[x].size()-1;i>=0;--i){\n\t\tint y=id[x][i];\n\t\tp[y][1]=++np;\n\t\tinst(y,lst);\n\t\tinst(p[y][1],lst);\n\t\tinst(p[y][1],y^1);\n\t\tlst=p[y][1];\n\t}ep[x][1]=lst;\n}\nint st[M],tp=0,scc[M],ns=0,dfn[M],low[M],t=0;\nbool vis[M];\ninline void Tarjan(int u,int fa){\n\tdfn[u]=low[u]=++t;\n\tst[++tp]=u;\n\tfor(rint e=hed[u];e;e=nxt[e]){\n\t\tint v=ver[e];\n\t\tif(v==fa)continue;\n\t\tif(!dfn[v]){\n\t\t\tTarjan(v,u);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}else if(!vis[v])\n\t\t\tlow[u]=min(low[u],dfn[v]);\n\t}\n\tif(low[u]==dfn[u]){\n\t\t++ns;\n\t\twhile(tp&&st[tp+1]!=u){\n\t\t\tscc[st[tp]]=ns;\n\t\t\tvis[st[tp]]=true;\n\t\t\t--tp;\n\t\t}\n\t}\n}\nint main(){\n\tn=read();np=n<<1|1;\n\tfor(rint i=1;i<=n;++i){\n\t\tcin>>s[i];bool flg=false;\n\t\t_s[i][0]=_s[i][1]=s[i];\n\t\tfor(rint j=0;j<s[i].size();++j)\n\t\t\tif(s[i][j]=='?'){\n\t\t\t\ta[0][j+1]=0;_s[i][0][j]='0';\n\t\t\t\ta[1][j+1]=1;_s[i][1][j]='1';\n\t\t\t\tflg=true;\n\t\t\t}else{\n\t\t\t\ta[0][j+1]=s[i][j]-'0';\n\t\t\t\ta[1][j+1]=s[i][j]-'0';\n\t\t\t}\n\t\tinst(i<<1,a[0],s[i].size());\n\t\tinst(i<<1|1,a[1],s[i].size());\n\t\tif(!flg)inst(i<<1,i<<1|1);\n\t\t//\u7279\u5224\u4e24\u79cd\u60c5\u51b5\u76f8\u540c\u7684\n\t\t//\u5f3a\u5236\u9009\u540e\u8005 \n\t}\n\tbuild(1,0);\n\tfor(rint i=1;i<=np;++i)\n\t\tif(!dfn[i])Tarjan(i,0);\n\tfor(rint i=1;i<=n;++i){\n\t\tif(scc[i<<1]==scc[i<<1|1]){\n\t\t\tprintf(\"NO\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tcout<<\"YES\"<<endl;\n\tfor(rint i=1;i<=n;++i)\n\t\tif(scc[i<<1]<scc[i<<1|1])\n\t\t\tcout<<_s[i][0]<<endl;\n\t\telse\n\t\t\tcout<<_s[i][1]<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1632721514,
        "uid": 206258,
        "name": "SDNetFriend",
        "ccfLevel": 7,
        "title": "P6965 [NEERC2016]Binary Code \u9898\u89e3"
    },
    {
        "content": "\u6ce8\u610f\u5230\uff0c\u6bcf\u4e00\u4e2a\u4e32\u6700\u591a\u4e2d\u6709\u4e00\u4e2a\u95ee\u53f7\uff0c\u90a3\u4e48\u81f3\u591a\u53ea\u4f1a\u6709\u4e24\u79cd\u9009\u62e9\u3002\u800c\u524d\u7f00\u7684\u9650\u5236\u5219\u4f1a\u5bf9\u9009\u62e9\u8fdb\u884c\u9650\u5236\uff0c\u4e8e\u662f\u8003\u8651 **2-SAT**\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u5730\u5904\u7406\u524d\u7f00\u5173\u7cfb\uff0c\u6211\u4eec\u5c06\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u5b57\u7b26\u4e32\u5efa\u6210 Trie\uff0c\u90a3\u4e48\u9009\u62e9\u4e00\u4e2a\u5b57\u7b26\u4e32\u540e\u6240\u6709\u7684\u9650\u5236\u5c31\u662f\u4e0d\u80fd\u9009\u7ed3\u5c3e\u5728\u5176\u7ed3\u5c3e\u7ed3\u70b9\u7684**\u5b50\u6811\u5185\u6216\u7956\u5148\u4e0a**\u7684\u5b57\u7b26\u4e32\u3002\n\n\u76f4\u63a5\u66b4\u529b\u5efa\u56fe\u590d\u6742\u5ea6\u8fb9\u6570\u53ef\u80fd\u8fbe\u5230 $O(n^2)$\uff0c\u8003\u8651\u4f18\u5316\u5efa\u56fe\u3002\n\n\u6211\u4eec\u8003\u8651\u524d\u7f00\u4f18\u5316\u5efa\u56fe\u7684\u601d\u60f3\u2014\u2014\u901a\u8fc7**\u6210\u524d\u7f00\u5173\u7cfb\u7684\u8f85\u52a9\u4e2d\u8f6c\u70b9**\u6765\u6307\u5411\u6240\u6709\u9700\u8981\u6307\u7684\u70b9\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u601d\u60f3\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u6269\u5c55\u5230\u6811\u4e0a\u3002\n\n\u6211\u4eec\u5efa\u7acb\u4e24\u9897\u4e0e Trie \u6811\u5f62\u6001\u5b8c\u5168\u4e00\u81f4\u7684\u8f85\u52a9\u6811\uff0c\u7b2c\u4e00\u9897\u6811\u8fb9\u5411\u4e0a\u6307\uff0c\u7b2c\u4e8c\u9897\u6811\u8fb9\u5411\u4e0b\u6307\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e24\u9897\u8f85\u52a9\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u90fd\u6307\u5411\u6240\u6709\u7ed3\u5c3e\u5728 \u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u539f Trie \u8282\u70b9 \u7684\u5b57\u7b26\u4e32\u7684\u53cd\u9762\u3002\uff080 \u6307 1\uff0c1 \u6307 0\uff09\n\n\u6700\u540e\u5c06\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fde\u5411\u4e24\u9897\u8f85\u52a9\u6811\u4e0a\u4e0e\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u8282\u70b9\u5bf9\u5e94\u7684\u70b9\u5373\u53ef\u3002\n\n\u5bb9\u6613\u770b\u51fa\u8fd9\u6837\u7684\u8fb9\u6570\u662f\u7ebf\u6027\u7684\u3002\n\n\u4f46\u662f\uff0c\u6211\u4eec\u5ffd\u7565\u4e86\u4e00\u70b9\uff0c\u6b63\u9762\u5bf9\u5e94\u7684\u8f85\u52a9\u6811\u4e0a\u7684\u70b9\u4f1a\u6307\u5411\u53cd\u9762\uff0c\u53cd\u9762\u5bf9\u5e94\u7684\u70b9\u4e5f\u4f1a\u6307\u5411\u6b63\u9762\u2014\u2014\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u6709\u73af\u7684\u5b58\u5728\u800c\u5bfc\u81f4 `No`\u3002\n\n\u89e3\u51b3\u65b9\u6848\u662f\uff0c\u5728\u6700\u540e\u4e00\u6b65\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fde\u5411\uff1a\u7b2c\u4e00\u9897\u8f85\u52a9\u6811\u4e0a\u7684\u7236\u4eb2\u3001\u7b2c\u4e8c\u9897\u8f85\u52a9\u6811\u4e0a\u7684\u513f\u5b50\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u89c4\u907f\u4e86\u4e0a\u6587\u7684\u60c5\u51b5\u3002\n\n\u4f46\u662f\uff0c\u8fd9\u6837\u4e5f\u4f1a\u51fa\u73b0\u95ee\u9898\uff1a\u5982\u679c\u4e00\u4e2a Trie \u6811\u8282\u70b9\u662f\u591a\u4e2a\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\uff0c\u8fd9\u4e9b\u4e32\u5185\u90e8\u662f\u6709\u9650\u5236\u5173\u7cfb\u7684\uff0c\u7136\u800c\u8fd9\u6837\u5efa\u56fe\u6ca1\u6709\u8003\u8651\u3002\n\n\u6ca1\u8003\u8651\u8865\u4e0a\u5c31\u662f\u4e86\u3002\u63a5\u4e0b\u6765\u6709\u4e24\u79cd\u60f3\u6cd5\uff1a\n\n\u8f83\u4e3a\u65e0\u8111\u7684\u662f\uff1a\u56e0\u4e3a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u662f\u5f62\u5982 **\u4e00\u7ec4\u8282\u70b9\u81f3\u591a\u9009\u4e00\u4e2a** \u7684\u9650\u5236\uff0c\u8fd9\u5f88\u7b26\u5408\u7ecf\u5178**\u524d\u7f00\u4f18\u5316\u5efa\u56fe**\u7684\u5f62\u5f0f\uff0c\u4e8e\u662f\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u5185\u90e8\u518d\u505a\u4e00\u904d\u524d\u7f00\u4f18\u5316\u5efa\u56fe\u5373\u53ef\u3002\n\n\u53e6\u4e00\u79cd\u60f3\u6cd5\u662f\uff1a\u4e00\u4e2a\u8282\u70b9\u4e0a\u7684\u5b57\u7b26\u4e32\u6570\u771f\u7684\u53ef\u80fd\u5230\u8fbe $O(n)$ \u5417\uff1f\u5176\u5b9e\u662f\u4e0d\u4f1a\u7684\u3002\u4e8e\u662f\u6211\u4eec\u8003\u8651\u6bcf\u4e2a\u8282\u70b9\u5185\u90e8**\u66b4\u529b\u5efa\u56fe**\u3002 \n\n\u6211\u4eec\u9996\u5148\u7279\u5224\u6389 $> 2$ \u4e2a\u5b57\u7b26\u4e32\uff08\u6307\u53ef\u80fd\u5305\u542b '?' \u7684\u521d\u59cb\u5b57\u7b26\u4e32\uff09\u5b8c\u5168\u76f8\u7b49\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u8f93\u51fa `No` \u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u957f\u5ea6 $> \\sqrt {|S|}$ \u7684\u4e32\uff0c\u4e0d\u4f1a\u8d85\u8fc7 $\\sqrt{|S|}$ \u4e2a\uff0c\u66b4\u529b\u603b\u590d\u6742\u5ea6\u7ebf\u6027\u3002\n\n\u5bf9\u4e8e\u957f\u5ea6 $\\le \\sqrt{|S|}$ \u7684\u4e32\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff1a\u80fd\u5230\u8fbe\u540c\u4e00\u4e2a\u7ed3\u5c3e\u8282\u70b9\u7684\u4e32\u7684\u5f62\u5f0f\u5fc5\u7136\u662f\u2014\u2014\u5728\u67d0\u4e00\u4e2a\u57fa\u7840\u4e32\u4e0a**\u66ff\u6362\u4e00\u4f4d\u4e3a '?'**\uff0c\u6216\u4e0d\u66ff\u6362\u3002\n\n\u4e8e\u662f\uff0c\u5230\u8fbe\u4e00\u4e2a\u8282\u70b9\u7684\u5b57\u7b26\u4e32\u7684\u6570\u91cf\u7ea7\u4e0d\u4f1a\u8d85\u8fc7\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f $\\sqrt{|S|}$\uff0c\u4e8e\u662f\u66b4\u529b\u5efa\u56fe\u4f9d\u65e7\u662f\u7ebf\u6027\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u5efa\u56fe\u662f\u5bf9\u7684\uff01\n\n___\n\n\u4ee3\u7801\uff1a\n\n\u957f\u5ea6 `2.09k` \uff0c\u4f9b\u53c2\u8003\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define pb push_back\nusing namespace std;\nconst int maxn = 5e5+5,maxs = 1e6+5,N = 3e6+5;\nint n,qmpos[maxn],edp[maxn<<1];\nstring s[maxn];\nstd :: map<string,int> oc;\nint fa[maxs],ch[maxs][2],nods = 1;\nstd :: vector<int> strs[maxs];\nvoid ins(string &s,int id){\n\tint now = 1;\n\tfor(char c:s)(ch[now][c-'0']?0:fa[ch[now][c-'0']=++nods]=now),now = ch[now][c-'0'];\n\tedp[id] = now,strs[now].push_back(id);\n}\nstd :: vector <int> G[N];\nint tot,cpyid[maxs][2];\nint Bu(int u){\n\tint id = ++tot;for(int v:strs[u])G[id].pb(v>n?v-n:v+n);\n\tif(ch[u][0])G[Bu(ch[u][0])].pb(id);if(ch[u][1])G[Bu(ch[u][1])].pb(id);\n\treturn cpyid[u][0] = id;\n}\nint Bd(int u){\n\tint id = ++tot;for(int v:strs[u])G[id].pb(v>n?v-n:v+n);\n\tif(ch[u][0])G[id].pb(Bd(ch[u][0]));if(ch[u][1])G[id].pb(Bd(ch[u][1]));\n\treturn cpyid[u][1] = id;\n}\nvoid Link(int u){\n\tint up = edp[u];\n\tif(fa[up])G[u].pb(cpyid[fa[up]][0]);\n\tif(ch[up][0])G[u].pb(cpyid[ch[up][0]][1]);\n\tif(ch[up][1])G[u].pb(cpyid[ch[up][1]][1]);\n}\nint dfn[N],low[N],st[N],vis[N],b[N],tim,cnt,top;\nvoid Tarjan(int u){\n\tdfn[u] = low[u] = ++tim,st[++top] = u,vis[u] = 1;\n\tfor(int v:G[u]){\n\t\tif(!dfn[v])Tarjan(v),low[u] = min(low[u],low[v]);\n\t\telse if(vis[v])low[u] = min(low[u],dfn[v]);\n\t}\n\tif(low[u] == dfn[u]){\n\t\tint now;++cnt;\n\t\tdo{now = st[top--],vis[now] = 0,b[now] = cnt;}while(now^u);\n\t}\n}\nint main(){\n\tios::sync_with_stdio(0);cin >> n;\n\tfor(int i=1,p,tv;i<=n;++i){\n\t\tcin >> s[i];p = s[i].find('?');\n\t\tif(((tv = ++oc[s[i]]) > 1 && p == -1)|| tv > 2)return (cout<<\"NO\\n\"),0;\n\t\tif(~p)qmpos[i] = p;\n\t\telse (s[i][0]=='1'?G[i].pb(i+n):G[i+n].pb(i)),p = qmpos[i] = 0;\n\t\ts[i][p] = '0',ins(s[i],i),s[i][p] = '1',ins(s[i],i+n);\n\t}\n\tfor(int u=1;u<=nods;++u)\n\t\tfor(int i:strs[u])\n\t\t\tfor(int j:strs[u])\n\t\t\t\tif(i != j)G[i].push_back((j>n?j-n:j+n));\n\ttot = 2*n,Bu(1),Bd(1);\n\tfor(int i=1;i<=2*n;++i)Link(i);\n\tfor(int i=1;i<=tot;++i)if(!dfn[i])Tarjan(i);\n\tfor(int i=1;i<=n;++i)if(b[i] == b[i+n])return (cout<<\"NO\\n\"),0;\n\tcout << \"YES\\n\";\n\tfor(int i=1;i<=n;++i)\n\t\ts[i][qmpos[i]] = (b[i]>b[i+n])+'0',cout << s[i] << '\\n';\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1631063380,
        "uid": 114153,
        "name": "Sali\u0435ri",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6965 [NEERC2016]Binary Code"
    },
    {
        "content": "## \u5206\u6790\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u628a\u5b83\u62c6\u6210\u4e24\u4e2a\u72b6\u6001\uff0c\n\n\u4e00\u4e2a\u4ee3\u8868\u95ee\u53f7\u5904\u586b $0$ \u7684\u65b9\u6848\uff0c\u4e00\u4e2a\u4ee3\u8868\u95ee\u53f7\u5904\u586b $1$ \u7684\u65b9\u6848\uff0c\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u679a\u4e3e\u5176\u5b83\u4f1a\u4e0e\u5b83\u4ea7\u751f\u51b2\u7a81\u7684\u5b57\u7b26\u4e32\uff0c\u5411\u5176\u53cd\u72b6\u6001\u8fde\u8fb9\uff0c\n\n\u7136\u540e\u8dd1\u4e00\u4e2a $2-sat$ \u5c31\u884c\u4e86\u3002\n\n\u8fd9\u6837\u5efa\u56fe\u7684\u590d\u6742\u5ea6\u662f $n^2$ \u7684\u3002\n\n\u4e0a\u8ff0\u505a\u6cd5\u95ee\u9898\u5728\u4e8e\u8fb9\u6570\u592a\u591a\uff0c\u56e0\u6b64\u6211\u4eec\u8003\u8651\u5148\u679a\u4e3e\u95ee\u53f7\uff0c\u7136\u540e\u628a\u6240\u6709\u53ef\u80fd\u4e32\u5efa\u6210\u4e00\u68f5 $Trie$\uff0c\n\n\u5728 $Trie$ \u6811\u4e0a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7531\u5f53\u524d\u7684\u8282\u70b9\u5411\u5176\u53cd\u72b6\u6001\u7684\u6240\u6709\u7956\u5148\u548c\u513f\u5b50\u8fde\u8fb9\u3002\n\n\u5177\u4f53\u7684\u505a\u6cd5\u662f\u591a\u5f00\u4e24\u6761\u94fe\u6765\u8f85\u52a9\u6211\u4eec\u8fdb\u884c\u8fde\u8fb9\u4f18\u5316\uff0c\n\n\u5c31\u662f\u56fe\u4e2d\u53f3\u9762\u7684\u8282\u70b9\u4e24\u8fb9\u7684\u8fb9\uff0c\n\n\u94fe\u4e0a\u53cd\u6620\u7684\u5c31\u662f $Trie$ \u4e0a\u7684\u7236\u5b50\u5173\u7cfb\uff0c\n\n\u5728\u4e24\u6761\u94fe\u4e0a\u53c8\u90fd\u6709\u591a\u4e2a\u8282\u70b9\uff0c\u548c\u6211\u4eec\u9700\u8981\u8fde\u8fb9\u7684\u8282\u70b9\u8fde\u5728\u4e00\u8d77\uff0c\n\n\u90a3\u4e48\u6211\u4eec\u8fde\u8fb9\u65f6\u5c31\u53ef\u4ee5\u8fd9\u6837\u8fde\uff0c\n\n![](https://img2020.cnblogs.com/blog/1996139/202101/1996139-20210126073849837-1164800721.png)\n\n\u6700\u7ec8\u5efa\u51fa\u6765\u7684\u56fe\u5c31\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\u3002\n\n![](https://img2020.cnblogs.com/blog/1996139/202101/1996139-20210126073850601-97778415.png)\n\n(\u56fe\u662f\u5ad6[ljh\u5de8\u4f6c](https://www.cnblogs.com/li-jia-hao/p/13773651.html)\u7684)\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f $Trie$ \u6811\u4e0a\u4e00\u4e2a\u8282\u70b9\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\uff0c\n\n\u6211\u4eec\u9700\u8981\u5f3a\u884c\u89c4\u5b9a\u4e00\u4e2a\u7236\u5b50\u5173\u7cfb\u3002\n## \u4ee3\u7801\n``` cpp\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#define rg register\nconst int maxn=4e6+5;\nint n,len[maxn],h[maxn],tot=1,cnt=1,tr[maxn][2];\nstruct asd{\n\tint to,nxt;\n}b[maxn];\nvoid ad(rg int aa,rg int bb){\n\tif(aa==0 || bb==0) return;\n\tb[tot].to=bb;\n\tb[tot].nxt=h[aa];\n\th[aa]=tot++;\n}\nint dfn[maxn],dfnc,low[maxn],shuyu[maxn],scc,sta[maxn],tp,wz[maxn];\nvoid tar(rg int now){\n\tsta[++tp]=now;\n\tdfn[now]=low[now]=++dfnc;\n\tfor(rg int i=h[now];i!=-1;i=b[i].nxt){\n\t\trg int u=b[i].to;\n\t\tif(!dfn[u]){\n\t\t\ttar(u);\n\t\t\tlow[now]=std::min(low[now],low[u]);\n\t\t} else if(!shuyu[u]){\n\t\t\tlow[now]=std::min(low[now],dfn[u]);\n\t\t}\n\t}\n\tif(dfn[now]==low[now]){\n\t\tscc++;\n\t\twhile(1){\n\t\t\trg int y=sta[tp--];\n\t\t\tshuyu[y]=scc;\n\t\t\tif(y==now) break;\n\t\t}\n\t}\n}\nchar s[maxn];\nstd::vector<char> g[maxn];\nstd::vector<int> Node[maxn];\nint fa[maxn];\nvoid insert(rg int id,rg int op){\n\trg int now=1;\n\tfor(rg int i=0;i<len[id];i++){\n\t\trg int p=g[id][i]-'0';\n\t\tif(!tr[now][p]){\n\t\t\ttr[now][p]=++cnt;\n\t\t\tfa[cnt]=now;\n\t\t}\n\t\tnow=tr[now][p];\n\t}\n\tNode[now].push_back(id+n*op);\n}\nint getup(rg int id){\n\tif(id>n) return id+4*n;\n\telse return id+3*n;\n}\nint getdown(rg int id){\n\tif(id>n) return id+3*n;\n\telse return id+2*n;\n}\nvoid solvezx(rg int id){\n\trg int tmp1=id;\n\tif(id>n) id-=n;\n\telse id+=n;\n\trg int tmp2=getup(id);\n\tfor(rg int i=h[tmp2];i!=-1;i=b[i].nxt) if(b[i].to!=id) ad(tmp1,b[i].to);\n}\nvoid solvech(rg int id){\n\trg int tmp1=id;\n\tif(id>n) id-=n;\n\telse id+=n;\n\trg int tmp2=getdown(id);\n\tfor(rg int i=h[tmp2];i!=-1;i=b[i].nxt) if(b[i].to!=id) ad(tmp1,b[i].to);\n}\nvoid build(rg int da,rg int fa){\n\trg int mmax=Node[da].size(),now;\n\tfor(rg int i=0;i<mmax;i++){\n\t\tnow=Node[da][i];\n\t\tad(getdown(now),now),ad(getup(now),now);\n\t\tif(fa) ad(getup(now),getup(fa)),ad(getdown(fa),getdown(now));\n\t\tfa=now;\n\t}\n\tif(tr[da][0]) build(tr[da][0],fa);\n\tif(tr[da][1]) build(tr[da][1],fa);\n}\nint main(){\n\tmemset(h,-1,sizeof(h));\n\tmemset(wz,-1,sizeof(wz));\n\tscanf(\"%d\",&n);\n\tfor(rg int i=1;i<=n;i++){\n\t\tscanf(\"%s\",s+1);\n\t\tlen[i]=strlen(s+1);\n\t\tfor(rg int j=1;j<=len[i];j++){\n\t\t\tg[i].push_back(s[j]);\n\t\t\tif(s[j]=='?') wz[i]=j;\n\t\t}\n\t}\n\tfor(rg int i=1;i<=n;i++){\n\t\tif(wz[i]==-1){\n\t\t\tinsert(i,0),insert(i,1);\n\t\t} else {\n\t\t\tg[i][wz[i]-1]='0',insert(i,0);\n\t\t\tg[i][wz[i]-1]='1',insert(i,1);\n\t\t}\n\t}\n\tbuild(1,0);\n\tfor(rg int i=1;i<=2*n;i++) solvezx(i),solvech(i);\n\tfor(rg int i=1;i<=6*n;i++) if(!shuyu[i]) tar(i);\n\tfor(rg int i=1;i<=n;i++){\n\t\tif(shuyu[i]==shuyu[i+n]){\n\t\t\tprintf(\"NO\\n\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"YES\\n\");\n\tfor(rg int i=1;i<=n;i++){\n\t\tif(wz[i]!=-1 && shuyu[i]>shuyu[i+n]) g[i][wz[i]-1]='0';\n\t\tfor(rg int j=0;j<g[i].size();j++) printf(\"%c\",g[i][j]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1617621277,
        "uid": 316322,
        "name": "hzoi_liuchang",
        "ccfLevel": 7,
        "title": "P6965 [NEERC2016]Binary Code \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u662f\u4e00\u9053\u56fe\u8bba\u9898\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u5b57\u5178\u6811 Trie \u6765\u89e3\u51b3\u8fd9\u9053\u9898\u3002\n\n\u6211\u4eec\u8003\u8651\u76f4\u63a5\u5728 Trie \u4e0a\u4f18\u5316\u5efa\u56fe\u3002\n\n\u6211\u4eec\u8003\u8651\u5982\u4f55\u5904\u7406\u5b50\u6811\u3002\n\n\u6211\u7684\u65b9\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\u5bf9\u4e8e\u5b50\u6811\uff0c\u53ef\u4ee5\u901a\u8fc7\u65b0\u5efa\u70b9\u8fde\u5411\u513f\u5b50\u7684\u5b50\u6811\u70b9\uff0c\u6765\u4ee3\u8868\u8fd9\u68f5\u5b50\u6811\u7684\u5165\u8fb9 $or$ \u51fa\u8fb9\u3002\n\n\u8fd9\u6837\u53ea\u8981\u5efa\u7acb\u9009\u4e86 $i$ \u5c31\u4e0d\u80fd\u9009 $i$ \u5b50\u6811\u4e2d\u5143\u7d20\u7684\u6761\u4ef6\u3002\n\n\u5269\u4e0b\u5c31\u53ea\u9700\u8981\u6ce8\u610f\u7ec6\u8282\u5373\u53ef\u3002\n\n\u7ec6\u8282\u6bd4\u8f83\u7e41\u7410\uff0c\u9700\u8981\u7ec6\u5fc3\u5904\u7406\u3002\n\n\u4ee3\u7801\u9b3c\u755c\uff0c\u7ec6\u8282\u7e41\u591a\uff0c\u65e0\u6cd5\u7a81\u51fa\u91cd\u70b9\uff0c\u5c31\u4e0d\u653e\u4e86\u3002",
        "postTime": 1614687710,
        "uid": 485844,
        "name": "wangy\u03c5s\u03c5m",
        "ccfLevel": 0,
        "title": "P6965"
    }
]