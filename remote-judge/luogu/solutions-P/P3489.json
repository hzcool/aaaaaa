[
    {
        "content": "\u5148%\u4e0b\u697c\u4e0a\u7684\u5206\u5c42\u56fe2333\n\n\u89c2\u5bdf\u6570\u636e\uff0c\u53d1\u73b0p<=13,n<=200\uff0c\u6240\u6709\u6211\u4eec\u5f88\u660e\u663e\u53ef\u4ee5\u5c06\u72b6\u6001\u4fdd\u5b58\u4e0b\u6765\u3002\n\n\u8bbed[i][j]\u8868\u793a\u5f53\u524d\u5230\u8fbei\uff0c\u72b6\u6001\u4e3aj\u6240\u9700\u8981\u7684\u6700\u77ed\u65f6\u95f4\u3002\n\n\u6839\u636edijkstra\u7684\u6027\u8d28\uff0cn\u7b2c\u4e00\u6b21\u88ab\u53d6\u51fa\u65f6\u5c31\u662f\u7b54\u6848\u3002\n\n\u5728\u5b9e\u9645\u8fd0\u7b97\u4e2d\uff0c\u6211\u4eec\u4fdd\u5b58\u4e00\u4e2a\u4e09\u5143\u7ec4(t,x,s);\n\nt\u4e3a\u5f53\u524d\u7684\u503c\uff0cx\u4e3a\u5f53\u524d\u7684\u70b9\uff0cs\u4e3a\u8d70\u5230\u5f53\u524d\u7684\u70b9\u6240\u80fd\u94f8\u7684\u5251\u7684\u72b6\u6001\uff0c\u5c06s\u6216\u4e0a\u5f53\u524d\u70b9\u94c1\u5320\u80fd\u94f8\u7684\u5251\u7684\u503c\uff0c\u8fdb\u884c\u5408\u6cd5\u7684\u8f6c\u79fb\u5373\u53ef\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<string>\n#include<cstring>\n#include<cmath>\n#include<queue>\nusing namespace std;\nconst int N=2e2+10,M=3e3+10,inf=1e9;\nint n,m,k,p,tot,a[N],d[N][N*50],vis[N][N*50];\nint head[N],next[M*2],ver[M*2],edge[M*2],cost[M*2];\npriority_queue<pair<pair<int,int>,int> >q;\ninline int read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\ninline void add(int x,int y,int z,int c){\n\tver[++tot]=y;edge[tot]=z;cost[tot]=c;next[tot]=head[x];head[x]=tot;\n}\ninline int dijkstra(){\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=0;j<(1<<p);j++) d[i][j]=inf;\n\t}\n\td[1][0]=0;q.push(make_pair(make_pair(0,1),0));\n\twhile(q.size()){\n\t\tint t=-q.top().first.first,x=q.top().first.second,s=q.top().second;q.pop();\n\t\tif(x==n) return t; \n\t\tif(vis[x][s]) continue;\n\t\tvis[x][s]=1;s|=a[x];\n\t\tfor(int i=head[x];i;i=next[i]){\n\t\t\tint y=ver[i],z=edge[i],c=cost[i];\n\t\t\tif((s|c)!=s) continue;\n\t\t\tif(d[y][s]>t+edge[i]){\n\t\t\t\td[y][s]=t+edge[i];\n\t\t\t\tq.push(make_pair(make_pair(-d[y][s],y),s));\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nint main(){\n\tn=read();m=read();p=read();k=read();\n\tfor(int i=1;i<=k;i++){\n\t\tint w=read(),q=read();\n\t\tfor(int j=1;j<=q;j++){\n\t\t\tint x=read();a[w]|=1<<(x-1);\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint x=read(),y=read(),z=read(),s=read(),c=0;\n\t\tfor(int j=1;j<=s;j++){\n\t\t\tint v=read();c|=1<<(v-1);\n\t\t}\n\t\tadd(x,y,z,c);add(y,x,z,c);\n\t}\n\tprintf(\"%d\\n\",dijkstra());\n\treturn 0;\n}\n```",
        "postTime": 1544254163,
        "uid": 53032,
        "name": "\u5c0f\u5858\u7a7a\u660e",
        "ccfLevel": 0,
        "title": "P3489 [POI2009]WIE-Hexer"
    },
    {
        "content": "\u9996\u5148 $p$ \u5f88\u5c0f\uff0c\u8003\u8651\u72b6\u538b\u3002\n\n\u8dd1 $\\text{Dijskra}$\uff0c\u4f46\u662f\u6ce8\u610f\u641c\u7d22\u65f6\u7684\u6bcf\u4e00\u4e2a\u72b6\u6001\uff08\u4e5f\u5c31\u662f\u653e\u5728\u4f18\u5148\u961f\u5217\u91cc\u7684\u5143\u7d20\uff09\u8981\u7ef4\u62a4\u4e09\u4e2a\u503c\uff1a\n\n- \u76ee\u524d\u6240\u5728\u7684\u70b9\u3002\n- \u5230\u8d77\u70b9\u7684\u8ddd\u79bb\u3002\n- \u5f53\u524d\u5251\u7684\u96c6\u5408\u3002\n\n\u6bcf\u4e00\u4e2a\u70b9\u7684\u6bcf\u4e00\u6761\u51fa\u8fb9\u4e5f\u8981\u7ef4\u62a4\u4e09\u4e2a\u4fe1\u606f\uff1a\n\n- \u8fb9\u7684\u7ec8\u70b9\u3002\n- \u8fb9\u7684\u957f\u5ea6\u3002\n- \u8fb9\u4e0a\u7684\u5996\u602a\u7684\u96c6\u5408\u3002\n\n\u800c\u4e14 $dis$ \u6570\u7ec4\u4e5f\u8981\u5f00\u4e24\u7ef4\uff01\n\n\u56e0\u4e3a\u5230\u8fbe\u540c\u4e00\u4e2a\u70b9\u800c\u83b7\u5f97\u4e0d\u540c\u79cd\u7c7b\u7684\u5251\uff0c\u6240\u8981\u8d70\u7684\u8ddd\u79bb\u663e\u7136\u662f\u4e0d\u540c\u7684\u3002\n\n\u679a\u4e3e\u6bcf\u4e00\u6761\u51fa\u8fb9\uff0c\u5982\u679c\u8fb9\u4e0a\u7684\u5996\u602a\u96c6\u5408\u662f\u5f53\u524d\u5251\u7684\u96c6\u5408\u7684\u5b50\u96c6\uff0c\u5c31\u53ef\u4ee5\u5165\u961f\uff0c\u5e76\u5f97\u5230\u7ec8\u70b9\u4e0a\u7684\u6240\u6709\u5251\u3002\n\n\u5426\u5219\u4e0d\u80fd\u653e\u884c\uff0c\u56e0\u4e3a\u4f60\u780d\u4e0d\u6b7b\u8def\u4e0a\u7684\u6240\u6709\u5996\u602a\u3002\n\n\u53e6\u5916\u6ce8\u610f\uff0c\u5728\u8d77\u70b9\u65f6\u81ea\u52a8\u83b7\u5f97\u8d77\u70b9\u7684\u5251\uff0c\u800c\u4e0d\u662f\u8f7b\u88c5\u4e0a\u9635\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(2^p(n+m)\\log n)$ \u5373 $\\mathcal{O}(\\texttt{\u80fd\u8fc7})$\u3002\n\n\u8fd8\u6709\u7531\u4e8e\u662f\u4e09\u5143\u7ec4\uff0c\u6240\u4ee5\u8981\u5199\u7ed3\u6784\u4f53\uff0c\u8fd8\u8981\u91cd\u8f7d\u8fd0\u7b97\u7b26\u3002\n\n~~\u987a\u4fbf\u5410\u69fd\u4e00\u4e0b\u67d0\u4e9b\u9898\u89e3\u4e2d\u7684 `pair<pair<int,int>,int>`~~\n\n\u89c1\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n, m, p, k;\nint x, y, z, c, t;\nint arr[210];\nint dis[210][8192];\nstruct node {\n\tint x;\n\tint d;\n\tint t;\n};\nbool operator < (node a, node b) {\n\treturn a.d > b.d;\n}\nvector<node> G[210];\npriority_queue<node> Q;\nint main() {\n\tcin >> n >> m >> p >> k;\n\twhile (k--) {\n\t\tcin >> x >> c;\n\t\twhile (c--) {\n\t\t\tcin >> t;\n\t\t\tarr[x] |= (1<<(t-1));\n\t\t}\n\t}\n\twhile (m--) {\n\t\tcin >> x >> y >> z >> c;\n\t\tk = 0;\n\t\twhile (c--) {\n\t\t\tcin >> t;\n\t\t\tk |= (1<<(t-1));\n\t\t}\n\t\tG[x].push_back((node){y, z, k});\n\t\tG[y].push_back((node){x, z, k});\n\t}\n\tmemset(dis, 0x3F, sizeof(dis));\n\tQ.push((node){1, 0, arr[1]});\n\twhile (!Q.empty()) {\n\t\tnode N = Q.top();\n\t\tQ.pop();\n\t\tint X = N.x;\n\t\tint D = N.d;\n\t\tint T = N.t;\n\t\tif (dis[X][T] <= D) continue;\n\t\tdis[X][T] = D;\n\t\tif (X == n) {\n\t\t\tcout << D << endl;\n\t\t\treturn 0;\n\t\t}\n\t\tfor (int i = 0; i < G[X].size(); i++) {\n\t\t\tif ((T | G[X][i].t) == T) Q.push((node){G[X][i].x, D + G[X][i].d, T | arr[G[X][i].x]});\n\t\t}\n\t}\n\tcout << -1 << endl;\n\treturn 0;\n}\n```\n\n$$\\tiny\\color{white}{\\texttt{\u987a\u5e26\u4e00\u63d0 , AC 520 \u796d}}$$",
        "postTime": 1628257784,
        "uid": 153422,
        "name": "0x3F",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3489\u3010[POI2009]WIE-Hexer\u3011"
    },
    {
        "content": "- \u524d\u7f6e\u77e5\u8bc6\uff1a\u52a8\u6001\u89c4\u5212+ Dijkstra \uff08 STL \u4f18\u5148\u961f\u5217\u4f18\u5316\uff09\u6216 SPFA +\u4f4d\u8fd0\u7b97  \n\n\n- \u9898\u9762 _(\u6765\u81ea\u4e8e\u7f51\u7edc)_\n\n  \u5927\u9646\u4e0a\u6709$n$\u4e2a\u6751\u5e84\uff0c$m$\u6761\u53cc\u5411\u9053\u8def\uff0c$p$\u79cd\u602a\u7269\uff0c$k$\u4e2a\u94c1\u5320\uff0c\u6bcf\u4e2a\u94c1\u5320\u4f1a\u5c45\u4f4f\u5728\u4e00\u4e2a\u6751\u5e84\u91cc\uff0c\u4f60\u5230\u4e86\u90a3\u4e2a\u6751\u5e84\u540e\u53ef\u4ee5\u8ba9\u4ed6\u7ed9\u4f60\u6253\u9020\u5251\uff0c\u6bcf\u4e2a\u94c1\u5320\u6253\u9020\u7684\u5251\u90fd\u53ef\u4ee5\u5bf9\u4ed8\u4e00\u4e9b\u7279\u5b9a\u79cd\u7c7b\u7684\u602a\u7269\uff0c\u6bcf\u6761\u9053\u8def\u4e0a\u90fd\u53ef\u80fd\u51fa\u73b0\u4e00\u4e9b\u7279\u5b9a\u79cd\u7c7b\u7684\u602a\u7269\uff0c\u6bcf\u6761\u9053\u8def\u90fd\u6709\u4e00\u4e2a\u901a\u8fc7\u6240\u9700\u8981\u7684\u65f6\u95f4\uff0c\u73b0\u5728\u8981\u4ece$1$\u8d70\u5230$n$\uff0c\u521d\u59cb\u7684\u65f6\u5019\u4f60\u6ca1\u6709\u5251\uff0c\u8981\u6c42\u5728\u7ecf\u8fc7\u4e00\u6761\u9053\u8def\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u79cd\u53ef\u80fd\u51fa\u73b0\u5728\u8fd9\u6761\u9053\u8def\u4e0a\u7684\u7684\u602a\u7269\uff0c\u4f60\u90fd\u6709\u5df2\u7ecf\u6709\u81f3\u5c11\u4e00\u628a\u5251\u53ef\u4ee5\u5bf9\u4ed8\u4ed6\uff0c\u6c42\u4ece$1$\u8d70\u5230$n$\u7684\u6700\u77ed\u65f6\u95f4\uff08\u6253\u9020\u5251\u4e0d\u9700\u8981\u65f6\u95f4\uff09\u3002  \n\n  \u7b2c\u4e00\u884c\u6b63\u6574\u6570 $n, m, p, k$ ($1$ \u2264 $n$ \u2264 $200$, $0$ \u2264 $m$ \u2264 $3000$, $1$ \u2264 $p$ \u2264 $13$, $0$ \u2264 $k$ \u2264 $n$). \u5206\u522b\u8868\u793a\u70b9\u6570\uff0c\u8fb9\u6570\uff0c\u5251/\u602a\u7269\u7684\u578b\u53f7\u6570\uff0c\u94c1\u5320\u6570\u3002 \u63a5\u4e0b\u6765k\u884c\u63cf\u8ff0\u94c1\u5320\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a \u6240\u5728\u70b9\u7f16\u53f7$w$\uff0c\u6240\u80fd\u953b\u9020\u7684\u5251\u79cd\u7c7b\u6570$q$\uff0c\u5347\u5e8f\u7ed9\u51fa$q$\u4e2a$1$\u5230$p$\u7684\u4e0d\u540c\u7684\u6574\u6570\u8868\u793a\u578b\u53f7\u3002\u63a5\u4e0b\u6765$m$\u884c\u63cf\u8ff0\u8fb9\uff1a \u8fde\u63a5\u7684\u9876\u70b9 $x$ , $y$\uff0c\u901a\u8fc7\u9700\u8981\u7684\u65f6\u95f4$t$ \uff0c\u8def\u4e0a\u7684\u602a\u7269\u6570$s$\uff0c$s$\u4e2a\u5355\u8c03\u4e0a\u5347\u7684$1$\u5230$p$\u6574\u6570\u8868\u793a\u602a\u7269\u578b\u53f7\u3002\n\n\n- \u5f88\u660e\u663e\u662f\u4e00\u9053\u6700\u77ed\u8def\u7684\u9898\uff0c\u4ec5\u4ec5\u662f\u52a0\u4e86\u602a\u517d\u8fd9\u6837\u4e00\u4e2a\u4e1c\u897f\u3002\n  \n- \u8003\u8651\u4fdd\u5b58\u602a\u7269\u5728\u6bcf\u6761\u8fb9\u4e0a\u7684\u72b6\u6001\uff08\u6709\u6ca1\u6709\uff09\uff0c\u4e00\u5f00\u59cb\u60f3\u7528 bitset ,\u53d1\u73b0\u4e0d\u7528\u7528\uff0c\u76f4\u63a5\u6574\u6570\u4f4d\u8fd0\u7b97\u3002\u5c06\u602a\u517d\u7684\u72b6\u6001\u6839\u636e\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u7684$1$\u548c$0$\u6765\u4fdd\u5b58\u3002\u8981\u5224\u65ad\u662f\u5426\u8981\u6c42\u7684\u5251\u90fd\u6709\u4e86\uff0c\u53ef\u4ee5\u7528  \n  ```cpp\n  if((edge[i].mans|mans)!=mans) continue\n  ```  \n  \u6765\u5224\u65ad,\u5373\u770b\u5f53\u524d\u6240\u62e5\u6709\u7684\u5251\u80fd\u4e0d\u80fd\u780d\u5b8c\u8def\u4e0a\u7684\u602a\u7269\uff0c\u82e5\u6ca1\u6709\u529e\u6cd5\u780d\u5b8c\u602a\u7269\uff0c\u5c31\u8bc1\u660e\u8def\u5f84\u4e0d\u5408\u6cd5\u3002\n  \n   \u611f\u89c9\u6ca1\u4ec0\u4e48\u5f88\u96be\u7684\u70b9\uff0c\u8dd1\u8fea\u6770\u65af\u7279\u62c9\u65f6\u6ce8\u610f\u4e00\u4e0b\u66f4\u65b0\uff0c\u4fdd\u8bc1\u8def\u5f84\u5408\u6cd5\u5c31\u597d\u4e86\u3002\n    \n- \u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O$($n$ $\\log$ $n$)\uff08\u5373 dj \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff09\u3002\n\n- \u4ee5\u4e0b\u662f\u5e26\u6ce8\u91ca\u7684 AC \u4ee3\u7801\uff08\u8f7b\u5fae\u5361\u5e38\uff09\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int Max_Cont(2e2+10);\nconst int Max_Way(3e3);\nconst int Max_Mans(1<<13|1);//\u8003\u8651\u4fdd\u5b5813\u4e2a\u602a\u517d\u7684\u4e8c\u8fdb\u5236\u72b6\u6001\nint n,m,p,k;\nint f[Max_Cont][Max_Mans];//\u6700\u77ed\u8def\u6570\u7ec4 \nbool vis[Max_Cont][Max_Mans];\nint can[Max_Cont];//\u6bcf\u4e2a\u94c1\u5320\u505a\u7684\u5251\u80fd\u780d\u54ea\u4e9b\u602a\u7269 \ninline int read(){//\u65e5\u5e38\u5feb\u8bfb \n\tregister int X(0); bool flag(1); char ch(getchar());\n\twhile(ch<'0'||ch>'9') {if(ch=='-') flag=0; ch=getchar();}\n\twhile(ch>='0'&&ch<='9') {X=(X<<1)+(X<<3)+ch-'0'; ch=getchar();}\n\tif(flag) return X;return ~(X-1);\n}\nstruct node{\n    int to,val,mans,next;\n};node edge[Max_Way<<1|1];\nint head[Max_Way<<1|1],tot;\ninline void add(int u,int v,int w,int mans){\n    edge[++tot].to=v;edge[tot].val=w;edge[tot].mans=mans;edge[tot].next=head[u];head[u]=tot;\n}\n#define make_pair_three(a,b,c) make_pair(make_pair(a,b),c)//\u65b9\u4fbf\u8d77\u89c1\uff0c\u5b66\u4e60\u4ed6\u4eba\u7528\u4e86\u5b8f\u5b9a\u4e49 \n#define fa(tmp) (1<<(tmp-1))//\u6807\u8bb0\u602a\u7269 \npriority_queue<pair<pair<int,int>,int>,vector<pair<pair<int,int>,int> >,greater<pair<pair<int,int>,int> > >heap;\ninline int dijkstra() {//STL\u4f18\u5148\u961f\u5217\u4f18\u5316\u8fea\u6770\u65af\u7279\u62c9 \n    memset(f,0x3f,sizeof f);\n    memset(vis,0,sizeof vis);\n    f[1][can[1]]=0;heap.push(make_pair_three(0,1,can[1]));\n    while(!heap.empty()){\n        int x((heap.top().first).second);//\u70b9 \n        int kn(heap.top().second);heap.pop();//\u80fd\u780d\u4ec0\u4e48\u602a\u7269 \n        if(vis[x][kn]) continue;vis[x][kn]=true;\n        for(int i(head[x]);i!=0;i=edge[i].next) {\n            int j(edge[i].to),w(edge[i].val),st(edge[i].mans);\n            if((kn&st)!=st) continue;//\u780d\u4e0d\u4e86\u8def\u4e0a\u7684\u602a\u7269 \n            int nexkn(kn|can[j]);\n            if(f[j][nexkn]>f[x][kn]+w) {//\u66f4\u65b0 \n                f[j][nexkn]=f[x][kn]+w;\n                heap.push(make_pair_three(f[j][nexkn],j,nexkn));\n            }\n        }\n    }\n    int ans(0x3f3f3f3f),bfd(1<<p);\n    for(int i(0);i<bfd;++i) ans=min(ans,f[n][i]); \n    if(ans==0x3f3f3f3f) return -1;\n    return ans;\n}\nsigned main() {\n    n=read();m=read();p=read();k=read();\n    for(int i(1);i<=k;++i){\n    \tint cont(read()),knife(read());\n    \tfor(int j(1);j<=knife;++j) can[cont]|=fa(read());//\u6807\u8bb0\u80fd\u780d\u7684\u602a\u7269 \n\t\t/*\u94c1\u5320\u5c45\u4f4f\u7684\u57ce\u9547\u7684\u6570\u91cf\uff0c\n\t\t\u4ed6\u7684\u5251\u80fd\u6709\u6548\u5bf9\u4ed8\u7684\u4e0d\u540c\u79cd\u7c7b\u7684\u602a\u7269\u7684\u6570\u91cf\uff0c\n\t\t\u4ee5\u53ca\u602a\u7269\u672c\u8eab\u7684\u79cd\u7c7b\uff08\u4ee5\u9012\u589e\u7684\u987a\u5e8f\uff09\u3002*/ \n\t}\n    for(int i(1);i<=m;++i){\n    \tint u(read()),v(read()),t(read()),s(read()),manster(0);\n        for(int j(1);j<=s;++j)manster|=fa(read());//\u4fdd\u5b58\u602a\u7269\u7684\u72b6\u6001 \n        add(u,v,t,manster);add(v,u,t,manster);//\u6ce8\u610f\u662f\u65e0\u5411\u8fb9 \n    }\n    printf(\"%d\",dijkstra());\n    return 0;\n}\n```",
        "postTime": 1611672561,
        "uid": 192615,
        "name": "_Yoimiya_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3489 \u3010[POI2009]WIE-Hexer\u3011"
    },
    {
        "content": "\u9996\u5148\u4e00\u8bfb\u9898\u5c31\u4f1a\u53d1\u73b0\u8fd9\u662f\u4e00\u9053\u6700\u77ed\u8def\u7684\u9898\u76ee\uff0c\u4f46\u662f\u5bf9\u4e8e\u662f\u5426\u80fd\u8d70\u8fd9\u6761\u8def\u5f88\u96be\u53bb\u5904\u7406\uff0c\u4f46\u662f\u4ed4\u7ec6\u8bfb\u9898\u4e4b\u540e\u6211\u4eec\u4f1a\u53d1\u73b0\u5c0f\u602a\u517d\u7684\u79cd\u7c7b\u5f88\u5c11\uff01\n\n\u8fd9\u5c31\u5f88nice,\u679c\u65ad\u72b6\u538b\u5904\u7406\uff0c\u53ea\u8981\u4f60\u5251\u7684\u79cd\u7c7b\u5305\u542b\u4e86\u8fd9\u6761\u8def\u4e0a\u6240\u6709\u7684\u5c0f\u602a\u517d\uff0c\u4f60\u5c31\u76f4\u63a5\u5361\u5361\u5361\u8fc7\u53bb\u4e86\uff0c\u4f46\u5982\u679c\u6ca1\u6709\u7684\u8bdd\u786c\u95ef\u4f60\u5c31\u770b\u4e0d\u5230\u660e\u5929\u7684\u592a\u9633\u4e86\u3002\u3002\u3002\n\n\nCode:\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 205\n#define maxe 6005\n#define maxp 8200\nusing namespace std;\nint n,m,p,k,tot,a[maxn],lnk[maxn],w[2][maxe],son[maxe],nxt[maxe],dis[maxp][maxn],hep_size;\nstruct ZS{\n\tint x,id,s;\n\tbool operator<(const ZS B)const{return x<B.x;}\n}hep[maxe];\nbool vis[maxp][maxn];\ninline int read(){\n\tint ret=0;char ch=getchar();\n\twhile (ch<'0'||ch>'9') ch=getchar();\n\twhile (ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret;\n}\nvoid add_e(int x,int y,int z,int c){son[++tot]=y;w[0][tot]=z;w[1][tot]=c;nxt[tot]=lnk[x];lnk[x]=tot;}\nvoid put(int x,int id,int s){\n\thep[++hep_size]=(ZS){x,id,s};int son=hep_size;\n\twhile (son!=1&&hep[son]<hep[son>>1]) swap(hep[son],hep[son>>1]),son>>=1;\n}\nZS get(){\n\tZS now=hep[1];int fa=1,son;hep[1]=hep[hep_size--];\n\twhile (fa<<1<=hep_size){\n\t\tif ((fa<<1|1)>hep_size||hep[fa<<1]<hep[fa<<1|1]) son=fa<<1;else son=fa<<1|1;\n\t\tif (hep[son]<hep[fa]) swap(hep[son],hep[fa]),fa=son;else break;\n\t}\n\treturn now;\n}\nint DIJ_HEAP(int x){\n\tmemset(dis,63,sizeof(dis));\n\tmemset(vis,0,sizeof vis);\n\tput(dis[a[x]][x]=0,x,a[x]);\n\twhile (hep_size){\n\t\tZS now=get();\n\t\tif (vis[now.s][now.id]) continue;\n\t\tif (now.id==n) return now.x;\n\t\tvis[now.s][now.id]=1;\n\t\tfor (int j=lnk[now.id];j;j=nxt[j]){\n\t\t\tif ((now.s|w[1][j])!=now.s) continue;\n\t\t\tint s=now.s|a[son[j]];\n\t\t\tif (dis[now.s][now.id]+w[0][j]>=dis[s][son[j]]) continue;\n\t\t\tput(dis[s][son[j]]=dis[now.s][now.id]+w[0][j],son[j],s);\n\t\t}\n\t}\n\treturn -1;\n}\nint main(){\n\tn=read(),m=read(),p=read(),k=read();\n\tfor (int i=1;i<=k;i++){\n\t\tint x=read(),t=read();\n\t\twhile (t--) a[x]|=1<<read()-1;\n\t}\n\tfor (int i=1;i<=m;i++){\n\t\tint x=read(),y=read(),z=read(),t=read(),c=0;\n\t\twhile (t--) c|=1<<read()-1;\n\t\tadd_e(x,y,z,c),add_e(y,x,z,c);\n\t}\n\tprintf(\"%d\\n\",DIJ_HEAP(1));\n\treturn 0;\n}\n```\n",
        "postTime": 1596020576,
        "uid": 188879,
        "name": "VioletIsMyLove",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3489 \u3010[POI2009]WIE-Hexer\u3011"
    },
    {
        "content": "\u795e\u4ed9\u9898%%%\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u7684\u72b6\u538b\u8fd8\u662f\u633a\u660e\u663e\u7684,\u4e3b\u8981\u662f\u6bd4\u8f83\u591a\u53d8\u5316\n\n1.\u8f6c\u79fb\n\n\u8f6c\u79fb\u662f\u5047\u8bbe\u76ee\u524d\u7684 $bits | \u8def\u4e0a\u7684bits == bits$, \u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a\u8fd9\u6761\u8def\u4e0a\u7684\u602a\u90fd\u6709\u76f8\u5e94\u7684\u5251\u5e94\u4ed8\n\n\u65b9\u7a0b: $dist[to][bits | sword[go]] =  max(dist[to][bits | sword[go], dist[now][bits] + dis);$\n\n2.\u8d77\u70b9\n\n**\u8bb0\u4f4f,\u8d77\u70b9\u4e0d\u662f $dist[1][0]$!!!.**\n\n\u8d77\u70b9\u662f $dist[1][sword[1]]$ ,\u5c31\u8fd9\u4e2a\u70b9\u5361\u4e86\u6211\u4e00\u5929\n\n3.\u8f93\u5165\n\n\u8f93\u5165\u7684\u65b9\u6cd5\u662f\u6bcf\u6b21\u5c06bits\u8bbe\u4e3a0,\u6bcf\u8f93\u5165\u4e00\u6b21\u5c31\u5c06bits|=1<<\u8f93\u5165\n\n**\u6ce8\u610f\u662f\u53cc\u5411\u8fb9**\n\n4.\u7b54\u6848\n\n\u7b54\u6848\u5c31\u662f\u5230\u8fbe\u70b9n\u7684\u8ddd\u79bb,\u53ef\u4ee5\u7528\u5806\u4f18\u5316\n\n\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <cstring>\nusing namespace std;\n#define pp pair<int,int>\n#define f first\n#define s second\nconst int MAXN = 505;\nconst int BD = 14;\nint n,m,k,p,head[MAXN], tot = 0;\nstruct Edge{\n  int to,dis, bits;\n};\nint bit_on[MAXN];\nint dist[MAXN][1<<BD], ans = 1e9;\nvector<Edge> adj[MAXN];\nbool inq[MAXN];\nbool vis[MAXN][BD];\ninline void dij(int source){\n  memset(dist,0x3f3f,sizeof(dist));\n  dist[source][bit_on[source]] = 0;\n  priority_queue<pair<int,pp> > q; q.push(make_pair(0,make_pair(source,bit_on[source])));//\u5806\u4f18\u5316\n  while(!q.empty()){\n    int qf = q.top().s.f,qs = q.top().s.s, curr = q.top().f;q.pop();\n    if (qf==n){ans = min(ans,-curr);break;}\n    for (Edge v : adj[qf]){\n      if((qs|v.bits)!=qs)continue;\n      int goes = qs|bit_on[v.to];\n      if (dist[v.to][goes]>dist[qf][qs]+v.dis){\n        dist[v.to][goes]=dist[qf][qs]+v.dis;\n        q.push(make_pair(-dist[v.to][goes],make_pair(v.to,goes)));//\u8f6c\u79fb\u65b9\u6cd5\n      }\n    }\n  }\n  cout << ((ans==1e9) ? -1 : ans);\n}\nint main(){\n  cin >> n >> m >> p >> k;\n  for (int i=0;i<k;i++){\n    int a,b; cin >> a >> b;\n    for (int j=0;j<b;j++){\n      int c; cin >> c;\n      bit_on[a]|= 1<<(c-1);//\u8f93\u5165\n    }\n  }\n  for (int i=0;i<m;i++){\n    int a,b,c,d, bit = 0; cin >> a >> b >> c>> d;\n    for (int j=0;j<d;j++) {\n      int e; cin >> e;\n      bit|=1<<(e-1);\n    }\n    adj[a].push_back((Edge){b,c,bit});\n    adj[b].push_back((Edge){a,c,bit});\n\t//\u5efa\u8fb9\n  }\n  dij(1);\n}\n```\n",
        "postTime": 1584032947,
        "uid": 219099,
        "name": "pocafup",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3489 \u3010[POI2009]WIE-Hexer\u3011"
    },
    {
        "content": "\u8fd9\u9898\u975e\u5e38\u66b4\u529b\u7684\u60f3\u6cd5\u5c31\u662f\u5206\u5c42\u6700\u77ed\u8def\u3002 \u5806\u4f18\u5316\u4f1a\u8dd1\u7684\u5feb\u4e00\u70b9\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#include<vector>\n#define mp(x,y,z) (make_pair(make_pair(x,y),z))  \nusing namespace std;\nconst int INF=1e9,N=205,M=6005;\nstruct edge{\n\tint link,next,val,st;\n}e[M];\nint tot,head[N],n,m,p,k,S[N];\ninline void add_edge(int u,int v,int w,int st){\n\te[++tot]=(edge){v,head[u],w,st}; head[u]=tot;\n}\ninline void insert(int u,int v,int w,int st){\n\tadd_edge(u,v,w,st);\n\tadd_edge(v,u,w,st); \n}\ninline void init(){\n\tscanf(\"%d%d%d%d\",&n,&m,&p,&k);\n\tfor (int i=1;i<=k;i++){\n\t\tint u,v,s; scanf(\"%d%d\",&u,&s);\n\t\tfor (int j=1;j<=s;j++){\n\t\t\tscanf(\"%d\",&v);\n\t\t\tS[u]|=1<<v-1;\n\t\t}\n\t}\n\tfor (int i=1;i<=m;i++){\n\t\tint u,v,w,s,st;\n\t\tscanf(\"%d%d%d%d\",&u,&v,&w,&s);\n\t\tst=0;\n\t\tfor (int j=1;j<=s;j++){\n\t\t\tint id;\n\t\t\tscanf(\"%d\",&id);\n\t\t\tst|=1<<id-1; \n\t\t}\n\t\tinsert(u,v,w,st);\n\t}\n}\nint dis[N][1<<13];\nbool vis[N][1<<13];\npriority_queue<pair<pair<int,int>,int>,vector<pair<pair<int,int>,int> >,greater<pair<pair<int,int>,int> > >heap; \ninline int dijkstra(){\n\tmemset(dis,127,sizeof(dis));\n\tdis[1][0]=0; heap.push(mp(0,1,0));\n\twhile (!heap.empty()){\n\t\tint s=heap.top().first.first;\n\t\tint u=heap.top().first.second;\n\t\tint st=heap.top().second;\n\t\theap.pop();\n\t\tif (u==n) return s;\n\t\tif (vis[u][st]) continue;\n\t\tvis[u][st]=1; st|=S[u];\n\t\tfor (int i=head[u];i;i=e[i].next){\n\t\t\tint v=e[i].link;\n\t\t\tif ((e[i].st|st)!=st) continue;\n\t\t\tif (dis[v][st]>s+e[i].val){\n\t\t\t\tdis[v][st]=s+e[i].val;\n\t\t\t\theap.push(mp(dis[v][st],v,st)); \n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\ninline void solve(){\n\tprintf(\"%d\\n\",dijkstra());\n}\nint main(){\n\tinit();\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1528540197,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3489 \u3010[POI2009]WIE-Hexer\u3011"
    },
    {
        "content": "\u7b97\u6cd5\uff1a\u6700\u77ed\u8def\n\n\u6709\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5728\u6c42\u6700\u77ed\u8def\u65f6\uff0c\u9898\u76ee\u6709\u4e00\u4e9b\u607c\u4eba\u7684\u5bf9\u6700\u77ed\u8def\u5f84\u7684\u8981\u6c42\uff0c\u6bd4\u5982\u5728\u672c\u9898\uff0c\u6709\u602a\u517d\u8fd9\u4e48\u4e2a\u4e1c\u4e1c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u8003\u8651\u7ed9 ``dis`` \u6570\u7ec4\u52a0\u4e00\u7ef4\u5ea6\uff0c\u662f\u4e0d\u662f\u5f88\u50cf\u505a\u52a8\u6001\u89c4\u5212\u65f6\u7684\u6280\u5de7\uff1f\u6bd4\u5982\u5728\u672c\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5f53\u524d\u53ef\u4ee5\u5e94\u5bf9\u7684\u602a\u517d\u7684\u4e8c\u8fdb\u5236\u72b6\u6001\u5f53\u4f5c\u4e00\u4e2a\u7ef4\u5ea6\u52a0\u5230 ``dis`` \u91cc\u9762\u53bb\u3002\n\n\u4ee3\u7801\u7ec6\u8282\uff1a\u6bcf\u4e00\u6761\u8fb9\u8981\u8bb0\u5f55\u4e24\u4e2a\u503c\uff0c\u4e00\u4e2a\u662f\u7ecf\u8fc7\u5929\u6570\uff0c\u53e6\u4e00\u4e2a\u662f\u9700\u8981\u5e94\u5bf9\u7684\u602a\u517d\u7684\u4e8c\u8fdb\u5236\u72b6\u6001\uff1b\u8dd1 ``Dijkstra`` \u7684\u65f6\u5019\uff0c\u4f18\u5148\u961f\u5217\u91cc\u8981\u5b58\u4e09\u4e2a\u53d8\u91cf\uff1a\u5f53\u524d\u6700\u77ed\u8def\u503c\uff0c\u5f53\u524d\u6751\u5e84\uff0c\u5f53\u524d\u53ef\u5e94\u5bf9\u602a\u517d\u7684\u4e8c\u8fdb\u5236\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u7528\u5230 ``pair<pair<int,int>,int>``\uff1b\u8fd8\u8981\u6ce8\u610f\u5f53\u524d\u53ef\u5e94\u5bf9\u72b6\u6001\u4e0d\u5305\u542b\u679a\u4e3e\u7684\u90a3\u6761\u8fb9\u7684\u9700\u5e94\u5bf9\u72b6\u6001\u5219\u5ffd\u7565\u8fd9\u6761\u8fb9\u3002\n\n\u4ee3\u7801\u6709\u70b9\u957f\uff0c\u5c06\u8fd1 $2 \\text{KB}$\uff0c\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<queue>\nusing namespace std;\nconst int maxn=2e2+10,maxm=3e3+10,maxs=(1<<14);\nint n,m,p,k,w,q,tmp,u,v,t; int dis[maxn][maxs]; bool vis[maxn][maxs];\nint kill[maxn];\nstruct Edge{\n    int to,day,ms,next;\n}edge[maxm<<1];\nint head[maxm<<1],tot;\nvoid add(int u,int v,int day,int ms){\n    tot++;\n    edge[tot].to=v;\n    edge[tot].day=day;\n    edge[tot].ms=ms;\n    edge[tot].next=head[u];\n    head[u]=tot;\n}\n#define P pair<pair<int,int>,int>\n#define mkp(a,b,c) make_pair(make_pair(a,b),c)\npriority_queue<P,vector<P>,greater<P> >q1;\nint Dijkstra(){\n    for(register int i=1;i<=n;i++)\n        for(register int j=0;j<(1<<p);j++) dis[i][j]=2e9,vis[i][j]=false;\n    dis[1][kill[1]]=0; q1.push(mkp(0,1,kill[1]));\n    while(!q1.empty()){\n        int x=q1.top().first.second; int sta=q1.top().second; q1.pop();\n        if(vis[x][sta]) continue;\n        vis[x][sta]=true;\n        for(register int i=head[x];i;i=edge[i].next){\n            int tmp=edge[i].to,d=edge[i].day,st=edge[i].ms;\n            if((sta&st)!=st) continue;\n            int new_sta=sta|kill[tmp];\n            if(dis[tmp][new_sta]>dis[x][sta]+d){\n                dis[tmp][new_sta]=dis[x][sta]+d;\n                if(!vis[tmp][new_sta]) q1.push(mkp(dis[tmp][new_sta],tmp,new_sta));\n            }\n        }\n    }\n    int answer=2e9;\n    for(register int i=0;i<(1<<p);i++)\n        if(dis[n][i]<answer) answer=dis[n][i];\n    if(answer==2e9) return -1;\n    return answer;\n}\nint main(){\n    scanf(\"%d%d%d%d\",&n,&m,&p,&k);\n    for(register int i=1;i<=k;i++){\n        scanf(\"%d%d\",&w,&q);\n        for(register int j=1;j<=q;j++){\n            scanf(\"%d\",&tmp);\n            kill[w]|=(1<<(tmp-1));\n        }\n    }\n    for(register int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&u,&v,&t);\n        int s,tot=0; scanf(\"%d\",&s);\n        for(register int j=1;j<=s;j++){\n            scanf(\"%d\",&tmp);\n            tot=tot|(1<<(tmp-1));\n        }\n        add(u,v,t,tot); add(v,u,t,tot);\n    }\n    printf(\"%d\\n\",Dijkstra());\n    return 0;\n}\n```",
        "postTime": 1607760765,
        "uid": 334727,
        "name": "BreakPlus",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3489 \u3010[POI2009]WIE-Hexer\u3011"
    }
]