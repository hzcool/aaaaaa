[
    {
        "content": "## [\u539f\u6587\u5730\u5740](https://www.cnblogs.com/bcoier/p/10526832.html)\n\n\u9898\u9762\u8981\u6c42\u5c0f\u4e8e\u7b49\u4e8eK\u7684\u8def\u5f84\u6570\u76ee\uff0c\u6211\u4e48\u5f88\u81ea\u7136\u7684\u60f3\u5230[\u70b9\u5206\u6cbb(\u4e0d\u4f1a\u7684\u5c31\u6233\u6211)](https://tbr-blog.blog.luogu.org/solution-p3806)\n\n\u8fd9\u9053\u9898\u7684\u7edf\u8ba1\u7b54\u6848\u4e0e\u6a21\u677f\u9898\u4e0d\u4e00\u6837\u7684\u5730\u65b9\u662f\u7531\u7b49\u4e8eK\u5230\u5c0f\u4e8e\u7b49\u4e8eK\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u5230\u5f53\u524d\u6839\uff08\u91cd\u5fc3\uff09\u7684\u8ddd\u79bb\u6392\u5e8f\uff0c\u7136\u540e\u7528\u7c7b\u4f3c\u53cc\u6307\u9488\u7684\u65b9\u6cd5\u6765\u6c42\u5c0f\u4e8e\u7b49\u4e8eK\u7684\u8fb9\u7684\u6570\u91cf\n\n\u4f46\u662f\u5982\u679c\u53ea\u662f\u53cc\u6307\u9488\u7edf\u8ba1\u7684\u8bdd\uff0c\u90a3\u4e48\u4ee5\u4e0b\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\u663e\u7136\u4e5f\u4f1a\u88ab\u7b97\u8fdb\u7b54\u6848\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/53974.png)\n\n\u800c\u6211\u4eec\u9700\u8981\u7684\u5408\u6cd5\u8def\u5f84\u662f\u957f\u6210\u8fd9\u6837\u7684\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/53973.png)\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u51cf\u53bb\u4e0a\u8ff0\u4e0d\u5408\u6cd5\u7684\u8def\u5f84\uff0c\u600e\u4e48\u51cf\u5462\uff1f\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6240\u6709\u4e0d\u5408\u6cd5\u7684\u8def\u5f84\uff0c\u90fd\u662f\u5728\u5f53\u524d\u8ddf\u7684\u67d0\u4e00\u68f5\u5b50\u6811\u4e0a\u7684\uff08\u6ca1\u6709\u8de8\u8d8a\u4e24\u4e2a\u5b50\u6811\uff09\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5bf9\u5f53\u524d\u8ddf\u8282\u70b9\u7684\u6bcf\u4e00\u6761\u8fb9\u8fdb\u884c\u904d\u5386\uff0c\u5229\u7528\u5bb9\u65a5\u7684\u601d\u60f3\u51cf\u53bb\u4e0d\u5408\u6cd5\u7684\u8def\u5f84\u3002\n\n\u5177\u4f53\u64cd\u4f5c\u4e3a\uff1a\u5f53\u904d\u5386\u91cd\u5fc3\u8282\u70b9\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u8ba1\u7b97dis\uff0c\u7136\u540e\u628a\u7ecf\u8fc7\u4e86\u4ece\u91cd\u5fc3\u5230\u65b0\u904d\u5386\u7684\u70b9\u7684\u8fb9\u4e24\u6b21\u7684\u8def\u5f84\u526a\u6389\uff08\u5c31\u662f\u4e0a\u8ff0\u4e0d\u5408\u6cd5\u8def\u5f84\uff09\uff0c\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define re register\n#define inf 123456789\nil int read()\n{\n    re int x = 0, f = 1; re char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n#define rep(i, s, t) for(re int i = s; i <= t; ++ i)\n#define drep(i, s, t) for(re int i = t; i >= s; -- i)\n#define Next(i, u) for(re int i = head[u]; i; i = e[i].next)\n#define mem(k, p) memset(k, p, sizeof(k))\n#define maxn 40005\nstruct edge{int v, w, next;}e[maxn << 1];\nint n, m, head[maxn], cnt, k, ans;\nint dp[maxn], vis[maxn], sum, dis[maxn], rt, size[maxn], rev[maxn], tot;\nil void add(int u, int v, int w)\n{\n    e[++ cnt] = (edge){v, w, head[u]}, head[u] = cnt;\n    e[++ cnt] = (edge){u, w, head[v]}, head[v] = cnt;\n}\nil void getrt(int u, int fr)\n{\n    size[u] = 1, dp[u] = 0;\n    Next(i, u)\n    {\n        int v = e[i].v;\n        if(v == fr || vis[v]) continue;\n        getrt(v, u);\n        size[u] += size[v], dp[u] = max(dp[u], size[v]);\n    }\n    dp[u] = max(dp[u], sum - size[u]);\n    if(dp[u] < dp[rt]) rt = u;\n}\nil void getdis(int u, int fr)\n{\n    rev[++ tot] = dis[u];\n    Next(i, u)\n    {\n        int v = e[i].v;\n        if(v == fr || vis[v]) continue;\n        dis[v] = dis[u] + e[i].w;\n        getdis(v, u);\n    }\n}\nil int doit(int u, int w)\n{\n    tot = 0, dis[u] = w, getdis(u, 0);\n    sort(rev + 1, rev + tot + 1);\n    int l = 1, r = tot, ans = 0;\n    while(l <= r) (rev[l] + rev[r] <= k) ? (ans += r - l, ++ l) : (-- r);\n    return ans;\n}\nil void solve(int u)\n{\n    vis[u] = 1, ans += doit(u, 0);\n    Next(i, u)\n    {\n        int v = e[i].v;\n        if(vis[v]) continue;\n        ans -= doit(v, e[i].w);\n        sum = size[v], dp[0] = n, rt = 0;\n        getrt(v, u), solve(rt);\n    }\n}\nint main()\n{\n    n = read();\n    rep(i, 1, n - 1){int u = read(), v = read(), w = read(); add(u, v, w);}\n    k = read(), dp[0] = sum = n, getrt(1, 0), solve(rt);\n    printf(\"%d\", ans);\n    return 0;\n}\n```",
        "postTime": 1552484784,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4178 \u3010Tree\u3011"
    },
    {
        "content": "\n\n\u5982\u679c\u6c42**\u7b49\u4e8eK**\u7684\u8def\u5f84\u6761\u6570\uff0c\u975e\u5e38\u7b80\u5355\u3002  \n\n\u672c\u9898\u6c42**\u5c0f\u4e8e\u7b49\u4e8eK**\u7684\u8def\u5f84\u6761\u6570\uff0c\u53ef\u4ee5\u8003\u8651\u6539\u53d8\u7edf\u8ba1\u7b54\u6848\u7684\u65b9\u6cd5\u3002  \n\n\u539f\u672c\u7edf\u8ba1\u7b54\u6848\u662f\u5bf9\u4e8e\u4e00\u4e2a\u8def\u5f84\u957f\u5ea6len\uff0c\u5224\u65adK-len\u5728\u4e4b\u524d\u7684\u5b50\u6811\u4e2d\u51fa\u73b0\u591a\u5c11\u6b21\u3002  \n\n\u73b0\u5728\u7edf\u8ba1\u7b54\u6848\u662f\u5bf9\u4e8e\u4e00\u4e2a\u8def\u5f84\u957f\u5ea6len\uff0c\u5224\u65ad\u5c0f\u4e8e\u7b49\u4e8eK-len\u7684\u6570\u5728\u4e4b\u524d\u7684\u5b50\u6811\u4e2d\u51fa\u73b0\u591a\u5c11\u6b21\u3002  \n\n\u4e4b\u524d\u6211\u4eec\u7528\u4e00\u4e2a\u6876\u6570\u7ec4f\u6765\u8f85\u52a9\uff0cf[i]\u8868\u793ai\u8fd9\u4e2a\u503c\u662f\u5426\u51fa\u73b0\u8fc7\u3002\n\n\u73b0\u5728\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6876\u6570\u7ec4\uff0c\u5373\u53ef\u7528\u4e00\u4e2alog\u7684\u590d\u6742\u5ea6\u6765\u5e73\u8861\u5355\u70b9\u4fee\u6539\u548c\u6c42\u524d\u7f00\u548c\u7684\u590d\u6742\u5ea6\u3002\n\n\u70b9\u5206\u6cbbO(logn)\uff0c\u679a\u4e3e\u5b50\u6811O(n)\uff0c\u7edf\u8ba1\u7b54\u6848O(logn)\uff0c\u7531\u4e8e\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u5e38\u6570\u8f83\u5c0f\u3002\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n\nusing namespace std;\n\ninline int rd(){\n    int ret=0,f=1;char c;\n    while(c=getchar(),!isdigit(c))f=c=='-'?-1:1;\n    while(isdigit(c))ret=ret*10+c-'0',c=getchar();\n    return ret*f;\n}\n\nconst int MAXN=262144;\nconst int INF=1<<29;\n\nint n,m;\n\nstruct Edge{\n    int next,to,w;\n}e[MAXN<<1];\nint ecnt,head[MAXN];\ninline void add(int x,int y,int w){\n    e[++ecnt].next = head[x];\n    e[ecnt].to = y;\n    e[ecnt].w = w;\n    head[x] = ecnt;\n}\n\nint t[MAXN];\nvoid update(int x,int val){\n    for(int i=x;i<=m;i+=i&-i)t[i]+=val;\n}\nint query(int x){\n    if(x==0) return 0;\n    int ret=0;\n    for(int i=x;i;i-=i&-i)ret+=t[i];\n    return ret;\n}\n\nbool vis[MAXN];\n\nint siz[MAXN];\nvoid getsiz(int x,int pre){\n    siz[x]=1;\n    for(int i=head[x];i;i=e[i].next){\n        int v=e[i].to;\n        if(vis[v]||v==pre) continue;\n        getsiz(v,x);\n        siz[x]+=siz[v];\n    }\n}\nint mn=INF,root;\nvoid getroot(int x,int pre,int tot){\n    int mx=0;\n    for(int i=head[x];i;i=e[i].next){\n        int v=e[i].to;\n        if(vis[v]||v==pre) continue;\n        mx=max(mx,siz[v]);\n        getroot(v,x,tot);\n    }\n    mx=max(mx,tot-siz[x]);\n    if(mx<mn) mn=mx,root=x;\n}\nint s[MAXN],sav[MAXN];\n\nvoid dfs(int x,int pre,int dis){\n    if(dis>m) return;\n    s[++s[0]]=dis;sav[++sav[0]]=dis;\n    for(int i=head[x];i;i=e[i].next){\n        int v=e[i].to;\n        if(vis[v]||v==pre) continue;\n        dfs(v,x,dis+e[i].w);\n    }\n}\n\nint ans;\n\nvoid dac(int x){//Divide and Conquer :)\n    sav[0]=0;mn=n;\n    getsiz(x,-1);\n    getroot(x,-1,siz[x]);\n    int u=root;vis[u]=1;\n    for(int i=head[u];i;i=e[i].next){\n        int v=e[i].to;\n        if(vis[v]) continue;\n        s[0]=0;dfs(v,u,e[i].w); \n        for(int j=s[0];j>=1;j--){\n            if(s[j]>m) continue;\n            ans+=query(m-s[j]);\n        }\n        for(int j=s[0];j>=1;j--){\n            if(s[j]>m) continue;\n            update(s[j],1);\n            ans++;\n        }\n    }\n    for(int i=sav[0];i>=1;i--){\n        if(sav[i]>m) continue;\n        update(sav[i],-1);\n    }\n    for(int i=head[u];i;i=e[i].next){\n        int v=e[i].to;\n        if(vis[v]) continue;\n        dac(v);\n    }\n}\n        \nint main(){\n    n=rd();\n    int x,y,w;\n    for(int i=1;i<n;i++){\n        x=rd();y=rd();w=rd();\n        add(x,y,w);add(y,x,w);\n    }\n    m=rd();\n    dac(1);\n    cout<<ans;\n    return 0;\n}\n\n```",
        "postTime": 1534247338,
        "uid": 13856,
        "name": "GhostCai",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4178 \u3010Tree\u3011"
    },
    {
        "content": "### \u8fd9\u91cc\u8981\u4ecb\u7ecd\u4e00\u4e0b\u4e0d\u4f9d\u9760\u5bb9\u65a5\u6765\u907f\u514d\u70b9\u5206\u6cbb\u7edf\u8ba1\u7b54\u6848\u91cd\u590d\u7684\u65b9\u6cd5\n\n\uff08\u4e0b\u9762\u7b80\u7565\u4ecb\u7ecd\u4e00\u4e0b\u70b9\u5206\u6cbb\u7b97\u6cd5\u7684\u4e3b\u8981\u601d\u60f3QwQ\uff09\n\n\u8fd9\u4e2a\u7b97\u6cd5\u4e3b\u8981\u91c7\u7528\u5206\u6cbb\u7684\u601d\u60f3\uff1a\u9996\u5148\u5728\u6811\u4e2d\u9009\u53d6\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6811\u6839\uff0c\u6811\u6839\u5c06\u8fd9\u68f5\u6811\u5206\u6210\u4e86\u51e0\u4e2a\u5b50\u6811\uff0c\u6211\u4eec\u7edf\u8ba1\u8fd9\u68f5\u6811\u6811\u6839\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u540e\uff0c\u6211\u4eec\u518d\u7528\u540c\u6837\u7684\u65b9\u6cd5\u9012\u5f52\u5904\u7406\u6811\u6839\u7684\u6bcf\u4e00\u9897\u5b50\u6811\u3002\u4e3a\u4e86\u4f7f\u6811\u5206\u6cbb\u51fa\u7684\u5b50\u6811\u5c3d\u91cf\u5e73\u5747\uff0c\u5c3d\u53ef\u80fd\u6700\u5c0f\u5316\u9012\u5f52\u5c42\u6570\uff0c\u6211\u4eec\u6bcf\u6b21\u9009\u53d6\u5f53\u524d\u6811\u7684\u91cd\u5fc3\u4f5c\u4e3a\u6839\u8282\u70b9\u9012\u5f52\u4e0b\u53bb\uff0c\u4fdd\u8bc1\u9012\u5f52\u5c42\u6570\u5728 $O(\\log n)$ \u7ea7\u522b\u3002\n\n\u672c\u9898\u8981\u7edf\u8ba1\u7684\u662f\u6811\u4e0a\u7684\u8def\u5f84\uff0c\u8003\u8651\u6811\u4e0a\u8def\u5f84\u5206\u4e3a\u7ecf\u8fc7\u6839\u8282\u70b9\u548c\u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9\u4e24\u7c7b\u3002\n\n\u6545\u53ef\u4ee5\u8003\u8651\u5728\u5206\u6cbb\u8fc7\u7a0b\u4e2d\uff0c\u7edf\u8ba1\u5f53\u524d\u5b50\u6811\u7ecf\u8fc7\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e2d\uff0c\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $k$ \u7684\u8def\u5f84\u5373\u53ef\u3002\u800c\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u7ecf\u8fc7\u5f53\u524d\u6839\u8282\u70b9\u7684\u8def\u5f84\uff0c\u6211\u4eec\u5c06\u5b83\u4eec\u4ea4\u7ed9\u5f53\u524d\u5b50\u6811\u7684\u5b50\u6811\u5904\u7406\u3002\u5177\u4f53\u4e00\u70b9\u6765\u8bf4\uff0c\u53ef\u4ee5\u8003\u8651\u5c06\u7ecf\u8fc7\u6839\u8282\u70b9\u8bbe\u5176\u4e24\u6bb5\u70b9\u4e3a $(x, y)$ \u7684\u8def\u5f84\u62c6\u5206\u6210\u4e24\u90e8\u5206\uff1a$(root, x)$ \u548c $(root,y)$\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6811\u5f62 dp \u9884\u5904\u7406\u51fa\u5b50\u6811\u5185\u6bcf\u4e2a\u70b9\u5230\u6839\u7684\u8ddd\u79bb $dis[u]$\uff0c\u8fd9\u6837\u6211\u4eec\u53ea\u9700\u7edf\u8ba1\u5b50\u6811\u5185\u70b9\u5bf9 $x, y$ \u6ee1\u8db3 $dis[x] + dis[y] \\leq k$ \u7684\u70b9\u5bf9\u6570\u91cf\u5373\u53ef\u3002\n\n\u4f46\u8fd9\u6837\u6709\u53ef\u80fd\u4f1a\u7edf\u8ba1\u5230\u4e00\u4e9b\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u70b9\u5bf9\uff0c\u5373 $x, y$ \u53ef\u80fd\u90fd\u5728 $root$ \u7684\u540c\u4e00\u68f5\u5b50\u6811\u4e2d\uff08\u5982\u4e0b\u56fe\uff0c$x, y$ \u4e24\u70b9\u5747\u5728 $root$ \u7684\u9ec4\u8272\u5b50\u6811\u4e2d\uff09\uff0c\u82e5\u6b64\u65f6\u4e5f\u6ee1\u8db3 $dis[x] + dis[y] \\leq k$\uff0c\u5219\u8be5\u70b9\u5bf9\u4e5f\u4f1a\u88ab\u8ba1\u5165\u7b54\u6848\u3002\u800c $x,y$ \u7ec4\u6210\u7684\u8def\u5f84\u663e\u7136\u6ca1\u6709\u7ecf\u8fc7\u6839\u8282\u70b9\uff0c\u6545\u8fd9\u6761\u8def\u5f84\u5b9e\u9645\u4e0a\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u6211\u4eec\u9700\u8981\u8003\u8651\u5982\u4f55\u53bb\u6389\u8fd9\u4e9b\u4e0d\u5408\u6cd5\u7684\u8def\u5f84\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/o6beyy07.png)\n\n\n\n\u73b0\u5728\u6b63\u9898\u5f00\u59cb\uff01qwq\n\n\u770b\u5230\u5927\u5bb6\u4e00\u822c\u90fd\u4f7f\u7528\u7684\u662f\u5bb9\u65a5\u6cd5\u5904\u7406\u7684\u4ee5\u4e0a\u60c5\u51b5\uff0c\u5373\u6bcf\u6b21\u5728\u7edf\u8ba1\u5f53\u524d\u5b50\u6811\u6839\u8282\u70b9\u7684\u7b54\u6848\u540e\uff0c\u518d\u51cf\u53bb\u6839\u8282\u70b9\u7684\u5404\u4e2a\u5b50\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u5bf9\u3002\u8fd9\u6837\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5e38\u6570\u8f83\u5927\uff0c \u6545\u8fd9\u91cc\u4ecb\u7ecd\u53e6\u5916\u4e00\u79cd\u5e38\u6570\u8f83\u5c0f\u4f46\u7ec6\u8282\u76f8\u5bf9\u8f83\u591a\u7684\u65b9\u6cd5\uff1a**\u67d3\u8272\u6cd5**\u3002\n\n\u8003\u8651\u6211\u4eec\u5728\u4e00\u6b21\u5206\u6cbb\u4e00\u4e2a\u5b50\u6811\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86\u5176\u6839\u8282\u70b9 $root$\uff0c\u6bcf\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb $dis[u]$\uff0c\u6bcf\u4e2a\u8282\u70b9\u5728 $root$ \u54ea\u4e00\u4e2a**\u5b50\u8282\u70b9**\u7684\u5b50\u6811\u4e2d $color[u]$\uff08\u7279\u522b\u7684\uff0c$color[root] = root$\uff09 \u3002\n\n\u6709\u4e00\u4e2a\u663e\u7136\u7684\u6027\u8d28\u662f\uff0c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7 $root$\uff0c\u5f53\u4e14\u4ec5\u5f53\u8def\u5f84\u7684\u4e24\u7aef\u70b9 $u, v$ \u6ee1\u8db3 $color[u] \\neq color[v]$ \u3002\n\n\u6211\u4eec\u5148\u5c06\u6811\u4e2d\u7684\u8282\u70b9\u90fd\u53d6\u51fa\u653e\u81f3\u6570\u7ec4\u4e2d\uff0c\u6309\u7167\u5b83\u4eec\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff08$dis[u]$\uff09\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u6392\u5b8c\u5e8f\u540e\uff0c\u6211\u4eec\u53ea\u9700\u7528\u4e24\u4e2a\u6307\u9488 $i,j$\uff0c\u4e00\u4e2a\u4ece\u524d\u5f00\u59cb\uff0c\u4e00\u4e2a\u4ece\u540e\u5f00\u59cb\u626b\u63cf\u6570\u7ec4\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa $dis[x] + dis[y] \\leq k$ \u7684\u70b9\u5bf9 $(x,y)$ \u7684\u4e2a\u6570\uff0c\u5176\u4e2d $x, y$ \u5206\u522b\u662f\u6307\u9488 $i,j$ \u6240\u6307\u5411\u7684\u8282\u70b9\u3002\n\n\u5177\u4f53\u8ba1\u7b97\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n1\u3001\u5c06\u5de6\u6307\u9488\u4ece\u5de6\u5411\u53f3\u626b\u63cf\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u8ba1\u7b97\u5408\u6cd5\u7684\u8def\u5f84\u6761\u6570\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u5728\u5de6\u6307\u9488\u626b\u63cf\u8fc7\u7a0b\u4e2d\uff0c\u6070\u597d\u4f7f\u5f97 $(x, y)$ \u6ee1\u8db3 $dis[x] + dis[y] \\leq k$ \u7684\u53f3\u6307\u9488\u4f4d\u7f6e\u662f\u5355\u8c03\u9012\u51cf\u7684\u3002\n\n2\u3001\u5bf9\u4e8e\u5982\u4f55\u53bb\u6389\u4e0d\u5408\u6cd5\u7684\u70b9\u5bf9\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 $f[i]$ \u8868\u793a\u5728\u5de6\u53f3\u4e24\u6307\u9488\u4e2d\u95f4\u7684\u70b9\uff08\u5305\u62ec\u5de6\u53f3\u4e24\u6307\u9488\u6307\u5411\u7684\u70b9\uff09\u4e2d\uff0c\u6ee1\u8db3 $color[u] = i$ \u7684\u70b9\u7684\u4e2a\u6570\u3002\u4e0d\u96be\u53d1\u73b0\u53ea\u6709\u5728\u5de6\u53f3\u6307\u9488\u79fb\u52a8\u65f6\uff0c$f$ \u6570\u7ec4\u4e2d\u7684\u503c\u624d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u6545 $f$ \u6570\u7ec4\u53ef\u4ee5\u5728\u6307\u9488\u79fb\u52a8\u65f6\u76f4\u63a5\u7ef4\u62a4\u3002\n\n3\u3001\u8bbe\u5f53\u524d\u5de6\u6307\u9488\u6307\u5411\u7684\u70b9\u4e3a $x$\uff0c\u5219 $x$ \u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a**\u5de6\u53f3\u6307\u9488\u4e2d\u95f4\u7684\u70b9\u7684\u4e2a\u6570**\u51cf\u53bb**\u5728\u8fd9\u4e9b\u70b9\u4e2d\u4e0e $x$ \u5728 $root$ \u76f8\u540c\u5b50\u6811\u4e2d\u70b9\u7684\u4e2a\u6570\uff08\u5373\u6ee1\u8db3 $color[u] = color[x]$ \u7684\u70b9 $u$ \u7684\u4e2a\u6570\uff09**\uff0c\u5373 $j - i + 1 - f[color[x]]$ \u3002\n\n\u663e\u7136\u4e0a\u8ff0\u6392\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$\uff0c\u626b\u63cf\u7edf\u8ba1\u7b54\u6848\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$ \u3002\n\n\u7efc\u4e0a\uff0c\u7ed3\u5408 master \u5b9a\u7406\uff0c\u672c\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log^2 n)$ \u3002\n\nCode\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nnamespace Primary\n{\n\nconst int maxn = 40010;\nint n, m, dp[maxn], size[maxn], dis[maxn], help[maxn];\nint head[maxn], to[maxn << 1], next[maxn << 1], val[maxn << 1], tot = 1;\nint root, sum, cnt, ans = 0, color[maxn], f[maxn];\nbool vis[maxn];\n\nbool cmp(int x, int y) {return dis[x] < dis[y];}\n\ninline void add_edge(int u, int v, int w)\n{\n\tto[++tot] = v;\n\tval[tot] = w;\n\tnext[tot] = head[u];\n\thead[u] = tot;\n}\n\nvoid getroot(int u, int pre)//\u6811\u5f62 dp \u6c42\u6811\u7684\u91cd\u5fc3\n{\n\tsize[u] = 1, dp[u] = 0;\n\tfor (int c = head[u], v; c; c = next[c])\n\t{\n\t\tv = to[c];\n\t\tif (v == pre || vis[v]) continue;\n\t\tgetroot(v, u);\n\t\tsize[u] += size[v];\n\t\tdp[u] = max(dp[u], size[v]);\n\t}\n\tdp[u] = max(dp[u], sum - size[u]);\n\tif (dp[u] < dp[root]) root = u;\n}\n\nvoid getdis(int u, int pre)//\u5bf9\u4e8e\u5f53\u524d\u5b50\u6811\u9884\u5904\u7406 dis, color, f \u7b49\u6570\u7ec4\n{\n\thelp[++cnt] = u;//\u5c06\u5f53\u524d\u5b50\u6811\u8282\u70b9\u7f16\u53f7\u5747\u653e\u5165 help \u6570\u7ec4\u4e2d\n\tcolor[u] = color[pre], ++f[color[u]];\n\tfor (int c = head[u], v; c; c = next[c])\n\t{\n\t\tv = to[c];\n\t\tif (v == pre || vis[v]) continue;\n\t\tdis[v] = dis[u] + val[c];\n\t\tgetdis(v, u);\n\t}\n}\n\ninline int calc(int u)\n{\n\tdis[u] = 0, cnt = 0;\n\thelp[++cnt] = u;\n\tcolor[u] = u, f[color[u]] = 1;//\u6ce8\u610f\u9884\u5904\u7406\u7ec6\u8282\n\tfor (int c = head[u], v; c; c = next[c])\n\t{\n\t\tv = to[c];\n\t\tif (vis[v]) continue;\n\t\tcolor[v] = v, dis[v] = val[c];\n\t\tf[color[v]] = 0;//\u6ce8\u610f\u6e05\u7a7a f \u6570\u7ec4\n\t\tgetdis(v, v);\n\t}\n\tsort(help + 1, help + cnt + 1, cmp);//\u5c06\u8282\u70b9\u6309 dis \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\tint i = 1, j = cnt, res = 0;\n\twhile (i < j)\n\t{\n\t\twhile (i < j && dis[help[i]] + dis[help[j]] <= m)\n\t\t{\n\t\t\tres += j - i + 1 - f[color[help[i]]];\n\t\t\t--f[color[help[i]]];//\u6307\u9488\u79fb\u52a8\u65f6\u76f4\u63a5\u7ef4\u62a4 f \u6570\u7ec4,\u6709\u4e9b\u7c7b\u4f3c\u4e8e\u83ab\u961f\n\t\t\t++i;\n\t\t}\n\t\t--f[color[help[j]]];\n\t\t--j;\n\t}\n\treturn res;\n}\n\nvoid solve(int u)//\u4e3b\u8981\u5206\u6cbb\u51fd\u6570\n{\n\tvis[u] = true;\n\tans += calc(u);\n\tfor (int c = head[u], v; c; c = next[c])\n\t{\n\t\tv = to[c];\n\t\tif (vis[v]) continue;\n\t\tsum = size[v] > size[u] ? n - size[u] : size[v];//\u8ba1\u7b97\u4e0b\u5c42\u9012\u5f52\u5b50\u6811\u5927\u5c0f\n\t\troot = 0, dp[0] = n;\n\t\tgetroot(v, u);//\u6bcf\u6b21\u6c42\u51fa\u91cd\u5fc3\u540e\u7ee7\u7eed\u5206\u6cbb\n\t\tsolve(root);\n\t}\n}\n\nvoid main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i = 1, u, v, w; i < n; ++i)\n\t{\n\t\tscanf(\"%d%d%d\", &u, &v, &w);\n\t\tadd_edge(u, v, w), add_edge(v, u, w);\n\t}\n\tscanf(\"%d\", &m);\n\tdp[0] = sum = n;\n\tgetroot(1, 0);\n\tsolve(root);\n\tprintf(\"%d\\n\", ans);\n}\n\n}\n\nint main()\n{\n\tPrimary::main();\n\treturn 0;\n}\n```",
        "postTime": 1570341512,
        "uid": 121638,
        "name": "Nickel_Angel",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4178 \u3010Tree\u3011"
    },
    {
        "content": "\n\u8fd9\u9053\u9898\u662f\u5e94\u8be5\u52a0\u5f3a\u6570\u636e\u4e86\u3002\u3002\u3002\n\n~~\u5f53\u7136\u5982\u679c\u8fd9\u9053\u9898\u4e0d\u6253\u7b97\u505a\u70b9\u5206\u6cbb\u6a21\u677f\u9898\u7684\u8bdd\u53ef\u4ee5\u4e0d\u7528~~\n\n$O(n\\sqrt n\\ \\log \\sqrt n)$\u5206\u5757\u5728\u6d1b\u8c37\u4f18\u79c0\u7684$O2$\u4e0b\u8fc7\u4e86\u3002\u3002\u3002\n\n*********\n\n\u6211\u4eec\u5047\u8bbe$1$\u4e3a\u6811\u6839\uff0c$dfs$\u904d\u5386\u4e00\u904d\u5c31\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e00\u4e2a\u8282\u70b9$x$\u5230$1$\u7684\u8ddd\u79bb$dis[x]$\u3002\n\n\u7136\u540e\u53ef\u4ee5\u66b4\u529b\u5224\u65ad$dis$\u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u65f6\u5c0f\u4e8e\u7b49\u4e8e$k$\u7684\u3002\n\n\u6bcf\u4e00\u4e2a\u70b9\u4f5c\u6839\u8dd1\u4e00\u8fb9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(n^2)$\u3002\n\n\u8003\u8651\u4f18\u5316\u4e0a\u8ff0\u7b97\u6cd5\u3002\n\n\u8003\u8651\u6362\u6839\u3002\u6211\u4eec\u628a\u6839\u4ece$1$\u8f6c\u79fb\u5230$x$\u65f6\uff0c\u6240\u6709$x$\u5b50\u6811\u5185\u7684\u8282\u70b9\u5230$x$\u7684\u8ddd\u79bb\u51cf\u5c11\u4e86$dis(1,x)$\uff0c\u5176\u4ed6\u70b9\u5230$x$\u8ddd\u79bb\u589e\u52a0\u4e86$dis(1,x)$\u3002\n\n\u7528$dfs$\u5e8f\u628a\u6bcf\u4e00\u68f5\u5b50\u6811\u7684\u7f16\u53f7\u53d8\u4e3a\u8fde\u7eed\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u5728\u539f$dis$\u5e8f\u5217\u4e2d\u8fdb\u884c\u533a\u95f4\u52a0\u51cf\u64cd\u4f5c\u5c31\u53ef\u4ee5\u4e86\u7ef4\u62a4\u51fa\u4ee5$x$\u4e3a\u6839\u65f6\uff0c\u6bcf\u4e00\u4e2a\u70b9\u5230$x$\u7684\u8ddd\u79bb\u3002\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u9700\u8981\u6c42\u6574\u4e2a$dis$\u6570\u7ec4\u4e2d\u6709\u591a\u5c11\u4e2a\u662f$\\leq k$\u7684\uff0c\u90a3\u4e48\u5176\u5b9e\u5c31\u662f [\u6559\u4e3b\u7684\u9b54\u6cd5](https://www.luogu.com.cn/problem/P2801) \u90a3\u9053\u9898\u4e86\u3002\n\n\u91c7\u7528\u5206\u5757\uff0c\u533a\u95f4\u52a0\u51cf\u5bb9\u6613\u5b9e\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5757\u7ef4\u62a4\u4e00\u4e2a$Sort$\u6570\u7ec4\uff0c\u8868\u793a\u8fd9\u4e2a\u5757\u7684$dis$\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u3002\u90a3\u4e48\u6bcf\u6b21\u4fee\u6539\u65f6\uff0c$Sort$\u6570\u7ec4\u53ef\u4ee5\u5728$O(\\sqrt n\\ \\log \\sqrt n)$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u66b4\u529b\u7ef4\u62a4\u3002\n\n\u6ce8\u610f\u5982\u679c\u8981\u628a\u4e00\u4e2a\u5757\u6574\u4f53\u52a0\u51cf\uff0c\u90a3\u4e48\u76f4\u63a5\u5728\u8fd9\u4e2a\u5757\u7684$add$\u6570\u7ec4\u4e2d\u52a0\u51cf\u5373\u53ef\uff0c\u5728$dis$\u548c$Sort$\u4e2d\u90fd\u4e0d\u9700\u8981\u4fee\u6539\u3002\n\n\u8be2\u95ee\u65f6\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5757$p$\uff0c\u5728\u8fd9\u4e2a\u5757\u7684$Sort$\u4e2d\u4e8c\u5206\u51fa\u7b2c\u4e00\u4e2a\u4e25\u683c\u5927\u4e8e$k-add[p]$\u7684\u6570\u7684\u4f4d\u7f6e$pos$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5757\u4e2d\u5c0f\u4e8e\u7b49\u4e8e$k$\u7684\u6570\u5b57\u5c31\u6709$pos-1$\u4e2a\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728$O(\\sqrt n\\ \\log \\sqrt n)$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6c42\u51fa\u8ddd\u79bb\u4e00\u4e2a\u70b9\u6709\u591a\u5c11\u4e2a\u70b9\u8def\u5f84\u957f\u5ea6$\\leq k$\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\sqrt n\\ \\log \\sqrt n)$\u3002\u5e38\u6570\u6781\u5927\u3002\n\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nconst int N=40010,M=210;\nint L[M],R[M],pos[N],add[M],Sort[M][M],head[N],dis[N],Dis[N],rk[N],dfn[N],size[N];\nint n,m,T,tot,ans;\n\nstruct edge\n{\n\tint next,to,dis;\n}e[N*2];\n\nvoid addedge(int from,int to,int d)\n{\n\te[++tot].to=to;\n\te[tot].dis=d;\n\te[tot].next=head[from];\n\thead[from]=tot;\n}\n\nvoid dfs1(int x,int fa)  //\u6c42\u51fa\u6bcf\u4e00\u4e2a\u70b9\u5230\u70b91\u7684\u8ddd\u79bb\uff0c\u540c\u65f6\u6c42\u51fadfs\u5e8f\n{\n\tdfn[x]=++tot; rk[tot]=x; size[x]=1;\n\tfor (register int i=head[x];~i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif (v!=fa)\n\t\t{\n\t\t\tDis[v]=Dis[x]+e[i].dis;\n\t\t\tdfs1(v,x);\n\t\t\tsize[x]+=size[v];\n\t\t}\n\t}\n}\n\nvoid update(int l,int r,int val)  //\u5206\u5757\u533a\u95f4\u52a0\u6a21\u677f\n{\n\tint p=pos[l],q=pos[r];\n\tif (q-p<=1)\n\t{\n\t\tfor (register int i=l;i<=r;i++) dis[i]+=val;\n\t\tfor (register int i=L[p];i<=R[q];i++) Sort[pos[i]][i-L[pos[i]]+1]=dis[i];  //\u6574\u4e2a\u5757\u66b4\u529b\u4fee\u6539\n\t\tsort(Sort[p]+1,Sort[p]+1+R[p]-L[p]+1);\n\t\tif (p!=q) sort(Sort[q]+1,Sort[q]+1+R[q]-L[q]+1);  //\u91cd\u65b0\u7ef4\u62a4\n\t\treturn;\n\t}\n\tfor (register int i=l;i<=R[p];i++) dis[i]+=val;\n\tfor (register int i=L[q];i<=r;i++) dis[i]+=val;\n\tfor (register int i=L[p];i<=R[p];i++) Sort[p][i-L[p]+1]=dis[i];\n\tfor (register int i=L[q];i<=R[q];i++) Sort[q][i-L[q]+1]=dis[i];  //\u4e24\u8fb9\u66b4\u529b\u4fee\n\tsort(Sort[p]+1,Sort[p]+1+R[p]-L[p]+1);\n\tsort(Sort[q]+1,Sort[q]+1+R[q]-L[q]+1);\n\tfor (register int i=p+1;i<q;i++)\n\t\tadd[i]+=val;\n}\n\nvoid dfs2(int x,int fa)  //\u6362\u6839\u6c42\u7b54\u6848\n{\n\tfor (register int i=1;i<=T;i++)\n\t\tans+=upper_bound(Sort[i]+1,Sort[i]+1+R[i]-L[i]+1,m-add[i])-Sort[i]-1;\n\tfor (register int i=head[x];~i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif (v!=fa)\n\t\t{\n\t\t\tupdate(dfn[v],dfn[v]+size[v]-1,-e[i].dis*2);\n\t\t\tupdate(1,n,e[i].dis);  //\u6362\u6839\n\t\t\tdfs2(v,x);\n\t\t\tupdate(dfn[v],dfn[v]+size[v]-1,e[i].dis*2);\n\t\t\tupdate(1,n,-e[i].dis);\n\t\t}\n\t}\n}\n\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d\",&n);\n\tfor (register int i=1,x,y,z;i<n;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\taddedge(x,y,z); addedge(y,x,z);\n\t}\n\tscanf(\"%d\",&m);\n\ttot=0; T=sqrt(n);\n\tif (T*T<n) T++;\n\tdfs1(1,0);\n\tfor (register int i=1;i<=T;i++)\n\t{\n\t\tL[i]=R[i-1]+1; R[i]=min(n,T*i);\n\t\tfor (register int j=L[i];j<=R[i];j++)\n\t\t\tdis[j]=Sort[i][j-L[i]+1]=Dis[rk[j]],pos[j]=i;\n\t\tsort(Sort[i]+1,Sort[i]+1+R[i]-L[i]+1);\n\t}\n\tdfs2(1,0);\n\tprintf(\"%d\",(ans-n)/2);  //\u5148\u51cf\u53bbn\u4e2a(x,x)\u7684\u70b9\u5bf9\uff0c\u7136\u540e(x,y)\u548c(y,x)\u53ea\u7b97\u4e00\u4e2a\uff0c\u6240\u4ee5\u9664\u4ee52\n\treturn 0;\n}\n```\n",
        "postTime": 1576850493,
        "uid": 53962,
        "name": "stoorz",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4178 \u3010Tree\u3011"
    },
    {
        "content": "## \u70b9\u5206\u6cbb\n\n\uff08\u98df\u7528\u94fe\u63a5\u6548\u679c\u66f4\u4f73\u54e6\uff1a[\u6211\u7684blog](http://blog.csdn.net/stone41123/article/details/78141624)\uff09\n\n\u5173\u4e8e\u8fd9\u4e2a\u9898\uff0c\u5c31\u662f\u6bcf\u6b21\u627e\u91cd\u5fc3\uff0c\u4ee5\u91cd\u5fc3\u4e3a\u6839dfs\u6bcf\u4e2a\u70b9\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u7edf\u8ba1\u7ecf\u8fc7\u91cd\u5fc3\u7684\u8def\u5f84\uff0c\u7136\u540e\u5220\u9664\u91cd\u5fc3\uff08\u6253\u4e2a\u6807\u8bb0\uff09\uff0c\u7ee7\u7eed\u9012\u5f52\u6267\u884c\u91cd\u5fc3\u7684\u6bcf\u68f5\u5b50\u6811\u3002\n\n\u7edf\u8ba1\u91cd\u5fc3\u7684\u7b54\u6848\u65f6\uff0c\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u70b9\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\u6392\u4e2a\u5e8f\uff0c\u5de6\u53f3\u4e24\u4e2a\u6307\u9488\u626b\uff0c\u53ef\u4ee5O(n)\u7edf\u8ba1\uff0c\u518d\u52a0\u4e0aO(nlogn)\u7684\u6392\u5e8f\uff0c\u603b\u65f6\u95f4\u5c31\u662fnlog2n\n\n\u7136\u540e\u5f97\u51fa\u7684\u7b54\u6848\u5c31\u662f\u9519\u8bef\u7684\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u624b\u9020\u4e00\u7ec4\u6570\u636e\uff0c\u753b\u51fa\u56fe\u6765\uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u65f6\u6211\u4eec\u66b4\u529b\u7edf\u8ba1\uff08\u5c31\u662f\u4e0d\u8981\u62ff\u6307\u9488\u626b\uff09\uff0c\u770b\u770b\u7b54\u6848\u4e2d\u90fd\u662f\u4ec0\u4e48\u8def\u5f84\u3002\n\n\u7136\u540e\u5c31\u53d1\u73b0\uff0c\u6709\u8def\u5f84\u591a\u6b21\u88ab\u7edf\u8ba1\uff0c\u800c\u4e14\u7b2c\u4e00\u6b21\u7edf\u8ba1\u7684\u65f6\u95f4\u8fd8\u662f\u5728\u8fd9\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u68f5\u5b50\u6811\u4e2d\u65f6\u5c31\u88ab\u7edf\u8ba1\u4e86\u3002\n\n\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u5462\uff1f\u770b\u8fd9\u5f20\u56fe\uff0c\u8fd9\u5c31\u662f\u90a3\u4e2a\u88ab\u91cd\u590d\u7edf\u8ba1\u7684\u8def\u5f84\u3002\n\n![](http://img.blog.csdn.net/20170929214137280?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3RvbmU0MTEyMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\u56fe\u7247\u4e2d\u6570\u5b57\u8868\u793a\u8def\u5f84\u7684\u7ecf\u8fc7\u987a\u5e8f\uff0c\u7bad\u5934\u8868\u793a\u8def\u5f84\u65b9\u5411\u3002\n\n\u5f88\u660e\u663e\uff0c\u5982\u679c\u56fe\u4e0a\u8fd9\u6761\u8def\u7684\u603b\u957f\u4e0d\u8d85\u8fc7k\uff0c\u90a3\u4e48\u6beb\u65e0\u7591\u95ee\uff0c\u4e00\u53f7\u70b9\u548c\u4e94\u53f7\u70b9\u4f1a\u88ab\u7edf\u8ba1\u4e24\u6b21\uff0c\u800c\u56fe\u4e0a\u8fd9\u6761\u8def\u5f84\u660e\u663e\u4e0d\u7b26\u5408\u9898\u610f\uff0c\u4e0d\u53ef\u4ee5\u88ab\u7edf\u8ba1\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u518d\u51cf\u53bb\u8fd9\u4e9b\u8def\u5f84\u5c31\u597d\u4e86\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u6211\u7684\u4ee3\u7801\u3002\n\n\u7136\u540e\u5c31\u662f\u8981\u591a\u6ce8\u610f\u7ec6\u8282\uff0c\u70b9\u5206\u6cbb\u7ec6\u8282\u6bd4\u8f83\u591a\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\ninline int read(){\n    int x=0;char ch=' ';int f=1;\n    while(ch!='-'&&(ch<'0'||ch>'9'))ch=getchar();\n    if(ch=='-')f=-1,ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nstruct edge{\n    int to,next,w;\n}e[80001];\nint n,tot,root;\nll k;\nint head[40001];\ninline void addedge(int x,int y,int l){\n    e[++tot].to=y;e[tot].next=head[x];e[tot].w=l;head[x]=tot;\n}\nint size[40001],vis[40001],mx,sz;\nll dis[40001],q[40001],l,r;\nvoid getroot(int x,int fa){\n    size[x]=1;int num=0;\n    for(int i=head[x];i;i=e[i].next){\n        int u=e[i].to;\n        if(u==fa||vis[u])continue;\n        getroot(u,x);\n        size[x]+=size[u];\n        num=max(num,size[u]);\n    }\n    num=max(num,sz-size[x]);\n    if(num<mx){\n        mx=num;root=x;\n    }\n}\nvoid getdis(int x,int fa){\n    q[++r]=dis[x];\n    for(int i=head[x];i;i=e[i].next){\n        int u=e[i].to;\n        if(u==fa||vis[u])continue;\n        dis[u]=dis[x]+e[i].w;\n        getdis(u,x);\n    }\n}\nll calc(int x,int v){\n    r=0;\n    dis[x]=v;\n    getdis(x,0);\n    ll sum=0;\n    l=1;\n    sort(q+1,q+r+1);\n    while(l<r){\n        if(q[l]+q[r]<=k)sum+=r-l,l++;\n        else r--;\n    }\n    return sum;\n}\nll ans;\nvoid dfs(int x){\n    ans+=calc(x,0);\n    vis[x]=1;\n    for(int i=head[x];i;i=e[i].next){\n        int u=e[i].to;\n        if(vis[u])continue;\n        ans-=calc(u,e[i].w);\n        sz=size[u];\n        mx=0x3f3f3f3f;\n        getroot(u,0);\n        dfs(root);\n    }\n}\nint main(){\n    n=read();\n    for(int i=1;i<n;i++){\n        int x=read(),y=read(),l=read();\n        addedge(x,y,l);addedge(y,x,l);\n    }\n    k=read();\n    sz=n;\n    mx=0x3f3f3f3f;\n    getroot(1,0);\n    dfs(root);\n    printf(\"%lld\",ans);\n    return 0;\n}\n```",
        "postTime": 1517361032,
        "uid": 39505,
        "name": "\u73ab\u8475\u4e4b\u8776",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4178 \u3010Tree\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6211\u4eec\u5982\u679c\u66b4\u529b\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u53bb\u6c42\u5176\u4ed6\u7684\u70b9\u5230\u5b83\u7684\u8ddd\u79bb\uff0c\u65f6\u95f4\u4e00\u5b9a\u4f1a\u7206\u70b8\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u7528\u4e8c\u5206\u7684\u601d\u8def\u6765\u6c42\u89e3\uff0c\u800c\u6211\u4eec\u8981\u627e\u7684\u201c\u4e8c\u5206\u201d\u7684\u70b9\uff0c\u5c31\u662f\u8fd9\u68f5\u6811\u7684\u91cd\u5fc3\u3002\n\n\u6240\u8c13\u201c**\u91cd\u5fc3**\u201d\uff0c\u5c31\u662f\u5f53\u628a\u8fd9\u4e2a\u70b9\u5220\u53bb\u540e\uff08\u60f3\u8c61\u5220\u53bb\uff0c\u5e76\u4e0d\u662f\u771f\u5220\u53bb\uff09\uff0c\u80fd\u4f7f\u5f97**\u5269\u4e0b\u7684\u6240\u6709\u5b50\u6811\u5f53\u4e2d\u6700\u5927\u7684\u5b50\u6811\u5b50\u6811\u6700\u5c0f**\u3002\u7136\u540e\u6211\u4eec\u518d\u4e0d\u65ad\u53bb\u9012\u5f52\u5bfb\u627e\u6240\u6709\u7684\u5b50\u6811\u7684\u91cd\u5fc3\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u8bf4\u8bf4\u6709\u4e86\u91cd\u5fc3\u4e4b\u540e\u8be5\u5982\u4f55\u64cd\u4f5c\u3002\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u8fd9\u68f5\u6811\u4e0a\u7684\u4efb\u610f\u4e24\u4e2a\u70b9\uff0c\u5b83\u4eec\u53ea\u4f1a\u67093\u79cd\u5173\u7cfb\uff1a\n\n\u2460\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u5b50\u6811\u4e0a\u3002\uff08dfs\u6c42\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff09\n\n\u2461\u4e24\u4e2a\u70b9\u5728\u4e0d\u540c\u7684\u5b50\u6811\u4e0a\u3002\uff08\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u5b50\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\uff0c\u7136\u540e  \u518d\u628a\u4e24\u4e2a\u70b9\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\u52a0\u8d77\u6765\uff09\n\n\u2462\u4e00\u4e2a\u70b9\u5728\u4e00\u68f5\u5b50\u6811\u4e2d\uff0c\u53e6\u4e00\u4e2a\u70b9\u662f\u91cd\u5fc3\u3002(\u5b58\u4e00\u4e2a\u70b9\uff0c\u4f7f\u8fd9\u4e2a\u70b9\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\u4e3a\u96f6\uff0c\u518d\u52a0\u4e0a\u53e6\u4e00\u4e2a\u70b9\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\u5373\u53ef\uff0c\u4e0e\u2461\u5dee\u4e0d\u591a)\n\n\u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u53d1\u73b0\u5728\u8ba1\u7b97\u2461\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u91cd\u590d\u8ba1\u7b97\u2460\u4e2d\u7684\u60c5\u51b5\uff08\u6211\u6ca1\u6709\u6807\u8bb0\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u540c\u4e00\u5b50\u6811\u4e2d\uff0c\u8ba1\u7b97\u2461\u60c5\u51b5\u65f6\u662f\u5bf9\u4e8e\u6240\u6709\u7684\u70b9\u8ba1\u7b97\u7684\uff09\u3002\u6240\u4ee5\u5229\u7528\u5bb9\u65a5\u7684\u601d\u60f3\uff0c\u51cf\u53bb\u91cd\u590d\u7684\u5373\u53ef\u3002\n\n**\u9644\u4ee3\u7801**\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#define MAXN 40010\n\nusing namespace std;\n\nstruct node {\n\tint to,len;         //to\u5b58\u5b50\u8282\u70b9\u7f16\u53f7\uff0clen\u5b58\u8fb9\u957f\n};\nvector <node> G[MAXN];      //vector\u5b58\u8fb9\nint siz[MAXN],n,k,ans;      //siz[i]\u8868\u793a\u4ee5i\u4e3a\u6839\u7684\u6811\u7684\u5927\u5c0f\nbool used[MAXN];            //\u5b58\u662f\u5426\u5df2\u7ecf\u4f5c\u4e3a\u91cd\u5fc3\u88ab\u5220\u9664\n\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u8ba1\u7b97siz\u6570\u7ec4\uff0c\u5373\u6bcf\u68f5\u5b50\u6811\u7684\u5927\u5c0f\nint dfs(int v,int p) {\n\tint c=1;\n\tfor(int i=0; i<G[v].size(); i++) {\n\t\tint w=G[v][i].to;\n\t\tif(w==p||used[w]) continue;\n\t\tc+=dfs(w,v);\n\t}\n\tsiz[v]=c;\n\treturn c;\n}\n\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u7528\u6765\u627e\u91cd\u5fc3\n//pair\uff08\u6700\u5927\u5b50\u6811\u7684\u9876\u70b9\u4e2a\u6570\uff0c\u9876\u70b9\u7f16\u53f7\uff09\npair<int,int> find(int v,int p,int t) {   //t\u8868\u793a\u5f53\u524d\u5b50\u6811\u7684\u5927\u5c0f\n\tpair<int,int> temp=make_pair(1e9,-1);\n\tint s=1,m=0;                      //s\u4e3a\u9664\u4e86\u5f53\u524d\u7684\u70b9\u5230\u8be5\u5b50\u6811\u7684\u6839\u8282\u70b9\u8fd9\u4e00\u8def\u5f84\u4e0a\u5176\u4f59\u6240\u6709\u5b50\u6811\u7684\u548c\u3002m\u4e3a\u9664\u4e86s\u6240\u5728\u7684\u5b50\u6811\u4e2d\uff0c\u6700\u5927\u7684\u5b50\u6811\n\tfor(int i=0; i<G[v].size(); i++) {\n\t\tint w=G[v][i].to;\n\t\tif(w==p||used[w]) continue;\n\t\ttemp=min(temp,find(w,v,t));\n\t\tm=max(m,siz[w]);\n\t\ts+=siz[w];\n\t}\n\tm=max(m,t-s);                      //\u6700\u540e\u5728m\u548ct-s\uff08\u5373\u4ece\u6539\u6811\u7684\u6839\u5230\u91cd\u5fc3\u7684\u8fd9\u4e00\u5b50\u6811\u4e0a\u7684\u548c\uff09\u4e2d\u627e\u6700\u5927\u503c\n\ttemp=min(temp,make_pair(m,v));\n\treturn temp;\n}\n\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u8ba1\u7b97\u5b50\u6811\u4e2d\u6240\u6709\u7684\u70b9\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\nvoid dfs1(int v,int p,int d,vector<int> &ds) {\n\tds.push_back(d);\n\tfor(int i=0; i<G[v].size(); i++) {\n\t\tint w=G[v][i].to;\n\t\tif(w==p||used[w]) continue;\n\t\tdfs1(w,v,d+G[v][i].len,ds);\n\t}\n}\n\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u7edf\u8ba1\u5b50\u6811\u4e2d\u548c\u4e0d\u8d85\u8fc7k\u7684\u9876\u70b9\u5bf9\u6570\nint count(vector<int> &ds) {\n\tsort(ds.begin(),ds.end());\n\tint j=ds.size();\n\tint res=0;\n\tfor(int i=0; i<ds.size(); i++) {\n\t\twhile(j>0&&ds[i]+ds[j-1]>k) j--;\n\t\tif(j-1>=i) res+=j-1;\n\t\telse res+=j;\n\t}\n\treturn res/2;\n}\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u5bf9\u9876\u70b9v\u4e3a\u6839\u7684\u5b50\u6811\u627e\u91cd\u5fc3\uff0c\u5e76\u6309\u4e0a\u8ff0\u60c5\u51b5\u5206\u5272\u6c42\u89e3\nvoid dfs2(int v) {\n\tdfs(v,-1);\n\tint s=find(v,-1,siz[v]).second;   //\u627e\u5230\u4ee5v\u4e3a\u6839\u8282\u70b9\u7684\u6811\u7684\u91cd\u5fc3\n\tused[s]=1;\n\tfor(int i=0; i<G[s].size(); i++) {\n\t\tint w=G[s][i].to;\n\t\tif(used[w]) continue;\n\t\tdfs2(w);\n\t}\n\tvector<int> ds;\n\tds.push_back(0);            //\u52a0\u4e0a\u4e00\u4e2a\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\u4e3a\u96f6\u7684\u70b9\uff0c\u6765\u6c42\u2462\u60c5\u51b5\n\tfor(int i=0; i<G[s].size(); i++) {\n\t\tint w=G[s][i].to;\n\t\tif(used[w]) continue;\n\t\tvector<int> tds;\n\t\tdfs1(w,s,G[s][i].len,tds);\n\t\tans-=count(tds);                 //\u5bb9\u65a5\uff0c\u63d0\u524d\u51cf\u53bb\u2460\u60c5\u51b5\u4e2d\u91cd\u590d\u7684\u70b9\n\t\tds.insert(ds.end(),tds.begin(),tds.end()); //\u5e76\u628a\u91cd\u590d\u7684\u6811\u52a0\u5230\n\t}\n\tans+=count(ds);   //\u52a0\u4e0a\u7684\u6240\u6709\u7684\u60c5\u51b5\n\tused[s]=0;\n}\n\nvoid solve() {\n\tans=0;\n\tdfs2(1);\n\tprintf(\"%d\\n\",ans);\n}\n\nint main() {\n\tscanf(\"%d\",&n);\n\tfor(int i=0; i<n-1; i++) {\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tG[a].push_back({b,c});\n\t\tG[b].push_back({a,c});\n\t}\n\tscanf(\"%d\",&k);\n\tsolve();\n\treturn 0;\n}\n```\n",
        "postTime": 1582903121,
        "uid": 158846,
        "name": "xixike",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4178 \u3010Tree\u3011"
    },
    {
        "content": "\u8fd9\u9898...\u600e\u4e48\u6240\u6709\u9898\u89e3\u7684\u505a\u6cd5\u90fd\u8ddf\u6211\u4e0d\u4e00\u6837\u554aqwq\n\n\u6211\u7684\u505a\u6cd5\u662fDSU on tree\uff08\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff09\n\n\u542f\u53d1\u5f0f\u5408\u5e76\u662f\u4e2a\u597d\u4e1c\u897f\uff0c\u6709\u8bb8\u591a\u5e94\u7528\uff0c\u6bd4\u5982\u5e76\u67e5\u96c6\u6309\u79e9\u5408\u5e76\u7b49 \u501f\u7528\u6211\u5728\u535a\u5ba2\u91cc\u8bfb\u5230\u7684\u4e00\u53e5\u8bdd\uff0c\u5b83\u6709\u65f6\u5019\u80fd\u5e2e\u4f60\u628a\u4e00\u4e2a\u611a\u8822N^2\u7684\u7b97\u6cd5\u7528\u4e00\u4e2a\u5957\u8def\u5f0f\u7684\u4f18\u5316\u5c31\u53d8\u6210nlgn\u7b97\u6cd5\n\n\u73b0\u5728\u6765\u5eb7\u5eb7\u6b64\u9898\uff1a\n\n\u679a\u4e3e\u4e24\u70b9\u8fdb\u884c\u7edf\u8ba1\u663e\u7136\u4e0d\u53ef\u4ee5\uff0c\u59a5\u59a5\u7684T\n\n\u4f46\u662f\u60f3\u5230\u6811\u4e0a\u4e24\u70b9\u7684\u8ddd\u79bb\u4e0eLCA\u6709\u6781\u5927\u7684\u5173\u7cfb \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u679a\u4e3e\u8282\u70b9\uff0c\u8bd5\u56fe\u6c42\u51fa\u4ee5\u5f53\u524d\u8282\u70b9\u4e3aLCA\u7684\u7b54\u6848\u8d21\u732e\n\n\u7eb8\u4e0a\u968f\u4fbf\u753b\u753b \u5c31\u53ef\u4ee5YY\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u60f3\u6cd5\uff1a\n\n\u5047\u8bbe\u5f53\u524d\u679a\u4e3e\u5230\u8282\u70b9X\uff0cX\u6709\u5f88\u591a\u513f\u5b50\uff0c\u8bb0\u4e3aY1\uff0cY2...\n\n\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u5bf9X\u7684\u513f\u5b50Yi\u8fdb\u884c\u8ba8\u8bba\uff1a\u679a\u4e3eYi\u5b50\u6811\u4e2d\u7684\u6bcf\u4e00\u4e2a\u70b9t,\u90a3\u4e48**X\u7684\u5176\u4ed6\u513f\u5b50\u7684\u5b50\u6811\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9s**\u82e5\u6ee1\u8db3k>=dis[t]+dis[s]-2*dis[X]\uff0c\u5373dis[s]<=k+2*dis[X]-dis[t],(k\u662f\u539f\u9898\u76ee\u4e2d\u7684\u90a3\u4e2ak)\uff0c\u90a3\u4e48s,t\u5c31\u662f\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u70b9\u5bf9\n\n\u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u96c6\u5408T\uff0c\u5176\u4e2d\u4fdd\u5b58\u4e86Y1~Yi-1\u5b50\u6811\u7684\u6240\u6709\u70b9\u7684dis\u503c\uff0c\u5c31\u53ef\u4ee5\u5feb\u901f\u67e5\u8be2\u6709\u591a\u5c11\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684s\u4e86 \u6bcf\u5f53\u8ba8\u8bba\u5b8c\u4e00\u4e2aX\u7684\u513f\u5b50\u7684\u5b50\u6811\uff0c\u5c31\u628a\u5b50\u6811\u4e2d\u7684\u6240\u6709\u70b9\u7684dis\u503c\u52a0\u5165T \n\n\u7136\u540e\u6700\u540e\uff0c\u518d\u7edf\u8ba1\u4e0aX\u81ea\u5df1\u5230\u81ea\u5df1\u5b50\u6811\u7684\u8d21\u732e\u5c31\u884c\u4e86\n\n\uff08\u8fd9\u91cc\u5267\u900f\u4e00\u4e0b \u56e0\u4e3a\u8fd9\u4e2a\u96c6\u5408T\u9700\u8981\u52a0\u5165\u5143\u7d20\uff0c\u67e5\u8be2<=\u4e00\u4e2a\u503c\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f60\u9700\u8981\u624b\u5199\u5e73\u8861\u6811/\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811/\u79bb\u6563\u5316\u6811\u72b6\u6570\u7ec4\u6765\u641e\u96c6\u5408T\uff09\n\n\u4e0d\u8fc7\u5206\u6790\u4e00\u4e0b\u590d\u6742\u5ea6\uff0c~~\u8be5\u6b7b\u8fd9\u548b\u53d8\u6210n^2lgn\u6bd4\u66b4\u529b\u8fd8\u5927\u4e86~~\n\n\u90a3\u8fd9\u53ef\u548b\u6574\u554a\n\n~~\u6574\u4e0d\u8d77\uff0c\u6240\u4ee5\u8fd9\u9898\u4e0d\u80fd\u8fd9\u4e48\u505a \u5168\u5267\u7ec8~~\n\n\u554a\u6240\u4ee5\u5e94\u8be5DSU\u4e00\u4e0b\u4e86\n\n\u4f60\u60f3\uff0c\u8ba8\u8bba\u5b8c\u4e86X\u4e4b\u540eT\u96c6\u5408\u5df2\u7ecf\u5305\u542b\u4e86X\u4e2d\u7684\u6240\u6709\u70b9\u7684dis\u503c\u4e86\n\n\u76f4\u63a5\u8fd9\u6837\u4f60\u5c31\u6254\u6389\u4e86\u591a\u53ef\u60dc\n\n\u4e0d\u5982\u62ff\u7ed9X\u7684father\u7ee7\u7eed\u63a5\u7740\u7528 \u7701\u65f6\u7701\u529b\n\n\u4f46\u662f\u8fd9\u4e48\u4e00\u60f3\uff0c\u4f60\u8981\u662ffather\uff08X\uff09\u7684\u513f\u5b50\u4eec\u5168\u90fd\u8fd9\u4e48\u4e00\u80a1\u8111\u628a\u81ea\u5df1\u7684T\u7ed9\u4e86\u81ea\u5df1\u7684father\uff08X\uff09\uff0cfather\uff08X\uff09\u4f1a\u5f88\u81ea\u95ed\u3002\u3002\u3002\u56e0\u4e3afather\uff08X\uff09\u4ecd\u9700\u679a\u4e3e\u6bcf\u4e2a\u513f\u5b50\uff0c\u7edf\u8ba1\u4e0a\u9762\u505a\u6cd5\u4e2d\u7684s\uff0ct\u4e2a\u6570\n\n\u4e0d\u8fc7\u4ed4\u7ec6\u4e00\u60f3\uff0c\u53ef\u4ee5\u8fd9\u6837\uff1afather\uff08x\uff09\u53ea\u63a5\u53d7\u5176\u4e2d\u4e00\u4e2a\u513f\u5b50\u7684T\uff0c\u7136\u540e\u5176\u4ed6\u513f\u5b50\u5f80\u8fd9\u4e0a\u9762\u5408\u5e76\uff0c\u4e00\u8fb9\u7edf\u8ba1\u4e00\u8fb9\u5408\u5e76\u5c31\u53ef\u4ee5\u4e86\n\n\u4e0d\u8fc7father\uff08X\uff09\u5230\u5e95\u8981\u54ea\u4e2a\u513f\u5b50\u7684\u5462\uff1f\u80af\u5b9a\u8981\u6700\u5927\u7684\u90a3\u4e2a\u561b\uff0c\u8fd9\u6837\u53ef\u4ee5\u5c11\u4e9b\u5408\u5e76\n\n\u4e5f\u5c31\u662f\u9009father\uff08X\uff09\u7684\u91cd\u513f\u5b50\n\n\u4e8e\u662f\u8fd9\u6837\u4e00\u6b65\u6b65\u601d\u8003\u4e0b\u6765\uff0c\u4f60\u5c31YY\u51fa\u4e86DSU on tree \u8fd9\u9898\u4e5f\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86\n\nDSU on tree\u7684\u57fa\u672c\u590d\u6742\u5ea6\u53ef\u4ee5\u8bc1\u660e\u662fnlgn\n\n\u56e0\u4e3a\u6b64\u9898\u8fd8\u8981\u7ef4\u62a4\u4e00\u4e2a\u96c6\u5408T\uff0c\u4e0d\u7ba1\u600e\u4e48\u6837\u5199\u90fd\u662flog\u7ea7\u522b\u7684\n\n\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6n\uff08lgn\uff09^2\n\nDSU on tree\u7684\u7b97\u6cd5\u5c31\u662f\u8fd9\u6837\uff0c\u4e0d\u8fc7\u7406\u89e3\u548c\u5199\u51fa\u6765\u8fd8\u662f\u4e24\u7801\u4e8b \u5982\u679c\u662f\u6ca1\u5b66\u8fc7\u7684\u540c\u5b66\u73c2\u4ee5\u81ea\u5df1\u53bbbaidu\u5eb7\u5eb7\n\n\u8fd9\u91cc\u5c31\u7ed9\u5eb7\u5eb7\u6211\u5199\u7684DSU on tree+\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4ee3\u7801\uff1a\n```cpp\n#include<stdio.h>\n#include<bits/stdc++.h>\n#define f(a,b,c) for(register int a=(b);a<=(c);++a)\n#define ff(a,b,c) for(register int a=(b);a>=(c);--a)\n#define ll long long\n#define max(a,b) ((a)>(b)?(a):(b))\n#define int long long\nchar pbuf[1<<20],*pp1=pbuf;\ninline void push(char c){*pp1=c;pp1=(pp1-pbuf==(1<<20)-1)?(fwrite(pbuf,1,1<<20,stdout),pbuf):(pp1+1);}\n//#define pc push\n#define pc putchar\n#define pe pc('\\n')\n#define ps pc(' ')\n#define wer rd()\nchar *p1,*p2,buf[1<<20];\n#define GC (p1==p2&&(p1=buf,p2=buf+fread(buf,1,1<<20,stdin),p1==p2)?0:(*(p1++)))\n//#define GC getchar()\nusing namespace std;\ninline ll wer{\n\tll ans;char t,k;\n\twhile(((t=GC)!='-')&&(t>'9'||t<'0'));\n\tk=(t=='-');\n\tans=k?0:(t-'0');\n\twhile((t=GC)>='0'&&t<='9')ans=ans*10+t-'0';\n\treturn k?-ans:ans;\n}\ninline void wt(ll k)\n{\n\tif(k<0)pc('-'),wt(-k);\n\telse\n\t{\n\t\tif(k<10)pc('0'+k);\n\t\telse wt(k/10),pc('0'+k%10);\n\t}\n\treturn;\n}\nconst int N=40001;\nint k[N<<5],ls[N<<5],rs[N<<5],tot,ck[N<<5];\nint he[N],ne[N<<1],n,to[N<<1],cnt,le[N<<1],si[N],so[N],de[N];\n#define addedge(x,y,z) ne[++cnt]=he[x],he[x]=cnt,to[cnt]=y,le[cnt]=z \nvoid dfs(int x,int fa,int u)\n{\n//\twt(x),pe;\n\tsi[x]=1;\n\tde[x]=de[fa]+u;\n\tfor(register int i=he[x];i;i=ne[i])\n\t{\n\t\tif(to[i]==fa)continue;\n\t\tdfs(to[i],x,le[i]);\n\t\tsi[x]+=si[to[i]];\n\t\tif(so[x]==0||si[to[i]]>si[so[x]])so[x]=to[i];\n\t}\n\treturn;\n } \nint maxm=100000000;\nint Ans=0,K;\nint RT=0;\n//////////\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811//////////// \nvoid modify(int&now,int l,int r,int x,int kk)//\u5355\u70b9\u52a0 \n{\n\tif(r<x||x<l)return;\n\tif(!now)now=ck[tot--],ls[now]=rs[now]=k[now]=0;\n\tif(l==r){k[now]+=kk;return;} \n\tint mid=l+r>>1;\n\tmodify(ls[now],l,mid,x,kk);\n\tmodify(rs[now],mid+1,r,x,kk);\n\tk[now]=k[ls[now]]+k[rs[now]];\n}\nint quary(int now,int l,int r,int x,int y)//\u533a\u95f4\u6c42\u548c \n{\n\tif(y<x)return 0;\n\tif(!now||r<x||y<l)return 0;\n\tif(x<=l&&r<=y)return k[now];\n\tint mid=l+r>>1;\n\treturn quary(ls[now],l,mid,x,y)+quary(rs[now],mid+1,r,x,y);\n}\nvoid del(int&now,int l,int r)//\u5220\u9664\u4e00\u9897\u7ebf\u6bb5\u6811 \n{\n\tif(!now)return;\n\tif(l!=r)\n\t{   \n\t    int mid=l+r>>1;\n\t\tdel(ls[now],l,mid);\n\t\tdel(rs[now],mid+1,r);\n\t}\n\tk[now]=0;ck[++tot]=now;now=0;\n\treturn;\n } \nvoid _count(int x,int fa,int which)//\u7edf\u8ba1\u7b54\u6848\n{\n\tAns+=quary(RT,1,maxm,1,K+de[which]*2-de[x]);\n\tfor(int i=he[x];i;i=ne[i])\n\t{\n\t    if(to[i]==fa)continue;\n\t    _count(to[i],x,which);\n\t}\n}\nvoid put(int x,int fa)//\u52a0\u5165\u96c6\u5408T\n{\n\tmodify(RT,1,maxm,de[x],1);\n\tfor(int i=he[x];i;i=ne[i])\n\t{\n\t\tif(to[i]==fa)continue;\n\t\tput(to[i],x);\n\t}\n}\nvoid DSU(int x,int fa,int ty)\n{\n\t\n\tfor(int i=he[x];i;i=ne[i])\n\t{\n\t\tif(to[i]==fa||to[i]==so[x])continue;\n\t\tDSU(to[i],x,0);\n\t}\n\tif(so[x])DSU(so[x],x,1);//\u91cd\u513f\u5b50\u5355\u72ec\u62ff\u51fa\u6765\n\tAns+=quary(RT,1,maxm,1,K+de[x]);\n\tmodify(RT,1,maxm,de[x],1); \n\tfor(int i=he[x];i;i=ne[i])\n\t{\n\t\tif(to[i]==fa||to[i]==so[x])continue;\n\t\t_count(to[i],x,x);\n\t\tput(to[i],x);\n\t}\n\tif(!ty)del(RT,1,maxm);//\u4e0d\u662f\u91cd\u513f\u5b50\uff0c\u7236\u4eb2\u4e0d\u8981\uff0c\u76f4\u63a5\u5220\u6389\n}\nmain()\n{\n    n=wer;\n    f(i,1,(n<<5)-3)ck[++tot]=i;\n    f(i,2,n)\n    {\n    \tint a=wer,b=wer,c=wer;\n    \taddedge(a,b,c),addedge(b,a,c);\n    }\n\tK=wer;\n    dfs(1,0,1);\n//    f(i,1,n)wt(de[i]),ps;pe;\n    DSU(1,0,0);\n    wt(Ans);\n\tfwrite(pbuf,1,pp1-pbuf,stdout);\n    return 0;\n}\n```\n\u603b\u65f6\u95f4500\u591ams\uff0c\u4e0d\u7b97\u592a\u5feb\u4e5f\u4e0d\u7b97\u592a\u6162\u5427\n\n~~\u6211\u4eba\u50bb\u5e38\u6570\u5927\u554a~~\n",
        "postTime": 1573228913,
        "uid": 61502,
        "name": "Nerovix",
        "ccfLevel": 0,
        "title": "P4178 Tree \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9898\u4f5c\u4e3a\u672c\u849f\u84bb\u7684\u6dc0\u7c89\u8d28\u5165\u95e8\u9898\uff0c\u5728\u6ca1\u6709\u770b\u8fc7\u548c\u6253\u8fc7\u677f\u5b50\u7684\u60c5\u51b5\u4e0b\u81ea\u5df1$yy$\u4e86\u4e00\u4e2a\u5e38\u6570\u7565\u5927\u7684\u505a\u6cd5\uff0c\u590d\u6742\u5ea6\u4e3a$\\Theta(nlog^2_2n)$\n\n\u7531\u4e8e\u662f\u6c42\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e$k$\u7684\u70b9\u5bf9\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u628a\u70b9\u5bf9$(x,y)$\u7684\u8ddd\u79bb\u62c6\u6210$dis(x,focus)+dis(focus,y)$\uff08$focus\u4e3a\u5f53\u524d\u7684\u5206\u6cbb\u4e2d\u5fc3$)\u3002\n\n\u5f88\u81ea\u7136\u7684\u4f1a\u60f3\u5230\u4f9d\u6b21\u679a\u4e3e\u5b50\u6811\u4e2d\u7684\u6bcf\u4e2a\u70b9\uff0c\u7b97\u51fa\u5b83\u4e0e\u4e4b\u524d\u904d\u5386\u8fc7\u7684\u5b50\u6811\u7684\u70b9\u5f62\u6210\u7684\u70b9\u5bf9\u7684\u8d21\u732e\u3002\n\n\u8fd9\u4e2a\u53ef\u4ee5\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\uff0c\u663e\u7136\u4f1a\u60f3\u5230\u503c\u57df\u6811\u72b6\u6570\u7ec4\u3002\n\n\u4f46\u503c\u57df\u53ef\u80fd\u975e\u5e38\u5927\u800c\u4e14\u4e0d\u5bb9\u6613\u79bb\u6563\u5316\uff0c\u6211\u4eec\u8003\u8651\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u3002\n\n\u6bcf\u4e2a\u70b9\u7684\u8d21\u732e\u5373\u4e3a\u5b83\u7684\u6392\u540d\uff0c\u6240\u4ee5\u8003\u8651\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u3002\n\n\u7531\u4e8e\u662f\u6c42\u5c0f\u4e8e\u7b49\u4e8e$k$\u7684\u70b9\u5bf9\uff0c\u6240\u4ee5\u7d2f\u8bb0$size$\u7684\u65f6\u5019\u8981\u7b97\u4e0a\u81ea\u8eab\u7684$cnt$\u3002\n\n\u8fd8\u6709\u5c31\u662f\u7edf\u8ba1\u5b50\u6811\u8d21\u732e\u7684\u65f6\u5019\u4e0d\u80fd\u8fb9\u52a0\u70b9\u8fb9\u7edf\u8ba1\uff0c\u8981\u7edf\u8ba1\u5b8c\u518d\u52a0\u70b9\uff0c\u672c\u849f\u84bb\u8fd9\u91cc\u9009\u7528\u4e86\u5f00\u4e00\u4e2a\u6808\u8bb0\u5f55\u5b50\u6811\u7684\u70b9\u7684$dis$\u503c\u3002\n\n\u7136\u540e\u5c31\u662f\u7801\u529b\u7684\u95ee\u9898\u4e86\uff0c\u6ce8\u610f\u5e73\u8861\u6811\u6bcf\u6b21\u8981\u628a\u63d2\u5165\u7684\u70b9\u7684\u539f\u4fe1\u606f\u6e05\u7a7a\uff0c\u6bcf\u6b21$memset$\u592a\u6162\u4e86\u3002\n\nCode\uff1a\n\n```cpp\n#include <algorithm>\n#include <tuple>\n#include <bitset>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <vector>\n#define inl inline\n#define re register int\n#define fa(x) t[x].fa\n#define ls(x) t[x].child[0]\n#define rs(x) t[x].child[1]\n#define ll long long\nconst int inf = 0x3f3f3f3f;\n#define lowbit(x) ((x) & (-x))\nusing namespace std;\ntemplate <class Read>\ninl Read read() {\n\tRead x = 0;\n\tregister bool w = 0;\n\tregister char c = getchar();\n\twhile (c > '9' || c < '0') {\n\t\tif (c == '-') w = 1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn w ? -x : x;\n}\nstruct edge {\n\tint next, to, w;\n}e[200001];\nint tot, head[100001], k, n, ans, cnt, root, ncnt, scnt, min_siz, focus, siz[100001], d[100001], st[100001], top;\nbool vis[100001];\ninl void add(int x, int y, int w) {\n\te[++tot] = edge{ head[x],y,w }, head[x] = tot;\n\te[++tot] = edge{ head[y],x,w }, head[y] = tot;\n}\nstruct node {\n\tint fa, child[2], w, size, cnt;\n}t[100001];\ninl bool poi(int x) {\n\treturn rs(fa(x)) == x;\n}\ninl void maintain(int x) {\n\tt[x].size = t[ls(x)].size + t[rs(x)].size + t[x].cnt;\n}\ninl void rotate(int x) {\n\tre f = fa(x), gf = fa(f), fs = poi(x), gfs = poi(f), s = t[x].child[fs ^ 1];\n\tif (gf)t[gf].child[gfs] = x;\n\tt[f].child[fs] = s, t[x].child[fs ^ 1] = f;\n\tif (s)fa(s) = f;\n\tfa(f) = x, fa(x) = gf;\n\tmaintain(f);\n}\ninl void splay(int x, int to) {\n\twhile (fa(x) != to) {\n\t\tif (fa(fa(x)) != to)poi(x) == poi(fa(x)) ? rotate(fa(x)) : rotate(x);\n\t\trotate(x);\n\t}\n\tmaintain(x);\n\tif (!to)root = x;\n}\ninl void destroy(int x) {\n\tt[x].fa = t[x].child[0] = t[x].child[1] = t[x].cnt = t[x].size = t[x].w = 0;\n}\ninl void insert(int w) {\n\tre x = root, f = 0;\n\twhile (x&&t[x].w != w)f = x, t[x].size++, x = t[x].child[w > t[x].w];\n\tif (x&&t[x].w == w) {\n\t\tt[x].cnt++, t[x].size++;\n\t\tsplay(x, 0);\n\t\treturn;\n\t}\n\tx = ++cnt, destroy(x);\n\tt[x].cnt = t[x].size = 1, t[x].w = w;\n\tif (f)fa(x) = f, t[f].child[w > t[f].w] = x;\n\tsplay(x, 0);\n}\ninl int askrank(int w) {\n\tre x = root, sum = 0;\n\twhile (x) {\n\t\tif (w > t[x].w)sum += t[ls(x)].size + t[x].cnt, x = rs(x);\n\t\telse if (w == t[x].w) { sum += t[ls(x)].size + t[x].cnt, splay(x, 0); return sum; }\n\t\telse x = ls(x);\n\t}\n\treturn sum;\n}\ninl void dfs1(int x, int fa) {\n\tsiz[x] = 1;\n\tre max_sub = 0;\n\tfor (re i = head[x]; i; i = e[i].next) {\n\t\tif (vis[e[i].to] || e[i].to == fa)continue;\n\t\tdfs1(e[i].to, x);\n\t\tsiz[x] += siz[e[i].to];\n\t\tmax_sub = max(max_sub, siz[e[i].to]);\n\t}\n\tmax_sub = max(max_sub, ncnt - siz[x]);\n\tif (max_sub < min_siz) {\n\t\tmin_siz = max_sub;\n\t\tfocus = x;\n\t}\n}\ninl void dfs2(int x, int fa) {\n\tsiz[x] = 1;\n\tfor (re i = head[x]; i; i = e[i].next) {\n\t\tif (vis[e[i].to] || e[i].to == fa)continue;\n\t\td[e[i].to] = d[x] + e[i].w;\n\t\tdfs2(e[i].to, x);\n\t\tsiz[x] += siz[e[i].to];\n\t}\n}\ninl void calc(int x, int fa) {\n\tst[++top] = d[x];\n\tans += askrank(k - d[x]);\n\tfor (re i = head[x]; i; i = e[i].next) {\n\t\tif (!vis[e[i].to] && e[i].to != fa)calc(e[i].to, x);\n\t}\n}\ninl void divide(int x, int fa) {\n\tfocus = 0, min_siz = inf;\n\tdfs1(x, fa);\n\td[x = focus] = 0, root = cnt = 0, vis[x] = 1, top = 0;\n\tdfs2(x, fa);\n\tif (head[x])insert(0);\n\tfor (re i = head[x]; i; i = e[i].next) {\n\t\tif (vis[e[i].to])continue;\n\t\tcalc(e[i].to, x);\n\t\tif (e[i].next)while (top)insert(st[top--]);\n\t}\n\tfor (re i = head[x]; i; i = e[i].next) {\n\t\tif (vis[e[i].to])continue;\n\t\tncnt = siz[e[i].to];\n\t\tdivide(e[i].to, x);\n\t}\n}\nsigned main() {\n\tn = read<int>();\n\tfor (re i = 1; i < n; i++) {\n\t\tre x = read<int>(), y = read<int>(), w = read<int>();\n\t\tadd(x, y, w);\n\t}\n\tk = read<int>(), ncnt = n;\n\tdivide(1, 0);\n\tprintf(\"%d\\n\", ans);\n}\n```\n\n",
        "postTime": 1556008430,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P4178 Tree"
    },
    {
        "content": "## \u8fd9\u662f\u4e00\u9053\u70b9\u5206\u6cbb\u7684[\u6a21\u677f\u9898](https://www.luogu.com.cn/problem/P4178)\n~~\u4e0b\u6587\u8f93\u5165\u683c\u5f0f\u7565\u6709\u4e0d\u540c\u522b\u8bf4\u6211\u6ca1\u63d0\u9192\u4f60~~  \n### \u9898\u76ee\u63cf\u8ff0\n\u7ed9\u5b9a\u4e00\u4e2a\u6709 $N$ \u4e2a\u70b9\uff08\u7f16\u53f7 $1,2,...,N$\uff09\u7684\u6811\uff0c\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u6743\u503c\uff08\u4e0d\u8d85\u8fc7 $1000$\uff09\u3002  \n\u6811\u4e0a\u4e24\u4e2a\u8282\u70b9x\u4e0ey\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u5c31\u662f\u8def\u5f84\u4e0a\u5404\u6761\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u3002  \n\u6c42\u957f\u5ea6\u4e0d\u8d85\u8fc7K\u7684\u8def\u5f84\u6709\u591a\u5c11\u6761\u3002  \n### \u8f93\u5165\u683c\u5f0f\n\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6837\u4f8b\u3002  \n\u6bcf\u7ec4\u6d4b\u8bd5\u6837\u4f8b\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 $N$ \u548c $K$\u3002  \n\u63a5\u4e0b\u6765 $N-1$ \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6b63\u6574\u6570 $u,v,l$\uff0c\u8868\u793a\u8282\u70b9 $u$ \u4e0e $v$ \u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u8fb9\uff0c\u4e14\u8fb9\u7684\u6743\u503c\u4e3a $l$\u3002  \n\u5f53\u8f93\u5165\u6837\u4f8b $N=0,K=0$ \u65f6\uff0c\u8868\u793a\u8f93\u5165\u7ec8\u6b62\uff0c\u4e14\u8be5\u6837\u4f8b\u65e0\u9700\u5904\u7406\u3002  \n### \u8f93\u51fa\u683c\u5f0f\n\u6bcf\u4e2a\u6d4b\u8bd5\u6837\u4f8b\u8f93\u51fa\u4e00\u4e2a\u7ed3\u679c\u3002  \n\u6bcf\u4e2a\u7ed3\u679c\u5360\u4e00\u884c\u3002  \n### Sample Input / Output\n```\n5 4\n1 2 3\n1 3 1\n1 4 2\n3 5 1\n0 0 \n\n8 \n```\n\n------------\n### \u8fdb\u5165\u6b63\u6587\n\u9996\u5148\u5bf9\u4e8e\u8fd9\u9053\u9898\u4e00\u4e2a\u5f88\u66b4\u529b\u7684\u60f3\u6cd5\uff1a\u679a\u4e3e\u6bcf\u4e2a\u70b9\u5bf9\u770b\u770b\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u5426 $ \\le k$\uff0c\u590d\u6742\u5ea6\u5e94\u8be5\u662f $O(n^2logn)\\ ?\\ $\u53cd\u6b63\u7edd\u5bf9\u8fc7\u4e0d\u4e86\u3002  \n\n**\u9996\u5148\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\uff0c\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u6709\u4e00\u4e0b\u4e24\u79cd\u60c5\u51b5**  \n+ 1. \u7ecf\u8fc7\u6839\u8282\u70b9  \n+ 2. \u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9\uff08\u5373\u4e24\u4e2a\u70b9\u5728\u5f53\u524d\u6839\u8282\u70b9\u7684\u540c\u4e00\u5b50\u6811\u5185\uff09  \n\n**\u5bf9\u4e8e\u60c5\u51b5\u4e00\uff1a**  \n$dis(u,v)=dis(u,root)+dis(root,v)$  \n**\u5bf9\u4e8e\u60c5\u51b5\u4e8c\uff1a**  \n\u6211\u4eec\u53ef\u4ee5\u627e\u5230 $u,v$ \u8def\u5f84\u6240\u5728\u7684\u5b50\u6811\uff0c\u5c06\u6839\u8282\u70b9\u53d8\u4e3a\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u5c31\u53d8\u4e3a\u4e86\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u5373\u6211\u4eec\u53ef\u4ee5\u4e0d\u65ad\u7684\u9012\u5f52\u5230\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u5c06\u6240\u6709\u60c5\u51b5\u8f6c\u5316\u4e3a\u7b2c\u4e00\u79cd\u60c5\u51b5\u6c42\u51fa\u7b54\u6848  \n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u6837\u9012\u5f52\u4e0b\u53bb\u7684 **\u590d\u6742\u5ea6\u548c\u6811\u7684\u6df1\u5ea6\u6709\u5173**\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u5c3d\u91cf\u7684\u51cf\u5c0f\u6811\u7684\u6df1\u5ea6\u4ee5\u4f18\u5316\u590d\u6742\u5ea6\uff0c\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u529e\u5462\uff1f  \n\u5bf9\u4e8e\u6bcf\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u90fd\u6709\u4e00\u4e2a**\u91cd\u5fc3**\uff0c\u5176\u6240\u6709\u7684\u5b50\u6811\u4e2d\u6700\u5927\u7684\u5b50\u6811\u8282\u70b9\u6570\u6700\u5c11\uff0c\u4e5f\u5c31\u662f\u8bf4\u5220\u53bb\u91cd\u5fc3\u540e\u751f\u6210\u7684\u591a\u68f5\u6811\u4f1a\u5c3d\u53ef\u80fd\u5e73\u8861\u3002  \n**\u62ff\u8f93\u5165\u6837\u4f8b\u4e3e\u4e2a\u4f8b\u5b50**\uff0c\u5047\u5982\u6811\u957f\u8fd9\u6837\uff0c\u6700\u5927\u6df1\u5ea6\u4e3a $4$\uff0c\u6781\u5176\u4e0d\u4f18\u79c0\uff1a  \n![](https://cdn.luogu.com.cn/upload/image_hosting/rmi3w6ol.png)  \n\u4f46\u662f\u8fd9\u6837\u5c31\u4f18\u7f8e\u7684\u591a\u4e86\uff1a\u6700\u5927\u6df1\u5ea6\u4e3a $3$\uff0c\u6211\u4eec\u79f0\u6b64\u65f6\u7684\u6839\u8282\u70b9\u4e3a\u201c\u6811\u7684\u91cd\u5fc3\u201d  \n![](https://cdn.luogu.com.cn/upload/image_hosting/92h3c05a.png)  \n**\u6c42\u6811\u7684\u91cd\u5fc3\u4e5f\u4e0d\u96be\uff0c\u4e00\u8def\u626b\u4e0b\u53bb\u5c31\u5b8c\u4e8b\u4e86\uff1a$O(n)$**  \n$code:$  \n```cpp\nint maxx,root,smax[N],size[N];\n//maxx=smax[root],root\u4e3a\u6811\u7684\u91cd\u5fc3\n//smax[i]\u8868\u793ai\u7684\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f\n//size[i]\u8868\u793a\u4ee5i\u4e3a\u8ddf\u7684\u5b50\u6811\u5927\u5c0f \nvoid dfs(int x,int fa)\n{\n\tsmax[x]=0;size[x]=1;\n\tfor(int k=last[x];k;k=a[k].next)\n\t{\n\t\tint y=a[k].y;if(y==fa) continue;\n\t\tdfs(y,x);size[x]+=size[y];\n\t\tsmax[x]=mymax(smax[x],size[y]);\n\t}\n\tsmax[x]=mymax(smax[x],n-size[x]);\n\tmaxx=mymin(maxx,smax[x]);\n\troot=(maxx==smax[x])?x:root;\n}\n```\n**\u90a3\u4e48\u5982\u4f55\u8ba1\u7b97\u70b9\u5bf9\u65b9\u6848\u6570\u5462\uff1f** \u5f53\u7136\u662f\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u5230\u6811\u7684\u91cd\u5fc3\u7684\u8ddd\u79bb\uff08\u8bb0\u4e3a $dis[i]$\uff09\uff0c\u679a\u4e3e\u70b9\u5bf9 $(i,j)\\ \\ \\ $ $if(dis[i]+dis[j]\\le k)\\ \\ ans++$\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f18\u5316\uff0c\u53ef\u4ee5\u628a $dis$ \u6570\u7ec4\u6392\u4e2a\u5e8f\uff0c\u7528 $l,r$ \u4e24\u4e2a\u6307\u9488\u5206\u522b\u4ece\u524d\u3001\u540e\u626b\u63cf $dis$ \u6570\u7ec4\uff0c\u663e\u7136\u968f\u7740 $l$ \u4ece\u5de6\u5230\u53f3\u626b\uff0c$r$ \u662f\u4ece\u53f3\u5230\u5de6\u5355\u8c03\u9012\u51cf\u7684\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a  \n```cpp\nfor(int l=1,r=dis[0];l<r;)//\u5c1d\u8bd5\u628a\u4e24\u6761\u6839\u8282\u70b9\u5230\u5b50\u8282\u70b9\uff08\u5305\u62ec\u6839\u8282\u70b9\uff09\u7684\u8def\u5f84\u5408\u5e76\u6210\u4e00\u6761\u7ecf\u8fc7\u6839\u8282\u70b9\u7684\u8def\u5f84 \n{\n\tif(dis[l]+dis[r]<=k) sum+=r-l/*dis[l]+dis[l+1~r-1]<=k*/,l++;\n\telse r--;\n}\n```\n------------\n\n**\u4e0d\u8fc7\uff0c\u679a\u4e3e\u7684\u70b9\u5bf9 $(i,j)$ \u95f4\u7684\u8def\u5f84\u53ef\u80fd\u5c5e\u4e8e\u4e0a\u6587\u63d0\u5230\u7684\u60c5\u51b5\u4e8c\uff0c\u6211\u4eec\u9700\u8981\u7528\u5bb9\u65a5\u539f\u7406\u4fee\u6b63\u7b54\u6848\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u8003\u5b8c\u6574\u4ee3\u7801\uff1a**  \n\n------------\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=1e4+10;\ninline int mymin(int a,int b) {return a<b?a:b;}\ninline int mymax(int a,int b) {return a>b?a:b;}\ninline int read()\n{\n    int x=0;bool f=false;\n    char ch=getchar();\n    while(ch<'0' || ch>'9') f|=(ch=='-'),ch=getchar();\n    while(ch>='0'&&ch<='9') x=x*10+(ch^48),ch=getchar();\n    return f?-x:x;\n}\nint n,k,ans,point;//point\u4e3a\u70b9\u6570 \nstruct node{int y,d,next;}a[N<<1];int len,last[N];\ninline void ins(int x,int y,int d) {a[++len].y=y;a[len].d=d;a[len].next=last[x];last[x]=len;}\n/*\u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u5176\u6240\u6709\u7684\u5b50\u6811\u4e2d\u6700\u5927\u7684\u5b50\u6811\u8282\u70b9\u6570\u6700\u5c11\uff0c\n\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u8fd9\u68f5\u6811\u7684\u91cd\u5fc3\uff0c\u5220\u53bb\u91cd\u5fc3\u540e\uff0c\u751f\u6210\u7684\u591a\u68f5\u6811\u5c3d\u53ef\u80fd\u5e73\u8861\u3002*/\nint maxx,root,size[N],smax[N];//size->\u4ee5\u5df1\u4e3a\u8ddf\u7684\u5b50\u6811\u5927\u5c0f  smax->\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f\nbool vis[N];//\u6c42\u91cd\u5fc3\u65f6\u907f\u514d\u91cd\u590d\u8bbf\u95ee\nvoid get_root(int x,int fa)//\u627e\u51fa\u6811\u7684\u91cd\u5fc3\n{\n    size[x]=1;smax[x]=0;\n    for(int k=last[x];k;k=a[k].next)\n    {\n        int y=a[k].y;\n\t\tif(y==fa || vis[y]) continue;\n        get_root(y,x);size[x]+=size[y];\n        smax[x]=mymax(smax[x],size[y]);\n    }\n    smax[x]=mymax(smax[x],point-size[x]);\n    maxx=mymin(maxx,smax[x]);\n    root=(maxx==smax[x])?x:root;\n}\nint dis[N];//\u8bb0\u5f55\u5404\u4e2a\u70b9\u7684\u8def\u5f84\u957f\u5ea6 \nvoid get_dis(int x,int fa,int Dis)//\u4ee5x\u4e3a\u6839\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\n{\n\tdis[++dis[0]]=Dis;\n\tfor(int k=last[x];k;k=a[k].next)\n\t{\n\t\tint y=a[k].y;\n\t\tif(y==fa || vis[y]) continue;\n\t\tget_dis(y,x,Dis+a[k].d);\n\t}\n}\nint calc(int x,int dst)//\u8ba1\u7b97\u4ee5x\u4e3a\u6839\u7684\u6240\u6709\u60c5\u51b5\u7684\u7b54\u6848\n{\n\tget_dis(x,dis[0]=0,dst);\n\tsort(dis+1,dis+dis[0]+1);\n\tint sum=0;\n\tfor(int l=1,r=dis[0];l<r;)//\u5c1d\u8bd5\u628a\u4e24\u6761\u6839\u8282\u70b9\u5230\u5b50\u8282\u70b9\uff08\u5305\u62ec\u6839\u8282\u70b9\uff09\u7684\u8def\u5f84\u5408\u5e76\u6210\u4e00\u6761\u7ecf\u8fc7\u6839\u8282\u70b9\u7684\u8def\u5f84 \n\t{\n\t\tif(dis[l]+dis[r]<=k) sum+=r-l/*dis[l]+dis[l+1~r-1]<=k*/,l++;\n\t\telse r--;\n\t}\n\treturn sum;\n}\nvoid solve(int x)//\u6c42\u89e3\u4ee5x\u4e3a\u91cd\u5fc3\u7684\u60c5\u51b5\n{\n\tvis[x]=true;\n\tans+=calc(x,0);\n\tfor(int k=last[x];k;k=a[k].next)\n\t{\n\t\tint y=a[k].y;\n\t\tif(vis[y]) continue;\n\t\tans-=calc(y,a[k].d);//\u51cf\u53bb\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5 \n        maxx=point=size[y];\n\t\tget_root(y,x);solve(root);\n\t}\n}\nint main()\n{\n    n=read();k=read();\n    while(n || k)\n    {\n        len=0;memset(last,0,sizeof(last));\n        memset(vis,false,sizeof(vis));\n        for(int i=1;i<n;i++)\n        {\n            int x=read(),y=read(),d=read();\n            ins(x,y,d);ins(y,x,d);\n        }\n        maxx=point=n;\n\t\tget_root(1,0);\n        ans=0;solve(root);\n        printf(\"%d\\n\",ans);\n        n=read();k=read();\n    }\n    return 0;\n}\n```\n------------\n------------\n\n**updated on 2020.10.7**\uff1a\u53ef\u4ee5\u4e0d\u7528\u5bb9\u65a5\u539f\u7406\u4fee\u6b63\u7b54\u6848\uff0c\u53ea\u9700\u8981\u8ba9\u8fd9\u68f5\u5b50\u6811\u548c\u524d\u9762\u7684\u5b50\u6811\u62fc\uff0c\u5373\u53ef\u907f\u514d\u4e24\u4e2a\u70b9\u90fd\u5728\u4e00\u68f5\u5b50\u6811\u4e2d\u7684\u60c5\u51b5\uff0c\u4e0d\u8fc7\u5bf9\u4e8e dis \u6570\u7ec4\u7684\u6392\u5e8f\u8981\u7a0d\u5fae\u6ce8\u610f\uff0c\u5177\u4f53\u770b\u6ce8\u91ca\uff1a\uff08\u53ea\u6709 calc \u51fd\u6570\u4e0d\u540c\uff09\n\n------------\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ninline int mymin(int a,int b) {return a<b?a:b;}\ninline int mymax(int a,int b) {return a>b?a:b;}\ninline int read()\n{\n\tint x=0;bool f=false;\n\tchar ch=getchar();\n\twhile(ch<'0' || ch>'9') f|=(ch=='-'),ch=getchar();\n\twhile(ch>='0'&&ch<='9') x=x*10+(ch^48),ch=getchar();\n\treturn f?-x:x;\n}\nconst int N=10010;\nstruct edge{int y,d,next;}a[N<<1];int n,limit,len,last[N];\nvoid ins(int x,int y,int d) {a[++len].y=y;a[len].d=d;a[len].next=last[x];last[x]=len;}\n\nint point,root,minn;\nint siz[N],smax[N];\nbool vis[N];\nvoid get_root(int x,int fa)\n{\n    siz[x]=1;smax[x]=0;\n    for(int k=last[x];k;k=a[k].next)\n    {\n        int y=a[k].y;\n        if(y==fa || vis[y]) continue;\n        get_root(y,x);\n        siz[x]+=siz[y];\n        smax[x]=mymax(smax[x],siz[y]);\n    }\n    smax[x]=mymax(smax[x],point-siz[x]);\n    minn=mymin(minn,smax[x]);\n    root=minn==smax[x]?x:root;\n}\nint num,dis[N];\nvoid dfs(int x,int fa,int Dis)\n{\n    for(int k=last[x];k;k=a[k].next)\n    {\n        int y=a[k].y;\n        if(y==fa || vis[y]) continue;\n        dis[++num]=Dis+a[k].d;\n        dfs(y,x,Dis+a[k].d);\n    }\n}\nint dd[N];\nint calc(int x)\n{\n    int ret=0;\n    dis[num=1]=0;\n    for(int k=last[x];k;k=a[k].next)\n    {\n        int y=a[k].y;\n        if(vis[y]) continue;\n        dis[++num]=a[k].d;\n        int st=num;\n        dfs(y,x,a[k].d);\n        sort(dis+st,dis+num+1);//\u5bf9\u8fd9\u68f5\u5b50\u6811\u8fdb\u884c\u6392\u5e8f\uff0c\u4e0d\u8981\u548c\u4e4b\u524d\u7684\u6253\u4e71\u6210\u4e00\u5768\u4e86\n        for(int l=1,r=num;l<st && r>=st;)\n        {\n            if(dis[l]+dis[r]<=limit) ret+=r-st+1,l++;\n            else r--;\n        }\n\t    int len=0,i=1,j=st;//\u56e0\u4e3a\u524d\u9762\u5b50\u6811\u7684 dis \u5df2\u7ecf\u6709\u5e8f\uff0c\u6240\u4ee5\u76f4\u63a5\u5f52\u5e76\u8d77\u6765\u5373\u53ef\uff0c\u7528 sort \u4f1a T \uff01\uff01\uff01\n\t    while(i<st || j<=num)\n\t    {\n\t        if(j>num || (i<st && dis[i]<=dis[j])) dd[++len]=dis[i++];\n\t        else dd[++len]=dis[j++];\n\t    }\n\t    memcpy(dis,dd,sizeof(dis));\n    }\n    return ret;\n}\nint ans;\nvoid solve(int x)\n{\n    vis[x]=true;\n    ans+=calc(x);\n    for(int k=last[x];k;k=a[k].next)\n    {\n        int y=a[k].y;\n        if(vis[y]) continue;\n        minn=point=siz[y];\n        get_root(y,x);\n        solve(root);\n    }\n}\nvoid clear()\n{\n    len=0;memset(last,0,sizeof(last));\n    memset(vis,false,sizeof(vis));ans=0;\n}\nint main()\n{\n    n=read();limit=read();\n    while(n || limit)\n    {\n        clear();\n        for(int i=1;i<n;i++)\n        {\n            int x=read(),y=read(),d=read();\n            ins(x,y,d);ins(y,x,d);\n        }\n        minn=point=n;\n        get_root(1,0);\n        solve(root);\n        printf(\"%d\\n\",ans);\n        n=read();limit=read();\n    }\n\treturn 0;\n}\n```\n\n------------\n------------\n### \u603b\u7ed3\n**\u5173\u952e\u7684\u56db\u6b65\u64cd\u4f5c\uff1a**  \n+ 1.\u627e\u51fa\u6811\u7684\u91cd\u5fc3  \n+ 2.\u6c42\u51fa\u5b50\u8282\u70b9\u5230\u6811\u7684\u91cd\u5fc3\u7684\u8ddd\u79bb  \n+ 3.\u7edf\u8ba1\u7b54\u6848\uff08\u6ce8\u610f\u5bb9\u65a5\uff09  \n+ 4.\u5230\u5404\u4e2a\u5b50\u6811\uff0c\u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u628a\u6240\u6709\u60c5\u51b5\u4e8c\u8f6c\u5316\u4e3a\u60c5\u51b5\u4e00\u89e3\u51b3\u95ee\u9898  \n\n\u70b9\u5206\u6cbb\u7684\u590d\u6742\u5ea6\u4e3a $O(nlog^2n)$\uff0c\u6bd4\u8f83\u4f18\u79c0qwq",
        "postTime": 1575465606,
        "uid": 113454,
        "name": "2018chenyu",
        "ccfLevel": 0,
        "title": "0x45 \u70b9\u5206\u6cbb \u4f8b\u98981\uff1a\u6811"
    },
    {
        "content": "## \u9898\u76ee\n\u7ed9\u4f60\u4e00\u68f5TREE,\u4ee5\u53ca\u8fd9\u68f5\u6811\u4e0a\u8fb9\u7684\u8ddd\u79bb.\u95ee\u6709\u591a\u5c11\u5bf9\u70b9\u5b83\u4eec\u4e24\u8005\u95f4\u7684\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8eK\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\uff1a\nN\uff08n<=40000\uff09 \u63a5\u4e0b\u6765n-1\u884c\u8fb9\u63cf\u8ff0\u7ba1\u9053\uff0c\u6309\u7167\u9898\u76ee\u4e2d\u5199\u7684\u8f93\u5165 \u63a5\u4e0b\u6765\u662fk\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u4e00\u884c\uff0c\u6709\u591a\u5c11\u5bf9\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8ek\n\n\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\u8f93\u5165\u6837\u4f8b#1\uff1a \n```cpp\n7\n1 6 13 \n6 3 9 \n3 5 7 \n4 1 3 \n2 4 20 \n4 7 2 \n10\n```\n\u8f93\u51fa\u6837\u4f8b#1\uff1a \n```cpp\n5\n```\n\n## \u9898\u89e3\n- ~~lrd\u5927\u4f6c\u8bb2\u8bfe\u65f6\u56e0\u4e3a\u542c\u4e0d\u61c2\uff0c\u7ffb\u4e66\u6c34\u65f6\u95f4\u7684\u65f6\u5019\u770b\u5230\u4e86\u70b9\u5206\u6cbb\uff0c\u5c31\u5b66\u4e86\u4e00\u4e0bqwq~~\n- \u9996\u5148\u5bf9\u4e8e\u8fd9\u9053\u9898\u4e00\u4e2a\u5f88\u66b4\u529b\u7684\u60f3\u6cd5\uff1a\u679a\u4e3e\u6bcf\u4e2a\u70b9\u5bf9\u770b\u770b\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u5426$\\leq k$\uff0c\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(n^2logn)?$\n- \u66b4\u529b\u7684\u601d\u8def\u663e\u7136\u8fc7\u4e0d\u4e86~~\u6211\u8fd9\u79cd\u66b4\u529b\u9009\u624b\u8be5\u600e\u4e48\u529e\u554aqwq~~\n- \u6211\u4eec\u8003\u8651\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u6709\u4ec0\u4e48\u60c5\u51b5\n\t1. \u7ecf\u8fc7\u6839\u8282\u70b9\n\t2. \u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9\n- \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u7684\u60c5\u51b5\u6211\u4eec\u7b97\u4e24\u70b9\u95f4\u8def\u5f84\u957f\u5ea6\u65f6\u53ef\u4ee5\u5c06$dis(u,v)$\u8f6c\u5316\u4e3a$dis(u,root)+dis(root,v)$ \n- \u800c\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\u6211\u4eec\u53ef\u4ee5\u627e\u5230$u,v$\u8def\u5f84\u6240\u5728\u7684\u5b50\u6811\uff0c\u5c06\u6839\u8282\u70b9\u53d8\u4e3a\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u5c31\u53d8\u4e3a\u4e86\u7b2c\u4e00\u79cd\u60c5\u51b5\n- \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e0d\u65ad\u7684\u9012\u5f52\u6839\u8282\u70b9\u5c06\u6240\u6709\u60c5\u51b5\u8f6c\u5316\u4e3a\u7b2c\u4e00\u79cd\u60c5\u51b5\n- \u8bbe$belong[u]$\u8868\u793a$u$\u5c5e\u4e8e\u54ea\u4e00\u68f5\u5b50\u6811\n- \u90a3\u4e48$belong[u]=\\not belong[v] \\quad d[u]+d[v]\\leq k$\u6ee1\u8db3\u6761\u4ef6\u7684\u7b2c\u4e00\u7c7b\u8def\u5f84\u6761\u6570\u5373\u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u5bf9\u6570\n- \u4e0b\u9762\u6211\u4eec\u6765\u8ba8\u8bba\u5982\u4f55\u8ba1\u7b97\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u5bf9\u6570\uff1a\n\t1. \u5c06\u6811\u4e2d\u7684\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u6743\u503c\u653e\u5165\u6570\u7ec4$len$\u4e2d\uff0c\u5e76\u6392\u5e8f\n\t2. \u7528\u4e24\u4e2a\u6307\u9488$l,r$\u626b\u63cf\u6570\u7ec4\uff0c\u6bcf\u627e\u5230\u4e00\u4e2a\u5408\u6cd5\u7684\u7b54\u6848\u5c31\u52a0\u4e0a$r-l$\uff0c\u5c31\u8ba9$l++$\uff0c\u5426\u5219\u8ba9$r--\n- \u5bf9\u4e8e\u4e0a\u9762\u7684\u8ba1\u7b97\u6211\u4eec\u53d1\u73b0\u6709\u4e00\u4e9b\u95ee\u9898\uff08\u5982\u4e0b\u56fe~~\u6709\u70b9\u4e11~~\uff09\uff1a\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20190714185746988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NDkzODQw,size_16,color_FFFFFF,t_70)\n\n- \u5728\u6307\u9488\u626b\u63cf\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4f1a\u51fa\u73b0\u4e0d\u5408\u6cd5\uff08\u5173\u4e8e\u5408\u6cd5\u7684\u5224\u65ad\u8bf7\u770b\u4e0a\u9762\u7684\u6761\u4ef6\uff09\u7684\u60c5\u51b5\n- ~~\u8fd9\u8be5\u600e\u4e48\u529e\u5462\u5624\u5624\u5624~~\n- \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e0d\u5408\u6cd5\u7684\u8def\u5f84\u5728\u5f53\u524d\u6839\u7684\u4e00\u9897\u5b50\u6811\u4e0a\uff0c\u5373\u6ca1\u6709\u8de8\u8d8a\u4e24\u68f5\u5b50\u6811\uff08\u5982\u679c\u8de8\u8d8a\u4e86\u5b83\u5c31\u5408\u6cd5\u4e86\uff09\n- \u6240\u4ee5\u4eec\u53ef\u4ee5\u5728\u904d\u5386\u7684\u65f6\u5019\u51cf\u53bb\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff08\u5bb9\u65a5\uff09\n- \u5177\u4f53\u7684\u65b9\u6cd5\n\t1. $all += cal(x,0)$\n\t2. $all  -= cal(v,dis(u,v))$\n- \u8bb2\u89e3\uff1a\n- ~~\u4e00\u4e2a\u849f\u84bb\u7684\u53e3\u80e1~~\u53ef\u4ee5\u6c42\u5f53\u524d\u6839\u8282\u70b9\u7684\u513f\u5b50\u8282\u70b9\u7684\u7b54\u6848\uff0c\u7edf\u8ba1\u513f\u5b50\u8282\u70b9\u7684\u7b54\u6848\u65f6\u5c06\u5404\u4e2a\u70b9\u7684\u8ddd\u79bb\u52a0\u4e0a\u513f\u5b50\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u5373\u628a\u7b26\u5408\u5728\u4e00\u4e2a\u5b50\u6811\u6761\u4ef6\u7684\u60c5\u51b5\u7edf\u8ba1\u51fa\u6765\uff0c\u5373\u4e0d\u5408\u6cd5\u7684\u7b54\u6848\uff0c\u6700\u540e\u7528\u6839\u8282\u70b9\u7b97\u51fa\u6765\u7684\u603b\u7b54\u6848\u51cf\u53bb\u4e0d\u5408\u6cd5\u7684\u7b54\u6848\u5c31\u884c\u4e86\u3002\u53ef\u4ee5\u7ed3\u5408\u4e0a\u9762\u90a3\u4e2a\u4e0d\u5408\u6cd5\u7684\u56fe\u7406\u89e3\u4e00\u4e0b\uff08\u5982\u679c\u4e0d\u5408\u6cd5\u7684\u8bdd\u4e24\u70b9\u4f1a\u591a\u4e86\u4e24\u500d\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u5728\u904d\u5386\u513f\u5b50\u8282\u70b9\u65f6\u5c06\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u90fd\u52a0\u4e0a\u513f\u5b50\u8282\u70b9\u8ddd\u79bb\u5c31\u548c\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\u76f8\u540c\u4e86\uff09\n- \u70b9\u5206\u6cbb\u7684\u5173\u952e\u4e4b\u5904\u662f\u5728\u9012\u5f52\u6839\u8282\u70b9\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u6bcf\u6b21\u5c06\u6839\u8282\u70b9\u9009\u4e3a\u91cd\u5fc3\u4f1a\u5c06\u590d\u6742\u5ea6\u964d\u4f4e\uff0c\u56e0\u4e3a\u6700\u5dee\u60c5\u51b5\u4e5f\u53ea\u4f1a\u9012\u5f52$logn$\u5c42\uff0c\u5176\u4f59\u60c5\u51b5\u6700\u5dee\u53ef\u80fd\u8fbe\u5230$n$\u5c42\n- \u70b9\u5206\u6cbb\u7684\u590d\u6742\u5ea6\u4e3a$Onlog^2n$\uff0c\u6bd4\u8f83\u4f18\u79c0qwq\n\n```cpp\n#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <cctype>\n#include <string>\n#include <cstdio>\n#include <vector>\n#include <complex>\n#include <cstring>\n#include <iomanip>    \n#include <iostream>\n#include <algorithm>\n#include <functional>\nusing namespace std; \ntypedef long long LL; \nconst int maxn = 40000 + 100; \n\ntemplate <class T> \ninline void read(T &s) {\n\ts = 0; \n\tT w = 1, ch = getchar(); \n\twhile (!isdigit(ch)) { if (ch == '-') w = -1; ch = getchar(); }\n\twhile (isdigit(ch)) { s = (s << 1) + (s << 3) + (ch ^ 48); ch = getchar(); }\n\ts *= w; \n}\n\nint n, m, k, tot, all_node, ans, root;\n// root \u4e3a\u91cd\u5fc3\n// ans \u4e3a\u7b54\u6848\n// all_node \u8868\u793a\u6240\u6709\u70b9\u7684\u6570\u76ee \nint lin[maxn], max_part[maxn], size[maxn], len[maxn], d[maxn]; \n// d[i] \u8868\u793ai\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\n// len[i] \u8868\u793a\u8def\u5f84\u957f\u5ea6\n// len[0] \u4e2d\u8bb0\u5f55\u8282\u70b9\u4e2a\u6570\n// size[i] \u8868\u793a\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\n// max_part[i] \u8868\u793ai\u7684\u6700\u5927\u7684\u5b50\u6811\u5927\u5c0f\nbool vis[maxn]; \n// vis\u7528\u4e8e\u6c42\u91cd\u5fc3\u65f6\u907f\u514d\u91cd\u590d\u8bbf\u95ee \nstruct node {\n\tint next, to, dis; \n} edge[maxn << 1]; \n// edge \u7528\u4e8e\u5b58\u8fb9\n\ninline void add(int from, int to, int dis) {\n\tedge[++tot].to = to; \n\tedge[tot].dis = dis; \n\tedge[tot].next = lin[from]; \n\tlin[from] = tot; \n}\n\nvoid get_root(int u, int fa) { // \u627e\u5230\u6811\u7684\u91cd\u5fc3\n\tmax_part[u] = 0, size[u] = 1; \n\tfor (int i = lin[u]; i; i = edge[i].next) {\n\t\tint v = edge[i].to; \n\t\tif (v == fa || vis[v]) continue;  \n\t\tget_root(v, u); \n\t\tsize[u] += size[v]; \n\t\tmax_part[u] = max(max_part[u], size[v]); \n\t}\n\tmax_part[u] = max(max_part[u], all_node - max_part[u]); \n\tif (max_part[u] < max_part[root]) root = u; \n}\n\nvoid get_dis(int u, int fa) { // \u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\n\tlen[++len[0]] = d[u]; \n\tfor (int i = lin[u]; i; i = edge[i].next) {\n\t\tint v = edge[i].to; \n\t\tif (v == fa || vis[v]) continue; \n\t\td[v] = d[u] + edge[i].dis; \n\t\tget_dis(v, u); \n\t}\n}\n\nint cal(int u, int now) { // \u8ba1\u7b97\u4ee5u\u4e3a\u6839\u7684\u6240\u6709\u60c5\u51b5\u7684\u7b54\u6848\n\td[u] = now, len[0] = 0; \n\tget_dis(u, 0); \n\tsort(len + 1, len + len[0] + 1); \n\tint all = 0; \n\tfor (int l = 1, r = len[0]; l < r; ) {\n\t\tif (len[l] + len[r] <= k) {\n\t\t\tall += r - l; \n\t\t\t++l; \n\t\t}\n\t\telse r--; \n\t}\n\treturn all; \n}\n\nvoid solve(int u) { // \u6c42\u89e3\u4ee5u\u4e3a\u91cd\u5fc3\u7684\u60c5\u51b5\n\tvis[u] = true; \n\tans += cal(u, 0); \n\tfor (int i = lin[u]; i; i = edge[i].next) {\n\t\tint v = edge[i].to; \n\t\tif (vis[v]) continue; \n\t\tans -= cal(v, edge[i].dis); // \u51cf\u53bb\u4e0d\u5408\u6cd5\u7684\n\t\tall_node = size[v]; \n\t\troot = 0; \n\t\tget_root(v, u); \n\t\tsolve(root); \n\t}\n}\n\nint main() {\n\tread(n);\n\tfor (int i = 1; i < n; ++i) {\n\t\tint u, v, w; \n\t\tread(u), read(v), read(w); \n\t\tadd(u, v, w); \n\t\tadd(v, u, w); \n\t}\n\tread(k); \n\tall_node = n, max_part[0] = n, root = 0; \n\tget_root(1, 0); \n\tsolve(root); \n\tprintf(\"%d\\n\", ans); \n\treturn 0; \n} \n\n\n```",
        "postTime": 1563105270,
        "uid": 145352,
        "name": "MILLOPE",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4178 \u3010Tree\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P4178)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u770b\u5230\u6811\u4e0a\u8def\u5f84\u7684\u9898\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u70b9\u5206\u6cbb\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5728\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u5206\u6cbb\u7684\u65f6\u5019\uff0c\u5047\u5982\u6211\u4eec\u7528\u4e00\u4e2a\u6876$b[i]$\uff0c\u5b58\u4e0b\u6765\u5f53\u524d\u5230\u91cd\u5fc3\u8ddd\u79bb\u4e3a$i$\u7684\u70b9\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u5230\u91cd\u5fc3\u8ddd\u79bb\u4e3a$d(d\\le k)$\u7684\u70b9\u6765\u8bf4\uff0c\u5b83\u7684\u8d21\u732e\u5c31\u662f$\\sum_{i=0}^{k-d}b[i]$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u51fa\u73b0\u4e86\u524d\u7f00\u548c\u7684\u7ed3\u6784\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7528\u6811\u72b6\u6570\u7ec4\u6765\u7ef4\u62a4\u8fd9\u4e2a\u6876\u3002\u70b9\u5206\u6cbb\u672c\u8eab$O(n\\log_2n)$\uff0c\u6811\u72b6\u6570\u7ec4$O(\\log_2k)$\uff0c\u603b\u65f6\u95f4$O(n\\log_2n\\log_2k)$\u3002  \n# \u4ee3\u7801\n```cpp\n#include <cstdio>\n\ntypedef long long LL;\n\nconst int MAXN = 4e4 + 5, MAXK = 2e4 + 5;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\nstruct edge\n{\n\tint to, nxt, w;\n}Graph[MAXN << 1];\n\nint BIT[MAXK];\nint seq[MAXN], sta[MAXN], top;\nint dist[MAXN];\nint head[MAXN], siz[MAXN], mx[MAXN];\nLL ans;\nint N, K, cnt, rt;\nbool visited[MAXN];\n\nint lowbit( const int &x ) { return x & ( -x ); }\nvoid update( const int x, const int v ) { for( int i = x ; i <= K ; i += lowbit( i ) ) BIT[i] += v; }\nint getSum( int x ) { int ret = 0; while( x ) ret += BIT[x], x -= lowbit( x ); return ret; }\n\nvoid addEdge( const int from, const int to, const int W ) \n{\n\tGraph[++ cnt].to = to, Graph[cnt].w = W, Graph[cnt].nxt = head[from];\n\thead[from] = cnt;\n}\n\nvoid DFS( const int u, const int fa )\n{\n\tsiz[u] = 1, mx[u] = 0;\n\tfor( int i = head[u], v ; i ; i = Graph[i].nxt )\n\t\tif( ! visited[v = Graph[i].to] && v ^ fa )\n\t\t\tDFS( v, u ), siz[u] += siz[v], mx[u] = MAX( mx[u], siz[v] );\n}\n\nbool getCen( const int u, const int fa, const int all )\n{\n\tif( mx[u] <= ( all >> 1 ) && all - siz[u] <= ( all >> 1 ) ) { rt = u; return true; }\n\tfor( int i = head[u], v ; i ; i = Graph[i].nxt )\n\t\tif( ! visited[v = Graph[i].to] && v ^ fa )\n\t\t\tif( getCen( v, u, all ) ) return true;\n\treturn false;\n}\n\nvoid getDist( const int u, const int fa )\n{\n\tsta[++ top] = u;\n\tfor( int i = head[u], v ; i ; i = Graph[i].nxt )\n\t\tif( ! visited[v = Graph[i].to] && v ^ fa )\n\t\t\tdist[v] = dist[u] + Graph[i].w, getDist( v, u ); \n}\n\nvoid cal( const int u )\n{\n\tint l = 0;\n\tfor( int i = head[u], v ; i ; i = Graph[i].nxt )\n\t\tif( ! visited[v = Graph[i].to] )\n\t\t{\n\t\t\ttop = 0, dist[v] = Graph[i].w, getDist( v, u );\n\t\t\tfor( int j = 1 ; j <= top ; j ++ )\n\t\t\t\tif( dist[v = sta[j]] <= K )\n\t\t\t\t\tans += getSum( K - dist[v] ) + 1;\n\t\t\tfor( int j = 1 ; j <= top ; j ++ )\n\t\t\t\tif( dist[v = sta[j]] <= K )\n\t\t\t\t\tupdate( dist[v], 1 );\n\t\t\twhile( top ) seq[++ l] = sta[top --];\n\t\t}\n\tfor( int v ; l ; l -- )\n\t{\n\t\tif( dist[v = seq[l]] <= K ) update( dist[v], -1 );\n\t\tdist[v] = 0;\n\t}\n}\n\nvoid divide( const int u )\n{\n\tDFS( u, 0 );\n\tgetCen( u, 0, siz[u] );\n\tcal( rt );\n\tvisited[rt] = true;\n\tfor( int i = head[rt], v ; i ; i = Graph[i].nxt )\n\t\tif( ! visited[v = Graph[i].to] ) divide( v );\n\tvisited[rt] = false;\n}\n\nint main()\n{\n\tread( N );\n\tfor( int i = 1, a, b, c ; i < N ; i ++ )\n\t\tread( a ), read( b ), read( c ), addEdge( a, b, c ), addEdge( b, a, c );\n\tread( K );\n\tdivide( 1 );\n\twrite( ans ), putchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1579350766,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[LG P4178]Tree"
    },
    {
        "content": "\u8fd9\u9053\u9898\u8d85\u7ea7\u6c34\u7684\u8bf4\uff1f\uff08\u7ed3\u679c\u8fd8\u662f\u5728\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6876\u6392\u4e0a\u9762\u5361\u4f4f\u4e86\uff0c\u505a\u9898\u505a\u50bb\u4e86\uff09\n\n\n\n# noteskey\n\n\u6211\u4eec\u8003\u8651\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4 k-dis \u7684\u6570\u91cf\u7684\u524d\u7f00\u548c\u5c31\u597d\u4e86\n\n\u6ce8\u610f\u6bcf\u6b21\u70b9\u5206\u7684\u65f6\u5019\u8981\u6e05\u7a7a f \u6570\u7ec4\n\n\u7136\u540e\u5c31\u662f\u70b9\u5206\u677f\u5b50\u54af\uff1f\u8fd8\u662f\u86ee\u88f8\u7684\uff0c\u4e89\u53d6\u4e00\u904d\u8fc7\n\n\u590d\u6742\u5ea6\uff1f $O(n~ \\log ~n ~\\log ~k)$\n\n\u6811\u72b6\u6570\u7ec4\u5e38\u6570\u6bd4\u8f83\u5c0f\uff0c n \u6bd4\u8f83\u5c0f\uff0c\u5b8c\u5168\u4e0d\u7528\u62c5\u5fc3\u88ab\u5361\n\n# code\n\n\n```\n//by Judge\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#define fp(i,a,b) for(int i=(a),I=(b)+1;i<I;++i)\n#define go(G,u) for(int i=G.head[u],v=G.e[i].to;i;v=G.e[i=G.e[i].nxt].to)\n#define lowbit(x) (x&-x)\n#define ll long long\nusing namespace std;\nconst int M=4e4+3;\ntypedef int arr[M];\n#ifndef Judge\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline bool cmax(int& a,int b){return a<b?a=b,1:0;}\ninline int read(){ int x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} char sr[1<<21],z[20];int C=-1,Z;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\ninline void print(int x,char chr='\\n'){\n    if(C>1<<20)Ot();if(x<0)sr[++C]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]=chr;\n} int n,k,tot,root,ans; arr f,siz,mx,vis;\nstruct Gr{ int pat,head[M];\n\tstruct Edge{ int to,val,nxt; }e[M<<1];\n\tinline void add(int u,int v,int w){\n\t\te[++pat]={v,w,head[u]},head[u]=pat;\n\t\te[++pat]={u,w,head[v]},head[v]=pat;\n\t}\n}G;\nnamespace BIT{ inline void clear(){memset(f,0,k+1<<2);}\n\tinline void add(int x){ for(;x<=k;x+=lowbit(x)) ++f[x]; }\n\tinline int ask(int x,int s=0){ for(;x>0;x^=lowbit(x)) s+=f[x]; return s; }\n} using namespace BIT;\nvoid get_root(int u,int fa){ siz[u]=1,mx[u]=0;\n\tgo(G,u) if(v^fa&&!vis[v]) get_root(v,u),\n\t\tsiz[u]+=siz[v],cmax(mx[u],siz[v]);\n\tcmax(mx[u],tot-siz[u]); if(mx[u]<mx[root]) root=u;\n}\nvoid dfs1(int u,int fa,int dis){ if(dis>k) return ; ans+=ask(k-dis);\n\tgo(G,u) if(!vis[v]&&v^fa) dfs1(v,u,dis+G.e[i].val);\n}\nvoid dfs2(int u,int fa,int dis){ if(dis>k) return ; add(dis),++ans;\n\tgo(G,u) if(!vis[v]&&v^fa) dfs2(v,u,dis+G.e[i].val);\n}\nvoid solv(int u){ clear(),get_root(u,0),u=root,vis[u]=1;\n\tgo(G,u) if(!vis[v]) dfs1(v,u,G.e[i].val),dfs2(v,u,G.e[i].val);\n\tgo(G,u) if(!vis[v]) tot=siz[v],root=0,solv(v);\n}\nint main(){ n=read(); int x,y,z;\n\tfp(i,1,n-1) x=read(),y=read(),z=read(),G.add(x,y,z);\n\treturn k=read(),tot=mx[0]=n,solv(1),!printf(\"%d\\n\",ans);\n}\n```\n\n\n# for more\n\n\n\u7136\u540e\u5c31\u662f\u8003\u8651\u4e00\u4e0b c\u3001k \u7279\u522b\u5927\u7684\u60c5\u51b5\u600e\u4e48\u529e\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5f52\u5e76\u6392+\u4e8c\u5206\u4f4d\u7f6e\uff08\u53e3\u80e1\uff1f\uff09\n\n\u590d\u6742\u5ea6\u597d\u50cf\u662f\u9519\u7684\uff1femmm...\u8fd9\u4e2a\u5751\u5c31\u7559\u7ed9\u8bfb\u8005\u5566~\uff08\u5982\u679c\u60f3\u5230\u4e86\u8bf7 @ \u6211\uff0c\u6216\u8005\u79c1\u4fe1\u4e00\u4e0b\u54c8\uff09\n\n\n\n\n\n",
        "postTime": 1553003578,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4178 \u3010Tree\u3011"
    },
    {
        "content": "\u9898\u76ee\u8981\u6c42\u67e5\u8be2dis(i,j)<=k\u7684\u70b9\u5bf9\uff0c\u5373\u4ee5t\u4e3a\u5206\u6cbb\u91cd\u5fc3\uff0c\u8bbf\u95ee\u70b9i\u65f6\u67e5\u8be2\u6ee1\u8db3k-dis(i,t)<=dis(j,t)\u7684j\u6709\u591a\u5c11\u4e2a\u5c31\u884c\u4e86\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u628adis(j,t)\u5168\u90e8\u63d2\u5230\u5e73\u8861\u6811\u91cc\uff0c\u7136\u540e\u67e5\u8be2k-dis(i,t)\u7684\u6392\u540d\u5373\u53ef\u3002\n\n\u5173\u4e8e\u5e73\u8861\u6811\u7684\u7801\u91cf\u95ee\u9898\u3002\u6211\u89c9\u5f97\u4e00\u822c\u60c5\u51b5\u4e0b\u8c03\u4e00\u4e2a\u5e73\u8861\u6811\u5e76\u4e0d\u9700\u8981\u5f88\u4e45\uff0c\u6bd5\u7adf\u53c8\u4e0d\u662f\u50cf[\u7ef4\u62a4\u6570\u5217](https://www.luogu.org/problemnew/show/P2042)\u90a3\u6837\u6781\u5176\u6076\u5fc3\u7684\u5e73\u8861\u6811\uff0c\u5199\u4e00\u4e2a\u8fd9\u6837\u7684\u5e73\u8861\u6811\uff0c\u5728\u5199\u719f\u4e86\u4ee5\u540e\u8fd8\u662f\u5f88\u5feb\u7684\u3002\n\n\u6240\u4ee5\u4e3a\u4ec0\u4e48\u7a7a\u95f4\u8981\u7ed9\u8fd9\u4e48\u5927\uff1f64mb\u8db3\u77e3\u3002\u867d\u7136\u4f1a\u8dd1\u5f97\u6162\u4e00\u70b9\uff0c\u5e38\u6570\u5927\u4e00\u70b9\uff0c\u4f46\u662f\u8bbf\u95ee\u4e00\u4e2a\u70b9\u7684\u590d\u6742\u5ea6\u662fO(logn)\uff0c\u6bcf\u4e2a\u70b9\u4f1a\u88ab\u8bbf\u95eeO(logn)\u6b21\uff0c\u603b\u7684\u590d\u6742\u5ea6\u662fO(nlog^2n)\uff0c\u8dd1\u8fd9\u4e2a\u6570\u636e\u662f\u5b8c\u5168\u6ca1\u6709\u538b\u529b\u7684\u3002\n\n\u987a\u4fbf\uff0c\u5199\u4e86\u8fd9\u4e48\u4e45\u7684\u70b9\u5206\u6cbb\u6211\u624d\u53d1\u73b0\u6211\u7684\u70b9\u5206\u6cbb\u548c\u5927\u591a\u6570\u4eba\u5199\u7684\u6a21\u677f\u5b8c\u5168\u4e0d\u4e00\u6837\uff0c\u50cf\u53bb\u91cd\u8fd9\u79cd\u95ee\u9898\u6211\u4ece\u6765\u6ca1\u6709\u9047\u5230\u8fc7\uff0c\u53ef\u80fd\u6211\u8dd1\u5f97\u6162\u4e5f\u662f\u56e0\u4e3a\u5199\u6cd5\u539f\u56e0\u5427\u3002\u4e0d\u8fc7\u4e5f\u8bb8\u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\u6211\u7684\u5199\u6cd5\u4f1a\u7b80\u5316\u95ee\u9898\uff0c\u5927\u5bb6\u4e5f\u53ef\u4ee5\u53c2\u8003\u53c2\u8003\u3002\n\n\u4ee3\u7801\uff1a\n```\n#include<cstdio>\ntypedef long long ll;\ntypedef long double ld;\nconst int N=4e4+10;\nconst int INF=0x3f3f3f3f;\nll read(){\n\tll a=0;int op=1;char ch=getchar();\n\twhile(ch<'0'||'9'<ch){if(ch=='-')op=-1;ch=getchar();}\n\twhile('0'<=ch&&ch<='9'){a=(a<<3)+(a<<1)+(ch^48);ch=getchar();}\n\treturn a*op;\n}\nvoid file(const char *str){\n\tchar in[100],out[100];\n\tsprintf(in,\"%s.in\",str),sprintf(out,\"%s.out\",str);\n\tfreopen(in,\"r\",stdin),freopen(out,\"w\",stdout);\n}\nclass set{//\u5e38\u89c4splay\uff0c\u8bf7\u5ffd\u7565\u3002\uff08\u6211\u77e5\u9053\u8fd9\u6837\u5199\u5e38\u6570\u5927\uff0c\u6211\u559c\u6b22\uff01\u4f60\u7ba1\u6211\uff1f\uff09 \n\tprivate:\n\t\tstruct node{\n\t\t\tint ct;\n\t\t\tint size;\n\t\t\tll data;\n\t\t\tnode *father;\n\t\t\tnode *son[2];\n\t\t\tnode(ll data_){\n\t\t\t\tdata=data_;\n\t\t\t\tct=size=1;\n\t\t\t\tfather=0;\n\t\t\t\tson[0]=son[1]=0;\n\t\t\t}\n\t\t\tvoid refresh(){\n\t\t\t\tsize=ct;\n\t\t\t\tfor(int i=0;i<2;i++){\n\t\t\t\t\tif(son[i]){\n\t\t\t\t\t\tsize+=son[i]->size;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbool get_relation(){\n\t\t\t\treturn father->son[1]==this;\n\t\t\t}\n\t\t\tvoid roll(bool mod){\n\t\t\t\tif(father){\n\t\t\t\t\tfather->son[get_relation()]=son[mod];\n\t\t\t\t}\n\t\t\t\tson[mod]->father=father;\n\t\t\t\tfather=son[mod];\n\t\t\t\tson[mod]=father->son[!mod];\n\t\t\t\tif(son[mod]){\n\t\t\t\t\tson[mod]->father=this;\n\t\t\t\t}\n\t\t\t\tfather->son[!mod]=this;\n\t\t\t\trefresh();\n\t\t\t\tfather->refresh();\n\t\t\t}\n\t\t\tvoid splay(){\n\t\t\t\twhile(father){\n\t\t\t\t\tfather->roll(get_relation());\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tvoid destroy(node *p){\n\t\t\tif(!p){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdestroy(p->son[0]);\n\t\t\tdestroy(p->son[1]);\n\t\t\tdelete p;\n\t\t}\n\t\tnode *t;\n\tpublic:\n\t\tset(){\n\t\t\tt=0;\n\t\t}\n\t\t~set(){\n\t\t\tdestroy(t);\n\t\t\tt=0;\n\t\t}\n\t\tvoid insert(ll data_){\n\t\t\tif(!t){\n\t\t\t\tt=new node(data_);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tbool mod;\n\t\t\twhile(1){\n\t\t\t\tif(t->data==data_){\n\t\t\t\t\tt->ct++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tmod=t->data<data_;\n\t\t\t\tif(t->son[mod]){\n\t\t\t\t\tt=t->son[mod];\n\t\t\t\t}else{\n\t\t\t\t\tt->son[mod]=new node(data_);\n\t\t\t\t\tt->son[mod]->father=t;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tt->splay();\n\t\t}\n\t\tint get_rank(ll data_){\n\t\t\tif(!t){\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tint ret=0;\n\t\t\twhile(1){\n\t\t\t\tif(t->data<=data_){\n\t\t\t\t\tret+=t->ct;\n\t\t\t\t\tif(t->son[0]){\n\t\t\t\t\t\tret+=t->son[0]->size;\n\t\t\t\t\t}\n\t\t\t\t\tif(t->son[1]){\n\t\t\t\t\t\tt=t->son[1];\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tif(t->son[0]){\n\t\t\t\t\t\tt=t->son[0];\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tt->splay();\n\t\t\treturn ret;\n\t\t}\n};\n//\u524d\u5411\u661f\u5b58\u8fb9 \nstruct L{\n\tint to,next;\n\tll len;\n};\nL l[N<<1];\nint head[N];\nint lcount;\nvoid add(int from,int to,ll len){\n\tl[++lcount].to=to;\n\tl[lcount].len=len;\n\tl[lcount].next=head[from];\n\thead[from]=lcount;\n}\n#define REPL(start,i) for(int i=head[start];i;i=l[i].next)if(!vis[l[i].to])//\u628a\u679a\u4e3e\u8fb9define\u4e00\u4e0b\uff0c\u5e76\u53bb\u6389\u5df2\u7ecf\u5220\u9664\u7684\u70b9 \n#define LNOF(i) if(l[i].to!=f)//\u628a\u8fd9\u4e2a\u6761\u4ef6\u4e5fdefine\u4e00\u4e0b\uff0c\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48 \nint root,root_size;//\u8868\u793a\u5728\u627e\u91cd\u5fc3\u7684\u65f6\u5019\u76ee\u524d\u7684\u91cd\u5fc3\u548c\u76ee\u524d\u91cd\u5fc3\u7684\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f \nint t_size;//\u8868\u793a\u5f53\u524d\u5206\u6cbb\u7684\u5b50\u6811\u7684\u5927\u5c0f \nint size[N];//\u8868\u793a\u6bcf\u4e2a\u5b50\u6811\u7684\u5927\u5c0f \nbool vis[N];//\u8868\u793a\u6bcf\u4e2a\u70b9\u662f\u5426\u5df2\u7ecf\u88ab\u5206\u6cbb\u8fc7 \nset *s;//\u4e3a\u4e86\u65b9\u4fbfdelete\u5c31\u4f7f\u7528\u4e86\u6307\u9488 \nll ans;//\u7edf\u8ba1\u7b54\u6848 \nll k;//\u89c1\u9898\u76ee \nvoid get_size(int now,int f){//\u7edf\u8ba1\u6bcf\u4e2a\u5b50\u6811\u7684\u5927\u5c0f \n\tsize[now]=1;\n\tREPL(now,i)LNOF(i){\n\t\tget_size(l[i].to,now);\n\t\tsize[now]+=size[l[i].to];\n\t}\n}\nvoid get_root(int now,int f){//\u627e\u91cd\u5fc3 \n\tint maxson=0;//\u5f53\u524d\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u4e2d\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f \n\tREPL(now,i)LNOF(i){\n\t\tget_root(l[i].to,now);\n\t\tif(size[l[i].to]>maxson){\n\t\t\tmaxson=size[l[i].to];\n\t\t}\n\t}\n\tif(t_size-size[now]>maxson){\n\t\tmaxson=t_size-size[now];\n\t}\n\tif(maxson<root_size){\n\t\troot=now;\n\t\troot_size=maxson;\n\t}\n}\nvoid update(int now,int f,ll dis){//\u66f4\u65b0set\u4e2d\u7684\u4fe1\u606f \n\ts->insert(dis);\n\tREPL(now,i)LNOF(i){\n\t\tupdate(l[i].to,now,dis+l[i].len);\n\t}\n}\nvoid count(int now,int f,ll dis){//\u7edf\u8ba1\u7b54\u6848\uff0c\u6211\u7684\u7edf\u8ba1\u65b9\u5f0f\u662f\u6ca1\u6709\u91cd\u590d\u7684 \n\tans+=s->get_rank(k-dis);\n\tREPL(now,i)LNOF(i){\n\t\tcount(l[i].to,now,dis+l[i].len);\n\t}\n}\nvoid divide(int now){\n\troot=0;\n\troot_size=INF;\n\tget_size(now,now);//\u5148\u5f97\u51fa\u6bcf\u4e2a\u5b50\u6811\u7684\u5927\u5c0f \n\tt_size=size[now];//\u56e0\u4e3a\u6211\u4eec\u662f\u4e00now\u4e3a\u6839dfs\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8fd9\u6837\u505a \n\tget_root(now,now);//\u627e\u91cd\u5fc3 \n\tnow=root;\n\tvis[now]=1;//\u6807\u8bb0\u5220\u9664\u91cd\u5fc3 \n\ts=new set();//\u91cd\u5efaset \n\ts->insert(0);//\u628a\u91cd\u5fc3\u585e\u8fdb\u53bb \n\tREPL(now,i){\n\t\tcount(l[i].to,l[i].to,l[i].len);//\u5148\u7edf\u8ba1\u7b54\u6848 \n\t\tupdate(l[i].to,l[i].to,l[i].len);//\u518d\u628a\u8fd9\u9897\u5b50\u6811\u4e2d\u7684\u70b9\u52a0\u5165set\u4e2d\uff0c\u8fd9\u6837\u5c31\u6ca1\u6709\u91cd\u590d \n\t}\n\tdelete s;//\u66b4\u529b\u4e00\u70b9\u7684\u8bdd\u53ef\u4ee5\u76f4\u63a5s=0;\u6216\u8005\u53bb\u6389\u8fd9\u53e5\u8bdd \n\tREPL(now,i){\n\t\tdivide(l[i].to);\n\t}\n}\nint n;\n//\u4e0b\u9762\u7684\u4e00\u5806\u51fd\u6570\u90fd\u6ca1\u4ec0\u4e48\u7528\uff0c\u4e3b\u8981\u662f\u8003\u8bd5\u7684\u65f6\u5019\u7528\u8fd9\u79cd\u6a21\u677f\u65b9\u4fbf\u8c03\u8bd5\u548c\u4f7f\u7528\u6587\u4ef6 \nvoid input(){\n\tn=read();\n\tint p1,p2,p3;\n\tfor(int i=1;i<n;i++){\n\t\tp1=read();\n\t\tp2=read();\n\t\tp3=read();\n\t\tadd(p1,p2,p3);\n\t\tadd(p2,p1,p3);\n\t}\n\tk=read();\n}\nvoid ini(){\n}\nvoid solve(){\n\tdivide(1);\n}\nvoid output(){\n\tprintf(\"%lld\",ans);\n}\nvoid test(){\n\tinput();\n\tini();\n\tsolve();\n\toutput();\n}\nvoid all(){\n\tfile(\"\");\n\ttest();\n}\nint main(){\n\ttest();\n\treturn 0;\n}\n\n```",
        "postTime": 1546954242,
        "uid": 81705,
        "name": "\u5bc6\u671f\u671b",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4178 \u3010Tree\u3011"
    },
    {
        "content": "\u70b9\u5206\u6cbb\u6a21\u677f\u9898\uff0c\u5927\u90e8\u5206\u548c\u6a21\u677f1\u662f\u4e00\u6837\u7684\u3002\n\n\u7136\u540e\u6211\u5929\u771f\u5730\u628a\u6211\u539f\u6765\u7684\u4ee3\u7801\u7684\u7b54\u6848\u6570\u7ec4\u6c42\u4e86\u4e2a\u524d\u7f00\u548c\u5c31\u4ea4\u4e86\u4e0a\u53bb\u3002\u3002\u3002T\u5f97\u4e0d\u8981\u4e0d\u8981\u7684\u3002\u3002\u3002\n\n```\nil void getroot(re int u,re int fa)\n{\n  sz[u]=1;f[u]=0;\n  for(re int i=h[u];i;i=e[i].next)\n    {\n      re int v=e[i].to;\n      if(v==fa||vis[v]) continue;\n      getroot(v,u);//\n      sz[u]+=sz[v];\n      f[u]=max(f[u],sz[v]);//f[u]\u5b58\u8be5\u70b9\u4ee5\u4e0b\u6700\u5927\u5b50\u6811\n    }\n  f[u]=max(f[u],sum-sz[u]);//\u80af\u5b9a\u513f\u5b50\u8981\u6bd4\u7238\u7238\u591a\u554a\n  if(f[u]<f[root]) root=u;\n}\nil void calc(re int u,re int dd,re int add)\n{\n  cnt=0;d[u]=dd;\n  getdeep(u,0);\n  fp(i,1,cnt)\n    fp(j,1,cnt)\n    ans[o[i]+o[j]]+=add;//\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8\n}\nil void work(re int u)\n{\n  calc(u,0,1);vis[u]=1;\n  for(re int i=h[u];i;i=e[i].next)\n    {\n      re int v=e[i].to;\n      if(vis[v]) continue;\n      calc(v,e[i].w,-1);\n      sum=sz[v];root=0;\n      getroot(v,0);//\n      work(root);\n    }\n}\n```\n\u8ba4\u771f\u5206\u6790\u9898\u76ee\uff0c\u53d1\u73b0\u6211\u4eec\u5728\u6c42\u8ddd\u79bb\u5927\u4e8ek\u7684\u70b9\u5bf9\u6570\u4e0a\u82b1\u8d39\u4e86\u5927\u91cf\u7684\u65f6\u95f4\uff0c\u5e76\u4e14\u70b9\u5bf9\u8ba1\u6570\u7528\u4e8c\u5c42\u5faa\u73af\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u5728\u4f18\u5316\u70b9\u5bf9\u8ba1\u6570\u6570\u8fc7\u7a0b\u4e0b\u624b\u3002\n\n\u5bf9\u4e8e\u6839\u8282\u70b9\u8fdb\u884c\u4e00\u6b21dfs\uff0c\u6c42\u51fadeep\uff0c\u5e76\u5c06\u5176\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\uff08longn\u9884\u5904\u7406\u7701\u4e00\u5c42\u5faa\u73af\uff09\n\n\u907f\u514d\u91cd\u590d\uff0c\u53ea\u9700\u8981\u6c42\u51fax<y\u7684\u524d\u63d0\u4e0bdeep[x]+deep[y]\u2264k\u7684\u4e2a\u6570\u3002\n\n\u7528i\u8868\u793a\u5de6\u6307\u9488\uff0cj\u8868\u793a\u53f3\u6307\u9488\uff0ci\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0cj\u4ece\u53f3\u5411\u5de6\u3002\n\n\u5982\u679cdeep[i]+deep[j]\u2264k\uff0c\u5219\u70b9\u5bf9(i,t)(i<t\u2264j)\u90fd\u7b26\u5408\u9898\u610f\uff0c\u5c06j-i\u52a0\u5165\u7b54\u6848\u4e2d\uff0c\u5e76\u4e14i++\uff1b\u5426\u5219j--\u3002\n\n\u7136\u800c\u8fd9\u6837\u8fd8\u4f1a\u91cd\u590d\u8ba1\u7b97\u5728\u540c\u4e00\u68f5\u5b50\u6811\u4e2d\u7684\u70b9\u5bf9\uff0c\u6240\u4ee5\u518d\u8fdb\u884c\u4e0b\u4e00\u6b65dfs\u4e4b\u524d\u9700\u8981\u51cf\u53bb\u91cd\u590d\u90e8\u5206\u3002\n\n\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\u5728O(nlog2n)\u4ee5\u4e0b\u3002\uff08\u800c\u4e0d\u662f\u539f\u6765\u7684O\uff08n2long2n)) \n\n```\nil void getroot(re int u,re int fa)\n{\n  sz[u]=1;f[u]=0;\n  for(re int i=h[u];i;i=e[i].next)\n    {\n      re int v=e[i].to;\n      if(v==fa||vis[v]) continue;\n      getroot(v,u);//\n      sz[u]+=sz[v];\n      f[u]=max(f[u],sz[v]);\n    }\n  f[u]=max(f[u],sum-sz[u]);\n  if(f[u]<f[root]) root=u;\n}\nil int calc(re int u)\n{\n  cnt=0;getdeep(u,0);sort(o+1,o+cnt+1);\n  re int i=1,j=cnt,sum=0;\n  while(i<j)\n    if(o[i]+o[j]<=k) sum+=j-i,i++;\n    else j--;//\u4f18\u5316\u540e\u7684\u70b9\u5bf9\u8ba1\u6570\u8fc7\u7a0b\n  return sum;\n}\nil void work(re int u)\n{\n  d[u]=0;vis[u]=1;ans+=calc(u);\n  for(re int i=h[u];i;i=e[i].next)\n    {\n      re int v=e[i].to;\n      if(vis[v]) continue;\n      d[v]=e[i].w;\n      ans-=calc(v);//\u53bb\u91cd\n      sum=sz[v];root=0;\n      getroot(v,0);//\u91cd\u9009\u91cd\u5fc3\n      work(root);\n    }\n}\n```",
        "postTime": 1519201673,
        "uid": 21534,
        "name": "ysner",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4178 \u3010Tree\u3011"
    },
    {
        "content": "\u535a\u5ba2\u94fe\u63a5\uff1a[\u8d21\u732e\u70b9\u70b9\u51fb\u91cf\u5427\uff01](https://blog.csdn.net/qq_43804974/article/details/102553812)\n\n\u8fd9\u9053\u9898\u76ee\u662f\u70b9\u5206\u6cbb\u7684\u9898\u76ee\uff0c\u4e0e\u6a21\u677f\u9898\u4e0d\u4e00\u6837\u7684\u662f\uff0c\u8fd9\u662f\u8981\u7edf\u8ba1\u5c0f\u4e8e\u8def\u5f84\u957f\u5ea6\u4e3ak\u7684\u70b9\u5bf9\u6570\u3002\u6211\u4eec\u5206\u6790\u4e0b\u4e0e\u6a21\u677f\u9898\u7684\u533a\u522b\uff0c\u6a21\u677f\u8981\u6c42\u7684\u662f\u8def\u5f84\u7b49\u4e8ek\u7684\u957f\u5ea6\u7684\u8def\u5f84\u662f\u5426\u5b58\u5728\uff0c\u7136\u540e\u7edf\u8ba1\u7684\u65b9\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u91cd\u5fc3\uff08\u6839\uff09\uff0c\u6c42\u51fa\u5404\u70b9\u4e0e\u6839\u7684\u8def\u5f84\uff0c\u7136\u540e\u91cd\u5fc3\u4e0b\u9762\u7684\u5404\u4e2a\u5b50\u6811\u4e2d\uff0c\u53bb\u8ba1\u7b97\u4e4b\u524d\u975e\u8be5\u5b50\u6811\u7684\u8def\u5f84\u80fd\u5426\u51d1\u51fak\u7684\u8def\u5f84\uff0c\u4e5f\u5c31\u662f\u5427\u8def\u5f84\u5206\u6210\u4e86\uff08\u5f53\u524d\u5b50\u6811\u7684\u8def\u5f84\u4e0e\u975e\u5f53\u524d\u5b50\u6811\u7684\u8def\u5f84\uff09\uff0c\u7136\u540e\u5176\u5b9e\u6211\u4eec\u4e5f\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6a21\u677f\u9898\u7684\u601d\u60f3\uff0c\u4e00\u65e6\u5f53\u524d\u5b50\u6811\u7684\u8def\u5f84\u4e0e\u975e\u5f53\u524d\u5b50\u6811\u7684\u8def\u5f84\u80fd\u51d1\u51fa\u5c0f\u4e8ek\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u4e2a\u5c31\u662f\u7b26\u5408\u6761\u4ef6\u7684\u70b9\u5bf9\uff0c\u5c31\u662f\uff0c\u5f53\u524d\u5b50\u6811\u7684\u8ddd\u79bb\u52a0\u4e0a\u975e\u5f53\u524d\u5b50\u6811\u7684\u8ddd\u79bb\u4e00\u65e6\u5c0f\u4e8ek\u5c31\u662f\u6211\u4eec\u8981\u7684\u4e00\u4e2a\u70b9\u5bf9\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u79cd\u8def\u5f84\u7684\u6570\u76ee\u53bb\u8bb0\u5f55\u4e00\u4e0b\uff0c\u5c31\u662f\u8bb0\u5f55\u6709\u591a\u5c11\u6761\u8def\u5f84\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u8def\u5f84\u6570\uff0c\uff08\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u68f5\u6811\u70b9\u4e0e\u70b9\u7684\u8ddd\u79bb\u662f\u4e00\u5b9a\u7684\uff0c\u6240\u4ee5\u53bb\u8bb0\u5f55\u8def\u5f84\u6570\u662f\u4e0d\u4f1a\u7b97\u5c11\u6216\u8005\u7b97\u591a\u70b9\u5bf9\u6570\u76ee\u7684\uff09\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f\u52a0\u4e0a\u8fd9\u4e2a\u957f\u5ea6\u8def\u5f84\u7684\u70b9\u6570\u3002\n\n```cpp\n\t\tfor (register int x = 1; x <= cnt; x++) {\n\t\t\tif (temp[x] > m)continue;\n\t\t\tfor (register int y = temp[x]; y <= m; y++)\n\t\t\t\t\tans += judge[y - temp[x]];\n\t\t}\n\n```\ntemp\u4fdd\u5b58\u7684\u5c31\u662f\u5f53\u524d\u5b50\u6811\u7684\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u7136\u540ejudge[i]\u5c31\u662f\u4fdd\u5b58\u7684\u5b58\u5728i\u8fd9\u6761\u8def\u5f84\u7684\u70b9\u7684\u6570\u76ee\u3002\u6211\u4eec\u53bb\u679a\u4e3e[1,k]\uff08\u4ee3\u7801\u662f\u6709\u4e2a\u5c0f\u4f18\u5316\uff0c\u56e0\u4e3a\u4e00\u4e9b\u957f\u5ea6\u662f\u975e\u6cd5\u7684\u65e0\u6cd5\u66f4\u65b0\u7b54\u6848\uff09\u6240\u6709\u7684\u53ef\u80fd\u8def\u5f84\uff0c\u7136\u540e\u53bb\u52a0\u8d77\u6765\u3002\n\u8fd9\u6837\u5c31\u8db3\u591f\u4e86\u5417\uff1f\u5e76\u4e0d\u662f\uff0c\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u6211\u4eec\u7b97\u7b54\u6848\u53ea\u662f\u7b97\u4e86\u5f53\u524d\u5b50\u6811\u4e0e\u975e\u5f53\u524d\u5b50\u6811\u7684\u8def\u5f84\u80fd\u4e0d\u80fd\u51d1\uff0c\u5f53\u524d\u5b50\u6811\u7684\u8def\u5f84\u6211\u4eec\u6ca1\u53bb\u7edf\u8ba1\uff0c\u6240\u4ee5\u5176\u5b9e\u5c31\u662f\u53ea\u8981\u5728\u6700\u540e\uff0c\u6211\u4eec\u628a\u6240\u6709judge\u6570\u7ec4\u91cc\u9762[1\uff0ck]\u7684\u70b9\u6570\u90fd\u52a0\u5230ans\u4e0a\u9762\u53bb\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3ajudge\u5b58\u7684\u5c31\u662f\u5f53\u524d\u5b50\u6811\u7684\u6240\u6709\u8def\u5f84\uff0c\u7136\u540e\u5f53\u524d\u5b50\u6811\u53ea\u8981\u5b58\u5728\u5c0f\u4e8ek\u7684\u4e5f\u5c31\u662f\u4e00\u4e2a\u70b9\u5bf9\u3002\n```cpp\nwhile (!que.empty())\n\t{\n\t\tans += judge[que.front()];\n\t\tjudge[que.front()] = 0;\n\t\tque.pop();\n\t}\n\n```\n\u597d\u4e86\u5982\u679c\u8fd9\u6837\u5b50\uff0c\u4ed6\u666e\u901a\u7684\u5c31\u53ea\u670950\u5206\uff0c\uff08inline\uff0cregister\uff0c\u5feb\u8bfb\u4e71\u98de\u53ef\u4ee5\u8fbe\u52307,80\uff09\uff0c\u56e0\u4e3a\u8d85\u65f6\uff1b\u4e3a\u4ec0\u4e48\uff1f\u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u7edf\u8ba1\u7b54\u6848\u7684\u4ee3\u7801\n\n```cpp\n\t\tfor (register int x = 1; x <= cnt; x++) {\n\t\t\tif (temp[x] > m)continue;\n\t\t\tfor (register int y = temp[x]; y <= m; y++)\n\t\t\t\t\tans += judge[y - temp[x]];\n\t\t}\n\n```\n\u8fd9\u4e2a\u7edf\u8ba1\u7b54\u6848\u662f\u4e00\u4e2a\u5e73\u65b9\u7ea7\u522b\u7684\u7edf\u8ba1\u7b54\u6848\uff0c\u6240\u4ee5\u7206\u6389\u4e86\uff0c\u600e\u4e48\u4f18\u5316\uff1f\u6211\u4eec\u601d\u8003\u4e00\u4e0b\uff0c\u8fd9\u7b2c\u4e8c\u4e2afor\u7b97\u7684\u5176\u5b9e\u5c31\u662f\njudge[1]+judge[2] + judge[3]+\u2026+judge[m-temp[x]];\n\u8fd9\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u524d\u7f00\u548c\u5bf9\u4e0d\u5bf9\uff0c\u7136\u540e\u6211\u4eec\u53bb\u6bcf\u6b21\u66f4\u65b0judge\u6570\u7ec4\u7684\u65f6\u5019\u90fd\u662f\u5355\u70b9\u66f4\u65b0\uff08\u627e\u5230\u4e00\u6761\u8def\u5f84\uff0c \u5728\u8def\u5f84\u957f\u5ea6\u7684judge\u4e0b\u9762++\uff09\uff1b\u8fd9\u91cc\u5c31\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u6216\u8005\u7ebf\u6bb5\u6811\u53bb\u4f18\u5316\u5f97\u7b54\u6848\u4e86\uff0c\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5355\u70b9\u66f4\u65b0\u533a\u95f4\u67e5\u8be2\u3002\u597d\u4e86\u8fd9\u9898\u5c31\u505a\u597d\u4e86\u3002\n\uff08\u7528\u6811\u72b6\u6570\u7ec4wa\u4e864\u4e2a\u5c0f\u6570\u636e\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u4e00\u6539\u7ebf\u6bb5\u6811\u5c31a\uff09\n\u770b\u8d77\u6765\u4ee3\u7801\u5f88\u957f~~\uff08\u7ebf\u6bb5\u6811\u592a\u957f\u4e86\uff01\uff09~~ \uff0c\u5176\u5b9e\u90fd\u662f\u6a21\u677f\u5957\u4e0a\u53bb\u7136\u540e\u7a0d\u7a0d\u6539\u8fdb\u4e0b\uff08\u5c31\u53ea\u662fjudge\u6570\u7ec4\u4ece\u8bb0\u5f55\u8fb9\u662f\u5426\u5b58\u5728\u53d8\u6210\u4e86\u5b58\u5728\u8fd9\u6761\u8fb9\u7684\u6570\u76ee\uff09\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst long long max_ = 100000 + 7;\nconst int inf = 1e9 + 7;\ninline int read() {\n\tint s = 0, f = 1;\n\tchar ch = getchar();\n\twhile (ch<'0' || ch>'9') {\n\t\tif (ch == '-')\n\t\t\tf = -1;\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0'&&ch <= '9') {\n\t\ts = s * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn s * f;\n}\nint head[max_], xiann = 2, n, m, sum, root, vis[max_], size_[max_], maxpart[max_], judge[max_], temp[max_], dis[max_], cnt = 0, ask[max_], ans = 0;\nstruct k {\n\tint next, to, value;\n}xian[max_ * 2];\ninline void add_(int a, int b, int c) {\n\txian[xiann].next = head[a];\n\txian[xiann].to = b;\n\txian[xiann].value = c;\n\thead[a] = xiann;\n\txiann++;\n}\ninline void getroot(int now, int fa) {\n\tsize_[now] = 1, maxpart[now] = 0;\n\tfor (register int i = head[now]; i; i = xian[i].next) {\n\t\tint to = xian[i].to;\n\t\tif (to == fa || vis[to])continue;\n\t\tgetroot(to, now);\n\t\tsize_[now] += size_[to];\n\t\tmaxpart[now] = max(maxpart[now], size_[to]);\n\t}\n\tmaxpart[now] = max(maxpart[now], sum - size_[now]);\n\tif (maxpart[root] > maxpart[now])root = now;\n}\ninline void getdis(int now, int fa) {\n\ttemp[++cnt] = dis[now];\n\tfor (register int i = head[now]; i; i = xian[i].next) {\n\t\tint to = xian[i].to;\n\t\tif (vis[to] || to == fa)continue;\n\t\tdis[to] = dis[now] + xian[i].value;\n\t\tgetdis(to, now);\n\t}\n}\nstruct kk {\n\tint lazy, sum, Lson, Rson;\n}tree_[max_ * 4];\nvoid build(int L, int R, int node) {\n\ttree_[node].Lson = L;\n\ttree_[node].Rson = R;\n\tif (L == R) {\n\t\ttree_[node].sum = 0;\n\t\ttree_[node].lazy = 0;\n\t\treturn;\n\t}\n\tint mid = L + (R - L) / 2, L_tree = node * 2, R_tree = node * 2 + 1;\n\tbuild(L, mid, L_tree);\n\tbuild(mid + 1, R, R_tree);\n\ttree_[node].sum = tree_[L_tree].sum + tree_[R_tree].sum;\n}\nvoid pushdown_(int node, int vv) {\n\ttree_[node].lazy += vv;\n\ttree_[node].sum += tree_[node].lazy * (tree_[node].Rson - tree_[node].Lson + 1);\n\ttree_[node * 2].lazy += tree_[node].lazy;\n\ttree_[node * 2 + 1].lazy += tree_[node].lazy;\n\ttree_[node].lazy = 0;\n}\n\nvoid update(int L, int R, int node, int aimL, int aimR, int vv) {\n\tif (tree_[node].lazy != 0)pushdown_(node, 0);\n\tif (L > aimR || R < aimL) return;\n\tif (L >= aimL && R <= aimR) {\n\t\tpushdown_(node, vv);\n\t\treturn;\n\t}\n\tint mid = L + (R - L) / 2, L_tree = node * 2, R_tree = node * 2 + 1;\n\tupdate(L, mid, L_tree, aimL, aimR, vv);\n\tupdate(mid + 1, R, R_tree, aimL, aimR, vv);\n\ttree_[node].sum = tree_[L_tree].sum + tree_[R_tree].sum;\n}\n\nint askk(int L, int R, int node, int aimL, int aimR) {\n\tif (tree_[node].lazy != 0)pushdown_(node, 0);\n\tif (L > aimR || R < aimL) return 0;\n\tif (L >= aimL && R <= aimR) {\n\t\treturn tree_[node].sum;\n\t}\n\tint mid = L + (R - L) / 2, L_tree = node * 2, R_tree = node * 2 + 1;\n\tint t1 = askk(L, mid, L_tree, aimL, aimR),\n\t\tt2 = askk(mid + 1, R, R_tree, aimL, aimR);\n\treturn t1 + t2;\n}\ninline void solve(int now) {\n\tqueue<int> que;\n\tfor (register int i = head[now]; i; i = xian[i].next) {\n\t\tint to = xian[i].to;\n\t\tif (vis[to]) continue;\n\t\tdis[to] = xian[i].value;//dis\u6570\u7ec4\u662f\u8868\u793a\u5230\u5f53\u524d\u6839\u7684\u8ddd\u79bb;\n\t\tcnt = 0;\n\t\tgetdis(to, now);\n\t\tfor (register int x = 1; x <= cnt; x++) {\n\t\t\tif (temp[x] > m)continue;\n\t\t\tans += askk(1, m, 1, 1, m - temp[x]);\n\t\t//\tfor (register int y = temp[x] + 1; y <= m; y++)\n\t\t//\t\tans += judge[y - temp[x]];\n\t\t}\n\n\t\tfor (register int x = 1; x <= cnt; x++) {\n\t\t\tif (temp[x] > m)continue;\n\t\t\tque.push(temp[x]);\n\t\t\tjudge[temp[x]] += 1;\n\t\t\tupdate(1, m, 1, temp[x], temp[x], 1);\n\t\t}\n\t}\n\twhile (!que.empty())\n\t{\n\t\tif (que.front() <= m)\n\t\t\tans += judge[que.front()];\n\t\tupdate(1, m, 1, que.front(), que.front(), -judge[que.front()]);\n\t\tjudge[que.front()] = 0;\n\t\tque.pop();\n\t}\n}\ninline void divide(int now) {\n\tvis[now] = 1;\n\tsolve(now);\n\tfor (register int i = head[now]; i; i = xian[i].next) {\n\t\tint to = xian[i].to;\n\t\tif (vis[to])continue;\n\t\tmaxpart[root = 0] = sum = size_[to];\n\t\tgetroot(to, 0);\n\t\tgetroot(root, 0);\n\t\tdivide(root);\n\t}\n}\nint main() {\n\tn = read();\n\tfor (register int i = 2; i <= n; i++) {\n\t\tint a = read(), b = read(), c = read();\n\t\tadd_(a, b, c);\n\t\tadd_(b, a, c);\n\t}\n\tm = read();\n\tbuild(1, m, 1);\n\tmaxpart[0] = sum = n;\n\troot = 0;\n\tgetroot(1, 0);\n\tgetroot(root, 0);\n\tdivide(root);\n\tprintf(\"%d\", ans);\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1571050290,
        "uid": 156874,
        "name": "Boxxxxxx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4178 \u3010Tree\u3011"
    },
    {
        "content": "# \u9898\u9762\n**\u9898\u76ee\u63cf\u8ff0**\n\u7ed9\u4e00\u9897n\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u6761\u8fb9\u4e0a\u6709\u4e00\u4e2a\u8ddd\u79bbv\uff08v<=1000\uff09\u3002\n\u5b9a\u4e49d(u,v)\u4e3au\u5230v\u7684\u6700\u5c0f\u8ddd\u79bb\uff1b\n\u7ed9\u5b9ak\u503c\uff0c\u6c42\u6709\u591a\u5c11\u70b9\u5bf9\uff08u\uff0cv\uff09\u4f7fu\u5230v\u7684\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8ek\u3002\n**\u8f93\u5165\u683c\u5f0f**\n\u8f93\u5165\u6709\u591a\u7ec4\u6570\u636e\uff0c\u4ee5\u4e24\u4e2a0\u7ed3\u5c3e\n\u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570n\uff0ck\uff0cn<=10000,k<2^31\n\u63a5\u4e0b\u6765n-1\u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570x,y,v,\u8868\u793a\u70b9x\u5230\u70b9y\u6709\u4e00\u6761\u8fb9\u8ddd\u79bb\u662fv\uff0cv<=1000\n**\u8f93\u51fa\u683c\u5f0f**\n\u5bf9\u6bcf\u7ec4\u6570\u636e\u4e00\u884c\u4e00\u4e2a\u7b54\u6848\u3002\n**input**\n5 4\n1 2 3\n1 3 1\n1 4 2\n3 5 1\n0 0\n**output**\n8\n# \u9898\u89e3\n\u8fd9\u9053\u9898\u76ee\u662f\u4e00\u4e2a\u6811\u5206\u6cbb\u2014\u2014\u70b9\u5206\u6cbb\u7684\u5178\u578b\u4f8b\u9898\u3002\n\u70b9\u5206\u6cbb\u6d41\u7a0b\uff1a\n1\u3001\u5bfb\u627e\u5f53\u524d[\u6811\u7684\u91cd\u5fc3](http://blog.csdn.net/qq_39670434/article/details/79444249)\u3002\n2\u3001\u5904\u7406\u7ecf\u8fc7\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u3002\n3\u3001\u6807\u8bb0\u6839\u7ed3\u70b9\u4e3a\u5df2\u8bbf\u95ee\u3002\n4\u3001\u9012\u5f52\u5904\u7406\u4ee5\u6839\u8282\u70b9\u7684\u513f\u5b50\u4e3a\u6839\u7684\u6bcf\u68f5\u5b50\u6811\u3002\n```\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\n\tint num=0;\n\tchar c=' ';\n\tbool flag=true;\n\tfor(;c>'9'||c<'0';c=getchar())\n\tif(c=='-')\n\tflag=false;\n\tfor(;c>='0'&&c<='9';num=(num<<3)+(num<<1)+c-48,c=getchar());\n\treturn flag ? num : -num;\n}\nconst int maxn=10021;\nint root;\nint dcnt=0,ans=0;\n//dcnt\u662f\u5b58\u653e\u4e86dis\u6570\u7ec4\u4e2d\u6570\u636e\u7684\u6570\u91cf\uff0cans\u5b58\u653e\u4e86\u6700\u7ec8\u7edf\u8ba1\u51fa\u6765\u7684\u6570\u91cf\nint now,vis[maxn],dis[maxn],d[maxn];\n//now\u5b58\u653e\u4e86\u5f53\u524d\u5b50\u6811\u7684\u89c4\u6a21\n//vis[i]\u4ee3\u8868i\u662f\u5426\u88ab\u8bbf\u95ee\n//d[i]\u5b58\u653e\u4e86\u5230\u6839\u7684\u8ddd\u79bb\nconst int INF=2e9;\nint f[maxn],size[maxn];\n//\u8fd9\u4e24\u4e2a\u6570\u7ec4\u662f\u7528\u6765\u6c42\u6811\u7684\u91cd\u5fc3\u7684\n\n\tint n,k;\n\tstruct node\n\t{\n\t\tint dot,val,next;\n\t}a[maxn*2];\n\tint top=0,head[maxn];\n\t//\u90bb\u63a5\u8868\n\tvoid insert(int x,int y,int v)\n\t{\n\t\ttop++;\n\t\ta[top].dot=y;\n\t\ta[top].next=head[x];\n\t\ta[top].val=v;\n\t\thead[x]=top;\n\t}\n\t//\u63d2\u5165\u8fb9\n\n\n\tvoid dfs(int u,int fa)\n\t{\n\t\tsize[u]=1;f[u]=0; \n\t\tfor(int i=head[u];i;i=a[i].next)\n\t\t{\n\t\t\tint v=a[i].dot;\n\t\t\tif(v==fa||vis[v])continue;\n\t\t\tdfs(v,u);\n\t\t\tsize[u]+=size[v];\n\t\t\tf[u]=max(f[u],size[v]);\n\t\t}\n\t\tf[u]=max(f[u],now-size[u]);\n\t\tif(f[u]<f[root])root=u;\n\t}\n\t//\u6c42\u6811\u7684\u91cd\u5fc3\u653e\u5728\u53d8\u91cfroot\u91cc\n\n\n\tvoid get_dis(int u,int fa)\n\t{\n\t\tif(d[u]>k)return;\n\t\tdis[++dcnt]=d[u];\n\t\tfor(int i=head[u];i;i=a[i].next)\n\t\t{\n\t\t\tint v=a[i].dot;\n\t\t\tif(v==fa||vis[v])continue;\n\t\t\td[v]=d[u]+a[i].val;\n\t\t\tget_dis(v,u);\n\t\t}\n\t}\n\tint add(int u,int w)\n\t//u\u7684\u5b50\u6811\u4e2d\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u70b9i\uff0cj\n\t//\u6ee1\u8db3d[i]+d[j]<k-w\u7684\u6570\u91cf\n\t{\n\t\td[u]=w;dcnt=0;\n\t\tget_dis(u,0);\n\t\tsort(dis+1,dis+dcnt+1);\n\t\t//\u6392\u5e8f\u4e00\u4e0b\uff0c\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e\u4e24\u4e2a\u7aef\u70b9\uff0c\u4e0d\u7528\u4e00\u4e2a\u4e00\u4e2a\u641c\u7d22\u8fc7\u53bb\n\t\tint l=1,r=dcnt,sum=0;\n\t\twhile(l<r)\n\t\t{\n\t\t\tif(dis[l]+dis[r]<=k)\n\t\t\t{\n\t\t\t\tsum+=r-l;\n\t\t\t\tl++;\n\t\t\t}\n\t\t\telse r--;\n\t\t}\n\t\treturn sum;\n\t}\n\tvoid solve(int u)\n\t{\n\t\tans+=add(u,0);\n\t\tvis[u]=1;\n\t\tfor(int i=head[u];i;i=a[i].next)\n\t\t{\n\t\t\tint v=a[i].dot;\n\t\t\tif(vis[v])continue;\n\t\t\t//\u5982\u679c\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5c31\u8bf4\u660e\u8be5\u5b50\u6811\u5df2\u7ecf\u88ab\u89e3\u51b3\n\t\t\tans-=add(v,a[i].val);\n\t\t\t\n\t\t\tnow=size[v];root=0;\n\t\t\t\n\t\t\tdfs(v,0);\n\t\t\t//\u6c42\u5b50\u6811\u7684\u91cd\u5fc3\n\t\t\tsolve(root);\n\t\t\t//\u5b50\u6811\u7ee7\u7eed\u9012\u5f52\u89e3\u51b3\n\t\t}\n\t}\n\n\n\nvoid init()\n{\n\tnow=n=read();\n\tk=read();\n\twhile(n&&k)\n\t{\n\t\tmemset(vis,0,sizeof vis);\n\t\ttop=ans=root=0;\n\t\tf[0]=maxn;\n\t\tmemset(head,0,sizeof head);\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tint x=read();\n\t\t\tint y=read();\n\t\t\tint v=read();\n\t\t\tinsert(x,y,v);\n\t\t\tinsert(y,x,v);\n\t\t}\n\t\tdfs(1,0);\n\t\tsolve(root);\n\t\tprintf(\"%d\\n\",ans);\n\t\tnow=n=read();\n\t\tk=read();\n\t}\n}\nint main()\n{\n\tinit();\n\treturn 0;\n}\n```",
        "postTime": 1520226352,
        "uid": 24081,
        "name": "Hydra_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4178 \u3010Tree\u3011"
    }
]