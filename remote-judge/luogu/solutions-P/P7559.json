[
    {
        "content": "[\u5728\u6211\u7684 cnblogs \u4e0a\u9605\u8bfb](https://www.cnblogs.com/RiverHamster/p/sol-JOISC2021d1t2.html)\n\n\u9996\u5148\u8003\u8651\u56fa\u5b9a\u6bcf\u4e2a\u70b9\u7684\u65b9\u5411\u3002\n\n\u5e73\u79fb\u5750\u6807\u7cfb\uff0c\u4f7f $1$ \u53f7\u70b9\u4e3a\u539f\u70b9\uff0c\u5219 $t$ \u65f6\u523b $1$ \u53f7\u70b9\u53ef\u80fd**\u76f4\u63a5\u6216\u95f4\u63a5**\u5f71\u54cd\u7684\u8303\u56f4\u662f $\\{(x, y)\\mid |\nx| + |y| \\le t\\}$\u3002\n\n**\u6ce8\u610f\u5230\u4e0d\u5b58\u5728\u91cd\u590d\u70b9**\uff0c\u90a3\u4e48\u53ef\u4ee5\u679a\u4e3e $1$ \u53f7\u70b9\u7684\u65b9\u5411\uff0c\u5e76\u65cb\u8f6c\u5750\u6807\u7cfb\u4f7f $1$ \u53f7\u70b9\u5411 $x$ \u8f74\u6b63\u65b9\u5411\u3002\n\n\u90a3\u4e48\u5982\u679c\u521d\u59cb\u65b9\u5411\u548c\u5f71\u54cd\u8303\u56f4\u6269\u5927\u7684\u4e24\u4e2a\u65b9\u5411\u4e4b\u4e00\u76f8\u540c\uff0c\u90a3\u4e48\u4e0d\u53ef\u80fd\u88ab\u611f\u67d3\u3002\n\n\u8fdb\u4e00\u6b65\u5730\uff0c\u5bf9\u4e8e $|x| \\ne |y|$ \u7684\u70b9\uff0c\u5e94\u8be5\u671d\u5411\u5782\u76f4\u4e8e $|x|$, $|y|$ \u4e2d\u8f83\u5927\u7684\u4e00\u4e2a\u5750\u6807\u8f74\u7684\u65b9\u5411\uff0c\u5426\u5219\u4ecd\u7136\u4e0d\u80fd\u8fdb\u5165\u5f71\u54cd\u8303\u56f4\u3002\n\n\u5bf9\u4e8e $|x| = |y|$ \u7684\u70b9\uff0c\u5982\u679c\u5728\u7b2c\u4e00\u8c61\u9650\u6216\u7b2c\u56db\u8c61\u9650\uff0c\u90a3\u4e48\u5e94\u8be5\u671d\u5782\u76f4 $x$ \u8f74\u65b9\u5411\u8d70\uff0c\u5426\u5219\u5e94\u8be5\u671d\u5782\u76f4 $y$ \u8f74\u65b9\u5411\u8d70\uff08\u6ce8\u610f\u5230\u6ca1\u6709\u91cd\u590d\u70b9\uff0c\u82e5\u5411 $x$ \u8f74\u65b9\u5411\u5219\u6070\u597d\u4e0d\u80fd\u88ab\u611f\u67d3\uff1b\u5982\u4e0b\u56fe\u6240\u793a\uff0c$A, C$ \u53ef\u4ee5\u5728 $M$ \u76f8\u9047\uff09\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ag2fpnbi.png)\n\n\u4e24\u4e2a\u4eba\u80fd\u76f8\u9047\uff0c\u5f53\u4e14\u4ec5\u5f53\u6ee1\u8db3\u4e00\u4e0b\u4e24\u79cd\u6761\u4ef6\u4e4b\u4e00\uff1a\n\n- \u4e24\u4eba $x$ \u6216 $y$ \u5750\u6807\u76f8\u540c\uff0c\u4e14\u521d\u59cb\u76f8\u5411\u800c\u884c\uff1b\n- \u4e24\u4eba\u5728\u540c\u4e00\u6761\u659c\u7ebf\u4e0a\uff0c\u5373 $x + y = x' +y'$ \u6216 $x - y = x' - y'$\uff0c\u4e14\u65b9\u5411\u6070\u597d\u76f8\u5bf9\u3002\n\n\u6784\u9020\u65e0\u5411\u56fe\uff0c\u82e5 $u, v$ \u4e24\u4eba\u5728 $t$ \u65f6\u523b\u76f8\u9047\uff0c\u5219\u5728 $(u, v)$ \u4e4b\u95f4\u8fde\u4e00\u6761\u6743\u503c\u4e3a $t$ \u7684\u8fb9\u3002\n\n\u8003\u8651\u8d2a\u5fc3\u3002\u6bcf\u6b21\u9009\u53d6\u88ab\u611f\u67d3\u65f6\u95f4\u6700\u5c0f\u7684\u70b9 $u$\uff0c\u8bbe\u5176\u65f6\u95f4\u4e3a $t$\uff0c\u5219\u5bf9\u4e8e $u$ \u7684\u6240\u6709\u51fa\u8fb9 $\\{(u, v, t') \\mid t' \\ge t\\}$\uff0c\u66f4\u65b0 $v$ \u7684\u6700\u5c0f\u611f\u67d3\u65f6\u95f4 $t'$\u3002\n\n\u76f4\u63a5\u5b9e\u73b0\u8fb9\u6570 $\\mathcal O(N^2)$\u3002\u5b58\u5728\u51e0\u79cd\u4f18\u5316\u65b9\u6cd5\uff0c\u4e0b\u9762\u53ea\u4ecb\u7ecd\u6700\u5bb9\u6613\u7406\u89e3\u7684\u4e00\u79cd\uff1a\n\n\u5bf9\u4e8e\u6bcf\u6761\u6a2a\u7ebf\u3001\u7ad6\u7ebf\u3001\u659c\u7ebf\u4e0a\u7684 $4$ \u79cd\u65b9\u5411\u7684\u70b9\uff0c\u5206\u522b\u5efa\u7acb\u7ebf\u6bb5\u6811\u3002\u6bcf\u4e2a\u70b9\u4f1a\u52a0\u5165\u6070\u597d $3$ \u68f5\u7ebf\u6bb5\u6811\uff08\u4e24\u6761\u659c\u7ebf\u548c\u521d\u59cb\u65b9\u5411\u6240\u5728\u7684\u6a2a\u7ebf\u6216\u7ad6\u7ebf\uff09\u3002\n\n\u6bcf\u6b21\u8f6c\u79fb\u76f8\u5f53\u4e8e\u5bf9\u4e00\u68f5\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e00\u4e2a\u524d\u7f00\u6216\u540e\u7f00\u7684\u70b9\u7684\u503c\u5bf9\u4e00\u6761**\u659c\u7387\u56fa\u5b9a**\u7684\u7ebf\u6bb5\u53d6 $\\min$\uff0c\u652f\u6301\u67e5\u8be2\u5168\u5c40\u6700\u5c0f\u503c\u548c\u5220\u9664\u67d0\u4e2a\u70b9\u3002\n\n\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\u7684\u6700\u5de6\uff08\u53f3\uff09\u70b9\u548c\u6700\u5c0f\u7684\u80fd\u5b8c\u5168\u8986\u76d6\u533a\u95f4\u7684\u7ebf\u6bb5\uff0c\u7528\u5806\u7b49\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u5982\u679c\u6309\u503c\u57df\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u5219\u7a7a\u95f4 $\\mathcal O(N \\log V)$\uff0c\u5982\u76f4\u63a5\u6309\u4e0b\u6807\u5efa\u7acb\uff0c\u5219\u7a7a\u95f4 $\\mathcal O(N)$\u3002\u4e24\u79cd\u65b9\u6cd5\u90fd\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f46\u7a7a\u95f4\u4e0a\u5e38\u6570\u5f88\u5927\u3002\u65f6\u95f4\u4e3a $\\mathcal O(N(\\log N + \\log V))$ \u6216 $\\mathcal O(N \\log N)$\u3002\n\n\u5b9e\u73b0\u5341\u5206\u590d\u6742\u3002\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <algorithm>\n#include <numeric>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\n#define LOG(f...) fprintf(stderr, f)\n#define all(cont) begin(cont), end(cont)\n\nusing ll = long long;\n\nconst int N = 100005;\nconst ll IINF = 2e9;\nconst ll INF = 1e17;\n\nstruct pt { int x, y; };\n\nstruct discretizer {\n  vector<int> v;\n  void clear() { v.clear(); }\n  void add(int x) { v.push_back(x); }\n  void init() { sort(all(v)); v.erase(unique(all(v)), end(v)); }\n  int operator()(int x) const { return lower_bound(all(v), x) - begin(v); }\n};\n\nstruct min_seg_tree {\n  static const int LEN = 1 << 21;\n  pair<int, pair<int, int>> t[LEN * 2];\n  void init() { memset((void *)t, 0x3f, sizeof(t)); }\n  min_seg_tree() { init(); }\n  void update(int p, ll v, int id) {\n    if (v > 0x3f3f3f3f) return;\n    p += LEN;\n    if (t[p].first <= v) return;\n    t[p].first = v; t[p].second = {p - LEN, id};\n    for (p >>= 1; p; p >>= 1)\n      t[p] = t[p << 1].first < t[p << 1 | 1].first ? t[p << 1] : t[p << 1 | 1];\n  }\n  void assign(int p, ll v, int id) {\n    if (v > 0x3f3f3f3f) return;\n    p += LEN;\n    if (t[p].first == v && t[p].second.second == id) return;\n    t[p].first = v; t[p].second = {p - LEN, id};\n    for (p >>= 1; p; p >>= 1)\n      t[p] = t[p << 1].first < t[p << 1 | 1].first ? t[p << 1] : t[p << 1 | 1];\n  }\n  void erase(int p) {\n    p |= LEN; t[p].first = 0x3f3f3f3f;\n    for (p >>= 1; p; p >>= 1)\n      t[p] = t[p << 1].first < t[p << 1 | 1].first ? t[p << 1] : t[p << 1 | 1];\n  }\n  pair<int, pair<int, int>> top() const { return t[1]; }\n};\n\nstruct seg_node {\n  ll b;\n  pair<ll, int> mn;\n  int pos, pos_id;\n  int lc, rc;\n} t[N * 32 * 3];\nint nc = 0;\n\nint n;\npt p[N];\ndiscretizer dx, dy, d0, d1;\nmin_seg_tree H;\nint idx[N], idy[N], id0[N], id1[N];\nint rtx[N][4], rty[N][4], rt0[N][4], rt1[N][4];\n\ntemplate<int k>\nstruct seg_op {\n  static const ll pos_init = k < 0 ? -IINF : IINF;\n  static ll pos_v(int x) { return x ? t[x].pos : pos_init; }\n  static int new_node() {\n    ++nc;\n    t[nc].mn = {INF, 0}; t[nc].b = INF; t[nc].pos = pos_init; t[nc].lc = t[nc].rc = 0;\n    return nc;\n  }\n  static void up(int x) {\n    auto &u = t[x], &lc = t[t[x].lc], &rc = t[t[x].rc];\n    t[x].mn = min(lc.mn, rc.mn);\n    if (k > 0) {\n      if (pos_v(t[x].lc) < pos_v(t[x].rc)) u.pos = pos_v(t[x].lc), u.pos_id = lc.pos_id;\n      else u.pos = pos_v(t[x].rc), u.pos_id = rc.pos_id;\n    }\n    else {\n      if (pos_v(t[x].lc) > pos_v(t[x].rc)) u.pos = pos_v(t[x].lc), u.pos_id = lc.pos_id;\n      else u.pos = pos_v(t[x].rc), u.pos_id = rc.pos_id;\n    }\n    t[x].mn = min(t[x].mn, make_pair((ll)k * t[x].pos + t[x].b, t[x].pos_id));\n  }\n  static void insert(int &x, int l, int r, int p, ll mn, int id) {\n    if (!x) x = new_node();\n    if ((k > 0 && p < t[x].pos) || (k < 0 && p > t[x].pos))\n      t[x].pos = p, t[x].pos_id = id;\n    t[x].mn = min(t[x].mn, make_pair(mn, id));\n    if (l == r) return;\n    int mid = (l + r) >> 1;\n    p <= mid ? insert(t[x].lc, l, mid, p, mn, id) : insert(t[x].rc, mid + 1, r, p, mn, id);\n  }\n  static void erase(int &x, int l, int r, int p) {\n    if (l == r) { x = 0; return; }\n    int mid = (l + r) >> 1;\n    p <= mid ? erase(t[x].lc, l, mid, p) : erase(t[x].rc, mid + 1, r, p);\n    if (!t[x].lc && !t[x].rc) x = 0;\n    else up(x);\n  }\n  static void update(int &x, int l, int r, int ql, int qr, ll b) {\n    if (!x || ql > qr) return;\n    if (ql <= l && r <= qr) {\n      t[x].b = min(t[x].b, b);\n      if (t[x].pos != pos_init) t[x].mn = min(t[x].mn, make_pair(t[x].b + t[x].pos * k, t[x].pos_id));\n      return;\n    }\n    int mid = (l + r) >> 1;\n    if (ql <= mid) update(t[x].lc, l, mid, ql, qr, b);\n    if (qr > mid) update(t[x].rc, mid + 1, r, ql, qr, b);\n    up(x);\n  }\n};\n\nint min_x, max_x, min_y, max_y;\n\nint dir[N];\n\n// rt0 : -2 -2 2 2\n// rt1 : -2 2 2 -2\n\nvoid insert_pt(int i) {\n  int D = dir[i];\n  ll V = i == 0 ? 0 : INF;\n  D & 2 ? seg_op<2>::insert(rt0[id0[i]][D], min_x, max_x, p[i].x, V, i)\n        : seg_op<-2>::insert(rt0[id0[i]][D], min_x, max_x, p[i].x, V, i);\n  D == 1 || D == 2 ? seg_op<2>::insert(rt1[id1[i]][D], min_x, max_x, p[i].x, V, i)\n                   : seg_op<-2>::insert(rt1[id1[i]][D], min_x, max_x, p[i].x, V, i);\n  if (D == 0) seg_op<-1>::insert(rty[idy[i]][D], min_x, max_x, p[i].x, V, i);\n  else if (D == 2) seg_op<1>::insert(rty[idy[i]][D], min_x, max_x, p[i].x, V, i);\n  else if (D == 1) seg_op<-1>::insert(rtx[idx[i]][D], min_y, max_y, p[i].y, V, i);\n  else if (D == 3) seg_op<1>::insert(rtx[idx[i]][D], min_y, max_y, p[i].y, V, i);\n}\n\nvoid heap_up(int id, int tid) {\n  H.update(id, t[tid].mn.first, t[tid].mn.second);\n}\n\nvoid heap_assign(int id, int tid) {\n  H.assign(id, t[tid].mn.first, t[tid].mn.second);\n}\n\nvoid erase_pt(int i) {\n  int D = dir[i];\n  D & 2 ? seg_op<2>::erase(rt0[id0[i]][D], min_x, max_x, p[i].x)\n        : seg_op<-2>::erase(rt0[id0[i]][D], min_x, max_x, p[i].x);\n  heap_assign(id0[i] << 4 | 8 | D, rt0[id0[i]][D]);\n  D == 1 || D == 2 ? seg_op<2>::erase(rt1[id1[i]][D], min_x, max_x, p[i].x)\n                   : seg_op<-2>::erase(rt1[id1[i]][D], min_x, max_x, p[i].x);\n  heap_assign(id1[i] << 4 | 12 | D, rt1[id1[i]][D]);\n  if (D == 0) seg_op<-1>::erase(rty[idy[i]][D], min_x, max_x, p[i].x);\n  else if (D == 2) seg_op<1>::erase(rty[idy[i]][D], min_x, max_x, p[i].x);\n  else if (D == 1) seg_op<-1>::erase(rtx[idx[i]][D], min_y, max_y, p[i].y);\n  else if (D == 3) seg_op<1>::erase(rtx[idx[i]][D], min_y, max_y, p[i].y);\n  if (D == 0 || D == 2)\n    heap_assign(idy[i] << 4 | 4 | D, rty[idy[i]][D]);\n  else\n    heap_assign(idx[i] << 4 | 0 | D, rtx[idx[i]][D]);\n}\n\nvoid update_pt(int i, int dis) {\n  int slen = (dis + 1) / 2, slen_v = slen * 2;\n  switch (dir[i]) {\n    case 0:\n      seg_op<2>::update(rt0[id0[i]][3], min_x, max_x, p[i].x + slen, max_x, slen_v - 2LL * (p[i].x + slen));\n      heap_up(id0[i] << 4 | 8 | 3, rt0[id0[i]][3]);\n      seg_op<2>::update(rt1[id1[i]][1], min_x, max_x, p[i].x + slen, max_x, slen_v - 2LL * (p[i].x + slen));\n      heap_up(id1[i] << 4 | 12 | 1, rt1[id1[i]][1]);\n      seg_op<1>::update(rty[idy[i]][2], min_x, max_x, p[i].x + dis, max_x, dis - (p[i].x + dis));\n      heap_up(idy[i] << 4 | 4 | 2, rty[idy[i]][2]);\n      break;\n    case 1:\n      seg_op<2>::update(rt0[id0[i]][2], min_x, max_x, p[i].x + slen, max_x, slen_v - 2LL * (p[i].x + slen));\n      heap_up(id0[i] << 4 | 8 | 2, rt0[id0[i]][2]);\n      seg_op<-2>::update(rt1[id1[i]][0], min_x, max_x, min_x, p[i].x - slen, slen_v + 2LL * (p[i].x - slen));\n      heap_up(id1[i] << 4 | 12 | 0, rt1[id1[i]][0]);\n      seg_op<1>::update(rtx[idx[i]][3], min_y, max_y, p[i].y + dis, max_y, dis - (p[i].y + dis));\n      heap_up(idx[i] << 4 | 0 | 3, rtx[idx[i]][3]);\n      break;\n    case 2:\n      seg_op<-2>::update(rt0[id0[i]][1], min_x, max_x, min_x, p[i].x - slen, slen_v + 2LL * (p[i].x - slen));\n      heap_up(id0[i] << 4 | 8 | 1, rt0[id0[i]][1]);\n      seg_op<-2>::update(rt1[id1[i]][3], min_x, max_x, min_x, p[i].x - slen, slen_v + 2LL * (p[i].x - slen));\n      heap_up(id1[i] << 4 | 12 | 3, rt1[id1[i]][3]);\n      seg_op<-1>::update(rty[idy[i]][0], min_x, max_x, min_x, p[i].x - dis, dis + (p[i].x - dis));\n      heap_up(idy[i] << 4 | 4 | 0, rty[idy[i]][0]);\n      break;\n    case 3:\n      seg_op<-2>::update(rt0[id0[i]][0], min_x, max_x, min_x, p[i].x - slen, slen_v + 2LL * (p[i].x - slen));\n      heap_up(id0[i] << 4 | 8 | 0, rt0[id0[i]][0]);\n      seg_op<2>::update(rt1[id1[i]][2], min_x, max_x, p[i].x + slen, max_x, slen_v - 2LL * (p[i].x + slen));\n      heap_up(id1[i] << 4 | 12 | 2, rt1[id1[i]][2]);\n      seg_op<-1>::update(rtx[idx[i]][1], min_y, max_y, min_y, p[i].y - dis, dis + (p[i].y - dis));\n      heap_up(idx[i] << 4 | 0 | 1, rtx[idx[i]][1]);\n      break;\n  }\n}\n\nbool vis[N];\n\nint solve() {\n  dir[0] = 0;\n  for (int i = 1; i < n; ++i) {\n    if (abs(p[i].x) == abs(p[i].y))\n      dir[i] = p[i].x < 0 ? 0 : (p[i].y > 0 ? 3 : 1);\n    else if (abs(p[i].x) > abs(p[i].y))\n      dir[i] = p[i].x > 0 ? 2 : 0;\n    else\n      dir[i] = p[i].y > 0 ? 3 : 1;\n  }\n  dx.clear(); dy.clear(); d0.clear(); d1.clear();\n  for (int i = 0; i < n; ++i)\n    dx.add(p[i].x), dy.add(p[i].y), d0.add(p[i].x - p[i].y), d1.add(p[i].x + p[i].y);\n  dx.init(); dy.init(); d0.init(); d1.init();\n  for (int i = 0; i < n; ++i)\n    tie(idx[i], idy[i], id0[i], id1[i]) = make_tuple(dx(p[i].x), dy(p[i].y), d0(p[i].x - p[i].y), d1(p[i].x + p[i].y));\n  min_x = IINF; max_x = -IINF;\n  for (int i = 0; i < n; ++i) {\n    min_x = min(min_x, p[i].x), max_x = max(max_x, p[i].x);\n    min_y = min(min_y, p[i].y), max_y = max(max_y, p[i].y);\n  }\n  nc = 0;\n  memset(rtx, 0, sizeof(rtx)); memset(rty, 0, sizeof(rty)); memset(rt0, 0, sizeof(rt0)); memset(rt1, 0, sizeof(rt1));\n  for (int i = 0; i < n; ++i)\n    insert_pt(i);\n  H.update(idy[0] << 4 | 4 | 0, 0, 0);\n  H.update(id0[0] << 4 | 8 | dir[0], 0, 0);\n  H.update(id1[0] << 4 | 12 | dir[0], 0, 0);\n  fill(vis, vis + n, false);\n  int res = 0;\n  while (H.top().first != 0x3f3f3f3f) {\n    int val = H.top().first;\n    int id = H.top().second.first;\n    int x = H.top().second.second;\n    H.erase(id);\n    if (vis[x]) continue;\n    erase_pt(x);\n    vis[x] = true;\n    ++res;\n    update_pt(x, val);\n  }\n  return res;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n  freopen(\"input.txt\", \"r\", stdin);\n  freopen(\"output.txt\", \"w\", stdout);\n#endif\n  scanf(\"%d\", &n);\n  for (int i = 0; i < n; ++i)\n    scanf(\"%d%d\", &p[i].x, &p[i].y);\n  for (int i = 1; i < n; ++i)\n    p[i].x -= p[0].x, p[i].y -= p[0].y;\n  p[0].x = 0; p[0].y = 0;\n  t[0].mn = {INF, 0};\n  int res = 0;\n  for (int i = 0; i < 4; ++i) {\n    res = max(res, solve());\n    transform(p, p + n, p, [](const pt &p) ->pt { return {-p.y, p.x}; });\n  }\n  printf(\"%d\\n\", res);\n  return 0;\n}\n```\n\n",
        "postTime": 1624155618,
        "uid": 31756,
        "name": "RiverHamster",
        "ccfLevel": 9,
        "title": "JOISC2021 Day1T2 IOI Fever"
    },
    {
        "content": "\u5927\u6a21\u62df\uff0c\u9700\u8981\u809d\u3002\n\n\u6211\u4eec\u4e00\u6b65\u6b65\u5206\u89e3\u3002\n\n\u9996\u5148\u6700\u5f00\u59cb\u53ea\u6709\u7b2c\u4e00\u4e2a\u4e2a\u70b9\u88ab\u611f\u67d3\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u6700\u5148\u56fa\u5b9a\u7b2c\u4e00\u4e2a\u4eba\u7684\u65b9\u5411\uff0c\u6709 $4$ \u79cd\u9009\u62e9\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u70b9\u521d\u59cb\u65b9\u5411\u4e0a\u7684\u70b9\uff0c\u4e00\u5b9a\u4e0e $1$ \u53f7\u70b9\u76f8\u5411\u8fd0\u52a8\uff0c\u5426\u5219\u5b83\u4eec\u65e2\u4e0d\u4f1a\u88ab\u611f\u67d3\uff0c\u4e5f\u4e0d\u4f1a\u611f\u67d3\u522b\u4eba\uff0c\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u3002\u6211\u4eec\u79f0\u8fd9\u7c7b\u70b9\u4e3a $\\mathbf{A}$ \u7c7b\u8282\u70b9\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u70b9\u521d\u59cb\u65b9\u5411\u7684\u76f8\u53cd\u53cd\u5411\u4e0a\u8282\u70b9\uff0c\u5fc5\u5b9a\u5411 $1$ \u53f7\u70b9\u65b9\u5411\u79fb\u52a8\u3002\n\n\u5bf9\u4e8e\u5269\u4e0b\u70b9\uff0c\u6bcf\u4e2a\u70b9\u7684\u65b9\u5411\u6709\u4e24\u79cd\u9009\u62e9\uff0c\u7b2c\u4e00\u79cd\u662f\u5782\u76f4\u4e8e $1$ \u53f7\u70b9\u7684\u521d\u59cb\u65b9\u5411\u8fd0\u52a8\uff0c\u7b2c\u4e8c\u79cd\u662f\u5e73\u884c\u4e8e $1$ \u53f7\u70b9\uff0c\u5e76\u5411 $1$ \u53f7\u70b9\u8fd0\u52a8\u3002\n\n\u4f46\u662f\u6bcf\u79cd\u70b9\u90fd\u6709\u4e24\u79cd\u9009\u62e9\uff0c\u72b6\u6001\u6570\u4ecd\u7136\u592a\u5927\u4e86\u3002\n\n\u7ed3\u8bba\uff1a$1$ \u53f7\u70b9\u521d\u59cb\u503c\u4f4d\u7f6e $(a,b)$ \uff0c\u5219\u5f53\u524d\u70b9\u4e00\u5b9a\u9009\u62e9\u5230\u76f4\u7ebf $x=a$ \u548c\u76f4\u7ebf $y=b$ \u4e2d\u8f83\u957f\u7684\u4e00\u4e2a\u3002\n\n\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\u53d1\u73b0\u5411\u53e6\u4e00\u4e2a\u8d70\u4e0d\u53ef\u80fd\u88ab\u611f\u67d3\u3002\n\n\u5bf9\u4e8e\u4e24\u4e2a\u65b9\u5411\u76f8\u540c\u7684\u70b9\uff0c\u53ea\u53ef\u80fd\u5782\u76f4\u4e8e\u521d\u59cb\u65b9\u5411\u8fd0\u52a8\uff0c\u4e14\u53ef\u4ee5\u6839\u636e\u76f8\u5bf9\u4f4d\u7f6e $\\mathcal{O}(1) $ \u5224\u65ad\u662f\u5426\u88ab\u611f\u67d3\u3002\n\n\u5bf9\u4e8e\u539f\u672c\u5c31\u5728\u76f4\u7ebf $x=a$ \u6216\u76f4\u7ebf $y=b$ \u7684\u76f4\u7ebf\uff0c\u53ea\u53ef\u80fd\u5411 $1$ \u53f7\u70b9\u65b9\u5411\u8fd0\u52a8 \u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u56fa\u5b9a\u4e86\u6240\u6709\u70b9\u7684\u8fd0\u52a8\u65b9\u5411\u3002\n\n\u5782\u76f4\u4e8e\u521d\u59cb\u65b9\u5411\u8fd0\u52a8\u7684\u70b9\uff0c\u6211\u4eec\u79f0\u4e3a $\\mathbf{C}$ \u7c7b\u70b9\u3002\u5e73\u884c\u8fd0\u52a8\u7684\u6211\u4eec\u79f0\u4e3a $\\mathbf{D}$ \u53f7\u70b9\u3002\n\n\u90a3\u4e48\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u53d1\u751f\u4f20\u67d3\uff1f\n\n\u9996\u5148\u88ab $1$ \u53f7\u70b9\u4f20\u67d3\u7684\uff0c\u4e00\u5b9a\u662f\u5728\u521d\u59cb\u65b9\u5411\u4e0a\u7684\uff0c\u6216\u5728\u8fc7 $1$ \u70b9\uff0c\u4e14\u659c\u7387\u4e3a $1$ \u6216 $-1$ \u7684\u76f4\u7ebf\u4e0a\u3002 \u6ce8\u610f\u8fd9\u662f\u5fc5\u8981\u6761\u4ef6\uff0c\u5e76\u4e0d\u5145\u5206\u3002\n\n\u90a3\u4e48\u4e24\u4e2a\u70b9\u4e4b\u95f4\u53d1\u751f\u4f20\u67d3\uff0c\u8fc7\u4e24\u70b9\u76f4\u7ebf\u7684\u659c\u7387\u4e3a $1/-1$ \uff0c\u6216\u8fc7\u4e24\u70b9\u76f4\u7ebf\u5e73\u884c\u5750\u6807\u8f74\u3002\n\n\u57fa\u4e8e\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u4e8b\u5b9e\uff0c$i$ \u88ab\u611f\u67d3\u540e\u624d\u80fd\u4f20\u67d3\u522b\u4eba\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd0\u7528\u7c7b\u4f3c\u4e8e\u6700\u77ed\u8def\u7b97\u6cd5\uff0c $d_i$ \u8868\u793a\u8282\u70b9 $i$ \u88ab\u611f\u67d3\u7684\u65f6\u95f4\u3002\u7136\u540e\u8ba8\u8bba\u611f\u67d3\u522b\u4eba\u7684\u4e09\u4e2a\u65b9\u5411\u7684\u70b9\u3002\n\n\u7528\u5806\u4f18\u5316 $\\rm Dijkstra$ \u7b97\u6cd5\u5373\u53ef\u3002\n\n\u4f46\u662f\u76f4\u63a5\u5efa\u56fe\u7684\u8fb9\u6570\u53ef\u80fd\u662f $n^2$ \u7684\u3002\u4e00\u4e2a\u5c0f\u4f18\u5316\u662f\u76f4\u7ebf\u4e0a\u51fa\u73b0\u7684\u540c\u5411\u7684\u70b9\uff0c\u6216\u5782\u76f4\u540c\u5411\u7684\u70b9\u53ef\u4ee5\u76f4\u63a5\u7565\u8fc7\u3002\u8fd9\u6837\u6bcf\u5bf9\u76f8\u5411\u7684\u70b9\u53ea\u80fd\u53ea\u4f1a\u88ab\u66f4\u65b0\u4e00\u6b21\uff0c\u8fb9\u6570\u4e3a $\\mathcal{O}(n)$\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n\\log n)$ \u3002\n\n\u4f18\u5316\u7684\u5177\u4f53\u505a\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u6761\u76f4\u7ebf $x=k$\uff0c$y=k$ \uff0c$y=x$ \uff0c$y=-x$ \uff0c\u4ece\u5de6\u5411\u53f3\u6392\u5e8f\uff0c\u7136\u540e\u626b\u4e00\u904d\uff0c\u540c\u65f6\u8bb0\u5f55\u5404\u4e2a\u521d\u59cb\u65b9\u5411\u7684\u7b2c\u4e00\u4e2a\u70b9 \u3002\n\n",
        "postTime": 1622368349,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011[JOISC 2021 Day1] IOI \u71b1\u306e\u611f\u67d3\u62e1\u5927"
    }
]