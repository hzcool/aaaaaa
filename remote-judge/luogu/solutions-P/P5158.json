[
    {
        "content": "## \u9898\u9762\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P5158)\n\n## \u524d\u7f6e\u829d\u58eb\n\n[\u62c9\u683c\u6717\u65e5\u63d2\u503c](https://www.cnblogs.com/bztMinamoto/p/10185153.html)\uff0c[\u591a\u9879\u5f0f\u591a\u70b9\u6c42\u503c](https://www.cnblogs.com/bztMinamoto/p/10371636.html)\n\n## \u9898\u89e3\n\n\u9996\u5148\u6839\u636e\u62c9\u683c\u6717\u65e5\u63d2\u503c\u516c\u5f0f\u6211\u4eec\u53ef\u4ee5\u66b4\u529b$O(n^2)$\u63d2\u51fa\u8fd9\u4e2a\u591a\u9879\u5f0f\uff0c\u7136\u800c\u8fd9\u663e\u7136\u662f$gg$\u7684\n\n\u90a3\u4e48\u770b\u770b\u600e\u4e48\u4f18\u5316\uff0c\u5148\u6765\u770b\u4e00\u770b\u62c9\u683c\u6717\u65e5\u63d2\u503c\u7684\u516c\u5f0f\n\n$$f(x)=\\sum_{i = 1}^{n} y_i \\prod_{i \\not = j} \\frac{x - x_j}{x_i - x_j}$$\n\n\u8f6c\u5316\u4e00\u4e0b\n\n$$f(x)=\\sum_{i = 1}^{n}{ y_i\\over \\prod_{i \\not = j}{x_i - x_j}} \\prod_{i \\not = j}(x - x_j)$$\n\n\u6765\u8003\u8651\u4e00\u4e0b${ y_i\\over \\prod_{i \\not = j}{x_i - x_j}}$\u8fd9\u4e2a\u4e1c\u897f\uff0c\u4e0a\u9762\u662f\u4e2a\u5e38\u6570\uff0c\u90a3\u4e48\u53ea\u8003\u8651\u4e0b\u9762\u3002\u5982\u679c\u6211\u4eec\u8bbe\u591a\u9879\u5f0f$g(x)=\\prod_{i=1}^n (x-x_i)$\uff0c\u90a3\u4e48\u4e0b\u9762\u90a3\u4e2a\u4e1c\u897f\u5c31\u662f${g(x_i)\\over (x-x_i)}$\n\n\u8fd9\u5206\u5b50\u5206\u6bcd\u5168\u4e3a$0$\u6211\u600e\u4e48\u6c42\u554a\u2026\u2026\n\n\u6839\u636e~~\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u5565\u7684~~\u6d1b\u5fc5\u8fbe\u6cd5\u5219\uff0c\u5982\u679c\n\n$$\\lim_{x\\to a}f(x)=0,\\lim_{x\\to a}g(x)=0$$\n\n\u5219\u6709\n\n$$\\lim_{x\\to a}{f(x)\\over g(x)}=\\lim_{x\\to a}{f'(x)\\over g'(x)}$$\n\n\u90a3\u4e48\u6211\u4eec\u4ee3\u5165\u4e4b\u540e\u53ef\u4ee5\u53d1\u73b0${g(x_i)\\over (x-x_i)}=g'(x_i)$\n\n\u5148\u5206\u6cbb$NTT$\u7b97\u51fa$g$\uff0c\u7136\u540e\u591a\u70b9\u6c42\u503c\u628a\u6bcf\u4e2a\u70b9\u5904\u7684\u503c\u7b97\u51fa\u6765\u5c31\u597d\u4e86\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8003\u8651\u5206\u6cbb\uff0c\u8bbe$f_{l,r}$\u8868\u793a$(x_l,y_l),(x_r,y_r)$\u8fd9\u4e9b\u70b9\u7b97\u51fa\u6765\u7684\u7b54\u6848\uff0c\u5219\u6709\n\n$$\\begin{aligned}f_{l,r}&=\\sum_{i = l}^{r}{ y_i\\over g'(x_i)} \\prod_{j=l,i \\not = j}^r(x - x_j)\\\\&=\\prod_{j=mid+1}^r(x - x_j)\\sum_{i = l}^{mid}{ y_i\\over g'(x_i)} \\prod_{j=l,i \\not = j}^{mid}(x - x_j)+\\prod_{j=l}^{mid}(x - x_j)\\sum_{i = mid+1}^{r}{ y_i\\over g'(x_i)} \\prod_{j=mid+1,i \\not = j}^{r}(x - x_j)\\\\&=\\prod_{j=mid+1}^r(x - x_j)f_{l,mid}+\\prod_{j=l}^{mid}(x - x_j)f_{mid+1,r}\\\\\\end{aligned}$$\n\n\u7136\u540e\u6ca1\u6709\u7136\u540e\u4e86\n\u590d\u6742\u5ea6\u4e3a$O(n\\log^2n)$\n\n```cpp\n//minamoto\n#include<bits/stdc++.h>\n#define R register\n#define fp(i,a,b) for(R int i=(a),I=(b)+1;i<I;++i)\n#define fd(i,a,b) for(R int i=(a),I=(b)-1;i>I;--i)\n#define go(u) for(int i=head[u],v=e[i].v;i;i=e[i].nx,v=e[i].v)\nusing namespace std;\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline char getc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}\nint read(){\n    R int res,f=1;R char ch;\n    while((ch=getc())>'9'||ch<'0')(ch=='-')&&(f=-1);\n    for(res=ch-'0';(ch=getc())>='0'&&ch<='9';res=res*10+ch-'0');\n    return res*f;\n}\nchar sr[1<<21],z[20];int C=-1,Z=0;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\nvoid print(R int x){\n    if(C>1<<20)Ot();if(x<0)sr[++C]='-',x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]=' ';\n}\nconst int N=(1<<18)+5,P=998244353;\ninline int add(R int x,R int y){return x+y>=P?x+y-P:x+y;}\ninline int dec(R int x,R int y){return x-y<0?x-y+P:x-y;}\ninline int mul(R int x,R int y){return 1ll*x*y-1ll*x*y/P*P;}\nint ksm(R int x,R int y){\n\tR int res=1;\n\tfor(;y;y>>=1,x=mul(x,x))(y&1)?res=mul(res,x):0;\n\treturn res;\n}\nint r[19][N],w[2][N],lg[N],inv[19];\nvoid Pre(){\n\tfp(d,1,18){\n\t\tfp(i,1,(1<<d)-1)r[d][i]=(r[d][i>>1]>>1)|((i&1)<<(d-1));\n\t\tlg[1<<d]=d,inv[d]=ksm(1<<d,P-2);\n\t}\n\tfor(R int t=(P-1)>>1,i=1,x,y;i<262144;i<<=1,t>>=1){\n\t\tx=ksm(3,t),y=ksm(332748118,t),w[0][i]=w[1][i]=1;\n\t\tfp(k,1,i-1)\n\t\t\tw[1][k+i]=mul(w[1][k+i-1],x),\n\t\t\tw[0][k+i]=mul(w[0][k+i-1],y);\n\t}\n}\nint lim,d,n,m;\ninline void init(R int len){lim=1,d=0;while(lim<len)lim<<=1,++d;}\nvoid NTT(int *A,int ty){\n\tfp(i,0,lim-1)if(i<r[d][i])swap(A[i],A[r[d][i]]);\n\tfor(R int mid=1;mid<lim;mid<<=1)\n\t\tfor(R int j=0,t;j<lim;j+=(mid<<1))\n\t\t\tfp(k,0,mid-1)\n\t\t\t\tA[j+k+mid]=dec(A[j+k],t=mul(w[ty][mid+k],A[j+k+mid])),\n\t\t\t\tA[j+k]=add(A[j+k],t);\n\tif(!ty)fp(i,0,lim-1)A[i]=mul(A[i],inv[d]);\n}\nvoid Inv(int *a,int *b,int len){\n\tif(len==1)return b[0]=ksm(a[0],P-2),void();\n\tInv(a,b,len>>1),lim=(len<<1),d=lg[lim];\n\tstatic int A[N],B[N];\n\tfp(i,0,len-1)A[i]=a[i],B[i]=b[i];fp(i,len,lim-1)A[i]=B[i]=0;\n\tNTT(A,1),NTT(B,1);\n\tfp(i,0,lim-1)A[i]=mul(A[i],mul(B[i],B[i]));\n\tNTT(A,0);\n\tfp(i,0,len-1)b[i]=dec(add(b[i],b[i]),A[i]);\n\tfp(i,len,lim-1)b[i]=0;\n}\nstruct node{\n\tnode *lc,*rc;vector<int>vec;int deg;\n\tvoid Mod(const int *a,int *r,int n){\n\t\tstatic int A[N],B[N],D[N];\n\t\tint len=1;while(len<=n-deg)len<<=1;\n\t\tfp(i,0,n)A[i]=a[n-i];fp(i,0,deg)B[i]=vec[deg-i];\n\t\tfp(i,n-deg+1,len-1)B[i]=0;\n\t\tInv(B,D,len);\n\t\tlim=(len<<1),d=lg[lim];\n\t\tfp(i,n-deg+1,lim-1)A[i]=D[i]=0;\n\t\tNTT(A,1),NTT(D,1);\n\t\tfp(i,0,lim-1)A[i]=mul(A[i],D[i]);\n\t\tNTT(A,0);\n\t\treverse(A,A+n-deg+1);\n\t\tinit(n+1);\n\t\tfp(i,n-deg+1,lim-1)A[i]=0;\n\t\tfp(i,0,deg)B[i]=vec[i];fp(i,deg+1,lim-1)B[i]=0;\n\t\tNTT(A,1),NTT(B,1);\n\t\tfp(i,0,lim-1)A[i]=mul(A[i],B[i]);\n\t\tNTT(A,0);\n\t\tfp(i,0,deg-1)r[i]=dec(a[i],A[i]);\n\t}\n    void Mul(){\n        static int A[N],B[N];deg=lc->deg+rc->deg,vec.resize(deg+1),init(deg+1);\n        fp(i,0,lc->deg)A[i]=lc->vec[i];fp(i,lc->deg+1,lim-1)A[i]=0;\n        fp(i,0,rc->deg)B[i]=rc->vec[i];fp(i,rc->deg+1,lim-1)B[i]=0;\n        NTT(A,1),NTT(B,1);\n        fp(i,0,lim-1)A[i]=mul(A[i],B[i]);\n        NTT(A,0);\n        fp(i,0,deg)vec[i]=A[i];\n    }\n}pool[N],*rt;\nstruct QAQ{\n\tQAQ *lc,*rc;vector<int>vec;int l,r;\n\tvoid Mul(node* p){\n\t\tstatic int A[N],B[N],C[N],D[N];\n\t\tint mid=(l+r)>>1;init(r-l+1+1);\n\t\tfp(i,0,mid-l+1)A[i]=lc->vec[i],C[i]=p->lc->vec[i];\n\t\tfp(i,mid-l+2,lim-1)A[i]=C[i]=0;\n\t\tfp(i,0,r-mid)B[i]=rc->vec[i],D[i]=p->rc->vec[i];\n\t\tfp(i,r-mid+1,lim-1)B[i]=D[i]=0;\n\t\tNTT(A,1),NTT(B,1),NTT(C,1),NTT(D,1);\n\t\tfp(i,0,lim-1)A[i]=add(mul(A[i],D[i]),mul(B[i],C[i]));\n\t\tNTT(A,0);vec.resize(r-l+2);\n\t\tfp(i,0,r-l+1)vec[i]=A[i];\n\t}\n}o[N],*qwq;\nint a[N],tot,cnt;\ninline node* newnode(){return &pool[tot++];}\ninline QAQ* newQAQ(){return &o[cnt++];}\nvoid solve(node* &p,int l,int r){\n\tp=newnode();\n\tif(l==r)return p->deg=1,p->vec.resize(2),p->vec[0]=P-a[l],p->vec[1]=1,void();\n\tint mid=(l+r)>>1;\n\tsolve(p->lc,l,mid),solve(p->rc,mid+1,r);\n\tp->Mul();\n}\nint b[25],f[N];\nvoid calc(node* p,int l,int r,const int *A){\n\tif(r-l<=512){\n\t\tfp(i,l,r){\n\t\t\tint x=a[i],c1,c2,c3,c4,now=A[r-l];\n\t\t\tb[0]=1;fp(j,1,16)b[j]=mul(b[j-1],x);\n\t\t\tfor(R int j=r-l-1;j-15>=0;j-=16){\n\t\t\t\tc1=(1ll*now*b[16]+1ll*A[j]*b[15]+1ll*A[j-1]*b[14]+1ll*A[j-2]*b[13])%P,\n\t\t\t\tc2=(1ll*A[j-3]*b[12]+1ll*A[j-4]*b[11]+1ll*A[j-5]*b[10]+1ll*A[j-6]*b[9])%P,\n\t\t\t\tc3=(1ll*A[j-7]*b[8]+1ll*A[j-8]*b[7]+1ll*A[j-9]*b[6]+1ll*A[j-10]*b[5])%P,\n\t\t\t\tc4=(1ll*A[j-11]*b[4]+1ll*A[j-12]*b[3]+1ll*A[j-13]*b[2]+1ll*A[j-14]*b[1])%P,\n\t\t\t\tnow=(0ll+c1+c2+c3+c4+A[j-15])%P;\n\t\t\t}\n\t\t\tfd(j,(r-l)%16-1,0)now=(1ll*now*x+A[j])%P;\n\t\t\tf[i]=now;\n\t\t}\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1,b[p->deg+1];\n\tp->lc->Mod(A,b,p->deg-1),calc(p->lc,l,mid,b);\n\tp->rc->Mod(A,b,p->deg-1),calc(p->rc,mid+1,r,b);\n}\nint x[N],y[N],A[N];\nvoid loli(QAQ* &qwq,node *p,int l,int r){\n\tqwq=newQAQ(),qwq->l=l,qwq->r=r;\n\tif(l==r)return qwq->vec.resize(2),qwq->vec[0]=mul(y[l],ksm(f[l],P-2)),qwq->vec[1]=0,void();\n\tint mid=(l+r)>>1;\n\tloli(qwq->lc,p->lc,l,mid),loli(qwq->rc,p->rc,mid+1,r);\n\tqwq->Mul(p);\n}\nint main(){\n//\tfreopen(\"testdata.in\",\"r\",stdin);\n\tn=read(),Pre();\n\tfp(i,1,n)x[i]=a[i]=read(),y[i]=read();\n\tsolve(rt,1,n);\n\tfp(i,1,n)A[i-1]=mul(rt->vec[i],i);A[n]=0;\n\tcalc(rt,1,n,A);\n\tloli(qwq,rt,1,n);\n\tfp(i,0,n-1)print(qwq->vec[i]);\n\treturn Ot(),0;\n}\n```",
        "postTime": 1553818446,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5158 \u3010\u3010\u6a21\u677f\u3011\u591a\u9879\u5f0f\u5feb\u901f\u63d2\u503c\u3011"
    },
    {
        "content": "[$\\text{Link}$](https://www.luogu.com.cn/problem/P5158)\n## \u9898\u610f\n\u7ed9\u51fa $n-1$ \u591a\u9879\u5f0f $F$ \u7ecf\u8fc7\u7684 $n$ \u4e2a\u70b9 $(x_i,y_i)$\uff0c\u6c42\u51fa\u8fd9\u4e2a\u591a\u9879\u5f0f $F$\u3002\n\n$1\\le n\\le10^5$\n## \u601d\u8def\n\uff08\u4ee5\u4e0b\u9ed8\u8ba4 $mid=\\lfloor\\frac {l+r} 2\\rfloor$\uff09\n\n\u5bf9\u4e8e $30\\%$ \u7684\u6570\u636e\uff0c$n\\le 5\\times 10^3$\uff0c\u53ef\u4ee5\u4f7f\u7528\u62c9\u683c\u6717\u65e5\u63d2\u503c\u6cd5 $O(n^2)$ \u89e3\u51b3\u3002\n\n\u8003\u8651\u56de\u987e\u62c9\u683c\u6717\u65e5\u63d2\u503c\u7684\u5f0f\u5b50\uff1a\n$$F(x)=\\sum_{i=1}^n y_i\\prod_{i\\ne j}\\dfrac{x-x_j}{x_i-x_j}$$\n\n\u5c06\u540e\u9762\u7684\u5206\u6bcd\u63d0\u5230\u524d\u9762\uff1a\n$$F(x)=\\sum_{i=1}^n \\dfrac{y_i}{\\prod_{i\\ne j}{x_i-x_j}}\\prod_{i\\ne j}{(x-x_j)}$$\n\n\u73b0\u5728\u770b $\\displaystyle\\prod_{i\\ne j}({x_i-x_j})$ \u8fd9\u4e00\u90e8\u5206\uff0c\u8bbe $\\delta(x)=\\displaystyle\\prod_{i=1}^n(x-x_i)$\uff0c\u6545\u5176\u4e3a\n$$\\lim_{x\\to x_i}\\dfrac{\\delta(x)}{x-x_i}$$\n\u6d1b\u5fc5\u8fbe\u6cd5\u5219\uff1a$\\displaystyle\\lim_{x\\to \\alpha}f(x)=g(x)=0,\\lim_{x\\to\\alpha}\\dfrac{f(x)}{g(x)}=\\lim_{x\\to\\alpha}\\dfrac{f'(x)}{g'(x)}$\n\n$$\\lim_{x\\to x_i}\\dfrac{\\delta(x)}{x-x_i}=\\lim_{x\\to x_i}\\dfrac{\\delta'(x)}{x^01-0}=\\lim_{x\\to x_i}\\delta'(x)=\\delta'(x_i)$$\n\n$$F(x)=\\sum_{i=1}^n \\dfrac{y_i}{\\delta'(x_i)}\\prod_{i\\ne j}{(x-x_j)}$$\n\n$\\delta$ \u662f\u4e00\u4e2a $n$ \u6b21\u591a\u9879\u5f0f\uff0c\u53ef\u4ee5 $O(n\\log^2 n)$ \u5206\u6cbb $\\text{NTT}$ \u7b97\u51fa\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u5bf9 $\\delta'(x_i)$ $O(n\\log^2n)$ \u591a\u70b9\u6c42\u503c\u6c42\u51fa\u6765\uff0c\u4e0d\u4f1a\u591a\u70b9\u6c42\u503c\u53ef\u4ee5\u770b[\u8fd9\u91cc](https://www.luogu.com.cn/blog/cyffff/solution-p5050)\u3002\n\n\u8bbe $G_{l,r}(x)=\\prod_{i=l}^r(x-x_i)$\uff1b$H_{l,r}(x)$ \u4e3a $(x_l,y_l),(x_{l+1}y_{l+1}),\\cdot\\cdot\\cdot (x_r,y_r)$ \u63d2\u51fa\u6765\u7684\u591a\u9879\u5f0f\uff0c\u5373 $\\sum_{i=l}^r \\dfrac{y_i}{\\delta'(x_i)}\\prod_{i\\ne j}^{l\\le j\\le r}{(x-x_j)}$\u3002\n\n$$\\begin{aligned}\nH_{l,r}(x)\n&=\\sum_{i=l}^{mid}\\dfrac{y_i}{\\delta'(x_i)}\\left(\\prod_{i\\ne j,l\\le j\\le mid}^{}(x-x_j)\\right)\\left(\\prod_{mid< j\\le r}^{}(x-x_j)\\right)\\\\\n&+\\sum_{i=mid+1}^{r}\\dfrac{y_i}{\\delta'(x_i)}\\left(\\prod_{i\\ne j,mid< j\\le r}^{}(x-x_j)\\right)\\left(\\prod_{l\\le j\\le mid}(x-x_j)\\right)\\\\\n&=H_{l,mid}(x)\\cdot G_{mid+1,r}(x)+H_{mid+1,r}(x)\\cdot G_{l,mid}(x)\n\\end{aligned}$$\n\n\u6ce8\u610f\u5982\u679c\u7528\u7684\u662f\u65b0\u591a\u70b9\u6c42\u503c\uff0c\u63d2\u5b8c\u8fd8\u5f97\u628a\u5f97\u5230\u7684\u591a\u9879\u5f0f\u7ffb\u8f6c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $T(n)=2T(\\frac n 2)+O(n\\log n)=O(n\\log^2 n)$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nnamespace IO{//by cyffff\n\t\n}\nconst int mod=998244353,N=262145+10;\nnamespace Poly{\n\tint a[N],b[N],c[N],d[N],e[N],g[N],f2[N],rev[N],p[N],ans[N],qq[N],lim;\n\tunsigned ll s[N];\n\tinline int qpow(int x,int y){\n\t\tint res=1;\n\t\twhile(y){\n\t\t\tif(y&1) res=1ll*res*x%mod;\n\t\t\tx=1ll*x*x%mod;\n\t\t\ty>>=1;\n\t\t}\n\t\treturn res;\n\t}\n\tinline void init(int mxn){\n\t\tint l=0;\n\t\tlim=1;\n\t\twhile(lim<mxn)\n\t\t\tlim<<=1,l++;\n\t\tfor(int i=1;i<lim;i++)\n\t\t\trev[i]=(rev[i>>1]>>1)|((i&1)<<(l-1));\n\t\tint xx=qpow(3,mod>>l);\n\t\tp[lim>>1]=1;\n\t\tfor(int i=lim/2+1;i<lim;i++)\n\t\t\tp[i]=1ll*p[i-1]*xx%mod;\n\t\tfor(int i=lim/2-1;i>0;i--)\n\t\t\tp[i]=p[i<<1];\n\t}\n\tinline int getL(int mxn){\n\t\treturn 1<<32-__builtin_clz(mxn);\n\t}\n\tinline void DFT(int *a,int len){\n\t\tint x=__builtin_ctz(lim/len);\n\t\tfor(int i=0;i<len;i++)\n\t\t\ts[i]=a[rev[i]>>x];\n\t\tfor(int i=1;i!=len;i<<=1){\n\t\t\tint dg=i<<1;\n\t\t\tfor(int j=0;j!=len;j+=dg){\n\t\t\t\tfor(int k=0;k<i;k++){\n\t\t\t\t\tint t1=s[i|j|k]*p[i|k]%mod;\n\t\t\t\t\ts[i|j|k]=s[j|k]+mod-t1;\n\t\t\t\t\ts[j|k]+=t1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<len;i++)\n\t\t\ta[i]=s[i]%mod;\n\t}\n\tinline void IDFT(int *a,int len){\n\t\treverse(a+1,a+len);\n\t\tDFT(a,len);\n\t\tfor(int i=0;i<len;i++)\n\t\t\ta[i]=1ll*a[i]*(mod-mod/len)%mod;\n\t}\n\tinline void Inv(int n,int *a,int *b){\n\t\tqq[0]=qpow(a[0],mod-2);\n\t\tmemset(c,0,sizeof(c));\n\t\tmemset(d,0,sizeof(d));\n\t\tfor(int dg=1;dg<n;dg<<=1){\n\t\t\tfor(int i=0;i<(dg<<1)&&i<n;i++)\n\t\t\t\tc[i]=a[i];\n\t\t\tfor(int i=0;i<dg;i++)\n\t\t\t\td[i]=qq[i];\n\t\t\tDFT(c,dg<<1),DFT(d,dg<<1);\n\t\t\tfor(int i=0;i<(dg<<1);i++)\n\t\t\t\tc[i]=1ll*c[i]*d[i]%mod;\n\t\t\tIDFT(c,dg<<1);\n\t\t\tfor(int i=0;i<dg;i++)\n\t\t\t\tc[i]=0;\n\t\t\tDFT(c,dg<<1);\n\t\t\tfor(int i=0;i<(dg<<1);i++)\n\t\t\t\tc[i]=1ll*c[i]*d[i]%mod;\n\t\t\tIDFT(c,dg<<1);\n\t\t\tfor(int i=dg;i<(dg<<1);i++)\n\t\t\t\tqq[i]=1ll*c[i]*(mod-1)%mod;\n\t\t}\n\t\tfor(int i=0;i<n;i++)\n\t\t\tb[i]=qq[i];\n\t}\n\tinline void mul(int *a,int *b,int *s,int n,int m){\n\t\tint len=getL(n+m-1);\n\t\tstatic int c[N],d[N],e[N];\n\t\tmemset(c,0,len<<2);\n\t\tmemset(d,0,len<<2);\n\t\tfor(int i=0;i<n;i++)\n\t\t\tc[i]=a[i];\n\t\tfor(int i=0;i<m;i++)\n\t\t\td[i]=b[i];\n\t\tDFT(c,len),DFT(d,len);\n\t\tfor(int i=0;i<len;i++)\n\t\t\tc[i]=1ll*c[i]*d[i]%mod;\n\t\tIDFT(c,len);\n\t\tfor(int i=0;i<n+m-1;i++)\n\t\t\ts[i]=c[i];\n\t}\n\tinline void mul2(int *a,int *b,int *s,int n,int m){\n\t\tint len=getL(n);\n\t\tstatic int c[N],d[N],e[N];\n\t\tmemset(c,0,len<<2);\n\t\tmemset(d,0,len<<2);\n\t\tfor(int i=0;i<n;i++)\n\t\t\tc[i]=a[i];\n\t\tfor(int i=0;i<m;i++)\n\t\t\td[i]=b[m-i-1];\n\t\tDFT(c,len),DFT(d,len);\n\t\tfor(int i=0;i<len;i++)\n\t\t\te[i]=1ll*c[i]*d[i]%mod;\n\t\tIDFT(e,len);\n\t\tfor(int i=0;i<n-m+1;i++)\n\t\t\ts[i]=e[m-1+i];\n\t}\n\tinline void Der(int *a,int *b,int n){\n\t\tfor(int i=1;i<n;i++)\n\t\t\tb[i-1]=1ll*i*a[i]%mod;\n\t\tb[n-1]=0;\n\t}\n\tint n,m,f[N],q[N],*t[N],*t2[N],buf[N<<5],*now=buf,sz[N],x[N],y[N];\n\tinline void build(int l,int r,int rt){\n\t\tt[rt]=now,now+=r-l+2,t2[rt]=now,now+=r-l+2;\n\t\tif(l==r){\n\t\t\tt[rt][0]=1;\n\t\t\tt[rt][1]=x[l]?mod-x[l]:0;\n\t\t\treturn ;\n\t\t}\n\t\tint mid=l+r>>1,ls=rt<<1,rs=rt<<1|1;\n\t\tbuild(l,mid,ls),build(mid+1,r,rs);\n\t\tmul(t[ls],t[rs],t[rt],mid-l+2,r-mid+1);\n\t}\n\tinline void solve(int l,int r,int rt,int *a){\n\t\tif(l==r){\n\t\t\ta[l]=t2[rt][0];\n\t\t\treturn ;\n\t\t}\n\t\tint mid=l+r>>1,ls=rt<<1,rs=rt<<1|1;\n\t\tmul2(t2[rt],t[rs],t2[ls],r-l+1,r-mid+1);\n\t\tsolve(l,mid,ls,a);\n\t\tmul2(t2[rt],t[ls],t2[rs],r-l+1,mid-l+2);\n\t\tsolve(mid+1,r,rs,a);\n\t}\n\tint tmp1[N],tmp2[N],tmp3[N],tmp4[N],answ[N],*stein[N];\n\tinline void interpolation(int rt,int l,int r){\n\t\tstein[rt]=new int[r-l+1];\n\t\tif(l==r){\n\t\t\tstein[rt][0]=answ[l];\n\t\t\treturn ;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tinterpolation(rt<<1,l,mid),interpolation(rt<<1|1,mid+1,r);\n\t\tint len=getL(r-l+1);\n\t\tfor(int i=0;i<mid-l+1;i++)\n\t\t\ttmp3[i]=stein[rt<<1][i];\n\t\tfor(int i=0;i<r-mid;i++)\n\t\t\ttmp4[i]=stein[rt<<1|1][i];\n\t\tmul(t[rt<<1|1],tmp3,tmp3,r-mid+1,mid-l+1);\n\t\tmul(t[rt<<1],tmp4,tmp4,mid-l+1+1,r-mid);\n\t\tfor(int i=0;i<=r-l;i++)\n\t\t\tstein[rt][i]=(tmp3[i]+tmp4[i])%mod;\n\t}\n\tinline void Interpolation(int *x,int *y,int *ans,int n){\n\t\tint len=getL(n);\n\t\tbuild(1,n,1);\n\t\tfor(int i=0;i<=n;i++)\n\t\t\ttmp1[i]=t[1][i];\n\t\treverse(tmp1,tmp1+n+1);\n\t\tDer(tmp1,tmp1,n+1);\n\t\tInv(n+1,t[1],tmp2);\n\t\tmul2(tmp1,tmp2,t2[1],n*2-1,n);\n\t\tsolve(1,n,1,answ);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tansw[i]=1ll*y[i]*qpow(answ[i],mod-2)%mod;\n\t\tinterpolation(1,1,n);\n\t\tfor(int i=0;i<n;i++)\n\t\t\tans[i]=stein[1][n-1-i];\n\t}\n}\nusing namespace Poly;\nint F[N];\nint main(){\n\tn=read()+1;\n\tinit(n<<1);\n\tfor(int i=1;i<=n;i++)\n\t\tx[i]=read(),y[i]=read();\n\tInterpolation(x,y,F,n);\n\tfor(int i=0;i<n;i++)\n\t\twrite(F[i]),putc(' ');\n\tflush();\n\treturn 0;\n}\n```\n\u518d\u89c1 qwq~",
        "postTime": 1626405492,
        "uid": 365127,
        "name": "cyffff",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5158\u3010\u3010\u6a21\u677f\u3011\u591a\u9879\u5f0f\u5feb\u901f\u63d2\u503c\u3011"
    },
    {
        "content": "\u4eba\u50bb\u5e38\u6570\u5927.jpg\n\n\u9996\u5148\uff0c\u5bf9\u8fd9\u9053\u9898\u76ee\u62c9\u683c\u6717\u65e5\u63d2\u503c\u662f\u8bef\u5bfc\uff0c\u6211\u4eec\u770b\u600e\u4e48\u4ece\u96f6\u63a8\u67ff\u5b50\u3002\n\n\u6ce8\u610f\u5230\u7b54\u6848\u591a\u9879\u5f0f\u80af\u5b9a\u80fd\u5199\u6210 $n$ \u4e2a\u591a\u9879\u5f0f $f_1(x),f_2(x),\\dots,f_n(x)$ \u4e4b\u548c\uff0c\u5176\u4e2d\u5982\u679c $j\\neq i$\uff0c$f_i(x_j)=0$\uff0c\u5426\u5219 $f_i(x_i)=y_i$\u3002\n\n\u8003\u8651\u600e\u4e48\u6784\u9020\u7b2c $i$ \u4e2a\u591a\u9879\u5f0f\u3002\u663e\u7136\u5b83\u7684\u6839\u5728 $x_j(j\\neq i)$\uff0c\u6240\u4ee5 $\\prod_{j\\neq i}(x-x_j)$ \u5fc5\u987b\u662f $f_i(x)$ \u7684\u4e00\u4e2a\u56e0\u5b50\u3002\u4f46\u662f\u8fd9\u6837\u5df2\u7ecf\u5230 $x^{n-1}$ \u4e86\uff0c\u6240\u4ee5\u540e\u9762\u5fc5\u987b\u662f\u4e58\u4e00\u4e2a\u5e38\u6570\u9879\uff0c\u4e0d\u53ef\u80fd\u5728\u52a0\u5165\u6709 $x$ \u7684\u56e0\u5b50\u4e86\u3002\n\n$$k_i\\prod_{j\\neq i}(x_i-x_j)=y_i\\implies k_i=\\frac{y_i}{\\prod_{j\\neq i}(x_i-x_j)}$$\n\n\u7b54\u6848\u4e3a $\\sum k_i\\prod(x-x_j)$ \u8fd9\u4e2a\u591a\u9879\u5f0f\u3002\n\n\u90a3\u4e48\uff0c\u5982\u679c\u8ba1\u7b97\u51fa\u6765 $k_i$ \u4e86\uff0c\u90a3\u5c31\u53ef\u4ee5\u7528\u5206\u6cbb\u8ba1\u7b97\u7b54\u6848\u3002\u5b9a\u4e49 $v(l,r)$\uff1a\n\n$$v(l,r)=\\sum_{i=l}^{r-1}k_i\\prod_{j=l,i\\neq j}^{r-1}(x-x_j)$$\n\n\u518d\u5b9a\u4e49 $p(l,r)$\uff08\u8fd9\u4e2a\u9700\u8981\u9884\u5904\u7406\uff09\uff1a\n\n$$p(l,r)=\\prod_{i=l}^{r-1}(x-x_i)$$\n\n\u6211\u4eec\u6709 $v(l,r)=v(l,\\lfloor\\frac{l+r}2\\rfloor)p(\\lfloor\\frac{l+r}2\\rfloor,r)+p(l,\\lfloor\\frac{l+r}2\\rfloor)v(\\lfloor\\frac{l+r}2\\rfloor,r)$\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a $i$ \u8981\u4e48\u662f\u5728\u5de6\u534a\u90e8\u5206\u8981\u4e48\u5728\u53f3\u534a\u90e8\u5206\uff0c\u5982\u679c\u5728\u5de6\u534a\u4ec5\u4ec5\u9700\u8981\u5bf9\u6240\u6709\u5728\u548c\u91cc\u9762\u4e58\u4e0a\u53f3\u534a\u7684 $p$\uff0c\u5bf9\u53f3\u534a\u76f8\u4f3c\u3002\n\n\u5230\u8fd9\u91cc\u53d1\u73b0 $k_i$ \u6709\u70b9\u9ebb\u70e6\u6765\u8ba1\u7b97\uff0c\u56e0\u4e3a $\\prod_{j\\neq i}(x_i-x_j)$ \u7531\u4e8e\u6709\u4e00\u4e2a $j\\neq i$ \u96be\u5904\u7406\u3002\n\n\u8003\u8651\u6c42\u6781\u9650\uff1a\n\n$$\\prod_{j\\neq i}(x_i-x_j)=\\lim_{x\\rightarrow x_i}\\frac{\\prod(x-x_j)}{x-x_i}$$\n\n\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 $f(x)=\\prod(x-x_j)$\u3002\u663e\u7136 $f(x_i)=0$\uff0c\u6240\u4ee5\u4ee5\u4e0a\u67ff\u5b50\u7b49\u4ef7\u4e8e\n\n$$\\prod_{j\\neq i}(x_i-x_j)=\\lim_{x\\rightarrow x_i}\\frac{f(x)-f(x_i)}{x-x_i}$$\n\n\u8fd9\u4e2a\u4e5f\u5c31\u662f\u5bfc\u7684\u4e00\u4e2a\u5b9a\u4e49\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u6709\n\n$$\\prod_{j\\neq i}(x_i-x_j)=f'(x_i)$$\n\n$$k_i=\\frac{y_i}{f'(x_i)}$$\n\n\u5bf9 $f_i$ \u591a\u70b9\u6c42\u503c\u5373\u53ef\u3002\n\n\u8fd9\u9053\u9898\u76ee\u5361\u957f\u771f\u6709\u6bd2\uff0c\u590d\u5236\u4e86\u51e0\u4e2a\u5730\u65b9\u7684\u677f\u5b50\uff08\u4e0d\u8fc7\u6c42\u503c\u63d2\u503c\u8fd8\u662f\u6211\u5199\u7684\n\n\u4e3b\u8981\u662f\u7279\u522b\u611f\u8c22 fjzzq2002 \u7684 AVX \u4f18\u5316 NTT \u4ee3\u7801\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#pragma GCC optimize(\"-Ofast\",\"-funroll-all-loops\",\"-ffast-math\")\n#pragma GCC optimize(\"-fno-math-errno\")\n#pragma GCC optimize(\"-funsafe-math-optimizations\")\n#pragma GCC optimize(\"-freciprocal-math\")\n#pragma GCC optimize(\"-fno-trapping-math\")\n#pragma GCC optimize(\"-ffinite-math-only\")\n#pragma GCC optimize(\"-fno-stack-protector\")\n#pragma GCC target (\"avx2\",\"sse4.2\",\"fma\")\n#include <immintrin.h>\n// writer: w33z8kqrqk8zzzx33\n#include <bits/stdc++.h>\nusing namespace std;\n\n// https://judge.yosupo.jp/submission/5253\n\nstruct IO {\n  static constexpr size_t buf_size = 1 << 18;\n  char buf_in[buf_size], buf_out[buf_size];\n  size_t pt_in = 0, pt_out = 0, tail_in = 0;\n  char strs[10000 * 4];\n  inline size_t num_digits(long long x) {\n    if (x >= (long long)1e9) {\n      if (x >= (long long)1e18) return 19;\n      if (x >= (long long)1e17) return 18;\n      if (x >= (long long)1e16) return 17;\n      if (x >= (long long)1e15) return 16;\n      if (x >= (long long)1e14) return 15;\n      if (x >= (long long)1e13) return 14;\n      if (x >= (long long)1e12) return 13;\n      if (x >= (long long)1e11) return 12;\n      if (x >= (long long)1e10) return 11;\n      return 10;\n    } else {\n      if (x >= (long long)1e8) return 9;\n      if (x >= (long long)1e7) return 8;\n      if (x >= (long long)1e6) return 7;\n      if (x >= (long long)1e5) return 6;\n      if (x >= (long long)1e4) return 5;\n      if (x >= (long long)1e3) return 4;\n      if (x >= (long long)1e2) return 3;\n      if (x >= (long long)1e1) return 2;\n      return 1;\n    }\n  }\n  IO() {\n    load();\n    for (int i = 0; i < 10000; ++i) {\n      int j = i;\n      for (int t = 3; t >= 0; --t) {\n        strs[i * 4 + t] = j % 10 + '0';\n        j /= 10;\n      }\n    }\n  }\n  ~IO() { flush(); }\n  inline void load() {\n    memcpy(buf_in, buf_in + pt_in, tail_in - pt_in);\n    size_t width = tail_in - pt_in;\n    tail_in = width + fread(buf_in + width, 1, buf_size - width, stdin);\n    pt_in = 0;\n  }\n  inline void flush() {\n    fwrite(buf_out, 1, pt_out, stdout);\n    pt_out = 0;\n  }\n  inline void read(char& c) { c = buf_in[pt_in++]; }\n  template <class T>\n  inline void read(T& x) {\n    if (pt_in + 32 > tail_in) load();\n    char c;\n    do {\n      read(c);\n    } while (c < '0');\n    bool minus = 0;\n    if (c == '-') {\n      minus = 1;\n      read(c);\n    }\n    x = 0;\n    while (c >= '0') {\n      x = x * 10 + (c & 15);\n      read(c);\n    }\n    if (minus) x = -x;\n  }\n  inline void write(char c) { buf_out[pt_out++] = c; }\n  template <class T>\n  inline void write(T x) {\n    if (pt_out > buf_size - 32) flush();\n    if (x < 0) {\n      write('-');\n      x = -x;\n    }\n    size_t digits = num_digits(x);\n    int i;\n    for (i = pt_out + digits - 4; i > (int)pt_out; i -= 4) {\n      memcpy(buf_out + i, strs + (x % 10000) * 4, 4);\n      x /= 10000;\n    }\n    memcpy(buf_out + pt_out, strs + x * 4 + (pt_out - i), 4 + i - pt_out);\n    pt_out += digits;\n  }\n  inline void write(const char* s) {\n    if (pt_out > buf_size - 32) flush();\n    for (int i = 0; s[i] != 0; ++i) write(s[i]);\n  }\n  template <class T>\n  inline void writeln(T x) {\n    write(x);\n    write('\\n');\n  }\n} io;\n\n#define iter(i, a, b) for(int i=(a); i<(b); i++)\n#define rep(i, a) iter(i, 0, (int)(a))\n#define rep1(i, a) iter(i, 1, (int)(a)+1)\n#define fi first\n#define se second\n#define pb push_back\n#define intsize (sizeof(int))\n \n#define ll long long\n#define pii pair<int, int>\n//#define int ll\nconst int MOD = 998244353;\n\ntypedef unsigned us;\ntypedef unsigned long long ull;\n\nstatic char buf[450 << 20];\nvoid* operator new(size_t s) {\n\tstatic size_t i = sizeof buf;\n\tassert(s < i);\n\treturn (void*)&buf[i -= s];\n}\nvoid operator delete(void*) {}\n\ntemplate<class T> struct ptr {\n\tunsigned ind;\n\tptr(T* p = 0) : ind(p ? unsigned((char*)p - buf) : 0) {\n\t\tassert(ind < sizeof buf);\n\t}\n\tT& operator*() const { return *(T*)(buf + ind); }\n\tT* get() const { return &**this; }\n\tT& operator[](int a) const { return (&**this)[a]; }\n\texplicit operator bool() const { return ind; }\n};\n\nnamespace poly {\n\tconst int MOD = 998244353;\n\tconst int IMAG = 86583718;\n\tconst int NTTG = 3;\n\t\n\tint qpow(int b, int e) {\n\t\tint re=1;\n\t\twhile(e){\n\t\t\tif(e&1)re=1ll*re*b%MOD;\n\t\t\tb=1ll*b*b%MOD;e>>=1;\n\t\t}\n\t\treturn re;\n\t}\n\t\n// https://www.luogu.com.cn/record/32153077\n// zzq orz\n#define SZ 524320\nll qp(ll a,ll b)\n{\n\tll ans=1;\n\twhile(b)\n\t{\n\t\tif(b&1) ans=ans*a%MOD;\n\t\ta=a*a%MOD; b>>=1;\n\t}\n\treturn ans;\n}\nint getK(int n)\n{int s=1; while(s<n) s<<=1; return s;}\nus pool[SZ*4] __attribute__ ((aligned(64))),*ptr=pool;\nus *p0[SZ],*p1[SZ],*q0[SZ],*q1[SZ];\n__attribute__((always_inline)) void bit_flip(us*p,int t)\n{\n\tfor(int i=0,j=0;i<t;++i)\n\t{\n\t\tif(i>j) swap(p[i],p[j]);\n\t\tfor(int l=t>>1;(j^=l)<l;l>>=1);\n\t}\n}\nvoid prep(int n)\n{\n\tstatic int t=1;\n\tfor(;t<n;t<<=1)\n\t{\n\t\tint g=qp(3,(MOD-1)/(t*2));\n\t\tus*p,*q;\n\t\tp=p0[t]=ptr; ptr+=max(t,16); p[0]=1;\n\t\tfor(int m=1;m<t;++m)\n\t\t\tp[m]=p[m-1]*(ull)g%us(MOD);\n\t\tbit_flip(p,t);\n\t\tq=q0[t]=ptr; ptr+=max(t,16);\n\t\tfor(int i=0;i<t;++i)\n\t\t\tq[i]=(ull(p[i])<<32)/MOD;\n\t\tg=qp(g,MOD-2);\n\t\tp=p1[t]=ptr; ptr+=max(t,16); p[0]=1;\n\t\tfor(int m=1;m<t;++m)\n\t\t\tp[m]=p[m-1]*(ull)g%us(MOD);\n\t\tbit_flip(p,t);\n\t\tq=q1[t]=ptr; ptr+=max(t,16);\n\t\tfor(int i=0;i<t;++i)\n\t\t\tq[i]=(ull(p[i])<<32)/MOD;\n\t}\n}\ntypedef unsigned long long ull;\n__attribute__((always_inline)) us my_mul(us a,us b,us c)\n{\n\treturn b*(ull)a-((ull(a)*c)>>32)*ull(998244353);\n}\n__attribute__((always_inline)) __m128i my_mullo_epu32(const __m128i&a, const __m128i& b)\n{\n\treturn _mm_mullo_epi32(a,b);\n\t/*\n\t__m128i a13    = _mm_shuffle_epi32(a, 0xF5);          // (-,a3,-,a1)\n\t__m128i b13    = _mm_shuffle_epi32(b, 0xF5);          // (-,b3,-,b1)\n\t__m128i prod02 = _mm_mul_epu32(a, b);                 // (-,a2*b2,-,a0*b0)\n\t__m128i prod13 = _mm_mul_epu32(a13, b13);             // (-,a3*b3,-,a1*b1)\n\t__m128i prod01 = _mm_unpacklo_epi32(prod02,prod13);   // (-,-,a1*b1,a0*b0) \n\t__m128i prod23 = _mm_unpackhi_epi32(prod02,prod13);   // (-,-,a3*b3,a2*b2) \n\t__m128i prod   = _mm_unpacklo_epi64(prod01,prod23);   // (ab3,ab2,ab1,ab0)\n\treturn prod;\n\t*/\n}\n__attribute__((always_inline)) __m128i my_mulhi_epu32(const __m128i&a, const __m128i& b)\n{\n\t__m128i a13    = _mm_shuffle_epi32(a, 0xF5);          // (-,a3,-,a1)\n\t__m128i b13    = _mm_shuffle_epi32(b, 0xF5);          // (-,b3,-,b1)\n\t__m128i prod02 = _mm_mul_epu32(a, b);                 // (a2*b2,-,a0*b0,-)\n\t__m128i prod13 = _mm_mul_epu32(a13, b13);             // (a3*b3,-,a1*b1,-)\n\t__m128i prod01 = _mm_unpacklo_epi32(prod02,prod13);   // (a1*b1,a0*b0,-,-) \n\t__m128i prod23 = _mm_unpackhi_epi32(prod02,prod13);   // (a3*b3,a2*b2,-,-) \n\t__m128i prod   = _mm_unpackhi_epi64(prod01,prod23);   // (ab3,ab2,ab1,ab0)\n\treturn prod;\n}\nvoid ntt(us* __restrict__ x,int n)\n{\n\tint t=n;\n\tfor(int m=1;m<n;m<<=1)\n\t{\n\t\tt>>=1;\n\t\tus* __restrict__ p=p0[m];\n\t\tus* __restrict__ q=q0[m];\n\t\tif(t==1)\n\t\t{\n\t\t\tus *xa=x,*xb=x+t;\n\t\t\tfor(int i=0;i<m;++i,xa+=t+t,xb+=t+t)\n\t\t\t\tfor(int j=0;j<t;++j)\n\t\t\t\t{\n\t\t\t\t\tus u=xa[j]-(xa[j]>=us(MOD+MOD))*us(MOD+MOD);\n\t\t\t\t\tus v=my_mul(xb[j],p[i],q[i]);\n\t\t\t\t\txa[j]=u+v;\n\t\t\t\t\txb[j]=u-v+us(MOD+MOD);\n\t\t\t\t}\n\t\t}\n\t\telse if(t==2)\n\t\t{\n\t\t\tus *xa=x,*xb=x+t;\n\t\t\tfor(int i=0;i<m;++i,xa+=t+t,xb+=t+t)\n\t\t\t\tfor(int j=0;j<t;++j)\n\t\t\t\t{\n\t\t\t\t\tus u=xa[j]-(xa[j]>=us(MOD+MOD))*us(MOD+MOD);\n\t\t\t\t\tus v=my_mul(xb[j],p[i],q[i]);\n\t\t\t\t\txa[j]=u+v;\n\t\t\t\t\txb[j]=u-v+us(MOD+MOD);\n\t\t\t\t}\n\t\t}\n\t\telse if(t==4)\n\t\t{\n\t\t\tus *xa=x,*xb=x+t;\n\t\t\tfor(int i=0;i<m;++i,xa+=t+t,xb+=t+t)\n\t\t\t{\n\t\t\t\tconst __m128i p4=_mm_set1_epi32(p[i]),\n\t\t\t\tq4=_mm_set1_epi32(q[i]),\n\t\t\t\tmm=_mm_set1_epi32(MOD+MOD),\n\t\t\t\tm0=_mm_set1_epi32(0),\n\t\t\t\tm1=_mm_set1_epi32(MOD);\n\t\t\t\tfor(int j=0;j<t;j+=4)\n\t\t\t\t{\n\t\t\t\t\t__m128i u=_mm_loadu_si128((__m128i*)(xa+j));\n\t\t\t\t\tu=_mm_sub_epi32(u,\n\t\t\t\t\t_mm_and_si128(_mm_or_si128(_mm_cmpgt_epi32(u,mm),\n\t\t\t\t\t_mm_cmpgt_epi32(m0,u)),mm));\n\t\t\t\t\t__m128i v=_mm_loadu_si128((__m128i*)(xb+j));\n\t\t\t\t\tv=_mm_sub_epi32(my_mullo_epu32(v,p4),\n\t\t\t\t\tmy_mullo_epu32(my_mulhi_epu32(v,q4),m1));\n\t\t\t\t\t_mm_storeu_si128((__m128i*)(xa+j),_mm_add_epi32(u,v));\n\t\t\t\t\t_mm_storeu_si128((__m128i*)(xb+j),_mm_add_epi32(_mm_sub_epi32(u,v),mm));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tus *xa=x,*xb=x+t;\n\t\t\tfor(int i=0;i<m;++i,xa+=t+t,xb+=t+t)\n\t\t\t{\n\t\t\t\tconst __m128i p4=_mm_set1_epi32(p[i]),\n\t\t\t\tq4=_mm_set1_epi32(q[i]),\n\t\t\t\tmm=_mm_set1_epi32(MOD+MOD),\n\t\t\t\tm0=_mm_set1_epi32(0),\n\t\t\t\tm1=_mm_set1_epi32(MOD);\n\t\t\t\t//unfold 2x\n\t\t\t\tfor(int j=0;j<t;j+=8)\n\t\t\t\t{\n\t\t\t\t\t__m128i u0=_mm_loadu_si128((__m128i*)(xa+j));\n\t\t\t\t\t__m128i u1=_mm_loadu_si128((__m128i*)(xa+j+4));\n\t\t\t\t\t__m128i v0=_mm_loadu_si128((__m128i*)(xb+j));\n\t\t\t\t\t__m128i v1=_mm_loadu_si128((__m128i*)(xb+j+4));\n\t\t\t\t\tu0=_mm_sub_epi32(u0,\n\t\t\t\t\t_mm_and_si128(_mm_or_si128(_mm_cmpgt_epi32(u0,mm),\n\t\t\t\t\t_mm_cmpgt_epi32(m0,u0)),mm));\n\t\t\t\t\tu1=_mm_sub_epi32(u1,\n\t\t\t\t\t_mm_and_si128(_mm_or_si128(_mm_cmpgt_epi32(u1,mm),\n\t\t\t\t\t_mm_cmpgt_epi32(m0,u1)),mm));\n\t\t\t\t\tv0=_mm_sub_epi32(my_mullo_epu32(v0,p4),\n\t\t\t\t\tmy_mullo_epu32(my_mulhi_epu32(v0,q4),m1));\n\t\t\t\t\tv1=_mm_sub_epi32(my_mullo_epu32(v1,p4),\n\t\t\t\t\tmy_mullo_epu32(my_mulhi_epu32(v1,q4),m1));\n\t\t\t\t\t_mm_storeu_si128((__m128i*)(xa+j),_mm_add_epi32(u0,v0));\n\t\t\t\t\t_mm_storeu_si128((__m128i*)(xa+j+4),_mm_add_epi32(u1,v1));\n\t\t\t\t\t_mm_storeu_si128((__m128i*)(xb+j),\n\t\t\t\t\t_mm_add_epi32(_mm_sub_epi32(u0,v0),mm));\n\t\t\t\t\t_mm_storeu_si128((__m128i*)(xb+j+4),\n\t\t\t\t\t_mm_add_epi32(_mm_sub_epi32(u1,v1),mm));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=0;i<n;++i)\n\t\tx[i]-=(x[i]>=us(MOD+MOD))*us(MOD+MOD),\n\t\tx[i]-=(x[i]>=us(MOD))*us(MOD);\n}\nvoid intt(us* __restrict__ x,int n)\n{\n\tint t=1;\n\tfor(int m=(n>>1);m;m>>=1)\n\t{\n\t\tus* __restrict__ p=p1[m];\n\t\tus* __restrict__ q=q1[m];\n\t\tif(t==1)\n\t\t{\n\t\t\tus *xa=x,*xb=x+t;\n\t\t\tfor(int i=0;i<m;++i,xa+=t+t,xb+=t+t)\n\t\t\t\tfor(int j=0;j<t;++j)\n\t\t\t\t{\n\t\t\t\t\tus u=xa[j],v=xb[j];\n\t\t\t\t\txa[j]=u+v-(u+v>=us(MOD+MOD))*us(MOD+MOD);\n\t\t\t\t\txb[j]=my_mul(u-v+us(MOD+MOD),p[i],q[i]);\n\t\t\t\t}\n\t\t}\n\t\telse if(t==2)\n\t\t{\n\t\t\tus *xa=x,*xb=x+t;\n\t\t\tfor(int i=0;i<m;++i,xa+=t+t,xb+=t+t)\n\t\t\t\tfor(int j=0;j<t;++j)\n\t\t\t\t{\n\t\t\t\t\tus u=xa[j],v=xb[j];\n\t\t\t\t\txa[j]=u+v-(u+v>=us(MOD+MOD))*us(MOD+MOD);\n\t\t\t\t\txb[j]=my_mul(u-v+us(MOD+MOD),p[i],q[i]);\n\t\t\t\t}\n\t\t}\n\t\telse if(t==4)\n\t\t{\n\t\t\tus *xa=x,*xb=x+t;\n\t\t\tfor(int i=0;i<m;++i,xa+=t+t,xb+=t+t)\n\t\t\t{\n\t\t\t\tconst __m128i p4=_mm_set1_epi32(p[i]),\n\t\t\t\tq4=_mm_set1_epi32(q[i]),\n\t\t\t\tmm=_mm_set1_epi32(MOD+MOD),\n\t\t\t\tm0=_mm_set1_epi32(0),\n\t\t\t\tm1=_mm_set1_epi32(MOD);\n\t\t\t\tfor(int j=0;j<t;j+=4)\n\t\t\t\t{\n\t\t\t\t\t__m128i u=_mm_loadu_si128((__m128i*)(xa+j));\n\t\t\t\t\t__m128i v=_mm_loadu_si128((__m128i*)(xb+j));\n\t\t\t\t\t__m128i uv=_mm_add_epi32(u,v);\n\t\t\t\t\t_mm_storeu_si128((__m128i*)(xa+j),_mm_sub_epi32(uv,\n\t\t\t\t\t_mm_and_si128(_mm_or_si128(_mm_cmpgt_epi32(uv,mm),\n\t\t\t\t\t_mm_cmpgt_epi32(m0,uv)),mm)));\n\t\t\t\t\tuv=_mm_add_epi32(_mm_sub_epi32(u,v),mm);\n\t\t\t\t\t_mm_storeu_si128((__m128i*)(xb+j),\n\t\t\t\t\t_mm_sub_epi32(my_mullo_epu32(uv,p4),\n\t\t\t\t\tmy_mullo_epu32(my_mulhi_epu32(uv,q4),m1)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tus *xa=x,*xb=x+t;\n\t\t\tfor(int i=0;i<m;++i,xa+=t+t,xb+=t+t)\n\t\t\t{\n\t\t\t\tconst __m128i p4=_mm_set1_epi32(p[i]),\n\t\t\t\tq4=_mm_set1_epi32(q[i]),\n\t\t\t\tmm=_mm_set1_epi32(MOD+MOD),\n\t\t\t\tm0=_mm_set1_epi32(0),\n\t\t\t\tm1=_mm_set1_epi32(MOD);\n\t\t\t\t//unfold 2x\n\t\t\t\tfor(int j=0;j<t;j+=8)\n\t\t\t\t{\n\t\t\t\t\t__m128i u0=_mm_loadu_si128((__m128i*)(xa+j));\n\t\t\t\t\t__m128i u1=_mm_loadu_si128((__m128i*)(xa+j+4));\n\t\t\t\t\t__m128i v0=_mm_loadu_si128((__m128i*)(xb+j));\n\t\t\t\t\t__m128i v1=_mm_loadu_si128((__m128i*)(xb+j+4));\n\t\t\t\t\t__m128i uv0=_mm_add_epi32(u0,v0);\n\t\t\t\t\t__m128i uv1=_mm_add_epi32(u1,v1);\n\t\t\t\t\t_mm_storeu_si128((__m128i*)(xa+j),_mm_sub_epi32(uv0,\n\t\t\t\t\t_mm_and_si128(_mm_or_si128(_mm_cmpgt_epi32(uv0,mm),\n\t\t\t\t\t_mm_cmpgt_epi32(m0,uv0)),mm)));\n\t\t\t\t\t_mm_storeu_si128((__m128i*)(xa+j+4),_mm_sub_epi32(uv1,\n\t\t\t\t\t_mm_and_si128(_mm_or_si128(_mm_cmpgt_epi32(uv1,mm),\n\t\t\t\t\t_mm_cmpgt_epi32(m0,uv1)),mm)));\n\t\t\t\t\tuv0=_mm_add_epi32(_mm_sub_epi32(u0,v0),mm);\n\t\t\t\t\tuv1=_mm_add_epi32(_mm_sub_epi32(u1,v1),mm);\n\t\t\t\t\t_mm_storeu_si128((__m128i*)(xb+j),\n\t\t\t\t\t_mm_sub_epi32(my_mullo_epu32(uv0,p4),\n\t\t\t\t\tmy_mullo_epu32(my_mulhi_epu32(uv0,q4),m1)));\n\t\t\t\t\t_mm_storeu_si128((__m128i*)(xb+j+4),\n\t\t\t\t\t_mm_sub_epi32(my_mullo_epu32(uv1,p4),\n\t\t\t\t\tmy_mullo_epu32(my_mulhi_epu32(uv1,q4),m1)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tt<<=1;\n\t}\n\tus rn=qp(n,MOD-2);\n\tfor(int i=0;i<n;++i)\n\t\tx[i]=x[i]*(ull)rn%MOD;\n}\n\t\n\tvoid mult(us *a, us as, us *b, us bs, us *o, bool construct, bool clean = 0, us th = 100000000) {\n\t\tus n = as+bs-1;\n\t\tif(n >= 40) {\n    \t\twhile(n - (n & (-n))) n += (n & (-n));\n    \t\tassert(!construct);\n    \t\t//constructrev(n);\n    \t\tntt(a, n); ntt(b, n);\n    \t\trep(i, n) o[i] = 1ll*a[i]*b[i]%MOD;\n    \t\tintt(o, n);\n\t\t} else {\n\t\t    static ll tmp[41];\n\t\t    rep(i, as) rep(j, bs) tmp[i+j] += 1ll * a[i] * b[j];\n\t\t    rep(i, n) {\n\t\t        o[i] = tmp[i] % MOD;\n\t\t        tmp[i] = 0;\n\t\t    }\n\t\t}\n\t\titer(i, th, n) o[i] = 0;\n\t\tif(clean) rep(i, n) a[i] = b[i] = 0;\n\t}\n\n\tvoid cfn(us* a, us as, us *o) {\n\t\tstatic us tmp[524320];\n\t\tif(as == 1) { tmp[0] = a[0]; o[0] = qpow(a[0], MOD - 2); return; }\n\t\tcfn(a, (as+1)/2, o); us le = 0;\n\t\twhile((1 << le) < (as << 1)) le++;\n\t\t//constructrev(1 << le);\n\t\tmemcpy(tmp, a, as*intsize);\n\t\tmemset(tmp+as, 0, ((1<<le)-as)*intsize);\n\t\tntt(tmp, 1<<le); ntt(o, 1<<le);\n\t\trep(i, 1<<le) o[i] = 1ll * (MOD + (2 - 1ll * tmp[i] * o[i]) % MOD) * o[i] % MOD;\n\t\tintt(o, 1<<le);\n\t\tmemset(o+as, 0, ((1<<le)-as)*intsize);\n\t}\n\n\tvoid init(us n) { prep(n); }\n\t\n\tvoid divide(us *a, us as, us *b, us bs, us *q, us *r) {\n\t\tstatic us ar[524320], br[524320], bin[524320];\n\t\tus th = as, re = as-bs+1;\n\t\t//th = re+1;\n\t\trep(i, as) ar[i] = a[as-1-i];\n\t\trep(i, bs) br[i] = b[bs-1-i];\n\t\tcfn(br, th, bin);\n\t\tmult(ar, th, bin, th, q, 0, 1, re);\n\t\treverse(q, q+re);\n\t\tmult(q, re, b, bs, r, 0, 1, bs - 1);\n\t\trep(i, bs - 1) r[i] = (MOD + a[i] - r[i]) % MOD;\n\t}\n\t\n}\n\n#define array MY_FUCKING_ARRAY\n\nstruct array {\n    ptr<us> head; us sz;\n    array() : sz(0) { head = nullptr; }\n    array(us size) : sz(size) { head = new us[size]; }\n    us& operator[](const us idx) { return head[idx]; }\n    us* get() { return head.get(); }\n    const us size() { return sz; }\n};\n\narray pol[524320];\n\n\nnamespace Eval {\n    us points[524320];\n    us answer[524320];\n    \n    void init(us idx, us l, us r) {\n        // [l, r)\n        if(r - l == 0) {\n            pol[idx] = array(1);\n            pol[idx][0] = 1;\n            return;\n        }\n        if(r - l == 1) {\n            pol[idx] = array(2);\n            pol[idx][0] = (MOD - points[l]) % MOD;\n            pol[idx][1] = 1;\n            return;\n        }\n        static us tmp1[524320], tmp2[524320], tmp3[524320];\n        init(idx*2, l, (l+r)/2);\n        init(idx*2+1, (l+r)/2, r);\n        us n = pol[idx*2].size();\n        us m = pol[idx*2+1].size();\n        memcpy(tmp1, pol[idx*2].get(), n * intsize);\n        memcpy(tmp2, pol[idx*2+1].get(), m * intsize);\n        poly::mult(tmp1, n, tmp2, m, tmp3, 0, 1);\n        pol[idx] = array(n+m-1);\n        memcpy(pol[idx].get(), tmp3, pol[idx].size() * intsize);\n        //assert(pol[idx] == Eval::pol[idx]);\n    }\n\n    void solve(us idx, us l, us r, array& polynomial) {\n        static us tmp[524320], tmp2[524320], tmp3[524320], BULLSHIT[524320];\n        //assert(polynomial.size() == r-l);\n        if(r - l == 0) return;\n        if(r - l == 1) {\n            answer[l] = polynomial[0];\n            return;\n        }\n        us m = (l+r)/2;\n        if(m - l) {\n            memcpy(tmp, polynomial.get(), polynomial.size()*intsize);\n            memcpy(tmp2, pol[idx*2].get(), (m-l+1)*intsize);\n            poly::divide(tmp, polynomial.size(), tmp2, m-l+1, BULLSHIT, tmp3);\n            array p2(m-l); memcpy(p2.get(), tmp3, (m-l)*intsize);\n            solve(idx*2, l, m, p2);\n        }\n        if(r - m) { \n            memcpy(tmp, polynomial.get(), polynomial.size()*intsize);\n            memcpy(tmp2, pol[idx*2+1].get(), (r-m+1)*intsize);\n            poly::divide(tmp, polynomial.size(), tmp2, r-m+1, BULLSHIT, tmp3);\n            array p2(r-m); memcpy(p2.get(), tmp3, (r-m)*intsize);\n            solve(idx*2+1, m, r, p2);\n        }\n    }\nus p[524320];\nus dv[524320];\nus rp[524320];\nus BULLsHIT[524320];\n    array eval(array& po, array& v) {\n        us n = po.size(), m = v.size();\n        rep(i, m) {\n            points[i] = v[i];\n            if(!v[i]) v[i] = MOD;\n        }\n        //init(1, 0, m);\n        static us tmp[524320];\n        array pp(m);\n        if(n >= m+1) {\n            rep(i, m+1) dv[i] = pol[1][i];\n            rep(i, n) p[i] = po[i];\n            poly::divide(p, n, dv, m+1, BULLsHIT, tmp);\n            memcpy(pp.get(), tmp, m*intsize);\n        } else pp = po;\n        solve(1, 0, m, pp);\n        array res(m); memcpy(res.get(), answer, m*intsize);\n        return res;\n    }\n}\n\nnamespace Inter {\n    us points[524320], values[524320];\n    \n    array drv, coeff;\n\n    void init(us idx, us l, us r) {\n        // [l, r)\n        if(r - l == 0) {\n            pol[idx] = array(1);\n            pol[idx][0] = 1;\n            return;\n        }\n        if(r - l == 1) {\n            pol[idx] = array(2);\n            pol[idx][0] = (MOD - points[l]) % MOD;\n            pol[idx][1] = 1;\n            return;\n        }\n        static us tmp1[524320], tmp2[524320], tmp3[524320];\n        init(idx*2, l, (l+r)/2);\n        init(idx*2+1, (l+r)/2, r);\n        us n = pol[idx*2].size();\n        us m = pol[idx*2+1].size();\n        memcpy(tmp1, pol[idx*2].get(), n * intsize);\n        memcpy(tmp2, pol[idx*2+1].get(), m * intsize);\n        poly::mult(tmp1, n, tmp2, m, tmp3, 0, 1);\n        pol[idx] = array(n+m-1);\n        memcpy(pol[idx].get(), tmp3, pol[idx].size() * intsize);\n        //assert(pol[idx] == Eval::pol[idx]);\n    }\n    \n    array solve(us idx, us l, us r) {\n        if(r - l == 0) {\n            array ans(1); ans[0] = 1;\n            return ans;\n        }\n        if(r - l == 1) {\n            array ans(1); ans[0] = 1ll * values[l] * poly::qpow(coeff[l], MOD-2) % MOD;\n            return ans;\n        }\n        static us tmp1[524320], tmp2[524320], tmp3[524320], tmp4[524320];\n        array tmp = solve(idx*2, l, (l+r)/2);\n        array tmpp = solve(idx*2+1, (l+r)/2, r);\n        memcpy(tmp1, tmp.get(), tmp.size() * intsize);\n        memcpy(tmp2, pol[idx*2+1].get(), pol[idx*2+1].size() * intsize);\n        us s1 = tmp.size() + pol[idx*2+1].size() - 1;\n        poly::mult(tmp1, tmp.size(), tmp2, pol[idx*2+1].size(), tmp3, 0, 1); \n        rep(i, tmpp.size()) tmp1[i] = tmpp[i];\n        memcpy(tmp1, tmpp.get(), tmpp.size() * intsize);\n        memcpy(tmp2, pol[idx*2].get(), pol[idx*2].size() * intsize);\n        us s2 = tmpp.size() + pol[idx*2].size() - 1;\n        poly::mult(tmp1, tmpp.size(), tmp2, pol[idx*2].size(), tmp4, 0, 1); \n        s2 = max(s2, s1); tmp = array(s2);\n        rep(i, s2) {\n            us p = tmp3[i] + tmp4[i]; p -= (p >= MOD ? MOD : 0);\n            tmp[i] = p;\n            //tmp3[i] = tmp4[i] = 0;\n        }\n        return tmp;\n    }\n\n    array inter(array& pt, array& vl) {\n        assert(pt.size() == vl.size());\n        us n = pt.size();\n        memcpy(points, pt.get(), n * intsize);\n        memcpy(values, vl.get(), n * intsize);\n        init(1, 0, n);\n        drv = array(n);\n        rep1(i, n) { drv[i-1] = 1ll * i * pol[1][i] % MOD; }\n        coeff = Eval::eval(drv, pt);\n        return solve(1, 0, n);\n    }\n}\n\narray a, b, r;\n\nsigned main() {\n    ios_base::sync_with_stdio(false); cin.tie(0);\n    int n; io.read(n);\n    a = array(n);\n    b = array(n);\n    rep(i, n) io.read(a[i]), io.read(b[i]);\n    int k = 1; while(k <= (n << 1)) k <<= 1;\n    poly::init(k);\n    r = Inter::inter(a, b);\n    rep(i, n) io.write(r[i]), io.write(' ');\n}\n```",
        "postTime": 1594203713,
        "uid": 220037,
        "name": "w33z8kqrqk8zzzx33",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5158 \u3010\u3010\u6a21\u677f\u3011\u591a\u9879\u5f0f\u5feb\u901f\u63d2\u503c\u3011"
    },
    {
        "content": "\u60f3\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u5f97\u5148\u77e5\u9053[\u591a\u9879\u5f0f\u591a\u70b9\u6c42\u503c](https://www.luogu.org/problemnew/show/P5050)\u548c[\u62c9\u683c\u6717\u65e5\u63d2\u503c](https://www.luogu.org/problemnew/show/P4781)\u3002\n\n\u77e5\u9053\u62c9\u683c\u6717\u65e5\u63d2\u503c\uff0c\u4f60\u5c31\u80fd\u591f\u5728$O(n^2)$\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u662f\u8fd9\u4e2a\u663e\u7136\u662f\u4e0d\u80fd\u8fc7\u53bb\u7684\u3002\n\n\u4e0d\u8fc7\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u4f18\u5316\u63d2\u503c\u7684\u8fc7\u7a0b\u3002\n\n\u5148\u770b\u62c9\u683c\u6717\u65e5\u63d2\u503c\u7684\u8fc7\u7a0b\u3002\n\n$$f(x)=\\sum_{i=1}^n y_i\\prod_{j=1,j\\not = i}^n \\frac{x-x_j}{x_i-x_j}$$\n\n$$=\\sum_{i=1}^n  \\frac{y_i}{\\prod_{j=1,j\\not = i}^n(x_i-x_j)}*\\prod_{j=1,j\\not = i}^n(x-x_j)$$\n\n\u6211\u4eec\u5c06\u5b83\u5206\u6210\u4e24\u4e2a\u90e8\u5206\u53bb\u8ba1\u7b97\u3002\n\n\u5148\u8ba1\u7b97$\\frac{y_i}{\\prod_{j=1,j\\not=i}^n (x_i-x_j)}$\u3002\u4e0a\u9762\u662f\u5e38\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u8003\u8651\u4e0b\u534a\u90e8\u5206\u3002\n\n\u8bbe$\\pi(x)=\\prod_{i=1}^n (x-x_i)$\uff0c\u5219\u6211\u4eec\u8981\u6c42\u7684\u662f$\\frac{\\pi(x_i)}{x-x_i}$\u3002\u6839\u636e\u6d1b\u5fc5\u8fbe\u6cd5\u5219\u53ef\u4ee5\u5f97\u5230\u5b83\u5c31\u7b49\u4e8e$\\pi'(x_i)$\u3002\u8fd9\u90e8\u5206\u5229\u7528\u4e0a\u9762\u7684\u591a\u70b9\u6c42\u503c\u5373\u53ef\u505a\u5230$O(n\\log^2n)$\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u5c06\u5f0f\u5b50\u62c6\u5f00\u3002\n\n\u8bbe$f_{l,r}(x)$\u8868\u793a$(x_l,y_l)$\u5230$(x_r,y_r)$\u8fd9\u4e9b\u70b9\u63d2\u51fa\u6765\u7684\u591a\u9879\u5f0f\uff0c\u5219\n\n$$f_{l,r}(x)=\\sum_{i=l}^r  \\frac{y_i}{\\pi'(x)}*\\prod_{j=l,j\\not = i}^r(x-x_j)$$\n\n$$=[\\prod_{j=mid+1}^r(x-x_j)]*\\sum_{i=l}^{mid}\\frac{y_i}{\\pi'(x)}*[\\prod_{j=l,j\\not =i}^{mid}(x-x_j)]$$\n$$+[\\prod_{j=l}^{mid}(x-x_j)]*\\sum_{i=mid+1}^r\\frac{y_i}{\\pi'(x)}*[\\prod_{j=mid+1,j\\not =i}^r(x-x_j)]$$\n\n$$= [\\prod_{j=mid+1}^r(x-x_j)]f_{l,mid}(x)+[\\prod_{j=l}^{mid}(x-x_j)]f_{mid+1,r}(x)$$\n\n\u9012\u5f52\u6c42\u89e3\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log^2n)$\u3002\n\n\u6838\u5fc3\u4ee3\u7801:\n```cpp\n\nstatic int fst[MAXN];\n\nvoid calcf(int*x,int l,int r,int lev)\n{\n\tif(l==r){pol[lev][0]=fst[l];return;}\n\tint mid=(l+r)>>1;\n\tcalcf(x,l,mid,lev+1);\n\tcalc(x,mid+1,r,0,0);//\u8fd9\u662f\u5206\u6cbb\u4e58\u6cd5\n\tmul(pol[lev+1],solv[0][0],pol[lev],mid-l,r-mid);//\u8fd9\u662f\u591a\u9879\u5f0f\u4e58\u6cd5\n\tcalcf(x,mid+1,r,lev+1);\n\tcalc(x,l,mid,0,0);\n\tmul(pol[lev+1],solv[0][0],Q,r-mid-1,mid-l+1);\n\tRep(i,0,r-l)pol[lev][i]=ad(pol[lev][i],Q[i]);\n}\n\ninline void getfunc(int*x,int*y,int*F,int n)\n{\n\tcalc(x,1,n,0,0);\n\tRep(i,0,n)pol[0][i]=solv[0][0][i];\n\tDeriv(pol[0],pol[0],n);//\u8fd9\u662f\u6c42\u5bfc\n\tgetnum(x,fst,1,n,0,n-1);//\u8fd9\u662f\u591a\u70b9\u6c42\u503c\n\tRep(i,1,n)fst[i]=(ll)y[i]*power(fst[i],mod-2)%mod;\n\tcalcf(x,1,n,0);//\u4e3b\u51fd\u6570\n\tRep(i,0,n-1)F[i]=pol[0][i];\n}\n```",
        "postTime": 1549802765,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5158 \u3010\u3010\u6a21\u677f\u3011\u591a\u9879\u5f0f\u5feb\u901f\u63d2\u503c\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u9898\u5982\u5176\u540d\uff0c\u7ed9\u51fa $n$ \u4e2a\u70b9\uff0c\u6c42\u4e00\u4e2a\u7ecf\u8fc7\u8fd9 $n$ \u4e2a\u70b9\u7684 $n-1$ \u6b21\u591a\u9879\u5f0f\uff0c\u6a21 $998244353$ \u610f\u4e49\u4e0b\u3002\n\n[\u539f\u9898](https://www.luogu.com.cn/problem/P5158)\n\n---\n\nupd 2021-11-12\uff1a\u66f4\u65b0\u4e86\u4ee3\u7801\uff0c\u539f\u4ee3\u7801\u4f1a\u5185\u5b58\u6cc4\u6f0f\uff0c\u771f\u6709\u6211\u7684\n\n---\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\n$$\n\\lim_{x\\to \\alpha}f(x)=0,\\lim_{x\\to \\alpha} g(x)=0\\to\\lim_{x\\to \\alpha}\\frac{f(x)}{g(x)}=\\lim_{x\\to \\alpha}\\frac{f'(x)}{g'(x)}\n$$\n\u4e5f\u5c31\u662f\u6d1b\u5fc5\u8fbe\u3002\n\n\u4ee5\u53ca\u591a\u9879\u5f0f\u591a\u70b9\u6c42\u503c\u3002\n\n---\n\n\u9996\u5148\u6211\u4eec\u6709\u62c9\u683c\u6717\u65e5\u63d2\u503c\u516c\u5f0f\uff1a\n$$\nf(x)=\\sum_{i=1}^{n}y_i\\cdot \\prod_{j\\ne i} \\frac{x-x_j}{x_i-x_j}\n$$\n\u6b63\u786e\u6027\u663e\u7136\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a $n-1$ \u6b21\u591a\u9879\u5f0f\uff0c\u5e76\u4e14\u628a\u4efb\u4f55\u4e00\u4e2a\u5df2\u77e5\u70b9\u7684 $x$ \u5e26\u8fdb\u53bb\u90fd\u4f1a\u7b97\u51fa\u6765\u5bf9\u5e94\u7684 $y$ \u3002\n\n\u53ef\u4ee5\u5148\u7b97\u51fa $\\ell(x)=\\prod_{i=1}^{n}\\limits (x-x_i)$ \uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a $i$ \uff0c\u901a\u8fc7\u6a21\u62df\u9664\u6cd5 $O(n)$ \u5f97\u5230 $\\prod_{j\\ne i}(x-x_j)$ \uff0c\u5e76\u4e14 $\\prod_{j\\ne i}(x_i-x_j)$ \u4e5f\u53ef\u4ee5 $O(n)$ \u5f97\u5230\uff0c\u6240\u4ee5\u6211\u4eec\u6709\u4e86\u4e00\u4e2a $O(n^2)$ \u7684\u505a\u6cd5\u3002\u7136\u800c\u8fd9\u4e2a\u663e\u7136\u4e0d\u884c\u3002\n\n---\n\n\u63a8\u4e00\u4e0b\u5f0f\u5b50\uff1a\n$$\nf(x)=\\sum_{i=1}^{n}\\frac{y_i}{\\lim_{x\\to x_i}\\limits \\frac{\\ell(x)}{x-x_i}} \\prod_{j\\ne i} (x-x_j)\n$$\n\u597d\u5509\uff0c\u90a3\u4e2a $\\lim$ \u4e0a\u4e0b\u90fd\u8d8b\u5411\u4e8e $0$ \uff0c\u4e0a\u6d1b\u5fc5\u8fbe\uff1a\n$$\nf(x)=\\sum_{i=1}^{n} \\frac{y_i}{\\lim_{x\\to x_i}\\limits \\ell'(x)} \\prod_{j\\ne i} (x-x_j))=\\sum_{i=1}^{n} \\frac{y_i}{\\ell'(x_i)} \\prod_{j \\ne i}(x-x_j)\n$$\n$\\ell(x)$ \u53ef\u4ee5\u5206\u6cbb+$\\text{NTT}$ \u5f97\u5230\uff0c$\\ell'(x)$ \u662f\u591a\u9879\u5f0f\uff0c $\\ell'(x_i)$ \u53ef\u4ee5\u591a\u70b9\u6c42\u503c  $O(n\\log^2 n) $ \u5f97\u5230\u3002\u90a3\u4e48\u4ee4 $\\gamma_i=\\dfrac{y_i}{\\ell'(x_i)}$\u3002\n$$\nf(x)=\\sum_{i=1}^{n}\\gamma_i\\prod_{j\\ne i}(x-x_j)\n$$\n\u8fd9\u4e2a\u53ef\u4ee5\u5206\u6cbb\u6c42\u89e3\uff0c\u4ee4\n\n$$\nf_{l,r}(x)=\\sum_{i=l}^{r} \\gamma_i\\prod_{j=l,j\\ne i}^{r} (x-x_j),mid= \\lfloor \\frac{l+r}{2} \\rfloor\n$$\n\n\u5219\n$$\nf_{l,r}(x)=\\sum_{i=l}^{mid} \\gamma_i \\prod_{j=l,j \\ne i}^{mid} (x-x_j) \\prod_{j=mid+1}^{r} (x-x_j)+\\sum_{i=mid+1}^{r} \\gamma_i \\prod_{j=mid+1,j \\ne i}^{r}(x-x_j)\\prod_{j=l}^{mid}(x-x_j)\n$$\n\n$$\nf_{l,r}(x)=f_{l,mid}(x)\\cdot \\prod_{j=mid+1}^{r} (x-x_j) + f_{mid+1,r}(x)\\cdot \\prod_{j=l}^{mid} (x-x_j)\n$$\n\n\u5e76\u4e14 $\\prod_{j=mid+1}^{r} \\limits (x-x_j)$ \u548c $\\prod_{j=l}^{mid}\\limits(x-x_j)$ \u5728\u4e4b\u524d\u6c42 $\\ell(x)$ \u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u6c42\u597d\u4e86\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u9012\u5f52\u5206\u6cbb\u4e86\u3002\n\n\u9012\u5f52\u8fb9\u754c\u4e3a $f_{i,i}(x)=\\gamma_i$ \u3002\u590d\u6742\u5ea6 $O(n\\log^2 n)$ \u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n\nconst int maxn = 3e6+5 , mod = 998244353;\n\ntemplate<typename T>\ninline T max(const T &a,const T &b){\n\treturn a>b?a:b;\n}\n\ntemplate<typename T>\ninline void swap(T &a,T &b){\n\tT temp=a;a=b;b=temp;\n}\n\nstruct IO{\n\tIO(){};char c;\n\tinline char gc(){\n\t\tstatic char buf[maxn],*p1=buf,*p2=buf;\n\t\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,maxn,stdin),p1==p2)?EOF:*p1++;\n\t}\n\ttemplate<typename T>\n\tinline IO&operator>>(T &_){\n\t\t_=0;bool f=1;c=gc();while(c<'0'||c>'9'){if(c=='-') f=0; c=gc();}\n\t\twhile(c>='0'&&c<='9'){_=_*10+c-48;c=gc();}if(!f) _=-_;return *this;\n\t}\n\tchar buf[maxn];int p = 0;~IO(){fwrite(buf,1,p,stdout);}\n\tinline void pc(const char &c){\n\t\tbuf[p++] = c;\n\t\tif(p==maxn) fwrite(buf,1,maxn,stdout),p=0;\n\t}\n\ttemplate<typename T>\n\tinline IO&operator<<(T x){\n\t\tif(!x){pc(48);return *this;}static int wt[41],len;len=0;if(x<0){pc('-');x=-x;}\n\t\tfor(;x;x/=10){wt[++len]=x%10;}\n\t\twhile(len){pc(wt[len--]+48);}return *this;\n\t}\n\tinline IO&operator<<(const char &c){pc(c);return *this;}\n}io;\n\nint fastpow(int x,int y){\n\tif(y==0) return 1;int tmp=fastpow(x,y>>1);\n\treturn y&1?1ll*tmp*tmp%mod*x%mod:1ll*tmp*tmp%mod ;\n}\n\ninline int add(int x,int y){return x+y>=mod?x+y-mod:x+y;}\ninline int sub(int x,int y){return x-y<0?x-y+mod:x-y;}\n\ninline void copy(int *Alpha,int *Beta,int len){\n\t//Alpha -> Beta\n\tfor(int i=0;i<len;i++) Alpha[i]=Beta[i];\n}\n\nnamespace Poly{\n\tconst int gate = 3,invg = fastpow(gate,mod-2);\n\tint lim,lg,sing[maxn];int Gate[maxn],Invg[maxn];int inv[maxn];\n\tvoid init(int len){\n\t\tlim = 1,lg = 0;while(lim<len) lim<<=1,lg++;\n\t\tfor(int i=1;i<lim;i++) sing[i]=(sing[i>>1]>>1)|((i&1)<<(lg-1));\n\t}\n\tint Hacking_to_the(){\n\t\tfor(int i=1;i<maxn;i<<=1) Gate[i] = fastpow(gate,(mod-1)/(i<<1)),Invg[i] = fastpow(invg,(mod-1)/(i<<1));\n\t\t// inv[1] = 1 ;for(int i=2;i<maxn;i++) inv[i] = (mod-1ll*(mod/i)*inv[mod%i]%mod) ;\n\t\treturn 0 ;\n\t}\n\tint GATE = Hacking_to_the();\n\tvoid NTT(int *Steins,int type){\n\t\tfor(int i=0;i<lim;i++) if(i<sing[i]) swap(Steins[i],Steins[sing[i]]);\n\t\tfor(int len=1;len<lim;len<<=1){\n\t\t\tint unit = type==1?Gate[len]:Invg[len];\n\t\t\tfor(int i=0;i<lim;i+=(len<<1)){\n\t\t\t\tint w = 1;\n\t\t\t\tfor(int k=0;k<len;k++,w=1ll*w*unit%mod){\n\t\t\t\t\tint x=Steins[i+k],y=1ll*w*Steins[i+k+len]%mod;\n\t\t\t\t\tSteins[i+k]=add(x,y),Steins[i+k+len]=sub(x,y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(type!=1){int Okabe=fastpow(lim,mod-2);for(int i=0;i<lim;i++) Steins[i]=1ll*Steins[i]*Okabe%mod;}\n\t}\n\tvoid convolution(int *Alpha,int la,int *Beta,int lb,int *Zeta){\n\t\tinit(la+lb-1);for(int i=la;i<lim;i++) Alpha[i]=0;for(int i=lb;i<lim;i++) Beta[i]=0;\n\t\tNTT(Alpha,1),NTT(Beta,1);\n\t\tfor(int i=0;i<lim;i++) Zeta[i]=1ll*Alpha[i]*Beta[i]%mod;return NTT(Zeta,-1) ;\n\t}\n\tint g[maxn];\n\tvoid get_inv(int *Alpha,int len,int *Beta){\n\t\t//\u4f7f\u7528\u524d\u6e05\u7a7aBeta\u6570\u7ec4\n\t\tif(len==1){Beta[0]=fastpow(Alpha[0],mod-2);return ;}\n\t\tget_inv(Alpha,(len+1)>>1,Beta);init(len+len-1);\n\t\tcopy(g,Alpha,len);for(int i=len;i<lim;i++) g[i] = 0;\n\t\tNTT(Beta,1),NTT(g,1);\n\t\tfor(int i=0;i<lim;i++) Beta[i]=1ll*Beta[i]*(mod+2-1ll*Beta[i]*g[i]%mod)%mod;\n\t\tNTT(Beta,-1);\n\t\tfor(int i=len;i<lim;i++) Beta[i]=0;\n\t}\n\tconst int inv2=fastpow(2,mod-2);\n\tint t[maxn];\n\tvoid get_sqrt(int *Alpha,int len,int *Beta){\n\t\t//\u4f7f\u7528\u524d\u6e05\u7a7aBeta\u6570\u7ec4\n\t\tif(len==1){Beta[0]=1;return ;}get_sqrt(Alpha,(len+1)>>1,Beta);\n\t\tget_inv(Beta,len,t);\n\t\tinit(len+len-1);copy(g,Alpha,len);for(int i=len;i<lim;i++) g[i]=0;\n\t\tconvolution(g,len,t,len,g);\n\t\tfor(int i=0;i<lim;i++) Beta[i]=1ll*inv2*(Beta[i]+g[i])%mod;\n\t\tfor(int i=len;i<lim;i++) Beta[i]=0;for(int i=0;i<lim;i++) t[i]=0;\n\t}\n\tvoid derivative(int *Alpha,int len,int *Beta){\n\t\tfor(int i=1;i<len;i++) Beta[i-1]=1ll*i*Alpha[i]%mod;\n\t\tBeta[len-1] = 0;\n\t}\n\tvoid integral(int *Alpha,int len,int *Beta){\n\t\tfor(int i=len-1;i>=1;i--) Beta[i]=1ll*Alpha[i-1]*inv[i];\n\t\tBeta[0] = 0;\n\t}\n\tint f1[maxn],f2[maxn];\n\tvoid get_ln(int *Alpha,int len,int *Beta){\n\t\tmemset(f2,0,sizeof(f2));\n\t\tderivative(Alpha,len,f1),get_inv(Alpha,len,f2);\n\t\tconvolution(f1,len,f2,len,Beta);\n\t\treturn integral(Beta,len,Beta) ;\n\t}\n\tint e1[maxn],e2[maxn];\n\tvoid get_exp(int *Alpha,int len,int *Beta){\n\t\t//\u4f7f\u7528\u524d\u6e05\u7a7aBeta\u6570\u7ec4\n\t\tif(len==1) return void(Beta[0]=1);\n\t\tget_exp(Alpha,(len+1)>>1,Beta);get_ln(Beta,len,e1);\n\t\tinit(len+len-1);\n\t\tfor(int i=0;i<len;i++) e2[i] = sub(Alpha[i],e1[i]);for(int i=len;i<lim;i++) e2[i]=0;\n\t\tNTT(e2,1),NTT(Beta,1);\n\t\tfor(int i=0;i<lim;i++) Beta[i]=1ll*Beta[i]*(e2[i]+1)%mod;\n\t\tNTT(Beta,-1);\n\t\tfor(int i=len;i<lim;i++) Beta[i]=0;for(int i=0;i<lim;i++) e1[i]=0;\n\t}\n\tint g1[maxn],g2[maxn],g3[maxn];\n\tvoid division(int *Alpha,int la,int *Beta,int lb,int *Zeta,int *Gamma){\n\t\t//Zeta's length requires 2la-lb\n\t\tif(la<lb){\n\t\t\tfor(int i=0;i<=la-lb;i++) Zeta[i] = 0;\n\t\t\tfor(int i=la;i<lb;i++) Gamma[i] = 0;return copy(Gamma,Alpha,la);\n\t\t}\n\t\tfor(int i=0;i<la;i++) g1[i]=Alpha[la-i-1];for(int i=0;i<lb;i++) g2[i]=Beta[lb-i-1];\n\t\tfor(int i=lb;i<=la-lb;i++) g2[i]=0;\n\t\tlim=1;while(lim<=(la-lb)<<1) lim<<=1;for(int i=0;i<lim;i++) g3[i]=0;\n\t\tget_inv(g2,la-lb+1,g3);\n\t\tconvolution(g1,la,g3,la-lb+1,Zeta);for(int i=0;i<la-lb-i;i++) swap(Zeta[i],Zeta[la-lb-i]);\n\t\tfor(int i=la-lb+1;i<lim;i++) Zeta[i]=0;\n\t\tcopy(g1,Beta,lb);copy(g2,Zeta,la-lb+1);\n\t\tconvolution(g1,lb,g2,la-lb+1,g1);for(int i=0;i<lb;i++) Gamma[i]=sub(Alpha[i],g1[i]);\n\t}\n}\n\nnamespace Multi_point{\n\tint *gate[maxn<<2];\n\tvoid init(int now,int l,int r,int *Alpha){\n\t\tif(l==r){gate[now] = new int[2];gate[now][0]=mod-Alpha[l],gate[now][1]=1;return ;}\n\t\tint mid = (l+r) >> 1,lim = 1;while(lim<r-l+1+1) lim<<=1;\n\t\tgate[now] = new int[lim];\n\t\tint *g1 = new int[lim],*g2 = new int[lim];\n\t\tinit(now<<1,l,mid,Alpha),init(now<<1|1,mid+1,r,Alpha);\n\t\tcopy(g1,gate[now<<1],mid-l+1+1);\n\t\tcopy(g2,gate[now<<1|1],r-mid+1);\n\t\treturn Poly::convolution(g1,mid-l+1+1,g2,r-mid+1,gate[now]) ;\n\t}\n\tvoid evaluation(int now,int l,int r,int *Alpha,int *Beta,int *Zeta){\n\t\t//Alpha->f(x),Beta->S{x}\n\t\tif(r-l+1<=256){\n\t\t\tfor(int i=l;i<=r;i++){\n\t\t\t\tint answer = 0;int base = 1;\n\t\t\t\tfor(int j=0;j<=r-l;j++,base=1ll*base*Beta[i]%mod)\n\t\t\t\tanswer = (answer + 1ll*base*Alpha[j]) % mod;\n\t\t\t\tZeta[i] = answer;\n\t\t\t}\n\t\t\treturn ;//Which makes it faster;\n\t\t}\n\t\tint mid = (l+r) >> 1,lim = 1;while(lim<r-l+1+1) lim<<=1;\n\t\tint *g1,*g2;g1 = new int[lim<<1],g2 = new int[lim];\n\t\tPoly::division(Alpha,r-l+1,gate[now<<1],mid-l+1+1,g1,g2);\n\t\tevaluation(now<<1,l,mid,g2,Beta,Zeta);\n\t\tPoly::division(Alpha,r-l+1,gate[now<<1|1],r-mid+1,g1,g2);\n\t\tevaluation(now<<1|1,mid+1,r,g2,Beta,Zeta);\n\t\tdelete[] g1,delete[] g2;\n\t}\n\tint g1[maxn],g2[maxn];\n\tvoid Evaluation(int *Alpha,int len,int *Beta,int n,int *Zeta){\n\t\tinit(1,1,n,Beta);Poly::division(Alpha,len,gate[1],n+1,g1,g2);\n\t\treturn evaluation(1,1,n,g2,Beta,Zeta) ;\n\t}\n\tint f1[maxn],f2[maxn],ell[maxn];\n\tint *Steins[maxn<<1],e1[maxn],e2[maxn],G1[maxn],G2[maxn];\n\tvoid interpolation(int now,int l,int r){\n\t\tif(l==r){\n\t\t\tSteins[now] = new int[1];\n\t\t\treturn void(Steins[now][0] = ell[l]);\n\t\t}\n\t\tSteins[now] = new int[r-l+1];\n\t\tint mid = (l+r) >> 1,lim = 1;\n\t\tinterpolation(now<<1,l,mid),interpolation(now<<1|1,mid+1,r);\n\t\twhile(lim<(r-l+1)) lim<<=1;\n\t\tcopy(G1,Steins[now<<1],mid-l+1),copy(G2,Steins[now<<1|1],r-mid);\n\t\tcopy(e1,gate[now<<1|1],r-mid+1),copy(e2,gate[now<<1],mid-l+1+1);\n\t\tPoly::convolution(e1,r-mid+1,G1,mid-l+1,e1);\n\t\tPoly::convolution(e2,mid-l+1+1,G2,r-mid,e2);\n\t\tfor(int i=0;i<=r-l;i++) Steins[now][i]=(e1[i]+e2[i])%mod;\n\t}\n\tvoid Interpolation(int *Alpha,int *Beta,int n,int *Zeta){\n\t\t//Alpha->x,Beta->y\n\t\tinit(1,1,n,Alpha);copy(f1,gate[1],n+1);Poly::derivative(f1,n+1,f2);\n\t\tevaluation(1,1,n,f2,Alpha,ell);\n\t\tfor(int i=1;i<=n;i++) ell[i]=1ll*Beta[i]*fastpow(ell[i],mod-2)%mod;\n\t\tinterpolation(1,1,n);\n\t\treturn copy(Zeta,Steins[1],n) ;\n\t}\n}\n\nint n ;int Alpha[maxn],Beta[maxn],Zeta[maxn];\n\nint main(){\n\tscanf(\"%d\",&n);for(int i=1;i<=n;i++) scanf(\"%d%d\",&Alpha[i],&Beta[i]);\n\tMulti_point::Interpolation(Alpha,Beta,n,Zeta);\n\tfor(int i=0;i<n;i++) io << Zeta[i] << \" \\n\"[i==n-1];\n\treturn 0;\n}\n\n/*\n7\n0 1\n17 214151313\n-121 235759984\n1001 -137241143\n996 655399767\n-12 -23201855\n499000000 224897344\n*/\n\n```\n\n",
        "postTime": 1612223172,
        "uid": 101984,
        "name": "Rui_R",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5158 \u3010\u3010\u6a21\u677f\u3011\u591a\u9879\u5f0f\u5feb\u901f\u63d2\u503c\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5158)\n# \u9898\u76ee\u5927\u610f\n\u7ed9\u51fa$n$\u4e2a\u70b9$(x_i,y_i)$\uff0c\u6c42\u51fa\u7ecf\u8fc7\u8fd9$n$\u4e2a\u70b9\u7684\u4e00\u4e2a$n-1$\u6b21\u591a\u9879\u5f0f\u3002\n\n$n\\le 10^5$\n# \u601d\u8def\n\u5dee\u70b9\u5361\u5e38\u6b7b\u5728\u8fd9\u91cc\u3002\u8bba\u591a\u9879\u5f0f\u91cc\u9762\u7684\u8c03\u53c2\uff08\u6709$\\texttt{SA}$\u5185\u5473\u4e86\uff09\uff08\u96fe\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u4f7f\u7528\u62c9\u683c\u6717\u65e5\u63d2\u503c\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u5230\u7b54\u6848\u4e3a:\n\n$$\\sum_{i=1}^{n} y_i\\prod_{j=1\\wedge i\\not= j} \\frac{x-x_j}{x_i-x_j}$$\n\n\u53d8\u4e00\u4e0b\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230:\n\n$$\\sum_{i=1}^{n} \\frac{y_i}{\\prod_{j=1\\wedge i\\not= j}^{n}(x_i-x_j)}\\prod_{j=1\\wedge i\\not= j}^{n} (x-x_j)$$\n\n\u6211\u4eec\u5047\u8bbe$g(x)=\\prod_{i=1}^{n}(x-x_i)$\uff0c\u90a3\u4e48\u4e0a\u9762\u7684\u5f0f\u5b50\u5c31\u662f:\n\n$$\\sum_{i=1}^{n} \\frac{y_i}{\\frac{g(x_i)}{x_i-x_i}}\\prod_{j=1\\wedge i\\not= j}^{n}(x-x_j)$$\n\n\u6211\u4eec\u53d1\u73b0$\\frac{g(x_i)}{x_i-x_i}$\u53ef\u4ee5\u4f7f\u7528\u6d1b\u5fc5\u8fbe\u6cd5\u5219\u6c42\u5230\uff0c\u7b54\u6848\u5373\u4e3a$g^{'}(x_i)$\u3002\n\n\u6240\u4ee5\u5f0f\u5b50\u5c31\u662f:\n\n$$\\sum_{i=1}^{n} \\frac{y_i}{g^{'}(x_i)} \\prod_{j=1\\wedge i\\not= j}^{n} (x-x_j)$$\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u5f0f\u5b50\u5982\u679c\u6211\u4eec\u76f4\u63a5\u6c42\u7684\u8bdd\u4f1a\u70b8\u6210$\\Theta(n^2\\log^2n)$\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u4f7f\u7528\u5206\u6cbb\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u6211\u4eec\u5047\u8bbe\u5f53\u524d\u533a\u95f4\u4e3a$l,r$\uff0c\u7b54\u6848\u4e3a$f_{l,r}$\uff0c\u4e2d\u70b9\u4e3a$mid$\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u5230:\n\n$$f_{l,r}=\\sum_{i=l}^{r} (\\frac{y_i}{g^{'}(x_i)}\\prod_{j=l\\wedge i\\not= j}^{r}(x-x_j))$$\n\n\u6211\u4eec\u4ece\u4e2d\u95f4\u62c6\u5f00\u5c31\u53ef\u4ee5\u5f97\u5230:\n\n$$f_{l,r}=\\prod_{k=mid+1}^{r}(x-x_k)(\\sum_{i=l}^{mid} \\frac{y_i}{g^{'}(x_i)}\\prod_{j=l\\wedge i\\not=j}^{mid}(x-x_j))+\\prod_{k=l}^{mid}(x-x_k)(\\sum_{i=mid+1}^{r} \\frac{y_i}{g^{'}(x_i)}\\prod_{j=mid+1\\wedge i\\not=j}^{r}(x-x_j))$$\n\n\u5373:\n\n$$f_{l,r}=\\prod_{k=mid+1}^{r} (x-x_k) f_{l,mid}+\\prod_{k=l}^{mid} (x-x_k)f_{mid+1,r}$$\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u5206\u6cbb\u89e3\u51b3\u4e86\u3002\u81f3\u4e8e$g^{'}(x_i)$\u53ef\u4ee5\u4f7f\u7528\u591a\u9879\u5f0f\u591a\u70b9\u6c42\u503c$\\Theta(n\\log ^2n)$\u9884\u5904\u7406\u6c42\u51fa\u6765\uff0c\u6bcf\u4e00\u5c42\u7684$\\prod_{k=l}^{r}(x-x_k)$\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5206\u6cbb\u6c42\u51fa\u6765\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u6839\u636e\u4e3b\u5b9a\u7406\u4e3a$F(n)=F(n/2)+\\Theta(n\\log n)=\\Theta(n\\log^2n)$\u3002\n\n\u4f46\u662f\u8fd9\u9053\u9898\u6709\u70b9\u5361\u5e38\uff0c\u6240\u4ee5\u591a\u9879\u5f0f\u591a\u70b9\u6c42\u503c\u7684\u5730\u65b9\u9700\u8981\u8c03\u53c2\uff0c\u6211\u5dee\u70b9\u81ea\u95ed\u4e86\u3002\u3002\u3002\n# $\\texttt{Code}$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define SZ(x) ((int)x.size())\n#define Int register int\n#define mod 998244353\n#define ll long long\n#define MAXN 1000005\n\nint mul (int a,int b){return 1ll * a * b % mod;}\nint dec (int a,int b){return a >= b ? a - b : a + mod - b;}\nint add (int a,int b){return a + b >= mod ? a + b - mod : a + b;}\nint qkpow (int a,int k){\n\tint res = 1;for (;k;k >>= 1,a = 1ll * a * a % mod) if (k & 1) res = 1ll * res * a % mod;\n\treturn res;\n}\nint inv (int x){return qkpow (x,mod - 2);}\n\ntypedef vector <int> poly;\n\nint w[MAXN],rev[MAXN];\n\nvoid init_ntt (){\n\tint lim = 1 << 18;\n\tfor (Int i = 0;i < lim;++ i) rev[i] = (rev[i >> 1] >> 1) | ((i & 1) << 17);\n\tint Wn = qkpow (3,(mod - 1) / lim);w[lim >> 1] = 1;\n\tfor (Int i = lim / 2 + 1;i < lim;++ i) w[i] = mul (w[i - 1],Wn);\n\tfor (Int i = lim / 2 - 1;i;-- i) w[i] = w[i << 1];\n}\n\nvoid ntt (poly &a,int lim,int type){\n#define G 3\n#define Gi 332748118\n\tstatic int d[MAXN];\n\tfor (Int i = 0,z = 18 - __builtin_ctz(lim);i < lim;++ i) d[rev[i] >> z] = a[i];\n\tfor (Int i = 1;i < lim;i <<= 1)\n\t\tfor (Int j = 0;j < lim;j += i << 1)\n\t\t\tfor (Int k = 0;k < i;++ k){\n\t\t\t\tint x = mul (w[i + k],d[i + j + k]);\n\t\t\t\td[i + j + k] = dec (d[j + k],x),d[j + k] = add (d[j + k],x);\n\t\t\t}\n\tfor (Int i = 0;i < lim;++ i) a[i] = d[i] % mod;\n\tif (type == -1){\n\t\treverse (a.begin() + 1,a.begin() + lim);\n\t\tfor (Int i = 0,Inv = inv (lim);i < lim;++ i) a[i] = mul (a[i],Inv);\n\t}\n#undef G\n#undef Gi \n}\n\npoly operator + (poly a,poly b){\n\ta.resize (max (SZ (a),SZ (b)));\n\tfor (Int i = 0;i < SZ (b);++ i) a[i] = add (a[i],b[i]);\n\treturn a;\n}\n\npoly operator - (poly a,poly b){\n\ta.resize (max (SZ (a),SZ (b)));\n\tfor (Int i = 0;i < SZ (b);++ i) a[i] = dec (a[i],b[i]);\n\treturn a;\n}\n\npoly operator * (poly a,int b){\n\tfor (Int i = 0;i < SZ (a);++ i) a[i] = mul (a[i],b);\n\treturn a;\n}\n\npoly der (poly a){\n\tfor (Int i = 0;i < SZ (a) - 1;++ i) a[i] = mul (a[i + 1],i + 1);\n\ta.pop_back ();return a;\n}\n\npoly operator * (poly a,poly b){\n\tint d = SZ (a) + SZ (b) - 1,lim = 1;while (lim < d) lim <<= 1;\n\ta.resize (lim),b.resize (lim);\n\tntt (a,lim,1),ntt (b,lim,1);\n\tfor (Int i = 0;i < lim;++ i) a[i] = mul (a[i],b[i]);\n\tntt (a,lim,-1),a.resize (d);\n\treturn a;\n}\n\npoly inv (poly a,int n){\n\tpoly b(1,inv (a[0])),c;\n\tfor (Int l = 4;(l >> 2) < n;l <<= 1){\n\t\tc.resize (l >> 1);\n\t\tfor (Int i = 0;i < (l >> 1);++ i) c[i] = i < n ? a[i] : 0;\n\t\tc.resize (l),b.resize (l);\n\t\tntt (c,l,1),ntt (b,l,1);\n\t\tfor (Int i = 0;i < l;++ i) b[i] = mul (b[i],dec (2,mul (b[i],c[i])));\n\t\tntt (b,l,-1),b.resize (l >> 1);\n\t}\n\tb.resize (n);\n\treturn b;\n}\n\npoly inv (poly a){return inv (a,SZ (a));}\n\npoly Mod (poly F,poly G){\n\tint n = SZ (F) - 1,m = SZ (G) - 1;poly Q;Q.resize (m + 1);for (Int i = 0;i <= m;++ i) Q[i] = G[i];\n\treverse (F.begin(),F.end()),reverse (G.begin(),G.end()),reverse (Q.begin(),Q.end()),Q.resize (n - m + 1),Q = inv (Q) * F,Q.resize (n - m + 1),reverse (Q.begin(),Q.end());\n\treverse (F.begin(),F.end()),reverse (G.begin(),G.end()),Q = G * Q,Q.resize (m),Q = F - Q,Q.resize (m);\n\treturn Q;\n}\n\ntemplate <typename T> inline void read (T &t){t = 0;char c = getchar();int f = 1;while (c < '0' || c > '9'){if (c == '-') f = -f;c = getchar();}while (c >= '0' && c <= '9'){t = (t << 3) + (t << 1) + c - '0';c = getchar();} t *= f;}\ntemplate <typename T,typename ... Args> inline void read (T &t,Args&... args){read (t);read (args...);}\ntemplate <typename T> inline void write (T x){if (x < 0){x = -x;putchar ('-');}if (x > 9) write (x / 10);putchar (x % 10 + '0');}\n\nint n,a[MAXN],bb[MAXN],AAns[MAXN];\npoly AAA,D[MAXN << 2],DR[MAXN << 2];\n\nvoid divide1 (int i,int l,int r){\n\tif (l == r) return DR[i].resize (2),DR[i][0] = mod - a[l],DR[i][1] = 1,void ();\n\tint mid = (l + r) >> 1;divide1 (i << 1,l,mid),divide1 (i << 1 | 1,mid + 1,r);\n\tDR[i] = DR[i << 1] * DR[i << 1 | 1];\n}\n\nll c1,c2,c3,c4,b[17];\n\nvoid divide2 (int i,int l,int r,poly AA){\n\tif (r - l <= 512){\n\t\tfor (Int i = l;i <= r;++ i){\n\t\t\tint x = a[i];b[0] = 1;int now = r - l;\n\t\t\tfor (Int j = 1;j <= 16;++ j) b[j] = b[j - 1] * x % mod;\n\t\t\tll Ans = AA[now];\n\t\t\tfor (Int j = now - 1;j - 15 >= 0;j -= 16){\n\t\t\t\tc1 = Ans * b[16] + AA[j] * b[15] + AA[j - 1] * b[14] + AA[j - 2] * b[13],c1 %= mod;\n\t\t\t\tc2 = AA[j - 3] * b[12] + AA[j - 4] * b[11] + AA[j - 5] * b[10] + AA[j - 6] * b[9],c2 %= mod;\n\t\t\t\tc3 = AA[j - 7] * b[8] + AA[j - 8] * b[7] + AA[j - 9] * b[6] + AA[j - 10] * b[5],c3 %= mod;\n\t\t\t\tc4 = AA[j - 11] * b[4] + AA[j - 12] * b[3] + AA[j - 13] * b[2] + AA[j - 14] * b[1],c4 %= mod;\n\t\t\t\tAns = (c1 + c2 + c3 + c4 + AA[j - 15]) % mod;\n\t\t\t} \n\t\t\tfor (Int j = now % 16 - 1;~j;-- j) Ans = (Ans * x + AA[j]) % mod;\n\t\t\tAAns[i] = Ans;\n\t\t}\n\t\treturn ;\n\t}\n\tif (l == r) return write (AA[0]),putchar ('\\n'),void ();\n\tpoly B = Mod (AA,DR[i << 1]);int mid = (l + r) >> 1;divide2 (i << 1,l,mid,B);B = Mod (AA,DR[i << 1 | 1]);divide2 (i << 1 | 1,mid + 1,r,B);\n}\n\nvoid divide3 (int i,int l,int r){\n\tif (l == r) return D[i].resize (1),D[i][0] = mul (bb[l],inv (AAns[l])),void ();\n\tint mid = (l + r) >> 1;divide3 (i << 1,l,mid),divide3 (i << 1 | 1,mid + 1,r);\n\tD[i] = DR[i << 1 | 1] * D[i << 1] + DR[i << 1] * D[i << 1 | 1];\n}\n\nsigned main(){\n\tinit_ntt(),read (n);\n\tfor (Int i = 1;i <= n;++ i) read (a[i],bb[i]);\n\tdivide1 (1,1,n),AAA = der (DR[1]),divide2 (1,1,n,AAA),divide3 (1,1,n);\n\tfor (Int i = 0;i < n;++ i) write (D[1][i]),putchar (' ');putchar ('\\n');\n\treturn 0;\n}\n```",
        "postTime": 1595215614,
        "uid": 124781,
        "name": "Walking_Dead",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 \u591a\u9879\u5f0f\u5feb\u901f\u63d2\u503c"
    },
    {
        "content": "\u5495\u5495~ \u672c\u849f\u84bb\u662f\u770b\u5230\u65b0\u6a21\u677f\u540e\u73b0\u5b66\u7684\uff0c\uff0c\uff0c\u4e8e\u662f\u53ef\u80fd\u6709\u63cf\u8ff0\u4e0d\u51c6\u786e\u7684\u5730\u65b9\uff0c\u8bf7\u89c1\u8c05\u3002\n\n### 0. \u591a\u9879\u5f0f\u591a\u70b9\u6c42\u503c\n\n\u8fd9\u662f\u505a\u7740\u9898\u7684\u57fa\u672c\uff0c\u8be6\u89c1[P5050](https://www.luogu.org/problemnew/show/P5050)\uff0c\u849f\u84bb\u5728\u8fd9\u91cc\u5c31\u4e0d\u8be6\u7ec6\u8bb2\u4e86\u3002\n\n### 1. \u5047\u00b7\u89e3\u6cd5\n\n$O(n^2)$\u62c9\u683c\u6717\u65e5\u63d2\u503c\u3002\u8fd9\u662f\u849f\u84bb\u7684\u6700\u5f00\u59cb\u60f3\u6cd5\uff0c\uff0c\uff0c\u4f46\u660e\u663e\u8fc7\u4e0d\u4e86\u3002\u3002\n\n### 2. \u771f\u00b7\u89e3\u6cd5\n\n\u7136\u800c\u8fd8\u662f\u62c9\u683c\u6717\u65e5\u63d2\u503c\u3002\u3002\u3002\u5373\uff0c$f(x)=\\sum_{i=0}^{n-1}\\frac {\\prod_{j\\ne i}(x-x_j)} {\\prod_{j\\ne i}(x_i-x_j)}y_i$\n\n1. $\\prod_{j\\ne i}(x_i-x_j)$\n\n\t\u8fd9\u662f\u8981\u5148\u8ba1\u7b97\u7684\u3002\n    \n    \u8bbe$L(x)=\\prod_{i=0}^{n-1} (x-x_i),R_i(x)=\\frac{L(x)}{x-x_i}$\uff0c\u5219\u6709$\\prod_{j\\ne i}(x_i-x_j)=R_i(x_i)$\uff0c\u6211\u4eec\u53d1\u73b0\u6b64\u65f6\u5206\u5f0f$R_i$\u5206\u5b50\u5206\u6bcd\u90fd\u4e3a0\uff0c\u4e8e\u662f\u6709$\\prod_{j\\ne i}(x_i-x_j)=R_i(x_i)=L'(x_i) ^{\\tiny{\\textcolor{grey}{\\text{*\u6839\u636e\u6d1b\u5fc5\u8fbe\u6cd5\u5219}}}}$\n    \n    \u4e8e\u662f\u6b64\u90e8\u5206\u53ef\u7528\u591a\u9879\u5f0f\u591a\u70b9\u6c42\u503c\u6c42\u5f97\u3002\n    \n2. \u6574\u4f53\n\n\t\u4e0a\u9762\u90a3\u90e8\u5206\u6c42\u5b8c\u4e86\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u6c42\u6574\u4f53\u4e86\u3002\n    \n    \u7ecf\u4e0a\u4e00\u90e8\u5206\u7684\u8f6c\u5316\uff0c\u6211\u4eec\u73b0\u5728\u8981\u6c42$f(x)=\\sum_{i=0}^{n-1}\\frac{y_i}{\\prod_{j\\ne i}(x_i-x_j)}\\prod_{j\\ne i}(x-x_j)$\n    \n    \u7136\u540e\u6211\u4eec\u53ef\u4ee5NTT\u4e00\u4e0b\uff0c\u4e8e\u662f~~\u8d85\u957f\u516c\u5f0f\u8b66\u544a~~\n    \n    $$f(x)=\\Large[\\normalsize\\prod_{i=\\lfloor\\frac{n}{2}\\rfloor+1}^{n-1}(x-x_i)\\Large]\\{\\normalsize\\sum_{i=0}^{\\lfloor\\frac{n}{2}\\rfloor}\\Large[\\normalsize\\frac{y_i}{\\prod_{j\\ne i}(x_i-x_j)}\\Large][\\normalsize\\prod_{0\\le j\\le \\lfloor\\frac{n}{2}\\rfloor,j\\ne i}(x-x_j)\\Large]\\}\\normalsize+\\Large[\\normalsize\\prod_{i=0}^{\\lfloor\\frac{n}{2}\\rfloor}(x-x_i)\\Large]\\normalsize\\Large[\\normalsize\\sum_{i=\\lfloor\\frac{n}{2}\\rfloor+1}^{n-1}\\quad \\prod_{\\lfloor\\frac{n}{2}\\rfloor<j<n,j\\ne i}(x-x_j)\\Large]\\normalsize$$\n    \n    \u4e2a\u4eba\u89c9\u5f97\u8fd9\u4e2a\u516c\u5f0f\u88ab\u5f3a\u5236\u6027\u52a0\u62ec\u53f7\u540e\u597d\u8bfb\u4e86\u8bb8\u591a\u3002\u3002\u3002\n    \n\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u5c01\u88c5\u5ea6\u53ef\u9ad8\u4e86QAQ\uff09\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\n\nconst int P = 998244353;\n\nint n, m;\nvector<int> x, y, z, ans;\nvector<vector<int>> p;\n\nnamespace commonTool{\n    inline int power(ll x, int y=P-2){\n        int ans=1;\n        for(; y; y>>=1, x=x*x%P) if(y&1) ans=ans*x%P;\n        return ans;\n    }\n    \n    inline int power2to(int x){\n        int n=1;\n        while(n<=x) n<<=1;\n        return n;\n    }\n    \n    inline int mod(int x){\n        return x<P?x:x-P;\n    }\n    inline void NTT(vector<int> &f, int g, int n){\n        using namespace commonTool;\n        f.resize(n);\n        for(int i=0, j=0; i<n; ++i){\n            if(i>j) swap(f[i], f[j]);\n            for(int k=n>>1; (j^=k)<k; k>>=1);\n        }\n        vector<int> w(n>>1);\n        for(int i=1; i<n; i<<=1){\n            for(int j=w[0]=1, w0=(g==1?power(3, (P-1)/i/2):power(power(3, (P-1)/i/2))); j<i; ++j) w[j]=(ll)w[j-1]*w0%P;\n            for(int j=0; j<n; j+=i<<1){\n                for(int k=j; k<j+i; ++k){\n                    int t=(ll)f[k+i]*w[k-j]%P;\n                    f[k+i]=mod(f[k]-t+P);\n                    f[k]=mod(f[k]+t);\n                }\n            }\n        }\n        if(g==-1) for(int i=0, I=power(n); i<n; ++i) f[i]=(ll)f[i]*I%P;\n    }\n}\n\nnamespace sptInter{\n    inline vector<int> add(const vector<int> &f, const vector<int> &g){\n        vector<int> ans=f;\n        for(unsigned i=0; i<f.size(); ++i) (ans[i]+=g[i])%=P;\n        return ans;\n    }\n    \n    inline vector<int> multi(const vector<int> &f, const vector<int> &g){\n        using namespace commonTool;\n        vector<int> F=f, G=g;\n        int p=power2to(f.size()+g.size()-2);\n        NTT(F, 1, p), NTT(G, 1, p);\n        for(int i=0; i<p; ++i) F[i]=(ll)F[i]*G[i]%P;\n        NTT(F, -1, p);\n        return F.resize(f.size()+g.size()-1), F;\n    }\n    \n    inline vector<int> inv(const vector<int> &f, int n=-1){\n        using namespace commonTool;\n        if(n==-1) n=f.size();\n        vector<int> ans;\n        if(n==1) return ans.push_back(power(f[0])), ans;\n        ans=inv(f, (n+1)/2);\n        vector<int> tmp(&f[0], &f[0]+n);\n        int p=power2to(n*2-2);\n        NTT(tmp, 1, p), NTT(ans, 1, p);\n        for(int i=0; i<p; ++i) ans[i]=(2-(ll)ans[i]*tmp[i]%P+P)*ans[i]%P;\n        NTT(ans, -1, p);\n        return ans.resize(n), ans;\n    }\n    \n    inline void div(const vector<int> &a, const vector<int> &b, vector<int> &d, vector<int> &r){\n        if(b.size()>a.size()) return (void)(d.clear(), r=a);\n        vector<int> A=a, B=b, iB;\n        int n=a.size(), m=b.size();\n        reverse(A.begin(), A.end()), reverse(B.begin(), B.end());\n        B.resize(n-m+1), iB=inv(B, n-m+1);\n        d=multi(A, iB);\n        d.resize(n-m+1), reverse(d.begin(), d.end());\n        r=multi(b, d);\n        for(int i=0; i<m-1; ++i) r[i]=(P+a[i]-r[i])%P;\n        r.resize(m-1);\n    }\n    \n    inline vector<int> der(const vector<int> &a){\n        vector<int> ans;\n        ans.resize(a.size()-1);\n        for(unsigned i=1; i<a.size(); ++i) ans[i-1]=(ll)a[i]*i%P;\n        return ans;\n    }\n    \n    void evalinit(int l, int r, int t, const vector<int> &a){\n        if(l==r) return p[t].clear(), p[t].push_back(P-a[l]), p[t].push_back(1);\n        int mid=(l+r)/2, k=t<<1;\n        evalinit(l, mid, k, a), evalinit(mid+1, r, k|1, a);\n        p[t]=multi(p[k], p[k|1]);\n    }\n    \n    inline void eval(int l, int r, int t, const vector<int> &f, const vector<int> &a){\n        if(r-l+1<=512){\n            for(int i=l; i<=r; ++i){\n                int x=0, j=f.size(), a1=a[i], a2=(ll)a[i]*a[i]%P, a3=(ll)a[i]*a2%P, a4=(ll)a[i]*a3%P, a5=(ll)a[i]*a4%P, a6=(ll)a[i]*a5%P, a7=(ll)a[i]*a6%P, a8=(ll)a[i]*a7%P;\n                while(j>=8)\n                    x=((ll)x*a8+(ll)f[j-1]*a7+(ll)f[j-2]*a6+(ll)f[j-3]*a5+(ll)f[j-4]*a4+(ll)f[j-5]*a3+(ll)f[j-6]*a2+(ll)f[j-7]*a1+f[j-8])%P, j-=8;\n                while(j--) x=((ll)x*a[i]+f[j])%P;\n                ans.push_back(x);\n            }\n            return;\n        }\n        vector<int> tmp;\n        div(f, p[t], tmp, tmp);\n        eval(l, (l+r)/2, t<<1, tmp, a), eval((l+r)/2+1, r, t<<1|1, tmp, a);\n    }\n}\n\ninline vector<int> eval(const vector<int> &f, const vector<int> &a, int flag=-1){\n    if(flag==-1) p.resize(a.size()<<2), evalinit(0, a.size()-1, 1, a);\n    ans.clear(), eval(0, a.size()-1, 1, f, a);\n    return ans;\n}\n\nint main() {\n    cin>>n>>m, x.resize(n), y.resize(m);\n    for(int i=0; i<n; ++i) cin>>x[i];\n    for(int i=0; i<m; ++i) cin>>y[i];\n    y=eval(x,y);\n    for(int i=0; i<m; ++i) cout<<y[i]<<' ';\n    return 0;\n}\n```",
        "postTime": 1546008965,
        "uid": 119553,
        "name": "rEdWhitE_uMbrElla",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5158 \u3010\u3010\u6a21\u677f\u3011\u591a\u9879\u5f0f\u5feb\u901f\u63d2\u503c\u3011"
    }
]