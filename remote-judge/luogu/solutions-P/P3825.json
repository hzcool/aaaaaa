[
    {
        "content": "$NOI2017 Day2 T1$\u3002\n\n$2-SAT$\u3002\n\n\u6211\u90a3\u65f6\u5019\u4e00\u770b\u53d1\u73b0\u662fNOI/NOI+/CTSC\u7684\u96be\u5ea6\u6211\u6ca1\u6562\u53bb\u505a\uff0c\u4f46\u662f\u4e00\u770b\uff0c\u8fc7\u7684\u4eba\u8fd8\u662f\u6bd4\u8f83\u591a\u7684\uff0c\u5c31\u8bd5\u7740\u505a\u4e86\u4e00\u4e0b...\u4e0d\u591a\u8bf4\u4e86\uff0c\u8bb2\u4e00\u8bb2\u505a\u6cd5\uff1a\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u9664\u4e86x\u5730\u56fe\u4e4b\u5916\uff0c\u5176\u4f59\u7684\u5730\u56fe\u53ea\u9002\u5408\u4e24\u79cd\u8d5b\u8f66\u3002\u800c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5148\u5047\u8bbe\u6240\u6709\u7684\u5730\u56fe\u90fd\u9002\u5408\u4e14\u53ea\u9002\u5408\u4e24\u79cd\u8d5b\u8f66\uff0c\u8fd9\u6837\u5c31\u662f$2-SAT$\u88f8\u9898\u4e86\u3002\n\n\u5bf9\u4e8e\u6bcf\u573a\u6e38\u620f\u7528\u4e24\u4e2a\u70b9$i$\u548c$i'$\uff0c\u5206\u522b\u8868\u793a\u7b2c$i$\u573a\u6e38\u620f\u4f7f\u7528\u8be5\u5730\u56fe\u9002\u5408\u7684\u7b2c\u4e00\u79cd\u8d5b\u8f66\u548c\u7b2c\u4e8c\u79cd\u8d5b\u8f66\uff08\u4e3e\u4f8b\uff1a\u5982\u679c\u7b2c$i$\u573a\u6e38\u620f\u7684\u5730\u56fe\u4e0d\u9002\u5408A\u8d5b\u8f66\uff0c\u90a3\u4e48\u70b9$i$\u8868\u793a\u7b2c$i$\u573a\u6e38\u620f\u4f7f\u7528B\u8d5b\u8f66\uff0c\u70b9$i'$\u8868\u793a\u7b2c$i$\u573a\u6e38\u620f\u4f7f\u7528C\u8d5b\u8f66\uff09\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u8bbe$u$\u4e3a\u8868\u793a\u300c\u7b2c$i$\u573a\u6e38\u620f\u4f7f\u7528\u578b\u53f7\u4e3a$hi$\u7684\u8d5b\u8f66\u300d\u7684\u70b9\uff08\u5728\u7b2c$i$\u573a\u6e38\u620f\u7684\u5730\u56fe\u9002\u5408\u578b\u53f7\u4e3a$hi$\u7684\u8d5b\u8f66\u7684\u60c5\u51b5\u4e0b\uff09\uff0c$v$\u4e3a\u8868\u793a\u300c\u7b2c$j$\u573a\u6e38\u620f\u4f7f\u7528\u578b\u53f7\u4e3a$hj$\u7684\u8d5b\u8f66\u300d\u7684\u70b9\uff08\u5728\u7b2c$j$\u573a\u6e38\u620f\u7684\u5730\u56fe\u9002\u5408\u578b\u53f7\u4e3a$hj$\u7684\u8d5b\u8f66\u7684\u60c5\u51b5\u4e0b\uff09\uff0c\n\n\u90a3\u4e48\uff0c\n\n\u5982\u679c\u7b2c$i$\u573a\u6e38\u620f\u7684\u5730\u56fe\u4e0d\u9002\u5408\u578b\u53f7\u4e3a$hi$\u7684\u8d5b\u8f66\uff0c\u90a3\u4e48\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002\n\n\u5982\u679c\u7b2c$i$\u573a\u6e38\u620f\u7684\u5730\u56fe\u9002\u5408\u578b\u53f7\u4e3a$hi$\u7684\u8d5b\u8f66\uff0c\u4f46\u7b2c$j$\u573a\u6e38\u620f\u7684\u5730\u56fe\u4e0d\u9002\u5408\u578b\u53f7\u4e3a$hj$\u7684\u8d5b\u8f66\uff0c\u90a3\u4e48\u5efa\u8fb9$u->u'$\uff0c\u8868\u793a\u5982\u679c\u7b2c$i$\u573a\u6e38\u620f\u4f7f\u7528\u4e86\u578b\u53f7\u4e3a$hi$\u7684\u8d5b\u8f66\u5219\u4e00\u5b9a\u65e0\u89e3\u3002\n\n\u5982\u679c\u7b2c$i$\u573a\u6e38\u620f\u7684\u5730\u56fe\u9002\u5408\u578b\u53f7\u4e3a$hi$\u7684\u8d5b\u8f66\uff0c\u7b2c$j$\u573a\u6e38\u620f\u7684\u5730\u56fe\u9002\u5408\u578b\u53f7\u4e3a$hj$\u7684\u8d5b\u8f66\uff0c\u90a3\u4e48\u5efa\u8fb9$u->v$\uff0c\u8868\u793a\u5982\u679c\u7b2c$i$\u573a\u6e38\u620f\u4f7f\u7528\u4e86\u578b\u53f7\u4e3a$hi$\u7684\u8d5b\u8f66\u5219\u7b2c$j$\u573a\u6e38\u620f\u5fc5\u987b\u4f7f\u7528\u578b\u53f7\u4e3a$hj$\u7684\u8d5b\u8f66\uff0c\u518d\u5efa\u8fb9$v'->u'$\uff0c\u8868\u793a\u5982\u679c\u7b2c$j$\u573a\u6e38\u620f\u4e0d\u4f7f\u7528\u578b\u53f7\u4e3a$hj$\u7684\u8d5b\u8f66\u5219\u7b2c$i$\u573a\u6e38\u620f\u4e0d\u5f97\u4f7f\u7528\u578b\u53f7\u4e3a$hi$\u7684\u8d5b\u8f66\u3002\n\n\u6240\u6709\u8fb9\u90fd\u5efa\u5b8c\u4e4b\u540e\u8dd1\u4e00\u904d$Tarjan$\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9\u3002\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a$i$\uff0c\u5982\u679c$i$\u548c$i'$\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u9762\uff0c\u90a3\u4e48\u6b64\u65f6\u65e0\u89e3\u3002\n\n\u5426\u5219\u8f93\u51fa\u65b9\u6848\u3002$2-SAT$\u8f93\u51fa\u65b9\u6848\u7684\u65b9\u6cd5\u4e3a\uff1a\u5148\u628a\u7f29\u70b9\u4e4b\u540e\u7684\u65b0\u56fe\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u7136\u540e\u5224\u65ad\u6bcf\u4e2a\u70b9$i$\uff0c\u5982\u679c$i$\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u62d3\u6251\u5e8f\u5728$i'$\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u62d3\u6251\u5e8f\u4e4b\u540e\uff0c\u90a3\u4e48\u7b2c$i$\u573a\u6e38\u620f\u4f7f\u7528\u8be5\u5730\u56fe\u9002\u5408\u7684\u7b2c\u4e00\u79cd\u8d5b\u8f66\uff0c\u5426\u5219\u4f7f\u7528\u7b2c\u4e8c\u79cd\u8d5b\u8f66\u3002\u4f46\u662f\u7531\u4e8e$Tarjan$\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u662f\u6309\u62d3\u6251\u6392\u5e8f\u7684\u9006\u5e8f\u7ed9\u51fa\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7\u5224\u65ad\u5373\u53ef\u3002\u5373\u5982\u679c$bel[]$\u4e3a\u6bcf\u4e2a\u70b9\u7684\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7\uff0c\u90a3\u4e48\u5224\u65ad\u4e3a\uff1a\u5982\u679c$bel[i]<bel[i']$\uff0c\u90a3\u4e48\u4f7f\u7528\u8be5\u5730\u56fe\u9002\u5408\u7684\u7b2c\u4e00\u79cd\u8d5b\u8f66\uff0c\u5426\u5219\u4f7f\u7528\u7b2c\u4e8c\u79cd\u8d5b\u8f66\u3002\n\n\u73b0\u5728\u8003\u8651x\u5730\u56fe\uff0c\u8003\u8651\u5230\u53ea\u67098\u5f20x\u5730\u56fe\uff0c\u5982\u679c\u5047\u8bbe\u5b83\u4e5f\u53ea\u9002\u5408\u4e24\u79cd\u8d5b\u8f66\uff0c\u90a3\u4e48\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2ax\u5730\u56fe\u4e0d\u9002\u5408\u8d5b\u8f66A\u6216\u4e0d\u9002\u5408\u8d5b\u8f66B\uff08\u56e0\u4e3a\u4e0d\u9002\u5408\u8d5b\u8f66A\u5c31\u662f\u9002\u5408\u8d5b\u8f66BC\uff0c\u4e0d\u9002\u5408\u8d5b\u8f66B\u5c31\u662f\u9002\u5408\u8d5b\u8f66AC\uff0c\u8fd9\u6837\u5c31\u5305\u542b\u4e86ABC\u4e09\u79cd\u8d5b\u8f66\uff09\uff0c\u8fd9\u6837\u6bcf\u79cd\u5730\u56fe\u5c31\u90fd\u53ea\u9002\u5408\u4e24\u79cd\u8d5b\u8f66\u4e86\u3002\u5224\u65ad\u65f6\uff0c\u5982\u679c\u5df2\u7ecf\u679a\u4e3e\u904d\u4e86\u6240\u6709\u7684$2^d$\u79cd\u72b6\u6001\u90fd\u662f\u65e0\u89e3\uff0c\u5219\u539f\u95ee\u9898\u65e0\u89e3\uff0c\u5426\u5219\u8f93\u51fa\u4efb\u610f\u4e00\u79cd\u65b9\u6848\u3002\n\n\u590d\u6742\u5ea6$O((n+m)*2^d)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\ninline char get() {\n    char c; while ((c = getchar()) != 'A' && c != 'B' && c != 'C');\n    return c;\n}\nconst int N = 2e5 + 5;\nint n, d, m, a1[N], b1[N], ecnt, nxt[N], adj[N], go[N], dfn[N], low[N],\ntimes, num, bel[N], top, stk[N], cyx[N];\nchar s[N], a2[N], b2[N], orz[N];\nbool ins[N], flag;\nvoid add_edge(int u, int v) {\n    nxt[++ecnt] = adj[u]; adj[u] = ecnt; go[ecnt] = v;\n}\nint neg(int x) {return x > n ? x - n : x + n;}\nint tran(int x, char c) {\n    if (s[x] == 'a') return c == 'B' ? x : x + n;\n    if (s[x] == 'b' || s[x] == 'c') return c == 'A' ? x : x + n;\n    if (c == 'C') return x + n; return x;\n}\nvoid Tarjan(int u) {\n    dfn[u] = low[u] = ++times; ins[stk[++top] = u] = 1;\n    for (int e = adj[u], v; e; e = nxt[e])\n        if (!dfn[v = go[e]]) {\n            Tarjan(v);\n            low[u] = min(low[u], low[v]);\n        }\n        else if (ins[v]) low[u] = min(low[u], dfn[v]);\n    if (dfn[u] == low[u]) {\n        int v; bel[u] = ++num; ins[u] = 0;\n        while (v = stk[top--], v != u) bel[v] = num, ins[v] = 0;\n    }\n}\nbool solve() {\n    int i; ecnt = times = num = 0;\n    for (i = 1; i <= (n << 1); i++) bel[i] = adj[i] = dfn[i] = 0;\n    for (i = 1; i <= m; i++) if (s[a1[i]] != 'x' && s[b1[i]] != 'x') {\n        if (a2[i] == s[a1[i]] - 32) continue;\n        int u = tran(a1[i], a2[i]), v;\n        if (b2[i] == s[b1[i]] - 32) {add_edge(u, neg(u)); continue;}\n        v = tran(b1[i], b2[i]); add_edge(u, v);\n        add_edge(neg(v), neg(u));\n    }\n    else {\n        char o = s[a1[i]], p = s[b1[i]];\n        int u, v, x = cyx[a1[i]], y = cyx[b1[i]];\n        if (o == 'x' && p == 'x') {\n            if (a2[i] == orz[x]) continue;\n            u = tran(a1[i], a2[i]), v;\n            if (b2[i] == orz[y]) {add_edge(u, neg(u)); continue;}\n            v = tran(b1[i], b2[i]); add_edge(u, v);\n            add_edge(neg(v), neg(u));\n        }\n        else if (o == 'x' && p != 'x') {\n            if (a2[i] == orz[x]) continue;\n            u = tran(a1[i], a2[i]), v;\n            if (b2[i] == s[b1[i]] - 32) {add_edge(u, neg(u)); continue;}\n            v = tran(b1[i], b2[i]); add_edge(u, v);\n            add_edge(neg(v), neg(u));\n        }\n        else {\n            if (a2[i] == s[a1[i]] - 32) continue;\n            u = tran(a1[i], a2[i]), v;\n            if (b2[i] == orz[y]) {add_edge(u, neg(u)); continue;}\n            v = tran(b1[i], b2[i]); add_edge(u, v);\n            add_edge(neg(v), neg(u));\n        }\n    }\n    for (i = 1; i <= (n << 1); i++) if (!dfn[i]) Tarjan(i);\n    for (i = 1; i <= n; i++) if (bel[i] == bel[i + n]) return 0;\n    for (i = 1; i <= n; i++) {\n        if (bel[i] < bel[i + n]) {\n            if (s[i] == 'a') putchar('B');\n            else if (s[i] == 'b' || s[i] == 'C') putchar('A');\n            else if (orz[cyx[i]] == 'A') putchar('B');\n            else putchar('A');\n        }\n        else {\n            if (s[i] == 'a' || s[i] == 'b') putchar('C');\n            else if (s[i] == 'c') putchar('B');\n            else if (orz[cyx[i]] == 'A') putchar('C');\n            else putchar('B');\n        }\n    }\n    return 1;\n}\nvoid dfs(int dep) {\n    if (dep > d) {\n        if (!flag) flag = solve();\n        if (flag) exit(0);\n        return;\n    }\n    orz[dep] = 'A'; dfs(dep + 1);\n    orz[dep] = 'B'; dfs(dep + 1);\n}\nint main() {\n    int i; n = read(); read();\n    scanf(\"%s\", s + 1); m = read();\n    for (i = 1; i <= n; i++) if (s[i] == 'x') cyx[i] = ++d;\n    for (i = 1; i <= m; i++) a1[i] = read(), a2[i] = get(),\n        b1[i] = read(), b2[i] = get(); dfs(1);\n    if (!flag) puts(\"-1\");\n    return 0;\n}\n```",
        "postTime": 1502875474,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3825 \u3010\u6e38\u620f\u3011"
    },
    {
        "content": "## \u95f2\u8bdd\u65f6\u523b \n\n~~\u672c\u849f\u84bb\u7b2c $2$ \u9053\u901a\u8fc7\u7684\u9ed1\u9898 \uff0c\u679c\u7136\u8fd8\u662f\u6709\u4eba\u8bf4\u6c34\u3002\u3002\u3002~~ \n\n\u6211\u89c9\u5f97\u8fd9\u4e2a\u9898\u51fa\u7684\u5f88\u597d\uff0c\u5efa\u8fb9\u7684\u65f6\u5019\u7ec6\u8282\u5f88\u591a\uff0c\u7801\u91cf\u7a0d\u5927\uff0c\u529d\u5927\u5bb6\u5207\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u7ec6\u5fc3\u4e86\uff0c\u4e0d\u7136\u5c31\u4f1a\u50cf\u6211\u4e00\u6837\u628a \u201c $=$ \u201d \u6253\u6210 \u201c\uff1b\u201d \u7136\u540e\u8c03\u4e86\u4e00\u5929\uff1b\n\n## \u9898\u76ee\u5927\u610f\n\u6709 $n$ \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e09\u79cd\u53d6\u503c\uff0c\u81f3\u591a\u53ea\u6709 $d$ \u4e2a\u53d8\u91cf\u53ef\u4ee5\u53d6\u5230\u4e09\u79cd\u53d6\u503c\uff0c\u5176\u4f59\u7684\u90fd\u53ea\u6709\u4e00\u79cd\u4e0d\u80fd\u53d6\uff0c\u8fd8\u6709 $m$ \u4e2a\u5173\u7cfb\u9650\u5236\u5f0f\uff0c\u95ee\u662f\u5426\u6709\u89e3\uff0c\u6709\u89e3\u8f93\u51fa\u4e00\u79cd\u65b9\u6848\uff1b\n\n## \u9898\u89e3\n\u8fd8\u6ca1\u6709\u638c\u63e1\u597d $2 - SAT$ \u7684\u7ae5\u978b\u6233[\u8fd9\u91cc](https://www.cnblogs.com/xcg123/p/11818059.html)\uff1b\n\n### \u2460. \u5148\u8003\u8651 $d = 0$ \u7684\u60c5\u51b5\uff1a\n\n\u6b64\u65f6\u6bcf\u573a\u6e38\u620f\u53ea\u80fd\u9009\u62e9\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u8d5b\u8f66\uff0c\u53d1\u73b0\u662f\u4e00\u4e2a\u88f8\u7684 $2-SAT$ \u95ee\u9898\uff1b\n\n\u8003\u8651\u600e\u4e48\u7ed9\u70b9\u7f16\u53f7\uff1a\n\n\u5bf9\u4e8e\u4e00\u573a\u6e38\u620f $s$\uff0c\u5982\u679c\u5730\u56fe\u662f\u7c7b\u578b $a$\uff0c\u90a3\u4e48\u53ef\u9009\u7684\u8d5b\u8f66\u7c7b\u578b\u4e3a ' $B$ ' \u548c ' $C$ '\uff0c\u90a3\u4e48 ' $B$ ' \u7684\u7f16\u53f7\u5c31\u662f $s$\uff0c' $C$ ' \u7684\u7f16\u53f7\u5c31\u662f $s+n$\uff1b\u5982\u679c\u5730\u56fe\u662f\u7c7b\u578b  $b$\uff0c\u90a3\u4e48\u53ef\u9009\u7684\u8d5b\u8f66\u7c7b\u578b\u4e3a ' $A$ ' \u548c ' $C$ '\uff0c\u90a3\u4e48 ' $A$ ' \u7684\u7f16\u53f7\u5c31\u662f $s$\uff0c ' $C$ ' \u7684\u7f16\u53f7\u5c31\u662f $s+n$\uff1b\u5982\u679c\u5730\u56fe\u7684\u7c7b\u578b\u662f $c$\uff0c\u90a3\u4e48\u53ef\u9009\u7684\u8d5b\u8f66\u7c7b\u578b\u4e3a ' $A$ ' \u548c ' $B$ '\uff0c\u90a3\u4e48 ' $A$ ' \u7684\u7f16\u53f7\u5c31\u662f $s$\uff0c' $C$ ' \u7684\u7f16\u53f7\u5c31\u662f $s+n$\uff1b\n\n\u603b\u7684\u6765\u8bf4\u5c31\u662f\u5b57\u6bcd\u5c0f\u7684\u7f16\u53f7\u9760\u524d\uff0c\u5b57\u6bcd\u5927\u7684\u7f16\u53f7\u9760\u540e\uff1b \n```\nint get(int k,char s)   //\u5728\u7b2ck\u4e2a\u5730\u56fe\u4e0a,\u7c7b\u578b\u4e3as\u7684\u8d5b\u8f66\u7684\u7f16\u53f7\u662f\u591a\u5c11 \n{\n    //S[k]\u8868\u793a\u7b2ck\u4e2a\u5730\u56fe\u7684\u7c7b\u578b \n    if(S[k]=='a')        //\u53ea\u80fd\u7528\u8d5b\u8f66'B'\u548c'C' \n    {\n        if(s=='B') return k; \n        return k+n;\n    }\n    if(S[k]=='b')        //\u53ea\u80fd\u7528\u8d5b\u8f66'A'\u548c'C' \n    {\n        if(s=='A') return k;\n        else return k+n;\n    }\n    if(S[k]=='c')        //\u53ea\u80fd\u7528\u8d5b\u8f66'A'\u548c'B' \n    {\n        if(s=='A') return k;\n        return k+n;\n    }\n}\n```\n\n\u641e\u5b9a\u4e86\u7f16\u53f7\u7684\u95ee\u9898\uff0c\u73b0\u5728\u8003\u8651\u600e\u4e48\u5efa\u8fb9\uff1a\n\n\u8bbe\u4e00\u573a\u6e38\u620f\u80fd\u4f7f\u7528\u7684\u4e24\u79cd\u8d5b\u8f66\u7684\u7c7b\u578b\u5206\u522b\u662f $i$\uff0c$i '$ \uff1b\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7279\u6b8a\u8981\u6c42\u56db\u5143\u7ec4\uff08$a$\uff0c$h_a$\uff0c$b$\uff0c$h_b$\uff09\uff0c\u8868**\u793a\u5982\u679c\u7b2c $a$ \u573a\u6e38\u620f\u7528\u4e86\u7c7b\u578b\u4e3a $h_a$ \u7684\u8d5b\u8f66\uff0c\u7b2c $b$ \u573a\u6e38\u620f\u5fc5\u987b\u4f7f\u7528\u7c7b\u578b\u4e3a $h_b$ \u7684\u8d5b\u8f66**\uff0c\u6211\u4eec\u8981\u5206\u4e00\u4e0b\u4e09\u79cd\u60c5\u51b5\u8003\u8651\uff1a\n\n**$<1>$ \u5982\u679c\u7b2c $a$  \u573a\u6e38\u620f\u7531\u4e8e\u5730\u56fe\u7684\u9650\u5236\u672c\u6765\u5c31\u4e0d\u80fd\u4f7f\u7528\u7c7b\u578b\u4e3a $h_a$ \u7684\u8d5b\u8f66\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u9700\u8981\u5efa\u4efb\u4f55\u8fb9\uff0c\u76f4\u63a5 $continue$\uff1b**\n\n**$<2>$ \u5982\u679c\u7b2c $a$ \u573a\u6e38\u620f\u80fd\u4f7f\u7528\u7c7b\u578b\u4e3a $h_a$ \u7684\u8d5b\u8f66\uff0c\u4f46\u662f\u7b2c $b$ \u573a\u6e38\u620f\u7531\u4e8e\u5730\u56fe\u7684\u9650\u5236\u4e0d\u80fd\u4f7f\u7528\u7c7b\u578b\u4e3a $h_b$ \u7684\u8d5b\u8f66\uff0c\u5c31\u8bf4\u660e\u7b2c $a$ \u573a\u6e38\u620f\u662f\u4e0d\u80fd\u4f7f\u7528\u7c7b\u578b\u4e3a $h_a$ \u7684\u8d5b\u8f66\u7684\uff0c\u4e0d\u7136\u5c31\u65e0\u89e3\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u8fde\u8fb9 $< h_a , {h_a} ' >$ \u8868\u793a\u7b2c $a$ \u573a\u6e38\u620f\u53ea\u80fd\u7528\u7c7b\u578b\u4e3a ${h_a} '$ \u7684\u8d5b\u8f66\uff1b**\n\n**$<3>$ \u5982\u679c\u7b2c $a$ \u573a\u6e38\u620f\u80fd\u4f7f\u7528\u7c7b\u578b\u4e3a $h_a$ \u7684\u8d5b\u8f66\uff0c\u5e76\u4e14\u7b2c $b$ \u573a\u6e38\u620f\u80fd\u4f7f\u7528\u7c7b\u578b\u4e3a $h_b$ \u7684\u8d5b\u8f66\uff0c\u90a3\u4e48\u6211\u4eec\u6839\u636e\u9650\u5236\u8fde\u8fb9 $< h_a , h_b >$ \u8868\u793a\u5982\u679c\u6211\u4eec\u7b2c $a$ \u573a\u6e38\u620f\u9009\u62e9\u4e86\u7c7b\u578b\u4e3a $h_a$ \u7684\u8d5b\u8f66\uff0c\u90a3\u4e48\u7b2c $b$ \u573a\u6e38\u620f\u5fc5\u987b\u9009\u62e9\u7c7b\u578b\u4e3a $h_b$ \u7684\u8d5b\u8f66\uff1b\u53cd\u4e4b\uff0c\u5982\u679c\u6211\u4eec\u7b2c $b$ \u573a\u6e38\u620f\u6ca1\u6709\u4f7f\u7528\u7c7b\u578b\u4e3a $h_b$ \u7684\u8d5b\u8f66\uff0c\u8bf4\u660e\u7b2c $a$ \u573a\u6e38\u620f\u4e00\u5b9a\u6ca1\u6709\u9009\u62e9\u7c7b\u578b\u4e3a $h_a$ \u7684\u8d5b\u8f66\uff0c\u4e8e\u662f\u6211\u4eec\u518d\u8fde\u8fb9 $< {h_b} ' , {h_a} ' >$ ( \u9006\u5426\u547d\u9898\u4e0e\u539f\u547d\u9898\u7b49\u4ef7 )\uff1b**\n\n \n\n\u5efa\u5b8c\u8fb9\u540e\uff0c\u6211\u4eec\u5bf9\u6240\u6709\u70b9\u8fdb\u884c\u4e00\u6b21 $tarjan$ \u6c42\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u7136\u540e\u518d\u5224\u65ad\u662f\u5426\u6709\u89e3\uff0c\u82e5\u6709\u89e3\u5c31**\u8f93\u51fa\u5f3a\u8054\u901a\u5206\u91cf\u8f83\u5c0f\u7684\u90a3\u8f86\u8d5b\u8f66**\u5c31\u597d\u4e86\uff08\u8fd9\u4e2a\u4e0d\u9700\u8981\u591a\u8bf4\u4e86\u5427$qwq$\uff09\n\n```\nint get(int k,char s)   //\u5728\u7b2ck\u4e2a\u5730\u56fe\u4e0a,\u7c7b\u578b\u4e3as\u7684\u8d5b\u8f66\u7684\u7f16\u53f7\u662f\u591a\u5c11 \n{\n    //S[k]\u8868\u793a\u7b2ck\u4e2a\u5730\u56fe\u7684\u7c7b\u578b \n    if(S[k]=='a')        //\u53ea\u80fd\u7528\u8d5b\u8f66'B'\u548c'C' \n    {\n        if(s=='B') return k; \n        return k+n;\n    }\n    if(S[k]=='b')        //\u53ea\u80fd\u7528\u8d5b\u8f66'A'\u548c'C' \n    {\n        if(s=='A') return k;\n        else return k+n;\n    }\n    if(S[k]=='c')        //\u53ea\u80fd\u7528\u8d5b\u8f66'A'\u548c'B' \n    {\n        if(s=='A') return k;\n        return k+n;\n    }\n}\nint fan(int a)                            //\u6c42\u5728\u4e00\u573a\u6e38\u620f\u4e2d\u7f16\u53f7\u4e3aa\u7684\u8d5b\u8f66\u5bf9\u5e94\u7684\u53e6\u4e00\u8f86\u8d5b\u8f66\u662f\u591a\u5c11       \n{\n    if(a>n) return a-n;                   //\u5982\u679c\u8fd9\u8f86\u8d5b\u8f66\u7684\u7f16\u53f7\u5927,\u5219\u53e6\u4e00\u8f86\u8d5b\u8f66\u7684\u7f16\u53f7\u5c0f \n    return a+n;                           //\u5982\u679c\u8fd9\u8f86\u8d5b\u8f66\u7684\u7f16\u53f7\u5c0f,\u5219\u53e6\u4e00\u8f86\u8d5b\u8f66\u7684\u7f16\u53f7\u5927 \n}\nbool work()\n{\n    clean();\n    for(int i=1;i<=m;i++)\n    {\n        a=num[i][1];ha=s[i][1];           //\u5982\u679c\u7b2ca\u573a\u6e38\u620f\u4f7f\u7528\u4e86\u7c7b\u578b\u4e3aha\u7684\u8d5b\u8f66,\u5219\u7b2cb\u573a\u6e38\u620f\u5fc5\u987b\u4f7f\u7528\u7c7b\u578b\u4e3ahb\u7684\u8d5b\u8f66 \n        b=num[i][2];hb=s[i][2];\n        if(S[a]==ha+32) continue;         //\u60c5\u51b5<1>:\u5982\u679c\u7b2ca\u573a\u6e38\u620f\u672c\u6765\u5c31\u4e0d\u80fd\u4f7f\u7528\u7c7b\u578b\u4e3aha\u7684\u8d5b\u8f66,\u76f4\u63a5continue \n        int n1=get(a,ha);                 //\u6c42\u51fa\u5728\u7b2ca\u573a\u6e38\u620f\u7684\u5730\u56fe\u4e0a\u7c7b\u578b\u4e3aha\u7684\u8d5b\u8f66\u7684\u7f16\u53f7 \n        int n2=get(b,hb);                 //\u6c42\u51fa\u5728\u7b2cb\u573a\u6e38\u620f\u7684\u5730\u56fe\u4e0a\u7c7b\u578b\u4e3ahb\u7684\u8d5b\u8f66\u7684\u7f16\u53f7  \n        if(S[b]==hb+32)                   //\u60c5\u51b5<2>:\u5982\u679c\u662f\u7b2cb\u573a\u6e38\u620f\u4e0d\u80fd\u4f7f\u7528\u7c7b\u578b\u4e3ahb\u7684\u8d5b\u8f66 \n            add(n1,fan(n1));              //\u90a3\u4e48\u7b2ca\u573a\u6e38\u620f\u53ea\u80fd\u4f7f\u7528\u7c7b\u578b\u4e3aha'\u7684\u8d5b\u8f66\u4e86 \n        else                              //\u60c5\u51b5<3>:\u82e5\u7b2ca\u573a\u6e38\u620f\u80fd\u7528\u7c7b\u578b\u4e3aha\u7684\u8d5b\u8f66,\u4e14\u7b2cb\u573a\u6e38\u620f\u80fd\u7528\u7c7b\u578b\u4e3ahb\u7684\u8d5b\u8f66 \n        {\n            add(n1,n2);                   //\u7b2ca\u573a\u6e38\u620f\u82e5\u7528\u7c7b\u578b\u4e3aha\u7684\u8d5b\u8f66,\u5219\u7b2cb\u573a\u6e38\u620f\u5fc5\u987b\u7528\u7c7b\u578b\u4e3ahb\u7684\u8d5b\u8f66 \n            add(fan(n2),fan(n1));         //\u53cd\u4e4b\u82e5\u7b2cb\u573a\u6e38\u620f\u6ca1\u7528\u7c7b\u578b\u4e3ahb\u7684\u8d5b\u8f66,\u5219\u7b2ca\u573a\u6e38\u620f\u6ca1\u6709\u7c7b\u578b\u4e3aha\u7684\u8d5b\u8f66 \n        }\n    }\n    for(int i=1;i<=2*n;i++)               //tarjan\u6c42\u5f3a\u8054\u901a\u5206\u91cf \n    {\n        if(!dfn[i]) tarjan(i);\n    }\n    for(int i=1;i<=n;i++)                 //\u5224\u65e0\u89e3\u60c5\u51b5 \n    {\n        if(scc[i]==scc[i+n]) return 0;\n    }\n    return 1;                             //\u5426\u5219\u6709\u89e3 \n}\n```\n\n### \u2461. \u7136\u540e\u8003\u8651 $d \u2260 0$ \u7684\u60c5\u51b5\uff1a\n\n\u7136\u540e\u90e8\u5206 $3-SAT$\uff1f\u8868\u793a\u6ca1\u89c1\u8fc7$qwq$\n\n\u89c2\u5bdf\u5230 $d$ \u7684\u8303\u56f4\u5f88\u5c0f\uff0c\u6700\u5927\u53ea\u6709 $8$\uff0c\u6240\u4ee5\u63a8\u6d4b\u6700\u540e\u7684\u590d\u6742\u5ea6\u53ef\u80fd\u662f\u4e00\u4e2a $O ( X^d )$\u7684\u590d\u6742\u5ea6\uff1b\n\n\u8003\u8651\u53ef\u4ee5\u53bb\u679a\u4e3e\u6bcf\u4e2a $x$ \u5730\u56fe\u4e0a\u4f7f\u7528\u4ec0\u4e48\u54ea\u4e24\u4e2a\u7c7b\u578b\u7684\u8d5b\u8f66\uff0c\u6362\u800c\u8a00\u4e4b\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e2a $x$ \u5730\u56fe\u662f $a$\uff0c$b$\uff0c$c$ \u4e09\u7c7b\u5730\u56fe\u7684\u54ea\u4e00\u7c7b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O$(\uff08$n+m$\uff09$*   3^d$\uff09\uff0c\u663e\u7136\u8fc7\u4e0d\u53bb\uff1b\n\n\u8003\u8651\u600e\u4e48\u4f18\u5316\uff1a\n\n\u5176\u5b9e\u6211\u4eec\u53ea\u8981\u679a\u4e3e\u662f $a$\uff0c$b$\uff0c$c$ \u7c7b\u5730\u56fe\u4e2d\u7684\u4e24\u79cd\u5c31\u597d\u4e86\uff0c\u5047\u5982\u4ee5 $a$\uff0c$b$ \u5730\u56fe\u4e3a\u4f8b\u5427\uff1a\n\n**\u82e5\u662f $a$ \u5730\u56fe\u5c31\u8bf4\u660e\u5728\u6b64 $x$ \u5730\u56fe\u4e0a\u53ef\u4ee5\u7528\u7c7b\u578b\u4e3a ' $B$ ' \u548c ' $C$ ' \u7684\u4e24\u79cd\u8d5b\u8f66\uff0c\u82e5\u662f $b$ \u5730\u56fe\u5c31\u8bf4\u660e\u5728\u6b64 $x$ \u5730\u56fe\u4e0a\u53ef\u4ee5\u7528\u7c7b\u578b\u4e3a ' $A$ ' \u548c ' $C$ ' \u7684\u4e24\u79cd\u8d5b\u8f66\uff0c\u8fd9\u6837\u4e09\u79cd\u7c7b\u578b\u7684\u8d5b\u8f66\u90fd\u5728\u6b64 $x$ \u5730\u56fe\u4e0a\u8bd5\u8fc7\u4e86\uff0c\u4e0d\u5c31\u6db5\u76d6\u4e86\u6240\u6709\u7684\u60c5\u51b5\u4e86\uff1f**  \n\n$dfs$ \u90e8\u5206\u7684\u4ee3\u7801\uff1a\n```\nvoid dfs(int k)                           //\u6211\u4eec\u5df2\u7ecf\u679a\u4e3e\u5230\u4e86\u7b2ck\u4e2ax\u578b\u5730\u56fe\u4e86 \n{\n    if(k>d)                               //\u679a\u4e3e\u5b8c\u6240\u6709\u7684x\u578b\u8dd1\u9053\u4e86\n    {\n        if(work()) bj=1;                  //\u8dd12-sat\u770b\u770b\u6b64\u65f6\u6709\u6ca1\u6709\u89e3 \n        return ;\n    } \n    for(int i=0;i<2;i++)                  //\u770b\u770b\u628a\u5b83\u641e\u6210\u54ea\u79cd\u7c7b\u578b\u7684\u5730\u56fe(\u4e0d\u80fd\u9009\u54ea\u79cd\u578b\u53f7\u7684\u8d5b\u8f66)\n    {\n        S[where[k]]=i+'a';                //\u8fd9\u91cc\u5c06x\u578b\u5730\u56fe\u53d8\u6210a,b\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u5730\u56fe \n        dfs(k+1);\n        if(bj) return ;                   //\u6709\u89e3\u76f4\u63a5\u8fd4\u56de \n    } \n}\n```\n\n\u5949\u4e0a\u5b8c\u6574\u4ee3\u7801\uff0c\u6ce8\u91ca\u91cc\u5199\u7684\u5f88\u8be6\u7ec6\uff1a\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#include<vector>\nusing namespace std;\nlong long read()\n{\n    char ch=getchar();\n    long long a=0,x=1;\n    while(ch<'0'||ch>'9')\n    {\n        if(ch=='-') x=-x;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        a=(a<<1)+(a<<3)+(ch-'0');\n        ch=getchar();\n    }\n    return a*x;\n}\nconst int N=1e6;\nint n,m,d,a,b,bj,top,tim,edge_sum,scc_sum;\nint st[N],dfn[N],low[N],vis[N],scc[N],head[N],where[10],num[N][3];\nchar s[N][3],S[N],ha,hb;\n\nstruct node\n{\n    int from,next,to;\n}A[N];\nvoid add(int from,int to)\n{\n    edge_sum++;\n    A[edge_sum].to=to;\n    A[edge_sum].next=head[from];\n    A[edge_sum].from=from;\n    head[from]=edge_sum;\n}\nvoid tarjan(int u)\n{\n    dfn[u]=low[u]=++tim;\n    st[++top]=u;\n    vis[u]=1;\n    for(int i=head[u];i;i=A[i].next)\n    {\n        int v=A[i].to;\n        if(!dfn[v])\n        {\n            tarjan(v);\n            low[u]=min(low[u],low[v]);\n        }\n        else if(vis[v]) low[u]=min(low[u],dfn[v]);\n    }\n    if(dfn[u]==low[u])\n    {\n        scc_sum++;\n        while(st[top]!=u)\n        {\n            vis[st[top]]=0;\n            scc[st[top]]=scc_sum;\n            top--;\n        }\n        vis[st[top]]=0;\n        scc[st[top]]=scc_sum;\n        top--;\n    }\n}\nvoid clean()\n{\n    memset(dfn,0,sizeof(dfn));\n    memset(low,0,sizeof(low));\n    memset(scc,0,sizeof(scc));\n    memset(vis,0,sizeof(vis));\n    memset(st,0,sizeof(st));\n    memset(head,0,sizeof(head));\n    memset(A,0,sizeof(A));\n    edge_sum=0;scc_sum=0;\n    tim=0;top=0;\n}\nint get(int k,char s)   //\u5728\u7b2ck\u4e2a\u5730\u56fe\u4e0a,\u7c7b\u578b\u4e3as\u7684\u8d5b\u8f66\u7684\u7f16\u53f7\u662f\u591a\u5c11 \n{\n    //S[k]\u8868\u793a\u7b2ck\u4e2a\u5730\u56fe\u7684\u7c7b\u578b \n    if(S[k]=='a')                         //\u53ea\u80fd\u7528\u8d5b\u8f66'B'\u548c'C' \n    {\n        if(s=='B') return k; \n        return k+n;\n    }\n    if(S[k]=='b')                         //\u53ea\u80fd\u7528\u8d5b\u8f66'A'\u548c'C' \n    {\n        if(s=='A') return k;\n        else return k+n;\n    }\n    if(S[k]=='c')                         //\u53ea\u80fd\u7528\u8d5b\u8f66'A'\u548c'B' \n    {\n        if(s=='A') return k;\n        return k+n;\n    }\n}\nint fan(int a)                            //\u6c42\u5728\u4e00\u573a\u6e38\u620f\u4e2d\u7f16\u53f7\u4e3aa\u7684\u8d5b\u8f66\u5bf9\u5e94\u7684\u53e6\u4e00\u8f86\u8d5b\u8f66\u662f\u591a\u5c11       \n{\n    if(a>n) return a-n;                   //\u5982\u679c\u8fd9\u8f86\u8d5b\u8f66\u7684\u7f16\u53f7\u5927,\u5219\u53e6\u4e00\u8f86\u8d5b\u8f66\u7684\u7f16\u53f7\u5c0f \n    return a+n;                           //\u5982\u679c\u8fd9\u8f86\u8d5b\u8f66\u7684\u7f16\u53f7\u5c0f,\u5219\u53e6\u4e00\u8f86\u8d5b\u8f66\u7684\u7f16\u53f7\u5927 \n}\nbool work()\n{\n    clean();\n    for(int i=1;i<=m;i++)\n    {\n        a=num[i][1];ha=s[i][1];           //\u5982\u679c\u7b2ca\u573a\u6e38\u620f\u4f7f\u7528\u4e86\u7c7b\u578b\u4e3aha\u7684\u8d5b\u8f66,\u5219\u7b2cb\u573a\u6e38\u620f\u5fc5\u987b\u4f7f\u7528\u7c7b\u578b\u4e3ahb\u7684\u8d5b\u8f66 \n        b=num[i][2];hb=s[i][2];\n        if(S[a]==ha+32) continue;         //\u60c5\u51b5<1>:\u5982\u679c\u7b2ca\u573a\u6e38\u620f\u672c\u6765\u5c31\u4e0d\u80fd\u4f7f\u7528\u7c7b\u578b\u4e3aha\u7684\u8d5b\u8f66,\u76f4\u63a5continue \n        int n1=get(a,ha);                 //\u6c42\u51fa\u5728\u7b2ca\u573a\u6e38\u620f\u7684\u5730\u56fe\u4e0a\u7c7b\u578b\u4e3aha\u7684\u8d5b\u8f66\u7684\u7f16\u53f7 \n        int n2=get(b,hb);                 //\u6c42\u51fa\u5728\u7b2cb\u573a\u6e38\u620f\u7684\u5730\u56fe\u4e0a\u7c7b\u578b\u4e3ahb\u7684\u8d5b\u8f66\u7684\u7f16\u53f7  \n        if(S[b]==hb+32)                   //\u60c5\u51b5<2>:\u5982\u679c\u662f\u7b2cb\u573a\u6e38\u620f\u4e0d\u80fd\u4f7f\u7528\u7c7b\u578b\u4e3ahb\u7684\u8d5b\u8f66 \n            add(n1,fan(n1));              //\u90a3\u4e48\u7b2ca\u573a\u6e38\u620f\u53ea\u80fd\u4f7f\u7528\u7c7b\u578b\u4e3aha'\u7684\u8d5b\u8f66\u4e86 \n        else                              //\u60c5\u51b5<3>:\u82e5\u7b2ca\u573a\u6e38\u620f\u80fd\u7528\u7c7b\u578b\u4e3aha\u7684\u8d5b\u8f66,\u4e14\u7b2cb\u573a\u6e38\u620f\u80fd\u7528\u7c7b\u578b\u4e3ahb\u7684\u8d5b\u8f66 \n        {\n            add(n1,n2);                   //\u7b2ca\u573a\u6e38\u620f\u82e5\u7528\u7c7b\u578b\u4e3aha\u7684\u8d5b\u8f66,\u5219\u7b2cb\u573a\u6e38\u620f\u5fc5\u987b\u7528\u7c7b\u578b\u4e3ahb\u7684\u8d5b\u8f66 \n            add(fan(n2),fan(n1));         //\u53cd\u4e4b\u82e5\u7b2cb\u573a\u6e38\u620f\u6ca1\u7528\u7c7b\u578b\u4e3ahb\u7684\u8d5b\u8f66,\u5219\u7b2ca\u573a\u6e38\u620f\u6ca1\u6709\u7c7b\u578b\u4e3aha\u7684\u8d5b\u8f66 \n        }\n    }\n    for(int i=1;i<=2*n;i++)               //tarjan\u6c42\u5f3a\u8054\u901a\u5206\u91cf \n    {\n        if(!dfn[i]) tarjan(i);\n    }\n    for(int i=1;i<=n;i++)                 //\u5224\u65e0\u89e3\u60c5\u51b5 \n    {\n        if(scc[i]==scc[i+n]) return 0;\n    }\n    return 1;                             //\u5426\u5219\u6709\u89e3 \n}\nvoid dfs(int k)                           //\u6211\u4eec\u5df2\u7ecf\u679a\u4e3e\u5230\u4e86\u7b2ck\u4e2ax\u578b\u5730\u56fe\u4e86 \n{\n    if(k>d)                               //\u679a\u4e3e\u5b8c\u6240\u6709\u7684x\u578b\u8dd1\u9053\u4e86\n    {\n        if(work()) bj=1;                  //\u8dd12-sat\u770b\u770b\u6b64\u65f6\u6709\u6ca1\u6709\u89e3 \n        return ;\n    } \n    for(int i=0;i<2;i++)                  //\u770b\u770b\u628a\u5b83\u641e\u6210\u54ea\u79cd\u7c7b\u578b\u7684\u5730\u56fe(\u4e0d\u80fd\u9009\u54ea\u79cd\u578b\u53f7\u7684\u8d5b\u8f66)\n    {\n        S[where[k]]=i+'a';                //\u8fd9\u91cc\u5c06x\u578b\u5730\u56fe\u53d8\u6210a,b\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u5730\u56fe \n        dfs(k+1);\n        if(bj) return ;                   //\u6709\u89e3\u76f4\u63a5\u8fd4\u56de \n    } \n}\nint main()\n{\n    n=read();read();\n    for(int i=1;i<=n;i++)\n    {\n        S[i]=getchar();\n        if(S[i]=='x') where[++d]=i;       //where[i]\u8bb0\u5f55\u7b2ci\u4e2ax\u5730\u56fe\u7684\u4f4d\u7f6e \n    }\n    m=read();\n    for(int i=1;i<=m;i++)                 //\u8f93\u5165\u4e00\u5b9a\u8981\u5904\u7406\u597d \n        scanf(\"%d %c %d %c\",&num[i][1],&s[i][1],&num[i][2],&s[i][2]);\n    dfs(1);                               //\u4ece\u7b2c\u4e00\u4e2ax\u578b\u5730\u56fe\u5f00\u59cb\u679a\u4e3e \n    if(!bj)                               //\u65e0\u89e3\u7684\u60c5\u51b5 \n    {\n        printf(\"-1\");\n        return 0;\n    } \n    for(int i=1;i<=n;i++)                 //\u6709\u89e3\u5c31\u8f93\u51fa\u65b9\u6848\u6570 \n    {\n        if(S[i]=='a')                     //\u5982\u679c\u662fa\u578b\u5730\u56fe,\u5c31\u4e0d\u80fd\u9009\u62e9\u7c7b\u578b\u4e3aA\u7684\u8d5b\u8f66 \n        {\n            if(scc[i]<scc[i+n]) printf(\"B\"); //\u9009\u62e9\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7\u5c0f\u7684\u6700\u4e3a\u6700\u540e\u7684\u9009\u62e9 \n            else printf(\"C\");\n        }\n        if(S[i]=='b')                     //\u5982\u679c\u662fb\u578b\u5730\u56fe,\u5c31\u4e0d\u80fd\u9009\u62e9\u7c7b\u578b\u4e3aB\u7684\u8d5b\u8f66 \n        {\n            if(scc[i]<scc[i+n]) printf(\"A\"); //\u9009\u62e9\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7\u5c0f\u7684\u6700\u4e3a\u6700\u540e\u7684\u9009\u62e9\n            else printf(\"C\");\n        }\n        if(S[i]=='c')                     //\u5982\u679c\u662fc\u578b\u5730\u56fe,\u5c31\u4e0d\u80fd\u9009\u62e9\u7c7b\u578b\u4e3aC\u7684\u8d5b\u8f66 \n        {\n            if(scc[i]<scc[i+n]) printf(\"A\"); //\u9009\u62e9\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7\u5c0f\u7684\u6700\u4e3a\u6700\u540e\u7684\u9009\u62e9\n            else printf(\"B\");\n        }\n    }\n    return 0;\n}\n```\n\n\u770b\u6211\u5199\u7684\u90a3\u4e48\u8ba4\u771f\uff0c\u786e\u5b9a\u4e0d\u70b9\u4e2a\u8d5e\u518d\u8d70\u561b$qwq$",
        "postTime": 1573198368,
        "uid": 177070,
        "name": "\u6697\u3056\u4e4b\u6b87",
        "ccfLevel": 6,
        "title": "P3825 [NOI2017]\u6e38\u620f"
    },
    {
        "content": "$2 - SAT$\n\n\u7814\u7a76\u524d\u9762$Dalao$\u7684\u9898\u89e3\u534a\u5929\uff0c \u4f46\u662f\u611f\u89c9\u5bf9\u521d\u5b66$2 - SAT$\u7684\u849f\u84bb\u5e76\u4e0d\u662f\u5f88\u53cb\u597d\uff0c$Dalao$\u4eec\u91cd\u70b9\u90fd\u5728\u5f3a\u8c03$x$\u5730\u56fe\u7684\u5904\u7406\u65b9\u6cd5\uff0c\u4f46\u672c\u849f\u84bb\u5728\u5efa\u7acb\u5173\u7cfb\u6570\u7ec4\u5c31\u5f7b\u5e95\u81ea\u95ed\u4e86\uff0c\u6240\u4ee5\u5e0c\u671b\u901a\u8fc7\u6b64\u9898\u89e3\uff0c\u8ba8\u8bba\u4e00\u4e0b\u5982\u4f55\u5efa\u7acb\u5173\u7cfb\u6570\u7ec4\u3002~~(\u662f\u6211\u592a\u83dc\u4e86$QWQ$)~~\n\n\n\u6240\u4ee5\u5bf9\u4e8e$2 - SAT$\u800c\u8a00\uff0c\u5173\u952e\u5728\u4e8e\u6784\u5efa\u5404\u79cd\u60c5\u51b5\u5173\u7cfb\u7684\u6570\u7ec4\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u8868\u793a\u5173\u7cfb\u7684\u6570\u7ec4\u88ab\u5206\u4e3a $1 - N$ \u4ee5\u53ca$(N+1) - 2*N$\uff0c \u5206\u522b\u8868\u793a\u6b64\u6bd4\u8d5b\u53ef\u884c\u7684\u4e24\u8f86\u8f66\u3002\n\n\u4e0b\u9762\u8ba8\u8bba\u8fd9\u4e24\u5757\u7684\u610f\u4e49:\n\n\n$~~~~~~$\u82e5\u53ef\u4ee5\u9009\u62e9\u7684\u4e24\u8f86\u8f66\u662f$A$\u548c$B$\uff0c\u90a3\u4e48$A$\u5b58\u5728\u4e8e\u7b2c\u4e00\u5757\uff0c$B$\u5728\u7b2c\u4e8c\u5757\uff1b\n\n$~~~~~~$\u82e5\u9009\u62e9\u7684\u662f$A$\u548c$C$\uff0c\u90a3\u4e48$A$\u5b58\u5728\u4e8e\u7b2c\u4e00\u5757\uff0c$C$\u5728\u7b2c\u4e8c\u5757\uff1b\n\n$~~~~~~$\u82e5\u9009\u62e9\u7684\u662f$B$\u548c$C$\uff0c\u90a3\u4e48$B$\u5b58\u5728\u4e8e\u7b2c\u4e00\u5757\uff0c$C$\u5728\u7b2c\u4e8c\u5757\uff1b\n\n\u6362\u8a00\u4e4b\uff0c\u5bf9\u4e8e\u9009\u62e9\u7684\u4e24\u8f86\uff0c\u6309\u7167\u5b57\u5178\u5e8f\u5206\u522b\u5b58\u5728\u4e8e\u7b2c\u4e00\u5757\u548c\u7b2c\u4e8c\u5757\u3002\n\n\u90a3\u4e48\u5982\u4f55\u6784\u5efa\u5462\uff1f\n\n$Knock~~ the ~~black ~~ board ~~!!!$\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5173\u7cfb $(i, h_i, j, h_j)$ \u5982\u679c$i$\u573a\u6bd4\u8d5b\u6839\u672c\u4e0d\u80fd\u7528$h_i$\uff0c \u663e\u7136\u8fd9\u4e2a\u5173\u7cfb\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u80fd\u6210\u7acb\uff0c$continue$\u5373\u53ef\uff0c \u89c1\u7a0b\u5e8f\u4e2d$(1)$\u3002\n\n\u5982\u679c\u7b2c$j$\u573a\u6bd4\u8d5b\u4e0d\u80fd\u7528$h_j$\uff0c \u90a3\u4e48\u8fd9\u6761\u5173\u7cfb\u4e0d\u80fd\u6210\u7acb\uff0c\u5373$i$ \u4e0d\u80fd\u9009$h_i$\uff0c\u53ea\u80fd\u9009\u62e9\u53e6\u4e00\u8f86\u53ef\u884c\u7684\u8f66\uff0c \u6b64\u65f6\u6839\u636e\u524d\u9762\u5173\u7cfb\u6570\u7ec4\u7684\u5efa\u7acb\uff0c\u5224\u65ad$h_i$\u662f\u7b2c\u4e00\u8f86\u8fd8\u662f\u7b2c\u4e8c\u8f86\u53ef\u884c\u7684\u8f66\uff0c\u5c06\u5176\u8fde\u5230\u53e6\u4e00\u4e2a\uff08\u610f\u4e3a\u5fc5\u987b\u9009\u53e6\u4e00\u4e2a\uff09\uff0c\u7136\u540e$continue$\u5373\u53ef\uff0c \u89c1\u7a0b\u5e8f\u4e2d$(2)$\u3002\n\n\n\u5269\u4e0b\u7684\u60c5\u51b5\uff0c\u5c31\u662f\u8be5\u5173\u7cfb\u53ef\u4ee5\u6210\u7acb\uff1a\u90a3\u4e48\u9700\u8981\u5efa\u7acb$(i, h_i)$->$(j, h_j)$\uff0c \u4ee5\u53ca$(j, h_j')$ - >$(i, h_i')$ \uff0c \u8fd9\u91cc\u7684$h_j'  $\u548c$h_i'$\u90fd\u8868\u793a\u4e0d\u9009\uff0c\u4e4b\u6240\u4ee5\u5efa\u8fd9\u4e24\u6761\u8fb9\uff0c\u5177\u4f53\u53c2\u8003\u9ad8\u4e2d\u6570\u5b66$X$\u4fee$X$ $???$ \u9006\u5426\u547d\u9898 (\u672c\u849f\u84bb\u8fd8\u6ca1\u5b66) \uff0c\u89c1\u7a0b\u5e8f\u4e2d$(3)$\u3002\n\n\u5bf9\u4e8e$x$\u7684\u9009\u62e9\u95ee\u9898\uff0c\u53ef\u4ee5$2^d$\u679a\u4e3e\uff0c\u524d\u9762$Dalao$\u4eec\u4ee5\u53ca\u89e3\u91ca\u6e05\u695a\uff0c\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u503c\u5f97\u6ce8\u610f\u7684\u8fd8\u6709\u5728\u8ba1\u7b97\u7b54\u6848\u7684\u65f6\u5019\uff0c\u6309\u7167$2-SAT$\u7684\u4e60\u60ef\uff0c\u62d3\u6251\u5e8f\u5c0f\u7684\u4f1a\u88ab\u6211\u4eec\u9009\u62e9\uff0c\u800c\u5728\u6b64\u9898\u4e2d\uff0c\u5219\u53d8\u6210\u4e86\u9009\u62e9\u7b2c\u4e00\u4e2a\u5730\u56fe\u8fd8\u662f\u7b2c\u4e8c\u4e2a\u5730\u56fe\u7684\u95ee\u9898\u3002\u90a3\u4e48\u663e\u7136\u5f53$scc[i] < scc[i+N]$\u65f6\uff0c \u6211\u4eec\u9009\u62e9\u7b2c\u4e00\u4e2a\u5730\u56fe\u53ea\u6709$A ~~or ~~B$\u4e24\u79cd\u60c5\u51b5\uff0c\u53cd\u4e4b\u9009\u62e9\u7b2c\u4e8c\u4e2a\u5730\u56fe\uff0c\u6709$B ~~or~~C$\u4e24\u79cd\u60c5\u51b5\uff0c\u89c1\u7a0b\u5e8f\u4e2d$(4)$\u3002\u81f3\u6b64\uff0c\u95ee\u9898\u5f97\u89e3\u3002\n\n\u5c0f\u7ed3\uff1a\u5bf9\u4e8e$2-SAT$\u7b97\u6cd5\u800c\u8a00\uff0c\u5173\u952e\u548c\u96be\u70b9\u5728\u4e8e\u8bbe\u8ba1\u6bcf\u7ec4\u7684\u4e24\u4e2a\u72b6\u6001\uff0c\u4e0d\u4e00\u5b9a\u662f\u60f3\u7ecf\u5178\u6a21\u578b\u4e2d\u7684\u9009\u4e0e\u4e0d\u9009\uff0c\u4e5f\u53ef\u80fd\u662f\u5982\u6b64\u9898\u7684\u4e24\u79cd\u9009\u62e9\uff0c\u8981\u6839\u636e\u9898\u76ee\u7075\u6d3b\u53d8\u5316\uff0c\u5e76\u5c06\u9898\u9762\u52a0\u4ee5\u62bd\u8c61\u7406\u89e3\uff0c\u65b9\u80fd\u719f\u7ec3\u4f7f\u7528\u3002\n```\n/*\ntime:2018\u5e7410\u670823\u65e518:35:53\nAuthor:\u98de\u9a6c\u306e\u5e7b\u60f3\nplace:lzyz\ntype:2-SAT\nfrom:https:https://www.luogu.org/problemnew/show/P3825\ninput:\n3 1\nxcc\n1\n1 A 2 B\noutput:\nABA\n*/\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<cmath>\n#define LL long long\n#define rep(i, a, b) for(int i = a; i <= b; ++i)\n#define per(i, a, b) for(int i = a; i >= b; --i)\n#define clr(a,b)  memset((a),b,sizeof(a))\nusing namespace std;\ninline int Read(){\n    int s = 0, w = 1; char ch = getchar();\n    while(ch < '0' || ch > '9')   { if(ch == '-') w = -1; ch = getchar(); }\n    while(ch >= '0' && ch <= '9') { s = (s << 3) + (s << 1) + (ch ^ 48); ch = getchar(); }\n    return s * w;\n}\nconst int MX = 2e5 + 50;\nint N, d, y[MX], x[MX], M, k, dfn[MX], low[MX], ins[MX], stc[MX], top, cnt, num;\nint to[MX << 1], nxt[MX << 1], head[MX], tot, scc[MX], pos[MX];\nchar c[MX], p1[MX], p2[MX], res[MX];\ninline void add(int x, int y) { to[++tot] = y; nxt[tot] = head[x]; head[x] = tot; }\nvoid pre() {\n    clr(head, 0); clr(dfn, 0); tot = num = cnt = top = 0;\n    clr(low, 0); clr(ins, 0); clr(stc, 0);clr(scc, 0); clr(nxt, 0);\n}\nvoid tarjan(int x) {\n    dfn[x] = low[x] = ++num;\n    ins[x] = 1;\n    stc[++top] = x;\n    for(int i = head[x]; i; i = nxt[i]) {\n        int y = to[i];\n        if(!dfn[y]) {\n            tarjan(y);\n            low[x] = min(low[x], low[y]);\n        } else if(ins[y]) \n            low[x] = min(low[x], dfn[y]);\n    }\n    if(low[x] == dfn[x]) {\n        ++cnt;\n        while(top) {\n            scc[stc[top]] = cnt;\n            ins[stc[top]] = 0;\n            if(stc[top --] == x) break;\n        }\n    }\n}\nbool check() {\n    rep(i, 1, (N << 1)) \n        if(!dfn[i]) tarjan(i);\n    rep(i, 1, N) {\n        if(scc[i] == scc[i + N]) return false;\n        if(scc[i] < scc[N + i]) res[i] = (c[i] == 'A') ? 'B' : 'A';\n        else res[i] = (c[i] == 'C') ? 'B' : 'C';\n    }\n    rep(i, 1, N) printf(\"%c\", res[i]); \n    return true;\n}\nvoid solve() {\n    rep(i, 0, (1 << d) - 1) { //2^d \u679a\u4e3e\u72b6\u6001\n        pre();\n        rep(j, 1, d) c[pos[j]] = (i & (1 << (j - 1))) ? 'A' : 'B';  //\u5224\u65ad\u6bcf\u4e2ax\u5730\u56fe\u7684\u60c5\u51b5\n        rep(j, 1, M) {\n            if(p1[j] == c[x[j]]) continue;//\uff081\uff09\n            if(p2[j] == c[y[j]]) {\n                if(p1[j] == 'C' || (p1[j] == 'B' && c[x[j]] == 'C'))  //\uff082\uff09\n                    add(x[j] + N, x[j]);\n                else add(x[j], x[j] + N);\n                continue;\n            }\n            //\uff083\uff09\n            int add1 , add2;\n            if(p1[j] == 'C' || (p1[j] == 'B' && c[x[j]] == 'C')) add1 = N;\n            else add1 = 0;\n            if(p2[j] == 'C' || (p2[j] == 'B' && c[y[j]] == 'C')) add2 = N;\n            else add2 = 0;\n            add(x[j] + add1, y[j] + add2);  //\u6ce8\u610f\u5efa\u6b63\u53cd\u4e24\u6761\u8fb9\n            add(y[j] - add2 + N, x[j] - add1 + N); //\u4ece\u6b63\u8fb9\u5230\u53cd\u8fb9\u53ef\u4ee5\u7528-add + N \u5f97\u5230\uff0c\u53ef\u624b\u6a21\u7406\u89e3\u4e00\u4e0b\n        }\n        if(check()) exit(0);\n    }\n    printf(\"-1\");\n    return;\n}\nint main() {\n    N = Read(), d = Read();\n    scanf(\"%s\", (c + 1)); M = Read();\n    rep(i, 1, M) scanf(\"%d %c %d %c\", &x[i], &p1[i], &y[i], &p2[i]);\n    rep(i, 1, N) if((c[i] -= 32) && c[i] == 'X') pos[++k] = i; //\u5c0f\u5199\u8f6c\u5316\u5927\u5199\uff0c\u627e\u51fax\u5730\u56fe\n    solve();\n    return 0;\n}\n\n\n```\n\n\n\n\n\n\n",
        "postTime": 1540297109,
        "uid": 44650,
        "name": "SpXace",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3825 \u3010[NOI2017]\u6e38\u620f\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5f88\u591a\u4eba\u7684\u63d0\u4ea4\u4ea4\u5230uoj\u4e0a\u4f1a\u83b7\u5f9797\u5206\u3002\n\n\u8fd9\u662f\u56e0\u4e3a\u5b9e\u9645\u4e0a $O(2^d\\times N)$ \u5982\u679c\u88ab\u4e00\u7ec4\u65e0\u89e3\u7684\u6570\u636e\u5361\u7684\u8bdd\u5c31\u4f1a\u8dd1\u6ee1\u3002\n\n\u5f88\u591a\u4eba\u7684\u5e38\u6570\u6bd4\u8f83\u5927\u5c31\u4f1aTLE(\u5f53\u7136\u4f60\u5e38\u6570\u5c0f\u5c31\u4e0d\u4f1a)\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u968f\u673a\u5316\u3002\u6bcf\u6b21DFS\u65f6\u968f\u673a\u679a\u4e3e\u5f53\u524d $x$ \u662f $a$ \u8fd8\u662f $b$ \u3002\u7136\u540e\u5982\u679c\u6b21\u6570\u8d85\u8fc7\u4e00\u5b9a\u7a0b\u5ea6\u5c31\u76f4\u63a5\u8f93\u51fa\u65e0\u89e3\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u51fa\u9519\u7684\u6982\u7387\u662f\u6781\u4f4e\u7684\u3002",
        "postTime": 1523452130,
        "uid": 25739,
        "name": "scallop",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3825 \u3010[NOI2017]\u6e38\u620f\u3011"
    },
    {
        "content": "\u771f\u5fc3\u611f\u89c9\u5176\u4ed6\u9898\u89e3\u6709\u4e00\u70b9\u8bef\u4eba\u5b50\u5f1f...\n\n\n------------\n\n\n\u663e\u7136\uff0c\u5bf9\u4e8e$a,b,c$\u7c7b\u578b\u7684\u8dd1\u9053\uff0c\u53ea\u6709\u4e24\u79cd\u53d6\u503c\u3002\u6240\u4ee5\u53ef\u4ee5\u8f6c\u6362\u4e3a$2-SAT$\u3002\n\n\u90a3\u4e48\u6709$x$\u578b\u8dd1\u9053\u600e\u4e48\u529e\u5462\uff1f\n\n\u522b\u7684\u9898\u89e3\u4f1a\u8bb2\uff1a\u641c\u7d22\u679a\u4e3e\u6bcf\u4e00\u4e2a$x$\u662f\u9009$AB$\u8fd8\u662f\u9009$AC$\uff0c$BC$\u4e0d\u7528\u679a\u4e3e\uff0c\u56e0\u4e3a\u5df2\u7ecf**\u5305\u542b**\u4e86\u3002\n\n\u8fd9\u91cc\u7740\u91cd\u8bb2\u4e00\u4e0b$x$\u578b\u8dd1\u9053\u4e3a\u4ec0\u4e48\u53ea\u7528\u679a\u4e3e\u4e24\u6b21\u3002\n\n### \u7b97\u6cd5$1:$\n\n\u6ce8\u610f\u5230$d$\u5f88\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7206\u641c\u679a\u4e3e$x$\u5230\u5e95\u9009\u4ec0\u4e48\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u679a\u4e3e\u6bcf\u4e00\u4e2a$x$\u7684\u53d6\u503c\u8303\u56f4\u2014\u2014\u8dd1\u9053\u7c7b\u578b\u3002\n\n\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u679a\u4e3e\u7b2c$i$\u4e2a$x$\u7c7b\u578b\u8dd1\u9053\u3002\n\n\u5982\u679c\u6211\u4eec\u5f53\u524d\u679a\u4e3e\u5b83\u662f$a$\u7c7b\u578b\u8dd1\u9053\uff08\u5f53\u524d$x$\u8d5b\u9053\u5f00\u7684\u8f66\u662f$B$\u6216$C$\uff09\n\n\u6240\u4ee5\u8fd9\u4e2a$x$\u4e00\u5b9a\u4e0d\u9009$A$\u3002\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5173\u4e8e\u8fd9\u4e2a$x$\u7684\u9650\u5236\uff1a\n\n#### \u7b2c\u4e00\u79cd\uff1a\u5982\u679c\u7b2c$i$\u4e2a\u8dd1\u9053$A$\uff0c\u5219\u7b2c$j$\u4e2a\u8dd1\u9053\u9009...\n\n\u7531\u4e8e\u8fd9\u4e2a\u8dd1\u9053\u4e0d\u9009$A$\uff0c\u6240\u4ee5\u8fd9\u6761\u9650\u5236\u4f5c\u5e9f\u3002\n\n#### \u7b2c\u4e8c\u79cd\uff1a\u5982\u679c\u7b2c$j$\u4e2a\u8dd1\u9053\u9009$X$\u7c7b\u578b\uff0c\u5219\u7b2c$i$\u4e2a\u8dd1\u9053\u9009$A$\uff0c\n\n\u7531\u4e8e\u8fd9\u4e2a\u8dd1\u9053\u4e0d\u9009$A$\uff0c\u6240\u4ee5\u7b2c$j$\u4e2a\u8dd1\u9053\u4e00\u5b9a\u4e0d\u9009$X$\u7c7b\u578b\u3002\n\n\u6ce8\u610f\u8fd9\u4e24\u79cd\u53ef\u80fd\u662f**\u642d\u914d**\u7684\uff0c\u53ef\u80fd\u7b2c$j$\u4e2a\u8dd1\u9053\u548c\u7b2c$i$\u4e2a\u8dd1\u9053\u90fd\u662f$x$\u578b\u3002\n\n\u6211\u4eec\u6210\u529f\u65ad\u7edd\u4e86$A$\u5bf9\u4e8e\u8fd9\u4e2a\u70b9\u7684\u5f71\u54cd\uff08$m$\u4e2a\u9650\u5236\uff09\u3002\n\n\u8fd9\u6837\u5b50\u6211\u4eec\u5c31\u53ef\u4ee5\u7528$2-SAT$\u6c42\u89e3\uff0c\u6765\u5224\u65ad\u9009$B$\u6216\u9009$C$\u662f\u5426\u53ef\u884c\u4e86\uff08\u5373\u662f\u5426\u6709\u89e3\uff09\u3002\n\n\u679a\u4e3e\u7b2c$i$\u4e2a$x$\u7c7b\u578b\u8dd1\u9053\u662f$b,c$\u578b\u4e5f\u662f\u4e00\u6837\u7684\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(3^d(n+m))$\u3002\u65e0\u6cd5\u901a\u8fc7\u6b64\u9898\u3002\n\n### \u7b97\u6cd5$2:$\n\n\u8bb2\u4e86\u4e2a\u9519\u89e3\u6709\u4ec0\u4e48\u7528\u5462\uff1f\n\n\u53d1\u73b0\u7b97\u6cd5$1$\u662f\u679a\u4e3e\uff1a\n\n- \u53ea\u6709$A,B$\u4e24\u79cd\u9009\u62e9\uff08\u7edd\u5bf9\u4e0d\u9009$C$\uff09\uff0c\u662f\u5426\u6709\u89e3\u3002\n\n- \u53ea\u6709$B,C$\u4e24\u79cd\u9009\u62e9\uff08\u7edd\u5bf9\u4e0d\u9009$A$\uff09\uff0c\u662f\u5426\u6709\u89e3\u3002\n\n- \u53ea\u6709$A,C$\u4e24\u79cd\u9009\u62e9\uff08\u7edd\u5bf9\u4e0d\u9009$B$\uff09\uff0c\u662f\u5426\u6709\u89e3\u3002\n\n\u6700\u7ec8$x$\u9009\u62e9\u7684\u8d5b\u8f66\u7c7b\u578b\u662f**\u56fa\u5b9a**\u7684\u3002\n\n\u6240\u4ee5\u5728\u679a\u4e3e\u53ea\u6709$B,C$\u4e24\u79cd\u9009\u62e9\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u65ad\u7edd\u4e86$A$\u5bf9\u4e8e$i$\u7684\u6240\u6709\u8054\u7cfb\uff08\u5982\u679c\u4f60\u4e0d\u660e\u767d\u53ef\u4ee5\u770b\u770b\u5904\u7406$A$\u8d5b\u8f66\u7684\u65b9\u5f0f\uff0c\u4e0a\u8ff0\u65b9\u5f0f\u4f7f\u5f97\u679a\u4e3e\u8fc7\u7a0b\u548c$A$\u53d8\u5f97\u6beb\u65e0\u5173\u7cfb\uff0c\u5373\u7edd\u5bf9\u4e0d\u9009$A$\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u76f8\u5f53\u4e8e\u5224\u65ad\u4e86\u7b2c$i$\u4e2a\u4f4d\u7f6e\u9009$B$\u662f\u5426\u53ef\u884c\uff0c\u4ee5\u53ca\u9009$C$\u662f\u5426\u53ef\u884c\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u82e5\u679a\u4e3e\u201c\u53ea\u6709$A,C$\u4e24\u79cd\u9009\u62e9\u201d\u201c\u53ea\u6709$B,C$\u4e24\u79cd\u9009\u62e9\u201d\u4e24\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5c31\u904d\u5386\u4e86\u4e09\u79cd\u60c5\u51b5\uff1a\u9009$B$\u662f\u5426\u53ef\u884c\uff0c\u9009$C$\u662f\u5426\u53ef\u884c\uff0c\u4ee5\u53ca\u9009$A$\u662f\u5426\u53ef\u884c\u3002\n\n\u590d\u6742\u5ea6\u5c06\u964d\u4e3a$O(2^d(n+m))$\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n\n\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\n#define ll long long\n#define ljc 998244353\nusing namespace std;\n#define gc getchar\ninline ll read(){\n    register ll x=0,f=1;char ch=gc();\n    while (!isdigit(ch)){if(ch=='-')f=-1;ch=gc();}\n    while (isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=gc();}\n    return (f==1)?x:-x;\n}\nstruct edge{\n    int to,nxt;\n}g[2000001];\nint tot,head[2000001],len,n,A,B,m,col[2000001];\nint pre[1000001],id,a1[1000001],b1[1000001];\nint vis[2000001],pos[11],all,d,dfn[2000001],low[2000001];\nchar s[1000001],a2[1000001],b2[1000001];\nstack<int> S;\ninline void made(int from,int to){\n    g[++tot].to=to;g[tot].nxt=head[from];head[from]=tot;\n}\nvoid tarjan(int u){\n    low[u]=dfn[u]=++id;S.push(u);vis[u]=1;\n    for (int i=head[u];i;i=g[i].nxt){\n        int v=g[i].to;\n        if (!dfn[v]){\n            tarjan(v);\n            low[u]=min(low[u],low[v]);\n        }else if (vis[v]){\n            low[u]=min(low[u],dfn[v]);\n        }\n    }\n    if (low[u]==dfn[u]){\n        len++;\n        while (S.top()!=u){\n            int x=S.top();S.pop();\n            col[x]=len;vis[x]=0;\n        }\n        col[u]=len;S.pop();vis[u]=0;\n    }\n}\ninline int trans(int a,char B){\n\tchar A=s[a];\n\tif (A=='c'){\n\t\tif (B=='A') return 0;\n\t\telse return 1;\n\t}else if (A=='b'){\n\t\tif (B=='A') return 0;\n\t\telse return 1;\n\t}else if (A=='a'){\n\t\tif (B=='B') return 0;\n\t\telse return 1;\n\t}else{\n\t\tif (B=='C') return 1;\n\t\treturn 0;\n\t}\n}\ninline char upr(char y){\n\treturn (char)(y-32);\n}\nsigned main(){\n\tn=read(),d=read();\n\tfor (int i=1;i<=n;i++){\n\t\tchar ch=gc();\n\t\twhile (!isalpha(ch)) ch=getchar();\n\t\ts[i]=ch;\n\t\tif (s[i]=='x') pre[i]=++all;\n\t}\n\tm=read();\n\tfor (int i=1;i<=m;i++){\n\t\ta1[i]=read();char ch=gc();\n\t\twhile (!isalpha(ch)) ch=getchar();\n\t\ta2[i]=ch;b1[i]=read();ch=gc();\n\t\twhile (!isalpha(ch)) ch=getchar();\n\t\tb2[i]=ch;\n\t}\n\tint MX=(1<<d)-1;\n\tfor (int zt=0;zt<=MX;zt++){\n\t\t//0 AC    1 BC\n\t\ttot=id=len=0;\n\t\twhile (!S.empty()) S.pop();\n\t\tfor (int i=1;i<=2*n;i++){\n\t\t\thead[i]=low[i]=col[i]=dfn[i]=vis[i]=0;\n\t\t}\n\t\tfor (int i=1;i<=m;i++){\n\t\t\tif (s[a1[i]]=='x'&&s[b1[i]]=='x'){\n\t\t\t\tint zta=(zt&(1<<(pre[a1[i]]-1)));\n\t\t\t\tint ztb=(zt&(1<<(pre[b1[i]]-1)));\n\t\t\t\tif (!zta&&a2[i]=='B') continue;\n\t\t\t\tif (zta&&a2[i]=='A') continue;\n\t\t\t\tint I=trans(a1[i],a2[i]),J=trans(b1[i],b2[i]);\n\t\t\t\tif (!ztb&&b2[i]=='B'){\n\t\t\t\t\tmade(a1[i]+n*I,a1[i]+n*(I^1));continue;\n\t\t\t\t}\n\t\t\t\tif (ztb&&b2[i]=='A'){\n\t\t\t\t\tmade(a1[i]+n*I,a1[i]+n*(I^1));continue;\n\t\t\t\t}\n\t\t\t\tmade(a1[i]+n*I,b1[i]+n*J);made(b1[i]+n*(J^1),a1[i]+n*(I^1));\n\t\t\t}else if (s[a1[i]]!='x'&&s[b1[i]]=='x'){\n\t\t\t\tint ztb=(zt&(1<<(pre[b1[i]]-1)));\n\t\t\t\tint I=trans(a1[i],a2[i]),J=trans(b1[i],b2[i]);\n\t\t\t\tif (upr(s[a1[i]])==a2[i]) continue;\n\t\t\t\tif (!ztb&&b2[i]=='B'){\n\t\t\t\t\tmade(a1[i]+n*I,a1[i]+n*(I^1));continue;\n\t\t\t\t}\n\t\t\t\tif (ztb&&b2[i]=='A'){\n\t\t\t\t\tmade(a1[i]+n*I,a1[i]+n*(I^1));continue;\n\t\t\t\t}\n\t\t\t\tmade(a1[i]+n*I,b1[i]+n*J);made(b1[i]+n*(J^1),a1[i]+n*(I^1));\n\t\t\t}else if (s[a1[i]]=='x'&&s[b1[i]]!='x'){\n\t\t\t\tint zta=(zt&(1<<(pre[a1[i]]-1)));\n\t\t\t\tint I=trans(a1[i],a2[i]),J=trans(b1[i],b2[i]);\n\t\t\t\tif (!zta&&a2[i]=='B') continue;\n\t\t\t\tif (zta&&a2[i]=='A') continue;\n\t\t\t\tif (upr(s[b1[i]])==b2[i]){\n\t\t\t\t\tmade(a1[i]+n*I,a1[i]+n*(I^1));continue;\n\t\t\t\t}\n\t\t\t\tmade(a1[i]+n*I,b1[i]+n*J);made(b1[i]+n*(J^1),a1[i]+n*(I^1));\n\t\t\t}else{\n\t\t\t\tint I=trans(a1[i],a2[i]),J=trans(b1[i],b2[i]);\n\t\t\t\tif (upr(s[a1[i]])==a2[i]) continue;\n\t\t\t\tif (upr(s[b1[i]])==b2[i]){\n\t\t\t\t\tmade(a1[i]+n*I,a1[i]+n*(I^1));continue;\n\t\t\t\t}\n\t\t\t\tmade(a1[i]+n*I,b1[i]+n*J);made(b1[i]+n*(J^1),a1[i]+n*(I^1));\n\t\t\t}\n\t\t}\n\t\tfor (int i=1;i<=2*n;i++){\n\t\t\tif (!dfn[i]) tarjan(i);\n\t\t}\n\t\tbool flag=1;\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tif (col[i]==col[i+n]){\n\t\t\t\tflag=0;break;\n\t\t\t}\n\t\t}\n\t\tif (!flag) continue;\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tint op=(col[i]>col[i+n]);\n\t\t\tif (s[i]=='x'){\n\t\t\t\tint ZT=(zt&(1<<(pre[i]-1)));\n\t\t\t\tif (!ZT){\n\t\t\t\t\tif (op)\tprintf(\"C\");\n\t\t\t\t\telse printf(\"A\");\n\t\t\t\t}else{\n\t\t\t\t\tif (op)\tprintf(\"C\");\n\t\t\t\t\telse printf(\"B\");\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif (s[i]=='a'){\n\t\t\t\t\tif (op)\tprintf(\"C\");\n\t\t\t\t\telse printf(\"B\");\n\t\t\t\t}else if (s[i]=='b'){\n\t\t\t\t\tif (op)\tprintf(\"C\");\n\t\t\t\t\telse printf(\"A\");\n\t\t\t\t}else{\n\t\t\t\t\tif (op)\tprintf(\"B\");\n\t\t\t\t\telse printf(\"A\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\tprintf(\"-1\");\n    return 0;\n}\n\n```\n\n\n",
        "postTime": 1562425217,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3825 \u3010[NOI2017]\u6e38\u620f\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n\u6709\u4e09\u79cd\u6570,\u6bcf\u4e2a\u4f4d\u7f6e\u53ea\u80fd\u586b\u4e00\u79cd\u6570,\u6709$d\\in[0,8]$\u4e2a\u4f4d\u7f6e\u6709\u4e09\u79cd\u9009\u62e9,\u5176\u4ed6\u4f4d\u7f6e\u53ea\u6709\u4e24\u79cd\u9009\u62e9\n\n\u7ed9\u4f60\u4e00\u4e9b\u9650\u5236,\u8868\u793a\u7b2c$i$\u4e2a\u4f4d\u7f6e\u9009\u4e86\u67d0\u79cd\u6570,\u90a3\u4e48\u7b2c$j$\u4e2a\u4f4d\u7f6e\u5c31\u53ea\u80fd\u9009\u89c4\u5b9a\u7684\u6570\n\n\u8f93\u51fa\u4e00\u7ec4\u5408\u6cd5\u7684\u9009\u6570\u65b9\u6848,\u65e0\u89e3\u8f93\u51fa$-1$\n\n---\n\n### \u9898\u89e3\n\n##### \u2460\u8003\u8651$d=0$,\u90a3\u4e48\u5c31\u662f\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u53ea\u6709\u4e24\u79cd\u9009\u62e9\u548c\u4e00\u5806\u9650\u5236\n\n\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u9053$2-sat$\u7684\u88f8\u9898\u4e86\n\n\u5047\u8bbe\u9650\u5236\u7684\u56db\u5143\u7ec4\u662f$(i,h_i,j,h_j)$,\u4ee4$u=[$\u7b2c$i$\u4e2a\u4f4d\u7f6e\u586b$h_i$\u7684\u7f16\u53f7$]$,$v=[$\u7b2c$j$\u4e2a\u4f4d\u7f6e\u586b$h_j$\u7684\u7f16\u53f7$]$,\u90a3\u4e48\u8fde\u8fb9$(u,v),(v',u')$\n\n\u6ce8\u610f\u5982\u679c$v$\u662f\u4e0d\u5b58\u5728\u7684(\u4e5f\u5c31\u662f\u7b2c$j$\u4e2a\u4f4d\u7f6e\u4e0d\u80fd\u586b$h_j$)\u90a3\u4e48$u$\u5c31\u4e0d\u80fd\u9009,\u90a3\u4e48\u5c31\u8fde\u8fb9$(u,u')$\n\n\u7136\u540e\u5982\u679c$u$\u662f\u5b58\u5728\u7684\u8bdd,\u8fd9\u4e2a\u9650\u5236\u5c31\u5e9f\u4e86(\u53ef\u4ee5\u7a0d\u5fae\u5feb\u4e00\u70b9$?$)\n\n\u8f93\u51fa\u65b9\u6848\u5c31\u662f~~\u5efa\u53cd\u56fe\u7136\u540e\u62d3\u6251\u6392\u5e8f\u7136\u540e\u67d3\u8272~~\n\n\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5$for$\u4e00\u904d\u5c31\u597d\u4e86,\u8bbe$belong_i$\u8868\u793a$i$\u6240\u5c5e\u7684\u5f3a\u8fde\u901a\u5206\u91cf\n\n\u6309\u7167\u539f\u6765\u7684\u505a\u6cd5,\u5982\u679c\u53cd\u56fe$belong_i$\u7684\u62d3\u6251\u5e8f\u5c0f\u4e8e$belong_{i'}$\u90a3\u4e48\u8fd9\u4e2a\u4f4d\u7f6e\u5c31\u9009\u80fd\u9009\u7684\u7b2c\u4e00\u79cd\u6570,\u5426\u5219\u5c31\u662f\u7b2c\u4e8c\u79cd\n\n\u8003\u8651\u5230$tarjan$\u6c42\u51fa\u6765\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u662f\u6309\u7167\u53cd\u56fe\u7684\u9006\u5e8f\u7ed9\u51fa\u7684\n\n\u539f\u6765\u7684\u65b9\u6cd5\u7b49\u4ef7\u4e00\u4e0b\u5c31\u662f\u5982\u679c$belong_i<belong_{i'}$\u5c31\u9009\u8fd9\u4e2a\u4f4d\u7f6e\u80fd\u9009\u7684\u7b2c\u4e00\u79cd,\u5426\u5219\u5c31\u662f\u7b2c\u4e8c\u79cd\n\n##### \u2461\u8003\u8651$d\\gt0$\u600e\u4e48\u505a,\u5c31\u662f\u6709\u4e9b\u4f4d\u7f6e\u662f$3-sat?$\n\n\u663e\u7136\u4e0d\u53ef\u80fd\u662f$3-sat$,\u6bd5\u7adf$NPC$\n\n\u4e00\u4e2a\u7b80\u5355\u7684\u60f3\u6cd5\u5c31\u662f$3^d$\u7684$dfs$\u679a\u4e3e\u8fd9\u4e2a\u4f4d\u7f6e\u586b\u4ec0\u4e48\n\n\u800c\u4e14\u8fd9\u6837\u4e5f\u6ca1\u6cd5\u4f18\u5316\u4e86,\u8003\u8651\u6b63\u96be\u5219\u53cd,\u679a\u4e3e\u8fd9\u4e00\u4f4d\u4e0d\u586b\u4ec0\u4e48\n\n\u6bd4\u5982:\n\n$1.$\u5047\u8bbe\u8fd9\u4e2a\u4f4d\u7f6e\u4e0d\u80fd\u9009$A$\u6570,\u90a3\u4e48\u5c31\u53ea\u80fd\u9009$B,C$\u6570;\n\n$2.$\u5047\u8bbe\u8fd9\u4e2a\u4f4d\u7f6e\u4e0d\u80fd\u9009$B$\u6570,\u90a3\u4e48\u5c31\u53ea\u80fd\u9009$A,C$\u6570;\n\n$3.$\u5047\u8bbe\u8fd9\u4e2a\u4f4d\u7f6e\u4e0d\u80fd\u9009$C$\u6570,\u90a3\u4e48\u5c31\u53ea\u80fd\u9009$A,B$\u6570;\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u7b2c$3$\u79cd\u60c5\u51b5\u5df2\u7ecf\u5728\u524d\u4e24\u79cd\u91cc\u9762\u8ba8\u8bba\u8fc7\u4e86,\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u505a\u5230$2^d$\u4e86\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O(2^d(n+m))$\n\n```\n#include<bits/stdc++.h>\n#define fp(i,a,b) for(register int i=a,I=b+1;i<I;++i)\n#define fd(i,a,b) for(register int i=a,I=b-1;i>I;--i)\n#define go(u) for(register int i=fi[u],v=e[i].to;i;v=e[i=e[i].nx].to)\n#define file(s) freopen(s\".in\",\"r\",stdin),freopen(s\".out\",\"w\",stdout)\ntemplate<class T>inline bool cmax(T&a,const T&b){return a<b?a=b,1:0;}\ntemplate<class T>inline bool cmin(T&a,const T&b){return a>b?a=b,1:0;}\nusing namespace std;\nchar ss[1<<17],*A=ss,*B=ss;\ninline char gc(){return A==B&&(B=(A=ss)+fread(ss,1,1<<17,stdin),A==B)?-1:*A++;}\ntemplate<class T>inline void sd(T&x){\n    char c;T y=1;while(c=gc(),(c<48||57<c)&&c!=-1)if(c==45)y=-1;x=c-48;\n    while(c=gc(),47<c&&c<58)x=x*10+c-48;x*=y;\n}\nchar sr[1<<21],z[20];int C=-1,Z;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\ntemplate<class T>inline void we(T x){\n    if(C>1<<20)Ot();if(x<0)sr[++C]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]='\\n';\n}\nconst int N=1e5+5,M=2e5;\ntypedef int arr[N];\nstruct eg{int nx,to;}e[M];\nstruct da{int x,y;}a[N],b[N];\nint n,m,ce,dft,Cnt,Top,pos[N][3];arr p,f,nt,fi,bl,dfn,low,vis,S,Ch;\nvoid tarjan(int u){\n    dfn[u]=low[u]=++dft;vis[u]=1,S[++Top]=u;\n    go(u)if(!dfn[v])tarjan(v),cmin(low[u],low[v]);\n        else if(vis[v])cmin(low[u],dfn[v]);\n    if(dfn[u]==low[u]){\n        ++Cnt;int v;\n        do{vis[v=S[Top--]]=0,bl[v]=Cnt;}while(Top&&v^u);\n    }\n}\ninline void add(int u,int v){e[++ce]={fi[u],v},fi[u]=ce;}\n#define clr(x) memset(x,0,sizeof x)\ninline void sol(){\n    ce=Cnt=dft=0;clr(fi),clr(dfn),clr(low);\n    fp(i,1,n)nt[nt[i]=i+n]=i;\n    fp(i,1,m)if(p[a[i].x]^a[i].y){\n    \tint u=pos[a[i].x][a[i].y],v=pos[b[i].x][b[i].y];\n\t\tif(p[b[i].x]==b[i].y)add(u,nt[u]);\n    \telse add(u,v),add(nt[v],nt[u]);\n    }\n    fp(i,1,2*n)if(!dfn[i])tarjan(i);\n    fp(i,1,n)if(bl[i]==bl[i+n])return;\n        else nt[bl[i+n]]=bl[i],nt[bl[i]]=bl[i+n];\n    fp(i,1,n)putchar('A'+Ch[i+(bl[i]<bl[i+n]?0:n)]);\n    exit(0);\n}\nvoid dfs(int d){\n    if(d==f[0]+1)return sol();int i=f[d];\n    p[i]=0,pos[i][Ch[i]=1]=i;dfs(d+1);pos[i][1]=0;\n    p[i]=1,pos[i][Ch[i]=0]=i;dfs(d+1);\n}char s[N];\nint main(){\n    #ifndef ONLINE_JUDGE\n        file(\"s\");\n    #endif\n    scanf(\"%d%*d%s\",&n,s+1);\n    fp(i,1,n){\n        p[i]=s[i]-'a';\n        if(p[i]>2)f[++f[0]]=i,pos[i][2]=i+n,Ch[i+n]=2;\n        else{\n            if(p[i]==0)pos[i][1]=i,pos[i][2]=i+n,Ch[i]=1,Ch[i+n]=2;\n            else if(p[i]==1)pos[i][0]=i,pos[i][2]=i+n,Ch[i]=0,Ch[i+n]=2;\n            else pos[i][0]=i,pos[i][1]=i+n,Ch[i]=0,Ch[i+n]=1;\n        }\n    }scanf(\"%d\",&m);int k=0;char c1,c2;\n    fp(i,1,m){\n        scanf(\"%d %c%d %c\",&a[i].x,&c1,&b[i].x,&c2);\n        if(s[a[i].x]==c1)continue;\n        a[++k]={a[i].x,c1-'A'},b[k]={b[k].x,c2-'A'};\n    }m=k;dfs(1);puts(\"-1\");\nreturn 0;\n}\n```\n\u5982\u679c\u4f60\u4e0d\u60f3\u5199$spj$\u7684\u8bdd\u6233[\u8fd9\u91cc](https://loj.ac/problem/2305/testdata/download/spj_cpp.cpp)$(by\\ $[$loj$](https://loj.ac/problem/2305/testdata)$)$",
        "postTime": 1522065259,
        "uid": 20156,
        "name": "Kelin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3825 \u3010[NOI2017]\u6e38\u620f\u3011"
    },
    {
        "content": "\u5148\u8003\u8651 $d=0$ \u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u6bcf\u573a\u6e38\u620f\u90fd\u6709\u6070\u597d\u4e24\u79cd\u8f66\u53ef\u7528\uff0c\u7b26\u5408 [2-SAT](https://oi-wiki.org/graph/2-sat) \u7684\u6a21\u578b\u3002\n\n\u5bf9\u4e8e\u7b2c $i$ \u573a\u6e38\u620f\uff0c\u6211\u4eec\u5efa\u4e24\u4e2a\u70b9 $i$ \u548c $i'$\uff0c\u5176\u4e2d $i$ \u8868\u793a\u7b2c $i$ \u573a\u6e38\u620f\u4f7f\u7528\u7b2c\u4e00\u79cd\u8f66\uff08\u6b64\u5904\u7b2c\u4e00\u79cd\u6307\u8be5\u573a\u6e38\u620f\u4e2d\uff0c\u53ef\u7528\u7684\u4e24\u79cd\u8f66\u4e2d\u7684\u7b2c\u4e00\u79cd\u8f66\uff09\uff0c$i'$ \u8868\u793a\u7b2c $i$ \u573a\u6e38\u620f\u4f7f\u7528\u7b2c\u4e8c\u79cd\u8f66\u3002\n\n\u6211\u4eec\u63a5\u4e0b\u6765\u6839\u636e\u5df2\u6709\u4fe1\u606f\u5efa\u7acb\u56fe\u8bba\u6a21\u578b\u6c42\u89e3\u3002\n\n1. \u82e5\u7b2c $i$ \u573a\u6e38\u620f\u672c\u6765\u5c31\u4e0d\u80fd\u7528 $h_i$ \u578b\u8f66\uff0c\u5219\u8fd9\u6761\u4fe1\u606f\u65e0\u7528\uff0c\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\n2. \u5426\u5219\uff0c\u82e5\u7b2c $j$ \u573a\u6e38\u620f\u4e0d\u80fd\u7528 $h_j$ \u578b\u8f66\uff0c\u5219\u7b2c $i$ \u573a\u6e38\u620f\u4e5f\u4e0d\u80fd\u4f7f\u7528 $h_i$ \u578b\u8f66\uff0c\u5426\u5219\u65e0\u6cd5\u6ee1\u8db3\u8be5\u7ea6\u675f\u6761\u4ef6\u3002\n3. \u5426\u5219\uff0c\u8fd9\u610f\u5473\u7740\uff1a\n    - \u82e5\u5728\u7b2c $i$ \u573a\u6e38\u620f\u4f7f\u7528\u4e86 $h_i$ \u578b\u8f66\uff0c\u5219\u7b2c $j$ \u573a\u6e38\u620f\u5fc5\u987b\u4f7f\u7528 $h_j$ \u578b\u8f66\uff1b\n    - \u82e5\u5728\u7b2c $j$ \u573a\u6e38\u620f\u6ca1\u6709\u4f7f\u7528 $h_j$ \u578b\u8f66\uff0c\u5219\u7b2c $i$ \u573a\u6e38\u620f\u4e5f\u4e0d\u80fd\u4f7f\u7528 $h_i$ \u578b\u8f66\u3002\n\n\u6839\u636e\u4e0a\u9762\u7684\u8ba8\u8bba\u8fde\u8fb9\u5373\u53ef\u3002\n\n2-SAT \u95ee\u9898\u7684\u89e3\u6cd5\u53ef\u4ee5\u53c2\u8003 OI Wiki\uff0c\u8fd9\u91cc\u4e0d\u518d\u5c55\u5f00\u3002\n\n\u73b0\u5728\u8003\u8651\u6709 $x$ \u5730\u56fe\u7684\u60c5\u51b5\uff0c\u4e00\u79cd\u66b4\u529b\u7684\u60f3\u6cd5\u662f\u679a\u4e3e $x$ \u5730\u56fe\u4e0d\u7528\u54ea\u4e00\u79cd\u8f66\uff0c\u5c06 $x$ \u5730\u56fe\u8f6c\u5316\u4e3a\u4e00\u822c\u5730\u56fe\u6c42\u89e3\u3002\u8fd9\u6837\u72b6\u6001\u603b\u6570\u5c06\u8fbe\u5230 $3^d$\uff0c\u65e0\u6cd5\u627f\u53d7\u3002\n\n\u6ce8\u610f\u5230\u4e0a\u9762\u7684\u679a\u4e3e\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u679a\u4e3e\u6240\u6709\u4e09\u79cd\u666e\u901a\u5730\u56fe\uff0c\u53ea\u7528\u679a\u4e3e\u4e24\u79cd\u5730\u56fe\u5373\u53ef\u3002\u56e0\u4e3a\u4efb\u610f\u4e24\u79cd\u666e\u901a\u5730\u56fe\u7684\u7ec4\u5408\uff0c\u90fd\u80fd\u5b8c\u6574\u8986\u76d6\u4e09\u79cd\u53ef\u7528\u7684\u8f66\u3002\n\n\u4ece\u800c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(2^d\\times (n+m))$\u3002\n\n```cpp\n// Problem: P3825 [NOI2017]\u6e38\u620f\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/P3825\n// Memory Limit: 128 MB\n// Time Limit: 1000 ms\n// Powered by CP Editor (https://github.com/cpeditor/cpeditor)\n\n#include <cstring>\n#include <iostream>\n#include <vector>\n#include <stack>\nusing namespace std;\nstruct rule\n{\n int i,j;\n char hi[5],hj[5];\n}a[100005];\nint dfn[100005],low[100005],vis[100005],col[100005],colc,cnt;\nchar S[50005],ns[50005];\nconst char ma[5][5]={\"BC\",\"AC\",\"AB\"};\nint n,d,m;\nvector<int> pos;\nvector<int> e[100005];\nstack<int> s;\nvoid dfs(int u)\n{\n dfn[u]=low[u]=++cnt;\n vis[u]=1,s.push(u);\n for(auto v:e[u])\n {\n  if(!dfn[v])\n  {\n   dfs(v);\n   low[u]=min(low[u],low[v]);\n  }\n  else if(vis[v])\n   low[u]=min(low[u],dfn[v]);\n }\n if(dfn[u]==low[u])\n {\n  colc++;\n  while(!s.empty())\n  {\n   int x=s.top();\n   s.pop();\n   col[x]=colc,vis[x]=0;\n   if(x==u)break;\n  }\n }\n}\nint main()\n{\n cin>>n>>d;\n cin>>(S+1);\n cin>>m;\n for(int x=1;x<=m;x++)\n  cin>>a[x].i>>a[x].hi>>a[x].j>>a[x].hj;\n memcpy(ns,S,sizeof(S));\n for(int i=1;i<=n;i++)\n  if(S[i]=='x')pos.push_back(i);\n for(int s=0;s<(1<<d);s++)\n {\n  for(int i=1;i<=2*n;i++)\n   e[i].clear();\n  memset(dfn,0,sizeof(dfn));\n  memset(low,0,sizeof(low));\n  cnt=colc=0;\n  for(int i=0;i<d;i++)\n   if(s&(1<<i))ns[pos[i]]='a';\n   else ns[pos[i]]='b';\n  for(int x=1;x<=m;x++)\n  {\n   int i=a[x].i,j=a[x].j;\n   int mai=ns[i]-'a',maj=ns[j]-'a';\n   int u1=i+n*(a[x].hi[0]!=ma[mai][0]),v1=j+n*(a[x].hj[0]!=ma[maj][0]);\n   int u2=(u1>n?u1-n:u1+n),v2=(v1>n?v1-n:v1+n);\n   if(a[x].hi[0]-'A'==mai)continue;\n   if(a[x].hj[0]-'A'==maj)\n    e[u1].push_back(u2);//\u540c\u4e00\u6e38\u620f\u5185\u7684\u4e24\u4e2a\u70b9\u8fde\u8fb9\uff0c\u8868\u793a\u8be5\u70b9\u4e0d\u80fd\u88ab\u7eb3\u5165\u5230\u5408\u6cd5\u89e3\u5f53\u4e2d\n   else\n   {\n    e[u1].push_back(v1);\n    e[v2].push_back(u2);\n   }\n  }\n  for(int i=1;i<=2*n;i++)\n   if(!dfn[i])dfs(i);\n  bool flag=true;\n  for(int i=1;i<=n;i++)\n   if(col[i]==col[i+n])flag=false;\n  if(flag)\n  {\n   for(int i=1;i<=n;i++)\n    if(col[i]<col[i+n])\n    {\n     if(ns[i]=='a')cout<<'B';\n     else cout<<'A';\n    }\n    else\n    {\n     if(ns[i]!='c')cout<<'C';\n     else cout<<'B';\n    }\n   return 0;\n  }\n }\n cout<<-1<<endl;\n return 0;\n}\n```",
        "postTime": 1595778305,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3825 \u3010[NOI2017]\u6e38\u620f\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u8fd9\u9053\u9898\u633a\u5999\u7684\u6837\u5b50\uff1f~~\uff08\u5176\u5b9e\u662f\u6211\u592a\u5f31\u4e86\uff09~~\n\n~~\u4e5f\u7b97\u662f\u4e00\u7bc7$2-sat$\u7684\u5c0f\u7ed3\u5427\uff1f~~\n\n**$2-sat$**\n\n\u7ed9\u5b9a\u4e00\u4e9b\u5e03\u5c14\u7c7b\u578b\uff0c\u6bcf\u4e2a\u70b9\u53ea\u6709$0/1$\u4e24\u79cd\u53d6\u503c\uff0c\u7136\u540e\u7ed9\u51fa\u591a\u79cd\u9650\u5236\u6761\u4ef6\uff0c\u8981\u6c42\u65b9\u6848\u3002\n\n\u8003\u8651\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u5982\uff1a$a->a_1,a_0$\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u79cd\u9650\u5236\u6761\u4ef6\u8fdb\u884c\u4e0d\u540c\u7684\u8fde\u8fb9\u3002\n\n\u4ee5\u8fd9\u9053\u9898\u4e3a\u4f8b\uff0c\n\n\u6211\u4eec\u5148\u8003\u8651$d = 0$\u7684\u6761\u4ef6\u3002\n\n\u90a3\u4e48\u6ce8\u610f\u5230\u6bcf\u4e2a\u70b9\u5b83\u53ea\u6709\u4e24\u4e2a\u53d6\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u9884\u5904\u7406\u51fa\u6765\u3002\n\n\u7136\u540e\u8fd9\u5c31\u662f\u4e00\u4e2a$2-sat$\u95ee\u9898\u3002\n\n\u8003\u8651\u8fde\u8fb9\u6761\u4ef6\u3002\n\n\u5982\u679c\u4e00\u4e2a\u6761\u4ef6\u662f$x$\u4e3a$A$\uff0c\u5219$y$\u4e3a$B$\n\n\u4f46\u662f$x$\u4f4d\u7f6e\u4e0a\u7684\u70b9\u5c31\u662f$a$\uff0c\u90a3\u4e48\u8bf4\u660e\u8fd9\u79cd\u6761\u4ef6\u662f\u65e0\u6cd5\u6210\u7acb\u7684\uff0c\u6211\u4eec\u5ffd\u7565\u3002\n\n\u5982\u679c$x$\u4f4d\u7f6e\u4e0a\u4e0d\u662f$a$\uff08\u6bd4\u5982\u662f$B$\uff09\uff0c\u4f46$y$\u4e3a$b$\uff0c\u90a3\u4e48\u5c31\u6709\uff1a\u82e5$x$\u4e3a$A$\uff0c\u5219$y$\u4e3a$B$\uff0c\u4f46$y$\u4e0d\u80fd\u4e3a$B$\uff0c\u6240\u4ee5$x$\u4ea6\u4e0d\u80fd\u4e3a$A$\uff0c\u6211\u4eec\u5c31\u628a$x_A$\u8fde\u5411$x_C$\u8bf4\u660e$x_A$\u4e0d\u80fd\u53d6\u3002\n\n\u5176\u4ed6\u6761\u4ef6\u7684\u8bdd\u9700\u8981\u8003\u8651\u5468\u5168\uff0c\u5927\u6982\u662f\u8fd9\u6837\u8fde\uff1a\n\n$x_A->y_B$\n\n$y_{other} -> x_{other}$\uff08\u5982\u679c$y$\u4e0d\u4e3a$B$\uff0c\u90a3\u4e48$x$\u4ea6\u4e0d\u4e3a$A$\uff09\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u5904\u7406$d = 0$\u7684\u60c5\u51b5\u4e86\n\n\u5982\u679c$d\\quad!=\\quad0$\u5462\n\n\u56e0\u4e3a$d$\u90a3\u4e48\u5c0f\uff0c\u6240\u4ee5\u66b4\u679a\u554a\uff01\n\n\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e$x$\u8fd9\u4e2a\u4f4d\u7f6e\u4e0d\u80fd\u53d6\u90a3\u4e2a\u70b9\uff0c\u8fd9\u6837\u679a\u4e3e\u7684\u8bdd\uff0c\u5982\u679c$x$\u4e0d\u80fd\u53d6$A$\uff0c\u6211\u4eec\u5c31\u628a$B,C$\u5b58\u5728\u7684\u7b54\u6848\u5305\u62ec\u4e86\u8fdb\u53bb\uff0c\u5982\u679c\u679a\u4e3e$x$\u4e0d\u80fd\u53d6$B$\uff0c\u90a3\u4e48\u5c31\u628a$A,C$\u7684\u7b54\u6848\u5305\u62ec\u4e86\u8fdb\u53bb\u3002\n\n\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a$x$\u6211\u4eec\u53ea\u8981\u679a\u4e3e$2$\u6b21\u3002\n\n\u590d\u6742\u5ea6$O(2^d*N)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define re register\n#define rep( i, s, t ) for( re int i = s; i <= t; ++ i ) \n#define Next( i, x ) for( re int i = head[x]; i; i = e[i].next ) \nint read() {\n\tchar cc = getchar(); int cn = 0, flus = 1;\n\twhile(cc < '0' || cc > '9') {  if( cc == '-' ) flus = -flus;  cc = getchar();  }\n\twhile(cc >= '0' && cc <= '9')  cn = cn * 10 + cc - '0', cc = getchar();\n\treturn cn * flus;\n}\n\nconst int N = 5e5 + 5;\nint head[N], dfn[N], low[N], s[N], cnt, n, m, top, tim, col, color[N];\nint stac[N], top2, d, suit[N], ch[N][2];\nstruct E {\n\tint to, next;\n}e[N * 2];\nstruct Node{\n\tint x, hx, y, hy;\n}q[N];\nchar S[N];\n\nvoid add( int x, int y ) {\n\te[++cnt] = (E) { y, head[x] }, head[x] = cnt;\n} \nvoid trajan( int x ) {\n\tdfn[x] = low[x] = ++tim, s[++ top] = x;\n\tNext( i, x ) {\n\t\tint v = e[i].to;\n\t\tif( !dfn[v] )  trajan( v ), low[x] = min( low[x], low[v] );\n\t\telse if( !color[v] )  low[x] = min( low[x], dfn[v] );\n\t}\n\tif( low[x] == dfn[x] ) {\n\t\t++ col;\n\t\twhile( s[top + 1] != x ) color[s[top--]] = col;\n\t}\n} \n\nvoid doit() {\n\tmemset( head, 0, sizeof(head) ), memset( dfn, 0, sizeof(dfn) );\n\tmemset( low, 0, sizeof(low) ), memset( color, 0, sizeof(color) );\n\tcnt = tim = top = col = 0;\n\trep( i, 1, m ) {\n\t\tint x = q[i].x, y = q[i].y, u = x + q[i].hx * n, v = y + q[i].hy * n;\n\t\tif( q[i].hx == suit[x] ) continue;\n\t\tif( q[i].hy == suit[y] ) {\n\t\t\tadd( ch[x][ch[x][1] == u], ch[x][ch[x][1] != u] ); \n\t\t}\n\t\telse add( u, v ), add( ch[y][ch[y][1] != v], ch[x][ch[x][1] != u]);\n\t}\n\trep( i, 1, n ) {  if( !dfn[ch[i][0]] ) trajan( ch[i][0] );  if( !dfn[ch[i][1]] ) trajan( ch[i][1] );  }\n\trep( i, 1, n ) if( color[ch[i][0]] == color[ch[i][1]] ) return ;\n\trep(i, 1, n) {\n\t\tif( color[ch[i][0]] > color[ch[i][1]] ) printf(\"%c\", ( ( ch[i][1] - 1 ) / n ) + 'A'  );\n\t\telse printf(\"%c\", ( ( ch[i][0] - 1 ) / n ) + 'A' );\n\t}\n    exit(0);\n}\nvoid dfs( int x ) {\n\tif( x > d ) {\n\t\tdoit();\n\t\treturn ;\n\t}\n\tint now = stac[x];\n\tsuit[now] = 0, ch[now][0] = now + n, ch[now][1] = now + 2 * n,\n\tdfs( x + 1 );\n\tsuit[now] = 1, ch[now][0] = now, ch[now][1] = now + 2 * n;\n\tdfs( x + 1 );\n}\nsigned main()\n{\n\tn = read(), d = read();\n\tscanf( \"%s\", S );\n\tint len = strlen(S);\n\trep( i, 0, len - 1 ) {\n\t\tint now = i + 1;\n\t\tif( S[i] == 'x' ) stac[++top2] = now;\n\t\tif( S[i] == 'a' ) suit[now] = 0, ch[now][0] = now + n, ch[now][1] = now + 2 * n;\n\t\tif( S[i] == 'b' ) suit[now] = 1, ch[now][0] = now, ch[now][1] = now + 2 * n;\n\t\tif( S[i] == 'c' ) suit[now] = 2, ch[now][0] = now, ch[now][1] = now + n; \n\t}\n\tm = read();\n\trep( i, 1, m )\n\t\tq[i].x = read(), q[i].hx = getchar() - 'A', q[i].y = read(), q[i].hy = getchar() - 'A';\n\tdfs( 1 );\n\tprintf(\"-1\");\n\treturn 0;\n} \n```",
        "postTime": 1552360314,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3825 \u3010[NOI2017]\u6e38\u620f\u3011"
    },
    {
        "content": "\u4ece\u9898\u9762\u4e2d\u56db\u5143\u7ec4$(i,h_i,j,h_j)$\u9650\u5236\u9009\u62e9\u8f66\u5b50\u578b\u53f7\uff0c\u4e0d\u96be\u60f3\u5230\u8fd9\u9898\u8981\u7528$2-SAT$\u89e3\u51b3\u3002\n\n\u8003\u8651\u8f6c\u5316\u4e3a$2-SAT$\u6a21\u578b\uff0c\u53d1\u73b0\u9664\u5730\u56fe$x$\u5916\uff0c\u5176\u4ed6\u5730\u56fe\u90fd\u53ea\u6709\u4e24\u79cd\u8f66\u5b50\u578b\u53f7\u53ef\u4ee5\u53c2\u52a0\uff0c\u90a3\u4e48\u5c31\u628a\u8fd9\u4e24\u79cd\u578b\u53f7\u8f6c\u5316\u4e3a\u4e24\u79cd\u72b6\u6001\u3002\n\n\u82e5$S_i=a$\uff0c\u5219\u72b6\u6001\u4e3a$B$\u548c$C$\u3002\n\n\u82e5$S_i=b$\uff0c\u5219\u72b6\u6001\u4e3a$A$\u548c$C$\u3002\n\n\u82e5$S_i=c$\uff0c\u5219\u72b6\u6001\u4e3a$A$\u548c$B$\u3002\n\n\u7136\u540e\u8ba8\u8bba\u56db\u5143\u7ec4\u7684\u60c5\u51b5\uff0c\u8bbe$i$\u4e3a\u8f93\u5165\u7684\u72b6\u6001\uff0c$i^\\prime$\u4e3a\u53e6\u4e00\u4e2a\u72b6\u6001\u3002\n\n\u82e5\u5728\u7b2c$i$\u573a\uff0c$h_i$\u4e0d\u53ef\u7528\uff0c\u5219\u4e0d\u8fdb\u884c\u8fde\u8fb9\u3002\n\n\u82e5\u5728\u7b2c$i$\u573a\uff0c$h_i$\u53ef\u7528\uff0c\u5728\u7b2c$j$\u573a\uff0c$h_j$\u4e0d\u53ef\u7528\uff0c\u5219\u4ece$i$\u5411$i^\\prime$\u8fde\u8fb9\uff0c\u8868\u793a\u4e0d\u80fd\u9009$i$\u3002\n\n\u82e5\u4e24\u4e2a\u90fd\u53ef\u7528\uff0c\u5219\u4ece$i$\u5411$j$\u8fde\u8fb9\uff0c\u8868\u793a\u82e5\u9009$i$\uff0c\u5219\u4e00\u5b9a\u9009$j$\uff0c\u540c\u65f6\u4ece$j^\\prime$\u5411$i^\\prime$\u8fde\u8fb9\uff0c\u8fd9\u91cc\u8868\u793a\u82e5\u6ca1\u6709\u9009$j$\uff0c\u5219\u4e00\u5b9a\u6ca1\u6709\u9009$i$\u3002\n\n\u7ee7\u7eed\u8003\u8651\u5982\u4f55\u5904\u7406\u5730\u56fe$x$\uff0c\u53d1\u73b0\u5176\u6570\u91cf$d\\leqslant8$\uff0c\u6570\u636e\u89c4\u6a21\u5f88\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528$dfs$\u5c06\u5176\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u679a\u4e3e\u4e00\u904d\uff0c\u518d\u68c0\u67e5\u662f\u5426\u5408\u6cd5\u3002\n\n\u6211\u4eec\u53ea\u9700\u8003\u8651\u5730\u56fe$x$\u7b49\u4ef7\u4e8e\u5730\u56fe$a$\u548c\u5730\u56fe$b$\u4e24\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a\u6b64\u65f6\u5df2\u7ecf\u5305\u62ec$A,B,C$\u4e09\u79cd\u8f66\u578b\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(2^d(n+m))$\u3002\n\n\u5b9e\u73b0\u7ec6\u8282\u8fd8\u662f\u86ee\u591a\u7684\uff0c\u4e0d\u6e05\u695a\u7684\u5c31\u770b\u4ee3\u7801\u5427\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 1000010\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n\tx=0;char c=getchar();bool flag=false;\n\twhile(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n\twhile(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n\tif(flag)x=-x;\n}\nint n,d,m,x_cnt;\nbool flag;\nchar s[maxn],a[5],b[5],c1[maxn],c2[maxn];\nint pos[maxn];\nstruct node\n{\n    int x,y;\n    char a,b;\n}t[maxn];\nstruct edge\n{\n    int to,nxt;\n}e[maxn];\nint head[maxn],edge_cnt;\nvoid add(int from,int to)\n{\n    e[++edge_cnt]=(edge){to,head[from]};\n    head[from]=edge_cnt;\n}\nint dfn_cnt,co_cnt,top;\nint dfn[maxn],low[maxn],co[maxn],st[maxn];\nbool vis[maxn];\nvoid tarjan(int x)\n{\n    dfn[x]=low[x]=++dfn_cnt;\n    st[++top]=x;\n    vis[x]=true;\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(!dfn[y])\n        {\n            tarjan(y);;\n            low[x]=min(low[x],low[y]);\n        }\n        else if(vis[y])\n            low[x]=min(low[x],dfn[y]);\n    }\n    if(low[x]==dfn[x])\n    {\n        co_cnt++;\n        int now;\n        do\n        {\n            now=st[top--];\n            vis[now]=false;\n            co[now]=co_cnt;\n        }while(now!=x);\n    }\n}\nbool check()\n{\n    for(int i=1;i<=2*n;++i)\n        if(!dfn[i])\n            tarjan(i);\n    for(int i=1;i<=n;++i)\n        if(co[i]==co[i+n])\n            return false;\n    return true;\n}\nvoid clear()\n{\n    edge_cnt=dfn_cnt=co_cnt=top=0;\n    memset(st,0,sizeof(st));\n    memset(co,0,sizeof(co));\n    memset(dfn,0,sizeof(dfn));\n    memset(low,0,sizeof(low));\n    memset(vis,0,sizeof(vis));\n    memset(head,0,sizeof(head));\n}\nvoid work()\n{\n    clear();\n    for(int i=1;i<=m;++i)\n    {\n        int x=t[i].x,y=t[i].y;\n        char a=t[i].a,b=t[i].b;\n        if(s[x]==a) continue;\n        if(s[y]==b)\n        {\n            add(x+(a==c2[x])*n,x+(a==c1[x])*n);\n            continue;\n        }\n        add(x+(a==c2[x])*n,y+(b==c2[y])*n);\n        add(y+(b==c1[y])*n,x+(a==c1[x])*n);\n    }\n    if(check())\n\t{\n        flag=true;\n        for(int i=1;i<=n;i++)\n        {   \n            if(co[i]<co[i+n]) printf(\"%c\",c1[i]);\n            else printf(\"%c\",c2[i]);\n        }\n    }\n}\nvoid dfs(int x)\n{\n    if(flag) return;\n    if(x==d+1)\n    {\n        work();\n        return;\n    }\n    int now=pos[x];\n    s[now]='A',c1[now]='B',c2[now]='C',dfs(x+1);\n    s[now]='B',c1[now]='A',c2[now]='C',dfs(x+1);\n}\nint main()\n{\n\tread(n),read(d);\n    scanf(\"%s\",s+1);\n    for(int i=1;i<=n;++i)\n    {\n        s[i]+='A'-'a';\n        if(s[i]=='A') c1[i]='B',c2[i]='C';\n        if(s[i]=='B') c1[i]='A',c2[i]='C';\n        if(s[i]=='C') c1[i]='A',c2[i]='B';\n        if(s[i]=='X') pos[++x_cnt]=i;\n    }\n    read(m);\n    for(int i=1;i<=m;++i)\n    {\n        read(t[i].x),scanf(\"%s\",a),read(t[i].y),scanf(\"%s\",b);\n        t[i].a=a[0],t[i].b=b[0];\n    }\n    dfs(1);\n    if(!flag) printf(\"-1\");\n\treturn 0;\n}\n```",
        "postTime": 1576582786,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3825 \u3010[NOI2017]\u6e38\u620f\u3011"
    },
    {
        "content": "[\u6211\u76842-SAT](https://www.luogu.com.cn/blogAdmin/article/edit/213094)\n\n> \u6709\u4e09\u79cd\u8f66A,B,C,\u6709$n$\u4e2a\u5730\u56fe\uff0c\u6bcf\u4e2a\u5730\u56fe\u7528\u4e00\u4e2a\u5b57\u7b26\u8868\u793a\u3002\u82e5\u5b57\u7b26\u4e3a```a```\u90a3\u4e48\u8f66A\u5c31\u4e0d\u80fd\u5728\u8fd9\u4e2a\u5730\u56fe\u4e0a\u5f00\uff0c\u82e5\u662f```b```\uff0c\u90a3\u4e48\u8f66B\u5c31\u4e0d\u80fd\u5728\u8fd9\u4e2a\u5730\u56fe\u4e0a\u5f00\uff0c\u82e5\u662f```c```\uff0c\u90a3\u4e48\u8f66C\u5c31\u4e0d\u80fd\u5728\u8fd9\u4e2a\u5730\u56fe\u4e0a\u5f00\uff0c\u82e5\u662f```x```\uff0c\u90a3\u4e48\u4e09\u79cd\u8f66\u90fd\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5730\u56fe\u4e0a\u5f00\u3002\uff08x\u7684\u6570\u91cf\u6700\u591a\u4e3a8\uff09  \n\u6709$m$\u4e2a\u7ea6\u675f\uff0c\u7528$(i,h_i,j,h_j)$\u8868\u793a\uff0c\u4ee3\u8868\u82e5\u7b2c$i$\u4e2a\u5730\u56fe\u7528\u8f66$h_i$\uff0c\u90a3\u4e48\u7b2c$j$\u4e2a\u5730\u56fe\u5fc5\u987b\u7528\u8f66$h_j$ ($h_i,h_j$\u4e3aA\u6216B\u6216C)  \n\u95ee\u6709\u6ca1\u6709\u5408\u6cd5\u5206\u914d\u65b9\u6848\u3002\u82e5\u6709\uff0c\u8f93\u51fa\u4e00\u7ec4(\u6709spj), \u5426\u5219\u8f93\u51fa```-1```.\n\n\n\u4e4d\u4e00\u770b\u4e00\u4e2a3-SAT\u95ee\u9898  \n\u4e0d\u8fc7\u5f53\u7136\u4e0d\u662f  \n\n\u6709\u4e09\u4e2a\u4e3b\u8981\u95ee\u9898\uff1a  \n1 \u5730\u56fe\u7528\u8f66\u9650\u5236  \n2 \u7ea6\u675f\u6761\u4ef6  \n3 \u5730\u56fe\u4e3ax  \n\n#### \u7b2c\u4e00\u4e2a\u95ee\u9898\uff1a**\u5730\u56fe\u7528\u8f66\u9650\u5236**\uff08\u4e0d\u8003\u8651x\uff09\n\n\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u7531\u4e8e\u6bcf\u4e2a\u5730\u56fe**\u53ea\u80fd\u6709\u4e24\u79cd**\u9009\u8f66\u65b9\u6848\uff0c\u6240\u4ee5\u5c31\u662f\u4e00\u4e2a**2-SAT**\u95ee\u9898Orz  \n\u90a3\u4e48\u7a0d\u52a0\u8bb0\u5f55\u5373\u53ef\uff08\u6bd4\u5982$(2i-1,2i)$\u6216$(i,i+n)$\u7b49\u7b49\uff09\uff0c\u7136\u540e\u518d\u5224\u65ad\u8fd9\u662f\u54ea\u4e24\u4e2a\u5730\u56fe  \n\n\u6bd4\u5982\u5bf9\u4e8e\u5b57\u7b26\u4e3a'b'\u7684\u5730\u56fe$i$\uff0c\u5047\u8bbe\u5730\u56fe$i$\u7684\u53ef\u9009\u7684\u4e24\u4e2a\u9009\u9879\u4e3a$2i-1$\u548c$2i$\uff0c\u90a3\u4e48\u53ef\u4ee5\u5224\u65ad\u5f97\u51fa\uff0c\u4ee3\u8868\u8f66A\u7684\u9009\u9879\u662f$2i-1$,\u4ee3\u8868\u8f66C\u7684\u9009\u9879\u662f$2i$\uff0c\u6216\u8005\u8bf4$2i-1$\u662f\u8f66A\uff0c$2i$\u662f\u8f66C  \n\n#### \u7b2c\u4e8c\u4e2a\u95ee\u9898\uff1a**\u7ea6\u675f\u6761\u4ef6**  \n\n\u6211\u4eec\u5047\u8bbe\u5730\u56fe$i$\u7684\u4e24\u4e2a\u9009\u9879\u4e3a$i_0$\u548c$i_1$\n\n\u5206\u4e09\u79cd\u60c5\u51b5\uff1a  \n\u4e0d\u59a8\u5047\u8bbe$h_i$\u662f$i_0$\u4ee3\u8868\u7684\u8f66\uff0c$h_j$\u662f$j_0$\u4ee3\u8868\u7684\u8f66\n\n```if``` \u7b2c$i$\u5f20\u5730\u56fe**\u6ca1\u6cd5\u9009**$h_i$\uff0c\u90a3\u4e48\u5c31\u4ee3\u8868\u8fd9\u4e2a\u7ea6\u675f\u5c31\u662f\u4e00\u53e5\u5e9f\u8bdd  \n\n```else if``` \u7b2c$j$\u5f20\u5730\u56fe**\u6ca1\u6cd5\u9009**$h_j$\uff0c\u90a3\u4e48\u5c31\u4ee3\u8868\u7b2c$i$\u5f20\u5730\u56fe\u4e0d\u80fd\u9009$h_i$(\u5426\u5219$j$\u5c31\u5fc5\u987b\u9009$h_j$)\uff0c\u8fde\u63a5\u6709\u5411\u8fb9$i_0\\Rightarrow i_1$  \n\n```else``` **\u540c\u6a21\u677f\u7684\u601d\u60f3**\uff0c\u8fde$i_0\\Rightarrow j_0, i_1\\Rightarrow j_1$ \n\n#### \u7b2c\u4e09\u4e2a\u95ee\u9898\uff1a**\u5730\u56fe\u4e3ax**\n\n\u5730\u56fe\u4e3ax\u4ee3\u8868\u53ef\u4ee5\u662fAB\u6216AC\u6216BC  \n\n\u7531\u4e8ex\u7684\u6570\u91cf\u975e\u5e38\u5c0f\uff0c\u4e8e\u662f\u53ef\u4ee5dfs\u7206\u641c\u679a\u4e3ex\u652f\u6301\u54ea\u4e24\u8f86\u8f66\uff0c\u4e00\u65e6\u65b9\u6848\u53ef\u884c\uff0c\u5c31return  \n\n\u53d1\u73b0x\u9009A\u6216C\u5df2\u7ecf\u518dx\u9009AB\u548cBC\u4e2d\u5305\u542b\u4e86\uff0c\u90a3\u4e48\u4fbf\u4e0d\u7528\u679a\u4e3eAC\u8fd9\u79cd\u65b9\u6848\n\n#### \u603b\u590d\u6742\u5ea6\uff1a$2^d(n+m)$ \uff08d\u4e3ax\u7684\u4e2a\u6570\uff09\n\n\u4ee3\u7801\uff1a\u5f3a\u884c\u538b\u884c\u540e\u4e5f\u898168\u884c\u800c\u4e14\u7ec6\u8282\u8d3c\u591a  \n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100009,M=100009;\nstruct edge{int to,nxt;}e[M*4]; int hd[N],tot,nmw;\nvoid add(int u,int v){\n\t//cout<<\"add(\"<<u<<\" \"<<v<<\")\\n\";\n\tnmw++;\n\te[++tot]=(edge){v,hd[u]}; hd[u]=tot;\n} \nint tick,dfn[N],low[N],cnt,scc[N]; stack<int>st; bool in[N];\nvoid tarjan(int u){\n\tdfn[u]=low[u]=++tick; st.push(u); in[u]=1;\n\tfor(int i=hd[u],v;i;i=e[i].nxt)\n\t\tif(dfn[v=e[i].to]&&in[v]) low[u]=min(low[u],low[v]);\n\t\telse if(!dfn[v]) tarjan(v),low[u]=min(low[u],low[v]);\n\tif(low[u]==dfn[u]){\n\t\tscc[u]=++cnt;\n\t\twhile(st.top()!=u) in[st.top()]=0,scc[st.top()]=cnt,st.pop();\n\t\tin[u]=0,st.pop();\n\t}\n}\nint n,d,m,ni[M],nj[M],xt,cx[N]; char c[N],hi[M],hj[M]; bool wx[N];\nint getn(int u,char hu){\n\tif(hu=='A'||(hu=='B'&&c[u]=='a')) return 2*u-1;\n\tif(hu=='C'||(hu=='B'&&c[u]=='c')) return 2*u;\n}\nchar getc(int u,int nu){\n\tif(nu==2*u-1) return c[u]=='a'?'B':'A';\n\telse return c[u]=='c'?'B':'C';\n}\nint rev(int p){return p%2?p+1:p-1;};\nvoid init(){\n\tmemset(hd,0,sizeof(hd)),memset(e,0,sizeof(e));\n\tmemset(dfn,0,sizeof(dfn)),tot=0;\n\tmemset(in,0,sizeof(in)),memset(scc,0,sizeof(scc));\n\ttick=0,cnt=0,nmw=0;\n}\nbool solve(){\n\tinit(); bool ret=1;\n\tfor(int i=1;i<=m;i++){\n\t\tif(hi[i]!=c[ni[i]]-'a'+'A'&&hj[i]==c[nj[i]]-'a'+'A'){\n\t\t\tif(getn(ni[i],hi[i])==2*ni[i]) add(2*ni[i],2*ni[i]-1);\n\t\t\telse add(2*ni[i]-1,2*ni[i]);\n\t\t}\n\t\telse if(hi[i]!=c[ni[i]]-'a'+'A')\n\t\t\tadd(getn(ni[i],hi[i]),getn(nj[i],hj[i])),\n\t\t\tadd(rev(getn(nj[i],hj[i])),rev(getn(ni[i],hi[i])));\n\t}\n\tfor(int i=1;i<=n*2;i++) if(!dfn[i]) tarjan(i);\n\tfor(int i=1;i<=n;i++) if(scc[2*i-1]==scc[2*i]) ret=0;\n\treturn ret;\n}\nbool flag=0;\nvoid dfs(int i){\n\tif(i==d+1){if(solve()) flag=1;return;}\n\tc[cx[i]]='a',dfs(i+1); if(flag) return;\n\tc[cx[i]]='c',dfs(i+1);\n}\nint main(){\n\tscanf(\"%d%d%s%d\",&n,&d,c+1,&m);\n\tfor(int i=1;i<=m;i++) cin>>ni[i]>>hi[i]>>nj[i]>>hj[i];\n\tfor(int i=1;i<=n;i++) if(c[i]=='x') wx[i]=1,cx[++xt]=i;\n\tdfs(1);\n\tif(flag)\n\t\tfor(int i=1;i<=n;i++) putchar(getc(i,2*i-(scc[2*i-1]<scc[2*i])));\n\telse printf(\"%d\",-1);\n\treturn 0;\n}\n```\n\n#### \u4e00\u4e9bDebug\u8981\u7d20\uff1a  \n\n1 TARJAN\u5343\u4e07\u4e0d\u80fd\u5199\u9519\uff01  \n2 \u5bf9\u4e8e2SAT\u95ee\u9898\uff0c\u4e00\u4e2a\u5f88\u597d\u7684debug\u5c31\u662f\u6253\u5370\u52a0\u7684\u8fb9\u7136\u540e\u624b\u52a8\u7b97\u95ee\u9898\u51fa\u5728\u54ea\u91cc  \n3 \u5982\u679c\u662f\u7ec6\u8282\u95ee\u9898\uff08\u53cd\u6b63\u6211\u6ca1\u72af\uff09\uff0c\u4ece\u52a0\u8fb9\u8fd9\u91cc\u4e00\u70b9\u4e00\u70b9\u5f80\u91cc\u63a8",
        "postTime": 1581909243,
        "uid": 180652,
        "name": "_lgswdn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3825 \u3010[NOI2017]\u6e38\u620f\u3011"
    },
    {
        "content": "# \u9898\u76ee\n\n[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P3825)\u770b\u9898\u76ee\u3002  \n\n# \u5206\u6790\n\n\u6ce8\u610f\u5230\uff0c\u975e `x` \u7684\u8d5b\u9053\u53ea\u6709\u4e24\u79cd\u8d5b\u8f66\u53ef\u9009\uff0c\u6240\u4ee5\u5982\u679c\u53ea\u6709 `a,b,c` \uff0c\u90a3\u4e48\u9650\u5236\u53ef\u4ee5\u8f6c\u5316\u4e3a 2-SAT \u7684\u8fb9\u3002\u4e0b\u9762\u6211\u4eec\u7528 $\\neg h_i$ \u8868\u793a\u5728 $i$ \u53f7\u4f4d\u4e0a\u4e0d\u9009\u62e9 $h_i$ \u8fd9\u8f86\u8f66\u3002\u6211\u4eec\u53ef\u4ee5\u5982\u4e0b\u8f6c\u5316\uff1a   \n\n1. \u5982\u679c $(i,h_i,j,h_j)$ \u4e2d\uff0c $h_i$ \u672c\u8eab\u4e0d\u53ef\u9009\uff0c\u8be5\u9650\u5236\u81ea\u7136\u4f5c\u5e9f\u3002   \n2. \u5982\u679c $(i,h_i,j,h_j)$ \u4e2d\uff0c $h_j$ \u672c\u8eab\u4e0d\u53ef\u9009\uff0c\u90a3\u4e48 $h_i$ \u4e5f\u4e0d\u53ef\u9009\uff0c\u5373 $h_i\\rightarrow \\neg h_i$ \u3002\n3. \u5982\u679c $(i,h_i,j,h_j)$ \u4e2d\uff0c \u4e24\u79cd\u8f66\u5404\u81ea\u90fd\u53ef\u4ee5\u9009\uff0c\u90a3\u4e48\u663e\u7136\u8fde\u63a5 $h_i\\rightarrow h_j$ \u548c $\\neg h_j\\rightarrow \\neg h_i$ \u3002   \n\n\u73b0\u5728\u8003\u8651\u5904\u7406 `x` \u3002\u867d\u7136\u6211\u4eec\u4e0d\u96be\u60f3\u5230 $O(3^d\\times m)$ \u8fdb\u884c\u679a\u4e3e\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651 `x` \u4e0a\u9009\u53d6 $A,B,C$ \u7684\u60c5\u51b5\u3002\u800c `a` \u5df2\u7ecf\u5305\u542b\u4e86\u9009 $B,C$ \uff0c `b` \u5df2\u7ecf\u5305\u542b\u4e86\u9009 $A,C$ \u3002\u5982\u679c\u6211\u4eec\u5c06 `x` \u5747\u66ff\u6362\u4e3a `a` \u6216 `b` \uff0c\u90a3\u4e48\u6211\u4eec\u5df2\u7ecf\u8003\u8651\u4e86\u6240\u6709\u7684\u60c5\u51b5\u3002\u56e0\u6b64\u53ea\u9700\u8981 $O(2^d\\times m)$ \u4fbf\u53ef\u4ee5\u3002   \n\n\n# \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n\n#define Opp( x ) ( x <= N ? x + N : x - N )\n\nconst int MAXN = 1e5 + 5;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0; char s = getchar(); int f = 1;\n\twhile( s < '0' || '9' < s ) { f = 1; if( s == '-' ) f = -1; s = getchar(); }\n\twhile( '0' <= s && s <= '9' ) { x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar(); }\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ) putchar( '-' ), x = -x;\n\tif( 9 < x ) write( x / 10 );\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\nstruct Edge\n{\n\tint to, nxt;\n}Graph[MAXN * 10];\n\nstruct Ristriction\n{\n\tint x, y; char hx, hy;\n\t\n\tvoid Read() \n\t{ \n\t\tscanf( \"%d %c %d %c\", &x, &hx, &y, &hy );\n\t\thx += 'a' - 'A', hy += 'a' - 'A';\n\t}\n}R[MAXN];\n\nint stk[MAXN], top;\n\nint id[MAXN];\nchar S[MAXN], fir[3] = { 'b', 'a', 'a' }, avail[3][2] = { { 'b', 'c' }, { 'a', 'c' }, { 'a', 'b' } };\nint seq[10], xtot;\n\nint head[MAXN], DFN[MAXN], LOW[MAXN], bel[MAXN];\nint N, M, D, cnt, tot, ID;\nbool in[MAXN];\n\nvoid AddEdge( const int from, const int to )\n{\n\tGraph[++ cnt].to = to, Graph[cnt].nxt = head[from];\n\thead[from] = cnt;\n}\n\nvoid Tarjan( const int u )\n{\n\tDFN[u] = LOW[u] = ++ ID;\n\tin[stk[++ top] = u] = true;\n\tfor( int i = head[u], v ; i ; i = Graph[i].nxt )\n\t\tif( ! DFN[v = Graph[i].to] ) Tarjan( v ), LOW[u] = MIN( LOW[u], LOW[v] );\n\t\telse if( in[v] ) LOW[u] = MIN( LOW[u], DFN[v] );\n\tif( DFN[u] == LOW[u] )\n\t{\n\t\tint v; tot ++;\n\t\tdo in[v = stk[top --]] = false, bel[v] = tot;\n\t\twhile( v ^ u );\n\t}\n}\n\nvoid Clean()\n{\n\tID = tot = top = cnt = 0;\n\tfor( int i = 1 ; i <= N * 2 ; i ++ ) \n\t\thead[i] = LOW[i] = DFN[i] = bel[i] = 0;\n}\n\nbool Chk()\n{\n\tClean();\n\tfor( int i = 1 ; i <= N ; i ++ ) id[i] = S[i] - 'a';\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t{\n\t\tif( R[i].hx == S[R[i].x] ) continue;\n\t\tif( R[i].hy == S[R[i].y] ) \n\t\t{\n\t\t\tint t = ( R[i].hx == fir[id[R[i].x]] ? R[i].x : Opp( R[i].x ) );\n\t\t\tAddEdge( t, Opp( t ) );\n\t\t}\n\t\telse \n\t\t{\n\t\t\tint u = ( R[i].hx == fir[id[R[i].x]] ? R[i].x : Opp( R[i].x ) ),\n\t\t\t\tv = ( R[i].hy == fir[id[R[i].y]] ? R[i].y : Opp( R[i].y ) );\n\t\t\tAddEdge( u, v ), AddEdge( Opp( v ), Opp( u ) );\n\t\t}\n\t}\n\tfor( int i = 1 ; i <= N * 2 ; i ++ ) if( ! DFN[i] ) Tarjan( i );\n\tfor( int i = 1 ; i <= N ; i ++ ) if( bel[i] == bel[i + N] ) return false;\n\treturn true;\n}\n\nint main()\n{\n\tbool flg = false;\n\tread( N ), read( D );\n\tscanf( \"%s\", S + 1 ), read( M );\n\tfor( int i = 1 ; i <= M ; i ++ ) R[i].Read();\n\tfor( int i = 1 ; i <= N ; i ++ ) if( S[i] == 'x' ) seq[++ xtot] = i;\n\tfor( int s = 0 ; s < ( 1 << xtot ) ; s ++ )\n\t{\n\t\tfor( int i = 1 ; i <= xtot ; i ++ )\n\t\t\tS[seq[i]] = 'a' + ( s >> ( i - 1 ) & 1 );\n\t\tif( flg = Chk() ) break;\n\t}\n\tif( ! flg ) { puts( \"-1\" ); return 0; }\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t\tputchar( avail[id[i]][bel[i + N] < bel[i]] - 'a' + 'A' );\n\tputchar( '\\n' );\n\treturn 0;\n}\n```\n\n",
        "postTime": 1607591836,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[NOI2017]\u6e38\u620f"
    },
    {
        "content": "\u8fd9\u9053\u9898\u770b\u4e0a\u53bb**NPC**\u554a\uff0c\u8d85\u7ea7\u4e0d\u53ef\u505a\u7684\u6837\u5b50\u3002\n\n\u6211\u4eec\u5148\u5206\u6790\u4e00\u4e0b\u7b80\u5355\u7684\u60c5\u5f62\uff1a**\u6ca1\u6709$x$\u5730\u56fe**\n\n\u6b64\u65f6\u6bcf\u4e2a\u5730\u56fe\u7531\u4e8e\u9650\u5236\u6389\u4e00\u79cd\u6c7d\u8f66\uff0c\u90a3\u4e48\u663e\u7136\u53ea\u4f1a\u6709\u4e24\u79cd\u9009\u62e9\u3002\n\n\u518d\u8003\u8651\u5230\u9650\u5236\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u5927\u81f4\u505a\u6cd5\u5c31\u5f88\u663e\u7136\u4e86\u2014\u2014**2-SAT**\n\n\u9996\u5148\u662f\u62c6\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u5f20\u5730\u56fe$i$\u62c6\u6210$2i-1$\u4e0e$2i$\u8868\u793a\u8fd9\u5f20\u5730\u56fe\u9009\u62e9**\u80fd\u7528\u7684\u8f66**\u7684\u7b2c\u4e00\u8f86\u8fd8\u662f\u7b2c\u4e8c\u8f86\u3002\n\n\u6bd4\u5982\u5982\u679c$s_i=b$\uff0c\u90a3\u4e48$2i-1$\u8868\u793a\u9009\u62e9$A$\u8f66\uff0c$2i$\u8868\u793a\u9009\u62e9$B$\u8f66\u3002\n\n\u73b0\u5728\u5f00\u59cb\u8003\u8651\u9009\u62e9\u7684\u9650\u5236\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9650\u5236$(u,x,v,y)$\uff0c\u6211\u4eec\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n- \u5f53$s_u=x$\uff0c\u8bf4\u660e\u8fd9\u4e2a\u9650\u5236\u6ca1\u6709\u610f\u4e49\uff0c\u76f4\u63a5\u65e0\u89c6\u5373\u53ef\u3002\n- \u5f53$s_u\\not=x$\u4e14$s_v=y$\u65f6\uff0c\u8bf4\u660e\u8fd9\u65f6$u$\u662f\u7edd\u5bf9\u4e0d\u80fd\u9009$x$\u5bf9\u5e94\u7684\u70b9\u7684\u3002\u4e3a\u4e86\u5728\u5efa\u56fe\u4e2d\u4f53\u73b0\u51fa\u6765\u6211\u4eec\u76f4\u63a5\u4ece$x$\u5bf9\u5e94\u7684\u70b9\u5411\u53e6\u4e00\u4e2a\u70b9\u8fde\u8fb9\u5373\u53ef\u3002\n- \u5f53$s_u\\not=x$\u4e14$s_v\\not= y$\u65f6\uff0c\u663e\u7136\u8bb2$x$\u5bf9\u5e94\u7684\u70b9\u5411$y$\u5bf9\u5e94\u7684\u70b9\u8fde\u8fb9\u3002\u4f46\u662f\u4e0d\u8981\u5fd8\u4e862-SAT\u5efa\u56fe\u7684**\u5bf9\u79f0\u6027**\uff0c\u6211\u4eec\u8fd8\u8981\u4ece$y$\u5bf9\u5e94\u7684\u70b9\u7684**\u53cd\u70b9**\u5411$x$\u5bf9\u5e94\u7684\u70b9\u7684**\u53cd\u70b9**\u8fde\u8fb9\u3002\u8fd9\u6837\u7684\u610f\u4e49\u4e5f\u5341\u5206\u660e\u786e\u4e86\u5427\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5730\u56fe\u90fd**\u5fc5\u987b\u505a\u51fa\u9009\u62e9**\uff0c\u9009\u62e9$y$\u5bf9\u5e94\u7684\u70b9\u7684\u53cd\u70b9\u5c31\u4f7f\u5f97$u$\u6ca1\u6709\u5176\u4ed6\u9009\u62e9\u4e86\u3002\n\n\u7136\u540e\u5c31\u662f\u7528**Tarjan**\u8dd1**SCC**\u7684\u8fc7\u7a0b\u4e86\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\u503c\u5f97\u4e00\u63d0\u7684\u662fTarjan\u7684\u6807\u53f7\u987a\u5e8f\u662f\u6309\u7167**\u62d3\u6251\u5e8f\u7684\u9006\u5e8f**\uff08\u56e0\u4e3a\u662fDFS\uff09\u8dd1\u51fa\u6765\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528\u6807\u53f7\u6765\u8f93\u51fa\u65b9\u6848\u3002\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u662f\u8003\u8651\u4e07\u6076\u7684$x$\u5730\u56fe\u4e86\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u5e76\u6ca1\u6709\u4ec0\u4e48\u597d\u7684\u5efa\u56fe\u65b9\u6cd5\uff0c\u7136\u540e\u7ffb\u5230\u4e0b\u9762\u4e00\u770b\u6570\u636e\u8303\u56f4**$d\\le8$**\n\n\u7136\u540e\u4e00\u79cd\u7279\u522bnaive\u7684\u60f3\u6cd5\u5c31\u662f$3^d$\u679a\u4e3e\u6bcf\u4e2a$x$\u5730\u56fe\u662f\u4ec0\u4e48\u7c7b\u578b\u3002\u7136\u540e\u518d\u4e58\u4e0aTarjan\u7684\u590d\u6742\u5ea6\u76f4\u63a5\u7206\u70b8\u3002\n\n\u6211\u4eec\u60f3\u4e00\u4e0b\u6211\u4eec\u679a\u4e3e\u7684\u672c\u8d28\uff1a\n\n- \u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a$x$\u5730\u56fe\u53d6$a$\u5373\u610f\u5473\u8fd9\u53ea\u80fd\u7528\u8f66$B,C$\n- \u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a$x$\u5730\u56fe\u53d6$b$\u5373\u610f\u5473\u8fd9\u53ea\u80fd\u7528\u8f66$A,C$\n- \u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a$x$\u5730\u56fe\u53d6$c$\u5373\u610f\u5473\u8fd9\u53ea\u80fd\u7528\u8f66$A,B$\n\n\u7136\u540e\u6211\u4eec\u60ca\u5947\u5730\u53d1\u73b0\u7b2c\u4e09\u79cd\u60c5\u51b5\u5df2\u7ecf\u88ab\u524d\u4e24\u79cd\u60c5\u51b5\u5305\u542b\u6389\u4e86\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u53d8\u4e3a$2^d(n+m)$\n\n\u5982\u679c\u5bf9\u4e8e\u7206\u641c\u4f1a\u88ab\u65e0\u89e3\u7684\u6570\u636e\u5361\u6ee1\u7684\u540c\u5fd7\u4eec\u53ef\u4ee5\u76f4\u63a5**\u968f\u673a**\u8dd1\uff0c\u5b9e\u6d4b\u8fd9\u6837\u4e5f\u53ef\u4ee5\u8fc7\u3002\n\n\u4e0d\u8fc7\u5b9e\u8df5\u7684\u65f6\u5019**\u7ec6\u8282\u5de8\u591a**\uff0c\u8fd8\u662f\u633a\u70e6\u4eba\u7684\u3002\n\nCODE\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstdlib>\n#include<cstring>\n#define RI register int\n#define Ms(f,x) memset(f,x,sizeof(f))\nusing namespace std;\nconst int N=50005;\nstruct ques\n{\n    int x,y; char p1,p2;\n}q[N<<1]; int n,m,d,tot,c[N],ukn[10],pt; char ch;\ninline int T(char ch)\n{\n    if (ch>='a'&&ch<='c') return ch-'a'+1;\n    else return ch-'A'+1;\n}\ninline int Id(int x,int y)\n{\n    switch (x)\n    {\n        case 1:return y!=3?1:0;break;\n        case 2:return y!=3?1:0;break;\n        case 3:return y!=2?1:0;break;\n    }\n}\ninline char C(int x,int y)\n{\n    switch (x)\n    {\n        case 1:return y!=2?'B':'C';break;\n        case 2:return y!=2?'A':'C';break;\n        case 3:return y!=2?'A':'B';break;\n    }\n}\nclass FileInputOutput\n{\n    private:\n        #define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,S,stdin),A==B)?EOF:*A++)\n        #define S 1<<21\n        char Fin[S],Fout[S],*A,*B; int Ftop;\n    public:\n        FileInputOutput() { Ftop=0; A=B=Fin; }\n        inline void gc(char &ch)\n        {\n            while (!isalpha(ch=tc()));\n        }\n        inline void pc(char ch) \n        { \n            Ftop<S?Fout[Ftop++]=ch:(fwrite(Fout,1,S,stdout),Fout[(Ftop=0)++]=ch);\n        }\n        inline void read(int &x)\n        {\n            x=0; char ch; while (!isdigit(ch=tc()));\n            while (x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));\n        }\n        inline void Fend(void)\n        {\n            fwrite(Fout,1,Ftop,stdout);\n        }\n        #undef S\n        #undef tc\n}F;\nclass Two_SAT_Solver\n{\n    private:\n        #define add(x,y) e[++cnt]=(edge){y,head[x]},head[x]=cnt\n        struct edge\n        {\n            int to,next;\n        }e[N<<2]; int head[N<<1],cnt,dfn[N<<1],low[N<<1],scc,col[N<<1],stack[N<<1],top,tot; bool vis[N];\n        inline int min(int a,int b)\n        {\n        \treturn a<b?a:b;\n        }\n        #define to e[i].to\n        inline void Tarjan(int now)\n        {\n        \tdfn[now]=low[now]=++tot; stack[++top]=now; vis[now]=1;\n        \tfor (RI i=head[now];i;i=e[i].next)\n        \tif (!dfn[to]) Tarjan(to),low[now]=min(low[now],low[to]);\n        \telse if (vis[to]) low[now]=min(low[now],dfn[to]);\n        \tif (low[now]==dfn[now])\n        \t{\n        \t\tcol[now]=++scc; vis[now]=0; while (stack[top]!=now)\n        \t\tcol[stack[top]]=scc,vis[stack[top--]]=0; --top;\n        \t}\n        }\n        #undef to\n    public:\n        inline void build(void)\n        {\n            for (RI i=1;i<=m;++i)\n            {\n                int x=q[i].x,y=q[i].y,p1=T(q[i].p1),p2=T(q[i].p2);\n                if (c[x]==p1) continue; int numx=x<<1,numy=y<<1;\n                if (c[y]==p2) add(numx-Id(c[x],p1),numx-(Id(c[x],p1)^1)); else \n                add(numx-Id(c[x],p1),numy-Id(c[y],p2)),add(numy-(Id(c[y],p2)^1),numx-(Id(c[x],p1)^1));\n            }\n        }\n        inline void check(void)\n        {\n            RI i; int lim=n<<1; for (i=1;i<=lim;++i) if (!dfn[i]) Tarjan(i);\n            for (i=1;i<=n;++i) if (col[(i<<1)-1]==col[i<<1]) return;\n            for (i=1;i<=n;++i) if (col[(i<<1)-1]<col[i<<1]) F.pc(C(c[i],1)); else F.pc(C(c[i],2));\n            F.Fend(); exit(0);\n        }\n        inline void clear(void)\n        {\n            cnt=tot=scc=0; Ms(head,0); Ms(dfn,0);\n        }\n}S;\nint main()\n{\n    //freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n    RI i,j; for (F.read(n),F.read(d),i=1;i<=n;++i) \n    {\n        F.gc(ch); if (ch!='x') c[i]=T(ch); else ukn[++pt]=i;\n    }\n    for (F.read(m),i=1;i<=m;++i) F.read(q[i].x),F.gc(q[i].p1),F.read(q[i].y),F.gc(q[i].p2);\n    for (tot=(1<<d)-1,i=0;i<=tot;++i)\n    {\n        for (j=1;j<=d;++j) c[ukn[j]]=((i>>j-1)&1)+1;\n        S.build(); S.check(); S.clear();\n    }\n    return F.pc('-'),F.pc('1'),F.Fend(),0;\n}\n```",
        "postTime": 1548423168,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3825 \u3010[NOI2017]\u6e38\u620f\u3011"
    },
    {
        "content": "2-sat\u95ee\u9898\u89e3\u6cd5\uff1a\n\n\u4e3a\u6bcf\u4e2a\u70b9\u5efa\u7acbtrue\u3001false\u4e24\u4e2a\u8282\u70b9\uff0c\u65b9\u4fbf\u8d77\u89c1\u79f0\u4e3a\u4e92\u65a5\u8282\u70b9\u3002\u6839\u636e\u7ea6\u675f\u6761\u4ef6\u8fde\u4ee3\u8868\u63a8\u5bfc\u5173\u7cfb\u7684\u6709\u5411\u8fb9\u3002\n\ntarjan\u7f29\u70b9\uff0c\u82e5\u6709\u4e00\u5bf9\u4e92\u65a5\u8282\u70b9\u5728\u540c\u4e00\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u5219\u65e0\u89e3\n\n\u5c06\u5f97\u5230\u7684\u68ee\u6797\u4e2d\u7684\u6bcf\u6761\u8fb9\u53cd\u5411\uff0c\u6309\u7167dfs\u5e8f\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a\n\n    \u82e5\u5f53\u524d\u8282\u70b9\u672a\u88ab\u67d3\u8272\uff0c\u67d3\u6210\u7ea2\u8272\uff0c\u7136\u540e\u5c06\u6240\u6709\u4e92\u65a5\u70b9\u6240\u5728\u5b50\u6811\u67d3\u6210\u84dd\u8272\u3002\n\n    \u5426\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002\n\n\u6700\u7ec8\u6240\u6709\u7ea2\u8272\u8282\u70b9\u6784\u6210\u89e3\u96c6\u3002\n\n**\u672c\u9898\u9700\u8981\u5148\u679a\u4e3e\u2018x\u2019\u8282\u70b9\uff0c\u6ce8\u610f\u5230\u6700\u591a\u53ea\u67098\u4e2a\uff0c\u5148\u5047\u5b9a\u4e3a\u2018a\u2019\uff0c\u518d\u5047\u5b9a\u4e3a\u2018b\u2019**\n\nbtw\uff1a3-sat\u95ee\u9898\u662fNPC\u95ee\u9898",
        "postTime": 1530521252,
        "uid": 31258,
        "name": "Jiangkp",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3825 \u3010[NOI2017]\u6e38\u620f\u3011"
    },
    {
        "content": "\u53ef\u4ee5\u53d1\u73b0\uff0c\u9664\u4e86x\u5730\u56fe\u4e4b\u5916\uff0c\u5176\u4f59\u7684\u5730\u56fe\u53ea\u9002\u5408\u4e24\u79cd\u8d5b\u8f66\u3002\u800c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5148\u5047\u8bbe\u6240\u6709\u7684\u5730\u56fe\u90fd\u9002\u5408\u4e14\u53ea\u9002\u5408\u4e24\u79cd\u8d5b\u8f66\uff0c\u8fd9\u6837\u5c31\u662f2\u2212SAT\u88f8\u9898\u4e86\u3002 \n\n\u5bf9\u4e8e\u6bcf\u573a\u6e38\u620f\u7528\u4e24\u4e2a\u70b9i\u548ci\u2032\uff0c\u5206\u522b\u8868\u793a\u7b2ci\u573a\u6e38\u620f\u4f7f\u7528\u8be5\u5730\u56fe\u9002\u5408\u7684\u7b2c\u4e00\u79cd\u8d5b\u8f66\u548c\u7b2c\u4e8c\u79cd\u8d5b\u8f66\uff08\u4e3e\u4f8b\uff1a\u5982\u679c\u7b2ci\u573a\u6e38\u620f\u7684\u5730\u56fe\u4e0d\u9002\u5408A\u8d5b\u8f66\uff0c\u90a3\u4e48\u70b9i\u8868\u793a\u7b2ci\u573a\u6e38\u620f\u4f7f\u7528B\u8d5b\u8f66\uff0c\u70b9i\u2032\u8868\u793a\u7b2ci\u573a\u6e38\u620f\u4f7f\u7528C\u8d5b\u8f66\uff09\u3002 \n\n\u5bf9\u4e8e\u6bcf\u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u8bbeu\u4e3a\u8868\u793a\u300c\u7b2ci\u573a\u6e38\u620f\u4f7f\u7528\u578b\u53f7\u4e3ahi\u7684\u8d5b\u8f66\u300d\u7684\u70b9\uff08\u5728\u7b2ci\u573a\u6e38\u620f\u7684\u5730\u56fe\u9002\u5408\u578b\u53f7\u4e3ahi\u7684\u8d5b\u8f66\u7684\u60c5\u51b5\u4e0b\uff09\uff0cv\u4e3a\u8868\u793a\u300c\u7b2cj\u573a\u6e38\u620f\u4f7f\u7528\u578b\u53f7\u4e3ahj\u7684\u8d5b\u8f66\u300d\u7684\u70b9\uff08\u5728\u7b2cj\u573a\u6e38\u620f\u7684\u5730\u56fe\u9002\u5408\u578b\u53f7\u4e3ahj\u7684\u8d5b\u8f66\u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u7b2ci\u573a\u6e38\u620f\u7684\u5730\u56fe\u4e0d\u9002\u5408\u578b\u53f7\u4e3ahi\u7684\u8d5b\u8f66\uff0c\u90a3\u4e48\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\u3002 \n\n\u5982\u679c\u7b2ci\u573a\u6e38\u620f\u7684\u5730\u56fe\u9002\u5408\u578b\u53f7\u4e3ahi\u7684\u8d5b\u8f66\uff0c\u4f46\u7b2cj\u573a\u6e38\u620f\u7684\u5730\u56fe\u4e0d\u9002\u5408\u578b\u53f7\u4e3ahj\u7684\u8d5b\u8f66\uff0c\u90a3\u4e48\u5efa\u8fb9u\u2212>u\u2032\uff0c\u8868\u793a\u5982\u679c\u7b2ci\u573a\u6e38\u620f\u4f7f\u7528\u4e86\u578b\u53f7\u4e3ahi\u7684\u8d5b\u8f66\u5219\u4e00\u5b9a\u65e0\u89e3\u3002 \n\n\u5982\u679c\u7b2ci\u573a\u6e38\u620f\u7684\u5730\u56fe\u9002\u5408\u578b\u53f7\u4e3ahi\u7684\u8d5b\u8f66\uff0c\u7b2cj\u573a\u6e38\u620f\u7684\u5730\u56fe\u9002\u5408\u578b\u53f7\u4e3ahj\u7684\u8d5b\u8f66\uff0c\u90a3\u4e48\u5efa\u8fb9u\u2212>v\uff0c\u8868\u793a\u5982\u679c\u7b2ci\u573a\u6e38\u620f\u4f7f\u7528\u4e86\u578b\u53f7\u4e3ahi\u7684\u8d5b\u8f66\u5219\u7b2cj\u573a\u6e38\u620f\u5fc5\u987b\u4f7f\u7528\u578b\u53f7\u4e3ahj\u7684\u8d5b\u8f66\uff0c\u518d\u5efa\u8fb9v\u2032\u2212>u\u2032\uff0c\u8868\u793a\u5982\u679c\u7b2cj\u573a\u6e38\u620f\u4e0d\u4f7f\u7528\u578b\u53f7\u4e3ahj\u7684\u8d5b\u8f66\u5219\u7b2ci\u573a\u6e38\u620f\u4e0d\u5f97\u4f7f\u7528\u578b\u53f7\u4e3ahi\u7684\u8d5b\u8f66\uff08\u9006\u5426\u547d\u9898\u5bf9\u79f0\uff09\u3002\n\n\u6240\u6709\u8fb9\u90fd\u5efa\u5b8c\u4e4b\u540e\u8dd1\u4e00\u904dTarjan\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9\u3002\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2ai\uff0c\u5982\u679ci\u548ci\u2032\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u9762\uff0c\u90a3\u4e48\u6b64\u65f6\u65e0\u89e3\u3002 \n\n\u5426\u5219\u8f93\u51fa\u65b9\u6848\u30022\u2212SAT\u8f93\u51fa\u65b9\u6848\u7684\u65b9\u6cd5\u4e3a\uff1a\u5148\u628a\u7f29\u70b9\u4e4b\u540e\u7684\u65b0\u56fe\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u7136\u540e\u5224\u65ad\u6bcf\u4e2a\u70b9i\uff0c\u5982\u679ci\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u62d3\u6251\u5e8f\u5728i\u2032\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u62d3\u6251\u5e8f\u4e4b\u540e\uff0c\u90a3\u4e48\u7b2ci\u573a\u6e38\u620f\u4f7f\u7528\u8be5\u5730\u56fe\u9002\u5408\u7684\u7b2c\u4e00\u79cd\u8d5b\u8f66\uff0c\u5426\u5219\u4f7f\u7528\u7b2c\u4e8c\u79cd\u8d5b\u8f66\u3002\u4f46\u662f\u7531\u4e8eTarjan\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u662f\u6309\u62d3\u6251\u6392\u5e8f\u7684\u9006\u5e8f\u7ed9\u51fa\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7\u5224\u65ad\u5373\u53ef\u3002\u5373\u5982\u679cbel[]\u4e3a\u6bcf\u4e2a\u70b9\u7684\u6240\u5728\u5f3a\u8fde\u901a\u5206\u91cf\u7f16\u53f7\uff0c\u90a3\u4e48\u5224\u65ad\u4e3a\uff1a\u5982\u679cbel[i]<bel[i\u2032]\uff0c\u90a3\u4e48\u4f7f\u7528\u8be5\u5730\u56fe\u9002\u5408\u7684\u7b2c\u4e00\u79cd\u8d5b\u8f66\uff0c\u5426\u5219\u4f7f\u7528\u7b2c\u4e8c\u79cd\u8d5b\u8f66\u3002 \n\n\u73b0\u5728\u8003\u8651x\u5730\u56fe\uff0c\u8003\u8651\u5230\u53ea\u67098\u5f20x\u5730\u56fe\uff0c\u5982\u679c\u5047\u8bbe\u5b83\u4e5f\u53ea\u9002\u5408\u4e24\u79cd\u8d5b\u8f66\uff0c\u90a3\u4e48\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2ax\u5730\u56fe\u4e0d\u9002\u5408\u8d5b\u8f66A\u6216\u4e0d\u9002\u5408\u8d5b\u8f66B\uff08\u56e0\u4e3a\u4e0d\u9002\u5408\u8d5b\u8f66A\u5c31\u662f\u9002\u5408\u8d5b\u8f66BC\uff0c\u4e0d\u9002\u5408\u8d5b\u8f66B\u5c31\u662f\u9002\u5408\u8d5b\u8f66AC\uff0c\u8fd9\u6837\u5c31\u5305\u542b\u4e86ABC\u4e09\u79cd\u8d5b\u8f66\uff09\uff0c\u8fd9\u6837\u6bcf\u79cd\u5730\u56fe\u5c31\u90fd\u53ea\u9002\u5408\u4e24\u79cd\u8d5b\u8f66\u4e86\u3002\u5224\u65ad\u65f6\uff0c\u5982\u679c\u5df2\u7ecf\u679a\u4e3e\u904d\u4e86\u6240\u6709\u76842d\u79cd\u72b6\u6001\u90fd\u662f\u65e0\u89e3\uff0c\u5219\u539f\u95ee\u9898\u65e0\u89e3\uff0c\u5426\u5219\u8f93\u51fa\u4efb\u610f\u4e00\u79cd\u65b9\u6848\u3002 \n\u590d\u6742\u5ea6O((n+m)\u22172d)\u3002 \n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\ninline char get() {\n    char c; while ((c = getchar()) != 'A' && c != 'B' && c != 'C');\n    return c;\n}\nconst int N = 2e5 + 5;\nint n, d, m, a1[N], b1[N], ecnt, nxt[N], adj[N], go[N], dfn[N], low[N],\ntimes, num, bel[N], top, stk[N], cyx[N];\nchar s[N], a2[N], b2[N], orz[N];\nbool ins[N], flag;\nvoid add_edge(int u, int v) {\n    nxt[++ecnt] = adj[u]; adj[u] = ecnt; go[ecnt] = v;\n}\nint neg(int x) {return x > n ? x - n : x + n;}\nint tran(int x, char c) {\n    if (s[x] == 'a') return c == 'B' ? x : x + n;\n    if (s[x] == 'b' || s[x] == 'c') return c == 'A' ? x : x + n;\n    if (c == 'C') return x + n; return x;\n}\nvoid Tarjan(int u) {\n    dfn[u] = low[u] = ++times; ins[stk[++top] = u] = 1;\n    for (int e = adj[u], v; e; e = nxt[e])\n        if (!dfn[v = go[e]]) {\n            Tarjan(v);\n            low[u] = min(low[u], low[v]);\n        }\n        else if (ins[v]) low[u] = min(low[u], dfn[v]);\n    if (dfn[u] == low[u]) {\n        int v; bel[u] = ++num; ins[u] = 0;\n        while (v = stk[top--], v != u) bel[v] = num, ins[v] = 0;\n    }\n}\nbool solve() {\n    int i; ecnt = times = num = 0;\n    for (i = 1; i <= (n << 1); i++) bel[i] = adj[i] = dfn[i] = 0;\n    for (i = 1; i <= m; i++) if (s[a1[i]] != 'x' && s[b1[i]] != 'x') {\n        if (a2[i] == s[a1[i]] - 32) continue;\n        int u = tran(a1[i], a2[i]), v;\n        if (b2[i] == s[b1[i]] - 32) {add_edge(u, neg(u)); continue;}\n        v = tran(b1[i], b2[i]); add_edge(u, v);\n        add_edge(neg(v), neg(u));\n    }\n    else {\n        char o = s[a1[i]], p = s[b1[i]];\n        int u, v, x = cyx[a1[i]], y = cyx[b1[i]];\n        if (o == 'x' && p == 'x') {\n            if (a2[i] == orz[x]) continue;\n            u = tran(a1[i], a2[i]), v;\n            if (b2[i] == orz[y]) {add_edge(u, neg(u)); continue;}\n            v = tran(b1[i], b2[i]); add_edge(u, v);\n            add_edge(neg(v), neg(u));\n        }\n        else if (o == 'x' && p != 'x') {\n            if (a2[i] == orz[x]) continue;\n            u = tran(a1[i], a2[i]), v;\n            if (b2[i] == s[b1[i]] - 32) {add_edge(u, neg(u)); continue;}\n            v = tran(b1[i], b2[i]); add_edge(u, v);\n            add_edge(neg(v), neg(u));\n        }\n        else {\n            if (a2[i] == s[a1[i]] - 32) continue;\n            u = tran(a1[i], a2[i]), v;\n            if (b2[i] == orz[y]) {add_edge(u, neg(u)); continue;}\n            v = tran(b1[i], b2[i]); add_edge(u, v);\n            add_edge(neg(v), neg(u));\n        }\n    }\n    for (i = 1; i <= (n << 1); i++) if (!dfn[i]) Tarjan(i);\n    for (i = 1; i <= n; i++) if (bel[i] == bel[i + n]) return 0;\n    for (i = 1; i <= n; i++) {\n        if (bel[i] < bel[i + n]) {\n            if (s[i] == 'a') putchar('B');\n            else if (s[i] == 'b' || s[i] == 'C') putchar('A');\n            else if (orz[cyx[i]] == 'A') putchar('B');\n            else putchar('A');\n        }\n        else {\n            if (s[i] == 'a' || s[i] == 'b') putchar('C');\n            else if (s[i] == 'c') putchar('B');\n            else if (orz[cyx[i]] == 'A') putchar('C');\n            else putchar('B');\n        }\n    }\n    return 1;\n}\nvoid dfs(int dep) {\n    if (dep > d) {\n        if (!flag) flag = solve();\n        if (flag) exit(0);\n        return;\n    }\n    orz[dep] = 'A'; dfs(dep + 1);\n    orz[dep] = 'B'; dfs(dep + 1);\n}\nint main() {\n    int i; n = read(); read();\n    scanf(\"%s\", s + 1); m = read();\n    for (i = 1; i <= n; i++) if (s[i] == 'x') cyx[i] = ++d;\n    for (i = 1; i <= m; i++) a1[i] = read(), a2[i] = get(),\n        b1[i] = read(), b2[i] = get(); dfs(1);\n    if (!flag) puts(\"-1\");\n    return 0;\n}\n```",
        "postTime": 1530146000,
        "uid": 98954,
        "name": "\u4e0d\u5b58\u5728\u4e4b\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3825 \u3010[NOI2017]\u6e38\u620f\u3011"
    }
]