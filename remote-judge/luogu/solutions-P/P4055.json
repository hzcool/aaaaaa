[
    {
        "content": "### \u535a\u5f08\u8bba\n\n\u8003\u8651\u6ca1\u6709\u969c\u788d\u7684\u60c5\u51b5\u548c\u56fa\u5b9a\u8d77\u70b9\u7684\u60c5\u51b5\n\n[P4136 \u8c01\u80fd\u8d62\u5462\uff1f](https://www.luogu.com.cn/problem/P4136)\n\n\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7ecf\u5178\u64cd\u4f5c**\u9ed1\u767d\u67d3\u8272**\n\n\u56e0\u4e3a\u6bcf\u4e00\u6b21\u8d70\u90fd\u662f\u4ece\u9ed1\u5230\u767d\u6216\u8005\u4ece\u767d\u5230\u9ed1\n\n\u7ee7\u7eed\u9ed1\u767d\u67d3\u8272\u7684\u7ecf\u5178\u64cd\u4f5c**\u5efa\u7acb\u4e8c\u5206\u56fe**\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u9664\u53bb\u969c\u788d\uff0c\u5b83\u80fd\u8d70\u5230\u7684\u70b9\u90fd\u8fde\u4e00\u6761\u8fb9\n\n\u6211\u4eec\u8003\u8651\u4e8c\u5206\u56fe\u662f\u5426\u662f\u5b8c\u7f8e\u5339\u914d\u7684\u4e8c\u5206\u56fe\n\n\u5373\u6240\u6709\u70b9\u90fd\u5728\u6700\u5927\u5339\u914d\u7684\u65b9\u6848\u4e2d\n\n\u90a3\u4e48\u6b64\u65f6\u540e\u8005\u5fc5\u80dc\n\n\u56e0\u4e3a\u5b8c\u7f8e\u5339\u914d\u60c5\u51b5\u4e0b\uff0c\u5148\u8005\u65e0\u8bba\u9009\u54ea\u4e00\u4e2a\uff0c\u540e\u8005\u9009\u5148\u8005\u5bf9\u5e94\u7684\u90a3\u4e2a\u5339\u914d\u70b9\u5373\u53ef\n\n\u800c\u9009\u5230\u6700\u540e\u5148\u8005\u4e00\u5b9a\u9009\u5b8c\u6216\u88ab\u56f0\u6b7b\n\n\u82e5\u4e0d\u662f\u5b8c\u7f8e\u5339\u914d\uff0c\u5148\u8005\u5e94\u9009\u975e\u4e8c\u5206\u56fe\u5fc5\u987b\u70b9\u51fa\u53d1\uff0c\u5148\u8005\u5fc5\u80dc\n\n**\u975e\u4e8c\u5206\u56fe\u5fc5\u987b\u70b9\u5373\u67d0\u4e00\u4e2a\u6700\u5927\u5339\u914d\u65b9\u6848\u4e0b\u8be5\u70b9\u4e0d\u88ab\u9009\u4e2d**\n\n\u90a3\u4e48\u5728\u90a3\u4e2a\u5339\u914d\u65b9\u6848\u4e0b\uff0c\u6211\u4eec\u4e0b\u4e00\u6b65\u4e00\u5b9a\u4f1a\u8fdb\u5165\u6700\u5927\u5339\u914d\u65b9\u6848\u4e2d\u7684\u70b9\n\n\u7531\u4e8e\u5076\u6570\u6761\u8fb9\u7684\u8def\u5f84\u53ef\u4ee5\u4ee5\u975e\u6700\u5927\u5339\u914d\u70b9\u51fa\u53d1\u548c\u7ed3\u5c3e\n\n\u6240\u4ee5\u5728\u4e0b\u4e00\u6b65\u53ef\u80fd\u8fdb\u5165\u53e6\u4e00\u4e2a\u975e\u4e8c\u5206\u56fe\u5fc5\u987b\u70b9\uff0c\u8fd9\u6837\u540c\u6837\u662f\u5148\u8005\u5fc5\u80dc\n\n\u82e5\u9009\u6700\u5927\u5339\u914d\u65b9\u6848\u4e2d\u7684\u70b9\uff0c\u4e0b\u4e00\u6b65\u540e\u8005\u53ea\u80fd\u9009\u6700\u5927\u5339\u914d\u65b9\u6848\u4e2d\u7684\u70b9\n\n\u56e0\u4e3a\u5947\u6570\u6761\u8fb9\u7684\u8def\u5f84\u4e24\u7aef\u90fd\u662f\u975e\u6700\u5927\u5339\u914d\u65b9\u6848\u5185\u70b9\u662f\u4e0d\u548c\u6cd5\u7684\n\n\u8fd9\u6837\u5c31\u76f8\u5f53\u4e8e\u8ba9\u540e\u624b\u53d8\u6210\u4e86\u5148\u624b\n\n\u90a3\u4e48\u9898\u76ee\u8981\u6c42\u7684\u6240\u6709\u53ef\u884c\u7684\u70b9\u5c31\u662f\u6211\u4eec\u8981\u6c42\u4e8c\u5206\u56fe\u7684\u6240\u6709\u975e\u4e8c\u5206\u56fe\u5fc5\u987b\u70b9\n\n\u5177\u4f53\u6c42\u6cd5\u662f\u968f\u4fbf\u8dd1\u4e00\u4e2a\u6700\u5927\u5339\u914d\u65b9\u6848\n\n\u7136\u540e\u5bf9\u4e8e\u4e0d\u5728\u65b9\u6848\u91cc\u7684\u70b9\u90fd\u901a\u8fc7\u65b9\u6848\u4e2d\u7684\u8fb9\u8d70\u770b\u80fd\u4e0d\u80fd\u56de\u5230\u81ea\u5df1\u8fd9\u4e00\u8fb9\n\n\u56de\u5230\u81ea\u5df1\u8fb9\u7684\u54ea\u4e9b\u70b9\u90fd\u662f\u975e\u4e8c\u5206\u56fe\u5fc5\u987b\u70b9\n\n\u56e0\u4e3a\u539f\u672c\u7684\u5339\u914d\u8fb9\u80fd\u6362\u6210\u4e00\u6761\u975e\u5339\u914d\u8fb9\n\n\u53ef\u4ee5\u770b\u4e0bdfs2\n\n~~\u81ea\u5df1\u4e71yy\u7684\u5199\u6cd5~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=105,maxm=105;\nstruct Edge{\n\tint to;\n\tint nxt;\n}e[8*maxn*maxm];\nint cnt;\nint head[maxn*maxm];\nint dx[4]={-1,0,0,1};\nint dy[4]={0,-1,1,0};\nint ban[maxn][maxm];\nint tim;\nint tp;\nint s[maxn*maxm];\nint p[maxn*maxm];\nint vis[maxn*maxm];\nbool flag[maxn*maxm];\nbool color[maxn*maxm];\nint read(){\n\tint x=0,y=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n\treturn x*y;\n}\nvoid add(int u,int v){\n\te[cnt].to=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt++;\n\treturn ;\n}\nint dfs1(int x){\n\tfor(int i=head[x];i!=-1;i=e[i].nxt){\n\t\tint tmp=e[i].to;\n\t\tif(vis[tmp]==tim)continue;\n\t\tvis[tmp]=tim;\n\t\tif(p[tmp]==0||dfs1(p[tmp])){\n\t\t\tp[tmp]=x;\n\t\t\tp[x]=tmp;\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\nvoid dfs2(int x){\n\tvis[x]=tim;\n\tfor(int i=head[x];i!=-1;i=e[i].nxt){\n\t\tint tmp=e[i].to;\n\t\tif(p[tmp]==0||p[tmp]==x||vis[p[tmp]]==tim)continue;\n\t\ts[++tp]=p[tmp];\n\t\tdfs2(p[tmp]);\n\t}\n\treturn ;\n}\nint main(){\n\tint n,m,sum=0;\n\tn=read();m=read();\n\tmemset(head,-1,sizeof(head));\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tchar c;\n\t\t\tcin>>c;\n\t\t\tif(c=='#')ban[i][j]=1;\n\t\t\telse sum++;\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tif((i+j)&1)continue;\n\t\t\tif(ban[i][j])continue;\n\t\t\tint u=(i-1)*m+j;\n\t\t\tfor(int k=0;k<4;k++){\n\t\t\t\tint x=i+dx[k],y=j+dy[k];\n\t\t\t\tif(x<1||x>n||y<1||y>m||ban[x][y])continue;\n\t\t\t\tint v=(x-1)*m+y;\n\t\t\t\tadd(u,v);\n\t\t\t\tadd(v,u);\n\t\t\t}\n\t\t}\n\t}\n\tint ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tif((i+j)&1)continue;\n\t\t\tint u=(i-1)*m+j;\n\t\t\tif(p[u])continue;\n\t\t\ttim++;\n\t\t\tans+=dfs1(u);\n\t\t}\n\t}\n\tif(sum%2==0&&ans==sum/2){printf(\"LOSE\");return 0;}\n\tprintf(\"WIN\\n\");\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tint u=(i-1)*m+j;\n\t\t\tif(p[u])flag[u]=1;\n\t\t}\n\t}\n\ttim++;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tint u=(i-1)*m+j;\n\t\t\tif(flag[u]||ban[i][j])continue;\n\t\t\ts[++tp]=u;\n\t\t\tdfs2(u);\n\t\t}\n\t}\n\tsort(s+1,s+tp+1);\n\tfor(int i=1;i<=tp;i++){\n\t\tint x=s[i]/m+1,y=s[i]%m;\n\t\tif(y==0){x--;y=m;}\n\t\tprintf(\"%d %d\\n\",x,y);\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1585239308,
        "uid": 98527,
        "name": "juju527",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4055 \u3010[JSOI2009]\u6e38\u620f\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n- \u5728\u4e00\u4e2a $n*m$ \u7684\u6709\u969c\u788d\u65b9\u9635\u4e2d\uff0c\u4e24\u4e2a\u4eba\u8f6e\u6d41\u79fb\u52a8\u68cb\u5b50\u8d70\u5230\u76f8\u90bb\u7684\u65b9\u683c\u3002\n\n- \u5148\u624b\u51b3\u5b9a\u68cb\u5b50\u7684\u521d\u59cb\u4f4d\u7f6e\u3002\n\n- \u6700\u540e\u79fb\u52a8\u68cb\u5b50\u7684\u73a9\u5bb6\u83b7\u80dc\u3002\n\n- \u95ee\u5148\u624b\u662f\u5426\u6709\u5fc5\u80dc\u7b56\u7565\uff0c\u5982\u679c\u6709\uff0c\u8f93\u51fa\u6240\u6709\u80fd\u83b7\u80dc\u7684\u68cb\u5b50\u521d\u59cb\u4f4d\u7f6e\u3002\n\n## \u5206\u6790\n\n\u770b\u5230\u8fd9\u79cd\u5411\u76f8\u90bb\u65b9\u683c\u79fb\u52a8\u68cb\u5b50\u7684\u9898\uff0c\u5f88\u5bb9\u6613\u60f3\u5230**\u9ed1\u767d\u67d3\u8272\u5efa\u4e8c\u5206\u56fe**\u3002\n\n\u76f8\u90bb\u7684\u65b9\u683c\u53ea\u8981\u6ca1\u6709\u969c\u788d\uff0c\u5c31\u8fde\u4e00\u6761**\u53cc\u5411\u8fb9**\u3002\n\n\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u8f6c\u6362\u4e3a\u4ece\u5de6\u90e8\u8d70\u5230\u53f3\u90e8\u6216\u4ece\u53f3\u90e8\u8d70\u5230\u5de6\u90e8\u3002\n\n\u90a3\u4e48\uff0c\u5982\u679c**\u8fd9\u4e2a\u4e8c\u5206\u56fe\u662f\u5b8c\u5168\u5339\u914d**\uff0c\u65e0\u8bba\u5148\u624b\u9009\u54ea\u4e2a\u70b9\uff0c\u540e\u624b\u90fd\u4f1a\u9009\u6700\u5927\u5339\u914d\u4e2d\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u7684\u70b9\u3002\n\n\u56e0\u6b64\u8fd9\u65f6**\u540e\u624b**\u6709\u5fc5\u80dc\u7b56\u7565\u3002\n\n**\u5982\u679c\u8fd9\u4e2a\u56fe\u4e0d\u662f\u5b8c\u5168\u5339\u914d**\uff0c\u4e00\u5b9a\u6709\u4e00\u4e2a\u70b9\u5269\u4e0b\u6765\uff0c\u4e5f\u5c31\u662f\u6700\u5927\u5339\u914d\u4e0d\u9700\u8981\u7684\u70b9\u3002\n\n\u5148\u624b\u53ea\u8981\u4e00\u5f00\u59cb\u628a\u68cb\u5b50\u653e\u5728\u8fd9\u4e2a\u70b9\uff0c\u540e\u624b\u65e0\u8bba\u600e\u4e48\u8d70\uff0c\u8d70\u5230\u7684\u70b9\u90fd\u5728\u6700\u5927\u5339\u914d\u5185\u3002\n\n\u4e8e\u662f\u540e\u624b\u5c31\u53d8\u6210\u4e86\u7b2c\u4e00\u79cd\u60c5\u51b5\u7684\u5148\u624b\uff0c\u5148\u624b\u4f7f\u7528\u4e0a\u9762\u540e\u624b\u7684\u7b56\u7565\u3002\n\n\u56e0\u6b64\u8fd9\u65f6**\u5148\u624b**\u6709\u5fc5\u80dc\u7b56\u7565\u3002\n\n\u56e0\u4e3a\u6700\u5927\u5339\u914d\u65b9\u6848\u4e0d\u6b62\u4e00\u79cd\uff0c\u6240\u4ee5\u6240\u6709\u6700\u5927\u5339\u914d\u65b9\u6848\u5269\u4e0b\u7684\u70b9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u68cb\u5b50\u7684\u521d\u59cb\u4f4d\u7f6e\u3002\n\n\u4f46\u662f\u679a\u4e3e\u6bcf\u79cd\u65b9\u6848\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u5927\u4e86\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u4efb\u610f\u6c42\u4e00\u79cd\u65b9\u6848\uff0c\u8bbe\u5269\u4e0b\u7684\u70b9\u4e3a $i$\u3002\n\n\u4ece $i$ \u5f00\u59cb\u904d\u5386\u4e8c\u5206\u56fe\uff0c\u5047\u8bbe $i$ \u6709\u4e00\u6761\u8fb9\u4e00\u4e2a**\u5f02\u4fa7\u70b9** $j$\uff0c$j$ \u6709\u4e00\u6761\u5728\u5df2\u6c42\u65b9\u6848\u5185\u7684\u8fb9\u8fde $i$ \u7684**\u540c\u4fa7\u70b9** $k$\uff0c\u90a3\u4e48\u4e00\u5b9a\u53ef\u4ee5\u4e0d\u9009 $j$ \u5230 $k$ \u8fd9\u6761\u8fb9\uff0c\u6539\u9009 $i$ \u5230 $j$ \u7684\u8fb9\u3002\n\n$k$ \u5373\u6539\u9009\u540e\u7684\u65b9\u6848\u5269\u4e0b\u7684\u70b9\u3002\n\n\u6309\u7167\u5230\u73b0\u5728\u4e3a\u6b62\u7684\u601d\u8def\u5199\u5c31\u53ef\u4ee5 AC \u8fd9\u9053\u9898\u3002\n\n\u4f46\u662f\u5f53\u6211\u770b\u5230\u8ba8\u8bba\u533a\u7684[\u8fd9\u4e2a\u5e16\u5b50](https://www.luogu.com.cn/discuss/405533)\u540e\uff0c\u53d1\u73b0\u6211\u6ca1\u6709\u8003\u8651**\u56fe\u4e0d\u8fde\u901a**\u7684\u60c5\u51b5\u3002~~\u7136\u800c\u9020\u6570\u636e\u7684\u4eba\u8c8c\u4f3c\u4e5f\u6ca1\u6709\u8003\u8651\u3002~~\n\n\u5176\u5b9e\u5f88\u597d\u89e3\u51b3\uff0c\u6bcf\u4e2a\u8fde\u901a\u5757\u90fd\u5efa\u4e00\u904d\u56fe\u5c31\u884c\u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u7528\u4e86 $\\text{dfs}$ \u5efa\u56fe\u3002\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\nusing namespace std;\n\nint n,m,tot; //tot\u662f\u8054\u901a\u5757\u7684\u7f16\u53f7 \nint npy[10002]; //\u5339\u914d\u65b9\u6848 \nchar a[102][102];\nint mark[102][102]; //\u6bcf\u4e2a\u70b9\u6240\u5c5e\u7684\u8054\u901a\u5757 \nint cnt,head[10002]; //\u94fe\u5f0f\u524d\u5411\u661f \nint arrx[4]={0,1,0,-1};\nint arry[4]={1,0,-1,0}; //\u65b9\u5411\u6570\u7ec4 \nbool vis[10002],ans[10002],lft[10002]; //lft\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u662f\u5426\u5c5e\u4e8e\u5de6\u90e8 \n\nstruct edge{\n\tint to,nxt;\n}e[40002];\n\nvoid addedge(int A,int B) {\n\te[++cnt].to=B;\n\te[cnt].nxt=head[A];\n\thead[A]=cnt;\n}\n\nint num(int x,int y) {\n\treturn (x-1)*m+y;\n} //\u5750\u6807->\u7f16\u53f7 \n\nvoid build(int x,int y) {\n\tfor(int i=0;i<4;i++) {\n\t\tint xx=x+arrx[i],yy=y+arry[i];\n\t\tif(!xx || !yy || xx>n || yy>m || a[xx][yy]=='#') continue;\n\t\taddedge(num(x,y),num(xx,yy));\n\t\tif(mark[xx][yy]) continue;\n\t\tmark[xx][yy]=tot;\n\t\tbuild(xx,yy);\n\t}\n} //\u6bcf\u4e2a\u8054\u901a\u5757dfs\u5efa\u56fe \n\nbool dfs(int u) {\n\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(!vis[v]) {\n\t\t\tvis[v]=1;\n\t\t\tif(!npy[v] || dfs(npy[v])) {\n\t\t\t\tnpy[v]=u,npy[u]=v;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n} //\u5308\u7259\u5229 \n\nvoid dfs2(int u,int rt) {\n\tif(ans[u]) return ;\n\tans[u]=1;\n\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(npy[v]) dfs2(npy[v],rt);\n\t}\n} //\u627e\u5176\u4ed6\u6700\u5927\u5339\u914d\u65b9\u6848\u4e0d\u9700\u8981\u7684\u70b9 \n\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++) cin>>a[i]+1;\n\tbool anss=0;\n\tfor(int i=1;i<=n;i++) \n\t\tfor(int j=1;j<=m;j++) \n\t\t\tif(!mark[i][j] && a[i][j]=='.') {\n\t\t\t\tcnt=0,tot++;\n\t\t\t\tmemset(head,0,sizeof head);\n\t\t\t\tmemset(e,0,sizeof e);\n\t\t\t\tmemset(npy,0,sizeof npy);\n\t\t\t\tbuild(i,j);\n\t\t\t\tfor(int k=1;k<=n;k++) \n\t\t\t\t\tfor(int l=1;l<=m;l++) {\n\t\t\t\t\t\tif(mark[k][l]!=tot || (k+l)%2==0) continue;\n\t\t\t\t\t\tlft[num(i,j)]=1;\n\t\t\t\t\t\tmemset(vis,0,sizeof vis);\n\t\t\t\t\t\tdfs(num(k,l));\n\t\t\t\t\t}\n\t\t\t\tbool flag=0;\n\t\t\t\tfor(int k=1;k<=n;k++) \n\t\t\t\t\tfor(int l=1;l<=m;l++) \n\t\t\t\t\t\tif(mark[k][l]==tot && !npy[num(k,l)]) flag=1;\n\t\t\t\t//\u5224\u65ad\u662f\u5426\u4e3a\u5b8c\u5168\u5339\u914d \n\t\t\t\tanss|=flag;\n\t\t\t\tif(!flag) continue; \n\t\t\t\tfor(int k=1;k<=n;k++) \n\t\t\t\t\tfor(int l=1;l<=m;l++) \n\t\t\t\t\t\tif(mark[k][l]==tot && !npy[num(k,l)]) dfs2(num(k,l),num(k,l));\n\t\t\t}\n\tif(!anss) {\n\t\tprintf(\"LOSE\\n\");\n\t\treturn 0;\n\t}\n\tprintf(\"WIN\\n\");\n\tfor(int i=1;i<=n;i++) \n\t\tfor(int j=1;j<=m;j++) \n\t\t\tif(ans[num(i,j)]) printf(\"%d %d\\n\",i,j);\n\treturn 0;\n}\n```\n~~\u7801\u98ce\u4e0d\u597d\u770b TwT\u3002~~",
        "postTime": 1644575387,
        "uid": 394991,
        "name": "Sharing666",
        "ccfLevel": 5,
        "title": "P4055 \u9898\u89e3"
    },
    {
        "content": "\u63e1\u6f15\u8fd9\u9898\u7adf\u7136\u6ca1\u4eba\u5199\uff0c\u6cbe\u6cbe\u81ea\u559c\u4e00\u4e0b\n\n\u5bb9\u6613\u60f3\u5230\u628a\u77e9\u9635\u9ed1\u767d\u67d3\u8272\u8fde\u8fb9\uff0c\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u6c42\u4e00\u904d\u6700\u5927\u5339\u914d\n\n\u5bf9\u4e8e\u5148\u624b\u800c\u8a00\uff0c\u82e5\u4e8c\u5206\u56fe\u4e0d\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff0c\u5219\u653e\u5728\u975e\u5339\u914d\u70b9\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\u56e0\u4e3a\u540e\u624b\u7684\u7b2c\u4e00\u6b65\u5fc5\u5b9a\u8d70\u5230\u4e00\u4e2a\u5339\u914d\u70b9\uff0c\u5148\u624b\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u76f4\u6cbf\u7740\u5339\u914d\u8fb9\u8d70\u5373\u53ef\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u5b58\u5728\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u4ea4\u53c9\u51fa\u73b0\u7684\u589e\u5e7f\u8def\uff0c\u5373\u5148\u624b\u603b\u662f\u80fd\u6bd4\u540e\u624b\u591a\u8d70\u4e00\u6b65\uff08\u6839\u636e\u6700\u5927\u5339\u914d\u7684\u5b9a\u4e49\uff09\n\n\u82e5\u4e8c\u5206\u56fe\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff0c\u90a3\u4e48\u5148\u624b\u65e0\u8bba\u5982\u4f55\u653e\u7f6e\u90fd\u4f1a\u8f93\uff0c\u5177\u4f53\u540c\u7406;-P\n\n\u90a3\u4e48\u8dd1\u4e00\u904d\u7f51\u7edc\u6d41\u6c42\u5b8c\u6700\u5927\u5339\u914d\u540edfs\u6c42\u51fa\u975e\u5339\u914d\u70b9\uff0c\u8fd9\u4e9b\u90fd\u662f\u53ef\u884c\u7684\u653e\u7f6e\u65b9\u6848\n\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\uff0c\u6ce8\u610f\u52a0\u5f53\u524d\u5f27\u4f18\u5316\n\n#Code\n```cpp\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n#include <queue>\n#define rep(i,st,ed) for (int i=st;i<=ed;++i)\n#define fill(x,t) memset(x,t,sizeof(x))\nusing std:: min;\nstd:: queue<int> que;\nconst int INF=0x3f3f3f3f;\nconst int L=205;\nconst int N=80005;\nconst int E=640005;\nstruct edge{int x,y,w,next;}e[E];\nint dis[N],rc[L][L],vis[N],bel[N],chs[N];\nint cur[N],ls[N],n,m,edCnt=1;\nint dx[4][2]={{-1,0},{1,0},{0,-1},{0,1}};\nbool flag=false;\nchar str[L];\nvoid addEdge(int x,int y,int w) {\n    e[++edCnt]=(edge){x,y,w,ls[x]}; ls[x]=edCnt;\n    e[++edCnt]=(edge){y,x,0,ls[y]}; ls[y]=edCnt;\n    // printf(\"%d %d %d\\n\", x,y,w);\n}\nint get_pos(int x,int y) {return (x-1)*m+y;}\nint bfs(int st,int ed) {\n    while (!que.empty()) que.pop();\n    que.push(st);\n    rep(i,st,ed) dis[i]=-1; dis[st]=1;\n    while (!que.empty()) {\n        int now=que.front(); que.pop();\n        for (int i=ls[now];i;i=e[i].next) {\n            if (e[i].w>0&&dis[e[i].y]==-1) {\n                dis[e[i].y]=dis[now]+1;\n                if (e[i].y==ed) return 1;\n                que.push(e[i].y);\n            }\n        }\n    }\n    return 0;\n}\nint find(int now,int ed,int mn) {\n    if (now==ed||!mn) return mn;\n    int ret=0;\n    for (int &i=cur[now];i;i=e[i].next) {\n        if (e[i].w>0&&dis[now]+1==dis[e[i].y]) {\n            int d=find(e[i].y,ed,min(mn-ret,e[i].w));\n            ret+=d; e[i].w-=d; e[i^1].w+=d;\n            if (ret==mn) break;\n        }\n    }\n    return ret;\n}\nint dinic(int st,int ed) {\n    int ret=0;\n    while (bfs(st,ed)) {\n        rep(i,st,ed) cur[i]=ls[i];\n        ret+=find(st,ed,INF);\n    }\n    return ret;\n}\nvoid dfs(int now,int lim) {\n    if (vis[now]) return ;\n    vis[now]=1;\n    if (bel[now]==lim) {\n        chs[now]=1;\n        flag=true;\n    }\n    for (int i=ls[now];i;i=e[i].next) {\n        if (e[i].w==lim) dfs(e[i].y,lim);\n    }\n}\nint main(void) {\n    scanf(\"%d%d\",&n,&m);\n    rep(i,1,n) {\n        scanf(\"%s\",str);\n        rep(j,1,m) if (str[j-1]=='#') rc[i][j]=1;\n    }\n    rep(i,1,n) rep(j,1,m) {\n        int now=get_pos(i,j);\n        if (((i^j)&1)&&!rc[i][j]) {\n            bel[now]=1;\n            addEdge(0,now,1);\n            rep(k,0,3) {\n                int p=i+dx[k][0],q=j+dx[k][1];\n                if (p>0&&p<=n&&q>0&&q<=m&&!rc[p][q]) addEdge(now,get_pos(p,q),1);\n            }\n        } else if (!((i^j)&1)&&!rc[i][j]) {\n            addEdge(now,n*m+1,1);\n        }\n    }\n    int mxFlow=dinic(0,n*m+1);\n    dfs(0,1); fill(vis,0);\n    dfs(n*m+1,0);\n    if (flag) {\n        puts(\"WIN\");\n        rep(i,1,n) rep(j,1,m) {\n            if (chs[get_pos(i,j)]) {\n                printf(\"%d %d\\n\", i,j);\n            }\n        }\n    } else puts(\"LOSE\");\n    return 0;\n}\n```",
        "postTime": 1516438794,
        "uid": 18867,
        "name": "jpwang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4055 \u3010[JSOI2009]\u6e38\u620f\u3011"
    },
    {
        "content": "\n### \u9898\u76ee\u63cf\u8ff0\n\n\u5c0fAA\u548c\u5c0fYY\u5f97\u5230\u4e86\u300a\u559c\u7f8a\u7f8a\u548c\u7070\u592a\u72fc\u300b\u7684\u7535\u5f71\u7968\uff0c\u90fd\u5f88\u60f3\u53bb\u89c2\u770b\uff0c\u4f46\u662f\u7535\u5f71\u7968\u53ea\u6709\u4e00\u5f20\uff0c\u4e8e\u662f\u4ed6\u4eec\u7528\u667a\u529b\u6e38\u620f\u51b3\u5b9a\u80dc\u8d1f\uff0c\u8d62\u5f97\u6e38\u620f\u7684\u4eba\u53ef\u4ee5\u83b7\u5f97\u7535\u5f71\u7968\u3002\n\n\u5728N*M\u7684\u8ff7\u5bab\u4e2d\u6709\u4e00\u4e2a\u68cb\u5b50\uff0c\u5c0fAA\u9996\u5148\u4efb\u610f\u9009\u62e9\u68cb\u5b50\u653e\u7f6e\u7684\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u5c0fYY\u548c\u5c0fAA\u8f6e\u6d41\u5c06\u68cb\u5b50\u79fb\u52a8\u5230\u76f8\u90bb\u7684\u683c\u5b50\u91cc\u3002\u6e38\u620f\u7684\u89c4\u5219\u89c4\u5b9a\uff0c\u5728\u4e00\u6b21\u6e38\u620f\u4e2d\uff0c\u540c\u4e00\u4e2a\u683c\u5b50\u4e0d\u80fd\u8fdb\u5165\u4e24\u6b21\uff0c\u4e14\u4e0d\u80fd\u5c06\u68cb\u5b50\u79fb\u52a8\u5230\u67d0\u4e9b\u683c\u5b50\u4e2d\u53bb\u3002\u5f53\u73a9\u5bb6\u65e0\u6cd5\u7ee7\u7eed\u79fb\u52a8\u68cb\u5b50\u65f6\uff0c\u6e38\u620f\u7ed3\u675f\uff0c\u6700\u540e\u4e00\u4e2a\u79fb\u52a8\u68cb\u5b50\u7684\u73a9\u5bb6\u8d62\u5f97\u4e86\u6e38\u620f\u3002\n\n\u4f8b\u5982\u4e0b\u56fe\u6240\u793a\u7684\u8ff7\u5bab\uff0c\u8ff7\u5bab\u4e2d\u201d.\u201d\u8868\u793a\u68cb\u5b50\u53ef\u4ee5\u7ecf\u8fc7\u7684\u683c\u5b50\uff0c\u800c\u201d#\u201d\u8868\u793a\u68cb\u5b50\u4e0d\u53ef\u4ee5\u7ecf\u8fc7\u7684\u683c\u5b50\uff1a\n```\n                             .##\n                             ...\n                             #.# \n```\n1\n2\n3\n4\n\u82e5\u5c0fAA\u5c06\u68cb\u5b50\u653e\u7f6e\u5728(1,1)\uff0c\u5219\u5c0f AA \u5219\u65e0\u8bba\u5982\u4f55\u90fd\u65e0\u6cd5\u8d62\u5f97\u6e38\u620f\u3002 \n\n\u800c\u82e5\u5c0fAA\u5c06\u68cb\u5b50\u653e\u7f6e\u5728(3,2)\u6216(2,3)\uff0c\u5219\u5c0fAA\u80fd\u591f\u8d62\u5f97\u6e38\u620f\u3002\u4f8b\u5982\uff0c\u5c0fAA\u5c06\u68cb\u5b50\u653e\u7f6e\u5728(3,2)\uff0c\u5c0fYY\u53ea\u80fd\u5c06\u5b83\u79fb\u52a8\u5230(2,2)\uff0c\u6b64\u65f6\u5c0fAA\u518d\u5c06\u68cb\u5b50\u79fb\u52a8\u5230(2,3)\uff0c\u5c31\u8d62\u5f97\u4e86\u6e38\u620f\u3002\n\n\u5c0fAA\u548c\u5c0fYY\u90fd\u662f\u7edd\u9876\u806a\u660e\u7684\u5c0f\u670b\u53cb\uff0c\u4e14\u4ece\u4e0d\u5931\u8bef\u3002\u5c0fAA\u5230\u5e95\u80fd\u4e0d\u80fd\u8d62\u5f97\u8fd9\u573a\u6e38\u620f\uff0c\u4ece\u800c\u5f97\u5230\u73cd\u8d35\u7684\u7535\u5f71\u7968\u5462\uff1f \n\n### \u8f93\u5165\u8f93\u51fa\u683c\u5f0f \n\n#### \u8f93\u5165\u683c\u5f0f\uff1a \n\n\u8f93\u5165\u6570\u636e\u9996\u5148\u8f93\u5165\u4e24\u4e2a\u6574\u6570 N,M\uff0c\u8868\u793a\u4e86\u8ff7\u5bab\u7684\u8fb9\u957f\u3002\u63a5\u4e0b\u6765 N \u884c\uff0c\u6bcf\u884c M \u4e2a\u5b57\u7b26\uff0c\u63cf\u8ff0\u4e86\u8ff7\u5bab\u3002 \n\n#### \u8f93\u51fa\u683c\u5f0f\uff1a \n\u82e5\u5c0f AA \u80fd\u591f\u8d62\u5f97\u6e38\u620f\uff0c\u5219\u8f93\u51fa\u4e00\u884c\u201dWIN\u201d\uff0c\u7136\u540e\u8f93\u51fa\u6240\u6709\u53ef\u4ee5\u8d62\u5f97\u6e38\u620f\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u6309\u884c\u4f18\u5148\u987a\u5e8f\u8f93\u51fa\uff0c\u6bcf\u884c\u4e00\u4e2a\u3002\n\n\u5426\u5219\u8f93\u51fa\u4e00\u884c\u201dLOSE\u201d\uff08\u4e0d\u5305\u542b\u5f15\u53f7\uff09\u3002 \n\n### \u8f93\u5165\u8f93\u51fa\u6837\u4f8b \n#### \u8f93\u5165\u6837\u4f8b#1\uff1a \n\n3 3 \n\n.## \n\n\u2026 \n\n#.# \n\n#### \u8f93\u51fa\u6837\u4f8b#1\uff1a \n\nWIN \n\n2 3 \n\n3 2 \n\n#### \u8bf4\u660e \n\n\u5bf930%\u7684\u6570\u636e\uff0c\u67091<=n,m<=5,\u5bf9100%\u7684\u6570\u636e\uff0c\u67091<=n,m<=100.\n\n### \u5206\u6790\n\n\u8fd9\u9053\u9898\u8981\u662f\u6ca1\u6709\u4e0d\u53ef\u5230\u7684\u5730\u65b9\uff0c\u5c31\u548c[\u8fd9\u9053\u9898](https://www.luogu.org/problemnew/show/P4136)\u4e00\u6837\u4e86\uff0c\u7136\u800c\uff0c\u5b83\u6709\u963b\u6321\uff0c\u6240\u4ee5\u81ea\u7136\u60f3\u5230\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u5bf9\u4e8e\u5148\u624b\u800c\u8a00\uff0c\u82e5\u4e8c\u5206\u56fe\u4e0d\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff0c\u5219\u653e\u5728\u975e\u5339\u914d\u70b9\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\u56e0\u4e3a\u540e\u624b\u7684\u7b2c\u4e00\u6b65\u5fc5\u5b9a\u8d70\u5230\u4e00\u4e2a\u5339\u914d\u70b9\uff0c\u5148\u624b\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u76f4\u6cbf\u7740\u5339\u914d\u8fb9\u8d70\u5373\u53ef\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u5b58\u5728\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u4ea4\u53c9\u51fa\u73b0\u7684\u589e\u5e7f\u8def\uff0c\u5373\u5148\u624b\u603b\u662f\u80fd\u6bd4\u540e\u624b\u591a\u8d70\u4e00\u6b65\uff08\u6839\u636e\u6700\u5927\u5339\u914d\u7684\u5b9a\u4e49\uff09\uff0c\u82e5\u4e8c\u5206\u56fe\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff0c\u90a3\u4e48\u5148\u624b\u65e0\u8bba\u5982\u4f55\u653e\u7f6e\u90fd\u4f1a\u8f93\uff0c\u5177\u4f53\u540c\u7406\uff0c\u90a3\u4e48\u5148\u5224\u65ad\u662f\u5426\u662f\u5b8c\u7f8e\u5339\u914d\uff0c\u82e5\u662f\u8fd9\u9053\u9898\u4e5f\u5c31\u5b8c\u4e86\uff0c\u4e0d\u662f\u7684\u8bdd\u627e\u5230\u975e\u5339\u914d\u70b9\u5c31\u884c\u4e86\uff0c\u65f6\u95f4\uff1a4500ms\u3002 \n\n\u4e0a\u4ee3\u7801\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint next[200001],head[200001],now=0,point[200001],match[200001],x[200001],y[200001],mat[200001],dx[5]={0,0,0,1,-1},dy[5]={0,1,-1,0,0};\nbool visit[200001],mark[200001];\nchar ch[200][200];\nvoid add(int x,int y){ \n\tnext[++now]=head[x];\n\thead[x]=now;\n\tpoint[now]=y;\n}\nbool dfs(int k){\n    for(int i=head[k],u;i;i=next[i]){\n    \tif(!visit[u=point[i]]){\n            visit[u]=1;\n            if(dfs(match[u])||match[u]==-1){\n                match[u]=k;\n                mat[k]=u;\n                return true;\n            }\n        }\n\t}\n    return false;\n}\nint main(){\n    int n,m,u=0,v=0,flag=0,fi=0;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++){\n    \tscanf(\"%s\",ch[i]+1);\n\t}\n    for(int i=1;i<=n;i++){\n        fi^=1;\n        for(int j=fi+1;j<=m;j+=2){\n        \tif(ch[i][j]=='.'){\n                x[++u]=i*m+j;\n                for(int k=1;k<=4;k++){\n                    int xx=i+dx[k],yy=j+dy[k];\n                    if(ch[xx][yy]=='.'){\n                    \tadd(i*m+j,xx*m+yy);\n\t\t\t\t\t\tadd(xx*m+yy,i*m+j);\n\t\t\t\t\t}\n                }\n            }\n\t\t}\t\n    }\n    fi=1;\n    for(int i=1;i<=n;i++){\n        fi^=1;\n        for(int j=fi+1;j<=m;j+=2){\n        \tif(ch[i][j]=='.'){\n        \t\ty[++v]=i*m+j;\n\t\t\t}\n\t\t}\n    }\n    memset(match,-1,sizeof(match));\n    for(int i=1;i<=u;i++){\n        memset(visit,0,sizeof(visit));\n        if(!dfs(x[i])){\n        \tflag=1;\n\t\t\tmark[x[i]]=1;\n\t\t}\n    }\n    for(int i=1;i<=v;i++){\n        if(match[y[i]]==-1){\n        \tmark[y[i]]=1;\n\t\t\tflag=1;\n\t\t}else{\n            memset(visit,0,sizeof(visit));\n            visit[y[i]]=1;\n            if(dfs(match[y[i]])){\n            \tmatch[y[i]]=-1;\n\t\t\t\tmark[y[i]]=1;\n\t\t\t\tflag=1;\n\t\t\t}\n        }\n    }\n    for(int i=1;i<=v;i++){\n        memset(visit,0,sizeof(visit));\n        if(!dfs(y[i])){\n        \tflag=1;\n\t\t\tmark[y[i]]=1;\n\t\t}\n    }\n    for(int i=1;i<=u;i++){\n        if(match[x[i]]==-1){\n        \tmark[x[i]]=1;\n\t\t\tflag=1;\n\t\t}else{\n            memset(visit,0,sizeof(visit));\n            visit[x[i]]=1;\n            if(dfs(match[x[i]])){\n            \tmatch[x[i]]=-1;\n\t\t\t\tmark[x[i]]=1;\n\t\t\t\tflag=1;\n\t\t\t}\n        }\n    }\n    if(!flag){\n        printf(\"LOSE\\n\");\n        return 0;\n    }\n    printf(\"WIN\\n\");\n    for(int i=1;i<=n;i++){\n    \tfor(int j=1;j<=m;j++){\n    \t\tif(mark[i*m+j]){\n    \t\t\tprintf(\"%d %d\\n\",i,j);\n\t\t\t}\n\t\t}\n\t}\n}\n```",
        "postTime": 1535723125,
        "uid": 120412,
        "name": "\u8840\u306e\u7948\u308a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4055 \u3010[JSOI2009]\u6e38\u620f\u3011"
    },
    {
        "content": "# P4055 \\[JSOI2009\\]\u6e38\u620f \u9898\u89e3\n\n## \u9898\u610f\n\n\u5728\u4e00\u4e2a\u683c\u70b9\u56fe\u4e0a\uff0c\u4e24\u65b9\u8f6e\u6d41\u79fb\u52a8\u68cb\u5b50\u4e00\u6b65\uff0c\u4e0d\u80fd\u79fb\u5230\u5df2\u8d70\u8fc7\u7684\u4f4d\u7f6e\uff0c\u79fb\u4e0d\u52a8\u8005\u8f93\u3002\u95ee\u5982\u4f55\u8bbe\u5b9a\u68cb\u5b50\u7684\u521d\u59cb\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u540e\u624b\u5fc5\u80dc\uff1f\n\n## \u5206\u6790\n\n\u5c06\u8fd9\u9898\u53ef\u4ee5\u5206\u7c7b\u4e3a\u4e00\u7c7b **\u4e8c\u5206\u56fe\u535a\u5f08** \u95ee\u9898\u3002\n\n### \u4e3a\u4ec0\u4e48\u662f\u4e8c\u5206\u56fe\uff1f\n\n\u8fd9\u662f\u4e00\u4e2a\u5e38\u7528\u7684\u8f6c\u6362\u6280\u5de7\uff0c\u5728\u8bb8\u591a\u7f51\u7edc\u6d41\u9898\u76ee\u4e2d\u4f53\u73b0\u7684\u66f4\u7cbe\u6e5b\u3002\u4e00\u822c\u4e00\u4e2a\u7f51\u683c\u56fe\u6309\u7167\u56fd\u9645\u8c61\u68cb\u7684\u67d3\u8272\u65b9\u5f0f\uff0c\u53ef\u4ee5\u88ab\u67d3\u6210\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lzc6358l.png)\n\n\u5bf9\u4e8e\u70b9 $(x,y)$\uff0c\u989c\u8272\u5c31\u662f $x+y$ \u7684\u5947\u5076\u3002\n\n### \u8f6c\u6362\u540e\u8981\u600e\u4e48\u505a\uff1f\n\n\u9996\u5148\u7ed9\u51fa\u4e00\u4e2a\u5927\u5bb6\u90fd\u77e5\u9053\u7684\u7ed3\u8bba\uff1a**\u5728\u8fd9\u4e2a\u535a\u5f08\u4e2d\uff0c\u5982\u679c\u521d\u59cb\u5728\u4e8c\u5206\u56fe\u7684\u6240\u6709\u6700\u5927\u5339\u914d\u4e0a\uff0c\u90a3\u4e48\u5148\u624b\u5fc5\u80dc\uff0c\u53cd\u4e4b\u540e\u624b\u5fc5\u80dc\u3002**\n\n### \u4e3a\u4ec0\u4e48\u6211\u662f\u5bf9\u7684\uff1f\n\n\u5148\u7ed9\u51fa\u6837\u4f8b\u7684\u62df\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ts6mmiuw.png)\n\n\u5176\u4e2d\u52a0\u7c97\u7684\u70b9\u4e3a\u5728\u4efb\u610f\u6700\u5927\u5339\u914d\u4e0a\u7684\u70b9\u3002\u4e0d\u59a8\u5148\u79f0\u4e3a\u201c\u7c97\u70b9\u201d\uff0c\u76f8\u5bf9\u5730\u6709\u201c\u7ec6\u70b9\u201d\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u4ece\u4e00\u4e2a\u7c97\u70b9\u51fa\u53d1\uff08\u5982 $(2,2)$\uff09\uff0c\u53ea\u9700\u8981\u4efb\u610f\u9009\u62e9\u4e00\u4e2a\u5728\u4efb\u610f\u4e00\u4e2a\u6700\u5927\u5339\u914d\u4e0a\u7684\u5339\u914d\u70b9\uff08$(2,3)$ \u6216 $(3,2)$\uff09\u5373\u53ef\u3002\u53ea\u8981\u5148\u624b\u8d70\u7684\u662f\u6700\u5927\u5339\u914d\uff0c\u65e0\u8bba\u540e\u624b\u600e\u4e48\u8d70\uff0c\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u4e0d\u80fd\u56de\u5934\uff0c\u6240\u4ee5\u4e00\u5b9a\u53ef\u4ee5\u7ee7\u7eed\u6cbf\u7740\u4e00\u4e2a\u6700\u5927\u5339\u914d\u8d70\u3002\n\n\u68b3\u7406\u4e00\u4e0b\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\uff1a\u53ea\u8981\u5148\u624b\u5728\u7c97\u70b9\uff0c\u90a3\u4e48\u65e0\u8bba\u5bf9\u65b9\u600e\u4e48\u8d70\uff0c\u6c38\u8fdc\u53ef\u4ee5\u518d\u6b21\u8d70\u6700\u5927\u5339\u914d\u3002\u5982\u679c\u4e0d\u53ef\u4ee5\uff0c\u8fd9\u5c31\u4e0e\u6700\u5927\u5339\u914d\u7684\u201c\u6700\u5927\u201d\u77db\u76fe\u4e86\u3002\n\n\u53cd\u4e4b\uff0c\u5982\u679c\u5728\u7ec6\u70b9\u4e0a\uff0c\u90a3\u4e48\u540e\u624b\u4e00\u5b9a\u53ef\u4ee5\u5728\u4e00\u4e2a\u7c97\u70b9\u4e0a\u51fa\u53d1\uff0c\u5373\u540e\u624b\u5fc5\u80dc\u3002\n\n\u6240\u4ee5\uff0c\u9898\u76ee\u6240\u6c42\u7684\u5c31\u8f6c\u5316\u4e3a\uff1a**\u6c42\u5728\u4e00\u4e2a\u4e8c\u5206\u56fe\u4e0a\uff0c\u6709\u54ea\u4e9b\u70b9\u4e0d\u4e00\u5b9a\u5728\u6700\u5927\u5339\u914d\u4e0a\u3002**\n\n\u53ea\u8981\u6c42\u51fa\u8fd9\u4e2a\u7ec6\u70b9\u96c6\uff0c\u7a7a\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff0c\u4efb\u610f\u70b9\u7686\u4e3a\u7c97\u70b9\uff09\u5373\u8f93\u51fa `LOSE`\uff0c\u975e\u7a7a\u8f93\u51fa `WIN` \u5373\u53ef\u3002\n\n## \u5177\u4f53\u5730\u600e\u4e48\u5b9e\u73b0\uff1f\n\n\u9996\u5148\u7528\u4efb\u610f\u53ef\u4ee5\u89e3\u51b3\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u95ee\u9898\u7684\u7b97\u6cd5\uff08\u5308\u7259\u5229\u6216 Dinic\uff09\u90fd\u53ef\u4ee5\u3002\u6b64\u65f6\u6211\u4eec\u77e5\u9053\uff0c\u4e0d\u5728\u5f53\u524d\u5339\u914d\u7684\u70b9\u5fc5\u7136\u662f\u7ec6\u70b9\u3002\n\n\u63a5\u4e0b\u53bb\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e2a DFS\u3002\u5982\u679c\u4e00\u4e2a\u70b9 $P$ \u5df2\u88ab\u8bc1\u5b9e\u662f\u7ec6\u70b9\uff0c\u8bbe\u5b83\u6709\u4e00\u8fb9\u8fde\u7740 $Q$\uff0c\u4e14 $Q$ \u5728\u6700\u5927\u5339\u914d\u4e0a\uff0c\u5219 $Q$ \u7684\u5339\u914d\u70b9\u4e5f\u662f\u7ec6\u70b9\u3002\u5982\u6837\u4f8b\uff0c\u5982\u679c\u5f53\u524d $(2,2)$ \u5339\u914d $(2,3)$\uff0c\u5f53\u6211\u4eec\u4ece $(3,2)$ \u5f00\u59cb DFS \u65f6\uff0c\u5c31\u4f1a\u53d1\u73b0 $(2,3)$ \u662f\u7ec6\u70b9\u3002\u60f3\u60f3\u770b\uff0c\u5c06 $(2,2)\\Rightarrow(2,3)$ \u6362\u6210 $(2,2)\\Rightarrow(3,2)$ \u90fd\u662f\u6700\u5927\u5339\u914d\u3002\u6839\u636e\u8fd9\u6837\u7684\u6027\u8d28\uff0c\u627e\u51fa\u6240\u6709\u7684\u7ec6\u70b9\u5373\u53ef\u3002\n\n## \u4e3b\u8981\u4ee3\u7801\n\n```cpp\nconstexpr int MXN = 101;\nconstexpr int MXPTS = 10001;\n\nbool enable[MXPTS];\nint n, m, pts;\n\ninline int id(int x, int y) { return x * m + y; }\n\nint head[MXPTS], to[MXPTS << 2], nxt[MXPTS << 2], es;  // for base graph\nint link[MXPTS], vis[MXPTS];                           // for bi-graph\nvoid init() {\n  fill(head, head + pts, -1);\n  fill(link, link + pts, -1);\n  fill(vis, vis + pts, -1);\n}\nvoid addedge(int f, int t) {\n  to[es] = t;\n  nxt[es] = head[f];\n  head[f] = es++;\n}\nbool ask(int cur, int t) {\n  if (vis[cur] == t) return false;\n  vis[cur] = t;\n  for (int i(head[cur]); ~i; i = nxt[i]) {\n    if (!~link[to[i]] || ask(link[to[i]], t)) {\n      link[to[i]] = cur;\n      return true;\n    }\n  }\n  return false;\n}\nvoid makepair() {\n  for (int i(0); i != n; ++i) {\n    for (int j(0); j != m; ++j) {\n      if (!((i + j) & 1) && enable[id(i, j)]) ask(id(i, j), id(i, j));\n    }\n  }\n  for (int i(0); i != pts; ++i) {\n    if (~link[i]) link[link[i]] = i;\n  }\n}\n\nbool cango[MXPTS], ans;\n\nvoid findfake(int cur) {\n  ans = cango[cur] = true;\n  for (int i(head[cur]); ~i; i = nxt[i]) {\n    if (~link[to[i]] && !cango[link[to[i]]]) findfake(link[to[i]]);\n  }\n}\n\nint main() {\n  cin >> n >> m;\n  pts = n * m;\n  init();\n  for (int i(0); i != pts; ++i) {\n    char c;\n    cin >> c;\n    if (c == '.') enable[i] = true;\n  }\n  for (int i(0); i != n; ++i) {\n    for (int j(0); j != m; ++j) {\n      if (enable[id(i, j)]) {\n        if (i != n - 1 && enable[id(i + 1, j)])\n          addedge(id(i, j), id(i + 1, j)), addedge(id(i + 1, j), id(i, j));\n        if (j != m - 1 && enable[id(i, j + 1)])\n          addedge(id(i, j), id(i, j + 1)), addedge(id(i, j + 1), id(i, j));\n      }\n    }\n  }\n  makepair();\n  for (int i(0); i != pts; ++i) {\n    if (enable[i] && !~link[i]) {\n      findfake(i);\n    }\n  }\n  puts(ans ? \"WIN\" : \"LOSE\");\n  for (int i(0); i != n; ++i) {\n    for (int j(0); j != m; ++j) {\n      if (cango[id(i, j)]) cout << i + 1 << ' ' << j + 1 << endl;\n    }\n  }\n  return 0;\n}\n```",
        "postTime": 1648274892,
        "uid": 478829,
        "name": "euphoria_ai",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 - P4055 [JSOI2009]\u6e38\u620f"
    },
    {
        "content": "\u5bf9\u4e8e\u8be5\u9898\uff0c\u8003\u8651\u9ed1\u767d\u67d3\u8272\uff0c\u5efa\u7acb\u4e8c\u5206\u56fe\uff0c\u8dd1\u51fa\u6700\u5927\u5339\u914d\u3002\n\n\u82e5\u6700\u5927\u5339\u914d\u4e3a\u5b8c\u7f8e\u5339\u914d\uff0c\u5219\u5148\u624b\u5fc5\u8d25\u3002\u56e0\u4e3a\u65e0\u8bba\u5148\u624b\u5c06\u68cb\u5b50\u653e\u5728\u54ea\u4e2a\u70b9\uff0c\u540e\u624b\u53ea\u9700\u6cbf\u7740\u5339\u914d\u8fb9\u5373\u53ef\uff0c\u6b64\u65f6\u5148\u624b\u53ea\u80fd\u8d70\u975e\u5339\u914d\u8fb9\uff0c\u5373\u5148\u624b\u5fc5\u8d25\uff08\u53ea\u4f1a\u51fa\u73b0\u6240\u6709\u68cb\u5b50\u90fd\u8d70\u5b8c\u6216\u88ab\u56f0\u6b7b\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u90fd\u662f\u5339\u914d\u70b9\uff09\u3002\n\n\u82e5\u4e0d\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff0c\u5219\u5148\u624b\u5fc5\u80dc\u3002\u56e0\u4e3a\u5148\u624b\u53ea\u9700\u5c06\u68cb\u5b50\u653e\u5728\u975e\u5339\u914d\u70b9\u4e0a\uff0c\u7136\u540e\u53ea\u9700\u6cbf\u7740\u5339\u914d\u8fb9\u5373\u53ef\uff0c\u6b64\u65f6\u540e\u624b\u53ea\u80fd\u8d70\u975e\u5339\u914d\u8fb9\uff0c\u5373\u540e\u624b\u5fc5\u8d25\u3002\n\n\u7edf\u8ba1\u53ef\u4ee5\u4f7f\u5148\u624b\u5fc5\u80dc\u7684\u8282\u70b9\uff1a\u975e\u5339\u914d\u70b9\uff0c\u5b58\u5728\u8def\u5f84\u4e3a \u5339\u914d\u8fb9-\u975e\u5339\u914d\u8fb9-\u5339\u914d\u8fb9...\u975e\u5339\u914d\u8fb9 \u7684\u5339\u914d\u70b9\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i=(a); i<=(b); i++)\nusing namespace std;\n\nbool M1;\n\nconst int N=2e4+11;\n\nint h[N], nt[N<<1], to[N<<1], ecnt;\nvoid link(int u, int v){\n//    printf(\"%d %d\\n\", u, v);\n    nt[++ecnt]=h[u], h[u]=ecnt, to[ecnt]=v;\n}\n\nint n, match[N], vis[N], ci, m;\nint ban[101][101], Node;\n\nbool dfs(int u){\n    for(int i=h[u]; i; i=nt[i]){\n        int v=to[i];\n        if(vis[v]==ci) continue;\n        vis[v]=ci;\n        if(!match[v]||dfs(match[v])){\n            match[v]=u, match[u]=v; return true;\n        }\n    }\n    return false;\n}\n\nint aa[N], Top;\nvoid Dfs(int u){\n    vis[u]=ci;\n    for(int i=h[u]; i; i=nt[i]){\n        int v=to[i];\n        if(!match[v]||match[v]==u||vis[match[v]]==ci)continue;\n        aa[++Top]=match[v], Dfs(match[v]);\n    }\n}\n\nbool M2;\n\nint main(){\n    fprintf(stderr, \"%.2lf\\n\", 1.*((&M2)-(&M1))/1024./1024.);\n    scanf(\"%d %d\", &n, &m);\n    rep(i, 1, n){\n        static char s[120];\n        scanf(\"%s\", s+1);\n        rep(j, 1, m)\n            if(s[j]=='#') ban[i][j]=1;\n            else Node++;\n    }\n    const int dx[]={-1, 0, 0, 1};\n    const int dy[]={0, -1, 1, 0};\n    rep(i, 1, n) rep(j, 1, m){\n        if((i+j)&1)continue;\n        if(ban[i][j])continue;\n        rep(o, 0, 3){\n            int x=i+dx[o], y=j+dy[o];\n            if(x<1||y<1||x>n||y>m||ban[x][y]) continue;\n            link((i-1)*m+j, (x-1)*m+y);\n            link((x-1)*m+y, (i-1)*m+j);\n        }\n    }\n    int cnt=0;\n    rep(i, 1, n) rep(j, 1, m){\n        if((i+j)&1)continue;\n        if(match[(i-1)*m+j]||ban[i][j])continue;\n        ci++, cnt+=dfs((i-1)*m+j);\n    }\n    if(Node%2==0&&cnt==Node/2)\n        puts(\"LOSE\"), exit(0);\n//    printf(\"%d\\n\", cnt);\n    ci++, puts(\"WIN\");\n//    rep(i, 1, n) rep(j, 1, m) if(match[(i-1)*m+j]) cout<<(i-1)*m+j<<\" \";\n//    cout<<'\\n';\n    rep(i, 1, n) rep(j, 1, m){\n        int x=(i-1)*m+j;\n        if(match[x]||ban[i][j])continue;\n        aa[++Top]=x, Dfs(x);\n    }\n    sort(aa+1, aa+Top+1);\n    rep(i, 1, Top){\n        int x=aa[i]/m, y=aa[i]%m;\n        if(y==0)x--, y=m;\n        x++;\n        printf(\"%d %d\\n\", x, y);\n    }\n    return 0;\n}\n```",
        "postTime": 1684396215,
        "uid": 740607,
        "name": "__ODT__",
        "ccfLevel": 0,
        "title": "P4055"
    },
    {
        "content": "[link](https://www.luogu.com.cn/problem/P4055)\n\n# \u9898\u76ee\u5927\u610f\n\n\u9898\u76ee\u8bf4\u5f97\u6bd4\u8f83\u6e05\u695a\u3002\n\n# \u9898\u89e3\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u3001\u57fa\u7840\u535a\u5f08\u8bba\u3002\n\n\u6bcf\u4e2a\u70b9\u53ea\u80fd\u8d70\u4e00\u6b21\u7684\u56db\u8054\u901a\u70b9\u9635\uff0c\u53ef\u4ee5\u60f3\u5230\u4e8c\u5206\u56fe\u5339\u914d\u3002\n\n\u5c06\u5176\u5957\u8def\u5730\u5947\u5076\u5206\u70b9\uff0c\u76f8\u90bb\u4e24\u70b9\u8fde\u8fb9\uff08\u663e\u7136\u4e0d\u80fd\u4e3a `#`\uff09\u3002\n\n\u5148\u6c42\u4e00\u4e2a\u6700\u5927\u5339\u914d\u3002\n\n\u5982\u679c\u662f\u5b8c\u7f8e\u5339\u914d\uff0c\u90a3\u4e48 `LOSE`.\u56e0\u4e3a\u5c0f AA \u5c06\u68cb\u5b50\u653e\u5230\u4efb\u610f\u4e00\u70b9\uff0c\u5c0f YY \u90fd\u80fd\u8d70\u5339\u914d\u8fb9\u8d70\u5230\u53e6\u4e00\u90e8\uff0c\u5c0f AA \u5c31\u53ea\u80fd\u8d70\u975e\u5339\u914d\u8fb9\u3002\u6bcf\u4e00\u70b9\u90fd\u6709\u4e00\u6761\u5339\u914d\u8fb9\uff0c\u6700\u540e\u5c0f YY \u4f1a\u8d70\u6700\u540e\u4e00\u6761\u5339\u914d\u8fb9\uff0c\u8fd9\u65f6\u6240\u6709\u70b9\u90fd\u8d70\u5b8c\u4e86\u3002\u5c0f AA \u8d25\u3002\n\n\u73b0\u5728\u8003\u8651 `WIN`.\n\n\u9996\u5148\uff0c\u82e5\u5c0f AA \u9009\u62e9\u975e\u5339\u914d\u70b9\uff0c\u90a3\u4e48\u5c0f AA \u5fc5\u80dc\u3002\u663e\u7136\uff0c\u975e\u5339\u914d\u70b9\u7684\u90bb\u63a5\u70b9\u90fd\u4e3a\u5339\u914d\u70b9\uff0c\u5426\u5219\u5c31\u4e0d\u662f\u6700\u5927\u5339\u914d\u3002\u5f53\u5c0f AA \u653e\u4e0b\u68cb\u5b50\u540e\uff0c\u5c0f YY \u8d70\u5230\u5339\u914d\u70b9\u4e0a\u3002\u7136\u540e\uff0c\u5c0f AA \u8d70\u5339\u914d\u8fb9\u3002\u5219\u5c0f YY \u6b64\u65f6\u53ea\u80fd\u8d70\u975e\u5339\u914d\u8fb9\u3002\u4ee5\u975e\u5339\u914d\u70b9\u4e3a\u5f00\u59cb\u7684\u4e00\u6761\u8def\u5f84\uff0c\u8def\u5f84\u7684\u7ed3\u5c3e\u53ea\u80fd\u662f\u5339\u914d\u70b9\u3002\u8fd9\u4e2a\u70b9\u53ea\u6709\u4e00\u6761\u8fb9\u8fde\u51fa\uff0c\u4e3a\u5339\u914d\u8fb9\u3002\u6700\u540e\uff0c\u5c0f AA \u4f1a\u901a\u8fc7\u8fd9\u6761\u5339\u914d\u8fb9\u8d70\u5230\u7ed3\u5c3e\uff0c\u5c0f AA \u80dc\u3002\n\n\u6240\u4ee5\u5c0f AA \u9009\u975e\u5339\u914d\u70b9\u65f6\u80dc\u5229\u3002\n\n\u518d\u6765\u89c2\u5bdf\u4e0b\u56fe\u3002\u9ed1\u70b9\u4e3a\u5339\u914d\u70b9\uff0c\u8fb9\u6743\u4e3a $1$ \u7684\u662f\u5339\u914d\u8fb9\u3002\n\n![\u8fd9\u662f\u4e00\u5f20\u56fe\u7247](https://cdn.luogu.com.cn/upload/image_hosting/hsclzy46.png?x-oss-process=image/resize,m_lfit,h_370,w_425)\n\n\u6211\u4eec\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u6848\uff1a\n\n![\u8fd9\u662f\u4e00\u5f20\u56fe\u7247](https://cdn.luogu.com.cn/upload/image_hosting/iejlbr6d.png?x-oss-process=image/resize,m_lfit,h_370,w_425)\n\n\u90a3\u4e48\u70b9 $1$ \u548c $5$ \u90fd\u662f\u5fc5\u80dc\u70b9\u3002\n\n\u7531\u6b64\u65ad\u8a00\uff1a\u7b54\u6848\u4e3a**\u975e\u6700\u5927\u5339\u914d\u5fc5\u987b\u70b9**\u3002\n\n\u5982\u679c\u4e00\u4e2a\u70b9 $p$ \u662f**\u975e\u6700\u5927\u5339\u914d\u5fc5\u987b\u70b9**\uff0c\u90a3\u4e48\u5b58\u5728\u4e00\u4e2a\u6700\u5927\u5339\u914d\uff0c\u4f7f\u70b9 $p$ \u4e0d\u662f\u5339\u914d\u70b9\u3002\u5728\u8fd9\u4e2a\u6700\u5927\u5339\u914d\u4e0a\u5b9e\u884c\u4e0a\u8ff0\u65b9\u6848\uff0c\u5c0f AA \u5fc5\u80dc\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u53ea\u9700\u8981\u5bf9\u4e00\u4e2a\u70b9\u5c1d\u8bd5\u589e\u5e7f\uff0c\u5982\u679c\u589e\u5e7f\u51fa\u4e00\u6761\u8def\u5f84\uff0c\u957f\u5ea6\u4e0e\u5f53\u524d\u6700\u5927\u5339\u914d\u7684\u8def\u5f84\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u8fd9\u4e2a\u70b9\u5c31\u662f\u4e00\u4e2a\u975e\u6700\u5927\u5339\u914d\u5fc5\u987b\u70b9\u3002\n\n\u7531\u4e8e\u4e00\u4e2a\u70b9\u53ef\u80fd\u5728 $X$ \u90e8\uff0c\u4e5f\u53ef\u80fd\u5728 $Y$ \u90e8\uff0c\u5206\u7c7b\u8ba8\u8bba\u7684\u8bdd\u8981\u5199\u4e24\u4e2a\u589e\u5e7f\u51fd\u6570\u3002\u53ef\u4ee5\u5c06\u4e24\u90e8\u8bb0\u5f55\u5339\u914d\u70b9\u7684\u6570\u7ec4 $cx$ \u548c $cy$ \u5408\u5e76\uff0c\u7edf\u4e00\u4e3a $cxy$\uff0c$cxy_i$ \u8bb0\u5f55\u70b9 $i$ \u5bf9\u5e94\u7684\u5339\u914d\u70b9\u7f16\u53f7\u3002\u8fd9\u6837\u7684\u8bdd\u9700\u8981\u5efa\u53cc\u5411\u8fb9\uff0c\u6240\u4ee5\u5176\u5b9e\u662f\u7528\u589e\u5927\u5e38\u6570\u7684\u4ee3\u4ef7\u6362\u6765\u8f83\u5c0f\u7684\u7f16\u7a0b\u590d\u6742\u5ea6\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^4)$.\n\n# \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 40005;//\u4e0d\u80fd\u5f00\u592a\u5927\uff0c\u5426\u5219 memset \u65f6\u4f1a TLE\nint n, m, cnt = 0, fir[N], nxt[N], to[N], vis[N], cxy[N], p[105][105], tot = 0, xt, cans = 0;\nchar a[105][105];\nint dx[5] = {0, 1, 0, -1};\nint dy[5] = {1, 0, -1, 0};\nstruct node {\n    int x, y;\n} ans[N];\nvoid ade(int u, int v) {\n    cnt++, nxt[cnt] = fir[u], fir[u] = cnt, to[cnt] = v;\n    cnt++, nxt[cnt] = fir[v], fir[v] = cnt, to[cnt] = u;\n}\nvoid getp() {//\u91cd\u6807\u53f7\n    for (int i = 1; i <= n; i++)\n        for (int j = ((i & 1) ? 1 : 2); j <= m; j += 2)\n            if (a[i][j] == '.')\n                p[i][j] = ++tot;\n    xt = tot;\n    for (int i = 1; i <= n; i++)\n        for (int j = ((i & 1) ? 2 : 1); j <= m; j += 2)\n            if (a[i][j] == '.')\n                p[i][j] = ++tot;\n}\nvoid ADE(int x, int y) {//\u5c06 (x,y) \u4e0e\u90bb\u63a5\u70b9\u8fde\u8fb9\n    for (int i = 0; i < 4; i++) {\n        int xx = x + dx[i], yy = y + dy[i];\n        if (xx >= 1 && xx <= n && yy >= 1 && yy <= m && a[xx][yy] == '.') ade(p[x][y], p[xx][yy]);\n    }\n}\nint dfs(int r) {//\u627e\u589e\u5e7f\u8def\u5f84\n    vis[r] = 1;\n    for (int i = fir[r]; i; i = nxt[i])\n        if (!vis[to[i]]) {\n            vis[to[i]] = 1;\n            if (!cxy[to[i]] || dfs(cxy[to[i]])) {\n                cxy[cxy[r]] = 0, cxy[r] = to[i], cxy[to[i]] = r;\n                return 1;\n            }\n        }\n    return 0;\n}\nvoid match() {\n    for (int i = 1; i <= xt; i++)\n        if (!cxy[i])\n            memset(vis, 0, sizeof(vis)), dfs(i);\n}\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i++) scanf(\"%s\", a[i] + 1);\n    getp();\n    for (int i = 1; i <= n; i++)\n        for (int j = ((i & 1) ? 1 : 2); j <= m; j += 2)//\u53ea\u679a\u4e3e\u5076\u70b9\n            if (a[i][j] == '.')\n                ADE(i, j);\n    match();//\u5148\u6c42\u4e00\u79cd\u6700\u5927\u5339\u914d\u65b9\u6848\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= m; j++)\n            if (a[i][j] == '.') {\n                memset(vis, 0, sizeof(vis));\n                if (!cxy[p[i][j]] || dfs(cxy[p[i][j]])) ans[++cans].x = i, ans[cans].y = j;\n            }\n    if (!cans) { printf(\"LOSE\"); return 0; }//\u6ca1\u6709\u975e\u5339\u914d\u70b9\n    printf(\"WIN\\n\");\n    for (int i = 1; i <= cans; i++) printf(\"%d %d\\n\", ans[i].x, ans[i].y);\n    return 0;\n}\n```\n\n# END\n",
        "postTime": 1681387037,
        "uid": 566238,
        "name": "hejianxing",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P4055 JSOI2009 \u6e38\u620f"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6211\u4eec\u8003\u8651\u5bf9\u68cb\u76d8\u9ed1\u767d\u67d3\u8272\uff0c\u8fd9\u6837\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u76f8\u90bb\u7684\u70b9\u8fde\u53cc\u5411\u8fb9\u3002\n\n\u63a5\u4e0b\u6765\u80af\u5b9a\u662f\u8003\u8651\u6700\u5927\u5339\u914d\u4e86\u3002\n\n\u6211\u4eec\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5982\u679c\u6240\u6709\u70b9\u90fd\u5339\u914d\u6210\u529f\uff0c\u90a3\u4e48\u5148\u624b\u5fc5\u8d25\u3002\n\n\u8fd9\u4e2a\u5927\u5bb6\u53ef\u4ee5\u60f3\u4e00\u4e0b\uff0c\u56e0\u4e3a\u6240\u6709\u70b9\u90fd\u662f\u5339\u914d\u6210\u529f\u7684\uff0c\u65e0\u8bba\u9009\u62e9\u54ea\u4e00\u4e2a\u70b9\uff0c\u540e\u624b\u90fd\u53ef\u4ee5\u9009\u62e9\u5b83\u7684\u914d\u5bf9\u70b9\u3002\n\n\u63a5\u4e0b\u6765\u5148\u624b\u518d\u8d70\u4e00\u6b65\uff0c\u8d70\u5230\u4e00\u4e2a\u65b0\u7684\u70b9\uff0c\u6211\u4eec\u518d\u9009\u62e9\u914d\u5bf9\u70b9\u3002\n\n\u5982\u6b64\u53cd\u590d\uff0c\u76f4\u5230\u5148\u624b\u6ca1\u6709\u65b0\u7684\u70b9\u53ef\u4ee5\u8d70\u4e3a\u6b62\u3002\n\n\u5426\u5219\uff0c\u5148\u624b\u53ef\u4ee5\u8d70\u5339\u914d\u5931\u8d25\u7684\u70b9\uff0c\u8fd9\u4e2a\u70b9\u6ca1\u6709\u5339\u914d\u70b9\u3002\n\n\u5c31\u7b97\u5728\u67d0\u4e2a\u65b9\u6848\u8fd9\u4e2a\u70b9\u6709\u76f8\u8fde\u7684\uff0c\u6211\u4eec\u4ece\u5f53\u524d\u72b6\u6001\u8f6c\u79fb\uff0c\u80af\u5b9a\u8981\u4f7f\u5176\u4ed6\u7684\u70b9\u5931\u914d\uff0c\u6240\u4ee5\u6700\u540e\u80af\u5b9a\u8fd8\u662f\u5148\u624b\u5fc5\u80dc\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u770b\u770b\u662f\u5426\u5728\u67d0\u4e2a\u65b9\u6848\u4e2d\u5b83\u662f\u5931\u914d\u7684\uff0c\u5982\u679c\u662f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u4f7f\u5148\u624b\u5fc5\u80dc\u7684\u70b9\u3002\n\n\u8fd9\u9053\u9898\u6570\u636e\u5f88\u6c34\uff0c\u6240\u4ee5\u6211\u7684\u901a\u8fc7\u4ee3\u7801\u53ef\u80fd\u6ca1\u6709\u5904\u7406\u4e00\u4e9b\u60c5\u51b5\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define LL int\nusing namespace std;\nconst LL dx[2] = { 0, -1 };\nconst LL dy[2] = { -1, 0 };\nstruct node {\n    LL rx, ry, nxt;\n} a[1000005];\nLL n, m, tot, f[105][105][2], h[105][105];\nbool vis[105][105];\nvoid add(LL x, LL y, LL xx, LL yy) {\n    a[++tot] = { xx, yy, h[x][y] };\n    h[x][y] = tot;\n}\nchar c[105][105];\nvoid link(LL x, LL y) {\n    for (int i = 0; i < 2; i++) {\n        LL xx = x + dx[i], yy = y + dy[i];\n        if (xx == 0 || yy == 0 || xx == n + 1 || yy == m + 1)\n            continue;\n        if (c[xx][yy] == '.') {\n            add(x, y, xx, yy);\n            add(xx, yy, x, y);\n        }\n    }\n}\nbool dfs(LL x, LL y) {\n    for (LL i = h[x][y]; i; i = a[i].nxt) {\n        LL xx = a[i].rx, yy = a[i].ry;\n        if (vis[xx][yy])\n            continue;\n        vis[xx][yy] = 1;\n        if (f[xx][yy][1] == 0 || dfs(f[xx][yy][0], f[xx][yy][1])) {\n            f[f[x][y][0]][f[x][y][1]][0] = 0, f[f[x][y][0]][f[x][y][1]][1] = 0;\n            f[xx][yy][0] = x, f[xx][yy][1] = y;\n            f[x][y][0] = xx, f[x][y][1] = yy;\n            return 1;\n        }\n    }\n    return 0;\n}\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%s\", c[i] + 1);\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            if (c[i][j] == '#')\n                continue;\n            link(i, j);\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            if (c[i][j] == '#')\n                continue;\n            if (f[i][j][1] == 1)\n                continue;\n            memset(vis, 0, sizeof(vis));\n            if (f[i][j][1] == 0)\n                dfs(i, j);\n        }\n    }\n    puts(\"WIN\");\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            if (c[i][j] == '.') {\n                memset(vis, 0, sizeof(vis));\n                if (f[i][j][0] == 0 || dfs(f[i][j][0], f[i][j][1]))\n                    printf(\"%d %d\\n\", i, j);\n            }\n        }\n    }\n}\n```",
        "postTime": 1681221631,
        "uid": 501947,
        "name": "DengDuck",
        "ccfLevel": 6,
        "title": "P4055 [JSOI2009] \u6e38\u620f \u9898\u89e3"
    },
    {
        "content": "\u5199\u4e86\u633a\u4e45\u5206\u4eab\u4e00\u4e0b\u5199\u8fd9\u9053\u9898\u7684\u601d\u8def\uff1a  \n1. \u9996\u5148\u5224\u65ad\u51fa\u662f\u4e00\u9053\u4e8c\u5206\u56fe\u5b8c\u5907\u5339\u914d\u7684\u95ee\u9898\uff0c\u82e5\u6700\u5927\u5339\u914d\u4e3a\u5b8c\u5907\u5339\u914d\uff0c\u5219\u5fc5\u8f93\uff0c\u53cd\u8bc1\u6cd5\uff1a\u5982\u679c\u4e0d\u662f\u5b8c\u5907\u5339\u914d\uff0c\u4ece\u975e\u5339\u914d\u70b9\u51fa\u53d1\u5230\u8fbe\u5339\u914d\u70b9\u540e\uff0c\u56e0\u4e3a\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\u5f84\uff0c\u5219\u6cbf\u7740\u5339\u914d\u8fb9\u8d70\uff0c\u5fc5\u80dc   \n2. \u5982\u679c\u4e0d\u662f\u5b8c\u5907\u5339\u914d\uff0c\u8981\u6c42\u6c42\u51fa\u6240\u6709\u7684\u975e\u5339\u914d\u70b9\uff0c\u89c2\u5bdf\u6837\u4f8b\uff081\uff0c1\uff09\u548c\uff084\uff0c1\uff09\u5339\u914d\uff0c\uff082\uff0c2\uff09\u548c\uff083\uff0c2\uff09\u6216\uff082\uff0c3\uff09\u5339\u914d\uff0c\u672c\u6765\u5e94\u8be5\u53ea\u6709\uff082\uff0c3\uff09\uff0c\uff083\uff0c2\uff09\u5176\u4e2d\u4e00\u70b9\uff0c\u4e3a\u4ec0\u4e48\u4e24\u70b9\u90fd\u662f\u5462\uff0c\u56e0\u4e3a\u5728\u53e6\u5916\u4e00\u7ec4\u6700\u5927\u5339\u914d\u4e2d\uff0c\u53e6\u5916\u4e00\u70b9\u6210\u4e3a\u4e86\u975e\u5339\u914d\u70b9\u3002\u6240\u4ee5\u8981\u5bf9\u6bcf\u7ec4\u5339\u914d\u4e2d\u5df2\u5339\u914d\u7684\u53f3\u90e8\u70b9\u5220\u53bb\u540e\u91cd\u65b0\u5339\u914d\uff0c\u82e5\u5339\u914d\u6210\u529f\uff0c\u5219\u8fd9\u4e2a\u53f3\u90e8\u70b9\u53ef\u4ee5\u6210\u4e3a\u975e\u5339\u914d\u70b9   \n3. \u5bf9\u6bcf\u4e2a\u70b9\uff08i\uff0cj\uff09hash-> m*(i-1)+j,\u89e3hash\u6a2a\u5750\u6807i=(x-1)/m+1,y=(x-1)%m+1,\u4f7f\u7528\u51fd\u6570\u5229\u4e8e\u5bf9\u70b9\u7684\u5904\u7406\u548c\u4ee3\u7801\u7f8e\u89c2  \n4. \u9ed1\u767d\u67d3\u8272\uff0c\u4e0d\u9700\u8981dfs\u8fdb\u884c\u67d3\u8272\uff0c\u5224\u65ad\uff08i+j)(\u5750\u6807\u548c\uff09\u4e3a\u5947\u6570\u7684\u4e3a\u5de6\u90e8\u70b9\uff0c\u4e3a\u5076\u6570\u7684\u8bb0\u4e3a\u53f3\u90e8\u70b9   \n\n\u4e00\u9053\u5f88\u597d\u7684\u4e8c\u5206\u56fe\u7684\u9898\uff0c\u5f88\u5feb\u6253\u7684\u9898\u89e3\u6ca1\u6ce8\u610f\u6392\u7248\uff0c\u4e0a\u4ee3\u7801\u4e86   \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define N 110 \nusing namespace std;\nint n,m,cnt_tot,cnt_left,match[N*N],ans,cnt,head[N*N],tot;\nbool a[N][N],vis[N*N],flag[N][N];\nstruct Edge{\n\tint v,next;\n}edge[N*N*4];\ninline int read(){int x=0,f=1;char ch=getchar();while(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();}while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();return x*f;}\ninline void add(int x,int y){edge[++tot].v=y;edge[tot].next=head[x];head[x]=tot;}\ninline int num(int x,int y){return m*(x-1)+y;}\ninline int getl(int a){return (a-1)/m+1;}\ninline int getr(int a){return (a-1)%m+1;}\nbool dfs(int x){\n\tfor(int i=head[x];i;i=edge[i].next){\n\t\tint v=edge[i].v;\n\t\tif(vis[v])continue;vis[v]=1;\n\t\tif(!match[v]||dfs(match[v])){\n\t\t\tmatch[v]=x;\n\t\t\treturn true;\n\t\t}\n\t}return false;\n}\nint main(){\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tchar ch;\n\t\t\tcin>>ch;\n\t\t\tif(ch=='.'){\n\t\t\t\ta[i][j]=1,cnt_tot++;\n\t\t\t\tif((i+j)%2)cnt_left++;  //\u5de6\u5339\u914d\u70b9\u4e2a\u6570 \n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m-1;j++){\n\t\t\tif(a[i][j]&&a[i][j+1])\n\t\t\t\tadd(num(i,j),num(i,j+1)),add(num(i,j+1),num(i,j));\n\t\t}\n\tfor(int j=1;j<=m;j++)\n\t\tfor(int i=1;i<=n-1;i++){\n\t\t\tif(a[i][j]&&a[i+1][j])\n\t\t\t\tadd(num(i,j),num(i+1,j)),add(num(i+1,j),num(i,j));\n\t\t}\n\t\t\n\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tif(a[i][j]&& ((i+j)%2) ) // \u9ed1\u767d\u67d3\u8272\uff0c\u6a2a\u7eb5\u5750\u6807\u4e4b\u548c\u4e3a\u5076\u6570\u7684\u4e3a\u5de6\u90e8\u70b9 \n\t\t\t{\n\t\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\t\tif(dfs(num(i,j)))ans++;\n\t\t\t\telse {\n\t\t\t\t\tflag[i][j]=1;\n\t\t\t\t}\n\t\t\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tif(a[i][j]&&((i+j)%2==0)){\n\t\t\t\tif(!match[num(i,j)]){\n\t\t\t\t\tflag[i][j]=1;\n\t\t\t\t} \n\t\t\t\telse{\n\t\t\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\t\t\tvis[num(i,j)]=1;\n\t\t\t\t\tif(dfs(match[num(i,j)])){\n\t\t\t\t\t\tflag[i][j]=1;\n\t\t\t\t\t\tmatch[num(i,j)]=0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\tmemset(match,0,sizeof(match)); \n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tif(a[i][j]&& ((i+j)%2==0) ) // \u9ed1\u767d\u67d3\u8272\uff0c\u6a2a\u7eb5\u5750\u6807\u4e4b\u548c\u4e3a\u5947\u6570\u7684\u4e3a\u53f3\u90e8\u70b9 \n\t\t\t{\n\t\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\t\tif(dfs(num(i,j)))ans++;\n\t\t\t\telse {\n\t\t\t\t\tflag[i][j]=1;\n\t\t\t\t}\n\t\t\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m;j++)\n\t\t\tif(a[i][j]&&((i+j)%2)){\n\t\t\t\tif(!match[num(i,j)]){\n\t\t\t\t\tflag[i][j]=1;\n\t\t\t\t} \n\t\t\t\telse{\n\t\t\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\t\t\tvis[num(i,j)]=1;\n\t\t\t\t\tif(dfs(match[num(i,j)])){\n\t\t\t\t\t\tflag[i][j]=1;\n\t\t\t\t\t\tmatch[num(i,j)]=0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\n\tif((cnt_left*2==cnt_tot)&&ans==cnt)printf(\"LOSE\\n\");    //\u5982\u679c\u4e3a\u5b8c\u5907\u5339\u914d \n\telse {\n\t\tprintf(\"WIN\\n\");\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=m;j++)\n\t\t\t\tif(flag[i][j])printf(\"%d %d\\n\",i,j);\n\t} \n\treturn 0;\n}\n\n\n```\n",
        "postTime": 1557665272,
        "uid": 88733,
        "name": "Zekrom",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4055 \u3010[JSOI2009]\u6e38\u620f\u3011"
    }
]