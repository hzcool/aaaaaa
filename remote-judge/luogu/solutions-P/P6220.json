[
    {
        "content": "# \u524d\u8a00\n~~\u535a\u4e3b\u5f88\u7b28~~ \uff0c\u5982\u6709\u7eb0\u6f0f\uff0c\u6b22\u8fce\u5728\u8bc4\u8bba\u533a\u6307\u51fa\u8ba8\u8bba\u3002\n\n\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u4f7f\u7528 $Dinic$ \u7b97\u6cd5\u8fdb\u884c\u5b9e\u73b0\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\sqrt{e})$\uff0c\u5176\u4e2d\uff0c $n$\u4e3a\u4e8c\u5206\u56fe\u4e2d\u5de6\u90e8\u70b9\u7684\u6570\u91cf\uff0c $e$ \u4e3a\u4e8c\u5206\u56fe\u4e2d\u7684\u8fb9\u6570\u3002\u82e5\u662f\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nm)$ \uff0c $m$ \u4e3a\u4e8c\u5206\u56fe\u4e2d\u53f3\u90e8\u70b9\u7684\u6570\u91cf\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528\u3002\n\n[\u535a\u5ba2\u56ed\u98df\u7528\u66f4\u4f73](https://www.cnblogs.com/C202202chenkelin/p/14437260.html)\n# K\u00f6nig\u5b9a\u7406\n\u5b9a\u7406\u5185\u5bb9\uff1a\u4e8c\u5206\u56fe\u6700\u5c0f\u70b9\u8986\u76d6\u7684\u70b9\u7684\u6570\u91cf**\u7b49\u4e8e**\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u8fb9\u7684\u6570\u91cf\u3002\n\n\u6784\u9020\u65b9\u6cd5 $+$ \u7b80\u5355\u8bc1\u660e\uff1a\n\n\u9996\u5148\u6c42\u51fa\u4e8c\u5206\u56fe\u4e2d\u7684\u6700\u5927\u5339\u914d\uff0c\u5efa\u8bae\u4f7f\u7528 $Dinic$ \u3002\n\n\u4ece\u6bcf\u4e00\u4e2a\u975e\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u6cbf\u7740\u975e\u5339\u914d\u8fb9\u6b63\u5411\u8fdb\u884c\u904d\u5386\uff0c\u6cbf\u7740\u5339\u914d\u8fb9\u53cd\u5411\u8fdb\u884c\u904d\u5386\u5230\u7684\u70b9\u8fdb\u884c\u6807\u8bb0\u3002\u9009\u53d6\u5de6\u90e8\u70b9\u4e2d\u6ca1\u6709\u88ab\u6807\u8bb0\u8fc7\u7684\u70b9\uff0c\u53f3\u90e8\u70b9\u4e2d\u88ab\u6807\u8bb0\u8fc7\u7684\u70b9\uff0c\u5219\u8fd9\u4e9b\u70b9\u53ef\u4ee5\u5f62\u6210\u8be5\u4e8c\u5206\u56fe\u7684\u6700\u5c0f\u70b9\u8986\u76d6\u3002\n\n\u904d\u5386\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a\n```cpp\nvoid dfs(int now) {\n\tvis[now] = true;\n\tint SIZ = v[now].size();\n\tfor(int i = 0; i < SIZ; i++) {\n\t\tint next = v[now][i].to;\n\t\tif(vis[next] || !v[now][i].val)//\u6b63\u5411\u8fb9\u7684\u5bb9\u91cf\u4e3a0\u8bf4\u660e\u662f\u5339\u914d\u8fb9\uff0c\u53cd\u5411\u8fb9\u7684\u5bb9\u91cf\u4e3a0\u8bf4\u660e\u662f\u975e\u5339\u914d\u8fb9\n\t\t\tcontinue;\n\t\tdfs(next);\n\t}\n}\n```\n\u90a3\u4e48\u5c31\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\n\n* \u82e5\u8be5\u70b9\u4e3a\u5de6\u8fb9\u7684\u975e\u5339\u914d\u70b9\uff0c\u5219\u8fd9\u4e2a\u70b9\u5fc5\u88ab\u8bbf\u95ee\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u70b9\u662f\u6574\u4e2a $dfs$ \u7684\u8d77\u70b9\n* \u82e5\u8be5\u70b9\u4e3a\u53f3\u8fb9\u7684\u975e\u5339\u914d\u70b9\uff0c\u5219\u8fd9\u4e2a\u70b9\u5fc5\u4e0d\u4f1a\u88ab\u8bbf\u95ee\uff0c\u82e5\u662f\u7531\u5de6\u8fb9\u7684\u975e\u5339\u914d\u70b9\u624d\u5230\u8fbe\u4e86\u8fd9\u4e2a\u70b9\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u8fd9\u6761\u8fb9\u53d8\u4e3a\u5339\u914d\u8fb9\uff0c\u5219\u5339\u914d\u6570 $+1$ \uff0c\u4e0e\u6700\u5927\u5339\u914d\u76f8\u51b2\u7a81\u3002\u82e5\u662f\u5de6\u8fb9\u7684\u5339\u914d\u70b9\u624d\u5230\u8fbe\u4e86\u8fd9\u4e2a\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u7684\u8def\u5f84\u4e3a**\u5de6\u8fb9\u975e\u5339\u914d\u70b9** \u2192 **\u53f3\u8fb9\u5339\u914d\u70b9** \u2192 **\u5de6\u8fb9\u975e\u5339\u914d\u70b9** \u2192 **\u53f3\u8fb9\u5339\u914d\u70b9** \u2192  **\u2026\u2026** \u2192 **\u5de6\u8fb9\u5339\u914d\u70b9** \u2192 **\u53f3\u8fb9\u975e\u5339\u914d\u70b9** \uff0c\u5f88\u660e\u663e\uff0c\u4e0a\u8ff0\u8def\u5f84\u4e3a\u589e\u5e7f\u8def\uff0c\u4e0e\u6700\u5927\u5339\u914d\u76f8\u51b2\u7a81\u3002\u6240\u4ee5\uff0c\u53f3\u8fb9\u7684\u975e\u5339\u914d\u70b9\u5fc5\u4e0d\u4f1a\u88ab\u8bbf\u95ee\u3002\n* \u5bf9\u4e8e\u4e00\u7ec4\u5339\u914d\u70b9\uff0c\u8981\u4e48\u4e24\u4e2a\u90fd\u88ab\u6807\u8bb0\uff0c\u8981\u4e48\u90fd\u4e0d\u88ab\u6807\u8bb0\u3002\u56e0\u4e3a\u5de6\u90e8\u7684\u5339\u914d\u70b9\u662f\u7531\u53f3\u90e8\u7684\u5339\u914d\u70b9\u6765\u904d\u5386\u5230\u7684\uff0c\u51fa\u73b0\u5fc5\u7136\u6210\u53cc\u6210\u5bf9\u3002\n\n\u6709\u4e86\u4e0a\u8ff0\u7684\u4e09\u6761\u6027\u8d28\uff0c\u53ef\u4ee5\u53d1\u73b0\uff1a\u6309\u7167\u9009\u53d6\u5de6\u90e8\u70b9\u4e2d\u6ca1\u6709\u88ab\u6807\u8bb0\u8fc7\u7684\u70b9\uff0c\u53f3\u90e8\u70b9\u4e2d\u88ab\u6807\u8bb0\u8fc7\u7684\u70b9\u7684\u89c4\u5219\uff0c\u9009\u51fa\u6765\u7684\u70b9\u7684\u70b9\u6570\u5fc5\u7136\u4e3a\u6700\u5927\u5339\u914d\u7684\u8fb9\u6570\u3002\u5de6\u90e8\u7684\u975e\u5339\u914d\u70b9\u5fc5\u7136\u88ab\u8bbf\u95ee\uff0c\u5219\u5fc5\u4e0d\u4f1a\u88ab\u9009\uff0c\u53f3\u90e8\u7684\u975e\u5339\u914d\u70b9\u5fc5\u4e0d\u4f1a\u88ab\u8bbf\u95ee\uff0c\u5219\u5fc5\u4e0d\u4f1a\u88ab\u9009\u3002\u800c\u7b2c\u4e09\u6761\u6027\u8d28\u51b3\u5b9a\u4e86\uff0c\u5bf9\u4e8e\u4e00\u7ec4\u5339\u914d\u70b9\uff0c\u4f1a\u9009\u62e9\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u70b9\u3002\u6545\u800c\u9009\u51fa\u7684\u70b9\u7684\u70b9\u6570\u7b49\u4e8e\u6700\u5927\u5339\u914d\u7684\u8fb9\u6570\u3002\n\n\u5176\u6b21\u9700\u8981\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff1a\u4fdd\u8bc1\u8fd9\u4e9b\u70b9\u8986\u76d6\u4e86\u6240\u6709\u7684\u8fb9\u3002\u5177\u4f53\u53ef\u4ee5\u5206\u4e3a\u56db\u7c7b\uff1a\n* \u5de6\u90e8\u4e3a\u975e\u5339\u914d\u70b9\uff0c\u53f3\u90e8\u4e3a\u975e\u5339\u914d\u70b9\u3002\u6027\u8d28\u4e8c\u5df2\u7ecf\u8ba8\u8bba\u8fc7\uff0c\u4e0d\u53ef\u80fd\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u51fa\u73b0\u5c31\u4e0d\u6ee1\u8db3\u6700\u5927\u5339\u914d\u7684\u524d\u63d0\u3002\n* \u5de6\u90e8\u4e3a\u5339\u914d\u70b9\uff0c\u53f3\u90e8\u4e3a\u975e\u5339\u914d\u70b9\u3002\u540c\u7406\u6027\u8d28\u4e8c\uff0c\u8def\u5f84\u7c7b\u4f3c\uff0c\u4f1a\u51fa\u73b0\u589e\u5e7f\u8def\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5de6\u90e8\u7684\u5339\u914d\u70b9\u4e00\u5b9a\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5fc5\u7136\u88ab\u9009\u3002\n* \u5de6\u90e8\u4e3a\u5339\u914d\u70b9\uff0c\u53f3\u90e8\u4e3a\u5339\u914d\u70b9\u3002\u4e00\u5bf9\u5339\u914d\u70b9\u4e2d\u5fc5\u9009\u4e00\u4e2a\u3002\n* \u5de6\u90e8\u4e3a\u975e\u5339\u914d\u70b9\uff0c\u53f3\u90e8\u4e3a\u5339\u914d\u70b9\u3002\u8fd9\u6761\u8fb9\u4e3a\u975e\u5339\u914d\u8fb9\uff0c\u800c\u8d77\u70b9\u5c31\u662f\u4ece\u5de6\u90e8\u7684\u975e\u5339\u914d\u70b9\u70b9\u5f00\u59cb\uff0c\u90a3\u4e48\u53f3\u90e8\u7684\u8fd9\u4e2a\u70b9\u5fc5\u7136\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5fc5\u7136\u88ab\u9009\u3002\n\n\u6700\u540e\u5728\u786e\u4fdd\u8fd9\u662f\u6700\u5c0f\u7684\u65b9\u6848\uff1a\u53cd\u8bc1\u6cd5\uff0c\u5c11\u9009\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u81f3\u5c11\u6709\u4e00\u6761\u5339\u914d\u8fb9\u4f1a\u88ab\u4e0d\u9009\uff0c\u4e0d\u6ee1\u8db3\u70b9\u8986\u76d6\u7684\u5b9a\u4e49\uff0c\u77db\u76fe\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u81f3\u5c11\u6bcf\u4e00\u6761\u5339\u914d\u8fb9\u90fd\u9700\u8981\u9009\u4e00\u4e2a\u70b9\u3002\n\n\u5982\u4e0a\uff0c\u8bc1\u6bd5\u3002\n\n\u9898\u76ee\u6765\u6e90\uff1a[COCI 2019/2020 Contest #6](https://hsin.hr/coci/archive/2019_2020/) T4.  [Skandi](https://hsin.hr/coci/archive/2019_2020/contest6_tasks.pdf)\n# \u9898\u76ee\u5927\u610f\n\u7ed9\u5b9a\u4e00\u4e2a $n\\times m$ \u7684\u77e9\u9635\uff0c\u5176\u4e2d\u7684\u767d\u8272\u70b9\u4e3a $0$ \uff0c \u9ed1\u8272\u70b9\u4e3a $1$ \u3002\u9ed1\u8272\u70b9\u53ef\u4ee5\u5f80\u4e0b\u4e00\u76f4\u6269\u5c55\u5230\u5e95\u90e8\uff0c\u628a\u767d\u8272\u70b9\u53d8\u6210\u84dd\u8272\u70b9\uff0c\u76f4\u5230\u9047\u5230\u9ed1\u8272\u70b9\u4e3a\u6b62\u3002\u540c\u7406\uff0c\u4e5f\u53ef\u5411\u53f3\u6269\u5c55\u3002\u95ee\u6574\u4e2a\u77e9\u9635\u7ecf\u8fc7\u6700\u5c0f\u591a\u5c11\u6b21\u6269\u5c55\u624d\u80fd\u6269\u5c55\u4e3a\u6574\u4e2a\u77e9\u9635\u5230\u4e0d\u5b58\u5728\u767d\u8272\uff0c\u5e76\u6253\u5370\u51fa\u6bcf\u6b21\u6269\u5c55\u662f\u4ece\u54ea\u4e2a\u70b9\u5f00\u59cb\u7684\uff0c\u5e76\u6253\u5370\u51fa\u6269\u5c55\u65b9\u5411\u3002\u9898\u76ee\u6ee1\u8db3\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u4e00\u5b9a\u4e3a\u9ed1\u8272\u70b9\u3002\n# \u601d\u8def\n\u4e00\u9053\u5efa\u6a21\u9898\u3002\n\n\u4e00\u4e2a\u767d\u8272\u70b9\u53d8\u4e3a\u84dd\u8272\u70b9\u53ea\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4ece\u5b83\u4e0a\u65b9\u6216\u5de6\u65b9\u7684\u9ed1\u8272\u70b9\u6269\u5c55\u800c\u6765\uff0c\u4e14\u53ea\u9700\u8981\u4e00\u4e2a\u70b9\u6269\u5c55\u5373\u53ef\u3002\u53ef\u4ee5\u8003\u8651\u5230\u6700\u5c0f\u70b9\u8986\u76d6\u95ee\u9898\u3002\n\n\u7531\u4e8e\u5bf9\u4e8e\u4e00\u4e2a\u9ed1\u8272\u70b9\u6765\u8bf4\uff0c\u5b83\u53ef\u4ee5\u5f80\u53f3\u6216\u5f80\u4e0b\u6269\u5c55\u3002\u90a3\u4e48\u5b83\u5c31\u6709\u4e24\u4e2a\u8eab\u4efd\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u70b9\u62e5\u6709\u4e24\u4e2a\u7f16\u53f7\u3002\u4e00\u4e2a\u7f16\u53f7\u4e3a\u628a\u6574\u4e2a\u77e9\u9635\u62c9\u6210\u4e00\u6761\u94fe\u7684\u987a\u5e8f\uff0c\u53e6\u4e00\u4e2a\u7f16\u53f7\u4e3a\u524d\u4e00\u4e2a\u7f16\u53f7 $+n\\times m$ \uff0c\u8fd9\u6837\u4e0d\u4f1a\u53d1\u751f\u51b2\u7a81\u3002\u83b7\u5f97\u7f16\u53f7\u7684\u51fd\u6570\uff1a\n```cpp\nint GetHash(int i, int j) {\n\treturn (i - 1) * m + j;\n}\n```\n\u90a3\u4e48\u4e0d\u96be\u53d1\u73b0\u4e00\u4e2a\u767d\u8272\u70b9\uff0c\u4e0e\u5176\u76f8\u5173\u7684\u662f\u4e00\u4e2a\u7f16\u53f7 $\\leqslant n\\times m$ \u7684\u70b9\uff0c\u548c\u4e00\u4e2a\u7f16\u53f7 $>n\\times m$ \u7684\u70b9\u3002\u628a\u8fd9\u4e24\u4e2a\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u662f\u4e00\u5f20\u4e8c\u5206\u56fe\u3002\n\n\u95ee\u9898\u5c31\u8f6c\u6362\u4e3a\u627e\u8fd9\u5f20\u56fe\u7684\u6700\u5c0f\u70b9\u8986\u76d6\u95ee\u9898\u3002\u4f7f\u7528 $Dinic$ \uff0c\u5728\u6839\u636e\u4e0a\u8ff0 $K\u00f6nig$ \u5b9a\u7406\u6784\u9020\u5373\u53ef\u3002\n\n\u8fb9\u6570\u4e3a\u767d\u70b9\u7684\u4e2a\u6570\uff0c\u5de6\u90e8\u70b9\u4e3a\u9ed1\u70b9\u7684\u4e2a\u6570\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nm\\sqrt{nm})$ \uff0c\u5373 $O(n^{\\frac{3}{2}}m^{\\frac{3}{2}})$  \uff0c\u672c\u9898\u7684 $n$ \uff0c $m$ \u5747\u5c0f\u4e8e $500$ \uff0c\u5927\u6982\u80fd\u591f\u5728 $1s$ \u5185\u6c42\u51fa\u7b54\u6848\u3002\n# C++\u4ee3\u7801\n```cpp\n#include <queue>\n#include <cstdio>\n#include <vector>\n#include <cstring>\n#include <iostream>\nusing namespace std;\n#define INF 0x3f3f3f3f\nconst int MAXN = 1e6 + 5;\nconst int MAXM = 5e2 + 5;\nstruct Node {\n\tint to, val, rev;//\u4f9d\u6b21\u4e3a\uff1a\u4e0b\u4e00\u4e2a\u70b9\uff0c\u8fb9\u7684\u5bb9\u91cf\uff0c\u76f8\u53cd\u7684\u8fb9\u7684\u7f16\u53f7\n\tNode() {}\n\tNode(int T, int V, int R) {\n\t\tto = T;\n\t\tval = V;\n\t\trev = R;\n\t}\n};\nvector<Node> v[MAXN];//\u7528vector\u5b58\u56fe\u7684\u7656\u597d...\nint dn[MAXN], rt[MAXN];//\u9884\u5904\u7406\u767d\u8272\u70b9\u53ef\u4ee5\u53f3\u90a3\u4e24\u4e2a\u70b9\u6269\u5c55\u800c\u6765\nqueue<int> q;\nint de[MAXN], be[MAXN];\nint twin[MAXN];\nbool vis[MAXN];\nint n, m, s, t;\nint arr[MAXM][MAXM];\nbool bfs() {//\u5c06\u6b8b\u91cf\u7f51\u7edc\u5206\u5c42\n\tbool flag = 0;\n\tmemset(de, 0, sizeof(de));\n\twhile(!q.empty())\n\t\tq.pop();\n\tq.push(s);\n\tde[s] = 1; be[s] = 0;\n\twhile(!q.empty()) {\n\t\tint now = q.front();\n\t\tq.pop();\n\t\tint SIZ = v[now].size();\n\t\tfor(int i = 0; i < SIZ; i++) {\n\t\t\tint next = v[now][i].to;\n\t\t\tif(v[now][i].val && !de[next]) {\n\t\t\t\tq.push(next);\n\t\t\t\tbe[next] = 0;\n\t\t\t\tde[next] = de[now] + 1;\n\t\t\t\tif(next == t)\n\t\t\t\t\tflag = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}\nint dfs(int now, int flow) {//\u6cbf\u7740\u589e\u5e7f\u8def\u589e\u5e7f\n\tif(now == t || !flow)\n\t\treturn flow;\n\tint i, surp = flow;\n\tint SIZ = v[now].size();\n\tfor(i = be[now]; i < SIZ && surp; i++) {\n\t\tbe[now] = i;\n\t\tint next = v[now][i].to;\n\t\tif(v[now][i].val && de[next] == de[now] + 1) {\n\t\t\tint maxnow = dfs(next, min(surp, v[now][i].val));\n\t\t\tif(!maxnow)\n\t\t\t\tde[next] = 0;\n\t\t\tv[now][i].val -= maxnow;\n\t\t\tv[next][v[now][i].rev].val += maxnow;\n\t\t\tsurp -= maxnow;\n\t\t}\n\t}\n\treturn flow - surp;\n}\nint Dinic() {//\u7f51\u7edc\u6700\u5927\u6d41\uff0c\u4ea6\u53ef\u7528\u4e8e\u4e8c\u5206\u56fe\u5339\u914d\n\tint res = 0;\n\tint flow = 0;\n\twhile(bfs())\n\t\twhile(flow = dfs(s, INF))\n\t\t\tres += flow;\n\treturn res;\n}\nint GetHash(int i, int j) {//\u83b7\u53d6\u70b9\u7684\u7f16\u53f7\n\treturn (i - 1) * m + j;\n}\nvoid Down(int now, int i, int j) {//\u9ed1\u70b9\u5411\u4e0b\u6269\u5c55\uff0c\u6bcf\u4e2a\u767d\u70b9\u6700\u591a\u904d\u5386\u5230\u4e00\u6b21\n\tif(i != now)\n\t\tdn[GetHash(now, j)] = GetHash(i, j);\n\tif(arr[now + 1][j] == 2)\n\t\tDown(now + 1, i, j);\n} \nvoid Right(int now, int i, int j) { //\u9ed1\u70b9\u5411\u53f3\u6269\u5c55\uff0c\u6bcf\u4e2a\u767d\u70b9\u6700\u591a\u904d\u5386\u5230\u4e00\u6b21\n\tif(j != now)\n\t\trt[GetHash(i, now)] = GetHash(i, j) + n * m;\n\tif(arr[i][now + 1] == 2)\n\t\tRight(now + 1, i, j);\n}\nvoid GetMin(int now) {//dfs\u6c42\u6784\u9020\u65b9\u5f0f\n\tvis[now] = true;\n\tint SIZ = v[now].size();\n\tfor(int i = 0; i < SIZ; i++) {\n\t\tint next = v[now][i].to;\n\t\tif(vis[next] || !v[now][i].val)\n\t\t\tcontinue;\n\t\tGetMin(next);\n\t}\n}\nint main() {\n\tscanf(\"%d %d\", &n, &m);\n\ts = 0; t = 2 * n * m + 1;//\u6e90\u70b9\u548c\u6c47\u70b9\u521d\u59cb\u5316\n\tchar ch;\n\tfor(int i = 1; i <= n; i++) {\n\t\tfor(int j = 1; j <= m; j++) {\n\t\t\tcin >> ch;\n\t\t\tif(ch == '1')\n\t\t\t\tarr[i][j] = 1;\n\t\t\telse\n\t\t\t\tarr[i][j] = 2;\n\t\t}\n\t}\n\tfor(int i = 1; i <= n; i++) {\n\t\tfor(int j = 1; j <= m; j++) {\n\t\t\tif(i == 1 && j == 1)\n\t\t\t\tcontinue;\n\t\t\tif(arr[i][j] == 1) {//\u5411\u53f3\u6216\u5411\u4e0b\u6269\u5c55\uff0c\u4e00\u4e2a\u767d\u70b9\u4f1a\u88ab\u8bbf\u95ee2\u6b21\n\t\t\t\tDown(i, i, j);\n\t\t\t\tRight(j, i, j);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 1; i <= n; i++)\n\t\tfor(int j = 1; j <= m; j++) {\n\t\t\tif(arr[i][j] == 1) {//\u6e90\u70b9\u5230\u5de6\u90e8\u70b9\uff0c\u6c47\u70b9\u5230\u53f3\u90e8\u70b9\u8fde\u8fb9\n\t\t\t\tint now = GetHash(i, j);\n\t\t\t\tint idnow = v[now].size();\n\t\t\t\tint ids = v[s].size();\n\t\t\t\tv[s].push_back(Node(now, 1, idnow));\n\t\t\t\tv[now].push_back(Node(s, 0, ids));\n\t\t\t\tnow = GetHash(i, j) + n * m;\n\t\t\t\tidnow = v[now].size();\n\t\t\t\tint idt = v[t].size();\n\t\t\t\tv[now].push_back(Node(t, 1, idt));\n\t\t\t\tv[t].push_back(Node(now, 0, idnow));\n\t\t\t}\n\t\t}\n\tfor(int i = 1; i <= n; i++) {\n\t\tfor(int j = 1; j <= m; j++) {\n\t\t\tif(i == 1 && j == 1)\n\t\t\t\tcontinue;\n\t\t\tif(arr[i][j] == 1)\n\t\t\t\tcontinue;\n\t\t\tint A = dn[GetHash(i, j)];//\u5de6\u90e8\u70b9\u5230\u53f3\u90e8\u70b9\u8fde\u8fb9\n\t\t\tint B = rt[GetHash(i, j)];\n\t\t\tint idA = v[A].size();\n\t\t\tint idB = v[B].size();\n\t\t\tv[A].push_back(Node(B, 1, idB));\n\t\t\tv[B].push_back(Node(A, 0, idA));\n\t\t}\n\t}\n\tprintf(\"%d\\n\", Dinic());\n\tGetMin(s);\n\tfor(int i = 1; i <= n; i++) {\n\t\tfor(int j = 1; j <= m; j++) {\n\t\t\tif(arr[i][j] == 2)\n\t\t\t\tcontinue;\n\t\t\tif(!vis[GetHash(i, j)])//\u6253\u5370\u7b54\u6848\n\t\t\t\tprintf(\"%d %d DOLJE\\n\", i, j);\n\t\t\tif(vis[GetHash(i, j) + n * m])\n\t\t\t\tprintf(\"%d %d DESNO\\n\", i, j);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1614126130,
        "uid": 254733,
        "name": "Night_Bringer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6220 [COCI 2020.3]Skandi"
    },
    {
        "content": "\u5efa\u8bae\u8bc4\u7d2b\u3002\n\n# \u7b80\u8ff0\u9898\u610f\n\n\u6709\u4e00\u4e2a $n$ \u884c $m$ \u5217\u7684\u77e9\u9635\uff0c\u6bcf\u4e2a\u683c\u5b50\u4e0a\u6709\u6570\u5b57 $0$ \u6216 $1$\uff0c\u6bcf\u4e00\u4e2a $1$ \u53ef\u4ee5\u9009\u62e9\u53f3\u8fb9\u548c\u4e0b\u9762\u4efb\u610f\u4e00\u4e2a\u65b9\u5411\u6269\u5c55\u628a $0$ \u53d8\u6210 $1$\uff0c\u76f4\u5230\u78b0\u5230\u53e6\u4e00\u4e2a $1$\u3002\u95ee\u628a\u6240\u6709 $0$ \u53d8\u6210 $1$ \u7684\u65b9\u6848\u6570\u3002\n\n# \u5206\u6790\n\n\u8003\u8651\u6bcf\u4e00\u4e2a $1$ \u600e\u4e48\u6269\u5c55\u5f88\u9ebb\u70e6\uff0c\u53ef\u4ee5\u8003\u8651\u6bcf\u4e00\u4e2a $0$ \u88ab\u54ea\u4e2a $1$ \u4ece\u54ea\u4e2a\u65b9\u5411\u6269\u5c55\u3002\n\n\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u5f88\u5bb9\u6613\u6c42\uff0c\u5e76\u4e14\u6bcf\u4e00\u4e2a $0$ \u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u53ef\u4ee5\u8054\u60f3\u5230\u4e8c\u5206\u56fe\u3002\n\n\u4ee5\u4e24\u4e2a\u65b9\u5411\u4e3a\u754c\u9650\u5efa\u7acb\u4e8c\u5206\u56fe\uff0c\u8bbe $i$ \u70b9\u5411\u4e0b\uff0c$j$ \u70b9\u5411\u53f3\u90fd\u53ef\u4ee5\u6269\u5c55\u5230\u67d0\u4e2a $0$\uff0c\u90a3\u4e48\u6211\u4eec\u628a $i$ \u653e\u5de6\u8fb9\uff0c$j$ \u653e\u53f3\u8fb9\uff0c\u5e76\u4e14\u7ed9\u8fd9\u4e24\u4e2a\u70b9\u8fde\u4e00\u6761\u8fb9\u3002\n\n\u8fd9\u6837\uff0c\u53ea\u8981\u6bcf\u6761\u8fb9\u7684\u4e24\u4e2a\u70b9\u4efb\u610f\u9009\u4e00\u4e2a\uff0c\u6240\u6709\u7684 $0$ \u5c31\u90fd\u53ef\u4ee5\u53d8\u6210\u4e00\u3002\n\n\u90a3\u4e48\u5c31\u8f6c\u5316\u4e3a\u6c42\u6700\u5c0f\u8986\u76d6\u4e86\u3002\n\n# \u7ec6\u8282\n\n\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff0c\u6bcf\u4e00\u4e2a\u70b9\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u5bf9\u8868\u793a\u5f88\u9ebb\u70e6\uff0c\u53ef\u4ee5\u4ece\u5de6\u5230\u53f3\u3001\u4ece\u4e0a\u5230\u4e0b\u7ed9\u6bcf\u4e2a\u70b9\u7f16\u53f7\uff0c\u90a3\u4e48 $(i,j)$ \u7684\u53f7\u7801\u5c31\u662f $ i \\times (m-1) + j$\u3002\n\n\u8fd9\u91cc\u6211\u7528\u7684\u662f\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u5176\u4e2d\u7684 $vis$ \u6570\u7ec4\u5728\u6bcf\u6b21\u6e05\u96f6\u65f6\u5f88\u6162\uff0c\u53ef\u4ee5\u6bcf\u6b21\u5339\u914d\u65f6\u8bbe\u4e00\u4e2a\u53c2\u6570 $now$\u3002\u5982\u679c\u904d\u5386\u5230\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48 $vis\\gets now$\uff0c\u5224\u65ad\u6709\u6ca1\u6709\u6765\u8fc7\u4e5f\u5c31\u770b $vis$ \u662f\u5426\u7b49\u4e8e $now$\u3002\n\n\u6c42\u6700\u5c0f\u8986\u76d6\u7684\u65b9\u6848\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5de6\u8fb9\u6ca1\u6709\u914d\u5bf9\u7684\u70b9\u9009\u51fa\u6765\u3002\u5de6\u8fb9\u6709\u914d\u5bf9\u7684\u70b9\u548c\u53f3\u8fb9\u94fe\u63a5\u4e86\u5de6\u8fb9\u6ca1\u6709\u914d\u5bf9\u7684\u70b9\u7684\u70b9\u5c31\u662f\u7b54\u6848\u3002\u5de6\u8fb9\u7684\u70b9\u5c31\u5f80\u4e0b\u8d70\uff0c\u53f3\u8fb9\u7684\u70b9\u6709\u5f80\u53f3\u8d70\u3002\n```cpp\n#include <iostream>\n#include <vector>\n#include <cstring>\nusing namespace std;\nconst int kMaxN=501;\nbool mp[kMaxN][kMaxN];\nvector<int>v[kMaxN*kMaxN];\nint n,m,now,ans,vis[kMaxN*kMaxN],visr[kMaxN*kMaxN],match[kMaxN*kMaxN],num;\nbool ma[kMaxN*kMaxN],choose[kMaxN*kMaxN];//\u5206\u522b\u8868\u793a\u5de6\u8fb9\u7684\u70b9\u662f\u5426\u914d\u5bf9\u4e0a\u3001\u4e8c\u5206\u56fe\u4e2d\u662f\u5426\u6709\u8fd9\u4e2a\u70b9\nint Id(int x,int y)//\u5f97\u5230\u6570\u5bf9\u7684\u7f16\u53f7\n{\n  return (x-1)*m+y;\n}\nbool Dfs(int x)//\u5308\u7259\u5229\u7b97\u6cd5\n{\n  if(vis[x]==now)return false;\n  vis[x]=now;\n  for(int i=0;i<v[x].size();i++)\n  {\n    visr[v[x][i]]=now;\n    if(!match[v[x][i]]||Dfs(match[v[x][i]]))\n    {\n      match[v[x][i]]=x;\n      return true;\n    }\n  }\n  return false;\n}\nvoid Match()\n{\n  for(int i=1;i<=Id(n,m);i++)\n  {\n    now=i;\n    if(Dfs(i))\n    {\n      ans++;\n      ma[i]=true;\n    }\n  }\n}\nint main()\n{\ncin>>n>>m;\nfor(int i=1;i<=n;i++)\n{\n  for(int j=1;j<=m;j++)\n  {\n    char c;\n    cin>>c;\n    mp[i][j]=c-'0';\n  }\n}\nfor(int i=1;i<=n;i++)\n{\n  for(int j=1;j<=m;j++)\n  {\n    if(!mp[i][j])\n    {\n      int x,y;\n      for(int k=i;k>=1;k--)//\u6c42\u6bcf\u4e2a 0 \u88ab\u54ea\u4e2a\u70b9\u6269\u5c55\n      {\n        if(mp[k][j])\n        {\n          x=Id(k,j);\n          break;\n        }\n      }\n      for(int k=j;j>=1;k--)\n      {\n        if(mp[i][k])\n        {\n          y=Id(i,k);\n          break;\n        }\n      }\n      v[x].push_back(y);//\u94fe\u63a5\u5b83\u4eec\n      choose[x]=choose[y]=true;//\u6807\u8bb0\u8fd9\u4e24\u4e2a\u70b9\u5728\u4e8c\u5206\u56fe\u91cc\u9762\n    }\n  }\n}\nMatch();\ncout<<ans<<\"\\n\";\n++now;\nfor(int i=1;i<=Id(n,m);i++)\n{\n  if(!ma[i])\n  {\n    Dfs(i);\n  }\n}\nfor(int i=1;i<=n;i++)\n{\n  for(int j=1;j<=m;j++)\n  {\n    int id=Id(i,j);\n    if(choose[id]&&vis[id]!=now)//\u5de6\u8fb9\u6709\u914d\u5bf9\n    {\n      cout<<i<<\" \"<<j<<\" \"<<\"DOLJE\\n\";\n    }\n    if(choose[id]&&visr[id]==now)//\u53f3\u8fb9\u88ab\u5de6\u8fb9\u6ca1\u6709\u914d\u5bf9\u7684\u70b9\u94fe\u63a5\n    {\n      cout<<i<<\" \"<<j<<\" \"<<\"DESNO\\n\";\n    }\n  }\n}\nreturn 0;\n}\n```\n# \u5173\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u5308\u7259\u5229\u7b97\u6cd5\u7684\u672c\u8eab\u6700\u52a3\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $ O(n\\times(n+m))$\uff0c$n$ \u4e3a\u70b9\u6570\uff0c$m$ \u4e3a\u8fb9\u6570\uff0c\u5728\u5b8c\u5168\u56fe\u4e2d\u5219\u4e3a $ O(n^3)$\u3002\u4f46\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6b21\u914d\u5bf9\u7684\u65f6\u5019\u4e0d\u4f1a\u5168\u90e8\u628a\u70b9\u904d\u5386\u4e00\u904d\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u8dd1\u4e0d\u6ee1\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u4e0a\u9762\u6211\u4eec\u8981\u8fd9\u4e48\u5904\u7406 $vis$ \u6570\u7ec4\uff0c~~\u4e0d\u7136\u65f6\u95f4\u590d\u6742\u5ea6\u5361\u6ee1~~\u3002",
        "postTime": 1644386852,
        "uid": 210719,
        "name": "Violet___Evergarden",
        "ccfLevel": 4,
        "title": "P6620"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Coros-Trusds/p/16361957.html)\n\n\u5173\u952e\u662f\u8f93\u51fa\u65b9\u6848\u3002\n\n# \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $n\\times m$ \u7684\u77e9\u9635\uff0c\u5176\u4e2d\u7684\u767d\u8272\u70b9\u4e3a $0$\uff0c\u9ed1\u8272\u70b9\u4e3a $1$\u3002\u9ed1\u8272\u70b9\u53ef\u4ee5\u5f80\u4e0b\u4e00\u76f4\u6269\u5c55\u5230\u5e95\u90e8\uff0c\u628a\u767d\u8272\u70b9\u53d8\u6210\u84dd\u8272\u70b9\uff0c\u76f4\u5230\u9047\u5230\u9ed1\u8272\u70b9\u4e3a\u6b62\u3002\u540c\u7406\uff0c\u4e5f\u53ef\u5411\u53f3\u6269\u5c55\u3002\n\n\u95ee\u6574\u4e2a\u77e9\u9635\u7ecf\u8fc7\u6700\u5c0f\u591a\u5c11\u6b21\u6269\u5c55\u624d\u80fd\u6269\u5c55\u4e3a\u6574\u4e2a\u77e9\u9635\u5230\u4e0d\u5b58\u5728\u767d\u8272\uff0c\u5e76\u6253\u5370\u51fa\u6bcf\u6b21\u6269\u5c55\u662f\u4ece\u54ea\u4e2a\u70b9\u5f00\u59cb\u7684\uff0c\u5e76\u6253\u5370\u51fa\u6269\u5c55\u65b9\u5411\u3002\u9898\u76ee\u6ee1\u8db3\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u4e00\u5b9a\u4e3a\u9ed1\u8272\u70b9\u3002\n\n# \u9898\u76ee\u5206\u6790\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u767d\u8272\u70b9\uff0c\u4e00\u5b9a\u662f\u7531\u4e24\u4e2a\u65b9\u5411\u8d70\u8fc7\u6765\u7684\u8ba9\u5b83\u53d8\u6210\u84dd\u8272\u7684\uff0c\u6545\u4e0d\u59a8\u5bf9\u4ee5\u8fd9\u4e24\u4e2a\u65b9\u5411\u5efa\u7acb\u4e8c\u5206\u56fe\u3002\u628a\u5411\u4e0b\u7684\u653e\u5728\u5de6\u8fb9\uff0c\u5411\u53f3\u8d70\u7684\u653e\u5728\u53f3\u8fb9\uff0c\u627e\u5230\u6700\u5148\u5f00\u59cb\u7684\u4e24\u4e2a\u9ed1\u70b9\u8fdb\u884c\u8fde\u8fb9\u3002\u8fd9\u4e24\u4e2a\u9ed1\u70b9\u4efb\u9009\u4e00\u4e2a\u5c31\u53ef\u4ee5\u4f7f\u5f97\u8fd9\u4e2a\u767d\u8272\u70b9\u53d8\u6210\u84dd\u8272\uff0c\u6240\u4ee5\u9898\u76ee\u8f6c\u5316\u4e3a\u6c42\u6700\u5c0f\u70b9\u8986\u76d6\u95ee\u9898\u3002\n\n\u6839\u636e $\\rm K\u00f6nig$ \u5b9a\u7406\u53ef\u77e5\uff08[link](https://www.matrix67.com/blog/archives/116/)\uff09\u6700\u5c0f\u70b9\u8986\u76d6\u6570\u5c31\u7b49\u4e8e\u6700\u5927\u5339\u914d\u6570\u3002\u56e0\u6b64\u6211\u4eec\u901a\u8fc7\u5308\u7259\u5229\u7b97\u6cd5\u6c42\u51fa\u6700\u5927\u5339\u914d\u6570\u5373\u53ef\u3002\n\n\u800c\u8f83\u9ebb\u70e6\u7684\u662f\u8f93\u51fa\u65b9\u6848\u3002\n\n----\n\n\u5148\u6c42\u51fa\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\uff0c\u8bb0\u5f55\u4e0b\u5de6\u90e8\u70b9\u4e2d\u5728\u5339\u914d\u4e2d\u7684\u70b9\u3002\u968f\u540e\uff0c\u4ece\u6bcf\u4e00\u4e2a **\u672a** \u5728\u5339\u914d\u4e2d\u7684\u5de6\u90e8\u70b9\u51fa\u53d1\uff0c\u6309\u7167\u672a\u5339\u914d\u8fb9 $\\to$ \u5339\u914d\u8fb9 $\\to$ \u672a\u5339\u914d\u8fb9 $\\to\\cdots\\to$ \u5339\u914d\u8fb9\u7684\u987a\u5e8f\u904d\u5386\u3002\u6ce8\u610f\u5230\u6700\u540e\u4e00\u6761\u8fb9\u5fc5\u4e3a\u5339\u914d\u8fb9\uff0c\u5426\u5219\u8fd9\u5c31\u662f\u4e00\u6761\u589e\u5e7f\u8def\u4e86\u3002\u90a3\u4e48\u8bb0\u5f55\u9014\u4e2d\u7ecf\u8fc7\u7684\u5de6\u90e8\u70b9\u548c\u53f3\u90e8\u70b9\u3002\n\n\u6700\u540e\u7b54\u6848\u5c31\u662f\u672a\u88ab\u6807\u8bb0\u7684\u5de6\u90e8\u70b9\u548c\u88ab\u6807\u8bb0\u7684\u53f3\u90e8\u70b9\u3002\n\n# \u4ee3\u7801\n\n```cpp\n// Problem: P6220 [COCI 2020.3]Skandi\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/P6220\n// Memory Limit: 250 MB\n// Time Limit: 5000 ms\n// Date:2022-06-09 20:27\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n#include <iostream>\n#include <cstdio>\n#include <climits>//need \"INT_MAX\",\"INT_MIN\"\n#include <cstring>//need \"memset\"\n#include <numeric>\n#include <algorithm>\n#include <cmath>\n#define enter putchar(10)\n#define debug(c,que) std::cerr << #c << \" = \" << c << que\n#define cek(c) puts(c)\n#define blow(arr,st,ed,w) for(register int i = (st);i <= (ed); ++ i) std::cout << arr[i] << w;\n#define speed_up() std::ios::sync_with_stdio(false),std::cin.tie(0),std::cout.tie(0)\n#define mst(a,k) memset(a,k,sizeof(a))\n#define stop return(0)\nconst int mod = 1e9 + 7;\ninline int MOD(int x) {\n\tif(x < 0) x += mod;\n\treturn x % mod;\n}\nnamespace Newstd {\n\tinline int read() {\n\t\tint ret = 0,f = 0;char ch = getchar();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif(ch == '-') f = 1;\n\t\t\tch = getchar();\n\t\t}\n\t\twhile (isdigit(ch)) {\n\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\tch = getchar();\n\t\t}\n\t\treturn f ? -ret : ret;\n\t}\n\tinline double double_read() {\n\t\tlong long ret = 0,w = 1,aft = 0,dot = 0,num = 0;\n\t\tchar ch = getchar();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif (ch == '-') w = -1;\n\t\t\tch = getchar();\n\t\t}\n\t\twhile (isdigit(ch) || ch == '.') {\n\t\t\tif (ch == '.') {\n\t\t\t\tdot = 1;\n\t\t\t} else if (dot == 0) {\n\t\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\t} else {\n\t\t\t\taft = (aft << 3) + (aft << 1) + ch - '0';\n\t\t\t\tnum ++;\n\t\t\t}\n\t\t\tch = getchar();\n\t\t}\n\t\treturn (pow(0.1,num) * aft + ret) * w;\n\t}\n\tinline void write(int x) {\n\t\tif(x < 0) {\n\t\t\tputchar('-');\n\t\t\tx = -x;\n\t\t}\n\t\tif(x > 9) write(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\nusing namespace Newstd;\n\nconst int N = 505,M = 505;\nstruct Graph {\n\tint v,nxt;\n} gra[N * M];\nint head[N * M],matr[N * M],visl[N * M],visr[N * M];\nbool mat[N * M],maps[N][M];\nint n,m,idx,nowidx;\ninline int getid(int x,int y) {\n\treturn (x - 1) * m + y;\n}\ninline void add(int u,int v) {\n\tgra[++ idx] = (Graph){v,head[u]},head[u] = idx;\n}\ninline bool dfs(int now) {\n\tvisl[now] = nowidx;\n\tfor (register int i = head[now];i;i = gra[i].nxt) {\n\t\tint v = gra[i].v;\n\t\tif (visr[v] != nowidx) {\n\t\t\tvisr[v] = nowidx;\n\t\t\tif (!matr[v] || dfs(matr[v])) {\n\t\t\t\tmatr[v] = now;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main(void) {\n\tscanf(\"%d%d\",&n,&m);\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tchar s[M];\n\t\tscanf(\"%s\",s + 1);\n\t\tfor (register int j = 1;j <= m; ++ j) {\n\t\t\tmaps[i][j] = s[j] - '0';\n\t\t}\n\t}\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tfor (register int j = 1;j <= m; ++ j) {\n\t\t\tif (!maps[i][j]) {\n\t\t\t\tint u,v;\n\t\t\t\tfor (register int k = i;k; -- k) {\n\t\t\t\t\tif (maps[k][j]) {\n\t\t\t\t\t\tu = getid(k,j);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (register int k = j;k; -- k) {\n\t\t\t\t\tif (maps[i][k]) {\n\t\t\t\t\t\tv = getid(i,k);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tadd(u,v);\n\t\t\t}\n\t\t}\n\t}\n\tint ans(0);\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tfor (register int j = 1;j <= m; ++ j) {\n\t\t\tnowidx ++;\n\t\t\tif (dfs(getid(i,j))) {\n\t\t\t\tans ++;\n\t\t\t\tmat[getid(i,j)] = true;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\tnowidx ++;\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tfor (register int j = 1;j <= m; ++ j) {\n\t\t\tif (!mat[getid(i,j)]) {\n\t\t\t\tdfs(getid(i,j));\n\t\t\t}\n\t\t}\n\t}\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tfor (register int j = 1;j <= m; ++ j) {\n\t\t\tif (visl[getid(i,j)] != nowidx) {\n\t\t\t\tprintf(\"%d %d DOLJE\\n\",i,j);\n\t\t\t}\n\t\t\tif (visr[getid(i,j)] == nowidx) {\n\t\t\t\tprintf(\"%d %d DESNO\\n\",i,j);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1654789769,
        "uid": 430409,
        "name": "Coros_Trusds",
        "ccfLevel": 6,
        "title": "P6220 [COCI 2020.3]Skandi"
    }
]