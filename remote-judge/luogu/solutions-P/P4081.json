[
    {
        "content": "\u5e7f\u4e49SAM \u5982\u679c\u4f60\u8fd8\u4e0d\u4f1aSAM\u5f3a\u70c8\u5efa\u8bae\u770b\u770bhiho\u4e0a\u7684\u89e3\u91cahttp://www.hihocoder.com/problemset/problem/1441\n\n\u76f4\u63a5\u5bf9\u539f\u4e32\u505a\u4e00\u4e2a\u5e7f\u4e49SAM\uff0c\u5e7f\u4e49SAM\u5c31\u662f\u80fd\u505a\u5230\u591a\u5b57\u7b26\u4e32\u5339\u914d\u3002\u548c\u666e\u901aSAM\u533a\u522b\u5c31\u662f\u5728\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u628a\u8d77\u59cb\u4f4d\u7f6elast=1\u5c31\u884c\u4e86\u3002\n\n\u5173\u4e8e\u5982\u4f55\u904d\u5386\u5b50\u4e32\uff1a\u5efa\u597d\u5e7f\u4e49SAM\u4e4b\u540e\uff0c\u6bcf\u4e00\u4e2a\u6a21\u677f\u4e32\u90fd\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u7136\u540e\u6309\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u53ef\u4ee5\u6bcf\u6b21\u90fd\u8dd1\u5230\u8fd9\u4e2a\u6a21\u677f\u4e32\u7684\u5f00\u5934\u5230\u73b0\u5728\u4f4d\u7f6e\u6240\u4ee3\u8868\u7684\u8282\u70b9\uff0c\u7136\u540e\u5b83\u7684\u8fd9\u4e2a\u524d\u7f00\u7684\u6240\u6709\u5b50\u4e32\u90fd\u662f\u5b83parent\u6811\u4e0a\u7684\u7236\u4eb2$$Update(x = ch[x][s[++tot]], i);$$Update\u51fd\u6570\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6a21\u677f\u4e32\u628a\u5b83\u5728SAM\u4e0a\u7684\u6240\u6709\u5b50\u4e32\u4ee3\u8868\u7684\u8282\u70b9\u6807\u8bb0\u4e00\u4e0b\uff0c\u5982\u679c\u66fe\u7ecf\u6ca1\u6709\u51fa\u73b0\u8fc7\u5219\u6807\u8bb0\u4e3a\u5f53\u524d\u5b50\u4e32\u7684\u7f16\u53f7,\u5982\u679c\u66fe\u7ecf\u6807\u8bb0\u8fc7\u5f97\u8bf4\u660e\u5b50\u4e32\u51fa\u73b0\u5728\u4e0d\u540c\u7684\u4e24\u4e2a\u4e32\u4e2d\u5373\u4e0d\u6ee1\u8db3\u201c\u72ec\u7279\u6027\u201d\u91cd\u7f6e\u4e3a-1$$if (vis[x] != 0) vis[x] = -1;$$else$$vis[x] = y;$$\n\n\u6784\u9020\u5b8c\u6210\u540e\uff0c\u6700\u540e\u7b54\u6848\u5c31\u662f\u7edf\u8ba1SAM\u4e0a\u6bcf\u4e2a\u8282\u70b9\u96c6\u5408\u5bf9\u5e94\u7684\u4e32\u6c42\u548c\uff0c\u8282\u70b9\u96c6\u5408\u5bf9\u5e94\u4e32\u7684\u4e2a\u6570\u5c31\u662fmxl[i]-mxl[pre[i]]\uff0c\u7b54\u6848\u5c31\u662f$$sum[vis[i]]+=mxl[i]-mxl[pre[i]]$$\n\n\u611f\u8c22bztMinamoto\u6307\u5bfc\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\ninline void read(register int &x){\n\tx = 0; register int f = 1;\n\tregister char c = getchar();\n\twhile (!(c >= '0' && c <= '9')){ if (c == '-') f = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9'){ x = x * 10 + c - '0'; c = getchar(); }\n\tx *= f;\n}\nconst int N = (int)2e5 + 10;\nint s[N];\nint len[N], n, tot;\nstruct SAM{\n\tint ch[N][26], pre[N], mxl[N], vis[N], last, cnt, ans[N];\n\tSAM(){ last = cnt = 1; }\n\tinline void Insert(register int c){\n\t\tregister int p = last, np = ++cnt; last = np;\n\t\tmxl[np] = mxl[p] + 1;\n\t\tfor (; p && !ch[p][c]; p = pre[p]) ch[p][c] = np;\n\t\tif (!p){ pre[np] = 1; return; }\n\t\tregister int q = ch[p][c], nq = ++cnt;\n\t\tif (mxl[q] == mxl[p] + 1) { pre[np] = q; --cnt; return; }\n\t\tmemcpy(ch[nq], ch[q], sizeof(ch[q]));\n\t\tmxl[nq] = mxl[p] + 1; pre[nq] = pre[q]; pre[q] = pre[np] = nq;\n\t\tfor (; ch[p][c] == q; p = pre[p]) ch[p][c] = nq;\n\t}\n\tinline void Update(register int x, register int y){\n\t\tfor (; x && vis[x] != y && vis[x] != -1; x = pre[x]){\n\t\t\tif (vis[x] != 0) vis[x] = -1;\n\t\t\telse vis[x] = y;\n\t\t}\n\t}\n\tinline void Solve(){\n\t\ttot = 0;\n\t\t//\u904d\u5386\u6240\u6709\u4e32\n\t\tfor (register int i = 1; i <= n; i++)\n\t\tfor (register int j = 1, x = 1; j <= len[i]; j++)\n\t\t\tUpdate(x = ch[x][s[++tot]], i);\n\t\tfor (register int i = 1; i <= cnt; i++) if (vis[i] != -1){\n\t\t\tregister int x = vis[i];\n\t\t\tans[x] += mxl[i] - mxl[pre[i]];\n\t\t}\n\t\tfor (register int i = 1; i <= n; i++) printf(\"%d\\n\", ans[i]);\n\t}\n}sam;\nint main(){\n\tread(n);\n\tfor (register int i = 1; i <= n; i++){\n\t\tregister char c; sam.last = 1;//\u65b0\u4e32last\u91cd\u7f6e\u4e3a1\n\t\twhile ((c = getchar()) != '\\n' && c != EOF){\n\t\t\tc -= 'a'; ++len[i]; s[++tot] = c;\n\t\t\tsam.Insert(c);\n\t\t}\n\t}\n\tsam.Solve();\n\treturn 0;\n}\n\n\n```\n\n\u9644\u4e0a\u81ea\u5df1\u753b\u7684SAM\u56fe\uff0c\u5747\u7531graphviz\u751f\u6210\uff0c\u6709\u81ea\u52a8\u751f\u6210\u56fe\u5f62\u4ee3\u7801\uff0c\u535a\u5ba2\u4e2d\u6709(https://www.luogu.org/blog/yy1695651/yong-graphviz-hua-sam)\n\n![\u6837\u4f8b1](https://cdn.luogu.com.cn/upload/pic/47591.png)\n\n![\u6837\u4f8b2](https://cdn.luogu.com.cn/upload/pic/47592.png)\n\nSevenk Love Oimaster(https://www.luogu.org/problemnew/show/SP8093)\n\n\u6709\u5174\u8da3\u518d\u770b\u770b\u8fd9\u9053\u9898\uff0c\u5dee\u4e0d\u591a\u505a\u6cd5",
        "postTime": 1546223597,
        "uid": 76226,
        "name": "yy1695651",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4081 \u3010[USACO17DEC]Standing Out from the Herd\u3011"
    },
    {
        "content": " http://www.elijahqi.win/2018/02/08/bzoj5137/ \u200e\n http://blog.csdn.net/elijahqi/article/details/79289548\n\n\u9898\u76ee\u63cf\u8ff0\n\nJust like humans, cows often appreciate feeling they are unique in some way. Since Farmer John's cows all come from the same breed and look quite similar, they want to measure uniqueness in their names.\n\nEach cow's name has some number of substrings. For example, \"amy\" has substrings {a, m, y, am, my, amy}, and \"tommy\" would have the following substrings: {t, o, m, y, to, om, mm, my, tom, omm, mmy, tomm, ommy, tommy}.\n\nA cow name has a \"uniqueness factor\" which is the number of substrings of that name not shared with any other cow. For example, If amy was in a herd by herself, her uniqueness factor would be 6. If tommy was in a herd by himself, his uniqueness factor would be 14. If they were in a herd together, however, amy's uniqueness factor would be 3 and tommy's would be 11.\n\nGiven a herd of cows, please determine each cow's uniqueness factor.\n\n\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u300c\u72ec\u7279\u503c\u300d\u4e3a\u53ea\u5c5e\u4e8e\u8be5\u5b57\u7b26\u4e32\u7684\u672c\u8d28\u4e0d\u540c\u7684\u975e\u7a7a\u5b50\u4e32\u7684\u4e2a\u6570\u3002\u5982 \"amy\" \u4e0e \u201ctommy\u201d \u4e24\u4e2a\u4e32\uff0c\u53ea\u5c5e\u4e8e \"amy\" \u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e3a \"a\" \"am\" \"amy\" \u5171 3 \u4e2a\u3002\u53ea\u5c5e\u4e8e \"tommy\" \u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e3a \"t\" \"to\" \"tom\" \"tomm\" \"tommy\" \"o\" \"om\" \"omm\" \"ommy\" \"mm\" \"mmy\" \u5171 11 \u4e2a\u3002 \u6240\u4ee5 \"amy\" \u7684\u300c\u72ec\u7279\u503c\u300d\u4e3a 3 \uff0c\"tommy\" \u7684\u300c\u72ec\u7279\u503c\u300d\u4e3a 11 \u3002\n\n\u7ed9\u5b9a N (\n\nN\u2264105N \\leq 10^5\n\nN\u2264105 ) \u4e2a\u5b57\u7b26\u96c6\u4e3a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u6240\u6709\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u548c\u5c0f\u4e8e\n\n10510^5\n\n105 \uff0c\u6c42\u51fa\u6bcf\u4e2a\u5b57\u7b26\u4e32\u300c\u72ec\u7279\u503c\u300d\u3002\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\nThe first line of input will contain\n\nNN\n\nN (\n\n1\u2264N\u22641051 \\le N \\le 10^5\n\n1\u2264N\u2264105 ). The following\n\nNN\n\nN lines will each contain the name of a cow in the herd. Each name will contain only lowercase characters a-z. The total length of all names will not exceed\n\n10510^5\n\n105 .\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\nOutput\n\nNN\n\nN numbers, one per line, describing the uniqueness factor of each cow.\n\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\n\u8f93\u5165\u6837\u4f8b#1\uff1a \u590d\u5236\n\n3\namy\ntommy\nbessie\n\n\u8f93\u51fa\u6837\u4f8b#1\uff1a \u590d\u5236\n\n3\n11\n19\n\n\u849f\u84bb\u6211\u4e0d\u4f1asam\u53ea\u80fd\u7528\u5b66\u4e60leoly \u7528sa\u6765\u641e\n\n\u90a3\u4e48\u9488\u5bf9\u6bcf\u4e2a\u4e32\u9996\u5148\u628a\u4ed6\u4eec\u8fde\u8d77\u6765 \u7136\u540e\u52a0\u4e0a\u5206\u9694\u7b26 \u8dd1\u540e\u7f00\u6570\u7ec4 \u7136\u540e\u5f97\u5230\u4e86\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5e8f\u7684\u8fd9\u4e2a\u4e1c\u897f \u90a3\u4e48\u6211\u60f3\u8d77\u4e86\u4e4b\u524d\u4e00\u9053\u9898 \u8981\u6c42\u6c42\u81ea\u5df1\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u6709\u591a\u5c11\u4e2a \u53ef\u4ee5\u60f3\u5230\u76f4\u63a5n^2-height\u5373\u53ef \u8fd9\u4e2a\u5176\u5b9e\u53ef\u4ee5\u540c\u7406 \u5728\u81ea\u5df1\u4e2d\u51fa\u73b0\u7684\u53ea\u80fd\u7b97\u4e00\u6b21 \u5982\u679c\u5728\u5176\u4ed6\u4e32\u4e2d\u4e5f\u51fa\u73b0\u4e86\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f0 \u90a3\u4e48\u6211\u540c\u7406 \u76f4\u63a5\u51cf\u53bb \u5c31\u53ef\u4ee5\u4e86 \u4f46\u662f\u8fd8\u8981\u6ce8\u610f\u4e00\u70b9 \u5c31\u662f \u9488\u5bf9 \u6211\u4e00\u4e2a\u5b57\u4e32\u5982\u679c\u4ed6\u7684\u540e\u7f00\u5728sa\u4e2d\u662f\u4e00\u4e32\u8fde\u7eed\u7684\u533a\u95f4\u6bd4\u5982l~r\u90a3\u4e48\u6211\u4eec\u8fd9\u513f\u505a\u4e4b\u540e\u522b\u5fd8\u4e86\u52a0\u4e0alcp(l-1,r+1)  \u56e0\u4e3a\u6211\u76f8\u5f53\u4e8e\u9488\u5bf9\u6bcf\u4e2a\u540e\u7f00\u90fd\u51cf\u6389\u4e86\u4ed6\u4eec\u7684lcp \u90a3\u4e48\u662f\u4e0d\u662f\u51cf\u591a\u4e86 \u5982\u679c\u4e0a\u4e0e\u4e0b\u5339\u914d\u662faaa aaaaa \u90a3\u4e48\u662f\u4e0d\u662f\u8fd9\u4e2a\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u8fd8\u6709\u4e00\u4e2aaaa\u800c\u4e0d\u662f\u4e24\u4e2a \u6240\u4ee5\u8981\u52a0\u56de\u6765\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define N 220000\n#define ll long long\nusing namespace std;\nint n,m,s[N],cnt[N],rk[N<<1],rk1[N],height[N],sa[N],pos[N],tmp[N],r[N];\nchar s1[N];ll ans[N];\nint main(){\n\tfreopen(\"bzoj5137.in\",\"r\",stdin);\n\tscanf(\"%d\",&m);int st=26,k=0;\n\tfor (int i=1;i<=m;++i){\n\t\tscanf(\"%s\",s1+1);int nn=strlen(s1+1);\n\t\tfor (int j=1;j<=nn;++j) s[++n]=s1[j]-'a'+1,pos[n]=i;r[i]=n;s[++n]=++st;\n\t}\n\tfor (int i=1;i<=n;++i) cnt[s[i]]=1;\n\tfor (int i=1;i<=st;++i) cnt[i]+=cnt[i-1];\n\tfor (int i=1;i<=n;++i) rk[i]=cnt[s[i]];\n\tfor (int p=1;k!=n;p<<=1,st=k){\n\t\tfor (int i=1;i<=st;++i) cnt[i]=0;\n\t\tfor (int i=1;i<=n;++i) ++cnt[rk[i+p]];\n\t\tfor (int i=1;i<=st;++i) cnt[i]+=cnt[i-1];\n\t\tfor (int i=n;i;--i) tmp[cnt[rk[i+p]]--]=i;\n\t\tfor (int i=1;i<=st;++i)  cnt[i]=0;\n\t\tfor (int i=1;i<=n;++i) ++cnt[rk[i]];\n\t\tfor (int i=1;i<=st;++i) cnt[i]+=cnt[i-1];\n\t\tfor (int i=n;i;--i) sa[cnt[rk[tmp[i]]]--]=tmp[i];\n\t\tmemcpy(rk1,rk,sizeof(rk)>>1);rk[sa[1]]=k=1;\n\t\tfor (int i=2;i<=n;++i){\n\t\t\tif (rk1[sa[i]]!=rk1[sa[i-1]]||rk1[sa[i]+p]!=rk1[sa[i-1]+p]) ++k;\n\t\t\trk[sa[i]]=k;\n\t\t}\n\t}k=0;int mn=0;\n\tfor (int i=1;i<=n;++i) {\n\t\tif (rk[i]==1) continue;\n\t\tk=k==0?0:k-1; \n\t\twhile(s[i+k]==s[sa[rk[i]-1]+k]) ++k;height[rk[i]]=k;\n\t}\n\tfor (int i=1;i<=n;++i){\n\t\tif (s[sa[i-1]]>=27) break;int x=pos[sa[i]],y=pos[sa[i-1]];\n\t\tmn=min(mn,height[i]);ans[x]+=r[x]-sa[i]+1-height[i];\n\t\tif (x!=y) ans[y]-=height[i],ans[y]+=mn,mn=height[i];\n\t}\n\tfor (int i=1;i<=m;++i) printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n\n```",
        "postTime": 1518072361,
        "uid": 5037,
        "name": "elijahqi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4081 \u3010[USACO17DEC]Standing Out from the Herd\u3011"
    },
    {
        "content": "\u6700\u8fd1\u521a\u5b66\u4e86\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u672c\u849f\u84bb\u5bf9\u8fd9\u9053\u9898\u6ca1\u4ec0\u4e48\u5f88\u5de7\u5999\u7684\u7b97\u6cd5\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u5f88\u66b4\u529bDP\u7684\u505a\u6cd5\u3002**\u6574\u4e2a\u7b97\u6cd5\u4e0d\u7528parent\u6811\uff0c\u4ec5\u5728SAM\u7684DAG\uff08\u6709\u5411\u65e0\u73af\u56fe\uff09\u4e2d\u52a8\u6001\u89c4\u5212\u3002**\n\n\n\n------------------------------------\n\n# \u7b97\u6cd5\u601d\u8def\uff1a\n\n## \u7b2c\u4e00\u6b65\n\n\u5c06\u6bcf\u4e2a\u5b57\u7b26\u4e32\u8fde\u8d77\u6765\uff0c\u5e76\u7528\u4e0d\u540c\u7684\u5206\u9694\u7b26Ui\u9694\u5f00\uff0c\u6784\u9020\u4e00\u4e2a\u540e\u7f00\u81ea\u52a8\u673a\u3002\n\n### SS = S(1) + U(1) + S(2) + U(2) + S(3) + U(3) + ... + S(n) + U(n)\n\n**1. \u7531\u4e8e\u6211\u4eec\u8981\u5bf9\u6bcf\u4e00\u4e2aS(i)\u7684\u5b50\u4e32\u8fdb\u884c\u5206\u6790\uff0c\u6240\u4ee5\u9996\u5148\u8003\u8651\u5982\u4f55\u5c06\u6240\u6709\u7684\u5b50\u4e32\u8868\u793a\u51fa\u6765\u3002**\n\n\u8003\u8651\u4ece\u8282\u70b91\uff08\u5373\u540e\u7f00\u81ea\u52a8\u673a\u7684\u6839\u8282\u70b9\uff0c\u8868\u793a\u7a7a\u4e32\uff0c**\u4e0b\u9762\u7528root\u8868\u793a**\uff09\u5f00\u59cb\u7684\u4e00\u6761\u8def\u5f84\uff0c\u663e\u7136\u5176\u7ecf\u8fc7\u6240\u6709\u8f6c\u79fb\u5c31\u5f62\u6210\u4e86\u603b\u4e32SS\u4e00\u4e2a\u5b50\u4e32\u3002\n\n\u7136\u540e\u6211\u4eec\u5bf9\u8fd9\u6761\u8def\u5f84\u52a0\u4e00\u4e9b\u9650\u5236\uff0c\u8981\u6c42\u8fd9\u6761\u8def\u5f84\u5fc5\u987b\u4ee5\u67d0\u4e2aU(i)\u7ed3\u675f\uff0c\u4e14\u8def\u5f84\u4e0d\u7ecf\u8fc7U(j) ( j != i )\uff0c\u5373\u4ee5\u4e00\u4e2a\u5206\u9694\u7b26U\u7ed3\u5c3e\u4e14\u4e0d\u7ecf\u8fc7\u5176\u4ed6\u5206\u9694\u7b26\uff0c\u6613\u77e5\uff0c\u6240\u6709\u8fd9\u6837\u7684\u8def\u5f84\u90fd\u662fS(i)\u7684\u540e\u7f00\uff0c\u800cSi\u7684\u6240\u6709\u540e\u7f00\u5fc5\u7136\u90fd\u662f\u8fd9\u6837\u7684\u8def\u5f84\uff0c\u540e\u7f00\u4e0e\u8def\u5f84\u4e00\u4e00\u5bf9\u5e94\uff0c**\u79f0\u4e4b\u4e3a\u201c\u540e\u7f00\u8def\u5f84\u201d**\u3002\n\n## \u4e0b\u6587\u6240\u8bf4\u7684\u201c\u8def\u5f84\u201d\u5747\u6307 \u201c\u9664\u4e86\u7ed3\u675f\u70b9\u4e0d\u7ecf\u8fc7\u4efb\u4f55\u5206\u9694\u7b26\u201d \u7684\u4eceroot\u5f00\u59cb\u7684\u5728\u540e\u7f00\u81ea\u52a8\u673a\u4e0a\u7684\u8def\u5f84\uff01\uff01\uff01\u4e00\u5b9a\u6ce8\u610f\uff01\uff01\n\n\u6240\u4ee5S(i)\u7684\u6240\u6709\u5b50\u4e32\u53ef\u4ee5\u901a\u8fc7\u5b83\u7684\u540e\u7f00\u7684\u524d\u7f00\u6765\u8868\u793a\uff0c\u5728\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\uff0c\u5b50\u4e32\u5c31\u662f\u540e\u7f00\u8def\u5f84\u7684\u4e00\u90e8\u5206\uff08\u540c\u6837\u4ee5root\u5f00\u5934\uff0c\u4f46\u662f\u7ed3\u675f\u70b9\u4e0d\u540c\u7684\u8def\u5f84\uff09\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u627e\u5230\u4e86S(i)\u7684\u6240\u6709\u5b50\u4e32\u7684\u8868\u793a\u65b9\u6cd5\uff0c\u4e4b\u540e\u5c31\u662f\u7528\u52a8\u6001\u89c4\u5212\u7684\u65b9\u5f0f\u5bf9S(1~n)\u7684\u5b50\u4e32\u8fdb\u884c\u64cd\u4f5c\u3002\n\n**2. \u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u5b50\u4e32\u662f\u4e0d\u516c\u5171\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u516c\u5171\u5b50\u4e32\u7684\u6027\u8d28**\n\n\u6211\u4eec\u79f0\u521a\u624d\u627e\u5230\u7684\u540e\u7f00\u8def\u5f84\u4e3apath(i)\u3002\n\n\u6839\u636e\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u518d\u627e\u5230\u4e00\u4e2a\u4ee5U(j)\u4e3a\u7ed3\u5c3e\u7684\u540e\u7f00\u8def\u5f84path(j)\uff0c\u5982\u679cpath(i)\u4e0epath(j)\u6709\u4e00\u90e8\u5206\u524d\u7f00\u662f\u91cd\u5408\u7684\uff0c\u90a3\u4e48\u8fd9\u4e00\u90e8\u5206\u5c31\u662fS(i)\u4e0eS(j)\u7684\u516c\u5171\u5b50\u4e32\u3002\n\n**\u7531\u4e8e\u4e0a\u8ff0\u6211\u4eec\u8003\u8651\u7684\u5bf9\u7b54\u6848\u6709\u8d21\u732e\u7684\u8def\u5f84\u4ec5\u662f\u6700\u591a\u53ea\u5728\u7ed3\u5c3e\u5904\u6709\u4e00\u4e2a\u5206\u9694\u7b26U\u7684\u8def\u5f84\uff0c\u56e0\u6b64\u5728\u4e0b\u4e00\u6b65\u7684DP\u4e2d\uff0c\u70b9fro\u5982\u679c\u6709\u4e00\u6761\u8868\u793a\u5206\u9694\u7b26U\u7684\u8fb9\u8fde\u5411\u70b9to\uff08\u8bbe\u8fd9\u6761\u8fb9\u662f\u4ecefro\u6307\u5411to\u7684\uff09\uff0c\u90a3\u4e48\u5f53\u524d\u5c31\u4e0d\u518d\u5bf9to\u8fdb\u884c\u64cd\u4f5c\uff08\u4f46\u662fto\u4ecd\u6709\u53ef\u80fd\u88ab\u522b\u7684\u4e0d\u662f\u5206\u9694\u7b26\u7684\u8fb9\u66f4\u65b0\u5230\uff09\u3002**\n\n\n## \u7b2c\u4e8c\u6b65\n\n \u6109\u5feb\u5730DP\n\n\n### \u6574\u4e2aDP\u8fc7\u7a0b\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5\uff0c\u5c31\u53eb\u5b83\u4eecDP1\uff0cDP2\uff0cDP3\u5427QWQ\n\n\n### \uff081\uff09DP1\uff08\u5b9e\u73b0\u65b9\u5f0f\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22\uff09\u2014\u2014\u2014\u2014 \u9884\u5904\u7406\u5408\u6cd5\u8282\u70b9\n\nOK\u6570\u7ec4\u6709\u4e09\u4e2a\u503c\uff1a\n\nOK[x]==0 : \u70b9x\u6ca1\u6709\u88ab\u904d\u5386\u8fc7\uff1b\n\nOK[x]==1 : **\u4ece\u70b9x\u51fa\u53d1\u7684\u6240\u6709\u8def\u5f84**\u53ea\u80fd\u4ee5\u540c\u4e00\u4e2a\u5206\u9694\u7b26U\u4e3a\u7ed3\u5c3e\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c**\u4ee5x\u4e3a\u7ed3\u5c3e\u7684\u6240\u6709\u8def\u5f84**\u90fd\u662f\u4e0d\u516c\u5171\u5b50\u4e32\u3002\n\nOK[x]==2 : \u4e0eOK[x]==1\u76f8\u53cd\u3002**\u4ecex\u51fa\u53d1\u7684\u6240\u6709\u8def\u5f84**\u4e2d\uff0c\u7ed3\u675f\u5b57\u7b26\u4e0d\u90fd\u662f\u540c\u4e00\u4e2a\u5206\u9694\u7b26\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c**\u4ee5x\u4e3a\u7ed3\u5c3e\u7684\u6240\u6709\u8def\u5f84**\u90fd\u88ab\u81f3\u5c11\u4e24\u4e2aS\u5305\u542b\u3002\n\n\u6211\u4eec\u7528ID[x]\u6765\u8868\u793a\u5f53\u524d\u70b9x\u6240\u80fd\u8fbe\u5230\u7684U\u662f\u54ea\u4e2a\uff0c\u5373\u4ee5x\u4e3a\u7ed3\u5c3e\u7684\u6240\u6709\u8def\u5f84\u90fd\u662fS(ID[x])\u7684\u5b50\u4e32\u3002\n\n\u901a\u8fc7\u8bb0\u5fc6\u5316\u641c\u7d22\u5b8c\u6210OK\u4e0eID\u7684\u66f4\u65b0\uff08\u6700\u7ec8OK==2\u7684\u70b9\u7684ID\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff09\uff1a\n\n\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n\u4e00. \u5f53\u524d\u8fb9\u4e0d\u662fU\n\n1. DP\u4e0b\u4e00\u4e2a\u70b9\u5e76\u5224\u65ad\u4e0b\u4e2a\u70b9OK\u662f\u5426\u4e3a2\uff0c\u82e5\u662f\uff0c\u5219\u5f53\u524d\u70b9\u4e5f\u4e3a2\uff1b\n\nelse 2. \u5982\u679c\u5982\u679c\u5f53\u524d\u70b9ID\u672a\u88ab\u66f4\u65b0\uff08\u521d\u503c\u4e3a-1\uff09\uff0c\u5219\u7528**\u4e0b\u4e00\u4e2a\u70b9\u7684ID**\uff08\u80fd\u5230\u8fbe\u7684\u5206\u9694\u7b26\u7f16\u53f7\uff09\u66f4\u65b0ID\uff1b\n\nelse 3. \u5982\u679c\u5f53\u524d\u70b9\u7684ID\u5df2\u88ab\u66f4\u65b0\u8fc7\uff0c\u76f4\u63a5\u5224\u65ad\uff1b\n\n\u4e8c. \u5f53\u524d\u8fb9\u662fU\uff0c\u5219\u4e0d\u7ee7\u7eedDP\uff1b\u5982\u679cOK[x]\u5df2\u7ecf\u4e3a2\uff0c\u4e5f\u4e0d\u7528\u518d\u66f4\u65b0ID\u4e86\uff08\u8be6\u89c1\u4ee3\u7801\uff09\n\n1. \u5982\u679c\u5f53\u524d\u70b9ID\u672a\u88ab\u66f4\u65b0\uff08\u521d\u503c\u4e3a-1\uff09\uff0c\u5219\u7528**\u5f53\u524d\u8fb9**\u8868\u793a\u7684\u5206\u9694\u7b26\u7f16\u53f7\u66f4\u65b0ID\uff1b\n\nelse 2. \u5982\u679c\u5f53\u524d\u70b9\u7684ID\u5df2\u88ab\u66f4\u65b0\u8fc7\uff0c\u76f4\u63a5\u5224\u65ad\uff1b\n\n\n```cpp\nint DP1(int x)\n{\n\tif(OK[x]) return OK[x];\n\tfor(map<int,int> ::iterator i=mp[x].begin();i!=mp[x].end();++i)\n\t{\n\t\tif(i->first<26)\n\t\t{\n\t\t\tif(DP1(i->second)==2||OK[x]==2) OK[x]=2;\n\t\t\telse if(ID[x]==-1) ID[x]=ID[i->second];\n\t\t\telse if(ID[x]!=ID[i->second]) OK[x]=2;\n\t\t}\n\t\telse if(OK[x]!=2)\n\t\t{\n\t\t\tif(ID[x]==-1) ID[x]=i->first;\n\t\t\telse if(ID[x]!=i->first) OK[x]=2;\n\t\t}\n\t}\n\tif(OK[x]) return 2;\n\treturn OK[x]=1;\n}\n```\n### \uff082\uff09DP2\uff08\u5b9e\u73b0\u65b9\u5f0f\uff1a\u62d3\u6251\u6392\u5e8f\uff09\u2014\u2014\u2014\u2014 \u9884\u5904\u7406\u65b9\u6848\u6570\n\n\u8fd9\u4e00\u9636\u6bb5\u6211\u4eec\u6765\u66f4\u65b0T\u6570\u7ec4\uff0cT[x]\u8868\u793a\u4eceroot\u5230x\u7684\u4e0d\u540c\u8def\u5f84\u6709\u591a\u5c11\u6761\uff0c\u5f88\u7b80\u5355\uff1a\n\n```cpp\nvoid DP2()\n{\n\tfor(int i=1;i<=cnt;++i)\n\t{\n\t\tfor(map<int,int> ::iterator j=mp[i].begin();j!=mp[i].end();++j)\n\t\t{\n\t\t\t++IN[j->second];\n\t\t}\n\t}\n\tQ[++tail]=1;\n\twhile(tail>=head)\n\t{\n\t\tint q=Q[head++];\n\t\tfor(map<int,int> ::iterator i=mp[q].begin();i!=mp[q].end();++i)\n\t\t{\n\t\t\tif(!(--IN[i->second])) Q[++tail]=i->second;\n\t\t}\n\t}\n\tT[1]=1;\n\tfor(int i=1;i<=tail;++i)\n\t{\n\t\tfor(map<int,int> ::iterator j=mp[Q[i]].begin();j!=mp[Q[i]].end();++j)if(j->first<26)\n\t\t{\n\t\t\tT[j->second]+=T[Q[i]];\n\t\t}\n\t}\n}\n```\n### \uff083\uff09DP3\uff08\u5b9e\u73b0\u65b9\u5f0f\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22\uff09\u2014\u2014\u2014\u2014 \u7edf\u8ba1\u7b54\u6848\n\nAns[x]\u8868\u793aS(x)\u7684\u4e0d\u516c\u5171\u5b50\u4e32\u6570\u91cf\u3002\n\n\u6211\u4eec\u6765\u8003\u8651\u4ee5\u67d0\u6761\u8fb9\u4e3a\u7ec8\u6b62\u8fb9\u7684\u8def\u5f84\u96c6\u5408\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff0c\n\n\u8bbe\u8fd9\u6761\u8fb9edge\u662f\u4ecefro\u6307\u5411to\u7684\uff0c\u4ee3\u8868\u5b57\u7b26\u4e3ac\uff1b\n\n1. \u5982\u679cc==U\uff0c\u90a3\u4e48edge\u5bf9\u7b54\u6848\u6ca1\u6709\u8d21\u732e\u4e14\u4e0d\u5411\u4e0b\u641c\u7d22\uff1b\n\n2. \u5982\u679cOK[to]==2,\u90a3\u4e48edge\u5bf9\u7b54\u6848\u6ca1\u8d21\u732e\u4f46\u662f\u5411\u4e0b\u641c\u7d22\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a\u641c\u7d22\u5230\u5bf9\u7b54\u6848\u6709\u8d21\u732e\u7684\u8fb9\uff1b\n\n2. \u5982\u679cOK[to]==1,\u90a3\u5c31\u610f\u5473\u7740\u4ee5edge\u4e3a\u7ed3\u5c3e\u7684\u6240\u6709\u8def\u5f84\u90fd\u662f\u4e0d\u516c\u5171\u7684\uff0c\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff1aAns[ID[to]]+=T[fro]\uff1b\u5e76\u7ee7\u7eed\u5411\u4e0b\u641c\u7d22\u3002\n\n\u6211\u4eec\u5728\u641c\u7d22\u7684\u540c\u65f6\uff0c\u7528vis\u6765\u8868\u793a\u662f\u5426\u8bbf\u95ee\u8fc7\u5f53\u524d\u8282\u70b9\uff0c\u4ee5\u907f\u514d\u5bf9\u7b54\u6848Ans\u7684\u91cd\u590d\u8ba1\u7b97\u548c\u8d85\u65f6\u95ee\u9898\uff08\u6240\u4ee5\u624d\u53eb\u8bb0\u5fc6\u5316\u641c\u7d22\u561b\uff09\uff1b\n\n```cpp\nvoid DP3(int x)\n{\n\tif(vis[x]) return;\n\tvis[x]=true;\n\tfor(map<int,int> ::iterator i=mp[x].begin();i!=mp[x].end();++i)if((i->first)<26)\n\t{\n\t\tDP3(i->second);\n\t\tif(OK[i->second]&1) Ans[ID[i->second]-25]+=T[x];\n\t}\n}\n```\n\n\u7531\u4e8e\u4e0d\u80fd\u7528\u6570\u7ec4\u5b58SAM\u4e0a\u7684\u8fb9\uff0c\u5426\u5219MLE\uff0c\u6240\u4ee5\u7528\u4e86map\uff1b\n\n\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6n\uff1b\n\n\u672c\u4eba\u81ea\u5e26\u5927\u5e38\u6570\uff08\u96fe\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\nusing namespace std;\ntypedef long long LL;\nconst int maxn=222222;\nint N;\nchar ss[maxn];\nint read()\n{\n\tint s=0,c=getchar();\n\twhile(c<48||c>57) c=getchar();\n\twhile(c>=48&&c<=57) s=(s<<3)+(s<<1)+(c^48),c=getchar();\n\treturn s;\n}\nvoid write(LL x)\n{\n\tif(x>=10) write(x/10);\n\tputchar(x%10+48);\n}\nstruct suffixautomation\n{\n\tint cnt,lst,fa[maxn],len[maxn],OK[maxn],ID[maxn],Q[maxn],head,tail,T[maxn],IN[maxn];\n\tLL Ans[maxn];\n\tbool vis[maxn];\n\tmap<int,int> mp[maxn];\n\tsuffixautomation()\n\t{\n\t\tlst=cnt=head=1;\n\t\tmemset(ID,0xff,sizeof(ID));\n\t}\n\tvoid Insert(int c)\n\t{\n\t\tint p=lst;len[lst=++cnt]=len[p]+1;\n\t\tfor(;p&&!mp[p].count(c);p=fa[p])mp[p][c]=lst;\n\t\tif(!p){fa[lst]=1;return;}int q=mp[p][c];\n\t\tif(len[p]+1==len[q]){fa[lst]=q;return;}\n\t\tlen[++cnt]=len[p]+1;\n\t\tmp[cnt]=mp[q];fa[cnt]=fa[q];fa[q]=fa[lst]=cnt;\n\t\tfor(;mp[p].count(c) && mp[p][c]==q;p=fa[p]) mp[p][c]=cnt;\n\t}\n\tint DP1(int x)\n\t{\n\t\tif(OK[x]) return OK[x];\n\t\tfor(map<int,int> ::iterator i=mp[x].begin();i!=mp[x].end();++i)\n\t\t{\n\t\t\tif(i->first<26)\n\t\t\t{\n\t\t\t\tif(DP1(i->second)==2||OK[x]==2) OK[x]=2;\n\t\t\t\telse if(ID[x]==-1) ID[x]=ID[i->second];\n\t\t\t\telse if(ID[x]!=ID[i->second]) OK[x]=2;\n\t\t\t}\n\t\t\telse if(OK[x]!=2)\n\t\t\t{\n\t\t\t\tif(ID[x]==-1) ID[x]=i->first;\n\t\t\t\telse if(ID[x]!=i->first) OK[x]=2;\n\t\t\t}\n\t\t}\n\t\tif(OK[x]) return 2;\n\t\treturn OK[x]=1;\n\t}\n\tvoid DP2()\n\t{\n\t\tfor(int i=1;i<=cnt;++i)\n\t\t{\n\t\t\tfor(map<int,int> ::iterator j=mp[i].begin();j!=mp[i].end();++j)\n\t\t\t{\n\t\t\t\t++IN[j->second];\n\t\t\t}\n\t\t}\n\t\tQ[++tail]=1;\n\t\twhile(tail>=head)\n\t\t{\n\t\t\tint q=Q[head++];\n\t\t\tfor(map<int,int> ::iterator i=mp[q].begin();i!=mp[q].end();++i)\n\t\t\t{\n\t\t\t\tif(!(--IN[i->second])) Q[++tail]=i->second;\n\t\t\t}\n\t\t}\n\t\tT[1]=1;\n\t\tfor(int i=1;i<=tail;++i)\n\t\t{\n\t\t\tfor(map<int,int> ::iterator j=mp[Q[i]].begin();j!=mp[Q[i]].end();++j)if(j->first<26)\n\t\t\t{\n\t\t\t\tT[j->second]+=T[Q[i]];\n\t\t\t}\n\t\t}\n\t}\n\tvoid DP3(int x)\n\t{\n\t\tif(vis[x]) return;\n\t\tvis[x]=true;\n\t\tfor(map<int,int> ::iterator i=mp[x].begin();i!=mp[x].end();++i)if((i->first)<26)\n\t\t{\n\t\t\tDP3(i->second);\n\t\t\tif(OK[i->second]&1) Ans[ID[i->second]-25]+=T[x];\n\t\t}\n\t}\n\tvoid Print(){for(int i=1;i<=N;++i) write(Ans[i]),puts(\"\");}\n}sam;\nint main()\n{\n\tN=read();\n\tfor(int i=1;i<=N;++i)\n\t{\n\t\tscanf(\"%s\",ss+1);\n\t\tint len=strlen(ss+1);\n\t\tfor(int j=1;j<=len;++j) sam.Insert(ss[j]-'a');\n\t\tsam.Insert(25+i);\n\t}\n\tsam.DP1(1);\n\tsam.DP2();\n\tsam.DP3(1);\n\tsam.Print();\n\treturn 0;\n}\n```\n _\u8c22\u8c22\u9605\u89c8\uff01_ ",
        "postTime": 1551459662,
        "uid": 108033,
        "name": "LYYY",
        "ccfLevel": 7,
        "title": "P4081 [USACO17DEC]Standing Out from the Herd\u2014\u2014\u9898\u89e3"
    },
    {
        "content": "### \u524d\u8a00\n\n\u8c8c\u4f3c\u8fd9\u9898\u7684\u540e\u7f00\u6570\u7ec4\u9898\u89e3\u8f83\u5c11\uff0c\u6392\u540d\u7b2c\u4e00\u7684\u540e\u7f00\u6570\u7ec4\u9898\u89e3\u6392\u7248\u70b8\u4e86\uff0c\u6392\u7b2c\u4e8c\u7684\u592a\u590d\u6742\u4e86\uff0c\u6240\u4ee5\u6211\u6765\u8d21\u732e\u4e00\u7bc7\u9898\u89e3\u3002\n\n\n\n### \u524d\u7f6e\u77e5\u8bc6\n\n* [\u540e\u7f00\u6570\u7ec4](https://oi-wiki.org/string/sa/)\n* [\u540e\u7f00\u6570\u7ec4\u6c42\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u6570\u91cf](https://oi-wiki.org/string/sa/#_14)\n\n\n\n### \u601d\u8def\n\n\u9996\u5148\u89c2\u5bdf\u9898\u76ee\uff0c\u62bd\u8c61\u9898\u610f\u5982\u4e0b\uff1a\n\n\u7ed9\u5b9a $n$ \u4e2a\u4e32\uff0c\u6c42\u51fa\u6bcf\u4e2a\u4e32\u4e0d\u51fa\u73b0\u5728\u5176\u4ed6\u4e32\u4e2d\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u91cf\u3002\n\n\u6211\u4eec\u60f3\u8d77\u6211\u4eec\u66fe\u7ecf\u5b66\u8fc7\u7684\u540e\u7f00\u6570\u7ec4\u6c42\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u6570\u91cf\uff0c\u4e0e\u8fd9\u9898\u5341\u5206\u76f8\u4eff\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u6a21\u4eff\u8fd9\u79cd\u601d\u8def\u3002\n\n\u9996\u5148\u628a\u8fd9 $n$ \u4e2a\u4e32\u9996\u5c3e\u76f8\u63a5\uff0c\u4e2d\u95f4\u52a0\u4e0a**\u5404\u4e0d\u76f8\u540c**\u7684\u5206\u9694\u7b26\uff0c\u9632\u6b62\u51fa\u73b0\u6a2a\u8de8\u4e0d\u540c\u4e32\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\uff0c\u8fd9\u662f\u540e\u7f00\u6570\u7ec4\u5904\u7406\u591a\u4e2a\u4e32\u7684\u5e38\u7528\u601d\u8def\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u540e\u7f00\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u5b83\u6240\u5728\u539f\u4e32\u7684\u7f16\u53f7\uff0c\u8bbe $id[i]$ \u8868\u793a\u7b2c $i$ \u4e2a\u540e\u7f00\u6240\u5728\u7684\u539f\u4e32\u3002\n\n\u6309 $sa$ \u7684\u987a\u5e8f\u4ece\u524d\u5f80\u540e\u679a\u4e3e\u6bcf\u4e00\u4e2a\u540e\u7f00\uff0c\u65b0\u589e\u7684\u5b50\u4e32\u5c31\u662f\u5f53\u524d\u540e\u7f00**\u9664\u53bb\u4e0e\u4e0a\u4e00\u4e2a $id$ \u76f8\u540c\u7684\u540e\u7f00\u7684 $lcp$** \u540e\u5269\u4e0b\u7684\u524d\u7f00\u3002\u5f53\u7136\u6211\u4eec\u8fd8\u8981**\u6392\u9664\u6389\u548c\u5176\u4ed6 $id$ \u4e0d\u540c\u7684\u540e\u7f00\u7684 $lcp$**\uff0c\u4e8e\u662f\u53d6\u4e00\u4e2a $max$ \u5373\u53ef\u3002\n\n\u56e0\u6b64\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u540e\u7f00 $x$\uff0c\u5b83\u6392\u9664\u7684\u7b54\u6848\u4e3a $\\max(lcp(x, i), lcp(x, j), lcp(x, k))$\uff0c\u5176\u4e2d $i$ \u662f\u6ee1\u8db3 $rk[i] < rk[x],id[i]\\neq id[x]$ \u4e2d\u6392\u540d\u6700\u5927\u7684\u4e00\u4e2a\u540e\u7f00\uff0c$j$ \u662f\u6ee1\u8db3 $rk[j] > rk[x], id[j] \\neq id[x]$ \u4e2d\u6392\u540d\u6700\u5c0f\u7684\u540e\u7f00\uff0c$k$ \u662f\u6ee1\u8db3 $id[k] = id[x]$ \u4e2d\u6392\u540d\u6700\u5927\u7684\u540e\u7f00\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $x$ \u9884\u5904\u7406\u51fa $lcp(x, i), lcp(x, j)$\uff0c\u7136\u540e\u4eff\u7167\u540e\u7f00\u6570\u7ec4\u6c42\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u91cf\u7684\u65b9\u5f0f\uff0c\u5c06\u6bcf\u4e2a\u4e32\u7684\u521d\u59cb\u7b54\u6848\u8bbe\u4e3a $\\cfrac{len \\times (len +1)} {2}$\uff0c\u63a5\u7740\u5bf9\u4e8e\u6bcf\u4e2a $i$\uff0c\u8ba9\u5176\u5bf9\u5e94\u4e32\u7684\u7b54\u6848\u51cf\u53bb\u5e94\u6392\u9664\u7684\u7b54\u6848\u5373\u53ef\u3002\n\n\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cassert>\n#include <algorithm>\n\nusing namespace std;\n\nusing LL = long long;\nconst int N = 4e5 + 10;\n\nint n, m;\nint sa[N], rk[N], height[N], x[N], y[N], c[N];\nint id[N], len[N];\nint str[N]; char tmp[N];\nint a[N], b[N];\nint st[N][31], lg2[N];\nint string_cnt;\nLL ans[N];\n\nvoid buildSA(void) // \u540e\u7f00\u6570\u7ec4\u6a21\u677f\n{\n\tm = 400000;\n\tfor (int i = 0; i <= m; ++i) c[i] = 0;\n\tfor (int i = 1; i <= n; ++i) ++c[x[i] = str[i]];\n\tfor (int i = 1; i <= m; ++i) c[i] += c[i - 1];\n\tfor (int i = n; i >= 1; --i) sa[c[x[i]]--] = i;\n\tfor (int k = 1; k <= n; k <<= 1) {\n\t\tint num = 0;\n\t\tfor (int i = n - k + 1; i <= n; ++i)\n\t\t\ty[++num] = i;\n\t\tfor (int i = 1; i <= n; ++i)\n\t\t\tif (sa[i] > k) y[++num] = sa[i] - k;\n\t\tfor (int i = 0; i <= m; ++i) c[i] = 0;\n\t\tfor (int i = 1; i <= n; ++i) ++c[x[i]];\n\t\tfor (int i = 1; i <= m; ++i) c[i] += c[i - 1];\n\t\tfor (int i = n; i >= 1; --i) sa[c[x[y[i]]]--] = y[i], y[i] = 0;\n\t\tswap(x, y);\n\t\tx[sa[1]] = num = 1;\n\t\tfor (int i = 2; i <= n; ++i) {\n\t\t\tint ynow = sa[i] + k <= n ? y[sa[i] + k] : 0;\n\t\t\tint ynex = sa[i - 1] + k <= n ? y[sa[i - 1] + k] : 0;\n\t\t\tx[sa[i]] = (y[sa[i]] == y[sa[i - 1]] && ynow == ynex) ? num : ++num;\n\t\t}\n\t\tif (num == n) break;\n\t\tm = num;\n\t}\n\n\tfor (int i = 1; i <= n; ++i)\n\t\trk[sa[i]] = i;\n\tfor (int i = 1, k = 0; i <= n; ++i) {\n\t\tif (rk[i] == 1) continue;\n\t\tif (k) --k;\n\t\tint j = sa[rk[i] - 1];\n\t\twhile (i + k <= n && j + k <= n && str[i + k] == str[j + k])\n\t\t\t++k;\n\t\theight[rk[i]] = k;\n\t}\n}\nvoid buildST(void)// ST \u8868\u6a21\u677f\n{\n\tfor (int i = 2; i <= n; ++i)\n\t\tlg2[i] = lg2[i >> 1] + 1;\n\tfor (int i = 1; i <= n; ++i)\n\t\tst[i][0] = height[i];\n\tfor (int k = 1; k <= 30; ++k)\n\t\tfor (int i = 1; i + (1 << k - 1) <= n; ++i)\n\t\t\tst[i][k] = min(st[i][k - 1], st[i + (1 << k - 1)][k - 1]);\n}\nint queryHeight(int l, int r) // ST \u8868\u67e5\u8be2\u64cd\u4f5c\n{\n\t++l; int t = lg2[r - l + 1];\n\treturn min(st[l][t], st[r - (1 << t) + 1][t]);\n}\n\nint main(void)\n{\n\tscanf(\"%d\", &string_cnt);\n\tfor (int i = 1; i <= string_cnt; ++i) {\n\t\tscanf(\"%s\", tmp + 1);\n\t\tfor (len[i] = 1; tmp[len[i]]; ++len[i])\n\t\t\tstr[++n] = tmp[len[i]], id[n] = i;\n\t\tstr[++n] = 'z' + i;\n\t\t--len[i];\n\t\tans[i] = 1ll * len[i] * (len[i] + 1) / 2;\n\t}\n\tstr[n--] = 0;\n\n\tbuildSA();\n\tbuildST();\n\n\tint last = 0, llast = 0;\n\t// \u9884\u5904\u7406\u51fa a[x], a[x] \u8868\u793a\u672c\u6587\u4e2d\u7684 lcp(x, j)\n\tfor (int i = n; i >= 1; --i) {\n\t\tif (id[sa[i]] != id[sa[last]])\n\t\t\tllast = last;\n\t\tlast = i;\n\t\ta[i] = llast <= i ? 0 : queryHeight(i, llast);\n\t}\n\n\tfor (int i = 1; i <= n; ++i) {\n\t\tint tmp = max(a[i], height[i]); // \u5bb9\u6613\u8bc1\u660e, height[x] \u7b49\u4e8e\u672c\u6587\u4e2d\u7684 max(lcp(x, i), lcp(x, k))\n\t\tans[id[sa[i]]] -= tmp;\n\t}\n\tfor (int i = 1; i <= string_cnt; ++i)\n\t\tprintf(\"%lld\\n\", ans[i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1645508974,
        "uid": 377370,
        "name": "LroseC",
        "ccfLevel": 8,
        "title": "P4081 \u9898\u89e3"
    },
    {
        "content": "\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u697c\u4e0b\u5199$SAM$\u7684\u5199\u5f97\u8fd9\u4e48\u5947\u602a\u554a\n\n\u8fd9\u4e2a\u9898\u76ee\u770b\u5230\u591a\u6a21\u5f0f\u4e32\u53c8\u662f\u4ec0\u4e48\u672c\u8d28\u4e0d\u540c\u7684\u4e32\u4e2a\u6570\uff0c\u4e00\u773c\u5e7f\u4e49$SAM$\u554a\n\n\u7136\u540e\u8fd8\u6709\u4e00\u4e2a\u9650\u5236\uff0c\u8fd9\u4e2a\u4e32\u5fc5\u987b\u53ea\u5728\u4e00\u4e2a\u6a21\u5f0f\u4e32\u4e2d\u51fa\u73b0\u3002\n\n\u6240\u4ee5\u5728\u6dfb\u52a0\u6bcf\u4e00\u4e2a\u6a21\u5f0f\u4e32\u7684\u65f6\u5019\uff0c\u7ed9\u6bcf\u4e00\u4e2a\u8282\u70b9\u8986\u76d6\u4e0a\u8fd9\u4e00\u79cd\u6a21\u5f0f\u4e32\u7684\u6807\u8bb0\u5c31\u597d\u5566\uff01\n\n\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u88ab\u591a\u4e2a\u6a21\u5f0f\u4e32\u8986\u76d6\u8fc7\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u8bbe\u4ed6\u7684\u8986\u76d6\u6807\u8bb0$($\u4ee3\u7801\u91cc\u662f\u6570\u7ec4$\\texttt{fg})$\u4e3a$-1$\uff0c\u5426\u5219\u5c31\u4e3a\u8986\u76d6\u8fc7\u8fd9\u4e2a\u8282\u70b9\u7684\u6a21\u5f0f\u4e32\u7684\u7f16\u53f7\u3002\n\n\u7279\u522b\u5730\uff0c\u6211\u4eec\u5728\u5efa\u7acb\u5e7f\u4e49$SAM$\u7684\u65f6\u5019\uff0c\u8bbe\u865a\u8282\u70b9\u7684\u8986\u76d6\u6807\u8bb0\u4e3a$0$\u3002\n\n\u7136\u540e\u6700\u540e\u57fa\u6570\u6392\u5e8f\u4e00\u4e0b\uff0c\u4ece\u540e\u5f80\u524d\u904d\u5386\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u88ab\u8986\u76d6\uff0c\u8bf4\u660e\u4ed6\u7684$parent$\u8282\u70b9\u4e5f\u88ab\u8986\u76d6\u8fc7\u4e86\uff0c\u5c31\u7ed9\u4ed6\u7684$parent$\u6253\u6807\u8bb0\u3002\n\n\u6700\u540e\u770b\u770b\u54ea\u4e9b\u8282\u70b9\u53ea\u88ab\u8986\u76d6\u8fc7\u4e00\u6b21\uff0c\u7ed9\u7b54\u6848\u52a0\u4e0a$len[i]-len[parent[i]]$\u5c31\u597d\u5566\uff01\n\n\u8fd9\u9898\u8fd8\u662f\u5341\u5206\u5957\u8def\u7684\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nchar s[2000001];\nll ans[200001];\nstruct Suffix_Automaton{\n    int cnt,last,g[2000001][27],c[2000001],pa[2000001],id[2000001],fg[2000001],len[2000001];\n    inline void init(){\n        cnt=last=1;\n    }\n    inline void insert(int ch,int tr){\n        if (g[last][ch]&&len[last]+1==len[g[last][ch]]){\n            last=g[last][ch];\n            fg[last]=-1;//\u4e4b\u524d\u6709\u8fd9\u4e2a\u8282\u70b9\u4ea7\u751f\u4e86\u800c\u4e14\u53ef\u4ee5\u5230\u8fbe\u8bf4\u660e\u8fd9\u4e2a\u8282\u70b9\u4e00\u5b9a\u4f1a\u88ab\u88ab\u8986\u76d6\u591a\u6b21\n            return;\n        }//\u5e7f\u4e49SAM\u57fa\u672c\u64cd\u4f5c\n        int np=++cnt,pos=last;last=cnt;len[np]=len[pos]+1;\n        if (fg[cnt]==0) fg[cnt]=tr;\n        else fg[cnt]=-1;//\u6253\u4e0a\u8986\u76d6\u6807\u8bb0\n        for (;pos&&!g[pos][ch];pos=pa[pos]) g[pos][ch]=np;\n        if (!pos) pa[np]=1;\n        else{\n            int posx=g[pos][ch];\n            if (len[pos]+1==len[posx]) pa[np]=posx;\n            else{\n                int q=++cnt;\n                len[q]=len[pos]+1;\n                for (int i=0;i<26;i++) g[q][i]=g[posx][i];\n                pa[q]=pa[posx];pa[posx]=pa[np]=q;\n                for (;g[pos][ch]==posx;pos=pa[pos]) g[pos][ch]=q;\n            }\n        }\n    }\n    inline void Sort(){\n        for (int i=1;i<=cnt;i++) c[len[i]]++;\n        for (int i=1;i<=cnt;i++) c[i]+=c[i-1];\n        for (int i=1;i<=cnt;i++) id[c[len[i]]--]=i;//\u57fa\u6570\u6392\u5e8f\n        for (int i=cnt;i>=1;i--){\n            int X=id[i];\n            if (~fg[X]) ans[fg[X]]+=len[X]-len[pa[X]];//\u6ee1\u8db3\u6761\u4ef6\n            if (fg[pa[X]]==0) fg[pa[X]]=fg[X];//\u865a\u8282\u70b9\u7279\u5224\n            else if (fg[pa[X]]!=fg[X]) fg[pa[X]]=-1;//\u4e0d\u7b49\u7684\u8bdd\u5c31\u662f\u88ab\u591a\u4e2a\u4e32\u8986\u76d6\u8fc7\n        }\n    }\n}sam;\nint main(){\n    int T;\n    cin>>T;\n    sam.init();\n    char s[100005];\n    for (int ii=1;ii<=T;ii++){\n        sam.last=1;\n        scanf(\"%s\",s);\n        int Le=strlen(s);\n        for (int i=0;i<Le;i++){\n            sam.insert(s[i]-'a',ii);\n        }\n    }\n    int ANS=0;\n    sam.Sort();\n    for (int ii=1;ii<=T;ii++){\n        printf(\"%lld\\n\",ans[ii]);\n    }\n    return 0;\n}\n```",
        "postTime": 1547373688,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4081 \u3010[USACO17DEC]Standing Out from the Herd\u3011"
    },
    {
        "content": "\u5e7f\u4e49 SAM \u677f\u5b50\u9898\u3002\n\n## \u601d\u8def\n\n\u9996\u5148\u5bf9\u6240\u6709\u4e32\u5efa\u5e7f\u4e49 SAM\u3002\n\n\u672c\u9898\u548c\u6a21\u7248\u552f\u4e00\u4e0d\u540c\u7684\u4e00\u70b9\u5c31\u662f\uff0c\u6a21\u7248\u662f\u7edf\u8ba1\u603b\u5171\u6709\u591a\u5c11\u5b50\u4e32\uff0c\u591a\u4e2a\u76f8\u540c\u4e32\u867d\u7136\u4e0d\u7b97\uff0c\u4f46\u662f\u8d77\u7801\u7b97\u4e00\u4e2a\uff0c\u800c\u8fd9\u9898\u662f\u4e00\u4e2a\u90fd\u4e0d\u7b97\u3002\u3002\u3002\n\n\u8003\u8651\u5728 parent \u6811\u4e0a\u67d3\u8272\u3002\n\n\u505a\u6cd5\uff1a\n\n- \u5efa\u5e7f\u4e49 SAM\u3002\n\n- \u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u5f80\u4e0a\u8df3 father \u6307\u9488\u3002\n  \n  \u5982\u679c parent \u6811\u5f53\u524d\u8282\u70b9\u5df2\u7ecf\u67d3\u8fc7\u5176\u4ed6\u989c\u8272\u4e86\uff0c\u56e0\u4e3a\u591a\u4e2a\u76f8\u540c\u4e32\u4e00\u4e2a\u90fd\u4e0d\u7b97\uff0c\u90a3\u4e48\u5c31\u628a\u5b83\u8bbe\u4e3a\u4e0d\u53ef\u7528\u3002\n  \n  \u5426\u5219\uff0c\u5c06\u8be5\u8282\u70b9\u67d3\u8272\u4e3a\u5f53\u524d\u5b57\u7b26\u4e32\u7f16\u53f7\u3002\n\n\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u6309\u7167\u67d3\u4e0a\u7684\u989c\u8272\u7edf\u8ba1\u5373\u53ef\u3002\n\n\u5982\u679c\u5f53\u524d\u989c\u8272\u4e0d\u53ef\u7528\uff0c\u90a3\u5c31\u4e0d\u7ba1\u3002\u5426\u5219\u628a\u5bf9\u5e94\u989c\u8272\u7684\u7b54\u6848\u52a0\u4e0a\u5b50\u4e32\u6570\u91cf\u3002\n\n\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u600e\u4e48\u6c42\u5b50\u4e32\u6570\u91cf\uff0c~~\u8bf4\u660e\u4f60\u6839\u672c\u4e0d\u4f1a\u7528 SAM~~\uff0c\u8bf7\u53c2\u8003 P2408 \u548c P6139\u3002\n  \n\u8fd8\u662f\u5f88\u7b80\u5355\u7684\u3002\n\n\u5177\u4f53\u5b9e\u73b0\uff08`update` \u5373\u67d3\u8272\u51fd\u6570\uff09\uff1a\n\n```cpp\ninline void update(int x, int id)\n{\n    while (~x && ~num[x] && num[x] != id)\n    {\n        num[x] = num[x] ? -1 : id;\n        x = fa[x];\n    }\n}\ninline void solve()\n{\n    int p = 0;\n    for (int i = 1; i <= n; i++, p = 0)\n        for (char c : s[i])\n            update(p = t[p][c - 'a'], i);\n    for (int i = 0; i <= tot; i++)\n        if (~num[i] && ~fa[i])\n            ans[num[i]] += len[i] - len[fa[i]];\n    for (int i = 1; i <= n; i++)\n        cout << ans[i] << '\\n';\n}\n```\n\n## \u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N = 1e5 + 5;\nstring s[N];\nint n;\nstruct SAM\n{\n    int tot, last, fa[N << 1], len[N << 1], t[N << 1][26];\n    int num[N << 1], ans[N << 1];\n    inline SAM()\n    {\n        tot = last = 0;\n        fa[0] = -1;\n    }\n    inline void insert(char c)\n    {\n        c -= 'a';\n        int cur = ++tot;\n        len[cur] = len[last] + 1;\n        int p = last;\n        last = cur;\n        while (~p && !t[p][c])\n            t[p][c] = cur, p = fa[p];\n        if (!~p)\n        {\n            fa[cur] = 0;\n            return;\n        }\n        int x = t[p][c];\n        if (len[p] + 1 == len[x])\n            fa[cur] = x;\n        else\n        {\n            len[++tot] = len[p] + 1;\n            fa[tot] = fa[x];\n            memcpy(t[tot], t[x], sizeof(t[x]));\n            while (~p && t[p][c] == x)\n                t[p][c] = tot, p = fa[p];\n            fa[x] = fa[cur] = tot;\n        }\n    }\n    inline void update(int x, int id)\n    {\n        while (~x && ~num[x] && num[x] != id)\n        {\n            num[x] = num[x] ? -1 : id;\n            x = fa[x];\n        }\n    }\n    inline void solve()\n    {\n        int p = 0;\n        for (int i = 1; i <= n; i++, p = 0)\n            for (char c : s[i])\n                update(p = t[p][c - 'a'], i);\n        for (int i = 0; i <= tot; i++)\n            if (~num[i] && ~fa[i])\n                ans[num[i]] += len[i] - len[fa[i]];\n        for (int i = 1; i <= n; i++)\n            cout << ans[i] << '\\n';\n    }\n} sam;\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cin >> n;\n    for (int i = 1; i <= n; i++)\n    {\n        cin >> s[i];\n        sam.last = 0;\n        for (char c : s[i])\n            sam.insert(c);\n    }\n    sam.solve();\n    return 0;\n}\n```",
        "postTime": 1672255092,
        "uid": 576378,
        "name": "creation_hy",
        "ccfLevel": 5,
        "title": "P4081 \u9898\u89e3"
    },
    {
        "content": "# \u77e5\u8bc6\u70b9: \u5e7f\u4e49 SAM\n\n\u539f\u9898\u9762 [Luogu](https://www.luogu.com.cn/problem/P4081)\n\n---\n\n\u524d\u7f6e\u77e5\u8bc6\n\n\u5728\u7ebf\u6784\u9020\u5e7f\u4e49 SAM\uff0c\u63a8\u8350\uff1a[\u3010\u5b66\u4e60\u7b14\u8bb0\u3011\u5b57\u7b26\u4e32\u2014\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a - \u8fb0\u661f\u51cc](https://www.cnblogs.com/Xing-Ling/p/12038349.html)  \n\n---\n\n## \u9898\u610f\u7b80\u8ff0\n\n>\u7ed9\u5b9a $n$ \u4e2a\u4ec5\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32 $S_1\\sim S_n$\u3002  \n>\u5b9a\u4e49\u5b57\u7b26\u4e32 $S_i$ \u7684 \u300c\u72ec\u7279\u503c\u300d\u4e3a\u53ea\u5c5e\u4e8e\u8be5\u4e32\u7684\u672c\u8d28\u4e0d\u540c\u7684\u975e\u7a7a\u5b50\u4e32\u7684\u4e2a\u6570\u3002  \n>\u6c42\u5b57\u7b26\u4e32 $S_1\\sim S_n$ \u7684\u300c\u72ec\u7279\u503c\u300d\u3002  \n>$1\\le n\\le 10^5, 1\\le \\sum|S_i|\\le 10^5$\u3002  \n\n---\n\n## \u5206\u6790\u9898\u610f\n\n### \u7b97\u6cd5\u4e00\n\n\u591a\u4e32\u5b50\u4e32\u95ee\u9898\uff0c\u8003\u8651\u5e7f\u4e49 SAM\u3002\n\n\u82e5 $n$ \u8f83\u5c0f\uff0c\u76f4\u63a5\u7ef4\u62a4\u6bcf\u4e2a\u72b6\u6001 \u5305\u542b\u51e0\u4e2a\u4e32\u7684\u4fe1\u606f\u3002  \nparent \u6811\u4e0a DP \u66f4\u65b0\u7956\u5148\u4fe1\u606f\uff0c\u76f4\u63a5\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002  \n\u4f46 $n\\le 10^5$ \u7a7a\u95f4\u7206\u70b8\uff0c\u505a\u4e0d\u5f97\uff0c\u8003\u8651\u4e71\u641e\u4e00\u6ce2\u3002  \n\n---\n\n### \u7b97\u6cd5\u4e8c\n\n\u7528 string \u5b58\u5b57\u7b26\u4e32\uff0c\u5efa\u5e7f\u4e49 SAM\u3002  \n\u5728\u52a8\u6001\u5efa\u7acb SAM \u65f6\uff0c$\\operatorname{only}_i$ \u8bb0\u5f55\u6bcf\u4e2a\u72b6\u6001 $i$ \u5305\u542b\u54ea\u4e00\u4e2a\u4e32\u7684\u4fe1\u606f\u3002  \n\u82e5\u67d0\u72b6\u6001\u5305\u542b\u591a\u4e2a\u4e32\u4fe1\u606f\uff0c\u5219$\\operatorname{only}_i = - 1$\u3002  \nparent \u6811\u4e0a DP \u66f4\u65b0\u7956\u5148\u4fe1\u606f\u3002  \n\n\u5148\u8003\u8651\u4e00\u6ce2 \u65e0\u8111\u66b4\u529b\uff1a   \n\u5bf9\u4e8e $S_i$\uff0c\u679a\u4e3e\u5176\u6240\u6709\u5b50\u4e32\uff0c\u5728 SAM \u4e0a\u8dd1\u51fa\u5bf9\u5e94\u72b6\u6001 $u$\u3002  \n\u82e5\u6709 $\\operatorname{only}_u\\not = 1$\uff0c \u5bf9\u5e94\u72b6\u6001\u53ea\u7ef4\u62a4\u4e86\u4e00\u4e2a\u4e32\u7684\u4fe1\u606f\uff0c\u4e00\u5b9a\u4e3a\u8be5\u5b50\u4e32\u3002  \n\u8fd9\u6837\u7684\u5b50\u4e32\u6570\uff0c\u5373\u4e3a $S_i$ \u7684\u300c\u72ec\u7279\u503c\u300d\u3002 \n\n---\n\n\u4e0a\u8ff0\u7b97\u6cd5\u74f6\u9888\u662f\u679a\u4e3e\u5b50\u4e32\u3002\u53d1\u73b0\u524d\u7f00\u6709\u4e00\u4e9b\u597d\u6027\u8d28\uff1a  \n\n1. \u8fde\u7eed\u524d\u7f00 \u5bf9\u5e94\u72b6\u6001\u5728 SAM \u4e0a\u4e5f\u662f\u8fde\u7eed\u7684\uff0c\u5b9e\u73b0\u65f6\u76f4\u63a5\u628a\u4e32\u6254\u5230 SAM \u4e0a\u8dd1 \u5373\u5f97\u5bf9\u5e94\u72b6\u6001\u3002  \n2. \u524d\u7f00\u5bf9\u5e94\u72b6\u6001\u5230 parent \u6811\u6839\u7684\u94fe\u4e0a \u5305\u542b\u8be5\u524d\u7f00\u6240\u6709\u540e\u7f00\uff0c\u53ef\u4ee5\u5305\u542b\u6240\u6709\u5b50\u4e32\u4fe1\u606f\u3002  \n\n\u8003\u8651\u4ec5\u679a\u4e3e\u524d\u7f00\uff0c\u679a\u4e3e\u590d\u6742\u5ea6\u53d8\u4e3a\u7ebf\u6027\u3002\n\n---\n\n\u53d1\u73b0\u4e00\u4e9b\u7ed3\u8bba\uff1a  \n\n1. parent \u6811\u4e0a\u4e00\u6761\u4ece\u53f6\u5230\u6839\u7684\u94fe\uff0c\u7ef4\u62a4\u7684\u4e32\u7684\u4e2a\u6570\uff0c\u662f\u5355\u8c03\u4e0d\u51cf\u7684\u3002   \n2. \u82e5\u67d0\u72b6\u6001 $i$ \u7684 $\\operatorname{only}_i\\not = -1$\uff0c \u5219\u5bf9\u4e8e\u5176\u5b50\u6811\u4e2d\u6240\u6709\u72b6\u6001 $j$\uff0c\u6709 $\\operatorname{only}_j=\\operatorname{only}_i$\u3002\n\n\u8003\u8651\u7ef4\u62a4\u72b6\u6001 $i$ \u7684 parent \u6811\u4e0a\u8ddd\u5b83\u6700\u8fdc\u7684\uff0c$\\operatorname{only}\\not= -1$ \u7684\u7956\u5148 $\\operatorname{top}_i$\u3002  \n\u7531\u7ed3\u8bba 1\uff0c\u82e5\u67d0\u72b6\u6001 $i$ \u7684 $\\operatorname{only}_i=-1$\uff0c$\\operatorname{top}_i=0$\u3002  \n\n\u7531\u7ed3\u8bba 2\uff0c\u8dd1\u5230\u7684 $\\operatorname{only}\\not= - 1$ \u7684\u8282\u70b9\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u5728\u5176\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u90fd\u4f1a\u6709\u8d21\u732e\u3002  \n\u53ef\u9884\u5904\u7406\u5b50\u6811 $\\operatorname{len}(i)-\\operatorname{len}(\\operatorname{link}(i))$ \u4e4b\u548c $\\operatorname{sum}$\uff0c\u5373\u67d0\u5b50\u6811\u4e2d\u7684\u5b50\u4e32\u6570\u91cf\u3002  \n\n\u7edf\u8ba1\u7b54\u6848\u65f6\uff0c\u7edf\u8ba1 \u8dd1\u5230\u7684\u72b6\u6001 $u$ \u7684 $\\operatorname{sum}(\\operatorname{top}_u)$\uff0c\u4e00\u4e2a $\\operatorname{top}_u$ \u53ea\u80fd\u7edf\u8ba1\u4e00\u6b21\uff0c\u53bb\u91cd\u53ef\u7528\u6392\u5e8f\u5b9e\u73b0\u3002  \n\u8fd9\u6837\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\uff1f\u8003\u8651\u524d\u7f00\u7684\u6027\u8d28 2 \u611f\u6027\u7406\u89e3\u4e00\u4e0b\u3002\n\n\u6bcf\u4e2a\u4e32\u90fd\u5728 SAM \u4e0a\u8fdb\u884c\u4e00\u5339\u914d \u5e76\u8fdb\u884c\u4e00\u6b21\u6392\u5e8f\uff0c\u603b\u590d\u6742\u5ea6\u5927\u6982\u662f $O(\\sum\\limits_{i}^{n} |S_i|\\log |S_i|)$\uff0c\u53ef\u8fc7\u3002  \n\n---\n\n### \u7b97\u6cd5\u4e09\n\n\u7785\u4e86\u4e00\u773c\u9898\u89e3\uff0c\u53d1\u73b0\u81ea\u5df1\u505a\u9ebb\u70e6\u4e86\u3002  \nDP \u6c42\u5f97 $\\operatorname{only}$ \u540e\uff0c\u76f4\u63a5\u904d\u5386\u6240\u6709\u72b6\u6001\uff0c\u82e5\u5b58\u5728 $\\operatorname{only}_i \\not= -1$\uff0c\u5219\u4ee4 $ans _{\\operatorname{only}_i}$ \u52a0\u4e0a $\\operatorname{len}(i)-\\operatorname{len}(\\operatorname{link}(i))$\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6 $O(\\sum|S_i|)$\uff0c\u5c11\u4e00\u4e2a\u6392\u5e8f\u7684\u590d\u6742\u5ea6\u3002\n\n---\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n### \u7b97\u6cd5\u4e09\n\n```cpp\n//\u77e5\u8bc6\u70b9\uff1a\u5e7f\u4e49 SAM\n/*\nBy:Luckyblock  \n*/\n#include <algorithm>\n#include <cctype>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <vector>\n#define ll long long\nconst int kMaxn = 2e5 + 10;\nconst int kMaxm = 26;\n//=============================================================\nstd :: string S[kMaxn];\nint only[kMaxn << 1], ans[kMaxn];\nint num, node_num = 1, ch[kMaxn << 1][kMaxm], len[kMaxn <<1], link[kMaxn << 1];\nint edge_num, head[kMaxn], v[kMaxn << 1], ne[kMaxn << 1]; \n//=============================================================\ninline int read() {\n  int f = 1, w = 0;\n  char ch = getchar();\n  for (; !isdigit(ch); ch = getchar())\n    if (ch == '-') f = -1;\n  for (; isdigit(ch); ch = getchar()) w = (w << 3) + (w << 1) + (ch ^ '0');\n  return f * w;\n}\nvoid AddEdge(int u_, int v_) {\n  v[++ edge_num] = v_, ne[edge_num] = head[u_], head[u_] = edge_num;\n}\nint Insert(int c_, int last_) {\n  if (ch[last_][c_]) {\n    int p = last_, q = ch[p][c_];\n    if (len[p] + 1 == len[q]) {\n      only[q] = - 1;\n      return q;\n    }\n    int newq = ++ node_num;\n    memcpy(ch[newq], ch[q], sizeof(ch[q])); \n    len[newq] = len[p] + 1; \n    link[newq] = link[q];\n    link[q] = newq; \n    for (; p && ch[p][c_] == q; p = link[p]) ch[p][c_] = newq;\n    only[newq] = num;\n    return newq;\n  }\n  int p = last_, now = ++ node_num;\n  only[now] = num;\n  len[now] = len[p] + 1;\n  for (; p && ! ch[p][c_]; p = link[p]) ch[p][c_] = now;\n  if (! p) {link[now] = 1; return now;} \n  int q = ch[p][c_];\n  if (len[q] == len[p] + 1) {link[now] = q; return now;}\n  int newq = ++ node_num;\n  memcpy(ch[newq], ch[q], sizeof(ch[q])); \n  link[newq] = link[q], len[newq] = len[p] + 1; \n  link[q] = link[now] = newq;\n  for (; p && ch[p][c_] == q; p = link[p]) ch[p][c_] = newq;\n  return now;\n}\nvoid Dfs1(int u_) {\n  for (int i = head[u_]; i; i = ne[i]) {\n    Dfs1(v[i]);\n    if (only[u_] == - 1) continue ;\n    if (! only[u_]) {\n      only[u_] = only[v[i]]; \n    } else if (only[u_] != only[v[i]]) {\n      only[u_] = - 1; \n    }\n  }\n}\n//=============================================================\nint main() {\n  int T = read();\n  for (num = 1; num <= T; ++ num) {\n    std :: cin >> S[num];\n    int n = S[num].length(), last = 1;\n    for (int j = 0; j < n; ++ j) last = Insert(S[num][j] - 'a', last);\n  }\n  for (int i = 2; i <= node_num; ++ i) AddEdge(link[i], i);\n  Dfs1(1);\n  for (int i = 2; i <= node_num; ++ i) {\n    if (only[i] != - 1) ans[only[i]] += len[i] - len[link[i]];\n  }\n  for (int i = 1; i <= T; ++ i) printf(\"%d\\n\", ans[i]);\n  return 0; \n}\n```\n\n---\n\n### \u7b97\u6cd5\u4e8c\n\n```cpp\n//\u77e5\u8bc6\u70b9\uff1a\u5e7f\u4e49 SAM\n/*\nBy:Luckyblock  \n*/\n#include <algorithm>\n#include <cctype>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <vector>\n#define ll long long\nconst int kMaxn = 2e5 + 10;\nconst int kMaxm = 26;\n//=============================================================\nstd :: string S[kMaxn];\nint only[kMaxn << 1], top[kMaxn << 1], sum[kMaxn << 1];\nint num, node_num = 1, ch[kMaxn << 1][kMaxm], len[kMaxn <<1], link[kMaxn << 1];\nint edge_num, head[kMaxn], v[kMaxn << 1], ne[kMaxn << 1]; \n//=============================================================\ninline int read() {\n  int f = 1, w = 0;\n  char ch = getchar();\n  for (; !isdigit(ch); ch = getchar())\n    if (ch == '-') f = -1;\n  for (; isdigit(ch); ch = getchar()) w = (w << 3) + (w << 1) + (ch ^ '0');\n  return f * w;\n}\nvoid AddEdge(int u_, int v_) {\n  v[++ edge_num] = v_, ne[edge_num] = head[u_], head[u_] = edge_num;\n}\nint Insert(int c_, int last_) {\n  if (ch[last_][c_]) {\n    int p = last_, q = ch[p][c_];\n    if (len[p] + 1 == len[q]) {\n      only[q] = - 1;\n      return q;\n    }\n    int newq = ++ node_num;\n    memcpy(ch[newq], ch[q], sizeof(ch[q])); \n    len[newq] = len[p] + 1; \n    link[newq] = link[q];\n    link[q] = newq; \n    for (; p && ch[p][c_] == q; p = link[p]) ch[p][c_] = newq;\n    only[newq] = num;\n    return newq;\n  }\n  int p = last_, now = ++ node_num;\n  only[now] = num;\n  len[now] = len[p] + 1;\n  for (; p && ! ch[p][c_]; p = link[p]) ch[p][c_] = now;\n  if (! p) {link[now] = 1; return now;} \n  int q = ch[p][c_];\n  if (len[q] == len[p] + 1) {link[now] = q; return now;}\n  int newq = ++ node_num;\n  memcpy(ch[newq], ch[q], sizeof(ch[q])); \n  link[newq] = link[q], len[newq] = len[p] + 1; \n  link[q] = link[now] = newq;\n  for (; p && ch[p][c_] == q; p = link[p]) ch[p][c_] = newq;\n  return now;\n}\nvoid Dfs1(int u_) {\n  for (int i = head[u_]; i; i = ne[i]) {\n    Dfs1(v[i]);\n    if (only[u_] == - 1) continue ;\n    if (! only[u_]) {\n      only[u_] = only[v[i]]; \n    } else if (only[u_] != only[v[i]]) {\n      only[u_] = - 1; \n    }\n  }\n}\nvoid Dfs2(int u_, int top_) {\n  if (! top_ && only[u_] != - 1) top_ = u_;\n  top[u_] = top_;\n  if (top_) sum[u_] += len[u_] - len[link[u_]];\n  for (int i = head[u_]; i; i = ne[i]) {\n    Dfs2(v[i], top_);\n    sum[u_] += sum[v[i]]; \n  }\n}\nvoid Work(std :: string S_) {\n  std :: vector <int> node;\n  ll ans = 0;\n  int n = S_.length(), now = 1;\n  for (int i = 0; i < n; ++ i) {\n    now = ch[now][S_[i] - 'a'];\n    if (only[now] != - 1) node.push_back(top[now]);\n  }\n  std :: sort(node.begin(), node.end());\n  for (int i = 0, n = node.size(); i < n; ++ i) {\n    if (i != 0) {\n      if (node[i] == node[i - 1]) continue;\n    }\n    ans += sum[node[i]];\n  }\n  printf(\"%lld\\n\", ans);\n}\n//=============================================================\nint main() {\n  int T = read();\n  for (num = 1; num <= T; ++ num) {\n    std :: cin >> S[num];\n    int n = S[num].length(), last = 1;\n    for (int j = 0; j < n; ++ j) last = Insert(S[num][j] - 'a', last);\n  }\n  for (int i = 2; i <= node_num; ++ i) AddEdge(link[i], i);\n  Dfs1(1), Dfs2(1, 0);\n  for (int i = 1; i <= T; ++ i) Work(S[i]);\n  return 0; \n}\n```",
        "postTime": 1597969076,
        "uid": 186186,
        "name": "\u7075\u4e4c\u8def\u7a7a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4081 \u3010[USACO17DEC]Standing Out from the Herd P\u3011"
    },
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\n\n[CTime_Pup_314\u7684\u535a\u5ba2](https://ctp314.github.io/)\n\n# [P4081 [USACO17DEC]Standing Out from the Herd](https://www.luogu.org/problemnew/show/P4081)\n>\u7ed9\u5b9a\u5b57\u7b26\u4e32\u96c6\u5408\uff0c\u6c42\u53ea\u5c5e\u4e8e\u8be5\u5b57\u7b26\u4e32\u7684\u672c\u8d28\u4e0d\u540c\u7684\u975e\u7a7a\u5b50\u4e32\u7684\u4e2a\u6570\n\n\u96be\u5ea6\u4e00\u822c\uff0c\u5efa\u4e00\u4e2a\u5e7f\u4e49 $SAM$ \u5728 $Parent$ \u6811\u4e0a\u5bf9 $endpos$ \u5168\u90e8\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u7edf\u8ba1\u5373\u53ef\n\n\u5173\u952e\u662f\u4e0b\u9762\u7684\u9519\u8bef\u548c\u89e3\u51b3\u65b9\u6cd5\n\n\u5927\u90e8\u5206\u76f4\u63a5\u6309\u7167 $maxlen$ \u62d3\u6251\u5e8f\u4f1a $WA$\uff0c\u662f\u56e0\u4e3a\u5982\u679c\u5b57\u7b26\u4e32\u5177\u6709\u76f8\u540c\u524d\u7f00\u5219\u5728\u5e7f\u4e49 $SAM$ \u4e2d\u4f1a\u51fa\u73b0 $maxlen(parent(A))= maxlen(A)$ \n\n\u4e3b\u8981\u662f\u56e0\u4e3a\u5927\u90e8\u5206\u5e7f\u4e49 $SAM$ \u7684\u5199\u6cd5\u6bcf\u6b21\u90fd\u5fc5\u987b\u65b0\u5efa\u4e00\u4e2a $np$ \u8282\u70b9\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u4e2a $np$ \u8282\u70b9\u6240\u8868\u793a\u7684\u539f\u4e32\u7684\u524d\u7f00\u6709\u53ef\u80fd\u5728 $SAM$ \u4e0a\u51fa\u73b0\u4e86\uff0c\u4f46\u7531\u4e8e $Parent$ \u6811\u7684\u6027\u8d28\u4e24\u8005\u95f4\u6709\u8fb9\u76f8\u8fde\uff0c\u5bfc\u81f4\u4e86 $maxlen$ \u975e\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\u7236\u5b50\u5173\u7cfb\uff0c\u53ef\u4ee5\u901a\u8fc7 $\\lbrace ab, abc\\ \\rbrace$ \u4f53\u4f1a\u4e00\u4e0b\n\n\u6240\u4ee5\u5f53 $maxlen$ \u76f8\u540c\u65f6\uff0c\u540e\u52a0\u5165\u7684\u8282\u70b9\u8981\u9760\u540e\n\n\u4f46\u662f\u6309\u7167\u6211\u8fd9\u79cd\u5199\u6cd5\u53c8 $WA$ \u7b2c $2$ \u4e2a\u70b9\uff0c\u662f\u7531\u4e8e\u65b0\u5efa\u7684 $nq$ \u8282\u70b9\u5e94\u8be5\u7ee7\u627f $np$ \u8282\u70b9\u7684\u67d0\u4e00\u4e2a $endpos$ \u800c\u4e0d\u662f $q$ \u8282\u70b9\u7684 $endpos$\n\n\u539f\u56e0\u662f\u6211\u4eec\u4f1a\u8ba4\u4e3a\u5728\u67d0\u6b21\u52a0\u5165\u64cd\u4f5c\u65f6 $nq$ \u7684\u52a0\u5165\u987a\u5e8f\u665a\u4e8e $np$\uff0c\u5bfc\u81f4 $np$ \u6700\u540e\u4e0d\u80fd\u53ca\u65f6\u66f4\u65b0 $nq$\uff0c\u90a3\u4e48\u4e00\u5f00\u59cb\u6211\u4eec\u5c31\u5e94\u8be5\u5c06\u66f4\u665a\u7684 $np$ \u7684\u67d0\u4e00\u4e2a $endpos$ \u8d4b\u503c\u7ed9 $nq$\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cctype>\nusing namespace std;\nconst int N = 2e5+5;\ntypedef long long int64;\nint last = 1, tot = 1, pre, pos[N], len[N], fa[N], ch[N][26];\nint tax[N], p[N];\nint64 ans[N];\ninline void insert(int c, int p)\n{\n    int cur = ++tot, pre = last; last = cur;\n    len[cur] = len[pre]+1; pos[cur] = p;\n    while(pre&&!ch[pre][c]) ch[pre][c] = cur, pre = fa[pre];\n    if(!pre) return void(fa[cur] = 1);\n    int x = ch[pre][c];\n    if(len[pre]+1 == len[x]) return void(fa[cur] = x);\n    int y = ++tot; fa[y] = fa[x]; pos[y] = p;\n    fa[x] = fa[cur] = y; len[y] = len[pre]+1;\n    memcpy(ch[y], ch[x], sizeof(ch[x]));\n    while(pre&&ch[pre][c] == x) ch[pre][c] = y, pre = fa[pre]; \n}\nint n;\nchar s[N];\nint main()\n{\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; ++i)\n    {\n        last = 1; scanf(\"%s\", s);\n        for(int k = 0; s[k]; ++k) insert(s[k]-'a', i);\n    }\n    for(int i = 1; i <= tot; ++i) ++tax[len[i]];\n    for(int i = 1; i <= tot; ++i) tax[i] += tax[i-1];\n    for(int i = tot; i; --i) p[tax[len[i]]--] = i;\n    for(int i = tot; i; --i) if(pos[fa[p[i]]] != pos[p[i]]) pos[fa[p[i]]] = 0;\n    for(int i = 1; i <= tot; ++i) ans[pos[i]] += len[i]-len[fa[i]];\n    for(int i = 1; i <= n; ++i) printf(\"%lld\\n\", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1561947417,
        "uid": 123514,
        "name": "CTime_Pup_314",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 [USACO17DEC]Standing Out from the Herd"
    },
    {
        "content": "[$My\\ blog$](https://ctz45562.github.io/2019/04/27/%E6%B4%9B%E8%B0%B7-P4081-USACO17DEC-Standing-Out-from-the-Herd/)\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P4081)\n\n\u611f\u89c9\u6211\u7684\u505a\u6cd5\u597d\u9b3c\u755c\u554a\u3002\u3002\u3002\u662f\u4e0d\u662f\u9519\u4e86\u554a\n\n\u4e0d\u8fc7~~\u53ef\u7231\u7684~~$asuldb$\u8ddf\u6211\u505a\u6cd5\u4e00\u6837\u8bf6$QwQ$\n\n\u628a\u6240\u6709\u4e32\u7528\u7279\u6b8a\u5b57\u7b26\u9694\u5f00\uff0c\u62fc\u4e00\u5757\u9020$SAM$\u3002\n\n$endpos$\u96c6\u5408\u5c31\u662f\u5b50\u4e32\u51fa\u73b0\u4f4d\u7f6e\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684$endpos$\u53ea\u5728\u4e00\u4e2a\u4e32\u91cc\u51fa\u73b0\u8fc7\uff0c\u5b83\u5c31\u53ef\u4ee5\u7b97\u8fdb\u72ec\u7279\u503c\u91cc\u3002\n\n\u9020$SAM$\u7684\u65f6\u5019\u53ef\u4ee5\u7ed9\u8282\u70b9\u67d3\u4e2a\u8272\uff0c\u7136\u540e\u5728$parent\\ tree$\u4e0a\u5411\u4e0a\u5408\u5e76\uff0c\u5982\u679c\u67d0\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u79cd\u989c\u8272$x$\uff0c\u5c31\u53ef\u4ee5\u7ed9$x$\u4ea7\u751f\u8d21\u732e\u3002\n\n\u56e0\u4e3a\u628a\u6240\u6709\u4e32\u62fc\u4e86\u8d77\u6765\uff0c\u4f1a\u6709\u4e0d\u662f$x$\u7684\u5b50\u4e32\u51fa\u73b0\uff0c\u5c31\u8981\u8bb0\u5f55\u4e00\u4e0b\u6700\u5927\u7684$endpos$\u503c$ma$\uff0c\u663e\u7136$ma[i]=\\max\\{ma[j]\\}(fa[j]=i)$\uff0c\u518d\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u4e32\u5de6\u7aef\u70b9\u7684\u4f4d\u7f6e$ll[x]$\uff0c\u8d21\u732e\u5c31\u662f$(ma[i]-len[fa[i]])-max\\{ma[i]-len[i]+1,ll[x]\\}+1$\n\n\u6709\u53ef\u80fd\u8be5\u8282\u70b9\u6ca1\u6709\u4e00\u4e2a\u5b50\u4e32\u5c5e\u4e8e$x$\uff0c\u5c31\u4f1a\u6709\u8d1f\u6570\uff0c\u5bf9$0$\u53d6\u4e2a$\\max$\u5c31\u597d\u5566\u3002\n\n\u4ee3\u7801\uff1a\n\n``` cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n\n#define maxn 200005\n#define inf 0x3f3f3f3f\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,y=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn y?-x:x;\n}\n#define son(x,y) son[x][y]\nint h[maxn],col[maxn],ll[maxn],ma[maxn],son[maxn][27],fa[maxn],len[maxn],ans[maxn],last=1,cnt=1,all,num,n;\nchar s[maxn];\nstruct edge{\n\tint pre,to;\n}e[maxn];\ninline void add(int from,int to){\n\te[++num].pre=h[from],h[from]=num,e[num].to=to;\n}\ninline void merge(int &x,int y){\n\tif(x==y)return;\n\tif(x==-1||y==-1||x&&y)x=-1;\n\telse x=x|y;\n}//\u5408\u5e76\u989c\u8272\nvoid insert(int c,int i=0){\n\tint p=last,ne=last=++cnt;\n\tlen[ne]=len[p]+1,ma[ne]=len[ne],col[ne]=i;//\u67d3\u8272\n\twhile(p&&!son(p,c))son(p,c)=ne,p=fa[p];\n\tif(!p)fa[ne]=1;\n\telse {\n\t\tint q=son(p,c);\n\t\tif(len[q]==len[p]+1)fa[ne]=q;\n\t\telse {\n\t\t\tint sp=++cnt;\n\t\t\tmemcpy(son[sp],son[q],sizeof son[q]);\n\t\t\tfa[sp]=fa[q],len[sp]=len[p]+1,fa[q]=fa[ne]=sp;\n\t\t\twhile(p&&son(p,c)==q)son(p,c)=sp,p=fa[p];\n\t\t}\n\t}\n}\nvoid dfs(int node=1){\n\tint x;\n\tfor(register int i=h[node];i;i=e[i].pre)\n\t\tx=e[i].to,dfs(x),merge(col[node],col[x]),ma[node]=max(ma[node],ma[x]);\n\tx=col[node];\n\tif(~x)ans[x]+=max((ma[node]-len[fa[node]])-max(ma[node]-len[node]+1,ll[x])+1,0);\n}\nint main(){\n\tn=read();\n\tint m,N=0;\n\tfor(register int i=1;i<=n;++i){\n\t\tscanf(\"%s\",s+1),m=strlen(s+1);\n\t\tfor(register int j=1;j<=m;++j)insert(s[j]-'a',i);\n\t\tll[i]=N+1,N+=m+1;//\u8bb0\u5f55\u5de6\u7aef\u70b9\n\t\tif(i!=n)insert(26);//\u7279\u6b8a\u5b57\u7b26\n\t}\n\tfor(register int i=2;i<=cnt;++i)add(fa[i],i);\n\tdfs();\n\tfor(register int i=1;i<=n;++i)printf(\"%d\\n\",ans[i]);\n}\n\n```\n\n",
        "postTime": 1556323779,
        "uid": 111762,
        "name": "_ctz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4081 \u3010[USACO17DEC]Standing Out from the Herd\u3011"
    },
    {
        "content": "\u53d1\u73b0\u697c\u4e0b\u4e24\u4f4d\u5927\u795e\u4e00\u4e2a\u7528\u4e86$SA$\u800c\u53e6\u4e00\u4e2a\u7528\u4e86$SAM$\uff0c\u8fd9\u91cc\u6765\u4e00\u4e2a$SA+SAM$\u7684\u505a\u6cd5~~\u6211\u6015\u4e0d\u662f\u6709\u6bd2~~\n\n\u9996\u5148\u770b\u5230\u5b50\u4e32\u5339\u914d\u679c\u65ad\u5c31\u662f\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u800c\u4e14\u8fd9\u4e2a\u5339\u914d\u6d89\u53ca\u5230\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u5c31\u5148\u5bf9\u6240\u6709\u4e32\u5efa\u4e00\u4e2a\u5e7f\u4e49$SAM$\uff0c\u7136\u540e\u8003\u8651\u7b54\u6848\u600e\u4e48\u6c42\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u6c42\u51fa\u4ee5\u4ed6\u4e3a\u7ed3\u5c3e\u7684\u5b8c\u7f8e\u5b50\u4e32**\u6700\u957f**\u6709\u591a\u957f\uff0c\u5982\u679c\u4ed6\u662f\u5b8c\u7f8e\u5b50\u4e32\u90a3\u4e48\u4ed6\u7684\u540e\u7f00\u4e5f\u4e00\u5b9a\u662f\u5b8c\u7f8e\u5b50\u4e32\u5c31\u53ef\u4ee5\u7edf\u8ba1\u7b54\u6848\u4e86\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u5728$SAM$\u4e0a\u8fd0\u884c\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u8fd9\u4e2a\u4f4d\u7f6e\u4f1a\u8dd1\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9$SAM$\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u641e\u51fa\u4e00\u4e2a\u533a\u95f4\uff0c\u4ed6\u7684\u5728\u8fd9\u4e2a\u957f\u5ea6\u533a\u95f4\u5185\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u5b8c\u7f8e\u5b50\u4e32\u3002\n\n\u8003\u8651\u5e7f\u4e49$SAM$\u7684\u6784\u9020\u8fc7\u7a0b\uff0c\u6211\u4eec\u662f\u4e00\u4e2a\u4e32\u4e00\u4e2a\u4e32\u5f80\u91cc\u63d2\u7684\uff0c\u63d2\u7684\u65f6\u5019\u4f1a\u65b0\u5efa\u4e00\u4e9b\u4e00\u5b9a\u5728\u5f53\u524d\u7684\u4e32\u5185\u51fa\u73b0\u8fc7\u7684\u8282\u70b9\uff0c\u663e\u7136\u4ed6\u51fa\u73b0\u8fc7\u7684\u4f4d\u7f6e\u4ed6\u7684$Parent$\u6811\u4e0a\u7684\u7956\u5148\u4e5f\u4e00\u5b9a\u51fa\u73b0\u8fc7\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u6bd4\u540e\u4ee3\u51fa\u73b0\u5728\u66f4\u591a\u7684\u4f4d\u7f6e\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728$Parent$\u6811\u4e0a$dfs$\u6765\u5224\u65ad\u8fd9\u4e2a\u8282\u70b9\u662f\u5426\u4ec5\u51fa\u73b0\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u5185\uff0c\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u7ef4\u62a4\u4ed6\u51fa\u73b0\u5728\u7684\u5b57\u7b26\u4e32\u7684\u6700\u5927\u4e0e\u6700\u5c0f\u7f16\u53f7\uff08\u76f8\u7b49\u90a3\u80af\u5b9a\u5c31\u53ea\u51fa\u73b0\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u91cc\uff09\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u4ece\u5b50\u6811\u8f6c\u79fb\u8fc7\u6765\u3002\u5982\u679c\u4e00\u4e2a\u70b9\u4ec5\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u91cc\u51fa\u73b0\u7684\u8bdd\uff0c\u90a3\u4e48\u4ed6\u80af\u5b9a\u5b58\u5728\u67d0\u4e2a\u7956\u5148\u5f00\u59cb\u5728\u591a\u4e2a\u5b57\u7b26\u4e32\u5185\u51fa\u73b0\uff08\u6211\u4eec\u8ba4\u4e3a\u6839\u5728\u6240\u6709\u5b57\u7b26\u4e32\u5185\u90fd\u51fa\u73b0\u8fc7\uff09\uff0c\u8fd9\u662f\u6709\u5355\u8c03\u6027\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u518d\u8fdb\u884c\u4e00\u904d$dfs$\u7ef4\u62a4\u4e00\u4e2a\u6808\u5b58\u4ece\u6839\u5230\u4ed6\u7684\u6240\u6709\u7956\u5148\uff0c\u6211\u4eec\u5728\u8fd9\u4e2a\u6808\u5185\u4e8c\u5206\u51fa\u7b2c\u4e00\u4e2a\u4e0d\u6ee1\u8db3\u8981\u6c42\u7684\u7956\u5148\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u7684\u7b54\u6848\u533a\u95f4\u5c31\u662f\u4ece\u90a3\u4e2a\u7956\u5148\u5f80\u4e0b\u5230\u4ed6\u7684\u672c\u6765\u7684\u533a\u95f4\uff08\u56e0\u4e3a$SAM$\u4e0a\u6bcf\u4e2a\u8282\u70b9\u672c\u6765\u90fd\u6709\u4e00\u4e2a\u957f\u5ea6\u533a\u95f4\uff09\u7684\u5e76\u96c6\u3002\n\n\u7136\u540e\u6211\u4eec\u6ce8\u610f\u5230\u4e00\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u5c31\u662f\u8fd9\u6837\u505a\u4f1a\u628a\u76f8\u540c\u7684\u5b50\u4e32\u90fd\u7b97\u4e00\u904d\uff08\u56e0\u4e3a\u6211\u4eec\u7edf\u8ba1$SAM$\u4e0a\u6bcf\u4e2a\u70b9\u7684\u65f6\u5019\u7b97\u7684\u4e0d\u4ec5\u4ec5\u662f\u4ed6\u81ea\u5df1\u7684\u5b57\u7b26\u4e32\uff09\uff0c\u7136\u540e\u6211\u5c31\u53d7\u5230\u540e\u7f00\u6570\u7ec4\u6c42\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u7684\u542f\u53d1\uff0c\u5bf9\u53cd\u4e32\uff08\u56e0\u4e3a\u6211\u4eec\u7edf\u8ba1\u7684\u662f\u4ee5\u6bcf\u4e2a\u4f4d\u7f6e\u7ed3\u5c3e\u7684\u4e32\u7684\u4e2a\u6570\uff0c\u5982\u679c\u7b97\u91cd\u7684\u8bdd\u5c31\u662f\u4e24\u4e2a\u524d\u7f00\u7684\u6700\u957f\u516c\u5171\u540e\u7f00\uff0c\u4e5f\u5c31\u662f\u53cd\u4e32\u7684\u4e24\u4e2a\u540e\u7f00\u7684$LCP$\uff0c\u8fd9\u4e2a\u5c31\u53ef\u4ee5\u7528\u540e\u7f00\u6570\u7ec4\u505a\u4e86\uff09\u8dd1\u4e00\u904d$SA$\uff0c\u7136\u540e\u6211\u4eec\u628a\u8fd9\u4e2a\u4f4d\u7f6e\u5728\u53cd\u4e32\u5bf9\u5e94\u4f4d\u7f6e\u7684$Height$\u627e\u5230\uff0c\u8fd9\u76f8\u5f53\u4e8e\u7ed9\u4e86\u4f60\u4e00\u4e2a\u957f\u5ea6\u533a\u95f4\u8868\u793a\u4ee5\u8fd9\u4e2a\u4f4d\u7f6e\u7ed3\u5c3e\u7684\u591a\u957f\u7684\u5b57\u7b26\u4e32\u662f\u91cd\u590d\u8ba1\u7b97\u7684\uff0c\u6211\u4eec\u51cf\u53bb\u5b83\u4e0e\u5f53\u524d$SAM$\u8282\u70b9\u4e0a\u957f\u5ea6\u533a\u95f4\u7684\u4ea4\u96c6\u5c31\u884c\u4e86\u3002\n\n~~\u5199\u5230\u8fd9\u91cc\u7a81\u7136\u53d1\u73b0\u8c8c\u4f3c\u53ea\u4ece$Parent$\u6811\u4e0a\u7684\u7236\u4eb2\u627e\u533a\u95f4\u7136\u540e\u6808\u5185\u4e8c\u5206\u8dd1\u53cd\u4e32\u7684\u540e\u7f00\u6570\u7ec4\u4ec0\u4e48\u7684\u597d\u50cf\u5c31\u90fd\u4e0d\u7528\u4e86\u2026\u2026\u7ec6\u601d\u6781\u6050\u2026\u2026~~\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define ll long long\nusing namespace std;\nnamespace ywy\n{\n\tchar str[100002];\n\tinline int get()\n\t{\n\t\tregister int ptr=1;\n\t\tchar c;\n\t\twhile((c=getchar())||23333)if(c>='a'&&c<='z')break;\n\t\tstr[ptr]=c;\n\t\tptr++;\n\t\twhile((c=getchar())||23333)\n\t\t{\n\t\t\tif(c>='a'&&c<='z')str[ptr]=c,ptr++;\n\t\t\telse return(ptr-1);\n\t\t}\n\t} char s[2000001];\n\tint sam[2100001][26],fa[2100001],len[2100001],mins[2100001],maxs[2100001],stk[2100001];\n\ttypedef struct _b\n\t{\n\t\tint dest;\n\t\tint nxt;\n\t} bian;\n\tbian memchi[1000001];\n\tint gnn=1,heads[2100001];\n\tinline void add(int s,int t)\n\t{\n\t\tmemchi[gnn].dest=t;\n\t\tmemchi[gnn].nxt=heads[s];\n\t\theads[s]=gnn;\n\t\tgnn++;\n\t} int gn=2;\n\tinline int zhuanyi(int p,int x,int cjr)\n\t{\n\t\tint me=gn;\n\t\tgn++;\n\t\tlen[me]=len[p]+1;\n\t\tmaxs[me]=cjr;\n\t\tmins[me]=cjr;\n\t\twhile(p&&!sam[p][x])sam[p][x]=me,p=fa[p];\n\t\tif(!p)\n\t\t{\n\t\t\tfa[me]=1;\n\t\t\treturn(me);\n\t\t}\n\t\tint q=sam[p][x];\n\t\tif(len[q]==len[p]+1)\n\t\t{\n\t\t\tfa[me]=q;\n\t\t\treturn(me);\n\t\t}\n\t\tint nq=gn;\n\t\tgn++;\n\t\tlen[nq]=len[p]+1;\n\t\tfa[nq]=fa[q];\n\t\tfa[q]=fa[me]=nq;\n\t\tmaxs[nq]=cjr;\n\t\tmins[nq]=cjr;\n\t\tfor(register int i=0; i<26; i++)sam[nq][i]=sam[q][i];\n\t\twhile(p&&sam[p][x]==q)sam[p][x]=nq,p=fa[p];\n\t\treturn(me);\n\t} int f[2100001];\n\tint poss[1000001],lens[1000001];\n\tvoid dfs(int pt)\n\t{\n\t\tfor(register int i=heads[pt]; i; i=memchi[i].nxt)\n\t\t{\n\t\t\tdfs(memchi[i].dest);\n\t\t\tmins[pt]=min(mins[pt],mins[memchi[i].dest]);\n\t\t\tmaxs[pt]=max(maxs[pt],maxs[memchi[i].dest]);\n\t\t}\n\t} int minl[1000001];\n\tvoid efs(int pt,int deep)\n\t{\n\t\tstk[deep]=pt;\n\t\tfor(register int i=heads[pt]; i; i=memchi[i].nxt)efs(memchi[i].dest,deep+1);\n\t\tif(pt!=1&&mins[pt]==maxs[pt])\n\t\t{\n\t\t\tint ans=deep,l=1,r=deep;\n\t\t\twhile(l<=r)\n\t\t\t{\n\t\t\t\tint mid=(l+r)>>1;\n\t\t\t\tif(maxs[stk[mid]]==mins[stk[mid]])ans=mid,r=mid-1;\n\t\t\t\telse l=mid+1;\n\t\t\t}\n\t\t\tf[pt]=len[pt]-len[stk[ans-1]];\n\t\t\tminl[pt]=len[stk[ans-1]]+1;\n\t\t}\n\t}\n\tvoid print(ll num)\n\t{\n\t\tif(num>=10)print(num/10);\n\t\tputchar(num%10+'0');\n\t} int sa[1000001],sums[1000001],rk[1000001],temp[1000001],lst[1000001],tsa[1000001],trk[1000001];\n\tint lstcnt[1000001],h[1000001];\n\tunsigned char bv[1000001];\n\tinline int getrank(int a,int b)\n\t{\n\t\tif(lst[a]==b)\n\t\t{\n\t\t\tlstcnt[a]++;\n\t\t\treturn(sums[a]);\n\t\t}\n\t\tsums[a]-=lstcnt[a];\n\t\tlstcnt[a]=1;\n\t\tlst[a]=b;\n\t\treturn(sums[a]);\n\t}\n\tinline void SA(int n)\n\t{\n\t\tfor(register int i=1; i<='z'; i++)sums[i]=0;\n\t\tfor(register int i=1; i<=n; i++)sums[str[i]]++;\n\t\tfor(register int i=1; i<='z'; i++)sums[i]+=sums[i-1];\n\t\tfor(register int i=1; i<=n; i++)rk[i]=sums[str[i]-1]+1;\n\t\tfor(register int i=1; i<=n; i++)sa[sums[str[i]]]=i,sums[str[i]]--;\n\t\tfor(register int i=1; i<='z'; i++)sums[i]=0;\n\t\tfor(register int bit=1; (1<<(bit-1))<=n; bit++)\n\t\t{\n\t\t\tunsigned char bswitch=1;\n\t\t\tfor(register int i=1; i<=n; i++)sums[i]=0,bv[i]=0;\n\t\t\tfor(register int i=1; i<=n; i++)sums[rk[i]]++;\n\t\t\tfor(register int i=1; i<=n; i++)sums[i]+=sums[i-1],lst[i]=-1,lstcnt[i]=0,temp[i]=sums[i];\n\t\t\tfor(register int i=n; i>=1; i--)\n\t\t\t{\n\t\t\t\tif(sa[i]<=(1<<(bit-1)))continue;\n\t\t\t\ttrk[sa[i]-(1<<(bit-1))]=getrank(rk[sa[i]-(1<<(bit-1))],rk[sa[i]]);\n\t\t\t\ttsa[temp[rk[sa[i]-(1<<(bit-1))]]]=sa[i]-(1<<(bit-1));\n\t\t\t\ttemp[rk[sa[i]-(1<<(bit-1))]]--;\n\t\t\t}\n\t\t\tfor(register int i=n; i>n-(1<<(bit-1)); i--)\n\t\t\t{\n\t\t\t\ttrk[i]=getrank(rk[i],0);\n\t\t\t\ttsa[temp[rk[i]]]=i;\n\t\t\t\ttemp[rk[i]]--;\n\t\t\t}\n\t\t\tfor(register int i=1; i<=n; i++)\n\t\t\t{\n\t\t\t\tsa[i]=tsa[i];\n\t\t\t\tif(bv[rk[i]=trk[i]])bswitch=0;\n\t\t\t\tbv[rk[i]]=1;\n\t\t\t}\n\t\t\tif(bswitch)break;\n\t\t}\n\t}\n\tinline void Height(int n)\n\t{\n\t\tfor(register int i=1; i<=n; i++)\n\t\t{\n\t\t\th[i]=max(0,h[i-1]-1);\n\t\t\twhile(rk[i]!=1&&h[i]<min(n-i+1,n-sa[rk[i]-1]+1)&&str[i+h[i]]==str[sa[rk[i]-1]+h[i]])h[i]++;\n\t\t}\n\t}\n\tvoid ywymain()\n\t{\n\n\t\tmemset(mins,0x7f,sizeof(mins));\n\t\tint cnt;\n\t\tcin>>cnt;\n\t\tposs[0]=1;\n\t\tint p=1;\n\t\tfor(register int a=1; a<=cnt; a++)\n\t\t{\n\t\t\tint n=get();\n\t\t\tposs[a]=poss[a-1]+lens[a-1];\n\t\t\tlens[a]=n;\n\t\t\tp=1;\n\t\t\tint ptr=poss[a];\n\t\t\tfor(register int i=1; i<=n; i++)p=zhuanyi(p,str[i]-'a',a),s[ptr]=str[i],ptr++;\n\t\t}\n\t\tfor(register int i=2; i<gn; i++)add(fa[i],i);\n\t\tdfs(1);\n\t\tefs(1,0);\n\t\tfor(register int a=1; a<=cnt; a++)\n\t\t{\n\t\t\tfor(register int i=lens[a]; i>=1; i--)sums[i]=0,str[lens[a]-i+1]=s[poss[a]+i-1];\n\t\t\tSA(lens[a]);\n\t\t\tHeight(lens[a]);\n\t\t\tint cur=1;\n\t\t\tll ans=0;\n\t\t\tfor(register int i=poss[a]; i<poss[a]+lens[a]; i++)\n\t\t\t{\n\t\t\t\tcur=sam[cur][s[i]-'a'];\n\t\t\t\tans+=f[cur];\n\t\t\t\tif(f[cur])ans-=max(0,h[lens[a]-(i-poss[a]+1)+1]-minl[cur]+1);\n\t\t\t}\n\t\t\tprintf(\"%lld\",ans);\n\t\t\tif(a!=cnt)cout<<endl;\n\t\t}\n\t}\n}\nint main()\n{\n\tywy::ywymain();\n\treturn(0);\n}\n```",
        "postTime": 1542440032,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4081 \u3010[USACO17DEC]Standing Out from the Herd\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u533a\u91cc\u6ca1\u6709\u540e\u7f00\u6570\u7ec4\u7684\u9898\u89e3\uff0c\u6211\u5c31\u6765\u53d1\u4e00\u7bc7\u3002\n\n\u5728\u9605\u8bfb\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5bf9\u540e\u7f00\u6570\u7ec4\u548c $height$ \u6570\u7ec4\u6709\u4e00\u5b9a\u7684\u7406\u89e3\u3002\n\n#### Part 1\n\n\u5982\u4f55\u6c42\u4e00\u4e2a\u4e32\u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e2a\u6570\uff1f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u5b50\u4e32\u603b\u6570\u51cf\u53bb\u91cd\u590d\u7684\u5b50\u4e32\u4e2a\u6570\u3002\n\n\u5904\u7406\u51fa $height$ \u540e\uff0c\u6309\u7167\u5b57\u5178\u5e8f\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6bcf\u4e2a\u540e\u7f00\uff0c\u8bbe\u5f53\u524d\u540e\u7f00\u7684\u6392\u540d\u4e3a $i$\uff0c\u53ef\u4ee5\u53d1\u73b0\u540e\u7f00 $sa[i]$ \u4e0e\u540e\u7f00 $sa[i-1]$ \u7684 $LCP$ \u4e3a $height[i]$\uff0c\u8fd9\u4e5f\u5c31\u662f\u679a\u4e3e\u65f6\u7684\u524d\u540e\u4e24\u4e2a\u4e32\u91cd\u590d\u7684\u90e8\u5206\uff0c\u5c06\u5176\u4ece\u7b54\u6848\u4e2d\u6263\u9664\u5373\u53ef\u3002\n\n\u6240\u4ee5\u4e00\u4e2a\u4e32\u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e2a\u6570\u4e3a:\n$$\n\\frac{n(n+1)}{2}-\\sum_{i=2}^{n}height[i]\n$$\n\n#### Part 2\n\n\u5982\u4f55\u6c42\u6bcf\u4e2a\u4e32\u7684\u53ea\u5c5e\u4e8e\u81ea\u5df1\u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e2a\u6570\uff1f\u53ef\u4ee5\u9650\u6c42\u51fa\u6bcf\u4e2a\u5b50\u4e32\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\uff0c\u5728\u6263\u9664\u516c\u5171\u7684\u90e8\u5206\u3002\n\n\u9996\u5148\u628a\u6bcf\u4e2a\u4e32\u62fc\u63a5\u8d77\u6765\uff0c\u4e2d\u95f4\u63d2\u5165\u4e0d\u540c\u7684\u5206\u9694\u7b26\uff0c\u540c\u65f6\u5bf9\u6bcf\u4e2a\u90e8\u5206\u8fdb\u884c\u67d3\u8272\u3002\n\n\u6211\u4eec\u4ecd\u7136\u8003\u8651\u6309\u7167\u5b57\u5178\u5e8f\u679a\u4e3e\uff0c\u8003\u8651\u4e24\u4e2a\u76f8\u90bb\u7684\u540e\u7f00 $sa[i-1]$ \u548c $sa[i]$\uff0c\u5982\u679c\u5b83\u4eec\u5c5e\u4e8e\u4e0d\u540c\u7684\u4e32\uff0c\u90a3\u4e48\u5b83\u4eec\u7684 $LCP$ \u5c31\u5e94\u8be5\u88ab\u6263\u9664\u3002\n\n\u4f46\u662f\u73b0\u5728\u6211\u4eec\u5c31\u8981\u8003\u8651\u91cd\u590d\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u4ece\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2d\u6263\u9664\u7b54\u6848\uff0c\u91cd\u590d\u7684\u90e8\u5206\u53ea\u80fd\u51cf\u53bb\u4e00\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u56fe\u5f62\u8c61\u5730\u7406\u89e3\u90a3\u4e9b\u90e8\u5206\u8981\u88ab\u51cf\u6389\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ezq2u8tq.png)\n\n\u6211\u4eec\u7528 $A,B$ \u6765\u8868\u793a\u4e0d\u540c\u7684\u4e32\uff0c\u67f1\u72b6\u56fe\u7684\u9ad8\u5ea6\u8868\u793a\u4e24\u4e2a\u4e32\u7684 $height$\u3002\n\n\u5f53 $i=3$ \u65f6\uff0c\u51fa\u73b0\u4e86\u516c\u5171\u7684\u90e8\u5206\uff0c\u6b64\u65f6 $A,B$ \u90fd\u8981\u51cf\u53bb $height[3]$\u3002\n\n\u5f53 $i=5$ \u65f6\uff0c\u53c8\u51fa\u73b0\u4e86\u516c\u5171\u90e8\u5206\uff0c\u4ece\u56fe\u4e2d\u663e\u7136\u53ef\u4ee5\u770b\u51fa\u4e0e\u4e0a\u4e00\u6b21\u51cf\u53bb\u7684\u90e8\u5206\u6709\u91cd\u590d\uff0c\u4e14\u91cd\u590d\u7684\u90e8\u5206\u5b8c\u5168\u8986\u76d6\u4e86\u73b0\u5728\u7684 A,B \u4e32\u7684\u516c\u5171\u90e8\u5206\uff0c\u6240\u4ee5\u8fd9\u6b21\u4e0d\u80fd\u51cf\u53bb\u3002\n\n\u5f53 $i=7$ \u65f6\uff0c$height[7]>height[5]$\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u6b21\u51cf\u53bb $height[7]-height[5]$\uff0c\u53ea\u6709\u5728 $height[5]$ \u4e4b\u4e0a\u7684\u90e8\u5206\u662f\u4e0d\u91cd\u590d\u7684\u3002\u4e3a\u4ec0\u4e48\u4e0d\u662f\u51cf\u53bb $height[7]-height[3]$ \u5462\uff1f\u56e0\u4e3a\u540e\u7f00 $sa[3]$ \u4e0e\u540e\u7f00 $sa[7]$ \u7684 $LCP$\uff0c\u4e5f\u5c31\u662f\u5b83\u4eec\u76f8\u540c\u7684\u90e8\u5206\u53ea\u6709 $height[5]$ \u53ca\u4ee5\u4e0b\u7684\u90e8\u5206\uff0c\u4e0a\u9762\u90fd\u662f\u4e0d\u540c\u7684\u3002\n\n\u5f53 $i=14$ \u65f6\uff0c\u8fd9\u6b21\u4e0d\u662f\u8981\u51cf\u53bb $height[14]-height[7]$\uff0c\u800c\u662f\u51cf\u53bb $height[14]-height[11]$\uff0c\u56e0\u4e3a $LCP(13,7)=height[11]$\uff0c\u53ea\u6709\u8fd9\u90e8\u5206\u662f\u4e0e\u524d\u9762\u51cf\u6389\u7684\u90e8\u5206\u6709\u91cd\u590d\u3002\n\n#### Part 3\n\n\u73b0\u5728\u6709\u4e00\u4e2a\u5927\u4f53\u7684\u601d\u8def\uff1a\u6309\u7167\u5b57\u5178\u5e8f\u679a\u4e3e\uff0c\u8003\u8651\u4e24\u4e2a\u76f8\u90bb\u7684\u540e\u7f00 $sa[i-1]$ \u548c $sa[i]$\uff0c\u5982\u679c\u5b83\u4eec\u5c5e\u4e8e\u4e0d\u540c\u7684\u4e32\uff0c\u5219\u51cf\u53bb\u5b83\u4eec\u7684 $LCP$\uff0c\u540c\u65f6\u8003\u8651 $LCP$ \u4e0e\u5148\u524d\u51cf\u53bb\u7684\u90e8\u5206\u6709\u591a\u5c11\u662f\u91cd\u53e0\u7684\uff0c\u628a\u8fd9\u90e8\u5206\u518d\u52a0\u56de\u53bb\u3002\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u5bf9\u6bcf\u4e2a\u4e32\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u6808\uff0c\u7ef4\u62a4\u4e00\u4e2a\u4ece\u6808\u5e95\u5230\u6808\u9876\u5355\u8c03\u9012\u589e\u7684\u5e8f\u5217\uff0c\u8868\u793a\u5bf9\u4e8e\u8fd9\u4e2a\u4e32\u7684\u6bcf\u6b21\u51cf\u53bb\u7684\u957f\u5ea6\uff08\u4e0d\u8003\u8651\u91cd\u590d\u5e94\u51cf\u53bb\u7684\u957f\u5ea6\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5176\u5b9e\u5c31\u662f $height$\uff09\u3002\n\n\u663e\u7136\u5bf9\u4e8e\u4e00\u4e2a\u4e32\uff0c\u4f1a\u91cd\u590d\u7684\u90e8\u5206\u53ea\u53ef\u80fd\u662f $LCP$ \u7684\u90e8\u5206\u3002\u8003\u8651 $LCP$ \u957f\u5ea6\u4e3a\u533a\u95f4\u4e2d $height$ \u7684\u6700\u5c0f\u503c\u7684\u6027\u8d28\uff0c\u5176\u4e2d\u4e0d\u5355\u8c03\u7684\u90e8\u5206\u4e0d\u53ef\u80fd\u662f $LCP$ \u7684\u957f\u5ea6\uff0c\u5bf9\u7b54\u6848\u6ca1\u6709\u8d21\u732e\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u7ef4\u62a4\u5355\u8c03\u6808\uff0c\u91cd\u590d\u7684\u90e8\u5206\u5c31\u662f\u6808\u9876\u3002\n\n\u540c\u65f6\uff0c\u82e5\u5f53\u524d\u8981\u51cf\u53bb\u7684\u5730\u65b9\u4e0e\u4e0a\u4e00\u6b21\u51cf\u53bb\u7684\u5730\u65b9\u8fd9\u4e2a\u533a\u95f4\u91cc\u6709\u66f4\u5c0f\u7684 $height$ \uff08\u4e0a\u56fe $i=14$\uff09\uff0c\u516c\u5171\u7684\u90e8\u5206\u5c31\u53d8\u4e3a\u8fd9\u4e2a $height$\uff0c\u56e0\u6b64\u8fd8\u8981\u7ef4\u62a4\u4e00\u4e2a `ST` \u8868\u3002\n\n#### Part 4\n\n\u7531\u4e8e\u8981\u4e3a\u6bcf\u4e2a\u4e32\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u6808\uff0c\u6240\u4ee5\u8981\u7528\u94fe\u8868\u5b9e\u73b0\u5355\u8c03\u6808\uff0c\u6216\u4f7f\u7528 `std::stack<T, std::list<T>>` \u5b9a\u4e49\u4e00\u4e2a\u4f7f\u7528 `std::list<T>` \u4e3a\u7684\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u7684\u6808\u3002\u82e5\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e2a\u5b9a\u4e49\uff0c`std::stack<T>` \u7b49\u4ef7\u4e8e `std::stack<T, std::deque<T>>`\uff0c`std::deque<T>` \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u5757\u72b6\u6570\u636e\u7ed3\u6784\uff0c\u5bb9\u6613 `MLE`\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <stack>\n#include <list>\n#include <algorithm>\nusing namespace std;\n\nconstexpr int maxn = 2e5 + 10;\n\n/** \u5355\u8c03\u6808 */\nclass SteadyStack {\npublic:\n    void push(int x) {\n        while (!st.empty() && st.top() >= x)\n            st.pop();\n\n        st.push(x);\n    }\n\n    int top() {\n        return (st.empty() ? 0 : st.top());\n    }\nprivate:\n    /** \u6ce8\u610f stack \u7684\u5b9a\u4e49 */\n    stack<int, list<int>> st;\n};\n\nclass SparseTable {\npublic:\n    void preprocess(int a[], int n) {\n        logv[0] = -1;\n\n        for (int i = 1; i <= n; ++i)\n            logv[i] = logv[i / 2] + 1;\n\n        for (int i = 1; i <= n; ++i)\n            data[i][0] = a[i];\n\n        for (int j = 1; j <= 17; ++j)\n            for (int i = 1; i + (1 << j) - 1 <= n; ++i)\n                data[i][j] = min(data[i][j - 1], data[i + (1 << (j - 1))][j - 1]);\n    }\n\n    int query(int l, int r) {\n        if (l > r)\n            return 0x3f3f3f3f;\n\n        int s = logv[r - l + 1];\n        return min(data[l][s], data[r - (1 << s) + 1][s]);\n    }\nprivate:\n    int data[maxn][18];\n    int logv[maxn];\n};\n\nint n, len, dat[maxn * 2]; /** dat \u4e3a\u62fc\u63a5\u540e\u7684\u4e32 */\nchar str[maxn];\nint sa[maxn * 4], buf[2][maxn * 4], *rk, height[maxn * 4];\nint cnt[maxn * 4], id[maxn * 4], *old, tmp[maxn * 4];\nint col[maxn * 2]; /** col[i] \u8868\u793a\u5728\u62fc\u63a5\u540e\u7684\u4e32\u4e2d i \u7684\u5c5e\u4e8e\u90a3\u4e2a\u4e32 */\nlong long ans[maxn];\nSteadyStack st[maxn];\nSparseTable mi;\nint las[maxn]; /** \u4e0a\u4e00\u6b21\u51cf\u53bb\u7684\u4f4d\u7f6e */\n\nbool equal(int x, int y, int w) {\n    return old[x] == old[y] && old[x + w] == old[y + w];\n}\n\nvoid preprocess(int dat[], int n, int m) {\n    for (int i = 1; i <= m; ++i)\n        cnt[i] = 0;\n\n    for (int i = 1; i <= n; ++i)\n        ++cnt[rk[i] = dat[i]];\n\n    for (int i = 1; i <= m; ++i)\n        cnt[i] += cnt[i - 1];\n\n    for (int i = n; i >= 1; --i)\n        sa[cnt[rk[i]]--] = i;\n\n    for (int w = 1, p;; w *= 2, m = p) {\n        p = 0;\n\n        for (int i = n; i > n - w; --i)\n            id[++p] = i;\n\n        for (int i = 1; i <= n; ++i)\n            if (sa[i] > w)\n                id[++p] = sa[i] - w;\n\n        for (int i = 1; i <= m; ++i)\n            cnt[i] = 0;\n\n        for (int i = 1; i <= n; ++i)\n            ++cnt[tmp[i] = rk[id[i]]];\n\n        for (int i = 1; i <= m; ++i)\n            cnt[i] += cnt[i - 1];\n\n        for (int i = n; i >= 1; --i)\n            sa[cnt[tmp[i]]--] = id[i];\n\n        swap(rk, old);\n        p = 0;\n\n        for (int i = 1; i <= n; ++i)\n            rk[sa[i]] = (equal(sa[i - 1], sa[i], w) ? p : ++p);\n\n        if (p == n) {\n            for (int i = 1; i <= n; ++i)\n                sa[rk[i]] = i;\n\n            break;\n        }\n    }\n\n    for (int i = 1, j = 0; i <= n; ++i) {\n        if (j)\n            --j;\n\n        while (dat[i + j] == dat[sa[rk[i] - 1] + j])\n            ++j;\n\n        height[rk[i]] = j;\n    }\n}\n\n/** \u62fc\u63a5\u5b57\u7b26\u4e32\u5e76\u8ba1\u7b97\u51fa\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570 */\nvoid add(char str[], int id) {\n    int start = len, l = strlen(str);\n\n    for (int i = 0; i < l; ++i) {\n        dat[++len] = str[i];\n        col[len] = id;\n    }\n\n    dat[++len] = id + 127;\n    preprocess(dat + start, l, 127);\n\n    ans[id] = 1ll * l * (l + 1) / 2;\n\n    for (int i = 1; i <= l; ++i)\n        ans[id] -= height[i];\n}\n\n/** \u6263\u9664\u91cd\u590d\u90e8\u5206 */\nvoid remove(int id, int l, int p) {\n    ans[id] -= max(l - min(st[id].top(), mi.query(las[id] + 1, p - 1)), 0);\n    st[id].push(l);\n}\n\nint main() {\n    rk = buf[0], old = buf[1];\n\n    scanf(\"%d\", &n);\n    \n    for (int i = 1; i <= n; ++i) {\n        scanf(\"%s\", str);\n        add(str, i);\n    }\n\n    preprocess(dat, len, 127 + n);\n    mi.preprocess(height, len);\n\n    for (int i = 2; i <= len; ++i) {\n        if (col[sa[i - 1]] != col[sa[i]]) {\n            remove(col[sa[i - 1]], height[i], i);\n            remove(col[sa[i]], height[i], i);\n            las[col[sa[i - 1]]] = i - 1;\n            las[col[sa[i]]] = i;\n        }\n    }\n\n    for (int i = 1; i <= n; ++i)\n        printf(\"%lld\\n\", ans[i]);\n\n    return 0;\n}\n```\n\n",
        "postTime": 1639730435,
        "uid": 219538,
        "name": "ctj12461",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011Standing Out from the Herd P"
    },
    {
        "content": "\u4e0d\u4f1a\u5e7f\u4e49$SAM$\u554a\n\n\u4f46\u4fe1\u4ef0\u63d2\u5165\u7279\u6b8a\u5b57\u7b26\u5c31\u53ef\u4ee5\u641e\u5b9a\u4e00\u5207\u4e86\n\n\u6211\u4eec\u5148\u628a\u6240\u6709\u7684\u4e32\u641e\u5728\u4e00\u8d77\u5efa\u51fa\u4e00\u4e2a$SAM$\uff0c\u8bb0\u5f97\u5728\u4e2d\u95f4\u63d2\u5165\u7279\u6b8a\u5b57\u7b26\n\n\u5bf9\u4e8e$parent$\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u6709\u5f53\u5176$endpos$\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u6765\u81ea\u4e8e\u540c\u4e00\u4e2a\u4e32\u7684\u65f6\u5019\u6211\u4eec\u624d\u5bf9\u5b83\u8fdb\u884c\u7edf\u8ba1\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a$parent$\u6811\u4e0a\u5b50\u6811\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u5f88\u5feb\u7684\u5224\u65ad\u8fd9\u4e2a$endpos$\u662f\u5426\u5408\u6cd5\u4e86\n\n\u4f46\u662f\u975e\u5e38\u68d8\u624b\u7684\u4e00\u7c7b\u60c5\u51b5\u662f\u6211\u4eec\u63d2\u8fdb\u53bb\u7684\u7279\u6b8a\u5b57\u7b26\uff0c\u663e\u7136$SAM$\u91cc\u6709\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u5b50\u4e32\u4e2d\u542b\u6709\u7279\u6b8a\u5b57\u7b26\n\n\u90a3\u4e5f\u597d\u529e\uff0c\u6211\u4eec\u5b58\u597d\u6bcf\u4e2a\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u53ea\u8981\u90a3\u4e9b\u6ca1\u6709\u8de8\u8d8a\u7279\u6b8a\u5b57\u7b26\u7684\u5c31\u597d\u4e86\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#define maxn 200005\n#define re register\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\nstruct E{int v,nxt;} e[maxn];\nchar S[maxn];\nint m,n,lst=1,cnt=1,num;\nint len[maxn],fa[maxn],son[maxn][27],mx[maxn],ml[maxn];\nint f[maxn],head[maxn],d[maxn],Ans[maxn],li[maxn];\ninline void add(int x,int y) {e[++num].v=y;e[num].nxt=head[x];head[x]=num;}\nvoid dfs(int x) {\n\tfor(re int i=head[x];i;i=e[i].nxt) \n\t\tdfs(e[i].v),mx[x]=max(mx[e[i].v],mx[x]),ml[x]=min(ml[e[i].v],ml[x]),d[x]|=d[e[i].v];\n}\ninline void ins(int c,int o)\n{\n\tint f=lst,p=++cnt; lst=p;\n\tlen[p]=len[f]+1,mx[p]=ml[p]=o;\n\tif(c==26) d[p]=1;\n\twhile(f&&!son[f][c]) son[f][c]=p,f=fa[f];\n\tif(!f) {fa[p]=1;return;}\n\tint x=son[f][c];\n\tif(len[f]+1==len[x]) {fa[p]=x;return;}\n\tint y=++cnt;\n\tlen[y]=len[f]+1,fa[y]=fa[x],fa[x]=fa[p]=y;\n\tfor(re int i=0;i<27;i++) son[y][i]=son[x][i];\n\twhile(f&&son[f][c]==x) son[f][c]=y,f=fa[f];\n}\nint main()\n{\n\tmemset(ml,20,sizeof(ml));\n\tscanf(\"%d\",&m);\n\tfor(re int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%s\",S+1);\n\t\tint len=strlen(S+1);li[i]=n+1;\n\t\tfor(re int j=1;j<=len;j++) ins(S[j]-'a',++n),f[n]=i;\n\t\tins(26,++n);\n\t}\n\tfor(re int i=2;i<=cnt;i++) add(fa[i],i);\n\tdfs(1);\n\tfor(re int i=2;i<=cnt;i++)\n\t{\n\t\tif(d[i]) continue;\n\t\tif(f[mx[i]]!=f[ml[i]]) continue;\n\t\tint minlen=len[fa[i]]+1;\n\t\tif(f[mx[i]-minlen+1]!=f[mx[i]]) continue;\n\t\tif(f[mx[i]-len[i]+1]==f[mx[i]]) Ans[f[mx[i]]]+=len[i]-len[fa[i]];\n\t\t\telse Ans[f[mx[i]]]+=mx[i]-li[f[mx[i]]]-minlen+2;\n\t}\n\tfor(re int i=1;i<=m;i++) printf(\"%d\\n\",Ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1547095245,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4081 \u3010[USACO17DEC]Standing Out from the Herd\u3011"
    },
    {
        "content": "\u83dc\u9e21\u6211\u73a9SA\u73a9\u5f97\u5f88\u70c2\uff0c\u53ea\u597d\u5199SAM\u3002\u3002\u3002\n\n\u8fd9\u9898\u96be\u5ea6\u6015\u662f\u6709\u9b3c   ~~\u6211\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u4e5f\u8bc4\u4e86NOI+CTSC\u7684~~\n\n\u6b65\u5165\u6b63\u9898\uff0c\u5c31\u662f\u5efa\u5e7f\u4e49SAM\uff0c\u4e0d\u4f1a\u81ea\u884c\u5ea6\u5a18\u3002\n\n\u4e00\u4e2a\u8282\u70b9\u6709\u8d21\u732e\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u53ea\u5c5e\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\n\n\u6bcf\u4e2a\u975e\u514b\u9686\u8282\u70b9\u4fdd\u5b58\u8be5\u5b57\u7b26\u4e32\u7f16\u53f7\u3002\n\n\u7136\u540eparent\u6811\u4e0adfs\uff0ci\u80fd\u5c5e\u4e8e\u7684\u5b57\u7b26\u4e32fa[i]\u4e5f\u5fc5\u7136\u5c5e\u4e8e;\u5f53i\u5df2\u7ecf\u4e0d\u6ee1\u8db3\u6761\u4ef6\u4e86\uff0cfa[i]\u4e5f\u4e0d\u4f1a\u6ee1\u8db3;\u5f53fa[i]\u6ca1\u88ab\u6807\u8bb0\u8fc7\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528i\u6807\u8bb0;\u5f53fa[i]\u88ab\u6807\u8bb0\u4e14i\u6807\u8bb0\u4e0efa[i]\u6807\u8bb0\u4e0d\u540c\u65f6\uff0cfa[i]\u663e\u7136\u4f1a\u88ab\u4e00\u4e2a\u4ee5\u4e0a\u7684\u5b57\u7b26\u4e32\u5305\u542b\uff0c\u65e0\u8d21\u732e\u3002\n\n\u53c8\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u7684\u5b50\u4e32\u4e2a\u6570\u4e3alen[i]-len[fa[i]];\n\n\u7edf\u8ba1\u4e00\u4e0b\u5c31\u597d\u5566\u3002\u3002\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define N 300055\n#define gt getchar()\nchar s[N];int n,kk,len[N],ch[N][26],fa[N],ans[N],lz[N],p,q,np,nq,last=1,cnt=1;\nint head[N],to[N],nxt[N],tot;\ninline void add(int u,int v){to[++tot]=v,nxt[tot]=head[u],head[u]=tot;}\ninline void extend(int c)\n{\n    p=last;len[np=++cnt]=len[p]+1;lz[np]=kk;\n    while(p&&!ch[p][c])ch[p][c]=np,p=fa[p];\n    if(!p)fa[np]=1;\n    else\n    {\n        q=ch[p][c];\n        if(len[p]+1==len[q])fa[np]=q;\n        else\n        {\n            len[nq=++cnt]=len[p]+1;\n            fa[nq]=fa[q];\n            memcpy(ch[nq],ch[q],sizeof ch[q]);\n            fa[q]=fa[np]=nq;\n            while(p&&ch[p][c]==q)ch[p][c]=nq,p=fa[p];\n        }\n    }\n    last=np;\n}\nvoid dfs(int u)\n{\n    for(int i=head[u];i;i=nxt[i])dfs(to[i]);\n    for(int i=head[u];i;i=nxt[i])\n    {\n        if(lz[to[i]]==-1){lz[u]=-1;break;}\n        if(!lz[to[i]])continue;\n        if(!lz[u])lz[u]=lz[to[i]];\n        else if(lz[u]!=lz[to[i]]){lz[u]=-1;break;}\n    }\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    while(n--)\n    {\n        ++kk;\n        scanf(\"%s\",s+1);last=1;\n        int lll=strlen(s+1);\n        for(int i=1;i<=lll;++i)extend(s[i]-'a');\n    }\n    for(int i=2;i<=cnt;++i)add(fa[i],i);\n    dfs(1);\n    for(int i=1;i<=cnt;++i){if(lz[i]==-1)continue;ans[lz[i]]+=len[i]-len[fa[i]];}\n    for(int i=1;i<=kk;++i)printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1528296078,
        "uid": 70788,
        "name": "Cgod",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4081 \u3010[USACO17DEC]Standing Out from the Herd\u3011"
    },
    {
        "content": "Ukkonen \u7b97\u6cd5\n\n\u591a\u4e32\u95ee\u9898\u8003\u8651\u628a\u6240\u6709\u5b57\u7b26\u4e32\u7528\u5206\u9694\u7b26\u62fc\u8d77\u6765\uff0c\u8fd9\u6837\u6211\u4eec\u5f88\u5feb\u5c31\u80fd\u77e5\u9053\u5bf9\u4e8e\u6bcf\u4e2a\u53f6\u8282\u70b9\uff0c\u5b83\u5c5e\u4e8e\u662f\u54ea\u4e2a\u4e32\u7684\u540e\u7f00\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u5176\u5b50\u6811\u4e2d\u7684\u6240\u6709\u53f6\u8282\u70b9\u90fd\u53ea\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4e32\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u53ca\u5176\u8fb9\u6240\u4ee3\u8868\u7684\u5b50\u4e32\u5c31\u662f unique \u7684\uff0c\u8ba1\u5165\u7b54\u6848\u8d21\u732e\u3002\n\n\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u8ba1\u7b97\u7b54\u6848\u7684\u65f6\u5019\uff0c\u5982\u679c\u9047\u5230\u4e86\u4e00\u4e2a\u5206\u9694\u7b26\uff0c\u5c31\u4e0d\u80fd\u7ee7\u7eed\u5f80\u4e0b dfs \u4e0b\u53bb\u5e76\u7edf\u8ba1\u7b54\u6848\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5b50\u4e32\u90fd\u5df2\u7ecf\u4e0d\u662f\u539f\u5b50\u4e32\u800c\u662f\u82e5\u5e72\u4e2a\u4e32\u52a0\u4e0a\u5206\u9694\u7b26\u62fc\u6210\u7684\u4e00\u4e2a\u8f85\u52a9\u4e32\u4e86\u3002\n\n\u5206\u9694\u7b26\u4e0d\u9700\u8981\u6bcf\u4e2a\u4e32\u90fd\u4e0d\u540c\uff0c\u53ea\u9700\u8981\u7ed3\u675f\u7b26\u548c\u5206\u9694\u7b26\u4e0d\u540c\u5c31\u53ef\u4ee5\uff0c\u7136\u540e\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u5206\u9694\u7b26\u4ee3\u8868\u7b2c\u51e0\u4e2a\u4e32\u7684\u7ed3\u675f\u3002\n\n```cpp\nint n,m,c,s[N],col[N],endd[N],ans[N];\nchar str[N];\n\nint sz,cnt=1,now=1,rem,ch[N<<1][28],link[N<<1],st[N<<1],len[N<<1]={inf},f[N<<1];\nint newn(int s,int l) {return link[++cnt]=1,st[cnt]=s,len[cnt]=l,cnt;}\nvoid extend(int x) {\n\tint last=1; sz++, rem++;\n\twhile(rem) {\n\t\twhile(rem>len[ch[now][s[sz-rem+1]]])\n\t\t\trem-=len[now=ch[now][s[sz-rem+1]]];\n\t\tint &v=ch[now][s[sz-rem+1]], c=s[st[v]+rem-1];\n\t\tif(x==c||!v) {\n\t\t\tlink[last]=now, last=now;\n\t\t\tif(!v) v=newn(sz-rem+1,inf);\n\t\t\telse break;\n\t\t} else {\n\t\t\tint u=newn(st[v],rem-1);\n\t\t\tch[u][x]=newn(sz,inf), ch[u][c]=v;\n\t\t\tst[v]+=rem-1, len[v]-=rem-1;\n\t\t\tlink[last]=v=u, last=u;\n\t\t}\n\t\t(now==1)?rem--:now=link[now];\n\t}\n}\nvoid dfs1(int u,int dep,bool leaf=1) { //\u6c42\u53f6\u8282\u70b9\u5c5e\u4e8e\u54ea\u4e2a\u4e32\uff0c\u7136\u540e\u5224\u65ad\u6bcf\u4e2a\u8282\u70b9\u5b50\u6811\u7684\u53f6\u8282\u70b9\u662f\u5426\u90fd\u662f\u5c5e\u4e8e\u540c\u4e00\u5b50\u4e32\n\trep(i,0,27) if(ch[u][i]) {\n\t\tint v=ch[u][i]; leaf=0;\n\t\tdfs1(v,dep+len[v]);\n\t\tif(f[v]==-1||f[u]&&f[u]!=f[v]) f[u]=-1;\n\t\telse f[u]=f[v];\n\t}\n\tif(leaf) f[u]=col[n-dep+1];\n}\nvoid dfs2(int u,int dep,bool leaf=1) {\n\tif(col[st[u]]==col[st[u]+len[u]-1]&&s[st[u]]<26&&s[st[u]+len[u]-1]<26) {\n\t\trep(i,0,27) if(ch[u][i]) dfs2(ch[u][i],dep+len[ch[u][i]]);\n\t}\n\tif(f[u]>0) ans[f[u]]+=min(len[u],endd[f[u]]-st[u]);\n}\n\nint main() {\n\tc=read();\n\trep(i,1,c) {\n\t\tscanf(\"%s\",str+1); m=strlen(str+1);\n\t\trep(j,1,m) s[++n]=str[j]-'a', col[n]=i;\n\t\ts[++n]=(i==c?27:26), col[n]=i, endd[i]=n;\n\t\trep(j,n-m,n) extend(s[j]);\n\t}\n\trep(i,1,cnt) if(len[i]>n) len[i]=n-st[i]+1;\n\tdfs1(1,0);\n\tdfs2(1,0);\n\trep(i,1,c) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1614943123,
        "uid": 180652,
        "name": "_lgswdn",
        "ccfLevel": 0,
        "title": "P4081 [USACO17DEC]Standing Out from the Herd P"
    },
    {
        "content": "\u8003\u8651\u6211\u4eec\u4f1a\u7528\u7684\u4e1c\u897f\uff0c\u5982\u679c\u5bf9\u4e00\u4e2a\u4e32\u5efa\u540e\u7f00\u6811\n\n\u90a3\u4e48\u540e\u7f00\u6811\u4e2d\u6240\u6709\u8fb9\u7684\u957f\u5ea6\u548c\u5373\u4e3a\u4e0d\u540c\u5b57\u4e32\u4e2a\u6570\n\n\u90a3\u4e48\u8003\u8651\u6211\u4eec\u7684\u6837\u4f8b\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/z7xvzbfv.png)\n\n~~\u901a\u8fc7\u5927\u91cf\u89c2\u5bdf~~\n\n\u6211\u4eec\u53d1\u73b0\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u5b50\u6811\u4e2d\u53f6\u8282\u70b9\u6240\u5904\u540e\u7f00\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4e32\n\n\u90a3\u4e48\u7b54\u6848\u52a0\u4e0a\u8be5\u70b9\u4e0a\u65b9\u5c5e\u4e8e\u8be5\u4e32\u7684\u957f\u5ea6\n\n\u6240\u4ee5\u4e0d\u5141\u8bb8\u7ecf\u8fc7\u5206\u9694\u7b26\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<cctype>\n#include<set>\n#include<queue>\n#define M 400100\n#define N 500100\n#define inf 2e9\n#define LL long long\nconst int mod=998244353;\nusing namespace std;\ninline int read(){\n\tint f=1,x=0;char s=getchar();\n\twhile (!isdigit(s)){if(s=='-')f=-1;s=getchar();}\n\twhile (isdigit(s)){x=(x<<1)+(x<<3)+(s^48),s=getchar();}\n\treturn x*f;\n}\nint n,q,strl,strcnt,ref[M],ans[M],ed[M],lens[M];\nchar str[200100];\nstruct Suffix_Tree{\n\tint\tlink[M<<1],len[M<<1],ch[M<<1][28],start[M<<1],tot,rem,now,s[M<<1],col[M<<1];\n\tinline void reset(void){\n\t\tmemset(ch[tot],0,sizeof(ch[tot])); \n\t\twhile (tot--) memset(ch[tot],0,sizeof(ch[tot]));\n\t\tlen[0]=inf,tot=1,n=rem=0,now=1;\t\n\t}\n\tinline int New(int st,int le){start[++tot]=st,len[tot]=le,link[tot]=1;return tot;}\n\tinline void extend(int x){\n\t\ts[++n]=x,rem++;\n\t\tfor (int last=1;rem;){\n\t\t\twhile (rem>len[ch[now][s[n-rem+1]]])\n\t\t\t\trem-=len[now=ch[now][s[n-rem+1]]];\n\t\t\tint &v=ch[now][s[n-rem+1]],c=s[start[v]+rem-1];\n\t\t\tif (!v||x==c){\n\t\t\t\tlink[last]=now,last=now;\n\t\t\t\tif (!v) v=New(n-rem+1,inf);\n\t\t\t\telse break;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint u=New(start[v],rem-1);\n\t\t\t\tch[u][c]=v,ch[u][x]=New(n,inf);\n\t\t\t\tstart[v]+=rem-1,len[v]-=rem-1;\n\t\t\t\tlink[last]=v=u,last=u;\n\t\t\t}\n\t\t\tif (now==1) rem--;else now=link[now];\n\t\t}\n\t}\n\tinline void adjust(int x){\n\t\tint cnt=0;\n\t\tfor (register int i=0;i<=27;++i)\n\t\t\tif (ch[x][i]) cnt++,adjust(ch[x][i]);\n\t\tif (!cnt) len[x]=strl-start[x]+1;\n\t}\n\tinline void redfs(int x,int dep){\n\t\tint cnt=0;\n\t\tfor (register int i=0;i<=27;++i)\n\t\t\tif (ch[x][i]){\n\t\t\t\tcnt++,redfs(ch[x][i],dep+len[ch[x][i]]);\n\t\t\t\tif ((col[x]!=col[ch[x][i]]&&col[x]!=0)||col[ch[x][i]]==-1){col[x]=-1;continue;}\n\t\t\t\tcol[x]=col[ch[x][i]];\n\t\t\t}\n\t\tif (!cnt) col[x]=ref[strl-dep+1];\n\t}\n\tinline void dfs(int x,int dep){\n\t\tif (!(ref[start[x]]!=ref[start[x]+len[x]-1]||!ref[start[x]]||!ref[start[x]+len[x]-1])||x==1){\n\t\t\tfor (int i=0;i<=27;i++)\n\t\t\t\tif (ch[x][i])\n\t\t\t\t\tdfs(ch[x][i],dep+len[ch[x][i]]);\n\t\t}\t\n\t\tif (col[x]>0) ans[col[x]]+=min(len[x],ed[col[x]]-start[x]+1);\n\t}\n}tree;\nsigned main(void){\n//\tfreopen(\"P4081_3.in\",\"r\",stdin);\n//\tfreopen(\"myout.out\",\"w\",stdout);\n\tstrcnt=read(),tree.reset();\n\tfor (int i=1;i<=strcnt;i++){\n\t\tscanf(\"%s\",str+1);\n\t\tlens[i]=strlen(str+1);ed[i]=strl+lens[i];\n\t\tfor (int j=strl+1;j<=strl+lens[i];j++) ref[j]=i;\n\t\tfor (int j=1;j<=lens[i];j++) tree.extend(str[j]-'a');\n\t\ttree.extend(i==strcnt?27:26),strl+=lens[i]+1;\n\t}strl--;\n\ttree.adjust(1);\n\ttree.redfs(1,0);\n\ttree.dfs(1,0);\n\tfor (int i=1;i<=strcnt;i++) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1586786976,
        "uid": 78290,
        "name": "Polaris_Dane",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4081 \u3010[USACO17DEC]Standing Out from the Herd P\u3011"
    },
    {
        "content": "\u5efa\u4e2a\u5e7f\u4e49sam\n\n\u6211\u4e0d\u4f1a\u7528\u4ec0\u4e48vis\u6570\u7ec4\u6253\u6807\u8bb0\n\n\u6211\u4e5f\u6ca1\u5199\u4ec0\u4e48set\u542f\u53d1\u5f0f\u5408\u5e76\n\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\n\n\u5efa\u5e7f\u4e49sam\u7684\u65f6\u5019\u5224\u91cd\u4f1a\u597d\u70b9\uff0c\u5c31\u662f\u770b\u662f\u5426\u9700\u8981\u65b0\u5efanp\u7c7b\u8282\u70b9\uff0c\u56e0\u4e3a\u5982\u679c\u5df2\u7ecf\u6709\u4e86\u53ef\u4ee5\u76f4\u63a5\u5171\u7528\uff0c\u8fd9\u4e2a\u8282\u70b9\u540c\u65f6\u4eab\u6709\u4e24\u79cd\u989c\u8272(\u989c\u8272\u5373\u4e32\u7684\u7f16\u53f7)\n\n\u7136\u540e\u5728parent\u6811\u4e0a\u4e00\u6ce2\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u5185\u6709\u591a\u5c11\u79cd\u989c\u8272\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u4ee3\u8868\u7684\u5b50\u4e32\u662f\u72ec\u7279\u7684\uff0c\u90a3\u5b83\u5b50\u6811\u5185\u5fc5\u7136\u53ea\u6709\u4e00\u79cd\u989c\u8272\uff0c\u4e00\u4e2a\u8282\u70b9\u80fd\u591f\u4ee3\u8868$len[p]-len[fa[p]]$\u4e2a\u5b50\u4e32\uff0c\u628a\u8be5\u79cd\u989c\u8272\u7684\u7b54\u6848\u52a0\u4e0a\u8fd9\u4e2a\u73a9\u610f\u5373\u53ef\n\n```cpp\n#include<cstdio>\n#include<cstring>\ntemplate<class type>inline const void write(type out)\n{\n\tif (out>9)write(out/10);\n\tputchar(out%10+48);\n}\ntemplate<class type>inline const void writeln(type out)\n{\n\tif (out<0)out=-out,putchar('-');\n\twrite(out);\n\tputchar('\\n');\n}\nconst int N=1e5+10;\ntypedef long long ll;\nint n;\nll *ans;\nchar s[N];\ntemplate<int maxn>class Segment_Tree\n{\n\tprivate:\n\t\tstruct tree\n\t\t{\n\t\t\tint sum;\n\t\t\ttree *lson,*rson;\n\t\t\tinline const void pushup()\n\t\t\t{\n\t\t\t\tsum=lson->sum+rson->sum;\n\t\t\t}\n\t\t\tinline const int findonly(int l,int r)\n\t\t\t{\n\t\t\t\tif (l==r)return l;\n\t\t\t\tint mid=l+r>>1;\n\t\t\t\tif (lson->sum)return lson->findonly(l,mid);\n\t\t\t\treturn rson->findonly(mid+1,r);\n\t\t\t}\n\t\t}*root[maxn],memory_pool[maxn*40],*tail,*null;\n\t\tinline const void init()\n\t\t{\n\t\t\ttail=memory_pool;\n\t\t\tnull=tail++;\n\t\t\tnull->lson=null->rson=null;\n\t\t\tfor (int i=1;i<maxn;i++)root[i]=null;\n\t\t}\n\t\tinline tree *spawn()\n\t\t{\n\t\t\ttree *p=tail++;\n\t\t\tp->lson=p->rson=null;\n\t\t\treturn p;\n\t\t}\n\t\tinline const void insert(tree *&p,int l,int r,int pos)\n\t\t{\n\t\t\tif (p==null)p=spawn();\n\t\t\tp->sum++;\n\t\t\tif (l==r)return;\n\t\t\tint mid=l+r>>1;\n\t\t\tif (pos<=mid)insert(p->lson,l,mid,pos);\n\t\t\telse insert(p->rson,mid+1,r,pos);\n\t\t}\n\t\tinline tree *merge(tree *a,tree *b,int l,int r)\n\t\t{\n\t\t\tif (a==null&&b==null)return null;\n\t\t\tif (a==null)return b;\n\t\t\tif (b==null)return a;\n\t\t\ttree *p=spawn();\n\t\t\tif (l==r)return p->sum=a->sum|b->sum,p;\n\t\t\tint mid=l+r>>1;\n\t\t\tp->lson=merge(a->lson,b->lson,l,mid);\n\t\t\tp->rson=merge(a->rson,b->rson,mid+1,r);\n\t\t\tp->pushup();\n\t\t\treturn p;\n\t\t}\n\tpublic:\n\t\tinline Segment_Tree(){init();}\n\t\tinline const void insert(int p,int k)\n\t\t{\n\t\t\tinsert(root[p],1,n,k);\n\t\t}\n\t\tinline const int query(int p)\n\t\t{\n\t\t\treturn root[p]->sum;\n\t\t}\n\t\tinline const void merge(int a,int b)\n\t\t{\n\t\t\troot[a]=merge(root[a],root[b],1,n);\n\t\t}\n\t\tinline const int findonly(int p)\n\t\t{\n\t\t\treturn root[p]->findonly(1,n);\n\t\t}\n};\ntemplate<int maxn,int maxc>class Suffix_Automaton\n{\n\tprivate:\n\t\tstatic const int maxs=maxn<<1;\n\t\tll ans[maxn];\n\t\tvector<int>own[maxs];\n\t\tSegment_Tree<maxs>sgt;\n\t\tint head[maxs],edc,to[maxs],next[maxs];\n\t\tint len[maxs],last,cnt,son[maxs][maxc],fa[maxs];\n\t\tinline const void addedge(int u,int v)\n\t\t{\n\t\t\tnext[++edc]=head[u];to[head[u]=edc]=v;\n\t\t}\n\t\tinline const void extend(int id,int c)\n\t\t{\n\t\t\tint p=last;\n\t\t\tif (!son[p][c])\n\t\t\t{\n\t\t\t\tint np=++cnt;\n\t\t\t\tsgt.insert(np,id);\n\t\t\t\tlen[last=np]=len[p]+1;\n\t\t\t\tfor (;p&&!son[p][c];p=fa[p])son[p][c]=np;\n\t\t\t\tif (!p)return fa[np]=1,void();\n\t\t\t\tint q=son[p][c];\n\t\t\t\tif (len[q]==len[p]+1)return fa[np]=q,void();\n\t\t\t\tint nq=++cnt;len[nq]=len[p]+1;\n\t\t\t\tmemcpy(son[nq],son[q],sizeof(son[q]));\n\t\t\t\tfa[nq]=fa[q];fa[q]=fa[np]=nq;\n\t\t\t\tfor (;son[p][c]==q;p=fa[p])son[p][c]=nq;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint q=son[p][c];\n\t\t\tif (len[q]==len[p]+1)return sgt.insert(last=q,id);\n\t\t\tint nq=++cnt;len[nq]=len[p]+1;\n\t\t\tmemcpy(son[nq],son[q],sizeof(son[q]));\n\t\t\tfa[nq]=fa[q];fa[q]=nq;\n\t\t\tfor (;son[p][c]==q;p=fa[p])son[p][c]=nq;\n\t\t\tsgt.insert(last=nq,id);\n\t\t}\n\t\tinline const void dfs(int p)\n\t\t{\n\t\t\tfor (int i=head[p];i;i=next[i])dfs(to[i]),sgt.merge(p,to[i]);\n\t\t}\n\tpublic:\n\t\tinline Suffix_Automaton():cnt(1){}\n\t\tinline const void insert(int id,char *s)\n\t\t{\n\t\t\tlast=1;\n\t\t\tint n=strlen(s+1);\n\t\t\tfor (int i=1;i<=n;i++)extend(id,s[i]-'a');\n\t\t}\n\t\tinline ll *build()\n\t\t{\n\t\t\tfor (int i=2;i<=cnt;i++)addedge(fa[i],i);\n\t\t\tdfs(1);\n\t\t\tfor (int i=1;i<=cnt;i++)\n\t\t\t\tif (sgt.query(i)==1)\n\t\t\t\t\tans[sgt.findonly(i)]+=len[i]-len[fa[i]];\n\t\t\treturn ans;\n\t\t}\n};\nSuffix_Automaton<N,26>sam;\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor (int i=1;i<=n;i++)scanf(\"%s\",s+1),sam.insert(i,s);\n\tans=sam.build();\n\tfor (int i=1;i<=n;i++)writeln(ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1570699964,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4081 \u3010[USACO17DEC]Standing Out from the Herd\u3011"
    },
    {
        "content": "\u6bd4\u8f83\u88f8\u7684 sam \uff0c\u4e89\u53d6\u4e00\u904d A \n\n\u4e09\u500d\u7ecf\u9a8c\uff1a \n\n[\u8116\u5b50oj 3277 \u4e32](https://www.lydsy.com/JudgeOnline/problem.php?id=3277)\n\n[\u6d1b\u5495 SP8093  JZPGYZ](https://www.luogu.org/problemnew/show/SP8093)\n\n\uff08\u6ce8\u610f\u53ea\u662f\u7c7b\u4f3c\u7684\u505a\u6cd5\u800c\u5df2\uff09\n\n\n# noteskey\n\n\n\u540c\u4e0a\uff0c\u7c7b\u4f3c\u7684\u505a\u6cd5\u5c31\u662f\u6240\u6709\u4e32\u8dd1\u4e00\u4e2a sam \uff08\u6709\u70b9\u50cf\u5e7f\u4e49 sam \u4f46\u53c8\u4e0d\u662f\u5e7f\u4e49 sam \u7684\u5efa\u6cd5\uff09\uff0c\u987a\u4fbf\u8bb0\u5f55\u4e00\u4e0b np \n\n\u7136\u540e\u4e00\u901a\u4e71\u641e\u641e\u51fa\u6240\u6709\u8282\u70b9\u7684 num \u503c\uff08\u5f53\u524d\u4e32 p \u53ea\u5728\u4e00\u4e2a\u4e32\u4e2d\u51fa\u73b0\u5219\u662f $len[p]-len[fa[p]]$\uff0c\u5426\u5219\u4e3a 0\uff09\n\n\u7136\u540e\u6211\u4eec\u8be2\u95ee\u7684\u65f6\u5019\u53bb\u627e\u5f53\u524d\u4e32\u6240\u6709\u8bb0\u5f55\u4e0b\u6765\u7684\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u6211\u4eec\u8003\u8651\u8dd1\u5b83 parent \u6811\u4e0a\u7684 fa\uff0c\u5982\u679c\u8bf4\u5f53\u524d\u8bbf\u95ee\u8fc7\u5c31 break \n\n\u7136\u540e\u590d\u6742\u5ea6\u662f $O(\\sum_{i=1}^n{len_s})$ \u7684\uff0c\u4e5f\u5c31\u662f 1e5\n\n\u8be2\u95ee\u7684\u65f6\u5019\u6709\u70b9\u6e05\u65b0...\n\n\n# code\n\n```\n//by Judge\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#define Rg register\n#define fp(i,a,b) for(Rg int i=(a),I=(b)+1;i<I;++i)\n#define fd(i,a,b) for(Rg int i=(a),I=(b)-1;i>I;--i)\n#define go(G,u) for(Rg int i=G.head[u],v=G.e[i].to;i;v=G.e[i=G.e[i].nxt].to)\n#define ll long long\nusing namespace std;\nconst int M=2e5+3;\ntypedef int arr[M];\n#ifndef Judge\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#endif\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){ int x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n} inline void reads(string& s){ char c=getchar();\n\tfor(;!isalpha(c);c=getchar()); s=\" \";\n\tfor(;isalpha(c);c=getchar()) s+=c;\n} char sr[1<<21],z[20];int CCF=-1,Z;\ninline void Ot(){fwrite(sr,1,CCF+1,stdout),CCF=-1;}\ninline void print(ll x,char chr='\\n'){\n    if(CCF>1<<20)Ot();if(x<0)sr[++CCF]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++CCF]=z[Z],--Z);sr[++CCF]=chr;\n} int n; string s[M];\nstruct SAM{ int las,cnt; SAM(){las=cnt=1;}\n\tarr fa,len,c,sa,num,vis; int to[M][26];\n\tinline void insert(int c,int now){\n\t\tint p=las,np=las=++cnt;\n\t\tlen[np]=len[p]+1; F.add(now,np);\n\t\tfor(;p&&!to[p][c];p=fa[p]) to[p][c]=np;\n\t\tif(!p) return fa[np]=1,void(); int q=to[p][c];\n\t\tif(len[q]==len[p]+1) return fa[np]=q,void();\n\t\tint nq=++cnt; len[nq]=len[p]+1,fa[nq]=fa[q];\n\t\tfa[q]=fa[np]=nq,memcpy(to[nq],to[q],sizeof to[q]);\n\t\tfor(;p&&to[p][c]==q;p=fa[p]) to[p][c]=nq;\n\t}\n\tstruct Gr{ int pat,head[M]; struct Edge{int to,nxt;}e[M];\n\t\tinline void add(int u,int v){e[++pat]={v,head[u]},head[u]=pat;}\n\t}G,F;\n\tvoid dfs(int u){ num[u]+=num[fa[u]]; go(G,u) dfs(v); }\n\tinline void calc(){\n\t\tfp(i,1,n){ int now=1;\n\t\t\tfp(j,1,s[i].length()-1){\n\t\t\t\tint p=now=to[now][s[i][j]-'a'];\n\t\t\t\tfor(;p&&vis[p]^i;p=fa[p]) vis[p]=i,++num[p];\n\t\t\t}\n\t\t} memset(vis,0,(cnt+2)<<2);\n\t\tfp(i,1,cnt) G.add(fa[i],i); num[0]=num[1]=0;\n\t\tfp(i,1,cnt) num[i]=(num[i]==1)?len[i]-len[fa[i]]:0;\n\t}\n\tinline void solv(int u){ ll ans=0;\n\t\tgo(F,u){ int p=v;\n\t\t\tfor(;p&&vis[p]^u;p=fa[p])\n\t\t\t\tvis[p]=u,ans+=num[p];\n\t\t} print(ans);\n\t}\n}p;\nint main(){ n=read();\n\tfp(i,1,n) reads(s[i]);\n\tfp(i,1,n){ p.las=1;\n\t\tfp(j,1,s[i].length()-1)\n\t\t\tp.insert(s[i][j]-'a',i);\n\t} p.calc();\n\tfp(i,1,n) p.solv(i);\n\treturn Ot(),0;\n}\n```\n\n",
        "postTime": 1554687380,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4081 \u3010[USACO17DEC]Standing Out from the Herd\u3011"
    },
    {
        "content": "## BZOJ5137&&lg4081(\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\uff0cset\u542f\u53d1\u5f0f\u5408\u5e76) ##\n### \u9898\u9762\n\u81ea\u5df1\u627e\u53bb\n### HINT\n\u7ed9\u5b9a\u591a\u4e2a\u6587\u672c\u4e32\uff0c\u8ba9\u4f60\u67e5\u8be2\u6bcf\u4e2a\u6587\u672c\u4e32\u4e2d\u6709\u591a\u5c11\u4e2a\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e14\u8fd9\u4e2a\u5b50\u4e32\u53ea\u51fa\u73b0\u5728\u5f53\u524d\u8fd9\u4e2a\u6587\u672c\u4e32\u4e2d\u3002\n\u628a\u9898\u76ee\u62c6\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u4f60\u8981\u5148\u786e\u5b9a\u8fd9\u4e2a\u5b50\u4e32\u51fa\u73b0\u5728\u591a\u5c11\u4e2a\u6587\u672c\u4e32\u4e2d\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528set\u542f\u53d1\u5f0f\u5408\u5e76\u67e5\u8be2\u51fa\u6765\uff0c\u6c42\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u7684\u6570\u76ee\u4e5f\u5c31\u662f$\\sum_{u=1}^{tot}{node[u].len-node[fa].len}$\u90a3\u4e48\u6211\u4eec\u4e5f\u5c31\u53ea\u8981\u7b5b\u9009\u51fa\u54ea\u4e9b\u8282\u70b9\u6ee1\u8db3\u6761\u4ef6\u7136\u540e\u6c42\u4e2a\u548c\u5c31\u597d\u4e86\n#### tips\n\u6211\u81ea\u5df1\u5199\u4e86\u4e2a\u5947\u602a\u505a\u6cd5\uff0c\u5c31\u662f\u5728\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u65f6\u5019\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u7684$size()==1$\u6211\u4eec\u4e5f\u5c31\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u4e00\u4e2a\u662f\u4ec0\u4e48\uff0c\u56e0\u4e3a\uff0c\u5728\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u65f6\u5019\uff0c**set[v]\u4f1a\u88ab\u4fee\u6539**\n```cpp\n#include<bits/stdc++.h>\n#include<set>\nusing namespace std;\nconst int maxn=200010;\ninline int read(){\n    int w=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9'){\n        w=(w<<3)+(w<<1)+ch-48;\n        ch=getchar();\n    }\n    return w*f;\n}\nint n,m;\nbool debug;\nset<int> s[maxn];\nset<int>::iterator it;\nstruct SUFFIXAUTOMATON{\n\tstruct Node{\n\t\tint len,fa;\n\t\tmap<int,int> ch;\n\t}node[200010];\n\tint lst,tot,root;\n\tinline void init(){\n\t\tlst=tot=root=1;return;\n\t}\n\tinline void extend(int now,int id){\n        int p=lst;tot++;lst=tot;int np=tot;\n        node[np].len=node[p].len+1;s[np].insert(id);\n        while(p&&!node[p].ch[now]){\n            node[p].ch[now]=np;\n            p=node[p].fa;\n        }\n        if(!p) node[np].fa=1;\n        else{\n            int q=node[p].ch[now];\n            if(node[q].len==node[p].len+1){\n                node[np].fa=q;\n            }\n            else{\n                int nq=++tot;node[nq]=node[q];\n                node[nq].len=node[p].len+1;\n                node[q].fa=nq;node[np].fa=nq;\n                while(p&&node[p].ch[now]==q){\n                    node[p].ch[now]=nq;\n                    p=node[p].fa;\n                }\n            }\n        }\n    }\n}SAM;\nstring ch[200010];\nint cnt,head[200010],sum[200010];\nint id[200010];\nstruct Edge{\n\tint from,to,next;\n}edge[1200010];\ninline void addedge(int u,int v){\n\tcnt++;\n\tedge[cnt].from=u;\n\tedge[cnt].to=v;\n\tedge[cnt].next=head[u];\n\thead[u]=cnt;\n}\ninline void dfs(int u){\n\tfor(int i=head[u];i;i=edge[i].next){\n\t\tint v=edge[i].to;dfs(v);\n\t\tif(s[u].size()<s[v].size()) swap(s[u],s[v]);\n\t\tfor(it=s[v].begin();it!=s[v].end();it++){\n\t\t\ts[u].insert(*it);\n\t\t}\n\t}\n\tsum[u]=s[u].size();\n\tif(sum[u]==1){\n\t\tit=s[u].begin();id[u]=*it;\n\t}\n}\nint ans[200010];\nint main(){\n\tn=read();SAM.init();\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>ch[i];int len=ch[i].length();\n\t\tfor(int j=0;j<len;j++){\n\t\t\tSAM.extend(ch[i][j]-'a'+1,i);\n\t\t}\n\t\tSAM.lst=1;\n\t}\n\tfor(int i=2;i<=SAM.tot;i++){\n\t\taddedge(SAM.node[i].fa,i);\n\t}\n\tdfs(1);\n\t//debug=true;\n\tif(debug){\n\t\tfor(int i=1;i<=SAM.tot;i++){\n\t\t\tfor(int j=1;j<=26;j++){\n\t\t\t\tif(SAM.node[i].ch[j]){\n\t\t\t\t\tcout<<i<<\" \"<<SAM.node[i].ch[j]<<\" \"<<(char)('a'+j-1)<<endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(debug){\n\t\tfor(int i=1;i<=SAM.tot;i++){\n\t\t\tcout<<i<<\" \"<<id[i]<<endl;\n\t\t}\n\t}\n\tfor(int u=1;u<=SAM.tot;u++){\n\t\tif(sum[u]!=1) continue;\n\t\tint f=SAM.node[u].fa;\n\t\tans[id[u]]+=SAM.node[u].len-SAM.node[f].len;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tprintf(\"%d\\n\",ans[i]);\n\t}\n\tif(debug){\n\t\tint cur=0;\n\t\tfor(int i=1;i<=SAM.tot;i++){\n\t\t\tint f=SAM.node[i].fa;\n\t\t\tcur+=SAM.node[i].len-SAM.node[f].len;\n\t\t}\n\t\tcout<<cur<<endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1554020103,
        "uid": 106035,
        "name": "\u6e29\u8bcd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4081 \u3010[USACO17DEC]Standing Out from the Herd\u3011"
    },
    {
        "content": "\u5bf9\u8fd9\u4e9b\u4e32\u5efa\u7acb\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u4e32\u5728\u81ea\u52a8\u673a\u4e0a\u8dd1\u4e00\u4e0b\uff0c\u7136\u540e\u628a\u7ecf\u8fc7\u7684\u70b9\u4ee5\u53ca\u4ed6\u4eec\u7684$parent$\u6811\u4e0a\u7684\u7956\u5148\u5168\u90e8\u6807\u8bb0\u4e0a\u5f53\u524d\u4e32\u7684\u7f16\u53f7\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u6807\u8bb0\u4e86\u4e24\u6b21\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u6240\u4ee3\u8868\u7684\u5b50\u4e32\u5fc5\u7136\u4e0d\u662f\u672c\u8d28\u76f8\u540c\u7684\uff0c\u5c31\u4e0d\u80fd\u7b97\u3002\n\n\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u5c31\u76f4\u63a5\u679a\u4e3e\u81ea\u52a8\u673a\u4e0a\u7684\u6bcf\u4e2a\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u53ea\u88ab\u6807\u8bb0\u4e86\u4e00\u6b21\u5c31\u7ed9\u7b54\u6848\u7edf\u8ba1\u4e0a\u5f53\u524d\u70b9\u4ee3\u8868\u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e2a\u6570\uff0c\u5373$maxl[p]-maxl[par[p]]$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(\\sum len_i)$\u3002\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\n \nvoid read(int &x) {\n    x=0;int f=1;char ch=getchar();\n    for(;!isdigit(ch);ch=getchar()) if(ch=='-') f=-f;\n    for(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';x*=f;\n}\n \nvoid print(int x) {\n    if(x<0) putchar('-'),x=-x;\n    if(!x) return ;print(x/10),putchar(x%10+48);\n}\nvoid write(int x) {if(!x) putchar('0');else print(x);putchar('\\n');}\n\nconst int maxn = 3e5+10;\n\nchar ss[maxn],s[maxn];\nint n,qs=1,cnt=1,lstp=1,tot;\nint tr[maxn][27],par[maxn],ml[maxn],vis[maxn],len[maxn],ans[maxn];\n\nvoid append(int x) {\n\tint p=lstp,np=++cnt;lstp=np,ml[np]=ml[p]+1;\n\tfor(;p&&tr[p][x]==0;p=par[p]) tr[p][x]=np;\n\tif(p==0) return par[np]=qs,void();\n\tint q=tr[p][x];\n\tif(ml[p]+1<ml[q]) {\n\t\tint nq=++cnt;ml[nq]=ml[p]+1;\n\t\tmemcpy(tr[nq],tr[q],sizeof tr[nq]);\n\t\tpar[nq]=par[q],par[q]=par[np]=nq;\n\t\tfor(;p&&tr[p][x]==q;p=par[p]) tr[p][x]=nq;\n\t} else par[np]=q;\n}\n\nint main() {\n\tread(n);\n\tfor(int i=1;i<=n;i++) {\n\t\tscanf(\"%s\",ss+1);len[i]=strlen(ss+1);lstp=qs;\n\t\tfor(int j=1;j<=len[i];j++) s[++tot]=ss[j],append(ss[j]-'a'+1);\n\t}\n\ttot=0;\n\tfor(int p,i=1;i<=n;i++)\n\t\tfor(int now=qs,j=1;j<=len[i];j++) {\n\t\t\tnow=tr[now][s[++tot]-'a'+1];\n\t\t\tfor(p=now;p&&vis[p]!=-1&&vis[p]!=i;p=par[p])\n\t\t\t\tif(vis[p]!=0) vis[p]=-1;else vis[p]=i;\n\t\t}\n\tfor(int i=1;i<=cnt;i++) if(vis[i]!=-1) ans[vis[i]]+=ml[i]-ml[par[i]];\n\tfor(int i=1;i<=n;i++) write(ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1551694791,
        "uid": 50777,
        "name": "Hyscere",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4081 \u3010[USACO17DEC]Standing Out from the Herd\u3011"
    }
]