[
    {
        "content": "## \u7b80\u8ff0\u9898\u610f\uff1a\n\n$m$\u6761\u5355\u5411\u8fb9\u8fde\u63a5$n$\u4e2a\u57ce\u5e02\uff0c\u901a\u8fc7\u6bcf\u8fb9\u8981$w_i$\u5355\u4f4d\u65f6\u95f4\u3002\u4ece$1$\u5f00\u59cb\uff0c\u4f9d\u6b21\u6467\u6bc1\u57ce\u5e02\uff0c**\u4ec5\u4ec5\u6467\u6bc1\u4e0d\u7528\u65f6\u95f4**\uff0c\u76f4\u5230\u6467\u6bc1$n$\u7ed3\u675f\u3002\u90e8\u5206\u57ce\u5e02\u88ab\u522b\u7684\u57ce\u5e02\u4fdd\u62a4\uff0c\u53ea\u6709\u4fdd\u62a4\u5b83\u7684\u57ce\u5e02\u88ab\u6467\u6bc1\u540e\uff0c\u624d\u80fd\u6467\u6bc1\u8fd9\u4e2a\u57ce\u5e02\u3002\u6c42\u7ed3\u675f\u7684\u6700\u77ed\u65f6\u95f4\u3002\n\n~~\u987a\u4fbf\u7ffb\u8bd1\u4e00\u4e0b\u672c\u9898\u4e2d\u552f\u4e00\u7684\u82f1\u6587\u53e5\u5b50\uff1a~~\n> \u795e\u8c15\uff1a\u201cTrust me, earn eternal life.\u201d\n\n> \u201c\u76f8\u4fe1\u6211\uff0c\u83b7\u5f97\u6c38\u6052\u7684\u751f\u547d\u3002\u201d\n\n**\u4ee5\u4e0a\u7ed3\u679c\u6765\u81ea\u767e\u5ea6\u7ffb\u8bd1\u3002**\n\n## \u89e3\u6cd5\n\n\u7531\u9898\u53ef\u77e5\uff0c\u6709\u7684\u57ce\u5e02\u88ab\u4fdd\u62a4\u3002\u8bbe$u$\u88ab$v$\u4fdd\u62a4\uff0c\u6211\u4eec\u4ece$v$\u5efa\u4e00\u6761\u6709\u5411\u8fb9\u5230$u$\uff0c\u5e76\u8bb0\u5f55$u$\u7684\u5165\u5ea6$ind[u]$\u3002\u5e7f\u5ea6\u904d\u5386\u56fe\uff0c\u5728\u6467\u6bc1$v$\u65f6\uff0c\u5220\u53bb$v$\u5230$u$\u7684\u8fb9\uff0c\u5e76\u66f4\u65b0\u5165\u5ea6\u3002\u5f53$ind[u]=0$\u65f6\uff0c\u65b9\u53ef\u8fdb\u5165\u57ce\u5e02$u$\u3002\n\n\u8bbe$arrive[i]$\u8868\u793a\u5230\u8fbe$i$\u7684\u65f6\u95f4\uff08\u53ef\u80fd\u8981\u5728\u95e8\u53e3\u7b49\u5f85\uff09\u3002\u8bbe$into[i]$\u4e3a\u8fdb\u5165$i$\u7684\u65f6\u95f4\uff08\u5373\u4ec0\u4e48\u65f6\u5019\u6240\u6709\u4fdd\u62a4$i$\u7684\u57ce\u5e02\u88ab\u6467\u6bc1\u4e86\uff09\u3002\u8bbe$dis[i]$\u8868\u793a\u6467\u6bc1$i$\u7684\u65f6\u95f4\uff0c\u53ef\u5f97$dis[i]=max(arrive[i],into[i])$\u3002\u8bbe{ $j_n$ }\u4e3a$i$\u7684\u6240\u6709\u524d\u9a71\uff0c\u5219$into[i]=max$ { $into[j_n]$ } \u3002\n\n\u7528Dijkstra\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <queue>\nusing namespace std;\n\nchar ss[1<<17],*A=ss,*B=ss;//\u5feb\u8bfb\ninline char gc(){\n    return A==B&&(B=(A=ss)+fread(ss,1,1<<17,stdin),A==B)?EOF:*A++;\n}\ntemplate<typename qRead>\ninline void qr(qRead &s){\n    char c=gc(); \n    s=0;\n    for(;c<'0'||c>'9';c=gc());\n    for(;c>='0'&&c<='9';c=gc())\n        s=(s<<1)+(s<<3)+(c-'0');\n}\n\nconst int N=3001,M=200001;\n//\u9898\u76ee\u4e2d\u6ca1\u6709\u8bf4\u6709\u591a\u5c11\u5bf9\u4fdd\u62a4\u5173\u7cfb\uff0c\u6240\u4ee5\u5f00\u5927\u70b9\nstruct Edge{//\u5b58\u50a8\u8def\u5f84\n    int node,next,val;\n}edge[M];\nint heade[N],n,m,tote;\nstruct Graph{//\u5b58\u50a8\u4fdd\u62a4\u5173\u7cfb\n    int node,next;\n}graph[M];\nint headg[N],totg;\n\nstruct qnode{\n    int key,len;\n    friend bool operator < (qnode x,qnode y){\n        return x.len<y.len;//\u8d1f\u7684\u8fb9\u6743+\u5927\u6839\u5806\uff0c\u5b9e\u9645\u5c31\u662f\u6700\u77ed\u8def\n    }\n};\nint dis[N],into[N],ind[N],arrive[N];\nbool vis[N];\npriority_queue<qnode> q;\n\nvoid dijkstra(int s){//\u6a21\u677f\n    for(int i=1;i<=n;i++)\n        dis[i]=arrive[i]=1e9;\n    dis[s]=into[s]=arrive[s]=0;\n    ind[s]=0;\n    q.push((qnode){s,0});\n    int u,v;\n    while(!q.empty()){\n        u=q.top().key;\n        q.pop();\n        if(vis[u])\n            continue;\n        vis[u]=1;\n        for(int k=heade[u];k;k=edge[k].next){\n            v=edge[k].node;\n            if(dis[u]+edge[k].val<arrive[v]){\n                arrive[v]=dis[u]+edge[k].val;\n                if(!ind[v]){//\u8bb0\u5f97\u66f4\u65b0\u6467\u6bc1\u7684\u65f6\u95f4~~~\n                    dis[v]=max(into[v],arrive[v]);\n                    q.push((qnode){v,-dis[v]});\n                }\n            }\n        }\n        for(int k=headg[u];k;k=graph[k].next){\n            v=graph[k].node;\n            into[v]=max(into[v],dis[u]);//\u6467\u6bc1\u5f53\u524d\u8282\u70b9\uff0c\u9010\u5c42\u5220\u53bb\u4fdd\u62a4\u5173\u7cfb\n            ind[v]--;\n            if(!ind[v]){//\u600e\u4e48\u6709\u70b9\u50cf\u62d3\u6251\u6392\u5e8f\n                dis[v]=max(into[v],arrive[v]);\n                q.push((qnode){v,-dis[v]});\n            }\n        }\n    }\n}\n\nint main(){\n    qr(n);\n    qr(m);\n    int x,y,l;\n    while(m--){\n        qr(x);\n        qr(y);\n        qr(l);\n        edge[++tote].node=y;\n        edge[tote].next=heade[x];\n        edge[tote].val=l;\n        heade[x]=tote;\n    }\n    for(int i=1;i<=n;i++){\n        qr(x);\n        while(x--){\n            qr(y);\n            ++ind[i];//\u5efa\u7acb\u4fdd\u62a4\u5173\u7cfb\n            graph[++totg].node=i;\n            graph[totg].next=headg[y];\n            headg[y]=totg;\n        }\n    }\n    dijkstra(1);\n    printf(\"%d\\n\",dis[n]);\n    return 0;\n}\n```",
        "postTime": 1551588121,
        "uid": 51198,
        "name": "bits",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2446 \u3010[SDOI2010]\u5927\u9646\u4e89\u9738\u3011"
    },
    {
        "content": "> ### Background\n>\n> \u5728\u4e00\u4e2a\u9065\u8fdc\u7684\u4e16\u754c\u91cc\u6709\u4e24\u4e2a\u56fd\u5bb6\uff1a\u4f4d\u4e8e\u5927\u9646\u897f\u7aef\u7684\u6770\u68ee\u56fd\u548c\u4f4d\u4e8e\u5927\u9646\u4e1c\u7aef\u7684\u514b\u91cc\u65af\u56fd\u3002\u4e24\u4e2a\u56fd\u5bb6\u7684\u4eba\u6c11\u5206\u522b\u4fe1\u4ef0\u4e24\u4e2a\u5bf9\u7acb\u7684\u795e\uff1a\u6770\u68ee\u56fd\u4fe1\u4ef0\u8c61\u5f81\u9ed1\u6697\u548c\u6bc1\u706d\u7684\u795e\u66fe\u00b7\u5e03\u62c9\u6cfd\uff0c\u800c\u514b\u91cc\u65af\u56fd\u4fe1\u4ef0\u8c61\u5f81\u5149\u660e\u548c\u6c38\u6052\u7684\u795e\u65af\u666e\u6797\u00b7\u5e03\u62c9\u6cfd\u3002\n>\n> \u5e7b\u60f3\u53868012\u5e741\u6708\uff0c\u6770\u68ee\u56fd\u6b63\u5f0f\u5ba3\u5e03\u66fe\u00b7\u5e03\u62c9\u6cfd\u662f\u4ed6\u4eec\u552f\u4e00\u4fe1\u4ef0\u7684\u795e\uff0c\u540c\u65f6\u5f00\u59cb\u8feb\u5bb3\u5728\u6770\u68ee\u56fd\u7684\u4fe1\u4ef0\u65af\u666e\u6797\u00b7\u5e03\u62c9\u6cfd\u7684\u514b\u91cc\u65af\u56fd\u6559\u5f92\u3002\n>\n> \u5e7b\u60f3\u53868012\u5e743\u67082\u65e5\uff0c\u4f4d\u4e8e\u6770\u68ee\u56fd\u4e1c\u90e8\u5c0f\u9547\u795e\u8c15\u9547\u7684\u514b\u91cc\u65af\u56fd\u6559\u5f92\u53d1\u52a8\u8d77\u4e49\u3002\n>\n> \u5e7b\u60f3\u53868012\u5e743\u67087\u65e5\uff0c\u795e\u8c15\u9547\u7684\u8d77\u4e49\u88ab\u6770\u68ee\u56fd\u5927\u519b\u4ee5\u6b8b\u9177\u624b\u6bb5\u9547\u538b\u3002\n>\n> \u5e7b\u60f3\u53868012\u5e743\u67088\u65e5\uff0c\u514b\u91cc\u65af\u56fd\u5bf9\u6770\u68ee\u56fd\u5ba3\u6218\u3002\u7531\u6570\u5341\u4e07\u5927\u519b\u7ec4\u6210\u7684\u514b\u91cc\u65af\u519b\u56e2\u5f00\u81f3\u4e24\u56fd\u8fb9\u5883\uff0c\u4e0e\u6770\u68ee\u519b\u56e2\u5bf9\u5cd9\u3002\n>\n> \u5e7b\u60f3\u53868012\u5e744\u6708\uff0c\u514b\u91cc\u65af\u519b\u56e2\u653b\u7834\u6770\u68ee\u519b\u56e2\u9632\u7ebf\u8fdb\u5165\u795e\u8c15\u9547\uff0c\u8be5\u9547\u5e78\u5b58\u7684\u514b\u91cc\u65af\u56fd\u6559\u5f92\u5f97\u5230\u89e3\u653e\u3002\n>\n> \u6218\u4e89\u968f\u540e\u8fdb\u5165\u80f6\u7740\u72b6\u6001\uff0c\u65f7\u65e5\u6301\u4e45\u3002\u6218\u51b5\u60e8\u70c8\uff0c\u4e00\u65f6\u95f4\u67aa\u6797\u5f39\u96e8\uff0c\u785d\u70df\u5f25\u6f2b\uff0c\u6c11\u4e0d\u804a\u751f\u3002\n>\n> ### Description\n>\n> \u5e7b\u60f3\u53868012\u5e745\u670812\u65e5\u6df1\u591c\uff0c\u65af\u666e\u6797\u00b7\u5e03\u62c9\u6cfd\u964d\u4e0b\u795e\u8c15\uff1a\u201cTrust me, earn eternal life.\u201d\u514b\u91cc\u65af\u519b\u56e2\u58eb\u6c14\u5927\u589e\u3002\u4f5c\u4e3a\u514b\u91cc\u65af\u519b\u56e2\u7684\u4e3b\u5e05\uff0c\u4f60\u51b3\u5b9a\u5229\u7528\u8fd9\u4e00\u673a\u4f1a\u53d1\u52a8\u5947\u88ad\uff0c\u4e00\u4e3e\u51fb\u8d25\u6770\u68ee\u56fd\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u6770\u68ee\u56fd\u6709N\u4e2a\u57ce\u5e02\uff0c\u7531M\u6761\u5355\u5411\u9053\u8def\u8fde\u63a5\u3002\u795e\u8c15\u9547\u662f\u57ce\u5e021\u800c\u6770\u68ee\u56fd\u7684\u9996\u90fd\u662f\u57ce\u5e02N\u3002\u4f60\u53ea\u9700\u6467\u6bc1\u4f4d\u4e8e\u6770\u68ee\u56fd\u9996\u90fd\u7684\u66fe\u00b7\u5e03\u62c9\u6cfd\u5927\u795e\u6bbf\uff0c\u6770\u68ee\u56fd\u7684\u4fe1\u4ef0\uff0c\u519b\u961f\u8fd8\u6709\u4e00\u5207\u5c31\u90fd\u4f1a\u571f\u5d29\u74e6\u89e3\uff0c\u7070\u98de\u70df\u706d\u3002\n>\n> \u4e3a\u4e86\u5c3d\u91cf\u51cf\u5c0f\u5df1\u65b9\u7684\u6d88\u8017\uff0c\u4f60\u51b3\u5b9a\u4f7f\u7528\u81ea\u7206\u673a\u5668\u4eba\u5b8c\u6210\u8fd9\u4e00\u4efb\u52a1\u3002\u552f\u4e00\u7684\u56f0\u96be\u662f\uff0c\u6770\u68ee\u56fd\u7684\u4e00\u90e8\u5206\u57ce\u5e02\u6709\u7ed3\u754c\u4fdd\u62a4\uff0c\u4e0d\u7834\u574f\u6389\u7ed3\u754c\u5c31\u65e0\u6cd5\u8fdb\u5165\u57ce\u5e02\u3002\u800c\u6bcf\u4e2a\u57ce\u5e02\u7684\u7ed3\u754c\u90fd\u662f\u7531\u5206\u5e03\u5728\u5176\u4ed6\u57ce\u5e02\u4e2d\u7684\u4e00\u4e9b\u7ed3\u754c\u53d1\u751f\u5668\u7ef4\u6301\u7684\uff0c\u5982\u679c\u60f3\u8fdb\u5165\u67d0\u4e2a\u57ce\u5e02\uff0c\u4f60\u5c31\u5fc5\u987b\u7834\u574f\u6389\u7ef4\u6301\u8fd9\u4e2a\u57ce\u5e02\u7ed3\u754c\u7684\u6240\u6709\u7ed3\u754c\u53d1\u751f\u5668\u3002\n>\n> \u73b0\u5728\u4f60\u6709\u65e0\u9650\u591a\u7684\u81ea\u7206\u673a\u5668\u4eba\uff0c\u4e00\u65e6\u8fdb\u5165\u4e86\u67d0\u4e2a\u57ce\u5e02\uff0c\u81ea\u7206\u673a\u5668\u4eba\u53ef\u4ee5\u77ac\u95f4\u5f15\u7206\uff0c\u7834\u574f\u4e00\u4e2a\u76ee\u6807\uff08\u7ed3\u754c\u53d1\u751f\u5668\uff0c\u6216\u662f\u6770\u68ee\u56fd\u5927\u795e\u6bbf\uff09\uff0c\u5f53\u7136\u673a\u5668\u4eba\u672c\u8eab\u4e5f\u4f1a\u4e00\u8d77\u88ab\u7834\u574f\u3002\u4f60\u9700\u8981\u77e5\u9053\uff1a\u6467\u6bc1\u6770\u68ee\u56fd\u6240\u9700\u7684\u6700\u77ed\u65f6\u95f4\u3002\n>\n> ### Input\n>\n> \u8f93\u5165\u6587\u4ef6\u7684landcraft.in\u7684\u7b2c\u4e00\u884c\u4e24\u4e2a\u6b63\u6574\u6570N, M\u3002\n>\n> \u63a5\u4e0b\u6765M\u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6b63\u6574\u6570ui, vi, wi\uff0c\u8868\u793a\u6709\u4e00\u6761\u4ece\u57ce\u5e02ui\u5230\u57ce\u5e02vi\u7684\u5355\u5411\u9053\u8def\uff0c\u81ea\u7206\u673a\u5668\u4eba\u901a\u8fc7\u8fd9\u6761\u9053\u8def\u9700\u8981wi\u7684\u65f6\u95f4\u3002\n>\n> \u4e4b\u540eN\u884c\uff0c\u6bcf\u884c\u63cf\u8ff0\u4e00\u4e2a\u57ce\u5e02\u3002\u9996\u5148\u662f\u4e00\u4e2a\u6b63\u6574\u6570li\uff0c\u7ef4\u6301\u8fd9\u4e2a\u57ce\u5e02\u7ed3\u754c\u6240\u4f7f\u7528\u7684\u7ed3\u754c\u53d1\u751f\u5668\u6570\u76ee\u3002\u4e4b\u540eli\u4e2a1~N\u4e4b\u95f4\u7684\u57ce\u5e02\u7f16\u53f7\uff0c\u8868\u793a\u6bcf\u4e2a\u7ed3\u754c\u53d1\u751f\u5668\u7684\u4f4d\u7f6e\u3002\u5982\u679cli = 0\uff0c\u5219\u8bf4\u660e\u8be5\u57ce\u5e02\u6ca1\u6709\u7ed3\u754c\u4fdd\u62a4\uff0c\u4fdd\u8bc1l1 = 0 \u3002\n>\n> ### Output\n>\n> \u8f93\u51fa\u6587\u4ef6landcraft.out\u4ec5\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570 \uff0c\u51fb\u8d25\u6770\u68ee\u56fd\u6240\u9700\u7684\u6700\u77ed\u65f6\u95f4\u3002\n\n\u6700\u77ed\u8def\u95ee\u9898,\u7ed3\u679c\u56e0\u4e3a\u6570\u7ec4\u5f00\u5c0f\u6539\u4e86\u597d\u4e45\uff1f\uff1f\uff1f\n\n\u8bb0\u5f55$dis[x]$\u4ee3\u8868\u5230\u8fbe$x$\u7684\u6700\u77ed\u65f6\u95f4\u3002\n\n\u8bb0\u5f55$real[x]$\u4ee3\u8868\u5230\u8fbe$x$\u7684\u5b9e\u9645\u65f6\u95f4\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9,\u6211\u4eec\u53bb\u66f4\u65b0\u5176\u76f8\u8fde\u8282\u70b9\u7684\u65f6\u5019\u8981\u7528$max(dis[x],real[x])$\u53bb\u66f4\u65b0\u3002\n\n\u7136\u540e\u6ce8\u610f**\u5efa\u7acb\u7ed3\u754c\u4fdd\u62a4\u7684\u8fb9\u7684\u65f6\u5019\u5efa$li$\u5230$i$\u7684\u6709\u5411\u8fb9\u3002**\n\n~~\u56e0\u4e3a\u6211\u641e\u4e0d\u6e05\u6240\u4ee5\u76f4\u63a5\u5efa\u53cc\u5411\u8fb9~~\n\n\u7136\u540e\u6700\u540e\u8f93\u51fa\u7b54\u6848\u8f93\u51fa$max(dis[n],real[n])$\u5373\u53ef\u3002\n\n``\u4ee3\u7801``\n\n```c++\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<queue>\n#define R register\n\nusing namespace std;\n\nconst int gz=5e4+8;\n\ninline void in(R int &x)\n{\n\tR int f=1;x=0;char s=getchar();\n\twhile(!isdigit(s)){if(s=='-')f=-1;s=getchar();}\n\twhile(isdigit(s)){x=x*10+s-'0';s=getchar();}\n\tx*=f;\n}\n\nint head[gz],tot,pr[gz],cnt,hd[gz];\n\nstruct cod{int u,v,w;}edge[gz<<1],e[gz<<1];\n\ninline void add(R int x,R int y,R int z)\n{\n\tedge[++tot].u=head[x];\n\tedge[tot].v=y;\n\tedge[tot].w=z;\n\thead[x]=tot;\n}\n\ninline void ado(R int x,R int y)\n{\n\te[++cnt].u=pr[x];\n\te[cnt].v=y;\n\tpr[x]=cnt;\n}\n\nint dis[gz],real[gz],n,m;\n\nbool vis[gz];\n\nstruct hop\n{\n\tint u,d;\n\tbool operator <(const hop&a)const\n\t{\n\t\treturn d>a.d;\n\t};\n};\n\ninline void dij()\n{\n\tfor(R int i=1;i<=n;i++)dis[i]=2147483644;\n\tpriority_queue<hop>q;dis[1]=real[1]=0;\n\tq.push((hop){1,0});\n\twhile(!q.empty())\n\t{\n\t\tR int u=q.top().u;q.pop();\n\t\tif(vis[u])continue;\n\t\tvis[u]=true;\n\t\tR int now=max(dis[u],real[u]);\n\t\tfor(R int i=head[u];i;i=edge[i].u)\n\t\t{\n\t\t\tif(dis[edge[i].v]>now+edge[i].w)\n\t\t\t{\n\t\t\t\tdis[edge[i].v]=now+edge[i].w;\n\t\t\t\tif(hd[edge[i].v]==0)\n\t\t\t\t\tq.push((hop){edge[i].v,max(dis[edge[i].v],real[edge[i].v])});\n\t\t\t}\n\t\t}\n\t\tfor(R int i=pr[u];i;i=e[i].u)\n\t\t{\n\t\t\thd[e[i].v]--;\n\t\t\treal[e[i].v]=max(real[e[i].v],now);\n\t\t\tif(hd[e[i].v]==0)\n\t\t\t\tq.push((hop){e[i].v,max(real[e[i].v],dis[e[i].v])});\n\t\t}\n\t}\n\tprintf(\"%d\\n\",max(real[n],dis[n]));\n}\n\nint main()\n{\n\tin(n),in(m);\n\tfor(R int i=1,x,y,z;i<=m;i++)\n\t{\n\t\tin(x),in(y),in(z);\n\t\tif(x==y)continue;\n\t\tadd(x,y,z);\n\t}\n\tfor(R int i=1,x;i<=n;i++)\n\t{\n\t\tin(x);hd[i]=x;\n\t\tfor(R int fk;x;x--)\n\t\t\tin(fk),ado(fk,i),ado(i,fk);\n\t}\n\tdij();\n}\n```\n\n",
        "postTime": 1542454108,
        "uid": 87960,
        "name": "\u987ez",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2446 \u3010[SDOI2010]\u5927\u9646\u4e89\u9738\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u540c\u7684\u601d\u7ef4\u8fc7\u7a0b\n\n\n\u89c2\u5bdf\u9898\u9762\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\u4e00\u4e2a\u66b4\u529b\u7684\u8d2a\u5fc3\n>\u5148\u628a\u6ca1\u6709\u7ed3\u754c\u4e14\u80fd\u5230\u8fbe\u7684\u57ce\u5e02\u70b8\u4e86\uff0c\u540c\u65f6\u7834\u574f\u4e00\u4e9b\u57ce\u5e02\u7ed3\u754c\uff0c\u518d\u70b8\u6ca1\u6709\u7ed3\u754c\u4e14\u80fd\u5230\u8fbe\u7684\u57ce\u5e02\uff0c\u4e00\u76f4\u5faa\u73af\u4e0b\u53bb\u76f4\u5230\u70b8\u6389\u9996\u90fd\n\n\u663e\u7136\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(N*(N+M)logN)$\uff0c\u4e0d\u80fd\u5f88\u597d\u7684\u89e3\u51b3\u95ee\u9898\n\n\u8003\u8651\u4f18\u5316\n\n\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u4e00\u5b9a\u6309\u7167\u987a\u5e8f\uff1a\u5148\u70b8\u80fd\u70b8\u7684\uff0c\u518d\u62c6\u7ed3\u754c\uff0c\u518d\u70b8\uff0c\u518d\u62c6\u2026\u2026\n\n\u6211\u4eec\u628a\u70b8\u548c\u62c6\u4e00\u8d77\u505a\uff0c\u7528\u5806\u6309\u7167\u65f6\u95f4\u987a\u5e8f\u7ef4\u62a4\u4e8b\u4ef6\u96c6\u5408\n\n\u5b9a\u4e49$d[x]$\u8868\u793a\u57ce\u5e02$x$\u6700\u65e9\u5728\u65f6\u523b$d[x]$\u88ab\u70b8\n\n\u6700\u5f00\u59cb$1$\u53f7\u57ce\u5e02\u88ab\u70b8\n\n\u6bcf\u6b21\u4ece\u5806\u4e2d\u53d6\u51fa\u65f6\u95f4\u6700\u65e9\u7684\u3002\u9996\u5148$Check$\u4e00\u4e0b\u5728\u8be5\u57ce\u7ed3\u754c\u53d1\u751f\u5668\u88ab\u6467\u6bc1\u540e\u54ea\u4e9b\u57ce\u5e02\u6ca1\u6709\u4e86\u7ed3\u754c\u4fdd\u62a4\uff08\u8bb0\u5f55\u5165\u5ea6\u5373\u53ef\uff09\uff0c\u6ca1\u6709\u4fdd\u62a4\u4e4b\u540e\u673a\u5668\u4eba\u662f\u5426\u80fd\u5230\u8fbe\uff08\u770b\u8be5\u57ce\u7684\u6709\u5165\u8fb9\u7684\u57ce\u5e02\u662f\u5426\u5df2\u7ecf\u88ab\u70b8\uff09\uff0c\u5982\u679c\u80fd\u5230\u8fbe\uff0c$d[x]=min(d[x],max(d[in]+val,d[now]))$\uff0c\u5176\u4e2d$now$\u8868\u793a\u5806\u4e2d\u53d6\u51fa\u7684\u57ce\u5e02\uff0c$x$\u8868\u793a\u5931\u53bb\u4fdd\u62a4\u7684\u57ce\u5e02\uff0c$in$\u8868\u793a\u4e00\u4e2a\u88ab\u70b8\u7684\u57ce\u5e02\u4e14\u6709\u8fb9$in->x$\n\n\u7136\u540e\u626b\u63cf$now$\u7684\u6bcf\u6761\u51fa\u8fb9\uff0c\u5982\u679c\u6709\u6ca1\u6709\u4fdd\u62a4\u4e14\u6ca1\u6709\u88ab\u70b8\u7684\u57ce\u5e02\u5c31\u76f4\u63a5\u628a\u5b83\u70b8\u4e86$d[y]=min(d[y],d[x]+val)$\n\n\u6ce8\u610f\u88ab\u70b8\u7684\u57ce\u5e02\u8981\u538b\u5230\u5806\u91cc\n\n---------------\n\n\u7b49\u7b49\uff0c\u6211\u53d1\u73b0\u4e86\u4ec0\u4e48\uff0c\u8fd9\u4e0d\u5c31\u662f$Dij$\u7684\u8fc7\u7a0b\u5417\uff0c\u53d6$min$\u7684\u8fc7\u7a0b\u4e0d\u5c31\u662f\u677e\u5f1b\u7684\u8fc7\u7a0b\n\n\u4e8e\u662f\u6211\u4eec\u5207\u9898\u4e86\n\n$O((N+M)logN)$\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define N 3005\nusing namespace std;\nint n,m,h[N],tot;\nstruct edge{\n\tint to,nxt,val;\n}e[80008];\nvector<int>a[N];\nvector<pair<int,int> >u[N];\nvoid add(int x,int y,int z){\n\te[++tot].to=y;e[tot].val=z;e[tot].nxt=h[x];h[x]=tot;\n\tu[y].push_back(make_pair(x,z));\n}\nint in[N],d[N],v[N];\npriority_queue<pair<int,int> >q;\nvoid dij(){\n\tmemset(d,0x3f,sizeof(d));\n\tq.push(make_pair(0,1));d[1]=0;\n\twhile(!q.empty()){\n\t\tint x=q.top().second;q.pop();\n\t\tv[x]=1;\n\t\trep(i,0,(int)(a[x].size()-1)){\n\t\t\tint y=a[x][i];\n\t\t\tin[y]--;\n\t\t\tif(!in[y]){\n\t\t\t\trep(j,0,(int)(u[y].size()-1))\n\t\t\t\t  d[y]=min(d[y],max(d[u[y][j].first]+u[y][j].second,d[x]));\n\t\t\t\tq.push(make_pair(-d[y],y));\n\t\t\t}\n\t\t}\n\t\tfor(int i=h[x];i;i=e[i].nxt)\n\t\t  if(!v[e[i].to]&&!in[e[i].to])\n\t\t    if(d[e[i].to]>d[x]+e[i].val)\n\t\t      d[e[i].to]=d[x]+e[i].val,q.push(make_pair(-d[e[i].to],e[i].to));\n\t\twhile(!q.empty()&&v[q.top().second])q.pop();\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\trep(i,1,m){\n\t\tint x,y,z;scanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd(x,y,z);\n\t}\n\trep(i,1,n){\n\t\tint t;scanf(\"%d\",&t);\n\t\trep(j,1,t){\n\t\t\tint x;scanf(\"%d\",&x);\n\t\t\ta[x].push_back(i);\n\t\t\tin[i]++;\n\t\t}\n\t}\n\tdij();\n\tprintf(\"%d\\n\",d[n]);\n\treturn 0;\n}\n```",
        "postTime": 1576941387,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2446 \u3010[SDOI2010]\u5927\u9646\u4e89\u9738\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n~~\u539f\u9898\u76ee\u8bf4\u8fd9\u4e48\u957f~~\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u7ecf\u8fc7\u6bcf\u6761\u8fb9\u9700\u8981\u82b1\u8d39\u4e00\u5b9a\u65f6\u95f4\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u8981\u5728\u6307\u5b9a\u7684\u4e00\u4e9b\u8282\u70b9\u5230\u8fbe\u540e\u624d\u53ef\u4ee5\u88ab\u6467\u6bc1\u3002\u6c421\u5230n\u82b1\u8d39\u7684\u6700\u5c11\u65f6\u95f4\u3002\n## \u524d\u7f6e\u77e5\u8bc6\n\u9996\u5148\u6211\u4eec\u6839\u636e\u9898\u76ee\u6c421\u5230n\u7684\u6700\u77ed\u8def\u5f84\u53ef\u4ee5\u60f3\u5230\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3002\n\n\u90a3\u6211\u5c31\u6765\u8bb2\u8bb2\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08Dijkstra\u65b9\u6cd5\uff0c\u5df2\u7ecf\u4f1a\u4e86\u7684\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u90e8\u5206\uff09\uff1a\n\n\u5355\u6e90\u6700\u77ed\u8def\u5f84\u662f\u6c42\u67d0\u4e00\u4e2a\u70b9\uff08\u79f0\u4e3a\u6e90\u70b9\uff09\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\n\nDijkstra\u4e3b\u8981\u601d\u60f3\u662f\u8d2a\u5fc3\u3002\u3002\u3002\n\n\u5c06\u6e90\u70b9\u5230\u5176\u5b83\u6240\u6709\u70b9**\u76ee\u524d**\u7684\u6700\u77ed\u8def\u5f84\u5b58\u5728\u4e00\u4e2adis[ ]\u6570\u7ec4\u4e2d\uff0cdis[i]\u8868\u793a\u5f53\u524d\u6e90\u70b9\u5230\u70b9i\u7684\u8ddd\u79bb\u3002\u521d\u59cb\u65f6\u6e90\u70b9\uff08\u5047\u8bbe\u4e3au\uff09\u5230\u5176\u4ed6\u70b9\u7684dis\u8d4b\u4e3a\u65e0\u7a77\u5927\uff0cdis[u]\uff08\u4e5f\u5c31\u662f\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\uff09\u8d4b\u4e3a0\u3002\n\n\u6bcf\u6b21\u9009\u53d6dis\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\u70b9\uff0c\u62c9\u51fa\u6765\uff0c\u66f4\u65b0\u4e0e\u5176\u76f8\u8fde\u7684\u6240\u6709\u70b9\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u79f0\u4e3a\u677e\u5f1b\u64cd\u4f5c\u3002\u677e\u5f1b\u64cd\u4f5c\u7528\u4e86\u4e00\u4e2a\u8d2a\u5fc3\u7684\u601d\u60f3:\u56e0\u4e3a\u5f53\u524ddis\u5df2\u7ecf\u662f\u6700\u5c0f\u7684\u4e86\uff0c\u7528\u5176\u4ed6\u70b9\u66f4\u65b0\u4e0d\u4f1a\u6bd4\u8fd9\u4e2a\u503c\u66f4\u5c0f\u5bf9\u5427\uff08\u4e5f\u5c31\u662f\u56e0\u4e3a\u8fd9\u4e00\u70b9\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u80fd\u5904\u7406\u8d1f\u6743\u8fb9\uff09\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u80fd~~\u5f88\u5bb9\u6613~~\u5199\u51fa**\u7eaf**\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u4ee3\u7801\uff08\u8fd9\u91cc\u6211\u7528\u7684STL\u7684\u4f18\u5148\u961f\u5217\u6765\u4fdd\u8bc1\u6bcf\u6b21\u53d6\u51fadis\u6700\u5c0f\u7684\u70b9\uff09\uff1a\n```cpp\nstruct node{\n\tint u;//\u8282\u70b9\u7f16\u53f7\n\tll dis;//\u6e90\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\n\tfriend bool operator < (const node p,const node q){\n\t\treturn p.dis>q.dis;//\u91cd\u8f7d\u5c0f\u4e8e\u53f7\uff0c\u6bcf\u6b21\u5f39\u51fadis\u6700\u5c0f\u7684\u90a3\u4e2a\u70b9\n\t}\n};\npriority_queue < node > heap;//\u4f7f\u7528\u4f18\u5148\u961f\u5217\uff08\u4e5f\u53eb\u5806\uff09\u7ef4\u62a4\nvoid Dijkstra()\n{\n\twhile(!heap.empty())\n\t{//\u5f53\u5806\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\n\t\tnode t=heap.top();heap.pop();\n\t\tint now=t.u;\n\t\tif(book[now])continue;//\u5df2\u7ecf\u66f4\u65b0\u8fc7\u5176\u4ed6\u70b9\u8bf4\u660e\u5df2\u7ecf\u786e\u5b9a\u4e0d\u4f1a\u66f4\u5c0f\u4e86\uff0c\u5c31\u4e0d\u7528\u518d\u66f4\u65b0\u4e00\u904d\u5176\u4ed6\u70b9\u54af\n\t\tbook[now]=1;\n\t\tfor(rint i=head[now];i;i=e[i].nxt)\n\t\t{\n\t\t\tint k=e[i].to;\n\t\t\tif(d[now]+e[i].w<d[k])//d[]\u5c31\u662f\u4e0a\u9762\u8bf4\u7684dis\u6570\u7ec4\n\t\t\t{\n\t\t\t\td[k]=d[now]+e[i].w;\n\t\t\t\theap.push(node{k,d[k]});\n\t\t\t}\n\t\t}\n\t}\n}\n```\n## \u89e3\u6cd5solution\n\u5b66\u4f1a\u4e86\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u9898\u8fd8\u6709\u70b9\u4e0e\u4f17\u4e0d\u540c\uff0c\u90a3\u5c31\u662f\u7ed3\u754c\u53d1\u751f\u5668\uff01\uff01\uff01\n\n\u5176\u5b9e\u5bf9\u4e8e\u8fd9\u70b9\u4fe1\u606f\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u4e2aindeg\u6570\u7ec4\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u8fd8\u6709\u591a\u5c11\u91cd\u4fdd\u62a4\uff0c\u5f53indeg[i]\u4e3a0\u4e4b\u540e\u6211\u4eec\u624d\u80fd\u5c06\u8fd9\u4e2a\u70b9\u4e22\u5165\u5806\u4e2d\u3002\u671f\u95f4\u4e5f\u6709\u4e00\u70b9\u9700\u8981\u5904\u7406\uff1a\u5047\u8bbeu\u70b9\u4fdd\u62a4\u4e86i\u70b9\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u7528u\u70b9\u66f4\u65b0i\u70b9\u65f6\uff0c\u8981\u5c06dis[i]\u8d4b\u503c\u4e3amax(dis[i],dis[u])\uff0c\u56e0\u4e3a\u5373\u4f7fdis[i]\u8f83\u5c0f\uff0c\u6211\u4eec\u5230\u8fbei\u70b9\u540e\u4e5f\u53ea\u80fd\u5728\u95e8\u53e3\u7b49\u7740\uff0c\u7b49\u5230\u67d0\u4e2a\u673a\u5668\u4eba\u6467\u6bc1u\u70b9\u540e\u624d\u80fd\u8fdb\u5165i\u70b9\u3002\u6240\u4ee5\u66f4\u65b0\u65f6\u8981\u5c06dis[i]\u8d4b\u4e3amax(dis[u],dis[i])\uff0c\u540c\u65f6\u5c06indeg[i]\u51cf1\uff0c\u5e76\u5224\u65adindeg[i]\u662f\u5426\u4e3a0\uff0c\u82e5\u4e3a0\u5c31\u5c06\u5176\u4e22\u5165\u5806\u4e2d\u3002\n\n\u5269\u4e0b\u7684\u7ec6\u8282\u4e0e\u5177\u4f53\u5b9e\u73b0\u5199\u5728\u4ee3\u7801\u6ce8\u91ca\u4e2d\uff0c\n\n\u8d34\u4e0aCode\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\nint getmin(int x,int y){return x<y?x:y;}\nint getmax(int x,int y){return x>y?x:y;}\n//\u624b\u5199min\u4e0emax\u51fd\u6570\u6bd4\u7b97\u6cd5\u5e93<algorithm>\u4e2d\u7684\u8981\u5feb\nconst int maxn=3000+50;\nconst int maxm=70000+50;\nint n,m;\nint son[maxn][maxn];//son[i]\u8868\u793ai\u6240\u4fdd\u62a4\u7684\u57ce\u5e02\u7f16\u53f7\n//\u6211\u4e5f\u4e0d\u77e5\u9053\u5f53\u65f6\u6211\u4e3a\u4ec0\u4e48\u6ca1\u6709\u7528vector...\nint cnt[maxn];//cnt[i]\u8868\u793ai\u6240\u4fdd\u62a4\u7684\u57ce\u5e02\u6570\u91cf\uff0c\u5f53\u7136\u7528vector\u7684\u8bdd\u8fd9\u4e2a\u4e5f\u4e0d\u5fc5\u8981...\nint indeg[maxn];\u6bcf\u4e2a\u70b9\u8fd8\u53d7\u4fdd\u62a4\u7684\u5c42\u6570\nint d[maxn];//\u5c31\u662fdis[]\u6570\u7ec4\uff0c\u56e0\u4e3a\u7ed3\u6784\u4f53\u91cc\u91cd\u540d\u4e86\u6240\u4ee5\u7528\u7684d\nbool book[maxn];//\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u88ab\u7528\u6765\u66f4\u65b0\u5176\u4ed6\u70b9\u4e86\u6ca1\u6709\nstruct node{\n\tint u;\n\tint dis;\n\tfriend bool operator < (const node p,const node q){\n\t\treturn p.dis>q.dis;\n\t}\n};\nstd::priority_queue < node > heap;\nint rd()\n{\n\tint s=0;\n\tchar ch=getchar();\n\twhile(ch<'0' || ch>'9')ch=getchar();\n\twhile(ch>='0' && ch<='9')\n\t{\n\t\ts=(s<<3)+(s<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn s;\n}//\u5feb\u8bfb\u90e8\u5206\uff0c\u4f46\u597d\u50cf\u5e76\u6ca1\u6709\u5feb\u591a\u5c11\n\nstruct edge{\n\tint to;\n\tint nxt;\n\tint w;\n}e[maxm<<1];\nint head[maxn],tot;\nvoid add(int x,int y,int z)\n{\n\ttot++;\n\te[tot].to=y;\n\te[tot].w=z;\n\te[tot].nxt=head[x];\n\thead[x]=tot;\n}//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\nint main()\n{\n\tn=rd();m=rd();\n\tint x,y,z;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tx=rd();y=rd();z=rd();\n\t\tadd(x,y,z);//\u6ce8\u610f\u662f\u6709\u5411\u8fb9\n\t}\n\tint temp;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tindeg[i]=rd();\n\t\tfor(int j=1;j<=indeg[i];j++)\n\t\t{\n\t\t\ttemp=rd();\n\t\t\tson[temp][++cnt[temp]]=i;//\u7528vector\u5c31\u771f\u7684\u4e0d\u5fc5\u8981\u8fd9\u4e48\u590d\u6742\u7684\u8bfb\u5165\u4e86\n\t\t}\n\t}\n\tmemset(d,0x7f7f7f7f,sizeof(d));//\u6ce8\u610f\u521d\u59cb\u5316\u54e6\n\td[1]=0;\n\theap.push((node){1,0});//\u5c06\u6e90\u70b9\u4e22\u8fdb\u5806\u91cc\uff0c\u56e0\u4e3a\u521d\u59cb\u72b6\u6001\u5b83\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u6700\u77ed\uff0c\u4e3a0\n\twhile(!heap.empty())\n\t{\n\t\tnode nd=heap.top();heap.pop();//\u53d6\u51fa\u5806\u9876\u5143\u7d20\n\t\tint now=nd.u;\n\t\tif(book[now])continue;\n\t\tbook[now]=1;\n\t\tfor(int i=head[now];i;i=e[i].nxt)\n\t\t{\n\t\t\tint k=e[i].to;\n\t\t\tif(d[now]+e[i].w<d[k])\n\t\t\t{\n\t\t\t\td[k]=d[now]+e[i].w;\n\t\t\t\tif(indeg[k]==0)heap.push(node{k,d[k]});\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=cnt[now];i++)\n\t\t{\n\t\t\tint sn=son[now][i];\n\t\t\tindeg[sn]--;\n\t\t\td[sn]=getmax(d[sn],d[now]);//\u8fd9\u5c31\u662f\u6b64\u9898\u7684\u4eae\u70b9\n\t\t\tif(indeg[sn]==0)heap.push((node){sn,d[sn]});//\u4e0d\u53d7\u4efb\u4f55\u4fdd\u62a4\u540e\u624d\u80fd\u5c06\u5176\u4e22\u5165\u5806\n\t\t}\n\t}\n\tprintf(\"%d\",d[n]);\n}\n```\n\n------------\n\nP.S.\u771f\u7684\u975e\u5e38\u63a8\u8350\u5927\u5bb6\u4f7f\u7528vector\uff08\u4e5f\u53eb\u4e0d\u5b9a\u957f\u6570\u7ec4\uff09\u6765\u66ff\u6362\u6389\u4e0a\u9762\u7684son[ ]\u6570\u7ec4\u4e0ecnt[ ]\u6570\u7ec4\uff0c\u4f1a\u65b9\u4fbf\u8bb8\u591a\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u7701\u4e0b\u4e00\u5b9a\u7a7a\u95f4\uff08\u56e0\u4e3a\u5b83\u662f\u4e0d\u5b9a\u957f\u7684\uff09\u3002vector\u7684\u4e3b\u8981\u64cd\u4f5c\u5982\u4e0b\uff1a\n1. vector.push_back(x)\uff0c\u5c06\u5143\u7d20x\u63d2\u5165vector\u4e2d\u3002\n2. vector.size()\u8bfb\u53d6\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u6211\u4ee3\u7801\u4e2d\u7684cnt[ ]\u6570\u7ec4\u7684\u4f5c\u7528\u3002\n3. vector\u4e5f\u53ef\u4ee5\u548c\u9759\u6001\u6570\u7ec4\u4e00\u6837\u76f4\u63a5\u4f7f\u7528\u4e0b\u6807\u8bfb\u53d6\uff0c\u5982vector[i]\u3002\u4f46\u662f\u6ce8\u610f\u4e00\u4e0b\uff0cvector\u7684\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u5230vector.size()-1\u7ed3\u675f\u3002\n\n\u5173\u4e8evector\u7684\u4ee3\u7801\u5b9e\u73b0\u5728\u6b64\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u7559\u7ed9\u5927\u5bb6\u81ea\u884c\u601d\u8003\u3002",
        "postTime": 1573300054,
        "uid": 241699,
        "name": "Mysterious04",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2446 \u3010[SDOI2010]\u5927\u9646\u4e89\u9738\u3011"
    },
    {
        "content": "## \u4e0a\u56fe\u7406\u89e3\u6781\u4f73\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/yr9ugmqz.png)\n\n\u56e0\u4e3a\u60f3\u8c61\u529b\u6709\u9650\uff0c\u53ea\u80fd\u501f\u52a9\u539f\u56fe\u548c\u6211\u5351\u5fae\u7684\u753b\u6280\u4e86\uff08\u5982\u6709\u4e0d\u59a5\u8bf7dalao\u4eec\u63d0\u51fa\uff09\n\n### 1\u3001\u601d\u8def\n\n\u9996\u5148\uff0c\u8fd9\u4e2a\u9898\u4e0e\u6b63\u5e38\u7684\u6700\u77ed\u8def\u95ee\u9898\u5c31\u662f\u5b83\u7684\u90e8\u5206\u70b9\u591a\u4e86\u597d\u51e0\u4e2a\u5c4f\u969c\uff1b\n\u56e0\u4e3a\u673a\u5668\u4eba\u662f\u65e0\u6570\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff0c\u6bcf\u6b21\u90fd\u770b\u4f5c\u65e0\u9650\u673a\u5668\u4eba\u5c31\u53ef\u4ee5\u4e86\n\n\u81ea\u5df1\u7684\u601d\u8def\uff1a\u5728\u8f93\u5165\u5c4f\u969c\u7684\u65f6\u5019\uff0c\u628a\u57ce\u5e02\u7684\u4fdd\u62a4\u819c\u6570\u91cf\u4ee5\u53ca\u67d0\u4e00\u4e2a\u57ce\u5e02\u4fdd\u62a4\u7684\u6bcf\u4e2a\u57ce\u5e02\u7684\u5e8f\u53f7\uff08\u4e8c\u7ef4\u6570\u7ec4\u5b58\uff09\u5b58\u4e0b\u6765\uff0c\u5728\u6bcf\u4e00\u6b21\u6709\u4fdd\u62a4\u57ce\u5e02\u7684\u65f6\u5019\u8fdb\u884c\u7206\u7834-1\u5c31\u53ef\u4ee5\u4e86\uff08\u4e0d\u7406\u89e3\u7684\u8bdd\u4ee3\u7801\u4e2d\u6709\u8be6\u7ec6\u89e3\u91ca\uff09\n\n### 2\u3001\u7ec6\u8282\n\n\u56e0\u4e3a\u6709\u5c4f\u969c\u7684\u9650\u5236,\u6211\u4eec\u6bcf\u6b21\u653e\u8fdb\u961f\u5217\u91cc\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u7684\u6570\u4e5f\u4f1a\u6709\u9650\u5236\uff0c\u90a3\u4e48\u5728\u8fd9\u91cc\u6211\u4eec\u4f1a\u6709\u4e00\u79cd\u601d\u60f3\uff0c\u5f53\u4e00\u4e2a\u57ce\u5e02\u88ab\u7206\u7834\u5b8c\u4e4b\u540e\uff0c\u673a\u5668\u4eba\u53ef\u4ee5\u7acb\u523b\u8fdb\u5165\uff08\u5047\u8bbe\u673a\u5668\u4eba\u662f\u5728\u5c4f\u969c\u5916\u9762\u7b49\u7740\u7684\uff09\u90a3\u4e48\u5728\u6467\u6bc1\u5c4f\u969c\u7684\u65f6\u5019\u987a\u4fbf\u66f4\u65b0\u4e00\u4e0b\u5230\u8fbe\u5df2\u7ecf\u5b8c\u5168\u6d88\u9664\u5c4f\u969c\u7684\u57ce\u5e02\u65f6\u95f4\u4e5f\u5c31\u662f\uff08dis\uff09\u3002\u800c\u4e14\u8981\u6ce8\u610f\u5982\u679c\u673a\u5668\u4eba\u7387\u5148\u5230\u8fbe\u5e76\u4e14\u7834\u574f\u4e86\u5c4f\u969c\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8981\u53d6\u5230\u8fbe\u65f6\u95f4\u6700\u5927\u7684\uff01\n\n### 3\u3001\u6837\u4f8b\u6f14\u793a\uff08\u6b64\u5904\u6309\u7167\u65f6\u95f4\u987a\u5e8f\u6765\u6f14\u793a\uff09\n\n\u5f53time=1\u65f6\uff0c\u673a\u5668\u4eba\u5230\u8fbe2 \u6b64\u65f6\u66f4\u65b0dis[2]\u4e3a1,\n\n\u5f53time=2\u65f6\uff0c\u673a\u5668\u4eba\u5230\u8fbe3 \u6b64\u65f6\u66f4\u65b0dis[3]\u4e3a2\uff0c\u6b64\u65f6\u57283\u70b9\u8fdb\u884c\u7206\u7834\uff0c\u70b8\u6389\u4e866\u7684\u4e00\u5c42\u5c4f\u969c\uff0c\u66f4\u65b0dis[6]\u4e3a2\n\n\u5f53time=3\u65f6\uff0c\u673a\u5668\u4eba\u5230\u8fbe4,5\uff0c\u6b64\u65f6\u66f4\u65b0dis[4],dis[5]\u4e3a3\uff0c\u7136\u540e\u57285\u8fd9\u4e2a\u70b9\u8fdb\u884c\u7206\u7834\n\u70b8\u6389\u4e864\u7684\u5c4f\u969c\uff08\u91ca\u653e\u4e86\uff09\uff0c\u7136\u540e\u5bf9\u6bd4\u4e00\u4e0b\u5230\u8fbe4\uff0c\u548c5\u7684\u65f6\u95f4\u53d6\u6700\u5927\u503c\u66f4\u65b0dis[4]\u7136\u9e45\u8fd8\u662f3\uff0c6\u7684\u5c4f\u969c\u88ab\u70b8\u6389\u4e86\u4e00\u5c42\uff0c\u91ca\u653e\uff1b\n\n\u5f53time=5\u65f6\uff08\u56e0\u4e3a\u5f53\u65f6\u677e\u5f1b\u64cd\u4f5c5->3\u65f6\u6ca1\u6709\u6210\u7acb\uff0c3\u6ca1\u6709\u88ab\u653e\u8fdb\u961f\u5217\u4e2d\uff09\uff0c6\u70b9\u6ca1\u6709\u5c4f\u969c\u53ef\u4ee5\u5230\u8fbe\uff08\u4e5f\u5c31\u662f\u5230\u8fbe\u4e86\u5b83\u7684\u4e2d\u5fc3\uff09\uff0c\u7136\u540e\u66f4\u65b0\u6b64\u65f6\u7684dis[6]\u4e3a5\n\n\u6700\u540e\u8f93\u51fa5\n\n\uff08\u5728\u4ee3\u7801\u4e2d\u5148\u66f4\u65b0\u7684dis[6]\u4e3a5\uff0c\u7136\u540e\u4e0edis[3]\u6bd4\u8f83\u53d6\u6700\u5927\u503c\u7684\uff09\uff1b\n\n#### \u6ce8\u610f\u70b9\uff1a\u6837\u4f8b\u89e3\u91ca\u7684\u65f6\u5019\u6709\u4e00\u4e9b\u5728\u961f\u5217\u91cc\u8fd0\u884c\u7684\u987a\u5e8f\u662f\u4e0d\u540c\u7684\uff0c\u5728\u8fd9\u91cc\u7528\u8fd9\u4e2a\u66f4\u52a0\u5b9e\u9645\u7684\u4f8b\u5b50\u6765\u89e3\u91ca\u4e00\u4e0b\u4ee3\u7801\u7684\u529f\u80fd\u5b9e\u73b0\uff0c\u5177\u4f53\u89e3\u91ca\u5728\u4ee3\u7801\u4e2d\n------------\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<stack>\n#include<queue>\n#include<cmath>\nusing namespace std;\nint n,m;\nint cnt[100009],boom[3009][3009],e_num,head[100009],ind[100009],v[100009];\n//cnt \u662f\u6307\u7b2ci\u4e2a\u57ce\u5e02\u4fdd\u62a4\u7684\u57ce\u5e02\u7684\u6570\u91cf\uff0cboom\u8868\u793a\u7684\u662f\u7b2ci\u4e2a\u57ce\u5e02\u4fdd\u62a4\u7684\u7b2cj\u4e2a\u57ce\u5e02\u7684\u5e8f\u53f7\n//ind\u662f\u6307\u8fd9\u4e2a\u57ce\u5e02\u8fd8\u6709\u6ca1\u6709\u88ab\u4fdd\u62a4\uff1f\uff1f\u5982\u679c\u5165\u5ea6\u4e3a0\u5219\u4e0d\u4f1a\u88ab\u4fdd\u62a4\u4e86\uff1b,v\u5c31\u662fdij\u7684\u6807\u914d\u4e86\uff0c\u8fd9\u91cc\u4e0d\u505a\u89e3\u91ca \nint dis[100009];\nstruct node{\n\tint diss;\n\tint x;\n\tinline bool operator<(const node &x)const\n\t{\n\t\treturn diss>x.diss; \n\t} \n}; //dij\u7684\u5806\u4f18\u5316\uff0c\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u6211\u592a\u5f31\u4e86\uff0c\u53ea\u80fd\u80cc\u4e0a\u53bb\uff1b \nstruct edge{\n\tint dis,last,to; \n}e[70009]; \nint Edge(int from,int to,int dis)//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\uff01\uff01\uff01 \n{\n\te[++e_num].last=head[from];\n\te[e_num].to=to;\n\te[e_num].dis=dis;\n\thead[from]=e_num;\n}\nint djstm()//\u5ffd\u7565\u6211\u53ef\u7231\u7684\u51fd\u6570\u540d\u5b57 \n{\n\tmemset(dis,0x3f3f3f3f,sizeof(dis));//\u5148\u628a\u6240\u6709\u7684\u8ddd\u79bb\u90fd\u8d4b\u4e0a\u4e00\u4e2a\u6781\u5927\u503c \n\tdis[1]=0;//\u628a\u5230\u7b2c\u4e00\u4e2a\u70b9\u7684\u65f6\u95f4\u8bbe\u4e3a0 \n\tpriority_queue<node> q;//\u4f18\u5148\u961f\u5217\u5b58\u50a8 \n\tq.push((node){0,1});//dij\u7684\u5806\u4f18\u5316\u7684\u6a21\u677f\uff01\uff0c\u8fd9\u4e2a\u5c31\u4e0d\u8be6\u7ec6\u89e3\u91ca\u5566 \n\twhile(!q.empty())\n\t{\n\t\tnode pak=q.top();\n\t\tq.pop();\n\t\tint u=pak.x;\n\t\tif(v[u]==1) continue;\n\t\tv[u]=1;\n\t\tfor(int i=head[u];i;i=e[i].last)\n\t\t{\n\t\t\tint go_=e[i].to;\n\t\t\tif(dis[go_]>dis[u]+e[i].dis)\n\t\t\t{\n\t\t\t\tdis[go_]=dis[u]+e[i].dis;//\u6ce8\u610f\u8fd9\u4e2a\u70b9\uff0c\u5927\u5bb6\u5e94\u8be5\u6709\u7591\u60d1\uff0c\u5982\u679cgo_\u8fd9\u4e2a\u70b9\u6ca1\u6709\u5b8c\u5168\u7834\u574f\u5b8c\u7ed3\u8282\u70b9\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u4f1a\u88ab\u8d4b\u503c\u5462\uff1f\n\t\t\t\t//\u8fd9\u5c31\u6d89\u53ca\u5230\u4e0b\u9762\u4e00\u4e2a\u5904\u7406\u4e86\uff0c\u5728\u4e0b\u9762\u6211\u4f1a\u89e3\u91ca \n\t\t\t\tif(ind[go_]==0)//\u5f53\u8fd9\u4e2a\u57ce\u5e02\u6ca1\u6709\u88ab\u4fdd\u62a4\u7684\u65f6\u5019\u90a3\u4e48\u5c31\u628a\u4ed6\u653e\u8fdb\u961f\u5217\u91cc\uff0c\u7ee7\u7eed\u627e \n\t\t\t\t{\n\t\t\t\t\tq.push((node){dis[go_],go_});\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t\tfor(int i=1;i<=cnt[u];i++)//\u627e\u5f53\u524d\u70b9\u662f\u5426\u6709\u7ed3\u754c \n\t\t{\n\t\t\tind[boom[u][i]]--;//\u641c\u7d22\u5f53\u524d\u5806\u91cc\u7684\u6700\u524d\u7684\u70b9\uff0c\u7136\u540e\u679a\u4e3e\u4ed6\u7684\u6bcf\u4e00\u4e00\u4e2a\u4fdd\u62a4\u7684\u7ed3\u754c \uff08\u56e0\u4e3a\u673a\u5668\u4eba\u53ef\u4ee5\u65e0\u9650\u591a\uff0c\u6240\u4ee5\u53ef\u4ee5\u65e0\u9650\u7834\u574f\uff09 \n\t\t\tint kk=boom[u][i];\n\t\t\tdis[kk]=max(dis[kk],dis[u]);//\u8fd9\u91cc\u6ce8\u610f\uff0c\u5f53\u4e00\u4e2a\u70b9\u7684\u7ed3\u754c\u6ca1\u6709\u88ab\u7834\u574f\u65f6\uff0c\u6211\u4eec\u5728\u4e0a\u9762\u7684\u5904\u7406\u4e2d\u53ef\u80fd\u4f1a\u7ed9\u4ed6\u8d4b\u8fc7\u503c\n\t\t\t//\u56e0\u4e3a\u5728\u73b0\u5b9e\u60c5\u51b5\u4e0b\u6ca1\u6709\u7834\u574f\u7ed3\u754c\u7684\u57ce\u5e02\u662f\u4e0d\u80fd\u5230\u8fbe\u7684\uff0c\u6240\u4ee5\u673a\u5668\u4eba\u53ea\u80fd\u5728\u54ea\u91cc\u7b49\u7740\uff0c\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5c31\u53ef\u4ee5\u53d6\u5f53\u524d\u7684\u6700\u5927\u503c\u7ed9\u4ed6\u8d4b\u503c\n\t\t\t//\u8fd9\u6837\u5c31\u7b26\u5408\u5b9e\u9645\u60c5\u51b5\u4e86 \n\t\t\tif(ind[boom[u][i]]==0)\n\t\t\t{\n\t\t\t\tq.push((node){dis[kk],kk});//\u8fd9\u4e0a\u9762\u5df2\u7ecf\u8d4b\u503c\u4e86\uff0c\u76f8\u5f53\u4e8e\u505a\u4e86\u6700\u77ed\u8def\u7684\u4f18\u5316\uff0c\u6240\u4ee5\u5c31\u76f4\u63a5\u628a\u6ca1\u6709\u7ed3\u754c\u7684\u57ce\u5e02\u653e\u8fdb\u53bb\u5c31\u5b8c\u4e8b\u4e86\n\t\t\t\t//\u56e0\u4e3a\u8fd9\u662fdij\u5806\u4f18\u5316\uff0c\u7b54\u6848\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u6240\u4ee5\u4e0d\u7528\u8003\u8651\u5176\u4ed6\u95ee\u9898 \n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tcin>>x>>y>>z;\n\t\tif(x!=y)\n\t\t{\n\t\t\tEdge(x,y,z);\t\n\t\t}//\u5efa\u8fb9\uff0c\u8fd9\u4e2a\u5224\u65ad\u9632\u6b62hack\u6570\u636e \n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>ind[i];//\u8f93\u5165\u6bcf\u4e2a\u57ce\u5e02\u88ab\u591a\u5c11\u57ce\u5e02\u6240\u4fdd\u62a4 \n\t\t\n\t\tfor(int j=1;j<=ind[i];j++)//\u8f93\u5165\u6bcf\u4e2a\u57ce\u5e02\u7684\u7f16\u53f7 \n\t\t{\n\t\t\tint to_;\n\t\t\tcin>>to_;\n\t\t\tboom[to_][++cnt[to_]]=i;//\u8868\u793ato_\u4fdd\u62a4\u7684\u7b2ccnt[to_]\u4e2a\u57ce\u5e02\u7684\u7f16\u53f7\uff1b\n\t\t} \n\t}\n//\tfor(int i=1;i<=n;i++)\n//\t{\n//\t\tcout<<\"i=\"<<i<<endl;\n//\t\tfor(int j=1;j<=cnt[i];j++)\n//\t\t{\n//\t\t\tcout<<boom[i][j]<<\" \";\n//\t\t}\n//\t\tcout<<endl;\n//\t}\u8c03\u8bd5\u7684\u4ee3\u7801 \n\tdjstm(); \n\tcout<<dis[n];//\u6700\u540e\u8f93\u51fa\u5c31\u53ef\uff01 \n\treturn 0;//\u5b8c\u7ed3\uff01\uff01 \n}\n```\n",
        "postTime": 1602397969,
        "uid": 230804,
        "name": "Durancer",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2446 \u3010[SDOI2010]\u5927\u9646\u4e89\u9738\u3011"
    },
    {
        "content": "**\u8fde\u63a5\u4e24\u4e2a\u57ce\u5e02\u7684\u9053\u8def\u53ef\u80fd\u4e0d\u6b62\u4e00\u6761\uff0c\u4e5f\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u57ce\u5e02\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u9053\u8def\u3002**\n\n\u63a5\u4e0b\u6765M\u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6b63\u6574\u6570ui, vi, wi\uff0c\u8868\u793a\u6709\u4e00\u6761\u4ece\u57ce\u5e02ui\u5230\u57ce\u5e02vi\u7684**\u5355\u5411\u9053\u8def**\uff0c\u81ea\u7206\u673a\u5668\u4eba\u901a\u8fc7\u8fd9\u6761\u9053\u8def\u9700\u8981wi\u7684\u65f6\u95f4\u3002\n\n\u597d\u4e86\uff0c\u4ee5\u4e0a\u662f\u672c\u9898\u5751\u70b9\n\n\u4e00\u770b\u4e0d\u662f\u7279\u522b\u597d\u505a\uff0c\u60f3\u5230\u6700\u77ed\u8def\n\n\u8bb0\u5f55\u4e24\u4e2a\u91cf$dis,open$\u5206\u522b\u8868\u793a\u6700\u77ed\u8def\u4e0e\u5c06\u6240\u6709\u4fdd\u62a4\u81ea\u5df1\u7684\u7ed3\u754c\u6467\u6bc1\u6240\u9700\u6700\u77ed\u65f6\u95f4\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u771f\u6b63\u7684\u6700\u77ed\u8def=$max(dis,open)$\n\n\u7528$dij$\u5206\u522b\u6c42$dis$\u4e0e$open$\u5c31\u884c\u4e86\n\n\u6ce8\u610f\u4e00\u4e2a\u70b9\u5165\u961f\u7684\u6761\u4ef6\u662f\u6240\u6709\u4fdd\u62a4\u5b83\u7684\u7ed3\u754c\u90fd\u5df2\u6467\u6bc1\n\nCode\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 100010\nusing namespace std;\nstruct Edge{\n\tint to, next, len;\n}edge[maxn << 1], e[maxn << 1];\nint num, head[maxn], Num, Head[maxn], vis[maxn], dis[maxn], open[maxn], in[maxn], n, m;\nstruct node{\n\tint val, len;\n\tbool operator < (const node &x) const{ return x.len < len; }\n};\npriority_queue <node> q;\n\ninline int read(){\n\tint s = 0, w = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') w = -1;\n\tfor (; isdigit(c); c = getchar()) s = (s << 1) + (s << 3) + (c ^ 48);\n\treturn s * w;\n}\n\nvoid addedge(int x, int y, int z){ edge[++num] = (Edge){y, head[x], z}, head[x] = num; }\nvoid add(int x, int y){ e[++Num] = (Edge){y, Head[x], 0}, Head[x] = Num; }\n\nint main(){\n\tn = read(), m = read();\n\tfor (int i = 1; i <= m; ++i){\n\t\tint x = read(), y = read(), z = read();\n\t\tif (x == y) continue;\n\t\taddedge(x, y, z);\n\t}\n\tfor (int i = 1; i <= n; ++i){\n\t\tin[i] = read();\n\t\tfor (int j = 1; j <= in[i]; ++j) add(read(), i);\n\t}\n\tfor (int i = 2; i <= n; ++i) dis[i] = 2e9;\n\tq.push((node){1, 0});\n\twhile (!q.empty()){\n\t\tnode tmp = q.top(); q.pop();\n\t\tint u = tmp.val, d = max(dis[u], open[u]);\n\t\tif (vis[u]) continue;\n\t\tvis[u] = 1;\n\t\tfor (int i = head[u]; i; i = edge[i].next){\n\t\t\tint v = edge[i].to;\n\t\t\tif (dis[v] > d + edge[i].len){\n\t\t\t\tdis[v] = d + edge[i].len;\n\t\t\t\tif (!in[v]) q.push((node){v, max(dis[v], open[v])});\n\t\t\t}\n\t\t}\n\t\tfor (int i = Head[u]; i; i = e[i].next){\n\t\t\tint v = e[i].to;\n\t\t\t--in[v], open[v] = max(open[v], d);\n\t\t\tif (!in[v]) q.push((node){v, max(dis[v], open[v])});\n\t\t}\n\t}\n\tprintf(\"%d\\n\", max(dis[n], open[n]));\n\treturn 0;\n}\n```\n",
        "postTime": 1569925414,
        "uid": 51719,
        "name": "ModestCoder_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2446 \u3010[SDOI2010]\u5927\u9646\u4e89\u9738\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\uff0c\u6211\u770b\u5230\u8bb8\u591ajulao\u7528SPFA\u8dd1\u7684\uff0c\u4f46\u672c\u849f\u84bb\u53ea\u4f1a\u5806\u4f18\u5316\u7684Dij\uff1b\n\n\u4e2d\u5fc3\u601d\u60f3\uff1a\u9664\u4e86dist\u6570\u7ec4\u4ee5\u5916\uff0c\u6211\u4eec\u9700\u8981\u591a\u5f00\u53e6\u5916\u4e24\u4e2a\u6570\u7ec4\u2014\u2014reach[i] \u8868\u793a\u5230\u8fbe\u8fd9\u5ea7\u57ce\u5e02\u7684\u65f6\u95f4\uff0creally[i]\u8868\u793a\u5b9e\u9645\u80fd\u8fdb\u5165\u8fd9\u5ea7\u57ce\u5e02\u7684\u65f6\u95f4\uff1b\u8fd8\u6709\uff0c\u7528shd[i]\u8868\u793a\u4e00\u5ea7\u57ce\u5e02\u4e0a\u6709\u591a\u5c11\u76fe\uff0c\u5f53shd[i]==0\u65f6\uff0c\u624d\u53ef\u4ee5\u8fdb\u884c\u66f4\u65b0\u64cd\u4f5c\uff1b\n\n\u590d\u6742\u5ea6 ~~\u5176\u5b9e\u6211\u4e5f\u4e0d\u77e5\u9053~~\u5927\u6982\u5c31\u662f\u5806\u4f18\u5316Dij\u7684\u590d\u6742\u5ea6\uff1b\n\nDij\u4ee3\u7801\u5728\u6b64 \u5176\u5b9e\u8ddf\u666e\u901aDij\u5dee\u4e0d\u591a\uff0c\u53ea\u662f\u9700\u8981\u518d\u5904\u7406\u4e00\u6b21\u6253\u7834\u76fe\u4e4b\u540e\u7684\u66f4\u65b0\uff0c\u8981\u7528\u5230\u76fe\u4e4b\u95f4\u7684\u8fde\u8fb9\uff0c\u524d\u5411\u661f\u5b58\uff0c\u6bd4\u8f83\u5bb9\u6613\u3002\n```\nvoid dij(){\n\tFOR(i,1,n) dist[i]=reach[i]=inf;\n\tdist[1]=0,reach[1]=0,shd[1]=0,really[1]=0;//\u4e00\u5b9a\u8981\u521d\u59cb\u5316\uff0c\n    //\u6211\u6700\u5f00\u59cb\u5c31\u5fd8\u4e86\uff0c\u7ed3\u679c\u5361\u6b7b\u5728\u6837\u4f8b\n\tq.push(make_pair(0,1));\n\tll u,v,w;//u\u4e3a\u5f53\u524d\u5806\u4e2d\u65b0\u53d6\u51fa\u7684\u8282\u70b9\u7f16\u53f7 v\u4e3a\u6bcf\u6b21\u7528\u4ee5\u66f4\u65b0\u7684\u8282\u70b9\n    //w\u7528\u5904\u4e0d\u5927\uff0c\u4f46\u8fd8\u662f\u5f00\u4e86\uff0c\u610f\u601d\u81ea\u5df1\u770b\n\twhile(!q.empty()){\n\t\tdo {\n            u=q.top().second;\n            q.pop();\n        }while (!q.empty() && vis[u]);\n        if (vis[u]) break;//\u5df2\u7ecf\u5230\u8fc7\u7684\u5c31\u4e0d\u518d\u5904\u7406\n\t\tvis[u]=1;\n\t\tfor (int i=head[u];i;i=h[i].next){//\u904d\u5386\u6240\u6709\u8fb9\n\t\t\tv=h[i].to;\n\t\t\tw=dist[u]+h[i].w;\n\t\t\tif (w<reach[v]){\n\t\t\t\treach[v]=w;\n\t\t\t\tif (shd[v]==0){//\u5f53\u62a4\u76fe\u5df2\u7ecf\u7834\u4e86\n\t\t\t\t\tdist[v]=max(reach[v],really[v]);\n\t\t\t\t\tq.push(make_pair(-dist[v],v));\n                    //\u628adist\u6570\u7ec4\u4ee5\u8d1f\u6570\u5b58\u5165\uff0c\u53ef\u4ee5\u76f4\u63a5\u8d77\u5230\u5c0f\u6839\u5806\u7684\u4f5c\u7528\n                    //\u65e0\u9700\u53e6\u5916\u7684\u64cd\u4f5c\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i=hp[u];i;i=nexp[i]){\n\t\t\tv=pro[i];\n\t\t\treally[v]=max(really[v],dist[u]);\n\t\t\tshd[v]--;//\u76fe\u8981\u51cf\u5c11\u4e00\u4e2a\n\t\t\tif (shd[v]==0){\n\t\t\t\tdist[v]=max(reach[v],really[v]);\n\t\t\t\tq.push(make_pair(-dist[v],v));\n\t\t\t}//\u66f4\u65b0\u64cd\u4f5c\n\t\t}\n\t}\n\tif (dist[n]!=inf) cout<<dist[n];\n\telse cout<<\"Mission Failed\";//\u8bf8\u4f4d\u5ffd\u7565\u8fd9\u91cc\uff0c\u8fd9\u662f\u6211\u4eec\u8003\u8bd5\u65f6\u5199\u7684\uff0c\n    //\u9898\u76ee\u6709\u4e9b\u4e0d\u4e00\u6837\uff0c\u4f46\u5927\u81f4\u5dee\u4e0d\u591a\uff0c\u5199\u4e0a\u4e0d\u4f1a\u9519\u3002\n}\n```\n\u597d\u4e86\uff0c\u6838\u5fc3\u4ee3\u7801\u5c31\u957f\u8fd9\u6837\uff0c\u7406\u89e3\u4e4b\u540e\u4e5f\u4e0d\u662f\u5f88\u96be\uff0c\u5982\u679c\u4f60\u4f1a\u4e86\uff0c\u5c31\u5f00\u59cb\u5427\uff0c\u522b\u770b\u4e0b\u9762\u4e86 ~~\u4e3a\u6211\u4ee3\u7801\u7684\u4e11\u964b\u63a9\u9762\u54ed\u6ce3~~\n\n\u4e0b\u9762\u653e\u5b8c\u6574\u4ee3\u7801\n```\n#include<bits/stdc++.h>\n#define FOR(i,a,b) for (register int i=a;i<=b;i++)\n#define ROF(i,a,b) for (register int i=a;i>=b;i--)\n#define inf 2147483647\n#define ll long long\nusing namespace std;\nstruct edge{\n\tint next,to,w;\n}h[200005];\npriority_queue<pair<ll,ll> >q;\nll head[10005],tot,dist[10005];\nll pro[200050],cnt,hp[10050],nexp[200050],shd[10050];\nll reach[10050],really[10050],dis[10050];//\u8bf7\u5de8\u4f6c\u522b\u770b\u6211\u4e11\u964b\u7684\u6570\u7ec4\nbool vis[10005];\nvoid add(int u,int v,int w){\n\th[++tot].to=v;\n\th[tot].w=w;\n\th[tot].next=head[u];\n\thead[u]=tot;\n}//\u524d\u5411\u661f\u6807\u51c6\u64cd\u4f5c\n//ps:\u5982\u679c\u4e0d\u4f1a\uff0c\u5efa\u8bae\u5b66\u4e00\u4e0b\uff0c\u51e0\u4e4e\u6240\u6709\u56fe\u8bba\u9898\u90fd\u80fd\u505a\u3002\nint n,m;\nvoid dij(){\n\tFOR(i,1,n) dist[i]=reach[i]=inf;\n\tdist[1]=0,reach[1]=0,shd[1]=0,really[1]=0;\n\tq.push(make_pair(0,1));\n\tll u,v,w;\n\twhile(!q.empty()){\n\t\tdo {\n            u=q.top().second;\n            q.pop();\n        }while (!q.empty() && vis[u]);\n        if (vis[u]) break;\n\t\tvis[u]=1;\n\t\tfor (int i=head[u];i;i=h[i].next){\n\t\t\tv=h[i].to;\n\t\t\tw=dist[u]+h[i].w;\n\t\t\tif (w<reach[v]){\n\t\t\t\treach[v]=w;\n\t\t\t\tif (shd[v]==0){\n\t\t\t\t\tdist[v]=max(reach[v],really[v]);\n\t\t\t\t\tq.push(make_pair(-dist[v],v));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i=hp[u];i;i=nexp[i]){\n\t\t\tv=pro[i];\n\t\t\treally[v]=max(really[v],dist[u]);\n\t\t\tshd[v]--;\n\t\t\tif (shd[v]==0){\n\t\t\t\tdist[v]=max(reach[v],really[v]);\n\t\t\t\tq.push(make_pair(-dist[v],v));\n\t\t\t}\n\t\t}\n\t}\n\tif (dist[n]!=inf) cout<<dist[n];\n\telse cout<<\"Mission Failed\";\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tint u,v,w;\n\tFOR(i,1,m){\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd(u,v,w);//\u524d\u5411\u661f\u5b58\u56fe\uff0c\u4e00\u5f00\u59cb\u4ee5\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u4f46\u5176\u5b9e\u662f\u6709\u5411\u7684\n//\t\tadd(v,u,w);\n\t}\n\tFOR (i,1,n) {\n        scanf(\"%d\",&w);\n\t\tFOR(j,1,w) {\n\t\t\tscanf(\"%d\",&u);\n\t\t\tshd[i]++;pro[++cnt]=i;\n\t\t\tnexp[cnt]=hp[u];hp[u]=cnt;//\u7ed9\u76fe\u7684\u5173\u7cfb\u8fde\u8fb9\uff0c\u4e5f\u662f\u524d\u5411\u661f\n            //\u53ea\u6709\u4e00\u70b9\u4e0d\u540c\uff0c\u4f46\u4e0d\u60f3\u518d\u5199\u51fd\u6570\u4e86\u3002\n        }\n\t}\n\tdij();//\u51fa\u53d1\u4e86\uff01\uff01\uff01\n\treturn 0;\n}\n```\n\n\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u6c42\u8fc7\uff01orz",
        "postTime": 1539679411,
        "uid": 100175,
        "name": "OIer_hsy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2446 \u3010[SDOI2010]\u5927\u9646\u4e89\u9738\u3011"
    },
    {
        "content": "&emsp;&emsp;[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P2446)\n\n&emsp;&emsp;\u5982\u679c $v$ \u88ab $u$ \u4fdd\u62a4\uff0c\u5c31\u8fde\u4e00\u6761 $u->v$ \u7684\u8fb9\u3002\u5982\u679c\u70b9 $i$ \u4f1a\u5f71\u54cd\u6700\u540e\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u70b9 $i$ \u4e00\u5b9a\u4e0d\u5904\u4e8e\u73af\u4e0a\uff0c\u5426\u5219\u5c31\u65e0\u89e3\u4e86\uff08\u653b\u7834\u81ea\u5df1\u5f97\u5148\u653b\u7834\u81ea\u5df1\uff09\uff1b\u5982\u679c\u4e0d\u4f1a\u5f71\u54cd\uff0c\u90a3\u4e48\u89c6\u4f5c\u65e0\u73af\u4e5f\u6ca1\u5173\u7cfb\uff0c\u56e0\u4e3a\u5bf9\u6700\u540e\u7684\u7b54\u6848\u4e00\u70b9\u5f71\u54cd\u4e5f\u6ca1\u6709\uff0c\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5927\u4f53\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u5f20\u56fe\u662f DAG\n\n&emsp;&emsp;\u65e2\u7136\u653b\u7834\u4e00\u4e2a\u70b9\uff0c\u5f97\u5148\u653b\u7834\u5b83\u7684\u6240\u6709\u524d\u9a71\uff0c\u5148\u8bbe 1 \u81f3 $i$ \u7684\u6700\u77ed\u8def\u4e3a $dis_i$\uff0c\u5219\u663e\u7136\u653b\u7834\u4e00\u4e2a\u70b9\u7684\u65f6\u95f4 $dest_i = max(max(dest_j),dis_i)$\uff0c$j$ \u662f $i$ \u7684\u524d\u9a71\u3002\u6240\u4ee5\u663e\u7136\u800c\u7136\u5c31\u4f1a\u6700\u77ed\u8def\u677f\u5b50+\u62d3\u6251+DP\u3002\n\n&emsp;&emsp;\u6240\u4ee5\u4f60\u5c31\u4f1a\u83b7\u5f9710\u5206\u7684\u597d\u6210\u7ee9\uff08\u8fd8\u53ef\u80fd\u7206\u96f6\n\n&emsp;&emsp;\u8003\u8651\u9519\u8bef\u7684\u539f\u56e0\uff1a\u4e00\u4e2a\u70b9\u7684 $dest$ \u548c\u5b83\u7684 $dis$ \u6709\u5173\uff0c\u5047\u8bbe\u8fd9\u6761\u6700\u77ed\u8def\u5f84\u7ecf\u8fc7\u4e86\u8fd9\u4e2a\u70b9\u4fdd\u62a4\u7684\u67d0\u4e2a\u70b9\uff0c\u5b9e\u9645\u4e0a\u4f60\u662f\u4e0d\u53ef\u4ee5\u8d70\u8fd9\u6761\u8def\u5f84\u7684\uff0c\u4f46\u662f\u4f60\u8d70\u4e86\uff0c\u56e0\u6b64\u7b54\u6848\u4f1a\u88ab\u4f60\u641e\u7684\u5f88\u5c0f\uff08\u56e0\u4e3a\u5b9e\u9645\u4e0a\u9700\u8981\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u7ed5\u8def\uff09\n\n&emsp;&emsp;\u4e0d\u8fc7\u8f6c\u79fb\u65b9\u7a0b\u80af\u5b9a\u4e00\u70b9\u9519\u8bef\u90fd\u6ca1\u6709\u3002\u56e0\u4e3a\u662f\u6b63\u6743\u56fe\uff0c\u6240\u4ee5\u4f60\u4f1a\u53d1\u73b0\u5bf9\u4e8e\u4e00\u6761\u8fb9 $j->i$\uff0c $dest_j < dest_i$\uff0c\u8fd9\u4e2a\u663e\u7136\u6613\u5f97\uff0c\u90a3\u4e48\u9996\u5148\u6211\u4eec\u6539\u6210\u6309\u7167 $dest_i$ \u4ece\u5c0f\u5230\u5927\u8f6c\u79fb\u3002\u4f60\u8bf4\u6309 $dest_j$ \u8f6c\u79fb $dis$ \u4e0d\u4f1a\u6709\u8bef\uff1f\u4e8b\u5b9e\u4e0a\u6211\u4eec\u5df2\u7ecf\u53d1\u73b0 $dis_i$ \u7684\u5b9a\u4e49\u5df2\u7ecf\u53d8\u4e86\uff0c\u5408\u6cd5\u7684\u8def\u5f84\u53d8\u6210\u4e86\u4e0d\u5305\u62ec $i$ \u4fdd\u62a4\uff08\u6216 $i$ \u4fdd\u62a4\u7684\u70b9\u4fdd\u62a4\u7684\u70b9...\uff09\u7684\u70b9\uff0c\u4e14\u6743\u503c\u53d8\u6210\u4e86 $dest$\uff08\u56e0\u4e3a\u5982\u679c\u6709\u62a4\u7f69\u4f60\u5f97\u5148\u6467\u6bc1\u624d\u80fd\u8d70\uff09 \u88ab\u4fdd\u62a4\u70b9\u7684\u65f6\u95f4\u3002\u56e0\u6b64\u6bcf\u6b21\u9009\u7528\u6700\u5c0f\u7684 $dest_j$ \u53bb\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u4fdd\u8bc1\u4e86\u4e0d\u4f1a\u51fa\u73b0 $i$ \u4fdd\u62a4\u7684\uff08\u6216\u8005\u95f4\u63a5\u4fdd\u62a4\u7684\uff09\u70b9\uff0c\u540c\u65f6\u53c8\u4fdd\u8bc1\u6240\u6709\u53ef\u80fd\u5bf9\u4e00\u4e2a\u70b9\u7684 $dis_i$ \u9020\u6210\u5f71\u54cd\u7684\u4e0e $i$ \u76f8\u8fde\u7684 $j$ \u90fd\u88ab\u8003\u8651\u5230\uff0c\u56e0\u4e3a\u5982\u679c $dest_j >= dest_i$\uff0c\u90a3\u4e48\u82b1\u8d39 $dest_j$ \u6467\u6bc1\u7b2c $j$ \u4e2a\u70b9\u518d\u8d70\u8fc7\u6765\u7684\u65f6\u5019\uff0c\u5df2\u7ecf\u4e0d\u662f $dest_i$ \u4e86\u3002\u6240\u4ee5\u672c\u9898\u5e94\u8be5\u6309 $dest_j$ \u4ece\u5c0f\u5230\u5927\u8f6c\u79fb\u3002\n\n&emsp;&emsp;\u518d\u6765\u5177\u4f53\u8bb2\u8bb2\u8f6c\u79fb\u65b9\u6cd5\u3002\u8bbe $safe_i$ \u662f\u53ef\u4ee5\u8fdb\u5165\u70b9 $i$\uff08\u5373\u653b\u7834\u70b9 $i$ \u7684\u6240\u6709\u4fdd\u62a4\u57ce\u5e02\u7684\u65f6\u95f4\uff09\uff0c\u5219 $safe_i = max(dest_j)$\uff0c$j$ \u662f $i$ \u7684\u524d\u9a71\uff08\u4fdd\u62a4\u57ce\u5e02\uff09\u3002\n\n&emsp;&emsp;\u539f\u6765\u7684\u65b9\u7a0b\u5c31\u53d8\u6210\u4e86 $dest_j = max(safe_j,dis_j)$\uff0c\u8f6c\u79fb $i$ \u7684\u65f6\u5019\u679a\u4e3e $i$ \u7684\u540e\u7ee7\u5bf9\u5176\u66f4\u65b0 $safe$\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u524d\u9a71\u5168\u90fd\u8f6c\u79fb\u8fc7\u4e86\uff08\u8fd9\u4e2a\u8f6c\u79fb\u7684\u65f6\u5019\u987a\u5e26\u8ba1\u7b97\uff09\uff0c\u90a3\u4e48\u76f4\u63a5\u63a8 $dest$ \u5e76\u4e14\u52a0\u5165\u5806\u4e2d\uff08\u672c\u6765\u5c1d\u8bd5 $O(n)$ \u626b $dest$ \u53d1\u73b0\u597d\u50cf\u521d\u59cb\u5316\u6709\u70b9\u95ee\u9898\uff1f\uff09\n\n&emsp;&emsp;$dest$ \u7684\u65b9\u7a0b\u4e0d\u4ec5\u548c $safe$ \u6709\u5173\uff0c\u8fd8\u548c $dis$ \u6709\u5173\uff0c\u6b64\u65f6\u80fd\u63a8 $dest$ \u7684\u6761\u4ef6\uff08\u5728\u8f6c\u79fb $dis$\u65f6\uff09\u4e00\u6837\uff1a\u524d\u9a71\u90fd\u8f6c\u79fb\u8fc7\u4e86\uff0c\u5373 $safe$ \u5df2\u7ecf\u63a8\u51fa\u4e86\uff0c\u6240\u4ee5\u6bcf\u6b21\u66f4\u65b0 $dis$ \u7684\u65f6\u5019\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u63a8\u51fa\u6765\u4e86 $safe$\uff0c\u5c31\u518d\u63a8\u4e00\u904d $dest$ \u7136\u540e\u52a0\u5165\u5806\u4e2d\u3002\n\n&emsp;&emsp;\u5927\u6982\u5c31\u8fd9\u6837\uff08\u4f60\u4e5f\u53ef\u4ee5\u770b\u4f5c\u5bf9\u7b2c\u4e00\u7bc7\u9898\u89e3\u7684\u8be6\u7ec6\u8bf4\u660e\uff1f\uff1f\uff1f\uff09\uff0c\u4e8e\u662f\u4e00\u4e2a\u65e2\u50cf\u62d3\u6251\u53c8\u50cf\u6700\u77ed\u8def\u7684\u9898\u5c31\u51fa\u6765\u4e86\uff1a \n\n```cpp\n//SDOI,2010\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int MAXN=3e3+10,MAXM=7e4+10,MAXM2=1e6+10;\nconst long long INF=1e14;\nstruct Edge{\n\tint u,v;\n\tlong long w;\n}edge1[MAXM],edge2[MAXM2];\nint first1[MAXN],next1[MAXM],first2[MAXN],next2[MAXM2],tot1,tot2,cnt[MAXN];\nlong long safe[MAXN],dest[MAXN]; \nlong long dis[MAXN];\nbool vis[MAXN];\nint n,m;\nstruct Node{\n\tint u;long long v;\n\tbool operator<(const Node& n2)const{\n\t\treturn v > n2.v;\n\t}\n};\npriority_queue<Node>h; \ninline void addedge(int pos,int u,int v,long long w){\n\tif(pos==1){\n\t\tedge1[++tot1].u=u;edge1[tot1].v=v;edge1[tot1].w=w;\n\t\tnext1[tot1] = first1[u];first1[u] = tot1;\n\t}else{\n\t\tedge2[++tot2].u=u;edge2[tot2].v=v;edge2[tot2].w=w;\n\t\tnext2[tot2] = first2[u];first2[u] = tot2;\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,u,v,w;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\taddedge(1,u,v,w);\n\t}\n\tfor(int i=1,l,fa;i<=n;i++){\n\t\tscanf(\"%d\",&l);\n\t\tfor(int j=1;j<=l;j++){\n\t\t\tscanf(\"%d\",&fa);\n\t\t\taddedge(2,fa,i,0);\n\t\t}\n\t\tcnt[i] = l;\n\t}\n\tfor(int i=2;i<=n;i++){\n\t\tdis[i] = dest[i] = INF;\n\t}\n\th.push((Node){1,0});\n\twhile(!h.empty()){\n\t\tNode now = h.top();h.pop();\n\t\tint u = now.u;\n\t\tif(vis[u])continue;\n\t\tvis[u] = 1;\n\t\tfor(int j=first1[u];j;j=next1[j]){\n\t\t\tint v = edge1[j].v;\n\t\t\tif(dis[v] > dest[u] + edge1[j].w){\n\t\t\t\tdis[v] = dest[u] + edge1[j].w;\n\t\t\t\tdest[v] = max(safe[v],dis[v]);\n\t\t\t\tif(!cnt[v]){\n\t\t\t\t\tdest[v] = max(safe[v],dis[v]);\n\t\t\t\t\th.push((Node){v,dest[v]});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int j=first2[u];j;j=next2[j]){\n\t\t\tint v = edge2[j].v;\n\t\t\tsafe[v] = max(safe[v],dest[u]);\n\t\t\tcnt[v]--;\n\t\t\tif(!cnt[v]){\n\t\t\t\tdest[v] = max(safe[v],dis[v]);\n\t\t\t\th.push((Node){v,dest[v]});\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld\",dest[n]);\n\treturn 0;\n}\n```\n\n&emsp;&emsp;\u603b\u7ed3\uff1a\u5173\u4e8e DP \u7684\u5927\u4f53\u601d\u8def\u5176\u5b9e\u6765\u70b9\u5f00\u8fd9\u9053\u7d2b\u9898\u7684\u90fd\u4e0d\u96be\u60f3\uff0c\u7136\u540e\u53ea\u8981\u53d1\u73b0 $dis$ \u4e0d\u662f\u88f8\u7684\u6700\u77ed\u8def\uff0c\u8ba1\u7b97\u7684\u662f $dest$ \u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u53d1\u73b0\u5bf9\u4e00\u4e2a\u70b9\u7684 $dest$ \u5f71\u54cd\u7684\u70b9\u7684 $dest$ \u90fd\u6bd4\u5b83\u5c0f\uff0c\u90a3\u4e48\u7528\u7c7b\u4f3c Dijkstra \u5806\u4f18\u5316\u7684\u505a\u6cd5\u5c31\u53ef\u4ee5\u8fc7\u53bb\u4e86\n\n",
        "postTime": 1603376063,
        "uid": 340632,
        "name": "Cry_For_theMoon",
        "ccfLevel": 8,
        "title": "\u3010SDOI2010\u3011\u5927\u9646\u4e89\u9738"
    },
    {
        "content": "\u8fd9\u9898\u7684n\u7684\u8303\u56f4\u6709\u70b9\u5c0f\uff0c\u6211\u7684dijkstra~~\u4e0d\u52a0\u5806\u4f18\u5316\u90fd\u80fd\u8fc7~~\n\n\u770b\u5b8c\u9898\u76ee\u4f60\u4f1a\u53d1\u73b0\uff0c\u5230\u8fbe\u4e00\u4e2a\u57ce\u5e02\u6709\u4e00\u4e2a\u5148\u51b3\u6761\u4ef6\uff0c\u5c31\u662f\u8981\u6467\u6bc1\u6240\u6709\u7ef4\u6301\u8fd9\u4e2a\u57ce\u5e02\u7ed3\u754c\u7684\u6240\u6709\u7ed3\u754c\u53d1\u751f\u5668\uff0c\u90a3\u4e48\u5230\u8fbe\u8fd9\u5ea7\u57ce\u5e02\u7684\u6700\u77ed\u8def\u5f84\u4fbf\u4e3a\n###### **\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u88ab\u6467\u6bc1\u7684\u7ed3\u754c\u53d1\u751f\u5668\u6240\u5728\u57ce\u5e02\u7684\u6700\u77ed\u8def\u5f84\u4e0e\u5230\u8fbe\u8fd9\u5ea7\u57ce\u5e02\u7684\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u503c**\n\n\u77e5\u9053\u4e86\u8fd9\u6700\u91cd\u8981\u7684\u4e00\u70b9\uff0c\u5176\u4ed6\u7684\u4e5f\u5c31\u662f\u5199\u4e00\u904ddijkstra\uff0c\u4ee3\u7801\u4e5f\u5c31\u547c\u4e4b\u6b32\u51fa\u4e86\n\n\u8fd8\u8981\u6ce8\u610f\uff01\uff01\u9898\u76ee\u7ed9\u7684\u662f\u6709\u5411\u8fb9\uff01\uff01\u800c\u4e14\u8fd8\u8981\u5f00long long\n\n\u4e0b\u9762\u662f\u6211\u7684\u4ee3\u7801\uff0c\u633a\u77ed\u7684\uff0c\u5e94\u8be5\u633a\u597d\u7406\u89e3\n```\n#include<bits/stdc++.h>\nusing namespace std;\nlong long n,m,x,y,w;\nlong long min1,t,a,gen,dis[3003],sum[3003],vis[3003]; //sum[i]\u8868\u793ai\u8282\u70b9\u7684\u7ed3\u754c\u6570\u91cf\uff0c\u5168\u90e8\u88ab\u6467\u6bc1\u624d\u80fd\u8d70\u5230 \nvector<long long>l[3003],l1[3003],jie[3003]; //l\u6570\u7ec4\u548cl1\u6570\u7ec4\u5b58\u56fe\uff0cjie[i]\u7528\u6765\u8868\u793ai\u8282\u70b9\u7528\u7ed3\u754c\u4fdd\u62a4\u7740\u54ea\u4e9b\u57ce\u5e02 \nint main()\n{\n\tcin>>n>>m;  \n\tfor(long long i=1; i<=m; i++)\n\t{\n\t\tcin>>x>>y>>w;\n\t\tif(x!=y)\n\t\t\tl[x].push_back(y),l1[x].push_back(w); //vector\u5b58\u56fe \n\t}\n\tfor(long long i=1; i<=n; i++)\n\t{\n\t\tdis[i]=1e16; //\u987a\u4fbf\u521d\u59cb\u5316\u4e00\u4e0b \n\t\tcin>>sum[i];\n\t\tfor(long long j=1; j<=sum[i]; j++)\n\t\t{\n\t\t\tcin>>a;\n\t\t\tjie[a].push_back(i); //a\u8282\u70b9\u4fdd\u62a4\u7740i\u8282\u70b9 \n\t\t}\n\t}\n\tdis[1]=0;\n\tfor(long long i=1; i<=n; i++)\n\t{\n\t\tmin1=1e16;\n\t\tfor(long long j=1; j<=n; j++)\n\t\t\tif(dis[j]<min1&&vis[j]==0&&sum[j]==0) //\u7ed3\u754c\u53d1\u751f\u5668\u5168\u90e8\u88ab\u6467\u6bc1\u624d\u80fd\u5230\u8fd9\u5ea7\u57ce\u5e02 \n\t\t\t\tmin1=dis[j],t=j; //\u627e\u6700\u5c0f\u7684\u70b9\uff0c\u8fd9\u91cc\u53ef\u4ee5\u52a0\u5806\u4f18\u5316\uff0c\u4e0d\u8fc7\u6570\u636e\u4e0d\u5927\u6ca1\u5fc5\u8981 \n\t\tvis[t]=1;\n\t\tfor(long long j=0; j<l[t].size(); j++)\n\t\t\tdis[l[t][j]]=min(dis[l[t][j]],dis[t]+l1[t][j]); //\u6269\u5c55 \n\t\tfor(long long j=0; j<jie[t].size(); j++)\n\t\t{\n\t\t\tgen=jie[t][j],sum[gen]--;\n\t\t\tif(sum[gen]==0&&dis[gen]!=1e16)\n\t\t\t\tdis[gen]=max(dis[t],dis[gen]); //\u91cd\u70b9\uff01\u5230\u8fd9\u5ea7\u57ce\u5e02\u5fc5\u987b\u5148\u7834\u574f\u5b8c\u7ed3\u754c\u53d1\u751f\u5668 \n\t\t}\n\t}\n\tcout<<dis[n];\n\treturn 0;\n}\n```\n",
        "postTime": 1567068821,
        "uid": 78001,
        "name": "dz_ice",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2446 \u3010[SDOI2010]\u5927\u9646\u4e89\u9738\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7528dijkstra\u505a\u3002\n\n\u601d\u8def\uff1a\u5f53\u6211\u4eec\u8981\u5230\u4e00\u4e2a\u70b9\u65f6\uff0c\u9996\u5148\u8981\u628a\u4fdd\u62a4\u5b83\u7684\u70b9\u5168\u90e8\u70b8\u6389\uff0c\u4e0d\u7136\u5373\u4f7f\u5b83\u79bb\u5f97\u518d\u8fd1\u4e5f\u65e0\u6cd5\u5230\u8fbe\uff0c\u70b8\u4fdd\u62a4\u5b83\u7684\u70b9\u7684\u4e8b\u60c5\u548c\u53bb\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u540c\u65f6\u505a\uff0c\u6240\u4ee5\u5230\u8fbe\u6216\u70b8\u6389\u4e00\u4e2a\u70b9\u7684\u65f6\u95f4\u4e3a\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u548c\u5230\u4fdd\u62a4\u5b83\u7684\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e4b\u95f4\u7684\u6700\u5927\u503c\u3002\u5165\u961f\u65f6\u5148\u5c06\u6ca1\u6709\u88ab\u4fdd\u62a4\u4e14\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u5165\u961f\uff0c\u7528\u5b83\u66f4\u65b0\u5b83\u4fdd\u62a4\u7684\u70b9\u7684\u8ddd\u79bb\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\n```\n#include<iostream>\n#include<cmath>\nusing namespace std;\nstruct node{\n\tint next,to,v;\n}w[140001];\nint i,j,k,n,m,x,y,z,s[3001];//s\u5c31\u662fdis\u5566\nint head[3001],b[3001][3001],o[3001],f[3001][3001];\n//f\u8868\u793a\u4e00\u4e2a\u70b9\u4fdd\u62a4\u7684\u70b9\uff08\u540e\u7ee7\uff09\uff0cb\u8868\u793a\u4fdd\u62a4\u8fd9\u4e2a\u70b9\u7684\u70b9\uff08\u524d\u9a71\uff09\n//\u70b9i\u7684\u540e\u7ee7\uff08\u524d\u9a71\uff09\u4e2a\u6570\u5b58\u5728f[i][0](b[i][0])\u4e2d\n//o\u7528\u6765\u5b58\u70b9\u662f\u5426\u5165\u961f\nint main(){\n\tcin>>n>>m;\n\tfor (i=1; i<=m; i++){\n\t\tcin>>x>>y>>z;\n\t\tw[i].to=y; w[i].v=z;\n\t\tw[i].next=head[x];\n\t\thead[x]=i;\n\t}\n\tfor (i=1; i<=n; i++){\n\t\tcin>>b[i][0];\n\t\tfor (j=1; j<=b[i][0]; j++){\n\t\t\tcin>>b[i][j];\n\t\t\tf[b[i][j]][0]++;\n\t\t\tf[b[i][j]][f[b[i][j]][0]]=i;//\u5b58\u540e\u7ee7\uff0c\u601d\u8def\u6bd4\u8f83\u626d\u66f2\n            //b[i][j]\u7684\u7b2cf[b[i][j]][0]\u4e2a\u540e\u7ee7\u662fi\n\t\t} \n\t}\n\tfor (i=0; i<=n; i++) s[i]=1e17;\n\ts[1]=0; o[1]=1; k=1;\n\twhile (k!=0&&k!=n){//\u7b97\u6cd5\u4e3b\u9898\n\t\tfor (j=head[k]; j; j=w[j].next){\n\t\t\tif (s[w[j].to]>s[k]+w[j].v){\n\t\t\t\ts[w[j].to]=s[k]+w[j].v;\n\t\t\t}\n\t\t}\n\t\tfor (j=1; j<=f[k][0]; j++){\n\t\t\tb[f[k][j]][0]--;       //k\u7684\u7b2cj\u4e2a\u540e\u7ee7\u7684\u524d\u9a71\u6570-1\uff0c\u6bd4\u8f83\u626d\u66f2\n\t\t\ts[f[k][j]]=max(s[f[k][j]],s[k]);\n\t\t}\n\t\to[k]=1; k=0;\n\t\tfor (j=1; j<=n; j++){\n\t\t\tif (s[j]<s[k]&&!o[j]&&b[j][0]==0) k=j;\n\t\t}\n\t}\n\tcout<<s[n];\n\treturn 0;\n}```",
        "postTime": 1527076896,
        "uid": 63661,
        "name": "Taduro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2446 \u3010[SDOI2010]\u5927\u9646\u4e89\u9738\u3011"
    },
    {
        "content": "\u4e3a\u4e86\u6ee1\u8db3\u9650\u5236\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e00\u4e2a\u70b9\uff0c\u6700\u65e9\u80fd\u5230\u8fbe\u7684\u65f6\u95f4 \u4ee5\u53ca \u6700\u65e9\u80fd\u8fdb\u5165\u7684\u65f6\u95f4\n\n\u5177\u4f53\u7684\uff1a\n\nd1\uff0c\u6700\u77ed\u8def\uff0c\u8868\u793a    \u6700\u65e9\u80fd\u5230\u8fbe\u7684\u65f6\u95f4\n\n\nd2\uff0c\u5176\u524d\u9a71\u8282\u70b9\u4e2dd1\uff08\u4e3a\u4e86\u65b9\u4fbf\u63cf\u8ff0\uff0c\u5b9e\u9645\u4e0a\u662fD\uff09\u7684max\uff0c\u8868\u6700\u65e9\u80fd\u8fdb\u5165\n\n\n\u90a3\u4e48D\uff08\u8868\u793a\u5b9e\u9645\u6700\u77ed\u65f6\u95f4\uff09=max\uff08d1\uff0cd2\uff09\n\n\uff08d2\u5e94\u8be5\u7531D\u63a8\u51fa\uff09\n\n\u53ef\u4ee5\u7528\u8fea\u6770\u65af\u7279\u62c9\u6765\u64cd\u4f5c\n\n\u6bcf\u4e00\u6b21\u9009\u62e9D\u6700\u5c0f\u7684\u70b9\uff0c\u7528\u5b83\u6765\u66f4\u65b0\u5b83\u76f8\u8fde\u7684\u8282\u70b9\u7684d1\uff0c\u4ee5\u53ca\u5b83\u80fd\u6253\u5f00\u7684\u70b9\u7684d2\n\n\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5ea6\uff0c\u8868\u793a\u6253\u5f00\u8fd9\u4e2a\u8282\u70b9\u8981\u70b8\u51e0\u4e2a\u524d\u9a71\u8282\u70b9\n\n\u90a3\u4e48\u5f53\u4e00\u4e2a\u70b9\u5ea6\u4e3a0\u4e4b\u540e\uff0c\u624d\u53ef\u4ee5\u7528\u6765\u66f4\u65b0\uff0c\u624d\u80fd\u653e\u8fdb\u5806\u91cc\n\n\u5230\u8fd9\u91cc\u5c31\u7ed3\u675f\u4e86\uff0c\u8d34\u4e00\u4e0b\u5806\u4f18\u5316\u7684\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<vector>\n#include<cstdio>\n#define M 70010\n#include<queue>\n#define N 3010\nusing namespace std;\nstruct node\n{\n    int id;\n    int d;\n    bool operator < (const node &rhs) const\n    {\n        return rhs.d<d;\n    }\n};\npriority_queue<node> q;\nint n,m,head[N],to[M],e,len[M],Next[M];\nvoid buid(int u,int v,int l)\n{\n    Next[++e]=head[u];head[u]=e;\n    to[e]=v;len[e]=l;\n}\nint s[N][N],vis[N];\nint d1[N],d2[N],d[N]; \nvoid dj()\n{\n    d1[1]=0;\n    q.push((node){1,max(d1[1],d2[1])});\n    while(!q.empty())\n    {\n        node top=q.top();q.pop();\n        if(vis[top.id]) continue;\n        if(top.d!=max(d1[top.id],d2[top.id])) continue;\n        for(int i=head[top.id];i;i=Next[i])\n        {\n            int j=to[i];\n            if(d1[j]>top.d+len[i])\n            {\n                d1[j]=top.d+len[i];\n                if(!d[j]) q.push((node){j,max(d1[j],d2[j])});\n            }\n        }\n        for(int i=1;i<=s[top.id][0];++i)\n        {\n            d[s[top.id][i]]--;\n            if(!d[s[top.id][i]])\n            {\n                d2[s[top.id][i]]=top.d;\n                q.push((node){s[top.id][i],max(d1[s[top.id][i]],d2[s[top.id][i]])});\n            }\n        }\n    }\n    printf(\"%d\",max(d1[n],d2[n]));\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    memset(d1,20,sizeof(d1));\n    for(int i=1;i<=m;++i)\n    {\n        int u,v,l;scanf(\"%d%d%d\",&u,&v,&l);\n        buid(u,v,l);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        scanf(\"%d\",&d[i]);\n        for(int j=1;j<=d[i];++j)\n        {\n            int it;scanf(\"%d\",&it);\n            s[it][++s[it][0]]=i;\n        }\n    }\n    dj();\n    return 0;\n}\n//\u8fd9\u6b21\u6d3b\u52a8\u4e0d\u662f\u6253\u5fb7\u56fd\u4f6c\u5417\uff1f47\u546247\u5462=\uff0c=\n//\u4eca\u5929\u4e5f\u4f9d\u65e7\u6ca1\u6709\u635e\u5230\u5c9b\u98ce\u538c\u621847\u5462\n//\u751a\u81f3\u8fd8\u628a\u5f39\u5f39\u6253\u6ca1\u4e86\n\n```",
        "postTime": 1506481081,
        "uid": 35718,
        "name": "MloVtry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2446 \u3010[SDOI2010]\u5927\u9646\u4e89\u9738\u3011"
    },
    {
        "content": "**\u6b64\u9898\u662f\u4e00\u9053\u6709\u9650\u5236\u7684\u6700\u77ed\u8def\u95ee\u9898\uff0c\u5176\u5b9e\u601d\u8def\u6bd4\u8f83\u597d\u60f3\uff0c\u5c31\u662f\u8ba1\u7b97\u51fa1\u5230n\u7684\u5b9e\u9645\u6700\u77ed\u8def\uff0c\u518d\u4e0e\u5b9e\u9645\u503c\u5bf9\u6bd4\uff0c\u8fd9\u4e2a\u5b9e\u9645\u503c\u5c31\u662f\u70b8\u6389\u53bbn\u7684\u8def\u5f84\u4e0a\u6709\u4fdd\u62a4\u7684\u57ce\u5e02\u7684\u4fdd\u62a4\u5b83\u57ce\u5e02\u7684\u65f6\u95f4\u540e\uff08\u8c8c\u4f3c\u6709\u70b9\u7ed5\u53e3\u3002\u3002\uff09\uff0c\u8bf4\u767d\u4e86\u5c31\u662f\u673a\u5668\u4eba\u53bb\u70b8\u90a3\u4e2a\u80fd\u4fdd\u62a4\u522b\u7684\u57ce\u5e02\u7684\u65f6\u95f4\u53ef\u80fd\u4f1a\u591a\u4e8e\u76f4\u63a5\u5230n\u7684\u65f6\u95f4\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u6211\u6709\u601d\u8def\u5199\u4e0d\u51fa\u5462\uff0c\u770b\u9898\u89e3\u540e\u53d1\u73b0\uff0c\u8fd9\u9898\u8c8c\u4f3c\u53ea\u80fd\u7528dijkstra\uff0c\u4e0d\u80fd\u7528spfa\uff0c\u6211\u8fd9\u4e2aspfa\u6253\u5929\u4e0b\u7684\u5c31\u53ea\u80fd\u82e6\u903c\u4e86\uff0c\u867d\u7136\u6700\u77ed\u8def\u7b97\u6cd5\u5927\u540c\u5c0f\u5f02\uff0c\u4f46\u662f\u7075\u6d3b\u8fd0\u7528\u8d77\u6765\uff0c\u5982\u679c\u4e0d\u591f\u719f\u6089\u7684\u8bdd\u8fd8\u662f\u4f1a\u51fa\u5c94\u5b50\u7684**\n\n\u7136\u540e\u5c31\u662f\u7f51\u4e0a\u627e\u4e86\u4e00\u6ce2\u9898\u89e3\u770b\u4e86\u4e00\u4e0b\uff0c\u5c31\u76f4\u63a5\u4e0a\u4e00\u4e0b\u7b80\u77ed60\u884c\u4ee3\u7801\u5427\n\n```c\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<queue>\n#include<vector>\nusing namespace std;\n#define N 3002\n#define M 70004\n#define ll long long \n#define pr pair<ll, int>\n#define inf 0x3f3f3f3f\nvector<int > p[N];\npriority_queue<pr> q;\nint head[N],to[M],nxt[M],c[N],vis[N];\nll len[M],f[N],g[N];\nint tot;\ninline void add(int x,int y,int z)\n{\n\tto[++tot]=y;\n\tnxt[tot]=head[x];\n\tlen[tot]=z;\n\thead[x]=tot;\n}\nint main()\n{\n\tint n,m,i,j,x,y;\n\tll z;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%lld\",&x,&y,&z);\n\t\tadd(x,y,z);\n\t}\n\tmemset(g,inf,sizeof(g));\n\tmemset(f,inf,sizeof(f));\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&c[i]);\n\t\tfor(int j=1;j<=c[i];j++)\n\t\t{\n\t\t\tscanf(\"%d\",&x);\n\t\t\tp[x].push_back(i);\n\t\t}\n\t\tif(!c[i])g[i]=0;\n\t}\n\tf[1]=0;q.push(pr(0,1));\n\twhile(q.size())\n\t{\n\t\tz=-q.top().first,x=q.top().second,q.pop();\n\t\tif(vis[x])continue;\n\t\tvis[x]=1;\n\t\tfor(int i=head[x];i;i=nxt[i])\n\t\t{\n\t\t\tint v=to[i];\n\t\t\tif(f[v]>z+len[i])\n\t\t\t{\n\t\t\tf[v]=z+len[i];\n\t\t\tif(!c[v])q.push(pr(-max(f[v],g[v]),v));\t\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<p[x].size();i++)\n\t\t{\n\t\t\tc[p[x][i]]--;\n\t\t\tif(!c[p[x][i]])\n\t\t\tg[p[x][i]]=z,q.push(pr(-max(f[p[x][i]],g[p[x][i]]),p[x][i]));\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",max(f[n],g[n]));\n\treturn 0;\n}\n```\n\n\n\u5176\u5b9e\u4e5f\u5c31\u591a\u4e86\u4e00\u4e2ag[n]\u7684\u65f6\u95f4\u5904\u7406\u3002",
        "postTime": 1569331485,
        "uid": 111294,
        "name": "xcyy",
        "ccfLevel": 6,
        "title": "\u5927\u9646\u4e89\u9738"
    },
    {
        "content": "(\u8c01\u544a\u8bc9\u6211\u8fd9\u662f\u4e2a\u5206\u5c42\u6700\u77ed\u8def\u6765\u7740\u7684\uff1f\uff1f\uff1f)\n\n\u8fdb\u5165\u4e00\u4e2a\u57ce\u5e02\u5fc5\u987b\u8981\u8fd9\u4e2a\u57ce\u5e02\u6240\u6709\u7ed3\u754c\u90fd\u6253\u7834\u624d\u80fd\u8fdb \n\n\u90a3\u6211\u4eec\u53ef\u4ee5\u8fb9\u70b8\u8fb9\u8d70 \u4e5f\u5c31\u662f\u8bf4 \u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4d1\u6570\u7ec4:\u8d70\u5230\u7684\u65f6\u95f4(\u7ed3\u754c\u53ef\u80fd\u6ca1\u70b8\u5b8c) d2\u6570\u7ec4:\u53ef\u8fdb\u5165\u7684\u65f6\u95f4(\u7ed3\u754c\u90fd\u88ab\u70b8\u5b8c\u4e86) d\u6570\u7ec4:\u771f\u5b9e\u7684\u5230\u8fbe\u65f6\u95f4\n\n\u5bb9\u6613\u53d1\u73b0d[i]=max(d1[i],d2[2])\n\n\u90a3\u6211\u4eec\u5c31\u7528dijkstra\u7ef4\u62a4d\u6570\u7ec4 \u6bcf\u6b21\u90fd\u8981\u66f4\u65b0\u5f53\u524d\u70b9\u6240\u4fdd\u62a4\u7684\u57ce\u5e02\u7684\u53ef\u8fdb\u5165\u65f6\u95f4  \u4ee5\u53ca\u5f53\u524d\u70b9\u8fde\u7684\u57ce\u5e02\u7684\u5230\u8fbe\u65f6\u95f4 \u5f53\u4e00\u4e2a\u57ce\u5e02\u7684\u7ed3\u754c\u5168\u90e8\u88ab\u70b8\u4e86 \u5c31\u5165\u5806\n\n\u6ce8\u610f \u8fd9\u79cd\u6709\u9650\u5236\u7684\u6700\u77ed\u8def\u6700\u597d\u7528dijkstra \u56e0\u4e3a\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u8d70\u4e00\u6b21\n\n```cpp\n#include<bits/stdc++.h>\n#define N 3005\n#define M 70005\nusing namespace std;\ntemplate<class T>\ninline void read(T &x)\n{\n\tx=0;\n\tstatic char ch=getchar();\n\twhile(ch<'0'||ch>'9')\tch=getchar();\n\twhile(ch>='0'&&ch<='9')\tx=x*10+ch-'0',ch=getchar();\n}\nstruct Edge\n{\n\tint to,next,val;\n}edge[M];\nint n,m,tot,first[N],a[N][N],pro[N],p[N];//pro:\u6bcf\u4e2a\u57ce\u5e02\u4fdd\u62a4\u591a\u5c11\u57ce\u5e02\tp:\u6bcf\u4e2a\u57ce\u5e02\u53d7\u591a\u5c11\u57ce\u5e02\u4fdd\u62a4 \ninline void addedge(int x,int y,int z)\n{\n\ttot++; edge[tot].to=y; edge[tot].next=first[x]; edge[tot].val=z; first[x]=tot;\n}\ntypedef pair<int,int> Pair;\npriority_queue<Pair,vector<Pair>,greater<Pair> > heap;\nbool vis[N];\nint d1[N],d2[N],d[N];//d1:\u5230\u8fbe\u65f6\u95f4 d2:\u53ef\u8fdb\u5165\u65f6\u95f4 \nvoid Dijkstra()\n{\n\tmemset(d,63,sizeof(d)); memset(d1,63,sizeof(d1));\n\theap.push(make_pair(0,1)); \n\td1[1]=0; d[1]=0;\n\twhile(!heap.empty())\n\t{\n\t\tint now=heap.top().second; heap.pop();\n\t\tif(vis[now]) continue; \n\t\tvis[now]=true;\n\t\tfor(int u=first[now];u;u=edge[u].next)\n\t\t{\n\t\t\tint v=edge[u].to;\n\t\t\tif(d[now]+edge[u].val<d1[v])\t//\u5230\u8fbe\u65f6\u95f4 \n\t\t\t{\n\t\t\t\td1[v]=d[now]+edge[u].val;\n\t\t\t\td[v]=max(d1[v],d2[v]);\n\t\t\t\tif(!p[v])\theap.push(make_pair(d[v],v));\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=pro[now];i++)\t//\u66f4\u65b0\u4fdd\u62a4\u57ce\u5e02 \n\t\t{\n\t\t\tint v=a[now][i];\n\t\t\tp[v]--,d2[v]=max(d2[v],d[now]),d[v]=max(d1[v],d2[v]);\n\t\t\tif(!p[v])\theap.push(make_pair(d[v],v));\n\t\t}\n\t}\n\tcout<<d[n]<<endl;\t\n}\nint main()\n{\n\tread(n); read(m);\n\tfor(int i=1,u,v,w;i<=m;i++)\t\n\t{\n\t\tread(u); read(v); read(w);\n\t\taddedge(u,v,w);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tread(p[i]);\n\t\tfor(int j=1,x;j<=p[i];j++)\n\t\t{\n\t\t\t read(x);\n\t\t\t a[x][++pro[x]]=i;\n\t\t}\n\t}\n\tDijkstra();\n\treturn 0;\n}\n```",
        "postTime": 1540778056,
        "uid": 60299,
        "name": "Patrickpwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2446 \u3010[SDOI2010]\u5927\u9646\u4e89\u9738\u3011"
    },
    {
        "content": "\u624b\u5199\u5806\u543c\u554a~~\uff08\u867d\u7136\u6211\u8c03\u4e86\u4e24\u4e2a\u5c0f\u65f6\u53d1\u73b0\u624b\u5199\u5806\u5199\u6b8b\u4e86~~\n\n\u7528\u5806\u4f18\u5316\u770b\u4e0a\u53bb\u50cfSPFA\u7684Dijkstra~~\u5c31\u5f97\u5230\u4e86SPkstra~~\n\n\u624b\u5199\u5806\u4f18\u5316\u7684\u6280\u5de7\u5728\u4e8e\n\n1. \u7528`id[]`\u4ee3\u66ff\u4f18\u5148\u961f\u5217\u7684`vis[]`\u5e76\u63d0\u4f9b\u70b9\u5728\u5806\u4e2d\u7684\u7f16\u53f7\n2. \u7528`up(id[a[i].nx])`\u907f\u514d\u53cd\u590d\u5165\u5806\u5e76\u5bf9\u5806\u8fdb\u884c\u7ef4\u62a4\u4ece\u800c\u4f18\u5316\u5e38\u6570\n3. ~~\u8fd9\u4e1c\u897f\u597d\u50cf\u80fd\u548cSPFA\u4e00\u6837\u627e\u8d1f\u73af~~\n\n```cpp\n#include\"cstdio\"\n#include\"cstring\"\n#include\"iostream\"\n#include\"algorithm\"\nusing namespace std;\n\nconst int MAXN=3005;\nconst int MAXM=7e4+5;\n\nint n,m,np[2];\nint h[2][MAXN],ln[2][MAXN],hp[MAXN],id[MAXN],idg[MAXN];\nstruct rpg{\n\tint li,nx,ln;\n}a[2][MAXM];\n\nint read()\n{\n\tint x=0;char ch=getchar();\n\twhile(ch<'0'||'9'<ch) ch=getchar();\n\twhile('0'<=ch&&ch<='9') x=(x<<3)+(x<<1)+(ch^'0'),ch=getchar();\n\treturn x;\n}\n\nvoid add(int kd,int ls,int nx,int ln){a[kd][++np[kd]]=(rpg){h[kd][ls],nx,ln};h[kd][ls]=np[kd];}\nint Dis(int x){return max(ln[0][x],ln[1][x]);}\n\nvoid up(int x)\n{\n\tfor(int i=x,j=i>>1;j;i=j,j>>=1){\n\t\tif(Dis(hp[i])<Dis(hp[j])) swap(hp[i],hp[j]),swap(id[hp[i]],id[hp[j]]);\n\t\telse break;\n\t}return;\n}\n\nvoid push(int x)\n{\n\thp[++hp[0]]=x;\n\tid[x]=hp[0];\n\tup(hp[0]);\n\treturn;\n}\n\nvoid pop()\n{\n\tid[hp[1]]=0;id[hp[hp[0]]]=1;\n\thp[1]=hp[hp[0]--];\n\tfor(int i=1,j=2;j<=hp[0];i=j,j<<=1){\n\t\tif(j<hp[0]&&Dis(hp[j])>Dis(hp[j+1])) ++j;\n\t\tif(Dis(hp[i])>Dis(hp[j])) swap(hp[i],hp[j]),swap(id[hp[i]],id[hp[j]]);\n\t\telse break;\n\t}return;\n}\n\nvoid SPkstra()\n{\n\tfor(int i=2;i<=n;++i) ln[0][i]=2147483647;\n\tln[0][1]=0;push(1);\n\twhile(hp[0]){\n\t\tint nw=hp[1];pop();int c=Dis(nw);\n\t\tfor(int i=h[0][nw];i;i=a[0][i].li){\n\t\t\tif(ln[0][a[0][i].nx]>c+a[0][i].ln){\n\t\t\t\tln[0][a[0][i].nx]=c+a[0][i].ln;\n\t\t\t\tif(!id[a[0][i].nx]&&!idg[a[0][i].nx]) push(a[0][i].nx);\n\t\t\t\telse if(!idg[a[0][i].nx]) up(id[a[0][i].nx]);\n\t\t\t}\n\t\t}for(int i=h[1][nw];i;i=a[1][i].li){\n\t\t\tln[1][a[1][i].nx]=max(ln[1][a[1][i].nx],c);\n\t\t\tif(!--idg[a[1][i].nx]) push(a[1][i].nx);\n\t\t}\n\t}return;\n}\n\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;++i){int x=read(),y=read(),z=read();add(0,x,y,z);}\n\tfor(int i=1;i<=n;++i){\n\t\tint t=idg[i]=read();\n\t\twhile(t--){int x=read();add(1,x,i,0);}\n\t}SPkstra();printf(\"%d\\n\",Dis(n));\n\treturn 0;\n}\n```",
        "postTime": 1540537720,
        "uid": 31293,
        "name": "Adove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2446 \u3010[SDOI2010]\u5927\u9646\u4e89\u9738\u3011"
    },
    {
        "content": "\u8fd9\u79cd\u8bbf\u95ee\u6b21\u5e8f\u6070\u5de7\u7b26\u5408Dijkstra\u7684\u7279\u70b9\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u8d70\u4e00\u6b21\u3002\n\n\u8bb0\u5f55\u4e00\u4e0b\u70b9\u6743\uff0c\u5148\u8bbf\u95ee\u70b9\u6743\u4e3a0\u7684\u70b9\uff0c\u518d\u68c0\u67e5\u7ed3\u754c\u751f\u6210\u5668\u53ef\u4ee5\u4f7f\u54ea\u4e9b\u70b9\u7684\u70b9\u6743\u51cf\u5c0f\n\n\u987a\u4fbf\u5f53\u67d0\u4e2a\u70b9\u7684\u70b9\u6743\u51cf\u5c0f\u4e3a0\u7684\u65f6\u5019\u8ba8\u8bba\u673a\u5668\u4eba\u5230\u4e86\u57ce\u5e02\u4f46\u662f\u6709\u7ed3\u754c\uff0c\u9700\u8981\u7b49\u5019\u7684\u60c5\u51b5\u3002\n\n\u6700\u540e\u76f4\u63a5\u4e00\u6ce2Dijkstra\u6700\u77ed\u8def\u5c31\u597d\u4e86\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<string>\n#include<algorithm>\nusing namespace std;\n\n//graph\nstruct ed\n{\n    int pre,to,w;\n}edge[100010]={0};\nint edgenum,nodenum,pointer[3010]={0},fx,tx,wx;\n//dijkstra\nint dis[3010]={0},wpoint,minway,prex;\nbool vised[3010]={false};\nint nodev[3010]={0},limits[3010][3010]={0},limnum[3010];\n\nvoid Insert(int at)\n{\n    edge[at].pre=pointer[fx];\n    edge[at].to=tx;\n    edge[at].w=wx;\n    pointer[fx]=at;\n}\n\nint main()\n{\n    scanf(\"%d%d\",&nodenum,&edgenum);\n    for (int i=1;i<=edgenum;i++)\n    {\n        scanf(\"%d%d%d\",&fx,&tx,&wx);\n        Insert(i);\n    }\n    for (int i=1;i<=nodenum;i++)\n    {\n        scanf(\"%d\",&nodev[i]);\n        int cache1=0;\n        for (int j=1;j<=nodev[i];j++)\n        {\n            scanf(\"%d\",&cache1);\n            limnum[cache1]++;\n            limits[cache1][limnum[cache1]]=i;\n        }\n    }\n    \n    memset(dis,0x3f,sizeof(dis));\n    dis[1]=0;\n    for (int i=1;i<=nodenum;i++)\n    {\n        minway=1e8;\n        for (int j=1;j<=nodenum;j++)\n        {\n            if (!nodev[j] && !vised[j] && dis[j]<minway)\n            {\n                minway=dis[j];\n                wpoint=j;\n            }\n        }\n        vised[wpoint]=true;\n        prex=pointer[wpoint];\n        if (limnum[wpoint]) for (int k=1;k<=limnum[wpoint];k++) \n        {\n            nodev[limits[wpoint][k]]--;\n            if (!nodev[limits[wpoint][k]])\n            {\n                if (dis[limits[wpoint][k]]<dis[wpoint]) dis[limits[wpoint][k]]=dis[wpoint];\n            }\n        }\n        while (prex)\n        {\n            if (dis[wpoint]+edge[prex].w<dis[edge[prex].to])\n            {\n                dis[edge[prex].to]=dis[wpoint]+edge[prex].w;\n            }\n            prex=edge[prex].pre;\n        }\n    }    \n    printf(\"%d\\n\",dis[nodenum]);\n    return 0;\n}",
        "postTime": 1509231369,
        "uid": 21512,
        "name": "GNAQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2446 \u3010[SDOI2010]\u5927\u9646\u4e89\u9738\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u4e00\u5f20\u6709\u5411\u5e26\u6743\u56fe\uff0c\u4f46\u662f\u5230\u8fbe\u4e00\u4e2a\u70b9\u4e4b\u524d\u5fc5\u987b\u8bbf\u95ee\u53e6\u4e00\u4e9b\u70b9\u3002\n\n\u6c42\u4ece\u70b91\u5230\u70b9n\u7684\u6700\u77ed\u8def\u5f84\u3002\n\n\u9898\u89e3\uff1a\n\n\u7528\u4e00\u4e2a\u201c\u4f2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u201d\u6765\u63cf\u8ff0\uff08\u4e4b\u6240\u4ee5\u662f\u8bf4\u4f2a\uff0c\u662f\u56e0\u4e3a\u8fd9\u662f\u4e2a\u56fe\u800c\u4e0d\u662f\u4e2a\u6811\uff0c\u6240\u4ee5\u4ec5\u4ec5\u7528\u6765\u8868\u793a\u903b\u8f91\uff09\n\ndist[x]=max{d[from[x]],min{dist[pre[x]]+e[i].wgt}}\u3002\n\n\u8fd9\u4e2a\u610f\u601d\u662f\uff1a\u5230\u8fbe\u4e00\u4e2a\u70b9\u7684\u771f\u6b63\u7528\u65f6\uff0c\u662f\u5728\u5230\u8fbe\u5b83\u4e4b\u524d\u5fc5\u987b\u5230\u8fbe\u7684\u70b9\u7684\u7528\u65f6\u7684\u6700\u5927\u503c\uff0c\u548c\u6240\u6709\u5230\u8fbe\u5b83\u8def\u5f84\u4e2d\u6700\u77ed\u7684\u90a3\u4e00\u6761\u7684\u6700\u5c0f\u503c\u53d6\u6700\u5927\u503c\u3002\n\n\u8bf4\u7684\u597d\u4e71\uff0c\u6700\u597d\u753b\u4e2a\u56fe\uff0c\u4f8b\u5982\u539f\u9898\u4e2d\u7684\u56fe\uff0c\u4ee5\u7b2c\u516d\u4e2a\u70b9\u4e3a\u4f8b\uff0c\n\n\u9996\u5148\u8981\u4fdd\u8bc13\u548c5\u90fd\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u56e0\u6b64\u53d6\u6700\u5927\u503c\uff1b\n\n\u540c\u65f6\u8981\u8ba1\u7b97\u51fa\u8bbf\u95ee4\u7684\u771f\u6b63\u65f6\u95f4\u518d+wgt(4,6)\u3002\n\n\u7136\u540e\u8fd9\u4e8c\u8005\u6c42\u4e2a\u6700\u5927\u503c\u5c31\u597d\u4e86\uff0c\u6211\u89c9\u5f97\u5230\u8fd9\u4e3a\u6b62\u5e94\u8be5\u5c31\u6bd4\u8f83\u660e\u767d\u4e86\u3002\n\n\u7136\u540e\u597d\u50cf\u7531\u4e8e\u4ee3\u7801\u5199\u5f97\u592a\u4e11\u5e76\u6ca1\u6709\u7528\u5806\u4f18\u5316\u4e5f\u8fc7\u4e86\uff08\u590d\u6742\u5ea6O(n^2+m)\uff09\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u6ce8\uff1ad[x]\u8868\u793a\u8bbf\u95ee\u5b58\u50a8x\u7684\u7ed3\u754c\u53d1\u751f\u5668\u7684\u57ce\u5e02\u7684\u6700\u5927\u503c\uff0cdist[x]\u5219\u8868\u793a\u8bbf\u95eex\u7684\u524d\u9a71\u7ed3\u70b9\u7684\u6700\u5c0f\u503c\uff0c\n\n\u8fa3\u4e48\u8bf4\u7b54\u6848\u5c31\u662fmax{d[n],dist[n]}\u8fa3\uff01\uff09\uff1a\n\n```cpp\n//SDOI 2010\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<climits>\n#define MAXN 3010\n#define MAXM 70010\n#define INF LLONG_MAX\n#define ull unsigned long long int\nusing namespace std;\nstruct edge{\n    int from,to,wgt,pre;\n}e[MAXM];\nint h[MAXN],cnt[MAXN],etop,n,m;\null dist[MAXN],d[MAXN];\nvector<int> pro[MAXN];\nbool vis[MAXN];\nint add_edge(int u,int v,int w)\n{\n    etop++;\n    e[etop].from=u;\n    e[etop].to=v;\n    e[etop].wgt=w;\n    e[etop].pre=h[u];\n    h[u]=etop;\n    return 0;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    etop=0;\n    for(int i=1;i<=m;i++)\n    {\n        int u,v,w;\n        scanf(\"%d%d%d\",&u,&v,&w);\n        if(u!=v) add_edge(u,v,w);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&cnt[i]);\n        for(int j=1;j<=cnt[i];j++)\n        {\n            int pr;scanf(\"%d\",&pr);\n            pro[pr].push_back(i);\n        }\n    }\n    for(int i=0;i<=n;i++)\n        dist[i]=INF,d[i]=0;\n    int s;dist[s=1]=0;\n    memset(vis,false,sizeof(vis));\n    for(int i=1;i<=n;i++)\n    {\n        int mink=0;\n        for(int j=1;j<=n;j++)\n            if(!vis[j]&&!cnt[j]&&max(dist[j],d[j])<max(dist[mink],d[mink]))\n                mink=j;\n        //if(mink==0) return 0;\n        vis[mink]=true;\n        for(int j=h[mink];j;j=e[j].pre)\n            if(!vis[e[j].to]&&dist[e[j].to]>max(dist[mink],d[mink])+e[j].wgt)\n                dist[e[j].to]=max(dist[mink],d[mink])+e[j].wgt;\n        for(int j=pro[mink].size()-1;j>=0;j--)\n        {\n            cnt[pro[mink][j]]--;\n            if(d[pro[mink][j]]<max(dist[mink],d[mink]))\n                d[pro[mink][j]]=max(dist[mink],d[mink]);\n        }\n    }\n    printf(\"%lld\\n\",max(dist[n],d[n]));\n    return 0;\n}\n```",
        "postTime": 1492176642,
        "uid": 8662,
        "name": "Mys_C_K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2446 \u3010[SDOI2010]\u5927\u9646\u4e89\u9738\u3011"
    }
]