[
    {
        "content": "\u9996\u5148\u4ecb\u7ecd\u4e00\u4e2a\u539f\u5219\uff1a$i\u2192j$\u7684\u6700\u77ed\u8def\u5f84\u7684\u4efb\u610f\u4e00\u6761\u5b50\u8def\u5f84$u\u2192v$\u90fd\u662f\u6700\u77ed\u8def\u5f84\u3002\n\n\u8bc1\u660e\uff1a\u5047\u8bbe\u5b58\u5728\u4e00\u6761\u5b50\u8def\u5f84$u\u2192v$\u4e0d\u662f\u6700\u77ed\u8def\u5f84\uff0c\u90a3\u4e48\u4e00\u5b9a\u80fd\u591f\u627e\u5230\u4e00\u6761\u66f4\u77ed\u7684$u\u2192v$\u7684\u8def\u5f84\u4f7f$i\u2192j$\u7684\u8def\u5f84\u66f4\u77ed\u3002\n\n\u6839\u636e\u8fd9\u4e2a\u539f\u5219\uff0c\u53ef\u4ee5\u5f97\u51fa\uff0c\u5728\u56fa\u5b9a\u6e90\u70b9$S$\u65f6\uff0c\u5b58\u5728$G$\u7684\u4e00\u4e2a\u5b50\u56fe$G'$\uff0c\u4f7f\u5f97$G'$\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u5728$S$\u5230\u5176\u4ed6\u81f3\u5c11\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\uff0c\u4e14$G'$\u4ee5\u5916\u7684\u8fb9\u4e0d\u5728$S$\u5230\u4efb\u610f\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u3002\u8fd9\u91cc\u628a$G'$\u79f0\u4e3a\u6e90\u70b9\u4e3a$S$\u65f6$G$\u7684**\u6700\u77ed\u8def\u56fe**\u3002\u5224\u65ad\u4e00\u6761\u8fb9$u\u2192v$\u662f\u5426\u5728\u6700\u77ed\u8def\u56fe\u4e2d\uff0c\u53ea\u9700\u5224\u65ad\u662f\u5426$dis[u]+val(u\u2192v)==dis[v]$\u3002\u5176\u4e2d$val(u\u2192v)$\u4e3a\u8fb9$u\u2192v$\u7684\u957f\u5ea6\u3002\n\n\u518d\u4ecb\u7ecd\u4e00\u4e2a\u539f\u5219\uff1a\u5bf9\u4e8e\u4efb\u610f\u8fb9\u6743\u4e3a\u6b63\u6570\u7684\u56fe$G$\u548c\u4efb\u610f\u6e90\u70b9$S$\uff0c\u6700\u77ed\u8def\u56fe$G'$\u4e0a\u4e0d\u5b58\u5728\u73af\u3002\n\n\u8bc1\u660e\uff1a\u8bbe\u5b58\u5728\u73af$u_1\u2192u_2\u2192...\u2192u_t\u2192u_1$\uff0c\u5219\u6709$dis[u_2]=dis[u_1]+val(u_1\u2192u_2)$\uff0c$dis[u_3]=dis[u_2]+val(u_2\u2192u_3)$\uff0c\u2026\uff0c$dis[u_t]=dis[u_{t-1}]+val(u_{t-1}\u2192u_t)$\uff0c$dis[u_1]=dis[u_t]+val(u_t\u2192u_1)$\u3002\u7531\u4e8e\u8fb9\u6743\u5747\u4e3a\u6b63\u6570\uff0c\u6240\u4ee5\u4ece\u4e0a\u9762\u53ef\u4ee5\u540c\u65f6\u5f97\u51fa$dis[u_t]>dis[u_1]$\u548c$dis[u_t]<dis[u_1]$\u3002\u4ece\u8fd9\u4e2a\u77db\u76fe\u5f97\u51fa\u4e0d\u5b58\u5728\u73af\u3002\n\n\n\u56de\u5230\u95ee\u9898\u3002\u9996\u5148\u679a\u4e3e\u6700\u77ed\u8def\u7684\u8d77\u70b9$S$\uff0c\u8dd1SPFA\u540e\u6784\u9020\u51fa\u6700\u77ed\u8def\u56fe\u3002\n\n\u7531\u4e8e\u4e0d\u5b58\u5728\u73af\uff0c\u6240\u4ee5\u8fd9\u91cc\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\u3002\n\n\u5148\u6309\u7167\u62d3\u6251\u5e8f\uff0c\u6c42\u51fa\u4efb\u610f\u4e00\u4e2a\u70b9$u$\uff0c$S$\u5230$u$\u7684\u6700\u77ed\u8def\u5f84\u7684\u6570\u76ee$cnt_1[u]$\u3002\u5f88\u663e\u7136\uff0c$cnt_1[S]=1$\uff0c\u5982\u679c\u6700\u77ed\u8def\u56fe\u4e0a\u5b58\u5728\u8fb9$u\u2192v$\uff0c\u5219$cnt_1[v]+=cnt_1[u]$\u3002\n\n\u518d\u6309\u7167\u62d3\u6251\u5e8f\u7684**\u9006\u5e8f**\uff0c\u6c42\u51fa\u4efb\u610f\u4e00\u4e2a\u70b9$u$\uff0c\u5728**\u6700\u77ed\u8def\u56fe**\u4e0a\u4ee5$u$\u4e3a\u8d77\u70b9\u7684\u8def\u5f84\u6761\u6570$cnt_2[u]$\u3002\u5bb9\u6613\u5f97\u5230\uff0c\u5982\u679c\u5148\u628a\u6bcf\u4e2a\u70b9\u7684$cnt_2$\u8bbe\u4e3a$1$\uff08\u8def\u5f84\u4e2d\u53ea\u5305\u542b$u$\uff09\uff0c\u90a3\u4e48\u5982\u679c\u6700\u77ed\u8def\u56fe\u4e0a\u5b58\u5728\u8fb9$u\u2192v$\uff0c\u5219$cnt_2[u]+=cnt_2[v]$\u3002\n\n\n\u7edf\u8ba1\u8d21\u732e\u3002\u5bf9\u4e8e**\u5728\u6700\u77ed\u8def\u56fe\u4e0a**\u7684\u4e00\u6761\u8fb9$u\u2192v$\uff0c\u8d21\u732e\u4e3a$cnt_1[u]*cnt_2[v]$\u3002\n\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\nconst int N = 1505, M = 5005, INF = 0x3f3f3f3f, PYZ = 1e9 + 7;\nint n, m, ecnt, nxt[M], adj[N], st[M], go[M], val[M], dis[M], len, que[M << 1],\ncnt[N], cnt1[N], cnt2[N], H, T, tot, q[N], ans[M];\nbool vis[N], ins[M];\nvoid add_edge(int u, int v, int w) {\n    nxt[++ecnt] = adj[u]; adj[u] = ecnt; st[ecnt] = u; go[ecnt] = v; val[ecnt] = w;\n}\nvoid spfa(int S) {\n    int i; memset(dis, INF, sizeof(dis));\n    memset(ins, 0, sizeof(ins));\n    dis[que[len = 1] = S] = 0;\n    for (i = 1; i <= len; i++) {\n        int u = que[i]; vis[u] = 0;\n        for (int e = adj[u], v; e; e = nxt[e])\n            if (dis[u] + val[e] < dis[v = go[e]]) {\n                dis[v] = dis[u] + val[e];\n                if (!vis[v]) vis[que[++len] = v] = 1;\n            }\n    }\n    for (i = 1; i <= m; i++)\n        if (dis[st[i]] + val[i] == dis[go[i]])\n            ins[i] = 1;\n}\nvoid topo(int S) {\n    memset(cnt, 0, sizeof(cnt));\n    memset(cnt1, 0, sizeof(cnt1));\n    memset(cnt2, 0, sizeof(cnt2));\n    int i; H = tot = 0; cnt1[que[T = 1] = S] = 1;\n    for (i = 1; i <= m; i++) if (ins[i]) cnt[go[i]]++;\n    while (H < T) {\n        int u = que[++H]; q[++tot] = u;\n        for (int e = adj[u], v; e; e = nxt[e]) {\n            if (!ins[e]) continue;\n            v = go[e]; if (!(--cnt[v])) que[++T] = v;\n            (cnt1[v] += cnt1[u]) %= PYZ;\n        }\n    }\n    for (i = tot; i; i--) {\n        int u = q[i]; cnt2[u]++;\n        for (int e = adj[u], v; e; e = nxt[e]) {\n            if (!ins[e]) continue;\n            (cnt2[u] += cnt2[v = go[e]]) %= PYZ;\n        }\n    }\n}\nvoid solve(int S) {\n    int i; spfa(S); topo(S);\n    for (i = 1; i <= m; i++) if (ins[i])\n        (ans[i] += 1ll * cnt1[st[i]] * cnt2[go[i]] % PYZ) %= PYZ;\n}\nint main() {\n    int i, x, y, z; n = read(); m = read();\n    for (i = 1; i <= m; i++) x = read(), y = read(),\n        z = read(), add_edge(x, y, z);\n    for (i = 1; i <= n; i++) solve(i);\n    for (i = 1; i <= m; i++) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1506258564,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2505 \u3010[HAOI2012]\u9053\u8def\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u505a\u6cd5\u2026\u2026\uff0c\u53eb\u4ec0\u4e48\u597d\u5462\uff1f\n\n~~\u6700\u77ed\u8def\u5f84\u6811EX\uff1f~~\u4e0d\u8981\u5728\u610f\u8fd9\u4e9b\u7ec6\u8282\u548c\u672f\u8bed\uff0c\u53ea\u8981\u6211\u4eec\u61c2\u80cc\u540e\u7684\u9053\u7406\u5c31\u597d\u4e86\n\n\u53e6\u5916\uff0c\u8fd9\u9053\u9898\u7684\u6570\u636e\u8303\u56f4\u6211\u4eec\u4f1a\u89c9\u5f97 O(V+E)VlogV)\u7684\u590d\u6742\u5ea6\u975e\u5e38\u7684\u4e0d\u53ef\u505a\n\n\u4f46\u662f\u8bf7\u6361\u8d77\u60a8\u7684\u4fe1\u4ef0\uff0c\u9760\u4fe1\u4ef0\u662f\u53ef\u4ee5\u8fc7\u7684\uff0c\u56e0\u4e3a\u6bcf\u6b21\u4e0d\u4e00\u5b9a\u662f\u6700\u574f\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662fO(\u80fd\u8fc7)\n\n## \u672c\u9898\u9898\u89e3\n\n\u89e3\u51b3\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u7684\u601d\u60f3\u975e\u5e38\u66b4\u529b\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u5904\u7406\u70b9\u7684\u6700\u77ed\u8def\u65b9\u6848\u662f\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u662f\u975e\u5e38trival\u7684\uff0c\u76f4\u63a5\u8fb9spfa\u8fb9dp\u5c31\u53ef\u4ee5\u8f7b\u6613\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\uff0c\u5bf9\u4e8e\u8fb9\u6765\u8bb2\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\u77ac\u95f4\u4f1a\u53d8\u7684\u5341\u5206\u8fa3\u624b\uff0c\u5f53\u95ee\u9898\u53d8\u5f97\u8fa3\u624b\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u8981\u8003\u8651\u4e00\u4e9b\u522b\u7684\u6709\u8da3\u65b9\u6cd5\uff0c\u4f8b\u5982**\u679a\u4e3e**\u3002\n\n\u56e0\u4e3a\u9898\u76ee\u4e2d\u65e2\u6ca1\u7ed9\u539f\u70b9\u4e5f\u6ca1\u7ed9\u7ec8\u70b9\uff0c\u6211\u4eec\u53ea\u80fd\u66b4\u529b\u7684\u8dd1N\u6b21dijkstra\u5f3a\u884c\u679a\u4e3e\u6240\u6709\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5b9a\u4e0b\u539f\u70b9\u548c\u7ec8\u70b9\u624d\u6709\u53ef\u80fd\u7edf\u8ba1\u51fa\u7b54\u6848\u3002\n\n\u73b0\u5728\u6211\u4eec\u8003\u8651\uff0c\u6211\u4eec\u5728\u4ee5S\u4e3a\u6e90\u70b9\u8dd1\u4e86\u4e00\u4e2adijkstra\uff0c\u5047\u8bbe\u6211\u4eec\u77e5\u9053\u4e86\u5173\u4e8e\u8fd9\u4e2a\u5355\u6e90\u8def\u5f84\u7684\u6240\u6709\u4fe1\u606f\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u4ea7\u751f\u4e00\u4e2a\u975e\u5e38\u66b4\u529b\u7684\u60f3\u6cd5\uff0c**\u679a\u4e3e\u6bcf\u4e00\u6761\u53ef\u80fd\u7684\u6700\u77ed\u8def\u5f84**\uff0c\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u65b9\u6848+1\uff0c\u8fd9\u6837\u7edd\u5bf9\u4e0d\u91cd\u4e0d\u6f0f\u3002\n\n\u7136\u800c\u53ef\u60dc\u7684\u662f\uff0c\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u5141\u8bb8\u6211\u4eec\u8fd9\u4e48\u505a\uff0c\u53e6\u5916dijkstra\u7b97\u6cd5\u7ed9\u51fa\u7684\u4fe1\u606f\u5341\u5206\u9690\u6666\uff0c\u6211\u4eec\u4f3c\u4e4e\u4e5f\u76f4\u63a5\u679a\u4e3e\u4e0d\u4e86\u6bcf\u4e2a\u8def\u5f84\n\n\u6b64\u65f6\u6211\u4eec\u53d1\u73b0\uff0c\u539f\u6765\u7684\u66b4\u529b\uff0c\u6211\u4eec\u662f\u5916\u5c42\u5faa\u73af\u679a\u4e3e\u8def\u5f84\uff0c\u5185\u5c42\u5faa\u73af\u679a\u4e3e\u8fb9,\u7136\u540e+1\n\u5b8c\u6210\u7edf\u8ba1\u5de5\u4f5c\n\n\u73b0\u5728\u6211\u4eec\u6362\u4e2a\u65b9\u6848\uff0c\u6211\u4eec\u5148**\u679a\u4e3e\u8fb9**\uff0c\u770b**\u6709\u591a\u5c11\u8def\u5f84\u5305\u542b\u5b83**(\u6ce8\u610f\u4e0a\u8ff0\u53d9\u8ff0\u4ee5\u53ca\u63a5\u4e0b\u6765\u6211\u4eec\u90fd\u5728\u8ba8\u8bba**\u5173\u4e8eS\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84**\uff0c\u4e3a\u4e86\u5f97\u5230\u6574\u4f53\u7684\u7b54\u6848\uff0c\u6211\u4eec\u679a\u4e3eS\uff0c\u6267\u884cN\u6b21\u6211\u4eec\u63a5\u4e0b\u6765\u4ecb\u7ecd\u7684\u7b97\u6cd5\u5373\u53ef)\n\n\u90a3\u4e48\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u8fd9\u4e2a\u8fb9(u->v)\u662f\u6709\u65b9\u5411\u7684\uff0c\u5982\u679c\u5b83\u8981\u60f3\u6210\u4e3a\u6700\u77ed\u8def\u7684\u4e00\u90e8\u5206\uff0c\nS\u5230v\u7684\u8ddd\u79bb\u4e0d\u80fd\u6bd4S\u5230u\u7684\u8ddd\u79bb\u5c0f\uff0c\u4e0d\u7136\u8fd9\u6761\u8fb9\u5c31\u4f1a\u88ab\u201c\u77ed\u8def\u201d\u7528\u4e0d\u4e0a\u4e86\u3002\n\n\u4f46\u5982\u679c\u6ca1\u88ab\u77ed\u8def\u5462?\u90a3\u4e48\u6211\u4eec\u4f3c\u4e4e\u53d1\u73b0\u6211\u4eec\u8d70\u8def(s-t)\u7684\u8fc7\u7a0b\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\n\n1.\u4eceS\u8d70\u5230u\n\n2.\u4ecev\u8d70\u5230T\n\nu->v\u7684\u65b9\u6848\u5c31\u662f\u6211\u4eec\u4eceS\u8d70\u5230u\u7684\u65b9\u6848\u6570\u518d\u53bb\u4e58\u4e0a\u4e00\u4e2a\u4ecev\u5230T\u7684\u65b9\u6848\u6570\n\n\u4eceS\u5230u\u7684\u65b9\u6848\u6570\u6781\u5176trival\uff0c\u8fd9\u91cc\u8bf7\u5de6\u8f6c\u53bb\u770b\u201c\u6700\u77ed\u8def\u8ba1\u6570\u90a3\u9053\u9898\u201d\u6b64\u5904\u4e0d\u5728\u8d58\u8ff0\u3002(\u5982\u679cdis\u503c\u76f8\u7b49\u52a0\u6cd5\u8f6c\u79fb\uff0c\u5426\u5219\u91cd\u65b0\u8d4b\u503c)\n\n\u95ee\u9898\u662fv\u5230T\u7684\u65b9\u6848\u6570\uff0c\u6709\u4e00\u4e2a\u524d\u7f6e\u6761\u4ef6\uff0c\u5fc5\u987b\u7ecf\u8fc7s-u\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u800c\u4e0d\u53ef\u4ee5\u7ed5\u5f00\uff0c\u8fd9\u65f6\u7edf\u8ba1\u5de5\u4f5c\u8fdb\u5165\u4e86\u50f5\u5c40\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e00\u70b9\u5947\u6280\u6deb\u5de7\u5e2e\u52a9\u6211\u4eec\n\n### \u6700\u77ed\u8def\u5f84\u6811X\u6700\u77ed\u8defDAG\n\n ~~\u524d\u9762\u662f\u300a\u7b97\u6cd5\u5bfc\u8bba\u4e0a\u7684\u300b\uff0c\u540e\u9762\u7684\u662f\u6211\u81ea\u5df1YY\u7684~~\n \n \u6700\u77ed\u8def\u5f84\u6811\uff0c\u6211\u4eec\u5148\u4ee5S\u4e3a\u6e90\u70b9\u8dd1\u4e00\u904d\u67d0\u79cd\u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u4e2a\u70b9v\uff0c\u9009\u53d6**\u4e00\u6761**S\u5230v\u6700\u77ed\u8def\u5f84\uff0c\u52a0\u5230\u67d0\u4e2a\u56fe\u4e2d\u3002\u6211\u4eec\u4f1a\u60ca\u5947\u7684\u53d1\u73b0\uff0c\u8fd9\u4e2a\u56fe\u662f\u4e00\u53ea\u6811\n\n\u539f\u7406:\u6700\u77ed\u8def\u7b97\u6cd5\u4e0d\u662fdp(Bellman-ford)\u5c31\u662f\u8d2a\u5fc3(dijkstra)(\u9000\u5316\u7684dp)\uff0c\u56e0\u6b64\u6211\u4eec\u53d1\u73b0\uff0c\u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898\u6709**\u6700\u4f18\u5b50\u7ed3\u6784\u6027\u8d28**\uff0c\u5373\uff1a\u5355\u6e90\u6700\u77ed\u8def\u7684\u4e00\u90e8\u5206(\u5f53\u7136\u5176\u4e2d\u4e00\u7aef\u5fc5\u987b\u662fS)\u4e00\u5b9a\u662f\u5355\u6e90\u6700\u77ed\u8def\uff0c\u56e0\u6b64\u4e00\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u5fc5\u7136\u662f\u6811\u4e0a\u7684\u4e00\u6761\u94fe\uff0c\u5e76\u4e14\u94fe\u4e0a\u7684\u70b9\u4e0d\u80fd\u518d\u9009\u8def\u5f84\uff0c\u5426\u5219\u6211\u4eec\u76f8\u5f53\u4e8e\u91cd\u590d\u9009\u53d6\u4e86\u4e24\u6761\u4e0d\u540c\u8def\u5f84\u3002\n\n\u90a3\u4e48\u5565\u662f\u6700\u77ed\u8defDAG\u5462\uff1f\u73b0\u5728\u6211\u4eec\u5f80\u4e00\u4e2a\u56fe\u91cc\u52a0\u5165**\u6240\u6709\u53ef\u80fd**\u7684\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u6211\u4eec\u60ca\u5947\u7684\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u56fe\u662f\u4e00\u4e2a**DAG**(\u524d\u63d0\uff0c\u6ca1\u6709\u96f6\u73af)\n\n\u539f\u7406\uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679c\u6709\u6700\u77ed\u8def\u5c31\u4e0d\u53ef\u4ee5\u6709\u8d1f\u73af\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u8003\u8651\u8d70\u8fc7\u5c5e\u4e8e\u4e00\u6761\u6700\u77ed\u8def\u7684\u4e00\u6761\u8fb9\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u4e00\u5b9a\u662f\u4ecedis\u503c\u4f4e\u7684\u70b9\u8d70\u5230\u4e86dis\u503c\u9ad8\u7684\u70b9(\u56e0\u4e3a\u6ca1\u96f6\u73af)\uff0c\u76f8\u5f53\u4e8e\u6211\u4eec\u4e00\u76f4\u5728\u4e0a\u5761\uff0c\u800c\u663e\u7136\uff0c\u4e00\u4e2a\u4e00\u76f4**\u4e0a\u5761\u7684\u73af\u662f\u4e0d\u5b58\u5728\u7684**\n\n\u4e3a\u4ec0\u4e48\u8981\u626f\u8fd9\u4e9b\u5462?\u662f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u4e86\u6700\u77ed\u8defDAG\u7684\u4e00\u4e2a\u6027\u8d28\uff0c\u6700\u77ed\u8defDAG\u4e2d\u4efb\u610f\u4e00\u4e2a\u4ee5S\u5f00\u5934\u7684\u8def\u5f84\u90fd\u662f\u6700\u77ed\u8def\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u6211\u4eec\u80fd\u89e3\u51b3\u521a\u624d\u7684\u95ee\u9898\u4e86,\u56e0\u4e3a\u56fe\u4e0a\u662f\u4e0d\u80fddp\u7684(\u4f46\u662f\u53ef\u4ee5\u9ad8\u65af\u6d88\u5143)\uff0c\u4f46\u662fDAG\u53ef\u4ee5\u3002\n\n\u5982\u679c\u6211\u4eec\u628a\u8fd9\u4e2aDAG\u7684\u8fb9\u5168\u90e8\u53cd\u5411(\u8fd9\u91cc\u53cd\u5411\u662f\u56e0\u4e3a\u6b63\u7740\u8d70\u6709\u540e\u6548\u6027\u7edf\u8ba1\u4e0d\u4e86V-T)\uff0c\u6211\u4eec\u5012\u7740\u8d70\uff0c\u5047\u8bbe\u6211\u4eec\u4ece\u4e00\u4e2aT\u70b9\u51fa\u53d1\uff0c\u8d70\u5230\u4e86v\uff0c\u90a3\u4e48V\u5230T\u7684\u6240\u6240\u6709\u65b9\u6848\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u6700\u77ed\u8def\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4e1c\u897f\uff0c\u5728DAG\u4e0a\u968f\u4fbf\u63a5\u4e0a\u4e00\u6761\u8def\u5f84\u5c31\u662f\u4e00\u4e2a\u6700\u77ed\u8def\uff0c(\u5176\u5b9e\u76f8\u5f53\u4e8e\u5012\u7740\u8dd1dp),\u90a3\u4e48\u6211\u4eec\u5728\u5f00\u59cb\u7684\u65f6\u5019\u5df2\u7ecf\u6b63\u7740\u8dd1\u4e86\u4e00\u904ddp\u4e86\uff0c\u5012\u7740\u8dd1\u5230v\u7684\u65b9\u6848\u4e58\u4e0a\u6b63\u7740\u8dd1\u5230u\u7684\u65b9\u6848\u5c31\u662f\u8fc7u->v\u7684\u65b9\u6848\u4e86\n\n\u6240\u4ee5\u4ee3\u7801\u7684\u6574\u4f53\u601d\u8def\u5c31\u662f\u8dd1N\u6b21dijkstra\uff0c\u540c\u65f6\u8fb9dijkstra\u8dd1\u51fa\u6b63\u5411dp\uff0c\u5efa\u51fa\u6700\u77ed\u8defDAG\uff0c\u5728\u6700\u77ed\u8defDAG\u4e0a\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\u5012\u7740\u8dd1dp\uff0c\u4e24\u4e2adp\u4e00\u4e58\u5c31\u662f\u65b9\u6848\u4e86\n\n\u4e0b\u9762\u4e0a\u4ee3\u7801\u5427\uff0c\u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0ftrick\uff0c\u6211\u4eec\u5728\u8dd1dijkstra\u5efaDAG\u7684\u65f6\u5019\u4e00\u5f00\u59cb\u4f1a\u5efa\u51fa\u9519\u8bef\u7684\u8fb9\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u6539\u53d8\u70b9V\u7684dis\u503c\u65f6\u9700\u8981\u5220\u9664\u8fd9\u4e2a\u70b9\u7684\u6240\u6709\u51fa\u8fb9\uff0c\u6b64\u65f6\u76f4\u63a5\u6e05\u6389\u90bb\u63a5\u8868\u7684\u8868\u5934\u5c31\u597d\u4e86\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```c\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\nconst int N=1510;const int M=5010;ll mod=1e9+7;\nstruct graph//\u5efa\u4e24\u4e2a\u56fe\uff0c\u4e00\u4e2a\u662f\u539f\u56fe\uff0c\u53e6\u4e00\u4e2a\u662f\u6700\u77ed\u8defDAG \n{\n    struct data{int v;int nxt;int val;}edge[M];\n    int alist[N];int cnt;\n    inline void add(int u,int v,int val)\n    {edge[++cnt].val=val;edge[cnt].v=v;edge[cnt].nxt=alist[u];alist[u]=cnt;}\n}g1,g2;int n;int m;\nstruct dis//dijkstra\u7528\u7684\u7ed3\u6784\u4f53 \n{\n    int d;int v;dis(int dis=0,int ver=0){d=dis;v=ver;}\n    friend bool operator <(dis a,dis b){return a.d>b.d;}\n};priority_queue <dis> pq;queue <int> q;\nint d[N];bool book[N];int rd[N];ll dans[N];ll ans[M];\nll dans1[N];//\u4e24\u4e2adp\u6570\u7ec4\u4e00\u4e2a\u6b63\u7740\u8dd1\u4e00\u4e2a\u5012\u7740\u8dd1 \ninline void ih()//\u6bcf\u6b21\u6362\u6e90\u7684\u65f6\u5019\u91cd\u65b0\u8d4b\u503c \n{\n    g2.cnt=0;for(int i=1;i<=n;i++)\n    {d[i]=0x3f3f3f3f;book[i]=false;dans[i]=1;rd[i]=0;g2.alist[i]=0;dans1[i]=0;}\n}\ninline void dijkstra(int s)//dijkstra \n{\n    d[s]=0;dans1[s]=1;pq.push(dis(0,s));\n    while(!pq.empty())\n    {\n        dis now=pq.top();pq.pop();if(book[now.v])continue;\n        book[now.v]=true;int nxt=g1.alist[now.v];\n        while(nxt)\n        {\n            int v=g1.edge[nxt].v;int val=g1.edge[nxt].val;\n            if(!book[v])\n            {\n                if(d[v]==d[now.v]+val)//\u5982\u679c\u662f\u76f8\u7b49\u5c31\u589e\u52a0\u4e00\u6761DAG\u8fb9 \n                {g2.add(v,now.v,nxt);dans1[v]=(dans1[v]+dans1[now.v])%mod;}\n                if(d[v]>d[now.v]+val)//\u5426\u5219\u201c\u677e\u5f1b\u201d\u6389\u8fd9\u4e2a\u70b9\u76ee\u524d\u7684\u6240\u6709\u51fa\u8fb9 \n                {\n                    g2.alist[v]=0;g2.add(v,now.v,nxt);dans1[v]=dans1[now.v];\n                    d[v]=d[now.v]+val;pq.push(dis(d[v],v));\n                }\n            }nxt=g1.edge[nxt].nxt;\n        }\n    }\n}\ninline void tpsrt()//DAG\u4e0a\u53cd\u5411dp \uff0c\u6ce8\u610fval\u5bf9\u5e94\u7684\u662f\u539f\u56fe\u8fb9\u7684\u7f16\u53f7 \n{\n    for(int i=1;i<=n;i++)\n    {for(int p=g2.alist[i];p;p=g2.edge[p].nxt){rd[g2.edge[p].v]++;}}\n    for(int i=1;i<=n;i++){if(rd[i]==0){q.push(i);}}\n    while(!q.empty())//\u5176\u5b9eDAG\u8fb9\u7684val\u662f\u4e0d\u5fc5\u987b\u7684\uff0c\u8dd1\u51fa\u53cd\u5411dp\u540e\u76f4\u63a5\u679a\u4e3e\u539f\u56fe\u6240\u6709\u8fb9\u4e5f\u53ef\u884c \n    {\n        int now=q.front();q.pop();int nxt=g2.alist[now];//\u62d3\u6251\u5e8fdp \n        while(nxt)\n        {\n            int v=g2.edge[nxt].v;int val=g2.edge[nxt].val;\n            dans[v]=(dans[v]+dans[now])%mod;//\u5012\u7740dp \n            ans[val]=(ans[val]+dans[now]*dans1[v])%mod;//\u66f4\u65b0\u8fb9\u7684\u65b9\u6848 \n            rd[v]--;if(rd[v]==0){q.push(v);}\n            nxt=g2.edge[nxt].nxt;\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++){int u;int v;int val;scanf(\"%d%d%d\",&u,&v,&val);g1.add(u,v,val);}\n    for(int i=1;i<=n;i++){ih();dijkstra(i);tpsrt();}//\u679a\u4e3e\u6240\u6709\u6e90\u70b9 \n    for(int i=1;i<=m;i++){printf(\"%d\\n\",ans[i]);}return 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n```\n\n\n\n\n\n",
        "postTime": 1520333259,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2505 \u3010[HAOI2012]\u9053\u8def\u3011"
    },
    {
        "content": "\u5bb9\u6613\u60f3\u5230\u679a\u4e3e\u6240\u6709\u8d77\u70b9 \u505a\u6700\u77ed\u8def \u7136\u540e\u679a\u4e3e\u8fb9\u7edf\u8ba1\u6b21\u6570\n\n\u4e00\u6761\u8fb9(x,y)\u7684\u8d21\u732e \u80af\u5b9a\u662f s\u5230x\u6700\u77ed\u8def\u7684\u65b9\u6848\u6570 \u4e58\u4e0a s\u5230\u5176\u4ed6\u70b9\u4f46\u7ecf\u8fc7\u4e86y\u7684\u6700\u77ed\u8def\n\n\u5bf9\u4e8e\u524d\u8005\n\n\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u4ece\u524d\u4e00\u4e2a\u70b9\u9012\u63a8\u8fc7\u6765 \u53ea\u8981\u6ee1\u8db3dis[vis]==dis[now]+edge[u].val \u5f53\u4e00\u4e2a\u70b9\u88ab\u6240\u6709\u5165\u8fb9\u90fd\u7edf\u8ba1\u4e86\u4e00\u6b21\u540e \u5c31\u53ef\u4ee5\u641c\u4ed6\u4e86\uff08\u62d3\u6251\u601d\u60f3\uff09\n\n\u5bf9\u4e8e\u540e\u8005\n\n\u6bcf\u4e2a\u70b9\u4ece\u540e\u4e00\u4e2a\u70b9\u9012\u63a8\u8fc7\u6765\n```\n#include<bits/stdc++.h>\n#define INF 0x3f3f3f3f\n#define N 5505\n#define M 5005\n#define ll long long\nusing namespace std;\nconst int mod=1000000007; \ntemplate <class T>\ninline void read(T &x)\n{\n    x=0;\n    static char ch=getchar();\n    while(!isdigit(ch)) ch=getchar();\n    while(isdigit(ch)) x=x*10+ch-'0',ch=getchar();\n}\nint n,m,first[N],tot,dis[N];\nll a[N],b[N],ans[N];\nstruct Edge\n{\n    int from,to,next,val;\n}edge[M];\ninline void addedge(int x,int y,int z)\n{\n    tot++;\n    edge[tot].from=x; edge[tot].to=y; edge[tot].next=first[x]; edge[tot].val=z; first[x]=tot;\n}\nbool visit[N],onroad[N];\ntypedef pair<int,int> Pair;\nvoid Dijkstra(int s)\n{\n    priority_queue<Pair,vector<Pair>,greater<Pair> > heap;\n    memset(dis,0x3f,sizeof(dis)); memset(visit,false,sizeof(visit));\n    heap.push(make_pair(0,s)); dis[s]=0;\n    while(!heap.empty())\n    {\n        int now=heap.top().second;\n        heap.pop();\n        if(visit[now])  continue;\n        visit[now]=true;\n        for(int u=first[now];u;u=edge[u].next)\n        {\n            int v=edge[u].to;\n            if(dis[now]+edge[u].val<dis[v])\n            {\n                dis[v]=dis[now]+edge[u].val;\n                heap.push(make_pair(dis[v],v));\n            }\n        }\n    }\n}\nint in[N];\nvoid dfs1(int now)\n{\n    visit[now]=true;\n    for(int u=first[now];u;u=edge[u].next)\n    {\n        int vis=edge[u].to;\n        if(dis[vis]==dis[now]+edge[u].val)  //\u8bf4\u660e\u5728\u6700\u77ed\u8def\u4e0a\n        {\n            in[vis]++;\n            if(visit[vis])  continue;\n            dfs1(vis);\n        } \n    }\n}\nvoid dfs2(int now)\n{\n    for(int u=first[now];u;u=edge[u].next)\n    {\n        int vis=edge[u].to;\n        if(dis[vis]==dis[now]+edge[u].val)\n        {\n            onroad[u]=true;\n            a[vis]=(a[vis]+a[now])%mod;\n            in[vis]--;\n            if(in[vis]==0)  dfs2(vis); \n        }\n    }\n}\nvoid dfs3(int now)\n{\n    b[now]=1;\n    for(int u=first[now];u;u=edge[u].next)\n    {\n        int vis=edge[u].to;\n        if(dis[now]+edge[u].val==dis[vis])\n        {\n            if(!b[vis]) dfs3(vis);  //\u6700\u77ed\u8def\u6ca1\u6709\u73af \u653e\u5fc3dfs \n            b[now]=(b[now]+b[vis])%mod;\n        }\n    }\n}\nvoid Init()\n{\n    memset(onroad,false,sizeof(onroad));\n    memset(a,0,sizeof(a));\n    memset(b,0,sizeof(b));\n    memset(in,0,sizeof(in));\n}\nint main()\n{\n    read(n),read(m);\n    for(int i=1,x,y,z;i<=m;i++)\n    {\n        read(x),read(y),read(z);\n        addedge(x,y,z);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        Init();\n        Dijkstra(i);\n        memset(visit,0,sizeof(visit));\n        dfs1(i);    //\u6765\u81ea\u6700\u77ed\u8def\u4e0a\u7684\u5165\u5ea6\n        a[i]=1;\n        dfs2(i);    //i\u5230\u6bcf\u4e2a\u70b9\u6700\u77ed\u8def\u7684\u65b9\u6848\u6570\n        dfs3(i);    //i\u5236\u9020\u7684\u6700\u77ed\u8def\u7ecf\u8fc7\u6bcf\u4e2a\u70b9\u7684\u6570\u91cf \n        for(int j=1;j<=m;j++)   if(onroad[j])   ans[j]=(ans[j]+a[edge[j].from]*b[edge[j].to]%mod)%mod;\n    }\n    for(int i=1;i<=m;i++)   cout<<ans[i]<<'\\n';\n    return 0;\n}```",
        "postTime": 1541059758,
        "uid": 60299,
        "name": "Patrickpwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2505 \u3010[HAOI2012]\u9053\u8def\u3011"
    },
    {
        "content": "# \u9898\u9762\n[\u9053\u8def](https://www.luogu.com.cn/problem/P2505)\n\n[My Blog](https://blog.csdn.net/init1064573673/article/details/116571091) \n# \u9898\u89e3\n### \u9898\u610f\n\u5bf9\u4e8e\u6bcf\u6761\u9053\u8def\uff0c\u6c42\u51fa\u6709\u591a\u5c11\u6761\u6700\u77ed\u8def\u7ecf\u8fc7\u5b83\u3002\n### \u89e3\u6790\n\u5148\u770b\u770b\u6570\u636e\u8303\u56f4\uff0c\u4e0d\u7b97\u5927\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5206\u522b\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u8d77\u70b9\uff0c\u7528SPFA\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230\u6e90\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u5bf9\u4e8e\u8fb9 $(u,v,w)$\uff0c\u5982\u679c $dis[u] + w = dis[v]$\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u4e00\u5b9a\u5728\u6e90\u70b9\u5230 $v$ \u7684\u6700\u77ed\u8def\u4e0a\u3002\n\u800c\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u7684\u8fb9\uff0c\u663e\u7136\u5bf9\u7b54\u6848\u6beb\u65e0\u8d21\u732e\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u8dd1\u5b8c\u6700\u77ed\u8def\u540e\u5ffd\u7565\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u8fd9\u4e9b\u8fb9\u3002\n\n\u8fd9\u6837\u539f\u56fe\u5c31\u53d8\u6210\u4e86\u4e00\u526fDAG\u56fe\uff0c\u56e0\u4e3a\u4e0d\u5b58\u5728 $dis[u] + w = dis[v]$ \uff0c\u4e14 $dis[v] + w = dis[u]$\u3002\n\n\u5728DAG\u56fe\u4e0a\u6211\u4eec\u5c31\u53ef\u4ee5\u8dd1\u62d3\u6251\u6392\u5e8f\u4e86\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6c42\u51fa\u4ece\u6e90\u70b9\u5230\u8fbe\u5b83\u7684\u65b9\u6848\u6570\uff0c\u518d\u6309\u7167\u62d3\u6251\u6392\u5e8f\u7684\u9006\u5e8f\u6c42\u51fa\u4ece\u540e\u9762\u7684\u8282\u70b9\u5230\u8fbe\u5f53\u524d\u8282\u70b9\u7684\u65b9\u6848\u6570\u3002\n\n\u539f\u56e0\u8bf7\u770b\u4e0b\u56fe\uff1a\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210509214202784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2luaXQxMDY0NTczNjcz,size_16,color_FFFFFF,t_70#pic_center)\n\u4ece\u6e90\u70b9\u5230 $u$ \u7684\u65b9\u6848\u6570\u8bb0\u4e3a $cnt1[u]$\uff0c\u4ece\u540e\u9762\u7684\u8282\u70b9\u5230\u8fbe $v$ \u7684\u65b9\u6848\u6570\u8bb0\u4e3a $cnt2[v]$ \uff0c\u4e0d\u96be\u53d1\u73b0\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u8fd9\u6761\u4ece $u$ \u5230 $v$ \u7684\u8fb9\u5c31\u6709 $cnt1[u] \\times cnt2[v]$ \u6761\u6700\u77ed\u8def\u7ecf\u8fc7\u4e86\u5b83\u3002\u56e0\u4e3a\u5f53\u524d\u56fe\u53ea\u4fdd\u7559\u4e86\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u8fd9\u4e9b\u65b9\u6848\u6570\u786e\u5b9e\u90fd\u662f\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u7b54\u6848\u662f\u6b63\u786e\u7684\u3002\n# \u4ee3\u7801\n\u4e0d\u77e5\u9053\u6211\u6309\u7167\u6b63\u5e38\u7684SPFA\u7684\u5199\u6cd5\u4e3a\u4ec0\u4e48\u53ea\u80fd\u8fc740\u5206\uff0c\u8fd9\u4efd\u4ee3\u7801\u91cc\u9762\u7684SPFA\u7684\u5185\u5bb9\u662f\u53c2\u8003\u4e86\u5176\u5b83\u9898\u89e3\u7684\u5199\u6cd5\u7684\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define re register\n\nusing namespace std;\n\nconst int N = 1505,M = 5005;\nconst int mod = 1e9 + 7;\n\nstruct edge {\n\tint from,next,to,w;\n}a[M];\nint head[N],dis[N],ans[M],que[M << 1],n,m,a_size = 0;\nbool vis[N],is[M];\ninline void add(int u,int v,int w) {\n\ta[++a_size] = (edge){u,head[u],v,w};\n\thead[u] = a_size;\n}\nvoid SPFA(int s) {\n    memset(dis,0x3f,sizeof(dis));\n    memset(is,0,sizeof(is)); re int len;\n    dis[que[len = 1] = s] = 0; vis[s] = true;\n    for (re int i = 1; i <= len; i++) {\n        int u = que[i]; vis[u] = 0;\n        for (re int e = head[u],v; e; e = a[e].next)\n            if (dis[u] + a[e].w < dis[v = a[e].to]) {\n                dis[v] = dis[u] + a[e].w;\n                if (!vis[v]) vis[que[++len] = v] = 1;\n            }\n    }\n    for (re int i = 1; i <= m; i++)\n        if (dis[a[i].from] + a[i].w == dis[a[i].to])\n            is[i] = 1;\n}\nint deg[N],cnt1[N],cnt2[N],ord[N],len;\nqueue<int> q;\nvoid tuopu(int s) {\n\twhile(!q.empty()) q.pop();\n\tmemset(deg,0,sizeof(deg));\n\tmemset(cnt1,0,sizeof(cnt1));\n\tmemset(cnt2,0,sizeof(cnt2)); len = 0;\n\tfor(re int i = 1; i <= m; i++) if(is[i]) deg[a[i].to]++;\n\tq.push(s); cnt1[s] = 1;\n\twhile(!q.empty()) {\n\t\tint x = q.front();\n\t\tq.pop(); ord[++len] = x;\n\t\tfor(int i = head[x]; i; i = a[i].next) {\n\t\t\tif(!is[i]) continue;\n\t\t\tint y = a[i].to;\n\t\t\tcnt1[y] = (cnt1[y] + cnt1[x]) % mod;\n\t\t\tif(--deg[y] == 0) q.push(y);\n\t\t}\n\t}\n\tfor(re int j = len; j >= 1; j--) {\n\t\tre int x = ord[j]; cnt2[x]++;\n\t\tfor(re int i = head[x]; i; i = a[i].next) {\n\t\t\tif(!is[i]) continue;\n\t\t\tcnt2[x] = (cnt2[x] + cnt2[a[i].to]) % mod; \n\t\t}\n\t}\n}\ninline int read() {\n\tre int x = 0,flag = 1;\n\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9'){if(ch == '-')flag = -1;ch = getchar();}\n\twhile(ch >='0' && ch <='9'){x = (x << 3) + (x << 1) + ch - 48;ch = getchar();}\n\treturn x * flag;\n}\nint main() {\n\tn = read(),m = read();\n\tfor(re int i = 1,u,v,w; i <= m; i++) {\n\t\tu = read(),v = read(),w = read();\n\t\tadd(u,v,w);\n\t}\n\tfor(re int i = 1; i <= n; i++) {\n\t\tSPFA(i); tuopu(i);\n\t\tfor(re int j = 1; j <= m; j++)\n\t\t\tif(is[j]) ans[j] = (ans[j] + 1ll * cnt1[a[j].from] * cnt2[a[j].to] % mod) % mod;\n\t}\n\tfor(re int i = 1; i <= m; i++) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1620568449,
        "uid": 385145,
        "name": "\u795e\u7737\u4e4b\u6a31\u82b1",
        "ccfLevel": 4,
        "title": "P2505 \u9898\u89e3"
    },
    {
        "content": "## \u5206\u6790\n\n\u5bf9\u4e8e\u56fe\u4e2d\u6bcf\u4e24\u4e2a\u53ef\u5f62\u6210\u4e00\u6761\u8def\u5f84\u7684\u70b9\u4e4b\u95f4\uff0c\u90fd\u4f1a\u6709\u5b83\u4eec\u7684\u6700\u77ed\u8def\uff0c\u9898\u76ee\u6240\u6c42\u7684\u5c31\u662f\u5bf9\u4e8e\u7ed9\u51fa\u7684 $m$ \u6761\u9053\u8def\uff0c\u6709\u591a\u5c11\u6700\u77ed\u8def\u7ecf\u8fc7\u8be5\u9053\u8def\u3002\n\n\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e0d\u662f\u4e00\u6b21\u641c\u7d22\u5c31\u53ef\u4ee5\u505a\u5230\u7684\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u66f4\u6539\u6700\u77ed\u8def\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u5728\u786e\u5b9a\u8d77\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u5230\u5404\u70b9\u7684\u6700\u77ed\u8def\u7ecf\u8fc7\u4e86\u54ea\u4e9b\u8def\u5f84\u3002\n\n\u6211\u4eec\u4ee5 $f_i$ \u8868\u793a\u4ece\u8d77\u70b9\u5230\u8be5\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\uff0c\u4e8e\u662f\u53ef\u4ee5\u77e5\u9053\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8def\u5f84\uff0c\u5982\u679c\u8d77\u70b9\u7684 $f$ \u503c\u52a0\u4e0a\u9053\u8def\u957f\u5ea6\u7b49\u4e8e\u7ec8\u70b9\u7684 $f$ \u503c\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u81f3\u5c11\u6709\u4e00\u6761\u6700\u77ed\u8def\u7ecf\u8fc7\u4e86\u8be5\u8fb9\uff0c\u90a3\u4e48\u6709\u591a\u5c11\u6761\u5462\uff1f\u6211\u4eec\u7528\u4e24\u4e2a\u6570\u7ec4\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u9996\u5148\uff0c\u5728\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u5f84\u4e4b\u540e\uff0c\u6211\u4eec\u7528 $cntq$ \u6765\u8868\u793a\u8fd9\u4e9b\u8def\u7ec4\u6210\u7684\u56fe\u4e2d\u4ee5\u8be5\u70b9\u4e3a\u8d77\u70b9\u7684\u8def\u6709\u591a\u5c11\uff0c\u7528 $cntm$ \u6765\u8868\u793a\u4ee5\u8be5\u70b9\u4e3a\u7ec8\u70b9\u7684\uff0c\u56e0\u6b64\u5bf9\u4e8e\u6bcf\u4e00\u6761\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u5f84\uff0c\u7ec8\u70b9\u9700\u52a0\u4e0a\u8d77\u70b9\u7684 $cntm$\uff0c\u8d77\u70b9\u9700\u52a0\u4e0a\u7ec8\u70b9\u7684 $nctq$\u3002\u4e3a\u4e86\u4fdd\u8bc1\u7d2f\u52a0\u7684\u6b63\u786e\u6027\uff0c\u6211\u4eec\u518d\u91c7\u7528\u62d3\u6251\u6392\u5e8f\uff0c\u6b63\u5411\u8ba1\u7b97 $cntm$\uff0c\u53cd\u5411\u8ba1\u7b97 $cntq$\u3002\u6700\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8def\u5f84\uff0c\u52a0\u4e0a\u7684\u6b21\u6570\u81ea\u7136\u5c31\u662f\u8d77\u70b9\u7684 $cntm$ \u4e58\u4e0a\u7ec8\u70b9\u7684 $cntq$ \u4e86\uff0c\u8fd9\u6837\u6b64\u9898\u5c31\u89e3\u51b3\u4e86\u3002\n\n\u53e6\u5916\uff0c\u672c\u9898\u7528 $dijkstra$ \u6709\u4e00\u4e2a\u70b9\u4f1a\u8d85\u65f6\uff0c$spfa$ \u662f\u53ef\u884c\u7684\uff0c\u4f46\u4e24\u4e2a\u90fd\u6302\u4e0a\u4e86\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,head[1501],vis[1501],flag[5001],f[1501],cnt,ans[5001],sum[1501],cntm[1501],cntq[1501];\nconst int mod=1e9+7;\nstruct node{\n\tint to,w,fr,next;\n}a[5001];\nvoid read(int &res){\n\tchar c;\n\tres=0;\n\tc=getchar();\n\twhile(c<'0'||c>'9'){c=getchar();}\n\twhile(c>='0'&&c<='9')res=(res<<1)+(res<<3)+c-48,c=getchar();\n}\npriority_queue<pair<int,int> > q;\n/*\ninline void dijkstra(int qq){\n\tmemset(vis,0,sizeof(vis));\n\tmemset(flag,0,sizeof(flag));\n\tmemset(f,127,sizeof(f));//\u6709\u4e00\u4e2a\u60f3\u6cd5\u662fmemset\u592a\u591a\u4e86\uff0c\u4e5f\u4e0d\u786e\u5b9a \n\tf[qq]=0;\n\tq.push(make_pair(0,qq));\n\twhile(q.size()){\n\t\tint x=q.top().second;q.pop();\n\t\tif(vis[x])continue;\n\t\tvis[x]=1;\n\t\tfor(register int i=head[x];i;i=a[i].next){\n\t\t\tint v=a[i].to;\n\t\t\tif(f[v]>f[x]+a[i].w){\n\t\t\t\tf[v]=f[x]+a[i].w;\n\t\t\t\tq.push(make_pair(-f[v],a[i].to));\n\t\t\t}\n\t\t}\n\t}\n\tfor(register int i=1;i<=m;++i){\n\t\tif(f[a[i].fr]+a[i].w==f[a[i].to])flag[i]=1;\n\t}\n}\n*/\n\nint que[10001],len;\n\ninline void spfa(int qq) {\n    memset(f,127,sizeof(f));\n    memset(flag,0,sizeof(flag));\n    f[que[len=1]=qq]=0;\n    for (register int i = 1; i <= len; i++) {\n        int x=que[i];vis[x]=0;\n        for (register int i=head[x];i;i=a[i].next){\n        \tint v=a[i].to;\n            if(f[x]+a[i].w<f[v]){\n            \tf[v]=f[x]+a[i].w;\n            \tif(!vis[v])vis[que[++len]=v]=1;\n\t\t\t}\n\t\t}\n    }\n    for(register int i=1;i<=m;++i){\n\t\tif(f[a[i].fr]+a[i].w==f[a[i].to])flag[i]=1;//\u6ee1\u8db3\u6761\u4ef6\uff0c\u8fdb\u884c\u6807\u8bb0 \n\t}\n}\n\nint qu[1501],tot;\ninline void topu(int qq){\n\tmemset(sum,0,sizeof(sum));\n\tmemset(cntm,0,sizeof(cntm));\n\tmemset(cntq,0,sizeof(cntq));\n\tfor(register int i=1;i<=m;++i)if(flag[i])sum[a[i].to]++;\n\tcntm[qq]=1;\n\tqu[tot=1]=qq;\n\tfor(register int i=1;i<=tot;++i){\n\t\tint x=qu[i];\n\t\tfor(register int i=head[x];i;i=a[i].next){\n\t\t\tif(!flag[i])continue;\n\t\t\tint v=a[i].to;\n\t\t\tif(!--sum[v])qu[++tot]=v;\n\t\t\tcntm[v]=(cntm[v]+cntm[x])%mod;\n\t\t}\n\t}\n\tfor(register int i=tot;i;i--){\n\t\tint x=qu[i];cntq[x]++;\n\t\tfor(register int i=head[x];i;i=a[i].next){\n\t\t\tif(!flag[i])continue;\n\t\t\tcntq[x]=(cntq[x]+cntq[a[i].to])%mod;\n\t\t}\n\t}\n}\n\ninline void sol(int qq){\n\tspfa(qq);topu(qq);\n\tfor(register int i=1;i<=m;++i){\n\t\tif(flag[i])ans[i]=(ans[i]+1ll*cntm[a[i].fr]*cntq[a[i].to]%mod)%mod;\n\t}\n}\n\ninline void add(int qq,int mm,int l){\n\ta[++cnt].fr=qq;\n\ta[cnt].next=head[qq];\n\thead[qq]=cnt;\n\ta[cnt].to=mm;\n\ta[cnt].w=l;\n}\nint main()\n{\n\tread(n);read(m);\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y,j;\n\t\tread(x);read(y);read(j);\n\t\tadd(x,y,j);\n\t}\n\tfor(int i=1;i<=n;i++)sol(i);\n\tfor(int i=1;i<=m;i++){\n\t\tprintf(\"%d\\n\",ans[i]);\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1618478112,
        "uid": 166410,
        "name": "\u6f20\u5bd2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2505 [HAOI2012]\u9053\u8def"
    },
    {
        "content": "\u9996\u5148\uff0c\u4e0d\u96be\u60f3\u51fa\uff0c\u6bcf\u6b21\u679a\u4e3e\u4e00\u4e2a\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u5230\u8d77\u70b9\u7684\u6700\u77ed\u8def\u6570\u91cf\uff0c\u8bb0\u4e3a $cnt1$\uff0c\u548c\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u6570\u91cf\uff0c\u8bb0\u4e3a $cnt2$\uff0c\u5bf9\u6bcf\u6761\u8fb9\u7684\u8d21\u732e\u5373\u5373 $cnt1_u\\times cnt2_v$\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u62ff\u5230 $60$ \u5206\u3002  \n\n\u8003\u8651\u4f18\u5316\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u53ea\u679a\u4e3e\u4e00\u4e2a\u8d77\u70b9\uff0c\u6784\u9020\u4e00\u4e2a\u6700\u77ed\u8def\u56fe\uff0c\u7136\u540e\u5728\u6700\u77ed\u56fe\u4e0a\u8dd1\u6b63\u7740\u8dd1\u4e00\u904d\u518d\u53cd\u7740\u8dd1\u4e00\u904d DAG\uff0c\u5206\u522b\u7edf\u8ba1 $cnt1$ \u548c $cnt2$\u3002\n\n\u4e0b\u9762\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define inf 0x7fffffff\n#define ll long long\n#define cmax(a,b) if(a<b)a=b;\n#define cmin(a,b) if(a>b)a=b;\n\nusing namespace std;\n\nconst int P(1e9+7);\nint n,m,ans[5005],cnt1[1505],cnt2[1505],dis[1505],vis[1505];\nstruct node{\n\tint to,val,num;\n};\nvector <node> G[1505];\npriority_queue <pair<int,int> > q;\n\nvoid dijkstra(int s){\n\tmemset(cnt1,0,sizeof(cnt1));\n\tmemset(dis,0x7f,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tdis[s]=0;cnt1[s]=1;q.push(make_pair(0,s));\n\tvector <int> dot; // \u6700\u77ed\u8def DAG\n\twhile(!q.empty()){\n\t\tint u=q.top().second;q.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;dot.push_back(u);\n\t\tfor(auto x:G[u]){\n\t\t\tint v=x.to,w=x.val;\n\t\t\tif(dis[u]+w<dis[v]){\n\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\tcnt1[v]=cnt1[u]; // \u677e\u5f1b\u64cd\u4f5c\uff0c\u66f4\u65b0 cnt1\n\t\t\t\tq.push(make_pair(-dis[v],v));\n\t\t\t}else if(dis[u]+w==dis[v]){\n\t\t\t\tcnt1[v]+=cnt1[u]; // \u8ddd\u79bb\u76f8\u7b49\uff0c\u66f4\u65b0 cnt1\n\t\t\t}\n\t\t}\n\t} \n\treverse(dot.begin(),dot.end()); // \u53cd\u7740\u8dd1\u51fa cnt2\n\tfor(auto u:dot){\n\t\tcnt2[u]=1;\n\t\tfor(auto x:G[u]){\n\t\t\tint v=x.to,w=x.val,id=x.num;\n\t\t\tif(dis[u]+w==dis[v]){\n\t\t\t\tcnt2[u]=(cnt2[u]+cnt2[v])%P;\n\t\t\t\tans[id]=(ans[id]+1ll*cnt1[u]*cnt2[v]%P)%P;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y,z;\n\t\tcin>>x>>y>>z;\n\t\tG[x].push_back((node){y,z,i});\n\t}\n\tfor(int i=1;i<=n;i++) dijkstra(i);\n\tfor(int i=1;i<=m;i++) cout<<ans[i]<<'\\n';\n\treturn 0;\n}\n\n```\n\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u5728\u8dd1 djikstra \u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u8dd1\u51fa\u4e86\u6700\u77ed\u8def\u56fe\u4e0a\u7684\u6b63\u5411 DAG\uff0c\u56e0\u4e3a\u6240\u6709\u53ef\u80fd\u5728\u6700\u77ed\u8def\u56fe\u4e0a\u7684\u8fb9\u90fd\u5df2\u7ecf\u8dd1\u8fc7\u4e86\u624d\u4f1a\u8dd1\u5230\u8fd9\u4e2a\u70b9\u4e0a\uff0c\u5e76\u4e14\u6211\u4eec\u5728\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u7684\u540c\u65f6\u5df2\u7ecf\u53ef\u4ee5\u66f4\u65b0\u51fa $cnt1$\uff0c\u6240\u4ee5\u6700\u540e\u53ea\u9700\u53cd\u7740\u8dd1\u4e00\u904d DAG \u6765\u7edf\u8ba1 $cnt2$\uff0c\u5e76\u66f4\u65b0\u7b54\u6848\u3002",
        "postTime": 1675394009,
        "uid": 576527,
        "name": "OI_AKed_me",
        "ccfLevel": 5,
        "title": "P2505 [HAOI2012]\u9053\u8def \u9898\u89e3"
    },
    {
        "content": "### [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P2505)\n\uff08\u5982\u679c $\\LaTeX$ \u70b8\u4e86\uff0c\u8bf7\u5230\u535a\u5ba2[\u89c2\u770b](https://www.luogu.com.cn/blog/thats-me/ti-jie-p2505-haoi2012-dao-lu-post)\uff09\n\n$\\Large\\mathscr{Part\\,\\,1\\;\\;}\\text{\u57fa\u672c\u601d\u8def}$\n\n\u5f88\u660e\u663e\uff0c\u7531\u4e8e\u8fd9\u91cc\u7684\u6700\u77ed\u8def\u672a\u7ed9\u51fa\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u8d77\u70b9\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u3002\u53c8\u56e0\u4e3a\u8dd1 $n$ \u904d\u6700\u77ed\u8def\u540e\u518d\u6807\u8bb0\u6700\u77ed\u8def\u5f84\u5f88\u660e\u663e\u8fc7\u4e0d\u4e86 ~~\uff08\u6709\u8fc7\u4e86\u7684\u8bb0\u5f97\u8ddf\u6211\u8bf4\u4e00\u58f0\uff09~~ \uff0c\u6211\u4eec\u8003\u8651\u5148\u6c42\u51fa\u5176\u4e2d\u4e00\u6b21\u6700\u77ed\u8def\u7684\u8d21\u732e\u3002\n\n\u65e2\u7136\u90fd\u8bf4\u4e86\u6c42\u6bcf\u4e00\u6761\u8def\u4f5c\u4e3a\u6700\u77ed\u8def\u7684\u6b21\u6570\uff0c\u81ea\u7136\u8981\u5148\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u5373\u53ef\u5f97\u5230\u4e00\u4e2a\u6700\u77ed\u8def\u56fe\u3002\u4ee4 $u,v \\in |V|$\uff0c\u5bf9\u4e8e $\\forall \\ e(\\ u\\ ,\\ v\\ ) \\in |E|$\uff0c\u5224\u65ad\u5176\u662f\u5426\u4e3a\u6700\u77ed\u8def\u7684\u7684\u65b9\u6cd5\u662f\u68c0\u67e5 $dis[u]+len(\\ u\\ ,\\ v\\ )==dis[v]$\uff0c\u5982\u679c\u539f\u5f0f\u5de6\u8fb9\u5c0f\u4e8e\u539f\u5f0f\u53f3\u8fb9\uff0c\u5219\u539f\u56fe\u4e00\u5b9a\u6ca1\u80fd\u88ab\u6210\u529f\u677e\u5f1b ~~\uff08\u5c31\u662f\u6700\u77ed\u8def\u5199\u6302\u4e86\uff09~~ \uff1b\u53cd\u4e4b\u5982\u679c\u539f\u5f0f\u5de6\u8fb9\u5927\u4e8e\u539f\u5f0f\u53f3\u8fb9\uff0c\u5219\u70b9 $v$ \u4e00\u5b9a\u901a\u8fc7\u5176\u5b83\u8fb9\u677e\u5f1b\u6210\u529f\uff0c$e(\\ u\\ ,\\ v\\ )$ \u81ea\u7136\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\uff1b\u6700\u540e\u82e5\u5de6\u5f0f\u7b49\u4e8e\u53f3\u5f0f\uff0c\u5219\u8bf4\u660e\u6700\u77ed\u8def\u4e00\u5b9a\u7531\u6b64\u8def\u5f84\u677e\u5f1b\u3002\n\n\u4e4b\u540e\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u3002\u7531\u4e8e\u6700\u77ed\u8def\u56fe\u4e3a\u4e00\u4e2a DAG\uff0c\u8003\u8651\u901a\u8fc7\u70b9\u9012\u63a8\u8d21\u732e\u3002\u548c\u8bb8\u591a\u9898\u7684\u5957\u8def\u4e00\u6837\uff0c\u6211\u4eec\u628a\u4e00\u6761\u8def\u5f84\u5bf9\u8fb9\u7684\u8d21\u732e\u8f6c\u5316\u4e3a\u5bf9\u70b9\u7684\u8d21\u732e\uff0c\u4ee5\u4e00\u6761\u8def\u5f84 $e(\\ u\\ ,\\ v\\ )\\small(u \\to v)$ \u4e3a\u6700\u77ed\u8def\u7684\u6b21\u6570\u5373\u4e3a\u8d77\u70b9\u5230 $u$ \u7684\u6700\u77ed\u8def\u4e2a\u6570\u52a0\u4e0a $v$ \u5230\u5404\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u4e2a\u6570\u3002\n\n\u9996\u5148\u80fd\u505a\u51fa\u8d21\u732e\u7684\u70b9\u4e00\u5b9a\u662f\u8d77\u70b9\uff0c\u9012\u63a8\u5173\u7cfb\u5373\u53ef\u8f6c\u5316\u4e3a\u6700\u77ed\u8def\u56fe\u4e0a\u7684\u8fb9\u7684\u5173\u7cfb\uff0c\u8fd9\u6837\u5373\u53ef\u6c42\u51fa\u56fe\u4e2d\u6bcf\u4e00\u4e2a\u70b9\u5728\u8d77\u70b9\u6784\u6210\u7684\u6700\u77ed\u8def\u56fe\u4e2d\u7684\u6240\u5bf9\u5e94\u6700\u77ed\u8def\u5f84\u7684\u4e2a\u6570\u4ee5\u53ca\u5176\u62d3\u6251\u5e8f\u3002\n\n\u518d\u5229\u7528\u62d3\u6251\u53cd\u5e8f\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230\u5176\u4f59\u70b9\u7684\u6700\u77ed\u8def\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u80fd\u7528\u62d3\u6251\u53cd\u5e8f\u662f\u56e0\u4e3a\u6700\u77ed\u8def\u56fe\u5728\u6c42\u62d3\u6251\u5e8f\u7684\u65f6\u5019\u5df2\u7ecf\u5c06\u56fe\u7ed9\u5212\u5206\u597d\u5c42\u6b21\u4e86\uff0c\u8fd9\u65f6\u518d\u53cd\u8fc7\u6765\u904d\u5386\u5c31\u4e0d\u4f1a\u51fa\u73b0\u5176\u5b83\u60c5\u51b5 ~~\uff08\u5f53\u7136\u5982\u679c\u4f60\u8981\u518d\u8dd1\u4e00\u904d\u62d3\u6251\u6392\u5e8f\u4e5f\u6ca1\u95ee\u9898\uff09~~\u3002\u8fd9\u91cc\u8981\u6ce8\u610f\u56e0\u4e3a\u4ece\u8d77\u70b9\u5230\u8fd9\u4e2a\u70b9\u672c\u8eab\u4e5f\u662f\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u8fd9\u4e2a\u503c\u672c\u8eab\u5c31\u8981\u4e3a\u4e00\u3002\n\n\u7136\u540e\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u628a\u4e00\u6761\u8fb9\u7684\u5de6\u53f3\u4e24\u7aef\u70b9\u7684\u5bf9\u5e94\u6743\u503c\u76f8\u4e58\u5373\u4e3a\u5f53\u524d\u8d77\u70b9\u7684\u6700\u77ed\u8def\u6570\uff0c\u6c42 $n$ \u904d\u503c\u76f8\u52a0\u5373\u53ef\u3002\n\n$\\Large\\mathscr{Part\\,\\,2\\;\\;}\\text{Code\\qquad}$\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <queue>\nusing namespace std;\nconst int N=1505,M=5005,inf=0x7fffffff,MOD=1000000007;\nint n,m,u,v,w,head[N],dis[N],val[N],vall[N],deg[N],anss[M]; // val \u548c vall \u5206\u522b\u5b58\u50a8\u6bcf\u4e2a\u70b9\u7684\u4e24\u4e2a\u6743\u503c\uff0cdeg \u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5728\u6700\u77ed\u8def\u56fe\u4e0a\u7684\u5165\u5ea6 \nbool can[M]; // can[i] \u8868\u793a\u7b2c i \u6761\u8def\u5f84\u662f\u5426\u5728\u6700\u77ed\u8def\u56fe\u4e0a \nstruct edge{\n\tint nxt,to,len;\n}e[M]; // \u94fe\u5f0f\u524d\u5411\u661f \nnamespace SegT{ // \u4ee5\u4e0b\u4e3a\u7ebf\u6bb5\u6811 \n\tint tre[N<<2],mn[N<<2];\n\tinline int lfsn(int x){return x<<1;}\n\tinline int rtsn(int x){return x<<1|1;}\n\tinline void update(int ax,int lf,int rt,int x,int k){\n\t\tif(lf==rt){\n\t\t\ttre[x]=k;\n\t\t\treturn;\n\t\t}\n\t\tint ls=lfsn(x),rs=rtsn(x),md=(lf+rt)>>1;\n\t\tif(ax<=md) update(ax,lf,md,ls,k);\n\t\telse update(ax,md+1,rt,rs,k);\n\t\ttre[x]=min(tre[ls],tre[rs]);\n\t\tmn[x]=(tre[x]==tre[ls]?mn[ls]:mn[rs]);\n\t}\n\tinline inline void build(int lf,int rt,int x,int s){\n\t\tif(lf==rt){\n\t\t\tdis[lf]=tre[x]=(lf==s?0:inf);\n\t\t\tmn[x]=lf;\n\t\t\treturn;\n\t\t}\n\t\tint ls=lfsn(x),rs=rtsn(x),md=(lf+rt)>>1;\n\t\tbuild(lf,md,ls,s);\n\t\tbuild(md+1,rt,rs,s);\n\t\ttre[x]=min(tre[ls],tre[rs]);\n\t\tmn[x]=(tre[x]==tre[ls]?mn[ls]:mn[rs]);\n\t}\n}\nusing namespace SegT; // \u4ee5\u4e0a\u4e3a\u7ebf\u6bb5\u6811 \ninline void dij(int s){ // \u7528\u7684\u7ebf\u6bb5\u6811\u4f18\u5316 Dijkstra\uff0c\u8981\u5438\u6c27\uff08\u4e0d\u8fc7 SPFA \u6ca1\u88ab\u5361\uff09 \n\tbuild(1,n,1,s);\n\twhile(tre[1]!=inf){\n\t\tregister int x=mn[1];\n\t\tupdate(x,1,n,1,inf);\n\t\tfor(register int i=head[x]; i; i=e[i].nxt){\n\t\t\tregister int y=e[i].to,z=e[i].len;\n\t\t\tif(dis[y]>dis[x]+z){\n\t\t\t\tupdate(y,1,n,1,dis[y]=dis[x]+z);\n\t\t\t}\n\t\t}\n\t}\n}\nqueue<int> qq;\nvector<int> ans;\ninline void topsort(int s){ // \u62d3\u6251\u6392\u5e8f \n\tfor(register int i=1; i<=m; i++) can[i]=0;\n\tfor(register int i=1; i<=n; i++) deg[i]=0;\n\tans.clear();\n\tfor(register int i=1; i<=n; i++){\n\t\tval[i]=vall[i]=0;\n\t\tfor(register int j=head[i]; j; j=e[j].nxt){\n\t\t\tregister int y=e[j].to,z=e[j].len;\n\t\t\tif(dis[y]==dis[i]+z) can[j]=1,++deg[y]; // \u6784\u5efa\u6700\u77ed\u8def\u56fe \uff08\u5176\u5b9e\u8fd9\u91cc\u5efa\u4e2a\u65b0\u56fe\u4e5f\u884c\uff09 \n\t\t}\n\t}\n\tqq.push(s);\n\tval[s]=1;\n\twhile(!qq.empty()){ // \u6b63\u5e38\u62d3\u6251 \n\t\tregister int x=qq.front(); qq.pop(); ans.push_back(x); // ans \u8bb0\u5f55\u62d3\u6251\u5e8f \n\t\tfor(register int i=head[x]; i; i=e[i].nxt){\n\t\t\tregister int y=e[i].to;\n\t\t\tif(!can[i]) continue; // \u4ee5\u6700\u77ed\u8def\u56fe\u7684\u5173\u7cfb\u9012\u63a8\n\t\t\tif(!(--deg[y])) qq.push(y);\n\t\t\tval[y]+=val[x];\n\t\t}\n\t}\n\tfor(register int i=ans.size()-1; ~i; i--){ // \u62d3\u6251\u5e8f\u9006\u5e8f \n\t\tregister int x=ans[i]; vall[x]++;\n\t\tfor(register int j=head[x]; j; j=e[j].nxt){\n\t\t\tregister int y=e[j].to;\n\t\t\tif(!can[j]) continue;\n\t\t\tvall[x]+=vall[y];\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1; i<=m; i++){\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\te[i]=(edge){head[u],v,w};\n\t\thead[u]=i;\n\t}\n\tfor(register int i=1; i<=n; i++){\n\t\tdij(i); topsort(i); // \u5148\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u6743\u503c \n\t\tfor(register int j=1; j<=n; j++){\n\t\t\tfor(register int k=head[j]; k; k=e[k].nxt){ // \u904d\u5386\u6bcf\u6761\u8fb9 \n\t\t\t\tregister int y=e[k].to;\n\t\t\t\tif(!can[k]) continue;\n\t\t\t\tanss[k]=(anss[k]+1LL*(val[j]%MOD)*(vall[y]%MOD))%MOD; // \u7d2f\u8ba1\u7b54\u6848 \n\t\t\t}\n\t\t}\n\t}\n\tfor(register int i=1; i<=m; i++) printf(\"%d\\n\",anss[i]); // \u8f93\u51fa\u7b54\u6848 \n\treturn 0;\n}\n```\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n^2\\log_2m)$ ~~\uff08\u5e38\u6570\u7565\u5927\uff09~~\uff0c\u8981\u5438\u6c27\u624d\u80fd\u8fc7\uff0c\u4e0d\u8fc7\u56e0\u4e3a\u51fa\u9898\u4eba\u6ca1\u5361 SPFA\uff0c\u6240\u4ee5 SPFA \u91cd\u65b0\u56de\u5230\u4e86\u5c5e\u4e8e\u5b83\u7684 $\\Theta(km)$ \u65f6\u4ee3\uff01\uff08\u5927\u96fe\n\n~~\u4ec0\u4e48\uff1f\u4f60\u95ee\u6211\u8981 SPFA \u7684\u4ee3\u7801\uff1f\u4f9b\u5404\u4f4d\u8bfb\u8005\u601d\u8003\u3002~~",
        "postTime": 1595900800,
        "uid": 238421,
        "name": "A_Pikachu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2505 \u3010[HAOI2012]\u9053\u8def\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u5185\u98df\u7528\u66f4\u4f73](https://blog.csdn.net/devout_/article/details/104826747)\n\n\u8fd9\u9053\u9898\u9996\u5148\u6211\u4eec\u5e94\u8be5\u8003\u8651\u5230\u7684\u662f\uff0c\u56e0\u4e3a\u6211\u4eec\u6700\u77ed\u8def\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u90fd\u4e0d\u77e5\u9053\uff0c\u6240\u4ee5\u6211\u4e48\u5e94\u8be5\u679a\u4e3e\u8d77\u70b9\uff0c\u7136\u540e\u8dd1\u6700\u77ed\u8def\n\n\u6211\u4eec\u679a\u4e3e\u8d77\u70b9\u4e4b\u540e\uff0c\u6bcf\u6b21\u8dd1\u6700\u77ed\u8def\uff0c\u90fd\u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u4e2a\u6700\u77ed\u8def\u56fe\uff08\u7531\u6240\u6709\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u6784\u6210\uff09\n\n\u5224\u65ad\u4e00\u6761\u8fb9\u5728\u4e0d\u5728\u6700\u77ed\u8def\u56fe\u7684\u65b9\u6cd5\u662f\u5982\u679c$dis[v]=dis[u]+length(u,v)$\uff0c\u90a3\u4e48\u4ed6\u5728\u6700\u77ed\u8def\u56fe\u4e0a\n\n\u90a3\u4e48\u6211\u4eec\u63a5\u4e0b\u6765\u8981\u679a\u4e3e\u6700\u77ed\u8def\u56fe\u4e0a\u7684\u6bcf\u6761\u8fb9\uff0c\u5bf9\u4e8e\u4e00\u6761\u8fb9$(u,v)$\uff0c\u6211\u4eec\u9700\u8981\u5904\u7406\u51fa\u7684\u662f\u4ece$s$\u5230$u$\u7684\u6700\u77ed\u8def\u56fe\u4e0a\u7684\u8def\u5f84\u6761\u6570\uff0c\u548c$v$\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u56fe\u4e0a\u7684\u8def\u5f84\u56fe\uff0c\u56e0\u4e3a\u6700\u77ed\u8def\u56fe\u662f\u4e00\u4e2aDAG\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\u4e0a$dp$\u6765\u89e3\u51b3\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u5f88\u597d\u89e3\u51b3\n\n\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u7531\u4e8e\u4e0d\u77e5\u9053\u7ec8\u70b9\uff0c\u4e0d\u592a\u597d\u5904\u7406\uff0c\u4f46\u662f\u6211\u4eec\u77e5\u9053\u8d77\u70b9\u554a\uff01\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5efa\u7acb\u53cd\u56fe\u6765\u89e3\u51b3\n\n\u4f46\u662f\u5efa\u53cd\u56fe\u4e0d\u597d\u5efa\u600e\u4e48\u529e\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\uff0c\u6211\u4eec\u5f80\u4e0b\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u4e0b\u9762\u7684\u70b9\u7684\u62d3\u6251\u5e8f\u4e00\u5b9a\u6bd4\u8fd9\u4e2a\u70b9\u8981\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u62d3\u6251\u5e8f\u9006\u5e8f\u5904\u7406\u5c31\u597d\u4e86\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48\u8fd9\u9898\u4f1a\u5361\u6389$dijkstra$\u5462\n\n\u6211\u4eec\u770b$dijsktra$\u7684\u590d\u6742\u5ea6\uff0c\u8fd9\u9053\u9898\u56e0\u4e3a\u8981\u679a\u4e3e\u8d77\u70b9\uff0c\u590d\u6742\u5ea6\u662f$O(nm\\log m)$\uff0c\u663e\u7136\u662f\u5bb9\u6613\u88ab\u5361\u7684\n\n\u4e3a\u4ec0\u4e48$spfa$\u6ca1\u6709$spfa$\u5462\uff1f\n\n\u56e0\u4e3a\u6211\u4eec\u8981\u4ece\u6bcf\u4e2a\u70b9\u90fd\u8dd1\u4e00\u8fb9\u6700\u77ed\u8def\u554a\uff0c$spfa$\u5747\u644a\u662f$O(km)$\u554a\uff0c\u51fa\u9898\u4eba\u663e\u7136\u4e0d\u4f1a\u82b1\u65f6\u95f4\u5728\u8fd9\u4e0a\u9762\u4e3a\u4e86\u5361\u6389$spfa$\uff0c\u800c\u4e14\u6570\u636e\u5f88\u96be\u6784\u9020\n\n\u4ee3\u7801\u5566\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n\ntypedef long long ll;\n\nconst int N=10005;\nconst int mod=1e9+7;\n\ntemplate <typename T> void read(T &x){\n    x=0;int f=1;\n    char c=getchar();\n    for(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n    for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n    x*=f;\n}\n\nint n,m;\nint head[N],cnt;\nint tpx[N],inde[N],tot;\nint dis[N];\nll f[N],g[N];\nbool inq[N],is[N];\nll ans[N];\n\nstruct Edge{\n    int from,to,next,w;\n}e[N<<1];\n\nvoid add(int x,int y,int c){\n    e[++cnt]=(Edge){x,y,head[x],c},head[x]=cnt;\n}\n\nvoid spfa(int s){\n    memset(dis,0x3f,sizeof(dis));\n    queue<int> q;\n    q.push(s);\n    dis[s]=0;\n    inq[s]=true;\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        inq[u]=false;\n        RepG(i,u){\n            int v=e[i].to;\n            if(dis[v]>dis[u]+e[i].w){\n                dis[v]=dis[u]+e[i].w;\n                if(!inq[v])inq[v]=true,q.push(v);\n            }\n        }\n    }\n    Rep(i,1,m)\n        if(dis[e[i].from]+e[i].w==dis[e[i].to])is[i]=true,inde[e[i].to]++;\n        else is[i]=false;\n}\n\nvoid topo(){\n    queue<int> q;\n    Rep(i,1,n)if(!inde[i])q.push(i);\n    tot=0;\n    while(!q.empty()){\n        int u=q.front();q.pop();\n        tpx[++tot]=u;\n        RepG(i,u){\n            if(!is[i])continue;\n            int v=e[i].to;\n            inde[v]--;\n            if(!inde[v])q.push(v);\n        }\n    }\n}\n\nvoid update(int s){\n    memset(f,0,sizeof(f));\n    memset(g,0,sizeof(g));\n    f[s]=1;\n    Rep(i,1,tot){\n        int u=tpx[i];\n        RepG(i,u){\n            if(!is[i])continue;\n            int v=e[i].to;\n            f[v]+=f[u];\n        }\n    }\n    _Rep(i,tot,1){\n        int u=tpx[i];\n        g[u]++;\n        RepG(i,u){\n            if(!is[i])continue;\n            int v=e[i].to;\n            g[u]+=g[v];\n        }\n    }\n    Rep(i,1,m)\n        if(is[i])\n            ans[i]=(ans[i]+1ll*f[e[i].from]*g[e[i].to])%mod;\n}\n\nint main()\n{\n    memset(head,-1,sizeof(head));\n    read(n),read(m);\n    Rep(i,1,m){\n        int x,y,c;\n        read(x),read(y),read(c);\n        add(x,y,c);\n    }\n    Rep(i,1,n){\n        spfa(i);\n        topo();\n        update(i);\n    }\n    Rep(i,1,m)printf(\"%lld\\n\",ans[i]);\n    return 0;\n}\n```\n",
        "postTime": 1584015258,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2505 \u3010[HAOI2012]\u9053\u8def\u3011"
    },
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5bf9\u4e8e\u6bcf\u6761\u9053\u8def\uff0c\u6c42\u51fa\u6709\u591a\u5c11\u6761\u6700\u77ed\u8def\u7ecf\u8fc7\u5b83\u3002\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u5bf9 $10^9+7$ \u53d6\u6a21\u3002\n\n# \u9898\u76ee\u5206\u6790\n\n\u89c2\u5bdf\u5230 $n$ \u7684\u6570\u636e\u8303\u56f4\u8db3\u591f\u8dd1 $n^2$ \u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u6765\u4e2a\u66b4\u529b\u7b97\u6cd5\uff1a\n\n\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u539f\u70b9 $st$ \u8dd1\u4e00\u8fb9 $\\rm Spfa$\uff0c\u5982\u679c\u5b58\u5728\u4e00\u6761\u8fb9 $dis[u]+w=dis[v]$ \u90a3\u4e48\u8fb9 $(u,v)$ \u5728\u6700\u77ed\u8def\u5f84\u4e0a\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u4ee5\u6392\u9664\u6389\u90a3\u4e9b\u4e0d\u5728\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8fb9\u4e86\u3002\n\n\u4f46\u662f\u600e\u4e48\u6c42\u7ecf\u8fc7\u67d0\u6761\u9053\u8def\u7684\u6b21\u6570\u5462\uff1f\u4ee4 $cnt1[u]$ \u8868\u793a $st$ \u5230 $u$ \u7684\u6700\u77ed\u8def\u5f84\u6570\uff0c$cnt2[v]$ \u8868\u793a\u4ece\u70b9 $v$ \u51fa\u53d1\u7684\u6700\u77ed\u8def\u5f84\u6570\uff0c\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u8fd9\u6761\u8fb9 $(u,v)$ \u7684\u5355\u6b21\u7ecf\u8fc7\u6b21\u6570\u4e3a $cnt1[u]\\times cnt2[v]$\uff0c\u603b\u5171\u7684\u7ecf\u8fc7\u6b21\u6570\u5373\u4e3a\u628a\u6240\u6709\u70b9\u90fd\u5f53\u505a\u4e00\u6b21\u539f\u70b9\u8dd1\u51fa\u7684\u7ed3\u679c\u4e4b\u548c\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u53ef\u4ee5\u8f7b\u6613\u5224\u65ad\u51fa\u6bcf\u6761\u8fb9\u662f\u5426\u5728\u6700\u77ed\u8def\u5f84\u4e0a\uff0c\u56e0\u4e3a $dis$ \u5bb9\u6613\u6c42\u3002$cnt1,cnt2$ \u5219\u8dd1\u4e00\u6b21\u62d3\u6251\u6392\u5e8f\u5c31\u6c42\u51fa\u6765\u4e86\u3002\n\n\u5b58\u8fb9\u53ef\u4ee5\u7528 `tuple` \u5b58\u3002\n\n**\u6ce8\u610f\u591a\u6d4b\u8981\u6e05\u7a7a\uff01\uff01\uff01\uff08\u56e0\u4e3a\u4f1a\u628a\u6bcf\u4e2a\u70b9\u90fd\u5f53\u505a\u6e90\u70b9\u8dd1\u4e00\u6b21 $\\rm Spfa$ \u548c\u62d3\u6251\u6392\u5e8f\uff09**\n\n# \u4ee3\u7801\n\n```cpp\n//2022/4/19\n#define _CRT_SECURE_NO_WARNINGS\n#include <iostream>\n#include <cstdio>\n#include <climits>//need \"INT_MAX\",\"INT_MIN\"\n#include <cstring>//need \"memset\"\n#include <numeric>\n#include <algorithm>\n#include <tuple>\n#include <queue>\n#define enter putchar(10)\n#define debug(c,que) cerr << #c << \" = \" << c << que\n#define cek(c) puts(c)\n#define blow(arr,st,ed,w) for(register int i = (st);i <= (ed); ++ i) cout << arr[i] << w;\n#define speed_up() ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)\n#define mst(a,k) memset(a,k,sizeof(a))\n#define Abs(x) ((x) > 0 ? (x) : -(x))\n#define stop return(0)\nconst int mod = 1e9 + 7;\ninline int MOD(int x) {\n\tif(x < 0) x += mod;\n\treturn x % mod;\n}\nnamespace Newstd {\n\tchar buf[1 << 21],*p1 = buf,*p2 = buf;\n\tinline int getc() {\n\t\treturn p1 == p2 && (p2 = (p1 = buf) + fread(buf,1,1 << 21,stdin),p1 == p2) ? EOF : *p1 ++;\n\t}\n\tinline int read() {\n\t\tint ret = 0,f = 0;char ch = getc();\n\t\twhile (!isdigit(ch)) {\n\t\t\tif(ch == '-') f = 1;\n\t\t\tch = getc();\n\t\t}\n\t\twhile (isdigit(ch)) {\n\t\t\tret = (ret << 3) + (ret << 1) + ch - 48;\n\t\t\tch = getc();\n\t\t}\n\t\treturn f ? -ret : ret;\n\t}\n\tinline void write(int x) {\n\t\tif(x < 0) {\n\t\t\tputchar('-');\n\t\t\tx = -x;\n\t\t}\n\t\tif(x > 9) write(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\nusing namespace Newstd;\nusing namespace std;\ntypedef tuple<int,int,int> TII;\n\nconst int N = 5005;\nstruct Gragh {\n\tint v,w,nxt;\n} gra[N];\nint head[N],dis[N],cnt1[N],cnt2[N],ans[N],in[N],que[N];\nbool in_que[N],in_path[N];\nTII edges[N];\nint n,m,idx;\ninline void add(int u,int v,int w) {\n\tgra[++ idx].v = v,gra[idx].w = w,gra[idx].nxt = head[u],head[u] = idx;\n}\ninline void spfa(int st) {\n\tmst(dis,0x3f),mst(in_que,false),mst(in_path,false);\n\tdis[st] = 0,in_que[st] = true;\n\tqueue<int>q;\n\tq.push(st);\n\twhile (!q.empty()) {\n\t\tint u = q.front();q.pop();\n\t\tin_que[u] = false;\n\t\tfor (register int i = head[u];i;i = gra[i].nxt) {\n\t\t\tint v = gra[i].v,w = gra[i].w;\n\t\t\tif (dis[v] > dis[u] + w) {\n\t\t\t\tdis[v] = dis[u] + w;\n\t\t\t\tif (!in_que[v]) {\n\t\t\t\t\tin_que[v] = true;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\ninline void topsort(int st) {\n\tmst(cnt1,0),mst(cnt2,0),mst(in,0),mst(que,0);\n\tint cnt = 0;\n\tfor (register int i = 1;i <= m; ++ i) {\n\t\tif (in_path[i]) {\n\t\t\tin[get<1>(edges[i])] ++;\n\t\t}\n\t}\n\tcnt1[st] = 1;\n\tqueue<int>q;\n\tq.push(st);\n\twhile (!q.empty()) {\n\t\tint u = q.front();q.pop();\n\t\tque[++ cnt] = u;\n\t\tfor (register int i = head[u];i;i = gra[i].nxt) {\n\t\t\tint v = gra[i].v;\n\t\t\tif (in_path[i]) {\n\t\t\t\tcnt1[v] = MOD(cnt1[v] + cnt1[u]);\n\t\t\t\tin[v] --;\n\t\t\t\tif (!in[v]) q.push(v);\n\t\t\t}\n\t\t}\n\t}\n\tfor (register int i = cnt;i >= 1; -- i) {\n\t\tint u = que[i];\n\t\tcnt2[u] ++;\n\t\tfor (register int j = head[u];j;j = gra[j].nxt) {\n\t\t\tif (in_path[j]) {\n\t\t\t\tcnt2[u] = MOD(cnt2[u] + cnt2[get<1>(edges[j])]);\n\t\t\t}\n\t\t}\n\t}\n}\nint main(void) {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.txt\",\"r\",stdin);\n#endif\n\tn = read(),m = read();\n\tfor (register int i = 1;i <= m; ++ i) {\n\t\tint u = read(),v = read(),w = read();\n\t\tadd(u,v,w);\n\t\tedges[i] = make_tuple(u,v,w);\n\t}\n\tfor (register int i = 1;i <= n; ++ i) {\n\t\tspfa(i);\n\t\tfor (register int j = 1;j <= m; ++ j) {\n\t\t\tif (dis[get<0>(edges[j])] + get<2>(edges[j]) == dis[get<1>(edges[j])]) {\n\t\t\t\tin_path[j] = true;\n\t\t\t}\n\t\t}\n\t\ttopsort(i);\n\t\tfor (register int j = 1;j <= m; ++ j) {\n\t\t\tif (in_path[j]) {\n\t\t\t\tans[j] = MOD(ans[j] + cnt1[get<0>(edges[j])] * cnt2[get<1>(edges[j])]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (register int i = 1;i <= m; ++ i) printf(\"%d\\n\",ans[i]);\n\n\treturn 0;\n}\n```",
        "postTime": 1650379357,
        "uid": 430409,
        "name": "Coros_Trusds",
        "ccfLevel": 6,
        "title": "P2505 [HAOI2012]\u9053\u8def"
    },
    {
        "content": "### \u9898\u610f\n\n- \u6709\u4e00\u4e2a\u6709\u5411\u56fe\n\n- \u5bf9\u6bcf\u6761\u8fb9\u6c42\u51fa\u6709\u591a\u5c11\u6761\u4e24\u4e2a\u70b9\u5bf9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u8fc7\u8fd9\u6761\u8fb9\n\n\u70b9\u53ea\u6709$10^3$\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9\u6bcf\u4e2a\u70b9\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u540e\uff0c\u6784\u5efa\u51fa\u6700\u77ed\u8def\u5f84\u6811\uff0c\u6240\u6709\u5728\u8fd9\u68f5\u6811\u4e0a\u7684\u8fb9\u5c31\u4f1a\u7b97\u4e00\u904d\u8d21\u732e\n\n\u5177\u4f53\u7684\uff0c\u6c42\u51fa\u6709\u591a\u5c11\u79cd\u8d70\u6cd5\u4ece\u8d77\u70b9\u5230\u8fb9\u7684\u4e00\u7aef\uff0c\u4ee5\u53ca\u4ece\u53e6\u4e00\u7aef\u53ef\u4ee5\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff0c\u4e58\u8d77\u6765\u5373\u53ef\n\n```cpp\n#include<bits/stdc++.h>\n#define For(i, a, b) for(int i = (a), en = (b); i <= en; ++i)\n#define Rof(i, a, b) for(int i = (a), en = (b); i >= en; --i)\n#define Tra(u, i) for(int i = hd[u]; ~i; i = e[i].net)\n#define cst const\n#define LL long long\n#define DD double\n#define LD long double\n#define pb push_back\n#define mp make_pair\n#define fir first\n#define sec second\n#define inf 0x3f3f3f3f\n#define Inf 0x3f3f3f3f3f3f3f3f\n#define eps 1e-12\n#define maxn 5000\n#define mod 1000000007\nusing namespace std;\n\nint n, m, hd[maxn + 5], len = 0, as[maxn + 5];\nstruct Edge{int u, v, w, id, net;} e[maxn + 5];\nvoid add(int u, int v, int w, int id){e[len] = (Edge){u, v, w, id, hd[u]}; hd[u] = len++;}\n\ntemplate <class T>\nvoid read(T &x){\n\tchar ch;\n\tbool ok;\n\tfor(ok = 0, ch = getchar(); !isdigit(ch); ch = getchar()) if(ch == '-') ok = 1;\n\tfor(x = 0; isdigit(ch); x = x * 10 + ch - '0', ch = getchar());\n\tif(ok) x = -x;\n}\n\nvoid add(int &x, int y){x += y; if(x >= mod) x -= mod;}\n\nint dis[maxn + 5], f[maxn + 5];\npriority_queue<pair<int, int> > q;\nvoid dij(int s){\n\tmemset(dis, inf, sizeof dis); dis[s] = 0;\n\tmemset(f, 0, sizeof f); f[s] = 1;\n\tq.push(mp(0, s));\n\twhile(q.size()){\n\t\tint u = q.top().sec, tem = -q.top().fir; q.pop();\n\t\tif(tem != dis[u]) continue;\n\t\tTra(u, i){\n\t\t\tint v = e[i].v, w = e[i].w;\n\t\t\tif(dis[v] == dis[u] + w) add(f[v], f[u]);\n\t\t\telse if(dis[v] > dis[u] + w){\n\t\t\t\tdis[v] = dis[u] + w;\n\t\t\t\tf[v] = f[u];\n\t\t\t\tq.push(mp(-dis[v], v));\n\t\t\t}\n\t\t}\n\t}\n}\nint g[maxn + 5];\nint dfs(int u){\n\tif(g[u] != -1) return g[u];\n\tint asi = 1;\n\tTra(u, i){\n\t\tint v = e[i].v, w = e[i].w;\n\t\tif(dis[u] + w != dis[v]) continue;\n\t\tadd(asi, dfs(v));\n\t}\n\treturn g[u] = asi;\n}\n\nint main(){\n\t//freopen(\"road.in\", \"r\", stdin);\n\t//freopen(\"road.out\", \"w\", stdout);\n\tmemset(hd, -1, sizeof hd);\n\tread(n); read(m);\n\tFor(i, 1, m){\n\t\tint u, v, w; read(u); read(v); read(w);\n\t\tadd(u, v, w, i);\n\t}\n\tFor(i, 1, n){\n\t\tdij(i);\n\t\tmemset(g, -1, sizeof g);\n\t\tFor(j, 0, len - 1){\n\t\t\tint u = e[j].u, v = e[j].v, w = e[j].w, id = e[j].id;\n\t\t\tif(dis[u] + w == dis[v]) add(as[id], 1ll * f[u] * dfs(v) % mod);\n\t\t}\n\t}\n\tFor(i, 1, m) printf(\"%d\\n\", as[i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1604408222,
        "uid": 114164,
        "name": "lprdsb",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2505 \u3010[HAOI2012]\u9053\u8def\u3011"
    }
]