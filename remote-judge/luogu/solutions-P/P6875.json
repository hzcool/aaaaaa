[
    {
        "content": "\u672c\u9898\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u3002\n\n\u9996\u5148\uff0c\u6bcf\u4e2a\u5706\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u81f3\u5c11\u4e3a 1\uff0c\u518d\u52a0\u4e0a\u521a\u5f00\u59cb\u5c31\u6709\u4e00\u4e2a\u5e73\u9762\uff0c\u6240\u4ee5\u7b54\u6848\u81f3\u5c11\u4e3a $n+1$\u3002\n\n\u7136\u540e\uff0c\u56e0\u4e3a\u8fd9\u9053\u9898\u4e2d\uff0c\u6bcf\u4e2a\u5706\u7684\u5706\u5fc3\u90fd\u5728\u540c\u4e00\u6761\u76f4\u7ebf\u4e0a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u95ee\u9898\u518d\u6b21\u7b80\u5316\uff0c\u5c06\u6bcf\u4e2a\u5706\u7684\u533a\u57df\u5bf9\u5e94\u5230\u7ebf\u6bb5\u4e0a\u3002\n\n\u4e00\u4e2a\u5706\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a 2 \u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u5706\u6240\u5bf9\u5e94\u7684\u7ebf\u6bb5\u5df2\u7ecf\u90fd\u88ab\u5176\u4ed6\u534a\u5f84\u66f4\u5c0f\u7684\u5706\u8986\u76d6\u4e86\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5706\u7684\u534a\u5f84\u6392\u5e8f\uff0c\u4e00\u4e2a\u4e2a\u7684\u8fdb\u884c\u8986\u76d6\u3002\u8986\u76d6\u7684\u64cd\u4f5c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4fee\u6539\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u53e6\u5916\uff0c\u7ebf\u6bb5\u6811\u867d\u7136\u540d\u5b57\u53eb\u201c\u7ebf\u6bb5\u201d\u6811\uff0c\u4f46\u5b9e\u9645\u4e0a\u5bf9\u5e94\u7684\u662f\u70b9\u7684\u4fe1\u606f\u3002\u5982\u679c\u8bf4\u6211\u4eec\u60f3\u8981\u7ef4\u62a4\u7ebf\u6bb5\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u52a0\u4e0a 1\uff0c\u6216\u8005\u5c06\u53f3\u7aef\u70b9\u51cf\u53bb 1\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 3e5 + 10;\nstruct {\n\tint l, r;\n\tbool v;\n} t[N << 3];\nvoid spread(int p) {\n\tt[p << 1].v |= t[p].v;\n\tt[p << 1 | 1].v |= t[p].v;\n}\nvoid build(int p, int l, int r) {\n\tt[p].l = l, t[p].r = r;\n\tif (l == r) return;\n\tint mid = (l + r) >> 1;\n\tbuild(p << 1, l, mid);\n\tbuild(p << 1 | 1, mid + 1, r);\n}\nstruct P {\n\tint x, r;\n\tbool operator < (const P &a) const {\n\t\treturn r < a.r;\n\t}\n} a[N];\nint c[N << 1], m, n;\nint lower(int x) {\n\treturn lower_bound(c + 1, c + m + 1, x) - c;\n}\ninline void push_up(int p) {\n\tt[p].v = t[p << 1].v & t[p << 1 | 1].v;\n}\nbool ask(int p, int l, int r) {\n\tspread(p); \n\tif (l <= t[p].l && r >= t[p].r) return t[p].v;\n\tint mid = (t[p].l + t[p].r) >> 1, val = 1;\n\tif (l <= mid) val &= ask(p << 1, l, r);\n\tif (r > mid) val &= ask(p << 1 | 1, l, r);\n\treturn val;\n}\nvoid change(int p, int l, int r) {\n\tspread(p);\n\tif (l <= t[p].l && r >= t[p].r) {\n\t\tt[p].v = 1;\n\t\treturn;\n\t} \n\tint mid = (t[p].l + t[p].r) >> 1;\n\tif (l <= mid) change(p << 1, l, r);\n\tif (r > mid) change(p << 1 | 1, l, r);\n\tpush_up(p); \n}\nint main() {\n\t//freopen(\"data.in\", \"r\", stdin);\n\t//freopen(\"ans.out\", \"w\", stdout);\n\tscanf(\"%d\", &n);\n\tfor (register int i = 1; i <= n; ++i) \n\t\tscanf(\"%d%d\", &a[i].x, &a[i].r), c[++m] = a[i].x - a[i].r, c[++m] = a[i].x + a[i].r;\n\tsort(a + 1, a + n + 1);\n\tsort(c + 1, c + m + 1);\n\tm = unique(c + 1, c + m + 1) - c - 1;\n\tbuild(1, 1, m);\n\tint ans = n + 1;\n\tfor (register int i = 1; i <= n; ++i) {\n\t\tint x = lower(a[i].x - a[i].r), y = lower(a[i].r + a[i].x);\n\t\tans += ask(1, x + 1, y);\n\t\tchange(1, x + 1, y);\n\t}\n\tprintf(\"%d\", ans);\n}\n```",
        "postTime": 1638672194,
        "uid": 162196,
        "name": "\u4f1f\u5927\u7684\u738b\u592b\u5b50",
        "ccfLevel": 6,
        "title": "P6875 [COCI2013-2014#6] KRU\u017dNICE \u9898\u89e3"
    },
    {
        "content": "\u8bb2\u70b9\u4e0d\u4e00\u6837\u7684\u505a\u6cd5\uff0c\u5b66\u4f1a\u7684\u95e8\u69db\u5f88\u4f4e\uff0c\u63d0\u524d\u8bf4\u660e\uff0c\u6211\u63d0\u4f9b\u7684\u505a\u6cd5\u53ea\u7528\u5230\u4e86\u6570\u7ec4\u6a21\u62df\u7684\u94fe\u8868\u6307\u9488\u3002\n\n\u9898\u9762\u7b80\u5355\u5230\u662f\u4e2a\u4eba\u90fd\u80fd\u770b\u5f97\u61c2\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u5bb9\u6613\u9057\u6f0f\u7684\u6761\u4ef6\uff1a**\u7ed9\u51fa\u4e00\u4e9b $x$ \u8f74\u4e3a\u4e2d\u5fc3\u7684\u4e92\u4e0d\u76f8\u4ea4\u7684\u5706\u3002**\n\n\u4ee5 $x$ \u8f74\u4e3a\u4e2d\u5fc3\u5f88\u7b80\u5355\uff0c\u91cd\u70b9\u662f\u4e92\u4e0d\u76f8\u4ea4\u7684\u6761\u4ef6\uff0c\u8fd9\u8bf4\u660e\u4e86\u4ec0\u4e48\uff1f\n\n\u663e\u800c\u6613\u89c1\u5730\uff0c\u5f53\u4e00\u4e2a\u5c01\u95ed\u56fe\u5f62\u4e0e\u5176\u4ed6\u5c01\u95ed\u56fe\u5f62\u6709\u4e24\u4e2a\u4ee5\u4e0a\u7684\u4ea4\u70b9\u65f6\uff0c\u4e00\u5b9a\u4f1a\u81f3\u5c11\u5c06\u5e73\u9762\u518d\u5206\u51fa\u4e00\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u5b83\u4eec\u7684\u4ea4\u7684\u90a3\u90e8\u5206\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u8ba1\u7b97\u7b54\u6848\u5c06\u4f1a\u975e\u5e38\u7684\u590d\u6742\uff0c\u4f46\u662f\u9898\u76ee\u6761\u4ef6\u662f\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u76f8\u4ea4\u7684\u5706\u3002\n\n\u90a3\u6211\u4eec\u8981\u7edf\u8ba1\u7684\u662f\u4ec0\u4e48\u5462\uff0c\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u5f20\u56fe![](https://cdn.luogu.com.cn/upload/image_hosting/covk8yve.png)\n\n\u6211\u4eec\u4f1a\u53d1\u73b0\u53ea\u6709\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff08\u5373\u4e00\u4e2a\u5706\u88ab\u5185\u90e8\u7684\u5706\u5206\u6210\u4e24\u90e8\u5206\uff09\uff0c\u4e00\u4e2a\u5706\u624d\u80fd\u5e26\u6765\u4e24\u4e2a\u5e73\u9762\uff0c\u5176\u4ed6\u60c5\u51b5\u4e0b\u662f $0$\u3002\n\n\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u5224\u65ad\u5706\u6240\u5728\u7684 $x$ \u8f74\u4e0a\u7684\u533a\u95f4\u662f\u5426\u88ab\u5176\u4ed6\u5706\u8986\u76d6\u5373\u53ef\uff0c\u8fd9\u65f6\u53ef\u4ee5\u628a\u5706\u770b\u4f5c\u4e00\u4e2a\u7ebf\u6bb5\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u5728\u4e4e\u5b83\u5185\u90e8\u7684\u5706\u662f\u5426\u5df2\u7ecf\u8986\u76d6\u6574\u4e2a\u5706\u6240\u5728\u7684\u533a\u95f4\u3002\n\n\u4e8e\u662f\u5c31\u6709\u4e86\u4ee5\u4e0b\u505a\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5706\uff0c\u6211\u4eec\u7528 Cycle \u8bb0\u5f55\u4e24\u4e2a\u4fe1\u606f\uff0c$x$ \u8f74\u4e0a\u5de6\u7aef\u548c\u53f3\u7aef\uff0c\u53ef\u4ee5\u89c6\u4e3a\u63cf\u8ff0\u4e00\u4e2a\u7ebf\u6bb5\uff0c\u6211\u4eec\u7528\u7ed3\u6784\u4f53 Node \u8868\u793a\u6bcf\u4e00\u4e2a\u70b9\uff0c\u91cc\u9762\u8bb0\u5f55\u7740\u8fd9\u4e2a\u70b9\u5c5e\u4e8e\u54ea\u4e2a\u5706\uff0c\u4ee5\u53ca\u5176\u5bf9\u5e94\u7684\u5706\u4e0a\u53e6\u4e00\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u7528 mark \u8bb0\u5f55\u5f53\u524d\u5df2\u5904\u7406\u7684\u5185\u90e8\u7684\u5706\u662f\u5426\u4e00\u4e2a\u63a5\u7740\u4e00\u4e2a\u8fde\u7eed\u8986\u76d6\u5916\u90e8\u7684\u5706\uff0c\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u70b9\u6309\u7167\u67d0\u79cd\u987a\u5e8f\u4e0e\u5176\u4ed6\u70b9\u6392\u5e8f\uff0c\u4f7f\u5f97\u5728\u987a\u5e8f\u5904\u7406\u70b9\u65f6\uff0c\u5373\u4f7f\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u5750\u6807\uff0c\u4e24\u4e2a\u4f18\u5148\u8fdb\u5165\u8f83\u5916\u90e8\u7684\u5706\u7684\u70b9\uff0c\u7136\u540e\u518d\u901a\u8fc7\u5916\u90e8\u7684\u5706\u5c42\u5c42\u8fdb\u5165\u5185\u90e8\u7684\u70b9\uff0c\u5206\u5c42\u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u770b\u4e00\u4e2a\u5706\u5185\u7684\u672a\u88ab\u5176\u4ed6\u5706\u5305\u542b\u7684\u5706\u662f\u5426\u8fde\u7eed\u5730\u8986\u76d6\u4e86\u6574\u4e2a\u5706\u5185\u7684\u533a\u95f4\u5373\u53ef\u3002\n\n\u7136\u540e\u4e0aAC\u4ee3\u7801\uff1a\uff08\u987a\u4fbf\u7a0d\u5fae\u518d\u89e3\u91ca\u4e00\u4e0b~~\u7a0d\u5fae\u6709\u4e00\u70b9\u70b9\u7ec6\u8282\u3002~~\uff09\n```cpp\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nnamespace lq{\n\tinline int read(){\n\t\tchar letter=getchar();\n\t\tint ans=0;\n\t\tbool f=true;\n\t\twhile((letter<'0'||letter>'9')&&letter!='-')letter=getchar();\n\t\tif(letter=='-')f=false,letter=getchar();\n\t\twhile(letter>='0'&&letter<='9'){\n\t\t\tans=(ans<<1)+(ans<<3)+letter-48;\n\t\t\tletter=getchar();\n\t\t}\n\t\treturn f?ans:-ans;\n\t}\n\tinline void write(int x){\n\t\tif(x>9)\n\t\t\twrite(x/10);\n\t\tputchar(x % 10 + 48);\n\t}\n}\nusing namespace lq;\nconst int N = 3e5 + 1;\nstruct Node{\n\tbool mark;\n\tint pos ,id, other;\n} node[N << 1];\nstruct Cycle{\n\t//\u5706\u7684\u5de6\u7aef\u70b9\u7684\u7f16\u53f7\uff0c\u53f3\u7aef\u70b9\u7684\u7f16\u53f7,\u53f3\u7aef\u662f\u5426\u88ab\u66f4\u6539\uff0c\u8be5\u5706\u662f\u5426\u91cd\u590d\n\tint ld, rd;\n\tbool vr,mark;\n\tvoid insert(int x){\n\t\tif(!vr)\n\t\t\trd = x, vr = true;\n\t\telse\n\t\t\tld = x;\n\t}\n} cycle[N];\nint n;\nbool cmp(Node x,Node y){\n\tif(x.pos == y.pos){\n\t\tif(y.mark&&!x.mark)\n\t\t\treturn true;\n\t\tif(x.mark&&!y.mark)\n\t\t\treturn false;\n\t\treturn x.other > y.other;\n\t\t// \u5c06\u53e6\u4e00\u4e2a\u70b9\u4f4d\u7f6e\u6700\u5927\u7684\u6392\u5230\u524d\u9762\uff0c\u8bba\u8bc1\u4e00\u4e0b\u5176\u6b63\u786e\u6027\n\t\t// \u5f53\u4e24\u4e2a\u70b9\u90fd\u4e3a\u5de6\u7aef\u65f6\uff0c\u6211\u4eec\u5e94\u5c06\u76f8\u5bf9\u4f5c\u4e3a\u5916\u90e8\u7684\u70b9\u6392\u5230\u524d\u9762\uff0c\u90a3\u4e2a\u70b9\u7684\u53f3\u7aef\u4e00\u5b9a\u662f\u8f83\u5927\u7684\n\t\t// \u5f53\u4e24\u4e2a\u70b9\u90fd\u4e3a\u53f3\u7aef\u65f6\uff0c\u6211\u4eec\u5e94\u5c06\u76f8\u5bf9\u4f5c\u4e3a\u5185\u90e8\u7684\u70b9\u62cd\u5230\u524d\u9762\uff0c\u5229\u7528\u5bf9\u79f0\u7684\u6027\u8d28\uff0c\u90a3\u4e2a\u70b9\u7684\u5de6\u7aef\u4e00\u5b9a\u662f\u8f83\u5927\u7684\n\t}\n\treturn x.pos < y.pos;\n}\nint nxt[N],ans;\ninline void solve(int id){\n\t//\u5982\u679c\u8be5\u5706\u5df2\u7ecf\u91cd\u590d\uff0c\u90a3\u4e48\u5c31\u8df3\u8fc7\n\tif(cycle[id].mark)\n\t\treturn;\n\tint l = cycle[id].ld, r = cycle[id].rd;\n\tbool mark=true;\n\tif(node[l].pos!=node[nxt[l]].pos)\n\t\tmark = false;\n\tl = nxt[l];\n\tif(l>r)\n\t\treturn;\n\twhile(l){\n\t\t//\u8fdb\u5165\u5230\u5706\u5185\u7684\u5706\uff0c\u4f18\u5148\u5904\u7406\u5706\u5185\u7684\u5706\n\t\tsolve(node[l].id);\n\t\tl=cycle[node[l].id].rd;\n\t\tif (nxt[l] > r || !nxt[l])\n\t\t\tbreak;\n\t\tif (node[nxt[l]].pos != node[l].pos)\n\t\t\tmark = false;\n\t\tl = nxt[l];\n\t}\n\tif (mark && node[l].pos==node[r].pos)\n\t\tans = -~ans;\n}\nint main(){\n\tn = read();\n\tfor (int i = 1; i<= n;i=-~i){\n\t\tint pos = read(), radius = read();\n\t\tnode[(i << 1) - 1].id = node[i << 1].id = i;\n\t\tnode[i << 1].other = cycle[i].ld = node[(i << 1) - 1].pos = pos - radius;\n\t\tnode[(i << 1) - 1].other = cycle[i].rd = node[i << 1].pos = pos + radius;\n\t\tnode[(i << 1) - 1].mark = true;\n\t}\n\tint nn = n << 1;\n\tsort(node + 1, node + nn +1, cmp);\n\tint head = 0;\n\tfor (int i = nn; i >=1 ;i--){\n\t\tif(node[i].pos==node[i+1].pos&&node[i].other==node[i+1].other){\n\t\t\t//\u6ce8\u610f\u5de6\u53f3\u4e24\u70b9\u90fd\u53ef\u4ee5\u5e26\u6765\u4e00\u6b21\u5224\u91cd\n\t\t\tif(!cycle[node[i].id].mark)\n\t\t\t\tn--;\n\t\t\tcycle[node[i].id].mark = true;\n\t\t}\n\t\tnxt[i] = head;\n\t\tif(node[i].mark)\n\t\t\thead = i;\n\t\t//\u91cd\u65b0\u66f4\u6539\u5706\u7684\u5de6\u53f3\u7aef\uff0c\u5c06\u8bb0\u5f55\u5750\u6807\u66f4\u6539\u4e3a\u8bb0\u5f55\u7f16\u53f7\n\t\tcycle[node[i].id].insert(i);\n\t}\n\tans = n + 1;\n\tint l = 1;\n\twhile (l){\n\t\tsolve(node[l].id);\n\t\tl = nxt[cycle[node[l].id].rd];\n\t}\n\twrite(ans);\n\treturn 0;\n}\n```\n~~\u505a\u5b8c\u9898\u540e\u53d1\u73b0\u5176\u5b9e\u662f\u53ef\u4ee5\u76f4\u63a5\u6392\u5e8f\u5706\u672c\u8eab\u7684\uff0c\u8fd9\u6837\u6392\u5e8f\u4f1a\u66f4\u8212\u670d\u3002\u770b\u5b8c\u522b\u4eba\u7684\u505a\u6cd5\u611f\u89c9\u81ea\u5df1\u597d\u8822qwq\u3002~~",
        "postTime": 1657959782,
        "uid": 310439,
        "name": "\u661f\u661f\u4e0e\u8fb0",
        "ccfLevel": 0,
        "title": "P6875\u9898\u89e3"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u6709 $n$ \u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u5706\uff08\u53ef\u4ee5\u76f8\u5207\uff09\uff0c\u7b2c $i$ \u4e2a\u5706\u5706\u5fc3\u4e3a $(x_i,0)$\uff0c\u534a\u5f84\u4e3a $r$\uff0c\u6c42\u8fd9\u4e9b\u5706\u5e73\u9762\u5206\u6210\u4e86\u51e0\u4e2a\u90e8\u5206\u3002\n\n## \u9898\u89e3\n\n\u636e\u6211\u6240\u77e5\uff0c\u672c\u9898\u5171\u6709 $3$ \u4e2a\u505a\u6cd5\u3002\n\n### Sol1. \u5355\u8c03\u6808\n\n\u9996\u5148\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u6bcf\u52a0\u5165\u4e00\u4e2a\u5706\uff0c\u81f3\u5c11\u591a\u5206\u4e86 $1$ \u4e2a\u90e8\u5206\uff0c\u4f46\u4e5f\u6709\u65f6\u5019\u5206\u6210\u4e86\u4e24\u4e2a\u90e8\u5206\uff0c\u5373\u5927\u5706\u88ab\u82e5\u5e72\u4e2a\u5c0f\u5706\u5206\u6210\u4e0a\u4e0b\u4e24\u90e8\u5206\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u6309\u6bcf\u4e2a\u5706\u7684\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\uff0c\u6211\u4eec\u6309\u987a\u5e8f\u52a0\u5165\u5355\u8c03\u6808\u4e2d\u3002\n\n\u90a3\u4e48\u5982\u679c\u4e00\u4e2a\u5927\u5706\u91cc\u9762\u7684\u5c0f\u5706\u6ca1\u6709\u518d\u5305\u542b\u4e00\u4e2a\u5706\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8bb0\u5f55\u8fd9\u4e2a\u5927\u5706\u5305\u542b\u7684\u5c0f\u5706\u7684\u76f4\u5f84\u548c\uff0c\u4e0e\u5927\u5706\u7684\u76f4\u5f84\u6bd4\u8f83\u5c31\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u4e3a\u7279\u6b8a\u60c5\u51b5\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u6ca1\u6709\u5305\u542b\u5173\u7cfb\u7684\u6808\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u628a\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u4e86\u5e8f\uff0c\u6240\u4ee5\u5728\u52a0\u5165\u4e00\u4e2a\u5706\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u8981\u770b\u5de6\u7aef\u70b9\uff0c\u5982\u679c\u521a\u52a0\u7684\u8fd9\u4e2a\u5706\u7684\u5de6\u7aef\u70b9\u5c0f\u4e8e\u7b49\u4e8e\u6808\u9876\u7684\u5de6\u7aef\u70b9\uff0c\u90a3\u4e48\u6808\u9876\u7684\u5706\u5c31\u88ab\u5305\u542b\u4e86\uff0c\u6211\u4eec\u628a\u5b83\u5f39\u51fa\uff0c\u987a\u4fbf\u8bb0\u5f55\u5f39\u51fa\u5706\u7684\u76f4\u5f84\u548c\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8fd9\u4e2a\u5de6\u7aef\u70b9\u9012\u589e\u7684\u5355\u8c03\u6808\uff0c\u65e2\u53ef\u4ee5\u4fdd\u8bc1\u6ca1\u6709\u4e8c\u6b21\u5305\u542b\u5173\u7cfb\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u65f6\u7edf\u8ba1\u5927\u5706\u5305\u542b\u7684\u5c0f\u5706\u7684\u76f4\u5f84\u548c\uff0c\u76f4\u63a5\u5224\u65ad\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(n\\log n)$\uff0c\u74f6\u9888\u5728\u6392\u5e8f\u4e0a\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define PII pair<int, int>\n#define mkp make_pair\n#define INF INT_MAX\ntemplate <typename T> inline void rd(T &x){\n\tx = 0; bool f = true; char ch = getchar();\n\twhile(ch < '0' || ch > '9'){ if(ch == '-') f = false; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9'){ x = (x << 1) + (x << 3) + (ch ^ '0'); ch = getchar();}\n\tif(!f) x = -x;\n}\ntemplate <typename T, typename ...Args> inline void rd(T &x, Args &...args){ rd(x); rd(args...);}\nconst int N = 3e5 + 10;\nstruct circle {\n    int x, r;\n}c[N];\nbool cmp(circle A, circle B) {\n    if(A.x + A.r != B.x + B.r) return A.x + A.r < B.x + B.r;\n    else return A.x - A.r > B.x - B.r;\n}\nint n, st[N], top, ans;\nint main() {\n    // freopen(\".in\", \"r\", stdin);\n    // freopen(\".out\", \"w\", stdout);\n    rd(n);\n    for(int i = 1; i <= n; ++i) rd(c[i].x, c[i].r);\n    sort(c + 1, c + n + 1, cmp);\n    for(int i = 1; i <= n; ++i) {\n        int now = c[i].x - c[i].r, sum = 0;\n        while(c[st[top]].x - c[st[top]].r >= now && top >= 1) {\n            sum += 2 * c[st[top]].r;\n            top --;\n        }\n        st[++top] = i;\n        if(sum == 2 * c[i].r) ans ++;\n    }\n    cout << ans + n + 1 << endl;\n    return 0;\n}\n```\n\n### Sol2.\u5e76\u67e5\u96c6\n\n\u9996\u5148\u56de\u5230\u7edf\u8ba1\u5927\u5706\u88ab\u5c0f\u5706\u5206\u5272\u6210\u4e0a\u4e0b\u4e24\u4e2a\u90e8\u5206\u7684\u60c5\u51b5\u6570\u3002\n\n\u6211\u4eec\u5982\u679c\u5728\u6309\u534a\u5f84\u52a0\u5165\u5706\u7684\u65f6\u5019\uff0c\u628a\u5b83\u7684\u5de6\u53f3\u7aef\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u5728\u52a0\u5165\u5927\u5706\u7684\u65f6\u5019\uff0c\u5982\u679c\u5927\u5706\u7684\u5de6\u53f3\u7aef\u70b9\u5df2\u7ecf\u8fde\u901a\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5927\u5706\u4e00\u5b9a\u88ab\u5c0f\u5706\u5206\u5272\u6210\u4e0a\u4e0b\u4e24\u90e8\u5206\u4e86\u3002\n\n\u56e0\u4e3a\u5750\u6807\u5f88\u5927\uff0c\u5e76\u4e14\u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u79bb\u6563\u5316\u540e\u5e76\u67e5\u96c6\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6\u4e3a $\\Theta(n \\log n)$\u3002\n\n### Sol3.\u7ebf\u6bb5\u6811\n\n\u7ee7\u7eed\u56de\u5230\u7edf\u8ba1\u5927\u5706\u88ab\u5c0f\u5706\u5206\u5272\u6210\u4e0a\u4e0b\u4e24\u4e2a\u90e8\u5206\u7684\u60c5\u51b5\u6570\u3002\n\n\u6309\u534a\u5f84\u52a0\u5165\u5706\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5728\u8fd9\u4e2a\u5706\u7684\u4e24\u4e2a\u7aef\u70b9\u8fdb\u884c\u4e00\u6b21\u533a\u95f4 `+1`\uff0c\u90a3\u4e48\u5982\u679c\u5927\u5706\u5de6\u53f3\u7aef\u70b9\u7684\u533a\u95f4\u7684\u533a\u95f4\u6700\u5c0f\u503c\u4e3a `0`\uff0c\u90a3\u8bf4\u660e\u6ca1\u6709\u88ab\u5b8c\u5168\u5206\u5f00\uff0c\u5426\u5219\u88ab\u5b8c\u5168\u5206\u5f00\u3002\n\n\u8fd9\u91cc\u4f9d\u7136\u8981\u79bb\u6563\u5316\u3002\n\n\u590d\u6742\u5ea6\u4e3a $\\Theta(n \\log n)$\u3002\n\n\u6ce8\u610f\uff0cSol2 \u548c Sol3 \u4e2d\u7684\u505a\u6cd5\u9700\u8981\u6ce8\u610f\uff0c\u7ebf\u6bb5\u6811\u548c\u5e76\u67e5\u96c6\u53ea\u80fd\u7ef4\u62a4\u6574\u70b9\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u5de6\u7aef\u70b9 +1\uff0c\u6216\u8005\u53f3\u7aef\u70b9 -1\uff0c\u6765\u4fdd\u8bc1\u4e0d\u4f1a\u6709\u5f62\u5982 $(i,0)$ \u5728\u4e00\u4e2a\u5706\uff0c$(i+1,0)$ \u5728\u53e6\u4e00\u4e2a\u5706\uff0c\u5c31\u7b97\u4e2d\u95f4\u6709\u7a7a\u9699\uff0c\u4e5f\u4e0d\u4f1a\u88ab\u8ba1\u7b97\u5230\u7684\u60c5\u51b5\u3002\n\n\u7ebf\u6bb5\u6811\u4ee3\u7801\uff1a[Paste](https://www.luogu.com.cn/paste/tibvk4v6)\u3002\n",
        "postTime": 1684828619,
        "uid": 482642,
        "name": "hank0402",
        "ccfLevel": 0,
        "title": "P6875 [COCI2013-2014#6] KRU\u017dNICE"
    }
]