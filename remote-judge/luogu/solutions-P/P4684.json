[
    {
        "content": "\u4e00\u9053\u7ecf\u5178\u7684\u7ec4\u5408\u8ba1\u6570\u9898\uff0c\u5f53\u65f6\u5728IOI\u73b0\u573a\u53ea\u6709Huacheng Yu\u4e00\u4ebaAC\u3002\n\n\u4f46\u5b9e\u9645\u4e0a\u8fd9\u9898\u5e76\u4e0d\u7b97\u7279\u522b\u96be\uff0c\u4e00\u540d\u5bf9\u7ec4\u5408\u6570\u5b66\u719f\u7ec3\u7684\u9009\u624b\u5b8c\u5168\u6709\u80fd\u529b\u72ec\u7acb\u89e3\u51b3\u3002\n\n\u9898\u76ee\u4e2d\u6bcf\u6761\u9c7c\u6709\u957f\u5ea6\uff0c\u548c\u4e00\u79cd\u72ec\u7279\u7684\u5b9d\u77f3\u3002\u8003\u8651\u6309\u7167\u9c7c\u7684\u957f\u5ea6\u6392\u5e8f\uff0c\u6ce8\u610f\u5230\u5982\u679c\u4e24\u6761\u9c7c\u6240\u7528\u6709\u7684\u5b9d\u77f3\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u957f\u7684\u90a3\u6761\u9c7c\u53ef\u80fd\u62e5\u6709\u7684\u5b9d\u77f3\u7ec4\u5408\u5c06\u8986\u76d6\u6240\u6709\u77ed\u7684\u9c7c\u7684\u7ec4\u5408\uff0c\u56e0\u4e3a\u77ed\u7684\u80fd\u5403\u7684\u957f\u7684\u90fd\u80fd\u5403\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u5bf9\u6bcf\u79cd\u5b9d\u77f3\u53ea\u9700\u8981\u8003\u8651\u62e5\u6709\u5b83\u7684\"\u6700\u957f\u9c7c\"\u5c31\u53ef\u4ee5\u4e86\u3002\u8003\u8651\u6309\u201c\u6700\u957f\u9c7c\u201d\u7684\u957f\u5ea6\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6bcf\u79cd\u5b9d\u77f3\uff0c\u8ba1\u7b97\u65b9\u6848\u3002\u4e3a\u4e86\u907f\u514d\u91cd\u590d\uff0c\u6211\u4eec\u5bf9\u4e8e\u540c\u4e00\u7ec4\u5408\uff0c\u5e0c\u671b\u53ea\u5728\u5176\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u65f6\u5019\u52a0\u5165\u5b83\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u5bf9\u4e8e\u4e00\u7c7b\u5b9d\u77f3\uff0c\u5b83\u7684\u201c\u6700\u957f\u9c7c\u201d\u809a\u5b50\u91cc\u53ef\u80fd\u5410\u51fa\u54ea\u4e9b\u5b9d\u77f3\u7ec4\u5408\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5b9d\u77f3\u7ec4\u5408\u4e0d\u4f1a\u88ab\u540e\u9762\u66f4\u957f\u7684\u201c\u6700\u957f\u9c7c\u201d\u62e5\u6709\u3002\u6ce8\u610f\u5230\uff0c\u5982\u679c\u4e00\u6761\"\u6700\u957f\u9c7c\"$a$\u7684\u957f\u5ea6\u5c0f\u4e8e\u53e6\u4e00\u6761\u201d\u6700\u957f\u9c7c\"$b$\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u5728\u6240\u6709\u989c\u8272\u7684\u5b9d\u77f3\u4e2d\uff0c$a$\u53ea\u6709\u5728$c_a$\u548c$c_b$\u8fd9\u4e24\u79cd\u989c\u8272\u7684\u5b9d\u77f3\u4e0a\uff0c\u53ef\u80fd\u5410\u51fa$b$\u6240\u4e0d\u80fd\u5410\u51fa\u7684\u6570\u91cf\uff0c\u8fd9\u662f\u56e0\u4e3a\u5bf9\u4e8e\u5176\u5b83\u989c\u8272\u7684\u5b9d\u77f3\uff0c\u7531\u4e8e$b$\u6bd4$a$\u957f\uff0c$b$\u80fd\u5403\u7684\u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8e$a$\u80fd\u5403\u7684\u6761\u6570\uff0c\u4f46$a$\u81ea\u5df1\u6709\u4e00\u4e2a$c_a$\u989c\u8272\u7684\u5b9d\u77f3\uff0c\u5b83\u809a\u5b50\u91cc\u8fd8\u53ef\u4ee5\u4e0d\u5305\u542b\u989c\u8272\u4e3a$c_b$\u7684\u5b9d\u77f3\uff0c\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c$a$\u7684\u8fd9\u4e9b\u7ec4\u5408\u662f$b$\u6ca1\u6709\u7684\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u4e00\u6761\"\u6700\u957f\u9c7c\" $a$\uff0c\u6709\u5982\u4e0b\u4e24\u79cd\u9009\u62e9\u65b9\u6cd5\uff1a\n\n (1) \u5728$c_a$\u4e2d\u9009\u51fa\u5c3d\u91cf\u591a\u7684\u5b9d\u77f3\uff0c\u5373\u5403\u4e0b\u6240\u6709\u80fd\u5403\u7684\u989c\u8272\u4e3a$c_a$\u7684\u9c7c\u3002\u540c\u65f6\u5982\u679c\u540e\u9762\u7684\u67d0\u6761\"\u6700\u957f\u9c7c\" $b$\u80fd\u5305\u542b\u66f4\u591a\u7684$c_a$\uff0c\u5c31\u5728 $c_b$\u8fd9\u4e2a\u989c\u8272\u5403$0$\u6761\u6765\u907f\u514d\u88ab$b$\u78be\u538b\u3002\u5bf9\u4e8e\u5176\u5b83\u7684\u989c\u8272\uff0c\u6570\u91cf\u968f\u610f\uff0c\u53ea\u9700\u8981\u628a\u65b9\u6848\u6570\u4e58\u8d77\u6765\u3002\n \n (2) \u5728$c_a$\u4e2d\u9009\u5c11\u4e8e\u6700\u5927\u53ef\u80fd\u7684\u6761\u6570\uff0c\u5bf9\u6240\u6709\u957f\u5ea6\u5927\u4e8ea\u7684\u5176\u5b83\u6700\u957f\u9c7c\uff0c\u5728\u5bf9\u5e94\u7684\u989c\u8272\u4e0b\u9009$0$\u4e2a\u9632\u6b62\u88ab\u78be\u538b\u3002\n \n \u626b\u63cf\u8fc7\u7a0b\u4e2d\u9700\u8981\u7ef4\u62a4\u4e00\u4e9b\u8fde\u7eed\u6bb5\u7684\u4e58\u79ef\uff0c\u4f7f\u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5c31\u884c\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O(F\\log F).$\n \n \u603b\u7ed3\uff1a\u5bf9\u4e8e\u8ba1\u6570\u9898\u6765\u8bf4\uff0c\u201c\u6ca1\u4e8b\u591a\u6392\u5e8f\u201d\u662f\u4e98\u53e4\u4e0d\u53d8\u7684\u771f\u7406\u3002\u672c\u9898\u6700\u91cd\u8981\u7684\u4e00\u6b65\u5c31\u662f\u5c06\u6240\u6709\u5b9d\u77f3\u7684\u989c\u8272\u6309\u7167\u201c\u6700\u957f\u9c7c\u201d\u7684\u957f\u5ea6\u6392\u5e8f\uff0c\u4e00\u65e6\u6392\u597d\u5e8f\u4e00\u5207\u90fd\u4f1a\u53d8\u7684\u975e\u5e38\u6709\u89c4\u5f8b\uff0c\u540e\u9762\u53d1\u73b0\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u65b9\u6848\u6570\u7684\u65b9\u6848\u662f\u5f88\u81ea\u7136\u7684\u3002\n \n ```cpp\n#pragma GCC optimize(\"O3\")\n#include <iostream>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nint const N=5e5+1;\nstruct fish{\n\tint len,col,pre;\n\tfriend bool operator <(fish x, fish y){\n\t\treturn x.len<y.len;\n\t}\n}f[N];\nint n,m,p,t[N*8],h[N],last[N],w[N],q[N],now[N],v[N],ans;\nvoid add(int pos, int l, int r, int x){\n    if (l==r){ \n        t[x]=(v[pos]+1) % p;\n        return;\n    }\n    int mid=((l+r)>>1);\n    if (pos<=mid) add(pos,l,mid,x*2);\n    if (pos>mid) add(pos,mid+1,r,x*2+1);\n    t[x]=(t[x*2]*t[x*2+1]) % p;\n}\nint ask(int a, int b, int l, int r, int x){\n\tif (a>b) return 1;\n\tif (a<=l && r<=b) return t[x];\n\tint ans=1,mid=((l+r)>>1);\n\tif (a<=mid) ans=ans*ask(a,b,l,mid,x*2);\n\tif (b>mid) ans=ans*ask(a,b,mid+1,r,x*2+1);\n\treturn ans % p;\n}\nint find(int x){\n\tint l=1,r=m;\n    while (r-l>1){\n    \tint mid=((l+r)>>1);\n        if (f[w[mid]].len>=x) r=mid; else l=mid+1;\n    }\n    if (f[w[l]].len>=x) return l;\n    if (f[w[r]].len>=x) return r;\n    return m+1;\n}\nint main(){\n\tios::sync_with_stdio(false);\n\tcin>>n>>m>>p;\n\tfor (int i=1;i<=n;i++)\n\t\tcin>>f[i].len>>f[i].col;\n\tsort(f+1,f+n+1);\n\tfor (int i=n;i>=1;i--){\n\t\tif (!h[f[i].col]) h[f[i].col]=i;\n\t\tf[i].pre=last[f[i].col];\n\t\tlast[f[i].col]=i;\n\t}\n\tm=0;\n\tfor (int i=1;i<=n;i++)\n\t\tif (h[f[i].col]==i) w[q[f[i].col]=++m]=i;\n\tfor (int i=1;i<=8*m;i++)\n\t\tt[i]=1;\n\tfor (int i=1,j=1;i<=m;i++){\n\t\twhile (f[j].len*2<=f[w[i]].len){\n\t\t\tint s=f[j].col;\n\t\t\tv[q[s]]++;\n            now[s]=j++;\n            add(q[s],1,m,1);\n\t\t}\n\t\tint k,d=ask(1,i-1,1,m,1);\n\t\tif (!now[f[w[i]].col]) k=last[f[w[i]].col]; else k=f[now[f[w[i]].col]].pre;\n    \tif (!k) k=m+1; else k=find(f[k].len*2);\n        ans=(ans+d*ask(i+1,k-1,1,m,1)+d*(v[i] % p)) % p;\n\t}\n\tcout<<ans<<endl; \n\treturn 0;\n} \n```\n",
        "postTime": 1553041733,
        "uid": 95804,
        "name": "wu3412790",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4684 \u3010[IOI2008] Fish \u9c7c\u3011"
    },
    {
        "content": "\u5f88\u6709\u610f\u601d\u7684\u4e00\u4e2a\u7ec4\u5408\u95ee\u9898\uff0c\u5982\u679c\u80fd\u81ea\u5df1\u72ec\u7acb\u601d\u8003\u51fa\u6765\u5e94\u8be5\u6210\u5c31\u611f\u66f4\u5927\u5427\u2026\u2026\n\n\u9996\u5148\u8fd9\u4e2a\u9898\u5b83\u8981\u95ee\u7684\u7ec4\u5408\u7684\u5b9a\u4e49\uff0c\u53ea\u548c\u5b9d\u77f3\u7684\u6570\u91cf\u6709\u5173\u800c\u4e0e\u6392\u5217\u65b9\u5f0f\u65e0\u5173\u3002\u4e0d\u8981\u770b\u9519\u3002\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u6761\u957f\u7684\u9c7c$A$\u548c\u77ed\u7684\u9c7c$B$\uff0c\u5982\u679c\u5b83\u4eec\u542b\u6709\u7684\u5b9d\u77f3\u76f8\u540c\uff0c\u90a3\u4e48\u5b83\u6240\u53ef\u80fd\u542b\u6709\u7684\u5b9d\u77f3\u7684\u7ec4\u5408\u4e2a\u6570\uff0c\u5fc5\u5b9a\u53ef\u4ee5\u6ee1\u8db3\u957f\u7684\u9c7c$A$\u7684\u7ec4\u5408\u6570\u91cf\u662f\u5927\u4e8e$B$\u7684\u3002\u8fd9\u662f\u56e0\u4e3a\uff1a\u5982\u679c\u5b83\u4eec\u8981\u5403\u522b\u7684\u9c7c\uff0c\u90a3\u4e48\u77ed\u7684\u9c7c$B$\u7684\u9009\u62e9\u8303\u56f4\u662f\u957f\u7684\u9c7c$A$\u7684\u9009\u62e9\u8303\u56f4\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u90a3\u4e48\u54ea\u6015\u90fd\u5403\u5b8c\u4e86\uff0c$B$\u6240\u542b\u6709\u7684\u5b9d\u77f3\u4e5f\u5fc5\u5b9a\u5c0f\u4e8e$A$\u542b\u6709\u7684\u5b9d\u77f3\uff0c\u800c$B$\u542b\u6709\u7684\u5b9d\u77f3$A$\u4e5f\u90fd\u6709\u3002\u6545$A$\u7684\u7ec4\u5408\u6570\u91cf\u662f\u5927\u4e8e$B$\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a\u89e3\u6cd5\uff1a\u5bf9\u4e8e\u542b\u6709\u6bcf\u4e2a\u5b9d\u77f3\u7684\u9c7c\uff0c\u53d6\u6700\u957f\u7684\u6765\u8ba1\u7b97\u3002\u4e5f\u5c31\u662f\u628a\u8fd9\u4e9b\u6700\u957f\u7684\u9c7c\uff0c\u6309\u7167\u4ece\u77ed\u5230\u957f\u7684\u987a\u5e8f\u6765\u8ba1\u7b97\u65b9\u6848\u3002\u4f46\u662f\u8fd9\u6837\u505a\u6709\u4e00\u4e2a\u7f3a\u70b9\uff1a\u5b83\u4f1a\u7b97\u91cd\u590d\u3002\u6bd4\u5982\u8bf4\u8fd9\u4e9b\u6700\u957f\u7684\u9c7c\u5c1d\u8bd5\u5403\u522b\u7684\u6700\u957f\u9c7c\uff0c\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5728\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f1a\u5f88\u9ebb\u70e6\u3002\u4f46\u662f\u5982\u679c\u6211\u4eec\u5728\u679a\u4e3e\u7684\u65f6\u5019\u5bf9\u5b9d\u77f3\u79cd\u7c7b\u505a\u51fa\u9650\u5b9a\u7684\u8bdd\uff0c\u6bd4\u5982\u5b9d\u77f3\u79cd\u7c7b\u4e0d\u80fd\u8d85\u8131\u4e8e\u76ee\u524d\u6211\u4eec\u679a\u4e3e\u5230\u7684\u6240\u6709\u6700\u957f\u9c7c\u4e2d\u51fa\u73b0\u7684\u79cd\u7c7b\uff0c\u8fd9\u6837\u505a\u53c8\u5f88\u5bb9\u6613\u7b97\u5c11\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u5f88\u5c34\u5c2c\u3002\n\n\u6bd4\u5982\u8bf4\u8003\u8651\u4e00\u79cd\u6bd4\u8f83\u6781\u7aef\u7684\u60c5\u51b5\uff1a\u6211\u4eec\u6709\u4e24\u79cd\u9c7c$a,b$\uff0c\u6709$A,B$\u4e24\u79cd\u4e0d\u540c\u7684\u5b9d\u77f3\u3002\u5bf9\u4e8e\u8fd9\u4e24\u79cd\u989c\u8272$A,B$\uff0c\u5f88\u6709\u53ef\u80fd\u53d1\u751f\u7684\u4e8b\u60c5\u662f\uff1a\u6211\u4eec\u672c\u5e94\u5f53\u5728\u679a\u4e3e$A$\u7684\u65f6\u5019\uff0c\u679a\u4e3e\u5230$(A,B)$\u8fd9\u7ec4\u53ef\u80fd\u7684\u914d\u5bf9\uff0c\u7ed3\u679c\u6ca1\u6709\u679a\u4e3e\u5230\uff0c\u4f46\u5728\u679a\u4e3e$B$\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u9c7c\u7684\u957f\u5ea6\u4e0d\u591f\u800c\u5bfc\u81f4\u6ca1\u6709\u80fd\u679a\u4e3e\u5230$(A,B)$\u8fd9\u7ec4\u914d\u5bf9\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u601d\u8003\u5982\u4f55\u5904\u7406\u3002\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u9488\u5bf9\u8fd9\u79cd\u6781\u7aef\u60c5\u51b5\u4f5c\u51fa\u4e00\u5b9a\u7684\u6539\u5584\u63aa\u65bd\uff1a\u6211\u4eec\u76ee\u524d\u6709\u4e00\u6761\u6700\u957f\u9c7c$a$\uff0c\u6709\u7684\u662f$A$\u548c$B$\u4e24\u79cd\u5b9d\u77f3\uff0c\u90a3\u4e48\u5b58\u5728\u5982\u4e0b\u4e24\u79cd\u63aa\u65bd\uff1a\n\n-   \u5403\u4e0b\u6240\u6709\u6709$A$\u5b9d\u77f3\u7684\u9c7c\u3002\u4f46\u662f\u82e5\u4e4b\u540e\u6709\u4e00\u6761\u66f4\u957f\u7684\u9c7c$b$\uff0c\u53ef\u4ee5\u505a\u5230\u80fd\u6709\u66f4\u591a\u7684$A$\u5b9d\u77f3\uff0c\u5c31\u4e0d\u5403$b$\u5b9d\u77f3\u3002\u5176\u4ed6\u7684\u968f\u610f\u3002\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u53ea\u9700\u628a\u6700\u540e\u7684\u65b9\u6848\u6570\u76f8\u4e58\u5373\u53ef\u3002\n-   \u4e0d\u5403\u4e0b\u6240\u6709\u6709$A$\u5b9d\u77f3\u7684\u9c7c\uff0c\u4f46\u662f\u5bf9\u4e8e\u5176\u4ed6\u7684\u66f4\u957f\u7684\u9c7c\uff0c\u5bf9\u5e94\u7684\u5b9d\u77f3\u79cd\u7c7b\u4e0b\u7684\u5c0f\u9c7c\u4e0d\u5403\u3002\n\n\u4e4b\u540e\u6211\u4eec\u518d\u628a\u8fd9\u4e9b\u63aa\u65bd\u7684\u65b9\u6848\u6570\u76f8\u52a0\u5373\u53ef\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u4ee3\u7801\u7ec6\u8282\u95ee\u9898\u4e86\u3002\n\n\u6211\u4eec\u9700\u8981\u5199\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5355\u70b9\u4fee\u6539\u533a\u95f4\u6c42\u4e58\u79ef\uff0c\u540c\u65f6\u6ce8\u610f\u4e8c\u5206\u67e5\u627e\u5408\u9002\u7684\u79cd\u7c7b\u7684\u65f6\u5019\u7684\u5de6\u53f3\u8fb9\u754c\u95ee\u9898\uff0c\u5176\u4ed6\u7684\u4e00\u822c\u6765\u8bf4\u95ee\u9898\u4e0d\u5927\u3002\u4e0d\u8fc7\u6211\u4ee3\u7801\u5728\u79bb\u6563\u5316\u7684\u5904\u7406\u4e0a\u5199\u590d\u6742\u4e86\uff0c\u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u7b80\u5355\u5f88\u591a\uff08\u53ef\u4ee5\u53c2\u8003[wu3412790](https://www.luogu.com.cn/user/95804) \u8fd9\u4f4d\u771f\u00b7\u5927\u4f6c\u7684[\u9898\u89e3](https://www.luogu.com.cn/blog/wu3412790/solution-p4684)\uff0c\u6211\u6709\u4e00\u4e9b\u5173\u952e\u601d\u8def\u4e5f\u662f\u6765\u6e90\u4e8e\u4ed6\u7684\uff0c\u819c\u62dc\u795e\u4ed9\uff09\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u51c6\u786e\u4e00\u70b9\u5e94\u8be5\u662f$O (F \\log K)$\u7684\uff0c\u56e0\u4e3a\u4e8c\u5206\u8fb9\u754c\u548c\u7ebf\u6bb5\u6811\u7684\u8fb9\u754c\u90fd\u662f\u6309\u7167\u5b9d\u77f3\u79cd\u7c7b\u6765\u7684\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <cctype>\n#include <queue>\n\nusing namespace std;\n\ninline int read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\n\twhile (isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n\treturn x*f;\n}\n\n#define next Syameimaru_Aya\n\nint F,K,M,cnt[500050],pos[500050],maxv[500050],maxv1[500050],next[500050],now[500050],cnt2[500050];\n\nstruct node\n{\n\tint len,col;\n\tbool operator < (const node &rhs) const\n\t{\n\t\treturn len<rhs.len;\n\t}\n}f[500050];\n\nstruct node2\n{\n\tint id,len;\n\tbool operator < (const node2 &rhs) const\n\t{\n\t\treturn len<rhs.len;\n\t}\n}maxlen[500050];\n\nstruct Seg_Tree\n{\n\tint l,r;\n\tlong long val;\n}t[2000050];\n\ninline void Push_Up(int id)\n{\n\tt[id].val=t[id<<1].val*t[id<<1|1].val%M;\n}\n\ninline void Build(int id,int l,int r)\n{\n\tt[id].l=l;\n\tt[id].r=r;\n\tif (l==r)\n\t{\n\t\tt[id].val=1;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tBuild(id<<1,l,mid);\n\tBuild(id<<1|1,mid+1,r);\n\tPush_Up(id);\n}\n\ninline void Change(int id,int pos)\n{\n\tif (t[id].l==t[id].r)\n\t{\n\t\tt[id].val++;\n\t\treturn;\n\t}\n\tint mid=(t[id].l+t[id].r)>>1;\n\tif (pos<=mid)\n\t\tChange(id<<1,pos);\n\telse\n\t\tChange(id<<1|1,pos);\n\tPush_Up(id);\n}\n\ninline long long Query(int id,int l,int r)\n{\n\tif (l>r)\n\t\treturn 1;\n\tif (t[id].l>=l && t[id].r<=r)\n\t\treturn (long long)t[id].val;\n\tint mid=(t[id].l+t[id].r)>>1;\n\tif (r<=mid)\n\t\treturn Query(id<<1,l,r);\n\telse if (l>mid)\n\t\treturn Query(id<<1|1,l,r);\n\telse\n\t\treturn Query(id<<1,l,mid)*Query(id<<1|1,mid+1,r)%M;\n}\n\nint main()\n{\n\tF=read();\n\tK=read();\n\tM=read();\n\tfor (int i=1;i<=F;i++)\n\t{\n\t\tf[i].len=read();\n\t\tf[i].col=read();\n\t\tmaxv1[f[i].col]=maxlen[f[i].col].len=max(maxlen[f[i].col].len,f[i].len);\n\t\tmaxlen[i].id=i;\n\t}\n\tsort(f+1,f+F+1);\n\tsort(maxlen+1,maxlen+K+1);\n\tfor (int i=1;i<=K;i++)\n\t{\n\t\tpos[maxlen[i].id]=i;\n\t\tmaxv[i]=maxv1[maxlen[i].id];\n\t}\n\tfor (int i=F;i;i--)\n\t{\n\t\tf[i].col=pos[f[i].col];\n\t\tcnt[f[i].col]++;\n\t\tnext[i]=now[f[i].col];\n\t\tnow[f[i].col]=i;\n\t}\n\tBuild(1,1,K);\n\tlong long ans=0;\n\tfor (int i=1,p=1;i<=F;i++)\n\t{\n\t\tcnt[f[i].col]--;\n\t\twhile ((f[p].len<<1)<=f[i].len)\n\t\t{\n\t\t\tnow[f[p].col]=next[now[f[p].col]];\n\t\t\tChange(1,f[p].col);\n\t\t\tcnt2[f[p++].col]++;\n\t\t}\n\t\tif (!cnt[f[i].col])\n\t\t{\n\t\t\tint left=f[i].col,right=K,mid=0,res=left;\n\t\t\twhile (left<=right)\n\t\t\t{\n\t\t\t\tint mid=(left+right)>>1;\n\t\t\t\tif (maxv[mid]<f[now[f[i].col]].len*2)\n\t\t\t\t{\n\t\t\t\t\tres=mid;\n\t\t\t\t\tleft=mid+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tright=mid-1;\n\t\t\t}\n\t\t\tlong long res2=Query(1,1,f[i].col-1);\n\t\t\tlong long res3=Query(1,f[i].col+1,res);\n\t\t\tans=(ans+res2*cnt2[f[i].col])%M;\n\t\t\tans=(ans+res2*res3)%M;\n\t\t}\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1581581909,
        "uid": 8457,
        "name": "chen_zhe",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4684 \u3010[IOI2008] Fish \u9c7c\u3011"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u628a\u9c7c\u6309\u7167\u957f\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u4e2a\u5e8f. \u8fd9\u6837\u6bcf\u6761\u9c7c\u80fd\u5403\u7684\u96c6\u5408\u662f\u4e2a\u524d\u7f00.\n\n\u8bb0\u6392\u5e8f\u540e\u7684\u9c7c\u7684\u4e0b\u6807\u4e3a $1, 2, .., n$, \u5bf9\u7b2c $i$ \u6761\u9c7c\u6709\u957f\u5ea6 $len_i$ \u53ca\u5b9d\u77f3\u7c7b\u578b $t_i$.\n\n\u5b9a\u4e49\n\n$S'(i)=\\{j | 2 \\times len_j \\leq len_i, j\\lt i\\}$,\n\n$S(i)=S'(i)\\cup \\{i\\}$,\n\n$cnt'(i, type)=|\\{j | j \\in S'(i), t_j=type\\}|$,\n\n$cnt(i, type)=|\\{j | j \\in S(i), t_j=type\\}|=cnt'(i,type) + [t_i=type]$,\n\n\u90a3\u4e48\u6709\n\n$S'(1) \\subseteq S'(2) \\subseteq ... \\subseteq S'(n-1) \\subseteq S'(n)$.\n\n\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6ca1\u6709 $\\cup \\{i\\}$ \u8fd9\u4e48\u4e2a\u73a9\u610f\u513f\uff0c\u6211\u4eec\u76f4\u63a5\u62ff $S'(n)$ \u7b97\u5c31\u5b8c\u4e8b\u513f\u4e86.\n\n\u56de\u5230\u9898\u76ee, \u5bf9\u4e8e\u6bcf\u4e2a $i$ \u6765\u8bf4, \u7531 $S(i)$ \u751f\u6210\u7684\u5b9d\u77f3\u96c6\u5408\u91cc\u5fc5\u987b\u81f3\u5c11\u6709\u4e00\u4e2a\u5b9d\u77f3 $t_i$.\n\n\u4e14\u82e5\u6709 $j \\lt i$ \u4e14 $t_j = t_i$, \u90a3\u4e48\u6211\u4eec\u5728\u7b97\u7b54\u6848\u7684\u65f6\u5019\u5c31\u4e0d\u7528\u8003\u8651 $S(j)$.\n\n\u6211\u4eec\u8003\u8651\u5728\u6bcf\u4e2a $i$ \u7b97\u51fa\u6709\u591a\u5c11\u79cd\u5b9d\u77f3\u7ec4\u5408, \u6ee1\u8db3\u8fd9\u4e9b\u7ec4\u5408\u4e0d\u4f1a\u88ab\u66f4\u5927\u7684 $j$ \u6240\u9009\u51fa. \u5b9e\u9645\u4e0a\u8fd9\u53ea\u6709\u4e24\u7c7b:\n\n\u7b2c\u4e00\u7c7b: \u5bf9\u4e8e\u6240\u6709\u6ee1\u8db3 $i \\lt j$ \u7684 $j$, \u5b9d\u77f3 $t_j$ \u4e00\u4e2a\u90fd\u4e0d\u9009.\u7531\u4e8e\u6211\u4eec\u5728 $i$ \u88ab\u5f3a\u5236\u8981\u6c42\u9009\u4e86\u4e00\u4e2a\u5b9d\u77f3 $t_i$, \u5bb9\u6613\u77e5\u9053\u8fd9\u6837\u7684\u5b9d\u77f3\u96c6\u5408\u662f\u4e0d\u4f1a\u8ddf\u540e\u9762\u649e\u8f66\u7684.\n\n\u7b2c\u4e8c\u7c7b: \u628a\u5b9d\u77f3 $t_i$ \u7684\u6570\u91cf\u62c9\u6ee1. \u7531 $S'(i) \\subseteq S'(j)$ \u6211\u4eec\u77e5\u9053\u6709 $cnt'(i,t_i) \\leq cnt'(j, t_i)$. \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u8fd9\u6837\u4e00\u4e2a\u533a\u95f4 $[i+1,r]$ \u6ee1\u8db3\u5bf9\u4e8e\u5176\u4e2d\u6240\u6709\u7684 $j$ \u6709: $cnt(i,t_i) \\gt cnt(j,t_i)$ \u548c $cnt'(i,t_i)=cnt'(j,t_i)$. \u5bf9\u4e8e\u8fd9\u4e2a\u533a\u95f4, \u6211\u4eec\u5728\u62c9\u6ee1\u5b9d\u77f3 $t_i$ \u7b97\u7b54\u6848\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u7b2c\u4e00\u7c7b\u7684\u9650\u5236.\n\n\u7531\u4e8e\u4efb\u610f\u6a21\u6570\u4e0d\u652f\u6301\u6c42\u9006, \u6211\u4eec\u9700\u8981\u4e00\u68f5\u7ebf\u6bb5\u6811\u6765\u652f\u6301\u5355\u70b9\u66f4\u65b0\u533a\u95f4\u6c42\u4e58\u79ef.\n\n\n```cpp\n{    \n  {\n    std::vector<int> cnt(k);\n    for (int i = 0; i < n; ++i) {\n      cnt[a[i].second]++;\n    }\n    SegmentTree sgt(k);\n    for (int i = 0; i < k; ++i) {\n      sgt.update(i, cnt[i] + 1);\n    }\n    int result = 0;\n    std::vector<int> last(k, k);\n    std::vector<bool> del(k);\n    for (int i = n - 1, j = n - 1; i >= 0; --i) if (!del[a[i].second]) {\n      del[a[i].second] = true;\n      while (j >= 0 && a[j].first * 2 > a[i].first) {\n        --cnt[a[j].second];\n        last[a[j].second] = a[i].second;\n        sgt.update(a[j].second, cnt[a[j].second] + 1);\n        --j;\n      }\n      (result += sgt.query(0, a[i].second).val) %= mod;\n      (result += mod - sgt.query(0, a[i].second - 1).val) %= mod;\n      (result += sgt.query(0, a[i].second - 1).val * 1LL * sgt.query(a[i].second + 1, last[a[i].second]).val % mod) %= mod;\n      // DUMP(i, a[i].second, j, result, last, cnt);\n    }\n    printf(\"%d\\n\", result);\n  }\n}\n```\n",
        "postTime": 1641462303,
        "uid": 71707,
        "name": "ssstare",
        "ccfLevel": 0,
        "title": "[IOI2008] Fish \u9898\u89e3"
    }
]