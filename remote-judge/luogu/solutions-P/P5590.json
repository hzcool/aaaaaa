[
    {
        "content": "\u9898\u610f\u7b80\u8ff0\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e9b\u6709\u5411\u8fb9\uff0c\u5bf9\u5979\u4eec\u8d4b\u4e0a\u8fb9\u6743 $w\\in[1,9]$\uff0c\u4f7f\u5f97\u6bcf\u6761 $1\\to n$ \u7684\u7b80\u5355\u8def\u5f84\u957f\u76f8\u7b49\u3002\n\n---\n\n\u4e0d\u5f97\u4e0d\u8bf4\u8fd9\u9898\u76f8\u5f53\u6709\u8da3\uff0c\uff0c\n\n\u6bd4\u8d5b\u7684\u65f6\u5019\u5199\u7684\u662f\u94a6\u5b9a\u6bcf\u6761\u5728 $1\\to n$ \u8def\u5f84\u4e0a\u8fb9\u6743\u4e3a $1$\uff0c\u7edf\u8ba1\u8def\u5f84\u603b\u6570\u4ee5\u53ca\u6bcf\u6761\u8def\u5f84\u7684\u957f\u5ea6\u548c\uff0c\u7136\u540e\u6c42\u51fa\u516c\u5171 gcd \u548c lcm\uff0c\u901a\u5206\u540e\u518d\u8fdb\u884c\u4e00\u904d\u7ea6\u5206\u3002\u4f46\u662f\u5f88\u9057\u61be\u7684\u662f\uff0c\u5728\u94a6\u5b9a\u8fb9\u6743\u4e3a $1$ \u65f6\u5c31\u53ef\u80fd\u51fa\u73b0 out of range of [1,9] \u7684\u60c5\u51b5\u3002\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u65e0\u6cd5\u786e\u8ba4\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u80fd\u4ece\u9898\u76ee\u672c\u8eab\u5165\u624b\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\uff0c\uff0c\u7531\u4e8e\u7ed9\u5b9a\u7684\u8fb9\u6743 $w\\in[1,9]$\uff0c\u53c8\u6709 $dis_u + w(u,v) = dis_v$\uff0c\u8bf4\u660e $dis_v - dis_u\\in[1,9]$\u3002\u4ed4\u7ec6\u60f3\u60f3\u8fd9\u4e0d\u5c31\u53ef\u4ee5\u5efa\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u6c42\u89e3\u4e86\u5417\uff1f\n\n![](https://ftp.bmp.ovh/imgs/2019/10/d868f9f03e00d068.png)\n\n---\n\n\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b[\u5dee\u5206\u7ea6\u675f](https://oi-wiki.org/graph/diff-constraints/)\uff0c\u5355\u6e90\u6700\u77ed\u8def\u4e2d\u6211\u4eec\u6709\uff1a\n\n$$dis_{to}\\le dis_u + w(u,to)$$\n\n\u6545\u6709\uff1a\n\n$$dis_{to} - dis_u\\le w(u, to)$$\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u7ed9\u5b9a $x + y \\ge z$\uff0c\u5c31\u53ef\u4ee5\u8f6c\u5316\u6210 $z - y\\le x$\uff0c\u7136\u540e `add(y, z, x)` $y\\to z$ \u5efa\u8fb9\u3002\n\n\u5728\u8fd9\u9053\u9898\u4e2d\u6211\u4eec\u6709 $a\\to b$ \u7684\u8fb9\uff0c\u540c\u65f6\u6709\uff1a\n\n$$1\\le dis_b - dis_a \\color{orange}\\Rightarrow \\color{c}dis_a - dis_b \\le -1$$\n\n$$dis_b - dis_a\\le 9$$\n\n\u6240\u4ee5\u5efa\u8fb9\uff1a`add(b, a, -1), add(a, b, 9)`\n\n\u6700\u540e SPFA \u5224\u65ad\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u662f\u5426\u6709\u89e3\uff08\u662f\u5426\u6709\u8d1f\u73af\uff09\uff0c\u6ca1\u4e86\u3002\n\n\u6ca1\u4e86\uff1f\u6ca1\u4e86\u3002\n\n\u5f53\u7136\u8fd8\u6709\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\uff1a\n\n+ \u9898\u76ee\u7ed9\u7684\u662f\u6709\u5411\u8fb9\uff0c\u8981\u5224\u65ad\u662f\u5426\u80fd\u4ece $1\\to n$\n\n+ \u4e0d\u5728 $1\\to n$ \u8def\u5f84\u4e0a\u7684\u8fb9\u7684\u8fb9\u6743\u53ef\u4ee5\u968f\u4fbf\u6807\uff0c\u4e0d\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u6807\u8bb0\u51fa $1\\to n$ \u8def\u4e0a\u7684\u70b9\uff0c\u7136\u540e\u518d\u5efa\u8fb9\u3002\u5bf9\u90a3\u4e9b\u201c\u65e0\u7528\u201d\u8fb9\u5efa\u8fb9\u4f1a\u8ba9\u6211\u4eec\u5f97\u5230\u9519\u8bef\u7684\u7ea6\u675f\u3002\n\n---\n\n$\\texttt{Code:}$\n\n```cpp\nconst int MAXN = 1e3 + 3;\nconst int MAXM = 2e3 + 3;\nconst int LEN = 1 << 11;\n\ninline int read() {\n\tint x = 0; bool f = 1; register char c = getchar();\n\tfor(; !std::isdigit(c); c = getchar()) f ^= c == '-';\n\tfor(; std::isdigit(c); c = getchar()) x = x * 10 + (c ^ 48);\n\treturn f ? x : -x;\n}\n\nint n, m, u[MAXM], v[MAXM], dis[MAXN], times[MAXN]; \nbool inq[MAXN], vis1[MAXN], visn[MAXN];\n\nint fa[MAXN];\n\ninline int find(int x) {\n\treturn fa[x] == x ? x : fa[x] = find(fa[x]);\n}\ninline void merge(int x, int y) {\n\tint a = find(x), b = find(y);\n\tif(a == b) return ;\n\tfa[a] = b;\n}\n\nstruct Edges {\n\tint to, dis, nxt;\n\tEdges() {}\n\tEdges(int to, int dis, int nxt): to(to), dis(dis), nxt(nxt) {}\n} edge[MAXM << 1];\n\nint head[MAXN];\n\ninline void addEdge(int u, int v, int d) {\n\tstatic int cnt = 0;\n\tedge[++cnt] = Edges(v, d, head[u]);\n\thead[u] = cnt;\n}\n\nstd::vector<int> G[MAXN], nG[MAXN];\ninline void addEdge(int u, int v, std::vector<int> ver[]) {\n\tver[u].push_back(v);\n}\n\nvoid dfs(int x) {\n\tint size = G[x].size();\n\tfor(int i = 0; i < size; ++i) {\n\t\tint to = G[x][i];\n\t\tif(vis1[to]) continue;\n\t\t\n\t\tvis1[to] = 1; dfs(to);\n\t}\n}\nvoid nDfs(int x) {\n\tint size = nG[x].size();\n\tfor(int i = 0; i < size; ++i) {\n\t\tint to = nG[x][i];\n\t\tif(visn[to]) continue;\n\t\t\n\t\tvisn[to] = 1; nDfs(to);\n\t}\n}\n\nstruct Queue {\n\tint l, r, q[LEN + 10];\n\tQueue(): l(1), r(0) {}\n\t\n\tinline void push(int x) { q[++r & (LEN - 1)] = x; }\n\tinline void pop() { ++l; }\n\tinline int front() { return q[l & (LEN - 1)]; }\n\tinline bool empty() { return l > r; }\n};\n\ninline bool SPFA(int s) {\n\tstd::memset(dis, 0x3f, sizeof dis);\n\tdis[s] = 0; inq[s] = 1; times[s] = 1;\n\tQueue q; q.push(s);\n\t\n\twhile(!q.empty()) {\n\t\tint u = q.front(); q.pop();\n\t\tinq[u] = 0;\n\t\tfor(int i = head[u]; i; i = edge[i].nxt) {\n\t\t\tint v = edge[i].to;\n\t\t\tif(dis[u] + edge[i].dis < dis[v]) {\n\t\t\t\tdis[v] = dis[u] + edge[i].dis;\n\t\t\t\tif(++times[v] > n) return 0;\n\t\t\t\tif(!inq[v]) q.push(v), inq[v] = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\n\nsigned main() {\n\tn = read(), m = read();\n\t\n\tfor(int i = 1; i <= n; ++i) fa[i] = i;\n\t\n\tfor(int i = 1; i <= m; ++i) {\n\t\tu[i] = read(), v[i] = read();\n\t\taddEdge(u[i], v[i], G), addEdge(v[i], u[i], nG);\n\t\tmerge(u[i], v[i]);\n\t}\n\t\n\tif(find(1) != find(n)) {\n\t\tputs(\"-1\");\n\t\treturn 0;\n\t}\n\t\n\tdfs(1); nDfs(n);\n\t\n\tstatic bool flag[MAXN] = {0};\n\tfor(int i = 1; i <= n; ++i) if(vis1[i] && visn[i]) flag[i] = 1;\n\tif(!vis1[n]) {\n\t\tputs(\"-1\");\n\t\treturn 0;\t\n\t}\n\tflag[1] = flag[n] = 1;\n\t\n\tfor(int i = 1; i <= m; ++i)\n\t\tif(flag[u[i]] && flag[v[i]]) addEdge(u[i], v[i], 9), addEdge(v[i], u[i], -1);\n\t\n\tif(!SPFA(1)) {\n\t\tputs(\"-1\");\n\t\treturn 0;\n\t}\n\t\n\tprintf(\"%d %d\\n\", n, m);\n\tfor(int i = 1; i <= m; ++i) {\n\t\tprintf(\"%d %d \", u[i], v[i]);\n\t\tif(flag[u[i]] && flag[v[i]]) printf(\"%d\\n\", dis[v[i]] - dis[u[i]]);\n\t\telse puts(\"1\");\n\t}\n\treturn 0;\n}\n\n```\n\n\u4e3a\u4e86\u80fd\u8ba9\u5927\u5bb6\u6709\u81ea\u5df1\u7684\u601d\u8003\u4e0e\u7406\u89e3\uff0c\u9898\u89e3\u4ee3\u7801\u4e2d\u6ca1\u6709\u6ce8\u91ca\u3002\u8be6\u7ec6\u6ce8\u91ca\u7248\u672c\u7684\u653e\u5728[\u526a\u8d34\u677f](http://ideone.com/mIcphC)\u4e2d\u3002\n\n\u53e6\uff1a\u535a\u4e3b\u662f\u4e2a\u83dc\u9e21\uff0c\u5982\u679c\u54ea\u91cc\u6709\u8bef\u9ebb\u70e6\u6307\u51faorz",
        "postTime": 1571020350,
        "uid": 80358,
        "name": "Rbu_nas",
        "ccfLevel": 0,
        "title": "\u9898\u89e3P5590 \u8d5b\u8f66\u6e38\u620f"
    },
    {
        "content": "#### \u9898\u610f\u5206\u6790\n\n\u7ed9\u4f60\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u8ba9\u4f60\u7ed9\u56fe\u4e0a\u7684\u8fb9\u8d4b\u8fb9\u6743\uff0c\u8fb9\u6743\u7684\u8303\u56f4\u4e3a$[1,9]$\uff0c\u4f7f\u5f97$1$\u5230$n$\u7684\u6240\u6709\u8def\u5f84\u7b49\u957f\n\n\n------------\n#### \u601d\u8def\u89e3\u6790\n\n~~\u65e2\u7136\u9898\u76ee\u8bf4\u4e86\u8def\u5f84\u7b49\u957f\uff0c\u90a3\u4e0d\u5f00\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u8def\u5f84\u957f\u5ea6\u4e0d\u662f\u5f88\u4e8f\u5417\uff1f~~\n\u6240\u4ee5\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4$d$\u5b58\u50a8\u8282\u70b9$1$\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u3002\u6839\u636e\u9898\u610f\uff0c\u8fb9\u6743\u7684\u8303\u56f4\u4e3a$[1,9]$\uff0c\u56e0\u6b64\u5bf9\u4e8e\u56fe\u4e2d\u7684\u6240\u6709\u6709\u5411\u8fb9$(u,v)$\uff0c\u5728\u6709\u89e3\u7684\u60c5\u51b5\u4e0b\uff0c\u6709\u4ee5\u4e0b\u5f0f\u5b50\uff1a\n$$1\\leq d[v]-d[u]\\leq 9$$\n~~\u8349\uff0c~~\n\u4e00\u773c\u770b\u4e0a\u53bb\u5c31\u957f\u5f97\u4e00\u526f\u5dee\u5206\u7ea6\u675f\u7684\u4e9a\u5b50\u3002~~\u7b49\u7b49\uff0cSPFA\u2026\u2026~~\n\u770b\u4e00\u773c\u6570\u636e\u8303\u56f4\uff0c\u55ef\uff0c\u6ca1\u6bdb\u75c5\uff0c\u5c31\u5b83\u4e86\uff01\u65e0\u803b\u5730\u5b89\u5229\u4e00\u6ce2\u535a\u5ba2\uff1a[\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u8be6\u89e3](https://www.cnblogs.com/TEoS/p/11490547.html)\n\n\u73b0\u5728\u8003\u8651\u4ec0\u4e48\u65f6\u5019\u65e0\u89e3\u3002\u663e\u7136\uff0c\u5f53\u8def\u5f84\u5b58\u5728\u73af\u65f6\uff0c\u80af\u5b9a\u662f\u65e0\u89e3\u7684\uff0c\u56e0\u4e3a\u8fb9\u6743\u8303\u56f4\u662f$[1,9]$\uff0c\u7ecf\u8fc7\u73af\u7684\u8def\u5f84\u957f\u5ea6\u4e00\u5b9a\u662f\u6bd4\u4e0d\u7ecf\u8fc7\u73af\u7684\u957f\u7684\uff0c\u800c\u9898\u76ee\u8981\u6c42\u8def\u5f84\u957f\u5ea6\u76f8\u540c\uff0c\u56e0\u6b64\u6b64\u65f6\u65e0\u89e3\u3002~~\u7136\u800c\u4e0d\u5224\u4e5f\u53ef\u4ee5\u8fc7\u3002~~\n\u5dee\u5206\u7ea6\u675f\u65e0\u89e3\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u5224\u8d1f\u73af\u5c31\u5b8c\u4e8b\u4e86\u3002\n\n\n\n------------\n#### \u5177\u4f53\u5b9e\u73b0\n\n\u600e\u4e48\u5efa\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u5462\uff1f~~\u66b4\u529b~~\n\u4e00\u904ddfs\uff0c\u5224\u65ad\u8be5\u8fb9\u662f\u5426\u5728$1$\u5230$n$\u7684\u8def\u5f84\u4e0a\uff0c\u5982\u679c\u5728\uff0c\u5c31\u6309\u7167\u4e0a\u9762\u7684\u5173\u7cfb\u5f0f\u5efa\u8fb9\uff0c\u5373\u4ece$u$\u5411$v$\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a$9$\u7684\u8fb9\uff0c\u4ece$v$\u5411$u$\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a$-1$\u7684\u8fb9\u3002\n\n\u4f46\u662f\uff0c\u770b\u4e86\u4e00\u773c\u6570\u636e\u8303\u56f4\uff08\u521a\u521a\u4e0d\u662f\u770b\u8fc7\u4e86\u5417\uff09\uff0c\u53d1\u73b0\u867d\u7136SPFA\u6d3b\u4e86\uff0c\u66b4\u529b\u8fd8\u662f\u82df\u5ef6\u6b8b\u5598\uff0c\u5b9e\u6d4b60pts\uff0c100%\u7684\u6570\u636e\u53ea\u8fc7\u4e86\u65e0\u89e3\u76842\u4e2a\u70b9\u3002\u56e0\u6b64\u8981\u8fdb\u884c\u4e00\u4e2a\u526a\u679d\u3002\n\n\u663e\u7136\uff0c\u5728\u6709\u89e3\u7684\u56fe\u4e0a\u662f\u4e0d\u5b58\u5728\u73af\u7684\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5b58\u50a8\u4e00\u4e2a\u8282\u70b9\u80fd\u5426\u5230\u8fbe$n$\u8282\u70b9\uff0c\u5982\u679c\u80fd\uff0c\u5c31\u4e0d\u7528\u7ee7\u7eed\u8d70\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\n\n\u6700\u540e\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5dee\u5206\u7ea6\u675f\u6761\u4ef6\u662f\u9488\u5bf9\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c\u56e0\u4e3a\u4e4b\u524d\u6211\u4eec\u6ca1\u6709\u5bf9\u4e0d\u5728\u8def\u5f84\u4e0a\u7684\u8fb9\u8fdb\u884c\u7ea6\u675f\uff0c\u56e0\u6b64\u8fd9\u4e9b\u8fb9\u7684\u8fb9\u6743\u53ef\u80fd\u4e0d\u5728$[1,9]$\u7684\u8303\u56f4\u5185\u3002\u7136\u800c\u8fd9\u4e9b\u8fb9\u6beb\u65e0\u7528\u5904\uff0c\u8fb9\u6743\u53ea\u8981\u5728\u8303\u56f4\u5185\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u968f\u4fbf\u7ed9\u5b83\u4eec\u8d4b\u4e00\u4e2a\u503c\u5c31\u884c\u3002~~\u6b22\u8fcerand~~\n\n\u8fd9\u6837\u8fd9\u9898\u5c31\u89e3\u5b8c\u4e86\uff01\n\n\u6700\u540e\u5949\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<cmath>\nusing namespace std;\nconst int N=1e4,M=1e5;\nint n,m,tot,tot1;\nint head[N],ver[M],Next[M];\nint h1[N],v1[2*M],n1[2*M],e1[2*M];\nint x[N],y[N],d[N],cnt[N];\nbool v[N],p[N];\nqueue<int> q;\nvoid add(int x,int y)\n{\n\tver[++tot]=y,Next[tot]=head[x],head[x]=tot;\n}//\u539f\u56fe\nvoid Add(int x,int y,int z)\n{\n\tv1[++tot1]=y,e1[tot1]=z,n1[tot1]=h1[x],h1[x]=tot1;\n}//\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u56fe\nbool spfa()\n{\n\tmemset(v,0,sizeof(v));\n\tmemset(d,0x3f,sizeof(d));\n\tqueue<int> q;\n\tq.push(0);\n\td[0]=0,v[0]=1;\n\twhile(q.size())\n\t{\n\t\tint x=q.front();q.pop();v[x]=0;\n\t\tfor(int i=h1[x];i;i=n1[i])\n\t\t\tif(d[x]+e1[i]<d[v1[i]])\n\t\t\t{\n\t\t\t\tint y=v1[i];\n\t\t\t\td[y]=d[x]+e1[i];\n\t\t\t\tcnt[y]=cnt[x]+1;\n\t\t\t\tif(cnt[y]>n)\n\t\t\t\t\treturn 1;//\u5b58\u5728\u8d1f\u73af\uff0c\u65e0\u89e3\n\t\t\t\tif(!v[y])\n\t\t\t\t{\n\t\t\t\t\tq.push(y);\n\t\t\t\t\tv[y]=1;\n\t\t\t\t}\n\t\t\t}\n\t}\n\treturn 0;\n}//\u5dee\u5206\u7ea6\u675f\nbool dfs(int x)\n{\n\tif(x==n || p[x])\n\t\treturn 1;//\u5230\u8fben\u8282\u70b9\u4ee5\u53ca\u526a\u679d\n\tfor(int i=head[x];i;i=Next[i])\n\t\tif(!v[i])\n\t\t{\n\t\t\tv[i]=1;\n\t\t\tif(dfs(ver[i]))//\u5982\u679c\u80fd\u591f\u5230\u8fben\u8282\u70b9\uff0c\u5373\u5728\u8def\u5f84\u4e0a\n\t\t\t{\n\t\t\t\tAdd(x,ver[i],9),Add(ver[i],x,-1);//\u5efa\u8fb9\n\t\t\t\tp[x]=1;\n\t\t\t}\n\t\t}\n\treturn p[x];\n}//\u5efa\u7acb\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&x[i],&y[i]);\n\t\tadd(x[i],y[i]);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tAdd(0,i,0);\n\tif(!dfs(1) || spfa())\n\t{\n\t\tputs(\"-1\");\n\t\treturn 0;\n\t}//\u4e0d\u5b58\u5728\u8def\u5f84\u548c\u65e0\u89e3\u76f4\u63a5\u8f93\u51fa\n\tprintf(\"%d %d\\n\",n,m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tprintf(\"%d %d \",x[i],y[i]);\n\t\tint now=abs(d[x[i]]-d[y[i]]);\n\t\tif(now>0 && now<10)\n\t\t\tprintf(\"%d\\n\",now);//\u5728\u8303\u56f4\u5185\u76f4\u63a5\u8f93\u51fa\n\t\telse\n\t\t\tputs(\"1\");//\u4e0d\u5728\u8303\u56f4\u5185\u4e00\u5b9a\u4e0d\u5728\u8def\u5f84\u4e0a\uff0c\u968f\u4fbf\u8d4b\u503c1~9\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1570971936,
        "uid": 91534,
        "name": "TEoS",
        "ccfLevel": 6,
        "title": "P5590 \u8d5b\u8f66\u6e38\u620f"
    },
    {
        "content": "\u8bdd\u8bf4\u6708\u8d5b\u600e\u4e48\u51fa\u539f\u9898\u4e86......~~\u7ee73\u6708\u6708\u8d5b\u540e\u518d\u51fa\u539f\u9898~~\n\n\u8fd9\u9898\u548c$CF241E$\u5f88\u50cf\uff0c\u53ea\u662f\u90a3\u9898\u8981\u6c42\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u8981\u4e48\u662f1\u8981\u4e48\u662f2\u7f62\u4e86\u3002\n\n\u4f46\u4f5c\u8005\u8003\u573a\u4e0a\u603b\u4f1a\u51fa\u4e00\u4e9b\u610f\u5916\u7684\u72b6\u51b5\uff0c\u6bd4\u5982\u88ab\u53eb\u53bb\u5403\u996d\u4e4b\u7c7b\u7684\uff0c\u6240\u4ee5\u8003\u573a\u5199\u4e86\u4e2a\u5927\u66b4\u529b\uff0c\u4e00\u5206\u90fd\u6ca1\u6709\u3002\n\n\u7ecf\u8fc7\u67d0\u4e2a\u795e\u4ed9 @Social_Zhao \u6307\u70b9\u540e\uff0c\u53d1\u73b0\u4e86\u8fd9\u662f\u5dee\u5206\u7ea6\u675f......\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u6743\u503c\u22649\uff0c\u22651\uff0c\u6240\u4ee5\u5c31\u6709\n\n$1<=dis_{to}-dis_{from}<=9$\n\n\u5373$dis_{to}-dis_{from}<=9$\u4e14$dis_{from}-dis_{to}<=-1$\n\n\u7136\u540e\u8fd9\u5c31\u662f\u4e00\u4e2a\u660e\u663e\u7684\u5dee\u5206\u7ea6\u675f\u4e86\u3002\n\n\u4ece$from$\u5230$to$\u8fde\u4e00\u6761\u6743\u503c\u4e3a$-1$\u7684\u8fb9\uff0c\u518d\u4ece$to$\u5230$from$\u8fde\u4e00\u6761\u6743\u503c\u4e3a$9$\u7684\u8fb9\u3002\u4ece$1$\u8dd1$spfa$,\u6709\u8d1f\u73af\u8f93\u51fa$-1$,\u5426\u5219\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u6743\u503c\u7b49\u4e8e$dis_{to}-dis_{from}$\n\n---\n\n\u4f46\u662f\uff0c\u6709\u4e00\u4e9b\u5751\u70b9\n\n### \u5751\u70b9\u4e00\n\n\u6bd4\u5982\u8fd9\u4e2a\u56fe\uff08\u8111\u8865\u4e00\u4e0b\uff0c\u70b9\u4e0d\u5f00\u4f5c\u56fe\u5de5\u5177\uff09\n\n$1->2$\n\n$2->3$\n\n$3->4$\n\n$4->5$\n\n$5->6$\n\n$6->7$\n\n$7->8$\n\n$8->9$\n\n$9->10$\n\n$10->11$\n\n$1->11$\n\n$1->12$\n\n\u663e\u7136\uff0c\u4f60\u76f4\u63a5\u8dd1\u5dee\u5206\u7ea6\u675f\u662f\u4f1a\u6302\u6389\u7684\uff0c\u56e0\u4e3a\u56fe\u91cc\u4ece$1$\u51fa\u53d1\u6709\u8d1f\u73af\u3002\u4f46\u662f\u4ece$1$\u5230$n$(\u5373$12$)\u4ec5\u6709\u4e00\u6761\u8def\u5f84\uff0c\u6240\u4ee5\u80af\u5b9a\u662f\u6709\u89e3\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u663e\u7136\uff0c\u53ea\u9700\u8981\u628a\u4e0d\u5728$1$\u5230$n$\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u548c\u8fb9\u5168\u90e8\u4e0d\u7ba1\uff0c\u518d\u8dd1\u5dee\u5206\u7ea6\u675f\u5373\u53ef\u3002\u5bf9\u4e8e\u4e0d\u5728\u6307\u5b9a\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c\u76f4\u63a5\u628a\u5b83\u4eec\u7684\u6743\u503c\u8d4b\u4e3a$1-9$\u7684\u4efb\u610f\u6574\u6570\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u5904\u7406\u65e0\u7528\u70b9\uff0c\u4e00\u822c\u4f7f\u7528\u4e24\u904d$dfs/bfs$,\u4e00\u904d\u7528\u539f\u8fb9\u4ece$1$\u904d\u5386\uff1b\u53e6\u4e00\u904d\u7528\u53cd\u5411\u8fb9\uff0c\u4ece$n$\u904d\u5386\uff0c\u4e24\u6b21\u90fd\u904d\u5386\u5230\u7684\u70b9\u5c31\u5728$1->n$\u7684\u8def\u5f84\u4e0a\u3002\n\n### \u5751\u70b9\u4e8c\n\n\u5fc5\u987b\u8981\u5224\u65ad$1->n$\u662f\u5426\u8054\u901a\uff0c~~\u4e0d\u7136\u4f60\u4f1a\u5f97\u523030\u5206\u7684\u9ad8\u5206~~\n\n---\n\n\u8bb2\u5b8c\u4e86$QWQ$\n\n$Code:$ \n\n```cpp\n#include<bits/stdc++.h>\n#include<queue>\n#define R register\n#define rep(i,a,b) for(R int i=a ; i<=b ; ++i)\n#define dwn(i,a,b) for(R int i=a ; i>=b ; --i)\nusing namespace std;\n\ninline int read() {\n\tint res=0,f=1;char ch;\n\twhile(!isdigit(ch=getchar())) if(ch=='-') f=-1;\n\tdo {\n\t\tres=res*10+ch-'0';\n\t} while(isdigit(ch=getchar()));\n\treturn res*f;\n}\n\nconst int N=2005;\n\nstruct Edge {\n\tint next,from,to,val;\n}a[N<<1],b[N<<1],c[N<<1];\n\nint head[N],tail[N],size;\n\nbool ok1[N],ok2[N],ok[N];\n\ninline void add(int u,int v) {\n\ta[++size].next=head[u],a[size].from=u,a[size].to=v,head[u]=size;\n\tb[size].next=tail[v],b[size].to=u,tail[v]=size;\n}\n\nvoid dfs1(int u) {\n\tok1[u]=1;\n\tfor(R int i=head[u] ; i ; i=a[i].next) {\n\t\tint v=a[i].to;\n\t\tif(!ok1[v]) dfs1(v);\n\t}\n}\n\nvoid dfs2(int u) {\n\tok2[u]=1;\n\tfor(R int i=tail[u] ; i ; i=b[i].next) {\n\t\tint v=b[i].to;\n\t\tif(!ok2[v]) dfs2(v);\n\t}\n}\n\ninline void add2(int u,int v,int w) {\n\tc[++size].next=head[u],c[size].to=v,c[size].val=w,head[u]=size;\n}\n\nint dis[N],num[N];\n\nbool inq[N];\n\nint main() {\n\tint n=read(),m=read();\n\trep(i,1,m) {\n\t\tint x=read(),y=read();\n\t\tadd(x,y);\n\t}\n\tdfs1(1),dfs2(n);\n\trep(i,1,n) ok[i]=ok1[i]&ok2[i];\n\tsize=0,memset(head,0,sizeof(head));\n\trep(i,1,m) if(ok[a[i].from]&&ok[a[i].to]) add2(a[i].from,a[i].to,9),add2(a[i].to,a[i].from,-1);\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[1]=0;\n\tqueue <int> q;\n\tq.push(1),num[1]=inq[1]=1;\n\twhile(!q.empty()) {\n\t\tint u=q.front();q.pop(),inq[u]=0;\n\t\tfor(R int i=head[u] ; i ; i=c[i].next) {\n\t\t\tint v=c[i].to;\n\t\t\tif(dis[v]>dis[u]+c[i].val) {\n\t\t\t\tdis[v]=dis[u]+c[i].val;\n\t\t\t\tif(!inq[v]) {\n\t\t\t\t\tif(num[v]==n) {\n\t\t\t\t\t\tprintf(\"-1\");\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\tq.push(v),inq[v]=1,++num[v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(dis[n]==0x3f3f3f3f) {\n\t\tprintf(\"-1\");\n\t\treturn 0;\n\t}\n\tprintf(\"%d %d\\n\",n,m);\n\trep(i,1,m) {\n\t\tprintf(\"%d %d \",a[i].from,a[i].to);\n\t\tif(!ok[a[i].from]||!ok[a[i].to]) printf(\"1\");\n\t\telse printf(\"%d\",dis[a[i].to]-dis[a[i].from]);\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1571033403,
        "uid": 79075,
        "name": "mzgwty",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5590 \u3010\u8d5b\u8f66\u6e38\u620f\u3011"
    },
    {
        "content": "## \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\n\n**\u5b9a\u4e49**\uff1a\u5982\u679c\u4e00\u4e2a\u7cfb\u7edf\u7531n\u4e2a\u53d8\u91cf\u548cm\u4e2a\u7ea6\u675f\u6761\u4ef6\u7ec4\u6210\uff0c\u5f62\u6210m\u4e2a\u5f62\u5982ai-aj\u2264k\u7684\u4e0d\u7b49\u5f0f(i,j\u2208[1,n],k\u4e3a\u5e38\u6570),\u5219\u79f0\u5176\u4e3a\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf(system of difference constraints)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u662f\u6c42\u89e3\u5173\u4e8e\u4e00\u7ec4\u53d8\u91cf\u7684\u7279\u6b8a\u4e0d\u7b49\u5f0f\u7ec4\u7684\u65b9\u6cd5\n\n\u5982\u679c\u8fd8\u4e0d\u4f1a\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u540c\u5b66\u8bf7\u5148\u770b[\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u5b66\u4e60\u7b14\u8bb0](https://blog.csdn.net/dragon60066/article/details/80245797)\n\n\u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u9898\u3002**\u9898\u76ee\u91cc\u8bf4\uff1a\u201c\u968f\u4fbf\u7ed9\u8fb9\u8868\u4e0a\u4e00\u4e2a1...9\u7684\u957f\u5ea6\u201d**\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u5bf9\u7ed9\u5b9a\u7684\u8fb9$(u,v)$\uff0c**\u90fd\u5fc5\u987b\u6ee1\u8db3$1\\le dis[v]-dis[u] \\le9$\u7684\u7ea6\u675f**\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6784\u5efa\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u4e86\u3002\n\n**\u7531\u4e8e\u9898\u76ee\u6c42\u7684\u662f\u53d8\u91cf\u5dee\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u6240\u6709\u4e0d\u7b49\u5f0f\u90fd\u8f6c\u5316\u6210$u-v \\ge c$\u7684\u5f62\u5f0f\uff0c\u518d\u6784\u56fe\u6c42\u6700\u957f\u8def**\u3002\u5177\u4f53\u7684\u6784\u5efa\u65b9\u5f0f\u5c31\u662f\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u5bf9\u8fb9$(u,v)$\uff0c\u80af\u5b9a\u6709$1\\le dis[v]-dis[u] \\le9$\uff0c\u6545\u4eceu\u5230v\u5efa\u4e00\u6761\u957f\u5ea6\u4e3a1\u7684\u6709\u5411\u8fb9\uff0c\u4ecev\u5230u\u5efa\u4e00\u6761\u957f\u5ea6\u4e3a-9\u7684\u6709\u5411\u8fb9\u3002\n\n\u5f53\u7136\uff0c\u4e0a\u9762\u53ea\u662f\u7406\u8bba\u5efa\u8fb9\u65b9\u5f0f\u3002\u7531\u4e8e\u8981\u6c42\u6700\u957f\u8def\uff0c\u5982\u679c\u4ec5\u4ec5\u628aspfa\u677e\u5f1b\u65f6\u7684\u5927\u4e8e\u53f7\u6539\u4e86\uff0c\u90a3\u5c82\u4e0d\u662f\u4efb\u51fa\u9898\u4eba\u968f\u4fbf\u5361\uff1f\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u5efa\u8fb9\u65f6\u628a\u6743\u503c\u90fd\u53d6\u76f8\u53cd\u6570\uff0c\u5728spfa\u5b8c\u540e\u518d\u5bf9dis\u6570\u7ec4\u91cc\u7684\u6bcf\u4e2a\u503c\u53bb\u76f8\u53cd\u6570\u3002\n\n\u5982\u679c\u5728\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u4e0a\u5b58\u5728\u8d1f\u73af\uff0c\u90a3\u4e48\u4e00\u5b9a\u4e0d\u53ef\u89e3\uff0c\u53ca\u65f6return\u5e76\u8f93\u51fa-1\u3002\n\n\u672c\u6765\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5b8c\u4e86\uff0c\u4f46\u662f\uff0c\u9057\u61be\u7684\u662f\uff0c\u8fd9\u4e2a\u9898\u53ef\u80fd\u6709\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u70b9\uff0c\u6bd4\u5982\u8fd9\u4e2a\u56fe\u91cc\u76842\u548c4\u70b9\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/dzx3udoy.png)\n\n\u7531\u4e8e2\u70b9\u548c4\u70b9\u90fd\u4e0d\u4f1a\u88ab\u4ece1\u5230n\u7684\u8def\u5f84\u7ecf\u8fc7\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u8fd8\u8981\u628a\u4ed6\u4eec\u7684\u7ea6\u675f\u6761\u4ef6\u52a0\u5230\u7ea6\u675f\u65b9\u7a0b\u7ec4\u91cc\uff0c**\u6211\u4eec\u7684\u7b54\u6848\u5c31\u4f1a\u88ab\u4e0d\u5fc5\u8981\u7684\u7ea6\u675f\u6240\u7ea6\u675f\uff0c\u662f\u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\u7684\u7b54\u6848\u7684**\u3002\u6240\u4ee5\u6211\u5efa\u4e86\u6b63\u56fe\u548c\u53cd\u56fe\uff0c\u5728\u6b63\u56fe\u4e0a\u4ece1\u5230n\u8dd1DFS\uff0c\u5728\u53cd\u56fe\u4e0a\u4ecen\u52301\u8dd1DFS\uff0c\u627e\u51fa\u4e24\u6b21\u90fd\u904d\u5386\u5230\u7684\u70b9\u5e76\u5efa\u65b0\u56fe\u5b58\u4e0b\u6765\uff0c\u7136\u540e\u5728\u65b0\u56fe\u4e0a\u6784\u5efa\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u3002\n\n### \u6ce8\u610f\u5224\u65ad\u4ece1\u5230n\u662f\u5426\u8fde\u901a\uff01\n\n\u4ee5\u4e0b\u662f\u4ee3\u7801\uff1a\n```cpp\n#include<cmath>\n#include<queue>\n#include<cstdio>\n#include<iostream>\nconst int maxn=4010;\nusing namespace std;\ninline int read()\n{\n    int fu=1,x=0;char o=getchar();\n    while(o<'0'||o>'9'){if(o=='-')fu=-1;o=getchar();}\n    while(o>='0'&&o<='9'){x=(x<<1)+(x<<3)+(o^48);o=getchar();}\n    return x*fu;\n}\nstruct Edge\n{\n\tint from,to,dis,nst;\n}e1[maxn],e2[maxn],edge[maxn];\nint n,m,a,b;\nint cnt1,cnt2,cnt;\nint dis[maxn],num[maxn],from[maxn],to[maxn],sign[maxn];\nbool vis1[maxn],vis2[maxn],vis[maxn];\nint head1[maxn],head2[maxn],head[maxn];\ninline void add(int a,int b,int c)\n{\n\tedge[++cnt].nst=head[a];\n\tedge[cnt].to=b;\n\tedge[cnt].from=a;\n\tedge[cnt].dis=c;\n\thead[a]=cnt;\n}\ninline void add1(int a,int b)\n{\n\te1[++cnt1].nst=head1[a];\n\te1[cnt1].to=b;\n\te1[cnt1].from=a;\n\thead1[a]=cnt1;\n}\ninline void add2(int a,int b)\n{\n\te2[++cnt2].nst=head2[a];\n\te2[cnt2].to=b;\n\te2[cnt2].from=a;\n\thead2[a]=cnt2;\n}\nvoid dfs_forward(int x)\n{\n\tfor(int i=head1[x];i;i=e1[i].nst)\n\t{\n\t\tint v=e1[i].to;\n\t\tif(vis1[v])continue;\n\t\tvis1[v]=1;\n\t\tdfs_forward(v);\n\t}\n}\nvoid dfs_reverse(int x)\n{\n\tfor(int i=head2[x];i;i=e2[i].nst)\n\t{\n\t\tint v=e2[i].to;\n\t\tif(vis2[v])continue;\n\t\tvis2[v]=1;\n\t\tdfs_reverse(v);\n\t}\n}\nbool spfa()\n{\n\tqueue <int> q;\n\tfor(int i=1;i<=n;i++)\n\tdis[i]=1e8,vis[i]=0;\n\tvis[1]=1;dis[1]=0;\n\tq.push(1);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvis[u]=0;num[u]++;\n\t\tfor(int i=head[u];i;i=edge[i].nst)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif(dis[v]>dis[u]+edge[i].dis)\n\t\t\t{\n\t\t\t\tdis[v]=edge[i].dis+dis[u];\n\t\t\t\tif(num[v]>n)return 0;\n\t\t\t\tif(!vis[v]){vis[v]=1;q.push(v);}\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\nvoid debug()\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(vis1[i])cout<<i<<\" \";\n\t}\n\tcout<<\"\\n\";\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(vis2[i])cout<<i<<\" \";\n\t}\n\tcout<<\"\\n\";\n}\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\ta=read();b=read();\n\t\tadd1(a,b);add2(b,a);\n\t}\n\tdfs_forward(1);dfs_reverse(n);\n\tfor(int i=1;i<=n;i++)\n\tif(vis1[i]&&vis2[i])sign[i]=1;\n\tif(!vis1[n]){printf(\"-1\\n\");return 0;}\n\tsign[1]=1;sign[n]=1;\n//\tdebug();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u=e1[i].from,v=e1[i].to;\n\t\tif(sign[u]&&sign[v])\n\t\t{\n\t\t\tadd(u,v,-1);add(v,u,9);\n\t\t}\n\t}\n\tif(!spfa()){printf(\"-1\\n\");return 0;}\n\tfor(int i=1;i<=n;i++)dis[i]*=-1;\n\tprintf(\"%d %d\\n\",n,m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u=e1[i].from,v=e1[i].to;\n\t\tprintf(\"%d %d \",u,v);\n\t\tif(sign[u]&&sign[v])printf(\"%d\\n\",dis[v]-dis[u]);\n\t\telse printf(\"1\\n\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1571011742,
        "uid": 105123,
        "name": "Protons",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5590 \u3010\u8d5b\u8f66\u6e38\u620f\u3011"
    },
    {
        "content": "\u672c\u9898\u89e3\u5df2\u66f4\u65b0\uff0c\u5e76\u7b49\u5f85dalao\u4e8c\u6b21hack\n\n### \u5173\u4e8eSPFA\uff0c\u5b83SPFA\u4e86\n\n\u9898\u9762\uff1a\n\n------------\n\nR \u541b\u548c\u5c0f\u4f19\u4f34\u6253\u7b97\u4e00\u8d77\u73a9\u8d5b\u8f66\u3002\u4f46\u4ed6\u4eec\u88ab\u8001\u53f8\u673a mocania \u9a97\u53bb\u4e86\u79cb\u540d\u5c71\u3002\n\n\u79cb\u540d\u5c71\u4e0a\u6709 n \u4e2a\u70b9\u548c m \u6761\u8fb9\uff0cR \u541b\u548c\u4ed6\u7684\u5c0f\u4f19\u4f34\u8981\u4ece\u70b9 1 \u51fa\u53d1\u5f00\u5f80\u70b9 n\uff0c\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u521d\u59cb\u7684\u65b9\u5411\u3002\u8001\u53f8\u673a mocania \u62ff\u5230\u4e86\u79cb\u540d\u5c71\u7684\u5730\u56fe\u4f46\u5374\u4e0d\u77e5\u9053\u6bcf\u6761\u8def\u6709\u591a\u957f\u3002\u663e\u7136\uff0c\u4e3a\u4e86\u8d5b\u8f66\u6e38\u620f\u7684\u516c\u5e73\uff0c**\u6bcf\u6761 1 \u5230 n \u7684\u8def\u5f84\u5e94\u5f53\u662f\u7b49\u957f\u7684**\u3002mocania \u60f3\uff0c\u6211\u5c31\u968f\u4fbf\u7ed9\u8fb9\u8868\u4e0a\u4e00\u4e2a 1...9 \u7684\u957f\u5ea6\uff0c\u53cd\u6b63\u50bb\u50bb\u7684 R \u541b\u4e5f\u770b\u4e0d\u51fa\u6765\u3002\n\n\u53ef mocania \u7684\u6570\u5b66\u4e0d\u5927\u597d\uff0c\u4e0d\u77e5\u9053\u600e\u4e48\u7ed9\u8fb9\u6807\u957f\u5ea6\uff0c\u53ea\u80fd\u8dd1\u6765\u8bf7\u6559\u4f60\u8fd9\u4e2a OI \u9ad8\u624b\u4e86\u3002\n\n------------\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u53ea\u6709\u4ece1\u5230n\u7684\u8def\u5f84\u9700\u8981\u7b49\u957f\u3002\u56e0\u6b64\u4e0d\u5728\u4ece1\u5230n\u8def\u5f84\u4e0a\u7684\u8fb9\u53ef\u4ee5\u5ffd\u7565\u3002\n\n**\uff081\uff09\u5229\u7528\u4e00\u4e2aDFS\u7b5b\u53bb\u4e0d\u5728\u8def\u5f84\u4e0a\u7684\u8fb9\u3002**\n\n\u73b0\u5728\u53ea\u5269\u4e0b\u5728\u8def\u5f84\u4e0a\u7684\u8fb9\u4e86\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\n\u73b0\u5728\u8003\u8651\u8ddd\u79bb\u7684\u9650\u5236\u3002\n\n\u9996\u5148\uff0c\u4ece\u70b9A\u5230\u70b9B\u7684\u6240\u6709\u8def\u7684\u8ddd\u79bb\u548c\u90fd\u5e94\u8be5\u662f\u76f8\u7b49\u7684\u3002\uff08\u4e3a\u4e86\u4fdd\u8bc1\u6700\u540e\u7684\u6bcf\u6761\u8def\u5f84\u90fd\u7b49\u957f\uff09\n\n\u5176\u6b21\uff0c\u4ece\u70b9A\u5230B\u7684\u8def\u5e94\u8be5\u5c3d\u91cf\u77ed\u3002\u5982\u4e0b\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/cymdw9hj.png)\n![](https://cdn.luogu.com.cn/upload/image_hosting/q3xb6r13.png)\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u4eceA\u5230B\u6765\u8bf4\uff0c\u53ef\u80fd\u4f1a\u6709\u5f88\u591a\u6761\u4e0d\u540c\u7684\u8def\uff0c\u800c\u5176\u4e2d\u7ecf\u8fc7\u70b9\u6700\u591a\u7684\u7684\u8def\u51b3\u5b9a\u4e86\u5b83\u6700\u77ed\u6709\u591a\u77ed\u3002\n\n\u5bf9\u4e8e\u8fd9\u6761\u8def\u5f84\uff0c\u6211\u4eec\u5c06\u5176\u4e0a\u7684\u6bcf\u6761\u8fb9\u90fd\u8bbe\u4e3a\u957f\u5ea6\u4e3a1\uff08\u7531\u4e8e\u5b83\u7ecf\u8fc7\u70b9\u6700\u591a\u8fd9\u4e0d\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\uff09\u3002\n\n\u600e\u4e48\u65b9\u4fbf\u7684\u627e\u5230\u5b83\u5462\uff1f\n\n\u628a\u56fe\u5206\u5c42\uff0c\u70b91\u5728\u7b2c\u4e00\u5c42\uff0c\u70b9n\u5728\u6700\u540e\u4e00\u5c42\u3002\uff08\u5c42\u6570\u4f4e\u7684\u70b9\u5411\u5c42\u6570\u9ad8\u7684\u70b9\u6709\u8fb9\uff09\n\n\u5229\u7528\u5c42\u6570\uff0c\u53ef\u4ee5\u5f88\u597d\u7684\u63a7\u5236\u8ddd\u79bb\u76f8\u7b49\u548c\u8ddd\u79bb\u6700\u77ed\u3002\n\n**\uff082\uff09\u628a\u56fe\u5206\u5c42\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5728\u7b2c\u51e0\u5c42\u3002**\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3oyp4cww.png)\n\n**\uff083\uff09\u5982\u679c\u6709\u4e00\u6761\u8fb9\u4eceA\u5230B\uff0c\u90a3\u4e48\u5b83\u7684\u957f\u5ea6\u4e3aB\u7684\u5c42\u6570\u51cf\u53bbA\u7684\u5c42\u6570\u3002**\n\n\u5f53\u7136\uff0c\u56fe\u53ef\u80fd\u6709\u73af\uff0c\u53ef\u80fd\u65e0\u6cd5\u5230\u8fben\u70b9\uff08\u6b64\u65f6\u65e0\u89e3\uff09\u3002\n\n\u5f53\u8fb9\u7684\u957f\u5ea6\u8d85\u51fa\u8303\u56f4\u65f6\u4e5f\u65e0\u89e3\u3002\n\n\u4ee3\u7801\uff08\u671f\u5f85\u5176\u4ed6dalao\u4f18\u5316\uff09\uff1a\n```\n#include<cstdio>//\u8f93\u5165\u8f93\u51fa \nusing namespace std;\nstruct edg\n{\n\tint fr,to,nex,w,v;//\u4ee3\u8868 \u8d77\u70b9 \u7ec8\u70b9 \u4e0b\u4e00\u6761\u8fb9\u7684\u4f4d\u7f6e \u957f\u5ea6 \u72b6\u6001\uff080\u4e3a\u672a\u904d\u5386\uff0c1\u4e3a\u57281\u5230n\u8def\u5f84\u4e0a\uff0c2\u4e3a\u4e0d\u5728\uff09 \n}e[2010];//\u524d\u5411\u661f \nint n,m,h[1001],cnt=1,in[1001],dis[1001];//\u70b9\u6570 \u8fb9\u6570 \u5b58\u50a8\u8d77\u70b9\uff08\u524d\u5411\u661f\u7528\uff09 \u5f53\u524d\u6700\u540e\u4f4d\u7f6e\uff08\u524d\u5411\u661f\u7528) \u5165\u5ea6 \u5c42\u6570  \nbool vis[2010];//\u662f\u5426\u904d\u5386\u8fc7\u6b64\u70b9 \nint q[1010];//\u961f\u5217 \nvoid build(int x,int y)\n{\n\te[cnt].fr=x;\n\te[cnt].to=y;\n\te[cnt].nex=h[x];\n\th[x]=cnt++;\n}//\u52a0\u8fb9 \nbool dfs(int x)\n{\n\tif (x==n)//\u5230\u8fben\uff0c\u8fd4\u56de\u53ef\u884c \n\treturn true;\n\tbool r=false;//\u8bb0\u5f55\u662f\u5426\u53ef\u884c \n\tfor (register int y=h[x];y;y=e[y].nex)\n\tif (!vis[e[y].to])\n\t{\n\t\tif (e[y].v)//\u5230\u8fc7 \n\t\t{\n\t\t\tif (e[y].v==1)//\u6210\u529f\u8fc7 \n\t\t\tr=true;\n\t\t\tcontinue;\n\t\t}\n\t\tvis[e[y].to]=true;\n\t\tif (dfs(e[y].to))\n\t\t{\n\t\t\tr=true;//\u6210\u529f\u4e86 \n\t\t\te[y].v=1;\n\t\t\tin[e[y].to]++;//\u589e\u52a0\u5165\u5ea6 \n\t\t}\n\t\telse\n\t\te[y].v=2;//\u5931\u8d25\u4e86 \n\t\tvis[e[y].to]=false;\n\t}\n\treturn r;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tint x,y;\n\twhile (m--)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tbuild(x,y);\n\t}\n\tvis[1]=true;\n\tdfs(1);//\u5148dfs \n\tint st=1,en=1;\n\tq[st]=1;\n\tdis[1]=1;//\u70b91\u7b2c\u4e00\u5c42\n\twhile (st<=en)//\u62d3\u6251\u6392\u5e8f\n\t{\n\t\tx=q[st];\n\t\tfor (y=h[x];y;y=e[y].nex)\n\t\tif (e[y].v==1)//\u53ea\u8003\u8651\u5728\u8def\u5f84\u4e0a\u7684\u8fb9 \n\t\t{\n\t\t\tin[e[y].to]--;\n\t\t\tif (in[e[y].to]==0)\n\t\t\t{\n\t\t\t\tq[++en]=e[y].to;\n\t\t\t\tdis[e[y].to]=dis[x]+1;//\u6b64\u70b9\u5728\u4e0b\u4e00\u5c42 \n\t\t\t}\n\t\t}\n\t\tst++;\n\t}\n\tif (!dis[n])//\u65e0\u6cd5\u8fbe\u5230\u70b9n\u800c\u65e0\u89e3 \n\t{\n\t\tprintf(\"-1\");\n\t\treturn 0;\n\t}\n\t\n\t\n\tfor (int i=en-1;i>0;--i)\n\t{\n\t\tx=q[i];\n\t\tfor (y=h[x];y;y=e[y].nex)\n\t\tif (e[y].v==1&&dis[e[y].to]-dis[x]>9)\n\t\tdis[x]=dis[e[y].to]-9;\n\t}\n\t/*\n\t\u88abHACK\u540e\u7684\u6539\u52a8\n\t\u5982\u679c\u6ca1\u6709\u8fd9\u6bb5\uff0c\u90a3\u4e48\u7531\u4e8e\u62d3\u6251\u6392\u5e8f\u4f1a\u5bfc\u81f4\u70b9\u805a\u96c6\u5728\u8f83\u4f4e\u7684\u5c42\u6570\n\t\u5982\n\t13 13\n\t1 2\n\t2 3\n\t3 4\n\t4 5\n\t5 6\n\t6 7\n\t7 8\n\t8 9\n\t9 10\n\t10 11\n\t11 13\n\t1 12\n\t12 13\n\t\u8fd9\u65f612\u53f7\u70b9\u4f1a\u6392\u5728\u7b2c\u4e8c\u5c42\uff0c\u800c\u5bfc\u81f4\u8ddf13\u53f7\u70b9\u7684\u8ddd\u79bb\u592a\u957f \n\t*/ \n\t\n\t\n\tfor (register int i=1;i<cnt;++i)\n\tif (e[i].v==1)//\u53ea\u8003\u8651\u5728\u8def\u5f84\u4e0a\u7684\u8fb9 \n\t{\n\t\te[i].w=dis[e[i].to]-dis[e[i].fr];\n\t\tif (e[i].w>9||e[i].w<1)//\u8d85\u8303\u56f4\u800c\u65e0\u89e3 \n\t\t{\n\t\t\tprintf(\"-1\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\telse\n\te[i].w=1;//\u4e0d\u5728\u8def\u5f84\u4e0a\u7684\u8fb9\u8bbe1\u5373\u53ef \n\tprintf(\"%d %d\\n\",n,cnt-1);\n\tfor (register int i=1;i<cnt;++i)\n\tprintf(\"%d %d %d\\n\",e[i].fr,e[i].to,e[i].w);\n\treturn 0;\n}\n```",
        "postTime": 1571069341,
        "uid": 162998,
        "name": "lsoer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5590 \u3010\u8d5b\u8f66\u6e38\u620f\u3011"
    },
    {
        "content": "# P5590 \u8d5b\u8f66\u6e38\u620f \u9898\u89e3 \n\n> ## \u672c\u6587\u540c\u6b65\u53d1\u5e03\u4e8e [$My Blog$](https://www.cnblogs.com/Ning-H/p/11668193.html)\n\n------------\n\n\u5199\u5728\u524d\u9762\n------------\n\n\n\u4f17\u6240\u5468\u77e5\u8fd9\u662f\u4e00\u7bc7\u9898\u89e3\uff0c\u5f53\u7136\u8fd9\u4e5f\u662f\u4e00\u7bc7\u7ecf\u9a8c\u7684\u603b\u7ed3\u3002\n\n\u5b83\u6e90\u81ea\u4e8e\u6d1b\u8c37\u6708\u8d5b\uff0c\u4f20\u9001\u95e8\uff1a[P5590 \u8d5b\u8f66\u6e38\u620f](https://www.luogu.org/problem/P5590?contestId=22026)\n\n\u7b14\u8005\u5199\u4e0b\u8fd9\u7bc7\u9898\u89e3\uff0c\u4e00\u662f\u5e0c\u671b\u81ea\u5df1\u8fd9\u6b21\u7684\u9519\u8bef\u4e0d\u8981\u518d\u72af\uff0c\u4e8c\u662f\u5e0c\u671b\u80fd\u5e2e\u52a9\u5927\u5bb6\u3002\n\n\n\n\u9898\u89e3\u90e8\u5206\n------------\n\n\n- ### \u9898\u9762\u7b80\u6790\n\n>\u9898\u610f\u5927\u81f4\u53ef\u4ee5\u6982\u62ec\u4e3a\uff1a\u7ed9\u4f60 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684 \u4e00\u5f20\u56fe\uff0c\u4f60\u9700\u8981\u7ed9\u6bcf\u6761\u8fb9\u52a0\u4e0a\u8fb9\u6743\uff0c\u4f7f\u5f97$1-n$\u7684\u6240\u6709\u8def\u5f84\u7684\u957f\u5ea6\u5747\u76f8\u7b49\u3002\n\n\u73b0\u5728\u611f\u89c9\u95ee\u9898\u7b80\u5355\u591a\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u66b4\u529b\u5730\u6dfb\u52a0\u8fb9\u6743\uff08\u53cd\u6b63\u8fb9\u6743\u4e5f\u53ea\u6709 $1 \\text{-} 9$\uff09\n\n- ### \u89e3\u9898\u601d\u8def\n\n\u5f88\u660e\u663e\u4e0a\u9762\u7684\u529e\u6cd5\u662f\u4e0d\u80fd\u62ff\u6ee1\u5206\u7684\u3002\u5e76\u4e14\u6211\u62ff\u5230\u672c\u9898\u5e76\u6ca1\u6709\u60f3\u8fc7\u8981\u6253\u66b4\u529b\u3002\n\n\u6211\u4eec\u5047\u8bbe\u8fd9\u5f20\u56fe\u5b58\u5728\u4e24\u4e2a\u9876\u70b9 $u,v$\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u8fb9\u6743\u4e3a $val(u,v)$\u3002\n\n\u90a3\u4e48\u5c31\u6709\uff1a$dis[u]+val(u,v)=dis[v]$ \uff08$dis$\u6570\u7ec4\u662f\u8282\u70b9$1$\u5230\u5176\u4ed6\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u6700\u503c\uff09\n\n\u81f3\u4e8e\u8fd9\u4e2a\u6700\u503c\u662f\u4ec0\u4e48\uff0c\u7a0d\u540e\u518d\u89e3\u7b54\u3002\n\n\u6211\u63d0\u51fa\u4e86\u4e0a\u9762\u90a3\u4e2a\u5f0f\u5b50\uff0c\u90a3\u4e48\u5f88\u660e\u663e\u6211\u4eec\u8981\u6c42\u7684\u662f $val(u,v)$\uff0c\u8fd9\u4e1c\u897f\u4e00\u5b9a\u6ee1\u8db3 $1\u2264val(u,v)\u22649$\n\n\u597d\u4e86\uff0c\u73b0\u5728\u53d8\u5f62\u4e00\u4e0b\u5f0f\u5b50\uff1a$1\u2264val(u,v)=dis[v]-dis[u]\u22649$\uff0c\u770b\u51fa\u6765\u4ec0\u4e48\u4e86\u5417\uff1f\n\n\u4f60\u4ed4\u7ec6\u770b\u770b\uff1a$1\u2264dis[v]-dis[u]\u22649$\uff0c\u5dee\u5206\u7ea6\u675f\uff1f\n\n\u6ca1\u9519\uff0c\u5c31\u662f\u5dee\u5206\u7ea6\u675f\uff0c\u7ea6\u675f\u6761\u4ef6\uff1a\n\n\n$$\\left\\{\\begin{aligned} dis[v]-dis[u]\u22651 \\\\dis[u]-dis[v]\u2265-9 \\\\\\end{aligned}\\right.$$\n\n\n\n\u6839\u636e\u5dee\u5206\u7ea6\u675f\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u4ece $u$ \u5411 $v$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff0c \u4ece $v$ \u5411 $u$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $-9$\u7684\u8fb9\u8dd1\u6700\u957f\u8def\u5373\u53ef\u3002\n\n\u5982\u679c $SPFA$ \u8dd1\u51fa\u6765\u7684\u662f\u8d1f\u73af\uff0c\u90a3\u4e48\u65e0\u89e3\uff0c\u5426\u5219\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6\u4e3a $dis[v]-dis[u]$\uff08\u73b0\u5728\u53ef\u89c1 $dis$ \u4ee3\u8868\u6700\u957f\u8def\u5f84\uff09\n\n## \u7ec6\u8282\u5b9e\u73b0\n\n\u9996\u5148\u4f60\u77e5\u9053\u77e5\u9053\u6211\u4eec\u53ea\u8981 $1~n$ \u7684\u8def\u5f84\uff0c\u6240\u4ee5\u6211\u4eec\u6b63\u53cd\u56fe\u5404\u8dd1\u4e00\u904d\uff0c\u628a\u90a3\u4e9b $1$ \u4e0d\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u548c $n$ \u4e0d\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u5254\u9664\u6389\uff0c\u5269\u4e0b\u7684\u8282\u70b9\u5c31\u662f\u6211\u4eec\u771f\u6b63\u8981\u8fdb\u884c\u7ea6\u675f\u7684\u8282\u70b9\uff0c\u800c\u90a3\u4e9b\u88ab\u5254\u9664\u6389\u7684\u8282\u70b9\u5bf9\u5e94\u7684\u8fb9\u53ef\u4ee5\u968f\u4fbf\u4e71\u8d4b\u503c\u7684\u5566\u2026\u2026\n\n\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u4e24\u904d $dfs$ \u6216\u8005 $bfs$ \u5b9e\u73b0\u3002\u4f46\u662f\u7531\u4e8e\u6211\u53ea\u5efa\u4e86\u4e00\u5f20\u56fe\uff0c\u6240\u4ee5\u6211\u91c7\u7528\u6b63\u53cd\u8fb9\u5f02\u6216\u540e\u7f16\u53f7\u76f8\u7b49\u7684\u539f\u5219\u3002\n\n\u8fd9\u6837\u6211\u53ea\u5199\u4e86\u4e00\u4e2a $dfs$ \u51fd\u6570\n\n```cpp\nvoid check(int x, bool *flag, int op) {\n\tif(flag[x]) return;\n\tflag[x] = 1;\n \tfor(int i = head[x]; i; i = Next[i]) {\n\t\tif(~i & op) continue;\n\t\tint y = ver[i];\n\t\tcheck(y, flag, op);\n\t}\n}\n```\n\n\u4f46\u662f $op$ \u53ea\u6709 $0$ \u548c $1$\uff0c\u4e0e\u4e0a $0$ \u2026\u2026\u5d29\u5d29\n\n\u6b63\u786e\u7684\u5199\u6cd5\uff1a\n\n```pp\nvoid check(int x, bool *flag, int op) {\n\tif(flag[x]) return;\n\tflag[x] = 1;\n \tfor(int i = head[x]; i; i = Next[i]) {\n\t\tif((i & 1) == op) continue;\n\t\tint y = ver[i];\n\t\tcheck(y, flag, op);\n\t}\n}\n```\n\n\u7136\u540e\u8981\u6ce8\u610f\u7279\u5224 $1$ \u4e0d\u80fd\u5230 $n$ \u7684\u60c5\u51b5\uff0c\u4e5f\u8981\u8f93\u51fa $-1$\u3002\n\n\u63a5\u4e0b\u6765\u770b\u4ee3\u7801\u7406\u89e3\u5427\n\n\n------------\n\n\n$Code:$\n------------\n\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\n\n/*\n\u7ea6\u675f\u6761\u4ef6\nd[a] + val<a,b> = d[b]\n1 <= d[b] - d[a] <= 9\n*/\n\nconst int N = 1e5 + 10, M = N << 2;\nint head[N], Next[M], ver[M];\nint edge[M], cnt = 1;\nstruct rec {\n\tint x, y;\n} e[M >> 1];\n\nvoid add(int x, int y, int v) {\n\tver[++cnt] = y, edge[cnt] = v;\n\tNext[cnt] = head[x], head[x] = cnt;\n}\n\nvoid Add(int x, int y) {\n\tadd(x, y, 0), add(y, x, 0);\n}\n\nbool v1[N], v2[N];\nvoid check(int x, bool *flag, int op) {\n\tif(flag[x]) return;\n\tflag[x] = 1;\n \tfor(int i = head[x]; i; i = Next[i]) {\n\t\tif((i & 1) == op) continue;\n\t\tint y = ver[i];\n\t\tcheck(y, flag, op);\n\t}\n}\n\nint dis[N], tot[N];\nbool v[N];\nvoid spfa(int n) {\n\tmemset(dis, ~0x7f, sizeof dis), dis[1] = 0;\n\tqueue<int> q;\n\tq.push(1), v[1] = 1;\n\n\twhile(q.size()) {\n\t\tint x = q.front();\n\t\tq.pop(), v[x] = 0;\n\n\t\tfor(int i = head[x]; i; i = Next[i]) {\n\t\t\tint y = ver[i], val = edge[i];\n\t\t\tif(dis[y] < dis[x] + val) {\n\t\t\t\tdis[y] = dis[x] + val;\n\t\t\t\tif(!v[y]) q.push(y), tot[y]++, v[y] = 1;\n\t\t\t\tif(tot[y] > n) puts(\"-1\"), exit(0);\n\t\t\t}\n\t\t}\n\t}\n\tif(dis[n] < 0) puts(\"-1\"), exit(0);\n}\n\nvoid clear() {\n\tmemset(head, 0, sizeof head);\n\tmemset(Next, 0, sizeof Next);\n\tmemset(ver, 0, sizeof ver);\n\tcnt = 0;\n}\n\nbool is[N];\nint main() {\n\tint n, m;\n\tscanf(\"%d %d\", &n, &m);\n\tfor(int i = 1; i <= m; i++) {\n\t\tscanf(\"%d %d\", &e[i].x, &e[i].y);\n\t\tAdd(e[i].x, e[i].y);\n\t}\n\tcheck(1, v1, 1), check(n, v2, 0);\n\tfor(int i = 1; i <= n; i++)\n\t\tif(v1[i] && v2[i]) is[i] = 1;\n\n\tis[1] = is[n] = 1;\n\tclear();\n\tfor(int i = 1; i <= m; i++) {\n\t\tif(is[e[i].x] && is[e[i].y]) {\n\t\t\tadd(e[i].x, e[i].y, 1);\n\t\t\tadd(e[i].y, e[i].x, -9);\n\t\t}\n\t}\n\tspfa(n);\n\tprintf(\"%d %d\\n\", n, m);\n\tfor(int i = 1; i <= m; i++) {\n\t\tprintf(\"%d %d \", e[i].x, e[i].y);\n\t\tif(is[e[i].x] && is[e[i].y])\n\t\t\tprintf(\"%d\\n\", dis[e[i].y] - dis[e[i].x]);\n\t\telse printf(\"1\\n\");\n\t}\n\treturn 0;\n}\n```\n\n\n$End$\n------------\n\n\n\u5f53\u65f6\u8003\u8bd5\u8111\u62bd\u6ca1\u5199\u51fa\u6765\uff0c\u7136\u540e\u56e0\u4e3a\u90a3\u4e2a $op$ \u6539\u4e86\u4e00\u4e2a\u4e0b\u5348\u2026\u2026\n\n\u8dea\u4e86 $Orz$\n\n\n",
        "postTime": 1570971161,
        "uid": 196649,
        "name": "xiejinhao",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P5590 \u3010\u8d5b\u8f66\u6e38\u620f\u3011"
    },
    {
        "content": "\u767d\u5929\u6bd4\u8d5b\u7684\u65f6\u5019\u57fa\u672c\u4e0a\u90fd\u5199\u51fa\u6765\u4e86\uff0c\u7ed3\u679c\u5224\u65e0\u7528\u8fb9\u7684\u65f6\u5019\u8111\u62bd\u4e86\u4e00\u4e0b\u6302\u4e86\n\n~~\u7136\u800c\u6211\u8fd8\u4ee5\u4e3a\u662f\u540e\u9762\u5199\u8dea\u4e86\u4e00\u76f4\u5728\u9b54\u8c03233~~\n\n\u9996\u5148\u770b\u5230\u8fd9\u9898\u6211\u4eec\u5148\u65e5\u5e38\u8003\u8651\u4e00\u4e9b\u7b80\u5355\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\uff1a\n\n\u82e5\u8d77\u70b9\u4e0d\u53ef\u8fbe\u7ec8\u70b9\u5219\u8f93\u51fa$-1$\uff08\u9898\u9762\u91cc\u4e4b\u524d\u6ca1\u52a0\u4e0a\uff0c\u53efTM\u5751\u6b7b\u4eba\u4e86\uff09\n\n\u82e5\u5b58\u5728\u4e00\u4e2a\u70b9\u65e0\u6cd5\u4ece\u8d77\u70b9\u5230\u8fbe**\u6216\u8005**\u662f\u65e0\u6cd5\u5230\u8fbe\u7ec8\u70b9\uff08\u6bd4\u8d5b\u7684\u65f6\u5019\u8111\u62bd\u5199\u6210**\u4e14**\u4e86233\uff09\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u65e0\u7528\u7684\uff0c\u53ef\u4ee5\u628a\u5b83\u5220\u6389\uff0c\u90a3\u4e48\u6240\u6709\u4e0e\u5b83\u76f8\u8fde\u7684\u8fb9\u90fd\u53ef\u4ee5\u968f\u4fbf\u8d4b\u503c\n\n\u7136\u540e\u8003\u8651\u5c06\u5269\u4e0b\u7684\u8fb9\u518d\u5efa\u6210\u56fe\uff0c\u90a3\u4e48\u6b64\u65f6\u51fa\u73b0\u73af\u7684\u8bdd\u73af\u4e0a\u4e00\u5b9a\u4e0d\u5408\u6cd5\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u5224\u6389\n\n\u90a3\u4e48\u6211\u4eec\u60ca\u559c\u5730\u53d1\u73b0\u73b0\u5728\u5269\u4e0b\u7684\u56fe\u5df2\u7ecf\u662f\u4e2a**DAG**\u4e86\uff0c\u5e76\u4e14\u4ece\u8d77\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u8def\u5f84\u957f\u5ea6\u90fd\u8981\u76f8\u540c\uff0c\u90a3\u6211\u4eec\u6309\u62d3\u6251\u5e8f\u9010\u6b65\u8f6c\u79fb\u5373\u53ef\u3002\u63a5\u4e0b\u6765\u6709\u4e24\u79cd\u505a\u6cd5\uff1a\n\n\u7b2c\u4e00\u79cd\u662f\u6211\u6bd4\u8d5b\u7684\u65f6\u5019\u5199\u7684\uff0c\u6bd4\u8f83\u8be1\u5f02\uff0c\u6b63\u786e\u6027\u611f\u89c9\u662f\u5bf9\u7684\u4f46\u662f\u53c8\u8bc1\u660e\u4e0d\u6765\n\n\u8003\u8651\u5148**\u62d3\u6251\u6392\u5e8f**\u4e00\u904d\uff0c\u6c42\u51fa\u5c06\u8fb9\u957f\u89c6\u4e3a$1$\u65f6\u4ece\u8d77\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u533a\u95f4\u8303\u56f4$[l_i,r_i]$\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5316\u8fb9\u6743\u4e3a\u70b9\u6743\uff0c\u628a\u6bcf\u4e2a\u70b9\u5230\u5b83\u7684\u8def\u5f84\u603b\u957f\u4f5c\u4e3a\u70b9\u6743$val_i$\uff0c\u90a3\u4e48\u663e\u7136\u6bcf\u4e2a$val_i$\u7684\u53d6\u503c\u8303\u56f4\u5c31\u662f$[r_i,9\\times l_i]$\n\n\u8003\u8651$1$\u53f7\u70b9\u7684\u70b9\u6743\u53ef\u4ee5\u5b9a\u4e0b\u4e3a$0$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u63a5\u4e0b\u6765\u7684\u6bcf\u4e2a\u70b9\uff0c\u5982\u679c\u5b83\u7684\u524d\u9a71\u70b9$j$\u7684\u70b9\u6743\u4e3a$val_j$\uff0c\u90a3\u4e48\u5b83\u7684\u53d6\u503c\u533a\u95f4\u5e94\u8be5\u5bf9$[val_j+1,val_j+9]$\u53d6\u4ea4\n\n\u90a3\u4e48\u6211\u4eec\u5f97\u51fa\u6bcf\u4e2a\u70b9\u7684\u53d6\u503c\u533a\u95f4\u540e\u76f4\u63a5\u5728\u91cc\u9762\u968f\u4fbf\u53d6\u4e00\u4e2a\u503c\u5373\u53ef\uff08\u987a\u624b\u53d6\u6700\u5c0f\u503c\uff09\uff0c\u540c\u65f6\u518d\u5224\u6389\u4e00\u4e9b\u65e0\u89e3\u7684\u60c5\u51b5\n\n\u4e4d\u4e00\u770b\u968f\u4fbf\u53d6\u53ef\u80fd\u4f1a\u9519\uff0c\u4f46\u662f\u8fd9\u91cc\u7684\u540e\u9762\u7684\u70b9\u6743\u8303\u56f4\u662f\u5728\u524d\u9762\u7684\u8def\u5f84\u60c5\u51b5\u4e0b\u8003\u8651\u8fc7\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#define RI register int\n#define CI const int&\nusing namespace std;\ntypedef vector <int>:: iterator VI;\nconst int N=2005,INF=1e9;\nstruct interval\n{\n\tint l,r;\n\tinline interval(CI L=-INF,CI R=INF)\n\t{\n\t\tl=L; r=R;\n\t}\n\tfriend inline interval operator & (const interval& A,const interval& B)\n\t{\n\t\treturn interval(max(A.l,B.l),min(A.r,B.r));\n\t}\n\tinline void operator &=(const interval& ots)\n\t{\n\t\t*this=*this&ots;\n\t}\n}v[N]; int n,m,x[N],y[N],z[N],q[N],val[N];\nbool f1[N],f2[N]; vector <int> pre[N];\nstruct Graph\n{\n\tstruct edge\n\t{\n\t\tint to,nxt;\n\t}e[N]; int head[N],cnt,deg[N];\n\tinline void clear(void)\n\t{\n\t\tmemset(head,0,n+1<<2); memset(deg,0,n+1<<2); cnt=0;\n\t}\n\tinline void addedge(CI x,CI y)\n\t{\n\t\te[++cnt]=(edge){y,head[x]}; head[x]=cnt; ++deg[y];\n\t}\n\t#define to e[i].to\n\tinline void BFS(CI st,bool *vis)\n\t{\n\t\tRI H=0,T=1; vis[q[1]=st]=1; while (H<T)\n\t\t{\n\t\t\tint now=q[++H]; for (RI i=head[now];i;i=e[i].nxt)\n\t\t\tif (!vis[to]) vis[to]=1,q[++T]=to;\n\t\t}\n\t}\n\tinline bool Top_Sort(void)\n\t{\n\t\tRI H=0,T=0,i; for (i=1;i<=n;++i) if (!deg[i]) q[++T]=i;\n\t\twhile (H<T)\n\t\t{\n\t\t\tint now=q[++H]; for (i=head[now];i;i=e[i].nxt)\n\t\t\tif (pre[to].push_back(now),!--deg[to]) q[++T]=to;\n\t\t}\n\t\treturn T==n;\n\t}\n\t#undef to\n}A,B;\nint main()\n{\n\t//freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n\tRI i,j; for (scanf(\"%d%d\",&n,&m),i=1;i<=m;++i)\n\tscanf(\"%d%d\",&x[i],&y[i]),A.addedge(x[i],y[i]),B.addedge(y[i],x[i]);\n\tfor (A.BFS(1,f1),B.BFS(n,f2),i=1;i<=m;++i) if (!f1[x[i]]||!f2[x[i]]) z[i]=1;\n\tif (!f1[n]) return puts(\"-1\"),0;\n\tfor (A.clear(),i=1;i<=m;++i) if (!z[i]) A.addedge(x[i],y[i]);\n\tif (!A.Top_Sort()) return puts(\"-1\"),0; for (v[1]=interval(0,0),i=2;i<=n;++i)\n\t{\n\t\tint mi=INF,mx=-INF; for (VI it=pre[q[i]].begin();it!=pre[q[i]].end();++it)\n\t\tmi=min(mi,v[*it].l+1),mx=max(mx,v[*it].r+1); v[q[i]]=interval(mi,mx);\n\t}\n\tfor (i=1;i<=n;++i) if (v[i]=interval(v[i].r,9*v[i].l),v[i].l>v[i].r)\n\treturn puts(\"-1\"),0; for (i=2;i<=n;++i)\n\t{\n\t\tinterval tp; for (VI it=pre[q[i]].begin();it!=pre[q[i]].end();++it)\n\t\ttp&=interval(val[*it]+1,val[*it]+9); v[q[i]]&=tp;\n\t\tif (v[q[i]].l>v[q[i]].r) return puts(\"-1\"),0; val[q[i]]=v[q[i]].l;\n\t}\n\tfor (i=1;i<=m;++i) if (!z[i]) z[i]=val[y[i]]-val[x[i]];\n\tfor (printf(\"%d %d\\n\",n,m),i=1;i<=m;++i) printf(\"%d %d %d\\n\",x[i],y[i],z[i]);\n\treturn 0;\n}\n```\n\n\u5f53\u7136\u8fd8\u6709\u53e6\u4e00\u79cd\u66f4\u7b80\u5355\u6b63\u786e\u6027\u4e5f\u6709\u4fdd\u8bc1\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u8003\u8651\u76f4\u63a5\u987a\u63a8\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u533a\u95f4\uff0c\u90a3\u4e48\u6b64\u65f6\u8fd9\u4e2a\u70b9\u7684\u53d6\u6cd5\u5c31\u4f1a\u5f71\u54cd\u5230\u540e\u9762\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5012\u7740\u518d\u505a\u4e00\u904d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6b63\u786e\u6027\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#define RI register int\n#define CI const int&\nusing namespace std;\ntypedef vector <int>:: iterator VI;\nconst int N=2005,INF=1e9;\nstruct interval\n{\n\tint l,r;\n\tinline interval(CI L=-INF,CI R=INF)\n\t{\n\t\tl=L; r=R;\n\t}\n\tfriend inline interval operator & (const interval& A,const interval& B)\n\t{\n\t\treturn interval(max(A.l,B.l),min(A.r,B.r));\n\t}\n\tinline void operator &=(const interval& ots)\n\t{\n\t\t*this=*this&ots;\n\t}\n}v[N]; int n,m,x[N],y[N],z[N],q[N],val[N];\nbool f1[N],f2[N]; vector <int> pre[N];\nstruct Graph\n{\n\tstruct edge\n\t{\n\t\tint to,nxt;\n\t}e[N]; int head[N],cnt,deg[N];\n\tinline void clear(void)\n\t{\n\t\tmemset(head,0,n+1<<2); memset(deg,0,n+1<<2); cnt=0;\n\t}\n\tinline void addedge(CI x,CI y)\n\t{\n\t\te[++cnt]=(edge){y,head[x]}; head[x]=cnt; ++deg[y];\n\t}\n\t#define to e[i].to\n\tinline void BFS(CI st,bool *vis)\n\t{\n\t\tRI H=0,T=1; vis[q[1]=st]=1; while (H<T)\n\t\t{\n\t\t\tint now=q[++H]; for (RI i=head[now];i;i=e[i].nxt)\n\t\t\tif (!vis[to]) vis[to]=1,q[++T]=to;\n\t\t}\n\t}\n\tinline bool Top_Sort(void)\n\t{\n\t\tRI H=0,T=0,i; for (i=1;i<=n;++i) if (!deg[i]) q[++T]=i;\n\t\twhile (H<T)\n\t\t{\n\t\t\tint now=q[++H]; for (i=head[now];i;i=e[i].nxt)\n\t\t\tif (pre[to].push_back(now),!--deg[to]) q[++T]=to;\n\t\t}\n\t\treturn T==n;\n\t}\n\t#undef to\n}A,B;\nint main()\n{\n\t//freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n\tRI i,j; for (scanf(\"%d%d\",&n,&m),i=1;i<=m;++i)\n\tscanf(\"%d%d\",&x[i],&y[i]),A.addedge(x[i],y[i]),B.addedge(y[i],x[i]);\n\tfor (A.BFS(1,f1),B.BFS(n,f2),i=1;i<=m;++i) if (!f1[x[i]]||!f2[x[i]]) z[i]=1;\n\tif (!f1[n]) return puts(\"-1\"),0;\n\tfor (A.clear(),i=1;i<=m;++i) if (!z[i]) A.addedge(x[i],y[i]);\n\tif (!A.Top_Sort()) return puts(\"-1\"),0; v[1]=interval(0,0);\n\tfor (i=2;i<=n;++i) for (VI it=pre[q[i]].begin();it!=pre[q[i]].end();++it)\n\tv[q[i]]&=interval(v[*it].l+1,v[*it].r+9);\n\tfor (i=n;i>1;--i) for (VI it=pre[q[i]].begin();it!=pre[q[i]].end();++it)\n\tv[*it]&=interval(v[q[i]].l-9,v[q[i]].r-1);\n\tfor (i=1;i<=n;++i) if (v[i].l>v[i].r) return puts(\"-1\"),0;\n\tfor (i=1;i<=m;++i) if (!z[i]) z[i]=v[y[i]].l-v[x[i]].l;\n\tfor (printf(\"%d %d\\n\",n,m),i=1;i<=m;++i) printf(\"%d %d %d\\n\",x[i],y[i],z[i]);\n\treturn 0;\n}\n```",
        "postTime": 1570971239,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5590 \u3010\u8d5b\u8f66\u6e38\u620f\u3011"
    },
    {
        "content": "[P5590 \u8d5b\u8f66\u6e38\u620f](https://www.luogu.com.cn/problem/P5590)\n\n## Problem\n\n\u7ed9\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u8bf7\u7ed9\u6bcf\u4e00\u6761\u8fb9\u8d4b\u4e0a\u8fb9\u6743$w\\in[1,9]$\u4f7f\u5f97\u6bcf\u4e00\u6761$1\\to n$\u7684\u8def\u5f84\u7684\u957f\u5ea6\u76f8\u7b49\u3002\n\n## Solution\n\n\u5148\u6765\u70b9\u524d\u7f6e\u77e5\u8bc6\uff1a\u5dee\u5206\u7ea6\u675f\u3002\n\n### \u7b80\u8ff0\n\n\u5c06\u5f88\u591a\u5bf9\u53d8\u91cf\u4e4b\u95f4\u7684\u5dee$\\le c$\u7684\u5173\u7cfb\u8f6c\u5316\u4e3a\u56fe\u8bba\uff0c\u518d\u7528\u56fe\u8bba\u7b97\u6cd5\u6765\u6c42\u89e3\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u7ec4\u7684\u89e3\u3002\n\n### \u6b65\u9aa4\n\n\u5bf9\u4e8e$x_j-x_i\\le k$\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5b83\u7c7b\u4f3c\u6700\u77ed\u8def\u7f51\u7edc\u4e2d\u7684\u4e09\u89d2\u4e0d\u7b49\u5f0f$d_v-d_u\\le w_{<u,v>}$.\u6211\u4eec\u5c06\u6bcf\u4e00\u4e2a\u53d8\u91cf\u770b\u4f5c\u4e00\u4e2a\u70b9\uff0c\u518d\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u539f\u70b9$x_0$\u5e76\u5411\u6bcf\u4e00\u4e2a\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a0\u7684\u6709\u5411\u8fb9\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e0d\u7b49\u5f0f$x-y\\le k\\to x\\le y+k$\uff0c\u6211\u4eec\u8fde\u4e00\u6761\u7531$y$\u6307\u5411$x$\uff0c\u6743\u503c\u4e3a$k$\u7684\u6709\u5411\u8fb9\uff0c\u7136\u540e\u8dd1\u6700\u77ed\u8def\u3002\n\n\u5728\u5efa\u56fe\u7684\u8fc7\u7a0b\u4e2d\u8981\u5148\u5173\u6ce8\u5177\u4f53\u95ee\u9898\uff0c\u82e5\u6c42\u7684\u662f**\u4e24\u4e2a\u53d8\u91cf\u5dee\u7684\u6700\u5927\u503c**\uff0c\u90a3\u4e48\u5c06\u6240\u6709\u4e0d\u7b49\u5f0f\u8f6c\u53d8\u6210\"**<=**\"\u7684\u5f62\u5f0f\u5e76\u4e14\u5728\u5efa\u56fe\u540e\u6c42**\u6700\u77ed\u8def**\uff0c\u53cd\u4e4b\u5728\u8f6c\u6362\u6210\"**>=**\"\u7684\u5f62\u5f0f\uff0c\u5e76\u4e14\u6c42**\u6700\u957f\u8def**\u3002\n\n\u53e6\u5916\uff0c\u5982\u679c\u6709\u8d1f\u73af\uff0c\u90a3\u4e48\u8be5\u4e0d\u7b49\u5f0f\u7ec4\u65e0\u89e3\u3002\u6211\u4eec\u53ea\u8981\u653e\u5fc3\u5927\u80c6\u7684\u8dd1SPFA\u5c31\u597d\u3002\u5982\u679c\u4e00\u4e2a\u70b9**\u5165\u961f\u6b21\u6570\u5927\u4e8e$n$**\uff0c\u8bf4\u660e\u5b58\u5728\u8d1f\u73af\u3002\n\n### Code\n\n\u89c1\u6a21\u677f\u9898\n\n---\n\n\u597d\u3002\u63a5\u4e0b\u6765\u56de\u5230\u8fd9\u9053\u9898\u3002\n\n\u7ed9\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u8bf7\u7ed9\u6bcf\u4e00\u6761\u8fb9\u8d4b\u4e0a\u8fb9\u6743$w\\in[1,9]$\u4f7f\u5f97\u6bcf\u4e00\u6761$1\\to n$\u7684\u8def\u5f84\u7684\u957f\u5ea6\u76f8\u7b49\u3002\n\n\u5982\u679c\u59cb\u7ec8\u60f3\u7684\u662f**\u5982\u4f55\u8ba9\u6240\u6709$1\\to n$\u7684\u8def\u5f84\u76f8\u7b49**\u90a3\u4e48\u5c31\u60f3\u9519\u65b9\u5411\u4e86\u3002\n\n\u5728\u4e00\u4e2a\u56fe\u4e2d\u8fdb\u884c\u6700\u77ed\u8def\u7684\u65f6\u5019\uff0c$dis_x+w_{x\\to v}=dis_v$\u8bf4\u660e$dis_v-dis_x=w_{x\\to v}\\in[1,9]$\uff0c\u8fd9\u6837\u6211\u4eec\u624d\u53ef\u4ee5\u7528\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u8fdb\u884c\u6c42\u89e3\u3002\n\n$1\\le dis_v-dis_x\\le9\\longrightarrow dis_v\\le dis_x+9\\bigvee dis_x\\le dis_v-1$\uff0c\u6240\u4ee5\u6211\u4eec\u8fde\u4e00\u6761$x\\to v$\u6743\u503c\u4e3a9\u7684\u8fb9\uff0c\u4e00\u6761$v\\to x$\u6743\u503c\u4e3a$-1$\u7684\u8fb9\u3002\n\n## Code\n\n```c++\n/**************************************************************\n * Problem: 5590\n * Author: Vanilla_chan\n * Date: 20210330\n * E-Mail: Vanilla_chan@outlook.com\n**************************************************************/\n//\u9884\u7f16\u8bd1\u90e8\u5206\u5df2\u7565\n#define N 2010\n#define M 8000\nint head[N],ver[M],nxt[M],w[M];\nint cnt;\nvoid insert(int x,int y,int z)\n{\n\tnxt[++cnt]=head[x];\n\thead[x]=cnt;\n\tver[cnt]=y;\n\tw[cnt]=z;\n}\nint f[N];\nint getf(int x)\n{\n\tif(f[x]==x) return x;\n\treturn f[x]=getf(f[x]);\n}\n\nvoid merge(int x,int y)\n{\n\tx=getf(x);\n\ty=getf(y);\n\tif(x==y) return;\n\tf[x]=y;\n}\n\n\nint n,m;\nvector<int>edge[N],redge[N];\nint u[N],v[N];\nint useful[N];\nbool book[N];\nvoid dfs(int x)\n{\n\tif(book[x]) return;\n\tbook[x]=1;\n\tuseful[x]++;\n\tfor(unsigned int i=0,v;i<edge[x].size();i++)\n\t{\n\t\tv=edge[x][i];\n\t\tdfs(v);\n\t}\n}\nvoid rdfs(int x)\n{\n\tif(book[x]) return;\n\tbook[x]=1;\n\tuseful[x]++;\n\tfor(unsigned int i=0,v;i<redge[x].size();i++)\n\t{\n\t\tv=redge[x][i];\n\t\trdfs(v);\n\t}\n}\nqueue<int>q;\nint dis[N];\nint tot[N];\nbool SPFA(int x)\n{\n\twhile(q.size()) q.pop();\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[x]=0;\n\tmemset(book,0,sizeof(book));\n\tbook[x]=1;\n\tq.push(x);\n\twhile(q.size())\n\t{\n\t\tx=q.front();\n\t\tq.pop();\n\t\tbook[x]=0;\n\t\tfor(int i=head[x],v;i;i=nxt[i])\n\t\t{\n\t\t\tv=ver[i];\n\t\t\tif(dis[v]>dis[x]+w[i])\n\t\t\t{\n\t\t\t\tdis[v]=dis[x]+w[i];\n\t\t\t\tif(!book[v])\n\t\t\t\t{\n\t\t\t\t\ttot[v]++;\n\t\t\t\t\tif(tot[v]>n) return 0;\n\t\t\t\t\tbook[v]=1;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\nint main()\n{\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tn=read();\n\tm=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tu[i]=read();\n\t\tv[i]=read();\n\t\tedge[u[i]].push_back(v[i]);\n\t\tredge[v[i]].push_back(u[i]);\n\t\tmerge(u[i],v[i]);\n\t}\n\tif(getf(1)!=getf(n))\n\t{\n\t\tcout<<\"-1\"<<endl;\n\t\treturn 0;\n\t}\n\tfor(int i=1;i<=n;i++) useful[i]=-1;\n\tdfs(1);\n\tmemset(book,0,sizeof(book));\n\trdfs(n);\n\tmemset(book,0,sizeof(book));\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(useful[i]!=1) useful[i]=0;\n\t}\n\tif(useful[1]==0||useful[n]==0)\n\t{\n\t\tcout<<\"-1\"<<endl;\n\t\treturn 0;\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(useful[u[i]]&&useful[v[i]])\n\t\t{\n\t\t\tinsert(u[i],v[i],9);\n\t\t\tinsert(v[i],u[i],-1);\n\t\t}\n\t}\n\tif(SPFA(1)==0)\n\t{\n\t\tcout<<\"-1\"<<endl;\n\t\treturn 0;\n\t}\n\tcout<<n<<\" \"<<m<<endl;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcout<<u[i]<<\" \"<<v[i]<<\" \";\n\t\tif(useful[u[i]]&&useful[v[i]])\n\t\t{\n\t\t\tcout<<dis[v[i]]-dis[u[i]];\n\t\t}\n\t\telse cout<<rand()%9+1;\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1617152782,
        "uid": 188769,
        "name": "Vanilla_chan",
        "ccfLevel": 6,
        "title": "\u6d1b\u8c37 P5590 \u8d5b\u8f66\u6e38\u620f"
    },
    {
        "content": "\u8fd9\u9053\u9898\u521a\u5f00\u59cb\u770b\u611f\u89c9\u600e\u4e48\u770b\u90fd\u4e0d\u50cf\u662f\u5dee\u5206\u7ea6\u675f\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u6211\u4eec\u5927\u6982\u5206\u51e0\u6b65\u505a\u3002\n\n\u9996\u5148\u6211\u4eec\u5224\u65ad\u4e00\u4e0b1\u4e0d\u80fd\u5230\u8fben\u7684\u60c5\u51b5\uff0c\u663e\u7136\u8f93\u51fa-1\n\n\u7d27\u63a5\u7740\u6211\u4eec\u9700\u8981\u5224\u65ad\u7684\u662f\u4e00\u6761\u8fb9\u662f\u4e0d\u662f\u57281-n\u7684\u8def\u5f84\u4e0a\u51fa\u73b0\u8fc7\uff0c\u8fd9\u4e2a\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7\u6b63\u53cd\u5411dfs\u4ee5\u540e\u5224\u65ad\u8fd9\u6761\u8fb9\u7684\u4e24\u6761\u7aef\u70b9\u662f\u5426\u80fd\u591f\u7ecf\u8fc7\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u53d1\u73b0\u6c42\u51fa\u5fc5\u8981\u7684\u8fb9\u4ee5\u540e\u5c31\u53ef\u4ee5\u5dee\u5206\u7ea6\u675f\uff0c\u6211\u4eec\u8003\u8651\u5bf9\u4e8edis\u8fd9\u4e2a\u6761\u4ef6\u5dee\u5206\u7ea6\u675f\uff0c\u7136\u540e\u6211\u4eec\u8003\u8651\u7684\u5c31\u662fdis[v]-dis[u]\u7684\u5173\u7cfb\uff0c\u5fc5\u987b\u662f\u57281~9\u7684\uff0c\u8fd9\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u5dee\u5206\u7ea6\u675f\u4e86\u3002\n\n\u7136\u540e\u5dee\u5206\u7ea6\u675f\u5b8c\u6bd5\u4ee5\u540e\uff0c\u5982\u679c\u6709\u8d1f\u73af\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u5224\u5b9a\u65e0\u89e3\u5373\u53ef\uff0c\u53cd\u4e4b\u6211\u4eec\u76f4\u63a5\u8f93\u51fadis[v]-dis[u]\u5373\u53ef\u3002\n\n\u8fd9\u4e2a\u601d\u8def\u6bd4\u8f83\u5de7\u5999\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5dee\u5206\u7ea6\u675f\u89e3\u51b3\u4e00\u7c7b\u770b\u4f3c\u4e0d\u662f\u5dee\u5206\u7ea6\u675f\u7684\u6807\u53f7\u95ee\u9898\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u6211\u4eec\u5148\u4e24\u8fb9dfs\uff0c\u7136\u540e\u5224\u65ad\u4e00\u4e0b1-n\u4e0d\u80fd\u8054\u901a\u7684\u60c5\u51b5\uff0c\u7136\u540e\u63a5\u7740\u6211\u4eec\u8bb2\u7684\u505a\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\n#define pb push_back\nusing namespace std;\nconst int N=1e3+5,M=2e3+5;\nstruct Graph{int u,v;}g[M];\nstruct Edge{int to,w,nxt;}e[M<<1];\nint n,m,fst[N],tote,dis[N];bool vis[N],rvis[N];\nvector<int>adj[N],radj[N];\nvoid dfs(int u){vis[u]=true;for(auto v:adj[u])if(!vis[v])dfs(v);}\nvoid rdfs(int u){rvis[u]=true;for(auto v:radj[u])if(!rvis[v])rdfs(v);}\nvoid adde(int u,int v,int w){e[++tote]=(Edge){v,w,fst[u]};fst[u]=tote;}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,u,v;i<=m;i++)scanf(\"%d%d\",&u,&v),adj[u].pb(v),radj[v].pb(u),g[i]=(Graph){u,v};\n\tdfs(1);rdfs(n);\n\tif(!vis[n]){puts(\"-1\");return 0;}\n\tfor(int i=1,u,v;i<=m;i++){\n\t\tu=g[i].u;v=g[i].v;\n\t\tif(vis[u]&&rvis[v])adde(u,v,9),adde(v,u,-1);\n\t}\n\tfor(int t=1;t<=n;t++)for(int u=1;u<=n;u++)for(int i=fst[u],v;i;i=e[i].nxt)dis[e[i].to]=min(dis[e[i].to],dis[u]+e[i].w);\n\tfor(int u=1;u<=n;u++)for(int i=fst[u],v;i;i=e[i].nxt)if(dis[e[i].to]>dis[u]+e[i].w){puts(\"-1\");return 0;}\n\tprintf(\"%d %d\\n\",n,m);\n\tfor(int i=1,u,v;i<=m;i++){\n\t\tu=g[i].u;v=g[i].v;\n\t\tif(vis[u]&&rvis[v])printf(\"%d %d %d\\n\",u,v,dis[v]-dis[u]);else printf(\"%d %d 1\\n\",u,v);\n\t} \n\treturn 0;\n}\n\n```\n",
        "postTime": 1601953254,
        "uid": 203968,
        "name": "ConorGallagher23",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5590 \u3010\u8d5b\u8f66\u6e38\u620f\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u88ab $1\\rightarrow n$ \u7684\u8def\u5f84\u7ecf\u8fc7\u7684\u8fb9\uff0c\u6211\u4eec\u8981\u5b89\u6392\u5b83\u7684\u8fb9\u6743\uff0c\u663e\u7136 $1\\le dis_v-dis_u\\le 9$\n\n\u5efa\u7acb\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\uff0c\u4ece $u$ \u5411 $v$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $9$ \u7684\u8fb9\uff0c\u4ece $v$ \u5411 $u$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $-1$ \u7684\u8fb9\uff0c\u8dd1\u6700\u77ed\u8def\uff0c\u8868\u793a $dis_v\\le dis_u+9,dis_u\\le dis_v-1$\n\n\u65e0\u89e3\u7684\u60c5\u51b5\u6709\u4e24\u79cd\uff1a\u4e0d\u8fde\u901a\u548c\u5dee\u5206\u7ea6\u675f\u51fa\u73b0\u8d1f\u73af\n\n```cpp\nconst int N = 1010,M = 200010;\nint n,m,x[M],y[M];\nstruct Dc\n{\n\tEE(1);int dis[N],cnt[N];bool vis[N];\n\tqueue<int> q;\n\tbool SPFA()\n\t{\n\t\tmemset(dis,63,sizeof(dis));\n\t\tq.push(0),dis[0] = 0,vis[0] = 1;\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint u = q.front();q.pop();vis[u] = 0;\n\t\t\tfor(int i = head[u];i;i = e[i].nxt)\n\t\t\t{\n\t\t\t\tint v = e[i].to;\n\t\t\t\tif(dis[v] > dis[u] + e[i].w)\n\t\t\t\t{\n\t\t\t\t\tdis[v] = dis[u] + e[i].w;\n\t\t\t\t\tcnt[v] = cnt[u] + 1;\n\t\t\t\t\tif(cnt[v] > n) return 0;\n\t\t\t\t\tif(!vis[v]) q.push(v),vis[v] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 1;\n\t}\n}D;\nstruct Graph\n{\n\tEE(1);bool book[N],vis[N];\n\tbool dfs(int u)\n\t{\n\t\tif(u == n || book[u]) return 1;\n\t\tbool fl = 0;vis[u] = 1;\n\t\tfor(int i = head[u],v;i;i = e[i].nxt) if(!vis[v = e[i].to])\n\t\t\tif(dfs(v)) D.add(u,v,9),D.add(v,u,-1),fl = 1;\n\t\tvis[u] = 0;\n\t\treturn book[u] = fl;\n\t}\n}G;\nint main()\n{\n\tfreopen(\"random.in\",\"r\",stdin);\n\tfreopen(\"sol.out\",\"w\",stdout);\n\tn = read(),m = read();\n\tfor(int i = 1;i <= m;i++) { x[i] = read(),y[i] = read();G.add(x[i],y[i]); }\n\tfor(int i= 1;i <= n;i++) D.add(0,i,0);\n\tif(!G.dfs(1) || !D.SPFA()) { puts(\"-1\");return 0; }\n\tpprint(n),fprint(m);\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\tpprint(x[i]),pprint(y[i]);\n\t\tint res = abs(D.dis[x[i]] - D.dis[y[i]]);\n\t\tif(res > 0 && res < 10) fprint(res);\n\t\telse puts(\"1\");\n\t}\n\treturn 0;\n```",
        "postTime": 1593323029,
        "uid": 53994,
        "name": "81179332_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5590 \u3010\u8d5b\u8f66\u6e38\u620f\u3011"
    },
    {
        "content": "\u672c\u9898\u82df\u5f31\u7528Java AC \u867d\u7136\u601d\u8def\u53ef\u80fd\u8ddfc++\u7c7b\u4f3c\uff0c\u4f46\u662f\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u8fd8\u662f\u6709\u4e00\u5b9a\u7684\u5dee\u5f02\uff01\n**\u9898\u76ee\u5206\u6790\uff1a** \u672c\u9898\u4e3b\u8981\u5206\u4e09\u6b65\uff0c\u5b58\u56fe\uff0c\u904d\u53861-n\u5fc5\u7ecf\u7684\u8282\u70b9\uff0c\u8dd1SPFA\u3002\n\n\u9700\u8981\u77e5\u9053\u7684\u51e0\u4e2a\u540d\u8bcd:\n\n**\u5dee\u5206\u7ea6\u675f**\uff1a\u4e0d\u7b49\u5f0f\u4e4b\u95f4\u7684\u8f6c\u6362\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u8f6c\u5316\uff0c\u628a\u67d0\u4e9b\u95ee\u9898\u8f6c\u5316\u6210\u6700\u77ed\u8def\u95ee\u9898\u6765\u8fdb\u884c\u6c42\u89e3\n\n**SPFA**\uff1a\u8ba1\u7b97\u67d0\u4e2a\u70b9\u5230\u6240\u6709\u8282\u70b9\u6700\u77ed\u8def\u7684\u7b97\u6cd5\n\n**\u677e\u5f1b\u64cd\u4f5c**: \u4e00\u4e2a\u503c\u5148\u5728\u4e0a\u754c\uff0c\u5f53\u5b58\u5728\u6bd4\u8fd9\u4e2a\u503c\u5c0f\u7684\u503c\u65f6\uff0c\u66f4\u65b0\u8fd9\u4e2a\u503c\uff0c\u8fd9\u6b21\u64cd\u4f5c\u5c31\u7b97\u4e00\u6b21\u677e\u5f1b\u64cd\u4f5c\n\n\uff08\u753b\u56fe\u753b\u7684\u5947\u4e11\u65e0\u6bd4\u8bf7\u89c1\u8c05\uff09\n![\u5dee\u5206\u7ea6\u675f](https://cdn.luogu.com.cn/upload/image_hosting/2vmbbfxw.png)\n![\u8dd1\u4e24\u8fb9dfs\u7684\u6548\u679c](https://cdn.luogu.com.cn/upload/image_hosting/x3yfxm6g.png)\n\n```java\nimport java.io.*;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Queue;\n\npublic class Main {\n    public static int n,m;\n    public static Roads[] roads1;\n    public static Roads[] roads2;\n    public static Roads[] roads;\n    //\u5224\u65ad\u662f\u5426\u4e24\u6b21\u90fd\u904d\u5386\u5230\n    public static int[] signed;\n    public static int[] f,t;\n    public static int[] nums;\n    //\u5bfb\u627e1-n\u7684\u5fc5\u7ecf\u4e4b\u8def\n    public static void dfs1(int x){\n        for (int i = 0; i < roads1[x].others.size(); i++) {\n            int to = roads1[x].others.get(i)[0];\n            if (roads1[to].ifUse) {\n                continue;\n            }\n            roads1[to].ifUse = true;\n            dfs1(to);\n        }\n    }\n    //\u5bfb\u627e\u4ecen-1\u7684\u5fc5\u7ecf\u4e4b\u8def\n    public static void dfs2(int x){\n        for (int i = 0; i < roads2[x].others.size(); i++) {\n            int to = roads2[x].others.get(i)[0];\n            if (roads2[to].ifUse) {\n                continue;\n            }\n            roads2[to].ifUse = true;\n            dfs2(to);\n        }\n    }\n\n    public static boolean spfa(){\n        Queue<Integer> queue = new ArrayDeque<>();\n        roads[1].dis = 0;\n        roads[1].ifUse = true;\n        queue.offer(1);\n        while (!queue.isEmpty()) {\n            int now = queue.poll();\n            roads[now].ifUse = false;\n            nums[now]++;\n            for (int i = 0; i < roads[now].others.size(); i++) {\n                int v = roads[now].others.get(i)[0];\n                int d = roads[now].others.get(i)[1];\n                if (roads[v].dis > roads[now].dis + d) {\n                    roads[v].dis = roads[now].dis+d;\n                    if (nums[v] > n) {\n                        return false;\n                    }\n                    if (roads[v].ifUse) {\n                        continue;\n                    }\n                    roads[v].ifUse = true;\n                    queue.offer(v);\n                }\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) throws IOException {\n        StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n\n        ok:\n        while (in.nextToken() != StreamTokenizer.TT_EOF) {\n            n = (int)in.nval;\n            in.nextToken();\n            m = (int)in.nval;\n            roads1 = new Roads[10010];\n            roads2 = new Roads[10010];\n            roads = new Roads[10010];\n            f = new int[10010];\n            t = new int[10010];\n            nums = new int[10010];\n            signed = new int[10010];\n            for (int i = 0; i < roads2.length; i++) {\n                roads1[i] = new Roads(i);\n                roads2[i] = new Roads(i);\n                roads[i] = new Roads(i);\n            }\n            for (int i = 1; i <= m; i++) {\n                in.nextToken();\n                int from = (int)in.nval;\n                in.nextToken();\n                int to = (int)in.nval;\n                f[i] = from;\n                t[i] = to;\n                int[] tmp1 = new int[2];\n                int[] tmp2 = new int[2];\n                tmp1[0] = to;\n                tmp1[1] = 1;\n                tmp2[0] = from;\n                tmp2[1] = 1;\n                roads1[from].others.add(tmp1);\n                roads2[to].others.add(tmp2);\n            }\n            dfs1(1);\n            dfs2(n);\n            //\u627e\u5230\u5fc5\u7ecf\u4e4b\u8def\n            for (int i = 1; i <= n; i++) {\n                if (roads1[i].ifUse && roads2[i].ifUse) {\n                    signed[i] = 1;\n                }\n            }\n            //n\u70b9\u5230\u4e0d\u4e86,\u66f4\u4e0d\u7528\u8bf4\u4ece1-n\u4e86\n            if (!roads1[n].ifUse) {\n                out.println(-1);\n                out.flush();\n                continue ok;\n            }\n            //\u56e0\u4e3a\u904d\u5386\u4e0d\u52301\u548cn\uff0c\u5f3a\u884c\u52a0\u4e0a1\u548cn\n            signed[1] = 1;\n            signed[n] = 1;\n\n            //\u5efa\u56fe\n            for (int i = 1; i <= m; i++) {\n                int from = f[i];\n                int to = t[i];\n                //\u90fd\u662f\u5fc5\u7ecf\u4e4b\u8def\n                if (signed[from] == 1 && signed[to] == 1) {\n                    int[] tmp1 = new int[2];\n                    int[] tmp2 = new int[2];\n                    tmp1[0] = to;\n                    tmp1[1] = -1;\n                    tmp2[0] = from;\n                    tmp2[1] = 9;\n                    roads[from].others.add(tmp1);\n                    roads[to].others.add(tmp2);\n                }\n            }\n            if (!spfa()) {\n                out.println(-1);\n                out.flush();\n                continue ok;\n            }\n            out.println(n+\" \"+m);\n            for (int i = 1; i <= m; i++) {\n                out.print(f[i]+\" \"+t[i]+\" \");\n                if (signed[f[i]] == 1 && signed[t[i]] == 1) {\n                    out.print(roads[t[i]].dis*(-1)-roads[f[i]].dis*(-1));\n                }else {\n                    out.println(1);\n                }\n                out.println();\n            }\n            out.flush();\n        }\n    }\n}\nclass Roads{\n    //\u70b9\u5e8f\u53f7\n    int index;\n    //\u662f\u5426\u5728\u961f\u5217\u4e2d\n    boolean ifUse;\n    //\u5b58\u50a8\u522b\u7684\u70b9\n    List<int[]> others;\n    //\u5b58\u50a8\u5230\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\n    int dis;\n\n    public Roads(int index) {\n        this.index = index;\n        ifUse = false;\n        others = new ArrayList<>();\n        dis = 9999999;\n    }\n}\n\n```\n**\u9898\u89e3\u53c8\u4e0d\u597d\u7684\u5730\u65b9\u6b22\u8fce\u5404\u4f4d\u5927\u4f6c\u6307\u51fa\uff0c\u6211\u79ef\u6781\u4fee\u6b63**",
        "postTime": 1584689380,
        "uid": 244255,
        "name": "Luarence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5590 \u3010\u8d5b\u8f66\u6e38\u620f\u3011"
    },
    {
        "content": "~~\u679c\u7136\u6211\u8fd8\u662f\u592a$Naive$\u4e86~~\n\n\u9996\u5148\u6709\u4e00\u4e9b\u70b9/\u8fb9\u5176\u5b9e\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u5982\u679c\u4ece1\u51fa\u53d1\u4e0d\u80fd\u5230\u8be5\u70b9\u6216\u8005\u4ece\u8be5\u70b9\u4e0d\u80fd\u5230n\uff0c\u8fd9\u4e2a\u70b9\u5c31\u53ef\u4ee5\u4e0d\u7528\u7ba1\u4e86\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u6b63\u53cd\u4e24\u8fb9$dfs/bfs$\u5b9e\u73b0\n\n\u7136\u540e\u5220\u6389\u90a3\u4e9b\u70b9\u4e4b\u540e\uff0c\u65b0\u56fe\u4e2d\u5982\u679c\u51fa\u73b0\u4e86\u73af\uff0c\u90a3\u4e48\u663e\u7136\u662f\u65e0\u89e3\u7684\n\n\u7136\u540e\u73b0\u5728\u56fe\u5c31\u8f6c\u5316\u6210\u4e86\u4e00\u5f20$DAG$\n\n\u7531\u4e8e$1->n$\u7684\u6240\u6709\u8def\u5f84\u662f\u5b9a\u503c\uff0c\u90a3\u4e48$1->$\u65b0\u56fe\u4e2d\u6240\u6709\u70b9\u7684\u8def\u5f84\u90fd\u5e94\u8be5\u662f\u4e00\u4e2a\u5b9a\u503c\uff08\u53cd\u8bc1\u4e00\u4e0b\u5c31\u77e5\u9053\u4e86\uff09\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9$u->v$\uff0c\u5b9e\u9645\u4e0a\u662f\u8981\u6ee1\u8db3$1\u2264dis_v - dis_u \u2264 9$\uff0c\u4e0d\u96be\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a**\u5dee\u5206\u7ea6\u675f**\u6a21\u578b\n\n\u79fb\u4e00\u4e0b\u9879\uff0c\u6211\u4eec\u6709\uff1a$dis_u+1\u2264dis_v$\uff0c$dis_v-9\u2264dis_u$\n\n\u4e8e\u662f\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9$(u, v)$\uff0c\u6211\u4eec\u8fde\u4e00\u6761$(u, v, 1)$\u548c\u4e00\u6761$(u, v, -9)$\u5373\u53ef\n\n## $Code:$\n~~\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u53ea\u670930\uff0c\u5148\u5495\u4e00\u4f1a\uff0c\u8c03\u51fa\u6765\u518d\u653e~~\n\n~~\u597d\u4e86\u8c03\u51fa\u6765\u4e86\uff0c\u4e0d\u8fde\u901a\u7684\u90a3\u4e9b\u8fb9\u7684\u7ec8\u70b9\u8d77\u70b9\u5fd8\u8bb0\u8f93\u51fa\u4e86~~\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define re register\nil int read() {\n    re int x = 0, f = 1; re char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n#define rep(i, s, t) for(re int i = s; i <= t; ++ i)\n#define _ 20005\nint n, m, head1[_], cnt, head2[_], head3[_], vis[_], dis[_], num[_], pax[_], v1[_], v2[_];\nstruct edge {\n\tint u, v, w, next;\n}e1[_], e2[_], e3[_ << 1];\nil void add1(int u, int v) {\n\te1[++ cnt] = (edge){u, v, 0, head1[u]}, head1[u] = cnt;\n\te2[cnt] = (edge){v, u, 0, head2[v]}, head2[v] = cnt;\n}\nil void add2(int u, int v) {\n\te3[++ cnt] = (edge){u, v, 1, head3[u]}, head3[u] = cnt;\n\te3[++ cnt] = (edge){v, u, -9, head3[v]}, head3[v] = cnt;\n}\nil void dfs1(int u) {\n\tv1[u] = 1;\n\tfor(re int i = head1[u]; i; i = e1[i].next) if(!v1[e1[i].v]) dfs1(e1[i].v);\n}\nil void dfs2(int u) {\n\tv2[u] = 1;\n\tfor(re int i = head2[u]; i; i = e2[i].next) if(!v2[e2[i].v]) dfs2(e2[i].v);\n}\nqueue<int>q;\nil void SPFA() {\n\tmemset(dis, -64, sizeof(dis)), q.push(1), dis[1] = 0;\n\twhile(!q.empty()) {\n\t\tint u = q.front(); q.pop(), vis[u] = 0;\n\t\tfor(re int i = head3[u]; i; i = e3[i].next) {\n\t\t\tint v = e3[i].v;\n\t\t\tif(dis[v] < dis[u] + e3[i].w) {\n\t\t\t\tdis[v] = dis[u] + e3[i].w;\n\t\t\t\tif(!vis[v]) q.push(v), vis[v] = 1, ++ num[v];\n\t\t\t\tif(num[v] > n) puts(\"-1\"), exit(0);\n\t\t\t}\n\t\t}\n\t}\n}\nint main() {\n\tn = read(), m = read();\n\trep(i, 1, m) {\n\t\tint u = read(), v = read();\n\t\tadd1(u, v);\n\t}\n\tdfs1(1), dfs2(n), cnt = 0;\n\tif(!v1[n]) return puts(\"-1\"), 0;\n\trep(i, 1, n) if(v1[i] && v2[i]) pax[i] = 1;\n\trep(i, 1, m) if(pax[e1[i].u] && pax[e1[i].v]) add2(e1[i].u, e1[i].v);\n\tSPFA(), printf(\"%d %d\\n\", n, m);\n\trep(i, 1, m) {\n\t\tif(pax[e1[i].u] && pax[e1[i].v]) {\n\t\t\tprintf(\"%d %d %d\\n\", e1[i].u, e1[i].v, dis[e1[i].v] - dis[e1[i].u]);\n\t\t}\n\t\telse printf(\"%d %d %d\\n\", e1[i].u, e1[i].v, 9);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1570980661,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5590 \u3010\u8d5b\u8f66\u6e38\u620f\u3011"
    },
    {
        "content": "\u6708\u8d5b\u65f6\u4e00\u76f4\u6253 T4 \u7684 80pts\uff0c\u7ed3\u679c\u6570\u636e\u51fa\u9505\u4e86\u4e00\u76f4\u53ea\u80fd\u62ff 70pts\uff0c\u6d6a\u8d39\u4e86 1h\uff0c\u5bfc\u81f4\u6700\u540e\u6ca1 rush \u51fa\u8fd9\u9898\u3002~~\u4e0d\u7136\u5c31\u6709\u672c\u5b50\u62ff\u4e86\u3002~~\n\nR.I.P.\n\n---\n\u6839\u636e\u76f4\u89c9\uff0c\u8fd9\u79cd\u9898\u5728 DFS \u6811\u4e0a\u4f1a\u597d\u505a\u5f88\u591a\u3002\n\n\u5148\u8dd1\u4e2a\u4ee5 $1$ \u4e3a\u6839\u7684 DFS \u6811\u3002\u90a3\u4e48\u8d70\u4e86\u6811\u4e0a\u7684\u8fd4\u7956\u8fb9\u80af\u5b9a\u5c31\u4e0d\u662f\u7b80\u5355\u8def\u5f84\u3002\u8fd9\u4e9b\u8fd4\u7956\u8fb9\u968f\u4fbf\u8d4b\u503c\u90fd\u884c\u3002\n\n\u6ce8\u610f\u7684\u662f\u56fe\u53ef\u80fd\u4e0d\u8fde\u901a\uff0c\u6240\u4ee5\u5982\u679c $n$ \u6ca1\u6709\u5728\u8fd9\u6b21 DFS \u4e2d\u904d\u5386\u5230\uff0c\u5148\u5224\u65e0\u89e3\u3002\n\n\u53d1\u73b0\u4ece\u70b9 $1$ \u5230\u70b9 $i$ \u7684\u53ef\u80fd\u8ddd\u79bb\u80af\u5b9a\u662f\u8fde\u7eed\u7684\u4e00\u4e9b\u6570\uff08\u8bb0\u4f5c $[l_i,r_i]$\uff09\u3002\u521d\u59cb\u6709 $l_1=r_1=0$\u3002\n\n\u7136\u540e\u56e0\u4e3a\u6211\u4eec\u628a\u8fd4\u7956\u8fb9\u5168\u90fd\u53bb\u6389\u4e86\uff0c\u5c31\u65e0\u73af\u4e86\uff0c\u5c31\u53ef\u4ee5\u62d3\u6251\u6392\u5e8f\u4e86\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $v$\uff0c\u5b83\u7684\u533a\u95f4\u5e94\u8be5\u662f\u6240\u6709\u6709\u8fb9\u8fde\u5411 $v$ \u7684\u70b9 $u$ \u7684 $[l_u+1,r_u+9]$ \u7684\u4ea4\u96c6\u3002\n\n\u5982\u679c\u6709\u4e00\u4e2a\u70b9\u7684 $l_i>r_i$\uff0c\u660e\u663e\u65e0\u89e3\u3002\u5426\u5219\u53ef\u4ee5\u4ece $n$ \u5012\u63a8\u3002\u5012\u63a8\u65b9\u6cd5\u4e5f\u5dee\u4e0d\u591a\uff0c\u8bbe $ans_i$ \u8868\u793a\u70b9 $1$ \u5230\u70b9 $i$ \u7684\u5b9e\u9645\u8ddd\u79bb\u3002\u5bb9\u6613\u53d1\u73b0\u51fa\u5ea6\u4e3a $0$ \u7684\u70b9\u53ef\u4ee5\u5728 $[l_i,r_i]$ \u4e2d\u968f\u4fbf\u9009\uff0c\u7136\u540e\u5012\u63a8\u65f6\u53ea\u8981\u80fd\u6210\u529f\u7ed9\u8fb9\u8d4b\u503c\u800c\u4e14 $ans$ \u90fd\u5728\u533a\u95f4\u91cc\u9762\u5c31\u884c\u4e86\u3002\n\n\u6ce8\u610f\u7684\u662f\u56fe\u8fd8\u662f\u53ef\u80fd\u4e0d\u8fde\u901a\uff0c\u6240\u4ee5\u5982\u679c\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e2d\u6709\u81f3\u5c11\u4e00\u4e2a\u6ca1\u6709\u5728 DFS \u4e2d\u904d\u5386\u5230\uff0c\u4e5f\u53ef\u4ee5\u968f\u4fbf\u8d4b\u503c\u3002\n\n\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u7531\u4e8e\u6700\u540e\u8111\u5b50\u70e7\u574f\u4e86\uff0c\u6240\u4ee5\u957f\u5f97\u4e00\u70b9\u4e5f\u4e0d\u50cf\u62d3\u6251\u6392\u5e8f\uff0c~~\u800c\u4e14\u8fd8\u5f88\u4e11~~\uff0c\u4f46\u662f\u672c\u8d28\u4e0a\u662f\u7684\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> PII;\nconst int maxn=2222;\n#define MP make_pair\n#define PB push_back\n#define lson o<<1,l,mid\n#define rson o<<1|1,mid+1,r\n#define FOR(i,a,b) for(int i=(a);i<=(b);i++)\n#define ROF(i,a,b) for(int i=(a);i>=(b);i--)\n#define MEM(x,v) memset(x,v,sizeof(x))\ninline ll read(){\n\tchar ch=getchar();ll x=0,f=0;\n\twhile(ch<'0' || ch>'9') f|=ch=='-',ch=getchar();\n\twhile(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn f?-x:x;\n}\nint n,m,el,head[maxn],to[maxn],nxt[maxn],uuu[maxn],vvv[maxn],lft[maxn],rig[maxn],cnt[maxn],cnt2[maxn],ans[maxn],dep[maxn];\nbool ins[maxn],abon[maxn],ist[maxn],vis[maxn];\ninline void add(int u,int v){\n\tto[++el]=v;nxt[el]=head[u];head[u]=el;\n}\nvoid dfs(int u){\n\tins[u]=true;\n\tfor(int i=head[u];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(dep[v]){\n\t\t\tif(ins[v]) abon[i]=true;\n\t\t\telse cnt[v]++,cnt2[v]++;\n\t\t}\n\t\telse{\n\t\t\tdep[v]=dep[u]+1;\n\t\t\tist[i]=true;\n\t\t\tdfs(v);\n\t\t}\n\t}\n\tins[u]=false;\n}\nvoid dfs2(int u){\n\tvis[u]=true;\n\tfor(int i=head[u];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(abon[i]) continue;\n\t\tif(!ist[i]) cnt[v]--;\n\t\tlft[v]=max(lft[v],lft[u]+1);\n\t\trig[v]=min(rig[v],rig[u]+9);\n\t\tif(!cnt[v] && !vis[v]) dfs2(v);\n\t}\n}\nvoid dfs3(int u){\n\tvis[u]=true;\n\tfor(int i=head[u];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(abon[i]) continue;\n\t\tif(!ist[i]) cnt2[v]--;\n\t\tif(!cnt[v] && !vis[v]) dfs3(v);\n\t\tif(!cnt[v]){\n\t\t\tlft[u]=max(lft[u],ans[v]-9);\n\t\t\trig[u]=min(rig[u],ans[v]-1);\n\t\t}\n\t}\n\tans[u]=lft[u];\n}\nint main(){\n\tn=read();m=read();\n\tFOR(i,1,m){\n\t\tuuu[i]=read();vvv[i]=read();\n\t\tadd(uuu[i],vvv[i]);\n\t}\n\tMEM(rig,0x3f);\n\tdep[1]=1;rig[1]=0;\n\tdfs(1);\n\tif(!dep[n]) return puts(\"-1\"),0;\n//\tFOR(i,1,n) printf(\"%d: %d %d\\n\",i,lft[i],rig[i]);\n\tdfs2(1);\n\tFOR(i,1,n) if(lft[i]>rig[i]) return puts(\"-1\"),0;\n\tMEM(vis,0);\n\tdfs3(1);\n\tprintf(\"%d %d\\n\",n,m);\n\tFOR(i,1,m) printf(\"%d %d %d\\n\",uuu[i],vvv[i],abon[i]?9:max(1,min(9,ans[vvv[i]]-ans[uuu[i]])));\n}\n```",
        "postTime": 1570949170,
        "uid": 72118,
        "name": "AThousandSuns",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5590 \u3010\u8d5b\u8f66\u6e38\u620f\u3011"
    }
]