[
    {
        "content": "\u9038\u5ef6\u4e01\u771f\uff0c\u9274\u5b9a\u4e3a\u5927\u80d6\u9898\u3002\n\n\u5f88\u81ea\u7136\u60f3\u5230\u6811\u5256\u4e00\u4e0b\u7ef4\u62a4\u7b2c $i$ \u6761\u8fb9\u7684\u53d6\u503c\u8303\u56f4 $[l_i,r_i]$\uff0c\u5177\u4f53\u6765\u8bf4\u662f\u5bf9\u6240\u6709\u6700\u5c0f\u503c\u7684\u9650\u5236\u53d6 $\\max$\uff0c\u6700\u5927\u503c\u7684\u9650\u5236\u53d6 $\\min$\u3002\n\n\u6211\u4eec\u6709\u7ed3\u8bba\uff1a**\u5b58\u5728\u4e00\u79cd\u5408\u6cd5\u7684\u6784\u9020\uff0c\u4f7f\u5f97\u7b2c $i$ \u6761\u8fb9\u7684\u8fb9\u6743\u4e0d\u662f $l_i$ \u5c31\u662f $r_i$**\u3002\n\n\u7b80\u5355\u8bc1\u660e\u4e00\u4e0b\uff0c\u9996\u5148\u8fb9\u6743\u4e0d\u80fd\u53d6 $(-\\infty,l_i)\\cup(r_i,\\infty)$ \u7684\u90e8\u5206\uff0c\u56e0\u4e3a\u8fd9\u6837\u76f4\u63a5\u8ba9\u4e00\u4e9b\u9650\u5236\u4e0d\u5408\u6cd5\u4e86\uff0c\u5982\u679c\u53d6\u503c\u5728 $(l_i,r_i)$ \u4e2d\u95f4\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u4e0d\u4f1a\u53d6\u5230\u4efb\u610f\u4e00\u6761\u8fb9\u7684\u9650\u5236\uff0c\u632a\u52a8\u5230\u4e00\u4e2a\u7aef\u70b9\u662f\u4e0d\u52a3\u7684\u3002\n\n\u4e8e\u662f\u95ee\u9898\u62bd\u8c61\u6210\u6709 $n$ \u4e2a\u5e03\u5c14\u53d8\u91cf\uff0c\u6709 $m$ \u6761\u9650\u5236\u8981\u6c42\u4e00\u4e2a\u70b9\u96c6\u91cc\u9762\u8981\u5b58\u5728 $0/1$\uff0c\u6784\u9020\u65b9\u6848\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u95ee\u9898\uff0c\u5de6\u8fb9 $m$ \u4e2a\u70b9\u4ee3\u8868\u9650\u5236\uff0c\u53f3\u8fb9 $n$ \u4e2a\u70b9\u8868\u793a\u53d8\u91cf\uff0c\u53f3\u8fb9\u6bcf\u4e2a\u70b9\u5206\u522b\u5411\u4e0a\u4e0b\u754c\u5bf9\u5e94\u7684\u9650\u5236\u8fde\u8fb9\uff0c\u7531\u4e8e\u9898\u76ee\u4fdd\u8bc1\u4e86\u6240\u6709\u9650\u5236\u7684\u6743\u503c\u4e92\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5\u8fb9\u7684\u6570\u91cf\u662f\u7ebf\u6027\u7684\u3002\u8fd9\u6837\u8dd1\u6700\u5927\u5339\u914d\uff0c\u5982\u679c\u6ee1\u6d41\u8bf4\u660e\u6709\u89e3\uff08\u4e8b\u5b9e\u4e0a\u8fd9\u9898\u4fdd\u8bc1\u4e00\u5b9a\u6709\u89e3\uff09\uff0c\u7136\u540e\u6839\u636e\u6b8b\u91cf\u7f51\u7edc\u76f4\u63a5\u6784\u9020\u65b9\u6848\u5373\u53ef\u3002\n\n\u601d\u8def\u5f88\u81ea\u7136\uff0c\u7136\u800c\u6709\u6811\u5256\u548c\u7f51\u7edc\u6d41\u4e8c\u5408\u4e00\uff0c\u4ee3\u7801\u5f88\u957f\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(N\\sqrt N+K\\log^2N+N\\log N)$\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<map>\nusing namespace std;\ninline int read()\n{\n    int x=0;\n    char c=getchar();\n    while(c<'0'||c>'9')\n        c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=(x<<1)+(x<<3)+(c^48);\n        c=getchar();\n    }\n    return x;\n}\nstruct flow\n{\n    struct edge\n    {\n        int nxt,to,weight;\n    }e[1000001<<3];\n    int tot=1,s,t,h[200001],dep[200001],cur[200001],ans;\n    bool vis[200001];\n    inline void add(int x,int y,int w)\n    {\n        e[++tot]={h[x],y,w};\n        h[x]=tot;\n    }\n    inline bool bfs()\n    {\n        queue<int> q;\n        for(int i=0;i<=t;++i)\n        {\n            vis[i]=0;\n            dep[i]=0x3f3f3f3f;\n            cur[i]=h[i];\n        }\n        dep[s]=0;\n        q.emplace(s);\n        while(!q.empty())\n        {\n            int k=q.front();\n            q.pop();\n            vis[k]=0;\n            for(int i=h[k];i;i=e[i].nxt)\n                if(e[i].weight&&dep[e[i].to]>dep[k]+1)\n                {\n                    dep[e[i].to]=dep[k]+1;\n                    if(!vis[e[i].to])\n                    {\n                        vis[e[i].to]=1;\n                        q.emplace(e[i].to);\n                    }\n                }\n        }\n        return dep[t]^dep[0];\n    }\n    inline int dfs(int k,int f)\n    {\n        if(k==t)\n        {\n            ans+=f;\n            return f;\n        }\n        int r=0,used=0;\n        for(int i=cur[k];i;i=e[i].nxt)\n        {\n            cur[k]=i;\n            if(e[i].weight&&dep[e[i].to]==dep[k]+1)\n                if((r=dfs(e[i].to,min(e[i].weight,f-used))))\n                {\n                    e[i].weight-=r;\n                    e[i^1].weight+=r;\n                    used+=r;\n                    if(f==used)\n                        break;\n                }\n        }\n        return used;\n    }\n    inline void dinic()\n    {\n        while(bfs())\n            dfs(s,1<<30);\n    }\n}flow;\nint n,m,w[70001],ans[70001],dep[70001],fa[70001],s[70001],son[70001],top[70001],cnt,dfn[70001],val[70001<<2][2],tag[70001<<2][2];\nmap<int,int> mp;\nvector<int> v[70001];\ninline int ls(int k)\n{\n    return k<<1;\n}\ninline int rs(int k)\n{\n    return k<<1|1;\n}\ninline void push_up(int k)\n{\n    val[k][0]=max(val[ls(k)][0],val[rs(k)][0]);\n    val[k][1]=min(val[ls(k)][1],val[rs(k)][1]);\n}\ninline void push_down(int k)\n{\n    if(tag[k][0]>=0)\n    {\n        val[ls(k)][0]=max(val[ls(k)][0],tag[k][0]);\n        val[rs(k)][0]=max(val[rs(k)][0],tag[k][0]);\n        tag[ls(k)][0]=max(tag[ls(k)][0],tag[k][0]);\n        tag[rs(k)][0]=max(tag[rs(k)][0],tag[k][0]);\n        tag[k][0]=-1;\n    }\n    if(tag[k][1]<=1e9)\n    {\n        val[ls(k)][1]=min(val[ls(k)][1],tag[k][1]);\n        val[rs(k)][1]=min(val[rs(k)][1],tag[k][1]);\n        tag[ls(k)][1]=min(tag[ls(k)][1],tag[k][1]);\n        tag[rs(k)][1]=min(tag[rs(k)][1],tag[k][1]);\n        tag[k][1]=1e9+7;\n    }\n}\ninline void build(int k,int l,int r)\n{\n    tag[k][0]=-1;\n    tag[k][1]=1e9+7;\n    if(l==r)\n    {\n        val[k][0]=-1;\n        val[k][1]=1e9+7;\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(ls(k),l,mid);\n    build(rs(k),mid+1,r);\n    push_up(k);\n}\ninline void update1(int nl,int nr,int l,int r,int k,int p)\n{\n    if(nl>nr)\n        return;\n    if(l>=nl&&r<=nr)\n    {\n        val[k][0]=max(val[k][0],p);\n        tag[k][0]=max(tag[k][0],p);\n        return;\n    }\n    push_down(k);\n    int mid=(l+r)>>1;\n    if(nl<=mid)\n        update1(nl,nr,l,mid,ls(k),p);\n    if(nr>mid)\n        update1(nl,nr,mid+1,r,rs(k),p);\n    push_up(k);\n}\ninline void update2(int nl,int nr,int l,int r,int k,int p)\n{\n    if(nl>nr)\n        return;\n    if(l>=nl&&r<=nr)\n    {\n        val[k][1]=min(val[k][1],p);\n        tag[k][1]=min(tag[k][1],p);\n        return;\n    }\n    push_down(k);\n    int mid=(l+r)>>1;\n    if(nl<=mid)\n        update2(nl,nr,l,mid,ls(k),p);\n    if(nr>mid)\n        update2(nl,nr,mid+1,r,rs(k),p);\n    push_up(k);\n}\ninline pair<int,int> query(int node,int l,int r,int k)\n{\n    if(l==r)\n        return {val[k][0],val[k][1]};\n    push_down(k);\n    int mid=(l+r)>>1;\n    if(node<=mid)\n        return query(node,l,mid,ls(k));\n    return query(node,mid+1,r,rs(k));\n}\ninline void up1(int x,int y,int p)\n{\n    while(top[x]^top[y])\n    {\n        if(dep[top[x]]<dep[top[y]])\n            swap(x,y);\n        update1(dfn[top[x]],dfn[x],1,n,1,p);\n        x=fa[top[x]];\n    }\n    if(dep[x]>dep[y])\n        swap(x,y);\n    update1(dfn[x]+1,dfn[y],1,n,1,p);\n}\ninline void up2(int x,int y,int p)\n{\n    while(top[x]^top[y])\n    {\n        if(dep[top[x]]<dep[top[y]])\n            swap(x,y);\n        update2(dfn[top[x]],dfn[x],1,n,1,p);\n        x=fa[top[x]];\n    }\n    if(dep[x]>dep[y])\n        swap(x,y);\n    update2(dfn[x]+1,dfn[y],1,n,1,p);\n}\ninline void dfs1(int k,int f,int deep)\n{\n    dep[k]=deep;\n    fa[k]=f;\n    s[k]=1;\n    for(int i:v[k])\n    {\n        if(i==f)\n            continue;\n        dfs1(i,k,deep+1);\n        s[k]+=s[i];\n        if(s[i]>s[son[k]])\n            son[k]=i;\n    }\n}\ninline void dfs2(int k,int t)\n{\n    top[k]=t;\n    dfn[k]=++cnt;\n    if(!son[k])\n        return;\n    dfs2(son[k],t);\n    for(int i:v[k])\n    {\n        if(i==fa[k]||i==son[k])\n            continue;\n        dfs2(i,i);\n    }\n}\nint main()\n{\n    freopen(\"minmaxtree.in\",\"r\",stdin);\n    freopen(\"minmaxtree.out\",\"w\",stdout);\n    n=read();\n    for(int i=1;i<n;++i)\n    {\n        int x=read(),y=read();\n        v[x].emplace_back(y);\n        v[y].emplace_back(x);\n    }\n    dfs1(1,0,1);\n    dfs2(1,1);\n    build(1,1,n);\n    m=read();\n    flow.s=n+m+1;\n    flow.t=flow.s+1;\n    for(int i=1;i<=m;++i)\n    {\n        flow.add(flow.s,i,1);\n        flow.add(i,flow.s,0);\n        char opt=getchar();\n        while(opt!='M'&&opt!='m')\n            opt=getchar();\n        int x=read(),y=read();\n        w[i]=read();\n        if(opt=='m')\n            up1(x,y,w[i]);\n        if(opt=='M')\n            up2(x,y,w[i]);\n        mp[w[i]]=i;\n    }\n    for(int i=2;i<=n;++i)\n    {\n        ans[i]=-1;\n        flow.add(i+m,flow.t,1);\n        flow.add(flow.t,i+m,0);\n        pair<int,int> w=query(dfn[i],1,n,1);\n        if(w.first>=0)\n        {\n            flow.add(mp[w.first],i+m,1);\n            flow.add(i+m,mp[w.first],0);\n        }\n        if(w.second<=1e9)\n        {\n            flow.add(mp[w.second],i+m,1);\n            flow.add(i+m,mp[w.second],0);\n        }\n    }\n    flow.dinic();\n    //cout<<flow.ans<<'\\n';\n    for(int k=1;k<=m;++k)\n        for(int i=flow.h[k];i;i=flow.e[i].nxt)\n            if(!flow.e[i].weight&&flow.e[i].to>m&&flow.e[i].to<=n+m)\n            {\n                ans[flow.e[i].to-m]=w[k];\n                break;\n            }\n    for(int i=2;i<=n;++i)\n    {\n        if(ans[i]!=-1)\n        {\n            cout<<fa[i]<<\" \"<<i<<\" \"<<ans[i]<<'\\n';\n            continue;\n        }\n        pair<int,int> tmp=query(dfn[i],1,n,1);\n        if(tmp.first==-1)\n            tmp.first=0;\n        cout<<fa[i]<<\" \"<<i<<\" \"<<tmp.first<<'\\n';\n    }\n    return 0;\n}\n```",
        "postTime": 1662012624,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "P4787 [BalkanOI2018]Minmaxtree \u9898\u89e3"
    },
    {
        "content": "[\u6b22\u8fce\u6765\u6211\u7684blog\u901b\u901b~~](https://blog.csdn.net/Dream_Lolita/article/details/87519520)\n\n\u6bcf\u4e2a\u9650\u5236\u7ed9\u51fa\u7684\u503c\u5747\u4e0d\u540c\u3002\u3002\u3002\u4e00\u5f00\u59cb\u770b\u6210\u4e86\u5206\u914d\u8fb9\u6743\u4e0d\u540c\u3002\n\n\u9996\u5148\u4e00\u4e2a\u7b80\u5355\u7684\u60f3\u6cd5\u662f\u5c06\u8def\u5f84\u9650\u5236\u53d8\u6210\u5bf9\u6bcf\u6761\u8fb9\u7684\u9650\u5236\uff0c\u5373\u6bcf\u6761\u8fb9\u5e94\u5f53\u6709\u4e00\u4e2a\u6700\u5c0f\u53ef\u884c\u6743\u503c$L$\u548c\u6700\u5927\u53ef\u884c\u6743\u503c$R$\uff0c\u5b9e\u9645\u4e0a$L$\u5c31\u662f\u6240\u6709\u6700\u5c0f\u9650\u5236\u4e2d\u7684\u6700\u5927\u503c\uff0c$R$\u540c\u7406\u3002\n\n\u89c2\u5bdf\u5230\u4e00\u4e2a\u65b9\u6848\u5408\u6cd5\uff0c\u5f53\u4e14\u4ec5\u5f53\u5728\u6240\u6709\u8fb9\u6743\u5206\u914d\u7ed3\u675f\u540e\uff0c\u6bcf\u4e2a\u9650\u5236\u7ed9\u51fa\u7684\u503c\u4e00\u5b9a\u662f\u8fd9\u4e2a\u9650\u5236\u8def\u5f84\u4e0a\u81f3\u5c11\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u3002\n\n\u53e6\u5916\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u82e5\u4e00\u6761\u8fb9\u5728\u6700\u7ec8\u7684\u6784\u9020\u65b9\u6848\u4e2d\u6ca1\u6709\u53d6\u5230$L$\u6216$R$\uff0c\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u5c06\u5b83\u53d8\u6210$L$\u6216$R$\uff0c\u4e8e\u662f\u5b9e\u9645\u4e0a\u95ee\u9898\u5c31\u662f\u7ed9\u6bcf\u6761\u8fb9\u5206\u914d\u5b83\u6700\u5927\u6700\u5c0f\u53ef\u884c\u8fb9\u6743\u4e2d\u7684\u4e00\u4e2a\uff0c\u4e14\u6bcf\u4e2a\u503c\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u8fb9\u6743\u3002\n\n\u8fd9\u4e2a\u95ee\u9898\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u6765\u5b8c\u6210\uff1a\u6211\u4eec\u5bf9\u6bcf\u4e2a\u9650\u5236\u8fb9\u6743\u5efa\u4e00\u4e2a\u70b9\uff0c\u6bcf\u6761\u8fb9\u5efa\u4e00\u4e2a\u70b9\u5e76\u8fde\u5411\u5b83\u5bf9\u5e94\u7684\u6700\u5927\u6700\u5c0f\u8fb9\u6743\u5373\u53ef\u3002\n\u8fd9\u90e8\u5206\u590d\u6742\u5ea6$O(n\\sqrt n)$\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u8dd1\u5f97\u5f88\u5feb\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8fd8\u9700\u8981\u5904\u7406\u7684\u5c31\u662f\u6c42\u51fa\u6bcf\u6761\u8fb9\u7684\u6700\u5927\u6700\u5c0f\u53ef\u884c\u8fb9\u6743\uff0c\u8fd9\u91cc\u4ee5\u6700\u5c0f\u53ef\u884c\u8fb9\u6743\u4e3e\u4f8b\uff0c\u5373\u8981\u6c42\u51fa\u6240\u6709\u7ecf\u8fc7\u4e00\u6761\u8fb9\u7684\u6700\u5c0f\u9650\u5236\u4e2d\u7684\u6700\u5927\u503c\u3002\n\n\u8fd9\u4e2a\u95ee\u9898\u7684\u505a\u6cd5\u5f88\u591a\uff0c\u8fd9\u91cc\u5217\u4e3e\u4e24\u79cd\uff0c\u9996\u5148\u4e00\u4e2a\u70b9\u7ef4\u62a4\u7684\u662f\u5b83\u7684\u7236\u8fb9\u7684\u9650\u5236\u3002\n\n\u7b2c\u4e00\u79cd\u65b9\u6cd5\u57fa\u4e8e\u6811\u4e0a\u5dee\u5206\u601d\u60f3\uff0c\u6211\u4eec\u5728\u4e00\u4e2a\u9650\u5236\u7684\u4e24\u7aef\u70b9\u6253\u4e0a\u4e00\u4e2a\u503c$+1$\u6807\u8bb0\uff0c\u518d\u5728$\\text{LCA}$\u6253\u4e0a\u503c$-1$\u6807\u8bb0\u3002\u8fd9\u6837\u6211\u4eec$\\text{DFS}$\u6574\u9897\u6811\uff0c\u4e00\u4e2a\u8282\u70b9\u4e0e\u6240\u6709\u513f\u5b50\u7684$\\text{set}$\u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\uff0c\u82e5\u8282\u70b9\u4e0a\u6709$-1$\u6807\u8bb0\uff0c\u5219\u5c06\u8fd9\u4e9b\u6807\u8bb0\u7684\u6570\u5220\u53bb\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728$\\text{set}$\u79cd\u67e5\u51fa\u5b83\u7236\u8fb9\u7684\u9650\u5236\u4e86\u3002\n\u5f53\u7136\u4f60\u53ef\u4ee5\u4e0d\u6253\u51cf\u6807\u8bb0\uff0c\u800c\u662f\u5728\u5408\u5e76\u7684\u65f6\u5019\uff0c\u82e5\u6709\u8fd9\u4e2a\u6570\u5219\u5220\u9664\u5b83\uff0c\u5426\u5219\u52a0\u5165\u5373\u53ef\u3002\n\u8fd9\u6837\u505a\u590d\u6742\u5ea6$O(n\\log^2 n)$\n\n\n\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u5148\u5c06\u6240\u6709\u8be2\u95ee\u6309\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff08\u6700\u5c0f\u9650\u5236\uff09\uff0c\u7136\u540e\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a$\\text{DSU}$\uff0c\u6bcf\u6b21\u770b\u5f53\u524d\u7684\u4e24\u7aef\u662f\u5426\u5728\u540c\u4e00\u4e2a$\\text{DSU}$\u4e2d\uff0c\u82e5\u5728\u5219\u8bf4\u660e\u5f53\u524d\u4e24\u7aef\u8def\u5f84\u4e0a\u5df2\u7ecf\u6709\u66f4\u4e25\u683c\u7684\u9650\u5236\u4e86\uff0c\u6211\u4eec\u76f4\u63a5\u8df3\u8fc7\uff0c\u82e5\u4e0d\u5728\u5219\u6211\u4eec\u53ef\u4ee5\u5c06\u5f53\u524d\u6df1\u5ea6\u6df1\u7684$\\text{DSU}$\u7684\u7236\u8fb9\u9650\u5236\u8bbe\u6210\u5f53\u524d\u6743\u3002\u8fd9\u91cc\u6ce8\u610f\u6211\u4eec\u7ef4\u62a4\u7684$\\text{DSU}$\u4e2d\u6700\u9876\u8282\u70b9\u5e94\u8be5\u662f\u6df1\u5ea6\u6700\u5c0f\u7684\u3002\n\u8fd9\u6837\u505a\u590d\u6742\u5ea6$O(n\\log n)$\uff0c$\\log n$\u751a\u81f3\u662f\u6765\u81ea\u6392\u5e8f\u7684\u3002\n\n\u8fd9\u6837\u8fd9\u9053\u9898\u5c31\u89e3\u51b3\u4e86\u3002\n\n~~\u540c\u6837\u662f\u5148\u5728LOJ\u4e0a\u8fc7\u7684~~\n\n\u3010\u53c2\u8003\u4ee3\u7801\u3011\uff08\u542f\u53d1\u5f0f\u5408\u5e76set\uff09\n\n```cpp\n#include<bits/stdc++.h>\n#define pb push_back\nusing namespace std;\n\nconst int N=140010,M=N*4,inf=0x3f3f3f3f;\nint n,m,fa[N],ulim[N],dlim[N],pw[N];\nmap<int,int>nid;\n\nnamespace IO\n{\n\tint read()\n\t{\n\t\tint ret=0,f=1;char c=getchar();\n\t\twhile(!isdigit(c)) {if(c=='-')f=0;c=getchar();}\n\t\twhile(isdigit(c)) ret=ret*10+(c^48),c=getchar();\n\t\treturn f?ret:-ret;\n\t}\n\tvoid write(int x){if(x<0)putchar('-'),x=-x;if(x>9)write(x/10);putchar(x%10^48);}\n\tvoid writesp(int x){write(x);putchar(' ');}\n\tvoid writeln(int x){write(x);putchar('\\n');}\n}\nusing namespace IO;\n\nnamespace Flow\n{\n\tint tot,S,T;\n\tint head[N],cur[N],dis[N];\n\tqueue<int>q;\n\tstruct Tway{int v,w,nex;}e[M];\n\tvoid add(int u,int v,int w)\n\t{\n\t\te[++tot]=(Tway){v,w,head[u]};head[u]=tot;\n\t\te[++tot]=(Tway){u,0,head[v]};head[v]=tot;\n\t}\n\tvoid init(){tot=1;}\n\tbool bfs()\n\t{\n\t\tmemcpy(cur,head,sizeof(head));memset(dis,-1,(T+5)*sizeof(*dis));\n\t\tq.push(S);dis[S]=0;\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint x=q.front();q.pop();\n\t\t\tfor(int i=head[x];i;i=e[i].nex)\n\t\t\t{\n\t\t\t\tint v=e[i].v;\n\t\t\t\tif(!~dis[v] && e[i].w) dis[v]=dis[x]+1,q.push(v);\n\t\t\t}\n\t\t}\n\t\treturn ~dis[T];\n\t}\n\tint dfs(int x,int flow)\n\t{\n\t\tif(x==T || !flow) return flow;\n\t\tint u,used=0;\n\t\tfor(int &i=cur[x];i;i=e[i].nex)\n\t\t{\n\t\t\tint v=e[i].v;\n\t\t\tif(dis[v]==dis[x]+1 && (u=dfs(v,min(e[i].w,flow-used))))\n\t\t\t{\n\t\t\t\te[i].w-=u;e[i^1].w+=u;used+=u;\n\t\t\t\tif(used==flow) break;\n\t\t\t}\n\t\t}\n\t\treturn used;\n\t}\n\tvoid solve()\n\t{\n\t\tS=n+m+1;T=S+1;\n\t\tfor(int i=1;i<=m;++i) add(S,i,1);\n\t\tfor(int i=m+1;i<=n+m;++i) add(i,T,1);\n\n\t\tint res=0;\n\t\twhile(bfs()) res+=dfs(S,inf);\n\t\tfor(int i=2;i<=n;++i)\n\t\t{\n\t\t\tint x=i+m,t=0;\n\t\t\tfor(int j=head[x];j;j=e[j].nex) if(e[j].v<=m && e[j].w==1) t=e[j].v;\n\t\t\twritesp(fa[i]);writesp(i);writeln(t?pw[t]:ulim[i]);\n\t\t\t//printf(\"%d %d %d\\n\",fa[i],i,t?pw[t]:ulim[i]);\n\t\t}\n\t}\n}\n\nnamespace Merger\n{\n\tint tot;\n\tint head[N];\n\tset<int>mx[N],mi[N];\n\tset<int>::iterator it;\n\tvector<int>tmx[N],tmi[N];\n\tstruct Tway{int v,nex;}e[N<<1];\n\tvoid add(int u,int v)\n\t{\n\t\te[++tot]=(Tway){v,head[u]};head[u]=tot;\n\t\te[++tot]=(Tway){u,head[v]};head[v]=tot;\n\t}\n\tvoid insert(set<int>&x,int y)\n\t{\n\t\tif(x.find(y)!=x.end()) x.erase(y);\n\t\telse x.insert(y);\n\t}\n\tvoid merge(set<int>&x,set<int>&y)\n\t{\n\t\tif(x.size()<y.size()) x.swap(y);\n\t\tfor(it=y.begin();it!=y.end();++it) insert(x,*it);\n\t}\n\tvoid dfs(int x,int f)\n\t{\n\t\tfa[x]=f;\n\t\tfor(int i=head[x];i;i=e[i].nex)\n\t\t{\n\t\t\tint v=e[i].v;\n\t\t\tif(v==f) continue;\n\t\t\tdfs(v,x);merge(mx[x],mx[v]);merge(mi[x],mi[v]);\n\t\t}\n\n\t\tfor(int i=0;i<(int)tmx[x].size();++i) insert(mx[x],tmx[x][i]);\n\t\tfor(int i=0;i<(int)tmi[x].size();++i) insert(mi[x],tmi[x][i]);\n\t\tulim[x]=mx[x].empty()?inf:*mx[x].begin();\n\t\tdlim[x]=mi[x].empty()?-inf:*mi[x].rbegin();\n\t\tif(!mx[x].empty()) Flow::add(nid[ulim[x]],x+m,1);\n\t\tif(!mi[x].empty()) Flow::add(nid[dlim[x]],x+m,1);\n\t}\n\tvoid pushtar(int x,int y,int w,int op)\n\t{\n\t\tif(op) tmx[x].pb(w),tmx[y].pb(w);\n\t\telse tmi[x].pb(w),tmi[y].pb(w);\n\t}\n}\n\nnamespace DreamLolita\n{\n\tvoid solve()\n\t{\n\t\tn=read();\n\t\tfor(int i=1;i<n;++i)\n\t\t{\n\t\t\tint x=read(),y=read();\n\t\t\tMerger::add(x,y);\n\t\t}\n\t\tm=read();\n\t\tfor(int i=1;i<=m;++i)\n\t\t{\n\t\t\tchar ch[2];scanf(\"%s\",ch);\n\t\t\tint x=read(),y=read();pw[i]=read();nid[pw[i]]=i;\n\t\t\tMerger::pushtar(x,y,pw[i],ch[0]=='M'?1:0);\n\t\t}\n\t\tFlow::init();Merger::dfs(1,0);Flow::solve();\n\t}\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"LOJ2712.in\",\"r\",stdin);\n\tfreopen(\"LOJ2712.out\",\"w\",stdout);\n#endif\n\tDreamLolita::solve();\n\treturn 0;\n}\n```\n",
        "postTime": 1550471675,
        "uid": 15438,
        "name": "Durant_Lee",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4787 \u3010[BalkanOI 2018 Day1]Minmaxtree\u3011"
    }
]