[
    {
        "content": "\u4e00\u9053\u7565\u6709\u53d8\u5f62\u7684\u6700\u77ed\u8def\u6a21\u677f\u9898\u3002\n\n-----------\n\n### \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2a**\u65e0\u5411\u56fe**\uff0c\u6bcf\u6761\u8fb9\u6709\u5176\u4ee3\u4ef7 $c$ \u548c\u9650\u5236 $f$\u3002\u6c42\u51fa\u4e00\u6761\u4ece $1$ \u5230 $n$ \u7684\u8def\u5f84\uff0c\u4f7f\u5f97 $\\dfrac{\\min\\{f_i\\}}{\\sum c_i}$ \u6700\u5927\u3002\n\n### \u89e3\u9898\u601d\u8def\n\n\u53ea\u8981\u8ba4\u771f\u60f3\u771f\u7684\u4e0d\u96be\u3002\n\n\u6709\u4e24\u4e2a\u6761\u4ef6\uff0c\u8003\u8651\u5148\u679a\u4e3e $f$\u3002\u65e2\u7136\u8981\u4f7f\u5206\u6bcd $\\sum c_i$ \u6700\u5c0f\uff0c\u90a3\u4e0d\u76f8\u5f53\u4e8e\u4ee5 $c$ \u4e3a\u8fb9\u6743\u8dd1\u6700\u77ed\u8def\uff1f\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8dd1 dijkstra \u6216 spfa\u3002\u4e0d\u8fc7\u4e3a\u4e86\u8fbe\u5230\u679a\u4e3e $f$ \u8d77\u7684\u9650\u5236\u4f5c\u7528\uff0c\u6211\u4eec\u5728**\u6bcf\u6b21\u677e\u5f1b\u64cd\u4f5c\u4e4b\u524d**\uff0c\u8981\u5148\u5224\u65ad\u8fd9\u6761\u8fb9\u7684\u9650\u5236\u662f\u5426**\u5927\u4e8e** $f$\u3002\u5426\u5219\u4e0d\u628a\u8fd9\u6761\u8fb9\u8ba1\u7b97\u7684\u6700\u77ed\u8def\u4e2d\uff0c\u56e0\u4e3a\u5b83\u4e0d\u6ee1\u8db3\u5f53\u524d\u9650\u5236\u3002\n\n\u8dd1\u5b8c\u6700\u77ed\u8def\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u4f7f\u7528\u5806\u4f18\u5316\u7684 dijkstra\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6\u4e3a $O(n^2\\log n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u5f53\u7136\u4e5f\u6709\u4e8c\u5206\u7b49\u5176\u4ed6\u505a\u6cd5\uff0c\u4e0d\u8fc7\u5df2\u7ecf\u6ca1\u6709\u5fc5\u8981\u4e86\u3002\u4e0d\u719f\u7ec3\u7684\u8fd8\u5bb9\u6613\u51fa\u9519\u3002\u6240\u4ee5\u80fd\u7b80\u5355\u7b97\u7684\u5c31\u7b80\u5355\u7b97\u3002\n\n### \u5b9e\u73b0\u7ec6\u8282\n\n- \u5efa\u56fe\u6ce8\u610f\u662f\u65e0\u5411\u56fe\u3002\n\n- \u7531\u4e8e\u9700\u8981\u591a\u6b21\u8dd1\u6700\u77ed\u8def\uff0c\u8bb0\u5f97\u6e05\u7a7a\u67d0\u4e9b\u6570\u7ec4\u3002\n\n- \u91cd\u8f7d`priority_queue`\u7684\u65f6\u5019\uff0c\u7b26\u53f7\u4e0d\u8981\u5199\u9519\u3002\n\n### \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<queue>\nusing namespace std;\n\n#define INF 0x7f7f7f7f\nconst int MAXN=3005;\nint n,m,ans;\nstruct node\n{\n\tint to,cost,limit;\n\tbool operator<(const node& a)const\n\t{\n\t\treturn cost>a.cost;//\u65b9\u5411\u522b\u53cd\u4e86\n\t}\n};\nvector<node> edge[MAXN];\nint dis[MAXN],limit[MAXN];\nbool visit[MAXN];\n\nvoid input(void)\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a,b,x;\n\t\tcin>>a>>b>>x>>limit[i];\n\t\tedge[a].push_back(node{b,x,limit[i]});//\u65e0\u5411\u56fe\n\t\tedge[b].push_back(node{a,x,limit[i]});\n\t}\n}\n\nint dijkstra(const int limit)\n{\n\tpriority_queue<node> q;//\u8bb0\u5f97\u6e05\u7a7a\n\tmemset(visit,false,sizeof(visit));\n\tmemset(dis,INF,sizeof(dis));\n\tdis[1]=0;\n\tq.push(node{1,0,limit});\n\twhile(!q.empty())//\u6a21\u677f\n\t{\n\t\tconst int u=q.top().to;\n\t\tq.pop();\n\t\tif(visit[u])\n\t\t continue;\n\t\tvisit[u]=true;\n\t\tfor(auto v:edge[u])\n\t\t if(v.limit>=limit && dis[v.to]>dis[u]+v.cost)\n\t\t {//\u6ce8\u610f\u9650\u5236\n\t\t \tdis[v.to]=dis[u]+v.cost;\n\t\t \tq.push(node{v.to,dis[v.to],limit});\n\t\t }\n\t}\n\treturn dis[n];\n}\n\nint main()\n{\n\tinput();\n\tfor(int i=1;i<=m;i++)//\u679a\u4e3e m \u6b21\u800c\u975e n \u6b21\n\t ans=max(ans,limit[i]*int(1e6)/dijkstra(limit[i]));//\u66f4\u65b0\u7b54\u6848\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1583233041,
        "uid": 80049,
        "name": "Hexarhy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5837 \u3010[USACO19DEC]Milk Pumping G\u3011"
    },
    {
        "content": "\u63a8\u8350\u4e00\u4e0b\u6211\u7684\u535a\u5ba2\uff0c\u8fd9\u91cc\u670912\u6708\u6708\u8d5b\u7684\u5168\u90e812\u7bc7\u9898\u89e3~~\n\nhttps://www.cnblogs.com/Purple-wzy/\n\n#### A Milk Pumping\n\n\u9898\u76ee\uff1ahttps://www.luogu.com.cn/problem/P5837\n\n\u9898\u89e3\uff1a\u4ece1\u52301000\u679a\u4e3e\u8fd9\u4e2a\u6700\u5c0f\u6d41\u91cf\uff0c\u8dd1\u6700\u77ed\u8def\u5c31\u597d\u3002\n\n\u590d\u6742\u5ea6\uff1aO(1000*(n+m)logn)\n\n\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define re register int\n#define F(x,y,z) for(re x=y;x<=z;x++)\n#define FOR(x,y,z) for(re x=y;x>=z;x--)\n#define I inline void\n#define IN inline int\ntypedef long long ll;\nI read(int &res){\n    re g=1;register char ch=getchar();res=0;\n    while(!isdigit(ch)){\n        if(ch=='-')g=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch)){\n        res=(res<<3)+(res<<1)+(ch^48);\n        ch=getchar();\n    }\n    res*=g;\n}\nstruct E{\n\tint to,nt,w,v;\n}e[2020];\n#define T e[k].to\nconst int INF=1e9+7;\nint n,m,head[1010],X,Y,W,V,dis[1010],vis[1010],p,ans,tot;\nqueue<int>q;\nint main(){\n\tfreopen(\"pump.in\",\"r\",stdin);\n\tfreopen(\"pump.out\",\"w\",stdout);\n\tread(n);read(m);\n\tmemset(head,-1,sizeof(head));tot=-1;\n\tF(i,1,m){\n\t\tread(X);read(Y);read(W);read(V);\n\t\te[++tot].to=Y;\n\t\te[tot].nt=head[X];\n\t\thead[X]=tot;\n\t\te[tot].w=W;\n\t\te[tot].v=V;\n\t\te[++tot].to=X;\n\t\te[tot].nt=head[Y];\n\t\thead[Y]=tot;\n\t\te[tot].w=W;\n\t\te[tot].v=V;\n\t}\n\tans=0;\n\tF(val,1,1000){\n\t\tF(i,1,n)dis[i]=INF,vis[i]=0;\n\t\tdis[1]=0,vis[1]=1;\n\t\tq.push(1);\n\t\twhile(!q.empty()){\n\t\t\tp=q.front();q.pop();vis[p]=0;\n\t\t\tfor(re k=head[p];k!=-1;k=e[k].nt){\n\t\t\t\tif(e[k].v<val)continue;\n\t\t\t\tif(dis[p]+e[k].w<dis[T]){\n\t\t\t\t\tdis[T]=dis[p]+e[k].w;\n\t\t\t\t\tif(!vis[T]){\n\t\t\t\t\t\tvis[T]=1;\n\t\t\t\t\t\tq.push(T);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(dis[n]!=INF)ans=max(ans,val*1000000/dis[n]);\n\t}\n\tcout<<ans;\n    return 0;\n}\n```",
        "postTime": 1576838646,
        "uid": 93453,
        "name": "Purple_wzy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5837 \u3010[USACO19DEC]Milk Pumping\u3011"
    },
    {
        "content": "# \u9898\u89e3002 P5837\n\u849f\u84bb\u7684\u7b2c\u4e8c\u7bc7\u9898\u89e3\uff0c\u6c42\u7ba1\u7406\u5458\u5927\u5927\u901a\u8fc7\n## 01 \u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\n\n\u867d\u7136\u672c\u9898\u6570\u636e\u89c4\u6a21\u4e0d\u5927\uff0c\u4f46\u662f\u4ecb\u4e8e\u672c\u9898\u89e3\u4f7f\u7528\u4e86\u679a\u4e3e\u7684\u505a\u6cd5\uff0c\u90bb\u63a5\u77e9\u9635\u53ef\u80fd\u4f1a $TLE$ \uff0c\u56e0\u6b64\u91c7\u7528\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\u3002\n\n\u5728\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\u4e2d\uff0c\u6211\u4eec\u7ef4\u62a4\u4e86\u6570\u7ec4 $head[i]$ \uff0c\u7528\u6765\u8868\u793a\u8d77\u70b9\u4e3a $i$ \u7684\u6700\u540e\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\u3002\n\n\u540c\u65f6\u5f15\u5165\u4e86 $next$ \u6765\u8868\u793a\u4e0e\u8be5\u8fb9\u8d77\u70b9\u76f8\u540c\u7684\u6700\u540e\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\uff0c\u5728\u5177\u4f53\u7a0b\u5e8f\u4e2d\u4f53\u73b0\u4e3a\u8fd9\u6837\uff1a\n\n```cpp\nedge[cnt].next = head[u];//cnt\u8868\u793a\u8be5\u8fb9\u7f16\u53f7\n```\n\n\u672c\u9898\u4e3a\u6709\u5411\u56fe\uff0c\u4f46\u82e5\u4e3a\u65e0\u5411\u56fe\u7684\u8bdd\uff0c\u5e94\u5f53\u6ce8\u610f\u8981\u5c06\u8d77\u70b9\u4e0e\u7ec8\u70b9\u98a0\u5012\u540e\u518d\u5efa\u4e00\u6761\u8fb9,\u4ee3\u7801\u5982\u4e0b\u3002\n\n```cpp\nvoid add(int u, int v, int c, int f)//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\n{\n    edge[++cnt].c = c;\n    edge[cnt].to = v;\n    edge[cnt].next = head[u];//cnt\u8868\u793a\u8be5\u8fb9\u7f16\u53f7\n    edge[cnt].f = f;\n    head[u] = cnt;\n}\n```\n\n## 02 \u94fe\u5f0f\u524d\u5411\u661f\u641c\u8fb9\n\n\u76f8\u5e94\u7684,\u65e2\u7136\u6709\u4e86\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9,\u5728\u5b9e\u9645\u5e94\u7528\u4e2d,\u4e3a\u4e86\u904d\u5386\u8def\u5f84,\u6211\u4eec\u8fd8\u9700\u8981\u94fe\u5f0f\u524d\u5411\u661f\u641c\u8fb9\u3002\n\n\u56e0\u4e3a\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\u5b9e\u9645\u4e0a\u662f\u5efa\u7acb\u4e86\u4e00\u5f20\u90bb\u63a5\u8868,\u56e0\u6b64\u6211\u4eec\u4e5f\u901a\u8fc7\u7c7b\u4f3c\u94fe\u8868\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u641c\u8fb9\u3002\u5373\u5728 $i=False$\u4e4b\u524d\u6211\u4eec\u4e00\u76f4\u5411\u524d\u8bbf\u95ee $edge[i].next$ , \u4ece\u800c\u5b9e\u73b0\u641c\u8fb9\u7684\u64cd\u4f5c.\n\u5177\u4f53\u4ee3\u7801(\u53ef\u80fd\u662f\u4f2a\u4ee3\u7801)\u5982\u4e0b\n\n```cpp\nfor (int i = head[u]; i; i = edge[i].next){\n\t\u4e3b\u4f53\u90e8\u5206;//u\u4ee3\u8868\u5f53\u524d\u6240\u5728\u8fb9\u7684\u8d77\u70b9         \n}\n```\n\n## 03 \u672c\u4f53\u7b97\u6cd5\n### Dijkstra+\u5806\u4f18\u5316+\u679a\u4e3e\n\n[\u4e0d\u77e5\u9053Dijkstra\u7684\u540c\u5b66\u53ef\u4ee5\u770b\u8fd9\u91cc\u7684\u9898\u89e3,\u592a\u5360\u7bc7\u5e45,\u5c31\u4e0d\u8d58\u8ff0\u4e86](https://www.luogu.com.cn/problem/solution/P4779)\n\n\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u6d41\u91cf\u662f\u4e2a $0-1000$ \u7684\u6570\u5b57,\u800c\u5806\u4f18\u5316\u540e\u7684dijkstra\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f $O(m\\log_2n)$,\u56e0\u6b64\u679a\u4e3e\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u5b8c\u5168\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u5185\u3002\n\n\u800c\u6b64\u5904\u7684\u5806\u4f18\u5316\u91c7\u7528\u4e86 $C++$ \u4e2d\u7684 $STL$ \u4e2d\u7684\u4f18\u5148\u961f\u5217\uff0c\u5f53\u7136\uff0c\u4e00\u822c\u961f\u5217\u663e\u7136\u4e5f\u662f\u53ef\u4ee5\u5b9e\u73b0\u7684\u3002\n\n## 04 \u672c\u9898\u601d\u8def\n\n### \u4ee5\u4ec0\u4e48\u4e3a\u5173\u952e\u5b57\u8fdb\u884cdijkstra\u548c\u5bf9\u4ec0\u4e48\u8fdb\u884c\u5217\u4e3e\n\n\u6211\u4eec\u8bb0\u67d0\u4e2a\u7ba1\u9053\u7684\u82b1\u8d39\u4e3a $C_i$ ,\u6d41\u91cf\u4e3a $F_i$ ,\u4e0d\u96be\u53d1\u73b0\u9898\u76ee\u60f3\u8ba9\u6211\u4eec\u6c42\u5f97\u5c31\u662f:\n\n$$ \\frac{min(F_1,F_2...F_i)}{C_1+C_2...+C_i}$$\n\n\u90a3\u7ed3\u679c\u5c31\u547c\u4e4b\u6b32\u51fa\u4e86,\u6211\u4eec\u4e0d\u5927\u53ef\u80fd\u5bf9\u4e8e\u5206\u6bcd\u8fd9\u4e2a\u591a\u9879\u5f0f\u8fdb\u884c\u5217\u4e3e,\u56e0\u6b64\u5f88\u81ea\u7136\u7684\u5bf9\u4e8e\u6d41\u91cf\u8fdb\u884c\u5217\u4e3e,\u518d\u5728\u6bcf\u6b21\u5408\u6cd5\u7684\u5217\u4e3e\u4e2d\u8fdb\u884c\u6c42\u6700\u5c0f\u8def\u7684\u64cd\u4f5c\u3002\n\n## 05 \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#include <cstring>\n#include <iomanip>\nconst int inf = 1e6;\nusing namespace std;\nint n, m, head[2000000], maxx, cnt,dis[2000000];\nbool vis[2000000];\nstruct EDGE\n{\n    int next, to, c, f;\n} edge[2000000];\nstruct node\n{\n    int dis;\n    int pos;\n    bool operator<(const node &x) const\n    {\n        return x.dis < dis;\n    }\n};\npriority_queue<node> q;\nvoid add(int u, int v, int c, int f)//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\n{\n    edge[++cnt].c = c;\n    edge[cnt].to = v;\n    edge[cnt].next = head[u];//cnt\u8868\u793a\u8be5\u8fb9\u7f16\u53f7\n    edge[cnt].f = f;\n    head[u] = cnt;\n}\nvoid init()\n{\n    int a, b, c, f;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= m; i++)\n    {\n        scanf(\"%d%d%d%d\", &a, &b, &c, &f);\n        add(a, b, c, f);\n        add(b, a, c, f);\n    }\n}\nvoid dijkstra()\n{\n    for (int x = 1; x <= 1000; x++)\n    {\n        for(int j=1;j<=n;j++){\n            dis[j]=inf;\n            vis[j]=0;\n        } \n        dis[1]=0;\n        q.push((node){0, 1});\n        while (!q.empty())\n        {\n            node tmp = q.top();\n            q.pop();\n            int u = tmp.pos;\n            if (vis[u])\n                continue;\n            vis[u] = 1;\n            for (int i = head[u]; i; i = edge[i].next)\n            {\n                if(edge[i].f<x) continue;\n                int v = edge[i].to;\n                if (dis[u] + edge[i].c < dis[v])\n                {\n                    dis[v] = dis[u] + edge[i].c;\n                    if (!vis[v])\n                    {\n                        q.push((node){dis[v], v});\n                    }\n                }\n            }\n        }\n        if(dis[n]!=inf){\n            maxx=max(maxx,x*1000000/dis[n]);//\u9898\u76ee\u4e2d\u6240\u8bf4\u7684\u5411\u4e0b\u53d6\u6574\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5148\u4e58\u4e0a1E6\u518d\u9664\u4ee5\u6700\u5c0f\u8def\u6765\u5b9e\u73b0\n        }\n    }\n}\nint main()\n{\n    init();\n    dijkstra();\n    cout <<maxx;\n}\n```\n\n\n\u6284\u4ee3\u7801\u6ca1\u610f\u4e49\uff0c\u5efa\u8bae\u53ef\u4ee5\u770b\u5b8c\u4e00\u904d\u518d\u81ea\u5df1\u5199\u3002\n## 06 \u4e00\u4e9b\u5c0f\u5c0f\u7684\u6613\u9519\u70b9\n\n```cpp\nif(edge[i].f<x) continue;\n```\n\n### 1\n\u6211\u4eec\u901a\u8fc7\u8fd9\u884c\u4ee3\u7801\u6765\u8fc7\u6ee4\u6389\u4e0d\u5408\u6cd5\u7684\u5217\u4e3e\uff0c\u5373\u5982\u679c\u4e0b\u4e00\u6761\u6d41\u91cf\u6bd4\u6700\u5c0f\u91cf\u8fd8\u5c0f\u5c31\u820d\u53bb\u3002\n\n### 2\n```\nmaxx=max(maxx,x*1000000/dis[n]);\n```\n\n\u6211\u4eec\u901a\u8fc7\u8fd9\u884c\u6765\u5b9e\u73b0\u9898\u4e2d\u6240\u8bf4\u7684\u5411\u4e0b\u53d6\u6574\uff0c\u540c\u65f6\u4e58\u9664\u6cd5\u987a\u5e8f\u4e0d\u80fd\u6539\uff0c\u5426\u5219\u4f1a\u56e0\u4e3a $int$ \u7684\u7cbe\u5ea6\u95ee\u9898\u5bfc\u81f4\u7b54\u6848\u9519\u8bef\u3002\n\n _\u795d\u5404\u4f4d\u90fd\u80fdAC\u8fd9\u9053\u9898\uff0c\u7136\u540e\u795d\u8fd9\u7bc7\u9898\u89e3\u53ef\u4ee5\u8fc7\u5ba1\u6838\u3002_ \n\n",
        "postTime": 1599996989,
        "uid": 174635,
        "name": "ForeverHYX",
        "ccfLevel": 4,
        "title": "\u9898\u89e3002 P5837"
    },
    {
        "content": "\u62a2\u7b2c\u4e00\u7bc7\u9898\u89e3\n\n\n\u9898\u610f\u5c31\u662f\u627e\u51fa\u4e00\u6761\u8def\u5f84\u4f7f\u5f97$\\Large\\frac{min\\{f_i\\}}{\\sum c_i}$\u6700\u5927\n\n\n\u770b\u7684\u50cf\u5206\u6570\u89c4\u5212\uff0c\u679c\u65ad\u4e8c\u5206\n\n\n\u7136\u540e\u679a\u4e3e\u6700\u5c0f\u6d41\u91cf$flow$\uff0c\u53ea\u4fdd\u7559\u6d41\u91cf\u5927\u4e8e\u7b49\u4e8e$flow$\u7684\u8fb9\uff0c\u7136\u540e$Dij$\u8dd1\u5355\u5143\u6700\u77ed\u8def\u5f84\uff0c\u5f97\u5230$Dist_{1-n}$\uff0c\u7528$\\frac{flow}{Dist}$\u66f4\u65b0\u7b54\u6848\u5373\u53ef\n\n\u8003\u573a\u4ee3\u7801$O(N^2log^2N)$\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define rep(i,a,b) for(int i=a;i<=b;i++)\nusing namespace std;\nint n,m,tot,h[1005],o[1005],T=0,b[1005];\nstruct node{\n\tint nxt,to,c,f;\n}e[2005];\nvoid add(int x,int y,int z,int val){\n\te[++tot].nxt=h[x];h[x]=tot;e[tot].to=y;e[tot].c=z;e[tot].f=val;\n}\nint lim;\nint v[100005],d[100005];\npriority_queue<pair<int,int> >q;\nvoid dij(int mid){\n\tmemset(d,0x7f,sizeof(d));\n\tmemset(v,0,sizeof(v));\n\td[1]=0;q.push(make_pair(0,1));\n\twhile(!q.empty()){\n\t\tint x=q.top().second;q.pop();\n\t\tv[x]=1;\n\t\tfor(int i=h[x];i;i=e[i].nxt)if(e[i].f>=lim){\n\t\t\tif(d[x]+e[i].c*mid<d[e[i].to]){\n\t\t\t\td[e[i].to]=d[x]+e[i].c*mid;\n\t\t\t\tq.push(make_pair(-d[e[i].to],e[i].to));\n\t\t\t}\n\t\t}\n\t\twhile(!q.empty()&&v[q.top().second])q.pop();\n\t}\n}\nbool check(int mid){\n\tfor(int i=1;i<=T;i++){\n\t\tlim=b[i];\n\t\tdij(mid);\n\t\t//cout<<i<<\" \"<<lim<<\" \"<<d[n]<<endl;\n\t\tif(d[n]<=lim*1000000)return true;\n\t}\n\treturn false;\n}\nsigned main(){\n\t//freopen(\"pump.in\",\"r\",stdin);\n\t//freopen(\"pump.out\",\"w\",stdout);\n\tscanf(\"%lld%lld\",&n,&m);\n\trep(i,1,m){\n\t\tint u,v,x,y;\n\t\tscanf(\"%lld%lld%lld%lld\",&u,&v,&x,&y);\n\t\tadd(u,v,x,y);add(v,u,x,y);\n\t\to[i]=y;\n\t}\n\tsort(o+1,o+m+1);\n\tint l=0,r=1000000,ans=0;\n\trep(i,1,m)if(i==1||o[i]!=o[i-1])b[++T]=o[i];\n\twhile(l<=r){\n\t\tint mid=(l+r)>>1;\n\t\t//cout<<l<<\" \"<<mid<<\" \"<<r<<endl;\n\t\tif(check(mid))ans=mid,l=mid+1;\n\t\telse r=mid-1;\n\t\t//cout<<l<<\" \"<<mid<<\" \"<<r<<endl;\n\t\t//return 0;\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n\n\u8003\u5b8c\u60f3\u4e86\u4e0b\u53d1\u73b0\u4e0d\u9700\u8981\u4e8c\u5206\uff0c\u590d\u6742\u5ea6$O(N^2logN)$\n\n(\u62a2\u8fdb\u5ea6\uff0c\u6709\u95ee\u9898\u53f3\u8f6c\u8bc4\u8bba\u533a",
        "postTime": 1576766636,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5837 \u3010[USACO19DEC]Milk Pumping\u3011"
    },
    {
        "content": "# \u6b64\u9898\u6700\u77ed\u8def!\n\u7b2c\u4e00\u773c\u770b\u5230\u8fd9\u9053\u9898\u76ee\u4ee5\u4e3a\u662f\u5230\u63d0\u9ad8\u7ec4\u91cc\u7684\u7f51\u7edc\u6d41\u95ee\u9898\uff0c\u5176\u5b9e\u4e0d\u7136\uff0c\u76f4\u63a5\u7528\u666e\u53ca\u7ec4\u91cc\u7684\u65e0\u654c\u7684Dijkstra(\u6ca1\u6709\u8d1f\u6743\u8fb9)\u4e5f\u53ef\u4ee5\uff0c\u4f46\u662f\u4ed4\u7ec6\u8003\u8651\u4e86\u4e00\u4e0b\uff0c\u7b97\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u666e\u901a\u7684\u5806\u4f18\u5316Dijkstra\u4e3aO(mlogn),\u6b64\u98981~1000\u90fd\u8981\u8dd1\u4e00\u904d\uff0c\u518d\u5728\u57fa\u7840\u4e4b\u4e0a\u4e58\u4ee51000\uff0clogn\u4e0d\u8d85\u8fc710\uff0c1000\u00d710\u00d71000=10^7\uff0c\u5e76\u4e0d\u5927\uff0c\u5b9e\u5728\u4e0d\u653e\u5fc3\uff0c\u5c31\u7528scanf\u6216\u5feb\u8bfb\u5427\uff01\n#### \u601d\u8def\uff1a\u5148\u4ece1\u52301000\u8dd1\u4e00\u904d\uff0c\u7136\u540eDijkstra\u91cc\u7684\u51fd\u6570\u4e00\u6837\uff0c\u53ea\u662f\u540e\u9762\u8981\u52a0\u4e00\u53e5:\n```cpp\nmaxx=max(maxx,x*1000000/dis[n]);\n```\n\u5177\u4f53\u6211\u4eec\u770b\u4ee3\u7801\u5427\uff0c~~\u56e0\u8be5\u6ca1\u6709\u4e0d\u61c2\u7684\u4eba\u5427\uff1f~~\n# Code:\n```cpp\n#include<bits/stdc++.h>\n#define inf 1e9\nusing namespace std;\nint n,m,head[2000005],maxx=-1e9,cnt,dis[2000005];\nbool vis[2000005];\nstruct E {\n\tint next;\n\tint to;\n\tint c;\n\tint f;\n} edge[2000005];\nstruct node {\n\tint dis;\n\tint pos;\n\tbool operator<(const node &x) const {\n\t\treturn x.dis < dis; //\u91cd\u8f7d\u8fd0\u7b97\u7b26 \n\t}\n};\nvoid addedge(int u, int v, int c, int f) { //\u94fe\u5f0f\u524d\u5411\u661f\n\tcnt++;\n\tedge[cnt].c=c;\n\tedge[cnt].to=v;\n\tedge[cnt].next=head[u];\n\tedge[cnt].f=f;\n\thead[u]=cnt;\n\treturn ;\n}\npriority_queue<node> q;\nvoid Dijkstra() {\n\tfor(int x=1; x<=1000; x++) {\n\t\tfor(int j=1; j<=n; j++) { //\u521d\u59cb\u5316\n\t\t\tdis[j]=inf;\n\t\t\tvis[j]=0;\n\t\t}\n\t\tdis[1]=0; //\u81ea\u5df1\u548c\u81ea\u5df1\u6240\u5728\u7684\u70b9\u8ddd\u79bb\u4e3a0\n\t\tq.push((node) {0,1});\n\t\t/*\n\t\tnode a;\n\t\ta.dis=0;\n\t\ta.pos=1;\n\t\tq.push(a);\n\t\t*/\n\t\twhile(!q.empty()) {\n\t\t\tnode tmp=q.top(); //\u53d6\u961f\u9996(\u6ce8\u610f\uff1a\u4e0d\u662ffront\n\t\t\tq.pop();\n\t\t\tint u=tmp.pos;\n\t\t\tif (vis[u]) continue; //\u84dd\u767d\u70b9\u601d\u60f3\n\t\t\tvis[u]=1; //\u6807\u8bb0\u4e3a\u84dd\u70b9\n\t\t\tfor (int i=head[u]; i!=0; i=edge[i].next) { //\u904d\u5386\u76f8\u90bb\u70b9\n\t\t\t\tif(edge[i].f<x) continue; //\u6d41\u91cf\u6700\u5c0f\n\t\t\t\tint v=edge[i].to; //\u65b9\u4fbf\uff0c\u514d\u5f97\u4e0b\u9762\u53c8\u8981\u5199edge[i].to\u4e86\n\t\t\t\tif (dis[u]+edge[i].c<dis[v]) {\n\t\t\t\t\tdis[v]=dis[u]+edge[i].c;\n\t\t\t\t\tif(!vis[v]) {\n\t\t\t\t\t\tq.push((node) {dis[v], v}); //\u76f4\u63a5\u653e\u5165\u4f18\u5148\u961f\u5217\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tnode x;\n\t\t\t\t\t\tx.dis=dis[v];\n\t\t\t\t\t\tx.pos=v;\n\t\t\t\t\t\tq.push(x);\n\t\t\t\t\t\t*/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(dis[n]!=inf) {\n\t\t\tmaxx=max(maxx,x*1000000/dis[n]); //\u6839\u636e\u9898\u610f\u5f97\u77e5(\u8f93\u51fa10\u76846\u6b21\u65b9\u4e58\u4ee5\u6700\u4f18\u89e3\u7684\u503c\uff0c\u5e76\u5411\u4e0b\u53d6\u6574).\n\t\t}\n\t}\n\n\treturn ;\n}\nint main() {\n\n\tcin>>n>>m;\n\tfor (int i=1; i<=m; i++) {\n\t\tint a,b,c,f;\n\t\tcin>>a>>b>>c>>f;\n\t\taddedge(a,b,c,f);\n\t\taddedge(b,a,c,f); //\u5b58\u56fe \n\t}\n\tDijkstra(); //\u5f00\u59cb\u7b97\u6cd5 \n\tcout<<maxx<<endl; //\u8f93\u51fa\u6700\u7ec8\u7b54\u6848\n\treturn 0;\n}\n```\n### \u8c22\u8c22\u5927\u5bb6\uff01",
        "postTime": 1604538438,
        "uid": 252013,
        "name": "Answer_21",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5837 \u3010[USACO19DEC]Milk Pumping G\u3011"
    },
    {
        "content": "\u672c\u9898\u5c5e\u4e8e **\u6700\u77ed\u8def** \u9898\uff0c\u4f46\u8f83\u6a21\u677f\u9898\u8fd8\u662f\u6709\u5f88\u5927\u533a\u522b\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u89c6\u4e00\u6761\u7ba1\u9053\u4e3a\u4e00\u6761\u8fb9\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\u4fdd\u5b58\u8fde\u63a5\u7684\u7aef\u70b9 $u,v$ \u4ee5\u53ca\u7ba1\u9053\u7684\u82b1\u8d39 $c$ \u548c\u7ba1\u9053\u7684\u6d41\u91cf $f$\u3002\n\n\u672c\u6587\u4e2d\u5c06 $c$ \u7684\u542b\u4e49\u89c6\u4e3a\u4e00\u6761\u8fb9\u7684\u6743\u503c\u6216\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\n\n\u82e5\u89c6 Farmer John \u7684\u6574\u4e2a\u7ba1\u9053\u7f51\u7edc\u4e3a\u4e00\u4e2a\u56fe\uff0c\u5219\u6837\u4f8b\u6240\u8868\u793a\u7684\u56fe\u5982\u4e0b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/i4a4gywb.png?x-oss-process=image/resize,m_lfit,h_276,w_252)\n\n\u9898\u76ee\u8ba9\u6211\u4eec\u6c42\u51fa\u4ece $1$ \u5230 $n$ \u4e2d\uff0c$\\dfrac{\\min\\{f_i\\}}{\\sum c_i}$ \u7684\u6700\u5927\u503c\u3002\n\n\u4ece\u4e0a\u56fe\u6765\u770b\uff0c\u6211\u4eec\u53ea\u80fd\u9009\u62e9 $1 \\to 2 \\to 3$ \u7684\u8def\u5f84\u3002\u8fd9\u6837\uff0c\u6700\u5927\u503c\u4e3a $\\dfrac{\\min(4,3)}{2+5}=\\dfrac{3}{7}$\u3002\u6240\u4ee5\u8f93\u51fa\u4e3a $\\lfloor 10^6 \\times \\dfrac{3}{7} \\rfloor=428571$\u3002\n\n\u6211\u4eec\u4e0d\u59a8\u5728\u6837\u4f8b\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e00\u6761\u8fb9\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2h84iw19.png?x-oss-process=image/resize,m_lfit,h_278,w_249)\n\n\u9644\u52a0\u65b0\u8f93\u5165\uff1a\n\n```plain\n3 3\n2 1 2 4\n2 3 5 3\n1 3 3 6\n```\n\n\u5219\u6211\u4eec\u5e94\u5f53\u8003\u8651\u8def\u5f84 $1 \\to 2 \\to 3$ \u548c $1 \\to 3$\u3002\u521a\u624d\u5df2\u7ecf\u5206\u6790\u4e86 $1 \\to 2 \\to 3$ \u8def\u5f84\u7684\u7b54\u6848\uff0c\u5373 $\\dfrac{3}{7}$\u3002\u800c $1 \\to 3$ \u8def\u5f84\u7684\u7b54\u6848\u4e3a $\\dfrac{\\min(6)}{3}=2$\u3002\u7531\u4e8e $2 \\gt \\dfrac{3}{7}$\uff0c\u6240\u4ee5 $2$ \u6bd4 $\\dfrac{3}{7}$ \u66f4\u4f18\uff0c\u8f93\u51fa $\\lfloor 10^6 \\times 2 \\rfloor=200000$\u3002\n\n### $\\text{Solution 1: \u679a\u4e3e}$\n\n\u7531\u4e8e\u6bcf\u4e2a\u7aef\u70b9\u7684 $f$ \u90fd\u6709\u53ef\u80fd\u6210\u4e3a\u6240\u6709\u7684 $f$ \u503c\u7684\u6700\u5c0f\u503c\uff0c\u56e0\u800c\u6211\u4eec\u53ef\u5bf9\u54ea\u4e00\u6761\u8fb9\u7684 $f$ \u6ee1\u8db3 $f=\\min\\{f_i\\}$ \u8fdb\u884c\u679a\u4e3e\u3002\n\n\u4fdd\u8bc1 $\\min\\{f_i\\}$ \u540e\uff0c\u518d\u627e\u6700\u5c0f\u7684 ${\\sum c_i}$ \u5373\u53ef\uff0c\u8fd9\u6837\u9700\u8981\u8dd1 $m$ \u6b21 $\\text{Dijkstra}$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\mathcal O(m(n+m) \\log n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,cnt,head[1001],dis[1001],F[1001]; // \u8bb0\u5f55\u6240\u6709\u8fb9\u7684 f \u503c\ndouble ans; // \u4fdd\u5b58\u6700\u4f18\u89e3\u7684\u503c\nbool vis[1001];\nstruct edge\n{\n    int nxt,to,w,f;\n}e[2001];\nstruct node\n{\n    int pos,dis;\n    bool operator<(const node &x)const // \u4ece\u5c0f\u5230\u5927\u4e3a\u4f18\u5148\u961f\u5217\u9ed8\u8ba4\u6392\u5e8f\u65b9\u5f0f\n    {\n        return dis>x.dis;\n    }\n    // \u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u628a dis \u5c0f\u7684\u653e\u5728\u524d\u9762\uff0c\u4f46\u7531\u4e8e priority_queue \u7684\u6027\u8d28\uff0c\u9700\u8981\u98a0\u5012\u8fc7\u6765\n};\nvoid add(int u,int v,int w,int f) // \u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\n{\n    e[++cnt].nxt=head[u];\n    e[cnt].to=v;\n    e[cnt].w=w; // \u8fd9\u91cc\u7528 w \u4ee3\u66ff c\uff0c\u7b26\u5408\u5e38\u89c4\u4e60\u60ef\n    e[cnt].f=f;\n    head[u]=cnt;\n}\nint dijkstra(int s,int minf)\n{\n    memset(dis,0x3f,sizeof(dis)); // \u91cd\u7f6e\u6240\u6709\u70b9\u5230 1 \u7684\u603b\u8ddd\u79bb\uff08\u5373\u6240\u6709 c \u503c\u603b\u548c\uff09\u4e3a 0x3f3f3f3f\n    memset(vis,false,sizeof(vis)); // \u591a\u6b21 dijkstra \u8981\u6e05\u7a7a vis \u6570\u7ec4\n    dis[s]=0; // \u6e90\u70b9\u8ddd\u79bb\u8d4b\u503c\u4e3a 0\n    priority_queue<node>Q;\n    Q.push((node){s,0}); // \u5c06\u6e90\u70b9\u7684\u6570\u636e\u538b\u5165\u961f\u5217\u4e2d\n    while(Q.size())\n    {\n        int x=Q.top().pos; // \u53d6\u961f\u5217\u5143\u7d20\u6240\u8868\u793a\u7684\u7aef\u70b9\u7f16\u53f7\n        Q.pop(); // \u5c06\u8be5\u5143\u7d20\u5f39\u51fa\n        if(vis[x])continue;\n        vis[x]=true;\n        // \u5224\u65ad\u662f\u5426\u88ab\u8bbf\u95ee + \u6807\u8bb0\u8bbf\u95ee\n        for(int i=head[x];i;i=e[i].nxt) // \u8fd0\u7528\u94fe\u5f0f\u524d\u5411\u661f\u7684\u6027\u8d28\u904d\u5386\n        {\n            int y=e[i].to;\n            if(e[i].f<minf)continue; // \u5982\u679c\u8be5\u8fb9\u7684 f \u503c\u5c0f\u4e8e\u672c\u6b21 dijkstra \u6240\u679a\u4e3e\u7684 minf \u503c\uff0c\u5219\u8df3\u8fc7\u8be5\u8fb9\n            if(dis[y]>dis[x]+e[i].w) // \u6309\u7167\u6a21\u677f\u627e\u6700\u5c0f\u8ddd\u79bb\n            {\n                dis[y]=dis[x]+e[i].w;\n                if(!vis[y])Q.push((node){y,dis[y]});\n            }\n        }\n    }\n    return dis[n];\n}\nint read()\n{\n    int x=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')\n    {\n        x=(x<<1)+(x<<3)+(ch^48);\n        ch=getchar();\n    }\n    return x;\n}\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=m;i++)\n    {\n        int u=read(),v=read(),c=read(),f=read();\n        add(u,v,c,f);\n        add(v,u,c,f);\n        // \u65e0\u5411\u56fe\uff0c\u9700\u5b58\u4e24\u6b21\u8fb9\n        F[i]=f;\n    }\n    for(int i=1;i<=m;i++)ans=max(ans,1e6*F[i]/dijkstra(1,F[i]));\n    // \u628a ans \u503c\u8d4b\u503c\u4e3a\u5f53\u524d\u679a\u4e3e\u5230\u7684 minf \u548c dijkstra \u540e\u5f97\u5230\u6700\u5c0f\u8ddd\u79bb\u7684\u5546\u7684 1e6 \u500d\n    printf(\"%d\",int(ans)); // \u4e0b\u53d6\u6574\u8f93\u51fa\u7b54\u6848\n    return 0;\n}\n```\n\n### $\\text{Solution 2: \u6807\u8bb0}$\n\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5728 $\\text{Dijkstra}$ \u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u5728\u8fb9\u7684\u7ed3\u6784\u4f53\u518d\u52a0\u4e00\u4e9b\u53d8\u91cf\u6765\u4fdd\u5b58 $f$ \u548c $c$\uff0c\u5e76\u7528\u6d6e\u70b9\u7c7b\u578b\u8bb0\u5f55 $\\dfrac{\\min\\{f_i\\}}{\\sum c_i}$ \u7684\u503c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\mathcal O((n+m) \\log n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,cnt,head[1001];\ndouble dis[1001];\nbool vis[1001];\nstruct edge\n{\n    int nxt,to,w,f;\n}e[2001];\nstruct node\n{\n    int pos,f,dis;\n    // f \u4fdd\u5b58\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u7ecf\u8fc7\u7684 f \u503c\u4e2d\u6700\u5c0f\u7684\n    double d;\n    // \u6bd4\u524d\u4e00\u4efd\u4ee3\u7801\u4e2d\u591a\u4e86 d \u548c f \u4e24\u4e2a\u53d8\u91cf\uff0c\u5b9e\u9645\u4e0a d = f / dis\n    bool operator<(const node &x)const\n    {\n        return d<x.d;\n    }\n    // \u5b9e\u9645\u4e0a\u5e94\u8be5\u8ba9 d \u66f4\u5927\u7684\u5728\u524d\u9762\uff0c\u4f46\u4e0e\u524d\u9762\u540c\u7406\uff0c\u9700\u8981\u98a0\u5012\n};\nvoid add(int u,int v,int w,int f)\n{\n    e[++cnt].nxt=head[u];\n    e[cnt].to=v;\n    e[cnt].w=w;\n    e[cnt].f=f;\n    head[u]=cnt;\n}\ndouble dijkstra(int s)\n{\n    memset(vis,false,sizeof(vis));\n    priority_queue<node>Q;\n    Q.push((node){s,0x3f3f3f3f,0,0});\n    // \u6e90\u70b9\u7f16\u53f7\u4e3a s\uff0c\u800c f \u7684\u6700\u5c0f\u503c\u5e94\u5f53\u8bbe\u4e3a 0x3f3f3f3f\n    while(Q.size())\n    {\n        int x=Q.top().pos,f=Q.top().f,d=Q.top().dis;\n        Q.pop();\n        if(vis[x])continue;\n        vis[x]=true;\n        for(int i=head[x];i;i=e[i].nxt)\n        {\n            int y=e[i].to,nd=d+e[i].w,nf=min(f,e[i].f);\n            // nd \u8bb0\u5f55\u7f16\u53f7 1 \u548c y \u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n            // nf \u53d6\u5f53\u524d f \u503c\u548c\u4e4b\u524d\u6240\u6709 f \u503c\u4e2d\u6700\u5c0f\u7684\n            if(1.0*nf/nd>dis[y]) // \u6211\u4eec\u8981\u6c42\u7684\u662f\u6700\u5927\u7684 nf/nd\uff0c\u6240\u4ee5\u6309\u7167\u8fd9\u4e2a\u503c\u7684\u5927\u5c0f\u8fdb\u884c\u677e\u5f1b\n            {\n                dis[y]=1.0*nf/nd;\n                if(!vis[y])Q.push((node){y,nf,nd,dis[y]});\n            }\n        }\n    }\n    return dis[n];\n}\nint read()\n{\n    int x=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')\n    {\n        x=(x<<1)+(x<<3)+(ch^48);\n        ch=getchar();\n    }\n    return x;\n}\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=m;i++)\n    {\n        int u=read(),v=read(),c=read(),f=read();\n        add(u,v,c,f);\n        add(v,u,c,f);\n    }\n    printf(\"%d\",int(1e6*dijkstra(1))); // \u76f4\u63a5\u8f93\u51fa\u8dd1\u4e00\u6b21 dijkstra \u5f97\u5230\u7684\u503c\u5373\u53ef\n    return 0;\n}\n```\n\n\u795d\u5927\u5bb6 $\\text{NOIP2020 RP++}$\uff01",
        "postTime": 1606044581,
        "uid": 137367,
        "name": "hensier",
        "ccfLevel": 6,
        "title": "P5837 [USACO19DEC]Milk Pumping G \u9898\u89e3"
    },
    {
        "content": "## Subject\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5837)\n\n## Analysis\n\u9898\u610f\u6bd4\u8f83\u663e\u7136\uff0c\u5c31\u662f\u8981\u4e00\u6761\u80fd\u4f7f$ \\frac{min(f_i)}{\\Sigma{c_i}} $\u6700\u5927\u7684\u8def\u5f84\uff0c\u8003\u8651\u7528Dijkstra\u7b97\u6cd5\n\n\u7136\u540e\u679a\u4e3e\u6d41\u91cf\uff0c\u6bcf\u6b21\u66f4\u65b0\u7b54\u6848\u5373\u53ef\n\n## Code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\nusing namespace std;\n#define M 500010\n#define INF 0x3f3f3f3f\ninline int Readint(void){\n    int s=0,f=1;char c=getchar();\n    while(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n    while(isdigit(c)){s=s*10+c-48;c=getchar();}\n    return s*f;\n}\nstruct HeapNode{//\u5806\u4f18\u5316Dijkstra\n    int u,dist;\n    bool operator<(const HeapNode &x)const{\n        return dist>x.dist;\n    }\n};\nstruct Node{\n    int u,v,w,d;\n}Edge[M];\nint n,m,u,v,w,d,ans;\nint head[M],cnt;\nint dis[M];\nvoid addEdge(int u,int v,int w,int d){\n    Edge[++cnt]=(Node){head[u],v,w,d};\n    head[u]=cnt;\n    return;\n}\nvoid Dijkstra(int start){//\u6bcf\u6b21\u8dd1\u6700\u5c0f\u82b1\u8d39\n    priority_queue<HeapNode> Q;\n    memset(dis,INF,sizeof dis);\n    dis[1]=0;\n    Q.push((HeapNode){1,0});\n    while(!Q.empty()){\n        HeapNode now=Q.top();Q.pop();\n        int u=now.u,dist=now.dist;\n        if(dis[u]!=dist) continue;//\u5982\u679c\u677e\u5f1b\u8fc7\u4e86\uff0c\u5c31\u4e0d\u7ee7\u7eed\u64cd\u4f5c\u4e86\n        for(int i=head[u];i;i=Edge[i].u){\n            if(Edge[i].d<start) continue;//\u6700\u5c0f\u7684\u6d41\u91cf\n            int v=Edge[i].v;\n            if(dis[v]>dis[u]+Edge[i].w){\n                dis[v]=dis[u]+Edge[i].w;\n                Q.push((HeapNode){v,dis[v]});\n            }\n        }\n    }\n    if(dis[n]!=INF)\n        ans=max(ans,start*1000000/dis[n]);//\u6309\u9898\u76ee\u66f4\u65b0\u6700\u5927\u503c\n    return;\n}\nsigned main(void){\n    n=Readint();m=Readint();\n    while(m--){\n        u=Readint();v=Readint();\n        w=Readint();d=Readint();\n        addEdge(u,v,w,d);//\u6ce8\u610f\u662f\u53cc\u5411\u8fb9\n        addEdge(v,u,w,d);\n    }\n    for(int i=1;i<=1000;i++)//\u679a\u4e3e\u6d41\u91cf\n        Dijkstra(i);\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\n\u795d\u5927\u5bb6CSP J/S rp++",
        "postTime": 1603275328,
        "uid": 246005,
        "name": "StupidSeven",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P5837 \u3010[USACO19DEC]Milk Pumping G\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u7684\u6d41\u91cf\u662f\u8def\u5f84\u4e0a\u6d41\u91cf\u6700\u5c0f\u7684\u4e00\u6761\u8fb9\u7684\u6d41\u91cf\uff0c\u7136\u540e\u6709\u8fb9\u6570 $m\\le10^3$\uff0c\u6240\u4ee5\u6d41\u91cf\u6700\u591a\u5c31\u53ea\u6709 $10^3$ \u79cd\u53ef\u80fd\u3002\n\n\u5f88\u5feb\u5c31\u60f3\u5230\u679a\u4e3e\u4e00\u6761\u8fb9\u7684\u6d41\u91cf $f_i$ \u4f5c\u4e3a\u8def\u5f84\u6d41\u91cf\uff0c\u7136\u540e\u7528\u6240\u6709\u80fd\u627f\u53d7\u8fd9\u4e2a\u6d41\u91cf\u7684\u6c34\u7ba1\uff0c\u8dd1\u4e00\u904d SPFA \u6700\u77ed\u8def\u6c42\u5f53\u524d\u6d41\u91cf\u4e0b\u7684\u6700\u5c0f\u8d39\u7528 $s$\u3002\n\n$$ans=max(ans,\\frac{f_i\\times 10^6}{s})$$\n\n\u590d\u6742\u5ea6\u4e3a $\\operatorname O(m\\times \\min(m,f_{\\max}))$\u3002\n\n\u5c31\u662f\u8bf4\u5982\u679c $f_i\\le 10^3$ \u4fdd\u6301\u4e0d\u53d8\uff0c $m,n$ \u589e\u5927\u5230 $10^6$\uff0c\u4ecd\u7136\u662f\u53ef\u4ee5\u8fd9\u4e48\u8dd1\u7684\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define LL long long\n#define max(a,b) a>b?a:b\n#define min(a,b) a<b?a:b\nusing namespace std;\nconst int MAX=1e3+3;\nconst int MAA=1000000;\nstruct milk\n{\n    int to,next,z;\n    int f;//\u6d41\u91cf\n}a[MAX<<1];\nint h[MAX];\nint d[MAX];\nint val[MAX];\nint vit[MAX];\nbool vis[MAX];\nint n,m;\nint nam;\nint ans;\ninline void cheak(int f)\n{\n    memset(vit,0x3f,sizeof(vit));\n    vit[1]=0;\n    vis[1]=true;\n    int head=1,tail=0;\n    d[++tail]=1;\n    for(;head<=tail;)\n    {\n        int x=d[head++];\n        vis[x]=false;\n        for(int i=h[x];i>0;i=a[i].next)\n        if(a[i].f>=f)\n        {\n            int y=a[i].to;\n            if(vit[y]>vit[x]+a[i].z)\n            {\n                vit[y]=vit[x]+a[i].z;\n                if(!vis[y])d[++tail]=y,vis[y]=true;\n            }\n        }\n    }\n    if(vit[n]==0x3f3f3f3f)return;\n    // printf(\"%d/%d\\n\",f,vit[n]);\n    ans=max(ans,(f*MAA)/vit[n]);\n    return;\n}\ninline void add(int x,int y,int z,int f){a[++nam].to=y;a[nam].next=h[x];a[nam].z=z;a[nam].f=f;h[x]=nam;}\nLL rin()\n{\n    LL s=0;\n    char c=getchar();\n    bool bj=0;\n    for(;(c>'9'||c<'0')&&c!='-';c=getchar());\n    if(c=='-')c=getchar(),bj=true;\n    for(;c>='0'&&c<='9';c=getchar())s=(s<<1)+(s<<3)+(c^'0');\n    if(bj)return -s;\n    return s;\n}\nint main()\n{\n    n=rin();m=rin();\n    int x,y,z,f;\n    for(int i=1;i<=m;i++)\n    {\n        x=rin();y=rin();z=rin();f=rin();\n        add(x,y,z,f);\n        add(y,x,z,f);\n        val[i]=f;\n    }\n    sort(val+1,val+m+1);\n    ans=0;\n    int j;\n    for(int i=1;i<=m;i=j+1)\n    {\n        for(j=i;j<m&&val[j+1]==val[i];j++);\n        cheak(val[i]);\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1599391280,
        "uid": 73551,
        "name": "zjjws",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5837 \u3010[USACO19DEC]Milk Pumping G\u3011"
    },
    {
        "content": "### \u505a\u9898\u5168\u8fc7\u7a0b\n\n\u5728AC\u4e86Gold T3\u540e\u542c\u522b\u4eba\u8bf4\u8fd9\u9053\u9898\u5f88\u6c34\uff0c\u5c31\u5f00\u59cb\u5c1d\u8bd5\u3002\n\n\u6211\u9996\u5148\u60f3\u5230\u7684\u662f\u56fa\u5b9a\u8fb9\uff0c\u6c421\u5230\u8d77\u70b9\u7684\u6700\u77ed\u8def\uff0c\u7ec8\u70b9\u5230N\u7684\u6700\u77ed\u8def\uff0c\u52a0\u4e0a\u8fb9\u6743\u5c31\u662f\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u6700\u5c0f\u7684\u82b1\u8d39\u4e86\u5427\u3002\n\n\u4f46\u662f\u6700\u77ed\u8def\u4e2d\u95f4\u53ef\u80fd\u4f1a\u6709\u6d41\u91cf\u66f4\u5c0f\u7684\u554a\uff0c\u600e\u4e48\u529e\u554a\u2026\u2026\n\n\u7b49\u7b49\uff01\u5982\u679c\u4ece\u5927\u5230\u5c0f\u52a0\u8fb9\u2026\u2026\n\n\u6211\u6253\u5f00\u663e\u793a\u5668\uff0c\u624b\u6307\u53c8\u4e00\u6b21\u5728\u952e\u76d8\u4e0a\u98de\u8dc3\u3002\n\nP.S. : \u6211\u6253Gold\u7684\u65f6\u5019\u6ca1\u6709\u4e2d\u6587\u9898\u9762\uff0c\u5c31\u6309\u7167Google\u6240\u8bf4\u7684\u56db\u820d\u4e94\u5165\u505a\u4e86\uff0c\u4e4b\u540eWA\u4e865\u6b21\u624d\u53d1\u73b0\u81ea\u5df1\u6709\u591a\u8822\u2014\u2014\u8822\u5230\u4e0d\u4f1a\u770bround down\u662f\u4ec0\u4e48\u610f\u601d\u2026\u2026\n\n---\n\n### \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u4fdd\u8bc11\u548cN\u8054\u901a\u3002\n\n\u6bcf\u4e00\u6761\u8fb9\u6709\u6d41\u91cf\u548c\u82b1\u8d39\uff0c\u73b0\u5728\u8981\u627e\u5230\u4e00\u79cd\u4ece1\u5230N\u7684\u8def\u5f84\uff0c\u4f7f\u5f97$\\dfrac{min(f_i)}{\\Sigma c_i}$\u6700\u5927\u3002\n\n---\n\n### \u505a\u6cd5\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u662f\u4ece1\u5230N\u7684\u8def\u5f84\u4e2d\u6d41\u91cf\u6700\u5c0f\u7684\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u7528\u77e5\u90531\u5230\u8d77\u70b9\u7684\u6700\u77ed\u8def$C_1$\uff0c\u7ec8\u70b9\u5230N\u7684\u6700\u77ed\u8def$C_2$(\u8fd9\u4e24\u4e2a\u6700\u77ed\u8def\u90fd\u4e0d\u80fd\u7ecf\u8fc7\u6d41\u91cf\u6bd4\u8fd9\u6761\u8fb9\u5c0f\u7684\u8fb9)\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff1a\n\n$ans=\\dfrac{f_i}{C_1+C_2+c_i}$\n\n\u6211\u4eec\u53ef\u4ee5\u4ea4\u6362\u8d77\u70b9\u548c\u7ec8\u70b9\u4ece\u800c\u5f97\u5230\u4e24\u79cd\u4e0d\u4e00\u6837\u7684$C_1$\u548c$C_2$\u3002\u8fd9\u6837\u505a\u53ef\u4ee5\u9632\u6b62\u67d0\u4e00\u79cd\u65b9\u6848\u7684\u6700\u77ed\u8def\u6709\u91cd\u5408(\u60f3\u4e00\u60f3\uff0c\u4e3a\u4ec0\u4e48)\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u53ea\u7528\u5728\u6d41\u91cf\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u4e0b\u4f9d\u6b21\u5411\u56fe\u52a0\u8fb9\uff0c\u5728\u52a0\u4e00\u6761\u8fb9\u65f6\u8ba1\u7b97\u7b54\u6848\uff0c\u5e76\u4e14\u66f4\u65b0\u6700\u77ed\u8def\u3002\u8be6\u89c1\u4ee3\u7801\u3002\n\n\u590d\u6742\u5ea6\uff1a$O(M^2logN)$(\u5e38\u6570\u4e00\u822c\uff0c\u7531\u4e8e\u53d6\u51b3\u4e8e\u7ecf\u5e38\u8fdc\u5927\u4e8e\u70b9\u6570\u7684\u8fb9\u6570\u800c\u8dd1\u7684\u5f88\u6162)\n\nCode:\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<vector>\n#include<queue>\nusing namespace std;\nint len[1010][1010];\nint N,M;\nvector<int> sn[1010];\nstruct Pipe{\n\tint st,ed,fl,ct;\n\tbool operator < (const Pipe & a)const{\n\t\treturn fl<a.fl;\n\t}\n}A[1010];\nint dis[1010];\nbool vis[1010];\npriority_queue<pair<int,int> > pq;\nlong long ans;\nvoid dij(int u,int p){\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tdis[u]=0;\n\tpq.push(make_pair(0,u));\n\twhile(!pq.empty()){\n\t\tpair<int,int> r=pq.top();\n\t\tpq.pop();\n\t\tif(vis[r.second])\tcontinue;\n\t\tvis[r.second]=1;\n\t\tfor(int i=0,j=sn[r.second].size();i<j;i++){\n\t\t\tint tt = sn[r.second][i];\n\t\t\tif(tt<p)\tcontinue;\n\t\t\tint v = A[tt].st+A[tt].ed-r.second;\n\t\t\tif(dis[v]>dis[r.second]+A[tt].ct){\n\t\t\t\tdis[v]=dis[r.second]+A[tt].ct;\n\t\t\t\tpq.push(make_pair(-dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=N;i++)\tlen[u][i]=dis[i];\n}\nint main(){\n\tfreopen(\"pump.in\",\"r\",stdin);\n\tfreopen(\"pump.out\",\"w\",stdout);\n\tscanf(\"%d%d\",&N,&M);\n\tfor(int i=0;i<M;i++)\n\t\tscanf(\"%d%d%d%d\",&A[i].st,&A[i].ed,&A[i].ct,&A[i].fl);\n\tsort(A,A+M);\n\tfor(int i=0;i<M;i++){\n\t\tsn[A[i].st].push_back(i);\n\t\tsn[A[i].ed].push_back(i);\n\t}\n\tmemset(len,0x3f,sizeof(len));\n\tlen[1][1]=len[N][N]=0;\n\tfor(int i=M-1;i+1;i--){\n\t\tif(len[1][A[i].st]!=0x3f3f3f3f && len[N][A[i].ed]!=0x3f3f3f3f)\n\t\t\tans=max(ans,(long long)((1.0*A[i].fl/(len[1][A[i].st]+A[i].ct+len[N][A[i].ed]))*1000000));\n\t\tif(len[N][A[i].st]!=0x3f3f3f3f && len[1][A[i].ed]!=0x3f3f3f3f)\n\t\t\tans=max(ans,(long long)((1.0*A[i].fl/(len[N][A[i].st]+A[i].ct+len[1][A[i].ed]))*1000000));\n\t\tdij(1,i);dij(N,i);\n\t}\n\tprintf(\"%lld\\n\",ans);\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n```",
        "postTime": 1576772638,
        "uid": 60864,
        "name": "tiger2005",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5837 \u3010[USACO19DEC]Milk Pumping\u3011"
    },
    {
        "content": "## \u601d\u8def\u5206\u4eab\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 $n$ \u4e0e $m$ \u7684\u8303\u56f4\u90fd\u5f88\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5~~\u8003\u8651\u679a\u4e3e~~\u3002\n\n\u7531\u4e8e\u8fd9\u9053\u9898\u7684\u603b\u6d41\u91cf $Flow$ \u662f $\\min\\limits_{i \\in E} f_i$\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u603b\u6d41\u91cf $flow$\u3002\n\n\u7531\u4e8e\u6700\u540e\u7684\u7b54\u6848\u662f $\\dfrac{\\sum\\limits_{i \\in E} c_i}{\\min\\limits_{i \\in E} f_i}$\uff0c\u6240\u4ee5\u5728 $flow$ \u4e00\u5b9a\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u8981\u4f7f\u5f97 $\\sum\\limits_{i \\in E} c_i$ \u6700\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u6240\u6709 $f_i \\geqslant flow$ \u7684\u8fb9\u4e0a\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u3002\n\n\u6700\u540e\u5c06\u6240\u6709\u7684\u7b54\u6848\u53d6\u4e00\u4e2a $\\min$ \u5c31\u53ef\u4ee5\u4e86\u3002\n\n## \u4ee3\u7801\u5c55\u793a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1010,maxm=2010;\nint n,m,dis[maxn],vis[maxn],ansx,ansy;\nint cnt,bg[maxn],ne[maxm],to[maxm],le[maxm],fl[maxm];\npriority_queue<pair<int,int> >q;\nvoid add(int x,int y,int z,int k){\n\tcnt++;\n\tne[cnt]=bg[x];\n\tto[cnt]=y;\n\tle[cnt]=z;\n\tfl[cnt]=k;\n\tbg[x]=cnt;\n}\nvoid dijkstra(int flow){//\u6700\u77ed\u8def\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tdis[1]=0;\n\tq.push(make_pair(0,1));\n\twhile(!q.empty()){\n\t\tint x=q.top().second;\n\t\tq.pop();\n\t\tif(vis[x]==1){\n\t\t\tcontinue;\n\t\t}\n\t\tvis[x]=1;\n\t\tfor(int i=bg[x];i;i=ne[i]){\n\t\t\tint y=to[i];\n\t\t\tif(fl[i]<flow){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(dis[x]+le[i]<dis[y]){\n\t\t\t\tdis[y]=dis[x]+le[i];\n\t\t\t\tq.push(make_pair(-dis[y],y));\n\t\t\t}\n\t\t}\n\t}\n\tif(dis[n]==0x3f3f3f3f){\n\t\treturn;\n\t}\n\tif(1.*ansx/ansy<1.*flow/dis[n]){\n\t\tansx=flow;\n\t\tansy=dis[n];\n\t}\n}\nint main(){\n\tfreopen(\"milk.in\",\"r\",stdin);\n\tfreopen(\"milk.out\",\"w\",stdout);\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y,z,k;\n\t\tscanf(\"%d%d%d%d\",&x,&y,&z,&k);\n\t\tadd(x,y,z,k);\n\t\tadd(y,x,z,k);\n\t}\n\tansx=0;ansy=1;\n\tfor(int i=1;i<=1000;i++){//\u679a\u4e3eflow\n\t\tdijkstra(i);\n\t}\n\tprintf(\"%.0lf\",floor(1000000.*ansx/ansy));//\u8f93\u51fa\u7b54\u6848\n\treturn 0;\n}\n\n```\n",
        "postTime": 1604020738,
        "uid": 90176,
        "name": "xixiup",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5837 \u3010[USACO19DEC]Milk Pumping G\u3011"
    },
    {
        "content": "### [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5837)\n\n**\u601d\u8def\u7b80\u8ff0\uff1a**\n\n\u5148\u5efa\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\n\n\u7136\u540e\u679a\u4e3e$1\\ldots1000$\u7684\u6d41\u91cf\uff0c\n\n\u6bcf\u6b21\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\n\n\u6700\u540e\u53d6 \u6d41\u91cf$\\times1000000/dis[n]$\u7684\u6700\u5927\u503c\uff0c\u8f93\u51fa\u5373\u53ef\u3002\n\n**\u6ce8\u610f**\u6bcf\u4e00\u904d\u6700\u77ed\u8def\u524d\u90fd\u8981\u6e05\u7a7a\u4e00\u4e0b\u6570\u7ec4\u3002\n\n------------\n\n**\u4ee3\u7801\u5c55\u793a\uff1a**\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\nusing namespace std;\nconst int maxn=4e3+10;\nconst int INF=1e9+7;\nqueue<int>Q;\nint n,m,head[maxn],dis[maxn],vis[maxn],cnt,ans;\nstruct node{\n    int to,nxt,val,w;\n}edge[maxn];\nvoid add(int u,int v,int w,int val){\n    edge[++cnt].to=v;\n    edge[cnt].nxt=head[u];\n    edge[cnt].val=val;\n    edge[cnt].w=w;\n    head[u]=cnt;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(re int i=1;i<=m;++i){\n        int X,Y,W,F;\n        scanf(\"%d%d%d%d\",&X,&Y,&W,&F);\n        add(X,Y,W,F);\n        add(Y,X,W,F);\n    }\n    for(re int i=1;i<=1000;++i){\n        for(re int j=1;j<=n;++j){\n            dis[j]=INF;\n            vis[j]=0;\n        }\n        dis[1]=0;\n        vis[1]=1;\n        Q.push(1);\n        while(!Q.empty()){\n            int now=Q.front();\n            Q.pop();\n            vis[now]=0;\n            for(re int k=head[now];k;k=edge[k].nxt){\n                if(edge[k].val<i){\n                    continue;\n                }\n                if(dis[now]+edge[k].w<dis[edge[k].to]){\n                    dis[edge[k].to]=dis[now]+edge[k].w;\n                    if(!vis[edge[k].to]){\n                        vis[edge[k].to]=1;\n                        Q.push(edge[k].to);\n                    }\n                }\n            }\n        }\n        if(dis[n]!=INF){\n            ans=max(ans,i*1000000/dis[n]);\n        }\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n>$Thanks$ $For$ $Watching!$",
        "postTime": 1599870702,
        "uid": 115291,
        "name": "\u8fc7\u5f80\u68a6\u9b47\u4e4b\u6b87",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5837 \u3010[USACO19DEC]Milk Pumping G\u3011"
    },
    {
        "content": "### \u6838\u5fc3\u7b97\u6cd5 Dijkstra\n\n\n------------\n\u8fd9\u9898\u4e4d\u4e00\u770b\uff0c\u50cf\u4e00\u9053Dijkstra\u7684\u88f8\u9898\u3002\u5176\u5b9e\u4e0d\u7136\u3002\n\n\u8fd9\u9053\u9898\u7684\u4e0d\u540c\u4e4b\u5904\u5c31\u5728\u4e8e\uff0c\u8fd9\u9053\u9898\u8981\u6c42\u7ef4\u62a4\u4e24\u4e2a\u91cf\uff0c\u4e00\u4e2a\u662f\u6d41\u91cf\uff0c\u4e00\u4e2a\u662f\u82b1\u8d39\u3002\u800cDijkstra\u7684\u6a21\u677f\u9898\uff0c\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u91cf\uff0c\u5c31\u662f\u82b1\u8d39\uff08\u8def\u7a0b\uff09\u3002\n\n\u8fd9\u9053\u9898\u4e2d\uff0c\u6d41\u91cf\uff0c\u4e0e\u82b1\u8d39\u7684\u8054\u7cfb\u5e76\u4e0d\u662f\u5fc5\u7136\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c**\u4e0d\u53ef\u4ee5\u60f3\u5f53\u7136\u7684\u8ba4\u4e3a\uff0c\u6700\u77ed\u8def\u4e0a\u7684\u6d41\u91cf\u4e0e\u82b1\u8d39\u7684\u6bd4\u5c31\u662f\u6240\u6c42\u7684\u7b54\u6848\u3002**\uff08\u7b54\u4e3b\u5c31\u4e27\u547d\u4e0e\u6b64\uff09\n\n\u90a3\u4e48\uff0c\u5982\u4f55\u89e3\u51b3\u5462\uff1f\n\n### \u679a\u4e3e\uff0c\u63a7\u5236\u53d8\u91cf\n\n------------\n\n\u6211\u4eec\u8981\u7ef4\u62a4\u4e24\u4e2a\u503c\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u5176\u4e2d\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u518d\u5728\u53bb\u5bfb\u627e\u5bf9\u5e94\u7684\u53e6\u4e00\u4e2a\u503c\u3002\n\n\u5728\u8fd9\u9053\u9898\u4e2d\uff0c\u660e\u663e\u662f\u63a7\u5236\u6d41\u91cf\u597d\u4e00\u4e9b\u3002\uff08\u56e0\u4e3a\u82b1\u8d39\u4e0d\u597d\u63a7\u5236\uff09\n\n\u4e0d\u65ad\u679a\u4e3e\u6d41\u91cf\uff0c\u8dd1\u51fa\u5176\u5bf9\u5e94\u7684\u82b1\u8d39\uff0c\u7136\u540e\u4e0e\u5148\u524d\u7684\u6bd4\u8f83\u3002\u6700\u540e\u5f97\u51fa\u6700\u5927\u7684\u3002\n\n### \u4ee3\u7801\u5982\u4e0b\uff08\u7ec6\u8282\u8bf4\u660e\u89c1\u6ce8\u91ca\uff09\n```cpp\n#include <bits/stdc++.h>\n#define MAXN 2000005\n#define INF 0x3f3f3f3f\nstruct EDGE{int to,nxt,val,cost;}\te[MAXN];\n//\u5b58\u56fe \nstruct node \n{\n\tint pos,dis;\n\tbool operator < (const node & x) const\t{ return x.dis < dis; }\n\t//\u91cd\u5b9a\u5411 \n};\nint adj[MAXN],cnt=0,vis[MAXN],dis[MAXN];\nint n,m,ans=0;\nstd::priority_queue < node > q;\n//\u5806\u4f18\u5316Dijkstra \nvoid addedge(int u,int v,int c,int f){e[++cnt].to=v; e[cnt].nxt=adj[u]; e[cnt].val=f;\te[cnt].cost=c; adj[u]=cnt;}\n//\u94fe\u5f0f\u524d\u5411\u661f \nvoid Dijkstra(int minflow)\n{\n\t//\u8bb0\u5f97\u5148\u6e05\u7a7a \uff0c\u521d\u59cb\u5316 \n\tstd::memset(vis,0,sizeof(vis));\n\tfor(int i=1;i<=n;++i)\tdis[i]=INF;\n\twhile(!q.empty())\tq.pop(); \n\t//Dijkstra\n\tdis[1]=0;\tq.push((node) {1,0});\n\twhile(!q.empty())\n\t{\n\t\tnode temp=q.top();\tq.pop();\n\t\tint u=temp.pos;\n\t\tif(vis[u])\tcontinue;\tvis[u]=1;\n\t\tfor(int i=adj[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].to;\n\t\t\tif(minflow>e[i].val) continue;\t//\u63a7\u5236\u6700\u5c0f\u7684\u6d41\u91cf\n\t\t\t//\u5982\u679c\u4e0b\u4e00\u4e2a\u8fb9\u7684\u6d41\u91cf\u6bd4\u6700\u5c0f\u7684\u8fd8\u5c0f\uff0c\u5c31\u820d\u6389\u3002 \n\t\t\tif(dis[v]>dis[u]+e[i].cost)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+e[i].cost;\n\t\t\t\tif(!vis[v])\n\t\t\t\t\tq.push((node) {v,dis[v]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tstd::scanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint u,v,c,f;\n\t\tstd::scanf(\"%d%d%d%d\",&u,&v,&c,&f);\n\t\taddedge(u,v,c,f);\taddedge(v,u,c,f);\n\t\t//\u65e0\u5411\u56fe \n\t}\n\tfor(int minflow=1;minflow<=1000;++minflow)//\u679a\u4e3e \n\t{\n\t\tDijkstra(minflow);\n\t\tif(dis[n]!=INF) ans=std::max(ans,minflow*1000000/dis[n]);\n\t}\n\tstd::printf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1595691060,
        "uid": 128451,
        "name": "x_miracle",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5837 \u3010[USACO19DEC]Milk Pumping G\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5176\u5b9e\u60f3\u6cd5\u633a\u7b80\u5355\u7684\uff0c\u56e0\u4e3a\u4ed6\u53ea\u9700\u8981\u7b80\u5355\u7684\u628a\u6bcf\u4e2a\u70b9\u7684\u82b1\u8d39\u548c\u6d41\u91cf\u7528dp\u8bb0\u4e0b\u6765\u5c31\u597d\u4e86\n\n1.\u600e\u4e48\u8bb0\uff1a\n\n\u9996\u5148\u8003\u8651dp\u7684\u72b6\u6001\u3002\u7531\u4e8e\u6240\u5728\u7684\u70b9\u548c\u6d41\u91cf\u90fd\u8981\u8bb0\uff0c\u6240\u4ee5dp\u5f00\u4e8c\u7ef4\uff0c\u4e00\u7ef4\u8bb0\u6240\u5728\u7684\u70b9\uff0c\u53e6\u4e00\u7ef4\u8bb0\u53bb\u54ea\n\n```cpp\n//dp[i][j] ==> i \u662f\u73b0\u5728\u6240\u5728\u7684\u70b9\uff0cj\u662f\u6d41\u91cf\n```\n\n2.\u4ece\u54ea\u5f00\u59cb\n\n~~\u770b\u9898~~\n\n3.\u8f6c\u79fb\u65b9\u6cd5\n\n```cpp\n//dp[\u8981\u53bb\u7684\u70b9][\u73b0\u5728\u7684\u6d41\u91cf\u548c\u8981\u53bb\u7684\u6d41\u91cf\u7684\u6700\u5c0f\u503c] = dp[\u73b0\u5728\u7684\u70b9][\u73b0\u5728\u7684\u6d41\u91cf]+\u53bb\u7684\u82b1\u8d39\n```\n\n4.\u8f93\u51fa\n\n\u5728\u7ec8\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u80fd\u5230\u8fbe\u7684\u6d41\u91cf\uff0c\u6700\u5927\u503c\u5c31\u662f\u82b1\u8d39/\u6d41\u91cf\n\nspfa\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <math.h>\n#include <cstring>\n#include <queue>\n#include <fstream>\n\nusing namespace std;\n#define pp pair<long long,long long>\n#define mp make_pair\nlong long maxi = 0, n,m, tot=0,head[100001];\nstruct Edge{\n  long long to, next,cost,flow;\n}edge[100001];\nvoid add(long long x, long long y,long long co, long long fl){\n  edge[++tot].to = y;\n  edge[tot].cost = co;\n  edge[tot].flow = fl;\n  edge[tot].next = head[x];\n  head[x] = tot;\n}\nlong long dp[1001][1001];\nvoid dij(long long a, long long b){ // dijkstra\n  dp[a][b] = 0;\n  queue<pp> q;\n  q.push(mp(a,b));\n  while(!q.empty()){\n    long long qf = q.front().first;\n    long long qs = q.front().second;\n    q.pop();\n    for(long long i=head[qf];i;i=edge[i].next){\n      long long t = edge[i].to, flo = edge[i].flow;\n      if (dp[t][min(qs,flo)]>dp[qf][qs]+edge[i].cost){\n        dp[t][min(qs,flo)] = dp[qf][qs]+edge[i].cost; //\u4e0a\u9762\u8bb2\u7684\u8f6c\u79fb\n        q.push(mp(t,min(qs,flo)));\n      }\n    }\n  }\n}\nint main(){\n  // setIO(\"pump\");\n  cin >> n >> m;\n  for (long long i=0;i<m;i++){\n    long long a,b,c,d; cin >> a >> b >> c >> d; add(a,b,c,d); add(b,a,c,d);\n  }\n  memset(dp,0x3f3f3f3f,sizeof(dp)); \n  dij(1,1000);\n  for (long long i=1;i<1000;i++){\n    if (dp[n][i]>1e9) continue; //\u8d8a\u754c\u4e0d\uff1f\n    long long num = floor((double)(i*1e6)/(double)dp[n][i]); // \u4e0d\u8d8a\u754c\u8ba1\u7b97\n    maxi = max(maxi,num);\n  }\n  cout << maxi;\n}\n\n```\n",
        "postTime": 1578039173,
        "uid": 219099,
        "name": "pocafup",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5837 \u3010[USACO19DEC]Milk Pumping\u3011"
    },
    {
        "content": "\u8bb2\u4e00\u4e0b\u6211\u7684\u505a\u6cd5\u5427\n\n\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u9053\u9898\u53ea\u662fdijkstra\u7684\u53d8\u5f62\n\n\u4ee51\u4e3a\u539f\u70b9\u8dd1\u5355\u6e90\u6700\u77ed\u8def\n\n\u6211\u4eec\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4\uff1a\u4e00\u4e2a\u662fdis\u6570\u7ec4\uff0c\u5c31\u662f\u6e90\u70b9\u5230\u5f53\u524d\u70b9\u7684cost\uff1b\n\n\u4e00\u4e2a\u662fmf\u6570\u7ec4\uff0c\u6307\u7684\u662f\u539f\u70b9\u5230\u5f53\u524d\u70b9\u7684\u6700\u5c0f\u6d41\n\n\u6bcf\u6b21\u53d6\u51fa**\u8def\u5f84\u82b1\u8d39\u4e0e\u8def\u5f84\u6d41\u91cf\u4e4b\u6bd4\u6700\u5c0f**\u7684\u5373\u53ef\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528priority_queue\u5b9e\u73b0\uff08\u5c06\u9898\u76ee\u8981\u6c42\u7684\u8def\u5f84\u6d41\u91cf\u4e0e\u8def\u5f84\u82b1\u8d39\u4e4b\u6bd4\u6700\u5927\u8f6c\u6362\u4e00\u4e0b\uff09\n\nMy code is below:\n```cpp\n#include\"bits/stdc++.h\"\nusing namespace std;\ninline int read(){\n\tint x=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9') ch=getchar();\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}\n\treturn x;\n}\nint wl;\nint head[2010];\nstruct node{\n\tint to,nxt,cost,flow;\n}star[2010];\ninline void add(int from,int to,int cost,int flow){\n\twl++;\n\tstar[wl].cost=cost;\n\tstar[wl].flow=flow;\n\tstar[wl].to=to;\n\tstar[wl].nxt=head[from];\n\thead[from]=wl;\n}\nint n,m;\nint mf[2010];\nint vis[2010];\nint dis[2010];\ntypedef pair<long double,int> p;//\u5f00double\u6216\u8005long double\u90fd\u884c\uff0c\u522b\u5f00int\npriority_queue<p,vector<p>,greater<p> > q;\ninline void dijkstra(){\n\tfor(int i=1;i<=n;++i)\n\tdis[i]=100000000;\n\tdis[1]=0;\n\tq.push(make_pair(0,1));\n\tmemset(mf,127,sizeof(mf));\n\twhile(!q.empty())\n\t{\n\t\tint u=q.top().second;\n\t\tvis[u]=1;\n\t\tq.pop();\n\t\tfor(int i=head[u];i;i=star[i].nxt)\n\t\t{\n\t\t\tint v=star[i].to;\n\t\t\tif(vis[v]) continue;\n\t\t\tint nowflow=star[i].flow,nowcost=star[i].cost;\n\t\t\tint mini=min(nowflow,mf[u]);\n\t\t\tif((dis[u]+nowcost)*mf[v]<dis[v]*mini||mf[v]==2139062143)//\u8fdb\u884c\u66f4\u65b0\n\t\t\t{\n\t\t\t\tmf[v]=mini;//\u8fd9\u91cc\u4e0d\u7528\u628amf[u]\u7f6e\u4e3amini\uff0c\u56e0\u4e3au\u8fd8\u8981\u66f4\u65b0\u522b\u7684\u70b9\n\t\t\t\tdis[v]=dis[u]+nowcost;\n\t\t\t\tq.push(make_pair(dis[v]/mf[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\t//freopen(\"1.in\",\"r\",stdin);\n\t//freopen(\"1.out\",\"w\",stdout);\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint a,b,c,d;\n\t\ta=read(),b=read(),c=read(),d=read();\n\t\tadd(a,b,c,d),add(b,a,c,d);\n\t}\n\tdijkstra();\n\t//cout<<mf[n]<<\" \"<<dis[n]<<endl;\n\tcout<<mf[n]*1000000/dis[n];\n\treturn 0;\n}\n```\n\u8fd9\u9053\u9898\u5f88\u7ec3\u8010\u5fc3\u6709\u4e9b\u5730\u65b9\u5199\u9519\u4e86\u5f88\u96be\u627e\uff0c\u7279\u522b\u662fDijkstra\u90e8\u5206\n\n\u65f6\u95f4\u590d\u6742\u5ea6O\uff08NlogN\uff09\n\n\u8fd8\u8dd1\u5f97\u633a\u5feb\uff0c\u4e0d\u5438\u6c27rk2\uff0c\u5438\u6c27\u76ee\u524d\u5e76\u5217rk1",
        "postTime": 1576941318,
        "uid": 135839,
        "name": "Fairicle",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5837 \u3010[USACO19DEC]Milk Pumping\u3011"
    }
]