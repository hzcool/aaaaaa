[
    {
        "content": "\u4e0d\u5f97\u4e0d\u8bf4\n\n\n\u5982\u679c\u6211\u5728\u8003\u573a\u4e0a\u9047\u5230\u8fd9\u9898\n\n\n\u53ea\u80fd\u62ff50\u5206\n\n\n\u4e00\u5f00\u59cb\u505a\u8fd9\u9898\u7684\u65f6\u5019\n\n\n~~\u54c8\u54c8\u54c8\u54c8\u54c8\u6211\u4e0d\u5728js\u7701\u4e1407\u5e74\u6211\u624d\u4e24\u5c81~~\n\n\n\u4ec0\u4e48\u4e5f\u6ca1\u60f3\uff0c\u770b200\u7684\u6570\u636e\u8303\u56f4\u6211\u5c31\u76f4\u63a5\u66b4\u529b\uff08\u8fde\u590d\u6742\u5ea6\u90fd\u6ca1\u7b97\uff09\n\n\n\u4e8e\u662f\u601d\u8def\u5c31\u662f\u6a21\u62df\n\n\n\u5148\u7528Floyd\u8dd1\u4e00\u904d\u6240\u6709\u70b9\u90fd\u6ca1\u88ab\u70b8\u6389\u7684\u6700\u77ed\u8def\n\n\n\u7136\u540e\u5728\u628a\u6bcf\u4e00\u4e2a\u70b9\u90fd\u70b8\u4e00\u904d\n\n\n\u4f8b\u5982\u70b8\u70b9x\n\n\n\u90a3\u4e48\u6211\u518d\u8dd1\u4e00\u904dFloyd\n\n\n\u5982\u679c\u4e2d\u8f6c\u70b9\u9047\u5230x\n\n\n\u90a3\u4e48\u6211\u5c31continue\n\n\n\u518d\u628a\u8dd1\u5b8c\u7684\u6700\u77ed\u8def\u548c\u4e00\u5f00\u59cb\u8dd1\u7684\u6700\u77ed\u8def\u6bd4\u8f83\n\n\n\u5982\u679c\u5f53\u4e2ddis[i][j]>\u70b8\u70b9x\u540e\u7684dis[i][j]\n\n\n\u90a3\u4e48x\u5c31\u662f\u91cd\u8981\u7684\u57ce\u5e02\n\n\n\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u6bcf\u4e2a\u70b9\u90fd\u8dd1\u4e00\u4e2aFloyd\u4e3an^4\n\n\n\n\u6240\u4ee5\u4ee3\u7801\u5927\u81f4\u662f\u4e0b\u9762\u8fd9\u6837\n\n\n\u6709\u6ce8\u91ca\n\n\n\n\n\n\n```c++\n\n\n\n      #include<iostream>\n      #include<cstdio>\n      #include<algorithm>\n      #include<queue>\n      using namespace std;\n      const int INF=2e6;\n      int e[205][205],dis[205][205],m,n;//e\u90bb\u63a5\u77e9\u9635\u5b58\u8fb9\uff0cdis[i][j]\u5b58i\u5230j\u7684\u6700\u77ed\u8def\n      priority_queue<int> q;//\u8f93\u51fa\u6700\u77ed\u8def\u65f6\u8981\u6392\u5e8f\n      //\u4ece\u4e3b\u7a0b\u5e8f\u5f00\u59cb\u9605\u8bfb\n      bool check(int x)\n      {\n          int map[205][205];//\u5f53\u70b8\u6389\u70b9x\u65f6\u5168\u56fe\u6700\u77ed\u8def\n          for(int i=1;i<=n;i++)\n              for(int j=1;j<=n;j++)\n              {\n                      map[i][j]=e[i][j];\n              }\n      //\u521d\u59cb\u5316\n          for(int k=1;k<=n;k++)    \n              for(int i=1;i<=n;i++)\n                  for(int j=1;j<=n;j++)\n                  {\n                      if(k==x)//\u5982\u679c\u4e2d\u8f6c\u70b9\u4e3ax\uff0c\u90a3\u4e48\u4e0d\u8fdb\u884c\u8fd9\u6b21\u5faa\u73af\n                          continue;\n                      map[i][j]=min(map[i][j],map[i][k]+map[k][j]);\n                  }    \n          for(int i=1;i<=n;i++)\n              for(int j=1;j<=n;j++)\n                  {\n                      if(map[i][j]>dis[i][j])\n                          return true;//\u5982\u679c\u70b8\u6389\u70b9x\u540e\u7684\u6700\u77ed\u8def\u6bd4\u539f\u6700\u77ed\u8def\u5927\uff0c\u8bc1\u660ex\u662f\u91cd\u8981\u7684\u57ce\u5e02\n                  }\n          return false;//x\u4e0d\u662f\u91cd\u8981\u7684\u57ce\u5e02\n      }\n      int main()\n      {\n          cin>>n>>m;//\u8bfb\u5165\u8fb9\u6570m\uff0c\u70b9\u6570n\n          for(int i=1;i<=n;i++)\n              for(int j=1;j<=n;j++)\n              {\n                  if(i==j)\n                      e[i][j]=dis[i][j]=0;\n                  else\n                      e[i][j]=dis[i][j]=INF;\n              }\n           //\u521d\u59cb\u5316\n          for(int i=1,x,y,u;i<=m;i++)\n          {\n              cin>>x>>y>>u;\n              e[x][y]=e[y][x]=dis[x][y]=dis[y][x]=u;\n          }//\u8bfb\u5165\n          for(int k=1;k<=n;k++)\n              for(int i=1;i<=n;i++)\n                  for(int j=1;j<=n;j++)\n                      dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);//\u8dd1\u4e00\u904dFloyd\n\n          for(int i=1;i<=n;i++)\n          {\n              if(check(i))//\u68c0\u6d4b\u5b83\u662f\u4e0d\u662f\u91cd\u8981\u57ce\u5e02\uff0c\u8fd9\u4e2a\u65f6\u5019\u628a\u76ee\u5149\u8f6c\u5411check\u51fd\u6570\n                  q.push(-i);//\u61d2\u5f97\u5c06q\u6539\u6210\u4ece\u5c0f\u5230\u5927\uff0c\u76f4\u63a5\u63a8\u8d1f\u6570\u8fdb\u53bb\n          }\n          if(q.empty())   cout<<\"No important cities.\";//\u961f\u7a7a\u4ee3\u8868\u65e0\u91cd\u8981\u57ce\u5e02   \n          else\n          {\n              while(!q.empty())\n              {\n                  int v=-q.top();q.pop();\n                  cout<<v<<' ';\n              }\n          }//\u8f93\u51fa\n          return 0;\n      }\n```\n\n\n\n\n\n\n\u8fd9\u4e2a\u65f6\u5019\n\n\n[\u8fd9\u6bb5\u4ee3\u7801\u53ea\u80fd\u8fc75\u4e2a\u70b9](https://www.luogu.org/record/show?rid=5483453)\n\n\n\n\n\n\n\n~~\u5f00\u4e86\u6c27\u6c14\u9ed1\u79d1\u6280\u53ef\u4ee5\u8fc7\u4e03\u4e2a\u70b9~~\n\n\n\u90a3\u4e48\u6211\u4eec\u8981\u6362\u4e00\u79cd\u601d\u8def\n\n\n\uff08\u6211\u4e5f\u662f\u60f3\u4e86\u4e00\u4e2a\u665a\u4e0a\uff09\n\n\n\u8bbecnt[i][j]\u8868\u793ai\u5230j\u7684\u6700\u77ed\u8def\u5f84\u6761\u6570\n\n\n\u5982\u679c\u70b9x\u5728i\u5230j\u7684\u6700\u77ed\u8def\u4e2d\u51fa\u73b0\u4e86cnt[i][j]\u6b21\n\n\n\u5373i\u5230j\u7684\u6700\u77ed\u8def\u4e2d\u6bcf\u4e00\u6761\u90fd\u8981\u7ecf\u8fc7x\u7684\u8bdd\n\n\n\u90a3\u4e48x\u4e00\u5b9a\u4e3a\u91cd\u8981\u57ce\u5e02\n\n\nOK\n\n\u603b\u7ed3\u4e00\u4e0b\u4e0a\u9762\n\n\n\u9664\u4e86\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u4e4b\u5916\n\n\n\u6211\u4eec\u8fd8\u9700\u8981cnt[i][j]\u548ci\u5230j\u7684\u6bcf\u4e00\u6761\u6700\u77ed\u8def\u6240\u7ecf\u8fc7\u7684\u70b9\n\n\n\u4f46\u662f\n\n\u8fd9\u5f88\u96be\u5b9e\u73b0\n\n\n~~\u5176\u5b9e\u662f\u6211\u4e0d\u4f1a~~\n\n\n\u601d\u8003\u4e00\u4e0b\n\n\n\u7b2c\u4e00\u70b9\n\n\n\u5728\u677e\u5f1b\u4e2d\n\n\ni\u5230j\u7684\u8def\u5f84\u4e2d\n\n\n\u5982\u679c\u901a\u8fc7\u70b9k\u53ef\u4ee5\u4f7f\u8def\u5f84\u957f\u5ea6\u7f29\u5c0f\n\n\n\u90a3\u4e48\n\ni\u5230j\u7684\u6700\u77ed\u8def\u4e00\u5b9a\u8981\u7ecf\u8fc7k\n\n\n\u7b2c\u4e8c\u70b9\n\n\n\u5982\u679c\u677e\u5f1b\u4e2d\u53d1\u73b0e[i][j]==e[i][k]+e[k][j]\n\n\n\u90a3\u4e48\u4e00\u5b9a\u4f1a\u4e0d\u6b62\u4e00\u6761\u6700\u77ed\u8def\n\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u4ee5\u524d\u53d1\u73b0\u7ecf\u8fc7\u7684\u70b9\u90fd\u4e0d\u4e00\u5b9a\u8d70\n\n\n\u6240\u4ee5\n\n\u9898\u76ee\u7684\u601d\u8def\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\n\n\n\u5728\u677e\u5f1b\u4e2d\n\n\n\n\n```c++\nif(e[i][j]>e[i][k]+e[k][j])\n{\n    e[i][j]=e[i][k]+e[k][j];                        city[i][j]=k;//k\u662f\u91cd\u8981\u57ce\u5e02\n}\n```\n\n\n\n\u5982\u679c\u53d1\u73b0i\u5230j\u4e0d\u6b62\u4e00\u6761\u6700\u77ed\u8def\n\n\n\u90a3\u4e48\u4ececity[i][j]\u4e2d\u79fb\u9664\u70b9k\n\n\n\u6700\u540e\u6211\u4eec\u8fd8\u6709\u4e24\u6b65\n\n\n\u4e00\u662f\u9898\u76ee\u8981\u6c42\u7684\u6392\u5e8f\n\n\n\u4e8c\u662f\u6211\u4eec\u7b97\u6cd5\u7684\u5224\u91cd\n\n\n\u90a3\u4e48\u4e24\u8005\u7efc\u5408\n\n\n\u6211\u4eec\u9009\u7528\u6876\u6392\u5e8f\n\n\n\u5b9a\u4e49\u4e00\u4e2abool\u5f62\u7684\u6570\u7ec4\n\n\n\u5faa\u73afi\u81f3n\u548cj\u81f3n\n\n\n\nans[city[i][j]]=true;\n\n\u8f93\u51fa\u65f6\n\n\n    \n\nif(ans[i])\n\n    cout<<i;\n\n\u6240\u4ee5\u6574\u9053\u9898\u7684\u601d\u8def\u5c31\u662f\u8fd9\u6837\u4e86\n\n\n\u4ee3\u7801\u6211\u5c31\u4e0d\u6253\u6ce8\u91ca\u4e86\n\n\n~~\u89c9\u5f97\u6211\u5199\u7684\u597d\u8bb0\u5f97\u7ed9\u4e2a\u8d5e\u54e6~~~\n\n\n\u4e0b\u4e3a\u4ee3\u7801\n\n\n\n\n\n\n```c++\n    #include<iostream>\n    #include<cstdio>\n    #include<algorithm>\n    #include<queue>\n    using namespace std;\n    const int INF=2e6;\n    int e[205][205],city[205][205],m,n;\n    bool ans[205],cs;\n    int main()\n    {\n        cin>>n>>m;    \n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                if(i!=j)\n                    e[i][j]=INF;\n        for(int i=1,x,y,u;i<=m;i++)\n        {\n            cin>>x>>y>>u;\n            e[x][y]=e[y][x]=u;\n        }\n        for(int k=1;k<=n;k++)\n            for(int i=1;i<=n;i++)\n                if(i!=k)\n                    for(int j=1;j<=n;j++)\n                        if(i!=j&&j!=k)\n                        {\n                            if(e[i][j]>e[i][k]+e[k][j])\n                            {\n                                e[i][j]=e[i][k]+e[k][j];\n                                city[i][j]=k;\n                            }\n                            else if(e[i][j]==e[i][k]+e[k][j])\n                                city[i][j]=-1;\n                        }\n        for(int i=1;i<=n;i++) \n            for(int j=1;j<=n;j++)\n                if(city[i][j]!=-1)\n                    ans[city[i][j]]=true;    \n        for(int i=1;i<=n;i++)\n            if(ans[i])\n                cout<<i<<' ',cs=true;\n        if(!cs)\n            cout<<\"No important cities.\";\n        return 0;\n    }\n```",
        "postTime": 1517117874,
        "uid": 55537,
        "name": "Parabola",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u6bd4\u8f83\u4e0d\u540c\u7684$\\Theta(n^3)$\u601d\u8def\u3002\u53ea\u9700\u8981\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\u3002\n\n\u9996\u5148\u770b\u6570\u636e\u8303\u56f4\u4e3a$n\\leq 200$\uff0c\u53ef\u4ee5\u53d1\u73b0$\\Theta(n^3)$\u7684`Floyd`\u53ef\u4ee5\u78be\u8fc7\u3002\u7136\u540e\u4e0d\u9700\u8981\u8bb0\u5f55\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u6700\u77ed\u8def\u7684\u4e2a\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5728\u8f93\u51fa\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9`i`\uff0c\u5982\u679c\u5b58\u5728\u4e00\u5bf9\u70b9`j`\u548c`k`\u6ee1\u8db3`dist[j][i]+dist[i][k]==dist[j][k]`\u5e76\u4e14`num[j][i]*num[i][k]==num[j][k]`\uff0c\u5219\u8bf4\u660e`j`\u5230`k`\u7684\u6240\u6709\u6700\u77ed\u8def\u90fd\u8981\u7ecf\u8fc7`i`\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$\\Theta(n^3)$\u3002\n\n\u9644AC\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\nusing namespace std;\n\ninline void chkmin(int& a,int b)\n{\n\tif(b<a)\n\t{\n\t\ta = b;\n\t}\n}\n\nint fi[205][205];\nint ki[205][205];\n\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\t\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tfor(int j=1; j<=n; ++j)\n\t\t{\n\t\t\tfi[i][j] = 0x3f3f3f3f;\n\t\t}\n\t\tfi[i][i] = 0;\n\t}\n\n\tfor(int i=1; i<=m; ++i)\n\t{\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tchkmin(fi[a][b],c);\n\t\tchkmin(fi[b][a],c);\n\t\tki[a][b] = ki[b][a] = 1;\n\t}\n\n\tfor(int k=1; k<=n; ++k)\n\t{\n\t\tfor(int i=1; i<=n; ++i)\n\t\t{\n\t\t\tfor(int j=1; j<=n; ++j)\n\t\t\t{\n\t\t\t\tif(fi[i][k]+fi[k][j] < fi[i][j])\n\t\t\t\t{\n\t\t\t\t\tfi[i][j] = fi[i][k]+fi[k][j];\n\t\t\t\t\tki[i][j] = ki[i][k]*ki[k][j];\n\t\t\t\t}\n\t\t\t\telse if(fi[i][k]+fi[k][j] == fi[i][j])\n\t\t\t\t{\n\t\t\t\t\tki[i][j] += ki[i][k]*ki[k][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tfi[i][i] = 0x3f3f3f3f;\n\t}\n\n\tbool flag = 0;\n\tfor(int i=1; i<=n; ++i)\n\t{\n\t\tfor(int j=1; j<=n; ++j)\n\t\t{\n\t\t\tfor(int k=1; k<=n; ++k)\n\t\t\t{\n\t\t\t\tif(fi[j][k]==fi[j][i]+fi[i][k] && ki[j][k]==ki[j][i]*ki[i][k])\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%d \",i);\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tgoto nxt;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tnxt:;\n\t}\n\n\tif(!flag)\n\t{\n\t\tprintf(\"No important cities.\");\n\t}\n}\n```",
        "postTime": 1571182307,
        "uid": 49458,
        "name": "\u6728\u6728\uff01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "\u600e\u4e48\u5168\u90fd\u662fFloyd...\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u4e00\u6837\u7684\u601d\u8def\uff08\u53ef\u80fd\u849f\u84bb\u8111\u56de\u8def\u6e05\u5947\uff0c\u7b2c\u4e00\u601d\u8def\u5c31\u8fd9\u4e2a...\uff09\n\n\u4e00\u4e2a\u57ce\u5e02x\u91cd\u8981\uff0c\u5f53\u4e14\u4ec5\u5f53\u53bb\u6389\u5b83\u4e4b\u540e\u53ef\u4ee5\u8ba9s->t\u7684\u6700\u77ed\u8def\u53d8\u5316\uff08s != t != x)\u3002\u56e0\u4e3a\u672c\u9898\u7684n\u5f88\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3en\u4f5c\u4e3as\u3002\n\n\u5f53\u786e\u5b9as\u4e4b\u540e\uff0c\u4ee5s\u4e3a\u8d77\u70b9\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u7136\u540e\u628a\u6240\u6709\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u52a0\u5165\u4e00\u4e2a\u65b0\u56fe\u4e2d\u3002\u5177\u4f53\u505a\u6cd5\u662f\uff1a\u5bf9\u4e8e\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u5b83\u8d77\u70b9\u5904\u7684\u6700\u77ed\u8def\u52a0\u4e0a\u8fb9\u6743\u7b49\u4e8e\u7ec8\u70b9\u5904\u7684\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u5c31\u628a\u5b83\u52a0\u5165\u65b0\u56fe\u4e2d\u3002\n\n\u8fd9\u4e2a\u65b0\u56fe\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28\uff1a\u5b83\u662f\u4e00\u4e2aDAG\u3002\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u6700\u77ed\u8def\u4e0a\u6ca1\u73af= =\u3002\u6ce8\u610f\u5230\u8fd9\u4e2a\u6700\u77ed\u8defDAG\u8bb0\u5f55\u4e86s\u4e3a\u8d77\u70b9\u5230\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\u3002\n\n\u679a\u4e3e1~n\u7684\u6bcf\u4e2a\u70b9\u3002\u5982\u679c\u5b58\u5728\u8fb9x->y\uff0c\u5e76\u4e14y\u7684\u5165\u5ea6\u4e3a1\uff0c\u90a3\u4e48\u5220\u6389x\u4e4b\u540ey\u7684\u5165\u5ea6\u4f1a\u53d8\u62100\uff0c\u663e\u7136\u65e0\u6cd5\u4eces\u5230\u8fbe\uff0c\u5373\u5220\u6389x\u4e4b\u540e\u7834\u574f\u4e86\u4e00\u4e9b\u70b9\u7684\u6700\u77ed\u8def\u3002x\u5c31\u662f\u4e00\u4e2a\u5173\u952e\u70b9\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u679a\u4e3e$O(n)$\u6b21\uff0c\u8ba1\u7b97\u6700\u77ed\u8def$O(mlogn)$\uff0c\u6c42\u70b9x$O(m)$\u3002\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662f$O(nmlogn)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int rd() {\n    int a = 1, b = 0; char c = getchar();\n    while (!isdigit(c)) a = c == '-' ? 0 : 1, c = getchar();\n    while (isdigit(c)) b = b * 10 + c - '0', c = getchar();\n    return a ? b : -b;\n}\n\nconst int N = 500, M = N * N;\nstruct Graph {\n    int from, to, nxt, c;\n} g[M * 2];\nint head[N], tot;\n\nvoid addedge(int x, int y, int c) {\n    g[++tot].to = y, g[tot].from = x, g[tot].c = c,\n    g[tot].nxt = head[x], head[x] = tot;\n}\n\nint n, m;\n\npriority_queue<pair<int, int> > que;\nint dis[N], in[N];\nbool vis[N], important[N], mark[M];\n\nvoid solve(int s) {\n    memset(dis, 0x3f, sizeof(dis));\n    memset(vis, 0, sizeof(vis));\n    dis[s] = 0;\n    que.push(make_pair(0, s));\n    while (!que.empty()) {\n        int x = que.top().second;\n        que.pop();\n        if (!vis[x]) {\n            vis[x] = true;\n            for (int i = head[x]; i; i = g[i].nxt) {\n                int y = g[i].to;\n                if (dis[y] > dis[x] + g[i].c) {\n                    dis[y] = dis[x] + g[i].c;\n                    que.push(make_pair(-dis[y], y));\n                }\n            }\n        }\n    }\n\n    memset(mark, 0, sizeof(mark));\n    memset(in, 0, sizeof(in));\n    for (int i = 1; i <= tot; ++i) {\n        if (dis[g[i].from] + g[i].c == dis[g[i].to]) {\n            mark[i] = true;\n            ++in[g[i].to];\n        }\n    }\n\n    for (int i = 1; i <= tot; ++i)\n        if (mark[i] && in[g[i].to] == 1 && g[i].from != s)\n            important[g[i].from] = true;\n}\n\nint main() {\n    n = rd(), m = rd();\n    for (int i = 1; i <= m; ++i) {\n        int x = rd(), y = rd(), c = rd();\n        addedge(x, y, c), addedge(y, x, c);\n    }\n    for (int i = 1; i <= n; ++i)\n        solve(i);\n    bool ok = false;\n    for (int i = 1; i <= n; ++i)\n        if (important[i]) {\n            cout << i << \" \";\n            ok = true;\n        }\n    if (!ok) cout << \"No important cities.\";\n    cout << endl;\n    return 0;\n}\n```\n",
        "postTime": 1551529440,
        "uid": 52068,
        "name": "kai586123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u6bd4\u8f83\u597d\u7406\u89e3\u7684$O(n^3logn)$\u7684\u5206\u6cbb\u7b97\u6cd5\n\n\u5728Floyd\u677e\u5f1b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5176\u5b9e\u54ea\u4e2a\u70b9\u5148\u677e\u5f1b\u54ea\u4e2a\u70b9\u540e\u677e\u5f1b\u662f\u65e0\u6240\u8c13\u7684\u54c8\n\n\u800c\u6211\u4eec\u6700\u540e\u62c6\u70b9\u8d70\u5176\u5b9e\u5c31\u662f\u53ea\u6709\u4e00\u4e2a\u70b9\u4e0d\u677e\u5f1b\u548c\u6240\u6709\u70b9\u90fd\u677e\u5f1b\u60c5\u51b5\u7684\u4e00\u4e2a\u5bf9\u6bd4\uff0c\u770b\u5404\u70b9\u7684\u6700\u77ed\u8def\u60c5\u51b5\u6709\u6ca1\u6709\u6539\u53d8\n\n\u5bf9\u672a\u677e\u5f1b\u70b9\u96c6$[l,r]$\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u677e\u5f1b\u5176\u4e2d\u7684\u4e00\u534a$[l,mid]$\uff0c\u7136\u540e\u53bb\u53e6\u4e00\u534a\u5904\u7406\u5b50\u95ee\u9898\uff0c\u5904\u7406\u5b8c\u4e86\u8fd8\u539f\u5de6\u533a\u95f4\uff0c\u677e\u5f1b\u53f3\u533a\u95f4\uff0c\u518d\u53bb\u5de6\u8fb9\u5904\u7406\u95ee\u9898\n\n\u8fd9\u6837\u5f53\u533a\u95f4\u5927\u5c0f\u4e3a1\u65f6\uff0c\u5c31\u53ea\u662f\u90a3\u4e2a\u70b9\u6ca1\u6709\u53c2\u4e0e\u677e\u5f1b\uff0c\u6211\u4eec\u5bf9\u6bd4\u4e00\u4e0b\u5373\u53ef\n\n\u800c\u5bf9\u6bcf\u4e2a\u76f8\u540c\u5927\u5c0f\u7684\u533a\u95f4\u6784\u6210\u7684\u96c6\u5408\uff0c\u5b83\u4eec\u5b9e\u9645\u4e0a\u603b\u5171\u7528\u4e86\u6bcf\u4e2a\u70b9\u677e\u5f1b\u4e86\u4e00\u6b21\uff0c\u4e3a$O(N^3)$\uff08\u8fd8\u539f\u662f$O(N^2)$\u7684\uff0c\u7b97\u505a\u5e38\u6570\uff09\n\n\u4e00\u5171\u6709$logn$\u79cd\u5927\u5c0f\u7684\u533a\u95f4\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u4e3a$O(N^3logn)$\n\n**Code:**\n```\n#include <cstdio>\n#include <cstring>\nint min(int x,int y){return x<y?x:y;}\nconst int N=202;\nint g[N][N],n,m,flag,ans[N],d[N][N];\nvoid divide(int l,int r)\n{\n    if(l==r)\n    {\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                if(g[i][j]<d[i][j])\n                {\n                    ans[l]=1;\n                    flag=1;\n                    return;\n                }\n        return;\n    }\n    int tmp[N][N];\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n            tmp[i][j]=d[i][j];\n    int mid=l+r>>1;\n    for(int k=l;k<=mid;k++)\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                d[i][j]=min(d[i][j],d[i][k]+d[k][j]);\n    divide(mid+1,r);\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n            d[i][j]=tmp[i][j];\n    for(int k=mid+1;k<=r;k++)\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                d[i][j]=min(d[i][j],d[i][k]+d[k][j]);\n    divide(l,mid);\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n            d[i][j]=tmp[i][j];\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    memset(g,0x3f,sizeof(g));\n    memset(d,0x3f,sizeof(d));\n    for(int u,v,w,i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&u,&v,&w);\n        d[u][v]=d[v][u]=g[u][v]=g[v][u]=w;\n    }\n    for(int k=1;k<=n;k++)\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                g[i][j]=min(g[i][j],g[i][k]+g[k][j]);\n    divide(1,n);\n    if(!flag) printf(\"No important cities.\\n\");\n    for(int i=1;i<=n;i++)\n        if(ans[i])\n            printf(\"%d \",i);\n    return 0;\n}\n\n```",
        "postTime": 1533371307,
        "uid": 63727,
        "name": "ButterflyDew",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "\u975e\u5e38\u8be7\u5f02\u5927\u5bb6\u4e3a\u4ec0\u4e48\u90a3\u4e48\u4e00\u81f4\u5730\u4f7f\u7528$floyd$\u7b97\u6cd5\uff0c\u8fd9\u91cc\u6765\u4e00\u4e2a\u5229\u7528$SPFA$\u7b97\u6cd5\u5b9e\u73b0\u672c\u9898\u7684\u505a\u6cd5\u3002\n\n$SPFA$\u7b97\u6cd5\uff1a\u521d\u59cb\u65f6\u5c06\u8d77\u59cb\u70b9\u52a0\u5165\u961f\u5217\uff0c\u5230\u5176\u4ed6\u8282\u70b9\u8ddd\u79bb\u8bbe\u7f6e\u4e3a$inf$\uff0c\u6bcf\u6b21\u53d6\u51fa\u961f\u5217\u5934\uff0c\u5bf9\u961f\u5217\u5934\u7684\u6240\u6709\u51fa\u8fb9\uff0c\u5224\u65ad\u80fd\u5426\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\uff1a\n```cpp\nif(dist[p[j]]>dist[x]+w[j])\n\tdist[p[j]]=dist[x]+w[j];\n```\n\u5176\u4e2d$dist[i]$\u4ee3\u8868\u5f53\u524d\u8ba1\u7b97\u5230\u8282\u70b9i\u7684\u8ddd\u79bb\uff0c$w[j]$\u5c31\u662f\u8fd9\u6761\u51fa\u8fb9\u7684\u8fb9\u6743\u3002\n\n\u5982\u679c\u53ef\u4ee5\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\uff0c\u90a3\u4e48\u8bf4\u660e\u6709\u8282\u70b9\u7684\u8ba1\u7b97\u6700\u77ed\u8def\u88ab\u66f4\u65b0\uff0c\u5c06\u8fd9\u4e2a\u8282\u70b9\u52a0\u5165\u961f\u5217\uff0c\u4ee5\u5f85\u4ee5\u540e\u7684\u66f4\u65b0\u3002\u6ce8\u610f\u4e0d\u80fd\u8ba9\u8282\u70b9\u91cd\u590d\u5165\u961f\u3002\n\n\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u64cd\u4f5c\u7ed3\u675f\u3002\n\n\u8bc1\u660e\uff1a\u6bcf\u6b21\u677e\u5f1b\u64cd\u4f5c\u603b\u4f1a\u964d\u4f4e$dist[i]$\u7684\u503c\u3002\u7531\u4e8e\u6240\u6709\u7684\u8fb9\u6743\u90fd\u662f\u6b63\u7684\uff08\u6ca1\u6709\u8d1f\u73af\uff09\uff0c\u6240\u4ee5\u603b\u4f1a\u6709\u4e00\u4e2a\u786e\u5b9a\u7684\u6700\u77ed\u8def\u957f\u5ea6\uff0c\u901a\u8fc7\u66f4\u65b0\u4e00\u5b9a\u80fd\u5f97\u5230\u3002\u65f6\u95f4\u590d\u6742\u5ea6$O(am)$\uff0c$a$\u548c\u56fe\u7684\u5f62\u72b6\u6709\u5173\uff0c\u4e00\u822c\u7ea6\u7b49\u4e8e$2$\u3002\u6b64\u5916\uff0c\u5982\u679c\u6709\u8d1f\u6743\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9\u91cd\u590d\u8fdb\u961f\u7b2c$n$\u6b21\uff0c\u53ef\u4ee5\u7ec8\u6b62\u64cd\u4f5c\uff0c\u6b64\u65f6\u4fdd\u8bc1\u6709\u8d1f\u73af\u3002\n\n\u5728$SPFA$\u7b97\u6cd5\u4e2d\uff0c\u9700\u8981\u7528$O(1)$\u7684\u8f83\u5feb\u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u6210\u4e00\u4e2a\u8282\u70b9\u6240\u6709\u51fa\u8fb9\u6bcf\u6761\u8fb9\u7684\u8bbf\u95ee\uff0c\u9700\u8981\u4f7f\u7528**\u94fe\u5f0f\u524d\u5411\u661f**\uff0c\u8bf7\u81ea\u884c\u67e5\u9605\u8d44\u6599\uff0c\u5728\u6b64\u4e0d\u591a\u505a\u8d58\u8ff0\u3002\n\n\u5b9e\u73b0\u6b64\u9898\uff0c\u9700\u8981\u4e00\u4e2a\u5b9a\u4e49\uff1a**\u6700\u77ed\u8def\u6811**\u3002\u6700\u77ed\u8def\u6811\u5c31\u662f\u6bcf\u4e2a\u8282\u70b9\u5728\u6811\u4e0a\u5230\u6839\u8282\u70b9\u7684\u8fb9\u5c31\u662f\u5176\u5230\u6839\u8282\u70b9\uff08\u5c31\u662f\u8d77\u59cb\u8282\u70b9\uff0c\u51fa\u53d1\u70b9\uff09\u7684\u6700\u77ed\u8def\uff08\u4e4b\u4e00\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u6700\u77ed\u8def\u4e00\u5b9a\u6709\u4e00\u6761\u662f\u7ecf\u8fc7\u6700\u77ed\u8def\u6811\u4e0a\u7684\u7236\u4eb2\u8282\u70b9\u7684\u3002\u501f\u52a9\u8fd9\u4e2a\u6027\u8d28\uff0c\u6709\u4e86\u6700\u77ed\u8def\u6811\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u6765\u6c42\u5f97\u51fa\u53d1\u70b9\u5230\u8be5\u8282\u70b9\u7684\u6700\u77ed\u8def\u3002\n\n\u5728\u8fd9\u9053\u9898\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6bcf\u8fdb\u884c\u4e00\u6b21\u6210\u529f\u7684\u677e\u5f1b\u64cd\u4f5c\uff0c\u66f4\u65b0\u6307\u5411\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\uff08\u4e5f\u5c31\u662f\u5f53\u524d\u51fa\u961f\u8282\u70b9\uff09\uff0c\u5982\u679c\u662f\u5931\u8d25\u7684\u677e\u5f1b\u64cd\u4f5c\uff0c\u8be5\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u6307\u5411\u8282\u70b9\u5728\u6700\u77ed\u8def\u6811\u4e0a\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u53ef\u80fd\u7684\u8def\u5f84\u6570\u91cf$+1$\u3002\u8ba1\u7b97\u5b8c\u8fd9\u4e9b\u540e\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a**\u9664\u6839\u8282\u70b9\u4ee5\u5916**\u7684\u8282\u70b9\uff0c\u5982\u679c\u5728\u6700\u77ed\u8def\u6811\u4e0a\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u7236\u4eb2\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5728\u6700\u77ed\u8def\u6811\u4e0a\u7684\u7236\u4eb2\u8282\u70b9\u662f\u4e00\u4e2a\u201c\u91cd\u8981\u7684\u8282\u70b9\u201d\uff0c\u5373\u53bb\u6389\u8be5\u70b9\u4e4b\u540e\u5f53\u524d\u6700\u77ed\u8def\u7684\u8d77\u59cb\u8282\u70b9\u548c\u8be5\u8282\u70b9\u7684\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u53d8\u5316\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int maxn=210;\nconst int maxm=40010;//\u65e0\u5411\u56fe\u4e24\u6b21\u5b58\u8fb9\uff0c\u6570\u7ec4\u5927\u5c0f\u53cc\u500d\uff0c\u5207\u8bb0\uff01\nconst int inf=1e9;//\u6b63\u65e0\u7a77\u7684\u503c\uff0c\u6ce8\u610f\u76f8\u52a0\u4e0d\u8981\u6ea2\u51fa\nint n,m,x,y,z,cur,h[maxn],nxt[maxm],p[maxm],w[maxm],s,dist[maxn],fa[maxn],pa[maxn];//fa\u662f\u6700\u77ed\u8def\u4e0a\u7684\u7236\u4eb2\uff0cpa\u662f\u53ef\u80fd\u7684\u7236\u4eb2\u4e2a\u6570\nbool tf[maxn],ans[maxn],if_output;\nqueue<int>q;\ninline void add_edge(int x,int y,int z)\n{\n    cur++;\n    nxt[cur]=h[x];\n    h[x]=cur;\n    p[cur]=y;\n    w[cur]=z;\n}//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\u64cd\u4f5c\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    while(m--)scanf(\"%d%d%d\",&x,&y,&z),add_edge(x,y,z),add_edge(y,x,z);\n    for(s=1;s<=n;s++)\n    {\n        for(int i=1;i<=n;i++)dist[i]=inf;\n        memset(tf,false,sizeof tf);\n        memset(pa,0,sizeof pa);\n        memset(fa,0,sizeof fa);//\u521d\u59cb\u5316\n        dist[s]=0;tf[s]=true;q.push(s);pa[s]=1;\n        while(!q.empty()) \n        {\n            x=q.front();\n            for(int j=h[x];j;j=nxt[j])\n            {\n                if(dist[p[j]]>dist[x]+w[j])\n                {\n                    dist[p[j]]=dist[x]+w[j];\n                    fa[p[j]]=x;\n                    pa[p[j]]=0;\n                    if(!tf[p[j]])tf[p[j]]=true,q.push(p[j]);\n                }\n                if(dist[p[j]]==dist[x]+w[j])pa[p[j]]++;\n            }\n            q.pop();tf[x]=false;//\u6ce8\u610f\uff0c\u6b64\u65f6\u624d\u51fa\u961f\uff0c\u4e0d\u80fd\u63d0\u524d\u51fa\u961f\uff01\n        }\n        for(int i=1;i<=n;i++)if(fa[i]!=s&&pa[i]==1)ans[fa[i]]=true;\n    }\n    for(int i=1;i<=n;i++)if(ans[i])printf(\"%d \",i),if_output=true;\n    if(!if_output)printf(\"No important cities.\");//\u8f93\u51fa\n    printf(\"\\n\");\n    return 0;\n}\n```\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nm)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(m)$\u3002",
        "postTime": 1519475240,
        "uid": 43486,
        "name": "hsfzLZH1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "\u6211\u7684blog\u4f20\u9001\u95e8\uff1a[wjyyy](http://www.wjyyy.top/1195.html)\n\n   \u56e0\u4e3aFloyd\u662f\u4e00\u79cd\u7384\u5b66DP\u601d\u60f3\uff0c\u6240\u4ee5\u5b83\u7684\u72b6\u6001\u66f4\u65b0\u6765\u6e90\u6709\u5f88\u591a\uff0c\u5728\u8fd9\u4e2a\u9898\u91cc\u9700\u8981\u6574\u7406\u51fa\u5b83\u7684\u9636\u6bb5\u6027\u4e0e\u8f6c\u79fb\uff0c~~\u770b\u4e0a\u53bb~~\u5341\u5206\u9ebb\u70e6\u3002\u800c\u6211\u4eec\u5982\u679c\u628aFloyd\u5f53\u4f5c\u6700\u77ed\u8def\u7b97\u6cd5\u4e2d\u7684\u677e\u5f1b\uff0c\u5c31\u662f\u76f8\u5f53\u4e8e\u5728\u628a\u4e24\u6bb5\u6700\u77ed\u8def\u62fc\u63a5\u5728\u4e00\u8d77\uff0c\u62e5\u6709\u5b83\u4eec\u5408\u5728\u4e00\u8d77\u7684\u6027\u8d28\u3002\n\n\n\n### \u91cd\u8981\u57ce\u5e02\n\u00a0 \u00a0\u91cd\u8981\u57ce\u5e02\u5c31\u662f\u5982\u679c\u8fd9\u4e2a\u70b9\u88ab\u5220\u6389\uff0c\u90a3\u4e48\u6700\u77ed\u8def\u7684\u957f\u5ea6\u5c31\u4f1a\u6539\u53d8\u3002\u56e0\u6b64\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u5728\u6700\u77ed\u8def\u4e0a\u3002\u800c\u5f53\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u6709\u591a\u6761\u65f6\uff0c\u5b83\u4eec\u4e0a\u7684\u70b9\u4e0d\u4e00\u5b9a\u90fd\u662f**\u91cd\u8981\u57ce\u5e02**\uff0c\u7ecf\u8fc7\u5206\u6790\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u8bbe$(u,v)$\u95f4\u6700\u77ed\u8def\u6761\u6570\u4e3a$k$\uff0c\u91cd\u8981\u57ce\u5e02\u4e3a$p$\uff0c\u90a3\u4e48\u8fd9$k$\u6761\u6700\u77ed\u8def\u4e00\u5b9a\u90fd\u7ecf\u8fc7\u70b9$p$\u3002\u7528\u53cd\u4f8b\u6765\u8bf4\u660e\uff0c\u5c31\u662f\u5982\u679c\u4e0d\u662f$k$\u6761\u6700\u77ed\u8def\u90fd\u7ecf\u8fc7\u70b9$p$\uff0c\u90a3\u4e48\u53bb\u6389\u70b9$p$\uff0c\u8fd8\u6709\u5269\u4e0b\u7684\u6700\u77ed\u8def\u53ef\u4ee5\u8d70\uff0c\u5219\u4e0d\u5408\u6cd5\u3002\n\n\n\n\u00a0 \u00a0\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a\u4e09\u7ef4\u6570\u7ec4$\\mathrm{im[i][j][k]}$\u8868\u793ak\u5728$i,j$\u7684\u51e0\u6761\u6700\u77ed\u8def\u4e0a\u3002\u800c\u6211\u4eec\u7528floyd\u505a\u6700\u77ed\u8def\u8ba1\u6570\u4e5f\u6bd4\u8f83\u65b9\u4fbf\uff0c\u4e00\u65e6$k$\u6240\u5728\u7684\u6700\u77ed\u8def\u6570\u91cf\u4e0e$(i,j)$\u95f4\u7684\u6700\u77ed\u8def\u6570\u91cf\u76f8\u540c\uff0c\u90a3\u4e48$k$\u5c31\u4e00\u5b9a\u662f\u4e00\u4e2a\u91cd\u8981\u57ce\u5e02\uff0c\u5224\u65ad\u6761\u4ef6\u4e3a$im[i][j][k]==cnt[i][j]\\Rightarrow k$\u662f\u91cd\u8981\u57ce\u5e02\u3002\n\n![](http://www.wjyyy.top/wp-content/uploads/2018/08/201808041607.png)\n\n\u00a0 \u00a0\u5728\u4e0a\u56fe\u4e2d\uff0c1\u21928\u6700\u77ed\u8def\u8ba1\u6570\u4e3a3\uff0c\u5176\u4e2d\u9664\u4e86\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u88ab\u7ecf\u8fc7\u4e863\u6b21\u7684\u70b9\u7684\u70b9\u67092\u548c7\uff0c\u56e0\u6b64\u5b83\u4eec\u662f\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u91cd\u8981\u57ce\u5e02\u3002\n\n\n\n\u00a0 \u00a0\u56e0\u4e3afloyd\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(N^3)$\uff0c\u800c\u6bcf\u6b21\u66f4\u65b0\u8fd8\u8981\u5faa\u73af\u4e00\u4e2a$N$\uff0c\u56e0\u6b64\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(N^4)$\u3002\n\n\n\n### bitset\u4f18\u5316\n\n\u00a0 \u00a0\u6211\u4eec\u5728\u4e0a\u9762\u63d0\u5230\uff0c\u72b6\u6001\u5408\u5e76/\u66f4\u65b0\u9700\u8981\u989d\u5916\u679a\u4e3e\u4e00\u4e2a$O(N)$\uff0c\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u628a\u8fd9\u4e2a$N$\u7701\u6389\uff0c\u6216\u8005\u8bf4\u4f18\u5316\u4e00\u70b9\u5462\n\n\n\n\u00a0 \u00a0\u8fd9\u65f6\u53ef\u4ee5\u8003\u8651$\\mathrm{bitset}$\uff0c$\\mathrm{bitset}$\u53ef\u4ee5\u4f7f\u5e38\u6570\u4f18\u531632\u500d\uff0c\u8fd9\u4e2a\u9898\u7684$N$\u89c4\u6a21\u624d200\uff0c\u4f18\u5316\u4e00\u4e2a32\u5c31\u5feb\u628a\u4e00\u4e2a$N$\u53d8\u6210\u4e00\u4e2a$\\log N$\u4e86\uff0c\u8fd9\u4e2a\u9898\u7684\u6570\u636e\u89c4\u6a21\u8fd8\u662f\u53ef\u4ee5\u627f\u53d7\u7684\u3002\u4e0d\u8fc7$\\mathrm{bitset}$\u5b58\u7684\u662f\u4e8c\u8fdb\u5236\u554a\uff0c\u53ef\u662f\u4e0a\u9762\u63d0\u5230\u7684\u6570\u7ec4\u5b58\u7684\u662f\u8ba1\u6570\u554a\u3002\n\n\n\n\u00a0 \u00a0\u6211\u4eec\u53ef\u4ee5\u6362\u4e00\u4e2a\u65b9\u5f0f\u60f3\u60f3\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u5df2\u7ecf\u627e\u5230\u4e864\u6761\u6700\u77ed\u8def\uff0c\u5176\u4e2d\u67093\u6761\u7ecf\u8fc7\u70b9$p$\uff0c\u90a3\u6b64\u65f6$p$\u5df2\u7ecf\u4e0d\u5408\u6cd5\u4e86\uff0c\u5c31\u76f4\u63a5\u628a\u5b83\u7f6e\u4e3a0\uff0c\u4ee5\u540e\u5c3d\u7ba1\u6240\u6709\u8def\u5f84\u90fd\u7ecf\u8fc7$p$\uff0c\u5b83\u4e5f\u4e0d\u53ef\u80fd\u662f\u5173\u952e\u57ce\u5e02\u3002\n\n\n\n\u00a0 \u00a0\u56e0\u6b64$\\mathrm{bitset}$\u4e2d$\\mathrm{im[i][j][k]}$\u91cc\u9762\u5b58\u7684\u662f\uff0c\u73b0\u6709\u72b6\u6001\u4e0b\uff0ck\u662f\u4e0d\u662fi\u5230j\u6700\u77ed\u8def\u4e0a\u7684\u5173\u952e\u57ce\u5e02\u3002\u5f53**\u66f4\u65b0\uff08\u677e\u5f1b\uff09\u6700\u77ed\u8def**\u65f6\uff0c\u5173\u952e\u57ce\u5e02\u662f\u4e24\u6bb5\u6700\u77ed\u8def\u4e0a\u7684\u5173\u952e\u57ce\u5e02\u4e4b**\u5e76\u96c6**\uff1b\u800c\u66f4\u65b0**\u6700\u77ed\u8def\u8ba1\u6570**\uff0c\u4e5f\u5c31\u662f\u627e\u5230\u4e86\u4e00\u6761\u65b0\u7684\u6700\u77ed\u8def\u65f6\uff0c\u5982\u4e0a\u56fe\uff0c\u5c31\u8981\u53d6**\u4ea4\u96c6**\uff0c\u56e0\u4e3a\u4e00\u4e2a\u57ce\u5e02\u53ea\u6709\u5728\u4e24\u70b9\u95f4\u4efb\u4f55\u4e00\u6761\u6700\u77ed\u8def\u4e0a\u90fd\u5b58\u5728\uff0c\u624d\u80fd\u4f5c\u4e3a\u8fd9\u4e24\u70b9\u95f4\u7684\u5173\u952e\u57ce\u5e02\u3002\u800c\u4ea4\u96c6\u5e76\u96c6\u5728\u4f4d\u8fd0\u7b97\u4e2d\u5c31\u662fand(&)\u548cor(|)\uff0c\u800c\u70b9\u96c6\u6709200\uff0c\u666e\u901a\u7684\u4f4d\u8fd0\u7b97\u5b8c\u6210\u4e0d\u4e86\uff0c\u5c31\u8ba9bitset\u6765\u505a\u3002\n\n\n\n\u00a0 \u00a0\u5728\u4e00\u5f00\u59cb\u521d\u59cb\u5316\u65f6\uff0c\u628a\u4e24\u4e2a\u8fde\u63a5\u5728\u4e00\u8d77\u7684\u70b9\u4e0a\u7684\u5173\u952e\u57ce\u5e02\u8bbe\u4e3a\u4e24\u4e2a\u7aef\u70b9\uff0c\u5728floyd\u201c\u677e\u5f1b\u201d\u6700\u77ed\u8def\u65f6\uff0c\u76f4\u63a5\u628a\u4e24\u6bb5\u6700\u77ed\u8def\u7684\u5173\u952e\u57ce\u5e02\u201c\u62fc\u8d77\u6765\u201d\uff0c\u5c31\u662f\u65b0\u7684\u6700\u77ed\u8def\u4e0a\u7684\u5173\u952e\u57ce\u5e02\u3002\u6700\u540e\u5224\u65ad\u7528$O(N^3)$\u904d\u5386\uff0c\u770b\u4e00\u4e2a\u70b9\u662f\u5426\u4e3a\u67d0\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u5173\u952e\u57ce\u5e02\uff0c\u4e0d\u8fc7\u8981\u6ce8\u610f\u4e0d\u80fd\u4e0e\u8fd9\u4e24\u4e2a\u70b9\u91cd\u5408\uff0c\u56e0\u4e3a\u4e3a\u4e86\u65b9\u4fbf\uff0c\u4e00\u5f00\u59cb\u6211\u4eec\u628a\u8d77\u70b9\u548c\u7ec8\u70b9\u4e5f\u5b9a\u4e3a\u5173\u952e\u57ce\u5e02\uff08\u7b26\u5408\u5173\u952e\u57ce\u5e02\u7684\u4e00\u822c\u5b9a\u4e49\uff09\u3002\n\n\n\n\u00a0 \u00a0\u56e0\u6b64\u8fd9\u9053\u9898\u7684\u603b\u590d\u6742\u5ea6\u4e3a$$O(\\frac{N^4}{32}+N^3)$$\n\n\n\n## Code\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<bitset>\nusing std::bitset;\nbitset<210> im[210][210];\nint f[210][210];\nint is[210];\nint main()\n{\n    memset(f,0x3f,sizeof(f));\n    int u,v,n,m;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        f[i][i]=0;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&u,&v);\n        scanf(\"%d\",&f[u][v]);\n        f[v][u]=f[u][v];\n    }\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n        {\n            im[i][j][i]=1;//\u521d\u59cb\u5316\u8bbe\u4e24\u7aef\u4e3a\u91cd\u8981\u57ce\u5e02\n            im[i][j][j]=1;\n        }\n\n    for(int k=1;k<=n;k++)\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                if(f[i][k]+f[k][j]==f[i][j])\n                    im[i][j]&=(im[i][k]|im[k][j]);//\u5f53\u66f4\u65b0\u8ba1\u6570\u65f6\u53d6\u4ea4\u96c6\n                else if(f[i][k]+f[k][j]<f[i][j])//\u5f53\u66f4\u65b0\u6700\u77ed\u8def\u65f6\u76f4\u63a5\u8d4b\u503c\u4e3a\u4e24\u6bb5\u7684\u5e76\u96c6\n                {\n                    f[i][j]=f[i][k]+f[k][j];\n                    im[i][j]=im[i][k]|im[k][j];\n                }\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n            for(int k=1;k<=n;k++)\n                if(k!=i&&k!=j)//\u6ce8\u610f\u7279\u5224\n                    if(im[i][j][k])\n                        is[k]=1;\n    int flag=0;\n    for(int i=1;i<=n;i++)\n        if(is[i])\n        {\n            flag=1;\n            printf(\"%d \",i);\n        }\n    if(!flag)//\u6ce8\u610f\u5224\u65ad\u65e0\u89e3\n        puts(\"No important cities.\");\n    return 0;\n}\n```",
        "postTime": 1533371261,
        "uid": 63539,
        "name": "wjyyy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011bitset\u9898\u89e3"
    },
    {
        "content": "\u65e0\u610f\u95f4\u5199\u5230\u8fd9\u9898\uff0c\u5199\u5b8c\u540e\u53d1\u73b0\u697c\u4e0a\u5404\u4f4ddalao\u7684\u65b9\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e0d\u591f\u4f18\uff0c\u6240\u4ee5\u672c\u849f\u84bb\u5199\u4e86\u8fd9\u7bc7\u9898\u89e3\u3002\n\n\u601d\u8def\u5f88\u7b80\u5355\uff1afloyed\u7b97\u6cd5\u6bcf\u6b21\u679a\u4e3e\u4e00\u4e2a\u4e2d\u95f4\u70b9$x$\u8fdb\u884c\u677e\u5f1b\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u4e2d\u95f4\u70b9\u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c\u901a\u8fc7\u8fd9\u4e2a\u4e2d\u95f4\u70b9\u80fd\u591f\u677e\u5f1b\uff0c\u8bf4\u660e\u5f53\u524d$i$->$j$\u7684\u8def\u5f84\u4e0a\uff0c$x$\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u57ce\u5e02\u3002\u53ef\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c$dis[i][j]$==$dis[i][x]$+$dis[x][j]$\uff0c\u8bf4\u660e\u81f3\u5c11\u6709\u4e24\u4e2a\u70b9\u80fd\u591f\u8fbe\u5230\u5f53\u524d\u7684\u6700\u4f18\u89e3\uff0c\u90a3\u4e48\u5c31$i$->$j$\u7684\u8def\u5f84\u4e0a\u800c\u8a00\uff0c\u5728\u6ca1\u6709\u8fdb\u884c\u4e0b\u4e00\u8f6e\u677e\u5f1b\u4e4b\u524d\uff0c\u4e0d\u5b58\u5728\u91cd\u8981\u7684\u57ce\u5e02\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728O($n^3$)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6c42\u89e3\u3002\n\n\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u89c1\u4ee3\u7801\uff0c\u5176\u5b9e\u4e5f\u5f88\u7b80\u5355\u7684\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#define min(a,b) ((a)<(b)? (a):(b))\nbool b[205];\nint ans[205][205],dis[205][205];//ans\u7528\u4e8e\u5b58\u50a8i->j\u8def\u5f84\u4e0a\u91cd\u8981\u7684\u57ce\u5e02\ninline int read() {\n\tregister int x=0,f=1;register char s=getchar();\n\twhile(s>'9'||s<'0') {if(s=='-') f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9') {x=x*10+s-'0';s=getchar();}\n\treturn x*f;\n}\nint main() {\n\tbool flag=0;\n\tint n=read(),m=read();\n\tmemset(dis,0x3f,sizeof(dis));\n\tfor(int i=1;i<=m;++i) {\n\t\tint x=read(),y=read(),z=read();\n\t\tdis[x][y]=dis[y][x]=min(dis[y][x],z);\n\t}\n\tfor(int x=1;x<=n;++x) {\n\t\tfor(int i=1;i<=n;++i) {\n\t\t\tfor(int j=1;j<=n;++j) {\n\t\t\t\tif(i==j) continue; \n\t\t\t\tif(dis[i][j]>dis[i][x]+dis[x][j]) ans[i][j]=x,dis[i][j]=dis[i][x]+dis[x][j];\n\t\t\t\telse if(dis[i][j]==dis[i][x]+dis[x][j]) ans[i][j]=-1;//\u5f53\u524d\u4e0d\u5b58\u5728\u91cd\u8981\u7684\u57ce\u5e02\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i) {\n\t\tfor(int j=1;j<=n;++j) {//\u626b\u63cf\u5e76\u8bb0\u5f55\n\t\t\tif(i==j||dis[i][j]==0x3f3f3f3f) continue;\n\t\t\tif(ans[i][j]!=-1) b[ans[i][j]]=1;\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i) {if(b[i]) printf(\"%d \",i),flag=1;}\n\tif(!flag) {printf(\"No important cities.\");}\n\treturn 0;\n}\n```\n",
        "postTime": 1568730137,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "### \u91cd\u8981\u7684\u57ce\u5e02\n\n\n#### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9(\u91cd\u8981\u57ce\u5e02) $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u8f93\u51fa\u56fe\u4e2d\u6240\u6709\u7684\u91cd\u8981\u57ce\u5e02\u3002\u5b9a\u4e49\u91cd\u8981\u57ce\u5e02\u4e3a\uff1a\u5982\u679c\u4e00\u4e2a\u57ce\u5e02 $c$ \u88ab\u7834\u574f\u540e\uff0c\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u57ce\u5e02 $a$ \u548c $b$\uff08$a$, $b$\u5747\u4e0d\u7b49\u4e8e$c$\uff09\uff0c$a$\u5230$b$\u7684\u6700\u77ed\u8ddd\u79bb\u589e\u957f\u4e86\uff08\u6216\u4e0d\u901a\uff09\uff0c\u5219\u57ce\u5e02$c$\u662f\u91cd\u8981\u7684\u3002\n\n$n\\le 200,m\\le \\frac{n*n(n-1)}{2},0<c\\le 10000$\uff0c$c$\u5373\u8def\u7684\u957f\u5ea6\u3002\n\n#### \u5206\u6790\n\n\u672c\u9898 $\\textrm{Floyd}$\u9898\u89e3\u5f88\u591a\uff0c\u4f46\u5927\u90fd\u7f3a\u5c11\u4e00\u4e2a\u5408\u7406\u7684\u8bc1\u660e\u3002\u8fd9\u91cc\uff0c\u6211\u4e3b\u8981\u8bf4\u4e00\u4e0b\u8fd9\u6837\u505a\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u91cd\u8981\u57ce\u5e02$x$\uff0c\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u70b9\u5bf9$(u,v)$\uff1a\n\n* $u$\u4e0e$x$\u6709\u8fb9\uff0c$v$\u4e0e$x$\u6709\u8fb9\uff0c\u4e14$u->x->v$\u4e3a$u$\u548c$v$\u552f\u4e00\u7684\u6700\u77ed\u8def\uff1b\n\n\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8bc1\u660e\u5230\uff1a\n\n* \u82e5\u6211\u4eec\u628a$(u,x,v)$\u4f5c\u4e3a\u6700\u77ed\u8def\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u4efb\u610f\u957f\u5ea6\u7684\u552f\u4e00\u6700\u77ed\u8def\u90fd\u53ef\u4ee5\u7531\u8be5\u4e09\u5143\u7ec4\u62fc\u63a5\u800c\u6210\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u627e\u6700\u77ed\u8def\u7684\u65f6\u5019\uff0c\u8bb0\u5f55\u4e00\u4e0b\u4e24\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u662f\u7531\u54ea\u4e00\u4e2a\u70b9\u66f4\u65b0\u800c\u6765\u7684\uff0c\u540c\u65f6\uff0c\u5982\u679c\u6709\u591a\u4e2a$k$\u66f4\u65b0\u5230$(u,v)$\u7684\u6700\u77ed\u8def\uff0c\u6211\u4eec\u5c31\u5f53\u505a$(u,v)$\u6709\u591a\u6761\u6700\u77ed\u8def\u3002\n\n\u7531\u4e8e$(u,x,v)$\u7684\u4e09\u5143\u7ec4\u5173\u7cfb\uff0c\u6240\u4ee5$(u,v)$ \u7684\u6700\u77ed\u8def\u53ea\u4f1a\u7531$x$\u66f4\u65b0\u5230\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u7b54\u6848\u4e0d\u91cd\u4e0d\u6f0f\u3002\n\nPS\uff1a\u5982\u679c\u6709\u8bef\uff0c\u6b22\u8fce\u6307\u51fa\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 205, M = 80005;\nint n, m, imp[N][N], dist[N][N], ans[N];\n\ntemplate<typename T_>inline void read(T_ &s){\n\ts = 0 ; int f = 1 ; char ch ;\n\tdo{ch=getchar();if(ch=='-')f=-1;}while(ch<'0'||ch>'9');\n\tdo{s=s*10+ch-'0';ch=getchar();}while(ch>='0'&&ch<='9');\n\ts *= f ;\n}\n\nvoid Floyd(){\n\tfor(int k = 1; k <= n; ++k)\n\t\tfor(int i = 1; i <= n; ++i)\n\t\t\tfor(int j = 1; j <= n; ++j)\n\t\t\tif(i != k && j != k && i != j){\n\t\t\t\tif(dist[i][j] > dist[i][k] + dist[k][j]){\n\t\t\t\t\tdist[i][j] = dist[i][k] + dist[k][j] ;\n\t\t\t\t\timp[i][j] = k ;\n\t\t\t\t}\n\t\t\t\telse if(dist[i][j] == dist[i][k] + dist[k][j])\n\t\t\t\t\timp[i][j] = -1 ;\n\t\t\t}\n\t\t\t\t\n}\n\nint main(){\n\t read(n) , read(m);\n\t memset(dist , 0x3f , sizeof(dist)) ;\n\t for(int i = 1; i <= n; ++i) dist[i][i] = 0;\n\t for(int i = 1; i <= m; ++i){\n\t \tint u , v , w ;\n\t \tread(u) , read(v) , read(w) ; \n\t \tdist[u][v] = min(dist[u][v], w);\n\t \tdist[v][u] = dist[u][v];\n\t }\n\t Floyd();\n\t for(int i = 1; i <= n; ++i)\n\t \tfor(int j = 1; j <= n; ++j)\n\t \t\tif(imp[i][j] != -1) ans[imp[i][j]] = 1;\n\tint Flag = 0;\n\tfor(int i = 1; i <= n; ++i)\n\t\tif(ans[i]) printf(\"%d \" , i) , Flag = 1;\n\tif(!Flag) printf(\"No important cities.\");\n\treturn 0 ;\n}\n/*\n4 3\n1 2 1\n2 3 1\n3 4 1\n*/\n```",
        "postTime": 1573702035,
        "uid": 123152,
        "name": "lsfer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "# Part One \u524d\u7f6e\n\n\n## 1.1 \u6742\u8c08\n\n\u5f88\u6c34\u4e00\u9053\u9898\uff0c\u5b9e\u73b0\u5f88\u7b80\u5355\uff08~~\u9664\u4e86Floyd\u597d\u50cf\u548cDP\u6cbe\u4e0d\u4e0a\u8fb9\uff0c\u6211\u662f\u540e\u6765\u624d\u53d1\u73b0\u7684...~~\uff09\u3002\n\n\u4e0d\u8fc7\u89c9\u5f97\u601d\u8def\u5f88\u65b0\u9896\uff0c\u5206\u4eab\u4e00\u4e0b\u3002\n\n## 1.2 \u7b80\u5316\u9898\u610f\n\n\n\u7ed9\u4f60\u4e00\u5f20\u56fe\uff0cN\u4e2a\u70b9\uff0cM\u6761\u8fb9\u3002\n\n\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6982\u5ff5\uff0c\u91cd\u8981\u7684\u70b9\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5220\u6389\u8fd9\u4e2a\u70b9\uff0c\u5982\u679c\u6709\u4efb\u610f\u4e24\u4e2a\u70b9\uff08\u9664\u4e86\u8fd9\u4e2a\u70b9\uff09\u7684\u6700\u77ed\u8def\u5f84\u53d8\u957f\u4e86\uff0c\u8fd9\u4e2a\u70b9\u5373\u88ab\u79f0\u4e3a\u91cd\u8981\u7684\u70b9\u3002\n\n\u6309\u7167\u987a\u5e8f\u8f93\u51fa\u91cd\u8981\u7684\u70b9\u7684\u7f16\u53f7\n\n\u6570\u636e\u8303\u56f4\uff1a\n\n$ N \\leq 200\\;\\; M \\leq N(N-1)/2 $\n\n# Part Two \u89e3\u9898\n\n## 2.1 \u66b4\u529b\n\n\u9996\u5148\u601d\u8003\u5982\u4f55\u66b4\u529b\n\n\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u5148\u628a\u539f\u6765\u7684\u56fe\u8dd1\u4e00\u904d$Floyd$ ($ Spfa,DJ$\u663e\u7136\u4e0d\u5fc5\u8981) \n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u5220\u6389\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u628a\u548c\u5b83\u76f8\u8fde\u7684\u70b9\u8d4b\u6210INF\u3002\n\n\u518d\u8dd1$Floyd$ \uff0c\u518d\u4e00\u4e2a\u4e2a\u5bf9\u6bd4\u3002 \u65f6\u95f4\u590d\u6742\u7684$O(N^4)$\u3002\n\n\u663e\u7136\u8fc7\u4e0d\u53bb\u3002\n\n## 2.2 \u6b63\u89e3\n\n\u66b4\u529b\u4e00\u904d\u904d$Floyd$\u663e\u7136\u4e0d\u53ef\u53d6\n\n\u6211\u4eec\u601d\u8003\u5176\u6027\u8d28\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9$k$\uff0c\u82e5\u5b83\u662f\u91cd\u8981\u7684\u57ce\u5e02\uff0c\u90a3\u4e48\u5fc5\u6709\u81f3\u5c11\u4e00\u5bf9\u70b9$i,j$\u7684\u6240\u6709\u6700\u77ed\u8def$dis(i,j)$ \u4e0a\u6709$k$\u3002\u5bf9\u4e8e$i,j$\u7684\u6240\u6709\u6700\u77ed\u8def$dis(i,j)$\uff0c\u5982\u679c\u70b9$k$\u5728\u5176\u6700\u77ed\u8def\u4e0a\u51fa\u73b0\u7684\u6b21\u6570$=$\u6700\u77ed\u8def\u6761\u6570\uff0c\u5373\u5176\u4e3a\u91cd\u8981\u7684\u70b9\u3002\n\n\u4f46\u662f\u8fd9\u6837\u5b9e\u73b0\u5f88\u9ebb\u70e6\u3002\u6211\u4eec\u4e0d\u4ec5\u9700\u8981$i,j$\u4e4b\u95f4\u6700\u77ed\u8def\u7684\u6761\u6570\uff0c\u8fd8\u8981\u4ed6\u4eec\u4e4b\u95f4\u6700\u77ed\u8def\u6240\u7ecf\u8fc7\u7684\u70b9\n\n\u8f6c\u6362\u89d2\u5ea6\uff0c\u6211\u4eec\u601d\u8003\u4e24\u4e2a\u70b9\u3002\n\n1.\u5982\u679c\u6709\u4e00\u4e2d\u8f6c\u70b9$k$\uff0c\u4f7f\u5f97$dis(i,j)>dis(i,k)+dis(k,j)$ \u90a3\u4e48\u6700\u77ed\u8def\u5fc5\u987b\u7ecf\u8fc7\u70b9$k$\u3002\n\n2.\u5982\u679c\u6709\u4e00\u4e2d\u8f6c\u70b9$k$\uff0c\u4f7f\u5f97$dis(i,j)=dis(i,k)+dis(k,j)$ \uff0c\u90a3\u4e48$i,j$\u4e4b\u95f4\u4e0d\u4ec5\u6709\u4e00\u6761\u6700\u77ed\u8def\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u4e4b\u524d\u627e\u5230\u70b9\u90fd\u4e0d\u4f1a\u8d70\u4e86\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u8fce\u5203\u800c\u89e3\u4e86\n\n\u6211\u4eec\u8dd1\u4e00\u904d$Floyd$\n\n$if(dis(i,j)>dis(i,k)+dis(k,j)$ \u8bb0\u5f55 $p(i.j)=k$\u3002\n\n$if(dis(i,j)==dis(i,k)+dis(k,j)$ \u8bb0\u5f55 $p(i.j)=-1$\u3002\n\n\u6700\u540e\u5904\u7406\u7b54\u6848\uff0c\u6211\u4eec\u9700\u8981\u53bb\u91cd\u548c\u6309\u987a\u5e8f\u8f93\u51fa\u3002\u770b\u6570\u636e\u8303\u56f4\u76f4\u63a5\u5f00\u4e00\u4e2a\u6876\u3002\u53cc\u91cd\u5faa\u73af\u8bb0\u5f55$p(i.j)$\uff0c\u5982\u679c\u5b83\u4e0d\u4e3a$-1$\uff0c$ans[p(i.j)]=true$\u3002\n\n\u6700\u540e\u5faa\u73af\u6876\u8f93\u51fa\u5c31\u597d\u4e86\u3002\n\n## 2.3 \u4ee3\u7801\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate <class T> inline void read(T&x){\n\tbool f;char ch=getchar();\n\tfor(f=false;!isdigit(ch);ch=getchar())if(ch=='-')f=true;\n\tfor(x=0;isdigit(ch);x=(x<<1)+(x<<3)+(ch^48),ch=getchar());\n\tx*=f==1?-1:1;\n}\nconst int INF=2e6;\nint mpx[205][205],impo[205][205],m,n;\nbool ans[205],flag;\nint main(){\n    read(n),read(m);    \n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n            if(i!=j) mpx[i][j]=INF;\n    for(int i=1,x,y,u;i<=m;i++){\n    \tread(x),read(y),read(u);\n        mpx[x][y]=mpx[y][x]=u;\n    }\n    for(int k=1;k<=n;k++)\n        for(int i=1;i<=n;i++)\n            if(i!=k)for(int j=1;j<=n;j++)\n                if(i!=j&&j!=k){\n                    if(mpx[i][j]>mpx[i][k]+mpx[k][j]){\n                    \tmpx[i][j]=mpx[i][k]+mpx[k][j];impo[i][j]=k;\n                        }\n                    else if(mpx[i][j]==mpx[i][k]+mpx[k][j]) impo[i][j]=-1;\n                }\n    for(int i=1;i<=n;i++) \n        for(int j=1;j<=n;j++)\n            if(impo[i][j]!=-1)ans[impo[i][j]]=true;    \n    for(int i=1;i<=n;i++)if(ans[i]) printf(\"%d \",i),flag=true;\n    if(!flag)cout<<\"No important cities.\";\n    return 0;\n}\n```\n\n\n# Part Three \u5199\u5728\u6700\u540e\n\n## 3.1 \u9e23\u8c22&\u6742\u8c08\n\n\u611f\u8c22 @ $Parabola$ \uff08UID:55537\uff09\u7684\u9898\u89e3\u5728\u6211\u5b66\u4e60\u4e2d\u7684\u5e2e\u52a9\n\n~~\u601d\u8def\u4e5f\u8fd8\u662f\u4ed6\u7684~~\n\n$CSP\\; RP\\; PLUS\\; PLUS$\n\n## 3.2 \u66f4\u65b0\u8bb0\u5f55\n\n$Vol \\; \\;1$ $2019/11/3$ \u9996\u6b21\u63d0\u4ea4",
        "postTime": 1572780923,
        "uid": 134876,
        "name": "Grussg",
        "ccfLevel": 4,
        "title": "P1841 [JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02 \u9898\u89e3"
    },
    {
        "content": "\u91cd\u8981\u57ce\u5e02\u6709\u4e09\u4e2a\u6027\u8d28\u5982\u4e0b\uff1a\n\n1.\u91cd\u8981\u57ce\u5e02\u80fd\u5bf9\u5176\u4ed6\u4e24\u4e2a\u4e0d\u540c\u57ce\u5e02\u7684\u6700\u77ed\u8def\u5f84\u505a\u51fa\u8d21\u732e\n\n2.\u91cd\u8981\u57ce\u5e02\u5177\u6709\u552f\u4e00\u6027\uff0c\u5982\u679c\u4e24\u4e0d\u540c\u57ce\u5e02\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u6709\u4e24\u79cd\u4e2d\u95f4\u57ce\u5e02\u60c5\u51b5\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u4e2d\u95f4\u57ce\u5e02\u53ef\u4ee5\u5f7c\u6b64\u4ee3\u66ff\uff0c\u5c31\u90fd\u4e0d\u80fd\u6210\u4e3a\u91cd\u8981\u57ce\u5e02\n\n3.\u91cd\u8981\u57ce\u5e02\u5177\u6709\u66ff\u4ee3\u6027\uff0c\u5bf9\u4e8e\u4e24\u4e0d\u540c\u57ce\u5e02\u95f4\u7684\u4e00\u79cd\u6700\u77ed\u8def\u5f84\u60c5\u51b5\uff0c\u8be5\u8def\u5f84\u4e0a\u6240\u6709\u4e2d\u95f4\u57ce\u5e02\u7686\u4e3a\u91cd\u8981\u57ce\u5e02\uff1b\u5982\u679c\u51fa\u73b0\u4e86\u4e00\u79cd\u66f4\u4f18\u6700\u77ed\u8def\u5f84\u60c5\u51b5\uff0c\u5148\u524d\u8def\u5f84\u4e0a\u6240\u6709\u4e2d\u95f4\u57ce\u5e02\u7686\u975e\u91cd\u8981\u57ce\u5e02\uff0c\u66f4\u4f18\u89e3\u8005\u662f\u3002\n\n\u8fd9\u9053\u9898\u4e5f\u5bb9\u6613\u77e5\u9053\u662f\u4f7f\u7528\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\u3002\u4f46\u4e0d\u662f\u52a8\u6001\u89c4\u5212\u8fc7\u7a0b\u4e2d\u80fd\u591f\u66f4\u65b0\u8def\u5f84\u7684\u57ce\u5e02\u5c31\u662f\u6700\u7ec8\u89e3\u7684\u91cd\u8981\u57ce\u5e02\uff0c\u9700\u8981\u4ece\u5168\u5c40\u7684\u89d2\u5ea6\u6765\u5224\u65ad\uff0c\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u8bb0\u5f55\u548c\u66f4\u65b0\u91cd\u8981\u57ce\u5e02\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n\n    \n    \n                    \n```cpp\n    #include<iostream>\n    #include<cstdio>\n    #include<cstdlib>\n    #include<cmath>\n    #include<cstring>\n    #include<string>\n    #include<iomanip>\n    #include<queue>\n    #include<set>\n    using namespace std;\n    int important[250][250];//\u8bb0\u5f55\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\u7684\u91cd\u8981\u57ce\u5e02 \n    bool have[250][250];//\u4e00\u6761\u8def\u5f84\u662f\u5426\u6709\u91cd\u8981\u57ce\u5e02 \n    int g[250][250];//\u90bb\u63a5\u77e9\u9635 \n    int n,m;//n\u4e2a\u70b9 m\u6761\u8fb9 \n    set<int> ans; \n    void floyd()\n    {\n        for(int i=1;i<=n;i++)\n            g[i][i] = 0;\n        for(int k=1;k<=n;k++)\n            for(int i=1;i<=n;i++)\n                if(k!=i)\n                    for(int j=1;j<=n;j++)\n                        if(k!=j && i!=j)\n                        {\n                            if(g[i][j] > g[i][k]+g[k][j])//\u6027\u8d281\uff1a\u5bf9\u6700\u77ed\u8def\u505a\u51fa\u8d21\u732e \n                            {\n                                have[i][j] = true;\n                                important[i][j] = k;//\u6027\u8d283\uff1a\u66ff\u4ee3\u6027\n                                g[i][j] = g[i][k]+g[k][j];\n                            }\n                            else if(g[i][j] == g[i][k]+g[k][j])//\u6027\u8d282:\u552f\u4e00\u6027 \n                                have[i][j] = false;\n                        }\n        return;\n    }\n    void init()\n    {\n        scanf(\"%d%d\",&n,&m);\n        int a,b,v;\n        for(int i=1;i<=m;i++)\n        {\n            scanf(\"%d%d%d\",&a,&b,&v);\n            g[a][b] = g[b][a] = v;\n        }\n        return;\n    }\n    void print()\n    {\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                if(have[i][j] == true)\n                    ans.insert(important[i][j]);\n        if(!ans.empty())//\u6709\u91cd\u8981\u57ce\u5e02 \n            for(set<int>::iterator i=ans.begin();i != ans.end();i++)\n                printf(\"%d \",*i);\n        else\n            printf(\"No important cities.\");\n    }\n    int main()\n    {\n        memset(g,1,sizeof(g));//g\u4e2d\u5143\u7d20\u503c\u521d\u59cb\u5316\u4e3a16843009\n        memset(have,false,sizeof(have));//\u4fdd\u5b58\u4e24\u57ce\u5e02i\u3001j\u95f4\u662f\u5426\u6709\u91cd\u8981\u57ce\u5e02 \n        memset(important,0,sizeof(important));//\u4fdd\u5b58\u4e24\u57ce\u5e02i\u3001j\u95f4\u7684\u4e00\u4e2a\u91cd\u8981\u57ce\u5e02 \n        ans.clear();//\u7ea2\u9ed1\u6811\uff0c\u81ea\u52a8\u6392\u5e8f\u3001\u53bb\u91cd \n        init();\n        floyd();\n        print();\n        return 0;\n    }\n\u91cd\u8981\u57ce\u5e02\u5e76\u975e\u53ea\u4fdd\u5b58\u4e00\u4e2a\uff1a\u56e0\u4e3a\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u5b50\u8def\u5f84\u4e5f\u4e3a\u6700\u77ed\u8def\u5f84\uff0c\u6240\u4ee5\u6bcd\u8def\u5f84\u4fdd\u5b58\u4e86\u6700\u77ed\u8def\u5f84\u4e2d\u7ec8\u70b9\u7684\u524d\u4e00\u4e2a\u4f5c\u4e3a\u91cd\u8981\u57ce\u5e02\uff0c\u4ee5\u524d\u4e00\u4e2a\u57ce\u5e02\u4e3a\u7ec8\u70b9\u7684\u5b50\u8def\u5f84\u53c8\u4f1a\u4fdd\u5b58\u524d\u4e00\u4e2a\u57ce\u5e02\u4f5c\u4e3a\u91cd\u8981\u57ce\u5e02\u2026\u2026\u2026\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u91cd\u8981\u57ce\u5e02\u4fdd\u5b58\u4e0b\u6765\u4e86\u3002\n```",
        "postTime": 1515739658,
        "uid": 32663,
        "name": "1LoveNozomi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02(x)\u3011"
    },
    {
        "content": "# 50\u5206\n \u8db3\u4e86\n \u601d\u8def\u5927\u5bb6\u5927\u6982\u548c\u6211\u662f\u4e00\u6837\u7684\n \u5c31\u662f\u5148\u8dd1\u4e00\u904dFloyed\n \u7b97\u51fa\u6240\u6709\u8282\u70b9\u5230\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u6700\u5c0f\u503c\uff0c\u4e5f\u5c31\u662f\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u8868\uff0c\u7528\u4e00\u4e2aFloyed\u5c31\u53ef\u4ee5\u5b9e\u73b0\n \u7136\u540e\u5c31\u53bb\u6389\u6bcf\u4e00\u4e2a\u70b9\uff0c\u91cd\u65b0\u8dd1n\u904dFloyed\uff0c\u6765\u6bd4\u8f83\u6709\u6ca1\u6709\u53d8\u5316\n \u672c\u4eba\u4e5f\u662f\u8f7b\u677e\u7684\u5199\u4e86\u51fa\u6765\uff0c\u8fc7\u4e86\u6837\u4f8b\uff0c\u5174\u81f4\u52c3\u52c3\u7684\u63d0\u4ea4\uff0c\u5374\u53ea\u670950\u5206\n \u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n------------\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nll dp[210][210],ff[210][210],f[210][210],n,m,u[210];//dp\u662f\u6700\u5f00\u59cb\u5b58\u7684\u8868\uff0cff\u662f\u5220\u9664\u4e00\u4e2a\u6570\u4e4b\u540e\u8dd1\u7684\u8868\uff0c\u6bcf\u6b21\u90fd\u8981\u66f4\u65b0\uff0cf\u5219\u662f\u8bb0\u5f55\u6700\u5f00\u59cb\u4ec0\u4e48\u90fd\u6ca1\u6709\u52a8\u7684\u8868\nint main()\n{\n    memset(dp,0x3f,sizeof(dp));//\u5c06\u6240\u7528\u6570\u7ec4\u90fdmemset,\u624d\u53ef\u4ee5\u518d\u540e\u6765Floyed\u65f6\u66f4\u597d\u6bd4\u5bf9\uff0c\u66f4\u65b0\u6570\u636e\n    memset(f,0x3f,sizeof(f));\n    memset(ff,0x3f,sizeof(ff));\n    ll i,j,k,x,y,v;\n    scanf(\"%lld%lld\",&n,&m);\n    for(i=1;i<=m;i++)\n    {\n        scanf(\"%lld%lld%lld\",&x,&y,&v);\n        ff[x][y]=ff[y][x]=f[x][y]=f[y][x]=dp[y][x]=dp[x][y]=v;//\u8f93\u5165\u662f\u5c06\u4e09\u4e2a\u6570\u7ec4\u90fd\u5b9a\u4e49\u6210\u4e00\u6837\u7684\uff0c\u4e00\u904d\u540e\u6765Floyed\n    }\n    for(i=1;i<=n;i++)\n    {\n        for(j=1;j<=n;j++)\n        {\n            if(ff[i][j]==0)ff[i][j]=ff[j][i]=-1;\n            if(f[i][j]==0)f[i][j]=f[j][i]=-1;\n            if(dp[i][j]==0)dp[i][j]=dp[j][i]=-1;//\u5c06\u6ca1\u6709\u8def\u7684\u6807\u8bb0\u6210-1\n        }\n    }\n    for(i=1;i<=n;i++)\n    {\n        dp[i][i]=0;\n        ff[i][i]=f[i][i]=0;\n  //\u628a\u6240\u6709\u5230\u81ea\u8eab\u7684\u8282\u70b9\u7684\u8def\u5f84\u90fd\u8bbe\u4e3a0\n    }\n    for(k=1;k<=n;k++)\n    {\n        for(i=1;i<=n;i++)\n        {\n            for(j=1;j<=n;j++)\n            {\n                if(dp[i][j]!=-1&&dp[k][i]!=-1&&dp[i][k]!=-1&&dp[k][j]!=-1&&dp[j][k]!=-1&&dp[j][i]!=-1)//\u5224\u65ad\u6709\u6ca1\u6709\u8def\u5f84\uff0c\u6709\u624d\u7b97\n                dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j]);\n            }\n        }\n    }//\u7b2c\u4e00\u6b21\u5efadp\u8868,\u6765\u5b58\u6700\u77ed\u8def\n    for(ll l=1;l<=n;l++)//\u679a\u4e3e\u53bb\u6389\u90a3\u4e00\u4e2a\u70b9\n    {\n        for(i=1;i<=n;i++)\n        {\n            ff[i][l]=ff[l][i]=-1;\n        }\n        //\u628a\u5230\u81ea\u5df1\u7684\u70b9\u7684\u6240\u6709\u8def\u5f84\u90fd\u5220\u9664\n        for(k=1;k<=n;k++)\n        {\n            if(k!=l)\n            for(i=1;i<=n;i++)\n            {\n                if(i!=l)\n                for(j=1;j<=n;j++)\n                {\n                    if(j!=l)\n                    if(ff[i][j]!=-1&&ff[k][i]!=-1&&ff[i][k]!=-1&&ff[k][j]!=-1&&ff[j][k]!=-1&&ff[j][i]!=-1)\n                    ff[i][j]=min(ff[i][j],ff[i][k]+ff[k][j]);\n                }\n            }\n        }//Floyed\n        for(i=1;i<=n;i++)\n        {\n            for(j=1;j<=n;j++)\n            {\n                if(ff[i][j]>dp[i][j]||ff[j][i]>dp[j][i]&&i!=l&&j!=l)\n                {\n                    u[l]=1;\n                    break;\n                }\n            }//\u5982\u679c\u6709\u4e00\u4e2a\u70b9\u6539\u53d8\u4e14\u4e0d\u662f\u5230\u53bb\u6389\u7684\u90a3\u4e2a\u70b9\uff0c\u5c06\u8fd9\u4e2a\u70b9\u6807\u8bb0\u4e3a\u91cd\u8981\n        }\n        for(i=1;i<=n;i++)\n        {\n            for(j=1;j<=n;j++)\n            {\n                ff[i][j]=f[i][j];\n            }\n        }//\u66f4\u65b0\n    }\n    for(i=1;i<=n;i++)\n    {\n        if(u[i])\n        {\n            printf(\"%lld \",i);\n        }\n    }//\u6309\u5b57\u5178\u5e8f\u8f93\u51fa\n    return 0;\n}\n```\n\n\n------------\n \u63d0\u4ea4\u4e4b\u540e\u6211\u81ea\u5df1\u5c31\u5728\u60f3\u6709\u6ca1\u6709\u4e0d\u8d85\u65f6\u7684\u529e\u6cd5\uff08~~\u56e0\u4e3a\u6211T\u4e86\u4e94\u4e2a\u70b9~~\uff09\n \u540e\u6765\u7a81\u7136\u53cd\u5e94\u8fc7\u6765\u53ea\u8981\u6709\u8fc7\u66f4\u6539\uff0c\u4e5f\u5c31\u662fdo\u65f6\u53d1\u73b0\u6bd4\u539f\u8def\u5f84\u5c0f\u7684\u70b9\uff0c\u90fd\u662f\u5173\u952e\u70b9\n \u4f46\u662f\u5982\u679c\u8fd9\u4e2a\u70b9\u66f4\u65b0\uff0c\u90a3\u4e48\u4e0a\u4e00\u4e2a\u786e\u5b9a\u4e86\u7684\u5173\u952e\u70b9\u5c31\u5f97\u53d6\u6d88\n \u6240\u4ee5\u5f97\u8bb0\u5f55\u5728\u8fd9\u6761\u8def\u5f84\u4e0a\u4e0a\u4e00\u4e2a\u6539\u53d8\u7684\u70b9\uff0c\u6211\u5c31\u7528\u4e86past[i][j]\u5b58\n \u8fd8\u6709\u4e00\u4e2a\u5341\u5206\u5173\u952e\u7684\u5730\u65b9\n \u5c31\u662f\u5982\u679c\u53d1\u73b0\u4e86\u4e00\u6761\u9053\u8def\u6709\u591a\u6761\u76f8\u7b49\u7684\u8def\u5f84\uff0c\u4e00\u6761\u4e5f\u4e0d\u8981\n \u4ee3\u7801\u5982\u4e0b\n\n\n------------\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nll dp[210][210],n,m,u[210],past[210][210];//dp\u5b58\u6700\u77ed\u8def\uff0cu\u6700\u540e\u8f93\u51fa\uff0cpast\u8bb0\u5f55\u8fd9\u6761\u8fb9\u4e0a\u7684\u4e0a\u4e00\u4e2a\u6539\u53d8\u70b9\nint main()\n{\n\tmemset(dp,0x3f,sizeof(dp));//\u4ecd\u7136\u5148\u53d6\u6700\u5927\u503c\n\tll i,j,k,x,y,v;\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%lld%lld%lld\",&x,&y,&v);\n\t\tdp[y][x]=dp[x][y]=v;//\u5b58\u8f93\u5165\u8fb9\n\t}\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tdp[i][i]=0;//\u5c06\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u957f\u5ea6\u8bbe\u4e3a0\n\t}\n\tfor(k=1;k<=n;k++)\n\t{\n\t\tfor(i=1;i<=n;i++)\n\t\t{\n\t\t\tif(i!=k)\n\t\t\tfor(j=1;j<=n;j++)\n\t\t\t{\n\t\t\t\tif(i==j||k==j)continue;\t\t\n\t\t\t\tif(dp[i][j]>dp[i][k]+dp[k][j])\n\t\t\t\t{\n\t\t\t\t\tdp[i][j]=dp[i][k]+dp[k][j];\n\t\t\t\t\tpast[i][j]=k;\n  \t\t\t\t\t//\u5c06\u8fd9\u6761\u8def\u7684\u5f53\u524d\u6539\u53d8\u70b9\u8bbe\u4e3a\u73b0\u5728\u6539\u53d8\u7684\u8fd9\u4e2a\u70b9\n\t\t\t\t}\n\t\t\t\telse if(dp[i][j]==dp[i][k]+dp[k][j])\n\t\t\t\t{\n  \t\t\t\t\t//\u5982\u679c\u51fa\u73b0\u591a\u4e2a\u76f8\u540c\u8fb9\uff0c\u5c06\u8fd9\u4e00\u6761\u8fb9\u4e0a\u7684\u5173\u952e\u70b9\u6e05\u96f6\n\t\t\t\t\tpast[i][j]=-1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tfor(j=1;j<=n;j++)\n\t\t{\n\t\t\tif(past[i][j]==-1)continue;//\u5982\u679c\u88ab\u6e05\u96f6\uff0c\u4e0d\u8f93\u51fa\u4e14\u4e0d\u4e3a\u5173\u952e\u70b9\n\t\t\tu[past[i][j]]=1;//\u5c06\u8981\u8f93\u51fa\u7684\u5173\u952e\u70b9\u6807\u8bb0\n\t\t}\n\t}\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tif(u[i])\n\t\t{\n\t\t\tprintf(\"%lld \",i);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n### \u4e00\u767e\u5206\u4e86\uff01\uff01\uff01\u597d\u6fc0\u52a8\n\u66f4\u5e0c\u671b\u5927\u5bb6\u652f\u6301\u6211\u4e5f\u8ba9\u6211\u5f97\u5230\u4e86\u5b66\u4e60\u548c\u590d\u4e60\u7684\u673a\u4f1a\n \u8c22\u8c22",
        "postTime": 1554820066,
        "uid": 106593,
        "name": "DD_Bruyne",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "### [Welcome to my blog](http://ch66.cf/274.html)\n\n## \u66b4\u529b\u5927\u6cd5\u597d\n\n\u9996\u5148Floyd\u7b97\u51fa\u6240\u6709\u57ce\u5e02\u90fd\u6ca1\u6709\u95ee\u9898\u7684\u6700\u77ed\u8def\u5b58\u8fdbdis\n\n\u518d\u679a\u4e3e\u6bcf\u4e00\u4e2a\u51fa\u95ee\u9898\u7684\u57ce\u5e02\uff0c\u66b4\u529b\u5224\u65ad\u5373\u53ef\n\n## \u6ca1\u6709\u91cd\u8981\u7684\u57ce\u5e02\u8bb0\u5f97\u8f93\u51fa\"No important cities.\"\uff01\uff01\uff01\n\n```\n#pragma GCC optimize(1)\n#pragma GCC optimize(2)\n#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#include<bits/stdc++.h>\nusing namespace std;\n\nint read() {\n    int x=1,ans=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9') {\n        if(ch=='-')\n            x*=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9') {\n        ans=ans*10+ch-48;\n        ch=getchar();\n    }\n    return x*ans;\n}\n\nint edge[205][205],dis[205][205],n,m,temp[205][205];\n\nint main() {\n    n=read();m=read();\n    memset(edge,0x3f,sizeof(edge));\n    for(int i=1;i<=m;i++) {\n        int u=read(),v=read(),val=read();\n        edge[u][v]=edge[v][u]=val;\n    }\n    memcpy(dis,edge,sizeof(edge));\n    for(int k=1;k<=n;k++)\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);\n    for(int wow=1;wow<=n;wow++) {\n        memcpy(temp,edge,sizeof(temp));\n        for(int k=1;k<=n;k++)\n            for(int i=1;i<=n;i++)\n                for(int j=1;j<=n;j++)\n                    if(k!=wow)\n                        temp[i][j]=min(temp[i][j],temp[i][k]+temp[k][j]);\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                if((i!=wow)&&(j!=wow)&&(temp[i][j]>dis[i][j])&&(i!=j)) {\n                    printf(\"%d \",wow);\n                    // cout<<i<<' '<<j<<' '<<temp[i][j]<<' '<<dis[i][j]<<endl;\n                    i=n+1;j=n+1;\n                }\n    }\n    return 0;\n}\n```\n\n[\u590d\u6742\u5ea6n^4,\u53ef\u662f\u7b80\u5355\u7684\u66b4\u529b\u53ea\u670980\u5206](https://www.luogu.org/recordnew/show/17661749)\n\n\u6211\u4eec\u7528\u4e00\u4e2a\u4e09\u7ef4\u6570\u7ec4ycl[k]\u8868\u793a\u5148\u7b97\u51fa\u524dk\u4e2a\u57ce\u5e02\u4f5c\u4e3a\u4e2d\u70b9\u6240\u7b97\u5230\u4e00\u822c\u7684\u6700\u77ed\u8def\u72b6\u6001\uff0c\u679a\u4e3e\u7684\u65f6\u5019zhijei\u8c03\u7528\u5373\u53ef\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u53ef\u4ee5\u964d\u5230(n^4)/2\n\n[\u52c9\u5f3a\u6c34\u8fc7](https://www.luogu.org/recordnew/show/17662359)\n\n```\n#pragma GCC optimize(1)\n#pragma GCC optimize(2)\n#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#include<bits/stdc++.h>\nusing namespace std;\n\nint read() {\n    int x=1,ans=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9') {\n        if(ch=='-')\n            x*=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9') {\n        ans=ans*10+ch-48;\n        ch=getchar();\n    }\n    return x*ans;\n}\n\nint edge[205][205],dis[205][205],n,m,temp[205][205],ycl[205][205][205];\nbool ok=true;\n\nint main() {\n    n=read();m=read();\n    memset(edge,0x3f,sizeof(edge));\n    for(int i=1;i<=m;i++) {\n        int u=read(),v=read(),val=read();\n        edge[u][v]=edge[v][u]=val;\n    }\n    memcpy(dis,edge,sizeof(edge));\n    for(int k=1;k<=n;k++)\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);\n    memcpy(ycl[0],edge,sizeof(edge));\n    for(int k=1;k<=n;k++) { \n        memcpy(ycl[k],ycl[k-1],sizeof(ycl[k-1]));\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                ycl[k][i][j]=min(ycl[k][i][j],ycl[k][i][k]+ycl[k][k][j]);\n    }\n    for(int wow=1;wow<=n;wow++) {\n        memcpy(temp,ycl[wow-1],sizeof(ycl[wow-1]));\n        for(int k=wow+1;k<=n;k++)\n            for(int i=1;i<=n;i++)\n                for(int j=1;j<=n;j++)\n                    if(k!=wow)\n                        temp[i][j]=min(temp[i][j],temp[i][k]+temp[k][j]);\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n                if((i!=wow)&&(j!=wow)&&(temp[i][j]>dis[i][j])&&(i!=j)) {\n                    printf(\"%d \",wow);\n                    ok=false;\n                    i=n+1;j=n+1;\n                }\n    }\n    if(ok) puts(\"No important cities.\");\n    return 0;\n}\n```\n\n\n\n\n",
        "postTime": 1553752642,
        "uid": 92288,
        "name": "ChenHacker",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "### \u795e\u4f3c[NOI2007]\u793e\u4ea4\u7f51\u7edc\n\n~~**\u7b80\u76f4\u672c\u6765\u5c31\u662f\u4e00\u9053\u9898**~~\n\n\u7136\u540e\uff0c\u5e76\u4e0d\u9700\u8981\u4ec0\u4e48$O(n^4)$\u6216\u8005$O(n^3logn)$\u7684\u7384\u5b66\u64cd\u4f5c\uff0c\u88f8\u4e00\u70b9\u8dd1\u4e2a$Floyd$ $O(n^3)$\u5c31\u53ef\u4ee5\u8fc7\u4e86\uff0c$n<=200$\u88f8\u8fc7\uff0c\u5e76\u4e14\uff0c\u5982\u679c\u4f60\u95f2\u7684\u614c\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u4f18\u5316\u5230$O(n^2logn)$\u3002\n\n\u6211\u4eec\u5f00\u4e24\u4e2a\u4e8c\u7ef4\u6570\u7ec4$dis[i][j]$ \u548c $edge[i][j]$\uff0c$dis[i][j]$\u4fdd\u5b58\u4ece$i$\u5230$j$\u7684\u6700\u77ed\u8def\u957f\u5ea6\uff0c$edge[i][j]$\u4fdd\u5b58\u4ece$i$\u5230$j$\u7684\u6700\u77ed\u8def\u6709\u51e0\u6761\u3002\n\n\u90a3\u4e48\u7b54\u6848\u5c31\u547c\u4e4b\u6b32\u51fa\u4e86\u3002\u53ea\u8981\u6211\u4eec\u7ef4\u62a4\u51fa\u8fd9\u4e24\u4e2a\u4e1c\u897f\uff0c\u7136\u540e\u53bb\u679a\u4e3e\u4e00\u4e0b\u4e2d\u8f6c\u70b9$p$\uff0c\u4e00\u65e6$dis[i][p]+dis[p][j]==dis[i][j]$\u5c31\u8bf4\u660e\u901a\u8fc7$p$\u5b58\u5728$(i,j)$\u7684\u6700\u77ed\u8def\uff0c\u4e00\u65e6$edge[i][p]*edge[p][j]==edge[i][j]$\uff0c\u5c31\u8bf4\u660e$(i,j)$\u7684\u6700\u77ed\u8def\u5168\u90e8\u9700\u8981\u901a\u8fc7$p$\u70b9\uff0c\u90a3\u4e48$p$\u5c31\u662f\u91cd\u8981\u7684\u70b9\u3002\n\n\u7136\u540e\uff0c\u663e\u7136\u5bf9\u4e8e\u4e0d\u540c\u7684$(i,j)$\u53ef\u80fd\u90fd\u628a$p$\u4f5c\u4e3a\u4e86\u91cd\u8981\u7684\u70b9\uff0c\u6240\u4ee5\u8f93\u51fa\u7684\u65f6\u5019\u9700\u8981\u5224\u65ad$p$\u662f\u4e0d\u662f\u5df2\u7ecf\u8f93\u51fa\u8fc7\u4e86\uff0c\u62ff\u4e2a$vis[i]$\u8bb0\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u907f\u514d\u591a\u6b21\u8f93\u51fa\u540c\u4e00\u4e2a$p$\u3002\n\n### $code:$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m;\nlong long dis[300][300];\nlong long edge[300][300];\nbool vis[300];\ninline void add(int u,int v,int w){\n\tif(w<dis[u][v]){\n\t\tdis[u][v]=w,edge[u][v]=1;\n\t}\n\telse if(w==dis[u][v]){\n\t\tedge[u][v]++;\n\t}\n}\nint main(){\n\tmemset(dis,0x3f,sizeof(dis));\n\tcin>>n>>m;\n\tfor(int i=1,u,v,w;i<=m;i++){\n\t\tscanf(\"%d %d %d\",&u,&v,&w);\n\t\tadd(u,v,w),add(v,u,w);\n\t}\n\tfor(int k=1;k<=n;k++){\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tif(i==j || i==k || k==j) continue;\n\t\t\t\tif(dis[i][k]+dis[k][j]<dis[i][j]){\n\t\t\t\t\tdis[i][j]=dis[i][k]+dis[k][j];\n\t\t\t\t\tedge[i][j]=edge[i][k]*edge[k][j];\n\t\t\t\t}\n\t\t\t\telse if(dis[i][k]+dis[k][j]==dis[i][j]){\n\t\t\t\t\tedge[i][j]+=edge[i][k]*edge[k][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tint fl=0;\n\tfor(int p=1;p<=n;p++){\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tif(i==j || i==p || p==j) continue;\n\t\t\t\tif(vis[p]) continue;\n\t\t\t\tif(dis[i][p]+dis[p][j]==dis[i][j]){\n\t\t\t\t\tif(edge[i][p]*edge[p][j]==edge[i][j]){\n\t\t\t\t\t\tcout<<p<<\" \";vis[p]=1;fl=1;\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t}\t\n\t\t}\n\t}\n\tif(!fl){\n\t\tprintf(\"No important cities.\");\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1550745024,
        "uid": 64611,
        "name": "\u4eba\u6b87\u7269\u5df2\u975e",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "\u5148\u662f\u6715\u7684\u505a\u6cd5O(n^3)\n\n\u5177\u4f53\u601d\u8def\u662fDIJSTRA\u6c42\u51fa\u6bcf\u4e24\u4e2a\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6(dis)\u548c\u6761\u6570(cou)\u3002\n\n\u82e5\u5b58\u5728\u4e09\u70b9i\u3001k\u3001j\uff0c\u4f7f\n\n```cpp\nG.dis[i][k]+G.dis[k][j] == G.dis[i][j]\nG.cou[i][k]*G.cou[k][j] == G.cou[i][j]\n```\n\n\u5219k\u662f\u91cd\u8981\u57ce\u5e02\u3002\n\n\u8fd9\u4e48\u66b4\u529b\u2026\u2026\u5c45\u7136\u80fd\u8fc7\u2026\u2026\n\n\uff08\u522b\u8d70\uff0c\u540e\u9762\u8fd8\u6709\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\n\nconst int maxn = 205;\nconst int maxm = 40005;\nint n, m;\nint iss[maxn];\n\nstruct gra {\n\tint tm, st[maxn], to[maxm], nex[maxm], l[maxm];\n\tint dis[maxn][maxn], cou[maxn][maxn];\n\tbool v[maxn];\n\tpriority_queue <pair<int, int> > qq;\n\tvoid adde(int a, int b, int c) {\n\t\ttm++;\n\t\tto[tm]=b;\n\t\tl[tm]=c;\n\t\tnex[tm]=st[a];\n\t\tst[a]=tm;\n\t\treturn;\n\t}\n\tvoid dij(int x) {\n\t\tint y, i;\n\t\tmemset(v, 0, sizeof(v));\n\t\tmemset(dis[x], 0x3f, sizeof(dis[x]));\n\t\tmemset(cou[x], 0x3f, sizeof(cou[x]));\n\t\tdis[x][x]=0;\n\t\tcou[x][x]=1;\n\t\tqq.push(make_pair(0, x));\n\t\twhile(!qq.empty()) {\n\t\t\ty=qq.top().second;\n\t\t\tqq.pop();\n\t\t\tif(v[y] == 1) continue;\n\t\t\tv[y]=1;\n\t\t\tfor(i=st[y]; i != 0; i=nex[i]) {\n\t\t\t\tif(dis[x][to[i]] == dis[x][y]+l[i]) {\n\t\t\t\t\tcou[x][to[i]] += cou[x][y];\n\t\t\t\t}\n\t\t\t\telse if(dis[x][to[i]] > dis[x][y]+l[i]) {\n\t\t\t\t\tcou[x][to[i]] = cou[x][y];\n\t\t\t\t\tdis[x][to[i]] = dis[x][y]+l[i];\n\t\t\t\t\tqq.push(make_pair(-dis[x][to[i]], to[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n} G;\n\nint main() {\n\tint i, j, k, ta, tb, tc, ans;\n\tscanf(\"%d%d\", &n, &m);\n\tfor(i=1; i <= m; i++) {\n\t\tscanf(\"%d%d%d\", &ta, &tb, &tc);\n\t\tG.adde(ta, tb, tc);\n\t\tG.adde(tb, ta, tc);\n\t}\n\tfor(i=1; i <= n; i++) \n\t\tG.dij(i);\n\tfor(i=1; i <= n; i++) {\n\t\tfor(j=1; j <= n; j++) {\n\t\t\tfor(k=1; k <= n; k++) {\n\t\t\t\tif(i != k && j != k && i != j)\n\t\t\t\tif(G.dis[i][k]+G.dis[k][j] == G.dis[i][j] && \n\t\t\t\tG.cou[i][k]*G.cou[k][j] == G.cou[i][j])\n\t\t\t\t\tiss[k]=1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tans=0;\n\tfor(i=1; i <= n; i++) {\n\t\tif(iss[i] == 1) ans++, printf(\"%d \", i);\n\t}\n\tif(ans != 0) printf(\"\\n\");\n\telse printf(\"No important cities.\\n\");\n\treturn 0;\n}\n\n```\n\n\u53e6\u9644\u4e0aFloyd\u7248\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\n\nconst int maxn = 205;\nconst int maxm = 40005;\nint n, m;\nint iss[maxn];\n\nstruct gra {\n    int tm, st[maxn], to[maxm], nex[maxm], l[maxm];\n    int dis[maxn][maxn], cou[maxn][maxn];\n    void cle() {\n        memset(dis, 0x3f, sizeof(dis));\n        memset(cou, 0x3f, sizeof(cou));\n\t}\n    void adde(int a, int b, int c) {\n    \tif(dis[a][b] == c) {\n\t    \tcou[a][b]++;\n\t\t}\n    \tif(dis[a][b] > c) {\n\t    \tdis[a][b]=c;\n\t    \tcou[a][b]=1;\n\t\t}\n        return;\n    }\n    void flo() {\n        int i, j, k;\n\t\tfor(k=1; k <= n; k++) {\n\t\t\tfor(i=1; i <= n; i++) {\n\t\t\t\tfor(j=1; j <= n; j++) {\n                \tif(i != k && j != k && i != j) {\n\t                \tif(dis[i][k]+dis[k][j] == dis[i][j]) {\n\t                \t\tcou[i][j]+=cou[i][k]*cou[k][j];\n\t\t\t\t\t\t}\n\t                \tif(dis[i][k]+dis[k][j] < dis[i][j]) {\n\t                \t\tdis[i][j]=dis[i][k]+dis[k][j];\n\t                \t\tcou[i][j]=cou[i][k]*cou[k][j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        return;\n    }\n} G;\n\nint main() {\n    int i, j, k, ta, tb, tc, ans;\n    scanf(\"%d%d\", &n, &m);\n    G.cle();\n    for(i=1; i <= m; i++) {\n        scanf(\"%d%d%d\", &ta, &tb, &tc);\n        G.adde(ta, tb, tc);\n        G.adde(tb, ta, tc);\n    }\n    G.flo();\n    for(i=1; i <= n; i++) {\n        for(j=1; j <= n; j++) {\n            for(k=1; k <= n; k++) {\n                if(i != k && j != k && i != j)\n                if(G.dis[i][k]+G.dis[k][j] == G.dis[i][j] && \n                G.cou[i][k]*G.cou[k][j] == G.cou[i][j])\n                    iss[k]=1;\n            }\n        }\n    }\n    \n    ans=0;\n    for(i=1; i <= n; i++) {\n        if(iss[i] == 1) ans++, printf(\"%d \", i);\n    }\n    if(ans != 0) printf(\"\\n\");\n    else printf(\"No important cities.\\n\");\n    return 0;\n}\n```\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u753b\u98ce\u5206\u5272\u7ebf\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n\u987a\u4fbf\u63d0\u4f9b\u4e00\u4e0b\u672c\u9898@nozomi_tojo \u795e\u7287\u7684\u65b9\u6cd5\u4e2d\u6700\u540e\u4e00\u53e5\u8bdd\u7684\u4e25\u683c\u8bc1\u660e\uff1a\n\n\u672c\u9898\u5373\u6c42\u4e00\u4e2a\u70b9\uff08\u91cd\u8981\u57ce\u5e02\uff09\u5728\u67d0\u4e24\u70b9\u95f4\u7684\u6240\u6709\u6700\u77ed\u8def\u5f84\u4e0a\u51fa\u73b0\n\n\u8003\u8651\u5f31\u5316\u95ee\u9898\uff0c\n\n\u3010\u5f15\u74061\u3011\uff1a\u82e5\u6709A\u5230B\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u5b50\u8def\u5f84\uff0c\u5219\u8be5\u5b50\u8def\u5f84\u5c31\u662f\u5b50\u8def\u5f84\u4e24\u7aef\u4e24\u70b9C\u3001D\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002\u4e14\u6240\u6709C\u3001D\u7684\u6700\u77ed\u8def\u5f84\u90fd\u662fA\u5230B\u67d0\u6761\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u5b50\u8def\u5f84\u3002\n\n\u7531\u6b64\u5728\u5fae\u89c2\u5bf9\u8f83\u957f\u8def\u5f84\u7f29\u5c0f\u5f97\u5230\uff0c\n\n\u3010\u63a8\u8bba1\u3011\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u91cd\u8981\u57ce\u5e02A\uff0c\u5fc5\u7136\u5b58\u5728\u4e24\u70b9B\u3001C\uff0c\u4f7fB\u5230C\u7684\u6700\u77ed\u8def\u5f84\u4e3aB\u2192A\u2192C\u3002\n\n- \u8bc1\u660e\uff1a\u53d6\u4e24\u70b9S\u3001E\u95f4\u8fc7A\u7684\u4e00\u6761\u7ecf\u8fc7\u7684\u70b9\u6700\u591a\u7684\u6700\u77ed\u8def\u5f84\u3002\n\n- \u8bbe\u5176\u4e3aS\u2192\u00b7\u00b7\u00b7\u2192P\u2192A\u2192Q\u2192\u00b7\u00b7\u00b7\u2192E\u3002\n\n- \u82e5P\u3001Q\u95f4\u5b58\u5728\u6700\u77ed\u8def\u7ecf\u8fc74\u4e2a\u70b9\uff0cP\u2192K\u2192A\u2192Q\uff0c\u5219\u53ef\u4ee5\u66ff\u6362\u539f\u6765\u7684\u5b50\u8def\u5f84P\u2192A\u2192Q\uff0c\u5219\u539f\u8def\u5f84\u4e0d\u6ee1\u8db3\u201c\u8fc7A\u7684\u4e00\u6761\u7ecf\u8fc7\u7684\u70b9\u6700\u591a\u7684\u6700\u77ed\u8def\u5f84\u201d\u3002\n\n- \u82e5P\u3001Q\u95f4\u5b58\u5728\u6700\u77ed\u8defP\u2192K\u2192Q\uff0c\u5219A\u4e0d\u662f\u91cd\u8981\u57ce\u5e02\uff0c\u77db\u76fe\u3002\n\n- \u5f97\u8bc1\u3002\n\n\u6545\u5176\u65b9\u6cd5\u5fc5\u7136\u4e0d\u4f1a\u6f0f\u53bb\u91cd\u8981\u57ce\u5e02\u3002",
        "postTime": 1547954881,
        "uid": 18883,
        "name": "CR_Raphael",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "#### \u8fd9\u9053\u9898\u7684\u4e3b\u4f53\u601d\u8def\u6211\u8ba4\u4e3a\u662f\u8bb0\u5f55\u4e0b\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u7684\u6761\u6570\uff0c\u7136\u540e\u5982\u679c\u53ea\u6709\u4e00\u6761\u7684\u8bdd\u679a\u4e3e\u51fa\u8fd9\u8def\u4e0a\u7684\u6240\u6709\u70b9\uff08\u8fd9\u5c31\u662f\u9898\u76ee\u4e2d\u8981\u6c42\u7684\u91cd\u8981\u57ce\u5e02\uff09\u3002\u7136\u540e\u8fd9\u9053\u9898n<=200\u7684\u6570\u636e\u8303\u56f4\u8ba9\u6211\u5148\u5199\u4e86\u4e00\u904dfloyd\n### \u4f46\u8bf7\u4ed4\u7ec6\u601d\u8003\uff0cfloyd\u8c8c\u4f3c\u6ca1\u6709\u529e\u6cd5\u8bb0\u5f55\u6700\u77ed\u8def\u6761\u6570......\uff08\u7136\u800c\u6211\u8fd9\u4e2a\u9519\u8bef\u7684\u4ee3\u7801\u5c45\u7136\u9a97\u4e8670.....~~\u6570\u636e\u597d\u6c34\u554a~~\uff09\u8bf7\u770b70\u5206\u4ee3\u7801\n```\n#include<bits/stdc++.h>//\u8fd9\u4e2a\u4ee3\u7801\u6211\u5c31\u4e0d\u8fdb\u884c\u89e3\u91ca\u4e86\uff0c\u53cd\u6b63\u662f\u9519\u7684\nusing namespace std;\nint cnt[310][310],n,m,dis[310][310];\nbool vis[310],flag,debug;\ninline void floyd(){\n    int i,j,k;\n    for(k=1;k<=n;k++){\n        for(i=1;i<=n;i++){\n            for(j=1;j<=n;j++){\n            \tif(i==k||i==j||j==k) continue;\n                if(dis[i][j]==dis[i][k]+dis[k][j]){\n                    cnt[i][j]++;\n                }\n                if(dis[i][j]>dis[i][k]+dis[k][j]){\n                    dis[i][j]=dis[i][k]+dis[k][j];\n                    cnt[i][j]=1;\n                }\n            }\n        }\n    }\n}\ninline void check(){\n    int i,j,k;\n    for(i=1;i<=n;i++){\n        for(j=1;j<=n;j++){\n            for(k=1;k<=n;k++){\n                if(i==k||i==j||j==k) continue;\n                if(dis[i][j]==dis[i][k]+dis[k][j]&&cnt[i][j]==1){\n                    vis[k]=true;\n                }\n            }\n        }\n    }\n}\nint main(){\n    int i,j,k;\n    cin>>n>>m;\n    memset(dis,0x3f,sizeof(dis));\n    for(i=1;i<=n;i++){\n        dis[i][i]=0;\n    }\n    for(i=1;i<=m;i++){\n        int x,y,z;\n        cin>>x>>y>>z;\n        dis[x][y]=z;\n        dis[y][x]=z;\n    }\n    floyd();\n    check();\n    for(i=1;i<=n;i++){\n        if(vis[i]){\n        printf(\"%d \",i);\n        flag=true;\n        }\n    }\n    if(!flag){\n        cout<<\"No important cities.\"<<endl;\n    }\n    //debug=true;\n    if(debug){\n        for(i=1;i<=n;i++){\n            for(j=1;j<=n;j++){\n                //cout<<i<<\" \"<<j<<\" \"<<dis[i][j]<<endl;\n                if(cnt[i][j]>1) cout<<i<<\" \"<<j<<endl;\n            } \n        }\n    }\n    return 0;\n}```\n\n#### \u518d\u5927\u6982\u660e\u767d\u8fd9\u4e2a\u9898\u7684\u601d\u8def\u540e.....\u65e2\u7136floyd\u6ca1\u529e\u6cd5\u8ba1\u6570\uff0c\u90a3\u4e48dij\u53ef\u4ee5\u554a\u65e2\u7136\u5982\u6b64\uff0c\u5c31\u6709\u4e86\u4ee5\u4e0b\u8fd9\u6bb5\u4ee3\u7801\n```#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint w=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-') f=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\tw=(w<<3)+(w<<1)+ch-48;\n\t\tch=getchar();\n\t}\n\treturn w*f;\n}//\u5feb\u8bfb\u5c31\u4e0d\u591a\u8bf4\u4e86\nint head[1000010],dis[310][310],n,m,cntt,cnt[310][310];\nbool flag,debug,vis[310];\nstruct Edge{\n\tint from,to,next,dis;\n}edge[1000010];\ninline void addedge(int u,int v,int w){\n\tcntt++;\n\tedge[cntt].from=u;\n\tedge[cntt].to=v;\n\tedge[cntt].dis=w;\n\tedge[cntt].next=head[u];\n\thead[u]=cntt;\n}\nstruct node{\n\tint num,dis;\n\tfriend bool operator < (node a,node b){\n\t\treturn a.dis>b.dis;\n\t}\n};\npriority_queue<node> q;//\u5230\u8fd9\u90fd\u662f\u5e38\u89c4\u64cd\u4f5c\ninline void dij(int s){//\u65e2\u7136\u662f\u5355\u6e90\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u6211\u5c31\u7528\u4e00\u7ef4\u6570\u7ec4\u6765\u8bb0\u5f55\u8d77\u70b9\n\tint i,j,k,u,v,w;\n\tdis[s][s]=0;\n\tq.push((node){s,0});\n\tcnt[s][s]=1;\n\twhile(!q.empty()){\n\t\tnode front=q.top();\n\t\tq.pop();\n\t\tu=front.num;\n\t\tif(dis[s][u]>front.dis) continue;\n\t\tfor(i=head[u];i;i=edge[i].next){\n\t\t\tv=edge[i].to;\n\t\t\tw=edge[i].dis;\n\t\t\tif(dis[s][v]==dis[s][u]+w){\n\t\t\t\tcnt[s][v]+=cnt[s][u];\n\t\t\t}\n\t\t\tif(dis[s][v]>dis[s][u]+w){\n\t\t\t\tcnt[s][v]=cnt[s][u];\n\t\t\t\tdis[s][v]=dis[s][u]+w;\n\t\t\t\tq.push((node){v,dis[s][v]});\n\t\t\t}\n\t\t}\n\t}//\u8fd9\u91cc\u9762\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u548c\u666e\u901a\u7684\u5355\u6e90\u6700\u77ed\u8def\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u52a0\u4e86\u4e00\u7ef4\u8bb0\u5f55\u8d77\u70b9\n}\ninline void check(){\n\tint i,j,k;\n\tfor(k=1;k<=n;k++){\n\t\tfor(i=1;i<=n;i++){\n\t\t\tfor(j=1;j<=n;j++){\n\t\t\t\tif(i==j||i==k||k==j) continue;\n\t\t\t\tif(dis[i][j]==dis[i][k]+dis[k][j]&&cnt[i][j]==1){\n\t\t\t\t\tvis[k]=true;//\u82e5\u8be5\u70b9\u5728\u6700\u77ed\u8def\u4e0a\u4e14\u6700\u77ed\u8def\u53ea\u6709\u4e00\u6761\uff0c\u6b64\u70b9\u5c31\u662f\u91cd\u8981\u70b9\uff08\u8fd9\u4e2a\u53ef\u4ee5\u81ea\u884c\u624b\u63a8\u4e00\u4e0b\uff0c\u86ee\u5bb9\u6613\u60f3\u5230\u7684\uff09\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tn=read();\n\tm=read();\n\tmemset(dis,0x3f,sizeof(dis));\n\tint i,j,k;\n\tfor(i=1;i<=m;i++){\n\t\tint x,y,z;\n\t\tx=read();\n\t\ty=read();\n\t\tz=read();\n\t\taddedge(x,y,z);\n\t\taddedge(y,x,z);\n\t}\n\tfor(i=1;i<=n;i++){\n\t\tdij(i);\n\t}\n\t//debug=true;\n\tif(debug){\n\t\tfor(i=1;i<=n;i++){\n\t\t\tfor(j=1;j<=n;j++){\n\t\t\t\tcout<<i<<\" \"<<j<<\" \"<<cnt[i][j]<<endl;\n\t\t\t}\n\t\t}\n\t}//\u8fd9\u4e2a\u5c31\u662f\u4e2d\u95f4\u6d4b\u8bd5\u7528\u7684\n\tcheck();\n\tfor(i=1;i<=n;i++){\n\t\tif(vis[i]){\n\t\t\tcout<<i<<\" \";\n\t\t\tflag=true;//\u6253\u4e2atag\u8bb0\u5f55\u662f\u5426\u6709\u70b9\u662f\u91cd\u8981\u57ce\u5e02\n\t\t}\n\t}\n\tif(!flag) cout<<\"No important cities.\"<<endl;\n\treturn 0;\n}\n```\n### emm\u8fd9\u9053\u9898\u5927\u6982\u5c31\u662f\u8fd9\u6837\u4e86\uff0c\u5e0c\u671b\u5927\u5bb6\u90fd\u80fd\u7406\u89e3\u6211\u7684\u505a\u6cd5\u5427\uff01\n",
        "postTime": 1538364286,
        "uid": 106035,
        "name": "\u6e29\u8bcd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "\u8dd1Floyd\uff0c\u5e76\u8bb0\u5f55\u4e24\u70b9\u95f4\u7684\u4e00\u4e2a\u91cd\u8981\u7684\u57ce\u5e02\u3002\n\n\n\u5982\u679c\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb\u66f4\u65b0\uff0c\u5219\u91cd\u8981\u7684\u57ce\u5e02\u4e5f\u66f4\u65b0\u3002\n\n\n\u5982\u679c\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb\u5728\u8ba1\u7b97\u65f6\u51fa\u73b0\u4e0e\u539f\u6765\u7ed3\u679c\u76f8\u7b49\u65f6\uff0c\u5c31\u8bf4\u660e\u53ef\u80fd\u51fa\u73b0\u591a\u6761\u6700\u77ed\u8def\uff0c\u8fd9\u65f6\u5220\u6389\u91cd\u8981\u7684\u57ce\u5e02\u3002\n\n\n\u6700\u540e\u679a\u4e3e\u4e24\u4e2a\u70b9\uff0c\u628a\u5b83\u4eec\u4e4b\u95f4\u7684\u91cd\u8981\u7684\u57ce\u5e02\u53bb\u91cd\u540e\u8bb0\u5f55\u4e0b\u6765\uff0c\u6392\u5e8f\u8f93\u51fa\u5373\u53ef\u3002\n\n\n\u7531\u4e8e\u5728Floyd\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4e2d\u70b9\uff0c\u5176\u4ed6\u70b9\u5bf9\u90fd\u8fdb\u884c\u8fc7\u8003\u8651\uff0c\u56e0\u6b64\u7b54\u6848\u662f\u4e0d\u4f1a\u51fa\u73b0\u9057\u6f0f\u7684\u3002\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n^3)$\u3002\n\n\nC++ Code\uff1a\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\nint n,m,d[202][202],s[202][202],ans[202];\nbool has[202];\ninline int readint(){\n    char c=getchar();\n    for(;!isdigit(c);c=getchar());\n    int d=0;\n    for(;isdigit(c);c=getchar())\n    d=(d<<3)+(d<<1)+(c^'0');\n    return d;\n}\nint main(){\n    n=readint(),m=readint();\n    memset(d,0x3f,sizeof d);\n    while(m--){\n        int x=readint(),y=readint(),z=readint();\n        d[x][y]=d[y][x]=z;\n    }\n    for(int k=1;k<=n;++k)\n    for(int i=1;i<=n;++i)\n    if(i!=k)\n    for(int j=1;j<=n;++j)\n    if(i!=j&&j!=k){\n        if(d[i][j]>d[i][k]+d[k][j]){\n            d[i][j]=d[i][k]+d[k][j];\n            s[i][j]=k;\n        }else\n        if(d[i][j]==d[i][k]+d[k][j])s[i][j]=-1;\n    }\n    int cnt=0;\n    memset(has,0,sizeof has);\n    for(int i=1;i<=n;++i)\n    for(int j=1;j<=n;++j)\n    if(s[i][j]>0&&!has[s[i][j]]){\n        has[s[i][j]]=true;\n        ans[++cnt]=s[i][j];\n    }\n    if(cnt==0)return puts(\"No important cities.\"),0;\n    std::sort(ans+1,ans+cnt+1);\n    for(int i=1;i<cnt;++i)printf(\"%d \",ans[i]);\n    printf(\"%d\\n\",ans[cnt]);\n    return 0;\n}\n```",
        "postTime": 1513338775,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02(x)\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u8981\u6211\u4eec\u6c42n\u4e2a\u70b9\u4e2d\u6709\u54ea\u4e9b\u662f\u91cd\u8981\u7684\u70b9\u3002\n\n~~\u76f4\u63a5\u628a\u6bcf\u4e2a\u70b9\u90fd\u5355\u72ec\u8dd1\u4e00\u904dfloyd~~\n\n\u8fd9\u6837\u80af\u5b9a\u4e0d\u884cO(n^4)\u8fc7\u4e0d\u4e86200\n\n\u8003\u8651\u80fd\u4e0d\u80fd\u5728O(n^3)\u91cc\u89e3\u51fa\u6765\n\n\u8fd9\u91cc\u601d\u8def\u548c\u6700\u77ed\u8def\u8ba1\u6570\u90a3\u4e2a\u9898\u6709\u70b9\u50cf\uff0c\u8bb0num[i][j]\u4e3ai\uff0cj\u95f4\u6700\u77ed\u8def\u6761\u6570\n\n\u7531\u4e8efloyd\u672c\u8d28\u662f\u4e2a\u52a8\u6001\u89c4\u5212\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6c42dis\u7684\u65f6\u5019\u628anum\u4e5f\u6c42\u51fa\u6765\n\ndis[i][j]>dis[i][k]+dis[k][j]\u7684\u65f6\u5019\uff0ci\uff0cj\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u88ab\u66f4\u65b0\u4e86\uff0cnum\u7684\u503c\u5219\u6539\u4e3ai\uff0ck\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u6761\u6570*k\uff0cj\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u6761\u6570\uff08\u4e58\u6cd5\u539f\u7406\uff09\n\ndis[i][j]==dis[i][k]+dis[k][j]\u7684\u65f6\u5019\uff0ci\uff0cj\u4e4b\u95f4\u6700\u77ed\u8def\u4fdd\u7559\uff0c\u628anum\u7684\u503c\u52a0\u4e0ai\uff0ck\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u6761\u6570*k\uff0cj\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u6761\u6570\u5373\u53ef\uff08\u52a0\u6cd5\u539f\u7406\uff09\n\n\u597d\u4e86num\u6c42\u51fa\u6765\u4e86\u600e\u4e48\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u4e0d\u662f\u91cd\u8981\u7684\u70b9\u5462\uff1f\n\n\u6211\u4eec\u679a\u4e3ei\uff0cj\uff0c\u5982\u679c\u5b58\u5728\u4e00\u7ec4i\uff0cj\u4e4b\u95f4\u6240\u6709\u7684\u6700\u77ed\u8def\u90fd\u7ecf\u8fc7k\uff0c\u90a3k\u70b9\u5c31\u662f\u4e2a\u91cd\u8981\u7684\u70b9\u4e86\n\n\u63a5\u4e0b\u6765\u662f\u4ee3\u7801\u73af\u8282\uff1a\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint ok,n,m,x,y,z,dis[201][201],num[201][201],inf=99999999;\nint check(int k)\n{\n\tfor(int i=1;i<=n;i++)\n\t   for(int j=1;j<=n;j++)\n\t       if(dis[i][j]==dis[i][k]+dis[k][j])\n\t           if(num[i][j]==num[i][k]*num[k][j])\n\t               return 1;\n\treturn 0;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n            dis[i][j]=inf,num[i][j]=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tdis[x][y]=dis[y][x]=z;\n\t    num[x][y]=num[y][x]=1;\n    }\n\tfor(int k=1;k<=n;k++)\n\t   for(int i=1;i<=n;i++)\n\t       for(int j=1;j<=n;j++)\n\t           if(dis[i][j]>dis[i][k]+dis[k][j])\n               {\n               \t   dis[i][j]=dis[i][k]+dis[k][j];\n\t               num[i][j]=num[i][k]*num[k][j];\n               }\n               else if(dis[i][j]==dis[i][k]+dis[k][j])\n                   num[i][j]+=num[i][k]*num[k][j];\n    for(int i=1;i<=n;i++)dis[i][i]=inf,num[i][i]=0;//\u4e00\u4e2a\u5c0f\u5751\n\tfor(int k=1;k<=n;k++)\n\t    if(check(k))printf(\"%d \",k),ok=1;\n\tif(ok==0)printf(\"No important cities.\");\n\treturn 0;\n}\n```\n~~80\u5206\u7684\u8bb0\u5f97\u628adis[i][i]=inf,num[i][i]=0;\u81ea\u5df1\u4e0d\u80fd\u8d70\u5230\u81ea\u5df1\uff01~~\n",
        "postTime": 1576680833,
        "uid": 31294,
        "name": "\u529f\u5728\u4e0d\u820d",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "### \u63d0\u4f9b\u4e00\u4e2a\u6700\u77ed\u8def\u8ba1\u6570\u7684\u65b9\u6cd5\n\n\u9996\u5148\u8fd9\u9898\u5f88\u5bb9\u6613\u5c31\u80fd\u60f3\u5230\u662f$Floyd$\n\n\u4e4b\u540e\u5c31\u662f\u679a\u4e3e\u70b9\u5bf9$(i,j),$ \u518d\u679a\u4e3e\u4e00\u4e2a\u4e2d\u95f4\u65ad\u70b9$k$\n\n$(k\\not=i)$\u4e14$(k\\not=j)($\u8fd9\u4e2a\u6761\u4ef6\u5f88\u91cd\u8981$)$ \n\n\u7136\u540e\u5c31\u662f\u8981\u5224\u65ad$k$\u5728\u4e0d\u5728$i$\u5230$j$\u7684\u6700\u77ed\u8def\u5f84\u4e0a\n\n\u8bf4\u7684\u66f4\u51c6\u786e\u4e00\u4e9b$,k$\u662f\u4e0d\u662f\u4e00\u5b9a\u5728$i$\u5230$j$\u7684\u6700\u77ed\u8def\u5f84\u4e0a\n\n\u7136\u540e\u6211\u4eec\u8bb0$cnt[i][j]$\u8868\u793a$i$\u5230$j$\u7684\u6700\u77ed\u8def\u7684\u6761\u6570\n\n\u6240\u4ee5\u8bf4\u5982\u679c$cnt[i][j] = 0$\u6216$cnt[i][j] \\geq 2$\n\n\u90a3\u4e48\u5176\u5b9e\u5c31\u6ca1\u6709\u4e2d\u95f4\u8282\u70b9$k$\u662f\u91cd\u8981\u57ce\u5e02\n\n\u5426\u5219\u7684\u8bdd\u4efb\u4f55\u7684$k$\n\n\u4f7f\u5f97$dis[i][j] = dis[i][k] + dis[k][j]$\u90fd\u662f\u91cd\u8981\u57ce\u5e02\n\n\u90a3\u4e48\u4ee3\u7801\u5982\u4e0b$,$\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(n^3)$\n\n```\n#include<bits/stdc++.h>\n#define LL long long\n#define SIZE 205\n#define MAX 1LL<<60\n#define gc getchar()\nusing namespace std;\nbool ans[SIZE], flag = false;\nLL n, m, dis[SIZE][SIZE], cnt[SIZE][SIZE];\ninline void up(LL &x, LL y){x = min(x, y);}\ninline void read(LL &x)\n{\n\tchar ch; LL f = 1; x = 0;\n\tfor(ch = gc; !isdigit(ch); ch = gc)\n\t\tif(ch == '-') f = -1;\n\tfor(; isdigit(ch); ch = gc)\n\t\tx = (x << 1) + (x << 3) + ch - '0';\n\tif(f == -1) x = x * (-1);\n}\nint main()\n{\n\tLL i, u, v, w, j, k;\n\tread(n); read(m);\n\tfor(i = 1; i <= n; i++)\n\t\tfor(j = 1; j <= n; j++)\n\t\t\tif(i == j) dis[i][j] = 0;\n\t\t\telse dis[i][j] = MAX;\n\tfor(i = 1; i <= m; i++)\n\t{\n\t\tread(u); read(v); read(w);\n\t\tdis[u][v] = min(dis[u][v], w);\n\t\tdis[v][u] = min(dis[v][u], w);\n\t\tcnt[u][v] = cnt[v][u] = 1;\n\t}\n\tfor(k = 1; k <= n; k++)\n\t{\n\t\tfor(i = 1; i <= n; i++)\n\t\t{\n\t\t\tfor(j = 1; j <= n; j++)\t\n\t\t\t{\n\t\t\t\tif(dis[i][k] + dis[k][j] == dis[i][j])\n\t\t\t\t\tcnt[i][j] = cnt[i][j] + cnt[i][k] * cnt[k][j];\n\t\t\t\tif(dis[i][k] + dis[k][j] < dis[i][j])\n\t\t\t\t{\n\t\t\t\t\tdis[i][j] = dis[i][k] + dis[k][j];\n\t\t\t\t\tcnt[i][j] = cnt[i][k] * cnt[k][j];\n \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(i = 1; i <= n; i++)\n\t{\n\t\tfor(j = 1; j <= n; j++)\n\t\t{\n\t\t\tif(cnt[i][j] == 0) continue;\n\t\t\tif(cnt[i][j] >= 2) continue;\n\t\t\tfor(k = 1; k <= n; k++)\n\t\t\t{\n\t\t\t\tif(i == k || j == k) continue;\n\t\t\t\tif(dis[i][j] == dis[i][k] + dis[k][j])\n\t\t\t\t\t{ans[k] = true; flag = true;}\n\t\t\t}\n\t\t}\n\t}\n\tif(flag == false) puts(\"No important cities.\");\n\tfor(i = 1; i <= n; i++) \n\t\tif(ans[i]) printf(\"%lld \", i);\n\treturn 0;\t\n}\n\n```",
        "postTime": 1573780622,
        "uid": 27187,
        "name": "\u5357\u65b9\u5c0f\u5305",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "# P1841 [JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\n[\u539f\u9898\u5730\u5740](https://www.luogu.org/problemnew/show/P1841)\n[GitHub\u9898\u89e3](https://github.com/jerrykcode/luogu)\n\n## \u601d\u8def\n\n\u5bf9\u9876\u70b9src\uff0c\u4ee5\u5176\u4e3a\u6e90\u8fdb\u884cdijkstra\uff0c\u5bf9\u4e8e\u9664src\u5916\u7684\u4efb\u610f\u9876\u70b9v\uff0c\u53ef\u4ee5\u5f97\u5230src\u5230v\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u4ee5\u53casrc\u5230v\u7684\u6700\u77ed\u8def\u5f84\u4e0av\u7684\u524d\u9a71\u9876\u70b9(\u5373\u6700\u77ed\u8def\u5f84\u4e0av\u7684\u524d\u4e00\u4e2a\u9876\u70b9)\uff0c\u4e5f\u53ef\u4ee5\u77e5\u9053\u524d\u9a71\u662f\u5426\u552f\u4e00\u3002\u82e5\u524d\u9a71\u552f\u4e00\uff0c\u5219\u8868\u793a\u7ecf\u8fc7\u524d\u9a71\u5230\u8fbev\u662fsrc\u5230v\u7684\u552f\u4e00\u6700\u77ed\u8def\u5f84\uff0c\u90a3\u4e48\u53ea\u8981\u5220\u9664\u524d\u9a71\u9876\u70b9\uff0csrc\u5230v\u7684\u6700\u77ed\u8ddd\u79bb\u4e00\u5b9a\u4f1a\u53d8\u5927(\u751a\u81f3src\u65e0\u6cd5\u5230\u8fbev)\uff0c\u4e5f\u5c31\u662f\u8bf4v\u7684\u552f\u4e00\u524d\u9a71\u662f\u91cd\u8981\u57ce\u5e02\u3002\u82e5src\u5230\u8fbev\u7684\u6700\u77ed\u8def\u5f84\u4e0av\u7684\u524d\u9a71(\u4e0a\u4e00\u4e2a\u9876\u70b9)\u4e0d\u552f\u4e00\uff0c\u6240\u4ee5\u5220\u9664v\u7684\u53ef\u80fd\u7684\u524d\u9a71\u4e2d\u7684\u4e00\u4e2a\uff0cv\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u524d\u9a71\u5230\u8fbe\uff0c\u6240\u4ee5\u8fd9\u4e9b\u524d\u9a71\u4e0d\u4e00\u5b9a\u662f\u91cd\u8981\u57ce\u5e02\u3002\n\n\u904d\u5386\u9664src\u5916\u7684\u6240\u6709\u9876\u70b9\uff0c\u82e5\u5176\u524d\u9a71\u552f\u4e00(\u4e14\u4e0d\u662fsrc)\uff0c\u90a3\u4e48\u8be5\u524d\u9a71\u662f\u91cd\u8981\u57ce\u5e02\u3002\n\n\u6ce8\u610f\u82e5v\u7684\u552f\u4e00\u524d\u9a71\u662fsrc\uff0c\u82e5\u5220\u9664\u552f\u4e00\u524d\u9a71src\uff0csrc\u5df2\u4e0d\u5b58\u5728\uff0c\u90a3\u4e48src\u5230v\u7684\u6700\u77ed\u8ddd\u79bb\u5df2\u65e0\u610f\u4e49\uff0c\u6240\u4ee5src\u4e0d\u80fd\u88ab\u5224\u65ad\u4e3a\u91cd\u8981\u57ce\u5e02\u3002\n\n\u4ee5\u6bcf\u4e00\u4e2a\u9876\u70b9\u5206\u522b\u4f5c\u4e3asrc\u8fdb\u884cdijkstra\uff0c\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u7684\u91cd\u8981\u57ce\u5e02\u3002\n\n\u5bf9\u4e8edijkstra\u4e2d\u5224\u65ad\u524d\u9a71\u662f\u5426\u552f\u4e00\uff0c\u5e76\u8bb0\u5f55\u552f\u4e00\u524d\u9a71\uff1a\n\n* \u4ece\u4f18\u5148\u961f\u5217\u4e2d\u5f39\u51fa\u7684\u9876\u70b9\u8bbe\u4e3atop_v\uff0c\u5f53\u524d\u5b83\u4e0esrc\u7684\u8ddd\u79bb\u662f\u6700\u5c0f\u7684\n\n* top_v\u7684\u90bb\u63a5\u70b9\u8bbe\u4e3aadj_v\n\n* \u82e5src\u5230top_v\u7684\u8ddd\u79bb\u52a0\u4e0atop_v\u5230adj_v\u7684\u8ddd\u79bb`\u5c0f\u4e8e`\u4e4b\u524dsrc\u5230adj_v\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5219\uff1a\n\n\t* \u7ecf\u8fc7top_v\u5230\u8fbeadj_v\u4e3a\u76ee\u524dsrc\u5230\u8fbeadj_v\u7684\u552f\u4e00\u6700\u77ed\u8def\u5f84\uff0c\u66f4\u65b0top_v\u4e3aadj_v\u7684\u552f\u4e00\u524d\u9a71\n\n* \u82e5src\u5230top_v\u7684\u8ddd\u79bb\u52a0\u4e0atop_v\u5230adj_v\u7684\u8ddd\u79bb`\u7b49\u4e8e`\u4e4b\u524dsrc\u5230adj_v\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5219\uff1a\n\n\t* adj_v\u53ef\u4ee5\u7ecf\u8fc7top_v\u5230\u8fbe\uff0c\u4f46\u4e5f\u53ef\u4ee5\u8d70\u4e4b\u524d\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6b64\u65f6adj_v\u6709\u591a\u4e2a\u524d\u9a71(\u4e0d\u9700\u8981\u8bb0\u5f55\u524d\u9a71\uff0c\u53ea\u8981\u8bb0\u5f55adj_v\u6709\u591a\u4e2a\u524d\u9a71\u5373\u53ef)\n\n\n## \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <vector>\n#include <queue>\nusing namespace std;\n\ntypedef unsigned char vertex_t; //\u9876\u70b9\u7c7b\u578b(\u8f93\u5165\u9876\u70b9\u7f16\u53f7\u6700\u5927200)\ntypedef unsigned short weight_t; //\u8fb9\u6743\u91cd\u7c7b\u578b(\u8f93\u5165\u8fb9\u6743\u6700\u592710000)\ntypedef unsigned int dist_t; //\u8ddd\u79bb\u7c7b\u578b(\u8f93\u5165\u8fb9\u6743\u6700\u592710000, \u4f46\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u53ef\u80fd\u8d85\u51fa65535)\n\n//\u7c7b\u578b\u53ef\u4ee5\u5b58\u50a8\u7684\u6700\u5927\u503c\n#define VERTEX_T_INF 0xff\n#define DIST_T_INF 0xffffffff\n\n//\u90bb\u63a5\u70b9\u7ed3\u6784\u4f53\nstruct AdjNode {\n\tvertex_t adj_v; //\u90bb\u63a5\u9876\u70b9\n\tweight_t adj_weight; //\u90bb\u63a5\u8fb9\u6743\u91cd\n\tAdjNode(vertex_t adj_v, weight_t adj_weight) : adj_v(adj_v), adj_weight(adj_weight) {}\n};\n\n//\u91cd\u8981\u57ce\u5e02\u7c7b\nclass ImportantCities {\npublic:\n\t/* \u6807\u8bb0\u51fa\u91cd\u8981\u57ce\u5e02 \n\t @param graph \u56fe\n\t @param n \u56fe\u9876\u70b9\u6570\u91cf\n\t @param is_important_city \u6570\u7ec4(\u4f20\u51fa)\uff0c\u6807\u8bb0\u9876\u70b9\u662f\u5426\u4e3a\u91cd\u8981\u57ce\u5e02\n\t @retrun void\n\t */\n\tvoid importantCities(vector<AdjNode> * graph, size_t n, bool * is_important_city);\nprivate:\n\t//dijkstra\u4e2d\u4f18\u5148\u961f\u5217\u4f7f\u7528\u7684\u7ed3\u6784\u4f53\n\tstruct PriorityNode {\n\t\tvertex_t v;\n\t\tdist_t dist;\n\t\tPriorityNode(vertex_t v, dist_t dist) : v(v), dist(dist) {}\n\n\t\t//\u4f18\u5148\u961f\u5217\u7528\u4e8e\u6bd4\u8f83\u7684\u7ed3\u6784\u4f53\n\t\tstruct cmp {\n\t\t\tbool operator() (PriorityNode& a, PriorityNode& b) {\n\t\t\t\treturn a.dist > b.dist;\n\t\t\t}\n\t\t};\n\t};\nprivate:\n\t//\u6210\u5458\u53d8\u91cf\n\tdist_t * dist_; //\u6700\u77ed\u8ddd\u79bb\n\tvertex_t * pre_; //\u524d\u9a71\u9876\u70b9\n\tbool * collected_; //\u6807\u8bb0\u9876\u70b9\u662f\u5426\u6536\u5f55\n\tpriority_queue<PriorityNode, vector<PriorityNode>, PriorityNode::cmp> pq_; //\u4f18\u5148\u961f\u5217\nprivate:\n\tstatic const vertex_t multi_previous = VERTEX_T_INF; //\u8868\u793a\u6709\u591a\u4e2a\u524d\u9a71\n};\n\nvoid ImportantCities::importantCities(vector<AdjNode>* graph, size_t n, bool * is_important_city) {\n\tfill(is_important_city, is_important_city + n, false); //\u521d\u59cb\u5316\n\tdist_ = new dist_t[n];\n\tpre_ = new vertex_t[n];\n\tcollected_ = new bool[n];\n\tvertex_t src;\t\n\tfor (size_t i = 0; i < n; i++) { //\u904d\u5386\u9876\u70b9\n\t\tsrc = (vertex_t)i; //\u4ee5\u9876\u70b9 i \u4f5c\u4e3a\u6e90\u8fdb\u884cdijkstra\n\t\tfill(dist_, dist_ + n, DIST_T_INF); //\u521d\u59cb\u5316\n\t\tfill(collected_, collected_ + n, false); //\u521d\u59cb\u5316\n\t\tdist_[src] = 0;\n\t\tpq_.push(PriorityNode(src, 0));\n\t\tvertex_t top_v, adj_v;\n\t\tdist_t tmp_dist;\n\t\twhile (!pq_.empty()) {\n\t\t\ttop_v = pq_.top().v; //top_v\u51fa\u961f\u5217\uff0c\u662f\u5f53\u524d\u4e0esrc\u7684\u6700\u77ed\u8ddd\u79bb\u4e2d\u6700\u5c0f\u7684\n\t\t\tpq_.pop();\n\t\t\tif (collected_[top_v]) continue;\n\t\t\tcollected_[top_v] = true;\n\t\t\tfor (auto it = graph[top_v].begin(); it != graph[top_v].end(); it++) { //\u904d\u5386\u90bb\u63a5\u70b9\n\t\t\t\tadj_v = it->adj_v; //\u90bb\u63a5\u9876\u70b9\n\t\t\t\tif (!collected_[adj_v]) {\n\t\t\t\t\ttmp_dist = dist_[top_v] + (dist_t)it->adj_weight; //\u7ecf\u8fc7top_v\u5230\u8fbeadj_v\u7684\u8ddd\u79bb\n\t\t\t\t\tif (tmp_dist < dist_[adj_v]) { //\u82e5\u7ecf\u8fc7top_v\u5230\u8fbeadj_v\u53ef\u4ee5\u51cf\u5c0f\u8ddd\u79bb\n\t\t\t\t\t\tdist_[adj_v] = tmp_dist; //\u66f4\u65b0\n\t\t\t\t\t\tpre_[adj_v] = top_v; //\u66f4\u65b0top_v\u4e3aadj_v\u7684\u524d\u9a71\uff0c\u6b64\u65f6src\u7ecf\u8fc7top_v\u5230\u8fbeadj_v\u662fsrc\u5230adj_v\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6240\u4ee5top_v\u662fadj_v\u7684\u552f\u4e00\u7684\u524d\u9a71\n\t\t\t\t\t\tpq_.push(PriorityNode(adj_v, tmp_dist));\n\t\t\t\t\t}\n\t\t\t\t\telse if (tmp_dist == dist_[adj_v]) { //\u82e5\u7ecf\u8fc7top_v\u5230\u8fbeadj_v\u4e0e\u4e4b\u524d\u5230\u8fbeadj_v\u7684\u6700\u77ed\u8ddd\u79bb\u76f8\u540c\n\t\t\t\t\t\t//\u6b64\u65f6\u4ecesrc\u5230\u8fbeadj_v\u7684\u6700\u77ed\u8def\u5f84\u6709\u591a\u6761\uff0c\u53ef\u4ee5\u7ecf\u8fc7top_v\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u6b64\u65f6adj_v\u7684\u524d\u9a71\u4e0d\u552f\u4e00\uff0c\u6545\u8bb0\u5f55pre_[adj_v]\u4e3amulti_previous\n\t\t\t\t\t\tpre_[adj_v] = multi_previous; //multi_previous\u8868\u793aadj_v\u7684\u524d\u9a71\u6709\u591a\u4e2a\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //for\n\t\t} //while (dijkstra)\n\t\tfor (size_t j = 0; j < n; j++)\n\t\t\tif (j != i && pre_[j] != multi_previous && pre_[j] != src) {\n\t\t\t\t//\u82e5j\u7684\u524d\u9a71\u552f\u4e00\uff0c\u5219\u82e5\u628a\u5b83\u7684\u552f\u4e00\u524d\u9a71\u9876\u70b9\u5220\u9664\uff0csrc\u5230j\u7684\u6700\u77ed\u8ddd\u79bb\u4e00\u5b9a\u4f1a\u53d8\u5927\uff0c\u6545\u5b83\u7684\u552f\u4e00\u524d\u9a71\u4e3a\u91cd\u8981\u57ce\u5e02\n\t\t\t\t//\u6ce8\u610fj\u7684\u552f\u4e00\u524d\u9a71\u4e3asrc\u7684\u60c5\u51b5\u4e0b\uff0csrc\u4e0d\u7b97\u91cd\u8981\u57ce\u5e02\uff0c\u56e0\u4e3a\u82e5\u5220\u9664src\uff0csrc\u5230j\u7684\u6700\u77ed\u8ddd\u79bb\u5df2\u65e0\u610f\u4e49\n\t\t\t\tis_important_city[pre_[j]] = true; //\u6807\u8bb0j\u4e3a\u91cd\u8981\u57ce\u5e02\n\t\t\t}\n\t} //for\n\t//\u91ca\u653e\u5185\u5b58\n\tfree(dist_);\n\tfree(pre_);\n\tfree(collected_);\n}\n\nint main() {\n\tint n, m;\n\tscanf(\"%d %d\", &n, &m);\n\tvector<AdjNode> * graph = new vector<AdjNode>[n];\n\tint v, w, c;\n\t//\u63d2\u5165\u8fb9\n\tfor (size_t i = 0; i < m; i++) {\n\t\tscanf(\"%d %d %d\", &v, &w, &c);\n\t\tv--; w--; //\u9876\u70b9\u6539\u4e3a\u4ece0\u7f16\u53f7\n\t\tgraph[v].push_back(AdjNode((vertex_t)w, (weight_t)c));\n\t\tgraph[w].push_back(AdjNode((vertex_t)v, (weight_t)c));\n\t}\n\tImportantCities important_cities;\n\tbool * is_important_city = new bool[n];\n\timportant_cities.importantCities(graph, n, is_important_city);\n\tbool flag = true;\n\tfor (size_t i = 0; i < n; i++) \n\t\tif (is_important_city[i]) { //\u82e5\u662f\u91cd\u8981\u57ce\u5e02\n\t\t\tflag = false;\n\t\t\tprintf(\"%d \", i + 1);\n\t\t}\t\n\tif (flag) printf(\"No important cities.\");\n\tfor (size_t i = 0; i < n; i++)\n\t\tvector<AdjNode>().swap(graph[i]);\n\tfree(is_important_city);\n\treturn 0;\n}\n```\n",
        "postTime": 1560658119,
        "uid": 194439,
        "name": "rediserver",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "\u9898\u610f:   \n\u6c42\u51fa\u6240\u6709\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u7684\u70b9:  \n\u8bbedis(i,j)\u4e3a\u539f\u56fe\u4e2di,j\u7684\u6700\u77ed\u8def\u957f\u5ea6  \n\u5220\u9664\u8fd9\u4e2a\u70b9\u548c\u4e0e\u8fd9\u4e2a\u70b9\u8fde\u63a5\u7684\u8fb9\u540e,\u5b58\u5728\u70b9\u5bf9(s,t)\u5b9e\u9645\u6700\u77ed\u8defs->t\u7684\u957f\u5ea6\u53d8\u957f(\u4e0d\u8054\u901a\u8bb0\u4e5f\u884c).  \n\n\u9898\u76ee\u76f8\u5173: \u6700\u77ed\u8def\u5f84\u6811(\u8bf4\u662f\u4e2a\u6811,\u5176\u5b9e\u662f\u4e2aDAG,\u6709\u8d1f\u6743/0\u6743\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e0d\u662fDAG,\u90a3\u4e2a\u65f6\u5019\u6700\u77ed\u8def\u5f84\u6811\u4e5f\u6ca1\u4ec0\u4e48\u610f\u4e49,\u6216\u8005\u8bf4\u4e0d\u5b58\u5728).\n\n# \u5148\u4e0a\u4ee3\u7801\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nint read(){\n\tint x=0;char ch;\n\tdo{ch=getchar();}while(ch>'9'||ch<'0');\n\tdo{x=x*10+ch-'0';ch=getchar();}while(ch>='0'&&ch<='9');\n\treturn x;\n}\nconst int N=500;\nconst int M=N*N*2;\nconst int INF=0x3f3f3f3f;\nint n,m,a,b,c,tag[N];\nstruct E{ int v,w;E(){} E(int a,int b){ v=a;w=b; } };\nint dis[N],inq[N],cnt[N],from[N];\nvector<E> g[N];\n\n\n// \u8003\u8651\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u6839\u7684\u6700\u77ed\u8def\u5f84\u6811.\u8fd9\u91cc\u4f7f\u7528SPFA\u6c42\u51fa.  \n// \u590d\u6742\u5ea6\u4e0d\u592a\u5bf9,\u63a5\u8fd1\u4e8e\u5b8c\u5168\u56fe,O(NM)=O(N^3),\u5efa\u8bae\u4f7f\u7528\u6ca1\u6709\u5806\u4f18\u5316\u7684dijkstra\u7b97\u6cd5\u6765\u505a,\u4f46\u662f\u6211\u5f88\u61d2,\u90a3\u4e2a\u5e74\u4ee3\u7684\u5927\u591a\u6570\u51fa\u9898\u4eba\u8fd8\u6ca1\u6709\u5361spfa\u7684\u610f\u8bc6\nvoid solve(int s){\n\tfor(int i=1;i<=n;i++){\n\t\tfrom[i]=0;\n\t\tdis[i]=INF;\n\t\tinq[i]=0;\n\t\tcnt[i]=0;\n      // \u8fd9\u4e2acnt\u662f\u5173\u952e,\u8868\u793a\u6700\u77ed\u8def\u5f84\u6811(\u518d\u6b21\u5f3a\u8c03\u5176\u5b9e\u662f\u4e2aDAG\u4e0d\u4e00\u5b9a\u662f\u6811)\u4e0a,dis[v]=dis[u]+w\u7684\u70b9\u7684\u4e2a\u6570,emm\u5c31\u662f\u4e0a\u4e00\u5c42\u8fde\u5411v\u7684\u70b9\u7684\u4e2a\u6570.\n\t}\n\tqueue<int> q;\n\tdis[s]=0;inq[s]=1;q.push(s);cnt[s]=1;\n//\tprintf(\"Source %d\\n\",s);\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();inq[u]=0;\n\t\tfor(int i=0;i<g[u].size();i++){\n\t\t\tint v=g[u][i].v,w=g[u][i].w;\n\t\t\tif(v==from[u]) continue;\n        // relax,\u6254\u6389\u539f\u6765\u7684\u6700\u77ed\u8def\u5f84\u6811.\n\t\t\tif(dis[v]>dis[u]+w){\n\t\t\t\tcnt[v]=1;from[v]=u;\n\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\t//printf(\"\\trelax(%d->%d) d=%d w=%d\\n\",u,v,dis[v],w);\n\t\t\t\tif(!inq[v]){ inq[v]=1; q.push(v); }\n\t\t\t}else if(dis[v]==dis[u]+w){\n        // \u4e00\u6837\u957f,\u90a3\u4e48\u8fd9\u6761\u8fb9\u52a0\u5230\u6700\u77ed\u8def\u5f84\u6811\u91cc\u9762,v\u7684\u4e0a\u4e00\u5c42\u8fde\u5411\u5b83\u7684\u8282\u70b9\u6570\u91cf\u589e\u52a01\u4e2a.\n\t\t\t\t//printf(\"\\t adding (%d->%d) d=%d w=%d\\n\",u,v,dis[v],w);\n\t\t\t\tcnt[v]++; from[v]=u;\n\t\t\t}\n\t\t}\n\t}\n\t//for(int i=1;i<=n;i++)\n//\t\tprintf(\"\\tdis[%d]=%d,facnt=%d\\n\",i,dis[i],cnt[i]);\n\tfor(int i=1;i<=n;i++){\n\t\tif(i==s) continue;\n\t\tif(cnt[i]==1&&from[i]!=s){ tag[from[i]]=1; }\n\t}\n}\n\nint main(){\n\tn=read();m=read();\n\tfor(int i=0;i<m;i++){\n\t\ta=read();b=read();c=read();\n\t\tg[a].push_back(E(b,c));\n\t\tg[b].push_back(E(a,c));\n\t}\n\tfor(int i=1;i<=n;i++) solve(i);\n\tint cnt=0;\n\tfor(int i=1;i<=n;i++)\n\t\tif(tag[i]){ printf(\"%d \",i); cnt++; }\n\tif(cnt==0) printf(\"No important cities.\");\n\tputs(\"\");\n\treturn 0;\n}\n\n```  \n\n\n\u601d\u8def:\u8003\u8651\u679a\u4e3es,\u6c42\u6700\u77ed\u8def\u5f84\u6811,\u5982\u679c\u67d0\u70b9\u7684\u7236\u4eb2\u53ea\u6709\u4e00\u4e2a(emm..\u53ef\u80fd\u8bf4\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u8fde\u5411u\u7684\u70b9\u6570\u91cf\u662f1)\u90a3\u4e48u\u7684\u7236\u4eb2\u662f\u5173\u952e\u70b9.\n\n\u6b63\u786e\u6027...\u4e0d\u4f1a\u8bc1\u660e\u4f46\u662f\u53ef\u4ee5\u611f\u6027\u7406\u89e3,\u5bf9\u4e8e\u6ee1\u8db3\u4e0a\u9762\u6761\u4ef6\u7684\u8282\u70b9u.\u5220\u6389\u5b83\u7684\u7236\u4eb2,\u8fd9\u4e2a\u70b9\u4f1a\u4ece\u6700\u77ed\u8def\u5f84\u6811\u4e0a\u8131\u79bb\u5f00,\u663e\u7136s->u\u7684\u6700\u77ed\u8def\u53d8\u957f\u4e86.\n",
        "postTime": 1543633397,
        "uid": 15295,
        "name": "hehelego",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02\u3011"
    },
    {
        "content": "\u53d1\u4e00\u4e2aFloyd\u7684\u9898\u89e3\n\n\u6839\u636e\u9898\u610f\uff0c\u4e00\u4e2a\u57ce\u5e02\u662f\u91cd\u8981\u57ce\u5e02\u7684\u6761\u4ef6\u662f\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u6700\u77ed\u8def\u7684\u5fc5\u7ecf\u70b9\uff0c\u5373\u901a\u8fc7\u70b9s\u53ef\u4f7fd{a,b}\u66f4\u5c0f\uff0c\u7531\u6b64\u53ef\u4ee5\u60f3\u5230spfa\u548cFloyd\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n\u5373dist[a][b]=min{ dist[a][s]+dist[s][b] }    \u6b64\u65f6\u53ef\u4ee4pre[a][b]=s\n\n\u4f46\u82e5dist[a][s1]+dist[s1][b]==dist[a][s2]+dist[s2][b] ,\u5219\u6b64\u65f6s1,s2\u5747\u4e0d\u662f\u91cd\u8981\u57ce\u5e02\uff0c\u5c31\u9700\u5bf9a,b\u8fdb\u884c\u6807\u8bb0\uff0c\u6211\u4f7f\u7528vis[i][j]\u8868\u793ai\u5230j\u7684\u6700\u77ed\u8def\u5bf9\u5e94\u7684\u91cd\u8981\u57ce\u5e02\u4e0d\u91cd\u8981\u3002\n\n\u53ef\u80fd\u6709\u4eba\u4f1a\u8d28\u7591\uff0c\u82e5i\u5230j\u7684\u6700\u77ed\u8def\u4e0a\u4e0d\u53ea\u6709s1\u548cs2\uff0c\u90a3\u5176\u4ed6\u70b9\u4e5f\u6709\u53ef\u80fd\u662f\u91cd\u8981\u57ce\u5e02\uff0c\u90a3\u4e48\u6b64\u65f6\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u5b58\u5728\u4e8e\u5176\u4ed6\u4e24\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u4e0a\uff0c\u4f9d\u7136\u53ef\u4ee5\u88ab\u8bb0\u5f55\uff0c\u6240\u4ee5\u8bc1\u660e\u6b64\u7b97\u6cd5\u7684\u6b63\u786e\u6027\n\n\u5751\uff1a\u8f93\u51fa\u7b54\u6848\u65f6\u5e94\u6392\u5e8f\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\nconst int maxx=205,inf=0x3f3f3f3f;\nint n,m,pre[maxx][maxx];\nint mp[maxx][maxx];\nbool vis[maxx][maxx];                 //\u5404\u6570\u7ec4\u7528\u9014\u5df2\u8bf4\u660e\nvoid getint(int &x){\n    x=0; char c=' ';\n    while(c<'0' || c>'9') c=getchar();\n    while(c<='9' && c>='0'){ x=x*10+c-'0'; c=getchar();} \n}\nint main()\n{\n    int x,y,z;\n    getint(n); getint(m);\n    memset(pre,0,sizeof(pre)); memset(vis,0,sizeof(vis));\n    memset(mp,0x3f,sizeof(mp));\n    for(int i=1;i<=n;++i) mp[i][i]=0;\n    for(int i=1;i<=m;++i){\n        getint(x); getint(y); getint(z);\n        mp[x][y]=mp[y][x]=z;\n    }\n\n    for(int k=1;k<=n;++k){                                //Floyd\n        for(int i=1;i<=n;++i) if(k!=i){\n            for(int j=1;j<=n;++j) if(k!=j && i!=j){\n                if(mp[i][j]>mp[i][k]+mp[k][j]){\n                    mp[i][j]=mp[i][k]+mp[k][j];\n                    vis[i][j]=false;\n                    pre[i][j]=k;\n                }else if(mp[i][j]==mp[i][k]+mp[k][j]) vis[i][j]=true;\n            } \n        }\n    }\n\n    int q[maxx],top=0;          //\u7528\u6765\u88c5\u7b54\u6848\n    bool inq[maxx];                 //\u4e00\u4e2a\u70b9\u53ef\u80fd\u662f\u591a\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u4e0a\u7684\u91cd\u8981\u57ce\u5e02\n    memset(inq,0,sizeof(inq));     // \u6545\u5e94\u907f\u514d\u91cd\u590d\u8f93\u51fa\n    for(int i=1;i<=n;++i){                    //\u5bfb\u627e\u7b54\u6848\n        for(int j=1;j<=n;++j){\n            if(i!=j && !vis[i][j] && pre[i][j] && !inq[pre[i][j]]){\n                q[++top]=pre[i][j]; inq[q[top]]=true;\n            }\n        }\n    }\n    sort(q+1,q+top+1);        //\u5751\n    for(int i=1;i<=top;++i) printf(\"%d \",q[i]);\n    if(!top) printf(\"No important cities.\");\n    printf(\"\\n\");\n    return 0;\n}\n```",
        "postTime": 1503394125,
        "uid": 31925,
        "name": "Holmes",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02(x)\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u4e2a\u9898\uff0c\u7b80\u5355\u7684\u7528Ford\uff0c\u7136\u540e\u679a\u4e3e1~n\uff0c\u628a\u57ce\u5e02\u70b8\u6389\u3002\u3002\u3002\u3002\u3002\n\n\u7279\u522b\u63d0\u793a\uff1a\u6ce8\u610fmemset\u548cfor\u7684\u8fd0\u7528\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u5c3d\u91cf\u7528for\u3002\u3002\u3002\u3002\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include <algorithm>\nusing namespace std;\nint main()\n{\n    int n,m,x,y,z,a[201][201],c[201][201]={0};\n    bool b[201][201],ans[201]={0};\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n     for(int j=1;j<=n;j++)\n     if(i!=j)\n     a[i][j]=0x7ffffff;\n    for(int i=1;i<=m;i++)\n    {\n        cin>>x>>y>>z;\n        a[x][y]=z;\n        a[y][x]=z;\n    }\n    memset(b,0,sizeof(b));\n    for(int k=1;k<=n;++k)\n    {\n        for(int i=1;i<=n;++i) if(k!=i)\n        {\n            for(int j=1;j<=n;++j) if(k!=j && i!=j)\n            {\n                if(a[i][j]>a[i][k]+a[k][j])\n                {\n                    a[i][j]=a[i][k]+a[k][j];\n                    b[i][j]=0;\n                    c[i][j]=k;\n                }else if(a[i][j]==a[i][k]+a[k][j]) b[i][j]=1;\n            } \n        }\n    }\n    memset(ans,0,sizeof(ans));\n    int q[201]={0};\n    int tot=0;\n    for(int i=1;i<=n;i++)\n        {\n            for(int j=1;j<=n;j++)\n            {\n                if(i!=j && b[i][j]==0 && c[i][j]>0 && ans[c[i][j]]==0)\n                {\n                    ans[c[i][j]]=1;\n                    q[++tot]=c[i][j];\n                }\n            }\n        }\n    sort(q+1,q+tot+1);\n    for(int i=1;i<=tot;++i) cout<<q[i]<<\" \";\n    if(tot==0) cout<<\"No important cities.\";\n    return 0;\n}\n```",
        "postTime": 1505012470,
        "uid": 52892,
        "name": "zzzyc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1841 \u3010[JSOI2007]\u91cd\u8981\u7684\u57ce\u5e02(x)\u3011"
    }
]