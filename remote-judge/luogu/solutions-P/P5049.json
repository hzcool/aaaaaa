[
    {
        "content": "## \u9898\u610f\n\n\u9898\u610f\u5f88\u7b80\u5355\uff0c\u5373\u5728\u4e00\u5f20\u56fe\u4e0a\u4e00\u8fb9\u8dd1\u4e00\u8fb9\u8bb0\u5f55\u5f53\u524d\u6240\u5728\u8282\u70b9\u7684\u5927\u5c0f\uff0c\u4e0d\u80fd\u8d70\u5df2\u7ecf\u7ecf\u8fc7\u7684\u70b9\uff0c\u4f46\u662f\u53ef\u4ee5\u56de\u6eaf\uff0c\u6700\u540e\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u7f16\u53f7\u5e8f\u5217\u3002\n\n## \u5206\u6790\n\n- ### $m = n - 1$\n\n\u8fd9\u79cd\u60c5\u51b5\u4e0d\u7528\u591a\u8bf4\uff0c\u76f4\u63a5\u8dd1\u4e00\u904d$DFS$\u5c31\u884c\u5566\uff01\n\n- ### $m = n$\n\n\u5927\u5bb6\u5e94\u8be5\u5f88\u6e05\u695a\u8fd9\u4e2a\u60c5\u51b5\u4f1a\u4f7f\u56fe\u4e2d\u51fa\u73b0\u4e00\u4e2a\u73af\u3002\n\n\u90a3\u8981\u600e\u4e48\u89e3\u51b3\u5462\uff1f\u60f3\u60f3\u662f\u4e0d\u662f\u4f60\u5728\u8fd9\u4e2a\u73af\u4e0a\u8dd1\u5230\u4e00\u534a\uff0c\u53e6\u4e00\u534a\u901a\u8fc7\u56de\u6eaf\u5230\u4f60\u521a\u5230\u8fd9\u4e2a\u73af\u7684\u8d77\u70b9\uff0c\u518d\u63a5\u7740$DFS$\u5c31\u884c\u4e86\u3002\n\n![\u6837\u4f8b](https://cdn.luogu.com.cn/upload/pic/71799.png)\n\n\u4e3e\u4e2a\u6837\u4f8b$2$\u7684\u4f8b\u5b50\uff1a\n\n\u5f88\u660e\u663e$2 - 3 - 4 - 5$\u662f\u56fe\u4e0a\u7684\u73af\u3002\n\n\u6700\u5f00\u59cb\u4ece$1$\u8282\u70b9\u51fa\u53d1\uff0c\u90a3\u4e48$3$\u5c31\u662f\u6211\u4eec\u7b2c\u4e00\u6b21\u5230\u8fd9\u4e2a\u73af\u7684\u8d77\u70b9\u3002\n\n\u63a5\u7740\u6211\u4eec\u5411$2$\u8d70\uff0c\u4e4b\u540e\u4fbf\u56de\u6eaf\u5230\u8d77\u70b9$3$\uff0c$3$\u518d\u5411$4$\u8d70\uff0c\u6700\u540e\u8dd1\u5b8c\u6574\u5f20\u56fe\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a\u63a5\u4e0b\u6765\u5c31\u6ca1\u6709\u73af\u9700\u8981\u6211\u4eec\u7279\u6b8a\u5904\u7406\u4e86\u3002\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u5e94\u8be5\u5f88\u597d\u7406\u89e3\uff0c\u73b0\u5728\u6211\u4eec\u77e5\u9053$m = n$\u60c5\u51b5\u4e0b\u53ea\u9700\u8981\u5904\u7406\u5728\u73af\u4e0a\u7684\u70b9\uff0c\u5176\u4ed6\u7684\u70b9\u8fd8\u662f\u50cf$m = n - 1$\u4e00\u6837$DFS$\u5c31\u597d\u4e86\uff0c\u540c\u65f6\u5982\u679c\u5728\u73af\u4e0a\u56de\u6eaf\u4e4b\u540e\uff08\u5982\u4e0a\u56fe$2$\u56de\u6eaf\u5230$3$\uff09\uff0c\u5269\u4e0b\u7684\u8fc7\u7a0b\u4e5f\u4e0d\u9700\u8981\u7279\u6b8a\u5904\u7406\u4e86\u3002\n\n\u90a3\u4e48\u73b0\u5728\u7684\u5173\u952e\u5c31\u662f\u89e3\u51b3\u5728\u73af\u4e0a\u7684\u7279\u6b8a\u5904\u7406\u3002\n\n\u6211\u4eec\u628a\u5728\u73af\u4e0a\u7684\u70b9\u5206\u6210\u4e09\u79cd\u60c5\u51b5\uff1a\n\n#### \u4e00\u3001\u5176\u51fa\u8fb9\u4e3a\u73af\u4e0a\u7684\u90a3\u4e2a\u70b9\u7f16\u53f7\u662f\u5176\u6240\u6709\u672a\u88ab\u8bbf\u95ee\u7684\u51fa\u8fb9\u4e2d\u6700\u5c0f\u7684\uff0c\u5982\u4e0b\u56fe\u3002\n\n\u4ece$1$\u51fa\u53d1\u7ecf\u8fc7$2$\u5230\u8fbe$3$\uff0c\u6b64\u65f6\u4ece$3$\u51fa\u53d1\u80fd\u8bbf\u95ee\u7684\u51fa\u8fb9\u6709$4, 6, 7$\uff0c\u5176\u4e2d$4$\u662f\u73af\u4e0a\u7684\u70b9\uff0c\u540c\u65f6\u4e5f\u662f\u6700\u5c0f\u3002\n\n![\u56fe1](https://cdn.luogu.com.cn/upload/pic/71801.png)\n\n\n\n------------\n\n\n#### \u4e8c\u3001\u5176\u51fa\u8fb9\u4e3a\u73af\u4e0a\u7684\u90a3\u4e2a\u70b9\u7f16\u53f7\u662f\u5176\u6240\u6709\u672a\u88ab\u8bbf\u95ee\u7684\u51fa\u8fb9\u4e2d\u4e0d\u662f\u6700\u5927\u4e5f\u4e0d\u662f\u6700\u5c0f\u7684\uff0c\u5982\u4e0b\u56fe\u3002\n\n\u6b64\u65f6$6$\u662f\u73af\u4e0a\u7684\u70b9\uff0c\u4f46\u4e0d\u662f\u6700\u5927\u4e5f\u4e0d\u662f\u6700\u5c0f\u7684\u51fa\u8fb9\u3002\n\n![\u56fe2](https://cdn.luogu.com.cn/upload/pic/71808.png)\n\n\n\n------------\n\n\n#### \u4e09\u3001\u5176\u51fa\u8fb9\u4e3a\u73af\u4e0a\u7684\u90a3\u4e2a\u70b9\u7f16\u53f7\u662f\u5176\u6240\u6709\u672a\u88ab\u8bbf\u95ee\u7684\u51fa\u8fb9\u4e2d\u6700\u5927\u7684\uff0c\u5982\u4e0b\u56fe\u3002\n\n\u6b64\u65f6$7$\u662f\u6700\u5927\u7684\u51fa\u8fb9\u4e5f\u662f\u73af\u4e0a\u7684\u70b9\u3002\n\n![\u56fe3](https://cdn.luogu.com.cn/upload/pic/71804.png)\n\n\n\n------------\n\n\n\n#### \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff08\u89c1\u4e0b\u56fe\uff09\uff1a\n\n\u7531\u4e8e\u6211\u4eec\u73b0\u5728\u5728$3$\u8fd9\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u6211\u4eec\u56de\u6eaf\u7684\u8bdd\uff0c$6$\u548c$7$\u5c31\u6c38\u8fdc\u4e5f\u5230\u4e0d\u4e86\u4e86\uff0c\u6240\u4ee5\u5728\u56de\u6eaf\u4e4b\u524d\u8981\u5148\u628a$6$\u548c$7$\u8d70\u5b8c\uff0c\u76f8\u6bd4$6$\u548c$7$\uff0c\u8d70$4$\u663e\u7136\u4f1a\u66f4\u4f18\u3002\n\n\u6240\u4ee5\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0d\u9700\u8981\u56de\u6eaf\uff0c\u7ee7\u7eed\u5728\u73af\u4e0a\u8d70\u5c31\u884c\u4e86\u3002\n\n![\u56fe1](https://cdn.luogu.com.cn/upload/pic/71801.png)\n\n\n\n------------\n\n\n#### \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff08\u89c1\u4e0b\u56fe\uff09\uff1a\n\n\u540c\u6837\u8fd8\u662f\u5728$3$\u8282\u70b9\uff0c\u8fd9\u6b21\u663e\u7136\u6211\u4eec\u8981\u5148\u8d70$4$\uff0c\u4f46\u662f\u8d70\u5b8c$4$\u8fd8\u662f\u5f97\u8d70$6$\u8282\u70b9\uff0c\u540c\u6837\u4e5f\u4e0d\u9700\u8981\u56de\u6eaf\u3002\n\n![\u56fe2](https://cdn.luogu.com.cn/upload/pic/71808.png)\n\n\n\n------------\n\n\n#### \u5bf9\u4e8e\u7b2c\u4e09\u79cd\u60c5\u51b5\uff08\u89c1\u4e0b\u56fe\uff09\uff1a\n\n\u8fd9\u65f6\u5019\u5f88\u660e\u663e\u662f\u8981\u56de\u6eaf\u7684\u4e86\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u56de\u6eaf\u4e4b\u524d\u8981\u5148\u628a$4$\u548c$6$\u5148\u8d70\u4e86\u518d\u56de\u6eaf\uff08\u539f\u56e0\u4e0a\u9762\u521a\u8bb2\u8fc7\u4e86\uff09\u3002\n\n#### \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u6362\u5f20\u56fe\uff0c\u8fd8\u9700\u8981\u56de\u6eaf\u5417\uff1f\uff08\u89c1\u4e0b\u4e0b\u56fe\uff09\n\n![\u56fe3](https://cdn.luogu.com.cn/upload/pic/71804.png)\n\n\n\n------------\n\n\n\u8fd9\u5f20\u56fe\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u5f53\u524d\u8fd8\u662f\u5728$3$\u8282\u70b9\uff0c$6$\u662f\u5176\u51fa\u8fb9\u4e2d\u6700\u5927\u4e14\u5728\u73af\u4e0a\u7684\u70b9\u3002\n\n\u8fd9\u65f6\u5019\u9700\u4e0d\u9700\u8981\u56de\u6eaf\u5462\uff1f\u5f88\u663e\u7136\u4e0d\u9700\u8981\n\n\u56e0\u4e3a\u56de\u6eaf\u4e4b\u540e\u56de\u5230\u4e86$2$\uff0c$2$\u7ee7\u7eed\u8d70\u7684\u8bdd\u662f\u8d70\u5230\u4e86$7$\uff0c\u663e\u7136\u8d70$6$\u6bd4\u8d77$7$\u66f4\u4f18\u3002\n\n![\u56fe4](https://cdn.luogu.com.cn/upload/pic/71814.png)\n\n\n\n------------\n\n\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u6211\u4eec\u5728\u73af\u4e0a\u8d70\u7684\u65f6\u5019\uff0c\u53ea\u6709\u5f53\u5176\u51fa\u8fb9\u4e2d\uff0c\u4e3a\u73af\u4e0a\u7684\u90a3\u4e2a\u70b9\u7f16\u53f7\u6700\u5927\uff0c\u4e14\u6bd4\u56de\u6eaf\u540e\u7b2c\u4e00\u4e2a\u8d70\u7684\u70b9\u8fd8\u5927\uff0c\u8fd9\u65f6\u5019\u624d\u56de\u6eaf\uff0c\u5176\u4ed6\u65f6\u5019\u5c31\u6b63\u5e38\u8dd1$DFS$\u3002\n\n\u56e0\u6b64\u5728\u4ee3\u7801\u4e0a\u6211\u7528\u4e86$flag$\u6765\u6807\u8bb0\u662f\u5426\u9700\u8981\u56de\u6eaf\uff0c\u7528$tmp$\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u4e2d\u7b2c\u4e00\u4e2a\u6bd4\u73af\u4e0a\u7684\u51fa\u8fb9\u90a3\u4e2a\u8282\u70b9\u8fd8\u8981\u5927\u7684\u8282\u70b9\uff0c\u4ee5\u4fbf\u540e\u9762\u5224\u65ad\u662f\u5426\u56de\u6eaf\u65f6\u6bd4\u8f83\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <stack>\n#include <queue>\n#include <cstring>\n#include <vector>\nusing namespace std;\nconst int N = 500010;\nint n, m, vis[N], ans[N], cnt, f[N], rings[N], flag, tmp, temp, head[N], ver[N << 1], nex[N << 1], tot;\nstruct Node {\n\tint x, y;\n}node[N << 1];\nvoid add (int x, int y) {\n    ver[++ tot] = y;\n    nex[tot] = head[x];\n    head[x] = tot;\n}\nbool cmp (Node a, Node b) {\n\treturn a.y > b.y;\n}\ninline int read () {\n    int res = 0;\n    char ch = getchar();\n    while (ch < '0' || ch > '9') ch = getchar();\n    while (ch >= '0' && ch <= '9') {\n        res = (res << 3) + (res << 1) + (ch - 48);\n        ch = getchar();\n    }\n    return res;\n}\nvoid dfs (int x) {\n    vis[x] = 1;\n    ans[++ cnt] = x;\n    for (int i = head[x]; i; i = nex[i]) {\n        int y = ver[i];\n        if (!vis[y])\n            dfs(y);\n    }\n}\nvoid dfsRing (int x, int fa) {\n    if (flag) return;\n    if (f[x] == 0) {\n        f[x] = fa;\n    }else if (f[x] != fa) {\n        while (fa != x) {\n            rings[fa] = 1;\n            fa = f[fa];\n        }\n        rings[x] = 1;\n        flag = 1;\n        return;\n    }\n    for (int i = head[x]; i; i = nex[i]) {\n        int y = ver[i];\n        if (y == fa) continue;\n        dfsRing(y, x);\n    }\n}\nvoid sDfs (int x) {\n    vis[x] = 1;\n    ans[++ cnt] = x;\n    if (rings[x]) { //\u5224\u65adx\u662f\u5426\u5728\u73af\u4e0a \n    \tint flag = 0;\n    \tfor (int i = head[x]; i; i = nex[i]) {\n    \t\tif (temp) break; //temp\u6807\u8bb0\u73af\u4e0a\u7684\u56de\u6eaf\u662f\u5426\u6267\u884c\u8fc7\u4e86\uff0c\u56e0\u4e3a\u4e00\u65e6\u6267\u884c\u8fc7\u73af\u4e0a\u7684\u56de\u6eaf\uff0c\u90a3\u4e48\u540e\u9762\u5c31\u4e0d\u9700\u8981\u5728\u73af\u4e0a\u56de\u6eaf\uff0c\u53ea\u9700\u6b63\u5e38\u8dd1DFS\u5373\u53ef \n    \t\tint y = ver[i];\n    \t\tif (vis[y]) continue;\n    \t\tif (rings[y]) {\n    \t\t\ti = nex[i];\n    \t\t\twhile (vis[ver[i]]) //\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u8df3\u8fc7 \n    \t\t\t\ti = nex[i];\n    \t\t\tif (i) //i\u4e0d\u4e3a0\u5373\u73af\u4e0a\u7684\u51fa\u8fb9\u4e0d\u662f\u6700\u5927\u7684\u51fa\u8fb9 \n    \t\t\t\ttmp = ver[i]; //tmp\u8bb0\u5f55\u7b2c\u4e00\u4e2a\u6bd4\u73af\u7684\u51fa\u8fb9\u5927\u7684\u90a3\u4e2a\u70b9 \n    \t\t\telse if (y > tmp) { //\u73af\u4e0a\u7684\u51fa\u8fb9\u662f\u6700\u5927\u7684\u51fa\u8fb9\u4e14\u6bd4\u6211\u4eec\u56de\u6eaf\u540e\u7b2c\u4e00\u6b21\u8981\u8d70\u7684\u8282\u70b9\u8fd8\u5927 \n    \t\t\t\tflag = 1;\n    \t\t\t\ttemp = 1;\n\t\t\t\t}\n    \t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor (int i = head[x]; i; i = nex[i]) {\n\t\t\tint y = ver[i];\n\t\t\tif (vis[y]) continue;\n\t\t\tif (rings[y] && flag) continue; //flag = 1\uff0c\u56e0\u6b64\u56de\u6eaf\uff0c\u4e0d\u518d\u8d70\u73af\u4e0a\u7684\u51fa\u8fb9 \n\t\t\tsDfs(y);\n\t\t}\n\t} else {\n\t\tfor (int i = head[x]; i; i = nex[i]) {\n\t\t\tint y = ver[i];\n\t\t\tif (vis[y]) continue;\n\t\t\tsDfs(y);\n\t\t}\n\t}\n}\nint main () {\n    n = read();\n    m = read();\n    for (int i = 1; i <= m; i ++) {\n        int u = read(), v = read();\n        node[i].x = u;\n        node[i].y = v;\n        node[i + m].x = v;\n        node[i + m].y = u;\n    }\n    sort(node + 1, node + 2 * m + 1, cmp);\n    for (int i = 1; i <= 2 * m; i ++)\n    \tadd(node[i].x, node[i].y);\n    if (m == n - 1) {\n        dfs(1);\n        for (int i = 1; i <= n; i ++)\n            printf(\"%d \", ans[i]);\n    }else {\n        dfsRing(1, 1); //\u4e00\u5f00\u59cb\u5148\u627e\u51fa\u6240\u6709\u5728\u73af\u4e0a\u7684\u70b9 \n        flag = 0;\n        tmp = 0x3f3f3f3f;\n        sDfs(1);\n        for (int i = 1; i <= n; i ++)\n            printf(\"%d \", ans[i]);\n    }\n    return 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1565704634,
        "uid": 107640,
        "name": "duoluoluo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u4e8b\u5b9e\u4e0a\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5b8c\u5168$O(n^2)$\u53ef\u8fc7\u7684\u9898\u6211\u8003\u573a\u8981\u5199$O(n \\log n)$\n\n~~\u800c\u4e14\u8fd8\u5199\u6302\u4e86~~\n\n**\u4ee5\u4e0b\u662f\u8003\u573a\u601d\u8def\u6709\u9519\u8bef\u8bf7\u6279\u8bc4\u6307\u6b63**\n\n------\n\n$m=n-1$, \u5373\u6811\u7684\u60c5\u51b5\u56e0\u4e3a\u53ea\u6709\u4e00\u79cd\u8d70\u6cd5(\u4e0d\u80fd\u56de\u6eaf)\u6240\u4ee5\u76f4\u63a5\u6309\u5b57\u5178\u5e8f\u6700\u5c0f\u8d70\u5373\u53ef.\n\n\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u5019\u6211\u662f\u5148\u8bfb\u5165\u4e86\u6240\u6709\u7684\u8fb9\u7136\u540e\u628a\u5b83\u4eec\u6309\u5230\u8fbe\u70b9\u7684\u5927\u5c0f\u6392\u5e8f\u7136\u540e\u4e00\u6761\u4e00\u6761\u63d2\u5165.\n\n\u6700\u540e$dfs$\u7684\u65f6\u5019\u76f4\u63a5\u6309\u8fb9\u7684\u987a\u5e8f\u8d70\u5373\u53ef.\n\n\u6ce8\u610f\u94fe\u8868\u5b58\u56fe\u662f\u5012\u7740\u7684\u6240\u4ee5\u52a0\u8fb9\u4e5f\u8981\u53cd\u8fc7\u6765.\n\n------\n\n\u663e\u7136\u6b64\u9898\u7684\u96be\u70b9\u5728\u4e8e\u57fa\u73af\u6811.\n\n\u56e0\u4e3a\u5bf9\u4e8e\u57fa\u73af\u6811\u4e0a\u7684\u73af, \u53ef\u4ee5\u9009\u62e9\u5148\u4ece\u4e00\u7aef\u8fdb\u5165, \u8d70\u5230\u67d0\u4e00\u4e2a\u70b9\u65f6\u8fd4\u56de, \u7136\u540e\u518d\u4ece\u53e6\u4e00\u7aef\u8fdb\u5165.\n\n\u9996\u5148\u8fd8\u662f\u5bf9\u6240\u6709\u8fb9\u6392\u5e8f\u7136\u540e\u4f9d\u5e8f\u63d2\u5165.\n\n\u5bf9\u4e8e\u57fa\u73af\u6811\u53ef\u4ee5\u5148\u627e\u73af.\n\n\u4e8e\u662f\u6211\u5199\u4e86\u4e00\u4e2a$dfs$\u6807\u8bb0\u4e86\u4e00\u4e0b\u73af\u7684\"\u6839\"(\u5373$dfs$\u65f6\u6df1\u5ea6\u6700\u6d45\u7684\u70b9)\u4ee5\u53ca\u73af\u7684\"\u6839\"\u4e2d\u5728\u73af\u4e0a\u7684\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9($u1, u2$, \u6ee1\u8db3$u1 < u2$).\n\n\u8fd9\u4e2a\u53ef\u4ee5\u4e71\u5199\u89e3\u51b3(\u5f53\u7136$tarjan$\u5e94\u8be5\u4e5f\u6ca1\u6709\u95ee\u9898).\n\n\u7136\u540e\u6211\u5c31\u5f00\u59cb\u5199~~\u8d70\u8def~~\u65c5\u884c\u7684\u8fc7\u7a0b.\n\n\u9996\u5148\u662f\u60f3\u5230\u5bf9\u4e8e\u73af\u4ece$u1$\u8fdb\u53bb.\n\n\u90a3\u4e48\u5f88\u663e\u7136\u8fd9\u4e2a\u662f\u9519\u7684\u56e0\u4e3a\u6839\u672c\u6ca1\u6709\u56de\u6eaf\u7684\u8fc7\u7a0b.\n\n(\u56de\u6eaf\u662f\u6307\u4ece\u73af\u4e2d\u7684\u67d0\u4e00\u4e2a\u70b9\u56de\u5230\u73af\u7684\u6839, \u5176\u4e2d**\u8981\u7ecf\u8fc7\u73af\u4e0a\u7684\u70b9\u51fa\u53d1\u7684\u8fd8\u6ca1\u6709\u8d70\u8fc7\u7684\u70b9**)\n\n\u90a3\u4e48\u8003\u8651\u5982\u4f55\u56de\u6eaf.\n\n\u5047\u8bbe\u73b0\u5728\u6b63\u5728\u73af\u4e0a\u7684\u67d0\u4e2a\u70b9$u$, \u4e0b\u4e00\u4e2a\u5c06\u8981\u8d70\u5230$v$.\n\n\u90a3\u4e48\u53ea\u6709**\u5f53$u$\u548c$v$\u90fd\u5728\u73af\u4e0a\u5e76\u4e14$u2$\u8fd8\u6ca1\u6709\u8d70\u5230\u8fc7, $v$\u662f$u$\u51fa\u53d1\u7684\u6700\u540e\u4e00\u4e2a\u70b9\u4e14$v$\u6bd4$mx$\u5927**\u65f6\u8fdb\u884c\u56de\u6eaf\n\n$mx$\u662f\u6307\u5982\u679c\u4ece$u$\u5f00\u59cb\u56de\u6eaf\u65f6\u4e0b\u4e00\u4e2a\u4f1a\u8d70\u5230\u7684\u70b9\u7684\u7f16\u53f7.\n\n\u90a3\u4e48\u5982\u679c$v$\u6bd4$mx$\u5927, \u6b64\u65f6\u56de\u6eaf\u80af\u5b9a\u6bd4\u7ee7\u7eed\u8d70\u66f4\u4f18, \u800c\u56e0\u4e3a\u4e4b\u524d\u90fd\u6ca1\u6709\u56de\u6eaf, \u6240\u4ee5\u6b64\u65f6\u56de\u6eaf\u5c31\u662f\u6700\u4f18\u7684.\n\n\u5224\u65ad$u2$\u6ca1\u6709\u8d70\u5230\u8fc7\u5c31\u662f\u76f8\u5f53\u4e8e\u5224\u65ad\u6b64\u65f6\u662f\u5426\u8fd8\u80fd\u591f\u56de\u6eaf(\u5982\u679c$u2$\u5df2\u7ecf\u8d70\u5230\u4e86\u90a3\u4e48\u56de\u6eaf\u5b8c\u5168\u6ca1\u6709\u610f\u4e49\u4e86).\n\n\u4e3a\u4ec0\u4e48\u8981\u4fdd\u8bc1$v$\u662f$u$\u51fa\u53d1\u7684\u6700\u540e\u4e00\u4e2a\u70b9\u5462?\n\n\u56e0\u4e3a\u63d2\u5165\u8fb9\u7684\u65f6\u5019\u662f\u6309\u5927\u5c0f\u6392\u5e8f\u7684, \u5982\u679c$v$\u540e\u9762\u8fd8\u6709\u70b9\u7684\u8bdd\u90a3\u4e48\u90a3\u4e2a\u70b9\u7684\u7f16\u53f7\u4e00\u5b9a\u6bd4$v$\u5927.\n\n\u800c\u5982\u679c\u6b64\u65f6(\u8d70\u5230$v$\u524d)\u56de\u6eaf, \u5219\u4e0b\u4e00\u4e2a\u70b9\u5fc5\u987b\u662f$v$\u540e\u9762\u7684\u70b9(\u5426\u5219\u8fd9\u4e2a\u70b9(\u53ca\u5b50\u6811)\u5c06\u65e0\u6cd5\u5230\u8fbe)\n\n\u800c\u8fd9\u4e2a\u70b9\u662f\u6bd4$v$\u5927\u7684\u6240\u4ee5\u56de\u6eaf\u4e0d\u662f\u6700\u4f18\u7684.\n\n\u6362\u53e5\u8bdd\u8bf4\u6b64\u65f6\u7684$mx$\u5c31\u662f$v$\u540e\u9762\u7684\u70b9, $mx>v$, \u6240\u4ee5\u4e0d\u80fd\u56de\u6eaf.\n\n\u90a3\u4e48\u5982\u4f55\u66f4\u65b0$mx$\u5462?\n\n\u5bf9\u4e8e\u67d0\u4e00\u6b21\u4ece$u$\u5230$v$\u8fdb\u884c\u7684$dfs$, \u5982\u679c$v$\u7684\u540e\u9762\u8fd8\u6709\u8282\u70b9, \u90a3\u4e48$mx$\u5c31\u662f$v$\u540e\u9762\u7684\u8282\u70b9\u7684\u503c(\u5982\u679c\u56de\u6eaf\u7684\u8bdd\u90a3\u4e48\u4e0b\u4e00\u4e2a\u5fc5\u987b\u7ecf\u8fc7$v$\u540e\u9762\u7684\u8282\u70b9, \u5426\u5219\u8fd9\u4e2a\u8282\u70b9\u5c06\u4f1a\u65e0\u6cd5\u5230\u8fbe), \u5426\u5219\u5c31\u662f\u539f\u672c\u7684$mx$.\n\n\u7136\u540e\u2026\u2026\u597d\u50cf\u5c31\u53ef\u4ee5\u4e86?\n\n\u73b0\u5728\u770b\u8fd9\u4efd\u4ee3\u7801\u597d\u50cf\u6709\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u5224\u65ad, \u4e5f\u6709\u5f88\u591a\u53ef\u4ee5\u6539\u8fdb\u7684\u5730\u65b9.\n\n\u4f46\u662f\u4e0d\u7ba1\u600e\u4e48\u6837\u8003\u573a\u4e0a\u90fd\u6ca1\u6709\u8fc7\u6389\u5462.\n\n\u6211\u4eec\u53d1\u73b0\u4e0a\u9762\u63d0\u5230\u4e86\u4e00\u4e2a\u53d6$v$\u540e\u9762\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u7684\u64cd\u4f5c.\n\n\u7136\u540e\u56e0\u4e3a\u5b58\u8fd9\u68f5\u6811/\u57fa\u73af\u6811\u7684\u65f6\u5019\u5b58\u7684\u662f\u53cc\u5411\u8fb9.\n\n\u6240\u4ee5\u4e0d\u80fd\u7b80\u5355\u5730\u53d6\u4e0b\u4e00\u4e2a\u70b9, \u800c\u662f\u8981\u5224\u65ad\u4e0b\u4e00\u4e2a\u70b9\u662f\u5426\u5df2\u7ecf\u8d70\u8fc7\u4e86.\n\n~~\u6210\u529f\u88ab\u5361\u523084~~\n\n\u53e6\u5916\u8003\u573a\u4ee3\u7801\u771f\u7684\u4e0d\u600e\u4e48\u597d\u770b\u2026\u2026\u89c1\u8c05.\n\n\u603b\u590d\u6742\u5ea6$O(n\\log n)$.\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstruct _ {\n    int u, v;\n    _(const int& u = 0, const int& v = 0) : u(u), v(v) {}\n} e[1000001];\nstruct __ {\n    bool operator()(const _& a, const _& b) {\n        return a.v < b.v;\n    }\n} cmp; //\u6309\u7167\u5230\u8fbe\u70b9\u7684\u6807\u53f7\u6bd4\u8f83\nint h[500001], to[1000001], nxt[1000001], cnt;\ninline void add_edge(const int& u, const int& v) {\n    to[++cnt] = v; nxt[cnt] = h[u]; h[u] = cnt;\n}\nint n, m;\nstd::vector<int> ans; //\u5b58\u50a8\u7b54\u6848, \u6bcf\u6b21dfs\u524d\u628a\u5f53\u524d\u7684u\u63d2\u5165\u5230ans\u7684\u6700\u540e.\nvoid dfs(const int& u, const int& fa) {\n    ans.push_back(u);\n    for (register int i = h[u]; i; i = nxt[i]) if (to[i] != fa)\n        dfs(to[i], u);\n} //\u5904\u7406\u6811\u60c5\u51b5\u7684\u7b54\u6848.\nvoid work1() {\n    int u, v;\n    for (register int i = 0; i < m; ++i) {\n        scanf(\"%d%d\", &u, &v);\n        e[i << 1] = _(u, v);\n        e[(i << 1) | 1] = _(v, u);\n    }\n    std::sort(e, e + (m << 1), cmp); //\u987a\u5e8f\u6392\u5e8f\n    for (register int i = n << 1; i--; ) //\u56e0\u4e3a\u904d\u5386\u7684\u65f6\u5019\u4e0e\u63d2\u5165\u987a\u5e8f\u76f8\u53cd, \u6240\u4ee5\u8981\u53cd\u7740\u63d2\u5165\n        add_edge(e[i].u, e[i].v);\n    dfs(1, 0);\n}\nint vis[500001], rt, u1, u2; //vis[i] = 2\u8868\u793ai\u5728\u73af\u4e0a\nvoid dfs1(const int& u, const int& fa) {\n    vis[u] = 1;\n    for (register int i = h[u]; i; i = nxt[i]) if (to[i] != fa) { //v = to[i]\n        if (!rt && vis[to[i]]) rt = to[i], vis[u] = 2, u2 = u; //\u5982\u679cv\u4e0d\u662fu\u7684\u7236\u4eb2\u4f46\u662fv\u5df2\u7ecf\u88ab\u7ecf\u8fc7\u4e86\u4e14\u5f53\u65f6\u8fd8\u6ca1\u6709\u627e\u5230\u73af, \u90a3\u4e48v\u5c31\u662f\u8fd9\u4e2a\u73af\u7684\u6839, u\u5c31\u662fu2\n        else if (!vis[to[i]]) dfs1(to[i], u);\n        if (vis[to[i]] == 2 && to[i] != rt) {\n            vis[u] = 2; //\u6807\u8bb0\u73af\u4e0a\u70b9\n            if (!u1 && u == rt) u1 = to[i]; //\u5224\u65ad\u662f\u5426\u662fu1\n        }\n    }\n}\n\nbool vis2[500001];\ninline int mynxt(int i) {\n    while (i = nxt[i], i && vis2[to[i]]);\n    return i;\n} //\u53d6\u4e0b\u4e00\u4e2a\u70b9\nint clk; //\u7528\u6765\u5224\u65ad\u7684\u4e1c\u897f\nvoid dfs2(const int& u, const int& fa, const int& mx) {\n    ++clk;\n    vis2[u] = 1; ans.push_back(u);\n    for (register int i = h[u]; i; i = nxt[i]) if (to[i] != fa && !vis2[to[i]]) {\n        int nx = mynxt(i);\n        if (mx && vis[u] == 2 && vis[to[i]] == 2 && !vis2[u2] && !nx && to[i] > mx) return; //\u56de\u6eaf\u64cd\u4f5c\n        if (u == rt && to[i] == u1) dfs2(to[i], u, to[nx]);\n        else dfs2(to[i], u, mx ? (nx ? to[nx] : mx) : 0); //\u5982\u679cmx\u662f0\u8868\u793a\u73b0\u5728\u4e0d\u53ef\u56de\u6eaf(\u4e0d\u5728\u73af\u4e0a)(\u4eff\u4f5b\u4f1a\u5bf9\u73af\u4e0a\u7684\u5206\u652f\u70b9\u5f88\u5947\u602a?)\n    }\n}\nvoid work2() {\n    int u, v;\n    for (register int i = 0; i < m; ++i) {\n        scanf(\"%d%d\", &u, &v);\n        e[i << 1] = _(u, v);\n        e[(i << 1) | 1] = _(v, u);\n    }\n    std::sort(e, e + (m << 1), cmp);\n    for (register int i = n << 1; i--; )\n        add_edge(e[i].u, e[i].v);\n    dfs1(1, 0);\n    dfs2(1, 0, 0);\n    assert(clk == n); //\u5bf9\u62cd\u7528\n}\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    if (m == n - 1) work1();\n    else work2();\n    printf(\"%d\", ans[0]);\n    for (register int i = 1; i < n; ++i) printf(\" %d\", ans[i]);\n    putchar('\\n');\n}\n```\n\nqwq",
        "postTime": 1543808836,
        "uid": 22132,
        "name": "little_gift",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "~~\u8fd9\u9898\u679c\u65ad\u8003\u573a60\u518d\u89c1 \u6027\u4ef7\u6bd4\u9ad8\u7684\u4e00\u6279~~\n\n\u524d60\u5206\u6ca1\u6709\u73af\u76f4\u63a5\u6df1\u641c\u5c31\u884c\uff0c\u6709\u73af\u7684\u8bdd\u5c31\u53ef\u4ee5\u201c\u53cd\u6094\u201d\u4e00\u6b21\uff0c\n\n\u5148dfs\u5224\u4e00\u4e0b\u73af\n\n\u8fdb\u5165\u73af\u4e4b\u540e\uff0c\n\n\\\\\\\\\n\u5f53\u4f60\u7684\u524d\u4e00\u4e2a\u8fd8\u6709\u513f\u5b50\u6ca1\u8d70\u7684\u7956\u5148\u7684\u6700\u5c0f\u7684\u513f\u5b50\u6bd4\u4f60\u81ea\u5df1\u7684\u513f\u5b50\uff08\u5728\u73af\u4e0a\u7684,\u4e14\u5176\u4ed6\u513f\u5b50\u90fd\u8bbf\u95ee\u5b8c\u6216\u6ca1\u6709\u5176\u4ed6\u513f\u5b50\uff09\u5c0f\u7684\u65f6\u5019\u5c31\u201c\u53cd\u6094\u201d\\\\\\\u91cd\u70b9\n\n\u76f4\u63a5return\u5c31\u884c\u4e86\n\n\u5177\u4f53\u7ec6\u8282\u4ee3\u7801\u4e2d\u6709\u6807\u6ce8\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n\u770b\u5230\u6709\u4eba\u95ee\u6b63\u786e\u6027\uff0c\u5176\u5b9e\u662f\u663e\u7136\u7684\uff1a\n\n\u56e0\u4e3a\u8981\u4fdd\u8bc1\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6240\u4ee5\u8981\u8ba9\u524d\u9762\u7684\u5c3d\u53ef\u80fd\u5c0f\uff0c\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u8bdd\u4fdd\u8bc1\u6ee1\u8db3\u8d2a\u5fc3\uff0c\u552f\u4e00\u7684\u9650\u5236\u5c31\u662f\u8981\u8d70\u5230\u6bcf\u4e00\u4e2a\u70b9\uff0c\u4e0a\u9762\u91cd\u70b9\u4e2d\u4e00\u5b9a\u662f\u8981\u6709\u73af\u7684\uff0c\u6240\u4ee5\u5728\u8d2a\u5fc3\u540e\u53ef\u4ee5\u901a\u8fc7\u73af\u518d\u6b21\u8bbf\u95ee\u8df3\u8fc7\u7684\u7ed3\u70b9\uff0c\u56e0\u800c\u53ef\u4ee5\u6ee1\u8db3\u6b63\u786e\u6027\n\n\n\uff08p5022\u52a0\u5f3a\u7248\u53ef\u53cc\u500d\u7ecf\u9a8c\uff09\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<stdio.h>\n#include<queue>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n\nconst int N=10001,inf=0x3f3f3f3f;\n\ntypedef struct EDGE{\n\tint to;\n\tint next;\n}edge;\n\nint head[N],n,m,nus,flag;\nbool book[N],cir[N],used[N];\nqueue<int > ans;\nedge e1[N];\n\nvoid add(int u,int to){\n\tnus++;\n\te1[nus].next=head[u];\n\te1[nus].to=to;\n\thead[u]=nus;\n\treturn ;\n}\n\nvoid dfs1(int u,int fa){//\u5224\u73af \n\tbook[u]=1;\n\tfor(int i=head[u];i!=0;i=e1[i].next){\n\t\tint v=e1[i].to;\n\t\tif(v==fa)continue;\n\t\tif(book[v]){flag=1,cir[v]=1,cir[u]=1;return ;}\n\t\tdfs1(v,u);\n\t\tif(cir[v]==1&&flag==1){\n\t\tif(cir[u]==1)flag=0;\n\t\tcir[u]=1;\n\t\treturn ;\n\t\t}\n\t}\n}\n\nvoid dfs2(int u,int fa,int pcan){//pcan ->\u53ef\u4ee5\u201c\u53cd\u6094\u201d\u5230\u7684\u5730\u65b9 \n\tif(book[u]==1)return;//\u4e0d\u52a0\u8fd9\u884c88\uff0c\u56e0\u4e3a\u73af\u53ef\u80fd\u4e0d\u53cd\u6094\uff0c\u4f1a\u591a\u7b97\n\tbook[u]=1;\n\tans.push(u);\n\tpriority_queue<int > q1;//\u4f18\u5148\u961f\u5217\u627e\u6700\u5c0f\u7684\u513f\u5b50 \n\t\tfor(int i=head[u];i!=0;i=e1[i].next){\n\t\t\tint v=e1[i].to;\n\t\t\tif(v==fa||book[v])continue;\n\t\t\tq1.push(-v);\n\t\t}\n\t\twhile(q1.size()){//\u770b\u7740\u50cfbfs\u5176\u5b9e\u662fdfs \n\t\t\tint nv=-q1.top();\n\t\t\tq1.pop();\n\t\t\tif(flag==0&&cir[nv]&&nv>pcan&&q1.size()==0){\n\t\t\t\tflag=1;//q1.size==0\uff0c\u5f53\u4f60\u522b\u7684\u5b69\u5b50\u90fd\u8d70\u5b8c\u624d\u80fd\u53cd\u6094\uff0c\u4e0d\u7136\u4f1a\u6f0f\u6389\uff1b\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint next=inf;\n\t\t\tif(q1.size()&&cir[u])next=-q1.top();//\u66f4\u65b0pcan \n\t\t\tdfs2(nv,u,next==inf?pcan:next);\n\t\t}\n}\n\nint main(){\n//\tfreopen(\"123.txt\",\"r\",stdin);\n//\tfreopen(\"456.txt\",\"w\",stdout);\n\tcin>>n>>m;\n\tint x1,x2;\n\tfor(int a=1;a<=m;a++)scanf(\"%d%d\",&x1,&x2),add(x1,x2),add(x2,x1);\n\t\n\tdfs1(1,1);\n\tmemset(book,0,sizeof(book));\n\tflag=0;\n\tdfs2(1,1,inf);\n\twhile(ans.size()){\n\tprintf(\"%d\",ans.front()),ans.pop();\n\tif(ans.size()>=1)printf(\" \");\n\t}\n}\n```\n",
        "postTime": 1555285828,
        "uid": 127319,
        "name": "\u7fbd\u7b19",
        "ccfLevel": 6,
        "title": "\u624b\u5de5\u9898\u89e3 \u5feb\u6765\u770b\u554a~~"
    },
    {
        "content": "~~\u6211\u4eec\u9009\u62e9n\u65b9\u8fc7\u767e\u4e07~~\n\n\u6811\u7684\u60c5\u51b5\u5f88\u5bb9\u6613\u89e3\u51b3\uff0c\u4e00\u76f4\u5f80\u7f16\u53f7\u5c0f\u7684\u5b50\u8282\u70b9DFS\u4e0b\u53bb\u5c31\u884c\u4e86\u3002\n\n``m=n`` \u4e5f\u5c31\u662f\u5e26\u6709\u4e00\u4e2a\u73af\u3002~~\u8fd9\u91cc\u6211\u4eec\u8003\u8651\u62c6\u8fb9\u89e3\u51b3~~\u3002\n\n\u51b7\u9759\u5206\u6790\u4e00\u6ce2\uff0c\u6211\u4eec\u53d1\u73b0\uff1a\u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u4ece\u4e00\u4e2a\u70b9\u8d70\u5411\u73af\u4e0a\u7684\u4e00\u4e2a\u70b9\u5b58\u5728**\u81f3\u591a**\u4e24\u79cd\u65b9\u6cd5\u3002\u6362\u8a00\u4e4b\uff0c\u6211\u4eec\u5728\u4e0d\u65ad\u53d6\u6700\u5c0f\u513f\u5b50\u5411\u4e0b\u8d70\u65f6\u53ef\u4ee5\u653e\u5f03\u5f53\u524d\u5b50\u6811\u56de\u6eaf**\u4e00\u6b21**\u3002\n\n\u663e\u7136\uff0c\u4e0a\u8ff0\u653e\u5f03\u5b50\u6811\u53cd\u6094\u7956\u5148\u662f\u6709\u4e00\u5b9a\u6761\u4ef6\u7684\u3002\u4f8b\u5982\uff0c\u4e0b\u56fe\u6240\u793a\u60c5\u51b5\u4e0d\u80fd\u8fd4\u56de\u7956\u5148\uff0c\u5426\u5219\u5f53\u524d\u70b9\u7684\u5b50\u6811\u5c06\u6c38\u8fdc\u65e0\u6cd5\u5230\u8fbe\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/44596.png)\n\n\u518d\u5982\u4e0b\u56fe\uff0c\u5f53\u524d\u70b9\u7684\u5b50\u6811\u662f\u73af\uff08\u6216\u5b50\u6811\u4e2d\u6709\u73af\uff09\u4e5f\u4e0d\u80fd\u7acb\u5373\u56de\u6eaf\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/44597.png)\n\n\u8fd9\u6837\u4e5f\u4e0d\u884c\u5462qwq\n\n![](https://cdn.luogu.com.cn/upload/pic/44598.png)\n\n\u770b\u6765\u53ea\u6709\u8fd9\u6837\u5b50\u624d\u53ef\u4ee5\u6682\u65f6\u653e\u5f03\u5b50\u6811\u56de\u6eaf\u4e86\uff1a\uff08\u4e5f\u5c31\u662f\u5f53\u524d\u70b9\u548c\u5f53\u524d\u70b9\u7684\u5b50\u7ed3\u70b9\u90fd\u5728\u73af\u4e0a\uff0c\u5f53\u524d\u70b9\u7684\u7236\u4eb2\u4e5f\u5728\u73af\u4e0a\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/44599.png)\n\n\u5f53\u7136\uff0c\u6ee1\u8db3\u53ef\u56de\u6eaf\u6761\u4ef6\u65f6\u6211\u4eec\u5e76\u4e0d\u4f1a\u9a6c\u4e0a\u65e0\u8111\u56de\u6eaf\uff0c\u800c\u4f1a\u5148\u8003\u8651\u56de\u6eaf\u80fd\u5426\u4f7f\u89e3\u53d8\u5f97\u66f4\u4f18\u3002\u8fd9\u4e2a\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u770b\u770b\u672a\u904d\u5386\u7684\u7956\u5148(\u53ca\u5176\u513f\u5b50)\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u662f\u5426\u5c0f\u4e8e\u5f53\u524d\u70b9\u7684\u51b3\u7b56\uff0c\u8fd9\u6761\u4fe1\u606f\u5728DFS\u65f6\u4f20\u9012\u4e0b\u53bb\u5373\u53ef\u3002\n\n\u653e\u5f03\u5b50\u6811\u7684\u56de\u6eaf**\u53ea\u80fd\u7528\u4e00\u6b21**qwq\n\n\n```cpp\n\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define maxn 500005\n#define maxe (maxn << 1)\n\nusing namespace std;\n\nint n, m, stck[maxn], top, cir = 1, in[maxn], cnt;\nint ans[maxn], to[maxn << 2], s[maxn], idx = 0, len = 0;\nint lnk[maxn], nxt[maxe], son[maxe], tot = 1;\nbool vis[maxn], flg[maxn];\nint num = 0;\n\ninline int read()\n{\n\tchar ch = getchar();\n\tint ret = 0, f = 1;\n\twhile (ch > '9' || ch < '0')\n\t{\n\t\tif (ch == '-')\n\t\t\tf = -1;\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0' && ch <= '9')\n\t\tret = ret * 10 + ch - '0', ch = getchar();\n\treturn ret * f;\n}\n\nvoid adde(int x, int y)\n{\n\tson[++tot] = y, nxt[tot] = lnk[x], lnk[x] = tot;\n}\n\nvoid Trump()\n{\n\tmemset(flg, 1, sizeof(flg));\n\tfor (int i = 1; i <= n; ++i)\n\t\tflg[i] = true;\n\ttop = 0;\n\tfor (int i = 1; i <= n; ++i)\n\t{\n\t\tif (in[i] == 1)\n\t\t\tstck[++top] = i;\n\t}\n\twhile (top)\n\t{\n\t\tint now = stck[top--];\n\t\tflg[now] = 0, cnt--;\n\t\tfor (int j = lnk[now]; j; j = nxt[j])\n\t\t{\n\t\t\tin[son[j]]--;\n\t\t\tif (in[son[j]] == 1)\n\t\t\t\tstck[++top] = son[j];\n\t\t}\n\t}\n}\n\nvoid DFS(int now, int lst, int pre)\n{\n\tif (!vis[now])\n\t{\n\t\tans[++idx] = now;\n\t\tif (flg[now])\n\t\t\tcnt--;\n\t}\n\tvis[now] = 1;\n\tint l = len + 1, r = len;\n\tfor (int j = lnk[now]; j; j = nxt[j])\n\t{\n\t\tif (!vis[son[j]])\n\t\t\tto[++len] = son[j];\n\t}\n\tif (len < l)\n\t\treturn;\n\tr = len, len++;\n\tsort(to + l, to + 1 + r);\n\tif (s[now] == 0)\n\t\ts[now] = 1;\n\tfor (s[now] = l; s[now] <= r; ++s[now])\n\t{\n\t\tif (s[now] == r)\n\t\t{\n\t\t\tif (flg[to[s[now]]] && flg[now] && flg[pre]\n\t\t\t\t\t&& to[s[now]] > lst && cir < 0)\n\t\t\t{\n\t\t\t\tcir = 1;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tDFS(to[s[now]], lst, now);\n\t\t}\n\t\telse\n\t\t\tDFS(to[s[now]], to[s[now] + 1], now);\n\t}\n}\n\nint main()\n{\n\tfreopen(\"test.in\", \"r\", stdin);\n\tfreopen(\"test.out\", \"w\", stdout);\n\tn = read(), m = read();\n\tmemset(s, 0, sizeof(s));\n\tfor (int i = 1; i <= m; ++i)\n\t{\n\t\tint x = read(), y = read();\n\t\tadde(x, y), adde(y, x);\n\t\tin[x]++, in[y]++;\n\t}\n\tif (n == m)\n\t{\n\t\tcir = -1, cnt = n;\n\t\tTrump();\n\t\tflg[0] = true;\n\t}\n\tDFS(1, n + 1, 0);\n\tfor (int i = 1; i <= n; ++i)\n\t\tprintf(\"%d \", ans[i]);\n\treturn 0;\n}\n\n```\n\nNOIp\u7684\u65f6\u5019\u8111\u6b8b\uff0c\u7528\u73af\u4e0a\u6302\u7740\u7684\u94fe\u6765\u5224\u56de\u6eaf\u6761\u4ef6\uff0c\u70b8\u63893\u4e2a\u70b9QAQ",
        "postTime": 1543195360,
        "uid": 32831,
        "name": "\u5439\u96ea\u5439\u96ea\u5439",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5176\u5b9e\u6709$O(n)$\u7684\u505a\u6cd5\u7684\u3002\u3002\u3002  \n\u9898\u89e3\u91cc\u7684$nlogn$\u7684\u505a\u6cd5\u74f6\u9888\u4e3b\u8981\u662f\u5728\u6392\u5e8f\u4e0a\uff0c\u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u5bf9\u4e00\u4e2a\u503c\u57df\u5728$[1,n]$\u7684$pair<int,int>$\u6392\u5e8f\uff0c\u5982\u679c\u5b66\u8fc7sa\u7684\u8bdd\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u8fd9\u548csa\u5f88\u50cf\uff0c\u53ea\u9700\u8981\u505a\u4e00\u904d\u57fa\u6570\u6392\u5e8f\uff08\u6216\u8005\u8bf4\u662f\u8ba1\u6570\u6392\u5e8f\uff09\u5c31\u53ef\u4ee5O(n)\u7684\u89e3\u51b3\uff08\u867d\u7136\u5e38\u6570\u597d\u50cf\u633a\u5927\u7684  \n\u5177\u4f53\u6765\u8bf4\u50cf\u4e0b\u9762\u8fd9\u6837\u505a\u4e00\u904d\u5c31\u884c  \n```cpp\nfor(int i=1;i<=m;i++){\n    u=read(),v=read();\n    in[u]++,in[v]++;\n    b[++num]=edge(u,v),b[++num]=edge(v,u);\n}\nfor(int i=1;i<=n;i++) {\n    in[i]+=in[i-1],inn[i]=in[i];\n    ed[i]=in[i],st[i]=in[i-1]+1;\n}\nfor(int i=1;i<=num;i++)\n    c[in[b[i].to]--]=b[i];\nfor(int i=1;i<=num;i++)\n    b[++inn[c[i].from-1]]=c[i];\n```\nb\u5373\u4e3a\u6392\u5b8c\u5e8f\u540e\u7684\u8fb9\uff0cdfs\u65f6\u8fd9\u6837\u505a\u5c31\u884c\n```cpp\nfor(int i=st[u];i<=ed[u];i++){\n    v=ed[u];\n    ......\n}\n```\n\u81f3\u4e8e\u5177\u4f53\u4e4b\u540e\u600e\u4e48\u505a\uff0c\u6211\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u9898\u89e3\u91cc\u5f88\u591adalao\u90fd\u8bb2\u8fc7\u4e86\u3002\u3002\u3002   \nPs:\u8fd9\u4e2a\u5b58\u8fb9\u65b9\u6cd5\u4e00\u822c\u8fd8\u662f\u633a\u7ed9\u529b\u7684\uff0c\u6bd4\u4e00\u822c\u7684\u524d\u5411\u661f\u6216\u8005vector\u7406\u8bba\u4e0a\u5e38\u6570\u66f4\u4f18\u4e00\u4e9b\uff08\u4f46\u4e0d\u77e5\u9053\u8fd9\u9898\u4e3a\u4ec0\u4e48\u6ca1\u591a\u5927\u5dee\u522b\n",
        "postTime": 1550990733,
        "uid": 27030,
        "name": "ustze",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662fNOIP2018Day2T1\u7684\u52a0\u5f3a\u7248\uff0c\u539f\u9898\u662f\u53ef\u4ee5\u7528 $O(n^2)$ \u7684\u66b4\u529b\u65ad\u8fb9\u6c34\u8fc7\u7684\u3002\u4f46\u8fd9\u9898\u76f4\u63a5\u628a\u6570\u636e\u8303\u56f4\u6269\u5927\u4e86\u4e00\u767e\u500d\uff0c\u6240\u4ee5\u66b4\u529b\u7b97\u6cd5\u662f\u5b8c\u7f8e TLE \u4e86\uff01\n\n\n------------\n\u770b\u5230\u6570\u636e\u8303\u56f4\u662f $n \\le 500000$ \uff0c\u80af\u5b9a\u5f97\u4f7f\u7528\u4e00\u79cd $O(n \\log n)$ \u7684\u7b97\u6cd5\u3002\u663e\u7136 DFS \u8def\u5f84 $O(n)$ \u7684\u590d\u6742\u5ea6\u662f\u65e0\u6cd5\u4f18\u5316\u7684\uff0c\u6240\u4ee5\u5177\u4f53\u8981\u63d0\u9ad8\u6548\u7387\u5c31\u5f97\u4ece\u65ad\u8fb9\u5165\u624b\u3002\u5c06\u539f\u6765\u7684\u66b4\u529b\uff0c\u6539\u4e3a\u901a\u8fc7\u4e00\u6b21\u641c\u7d22\u6765\u786e\u5b9a\u5e94\u8be5\u65ad\u7684\u662f\u54ea\u6761\u8fb9\u3002\n\n\u5982\u4f55\u627e\u73af\uff0c\u641c\u7d22\u8def\u5f84\uff0c\u505a\u8fc7\u539f\u9898\u5e94\u8be5\u90fd\u77e5\u9053\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5728\u8d58\u8ff0\uff0c\u6211\u4eec\u5177\u4f53\u5206\u6790\u5982\u4f55\u65ad\u8fb9\uff1a\n\n\u6bd4\u5982\u8fd9\u6837\u7684\u56fe\n\n![](https://cdn.luogu.com.cn/upload/pic/45609.png)\n\n## \u5904\u7406\u65b9\u6cd5\uff1a\n\n### 1.\u5148\u627e\u5230\u73af\u548c\u73af\u7684\u5165\u70b9\uff08\u7ea2\u8272\uff0c\u6a59\u8272\u90e8\u5206\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/45610.png )\n\n### 2.\u5bf9\u73af\u4e0a\u7684\u6bcf\u4e2a\u70b9\u9884\u5904\u7406\uff0c\u627e\u51fa\u5176\u6700\u5927\u7684\u5b50\u8282\u70b9\uff0c**\u5165\u70b9\u4e0d\u7528\u5904\u7406**\uff08\u84dd\u8272\u90e8\u5206\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/45611.png)\n\n### 3.\u904d\u5386\u6574\u4e2a\u73af\u8fdb\u884c\u65ad\u8fb9\n\n\u8bbe $tmax[i]$ \u4e3a $i$ **\u8282\u70b9**\u7684\u6700\u5927**\u5b50\u8282\u70b9**\uff0c $next[i]$ \u4e3a $i$ \u7684\u540e\u4e00\u4e2a**\u8282\u70b9**\uff0c $cut[i]$ \u4e3a $i$ \u7684\u524d\u4e00\u4e2a\u6709**\u5b50\u8282\u70b9**\u7684**\u8282\u70b9**\uff0c\u8be5**\u8282\u70b9**\u6bd4 $i$ \u5927\u7684**\u5b50\u8282\u70b9**\u4e2d\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a**\u5b50\u8282\u70b9**\uff08\u6b64\u5904\u6240\u8bf4\u7684**\u8282\u70b9**\u90fd\u4e3a\u73af\u4e0a\u7684\u8282\u70b9\uff0c**\u5b50\u8282\u70b9**\u90fd\u4e0d\u662f\u73af\u4e0a\u7684\u8282\u70b9\uff09\n\n#### first. \u9996\u5148\u5224\u65ad**\u5165\u70b9**\u7684\u4e24\u4e2a\u53f6\u8282\u70b9\uff0c\u9009\u62e9\u8f83\u5c0f\u7684\u8fdb\u5165\u73af\n\n![](https://cdn.luogu.com.cn/upload/pic/45614.png )\n\n#### second. \u82e5 $next[i] < tmax[i]$ ,\u5219\u53ef\u4ee5\u6269\u5c55\u5230\u540e\u4e00\u4e2a\u8282\u70b9\n\n![](  https://cdn.luogu.com.cn/upload/pic/45618.png)\n\n#### third. \u82e5 $next[i] > tmax[i]$ \u4f46\u662f $next[i] < cut[i]$ ,\u4e5f\u53ef\u4ee5\u6269\u5c55\u5230\u540e\u4e00\u4e2a\u8282\u70b9\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/45620.png )\n\n#### fourth. \u82e5\u540c\u65f6\u4e0d\u6ee1\u8db3second\u548cthird\u7684\u6761\u4ef6\uff0c\u6216 $next[i]$ \u4e3a\u5165\u70b9\uff0c\u5219\u4e0d\u80fd\u7ee7\u7eed\u6269\u5c55\uff0c\u5e76\u65ad\u5f00 $i$ \u548c $next[i]$ \u4e4b\u95f4\u7684\u8fb9\n\n![](https://cdn.luogu.com.cn/upload/pic/45621.png )\n\n### 4. DFS\u641c\u7d22\u8def\u5f84\n\n![](  https://cdn.luogu.com.cn/upload/pic/45622.png)\n\n\u53ea\u8981\u5728\u65ad\u8fb9\u540e\u7684\u56fe\uff08\u4e00\u68f5\u6811\uff09\u4e2d\u7528DFS\u641c\u7d22\u8def\u5f84\u5373\u53ef\n\n### 5.\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u7ed9\u8fb9\u6392\u5e8f $O(n \\log n)$\n\n\u627e\u73af $O(n)$\n\n\u65ad\u8fb9 $O(n)$\n\n\u641c\u7d22\u8def\u5f84 $O(n)$\n\n\u6240\u4ee5**\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u63a5\u8fd1 $O(n \\log n)$** \uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u4f53\u3002\n\n### 6.\u7a0b\u5e8f\uff08pascal\uff09\n\n```pas\nprogram project1;\nvar\n   r,path,father,son,tmax:array[0..500005]of longint;\n   ttf:array[0..500005]of boolean;\n   l,v,x,y:array[0..1000005]of longint;\n   n,m,p,k,fat,nox,noy:longint;\n\nfunction max(a,b:longint):longint;\nbegin\n  if a>b then exit(a) else exit(b);\nend;\n\nfunction min(a,b:longint):longint;\nbegin\n  if a<b then exit(a) else exit(b);\nend;\n\nprocedure sc(f,fa:longint);\nvar i:longint;\nbegin\n  i:=r[f];\n  while i<>0 do begin\n    if (v[i]<>fa) and not((f=nox) and (v[i]=noy)) and not((f=noy) and (v[i]=nox)) then begin\n      inc(k);\n      path[k]:=v[i];\n      sc(v[i],f);\n    end;\n    i:=l[i];\n  end;\nend;\n\nfunction sc2(f,fa:longint):boolean;\nvar i:longint;\nbegin\n  sc2:=false;\n  i:=r[f];\n  while i<>0 do begin\n    if v[i]<>fa then begin\n      if father[v[i]]=0 then father[v[i]]:=f\n        else begin\n          p:=v[i];\n          fat:=father[v[i]];\n          father[v[i]]:=f;\n          son[f]:=v[i];\n          exit(true);\n        end;\n      if sc2(v[i],f)=true then begin\n        son[f]:=v[i];\n        ttf[v[i]]:=true;\n        exit(true)\n      end;\n    end;\n    i:=l[i];\n  end;\nend;\n\nprocedure sc3;\nvar i,j:longint;\nbegin\n  i:=p;\n  while father[i]<>p do begin\n    i:=father[i];\n    j:=r[i];\n    while j<>0 do begin\n      if (v[j]<>son[i]) and (v[j]<>father[i]) then tmax[i]:=max(tmax[i],v[j]);\n      j:=l[j];\n    end;\n  end;\nend;\n\nfunction mmax(k,p,o:longint):longint;\nvar i:longint;\nbegin\n  mmax:=10000000;\n  i:=r[p];\n  while i<>0 do begin\n    if (v[i]<>o) and (v[i]>k) then mmax:=min(mmax,v[i]);\n    i:=l[i];\n  end;\nend;\n\nfunction cut:longint;\nvar i,x,y,q,s:longint;\nbegin\n  cut:=0;\n  if father[p]<son[p] then begin\n    i:=father[p];\n    cut:=mmax(i,p,fat);\n    while ((father[i]<tmax[i]) or ((father[i]>tmax[i]) and (father[i]<cut))) and (father[i]<>p) do begin\n      i:=father[i];\n      s:=mmax(i,son[i],son[son[i]]);\n      if s<>10000000 then cut:=s;\n    end;\n    nox:=i;\n    noy:=father[i];\n  end else begin\n    i:=son[p];\n    cut:=mmax(i,p,fat);\n    while ((son[i]<tmax[i]) or ((son[i]>tmax[i]) and (son[i]<cut))) and (son[i]<>p) do begin\n      i:=son[i];\n      s:=mmax(i,father[i],father[father[i]]);\n      if s<>10000000 then cut:=s;\n    end;\n    nox:=i;\n    noy:=son[i];\n  end;\nend;\n\nprocedure qsort(l,r:longint);\nvar i,j,mid,t:longint;\nbegin\n  i:=l;\n  j:=r;\n  mid:=y[(i+j) div 2];\n  repeat\n    while y[i]>mid do inc(i);\n    while y[j]<mid do dec(j);\n    if i<=j then begin\n      t:=y[i];\n      y[i]:=y[j];\n      y[j]:=t;\n      t:=x[i];\n      x[i]:=x[j];\n      x[j]:=t;\n      inc(i);\n      dec(j);\n    end;\n  until i>j;\n  if l<j then qsort(l,j);\n  if i<r then qsort(i,r);\nend;\n\nprocedure re;\nvar i,t,xx,yy:longint;\nbegin\n  for i:=1 to m do begin\n    read(xx,yy);\n    t:=2*i;\n    x[t]:=xx;\n    y[t]:=yy;\n    x[t-1]:=yy;\n    y[t-1]:=xx;\n  end;\n  qsort(1,2*m);\n  for i:=1 to 2*m do begin\n    l[i]:=r[x[i]];\n    r[x[i]]:=i;\n    v[i]:=y[i];\n  end;\nend;\n\nprocedure main;\nvar i:longint;\nbegin\n  k:=0;\n  inc(k);\n  path[k]:=1;\n  father[1]:=1;\n  if m=n then begin\n    sc2(1,0);\n    sc3;\n    cut;\n  end;\n  sc(1,0);\n  for i:=1 to k do write(path[i],' ');  writeln;\nend;\n\nbegin\n  fillchar(r,sizeof(r),0);\n  fillchar(l,sizeof(l),0);\n  read(n,m);\n  re;\n  main;\nend.\n```",
        "postTime": 1544234747,
        "uid": 24425,
        "name": "fysbb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u6211\u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\n\n> \u7136\u540e\u8003\u8651\u66f4\u5feb\u4e00\u70b9\u600e\u4e48\u505a\u3002\u53d1\u73b0\u5c31\u662f\u4e00\u4e2a\u5f31\u667a\u8d2a\u5fc3\u3002\u7136\u540e\u5c31\u6ca1\u6709\u7136\u540e\u4e86\u3002\n\n\u9999\uff0c\u771f\u9999\u3002\u6240\u8c13\u300c\u5f31\u667a\u8d2a\u5fc3\u300d\u6211\u6123\u662f\u4ece $15:00$ \u5199\u5230 $20:30$ \u3002\n\n\u5927\u6982\u5c31\u662f\u4e00\u5f00\u59cb\u89c9\u5f97\uff0c\u5bf9\u4e8e\u5f53\u524d\u73af\uff0c\u8bbe\u73af\u91cc\u9762\u79bb $1$ \u6700\u8fd1\u7684\u4e00\u4e2a\u70b9 $k$ \u662f\u8fd9\u4e2a\u73af\u7684**\u6839**\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u6709\u4e24\u4e2a\u513f\u5b50\u90fd\u5728\u73af\u4e0a\uff0c\u79f0\u8fd9\u4e24\u4e2a\u513f\u5b50\u4e2d**\u8f83\u5c0f**\u7684\u90a3\u4e2a\u4e3a**\u5de6\u513f\u5b50**\uff0c**\u8f83\u5927**\u7684\u4e3a**\u53f3\u513f\u5b50**\u3002\u90a3\u4e48\u8981\u8d70\u80af\u5b9a\u4f1a\u8d70\u5de6\u513f\u5b50(\u8fd9\u91cc\u8bbe\u4e3a\u8d70 $x$)\uff0c\u5e76\u4e14\u65ad\u7684\u5730\u65b9\u4e00\u5b9a\u662f\u5de6\u513f\u5b50\u5411\u4e0b\u627e\u7684\u9014\u4e2d\u7b2c\u4e00\u4e2a\u6bd4\u53f3\u513f\u5b50\u5927\u7684\u70b9 $z$\uff0c\u5c06 $z$ \u7559\u7ed9\u53f3\u513f\u5b50\u90a3\u6761\u94fe\uff0c\u56e0\u4e3a\u8fd9\u65f6\u5148\u8d70\u53f3\u513f\u5b50\u4e00\u5b9a\u4f1a\u66f4\u4f18\u3002\n\n\u7136\u800c\u8fd9\u662f\u9519\u7684(case 1)\u3002\u7531\u4e8e\u4e0a\u6587\u94a6\u5b9a\u4e86\u4e00\u5b9a\u8981\u7ecf\u8fc7 $z$ \u4e4b\u4e0a\u7684\u70b9\uff0c\u6240\u4ee5\u73af\u4e0a\u6240\u6709\u6df1\u5ea6 $>dep_z$ \u70b9\u7684\u5916\u5411\u679d\u5728\u56de\u6eaf\u65f6\u662f\u5fc5\u987b\u8981\u8d70\u7684\uff0c\u5e76\u4e14\u662f\u8d70\u5b8c $z$ \u4e4b\u540e\u5c31\u9700\u8981\u63a5\u7740\u8d70\u3002\u90a3\u4e48\u5982\u679c\u5916\u5411\u679d\u4e2d\u5b58\u5728\u70b9\u7684\u7f16\u53f7\u6bd4 $z$ \u5927\uff0c\u5c31\u4e0d\u5982\u5148\u8d70 $z$ \u518d\u56de\u6eaf\uff0c\u56e0\u4e3a $z$ \u4e4b\u540e\u7d27\u63a5\u7684\u90fd\u662f\u6bd4 $z$ \u5927\u7684\u3002\n\n\u7136\u800c\u2026\u8fd9\u8fd8\u662f\u9519\u7684(case 2)\u3002\u56e0\u4e3a\u5982\u679c\u4e0a\u9762\u5b58\u5728\u67d0\u4e2a\u5916\u5411\u679d\u5185\u7684\u70b9 $x$ \u6bd4\u5f53\u524d\u70b9\u7f16\u53f7\u8981\u5c0f\uff0c\u4f46\u662f\u5728\u5f53\u65f6\u5e76\u4e0d\u5e94\u8be5\u63d0\u524d\u8d70 $x$\uff0c\u90a3\u4e48\u6b64\u65f6\u5982\u679c\u8d70\u4e0b\u53bb\uff0c$x$ \u5c31\u4f1a\u6bd4\u5f53\u524d\u70b9\u7684\u65f6\u95f4\u6233\u8981\u9760\u540e\uff0c\u4e0d\u5982\u76f4\u63a5\u8d70 $x$ \u3002\u4e8e\u662f\u51b7\u9759\u4e86\u4e00\u4e0b\u6539\u6210\u7528 set \u53bb\u7ef4\u62a4 `lower_bound` \u548c\u5f53\u524d\u6700\u5c0f\u503c\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ea70hai8.png)\n\n\n\u4f46\u8fd9\u6837\u4f9d\u65e7\u662f\u9519\u7684\u2026\u5728\u6211\u51b7\u9759\u4e86\u5f88\u4e45\u4e4b\u540e\u53d1\u73b0\u2026\u4f3c\u4e4e\u5f88\u96be\u786e\u5b9a\u5230\u5e95\u8be5\u8d70\u5230\u54ea\u4e2a\u70b9\u65ad\u6389\uff0c\u56e0\u4e3a\u8fd9\u6837\u8d2a\u5fc3\u76f8\u5f53\u4e8e\u8fd8\u662f\u53ea\u60f3\u4e86\u4e00\u534a\uff0c\u5bf9\u4e8e case 1 \u548c case 2 \u6df7\u6742\u7684\u60c5\u51b5\u8fd8\u662f\u4f1a\u6302 ~~\u671f\u95f4\u4e00\u5ea6\u9677\u5165\u81ea\u95ed~~\u3002\n\n\u7136\u540e\u7075\u5149\u4e00\u95ea\u3002\u53d1\u73b0\u5916\u5411\u679d\u91cc\u9762\u53ef\u80fd\u6709\u6bd4\u5f53\u524d\u5927\u7684\u70b9\uff0c\u4e5f\u53ef\u80fd\u6709\u6bd4\u5f53\u524d\u5c0f\u7684\u70b9\u3002\u90a3\u4e48\u5982\u679c\u56de\u6eaf\u65f6\u4e00\u5b9a\u4f1a\u5148\u53bb\u904d\u5386\u6bd4\u5f53\u524d\u70b9\u5927\u7684\u70b9\u5c31\u80af\u5b9a\u4e0d\u4f1a\u65ad\uff0c\u5982\u679c\u4e00\u5b9a\u4f1a\u53bb\u904d\u5386\u6bd4\u5f53\u524d\u5c0f\u7684\u70b9\u5c31\u4e00\u5b9a\u8981\u65ad\u3002\u5426\u5219\u5982\u679c\u53ef\u4ee5\u9009\u62e9\u5148\u904d\u5386\u5927\u7684\u8fd8\u662f\u5c0f\u7684\uff0c\u5c31\u53ef\u4ee5\u6839\u636e\u6700\u521d\u7684\u90a3\u4e2a `check` \u6765\u5224\u65ad\u5230\u5e95\u65ad\u4e0d\u65ad\uff0c\u56e0\u4e3a\u6b64\u65f6\u5916\u5411\u679d\u4e0d\u518d\u6709\u5f71\u54cd\u3002\n\n\u53d1\u73b0\u5927\u6982\u662f\u9700\u8981\u6bcf\u6b21\u8be2\u95ee\u5916\u5411\u679d\u4e2d\u6bd4 $z$ \u5927\u7684/\u5c0f\u7684\u6700\u665a\u7684\u70b9\uff0c\u76f8\u5f53\u4e8e\u5355\u70b9\u4fee\u6539and\u533a\u95f4 $max$\u3002\u4e8e\u662f\u62ff\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e86\u4e00\u4e0b\u65f6\u95f4\u6233\u5373\u53ef\u3002\n\n\u4e8e\u662f\u6d41\u7a0b\u5927\u6982\u5c31\u662f\uff0c\u5148\u641c\u51fa\u73af\u6765\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4ece\u5de6\u513f\u5b50\u5f00\u59cb\u7684\u94fe\u7684\u90a3\u4e9b\u5916\u5411\u679d\u5373\u53ef\u3002\u590d\u6742\u5ea6 $O(n\\log n)$ \u3002\n\n\u4ee3\u7801\u53ea\u5c55\u793a\u4e86\u57fa\u73af\u6811\u7684 case\u3002\n\n```cpp\n#define il inline\n#define MAXN 500010\n#define to(k) E[k].to\n#define fr(k) E[k].from\n#define next(k) E[k].next\n\n\nstruct Edge{\n    int to ;\n    int next ;\n    int from ;\n}E[MAXN << 1] ;\n\nint res ;\nint cnt ;\nint n, m ;\nint o[MAXN] ;\nint sz[MAXN] ;\nint ans[MAXN] ;\nint head[MAXN] ;\n\nvector <int> son[MAXN] ;\n\nset <int> stt ;\n\nint tot ;\nint key_f ;\nint key_s ;\nint loop_f ;\nint loop_s ;\nint loop_c ;\nint fr[MAXN] ;\nint base[MAXN] ;\nint dep[MAXN] ;\nint maxx[MAXN] ;\nbool vis[MAXN] ;\n\nqueue <int> q ;\n\nvoid dfs3(int x, int fa){\n    if (vis[x]){\n        loop_f = x ;\n        loop_s = fa ;\n        int t = loop_s ;\n        while (t != loop_f)\n            base[++ tot] = t, t = fr[t] ;\n        return ;\n    } vis[x] = 1 ;\n    for (int k = head[x] ; k ; k = next(k)){\n        if (to(k) != fa){\n            maxx[x] = max(maxx[x], to(k)) ;\n            fr[to(k)] = x, dfs3(to(k), x) ;\n        }\n    }\n}\nbool bicheck(int x, int y){\n    return (bool)((x == key_f) && (y == key_s)) ;\n}\n\nint seg[MAXN * 3] ;\nvoid _up(int rt){\n    seg[rt] = max(seg[rt << 1], seg[rt << 1 | 1]) ;\n}\nvoid upd(int rt, int l, int r, int pos, int v){\n    if (l == r){\n        seg[rt] = v ;\n        return ;\n    }\n    int mid = (l + r) >> 1 ;\n    if (pos <= mid) upd(rt << 1, l, mid, pos, v) ;\n    else upd(rt << 1 | 1, mid + 1, r, pos, v) ; _up(rt) ;\n}\nint query(int rt, int l, int r, int ql, int qr){\n    int mid = (l + r) >> 1, res = 0 ;\n    if (ql <= l && r <= qr) return seg[rt] ;\n    if (ql <= mid) chkmax(res, query(rt << 1, l, mid, ql, qr)) ;\n    if (qr > mid) chkmax(res, query(rt << 1 | 1, mid + 1, r, ql, qr)) ;\n    return res ;\n}\nvoid dfs4(int x, int fa){\n    dep[x] = dep[fa] + 1 ;\n    if (x == loop_f){\n        int t, q, p = 0 ;\n\t\tint op = 0, pre = 0 ;\n        int cld[2] = {loop_s, loop_c} ;\n        if (cld[0] < cld[1])\n            t = cld[0], q = cld[1] ;\n        else t = cld[1], q = cld[0] ;\n        dep[t] = dep[q] = dep[x] + 1 ;\n        if (t == base[tot])\n            reverse(base + 1, base + tot + 1) ;\n\t\tfor (int j = head[base[1]] ; j ; j = next(j)){\n\t\t\tif (to(j) == x) continue ; \n            if (to(j) <= base[2]) continue ;\n            upd(1, 1, n, to(j), dep[base[1]]) ;\n        }\n\t\tfor (int k = 2 ; k <= tot ; ++ k){\n            chkmax(pre, base[k]) ;\n            int more_t = query(1, 1, n, base[k] + 1, n) ;\n            int less_t = query(1, 1, n, 1, base[k] - 1) ; \n\t\t\tif (less_t == more_t && pre > q) {\n                key_s = base[k] ;\n                key_f = base[k - 1] ;\n                for (int j = tot - 1 ; j >= k ; -- j)\n                    dep[base[j]] = dep[base[j + 1]] + 1 ;\n                break ;\n            }\n            else if (less_t > more_t){\n                key_s = base[k] ;\n                key_f = base[k - 1] ;\n                for (int j = tot - 1 ; j >= k ; -- j)\n                    dep[base[j]] = dep[base[j + 1]] + 1 ;\n                break ;\n            }\n            int y = base[k] ;\n            dep[base[k]] = dep[base[k - 1]] + 1 ;\n            for (int j = head[y] ; j ; j = next(j)){\n                if (to(j) == base[k - 1]) continue ;\n                if (to(j) <= base[k + 1]) continue ;\n                upd(1, 1, n, to(j), dep[y]) ;\n            }\n        }\n        if (!key_s){\n            for (int j = 2 ; j <= tot ; ++ j)\n                dep[base[j]] = dep[base[j - 1]] + 1 ;\n        }\n    }\n    for (int k = head[x] ; k ; k = next(k)){\n\t\tif (to(k) == fa) continue ;\n        if (bicheck(x, to(k))) continue ;\n        if (bicheck(to(k), x)) continue ;\n        if (dep[to(k)] && dep[to(k)] != dep[x] + 1) continue ;\n\t\tdfs4(to(k), x) ;\n    }\n}\nvoid dfs5(int u, int fa){\n    sz[u] = 1 ;\n    for (int k = head[u] ; k ; k = next(k))\n        if (to(k) != fa && !bicheck(u, to(k)) && !bicheck(to(k), u) && dep[to(k)] == dep[u] + 1)\n            dfs5(to(k), u), sz[u] += sz[to(k)], son[u].push_back(to(k)) ;\n}\nvoid dfs6(int u, int fa){\n    int j = 1, k ; o[++ res] = u ;\n    for (auto k : son[u]) dfs6(k, u) ;\n}\nint main(){\n    cin >> n >> m ; int i, u, v ;\n    memset(ans, 63, sizeof(ans)) ;\n    for (i = 1 ; i <= m ; ++ i)\n        u = qr(), v = qr(), add(u, v) ;\n    if (m == n - 1){}\n    else {\n        dfs3(1, 0) ; tot -- ;\n        swap(loop_s, loop_f) ;\n        if (base[1] == loop_s)\n             loop_c = base[tot] ;\n        else loop_c = base[1] ; dfs4(1, 0) ;\n\t\tdfs5(1, 0) ;\n        for (i = 1 ; i <= n ; ++ i)\n            sort(son[i].begin(), son[i].end()) ;\n        dfs6(1, 0) ; memcpy(ans, o, sizeof(o)) ;\n    }\n    for (i = 1 ; i <= n ; ++ i)\n       printf(\"%d \", ans[i]) ; return 0 ;\n}\n\n```",
        "postTime": 1589329687,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "LGP5049 \u65c5\u884c(\u52a0\u5f3a\u7248)"
    },
    {
        "content": "~~\u88ab\u8fd9\u9053\u9898\u5361\u4e86\u597d\u4e45\u4e86\uff0c\u4eca\u5929\u5c31\u6765\u6c34\u4e00\u53d1\u9898\u89e3~~\n\nA\u4e86\u8fd9\u9898\u6ce5\u5c31\u4e00\u5b9a\u53ef\u4ee5\u53bb\u505a[P5022](https://www.luogu.org/problem/P5022)\u8fa3\n\n### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u4f60\u53ef\u4ee5\u4ece\u4efb\u610f\u70b9\u5f00\u59cb\uff0c\u6309\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u904d\u53861~n\uff1a``\u6cbf\u7740\u7b2c\u4e00\u6b21\u5230\u8fbe\u8be5\u70b9\u7684\u8fb9\u8fdb\u884c\u56de\u6eaf``\uff08\u5f53\u7136\u8d77\u70b9\u662f\u4e0d\u80fd\u56de\u6eaf\u7684\uff09\uff08\u4ee5\u4e0b\u79f0\u4f5c**Way1**\uff09\u6216\u8005``\u6cbf\u7740\u76f8\u8fde\u7684\u4e00\u6761\u8fb9\u5230\u8fbe\u4e00\u4e2a\u672a\u5230\u8fbe\u8fc7\u7684\u70b9``\uff08\u4ee5\u4e0b\u79f0\u4f5c**Way2**\uff09\uff0c\u4f60\u8981\u4f7f\u5f97\u904d\u5386\u5e8f\u5217\u7684\u5b57\u5178\u5e8f\u5c3d\u91cf\u5c0f\n\n### \u601d\u8def&\u4ee3\u7801\n\n\u672c\u849f\u84bb\u5728\u8fd9\u91cc\u603b\u7ed3\u4e86\u51e0\u4e2adalao\u7684\u60f3\u6cd5\uff0c\u90a3\u4e48\u6211\u4eec\u5148\u4ece\u6700\u7b80\u5355\u7684\u8bf4\u8d77\n\n\u9996\u5148\u6211\u4eec\u89c2\u5bdf\u4e00\u4e0b\u6570\u636e\u8303\u56f4n\uff08\u70b9\u6570\uff09\u4e0em\uff08\u8fb9\u6570\uff09\u7684\u5173\u7cfb\uff0c\u53ea\u6709\u4e24\u79cd\uff1a\n\n**Case 1** ``n=m+1``\n\n> \u8fd9\u662f\u4e00\u68f5\u6811\n>\n\n**Case 2** ``n=m``\n\n> \u76f8\u5f53\u4e8e\u5728\u4e00\u68f5\u6811\u4e0a\u52a0\u4e86\u4e00\u6761\u8fb9\n>\n\n***\n**Step 1**\n\n\u5148\u6765\u8bb2\u4e00\u8bb2\u6211\u6700\u5f00\u59cb\u7684\u601d\u8def\uff0c\u76f8\u4fe1\u8fd9\u79cd\u6700\u7b80\u5355\u7684\u601d\u8def\u5f88\u597d\u60f3\u5230\n\n**Case2**\u768440pts\u4e0d\u592a\u597d\u5904\u7406\uff0c~~\u6240\u4ee5\u6211\u8f93\u51fa\u4e86WTCL~~\n\n\u6240\u4ee5\u8fd9\u91cc\u5c31\u5148\u53ea\u8003\u8651\u7ed9\u5b9a\u7684\u56fe\u662f\u4e00\u68f5\u6811\u7684\u60c5\u5f62\n\n\u753b\u4e2a\u56fe\u6a21\u62df\u4e00\u4e0b\u5c31\u80fd\u660e\u767d\uff0c\u53ea\u6709\u5c06\u4e00\u4e2a\u70b9\u7684\u6240\u6709\u5b50\u5b59\u904d\u5386\u5b8c\u4e86\u624d\u80fd\u56de\u6eaf\n\n\u8fd9\u662f\u56e0\u4e3a\u5f53\u4f60\u56de\u6eaf\u8fc7\u540e\uff0c\u56de\u6eaf\u8fc7\u7684\u8fd9\u6761\u8fb9\u5c31\u65ad\u5f00\u4e86\uff0c\u4e0b\u9762\u5c0f\u5c0f\u7684\u8bc1\u660e\u4e00\u4e0b\n\n```\n\u5df2\u77e5\uff1a\u7b2c\u4e00\u6b21\u5230\u8fbey\u8282\u70b9\u7684\u8fb9\u4e3ax->y\u3002\n\u6c42\u8bc1\uff1a\u5f53y\u8282\u70b9\u6cbf\u8fb9y->x\u56de\u6eaf\u540e\u8fd9\u6761\u8fb9\u4e0d\u4f1a\u88ab\u7ecf\u8fc7\n\n\u8bc1\u660e\u5982\u4e0b\uff1a\n\u5982\u679c\u5230\u8fbe\u4e86y\u70b9\uff0c\u90a3\u4e48\u8bf4\u660ex\u3001y\u5747\u5df2\u904d\u5386\n\n\u90a3\u4e48\u4fbf\u4e0d\u80fd\u4ee5Way2\u5f62\u5f0f\u7ecf\u8fc7x<->y\u8fd9\u6761\u8fb9\n\n\u552f\u4e00\u53ef\u80fd\u6027\u662f\u4ecex\u70b9\u518d\u6b21\u5230\u8fbey\u70b9\u5e76\u5728y\u70b9\u4ee5Way1\u65b9\u5f0f\u56de\u6eaf\n\n\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u5b58\u5728\u53e6\u4e00\u6761\u8def\u5f84\u53ef\u4ee5\u4ecex\u5230y\n\n\u8fd9\u4e0e\u7ed9\u5b9a\u7684\u56fe\u662f\u4e00\u68f5\u6811\u77db\u76fe\uff0cQ.E.D\n```\n\n\u5c31\u662f\u8bf4\u8fd9\u91cc\u95ee\u9898\u5c31\u53d8\u6210\u4e86dfs\uff0c\u4e0d\u8fc7\u5728\u4e8e\u904d\u5386\u5b50\u8282\u70b9\u7684\u987a\u5e8f\n\n\u4e3a\u4e86\u4f7f\u5f97\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u5f53\u7136\u5148\u904d\u5386\u7f16\u53f7\u5c0f\u7684\u513f\u5b50\n\n\u8fd9\u91cc\u91c7\u7528``vector``\u5b58\u5165\u5b50\u8282\u70b9\uff0c\u5728dfs\u4e4b\u524d\u5c06\u513f\u5b50\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\u5148\u5e8f\u904d\u5386\n\n\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6$O(n^2logn)$\n\n\u5176\u5b9e\u4f18\u5316\u6392\u5e8f\u540e\u662f\u53ef\u4ee5\u4f18\u5316\u5230$O(mlogm)$\u7684\uff0c\u5177\u4f53\u600e\u4e48\u505a\u5728\u6700\u540e\u4e00\u6b65\u8bb2\n\n~~\u5927\u4f6c\u8bf4\u53ef\u4ee5$O(n)$\u5efa\u56fe~~\n\n\u8d34\u4e00\u6ce2\u4ee3\u7801\uff1a\n```cpp\n#pragma GCC optimize(1)\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#include <queue>\n#include <vector>\n#include <cstdio>\n#include <cstdlib>\n#include <cctype>\n#include <algorithm>\n#define N 10001\n#define rnt register int\nusing namespace std;\nstruct node{\n\tint fr,to,nxt;\n\tnode(int F,int T,int NN):fr(F),to(T),nxt(NN){}\n\tnode(){}\n} e[N];\nbool vis[N];\nvector <int> son[N];\npriority_queue <int> Q;\nint n,m,x,y,cnt,d[N],fa[N],come[N],head[N];\ninline char my_getchar(){\n    static char buf[2048];\n    static int size=0,pos=0;\n    if(size==pos){\n        pos=0;\n        size=fread(buf,1,2048,stdin);\n        if(!size) return EOF;\n        else return buf[pos++];\n    }\n    else return buf[pos++];\n}\ninline int FR(){//fast_read\n    int ans=0,fh=0;\n    char c=my_getchar();\n    while(!isdigit(c)){\n        fh|=c=='-';\n        c=my_getchar();\n    }\n    while(isdigit(c)) ans=(ans<<1)+(ans<<3)+(c^48),c=my_getchar();\n    return fh?-ans:ans;\n}\ninline void ins(int a,int b){\n\te[++cnt]=node(a,b,head[a]);\n\thead[a]=cnt;\n}\nvoid dfs1(int cur,int pre){\n\tfa[cur]=pre;\n\tfor(rnt i=head[cur];i;i=e[i].nxt) if(e[i].to!=pre){\n\t\tson[cur].push_back(e[i].to);\n\t\tdfs1(e[i].to,cur);\n\t}\n}\nvoid dfs2(int x){\n\td[++d[0]]=x;\n\tsort(son[x].begin(),son[x].end());\n\tfor(rnt i=0;i<(int)son[x].size();i=-~i) dfs2(son[x][i]);\n}\nint main(){\n\tn=FR(),m=FR();\n\tfor(rnt i=1;i<=m;i=-~i){\n\t\tx=FR(),y=FR();\n\t\tins(x,y);ins(y,x);\n\t}\n\tif(m==n-1){\n\t\tdfs1(1,-1);\n\t\tdfs2(1);\n\t\tfor(rnt i=1;i<=d[0];i=-~i) printf(\"%d \",d[i]);\n\t}\n\telse printf(\"WTCL\");\n\treturn 0;\n}\n```\n***\n**Step 2**\n\n\u63a5\u4e0b\u6765\u5c31\u6765\u8bb2\u600e\u4e48\u5904\u7406\u5269\u4f5940pts\n\n\u524d\u9762\u8bf4\u5230\u8fd9\u91cc\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u6811\u52a0\u4e00\u6761\u8fb9\uff0c\u5b9e\u9645\u4e0a\u8fd9\u79cdn=m\u7684\u56fe\u662f\u6709\u540d\u5b57\u7684\uff1a**\u57fa\u73af\u6811**\n\n\u7531\u4e8e\u57fa\u73af\u6811\u662f\u5728\u6811\u4e0a\u53ea\u52a0\u4e00\u6761\u8fb9\uff0c\u6240\u4ee5\u53ea\u6709\u4e00\u4e2a\u73af\n\n\u57fa\u73af\u6811\u7684\u6027\u8d28\u6211\u7559\u5230\u6700\u540e\uff0c\u5148\u4ecb\u7ecd\u4e00\u79cd\u6bd4\u8f83\u66b4\u7684\u7b97\u6cd5\uff1a\u5220\u8fb9\n\n\u7ec6\u5fc3\u7684\u5c0f\u4f19\u4f34\u4eec\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\uff1a\u73af\u4e0a\u4e00\u5b9a\u6709\u4e00\u6761\u8fb9\u672a\u7ecf\u8fc7\n\n\u8fd9\u662f\u56e0\u4e3a\u73af\u4e0a\u7684\u70b9\u662f\u6cbf\u4e00\u4e2a\u65b9\u5411\u62d3\u5c55\u7684\uff08\u5982\u679c\u6709\u56de\u6eaf\u4e5f\u53ea\u662f\u53cd\u5411\u4e86\uff09\uff0c\u4e0d\u53ef\u80fd\u8df3\u8fc7\u4e00\u4e9b\u672a\u8bbf\u95ee\u7684\u70b9\uff0c\u56e0\u4e3a\u5982\u679c\u662f\u8fd9\u6837\u5c31\u8bf4\u660e\u4e0d\u6b62\u4e00\u4e2a\u73af\uff0c\u53c8\u4e0e\u9898\u76ee\u77db\u76fe\u4e86\n\n\u6240\u4ee5\u5982\u679c\u73af\u4e0a\u7684\u6bcf\u6761\u8fb9\u90fd\u7ecf\u8fc7\u4e86\uff0c\u5fc5\u7136\u662f\u4e00\u4e2a\u70b9\u6cbf\u7740\u4e0e\u7b2c\u4e00\u6b21\u5230\u8fbe\u8be5\u70b9\u7684\u8fb9\u4e0d\u91cd\u5408\u7684\u8fb9\u5230\u8fbe\u4e86\u4e00\u4e2a\u5230\u8fbe\u8fc7\u7684\u70b9\uff0c\u4e0e**Way2**\u77db\u76fe\n\n\u53ef\u80fd\u8fd9\u4e48\u8bf4\u6709\u70b9\u7ed5\uff0c\u90a3\u4e48\u4e0d\u59a8\u8fd9\u4e48\u7406\u89e3\n\n\u5047\u8bbe\u73af\u4e0a\u6240\u6709\u8fb9\u90fd\u88ab\u7ecf\u8fc7\uff0c\u8bbe\u6700\u540e\u4e00\u6761\u7ecf\u8fc7\u7684\u8fb9\u662fx<->y\uff0c\u4ecex\u51fa\u53d1\uff0c\n\n\u8fd9\u6761\u8fb9\u663e\u7136\u4e0d\u662f\u7b2c\u4e00\u6b21\u5230\u8fbex\u7684\u8fb9\uff0c\u4e0d\u80fd\u5229\u7528**Way1**\u56de\u6eaf\u81f3y\n\n\u800cy\u4e00\u5b9a\u88ab\u5230\u8fbe\u8fc7\uff08y\u5728\u73af\u4e0a\uff0c\u90a3\u4e48\u73af\u4e0a\u6709\u4e24\u6761\u8fb9\u4e0ey\u76f8\u8fde\uff0c\u5982\u679cy\u672a\u5230\u8fbe\uff0c\u5219x<->y\u4e0d\u662f\u73af\u4e0a\u6700\u540e\u4e00\u6761\u8fb9\uff0cy<->?\u4e5f\u6ca1\u7ecf\u8fc7\uff09\n\n\u6240\u4ee5\u4e5f\u4e0d\u80fd\u7528**Way2**\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\n\n\u5373\uff1a\u73af\u4e0a\u4e00\u5b9a\u6709\u4e00\u6761\u8fb9\u6ca1\u6709\u88ab\u7ecf\u8fc7\n\n\u6240\u4ee5\u6211\u4eec\u8981\u8fd9\u6761\u8fb9\u5e72\u5565\uff1f\u5220\u4e86\u554a\uff01\n\n\u7136\u540e--m.....\n\nn=m-1\n\n\u95ee\u9898\u53c8\u8f6c\u5316\u4e3a\u4e86**Case1**\uff0c\u5feb\u4e50\uff01\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5148\u627e\u51fa\u73af\uff08\u6211\u7528\u7684\u662ftopsort\uff09\uff0c\u7136\u540e\u679a\u4e3e\u73af\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u5220\u6389\uff0c\u66f4\u65b0\u7b54\u6848\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nmlogn)$\uff0c\u5927\u6982\u8fd8\u662f\u8fc7\u4e0d\u4e86\n\n\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f18\u5316\u5efa\u56fe\uff0c\u5361\u4e2a\u5e38\uff0c\u5f00\u4e2a$O_2$\uff0c\u5c31\u80fd\u8fc7\u4e86\u3002\u3002\u3002\n\n\u867d\u7136\u6211\u5931\u8d25\u4e86\uff0c\u4f46\u662f\u65e0\u6570\u5927\u4f6c\u8bc1\u660e\u8fd9\u662f\u53ef\u4ee5\u8fc7\u7684\n\n\u8d34\u4e00\u4e0b\u6211\u4e11\u964b\u7684\u4ee3\u7801:\n```cpp\n#include <queue>\n#include <vector>\n#include <cctype>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#define N 10001\n#define rnt register int\nusing namespace std;\nstruct node{\n\tint fr,to,nxt;\n\tnode(int F,int T,int NN):fr(F),to(T),nxt(NN){}\n\tnode(){}\n} e[N];\nvector <int> son[N];\npriority_queue <int> Q;\nbool vis[N],notin[N],saw[N],dfn[N],canari[N][N];\nint n,m,x,y,cnt,d[N],fa[N],ind[N],res[N],come[N],head[N];\ninline char my_getchar(){\n    static char buf[2048];\n    static int size=0,pos=0;\n    if(size==pos){\n        pos=0;\n        size=fread(buf,1,2048,stdin);\n        if(!size) return EOF;\n        else return buf[pos++];\n    }\n    else return buf[pos++];\n}\ninline int FR(){//fast_read\n    int ans=0,fh=0;\n    char c=my_getchar();\n    while(!isdigit(c)){\n        fh|=c=='-';\n        c=my_getchar();\n    }\n    while(isdigit(c)) ans=(ans<<1)+(ans<<3)+(c^48),c=my_getchar();\n    return fh?-ans:ans;\n}\ninline void ins(int a,int b,int op){\n\tif(op==0){\n\t\t++cnt;\n\t\te[cnt]=node(a,b,head[a]);\n\t\thead[a]=cnt;\n\t}\n\telse{\n\t\tcnt=cnt+m;\n\t\te[cnt]=node(a,b,head[a]);\n\t\thead[a]=cnt;\n\t\tcnt-=m;\n\t}\n}\nvoid dfs(int id){\n\tres[++res[0]]=id;dfn[id]=true;\n\tfor(rnt i=1;i<=n;i=-~i) if(canari[id][i] && !dfn[i]) dfs(i);\n\tdfn[id]=false;\n}\nvoid dfs1(int cur,int pre){\n\tfa[cur]=pre;\n\tfor(rnt i=head[cur];i;i=e[i].nxt) if(e[i].to!=pre){\n\t\tson[cur].push_back(e[i].to);\n\t\tdfs1(e[i].to,cur);\n\t}\n}\nvoid dfs2(int x){\n\td[++d[0]]=x;\n\tfor(rnt i=0;i<(int)son[x].size();i=-~i) dfs2(son[x][i]);\n}\ninline void Topsort(){\n\tqueue <int> QQ;\n\tfor(rnt i=1;i<=m;i=-~i) ++ind[e[i].fr],++ind[e[i].to];\n\tfor(rnt i=1;i<=n;i=-~i) if(ind[i]==1){notin[i]=true;QQ.push(i);}\n\twhile(!QQ.empty()){\n\t\tint u=QQ.front();\n\t\tQQ.pop();\n\t\tfor(rnt i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].to;\n\t\t\tif(--ind[v]==1){notin[v]=true;QQ.push(v);}\n\t\t}\n\t}\n}\ninline void update(){\n\tif(!d[0]) memcpy(d,res,sizeof(res));\n\telse{\n\t\tbool flag=false;\n\t\tfor(rnt i=1;i<=d[0];i=-~i){\n\t\t\tif(!flag && d[i]<res[i]) break;\n\t\t\telse if(flag) d[i]=res[i];\n\t\t\tif(d[i]>res[i]) flag=true,d[i]=res[i];\n\t\t}\n\t}\n}\nint main(){\n\tn=FR(),m=FR();\n\tfor(rnt i=1;i<=m;i=-~i){\n\t\tx=FR(),y=FR();\n\t\tins(x,y,0);ins(y,x,1);\n\t}\n\tif(m==n-1){\n\t\tdfs1(1,-1);\n\t\tfor(rnt i=1;i<=n;i=-~i) sort(son[i].begin(),son[i].end());\n\t\tdfs2(1);\n\t}\n\telse{\n\t\tTopsort();\n\t\tfor(rnt i=1;i<=m;i=-~i){\n\t\t\tint xx=e[i].fr,yy=e[i].to;\n\t\t\tcanari[xx][yy]=canari[yy][xx]=true;\n\t\t}\n\t\tfor(rnt i=1;i<=m;i=-~i){\n\t\t\tint xx=e[i].fr,yy=e[i].to;\n\t\t\tif(notin[xx] || notin[yy]) continue;\n\t\t\tcanari[xx][yy]=canari[yy][xx]=false;\n\t\t\tres[0]=0;\n\t\t\tdfs(1);\n\t\t\tupdate();\n\t\t\tcanari[xx][yy]=canari[yy][xx]=true;\n\t\t}\n\t}\n\tfor(rnt i=1;i<=d[0];i=-~i) printf(\"%d \",d[i]);\n\treturn 0;\n}\n```\n\n***\n**Step3**\n\n\n\u5176\u5b9e\u9898\u89e3\u91cc\u6709\u582a\u79f0\u5b8c\u7f8e\u7684\u89e3\u6cd5\uff0c\u8fd9\u91cc\u5c31\u7a0d\u5fae\u8865\u5145\u4e00\u4e0b\n\n\u9996\u5148\u662f\u5bf9\u4e8e\u5efa\u8fb9\u7684\u4f18\u5316$O(mlogm)$\n\n\u8bfb\u5165\u65f6\u5148\u9884\u5b58\u6bcf\u4e00\u6761\u8fb9\uff08\u5355\u5411\uff0cx->y\u3001y->x\uff09\uff0c\u7136\u540e\u6309\u6307\u5411\u7684\u70b9\u7684\u7f16\u53f7\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6700\u540e\u6309\u7167\u987a\u5e8f\u524d\u5411\u661f\u5b58\u8fb9\uff08\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5728\u7528\u524d\u5411\u661f\u65f6\u904d\u5386\u5230\u7684\u8282\u70b9\u662f\u4ece\u5c0f\u5230\u5927\u7684\uff09\n\n\u7136\u540e\u5c31\u662f\u600e\u4e48\u8dd1\u5f97\u66f4\u5feb\u4e86\n\n\u9996\u5148\u660e\u786e\u8fd9\u9053\u9898\u662f\u5b58\u5728\u8d2a\u5fc3\u601d\u60f3\u7684\n\n\u5f53\u4f60\u8981\u9009\u62e9\u4e0b\u4e00\u4e2a\u904d\u5386\u7684\u70b9\u65f6\uff0c\u80af\u5b9a\u662f\u5728\u53ef\u884c\u8303\u56f4\u5185\u5bfb\u627e\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\n\n\u800c\u4e14\u5728\u73af\u4e0a\u6700\u591a\u56de\u6eaf\u4e24\u6b21\n\n\u8fd9\u662f\u56e0\u4e3a\u5728\u73af\u4e0a\u65f6\u4e00\u4e2a\u70b9\u8fde\u7740\u4e24\u6761\u8fb9\uff0c\u5f53\u4f60\u7b2c\u4e8c\u6b21\u56de\u6eaf\u540e\u5230\u8fbe\u7b2c\u4e00\u6b21\u8fdb\u5165\u73af\u7684\u70b9\u65f6\uff0c\u5b83\u7684\u4e24\u6761\u8fb9\u8fde\u63a5\u7684\u70b9\u90fd\u8d70\u8fc7\u4e86\uff0c\u5c31\u4e0d\u80fd\u63a5\u7740\u904d\u5386\u73af\u4e86\uff0c\u56e0\u800c\u4e5f\u5c31\u4e0d\u4f1a\u51fa\u73b0\u4e09\u6b21\u56de\u6eaf\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u4e8c\u6b21\u56de\u6eaf\uff0c\u73af\u4e0a\u7684\u70b9\u5c31\u5df2\u7ecf\u904d\u5386\u5b8c\u6210\u4e86\n\n\u8fd9\u91cc\u8fd8\u8981\u5c0f\u5c0f\u8865\u5145\u4e00\u4e0b**\u57fa\u73af\u6811**\n\n\u987e\u540d\u601d\u4e49\uff0c\u57fa\u73af\u6811\u5c31\u662f\u6307\u4ee5\u4e00\u4e2a\u73af\u4e3a\u57fa\u7840\u7684\u6811\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u57fa\u73af\u6811\u662f\u6307``\u5c06\u82e5\u5e72\u68f5\u65e0\u5411\u7684\u6811\u7684\u6839\u8282\u70b9\u4f9d\u6b21\u8fde\u63a5\u6210\u73af\u5f62\u6210\u7684\u56fe\u5f62``\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u73af\u4e0a\u7684\u6bcf\u4e2a\u70b9\u90fd\u53ef\u4ee5\u770b\u505a\u662f\u6811\u6839\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6811\u5229\u7528**Step1**\u7684\u505a\u6cd5\u5373\u53ef\uff0c\u91cd\u70b9\u8fd8\u662f\u5728\u4e8e\u73af\n\n\u4e4b\u524d\u8bb2\u5230\u8fc7\uff0c\u5bf9\u4e8e\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5728\u904d\u5386\u5b8c\u5b83\u7684\u5b50\u5b59\u4e4b\u524d\u662f\u4e0d\u80fd\u56de\u6eaf\u7684\uff0c\u4e0d\u8fc7\u7531\u4e8e**Case2**\u4e2d\u6839\u8282\u70b9\u4f4d\u4e8e\u73af\u4e0a\uff0c\u53ef\u4ee5\u6682\u65f6\u4e0d\u904d\u5386\u5b83\u7684\u5b50\u5b59\n\n\u6211\u518d\u7528\u5b57\u6bcd\u91cd\u65b0\u53d9\u8ff0\u4e00\u4e0b\n\n\u5bf9\u4e8e\u73af\u4e0a\u7684\u70b9x\uff0c\u5047\u8bbe\u4e0e\u5b83\u76f8\u8fde\u7684\u70b9\u4e2d\uff0c\u7f16\u53f7\u6700\u5c0f\u7684\u4e3ay\n\n\u5982\u679cy\u5728\u73af\u4e0a\uff0c\u5c31x->y\uff0c\u5728\u7279\u5b9a\u6761\u4ef6\u4e0b\u56de\u6eaf\u5230x\u65f6\u518d\u904d\u5386x\u7684\u5176\u5b83\u76f8\u8fde\u70b9\n\n\u5982\u679cy\u4e0d\u5728\u73af\u4e0a\uff0c\u904d\u5386\u5b83\u4ee5\u53ca\u5b83\u7684\u5b50\u5b59\uff0c\u7136\u540e\u5c06y\u4fee\u6539\u4e3a\u4e0ex\u76f8\u8fde\u7684\u6b21\u5c0f\u503c\n\n\u4e3e\u4e2a\u6817\u5b50\u5927\u5bb6\u7406\u89e3\u4e00\u4e0b\uff08\u5c31\u662f\u6837\u4f8b2\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/grhyxkjv.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u9996\u5148\u80af\u5b9a\u4ece1\u5f00\u59cb\uff0c\uff08\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4ece1\u5f00\u59cb\u4e00\u5b9a\u53ef\u4ee5\u904d\u5386\u6574\u68f5\u57fa\u73af\u6811\uff1f\uff09\n\n\u7136\u540e\u8d70\u52303 $ans[]={1,3}$\n\n\u4e0e3\u76f8\u8fde\u7684\u70b9\u67092\u30014\uff0c\u8d2a\u5fc3\u9009\u62e92 $ans[]={1,3,2}$\n\n2\u53ea\u80fd\u8d70\u52305 $ans[]={1,3,2,5}$\n\n5\u53ea\u80fd\u8d70\u52304 $ans[]={1,3,2,5,4}$\n\n\u6700\u540e\u52306 $ans[]={1,3,2,5,4,6}$\n\n\u8fd9\u5c31\u662f\u6700\u57fa\u672c\u7684\u601d\u8def\n\n\u518d\u4e3e\u4e00\u4e2a\u590d\u6742\u4e00\u70b9\u7684\u4f8b\u5b50\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/1b11yqhd.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u8fd8\u662f\u4ece1\u5f00\u59cb $ans[]={1}$\n\n\u53ea\u80fd\u8d70\u52302 $ans[]={1,2}$\n\n\u4e0e2\u76f8\u8fde\u7684\u67094\u300112\uff0c\u8d2a\u5fc3\u9009\u62e94 $ans[]={1,2,4}$\n\n\u4e0e4\u76f8\u8fde\u7684\u7684\u67095\u300111\uff0c\u8d2a\u5fc3\u9009\u62e95 $ans[]={1,2,4,5}$\n\n\u8fd9\u65f6\u6807\u8bb0$last=11$\uff0clast\u8bb0\u4e0b\u4e86\u4e0b\u4e00\u6b21\u5982\u679c\u56de\u6eaf\u5c06\u9047\u523011\uff0c\u90a3\u4e48\u6bcf\u6b21\u62d3\u5c55\u65f6last\u4e5f\u53ef\u4ee5\u770b\u505a\u662f\u4e0e\u5f53\u524d\u70b9\u76f8\u8fde\n\n\u5e76\u4e14\u5c06\u6240\u6709\u8fd9\u6837\u672a\u8bbf\u95ee\u7684\u70b9\u52a0\u5165\u5806\uff0c\u8fd9\u65f6\u56e0\u4e3a\u4e00\u65e6\u56de\u6eaf\uff0c\u9014\u5f84\u7684\u73af\u4e0a\u70b9\u76f8\u8fde\u7684\u6240\u6709\u70b9\uff08\u5c31\u662f\u8fd9\u68f5\u6811\uff09\u5fc5\u987b\u8981\u88ab\u8bbf\u95ee\u5b8c\uff0c\u5426\u5219\u5c06\u65e0\u6cd5\u88ab\u8bbf\u95ee\uff0c\n\n\u6240\u4ee5\u6b64\u65f6\u5bf9\u4e8e\u5806\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u8fdb\u884cdfs\n\n\u90a3\u4e48\u73b0\u5728\u7684\u72b6\u6001\u662f $ans={1,2,4,5};last=11;stack[]={11}$\n\n\u4e0e5\u76f8\u8fde\u7684\u70b9\u67093\u30016\u30017\u300111\uff0c\u8d2a\u5fc3\u9009\u62e93 $ans[]={1,2,4,5,3};last=11,stack[]={11}$\n\n\u7531\u4e8e3\u4e0d\u5728\u73af\u4e0a\uff0c\u56de\u6eaf\u81f3\u73af\u4e0a\u7684\u70b95\uff0c\u8fd8\u5269\u4e0b\u76f8\u8fde\u7684\u70b9\u67096\u30017\u300111\n\n\u540c\u7406\u8bbf\u95ee6\uff0c\u5e76\u56de\u6eaf\u81f35\uff0c\u5269\u4f597\u300111 $ans[]={1,2,4,5,3,6};last=11,stack[]={11}$\n\n\u8bbf\u95ee7,7\u5728\u73af\u4e0a $ans[]={1,2,4,3,5,6,7};last=11,stack[]={11}$\n\n\u76f8\u8fde\u7684\u70b9\u67099\u300111\u300112 $ans[]={1,2,4,3,5,6,7,9};last=11;stack[]={11}$\n\n\u8bbf\u95ee9\uff0c\u524d\u9762\u5df2\u7ecf\u8bb2\u8fc7\uff0c\u8bbf\u95ee\u4e869\uff0c\u5c31\u5fc5\u987b\u8bbf\u95ee\u5b83\u7684\u5b50\u5b59 $ans[]={1,2,4,3,5,6,7,9,13};last=11;satck[]={11}$\n\n\u7136\u540e\u8bbf\u95eelast=11\uff0c\u7531\u4e8e\u8bbf\u95ee\u4e86last\uff0c\u76f8\u5f53\u4e8e\u56de\u6eaf\u4e86\uff0c\u6240\u4ee5\u5bf9\u4e8estack\u4e2d\u7684\u6240\u6709\u5143\u7d20\u4f9d\u6b21dfs\uff0c\u5f97\u5230$ans[]={1,2,4,3,5,6,7,9,11,8};stack[]={EMPTY}$\n\nlast\u88ab\u8bbf\u95ee\u540e\uff0c\u5c31\u5e94\u88ab\u6e05\u4e3a\u6b63\u65e0\u7a77\uff0c\u4e00\u9762\u4e0d\u5fc5\u8981\u7684\u56de\u6eaf\n\n\u56de\u6eaf\u81f31\uff0c\u8bbf\u95ee12\u300110 $ans[]={1,2,4,3,5,6,7,9,11,8,12,10}$\n\n\u6700\u540e\u603b\u7ed3\u4e00\u4e0b\n\n\u9996\u5148\u4ece1\u5f00\u59cbdfs\uff0c\u76f4\u5230\u627e\u5230\u73af\u4e0a\u7684\u70b9\uff0c\u5982\u679c\u6700\u5c0f\u70b9\u4e0d\u5728\u73af\u4e0adfs\uff0c\uff08\u5982\u679c\u56de\u6eaf\u83b7\u5f97\u6700\u5c0f\u70b9\u5c31\u56de\u6eaf\uff0c\u5e76\u4e14\u6e05\u7a7astack\uff08\u7528\u4e8e\u5b58\u50a8\u7b49\u5f85\u904d\u5386\u7684\u70b9\uff09\uff09\uff0c\u5e76\u6539\u4e3a\u627e\u6b21\u5c0f\u70b9\uff0c\u5982\u679c\u5728\u73af\u4e0a\u5c31\u628a\u5269\u4f59\u7684\u70b9\u5165\u6808\uff0c\u5e76\u5728\u73af\u4e0a\u62d3\u5c55\n\n\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e9b\u7ec6\u8282\uff1a\n\n1.\u7531\u4e8e\u5165\u6808\u65f6\u662f\u4ece\u5c0f\u5230\u5927\u904d\u5386\u7684\uff0c\u51fa\u6808\u5c31\u53d8\u6210\u4e86\u4ece\u5927\u5230\u5c0f\uff0c\u6240\u4ee5\u8981\u5728\u6bcf\u4e00\u4e2a\u73af\u4e0a\u7684\u70b9\u7684\u6240\u6709\u9700\u8981\u5165\u6808\u7684\u70b9\u5165\u6808\u540e\uff0c\u518d\u628a\u6808\u4e2d\u6240\u6709\u70b9\u79fb\u5165\u53e6\u4e00\u4e2a\u6808\n\n\u8fd9\u4e48\u505a\u8fd8\u6709\u53e6\u4e00\u4e2a\u539f\u56e0\uff1a\u90a3\u5c31\u662f\u540e\u904d\u5386\u5230\u7684\u73af\u4e0a\u70b9\u5728\u56de\u6eaf\u65f6\u4f1a\u5148\u88ab\u904d\u5386\uff0c\u6240\u4ee5\u5f00\u4e24\u4e2a\u6808\u5c31\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\n\n2.\u5728\u627e\u4e0e\u5176\u76f8\u8fde\u7684\u6700\u5c0f\u503c\u662f\u53ef\u4ee5\u6253\u4e00\u4e2a\u6807\u8bb0\uff0c\u8868\u793a\u662f\u5426\u627e\u5230\u5728\u73af\u4e0a\u7684\u70b9\uff0c\u90a3\u4e48\u5728\u8fd9\u4e4b\u540e\u904d\u5386\u5230\u7684\u4e00\u5b9a\u90fd\u6bd4\u73af\u4e0a\u8fd9\u4e2a\u70b9\u7f16\u53f7\u5927\uff0c\u53ef\u4ee5\u76f4\u63a5\u5165\u6808\n\n3.\u6bcf\u4e2a\u73af\u4e0a\u70b9\u7684\u76f8\u8fde\u70b9\u904d\u5386\u5b8c\u540e\u8981\u5224\u65ad\u662f\u5426\u56de\u6eaf\uff0c\u5982\u679c\u4e0d\u56de\u6eaf\u5c31\u8981\u628a\u5c0f\u6808\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u51fa\u6808\u5e76\u5165\u603b\u6808\n\n\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\n\n```cpp\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#define N 10001\n#define rnt register int\nusing namespace std;\nqueue <int> Q;\nstack <int> S1,S2;\nbool found,nir[N]/*Not In the Ring*/,vis[N]/*Visited*/;\nint n,m,x,y,cnt,rl/*Ring Last*/=1<<30,rn/*Ring Next*/,ind[N],head[N];\nstruct Edge_pre{\n\tint x,y;\n\tEdge_pre(int X,int Y):x(X),y(Y){}\n\tEdge_pre(){}\n\tbool operator<(const Edge_pre&t)const{return y>t.y;}\n} e_pre[N*2]/*N*2 to avoid Unaccepted Error*/;\nstruct Edge{\n\tint to,nxt;\n\tEdge(int X,int Y):to(X),nxt(Y){}\n\tEdge(){}\n} e[N*2]/*N*2 to avoid Unaccepted Error*/;\ninline void ins(int x,int y){\n\te[++cnt]=Edge(y,head[x]);\n\thead[x]=cnt;\n}\ninline void Topsort(){\n\tfor(rnt i=1;i<=n;i=-~i) if(ind[i]==1) nir[i]=true,Q.push(i);\n\twhile(!Q.empty()){\n\t\tint u=Q.front();\n\t\tQ.pop();\n\t\tfor(rnt i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].to;\n\t\t\tif(nir[v]) continue;\n\t\t\tif(--ind[v]==1) nir[v]=true,Q.push(v);\n\t\t}\n\t}\n}\nvoid dfs(int x){\n\tif(!vis[x]) printf(\"%d \",x),vis[x]=true;\n\tfor(rnt i=head[x];i;i=e[i].nxt){\n\t\tint y=e[i].to;\n\t\tif(!vis[y]) dfs(y);\n\t}\n}\nvoid bfs(int x){\n\twhile(!Q.empty()) Q.pop();\n\tQ.push(x);\n\twhile(!Q.empty()){\n\t\tint u=Q.front();\n\t\tQ.pop();\n\t\tif(!vis[u]) printf(\"%d \",u),vis[u]=true;\n\t\trn=0;found=false;\n\t\tfor(rnt i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].to;\n\t\t\tif(vis[v]) continue;\n\t\t\tif(found) S2.push(v);\n\t\t\telse if(nir[v]) dfs(v);\n\t\t\telse rn=v,found=true;\n\t\t}\n\t\tif(rn){\n\t\t\tQ.push(rn);\n\t\t\tif(S2.empty()){\n\t\t\t\tif(rl<rn) while(!S1.empty())\n\t\t\t\t\tdfs(S1.top()),S1.pop();\n\t\t\t}\n\t\t\telse while(!S2.empty())\n\t\t\t\tS1.push(rl=S2.top()),S2.pop();\n\t\t}\n\t\telse while(!S1.empty())\n\t\t\tdfs(S1.top()),S1.pop();\n\t}\n}\nvoid WorkAt(int x){\n\tif(!nir[x]){bfs(x);dfs(x);}//If x is in the ring\n\telse{//else\n\t\tprintf(\"%d \",x);vis[x]=true;\n\t\tfor(rnt i=head[x];i;i=e[i].nxt){\n\t\t\tint y=e[i].to;\n\t\t\tif(!vis[y]) WorkAt(y);\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(rnt i=1;i<=m;i=-~i){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tind[x]=-~ind[x];\n\t\tind[y]=-~ind[y];\n\t\te_pre[i*2]=Edge_pre(x,y);\n\t\te_pre[i*2-1]=Edge_pre(y,x);\n\t}\n\tsort(e_pre+1,e_pre+2*m+1);//To run faster\n\tfor(rnt i=1;i<=2*m;i=-~i) ins(e_pre[i].x,e_pre[i].y);\n\tTopsort();//To get if each point is in the ring\n\tWorkAt(1);//Find the answer beginning with 1\n\treturn 0;\n}\n```\n\n\u5e94\u8be5\u8fd8\u662f\u5f88\u597d\u7406\u89e3\u7684\uff0c\u53e6\u5916\u7531\u4e8eWorkAt\u51fd\u6570\uff0c\u8fd9\u4efd\u4ee3\u7801\u8fd8\u53ef\u4ee5\u4e00\u5e76\u5904\u7406n=m+1\u7684\u60c5\u51b5\uff08\u56e0\u4e3a\u6ca1\u6709\u73af\u7684\u60c5\u51b5\u4e0b\u5b83\u5176\u5b9e\u5c31\u662fdfs\uff0c\u8fd9\u662f\u4e3a\u4e86\u4ece1\u5f00\u59cb\u800c\u6253\u7684\uff09\n\n\u65f6\u95f4\u590d\u6742\u5ea6\n\n\u8bfb\u5165$O(m)$\n\n\u5efa\u8fb9$O(mlogm)$\n\ntopsort\u627e\u73af$O(n)$\n\n\u7b54\u6848$O(n)$\n\n\u7efc\u5408$O(n+m+mlogm)$\n\n\u53ef\u4ee5\u8bf4\u662f\u975e\u5e38\u5feb\u4e86\n\n\u611f\u8c22\u6536\u770b\uff01\n\n[![](https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2921431843,3149119026&fm=26&gp=0.jpg)](https://www.luogu.org/blog/oneJURUO/)",
        "postTime": 1573436039,
        "uid": 118382,
        "name": "torque",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "# ~~**\u65c5\u884c\u52a0\u5f3a\u7248\u53ef\u4ee5\u7528vector\u63d2\u6392900ms\u5361\u8fc7**~~\n\n## **\u5f53$m=n-1$\u65f6**\n\n\u9996\u5148\u8bb2\u4e00\u4e0b$m=n-1$\u7684\u601d\u8def,\n\n\u6b64\u65f6\u8fd9\u4e2a\u56fe\u5c31\u662f\u4e00\u68f5\u6811\n\n\u6240\u4ee5\u56fe(\u6811)\u4e0a\u8def\u5f84\u662f\u552f\u4e00\u7684\n\n\u5148\u5efa\u4e00\u9897\u4ee5$1$\u4e3a\u6839\u7684\u6811\n\n\u9884\u5904\u7406\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u7684\u987a\u5e8f\uff0c\u53ef\u4ee5\u7528\u6570\u7ec4\u6392\u5e8f\uff0c\u4f46\u662f\u6bd5\u7adf\u662f\u52a0\u5f3a\u7248\u7684\u6570\u636e\uff0c\n\n\u6240\u4ee5\u53ef\u4ee5\u7528\u4f18\u5148\u961f\u5217\u5904\u7406\n\n\u4f18\u5148\u961f\u5217\u53ea\u7ef4\u62a4\u6700\u5c0f\u503c\uff0c\u8fd9\u4e0e\u6c42\u6700\u5c0f\u5b57\u5178\u5e8f\u7684\u57fa\u672c\u601d\u8def~~\u81ed\u5473\u76f8\u6295~~\u4e0d\u8c0b\u800c\u5408\n\n\u90a3\u4e48$60pts$\u5c31\u53ef\u4ee5\u8fd9\u4e48\u6253:\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\nusing namespace std;\nconst int N=5e5+1;\nint n,m,u,v;\nvector<int> g[N];\npriority_queue<int> q[N];\ninline int read(){\n\tint s=0;\n\tchar ch=getchar();\n\tfor(;!isdigit(ch);ch=getchar());\n\tfor(;isdigit(ch);ch=getchar())s=(s<<1)+(s<<3)+(ch^48);\n\treturn s;\n}\nvoid minson(int u,int fa){//\u5904\u7406\u6bcf\u4e2a\u8282\u70b9\u5b50\u8282\u70b9\u7684\u5f53\u524d\u6700\u5c0f\u5b50\u8282\u70b9\n\tfor(register int i=0;i<g[u].size();++i){\n\t\tint v=g[u][i];\n\t\tif(v==fa)continue;\n\t\tq[u].push(-v),minson(v,u);\n        \t//\u672c\u4eba\u5f88\u61d2\uff0c\u76f4\u63a5\u5b58\u76f8\u53cd\u6570\u8fbe\u5230\u5c0f\u6839\u5806\u7684\u6548\u679c\n\t}\n\treturn;\n}\nvoid dfs(int u){\n\tprintf(\"%d \",u);\n\tfor(;q[u].size();){//\u4ece1\u5f00\u59cb\u6bcf\u4e2a\u8282\u70b9\u90fd\u9009\u53d6\u6700\u5c0f\u7684\u5b50\u8282\u70b9,\u6ca1\u6709\u5c31\u8fd4\u56de\n\t\tint v=-q[u].top();\n\t\tq[u].pop();\n\t\tdfs(v);\n\t}\n\treturn;\n}\nint main(){\n\tn=read(),m=read();\n\tfor(register int i=1;i<=m;++i){\n\t\tu=read(),v=read();\n\t\tg[u].push_back(v);\n\t\tg[v].push_back(u);\n\t}\n\tminson(1,-1);\n\tdfs(1);\n\treturn 0;\n}\n```\n~~\u6109\u5feb\u306e\u9a97\u4e8660\u5206~~\n\n## \u672c\u9898\u91cd\u5fc3\u5c31\u5728\u6b64\uff0c~~\u524d\u9762\u90fd\u662f\u5e9f\u8bdd~~:\n\n# \u5f53$m=n$\u7684\u60c5\u51b5\n\n\u8fd9\u6837\u539f\u6765\u7684\u56fe\u4e0d\u518d\u662f\u4e00\u68f5\u6811\uff0c\u4e5f\u5c31\u662f\u8bf4\u8def\u5f84\u4e0d\u552f\u4e00\uff0c\u8fd9\u65f6\u6211\u4eec\u8981\u8003\u8651\u5176\u4ed6\u65b9\u6cd5\n\n\u901a\u8fc7\u624b\u73a9\u6570\u636e\u53ef\u4ee5\u5f97\u77e5\u8fd9$m$\u6761\u8fb9\u91cc\u53ea\u7528\u8d70$m-1$\u6761\u8fb9,\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e5f\u662f\u4e00\u68f5\u6811\n\n\u4f46\u662f\u8981\u5220\u53bb\u4e00\u6761\u8fb9\uff0c\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u5220\u8fb9\n\n\u7531\u4e8e$m=n$\u6240\u4ee5\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u73af,\u4e14\u53ea\u6709\u4e00\u4e2a(\u8bf7\u81ea\u884c\u4f53\u4f1a)\n\n\u90a3\u4e48\u6211\u4eec\u7684\u9996\u8981\u4efb\u52a1\u662f\u627e\u51fa\u8fd9\u4e2a\u73af\u5e76\u627e\u5230\u5165\u73af\u70b9\n\n\u636e\u8bf4\u8bb8\u591a\u795e\u7287\u548c\u5946\u4f6c\u90fd\u4f1a\u7528$tarjon$\u5224\u73af,\u8eab\u4e3a\u849f\u84bb\u7684\u6211\u6253\u4e86\u4e2a\u4e0d\u77e5\u9053\u4ec0\u4e48\u306e\u5224\u73af\n\n\u5224\u73af\u51fd\u6570:\n\n```cpp\n//\u4f7f\u7528\u65f6\u5148\u5c06\u6839\u8282\u70b91\u4f20\u5165\u5e76\u5c06vis[1]\u8bbe\u4e3atrue\nvoid circle(int u,int fa){\n\tfor(register int i=0;i<g[u].size();++i){\n\t\tint v=g[u][i];\n\t\tif(v==fa)continue;\n\t\tif(vis[v]){//\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u53bb\u8fc7\u4e86\u5219\u8bf4\u660e\u6574\u4e2a\u73af\u5df2\u7ecf\u88ab\u8d70\u4e86\u4e00\u904d\u4e86\n        \t\t//v\u5219\u4e3a\u5165\u73af\u70b9,\u5b58\u8fdbhuan\u6570\u7ec4\n\t\t\thuan[++p]=v;\n\t\t\thuan[++p]=u;\n\t\t\tinhuan[u]=inhuan[v]=true;\n\t\t\treturn;\n\t\t}\n\t\tvis[v]=true;\n\t\tcircle(v,u);\n\t\tif(ok)return;//\u73af\u5b58\u5b8c\u4e86\u76f4\u63a5\u8fd4\u56de\n\t\tif(p){//\u5982\u679c\u5b58\u5728\u73af\n\t\t\tif(u==huan[1]){//\u5982\u679c\u53c8\u56de\u5230\u4e86\u5165\u73af\u70b9\n\t\t\t\tphuan=fa;//\u8bb0\u5f55\u5165\u73af\u70b9\u7684\u7236\u8282\u70b9\n\t\t\t\tok=true;\n\t\t\t\treturn;\n\t\t\t}\n            \t\t//\u5728\u73af\u91cc\u5b58\u5165\u8fd9\u4e2a\u8282\u70b9\uff0c\u5e76\u76f4\u63a5\u8fd4\u56de\n\t\t\thuan[++p]=u;\n\t\t\tinhuan[u]=true;\n\t\t\treturn;\n\t\t}\n\t}\n\treturn;\n}\n```\n\n\u7136\u540e\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u73af\u7684\u7279\u70b9:\n\n~~\u5148\u5b89\u5229\u4e00\u6ce2\u975e\u5e38\u597d\u7528\u306e\u56fe\u8bba\u7f16\u8f91\u5668~~:\n\n[~~\u56fe\u8bba\u7f16\u8f91\u5668\u4f20\u9001\u95e8~~](https://csacademy.com/app/graph_editor/)\n\n$eg_1$:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/uluhgwqt.png?x-oss-process=image/resize,m_lfit,h_550,w_550)\n\n\u7531\u56fe\u53ef\u4ee5\u5f97\u77e5\u5165\u73af\u70b9\u4e3a$8$\n\n\u73af\u91cc\u6709$8,9,7,10,12,11,4$\u8fd9\u4e9b\u70b9\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u5bf9\u73af\u91cc\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6392\u5e8f\n\n\u8fd9\u4e9b\u5b50\u8282\u70b9\u4e0d\u80fd\u662f\u5165\u73af\u70b9\u7684\u7236\u8282\u70b9\u4e5f\u4e0d\u80fd\u662f\u73af\u91cc\u7684\u8282\u70b9\n\n\u6392\u5e8f\u597d\u540e\u600e\u4e48\u65ad\u8fb9\u5462?\n\n\u9996\u5148\u6211\u4eec\u4ece3\u8fd9\u4e2a\u70b9\u8fdb\u51658\u540e\u5c31\u5165\u73af\u4e86\uff0c\u6211\u4eec\u770b\u770b\u5de6\u53f3\u54ea\u4e2a\u70b9\u5c0f\u5c31\u5f80\u54ea\u91cc\u8d70\n\n\u5982\u56fe\u6240\u793a\u5f80$4$\u8d70\n\n\u5f80$4$\u8d70\u540e\u5c31\u8981\u8003\u8651\u4e0b\u4e00\u70b9\u8d70\u54ea\u91cc\uff0c\u6211\u4eec\u53d1\u73b0$4$\u7684\u5b50\u8282\u70b9\u91cc$2$\u6700\u5c0f\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u4f1a\u5148\u904d\u5386$4$\u306e\u5b50\u6811\n\n\u56e0\u4e3a\u904d\u5386\u5b8c\u540e\u5c31\u8981\u8003\u8651\u4e0b\u4e00\u6b21\u53bb\u54ea\u4e2a\u70b9\uff0c$11$\u660e\u663e\u5927\u4e8e$9$\u6240\u4ee5\u6211\u4eec\u8981\u6389\u5934\u56de\u5230$9$\n\n\u8fd9\u4e48\u4e00\u6765$4-11$\u8fd9\u6761\u8fb9\u5c31\u6ca1\u6709\u4efb\u4f55\u5229\u7528\u4ef7\u503c\u4e86,\u53bb\u6389\u8fd9\u6761\u8fb9\u540e\u5c31\u53c8\u56de\u5230\u4e86\u4e00\u68f5\u6811\u7684\u60c5\u51b5\u4e86\n\n\u8fd9\u6837\u5c31\u5341\u5206\u7b80\u5355\u4e86\uff0c\u5c06$4-11$\u8fd9\u6761\u8fb9\u65ad\u6389\u540e\u5c31\u53ef\u4ee5\u6109\u5feb\u6c42\u89e3\u4e86!\n\n\u518d\u6765\u770b\u8fd9\u79cd\u60c5\u51b5\uff1a(\u4e5f\u662f\u672c\u4eba\u8ba4\u4e3a\u6700\u6709\u4ee3\u8868\u6027\u306e~~\u6817\u5b50~~)\n\n$eg_2$:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/1eplpjcd.png?x-oss-process=image/resize,m_lfit,h_550,w_550)\n\n\u7531\u56fe\u53ef\u4ee5\u5f97\u77e5\u5165\u73af\u70b9\u4e3a$8$\n\n\u73af\u91cc\u6709$8,11,7,10,14,9$\u8fd9\u4e9b\u70b9\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u5bf9\u73af\u91cc\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6392\u5e8f\n\n\u8fd9\u4e9b\u5b50\u8282\u70b9\u4e0d\u80fd\u662f\u5165\u73af\u70b9\u7684\u7236\u8282\u70b9\u4e5f\u4e0d\u80fd\u662f\u73af\u91cc\u7684\u8282\u70b9\n\n\u6211\u4eec\u4f1a\u53d1\u73b09\u8fd9\u4e2a\u8282\u70b9\u5c0f\u4e8e11\u6240\u4ee5\u6211\u4eec\u904d\u5386\u5b8c$8$\u7684\u5b50\u6811\u4e2d\u5c0f\u4e8e$9$\u7684\u90e8\u5206\u540e\u5c31\u53ef\u4ee5\u5f80$9$\u8d70\u4e86\n\n\u2235$8$\u5b50\u6811\u5269\u4f59\u90e8\u5206\u5728\u65ad\u8fb9\u56de\u6eaf\u540e\u4e00\u5b9a\u4f1a\u88ab\u8bbf\u95ee,\u628a$8$\u7684\u5b50\u6811\u91cc\u7684\u7b2c\u4e00\u4e2a$>9$\u7684\u8282\u70b9\u8bb0\u4f5c$cut$\n\n\u628a\u73af\u4e0a\u4e0b\u4e00\u4e2a\u70b9\u8bb0\u4f5c$nxt$\n\n\u7136\u540e\u518d\u5eb7\u5eb7$9$\u7684\u5b50\u6811\u91cc\u662f\u5426\u6709\u6bd4$nxt$\u5c0f\u7684\u6570\uff0c\u53ef\u4ee5\u5148\u5c06\u4ed6\u4eec\u904d\u5386,\u5728\u5eb7\u5eb7\u6709\u6ca1\u6709\u5269\u4f59\u8282\u70b9\n\n\u82e5\u6709,$cut$\u7684\u503c\u8981\u66f4\u65b0\u4e3a\u5f53\u524d\u8282\u70b9\u7b2c\u4e00\u4e2a\u5927\u4e8e$nxt$\u7684\u8282\u70b9,\u4e5f\u5c31\u662f\u8bf4\u518d\u6b21\u56de\u6eaf\u53ea\u80fd\u56de\u5230\u6b64\u5904\n\n\u82e5\u6ca1\u6709,\u5c31\u6bd4\u8f83$cut$\u4e0e$nxt$\u7684\u503c\n\n\u82e5$nxt>cut$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u56de\u6eaf\uff0c\u53bb\u5f80$cut$,\u65ad\u6389$nxt$\u4e0e\u5f53\u524d\u8282\u70b9\u7684\u8fde\u8fb9\n\n\u82e5$cut>nxt$\uff0c\u5c31\u91cd\u590d\u524d\u9762\u7684\u64cd\u4f5c\uff0c\u5148\u8d70\u5411$nxt$\n\n\u5bf9\u4e8e\u8fd9\u4e2a~~\u6817\u5b50~~\u6765\u8bf4\uff0c\u6211\u4eec\u904d\u5386\u5b8c$9$\u53ca\u5176\u5b50\u6811\u540e\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u524d\u5f80$14$\uff0c\n\n\u6211\u4eec\u8981\u56de\u5230$13$\u8fd9\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u65ad\u6389$9-14$\u8fd9\u6761\u8fb9\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f~~\u53c8\u81ed\u53c8\u957f~~\u7b80\u6d01\u660e\u4e86\u306e\u4ee3\u7801\u4e86:\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nconst int N=5e5+1;\nbool vis[N],inhuan[N],ok;\nint n,m,u,v,cnt,phuan,huan[N],p,du,dv,inf=0x7fffffff;\nvector<int> g[N],maxson[N];\npriority_queue<int> q[N];\ninline int read(){\n\tint s=0;\n\tchar ch=getchar();\n\tfor(;!isdigit(ch);ch=getchar());\n\tfor(;isdigit(ch);ch=getchar())s=(s<<1)+(s<<3)+(ch^48);\n\treturn s;\n}\nvoid circle(int u,int fa){\n\tfor(register int i=0;i<g[u].size();++i){\n\t\tint v=g[u][i];\n\t\tif(v==fa)continue;\n\t\tif(vis[v]){\n\t\t\thuan[++p]=v;\n\t\t\thuan[++p]=u;\n\t\t\tinhuan[u]=inhuan[v]=true;\n\t\t\treturn;\n\t\t}\n\t\tvis[v]=true;\n\t\tcircle(v,u);\n\t\tif(ok)return;\n\t\tif(p){\n\t\t\tif(u==huan[1]){\n\t\t\t\tphuan=fa;\n\t\t\t\tok=true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\thuan[++p]=u;\n\t\t\tinhuan[u]=true;\n\t\t\treturn;\n\t\t}\n\t}\n\treturn;\n}\nvoid maxhuanson(){\n\tfor(register int i=1;i<=p;++i){\n\t\tint u=huan[i];\n\t\tmaxson[u].push_back(inf);//\u5148\u5728\u6bcf\u4e2a\u73af\u91cc\u8282\u70b9\u7684\u5b50\u6811\u91cc\u6dfb\u52a0\u6781\u503c\n\t\tfor(register int j=0;j<g[u].size();++j){\n\t\t\tint v=g[u][j];\n\t\t\tif(v!=phuan&&!inhuan[v])maxson[u].insert(upper_bound(maxson[u].begin(),maxson[u].end(),v),v);\n            \t\t//\u4e8c\u5206\u63d2\u6392(\u6ce8\u610f\u5165\u73af\u8282\u70b9\u7236\u4eb2\u548c\u73af\u4e2d\u8282\u70b9\u4e0d\u8ba1\u5165\u5176\u4e2d)\n\t\t}\n\t}\n\treturn;\n}\nvoid delpath(){\n\tint dir,cut;\n\tif(huan[2]<huan[p])dir=1;//\u5224\u65b9\u5411\n\telse dir=-1;\n\tif(dir==1){\n\t\tdu=huan[p],dv=huan[1];//\u5982\u679c\u5224\u65ad\u8fb9\u987a\u5229\u8fdb\u884c\uff0c\u5c31\u76f4\u63a5\u65ad\u6700\u540e\u4e24\u8fb9\n\t\tcut=huan[p];//\u9ed8\u8ba4cut\u4e3a\u73af\u7684\u53e6\u4e00\u5934(eg_1\u5c31\u662f\u8fd9\u6837\u7684)\n\t\tfor(register int i=1;i<p;++i){\n\t\t\tint u=huan[i];\n\t\t\tint nxt=i+1;\n\t\t\tnxt=huan[nxt];\n\t\t\tif(maxson[u][0]){\n\t\t\t\tint cut_p;\n\t\t\t\tcut_p=maxson[u][upper_bound(maxson[u].begin(),maxson[u].end(),nxt)-maxson[u].begin()];\n\t\t\t\tif(cut_p!=inf)cut=cut_p;//\u5982\u679c\u5b58\u5728\u975e\u6781\u503c\u7684\u6bd4nxt\u5927\u7684\u7b2c\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u66f4\u65b0cut\n\t\t\t}\n\t\t\tif(nxt>cut){//\u5982\u679c\u56de\u6eaf\u66f4\u4f18,\u5c31\u65adnxt\u4e0e\u5f53\u524d\u8282\u70b9\u7684\u8fde\u8fb9\n\t\t\t\tdu=nxt;\n\t\t\t\tdv=u;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tif(dir==-1){//\u540c\u7406\n\t\tdu=huan[2],dv=huan[1];\n\t\tcut=huan[2];\n\t\tfor(register int i=p;i>2;--i){\n\t\t\tint u=huan[i];\n\t\t\tint nxt=i-1;\n\t\t\tnxt=huan[nxt];\n\t\t\tif(maxson[u][0]){\n\t\t\t\tint cut_p;\n\t\t\t\tcut_p=maxson[u][upper_bound(maxson[u].begin(),maxson[u].end(),nxt)-maxson[u].begin()];\n\t\t\t\tif(cut_p!=inf)cut=cut_p;\n\t\t\t}\n\t\t\tif(nxt>cut){\n\t\t\t\tdu=nxt;\n\t\t\t\tdv=u;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\nvoid minson(int u,int fa){\n\tfor(register int i=0;i<g[u].size();++i){\n\t\tint v=g[u][i];\n\t\tif((du==u&&dv==v)||(du==v&&dv==u))continue;//\u9664\u53bb\u65ad\u8fb9\n\t\tif(v==fa)continue;\n\t\tq[u].push(-v),minson(v,u);\n\t}\n\treturn;\n}\nvoid dfs(int u){\n\tprintf(\"%d \",u);\n\tfor(;q[u].size();){\n\t\tint v=-q[u].top();\n\t\tq[u].pop();\n\t\tdfs(v);\n\t}\n\treturn;\n}\nint main(){\n\tn=read(),m=read();\n\tfor(register int i=1;i<=m;++i){\n\t\tu=read(),v=read();\n\t\tg[u].push_back(v);\n\t\tg[v].push_back(u);\n\t}\n\tvis[1]=true;\n\tcircle(1,-1);\n\tmaxhuanson();\n\tdelpath();\n\tminson(1,-1);\n\tdfs(1);\n\treturn 0;\n}\n```\n\u6700\u540e\u5c31\u6b22\u4e50$AC$\u4e86,$hhhhhhhh$\n\n~~(\u8fd9\u7801\u91cf\u4e5f\u5c31\u7b97\u534a\u4e2a\u4e1a\u754c\u5927\u6bd2\u7624\u4e86)~~",
        "postTime": 1611669755,
        "uid": 374929,
        "name": "SpeMars",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5049 \u3010[NOIP2018 \u63d0\u9ad8\u7ec4] \u65c5\u884c \u52a0\u5f3a\u7248\u3011"
    },
    {
        "content": "\u548c\u539f\u9898\u8fdb\u884c\u6bd4\u8f83\u6570\u636e\u8f83\u5927\uff0c\u90a3\u4e48\u9700\u8981\u627e\u5230\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a n log n\u7684\u7b97\u6cd5\uff1b\n\n\u9996\u5148n = m + 1\u8fd9\u4e2a\u548c\u539f\u9898\u4e00\u6837\uff0c\u4e0d\u7528\u4fee\u6539\uff1b\n\n\u91cd\u70b9\u662fn = m\uff1b\n\n\u7b80\u5355\u89c2\u5bdf\u53d1\u73b0\uff0c\u5728\u627e\u5230\u4e86\u73af\u4ee5\u540e\uff0c\u5bf9\u4e8e\u73af\u4e0a\u7684\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u56de\u5230\u7b2c\u4e00\u6b21\u5230\u8fbe\u7684\u73af\u4e0a\u7684\u70b9\u6765\u8bbf\u95ee\uff0c\u4e14\u8fd9\u79cd\u64cd\u4f5c\u53ea\u80fd\u8fdb\u884c\u4e00\u6b21\uff1b\n\n\u90a3\u4e48\u73b0\u5728\u5982\u679c\u77e5\u9053\u5982\u679c\u4e0b\u4e00\u6b21\u8bbf\u95ee\u7684\u70b9\u6bd4\u5f53\u524d\u8dd1\u73af\u4e0a\u7684\u70b9\u66f4\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e2a\u73af\u4e0a\u7684\u70b9\uff0c\u4ee5\u540e\u518d\u6765\u91cd\u65b0\u8bbf\u95ee\uff1b\n\n\u4e0a\u9762\u8fd8\u6709\u4e00\u4e2a\u524d\u63d0\u5c31\u662f\uff0c\u5982\u679c\u8981\u8df3\u8fc7\u8fd9\u4e2a\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u4e0b\u6240\u6709\u975e\u73af\u70b9\u4e00\u5b9a\u4e5f\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff1b\n\n\u90a3\u4e48\u5c31\u5728dfs\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u4e0b \u4e0b\u6b21\u4f1a\u8bbf\u95ee\u54ea\u4e2a\u70b9\u5c31\u53ef\u4ee5\u641e\u5b9a\u4e86\uff1b\n\nbtw\uff0c\u6709\u4e2a\u5751\u70b9 \u5c31\u662f\u6ce8\u610f\u4e0b\u518d\u5224\u65ad\u4e0b\u6bcf\u4e2a\u70b9\u662f\u5426\u88ab\u9009\u8fc7\uff0c\u56e0\u4e3a\u5982\u679c\u8dd1\u5230\u4e86\u73af\uff0c\u5e76\u4e14\u5728\u8fd9\u91cc\u9762\u4e00\u76f4\u8dd1\u5230\u5934\uff0c\u90a3\u4e48\u53ef\u80fd\u4f1a\u591a\u7b97\u70b9\uff1b\n\nc++\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n#include<bits/stdc++.h>\n#define rep(i,x,y) for(register int i = x;i <= y; ++ i)\n#define repd(i,x,y) for(register int i = x;i >= y; -- i)\nusing namespace std;\ntypedef long long ll;\ntemplate<typename T>inline bool chkmax(T&x,T y) { return x < y ? x = y, 1 : 0; }\ntemplate<typename T>inline bool chkmin(T&x,T y) { return x > y ? x = y, 1 : 0; }\ntemplate<typename T>inline void read(T&x)\n{\n\tchar c;int sign = 1;x = 0;\n\tdo { c = getchar(); if(c == '-') sign = -1; }while(!isdigit(c));\n\tdo { x = x * 10 + c - '0'; c = getchar(); }while(isdigit(c));\n\tx *= sign;\n}\n\ninline void init(string name)\n{\n\tstring in = name + \".in\",out = name + \".out\";\n\tfreopen(in.c_str(),\"r\",stdin);\n\tfreopen(out.c_str(),\"w\",stdout);\n}\n\nconst int N = 505000;\nint n,m; bool vis[N];\nvector<int> v[N];\n\nint a[N],t1;\n\nvoid dfs(int x)\n{\n\tvis[x] = 1;a[++t1] = x;\n\tint sz = v[x].size(); -- sz;\n\trep(i,0,sz) if(!vis[v[x][i]])\n\t\tdfs(v[x][i]); \n}\n\nint s[N],top,h[N],hi;bool k;\nbool inq[N];\n\nvoid get(int x,int fa)\n{\n\ts[++top] = x;inq[x] = 1;\n\tint sz = v[x].size(); -- sz;\n\trep(i,0,sz) if(v[x][i] != fa)\n\t\t{\n\t\t\tif(inq[v[x][i]])\n\t\t\t{\n\t\t\t\tk = 1;\n\t\t\t\twhile(s[top] != v[x][i])\n\t\t\t\t\th[++hi] = s[top--];\n\t\t\t\th[++hi] = v[x][i];\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tget(v[x][i],x);\n\t\t\tif(k) return;\n\t\t}\n\tinq[s[top--]] = 0;\n}\nbool vd[N],e;\nint b[N];\nvoid dfs2(int x,int k,int fa)\n{\n\ta[++t1] = x; vis[x] = 1;\n\tint sz = v[x].size();-- sz;\n\trep(i,0,sz) b[i] = v[x][i];\n\tv[x].clear();\n\trep(i,0,sz) if(!vis[b[i]]) v[x].push_back(b[i]);\n\tsz = v[x].size(); -- sz;\n\trep(i,0,sz) if(!vis[v[x][i]])\n\t{\n\t\tif(i == sz && vd[v[x][i]] && v[x][i] > k && !e && vd[fa])\n\t\t{\n\t\t\te = 1;\n\t\t\treturn;\n\t\t}\n\t\tif(i < sz-1)\n\t\t\tdfs2(v[x][i],v[x][i+1],x);\n\t\telse if(i == sz) dfs2(v[x][i],k,x);\n\t\telse\n\t\t{\n\t\t\tint y = i + 1;\n\t\t\tif(vd[v[x][y]] && v[x][y] > k && !e && vd[fa]) \n\t\t\t\tdfs2(v[x][i],k,x);\n\t\t\telse dfs2(v[x][i],v[x][y],x);\n\t\t}\n\t}\n}\n\nint main()\n{\n\tread(n); read(m);\n\trep(i,1,m)\n\t{\n\t\tint x,y;\n\t\tread(x); read(y);\n\t\tv[x].push_back(y);\n\t\tv[y].push_back(x);\n\t}\n\t\n\trep(i,1,n) sort(v[i].begin(),v[i].end());\n\t\n\tif(m == n - 1)\n\t{\n\t\tdfs(1);\n\t\trep(i,1,n) printf(\"%d%c\",a[i],i==n?'\\n':' ');\n\t}\n\telse\n\t{\n\t\tget(1,1);\n\t\trep(i,1,hi) vd[h[i]] = 1;\n\t\tdfs2(1,n + 1,0);\n\t\trep(i,1,n) printf(\"%d%c\",a[i],i==n?'\\n':' ');\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1543219899,
        "uid": 23087,
        "name": "Tgotp",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "# [Noip2018]\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\n\n## \u4e00.\u524d\u8a00\n\n\u200b\t\u4e4b\u524d\u6709\u5199\u8fc7\u539f\u7248\u9898\u76ee($O(n^2)$)\u7684\u9898\u89e3\uff0c\u6302\u4e00\u4e2a[\u94fe\u63a5](https://www.cnblogs.com/clockwhite/p/11559895.html)\uff0c\u7136\u540e\u8fd9\u6b21\u809d\u4e86\u4e00\u4e0b\u52a0\u5f3a\u7248\uff0c\u52a0\u5f3a\u7248[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P5049)\u3002\u6ca1\u6709\u5224\u662f\u4e0d\u662ffa\u8c03\u4e86\u4e00\u4e0b\u5348qwq\u2026\u2026\n\n## \u4e8c.\u601d\u8def\n\n\u200b\t\u6211\u662f\u6807\u51c6\u7684\u90e8\u5206\u5206\u5199\u6cd5\uff0c\u53ea\u662f\u4e00\u4e2a\u6811\u7684\u8bdd\u5f88\u597d\u505a\uff0c\u76f4\u63a5\u6bcf\u6b21\u8d2a\u6700\u5c0f\u5c31\u597d\uff0c\u8fd9\u91cc\u4e0d\u52a0\u8d58\u8ff0\u3002\n\n```c++\nvector<int> q[MAXN];\nvoid dfs60(int x,int fa){\n\tprintf(\"%d \",x);\n\tsort(q[x].begin(),q[x].end());\n\tfor(int i=0;i<q[x].size();++i){\n\t\tif(q[x][i]==fa)continue;\n\t\tdfs60(q[x][i],x);\n\t}\n}\n```\n\n\u7136\u540e\u662f $m=n$ \u7684\u57fa\u73af\u6811\u3002\u57fa\u73af\u6811\uff0c\u987e\u540d\u601d\u4e49\uff0c\u662f\u57fa\u4e8e\u4e00\u4e2a\u73af\u7684\u6811\uff0c\u7b80\u5355\u6765\u8bb2\u5c31\u662f\u5c06\u6811\u4e0a\u4e24\u4e2a\u70b9\u8fde\u8d77\u6765\uff0c\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u65ad\u6389\u8fd9\u4e2a\u73af\u4e0a\u4efb\u610f\u4e00\u8fb9\u8fd8\u662f\u6811\u2026\u2026\n\n\u200b\t\u5b9a\u4e49\u90fd\u4e0d\u592a\u91cd\u8981\uff0c\u4ece\u4e2d\u4e5f\u8bb8\u80fd\u5f97\u5230n\u65b9\u505a\u6cd5\uff0c\u4f46\u662f\u662f\u8fc7\u4e0d\u4e86\u52a0\u5f3a\u7248\u7684\uff08n\u65b9\u79fb\u6b65\u539f\u7248\uff09\uff0c\u5728\u52a0\u5f3a\u7248\u4e2d\uff0c\u6211\u9009\u62e9\u76f4\u63a5\u8d2a\u5fc3\u8fc7\u3002\n\n\u200b\t\u5728\u672c\u505a\u6cd5\u4e2d\uff0c\u5173\u4e8e\u57fa\u73af\u6811\uff0c\u53ea\u9700\u8981\u77e5\u9053\u4e00\u4e2a\u70b9\uff1a\u6211\u53ef\u4ee5**\u53cd\u6094\u4e00\u6b21**\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u5c31\u662f\u4e0d\u8d70\u63a5\u4e0b\u6765\u7684\u5728\u73af\u4e0a\u7684\u53e6\u4e00\u4e2a\u70b9 v\uff0c\u800c\u8fd9\u4e2a\u53cd\u6094\u4ec5\u9650\u4e8e\u73af\u4e0a\u7684\u70b9 u\u3002\n\n\u200b\t\u8fdb\u4e00\u6b65\u89e3\u91ca\uff0c\u4e4b\u524d\u662f\u6811\u7684\u65f6\u5019\uff0c\u6211\u6ca1\u5f97\u9009\uff0c\u5fc5\u987b\u4e56\u4e56\u7684\u628a\u81ea\u5df1\u7684\u5b50\u6811\u8d70\u5b8c\u3002\u800c\u73b0\u5728\u6709\u4e86\u73af\uff0c\u6211\u53ef\u4ee5**\u6709\u4e00\u6b21**\u9009\u62e9\u4e0d\u7ee7\u7eed\u8d70\u4e0b\u53bb\uff0c\u800c\u662f\u5f80\u56de\u8d70\uff0c\u4ece\u73af\u7684\u53e6\u4e00\u4e2a\u65b9\u5411\u8d70\u5230\u672c\u8be5\u8d70\u7684\u70b9\uff08\u4e0b\u9762\u7528\u56fe\u753b\u4e3e\u4f8b\uff09![](https://cdn.luogu.com.cn/upload/image_hosting/sr8b8g1n.png)\n\n\n\n\u200b\t\u4e5f\u5c31\u662f\u4ece\u7ea2\u70b9\u5230\u84dd\u70b9\u6211\u6709\u4e24\u6761\u8def\u53ef\u4ee5\u8d70\uff08\u770b\u7bad\u5934\uff09\uff0c\u5982\u679c\u6211\u6b64\u65f6**\u53cd\u6094\u4e0d\u8d70\u7ea2\u7ebf\uff0c\u6211\u8fd8\u6709\u8d70\u84dd\u8272\u8fd9\u6761\u7ebf\u7684\u673a\u4f1a\u3002**\n\n\u200b\t\u660e\u786e\u4e86\u8fd9\u4ec5\u6709\u4e00\u6b21\u7684\u64cd\u4f5c\u540e\uff0c\u518d\u6765\u770b\u53e6\u4e00\u4e2a\u3002![](https://cdn.luogu.com.cn/upload/image_hosting/b3qh10vz.png)\n\u54b1\u73b0\u5728\u5728\u7ea2\u70b9\u505a\u51fa\u4e86\u4e0d\u8d70\u84dd\u70b9\u53cd\u6094\u8d70\u7236\u4eb2\u7070\u70b9\u7684\u51b3\u7b56\uff0c\u90a3\u4e48\u5728\u8fd9\u4e2a\u51b3\u7b56\u4e2d\uff0c\u7236\u4eb2\u7070\u70b9\u6709\u5df2\u7ecf\u8d70\u8fc7\u7684\u9ed1\u70b9\u513f\u5b50\u548c\u6ca1\u6709\u8d70\u8fc7\u7684\u9ec4\u70b9\u513f\u5b50\uff0c\u7ea2\u70b9\u4e5f\u6709\u6ca1\u6709\u8d70\u8fc7\u7684\u9ec4\u70b9\u513f\u5b50\u3002\n\n\u200b\t\u90a3\u4e48\u5728\u53cd\u6094\u56de\u6eaf\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5fc5\u987b**\u7531\u4e0b\u81f3\u4e0a\u5c06\u6240\u6709\u7684\u9ec4\u513f\u5b50\u90fd\u8d70\u4e86**\u624d\u884c\uff0c\u4e0d\u7136\u5b8c\u4e0d\u6210\u8d70\u5b8c\u6240\u6709\u7684\u8981\u6c42\u3002\n\n\u200b\t\u6709\u4e86\u4e0a\u9762\u7684\u94fa\u57ab\uff0c\u8fd9\u9053\u9898\u5c31\u53ef\u4ee5\u7206\u5207\u4e86\u3002\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a**\u53cd\u6094\u540e\u7b2c\u4e00\u4e2a\u8981\u8d70\u7684\u9ec4\u513f\u5b50**\u5c31\u884c\u3002\u5224\u65ad\u5b83\u548c\u63a5\u4e0b\u6765\u8981\u8d70\u7684\u84dd\u70b9\u54ea\u4e2a\u5927\uff0c\u5982\u679c\u84dd\u70b9\u66f4\u5927\u5c31\u53cd\u624b\u4e00\u4e2a\u56de\u6eaf\u89e3\u51b3\u95ee\u9898\u3002\u5173\u4e8e\u9ec4\u513f\u5b50\u7684\u7ef4\u62a4\uff1a\n\n\u200b\t**\u5982\u679c\u5f53\u524d\u70b9\uff08\u7ea2\u70b9\uff09\u6309\u7167\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u904d\u5386\u513f\u5b50\uff0c\u5230\u4e86\u4e0b\u4e00\u4e2a\u70b9\u662f\u5728\u73af\u4e0a\u7684\u84dd\u70b9\uff0c\u4e14\u8fd8\u6709\u513f\u5b50\u6ca1\u6709\u8d70\uff08\u9ec4\u70b9\uff09\uff0c\u90a3\u4e48\u66f4\u65b0\u7ef4\u62a4\u7684\u9ec4\u513f\u5b50\u3002\u7279\u522b\u7684\uff0c\u5982\u679c\u6ca1\u6709\u513f\u5b50\u53ef\u4ee5\u8d70\u4e86\uff0c\u4ece\u7236\u4eb2\u54ea\u91cc\u7ee7\u627f\u3002**\uff08\u4ee3\u7801\u4f1a\u6e05\u6670\u4e00\u70b9\uff09\n\n\u200b\t\u6700\u540e\u6d89\u53ca\u5230\u4e00\u4e2a\u627e\u73af\u7684\u95ee\u9898\uff08\u53ef\u4ee5\u4e71\u5199\uff09\uff0c\u6211\u91c7\u7528\u6df1\u641c\u627e\u73af\uff0c\u538b\u6808\u7684\u65b9\u5f0f\uff0c\u8fd9\u91cc\u770b\u6bcf\u4e2a\u4eba\u6709\u4e0d\u540c\u3002\n\n## \u4e09.CODE\n\n```c++\nint stack[MAXN],top;\nbool vis[MAXN],ish[MAXN],fl;\nvoid findh(int x,int fa){\n\tif(fl)return ;\n\tvis[x]=1;stack[++top]=x;//\u538b\u6808\n\tfor(int i=0;i<q[x].size();++i){\n\t\tif(q[x][i]==fa)continue;\n\t\tif(vis[q[x][i]]){//\u6709\u5df2\u7ecf\u904d\u5386\u5230\u7684\u4e86\uff0c\u51fa\u73b0\u73af\n\t\t\tish[q[x][i]]=1;\n\t\t\twhile(top&&stack[top]!=q[x][i]){\n\t\t\t\tish[stack[top--]]=1;//\u8bb0\u5f55\u73af\n\t\t\t}\n\t\t\tfl=1;\n\t\t\treturn ;\n\t\t}\n\t\tfindh(q[x][i],x);\n\t\tif(fl)return ;\n\t}\n\ttop--;//\u5f39\u6808\n}\nint mx=MAXN,alf;//mx\u662f\u7ef4\u62a4\u7684\u9ec4\u513f\u5b50\nvoid dfs100(int x,int fa){\n\tvis[x]=1;\n\tprintf(\"%d \",x);\n\tsort(q[x].begin(),q[x].end());//\u6392\u5e8f\u4ee5\u4fbf\u4ece\u5c0f\u5230\u5927\n\tfor(int i=0;i<q[x].size();++i){\n\t\tif(q[x][i]==fa||vis[q[x][i]])continue;//\u7236\u4eb2\u6216\u8005\u4e00\u6b21\u6027\u4e0d\u53cd\u6094\u5c06\u73af\u8d70\u5b8c\u4e86\n\t\tif(!ish[q[x][i]])dfs100(q[x][i],x);//\u4e0b\u4e00\u4e2a\u70b9\u4e0d\u5728\u73af\u4e0a\u7ef4\u62a4\u5c31\u662f\u4e86\n\t\telse {\n\t\t\tif(!alf){//\u6709\u6ca1\u6709\u53cd\u6094\u8fc7\u7684\u6807\u8bb0\n\t\t\t\tint t=((i==q[x].size()-1)?mx:q[x][i+1]);\n                //\u53d6\u6ca1\u6709\u904d\u5386\u8fc7\u7684\u4e0b\u4e00\u4e2a\uff0c\u6ca1\u6709\u5c31\u7ee7\u627f\u7236\u4eb2\n\t\t\t\tif(t==fa)mx=((i==q[x].size()-2)?mx:q[x][i+2]);\n                //\u8fd9\u91cc\u7279\u522b\u6ce8\u610f\uff08\u6211\u8c03\u4e86\u5f88\u4e45\u624d\u627e\u5230\uff09\uff0c\u5224\u65ad\u662f\u5426\u662f\u7236\u4eb2\n\t\t\t\telse mx=t;\n\t\t\t}\n\t\t\tif(mx<q[x][i]&&!alf){\n\t\t\t\talf=1;continue;//\u53cd\u6094\n\t\t\t}\n\t\t\telse dfs100(q[x][i],x);//\u8d70\u5c31\u5b8c\u4e86\n\t\t}\n\t}\n}\nint main(){\n\tn=read();m=read();\n\tfor(int i=1,x,y;i<=m;++i){\n\t\tx=read();y=read();\n\t\tq[y].push_back(x);\n\t\tq[x].push_back(y);\n\t}\n\tif(m==n-1)dfs60(1,0);\n\telse{\n\t\tfindh(1,0);//\u627e\u73af\n\t\tmemset(vis,0,sizeof(vis));\n\t\tdfs100(1,0);//\u5f00\u59cb\u65c5\u884c\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1596766940,
        "uid": 68561,
        "name": "clockwhite",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\n\n# [P5049 \u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09](https://www.luogu.com.cn/problem/P5049)\n\n\u8fd9\u9898\u76ee\u771f\u7684\u662f\u7ec6\u8282\u8d85\u591a\uff0c\u4e4d\u4e00\u770b\u611f\u89c9\u633a\u7b80\u5355\uff0c\u5176\u5b9e\u60f3\u8981AC\u5e76\u4e0d\u5bb9\u6613\n\n+ \u5728\u5b58\u56fe\u7684\u65f6\u5019\u53ef\u4ee5\u91c7\u7528$\\text{vector}$\u90bb\u63a5\u8868\u7684\u65b9\u5f0f\u50a8\u5b58\u7b2c$x$\u53f7\u70b9\u7684\u7b2c$i$\u6761\u51fa\u8fb9$e[x][i]$\uff0c\u5b58\u5b8c\u540e\u5bf9\u4e8e\u6bcf\u4e00\u7ec4$e[x]$\u6309\u7167\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f$\\text{sort}$\u4e00\u4e0b\uff0c\u4fdd\u8bc1\u3010\u7f16\u53f7\u5c0f\u7684\u8fb9\u6307\u5411\u7684\u70b9\u7684\u7f16\u53f7\u3011\u5c0f\u4e8e\u3010\u7f16\u53f7\u5927\u7684\u8fb9\u6307\u5411\u7684\u70b9\u7684\u7f16\u53f7\u3011\n+ \u4e4b\u540e\u7528$\\text{tarjan}$\u7b97\u6cd5\u5c06\u6574\u5f20\u56fe\u5904\u7406\u4e00\u904d\uff0c\u7528$loop[]$\u6570\u7ec4\u8bb0\u5f55\u4e00\u4e0b\u6240\u6709\u5728\u73af\u91cc\u7684\u70b9\uff0c\u5176\u4e2d$loop[i]=1$\u8868\u793a$i$\u53f7\u70b9\u5728\u73af\u4e0a\u3002\u5728\u7528$\\text{tarjan}$\u7b97\u6cd5\u5904\u7406\u6574\u5f20\u56fe\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7528\u53d8\u91cf$bottom$\u8868\u793a\u6309\u7167\u987a\u5e8f\u8fdb\u884c$\\text{dfs}$\u7684\u7b2c\u4e00\u4e2a\u5728\u73af\u4e2d\u7684\u70b9\u7684\u7f16\u53f7\uff0c\u5982\u4e0b\u56fe\u4e2d$bottom=7$\u3002\u5728\u4e4b\u540e\u7684$\\text{dfs}$\u8fc7\u7a0b\u4e2d\uff0c\u7528$already$\u8bb0\u5f55\u662f\u5426\u5df2\u7ecf\u56de\u6eaf\u8fc7\u3002\n\n![\u56fe1](https://s1.ax1x.com/2020/10/21/BCRmfx.png)\n\n+ $\\text{dfs}$\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u4e8e\u5f53\u524d\u70b9$x$\uff0c\u5206\u6210\u4e24\u79cd\u60c5\u51b5\n\n  1. \u5f53\u524d$\\text{dfs}$\u5230\u7684\u70b9$x$\u4e0d\u5728\u4e00\u4e2a\u73af\u4e0a\n  2. \u5f53\u524d$\\text{dfs}$\u5230\u7684\u70b9$x$\u5728\u4e00\u4e2a\u73af\u4e0a\n\n+ \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u76f4\u63a5\u6309\u7167\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u679a\u4e3e$x$\u70b9\u7684\u51fa\u8fb9\u3002\n\n+ \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u5c31\u590d\u6742\u591a\u4e86\n\n  1. \u5bf9\u4e8e$bottom=7$\uff0c\u56e0\u4e3a\u662f$dfs$\u5230\u7684\u7b2c\u4e00\u4e2a\u70b9\uff0c\u6545\u4e0d\u5b58\u5728\u56de\u6eaf\u64cd\u4f5c\u3002\u4f46\u662f\u8be5\u70b9\u4e00\u5b9a\u5b58\u5728\u4e24\u4e2a\u5728\u73af\u4e0a\u7684\u4e14\u4e0e\u4e4b\u76f8\u8fde\u7684\u70b9$4\u30015$\uff0c\u5c06\u7b2c\u4e8c\u5c0f\u7684\u4e14\u5728\u73af\u4e0a\u7684\u70b9$5$\u8bb0\u4e3a$mn$\uff0c\u518d$\\text{dfs}$\u6700\u5c0f\u7684\u70b9$4$\u3002\n\n     ```c++\n     if(x==bottom)\n     {\n         for(int i=0;i<e[x].size();i++)\n         {\n             int to=e[x][i];\n             if(vis[to]==1)continue;\n             if(loop[to]==1)\n             {\n                 kk=to;\n                 int tmp=i+1;\n                 mn=e[x][tmp];\n                 break;\n             }\n         }\n     }\n     ```\n\n     \n\n  2. \u5f53\u540e\u7eed$\\text{dfs}$\u5230\u73af\u4e0a\u7684\u70b9\u65f6\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u70b9$x$\u7684\u4e00\u6761\u51fa\u8fb9$i$\u6240\u6307\u5411\u7684\u70b9$to$\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u5219\u56de\u6eaf\uff1a\n\n     1. $loop[to]=1$\uff0c\u5373$to$\u5728\u73af\u4e0a\n     2. $i+1=e[x].size()$\uff0c\u5373\u5f53\u524d\u51fa\u8fb9$i$\u662f$x$\u70b9\u7684\u6700\u540e\u4e00\u6761**\u6709\u6548**\u8fb9\uff08$to$\u662f\u4e0e$x$\u76f4\u63a5\u76f8\u8fde\u7684\u7f16\u53f7\u6700\u5927\u7684\u70b9\uff09\uff08\u82e5\u5f53\u524d\u51fa\u8fb9$i$\u662f$x$\u70b9\u7684\u5012\u6570\u7b2c\u4e8c\u6761\u51fa\u8fb9\uff0c\u4f46\u6700\u540e\u4e00\u6761\u51fa\u8fb9\u6307\u5411\u7684\u662f\u4e0a\u4e00\u4e2a\u8bbf\u95ee\u7684\u8282\u70b9\u6ee1\u8db3\u8be5\u6761\u4ef6\uff09\n     3. $mn<to$\uff0c\u5373\u4e4b\u524d\u627e\u5230\u7684$mn$\u7684\u7f16\u53f7\u6bd4$to$\u7684\u5b57\u5178\u5e8f\u5c0f\n     4. $already=0$\uff0c\u5373\u4e4b\u524d\u4ece\u672a\u56de\u6eaf\u8fc7\n\n     \u82e5\u4ee5\u4e0a\u6761\u4ef6\u5747\u6ee1\u8db3\uff0c\u5219\u6807\u8bb0$already=1$\uff0c\u4e4b\u540e\u76f4\u63a5$\\text{dfs}(mn,x)$\u5c31\u597d\u4e86\n\n     \u4e0a\u56fe\u7684\u4f8b\u5b50\u4e2d\u4e0d\u5b58\u5728\u80fd\u56de\u6eaf\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u6837\u4f8b\u91cc\u6709qwq\n\n     ```c++\n     if(already==0&&mn<to&&loop[to]==1&&(i+1==e[x].size()||(i+2==e[x].size()&&e[x][i+1]==from)))//\u82e5\u5f53\u524d\u51fa\u8fb9i\u662fx\u70b9\u7684\u5012\u6570\u7b2c\u4e8c\u6761\u51fa\u8fb9\uff0c\u4f46\u6700\u540e\u4e00\u6761\u51fa\u8fb9\u6307\u5411\u7684\u662f\u4e0a\u4e00\u4e2a\u8bbf\u95ee\u7684\u8282\u70b9\u6ee1\u8db3\u8be5\u6761\u4ef6\n     {\n         int to=mn;\n         already=1;\n         dfs(to,x);\n     }\n     ```\n\n  3. \u5f53$already=1$\uff0c\u4ee3\u8868\u65e9\u5c31\u5df2\u7ecf\u56de\u6eaf\u8fc7\u4e86\uff0c\u4e0d\u80fd\u518d\u56de\u6eaf\u4e86\uff0c\u6545\u76f4\u63a5$\\text{dfs}(to,x)$\n\n     ```c++\n     if(already==1)\n         dfs(to,x);\n     ```\n\n  4. \u5f53$loop[to]=1\u4e14already=0$\u4f46\u662f\u53c8\u4e0d\u80fd\u56de\u6eaf\uff0c\u5219\u8bf4\u660e\n\n     + $x$\u4e0a\u53ef\u80fd\u67091\u6761\u6216\u591a\u6761\u652f\u94fe\u4e0d\u5728\u73af\u4e0a\uff0c\u4e4b\u540e\u7684\u70b9\u60f3\u8981\u56de\u6eaf\u53ea\u80fd\u56de\u6eaf\u5230\u8fd9\u4e00\u6761\u6709\u652f\u94fe\u7684\u70b9\u4e0a\uff0c\u5426\u5219\u8fd9\u6761\u652f\u94fe\u4e0a\u7684\u70b9\u5c31\u518d\u4e5f\u65e0\u6cd5\u7ecf\u8fc7\u4e86\u3002\u6545\u9700\u8981\u66f4\u65b0$mn$\u7684\u503c\uff1a$mn=e[x][i+1]$\uff0c\u5373\u5728$x$\u7684\u51fa\u70b9\u4e2d\u9009\u62e9\u6070\u597d\u6bd4$to$\u5927\u7684\u70b9\u4f5c\u4e3a$mn$\u7684\u503c\u3002\n     + \u4f46\u662f\u9700\u8981\u6392\u9664$x$\u4e0a\u6ca1\u6709\u652f\u94fe\u4f46\u662f$mn>to$\u7684\u60c5\u51b5\uff0c\n\n     1. \u5728\u4e0a\u56fe\u4e2d\uff0c\u5f53$x=4,to=6$\u65f6\uff0c\u5219\u66f4\u65b0$mn$\u7684\u503c\uff0c$mn=9$\uff1b\n     2. \u5f53$x=6,to=8$\uff0c\u4f46\u662f$mn=9>to$\u65f6\uff0c\u9700\u8981\u5224\u65ad$[e][x][i+1]$\u662f\u5426\u4e3a0\uff0c\u82e5$e[x][i+1]=0$\u8bf4\u660e$x$\u6ca1\u6709\u652f\u94fe\uff0c\u5219\u65e0\u9700\u66f4\u65b0$mn$\u7684\u503c\u3002\n\n     ```c++\n     else if(loop[to]==1)\n     {\n         int tmp=i+1;\n         while(vis[e[x][tmp]]==1)tmp++;//\u907f\u514d\u9009\u4e2d\u5df2\u7ecfdfs\u8fc7\u7684\u70b9\n         if(e[x][tmp]!=0)mn=e[x][tmp];//\u6392\u9664\u53ea\u6709\u4e00\u6761\n         dfs(to,x);\n     }\n     ```\n\n\u5927\u6982\u5c31\u662f\u8fd9\u4e48\u591a\u5566\uff0c\u4e0b\u9762\u518d\u8d34\u4e00\u4efdAC\u4ee3\u7801\n\n```c++\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\n#include<vector>\n#include<stack>\nusing namespace std;\nconst int N=5e5+5;\nint n,m;\nint dfn[N],low[N],vis[N];\nint loop[N],bottom,mn=0x3f3f3f3f;\nbool looped,already;\nint kk;\nvector<int>e[N];\nstack<int>s;\nbool cmp(int x,int y)\n{\n    return x<y;\n}\nvoid tarjan(int x,int from,int cnt)\n{\n    dfn[x]=cnt;\n    low[x]=cnt;\n    s.push(x);\n    vis[x]=1;\n    for(int i=0;i<e[x].size();i++)\n    {\n        int to=e[x][i];\n        if(to==from)continue;\n        if(vis[to]==1)\n        {\n            low[x]=min(low[x],dfn[to]);\n            looped=1;\n            bottom=to;\n        }\n        else \n        {\n            tarjan(to,x,cnt+1);\n            low[x]=min(low[to],low[x]);\n        }\n        if(looped==1)return;\n    }\n    if(dfn[x]==low[x])\n    {\n        s.pop();\n        vis[x]=0;\n    }\n}\nvoid get_loop()\n{\n    int x;\n    while(x!=bottom&&s.empty()!=1)\n    {\n        x=s.top();\n        s.pop();\n        loop[x]=1;\n    }\n    loop[bottom]=1;\n}\n//\u4ee5\u4e0b\u662f\u6838\u5fc3\u90e8\u5206********\nvoid dfs(int x,int from)\n{\n    bool in_loop=loop[x];\n    cout<<x<<\" \";\n    vis[x]=1;\n    if(in_loop==0||already==1)\n    {\n        for(int i=0;i<e[x].size();i++)\n        if(vis[e[x][i]]==0)dfs(e[x][i],x);\n    }\n    else if(in_loop==1)\n    {\n        if(x==bottom)\n        {\n            for(int i=0;i<e[x].size();i++)\n            {\n                int to=e[x][i];\n                if(vis[to]==1)continue;\n                if(loop[to]==1)\n                {\n                    kk=to;\n                    int tmp=i+1;\n                    mn=e[x][tmp];\n                    break;\n                }\n            }\n        }\n        for(int i=0;i<e[x].size();i++)\n        {\n            int to=e[x][i];\n            if(vis[to]==1)continue;\n            if(already==0&&mn<to&&loop[to]==1&&(i+1==e[x].size()||(i+2==e[x].size()&&e[x][i+1]==from)))\n            {\n                int to=mn;\n                already=1;\n                dfs(to,x);\n            }\n            else if(already==1)\n                dfs(to,x);\n            else if(loop[to]==1)\n            {\n                int tmp=i+1;\n                    while(vis[e[x][tmp]]==1)tmp++;\n                    if(e[x][tmp]!=0)mn=e[x][tmp];\n                dfs(to,x);\n            }\n            else dfs(to,x);\n        }\n    }\n}\n//\u4ee5\u4e0a\u662f\u6838\u5fc3\u90e8\u5206********\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        e[u].push_back(v);\n        e[v].push_back(u);\n    }\n    for(int i=1;i<=n;i++)sort(e[i].begin(),e[i].end(),cmp);\n    tarjan(1,0,1);\n    get_loop();\n    memset(vis,0,sizeof(vis));\n    dfs(1,1);\n    return 0;\n}\n```\n\n\n\n----\n\n$\\text{Update}\\ \\ 10.28$\n\n\u539f\u4ee3\u7801\u5728\u539f\u9898\u4e2d\u4f1aWA\u4e00\u4e2a\u70b9\uff0c\u66f4\u65b0\u540e\u4fee\u590d\u4e86\u8fd9\u4e2abug\u3002\u611f\u8c22 @[HH_Halo ](https://www.luogu.com.cn/space/show?uid=322491)",
        "postTime": 1603269996,
        "uid": 227438,
        "name": "The_World_exe",
        "ccfLevel": 0,
        "title": "P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "[\u5e0c\u4e30\u5c55\uff0c\u770b\u535a\u5ba2](https://www.cnblogs.com/Z8875/p/13543044.html)\n### \u9898\u76ee\u5927\u610f\n* \u5728\u4e00\u9897\u6811\u6216\u4e00\u9897\u57fa\u73af\u6811\u4e2d\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 DFS \u5e8f\n\n### \u89e3\u9898\u601d\u8def\n* \u5bf9\u4e8e\u5728\u4e00\u9897\u6811\u4e0a\u7684\u60c5\u51b5(m==n-1)\uff1a\n  * \u7528vector\u5b58\u8fb9\uff0cDfs\u524d\u5bf9\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\u7684\u7f16\u53f7\u7528 $O(n\\log n)$ \u7684\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\u6392\u4e2a\u5e8f\uff0c\u518d\u6b63\u5e38\u7684Dfs\u4e00\u904d\u5c31\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\u7684Dfs\u5e8f\n* \u5bf9\u4e8e\u5728\u4e00\u9897\u57fa\u73af\u6811\u7684\u60c5\u51b5(m==n)\uff1a\n  * Dfs \u540e\u80af\u5b9a\u662f\u4e00\u9897\u6811\uff0c\u6811\u548c\u57fa\u73af\u6811\u5176\u5b9e\u53ea\u662f\u5dee\u4e86\u73af\u4e0a\u7684\u4e00\u6761\u8fb9\uff0c\u5148\u627e\u5230\u73af\uff08\u57fa\u672c\u4e0a\u6d89\u53ca\u5230\u57fa\u73af\u6811\u7684\u9898\u90fd\u9700\u8981\u5148\u627e\u73af\uff09\uff0c$O(n^2)$ \u7684\u505a\u6cd5\u5c31\u662f\u5148 $O(n)$ \u7684\u66b4\u529b\u679a\u4e3e\u73af\u4e0a\u7684\u8fb9\uff0c\u8fdb\u884c\u6807\u8bb0\u5e76 $O(n)$ \u7684\u6c42\u51faDfs\u5e8f\uff0c\u6700\u540e\u627e\u5230\u6700\u4f18\u7684\u65b9\u6848\u5373\u53ef\u3002\n  * \u8fd9\u6837\u5728\u6b63\u5e38\u7248\u7684\u9898\u76ee\u4e2d\u8fd8\u9700\u8981\u4e00\u4e9b\u4e9b\u4f18\u5316\uff0c\u66f4\u522b\u8bf4\u5bf9\u4e8e n \u7684\u8303\u56f4\u5df2\u7ecf\u8fbe\u5230 5e5 \u7684\u6570\u636e\u52a0\u5f3a\u7248\u4e86\u3002\n  * \u8003\u8651\u4f18\u5316\uff0c$O(n\\log n)$ \u7684\u6392\u5e8f\u8fd8\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c$O(n)$ \u7684\u6c42 Dfs \u5e8f\u4e5f\u662f\u65e0\u6cd5\u907f\u514d\u7684\uff0c\u53ea\u80fd\u5728\u8003\u8651\u65ad\u90a3\u6761\u8fb9\u8fd9\u91cc\u4f18\u5316\u5230 $O(\\log n)$ \u751a\u81f3 $O(1)$ \u7684\u590d\u6742\u5ea6\u3002\n  * \u9996\u5148\u60f3\u4e00\u4e0b\u6700\u4f18\u7684\u4fbf\u5229\u65b9\u5f0f\u5e94\u8be5\u662f\u5565\u6837\u5462\uff1f\u8003\u8651\u5230\u53ef\u4ee5\u4e0d\u8d70\u4e00\u6761\u8fb9\uff0c\u90a3\u5c31\u662f\u5f53\u524d\u8981\u8d70\u7684\u90a3\u4e2a\u70b9\u6bd4\u56de\u6eaf\u540e\u7b2c\u4e00\u4e2a\u70b9\u7f16\u53f7\u5927\u7684\u65f6\u5019\u8fdb\u884c\u56de\u6eaf\u5c31\u662f\u6700\u4f18\u7684\u4e86\uff0c\u90a3\u76f4\u63a5\u8bb0\u5f55\u4e00\u4e0b\u5982\u679c\u8981\u56de\u6eaf\uff0c\u9012\u5f52\u5230\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u9012\u5f52\u8fc7\u7684\u70b9\u7684\u7f16\u53f7\uff0c\u6bcf\u6b21\u9012\u5f52\u524d\u5224\u65ad\u4e00\u4e0b\uff0c\u82e5\u56de\u6eaf\u66f4\u4f18\u90a3\u5c31\u5f3a\u5236\u56de\u6eaf\u3002\n  * \u5f3a\u5236\u56de\u6eaf\u9700\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\uff1a\n    1. \u8fd9\u4e2a\u70b9 x \u8981\u5728\u73af\u4e0a\uff0c\u5426\u5219\u76f4\u63a5\u5f3a\u5236\u56de\u6eaf\u540e x \u4ee5\u53ca\u4ed6\u7684\u5b50\u6811\u90fd\u4e0d\u4f1a\u5728\u904d\u5386\u5230\u4e86\u3002\n    2. \u8fd9\u4e2a\u70b9 x \u7684\u7236\u4eb2\u8282\u70b9\u4e5f\u5fc5\u987b\u5728\u73af\u4e0a\uff0c\u5426\u5219\u76f4\u63a5\u5f3a\u5236\u56de\u6eaf\u540e\u6574\u4e2a\u73af\u5c31\u4e0d\u4f1a\u88ab\u904d\u5386\u5230\u4e86\u3002\n    3. \u4e4b\u524d\u6ca1\u6709\u56de\u6eaf\u8fc7\uff0c\u56e0\u4e3a\u6bcf\u5f3a\u5236\u56de\u6eaf\u4e00\u6b21\u5c31\u4f1a\u6709\u4e00\u6761\u8fb9\u88ab\u5ffd\u7565\uff0c\u591a\u6b21\u5f3a\u5236\u56de\u6eaf\u4f1a\u9020\u6210\u591a\u6761\u8fb9\u88ab\u5ffd\u7565\uff0c\u800c\u53ea\u80fd\u6709\u4e00\u6761\u8fb9\u88ab\u5ffd\u7565\u624d\u80fd\u4fdd\u8bc1\u80fd\u904d\u5386\u5230\u6240\u6709\u7684\u70b9\uff0c\u6240\u4ee5\u53ea\u80fd\u5f3a\u5236\u56de\u6eaf\u4e00\u6b21\u3002\n    4. \u6700\u540e\u5f53\u7136\u662f\u5f3a\u5236\u56de\u6eaf\u6bd4\u4e0d\u56de\u6eaf\u66f4\u4f18\u624d\u56de\u6eaf\u3002\n    \n### Code\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 5e5 + 5;\nvector<int> t[N];//\u5b58\u7684\u56fe\nint n, m, pre[N], a[N], cnt;\nbool v[N], g, cir[N];\nvoid Fcircle(int x) {//\u627e\u73af\n    if (g) return;//\u57fa\u73af\u6811\u53ea\u6709\u4e00\u4e2a\u73af\uff0c\u627e\u5230\u73af\u5c31\u4e0d\u7528\u518d\u904d\u5386\u4e86\uff0c\u76f4\u63a5\u9000\u51fa\n    v[x] = 1;\n    for (int i = 0; i < t[x].size(); ++i) {\n        int y = t[x][i];\n        if (y == pre[x]) continue;\n        //pre[x]\u5b58\u50a8\u7740\u7531\u54ea\u4e2a\u8282\u70b9\u5230\u8fbe\u7684x\uff0c\u5176\u5b9e\u5c31\u662f\u7236\u8282\u70b9\uff0c\u627e\u73af\u7684\u65f6\u5019\u4f1a\u7528\u5230\n        if (v[y] && !g) {//\u9047\u5230\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u70b9\u5c31\u8868\u793a\u627e\u5230\u73af\u4e86\n            int z = x;\n            do {\n                cir[z] = 1;//cir\u8868\u793a\u662f\u5426\u5728\u73af\u4e0a\n                z = pre[z];\n            } while (z != y);//do while\u6807\u8bb0\u73af\u4e0a\u6bcf\u4e2a\u70b9\n            cir[y] = g = 1;//\u5bf9y\u8fdb\u884c\u6807\u8bb0\uff0c\u5e76\u8bb0\u5f55\u73af\u5df2\u7ecf\u627e\u5230\n            return;\n        }\n        pre[y] = x;\n        Fcircle(y);\n    }\n}\nvoid Dfs(int x, int fa, int next) {//next\u662f\u5982\u679c\u56de\u6eaf\uff0c\u7b2c\u4e00\u4e2a\u8bbf\u95ee\u7684\u70b9\u7684\u7f16\u53f7\n    if (!g && cir[x] && cir[fa] && next < x)\n        return g = 1, void();\n    //\u8fd9\u4e2a\u5224\u65ad\u5c31\u662f\u6838\u5fc3\u4e86\uff0c\u4f9d\u6b21\u5bf9\u5e94\u4e0a\u8ff0\u7684 3,1,2,4 \uff0c\u5fd8\u8bb0\u7684\u53ef\u4ee5\u518d\u7ffb\u4e0a\u53bb\u770b\u770b\n    if (v[x]) return;\n    v[x] = 1;\n    a[++cnt] = x;//a\u6570\u7ec4\u8bb0\u5f55dfs\u5e8f\u5217\n    for (int i = 0; i < t[x].size(); ++i) {\n        int y = t[x][i];\n        if (y == fa) continue;\n        int nex = next;\n        for (int j = i + 1, b = 0; j < t[x].size() && !b; ++j)\n            if (t[x][j] != fa) nex = t[x][j], b = 1;\n        //\u8fd9\u91cc\u627enext\u4e5f\u662f\u4e00\u4e2a\u91cd\u70b9\uff0c\u4e0a\u9762\u7684for\u5faa\u73af\u627e\u7684\u662fy\u540e\u9762\u7b2c\u4e00\u4e2a\u975e\u7236\u8282\u70b9\u7684\u5144\u5f1f\u8282\u70b9\n        Dfs(y, x, nex);\n    }\n}\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= m; ++i) {\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        t[x].push_back(y);\n        t[y].push_back(x);//\u5efa\u56fe\n    }\n    for (int i = 1; i <= n; ++i)\n        sort(t[i].begin(), t[i].end());\n    //\u5bf9\u70b9\u7684\u7f16\u53f7\u8fdb\u884c\u6392\u5e8f\uff0c\u4fdd\u8bc1\u6bcf\u6b21\u90fd\u4f1a\u5148\u904d\u5386\u5230\u7f16\u53f7\u5c0f\u7684\u70b9\n    if (n == m) {//\u5982\u679c\u662f\u57fa\u73af\u6811\u5c31\u627e\u73af\n        Fcircle(1); \n        g = 0;//\u6e05\u7a7a\u627e\u73af\u6807\u8bb0\uff0c\u5728\u4e4b\u540eDfs\u4e2d\u8868\u793a\u662f\u5426\u56de\u6eaf\u8fc7\n        memset(v, 0, sizeof(v));//\u6e05\u7a7a\u8bbf\u95ee\u6807\u8bb0\n    }\n    Dfs(1, 0, n);\n    for (int i = 1; i <= n; ++i)\n        printf(\"%d \", a[i]);\n    return 0;\n}\n```",
        "postTime": 1598011088,
        "uid": 106024,
        "name": "Shawk",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u5148\u628a\u8fb9\u6309\u7167\u7ec8\u70b9\u6392\u5e8f\n\n\u6811\u4e0a\u76f4\u63a5\u8d70\uff0c\u8003\u8651\u73af\u4e0a\u600e\u4e48\u505a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u73af\u4e0a\u7684\u70b9$u$\u4ee5\u53ca\u73af\u4e0a\u7684\u4e00\u6761\u8fb9$(u,v)$\uff0c\u6211\u4eec\u5148\u8d70\u5b8c\u6240\u6709\u5c0f\u4e8e$v$\u7684\u5b50\u8282\u70b9\uff0c\u7136\u540e\u5904\u7406\u51fa\u6240\u6709\u5927\u4e8e$v$\u7684\u5b50\u8282\u70b9\u7684\u6700\u5c0f\u503c$mx$.**\u7279\u522b\u5730\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8282\u70b9\uff0c\u90a3\u4e48$mx$\u4ece\u4e0a\u4e00\u4e2a\u8282\u70b9\u7ee7\u627f\u8fc7\u6765**.\u7136\u540e\u5982\u679c$mx>v$\u6211\u4eec\u5c31\u8d70$v$\uff0c\u5426\u5219\u5c31\u8df3\u8fc7$v$.\n\n\u4e3a\u4ec0\u4e48\u5462?\u56e0\u4e3a\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5728\u73af\u4e0a\u8d70\u4e00\u6761\u94fe\uff0c\u94fe\u4e0a\u6bcf\u4e2a\u8282\u70b9\u90fd\u6302\u7740\u4e00\u4e9b\u6ca1\u6709\u8d70\u7684\u5b50\u6811.\u5982\u679c\u6211\u8981\u56de\u6eaf\u90a3\u4e48\u4e00\u5b9a\u662f\u5728\u94fe\u4e0a\u4ece\u540e\u5f80\u524d\uff0c\u5728\u6bcf\u4e2a\u70b9\u4e0a\u4ece\u5c0f\u5230\u5927\u8d70\u8fd9\u4e9b\u5b50\u6811\uff0c\u6240\u4ee5$mx$\u5b9e\u9645\u4e0a\u7ef4\u62a4\u7684\u662f\u4e0a\u4e00\u4e2a\u6ca1\u6709\u8d70\u7684\u8282\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u6bd4\u73af\u4e0a\u7684\u4e0b\u4e00\u4e2a\u70b9\u4f18\u90a3\u4e48\u6211\u4eec\u5c31\u56de\u6765\u8d70\u8fd9\u4e9b\u6ca1\u8d70\u7684\u70b9.\n\n\u7279\u522b\u5730\uff0c\u5982\u679c$u$\u662f\u7b2c\u4e00\u6b21\u8fdb\u5165\u73af\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec$(u,v)$\u7ec8\u70b9\u66f4\u5c0f\u7684\u90a3\u6761\u73af\u8fb9.\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=2e6,INF=1e9;\nint nxt[N],fst[N],vis[N],stack[N],top,p[N],n,m,mm,hs;\nstruct Edge{int u,v;}e[N];\nvoid ade(int u,int v){++mm;nxt[mm]=fst[u],fst[u]=mm;}\nint cmp(const Edge &a,const Edge &b){return a.u==b.u?a.v>b.v:a.u<b.u;}\nvoid find(int u,int fa)//\u627e\u73af\n{\n    vis[u]=1;stack[++top]=u;\n    for(int i=fst[u];i;i=nxt[i])\n    {\n        int v=e[i].v;if(v==fa||p[v])continue;\n        if(vis[v])\n        {\n            do\n            {\n                int x=stack[top--];p[x]=1;\n            }while(stack[top+1]!=v);\n        }\n        else find(v,u);\n    }\n    vis[u]=0;--top;\n}\nvoid dfs(int u,int mx)\n{\n    vis[u]=1;printf(\"%d \",u);int t=INF,i=fst[u];\n    if(p[u]&&!hs)//\u5982\u679cu\u5728\u73af\u4e0a\u5e76\u4e14\u6ca1\u6709\u56de\u6eaf\u8fc7\uff0c\u90a3\u4e48\u6211\u4eec\u5904\u7406\u51famx\n    {\n        for(;i;i=nxt[i])\n        {\n            if(vis[e[i].v])continue;\n            if(p[e[i].v])break;\n        }\n        i=nxt[i];\n        for(;i;i=nxt[i])\n        {\n            if(vis[e[i].v])continue;\n            t=min(t,e[i].v);\n        }\n    }\n    if(t==INF)t=mx;//\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u7ee7\u627f\u4e0a\u6b21\u7684\n    for(int i=fst[u];i;i=nxt[i])\n    {\n        int v=e[i].v;if(vis[v])continue;\n        if(p[u]&&p[v]&&!hs)/\u5982\u679c(u,v)\u5728\u73af\u4e0a\u5e76\u4e14\u6ca1\u6709\u56de\u6eaf\u8fc7\u5e76\u4e14\u8d70v\u4e0d\u4f18\u5c31\u8df3\u8fc7v\n            if(v>t){hs=1;continue;}\n        dfs(v,t);\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)scanf(\"%d%d\",&e[i].u,&e[i].v),e[i+m]=(Edge){e[i].v,e[i].u};\n    sort(e+1,e+(m<<1|1),cmp);\n    for(int i=1;i<=(m<<1|1);i++)ade(e[i].u,e[i].v);\n    if(n==m)find(1,0);\n    dfs(1,INF);\n}\n```\n\n$O(n\\log n)$\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u7528\u53cc\u5173\u952e\u5b57\u8ba1\u6570\u6392\u5e8f\u505a\u5230$O(n)$...",
        "postTime": 1566305199,
        "uid": 22136,
        "name": "qwaszx",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u4f60\u8981\u8dd1\u4e2a\u7c7b\u4f3c\u6df1\u641c\u7684\u65b9\u5f0f\u7ecf\u8fc7\u6240\u6709\u7684\u70b9\uff0c\u4e0d\u80fd\u91cd\u590d\u7ecf\u8fc7\u8282\u70b9\u4f46\u53ef\u4ee5\u5728\u4efb\u610f\u8282\u70b9\u56de\u6eaf\uff08\u56de\u6eaf\u4e0d\u7b97\u91cd\u590d\u7ecf\u8fc7\uff09\u3002\u6c42\u4e00\u4e2a\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u641c\u7d22\u5e8f\u5217\u3002\n\n\u5176\u4e2d $1 \\leq n \\leq 500000$ \u4e14 $m = n$ \u6216 $m = n - 1$\u3002\n\n---\n\n## \u9898\u76ee\u5206\u6790\n\n[\u5148\u79c0\u4e00\u4e0b\u81ea\u5df1\u7684\u6210\u7ee9qwq](https://www.luogu.com.cn/record/40701583)\n\u8017\u65f61.58s\uff08\u5f00O2\u7684\u8bdd1.14s\uff09\uff0c\u5c45\u7136\u83ab\u540d\u5947\u5999\u641e\u5230\u4e86\u7b2c\u4e09\u5febQAQ\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(n)$ \u7684\u3002\n\n---\n\n### \u65e0\u6839\u6811\u7684\u60c5\u51b5\n\u9996\u5148\u5bf9\u4e8e $m = n - 1$ \u7684\u60c5\u51b5\u5fc5\u5b9a\u6784\u6210\u4e00\u4e2a\u65e0\u6839\u6811\uff08\u65e0\u5411\u8fde\u901a\u65e0\u73af\u56fe\uff09,\u56e0\u4e3a\u8981\u7ecf\u8fc7\u6240\u6709\u8282\u70b9\u6240\u4ee5\u662f\u6ca1\u6cd5\u5728\u6709\u5b50\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\u56de\u6eaf\u7684\u3002\n\n\u90a3\u4e48\u6839\u636e\u5b57\u5178\u5e8f\u7684\u7279\u6027\u5c31\u6709\u4e00\u4e2a\u975e\u5e38\u663e\u7136\u7684\u8d2a\u5fc3\u601d\u8def\uff1a\u5904\u5728\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u5982\u679c\u6709\u53ef\u4ee5\u5230\u8fbe\u7684\u6ca1\u6709\u88ab\u7ecf\u8fc7\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u80af\u5b9a\u9009\u62e9\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\u5230\u8fbe\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4ece\u8282\u70b9 $1$ \u5f00\u59cb\u4ece\u5c0f\u5230\u5927 DFS\u3002\u90a3\u4e48\u91cd\u70b9\u5c31\u5728\u4e8e\u5982\u4f55\u4ece\u5c0f\u5230\u5927\u4e86\u3002\n\n\u6ce8\u610f\u5230\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u5230\u8fbe\u7684\u8282\u70b9\u7f16\u53f7\u6392\u5e8f\uff0c\u6240\u4ee5\u8981\u6392\u5e8f\u6570\u636e\u7684\u503c\u57df\u5f88\u5c0f\uff0c\u53ef\u4ee5\u8003\u8651**\u8ba1\u6570\u6392\u5e8f**\uff08\u6ce8\u610f\u4e0d\u662f\u57fa\u6570\u6392\u5e8f\uff09\u3002\n\n\u5982\u679c\u4f60\u4e60\u60ef\u5199\u5c01\u88c5\u7684\u90bb\u63a5\u8868\u7684\u8bdd\uff0c\u4f60\u8fd8\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u5148\u5f80\u4e00\u4e2a\u90bb\u63a5\u8868\u91cc\u63d2\u5165\u53cd\u5411\u8fb9\uff08\u7531\u4e8e\u662f\u65e0\u5411\u56fe\u6240\u4ee5\u6b63\u5411\u53cd\u5411\u6ca1\u6709\u533a\u522b\uff09\uff0c\u7136\u540e\u518d\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u51fa\u70b9\u63d2\u5165\u5230\u53e6\u4e00\u4e2a\u90bb\u63a5\u8868\u91cc\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u8282\u70b9\u662f\u6309\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u8bbf\u95ee\u7684\u3002\uff08\u8be6\u7ec6\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801\uff09\n\n\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002\n\n---\n\n### \u57fa\u73af\u6811\u7684\u60c5\u51b5\n\n\u5728\u4e00\u4e2a\u65e0\u6839\u6811\u4e2d\u4efb\u610f\u63d2\u5165\u4e00\u6761\u8fb9\uff0c\u8fd9\u6761\u8fb9\u5fc5\u5b9a\u548c\u5176\u5b83\u7684\u8fb9\u6784\u6210\u4e00\u4e2a\u73af\uff0c\u4f7f\u5f97\u56fe\u4e2d\u53ea\u5305\u542b\u8fd9\u4e48\u4e00\u4e2a\u73af\uff0c\u8fd9\u6837\u7684\u56fe\u5c31\u53ef\u4ee5\u79f0\u4e4b\u4e3a**\u57fa\u73af\u6811**\uff08\u867d\u7136\u4f30\u8ba1\u5927\u5bb6\u90fd\u77e5\u9053\u4e86\uff09\u3002\n\n\u6240\u4ee5\u5bf9\u4e8e $m=n$ \u7684\u60c5\u51b5\u5c31\u53ef\u4ee5\u770b\u505a\u662f\u5bf9\u4e8e\u57fa\u73af\u6811\u7684\u60c5\u51b5\u3002\n\n\u9996\u5148\u6709\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\uff1a\u82e5\u8981\u4ece\u4e00\u4e2a\u8282\u70b9 $u$ \u56de\u6eaf\uff0c\u5219\u4ece $u$ \u53ef\u4ee5\u5230\u8fbe\u7684\u8282\u70b9\u8981\u4e48\u90fd\u5df2\u7ecf\u7ecf\u8fc7\u4e86\uff0c\u8981\u4e48\u5b58\u5728 $u$ \u7684\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u901a\u8fc7\u672a\u7ecf\u8fc7\u7684\u8282\u70b9\u5230\u8fbe\u4e0e $u$ \u76f8\u90bb\u7684\u672a\u88ab\u7ecf\u8fc7\u7684\u70b9\u3002\u800c\u8fd9\u79cd\u60c5\u51b5\u53ea\u53ef\u80fd\u5728\u73af\u91cc\u9762\u53d1\u751f\u3002\n\n\u4e8e\u662f\u5bf9\u4e8e\u5176\u5b83\u7684\u8282\u70b9\u6211\u4eec\u4f9d\u7136\u4f9d\u7167\u65e0\u6839\u6811\u7684\u505a\u6cd5\uff0c\u800c\u5bf9\u4e8e\u73af\u4e2d\u7684\u8282\u70b9\u6211\u4eec\u9700\u8981\u7279\u6b8a\u8003\u8651\u3002\n\n\u8003\u8651\u4e00\u4e2a\u5728\u73af\u4e2d\u7684\u8282\u70b9 $u$ \u8981\u56de\u6eaf\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n- \u8282\u70b9 $u$ \u7684\u6240\u6709\u76f8\u90bb\u7684\u4e0d\u5728\u73af\u4e0a\u7684\u70b9\u90fd\u5df2\u88ab\u7ecf\u8fc7\uff0c\u5373 $u$ \u4e0b\u4e00\u4e2a\u8981\u88ab\u8bbf\u95ee\u7684\u73af\u4e0a\u8282\u70b9\u5fc5\u987b\u662f\u4e0e $u$ \u76f8\u90bb\u7684\u9664\u7236\u8282\u70b9\u5916\u7f16\u53f7\u6700\u5927\u7684\uff0c\u6216\u8005\u4e0e $u$ \u76f8\u90bb\u7684\u73af\u4e0a\u8282\u70b9\u4e5f\u90fd\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u5176\u5b83\u975e\u73af\u4e0a\u8282\u70b9\u65e0\u6cd5\u88ab\u7ecf\u8fc7\u7684\u72b6\u51b5\u3002\n- \u5982\u679c $u$ \u5b58\u5728\u76f8\u90bb\u7684\u672a\u88ab\u8bbf\u95ee\u8fc7\u7684\u73af\u4e0a\u8282\u70b9\uff0c\u8282\u70b9 $u$ \u56de\u6eaf\u540e\u9996\u4e2a\u7ecf\u8fc7\u7684\u8282\u70b9\u7684\u7f16\u53f7\u5fc5\u987b\u6bd4\u4e0e $u$ \u76f8\u90bb\u7684\u672a\u88ab\u8bbf\u95ee\u8fc7\u7684\u73af\u4e0a\u8282\u70b9\u7684\u7f16\u53f7\u8981\u5927\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u56de\u6eaf\u540e\u9996\u4e2a\u7ecf\u8fc7\u7684\u70b9\u7684\u7f16\u53f7\uff0c\u5e76\u5224\u65ad\u662f\u5426\u8fd8\u6709\u4e0b\u4e00\u4e2a\u672a\u88ab\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u5c31\u53ef\u4ee5 DFS \u4e86\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u73af\u4e0a\u8282\u70b9\u90fd\u53ea\u6709\u4e24\u4e2a\u76f8\u90bb\u7684\u73af\u4e0a\u8282\u70b9\uff0c\u4e8e\u662f\u67e5\u627e\u4e0b\u4e00\u4e2a\u672a\u88ab\u8bbf\u95ee\u7684\u8282\u70b9\u76f4\u63a5\u66b4\u529b\u627e\u5c31\u53ef\u4ee5\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f\u4e0d\u53d8\u7684\u3002\n\n\u800c\u7ef4\u62a4\u56de\u6eaf\u540e\u9996\u4e2a\u7ecf\u8fc7\u7684\u70b9\u65e2\u662f\u7956\u5148\u4e2d\u5b58\u5728\u672a\u8bbf\u95ee\u7684\u76f8\u90bb\u8282\u70b9\u4e2d\u6700\u8fd1\u7684\u90a3\u4e2a\uff0c\u5728\u66b4\u529b\u627e\u4e0b\u4e00\u4e2a\u8282\u70b9\u65f6\u987a\u4fbf\u8bb0\u5f55\u5c31\u597d\u4e86\u3002\n\n\u73af\u4e0a\u7684\u8282\u70b9\u56de\u6eaf\u540e\u5fc5\u7136\u4f1a\u5b58\u5728\u4e00\u6761\u73af\u4e0a\u8fb9\u4e0d\u4f1a\u88ab\u7ecf\u8fc7\uff0c\u90a3\u4e48\u6b64\u65f6\u5c31\u53ef\u4ee5\u5f53\u505a\u65e0\u6839\u6811\u641c\u7d22\u4e86\u3002\n\n\u627e\u73af\u7684\u8bdd\u4e00\u4e2a DFS \u5c31\u89e3\u51b3\u4e86\u7684\u4e8b\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u5427\u2026\u2026\n\n---\n\n## \u4ee3\u7801\n\n\u52a0\u4e0a\u4e86\u4e00\u4e9b\u7b80\u5355\u7684\u9632\u6284\uff0c\u6240\u4ee5\u4e00\u4e9b\u5947\u602a\u7684\u5730\u65b9\u4e0d\u8981\u8ba4\u4e3a\u662f\u6211\u4ee3\u7801\u51fa\u9519\u4e86qwq\u3002\n```cpp\n#include <cstdio>\n#include <a1gorithm>\n\nchar ch, sig;\ntemplate <typename _tp>\ninline void rd(_tp &num)\n{\n    num = 0, sig = 1, ch = getchar();\n    while(ch < '0' || ch > '9'){\n        if(ch == '-') sig = -1;\n        ch = getchar();\n    }\n    do{\n        num = num * 10 + ch - '0';\n        ch = getchar();\n    }while(ch >= '0' && ch <= '9');\n    num *= sig;\n}\ntemplate <size_t _nz, size_t _sz>\nstruct graph\n{\n    size_t l, hd[_nz + 1], nxt[_sz + 1];\n    inline void insert(size_t tn){\n        nxt[++l] = hd[tn];\n        hd[tn] = l;\n    }\n};\n//\u4e0a\u9762\u662f\u5feb\u8bfb\u548c\u90bb\u63a5\u8868\n\n#define MAXN 500005\nint n, m;\n//sg\u505a\u8ba1\u6570\u6392\u5e8f\u7528\u7684\uff0cg\u662f\u6211\u4eec\u7528\u7684\u56fe\n//vr\u4ee3\u8868\u8fd9\u6761\u8fb9\u7684\u76ee\u6807\u8282\u70b9\ngraph<MAXN, MAXN * 2> g, sg;\nint vr[MAXN * 2], svr[MAXN * 2];\n\nbool vis[MAXN];\nbool ir[MAXN]; int sr;\n//sr\u5728\u8fd9\u4ee3\u8868\u51fa\u73b0\u73af\u65f6\u7684\u8bb0\u5f55\u8282\u70b9\uff0c\u5728\u4e0b\u9762\u4ee3\u8868\u56de\u6eaf\u540e\u8981\u7ecf\u8fc7\u7684\u8282\u70b9\u7f16\u53f7\n//\u4e00\u6570\u4e24\u7528\uff0c\u505a\u5230\u73af\u4fdd\u4e0d\u6d6a\u8d39\uff08\u4e0d\u662f\nbool fdr(int p, int fa)//\u627e\u73af\n{\n    vis[p] = true;\n    for(int i = g.hd[p]; i; i = g.nxt[i]){\n        if(vr[i] == fa) continue;\n        if(vis[vr[i]]){\n            sr = vr[i];\n            ir[p] = true;\n            return true;\n        }\n        if(fdr(vr[i], p)){\n            if(sr) ir[p] = true;\n            if(p == sr) sr = 0;\n            return true;\n        }\n    }\n    return false;\n}\n\nint ans[MAXN], an1;//\u7b54\u6848\nbool edr = false;//\u56de\u6eaf\u6807\u5fd7\nvoid dfs(int p, bool isr)//\u6df1\u641c\u6c42\u7b54\n{\n    ans[anl++] = p;\n    vis[p] = true;\n    for(int i = g.hd[p]; i; i = g.nxt[i]){\n        if(vis[vr[i]]) continue;//\u8bbf\u95ee\u8fc7\u4e0d\u7ba1\uff0c\u4e00\u822c\u662f\u9047\u5230\u7956\u5148\u8282\u70b9\n        if(!ir[vr[i]] || edr) dfs(vr[i], false);//\u5982\u679c\u76ee\u6807\u8282\u70b9\u4e0d\u5728\u73af\u4e0a\u6216\u8005\u5df2\u7ecf\u56de\u6eaf\u8fc7\u73af\u4e86\n        else if(isr){\n            int hsn = 0; //\u8bb0\u5f55\u4e0b\u4e00\u4e2a\u672a\u88ab\u8bbf\u95ee\u7684\u8282\u70b9\n            for(int j = g.nxt[i]; j; j = g.nxt[j])\n                if(!vis[vr[j]]){ hsn = vr[j]; break; }\n            if(!hsn && sr && vr[i] > sr) break;\n            else{\n                if(hsn) sr = hsn;//\u8bb0\u5f55\u56de\u6eaf\u540e\u5c06\u4f1a\u8bbf\u95ee\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\n                dfs(vr[i], true);\n            }\n        }\n        else dfs(vr[i], true);//\u7b2c\u4e00\u6b21\u8fdb\u73af\u5565\u90fd\u4e0d\u7528\u7ba1\n    }\n    if(isr) edr = true;//\u73af\u8dd1\u5230\u5e95\u4e86\u4e5f\u8981\u52a0\u56de\u6eaf\u6807\u5fd7\n}\n#define dfs(A, B) fdr(A, B)/*fangchao*/\nint mian()\n{\n    rd(n); rd(m);\n    int tu, tv;\n    for(int i = 0; i < m; ++i){\n        rd(tu), rd(tv);\n        sg.insert(tu); svr[sg.l] = tv;\n        sg.insert(tv); svr[sg.l] = tu;\n    }\n    for(int i = n; i > 0; --i) //\u8ba1\u6570\u6392\u5e8f\n        for(int j = sg.hd[i]; j; j = sg.nxt[j])\n            g.insert(svr[j]), vr[g.l] = i;\n\n    if(n == m){//\u6709\u73af\u627e\u73af\uff0c\u65e0\u73af\u62c9\u5012\uff08\u4e0d\u662f\n        fdr(1, 0);\n        for(int i = 1; i <= n; ++i)\n            vis[i] = false;\n    }\n    dfs(1, ir[1]);\n    for(int i = 0; i < anl; ++i){\n        if(i) putchar(' ');\n        printf(\"%d\", ans[i]);\n    }\n    putchar('\\n');\n    return -1;\n}\n```\n---\n\n\u849f\u84bb\u7b2c\u4e00\u6b21\u53d1\u9898\u89e3\u6c42\u8fc7QwQ",
        "postTime": 1603964956,
        "uid": 220767,
        "name": "BearBrine",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "# P5022 \u65c5\u884c\uff08Tarjan\uff09\n\u540c\u6b65\u53d1\u5e03\u4e8e\uff1a[myCSDN](https://blog.csdn.net/weixin_46304837/article/details/109328954)\n\u597d\u50cf\u51e0\u4e4e\u6ca1\u89c1\u6709\u4eba\u7528Tarjan\u505a\uff0c\u90a3\u5c31\u53d1\u4e86\u4e00\u6ce2\u9898\u89e3\n## \u601d\u8def\n\u600e\u4e48\u8bf4\u8fd9\u9053\u9898\u5462\uff1f\u770b\u8d77\u6765\u633a\u7b80\u5355\uff0c\u4f46\u662f\u7ec6\u8282\u95ee\u9898\u5f88\u591a\u3002\n\n\u5148\u8bf4\u8bf4m=n-1\u7684\u60c5\u51b5\uff1a\u5c31\u662f\u628a\u6bcf\u4e2a\u70b9\u7684\u5b50\u8282\u70b9\u6309\u4ece\u5c0f\u5230\u5927\u7f16\u53f7\u6392\u5e8f\u7136\u540e\u4ece1\u53f7\u70b9\u5f00\u59cb\u904d\u5386\u5373\u53ef\uff0c60\u5206\u5230\u624b\n\n\u9ebb\u70e6\u7684\u662fm=n\u7684\u60c5\u51b5\uff1a\u5c31\u662f\u4e00\u68f5\u57fa\u73af\u6811\uff0c\u5927\u90e8\u5206\u9898\u89e3\u7ed9\u7684\u90fd\u662fO(n^2^)\u7684\u66b4\u529b\u679a\u4e3e\u3002\u7531\u4e8e\u6211\u4e0d\u5927\u719f\u6089\u57fa\u73af\u6811\uff0c\u7b2c\u4e00\u4e2a\u60f3\u5230\u7684\u662fTarjan\uff0c\u7ed3\u679c92\u5206\uff08WA\u4e86\u4e24\u4e2a\u70b9\uff09\u641c\u9898\u89e3\u90fd\u51e0\u4e4e\u6ca1\u89c1\u8fc7Tarjan\u7684\uff0c\u4f46\u662f\u4ee5\u4e3a\u7528Tarjan\u7684\u505a\u6cd5\u5f88\u7b80\u5355\u5c31\u201c\u72ec\u884c\u5176\u9053\u201d\u4e86\uff0c~~\u7ed3\u679c\u4e0d\u77e5\u9053\u6389\u4e86\u591a\u5c11\u5934\u53d1~~\n\n\u8bf4\u6b63\u4e8b\uff1a\n\u56fe\u5c31\u662f\u4e00\u68f5\u6811\u518d\u52a0\u4e0a\u4e00\u6761\u8fb9\uff0c\u4e5f\u5c31\u662f\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u73af\uff0c\u666e\u901a\u7684\u70b9\u5f88\u7b80\u5355\uff0c\u6309\u7167m=n-1\u7684\u65b9\u6cd5\u5373\u53ef\uff0c\u95ee\u9898\u662f\u548c\u73af\u6709\u5173\u7684\u70b9\uff0c\u770b\u56fe\uff1a\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20201028113450257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjMwNDgzNw==,size_16,color_FFFFFF,t_70#pic_center)\u5bf9\u4e8e\u8fd9\u4e2a\u73af\uff0c\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u88ab\u8bbf\u95ee\u7684\u7ed3\u70b9\u79f0\u4e3ain\u7ed3\u70b9\uff0c\u5c06\u73af\u4e0a\u5df2\u7ecf\u88ab\u8bbf\u95ee\u7684\u7ed3\u70b9\u6807\u8bb0\u4e3a\u7ea2\u8272\uff0c\u5b83\u4eec\u7684\u5b50\u7ed3\u70b9\u6807\u8bb0\u4e3a\u7eff\u8272\uff0cin\u7684\u5b50\u7ed3\u70b9\uff08\u5df2\u6392\u5e8f\uff09\u4e2d(\u7b2c\u4e00\u4e2a \u73af\u4e0a\u7684\u70b9 \u7684)\u4e0b\u4e00\u4e2a\u70b9\uff08\u6709\u70b9\u7ed5,\u524d\u9762\u62ec\u53f7\u662f\u4e3a\u4e86\u65ad\u53e5\uff09\u8bb0\u4e3ay\u70b9\n\u5bf9\u4e8e\u73af\u4e0a\u5c06\u8981\u88ab\u8bbf\u95ee\u7684\u70b9\uff0c\u6709\u51e0\u79cd\u9009\u62e9\uff1a\n\n 1. \u8bbf\u95ee\n 2. \u4e0d\u8bbf\u95ee\uff0c\u56de\u6eaf\u5230in\u70b9\uff0c\u5e76\u8bbf\u95eey\u70b9\uff08\u6761\u4ef6\uff1a\u6240\u6709\u7684\u7eff\u70b9\u90fd\u5df1\u7ecf\u88ab\u8bbf\u95ee\uff08\u5426\u5219\u7eff\u70b9\u5c06\u65e0\u6cd5\u5230\u8fbe\uff09\uff09\n 3. \u4e0d\u8bbf\u95ee\uff0c\u56de\u6eaf\u5230\u7ea2\u70b9\uff0c\u5e76\u8bbf\u95ee\u8be5\u7ea2\u70b9\u7684\u672a\u88ab\u8bbf\u95ee\u7684\u5b50\u7ed3\u70b9\uff08\u6761\u4ef6\uff1a\u6cbf\u8def\u4e0a\u6240\u6709\u7ea2\u70b9\u7684\u5b50\u7ed3\u70b9\u5747\u88ab\u8bbf\u95ee\uff08\u539f\u56e0\u540c\u4e0a\uff09\uff09\n\n\u4e0a\u9762\u51e0\u79cd\u9009\u62e9\uff0c\u5f53\u7136\u662f\u8981\u5148\u6ee1\u8db3\u6761\u4ef6\u518d\u770b\u54ea\u4e00\u4e2a\u6700\u4f18\uff0c\u5224\u65ad\uff1a\n\u53d8\u91cf\u8bf4\u660ex\uff1a\u5f53\u524d\u7ed3\u70b9\uff08\u672a\u8bbf\u95ee\uff09\uff0cy\uff1a\u89c1\u4e0a\uff0cz\uff1a\u4ecex\u70b9\u56de\u6eaf\u5230in\u7684\u8def\u4e0a\u7b2c\u4e00\u4e2a\u672a\u8bbf\u95ee\u7684\u7eff\u70b9\uff08\u5176\u5b9e\u8fd9\u91cc\u8868\u8fbe\u4e0d\u5927\u597d\uff0c\u7eff\u70b9\u5e76\u4e0d\u5728\u8be5\u8def\u5f84\u4e0a\uff0c\u800c\u662f\u901a\u8fc7\u7ea2\u70b9\u8fde\u63a5\u5230\u73af\u7684\u65c1\u8fb9\uff09\n\u5f53z==-1\u65f6\uff0cz\u4e0d\u5b58\u5728\uff0c\u5f53y==\uff081<<29\uff09\u65f6\uff0c\u8868\u793a\u66fe\u7ecf\u5df2\u7ecf\u56de\u6eaf\u5230y\u70b9\uff0c\u5f53\u666e\u901a\u6811\u5904\u7406\u5373\u53ef\n```cpp\n\tif(tar[x] != dfn[x] && y != (1 << 29)){\n\t\tif(z != -1){\n\t\t\tif(x > z)return;\n\t\t}\n\t\telse if(y != -1){\n\t\t\tif(x > y)return;\n\t\t}\n\t}\n```\n\u90a3\u4e48\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u70b9\u5728\u4e0d\u5728\u73af\u4e0a\u5462\uff1f\u8fd9\u5c31\u9700\u8981tarjan\u4e86\uff0c\u4e0d\u4f1a\u7684\u5148\u81ea\u5b66\uff0cdfs\u5e8f\u5b58\u50a8\u5728dfn\u6570\u7ec4\u91cc\uff0ctar[]\u5c31\u662f\u201c\u8ffd\u6eaf\u503c\u201d\u3002\u5f53dfn[i]!=tar[i]\u65f6\uff0ci\u70b9\u5728\u73af\u4e0a\uff0c\u7279\u522b\u5730\uff0cdfn[in]==tar[in]\u8fd9\u5c31\u9700\u8981\u6211\u4eec\u7ed9in\u70b9\u4e00\u4e9b\u7279\u6b8a\u5f85\u9047\u4e86\u3002\n## \u4ee3\u7801\n### 92\u5206\n\u5176\u5b9e\u6bd4\u8d5b\u80fd\u62ff\u523092\u5df2\u7ecf\u5f88\u6ee1\u610f\u4e86\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <vector>\n#include <cstring>\n#define nn 5010\nusing namespace std;\nint read(){\n\tint re = 0 , sig = 1;\n\tchar c;\n\tdo\n\t\tif((c = getchar()) == '-')sig = -1;\n\twhile(c < '0' || c > '9');\n\twhile(c >= '0' && c <= '9'){\n\t\tre = (re << 1) + (re << 3) + c - '0';\n\t\tc = getchar();\n\t}\n\treturn re;\n}\n\nint n , m;\nbool vis[nn];\nvector <int> son[nn];\n\n\nvoid dfs(int x){\n\tvis[x] = true;\n\tprintf(\"%d \" , x);\n\tfor(int i = 0 ; i < son[x].size() ; i++)\n\t\tif(!vis[son[x][i]])\n\t\t\tdfs(son[x][i]);\n}\nint dfn[nn] , tar[nn];\nvoid tarjan(int x , int dep , int fa){\n\tif(dfn[x] != 0)\n\t\treturn;\n\ttar[x] = dfn[x] = dep;\n\tfor(int i = 0 ; i < son[x].size() ; i++){\n\t\ttarjan(son[x][i] , dep + 1 , x);\n\t\tif(tar[son[x][i]] < tar[x] && son[x][i] != fa)\n\t\t\ttar[x] = tar[son[x][i]];\n\t}\n}\nint y = -1;\nvoid dfs2(int x) {\n\tif(x == y)\n\t\ty = (1 << 29);\n//\tcout << x << '\\t' << y << endl;\n\tif(tar[x] != dfn[x]){\n\t\tif(y < x){\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tvis[x] = true;\n\tprintf(\"%d \" , x);\n\tif(y == -1){\n\t\tfor(int i = 0 ; i < son[x].size() ; i++){\n\t\t\tif(tar[son[x][i]] != dfn[son[x][i]])\n\t\t\t\ty = son[x][i];\n\t\t}\n\t}\n\t\t\n\t\t\n\tfor(int i = 0 ; i < son[x].size() ; i++)\n\t\tif(!vis[son[x][i]])\n\t\t\tdfs2(son[x][i]);\n}\nint main(){\n\tn = read();\tm = read();\n\tfor(int i = 1 ; i <= m ; i++){\n\t\tint u , v;\n\t\tu = read() , v = read();\n\t\tson[u].push_back(v);\n\t\tson[v].push_back(u);\n\t}\n\tfor(int i = 1 ; i <= n ; i++)\n\t\tsort(son[i].begin() , son[i].end());\n\tif(m == n - 1)\n\t\tdfs(1);\n\telse{\n\t\ttarjan(1 , 1 , 0);\n//\t\tfor(int i = 1 ; i <= n ; i++)\n//\t\t\tcout << tar[i] << '\\t';\n//\t\tcout << endl;\n\t\tmemset(vis , 0 , sizeof(vis));\n\t\tdfs2(1);\n\t}\n\treturn 0;\n} \n```\n\n### 100\u5206\n\u4e3a\u4e86\u8fd98\u5206\u6389\u4e86\u591a\u5c11\u5934\u53d1QAQ\n\u8bf4\u660e\uff1a\u4ee5\u4e0b\u505a\u6cd5\u6548\u7387\u5e94\u8be5\u4e3aO(n)\uff0c\u6539\u4e00\u4e0b\u6570\u7ec4\u5927\u5c0f\u4f9d\u7136\u53ef\u4ee5\u901a\u8fc7\u6d1b\u8c37\u6570\u636e\u52a0\u5f3a\u7248\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <queue>\n#include <algorithm>\n#include <vector>\n#include <cstring>\n#define nn 5010\nusing namespace std;\nint read(){\n\tint re = 0 , sig = 1;\n\tchar c;\n\tdo\n\t\tif((c = getchar()) == '-')sig = -1;\n\twhile(c < '0' || c > '9');\n\twhile(c >= '0' && c <= '9'){\n\t\tre = (re << 1) + (re << 3) + c - '0';\n\t\tc = getchar();\n\t}\n\treturn re;\n}\n\nint n , m;\nbool vis[nn];\nint in;\nvector <int> son[nn];\n\nvoid dfs(int x){\n\tvis[x] = true;\n\tprintf(\"%d \" , x);\n\tfor(int i = 0 ; i < son[x].size() ; i++)\n\t\tif(!vis[son[x][i]])\n\t\t\tdfs(son[x][i]);\n}\nint dfn[nn] , tar[nn];\nint dep = 1;\nvoid tarjan(int x , int fa){\n\tif(dfn[x] != 0)\n\t\treturn;\n\ttar[x] = dfn[x] = dep++;\n\tfor(int i = 0 ; i < son[x].size() ; i++){\n\t\ttarjan(son[x][i] , x);\n\t\tif(tar[son[x][i]] < tar[x] && son[x][i] != fa){\n\t\t\tif(tar[son[x][i]] == dfn[son[x][i]])\n\t\t\t\tin = son[x][i];\n\t\t\ttar[x] = tar[son[x][i]];\n\t\t}\n\t}\n}\nint y = -1;\nvoid dfs2(int x , int z) {\n\tif(tar[x] != dfn[x] && y != (1 << 29)){\n\t\tif(z != -1){\n\t\t\tif(x > z)return;\n\t\t}\n\t\telse if(y != -1){\n\t\t\tif(x > y)return;\n\t\t}\n\t}\n\tif(x == y)\n\t\ty = (1 << 29);\n//\tcout << x << '\\t' << y << '\\t' << z <<endl;\n\t\n\tvis[x] = true;\n\tprintf(\"%d \" , x);\n\n\tif(y == -1){\n\t\tfor(int i = 0 ; i < son[x].size() ; i++){\n\t\t\tif(tar[son[x][i]] != dfn[son[x][i]]){\n\t\t\t\tint j = i + 1;\n\t\t\t\twhile(vis[son[x][j]])j++;\n\t\t\t\ty = son[x][j];\n\t\t\t\tbreak;\n\t\t\t} \n\t\t}\n\t}//*/\n\tfor(int i = 0 ; i < son[x].size() ; i++)\n\t\tif(!vis[son[x][i]]){\n\t\t\tif(dfn[son[x][i]] != tar[son[x][i]] && y != (1 << 29) && x != in){\n\t\t\t\tint j = i + 1;\n\t\t\t\twhile(j < son[x].size() && (vis[son[x][j]] || dfn[son[x][j]] != tar[son[x][j]] || in == son[x][j])){\n\t\t\t\t\tj++;\n\t\t\t\t\tif(j >= son[x].size())break;\n\t\t\t\t}\n\t\t\t\tif(j < son[x].size())\n\t\t\t\t\tdfs2(son[x][i] , son[x][j]);\n\t\t\t\telse dfs2(son[x][i] , z);\n\t\t\t}\n\t\t\telse dfs2(son[x][i] , z);\n\t\t}\n}\nint main(){\n\tfreopen(\"input.txt\" , \"r\" , stdin);\n\tfreopen(\"output.txt\" , \"w\" , stdout);\n\tn = read();\tm = read();\n\tfor(int i = 1 ; i <= m ; i++){\n\t\tint u , v;\n\t\tu = read() , v = read();\n\t\tson[u].push_back(v);\n\t\tson[v].push_back(u);\n\t}\n\tfor(int i = 1 ; i <= n ; i++)\n\t\tsort(son[i].begin() , son[i].end());\n\tif(m == n - 1)\n\t\tdfs(1);\n\telse{\n\t\ttarjan(1 , 0);\n/*\t\tfor(int i = 1 ; i <= n ; i++)\n\t\t\tcout << tar[i] << '\\t';\n\t\tcout << endl;\n*/\t\tmemset(vis , 0 , sizeof(vis));\n\t\tdfs2(1 , -1);\n\t}\n//\tcout << in << endl;\n\treturn 0;\n} \n```\n\n### \u5bf9\u62cd\u6587\u4ef6\n\u547d\u540d\uff1a\n\n\u6570\u636e\u751f\u6210\uff1arandom.cpp\n\n\u5bf9\u6bd4\uff1acompare.cpp\n\n\u5f85\u6d4b\u7a0b\u5e8f\uff08\u89c1\u4e0a\uff09\uff1a#4.cpp\n\nstd\u7a0b\u5e8f\uff1astd.cpp\n#### \u6570\u636e\u751f\u6210\uff08\u9488\u5bf9m==n\u60c5\u51b5\uff0c\u4fee\u6539\u4e0b\u4e5f\u53ef\u751f\u6210\u6811\uff09\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint random(int r , int l = 1){//\u8303\u56f4[l,r]l\u9ed8\u8ba4\u4e3a1\n\tif(r == l)return l;\n\treturn (long long)rand() * rand() % (r - l) + l;\n}\npair<int , int>e[5010];\nmap<pair<int , int>,bool> h;\n\nint dict[5010];\nint main(){\n\tfreopen(\"input.txt\" , \"w\" , stdout);\n\tsrand((unsigned)time(0));\n\t\n\tint n , m;\n\tn = m = 5000;//\u53ef\u4ee5\u81ea\u8c03\u8303\u56f4\n\tfor(int i = 1 ; i <= n ; i++)\n\t\tdict[i] = i;\n\trandom_shuffle(dict + 1 , dict + n + 1);\n\t\n\tfor(int i = 2 ; i <= n ; i++){\n\t\tint fa = random(i - 1);\n\t\te[i] = make_pair(fa , i);\n\t\th[e[i]] = h[make_pair(i , fa)] = 1;\n\t}\n\tint x , y;\n\tdo{\n\t\tx = random(n) , y = random(n);\n\t}\n\twhile(x == y || h[make_pair(x , y)]);\n\te[1] = make_pair(x , y);\n\t\n\trandom_shuffle(e + 1 , e + m + 1);\n\tprintf(\"%d %d\\n\" , n , m);\n\tfor(int i = 1 ; i <= n ; i++){\n\t\tprintf(\"%d %d\\n\" , dict[e[i].first] , dict[e[i].second]);\n\t}\n\treturn 0;\n}\n/*\n\tfreopen(\"input.txt\" , \"r\" , stdin);\n\tfreopen(\".txt\" , \"w\" , stdout);\n\t\n*/\n```\n\n#### \u81ea\u52a8\u5bf9\u6bd4\u7a0b\u5e8f\n\n```cpp\n#include <bits/stdc++.h>\n#include <windows.h>\nusing namespace std;\nint main(){\n\twhile(true){\n\t\tsystem(\"start random.exe\");\n\t\tSleep(50);\n\t\tsystem(\"start #4.exe\");\n\t\tsystem(\"start std.exe\");\n\t\tSleep(1500);\n\t\tif(system(\"fc output.txt ans.txt\")){\n\t\t\tsystem(\"start input.txt\");\n\t\t\tcout << \"WA!!!\" << endl;\n\t\t\treturn 0;\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n```\n#### std\u7a0b\u5e8f\uff08\u6765\u81eaNOI\u5b98\u7f51\uff09\n\n```cpp\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n\nconst int MAXN = 300005;\n\nint n, m;\n\nstruct data {\n\tint u, v, id;\n};\n\nbool operator < (const data &a, const data &b) {\n\treturn a.u < b.u || (a.u == b.u && a.v < b.v);\n}\n\ndata _edges[MAXN * 2];\ndata *first[MAXN];\n\nint ans[MAXN];\nint dfsseq[MAXN];\nint visit[MAXN];\n\nint del_e;\nint dfs_idx;\nbool ok;\nbool fail;\n\n#define visit_id (del_e + 1)\n\nvoid dfs(int x) {\n\tif (!ok) {\n\t\tif (x < ans[dfs_idx]) {\n\t\t\tok = true;\n\t\t} else if (x > ans[dfs_idx]) {\n\t\t\tfail = true;\n\t\t\treturn;\n\t\t}\n\t}\n\tdfsseq[dfs_idx++] = x;\n\tvisit[x] = visit_id;\n\tfor (data *d = first[x]; d->u == x; d++) if (d->id != del_e) {\n\t\tint y = d->v;\n\t\tif (visit[y] == visit_id) continue;\n\t\tdfs(y);\n\t\tif (fail) return;\n\t}\n}\n\n\n\nint main() {\n\tfreopen(\"input.txt\" , \"r\" , stdin);\n\tfreopen(\"ans.txt\" , \"w\" , stdout);\n\tscanf(\"%d%d\", &n, &m);\n\tif (n == 1) {\n\t\tprintf(\"1\\n\");\n\t\treturn 0;\n\t}\n\tfor (int i = 0; i < m; i++) {\n\t\tint u, v;\n\t\tscanf(\"%d%d\", &u, &v);\n\t\t_edges[i * 2] = (data){u, v, i};\n\t\t_edges[i * 2 + 1] = (data){v, u, i};\n\t}\n\tstd::sort(_edges, _edges + 2 * m);\n\tfirst[1] = _edges;\n\tfor (int i = 1; i < 2 * m; i++) {\n\t\tif (_edges[i].u != _edges[i - 1].u) {\n\t\t\tfirst[_edges[i].u] = _edges + i;\n\t\t}\n\t}\n\tans[0] = 2;\n\tif (n == m) {\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tdel_e = i;\n\t\t\tdfs_idx = 0;\n\t\t\tok = false;\n\t\t\tfail = false;\n\t\t\tdfs(1);\n\t\t\tif (dfs_idx == n && ok && !fail) {\n\t\t\t\tmemcpy(ans, dfsseq, n * sizeof(int));\n\t\t\t}\n\t\t}\n\t} else {\n\t\tdel_e = -2;\n\t\tdfs(1);\n\t\tmemcpy(ans, dfsseq, n * sizeof(int));\n\t}\n\tfor (int i = 0; i < n; i++) {\n\t\tprintf(\"%d \", ans[i]);\n\t}\n}\n```",
        "postTime": 1603931971,
        "uid": 299699,
        "name": "doer_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011\uff08Tarjan\uff09\uff08\u542b\u6570\u636e\u751f\u6210\u53ca\u5bf9\u62cd\uff09"
    },
    {
        "content": "[P5049 \u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09](https://www.luogu.com.cn/problem/P5049)\n\n[\u535a\u5ba2\u94fe\u63a5](https://www.cnblogs.com/GK0328/p/13634771.html)\n\n# \u56fe\u8bba\n\n\u5176\u5b9e\u53c2\u52a0\u8fc7$NOIP2018$\u4e86\uff0c\u5f53\u65f6\u5f04\u4e86\u4e00\u4e2a$O(n^2  \\log n)AC$\uff0c\u4f46\u662f\u6ca1\u8865\u8fc7\u8fd9\u4e2a\u52a0\u5f3a\u7248\n\n\u672c\u6765\u4ee5\u4e3a\u633a\u7b80\u5355\u7684\uff0c\u4f46\u662f\u4e00\u53e0\u7ec6\u8282\u6ca1\u6709\u8003\u8651\uff0c$WA$\u98de\u597d\u591a\u6b21\uff08~~\u83dc\u6b7b~~\uff09\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u6811\u7684\u60c5\u51b5\uff0c\u5f88\u5bb9\u6613\u8003\u8651\u5230\u628a\u6bcf\u4e2a\u8282\u70b9\u76f8\u90bb\u7684\u8282\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u4ece$1$\u5f00\u59cb\u76f4\u63a5\u904d\u5386\n\n\u7136\u800c\u9898\u76ee\u8981\u7684\u662f\u57fa\u73af\u6811\uff0c\u5982\u679c\u66b4\u529b\u679a\u4e3e\u65ad\u8fb9\u7684\u8bdd\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(n^2)$\uff0c\u53ea\u80fd$AC$\u975e\u52a0\u5f3a\u7248\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u5982\u4f55\u5224\u65ad\u73af\u4e0a\u65ad\u90a3\u6761\u8fb9\uff08\u7e41\u7410\u6b7b\u4e86\uff09\n\n\u5047\u5982\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u51fa\u5ea6\u90fd\u4e3a$1$\u7684\u73af\uff0c\u6211\u4eec\u4ece\u5f53\u524d\u4f4d\u7f6e\u5411\u4e24\u7aef$x,y$\u4e2d\u8f83\u5c0f\u7684\u4e00\u4e2a\u62d3\u5c55\uff08\u94a6\u5b9a$x<y$\uff09\n\n\u4ece$x$\u5f00\u59cb\u4e0d\u65ad\u641c\u7d22\uff0c\u76f4\u5230\u53d1\u73b0\u4e00\u4e2a$z>y$\uff0c\u6211\u4eec\u505c\u6b62\uff0c\u4ece$y$\u53cd\u5411\u641c\u7d22\u5230$z$\n\n$But,$\u6bcf\u4e2a\u8282\u70b9\u4e0a\u90fd\u6302\u7740\u4e00\u9897\u6811\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u5b83\u7684\u4e0b\u4e00\u6b65\u90fd\u6709\u4e24\u79cd\u9009\u62e9\n\n$1.$\u5411\u73af\u4e0a\u641c\u7d22\uff08\u641c\u4e0b\u4e00\u4e2a\u73af\u4e0a\u8282\u70b9\uff09\n\n$2.$\u5411\u5b50\u6811\u641c\u7d22\uff08\u5148\u641c\u6700\u5c0f\u7684\u513f\u5b50\u8282\u70b9\uff09\n\n\u663e\u7136\uff0c\u4ecd\u7136\u662f\u53d6\u4e0b\u4e00\u4e2a\u73af\u4e0a\u8282\u70b9\u4e0e\u6700\u5c0f\u7684\u513f\u5b50\u8282\u70b9\u4e2d\u8f83\u5c0f\u7684\u4e00\u4e2a\n\n\u8981\u641c\u7d22\u73af\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u8981\u5224\u65ad$a_i,a_{i+1}$\u662f\u5426\u65ad\u5f00\n\n\u5047\u8bbe\u6ee1\u8db3\uff1a\n\n$a_i$\u53ef\u4ee5\u5148\u641c\u7d22\u51e0\u9897\u5b50\u6811\uff0c\u518d\u641c\u7d22$a_{i+1}$\uff0c\u518d\u641c\u7d22\u5269\u4e0b\u7684\u5b50\u6811\n\n\u90a3\u4e48\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u8282\u70b9\u9700\u8981\u653e\u5728$a_{i+1}$\u4e4b\u540e\u641c\u7d22\uff0c\u8bbe\u5176\u4e2d\u6700\u5c0f\u7684\u4e3a$t(t>a_{i+1})$\uff0c\u641c\u7d22\u5b8c$a_{i+1}$\u540e\uff0c$a_{i+2}$\u5fc5\u987b$<t$\u624d\u80fd\u7ee7\u7eed\uff0c\u5426\u5219\u56de\u6eaf\u641c\u7d22\u5269\u4f59\u5b50\u6811\u663e\u7136\u66f4\u4f18\n\n\u6ce8\u610f\uff0c\u6bcf\u4e2a\u70b9\u4e0e\u4e4b\u76f8\u6bd4\u8f83\u7684$t$\u4e3a\u4e0a\u4e00\u4e2a\u591a\u4f59\u5b50\u6811$t$\uff0c\u5176\u4ed6\u4e4b\u524d\u7684\u591a\u4f59\u5b50\u6811\u4e0d\u5fc5\u8003\u8651\uff0c\u56e0\u4e3a\u6211\u4eec\u5f53\u524d\u7684\u641c\u7d22\u5df2\u7ecf\u6ee1\u8db3\u4e86\u5b57\u5178\u5e8f\u6bd4\u5b83\u66f4\u4f18\n\n\u8fd8\u6709\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u672c\u6765\u4e0d\u662f\u8fd8\u8981\u53cd\u5411\u641c\u7d22\u7684\u5417\uff1f\u5982\u679c\u5df2\u7ecf\u641c\u7d22\u5230\u4e86$z$\u5462\uff0c\u662f\u5426\u8981\u53d6\u5462\uff1f\n\n\u90fd\u6709\u53ef\u80fd\uff0c\u5018\u82e5\u4e0a\u4e00\u4e2a\u591a\u4f59\u5b50\u6811$t>a_i$\uff0c\u9009\u62e9$a_i$\u4ecd\u7136\u66f4\u4f18\uff0c\u5426\u5219\u4ecd\u7136\u65ad\u5f00\n\n\u8fd9\u91cc\u5176\u5b9e\u53ea\u6709\u4e00\u4e2a\u533a\u522b\uff0c\u5bf9\u4e8e\u672a\u641c\u7d22\u5230$z$\u7684$a_i$\uff0c\u5018\u82e5\u6ca1\u6709\u4e0a\u4e00\u4e2a\u591a\u4f59\u5b50\u6811\uff0c\u90a3\u4e48\u7ee7\u7eed\u641c\u7d22\u66f4\u4f18\uff0c\u5bf9\u4e8e\u5df2\u641c\u7d22\u5230$z$\u7684$a_i$\uff0c\u5018\u82e5\u6ca1\u6709\u4e0a\u4e00\u4e2a\u591a\u4f59\u5b50\u6811\uff0c\u90a3\u4e48\u65ad\u5f00\u66f4\u4f18\n\n\u539f\u7406\u548c\u6700\u5f00\u59cb\u7684\u7b80\u5355\u95ee\u9898\u76f8\u540c\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n \\log n)$\uff08\u8fd9\u3002\u3002\u3002\u5feb\u6392\u80cc\u9505\u4e86\uff09\n\n\u5c31\u8fd9\u6837\u8fd8$T$\u4e86\n\n\u6211\u4eec\u4e0d\u7528$vector$\u904d\u5386\uff0c\u53ea\u597d\u7528\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u4f46\u662f\u94fe\u5f0f\u524d\u5411\u661f\u6ca1\u6cd5\u6392\u5e8f\uff0c\u90a3\u4e48\u5c31\u8ba9$vector$\u6392\u5b8c\u5e8f\u4e4b\u540e\u4e22\u8fdb\u94fe\u5f0f\u524d\u5411\u661f\u4e2d\n\n\u53ef\u80fd\u5148\u4e22\u8fdb\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u7136\u540e\u53d6\u51fa\u5230\u6570\u7ec4\u4e2d\uff0c\u6570\u7ec4\u6392\u5e8f\u540e\u4e22\u56de\u94fe\u5f0f\u524d\u5411\u661f\u66f4\u5feb\uff0c\u6ca1\u5c1d\u8bd5\n\n\u4e0d\u5f00$O2 \\quad AC!$\n\n$Code:$\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<cstring>\n#define N 500005\nusing namespace std;\nint n,m,x,y,cnt,ct1,ct2,a[N],c[N],f[N],dfn[N],low[N],ans[N];\nvector<int>e[N];\nstack<int>s;\nint tot,fr[N],nxt[N << 1],d[N << 1];\nbool h[N];\n#define IT vector<int> :: iterator\nint read()\n{\n    int S=0;\n    char c=getchar();\n    while (c<'0' || c>'9')\n        c=getchar();\n    while ('0'<=c && c<='9')\n    {\n        S=S*10+c-'0';\n        c=getchar();\n    }\n    return S;\n}\nvoid write(int x)\n{\n    if (x>9)\n        write(x/10);\n    putchar(x%10+'0');\n}\nvoid add(int x,int y)\n{\n    tot++;\n    d[tot]=y;\n    nxt[tot]=fr[x];\n    fr[x]=tot;\n}\nvoid tarjan(int u)\n{\n    s.push(u);\n    dfn[u]=low[u]=++cnt;\n    for (int i=fr[u];i;i=nxt[i])\n    {\n        int v=d[i];\n        if (v==f[u])\n            continue;\n        if (!dfn[v])\n        {\n            f[v]=u;\n            tarjan(v);\n            low[u]=min(low[u],low[v]);\n            if (low[v]>=dfn[u])\n            {\n                for (c[0]=0;;s.pop())\n                {\n                    c[++c[0]]=s.top();\n                    if (s.top()==v)\n                    {\n                        s.pop();\n                        break;\n                    }\n                }\n                c[++c[0]]=u;\n                if (c[0]>2)\n                    memcpy(a,c,(c[0]+1)*sizeof(int));\n            }\n        } else\n            low[u]=min(low[u],dfn[v]);\n    }\n}\nvoid rdfs();\nvoid dfs(int u,int F)\n{\n    ans[++ans[0]]=u;\n    for (int i=fr[u];i;i=nxt[i])\n    {\n        int v=d[i];\n        if (v==F)\n            continue;\n        if (ct1==u && ct2==v || ct1==v && ct2==u)\n            continue;\n        dfs(v,u);\n    }\n}\nvoid rdfs()\n{\n    int id=0,lst=a[a[0]-1];\n    for (int i=1;i<a[0];i++)\n        if (a[i]>lst)\n        {\n            id=i;\n            break;\n        }\n    int pr=-1;\n    if (!id)\n    {\n        for (int i=1;i<a[0];i++)\n        {\n            for (int j=fr[a[i]];j;j=nxt[j])\n                if (!h[d[j]] && d[j]!=f[a[i]])\n                {\n                    if (d[j]<a[i+1])\n                        continue;\n                    pr=d[j];\n                    break;\n                }\n            if (pr!=-1 && pr<a[i+1])\n            {\n                ct1=a[i+1];\n                ct2=a[i];\n                return;\n            }\n        }\n        ct1=a[a[0]],ct2=lst;\n    }   else\n    {\n        for (int i=1;i<id;i++)\n        {\n            for (int j=fr[a[i]];j;j=nxt[j])\n                if (!h[d[j]] && d[j]!=f[a[i]])\n                {\n                    if (d[j]<a[i+1])\n                        continue;\n                    pr=d[j];\n                    break;\n                }\n            if (pr!=-1 && pr<a[i+1])\n            {\n                ct1=a[i+1];\n                ct2=a[i];\n                return;\n            }\n        }\n        while (id<a[0])\n        {\n            if (a[id]>pr)\n                break;\n            for (int i=fr[a[id]];i;i=nxt[i])\n                if (!h[d[i]] && d[i]!=f[a[i]])\n                {\n                    if (d[i]<a[id+1])\n                        continue;\n                    pr=d[i];\n                    break;\n                }\n            id++;\n        }\n        ct1=a[id-1],ct2=a[id];\n    }\n}\nint main()\n{\n    n=read(),m=read();\n    for (int i=1;i<=m;i++)\n    {\n        x=read(),y=read();\n        e[x].push_back(y);\n        e[y].push_back(x);\n    }\n    for (int i=1;i<=n;i++)\n        sort(e[i].begin(),e[i].end());\n    for (int i=1;i<=n;add(i,*e[i].begin()),i++)\n        for (IT it=e[i].end()-1;it!=e[i].begin();it--)\n            add(i,*it);\n    tarjan(1);\n    if (a[1]>a[a[0]-1])\n        reverse(a+1,a+a[0]);\n    for (int i=1;i<=a[0];i++)\n        h[a[i]]=true;\n    rdfs();\n    dfs(1,0);\n    for (int i=1;i<=ans[0];i++)\n        write(ans[i]),putchar(' ');\n    putchar('\\n');\n    return 0;\n}\n```\n",
        "postTime": 1599566193,
        "uid": 10341,
        "name": "GK0328",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u68f5\u6811\u6216\u8005\u57fa\u73af\u6811\uff0c\u904d\u5386\u65f6\u4e0d\u80fd\u7ecf\u8fc7\u76f8\u540c\u7684\u70b9\uff0c\u5728\u904d\u5386\u9014\u4e2d\u53ef\u4ee5\u56de\u6eaf\uff0c\u8981\u6c42\u904d\u5386\u987a\u5e8f\u5b57\u5178\u5e8f\u6700\u5c0f\n\n## Solution\n\n\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u663e\u7136\u4ece1\u51fa\u53d1\u3002\n\n\u6811\u7684\u60c5\u51b5\u7b54\u6848\u662f\u552f\u4e00\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u5728\u6811\u4e2d\u6ca1\u6709\u904d\u5386\u5b8c\u672c\u8282\u70b9\u7684\u5b50\u6811\u5c31\u56de\u6eaf\u4f1a\u5bfc\u81f4\u5176\u5b50\u6811\u5185\u7684\u70b9\u65e0\u6cd5\u88ab\u904d\u5386\u5230\uff0c\u6240\u4ee5\u5728\u6811\u4e2d\u4e0d\u80fd\u56de\u6eaf\u3002\n\n\u56e0\u6b64\u8fd9\u9053\u95ee\u9898\u7684\u91cd\u70b9\u5728\u4e8e\u89e3\u51b3\u57fa\u73af\u6811\u4e0a\u7684\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u7684\u5f31\u5316\u7248$ (P5022) $\uff0c$ O(n^2) $\u679a\u4e3e\u4e00\u6761\u8fb9\u5220\u6389\u5c06\u5176\u53d8\u6210\u4e00\u68f5\u6811\u540e\u6c42\u89e3\u5373\u53ef\u901a\u8fc7\u3002\u4f46\u6b63\u89e3\u8981\u6c42$ O(n\\ log\\ n) $\u3002\n\n\u8d2a\u5fc3\u5730\u60f3\uff0c\u6211\u4eec\u6bcf\u5230\u8fbe\u4e00\u4e2a\u70b9\uff0c\u4fbf\u6309\u7167\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u4f9d\u6b21\u904d\u5386\u6240\u80fd\u5230\u8fbe\u7684\u70b9\u3002\n\n\u6211\u4eec\u8003\u8651\u5728\u57fa\u73af\u6811\u4e0a\u4f55\u65f6\u56de\u6eaf\uff1a\u663e\u7136\u5f53\u4e14\u4ec5\u5f53\u7ee7\u7eed\u4ece\u8fd9\u4e2a\u70b9\u51fa\u53d1\u80fd\u904d\u5386\u5230\u7684\u70b9\u7684\u6700\u5c0f\u503c\u5927\u4e8e\u56de\u6eaf\u4e4b\u540e\u80fd\u904d\u5386\u5230\u7684\u70b9\u7684\u6700\u5c0f\u503c\u3002\n\n\u4f46\u662f\u56de\u6eaf\u6709\u51e0\u4e2a\u9650\u5236\uff1a\n\n1.\u4ec5\u80fd\u5728\u73af\u4e0a\u8fdb\u884c\u2014\u2014\u4e0d\u80fd\u5728\u6811\u4e0a\u8fdb\u884c\u539f\u56e0\u5982\u4e0a\n\n2.\u8bbe\u5f53\u524d\u8282\u70b9\u4e3ax\uff0c\u987bx\u6240\u5bf9\u5e94\u7684\u90a3\u68f5\u6811\u5df2\u88ab\u904d\u5386\u5b8c\u2014\u2014\u56e0\u4e3a\u4ecex\u56de\u6eaf\u540e\u518d\u4e5f\u65e0\u6cd5\u5230\u8fbex\uff0c\u5219x\u5bf9\u5e94\u7684\u6811\u4e5f\u518d\u65e0\u6cd5\u5230\u8fbe\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u56de\u6eaf\u4e4b\u540e\u80fd\u904d\u5386\u5230\u7684\u70b9\u7684\u6700\u5c0f\u503c(\u8bbe\u4e3av)\uff1a\n\n1.\u8bbe\u5f53\u524d\u8282\u70b9\u4e3ax\uff0c\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3ay\uff0c\u5982\u679cx\u7684\u5176\u4ed6\u6240\u6709\u8282\u70b9\u90fd\u5df2\u904d\u5386\u8fc7\uff0c\u5219\u4ecey\u56de\u6eaf\u5230x\u540ex\u5c06\u7ee7\u7eed\u56de\u6eaf\uff0c\u56e0\u800c\u904d\u5386y\u65f6\u7684v\u76f4\u63a5\u7ee7\u627fx\u7684v\n\n2.\u5982\u679cx\u6709\u672a\u904d\u5386\u8fc7\u7684\u5176\u4ed6\u8282\u70b9\uff0c\u5219\u4ecey\u56de\u6eaf\u5230x\u540ex\u987b\u5148\u904d\u5386\u5176\u672a\u904d\u5386\u8fc7\u7684\u70b9\u540e\u518d\u56de\u6eaf\uff0c\u56e0\u6b64\u904d\u5386y\u65f6\u7684v\u5e94\u4e3ax\u672a\u904d\u5386\u8fc7\u7684\u70b9\u4e2d\u7684\u6700\u5c0f\u503c\n\n3.\u56e0\u4e3a\u8d77\u70b91\u53ef\u80fd\u5728\u57fa\u73af\u6811\u4e2d\u7684\u67d0\u68f5\u6811\u4e0a\uff0c\u6211\u4eec\u5e94\u8ba9\u5176\u6700\u540e\u56de\u6eaf\uff0c\u56e0\u6b64\u5224\u65ad\u4e00\u4e0bx\u662f\u5426\u5728\u73af\u4e0a\uff0c\u5982\u679c\u4e0d\u5728\u5219\u4e0b\u4f20\u4e00\u4e2ainf\u503c\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=5e5+10;\nvector<int>g[N],ans;\nbool lp[N],vis[N],ok;\nvoid read(int &x){\n\tint f=1;x=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\tx*=f;\n}\nvoid dfs(int x,int f){\n\tvis[x]=1;\n\tfor(int i=0;i<g[x].size();i++){\n\t\tint y=g[x][i];\n\t\tif(y==f)continue;\n\t\tif(vis[y])\n\t\t\treturn ok=lp[x]=lp[y]=1,void();\n\t\tdfs(y,x);\n\t\tif(ok)\n\t\t\treturn ok=lp[x]^1,lp[x]=1,void();\n\t}\n}\nvoid dfs2(int x,int f,int mx){\n\tif(vis[x])return;\n\tvis[x]=1,ans.push_back(x);\n\tpriority_queue<int>q;\n\tfor(int i=0;i<g[x].size();i++){\n\t\tint y=g[x][i];\n\t\tif(!vis[y])q.push(-y);\n\t}\n\twhile(!q.empty()){\n\t\tint y=q.top();q.pop(),y*=-1;\n\t\tif(q.empty()&&!ok&&lp[x]&&lp[y]&&y>mx)\n\t\t\treturn ok=1,void();\n\t\tif(!q.empty()&&lp[x])\n\t\t\tdfs2(y,x,-q.top());\n\t\telse dfs2(y,x,mx);\n\t}\n}\nint main(){\n\tint n,m;\n\tread(n),read(m);\n\tfor(int i=1,x,y;i<=m;i++){\n\t\tread(x),read(y);\n\t\tg[x].push_back(y);\n\t\tg[y].push_back(x);\n\t}\n\tdfs(1,0);\n\tmemset(vis,0,sizeof(vis)),ok=0;\n\tdfs2(1,0,1e9);\n\tfor(int i=0;i<n;i++)\n\t\tprintf(\"%d \",ans[i]);\n\treturn 0;\n}",
        "postTime": 1597197495,
        "uid": 35117,
        "name": "Mentos_Cola",
        "ccfLevel": 7,
        "title": "P5049 \u65c5\u884c"
    },
    {
        "content": "\u505a\u597d\u8fd9\u9053\u9898\u7684\u6807\u51c6\u7248\u672c\uff08[P5022](https://www.luogu.org/problem/P5022)\uff09\u3002\u7528\u7684\u65b9\u6cd5\u6bd4\u8f83\u81ea\u7136\uff1a\n\n- 0. \u505a\u597d\u6700\u57fa\u7840\u7684m=n-1\u7684\u5b57\u5178\u5e8f\u751f\u6210\u3002\n- 1. \u627e\u5230\u73af\uff0c\u7528\u4e00\u4e2aloop[n]\u6570\u7ec4\u8bb0\u5f55\uff1b\n- 2. \u7136\u540e\u4f9d\u6b21\u526a\u6389\u4e00\u4e2a\u8fb9\uff0c\u7528m=n-1\u4e0b\u7684\u65b9\u6cd5\u53bb\u751f\u6210\uff0c\u751f\u6210\u8fc7\u7a0b\u4e2d\u6bd4\u8f83\u662f\u5426\u6bd4\u5f53\u524d\u6700\u4f18\u89e3\u5dee\uff0c\u5982\u679c\u5dee\u4e86\uff0c\u5c31\u7ed3\u675f\u8fd9\u6b21\u7684\u5c1d\u8bd5\u3002\n\n\u5728\u751f\u6210\u57fa\u7840\u56fe\u7684\u65f6\u5019\uff0c\u91c7\u7528vector<int> G[n] \u65b9\u5f0f\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u4e2avector \u6392\u5e8f\u3002\u8fd9\u6837\u5df2\u7ecf\u81f3\u5c11\u662f**nlgn**\u7684\u65f6\u95f4\u6548\u7387\u4e86\u5427\u3002\n  \n\u627e\u73af\uff0c\u56e0\u4e3a\u672c\u8d28\u662f\u6811\u591a\u4e00\u6761\u8fb9\uff0c\u6ca1\u6709\u7528\u4ec0\u4e48\u9ad8\u7ea7\u7684\u7b97\u6cd5\uff0c\u5c31\u662f\u6309\u7167\u6811\u7684\u904d\u5386dfs\uff0c\u7b2c\u4e00\u6b21\u53d1\u73b0\u91cd\u5165\u7684\u70b9\uff0c\u5c31\u8bf4\u660e\u627e\u5230\u73af\u4e86\uff0c\u800c\u4e14\u8fd9\u4e2a\u70b9\u5c31\u662f\u201c\u73af\u6839\u201d\u3002\n  \n\u800c\u4e4b\u540e\u5bf9\u73af\uff0c\u4e00\u6b21\u6b21\u7684\u51cf\u8fb9\uff0c\u81f3\u5c11\u5f97\u662f n2 \u7684\u65f6\u95f4\u3002\u6240\u4ee5\u65e0\u6cd5\u901a\u8fc7P5049\u4e5f\u5f88\u6b63\u5e38\u3002\n \n\n\n\n------------\n  \u5bfb\u627e\u6539\u8fdb\u7684\u7b97\u6cd5\uff1a\n  - 1.\u627e\u73af\u7684\u7b97\u6cd5\u6ca1\u6709\u53bb\u4f18\u5316\uff1b\u4f46\u662f\u5bf9\u73af\u7684\u8868\u793a\u65b9\u5f0f\uff0c\u91c7\u7528\u4e86 _in[n]_ \u7684\u6570\u636e\u7ed3\u6784\u3002 in[i]=root, \u8868\u793a\u7b2ci\u70b9\u5728\u73af\u5185\uff08\u73af\u6839=root\uff0c\u6574\u4e2a\u7b97\u6cd5\u73af\u8ddf\u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u7528\uff09\uff1b\n  - \u627e\u5230\u73af\u540e\uff0c\u4e0d\u518d\u526a\u5207\u3002 \u76f4\u63a5dfs\uff08r\uff0cfa\uff0cnext\uff09\uff0c\n      \n  \u76f8\u6bd4\u8f83\u641c\u7d22\u6807\u51c6\u6811\uff0c\u8fd9\u6b21\u591a\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\uff1anext\uff0c\u8868\u793afa\u5728\u8bbf\u95ee\u5b8c\u5f53\u524d\u8282\u70b9\uff08r\uff09\u540e\uff0c\u51c6\u5907\u8bbf\u95ee\u7684\u8282\u70b9\u3002\u901a\u8fc7\u8fd9\u4e2anext\uff0c\u5b9e\u73b0\u4e86\u5224\u65ad r\u4e0efa\uff08r\u7684\u7236\u8282\u70b9\uff09\u662f\u5426\u8981\u65ad\u5f00\u3002\n  1. \u73af\u6ca1\u6709\u65ad\u8fc7\uff08\u56e0\u4e3a\u53ea\u80fd\u65ad\u4e00\u6b21\uff09\uff1b\n  1. r\u4e0efa\u90fd\u5728\u73af\u4e0a\uff08\u4e0d\u5728\u73af\u4e0a\u7684\u8fb9\u65ad\u4e86\uff0c\u56fe\u5c31\u4e0d\u8054\u901a\uff09\n  1. next<r,\u8fd9\u4e2a\u6761\u4ef6\u8bf4\u660e\uff1a\u628ar\u4e0efa\u65ad\u5f00\u540e\uff0c\u53bb\u8bbf\u95eenext\uff0c\u7ed3\u679c\u66f4\u4f18\u3002\n  \u8fd9\u6837\u57fa\u672c\u5c31\u5b8c\u6210\u4e86\u3002\u9700\u8981\u7684\u8fd8\u662f\u6ce8\u610f\u8fb9\u754c\u60c5\u51b5\uff0c\u5c31\u662f\u4e00\u76f4\u6ca1\u627e\u5230\u53ef\u4ee5\u65ad\u5f00\u7684\u8fb9\uff0c\u90a3\u4e48\u4f1a\u53c8\u4e00\u6b21\u8bbf\u95ee\u201c\u73af\u6839\u201c\uff0c\u7528vis\uff0c\u4e5f\u597d\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n                                          ```c\n#include<stdio.h>\n#include<queue>\n#include <cstring>\n#include<algorithm>\nusing namespace std;\n#define N  500001\n\nvector<int>G[N];\n\nint vis[N];\nint in[N]; // \u7528\u6765\u8bb0\u5f55\u73af\uff0c \u5982\u679c\u70b9i\u5728\u73af\u91cc\uff0c\u5219in[i]=root\uff0c root\uff1a\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff08\u73af\u6839\uff09\n\nint ans[N]; // \u8bb0\u5f55\u7b54\u6848\nint ansi=1;\n\nint n,m;\nvoid gadd(int a,int b)\n{\n    G[a].push_back(b);\n    G[b].push_back(a);\n}\n\nint findloop(int r, int fa)  // fa : father \u7236\u8282\u70b9\uff0croot\uff1a \u73af\u4e2d\u7684\u7b2c\u4e00\u4e2a\u70b9\uff08\u73af\u6839\uff09\n{\n    if (vis[r])  // \u53ea\u4f1a\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u88ab\u4e24\u6b21\u8bbf\u95ee\uff0c\u5c31\u662f\u73af\u6839\uff01\n        return in[r]=r;\n    vis[r] = 1;\n    for (int i=0;i<G[r].size();i++)\n    {\n        if (G[r][i]!=fa)\n        {\n            int root = findloop(G[r][i],r);\n            if (r==root) return 0 ;\n            if (root) return in[r]=root;\n        }\n    }\n    return 0 ;\n}\nint canback=1; // \u53ea\u80fd\u56de\u6eaf\u4e00\u6b21\u3002\u56de\u6eaf\u76f8\u5f53\u4e8e\u628a r\u4e0efa\u7684\u8fde\u63a5\u526a\u65ad\u4e86\uff01\nint dfs(int r,int fa,int next)// next \u4ee3\u8868\u8bbf\u95ee\u5b8cr\uff08\u4ee5\u53car\u7684\u5b50\u6811\uff09\u540e\u4e0b\u4e00\u4e2a\u8981\u8bbf\u95ee\u7684\u70b9\uff0c\u5982\u679cr\u6709\u5f1f\u5f1f\uff0c\u5219\u662f\u7b2c\u4e00\u4e2a\u5f1f\u5f1f\uff0c\u5982\u679c\u6ca1\u6709\u5f1f\u5f1f\uff0c\u5219\u662f\u4e0a\u4e00\u5c42\u4f20\u7ed9fa\u7684\u503c\u3002\n{\n    if (canback&&(vis[r]||(in[fa]&&in[r] && next<r))) // \u53ea\u6709r\u548cfa\u90fd\u5728\u73af\u4e0a\uff0c\u624d\u53ef\u80fd\u5141\u8bb8\u51cf\u6389\uff08\u56de\u6eaf\uff09\uff0c\u53ea\u6709\u4e0b\u4e00\u6b65\u8bbf\u95ee\u7684\u70b9next\u6bd4r\u5c0f\uff0c\u624d\u9700\u8981\u56de\u6eaf\uff08\u5373\u5f53\u524d\u4e0d\u8bbf\u95eer\u4e86\uff0c\u4eca\u540e\u901a\u8fc7\u4ece\u73af\u7684\u53e6\u5916\u4e00\u8fb9\u8fd8\u662f\u80fd\u8bbf\u95ee\u5230r\u7684\uff09,\u53ea\u6709\u201c\u73af\u6839\u201c\u53ef\u80fd\u5728\u7b2c\u4e8c\u6b21\u8bbf\u95ee\u7684\u65f6\u5019\uff0c\u526a\u65ad\u3002\n        return canback=0;  // \u526a\u65ad r\u4e0efa\uff0c \u5176\u5b9e\u5c31\u662f\u5565\u4e8b\u90fd\u4e0d\u5e72\uff08\u4f46\u5f97\u628a\u5141\u8bb8\u56de\u6eaf\u7684\u6807\u5fd7\u6e05\u4e86\uff09\n    \n    if (vis[r]) return 0 ;\n    ans[ansi++]=r; vis[r]=1;\n    \n    for (int i=0;i<G[r].size();i++)\n    {\n        if (G[r][i]!=fa)\n        {\n            int nn = next;\n            for (int j=i+1;j<G[r].size();j++)\n                if (G[r][j]!=fa)\n                {\n                    nn = G[r][j];\n                    break;\n                }\n            dfs(G[r][i],r,nn);\n        }\n    }\n    return 0 ;\n}\n\n\nint main()\n{\n    memset(vis,0,sizeof vis);\n    memset(in,0,sizeof in);\n    scanf(\"%d%d\",&n,&m);\n    int u,v;\n    for (int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&u,&v);\n        gadd(u,v);\n    }\n    \n    for(int i=1;i<=n;i++)\n        sort(G[i].begin(),G[i].end());\n    \n    if (m==n)\n    {\n        findloop(1,-1);\n        memset(vis,0,sizeof vis);\n    }\n\n    dfs(1,-1,0);\n    for(int i=1;i<=n;i++)\n        printf(\"%d \",ans[i]);\n    printf(\"\\n\");\n    \n    return 0 ;\n}\n\n```\n\n  \n  \n  \n  \n  \n  \n  \n \n  \n",
        "postTime": 1573108002,
        "uid": 155296,
        "name": "xcgang",
        "ccfLevel": 0,
        "title": "P5049"
    },
    {
        "content": "\u5927\u610f\n\u8f93\u5165\u4e00\u68f5\u6811\uff0cn \u4e2a\u70b9\uff0cn ? 1 \u6761\u8fb9\uff0c\u627e\u5230\u4e00\u4e2a DFS \u5e8f\u6700\u5c0f\u7684 DFS \u5e8f\u5217\u3002\n\u8f93\u5165\u4e00\u68f5\u5e26\u73af\u6811\uff0cn \u4e2a\u70b9\uff0cn ? 1 \u6761\u8fb9\uff0c\u627e\u5230\u4e00\u4e2a DFS \u5e8f\u6700\u5c0f\u7684 DFS \u5e8f\u5217\u3002\u5bf9\u4e8e\u6240\u6709\u6570\u636e n \u2264 5000\u3002\n\u505a\u6cd5\n\u5bf9\u4e8e\u4e00\u4e2a\u6811\u7684\u60c5\u51b5\u5927\u6982\u662f\u6bcf\u6b21 DFS \u6807\u53f7\u6700\u5c0f\u7684\u5b69\u5b50\u3002\n## AC Code\uff1a\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nint *E[5005], D[5005];\nint e[5005][2], dx, dy;\nint cur[5005], ans[5005];\nbool v[5005];\nvoid dfs(int i)\n{\n\tv[i] = 1;\n\tcur[++*cur] = i;\n\tfor(int k = D[i]; k--; )\n\t\tif(!v[E[i][k]] && !(i == dx && E[i][k] == dy) && !(i == dy && E[i][k] == dx))\n\t\t\tdfs(E[i][k]);\n// v[i] = 0;\n}\nint main()\n{\n\tint n, m;\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1; i <= m; ++i)\n\t{\n\t\tint x, y;\n\t\tscanf(\"%d%d\", &x, &y);\n\t\te[i][0] = x;\n\t\te[i][1] = y;\n\t\tD[x]++;\n\t\tD[y]++;\n\t}\n\tfor(int i = 1; i <= n; ++i)\n\t{\n\t\tE[i] = new int[D[i] + 1];\n\t\tD[i] = 0;\n\t}\n\tfor(int i = 1; i <= m; ++i)\n\t{\n\t\tint x = e[i][0], y = e[i][1];\n\t\tE[x][D[x]++] = y;\n\t\tE[y][D[y]++] = x;\n\t}\n\tfor(int i = 1; i <= n; ++i)\n\t{\n\t\tstd::sort(E[i], E[i] + D[i]);\n\t\tstd::reverse(E[i], E[i] + D[i]);\n\t}\n\tif(m == n - 1)\n\t{\n\t\tdfs(1);\n\t\tmemcpy(ans + 1, cur + 1, n << 2);\n\t}\n\telse\n\t{\n\t\tans[1] = n + 1;\n\t\tfor(int i = 1; i <= m; ++i)\n\t\t{\n\t\t\tdx = e[i][0];\n\t\t\tdy = e[i][1];\n\t\t\t*cur = 0;\n\t\t\tmemset(v + 1, 0, n);\n\t\t\tdfs(1);\n\t\t\tif(*cur == n)\n\t\t\t{\n\t\t\t\tbool copy = 1;\n\t\t\t\tfor(int i = 1; i <= n; ++i)\n\t\t\t\t{\n\t\t\t\t\tif(cur[i] > ans[i]) copy = 0;\n\t\t\t\t\tif(cur[i] != ans[i]) break;\n\t\t\t\t}\n\t\t\t\tif(copy) memcpy(ans + 1, cur + 1, n << 2);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 1; i <= n; ++i) printf(\"%d%c\", ans[i], \" \"[i == n]);\n}\n\n```\n# \u8f6c\u81ea\u77e5\u4e4e",
        "postTime": 1572342749,
        "uid": 220889,
        "name": "Wind_Shear",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "$\\Theta(n^2)$\u66b4\u529b+\u4e71\u641e\u6709\u4eba\u542c\u561b\uff1f\n![](https://img2018.cnblogs.com/i-beta/1714305/201911/1714305-20191114091039281-1593723729.png)\n\u5b83A\u4e86\u2026\u2026\n\n\u6000\u7591\u6570\u636e\u5230\u5e95\u6709\u6ca1\u6709\u52a0\u5f3a\u2026\u2026\n\n[\u653e\u4e2a\u94fe\u63a5\u5c31\u8dd1\uff5e](https://www.cnblogs.com/wzc521/p/11854711.html)",
        "postTime": 1573694166,
        "uid": 93488,
        "name": "Porsche",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5049 \u3010\u65c5\u884c\uff08\u6570\u636e\u52a0\u5f3a\u7248\uff09\u3011"
    }
]