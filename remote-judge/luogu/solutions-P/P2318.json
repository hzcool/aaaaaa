[
    {
        "content": "~~\u6211\u770b\u4e86\u8be5\u9898\u7684\u51e0\u7bc7\u9898\u89e3\uff0c\u4ec0\u4e48map+set,\u4ec0\u4e48\u7ebf\u6bb5\u6811\uff0c\u62b1\u6b49\u6211\u90fd\u4e0d\u4f1a~~\n\n\u849f\u84bb\u7684\u65b9\u6cd5\uff0c\u5927\u4f6c\u52ff\u55b7\u3002\n\n\u5b9e\u9645\u4e0a\u53ea\u9700\u4e00\u4e2a**\u4f18\u5148\u961f\u5217**\u5c31\u80fd\u8fc7\u4e86\uff0c\u5e76\u4e14\u8dd1\u5f97**\u8d3c\u5feb**\u3002\u3002\u3002\u3002\u3002\u3002\n\n _\u7528\u666e\u901a\u6570\u7ec4\u5b58\u4e0d\u4e0b1e9\uff0c\u79bb\u6563\u5c31\u884c\u4e86\u3002_ \n\n\u5173\u4e8e\u6392\u5e8f\u7684\u4f18\u5148\u7ea7\uff0c\u76f4\u63a5\u5148\u6309\u7167\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\uff0c\u518d\u6309\u7167\u65f6\u95f4\u6392\u5e8f\uff0c\u521a\u5f00\u59cb\u6253\u65f6\uff0c\u6211\u628a\u5927\u4e8e\u5c0f\u4e8e\u5f04\u53cd\u4e86\uff0c\u5361\u4e86\u597d\u51e0\u4e2a\u5c0f\u65f6\u3002\u3002\u3002\u3002\u3002\u3002\n\n1. \u82e5\u5185\u5b58\u672a\u88ab\u6392\u6ee1\uff0c\u76f4\u63a5\u5c06\u5176\u585e\u5165\u3002\n\n2. \u82e5\u5df2\u6392\u6ee1\uff0c\u5176\u5b9e\u5f53\u524d\u9875\u5728\u4e0d\u5728\u961f\u5217\u4e2d\u90fd\u4e0d\u91cd\u8981\uff0c\u9047\u5230\u5df2\u7ecf\u5b58\u5728\u9875\u5c31\u52a01\u5373\u53ef\u3002\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u53d6\u961f\u9996\u5143\u7d20\uff0c\u5c06\u5176\u51fa\u961f\u76f4\u5230\u80fd\u591f\u653e\u7f6e\u65f6\u5c31\u884c\u4e86\u3002\n\n\u76f4\u63a5\u89c1\u6211\u7cbe\u7b80\u4f46\u65e0\u8111\u7684\u4ee3\u7801\uff1a\n\n```\n#include<iostream>\n#include<stdio.h>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nconst int maxn=1e6+5;\nstruct node {\n\tint xu,t;\n\tbool operator<(const node &a)const {\n\t\tif(t==a.t)return xu>a.xu;\n\t\treturn t>a.t;\n\t}\n};\npriority_queue<node>q;\nint a[maxn],b[maxn];\nint num[maxn];\nint main() {\n\tint n,m;\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i=1; i<=m; i++)scanf(\"%d\",&a[i]),b[i]=a[i];\n\tsort(b+1,b+m+1);\n\tint k=unique(b+1,b+m+1)-b-1;\n\tint tot=0,ans=0;\n\tfor(int i=1; i<=m; i++) {\n\t\ta[i]=lower_bound(b+1,b+k+1,a[i])-b;\n\t\tif(num[a[i]])num[a[i]]++,ans++;\n\t\telse if(tot<n)tot++,num[a[i]]=1;\n\t\telse {\n\t\t\tnode res=q.top();\n\t\t\tq.pop();\n\t\t\twhile(num[a[res.xu]]!=res.t)res=q.top()\uff0cq.pop();\n\t\t\tnum[a[i]]++,num[a[res.xu]]=0;\n\t\t}\n\t\tq.push((node)<%i,num[a[i]]%>);\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1563078315,
        "uid": 200853,
        "name": "liunian",
        "ccfLevel": 0,
        "title": "\u865a\u62df\u5185\u5b58\uff08P2318\uff09"
    },
    {
        "content": "~~Luogu\u7684\u67d0\u4e9b\u7528\u6237\u5b9e\u5728\u662f\u65e0\u826f\u5fc3\u554a\uff0c\u8fd9\u4e48\u4e00\u9053\u5927\u6982\u52c9\u5f3a\u8fbe\u5230\u63d0\u9ad8\u8981\u6c42\u7684STL\u9898\u5c45\u7136\u88ab\u5f04\u6210\u4e86\u7d2b\u9898\u3002\u3002~~ \n## \u601d\u8def\n\u611f\u89c9\u53e6\u5916\u51e0\u4f4d\u9898\u89e3\u4e2d\u7684\u5927\u725b\u90fd\u5bf9\u8fd9\u9898\u60f3\u7684\u592a\u590d\u6742\u4e86\u3002\u5728\u8fd9\u91cc\u8bf4\u4e00\u4e0b\u672c\u849f\u84bb\u7684\u601d\u8def\u3002\u7528\u7ed3\u6784\u4f53\u5f00\u4e00\u4e2amap\u548c\u4e00\u4e2apriority_queue\u6765\u7ef4\u62a4\u5185\u5b58\u3002\n\n```cpp\nstruct node{//\u8fd9\u4e2a\u662f\u7ef4\u62a4map\u7684\uff0ca\u8868\u793a\u8fd9\u4e2a\u5143\u7d20\u662f\u5426\u5728\u5185\u5b58\u4e2d\uff0cb\u662f\u4e2a\u795e\u5947\u7684\u53d8\u91cf\u63a5\u4e0b\u6765\u518d\u8bb2\n\tint a,b;\n};\nstruct noded{//\u8fd9\u4e2a\u662f\u7ef4\u62a4priority_queue\u7684\uff0ca\u8868\u793a\u51fa\u73b0\u5728\u5185\u5b58\u4e2d\u7684\u6b21\u6570\uff0cb\u5143\u7d20\u7684\u6570\u5b57\uff0cc\u8868\u793a\u8fdb\u5165\u5185\u5b58\u7684\u65f6\u95f4\n\tint a,b,c;\n};\nbool operator <(noded a,noded b){//\u7ef4\u62a4\u4e00\u4e0bpriority_queue\uff0c\u56e0\u4e3a\u81ea\u5b9a\u4e49\u4e86\u7ed3\u6784\u4f53\uff0c\u80af\u5b9a\u4e0d\u80fd\u7528\u539f\u6765\u7684\uff0ca.c<b.c\u8ddf\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u6709\u5173\n\treturn a.b==b.b? a.c<b.c:a.a>b.a;\n}\nmap<int,node> p;\npriority_queue<node> q;\n```\n\u7136\u540e\u600e\u4e48\u7528\u8fd9\u4e24\u4e2a\u4e1c\u897f\u6765\u7ef4\u62a4\u5185\u5b58\u5462\uff1f\u9996\u5148\u8bfb\u5165\u4e00\u4e2a\u6570\uff0c\u7528map\u5224\u65ad\u4e00\u4e0b\u8fd9\u4e2a\u5143\u7d20\u662f\u5426\u5728\u5185\u5b58\u4e2d\uff0c\u5982\u679c\u5728\u7684\u8bdd\uff0c\u5c31\u628a\u8fd9\u4e2a\u5728map\u4e2d\u7684\u5143\u7d20\u7684b\u503c\u52a01\uff0c\u4e5f\u5c31\u662f\u8bf4\u5185\u5b58\u4e2d\u7684\u5143\u7d20\u6bd4\u5806\u4e2d\u50a8\u5b58\u7684\u5143\u7d20\u51fa\u73b0\u6b21\u6570\u8981\u59271\uff0c\u7b54\u6848\u4e5f\u53ef\u4ee5\u8ddf\u7740+1\u3002\u5982\u679c\u4e0d\u5728\u7684\u8bdd\uff0c\u5224\u65adq.size()\u662f\u5426\u7b49\u4e8en\uff0c\u5982\u679c\u4e0d\u7b49\u4e8e\u5c31\u65e0\u8111\u63d2\u5165\u3002\u5982\u679c\u7b49\u4e8en\u7684\u8bdd\uff0c\u5c31\u627e\u5185\u5b58\u4e2d\u627e\u51fa\u73b0\u6b21\u6570\u6700\u5c11\u7684\u5143\u7d20\u3002\u6b65\u9aa4\u662f\u8fd9\u6837\u7684\u3002\u2460\uff1a\u5148\u53d6q.top()\uff0c\u8bb0\u4e3acache\u4e34\u65f6\u53d8\u91cf\uff0c\u628aq.top()\u5f39\u51fa\u3002\u2461\uff1a\u5224\u65adp[cache.b].b\u662f\u5426\u7b49\u4e8e0\uff0c\u5982\u679c\u4e0d\u7b49\u4e8e0\uff0c\u8bf4\u660e\u5806\u4e2d\u7684\u5143\u7d20\u51fa\u73b0\u6b21\u6570\u5e76\u4e0d\u662f\u5b9e\u9645\u5185\u5b58\u4e2d\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5c31\u628acache.b\u52a0\u4e0ap[cache.b].b\uff0c\u4e4b\u540e\u91cd\u65b0\u628acache\u653e\u5230\u5806\u91cc\u3002\u518d\u6b21\u8fdb\u884c\u6b65\u9aa4\u2460\u3002\u5982\u679c\u7b49\u4e8e0\uff0c\u8bf4\u660e\u8fd9\u4e2a\u5143\u7d20\u5c31\u662f\u5185\u5b58\u4e2d\u51fa\u73b0\u6700\u5c11\u7684\u5143\u7d20\uff0c\u5f39\u51fa\u8fd9\u4e2a\u5143\u7d20\uff0c\u5e76\u628a\u65b0\u5143\u7d20\u52a0\u8fdb\u53bb\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<map>\nusing namespace std;\nstruct node{\n\tint a,b;\n};\nstruct noded{\n\tint a,b,c;\n};\nbool operator <(noded a,noded b){\n\treturn a.a==b.a? a.c<b.c:a.a>b.a;\n}\nmap<int,node> p;\npriority_queue<noded> q;\nmain(){\n\tint n,m,cache,ans=0;\n\tscanf(\"%d%d\",&n,&m);\n\twhile(m--){\n\t\tscanf(\"%d\",&cache);\n\t\tif(p[cache].a==1) ++p[cache].b,++ans;\n\t\telse {\n\t\t\tnoded pp;\n\t\t\tp[cache].a=1;\n\t\t\tpp.b=cache;\n\t\t\tpp.a=1;\n\t\t\tpp.c=m;\n\t\t\tif(q.size()<n) q.push(pp); else {\n\t\t\t\tnoded ppp;\n\t\t\t\tmark:ppp=q.top();\n\t\t\t\tq.pop();\n\t\t\t\tif(p[ppp.b].b>0){\n\t\t\t\t\tppp.a+=p[ppp.b].b;\n\t\t\t\t\tp[ppp.b].b=0;\n\t\t\t\t\tq.push(ppp);\n\t\t\t\t\tgoto mark;\n\t\t\t\t}\n\t\t\t\tp[ppp.b].a=0;\n\t\t\t\tq.push(pp);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\",ans);\n}\n```\n\n(\u6bd4\u5176\u4ed6\u9898\u89e3\u77ed\u591a\u4e86\uff01\uff09",
        "postTime": 1525842559,
        "uid": 24205,
        "name": "jiaangk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2318 \u3010[HNOI2005]\u865a\u62df\u5185\u5b58\u3011"
    },
    {
        "content": "## \u524d\u6587\n\u8fd9\u662f\u6211\u4eec\u4eca\u5929\u6a21\u62df\u8d5b\u6253\u5230\u7684\u9898\uff0c\u6ca1\u60f3\u5230\u80fd\u662f\u4e00\u9053\u7d2b\u9898\uff08~~\u5efa\u8bae\u964d\u7eff~~\n\n# \u601d\u8def\n\u5404\u4f4d\u5de8\u4f6c\u7684\u4f18\u5148\u961f\u5217\u4f18\u5316\u7684\u7b97\u6cd5\u6ca1\u60f3\u5230\uff0c\u6211\u592a\u83dc\u4e86 /kk\uff0c\u8003\u573a\u4e0a\u60f3\u51fa\u6765\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u505a\u6cd5\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u5171\u6709\u8be5\u533a\u95f4\u540c\u4e00\u5185\u5bb9\u51fa\u73b0\u7684\u6700\u5c0f\u6b21\u6570\uff0c\u6700\u5c0f\u6b21\u6570\u5185\u5bb9\u5bf9\u5e94\u7684\u5b58\u5165\u65f6\u95f4\u548c\u5185\u5bb9\u7f16\u53f7\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $a$\uff0c\u7528\u4e00\u4e2a unordered_map (\u4e0d\u7528\u79bb\u6563\u5316)\u4fdd\u5b58\u7f16\u53f7\u4e3a $x$ \u7684\u5185\u5bb9\u6700\u540e\u51fa\u73b0\u5728\u5185\u5b58\u7684\u7b2c\u51e0\u9875\uff0c\u5373\u7ebf\u6bb5\u6811\u7b2c\u51e0\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u7136\u540e\u8be2\u95ee\u8be5\u8282\u70b9\u7ef4\u62a4\u7684\u5185\u5b58\u7f16\u53f7\u662f\u5426\u4e3a $x$\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $b$\uff0c\u63d0\u524d\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u8fd8\u5269\u591a\u5c11\u7a7a\u9875\uff0c\u6bcf\u6b21\u4fee\u6539\u7ebf\u6bb5\u6811\u7684\u8be5\u8282\u70b9\uff1b\n\n\u5bf9\u4e8e \u64cd\u4f5c $c$\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 $n$ \u4e2a\u5185\u5b58\u9875\u4e2d\u8bbf\u95ee\u6b21\u6570\u6700\u5c11\u4e14\u6700\u65e9\u51fa\u73b0\u7684\u5185\u5b58\u9875\uff0c\u7136\u540e\u6bcf\u6b21\u90fd\u5c06\u8be5\u5185\u5b58\u9875\u7684\u5185\u5bb9\u66ff\u6362\u4e3a\u73b0\u5728\u7f16\u53f7\u7684\u5185\u5bb9\uff1b\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m \\log n)$\n\n# code\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int maxn=1e4+10;\nstruct node{\n\tint sum,mino,minn;\n}tree[maxn<<5];\nint s,ans,i=1;\nunordered_map<int,int> mp;\nvoid pushdown(int p)\n{\n\tif(tree[p*2].mino!=-1)\n\t{\n\t\ttree[p].sum=tree[p*2].sum;\n\t\ttree[p].mino=tree[p*2].mino;\n\t\ttree[p].minn=tree[p*2].minn;\n\t}\n\tif(tree[p*2+1].mino!=-1)\n\t{\n\t\tif(tree[p].sum==-1)\n\t\t{\n\t\t\ttree[p].sum=tree[p*2+1].sum;\n\t\t\ttree[p].mino=tree[p*2+1].mino;\n\t\t\ttree[p].minn=tree[p*2+1].minn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(tree[p].sum>tree[p*2+1].sum)\n\t\t\t{\n\t\t\t\ttree[p].sum=tree[p*2+1].sum;\n\t\t\t\ttree[p].mino=tree[p*2+1].mino;\n\t\t\t\ttree[p].minn=tree[p*2+1].minn;\n\t\t\t}\n\t\t\telse\n\t\t\tif(tree[p].sum==tree[p*2+1].sum)\n\t\t\t{\n\t\t\t\tif(tree[p].minn>tree[p*2+1].minn)\n\t\t\t\t{\n\t\t\t\t\ttree[p].mino=tree[p*2+1].mino;\n\t\t\t\t\ttree[p].minn=tree[p*2+1].minn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid build(int p,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\ttree[p].sum=-1;\n\t\ttree[p].mino=-1;\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(p*2,l,mid);\n\tbuild(p*2+1,mid+1,r);\n\ttree[p].sum=-1;\n\ttree[p].mino=-1;\n}\nint find(int p,int l,int r,int x)\n{\n\tint cnt;\n\tif(l==r)\n\t{\n\t\tif(tree[p].mino==x)\n\t\t{\n\t\ttree[p].sum++;\n\t\treturn 1;\n\t\t}\n\t\telse\n\t\treturn 0;\n\t}\n\tint mid=(l+r)>>1;\n\tif(mp[x]<=mid)\n\tcnt=find(p*2,l,mid,x);\n\tif(mid<mp[x])\n\tcnt=find(p*2+1,mid+1,r,x);\n\tpushdown(p);\n\treturn cnt;\n}\nvoid modify(int p,int l,int r,int x)\n{\n\tif(l==r)\n\t{\n\t\ttree[p].mino=x;\n\t\ttree[p].sum=1;\n\t\ttree[p].minn=i;\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tif(mp[x]<=mid)\n\tmodify(p*2,l,mid,x);\n\tif(mid<mp[x])\n\tmodify(p*2+1,mid+1,r,x);\n\tpushdown(p);\n}\nvoid change(int p,int l,int r,int x,int y)\n{\n\tif(l==r)\n\t{\n\t\ttree[p].sum=1;\n\t\ttree[p].mino=y;\n\t\ttree[p].minn=i;\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid)\n\tchange(p*2,l,mid,x,y);\n\tif(mid<x)\n\tchange(p*2+1,mid+1,r,x,y);\n\tpushdown(p);\n}\nsigned main()\n{\n//\tfreopen(\"memory.in\",\"r\",stdin);\n//\tfreopen(\"memory.out\",\"w\",stdout);\n\tint n,m;\n\tscanf(\"%lld%lld\",&n,&m);\n\tbuild(1,1,n);\n\ts=n;\n\tfor(;i<=m;++i)\n\t{\n\t\tint x;\n\t\tscanf(\"%lld\",&x);\n\t\tif(mp[x]!=0&&find(1,1,n,x))\n\t\t\tans++;\n\t\telse\n\t\tif(s>0)\n\t\t{\n\t\t\tmp[x]=s;\n\t\t\tmodify(1,1,n,x);\n\t\t\ts--;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint p=tree[1].mino;\n\t\t\tchange(1,1,n,mp[p],x);\n\t\t\tmp[x]=mp[p];\n\t\t}\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1666412793,
        "uid": 374756,
        "name": "\u5fd8\u601c\u57ce\u7fa1",
        "ccfLevel": 5,
        "title": "P2318 [HNOI2005]\u865a\u62df\u5185\u5b58"
    },
    {
        "content": "\u5e73\u8861\u6811\uff08\u662f\u4e0d\u53ef\u80fd\u7684\uff09\n\n\u5176\u5b9e\u662fSTL\u3002\n\n\u5f00\u4e00\u4e2aset\u7ef4\u62a4\u865a\u62df\u5185\u5b58\u4e2d\u7684\u6570\u5b57\uff0c\u4ee5\u8bbf\u95ee\u6b21\u6570\u7b2c\u4e00\u7ef4\uff0c\u8fdb\u5165\u65f6\u95f4\u7b2c\u4e8c\u7ef4\u6392\u5e8f\u3002\n\n\u518d\u5f00\u4e00\u4e2amap\u7ef4\u62a4\u865a\u62df\u5185\u5b58\u4e2d\u6570\u5b57\u8bbf\u95ee\u6b21\u6570\uff0c\u7528\u4e8e\u8f85\u52a9\u67e5\u627e\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c\uff0c\u5982\u679cmap\u4e2d\u8bb0\u5f55\u8fc7\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u4e00\u5b9a\u5728\u865a\u62df\u5185\u5b58\u4e2d\uff0c\u76f4\u63a5lower\\_bound\u627e\u5230\u5b83\uff0c\u5c06\u5b83\u7684\u8bbf\u95ee\u6b21\u6570+1(\u8bb0\u5f97\u4e5f\u8981\u5728map\u4e2d+1)\uff0c\u518d\u628a\u5b83\u653e\u56de\u53bb\u3002\n\n\u5426\u5219\u770b\u770b\u88c5\u6ee1\u6ca1\uff0c\u88c5\u6ee1\u4e86\u5c31\u5c06set\u4e2d\u7b2c\u4e00\u4e2a\u6570\u5220\u6389\u3002\u76f4\u63a5\u63d2\u5165\uff0cmap\u5bf9\u5e94\u503c\u8bbe\u7f6e\u4e3a1.\n\n\u7136\u540e\u5c31\u6ca1\u6709\u7136\u540e\u4e86\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define For(i,a,b) for(i=(a);i<=(b);++i)\n#define Forward(i,a,b) for(i=(a);i>=(b);--i)\n#define Rep(i,a,b) for(register int i=(a);i<=(b);++i)\n#define Repe(i,a,b) for(register int i=(a);i>=(b);--i)\nusing namespace std;\ntemplate<typename T>inline void read(T &x)//\u5feb\u8bfb\n{\n    T s=0,f=1;char k=getchar();\n    while(!isdigit(k)&&(k^'-'))k=getchar();\n    if(!isdigit(k)){f=-1;k=getchar();}\n    while(isdigit(k)){s=s*10+(k^48);k=getchar();}\n    x=s*f;\n}\nvoid file()\n{\n    #ifndef ONLINE_JUDGE\n        freopen(\"water.in\",\"r\",stdin);\n        freopen(\"water.out\",\"w\",stdout);\n    #endif\n}\nstatic map<int,int>K;//\u8f85\u52a9\u7528map\nstruct node//\u5b9a\u4e49\u8282\u70b9\u548c\u6392\u5e8f\u65b9\u5f0f\n{\n    int tm,num,cnt;\n    friend bool operator<(node a,node b)\n    {return a.cnt^b.cnt?a.cnt<b.cnt:a.tm<b.tm;}\n};\nstatic set<node>G;//\u865a\u62df\u5185\u5b58\nstatic set<node>::iterator it;\nstatic int cnt,n,m;\nvoid init()\n{\n    read(n);read(m);\n}\nstatic int ans;\nvoid solve()\n{\n    static int x,now,tm;\n    Rep(i,1,m)//\u5177\u4f53\u65b9\u5f0f\u89c1\u4e0a\n    {\n        read(x);\n        if(!K[x])\n        {\n            if(cnt>=n)\n            {\n                K[G.begin()->num]=0;\n                G.erase(G.begin());\n            }\n            else ++cnt;\n            G.insert((node){i,x,1});\n            K[x]=1;\n        }\n        else\n        {\n            ++ans;\n            now=K[x]+1;\n            it=G.lower_bound((node){0,x,now-1});\n            for(;it->num!=x;++it);\n            tm=it->tm;\n            G.erase(it);\n            G.insert((node){tm,x,now});\n            ++K[x];\n        }\n    }\n    printf(\"%d\\n\",ans);\n}\nint main()\n{\n    file();\n    init();\n    solve();\n    return 0;\n}//\u7136\u800c05\u5e74\u5e76\u4e0d\u80fd\u7528stl\n```",
        "postTime": 1512094554,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2318 \u3010[HNOI2005]\u865a\u62df\u5185\u5b58\u3011"
    },
    {
        "content": "\u5199\u4e86\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u6ca1\u60f3\u5230\u9898\u89e3\u6709\u4f18\u5148\u961f\u5217...  \n\u4ee5\u4e3a\u7c7b\u4f3c dij \u7684\u4f18\u5148\u961f\u5217\u5199\u6cd5\u4f1a\u88ab\u5361\uff0c\u540e\u6765\u60f3\u60f3\uff0c\u6700\u574f\u60c5\u51b5\u4e5f\u5c31\u662f\u6240\u6709\u70b9\u5165\u961f\u518d\u51fa\u961f\uff0c\u4f3c\u4e4e\u6ca1\u6709\u95ee\u9898...  \n\u8fd9\u7bc7\u9898\u89e3\u53ef\u80fd\u80fd\u89e3\u91ca\u4e3a\u4ec0\u4e48\u6709\u4e2a `\u54c8\u5e0c` \u6807\u7b7e...  \n\n\u79bb\u6563\u5316\u540e\uff0c\u7528 \u6b21\u6570$\\times 1e6+$\u65f6\u95f4 \u505a\u54c8\u5e0c\u503c\uff0c\u5bf9\u5176\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u8be2\u6700\u5c0f\uff0c\u8fd9\u91cc\u662f\u7528\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7136\u540e...\u5c31\u6ca1\u4e86...  \n\u867d\u7136\u65f6\u7a7a\u95f4\u5e38\u6570\u90fd\u597d\u5927...  \n\uff08\u53e6\u5916\uff0c\u4f3c\u4e4e\u6570\u636e\u4e0d\u5f3a\uff1f\u54c8\u5e0c\u51fd\u6570\u6253\u9519\u80fd\u62ff 90 \uff1f~~\u7136\u540e\u77aa\u4e86\u534a\u5929\u5b9e\u5728\u592a\u83dc\u4e86~~\uff09\n```cpp\n#include <cstdio>\n#include <vector>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int MAXN = 1000005;\nconst ll L = 1;\nconst ll R = 1000000000000;\nstruct segmentTree { // \u6743\u503c\u7ebf\u6bb5\u6811\n\t#define lson ls[x]\n\t#define rson rs[x]\n\tvector<int> cnt, typ, ls, rs; int tot;\n\t//int cnt[6000005], typ[6000005], ls[6000005], rs[6000005], tot;\n    \t// \u4e00\u5f00\u59cb\u54c8\u5e0c\u51fd\u6570\u6253\u9519 RE \u4e86\u4e00\u4e2a\u70b9\uff0c\u4ee5\u4e3a\u6570\u7ec4\u70b8\u4e86...\n\tvoid expand() { // \u6323\u624e\u884c\u4e3a...\n\t\tcnt.push_back(0); \n\t\ttyp.push_back(0);\n\t\tls.push_back(0);\n\t\trs.push_back(0);\n\t}\n\tsegmentTree() { tot = 1, expand(), expand(); }\n\tvoid pushup(int x) { cnt[x] = cnt[lson] + cnt[rson]; }\n\tvoid pushdownl(int x) { if (!lson) lson = ++tot, expand(); }\n\tvoid pushdownr(int x) { if (!rson) rson = ++tot, expand(); }\n\tvoid change(int x, ll l, ll r, ll p, int k, int t) {\n\t\tif (l == r) cnt[x] += k, typ[x] = t;\n\t\telse {\n\t\t\tll mid = (l + r) >> 1;\n\t\t\tif (p <= mid) pushdownl(x), change(lson, l, mid, p, k, t);\n\t\t\tif (p >  mid) pushdownr(x), change(rson, mid+1, r, p, k, t);\n\t\t\tpushup(x);\n\t\t}\n\t}\n\tint front(int x, ll l, ll r) {\n\t\tif (l == r) return typ[x];\n\t\tll mid = (l + r) >> 1;\n\t\tif (lson && cnt[lson]) return front(lson, l, mid);\n\t\telse return front(rson, mid+1, r);\n\t}\n} ST;\nstruct opt {\n\tint a, b, id;\n} P[MAXN];\nint N, M; ll hash[MAXN];\nint cmp1(opt x, opt y) { return x.a < y.a; }\nint cmp2(opt x, opt y) { return x.id < y.id; }\nint main()\n{\n\tscanf(\"%d%d\", &N, &M);\n\tfor (int i=1; i<=M; i++) { scanf(\"%d\", &P[i].a); P[i].id = i; }\n\tsort(P+1, P+M+1, cmp1); P[1].b = 1;\n\tfor (int i=2; i<=M; i++) P[i].b = P[i-1].b + (P[i].a != P[i-1].a);\n\tsort(P+1, P+M+1, cmp2);\n\tint tot = 0, ans = 0;\n\tfor (int i=1; i<=M; i++) {\n\t\tint x = P[i].b;\n\t\t//printf(\"[%d]\\n\", x);\n\t\tif (hash[x]) {\n\t\t\tans++;\n\t\t\tST.change(1, L, R, hash[x], -1, x);\n\t\t\thash[x] = (hash[x] / 1000000 + 1) * 1000000 + i; // \u628a / \u6253\u6210 % \u592a\u79bb\u8c31\u4e86...\n\t\t\tST.change(1, L, R, hash[x], 1, x);\n\t\t} else {\n\t\t\tif (tot < N) tot++;\n\t\t\telse {\n\t\t\t\tint y = ST.front(1, L, R);\n\t\t\t\tST.change(1, L, R, hash[y], -1, y);\n\t\t\t\thash[y] = 0;\n\t\t\t\t//printf(\"pop %d\\n\", y);\n\t\t\t}\n\t\t\thash[x] = 1000000 + i;\n\t\t\tST.change(1, L, R, hash[x], 1, x);\n\t\t}\n\t}\n\tprintf(\"%d\", ans);\t\n}\n```\n",
        "postTime": 1613655058,
        "uid": 9315,
        "name": "zhyh",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2318 \u3010[HNOI2005]\u865a\u62df\u5185\u5b58\u3011"
    },
    {
        "content": "\u5199\u7684\u4e0d\u662f\u5f88\u597d...\u51d1\u5408\u7740\u770b\u5427...\n\n\u8c03\u4e86\u6709\u70b9\u4e45\u7684....\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u5165\u6b63\u9898\n\n\n# \u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u9898\n## \u9898\u610f\uff1a\n\n\u9898\u76ee\u610f\u601d\u5f88\u660e\u663e\uff0c\u5c31\u662f\u8981\u4f60\u6a21\u62df\u3002\u663e\u7136\u6ca1\u60f3\u8ba9\u4f60\u66b4\u529b\u6a21\u62df\u3002\n\n\u5199\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u53bb\u652f\u6301\u9898\u76ee\u4e2d\u7684\u64cd\u4f5c\uff1a\n\n- \u6839\u636e\u5173\u952e\u5b57\u67e5\u8be2\u67d0\u4e00\u5143\u7d20\n- \u6839\u636e**P**\u8fd9\u4e2a\u5173\u952e\u5b57\u4fee\u6539\u96c6\u5408\u4e2d\u67d0\u4e00\u4e2a\u5143\u7d20\u3002\n- \u67e5\u8be2\u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u3002\n\n## \u9898\u89e3\uff1a\n\nstl\u4e2d\u7684set\u80fd\u5f88\u597d\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u8fd9\u91cc\u662f\u7ebf\u6bb5\u6811\u7684\u89e3\u6cd5\n\uff08\u611f\u89c9\u597d\u96be\u8bb2\u554a...QAQ\uff09\n\n**\u6838\u5fc3\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7b2c1-n\u4e2a\u5185\u5b58\u9875\u4e2d\u7684\u6700\u5c0f\u503c\u3002\n\u5927\u5c0f\u6211\u4eec\u5728\u7ed3\u6784\u4f53\u4e2d\u5b9a\u4e49\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n**\u5173\u4e8e\u53d8\u91cf\u7684\u95ee\u9898\u8bf7\u770b\u4ee3\u7801\u6ce8\u91ca\uff0c\u4e0b\u6587\u4e5f\u6709\u90e8\u5206\u8bf4\u660e**\u3002\n\n\u5177\u4f53sgt\u7684\u53d8\u91cf\u5728\u8fd9\uff1a\n```\nstruct node{//\u6211\u4eec\u8981\u7ef4\u62a4\u7684\u503c\u3002\u5199\u4e2a\u7ed3\u6784\u4f53 \n\tint pos,pa,dfn,w;//dfn\u4e3a\u65f6\u95f4\u6233\uff0cw\u4e3a\u8bbf\u95ee\u6b21\u6570\uff0cpos\u4e3a\u6b64\u8282\u70b9\u5728\u5185\u5b58\u9875\u4e2d\u7684\u4f4d\u7f6e ,pa\u662f\u9875\u7801 \n\tnode() {};\n\tnode(int pos_,int pa_,int dfn_,int w_) {pos=pos_;pa=pa_;dfn=dfn_;w=w_;}\n\tbool operator < (const node &a) const{//\u5927\u5c0f\u6bd4\u8f83\u7684\u5b9a\u4e49 \n\t\tif(w==a.w) return dfn<a.dfn;\n\t\treturn w<a.w;\n\t}\n\tbool operator > (const node &a) const{\n\t\tif(w==a.w) return dfn>a.dfn;\n\t\treturn w>a.w;\n\t}\n};\n\n....\n\nstruct sgt{//\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u662f1-n\u4e2a\u5185\u5b58\u9875\u3002\uff08\u6700\u5c0f\u503c\uff09 \n\tnode c[size];\n\t.....\n};\n```\n\n\n### 1.\u6839\u636e\u5173\u952e\u5b57\u67e5\u8be2\u67d0\u4e00\u5143\u7d20\u662f\u5426\u5728\u96c6\u5408\u4e2d\u5b58\u5728\u3002\nmap\u65e0\u7591\u662f\u4e2a\u975e\u5e38\u597d\u7684\u9009\u62e9\u3002\n\n\u6211\u4eec\u7533\u660e\u4e00\u4e2amap<int,int> ha\u3002ha\u4fdd\u5b58\u7684\u662fp\u8fd9\u9875\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u3002\n\n\u8b6c\u5982\uff1aha[p]=pos\u3002\uff08pos\u8868\u793ap\u8fd9\u4e2a\u5916\u5b58\u50a8\u5b58\u5728\u5185\u5b58\u9875\u7684\u7b2cpos\u9875\uff09\n\n\u5982\u679cha[p]=0\uff0c\u8bf4\u660ep\u4e0d\u5728\u5185\u5b58\u9875\u4e2d\u3002\n\n\u5982\u679cha[p]\u4e0d\u4e3a0\uff0c\u8bf4\u660ep\u5728\u5185\u5b58\u9875\u4e2d\uff0c\u4e14\u5728\u7b2cha[p]\u9875\u3002\n\n### 2.\u6839\u636e**P**\u8fd9\u4e2a\u5173\u952e\u5b57\u4fee\u6539\u96c6\u5408\u4e2d\u67d0\u4e00\u4e2a\u5143\u7d20\u3002\n\n\u7531ha[p]\u53ef\u4ee5\u77e5\u9053p\u662f\u5426\u5728\u5185\u5b58\u4e2d\uff0c\u540c\u65f6\u77e5\u9053\u5176\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u3002\u4ee4pos=ha[p],\u7136\u540e\u6211\u4eec\u5c31\u5728\u7ebf\u6bb5\u6811\u4e2d\u53bb\u4fee\u6539pos\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\u3002\n\u5c31\u50cf\u8fd9\u6837\uff1a\n```cpp\n\tvoid updata(int o,int l,int r,int k,node x) {\n\t\tif(l==r) {\n\t\t\tc[o]=x;\n\t\t\treturn ;\t\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tint lson=o<<1;\n\t\tint rson=lson|1;\n\t\tif(k<=mid) updata(lson,l,mid,k,x);\n\t\telse updata(rson,mid+1,r,k,x);\n\t\tc[o]=min(c[lson],c[rson]);\n\t} \n```\n\n### 3.\u67e5\u8be2\u6700\u5c0f\u503c\u6216\u6839\u636e\u5173\u952e\u5b57\u67e5\u8be2\u67d0\u4e00\u5143\u7d20\u3002\n\n\u6700\u5c0f\u503c\u7528\u7ebf\u6bb5\u6811\u80fd\u5f88\u597d\u7684\u89e3\u51b3\u3002\u4f46\u6211\u4eec\u9700\u8981\u591a\u4fdd\u5b58\u4e00\u4e9b\u4fe1\u606f\u3002\u6bd4\u5982pos\uff08\u5728\u5185\u5b58\u9875\u4e2d\u7684\u4f4d\u7f6e\uff09\uff0cpa\uff08\u5916\u5b58\u4e2d\u7684\u9875\u7801\uff09\uff0cdfn\uff08\u65f6\u95f4\u6233\uff0c\u63d2\u5165\u7684\u65f6\u95f4\uff09\uff0cw\uff08\u88ab\u8bbf\u95ee\u6b21\u6570\uff09\u3002\u7136\u540e\u5c31\u80fd\u65b9\u4fbf\u7684\u662f\u7528\u7ebf\u6bb5\u6811\u4e86\u3002\n\u5177\u4f53\u770b\u4ee3\u7801\u3002\n```cpp\n\tnode query(int o,int l,int r,int a,int b) {//\u67e5\u8be2\u7b2ca-b\u5185\u5b58\u9875\u4e2d\u7684\u6700\u5c0f\u503c \n\t\tnode res=node(0,0,0x3f3f3f3f,0x3f3f3f3f);\n\t\tif(a<=l && r<=b) return c[o];\n\t\tint mid=(l+r)>>1;\n\t\tint lson=o<<1;\n\t\tint rson=lson|1;\n\t\tif(a<=mid) res=min(res,query(lson,l,mid,a,b));\n\t\tif(b>mid) res=min(res,query(rson,mid+1,r,a,b));\n\t\treturn res;\n\t}\n```\n\n### code\uff1a\n```cpp\n#include<cstdio>\n#include<map>\n#include<algorithm>\n\nusing namespace std;\n\nconst int maxn=10005;\nconst int size=40005;\n\nint read() {\n\tint x=0;\n\tchar c=getchar();\n\twhile(c<'0' || c>'9') c=getchar();\n\twhile(c>='0' && c<='9') {\n\t\tx*=10;x+=c-'0';\n\t\tc=getchar();\n\t} \n\treturn x;\n}\n\nstruct node{//\u6211\u4eec\u8981\u7ef4\u62a4\u7684\u503c\u3002\u5199\u4e2a\u7ed3\u6784\u4f53 \n\tint pos,pa,dfn,w;//dfn\u4e3a\u65f6\u95f4\u6233\uff0cw\u4e3a\u8bbf\u95ee\u6b21\u6570\uff0cpos\u4e3a\u6b64\u8282\u70b9\u5728\u5185\u5b58\u9875\u4e2d\u7684\u4f4d\u7f6e ,pa\u662f\u9875\u7801 \n\tnode() {};\n\tnode(int pos_,int pa_,int dfn_,int w_) {pos=pos_;pa=pa_;dfn=dfn_;w=w_;}\n\tbool operator < (const node &a) const{//\u5927\u5c0f\u6bd4\u8f83\u7684\u5b9a\u4e49 \n\t\tif(w==a.w) return dfn<a.dfn;\n\t\treturn w<a.w;\n\t}\n\tbool operator > (const node &a) const{\n\t\tif(w==a.w) return dfn>a.dfn;\n\t\treturn w>a.w;\n\t}\n};\n\n//\n\nstruct sgt{//\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u662f1-n\u4e2a\u5185\u5b58\u9875\u3002\uff08\u6700\u5c0f\u503c\uff09 \n\tnode c[size];//key\u503c \n\tvoid build(int o,int l,int r) {//\u5efa\u6811 \n\t\tc[o].w=0;\n\t\tif(l==r) return ;\n\t\tint mid=(l+r)>>1;\n\t\tint lson=o<<1;\n\t\tint rson=lson|1;\n\t\tbuild(lson,l,mid);\n\t\tbuild(rson,mid+1,r);\n\t}\n\tvoid updata(int o,int l,int r,int k,node x) {//\u4fee\u6539\u7b2ck\u4e2a\u5185\u5b58\u9875\n\t\tif(l==r) {\n\t\t\tc[o]=x;\n\t\t\treturn ;\t\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tint lson=o<<1;\n\t\tint rson=lson|1;\n\t\tif(k<=mid) updata(lson,l,mid,k,x);\n\t\telse updata(rson,mid+1,r,k,x);\n\t\tc[o]=min(c[lson],c[rson]);\n\t} \n\tnode query(int o,int l,int r,int a,int b) {//\u67e5\u8be2\u7b2ca-b\u5185\u5b58\u9875\u4e2d\u7684\u6700\u5c0f\u503c \n\t\tnode res=node(0,0,0x3f3f3f3f,0x3f3f3f3f);\n\t\tif(a<=l && r<=b) return c[o];\n\t\tint mid=(l+r)>>1;\n\t\tint lson=o<<1;\n\t\tint rson=lson|1;\n\t\tif(a<=mid) res=min(res,query(lson,l,mid,a,b));\n\t\tif(b>mid) res=min(res,query(rson,mid+1,r,a,b));\n\t\treturn res;\n\t}\n} t;\n\nint n,m,rem,ans;//rem\u8868\u793a\u5f53\u524d\u5185\u5b58\u9875\u50a8\u5b58\u5230\u4e86\u7b2c\u51e0\u9875 \nmap<int,int> ha;//\u4fdd\u5b58P\u5728\u5185\u5b58\u9875\u4e2d\u7684\u4f4d\u7f6e\u3002\uff08\u7b2c\u51e0\u9875\uff09 \n\nint main() {\n\tint p,pos;\n\tn=read();m=read();\n\tt.build(1,1,n);\n\tfor(int i=1;i<=m;i++) {\n\t\tp=read();\n\t\tpos=ha[p];\n\t\tif(pos) {\n\t\t\tans++;\n\t\t\tnode u=t.query(1,1,n,pos,pos);\n\t\t\tt.updata(1,1,n,pos,node(pos,p,u.dfn,u.w+1)); \n\t\t\t//printf(\"suc\\n push (%d %d %d %d) in %d\\n\",pos,p,u.dfn,u.w+1,pos);\n\t\t}else {\n\t\t\t//printf(\"fail\\n \");\n\t\t\tif(rem<n) {\n\t\t\t\t++rem;\n\t\t\t\tt.updata(1,1,n,rem,node(rem,p,i,0));\n\t\t\t\tha[p]=rem;\n\t\t\t\t//printf(\"remain  push (%d %d %d %d) in %d\\n\",rem,p,i,0,rem);\n\t\t\t}else {\n\t\t\t\tnode u=t.c[1];\n\t\t\t\tt.updata(1,1,n,u.pos,node(u.pos,p,i,0));\n\t\t\t\tha[u.pa]=0;ha[p]=u.pos;\n\t\t\t\t//printf(\"no rem  push (%d %d %d %d) in %d\\n\",u.pos,p,i,0,u.pos);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\",ans); \n}\n```",
        "postTime": 1524905355,
        "uid": 50966,
        "name": "YWY_wys",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2318 \u3010[HNOI2005]\u865a\u62df\u5185\u5b58\u3011"
    },
    {
        "content": "\u5176\u5b9e\u611f\u89c9\u8fd9\u4e0d\u5e94\u8be5\u662f\u4e00\u9053\u7d2b\u9898\uff0c\u6211\u611f\u89c9\u5c31\u662f\u4e00\u9053\u84dd\u9898~~\uff08dalao\u522b\u6253\u6211\u554a\uff09~~\n\n\u6211\u4e3b\u8981\u7528\u7684\u662f\u7ebf\u6bb5\u6811\u6c34\u8fc7\u53bb\u7684\uff0c\u81ea\u6211\u611f\u89c9\u5c31\u662f\u4e00\u9053\u7ebf\u6bb5\u6811\u7684\u6a21\u677f\u9898\u554a\u3002\u3002\u3002\n\nseg\u8bb0\u4f18\u5148\u5ea6\u7684\u6700\u5c0f\u503c\uff08pair<\u8bbf\u95ee\u6b21\u6570\uff0c\u6700\u65e9\u8bbf\u95ee\u65f6\u95f4>\uff09\uff0c\u5f53\u7136\u8981\u7528\u4e00\u4e2amap\u5b58\u8fd9\u4e2a\u503c\u5728\u4e0d\u5728\u7ebf\u6bb5\u6811\u91cc\u548c\u5728\u7ebf\u6bb5\u6811\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u66f4\u65b0\u7684\u65f6\u5019\u5148\u770b\u4e00\u4e0b\u7ebf\u6bb5\u6811\u91cc\u6709\u6ca1\u6709\u8fd9\u4e2a\u503c\uff0c\u6709\u5c31\u76f4\u63a5\u627e\u8fd9\u4e2a\u503c\u66f4\u65b0\uff0c\u5426\u5219\u627e\u6743\u503c\u6700\u5c0f\u7684\u66ff\u4ee3\uff08\u8fd9\u91cc\u7684\u7a7a\u9875\u5c31\u662f\u8bbf\u95ee\u6b21\u6570\u4e3a0\uff0c\u4e5f\u5c31\u662f\u8bf4\u627e\u7a7a\u9875\u548c\u627e\u8bbf\u95ee\u6b21\u6570\u6700\u5c0f\u7684\u65b9\u6cd5\u662f\u4e00\u6837\u7684\uff09\u3002\u6700\u540eseg\u8fd8\u8981\u8bb0\u4e00\u4e0b\u5b58\u7684\u503c\u7528\u5220\u9664map\u91cc\u7684\u5df2\u7ecf\u88ab\u66ff\u6362\u7684\u503c\u3002\n\n\u7136\u540e\u4e00\u9053\u7d2b\u9898\u5c31\u8fd9\u4e48\u6c34\u8fc7\u53bb\u5566\uff01\uff01\uff01\n\n\u4e0b\u9762\u662f\u6e23\u4ee3\u7801\uff1a\n\n```\n//lgp2318\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<map>\nusing namespace std;\nconst int maxn=10000+9;\ntypedef pair<int,int> P;\n\nint n,m,ans,root,cnt,ind;\nmap<int,int> M;\nstruct seg_{\n\tint lson,rson,pos;\n\tP prio;int page;\n}seg[maxn*4];\n\nvoid build(int &p,int segl,int segr){\n\tp=++cnt;\n\tif(segl==segr){\n\t\tseg[p].pos=++ind;\n\t\treturn;\n\t}\n\tint mid=(segl+segr)>>1;\n\tbuild(seg[p].lson,segl,mid);\n\tbuild(seg[p].rson,mid+1,segr);\n}\n\nvoid update1(int p,int segl,int segr,int pos){\n\tif(segl==segr){\n\t\tseg[p].prio.first++;\n\t\treturn;\n\t}\n\tint mid=(segl+segr)>>1;\n\tif(pos<=mid) update1(seg[p].lson,segl,mid,pos);\n\telse update1(seg[p].rson,mid+1,segr,pos);\n\tseg[p].prio=min(seg[seg[p].lson].prio,seg[seg[p].rson].prio);\n}\n\nint update2(int p,int segl,int segr,int time,int page){\n\tif(segl==segr){\n\t\tif(seg[p].page) M.erase(seg[p].page); \n\t\tseg[p].prio=make_pair(1,time);\n\t\tseg[p].page=page;\n\t\treturn seg[p].pos;\n\t}\n\tint mid=(segl+segr)>>1;\n\tint ret;\n\tif(seg[seg[p].lson].prio<seg[seg[p].rson].prio) ret=update2(seg[p].lson,segl,mid,time,page);\n\telse ret=update2(seg[p].rson,mid+1,segr,time,page);\n\tseg[p].prio=min(seg[seg[p].lson].prio,seg[seg[p].rson].prio);\n\treturn ret;\n}\n\nint main(){\n\tscanf(\"%d %d\",&n,&m);\n\tbuild(root,1,n);\n\tfor(int i=1;i<=m;i++){\n\t\tint x;scanf(\"%d\",&x);\n\t\tif(M.count(x)){\n\t\t\tans++;\n\t\t\tupdate1(root,1,n,M[x]);\n\t\t}\n\t\telse M.insert(make_pair(x,update2(root,1,n,i,x)));\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1521298070,
        "uid": 33304,
        "name": "\u53f8\u9a6c\u667a\u6cfd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2318 \u3010[HNOI2005]\u865a\u62df\u5185\u5b58\u3011"
    }
]