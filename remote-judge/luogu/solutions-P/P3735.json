[
    {
        "content": "\u6839\u636e\u672c\u9898\u7684\u5b9a\u4e49\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u4e32\uff0c\u82e5 $lcp + lcs + k \\geqslant | s |$\uff0c\u5219\u8fd9\u4e24\u4e2a\u4e32\u5f62\u6210\u4e86\u5339\u914d\u3002\u7edf\u8ba1\u5339\u914d\u6b21\u6570\u8003\u8651\u56fa\u5b9a $lcp$ \u957f\u5ea6\uff0c\u6765\u627e\u5408\u6cd5\u7684 $lcs$ \u7684\u4e2a\u6570\u3002\n\n\u5bf9\u6240\u6709\u6a21\u5f0f\u4e32 $p_i$ \u7684\u6b63\u4e32\u548c\u53cd\u4e32\u4e00\u8d77\u5efa\u51fa $AC$ \u81ea\u52a8\u673a\uff0c\u5c06\u8be2\u95ee\u6302\u5728 $p_i$ \u7684\u524d\u7f00\u5728 $AC$ \u81ea\u52a8\u673a\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u4e0a\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4e32 $pos$ \u4f4d\u7f6e\u7684\u524d\u7f00\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u5c06 $pos+k+1$ \u4f4d\u7f6e\u7684\u540e\u7f00\u5bf9\u5e94\u7684\u8282\u70b9\u4e5f\u6302\u4e0a\u53bb\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u524d\u7f00\u7684\u8d21\u732e\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6587\u672c\u4e32 $s$\uff0c\u540c\u6837\u5904\u7406\u51fa\u5176\u524d\u7f00\u5728 $AC$ \u81ea\u52a8\u673a\u4e0a\u5339\u914d\u5230 $pos$ \u4f4d\u7f6e\u540e\uff0c\u5728\u5f53\u524d\u6240\u5728\u7684\u8282\u70b9\u6302\u4e0a\u5176\u540e\u7f00\u5728 $AC$ \u81ea\u52a8\u673a\u4e0a\u5339\u914d\u5230 $pos+k+1$ \u4f4d\u7f6e\u540e\u5230\u8fbe\u7684\u8282\u70b9\u3002\n\n\u7edf\u8ba1\u7b54\u6848\u65f6\uff0c\u904d\u5386\u4e00\u904d $fail$ \u6811\uff0c\u5f53\u5230\u8fbe\u70b9 $x$ \u540e\uff0c\u5c06\u70b9 $x$ \u5b50\u6811\u5185\u7684\u8282\u70b9\u4e0a\u6302\u7740\u6587\u672c\u4e32\u5bf9\u5e94\u7684\u540e\u7f00\u8282\u70b9\u90fd\u52a0\u4e0a $1$\uff0c\u5bf9\u4e8e\u8be2\u95ee\uff0c\u67e5\u8be2\u6a21\u5f0f\u4e32\u5bf9\u5e94\u7684\u540e\u7f00\u8282\u70b9\u7684\u5b50\u6811\u548c\u5373\u53ef\uff0c\u8fd9\u6837\u5c31\u7edf\u8ba1\u51fa\u4e86\u5f53\u524d $lcp$ \u6240\u5bf9\u5e94\u7684\u5408\u6cd5 $lcs$\u3002\u53ef\u4ee5\u901a\u8fc7\u5904\u7406\u51fa $dfs$ \u5e8f\u540e\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\uff0c\u5373\u5230\u8fbe\u4e00\u4e2a\u8282\u70b9\u540e\u5148\u7edf\u8ba1\u4e00\u6b21\u4fe1\u606f\uff0c\u7136\u540e\u904d\u5386\u8be5\u8282\u70b9\u5b50\u6811\uff0c\u5c06\u5b50\u6811\u5185\u7684\u540e\u7f00\u8282\u70b9\u7684\u8d21\u732e\u90fd\u52a0\u4e0a\uff0c\u7136\u540e\u518d\u7edf\u8ba1\u4e00\u904d\u4fe1\u606f\uff0c\u4e24\u6b21\u503c\u7684\u5dee\u5373\u4e3a\u5f53\u524d\u5b50\u6811\u7684\u8d21\u732e\u3002\n\n\u4f46\u662f\u76f4\u63a5\u8fd9\u6837\u505a\u4f1a\u7b97\u91cd\uff0c\u5f53 $lcp + lcs + k > | s |$ \u65f6\uff0c\u4e00\u4e2a\u5339\u914d\u7684\u4f4d\u7f6e\u4f1a\u8ba1\u7b97\u591a\u6b21\uff0c\u6240\u4ee5\u8981\u51cf\u53bb\u7b97\u91cd\u7684\u90e8\u5206\u3002\u6bcf\u6b21\u5728\u8282\u70b9\u4e0a\u518d\u6302\u4e0a $pos+k$ \u4f4d\u7f6e\u7684\u540e\u7f00\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u51cf\u53bb\u5176\u8d21\u732e\u5373\u53ef\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6bcf\u4e2a\u5339\u914d\u7684\u4f4d\u7f6e\u90fd\u53ea\u88ab\u524d\u7f00\u5339\u914d\u6700\u957f\u7684\u4f4d\u7f6e\u7edf\u8ba1\u5230\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 400010\n#define lowbit(x) (x&(-x))\n#define mk make_pair\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint k,n,m,root,tot,cnt;\nint trie[maxn][94],fail[maxn],ans[maxn],bel[maxn],in[maxn],out[maxn];\nchar str[maxn],s[maxn];\nstruct node\n{\n    int id,p1,p2,v1,v2;\n};\nvector<node> v[maxn];\nvector<pair<int,int> > ve[maxn];\nstruct edge\n{\n    int to,nxt;\n}e[maxn];\nint head[maxn],edge_cnt;\nvoid add(int from,int to)\n{\n    e[++edge_cnt]={to,head[from]},head[from]=edge_cnt;\n}\nstruct BIT\n{\n    int t[maxn];\n    void update(int x)\n    {\n        while(x<=cnt) t[x]++,x+=lowbit(x);\n    }\n    int query(int x)\n    {\n        int sum=0;\n        while(x) sum+=t[x],x-=lowbit(x);\n        return sum;\n    }\n    int ask(int l,int r)\n    {\n        return query(r)-query(l-1);\n    }\n}T1,T2;\nvoid insert(int id)\n{\n    int len=strlen(s+1),p=root;\n    for(int i=1;i<=len;++i)\n    {\n        int ch=s[i]-33;\n        if(!trie[p][ch]) trie[p][ch]=++tot;\n        p=trie[p][ch];\n    }\n    p=root,bel[len+1]=0;\n    for(int i=len;i;--i)\n    {\n        int ch=s[i]-33;\n        if(!trie[p][ch]) trie[p][ch]=++tot;\n        p=trie[p][ch],bel[i]=p;\n    }\n    p=root;\n    for(int i=0;i<=len-k;++i)\n    {\n        node t={id,bel[i+k+1],bel[i+k],0,0};\n        if(!i) t.p2=-1;\n        v[p].push_back(t),p=trie[p][s[i+1]-33];\n    }\n}\nvoid build()\n{\n    queue<int> q;\n    for(int i=0;i<94;++i)\n        if(trie[root][i])\n            q.push(trie[root][i]);\n    while(!q.empty())\n    {\n        int x=q.front();\n        q.pop();\n        for(int i=0;i<94;++i)\n        {\n            int y=trie[x][i];\n            if(y) fail[y]=trie[fail[x]][i],q.push(y);\n            else trie[x][i]=trie[fail[x]][i];\n        }\n    }\n    for(int i=1;i<=tot;++i) add(fail[i],i);\n    int p=root;\n    for(int i=n;i;--i) bel[i]=p=trie[p][str[i]-33];\n    p=root;\n    for(int i=0;i<=n-k;++i)\n        ve[p].push_back(mk(bel[i+k+1],bel[i+k])),p=trie[p][str[i+1]-33];\n}\nvoid dfs_dfn(int x)\n{\n    in[x]=++cnt;\n    for(int i=head[x];i;i=e[i].nxt) dfs_dfn(e[i].to);\n    out[x]=cnt;\n}\nvoid dfs_ans(int x)\n{\n    for(int i=0;i<v[x].size();++i)\n    {\n        node t=v[x][i];\n        v[x][i].v1=T1.ask(in[t.p1],out[t.p1]);\n        if(t.p2!=-1) v[x][i].v2=T2.ask(in[t.p2],out[t.p2]);\n    }\n    for(int i=0;i<ve[x].size();++i)\n        T1.update(in[ve[x][i].first]),T2.update(in[ve[x][i].second]);\n    for(int i=head[x];i;i=e[i].nxt) dfs_ans(e[i].to);\n    for(int i=0;i<v[x].size();++i)\n    {\n        node t=v[x][i];\n        ans[t.id]+=T1.ask(in[t.p1],out[t.p1])-t.v1;\n        if(t.p2!=-1) ans[t.id]-=T2.ask(in[t.p2],out[t.p2])-t.v2;\n    }\n}\nint main()\n{\n    read(k),scanf(\"%s\",str+1),read(m),n=strlen(str+1);\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"%s\",s+1);\n        int l=strlen(s+1);\n        if(l>k) insert(i);\n        else ans[i]=n-l+1;\n    }\n    build(),dfs_dfn(root),dfs_ans(root);\n    for(int i=1;i<=m;++i) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1597994478,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3735 \u3010[HAOI2017]\u5b57\u7b26\u4e32\u3011"
    },
    {
        "content": "\u5b57\u7b26\u4e32\u795e\u4ed9\u9898\u3002\n\n\u9996\u5148\u2026\u2026\u8fd9\u9898\u5982\u679c\u4f60\u53bb\u60f3SASAM\u4ec0\u4e48\u7684\u5c31\u51c9\u4e86\u2026\u2026\u8fd9\u662f\u4e2a\u591a\u4e32\u5339\u914d\u95ee\u9898\uff0c\u5e94\u8be5\u8003\u8651AC\u81ea\u52a8\u673a\u3002\n\n\u8fd9\u9898\u7684\u5339\u914d\u5c31\u662f$LCP(A,B)+LCS(A,B)+k<=|A|$\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9$p_i$\u7684\u6bcf\u4e2a\u524d\u7f00\u94a6\u5b9a\u4ed6\u5c31\u662f$lcp$\uff0c\u7136\u540e\u518d\u5f80\u540ek\u6b65\u4e4b\u540e\u7684\u540e\u7f00\u5fc5\u987b\u4e00\u6837\u3002\u90a3\u4e48\u53ef\u4ee5\u5bf9$p_i$\u5efa\u4e00\u4e2aAC\u81ea\u52a8\u673a\uff0c\u6211\u4eec\u8ba9$s$\u5728\u8fd9\u4e2a\u81ea\u52a8\u673a\u4e0a\u8dd1\u4e00\u904d\u5339\u914d\uff0c\u6211\u4eec\u77e5\u9053$fail$\u6811\u7684\u6027\u8d28\u5c31\u662f\u5728\u5b50\u6811\u91cc\u7684\u8282\u70b9\u7684\u524d\u7f00\u7684\u540e\u7f00\u662f\u6839\u8868\u793a\u7684\u524d\u7f00\uff0c$u$\u8282\u70b9\u7684\u8fd9\u4e2a\u524d\u7f00\u5728$s$\u4e2d\u5b58\u5728\u7684\u4f4d\u7f6e\u5c31\u662f\u4ed6\u5b50\u6811\u91cc$s$\u5230\u8fc7\u7684\u5730\u65b9\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5df2\u7ecf\u80fd\u591f\u7ef4\u62a4\u8fd9\u4e2a\u524d\u7f00\u5728$s$\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u4f4d\u7f6e\uff0c\u8003\u8651\u5230$k$\u662f\u4e2a\u5b9a\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9$s$\u5728AC\u81ea\u52a8\u673a\u4e0a\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u5728AC\u81ea\u52a8\u673a\u7684\u5f53\u524d\u8282\u70b9\u4e0a\u8bb0\u5f55$s[i+k+1]$\u8fd9\u4e2a\u540e\u7f00\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u4ee4\u8fd9\u4e2a\u6a21\u677f\u4e32$p_i$\uff0c\u5047\u8bbe\u6211\u4eec\u94a6\u5b9a\u7684$lcp$\u4e3a$j$\uff0c$p_i[j+k+1]$\u8fd9\u4e2a\u540e\u7f00\u662f$s[i+k+1]$\u8fd9\u4e2a\u540e\u7f00\u7684\u4e00\u4e2a\u524d\u7f00\uff08\u53ef\u4ee5\u81ea\u884c\u7406\u89e3\u4e00\u4e0b\u4f4d\u7f6e\u5173\u7cfb\uff09\u3002\n\n\u8fd9\u4e2a\u540e\u7f00\u7684\u524d\u7f00\u8be5\u5982\u4f55\u505a\u5462\uff1f\u5176\u5b9e\u2026\u2026\u6211\u4eec\u53ef\u4ee5\u5012\u8fc7\u6765\u5904\u7406\uff0c\u5c31\u6210\u4e86AC\u81ea\u52a8\u673a\u80fd\u89e3\u51b3\u7684\u524d\u7f00\u7684\u540e\u7f00\uff0c\u6211\u4eec\u628a$p_i$\u7684\u53cd\u4e32\u4e5f\u52a0\u5230\u81ea\u52a8\u673a\u91cc\uff0c\u7136\u540e\u8ba9$s$\u5012\u7740\u5728\u81ea\u52a8\u673a\u4e0a\u8dd1\u4e00\u904d\uff0c\u4ee4$f[i]$\u4e3a$s$\u91cc\u7684$i$\u8fd9\u4e2a\u540e\u7f00\u8dd1\u5230\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u663e\u7136\u6211\u4eec\u8981\u8ba9$f[i+k+1]$\u5728$p_i[j+k+1]$\u8fd9\u4e2a\u540e\u7f00\u7684\u53cd\u4e32\u5728AC\u81ea\u52a8\u673a\u7684\u8282\u70b9\u7684$fail$\u5b50\u6811\u91cc\uff0c\u7136\u540e$i$\u5339\u914d\u5230\u7684\u8282\u70b9\u8fd8\u5fc5\u987b\u662f$j$\u7684fail\u5b50\u6811\u91cc\u7684\u70b9\u3002\n\n\u90a3\u4e48\u8fd9\u9898\u5c31\u88ab\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a\u548c\u5b57\u7b26\u4e32\u6ca1\u4ec0\u4e48\u5173\u7cfb\u7684\u7ecf\u5178\u6a21\u578b\u4e86\uff0c\u6211\u4eec\u8981\u67e5\u8be2$u$\u7684\u5b50\u6811\u91cc\u6709\u591a\u5c11\u70b9\u548c$v$\u7684\u5b50\u6811\u91cc\u7684\u70b9\u6709\u5173\u3002\n\n\u8003\u8651\u628a\u8be2\u95ee\u653e\u5230\u6811\u4e0a\u7684$u$\u70b9\u4e0a\uff0cdfs\u4e00\u904d\u8fd9\u4e2a\u6811\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4dfs\u5e8f\uff0c\u5728\u8fdb\u5165u\u7684\u5b50\u6811\u65f6\u5148\u67e5\u4e00\u4e0bv\u7684\u5b50\u6811\u548c\uff0c\u7136\u540edfs\u7684\u65f6\u5019\u4e0d\u65ad\u7684\u628a\u8ddf\u4ed6\u6709\u5173\u7684\u90a3\u4e2a\u70b9+1\uff0c\u56de\u6eaf\u7684\u65f6\u5019\u67e5\u4e00\u4e0b$v$\u7684\u5b50\u6811\u548c\u5dee\u5206\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\u54e6\u5bf9\u4e86\u8fd9\u6837\u505a\u6709\u4e00\u4e2a\u5927\u95ee\u9898\u5c31\u662f\u53bb\u91cd\uff0c\u56e0\u4e3a\u5982\u679c\u4e2d\u95f4\u53ea\u6709\u5f88\u5c0f\u7684\u4e00\u6bb5\u4e0d\u4e00\u6837\uff0c\u90a3\u4e00\u4e2a\u4e32\u4f1a\u88ab\u8ba1\u7b97\u591a\u6b21\uff0c\u6bd4\u5982$k=3$\u7684\u65f6\u5019\u7684\u8fd9\u4e2a\uff1a\n\n```cpp\ns:  ababba\npi: abacba\n```\n\n\u5982\u679c\u6211\u4eec\u94a6\u5b9a\u7684\u516c\u5171\u524d\u7f00\u662fa\u7684\u8bdd\u8fd9\u4f1a\u88ab\u7b97\u4e00\u6b21\uff0c\u5982\u679c\u679a\u4e3e\u7684\u662fab\u7684\u8bdd\u8fd9\u53c8\u4f1a\u88ab\u7b97\u4e00\u6b21\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u4ec5\u8981\u5bf9\u6bcf\u4e2a\u524d\u7f00\u7b97\u51fa\u5bf9\u4e8e$p_i[j+k+1]$\u6709\u591a\u5c11\u4e2a\u540e\u7f00$s[i+k+1]$\uff0c\u8fd8\u8981\u7b97\u51fa\u5bf9\u4e8e$p_i[j+k]$\u6709\u591a\u5c11\u4e2a\u540e\u7f00$s[i+k]$\uff0c\u7528\u524d\u8005\u51cf\u53bb\u540e\u8005\u5c31\u597d\u4e86\u3002\n\n\u53e6\u5916\u8fd9\u9898\u7ec6\u8282\u6bd4\u8f83\u591a\u2026\u2026\u6ce8\u610f\u4e00\u4e0b\u2026\u2026\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\nusing namespace std;\nnamespace ywy {\n\tint trie[400001][95], size[400001], fail[400001], dfn[400001], que[400001], gdfn = 1, c[400011];\n\ttypedef struct _b {\n\t    int dest;\n\t    int nxt;\n\t} bian;\n\tbian memchi[1000001];\n\tint gn = 1, heads[400001];\n\tinline void add(int s, int t) {\n\t    memchi[gn].dest = t;\n\t    memchi[gn].nxt = heads[s];\n\t    heads[s] = gn;\n\t    gn++;\n\t}\n\tint fan[200011], c2[400011];\n\tchar s[200011], str[222222];\n\tint ans[200001];\n\ttypedef struct _n {\n\t    int pos1;\n\t    int pos2;\n\t    int id;\n\t    int tmp1;\n\t    int tmp2;\n\t    _n() {\n\t        pos1 = 0;\n\t        pos2 = 0;\n\t        id = 0;\n\t        tmp1 = 0;\n\t        tmp2 = 0;\n\t    }\n\t} node;\n\tvector<node> vec[400001];\n\tvoid dfs(int pt) {\n\t    size[pt] = 1;\n\t    dfn[pt] = gdfn;\n\t    gdfn++;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        dfs(memchi[i].dest);\n\t        size[pt] += size[memchi[i].dest];\n\t    }\n\t}\n\tvector<int> pk1[400001], pk[400001];\n\tvoid efs(int pt) {\n\t    for (register int i = 0; i < vec[pt].size(); i++) {\n\t        int tot = 0;\n\t        int p1 = vec[pt][i].pos1, p2 = vec[pt][i].pos2;\n\t        for (register int j = dfn[p1] + size[p1] - 1; j > 0; j -= (j & -j)) tot += c[j];\n\t        for (register int j = dfn[p1] - 1; j > 0; j -= (j & -j)) tot -= c[j];\n\t        vec[pt][i].tmp1 = tot;\n\t        tot = 0;\n\t        if (p2 != -1) {\n\t            for (register int j = dfn[p2] + size[p2] - 1; j > 0; j -= (j & -j)) tot += c2[j];\n\t            for (register int j = dfn[p2] - 1; j > 0; j -= (j & -j)) tot -= c2[j];\n\t            vec[pt][i].tmp2 = tot;\n\t        }\n\t    }\n\t    for (register int i = 0; i < pk1[pt].size(); i++) {\n\t        for (register int j = dfn[pk1[pt][i]]; j <= 400001; j += (j & -j)) c[j]++;\n\t        for (register int j = dfn[pk[pt][i]]; j <= 400001; j += (j & -j)) c2[j]++;\n\t    }\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) efs(memchi[i].dest);\n\t    for (register int i = 0; i < vec[pt].size(); i++) {\n\t        int tot = 0;\n\t        int p1 = vec[pt][i].pos1, p2 = vec[pt][i].pos2;\n\t        for (register int j = dfn[p1] + size[p1] - 1; j > 0; j -= (j & -j)) tot += c[j];\n\t        for (register int j = dfn[p1] - 1; j > 0; j -= (j & -j)) tot -= c[j];\n\t        ans[vec[pt][i].id] += (tot - vec[pt][i].tmp1);\n\t        tot = 0;\n\t        if (p2 != -1) {\n\t            for (register int j = dfn[p2] + size[p2] - 1; j > 0; j -= (j & -j)) tot += c2[j];\n\t            for (register int j = dfn[p2] - 1; j > 0; j -= (j & -j)) tot -= c2[j];\n\t            ans[vec[pt][i].id] -= (tot - vec[pt][i].tmp2);\n\t        }\n\t    }\n\t}\n\tint fpp[200011];\n\tvoid ywymain() {\n\t    int k;\n\t    cin >> k;\n\t    scanf(\"%s\", s + 1);\n\t    int n = strlen(s + 1);\n\t    int gnn = 1;\n\t    int m;\n\t    cin >> m;\n\t    for (register int i = 1; i <= m; i++) {\n\t        scanf(\"%s\", str + 1);\n\t        int len = strlen(str + 1);\n\t        if (len <= k) {\n\t            ans[i] = max(0, n - len + 1);\n\t            continue;\n\t        }\n\t        int cur = 0;\n\t        for (register int j = 1; j <= len; j++) {\n\t            if (!trie[cur][str[j] - 33])\n\t                trie[cur][str[j] - 33] = gnn, gnn++;\n\t            cur = trie[cur][str[j] - 33];\n\t        }\n\t        cur = 0;\n\t        for (register int j = len; j >= 1; j--) {\n\t            if (!trie[cur][str[j] - 33])\n\t                trie[cur][str[j] - 33] = gnn, gnn++;\n\t            cur = trie[cur][str[j] - 33];\n\t            fan[j] = cur;\n\t        }\n\t        fan[len + 1] = 0;\n\t        cur = 0;\n\t        for (register int j = 0; j + k <= len; j++) {\n\t            node cjr;\n\t            cjr.id = i;\n\t            cjr.pos1 = fan[j + k + 1];\n\t            cjr.pos2 = fan[j + k];\n\t            cjr.tmp1 = cjr.tmp2 = 0;\n\t            if (!j)\n\t                cjr.pos2 = -1;\n\t            vec[cur].push_back(cjr);\n\t            cur = trie[cur][str[j + 1] - 33];\n\t        }\n\t    }\n\t    int head = 0, tail = 0;\n\t    for (register int i = 0; i < 95; i++) {\n\t        if (trie[0][i]) {\n\t            que[tail] = trie[0][i];\n\t            tail++;\n\t        }\n\t    }\n\t    while (head < tail) {\n\t        int me = que[head];\n\t        head++;\n\t        add(fail[me], me);\n\t        for (register int i = 0; i < 95; i++) {\n\t            if (trie[me][i]) {\n\t                fail[trie[me][i]] = trie[fail[me]][i];\n\t                que[tail] = trie[me][i];\n\t                tail++;\n\t            } else {\n\t                trie[me][i] = trie[fail[me]][i];\n\t            }\n\t        }\n\t    }\n\t    int cur = 0;\n\t    for (register int i = n; i >= 1; i--) {\n\t        cur = trie[cur][s[i] - 33];\n\t        fpp[i] = cur;\n\t    }\n\t    cur = 0;\n\t    for (register int i = 0; i + k <= n; i++) {\n\t        pk[cur].push_back(fpp[i + k]);\n\t        pk1[cur].push_back(fpp[i + 1 + k]);\n\t        cur = trie[cur][s[i + 1] - 33];\n\t    }\n\t    dfs(0);\n\t    efs(0);\n\t    for (register int i = 1; i <= m; i++) printf(\"%d\\n\", ans[i]);\n\t}\n}\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1553687525,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3735 \u3010[HAOI2017]\u5b57\u7b26\u4e32\u3011"
    },
    {
        "content": "\u9996\u5148\u4e24\u4e2a\u4e32\u5339\u914d\u6761\u4ef6\u53d8\u6210$lcp(A,B)+lcs(A,B)+k>=len$\uff0c~~\u6839\u636e\u5957\u8def~~\u6211\u4eec\u8003\u8651\u679a\u4e3e\u8fd9\u4e2a$lcp$\uff0c\u8ba1\u7b97\u591a\u5c11\u4e2a\u5408\u6cd5\u7684\u548c\u4ed6\u914d\u5bf9\u7684$lcs$\u3002\n\n\u4e00\u4e9b\u7ea6\u5b9a\uff1a\u6587\u672c\u4e32\u4e3a$s$\uff0c\u7b2c$i$\u4e2a\u6a21\u5f0f\u4e32\u4e3a$p_i$\uff0c\u67d0\u4e2a\u4e32$T$\u7684\u4ee5$i$\u7ed3\u5c3e\u7684\u524d\u7f00\u4e3a$pre[T][i]$\uff0c\u67d0\u4e2a\u4e32$T$\u7684\u4ee5$i$\u5f00\u59cb\u7684\u540e\u7f00\u4e3a$suf[T][i]$\u3002\n\n\u8003\u8651\u6211\u4eec\u8981\u6c42\u7684\u76f8\u5339\u914d\u7684$lcp$\u548c$lcs$\u957f\u4ec0\u4e48\u6837\uff0c\u5982\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/isaf01du.png)\n\n\u5047\u5982\u8bf4$pre[p_i][j]$\u548c$pre[s][t]$\u7684$lcs$\u5927\u4e8e\u4f60\u679a\u4e3e\u7684\u8fd9\u4e2a$lcp$\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u8bf4\u7ea2\u8272\u90a3\u6bb5\u5339\u914d\u4e0a\u4e86\uff0c\u90a3\u4e48\u4f60\u8981\u5224\u65ad\u662f\u5426$suf[s][t+k+1]$\u548c$suf[p_i][j+k+1]$\u5339\u914d\u4e0a\u4e86\u3002\u5982\u679c\u5339\u914d\u4e0a\u4e86\uff0c\u5bf9\u7b54\u6848\u67091\u7684\u8d21\u732e\u3002\n\n\u53d1\u73b0\u8fd9\u4e00\u76f4\u662f\u4e00\u4e2a\u4e32\u7684\u524d\u7f00\u548c\u591a\u4e2a\u6a21\u5f0f\u4e32\u7684\u524d\u7f00\u7684\u540e\u7f00\u7684\u5339\u914d\u6216\u4e00\u4e2a\u4e32\u7684\u540e\u7f00\u548c\u591a\u4e2a\u6a21\u5f0f\u4e32\u7684\u540e\u7f00\u7684\u524d\u7f00\u7684\u5339\u914d\u3002\u8fd9\u6b63\u662f$AC$\u81ea\u52a8\u673a\u7684\u4e13\u957f\u3002\u6240\u4ee5\u8003\u8651\u5bf9\u6240\u6709$p_i$\u5efa\u51faAC\u81ea\u52a8\u673a\uff0c\u5bf9\u6240\u6709$p_i$\u7684\u53cd\u4e32\u5efa\u51fa\u53e6\u5916\u4e00\u4e2aAC\u81ea\u52a8\u673a\uff08\u56e0\u4e3aAC\u81ea\u52a8\u673a\u662f\u524d\u7f00\u548c\u6a21\u5f0f\u4e32\u524d\u7f00\u7684\u540e\u7f00\u7684\u5339\u914d\uff09\u3002\n\n\u518d\u6765\u4e00\u4e9b\u7ea6\u5b9a\uff1a$f_i$\u4e3a$pre[s][i]$\u5728\u6b63\u4e32AC\u81ea\u52a8\u673a\u4e0a\u7684\u5339\u914d\u4f4d\u7f6e\uff0c$g_i$\u4e3a$suf[s][i]$\u7684\u53cd\u4e32\u5728\u53cd\u4e32AC\u81ea\u52a8\u673a\u4e0a\u7684\u5339\u914d\u4f4d\u7f6e\u3002$pi[i][j]$\u8868\u793a$pre[p_i][j]$\u5728\u6b63\u4e32AC\u81ea\u52a8\u673a\u4e0a\u7684\u8282\u70b9\uff0c$sp[i][j]$\u8868\u793a$suf[p_i][j]$\u7684\u53cd\u4e32\u5728\u53cd\u4e32AC\u81ea\u52a8\u673a\u4e0a\u7684\u8282\u70b9\u3002\n\n\u53d1\u73b0\u5047\u5982$pre[s][i]$\u5728\u6b63\u4e32AC\u81ea\u52a8\u673a\u4e0a\u80fd\u5339\u914d\u5230$x$\u8282\u70b9\uff0c\u90a3\u4e48$x$\u4e3a\u6839\u7684fail\u6811\u5b50\u6811\u91cc\u7684\u8282\u70b9\u90fd\u80fd\u5339\u914d\u8fd9\u6bb5\u5b57\u7b26\u4e32\u3002\u90a3\u4e48\u4f60\u679a\u4e3e$pre[p_i][j]$\uff0c$pi[i][j]$\u7684\u5b50\u6811\u91cc\u6240\u6709\u6709$f_t$\u7684\u70b9\u90fd\u53ef\u4ee5\u5339\u914d\u4e0a$pre[p_i][j]$\uff0c\u4e5f\u5c31\u662f\u8bf4\u5047\u5982$f_t$\u5728$pi[i][j]$\u7684\u5b50\u6811\u91cc\uff0c\u90a3\u4e48$pre[p_i][j]$\u51fa\u73b0\u5728$t$\u4f4d\u7f6e\u4e0a\u4e00\u6b21\u3002\u90a3\u4e48\u5408\u6cd5\u7684\u60c5\u51b5\u5c31\u662f$t+k+1$\u7684\u4f4d\u7f6e\u5f00\u59cb\u7684\u540e\u7f00\u53ef\u4ee5\u5339\u914d$suf[p_i][j+k+1]$\u3002\u90a3\u5c31\u662f$sp[i][j+k+1]$\u5b50\u6811\u91cc\u5b58\u5728$g_{t+k+1}$\u3002\u53d1\u73b0\u6bcf\u4e2a$f_t$\u90fd\u5bf9\u5e94\u7740\u4e00\u4e9b$g_{t+k+1}$\u3002\u8003\u8651\u628a$f_i$\u548c$g_i$\u770b\u6210\u7279\u6b8a\u70b9\uff0c\u79f0$f_t$\u548c$g_{t+k+1}$\u6709\u5173\u8054\u3002\u90a3\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u5bf9\u4e8e\u6bcf\u4e2a$sp[i][j+k+1]$\u5b50\u6811\u91cc\u5b58\u5728\u591a\u5c11\u4e2a\u548c$pi[i][j]$\u5b50\u6811\u91cc\u7684\u70b9\u6709\u5173\u8054\u7684\u70b9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/uju8wzr5.png)\n\n\u8fd9\u6837\u5c31\u8f6c\u5316\u4e3a\u4e00\u4e2a\u7b80\u5355\u6570\u636e\u7ed3\u6784\u9898\u4e86\uff0c\u628a\u6bcf\u4e2a\u8be2\u95ee\u6302\u5728$pi[i][j]$\u4e0a\uff0cdfs\u8fc7\u7a0b\u4e2d\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u53e6\u4e00\u68f5\u6811\u4e0a\u5173\u8054\u70b9\u7684dfs\u5e8f\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u6c42\u51fa\u8be2\u95ee\uff0c\u6216\u8005\u7b80\u5355\u7ebf\u6bb5\u6811\u5408\u5e76\u4e5f\u884c\u3002\n\n\u7136\u540e\u4f60\u53d1\u73b0\u5b9e\u9645\u4e0a\u4f60\u6709\u7b97\u91cd\u7684\u90e8\u5206\uff0c\u6bd4\u5982\u8bf4\n\n$k=2$ $A=\"abacb\"$ $B=\"abaab\"$\uff0c\u4f60\u5728\u679a\u4e3e\u524d\u7f00$ab$\u7684\u65f6\u5019\u7b97\u4e86\u4e00\u6b21\u8d21\u732e\uff0c\u5728\u679a\u4e3e\u524d\u7f00$aba$\u7684\u65f6\u5019\u4e5f\u7b97\u4e86\u4e00\u6b21\u8d21\u732e\u3002\n\n\u53d1\u73b0\u5c31\u662f\u4e2d\u95f4\u4e0d\u540c\u7684\u957f\u5ea6$<k$\u7684\u65f6\u5019\u4f1a\u7b97\u91cd\u3002\u4f60\u53ea\u9700\u8981\u7b97$pre[p_i][j]$\u548c$suf[p_i][j+k+1]$\u7684\u8d21\u732e\u7684\u65f6\u5019\u628a$pre[p_i][j]$\u548c$suf[p_i][j+k]$\u7684\u8d21\u732e\u51cf\u6389\u5373\u53ef\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u7b97\u91cd\u4e86\u3002\u6ce8\u610f\u7b970\u7684\u8d21\u732e\u65f6\u5019\u4e0d\u9700\u8981\u51cf\u6389$suf[p_i][k]$\u7684\u8d21\u732e\u56e0\u4e3a\u8fd9\u90e8\u5206\u8d21\u732e\u4f60\u4e4b\u524d\u5e76\u6ca1\u6709\u7b97\uff0c\u4f60\u9700\u8981\u5728\u8fd9\u91cc\u628a$suf[p_i][t](t<k)$\u7684\u8d21\u732e\u5168\u90fd\u7b97\u8fdb\u53bb\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<map>\n#include<vector>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\n#define N 200002\n#define lowbit(i) (i&(-i))\nstruct nde{int cz[96],fl,isend;}trie[N][2];\nstruct node{int wh,op,ano;};\nint k,n,m,js[2],dfn[N],rev[N],siz[N],cn,f[N],g[N],ans[N],c[N][2];\nvector<char>p[N];\nvector<int>v[N][2],pi[N],sp[N],to[N][2];\nvector<node>vn[N];\nchar ch[N],s[N];\nqueue<int>q;\ninline void chng(int x,int y,int op){for(register int i=x;i<=cn;i+=lowbit(i))c[i][op]+=y;}\ninline int ask(int x,int op){int ret=0;for(register int i=x;i;i-=lowbit(i))ret+=c[i][op];return ret;}\nvoid df5(int te)\n{siz[te]=1;dfn[te]=++cn;rev[cn]=te;\n\tfor(int i=0;i<v[te][1].size();i++)\n\t{int j=v[te][1][i];df5(j);siz[te]+=siz[j];}\n}\nvoid dfs(int te)\n{\n\tvector<int>tv;\n\tfor(int i=0;i<vn[te].size();i++)\n\t{\n\t\tnode nd=vn[te][i];int tva;\n\t\tif(nd.op==1)tva=ask(dfn[nd.ano]+siz[nd.ano]-1,0)-ask(dfn[nd.ano]-1,0);\n\t\telse tva=ask(dfn[nd.ano]+siz[nd.ano]-1,1)-ask(dfn[nd.ano]-1,1);\n\t\ttv.push_back(tva);\n\t}\n\tfor(int i=0;i<to[te][0].size();i++){int an=to[te][0][i];chng(dfn[an],1,0);}\n\tfor(int i=0;i<to[te][1].size();i++){int an=to[te][1][i];chng(dfn[an],1,1);}\n\tfor(int i=0;i<v[te][0].size();i++){int j=v[te][0][i];dfs(j);}\n\tfor(int i=0;i<vn[te].size();i++)\n\t{\n\t\tnode nd=vn[te][i];int tva;\n\t\tif(nd.op==1)tva=ask(dfn[nd.ano]+siz[nd.ano]-1,0)-ask(dfn[nd.ano]-1,0);\n\t\telse tva=ask(dfn[nd.ano]+siz[nd.ano]-1,1)-ask(dfn[nd.ano]-1,1);\n\t\ttva-=tv[i];\n\t\tif(nd.op==1)ans[nd.wh]+=tva;else ans[nd.wh]-=tva;\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&k);scanf(\"%s\",ch+1);n=strlen(ch+1);\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%s\",s+1);int tle=strlen(s+1),tjl=0;\n\t\tfor(int j=1;j<=tle;j++)p[i].push_back(s[j]);\n\t\tfor(int j=1;j<=tle;j++)\n\t\t{\n\t\t\tif(!trie[tjl][0].cz[s[j]-33])trie[tjl][0].cz[s[j]-33]=++js[0];\n\t\t\ttjl=trie[tjl][0].cz[s[j]-33];pi[i].push_back(tjl);\n\t\t}tjl=0;\n\t\tfor(int j=tle;j;j--)\n\t\t{\n\t\t\tif(!trie[tjl][1].cz[s[j]-33])trie[tjl][1].cz[s[j]-33]=++js[1];\n\t\t\ttjl=trie[tjl][1].cz[s[j]-33];sp[i].push_back(tjl);\n\t\t}\n\t\treverse(sp[i].begin(),sp[i].end());\n\t}\n\tfor(int o=0;o<2;o++)\n\t{\n\t\tfor(int i=0;i<94;i++)if(trie[0][o].cz[i])q.push(trie[0][o].cz[i]);\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint a1=q.front();q.pop();\n\t\t\tfor(int i=0;i<94;i++)\n\t\t\t{\n\t\t\t\tif(trie[a1][o].cz[i])\n\t\t\t\t{\n\t\t\t\t\ttrie[trie[a1][o].cz[i]][o].fl=trie[trie[a1][o].fl][o].cz[i];\n\t\t\t\t\tq.push(trie[a1][o].cz[i]);\n\t\t\t\t}\n\t\t\t\telse trie[a1][o].cz[i]=trie[trie[a1][o].fl][o].cz[i];\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=js[0];i++)v[trie[i][0].fl][0].push_back(i);\n\tfor(int i=1;i<=js[1];i++)v[trie[i][1].fl][1].push_back(i);int tjl=0;\n\tfor(int i=1;i<=n;i++)tjl=trie[tjl][0].cz[ch[i]-33],f[i]=tjl;tjl=0;\n\tfor(int i=n;i;i--)tjl=trie[tjl][1].cz[ch[i]-33],g[i]=tjl;df5(0);\n\tfor(int i=0;i+k<=n;i++)to[f[i]][0].push_back(g[i+k+1]);\n\tfor(int i=0;i+k-1<=n;i++)to[f[i]][1].push_back(g[i+k]);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint tle=p[i].size();\n\t\tif(tle<=k){ans[i]=n-tle+1;continue;}\n\t\tnode tn=(node){i,1,sp[i][k]};\n\t\tvn[0].push_back(tn);\n\t\tfor(int j=0;j+k+1<tle;j++)\n\t\t{\n\t\t\tnode nd=(node){i,1,sp[i][j+k+1]};\n\t\t\tvn[pi[i][j]].push_back(nd);\n\t\t\tnd=(node){i,-1,sp[i][j+k]};\n\t\t\tvn[pi[i][j]].push_back(nd);\n\t\t}\n\t\tint pos=max(tle-k-1,-1);\n\t\tnode nd=(node){i,1,0};\n\t\tif(pos>=0)vn[pi[i][pos]].push_back(nd);\n\t\telse vn[0].push_back(nd);\n\t\t\tnd=(node){i,-1,sp[i][tle-1]};\n\t\t\tif(pos>=0)vn[pi[i][pos]].push_back(nd);\n\t\t\telse vn[0].push_back(nd);\n\t}\n\tdfs(0);\n\tfor(int i=1;i<=m;i++)printf(\"%d\\n\",ans[i]);\n}\n```\n",
        "postTime": 1594956656,
        "uid": 84564,
        "name": "LebronDurant",
        "ccfLevel": 9,
        "title": "[HAOI2017]\u5b57\u7b26\u4e32"
    },
    {
        "content": "## [HAOI 2017 \u5b57\u7b26\u4e32](https://www.luogu.com.cn/problem/P3735)\uff08AC \u81ea\u52a8\u673a\uff0c\u6811\u72b6\u6570\u7ec4\uff09\n\n\u5148\u8003\u8651\u5982\u4f55\u5224\u65ad\u5b57\u7b26\u4e32 $S$ \u548c $T$ \u201c\u76f8\u7b49\u201d\u3002\n\n\u6761\u4ef6\u4e3a $|S|=|T|$ \u4e14 $\\text{LCP}(S,T)+\\text{LCS}(S,T)+k\\geq |S|$\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u540e\u7684\u7b54\u6848\u548c $p_i$ \u7684\u524d\u7f00\u6216\u540e\u7f00\u5728 $s$ \u4e2d\u7684\u51fa\u73b0\u60c5\u51b5\u6709\u5173\uff0c\u4e8e\u662f\u53ef\u4ee5\u8003\u8651 AC \u81ea\u52a8\u673a\u3002\n\n\u5efa\u51fa\u6240\u6709 $p_i$ \u7684\u6b63\u4e32\u548c\u53cd\u4e32\u7684 AC \u81ea\u52a8\u673a\uff08\u4e00\u4e2a\uff09\uff0c\u7136\u540e\u8003\u8651\u4e00\u4e2a\u5355\u72ec\u7684\u5b57\u7b26\u4e32 $p_i$ \u7684\u8d21\u732e\u3002\n\n\u5047\u8bbe $p_i$ \u7684\u957f\u5ea6\u4e3a $\\text{len}$\uff0c\u5982\u679c $p_i$ \u5728 $s$ \u4e2d**\u6070\u597d**\u80fd\u591f\u5339\u914d\u524d $j$ \u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48 $p_i$ **\u81f3\u5c11**\u4ece $j+k+1$ \u5f00\u59cb\u7684\u540e\u7f00\u90fd\u5fc5\u987b\u5728 $s$ \u5bf9\u5e94\u7684\u4f4d\u7f6e\u5339\u914d\u3002\n\n\u53d1\u73b0\u5982\u679c\u6709\u6761\u4ef6\u4e2d\u6709\u201d\u6070\u597d\u201c\u5e76\u4e0d\u597d\u8ba1\u7b97\u8d21\u732e\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u59a8\u5148\u4e0d\u8003\u8651\u201c\u6070\u597d\u201d\uff0c\u8ba9\u524d\u540e\u7f00\u90fd\u5148\u81f3\u5c11\u6ee1\u8db3\u6761\u4ef6\u3002\n\n\u5047\u8bbe $p_i$ \u7684\u524d\u7f00 $j$ \u5728 AC \u81ea\u52a8\u673a\u4e0a\u7684\u8282\u70b9\u4e3a $u$\uff0c\u540e\u7f00 $j+k+1$ \u4e3a $v$\uff0c\u5bf9\u4e8e $s$ \u4e2d\u4ee5 $pos$ \u7ed3\u5c3e\u7684\u540e\u7f00\uff0c\u5728 AC \u81ea\u52a8\u673a\u4e0a\u7684\u8282\u70b9\u4e3a $x$\uff0c\u4ee5 $pos+k+1$ \u5f00\u59cb\u7684\u524d\u7f00\u8282\u70b9\u4e3a $y$\uff0c\u90a3\u4e48\uff0c$p_i$ \u6709\u8d21\u732e\u5f53\u4e14\u4ec5\u5f53\u5728 fail \u6811\u4e0a\uff0c$x$ \u5728 $u$ \u7684\u5b50\u6811\u4e2d\u4e14 $y$ \u5728 $v$ \u7684\u5b50\u6811\u4e2d\u3002\n\n\u4e8e\u662f\u76f8\u5f53\u4e8e\u662f\u5148\u904d\u5386 $u$ \u5b50\u6811\u7684\u6240\u6709 $x$\uff0c\u5728\u6240\u6709\u7684 $y$ \u4e0a\u6253\u4e0a\u6807\u8bb0\uff0c\u6700\u540e\u518d\u67e5\u8be2 $v$ \u7684\u5b50\u6811\u6709\u591a\u5c11\u6807\u8bb0\uff0c\u8fd9\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u73b0\u5728\u8fd8\u6709\u4e2a\u95ee\u9898\u662f\uff0c\u6211\u4eec\u7b97\u7684\u662f\u81f3\u5c11\uff0c\u4e00\u4e2a\u5408\u6cd5\u7684\u7b54\u6848\u53ef\u80fd\u4f1a\u7b97\u591a\u6b21\uff0c\u8fd9\u53ef\u4ee5\u7528 $k-1$ \u7684\u7b54\u6848\u53bb\u51cf\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u4e00\u4e0b\u8fb9\u754c\u3002\n\n\u4ee3\u7801\uff1a\n```c++\n#include <bits/stdc++.h>\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\ntypedef long long ll;\nusing namespace std;\nconst int maxn = 4e5 + 5;\nint n, m, k, cnt = 1, dfntimes, p1[maxn], p2[maxn], ans[maxn], dfn[maxn], sz[maxn];\nchar a[maxn], b[maxn];\nvector<pair<int, int>> qry[maxn];\nvector<int> e[maxn], upd[maxn];\nstruct ACAM {\n\tint ch[94], fail;\n} ac[maxn];\nstruct BIT {\n\tint tree[maxn];\n\tvoid update(int x, int v) {\n\t\tfor(; x <= cnt; x += x & (-x)) {\n\t\t\ttree[x] += v;\n\t\t}\n\t}\n\tint query(int x) {\n\t\tint res = 0;\n\t\tfor(; x >= 1; x -= x & (-x)) {\n\t\t\tres += tree[x];\n\t\t}\n\t\treturn res;\n\t}\n\tint query(int l, int r) {\n\t\treturn query(r) - query(l - 1);\n\t}\n} t[2];\nvoid build() {\n\tqueue<int> q;\n\tfor(int i = 0; i < 94; i++) {\n\t\tif(ac[1].ch[i]) {\n\t\t\tac[ac[1].ch[i]].fail = 1;\n\t\t\tq.push(ac[1].ch[i]);\n\t\t}\n\t\telse {\n\t\t\tac[1].ch[i] = 1;\n\t\t}\n\t}\n\twhile(!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor(int i = 0; i < 94; i++) {\n\t\t\tif(ac[u].ch[i]) {\n\t\t\t\tac[ac[u].ch[i]].fail = ac[ac[u].fail].ch[i];\n\t\t\t\tq.push(ac[u].ch[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tac[u].ch[i] = ac[ac[u].fail].ch[i];\n\t\t\t}\n\t\t}\n\t}\n}\nvoid dfs_pre(int u) {\n\tdfn[u] = ++dfntimes;\n\tsz[u] = 1;\n\tfor(int v : e[u]) {\n\t\tdfs_pre(v);\n\t\tsz[u] += sz[v];\n\t}\n}\nvoid dfs(int u) {\n\tfor(auto i : qry[u]) {\n\t\tans[abs(i.se)] += t[i.se > 0].query(dfn[i.fi], dfn[i.fi] + sz[i.fi] - 1) * (i.se > 0 ? -1 : 1);\n\t}\n\tfor(int i : upd[u]) {\n\t\tt[i > 0].update(dfn[abs(i)], 1);\n\t}\n\tfor(int v : e[u]) {\n\t\tdfs(v);\n\t}\n\tfor(auto i : qry[u]) {\n\t\tans[abs(i.se)] += t[i.se > 0].query(dfn[i.fi], dfn[i.fi] + sz[i.fi] - 1) * (i.se > 0 ? 1 : -1);\n\t}\n}\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tcin >> k >> (a + 1);\n\tn = strlen(a + 1);\n\tcin >> m;\n\tfor(int i = 1; i <= m; i++) {\n\t\tcin >> (b + 1);\n\t\tint len = strlen(b + 1);\n\t\tif(len < k) {\n\t\t\tans[i] = n - len + 1;\n\t\t\tcontinue;\n\t\t}\n\t\tp1[0] = p2[len + 1] = 1;\n\t\tfor(int j = 1, u = 1; j <= len; j++) {\n\t\t\tif(!ac[u].ch[b[j] - 33]) {\n\t\t\t\tac[u].ch[b[j] - 33] = ++cnt;\n\t\t\t}\n\t\t\tu = ac[u].ch[b[j] - 33];\n\t\t\tp1[j] = u;\n\t\t}\n\t\tfor(int j = len, u = 1; j >= 1; j--) {\n\t\t\tif(!ac[u].ch[b[j] - 33]) {\n\t\t\t\tac[u].ch[b[j] - 33] = ++cnt;\n\t\t\t}\n\t\t\tu = ac[u].ch[b[j] - 33];\n\t\t\tp2[j] = u;\n\t\t}\n\t\tfor(int j = 0; j <= len - k; j++) {\n\t\t\tqry[p1[j]].eb(p2[j + k + 1], i);\n\t\t}\n\t\t// j = 0 \u9700\u8981\u7279\u6b8a\u5904\u7406\n\t\tfor(int j = 1; j <= len - k; j++) {\n\t\t\tqry[p1[j]].eb(p2[j + k], -i);\n\t\t}\n\t}\n\tbuild();\n\tfor(int i = 2; i <= cnt; i++) {\n\t\te[ac[i].fail].eb(i);\n\t}\n\tdfs_pre(1);\n\tfor(int i = 1, u = 1; i <= n; i++) {\n\t\tu = ac[u].ch[a[i] - 33];\n\t\tp1[i] = u;\n\t}\n\tfor(int i = n, u = 1; i >= 1; i--) {\n\t\tu = ac[u].ch[a[i] - 33];\n\t\tp2[i] = u;\n\t}\n\tp1[0] = p2[n + 1] = 1;\n\tfor(int j = 0; j <= n - k; j++) {\n\t\tupd[p1[j]].eb(p2[j + k + 1]);\n\t}\n\tfor(int j = 1; j <= n - k; j++) {\n\t\tupd[p1[j]].eb(-p2[j + k]);\n\t}\n\tdfs(1);\n\tfor(int i = 1; i <= m; i++) {\n\t\tcout << ans[i] << '\\n';\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1673267270,
        "uid": 114168,
        "name": "yanchengzhi",
        "ccfLevel": 7,
        "title": "HAOI 2017 \u5b57\u7b26\u4e32\uff08AC \u81ea\u52a8\u673a\uff0c\u6811\u72b6\u6570\u7ec4\uff09"
    },
    {
        "content": "\u6050\u6016\u5b57\u7b26\u4e32\u3002\n\n\u9996\u5148\u4f60\u5f97\u4f1a AC \u81ea\u52a8\u673a\uff0c\u7136\u540e\u53d1\u73b0\u9898\u76ee\u9650\u5236\u5373\u4e3a $lcp+k+lcs\\geq|p|$ \u5177\u4f53\u662f\u5565\u770b\u5176\u4ed6\u9898\u89e3\u3002\n\n\u7136\u540e\u4f60\u53d1\u73b0 $\\sum |p|\\leq2\\times 10^5$ \u6240\u4ee5\u53ef\u4ee5\u679a\u4e3e $lcp$ \u7684\u4f4d\u7f6e\uff0c\u4e8e\u662f $lcs$ \u4e5f\u786e\u5b9a\u4e86\u3002\n\n\u5927\u6982\u662f\u8fd9\u6837\uff1a\uff08\u7528 p \u4ee3\u66ff lcp s \u4ee3\u66ff lcs\uff09\n\n```\nppppkkkkssss\n\n```\n\n\u4f46\u662f\u4f60\u53ef\u80fd\u4f1a\u95ee\u8981\u662f $k-1$ \u600e\u4e48\u529e\uff0c\u5f53\u7136\u80af\u5b9a\u6ee1\u8db3 $k$ \u7684 $k-1$ \u4e5f\u662f\u4f1a\u6ee1\u8db3\u7684\u3002\n\n\u4f46\u662f\u597d\u50cf\u4f1a\u7b97\u91cd\uff0c\u6211\u4eec\u53d1\u73b0\u662f\u8fd9\u6837\u7684\uff1a\n\n```\nppppkkkksss\npppkkkkssss\n\nppppkkkssss\n\n```\n\n\u5e95\u4e0b\u90a3\u4e2a\u88ab\u7b97\u4e86\u4e24\u6b21\uff0c\u4e8e\u662f\u53d1\u73b0\u51cf\u53bb\u5c31\u53ef\u4ee5\u4e86\uff0c\u7136\u540e\u5bf9\u4e8e $<k-1$ \u7684\u540c\u7406\u63a8\u4e00\u63a8\u53d1\u73b0\u53ef\u884c\u3002\n\n\u4e8e\u662f\u53ea\u8981\u5728\u4e3b\u4e32\u679a\u4e3e\u4e00\u6ce2\uff0c\u8003\u8651\u6bcf\u4e2a\u4eba\u4f1a\u8986\u76d6\u591a\u5c11\u4e2a\u5b50\u4e32\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u53d1\u73b0\u4e00\u4e2a ACAM \u4e0d\u592a\u591f\uff0c\u8003\u8651\u524d\u7f00\u4e00\u4e2a ACAM\uff0c\u540e\u7f00\u4e00\u4e2a ACAM\u3002\n\n\u7136\u540e\u6839\u636e ACAM \u7406\u8bba\uff0c\u53ef\u4ee5\u5c06\u4e3b\u4e32\u524d\u7f00\u540e\u7f00\u548c\u5339\u914d\u4e32\u524d\u7f00\u540e\u7f00\u5728 ACAM \u7684\u4f4d\u7f6e\u641e\u51fa\u6765\uff0c$A$ \u8986\u76d6 $B$ \u5373\u4e3a $B$ \u5728 fail \u6811\u4e0a\u80fd\u8df3\u5230 $A$ \u3002\n\n\u4e8e\u662f\u5c06 fail \u6811\u5efa\u51fa\u6765\uff0c\u5728\u8bb0\u5f55\u4e00\u6ce2 dfs \u5e8f\u5c31\u53ef\u4ee5\u53d1\u73b0\u8fd9\u9898\u5c31\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u70b9\uff01\n\n\u4e8e\u662f\u53ef\u4ee5\u5dee\u5206\u4e24\u7ef4\u6811\u72b6\u6570\u7ec4\uff0c\u6216\u8005\u5dee\u5206\u4e00\u7ef4\u7136\u540e\u626b\u63cf\u7ebf\uff0c\u6216\u8005\u4f60\u5199\u4e2a\u6811\u5957\u6811\u5565\u7684\u4e5f\u6ca1\u4eba\u62e6\u4f60\u3002\n\n\u6211\u5199\u7684\u662f\u6811\u72b6\u6570\u7ec4\uff0c\u7ec6\u8282\u8fd8\u662f\u5f88\u591a\u7684\u3002\n\n```cpp\nconst int maxn = 2e5+5;\nll k,n,ans[maxn],len[maxn];char s[maxn],p[maxn];\nstruct AC_AutoMation{\n\tvector<ll>g[maxn],p[maxn];ll dft;\n\tll dfn[maxn],low[maxn],fail[maxn],tr[maxn][100],tot,ed[maxn];\n\tIV insert(char*s,ll id){ll now=0;\n\t\tp[id].resize(strlen(s+1)+10);\n\t\tF(i,0,(ll)p[id].size()-1)p[id][i]=0;\n\t\tfor(int i=1;s[i];i++){\n\t\t\tll ch=s[i]-33;\n\t\t\tif(!tr[now][ch])tr[now][ch]=++tot;\n\t\t\tp[id][i]=now=tr[now][ch];\n\t\t}\n\t\ted[id]=now;\n\t}\n\tIV dfs(ll u){dfn[u]=++dft;for(ll v:g[u])dfs(v);low[u]=dft;}\n\tIV Build(){\n\t\tqueue<ll>qwq;\n\t\tF(i,0,99)if(tr[0][i])qwq.push(tr[0][i]);\n\t\twhile(!qwq.empty()){\n\t\t\tll u=qwq.front();qwq.pop();\n\t\t\tF(i,0,99)if(!tr[u][i])tr[u][i]=tr[fail[u]][i];\n\t\t\telse fail[tr[u][i]]=tr[fail[u]][i],qwq.push(tr[u][i]);\n\t\t}\n\t\tF(i,1,tot)g[fail[i]].push_back(i);dfs(0);\n\t}\n};\nAC_AutoMation AC1,AC2;\nll now1[maxn],now2[maxn],cnt;\nstruct node{ll x,y,id,mul;}qwq[maxn*5];\nstruct BIT{\n\tll c[maxn],ans;IV clear(){mem(c,0);}\n\tIV add(ll pos,ll val){for(;pos<=AC2.dft;pos+=pos&-pos)c[pos]+=val;}\n\tI query(ll pos){ans=0;for(;pos;pos-=pos&-pos)ans+=c[pos];return ans;}\n}bit;\nIV solve(ll k,ll mul,ll type){cnt=0;ll N=strlen(s+1);\n\tF(i,1,N)now1[i]=AC1.tr[now1[i-1]][s[i]-33];\n\tD(i,N,1)now2[i]=AC2.tr[now2[i+1]][s[i]-33];\n\tF(i,0,N-k)qwq[++cnt]=node{AC1.dfn[now1[i]],AC2.dfn[now2[i+k+1]],0,0};\n\tF(i,1,n){\n\t\tF(j,-type,len[i]-k+type){\n\t\t\tll l=j,r=j+k+1,d1=AC1.p[i][l],d2=AC2.p[i][len[i]-r+1];\n\t\t\tqwq[++cnt]=node{AC1.low[d1],AC2.low[d2],i,1};\n\t\t\tqwq[++cnt]=node{AC1.dfn[d1]-1,AC2.low[d2],i,-1};\n\t\t\tqwq[++cnt]=node{AC1.low[d1],AC2.dfn[d2]-1,i,-1};\n\t\t\tqwq[++cnt]=node{AC1.dfn[d1]-1,AC2.dfn[d2]-1,i,1};\n\t\t}\n\t}\n\tsort(qwq+1,qwq+1+cnt,[](node x,node y){return x.x==y.x?x.id<y.id:x.x<y.x;});\n\tbit.clear();F(i,1,cnt)if(!qwq[i].id)bit.add(qwq[i].y,1);\n\telse ans[qwq[i].id]+=mul*qwq[i].mul*bit.query(qwq[i].y);\n}\nint main(){k=read();scanf(\"%s\",s+1);n=read();F(i,1,n){\n\t\tscanf(\"%s\",p+1);AC1.insert(p,i);len[i]=strlen(p+1);\n\t\treverse(p+1,p+1+len[i]);AC2.insert(p,i);\n\t}\n\tAC1.Build();AC2.Build();solve(k,1,0);solve(k-1,-1,-1);\t\n\tF(i,1,n)if(len[i]<=k)printf(\"%d\\n\",(ll)strlen(s+1)-len[i]+1);else printf(\"%d\\n\",ans[i]);return 0;\n}\n```\n\n\n\n\n\n",
        "postTime": 1648646747,
        "uid": 359952,
        "name": "_lbw_",
        "ccfLevel": 6,
        "title": "P3735 [HAOI2017]\u5b57\u7b26\u4e32 \u9898\u89e3"
    },
    {
        "content": "\u663e\u7136\u4e00\u4e2a\u5408\u6cd5\u5339\u914d\u6709 $lcp+lcs+k>|p_i|$ \u3002\n\n\u5bf9\u4e8e\u6240\u6709 $p_i$ \u53ca\u5176\u53cd\u4e32\u5efa\u51fa AC \u81ea\u52a8\u673a\u3002\u7531 AC \u81ea\u52a8\u673a\u7684\u5339\u914d\u65b9\u5f0f\u53ef\u5f97\uff1a\u5bf9\u4e8e $S$ \u7684\u4e00\u6bb5\u957f\u4e3a $|p_i|$ \u7684\u5b50\u4e32 $S_{x,x+|p_i|-1}$ \uff0c\u5b83\u80fd\u4ea7\u751f\u8d21\u732e\u5f53\u4e14\u4ec5\u5f53\u4e2d\u95f4\u5b58\u5728\u957f\u5ea6\u4e0d\u8d85\u8fc7 $k$ \u7684\u5b50\u4e32 $S_{j\\cdots l}$ \u4f7f\u5f97 $j$ \u5728\u6b63\u4e32 AC \u81ea\u52a8\u673a\u4e2d\u80fd\u8df3 fail \u5230\u8fbe $p_{j-x}$ \u7684\u4f4d\u7f6e\uff0c\u4e14\u5728\u53cd\u4e32\u7684 AC \u81ea\u52a8\u673a\u4e2d\u4e5f\u80fd\u8df3 fail \u5230\u8fbe $p_{l-x}$ \u7684\u4f4d\u7f6e\u3002\n\n\u8003\u8651\u5f3a\u5236\u8ba9\u4e2d\u95f4\u533a\u95f4\u5927\u5c0f\u4e3a $k$ \uff0c\u5e76\u8ba1\u7b97\u80fd\u591f\u901a\u8fc7\u5b83\u5b9e\u73b0\u5408\u6cd5\u7684\u533a\u95f4\u6570\u91cf\u3002\u4f46\u8fd9\u6837\u7684\u8bdd\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5b50\u4e32 $S_{x,x+|p_i|-1}$ \uff0c\u5982\u679c\u4e2d\u95f4\u4e0d\u76f8\u7b49\u7684\u4f4d\u7f6e\u7684\u6781\u5dee\u5c0f\u4e8e $k-1$ \uff0c\u90a3\u4e48\u5c31\u4f1a\u88ab\u8ba1\u7b97\u591a\u6b21\u3002\u4e0d\u8fc7\u53ef\u4ee5\u901a\u8fc7\u51cf\u53bb $k'\\leftarrow k-1$ \u65f6\u7684\u7b54\u6848\u6d88\u53bb\u591a\u4f59\u7684\u90e8\u5206\u3002\uff08\u5f53\u7136\u8fd9\u91cc\u8981\u6ce8\u610f\u5728\u8fb9\u754c\u4e0a\u7684\u533a\u95f4\u7684\u5904\u7406\uff0c\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\u662f\u8ba1\u7b97 $k$ \u65f6\uff0c\u8ba1\u7b97\u6240\u6709\u4e0d\u8d85\u51fa\u8fb9\u754c\u7684\u533a\u95f4\uff1b\u8ba1\u7b97 $k'$ \u65f6\uff0c\u53ea\u8ba1\u7b97\u6240\u6709\u4e0d\u7d27\u9760\u7740\u8fb9\u754c\u7684\u533a\u95f4\uff09\n\n\u4f46\u662f\u53d1\u73b0\u8fd9\u6837\u8ba1\u7b97\u7684\u8bdd\u5fc5\u987b\u679a\u4e3e\u6bcf\u4e2a\u957f\u4e3a $k$ \u7684\u533a\u95f4\u5de6\u53f3\u4e24\u7aef\u70b9\u8df3 fail \u80fd\u5230\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u5bf9\u6bcf\u4e2a $p_i$ \u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u5de6\u7aef\u70b9\u8df3 fail \u5230\u7684\u70b9\u548c\u53f3\u7aef\u70b9\u8df3 fail \u5230\u7684\u70b9\u7ec4\u6210\u7684\u70b9\u5bf9\u6ee1\u8db3\u4ed6\u4eec\u4e4b\u95f4\u76f8\u8ddd $|p_i|$\u3002\n\n\u8bd5\u7740\u6539\u4e3a\u679a\u4e3e\u8df3 fail \u8df3\u5230\u7684\u70b9\u5bf9\uff0c\u5373\u5bf9\u4e8e\u6bcf\u4e2a $p_i$ \uff0c\u679a\u4e3e\u4e8c\u5143\u7ec4 $(x,y),x+k+1=y,0\\leq x<y\\leq|p_i|+1$ \u3002\u663e\u7136\u8fd9\u53ea\u6709 $O(\\sum|p_i|)$ \u4e2a\u3002\u7136\u540e\u53d1\u73b0\u533a\u95f4\u4f1a\u5bf9\u70b9\u5bf9\u4ea7\u751f\u8d21\u732e\u8981\u6c42\u5de6\u7aef\u70b9\u5728 $x$ \u53cd\u5411 fail \u8fb9\u6784\u6210\u7684\u5b50\u6811\u5185\uff0c\u53f3\u7aef\u70b9\u5728 $y$ \u53cd\u5411 fail \u8fb9\u6784\u6210\u7684\u5b50\u6811\u5185\u3002\n\n\u4e8e\u662f\u5c06 fail \u6811\u7528 dfn \u5e8f\u538b\u5728\u4e00\u7ef4\u4e0a\uff0c\u4e00\u4e2a\u5b50\u6811\u5c31\u53d8\u6210\u4e86\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\u3002\u5c06 $(dfn\\_pre_i,dfn\\_suf_{i+k})$ \u89c6\u4f5c\u5e73\u9762\u4e0a\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u540c\u65f6\u5728 $(x,y)$ \u7684\u5b50\u6811\u5185\u5c31\u53d8\u6210\u4e86\u5728\u4e00\u4e2a\u77e9\u5f62\u5185\uff0c\u4ea7\u751f\u7684\u8d21\u732e\u5373\u4e3a\u77e9\u5f62\u5185\u70b9\u7684\u6570\u91cf\uff0c\u53ef\u901a\u8fc7\u4e8c\u4f4d\u6570\u70b9\u89e3\u51b3\u3002\n\n\u8bb0\u5f97\u7279\u5224 $|p_i|\\leq k$ \u7684\u60c5\u51b5\u3002\n\nCode:\n```cpp\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<vector>\nusing namespace std;\nint k,n,l,len[200001];\nlong long ans[200001];\nint son1[200002][94],num1=1,fail1[200002];\nint head1[200002],nxt1[200002];\nint dfn1[200002],lst1[200002],tot1;\nint son2[200002][94],num2=1,fail2[200002];\nint head2[200002],nxt2[200002];\nint dfn2[200002],lst2[200002],tot2;\nchar s[200002],p[200002];\nvector<int>px[200001],py[200001];\nstruct edge{\n\tint i,d;\n}n1[200001],n2[200001];\nbool cmpb(edge x,edge y){return x.d<y.d;}\nvoid build(int id,int li)\n{\n\tfor(int i=0,x=1;i<li;++i)\n\t{\n\t\tp[i]-=33;\n\t\tif(!son1[x][p[i]])\n\t\t{\n\t\t\tson1[x][p[i]]=++num1;\n\t\t\tn1[num1]=(edge){num1,n1[x].d+1};\n\t\t\tfail1[num1]=x;\n\t\t\tdfn1[num1]=p[i];\n\t\t}\n\t\tpx[id][i]=x=son1[x][p[i]];\n\t}\n\tfor(int i=li-1,x=1;~i;--i)\n\t{\n\t\tif(!son2[x][p[i]])\n\t\t{\n\t\t\tson2[x][p[i]]=++num2;\n\t\t\tn2[num2]=(edge){num2,n2[x].d+1};\n\t\t\tfail2[num2]=x;\n\t\t\tdfn2[num2]=p[i];\n\t\t}\n\t\tpy[id][i]=x=son2[x][p[i]];\n\t}\n}\nvoid builddfn1(int x)\n{\n\tdfn1[x]=++tot1;\n\tfor(int i=head1[x];i;i=nxt1[i])\n\t\tbuilddfn1(i);\n\tlst1[x]=tot1;\n}\nvoid builddfn2(int x)\n{\n\tdfn2[x]=++tot2;\n\tfor(int i=head2[x];i;i=nxt2[i])\n\t\tbuilddfn2(i);\n\tlst2[x]=tot2;\n}\nvoid buildfail()//\n{\n\tsort(n1+2,n1+num1+1,cmpb);\n\tfor(int i=2;i<=num1;++i)\n\t{\n\t\tint f1=fail1[fail1[n1[i].i]];\n\t\twhile(f1>1&&!son1[f1][dfn1[n1[i].i]])f1=fail1[f1];\n\t\tif(f1&&son1[f1][dfn1[n1[i].i]])fail1[n1[i].i]=son1[f1][dfn1[n1[i].i]];//\n\t\telse fail1[n1[i].i]=1;\n\t\tnxt1[n1[i].i]=head1[fail1[n1[i].i]];\n\t\thead1[fail1[n1[i].i]]=n1[i].i;\n\t}\n\tbuilddfn1(1);\n\tsort(n2+2,n2+num2+1,cmpb);\n\tfor(int i=2;i<=num2;++i)\n\t{\n\t\tint f2=fail2[fail2[n2[i].i]];\n\t\twhile(f2>1&&!son2[f2][dfn2[n2[i].i]])f2=fail2[f2];\n\t\tif(f2&&son2[f2][dfn2[n2[i].i]])fail2[n2[i].i]=son2[f2][dfn2[n2[i].i]];//\n\t\telse fail2[n2[i].i]=1;\n\t\tnxt2[n2[i].i]=head2[fail2[n2[i].i]];\n\t\thead2[fail2[n2[i].i]]=n2[i].i;\n\t}\n\tbuilddfn2(1);\n}\nstruct node{\n\tint t,x,y,i;\n}c[2000001];\nbool cmp(node x,node y){return x.t!=y.t?x.t<y.t:(x.i!=0)<(y.i!=0);}\nint v1[200001],t[200002],cnt;\nvoid add1(int x,int y)\n{\n\tc[++cnt]=(node){x,y,-1,0};\n}\nvoid find1(int x,int l,int r,int i)\n{\n\tc[++cnt]=(node){x,l,r,i};\n}\nvoid add2(int x)\n{\n\twhile(x<=num2)++t[x],x+=x&-x;\n}\nint find2(int x)\n{\n\tint ans=0;\n\twhile(x)ans+=t[x],x-=x&-x;\n\treturn ans;\n}\nvoid flu()\n{\n\tsort(c+1,c+cnt+1,cmp);\n\tfor(int i=1;i<=cnt;++i)\n\t\tif(c[i].i)\n\t\t{\n\t\t\tif(c[i].i>0)ans[c[i].i]+=find2(c[i].y)-find2(c[i].x-1);\n\t\t\telse ans[-c[i].i]-=find2(c[i].y)-find2(c[i].x-1);\n\t\t}\n\t\telse add2(c[i].x);\n}\nvoid work0()\n{\n\tv1[0]=1;\n\tfor(int i=1,pl=1;i<=l;++i)\n\t{\n\t\twhile(pl>1&&!son1[pl][s[i]-33])pl=fail1[pl];\n\t\tif(son1[pl][s[i]-33])pl=son1[pl][s[i]-33];\n\t\tv1[i]=pl;\n\t}\n}\nvoid work(int kkk)//\n{\n\tcnt=0;\n\tmemset(t,0,sizeof t);\n\tfor(int i=l,pl=1;i-k-1>=0;--i)\n\t{\n\t\twhile(pl>1&&!son2[pl][s[i]-33])pl=fail2[pl];\n\t\tif(son2[pl][s[i]-33])pl=son2[pl][s[i]-33];\n\t\tadd1(dfn1[v1[i-k-1]],dfn2[pl]);\n\t}\n\tadd1(dfn1[v1[l-k]],1);\n\tfor(int i=1;i<=n;++i)\n\tif(len[i]>0){\n\t\tif(kkk)\n\t\t{\n\t\t\tfind1(num1,dfn2[py[i][k]],lst2[py[i][k]],i);\n\t\t\tfind1(lst1[px[i][len[i]-k-1]],1,num2,i);\n\t\t\tfind1(dfn1[px[i][len[i]-k-1]]-1,1,num2,-i);\n\t\t}\n\t\tfor(int j=0;j+k+1<len[i];++j)\n\t\t{\n\t\t\tfind1(lst1[px[i][j]],dfn2[py[i][j+k+1]],lst2[py[i][j+k+1]],i);\n\t\t\tfind1(dfn1[px[i][j]]-1,dfn2[py[i][j+k+1]],lst2[py[i][j+k+1]],-i);\n\t\t}\n\t}\n\tflu();\n}\nint main()\n{\n\t#ifndef ONLINE_JUDGE\n\tfreopen(\"C:\\\\Users\\\\user\\\\Downloads\\\\B4.in\",\"r\",stdin);\n\t#endif\n\tscanf(\"%d%s%d\",&k,s+1,&n);\n\tl=strlen(s+1);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%s\",p);\n\t\tlen[i]=strlen(p);\n\t\tif(len[i]>k)\n\t\t{\n\t\t\tpx[i].reserve(len[i]+1);\n\t\t\tpy[i].reserve(len[i]+1);\n\t\t\tbuild(i,len[i]);\n\t\t}else len[i]=-len[i];\n\t}\n\tbuildfail();\n\twork0();\n\t--k;\n\twork(0);\n\tfor(int i=1;i<=n;++i)\n\t\tans[i]=-ans[i];\n\t++k;\n\twork(1);\n\tfor(int i=1;i<=n;++i)\n\t\tif(len[i]>0)printf(\"%lld\\n\",ans[i]);\n\t\telse printf(\"%d\\n\",l+len[i]+1);\n}\n```\n",
        "postTime": 1647329955,
        "uid": 146070,
        "name": "Pekemetier",
        "ccfLevel": 8,
        "title": "[HAOI2017]\u5b57\u7b26\u4e32 \u9898\u89e3"
    },
    {
        "content": "```\n#include <bits/stdc++.h>\n#define fi first\n#define se second\n#define pii pair<int,int>\n#define pdi pair<db,int>\n#define mp make_pair\n#define pb push_back\n#define enter putchar('\\n')\n#define space putchar(' ')\n#define eps 1e-8\n#define MAXN 200005\n#define mo 974711\n//#define ivorysi\nusing namespace std;\ntypedef long long int64;\ntypedef double db;\ntemplate<class T>\nvoid read(T &res) {\n    res = 0;char c = getchar();T f = 1;\n    while(c < '0' || c > '9') {\n    if(c == '-') f = -1;\n    c = getchar();\n    }\n    while(c >= '0' && c <= '9') {\n    res = res * 10 + c - '0';\n    c = getchar();\n    }\n    res *= f;\n}\ntemplate<class T>\nvoid out(T x) {\n    if(x < 0) {x = -x;putchar('-');}\n    if(x >= 10) {\n    out(x / 10);\n    }\n    putchar('0' + x % 10);\n}\n\nint L[MAXN],R[MAXN],K,N,dfn[MAXN * 2],idx,siz[MAXN * 2],H,ans[MAXN],pos[2][MAXN];\nchar s[MAXN],t[MAXN];\nvector<int> son[MAXN * 2];\nvector<int> ver[MAXN * 2];\nvector<pii > Qry[MAXN * 2];\nint sum[2][MAXN * 2];\nnamespace ACAM {\n    int tr[MAXN * 2][94],fail[MAXN * 2],Ncnt,rt,que[MAXN * 2],ql,qr;\n    void Init() {\n    Ncnt = 1,rt = 1;\n    }\n    int ins(int p,int c) {\n    if(!tr[p][c]) tr[p][c] = ++Ncnt;\n    return tr[p][c];\n    }\n    void build_ACAM() {\n    ql = 1,qr = 0;\n    que[++qr] = 1;fail[1] = 1;\n    while(ql <= qr) {\n        int u = que[ql++];\n        for(int i = 0 ; i <= 93 ; ++i) {\n        if(tr[u][i]) {\n            int v = tr[u][i];\n            int t = fail[u];\n            if(u == 1) fail[v] = 1;\n            else {\n            while(1) {\n                if(tr[t][i]) {fail[v] = tr[t][i];break;}\n                if(t == 1) {fail[v] = 1;break;}\n                t = fail[t];\n            }\n            }\n            que[++qr] = v;\n            son[fail[v]].pb(v);\n        }\n        }\n    }\n    }\n}\nusing ACAM::ins;\nvoid dfs(int u) {\n    dfn[u] = ++idx;siz[u] = 1;\n    int s = son[u].size();\n    for(int i = 0 ; i < s ; ++i) {\n    dfs(son[u][i]);\n    siz[u] += siz[son[u][i]];\n    }\n}\nint lowbit(int x) {return x & (-x);}\nvoid insert(int on,int x) {\n    while(x <= ACAM::Ncnt) {\n    sum[on][x]++;\n    x += lowbit(x);\n    }\n}\nint Query(int on,int x) {\n    int res = 0;\n    while(x > 0) {\n    res += sum[on][x];\n    x -= lowbit(x);\n    }\n    return res;\n}\nint Query_Range(int on,int x) {\n    return Query(on,dfn[x] + siz[x] - 1) - Query(on,dfn[x] - 1);\n}\nvoid Process(int u) {\n    int s = Qry[u].size();\n    for(int i = 0 ; i < s ; ++i) {\n    if(Qry[u][i].se > 0) ans[Qry[u][i].fi] -= Query_Range(0,Qry[u][i].se); \n    if(Qry[u][i].se < 0) ans[Qry[u][i].fi] += Query_Range(1,-Qry[u][i].se);\n    }\n    s = ver[u].size();\n    for(int i = 0 ; i < s ; ++i) {\n    if(ver[u][i] > 0) insert(0,dfn[ver[u][i]]);\n    if(ver[u][i] < 0) insert(1,dfn[-ver[u][i]]);\n    }\n    s = son[u].size();\n    for(int i = 0 ; i < s ; ++i) {\n    Process(son[u][i]);\n    }\n    s = Qry[u].size();\n    for(int i = 0 ; i < s ; ++i) {\n    if(Qry[u][i].se > 0) ans[Qry[u][i].fi] += Query_Range(0,Qry[u][i].se);\n    if(Qry[u][i].se < 0) ans[Qry[u][i].fi] -= Query_Range(1,-Qry[u][i].se);\n    }\n}\nvoid Solve() {\n    read(K);\n    scanf(\"%s\",s + 1);\n    H = strlen(s + 1);\n    read(N);\n    ACAM::Init();\n    for(int i = 1 ; i <= N ; ++i) {\n    scanf(\"%s\",t + 1);\n    int len = strlen(t + 1);\n    int p = 1;\n    if(len > K) {\n        for(int j = 1 ; j <= len ; ++j) {\n        p = ins(p,t[j] - 33);\n        L[j] = p;\n        }\n        p = 1;\n        for(int j = len ; j >= 1 ; --j) {\n        p = ins(p,t[j] - 33);\n        R[j] = p;\n        }\n        for(int j = 0 ; j <= len - K; ++j) {\n        int a = j == 0 ? 1 : L[j];\n        int b = j + K + 1 == len + 1 ? 1 : R[j + K + 1];\n        Qry[a].pb(mp(i,b));\n        }\n        for(int j = 1 ; j <= len - K; ++j) {\n        int a = L[j],b = R[j + K];\n        Qry[a].pb(mp(i,-b));\n        }\n    }\n    else ans[i] = H - len + 1;\n    }\n    ACAM::build_ACAM();\n    int p = 1;\n    pos[0][0] = 1;\n    for(int i = 1 ; i <= H ; ++i) {\n    while(1) {\n        if(ACAM::tr[p][s[i] - 33]) {p = ACAM::tr[p][s[i] - 33];break;}\n        else if(p == 1) break;\n        p = ACAM::fail[p];\n    }\n    pos[0][i] = p;\n    }\n    p = 1;\n    pos[1][H + 1] = 1;\n    for(int i = H ; i >= 1 ; --i) {\n    while(1) {\n        if(ACAM::tr[p][s[i] - 33]) {p = ACAM::tr[p][s[i] - 33];break;}\n        else if(p == 1) break;\n        p = ACAM::fail[p];\n    }\n    pos[1][i] = p;\n    }\n    dfs(1);\n    for(int i = 0 ; i <= H - K; ++i) {\n    ver[pos[0][i]].pb(pos[1][i + K + 1]);\n    }\n    for(int i = 1 ; i <= H - K; ++i) {\n    ver[pos[0][i]].pb(-pos[1][i + K]);\n    }\n    Process(1);\n    for(int i = 1 ; i <= N ; ++i) {\n    out(ans[i]);enter;\n    }\n}    \nint main() {\n#ifdef ivorysi\n    freopen(\"f1.in\",\"r\",stdin);\n#endif\n    Solve();\n}\n```\n```\n\u597d\u795e\u4ed9\u7684\u9898\u554a\n\n\u611f\u89c9\u8f6c\u4e8c\u7ef4\u5e73\u9762\u80fd\u60f3\u5230\uff0c\u7b97\u91cd\u590d\u60c5\u51b5\u7684\u65b9\u6cd5\u771f\u60f3\u4e0d\u5230\u554a\n\n\u901a\u8fc7\u6252stdcall\u4ee3\u7801\u83b7\u5f97\u7684\u9898\u89e3QAQQQQ\n\n\u6211\u4eec\u5148\u628apipi\u6b63\u4e32\u53cd\u4e32\u5efa\u51fa\u4e00\u4e2aAC\u81ea\u52a8\u673a\u6765\n\n\u7136\u540e\u6211\u4eec\u628as\u4e32\u653e\u5728\u4e0a\u9762\u8dd1\u5339\u914d\uff0c\u6b63\u7740\u8dd1\u4e00\u904d\uff0c\u53cd\u7740\u8dd1\u4e00\u904d\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86ss\u4e2d\u6bcf\u4e2a\u4f4d\u7f6e\u6b63\u7740\u548c\u53cd\u7740\u80fd\u5339\u914d\u5230\u7684\u8282\u70b9\u7f16\u53f7\n\n\u7136\u540e\u5bf9\u4e8eAC\u81ea\u52a8\u673a\uff0c\u6211\u4eec\u5efa\u51fafail\u6811\u6765\uff0c\u5e76\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u5728fail\u6811\u4e0adfs\u5e8f\n\n\u5bf9\u4e8eAC\u81ea\u52a8\u673a\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u628apipi\u6b63\u4e32\u7684\u8be2\u95ee\u6302\u5728\u4e0a\u9762\uff0c\u5047\u5982\u8fd9\u4e2a\u70b9\u7684\u5339\u914d\u6df1\u5ea6\u4e3ax\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u5bf9\u4e8e\u8fd9\u4e2a\u70b9fail\u6811\u91cc\u6240\u6709\u5339\u914d\u5230\u7684ss\u4e2d\u6b63\u7740\u5339\u914d\u5230\u7684\u4f4d\u7f6e\uff0c\u95ee\u8fd9\u4e2a\u4f4d\u7f6ea\uff0ca+k+1a+k+1\u662f\u4e0d\u662f\u5728pipi\u53cd\u4e32x+k+1x+k+1(\u4e5f\u662f\u539f\u4e0b\u6807\uff09\u6240\u5728AC\u81ea\u52a8\u673a\u8282\u70b9fail\u6811\u7684\u5b50\u6811\u91cc\n\n\u4e3e\u4e2a\u4f8b\u5b50\nk = 3\n\u5047\u5982pipi\u662f\nabacdefg\n\u7136\u540es\u4e2d\u7684\u4e00\u6bb5\u662f\nabahdefg\n\u6211\u4eec\u627e\u5230pipi\u5728AC\u81ea\u52a8\u673a\u4e2daba\u6240\u5728\u7684\u8282\u70b9\uff0c\u6302\u4e0apipi\u8fd9\u4e2a\u8be2\u95ee\uff0c\u627e\u51fa\u6240\u6709\u8fd9\u4e2a\u8282\u70b9fail\u6811\u91cc\u5339\u914d\u5230\u7684s\u6b63\u4e32\u7684\u4f4d\u7f6eaa\n\u67e5\u8be2\u7684\u662fpipi\u53cd\u4e32gfe\u6240\u5728\u8282\u70b9fail\u6811\u5b50\u6811\u91cc\uff0c\u95eea+k+1a+k+1\u6709\u591a\u5c11\u4e2a\n\n\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\uff0c\u95ee\u4e00\u4e2a\u70b9\u5b50\u6811\u91cc\u7684\u53ea\u8981\u7528\u904d\u5386\u5b50\u6811\u540e\u7684\u503c\u51cf\u6389\u904d\u5386\u5b50\u6811\u524d\u7684\u503c\u5c31\u597d\n\n\u7136\u800c\u2026\u2026\u4f60\u53d1\u73b0\u8fd9\u6837\u7edf\u8ba1\u4f1a\u6709\u91cd\u590d\u4e86\u5417\n\n\u8fd8\u662f\u521a\u521a\u90a3\u4e2a\u4f8b\u5b50\n\u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u5728a\u6240\u5728\u7684\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u8fd8\u4f1a\u8ba1\u7b97\u4e00\u904d\u8fd9\u4e00\u6bb5\n\n\u4e3a\u4e86\u53bb\u91cd\uff0c\u6211\u4eec\u4f7f\u5f97\u5de6\u8fb9\u5339\u914d\u8981\u5230\u8fbe\u6700\u957f\uff0c\u4e5f\u5c31\u662f\uff0c\u5982\u679c\u8fd9\u4e2a\u4f4d\u7f6ea+ka+k\u4e5f\u5408\u6cd5\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u51cf\u6389\u5b83\n\u5c31\u662f\u5728aba\u8fd9\u4e2a\u70b9\uff0c\u540c\u65f6\u6302\u4e0agfed\u8282\u70b9\uff0c\u7136\u540e\u51cf\u6389\u8fd9\u4e9b\u65b9\u6848\n\n\u7ef4\u62a4\u65b9\u6cd5\u8fd8\u662f\u6811\u72b6\u6570\u7ec4\uff0c\u548c\u4e0a\u9762\u7c7b\u4f3c\n```\n",
        "postTime": 1556255034,
        "uid": 142305,
        "name": "\u5356\u6deb\u7fc1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3735 \u3010[HAOI2017]\u5b57\u7b26\u4e32\u3011"
    }
]