[
    {
        "content": "\u64cd\u4f5c\u4e8c\u5c06\u7b2cxi\u5230\u7b2cyi\u4e2a\u5b57\u7b26\u5168\u90e8\u66ff\u6362\u4e3aki\n\n\u4f60\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\n\n\u6ca1\u9519\uff0c\u63a8\u5e73\u4e00\u6bb5\u533a\u95f4\uff0c\u73c2\u6735\u8389\u6811\u57fa\u672c\u64cd\u4f5c\u3002\n\n![](https://i.loli.net/2018/04/09/5aca3ca156185.jpg)\n\n\u73c2\u6735\u8389\u6811\uff0c\u4f18\u96c5\u7684\u66b4\u529b\u3002\n\n[\u73c2\u6735\u8389\u6811\u6a21\u677f\u9898](https://www.luogu.org/problemnew/show/CF896C)\n\u9898\u89e3\u4e2d\u6709\u5bf9\u73c2\u6735\u8389\u6811\u7684\u8be6\u7ec6\u89e3\u91ca\n\n\u73c2\u6735\u8389\u5c31\u662f\u628a\u6bcf\u4e2a\u6570\u5b57\u5206\u4e3a\u4e09\u5143\u7ec4l,r,v\uff0c\u8868\u793aa[l]~a[r]\u90fd\u662fv\n\n\u4e00\u822c\u662f\u7528set\u5b9e\u73b0\uff0c\u4f46\u6211\u662f\u7528\u94fe\u8868\u5b9e\u73b0\u7684\u3002\n\n\u4e4b\u540e\u5c31\u7c7b\u4f3c\u66b4\u529b\u7684\u5b9e\u73b0\u4e86\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define MAXN 100005\nchar s[MAXN];\nint n,m,nn;\nstruct aa\n{\n    int l,r,rr;\n    char v;\n}a[MAXN*30];\nint c[50];\n\nvoid wt()//\u8c03\u8bd5\u7528\n{\n    cout<<\"-----------------\\n\";\n    for(int i = n+1; i != 0; i = a[i].rr)\n    {\n        cout<<a[i].l<<\" \"<<a[i].r<<\" \"<<a[i].v<<\"\\n\";\n    }\n    cout<<\"-----------------\\n\";\n}\n\nvoid he()//\u5408\u5e76\n{\n    for(int i = n+1; i != 0; i = a[i].rr)\n    {\n        while(a[i].v == a[a[i].rr].v && a[i].rr != 0)\n        {\n            a[i].r = a[a[i].rr].r;\n            a[i].rr = a[a[i].rr].rr;\n        }\n    }\n}\n\nvoid rd()\n{\n    scanf(\"%d%d\",&n,&m);\n    scanf(\"%s\",s+1);\n    for(int i = 1; i <= n; i ++)\n    {\n        if(s[i] <= 'Z' && s[i] >= 'A')\n            s[i] = s[i] -'A' + 'a';\n        a[i].l = i;\n        a[i].r = i;\n        a[i].v = s[i];\n        if(i != n)\n            a[i].rr = i+1;\n    }\n    a[n+1].rr = 1;\n    a[n].rr = n+2;\n    nn = n+2;\n    he();\n}\n\nvoid fen(int i,int x)\n{\n    nn ++;\n    a[nn].rr = a[i].rr;\n    a[nn].r = a[i].r;\n    a[nn].l = x;\n    a[nn].v = a[i].v; \n    a[i].rr = nn;\n    a[i].r = x-1;\n} \n\nint paix(int l,int r,int p,char ch)//p\u4ee3\u8868\u64cd\u4f5c\n{\n    memset(c,0,sizeof(c));\n    for(int i = n+1; i != 0; i = a[i].rr)//\u5148\u5728\u5c06\u90e8\u5206\u5728\u5904\u7406\u533a\u95f4\u5185\u90e8\u5206\u533a\u95f4\u5916\u7684\u5206\u79bb\uff0c\u65b9\u4fbf\u4e4b\u540e\u64cd\u4f5c\n    {\n        if(a[i].l < l && a[i].r >= l) fen(i,l); \n        if(a[i].l <= r && a[i].r > r) fen(i,r+1);\n    }\n    bool t = 0;\n    int lp,rp;\n    \n    for(int i = n+1; i != 0; i = a[i].rr)\n    {\n        if(a[i].l >= l && a[i].r <= r)\n        {\n            if(p == 2)\n                a[i].v = ch; \n            c[a[i].v-'a'] += a[i].r - a[i].l + 1;//\u7edf\u8ba1\u6bcf\u79cd\u5b57\u6bcd\u51fa\u73b0\u6b21\u6570\n            t = 1;\n        }\n        else\n        {\n            if(t)\n            {\n                rp = i;\n                break;\n            }\n            else lp = i;\n        }\n    }\n    if(p == 2)\n    {\n        he();\n        return 0;\n    }\n    if(p == 1)\n    {\n        he(); \n        return c[ch-'a'];\n    }\n    int u = a[lp].r,x = lp;\n    for(int i = 0; i <= 26; i ++)//\u6392\u5e8f\u65f6\u91cd\u65b0\u63d2\u5165\n    if(c[i] != 0)\n    {\n        nn ++;\n        a[x].rr = nn;\n        x = nn;\n        a[nn].v = 'a' + i;\n        a[nn].l = u+1;\n        a[nn].r = u + c[i];\n        u += c[i];\n    }\n    \n    a[x].rr = rp;\n    he();\n    return 0;\n} \n\n\nint main()\n{\n    \n    rd();\n    for(int i = 1; i <= m; i ++)\n    {\n        int l,r,opt;\n        string s;\n        scanf(\"%d\",&opt);\n        if(opt == 1)\n        {\n            cin >> l >> r >> s;\n            if(s[0] < 'a')\n                s[0] = s[0]  - 'A'+ 'a';\n            cout<<paix(l,r,1,s[0])<<\"\\n\";\n                \n        }\n        if(opt == 2)\n        {\n            cin >> l >> r >> s;\n            if(s[0] < 'a')\n                s[0] = s[0] - 'A' +  'a';\n            paix(l,r,2,s[0]);\n        }\n        if(opt == 3)\n        {\n            cin >> l >> r;\n            paix(l,r,0,'a');\n        }\n    }\n    return 0;\n} \n```",
        "postTime": 1538217922,
        "uid": 124721,
        "name": "Ynoi",
        "ccfLevel": 7,
        "title": "\u8bed\u65871\uff08chin1\uff09- \u7406\u7406\u601d\u7ef4\u9898\u89e3"
    },
    {
        "content": "### \u8fd9\u662f\u4e00\u4e2a\u6709\u786e\u5b9a\u590d\u6742\u5ea6\u4e0a\u9650\u7684\u66b4\u529b\u89e3\u6cd5\u2014\u2014\u5206\u5757\n\n\u867d\u7136\u9898\u89e3\u533a\u5df2\u7ecf\u6709\u5206\u5757\u4e86\uff0c\u4f46\u662fta\u5e76\u6ca1\u6709\u5bf9lazy\u6570\u7ec4\u8fd0\u7528\u5230\u6781\u81f4\uff0c\u8fd8\u75af\u72c2maintain\uff0c\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u6781\u9ad8\uff0c\u9700\u8981\u5f00O2\uff0c\u4e8e\u662f\u6211\u7a0d\u5fae\u9b54\u6539\u4e86\u4e00\u756a\uff0c~~\u9524\u4e86\u4e00\u4e9b\u73c2\u6735\u8389\u6811~~\u8fbe\u5230\u4e86\u6700\u4f18\u89e3\u7b2c\u4e8c\u9875\u3002\n\n#### \u601d\u8def\uff1a\n\n\u64cd\u4f5c1\uff1a\u88ab\u5206\u5757\u8279\u70c2\u4e86\u7684\u64cd\u4f5c\uff0c\u66b4\u529b\u626b\u6574\u5757\u548c\u6563\u5757$\\sqrt{n}$\u7684\u65f6\u95f4\u5185\u53ef\u4ee5\u5b8c\u6210\u3002\n\n\u64cd\u4f5c2\uff1a\u8fd0\u7528lazy\u6570\u7ec4\uff0c\u628a\u6574\u5757\u7684\u5b57\u6bcd\u6807\u8bb0\uff0c\u9700\u8981\u65f6\u4e0b\u4f20\uff08maintain\uff09\u5230\u6574\u4e2a\u5757\uff0c\u66b4\u529b\u4fee\u6539\u6563\u5757\uff0c\u540c\u6837\u662f$\\sqrt{n}$\u7684\u3002\n\n\u64cd\u4f5c3\uff1a\u66b4\u529b\u5feb\u6392\uff1f\uff1f\u6210\u529f\u7206\u70b8\uff0c\u4f46\u662f\u6211\u4eec\u4ed4\u7ec6\u4e00\u60f3\uff0c\u56e0\u4e3a\u503c\u57df\u662f1\uff5e26\uff0c\u6240\u4ee5\u6876\u6392\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u9009\u62e9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7edf\u8ba1\u533a\u95f4\u4e2d\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6309\u987a\u5e8f\u63d2\u5165\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u3002\u3002\u5927\u4f53\u4e0a\u8fd8\u662f$\\sqrt{n}$\u5427\uff0c\u7136\u800c\u67e5\u8be2\u63d2\u5165\u90fd\u898126\u6b21\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5e38\u6570\u7b97\u8d77\u6765\u3002\u3002\u3002\n\n\u4e3a\u4e86\u4e0d\u88abODT\u540a\u6253\uff0c\u6211\u4eec\u9700\u8981\u505a\u4e00\u4e9b\u4f18\u5316\uff1a\n\n#### \u51cf\u5c11maintain\n\u5982\u679c\u5f53\u524d\u5757\u6709\u61d2\u6807\u8bb0\uff0c\u4e0b\u4f20\u7684\u4ee3\u4ef7\u5c31\u662f$\\sqrt{n}$\u7684\uff0c\u975e\u5e38\u6162\uff0c\u6240\u4ee5\u6211\u4eec\u80fd\u4e0dmaintain\u5c31\u4e0dmaintain\uff0c\u9996\u5148\u4fee\u6539\u548c\u67e5\u8be2\u6574\u5757\u7684\u65f6\u5019\u5c31\u6ca1\u5fc5\u8981\u4e86\uff0c\u76f4\u63a5\u4fee\u6539\u61d2\u6807\u8bb0\u548c\u67e5\u8be2\u5c31\u884c\u3002\u603b\u8017\u65f6\uff1a3700ms->2100ms->900ms\uff08O2\uff09\n\n#### \u5bf9\u64cd\u4f5c\u4e09\u526a\u679d\n\u663e\u7136\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u590d\u6742\u5ea6\u57fa\u672c\u53d6\u51b3\u4e8e\u64cd\u4f5c\u4e09\u7684\u590d\u6742\u5ea6\uff0c\u6240\u4ee5\u4f18\u5316\u64cd\u4f5c\u4e09\u7684\u590d\u6742\u5ea6\u6027\u4ef7\u6bd4\u662f\u5f88\u9ad8\u7684\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6709\u61d2\u6807\u8bb0\u7684\u5757\uff0c\u5b83\u53ea\u4f1a\u5bf9\u4e00\u4e2a\u5b57\u6bcd\u505a\u8d21\u732e\uff0c\u4e0d\u9700\u8981\u626b26\u6b21\uff0c\u4e8e\u662f\u6211\u4eec\u52a0\u4e2a\u7279\u5224\uff0c\u53c8\u51cf\u5c0f\u4e86\u4e00\u534a\u5e38\u6570\u3002\u603b\u8017\u65f6\uff1a900ms->450ms\uff0c\u4e0d\u5f00O2\uff1a1300ms\n\n\u81f3\u6b64\uff0c\u5176\u5b83\u7684\u4f18\u5316\u90fd\u662f\u5728O\uff08$n\\sqrt{n}$)\u7684\u590d\u6742\u5ea6\u4e0a\u5c0f\u4fee\u5c0f\u8865\uff0c\u4f18\u5316\u7a7a\u95f4\u4e0d\u5927\uff0c\u7b49\u849f\u84bb\u6211\u6709\u65f6\u95f4\u4e86\u518d\u6765\u5c1d\u8bd5\u5427\u3002\n\n### \u4ee3\u7801&\u6ce8\u91ca\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define Re register \n#define MN 50005\nint n,m,sum[225][26],T,loc[MN],len,opt,x,y,num[26];\nchar k[2],lazy[225],ch[MN];\n//sum\uff1a\u6bcf\u4e2a\u5757\u5404\u4e2a\u5b57\u6bcd\u7684\u6570\u91cf    loc\uff1a\u8868\u793a\u67d0\u4e2a\u4f4d\u7f6e\u5728\u54ea\u4e2a\u5757\n//num\uff1a\u5404\u4e2a\u5b57\u6bcd\u7684\u6570\u91cf\uff08\u7528\u4e8e\u64cd\u4f5c\u4e09\uff09//lazy\uff1a\u61d2\u6807\u8bb0\ninline int read(){\n    int a=0;\n    char c=getchar();\n    while(c>57||c<48)c=getchar();\n    while(48<=c&&c<=57){\n        a=a*10+c-48;\n        c=getchar();\n    }\n    return a;\n}\ninline void maintain(int x){\n    int pos=loc[x];\n    if(lazy[pos]) {\n        int l=(pos-1)*len+1,r=pos*len;\n        for(int i=l;i<=r;++i) ch[i]=lazy[pos];\n        for(int i=0;i<26;++i) sum[pos][i]=0;\n        sum[pos][lazy[pos]-'A']=len;\n        lazy[pos]=0;\n    }\n}//\u5fc5\u8981\u65f6\u4e0b\u4f20\ninline int ask(int x,int y,char k){\n    if(y<x) return 0;\n    int l=(x-1)/len+1+(x%len!=1),r=y/len,ans=0;\n    if(l>r){\n        maintain(x);maintain(y);//\u67e5\u8be2\u6563\u5757\u65f6\u4e0b\u4f20\n        for(int i=x;i<=y;++i)ans+=(ch[i]==k);\n        return ans;\n    }\n    for(int i=l;i<=r;++i)\n        ans+=lazy[i]?((k==lazy[i])*len):sum[i][k-'A'];\n    int L=(l-1)*len,R=r*len+1;\n    maintain(x);maintain(y);\n    for(int i=x;i<=L;++i){ans+=(ch[i]==k);}\n    for(int i=R;i<=y;++i){ans+=(ch[i]==k);}\n    return ans;\n}\nvoid ASK(int x,int y){//\u67e5\u8be226\u4e2a\u5b57\u6bcd\n    if(y<x) return;\n    int l=(x-1)/len+1+(x%len!=1),r=y/len;\n    if(l>r){\n        maintain(x);maintain(y);\n        for(int i=x;i<=y;++i)++num[ch[i]-'A'];\n        return;\n    }\n    for(int i=l;i<=r;++i){\n        if(lazy[i])num[lazy[i]-'A']+=len;\n        else for(int k=0;k<26;++k)\n            num[k]+=sum[i][k];//\u5c0f\u526a\u679d\n    }\n    int L=(l-1)*len,R=r*len+1;\n    maintain(x);maintain(y);\n    for(int i=x;i<=L;++i){++num[ch[i]-'A'];}\n    for(int i=R;i<=y;++i){++num[ch[i]-'A'];}\n    return;\n}\ninline void change(int x,int y,char k){\n    if(y<x) return;\n    int l=(x-1)/len+1+(x%len!=1),r=y/len;\n    if(l>r){\n        maintain(x);maintain(y);\n        for(int i=x;i<=y;++i){\n            --sum[loc[i]][ch[i]-'A'];\n            ++sum[loc[i]][k-'A'];\n            ch[i]=k;\n        }\n        return;\n    }\n    for(int i=l;i<=r;++i){lazy[i]=k;}//\u4e0d\u9700\u8981maintain\n    int L=(l-1)*len,R=r*len+1;\n    maintain(x);maintain(y);//\u4fee\u6539\u6563\u5757\u65f6maintain\n    for(int i=x;i<=L;++i){\n        --sum[l-1][ch[i]-'A'];\n        ++sum[l-1][k-'A'];\n        ch[i]=k;\n    }\n    for(int i=R;i<=y;++i){\n          --sum[r+1][ch[i]-'A'];\n          ++sum[r+1][k-'A'];\n          ch[i]=k;\n    }\n}\nint main(){\n    scanf(\"%d%d%s\",&n,&m,ch+1);\n    for(int i=0;i<n;++i)if(ch[i]>'Z') ch[i]=(ch[i]-'a'+'A');\n    T=sqrt(n);len=n/T;\n    for(Re int i=1;i<=n;++i)loc[i]=(i-1)/len+1;\n    for(Re int i=1;i<=T;++i){\n        int l=(i-1)*len+1;int r=i*len;\n        for(Re int j=l;j<=r;++j)\n            ++sum[i][ch[j]-'A'];\n    }\n    for(Re int i=1;i<=m;++i){\n        opt=read();x=read();y=read();\n        if(opt==1){\n            scanf(\"%s\",k);\n            if(k[0]>'Z') k[0]=(k[0]-'a'+'A');\n            printf(\"%d\\n\",ask(x,y,k[0]));\n        }\n        else if(opt==2){\n            scanf(\"%s\",k);\n            if(k[0]>'Z') k[0]=(k[0]-'a'+'A');\n            change(x,y,k[0]);\n        }\n        else {\n            ASK(x,y);\n            for(Re int j=0;j<26;++j){\n                change(x,x+num[j]-1,char(j+'A'));\n                x+=num[j];\n                num[j]=0;\n            }\n        }\n    }\n    return 0;\n}\n\n\n\n```\n#### \u603b\u7ed3\n\u8fd9\u9898\u6253\u4e86\u62115h+\uff0c\u4e3b\u8981\u8fd8\u662f\u4e0d\u592a\u719f\u7ec3\u5206\u5757\u7684\u5de6\u53f3\u8fb9\u754c\u6761\u4ef6\u548c\u6ce8\u610f\u4e8b\u9879\u5427\uff0c\u8c03\u5206\u5757\u9898\u6709\u4e2a\u6bd4\u8f83\u597d\u7528\u7684\u5c0f\u6280\u5de7\uff1a\u7528\u540c\u6837\u7684\u6570\u636e\uff0c\u66f4\u6539\u5757\u7684\u5927\u5c0f\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u68c0\u67e5\u8fb9\u754c\u662f\u5426\u6253\u6302\u3002",
        "postTime": 1554127458,
        "uid": 7480,
        "name": "skydogli",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2787 \u3010\u8bed\u65871\uff08chin1\uff09- \u7406\u7406\u601d\u7ef4\u3011\uff08\u5206\u5757\uff09"
    },
    {
        "content": "\u8fd9\u9898\u663e\u7136\u4e5f\u662f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u505a\u7684\n\n\n\u53ef\u4ee5\u5199\u4e2a\u7ed3\u6784\u4f53,\u6bcf\u4e2a\u8282\u70b9\u91cc\u90fd\u653e\u4e00\u4e2a\u6876\u5b50,\u7136\u540e\u5176\u5b9e\u5c31\u662f\u88f8\u7684\n\n\u5f53\u7136\u4e5f\u53ef\u4ee5\u519926\u4e2a\u7ebf\u6bb5\u6811,\u8fd9\u6837\u4f3c\u4e4e\u80fd\u77ed\u4e00\u70b9?\u5e76\u6ca1\u6709\u5199\u8fd9\u79cd\n\n\n\u8fd9\u65f6,\u4e09\u79cd\u64cd\u4f5c\u5c31\u90fd\u6bd4\u8f83\u597d\u5199,\u64cd\u4f5c1\u548c\u64cd\u4f5c2\u4e0d\u8c08\u4e86\n\n\u64cd\u4f5c3\u53ea\u9700\u8981\u591a\u6b21\u8fdb\u884c\u64cd\u4f5c1\u548c2\u5c31OK\u4e86\n\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd9\u6837\u5199\n\n```cpp\nNode tmp=query(1,1,n,b,c);\nfor(int i=0,l,r=b-1;i!=26;++i)\n{\n    if(tmp.cnt[i]==0)    continue;\n    l=r+1,r=l+tmp.cnt[i]-1;\n    update(1,1,n,l,r,i);\n}\n```\n\n\u6ce8\u610f\u5728struct\u91cc\u91cd\u8f7d\u8fd0\u7b97\u7b26\u5bb9\u6613\u51fa\u4e8b\n\n\u8c03\u4e86\u534a\u5929\u540e\u6765dalao\u5e2e\u6211\u653e\u5916\u9762\u5c31A\u6389\u4e86\n\n\n\n\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cctype>\n#include<cstdio>\n#define lson nod<<1\n#define rson nod<<1|1\nusing namespace std;\n\nstruct Node{\n    int cnt[26];\n    Node(){memset(cnt,0,sizeof(cnt));}\n};\nNode operator + (Node a,Node b){\n    Node c;\n    for(int i=0;i!=26;++i)\n        c.cnt[i]=a.cnt[i]+b.cnt[i];\n    return c;\n}\nconst int MAXN=65536,toc='a'-'A';\nchar s[MAXN];\nint n,m,lazy[MAXN<<2];\nNode tree[MAXN<<2],emp;\n\nchar c;\ninline char toupper(char tmp){return ('a'<=tmp && tmp<='z')?(tmp-toc):tmp;}\ninline void read(int &x)\n{\n    x=0,c=getchar();\n    while(c<'0' || c>'9')    c=getchar();\n    while('0'<=c && c<='9')    x=(x<<3)+(x<<1)+c-'0',c=getchar();\n}\n\ninline void pushdown(int nod,int ln,int rn)\n{\n    if(lazy[nod]!=-1)\n    {\n         lazy[lson]=lazy[nod],lazy[rson]=lazy[nod];\n        tree[lson]=Node(),tree[rson]=Node();\n        tree[lson].cnt[lazy[lson]]=ln;\n        tree[rson].cnt[lazy[rson]]=rn;\n        lazy[nod]=-1;\n    }\n}\n\nvoid build(int nod,int lef,int rig)\n{\n    if(lef==rig)    tree[nod].cnt[s[lef]-'A']=1;\n    else\n    {\n        int mid=(lef+rig)>>1;\n        build(lson,lef,mid);\n        build(rson,mid+1,rig);\n        tree[nod]=tree[lson]+tree[rson];\n    }\n}\n\nvoid update(int nod,int lef,int rig,int goal,int goar,int val)\n{\n    if(rig<goal || goar<lef)    return;\n    if(goal<=lef && rig<=goar)\n    {\n        tree[nod]=Node(),lazy[nod]=val;\n        tree[nod].cnt[val]=rig-lef+1;\n    }\n    else\n    {\n        int mid=(lef+rig)>>1;\n        pushdown(nod,mid-lef+1,rig-mid);\n        if(goal<=mid)    update(lson,lef,mid,goal,goar,val);\n        if(goar>mid)    update(rson,mid+1,rig,goal,goar,val);\n        tree[nod]=tree[lson]+tree[rson];\n    }\n}\n\nNode query(int nod,int lef,int rig,int goal,int goar)\n{\n    if(rig<goal || goar<lef)    return emp;\n    if(goal<=lef && rig<=goar)    return tree[nod];\n    \n    Node ret;\n    int mid=(lef+rig)>>1;\n    pushdown(nod,mid-lef+1,rig-mid);\n    if(goal<=mid)    ret=ret+query(lson,lef,mid,goal,goar);\n    if(goar>mid)    ret=ret+query(rson,mid+1,rig,goal,goar);\n    \n    return ret;\n}\n\nint main()\n{\n    read(n),read(m),scanf(\"%s\",s+1);\n    memset(lazy,-1,sizeof(lazy));\n    for(int i=n;i!=0;s[i]=toupper(s[i]),--i);\n    \n    build(1,1,n);\n    int a,b,c; char d;\n    for(int i=0;i!=m;++i)    \n    {\n        read(a),read(b),read(c);\n        if(a!=3)        scanf(\"%c\",&d),d=toupper(d);\n        if(a==1)        printf(\"%d\\n\",query(1,1,n,b,c).cnt[d-'A']);\n        else if(a==2)    update(1,1,n,b,c,d-'A');\n        else\n        {\n            Node tmp=query(1,1,n,b,c);\n            for(int i=0,l,r=b-1;i!=26;++i)\n            {\n                if(tmp.cnt[i]==0)    continue;\n                l=r+1,r=l+tmp.cnt[i]-1;\n                update(1,1,n,l,r,i);\n            }\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1510135587,
        "uid": 49569,
        "name": "jxdlyg",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2787 \u3010\u8bed\u65871\uff08chin1\uff09- \u7406\u7406\u601d\u7ef4\u3011"
    },
    {
        "content": "\u73c2\u6735\u8389\u6811\u597d\u9898\uff01\n\n\u533a\u95f4\u63a8\u5e73\u5f80\u5f80\u662f\u73c2\u6735\u8389\u6811\u7684\u6807\u5fd7\uff0c\u6ca1\u5b66\u8fc7\u53ef\u4ee5\u770b\u4e00\u4e0b[\u8fd9\u4e2a\u5927\u4f6c\u7684\u8bb2\u89e3](https://www.luogu.org/blog/ACdreamer/chtholly-tree)\u3002\n\n\u6ce8\u610f\u672c\u9898\u201c\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u201d\uff0c\u8bfb\u5165\u5b57\u6bcd\u65f6\u5e94\u6ce8\u610f\u5927\u5c0f\u5199\u8f6c\u5316\u3002\n\n### op == 1\n\u53d6\u51fa\u533a\u95f4$[L, R]$\uff0c\u904d\u5386\u67e5\u627e\u662f\u5426\u6709\u7b49\u4e8e$k$\u7684\u5b50\u533a\u95f4\uff0c\u6709\u7684\u8bdd\u5c31\u76f4\u63a5\u52a0\u4e0a\u533a\u95f4\u957f\u5ea6\u3002\n\n### op == 2\n\u8fd9\u5c31\u662f\u73c2\u6735\u8389\u6811\u57fa\u672c\u64cd\u4f5c`assign`\uff0c\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002\n\n### op == 3\n\u73c2\u6735\u8389\u6811\u7684\u50a8\u5b58\u65b9\u5f0f\u5176\u5b9e\u662f\u7c7b\u4f3c\u4e00\u4e2a\u6876\u7684\uff0c\u800c\u672c\u9898\u5143\u7d20\u53ea\u670926\u4e2a\uff0c\u6240\u4ee5\u4f7f\u7528\u6876\u6392\u8981\u7b80\u6d01\u9ad8\u6548\u7684\u591a\u3002\n\n\u53d6\u51fa\u533a\u95f4$[L, R]$\uff0c\u82e5\u6b64\u533a\u95f4\u503c\u4e3a$k$\uff0c\u5219\u5c06$B[k]$\u52a0\u4e0a\u533a\u95f4\u957f\u5ea6\u5e76\u5220\u9664\u8be5\u533a\u95f4\u3002\u7136\u540e\u4ece\u5c0f\u5230\u5927\u904d\u5386\u6876\u5e76\u4ece$L$\u5f00\u59cb\u5f80\u540e\u63d2\u5165\uff0c\u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u5c31\u662f\u6570\u7684\u4e2a\u6570\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define IT set<Node>::iterator\nusing namespace std;\n\nint c(char x)\n{\n\tif ('a'<=x && x<='z') return x - 'a';\n\treturn x - 'A';//\u5927\u5c0f\u5199\u654f\u611f\u7684\u8f6c\u5316 \n}\n\nstruct Node\n{\n\tmutable int L, R, z;\n\tint operator <(const Node &a) const{\n\t\treturn L < a.L;\n\t}\n};\n\nset <Node> a;\n\nIT split(int p)\n{\n\tauto it = a.lower_bound(Node{p, 0, 0});\n\tif (it != a.end() && it->L==p) return it;\n\t--it;\n\tNode x = *it; a.erase(it);\n\ta.insert(Node{x.L, p-1, x.z});\n\treturn a.insert(Node{p, x.R, x.z}).first;\n}\n\nint N, M, op, x, y, z, B[27];\nchar xc;\n\nint main()\n{\n\tcin >> N >> M;\n\tfor (int i = 1; i <= N; i++)\n\t{\n\t\tcin >> xc;\n\t\ta.insert(Node{i, i, c(xc)});\n\t}\n\tfor (int i = 1; i <= M; i++)\n\t{\n\t\tcin >> op >> x >> y;\n\t\tif (op == 3)\n\t\t{\n\t\t\tmemset(B, 0, sizeof B);//\u6e05\u7a7a\u6876 \n\t\t\tauto itr = split(y+1), itl = split(x);\n\t\t\twhile (itl != itr)\n\t\t\t{\n\t\t\t\tB[itl->z] += itl->R - itl->L + 1;\n\t\t\t\titl = a.erase(itl);//C++11\u7684erase\u53ef\u4ee5\u5728\u5220\u9664\u5143\u7d20\u540e\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u7701\u53bbitl++\u3002 \n\t\t\t}\n\t\t\tfor (int i = 0; i < 26; i++)\n\t\t\t\tif (B[i])\n\t\t\t\t{\n\t\t\t\t\ta.insert(Node{x, x + B[i]-1, i});//\u4ece\u5de6\u7aef\u70b9\u5f80\u540e\u63d2\u5165 \n\t\t\t\t\tx += B[i];\n\t\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tcin >> xc, z = c(xc);\n\t\tif (op == 1)\n\t\t{\n\t\t\tint ans = 0;\n\t\t\tauto itr = split(y+1), itl = split(x);\n\t\t\tfor (; itl != itr; itl++)\n\t\t\t\tif (itl->z == z) ans += itl->R - itl->L + 1;//\u66b4\u529b\u904d\u5386\u67e5\u627e \n\t\t\tprintf(\"%d\\n\", ans);\n\t\t}\n\t\tif (op == 2)\n\t\t{//\u73c2\u6735\u8389\u6811\u57fa\u672c\u64cd\u4f5cassign \n\t\t\tauto itr = split(y+1), itl = split(x);\n\t\t\ta.erase(itl, itr);\n\t\t\ta.insert(Node{x, y, z});\n\t\t}\n\t}\n}\n```",
        "postTime": 1570627183,
        "uid": 73489,
        "name": "NyaRu_Official",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2787 \u3010\u8bed\u65871\uff08chin1\uff09- \u7406\u7406\u601d\u7ef4\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u6548\u679c\u66f4\u4f73](https://www.luogu.org/blog/oldherd/solution-p2787)  \n\u6211\u4eec\u8003\u8651\u5efa\u8d7726\u68f5\u7ebf\u6bb5\u6811\uff0c\u6bcf\u68f5\u7ef4\u62a4\u4e00\u79cd\u5b57\u6bcd\uff0c\u8fd9\u6837\u5b50\u5c31\u53ef\u4ee5\u5f88\u7b80\u5355\u5730\u7ef4\u62a4\u6bcf\u79cd\u5b57\u6bcd\u51fa\u73b0\u5730\u4f4d\u7f6e\u4fe1\u606f\u3002\u90a3\u4e48\u64cd\u4f5c\u4e00\u548c\u64cd\u4f5c\u4e8c\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528\u533a\u95f4\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u6765\u5b8c\u6210\u3002  \n\u5bf9\u4e8e\u64cd\u4f5c\u4e09\u7684\u6392\u5e8f\uff0c\u6211\u4eec\u4eceA\u5230Z\u4f9d\u6b21\u67e5\u8be2\u6240\u6709\u7ebf\u6bb5\u6811\u3002\u7edf\u8ba1\u5230\u76ee\u524d\u7ebf\u6bb5\u6811\u4e4b\u524d\u51fa\u73b0\u7684\u5b57\u6bcd\u4e0e\u4e2a\u6570p\uff0c\u67e5\u8be2\u5f53\u524d\u5b57\u6bcd\u4e2a\u6570tt\uff0c\u82e5\u64cd\u4f5c\u7684\u533a\u95f4\u4e3a[t, g]\uff0c\u5219\u5f53\u524d\u5b57\u6bcd\u5728\u6392\u5e8f\u540e\u7684\u533a\u95f4\u5e94\u5f53\u4e3a[t+p, t+p+tt-1]\u3002\u8be6\u60c5\u53c2\u7167\u4ee3\u7801\u3002  \n26\u68f5\u5b8c\u6574\u7684\u7ebf\u6bb5\u6811\uff0c520w\u5927\u5c0f\u7684\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u7a7a\u95f4\u4e0a\u9762\u53ef\u80fd\u6709\u4e9b\u7d27(\u5982\u679c\u4e0d\u4fdd\u5b58l\u548cr\u5e94\u8be5\u4e5f\u80fd\u8fc7\uff0c\u4f46\u6ca1\u6709\u8bd5\u8fc7)\uff0c\u6211\u5728\u8fd9\u91cc\u7528\u4e86\u52a8\u6001\u5f00\u70b9\u7684\u505a\u6cd5\uff0c\u6309mlogn\u7b97\u5927\u6982\u5f00\u5230210w\u3002  \n\u5173\u4e8e\u7384\u5b66\uff1a\u6570\u7ec4\u5f00\u5230300w\u8fc7\u5f00\u5230250wTLE\u662f\u4ec0\u4e48\u9b3c\uff1f\u96be\u9053\u662f\u5f00\u5c0f\u5bfc\u81f4\u6b7b\u5faa\u73af\uff1f\u4f46\u6309mlogn\u8ba1\u7b97\u786e\u5b9e\u5f00\u5230210w\u5c31\u591f\u4e86\uff1f\uff1f\uff1f  \n\u4e0b\u9762\u9644\u4e0aac\u4ee3\u7801\uff1a  \n```cpp\n#include <cstdio>\n#include <queue> \n\nusing namespace std;\n\nconst int sz = 3000000;\n\nstruct node{\n\tint ls, rs, val, laz;\t\n}t[sz];\nint root[30], tot = 1;\n\ninline int newnode() {\n\tt[tot].ls = t[tot].rs = t[tot].val = 0; t[tot].laz = -1;\n\treturn tot++;\t\n}\n\ninline void spread(int p, int ll, int rl) {\n\tif(!t[p].ls) t[p].ls = newnode();\n\tif(!t[p].rs) t[p].rs = newnode();\n\tif(t[p].laz == -1) return;\n\tt[t[p].ls].val = ll * t[p].laz; t[t[p].rs].val = rl * t[p].laz;\n\tt[t[p].ls].laz = t[p].laz; t[t[p].rs].laz = t[p].laz;\n\tt[p].laz = -1;\n}\n\ninline void change(int p, int lp, int rp, int l, int r, int v) {\n\tif(l <= lp && rp <= r) { t[p].val = (rp - lp + 1) * v; t[p].laz = v; return; }\n\tint mid = (lp + rp) >> 1;\n\tspread(p, mid-lp+1, rp-mid);\n\tif(l <= mid) change(t[p].ls, lp, mid, l, r, v);\n\tif(r > mid) change(t[p].rs, mid+1, rp, l, r, v);\n\tt[p].val = t[t[p].ls].val + t[t[p].rs].val;\n}\n\ninline int query(int p, int lp, int rp, int l, int r) {\n\tif(l <= lp && rp <= r) return t[p].val;\n\tint mid = (lp + rp) >> 1;\n\tspread(p, mid-lp+1, rp-mid);\n\tint ans = 0;\n\tif(l <= mid) ans = query(t[p].ls, lp, mid, l, r);\n\tif(r > mid) ans += query(t[p].rs, mid+1, rp, l, r);\n\treturn ans;\n}\n\ninline int getc() {\n\tchar ch;\n\tdo{\n\t\tch = getchar();\n\t}while((ch < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z'));\n\treturn ch > 'Z' ? ch - 'a' : ch - 'A';\n}\n\nint main() {\n\tint n, m, op, t, g, c;\n\tscanf(\"%d %d\", &n, &m);\n\tfor(int i = 0; i < 26; i++) root[i] = newnode();\n\tfor(int i = 1; i <= n; i++) change(root[getc()], 1, n, i, i, 1);\n\twhile(m--) {\n\t\tscanf(\"%d %d %d\", &op, &t, &g);\n\t\tif(op != 3) c = getc();\n\t\tif(op == 1) {\n\t\t\tprintf(\"%d\\n\", query(root[c], 1, n, t, g));\n\t\t} else if(op == 2) {\n\t\t\tfor(int i = 0; i < 26; i++)\n\t\t\t\tif(i == c) change(root[i], 1, n, t, g, 1);\n\t\t\t\telse change(root[i], 1, n, t, g, 0);\n\t\t} else {\n\t\t\tint p = 0, tt;\n\t\t\tfor(int i = 0; i < 26; i++) {\n\t\t\t\ttt = query(root[i], 1, n, t, g);\n\t\t\t\tif(!tt) continue;\n\t\t\t\tchange(root[i], 1, n, t, g, 0);\n\t\t\t\tchange(root[i], 1, n, t+p, t+p+tt-1, 1);\n\t\t\t\tp += tt;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\t\n}\n```\n\u6b22\u8fce\u4e92\u76f8\u5173\u6ce8(\u7136\u800c\u5728oi\u754c\u849f\u84bb\u7684\u5708\u5f88\u5c0f)\u3002  \n\u6700\u540e\u518d\u6b21\u5b89\u5229\u4e00\u4e0b[\u849f\u84bb\u7684\u6d1b\u8c37\u535a\u5ba2](https://www.luogu.org/blog/oldherd/)  ",
        "postTime": 1562721779,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2787 \u3010\u8bed\u65871\uff08chin1\uff09- \u7406\u7406\u601d\u7ef4\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/P2787)\n\n\u8fd9\u9053\u9898\u6211\u7684\u505a\u6cd5\u662f\u7ebf\u6bb5\u6811\uff0c\u7531\u4e8e\u53ea\u670926\u4e2a\u5b57\u6bcd\uff0c\u6240\u6709\u6211\u4eec\u53ef\u4ee5\u5efa $26$ \u4e2a\u7ebf\u6bb5\u6811\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c `1`\n\n> \u6211\u4eec\u7ef4\u62a4\u4e00\u4e0b\u533a\u95f4\u548c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c `2`\n\n> \u6211\u4eec\u7528 $lazy\\_tag$ \u5c31\u53ef\u4ee5\u4e86\n\n\u5bf9\u4e8e\u64cd\u4f5c `3`\n\n> \u6211\u4eec\u53d1\u73b0\u5c31\u662f\u64cd\u4f5c `1` \u548c\u64cd\u4f5c `2` \u7684\u7ed3\u5408\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u526a\u679d\u4f18\u5316\u80fd\u662f\u7a0b\u5e8f\u5feb\u5f88\u591a\n\n```cpp\nint query(int num,int l,int r){\n\tif(t[num].sum==0)return 0;//\u526a\u679d\n\tif(t[num].l>=l&&t[num].r<=r)return t[num].sum;\n\tpushdown(num);\n\tif(t[ls].r<l)return query(rs,l,r);\n\tif(t[rs].l>r)return query(ls,l,r);\n\treturn query(ls,l,r)+query(rs,l,r);\n}\nvoid change(int num,int l,int r,int f){\n\tif(t[num].tag==f)return;//\u526a\u679d\n\tif(t[num].l>=l&&t[num].r<=r){\n\t\tdwn(num,f);\n\t\treturn;\n\t}pushdown(num);\n\tif(t[ls].r>=l)change(ls,l,r,f);\n\tif(t[rs].l<=r)change(rs,l,r,f);\n\tpushup(num);\n}\n```\n\u8fd9 $2$ \u4e2a\u526a\u679d\u867d\u7136\u975e\u5e38\u663e\u7136\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7a0b\u5e8f\u5feb\u5f88\u591a\n\n\u4ee3\u7801:\n\n```cpp\n#include <bits/stdc++.h>\n#define ls num<<1\n#define rs num<<1|1\nusing namespace std;\ntypedef long long ll;\nnamespace io {//CYjian\u7684\u5feb\u8bfb\u6a21\u677f\n\tconst int __SIZE = (1 << 21) + 1;\n\tchar ibuf[__SIZE], *iS, *iT, obuf[__SIZE], *oS = obuf, *oT = oS + __SIZE - 1, __c, qu[55]; int __f, qr, _eof;\n\t#define Gc() (iS == iT ? (iT = (iS = ibuf) + fread (ibuf, 1, __SIZE, stdin), (iS == iT ? EOF : *iS ++)) : *iS ++)\n\tinline void flush () { fwrite (obuf, 1, oS - obuf, stdout), oS = obuf; }\n\tinline void gc (char &x) { x = Gc(); }\n\tinline void pc (char x) { *oS ++ = x; if (oS == oT) flush (); }\n\tinline void pstr (const char *s) { int __len = strlen(s); for (__f = 0; __f < __len; ++__f) pc (s[__f]); }\n\tinline void gstr (char *s) { for(__c = Gc(); __c < 32 || __c > 126 || __c == ' ';)  __c = Gc();\n\t\tfor(; __c > 31 && __c < 127 && __c != ' '; ++s, __c = Gc()) *s = __c; *s = 0; }\n\ttemplate <class I> inline bool gi (I &x) { _eof = 0;\n\t\tfor (__f = 1, __c = Gc(); (__c < '0' || __c > '9') && !_eof; __c = Gc()) { if (__c == '-') __f = -1; _eof |= __c == EOF; }\n\t\tfor (x = 0; __c <= '9' && __c >= '0' && !_eof; __c = Gc()) x = x * 10 + (__c & 15), _eof |= __c == EOF; x *= __f; return !_eof; }\n\ttemplate <class I> inline void print (I x) { if (!x) pc ('0'); if (x < 0) pc ('-'), x = -x;\n\t\twhile (x) qu[++ qr] = x % 10 + '0',  x /= 10; while (qr) pc (qu[qr --]); }\n\tstruct Flusher_ {~Flusher_(){flush();}}io_flusher_;\n} using io::pc; using io::gc; using io::pstr; using io::gstr; using io::gi; using io::print;\ninline void rech(char &ch){\n\tgc(ch);\n\tfor(;!isupper(ch)&&!islower(ch);gc(ch));\n}\nconst int N=1e5+10;\nint n,m,F[305];\nchar a[N];\nstruct node{\n\tstruct Tree{\n\t\tint l,r,sum,tag,len;\n\t}t[N<<2];\n\tvoid pushup(int num){\n\t\tt[num].sum=t[ls].sum+t[rs].sum;\n\t}\n\tvoid dwn(int num,int f){\n\t\tt[num].tag=f;\n\t\tif(t[num].tag==1)t[num].sum=t[num].len;\n\t\tif(t[num].tag==2)t[num].sum=0;\n\t}\n\tvoid pushdown(int num){\n\t\tif(t[num].tag==0)return;\n\t\tdwn(ls,t[num].tag);\n\t\tdwn(rs,t[num].tag);\n\t\tt[num].tag=0;\n\t}\n\tvoid build(int l,int r,int num,char ch){\n\t\tt[num].tag=0;\n\t\tt[num].l=l;t[num].r=r;\n\t\tt[num].len=r-l+1;\n\t\tif(l==r){\n\t\t\tt[num].sum=a[l]==ch;\n\t\t\treturn;\n\t\t}int mid=(l+r)>>1;\n\t\tbuild(l,mid,ls,ch);\n\t\tbuild(mid+1,r,rs,ch);\n\t\tpushup(num);\n\t}\n\tint query(int num,int l,int r){\n\t\tif(t[num].sum==0)return 0;//\u526a\u679d\n\t\tif(t[num].l>=l&&t[num].r<=r)return t[num].sum;\n\t\tpushdown(num);\n\t\tif(t[ls].r<l)return query(rs,l,r);\n\t\tif(t[rs].l>r)return query(ls,l,r);\n\t\treturn query(ls,l,r)+query(rs,l,r);\n\t}\n\tvoid change(int num,int l,int r,int f){\n\t\tif(t[num].tag==f)return;//\u526a\u679d\n\t\tif(t[num].l>=l&&t[num].r<=r){\n\t\t\tdwn(num,f);\n\t\t\treturn;\n\t\t}pushdown(num);\n\t\tif(t[ls].r>=l)change(ls,l,r,f);\n\t\tif(t[rs].l<=r)change(rs,l,r,f);\n\t\tpushup(num);\n\t}\n}T[110];\nint main(){\n\tgi(n);gi(m);\n\tfor(int i=1;i<=n;i++)rech(a[i]),a[i]=toupper(a[i]);\n\tfor(char i='A';i<='Z';i++)T[i].build(1,n,1,i);\n\twhile(m--){\n\t\tint f,x,y;char k;\n\t\tgi(f);gi(x);gi(y);\n\t\tif(f==1){\n\t\t\trech(k);\n\t\t\tk=toupper(k);\n\t\t\tprint(T[k].query(1,x,y));\n\t\t\tpstr(\"\\n\");\n\t\t}\n\t\tif(f==2){\n\t\t\trech(k);\n\t\t\tk=toupper(k);\n\t\t\tfor(char i='A';i<='Z';i++)\n\t\t\t\tif(i==k)T[i].change(1,x,y,1);\n\t\t\t\telse T[i].change(1,x,y,2);\n\t\t}\n\t\tif(f==3){\n\t\t\tfor(char i='A';i<='Z';i++){\n\t\t\t\tF[i]=T[i].query(1,x,y);\n\t\t\t\tT[i].change(1,x,y,2);\n\t\t\t}\n\t\t\tfor(char i='A';i<='Z';i++)\n\t\t\t\tif(F[i])T[i].change(1,x,x+F[i]-1,1),x+=F[i];\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1586090440,
        "uid": 180242,
        "name": "orzdevinwang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2787 \u3010\u8bed\u65871\uff08chin1\uff09- \u7406\u7406\u601d\u7ef4\u3011"
    },
    {
        "content": "\u73c2\u6735\u8389\u6811\u5927\u6cd5\u597d\n\n\u73c2\u6735\u8389\u6811\u662f\u4e00\u79cd\u57fa\u4e8e `set` \u7684\u66b4\u529b\u6570\u636e\u7ed3\u6784\u3002\n\n\u5176\u6838\u5fc3\u601d\u60f3\u662f\u4e0d\u7528\u7684\u533a\u95f4\u5c31\u5b58\u5728 `set` \u91cc\uff0c\u5230\u7528\u7684\u65f6\u5019\u518d\u628a\u5b83\u62c6\u5f00\u6765\u7528\u3002\n\n\u63a8\u8350\u4e00\u4e2a\u975e\u5e38\u68d2\u7684\u8bb2\u89e3\u73c2\u6735\u8389\u6811\u7684\u535a\u5ba2\uff1ahttps://www.cnblogs.com/yzhang-rp-inf/p/9443659.html\n\n---\n\n\u5c31\u672c\u9898\u6765\u8bf4\n\n - \u64cd\u4f5c1\uff1a\u73c2\u6735\u8389\u6811\u66b4\u529b\u62c6\u5f00\u533a\u95f4 $[l,r]$ \uff0c\u904d\u5386\u7edf\u8ba1\n \n - \u64cd\u4f5c2\uff1a\u73c2\u6735\u8389\u6811 `assign` \u64cd\u4f5c\n \n - \u64cd\u4f5c3\uff1a\u62c6\u5f00\u533a\u95f4 $[l,r]$ \uff0c\u6876\u6392\u540e\u518d `assign` \u56de\u53bb\n \n---\n \n$\\mathrm{Code}$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntemplate <typename Tp>\nvoid read(Tp &x){\n\tx=0;char ch=1;int fh;\n\twhile(ch!='-'&&(ch>'9'||ch<'0')) ch=getchar();\n\tif(ch=='-') ch=getchar(),fh=-1;\n\telse fh=1;\n\twhile(ch>='0'&&ch<='9') x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n\tx*=fh;\n}\n\nstruct node{\n\tint l,r;\n\tmutable char v;\n\tnode(int L,int R=-1,char V=0) : l(L),r(R),v(V) {}\n\tbool operator < (node a) const {\n\t\treturn l<a.l;\n\t}\n};\n\nset<node>s;\n#define IT set<node>::iterator\n\nIT split(int pos){\n\tIT it=s.lower_bound(node(pos));\n\tif(it!=s.end()&&it->l==pos) return it;\n\t--it;\n\tint L=it->l,R=it->r;char V=it->v;\n\ts.erase(it);s.insert(node(L,pos-1,V));\n\treturn s.insert(node(pos,R,V)).first;\n}\n\nvoid assign(int l,int r,char val){\n\tIT rr=split(r+1),ll=split(l);\n\ts.erase(ll,rr);s.insert(node(l,r,val));\n}\n\nvoid sort(int l,int r){\n\tIT rr=split(r+1),ll=split(l);IT it=ll;\n\tint cnt[27];memset(cnt,0,sizeof(cnt));\n\tfor(;ll!=rr;++ll){\n\t\tcnt[ll->v-'A']+=ll->r-ll->l+1;\n\t}\n\ts.erase(it,rr);\n\tint L=l;\n\tfor(int i=0;i<26;i++){\n\t\tif(!cnt[i]) continue;\n//\t\tassign(L,L+cnt[i]-1,(char)(i+'A'-1));\n\t\ts.insert(node(L,L+cnt[i]-1,(char)(i+'A')));\n\t\tL=L+cnt[i];\n\t}\n}\n\nint sum(int l,int r,char val){\n\tint res=0;\n\tIT rr=split(r+1),ll=split(l);\n\tfor(;ll!=rr;++ll){\n\t\tif(ll->v==val) res+=ll->r-ll->l+1;\n\t}\n\treturn res;\n}\n\nint n,m;\nchar ss[50007],c;\nint op,l,r;\nint main(){\n\tscanf(\"%d%d%s\",&n,&m,ss+1);\n\tfor(int i=1;i<=n;i++){\n\t\tss[i]=toupper(ss[i]);\n\t\ts.insert(node(i,i,ss[i]));\n\t}\n\twhile(m--){\n\t\tread(op);read(l);read(r);\n\t\tif(op==1){\n\t\t\tcin>>c;\n\t\t\tprintf(\"%d\\n\",sum(l,r,toupper(c)));\n\t\t}\n\t\telse if(op==2){\n\t\t\tcin>>c;\n\t\t\tassign(l,r,toupper(c));\n\t\t}\n\t\telse sort(l,r);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1572993992,
        "uid": 28910,
        "name": "\u89c8\u904d\u5343\u79cb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2787 \u3010\u8bed\u65871\uff08chin1\uff09- \u7406\u7406\u601d\u7ef4\u3011"
    },
    {
        "content": "## [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/9780672.html )\n \n#### \u539f\u9898\u4f20\u9001\u95e8\uff1a[P2787 \u8bed\u65871\uff08chin1\uff09- \u7406\u7406\u601d\u7ef4](https://www.luogu.org/problemnew/show/2787)\n\n## \u524d\u7f6e\u829d\u58eb\uff1a\u73c2\u6735\u8389\u6811\n\n### [\u7a9d\u535a\u5ba2\u91cc\u5bf9\u73c2\u6735\u8389\u6811\u7684\u4ecb\u7ecd](https://www.cnblogs.com/yzhang-rp-inf/p/9443659.html )\n\n### \u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u81ea\u5df1\u770b\u770b\u5427\n\n#### \u73c2\u6735\u8389\u6811\u8dd1\u7684\u98de\u5feb\n\n#### \u64cd\u4f5c1\uff1a\u66b4\u529b\u7edf\u8ba1\u51fa\u5947\u8ff9\n\n#### \u64cd\u4f5c2\uff1a\u63a8\u5e73\u533a\u95f4\uff0c\u73c2\u6735\u8389\u6811\u57fa\u672c\u64cd\u4f5c\n\n#### \u64cd\u4f5c3\uff1a\u6392\u5e8f\u533a\u95f4\uff0c\u6211\u5c31\u5199\u4e86\u4e00\u4e2a\u6876\u6392\n\n#### ~~\u7a9d\u4e00\u5f00\u59cb\u5934\u6587\u4ef6\u76f4\u63a5\u7528bits\u51fa\u7384\u5b66ce~~\n\n#### toupper\u662f\u628a\u5c0f\u5199\u8f6c\u5927\u5199\uff0c\u4ee5\u9632\u6570\u636e\u51fa\u9505\n\n```cpp\n#pragma GCC optimize(\"O3\")\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<set>\n#define IT set<node>::iterator\nusing namespace std;\ninline int read()\n{\n    register int x=0,f=1;register char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nstruct node\n{\n    int l,r;\n    mutable char v;\n    node(int L, int R=-1, char V=0):l(L), r(R), v(V) {}\n    bool operator<(const node& o) const\n    {\n        return l < o.l;\n    }\n};\nset<node> s;\nIT split(int pos)\n{\n    IT it = s.lower_bound(node(pos));\n    if (it != s.end() && it->l == pos) \n        return it;\n    --it;\n    int L = it->l, R = it->r;\n\tchar V = it->v;\n    s.erase(it);\n    s.insert(node(L, pos-1, V));\n    return s.insert(node(pos, R, V)).first;\n}\nint count(int l,int r,char v)\n{\n\tIT itr = split(r+1) ,itl = split(l);\n\tint ans=0;\n\tfor( ; itl != itr ; ++itl)\n\t\tif(itl->v == v)\n\t\t\tans+=itl->r-itl->l+1;\n\treturn ans;\n}\nvoid assign_val(int l,int r,char v)\n{\n    IT itr = split(r+1),itl = split(l);\n    s.erase(itl, itr);\n    s.insert(node(l, r, v));\n}\nvoid sort_val(int l,int r)\n{\n\tint cnt[27];\n    memset(cnt,0,sizeof(cnt));\n\tIT itr = split(r+1), itl = split(l), it = itl;\n\tfor( ; itl != itr ; ++itl)\n\t\tcnt[itl->v-'A']+=itl->r-itl->l+1;\n\ts.erase(it,itr);\n\tfor(register int i=0;i<26;++i)\n\t\tif(cnt[i])\n\t\t{\n\t\t\ts.insert(node(l,l+cnt[i]-1,i+'A'));\n\t\t\tl+=cnt[i];\n\t\t}\n}\nchar str[50005];\nint main()\n{\n\tint n=read(),m=read();\n\tscanf(\"%s\",str+1);\n\tint cnt=1;\n\tchar last=toupper(str[1]);\n\tfor(register int i=2;i<=n;++i)\n\t{\n\t\tstr[i]=toupper(str[i]);\n\t\tif(str[i]==last)\n\t\t\t++cnt;\n\t\telse\n\t\t{\n\t\t\ts.insert(node(i-cnt,i-1,last));\n\t\t\tlast=str[i];\n\t\t\tcnt=1;\n\t\t}\n\t}\n\ts.insert(node(n+1-cnt,n,last));\n\twhile(m--)\n\t{\n\t\tint opt=read(),l=read(),r=read();\n\t\tchar dic[5];\n\t\tif(opt==1)\n\t\t{\n\t\t\tscanf(\"%s\",dic);\n\t\t\tprintf(\"%d\\n\",count(l,r,toupper(dic[0])));\n\t\t}\n\t\telse if(opt==2)\n\t\t{\n\t\t\tscanf(\"%s\",dic);\n\t\t\tassign_val(l,r,toupper(dic[0]));\n\t\t}\n\t\telse\n\t\t\tsort_val(l,r);\n\t}\n\treturn 0;\n } \n```",
        "postTime": 1539348975,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2787 \u3010\u8bed\u65871\uff08chin1\uff09- \u7406\u7406\u601d\u7ef4\u3011"
    },
    {
        "content": "\u7528```std::set```\u5b9e\u73b0\u7684[\u73c2\u6735\u8389\u6811](https://www.luogu.org/blog/ACdreamer/chtholly-tree)\u624d\u662f\u6b63\u7edf\uff0c\u94fe\u8868\u4ec0\u4e48\u7684\u90fd\u662f\u5f02\u7aef\u3002\u4e0d\u4f1a\u73c2\u6735\u8389\u6811\u7684\u53ef\u4ee5\u70b9\u524d\u9762\u7684\u94fe\u63a5\u6216\u8005\u770b\u672c\u4eba\u5728CF896C\u7684\u9898\u89e3\u3002\n\n```\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<set>\n\nint Read()\n{\n    int x=0;char c=getchar();\n    while(!isdigit(c))\n    {\n        c=getchar();\n    }\n    while(isdigit(c))\n    {\n        x=x*10+(c^48);\n        c=getchar();\n    }\n    return x;\n}\n\nstruct node\n{\n    int l,r;\n    mutable char v;\n    node(int L, int R=-1, char V=0):l(L), r(R), v(V) {}\n    bool operator<(const node& o) const\n    {\n        return l < o.l;\n    }\n};\n\nusing std::set;\n\nset<node> s;\n\n#define IT set<node>::iterator\n//split(pos)\u64cd\u4f5c\u662f\u6307\u5c06\u539f\u6765\u542b\u6709pos\u4f4d\u7f6e\u7684\u8282\u70b9\u5206\u6210\u4e24\u90e8\u5206\uff1a[l,pos\u22121][pos,r]\nIT split(int pos)\n{\n    IT it = s.lower_bound(node(pos));\n    if (it != s.end() && it->l == pos) return it;\n    --it;\n    int L = it->l, R = it->r, V = it->v;\n    s.erase(it);\n    s.insert(node(L, pos-1, V));\n    return s.insert(node(pos, R, V)).first;\n}\n\n//\u66b4\u529b\u904d\u5386\u533a\u95f4\u67e5\u8be2\nint count(int l,int r,char key)\n{\n    IT itr=split(r+1),itl=split(l);\n    int res=0;\n    for(;itl!=itr;++itl)\n    {\n        if(itl->v==key)\n        {\n            res+=itl->r-itl->l+1;\n        }\n    }\n    return res;\n}\n\n//\u73c2\u6735\u8389\u6811\u7ecf\u5178\u7684\u533a\u95f4\u8d4b\u503c\nvoid replace(int l,int r,char key)\n{\n    IT itr=split(r+1),itl=split(l);\n    s.erase(itl,itr);\n    s.insert(node(l,r,key));\n}\n\n//\u5f00\u4e2a\u6876\uff0c\u904d\u5386\u4e00\u904d\u7136\u540einsert\u8fdb\u53bb\nvoid sort_range(int l,int r)\n{\n    int cnt[27];\n    memset(cnt,0,sizeof(cnt));\n    IT itr=split(r+1),itl=split(l);\n    for(IT itl2=itl;itl2!=itr;++itl2)\n    {\n        cnt[itl2->v-'A']+=itl2->r-itl2->l+1;\n    }\n    s.erase(itl,itr);\n    int pos=l;\n    for(int i=0;i<26;++i)\n    {\n        if(cnt[i])\n        {\n            s.insert(node(pos,pos+cnt[i]-1,i+'A'));\n            pos+=cnt[i];\n        }\n    }\n}\n\nchar str[50005];\nint main()\n{\n    int n=Read(),m=Read();\n    scanf(\"%s\",str+1);\n    int cnt=1;\n    char last=toupper(str[1]);\n    for(int i=2;i<=n;++i)\n    {\n        str[i]=toupper(str[i]);\n        if(str[i]==last)\n        {\n            ++cnt;\n        }\n        else\n        {\n            s.insert(node(i-cnt,i-1,last));\n            last=str[i];\n            cnt=1;\n        }\n    }\n    s.insert(node(n+1-cnt,n,last));\n    s.insert(node(n+1,n+100,0));\n    int opt,x,y;\n    char letter[5];\n    while(m--)\n    {\n        opt=Read();\n        if(opt==1)\n        {\n            x=Read(),y=Read();\n            scanf(\"%s\",letter);\n            printf(\"%d\\n\",count(x,y,toupper(letter[0])));\n        }\n        else if(opt==2)\n        {\n            x=Read(),y=Read();\n            scanf(\"%s\",letter);\n            replace(x,y,toupper(letter[0]));\n        }\n        else\n        {\n            x=Read(),y=Read();\n            sort_range(x,y);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1538722365,
        "uid": 53374,
        "name": "SuperJvRuo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2787 \u3010\u8bed\u65871\uff08chin1\uff09- \u7406\u7406\u601d\u7ef4\u3011"
    },
    {
        "content": "\u505a\u6cd5\uff1a\u5206\u5757\n\n\u5bf9\u4e8e\u67e5\u8be2\u548c\u4fee\u65391\u90fd\u662f\u5206\u5757\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u5173\u952e\u662f\u4fee\u65392\u4ee4\u4eba\u5f88\u5934\u75bc\uff0c\u770b\u8d77\u6765\u597d\u50cf\u53ea\u80fd\u66b4\u529b\u6392\u5e8f\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u662fO(mnlogn)\uff0c\u94c1\u5b9a\u70b8\u3002\n\n\u63a5\u7740\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4fee\u65392\u7684\u64cd\u4f5c\u53ef\u4ee5\u62c6\u6210\u67e5\u8be2\u548c\u4fee\u65391\u6765\u5b8c\u6210\uff1a\n\n\u628a\u6392\u5e8f\u62c6\u6210\u7edf\u8ba1\u533a\u95f4\u5185\u6bcf\u4e2a\u5b57\u6bcd\u7684\u4e2a\u6570\uff0c\u7136\u540e\u518d\u5728\u533a\u95f4\u5185\u4eceA\u5230Z\u4f9d\u6b21\u586b\u5165\u76f8\u5e94\u6570\u91cf\u7684\u5b57\u6bcd\u5373\u53ef\u3002\n\n\u6bcf\u6b21\u4fee\u65392\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(\u221an)\n\n\u5176\u4f59\u548c\u666e\u901a\u7684\u5206\u5757\u4e00\u6837\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6O(n\u221an)\u3002\n\n(\u53e6:\u6ce8\u610f\u5c06\u5b57\u6bcd\u5168\u8f6c\u4e3a\u5927\u5199\u6216\u5168\u8f6c\u4e3a\u5c0f\u5199\uff09\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\n#include<cstdlib>\n#include<cctype>\n#include<cmath>\n#include<stack>\n#define mem(a) memset(a, 0, sizeof(a))\nusing namespace std;\ntypedef long long LL;\ntypedef int T;\nconst int M = 1000000009;\nconst int N = 100009;\nint n, m, num;\nint head[409], tail[409], pos[N];\nint ct[309][30];\nchar s1[N], lazy[409];\nT _read();\nvoid init();\nvoid solve();\nint idx(char);\nint query(int, int, char);\nvoid maintain(int);\nvoid change_1(int, int, char);\nvoid change_2(int, int);\nint main() {\n    init();\n    solve();\n    return 0;\n}\nvoid init() {\n    n = _read();\n    m = _read();\n    int szq = (int) sqrt(n);\n    scanf(\"%s\", s1 + 1);\n    int cnt = 0;\n    for(int i = 1; i <= n; i++) {\n        s1[i] = toupper(s1[i]); //\u8fd9\u91cc\u4e00\u5b9a\u8981\u6ce8\u610f! \u5b57\u6bcd\u5168\u8f6c\u5316\u4e3a\u5927\u5199!\n        cnt++;\n        if(cnt == 1) {\n            head[++num] = i;\n        }\n        pos[i] = num;\n        if(cnt == szq || i == n) {\n            tail[num] = i;\n            lazy[num] = '#';\n            cnt = 0;\n        }\n    }\n    for(int i = 1; i <= n; i++) {\n        int c = idx(s1[i]);\n        ct[pos[i]][c]++;\n    }\n}\nvoid solve() {\n    for(int i = 1; i <= m; i++) {\n        int q = _read();\n        if(q == 1) {\n            int a = _read(), b = _read();\n            if(a > b) swap(a, b);\n            char c[10];\n            scanf(\"%s\", c);\n            c[0] = toupper(c[0]);\n            printf(\"%d\\n\", query(a, b, c[0]));\n        }\n        else if(q == 2) {\n            int a = _read(), b = _read();\n            if(a > b) swap(a, b);\n            char c[10];\n            scanf(\"%s\", c);\n            c[0] = toupper(c[0]);\n            change_1(a, b, c[0]);\n        }\n        else {\n            int a = _read(), b = _read();\n            if(a > b) swap(a, b);\n            change_2(a, b);\n        }\n    }\n}\nint idx(char c) {\n    return c - 'A';\n}\nint query(int l, int r, char s) { //\u8be2\u95ee\n    int posl = pos[l], posr = pos[r];\n    int c = idx(s);\n    int ans = 0;\n    if(posl == posr) {\n        maintain(posl);\n        for(int i = l; i <= r; i++)\n            if(s1[i] == s) ans++;\n        return ans;\n    }\n    maintain(posl);\n    for(int i = l; i <= tail[posl]; i++)\n        if(s1[i] == s) ans++;\n    for(int i = posl + 1; i <= posr - 1; i++)\n        ans += ct[i][c];\n    maintain(posr);\n    for(int i = head[posr]; i <= r; i++)\n        if(s1[i] == s) ans++;\n    return ans;\n}\nvoid change_1(int l, int r, char s) { //\u4fee\u65391\n    if(l > r) return;\n    int posl = pos[l], posr = pos[r];\n    int c = idx(s);\n    if(posl == posr) {\n        maintain(posl);\n        for(int i = l; i <= r; i++) {\n            int c1 = idx(s1[i]);\n            ct[posl][c1]--;\n            ct[posl][c]++;\n            s1[i] = s;\n        }\n        return;\n    }\n    maintain(posl);\n    for(int i = l; i <= tail[posl]; i++) {\n        int c1 = idx(s1[i]);\n        ct[posl][c1]--;\n        ct[posl][c]++;\n        s1[i] = s;\n    }\n    for(int i = posl + 1; i <= posr - 1; i++) {\n        lazy[i] = s;\n        for(int j = 0; j <= 26; j++)\n            ct[i][j] = 0;\n        ct[i][c] = tail[i] - head[i] + 1;\n    }\n    maintain(posr);\n    for(int i = head[posr]; i <= r; i++) {\n        int c1 = idx(s1[i]);\n        ct[posr][c1]--;\n        ct[posr][c]++;\n        s1[i] = s;\n    }\n}\nvoid change_2(int l, int r) { //\u4fee\u65392\n    int zct[26];\n    for(int i = 0; i <= 26; i++) {  //\u67e5\u8be2\u5404\u79cd\u5b57\u6bcd\u6570\u91cf\n        zct[i] = query(l, r, (char) ('A' + i));\n    }\n    int now = l;\n    for(int i = 0; i <= 26; i++) { //\u6839\u636e\u5b57\u6bcd\u6570\u91cf\u4f9d\u6b21\u586b\u5145\n        change_1(now, now + zct[i] - 1, (char) ('A' + i));\n        now += zct[i];\n    }\n}\nvoid maintain(int posx) {\n    if(lazy[posx] == '#') return;\n    int l = head[posx], r = tail[posx];\n    for(int i = l; i <= r; i++)\n        s1[i] = lazy[posx];\n    lazy[posx] = '#';\n}\nT _read() {\n    T a = 0, f = 1;\n    char c = getchar();\n    while(c < '0' || c > '9') {\n        if(c == '-')\n            f *= -1;\n        c = getchar();\n    }\n    while(c <= '9' && c >= '0') {\n        a *= 10;\n        a += c - '0';\n        c = getchar();\n    }\n    return a * f;\n}\n```",
        "postTime": 1508772834,
        "uid": 19427,
        "name": "zby2001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2787 \u3010\u8bed\u65871\uff08chin1\uff09- \u7406\u7406\u601d\u7ef4\u3011"
    },
    {
        "content": "\u672c\u6587\u4e3a [$\\color{black}{\\text{P2787-\u8bed\u65871\uff08chin1\uff09-\u7406\u7406\u601d\u7ef4}}$](https://www.luogu.com.cn/problem/P2787) \u7684\u9898\u89e3\u3002\n\n---\n\n\u524d\u7f6e\u829d\u58eb\uff1a\n\n- \u5206\u5757\uff08\u5757\u72b6\u6570\u7ec4\uff09\n- \u5757\u5185\u6392\u5e8f\u7b97\u6cd5\n- \u4e8c\u5206\u67e5\u627e\n- \u6876\u6392\u5e8f\n\n---\n\n\u672c\u7bc7\u9898\u89e3\u601d\u8def\uff1a\n\n\u62ff\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u9996\u5148\u6211\u4eec\u770b\u95ee\u9898\u7684\u7c7b\u578b\u3002\n\n\u663e\u7136\uff0c\u8fd9\u9053\u9898\u662f\u4e00\u9053\u6570\u5217\u64cd\u4f5c\u9898\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u770b\u6570\u636e\u8303\u56f4\uff0c\u5e76\u4f9d\u6b64\u5206\u6790\u6700\u52a3\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n$N\\le5\\times10^4,M\\le5\\times10^4$\uff0c__\u6570\u636e\u53ea\u6709\u5b57\u6bcd\u3002__\n\n\u9996\u5148\uff0c\u590d\u6742\u5ea6\u7684 $\\mathcal O(m)$ \u662f\u5c11\u4e0d\u4e86\u7684\uff0c\u7136\u540e\u6211\u4eec\u6839\u636e\u6570\u636e\u8303\u56f4\uff0c\u63a8\u51fa\u5355\u6b21\u64cd\u4f5c\u7684\u6781\u9650\u590d\u6742\u5ea6\u7ea6\u4e3a $\\mathcal O(\\sqrt n \\log n)$\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u6700\u7ec8\u7684\u590d\u6742\u5ea6\u8981\u505a\u5230 $\\mathcal O(m\\sqrt n\\log n)$ \u4ee5\u5185\uff08\u4e8b\u5b9e\u4e0a\uff0c\u672c\u7bc7\u9898\u89e3\u5c31\u662f\u8fd9\u4e2a\u590d\u6742\u5ea6\uff0c\u7a0d\u540e\u8bc1\u660e\uff09\u3002\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5148\u8003\u8651\u6734\u7d20\u7684\uff0c\u4e0d\u592a\u53ef\u80fd\u8fc7\u7684\u66b4\u529b\uff1a\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e00\uff0c\u76f4\u63a5\u904d\u5386\u4e00\u904d\u5373\u53ef\uff0c\u5c06\u6b21\u6570\u7d2f\u52a0\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e8c\uff0c\u76f4\u63a5\u904d\u5386\uff0c\u66b4\u529b\u62cd\u5e73\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e09\uff0c\u76f4\u63a5\u66b4\u529b `sort`\u3002\n\n\u5206\u6790\u5b8c\u4e86\uff0c\u4ee3\u7801\u54b1\u4e5f\u522b\u6253\u4e86\uff0c\u6ca1\u610f\u4e49\uff0c\u80af\u5b9a\u8fc7\u4e0d\u4e86\u3002\n\n\u90a3\u4e48\u4e0b\u9762\u5c31\u6765\u8bb2\u4e00\u4e2a\u4e0d\u662f\u6b63\u89e3\u7684\u505a\u6cd5\uff0c\u4e8b\u5148\u63d0\u9192\u4e00\u4e0b\uff0c\u6211\u7684\u505a\u6cd5\u9700\u8981\u5438\u6c27\u3002\n\n---\n\n\u76f8\u4fe1\u540a\u6253\u6211\u7684\u5927\u4f6c\u4eec\u770b\u5230\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u65f6\u5019\uff0c\u5c31\u5df2\u7ecf\u77e5\u9053\u6211\u7684\u65b9\u6cd5\u662f\u5565\u4e86\uff0c\u4f46\u662f\u8fd9\u91cc\uff0c\u6211\u8fd8\u662f\u8981\u8d58\u8ff0\u4e00\u4e0b\u3002\uff08\u8f7b\u70b9\uff0c\u522b\u6253\u8138\n\n\u5bf9\u4e8e\u6574\u4e2a\u6570\u5217\uff0c\u6211\u4eec\u5efa\u7acb\u5757\u72b6\u6570\u7ec4\u7ef4\u62a4\uff0c\u5e76\u989d\u5916\u7ef4\u62a4\u4e00\u4e2a\u5c40\u90e8\u6709\u5e8f\u7684\u6570\u7ec4\u3002\n\n\u8fd9\u91cc\u7684\u4ee3\u7801\uff1a\n\n```cpp\nunsigned char ori[MAXN];\nunsigned char sot[MAXN];\n```\n\n`ori` \u6570\u7ec4\u5b57\u9762\u610f\u601d\u4e3a\uff1a`origin`\uff0c\u4e5f\u5c31\u662f\u539f\u6570\u5217\uff08\u4e0d\u662f `orz`\uff09\u3002\n\n`sot` \u6570\u7ec4\u5b57\u9762\u610f\u601d\u4e3a\uff1a`sorted`\uff0c\u4e5f\u5c31\u662f\u5c40\u90e8\u6709\u5e8f\u6570\u7ec4\u3002\n\n\u7136\u540e\u6211\u4eec\u770b\u64cd\u4f5c\uff1a\n\n### \u64cd\u4f5c\u4e00\uff1a\u7edf\u8ba1\u5b57\u7b26\u4e2a\u6570\u3002\n\n\u8fd9\u91cc\u505a\u6cd5\u5176\u5b9e\u6709\u4e24\u79cd\uff0c\u5176\u4e2d\u6709\u4e00\u79cd\u80fd\u628a\u590d\u6742\u5ea6\u4f18\u5316\u5230 $\\mathcal O(m\\sqrt n)$ \u7684\u505a\u6cd5\uff0c\u53e6\u4e00\u79cd\u5219\u662f\u6211\u7684 $\\mathcal O(m\\sqrt n \\log n)$ \u7684\u505a\u6cd5\u3002\n\n\u8fd9\u6837\u601d\u8003\uff1a\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u662f\u5c06\u6bcf\u4e00\u5757\u7684\u6bcf\u4e00\u4e2a\u6570\u90fd\u51c6\u5907\u597d\uff0c\u67e5\u8be2\u65f6\u76f4\u63a5\u7d2f\u52a0\u3002\n\n\u53e6\u4e00\u79cd\u65b9\u6cd5\uff1a\u6bcf\u6b21\u8be2\u95ee\u65f6\u518d\u5904\u7406\uff0c\u591a\u4e00\u4e2a $log$\u3002\n\n\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u662f $log$ \u505a\u6cd5\uff0c\u56e0\u4e3a\u5982\u679c\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4\u7684\u8bdd\uff0c\u867d\u7136\u80fd\u964d\u4f4e\u4e00\u4e2a $log$ \u7684\u590d\u6742\u5ea6\uff0c\u4f46\u662f\u5728\u7ef4\u62a4\u65f6\u4f1a\u6709\u4e00\u4e2a $26$ \u7684\u5927\u5e38\u6570\uff0c\u800c\u6211\u4eec\u7684 $log$ \u663e\u7136\u662f\u5230\u4e0d\u4e86 $26$ \u7684\uff0c\u56e0\u6b64\u6709\u65f6\u9ad8\u590d\u6742\u5ea6\u7684\u505a\u6cd5\u53cd\u800c\u6bd4\u4f4e\u590d\u6742\u5ea6\u7684\u5927\u5e38\u6570\u505a\u6cd5\u5728\u4e00\u5b9a\u7684\u6570\u636e\u8303\u56f4\u66f4\u5360\u4f18\u52bf\u3002\n\n\u6211\u4eec\u4f7f\u7528\u5206\u5757\u7684\u7ecf\u5178\u601d\u60f3\uff0c\u5c06\u6574\u5757\u5148\u653e\u5728\u4e00\u8fb9\uff0c\u5148\u7edf\u8ba1\u6563\u5757\u7684\u8d21\u732e\u3002\n\n\u663e\u7136\uff0c\u8fd9\u91cc\u76f4\u63a5\u66b4\u529b\u5373\u53ef\uff0c\u4e0d\u662f\u590d\u6742\u5ea6\u74f6\u9888\u3002\n\n\u5bf9\u4e8e\u6574\u5757\uff0c\u8fd9\u91cc\u5c31\u8981\u5229\u7528\u6211\u4eec\u4e4b\u524d\u7ef4\u62a4\u7684 `sot` \u6570\u7ec4\u4e86\uff08\u517b\u4f60\u4e0d\u662f\u7528\u6765\u8fc7\u5e74\u7684\uff09\n\n\u6211\u4eec\u76f4\u63a5\u501f\u7528\u4e00\u4e0b `STL` \u7684\u4e8c\u5206\u7b97\u6cd5\uff0c\u5f53\u7136\uff0c\u5982\u679c\u4f60\u975e\u8981\u624b\u5199\uff0c\u6211\u4e5f\u4e0d\u53cd\u5bf9\u3002\n\n\u76f4\u63a5\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u8fd9\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u4f4d\u7f6e\u548c\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002\uff08\u81ea\u884c\u65ad\u53e5\uff09\n\n\u5c06\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u76f8\u51cf\uff0c\u5c31\u662f\u8fd9\u4e2a\u5757\u5185\u7684\u8fd9\u4e2a\u5b57\u7b26\u7684\u6570\u91cf\u3002\n\n\u5f53\u7136\uff0c\u4f7f\u7528\u4e8c\u5206\u7684\u524d\u63d0\u662f\u5728\u6bd4\u8f83\u610f\u4e49\u5185\uff0c\u7b26\u5408\u89c4\u5b9a\u7684\u90fd\u5728\u53f3\u8fb9\uff0c\u4e0d\u7b26\u5408\u7684\u90fd\u5728\u5de6\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u5f53\u4f7f\u7528\u5355\u8c03\u4e0d\u964d\u7684 `sot` \u6765\u5b8c\u6210\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u6ca1\u6709\u5355\u8c03\u6027\u7684 `ori`\u3002\n\n\u6211\u4eec\u8bbe\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7684\u4f4d\u7f6e\u4e3a $r$\uff0c\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\u7684\u4f4d\u7f6e\u4e3a $l$\uff0c\u663e\u7136\uff0c$r$ \u662f\u6700\u540e\u4e00\u4e2a\u8fd9\u4e2a\u5b57\u7b26\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff08\u5982\u679c\u5b58\u5728\uff09\uff0c\u56e0\u6b64\u4e2a\u6570 $=(r-1)-l+1=r-l$\u3002\n\n\u5982\u679c\u4e0d\u5b58\u5728\u7b49\u4e8e\uff0c\u90a3\u4e48\u5927\u4e8e\u7b49\u4e8e\u4e0e\u5927\u4e8e\u5b8c\u5168\u7b49\u4ef7\uff0c\u76f8\u51cf\u7ed3\u679c\u4e3a `0`\u3002\n\n\u64cd\u4f5c\u4e00\u7ed3\u675f\u3002\n\n---\n\n### \u64cd\u4f5c\u4e8c\uff1a\u533a\u95f4\u62cd\u5e73\u3002\n\n\u8fd9\u4e2a\u64cd\u4f5c\u548c\u533a\u95f4\u52a0\u5dee\u4e0d\u591a\uff0c\u662f\u5206\u5757\u7684\u57fa\u7840\u64cd\u4f5c\uff0c\u5c31\u4e0d\u7ec6\u8bb2\u4e86\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u6bcf\u5757\u7684 `tag`\uff0c\u7136\u540e\u5176\u5b83\u64cd\u4f5c\u7684\u65f6\u5019\u6ce8\u610f\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6563\u5757\u8fd8\u662f\u66b4\u529b\uff0c\u7136\u540e\u968f\u624b `sort` \u7ef4\u62a4\u4e00\u4e0b `sot` \u6570\u7ec4\uff08\u5757\u5185\u6392\u5e8f\uff0c\u590d\u6742\u5ea6 $\\mathcal O(\\sqrt n\\log n^{0.5})=\\mathcal O(\\sqrt n\\log n)$\u3002\n\n---\n\n### \u64cd\u4f5c\u4e09\uff1a\u533a\u95f4\u6392\u5e8f\u3002\n\n\u8fd9\u4e2a\u624d\u662f\u8fd9\u9053\u9898\u7684\u6bd2\u7624\u4e4b\u5904\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u90a3\u4e48\u968f\u4fbf\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u4f30\u8ba1\u90fd\u80fd\u505a\u4e86\u3002\n\n\u73b0\u5728\u6765\u770b\u8fd9\u4e2a\u64cd\u4f5c\u5982\u4f55\u5b9e\u73b0\uff1a\n\n\u9996\u5148\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5 `sort`\uff0c\u90a3\u5c31\u662f\u7edd\u5bf9\u8fc7\u4e0d\u4e86\u3002\n\n\u90a3\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u9ad8\u6548\u7684\u6392\u5e8f\u7b97\u6cd5\u5462\uff1f\u503c\u57df\u8fd9\u4e48\u5c0f\uff0c\u6876\u6392\u5b89\u6392\u4e0a\uff01\n\n\u6734\u7d20\u6876\u6392\uff1a $\\mathcal O(n)$ \uff0c\u5e26\u7740\u7ea6 $26$ \u7684\u5e38\u6570\uff0c\u8fc7\u4e0d\u4e86\u3002\n\n\u65e0\u89e3\u4e86\u5417\uff1f\u5e76\u4e0d\u662f\u3002\n\n\u6211\u4eec\u628a\u6876\u6392\u7ed9\u62c6\u6389\uff1a\u6876\u6392\u7684\u5b9e\u73b0\u65e0\u975e\u5c31\u662f\u5148\u627e\u5230\u6bcf\u4e2a\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u518d\u4e00\u4e2a\u4e2a\u8d4b\u503c\u3002\n\n\u6211\u4eec\u624b\u52a8\u4e00\u6b65\u4e00\u6b65\u6765\u505a\uff1a\n\n\u65e2\u7136\u662f\u8981\u627e\u5230\u4e2a\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5957\u64cd\u4f5c\u4e00\u3002\n\n\u8d4b\u503c\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\n\n\u9996\u5148\uff0c\u5904\u7406\u5de6\u8fb9\u7684\u6563\u5757\uff0c\u8fd9\u91cc\u76f4\u63a5\u66b4\u529b\u5373\u53ef\uff0c\u590d\u6742\u5ea6 $\\mathcal O(\\sqrt n\\log n)$\uff0c\u522b\u5fd8\u4e86\u6211\u4eec\u8fd8\u8981\u7ef4\u62a4 `sot`\u3002\n\n\u7136\u540e\uff0c\u5bf9\u4e8e\u4e2d\u95f4\u7684\u6574\u5757\uff0c\u6211\u4eec\u6bcf\u6b21\u5224\u65ad\u5f53\u524d\u5269\u4f59\u7684\u6700\u5c0f\u5b57\u7b26\u662f\u5426\u591f\u6392\u6ee1\u8fd9\u4e2a\u5757\uff0c\u5982\u679c\u591f\uff0c\u5c31\u76f4\u63a5\u6253\u4e0a\u4fee\u6539\u6807\u8bb0\u3002\n\n\u5982\u679c\u4e0d\u591f\uff0c\u90a3\u5bf9\u4e0d\u8d77\uff0c\u53ea\u80fd\u66b4\u529b\u3002\n\n\u6700\u540e\u662f\u53f3\u8fb9\u7684\u6563\u5757\uff0c\u548c\u5de6\u8fb9\u7684\u540c\u7406\u3002\n\n---\n\n\u672c\u9898\u89e3\u6b63\u6587\u7ed3\u675f\uff0c\u4ee3\u7801\u6709\u70b9\u957f\uff0c\u5c31\u6302\u526a\u8d34\u677f\u4e86\u3002\n\n[$\\colorbox{yellow}{\\color{red}{\\texttt{CODE}}}$](https://www.luogu.com.cn/paste/4xxqgn3q)\n\n---\n\n#### \u975e\u6b63\u6587\u90e8\u5206\u4e00\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e\u3002\n\n\u5bf9\u4e8e\u6570\u7ec4\u7684\u6784\u5efa\uff0c\u76f4\u63a5\u5c06 `ori` \u4e0e `sot` \u540c\u6b65\u8d4b\u503c\uff0c\u8d4b\u5b8c\u503c\u4e4b\u540e\u5bf9 `sot` \u7684\u6bcf\u4e2a\u5757\u8fdb\u884c `sort`\uff0c\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e00\uff0c\u6563\u5757\u7684\u5904\u7406\u590d\u6742\u5ea6\u4e3a $\\mathcal O(\\sqrt n)$\uff0c\u6574\u5757\u7684\u5904\u7406\u590d\u6742\u5ea6\u4e3a $\\mathcal O(\\log n)$\uff0c\u6574\u5757\u7684\u6570\u91cf\u662f $\\sqrt n$ \u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u8fd9\u4e00\u6b65\u7684\u590d\u6742\u5ea6\u4e3a $\\mathcal O(\\sqrt n\\log n+\\sqrt n)=\\mathcal O(\\sqrt n\\log n)$\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e8c\uff0c\u6563\u5757\u7684\u5904\u7406\u590d\u6742\u5ea6\u4e3a $\\mathcal O(\\sqrt n\\log n)$\uff0c\u6574\u5757\u4e3a $\\mathcal O(1)$\uff0c\u5757\u6570\u5728 $\\sqrt n$ \u7ea7\u522b\uff0c\u603b\u590d\u6742\u5ea6 $\\mathcal O(\\sqrt n+\\sqrt n\\log n)=\\mathcal O(\\sqrt n\\log n)$\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e09\uff0c\u7edf\u8ba1\u7684\u590d\u6742\u5ea6\u548c\u64cd\u4f5c\u4e00\u76f8\u540c\uff0c\u8d4b\u503c\u7684\u590d\u6742\u5ea6 $=\\mathcal O(\\sqrt n\\cdot \\text{\u4e0d\u5b8c\u6574\u7684\u5757\u6570}+\\sqrt n)$\uff0c\u56e0\u4e3a\u8fd9\u91cc\u53ea\u6709\u5728\u4e24\u4e2a\u5b57\u7b26\u7684\u4ea4\u754c\u5904\u624d\u6709\u53ef\u80fd\u51fa\u73b0\u4e0d\u5b8c\u6574\u7684\u90e8\u5206\uff0c\u56e0\u6b64 `\u4e0d\u5b8c\u6574\u7684\u5757\u6570` \u6700\u591a\u4e3a $26$\uff0c\u4e3a\u5e38\u6570\u7ea7\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u4e3a $\\mathcal O(\\sqrt n+\\sqrt n\\log n)=\\mathcal O(\\sqrt n\\log n)$\u3002\n\n\u64cd\u4f5c\u7684\u6b21\u6570\u662f $\\mathcal O(m)$ \u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u4e3a $\\mathcal O(n\\log n+m\\sqrt n\\log n)=\\mathcal O((n+m\\sqrt n)\\log n)$\uff0c\u7ea6\u4e3a $\\mathcal O (m\\sqrt n\\log n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n\n---\n\n\u975e\u6b63\u6587\u90e8\u5206\u4e8c\uff1a\u7533\u8bf7\u6dfb\u52a0\u6807\u7b7e\uff1a`\u5757\u72b6\u94fe\u8868\u3001\u5757\u72b6\u6570\u7ec4\u3001\u5206\u5757`\u3002\n\n---\n\n\u63d0\u4ea4\u5ba1\u6838\u539f\u56e0\uff1a\u6539\u4e00\u4e0b\u5206\u7c7b\u3002",
        "postTime": 1660224098,
        "uid": 478861,
        "name": "Gumbo",
        "ccfLevel": 6,
        "title": "P2787-\u8bed\u65871\uff08chin1\uff09-\u7406\u7406\u601d\u7ef4"
    }
]