[
    {
        "content": "# \u5173\u4e8e\u5b66\u4e60\u4e8c\u53c9\u6811\u8fd9\u662f\u4e00\u9053\u975e\u5e38\u597d\u7684\u9898\u76ee\n\u5173\u4e8e\u524d\u5e8f\u904d\u5386\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u6839\u8282\u70b9\u7684\u8bbf\u95ee\u987a\u5e8f\uff0c\u5373\u6839\u5de6\u53f3\u3002\u540c\u7406\uff0c\u540e\u5e8f\u5373\u5de6\u53f3\u6839\uff0c\u4e2d\u5e8f\u5373\u5de6\u6839\u53f3\uff08\u5927\u4f6c\u53ef\u81ea\u89c9\u8df3\u8fc7\u672c\u6bb5\u5e9f\u8bdd\uff09\n## \u77e5\u9053\u4e86\u524d\u5e8f\u904d\u5386\u7684\u89c4\u5219\u540e\uff0c\u51fa\u4ee3\u7801\n```\n#include<iostream>\n#include<string>\n#include<cstring>//\u4e0d\u52a0\u4f1aCE\nusing namespace std;\nint n;\nstring s;\nint main()\n{\n\tcin>>n;\n\tcin>>s;\n\tfor(int i=2;i<=n;++i)//\u7531\u4e8e\u7b2c\u4e00\u4e2a\u4e3a\u539f\u4e32\uff0c\u6240\u4ee5\u5355\u72ec\u8f93\u5165\n\t{\n\t\tstring ss;\n\t\tcin>>ss;\n\t\tint x=s.find(ss[0]);//\u627e\u5230\u8fd9\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9\u5728\u539f\u4e32\u4e2d\u7684\u4f4d\u7f6e\n\t\ts.erase(x,1);//\u6e05\u9664\u6839\u8282\u70b9\n\t\ts.insert(x,ss);//\u52a0\u5165\u5b50\u6811\n\t}\n\tfor(int i=0;i<s.size();++i)\n\tif(s[i]!='*') cout<<s[i];//\u4e0d\u8f93\u51fa\u7a7a\u8282\u70b9\n\telse continue;\n}\n```\n\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\u5c31\u77e5\u9053\u5b83\u7684\u6b63\u786e\u6027\u3002\n### \u5173\u4e8estring\u51fd\u6570\uff0c\u4e0b\u9762\u8d34\u51e0\u4e2a\u535a\u5ba2\uff0c\u4fbf\u4e8e\u5b66\u4e60\nhttps://blog.csdn.net/FX677588/article/details/70734291\n\nhttps://blog.csdn.net/qq_38755175/article/details/79163857\n\nhttps://blog.csdn.net/wang1997hi/article/details/78364755\n\n\u840c\u65b0\u7684\u65b0\u9898\u89e3\uff0c\u5e0c\u671b\u5927\u5bb6\u591a\u63d0\u610f\u89c1",
        "postTime": 1533540330,
        "uid": 41887,
        "name": "Shikita",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "# \u9898\u89e3\n  \u8fd9\u7bc7\u9898\u89e3\u662f\u6211\u4e13\u95e8\u4e3a\u65b0\u4eba\u5199\u7684\uff08\u6211\u771f\u662f\u81ed\u4e0d\u8981\u8138\u6211\u4e5f\u662f\u65b0\u4eba\uff09\uff0c\u4e5f\u4e0d\u7528\u5173\u6ce8\u6211\uff0c\u6211\u95f2\u7684\u6ca1\u4e8b\u4e5f\u4e0d\u53d1\u9898\u89e3\uff0c\u5fc3\u8840\u6765\u6f6e\u6765\u8d5a\u53d6\u4e00\u70b9\u6d3b\u8dc3\u5206\u3002\u9898\u89e3\u6765\u4e4b\u4e0d\u6613\uff0c\u4e14\u770b\u4e14\u73cd\u60dc\u3002\uff08\u6709\u4ec0\u4e48\u53ef\u4ee5\u6539\u8fdb\u7684\u5730\u65b9\u968f\u65f6\u63d0\u51fa\u5c31\u597d\u4e86\uff0c\u8c22\u8c22\u5404\u4f4d\u5927\u4f6c\uff09\n  \n  \u81f3\u4e8e\u601d\u8def\uff0c\u662f\u6211\u6839\u636e\u5355\u8bcd\u65b9\u9635\u7684\u542f\u53d1\uff08\u597d\u6b79\u6211\u66fe\u7ecf\u4e5f\u662f\u4e00\u4e2a\u6a59\u540d\u7684\u7537\u4eba\uff0c\u5341\u51e0\u5929\u6ca1\u767b\u5f55\u5c31\u2026\u2026\u2026\u2026\uff09\n  \u5176\u5b9e\u8fd9\u9898\u8fd8\u662f\u5f88\u597d\u7684\uff0c\u5f88\u597d\u505a\uff0c\u8fd8\u53ef\u4ee5\u953b\u70bc\u624b\u901f\uff0c\u505a\u5bf9\u4e86\u8fd8\u80fd\u63d0\u9ad8\u4fe1\u5fc3\uff0c\u4f5c\u4e3a\u4e00\u540d\u849f\u84bb\u6211\u8fd8\u662f\u5f88\u5bb9\u6613\u53d7\u6253\u51fb\u7684\u3002\n\n  \u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff08\u4f46\u6211\u8fd8\u662f\u8bf4\u4e86\u4e0d\u5c11\u5e9f\u8bdd\u2026\u2026\uff09\uff0c\u4e0a\u9898\u89e3\n\n\n```cpp\n\n\n\n#include<iostream> \n#include<cstdio>//\u4e0d\u7ba1\uff0c\u5c31\u662f\u559c\u6b22\u8fd9\u4e2a\u5934\u6587\u4ef6\uff0c\u957f\u5f97\u592a\u597d\u770b\u4e86 \nusing namespace std;\nstruct programmer//struct\u5b9a\u4e49\uff0c\u597d\u628a\u6811\u7684\u8282\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u4ee3\u7801\u5440 \n{\n\tchar lc;//\u5de6\u5b69\u5b50X1\uff08left child\uff0c\u7b80\u79f0lc\uff09 \n\tchar rc;//\u53f3\u5b69\u5b50X1\uff08right child\uff0c\u7b80\u79f0rc\uff09 \n}lt[130];//\u6570\u7ec4\uff0c\u8fd9\u4e2a\u5341\u5206\u91cd\u8981\uff0c\u4e00\u4f1a\u513f\u8f93\u5165\u5b57\u7b26\u7684\u65f6\u5019\u8fd8\u8981\u7528\u8fd9\u4e2a\u4e32\u8d77\u6765\uff0c\u5176\u5b9e\u771f\u6b63\u8d77\u4f5c\u7528\u7684\u53ea\u6709lt[73]~lt[122],\u8bf4\u8fd9\u4e2a\u662f\u4e3a\u4e86\u9632\u6b62\u4e00\u4e9b\u4eba\u4e0d\u591a\u60f3\uff0c\u65b9\u4fbf\u7406\u89e3\u7684\nchar h,h1;//\u50a8\u5b58\u4e00\u4f1a\u513f\u8981\u8f93\u5165\u7684\u8282\u70b9\uff0c\u591a\u5b9a\u4e49\u4e00\u4e2ah1\u662f\u4e3a\u4e86\u4e00\u4f1a\u513f\u5c06\u6839\u8282\u70b9\u4fdd\u7559\u4e0b\u6765\u5148\u4ee3\u5165\u51fd\u6570\nvoid sm(char x)//\u6211\u662f\u8c01\uff0c\u6211\u6740\u4e86\u8c01\uff0c\u8c01\u53c8\u6740\u4e86\u6211 \n{\n\tif(x=='*') return;//\u5982\u679c\u662f*\u8bf4\u660e\u6b64\u4e43\u7a7a\u8282\u70b9\uff0c\u90a3\u5c31\u4e0d\u7528\u518d\u5f80\u4e0b\u63a2\u4e86 \n\tcout<<x;//\u5148\u628a\u5b83\u7ed9\u8f93\u51fa\u51fa\u6765\uff0c\u78b0\u7740\u4e00\u4e2a\u5c31\u8e22\u51fa\u53bb\u4e00\u4e2a\uff0c\u8f93\u51fa\u7684\u987a\u5e8f\u662f\u53ef\u4ee5\u4fdd\u969c\u7684\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u770b\u540e\u9762\uff0c\u6211\u89e3\u91ca\u4e86 \n\tsm(lt[x].lc);//\u627e\u5230\u4ed6\u7684\u5de6\u5b69\u5b50\uff0c\u7ee7\u7eed\u5f80\u4e0b\u63a2\uff08\u5982\u679c\u5de6\u5b69\u5b50\u662f*\u7684\u8bdd\uff0c\u4f1a\u8fd4\u56de\u7684\uff0c\u53ef\u4ee5\u770b\u4e0a\u4e00\u53e5\u7684\u4e0a\u4e00\u53e5\uff09 \n\tsm(lt[x].rc);//\u627e\u5230\u4ed6\u7684\u53f3\u5b69\u5b50\uff0c\u7ee7\u7eed\u5411\u4e0b\u63a2\u7d22 \n/*\u8fd9\u91cc\u6211\u4e3e\u4e2a\u4f8b\u5b50\uff1a \u4f8b\u5982\u8f93\u5165abc\u548cbcd,a\u7684ASC\u7801\u662f73\uff0c\u6240\u4ee5lt[73].lc\u662fb\uff08ASC\u780174\uff09\uff0c\u63a5\u7740\u518d\u4eceb\u5f00\u59cb\u63a2\uff0clt[74].lc\u4e4b\u524d\u6709\u8fc7\u8f93\u5165\uff0c\u662f\u4e2ac\u3002\u518d\u4ece\u5e8f\n\u53f7\u4e3a'c'\uff0875\uff09\u7684lt\u6570\u7ec4\u7ee7\u7eed\u5f80\u4e0b\u63a2\u7d22\uff0c\u4e00\u63a2\u7d22\u5230*,\u5c31\u4f1a\u5f80\u56de\u8dd1\u3002\u56de\u5230c\u6570\u7ec4\u7684rc\uff0c\u5f80\u56de\u63a2\uff0c\u6240\u4ee5\u987a\u5e8f\u95ee\u9898\u53ef\u4ee5\u4fdd\u8bc1,\u8981\u662f\u8fd8\u662f\u7406\u89e3\u4e0d\u4e86\uff0c\u53ef\u4ee5\u753b\u753b\u8bd5\u8bd5\uff0c\u4eb2\u6d4b\u6709\n\u6548\u3002\u8fd9\u4e2a\u51fd\u6570\u548c\u8f93\u5165\u5176\u5b9e\u5c31\u662f\u5728\u6570\u7ec4\u7684\u5404\u4e2a\u90e8\u5206\u4e4b\u95f4\u4e0d\u65ad\u7a7f\u68ad\uff0c\u7528\u5b57\u7b26\u7684ASC\u7801\u503c\u4f5c\u4e3a\u8fde\u63a5\u8282\u70b9\u7684\u7ebf\uff0c\u6570\u7ec4\u7684\u5de6\u53f3\u5b69\u5b50\u5c31\u662f\u4e0b\u4e00\u4e2a\u8981\u5bfb\u627e\u7684\u6570\u7ec4\u7684\u4ee3\u53f7*/ \n}\nint main()\n{\n\tint n;//n\u5728\u9898\u76ee\u4e0a\u8bf4\u4e86\uff0c\u8f93\u5165\u51e0\u4e2a\u8282\u70b9 \n\tscanf(\"%d\",&n);//\u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u89c2\u770b\uff0c\u6211\u628a\u8f93\u5165\u62c6\u6210\u4e09\u90e8\u5206 \n\tcin>>h1;//\u8f93\u5165\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u6bd4\u8f83\u7279\u6b8a\uff0c\u6240\u4ee5\u5355\u72ec\u8f93\u5165 \n\tcin>>lt[h1].lc;//\u5de6\u5b69\u5b50\uff0ch1\u6240\u4ee3\u8868\u7684\u5b57\u7b26\u518d\u6b21\u4f1a\u8f6c\u6362\u4e3aASC\u7801 \n\tcin>>lt[h1].rc;//\u53f3\u5b69\u5b50\uff0c\u9053\u7406\u548c\u4e0a\u9762\u76f8\u540c\uff0c\u5c31\u4e0d\u7528\u6211\u591a\u8d39\u53e3\u820c\u4e86 \n\tfor(int i=2;i<=n;i++)//\u8fd9\u91cc\u5927\u5bb6\u90fd\u61c2\u7684\u5427\uff0c\u8f93\u5165 \n\t{\n\t\tcin>>h;\n\t\tcin>>lt[h].lc;\n\t\tcin>>lt[h].rc;\n\t}\n\tsm(h1);//\u8fdb\u5165\u51fd\u6570\uff0c\u7528\u7684\u662f\u9012\u5f52\uff0c\u4f46\u6211\u4e5f\u662fAC\u4e86\u624d\u6562\u6765\u53d1\u9898\u89e3\u7684 \n\treturn 0;\n}\n```",
        "postTime": 1550073018,
        "uid": 107212,
        "name": "scholar20551",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6570\u636e\u4e5f\u662f\u6c34\u5f97\u53ef\u4ee5\u554a\uff0c\u7b2c\u4e00\u4e2a\u8282\u70b9\u603b\u662f\u6839\u8282\u70b9\uff0c\u8bfb\u5165\u5b8c\u4e0d\u7528\u5efa\u6811\u5c31\u53ef\u4ee5\u76f4\u63a5\u641c\u7d22\u4e86\u3002\n\n\u4ee3\u7801\u7b80\u5355\u6613\u61c2\uff0c\u611f\u89c9\u8ddf\u6811\u4e00\u70b9\u5173\u7cfb\u90fd\u6ca1\u6709\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n;\nchar a[30][3];\nvoid f(char x)\n{\n    if(x!='*')\n    {\n        cout<<x;\n        for(int i=1;i<=n;i++)\n            if(a[i][0]==x)\n            {\n                f(a[i][1]);\n                f(a[i][2]);\n            }\n    }\n    return;\n}\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++)\n        cin>>a[i][0]>>a[i][1]>>a[i][2];\n    f(a[1][0]);\n    return 0;\n}\n```",
        "postTime": 1503112347,
        "uid": 34274,
        "name": "javalyc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u597d\u50cf\u8fd8\u6ca1\u6709\u7528\u5230\u81ea\u5df1\u8868\u793a\u7684\u5b57\u7b26\u52a0\u5230\u4e24\u4e2a\u5b50\u6811\u7684\u6307\u9488\u7684\u65b9\u6cd5\u5efa\u7acb\u6811\u7684\u5462\u2026\u2026\n\n\u90a3\u6211\u5c31\u6765\u8865\u5145\u4e00\u4e2a\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n//\u6ca1\u52a0\u6790\u6784\u51fd\u6570\uff0c\u53ef\u80fd\u662f\u6211\u5199\u7684\u4e0d\u5bf9\uff0c\u52a0\u4e86\u5c31\u4f1a\u8fd0\u884c\u9519\u8bef\nstruct Tree { //\u6811\u7684\u7ed3\u6784\n    char me; //\u81ea\u5df1\u7684\u5b57\u7b26\n    Tree* left; //\u5de6\u5b50\u6811\n    Tree* right; //\u53f3\u5b50\u6811\n    Tree(char w =0): me(w), left(0), right(0) {} //\u6784\u9020\u51fd\u6570\n} tree; //\u6700\u7ec8\u5efa\u7acb\u7684\u6811\ninline Tree* build(char w) { //\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u7ed3\u70b9\uff0c\u4ee5w\u4f5c\u4e3a\u81ea\u5df1\u7684\u5b57\u7b26\n    if (w == '*') return 0; //\u5982\u679c\u662f'*'\uff0c\u8bf4\u660e\u4e0d\u5e94\u8be5\u521b\u5efa\u5b50\u6811\uff08\u89c1\u4e0b\u9762\u4ee3\u7801\uff09\n    return new Tree(w);\n}\nTree* find_tree(char w, Tree* start = &tree) { //\u5728start\u8fd9\u68f5\u6811\u4e2d\u627e\u5230\u5b57\u7b26\u4e3aw\u7684\u8282\u70b9\n    if (start->me == w) return start; //\u81ea\u5df1\u5c31\u662f\uff0c\u76f4\u63a5\u8fd4\u56de\n    Tree* ans = 0;\n    if (start->left) ans = find_tree(w, start->left); //\u9012\u5f52\u67e5\u627e\uff0cstart->left\u5c31\u76f8\u5f53\u4e8estart->left != 0\uff0c\u800c0\u662fbuild()\u8fd4\u56de\u8868\u793a\u6ca1\u6709\u5b50\u6811\u7684\u503c\n    if (ans) return ans;\n    if (start->right) ans = find_tree(w, start->right);\n    return ans;\n}\nvoid preorder(Tree* start) { //\u5148\u5e8f\u904d\u5386\uff1a \u6839\u8282\u70b9 + preorder(\u5de6\u5b50\u6811) + preorder(\u53f3\u5b50\u6811)\n    cout << start->me;\n    if (start->left) preorder(start->left); //\u6ce8\u610f\u68c0\u67e5\u6709\u65e0\u5b50\u6811\n    if (start->right) preorder(start->right);\n}\nint main() {\n    int n; cin >> n;\n    char me, l, r; cin >> me >> l >> r; //me: \u81ea\u5df1\u7684\u5b57\u7b26\uff0c l: \u5de6\u8fb9\u7684\u5b57\u7b26\uff0c r: \u53f3\u8fb9\u7684\u5b57\u7b26\n    tree.me = me; tree.left = build(l); tree.right = build(r); //\u5404\u81ea\u521b\u5efa\u5b50\u6811\n    for (int i = 1; i < n; ++i) {\n        char me, l, r; cin >> me >> l >> r;\n        Tree* node = find_tree(me); //\u627e\u5230\u6839\u8282\u70b9\n        node->left = build(l); node->right = build(r); //\u5efa\u7acb\u5b50\u6811\n    }\n    preorder(&tree); //\u8f93\u51fa\u5148\u5e8f\u904d\u5386\n    return 0;\n}\n```",
        "postTime": 1512048378,
        "uid": 64757,
        "name": "huang_yue",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u53d1\u73b0\u6bcf\u9053\u9898\u76ee\u91cc\u9762C\u7684\u9898\u89e3\u90fd\u662f\u6700\u5c11\u7684\uff0c\u6709\u65f6\u5019\u51e0\u4e4e\u90fd\u6ca1\u6709\u3002\u90a3\u4e48\u6211\u5c31\u6765\u5199\u4e00\u4e2a\u5427\u3002\n\n\u4f5c\u4e3a\u4e00\u4e2a\u5927\u4e00\u7684\u840c\u65b0\uff0c\u4e8c\u53c9\u6811\u76ee\u524d\u8fd8\u662f\u81ea\u5b66\u7684\uff0c\u8001\u5e08\u8fd8\u6ca1\u6709\u8bb2\u5230\u3002\u6240\u4ee5\u6211\u7528\u7684\u65b9\u6cd5\u5f88\u89c4\u77e9\uff0c\u4e0d\u50cf\u522b\u7684\u9898\u89e3\u4e00\u6837\uff0c\u65b0\u624b\u53ef\u4ee5\u4ece\u8fd9\u91cc\u5b66\u5230\u57fa\u7840\u3002\u4e0d\u8fc7\u8fd9\u4e00\u9898\u98ce\u683c\u662fC\uff0c\u4f46C\u4f1a\u7f16\u8bd1\u9519\u8bef\uff0c\u8fd9\u662f\u56e0\u4e3astruct\u7684\u5c3f\u6027\u3002\u3002\u3002\n\n```cpp\n#include<stdio.h>\n#include<string.h>\nstruct node{         //\u5b9a\u4e49node\u7c7b\u578b\n    char lc,rc,fa;   //\u5206\u522b\u6709\u5b83\u7684\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\u548c\u7236\u4eb2\n};\nnode tree[1000];\nvoid work(char s)\n{                              //\u7b80\u5355\u7684\u9012\u5f52\n    printf(\"%c\", s);\n    if (tree[s].lc!='*') work(tree[s].lc);\n    if (tree[s].rc!='*') work(tree[s].rc);\n}\nint main()\n{\n    int i,n;\n    char c,fir;\n    scanf(\"%d\", &n);\n    for (i=1;i<=n;i++){    //\u5728\u8fd9\u91cc\u6211\u672c\u6765\u8981\u7528while\u5faa\u73af\uff0c\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u5c31\u4fdd\u7559\u4e0d\u4e86\u6811\u6839\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u7528\u4e86for\n        scanf(\" %c\", &c);\n        if (i==1) fir = c;\n        scanf(\" %c%c\", &tree[c].lc,&tree[c].rc);\n        tree[tree[c].lc].fa = tree[tree[c].rc].fa = c;\n    }\n    work (fir);\n    return 0;\n}\n```",
        "postTime": 1493341340,
        "uid": 42520,
        "name": "wuhao1027",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "__\u8fd9\u9898\u5efa\u8bae\u521a\u5b66\u4e8c\u53c9\u6811\u7684\u521d\u5b66\u8005\u6765\u505a\uff0c\u4e0d\u7136\u6839\u672c\u770b\u4e0d\u61c2__\n\n\u9996\u5148\u6765\u666e\u53ca\u4e00\u4e0b\uff0c\u4ec0\u4e48\u662f\u5148\u5e8f\u904d\u5386\uff1f\n\n__\u5148\u5e8f\u904d\u5386__ \u5148\u904d\u5386\u6839\u8282\u70b9\uff0c\u5728\u904d\u5386\u5de6\u5b50\u6811\uff0c\u53f3\u5b50\u6811\u3002\n\n\u5047\u8bbe\u6709\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5982\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/jpsaild3.png)\n\n\u5148\u904d\u5386a\u8282\u70b9\uff0c\u63a5\u4e0b\u6765\u904d\u5386\u5b83\u7684\u5de6\u5b50\u6811\u3002\n\n\u904d\u5386b\u8282\u70b9\uff0c\u5728\u904d\u5386\u5b83\u7684\u5de6\u513f\u5b50d\u3002\n\n\u904d\u5386d\u8282\u70b9\uff0c\u5e76\u6ca1\u6709\u5b69\u5b50\uff0c\u8fd4\u56de\u8282\u70b9b\uff0c\u8282\u70b9b\u6ca1\u6709\u53f3\u5b69\u5b50\uff0c\u8fd4\u56de\u8282\u70b9a\uff0c\u904d\u5386\u53f3\u5b50\u6811\u3002\n\n\u904d\u5386c\u8282\u70b9\uff0c\u518d\u904d\u5386\u4ed6\u7684\u5de6\u5b50\u6811\u3002\n\n\u904d\u5386e\u8282\u70b9\uff0c\u5e76\u6ca1\u6709\u5de6\u5b50\u6811\uff0c\u904d\u5386\u53f3\u5b50\u6811\u3002\n\n\u904d\u5386f\u8282\u70b9\uff0c\u5e76\u6ca1\u6709\u5b69\u5b50\uff0c\u8fd4\u56de\u5230\u6839\u8282\u70b9\uff0c\u904d\u5386\u7ed3\u675f\u3002\n\n\u904d\u5386\u7ed3\u679c\u662f\uff1aabdcef\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node{//\u5b9a\u4e49\u4e8c\u53c9\u6811\u7ed3\u6784\u4f53\n\tstring data;//\u81ea\u8eab\n\tint l,r;//\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u7684\u6570\u7ec4\u4e0b\u8868\u3002\n\t\n}t[1005];\nint n;\nvoid xx(int k)//\u5148\u5e8f\u904d\u5386\n{\n\tcout<<t[k].data;//\u904d\u5386\u6839\u8282\u70b9\n\tif(t[k].l!=0)//\u5982\u679c\u6709\u5de6\u5b69\u5b50\u7684\u8bdd\uff0c\u904d\u5386\u5de6\u5b69\u5b50\n\t\txx(t[k].l);\n\t\n\tif(t[k].r!=0)//\u5982\u679c\u6709\u53f3\u5b69\u5b50\u7684\u8bdd\uff0c\u904d\u5386\u53f3\u5b69\u5b50\n\t\txx(t[k].r);\n        \n\t\t\n}\nint main(){\n\tcin>>n;\n\tint rt;//\u6839\u8282\u70b9\u7684\u4e0b\u6807\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tchar a,b,c;\n\t\tcin>>a>>b>>c;\n\t\tif(i==1)//\u7b2c\u4e00\u4e2a\u8f93\u5165\u7684\u662f\u6839\u8282\u70b9\uff0c\u50a8\u5b58\u5176\u4e0b\u6807\uff0c\u4e3a\u5176\u572826\u4e2a\u5b57\u6bcd\u4e2d\u7684\u4f4d\u7f6e\n\t\t\trt=a-'a'+1;\n\t\tt[a-'a'+1].data=a;//\u50a8\u5b58\n\t\t/*\u4e0b\u9762\u4e3a\u786e\u5b9a\u7236\u5b50\u5173\u7cfb*/\n      \t\tif(b!='*')//\u5982\u679c\u6709\u5de6\u513f\u5b50\n\t\t{\n\t\t\tt[b-'a'+1].data=b;//\u5b58\u50a8\u5de6\u513f\u5b50\n\t\t\tt[a-'a'+1].l=b-'a'+1;//\u8bb0\u5f55\u5de6\u513f\u5b50\u7684\u4e0b\u6807\n\t\t}\n\t\tif(c!='*')//\u540c\u4e0a\uff0c\u8bb0\u5f55\u53f3\u513f\u5b50\n\t\t{\n\t\t\tt[c-'a'+1].data=c;\n\t\t\tt[a-'a'+1].r=c-'a'+1;\n\t\t}\n\t}\n\txx(rt);//\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5148\u5e8f\u904d\u5386\n\treturn 0;\n}\n\n```",
        "postTime": 1576986646,
        "uid": 151647,
        "name": "sycqwq",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u9996\u5148\u8bf4\u660e \u672c\u9898\u6570\u636e\u8303\u56f4\u4e3aa-z 26\u4e2a\u5c0f\u5199\u5b57\u6bcd \u4ee5\u53ca\\*\n\n\u76f4\u63a5\u5c06\u5b57\u6bcd\u51cf\u53bb96 \u8f6c\u5316\u4e3aint\u5b58\u50a8\u5c31\u884c\u4e86\u3002\n\n\u8f93\u5165\u5b8c\u6bd5\u540e\uff0c\u626b\u4e00\u904d\u627e\u7236\u4eb2\u4e3a0\u7684\u70b9\u5c31\u662f\u6839\u8282\u70b9\u3002\n\n\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb \u9012\u5f52\uff0c\u524d\u5e8f\u904d\u5386\uff0c\u6bcf\u5230\u4e00\u4e2a\u70b9\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\u3002\n\n\n\u4ee3\u7801\u4e0d\u957f\u2014\u2014\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\nusing namespace std;\nstruct tree{int l,r,fa;}T[30];\nint n,root;\nstring c;\nvoid visit(int k){\n    char ch = k + 96; printf(\"%c\",ch);\n    if(T[k].l!=0) visit(T[k].l);\n    if(T[k].r!=0) visit(T[k].r);\n}\nint main(){\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        cin>>c;\n        if(c[1]!='*') {T[c[0]-96].l = c[1]-96; T[c[1]-96].fa = c[0]-96;}\n        if(c[2]!='*') {T[c[0]-96].r = c[2]-96; T[c[2]-96].fa = c[0]-96;}\n    }\n    for(int i=1;i<=26;i++) if(T[i].fa==0){root=i; break;}\n    visit(root);\n    return 0;\n}\n```",
        "postTime": 1502379643,
        "uid": 23342,
        "name": "Redstone\u7ea2\u77f3\u7c89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u6b21\u505a\u4e8c\u53c9\u6811\u7684\u9898\uff0c\u8fd9\u4e2a\u9898\u53ef\u4ee5\u7b97\u662f\u4e8c\u53c9\u6811\u7684\u6a21\u677f\u9898\u5427\u3002\n\n\u9996\u5148\u8981\u660e\u767d\u4e8c\u53c9\u6811\u4e2d\u5148\u5e8f\uff0c\u4e2d\u5e8f\uff0c\u540e\u5e8f\u904d\u5386\u7684\u6982\u5ff5\u3002\n\n\u5176\u5b9e\u8fd9\u91cc\u7684\u5148\uff0c\u4e2d\uff0c\u540e\u90fd\u662f\u6839\u8282\u70b9\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5176\u4ed6\u90fd\u662f\u5de6\u5b50\u6811\u5148\u4e8e\u53f3\u5b50\u6811\u904d\u5386\u3002\u6ce8\u610f\u8fd9\u91cc\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u4e5f\u9002\u5408\u5b50\u6811\uff0c\u4e5f\u5c31\u662f\u8bf4\u904d\u5386\u662f\u9012\u5f52\u8fdb\u884c\u7684\u3002\n\n\u4f8b\u5982\u6837\u4f8b\uff1a\uff08\u81ea\u5df1\u753b\u4e2a\u56fe\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff09\n\n\u5148\u5e8f\u4e3a abdicj\n\n\u4e2d\u5e8f\u4e3a dbjacj\n\n\u540e\u5e8f\u4e3a dbicja\n\n\u6211\u4eec\u7528lson[],rson[]\u6765\u5b58\u8282\u70b9\u7684\u4e24\u4e2a\u513f\u5b50\uff0c\u90a3\u4e48\u5148\u5e8f\u904d\u5386\u5c31\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a\n\n```\ninline void print(char root){\n\tcout<<root;\n\tif(lson[root]!='1')print(lson[root]);\n\tif(rson[root]!='1')print(rson[root]);\n}\n```\n\uff08\u56e0\u4e3a\u61d2\u7684\u53d8\u6210\u6570\u5b57\u5c31\u76f4\u63a5\u5168\u90e8char\uff0c\u53cd\u6b63\u4e0d\u5f71\u54cd\u4ec0\u4e48\uff09\n\n\uff08\u8fd9\u91cc\u7684 1 \u662f\u6211\u521d\u59cb\u5316\u7684\uff0c\u5982\u679clson[root]=='1'\u5c31\u662f\u4ee5\u5f53\u524d\u8282\u70b9\u6ca1\u6709\u5de6\u5b50\u6811\uff09\n\n\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u53ea\u8981\u6539\u4e00\u4e0b\u6839\u8f93\u51fa\u7684\u4f4d\u7f6e\u5c31\u597d\u4e86\uff0c\u5c31\u50cf\u4e0a\u9762\u8bf4\u7684\u3002\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u6839\u8282\u70b9\u8fd9\u4e48\u5224\uff1f\uff08\u867d\u7136\u8fd9\u4e2a\u9898\u7684\u6570\u636e\u5f88\u6c34\uff0c\u7b2c\u4e00\u4e2a\u5c31\u662f\u6839\uff09\n\n\u60f3\u60f3\u7528\u6570\u5b57\u5904\u7406\u6811\u627e\u6839\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u7236\u4eb2\u7684\u5c31\u662f\u6839\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u505a\uff0c\u5728\u8bfb\u5165\u7684\u65f6\u5019\u6807\u8bb0\u7236\u4eb2\u3002\n\n\u8fd9\u65f6\u53c8\u6765\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u4e00\u4e2a\u5b57\u6bcd\u4e0d\u5728\u6811\u4e0a\uff0c\u90a3\u4e48\u5b83\u4e5f\u6ca1\u6709\u7236\u4eb2\uff0c\u600e\u4e48\u5224\u65ada~z\u4e2d\u90a3\u4e9b\u662f\u8282\u70b9\u5462\uff1f\n\n\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u6807\u8bb0\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\u5f88\u5bb9\u6613\u60f3\u5230map\u3002\n\n\u7efc\u4e0a\uff0c\u8fd9\u4e2a\u9898\u5c31\u5f88\u597d\u7684\u89e3\u51b3\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<map>\nusing namespace std;\nconst int mx=222;\nint n;\nmap<char,int>b;\nchar lson[mx],rson[mx],fa[mx];\ninline void print(char root){\n\tcout<<root;\n\tif(lson[root]!='1')print(lson[root]);\n\tif(rson[root]!='1')print(rson[root]);\n}\nint main(){\n\tcin>>n;\n\tfor(char i='a';i<='z';i++)fa[i]='1',lson[i]='1',rson[i]='1';//\u521d\u59cb\u5316\n\tstring s;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>s;\n                b[s[0]]=1;\n\t\tif(s[1]!='*'){\n\t\t\tlson[s[0]]=s[1];fa[s[1]]=s[0];b[s[1]]=1;\n\t\t}\n\t\tif(s[2]!='*'){\n\t\t\trson[s[0]]=s[2];fa[s[2]]=s[0];b[s[2]]=1;\n\t\t}\n\t}\n\tchar root;\n\tfor(char i='a';i<='z';i++){\n\t\tif(b[i]&&fa[i]=='1'){\n\t\t\troot=i;break;\n\t\t}\n\t}\n\tprint(root);\n\treturn 0;\n}\n```\n",
        "postTime": 1543750686,
        "uid": 72111,
        "name": "Maktub",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u56e0\u4e3a\u8fd9\u4e2a\u6811\u4e0d\u4f1a\u592a\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u4e2a\u7ed3\u6784\u53bb\u5b58\u50a8\u4ed6\u672c\u8eab\uff0c\u6307\u5411\u4ed6\u5de6\u513f\u5b50\u7684\u6307\u9488\u548c\u53f3\u513f\u5b50\u7684\u6307\u9488\uff0c\n\n\u9759\u6001\u7684\u5206\u914d\u597d\u5185\u5b58\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u4ed6\u662f\u4e00\u4e2a\u6ca1\u6709\u51fa\u73b0\u7684\u8282\u70b9\uff0c\u5c31\u628a\u8fd9\u4e2a\u8282\u70b9\u52a0\u5165\u5230\u6570\u7ec4tree\u4e2d\n\n\u5224\u65ad\u4ed6\u51fa\u73b0\u8fc7\u6ca1\uff0c\u6211\u7528\u4e86\u4e00\u4e2amap\uff0c\u5982\u679c\u8bf4\u4e00\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u6709\u2018\\*\u2019\uff0c\u5c31\u628a\u4ed6\u8d4b\u503c\u4e3aNULL\uff0c\n\n\u6bcf\u6b21\u904d\u5386\u65f6\uff0c\u5148\u8f93\u51fa\u6839\u8282\u70b9\uff0c\u5982\u679c\u6709\u513f\u5b50\u5c31\u8f93\u51fa\uff0c\u662f\u4e2a\u5178\u578b\u7684DFS\n\n\n\n\n\n\n\n\n    \n\n    \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node\n{\n    int num;\n    char data;//\u6570\u636e\n    node * left;//\u6307\u5411\u4ed6\u7684\u5de6\u513f\u5b50\n    node * right; //\u6307\u5411\u4ed6\u7684\u53f3\u513f\u5b50\n};\nnode tree[10001];\nint n;\nint top;\nmap<char,int>ma;//\u5b58\u50a8\u5f53\u524d\u7684\u8282\u70b9\u51fa\u73b0\u8fc7\u6ca1\nvoid qx(int i)\n{\n    cout<<tree[i].data;\n    if(tree[i].left!=NULL)\n    qx(tree[i].left->num);\n    if(tree[i].right!=NULL) \n    qx(tree[i].right->num);\n}\nint main(){\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        char a1,a2,a3;\n        cin>>a1>>a2>>a3;\n        if(ma.count(a1)==0)//\u5982\u679c\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u5c31\u7ed9\u4ed6\u4e00\u4e2a\u5728tree\u6570\u7ec4\u91cc\u7684\u7f16\u53f7\n        {\n            ++top;\n            ma[a1]=top;\n        }\n        if(ma.count(a2)==0&&a2!='*')\n        {\n            ++top;\n            ma[a2]=top;\n            tree[ma[a2]].num=ma[a2];\n        }\n        if(ma.count(a3)==0&&a3!='*')\n        {    ++top; \n            ma[a3]=top;\n            tree[ma[a3]].num=ma[a3];\n        } \n        tree[ma[a1]].data=a1;\n        tree[ma[a1]].num=ma[a1];\n        if(a2!='*')\n        tree[ma[a1]].left=&tree[ma[a2]];\n        else tree[ma[a1]].left=NULL;//\u5982\u679c\u4e3a\u2018*\u2019\uff0c\u4ee3\u8868\u6ca1\u6709\u5b50\u8282\u70b9\n        if(a3!='*')\n        tree[ma[a1]].right=&tree[ma[a3]];\n        else tree[ma[a1]].right=NULL;\n    }\n    qx(1); //\u524d\u5e8f\u904d\u5386\n}\n```",
        "postTime": 1508648656,
        "uid": 37408,
        "name": "Randyhoads",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "## \u8fd9\u9053\u9898\u96be\u7684\u5c31\u662f\u5982\u4f55\u5bfb\u627e\u6839\u8282\u70b9\n~~\u867d\u7136\u770b\u4e86\u770b\u4e00\u697c\u7684\u9898\u89e3\u597d\u50cf\u7b2c\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u6839\u8282\u70b9~~\n\n\u56e0\u4e3a\u6bcf\u4e2a\u8282\u70b9\u7684\u6570\u636e\u90fd\u662f\u5c0f\u5199\u5b57\u6bcda\u5230z\u4e2d\u7684\u4e00\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u6570\u7ec4\u4e0b\u6807\u8bb0\u5f55\u662f\u4ec0\u4e48\u5b57\u7b26\uff0c\u51cf\u5c11\u4e86\u904d\u5386\u6240\u6709\u5b57\u7b26\u6765\u5bfb\u627e\u513f\u5b50\u7684\u7e41\u7410\u6b65\u9aa4\n\n\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u80af\u5b9a\u4f1a\u6709\u4e24\u4e2a\u6307\u9488\u5206\u522b\u6307\u5411\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\n\n\u53ef\u662f\u5149\u51ed\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u8fd9\u4e24\u4e2a\u6307\u9488\u662f\u65e0\u6cd5\u786e\u5b9a\u8fd9\u4e2a\u8282\u70b9\u662f\u4e0d\u662f\u6839\u8282\u70b9\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u518d\u5b9a\u4e49\u4e00\u4e2a\u8282\u70b9father\u786e\u5b9a\u8fd9\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\n\n\u627e\u5230\u6839\u8282\u70b9\u540e\uff0c\u76f4\u63a5\u524d\u5e8f\u904d\u5386\u9012\u5f52\u8f93\u51fa\n\n\u5949\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\nusing namespace std;\nstruct node{\n    char l,r,father;\n}tree[30];//\u8282\u70b9\u7684\u7ed3\u6784\u4f53\nvoid preorder(char data){\n    cout<<data;//\u8f93\u51fa\u8fd9\u4e2a\u8282\u70b9\u7684\u6570\u636e\n    if(tree[data-97].l!='*') preorder(tree[data-97].l);//\u904d\u5386\u5de6\u5b50\u6811\n    if(tree[data-97].r!='*') preorder(tree[data-97].r);//\u904d\u5386\u53f3\u5b50\u6811\n}\nint main(){\n    int n;\n    cin>>n;\n    char root='*';//\u521d\u59cb\u5316\u6839\u8282\u70b9\n    for(int i=0;i<26;i++) tree[i].father='*';//\u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\n    for(int i=1;i<=n;i++)\n    {\n        char data,lc,rc;\n        cin>>data>>lc>>rc;//\u8f93\u5165XX\u8282\u70b9\u7684\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\n        if(root=='*') root=data;//\u5c06\u6839\u8282\u70b9\u8d4b\u503c\n        tree[data-97].l=lc;tree[data-97].r=rc;//\u8d4b\u503c\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\n        if(lc!='*') tree[lc-97].father=data;if(rc!='*') tree[rc-97].father=data;//\u5c06\u5de6\u53f3\u513f\u5b50\u8d4b\u503c\u7236\u4eb2\n    }\n    while(tree[root-97].father!='*') root=tree[root-97].father;//\u5bfb\u627e\u6839\u8282\u70b9\n    preorder(root);cout<<endl;//\u524d\u5e8f\u904d\u5386\u8f93\u51fa\n    return 0;\n}\n```",
        "postTime": 1542520547,
        "uid": 80679,
        "name": "Register",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4e5f\u53ef\u4ee5**\u4e0d\u7528\u6811\u6765\u505a**\u3002\u56e0\u4e3a\u662f**\u524d\u5e8f\u904d\u5386**\u3002\n\n\u8fd9\u91cc\u5148\u8bf4\u660e\u4e00\u4e0b\uff0c\u6bcf\u884c\u4e09\u4e2a\u5b57\u6bcd\uff0c\u6211\u5728\u8fd9\u79f0\u4e09\u4e2a\u5b57\u6bcd\u5206\u522b\u53ebroot\uff0cleft\uff0cright\n\n\u6bd4\u5982abc\u610f\u601d\u662f\u8bf4\u5728\u8282\u70b9root\u4e3aa\u7684\u4f4d\u7f6e\uff0c\u5f80\u5176\u5de6\u8fb9left\u63d2\u5165b\uff0c\u53f3\u8fb9\u63d2\u5165c\n\n\u63a5\u4e0b\u6765\u4ee5\u6837\u4f8b\u6765\u4e3e\u4f8b\uff1a\n\n\u7b2c\u4e00\u884c\uff1aabc - >\u6b64\u65f6\u524d\u5e8f\u904d\u5386\u4e3a\uff1aabc\n\n\u7b2c\u4e8c\u884c: bdi - >\u6b64\u65f6\u524d\u5e8f\u904d\u5386\u4e3a\uff1aabdic\n\n\u7b2c\u4e09\u884c\uff1acj* - >\u6b64\u65f6\u524d\u5e8f\u904d\u5386\u4e3a\uff1aabdicj\n\n...\n\n\u6709\u6ca1\u6709\u53d1\u73b0\u5176\u5b9e\u9664\u4e86\u7b2c\u4e00\u884c\uff0c\u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u5176\u5b9e\u53ea\u8981\u627e\u5230root\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5f80\u5176\u540e\u9762\u6dfb\u52a0left\u548cright\u5373\u53ef\n\n\u6bd4\u5982\u7b2c\u4e8c\u884c\uff0c\u6b64\u65f6\u7684\u524d\u5e8f\u904d\u5386\u4e3aabc\uff0c\u627e\u5230b\u540e\uff0c\u5f80b\u540e\u589e\u52a0d\u548ci\uff0c\u524d\u5e8f\u904d\u5386\u5c31\u53d8\u4e3aabdic\n\n\u518d\u6bd4\u5982\u7b2c\u4e09\u884c\uff0c\u6b64\u65f6\u524d\u5e8f\u904d\u5386\u4e3aabdic\uff0c\u627e\u5230\u70b9c\uff0c\u5f80c\u540e\u589e\u52a0j\uff0c\u524d\u5e8f\u904d\u5386\u53d8\u4e3aabdicj\n\n\u800c\u5b58\u50a8\u8fd9\u4e9b\u8fc7\u7a0b\u4e2d\u7684\u524d\u5e8f\u904d\u5386\u5c31\u662f\u4e00\u4e2a**\u94fe\u8868**\u3002\u56e0\u6b64\u4e0d\u7528\u521b\u5efa\u6811\u3002\n\n\u6709\u4eba\u53ef\u80fd\u5c31\u8981\u8bf4\u4e86\uff0c\u4e0d\u521b\u5efa\u6811\u4f46\u662f\u8981\u521b\u5efa\u94fe\u8868\u554a\uff01\n\n\u5bf9\u4e0d\u8d77\u6211\u7528\u7684\u662fpython\uff08\u9003\u3002\u3002\u3002\uff09\n\n\u4ee5\u4e0b\u662fpython\u4ee3\u7801\n\n```python\nnum = int(input().strip())\nres = []\nfor i in range(num):\n\troot,left,right = [i for i in input().strip()]\n\tif root in res:\n\t\tindex = res.index(root)\n\telse:\n\t\t# \u7b2c\u4e00\u884c\u521a\u5f00\u59cb\u7684\u65f6\u5019\uff0cres\u662f\u7a7a\u7684\uff0c\u6240\u4ee5\u8981\u5355\u72ec\u5904\u7406\n\t\tif root != '*':\n\t\t\tres.append(root)\n\t\tif left != '*':\n\t\t\tres.append(left)\n\t\tif right != '*':\n\t\t\tres.append(right)\n\t\tcontinue\n\t# \u5148\u53f3\u540e\u5de6\uff0c\u5982\u679c\u5148\u5de6\u540e\u53f3\uff0c\u53f3\u7684\u63d2\u5165\u4f4d\u7f6e\u8981\u53d8\u5316\n\tif right != '*':\n\t\tres.insert(index+1,right)\n\tif left != '*':\n\t\tres.insert(index+1,left)\nprint(\"\".join(res))\n```\n\u8fd9\u91ccinsert\u65b9\u6cd5\u53ef\u4ee5\u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff0c\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5728java\u7684linkedlist\u4e5f\u6709\u3002\n\n\u53e6\u5916\u6709\u4e2a\u5751\u5728\u4e8e\u5f55\u5165\u7684\u65f6\u5019**\u4e00\u5b9a\u8981\u53bb\u9664\u4e24\u7aef\u7684\u7a7a\u683c**\uff01\uff01\uff01\u8840\u7684\u6559\u8bad",
        "postTime": 1577944473,
        "uid": 300681,
        "name": "Jezemy",
        "ccfLevel": 0,
        "title": "P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011Python\u9898\u89e3"
    },
    {
        "content": "# P1305 \u65b0\u4e8c\u53c9\u6811 \u9898\u89e3\n\u5f88\u6c34\u7684\u4e00\u9053\u4e8c\u53c9\u6811\u7684\u9898\u3002\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u771f\u6b63\u5229\u7528\u5728\u7a0b\u5e8f\u4e2d\u6784\u9020\u4e8c\u53c9\u6811\u8fdb\u884c\u6c42\u89e3\u7684\u601d\u8def\uff0c\u800c\u662f\u5229\u7528\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff0c\u627e\u51fa\u89c4\u5f8b\uff0c\u4ece\u800c\u5f97\u51fa\u7ed3\u679c\u3002\n\n\u9996\u5148\u8ba9\u6211\u4eec\u770b\u5230\u9898\u76ee\uff1a\n## \u9898\u76ee\u63cf\u8ff0\n**\u8f93\u5165\u4e00\u4e32\u4e8c\u53c9\u6811\uff0c\u7528\u904d\u5386\u524d\u5e8f\u6253\u51fa\u3002**\n\n\u4e00\u770b\u8fd9\u4e2a\u9898\u76ee\uff0c\u4f3c\u4e4e\u8fd8\u65e0\u6cd5\u5f97\u51fa\u4e00\u4e2a\u89c4\u5f8b\u3002\u4e0d\u8fc7\u6211\u4eec\u4ea7\u751f\u4e86\u95ee\u9898\uff1a\u5982\u4f55\u8f93\u5165\u8fd9\u4e00\u4e32\u4e8c\u53c9\u6811\uff1f\n\n## \u8f93\u5165\u683c\u5f0f\n**\u7b2c\u4e00\u884c\u4e3a\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570**$n$\u3002$(n\u226426)$\u3002\n\n**\u540e\u9762n\u884c\uff0c\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u4e3a\u8282\u70b9\uff0c\u540e\u4e24\u4e2a\u5b57\u6bcd\u5206\u522b\u4e3a\u5176\u5de6\u53f3\u513f\u5b50\u3002**\n\n**\u7a7a\u8282\u70b9\u7528\u661f\u53f7\u8868\u793a\u3002**\n\n\u8fd9\u6837\u4f3c\u4e4e\u5c31\u660e\u4e86\u4e86\uff1a\u4e8c\u53c9\u6811\u597d\u50cf\u662f\u901a\u8fc7\u8fd9\u51e0\u79cd\u5f62\u5f0f\u8f93\u5165\u7684\uff1a\n\n- \u7236\u4eb2 \u5de6\u513f\u5b50 \u53f3\u513f\u5b50\n- \u7236\u4eb2 \u513f\u5b50 \u661f\u53f7\n- \u7236\u4eb2 \u661f\u53f7 \u661f\u53f7\n\n## \u8f93\u51fa\u683c\u5f0f\n**\u524d\u5e8f\u6392\u5217\u7684\u4e8c\u53c9\u6811\u3002**\n\n\u65e2\u7136\u8981\u6c42\u8fd9\u6837\u8f93\u51fa\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5bfb\u627e\u4e00\u4e0b\u524d\u5e8f\u6392\u5217\u7684\u89c4\u5f8b\uff1a\n\n\u5728\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u68f5\u6811\u957f\u8fd9\u6837\uff1a\n![1](https://s2.ax1x.com/2019/08/22/mwEKi9.png)\n\n\u5b83\u7684\u524d\u5e8f\u6392\u5217\u81ea\u7136\u662f\u8fd9\u6837\uff1a ` A ` \n\n\u5982\u679c\u6709\u4e86\u4e24\u4e2a\u8282\u70b9\uff0c\u5219\u4f1a\u53d8\u6210\u8fd9\u6837\uff1a\n\n![2](https://s2.ax1x.com/2019/08/22/mwEma4.png)\n\n\u524d\u5e8f\u6392\u5217\u4e3a\uff1a ` AB `\n\n\u6709\u4e86\u4e09\u4e2a\u8282\u70b9\uff0c\u4f1a\u53d8\u6210\u8fd9\u6837\uff1a\n\n![3](https://s2.ax1x.com/2019/08/22/mwEnIJ.png)\n\n\u524d\u5e8f\u6392\u5217\u4e3a\uff1a ` ABC `\n\n\u4f3c\u4e4e\u8fd8\u6ca1\u6709\u770b\u51fa\u4ec0\u4e48\u7aef\u502a\u3002\u4e0d\u8fc7\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u5411\u4e0b\u53d1\u5c55\u8fd9\u68f5\u4e8c\u53c9\u6811\uff1a\n\n![4](https://s2.ax1x.com/2019/08/22/mwEeZF.png)\n\n\u524d\u5e8f\u6392\u5217\uff1a ` ABDC `\n\n\u7b49\u7b49\uff0c\u600e\u4e48\u2026\u2026\u987a\u5e8f\u53d1\u751f\u4e86\u4e00\u4e9b\u53d8\u5316\uff1f\u4e0d\u518d\u662f\u4f9d\u5b57\u6bcd\u8868\u987a\u5e8f\u6392\u5217\u4e86\uff1f\n\n\u518d\u6765\uff01\n\n![5](https://s2.ax1x.com/2019/08/22/mwEMGR.png)\n\n\u524d\u5e8f\u6392\u5217\uff1a ` ABDEC `\n\n\u539f\u6765\u89c4\u5f8b\u662f\u8fd9\u6837\uff01\n\n**\u6bcf\u6b21\u7b2c\u4e00\u4e2a\u8f93\u5165\u7684\u5e8f\u5217\uff08\u6839\u8282\u70b9\u53ca\u5176\u5b50\u8282\u70b9\uff09 \u76f4\u63a5\u88ab\u52a0\u5165\u524d\u5e8f\u4e2d\uff1b**\n\n**\u540e\u7eed\u6709\u4e24\u79cd\u513f\u5b50\u7684\uff0c\u5219\u5ffd\u7565 \u201c \u661f\u53f7 \u201d \u5b57\u7b26\uff0c\u5c06\u5de6\u513f\u5b50\u63d2\u5165\u5e8f\u5217\u4e2d\u5176\u7236\u4eb2\u8282\u70b9\u540e\u7684\u4e00\u4f4d\uff0c\u5c06\u53f3\u513f\u5b50\u63d2\u5165\u5e8f\u5217\u4e2d\u5176\u5de6\u513f\u5b50\u8282\u70b9\u7684\u540e\u4e00\u4f4d\u3002**\n\n**\u4ec5\u6709\u4e00\u79cd\u513f\u5b50\u7684\uff08\u8868\u73b0\u5f62\u5f0f\u4e3a \u7236\u4eb2 \u513f\u5b50 \u661f\u53f7 \uff09\uff0c\u5c31\u7b80\u5355\u5c06\u5176\u513f\u5b50\u63d2\u5165\u7236\u4eb2\u8282\u70b9\u7684\u540e\u4e00\u4f4d\u5373\u53ef\u3002**\n\n**\u627e\u5230\u7236\u4eb2\u8282\u70b9\u6216\u5de6\u513f\u5b50\u7684\u65b9\u6cd5\u5f88\u7b80\u5355\uff1a\u901a\u8fc7 ` string ` \u7c7b\u7684\u8fd9\u4e2a\u6210\u5458\u51fd\u6570\u5373\u53ef\u5b8c\u6210\uff1a**\n```cpp\nint find(string s);\n```\n\u8fd9\u4e2a\u6210\u5458\u51fd\u6570\u7684\u4f5c\u7528\u662f**\u8fd4\u56de\u5b50\u5b57\u7b26\u4e32s\u5728\u539f\u4e32\u4e2d\u7684\u4f4d\u7f6e**\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u5219\u8fd4\u56de\uff1a\n```cpp\nstring::npos\n```\n\u8fd9\u4e2a\u5e38\u91cf\u3002\uff08\u8fd9\u4e2a\u5e38\u91cf\u5728\u4e0d\u540c\u7684\u7f16\u8bd1\u5668\u4e2d\uff0c\u6709\u4e0d\u540c\u7684\u503c\uff0c\u867d\u7136\u6709\u4e9b\u65f6\u5019\u662f -1 \uff0c\u4f46\u662f\u53ef\u80fd\u5176\u4ed6\u65f6\u5019\u4f1a\u51fa\u5dee\u9519\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u5199-1\uff0c\u800c\u5199\u8fd9\u4e2a\u5e38\u91cf\u66f4\u4e3a\u4fdd\u9669\u3002\uff09\n\n\u7136\u540e\uff0c\u6211\u4eec\u518d\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u91cc\u9762\u7684\u53e6\u4e00\u4e2a\u51fd\u6570 ` insert ` \u5411\u6307\u5b9a\u7684\u4f4d\u7f6e\u63d2\u5165\u4ee3\u8868\u5b50\u8282\u70b9\u7684\u5b57\u7b26\uff1a\n```cpp\nvoid insert(int position,int length,string s);\n```\n\u5b83\u7684\u4f5c\u7528\u662f **\u4ece\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2cposition\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u63d2\u5165length\u4e2a\u5b57\u7b26\uff0c\u8fd9\u4e9b\u5b57\u7b26\u6765\u6e90\u4e8es** \u3002 \n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u8fd9\u9898\u7684\u4ee3\u7801\uff01\n\n### \u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstring t;\nint n;\nstring s;\nint main(){\n\tcin>>n;\n\tfor(int i=0;i<n;i++){\n\t\tcin>>s;\n\t\tif(t.find(s[0])==string::npos){t=s;continue;}\n\t\tif(s[1]!='*') t.insert(t.find(s[0])+1,1,s[1]);\n\t\tif(s[2]!='*') t.insert(t.find(s[1])+1,1,s[2]);\n\t}\n\tcout<<t<<endl;\n}\n```\n##### \u4f60\u89c9\u5f97\u4e00\u6b21\u5c31\u80fdAC\u4e86\uff1f\n#### \u5e76\u4e0d\u662f\uff01\n### \u5b9e\u9645\u4e0a\uff01\n## \u8fd9\u4e2a\u53ea\u670920\u5206\uff01\uff01\uff01\n![x1](https://s2.ax1x.com/2019/08/22/mwmhAU.png)\n\u4e3a\u4ec0\u4e48\uff1f\u4e3a\u4ec0\u4e48\u53ea\u670920\u5206\uff1f\n\n\u5f88\u7b80\u5355\u3002\u4e0b\u8f7d\u6570\u636e\u540e\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u662f\u56e0\u4e3a\u8fd9\u4efd\u4ee3\u7801\u6ca1\u6709\u8003\u8651\u5230\u8fd9\u79cd\u6570\u636e\u7684\u5b58\u5728\uff1a\n\n**\u201c\u6307\u793a\u6839\u8282\u70b9\u53ca\u5176\u5b50\u8282\u70b9\u7684\u7b2c\u4e00\u884c\u5c31\u542b\u661f\u53f7 \uff01\uff01\uff01\u201d**\n\n\u8fd9\u79cd\u6570\u636e\u4f1a\u5e26\u6765\u4ec0\u4e48\u5f71\u54cd\uff1f\n\n**\u4f60\u7684\u7a0b\u5e8f\u5c06\u628a\u201c \u661f\u53f7 \u201d\u5f53\u4f5c\u4e00\u79cd\u5b50\u8282\u70b9\uff01\uff01\uff01**\n\n\u4e8e\u662f\uff0c\u4e4b\u540e\u7684\u8f93\u51fa\u5c31\u5b8c\u5168\u6df7\u4e71\u4e86\u3002\u6bd5\u7adf\uff0c\u7531\u4e8e\u7b2c\u4e00\u884c\u662f\u7279\u5224\u5168\u90e8\u8f93\u5165\uff0c\u201c \u661f\u53f7 \u201d\u8fd9\u6837\u7684\u9b3c\u4e1c\u897f\u90fd\u88ab\u63d2\u8fdb\u4e86\u5b57\u7b26\u4e32\u91cc\u9762\u3002\n\n\u4e0d\u8fc7\u8fd9\u6837\u4e00\u6765\uff0c\u4f60\u5c31\u627e\u5230\u4e86\u4fee\u6539\u7684\u601d\u8def\uff1a\n\n\u4f7f\u7528 ` string ` \u7c7b\u7684\u8fd9\u4e2a\u6210\u5458\u51fd\u6570\uff1a ` erase ` \uff01\n```cpp\nvoid erase(string::iterator start,string::iterator end);\n```\n\u76f4\u63a5\u8fd0\u7528\u5b83\uff0c\u4ea7\u751f\u7684\u4f5c\u7528\u5176\u5b9e\u662f\u6d88\u9664**\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u6bb5\u8fde\u7eed\u7684\u957f\u5ea6**\u3002\u90a3\u4e48\u600e\u4e48\u8fbe\u5230\u6d88\u9664**\u5168\u90e8\u6307\u5b9a\u5b57\u7b26**\uff08\u6b64\u5904\u4e3a\u6807\u660e\u4e86\u6839\u8282\u70b9\u53ca\u5176\u513f\u5b50\u7684\u5b57\u7b26\u4e32\u4e2d\u7684 \u201c * \u201d \uff09\u5462\uff1f\n\n\u4f7f\u7528 ` algorithm ` \u5e93\u4e2d\u7684 ` remove ` \u51fd\u6570\uff01\n```cpp\niterator remove(iterator start,iterator end,auto c);\n```\n\u6709\u4e86\u8fd9\u4e2a\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u4e0d\u65ad\u5730\u6e05\u9664\u5b57\u7b26\u4e32\u4e2d\u7684\u76ee\u6807\u5b57\u7b26\uff0c\u5e76\u4e0d\u65ad\u8fd4\u56de\u6307\u5411\u5176\u672a\u88ab\u5220\u9664\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u4ece\u800c\u4f7f\u7528erase\u51fd\u6570\u6e05\u9664\u5b83\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u7528\u4e8e**\u6e05\u9664\u4e00\u6bb5\u5b57\u7b26\u4e32\u4e2d\u5168\u90e8\u6307\u5b9a\u5b57\u7b26**\u7684\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\nerase(remove(string::iterator start,string::iterator end,char c),string::iterator end);\n```\n\u90a3\u4e48\uff0c\u65b0\u7684\u4ee3\u7801\u4e5f\u547c\u4e4b\u6b32\u51fa\u4e86\uff01\n\n### \u65b0\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstring t;\nint n;\nstring s;\nint main(){\n\tcin>>n;\n\tfor(int i=0;i<n;i++){\n\t\tcin>>s;\n\t\tif(t.find(s[0])==string::npos){\n\t\t\ts.erase(remove(s.begin(),s.end(),'*'),s.end());\n\t\t\tt=s;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[1]!='*') t.insert(t.find(s[0])+1,1,s[1]);\n\t\tif(s[2]!='*') t.insert(t.find(s[1])+1,1,s[2]);\n\t}\n\tcout<<t<<endl;\n}\n```\n##### \u4f60\u53c8\u89c9\u5f97\u8fd9\u6b21\u5c31\u80fdAC\u4e86\uff1f\n#### \u5e76\u4e0d\u662f\uff01\n### \u5176\u5b9e\uff01\n## \u8fd9\u4e2a\u53ea\u670930\u5206\uff01\uff01\uff01\n![x2](https://s2.ax1x.com/2019/08/22/mwm4NF.png)\n\n~~\u624d\u591a\u8fc7\u4e86\u4e00\u4e2a\u70b9\u554a\u2026\u2026~~\n\n\u8fd9\u6b21\u53c8\u662f\u4e3a\u4ec0\u4e48\uff1f\uff1f\uff01\n\n\u4e0b\u8f7d\u6570\u636e\u540e\u53d1\u73b0\uff0c\u8fd9\u6b21\u662f\u683d\u5728\u4e86\u4e00\u79cd\u4e4b\u524d**\u4ece\u672a\u8003\u8651\u5230\u7684\u8f93\u5165\u60c5\u51b5**\u4e0a\u3002\n\n\u8fd9\u6b21\u5bfc\u81f4\u51fa\u9519\u7684\u8f93\u5165\u6570\u636e\u4e3a\uff1a\n\n- \u7236\u4eb2 \u661f\u53f7 \u513f\u5b50\n\n\u2026\u2026\n\n~~\u8fd9\u4e5f\u592a\u5751\u4e86\u5427~~\n\n\u6211\u4eec\u4e3a\u4e86AC\u6b64\u9898\uff0c\u53ea\u80fd\u7ee7\u7eed\u52aa\u529b\u4e86\u2026\u2026\n\n\u8fd9\u6b21\u66f4\u6539\u5e76\u4e0d\u9700\u8981\u4ec0\u4e48\u65b0\u7684\u6280\u672f\uff0c\u53ea\u9700\u8981\u6dfb\u52a0\u51e0\u4e2a\u5224\u65ad\u5373\u53ef\u7ed5\u8fc7\u5927\u5751\u3002\n\n### \u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstring t;\nint n;\nstring s;\nint main(){\n\tcin>>n;\n\tfor(int i=0;i<n;i++){\n\t\tcin>>s;\n\t\tif(t.find(s[0])==string::npos){\n\t\t\ts.erase(remove(s.begin(),s.end(),'*'),s.end());\n\t\t\tt=s;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[1]!='*'&&s[2]!='*'){\n\t\t\tt.insert(t.find(s[0])+1,1,s[1]);\n\t\t\tt.insert(t.find(s[1])+1,1,s[2]);\n\t\t}\n\t\tif(s[1]=='*'&&s[2]!='*'){\n\t\t\tt.insert(t.find(s[0])+1,1,s[2]);\n\t\t}\n\t\tif(s[1]!='*'&&s[2]=='*'){\n\t\t\tt.insert(t.find(s[0])+1,1,s[1]);\n\t\t}\n\t}\n\tcout<<t<<endl;\n}\n```\n\u770b\u7740\u5c4f\u5e55\u4e0a\u84dd\u8272\u65b9\u5757\u4e0a\u8f6c\u7740\u767d\u8272\u7684\u5708\u5708\uff0c\u4f60\u60f3\u5230\uff1a\u4e4b\u524d\uff08\u630720\u5206\u53d830\u5206\u90a3\u6b21\uff09\u505a\u4e86\u90a3\u4e48\u5927\u7684\u4fee\u6539\uff0c\u624d\u591a\u8fc7\u4e86\u4e00\u4e2a\u70b9\uff0c\u60f3\u5fc5\u8fd9\u4e2a\u7b97\u6cd5\u8fd8\u5b58\u5728\u5f88\u591a\u95ee\u9898\u5427\u2026\u2026\u96be\u4e0d\u6210\u8fd8\u5f97\u518d\u91cd\u5199\u51e0\u6b21\uff1f\uff1f\uff01\n\n\u7136\u540e\u2026\u2026\n\n![v](https://s2.ax1x.com/2019/08/22/mwK3hF.png)\n\n\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\n\n## \u8fc7\u4e86\uff1f\uff1f\uff01\u5c31\u8fc7\u4e86\uff1f\uff1f\uff1f\uff1f\uff1f\uff01\n\n\u5386\u7ecf\u5343\u8f9b\u4e07\u82e6\uff0c\u7ec8\u4e8e\u8fc7\u4e86\u554a\u2026\u2026~~\uff08\u63a5\u53d7\u73b0\u5b9e\uff09~~\n\n~~bilibili\u5e72\u676f\uff01\uff08\u597d\u50cf\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e0d\u5bf9\uff09~~",
        "postTime": 1566463864,
        "uid": 228845,
        "name": "Malachite",
        "ccfLevel": 3,
        "title": "P1305 \u65b0\u4e8c\u53c9\u6811 \u9898\u89e3"
    },
    {
        "content": "# \u65b9\u6cd5\u7b80\u8ff0\n\n\u867d\u7136\u4e0d\u7528\u5efa\u6811\uff0c\u6211\u8fd8\u662f\u5efa\u4e86\u4e00\u4e2a\uff0c\u7528\u7684\u662f\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\uff08\u6570\u7ec4\uff09\n\n```cpp\nchar tree[501];\n```\n\n# \u5934\u6587\u4ef6\n\n```cpp\n#include <iostream>\n#include <memory.h>\n#include <map>\nusing namespace std;\n```\n\n\u5176\u4e2dmemory.h\u662f\u4e3amemset\u505a\u51c6\u5907\u7684\uff08\u6211\u8bf4\u7684\u662fmemset\uff0c\u540e\u9762\u6ca1\u67090\uff01\u5f00\u4e2a\u73a9\u7b11\uff09\n\n# \u5efa\u6811\n\n```cpp\nchar tree[501];\nmap<char, int> k;\n\nmemset(tree, '*', 501);\nint n;\ncin>>n;\nchar a, b, c;\nfor(int i=0;i<n;i++)\n{\n    cin>>a>>b>>c;\n    if(!i)\n    {\n        tree[1] = a;\n        k[a] = 1;\n    }\n    k[b] = k[a] * 2;\n    tree[k[b]] = b;\n    k[c] = k[a] * 2 + 1;\n    tree[k[c]] = c;\n}\n```\n\nmemset\u884c\u7528\u4e8e\u7ed9tree\u8d4b\u503c\u3002\n\n> \u542c\u8bf4\u7b2c\u4e00\u884c\u5c31\u662f\u6709\u5173\u6839\u8282\u70b9\u7684\u4e00\u884c\n\nif\u884c\u7528\u4e8e\u5224\u65ad\u662f\u5426\u4e3a\u7b2c\u4e00\u884c\uff0c\u5c06\u6839\u8282\u70b9\u5199\u5165\u3002k\u7528\u4e8e\u5b58\u5b57\u7b26\u51fa\u73b0\u7684\u4e0b\u6807\u5730\u5740\uff0c\u65b9\u4fbf\u67e5\u8be2\u4e00\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\u3002\n\n# \u904d\u5386\n\n```cpp\nvoid DLR(int n)\n{\n    if(tree[n] == '*') return;\n    cout<<tree[n];\n    DLR(n*2);\n    DLR(n*2+1);\n}\n```\n\n\u8fd8\u8bb0\u5f97\u524d\u6587\u7684memset\u5417\uff1f\u8f93\u5165\u7684\u7a7a\u7ed3\u70b9\u7528```*```\u8868\u793a\uff0c\u6240\u4ee5\u65b9\u4fbf\u8d77\u89c1\u628a\u6811\u521d\u59cb\u5316\u6210```*```\u3002\u5982\u679c\u9047\u5230```*```\uff0c\u5219\u4ee3\u8868\u8be5\u7ed3\u70b9\u4e0d\u5b58\u5728\uff0c\u81ea\u7136\u5c31\u53ef\u4ee5\u9000\u51fa\u90a3\u4e2a\u7ed3\u70b9\u4e86\u3002\n\n\u6839\u636e\u524d\u5e8f\u904d\u5386\u7684\u5b9a\u4e49\uff0c\u5199\u51fa\u9012\u5f52\u51fd\u6570\u5373\u53ef\u3002\n\n# \u7a0b\u5e8f\n\n```cpp\n#include <iostream>\n#include <memory.h>\n#include <map>\nusing namespace std;\n\nchar tree[501];\nmap<char, int> k;\n\nvoid DLR(int n)\n{\n    if(tree[n] == '*') return;\n    cout<<tree[n];\n    DLR(n*2);\n    DLR(n*2+1);\n}\n\nint main()\n{\n    memset(tree, '*', 501);\n    int n;\n    cin>>n;\n    char a, b, c;\n    for(int i=0;i<n;i++)\n    {\n        cin>>a>>b>>c;\n        if(!i)\n        {\n            tree[1] = a;\n            k[a] = 1;\n        }\n        k[b] = k[a] * 2;\n        tree[k[b]] = b;\n        k[c] = k[a] * 2 + 1;\n        tree[k[c]] = c;\n    }\n    DLR(1);\n    return 0;\n}\n```",
        "postTime": 1558612560,
        "uid": 122461,
        "name": "rui_er",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "qwq\u611f\u89c9\u8fd9\u4e2a\u6570\u636e\u771f\u7684\u597d\u6c34\n\n\u7b2c\u4e00\u4e2a\u8f93\u5165\u7684\u603b\u662f\u6839\u8282\u70b9 \u6240\u4ee5\u8fd9\u4e2a\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u83ab\u540d\u6c34\u8fc7\u4e86\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n\n#define ll long long\n#define G ch=getchar()\n#define rd(x) x=qread()\n\nusing namespace std;\nconst int maxn = 205;\nchar ch;\nchar a,b,c;\nint n;\nstruct node\n{\n\tint right,left;\n}r[maxn];\ninline int qread()//qwq\u4e60\u60ef\n{\n\tint f=1,x=0;G;\n\twhile(!(ch>='0'&&ch<='9')){if(ch=='-')f=-1;G;}\n\twhile(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0';G;}\n\treturn f*x;\n}\nvoid print(int now)\n{\n\tif(now==(int)'*') return ;\n\tcout<<char(now); //\u8f93\u51fa\u5f53\u524d\u8282\u70b9\u7684\u503c\n\tprint(r[now].left);//\u8f93\u51fa\u5de6\u6811\n\tprint(r[now].right);//\u8f93\u51fa\u53f3\u6811\n}\nint main()\n{\n\tint k;\n\trd(n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>a>>b>>c;\n\t\tif(i==1) k=a;//\u7b2c\u4e00\u4e2a\u8f93\u5165\u7684\u603b\u662f\u6839\u8282\u70b9\n\t\tr[a].left=b;//\u5b58\u5de6\u8282\u70b9\u7684\u5730\u5740\n\t\tr[a].right=c;//\u5b58\u53f3\u8282\u70b9\u7684\u5730\u5740\n\t}\n\tprint(k);//\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u6253\u5370\n    return 0;\n}\n\n```",
        "postTime": 1540422390,
        "uid": 55617,
        "name": "zzsqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "### \u8fd9\u9898\u5f88\u6c34\n\u56e0\u4e3a\u662f\u6309\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u8f93\u5165\u4e8c\u53c9\u6811\u7684\uff0c\u800c\u6bcf\u7ec4\u5143\u7d20\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u6570\u90fd\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5de6\u5b50\u6811\uff0c\u7b2c\u4e09\u4e2a\u5143\u7d20\u5219\u662f\u53f3\u5b50\u6811\uff0c\u6240\u4ee5\u53ea\u8981\u4e0d\u505c\u7684\u5148\u627e\u4e00\u4e2a\u5143\u7d20\u7684\u5de6\u5b50\u6811\uff0c\u518d\u627e\u53f3\u5b50\u6811\u5c31\u53ef\u4ee5\u4e86\u3002\u76f4\u5230\u627e\u4e0d\u5230\u4e86\u5c31\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\u6bcf\u7ec4\u7684\u6700\u524d\u9762\u7684\u5143\u7d20\u3002\n\u8fd9\u5e94\u8be5\u662f\u633a\u77ed\u4e86\u7684\u3002\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nchar q[30][3]; //\u6a21\u62df\u8282\u70b9\nint a;\nvoid dfs(int sum)\n{\n\tcout<<q[sum][0];\n\tfor(int i=1;i<3;i++)   //\u5148\u627e\u5de6\u8fb9\uff0c\u518d\u627e\u53f3\u8fb9\n\t\tfor(int j=0;j<a;j++)//\u679a\u4e3e\uff0c\u56e0\u4e3a\u6570\u636e\u5f88\u5c0f\n\t\t\tif(q[sum][i]==q[j][0])\n\t\t\t\tdfs(j);    // \u7b80\u5355\u7684\u9012\u5f52\n}\nint main(){\n    cin>>a;\n    for(int i=0;i<a;i++) cin>>q[i];\n    dfs(0);\n    return 0;\n}\n```\n\n",
        "postTime": 1578292257,
        "uid": 91395,
        "name": "wz441135118",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u6811\u5f62\u6570\u636e\u7ed3\u6784\u7684\u9898\u600e\u4e48\u53ef\u4ee5\u6ca1\u6709\u56fe\u5462\uff1f\n\n\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u6837\u4f8b\u7ed9\u7684\u8fd9\u4e00\u68f5\u4e8c\u53c9\u6811\n\n![](https://cdn.luogu.com.cn/upload/pic/62188.png)\n\n\uff08\u8fd9\u91cc\u7528\u6709\u5411\u8fb9\u65b9\u4fbf\u7edf\u8ba1\u5165\u5ea6\uff09\n\n\u9898\u76ee\u8981\u6c42\u5148\u5e8f\u904d\u5386\uff0c\u9996\u5148\u8981\u77e5\u9053\uff0c\u5148\u5e8f\u904d\u5386\u662f\u6309\u7167  \u6839->\u5de6\u513f\u5b50->\u53f3\u513f\u5b50  \u7684\u987a\u5e8f\u904d\u5386\u8fd9\u68f5\u6811\n\n\u5f88\u660e\u663e\uff0c\u7b54\u6848\u662fa->b->d->i->c->j\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u4ece\u6811\u7684\u6839\u5f00\u59cb\u9012\u5f52\u6c42\u51fa\u8fd9\u4e2a\u987a\u5e8f\u5c31\u884c\u4e86\n\n\u7531\u4e8e\u6211\u4eec\u8bb0\u5f55\u7684\u662f\u6709\u5411\u8fb9\uff0c\u5e76\u4e14\u4ece\u7236\u4eb2\u6307\u5411\u513f\u5b50\uff0c\u6240\u4ee5\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\u5c31\u662f\u6574\u4e2a\u6811\u7684\u6839\n\n\u5177\u4f53\u7ec6\u8282\u89c1\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<string>\nusing namespace std;\nconst int N=30;\nint n;\nbool is[N];\n//n\u4e2a\u8282\u70b9\u5e76\u4e0d\u662f\u8fde\u7eed\u7684\uff0cis\u6570\u7ec4\u8bb0\u5f55\u54ea\u4e9b\u5b57\u6bcd\u51fa\u73b0\u8fc7\nint in[N];\n//\u7edf\u8ba1\u5165\u5ea6\nint son[N][2];\n//\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\nint root;\t\n//\u6574\u4e2a\u6811\u7684\u6839\nvoid search(int x){\n//\u6838\u5fc3\u4ee3\u7801\uff0c\u9012\u5f52\u8f93\u51fa\u5148\u5e8f\u904d\u5386\n\tputchar(x+'a'-1);\n\t//\u8f93\u51fa\u6839\n\tif(son[x][0]){\n\t\tsearch(son[x][0]);\n\t\t//\u9012\u5f52\u5de6\u513f\u5b50\n\t\t}\n\tif(son[x][1]){\n\t\tsearch(son[x][1]);\n\t\t//\u9012\u5f52\u53f3\u513f\u5b50\n\t\t}\t\n\t}\nint main(){\n\tcin>>n;\n\tstring s;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>s;\n\t\tint u=s[0]-'a'+1,v1=s[1]-'a'+1,v2=s[2]-'a'+1;\n\t\t//\u5b57\u6bcd\u8f6c\u6570\u5b57\u5b58\u50a8\n\t\tis[u]=1;\n\t\tif(s[1]!='*'){\n\t\t\t//\u5982\u679c\u6709\u5de6\u513f\u5b50\n\t\t\tis[v1]=1;\n\t\t\tson[u][0]=v1;\n\t\t\tin[v1]++;\n\t\t\t}\n\t\tif(s[2]!='*'){\n\t\t\tis[v2]=1;\n\t\t\tson[u][1]=v2;\n\t\t\tin[v2]++;\n\t\t\t}\t\n\t\t}\n\tfor(int i=1;i<=26;i++){\n\t\tif(is[i]&&!in[i]){\n\t\t\t//\u627e\u6839\uff0c\u627e\u5230\u540e\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\u5faa\u73af\n\t\t\troot=i;\n\t\t\tbreak;\n\t\t\t}\n\t\t}\n\tsearch(root);\t\n\t//\u9012\u5f52\n\treturn 0;\n\t}\n```\n\nGL~",
        "postTime": 1562293128,
        "uid": 178864,
        "name": "LordLeft",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "# \u9012\u5f52\u5b50\u7a0b\u5e8f\u9898\u89e3\uff08\u6700\u666e\u904d\u505a\u6cd5\uff09\n\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662f\u4e0d\u65ad\u9012\u5f52\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u9012\u5f52\u7a0b\u5e8f\u91cc\u6309\u7167**\u6839\u2014\u2014\u5de6\u2014\u2014\u53f3**\u7684\u987a\u5e8f\u5c55\u5f00\u9012\u5f52\u5c31\u53ef\u4ee5\u8fbd\uff01\uff01\uff01\n\n\u5949\u4e0aAC\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\nusing namespace std;\nchar a[1000];\nchar l[1000];\nchar r[1000];\nint i,j;\nvoid dfs(char x){\n\tint s;\n\tcout<<x;//\u76f4\u63a5\u8f93\u51fa\n\ts=x;//\u8fd9\u91cc\u662f\u6211\u7684\u4eae\u70b9\uff0c\u56e0\u4e3a\u4e0d\u60f3\u7528\u7ed3\u6784\u4f53\uff0c\u76f4\u63a5\u628aa[i]\u7684ASCLL\u7801\u5f53\u4f5c\u6570\u7ec4\u7684\u6307\u9488\n\tif(l[s]!='*')dfs(l[s]);//\u4e00\u5b9a\u8981\u5224\u65ad\u4e0d\u4e3a*\n\tif(r[s]!='*')dfs(r[s]);//\u5148\u5de6\u540e\u53f3\n\treturn;\n}\nint main(){\n\tint k,n,s;\n\tcin>>n;\n\tfor(i=1;i<=n;i++){\n\t    cin>>a[i];\n\t\ts=a[i];//ASCLL\u7801\u5f53\u4f5c\u6570\u7ec4\u6307\u9488\uff0c\u6bd4\u8f83\u901a\u4fd7\u6613\u61c2\u5427\uff1f\n\t\tcin>>l[s]>>r[s];\n\t}\n\tdfs(a[1]);\n}\n```",
        "postTime": 1549594210,
        "uid": 133986,
        "name": "judgejudge",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "p\u515a\u7684\u597d\u5c11\uff0c\u6211\u6765\u4e00\u4e2a\u9898\u89e3\u5427\u3002\n\n\u6211\u548c\u522b\u4eba\u4e0d\u4e00\u6837\uff0c\u6211\u662f\u5148\u6784\u6811\uff0c\u518d\u5229\u7528\u6811\u7684\u524d\u5e8f\u904d\u5386\u7279\u70b9\u6765\u6df1\u641c\u8f93\u51fa\u3002\n\n\u6211\u4eec\u5148\u5f00\u4fe9\u4e2a\u6570\u7ec4\uff0c\u6765\u50a8\u5b58\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u4e0e\u53f3\u5b69\u5b50\u3002\n\n\u867d\u7136\u8fd9\u9053\u9898\u7b2c\u4e00\u4e2a\u8f93\u5165\u5fc5\u662f\u6839\u8282\u70b9\uff0c\u4f46\u662f\u6211\u8fd9\u4e2a\u7b97\u6cd5\u4e5f\u53ef\u4ee5\u5224\u65ad\u4e0d\u662f\u6839\u8282\u70b9\u7684\u60c5\u51b5\u3002\n\n\n\n\n\n\n```cpp\nvar\na,i,j:longint;\nx:string;\nw:char;\nleft,right:array['a'..'z'] of char;         //\u5de6\uff0c\u53f3\u5b69\u5b50\u6570\u7ec4\nv,n:array['a'..'z'] of boolean;        //\u5224\u65ad\u6570\u7ec4\nprocedure dfs(z:char);          //\u6df1\u641c\u8f93\u51fa\nbegin\n  if z='*' then exit;      //     \u5230\u53f6\u8282\u70b9\u7ed3\u675f\n  write(z);\n  dfs(left[z]);        //  \u641c\u5de6\u5b50\u6811\n  dfs(right[z]);     //\u641c\u53f3\u5b50\u6811\nend;\nbegin\n  readln(a);\n  for i:=1 to a do\n  begin\n    readln(x);\n    for j:=1 to 3 do\n    if x[j]<>'*' then v[x[j]]:=true;\n    if x[2]<>'*' then n[x[2]]:=true;\n    if x[3]<>'*' then n[x[3]]:=true;          //\u6ce8\u610f\uff0c\u628a\u4e3a''*''\u7684\u60c5\u51b5\u53bb\u6389\uff0c\u4e0d\u7136\u6570\u7ec4\u4f1a\u51fa\u9519\n    left[x[1]]:=x[2];\n    right[x[1]]:=x[3];\n  end;\n  for w:='a' to 'z' do\n  if (v[w]) and (n[w]=false) then dfs(w);       //\u56e0\u4e3a\u6839\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\uff0c\u6240\u4ee5\u53ef\u4ee5\u653e\u5fc3\u8f93\u51fa\nend.\n```\n\u5c31\u600e\u4e48\u7b80\u5355\u3002\n\u6284\u88ad\u53ef\u803b\uff0c\u7406\u89e3\u81f3\u4e0a\n",
        "postTime": 1504944224,
        "uid": 32894,
        "name": "SKTT1Faker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u5148\u8bfb\u5165\uff0c\u518d\u7528dfs\u6765\u4e00\u6b65\u4e00\u6b65\u5224\u5b9a\uff0c\u4e00\u6b65\u4e00\u6b65\u8d70\u3002\n\n\u6ce8\u610f\uff1a\u8bfb\u5165\u7528long long\uff0c\u4e0d\u7528int!\uff08\u4e0d\u7136\u4f1a\u7206\uff01\uff09\n\n\u6bcf\u4e00\u6b65\u8d70\u4e00\u4e0b\u5373\u53ef\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n    #include <bits/stdc++.h>\n    using namespace std;\n    string a[10001];\n    long long n;\n    void dfs(char x)\n    {\n        printf(\"%c\",x);\n        for(long long i=1;i<=n;i++)\n        {\n            if(a[i][0]==x)\n            {\n                break;\n            }\n        }\n        for(long long j=1;j<3;j++)\n        {\n            if(a[i][j]!='*')\n            {\n                dfs(a[i][j]);\n            }\n        }\n    }\n    int main()\n    {\n        scanf(\"%lld\",&n);\n        for(long long i=1;i<=n;i++)\n        {\n            scanf(\"%s\",a);\n        }\n        dfs(a[1][0]);\n        return 0;\n}\n```",
        "postTime": 1514385987,
        "uid": 61096,
        "name": "\u6838\u5f39\u5934AC",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "# \u5185\u5b58\u7ba1\u7406\u6a21\u5f0f\n\n## \u867d\u7136\u7b97\u6cd5\u5df2\u7136\u8001\u5957\uff0c\u4f46\u5199\u4e00\u4e2a\u5bf9\u673a\u5668\u53cb\u597d\u7684\u6307\u9488\u7a0b\u5e8f\uff0c\u5f88\u6709\u5fc5\u8981\uff01\uff01\uff01\n\n\u4e3b\u8981\u65b9\u5f0f\uff1a\u4f7f\u7528 node \\* occuredlist[ ] \u6570\u7ec4\u7ba1\u7406\u7533\u8bf7\u7684\u5185\u5b58\uff0c \u800c node \\* \u6307\u9488\u7ba1\u7406\u7740\u8282\u70b9\u3002\n\n\u5efa\u6811\u4ee5\u540e\u5c31\u53ef\u4ee5 dfs \u4e86\u3002\n\n\u8d34\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nstruct node                                                 //\u5b58\u8d2e\u8282\u70b9\n{\n        node * left;                                              //\u5de6\u53f3\u513f\u5b50\n        node * right;\n        char val;\n        node(): left(NULL), right(NULL), val('0'){}   //\u9ed8\u8ba4\u6784\u9020\uff0c\u4ee5\u4fbf\u5224\u65ad\n};\n\nnode * occuredlist[100];                              //\u5185\u5b58\u6c60\nint lenth(0);                                                 //\u8282\u70b9\u6570\n\nvoid dfs(node * father)                                //\u5148\u5e8f\u904d\u5386\n{\n            cout << father->val;\n            if (father->left != NULL && father->left->val != 0) dfs(father->left);\n            if (father->right != NULL && father->right->val != 0) dfs(father->right);\n}\n\nint main()\n{\n            for (int i(0); i < 100; ++i)\n                        occuredlist[i] = NULL;\n            int sum, root(-1);\n            cin >> sum;\n            for (int i(0); i < sum; ++i)\n            {\n                        int pos(-1), left_son(-1), right_son(-1);\n                        char a[4];\n                        cin >> a;\n                        for (int j(0); j < 100; ++j)\n                                    if (occuredlist[j] != NULL && occuredlist[j]->val == a[0]) pos = j;\n                                    else if (occuredlist[j] == NULL) break;\n                        if (a[1] != '*')\n                        {\n                                    occuredlist[lenth] = new node;\n                                    occuredlist[lenth]->val = a[1];\n                                    left_son = lenth;\n                                    ++lenth;\n                        }\n                        if (a[2] != '*')\n                        {\n                                    occuredlist[lenth] = new node;\n                                    occuredlist[lenth]->val = a[2];\n                                    right_son = lenth;\n                                    ++lenth;\n                        }\n                        if (pos == -1)\n                        {\n                                    occuredlist[lenth] = new node;\n                                    occuredlist[lenth]->val = a[0];\n                                    if (left_son != -1) occuredlist[lenth]->left = occuredlist[left_son];\n                                    if (right_son != -1) occuredlist[lenth]->right = occuredlist[right_son];\n                                    if (i == 0) root = lenth;\n                                    ++lenth;\n                             }else\n                            {\n                                    if (left_son != -1) occuredlist[pos]->left = occuredlist[left_son];\n                                    if (right_son != -1) occuredlist[pos]->right = occuredlist[right_son];\n                        }\n            }\n            dfs(occuredlist[root]);\n            for (int i(0); i < 100; ++i)\n            {\n                        if (occuredlist[i] == NULL) break;\n                        delete occuredlist[i];\n            }\n            return 0;\n}\n```",
        "postTime": 1493805057,
        "uid": 32647,
        "name": "JamesHen",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u672c\u4eba\u7528map\u89e3\u51b3\u7684\u8fd9\u4e2a\u6c34\u9898\u3002\u3002\u3002\u3002\u3002\u3002\n\n        \n    \n     \n```cpp\n//#include<iostream>\n//#include<cstdio>\n//#include<map>      \nusing namespace std;       //\u8fd9\u4e2a\u4e0d\u7528\u8bf4\u5427\u3002\u3002\u3002\u3002\nstring k;\nmap<char,char> l,r;      //\u5b9a\u4e49map\nvoid ch(char o)          //\u7528\u4e8e\u8f93\u51fa\u5148\u5e8f\u7684\u51fd\u6570\uff08\u9012\u5f52\uff09\n{\n    cout<<o;\n    if(l[o]=='*')           //\u5224\u65ad\u662f\u5426\u6709\u5b50\u8282\u70b9\uff0c\uff1b~~~\u5de6\u4e00\u6b21~~~\uff0c~~~\u53f3\u4e00\u6b21~~~\uff0c~~~\u53d1\u73b0\u8282\u70b9\u5c31\u641c\u641c~~~        \uff1b###\u5566\u5566\u5566###\n    if(r[o]=='*')\n    return;\n    else\n    ch(r[o]);\n    else\n    {\n    ch(l[o]);\n    if(r[o]!='*')\n    ch(r[o]);\n    }\n}\nint main()\n{\n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++)\n    {\n        string s;\n        cin>>s;\n        l[s[0]]=s[1];                 //\u5b58\u8282\u70b9\u53ca\u8fde\u63a5\u5230\u5b50\u8282\u70b9\uff1b\n        r[s[0]]=s[2];\n        k[i]=s[0];\n    }\n    for(int i=0;i<n;i++)               //\u627eroot\uff1b\n    {\n        int j=0,o=0;\n        while(j<n)\n        {\n            if(k[i]==l[k[j]]||k[i]==r[k[j]])\n            {\n                o=1;\n                break;\n            }\n            j++;\n        }\n        if(o==0)\n        {\n            ch(k[i]);\n            break;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1466342687,
        "uid": 18180,
        "name": "whrx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4f3c\u4e4e\u7531\u4e8e\u6570\u636e\u592a\u6c34\u7684\u7f18\u6545\uff0c\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u59cb\u7ec8\u662f\u6839\u8282\u70b9\u2026\u2026  \n\u800c\u4e14\u5b57\u6bcd\u5168\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u2026\u2026  \n~~\u5f88\u591a\u9898\u89e3\u90fd\u662f\u9762\u5411\u6570\u636e\u7f16\u7a0b~~  \n\u5982\u679c\u9996\u5b57\u6bcd\u4e0d\u662f\u6839\u7684\u8bdd\uff0c\u9700\u8981\u52a0\u5165\u4e00\u4e2a\u627e\u6839\u7684\u6b65\u9aa4\u3002  \n\u627e\u6839\u76f4\u63a5\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u662f\u5426\u6709\u7236\u4eb2\u5373\u53ef\u3002  \n\u7528hasfa\u6570\u7ec4\u8bb0\u5f55\u662f\u5426\u6709\u7236\u4eb2\uff0c\u7528exist\u6570\u7ec4\u8bb0\u5f55\u662f\u5426\u6709\u8fd9\u4e2a\u5b57\u6bcd\u51fa\u73b0\u8fc7\uff0c\u6700\u540e\u904d\u5386\u4e00\u904d\u627e\u5230\u51fa\u73b0\u8fc7\u5374\u6ca1\u7236\u4eb2\u7684\u5b57\u6bcd\u5c31\u662f\u6839\u3002  \n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u76f4\u63a5\u5f00\u4e86256\u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u8ddf\u7528map\u5dee\u4e0d\u591a\u5427\u3002  \n\u81ea\u5df1\u9020\u4e86\u4e00\u7ec4\u6570\u636e\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u8dd1\u4e00\u4e0b\uff1a  \n\n![Example](https://cdn.luogu.com.cn/upload/image_hosting/btsu3z0j.png)\n## input\n```\n5\nc**\nDBe\nAcD\nB**\ne**\n```\n## output\n```\nAcDBe  \n```\n# Code\n```cpp\n#include <cstdio>\nusing namespace std;\nbool hasfa[256],exist[256];\nint ls[256], rs[256];\nint n;\nvoid dfs(const int &now)\n{\n    if (now == '*')\n        return;\n    putchar(now);\n    dfs(ls[now]);\n    dfs(rs[now]);\n}\nchar a[5];\nint main()\n{\n    scanf(\"%d\", &n);\n    while (n--)\n    {\n        scanf(\"%s\", a + 1);\n        exist[a[1]] = exist[a[2]] = hasfa[a[2]] = exist[a[3]] = hasfa[a[3]] = true;\n        ls[a[1]] = a[2];\n        rs[a[1]] = a[3];\n    }\n    for (int i = 1;i <= 255; ++i)\n        if (exist[i] && !hasfa[i])\n        {\n            dfs(i);\n            return 0;\n        }\n}\n```",
        "postTime": 1576640567,
        "uid": 220159,
        "name": "Clouder",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u6211\u7684\u7b97\u6cd5\uff1a\u5475\u5475\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\n\n\u53cd\u6b63AC\u4e86\u3002\n\n\u6211\u662f\u7528\u4e24\u4e2a\u4e00\u7ef4\u6570\u7ec4\u5b58\u50a8\u6bcf\u4e2a\u70b9\u7684\u5de6\u5b69\u5b50\u7684\u7f16\u53f7\u4ee5\u53ca\u53f3\u5b69\u5b50\u7684\u7f16\u53f7\u3002\n\n\u770b\u5230\u6570\u636e\u90a3\u4e48\u5c0f\uff0c\u79d2AC\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nchar d[100001],dl[100001],dr[100000001];//\u8fd9\u4e2a\u5c31\u662f\u8f93\u5165\u7684\u5b57\u7b26\nint l[1000001],r[10000001];//\u8fd9\u4e2a\u662f\u7528\u6765\u5b58\u50a8\u5de6\u3001\u53f3\u5b69\u5b50\u7f16\u53f7\nint p[1000001];//\u8fd9\u4e2a\u6570\u7ec4\u662f\u7528\u6765\u5b58\u5b69\u5b50\u4e2a\u6570\nint prt(int u){//\u8f93\u51fa\u7684\u51fd\u6570\n\tint c;//c\u7528\u6765\u5728\u7f16\u53f7\u4e2d\u7a7f\u68ad\n\tcout<<d[u];//\u5148\u6839\uff0c\u5148\u8f93\u51fa\u6839\n\tif(dl[u]!='*')c=l[u],prt(c);//\u518d\u8f93\u51fa\u5de6\u5b69\u5b50\n\tif(dr[u]!='*')c=r[u],prt(c);//\u53f3\u5b69\u5b50\n\treturn 0;\n}\nint main(){\n\tint i,j,k,m,n;\n\tcin>>n;\n\tfor(i=1;i<=n;i++){\n\t\tcin>>d[i]>>dl[i]>>dr[i];\n\t\tp[i]=2;\n\t\tif(dl[i]=='*')p[i]--;\n\t\tif(dr[i]=='*')p[i]--;\n\t}//\u8f93\u5165\u6bd4\u8f83\u7b80\u5355\n\tfor(i=1;i<=n;i++){\n\t\tint t=0;\n\t\tfor(j=1;j<=n;j++)\n\t\t\tif(i!=j){//\u5faa\u73af\u679a\u4e3e\u67e5\u627e\u5de6\u3001\u53f3\u5b69\u5b50\u7684\u7f16\u53f7\n\t\t\t\tif(d[j]==dl[i]){\n\t\t\t\t\tl[i]=j;\n\t\t\t\t\tt++;\n\t\t\t\t}\n\t\t\t\tif(d[j]==dr[i]){\n\t\t\t\t\tr[i]=j;\n\t\t\t\t\tt++;\n\t\t\t\t}\n\t\t\t\tif(t==p[i])break;//\u4e2a\u6570\u8fbe\u5230\u5219\u9000\u51fa\u5faa\u73af\n\t\t\t}\n\t}\n\tprt(1);//\u5148\u6839\n\treturn 0;\n} \n```",
        "postTime": 1549243494,
        "uid": 114504,
        "name": "\u68a6\u91cc\u8c03\u97f3",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u611f\u89c9\u4e0b\u9762\u53d1\u7684\u90fd\u6bd4\u8f83\u590d\u6742\uff0c\u5c31\u6765\u4e2a\u7b80\u5355\u70b9\u7684\u3002\n\n\u56e0\u4e3a\u6c42\u5148\u5e8f\u904d\u5386\u7684\u65b9\u6cd5\u7c7b\u4f3c\u4e8e\u6df1\u641c\uff0c\u6240\u4ee5\u6253\u4e2a\u6df1\u641c\u5c31\u884c\u4e86\u3002\n\n\u4ece\u7b2c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u627e\uff0c\u627e\u5230\u8fd9\u4e2a\u8282\u70b9\u7684\u884c\uff0c\u5982\u679c\u6709\u5b50\u8282\u70b9\uff0c\u5c31\u7ee7\u7eed\u67e5\u627e\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstring a[10001];\nlong n;\nvoid pig(char x)\n{\n    cout<<x;   \n    long i,j;\n    for (i=1;i<=n;i++)\n        if (a[i][0] == x) break;  //\u627e\u6240\u5728\u884c\n    for (j=1;j<3;j++)\n        if (a[i][j] != '*') pig(a[i][j]);    //\u6df1\u641c\n}\nint main()\n{\n    long i,j,m,k;\n    cin>>n;\n    for (i=1;i<=n;i++)\n        cin>>a[i];\n    pig(a[1][0]);   //\u4ece\u6839\u8282\u70b9\u5f00\u59cb\n    while(1) //\u9632\u6284\u88ad\n    return 0;\n}\n```",
        "postTime": 1507296700,
        "uid": 27167,
        "name": "\u83dc\u5f1f\u5f1f\u5728\u6b64",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u80fd\u4e0d\u80fd\u518d\u6c34\u70b9\u3002\u4e24\u4e2a\u6d4b\u8bd5\u70b9--\u5fcd\u4e0d\u4f4f\u5410\u69fd\u3002\n\n\u8a00\u5f52\u6b63\u4f20\n\n\u5efa\u6811\u7684\u8bdd\u6211\u4eec\u7528\u5f53\u524d\u5b57\u7b26-\u20180\u2019\u5c31\u6765\u8868\u793a\u73b0\u5728\u5b57\u7b26\u7684\u7f16\u53f7-\n\n\u7136\u540e\u8bb0\u5f55\u4e0b\u5de6\u513f\u5b50\uff0c\u6709\u513f\u5b50\u3002\n\n\u56e0\u4e3a\u8fd9\u662f\u4e00\u68f5\u6811\uff0c\u6240\u4ee5\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u5982\u679c\u4e00\u4e2a\u70b9\u6ca1\u6709\u7236\u4eb2\u8282\u70b9\u7684\u8bdd\uff0c\u90a3\u4e48\u4ed6\u80af\u5b9a\u5c31\u662f\u6811\u6839\uff0c\u6240\u4ee5\u4ece\u8fd9\u91cc\u5f00\u59cb\u5148\u5e8f\u904d\u5386\uff0c\u8f93\u51fa\u7b54\u6848\u5c31\u597d\u4e86\uff01\n\n\nc++\u4ee3\u7801\u5982\u4e0b\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\nchar a[3];int n;\nstruct node\n{\n    int left,right,fa;\n    char a;\n}tree[10000];\nvoid add(char a,char b,char c)\n{\n    tree[a-'0'].a=a;\n    if(b!='*')\n    {\n        tree[b-'0'].a=b;\n        tree[a-'0'].left=b-'0';\n        tree[b-'0'].fa=a-'0';\n    }\n    if(c!='*')\n    {\n        tree[c-'0'].a=c;\n        tree[a-'0'].right=c-'0';\n        tree[c-'0'].fa=a-'0';\n    }\n}\nvoid found(int i)\n{\n    printf(\"%c\",tree[i].a);\n    if(tree[i].left)found(tree[i].left);\n    if(tree[i].right)found(tree[i].right);\n}\nvoid solve()\n{\n    scanf(\"%d\",&n);\n    while(n--)\n    {\n        scanf(\"%s\",a);\n        add(a[0],a[1],a[2]);\n    }\n}\nvoid get()\n{\n    for(int i=a[0]-'0';;i=tree[i].fa)\n    {\n        if(!tree[i].fa)\n        {\n            found(i);\n            break;\n        }\n    }\n}\nint main()\n{\n    solve();\n    get();\n    return 0;\n}\n```",
        "postTime": 1484620095,
        "uid": 23087,
        "name": "Tgotp",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u9996\u5148\u6211\u5f97\u4ee3\u7801\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u7a0d\u5fae\u957f\u70b9\uff0c\u4e0d\u662f\u6700\u7b80\uff0c\u4e5f\u4e0d\u7528\u6211\u505a\u592a\u591a\u6ce8\u91ca\uff0c\u603b\u4e4b\u5c31\u662f\u5efa\u597d\u6811\u600e\u4e48\u9012\u5f52\u90fd\u6210\u3002\n\n```cpp\n#include<iostream>\n#include<string>\n#include<cstring>\nusing namespace std;\nstruct node{\n    char f,lc,rc,v;//f\u7236\u4eb2\uff0c\u5de6\uff0c\u53f3\uff0c\u5b57\u7b26\u3002\n    bool flagf=0;//\u7531\u4e8e\u662f\u7ed3\u6784\u4f53\uff0c\u627e\u7236\u4eb2\u8981\u7528\u3002\n};node a[1001];//\u6811\nchar s[3];\nint n,root,lch,rch;//\u8282\u70b9\u6570\uff0c\u6839\u8282\u70b9\u53f7\uff0c\u5de6\u53f3\u5b69\u5b50\u53f7\nvoid findchild(int x)//\u4e0b\u9762\u9012\u5f52\u4e2d\u627e\u5de6\u53f3\u5b69\u5b50\u7684\u7f16\u53f7\n{\n    bool flag1=false,flag2=false;\n    for(int i=1;i<=n;++i)\n    {\n        if(a[i].v==a[x].lc) {lch=i;flag1=1;}\n        if(a[i].v==a[x].rc) {rch=i;flag2=1;}\n        if(flag1==1&&flag2==1) break;\n    }\n    if(flag1==0) lch=0;\n    if(flag2==0) rch=0;\n    return;\n}\nvoid preorder(int i)//\u524d\u5e8f\n{\n    if(i)\n    { \n        cout<<a[i].v;\n        findchild(i);\n        preorder(lch);\n        findchild(i);//\u8fd9\u4e00\u6b65\u5f88\u91cd\u8981\uff0c\u5982\u679c\u6ca1\u6709\u4f1a\u5f88\u60b2\u5267\uff0c\u4f60\u4eec\u53ef\u4ee5\u628a\u8fd9\u53e5\u8bdd\u53bb\u6389\u8c03\u8bd5\u4e00\u4e0b\u5c31\u770b\u51fa\u6765\u4e86\u3002\uff08\u56e0\u4e3a\u53ef\u80fd\u5de6\u5b69\u5b50\u662f\u96f6\uff0c\u4f46\u53f3\u4e0d\u662f\uff0c\u6ca1\u6709\u8fd9\u53e5\u7684\u8bdd\u53f3\u5b69\u5b50\u5c31\u88ab\u8df3\u8fc7\u53bb\u4e86\uff09\n        preorder(rch);\n    }\n    return;\n}\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;++i)//\u5efa\u6811\n    {\n        for(int j=0;j<3;++j) cin>>s[j];\n        a[i].v=s[0];\n        if(s[1]!='*') a[i].lc=s[1];\n        else a[i].lc='0';\n        if(s[2]!='*') a[i].rc=s[2];\n        else a[i].rc='0';\n        for(int j=1;j<=i;++j)//\u627e\u7238\u7238\n        if(a[i].v==a[j].lc||a[i].v==a[j].rc)\n        {\n            a[i].f=a[j].v;a[i].flagf=1;\n        }\n    }\n    for(int i=1;i<=n;++i) if(a[i].flagf==0){root=i;break;}//\u627e\u6839\n    preorder(root);//\u9012\u5f52\u524d\u5e8f\n    return 0;\n}\n```",
        "postTime": 1471220679,
        "uid": 11295,
        "name": "2015wanghongyu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u6ce8\u610f\u5230\u4f3c\u4e4e\u6ca1\u6709C++\u7a0b\u5e8f\u2026\u2026\n\n\u6ca1\u4ec0\u4e48\u5c31\u662f\u7528\u975e\u6307\u9488\u7684\u6811\uff0c\u7528\u5b57\u7b26\u7684ASCII\u503c\u505a\u4e0b\u6807\uff08\u7fa1\u6155PASCAL\uff09\n\n\u5176\u4f59\u7684\u548c\u6307\u9488\u57fa\u672c\u6ca1\u4ec0\u4e48\u4e24\u6837\uff0c\u5c31\u662f\u6811\u6839\u9700\u8981\u627e\n\n```cpp\n\n#include<iostream>\nusing namespace std;\nstruct tree{\n    int parent;\n    int tc,rc;\n    tree(){    parent=tc=rc=0;}\n}a[27];\nvoid pre(int root)\n{\n    if(root!=0)\n    {\n        cout<<char(root-1+'a');\n        pre(a[root].tc);\n        pre(a[root].rc);\n    }\n}\nint main()\n{\n    int n;cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        char ch1;cin>>ch1;\n        char ch2;cin>>ch2;\n        char ch3;cin>>ch3;\n        if(ch2!='*')\n        {\n            a[ch2-'a'+1].parent=ch1-'a'+1;\n            a[ch1-'a'+1].tc=ch2-'a'+1;\n        }\n        if(ch3!='*')\n        {\n            a[ch3-'a'+1].parent=ch1-'a'+1;\n            a[ch1-'a'+1].rc=ch3-'a'+1;\n        }\n    }\n    int root;\n    for(int i=1;i<=n;i++)\n        if(a[i].parent==0)\n        {\n            root=i;\n            break;\n        }\n    pre(root);\n    cout<<endl;\n    return 0;\n}\n\n```",
        "postTime": 1457761198,
        "uid": 8662,
        "name": "Mys_C_K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7528\u4e00\u79cd\u795e\u5947\u7684\u65b9\u6cd5\u3002a\u6570\u7ec4\u50a8\u5b58\u5b50\u8282\u70b9\uff0cb\u6570\u7ec4\u50a8\u5b58\u7236\u4eb2\u8282\u70b9\u3002\n\n```delphi\nvar a:array['a'..'z',1..2] of char;  \n    b:array['a'..'z'] of char;  \n    n,i,j,k,l,m:longint;  \n    c1,c2,c3,c:char;  \nprocedure print(c:char);  \nbegin  \nwrite(c);  //\u8f93\u51fa\u7236\u4eb2\u8282\u70b9\nif a[c,1]<>'*' then print(a[c,1]);//\u8f93\u51fa\u5de6\u5b50\u6811  \nif a[c,2]<>'*' then print(a[c,2]);  //\u8f93\u51fa\u53f3\u5b50\u6811\nend;  \nbegin  \nreadln(n);  \nfillchar(a,sizeof(a),'*');  \nfillchar(b,sizeof(b),'*');  //\u7ed9\u6570\u7ec4\u8d4b\u521d\u503c\uff0c*\u8868\u793a\u6ca1\u6709\u7236\u4eb2\u8282\u70b9\u6216\u5b50\u8282\u70b9\nfor i:=1 to n do  \n    begin  \n    readln(c1,c2,c3);  \n    if b[c1]='*' then c:=c1;\n    if c2<>'*' then  \n    begin  \n       a[c1,1]:=c2;  \n       b[c2]:=c1;  \n    end;  \u8bb0\u5f55\u5de6\u8282\u70b9\n    if c3<>'*' then  \n    begin  \n       a[c1,2]:=c3;  \n       b[c3]:=c1;  \n    end;  \u8bb0\u5f55\u53f3\u8282\u70b9\n    end;  \nprint(c);  \nend.\n```",
        "postTime": 1453116050,
        "uid": 10357,
        "name": "\u6840\u9a9c\u7684\u91ce\u5fc3\u5bb6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "# ~~\u770b\u4e86\u597d\u591a\u5927\u4f6c\u7684\u9898\u89e3\uff0c\u672c\u849f\u84bb\u8868\u793a\u770b\u4e0d\u61c2~~\n\n------------\n\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd~~\u7b80\u5355\u6613\u61c2~~\u7684\u65b9\u6cd5\uff0cmap\u6620\u5c04\n\u50cf\u8fd9\u6837\n```cpp\nmap<char,char> l;//\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\nmap<char,char> r;//\u540c\u7406\n```\n### \u5982\u679c\u8fd8\u4e0d\u77e5\u9053map\u662f\u4ec0\u4e48\uff0c\u8bf7\u81ea\u884c\u67e5\u627e\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230a\u7684\u5de6\u513f\u5b50\u4e3al['a'],\u53f3\u513f\u5b50\u4e3ar['a']\n\n\u7136\u540e\u518d\u524d\u5e8f\u904d\u5386\u4e00\u4e0b\uff0c\u5f88\u7b80\u5355\u5c31AC\u4e86\n\n\nAC\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>/*\u5982\u679c\u4e0d\u7528\u4e07\u80fd\u5934\u6587\u4ef6\uff0c\u5e94\u6dfb\u52a0#include<map>*/\nusing namespace std;\nmap<char,char> l;\nmap<char,char> r;\nvoid fro(char u)//\u524d\u5e8f\u904d\u5386\n{\n\tcout<<u;\n\tif(l[u]!='*') fro(l[u]);\n\tif(r[u]!='*') fro(r[u]);\n}\nint main()\n{\n\tint n;\n\tchar rt;//\u6839\u8282\u70b9\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tchar a,b,c;\n\t\tcin>>a>>b>>c;\n\t\tif(i==1) rt=a;\n\t\tl[a]=b;\n\t\tr[a]=c;\n\t }\n\t fro(rt);\n\t cout<<endl;\n\t return 0;\n }\n```\n",
        "postTime": 1573481368,
        "uid": 126053,
        "name": "qqqevinxxz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u9996\u5148\u5427\uff0c\u8fd9\u9898\u4e0d\u96be\u3002\n\n\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u6709\u7528scanf\u8f93\u5165\u7684%c\u524d\u9762\u8981\u52a0\u7a7a\u683c\u3002\nFor example 1.scanf(\" %c\",&char);   \n            2.scanf(\" %c%c%c\",&char1,&char2,&char3);\n            \n\u6bd5\u7adf\u672c\u6765\u6211\u662f\u7528cin>>char\u7684\uff0c\u7136\u540e\u611f\u89c9scanf\u597d\u50cf\u4f1a\u66f4\u5feb\u4e00\u70b9\u5c31\u5f3a\u5236scanf\uff0c\n\u7136\u540e\u5c31\u4e00\u76f4\u5361\u8f93\u5165\u3002\n\n\u8fd8\u6709\u7684\u5c31\u662f\uff0c\u6211\u89c9\u5f97\u4e00\u4e9bdalao\u7684\u9898\u89e3\u53ea\u9002\u7528\u4e8e\u5f53\u7b2c\u4e00\u7ec4\u6570\u636e\u4e3a\u6839\u7684\u60c5\u51b5\uff0c\u4f46\u771f\u6b63\u6bd4\u8d5b\u65f6\u4e0d\u4f1a\u7ed9\u4f60\u94bb\u7a7a\u592a\u591a\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u6700\u597d\u518d\u52a0\u4e00\u4e2a\u627e\u6839\u7684\u8fc7\u7a0b\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u7528\u5faa\u73af\u5199\uff0c\u4f46\u6211\u60f3\u7ec3\u4e00\u7ec3\u51fd\u6570\uff08hhhhhh\uff09\n\n\u795d\u5404\u4f4d\u90fd\u53ef\u4ee5AK IOI\u5427\uff01\uff01\uff01\uff01\uff01\n\nTalk is cheap,show you the code!!!!\n\n```\n# include<cstdio>\nusing namespace std;\nstruct nod//\u5b9a\u4e49\u4e00\u68f5\u6811\n{\n\tchar f,l,r;\n}tree[130];\nint n;\nchar h,k,ch,c1,c2;\nvoid t(char root)//\u524d\u5e8f\u904d\u5386\u554a \n{\n\tif(root!='*')\n\t{\n\t\tprintf(\"%c\",root);\n\t\tt(tree[root].l);\n\t\tt(tree[root].r);\n\t}\n\treturn ;\n}\nchar find(char root)//\u627e\u6839\u554a\n{\n\tif(tree[root].f)\n\t{\n\t\treturn find(tree[root].f);\n\t}\n\telse return root;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tscanf(\" %c\",&h);\n\tscanf(\" %c%c\",&tree[h].l,&tree[h].r);//\u4e3a\u4ec0\u4e48\u8fd9\u91ccscanf\u8981\u52a0\u7a7a\u683c \uff0c\u6c42dalao\u5e2e\u5fd9 \n\tc1=tree[h].l;\n\tc2=tree[h].r;\n\ttree[c1].f=tree[c2].f=h;\n\tfor(int i=2;i<=n;i++)\n\t{\t\n\t\tscanf(\" %c\",&ch);\n\t\tscanf(\" %c%c\",&tree[ch].l,&tree[ch].r);//\u8fd8\u662f\u7a7a\u683c\u95ee\u9898 \n    \tc1=tree[ch].l; c2=tree[ch].r;\n\t\ttree[c1].f=tree[c2].f=ch;\n\t}\n\tt(find(h));\n}\n```\n",
        "postTime": 1566126182,
        "uid": 45926,
        "name": "\u559d\u6389\u5a03\u54c8\u54c8",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "#### \u524d\u8a00\uff1a\n\u6d4f\u89c8\u4e86\u4e00\u4e0b\u5df2\u6709\u7684\u9898\u89e3\uff0c\u6ca1\u6709\u53d1\u73b0\u4f7f\u7528\u6808\u8fdb\u884c\u89e3\u51b3\u7684\u670b\u53cb\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u4e22\u51fa\u81ea\u5df1AC\u7684\u4ee3\u7801\uff0c\u4f9b\u5404\u4f4d\u53c2\u8003&&\u4ea4\u6d41\n\n#### \u601d\u8def\uff1a\n1. \u521d\u59cb\u5316\u4e34\u65f6\u53d8\u91cf\u4e3a\u6839\u7ed3\u70b9\u5e76\u5c06\u5176\u538b\u6808\n2. \u5faa\u73af\u8f93\u51fa\u4e34\u65f6\u53d8\u91cf\u5de6\u513f\u5b50\u5e76\u5c06\u5176\u538b\u6808\uff0c\u76f4\u5230\u67d0\u7ed3\u70b9\u65e0\u5de6\u513f\u5b50\n3. \u5f39\u51fa\u6808\u9876\u5143\u7d20\u5e76\u8d4b\u503c\u7ed9\u4e34\u65f6\u53d8\u91cf \n4. \u5982\u679c\u8be5\u7ed3\u70b9\u6709\u53f3\u513f\u5b50\uff0c\u5219\u5c06\u4e34\u65f6\u53d8\u91cf\u53d8\u66f4\u4e3a\u5176\u53f3\u513f\u5b50\u5e76\u5c06\u5176\u538b\u6808\uff0c\u56de\u52302\n5. \u5982\u679c\u8be5\u7ed3\u70b9\u6ca1\u6709\u53f3\u513f\u5b50\uff0c\u5219\u56de\u52303\n\n\n#### \u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <stack>\n\nusing namespace std;\n\nstruct node {\n\tchar self; //\u7ed3\u70b9\u5bf9\u5e94\u7684\u503c\n\tchar left; //\u7ed3\u70b9\u7684\u5de6\u513f\u5b50\n\tchar right;//\u7ed3\u70b9\u7684\u53f3\u513f\u5b50\n};\n\nvoid stack_deal(node tree[])\n{\n\tstack<node> s;      //\u7528\u6765\u50a8\u5b58\u7ed3\u70b9\u7684\u6808\u53d8\u91cf\n\tint index;          //\u7528\u6765\u83b7\u5f97\u6570\u7ec4\u4e2d\u76f8\u5e94\u7ed3\u70b9\u7684\u4e0b\u6807\n\tnode tmp = tree[0]; //\u4e34\u65f6\u53d8\u91cf\uff0c\u8bb0\u5f55\u83b7\u5f97\u7684\u6808\u4e2d\u503c\uff0c\u521d\u59cb\u5316\u4e3a\u6839\u7ed3\u70b9\n\t\n\twhile (true) {\n\t\twhile (true) {   //\u5faa\u73af\u8f93\u51fa\u5de6\u513f\u5b50\u5e76\u5c06\u5176\u538b\u6808\n\t\t\tcout.put(tmp.self);\n\t\t\ts.push(tmp);\n\t\t\t\n\t\t\tif (tmp.left=='*') {\n\t\t\t\ts.pop(); //\u6ca1\u6709\u5de6\u513f\u5b50\u5219\u9000\u51fa\u5faa\u73af\n\t\t\t\tbreak;\n\t\t\t} else {     //\u5426\u5219\u5c06\u4e34\u65f6\u53d8\u91cf\u8d4b\u503c\u4e3a\u5176\u5de6\u513f\u5b50\n\t\t\t\tfor (index=0; tmp.left!=tree[index].self; ++index);\n\t\t\t\ttmp = tree[index];\n\t\t\t}\n\t\t}\n        \n        //\u5f53\u524d\u7ed3\u70b9\u6ca1\u6709\u53f3\u513f\u5b50\u5219\u56de\u9000\u5230\u5176\u4e0a\u5c42\u7ed3\u70b9\uff0c\u5982\u679c\u5f53\u524d\u662f\u6839\u7ed3\u70b9\u5219\u56de\u5230\u4e3b\u51fd\u6570\n\t\twhile (tmp.right=='*') {\n\t\t\tif (!s.empty()) {\n\t\t\t\ttmp=s.top();\n\t\t\t\ts.pop();\n\t\t\t} else return;\n\t\t}\n\t\t//\u5426\u5219\u5c06\u4e34\u65f6\u53d8\u91cf\u8d4b\u503c\u4e3a\u5176\u53f3\u513f\u5b50\uff0c\u538b\u6808\u7684\u5de5\u4f5c\u4ea4\u7ed9\u4e0b\u4e00\u6b21\u5faa\u73af\n\t\tfor (index=0; tmp.right!=tree[index].self; ++index);\n\t\ttmp = tree[index];\n\t}\n}\n\nint main(void)\n{\n\tint count;\n\tcin>>count;\n\tnode tree[count]; //\u6309\u8f93\u5165\u7684\u987a\u5e8f\u50a8\u5b58\u7ed3\u70b9\n\n\tfor (int i=0; i<count; ++i)\n\t\tcin >>tree[i].self\n\t\t\t>>tree[i].left\n\t\t\t>>tree[i].right;\n\n\tstack_deal(tree); //\u8f93\u51fa\u524d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\n\tcout<<endl;\n\n\treturn 0;\n}\n\n```\n### \u7ed3\u675f\uff1a\n\u4ee5\u4e0a\u4fbf\u662f\u6211\u63d0\u4ea4\u7684\u4ee3\u7801\uff0c\u6b22\u8fce\u63d0\u51fa\u4fee\u6539\u610f\u89c1:-)",
        "postTime": 1565876171,
        "uid": 151515,
        "name": "Yuren",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "# \u8fd9\u9898\u6709\u591f\u6c34 \u6211\u8fd9\u4e2a\u849f\u84bb\u90fd\u4f1a\n\u5148\u8bf4\u8bf4\u6811\u7684\u904d\u5386\u7684\u89c4\u5219\u5427\uff08\u5b66\u8fc7\u6570\u636e\u7ed3\u6784\u90fd\u77e5\u9053\u7684\u5427\uff09\n\n*\t\u5148\u5e8f\u904d\u5386\u6839\u5de6\u53f3\n*\t\u4e2d\u5e8f\u904d\u5386\u5de6\u6839\u53f3\n*\t\u540e\u5e8f\u904d\u5386\u5de6\u53f3\u6839\n\n\u4e0b\u9762\u662f\u4ee3\u7801 \u8bf7\u52ff\u6284\u9898\u89e3\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstruct node\n{\n    char left;\n    char right;\n    char value;\n} tree[27];\nchar cs[27];\nint n;\nint index(char a) //\u67e5\u627e\u5b57\u6bcd\u5bf9\u5e94\u4e0b\u6807\n{\n    if (a == '*')\n        return -1;\n    for (int i = 0; i < n; i++)\n        if (cs[i] == a)\n            return i;\n}\nvoid f(int a) //\u904d\u5386\n{\n    if (a == -1) //\u9012\u5f52\u51fa\u53e3\n        return;\n    cout << tree[a].value;//\u6839\n    f(index(tree[a].left));//\u5de6\n    f(index(tree[a].right));//\u53f3\n    return;\n}\nint main()\n{\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        cin >> tree[i].value >> tree[i].left >> tree[i].right; //\u8f93\u5165\n        cs[i] = tree[i].value;                                 //\u8bb0\u5f55\u4e0b\u5b57\u6bcd\u5bf9\u5e94\u7684\u6570\u7ec4\u4e0b\u6807\n    }\n    f(0);\n    return 0;\n}\n```\n\u849f\u84bb\u7b2c\u4e00\u6b21\u627e\u4e86\u4e2a\u6700\u7b80\u5355\u7684\u9898\u53d1\u9898\u89e3 \u745f\u745f\u53d1\u6296",
        "postTime": 1565861999,
        "uid": 104021,
        "name": "F_Unction",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u8fd9\u5176\u5b9e\u662f\u4e00\u9053\u5b66\u4e60\u4e8c\u53c9\u6811\u5f88\u7ecf\u5178\u7684\u9898\u76ee\u54c8\n\n\u800c\u6211\u7684\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5206\u4e09\u6b65\u8d70\uff1a\n\n1\u3001\u5b58\u54ea\u51e0\u4e2a\u5b57\u6bcd\u5728\u91cc\u9762\uff0c\u8c01\u662f\u5b69\u5b50\uff08\u5728\u5224\u65ad\u65f6\u76f4\u63a5\u7528\u8f93\u5165\u65f6\u5b58\u7684\u6570\u7ec4\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ca1\u5fc5\u8981\u518d\u5f00\u4e00\u4e2a\uff09\n\n2\u3001\u627e\u8c01\u4e0d\u662f\u5b69\u5b50\u4f46\u662f\u51fa\u73b0\u8fc7\uff0c\u8fd9\u5c31\u662f\u6839\uff0c\u4ece\u6b64\u5904\u5f00\u59cb\u9012\u5f52\n\n3\u3001\u7531\u4e8e\u4ed6\u8ba9\u6211\u4eec\u6c42\u524d\u5e8f\uff08\u5148\u5e8f\uff09\u904d\u5386\uff0c\u5148\u8f93\u51fa\u5f53\u524d\u9012\u5f52\u7684\u91cf\uff08\u7236\u8282\u70b9\uff09\uff0c\u518d\u770b\u4ed6\u6709\u6ca1\u6709\u5de6\u53f3\u4e24\u4e2a\u5b69\u5b50\uff0c\u5982\u679c\u6709\uff0c\u5148\u9012\u5f52\u5de6\u5b69\u5b50\uff0c\u518d\u9012\u5f52\u53f3\u5b69\u5b50\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstring a[1001];\nint n,er[1001],cun[1001],st;//er\u4ee3\u8868\u4ed6\u662f\u4e0d\u662f\u4e00\u4e2a\u8282\u70b9\u7684\u513f\u5b50\uff0ccun\u4ee3\u8868\u4ed6\u6709\u6ca1\u6709\u51fa\u73b0\u8fc7 \nvoid dfs(int u){//\u4e0d\u8981\u88ab\u8fd9\u4e1c\u897f\u8bef\u5bfc\u4e86\uff0c\u8fd9\u4e0d\u662fdfs \n\tchar now=u+'a';//\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u5bfc\u5165\u5b57\u7b26 \n\tcout<<now;//\u8f93\u51fa\u7236\u8282\u70b9 \n\tfor(int i=1;i<=n;i++){//\u5728\u6761\u4ef6\u4e2d\u5bfb\u627e \n\t\tif(a[i][0]==now){//\u5982\u679c\u8fd9\u662f\u7236\u8282\u70b9 \n\t\t\tif(a[i][1]!='*'){//\u4f9d\u6b21\u67e5\u770b\u4ed6\u6709\u6ca1\u6709\u5de6\u53f3\u4e24\u4e2a\u5b69\u5b50 \n\t\t\t\tdfs(a[i][1]-'a');//\u8f6c\u6362\uff0c\u9012\u5f52\n\t\t\t}\n\t\t\tif(a[i][2]!='*'){\n\t\t\t\tdfs(a[i][2]-'a');\n\t\t\t}\n\t\t\tbreak;//\u8282\u7701\u65f6\u95f4 \n\t\t}\n\t}\n}\nint main(){\n\tcin>>n;//\u8f93\u5165 \n\tfor(int i=1;i<=n;i++){\n\t\tcin>>a[i];//\u7528\u5b57\u7b26\u4e32\u65b9\u4fbf\u4e00\u4e9b \n\t\tif(a[i][1]!='*'){//\u5982\u679c\u8f93\u5165\u7684\u4e1c\u897f\u4e0d\u4e3a* \n\t\t\tcun[a[i][1]-'a']=1;//\u5b83\u5b58\u5728\u8fc7 \n\t\t\ter[a[i][1]-'a']=1;//\u56e0\u4e3a\u6700\u5148\u8f93\u7684\u662f\u7236\u4eb2\uff0c\u6240\u4ee5\u540e\u6765\u7684\u4e24\u4e2a\u5341\u4e8c\u5b50 \n\t\t}\n\t\tif(a[i][2]!='*'){//\u5224\u65ad\u53f3\u8282\u70b9 \n\t\t\tcun[a[i][2]-'a']=1;\n\t\t\ter[a[i][2]-'a']=1;\n\t\t}\n\t\tcun[a[i][0]-'a']=1;//\u7236\u8282\u70b9\u80af\u5b9a\u4e0d\u4e3a* \n\t}\n\tfor(int i=0;i<26;i++){//\u5728\u4e8c\u5341\u516d\u4e2a\u5b57\u6bcd\u4e2d\u5bfb\u627e \n\t\tif(cun[i]==1&&er[i]==0){//\u5982\u679c\u5b83\u5b58\u5728\u8fc7\u53c8\u6ca1\u6709\u5f53\u8fc7\u513f\u5b50 \n\t\t\tst=i;//\u6839\u5373\u4e3a\u4ed6 \n\t\t\tbreak;\n\t\t}\n\t}\n\tdfs(st);//\u9012\u5f52\u5c31\u597d\u4e86 \n\treturn 0;\n}\n\n```\n\n\u6211\u89c9\u5f97\u6211\u7684\u4ee3\u7801\u5bf9\u65b0\u624b\u8db3\u591f\u53cb\u597d\u4e86\uff0c\u5982\u6709\u4e0d\u6b63\u5c3d\u8bf7\u6307\u51faqwq",
        "postTime": 1564487242,
        "uid": 149219,
        "name": "_maze",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u4e0d\u5f97\u4e0d\u8bf4\u8fd9\u5230\u9898\u76ee\u4e0d\u96be\uff08\u539f\u8c05\u672c\u5f31\u9e21\u7528\u4e8680\u591a\u884c\u4ee3\u7801\n\n\u4f46\u662f\uff01\uff01\uff01\u7528c\u7684\u5404\u4f4d\u540c\u5b66\uff0c\u8bf7\u5f80\u8fd9\u7bc7\u9898\u89e3\u770b\uff01\uff01\uff01\n\u5982\u679c\u4f60\u7528\u7684\u662fscanf\uff0c\u90a3\u4e48\uff0c\u4f60\u662f\u5f88\u6709\u53ef\u80fd\u51fa\u73b0\u548c\u6211\u4e00\u6837\u7684\u95ee\u9898\u7684\uff1a\u672c\u5730\u8dd1\u6ca1\u6709\u4e00\u70b9\u95ee\u9898\uff0c\u4f46\u662f\u5c31\u662f\u8fc7\u4e0d\u4e86\u3002\n\n\u5176\u5b9e\uff0c\u8fd9\u5c31\u7275\u6d89\u5230\u4e00\u4e2a\u6709\u70b9\u504f\u7684\u70b9\uff0cWindows\u4e0b\u7684\u6362\u884c\u7b26\u4e8b\u5b9e\u4e0a\u4e0d\u662f\"\\n\",\u800c\u662f\"\\r\\n\"!!!\u4f46\u662f\u5728Windows\u73af\u5883\u4e0b\uff0c\u7cfb\u7edf\u81ea\u52a8\u5c06\\r\\n\u8bc6\u522b\u4e3a\\n\u3002\n\n\u672c\u6765\u8fd9\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u662f\uff01\uff01\uff01\u5230\u4e86\u8fd9\u9053\u9898\u76ee\uff0c\u7531\u4e8e\u6211\u4eec\u7528\u4e86scanf\uff0c\u6240\u4ee5\u52bf\u5fc5\u8981\u7528\u4e00\u4e2a\u53d8\u91cf\u6765\u50a8\u5b58\u6362\u884c\uff0c\u4e5f\u5c31\u662fscanf(\"%c%c%c%c\",&c,&rt,&l,&r);\uff0c\u4f46\u95ee\u9898\u662f\u6d4b\u8bc4\u673a\u7528\u7684\u662fLinux\u7cfb\u7edf\uff0c\u8f93\u5165\u7528\u7684\u6587\u4ef6\u786e\u5b9e\u5728Windows\u4e0b\u521b\u5efa\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\"\\r\"\u88ab\u8bfb\u4e86\u8fdb\u53bb\uff0c\u6bd4\u65b9\u8bf4\u8f93\u5165\"\\n abc\"\u90a3\u4e48\uff0c\u6700\u540e\u8bfb\u5165\u7ed3\u679c\u662f\uff1ac='\\n'\uff0crt='\\r'\uff0cl='a'\uff0cr='b'\uff0c\u800cc\u5219\u6ca1\u6709\u88ab\u8bfb\u5165\uff0c\u4e8e\u662f\uff0c\u4f60\u7406\u6240\u5f53\u7136\u7684\u8fc7\u4e0d\u4e86\u4e86\u3002\n\u56e0\u6b64\uff0c\u6211\u8fd9\u9053\u9898\u76ee\u9700\u8981\u5728\u8bfb\u5165\u7684\u65f6\u5019\u518d\u589e\u52a0\u4e00\u4e2a\u53d8\u91cf\uff0c\u4e5f\u5c31\u662fscanf(\"%c%c%c%c%c\",&c,&d,&rt,&l,&r)\u3002\u7136\u540e\u8fd9\u9053\u9898\u76ee\u5c31\u4e0d\u96be\u4e86\u3002\n\nC\u8bed\u8a00\u4ee3\u7801\u5982\u4e0b\u3002\n\n```c\n#include<stdio.h>\n#include<malloc.h>\n\nstruct Tree{\n\tchar name;\n\tstruct Tree *left;\n\tstruct Tree *right;\n};\ntypedef struct Tree tree;\ntree *root=NULL,*p,*q;\n\nvoid find(char s,char l,char r,tree *rt){\n\tif(rt->left==NULL&&rt->right==NULL){\n\t\tif(rt->name==s){\n\t\t\tp=(tree *)malloc(sizeof(tree));\n\t\t\tq=(tree *)malloc(sizeof(tree));\n\t\t\trt->left=p;\n\t\t\trt->right=q;\n\t\t\tp->name=l;\n\t\t\tq->name=r;\n\t\t\tp->left=NULL;\n\t\t\tp->right=NULL;\n\t\t\tq->left=NULL;\n\t\t\tq->right=NULL;\n\t\t}\n\t\treturn;\n\t}\n\tif(rt->name==s){\n\t\tp=(tree *)malloc(sizeof(tree));\n\t\tq=(tree *)malloc(sizeof(tree));\n\t\trt->left=p;\n\t\trt->right=q;\n\t\tp->name=l;\n\t\tq->name=r;\n\t\tp->left=NULL;\n\t\tp->right=NULL;\n\t\tq->left=NULL;\n\t\tq->right=NULL;\n\t\treturn;\n\t}\n\tif(rt->left!=NULL) find(s,l,r,rt->left);\n\tif(rt->right!=NULL)find(s,l,r,rt->right);\n}\nvoid DLR(tree *rt){\n\tif(rt->left==NULL&&rt->right==NULL){\n\t\tif(rt->name!='*') printf(\"%c\",rt->name);\n\t\treturn;\n\t}else{\n\t\tif(rt->name!='*') printf(\"%c\",rt->name);\n\t\tDLR(rt->left);\n\t\tDLR(rt->right);\n\t\treturn;\n\t}\n}\n\nint main()\n{\n\tint n;\n\tchar rt,l,r,c,d;\n\tscanf(\"%d\",&n);\n\twhile(n--){\n\t\tscanf(\"%c%c%c%c%c\",&c,&d,&rt,&l,&r);\n\t\tif(root==NULL){\n\t\t\troot=(tree *)malloc(sizeof(tree));\n\t\t\tp=(tree *)malloc(sizeof(tree));\n\t\t\tq=(tree *)malloc(sizeof(tree));\n\t\t\troot->name=rt;\n\t\t\troot->left=p;\n\t\t\troot->right=q;\n\t\t\tp->name=l;\n\t\t\tq->name=r;\n\t\t\tp->left=NULL;\n\t\t\tp->right=NULL;\n\t\t\tq->left=NULL;\n\t\t\tq->right=NULL;\n\t\t}else find(rt,l,r,root);\n\t}\n\tDLR(root);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n",
        "postTime": 1559749334,
        "uid": 153875,
        "name": "heyufeng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "#### \u4e0d\u7528\u5224\u65ad\u2018*\u2019\u7684\u95ee\u9898\uff0c\u6309\u7167\u524d\u5e8f\u904d\u5386\u7684\u89c4\u5219\u8fdb\u884c\u5373\u53ef\u3002\n```cpp\n#include <iostream>\nusing namespace std;\nchar tree[26][4];\nint n;\nvoid print(int r)\n{\n    cout<<tree[r][0];\n    for(int k=1;k<=2;k++)\n        for(int i=0;i<n;i++)\n            if(tree[i][0]==tree[r][k])print(i);\n}\nint main()\n{\n    cin>>n;\n    for(int i=0;i<n;i++){\n        cin>>tree[i];\n    }\n    print(0);//\u5982\u679c\u8981\u6316\u5751\uff0c\u5c31\u4e0d\u662f\u4ece\u7b2c\u4e00\u4e2a\u5f00\u59cb\u4e86\uff0c\u4ece\u90a3\u4e2a\u5b57\u6bcd\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5f00\u59cb\n    return 0;\n}\n\n```\n",
        "postTime": 1557624708,
        "uid": 95076,
        "name": "\u849f\u84bbOrzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u76f4\u63a5\u7528\u4e24\u4e2a\u6570\u7ec4\u6a21\u62df\u4e8c\u53c9\u6811\n\n\u7136\u540e\u76f4\u63a5\u904d\u5730\u5c31\u884c\n\n\n```cpp\n//P1305 luogu\n//DinnerHunt\n#include <iostream>\nusing namespace std;\nint l[1000],r[1000],n,ch;\nstring str;\nvoid fr(ch){\n    if(ch=='*'-'a') return;        //\u5982\u679c\u662f'*'\u8fd9\u8868\u793a\u6ca1\u6709\u5b50\u6811\u4e86\n    cout << char(ch+'a'); //\u5148\u5e8f\u904d\u5730 \u5148\u8f93\u51fa\u7ed3\u679c\n    fr(l[ch]);            //\u904d\u5730\u5de6\u6811\n    fr(r[ch]);            //\u904d\u5730\u53f3\u6811\n}\nint main(){\n    ios::sync_with_stdio(false);\n    cin >> n;\n    for(int i=0;i<n;i++){\n        cin >> str;\n        if(!i) ch = str[0]-'a';        //\u50a8\u5b58\u6839\u8282\u70b9\n        l[str[0]-'a'] = str[1]-'a';        //\u5f53\u524d\u8282\u70b9\u7684\u5de6\u8282\u70b9\n        r[str[0]-'a'] = str[2]-'a';        //\u5f53\u524d\u8282\u70b9\u7684\u53f3\u8282\u70b9\n    }\n    fr(ch);        //\u904d\u5730\u6839\u8282\u70b9\n    return 0;\n}\n```",
        "postTime": 1508391696,
        "uid": 62401,
        "name": "DinnerHunt",
        "ccfLevel": 0,
        "title": "P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u849f\u84bb\u6211\u662f\u4f7f\u7528\u7684\u6570\u7ec4\u6765\u5b58\u50a8\u7684\uff0c\u8fd8\u671b\u5404\u4f4d\u5927\u795e\u52ff\u55b7\u3002\u7531\u4e8e\u6837\u4f8b\u662f\u5c42\u5e8f\u904d\u5386\uff0c\u6240\u4ee5\u6211\u4eec\u5efa\u6811\u7684\u65f6\u5019\u53ef\u4ee5\u5faa\u73af\u5efa\u6811\u3002\u5177\u4f53\u7684\u8bf4\u660e\u90fd\u5728\u7a0b\u5e8f\u7684\u6ce8\u91ca\u4e2d\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n\nusing namespace std;\n\ntypedef struct TreeType{\n    char It;//\u8be5\u8282\u70b9\u7684\u503c\n    char LeftChild;//\u5de6\u5b50\u6811\u7684\u503c\n    char RightChild;//\u53f3\u5b50\u6811\u7684\u503c\n};\n\nclass Tree{\n    private:\n        TreeType t[1001];//\u8be5\u6811\n        int nodelen;//\u8282\u70b9\u6570\u91cf\n    public:\n        void GetTree(void)\n        {\n            char n,l,r;//n\u4e3a\u8be5\u8282\u70b9\u7684\u503c\uff0cl\u4e3a\u5de6\u5b50\u8282\u70b9\u7684\u503c\uff0cr\u4e3a\u53f3\u5b50\u8282\u70b9\u7684\u503c\n            cin >> nodelen;\n            for(int i = 0;i < nodelen;i++)\n            {\n                cin >> n >> l >> r;//\u8f93\u5165\n                t[i].It = n;\n                t[i].LeftChild = l;\n                t[i].RightChild = r;//\u5206\u522b\u5b58\u5165\n            }//\u5efa\u6811\n        }\n        int FindNode(int n)\n        {\n            for(int i = 0;i < nodelen;i++)\n                if(t[i].It == n)\n                    return i;\n            return -1;\n        }//\u8be5\u51fd\u6570\u7684\u4f5c\u7528\u4e3a\u67e5\u627e\u8282\u70b9\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8282\u70b9\u5404\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002\n        TreeType retval(int i)\n        {\n            return t[i];\n        }\n        void CatAll(void)\n        {\n            for(int i = 0;i < nodelen;i++)\n                printf(\"%c \",t[i].It);\n        }//\u5c42\u5e8f\u904d\u5386  debug \n        bool Empty(void)\n        {\n            return nodelen?false:true;\n        }//\u5224\u7a7a\n};\nchar front[1001];//\u5c06\u5148\u5e8f\u904d\u5386\u5230\u7684\u8282\u70b9\u4f9d\u6b21\u5b58\u5165\u5230\u8be5\u6570\u7ec4\u4e2d\nint frontlen;//\u8be5\u5148\u5e8f\u904d\u5386\u7684\u957f\u5ea6\nvoid frontcat(Tree t,int i)//\u5148\u5e8f\u904d\u5386\n{\n    int indexleft,indexright;\n    if(t.retval(i).It == '*')//\u5982\u679c\u8be5\u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\n        return;\n    else{\n        front[frontlen] = t.retval(i).It;//\u5426\u5219\u5219\u8bb0\u5f55\u4e0b\u8be5\u8282\u70b9\u7684\u503c\n        frontlen++;\n        indexleft = t.FindNode(t.retval(i).LeftChild);//\u627e\u5230\u5de6\u5b50\u6811\u7684\u4e0b\u6807\n        indexright= t.FindNode(t.retval(i).RightChild);//\u627e\u5230\u53f3\u5b50\u6811\u7684\u4e0b\u6807\n        if(indexleft != -1)//\u5982\u679c\u80fd\u591f\u627e\u5230\u5de6\u5b50\u6811\n            frontcat(t,t.FindNode(t.retval(i).LeftChild));//\u5411\u5de6\u904d\u5386\n        if(indexright != -1)//\u5982\u679c\u80fd\u591f\u627e\u5230\u53f3\u5b50\u6811\n            frontcat(t,t.FindNode(t.retval(i).RightChild));//\u5411\u53f3\u904d\u5386\n    }\n}\n\nint main(int argc,char ** argv)\n{\n    Tree mytree;\n    mytree.GetTree();//\u5efa\u6811\n    if(mytree.Empty())//\u5224\u7a7a\uff0c\u4ee5\u9632\u4e07\u4e00\n        return 0;\n//    mytree.CatAll();\n    frontlen = 0;\n    frontcat(mytree,0);//\u5148\u5e8f\u904d\u5386\n    for(int i = 0;i < frontlen;i++)\n        printf(\"%c\",front[i]);//\u8f93\u51fa\u5e8f\u5217\n    \n    return 0;\n}\n```\n\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5728\u5148\u5e8f\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u76f4\u63a5\u8f93\u51fa\u5e8f\u5217\uff0c\u8fd9\u6837\u4f1a\u7701\u4e00\u90e8\u5206\u7a7a\u95f4\u3002\n",
        "postTime": 1505220349,
        "uid": 25009,
        "name": "\u4e8c\u529b\u5e73\u8861\u6811",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\uff5b\u8fd9\u662f\u4e00\u53ea\u94fe\u8868\u6811\uff5d\n\n```cpp\ntype tree=^node;//\u5d4c\u5957\nnode=record\ndata:char;//\u8be5\u8282\u70b9\u5185\u5bb9\nlch,rch:tree;//\u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\nend;//\u94fe\u8868\u7c7b\u578b\nvar a:array['a'..'z']of string;\nhead:tree;s:string;n,i:longint;ch:char;\nprocedure dr(ch:char;var bt:tree);\nbegin\nif ch='*' then bt:=nil\nelse\nbegin\nnew(bt);bt^.data:=ch;\ndr(a[ch][2],bt^.lch);dr(a[ch][3],bt^.rch);\nend;\nend;\nprocedure xx(bt:tree);\nbegin\nif bt=nil then exit;\nwrite(bt^.data);\nxx(bt^.lch);xx(bt^.rch);\nend;\nbegin\nreadln(n);\nreadln(s);ch:=s[1];//\u5148\u8bfb\u53d6\u7b2c\u4e00\u884c\uff0c\u4fdd\u7559\u5176\u6839\u8282\u70b9\u5185\u5bb9\nfor i:=1 to n-1 do\n    begin a[s[1]]:=s;readln(s);end;//\u5c06\u8282\u70b9\u5185\u5bb9\u53ca\u5176\u5de6\u53f3\u5b50\u6811\u5185\u5bb9\u4fdd\u5b58\u5728a\u6570\u7ec4\u91cc\na[s[1]]:=s;\nnew(head);head^.data:=a[ch][1];//\u6811\u6839\u5904\u7406\ndr(a[ch][2],head^.lch);dr(a[ch][3],head^.rch);//\u751f\u6210\u5de6\u53f3\u5b50\u6811\nxx(head);//\u524d\u5e8f\u904d\u5386\nend.\n**\u603b\u4e4b\uff0c\u672c\u9898\u82e5\u4f7f\u7528\u6570\u7ec4\u6765\u5efa\u6811\u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u7b80\u5355\u4e0d\u5c11\uff0c\u4f46\u662f\u7528\u94fe\u8868\u5efa\u6811\uff0c\u867d\u7136\u7a0d\u5fae\u9ebb\u70e6\u4e00\u4e9b\uff0c\u5374\u4e5f\u662f\u6211\u4eec\u4e0d\u53ef\u5fd8\u8bb0\u7684**\n```",
        "postTime": 1504150767,
        "uid": 11302,
        "name": "\u5434\u6d77\u5578",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u4e0a\u8c8c\u4f3c\u6ca1\u6709  map<char,tree\\*> add;  \u7684\u5199\u6cd5\uff0c\n\n\u672c\u849f\u84bb\u6765\u8865\u5145\u4e00\u4e0b\uff08\u6c34\u4e00\u53d1\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct tree{\n    char letter;\n    tree *left,*right;\n    tree(){left=NULL;right=NULL;}     //\u8d4b\u503c\n}*root,*p,*pleft,*pright;    //root\uff1a\u6574\u68f5\u4e8c\u53c9\u6811\u7684\u6839   p\uff1a\u6bcf\u4e00\u4e2a\u5c0f\u4e8c\u53c9\u6811\u7684\u6839  pleft,pright \uff1a\u5de6\u3001\u53f3\u513f\u5b50\u7684\u6307\u9488\nchar a[3];\nmap<char,tree*> add;    //map->\u5b58\u6307\u9488\nvoid first(tree *root)   //\u5148\u5e8f\u904d\u5386\n{\n    printf(\"%c\",root->letter);\n    if(root->left) first(root->left); \n    if(root->right) first(root->right);\n}\nint main()\n{\n    int n,i;\n    scanf(\"%d\",&n);\n    cin>>a;\n    root=new tree;       //\u7b2c\u4e00\u6b21\u8f93\u5165\u65f6\u6839\u4e5f\u9700\u8981\u5efa\u6811\uff08\u4ee5\u540e\u7684\u8f93\u5165\u90fd\u662f\u5728\u524d\u9762\u7684\u57fa\u7840\u4e0a\uff09\uff0c\u6240\u4ee5\u5355\u72ec\u8003\u8651\n    root->letter=a[0];\n    if(a[1]!='*')\n    {\n        pleft=new tree;\n        pleft->letter=a[1];\n        root->left=pleft;\n        add[a[1]]=pleft;   //\u5b58\u50a8\u6307\u9488 \n    }\n    if(a[2]!='*')\n    {\n        pright=new tree;\n        pright->letter=a[2];\n        root->right=pright;\n        add[a[2]]=pright;\n    }\n    for(i=2;i<=n;i++) \n    {\n        cin>>a;\n        p=add[a[0]];    \n        if(a[1]!='*')\n        {\n            pleft=new tree;\n            pleft->letter=a[1];\n            p->left=pleft;\n            add[a[1]]=pleft;\n        }\n        if(a[2]!='*')\n        {\n            pright=new tree;\n            pright->letter=a[2];\n            p->right=pright;\n            add[a[2]]=pright;\n        }\n    }\n    first(root); //\u5f53\u7136\u662f\u4ece\u6839\u5f00\u59cb\u904d\u5386\u4e86\n    return 0;\n}\n```",
        "postTime": 1502687091,
        "uid": 21679,
        "name": "\u9999\u98ce\u667a\u4e43",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u770b\u8ba8\u8bba\u8bf4\u8fd9\u9898\u7684\u6570\u636e\u6539\u8fc7\u4e86\uff0c\u90a3\u5c31\u4e0a\u4e00\u7bc7\u6700\u65b0\u5199\u7684\u9898\u89e3\u5427\u3002\u6548\u7387\u4e0d\u600e\u6837\uff0c\u4f46\u4ee3\u7801\u53ef\u8bfb\u6027\u8fd8\u662f\u53ef\u4ee5\u7684\u3002\n\n\u8ba8\u8bba\u4e2d\u6709\u4e00\u4f4d\u795e\u7287\u5df2\u7ecf\u6d4b\u51fa\u4e86\u6570\u636e\u8303\u56f4\u662fn<=26\u4e14\u5168\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002\n\n\u5bf9\u4e8e\u5efa\u7acb\u6bcf\u4e2a\u8282\u70b9\u7684\u95ee\u9898\u6211\u662f\u91c7\u7528\u4e86\u4f2a\u52a8\u6001\u7684\u65b9\u6cd5\uff0c\u5148\u58f0\u660e\u597d\u4e86\u4e00\u5806\u7684node\uff0c\u518d\u7528\u4e00\u4e2apoint\u6307\u5411\u3002\n\n\u7136\u540e\u8f93\u5165\u7684\u65f6\u5019\u6765\u4e00\u4e2a\u9884\u5904\u7406\uff0c\u7528map\u5efa\u7acb\u5b57\u7b26\u4e0epoint\u7684\u6620\u5c04\uff0c\u65b9\u4fbf\u4ee5\u540e\u627e\u3002\n\n\u9047\u5230\u7a7a\u8282\u70b9\u5c31\u7ea6\u5b9a\u4e3a\u7528\u20180\u2019\u8868\u793a\u3002\n\n\u8f93\u51fa\u7684\u65f6\u5019\u662f\u5148\u5e8f\u8f93\u51fa\uff0c\u9012\u5f52\u5c31\u597d\u4e86\uff0c\u8fb9\u754c\u5c31\u662f\u8282\u70b9\u5f53\u524d\u5b57\u7b26\u4e3a\u20180\u2019\n\n\u6700\u540e\uff0c\u53cc\u624b\u5949\u4e0a\u4ee3\u7801\u3002\n\n\n\n\n\n\n\n    \n    \n    \n    \n    \n```cpp\n#include <iostream>\n#include <string>\n#include <map>\nusing namespace std;\nstruct node{\n    char left;\n    char right;\n    char here;\n}tree_z[10000000];\nint point=0;\nmap<char,int> m;\nbool is_used[30];\nvoid print_before(char t){\n    if(t=='0') return;\n    cout<<t;\n    print_before(tree_z[m[t]].left);\n    print_before(tree_z[m[t]].right);\n}\nint main(){\n    #ifdef LOCAL\n    freopen(\"test.in\",\"r\",stdin);\n    #endif\n    int n=0;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        string t;\n        cin>>t;\n        m[t[0]]=point;\n        tree_z[point].here=t[0];\n        if(t[1]!='*') {tree_z[point].left=t[1];is_used[t[1]-'a']=1;}\n        else tree_z[point].left='0';\n        if(t[2]!='*') {tree_z[point].right=t[2];is_used[t[2]-'a']=1;}\n        else tree_z[point].right='0';\n        point++;\n    }\n    //\u627e\u7956\u5148\n    char i='a';\n    for(;i<='z';i++){\n        if(!is_used[i-'a']) break;\n    }\n    print_before(i);\n    return 0;\n}\n```",
        "postTime": 1501257579,
        "uid": 48842,
        "name": "geek\u75d5",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u6211\u7684\u7a0b\u5e8f\u4e0d\u662f\u6700\u4f18\u7a7a\u95f4\u89e3\uff08\u6570\u636e\u592a\u6c34\uff0c\u4e0d\u7528\u90a3\u4e48\u9ebb\u70e6\uff09\uff0c\u5176\u4e2d\u6570\u7ec4\u7684\u4e0b\u6807\u662f\u4ece\u2018a\u2019\u7684int\u503c\u624d\u5f00\u59cb\u7684\uff0c\u7701\u4e9b\u7a7a\u95f4\u53ef\u5199\u6210 f-'a' \uff0c\u8fd9\u4e0d\u662f\u91cd\u70b9\u3002\n\n\n\u5177\u4f53\u601d\u8def\u5f88\u7b80\u5355\uff0c\u76f8\u5f53\u4e8e\u5f00\u4e86\u4e24\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0cbt[f][1]\u8868\u793af\u8282\u70b9\u5de6\u5b69\u5b50\u7684\u5b57\u7b26\uff0cbt[f][2]\u5219\u662f\u53f3\u5b69\u5b50\u3002\u8bfb\u5165\u65f6\u4ee5\u7b2c\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9\uff08\u4ece\u697c\u4e0b\u5b66\u5230\u7684\uff09\u3002\u7136\u540e\u4fbf\u662f\u5f88\u7b80\u5355\u7684\u5148\u5e8f\u904d\u5386\u3002\n\n\n\u9644\u4e0ac++\u4ee3\u7801\uff1a\n\n\n\n\n\n```cpp\n#include <bits/stdc++.h>\n#define MAXV 100001\nusing namespace std;\nchar bt[MAXV][3];\nint n ,root;\nchar f ,l ,r;\nvoid preOrder(char x);\nint main()\n{\n    cin>>n;\n    for(int i=1 ;i<=n ;i++) {\n        cin>>f>>l>>r;\n        if(i==1)    root=f;\n        bt[f][1]=l;\n        bt[f][2]=r;\n    }\n    preOrder(root);\n    //system(\"pause\");\n    return 0;\n}\nvoid preOrder(char x)\n{\n    cout<<x;\n    if(bt[x][1]!='*')   preOrder(bt[x][1]);\n    if(bt[x][2]!='*')   preOrder(bt[x][2]);\n}\n\n```",
        "postTime": 1500815104,
        "uid": 36517,
        "name": "ForwarDer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u672c\u6765\u53ea\u662f\u60f3\u4ea4\u4e0a\u53bb\u770b\u770b\u80fd\u5f97\u591a\u5c11\u5206\uff0c\u6ca1\u60f3\u5230\u5c45\u7136AC\u4e86\u3002\n\n\u679c\u7136\u8fd8\u662f\u6570\u636e\u6bd4\u8f83\u5f31\u5417\u2026\u2026\n\n\u8fd8\u6709\uff0c\u7b2c\u4e8c\u884c\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5c31\u662f\u5b83\u7684\u6839\u8282\u70b9\uff08\u9898\u5e72\u6ca1\u8bf4\uff0c\u8ba9\u6211\u6361\u4e86\u4e2a\u6f0f\uff1f\uff09\n\n\u6240\u4ee5\uff0c\u6211\u53ea\u662f\u5efa\u4e86\u4e2a\u6811\uff0c\u7136\u540e\u76f4\u63a5\u5148\u5e8f\u904d\u5386\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nchar lch[30],rch[30];\nchar build(char a,char b,char c){\n    lch[a-'a'] = b;//\u7528\u5b57\u6bcd-\u2018a\u2019\u4f5c\u4e3a\u5b83\u7684\u7f16\u53f7 \n    rch[a-'a'] = c;\n}\nvoid PreOrder(char root){\n    if(root=='*') return;//\u662f'*'\u5c31\u8fd4\u56de \n    cout<<root;\n    PreOrder(lch[root-'a']);\n    PreOrder(rch[root-'a']);\n}\nint main(){\n    int n;\n    cin>>n;\n    char a[4],root;\n    for(int i = 1;i <= n;i++){\n        cin>>a;//\u7528getchar()\u5355\u4e2a\u8f93\u5165\u4f1a\u8f93\u5165\u6362\u884c\u7b26 \n        build(a[0],a[1],a[2]);\n        if(i == 1) root = a[0];\n    }\n    PreOrder(root);\n    return 0;\n}\n```",
        "postTime": 1500019856,
        "uid": 20622,
        "name": "iren",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u7528\u6876\u7684\u601d\u60f3\n\n\n\u56e0\u4e3a\u672c\u8eab\u5c31\u53ea\u670926\\*2\u4e2a\u5b57\u7b26\n\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u8f93\u5165\u6570\u636e\u7684\u7b2c\u4e00\u4e2a\u503c\u5f53\u505a\u6876\u540d\n\n\n\u7136\u540e\u6570\u7ec4\u5d4c\u5957\u8bb0\u5f55\u597d\u5de6\u53f3\u8282\u70b9\u548c\u7236\u4eb2\u8282\u70b9\n\n\n\u627e\u5230\u6839\u8282\u70b9\u540e\u9012\u5f52\u5373\u53ef\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nstruct node\n{\n    char pa;\n    char data;\n    char lc,rc;\n}a[10001];\nint vis[201];\nint root=-1;\nint xianxu(int i)\n{\n    printf(\"%c\",i);\n    if(a[i].lc!='*')\n    xianxu(a[i].lc);\n    if(a[i].rc!='*')\n    xianxu(a[i].rc);\n}\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        char data;\n        cin>>data;\n        cin>>a[data].lc>>a[data].rc;\n        a[a[data].lc].pa=data;\n        a[a[data].rc].pa=data;\n        vis[data]=1;\n    }\n    for(int i=1;i<=122;i++)\n        if(a[i].lc!=0&&a[i].pa==0)\n            root=i;    \n    xianxu(root);\n    return 0;\n}\n```",
        "postTime": 1498037158,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u6211\u89c9\u5f97\u9898\u89e3\u4e0d\u5c11\u4eba\u5199\u5f97\u6bd4\u8f83\u590d\u6742\uff0c\u8fd9\u4e2a\u9898\u76ee\u603b\u7684\u6765\u8bf4\u8981\u70b9\u6709\u4e09\u4e2a\uff1a\n\n\u2460\u6784\u9020\u4e8c\u53c9\u6811\uff0c\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662fn\u7684\u8303\u56f4\u6ca1\u6709\u7ed9\u51fa\uff0c\u6211\u4e00\u5f00\u59cb\u4ee5\u4e3a26\u4e2a\u5b57\u6bcd\u53ea\u4f1a\u51fa\u73b0\u4e00\u6b21\u5c31\u53ea\u5f04\u4e86100\u7684\u6570\u7ec4\uff0c\u4f46\u7ed3\u679c\u5c31\u7206\u4e86\uff0c\u6240\u4ee5\u6211\u5f00\u4e8610000\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u9898\u76ee\u6765\u8bf4\u5e38\u6570\u53ef\u4ee5\u4e86\uff1b\n\n\u2461\u4e09\u56db\u884c\u7684\u524d\u5e8f\u904d\u5386\n\n\u2462\u6d1b\u8c37\u4e13\u5c5e\uff08\u4f46\u5176\u5b9e\u597d\u50cf\u662fLinux\u8bc4\u6d4b\u7cfb\u7edf\uff1f\uff09\u8f93\u5165\u683c\u5f0f\uff0c\u541e\u6362\u884c\u5b57\u7b26\u4e0d\u80fd\u53eagetchar\uff0c\u8fd9\u91cc\u5efa\u8baeC/C++\u515a\u7528C++\u7684getline\uff0c\u4f1a\u5feb\u4e00\u4e9b\uff08\u6bd5\u7adfstring\u7c7b\u65b9\u4fbf\uff09\n\n\u7136\u540e\u5c31\u662f\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<string>\n#include<cstring>\n#define f(i,a,b) for(i=a;i<=b;++i)\nusing std::cin;\nusing std::string;//\u4e0d\u592a\u5efa\u8baeusing namespace std\nint n;\nchar a[10010];\nstring s;\nvoid preorder(int i)\n{\n    if(a[i]==0)return;\n    if(a[i]!='*')printf(\"%c\",a[i]);\n    preorder(i<<1);//\u4f4d\u8fd0\u7b97\uff0c\u8868\u793ai*2\uff0c\u4e0b\u9762\u8868\u793ai*2+1\uff0c\u8fd9\u6837\u5feb\u4e00\u4e9b\n    preorder(i<<1|1);\n}\nint main()\n{\n    int i,j;\n    scanf(\"%d\",&n);\n    string instead;\n    getline(cin,instead);//\u541e\u6362\u884c\n    getline(cin,s);//\u7b2c\u4e00\u4e2a\u76f4\u63a5\u8fdb\u53bb\n    a[1]=s[0],a[2]=s[1],a[3]=s[2];\n    f(i,2,n)\n    {\n    getline(cin,s);\n    f(j,1,10000)if(a[j]==s[0])a[j<<1]=s[1],a[j<<1|1]=s[2];//\u62fc\u5e38\u6570\n    }\n    preorder(1);//\u6839\u8282\u70b91\n}\n```",
        "postTime": 1496912115,
        "uid": 7020,
        "name": "teafrogsf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u9898\u7684\u6570\u636e\u975e\u5e38\u7684\u5f31\uff0c\u9898\u76ee\u6307\u540d\u9053\u59d3\u8bf4\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u731c\u60f3\u8f93\u5165\u8282\u70b9\u662f\u6839\u636e\u5b8c\u5168\u4e8c\u53c9\u6811\u5c42\u6b21\u8f93\u5165\u3002\n\n\u76f4\u63a5\u8bfb\u53d6\u6bcf\u6b21\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff08\u4e5f\u5c31\u662f\u6839\uff09\u5bf9\u5e94\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386\u7684\u4e0b\u6807\u3002\n\n\u4f8b\u5982\u6837\u4f8b\u4e2d\u7684\u6570\u636e\u53ef\u4ee5\u7406\u89e3\u4e3a\u5c42\u6b21\u904d\u5386\uff1a\n\n\u7b2c\u4e00\u5c42                    a\n\n\u7b2c\u4e8c\u5c42             b           c\n\n\u7b2c\u4e09\u5c42          d    i      j\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\u00b7\u00b7\u00b7cpp\n\n```cpp\n#include<iostream>\n#include<string.h>\nusing namespace std;\nchar tree[10005]={0};\nint n;\nvoid serch(int now)\n{\n    if(tree[now]!='0'&&now<=n)\n    {\n        cout<<tree[now];\n        serch(now*2);\n        serch(now*2+1);\n    }\n}\nint main()\n{\n    string in;\n    cin>>n;\n    for(int i=0;i<n;i++)\n    {\n        cin>>in;\n        tree[i+1]=in[0];\n    }\n    serch(1);\n    return 0;\n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1493127067,
        "uid": 38759,
        "name": "kingnle",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "\u6bd4\u8f83\u6c34\u7684\u4e00\u9053\u9898\uff0c\u4e00\u6b21AC\u3002\n\n\u5728\u4e0d\u8003\u8651\u6570\u636e\u5b9e\u9645\u6709\u591a\u5f31\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u96be\u70b9\u6709\u4e8c\uff1a\n\n1\u3001\u5148\u5e8f\u904d\u5386 // \u7136\u800c\u5e76\u4e0d\u96be\n\n2\u3001\u5efa\u6811\n\n\u6211\u4eec\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u52a8\u6001\u8282\u70b9\u6570\u7ec4\u6765\u5b58\u50a8\u6811\uff0c\u4ece\u91cc\u9762\u52a8\u6001\u8bfb\u53d6\u5730\u5740\u3002\n\n\u540c\u65f6\u7528\u4e00\u4e2a\u6307\u9488\u6765\u8bb0\u5f55 root \u7684\u5730\u5740\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\nCPP // \u7136\u800c\u6539\u6389\u5934\u6587\u4ef6\u57fa\u672c\u5c31\u662fC\n\n#include <cstdio>\n\n#include <cstdlib>\n\nclass NODE\n\n{\npublic :\n\n\n\n\n\n```cpp\n    NODE *l,*r,*p;\n    char entity;\n};\nNODE *FindNode(char entity) , *GetNewNode(char entity) ; // \u67e5\u8be2\u7ed9\u5b9a\u540d\u79f0\u7684\u8282\u70b9\u4ee5\u53ca\u521b\u5efa\u65b0\u8282\u70b9\nNODE *list ; // \u5185\u5b58\u533a\nint used , n ; // \u5df2\u4f7f\u7528\u8282\u70b9\uff0c\u603b\u7ed3\u70b9\u6570\nNODE* root; // \u6839\u8282\u70b9\u5730\u5740\nvoid dfs(NODE* node); // \u5148\u5e8f\u904d\u5386\nint main()\n{\n    scanf(\"%d\",&n);\n    list = (NODE*)calloc(n,sizeof(NODE));\n    for(int i=0;i<n;i++)\n    {\n        char ta,tb,tc;\n        scanf(\" %c %c %c\",&ta,&tb,&tc);\n        NODE* a = FindNode(ta);\n        if(root == NULL)root = a;\n        if(tb != '*')\n        {\n            NODE* b = FindNode(tb);\n            a->l = b;\n            b->p = a;\n            if(root == b)root = a; // \u82e5\u5b50\u8282\u70b9\u4e3a\u6839\u8282\u70b9\uff0c\u6307\u9488\u4e0a\u79fb\n        }\n        if(tc != '*')\n        {\n            NODE* c = FindNode(tc);\n            a->r = c;\n            c->p = a;\n            if(root == c)root = a;// \u82e5\u5b50\u8282\u70b9\u4e3a\u6839\u8282\u70b9\uff0c\u6307\u9488\u4e0a\u79fb\n        }\n    }\n    dfs(root);\n}\nNODE* FindNode(char entity)\n{\n    for(int i=0;i<used;i++)\n    {\n        if(list[i].entity == entity)return &list[i];\n    }\n    return GetNewNode(entity);\n}\nNODE* GetNewNode(char entity)\n{\n    list[used].entity = entity;\n    return &list[used++];\n}\nvoid dfs(NODE* node)\n{\n    printf(\"%c\",node->entity);\n    if(node->l)dfs(node->l);\n    if(node->r)dfs(node->r);\n}\n```",
        "postTime": 1491804070,
        "uid": 30310,
        "name": "RedContritio",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "P\u515a\u7684\u4e09\u6b21\u904d\u5386\uff0c\u5566\u5566\u5566\u5566\n\n\n\n\n```cpp\nprogram exz;\nvar a:array['a'..'z',1..2] of char;//\u7528\u4e8e\u5b58\u50a8\u6811\n    i,n:longint;\n    h,x,y,root:char;\n//root\u4e3a\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\nprocedure dfs1(c:char);//\u524d\u5e8f\u904d\u5386\nbegin\n  write(c);\n  if a[c,1]<>'*' then dfs1(a[c,1]);\n  if a[c,2]<>'*' then dfs1(a[c,2]);\nend;\n{procedure dfs2(c:char);//\u4e2d\u5e8f\u904d\u5386\nbegin\n  if a[c,1]<>'*' then dfs2(a[c,1]);\n  writeln(c);\n  if a[c,2]<>'*' then dfs2(a[c,2]);\nend;}\n{procedure dfs3(c:char);//\u540e\u5e8f\u904d\u5386\nbegin\n  if a[c,1]<>'*' then dfs3(a[c,1]);\n  if a[c,2]<>'*' then dfs3(a[c,2]);\n  writeln(c);\nend;}\nbegin\n  readln(n);\n  for i:=1 to n do\n  begin\n    readln(h,x,y);\n    if i=1 then root:=h;//\u786e\u5b9a\u6839\u8282\u70b9\n    a[h,1]:=x;\n    a[h,2]:=y;\n  end;\n  dfs1(root); writeln;\n  //dfs2(root); writeln;\n  //dfs3(root); writeln;\nend.\n//\u4e5f\u5c31\u8fd9\u4e9b\u4e86\uff0c\u5b9e\u5728\u6ca1\u4ec0\u4e48\u597d\u5199\u7684\n```",
        "postTime": 1475929358,
        "uid": 9538,
        "name": "\u5434\u56fd\u94e8",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    },
    {
        "content": "```cpp\nvar\n a:array['a'..'z',1..2]of char;//a[c,1]\u8868\u793ac\u7684\u5de6\u513f\u5b50a[c,2]\u8868\u793ac\u7684\u6709\u513f\u5b50\n n,o:longint;c1,c2,c3:char;\nprocedure qx(c:char);//\u6c42\u524d\u5e8f\u6392\u5217\n begin\n  write(c);//\u6839\n  if a[c,1]<>'*' then qx(a[c,1]);//\u5982\u679c\u6709\u5de6\u513f\u5b50\u5c31\u904d\u5386\u5de6\u513f\u5b50\n  if a[c,2]<>'*' then qx(a[c,2]);//\u5982\u679c\u6709\u53f3\u513f\u5b50\u5c31\u904d\u5386\u53f3\u513f\u5b50\n end;\nbegin\n readln(n);\n for o:=1 to n do\n  begin\n   readln(c1,c2,c3);\n   a[c1,1]:=c2;//c1\u5de6\u513f\u5b50\u662fc2\n   a[c1,2]:=c3;//c1\u53f3\u513f\u5b50\u662fc3\n  end;\n qx('a');//\u524d\u5e8f\n writeln;//\u6362\u884c\nend.\n```",
        "postTime": 1471402092,
        "uid": 21490,
        "name": "weng_233",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1305 \u3010\u65b0\u4e8c\u53c9\u6811\u3011"
    }
]