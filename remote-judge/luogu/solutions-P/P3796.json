[
    {
        "content": "\u4f9d\u65e7\u662fAC\u81ea\u52a8\u673a\u7684\u6a21\u677f\u9898\n\n\u5176\u5b9e\u548c\uff08\u7b80\u5355\uff09\u7684\u90a3\u4e2a\u6a21\u677f\u9898\u662f\u4e00\u6837\u7684\n\n\u53ea\u9700\u8981\u628a\u6700\u7ec8\u6c42\u89e3\u7684\u4e1c\u897f\u4fee\u6539\u4e00\u4e0b\u5373\u53ef\n\n\u5176\u4ed6\u7684\u90fd\u5199\u5728\u6ce8\u91ca\u91cc\u9762\u4e86\n\nAC\u81ea\u52a8\u673a\u662f\u4e2a\u597d\u4e1c\u897f\u3002\u3002\u3002\n\n\u4f46\u662f\u6211\u81ea\u5df1\u6253\u7684\u65f6\u5019\u4e0d\u77e5\u9053\u4e3a\u5565\uff0c\u5bb9\u6613TLE\u3002\u3002\n\n\u53ef\u80fd\u662f\u6211\u5199\u7684\u592a\u4e11\u4e86\u3002\u3002\u3002\u3002\n\n\u987a\u5e26\u628a\u535a\u5ba2\u94fe\u63a5\u641e\u4e00\u4e0b\u628a\n\n[\u5982\u679c\u4e0d\u592a\u61c2AC\u81ea\u52a8\u673a\u53ef\u4ee5\u770b\u4e00\u4e0b](http://www.cnblogs.com/cjyyb/p/7196308.html)\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nstruct Tree//\u5b57\u5178\u6811 \n{\n     int fail;//\u5931\u914d\u6307\u9488\n     int vis[26];//\u5b50\u8282\u70b9\u7684\u4f4d\u7f6e\n     int end;//\u6807\u8bb0\u4ee5\u8fd9\u4e2a\u8282\u70b9\u7ed3\u5c3e\u7684\u5355\u8bcd\u7f16\u53f7 \n}AC[100000];//Trie\u6811\nint cnt=0;//Trie\u7684\u6307\u9488 \nstruct Result\n{\n      int num;\n      int pos;\n}Ans[100000];//\u6240\u6709\u5355\u8bcd\u7684\u51fa\u73b0\u6b21\u6570 \nbool operator <(Result a,Result b)\n{\n      if(a.num!=b.num)\n         return a.num>b.num;\n      else\n         return a.pos<b.pos;\n}\nstring s[100000];\ninline void Clean(int x)\n{\n       memset(AC[x].vis,0,sizeof(AC[x].vis));\n       AC[x].fail=0;\n       AC[x].end=0;\n}\ninline void Build(string s,int Num)\n{\n        int l=s.length();\n        int now=0;//\u5b57\u5178\u6811\u7684\u5f53\u524d\u6307\u9488 \n        for(int i=0;i<l;++i)//\u6784\u9020Trie\u6811\n        {\n                if(AC[now].vis[s[i]-'a']==0)//Trie\u6811\u6ca1\u6709\u8fd9\u4e2a\u5b50\u8282\u70b9\n                {\n                   AC[now].vis[s[i]-'a']=++cnt;//\u6784\u9020\u51fa\u6765\n                   Clean(cnt);\n                }\n                now=AC[now].vis[s[i]-'a'];//\u5411\u4e0b\u6784\u9020 \n        }\n        AC[now].end=Num;//\u6807\u8bb0\u5355\u8bcd\u7ed3\u5c3e \n}\nvoid Get_fail()//\u6784\u9020fail\u6307\u9488\n{\n        queue<int> Q;//\u961f\u5217 \n        for(int i=0;i<26;++i)//\u7b2c\u4e8c\u5c42\u7684fail\u6307\u9488\u63d0\u524d\u5904\u7406\u4e00\u4e0b\n        {\n               if(AC[0].vis[i]!=0)\n               {\n                   AC[AC[0].vis[i]].fail=0;//\u6307\u5411\u6839\u8282\u70b9\n                   Q.push(AC[0].vis[i]);//\u538b\u5165\u961f\u5217 \n               }\n        }\n        while(!Q.empty())//BFS\u6c42fail\u6307\u9488 \n        {\n              int u=Q.front();\n              Q.pop();\n              for(int i=0;i<26;++i)//\u679a\u4e3e\u6240\u6709\u5b50\u8282\u70b9\n              {\n                        if(AC[u].vis[i]!=0)//\u5b58\u5728\u8fd9\u4e2a\u5b50\u8282\u70b9\n                      {\n                                AC[AC[u].vis[i]].fail=AC[AC[u].fail].vis[i];\n                                    //\u5b50\u8282\u70b9\u7684fail\u6307\u9488\u6307\u5411\u5f53\u524d\u8282\u70b9\u7684\n                                  //fail\u6307\u9488\u6240\u6307\u5411\u7684\u8282\u70b9\u7684\u76f8\u540c\u5b50\u8282\u70b9 \n                                Q.push(AC[u].vis[i]);//\u538b\u5165\u961f\u5217 \n                      }\n                      else//\u4e0d\u5b58\u5728\u8fd9\u4e2a\u5b50\u8282\u70b9 \n                      AC[u].vis[i]=AC[AC[u].fail].vis[i];\n                      //\u5f53\u524d\u8282\u70b9\u7684\u8fd9\u4e2a\u5b50\u8282\u70b9\u6307\u5411\u5f53\n                      //\u524d\u8282\u70b9fail\u6307\u9488\u7684\u8fd9\u4e2a\u5b50\u8282\u70b9 \n              }\n        }\n}\nint AC_Query(string s)//AC\u81ea\u52a8\u673a\u5339\u914d\n{\n        int l=s.length();\n        int now=0,ans=0;\n        for(int i=0;i<l;++i)\n        {\n                now=AC[now].vis[s[i]-'a'];//\u5411\u4e0b\u4e00\u5c42\n                for(int t=now;t;t=AC[t].fail)//\u5faa\u73af\u6c42\u89e3\n                         Ans[AC[t].end].num++;\n        }\n        return ans;\n}\nint main()\n{\n     int n;\n     while(233)\n     {\n          cin>>n;\n          if(n==0)break;\n          cnt=0;\n          Clean(0);\n         for(int i=1;i<=n;++i)\n         {\n                 cin>>s[i];\n                 Ans[i].num=0;\n                 Ans[i].pos=i;\n                 Build(s[i],i);\n         }\n         AC[0].fail=0;//\u7ed3\u675f\u6807\u5fd7 \n         Get_fail();//\u6c42\u51fa\u5931\u914d\u6307\u9488\n         cin>>s[0];//\u6587\u672c\u4e32 \n         AC_Query(s[0]);\n         sort(&Ans[1],&Ans[n+1]);\n         cout<<Ans[1].num<<endl;\n         cout<<s[Ans[1].pos]<<endl;\n         for(int i=2;i<=n;++i)\n         {\n                if(Ans[i].num==Ans[i-1].num)\n                  cout<<s[Ans[i].pos]<<endl;\n                else\n                   break;\n         }\n     }\n     return 0;\n}\n```",
        "postTime": 1507102921,
        "uid": 21283,
        "name": "yybyyb",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u5148\u819c\u4e00\u53d1 [yyb\u5de8\u4f6c](https://www.luogu.org/space/show?uid=21283) orz\n\n\u6ca1\u9519\uff0c\u4e0a\u9762\u5c31\u662f\u4ed6\u7684\u9898\u89e3\u3002\n\n\u4f9d\u65e7\u662f\u6a21\u677f\uff0c\u60f3\u5b66ac\u81ea\u52a8\u673a\u7684\u8bdd\uff0c\u518d\u6b21\u63a8\u8350\u4e00\u4e0b[yyb\u5de8\u4f6c\u7684\u535a\u5ba2](http://www.cnblogs.com/cjyyb/p/7196308.html)\uff0c\u672c\u849f\u84bb\u4e5f\u662f\u4ece\u90a3\u91cc\u5f00\u59cb\u5b66\u7684\u3002\n\n\u4e0a\u9762\u5bf9\u6b64\u9898\u57fa\u672c\u7684\u601d\u8def\u90fd\u8bb2\u5f97\u633a\u597d\u7684\u3002\u8fd9\u91cc\u53ea\u662f\u4f5c\u4e00\u4e2a\u5c0f\u5c0f\u7684\u8865\u5145\uff0c\u6bd5\u7adf\u849f\u84bb\u771f\u7684\u88abTLE\u641e\u6015\u4e86\uff0c\u8fdeyyb\u5de8\u4f6c\u4e5f\u4e0d\u80fd\u5e78\u514d\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u7528\u4f20\u7edf\u65b9\u6cd5\u5339\u914d\u65f6\uff0c\u6bcf\u8d70\u5230\u4e00\u4e2a\u65b0\u4f4d\u7f6e\uff0c\u90fd\u662f\u8981\u7edf\u8ba1\u7b54\u6848\u7684\u3002\u600e\u4e48\u7edf\u8ba1\u5462\uff1f\u66b4\u529b\u8df3$fail$\uff0c\u628a\u6cbf\u8def\u4e0a\u80fd\u591f\u4ea7\u751f\u7b54\u6848\u7684\u7b97\u4e0a\uff0c\u76f4\u5230\u8df3\u5230\u6839\u624d\u505c\u4e0b\u6765\u3002\u8fd9\u91cc\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\sum70|T|)$\uff0c\u5728\u6709\u591a\u7ec4\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u5176\u5b9e\u662f\u5f88\u5403\u4e8f\u7684\u3002\uff08\u849f\u84bb\u7528\u4e86$fread$\uff0c\u6839\u636e\u76ee\u6d4b\uff0c\u6700\u5927\u7684\u4e00\u4e2a\u70b9\u8f93\u5165\u5927\u5c0f\u5728$30MB$\u4ee5\u4e0a\uff01\uff01\uff01\uff09\u6216\u8bb8\u8fd9\u91cc\u5c31\u662fTLE\u7684\u6076\u9b54\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u66b4\u8df3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8d70\u5230\u7684\u5f88\u591a\u8282\u70b9\uff0c\u5bf9\u7b54\u6848\u662f\u6ca1\u6709\u8d21\u732e\u7684\u3002\u5f88\u81ea\u7136\u7684\u60f3\u5230\uff0c\u8fd9\u4e9b\u70b9\u53ef\u4e0d\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u5462\uff1f\u6216\u8005\u8bf4\uff0c\u4e00\u6bb5\u6ca1\u6709\u8d21\u732e\u7684\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u628a\u5b83\u50cf\u5e76\u67e5\u96c6\u4e00\u6837\u641e\u4e00\u4e2a\u8def\u5f84\u538b\u7f29\u5462\uff1f\n\n\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u6709\u4e14\u4ec5\u6709\u60df\u4e00\u7684$fail$\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u662f\u53ef\u884c\u7684\uff01\u6211\u4eec\u8bbe\u4e00\u4e2a\u72b6\u6001$g[i]$\uff0c\u8868\u793a\u6cbf\u7740$i$\u5411\u4e0a\u8df3$fail$\u8df3\u5230\u7684\u7b2c\u4e00\u4e2a\u80fd\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u7684\u4f4d\u7f6e\uff08\u4e5f\u5c31\u662f\u67d0\u4e2a\u5355\u8bcd\u7ed3\u5c3e\u7684$end$\u4f4d\u7f6e\uff09\uff0c\u627e\u4e0d\u5230\u7684\u8bdd\u5f53\u7136\u8bbe\u4e3a\u865a\u6839$0$\u4e86\u3002\u6b64\u72b6\u6001\u53ef\u4ee5\u901a\u8fc7\u9012\u63a8\u5f97\u5230\uff0c\u5728\u6c42$fail$\u7684\u65f6\u5019\u4e5f\u4e00\u8d77\u63a8\u51fa\u6765\u4e86\u3002\n\n\u6709\u4e86\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u5177\u4f53\u63a8\u6cd5\u4e5f\u5c31\u5f88\u660e\u663e\u4e86\u3002\u5982\u679c$fail[i]$\u4e3a\u67d0\u5355\u8bcd\u7ed3\u5c3e\uff0c\u90a3\u4e48$g[i]=fail[i]$\u3002\u5426\u5219$g[i]=g[fail[i]]$\u3002\n\n\u7edf\u8ba1\u7b54\u6848\u5c31\u4e0d\u8df3$fail$\u4e86\uff0c\u800c\u662f\u8df3$g$\uff0c\u540c\u6837\u662f\u8df3\u5230\u6839\u4e3a\u6b62\u3002\n\n\u8fd9\u79cd\u4f18\u5316\u5b9e\u9645\u590d\u6742\u5ea6\u5e76\u6ca1\u6709\u53d8\uff08\u6700\u574f\u60c5\u51b5\u4e0b\u662f\u4e00\u6837\u7684\uff09\uff0c\u4f46\u662f\u5b9e\u9645\u6548\u679c\u8fd8\u662f\u633a\u597d\u7684,\u6bd4\u8f83\u5927\u7684\u70b9\u53ef\u4ee5\u4f18\u5316$25\\%$\u4ee5\u4e0a\u3002\n\n\u5b9e\u5728TLE\u7684\u8bdd\uff0c $fread,fwrite,register,inline,$~~O2~~\u5957\u9910\u5949\u4e0a\u3002\u3002\u3002\u3002\u3002\u3002\n\n~~\u6211\u4e0d\u4f1a\u544a\u8bc9\u5927\u5bb6yyb\\_test 896ms\u6210\u529f\u51b2\u5230\u4e86rank1\u3002\u3002\u3002\u3002\u3002\u3002\uff08\u5bf9\u4f60\u6ca1\u770b\u9519\uff0c\u662fyyb\\_test\u800c\u4e0d\u662fFlashHu\uff09~~\n\n\u9644\u4e0a\u6570\u7ec4\u7248\u4ee3\u7801\uff0c~~\u53ef\u80fd\u6709\u70b9\u4e11~~\n```cpp\n#include<cstdio>\n#include<cstring>\n#define now c[u][*p-'a']\n#define skip while(*++p<=' ')//\u8df3\u8fc7\u7a7a\u5b57\u7b26\nconst int N=1000009;\nchar s[N<<6],o[N<<4],*m[159];//m\u5b58\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u6307\u9488\nint c[N][26],f[N],e[N],g[N],q[N],a[159];\n//f\u5373fail,e\u5373end,q\u961f\u5217,g\u5982\u4e0a\u63cf\u8ff0\nint main()\n{\n    fread(s,1,sizeof(s),stdin);//\u5947\u6280\u6deb\u5de7\u4e4bfread\n    register char *p=s,*p1=o;//p\u8bfb\u5165\uff0cp1\u8f93\u51fa\n    register int n,cnt,i,h,t,u,v,mx;\n    while((n=*p&15))\n    {\n        while(*++p>='0')\n            n*=10,n+=*p&15;\n        cnt=h=t=0;\n        //\u5efa\u81ea\u52a8\u673a\u5f00\u59cb\n        for(i=1;i<=n;++i)\n        {\n            skip;m[i]=p;\n            for(u=0;*p>='a';++p)\n                u=now?now:(now=++cnt);\n            e[u]=i;//end\u5b58\u7684\u662f\u6a21\u5f0f\u4e32\u7f16\u53f7\u800c\u4e0d\u662f\u4e2a\u6570\u4e86\n        }\n        skip;m[i]=p;\n        //bfs\u5f00\u59cb\uff0c\u6c42fail\u4ee5\u53cag\n        for(i=0;i<26;++i)//\u7b2c\u4e00\u5c42\u63d0\u524d\u5904\u7406\n            if(c[0][i])q[++t]=c[0][i];\n        while(h<t)\n        {\n            u=q[++h];\n            for(i=0;i<26;++i)\n                if((v=c[u][i]))\n                {\n                    f[q[++t]=v]=c[f[u]][i];\n                    g[v]=e[f[v]]?f[v]:g[f[v]];\n                }\n                else c[u][i]=c[f[u]][i];//\u628a\u7a7a\u513f\u5b50\u7f6e\u4e3afail\u7684\u5bf9\u5e94\u513f\u5b50\uff0c\u5339\u914d\u7684\u65f6\u5019\u65b9\u4fbf\u70b9\n        }\n        //\u5339\u914d\u5f00\u59cb\n        for(u=0;*p>='a';++p)\n            for(v=u=now;v;v=g[v])//\u6cbf\u7740g\u7edf\u8ba1\u7b54\u6848\n                ++a[e[v]];\n        //\u7edf\u8ba1\u7b54\u6848\u5f00\u59cb\uff0c\u5176\u5b9e\u4e0d\u7528sort\uff0c\u626b\u4e00\u904d\u5c31\u597d\u5566\n        mx=t=0;\n        for(i=1;i<=n;++i)\n            if(mx<a[i])mx=a[q[t=1]=i];\n            else if(mx==a[i])q[++t]=i;\n        //\u8f93\u51fa\u7b54\u6848\u5f00\u59cb\n        sprintf(p1,\"%d\\n\",mx);\n        while(*++p1);\n        for(i=1;i<=t;++i)\n        {\n            memcpy(p1,m[q[i]],m[q[i]+1]-m[q[i]]);//\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u7528strcpy\u4f1aMLE\uff0c\u96be\u9053\u4ea7\u751f\u4e86\u7f13\u5b58\u7a7a\u95f4\uff1f\uff01\n            p1+=m[q[i]+1]-m[q[i]];\n        }//\u8bb0\u5f97\u591a\u7ec4\u6570\u636e\uff0c\u5f04\u5b8c\u4e00\u7ec4\u5168\u6e05\u7a7a\n        memset(c,0,++cnt*104);\n        memset(f,0,cnt<<2);\n        memset(e,0,cnt<<2);\n        memset(g,0,cnt<<2);\n        memset(a,0,(n+1)<<2);\n        skip;\n    }\n    fwrite(o,1,p1-o,stdout);//\u5947\u6280\u6deb\u5de7\u4e4bfwrite\n    return 0;\n}\n```\n\n### update:\n\n\u7a81\u7136\u60f3\u5230$fail$\u7684\u5f62\u6001\u662f\u4e00\u68f5\u6811\uff0c\u90a3\u4e48$g$\u663e\u7136\u4e5f\u662f\uff0c\u90a3\u4e48\u5339\u914d\u7684\u6bcf\u4e2a\u70b9\u4e0d\u5c31\u662f\u5bf9\u5728$g$\u6811\u4e0a\u7684\u4e00\u6761\u94fe\u4e0a\u7684\u6240\u6709\u70b9\u4ea7\u751f$1$\u7684\u8d21\u732e\u5417\uff1f\u4f55\u5fc5\u8fd8\u8981\u66b4\u529b\u8df3\uff0c\u76f4\u63a5\u628a\u8d21\u732e\u6682\u65f6\u5b58\u8d77\u6765\u6700\u540e\u518d\u505a\u4e00\u904d\u6811\u5f62DP\u4e0d\u5c31\u884c\u4e86\u4e48\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u590d\u6742\u5ea6\u6210\u529f\u964d\u81f3\u7ebf\u6027$O(\\sum|S|+\\sum|T|)$\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#define R register\n#define now c[u][*p-'a']\n#define skip while(*++p<=' ')//\u8df3\u8fc7\u7a7a\u5b57\u7b26\nconst int N=159,S=20009,T=1000009;\nchar s[T<<6],o[T],*m[N];//m\u5b58\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u6307\u9488\nint c[S][26],f[S],e[S],g[S],q[S],a[N],he[N],ne[N],to[N];\n//f\u5373fail,e\u5373end,q\u961f\u5217,g\u5982\u4e0a\u63cf\u8ff0\nvoid dp(R int x){\n    for(R int i=he[x];i;i=ne[i])\n        dp(to[i]),a[x]+=a[to[i]];\n}\nint main()\n{\n    fread(s,1,sizeof(s),stdin);//\u5947\u6280\u6deb\u5de7\u4e4bfread\n    R char *p=s,*p1=o;//p\u8bfb\u5165\uff0cp1\u8f93\u51fa\n    R int n,cnt,i,h,t,pe,u,v,mx;\n    while((n=*p&15))\n    {\n        while(*++p>='0')\n            n*=10,n+=*p&15;\n        cnt=h=t=pe=0;\n        //\u5efa\u81ea\u52a8\u673a\u5f00\u59cb\n        for(i=1;i<=n;++i)\n        {\n            skip;m[i]=p;\n            for(u=0;*p>='a';++p)\n                u=now?now:(now=++cnt);\n            at[e[u]=i]=u;//end\u5b58\u7684\u662f\u6a21\u5f0f\u4e32\u7f16\u53f7\u800c\u4e0d\u662f\u4e2a\u6570\u4e86\n        }\n        skip;m[i]=p;\n        //bfs\u5f00\u59cb\uff0c\u6c42fail\u4ee5\u53cag\n        for(i=0;i<26;++i)//\u7b2c\u4e00\u5c42\u63d0\u524d\u5904\u7406\n            if(c[0][i])q[++t]=c[0][i];\n        while(h<t)\n        {\n            if(e[u=q[++h]])\n                to[++pe]=e[u],ne[pe]=he[e[g[u]]],he[e[g[u]]]=pe;\n            for(i=0;i<26;++i)\n                if((v=c[u][i]))\n                {\n                    f[q[++t]=v]=c[f[u]][i];\n                    g[v]=e[f[v]]?f[v]:g[f[v]];\n                }\n                else c[u][i]=c[f[u]][i];//\u628a\u7a7a\u513f\u5b50\u7f6e\u4e3afail\u7684\u5bf9\u5e94\u513f\u5b50\uff0c\u5339\u914d\u7684\u65f6\u5019\u65b9\u4fbf\u70b9\n        }\n        //\u5339\u914d\u5f00\u59cb\n        for(u=0;*p>='a';++p)\n            u=now,++a[e[u]?e[u]:e[g[u]]];\n        //\u7edf\u8ba1\u7b54\u6848\u5f00\u59cb\uff0c\u5176\u5b9e\u4e0d\u7528sort\uff0c\u626b\u4e00\u904d\u5c31\u597d\u5566\n        dp(0);\n        mx=t=0;\n        for(i=1;i<=n;++i)\n            if(mx<a[i])mx=a[q[t=1]=i];\n            else if(mx==a[i])q[++t]=i;\n        //\u8f93\u51fa\u7b54\u6848\u5f00\u59cb\n        sprintf(p1,\"%d\\n\",mx);\n        while(*++p1);\n        for(i=1;i<=t;++i)\n        {\n            memcpy(p1,m[q[i]],m[q[i]+1]-m[q[i]]);//\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u7528strcpy\u4f1aMLE\uff0c\u96be\u9053\u4ea7\u751f\u4e86\u7f13\u5b58\u7a7a\u95f4\uff1f\uff01\n            p1+=m[q[i]+1]-m[q[i]];\n        }//\u8bb0\u5f97\u591a\u7ec4\u6570\u636e\uff0c\u5f04\u5b8c\u4e00\u7ec4\u5168\u6e05\u7a7a\n        memset(c,0,++cnt*104);\n        memset(f,0,cnt<<2);\n        memset(e,0,cnt<<2);\n        memset(g,0,cnt<<2);\n        memset(a,0,++n<<2);\n        memset(he,0,n<<2);\n        skip;\n    }\n    fwrite(o,1,p1-o,stdout);//\u5947\u6280\u6deb\u5de7\u4e4bfwrite\n    return 0;\n}\n```",
        "postTime": 1517025187,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "AC\u81ea\u52a8\u673a\u662f\u7ed3\u5408\u4e86KMP\u7684\u5931\u914d\u6307\u9488\u548cTRIE\u7684\u6811\u5f62\u7ed3\u6784\u7684\u4e00\u79cd\u7b97\u6cd5\u3002\n\n\uff08\u6240\u4ee5\u6211\u4eec\u8981\u628aKMP\u548cTRIE\u5148\u641e\u660e\u767d\uff09\n\n\n- \nAC\u81ea\u52a8\u673a\n--\n\n~~\u5c31\u662f\u80fd\u81ea\u52a8AC\u7684\u673a\u5668~~\n\n\t\n AC\u81ea\u52a8\u673a\u6709\u4e09\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f\u5efa\u6811\uff0c\u83b7\u53d6\u5931\u914d\u6307\u9488\u548c\u67e5\u8be2\u3002\n    \n   \u5148\u5efa\u4e00\u68f5TRIE\u6811\uff0c\u518d\u628aTRIE\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7684\u5931\u914d\u6307\u9488\uff08\u91cd\u70b9\u4e2d\u7684\u91cd\u70b9\uff09\u6c42\u51fa\uff0c\u6700\u540e\u67e5\u8be2\u6587\u672c\u3002\n    \n   \u9996\u5148 \u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e9b\u9700\u8981\u7528\u7684\u6570\u7ec4\u3002\n    \n         int num[300010];//\u7ed3\u70b9\u7f16\u53f7\n         int ch[300010][26];//\u5b50\u7ed3\u70b9\n         int fail[300010];//\u5931\u914d\u6307\u9488\n         int ans[300010];//\u7b54\u6848\n- \n\u5efa\u6811\n--\n\u8fd9\u662f\u4e00\u4e2a\u88f8TRIE\u3002\u76f4\u63a5\u8d34\u4ee3\u7801\u3002\n\n```cpp\n\tvoid insert(string s,int v){\n    \tint now=0;//\u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\n    \tfor(int i=0;i<s.size();i++){\n\t        int o=s[i]-'a';\n    \t    if(!ch[now][o])ch[now][o]=++siz;//\u65b0\u7f16\u53f7\n        \tnow=ch[now][o];//\u7ee7\u7eed\u8bbf\u95ee\n    \t}\n    \tnum[now]=v;//\u6807\u8bb0\n\t}\n```\n\n- \n\u83b7\u53d6\u5931\u914d\u6307\u9488\n--\n\tAC\u81ea\u52a8\u673a\u7684fail[a]=b\u4e14b!=root\uff0c\u5219a\u548cb\u6240\u4ee3\u8868\u7684\u5b57\u7b26\u76f8\u540c\u4e14a\u7684\u7236\u7ed3\u70b9\u7684fail\u503c\u4e3ab\u7684\u7236\u8282\u70b9\u3002\n    \n    \u55ef\uff0c\u6587\u5b57\u96be\u514d\u6709\u4e9b\u4ee4\u4eba\u8d39\u89e3\uff0c\u6211\u4eec\u628a\u5b83\u8f6c\u5316\u6210\u4ee3\u7801\u3002\n    \n\t```\n\tfail[v]=ch[fail[u][i];\n\t```\n    \u5176\u4e2dv\u662fu\u7684\u7f16\u53f7\u4e3ai\u7684\u5b50\u8282\u70b9\u3002\n    \n    \u53ef\u662f\uff0c\u5982\u679cv\u4e0d\u5b58\u5728\u5462\uff1f\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679cu\u6ca1\u6709\u7f16\u53f7\u4e3ai\u7684\u5b50\u8282\u70b9\u5462\uff1f\n    \n    \u90a3\u4e48\u6211\u4eec\u5c31\u628au\u7684\u7f16\u53f7\u4e3ai\u7684\u8282\u70b9\u76f4\u63a5\u8bbe\u4e3afail[u]\u7684\u7f16\u53f7\u4e3ai\u7684\u5b50\u8282\u70b9\u3002\u4ee3\u7801\uff1a\n    ```\n\tch[u][i]=ch[fail[u]][i];\n```\n    \n    \u53e6\u5916\uff0c\u4e0eroot\u76f8\u8fde\u7684\u6240\u6709\u7ed3\u70b9\u7684fail\u503c\u4e3a0\u3002\n\n      \u4ee3\u7801\u5949\u4e0a\u3002\n\n     \t \n          void getfail(){\n              int now=0;//\u5f53\u524d\u8bbf\u95ee\n              queue<int>que;//\u961f\u5217\n              for(int i=0;i<26;i++)if(ch[0][i])que.push(ch[0][i]),fail[ch[0][i]]=0;//\u628a\u4e0e\u6839\u76f8\u8fde\u7684\u7ed3\u70b9push\u5165\n              while(!que.empty()){\n                  int u=que.front();que.pop();//\u961f\u5217pop\n                  for(int i=0;i<26;i++){\n                      int v=ch[u][i];\n                      if(v)fail[v]=ch[fail[u]][i],que.push(v);//\u60c5\u51b51\uff1av\u5b58\u5728\n                      else ch[u][i]=ch[fail[u]][i];//\u60c5\u51b52\uff1av\u4e0d\u5b58\u5728\n                  }\n              }\n          }\n          \n     \t\n        \n\u8fd9\u91cc\u8fd8\u6709\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u7ec6\u8282\uff1a\u82e5fail[a]=b\uff0c\u5219root\u5230a\u7684\u94fe\u4e00\u5b9a\u5305\u542broot\u5230b\u7684\u94fe\u3002\n- \n \u67e5\u8be2\n --\n \u8fd9\u662f\u4e00\u4e2a\u4e0eKMP\u6700\u76f8\u4f3c\u7684\u90e8\u5206\u3002\n \n \u5047\u8bbe\u6211\u4eec\u8981\u67e5\u8be2s\uff0c\u73b0\u5728\u8bbf\u95ee\u5230s[i]\uff0cs[i]\u5728TRIE\u6811\u4e0a\u7684\u7f16\u53f7\u4e3anow\u3002\u6211\u4eec\u53ea\u9700\u5b9a\u4e49j=now\uff0c\u7136\u540ej\u4e0d\u505c\u7684fail\uff0c\u671f\u95f4ans[num[j]]++,\u7b54\u6848\u5c31\u51fa\u6765\u4e86\u3002\n \n \u8fd9\u4e9b\u90fd\u662f\u57fa\u4e8e\u6211\u521a\u521a\u6240\u8bb2\u7684\u4e00\u4e2a\u7ec6\u8282\u3002\u5982\u679croot\u5230a\u7684\u94fe\u5b58\u5728\u4e0es\uff0c\u5219root\u5230fail[a]\u7684\u94fe\u4e5f\u5b58\u5728\u4e8es\u3002\n \n \u8fd9\u6837\u5b50\u7684\u8bdd\uff0c\u6240\u6709\u56f0\u96be\u90fd\u8fce\u5203\u800c\u89e3\u3002\n```cpp\nvoid query(string s){\n    \tint now=0;//\u5f53\u524d\u8bbf\u95ee\u8282\u70b9\n    \tfor(int i=0;i<s.size();i++){\n        \tnow=ch[now][s[i]-'a'];//\u66f4\u65b0\u8282\u70b9\n        \tfor(int j=now;j;j=fail[j])ans[val[j]]++;//\u8fdb\u884c\u7b54\u6848\u7d2f\u8ba1\n    \t}\n\t}\n```\n- \nAC Code\n--\n\n\t\u672c\u849f\u84bb 8044ms\u7684\u4ee3\u7801\u3002\n\n\n        #include<iostream>\n        #include<cstdio>\n        #include<cstring>\n        #include<queue>\n        using namespace std;\n        string mob[300010];\n        int num[300010];\n        int ch[300010][26];\n        int fail[300010];\n        int ans[300010];\n        int temp;\n        int n,siz;\n        void insert(string s,int v){\n            int now=0;\n            for(int i=0;i<s.size();i++){\n                int o=s[i]-'a';\n                if(!ch[now][o])ch[now][o]=++siz;\n                now=ch[now][o];\n            }\n            num[now]=v;\n        }\n        void getfail(){\n            int now=0;\n            queue<int>que;\n            for(int i=0;i<26;i++)if(ch[0][i])que.push(ch[0][i]),fail[ch[0][i]]=0;\n            while(!que.empty()){\n                int u=que.front();que.pop();\n                for(int i=0;i<26;i++){\n                    int v=ch[u][i];\n                    if(v)fail[v]=ch[fail[u]][i],que.push(v);\n                    else ch[u][i]=ch[fail[u]][i];\n                }\n            }\n        }\n        void query(string s){\n            int now=0;\n            for(int i=0;i<s.size();i++){\n                now=ch[now][s[i]-'a'];\n                for(int j=now;j;j=fail[j])ans[num[j]]++;\n            }\n        }\n        int main(){\n            while(cin>>n&&n){\n                memset(num,0,sizeof(num));\n                memset(ans,0,sizeof(ans));\n                memset(ch,0,sizeof(ch));\n                memset(fail,0,sizeof(fail));\n                siz=0;\n                for(int i=1;i<=n;i++){\n                    cin>>mob[i];\n                    insert(mob[i],i);\n                }\n                getfail();\n                string k;\n                cin>>k;\n                query(k);\n                temp=0;\n                for(int i=1;i<=n;i++)if(ans[i]>temp)temp=ans[i];\n                cout<<temp<<\"\\n\";\n                for(int i=1;i<=n;i++)if(ans[i]==temp)cout<<mob[i]<<\"\\n\";\n            }\n        }\n        \n     \n     \u672c\u849f\u84bb\u840c\u65b0\uff0c\u4e0d\u8db3\u4e4b\u5904\u6b22\u8fce\u79c1\u4fe1\u3002",
        "postTime": 1523106550,
        "uid": 52713,
        "name": "wxk01",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/yifusuyi/p/10713937.html)\n\n(\u672c\u6587\u4ed4\u7ec6\u8bf4\u660e\u4e86@ FlashHu \u5927\u795e\u5728upd\u91cc\u7684 $O(|S| + |T|)$ \u505a\u6cd5\uff0c\u5e76\u975e\u7b80\u5355\u6a21\u677f\u4ecb\u7ecdqwq)\n\n## Definition & Solution\n\nAC\u81ea\u52a8\u673a\u662f\u4e00\u79cd\u591a\u6a21\u5f0f\u4e32\u7684\u5b57\u7b26\u4e32\u5339\u914d\u6570\u636e\u7ed3\u6784\uff0c\u6838\u5fc3\u5728\u4e8e\u5229\u7528 ``fail`` \u6307\u9488\u5728\u5931\u914d\u65f6\u5c06\u8282\u70b9\u8df3\u8f6c\u5230\u5f53\u524d\u8282\u70b9\u4ee3\u8868\u5b57\u7b26\u4e32\u7684\u6700\u957f\u540e\u7f00\u5b50\u4e32\u3002\n\n\u9996\u5148\u5bf9 **\u6a21\u5f0f\u4e32** \u5efa\u51fa\u4e00\u68f5 ``tire`` \u6811\uff0c\u8003\u8651\u6811\u4e0a\u4ee5\u6839\u8282\u70b9\u4e3a\u4e00\u4e2a\u7aef\u70b9\u7684\u6bcf\u6761\u94fe\u663e\u7136\u90fd\u5bf9\u5e94\u7740\u67d0\u4e00\u6a21\u5f0f\u4e32\u7684\u4e00\u4e2a\u524d\u7f00\u5b50\u4e32\uff0c\u4ee5\u4e0b\u4ee5\u6811\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u6765\u4ee3\u6307\u4ece\u6839\u8282\u70b9\u5230\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002\n\n\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32 $S$ \u5728 ``trie`` \u6811\u4e0a\u201c\u51fa\u73b0\u8fc7\u201d\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u6761\u4ee5\u6839\u8282\u70b9\u4e3a\u4e00\u4e2a\u7aef\u70b9\u7684\u94fe\uff0c\u8be5\u94fe\u7684\u5bf9\u5e94\u5b57\u7b26\u4e32\u4e3a $S$\u3002\n\n\u8003\u8651\u5bf9\u6bcf\u4e2a\u8282\u70b9\u6c42\u51fa\u4e00\u4e2a ``fail`` \u6307\u9488\uff0c\u8be5\u6307\u9488\u6307\u5411\u5728\u6811\u4e0a\u51fa\u73b0\u7684\u8be5\u5b50\u4e32\u7684 **\u6700\u957f** \u540e\u7f00\u5b50\u4e32\u7684\u7aef\u70b9\u3002\u8003\u8651\u5728\u5339\u914d\u6587\u672c\u4e32\u7684\u65f6\u5019\uff0c\u5982\u679c\u67d0\u4e00\u4f4d\u7f6e\u5931\u914d\uff0c\u6700\u4f18\u7684\u9009\u62e9\u663e\u7136\u662f\u8df3\u8f6c\u5230\u88ab\u5339\u914d\u4e32\u7684\u6700\u957f\u540e\u7f00\u5b50\u4e32\u3002\u56e0\u4e3a\u8fd9\u6837\u6240\u6709\u5728\u6811\u4e0a\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\u4e32\u90fd\u6709\u673a\u4f1a\u88ab\u8df3\u8f6c\u5230\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5339\u914d\u5230\u4e86\u6587\u672c\u4e32\uff0c\u90a3\u4e48\u4ed6\u7684\u6240\u6709\u540e\u7f00\u5b50\u4e32\u90fd\u80fd\u5339\u914d\u6587\u672c\u4e32\u3002\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u4ed6\u7684fail,fail\u7684fail\uff0c\u4e00\u76f4\u5230\u6839\u8282\u70b9\u90fd\u80fd\u5339\u914d\u5f53\u524d\u6587\u672c\u4e32\u3002\n\n\u8003\u8651\u6c42\u51fafail\u6307\u9488\u7684\u65b9\u6cd5\uff1a\n\n\u8bbe\u6839\u8282\u70b9\u4e3a\u7a7a\uff0c\u663e\u7136\u6839\u8282\u70b9\u7684\u6240\u6709\u5b69\u5b50\u7684fail\u6307\u7740\u6307\u5411\u6839\u8282\u70b9\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5df2\u7ecf\u6c42\u51fa ``fail`` \u6307\u9488\u7684\u8282\u70b9 $u$\uff0c\u8bbe $u$ \u7684 ``fail`` \u6307\u5411 $w$\uff0c\u8003\u8651 $u$ \u7684\u4e00\u4e2a\u5b69\u5b50 $v$\uff0c\u8bbe $w$ \u5bf9\u5e94\u7684\u5b69\u5b50\u4e3a $z$\uff0c\u4e14\u8bbe $z$ \u5728 ``trie`` \u6811\u4e0a\u662f\u771f\u5b9e\u5b58\u5728\u7684\u3002\u7531\u4e8e $w$ \u662f $u$ \u7684\u6700\u957f\u540e\u7f00\u5b50\u4e32\uff0c\u663e\u7136 $w$ \u7684\u5bf9\u5e94\u5b69\u5b50 $z$ \u662f $v$ \u7684\u6700\u957f\u540e\u7f00\u5b50\u4e32\uff0c\u4e8e\u662f\u76f4\u63a5\u5c06 $v$ \u7684 ``fail`` \u6307\u5411 $z$ \u5373\u53ef\u3002\u8003\u8651\u5982\u679c $v$ \u5728 ``fail`` \u4e0a\u662f\u4e0d\u5b58\u5728\u7684\uff0c\u90a3\u4e48\u8003\u8651\u4e00\u4e2a ``fail`` \u6307\u9488\u6307\u5411 $u$ \u7684\u8282\u70b9\uff0c\u5b83\u5bf9\u5e94 $v$ \u7684\u6307\u9488\u663e\u7136\u5e94\u8be5\u6307\u5411 $u$ \u5bf9\u5e94\u5b50\u4e32\u52a0\u4e0a $v$ \u4ee3\u8868\u5b57\u7b26\u540e\u7684\u6700\u957f\u771f\u5b9e\u5b58\u5728\u7684\u540e\u7f00\u5b50\u4e32\u3002\u663e\u7136\u8fd9\u4e2a\u4f4d\u7f6e\u662f $z$\u3002\u4e3a\u4e86\u5339\u914d\u65f6\u65b9\u4fbf\uff0c\u6211\u4eec\u76f4\u63a5\u5c06 $u$ \u7684\u5b50\u8282\u70b9\u6307\u9488\u6307\u5411 $z$\uff0c\u8fd9\u6837\u5728\u5339\u914d ``fail`` \u6307\u9488\u6307\u5411 $u$ \u7684\u8282\u70b9\u65f6\u5373\u5bf9\u5e94\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u6b63\u786e\u6027\u5df2\u7ecf\u5f97\u5230\u4e86\u8bc1\u660e\u3002\n\n\u4e8e\u662f\u4e00\u6b21 BFS \u5373\u53ef\u89e3\u51b3\u95ee\u9898\uff0c\u5bf9\u4e8e $u$ \u7684\u5b50\u8282\u70b9 $v$ \uff0c\u5982\u679c $v$ \u771f\u662f\u5b58\u5728\uff0c\u5219\u5c06 $v$ \u7684 ``fail`` \u6307\u9488\u6307\u5411 $u$ \u7684 ``fail`` \u7684\u5bf9\u5e94\u8282\u70b9\uff0c\u5426\u5219\u5c06 $v$ \u6307\u5411 $u$ \u7684 ``fail`` \u7684\u5bf9\u5e94\u5b50\u8282\u70b9\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u518d\u52a0\u4e0a\u4e00\u4e2a\u5b57\u7b26\u540e\u5728\u6811\u4e0a\u4e0d\u5b58\u5728\u4efb\u4f55\u4e00\u4e2a\u540e\u7f00\u5b50\u4e32\uff0c\u90a3\u4e48\u8be5\u6700\u957f\u540e\u7f00\u4e3a\u7a7a\uff0c\u5e94\u8be5\u6307\u5411\u6839\u8282\u70b9\u3002\u6240\u4ee5\u5728\u521d\u59cb\u5316\u65f6\uff0c\u5e94\u8be5\u5c06\u6240\u6709\u8282\u70b9\u7684\u5b69\u5b50\u548c ``fail`` \u90fd\u6307\u5411\u6839\u8282\u70b9\u3002\n\n## Samples\n\n### [\u3010P3808\u3011AC\u81ea\u52a8\u673a\uff08\u7b80\u5355\u7248\uff09](https://www.luogu.org/blog/yyc112358/dou-luo-tai-lu-v003-ban)\n\n#### Description\n\n\u7ed9\u5b9a $n$ \u4e2a\u6a21\u5f0f\u4e32 $S$ \u548c$1$\u4e2a\u6587\u672c\u4e32 $T$\uff0c\u6c42\u6709\u591a\u5c11\u4e2a\u6a21\u5f0f\u4e32\u5728\u6587\u672c\u4e32\u91cc\u51fa\u73b0\u8fc7\u3002\n\n#### Limitation\n\n\u6a21\u5f0f\u4e32\u603b\u957f\u5ea6\u548c\u6587\u672c\u4e32\u957f\u5ea6\u90fd\u4e0d\u8d85\u8fc7 $10^6$\n\n#### Solution\n\n\u8003\u8651\u5efa\u51fa\u81ea\u52a8\u673a\u540e\uff0c\u5728\u6811\u4e0a\u6309\u7167\u6587\u672c\u4e32\u5339\u914d\uff0c\u6ce8\u610f\u5230\u6bcf\u5339\u914d\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u4ed6\u7684\u6240\u6709\u540e\u7f00\u5b50\u4e32\u90fd\u51fa\u73b0\u8fc7\uff0c\u4e8e\u662f\u5728\u6bcf\u4e2a\u8282\u70b9\u90fd\u5e94\u8be5\u4e0d\u65ad\u8df3 ``fail`` \u76f4\u5230\u6839\uff0c\u4e00\u8def\u4e0a\u7684\u5b50\u4e32\u90fd\u6807\u8bb0\u4e3a\u51fa\u73b0\u3002\n\n\u6ce8\u610f\u5230\u672c\u9898\u53ea\u95ee\u6709\u591a\u5c11\u4e2a\u4e32\u51fa\u73b0\uff0c\u800c\u6ca1\u6709\u95ee\u6bcf\u4e2a\u4e32\u51fa\u73b0\u591a\u5c11\u6b21\uff0c\u6240\u4ee5\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5df2\u7ecf\u5728\u4e4b\u524d\u88ab\u8df3\u5230\u8fc7\u4e86\uff0c\u4ed6\u7684\u6240\u6709\u540e\u7f00\u5b50\u4e32\u663e\u7136\u5728\u4e4b\u524d\u4e5f\u90fd\u5df2\u7ecf\u88ab\u8df3\u5230\u8fc7\u4e86\uff0c\u6240\u4ee5\u6bcf\u8df3\u5230\u4e00\u4e2a\u8282\u70b9\u5bf9\u8be5\u8282\u70b9\u6253\u4e00\u4e0b\u6807\u8bb0\uff0c\u5982\u679c\u8df3\u5230\u8fc7\u8be5\u8282\u70b9\u4e86\u5c31\u76f4\u63a5break\u5373\u53ef\u3002\n\n\u8003\u8651\u4e00\u4e2a\u8282\u70b9\u6700\u591a\u4f1a\u88ab\u8df3\u4e00\u6b21\uff0c\u4e00\u5171\u6709 $O(\\Sigma|S|)$ \u4e2a\u8282\u70b9\uff0c\u540c\u65f6\u5efa\u7acb\u81ea\u52a8\u673a\u7684\u590d\u6742\u5ea6\u662f $O(\\Sigma|S|)$ \u7684\uff0c\u53e6\u5916\u5339\u914d\u6587\u672c\u4e32\u7684\u590d\u6742\u5ea6\u662f $O(|T|)$ \u7684\uff0c\u4e8e\u662f\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(|T| + \\Sigma|S|)$\n\n#### Code\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#ifdef ONLINE_JUDGE\n#define freopen(a, b, c)\n#endif\n\ntypedef long long int ll;\n\nnamespace IPT {\n  const int L = 1000000;\n  char buf[L], *front=buf, *end=buf;\n  char GetChar() {\n    if (front == end) {\n      end = buf + fread(front = buf, 1, L, stdin);\n      if (front == end) return -1;\n    }\n    return *(front++);\n  }\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n  char ch = IPT::GetChar(), lst = ' ';\n  while ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n  while ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n  if (lst == '-') x = -x;\n}\n\nnamespace OPT {\n  char buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n  if (x < 0) {x = -x, putchar('-');}\n  int top=0;\n  do {OPT::buf[++top] = static_cast<char>(x % 10 + '0');} while (x /= 10);\n  while (top) putchar(OPT::buf[top--]);\n  if (pt) putchar(aft);\n}\n\nconst int maxt = 26;\nconst int maxn = 1000009;\n\nstruct Tree {\n  Tree *son[maxt], *fail;\n  int endtime;\n  bool vis;\n\n  Tree(Tree *const _rt) : endtime(0), vis(false) {\n    for (auto &u : son) u = _rt;\n    fail = _rt;\n  }\n\n  Tree() : endtime(0), vis(false) {\n    fail = this;\n    for (auto &u : son) u = this;\n  }\n};\nTree rot;\nTree *rt = &rot;\n\nint n, ans, pcnt = 0;\nchar MU[maxn];\nstd::queue<Tree*>Q;\n\nvoid makefail();\nvoid ReadStr(char *s);\nvoid query(const char *s);\nvoid insert(const char *s);\n\nint main() {\n  freopen(\"1.in\", \"r\", stdin);\n  qr(n);\n  while (n--) {\n    ReadStr(MU); insert(MU);\n  }\n  makefail();\n  ReadStr(MU); query(MU);\n  return 0;\n}\n\nvoid ReadStr(char *s) {\n  do *s = IPT::GetChar(); while ((*s == ' ') || (*s == '\\n') || (*s == '\\r'));\n  do *(++s) = IPT::GetChar(); while ((~*s) && (*s != ' ') && (*s != '\\n') && (*s != '\\r'));\n  *s = 0;\n}\n\nvoid insert(const char *s) {\n  auto u = &rot;\n  while (*s) {\n    int k = *(s++) - 'a';\n    u = u->son[k] != rt? u->son[k] : u->son[k] = new Tree(&rot);\n  }\n  ++u->endtime;\n}\n\nvoid makefail() {\n  for (auto u : rot.son) if (u != rt) {\n    Q.push(u);\n  }\n  while (!Q.empty()) {\n    auto u = Q.front(); Q.pop();\n    for (auto &v : u->son) {\n      auto k = &v - u->son;\n      if (v != rt) {\n        v->fail = u->fail->son[k];\n        Q.push(v);\n      } else {\n        v = u->fail->son[k];\n      }\n    }\n  }\n}\n\nvoid query(const char *s) {\n  auto u = &rot;\n  while (*s) {\n    u = u->son[*(s++) - 'a'];\n    for (auto v = u; v->vis == false; v = v->fail) {\n      v->vis = true;\n      ans += v->endtime;\n    }\n  }\n  qw(ans, '\\n', true);\n}\n```\n\n### [\u3010P3706\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09](https://www.luogu.org/problemnew/show/P3796)\n\n#### Description\n\n\u7ed9\u5b9a $n$ \u4e2a\u6a21\u5f0f\u4e32 $S$ \u548c\u4e00\u4e2a\u6587\u672c\u4e32 $T$\uff0c$S$ \u53ef\u80fd\u5728 $T$ \u4e2d\u51fa\u73b0\u591a\u6b21\uff0c\u6c42\u51fa\u73b0\u6700\u591a\u7684\u662f\u54ea\u4e9b\u6a21\u5f0f\u4e32\uff0c\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002\n\n#### Limitation\n\n$1~\\leq~n~\\leq~150$\n\n$|S|~\\leq~70,~|T|~\\leq~10^6$\n\n#### Solution\n\n\u66b4\u529b\u7684\u60f3\u6cd5\u663e\u7136\u662f\u5efa\u51faAC\u81ea\u52a8\u673a\u7136\u540e\u6bcf\u5339\u914d\u5230\u4e00\u4e2a\u8282\u70b9\u5c31\u66b4\u529b\u8df3 ``fail``\uff0c\u8003\u8651\u672c\u9898\u4e0e\u4e0a\u4e00\u9898\u7684\u533a\u522b\u5728\u4e8e\u672c\u9898\u7684\u6a21\u5f0f\u4e32\u6bcf\u51fa\u73b0\u4e00\u6b21\u5c31\u8981\u7edf\u8ba1\u4e00\u6b21\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8282\u70b9\u5fc5\u987b\u8df3 ``fail`` \u4e00\u76f4\u5230\u6839\u3002\u8003\u8651\u4e00\u4e2a\u5b57\u7b26\u4e32 $S$ \u7684\u540e\u7f00\u5b50\u4e32\u4e2a\u6570\u663e\u7136\u662f $O(|S|)$ \u7684\uff0c\u5339\u914d\u6587\u672c\u4e32\u7684\u590d\u6742\u5ea6\u662f $O(|T|)$ \u7684\uff0c\u4e8e\u662f\u603b\u590d\u6742\u5ea6 $O(|S||T|)$ \u7684\u3002\u663e\u7136\u5f88\u4e0d\u4f18\u79c0\u3002\n\n\u8003\u8651 AC \u81ea\u52a8\u673a\u7684\u4e00\u4e2a\u795e\u5947\u6027\u8d28\uff1a\u5c06\u6240\u6709\u7684 ``fail`` \u6307\u9488\u8fde\u6210\u8fb9\uff0c\u6784\u6210\u4e86\u4e00\u68f5\u6811\u3002\n\n##### \u8bc1\u660e\uff1a\n\n\u8003\u8651\u9664\u4e86\u6839\u8282\u70b9\u4ee5\u5916\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a ``fail`` \u6307\u9488\uff0c\u6839\u8282\u70b9\u6ca1\u6709 ``fail`` \u6307\u9488\uff0c\u8fd9\u4e2a\u6761\u4ef6\u7b49\u4ef7\u4e8e\u56fe\u4e0a\u6709 $n-1$ \u6761\u8fb9\u3002\n\n\u53c8\u7531\u4e8e ``tire`` \u6811\u662f\u8054\u901a\u7684\uff0c\u6240\u4ee5\u8be5\u56fe\u6ee1\u8db3 \u201c\u8054\u901a\u201d\uff0c\u201c\u6709 $n-1$ \u6761\u8fb9\u201d \u4e24\u4e2a\u7279\u6027\uff0c\u6839\u636e\u6811\u7684\u5224\u5b9a\u5b9a\u7406\u53ef\u4ee5\u8bc1\u660e\u8fd9\u662f\u4e00\u68f5\u6811\u3002QED\u3002\n\n\u4e8e\u662f\u8003\u8651\u8df3 ``fail`` \u4e00\u76f4\u5230\u6839\u5c06\u8def\u5f84\u4e0a\u7684\u6807\u8bb0+1\u7b49\u4ef7\u4e8e\u5c06\u67d0\u4e2a\u8282\u70b9\u5230\u6839\u7684\u94fe\u4e0a\u6240\u6709\u70b9\u7684\u6807\u8bb0\u6574\u4f53\u52a0\u4e00\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u663e\u7136\u53ef\u4ee5\u6811\u5f62DP\u5b8c\u6210\uff0c\u4e8e\u662f\u6bcf\u6b21\u5728\u8be5\u8282\u70b9\u6253\u4e00\u4e2a+1\u7684\u6807\u8bb0\u5373\u53ef\u3002\u6bcf\u4e2a\u70b9\u7684\u771f\u5b9e\u6807\u8bb0\u503c\u4e3a\u5b69\u5b50\u7684\u771f\u662f\u6807\u8bb0\u503c\u4e4b\u548c\u52a0\u4e0a\u8be5\u8282\u70b9\u7684\u6807\u8bb0\u503c\u3002\n\n\u4e8e\u662f\u603b\u590d\u6742\u5ea6 $O(|T|~+~\\Sigma|S|)$\n\n#### Code\n\n```cpp\n#include <cstdio>\n#include <queue>\n#include <vector>\n#include <algorithm>\n#ifdef ONLINE_JUDGE\n#define freopen(a, b, c)\n#endif\n\ntypedef long long int ll;\n\nnamespace IPT {\n  const int L = 1000000;\n  char buf[L], *front=buf, *end=buf;\n  char GetChar() {\n    if (front == end) {\n      end = buf + fread(front = buf, 1, L, stdin);\n      if (front == end) return -1;\n    }\n    return *(front++);\n  }\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n  char ch = IPT::GetChar(), lst = ' ';\n  while ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n  while ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n  if (lst == '-') x = -x;\n}\n\nnamespace OPT {\n  char buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n  if (x < 0) {x = -x, putchar('-');}\n  int top=0;\n  do {OPT::buf[++top] = static_cast<char>(x % 10 + '0');} while (x /= 10);\n  while (top) putchar(OPT::buf[top--]);\n  if (pt) putchar(aft);\n}\n\nconst int maxm = 75;\nconst int maxn = 155;\nconst int maxt = 26;\nconst int maxL = 1000005;\n\nstruct Tree *rot;\n\nstruct Tree {\n  Tree *son[maxt], *fail;\n  std::vector<int>Endid;\n  std::vector<Tree*>tson;\n  bool vistag;\n  int vistime;\n\n  Tree() {\n    for (auto &u : son) u = rot;\n    fail = rot;\n    vistag = false;\n    vistime = 0;\n  }\n\n  ~Tree() {\n    this->vistag = false;\n    for (auto u : son) if (u->vistag) delete u;\n  }\n};\n\nint n, maxv;\nchar MU[maxn][maxm], CU[maxL];\nstd::queue<Tree*>Q;\nstd::vector<int>ans;\n\nvoid init();\nvoid work();\nvoid clear();\nvoid print();\nvoid buildfail();\nvoid ReadStr(char *s);\nvoid dfs(Tree *const s);\nbool IsLet(const char *const s);\nvoid Inserot(const char *s, const int id);\n\nint main() {\n  freopen(\"1.in\", \"r\", stdin);\n  qr(n);\n  while (n) {\n    clear();\n    init();\n    buildfail();\n    work();\n    print();\n    n = 0; qr(n);\n  }\n  return 0;\n}\n\nvoid clear() {\n  delete rot;\n  maxv = 0; ans.clear();\n}\n\nvoid init() {\n  rot = new Tree;\n  for (auto &u : rot->son) u = rot;\n  rot->fail = rot;\n  for (int i = 1; i <= n; ++i) {\n    ReadStr(MU[i]);\n    Inserot(MU[i], i);\n  }\n}\n\nvoid ReadStr(char *s) {\n  do *s = IPT::GetChar(); while (!IsLet(s));\n  do *(++s) = IPT::GetChar(); while (IsLet(s));\n  *s = 0;\n}\n\ninline bool IsLet(const char *const s) {\n  return (*s >= 'a') && (*s <= 'z');\n}\n\nvoid Inserot(const char *s, const int id) {\n  auto u = rot;\n  while (*s) {\n    int k = *(s++) - 'a';\n    u = u->son[k] != rot ? u->son[k] : u->son[k] = new Tree;\n  }\n  u->Endid.push_back(id);\n}\n\nvoid buildfail() {\n  for (auto u : rot->son) if (u != rot) Q.push(u);\n  while (!Q.empty()) {\n    auto u = Q.front(); Q.pop();\n    for (auto &v : u->son) {\n      auto k = &v - u->son;\n      if (v != rot) {\n        v->fail = u->fail->son[k];\n        Q.push(v);\n      } else {\n        v = u->fail->son[k];\n      }\n    }\n  }\n  for (auto &u : rot->son) if (u != rot) {\n    u->vistag = true; Q.push(u);\n  }\n  while (!Q.empty()) {\n    auto u = Q.front(); Q.pop();\n    u->fail->tson.push_back(u);\n    for (auto &v : u->son) if ((v != rot) && (v->vistag == false)) {\n      v->vistag = true; Q.push(v);\n    }\n  }\n}\n\nvoid work() {\n  ReadStr(CU);\n  auto s = CU;\n  auto u = rot;\n  while (*s) {\n    int k = *(s++) - 'a';\n    ++((u = u->son[k])->vistime);\n  }\n  dfs(rot);\n}\n\nvoid dfs(Tree *const u) {\n  for (auto v : u->tson) {\n    dfs(v);\n    u->vistime += v->vistime;\n  }\n  if (u->Endid.size()) {\n    if (u->vistime > maxv) {\n      maxv = u->vistime;\n      ans.clear();\n      for (auto i : u->Endid) ans.push_back(i);\n    } else if (u->vistime == maxv) {\n      for (auto i : u->Endid) ans.push_back(i);\n    }\n  }\n}\n\nvoid print() {\n  std::sort(ans.begin(), ans.end());\n  qw(maxv, '\\n', true);\n  for (auto i : ans) printf(\"%s\\n\", MU[i]);\n}\n```\n\n",
        "postTime": 1555340006,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "# \u505a\u6cd5\uff1aAC\u81ea\u52a8\u673a\n\n\u5982\u679c\u6ca1\u6709\u5b66\u8fc7AC\u81ea\u52a8\u673a\uff0c\u770b\u8fd9\u91cc[AC\u81ea\u52a8\u673a\u8be6\u7ec6\u8bb2\u89e3](https://www.luogu.org/blog/juruohyfhaha/ac-zi-dong-ji)\n\n\u65e0\u7591\uff0c\u4f5c\u4e3a\u6a21\u677f2\uff0c\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\u4e5f\u662f\u5341\u5206\u7684\u7ecf\u5178\u3002\n\n\u6211\u4eec\u5148\u6765\u5206\u6790\u4e00\u4e0b\u9898\u76ee\uff1a\u8f93\u5165\u548c\u6a21\u677f1\u4e00\u6837\n\n1\u3001\u6c42\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6b21\u6570\n\n2\u3001\u6c42\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6a21\u5f0f\u4e32\n\n\u660e\u663e\uff0c\u6211\u4eec\u5982\u679c\u7edf\u8ba1\u51fa\u6bcf\u4e00\u4e2a\u6a21\u5f0f\u4e32\u5728\u6587\u672c\u4e32\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u53d8\u5f97\u5341\u5206\u7b80\u5355\u4e86\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5982\u4f55\u7edf\u8ba1\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n**\u505a\u6cd5\uff1aAC\u81ea\u52a8\u673a**\n\n\u9996\u5148\u9898\u76ee\u7edf\u8ba1\u7684\u662f\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6709\u91cd\u590d\u7684\u5b57\u7b26\u4e32\u662f\u6ca1\u6709\u5173\u7cfb\u7684\u3002\uff08\u56e0\u4e3a\u540e\u9762\u7684\u4f1a\u8986\u76d6\u524d\u9762\u7684\uff0c\u7edf\u8ba1\u7684\u7b54\u6848\u4e5f\u662f\u4e00\u6837\u7684\uff09\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u6807\u8bb0\u6a21\u5f0f\u4e32\u7684flag\u8bbe\u4e3a\u5f53\u524d\u662f\u7b2c\u51e0\u4e2a\u6a21\u5f0f\u4e32\u3002\u5c31\u662f\u4e0b\u9762\u63d2\u5165\u65f6\u7684\u53d8\u5316\uff1a\n\n```cpp\ntrie[u].flag++;\n\u53d8\u4e3a\ntrie[u].flag=num; //num\u8868\u793a\u8be5\u5b57\u7b26\u4e32\u662f\u7b2cnum\u4e2a\u8f93\u5165\u7684\n```\n\n\u6c42Fail\u6307\u9488\u6ca1\u6709\u53d8\u5316\uff0c\u539f\u5148\u600e\u4e48\u6c42\u5c31\u600e\u4e48\u6c42\u3002\n\n**\u67e5\u8be2**\uff1a\u6211\u4eec\u5f00\u4e00\u4e2a\u6570\u7ec4vis\uff0c\u8868\u793a\u7b2ci\u4e2a\u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n\u56e0\u4e3a\u662f\u91cd\u590d\u8ba1\u7b97\uff0c\u6240\u4ee5\u4e0d\u80fd\u6807\u8bb0\u4e3a-1\u4e86\u3002\n\n\u6211\u4eec\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u6709\u6a21\u5f0f\u4e32\u6807\u8bb0\uff0c\u5c31\u5c06vis[\u6a21\u5f0f\u4e32\u6807\u8bb0]++\u3002\u7136\u540e\u7ee7\u7eed\u8df3fail\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u7edf\u8ba1\u51fa\u6765\u3002\u5269\u4e0b\u7684\u5927\u5bb6\u5e94\u8be5\u90fd\u4f1aQwQ\uff01\n\n### \u603b\u4ee3\u7801\n\n```cpp\n//AC\u81ea\u52a8\u673a\u52a0\u5f3a\u7248\n#include<bits/stdc++.h>\n#define maxn 1000001\nusing namespace std;\nchar s[151][maxn],T[maxn];\nint n,cnt,vis[maxn],ans;\nstruct kkk{\n\tint son[26],fail,flag;\n\tvoid clear(){memset(son,0,sizeof(son));fail=flag=0;}\n}trie[maxn];\nqueue<int>q;\nvoid insert(char* s,int num){\n\tint u=1,len=strlen(s);\n\tfor(int i=0;i<len;i++){\n\t\tint v=s[i]-'a';\n\t\tif(!trie[u].son[v])trie[u].son[v]=++cnt;\n\t\tu=trie[u].son[v];\n\t}\n\ttrie[u].flag=num;\t\t\t//\u53d8\u53161\uff1a\u6807\u8bb0\u4e3a\u7b2cnum\u4e2a\u51fa\u73b0\u7684\u5b57\u7b26\u4e32\n}\nvoid getFail(){\n\tfor(int i=0;i<26;i++)trie[0].son[i]=1;\n\tq.push(1);trie[1].fail=0;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tint Fail=trie[u].fail;\n\t\tfor(int i=0;i<26;i++){\n\t\t\tint v=trie[u].son[i];\n\t\t\tif(!v){trie[u].son[i]=trie[Fail].son[i];continue;}\n\t\t\ttrie[v].fail=trie[Fail].son[i];\n\t\t\tq.push(v);\n\t\t}\n\t}\n}\nvoid query(char* s){\n\tint u=1,len=strlen(s);\n\tfor(int i=0;i<len;i++){\n\t\tint v=s[i]-'a';\n\t\tint k=trie[u].son[v];\n\t\twhile(k>1){\n\t\t\tif(trie[k].flag)vis[trie[k].flag]++;\t//\u5982\u679c\u6709\u6a21\u5f0f\u4e32\u6807\u8bb0\uff0c\u66f4\u65b0\u51fa\u73b0\u6b21\u6570\n\t\t\tk=trie[k].fail;\n\t\t}\n\t\tu=trie[u].son[v];\n\t}\n}\nvoid clear(){\n\tfor(int i=0;i<=cnt;i++)trie[i].clear();\n\tfor(int i=1;i<=n;i++)vis[i]=0;\n\tcnt=1;ans=0;\n}\nint main(){\n\twhile(1){\n\t\tscanf(\"%d\",&n);if(!n)break;\n\t\tclear();\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tscanf(\"%s\",s[i]);\n\t\t\tinsert(s[i],i);\n\t\t}\n\t\tscanf(\"%s\",T);\n\t\tgetFail();\n\t\tquery(T);\n\t\tfor(int i=1;i<=n;i++)ans=max(vis[i],ans);\t//\u6700\u540e\u7edf\u8ba1\u7b54\u6848\n\t\tprintf(\"%d\\n\",ans);\n\t\tfor(int i=1;i<=n;i++)\n\t\tif(vis[i]==ans)\n\t\tprintf(\"%s\\n\",s[i]);\n\t}\n}\n```\n\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u9ad8\u5462\uff1f\n\nO(\u6a21\u5f0f\u4e32\u957f\u5ea6 \u00b7 \u6587\u672c\u4e32\u957f\u5ea6)\u3002\n\n\u60f3\u8981\u4e86\u89e3AC\u81ea\u52a8\u673a\u7684\u4f18\u5316\uff0c\u770b[**\u8fd9\u91cc**](https://www.luogu.org/blog/juruohyfhaha/ac-zi-dong-ji)",
        "postTime": 1557464881,
        "uid": 58711,
        "name": "hyfhaha",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u8fd8\u662f\u5c5e\u4e8eAC\u81ea\u52a8\u673a\u7684\u88f8\u9898\u3002\u800cAC\u81ea\u52a8\u673a\u7684\u88f8\u9898\uff0c\u5148\u628a\u6a21\u677f\u6253\u597d\u540e\uff0c\u57fa\u672c\u4e0a\u6539\u7684\u5c31\u662f\u5bf9\u6807\u8bb0\u70b9\u7684\u5904\u7406\u3002\n\n\u8fd9\u91cc\u5c31\u662f\u5bf9AC\u81ea\u52a8\u6807\u8bb0\u70b9\u5904\u7406\u7684\u7b80\u5355\u4fee\u6539\uff0c\u5373\u628a\u5339\u914d\u5230\u7684\u6807\u8bb0\u70b9\u90fd\u8ba1\u6570\u4e00\u4e0b\uff0c\u7136\u540e\u6c42\u8ba1\u6570\u6700\u5927\u7684\u90a3\u4e9b\u6807\u8bb0\u70b9\u5c31\u884c\u4e86\u3002\n\n\u8fd8\u662f\u4e0d\u592a\u4e0d\u61c2AC\u81ea\u52a8\u8bb0\u5f97\u840c\u65b0\u4eec\u53ef\u4ee5\u6233\uff1ahttp://blog.csdn.net/no1\\_terminator/article/details/77725530\n\n\u8bb2\u7684\u975e\u5e38\u6e05\u695a\u54df\uff01\n\n\u8fd9\u91cc\u5c31\u7b80\u5355\u7684\u8bb2\u4e00\u4e0b\u5427\uff1a\n\nf[u]=v\u8868\u793a\u4ece\u6839\u5230u\u53f7\u8282\u70b9\u7684\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u67d0\u4e2a\u540e\u7f00\u4e0e\u4ece\u6839\u5230v\u53f7\u8282\u70b9\u7684\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u7b49\u6548\u7684\uff08\u5373\u5b8c\u5168\u76f8\u7b49\u7684\uff09\n\nlast[u]=v\u8868\u793a\u4eceu\u5f00\u59cb\u4e0d\u65ad\u6cbf\u7740\u5931\u914d\u8fb9\u8df3\u5230\u7684\u7b2c\u4e00\u4e2a\u662f\u6807\u8bb0\u70b9\u7684\u7aef\u70b9v\uff0c\u90a3\u4e48\u6211\u4eec\u518d\u5339\u914d\u662f\u5c31\u65e0\u9700\u6cbf\u7740f\u8df3\uff0c\u800c\u662f\u6cbf\u7740last\u8df3\n\n\u8003\u8651f\u7684\u9012\u63a8\u3002\u6211\u4eec\u8bbe\u5f53\u524d\u8282\u70b9\u4e3au\uff0c\u5176\u4e00\u4e2a\u5b69\u5b50ch[u][c]=v\uff0ck\u8868\u793au\u6cbf\u7740f\u8fb9\u8df3\u4e00\u6b21\u5bf9\u5e94\u7684\u70b9\uff0c\u5373k=f[u],\n\n\u90a3\u4e48\u5982\u679cu\u4e0d\u662f\u6839\u8282\u70b9\uff0cf[v]=ch[k][c]\uff0c\u5373\u6cbf\u7740k\u518d\u5411\u4e0b\u8d70\u4e00\u4e2ac\u5b57\u7b26\uff0c\u8fd9\u65f6\u4e24\u4e2a\u5b57\u7b26\u4e32\u8fd8\u662f\u76f8\u7b49\u7684\u5bf9\u4e0d\u5bf9\u3002\n\n\u5982\u679cu\u662f\u6839\u8282\u70b9\u90a3\u5c31\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u4e86\uff0cf[v]=0\u3002\n\n\u5728\u6b64\u6761\u4ef6\u4e0b\uff0clast\u5c31\u975e\u5e38\u597d\u9012\u63a8\u4e86\uff0c,\u90a3\u4e48\u5982\u679cf[v]\u662f\u6807\u8bb0\u70b9\uff0c\u90a3\u4e48last[v]=f[v],\n\n\u5426\u5219last[v]=last[f[v]]\u3002\n\n\u8003\u8651\u5230\u8fd9\u662f\u4e00\u4e2aTrie\u6811\u4e0a\u7684\u9012\u63a8\uff0c\u6240\u4ee5\u6211\u4eec\u7528BFS\u641e\u4e00\u641e\u5c31\u597d\u4e86\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\n#define reset(a) memset((a),0,sizeof((a)))\n#define REP(i,a,b) for (int i=(a);i<=(b);i++)\nusing namespace std;\nconst int N=1e6+10;\nconst int M=151*71;\nchar s[151][71];\nchar T[N];\nint m;\nstruct Aho_Corasick_Automaton{\n    int NodeCnt,f[M],ch[M][26],cnt[M],val[M],last[M];\n    void clear(){\n        reset(f);reset(ch);reset(cnt);reset(val);reset(last);\n        NodeCnt=0;\n    }\n    void insert(char *s,int index){\n        int u=0,n=strlen(s);\n        REP(i,0,n-1){\n            int c=s[i]-'a';\n            if (!ch[u][c])ch[u][c]=++NodeCnt;\n            u=ch[u][c];\n        }\n        val[u]=index;\n    }\n    void getFail(){\n        queue<int> Q;\n        Q.push(0);\n        while (!Q.empty()){\n            int u=Q.front(),k=f[u];Q.pop();\n            REP(c,0,25){\n                int v=ch[u][c];\n                if (!v){ch[u][c]=ch[k][c];continue;}\n                f[v]=u?ch[k][c]:0;\n                last[v]=val[f[v]]?f[v]:last[f[v]];\n                Q.push(v);\n            }\n        }\n    }\n    void query(char *T){\n        int u=0,n=strlen(T),res=0;\n        REP(i,0,n-1){\n            int c=T[i]-'a';\n            u=ch[u][c];\n            if (val[u])cnt[val[u]]++;\n            int v=last[u];\n            while (v){\n                if (val[v])cnt[val[v]]++;\n                v=last[v];\n            }\n        }\n        REP(i,1,m)res=max(res,cnt[i]);\n        printf(\"%d\\n\",res);\n        REP(i,1,m)if (cnt[i]==res)printf(\"%s\\n\",s[i]);\n        return;\n    }\n}AC;\nint main(){\n    while (scanf(\"%d\",&m)==1 && m){\n        AC.clear();\n        REP(i,1,m){\n            scanf(\"%s\",s[i]);\n            AC.insert(s[i],i);\n        }\n        AC.getFail();\n        scanf(\"%s\",T);\n        AC.query(T);\n    }\n    return 0;\n}\n```",
        "postTime": 1504100038,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "## AC\u81ea\u52a8\u673a\u7b80\u4ecb\n\nAC\u81ea\u52a8\u673a\u662f\u4e00\u4e2a\u7528\u6765\u89e3\u51b3\u591a\u4e2a\u5b57\u7b26\u4e32\u5339\u914d\u7684\u9ad8\u6548\u7b97\u6cd5\uff0c\u4f20\u8bf4AC\u81ea\u52a8\u673a\u9700\u8981\u638c\u63e1trie\u548ckmp\uff0c\u4eb2\u6d4b\u53ea\u4f1atrie\u3001\u5b8c\u5168\u4e0d\u61c2kmp\u7684\u50bb\u5b50\u4e5f\u53ef\u4ee5\u7406\u89e3\u3002\n\n\u7ecf\u5178\u5e94\u7528\uff0c\u5224\u65ad\u591a\u4e2a\u5355\u8bcd\u662f\u5426\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u3002\n\n\u4ecb\u7ecd\u4e00\u4e0b\u5b83\u7684\u539f\u7406\uff0c\u5982\u679c\u7528\u5355\u7eaf\u7684trie\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728\u4e00\u4e2a\u5355\u8bcd\u5339\u914d\u5b8c\u6bd5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u56de\u5230trie\u6811\u7684\u6839\u5339\u914d\u4e0b\u4e00\u4e2a\u5b50\u4e32\uff0c\u8fd9\u5c31\u5f88\u4e0d\u4f18\uff0c\u5982\u679c\u6211\u4eec\u80fd\u8df3\u5230\u4e0b\u4e00\u4e2a\u76f8\u540c\u5b57\u7b26\uff0c\u5e76\u4e14\u5355\u8bcd\u524d\u7f00\u548c\u5f53\u524d\u5355\u8bcd\u540e\u7f00\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u5c31\u80fd\u7ee7\u7eed\u5339\u914d\u4e86\u3002\n\nfail\u6307\u9488\u5c31\u662f\u7528\u6765\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u7684\uff0c\u5982\u679c\u5728\u67d0\u8282\u70b9x\u5339\u914d\u5b57\u7b26i\u5931\u8d25\uff0c\u6211\u4eec\u7684\u6307\u9488\u5c31\u8981\u5230\u8fbet[x].fail\u5904\u7ee7\u7eed\u5339\u914d\uff0c\u5426\u5219\u5c31\u53bb\u5339\u914dt[x].ch[i]\u3002\n\n![](https://dftyem.github.io/img/ac1.png)\n\n\u4e0a\u4e00\u5f20\u5168\u7f51\u90fd\u5728\u7528\u7684\u4f8b\u56fe\uff0c\u56fe\u4e2d\u7684\u865a\u7ebf\u5c31\u662ffail\u6307\u9488\u7684\u6307\u5411\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff1afail\u6307\u9488\u53ea\u80fd\u6307\u5411\u6df1\u5ea6\u6bd4\u5f53\u524d\u6d45\u7684\u70b9\uff08\u9000\u800c\u6c42\u5176\u6b21\uff09\uff0c\u5982\u679c\u6ca1\u6709\u7b26\u5408\u8981\u6c42\u7684\u70b9\u5c31\u4f1a\u6307\u5411\u6839\uff08GG\uff09\u3002\n\nfail\u6307\u9488\u7684\u6c42\u6cd5\uff1a\u9012\u63a8\uff0c\u7528bfs\u5148\u628a\u6bd4\u4e00\u4e2a\u70b9\u6df1\u5ea6\u5c0f\u7684\u70b9\u7684fail\u6307\u9488\u5168\u6c42\u51fa\u6765\u3002\u5bf9\u4e8e\u4e00\u4e2a\u70b9x\uff0c\u5982\u679c\u5b83\u7684\u5b57\u7b26\u4e3ai\uff0c\u90a3\u4e48\u6211\u4eec\u770b\u770b$t[t[x].fa].fail$\u7684\u513f\u5b50\u4e2d\u6709\u6ca1\u6709i\uff0c\u6709\u7684\u8bdd\u5c31\u662f$t[x].fail=t[t[t[x].fa].fail].ch[i]$ \uff0c\u5426\u5219\u5c31\u4e00\u76f4\u627e\u4e0b\u53bb\u4e00\u76f4\u5230\u6839\u3002\n\n\u8bdd\u662f\u8fd9\u4e48\u8bf4\uff0c\u4f46\u662f\u4e00\u822c\u5199\u8d77\u6765\u4e0d\u662f\u7528\u66b4\u529b\u6a21\u62df\u6211\u521a\u521a\u8bf4\u7684\u8bdd\uff0c\u800c\u662f\u7528\u4e00\u79cd\u88abdalao\u79f0\u4e3a\u201c\u8865trie\u56fe\u201d\u7684\u505a\u6cd5\u3002\n\n\u5148\u770b\u4ee3\u7801\n\n```c++\nvoid build(){\n\thead=tail=1; team[head]=0;\n\twhile (head<=tail){\n\t\tint x=team[head];\n\t\tfor (int i=0; i<26; i++){\n\t\t\tif (x==0){\n\t\t\t\tif (t[x].ch[i]){\n\t\t\t\t\tteam[++tail]=t[x].ch[i];\n\t\t\t\t\tt[t[x].ch[i]].fail=0;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (t[x].ch[i]){\n\t\t\t\tteam[++tail]=t[x].ch[i];\n\t\t\t\tt[t[x].ch[i]].fail=t[t[x].fail].ch[i];\n\t\t\t}\n\t\t\telse t[x].ch[i]=t[t[x].fail].ch[i];\n\t\t}\n\t\thead++;\n\t}\n}\n```\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u6839\u7684\u513f\u5b50\uff0c\u4ed6\u4eec\u7684fail\u5c31\u662f\u6839\uff0c\u5165\u961f\u5c31\u5b8c\u4e86\u3002\n\n\u5bf9\u4e8e\u5176\u4ed6\u70b9\uff0c\u4ed6\u4eec\u7684fail\u5c31\u662f$t[t[x].fail].ch[i]\u200b$\uff0c\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u8981\u662f\u6ca1\u6709\u8fd9\u4e2a\u70b9\u5462\uff1f\u4e0d\u5e94\u8be5\u5f80\u4e0a\u8df3\u5417\uff1f\n\n\u4e0d\u7136\uff0c\u770b\u8fd9\u53e5\uff1a$else\\ t[x].ch[i]=t[t[x].fail].ch[i];$ \n\n\u5982\u679c\u8fd9\u4e2a\u70b9\u4e0d\u5b58\u5728\uff0c\u90a3$t[t[x].fail].ch[i]$\u7684\u503c\u5c31\u662f$t[t[t[x].fa].fail].ch[i]$\n\n\u518d\u6ca1\u6709\u5c31\u662f$t[t[t[t[x].fa].fa].fail].ch[i]$\uff0c\u7956\u7956\u8f88\u8f88\u65e0\u7a77\u5c3d\u4e5f\uff0c\u4e00\u76f4\u5230\u6839\u7684\u513f\u5b50\u8fd9\u4e2a\u503c\u4f1a\u662f0,0\u662f\u6839\u7684\u7f16\u53f7\u3002\n\n### fail\u6811\n\n\u4f8b\u9898 [\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P3796)\n\n\u7edf\u8ba1\u6bcf\u4e2a\u5355\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u6709\u4e0d\u5c11\u4eba\u7684\u5199\u6cd5\u5c31\u662f\u8fd9\u6837\uff08\u9009\u81ea\u67d0yyb\u5927\u4f6c\u7684\u9898\u89e3\uff09\uff1a\n\n```c++\nint l=s.length();\nint now=0,ans=0;\nfor(int i=0;i<l;++i)\n{\n\tnow=AC[now].vis[s[i]-'a'];//\u5411\u4e0b\u4e00\u5c42\n\tfor(int t=now;t;t=AC[t].fail)//\u5faa\u73af\u6c42\u89e3\n\t\t Ans[AC[t].end].num++;\n}\n```\n\n\u4f46\u8fd9\u4e2a\u4f1a\u6162\u662f\u56e0\u4e3a\u6bcf\u4e00\u4f4d\u90fd\u8df3\u5230\u4e86\u6839\uff0c\u7136\u800c\u6ca1\u6709\u5fc5\u8981\u8fd9\u6837\u505a\u3002\n\n\u4ee5\u6837\u4f8b\u4e3a\u4f8b\n\n![](https://dftyem.github.io/img/ac2.png)\n\n\u6bcf\u4e2a\u70b9\u6709\u4e14\u53ea\u6709\u4e00\u4e2afail\u6307\u9488\uff0c\u800c\u6839\u4e0d\u7b97fail\u6307\u9488\uff0c\u5c06fail\u6307\u5411\u7684\u70b9\u770b\u6210\u81ea\u5df1\u7684\u7238\u7238\uff0c\u8fd9\u6837\u5c31\u5f62\u6210\u4e86\u4e00\u68f5fail\u6811\u3002\n\n\u6211\u4eec\u66b4\u529b\u7edf\u8ba1\u7684\u65f6\u5019\uff0c\u6bcf\u5230\u8fbe\u4e00\u4e2a\u70b9\u662f\u4e00\u4e2a\u5355\u8bcd\u7684\u672b\u5c3e\uff0c\u5c31\u7ed9\u8fd9\u4e2a\u5355\u8bcd\u51fa\u73b0\u6b21\u6570+1\uff0c\u540c\u65f6\u7ed9\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u6240\u6709\u662f\u5355\u8bcd\u672b\u5c3e\u7684\u70b9\u90fd+1\u3002\n\n\u8fd9\u6837\u6211\u4eec\u53ea\u8981\u6253\u597d\u6807\u8bb0\uff0c\u7ed3\u675f\u540e\u6c42\u4e00\u904d\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u548c\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u4ed6\u88ab\u6253\u4e86\u591a\u5c11\u6b21\u6807\u8bb0\u4e86\u3002\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<iostream>\nusing namespace std;\nstruct tree{\n\tint ch[26],cnt,fail;\n}t[100001];\nstruct node{\n\tint next,to;\n}w[150001];\nint n,num,pos[200],sum[150001],heap,tail;\nint head[150001],team[105001],cnt,maxn;\nchar ch[200][100],s[1000010];\ninline void add(int x,int y){\n\tw[++cnt].next=head[x];\n\tw[cnt].to=y; head[x]=cnt;\n}\ninline void insert(int x){\n\tint u=0,l=strlen(ch[x]);\n\tfor (int i=0; i<l; i++){\n\t\tint a=ch[x][i]-'a';\n\t\tif (!t[u].ch[a]) t[u].ch[a]=++num;\n\t\tu=t[u].ch[a];\n\t}\n\tt[u].cnt++; pos[x]=u;\n}\ninline void build(){\n\theap=tail=1; team[heap]=0;\n\twhile (heap<=tail){\n\t\tint x=team[heap];\n\t\tfor (int i=0; i<26; i++){\n\t\t\tif (x==0){\n\t\t\t\tif (t[x].ch[i]){\n\t\t\t\t\tt[t[x].ch[i]].fail=0;\n\t\t\t\t\tteam[++tail]=t[x].ch[i];\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (t[x].ch[i]){\n\t\t\t\tt[t[x].ch[i]].fail=t[t[x].fail].ch[i];\n\t\t\t\tteam[++tail]=t[x].ch[i];\n\t\t\t}\n\t\t\telse t[x].ch[i]=t[t[x].fail].ch[i];\n\t\t}\n\t\theap++;\n\t}\n}\nvoid dfs(int x){\n\tfor (int i=head[x]; i; i=w[i].next){\n\t\tdfs(w[i].to); sum[x]+=sum[w[i].to];\n\t}\n}\nint main(){\n\twhile (1){\n\t\tscanf(\"%d\",&n);\n\t\tif (!n) return 0; num=0;\n\t\tmemset(t,0,sizeof(t));\n\t\tmemset(ch,0,sizeof(ch));\n\t\tmemset(pos,0,sizeof(pos));\n\t\tmemset(sum,0,sizeof(sum));\n\t\tmemset(head,0,sizeof(head));\n\t\tfor (int i=1; i<=n; i++){\n\t\t\tscanf(\"%s\",ch[i]);\n\t\t\tinsert(i);\n\t\t}\n\t\tbuild(); scanf(\"%s\",s); cnt=0;\n\t\tfor (int i=1; i<=num; i++){\n\t\t\tadd(t[i].fail,i);\n\t\t\t// printf(\"%d %d\\n\",t[i].fail,i);\n\t\t}\n\t\tint u=0,l=strlen(s);\n\t\tfor (int i=0; i<l; i++){\n\t\t\tint a=s[i]-'a';\n\t\t\tu=t[u].ch[a];\n\t\t\tsum[u]++;\n\t\t}\n\t\tdfs(0); maxn=0;\n\t\tfor (int i=1; i<=n; i++)\n\t\t\tmaxn=max(maxn,sum[pos[i]]);\n\t\tprintf(\"%d\\n\",maxn);\n\t\tfor (int i=1; i<=n; i++)\n\t\t\tif (sum[pos[i]]==maxn) printf(\"%s\\n\",ch[i]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1550132749,
        "uid": 63661,
        "name": "Taduro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u5173\u4e8eAC\u81ea\u52a8\u673a\u7684\u8be6\u7ec6\u8fc7\u7a0b\u6211\u5c31\u4e0d\u8bb2\u4e86\u3002\u5173\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u8bf4\u4e00\u4e0b\u6211\u7684\u64cd\u4f5c\u3002\u56e0\u4e3a\u6709\u4e9b\u4ebaTLE\uff0c\u8fd8\u8981\u5361\u5e38\uff0c\u6211\u89c9\u5f97\u4e0d\u5fc5\u8981\u3002\n\n### \u601d\u8def\uff1a\nAC\u81ea\u52a8\u673a\u5339\u914d\u540e\uff0c\u4f1a\u8df3 $fail$ \uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u4f1a\u91cd\u590d\u8df3\u8dc3\u5230\u6839\u5e76\u5bf9\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u589e\u52a0\u8d21\u732e\u3002\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u4f1a\u5f88\u6d6a\u8d39\u65f6\u95f4\u3002\n\n\u7531\u4e8e $fail$ \u6307\u9488\u6784\u5efa\u540e\u5c06\u4e0d\u4f1a\u6539\u53d8\uff0c\u8fd9\u4e5f\u610f\u5473\u7740 \u4e00\u4e2a\u8282\u70b9\u8df3 $fail$ \u7684\u8def\u5f84\u662f\u56fa\u5b9a\u7684 \u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u59a8\u5148\u5c06\u8d21\u732e\u52a0\u5230\u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u4e0a\uff0c\u6700\u540e\u518d\u53bb\u66f4\u65b0\u7b54\u6848\u3002\u7c7b\u4f3c\u4e8e\u4e00\u79cd \u5dee\u5206\u6570\u7ec4 \u7684\u601d\u60f3\u3002\n\n\u6211\u662f\u7528 $vector$ \u4fdd\u5b58\u7684\uff0c\u4ece\u6700\u6df1\u7684\u8282\u70b9\u5f00\u59cb\u8ba1\u7b97\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898\u3002\u6700\u540e\u5728\u8ba1\u7b97\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6700\u540e\u65f6\u95f4\u5f00\u4e86 $O2$ \u662f \u6700\u6162\u7684\u70b9 239ms\uff0c\u4e0d\u5f00\u6700\u6162 409ms\u3002\u53cd\u6b63\u53ef\u4ee5\u8fc7\uff0c\u65f6\u95f4\u5f88\u5bbd\u677e\u3002\n\n\u6211\u7684\u4ee3\u7801\u76f4\u63a5\u7cca\u4e0a\u53bb\u4e86\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<queue>\n#include<cstdlib>\n#include<vector>\nusing namespace std;\nstruct ACTrie\n{\n    int tree[12000][26],fail[12000],end_[12000],got[12000],dep[12000];\n    vector<int>deep[75];\n    int root,cnt;\n    int newnode()\n    {\n    \t++cnt;\n        for(int i=0;i<26;i++)tree[cnt][i]=-1;\n\t\tend_[cnt]=got[cnt]=0;\n        return cnt;\n    }\n    void init()\n    {\n    \tfor(int i=1;i<72;i++)deep[i].clear();\n        cnt=-1;root=newnode();\n    }\n    int insert_(char str[])\n    {\n        int len=strlen(str);\n        int pos=root;\n        for(int i=0;i<len;i++)\n        {\n            int id=str[i]-'a';\n            if(tree[pos][id]==-1)\n\t\t\t{\n\t\t\t\ttree[pos][id]=newnode();\n\t\t\t\tdep[tree[pos][id]]=dep[pos]+1;\n\t\t\t\tdeep[dep[pos]+1].push_back(tree[pos][id]);\n\t\t\t}\n\t\t\tpos=tree[pos][id];\n        }\n        ++end_[pos];\n        return pos;\n    }\n    void build()\n    {\n        queue<int>que;\n        fail[root]=root;\n        for(int i=0;i<26;i++)\n        {\n            if(tree[root][i]==-1)tree[root][i]=root;\n            else\n            {\n                fail[tree[root][i]]=root;\n                que.push(tree[root][i]);\n            }\n        }\n        while(!que.empty())\n        {\n            int now=que.front();\n            que.pop();\n            for(int i=0;i<26;i++)\n            {\n                if(tree[now][i]==-1)tree[now][i]=tree[fail[now]][i];\n                else\n                {\n                    fail[tree[now][i]]=tree[fail[now]][i];\n                    que.push(tree[now][i]);\n                }\n            }\n        }\n    }\n    int query(char str[])\n    {\n        int len=strlen(str);\n        int now=root;\n        for(int i=0;i<len;i++)\n        {\n            now=tree[now][str[i]-'a'];\n            ++got[now];\n        }\n        for(int i=72;i>0;i--)\n        {\n        \tfor(int j=0;j<deep[i].size();j++)\n        \t{\n        \t\tint x=deep[i][j];\n        \t\tgot[fail[x]]+=got[x];\n\t\t\t}\n\t\t}\n\t\tint gotmax=0;\n\t\tfor(int i=1;i<=cnt;i++)\n\t\tif(end_[i])gotmax=max(gotmax,got[i]);\n\t\treturn gotmax;\n    }\n};\nchar str[160][77];\nchar niubi[1000010];\nint totrie[160];\nACTrie ac;\nint main()\n{\n\tios::sync_with_stdio(0);\n    int n;cin>>n;\n    while(n)\n\t{\n\t\tac.init();\n\t    for(int i=1;i<=n;i++)\n\t    {\n\t    \tcin>>str[i];\n\t        totrie[i]=ac.insert_(str[i]);\n\t    }\n\t    ac.build();cin>>niubi;\n\t    int gotmax=ac.query(niubi);\n\t    cout<<gotmax<<'\\n';\n\t    for(int i=1;i<=n;i++)\n\t    if(ac.got[totrie[i]]==gotmax)cout<<str[i]<<'\\n';\n\t    cin>>n;\n\t}\n}\n```",
        "postTime": 1576585063,
        "uid": 89785,
        "name": "\u7a7a\u306e\u8ecc\u8de1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u4e0d\u4f1aAC\u81ea\u52a8\u673a\uff0c\u4f46\u4e0d\u59a8\u788d\u505a\u672c\u9898\uff0c\n\n\u6c34\u9898,trie\u6811\u66b4\u529b\u5339\u914d\u8fc7~\n\n\u6ce8\u610f\u8f93\u51fa\u7ed3\u679c\u65f6\u8981\u6309\u7167\u8f93\u5165\u7684\u987a\u5e8f\u6392\u5e8f\u3002\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n;\nint tot=0;\nconst int N=150*70+10;\nint ch[N][26],vis[N],mark[(int)(1e6+10)];\n\nstruct node{\n\tstring str;\n\tint num;//\u7edf\u8ba1\u6bcf\u4e2a\u6a21\u677f\u4e32\u51fa\u73b0\u6b21\u6570\n\tint appear;//\u8bb0\u5f55\u6bcf\u4e2a\u6a21\u677f\u4e32\u51fa\u73b0\u7684\u65f6\u95f4\n\tbool operator <(const node &b){\n\t\tif(num==b.num) return appear<b.appear;\n\t\treturn num>b.num;\n\t}\n\t\n\tvoid init(){\n\t\tnum=0;\n\t\tstr=\"\";\n\t}\n}mp[N];\n\nvoid add(string str,int appear){\n\tint u=0;\n\tfor(int i=0;i<str.size();i++){\n\t\tint id=str[i]-'a';\n\t\tif(!ch[u][id]) ch[u][id]=++tot;\n\t\tu=ch[u][id];\n\t}\n\tvis[u]=1;\n\tmp[u].str=str;\n\tmp[u].appear=appear;\n}\n\nvoid check(string str){\n\tfor(int k=0;k<str.size();k++){\n\t\tint u=0;\n\t\tfor(int i=k;i<str.size();i++){\n\t\t\tint id=str[i]-'a';\n\t\t\tif(ch[u][id]) u=ch[u][id];\n\t\t\telse break;\n\t\t\t\n\t\t\tif(vis[u]) mp[u].num++;\n\t\t}\n\t}\n}\nint main(){\n\tfreopen(\"p.txt\",\"r\",stdin);\n\twhile(scanf(\"%d\",&n)&&n){\n\t\tmemset(vis,0,sizeof(vis));\n\t\tmemset(ch,0,sizeof(ch));\n\t\tfor(int i=0;i<N;i++) mp[i].init();\n\t\ttot=0;\n\n\t\tfor(int i=0;i<n;i++){\n\t\t\tstring str;\n\t\t\tcin>>str;\n\t\t\tadd(str,i);\n\t\t}\n\t\t\n\t\tstring T;\n\t\tcin>>T;\n\t\tcheck(T);\n\t\t\n\t\tsort(mp,mp+N);\n\t\tint pos=mp[0].num;\n\t\tprintf(\"%d\\n\",pos);\n\t\tfor(int i=0;i<N;i++){\n\t\t\tif(mp[i].num==pos) cout<<mp[i].str<<\"\\n\";\n\t\t\telse break;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1560774398,
        "uid": 108770,
        "name": "zhuixun_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "## ac\u81ea\u52a8\u673a\u88f8\u9898\n\n\u867d\u8bf4\u662f\u52a0\u5f3a\u7248,\u4e0d\u8fc7\u5176\u5b9e\u5c31\u662f\u7a0d\u5fae\u6362\u4e86\u4e0b\u6c42\u7684\u4e1c\u897f,\u8fd8\u662f\u5f88\u88f8\u7684\n\n\u5177\u4f53\u6539\u52a8\u7684\u5730\u65b9\u5728\u4ee3\u7801\u91cc\u7ed9\u51fa\n\n\u4e0a\u83dc:\n\n```\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <algorithm>\nusing namespace std;\nconst int maxn = 300000+5;\nconst int SIGMA_SIZE = 26;\nint maxx = 0;//\u5f97\u51fa\u7684\u6700\u5927\u5927\u6570\u76ee\u7b54\u6848\nchar p[200][105];//\u7528\u6765\u8f93\u51fa\u5b57\u7b26\u7b54\u6848\nint ans[200];//\u552f\u4e00\u52a0\u7684\u5730\u65b9,\u7528\u6765\u5b58\u7b54\u6848\nchar T[1000000+5];\nqueue <int> qe;\n//ac\u81ea\u52a8\u673a \u673a\u4f53qvq ps:\u611f\u89c9\u8fd9\u79cd\u81ea\u52a8\u673a\u5199\u8d77\u6765\u6700\u597d\u770b(\u96fe\nstruct AC_automata\n{\n    int ch[maxn][26], val[maxn], f[maxn], cnt = 0;\n    void clear()//\u7ed9\u6570\u7ec4\u6e05\u96f6\n    {\n        cnt = maxx = 0;\n        for(int i = 0; i < maxn; ++i)\n        {\n            val[i] = f[i] = 0;\n            for(int j = 0; j < 26; ++j)ch[i][j] = 0;\n        }\n        memset(ans, 0, sizeof ans);\n    }\n    void insert(char *s, int num)\n    {\n        int now = 0;\n        for(int i = 0; i < strlen(s); i++)\n        {\n            if(!ch[now][s[i]-'a'])ch[now][s[i]-'a'] = ++cnt;\n            now = ch[now][s[i]-'a'];\n        }\n        val[now] = num;\n    }\n    void getFail()\n    {\n        for(int i = 0; i < SIGMA_SIZE; i++)if(ch[0][i])qe.push(ch[0][i]);\n        while(!qe.empty())\n        {\n            int u = qe.front();qe.pop();\n            for(int i = 0; i < SIGMA_SIZE; i++)\n            {\n                if(ch[u][i]){f[ch[u][i]] = ch[f[u]][i];qe.push(ch[u][i]);}\n                else ch[u][i] = ch[f[u]][i];\n            }\n        }\n    }\n    void find()\n    {\n        int len = strlen(T), now = 0;\n        for(int i = 0; i < len; i++)\n        {\n            now = ch[now][T[i]-'a'];\n            for(int t = now; t; t = f[t]){if(val[t]){ans[val[t]]++;if(t!=0)maxx = max(maxx,ans[val[t]]);}}\n        }\n    }\n}AC;\nint n;\nint main()\n{\n    while(scanf(\"%d\", &n) == 1 && n)\n    {\n        AC.clear();\n        for(int i = 1; i <= n; ++i)\n            scanf(\" %s\", p[i]),AC.insert(p[i], i);\n        AC.getFail();\n        scanf(\"%s\", T);\n        AC.find();\n        printf(\"%d\\n\", maxx);\n        for(int i = 1; i <= n; ++i)if(ans[i] == maxx)printf(\"%s\\n\", p[i]);\n        //\u5982\u679c\u627e\u5230\u548c\u7b54\u6848\u4e00\u6837\u6570\u76ee\u7684\u5355\u8bcd\u5c31\u8f93\u51fa\n    }\n    return 0;\n}\n```",
        "postTime": 1544963488,
        "uid": 119118,
        "name": "\u665a\u5b89\u665a\u5b89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "## \u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u8bf4\u4e00\u4e0b\u5982\u4f55\u627e\u51fa\u73b0\u6b21\u6570\n\u56e0\u4e3a\u8fd9\u9053\u9898\u6ca1\u6709\u8bf4\u662f\u5426\u6709\u91cd\u590d\u5b50\u4e32\uff0c\u6240\u4ee5\u53ef\u80fd\u4e00\u4e2a\u8282\u70b9\u91cc\u6709\u591a\u4e2a\u76f8\u540c\u5b50\u4e32\u3002~~\u867d\u7136\u5b57\u4e32\u53ef\u80fd\u662f\u552f\u4e00\u7684\uff0c\u4f46\u4e5f\u7b97\u662f\u4e00\u79cd\u601d\u8def\u6269\u5c55\u5427\u3002~~\n\n\u5982\u679c\u53ea\u662f\u5355\u7eaf\u6807\u8bb0\u4e00\u4e2a\u8282\u70b9\u770b\u8fd9\u7ec4\u6570\u636e\n\n2\n\naba\n\naba\n\nababa\n\n0\n\n\u5c31\u4f1a\u8f93\u51fa 2 aba\n\n\u7136\u800c\u6211\u4eec\u8981 2 aba aba\uff0c\u8fd9\u5c31\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002\u3002\u3002\n\n\u4e8e\u662f\u6211\u4eec\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2avector\n```cpp\nvector<int> sum[100000];\n```\n\u5728\u5904\u7406\u5230\u7ed3\u5c3e\u7684\u65f6\u5019\u52a0\u5165vector\n```cpp\nvoid insert(char *s,int st){\n\tint len=strlen(s);\n\tint p=0;\n\tfor(int c,k=0;k<len;++k){\n\t\tc=s[k]-'a';\n\t\tif(!trie[p][c]) trie[p][c]=++tot;\n\t\tp=trie[p][c];\n\t}\n\tsum[p].push_back(st);//\u8fd9\u91cc\u52a0\u5165\n}\n```\n\u5728\u8ba1\u6570\u7684\u65f6\u5019\u52a0\u4e0avector\u91cc\u7684\u503c\n```cpp\nvoid ask(char *s){\n\tint len=strlen(s);\n\tint p=0;\n\tcan[0]=-1;\n\tfor(int k=0;k<len;++k){\n\t\tp=trie[p][s[k]-'a'];\n\t\tfor(int i=p;i&&can[i]!=-1;i=fail[i]){\n\t\t\tfor(vector<int>::iterator it=sum[i].begin();it!=sum[i].end();++it)\n\t\t\t\t++total[*it].val;//\u8fd9\u91cc\u8ba1\u6570\n\t\t}\n\t}\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rg register\ninline int read(){\n\trg char ch=getchar();\n\trg int x=0,f=0;\n\twhile(!isdigit(ch)) f|=(ch=='-'),ch=getchar();\n\twhile(isdigit(ch)) x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn f?-x:x;\n}\nint trie[100000][26],tot,mode[100000],fail[100000];\nchar have[155][75];\nchar s[1000010];\nint n,r,l;\nstruct node{\n\tint id,val;\n}total[155];\nvoid insert(char *s,int st){\n\tint len=strlen(s);\n\tint p=0;\n\tfor(int c,k=0;k<len;++k){\n\t\tc=s[k]-'a';\n\t\tif(!trie[p][c]) trie[p][c]=++tot;\n\t\tp=trie[p][c];\n\t}\n\tmode[p]=st;\n}\nvoid clear(){\n\tfor(int i=0;i<=tot;++i)//\u8fd9\u91cc\u9632\u6b62tot\u5f88\u5c0f\u4e00\u4e2a\u4e00\u4e2a\u52a0\u3002\n\t\tfor(int j=0;j<26;++j)\n\t\t\ttrie[i][j]=0;\n\tfor(int i=0;i<=tot;++i) fail[i]=0;\n\tmemset(mode,0,sizeof mode);\n\ttot=0;\n}\nvoid getf(){\n\tqueue<int> q;\n\tfor(int i=0;i<26;++i)\n\t\tif(trie[0][i]) q.push(trie[0][i]);\n\twhile(!q.empty()){\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=0;i<26;++i){\n\t\t\tif(trie[x][i]){\n\t\t\t\tfail[trie[x][i]]=trie[fail[x]][i];\n\t\t\t\tq.push(trie[x][i]);\n\t\t\t}else trie[x][i]=trie[fail[x]][i];\n\t\t}\n\t}\n}\nvoid ask(char *s){\n\tint len=strlen(s);\n\tint p=0;\n\tfor(int k=0;k<len;++k){\n\t\tp=trie[p][s[k]-'a'];\n\t\tfor(int i=p;i;i=fail[i]){\n\t\t\t++total[mode[i]].val;\n\t\t}\n\t}\n}\nbool cmp(const node &a,const node &b){\n\tif(a.val==b.val) return a.id<b.id;\n\treturn a.val<b.val;\n}\nint main(){\n\tcin>>n;\n\twhile(n){\n\t\tclear();\n\t\tfor(int i=1;i<=n;++i) scanf(\"%s\",have[i]),insert(have[i],i),total[i].id=i,total[i].val=0;\n\t\tgetf();\n\t\tscanf(\"%s\",s);\n\t\task(s);\n\t\tsort(total+1,total+1+n,cmp);\n\t\tr=l=n;\n\t\twhile(total[l].val==total[l-1].val) --l;\n\t\tprintf(\"%d\\n\",total[n].val);\n\t\tfor(int i=l;i<=r;++i) printf(\"%s\\n\",have[total[i].id]);\n\t\tcin>>n;\n\t}\n\treturn 0;\n}\n```\ntime\uff08O2\uff091476",
        "postTime": 1560425039,
        "uid": 121618,
        "name": "Accoty_AM",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "~~\u660e\u5929\u653e\u5047\uff0c\u4eca\u5929\u6ca1\u4ec0\u4e48\u5fc3\u601d\u505a\u9898\uff0c\u5c31\u6765\u6c34\u4e00\u7bc7\u9898\u89e3~~\n\n~~\u5176\u5b9e\u4e5f\u662f\u987a\u4fbf\u505a\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5c0f\u7ed3~~\n\n\u524d\u7f6e\u6280\u80fd\n\n- $Trie$\u5b57\u5178\u6811\n\n- $KMP$\n\n~~\u4ee5\u4e0b\u5185\u5bb9\u7edd\u5927\u591a\u6570\u6765\u81ea\u767e\u5ea6\u767e\u79d1~~\n\n$Trie$\u6811\uff0c\u662f\u4e00\u79cd\u6811\u5f62\u7ed3\u6784\uff0c\u662f\u4e00\u79cd\u54c8\u5e0c\u6811\u7684\u53d8\u79cd\n\n\u5178\u578b\u5e94\u7528\u662f\u7528\u4e8e\u7edf\u8ba1\uff0c\u6392\u5e8f\u548c\u4fdd\u5b58\u5927\u91cf\u7684\u5b57\u7b26\u4e32\n\n~~\u611f\u89c9\u8bf4\u4e86\u7b49\u4e8e\u6ca1\u8bf4~~\n\n\u7b80\u8a00\u4e4b\uff0c\u5c31\u662f\u628a\u8981\u5339\u914d\u7684\u5b57\u7b26\u4e32\u53d8\u6210\u6811\u5f62\u7ed3\u6784\u518d\u53bb\u5339\u914d\n\n$KMP$\u7b97\u6cd5\u662f\u4e00\u79cd\u5148\u8fdb\u7684\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5\n\n$KMP$\u7b97\u6cd5\u7684\u5173\u952e\u662f\u5229\u7528\u5339\u914d\u5931\u8d25\u540e\u7684\u4fe1\u606f\n\n\u5c3d\u91cf\u51cf\u5c11\u6a21\u5f0f\u4e32\u4e0e\u4e3b\u4e32\u7684\u5339\u914d\u6b21\u6570\u4ee5\u8fbe\u5230\u5feb\u901f\u5339\u914d\u7684\u76ee\u7684\n\n\u5177\u4f53\u5b9e\u73b0\u5c31\u662f\u5b9e\u73b0\u4e00\u4e2a$next$\u51fd\u6570\uff0c\u51fd\u6570\u672c\u8eab\u5305\u542b\u4e86\u6a21\u5f0f\u4e32\u7684\u5c40\u90e8\u5339\u914d\u4fe1\u606f\n\n\u8fd9\u4e2a$next$\u51fd\u6570\u5b66\u540d\u53eb\u5931\u914d\u51fd\u6570\uff0c~~\u5c31\u662f\u5339\u914d\u5931\u8d25\u7684\u65f6\u5019\u4f7f\u7528\u7684~~\n\n\u5efa\u7acb\u4e00\u4e2a$AC$\u81ea\u52a8\u673a\u901a\u5e38\u9700\u8981\u4e24\u4e2a\u6b65\u9aa4\n\n- \u6784\u5efa$Trie$\u6811\n\n- \u5bf9$Trie$\u6811\u4e0a\u6240\u6709\u7684\u7ed3\u70b9\u6784\u9020\u5931\u914d\u6307\u9488\n\n~~\u5e9f\u8bdd\u8bb2\u5b8c\u4e86\uff0c\u4e0b\u9762\u7684\u624d\u662f\u91cd\u70b9~~\n\n**\u5982\u4f55\u6784\u9020\u5931\u914d\u6307\u9488\uff1f\uff1f\uff1f**\n\n\u6784\u5efa$fail$\u6307\u9488\uff0c\u53ef\u4ee5\u53c2\u8003$KMP$\u4e2d\u6784\u9020$next$\u6570\u7ec4\u7684\u601d\u60f3\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u7ebf\u6027\u9012\u63a8\u7684\u65b9\u6cd5\u6765\u6784\u5efa\n\n\u5177\u4f53\u7684\u64cd\u4f5c\u7c7b\u4f3c\u4e00\u4e2a$BFS$\uff0c\u6784\u5efa\u4e00\u4e2a\u4f18\u5148\u961f\u5217\n\n\u7136\u540e\u4e00\u5c42\u4e00\u5c42\u53bb\u6269\u5c55\uff0c\u6807\u8bb0$fail$\u6307\u9488\n\n\u8fd9\u91cc\u8981\u6309\u7167\u8282\u70b9\u662f\u5426\u5b58\u5728\u7684\u60c5\u51b5\u8ba8\u8bba\u4e00\u4e0b\uff0c\u63a8\u8350\u624b\u73a9\u51e0\u7ec4\u6837\u4f8b\n\n\u4ee3\u7801\u5176\u5b9e\u5f88\u77ed\uff0c\u4f46\u662f\u7406\u89e3\u8d77\u6765\u771f\u7684\u5f88\u96be\n\n[\u5b89\u5229\u4e00\u4e2a\u5e26$GIF$\u7684\u535a\u5ba2](https://www.luogu.org/blog/42196/qiang-shi-tu-xie-ac-zi-dong-ji)\uff0c~~\u5176\u5b9e\u662f\u6211\u8bb2\u4e0d\u6e05~~\n\n\u6784\u9020\u4e4b\u540e\u518d\u56de\u5230\u6bcd\u4e32\u4e2d\u9010\u4e2a\u5339\u914d\n\n\u7528$fail$\u6307\u9488\u81ea\u52a8\u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n\n\u53d6\u53cd\u662f\u7528\u6765\u5224\u65ad\u662f\u5426\u90a3\u4e2a\u70b9\u5df2\u7ecf\u7ecf\u8fc7\n\n\u8fd9\u91cc\u611f\u89c9\u5f88\u50cf\u8dd1\u56fe\u8bba\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u5728\u8dd1\u5b57\u5178\u56fe\n\n~~\u597d\u50cf$AC$\u81ea\u52a8\u673a\u5c31\u8fd9\u4e48\u4e00\u70b9\u70b9\uff1f\uff1f\uff1f~~\n\n\u5f15\u7528\u67d0\u5927\u795e\u4e00\u53e5\u8bdd\uff0c\u5f3a\u884c\u603b\u7ed3\u4e00\u53e5$AC$\u81ea\u52a8\u673a\u7684\u8fd0\u884c\u539f\u7406\n\n**\u6784\u5efa\u5b57\u5178\u56fe\u5b9e\u73b0\u81ea\u52a8\u8df3\u8f6c\uff0c\u6784\u5efa\u5931\u914d\u6307\u9488\u5b9e\u73b0\u591a\u6a21\u5f0f\u5339\u914d**\n\n\u56e0\u4e3a\u6211\u4ee3\u7801\u5e38\u6570\u5f88\u5927\uff0c\u6240\u4ee5\u5b9e\u7528\u4ef7\u503c\u4e0d\u9ad8\uff0c~~\u4f46\u662f\u8fd8\u662f\u8d34\u4e00\u4e0b~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nchar s[155][75];\nchar T[1000001];\nint sum[1000001];\nint val[1000001];\nint fail[1000001];\nint son[1000001][27];\nint ans,mmp,tot,root,N;\ninline void insert(char *s,int I)\n{\n    int M=strlen(s+1),now=root;\n    for(register int i=1;i<=M;++i)\n    {\n        int x=s[i]-'a';\n        if(!son[now][x]) son[now][x]=++tot;\n        now=son[now][x];\n    }\n    val[now]=I;\n}\ninline void miss()\n{\n    queue < int > Q;\n    for(register int i=0;i<26;++i)\n        if(son[root][i]) Q.push(son[root][i]);\n    while(!Q.empty())\n    {\n        int p=Q.front();Q.pop();\n        for(register int i=0;i<26;++i)\n            if(!son[p][i]) son[p][i]=son[fail[p]][i];\n            else fail[son[p][i]]=son[fail[p]][i],Q.push(son[p][i]);\n    }\n}\nint main()\n{\n    while(scanf(\"%d\",&N)&&N)\n    {\n        memset(s,0,sizeof(s));memset(son,0,sizeof(son));memset(sum,0,sizeof(sum));\n        memset(val,0,sizeof(val));memset(fail,0,sizeof(fail));\n        for(register int i=1;i<=N;++i) scanf(\"%s\",s[i]+1),insert(s[i],i);\n        miss();ans=0;scanf(\"%s\",T+1);int M=strlen(T+1),now=root;\n        for(register int i=1;i<=M;++i)\n        {\n            now=son[now][T[i]-'a'];\n            for(register int j=now;j;j=fail[j]) if(val[j]) ++sum[val[j]];\n        }\n        for(register int i=1;i<=N;++i) ans=max(ans,sum[i]);\n        printf(\"%d\\n\",ans);\n        for(register int i=1;i<=N;++i)\n            if(ans==sum[i]) printf(\"%s\\n\",s[i]+1);\n    }\n    return 0;\n}\n```",
        "postTime": 1548855728,
        "uid": 110198,
        "name": "RicardoShips",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u4e00\u9053\u6a21\u677f\u9898\uff0c~~\u7136\u800c\u6211\u641e\u4e861\u5c0f\u65f6~~\uff0c~~\u53ef\u80fd\u662f\u6211\u8fd8\u662f\u592a\u83dc\u4e86~~~~\n\n\u5982\u679c\u4f60\u8fd8\u4e0d\u77e5\u9053AC\u81ea\u52a8\u673a\u662f\u4ec0\u4e48\u90a3\u5c31[]()\n\n\u8fd9\u4e2a\u6bd4\u7b80\u5355\u7248\u7a0d\u5fae\u6709\u6240\u6539\u52a8\uff0c\u90a3\u4e48\u8fd9\u91cc\u6211\u4eec\u5c31\u7528\u4e00\u4e2aans\u6570\u7ec4\u5b58\u4e00\u4e0b\u7b54\u6848\n\u56e0\u4e3a\u6211\u4eec\u8981\u6c42\u89e3\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4e8e\u662f\u5c31\u4e0d\u7528\u6807\u8bb0\u4e86\uff0c\u5728\u5931\u914d\u65f6\u53ea\u9700\u8981\u5224\u65adj\u662f\u5426\u4e3a\n0\u5c31\u53ef\u4ee5\u4e86\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u5355\u8bcd\u7684\u672b\u5c3e\uff08\u4e5f\u5c31\u662fcnt>0\uff09\u5c31\u7528ans\u8bb0\u4e00\u4e0b\u5c31OK\u4e86\u3002\n\n\u5176\u4ed6\u7684\u8bdd\u57fa\u672c\u4e00\u6837\uff0c\u4e0d\u8fc7\u8fd8\u6709\u4e00\u70b9\uff01\u5c31\u662f\u6392\u5e8f\u65f6\u8981\u6309\u8f93\u5165\u987a\u5e8f\u6765\uff0c\u4e0d\u7136\u53ea\u670920\u5206\uff0c\n~~\u6211\u5c31\u662f\u5728\u8fd9\u5361\u4e86\u597d\u4e45~~\u3002```\n\nCode\n```\n#include<bits/stdc++.h>\n#define N 160\nusing namespace std;\nstruct node{\n\tint fail,cnt;\n\tint next[26];\n}AC[N*100];\nstruct no{\n\tint id,num;\n}ans[N*100];\nint n,k=0,tot=0;\nchar a[N][N],text[N*N*N];\nvoid build(int id,char *s,int now){\n\tint len=strlen(s);\n\tfor(int i=0;i<len;i++){\n\t\tint j=s[i]-'a';\n\t\tif(AC[id].next[j]==0) AC[id].next[j]=++k;\n\t\tid=AC[id].next[j];\n\t}\n\tAC[id].cnt=now;ans[now].id=now;\n}\nvoid match(int id){\n\tqueue<int> q;\n\tfor(int i=0;i<26;i++){\n\t\tif(AC[id].next[i]==0) continue;\n\t\tAC[AC[id].next[i]].fail=id;\n\t\tq.push(AC[id].next[i]);\n\t}\n\twhile(!q.empty()){\n\t\tint now=q.front();q.pop();\n\t\tfor(int i=0;i<26;i++){\n\t\t\tif(AC[now].next[i]==0){\n\t\t\t\tAC[now].next[i]=AC[AC[now].fail].next[i];\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tAC[AC[now].next[i]].fail=AC[AC[now].fail].next[i];\n\t\t\tq.push(AC[now].next[i]);\n\t\t}\n\t}\n}\nvoid sovel(int id,char *s){\n\tint len=strlen(s);\n\tfor(int i=0;i<len;i++){\n\t\tint j=AC[id].next[s[i]-'a'];\n\t\twhile(j!=0){\n\t\t\tif(AC[j].cnt>0) ans[AC[j].cnt].num++;\n\t\t\tj=AC[j].fail;\n\t\t}\n\t\tid=AC[id].next[s[i]-'a'];\n\t}\n}\nbool cmp(no a,no b){\n\tif(a.num==b.num) return a.id<b.id;\n\treturn a.num>b.num;\n}\nint main()\n{\n\twhile(1){\n\t\tk=0;tot=0;\n\t\tmemset(&AC,0,sizeof(AC));memset(&ans,0,sizeof(ans));\n\t\tscanf(\"%d\",&n);\n\t\tif(n==0) break;\n\t\tfor(int i=1;i<=n;i++) {scanf(\" %s\",a[i]),build(0,a[i],i);}\n\t\tmatch(0);\n\t\tscanf(\" %s\",text);\n\t\tsovel(0,text);\n\t\tsort(ans+1,ans+n+1,cmp);\n\t\tprintf(\"%d\\n%s\\n\",ans[1].num,a[ans[1].id]);\n\t\tfor(int i=2;i<=n;i++){\n\t\t\tif(ans[i].num!=ans[i-1].num) break;\n\t\t\tprintf(\"%s\\n\",a[ans[i].id]);\n\t\t}\n\t}\n\treturn 0;\n} ",
        "postTime": 1543123298,
        "uid": 112003,
        "name": "_Chris\u00b0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "### [\u5f00\u5934\u5c0f\u5e7f\u544a\uff1a\u81ea\u5df1\u505a\u7684\u4e00\u4e2a\u6a21\u677f\u5e93OwO](https://www.luogu.org/blog/29354/Templet)\n\n------------\n## \u5728\u8fd9\u91ccHACK\u51e0\u4e4e\u6240\u6709\u7684\u9898\u89e3\uff08\u56e0\u4e3a\u597d\u50cf\u6ca1\u53d1\u73b0\u6709\u5bf9\u7684\uff1f\n\n```\n4\nAB\nBC\nCD\nABCD\nABCD\n0\n```\n\n### \u7b54\u6848\u5e94\u8be5\u662f\n\n```\n1\nAB\nBC\nCD\nABCD\n\n```\n## \u800c\u5176\u4ed6\u540c\u5b66\u90fd\u53ea\u8f93\u51fa\u4e86\u4e2a\u522b\u7b54\u6848\uff1f\uff1f\n\n### \u4f8b\u5982\n\n```\n1\nAB\nABCD\n\n```\n\n### \u6216\n\n```\n1\nAB\nBC\nCD\n\n```\n\n------------\n### \u4f1a\u51fa\u73b0\u4e0a\u9762\u7684\u60c5\u51b5\uff0c\u53ea\u662f\u56e0\u4e3a\u6ca1\u6709\u5224\u65ad\u4e32\u5305\u542b\u7684\u5173\u7cfb\u6216\u8005\u662f\u76f4\u63a5\u9000\u56de\u91cd\u65b0\u5339\u914d\u4e86\n \u55f7\uff1f\u4ec0\u4e48\u610f\u601d\uff1f\uff1f\n## \u4e3e\u4f8b\uff1a\n>*  \u5f53\u5339\u914d\u5b8c\u4e32$AB$\u65f6\uff1a\n>*  \u5982\u679c\u5199\u7684\u81ea\u52a8\u673a\u4e0d\u9000\u56de\u5230B\u5e76\u4e14\u91cd\u65b0\u5339\u914d\uff08\u4ecetrie\u6811\u7684\u6811\u6839\u5f00\u59cb\uff09\uff0c\u800c\u662f\u7ee7\u7eed\u5339\u914d\uff0c\u90a3\u4e48\u4f1a\u5ffd\u7565\u6389$BC$,$CD$\u4e24\u4e2a\u7b54\u6848\uff0c\u6240\u4ee5\u6700\u7ec8\u53ea\u4f1a\u8f93\u51fa$AB$\u548c$ABCD$\u8fd9\u4e24\u4e2a\u7b54\u6848\n>*  \u5982\u679c\u5199\u7684\u81ea\u52a8\u673a\u9000\u56de\u5230B\u91cd\u65b0\u5339\u914d\uff08\u4ecetrie\u6811\u7684\u6811\u6839\u5f00\u59cb\uff09\uff0c\u90a3\u4e48$AB$,$BC$,$CD$\u90fd\u4f1a\u5339\u914d\u5230\uff0c\u4f46\u662f\u56e0\u4e3a\u9000\u56de\u7684\u5173\u7cfb\uff0cABCD\u5e76\u6ca1\u6709\u88ab\u5339\u914d\u5230\uff0c\u8fd9\u548c\u4e0a\u9762\u7684\u95ee\u9898\u8c8c\u4f3c\u6709\u70b9\u77db\u76fe\u4e86\u3002\n### \u4e0a\u9762\u7684\u95ee\u9898\u53ea\u662f\u6211\u81ea\u5df1\u9047\u5230\u7684\uff0c\u53ef\u80fd\u8fd8\u4f1a\u6709\u5176\u4ed6\u60c5\u51b5\uff0c\u4f46\u662f\u9274\u4e8e\u5927\u591a\u6570\u9898\u89e3\u5e76\u6ca1\u6709\u8f93\u51fa\u6b63\u786e\u7b54\u6848\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u6211\u81ea\u5df1\u7684\u89e3\u51b3\u65b9\u6cd5\uff1a\n>*  \u5176\u5b9e\u7f6a\u9b41\u7978\u9996\u53ea\u662f**\u9000\u56de\u91cd\u65b0\u5339\u914d\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u5339\u914d\u5230\u6700\u540e\u91cd\u65b0\u5339\u914d\u4e86**\uff0c\u5c31\u50cf\u5339\u914dAB\u65f6\u4e0d\u7ee7\u7eed\u5f80\u4e0b\u5339\u914dABCD\uff0c\u800c\u662f\u8df3\u56de\u6839\u5339\u914dB\u3002\u5f88\u663e\u7136\u6211\u4eec\u53ea\u8981\u8ba9\u81ea\u52a8\u673a\u5339\u914d\u5230\u6700\u6df1\u8282\u70b9\uff0c\u518d\u5f80\u56de\u8df3\u5c31\u5bf9\u4e86\u3002\n>*  \u6709\u7684\u81ea\u52a8\u673a\u76f4\u63a5\u628a\u6700\u6df1\u7684\u8282\u70b9\u4e0b\u6ca1\u6709\u7684\u8282\u70b9\u6307\u5411\u4e86\u6700\u6df1\u8282\u70b9\u7684fail\n>*  \u53ef\u80fd\u8fd9\u884c\u4ee3\u7801\u957f\u8fd9\u6837\uff1a$trie[x][i] = trie[fail[x]][i];$\n>*  \u8fd9\u5c31\u662f\u6211\u4eec\u7684\u5224\u65ad\u4f9d\u636e\u4e86\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a\u5339\u914d\u5b57\u7b26\u662f\u8df3\u5230fail\u7684\u4e0b\u9762\u7684\u8bdd\uff0c\u8bf4\u660e\u4e0b\u9762\u5df2\u7ecf\u6ca1\u6709\u8282\u70b9\uff0c\u53ea\u662f\u6211\u4eec\u4f18\u5316\u8fde\u4e86\u8282\u70b9\u800c\u5df2\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u53ef\u4ee5\u9000\u56detrie\u7684\u6839\u91cd\u65b0\u5339\u914d\u4e86\n>* ### \u5373\u5f53$trie[x][c[i+1] - 'a'] == trie[fail[x]][c[i+1] - 'a']$\u65f6\n\u6ce8\uff1ac[i+1]\u662f\u4e0b\u4e00\u4e2a\u5339\u914d\u5b57\u7b26\n\n\n------------\n### \u6700\u540e\uff0c\u53ef\u80fd\u8fd9\u4e2a\u4e0d\u662f\u552f\u4e00\u89e3\u51b3\u7684\u529e\u6cd5\uff0c\u6216\u8005\u8bf4\u4f1a\u6709\u66f4\u597dAC\u81ea\u52a8\u673a\u5199\u6cd5\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002\u8fd9\u7bc7\u9898\u89e3\u7684\u6765\u6e90\u662f\u6211\u81ea\u5df1\u6253\u6a21\u62df\u8d5b\u5199\u7684\u81ea\u52a8\u673a\u8dd1\u4e0d\u8fc7\u50cf\u8fd9\u6837\u7684\u4f8b\u5b50\uff0c\u800c\u6211\u81ea\u5df1\u5728luogu\u4e0a\u6253\u7684\u6a21\u677f\u5374AC\u4e86\uff0c\u4e8e\u662f\u628a\u9898\u89e3\u90fd\u8dd1\u4e86\u4e00\u4e0b\u53d1\u73b0\u90fd\u4e0d\u592a\u6b63\u786e\uff0c\u5728\u6b64\u7ea0\u6b63\u4e00\u4e0b\uff08\u4e5f\u6709\u53ef\u80fd\u662f\u81ea\u5df1\u592a\u50bbXD\uff09\n------------\n# CODE\n\u6709\u4e9b\u5730\u65b9\u6709\u5c0f\u6ce8\u91ca\n```cpp\n#include <iostream>\n#include <queue>\n#include <vector>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\nconst int MAXN = 1e6 + 5, MAXA = 26;\nconst int MAXP = 155, MAXLEN = 75;\n\nint n;\n\nqueue<int> Q;\n\nstruct Automaton\n{\n    char p[MAXP][MAXLEN];\n\n    int trie[MAXN][MAXA], fail[MAXN];\n    int num[MAXN], nxt[MAXN], tot;\n\n    signed id[MAXN][1], tail[MAXN];\n\n    bool tag[MAXN];\n\n    const int root = 0;\n\n    inline void Memset(void)\n    {\n        memset(trie, 0, sizeof trie);\n        memset(fail, 0, sizeof fail);\n        memset(num, 0, sizeof num);\n        memset(tag, 0, sizeof tag);\n        memset(tail, 0, sizeof tail);\n\n        return;\n    }\n\n    inline void Insert(int rak)\n    {\n        char *c = p[rak];\n        int x = root, len = strlen(c);\n\n        for (int i = 0; i < len; i++)\n        {\n            if (!trie[x][c[i] - 'a'])\n                trie[x][c[i] - 'a'] = ++tot;\n            x = trie[x][c[i] - 'a'];\n        }\n        tag[x] = true, nxt[x] = len - 1, id[x][++tail[x]] = rak;//nxt\u662f\u957f\u5ea6-1\uff0c\u4e5f\u662f\u5339\u914d\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u5e94\u8be5\u9000\u56de\u591a\u5c11\u4e2a\u5b57\u7b26\n\n        return;\n    }\n\n    inline void MakeFail(void)\n    {\n        for (int i = 0; i < MAXA; i++)\n            if (trie[root][i])\n                Q.push(trie[root][i]);\n\n        while (!Q.empty())\n        {\n            int x = Q.front();\n            Q.pop();\n\n            for (int i = 0; i < MAXA; i++)\n            {\n                if (trie[x][i])\n                {\n                    fail[trie[x][i]] = trie[fail[x]][i];//\u8fd9\u91cc\u662f\u4e0a\u9762\u8bb2\u7684\u4f18\u5316\n                    Q.push(trie[x][i]);\n                }\n                else\n                    trie[x][i] = trie[fail[x]][i];//\u53ef\u4ee5\u4f9d\u636e\u8fd9\u4e2a\u5224\u65ad\u540e\u9762\u662f\u5426\u8fd8\u6709\u8282\u70b9\uff0c\u89e3\u51b3\u672c\u9898\u89e3\u8ba8\u8bba\u7684\u95ee\u9898\n            }\n        }\n\n        return;\n    }\n\n    inline void Compare(char *c)\n    {\n        int ans = 0, x = root;\n\n        for (int i = 0, len = strlen(c); i < len; i++)\n        {\n            x = trie[x][c[i] - 'a'];\n\n            if (tag[x])\n            {\n                for (int j = 1; j <= tail[x]; j++)\n                    ans = max(ans, ++num[id[x][j]]);\n\n                if (trie[x][c[i+1] - 'a'] == trie[fail[x]][c[i+1] - 'a'])//\u9898\u89e3\u7684\u6838\u5fc3\uff01\n                    i -= nxt[x], x = root;\n            }\n        }\n\n        printf(\"%d\\n\", ans);\n        for (int i = 1; i <= n; i++)\n            if (num[i] == ans)\n                printf(\"%s\\n\", p[i]);\n    }\n\n} AC;\n\nchar s[MAXN];\n\nsigned main(void)\n{\n    scanf(\"%d\", &n);\n    while (n)\n    {\n        AC.Memset();\n\n        for (int i = 1; i <= n; i++)\n            scanf(\"%s\", AC.p[i]), AC.Insert(i);\n        AC.MakeFail();\n\n        scanf(\"%s\", s);\n        AC.Compare(s);\n\n        scanf(\"%d\", &n);\n    }\n\n    return 0;\n}\n\n```\n",
        "postTime": 1540197308,
        "uid": 29354,
        "name": "CodyTheWolf",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u8dd1\u5f97\u8fd8\u4e0d\u662f\u5f88\u6162\uff1f\n\n\u4e0d\u8fc7\u4e00\u5f00\u59cb\u6ca1\u6309\u8f93\u5165\u987a\u5e8f\u8f93\u5165\u4e00\u7247wa\u3002\u3002\u3002/(\u3112o\u3112)/~~\n\n\u5176\u5b9e\u4e4d\u4e00\u770b\u8fd8\u633a\u96be\u7684\uff0c\n\n\u7136\u800c\u60f3\u4e00\u4e0b\u53d1\u73b0\u5e76\u4e0d\u96be\n\n\u5efa\u8bae\u5148\u505a\u7b80\u5355\u7248\u518d\u6765\n\n\u8fd9\u91cc\u76f8\u5bf9\u7b80\u5355\u7248\u53ea\u8981\u6539\u51e0\u4e2a\u5730\u65b9\u5c31\u53ef\u4ee5\u4e86\n\n\u9996\u5148\u6211\u4eec\u589e\u52a0\u4e00\u4e2afather\u6570\u7ec4\u8bb0\u5f55father\uff0c\u4e00\u4e2aa\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u5b58\u7684\u662f\u54ea\u4e2a\u5b57\u7b26\uff0c\u4ee5\u4fbf\u8f93\u51fa\n\n\u7136\u540e\u5c06ans\u53d8\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53\n\nnum\u7684\u4f5c\u7528\u662f\u5224\u65ad\u987a\u5e8f\u4ee5\u53ca\u8bb0\u5f55\u8282\u70b9\u4f4d\u7f6e\n\n\u5728\u5339\u914d\u6587\u672c\u4e32\u7684\u65f6\u5019\uff0c\u6bcf\u5339\u914d\u5230\u4e00\u4e2a\uff0c\u5c31\u628a\u5bf9\u5e94\u8282\u70b9\u7684ans.date++\uff0c\n\n\u540c\u65f6\u6ce8\u610fval\u4e0d\u80fd\u6e05\u96f6\uff0c\u56e0\u4e3a\u8981\u652f\u6301\u4e00\u4e2a\u4e32\u591a\u6b21\u51fa\u73b0\u3002\n\n\u7531\u4e8e\u6211\u4eec\u662f\u6309\u987a\u5e8f\u63d2\u5165\u6a21\u5f0f\u4e32\uff0c\u6240\u4ee5\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u7684\u7ed3\u5c3e\u5bf9\u5e94\u7684\u8282\u70b9\u7684\u4e0b\u6807\u662f\u5355\u8c03\u4e0a\u5347\u7684\uff0c\u56e0\u6b64num\u5c0f\u5373\u4ee3\u8868\u8f93\u5165\u987a\u5e8f\u9760\u524d\n\u56e0\u6b64\u5728\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u6309\u7167date\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0cnum\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u5e76\u8f93\u51fa\u5373\u53ef\n\n\u7531\u4e8eans\u662f\u76f4\u63a5\u7edf\u8ba1\u5728\u7ed3\u5c3e\u8282\u70b9\u5bf9\u5e94\u4e0b\u6807\u4e0a\u7684\uff0c\n\u6240\u4ee5\u76f4\u63a5\u5c31\u5f97\u5230\u4e86\u5bf9\u5e94\u4e32\u7684\u7ed3\u5c3e\u4f4d\u7f6e\u5728\u54ea\uff0c\n\u7136\u540e\u589e\u52a0\u4e00\u4e2a\u6570\u7ec4\uff0c\uff08\u4e3a\u4e86\u5b9e\u73b0\u6b63\u5e8f\u8f93\u51fa\uff09\n\u56e0\u4e3a\u4ece\u4e0b\u9762\u8dd1\u5230\u4e0a\u9762\u7684\u8bdd\uff0c\u8bbf\u95ee\u7684\u6b21\u5e8f\u5176\u5b9e\u662f\u5012\u7684\uff0c\u5982\u679c\u76f4\u63a5\u8f93\u51fa\u5c31\u4f1a\u628a\u6a21\u5f0f\u4e32\u5012\u8fc7\u6765\uff0c\u56e0\u6b64\u5f00\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u5373\u53ef\u3002\n\u6ce8\u610f\u6bcf\u6b21\u90fd\u8981\u521d\u59cb\u5316\n\n\t#include<bits/stdc++.h>\n\tusing namespace std;\n\t#define maxn 10510\n\t#define R register int\n\tint n;char s[1000005];\n\tint q[1000005],head,tail;\n\tint father[maxn],a[maxn];\n\tint c[maxn][26],val[maxn],fail[maxn],tot;\n\tchar out[80];\n\n\tstruct abc{\n\t\tint date,num;\n\t}ans[maxn];\n\t\n\tstruct Aho_Corasick_Automaton\n\t{\n\t\tvoid add()//\u52a0\u5165trie\u6811\n\t\t{\n\t\t\tint len=strlen(s),now=0;\n\t\t\tfor(R i=0;i<len;i++)\n\t\t\t{\n\t\t\t\tint v=s[i]-'a';//\u8bb0\u5f55\u662f\u54ea\u4e2a\u4e2a\u5b57\u6bcd\n\t\t\t\tif(!c[now][v])\tc[now][v]=++tot,father[tot]=now,a[tot]=v;\n\t\t\t\tnow=c[now][v];\n\t\t\t}\n\t\t\tval[now]++;\n\t\t}\n\t\n\t\tvoid build()\n\t\t{\n\t\t\tR now;\n\t\t\thead=tail=0;\n\t\t\tfor(R i=0;i<26;i++)\n\t\t\t\tif(c[0][i]) fail[c[0][i]]=0,q[++tail]=c[0][i];\n\t\t\twhile(head<tail)\n\t\t\t{\n\t\t\t\tnow=q[++head];\n\t\t\t\tfor(R i=0;i<26;i++)\n\t\t\t\t\tif(c[now][i]) fail[c[now][i]]=c[fail[now]][i],q[++tail]=c[now][i];\n\t\t\t\t\telse c[now][i]=c[fail[now]][i];//\u5982\u679cfather\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u4e0b\u4e00\u4e2a\u521a\u597d\u53ef\u4ee5\u5339\u914d\u7684\u8bdd\uff0c\u5c31\u76f4\u63a5\u628afail\u6307\u8fc7\u53bb\u5c31\u53ef\u4ee5\u4e86\n\t\t\t}\n\t\t}\n\t\n\t\tvoid search()\n\t\t{\n\t\t\tint len=strlen(s),now=0;\n\t\t\tfor(R i=0;i<len;i++)\n\t\t\t{\n\t\t\t\tnow=c[now][s[i]-'a'];\n\t\t\t\tfor(R t=now; t && ~val[t] ;t=fail[t]) ans[t].date+=val[t];\n\t\t\t}\n\t\t}\n\t}AC;\n\n\tbool cmp(abc a,abc b)\n\t{\n\t\tif(a.date!=b.date) return a.date>b.date;\n\t\tif(a.num!=b.num) return a.num<b.num;//error!!!\u56e0\u4e3a\u8f93\u51fa\u8981\u6309\u8f93\u5165\u987a\u5e8f\n\t}\n\n\tvoid work()\n\t{\n\t\tR now,cnt=0;\n\t\n\t\twhile(1)\n\t\t{\n\t\t\tscanf(\"%d\",&n);\n\t\t\tif(!n)return ;\n\t\t\ttot=0;\n\t\t\tmemset(c,0,sizeof(c));\n\t\t\tfor(R i=1;i<=maxn;i++)ans[i].date=0;\n\t\t\tmemset(val,0,sizeof(val));\n\t\t\tfor(R i=1;i<=maxn;i++)\tans[i].num=i;//\u7531\u4e8e\u6bcf\u6b21sort\u540e\u90fd\u4f1a\u6253\u4e71num\u7684\u6b21\u5e8f\uff0c\u6240\u4ee5\u4e0e\u5176\u518dsort\u4e00\u6b21\uff0c\u4e0d\u5982\u626b\u4e00\u904d\u91cd\u65b0\u8d4b\u503c\n\t\t\n\t\t\tfor(R i=1;i<=n;i++)\tscanf(\"%s\",s),AC.add();\n\t\t\tAC.build();\n\t\t\tscanf(\"%s\",s);\n\t\t\tAC.search();\n\t\t\tsort(ans+1,ans+maxn,cmp);\n\t\t\tprintf(\"%d\\n\",ans[1].date);\n\t\t\tnow=ans[1].num;\n\t\t\tcnt=0;\n\t\t\twhile(now)\n\t\t\t{\n\t\t\t\tout[++cnt]=a[now]+'a';\n\t\t\t\tnow=father[now];\n\t\t\t}\n\t\t\tfor(R i=cnt;i>=1;i--) printf(\"%c\",out[i]);\n\t\t\tprintf(\"\\n\");\n\t\t\tfor(R i=2;i<=n;i++)\n\t\t\t{\n\t\t\t\tif(ans[i].date!=ans[i-1].date)\tbreak;\n\t\t\t\tnow=ans[i].num;\n\t\t\t\tcnt=0;\n\t\t\t\twhile(now)\n\t\t\t\t{\n\t\t\t\t\tout[++cnt]=a[now]+'a';\n\t\t\t\t\tnow=father[now];\n\t\t\t\t}\n\t\t\t\tfor(R i=cnt;i>=1;i--) printf(\"%c\",out[i]);\n\t\t\t\tprintf(\"\\n\");\n\t\t\t}\n\t\t}\n\t}\n\n\tint main()\n\t{\n\t\tfreopen(\"in.in\",\"r\",stdin);\n\t\twork();\n\t\tfclose(stdin);\n\t\treturn 0;\n\t}",
        "postTime": 1519226236,
        "uid": 47136,
        "name": "ww3113306",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    },
    {
        "content": "\u53ef\u80fd\u4f1a\u662f\u7b2c\u4e00\u4e2a\u9898\u89e3...\u4e5f\u53ea\u662f\u6765\u6c34\u4e00\u53d1\n\n\n\u9274\u4e8e\u6211\u6c34\u5e73\u592a\u5dee,\u4e5f\u6ca1\u6709\u5b8c\u5168\u7406\u89e3\u8fd9\u7b97\u6cd5.\u751a\u81f3\u81ea\u5df1\u7684\u7a0b\u5e8f~~(\u642c\u8fd0\u4e86\u5176\u4ed6\u9898)~~\n\n\n~~\u5404\u7c7b\u8d44\u6599\u5e94\u8be5\u4e5f\u5f88\u591a,\u4e11\u964b\u7684\u4ee3\u7801\u4ec5\u4f5c\u4e3a\u53c2\u8003~~\n\n\n```cpp\n#include<iostream>\n#include<string.h> \nusing namespace std;\n#define rep(i,x,y) for(int i=(x);i<=(y);i++)\nconst int MC=26;\n\nstruct T{//trie\u7684\u4e00\u4e2a\u7ed3\u70b9\u5427..\n  T *Pre[MC],*F;\n  int Num;\n  T(){memset(Pre,0,sizeof Pre),F=0,Num=0;}\n}*R;\n\nvoid I(char s[],int k){//\u63d2\u5165\u4e00\u4e2a\u6a21\u5f0f\u4e32\n  T *p=R;\n  for(int i=0;s[i];i++){\n    if(p->Pre[s[i]-'a']==0) p->Pre[s[i]-'a']=new T();\n    p=p->Pre[s[i]-'a'];\n  }\n  p->Num=k;//\u4ec5\u4ec5\u8bb0\u5f55\u8be5\u8282\u70b9\u8868\u793a\u7684\u6a21\u5f0f\u4e32,\u5982\u6709\u91cd\u590d\u6a21\u5f0f\u4e32,\u5e94\u8be5\u4f1a\u6709\u95ee\u9898\n}\n\nT *q[600005];\n\nvoid Build(){//\u6784\u9020DFA\n  int t=0;\n  R->F=R;\n  rep(j,0,MC-1) if(R->Pre[j]==0) R->Pre[j]=R;\n    else{\n      q[++t]=R->Pre[j];\n      q[t]->F=R;\n    }\n  rep(cur,1,t){\n    T *i=q[cur];\n    rep(j,0,MC-1) if(i->Pre[j]!=0){\n      T *k=i->F;\n      while(k->Pre[j]==0) k=k->F;\n      k=k->Pre[j];\n      q[++t]=i->Pre[j];\n      q[t]->F=k;\n    }\n  }\n}\n\nint n,ans,f[152];\nchar s[1000005],t[152][72];\n\nint main(){\n  cin>>n;\n  while(n){\n    R=new T();\n    rep(i,1,n) scanf(\"%s\",&t[i]),I(t[i],i);//\u63d2\u5165\u6a21\u5f0f\u4e32\n    Build();\n    scanf(\"%s\",&s);\n    T *cur=R;\n    ans=0;\n    for(int i=0;s[i];i++){\n      int k=s[i]-'a';\n      while(cur->Pre[k]==0) cur=cur->F;\n      cur=cur->Pre[k];\n      for(T *tmp=cur;1;tmp=tmp->F){\n        ++f[tmp->Num];//            f[i]\u8868\u793a\u7b2ci\u4e2a\u6a21\u5f0f\u4e32\u51fa\u73b0\u6b21\u6570\n        if(tmp==tmp->F) break;\n      }\n    }\n    rep(i,1,n) ans=max(ans,f[i]);\n    printf(\"%d\\n\",ans);\n    rep(i,1,n) if(f[i]==ans) printf(\"%s\\n\",t[i]);\n    cin>>n;\n    memset(f,0,sizeof f);\n  }\n  return 0;\n}\n```",
        "postTime": 1497537196,
        "uid": 21856,
        "name": "Cekavis",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3796 \u3010\u3010\u6a21\u677f\u3011AC\u81ea\u52a8\u673a\uff08\u52a0\u5f3a\u7248\uff09\u3011"
    }
]