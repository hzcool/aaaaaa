[
    {
        "content": "##  \u6700\u77ed\u8def+\u72b6\u538bdp\n\n\u7531\u4e8e\u6211\u4eec\u770b\u5230\u4ed6\u7684k\u5f88\u5c0f\uff081<=k<=5\uff09\u5c31\u60f3\u5230\u4e86~~\u7206\u641c~~\u72b6\u538b\n\n\u6211\u4eec\u80af\u5b9a\u8981\u77e5\u9053k\u4e2a\u57ce\u9547\u4e0e\u6bcf\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u6700\u77ed\u8def\u5c31\u8dd1k\u904d\uff1b\n\n\u679a\u4e3e\u9009\u7684\u519c\u573a\uff0c\u5f00\u59cb\u72b6\u538b\uff1b\n\n\u81f3\u4e8e\u72b6\u538b\uff1a\n\n    \tf [\u5f53\u524d\u72b6\u6001\u4e3ai (\u4e8c\u8fdb\u5236\u4e2d\uff0c1\u8868\u793a\u8d70\u8fc7)]  [\u5f53\u524d\u6240\u5728\u7684\u57ce\u9547\u4e3aj]\n        \n        = f[i^(1<<(j-1))][p] + dis[p][j] (p\u4e3a\u4e4b\u524d\u6240\u5728\u7684\u57ce\u9547)\n        \n        \n        \u521d\u59cb\u65f6\uff1af[1<<(k-1)][k] = dis[k][s](s\u4e3a\u9009\u7684\u519c\u573a\uff0ck\u4e3a\u7b2c\u4e00\u4e2a\u7ecf\u8fc7\u7684\u57ce\u9547)\n        \n        \n        \u6700\u540e\u679a\u4e3e\u6700\u540e\u6240\u5728\u7684\u57ce\u9547\uff0c\u52a0\u4e0a\u4ed6\u5230\u9009\u7684\u519c\u573a\u7684\u8ddd\u79bb\uff0c\u53d6\u6700\u5c0f\u503c\uff1b\n        \n\n\u5177\u4f53\u89c1\u4ee3\u7801\uff0c\u5927\u4f6c\u52ff\u55b7qwq\u3002\u3002\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<bits/stdc++.h>\nusing namespace std;\nlong long n,m,k,wz[6];\nlong long tot,head[10005],nx[100005],to[100005],w[100005];\nlong long dis[6][10005],vis[10005],f[2005][6];\nvoid jia(long long aa,long long bb,long long cc)\n{\n\ttot++;\n\tnx[tot]=head[aa];\n\tto[tot]=bb;\n\tw[tot]=cc;\n\thead[aa]=tot;\n\treturn;\n}\nstruct node\n{\n\tlong long id,val;\n};\nbool operator <(node aa,node bb)\n{\n\treturn aa.val>bb.val;\n}\nnode bh(long long aa,long long bb)\n{\n\tnode tt;\n\ttt.id=aa;\n\ttt.val=bb;\n\treturn tt;\n}\nvoid spfa(long long rt)//\u5176\u5b9e\u662fdijkstra\u3002\u3002\u3002\n{\n\tpriority_queue<node>q;\n\tq.push(bh(wz[rt],0));\n\tmemset(vis,0,sizeof(vis));\n\tdis[rt][wz[rt]]=0;\n\twhile(!q.empty())\n\t{\n\t\tnode kk=q.top();\n\t\tq.pop();\n\t\tif(vis[kk.id]) continue;\n\t\tvis[kk.id]=1;\n\t\tfor(long long i=head[kk.id];i;i=nx[i])\n\t\t{\n\t\t\tlong long yy=to[i];\n\t\t\tif(dis[rt][yy]>dis[rt][kk.id]+w[i])\n\t\t\t{\n\t\t\t\tdis[rt][yy]=dis[rt][kk.id]+w[i];\n\t\t\t\tq.push(bh(yy,dis[rt][yy]));\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tmemset(dis,0x3f3f3f3f,sizeof(dis));\n\tscanf(\"%lld%lld%lld\",&n,&m,&k);\n\tfor(long long i=1;i<=k;++i)\n\t{\n\t\tscanf(\"%lld\",&wz[i]);\n\t}\n\tfor(long long i=1;i<=m;++i)\n\t{\n\t\tlong long x,y,z;\n\t\tscanf(\"%lld%lld%lld\",&x,&y,&z);\n\t\tjia(x,y,z);\n\t\tjia(y,x,z);\n\t}\n\tfor(long long i=1;i<=k;++i)\n\t{\n\t\tspfa(i);//\u9884\u5904\u7406k\u4e2a\u57ce\u9547\u5230\u5404\u70b9\u7684\u8ddd\u79bb\n\t}\n\tlong long ans=0x3f3f3f3f;\n\tfor(long long i=1;i<=n;++i)//\u679a\u4e3e\u9009\u7684\u519c\u573a\n\t{\n\t\tlong long flag=0;\n\t\tfor(long long j=1;j<=k;++j) if(i==wz[j]) {flag=1;break;}\n\t\tif(flag) continue;//\u57ce\u9547\u4e0d\u80fd\u9009\uff0c\u4e0d\u662f\u5417\uff1f\n\t\tmemset(f,0x3f3f3f,sizeof(f));\n\t\tfor(long long j=1;j<=k;++j)\n\t\t{\n\t\t\tf[1<<(j-1)][j]=dis[j][i];//\u89c1\u4e0a\u521d\u59cb\u65f6\n\t\t}\n\t\tfor(long long j=1;j<(1<<k);++j)\n\t\t{\n\t\t\tfor(long long pp=1;pp<=k;++pp)//\u679a\u4e3e\u5f53\u524d\u6240\u5728\u7684\u57ce\u9547\n\t\t\tif(j&(1<<(pp-1)))\n\t\t\t{\n\t\t\t\tfor(long long qq=1;qq<=k;++qq)//\u679a\u4e3e\u4e4b\u524d\u6240\u5728\u7684\u57ce\u9547\n\t\t\t\tif(pp!=qq&&(j&(1<<(qq-1))))\n\t\t\t\t{\n\t\t\t\t\tf[j][pp]=min(f[j][pp],f[j^(1<<(pp-1))][qq]+dis[qq][wz[pp]]);//\u8f6c\u79fb\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(long long j=1;j<=k;++j)//\u679a\u4e3e\u6700\u540e\u6240\u5728\u7684\u57ce\u9547\n\t\t{\n\t\t\tans=min(ans,f[(1<<k)-1][j]+dis[j][i]);//\u53d6\u6700\u5c0f\u503c\n\t\t}\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\u5b8c\u7ed3\u6492\u82b1\u3002\u3002\u3002",
        "postTime": 1530617591,
        "uid": 84156,
        "name": "sxd666888",
        "ccfLevel": 0,
        "title": "[USACO12FEB]\u642c\u8fc1Relocation"
    },
    {
        "content": "# \u5355\u6e90\u6700\u77ed\u8def\u5f84+\u5168\u6392\u5217\u7206\u641c\n\n\n**\u4e0d\u4f1adijkstra\u7684\u540c\u5fd7\u4eec\uff0c\u5148AC\u5355\u6e90\u6700\u77ed\u8def\u5f84\u518d\u6765\u505a\u8fd9\u9053\u9898\uff0c\u8c22\u8c22**\n\n\u8fd9\u9898\u7684\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5148\u4ece\u6bcf\u4e2a\u5e02\u573a\u51fa\u53d1\u6c42\u51fa\u6700\u77ed\u8def\u5f84\uff0c\u518d\u679a\u4e3e\u6240\u6709\u51fa\u53d1\u70b9\uff0c\u4ece\u8fd9\u4e9b\u51fa\u53d1\u70b9\u7206\u641c\u6240\u6709\u8def\u52b2\uff0c\u6c42\u51fa\u6700\u5c0f\u503c\u5373\u53ef\u3002\n    \n\u95ee\u9898\u7684\u5173\u952e\u5c31\u5728\u8fd9\u7206\u641c\u4e0a\uff0c\u697c\u4e0a\u7528\u7684\u72b6\u538b\u672c\u849f\u84bb\u4e0d\u4f1a\uff0c\u4e8e\u662f\u5c31\u60f3\u5230\u4e86\u5168\u6392\u5217\u7ecf\u8fc7\u6240\u6709\u96c6\u5e02\u7684\u987a\u5e8f\uff0c\u4ee3\u7801\u7b80\u5355\u800c\u4e14\u6548\u7387\u7ef0\u7ef0\u6709\u4f59\n    \n    AC\u4ee3\u7801\u5982\u4e0b\u4f9b\u53c2\u8003\uff1a\n```c\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int MAXK=8,MAXN=1024*10,INF=1024*1024*1024;\nstruct edge{\n\tint index,len;\n\tedge(int x,int y){\n\t\tindex=x;\n\t\tlen=y;\n\t}\n\tfriend bool operator<(edge x,edge y){\n\t\treturn x.len>y.len;\n\t}\n};\nint N,M,K,market[MAXK],dis[MAXK][MAXN],b[MAXN],ans=INF,order[MAXK];\nvector<edge> a[MAXN];\npriority_queue<edge> que;\ninline void dijkstra(int x){\n\tmemset(b,0,sizeof(b));\n\twhile(!que.empty()){\n\t\tque.pop();\n\t}\n\tdis[x][market[x]]=0;\n\tque.push(edge(market[x],0));\n\twhile(!que.empty()){\n\t\tint ii=que.top().index,jj=que.top().len;\n\t\tque.pop();\n\t\tif(b[ii]){\n\t\t\tcontinue;\n\t\t}\n\t\tb[ii]=1;\n\t\tfor(unsigned int i=0;i<a[ii].size();i++){\n\t\t\tif(jj+a[ii][i].len<dis[x][a[ii][i].index]){\n\t\t\t\tdis[x][a[ii][i].index]=jj+a[ii][i].len;\n\t\t\t\tque.push(edge(a[ii][i].index,dis[x][a[ii][i].index]));\n\t\t\t}\n\t\t}\n\t}\n}\ninline int choice(int x){\n\tfor(int i=1;i<=K;i++){\n\t\tif(x==market[i]) return INF;\n\t\torder[i]=i;\n\t}\n\tint minv=INF;\n\tdo{\n\t\tint tot=dis[order[1]][x]+dis[order[K]][x];\n\t\tfor(int i=1;i<=K-1;i++){\n\t\t\ttot+=dis[order[i]][market[order[i+1]]];\n\t\t}\n\t\tminv=min(minv,tot);\n\t}while(next_permutation(order+1,order+K+1));\n\treturn minv;\n}\nint main(){\n\tcin >> N >> M >> K;\n\tfor(int i=1;i<=K;i++){\n\t\tcin >> market[i];\n\t}\n\tfor(int i=0;i<=K;i++){\n\t\tfor(int j=0;j<=N;j++){\n\t\t\tdis[i][j]=INF;\n\t\t}\n\t}\n\tfor(int i=1;i<=M;i++){\n\t\tint ii,jj,kk;\n\t\tcin >> ii >> jj >> kk;\n\t\ta[ii].push_back(edge(jj,kk));\n\t\ta[jj].push_back(edge(ii,kk)); \n\t}\n\tfor(int i=1;i<=K;i++){\n\t\tdijkstra(i);\n\t}\n\tfor(int i=1;i<=N;i++){\n\t\tans=min(ans,choice(i));\n\t}\n\tcout << ans;\n\treturn 0;\n}\n```",
        "postTime": 1532493814,
        "uid": 70252,
        "name": "guoshaoyang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3044 \u3010[USACO12FEB]\u642c\u8fc1Relocation\u3011"
    },
    {
        "content": "\u795e\u5947\u7684\u6700\u77ed\u8def + \u66b4\u529b\u9898\n\n\u9898\u610f\uff1a\u6709\u4e00\u5f20\u56fe\uff0c\u4f60\u9700\u8981\u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u4f7f\u5f97\u4ece\u8be5\u70b9\u51fa\u53d1\uff0c\u6309\u4e00\u5b9a\u987a\u5e8f\u7ecf\u8fc7\u7ed9\u5b9a\u7684 $k$ \u4e2a\u70b9\uff0c\u8def\u5f84\u957f\u5ea6\u6700\u77ed\u3002\n\n\u9996\u5148\u770b\u5230 $k \\le 5$\uff0c\u663e\u7136\u53ef\u4ee5\u66b4\u529b\u3002\u8003\u8651\u679a\u4e3e\u51fa\u53d1\u70b9\uff0c\u5168\u6392\u5217\u679a\u4e3e\u7ecf\u8fc7\u8fd9 $k$ \u4e2a\u70b9\u7684\u987a\u5e8f\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u8def\u5f84\u957f\u5ea6\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u8981\u8003\u8651\u5982\u4f55\u5feb\u901f\u8ba1\u7b97\u8981\u6c42\u7684\u8def\u5f84\u957f\u5ea6\u3002\u5168\u6e90\u6700\u77ed\u8def Floyd \u663e\u7136\u4e0d\u884c\uff0c$n^3$ \u5f53\u573a\u7206\u70b8\u3002\u8003\u8651\u5355\u6e90\u6700\u77ed\u8def\uff0c\u7531\u4e8e\u8def\u5f84\u4e00\u5b9a\u7ecf\u8fc7 $k$ \u4e2a\u5e02\u573a\uff0c\u4e14 $k$ \u6781\u5c0f\uff0c\u53ef\u4ee5\u5bf9\u8fd9 $k$ \u4e2a\u70b9\u8dd1\u5355\u6e90\u6700\u77ed\u8def\uff0c\u5373\u53ef\u8ba1\u7b97\u957f\u5ea6\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(5n\\log n+nk!k)$\uff0c\u53ef\u4ee5\u8f7b\u677e\u8fc7\u3002\n\n\u987a\u4fbf\u626f\u4e00\u4e0b STL \u5168\u6392\u5217 \u2014\u2014 `next_permutation` & `pre_permutation`\u3002\n\n\u5177\u4f53\u7528\u6cd5\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u7ec4 a \uff0c\u8c03\u7528 `next_permutation(a, a+n)` \u53ef\u4ee5\u5f97\u5230\u6570\u7ec4 a \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u8c03\u7528 `pre_permutation(a, a+n)` \u53ef\u4ee5\u5f97\u5230\u4e0a\u4e00\u4e2a\u5168\u6392\u5217\u3002\n\n\u4e00\u65e6\u6392\u5217\u5230\u8fbe\u6700\u5927\u5b57\u5178\u5e8f\uff0c\u6bd4\u5982 $\\{4,3,2,1\\}$ \uff0c\u5c31\u8fd4\u56de False\uff0c\u540c\u65f6\u91cd\u65b0\u8bbe\u7f6e\u8be5\u6392\u5217\u4e3a\u6700\u5c0f\u5b57\u5178\u5e8f\uff0c\u5426\u5219\u8fd4\u56de True\u3002\n\n\u6ce8\u610f\u5230\u6b64\u51fd\u6570\u7684\u53c2\u6570\u4e0e sort \u4e00\u6837\uff0c\u8fd9\u4e5f\u6b63\u662f STL \u7684\u7edf\u4e00\u7684\u7279\u70b9\u7684\u4f53\u73b0\uff08\uff09\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define pii pair<int, int>\nusing namespace std;\nconst int N = 1e5 + 10;\nstruct node {\n\tint v, w;\n\tnode(int v, int w):v(v), w(w) {}\n};\nint n, m, k;\nint mark[10]; bool ism[N];\nvector<node> G[N];\nbool vis[N];\nint d[10][N];\nvoid spdij(int s, int id) {\n\tpriority_queue<pii, vector<pii>, greater<pii> > q;\n\tmemset(vis, 0, sizeof(vis));\n\tmemset(d[id], 0x3f, sizeof(d[id]));\n\tq.push(make_pair(0, s)); vis[s] = 1; d[id][s] = 0;\n\twhile (!q.empty()) {\n\t\tint now = q.top().second; q.pop(); vis[now] = 0;\n\t\tfor (int i = 0; i < G[now].size(); i++) {\n\t\t\tint v = G[now][i].v;\n\t\t\tif (d[id][v] > d[id][now] + G[now][i].w) {\n\t\t\t\td[id][v] = d[id][now] + G[now][i].w;\n\t\t\t\tif (!vis[v]) {\n\t\t\t\t\tq.push(make_pair(d[id][v], v)); vis[v] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint a[N];\nvoid init() {\n\tfor (int i = 1; i <= k; i++) a[i] = i;\n}\nint main() {\n\tfreopen(\"relocate.in\", \"r\", stdin);\n\tfreopen(\"relocate.out\", \"w\", stdout);\n//\tfreopen(\"10.in\", \"r\", stdin);\n//\tfreopen(\"relocate.out\", \"w\", stdout);\n\tn = read(), m = read(), k = read();\n\tfor (int i = 1; i <= k; i++) mark[i] = read(), ism[mark[i]] = 1;\n\tfor (int i = 1; i <= m; i++) {\n\t\tint u = read(), v = read(), w = read();\n\t\tG[u].push_back(node(v, w));\n\t\tG[v].push_back(node(u, w));\n\t}\n\tfor (int i = 1; i <= k; i++) spdij(mark[i], i);\n\tint minn = 0x7fffffff;\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (ism[i]) continue;\n\t\tinit();\n\t\tdo {\n\t\t\tint res = d[a[1]][i];\n\t\t\tfor (int i = 1; i < k; i++) {\n\t\t\t\tres += d[a[i]][mark[a[i + 1]]];\n\t\t\t}\n\t\t\tres += d[a[k]][i];\n\t\t\tminn = min(minn, res);\n\t\t} while (next_permutation(a + 1, a + k + 1));\n\t}\n\tprintf(\"%d\\n\", minn);\n\treturn 0;\n}\n```",
        "postTime": 1633329683,
        "uid": 341650,
        "name": "_504",
        "ccfLevel": 6,
        "title": "P3044 [USACO12FEB]Relocation S \u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u4e00\u6761\u8def\u5f84\u662f\u600e\u6837\u7684\uff1a\n\n- \u5fc5\u5b9a\u662f\u6709\u4e00\u6761\u8fde\u63a5\u6240\u6709\u5e02\u573a\u7684\u8def\u5f84\uff0c\u56e0\u4e3a\u8fde\u63a5\u5197\u4f59\u8282\u70b9\u6ca1\u6709\u610f\u4e49\uff08\u9664\u975e\u8fd9\u6837\u4f7f\u8def\u5f84\u66f4\u77ed\uff09\u3002\n- \u5bf9\u4e8e\u67d0\u4e00\u79cd\u7ecf\u8fc7\u5e02\u573a\u7684\u987a\u5e8f\uff0c\u6211\u4eec\u5fc5\u5b9a\u4ece\u5f00\u5934\u8fdb\u5165\uff0c\u7ed3\u5c3e\u7ed3\u675f\u3002\n\n\u7a81\u7834\u53e3\u5c31\u5728 $k$ \u4e0a\u3002\n\n\u56e0\u4e3a $k$ \u5f88\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u6bcf\u4e2a\u5e02\u573a\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3002\n\n\u6bcf\u5c40\u6240\u6709\u5e02\u573a\u7684\u6392\u5217\uff0c\u6bcf\u6b21\u679a\u4e3e\u4f59\u4e0b\u7684\u6240\u6709\u70b9\u4f5c\u4e3a\u519c\u573a\u7684\u957f\u5ea6\u3002\u6c42\u51fa\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#include <cstring>\nusing namespace std;\nconst int N = 20005, M = 100005;\nint n, m, k;\nint st[N];\nstruct Edge {\n\tint to, nxt;\n\tint weight;\n} e[M];\nint head[N], ecnt;\nvoid addedge(int from, int to, int w) {\n\te[++ecnt] = (Edge) { to, head[from], w };\n\thead[from] = ecnt;\n}\ntypedef pair<int, int> pii;\npriority_queue< pii > q;\n#define mp make_pair\nint dis[10][N];\nbool vis[N];\nvoid dij(int s, int *d) {\n//\tputs(\"TEST\");\n\tmemset(vis, 0, sizeof(vis));\n\tfor (int i=1; i<=n; i++) d[i] = 0x3f3f3f3f;\n\twhile (!q.empty()) q.pop();\n\td[s] = 0;\n\tq.push( mp(0, s) );\n\twhile (!q.empty()) {\n\t\tconst int x = q.top().second;\n\t\tq.pop();\n\t\tif (vis[x]) continue;\n\t\tvis[x] = 1;\n\t\tfor (int i=head[x]; i; i=e[i].nxt) {\n\t\t\tconst int y = e[i].to, z = e[i].weight;\n\t\t\tif (d[y] > d[x] + z) {\n\t\t\t\td[y] = d[x] + z;\n\t\t\t\tq.push( mp(-d[y], y) );\n\t\t\t}\n\t\t}\n\t}\n}\nbool have[N];\nint minlen = 0x3f3f3f3f;\nbool v[10];\nint ans[10];\nvoid dfs(int x, int d, int p) {\n\tans[p] = x;\n\tif (p == k) {\n\t\tfor (int i=1; i<=n; i++) {\n\t\t\tif (have[i]) continue;\n\t\t\tint disl = dis[ans[1]][i], disr = dis[ans[k]][i];\n//\t\t\tif (minlen == 0x3f3f3f3f) puts(\"WRONG\");\n\t\t\tminlen = min(minlen, d+disl+disr);\n\t\t}\n\t\treturn ;\n\t}\n\tfor (int i=1; i<=k; i++) {\n\t\tif (v[i]) continue;\n\t\tv[i] = 1;\n\t\tdfs(i, d + dis[x][st[i]], p + 1);\n\t\tv[i] = 0;\n\t}\n}\nint main(void) {\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tfor (int i=1; i<=k; i++) scanf(\"%d\", st + i), have[st[i]] = 1;\n\tfor (int i=1, u, v, w; i<=m; i++) {\n\t\tscanf(\"%d%d%d\", &u, &v, &w);\n\t\taddedge(u, v, w), addedge(v, u, w);\n//\t\tprintf(\"%d %d %d\\n\", e[ecnt].to, e[ecnt].nxt, e[ecnt].weight);\n\t}\n\tfor (int i=1; i<=k; i++) {\n\t\tdij(st[i], dis[i]);\n//\t\tfor (int j=1; j<=n; j++) printf(\"%d \", dis[i][j]);\n\t}\n\tfor (int i=1; i<=k; i++) {\n\t\tv[i] = 1;\n\t\tdfs(i, 0, 1);\n\t\tv[i] = 0;\n\t}\n//\tfor (int i=1; i<=k; i++) printf(\"%d \", ans[i]);\n\tprintf(\"%d\\n\", minlen);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1620815261,
        "uid": 255095,
        "name": "PragmaGCC",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3044"
    },
    {
        "content": "\u9996\u5148\u679a\u4e3e\u8981\u9009\u7684\u519c\u573a\u662f\u54ea\u4e2a\u3002\n\n\u7136\u540e\u7531\u4e8e\u53bb\u96c6\u5e02\u7684\u987a\u5e8f\u4e0d\u77e5\u9053\uff0c\u6240\u4ee5\u7528 dfs \u641c\u7d22\u6240\u6709\u987a\u5e8f\uff08\u4f7f\u7528 STL \u7684 next_permutation \u4e5f\u53ef\u4ee5\uff09\u3002\n\n\u7531\u4e8e\u8981\u884c\u7a0b\u6700\u5c0f\uff0c\u6240\u4ee5\u8981\u6c42\u4ece\u519c\u573a\u5230\u96c6\u5e02\u6700\u77ed\u8def\u5f84\u3002\n\n\u7531\u4e8e $n$ \u8fc7\u5927\uff0c floyd \u663e\u7136\u4e0d\u884c\u3002\n\n\u90a3\u4e48\u53ef\u4ee5\u5206\u6210\n\n1. \u519c\u573a\u5230\u96c6\u5e02 1 \u7684\u6700\u77ed\u8def\u7ebf\u3002\n\n1. \u96c6\u5e02 1 \u5230\u96c6\u5e02 2 \u7684\u6700\u77ed\u8def\u7ebf\u3002\n\n1. \u96c6\u5e02 2 \u5230\u96c6\u5e02 3 \u7684\u6700\u77ed\u8def\u7ebf\u3002\n\n\u2026\u2026\n\nk + 1. \u96c6\u5e02 $k$ \u5230\u519c\u573a\u7684\u6700\u77ed\u8def\u7ebf\n\n\u89c2\u5bdf\u4ee5\u4e0a\uff0c**\u53ea\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u96c6\u5e02\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5206\u522b\u662f\u591a\u5c11\u5373\u53ef** \uff0c\u800c\u4e14 $k$ \u5f88\u5c0f\u3002\n\n\u4e8e\u662f\u53ea\u8981\u4ee5\u6bcf\u4e2a\u96c6\u5e02\u4e3a\u8d77\u70b9\u8dd1 Dijkstra \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6700\u540e\u7edf\u8ba1\u4e00\u4e0b\u6c42\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u793a\u4f8b\u4ee3\u7801\uff1a\n\n```cpp\n//#pragma GCC optimize(3,\"Ofast\",\"inline\")\n#include <bits/stdc++.h>\nusing namespace std;\nstruct edge\n{\n    int from,to,dist;\n};\nstruct node\n{\n    int d,u;\n    bool operator <(const node &nd) const\n    {\n        return d>nd.d;\n    }\n};\nvector<edge> edges;\nvector<int> G[10005];\nstruct d\n{\n    int n,m;\n    bool vis[10005];\n    int d[8][10005];\t//\u7b2c\u4e00\u7ef4\u8868\u793a\u96c6\u5e02\u7684\u7f16\u53f7\uff0c\u7b2c\u4e8c\u7ef4\u8868\u793a\u5230\u54ea\u4e2a\u70b9\uff0c\u503c\u4e3a\u6700\u77ed\u8def\n    void init(int n)\n    {\n    \tn++;\n        this->n=n;\n        for(int i=0;i<n;i++)\n        {\n            G[i].clear();\n        }\n        edges.clear();\n    }\n    void add(int f,int t,int dist)\n    {\n        edges.push_back(edge{f,t,dist});\n        m=edges.size();\n        G[f].push_back(m-1);\n    }\n    void di(int s,int id)\t//\u8d77\u70b9\uff08\u539f\u9898\u76ee\u4e2d\u7684\u7ed3\u70b9\u53f7\uff09\uff0c\u8fd9\u4e2a\u96c6\u5e02\u7684\u7f16\u53f7\n    {\n        priority_queue<node> q;\n        for(int i=0;i<n;i++)\n        {\n            d[id][i]=1000000000;\n        }\n        d[id][s]=0;\n        memset(vis,0,sizeof(vis));\n        q.push(node{0,s});\n        while(!q.empty())\n        {\n            node f=q.top();\n            q.pop();\n            int u=f.u;\n            if(vis[u])\n            {\n                continue;\n            }\n            vis[u]=true;\n            for(int i=0;i<G[u].size();i++)\n            {\n                edge& e=edges[G[u][i]];\n                if(d[id][e.to]>d[id][u]+e.dist)\n                {\n                    d[id][e.to]=d[id][u]+e.dist;\n                    q.push(node{d[id][e.to],e.to});\n                }\n            }\n        }\n    }\n};\nd ob;\n//\u4ee5\u4e0a\u4e3a Dijkstra \u6a21\u677f\nint market[10005];\t//\u5bf9\u96c6\u5e02\u505a\u4e00\u4e2a\u6620\u5c04\uff0cmarket[i] \u8868\u793a\u96c6\u5e02 i (\u5373\u539f\u9898\u76ee\u4e2d\u7684\u7ed3\u70b9\u53f7)\u7684\u7f16\u53f7\u662f\u591a\u5c11\nint markets[8];\t//markets[i] \u8868\u793a\u7f16\u53f7\u4e3a i \u7684\u96c6\u5e02\u5728\u539f\u9898\u76ee\u4e2d\u7684\u7ed3\u70b9\u53f7\u662f\u4ec0\u4e48\n\n//\u4ee5\u4e0b\u4ee3\u7801\u4e2d\u201c\u96c6\u5e02\u7684\u7f16\u53f7\u201d\u4e3a\u6620\u5c04\u540e\u7684\u7f16\u53f7\uff0c\u5373 market \u4e2d\u7684\n\n\nvoid read(int &x)\n{\n\tint num=0,f=1;\n\tchar c;\n\tc=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tif(c=='-')\n\t\t{\n\t\t\tf=-1;\n\t\t}\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tnum=(num<<3)+(num<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\tx=f*num;\n}\nvoid print(int x)\n{\n\tif(x<0)\n\t{\n\t\tx=-x;\n\t\tputchar('-');\n\t}\n\tif(x>=10)\n\t{\n\t\tprint(x/10);\n\t}\n\tputchar(x%10+'0');\n}\n//\u4ee5\u4e0a\u4e3a\u5feb\u8bfb\uff0c\u53ef\u4ee5\u4e0d\u52a0\nint n,m,k;\nint ans=2147483647;\nbool vis[8];\nint mar[8];\nvoid count_()\n{\n\tint cur=0;\n\tfor(int i=0;i<k-1;i++)\t//\u6bcf\u4e2a\u96c6\u5e02\u5230\u96c6\u5e02\n\t{\n\t\tcur+=ob.d[mar[i]][markets[mar[i+1]]];\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(market[i]==-1)\t//\u8fd9\u4e0d\u662f\u96c6\u5e02\n\t\t{\n\t\t\tans=min(ans,cur+ob.d[mar[0]][i]+ob.d[mar[k-1]][i]);\t//\u5f00\u5934\u548c\u7ed3\u5c3e\n\t\t}\n\t}\n}\nvoid dfs(int cur)\n{\n\tif(cur==k)\n\t{\n\t\tcount_();\n\t\treturn;\n\t}\n\tfor(int i=0;i<k;i++)\n\t{\n\t\tif(vis[i])\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tmar[cur]=i;\t//\u7b2c cur \u4e2a\u662f\u7f16\u53f7\u4e3a i \u7684\u96c6\u5e02\uff0c\u6ce8\u610f\u662f\u7f16\u53f7\n\t\tvis[i]=true;\n\t\tdfs(cur+1);\n\t\tvis[i]=false;\n\t}\n}\nint main()\n{\n\t//ios::sync_with_stdio(0);\n\tread(n);\n\tread(m);\n\tread(k);\n\tob.init(n);\n//\tcout<<ob.n<<endl;\n\tmemset(market,-1,sizeof(market));\t//\u521d\u59cb\u5316\u4e3a -1 ,\u8bfb\u5165\u5b8c\u6210\u540e\u503c\u4e3a -1 \u5219\u4e3a\u8fd9\u4e0d\u662f\u96c6\u5e02\n\tfor(int i=0;i<k;i++)\n\t{\n\t\tint a;\n\t\tread(a);\n\t\tmarkets[i]=a;\n\t\tmarket[a]=i;\n\t}\n\tfor(int i=0;i<m;i++)\n\t{\n\t\tint a,b,c;\n\t\tread(a);\n\t\tread(b);\n\t\tread(c);\n\t\tob.add(a,b,c);\n\t\tob.add(b,a,c);\n\t}\n\tfor(int i=0;i<k;i++)\n\t{\n\t\tob.di(markets[i],i);\t//\u6c42\u5404\u4e2a\u96c6\u5e02\u5230\u6bcf\u4e2a\u70b9\u6700\u77ed\u8def\u5206\u522b\u662f\u591a\u5c11\n\t}\n\tdfs(0);\t//dfs \u904d\u5386\u987a\u5e8f\n\tprint(ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1599725162,
        "uid": 173918,
        "name": "swl3992",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3044 \u3010[USACO12FEB]Relocation S\u3011"
    },
    {
        "content": "\u770b\u5230\u8fd9\u9053\u9898\uff0c\u57fa\u672c\u601d\u8def\u5c31\u662f**\u6700\u77ed\u8def**\u3002\u5f53\u6211\u770b\u5230$1\\le k \\le 5$\u65f6\uff0c\u5c31\u77e5\u9053\u5b83\u53ef\u4ee5~~\u4e71\u641e\u4e86~~\u3002\n\n\u9488\u5bf9$k$\u4e2a\u5e02\u573a\uff0c\u6bcf\u4e2a\u5e02\u573a\u8dd1\u4e00\u904ddijkstra\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(k(m+n)logn)$\u3002\n\n\u91cd\u70b9\u5c31\u5728\u4e8e\u6700\u540e\u600e\u6837\u7edf\u8ba1\u7b54\u6848\u3002\u56e0\u4e3a\u8d77\u70b9\u662f\u672a\u77e5\u7684\uff0c\u7ecf\u8fc7$k$\u4e2a\u5e02\u573a\u7684\u987a\u5e8f\u4e5f\u662f\u672a\u77e5\u7684\uff0c\u800c$k$\u5f88\u5c0f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u66b4\u529b\u5168\u6392\u5217\u679a\u4e3e\u7ecf\u8fc7$k$\u4e2a\u5e02\u573a\u7684\u987a\u5e8f\u8ba1\u7b97\u4e4b\u95f4\u7684\u957f\u5ea6\uff0c\u5e76\u679a\u4e3e\u6240\u6709\u4e0d\u662f\u5e02\u573a\u7684\u70b9\uff0c\u8ba1\u7b97\u8be5\u70b9\u5230\u5168\u6392\u5217\u540e\u7684\u7b2c\u4e00\u4e2a\u5e02\u573a\u7684\u957f\u5ea6\u52a0\u8be5\u70b9\u5230\u5168\u6392\u5217\u540e\u7684\u6700\u540e\u4e00\u4e2a\u5e02\u573a\u7684\u957f\u5ea6\uff0c\u6bcf\u6b21\u4e0e\u7b54\u6848\u6bd4\u8f83\u7b54\u6848\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(nk!)$\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002\n\n\u4e00\u4e9b\u7ec6\u8282\u5728\u4ee3\u7801\u4e2d\u6709\u6ce8\u91ca\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,k,x,y,z,market[6],head[10001],to[100001],nxt[100001],w[100001],tot,dis[6][10001],r[10001],ans=0x7fffffff;\npriority_queue<pair<int,int> >q;\nbool visit[10001];\ninline int read()\n{\n\tint res=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')\n\t\tch=getchar();\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tres=res*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn res;\n}\ninline void add(int x,int y,int z)\n{\n\tto[++tot]=y;\n\tw[tot]=z;\n\tnxt[tot]=head[x];\n\thead[x]=tot;\n}\nint main()\n{\n\tn=read();\n\tm=read();\n\tk=read();\n\tfor(register int i=1;i<=k;++i)\n\t   market[i]=read(),r[market[i]]=i;//r\u662f\u4e00\u4e2a\u6620\u5c04\uff0c\u65e2\u53ef\u4ee5\u7528\u4e8e\u770b\u4e00\u4e2a\u70b9\u662f\u4e0d\u662f\u5e02\u573a\uff0c\u4e5f\u65b9\u4fbf\u67e5\u627e\u5f53\u524d\u5e02\u573a\u5728\u4e4b\u524d\u6c42\u6700\u77ed\u8def\u65f6\u7684\u4f4d\u7f6e\u3002\u6570\u636e\u4e0d\u5927\uff0c\u7528\u6570\u7ec4\u5b9a\u4e49\u3002\n\twhile(m--)\n\t{\n\t\tx=read();\n\t\ty=read();\n\t\tz=read();\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t}\n\tmemset(dis,127/3,sizeof(dis));//\u8bb0\u5f97\u521d\u59cb\u5316\n\tfor(register int i=1;i<=k;++i)\n\t{\n\t\tmemset(visit,0,sizeof(visit));//\u6bcf\u6b21\u90fd\u8981\u521d\u59cb\u5316\uff0c\u6211\u8c03\u4e86\u5341\u591a\u5206\u949f\u3002\u3002\u3002\n\t\tdis[i][market[i]]=0;\n\t\tq.push(make_pair(0,market[i]));\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint x=q.top().second;\n\t\t\tq.pop();\n\t\t\tif(visit[x])\n\t\t\t    continue;\n\t\t\tvisit[x]=1;\n\t\t\tfor(register int j=head[x];j;j=nxt[j])\n\t\t\t{\n\t\t\t\tint y=to[j],z=w[j];\n\t\t\t\tif(dis[i][y]>dis[i][x]+z)\n\t\t\t\t{\n\t\t\t\t\tdis[i][y]=dis[i][x]+z;\n\t\t\t\t\tq.push(make_pair(-dis[i][y],y));\n\t\t\t\t}\n\t\t\t}\n\t\t}//dijkstra\u5806\u4f18\u5316\u677f\u5b50\n\t}\n\tdo\n\t{\n\t\tint cnt=0,res=0x7fffffff;\n\t\tfor(register int i=1;i<k;++i)\n\t\t    cnt+=dis[r[market[i]]][market[i+1]];\n\t\tfor(register int i=1;i<=n;++i)\n\t\t    if(!r[i])\n\t\t        res=min(res,cnt+dis[r[market[1]]][i]+dis[r[market[k]]][i]);\n\t\tans=min(ans,res);\n\t}while(next_permutation(market+1,market+k+1));\n    //\u66b4\u529b\u5168\u6392\u5217\u66b4\u529b\u679a\u4e3e\u7edf\u8ba1\u7b54\u6848\uff0cnext_permutation\u5373\u53ef\uff0c\u4e0d\u7528\u5199\u4e2adfs\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n~~\u6253\u4e2a\u5feb\u8bfb\uff0c\u5438\u53e3\u6c27\uff0c\u8dd1\u5f97\u8fd8\u633a\u5feb~~",
        "postTime": 1595986200,
        "uid": 68011,
        "name": "\u53e4\u660e\u5730_ypc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3044 \u3010[USACO12FEB]Relocation S\u3011"
    },
    {
        "content": "\u5199\u4e86\u5f88\u4e45\u2026\u2026\n\u611f\u89c9\u8981\u6c42\u591a\u6e90\u6700\u77ed\u8def\u5f84\uff0c\u4f46\u590d\u6742\u5ea6\u4e3a $O(n^3)$ \uff0c\u660e\u663e![](https://cdn.luogu.com.cn/upload/image_hosting/51d80tin.png)\n\n\u7136\u540e\u53d1\u73b0 $k\\leq 5$ \uff0c\u800c\u6c42\u4e24\u4e2a\u975e\u96c6\u5e02\u7684\u70b9\u7684\u6700\u77ed\u8def\u5f84\u6beb\u65e0\u610f\u4e49\uff0c\u6240\u4ee5\u53ea\u7528\u4ee5\u6240\u6709\u96c6\u5e02\u4e3a\u8d77\u70b9\u505a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u3002~~\u8bf4\u767d\u4e86\u5c31\u662f\u4e0dTLE~~\n\n\u590d\u6742\u5ea6\u4e3a $O(k\\times (n+m)log_2 n)$ \u3002\n\n\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u540c\u65f6\u6c42\u51fa\u4e86\u6240\u6709\u70b9\u5230\u96c6\u5e02\u7684\u6700\u77ed\u8def\u3002\n\n\u6700\u540e\u4e00\u70b9\u5904\u7406\uff0c\u53ef\u4ee5\u7528\u72b6\u538bDP\uff0c\u4e5f\u53ef\u4ee5\u7528\u5168\u6392\u5217\uff0c\u8fd9\u91cc\u7528\u7684\u662f\u5168\u6392\u5217~~\u56e0\u4e3a\u597d\u5199~~\n\n\u5728\u5199\u7684\u65f6\u5019\uff0c\u6709\u4ee5\u4e0b\u51e0\u70b9\u8981\u6ce8\u610f\uff1a\n- \u6700\u77ed\u8def\u6a21\u677f\u4e0d\u8981\u5199\u9519\n- \u6700\u540e\u5904\u7406\u65f6\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\n- \u56e0\u4e3a\u662f\u6c42\u6700\u5c0f\u503c\uff0c\u7b54\u6848\u521d\u59cb\u503c\u8981\u8bbe\u7684\u8f83\u5927\u3002\n\n\u559c\u95fb\u4e50\u89c1\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nstruct node{\n\tint to,next,val;\n} edge[100001];//\u5b58\u8fb9\nstruct que{\n\tint to,val;\n\tbool operator<(const que &x)const\n\t{\n\t\treturn x.val<val;\n\t}\n};\nint n,m,k,ans=1e10/*\u8981\u8bbe\u521d\u503c*/,cnt,a[7],head[10001],st[6],vis[10001],dis[10001][6];//a\u4ee3\u8868k\u4e2a\u96c6\u5e02\u7684\u987a\u5e8f\uff0cst\u4ee3\u8868\u96c6\u5e02\u7684\u7f16\u53f7\u5bf9\u5e94\u7684\u5c0f\u9547\uff0cid\u4ee3\u8868\u5c0f\u9547\u5bf9\u5e94\u7684\u96c6\u5e02\u7f16\u53f7\u3002\nint id[10001];\nvoid add(int x,int y,int w)\n{\n\tedge[++cnt].to=y;\n\tedge[cnt].val=w;\n\tedge[cnt].next=head[x];\n\thead[x]=cnt;\n}//\u5b58\u8fb9\n/*===============\u6700\u77ed\u8def==============*/\nvoid dij(int x)\n{\n\tpriority_queue<que> q;\n\tfor(int i=1;i<=n;i++)\n\t\tdis[i][x]=1e9;\n\tdis[st[x]][x]=0;\n\tq.push((que){st[x],0});\n\twhile(!q.empty())\n\t{\n\t\tque t=q.top();\n\t\tq.pop();\n\t\tif(t.val!=dis[t.to][x])\n\t\t\tcontinue;\n\t\tfor(int i=head[t.to];i;i=edge[i].next)\n\t\t{\n\t\t\tint to=edge[i].to;\n\t\t\tif(dis[to][x]>dis[t.to][x]+edge[i].val)\n\t\t\t{\n\t\t\t\tdis[to][x]=dis[t.to][x]+edge[i].val;\n\t\t\t\tq.push((que){to,dis[to][x]});\n\t\t\t}\n\t\t}\n\t}\n}\nsigned main()\n{\n\tscanf(\"%lld%lld%lld\",&n,&m,&k);\n\tfor(int i=1;i<=k;i++)\n\t\tscanf(\"%lld\",&st[i]);\n\tsort(st+1,st+1+k);\n\tfor(int i=1;i<=k;i++)\n\t\tid[st[i]]=i;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%lld%lld%lld\",&x,&y,&z);\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t}\n\tfor(int i=1;i<=k;i++)\n\t\tdij(i);\n\tfor(int i=1;i<=n;i++)//\u6700\u540e\u7684\u5168\u6392\u5217\n\t{\n\t\tif(id[i])\n\t\t\tcontinue;\n\t\tfor(int l=1;l<=k;l++)\n\t\t\ta[l]=st[l];\n\t\tdo{\n\t\t\tint tot=0;//\u6b64\u5904\u8bb0\u5f97\u6e050\n\t\t\tfor(int l=1;l<k;l++)\n\t\t\t\ttot+=dis[a[l+1]][id[a[l]]];\n\t\t\ttot+=dis[i][id[a[1]]]+dis[i][id[a[k]]];//\u5bb9\u6613\u9519\n\t\t\tans=min(ans,tot);\n\t\t}while(next_permutation(a+1,a+1+k));//\u5168\u6392\u5217\u51fd\u6570\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n\u611f\u89c9\u633a\u957f\u7684\uff0c\u4f46\u81ea\u5df1\u5199\u7684\u65f6\u95f4\u5176\u5b9e\u4e0d\u5bf9\uff0c\u4e3b\u8981\u90fd\u5728\u8c03\u9519\u3002\n~~\u611f\u89c9\u6284\u90fd\u6284\u4e0d\u4e0b\u53bb~~",
        "postTime": 1594542578,
        "uid": 240812,
        "name": "45dino",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3044 \u3010[USACO12FEB]Relocation S\u3011"
    },
    {
        "content": "\u7a81\u7834\u53e3\u5c31\u662f\u8fd9\u4e2a$k<=5$\n\n\u53ef\u4ee5\u4ee5\u6bcf\u4e2a\u5e02\u573a\u4e3a\u6e90\u70b9\uff0c\u8dd1\u6700\u591a5\u6b21$dijkstra$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(knlogn)$\n\n\u7136\u540e\u5bf9$k$\u4e2a\u5e02\u573a\u8fdb\u884c\u5168\u6392\u5217\uff0c\u679a\u4e3e\u519c\u573a\uff0c\u8ba1\u7b97\u4e00\u6b21\u8ddd\u79bb\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(nk!)$\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O(knlogn+nk!)$\n\nCode\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define maxn 100010\nusing namespace std;\nstruct Edge{\n\tint to, next, len;\n}edge[maxn << 1];\nstruct node{\n\tint val, len;\n\tbool operator < (const node &x) const{ return x.len < len; }\n};\npriority_queue <node> q;\nint num, head[maxn], vis[maxn], mark[maxn], ismark[maxn], dis[6][maxn], n, m, k, ans, a[maxn];\n\ninline int read(){\n\tint s = 0, w = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') w = -1;\n\tfor (; isdigit(c); c = getchar()) s = (s << 1) + (s << 3) + (c ^ 48);\n\treturn s * w;\n}\n\nvoid addedge(int x, int y, int z){ edge[++num] = (Edge){y, head[x], z}, head[x] = num; }\n\nvoid dijkstra(int k){\n\tfor (int i = 1; i <= n; ++i) vis[i] = 0, dis[k][i] = 1e9;\n\tdis[k][mark[k]] = 0;\n\tq.push((node){mark[k], 0});\n\twhile (!q.empty()){\n\t\tnode tmp = q.top(); q.pop();\n\t\tint u = tmp.val, len = tmp.len;\n\t\tif (vis[u]) continue;\n\t\tvis[u] = 1;\n\t\tfor (int i = head[u]; i; i = edge[i].next){\n\t\t\tint v = edge[i].to;\n\t\t\tif (dis[k][v] > len + edge[i].len){\n\t\t\t\tdis[k][v] = len + edge[i].len;\n\t\t\t\tif (!vis[v]) q.push((node){v, dis[k][v]});\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid work(){\n\tint sum = 0;\n\tfor (int i = 1; i < k; ++i) sum += dis[a[i]][mark[a[i + 1]]];\n\tfor (int i = 1; i <= n; ++i)\n\t\tif (!ismark[i]) ans = min(ans, sum + dis[a[1]][i] + dis[a[k]][i]);\n}\n\nvoid dfs(int t){\n\tif (t > k) work(); else\n\tfor (int i = 1; i <= k; ++i)\n\t\tif (!vis[i]){\n\t\t\tvis[i] = 1, a[t] = i;\n\t\t\tdfs(t + 1);\n\t\t\tvis[i] = 0;\n\t\t}\n}\n\nint main(){\n\tn = read(), m = read(), k = read();\n\tfor (int i = 1; i <= k; ++i) mark[i] = read(), ismark[mark[i]] = 1;\n\tfor (int i = 1; i <= m; ++i){\n\t\tint x = read(), y = read(), z = read();\n\t\taddedge(x, y, z), addedge(y, x, z);\n\t}\n\tfor (int i = 1; i <= k; ++i) dijkstra(i);\n\tans = 2e9;\n\tfor (int i = 1; i <= k; ++i) vis[i] = 0;\n\tdfs(1);\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1567943881,
        "uid": 51719,
        "name": "ModestCoder_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3044 \u3010[USACO12FEB]\u642c\u8fc1Relocation\u3011"
    }
]