[
    {
        "content": "### Prelude\n\n\n\u597d\uff0cHAOI2017\u7ec8\u4e8e\u4f1a\u505a\u4e00\u9053\u9898\u4e86\uff01\n\n\u4f20\u9001\u5230\u6d1b\u8c37\uff1a[\u2192\\_\u2192](https://www.luogu.org/problem/show?pid=3731)\n\n\u4f20\u9001\u5230LOJ\uff1a[\u2190\\_\u2190](https://loj.ac/problem/2276)\n\n\u672c\u7bc7\u535a\u5ba2\u94fe\u63a5\uff1a[(\u25cf'\u25e1'\u25cf)](http://www.cnblogs.com/mlystdcall/p/8073198.html)\n\n\n---\n\n### Solution\n\n\n\u9996\u5148\u8981\u8bfb\u61c2\u9898\u3002\n\n\u8003\u573a\u4e0a\u6211\u662f\u8fd9\u6837\u60f3\u7684[QAQ](http://www.cnblogs.com/mlystdcall/p/6759362.html)\u3002\n\n\u6211\u4eec\u628a\u6bcf\u4e2a\u57ce\u5e02\u770b\u4f5c\u4e00\u4e2a\u70b9\uff0c\u5728\u201c\u5f53\u524d\u6ca1\u6709\u8d38\u6613\u5173\u7cfb\u201d\u7684\u57ce\u5e02\u4e4b\u95f4\u8fde\u8fb9\u3002\n\n\u6b64\u65f6\uff0c\u5982\u679c\u4e00\u4e2a\u57ce\u5e02\u96c6\u5408\u662f\u4e00\u4e2a\u57ce\u5e02\u7fa4\uff0c\u90a3\u4e48\u8fd9\u4e2a\u57ce\u5e02\u96c6\u5408\u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u90fd\u6ca1\u6709\u8fb9\u3002\n\n\u56e0\u4e3a\u201c\u53ef\u4ee5\u5212\u5206\u4e3a\u4e24\u4e2a\u57ce\u5e02\u7fa4\u201d\uff0c\u6240\u4ee5\u8fd9\u4e2a\u56fe\u662f\u4e2a\u4e8c\u5206\u56fe\u3002\n\n\u90a3\u4e48\u201c\u6700\u5927\u57ce\u5e02\u7fa4\u201d\u5c31\u662f\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\u201c\u5728\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u5efa\u7acb\u8d38\u6613\u5173\u7cfb\u201d\u5373\u5220\u9664\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fb9\u3002\n\n\u6240\u4ee5\u9898\u76ee\u5b9e\u9645\u4e0a\u662f\uff0c\u7ed9\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u95ee\u5220\u6389\u54ea\u4e9b\u8fb9\u4e4b\u540e\uff0c\u6700\u5927\u72ec\u7acb\u96c6\u7684\u5927\u5c0f\u4f1a\u589e\u52a0\u3002\n\n\u8003\u8651\u5982\u4f55\u6c42\u6700\u5927\u72ec\u7acb\u96c6\u5927\u5c0f\u3002\n\n\u6700\u5927\u72ec\u7acb\u96c6\u5927\u5c0f=\u603b\u70b9\u6570-\u6700\u5c0f\u8986\u76d6\u96c6\u5927\u5c0f=\u6700\u5927\u5339\u914d\u6570\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u9898\u95ee\u7684\u662f\uff0c\u7ed9\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u95ee\u5220\u6389\u54ea\u4e9b\u8fb9\u4e4b\u540e\uff0c\u6700\u5927\u5339\u914d\u7684\u6570\u91cf\u4f1a\u51cf\u5c11\uff0c\u4e5f\u5c31\u662f\u95ee\uff0c\u54ea\u4e9b\u8fb9\u4e00\u5b9a\u5728\u6700\u5927\u5339\u914d\u91cc\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e8650\u5206\u505a\u6cd5\u4e86\u3002\n\n\u5148\u5efa\u51fa\u7f51\u7edc\u6d41\uff0c\u6c42\u51fa\u6700\u5927\u5339\u914d\u6570\u91cf\uff0c\u7136\u540e\u5220\u6389\u4e00\u6761\u8fb9\u91cd\u65b0\u8dd1\u4e00\u6b21\uff0c\u770b\u6700\u5927\u5339\u914d\u662f\u5426\u51cf\u5c11\uff0c\u5c31\u662f\u6211\u8003\u573a\u4e0a\u7684\u505a\u6cd5\u3002\n\n\u7528\u9000\u6d41\u53ef\u4ee5\u505a\u5230\u66f4\u4f18\u8d8a\u7684\u590d\u6742\u5ea6\uff0c\u4f46\u597d\u50cf\u8fc7\u4e0d\u4e86n=500\u7684\u70b9\uff1f\n\n\u63a5\u4e0b\u6765\u8003\u8651\u6ee1\u5206\u505a\u6cd5\u3002\n\n\u8003\u8651\u5982\u4e0b\u5b9a\u7406\uff1a\u82e5\u4e00\u6761\u8fb9\u4e00\u5b9a\u5728\u6700\u5927\u5339\u914d\u4e2d\uff0c\u5219\u5728\u6700\u7ec8\u7684\u6b8b\u91cf\u7f51\u7edc\u4e2d\uff0c\u8fd9\u6761\u8fb9\u4e00\u5b9a\u6ee1\u6d41\uff0c\u4e14\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u4e00\u5b9a\u4e0d\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u3002\n\n\u8bc1\u660e\u4e5f\u5f88\u7b80\u5355\uff1a\u9996\u5148\u6ee1\u6d41\u7684\u8981\u6c42\u662f\u5f88\u663e\u7136\u7684\uff0c\u5176\u6b21\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709\u4e00\u4e2a\u73af\u7ecf\u8fc7\u8fd9\u6761\u8fb9\uff0c\u6cbf\u7740\u73af\u589e\u5e7f\u4e00\u4e0b\uff0c\u7f51\u7edc\u4ecd\u7136\u6ee1\u8db3\u6d41\u91cf\u9650\u5236\uff0c\u4f46\u662f\u8fd9\u6761\u8fb9\u5c31\u4e0d\u6ee1\u6d41\u4e86\uff0c\u4e8e\u662f\u5c31\u5f97\u5230\u4e86\u4e00\u7ec4\u65b0\u7684\u6700\u5927\u5339\u914d\u3002\n\n\u6240\u4ee5\u53ea\u8981\u8dd1\u5b8cDinic\u8dd1Tarjan\u5c31\u597d\u4e86\u3002\n\n\n---\n\n### Code\n\n\n```cpp\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n\nusing namespace std;\ntypedef pair<int,int> pii;\nconst int MAXN = 10010;\nconst int MAXM = 150010;\nconst int MAXV = 100010;\nconst int MAXE = 1000010;\nconst int INF = 0x3f3f3f3f;\nint _w;\n\nint n, m, uu[MAXM], vv[MAXM];\n\nnamespace G {\n    int head[MAXN], nxt[MAXM<<1], to[MAXM<<1], eid;\n    void init() {\n        eid = 0;\n        memset(head, -1, sizeof head);\n    }\n    void adde( int u, int v ) {\n        to[eid] = v, nxt[eid] = head[u], head[u] = eid++;\n        to[eid] = u, nxt[eid] = head[v], head[v] = eid++;\n    }\n}\n\nnamespace Dinic {\n    struct Edge {\n        int u, v, c, f;\n        Edge() {}\n        Edge( int u, int v, int c, int f ):\n            u(u), v(v), c(c), f(f) {}\n    };\n    \n    int n, m, s, t;\n    int head[MAXV], nxt[MAXE<<1];\n    Edge edge[MAXE<<1];\n    int dis[MAXV], cur[MAXV];\n    queue<int> q;\n    \n    void init( int _n ) {\n        n = _n, m = 0;\n        for( int i = 0; i < n; ++i )\n            head[i] = -1;\n    }\n    int adde( int u, int v, int c ) {\n        int eid = m;\n        edge[m] = Edge(u, v, c, 0);\n        nxt[m] = head[u], head[u] = m++;\n        edge[m] = Edge(v, u, 0, 0);\n        nxt[m] = head[v], head[v] = m++;\n        return eid;\n    }\n    bool bfs() {\n        for( int i = 0; i < n; ++i )\n            dis[i] = INF;\n        dis[s] = 0, q.push(s);\n        while( !q.empty() ) {\n            int u = q.front(); q.pop();\n            for( int i = head[u]; ~i; i = nxt[i] ) {\n                Edge &e = edge[i];\n                if( e.c > e.f && dis[e.v] == INF ) {\n                    dis[e.v] = dis[u] + 1;\n                    q.push(e.v);\n                }\n            }\n        }\n        return dis[t] != INF;\n    }\n    int dfs( int u, int res ) {\n        if( u == t || !res ) return res;\n        int flow = 0;\n        for( int &i = cur[u]; ~i; i = nxt[i] ) {\n            Edge &e = edge[i];\n            if( e.c > e.f && dis[e.v] == dis[u] + 1 ) {\n                int f = dfs( e.v, min(res, e.c-e.f) );\n                flow += f, res -= f;\n                e.f += f, edge[i^1].f -= f;\n                if( !res ) break;\n            }\n        }\n        return flow;\n    }\n    int solve( int _s, int _t ) {\n        s = _s, t = _t;\n        int flow = 0;\n        while( bfs() ) {\n            for( int i = 0; i < n; ++i )\n                cur[i] = head[i];\n            flow += dfs(s, INF);\n        }\n        return flow;\n    }\n}\n\nnamespace Bipartite {\n    int color[MAXN], eid[MAXM];\n    queue<int> q;\n    \n    void bfs( int s ) {\n        using namespace G;\n        \n        color[s] = 0, q.push(s);\n        while( !q.empty() ) {\n            int u = q.front(); q.pop();\n            for( int i = head[u]; ~i; i = nxt[i] ) {\n                int v = to[i];\n                if( color[v] == -1 ) {\n                    color[v] = !color[u];\n                    q.push(v);\n                }\n            }\n        }\n    }\n    void bipartite() {\n        for( int i = 1; i <= n; ++i )\n            color[i] = -1;\n        for( int i = 1; i <= n; ++i )\n            if( color[i] == -1 )\n                bfs(i);\n        int s = 0, t = n+1;\n        Dinic::init(t+1);\n        for( int i = 1; i <= n; ++i )\n            if( color[i] ) Dinic::adde(s, i, 1);\n            else Dinic::adde(i, t, 1);\n        for( int i = 0; i < m; ++i )\n            if( color[uu[i]] )\n                eid[i] = Dinic::adde( uu[i], vv[i], 1 );\n            else\n                eid[i] = Dinic::adde( vv[i], uu[i], 1 );\n        Dinic::solve(s, t);\n    }\n}\nusing Bipartite::bipartite;\n\nnamespace Tarjan {\n    using namespace Dinic;\n    \n    int dfn[MAXV], low[MAXV], scc[MAXV], dfnc, sccc;\n    stack<int> stk;\n    \n    void dfs( int u ) {\n        dfn[u] = low[u] = ++dfnc;\n        stk.push(u);\n        for( int i = head[u]; ~i; i = nxt[i] ) {\n            Edge &e = edge[i];\n            if( e.c == e.f ) continue;\n            int v = e.v;\n            if( !dfn[v] ) {\n                dfs(v);\n                low[u] = min( low[u], low[v] );\n            } else if( !scc[v] ) {\n                low[u] = min( low[u], dfn[v] );\n            }\n        }\n        if( low[u] == dfn[u] ) {\n            ++sccc;\n            while(1) {\n                int o = stk.top(); stk.pop();\n                scc[o] = sccc;\n                if( o == u ) break;\n            }\n        }\n    }\n    void tarjan() {\n        dfnc = sccc = 0;\n        for( int i = 0; i < Dinic::n; ++i )\n            if( !dfn[i] ) dfs(i);\n    }\n}\nusing Tarjan::tarjan;\n\nnamespace Solve {\n    vector<pii> ans;\n    void solve() {\n        using Dinic::Edge;\n        using Dinic::edge;\n        using Tarjan::scc;\n        using Bipartite::eid;\n        \n        for( int i = 0; i < m; ++i ) {\n            Edge &e = edge[eid[i]];\n            if( e.c != e.f ) continue;\n            int u = e.u, v = e.v;\n            if( u > v ) swap(u, v);\n            if( scc[u] == scc[v] ) continue;\n            ans.push_back( pii(u, v) );\n        }\n        sort(ans.begin(), ans.end());\n        printf( \"%lu\\n\", ans.size() );\n        for( int i = 0; i < (int)ans.size(); ++i )\n            printf( \"%d %d\\n\", ans[i].first, ans[i].second );\n    }\n}\nusing Solve::solve;\n\nint main() {\n    _w = scanf( \"%d%d\", &n, &m );\n    G::init();\n    for( int i = 0; i < m; ++i ) {\n        _w = scanf( \"%d%d\", uu+i, vv+i );\n        G::adde( uu[i], vv[i] );\n    }\n    bipartite();\n    tarjan();\n    solve();\n    return 0;\n}\n```",
        "postTime": 1513745325,
        "uid": 8212,
        "name": "__stdcall",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3731 \u3010[HAOI2017]\u65b0\u578b\u57ce\u5e02\u5316\u3011"
    },
    {
        "content": "\u611f\u89c9\u81ea\u5df1\u54ea\u65b9\u9762\u90fd\u6709\u4e9b\u5f31\uff0c\u6700\u5927\u56e2\u95ee\u9898\u8003\u4e86\u51e0\u6b21\u90fd\u4e0d\u4f1a\uff0c\u4e8e\u662f\u5c31\u8fc7\u6765\u8865\u4e86\u3002\u4e0d\u8fc7\u5361\u5e38\u3001\u5077\u61d2\u7684\u80fd\u529b\u4f9d\u65e7\u6ca1\u53d8\uff0c\u6beb\u4e0d\u8d39\u529b\u7684\u5f97\u5230\u4e86\u6700\u4f18\u89e3\uff08\u79bb\u6b21\u4f18\u89e3\u53ea\u5dee\u4e00\u70b9\uff09\u3002\n\n\u663e\u7136\uff0c\u57ce\u5e02\u7fa4\u662f\u4e00\u4e2a\u56e2\uff0c\u6700\u5927\u57ce\u5e02\u7fa4\u4e5f\u5c31\u662f\u6700\u5927\u56e2\uff0c\u7b49\u4e8e\u70b9\u6570\u51cf\u53bb\u8865\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\u9898\u76ee\u7ed9\u5b9a\u8865\u56fe\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u800c\u6ca1\u6709\u70b9\u6743\u7684\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6\u5c31\u7b49\u4e8e\u6700\u5927\u5339\u914d\uff0c\u4e8e\u662f\u672c\u9898\u88ab\u795e\u5947\u5730\u6c42\u8865\u56fe\u6700\u5927\u5339\u914d\u5fc5\u7ecf\u8fb9\u3002\n\n\u5efa\u5b8c\u6a21\uff0c\u8dd1\u5b8c\u6d41\uff0c\u8003\u8651\u6bcf\u4e00\u6761\u6ee1\u6d41\u7684\u8fb9\uff0c\u8bbe\u5b83\u4e3a $(x,y)$\uff0c\u5982\u679c\u5220\u53bb\u5b83\uff0c\u5e76\u7ed9 $(s,x)$ \u548c $(y,t)$ \u52a0\u4e0a\u6d41\uff0c\u5982\u679c\u65b0\u7684\u7f51\u7edc\u5e76\u672a\u6ee1\u6d41\uff0c\u90a3\u4e48\u539f\u6b8b\u91cf\u7f51\u7edc\u4e0a $x,y$ \u4e00\u5b9a\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5185\uff0c\u7f29\u70b9\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6c42\u4e8c\u5206\u56fe\u7f51\u7edc\u6d41\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 $ISAP$ \u7b97\u6cd5\uff0c\u8fd9\u6837\u539f\u56fe\u5df2\u7ecf\u5206\u597d\u5c42\u4e86\uff0c\u7701\u53bb\u4e86\u5e7f\u641c\u8fc7\u7a0b\uff0c\u51cf\u5c11\u4e86\u7801\u91cf\u548c\u5e38\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e4+4,M=5e5+5;\nnamespace fast_io{\n    char buf[M+5],*p1,*p2,c;\n    #define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,M,stdin),p1==p2)?EOF:*p1++)\n    inline int read(){\n        int an=0,f=1;while(!isdigit(c=gc))if(c=='-')f=-f;\n        do an=an*10+(48^c);while(isdigit(c=gc));return an*f;\n    }\n    int ot;\n    char ob[M+20],stk[20],t;\n    inline int fls(){\n        fwrite(ob,1,ot,stdout);return ot=0;\n    }\n    inline void write(int x,char bf){\n        if(x<0)ob[ot++]='-',x=-x;\n        while(x>9)stk[++t]=48^(x%10),x/=10;\n        for(ob[ot++]=48^x;t;ob[ot++]=stk[t--]);\n        ob[ot++]=bf;if(ot>M)fls();\n    }\n}\nusing fast_io::read;\nusing fast_io::write;\nint ed[M],w[M],n,m,s,t,d[N],gap[N],now[N];\nstruct Eg{int u,v;}g[M];\nvector<int>lk[N];\nvoid dfs(int x){\n\tfor(int y:lk[x])\n\t\tif(!d[y])d[y]=d[x]^1,dfs(y);\n}\nint Isap(int x=s,int fl=INT_MAX){\n\tif(x==t)return fl;\n\tint i,y,k,rs=fl;\n\tfor(int &g=now[x],sz=lk[x].size();g<sz;++g)\n\t\tif(w[i=lk[x][g]]&&d[y=ed[i]]==d[x]-1)\n\t\t\tif(k=Isap(y,min(w[i],rs))){\n\t\t\t\tw[i]-=k,w[i^1]+=k;\n\t\t\t\tif(!(rs-=k))return fl;\n\t\t\t}\n\t--gap[d[x]]?++gap[++d[x]]:d[s]=t+1;\n\tnow[x]=0;return fl-rs;\n}\nint dfn[N],low[N],dlt,stk[N],tp,inc[N],scc;\nvoid tarjan(int x){\n\tdfn[x]=low[x]=++dlt,stk[++tp]=x;int y;\n\tfor(int i:lk[x])\n\t\tif(w[i])\n\t\t\tif(dfn[y=ed[i]]){\n\t\t\t\tif(!inc[y]&&low[x]>dfn[y])low[x]=dfn[y];\n\t\t\t}else{\n\t\t\t\ttarjan(y);if(low[x]>low[y])low[x]=low[y];\n\t\t\t}\n\tif(dfn[x]==low[x]){\n\t\t++scc;do inc[stk[tp]]=scc;while(stk[tp--]!=x);\n\t}\n}\ntypedef pair<int,int> Tp;\nset<Tp>st;\nint main(){\n\tn=read(),m=read();int i,x,y;\n\tfor(i=1;i<=m;++i){\n\t\tx=read(),y=read();\n\t\tlk[x].push_back(y);\n\t\tlk[y].push_back(x);\n\t}for(x=1;x<=n;++x)\n\t\tif(!d[x])d[x]=2,dfs(x);\n\td[s=n+1]=4,d[t=s+1]=1,m=0;\n\tfor(x=1;x<=n;++x){\n\t\tif(d[x]==3){\n\t\t\tg[++m]={s,x};\n\t\t\tfor(int y:lk[x])\n\t\t\t\tg[++m]={x,y};\n\t\t}else g[++m]={x,t};\n\t\tlk[x].clear();\n\t}\n\tfor(x=1;x<=t;++x)++gap[d[x]];\n\tfor(i=1;i<=m;++i){\n\t\tw[i+i+1]=1;\n\t\tlk[ed[i+i]=g[i].u].push_back(i+i+1);\n\t\tlk[ed[i+i+1]=g[i].v].push_back(i+i);\n\t}while(d[s]<=t)Isap();\n\tfor(x=1;x<=t;++x)if(!dfn[x])tarjan(x);\n\tfor(i=1;i<=m;++i)\n        if(w[i+i]){\n            x=g[i].u,y=g[i].v;\n            if(inc[x]!=inc[y]){\n                if(x>y)x^=y^=x^=y;\n                if(y<=n)st.insert(Tp(x,y));\n            }\n        }\n\twrite(st.size(),'\\n');\n\tfor(Tp at:st){\n        write(at.first,' ');\n        write(at.second,'\\n');\n    }\n\treturn fast_io::fls();\n}\n```",
        "postTime": 1647178134,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "[HAOI2017]\u65b0\u578b\u57ce\u5e02\u5316 \u9898\u89e3"
    },
    {
        "content": "\u5bf9\u4e8e\u5728\u53cd\u56fe\u4e0a\u6ca1\u6709\u8fb9\u7684\u70b9\u4e4b\u95f4\u662f\u5b58\u5728\u4e00\u6761\u8fb9\u7684\uff0c\u800c\u539f\u56fe\u662f\u53cd\u56fe\u7684\u53cd\u56fe\u3002  \n\u90a3\u4e48\u8003\u8651\u539f\u56fe\u7684\u4e00\u4e2a\u56e2\u5bf9\u5e94\u5728\u53cd\u56fe\u4e0a\u662f\u4ec0\u4e48\uff0c\u56e0\u4e3a\u539f\u56fe\u7684\u56e2\u5185\u7684\u70b9\u4e24\u4e24\u4e4b\u95f4\u6709\u8fb9\uff0c\u6240\u4ee5\u5bf9\u5e94\u5728\u53cd\u56fe\u4e0a\u4e24\u4e24\u4e4b\u95f4\u65e0\u8fb9\u3002\u6240\u4ee5\u539f\u56fe\u7684\u4e00\u4e2a\u56e2\u5bf9\u5e94\u7740\u53cd\u56fe\u7684\u4e00\u4e2a\u72ec\u7acb\u96c6\u3002  \n\u56e0\u4e3a\u539f\u56fe\u53ef\u4ee5\u5206\u89e3\u4e3a\u4e0d\u8d85\u8fc7$2$\u4e2a\u56e2\uff0c\u6240\u4ee5\u53cd\u56fe\u53ef\u4ee5\u5206\u89e3\u6210\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002  \n\u4e8e\u662f\u95ee\u9898\u53d8\u6210\u4e86\uff0c\u5220\u53bb\u53cd\u56fe\u4e0a\u7684\u54ea\u6761\u8fb9\uff0c\u53ef\u4ee5\u8ba9\u53cd\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u53d8\u5927\u3002  \n\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6=\u603b\u70b9\u6570-\u6700\u5c0f\u70b9\u8986\u76d6\uff0c\u800c\u6700\u5c0f\u70b9\u8986\u76d6=\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u3002  \n\u4e8e\u662f\u95ee\u9898\u53d8\u6210\u4e86\u54ea\u4e9b\u8fb9\u5fc5\u5b9a\u51fa\u73b0\u5728\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u4e2d\u3002  \n\u90a3\u4e48\u5148\u8dd1$Dinic$\u4e4b\u540e\u7528$Tarjan$\u628a\u6b8b\u4f59\u7f51\u7edc\u7f29\u70b9\uff0c  \n\u5fc5\u5b9a\u5728\u4e8c\u5206\u56fe\u5339\u914d\u4e0a\u7684\u8fb9\u5c31\u662f\u90a3\u4e9b\u6ee1\u6d41\u5e76\u4e14\u8fde\u63a5\u7684\u4e24\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a$scc$\u5185\u7684\u8fb9\u3002  \n\u8bc1\u660e\u5927\u6982\u5c31\u662f\u5982\u679c\u4e24\u8005\u5728\u540c\u4e00\u4e2a$scc$\u5185\uff0c\u90a3\u4e48\u5fc5\u5b9a\u5b58\u5728\u53e6\u5916\u4e00\u6761\u5339\u914d\u8fb9\u53ef\u4ee5\u66ff\u6362\u8fd9\u6761\u8fb9\u3002  \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<vector>\n#include<queue>\nusing namespace std;\n#define MAXN 10100\n#define MAXM 150150\n#define inf 1e9\ninline int read()\n{\n\tint x=0;bool t=false;char ch=getchar();\n\twhile((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n\tif(ch=='-')t=true,ch=getchar();\n\twhile(ch<='9'&&ch>='0')x=x*10+ch-48,ch=getchar();\n\treturn t?-x:x;\n}\nstruct Line{int v,next,w;}e[MAXM<<1];\nint h[MAXN],cnt=2;\ninline void Add(int u,int v,int w)\n{\n\te[cnt]=(Line){v,h[u],w};h[u]=cnt++;\n\te[cnt]=(Line){u,h[v],0};h[v]=cnt++;\n}\nint S,T,level[MAXN];\nbool bfs()\n{\n\tfor(int i=S;i<=T;++i)level[i]=0;\n\tqueue<int> Q;level[S]=1;Q.push(S);\n\twhile(!Q.empty())\n\t{\n\t\tint u=Q.front();Q.pop();\n\t\tfor(int i=h[u];i;i=e[i].next)\n\t\t\tif(e[i].w&&!level[e[i].v])\n\t\t\t\tlevel[e[i].v]=level[u]+1,Q.push(e[i].v);\n\t}\n\treturn level[T];\n}\nint cur[MAXN];\nint dfs(int u,int flow)\n{\n\tif(u==T||!flow)return flow;\n\tint ret=0;\n\tfor(int &i=cur[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].v,d;\n\t\tif(e[i].w&&level[v]==level[u]+1)\n\t\t{\n\t\t\td=dfs(v,min(flow,e[i].w));\n\t\t\tret+=d;flow-=d;\n\t\t\te[i].w-=d;e[i^1].w+=d;\n\t\t\tif(!flow)break;\n\t\t}\n\t}\n\tif(!ret)level[u]=0;\n\treturn ret;\n}\nint Dinic()\n{\n\tint ret=0;\n\twhile(bfs())\n\t{\n\t\tfor(int i=S;i<=T;++i)cur[i]=h[i];\n\t\tret+=dfs(S,inf);\n\t}\n\treturn ret;\n}\nvector<pair<int,int> > Ans;\nvector<int> E[MAXN];\nint n,m,col[MAXN];\nvoid pre(int u,int c){col[u]=c;for(int v:E[u])if(!col[v])pre(v,c^1);}\nint dfn[MAXN],low[MAXN],tim,G[MAXN],gr;\nint St[MAXN],top;bool ins[MAXN];\nvoid Tarjan(int u)\n{\n\tdfn[u]=low[u]=++tim;St[++top]=u;ins[u]=true;\n\tfor(int i=h[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].v;if(!e[i].w)continue;\n\t\tif(!dfn[v])Tarjan(v),low[u]=min(low[u],low[v]);\n\t\telse if(ins[v])low[u]=min(low[u],dfn[v]);\n\t}\n\tif(dfn[u]==low[u])\n\t{\n\t\t++gr;int v;\n\t\tdo{v=St[top--];G[v]=gr;ins[v]=false;}while(u!=v);\n\t}\n}\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint u=read(),v=read();\n\t\tE[u].push_back(v);\n\t\tE[v].push_back(u);\n\t}\n\tfor(int i=1;i<=n;++i)if(!col[i])pre(i,2);\n\tS=0;T=n+1;\n\tfor(int i=1;i<=n;++i)\n\t\tif(col[i]==2)\n\t\t{\n\t\t\tAdd(S,i,1);\n\t\t\tfor(int v:E[i])Add(i,v,1);\n\t\t}\n\t\telse Add(i,T,1);\n\tint ret=Dinic();\n\tfor(int i=S;i<=T;++i)if(!dfn[i])Tarjan(i);\n\tfor(int u=1;u<=n;++u)\n\t\tif(col[u]==2)\n\t\t\tfor(int i=h[u];i;i=e[i].next)\n\t\t\t{\n\t\t\t\tint v=e[i].v;if(e[i].w)continue;\n\t\t\t\tif(v==S||v==T)continue;\n\t\t\t\tif(G[u]!=G[v])Ans.push_back(u<v?make_pair(u,v):make_pair(v,u));\n\t\t\t}\n\tsort(Ans.begin(),Ans.end());\n\tprintf(\"%d\\n\",(int)Ans.size());\n\tfor(auto a:Ans)printf(\"%d %d\\n\",a.first,a.second);\n\treturn 0;\n}\n```\n",
        "postTime": 1553436400,
        "uid": 21283,
        "name": "yybyyb",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3731 \u3010[HAOI2017]\u65b0\u578b\u57ce\u5e02\u5316\u3011"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a[\u4e8c\u5206\u56fe](https://oi-wiki.org/graph/bi-graph/)\u3001[\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d](https://oi-wiki.org/graph/graph-matching/bigraph-match/)\u3001[\u5f3a\u8fde\u901a\u5206\u91cf](https://oi-wiki.org/graph/scc/)\n\n\u65e2\u7136\u9898\u76ee\u53ea\u7ed9\u4e86\u4f60\u8865\u56fe\uff0c\u4e0d\u59a8\u5206\u6790\u8865\u56fe\u7684\u6027\u8d28\u3002\n\n\u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u201c\u57ce\u5e02\u7fa4\u201d\u7684\u5b9a\u4e49\u5373\u4e3a\u4e00\u5f20\u5b8c\u5168\u56fe\uff0c\u800c\u9898\u76ee\u4fdd\u8bc1\u539f\u56fe\u53ef\u4ee5\u6070\u597d\u88ab\u5212\u5206\u4e3a\u4e0d\u8d85\u8fc7\u4e24\u4e2a\u201c\u57ce\u5e02\u7fa4\u201d\uff0c\u800c\u9898\u7ed9\u8865\u56fe\u4e0a\u7684\u8fb9\u5c31\u662f\u8fd9\u4e24\u4e2a\u57ce\u5e02\u7fa4\u7f3a\u5931\u7684\u8fb9\u3002\u56e0\u6b64\u8865\u56fe\u662f\u4e00\u5f20**\u4e8c\u5206\u56fe**\u3002\n\n\u73b0\u5728\u518d\u6765\u5173\u6ce8\u9898\u76ee\u6240\u6c42\uff1a\u6c42\u6240\u6709\u8865\u56fe\u4e0a\u7684\u8fb9\uff0c\u4f7f\u5f97\u5728\u8865\u56fe\u4e0a\u5220\u8fb9\u540e\u6700\u5927\u201c\u57ce\u5e02\u7fa4\u201d\u53d8\u5927\u3002\n\n\u8f6c\u6362\u4e00\u4e0b\uff0c\u6211\u4eec\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u539f\u56fe\u7684\u6700\u5927\u56e2\u53d8\u5927\uff0c\u7531\u539f\u56fe\u6700\u5927\u56e2\u7b49\u4e8e\u8865\u56fe\u6700\u5927\u72ec\u7acb\u96c6\uff0c\u53c8\u7b49\u4e8e\u70b9\u6570\u51cf\u53bb\u6700\u5c0f\u70b9\u8986\u76d6\uff0c\u4ece\u800c\u7b49\u4e8e\u70b9\u6570\u51cf\u53bb\u6700\u5927\u5339\u914d\uff0c\u4e8e\u662f\u6211\u4eec\u5e0c\u671b\u6700\u5927\u5339\u914d\u53d8\u5c0f\u3002\n\n\u76f4\u63a5\u66b4\u529b\u53ef\u4ee5\u8003\u8651\u5148\u6c42\u51fa\u8865\u56fe\u7684\u6700\u5927\u5339\u914d\uff0c\u63a5\u4e0b\u6765\u679a\u4e3e\u5220\u54ea\u6761\u8fb9\uff0c\u518d\u8dd1\u7f51\u7edc\u6d41\u6c42\u51fa\u5220\u5b8c\u540e\u8865\u56fe\u7684\u6700\u5927\u5339\u914d\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(m^2 \\sqrt n)$\uff0c\u4f46\u663e\u7136\u4e0d\u80fd\u63a5\u53d7\u3002\n\n\u56e0\u4e3a wssb\uff0c\u6211\u4e00\u5f00\u59cb\u4ee5\u4e3a\u539f\u56fe\u4e0a\u4efb\u610f\u4e00\u6761\u5339\u914d\u8fb9\u88ab\u5220\u9664\u90fd\u4f1a\u4f7f\u6700\u5927\u5339\u914d\u51cf\u5c0f\uff0c\u4f46\u8fd9\u6837\u5199\u5c31 WA 0 \u4e86 /fn\n\n\u4e00\u65f6\u95f4\u4e0d\u4f1a\u505a\u4e86\uff0c\u4e0d\u59a8\u968f\u4e00\u4e2a $n = 5, m = 10$ \u7684\u56fe\u6765\u770b\u4e00\u770b\u6709\u6ca1\u6709\u4ec0\u4e48\u89c4\u5f8b\u3002\u753b\u51fa\u7f51\u7edc\u6d41\u7684\u6b8b\u91cf\u7f51\u7edc\u5e76\u6807\u8bb0\u6240\u6709\u5728\u6700\u5927\u5339\u914d\u4e2d\u4f46\u5220\u53bb\u4e0d\u5f71\u54cd\u7b54\u6848\u7684\u8fb9 $u \\to v$\uff0c\u53d1\u73b0\u5bf9\u4e8e\u8fd9\u4e9b\u8fb9\uff0c\u5b58\u5728\u4e00\u6761\u4ece $v$ \u5230 $u$ \u7684\u8def\u5f84\uff0c\u53cd\u4e4b\u4e0d\u5b58\u5728\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c**\u5fc5\u987b\u5728\u6700\u5927\u5339\u914d\u4e2d\u7684\u8fb9\u8fd8\u8981\u6ee1\u8db3 $u, v$ \u4e24\u70b9\u4e0d\u5728\u540c\u4e00\u5f3a\u8fde\u901a\u5206\u91cf\u91cc**\u3002\n\n\u4e8e\u662f\u8dd1\u5b8c\u7f51\u7edc\u6d41\u540e\u8dd1 Tarjan \u7f29\u70b9\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n + m \\sqrt n)$\u3002\n\n------------\n\n\u6211\u4eec\u6765\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u4e0a\u6587\u63d0\u5230\u7684\u7ed3\u8bba\u3002\n\n\u8003\u8651\u53cd\u8bc1\uff0c\u5047\u5b9a\u4e00\u6761\u5fc5\u987b\u5728\u6700\u5927\u5339\u914d\u4e2d\u7684\u8fb9 $x \\to y$ \u4e2d\u7684 $x, y$ \u5728\u4e00\u4e2a\u6709\u5411\u73af $x \\to y \\to z \\to \\cdots \\to w \\to x$ \u4e2d\uff0c\u5219\u5f53\u6211\u4eec\u5220\u53bb\u8fd9\u6761\u8fb9\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u4e00\u6761\u65b0\u7684\u589e\u5e7f\u8def $y \\to z \\to \\cdots \\to w \\to x$\uff0c\u4e0e\u8be5\u8fb9\u4e3a\u5fc5\u987b\u5728\u6700\u5927\u5339\u914d\u4e2d\u7684\u8fb9\u77db\u76fe\u3002\n\n------------\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <stack>\n#include <queue>\n\nusing namespace std;\n\ntypedef struct {\n\tint nxt;\n\tint end;\n\tint dis;\n} Edge;\n\nint cnt = 1;\nint head[10007], color[10007], dis[10007], cur_edge[10007], dis_cnt[10007], dfn[10007], low[10007], belong[10007];\nbool vis1[10007], vis2[10007], vis3[10007];\nEdge edge[320007];\nstack<int> s;\nqueue<int> q;\npair<int, int> pr[10007];\n\ninline void init(int n){\n\tfor (register int i = 0; i <= n; i++){\n\t\tdis[i] = 0x7fffffff;\n\t\tcur_edge[i] = head[i];\n\t}\n}\n\ninline void add_edge(int start, int end, int dis){\n\tcnt++;\n\tedge[cnt].nxt = head[start];\n\thead[start] = cnt;\n\tedge[cnt].end = end;\n\tedge[cnt].dis = dis;\n}\n\nvoid dfs(int u, int cur_color){\n\tvis1[u] = true;\n\tcolor[u] = cur_color;\n\tcur_color ^= 1;\n\tfor (register int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tif (!vis1[x]) dfs(x, cur_color);\n\t}\n}\n\ninline void bfs(int start){\n\tdis[start] = 0;\n\tq.push(start);\n\twhile (!q.empty()){\n\t\tint cur = q.front(), next_dis = dis[cur] + 1;\n\t\tq.pop();\n\t\tdis_cnt[dis[cur]]++;\n\t\tfor (register int i = head[cur]; i != 0; i = edge[i].nxt){\n\t\t\tint x = edge[i].end;\n\t\t\tif (dis[x] == 0x7fffffff){\n\t\t\t\tdis[x] = next_dis;\n\t\t\t\tq.push(x);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint dfs(int u, int flow, int start, int end, int n){\n\tif (u == end) return flow;\n\tint ans = 0;\n\tfor (register int i = cur_edge[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tcur_edge[u] = i;\n\t\tif (edge[i].dis != 0 && dis[u] == dis[x] + 1){\n\t\t\tint t = dfs(x, min(flow - ans, edge[i].dis), start, end, n);\n\t\t\tedge[i].dis -= t;\n\t\t\tedge[i ^ 1].dis += t;\n\t\t\tans += t;\n\t\t\tif (ans == flow) return ans;\n\t\t}\n\t}\n\tcur_edge[u] = head[u];\n\tif (--dis_cnt[dis[u]] == 0) dis[start] = n;\n\tdis_cnt[++dis[u]]++;\n\treturn ans;\n}\n\ninline int isap(int start, int end, int n){\n\tint ans = 0;\n\tbfs(end);\n\twhile (dis[start] < n) ans += dfs(start, 0x7fffffff, start, end, n);\n\treturn ans;\n}\n\nvoid tarjan(int u, int &id, int &scc_cnt){\n\tdfn[u] = low[u] = ++id;\n\tvis2[u] = vis3[u] = true;\n\ts.push(u);\n\tfor (register int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tif (edge[i].dis != 0){\n\t\t\tint x = edge[i].end;\n\t\t\tif (!vis2[x]){\n\t\t\t\ttarjan(x, id, scc_cnt);\n\t\t\t\tlow[u] = min(low[u], low[x]);\n\t\t\t} else if (vis3[x]){\n\t\t\t\tlow[u] = min(low[u], dfn[x]);\n\t\t\t}\n\t\t}\n\t}\n\tif (dfn[u] == low[u]){\n\t\tint cur;\n\t\tscc_cnt++;\n\t\tdo {\n\t\t\tcur = s.top();\n\t\t\ts.pop();\n\t\t\tvis3[cur] = false;\n\t\t\tbelong[cur] = scc_cnt;\n\t\t} while (cur != u);\n\t}\n}\n\nint main(){\n\tint n, m, end, id = 0, scc_cnt = 0, ans_cnt = 0;\n\tcin >> n >> m;\n\tend = n + 1;\n\tfor (register int i = 1; i <= m; i++){\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tadd_edge(x, y, -1);\n\t\tadd_edge(y, x, -1);\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tif (!vis1[i]) dfs(i, 0);\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tif (color[i] == 0){\n\t\t\tfor (register int j = head[i]; j != 0; j = edge[j].nxt){\n\t\t\t\tedge[j].dis = 1;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (register int j = head[i]; j != 0; j = edge[j].nxt){\n\t\t\t\tedge[j].dis = 0;\n\t\t\t}\n\t\t}\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tif (color[i] == 0){\n\t\t\tadd_edge(0, i, 1);\n\t\t\tadd_edge(i, 0, 0);\n\t\t} else {\n\t\t\tadd_edge(i, end, 1);\n\t\t\tadd_edge(end, i, 0);\n\t\t}\n\t}\n\tinit(end);\n\tisap(0, end, end + 1);\n\tfor (register int i = 0; i <= end; i++){\n\t\tif (!vis2[i]) tarjan(i, id, scc_cnt);\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tif (color[i] == 0){\n\t\t\tfor (register int j = head[i]; j != 0; j = edge[j].nxt){\n\t\t\t\tif (edge[j].dis == 0 && edge[j].end != 0 && belong[i] != belong[edge[j].end]){\n\t\t\t\t\tif (i < edge[j].end){\n\t\t\t\t\t\tpr[++ans_cnt] = make_pair(i, edge[j].end);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpr[++ans_cnt] = make_pair(edge[j].end, i);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tsort(pr + 1, pr + ans_cnt + 1);\n\tcout << ans_cnt << endl;\n\tfor (register int i = 1; i <= ans_cnt; i++){\n\t\tcout << pr[i].first << \" \" << pr[i].second << endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1661344927,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3731 \u3010[HAOI2017] \u65b0\u578b\u57ce\u5e02\u5316\u3011"
    },
    {
        "content": "### \u4e8c\u5206\u56fe\n\n\u611f\u89c9\u633a\u7efc\u5408\u7684\n\n\u4e00\u53e5\u8bdd\u9898\u610f\uff0c\u4fdd\u8bc1\u539f\u56fe\u8865\u56fe\u662f\u4e2a\u4e8c\u5206\u56fe\uff0c\u5728\u539f\u56fe\u4e2d\u52a0\u5165\u4e00\u6761\u8fb9\u80fd\u4f7f\u539f\u56fe\u6700\u5927\u56e2\u6570\u81f3\u5c11\u52a0\u4e00\u7684\u8fb9\u6709\u54ea\u4e9b\n\n\u6700\u5927\u56e2\u6570\u5373**\u4f7f\u5f97\u9009\u4e2d\u7684\u70b9\u96c6\u4e24\u4e24\u6709\u8fb9\u7684\u6700\u5927\u70b9\u6570**\n\n\u4e0d\u4f1a\u7684\u540c\u5b66\u5efa\u8bae\u5b66\u4e60\u4e00\u4e0b\n\n\u6211\u4eec\u53d1\u73b0\u8865\u56fe\u6027\u8d28\u8f83\u4e3a\u4f18\u79c0\uff0c\u5e76\u4e14\u6700\u5927\u56e2\u6c42\u6cd5\u5c31\u662f\u5728\u8865\u56fe\u4e0a\u5e94\u7528\u7684\uff0c\u628a\u95ee\u9898\u8f6c\u79fb\u5230\u8865\u56fe\u4e0a\u8003\u8651\n\n\u7531\u4e8e\u5f53\u8865\u56fe\u4e3a\u4e8c\u5206\u56fe\u65f6\uff0c\u539f\u56fe\u6700\u5927\u56e2\u6570=\u8865\u56fe\u6700\u5927\u70b9\u72ec\u7acb\u96c6\u6570\n\n\u5373**\u5728\u8865\u56fe\u91cc\u5220\u53bb\u4e00\u6761\u8fb9\u4f7f\u5f97\u8865\u56fe\u7684\u6700\u5927\u70b9\u72ec\u7acb\u96c6\u6570\u81f3\u5c11\u589e\u52a0\u4e00**\n\n\u53c8\u7531\u6700\u5927\u70b9\u72ec\u7acb\u96c6\u6570\u7b49\u4e8e\u603b\u70b9\u6570-\u6700\u5c0f\u70b9\u8986\u76d6\u6570=\u70b9\u603b\u6570-\u6700\u5927\u5339\u914d\u6570\n\n\u95ee\u9898\u8fdb\u4e00\u6b65\u53d8\u6210\u4e86**\u5728\u8865\u56fe\u91cc\u5220\u53bb\u4e00\u6761\u8fb9\u4f7f\u5f97\u8865\u56fe\u7684\u6700\u5927\u5339\u914d\u6570\u81f3\u5c11\u51cf\u5c11\u4e00**\n\n\u6211\u4eec\u60f3\u8ba9\u8865\u56fe\u7684\u6700\u5927\u5339\u914d\u6570\u51cf\u5c111\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u5b9a\u53ea\u80fd\u5220\u53bb\u8865\u56fe\u6700\u5927\u5339\u914d\u7684\u5fc5\u987b\u8fb9\n\n\u56e0\u4e3a\u6211\u4eec\u53ea\u80fd\u5220\u4e00\u6761\u8fb9\uff0c\u5220\u6389\u53ef\u884c\u8fb9\u6216\u4e0d\u53ef\u884c\u8fb9\u6700\u5927\u5339\u914d\u4e0d\u53d8\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u6c42\u51fa\u8865\u56fe\u7684\u6700\u5927\u5339\u914d\u5fc5\u987b\u8fb9\u5373\u53ef\n\n\u8fd9\u5c31\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\u4e86\n\n\u5bf9\u4e8e\u8865\u56fe\u7528\u7f51\u7edc\u6d41\u8dd1\u6700\u5927\u5339\u914d\uff0c\u6b8b\u4f59\u7f51\u7edc\u518d\u8dd1tarjan\uff08\u5373\u6ee1\u6d41\u7684\u8fb9\u4e0d\u80fd\u8d70\uff0ctarjan\u53ef\u8d70\u53cd\u8fb9\uff09\n\n\u5bf9\u4e8e\u8865\u56fe\u7684\u67d0\u6761\u8fb9\uff0c\u5b83\u662f\u5fc5\u987b\u8fb9\u7684\u6761\u4ef6\u662f\u4e24\u4e2a\u7aef\u70b9\u5728\u4e0d\u540c\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u4e14\u7f51\u7edc\u6d41\u7684\u6b8b\u4f59\u7f51\u7edc\u91cc\u6b63\u8fb9\u6d41\u6ee1\n\n\u5373\u6539\u53d8\u5728\u8fd9\u4e2a\u6700\u5927\u5339\u914d\u65b9\u6848\u4e2d\u4e14\u4e0d\u53ef\u66ff\u4ee3\n\n\u7801\u91cf\u8fd8\u6bd4\u8f83\u5927\uff0c\u677f\u5b50\u522b\u6253\u9519\u4e86\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=10005,maxm=150005,inf=0x3f3f3f3f;\nstruct Ans{\n\tint x,y;\n};\nstruct Edge{\n\tint to,nxt;\n}e[2*maxm];\nstruct EDGE{\n\tint to,w,nxt;\n}g[2*maxm+2*maxn];\nint cnt1,cnt2;\nint head[maxn],strt[maxn];\nint c[maxn];\nint s,t;\nint lev[maxn];\nint dfsnum=0,num=0;\nint dfn[maxn],low[maxn];\nint b[maxn];\nbool vis[maxn];\nqueue<int>q;\nstack<int>st;\nvector<int>ans;\nvector<Ans>ANS;\nint read(){\n\tint x=0,y=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n\treturn x*y;\n}\nvoid add(Edge *e,int *head,int &cnt,int u,int v){\n\te[cnt].to=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt++;\n\treturn ;\n}\nvoid add(EDGE *e,int *head,int &cnt,int u,int v,int w){\n\te[cnt].to=v;\n\te[cnt].w=w;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt++;\n\treturn ;\n}\nvoid dfs(int x,int co){\n\tc[x]=co;\n\tfor(int i=head[x];i!=-1;i=e[i].nxt){\n\t\tint tmp=e[i].to;\n\t\tif(c[tmp])continue;\n\t\tdfs(tmp,co^1);\n\t}\n\treturn ;\n}\nbool bfs(){\n\tmemset(lev,0,sizeof(lev));\n\twhile(!q.empty())q.pop();\n\tq.push(s);\n\tlev[s]=1;\n\twhile(!q.empty()){\n\t\tint k=q.front();\n\t\tq.pop();\n\t\tfor(int i=strt[k];i!=-1;i=g[i].nxt){\n\t\t\tint tmp=g[i].to;\n\t\t\tif(g[i].w==0||lev[tmp])continue;\n\t\t\tlev[tmp]=lev[k]+1;\n\t\t\tq.push(tmp);\n\t\t\tif(tmp==t)return 1;\n\t\t}\n\t}\n\treturn 0;\n}\nint dinic(int x,int flow){\n\tif(x==t)return flow;\n\tint rest=flow;\n\tfor(int i=strt[x];i!=-1;i=g[i].nxt){\n\t\tif(!rest)break;\n\t\tint tmp=g[i].to;\n\t\tif(g[i].w==0||lev[tmp]!=lev[x]+1)continue;\n\t\tint inc=dinic(tmp,min(rest,g[i].w));\n\t\tif(!inc)lev[tmp]=0;\n\t\tg[i].w-=inc;\n\t\tg[i^1].w+=inc;\n\t\trest-=inc;\n\t}\n\treturn flow-rest;\n}\nvoid tarjan(int x){\n\tdfn[x]=low[x]=++dfsnum;\n\tvis[x]=1;\n\tst.push(x);\n\tfor(int i=strt[x];i!=-1;i=g[i].nxt){\n\t\tint tmp=g[i].to;\n\t\tif(g[i].w==0)continue;\n\t\tif(!dfn[tmp]){\n\t\t\ttarjan(tmp);\n\t\t\tlow[x]=min(low[x],low[tmp]);\n\t\t}\n\t\telse if(vis[tmp])\n\t\t\tlow[x]=min(low[x],low[tmp]);\n\t}\n\tif(dfn[x]==low[x]){\n\t\tnum++;\n\t\twhile(st.top()!=x){\n\t\t\tint k=st.top();\n\t\t\tst.pop();\n\t\t\tvis[k]=0;\n\t\t\tb[k]=num;\n\t\t}\n\t\tst.pop();\n\t\tvis[x]=0;\n\t\tb[x]=num;\n\t}\n\treturn ;\n}\nint main(){\n\tint n,m;\n\tn=read();m=read();\n\ts=n+1;t=n+2;\n\tmemset(head,-1,sizeof(head));\n\tmemset(strt,-1,sizeof(strt));\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v;\n\t\tu=read();v=read();\n\t\tadd(e,head,cnt1,u,v);\n\t\tadd(e,head,cnt1,v,u);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(c[i])continue;\n\t\tdfs(i,2);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(c[i]==3){\n\t\t\tadd(g,strt,cnt2,i,t,1);\n\t\t\tadd(g,strt,cnt2,t,i,0);\n\t\t\tcontinue;\t\n\t\t}\n\t\tadd(g,strt,cnt2,s,i,1);\n\t\tadd(g,strt,cnt2,i,s,0);\n\t\tfor(int j=head[i];j!=-1;j=e[j].nxt){\n\t\t\tint tmp=e[j].to;\n\t\t\tadd(g,strt,cnt2,i,tmp,1);\n\t\t\tadd(g,strt,cnt2,tmp,i,0);\n\t\t}\n\t}\n\tint maxflow=0;\n\twhile(bfs()){\n\t\tint flow=dinic(s,inf);\n\t\twhile(flow){\n\t\t\tmaxflow+=flow;\n\t\t\tflow=dinic(s,inf);\n\t\t}\n\t}\n\tfor(int i=1;i<=n+2;i++)\n\t\tif(!dfn[i])\n\t\t\ttarjan(i);\n\tfor(int i=1;i<=n;i++){\n\t\tans.clear();\n\t\tfor(int j=strt[i];j!=-1;j=g[j].nxt){\n\t\t\tint tmp=g[j].to;\n\t\t\tif(tmp<i||tmp>n||b[i]==b[tmp])continue;\n\t\t\tif(((j%2==0)&&g[j].w==1)||((j&1)&&g[j^1].w==1))continue;\n\t\t\tans.push_back(tmp);\n\t\t}\n\t\tsort(ans.begin(),ans.end());\n\t\tfor(int j=0;j<ans.size();j++)\n\t\t\tANS.push_back((Ans){i,ans[j]});\n\t}\n\tprintf(\"%d\\n\",ANS.size());\n\tfor(int i=0;i<ANS.size();i++)\n\t\tprintf(\"%d %d\\n\",ANS[i].x,ANS[i].y);\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1586358478,
        "uid": 98527,
        "name": "juju527",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3731 \u3010[HAOI2017]\u65b0\u578b\u57ce\u5e02\u5316\u3011"
    },
    {
        "content": "\u7ed9\u4f60\u4e00\u5f20\u56fe\uff0c\u4fdd\u8bc1\u539f\u56fe\u8865\u56fe\u662f\u4e2a\u4e8c\u5206\u56fe\uff0c\u5728\u539f\u56fe\u4e2d\u52a0\u5165\u4e00\u6761\u8fb9\u80fd\u4f7f\u539f\u56fe\u6700\u5927\u56e2\u6570\u81f3\u5c11\u52a0\u4e00\u7684\u8fb9\u6709\u54ea\u4e9b\uff1f\n\n\u6700\u5927\u56e2\u6570\u6307\u4f7f\u5f97\u9009\u4e2d\u7684\u70b9\u96c6\u4e24\u4e24\u6709\u8fb9\u7684\u6700\u5927\u70b9\u6570\u3002\n\n\u70b9\u6570 $\\leq 10^4$\uff0c$0\\leq$ \u8fb9\u6570 $\\leq \\min(1.5\\times 10^5,\\frac{n(n-1)}{2})$\u3002\n\n\u65e0\u91cd\u8fb9\uff0c\u65e0\u81ea\u73af\u3002\n\n#### sol\n\n\u7531\u4e8e\u8865\u56fe\u7684\u6027\u8d28\u6bd4\u8f83\u4f18\u79c0\uff0c\u8003\u8651\u5904\u7406\u8865\u56fe\u3002\n\n\u663e\u7136\uff0c\u5f53\u8865\u56fe\u4e3a\u4e8c\u5206\u56fe\u65f6\uff0c\u539f\u56fe\u6700\u5927\u56e2\u6570 $=$ \u8865\u56fe\u6700\u5927\u70b9\u72ec\u7acb\u96c6\u6570\u3002\n\n\u4e14\u6700\u5927\u70b9\u72ec\u7acb\u96c6\u6570 $=$ \u603b\u70b9\u6570 $-$ \u6700\u5c0f\u70b9\u8986\u76d6\u6570 $=$ \u603b\u70b9\u6570 $-$ \u6700\u5927\u5339\u914d\u6570\u3002\n\n\u95ee\u9898\u8fdb\u4e00\u6b65\u53d8\u6210\u4e86\u5728\u8865\u56fe\u91cc\u5220\u53bb\u4e00\u6761\u8fb9\u4f7f\u5f97\u8865\u56fe\u7684\u6700\u5927\u5339\u914d\u6570\u81f3\u5c11\u51cf\u5c11\u4e00\u3002\n\n\u663e\u7136\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u6700\u5927\u5339\u914d\u7684\u5fc5\u987b\u8fb9\u3002\n\n\u6839\u636e\u5b9a\u7406\uff0c\u5fc5\u987b\u8fb9\u7684\u5224\u5b9a\u6761\u4ef6\u662f\uff1a$( x , y )$ \u6d41\u91cf\u4e3a $1$\uff0c \u5e76\u4e14 $x , y$ \u4e24\u70b9\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u5c5e\u4e8e\u4e0d\u540c\u7684 $\\operatorname{Scc}$\u3002\n\n\u8bc1\u660e\uff1a\n\n\u82e5 $z$ \u662f\u5f53\u524d\u975e\u5339\u914d\u70b9\uff0c\u5219 $(z,t)$ \u7684\u5269\u4f59\u6d41\u91cf\u5fc5\u5b9a\u4e3a $1$\u3002\n\n\u82e5 $v$ \u662f\u5f53\u524d\u5339\u914d\u70b9\uff0c\u5219 $(v,t)$ \u7684\u5269\u4f59\u6d41\u91cf\u5fc5\u5b9a\u4e3a $0$\uff0c$(t,v)$ \u7684\u5269\u4f59\u6d41\u91cf\u5fc5\u5b9a\u4e3a $1$\u3002\n\n\u82e5 $(u,v)$ \u662f\u5f53\u524d\u5339\u914d\u8fb9\uff0c\u5219 $(v,u)$ \u7684\u5269\u4f59\u6d41\u91cf\u5fc5\u5b9a\u4e3a $0$\uff0c$(u,v)$ \u7684\u5269\u4f59\u6d41\u91cf\u5fc5\u5b9a\u4e3a $1$\u3002\n\n\u6362\u8a00\u4e4b\uff0c\u6b8b\u91cf\u7f51\u7edc\u4e2d\u5b58\u5728\u8def\u5f84 $(\\cdots \\to z \\to t \\to v \\cdots)$\u3002\n\n\u6b64\u65f6\u82e5 $u$ \u5230 $z$ \u6709\u589e\u5e7f\u8def\uff0c\u5219\u6b8b\u91cf\u7f51\u7edc\u4e0a  $u$ \u80fd\u5230\u8fbe $z$\uff0c$z$ \u80fd\u5230\u8fbe $t$\uff0c$t$ \u80fd\u5230\u8fbe $v$\uff0c$v$ \u80fd\u5230\u8fbe $u$\uff0c\u6240\u4ee5\u6b64\u65f6 $u,v$ \u5904\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u7684\u540c\u4e00\u4e2a $\\operatorname{Scc}$ \u5185\u3002\n\n\u6240\u4ee5\uff0c\u5fc5\u987b\u8fb9\u7684\u5224\u5b9a\u6761\u4ef6\u662f\uff1a$( x , y )$ \u6d41\u91cf\u4e3a $1$\uff0c \u5e76\u4e14 $x , y$ \u4e24\u70b9\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u5c5e\u4e8e\u4e0d\u540c\u7684 $\\operatorname{Scc}$\u3002\n\n\u8bc1\u6bd5\u3002\n\n\u6700\u540e\uff0c`dinic` \u5957 `tarjan` \u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ninline int read()\n{\n\tint x = 0, f = 1;\n\tchar c = getchar();\n\twhile(c < '0' || c > '9')\n\t{\n\t\tif(c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile(c >= '0' && c <= '9')\n\t{\n\t\tx = x * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline void write(int x)\n{\n\tif(x < 0)\n\t{\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif(x > 9)\n\t\twrite(x / 10);\n\tputchar(x % 10 + '0');\n}\n\nconst int _ = 1e4 + 10, M = 2e5 + 10;\n\nint n, m, s, t, t1[_], t2[_], lv[_], cur[_];\n\nint tot = 1, head[_], to[M << 1], nxt[M << 1], w[M << 1];\n\nvector<int> D[_];\n\nint dfn[_], low[_], tim, id[_], cnt;\n\nstack<int> st;\n\nint col[_];\n\nvector<pair<int, int>> Ans;\n\ninline void add(int u, int v, int dis)\n{\n\tto[++tot] = v;\n\tnxt[tot] = head[u];\n\tw[tot] = dis;\n\thead[u] = tot;\n}\n\ninline bool bfs()\n{\n    memset(lv, -1, sizeof(lv));\n    lv[s] = 0;\n    memcpy(cur, head, sizeof(head));\n    queue<int> q;\n    q.push(s);\n    while (!q.empty())\n    {\n        int p = q.front();\n        q.pop();\n        for (int eg = head[p]; eg; eg = nxt[eg])\n        {\n            int v = to[eg], vol = w[eg];\n            if (vol > 0 && lv[v] == -1)\n                lv[v] = lv[p] + 1, q.push(v);\n        }\n    }\n    return lv[t] != -1;\n}\n\nint dfs(int p = s, int flow = INT_MAX)\n{\n    if (p == t)\n        return flow;\n    int rmn = flow;\n    for (int eg = cur[p]; eg && rmn; eg = nxt[eg])\n    {\n        cur[p] = eg;\n        int v = to[eg], vol = w[eg];\n        if (vol > 0 && lv[v] == lv[p] + 1)\n        {\n            int c = dfs(v, min(vol, rmn));\n            rmn -= c;\n            w[eg] -= c;\n            w[eg ^ 1] += c;\n        }\n    }\n    return flow - rmn;\n}\n\ninline int dinic()\n{\n    int ans = 0;\n    while (bfs())\n        ans += dfs();\n    return ans;\n}\n\nvoid tarjan(int u)\n{\n\tdfn[u] = low[u] = ++tim;\n\tst.push(u);\n\tfor(int i = head[u]; i; i = nxt[i])\n\t{\n\t\tint v = to[i];\n\t\tif(!w[i]) continue;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u] = min(low[u], low[v]);\n\t\t}\n\t\telse if(!id[v])\n\t\t{\n\t\t\tlow[u] = min(low[u], dfn[v]);\n\t\t}\n\t}\n\tif(dfn[u] == low[u])\n\t{\n\t\t++cnt;\n\t\twhile(1)\n\t\t{\n\t\t\tint now = st.top();\n\t\t\tst.pop();\n\t\t\tid[now] = cnt;\n\t\t\tif(now == u) break;\n\t\t}\n\t}\n}\n\nvoid pre(int u, int c)\n{\n\tcol[u] = c;\n\tfor(int v : D[u])\n\t\tif(!col[v]) pre(v, c ^ 1);\n}\n\nsigned main()\n{\n\tn = read(), m = read();\n\ts = n + 1, t = n + 2;\n\tfor(int i = 1, u, v; i <= m; ++i)\n\t{\n\t\tu = read(), v = read();\n\t\tD[u].push_back(v);\n\t\tD[v].push_back(u);\n\t}\n\tfor(int i = 1; i <= n; ++i)\n\t{\n\t\tif(!col[i]) pre(i, 2);\n\t}\n\ttot = 1;\n\tmemset(head, 0, sizeof head);\n\tfor(int i = 1; i <= n; ++i)\n\t\tif(col[i] == 2)\n\t\t{\n\t\t\tadd(s, i, 1), add(i, s, 0);\n\t\t\tfor(int v : D[i])\n\t\t\t{\n\t\t\t\tadd(i, v, 1);\n\t\t\t\tadd(v, i, 0);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tadd(i, t, 1), add(t, i, 0);\n\tint res = dinic();\n\tfor(int i = 1; i <= t; ++i)\n\t\tif(!dfn[i]) tarjan(i);\n\tfor(int u = 1; u <= n; ++u)\n\t\tif(col[u] == 2)\n\t\t\tfor(int i = head[u]; i; i = nxt[i])\n\t\t\t{\n\t\t\t\tint v = to[i];\n\t\t\t\tif(w[i]) continue;\n\t\t\t\tif(v == s || v == t) continue;\n\t\t\t\tif(id[u] != id[v])\n\t\t\t\t\tAns.push_back(u < v ? make_pair(u, v) : make_pair(v, u));\n\t\t\t}\n\tsort(Ans.begin(), Ans.end());\n\twrite(Ans.size());\n\tputchar('\\n');\n\tfor(auto v : Ans)\n\t\twrite(v.first), putchar(' '), write(v.second), putchar('\\n');\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1644327335,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "P3731 [HAOI2017]\u65b0\u578b\u57ce\u5e02\u5316"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u539f\u56fe\u7684\u8865\u56fe\uff0c\u6c42\u5220\u6389\u54ea\u4e9b\u8fb9\u53ef\u4ee5\u4f7f\u5f97\u539f\u56fe\u6700\u5927\u56e2\u53d8\u5927\u3002\u6309\u5b57\u5178\u5e8f\u8f93\u51fa\u8fb9\u3002\n\n### \u9898\u76ee\u89e3\u6cd5\n\n\u9996\u5148\u53d1\u73b0\uff0c\u6211\u4eec\u6c42\u7684\u662f\u6700\u5927\u56e2\uff0c\u800c\u4e14\u7ed9\u51fa\u7684\u662f\u8865\u56fe\u3002\n\n\u7b2c\u4e00\u6b65\u5148\u628a\u6700\u5927\u56e2\u8f6c\u5316\u4e3a\u8865\u56fe\u7684\u6027\u8d28\u5f04\u6e05\u695a\uff1a\u539f\u56fe\u7684\u6700\u5927\u56e2\u5927\u5c0f $=$ \u8865\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u5927\u5c0f\u3002\n\n\u8bc1\u660e\uff1a\u539f\u56fe\u7684\u6700\u5927\u56e2\u5fc5\u7136\u4e24\u4e24\u6709\u8fb9\uff0c\u5bf9\u5e94\u5230\u8865\u56fe\u4e0a\u9762\u5c31\u662f\u4e24\u4e24\u65e0\u8fb9\uff0c\u4e5f\u5c31\u662f\u72ec\u7acb\u96c6\u3002\u6700\u5927\u56e2\u4e5f\u5c31\u662f\u6700\u5927\u72ec\u7acb\u96c6\u3002\u8bc1\u6bd5\u3002\n\n\u518d\u8bc1\uff1a\u9898\u76ee\u7684\u8865\u56fe\u662f\u4e8c\u5206\u56fe\u3002\n\n\u8bc1\u660e\uff1a\u9898\u76ee\u5df2\u77e5\u539f\u56fe\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e0d\u8d85\u8fc7\u4e24\u4e2a\u56e2\uff0c\u4e5f\u5c31\u662f\u8bf4\u8865\u56fe\u8981\u4e48\u662f\u7a7a\u7684\uff0c\u8981\u4e48\u4e00\u5b9a\u662f\u4e24\u5217\u70b9\uff0c\u4e00\u5217\u5185\u90e8\u6ca1\u6709\u8fb9\u3002\u8fd9\u4e5f\u5c31\u662f\u4e8c\u5206\u56fe\u3002\n\n\u8003\u8651\u5982\u4f55\u6c42\u4e00\u4e2a\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002\u6c42\u8bc1\uff1a\u6700\u5927\u72ec\u7acb\u96c6 $=$ \u70b9\u6570 $-$ \u6700\u5927\u5339\u914d\n\n\u8bc1\u660e\uff1a\u9996\u5148\u8bc1\u660e \u6700\u5927\u72ec\u7acb\u96c6 $=$ \u70b9\u6570 $-$ \u6700\u5c0f\u70b9\u8986\u76d6\u3002\u5bb9\u6613\u5f97\u5230\uff0c\u70b9\u6570 $-$ \u6700\u5c0f\u70b9\u8986\u76d6\u4e5f\u5c31\u662f\u53d6\u4e86\u6700\u5c0f\u70b9\u8986\u76d6\u7684\u8865\u96c6\u3002\u800c\u70b9\u8986\u76d6\u91cc\u9762\u4e0d\u5b58\u5728\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u70b9\u90fd\u6ca1\u6709\u88ab\u8986\u76d6\u5230\uff0c\u4e5f\u5c31\u4fdd\u8bc1\u4e86\u8865\u96c6\u4e00\u5b9a\u662f\u72ec\u7acb\u96c6\u3002\n\n\u800c\u5df2\u77e5 \u6700\u5c0f\u70b9\u8986\u76d6 $=$ \u6700\u5927\u5339\u914d\u3002\u6240\u4ee5\u8bc1\u6bd5\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u539f\u5f0f\u5199\u6210\uff1a\n\n$$\\text{\u6700\u5927\u56e2=\u8865\u56fe\u6700\u5927\u72ec\u7acb\u96c6=\u8865\u56fe\u70b9\u6570-\u6700\u5927\u5339\u914d}$$\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u95ee\u9898\u6254\u5230\u6700\u5927\u5339\u914d\u4e0a\u9762\u4e86\u3002\u8ba9\u6700\u5927\u56e2\u53d8\u5927\u4e5f\u5c31\u662f\u8ba9\u6700\u5927\u5339\u914d\u53d8\u5c0f\u3002\u4ec0\u4e48\u60c5\u51b5\u4e0b\u6700\u5927\u5339\u914d\u4f1a\u53d8\u5c0f\uff1f\u5f53\u6211\u4eec**\u5220\u6389\u6700\u5927\u5339\u914d\u7684\u5fc5\u987b\u8fb9**\u7684\u65f6\u5019\u3002\n\n\u4e0b\u9762\u95ee\u9898\u8f6c\u5316\u4e3a\u5982\u4f55\u6c42\u4e8c\u5206\u56fe\u5339\u914d\u7684\u5fc5\u987b\u8fb9\u3002\u7ecf\u5178\u95ee\u9898\uff1a\n\n\u9996\u5148\u8003\u8651\u6c42\u51fa\u4e8c\u5206\u56fe\u7684\u5de6\u4fa7\u70b9\u548c\u53f3\u4fa7\u70b9\uff0c\u7136\u540e\u6e90\u70b9\u5411\u5de6\u4fa7\u70b9\u8fde\u8fb9\uff0c\u6c47\u70b9\u548c\u53f3\u4fa7\u70b9\u8fde\u8fb9\uff0c\u7136\u540e\u4ece\u5de6\u5230\u53f3\u8fde\u8fb9\uff0c\u8dd1\u4e00\u8fb9\u6700\u5927\u6d41\uff0c\u6c42\u51fa\u6700\u5927\u5339\u914d\u3002\u4e0b\u9762\u8003\u8651\u5fc5\u987b\u8fb9\u7684\u7279\u5f81\uff08\u4e0b\u9762\u8ba4\u4e3a\u5f53\u8fd9\u6761\u8fb9\u5269\u4f59\u6d41\u91cf\u4e3a $0$ \u65f6\u4e0d\u53ef\u901a\u884c\uff09\uff1a\n\n* \u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\uff0c\u6b63\u8fb9\u7684\u6d41\u91cf\u5df2\u7ecf\u8dd1\u6ee1\n\n\u8fd9\u4e00\u6761\u663e\u7136\u3002\n\n* \u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\uff0c\u8fb9\u6240\u8fde\u7684\u4e24\u4e2a\u70b9\u5206\u5c5e\u4e0d\u540c\u7684 SCC \n\n\u8bc1\u660e\uff1a\u8003\u8651\u53f3\u4fa7\u4e24\u70b9 $x,z,$ \u4e14 $(y,x)$ \u662f\u5339\u914d\u8fb9\uff0c \u82e5 $z$ \u672a\u5339\u914d\uff0c\u5219 $z$ \u53ef\u4ee5\u5230\u8fbe $T;$ \u82e5 $x$ \u5339\u914d\uff0c\u5219 $T$ \u53ef\u4ee5\u5230\u8fbe $x.$ \u4e8e\u662f\u5b83\u4eec\u4e4b\u95f4\u8fde\u901a\u4e86\u3002\n\n\u5982\u679c $y$ \u53ef\u4ee5\u5230 $z,$ \u8fdb\u4e00\u6b65\u53ef\u4ee5\u5f97\u5b83\u53ef\u4ee5\u5230\u8fbe $x,$ \u4e5f\u5c31\u662f\u4e00\u6761\u589e\u5e7f\u8def\u3002\u8fd9\u65f6\uff0c$y,x$ \u53c8\u662f\u53ef\u4ee5\u76f8\u4e92\u5230\u8fbe\u7684\uff0c\u4e5f\u5c31\u662f\u5b83\u4eec\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n\u6240\u4ee5\u5fc5\u987b\u8fb9\u7684\u4e24\u4e2a\u70b9\u4e00\u5b9a\u4e0d\u5c5e\u4e8e\u540c\u4e00\u4e2a SCC .\n\n\u4e8e\u662f\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u9762\u8dd1 tarjan \u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef double db;\n//#define int long long\n#define fi first\n#define se second\n#define mk make_pair\n#define pb emplace_back\n#define poly vector<int>\n#define Bt(a) bitset<a>\n#define bc __builtin_popcount\n#define pc putchar\n#define ci const int&\n//#define pii pair\nconst int mod = 1e9 + 7;\nconst db eps = 1e-10;\nconst int inf = (1 << 30);\ninline int Max(ci x, ci y) {return x > y ? x : y;}\ninline int Min(ci x, ci y) {return x < y ? x : y;}\ninline db Max(db x, db y) {return x - y > eps ? x : y;}\ninline db Min(db x, db y) {return x - y < eps ? x : y;}\ninline int Add(ci x, ci y, ci M = mod) {return (x + y) % M;}\ninline int Mul(ci x, ci y, ci M = mod) {return 1ll * x * y % M;}\ninline int Dec(ci x, ci y, ci M = mod) {return (x - y + M) % M;}\ntypedef pair<int, int> pii;\ninline int Abs(int x) {return x < 0 ? -x : x;}\n//char buf[1<<21],*p1=buf,*p2=buf;\n//#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar Obuf[105000],*O=Obuf;//Siz shoule be the size of Out File\nint pst[30],ptop;\ninline void Fprint(){fwrite(Obuf,1,O-Obuf,stdout);}\ninline void Fwrite(int x){\n  if(x==0){*O++='0';return;}\n  if(x<0)*O++='-',x=-x;ptop=0;\n  while(x)pst[++ptop]=x%10,x/=10;\n  while(ptop)*O++=pst[ptop--]+'0';\n  if(O-Obuf>100000)Fprint(),O=Obuf;\n}\ninline int read() {\n    int s = 0, w = 1;\n    char ch = getchar();\n    while (!isdigit(ch)) {if (ch == '-') w = -1;ch = getchar();}\n    while (isdigit(ch)) {s = s * 10 + ch - '0';ch = getchar();}\n    return s * w;\n}\ninline void write(int x) {\n    if (x < 0)putchar('-'), x = -x;\n    if (x > 9)write(x / 10);\n\tpc(x % 10 + '0');\n}\ninline int qpow(int x, int y) {\n    int res = 1;\n    while (y) {if (y & 1)res = Mul(res, x);x = Mul(x, x);y >>= 1;}\n    return res;\n}\ninline void cadd(int &x, int y) {x += y;}\ninline void cmul(int &x, int y) {x *= y;}\ninline void cmax(int &x, int y) {x = Max(x, y);}\ninline void cmin(int &x, int y) {x = Min(x, y);}\nconst int N = 5e5 + 10;\nnamespace Refined_heart{\n\tint cur[N],head[N],tot=1,n,m,s,t,node,dep[N],gap[N],stfg;\n\tstruct E{int nxt,to,flow,pre;}e[N],edge[N];\n\tint H[N],tto,SC[N];\n\tinline void link(int x,int y,int w){\n\t\te[++tot]=(E){head[x],y,w,x};head[x]=tot;\n\t\te[++tot]=(E){head[y],x,0,y};head[y]=tot;\n\t}\n\tinline void link_normal(int x,int y){edge[++tto]=(E){H[x],y,0,x};H[x]=tto;}\n\tqueue<int>q;\n\tint bfs(int s,int t){\n\t\tq.push(t);dep[t]=1;++gap[1];\n\t\twhile(!q.empty()){\n\t\t\tint x=q.front();q.pop();cur[x]=head[x];\n\t\t\tfor(int i=head[x];i;i=e[i].nxt){\n\t\t\t\tint j=e[i].to;\n\t\t\t\tif(dep[j]||!e[i^1].flow)continue;\n\t\t\t\tdep[j]=dep[x]+1;++gap[dep[j]];\n\t\t\t\tq.push(j);\n\t\t\t}\n\t\t}\n\t\treturn dep[s];\n\t}\n\tint ISAP(int u,int t,int flow){\n\t\tif(flow<=0||u==t)return flow;\n\t\tint rest=flow;\n\t\tfor(int &i=cur[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].to;\n\t\t\tif(!e[i].flow||dep[v]!=dep[u]-1)continue;\n\t\t\tint tmp=ISAP(v,t,Min(e[i].flow,rest));\n\t\t\tif(tmp<=0)continue;\n\t\t\te[i].flow-=tmp;e[i^1].flow+=tmp;rest-=tmp;\n\t\t\tif(rest<=0)return flow-rest;\n\t\t}\n\t\tcur[u]=head[u];--gap[dep[u]];\n\t\tif(!gap[dep[u]])stfg=1;\n\t\t++gap[++dep[u]];return flow-rest;\n\t}\n\tint CALC(){\n\t\tint res=0;\n\t\tif(bfs(s,t)){\n\t\t\twhile(!stfg)res+=ISAP(s,t,inf);\n\t\t}\n\t\treturn res;\n\t}\n\tint st[N],top,scc,col[N],low[N],dfn[N],dfstime,inst[N];\n\tvoid tarjan(int x){\n\t\tlow[x]=dfn[x]=++dfstime;\n\t\tinst[x]=1;st[++top]=x;\n\t\tfor(int i=head[x];i;i=e[i].nxt){\n\t\t\tif(!e[i].flow)continue;\n\t\t\tint j=e[i].to;\n\t\t\tif(!dfn[j]){\n\t\t\t\ttarjan(j);\n\t\t\t\tcmin(low[x],low[j]);\n\t\t\t}\n\t\t\telse if(inst[j])cmin(low[x],dfn[j]);\n\t\t}\n\t\tif(low[x]==dfn[x]){\n\t\t\tint y=0;++scc;\n\t\t\twhile(y=st[top--]){\n\t\t\t\tSC[y]=scc;\n\t\t\t\tinst[y]=0;\n\t\t\t\tif(x==y)break;\n\t\t\t}\n\t\t}\n\t}\n\tvoid specfic(int x,int fa,int cl){\n\t\tcol[x]=cl;\n\t\tfor(int i=H[x];i;i=edge[i].nxt){\n\t\t\tint j=edge[i].to;\n\t\t\tif(j==fa)continue;\n\t\t\tif(col[j]!=-1)continue;\n\t\t\tspecfic(j,x,cl^1);\n\t\t}\n\t}\n\tint stp[N],pt[N];\n\tvector<pii>eg,Ans;\n\tbool check(int u,int v){\n\t\tif(col[u])swap(u,v);\n\t\tfor(int i=head[pt[u]];i;i=e[i].nxt){\n\t\t\tint j=e[i].to;\n\t\t\tif(e[i].flow)continue;\n\t\t\tif(j==pt[v])return true;\n\t\t}\n\t\treturn false;\n\t}\n\tvoid solve(){\n\t\tn=read();m=read();\n\t\tfor(int i=1;i<=m;++i){\n\t\t\tint u=read();int v=read();\n\t\t\tlink_normal(u,v);link_normal(v,u);\n\t\t\teg.pb(mk(u,v));\n\t\t}\n\t\tfor(int i=1;i<=n;++i)col[i]=-1;\n\t\tfor(int i=1;i<=n;++i)if(col[i]==-1){specfic(i,0,0);}\n\t\tfor(int i=1;i<=n;++i)if(!col[i])stp[i]=1;\n\t\tfor(int i=1;i<=n;++i)pt[i]=++node;\n\t\ts=++node;t=++node;\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tif(stp[i])link(s,pt[i],1);\n\t\t\telse link(pt[i],t,1);\n\t\t\t\n\t\t}\n\t\tfor(auto vv:eg){\n\t\t\tint u=vv.fi;\n\t\t\tint v=vv.se;\n\t\t\tif(!stp[u])swap(u,v);\n\t\t\tlink(pt[u],pt[v],1);\n\t\t}\n\t\tint deldata=CALC();\n\t\tfor(int i=1;i<=node;++i)if(!dfn[i])tarjan(i);\n\t\tfor(auto vv:eg){\n\t\t\tint u=vv.fi;\n\t\t\tint v=vv.se;\n\t\t\tif(!SC[u]||!SC[v])continue;\n\t\t\tif(SC[u]==SC[v])continue;\n\t\t\tif(u>v)swap(u,v);\n\t\t\tif(check(u,v))Ans.pb(mk(u,v));\n\t\t}\n\t\twrite((int)Ans.size());pc('\\n');\n\t\tsort(Ans.begin(),Ans.end());\n\t\tfor(auto vv:Ans){\n\t\t\tint u=vv.fi;\n\t\t\tint v=vv.se;\n\t\t\twrite(u);pc(' ');write(v);pc('\\n');\n\t\t}\n\t}\n}\nint main(){\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tRefined_heart::solve();\n\treturn 0;\n}\n\n\n\n```\n",
        "postTime": 1640592059,
        "uid": 128591,
        "name": "Refined_heart",
        "ccfLevel": 9,
        "title": "P3731 [HAOI2017]\u65b0\u578b\u57ce\u5e02\u5316"
    },
    {
        "content": "\u89e3\u9898\u601d\u8def\u5176\u5b83\u9898\u89e3\u5df2\u7ecf\u8bb2\u5f97\u975e\u5e38\u6e05\u695a\u4e86\u3002\n\n\u5f15\u7406\uff1a\u4e00\u6761\u8fb9 $(u,v)$ \u5fc5\u5b9a\u5728\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u4e2d\uff0c\u5f53\u4e14\u4ec5\u5f53 $u,v$ \u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u4e0d\u5c5e\u4e8e\u540c\u4e00\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n\u8bc1\u660e\u7565\u3002\n\n\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u8bb2\u4e00\u4e0b\u4e0d\u4f1a\u7f51\u7edc\u6d41\u6216\u8005\u7f51\u7edc\u6d41\u5199\u6302\u4e86\u600e\u4e48\u529e\u3002\n\n\u56e0\u6b64\u8fd9\u91cc\u91c7\u7528\u7684\u505a\u6cd5\u662f\u5308\u7259\u5229\u7b97\u6cd5\u3002\n\n\u9996\u5148\uff0c\u8dd1\u5308\u7259\u5229\u7b97\u6cd5\u83b7\u53d6\u6700\u5927\u5339\u914d\u3002\n\n\u6839\u636e\u5f15\u7406\uff0c\u63a5\u4e0b\u6765\u9700\u8981\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u8dd1 Tarjan\uff0c\u53ef\u662f\u5308\u7259\u5229\u7b97\u6cd5\u4e2d\u6ca1\u6709\u6b8b\u91cf\u7f51\u7edc\u751a\u81f3\u7f51\u7edc\u8fd9\u4e00\u6982\u5ff5\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u6700\u5927\u5339\u914d\u751f\u6210\u6b8b\u91cf\u7f51\u7edc\u3002\n\n\u8003\u8651\u7f51\u7edc\u6d41\u8ba1\u7b97\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u539f\u7406\uff1a\n*\t\u4e00\u4e2a\u5de6\u90e8\u70b9 $u$ \u4e3a\u5339\u914d\u70b9\u8bf4\u660e $(s,u)$ \u6d41\u91cf\u4e3a $1$\uff1b\n*\t\u4e00\u4e2a\u53f3\u90e8\u70b9 $v$ \u4e3a\u5339\u914d\u70b9\u8bf4\u660e $(v,t)$ \u6d41\u91cf\u4e3a $1$\uff1b\n*\t\u4e00\u6761\u8fb9 $(u,v)$ \u4e3a\u5339\u914d\u8fb9\u8bf4\u660e $(u,v)$ \u6d41\u91cf\u4e3a $1$\u3002\n\n\u53ef\u4ee5\u63a8\u51fa\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\uff1a\n*\t$(u,s)$ \u5bb9\u91cf\u4e3a $1$\uff1b\n*\t$(v,u)$ \u5bb9\u91cf\u4e3a $1$\uff1b\n*\t$(t,v)$ \u5bb9\u91cf\u4e3a $1$\u3002\n\n\u6839\u636e\u5308\u7259\u5229\u7b97\u6cd5\u5f97\u51fa\u7684\u5339\u914d\u7ed3\u679c\u6309\u4ee5\u4e0a\u89c4\u5219\u5efa\u7acb\u6b8b\u91cf\u7f51\u7edc\u5373\u53ef\u3002\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\ntypedef std::pair<int, int> pii;\ntypedef std::vector<pii> vpc;\ntypedef std::vector<int> vic;\n\nconst int maxN = 1e4;\nconst int maxM = 1.5e5;\n\nint n, m;\nint x[maxM + 10], y[maxM + 10];\nint l[maxN + 10], r[maxN + 10];\nvpc ans;\n\nnamespace graph {\n    struct Vertex {\n        int vis;\n        int head;\n        int match;\n        int dfn;\n        int low;\n        int ins;\n        int bel;\n    } vertex[maxN + 10];\n\n    struct Edge {\n        int head;\n        int next;\n    } edge[maxM + 10];\n\n    int ecnt;\n\n    void addEdge(int tail, int head) {\n        ecnt++;\n        edge[ecnt].head = head;\n        edge[ecnt].next = vertex[tail].head;\n        vertex[tail].head = ecnt;\n        return;\n    }\n\n    bool DFS(int u, int t) {\n        for (int e = vertex[u].head; e; e = edge[e].next) {\n            int v = edge[e].head;\n            if (vertex[v].vis == t) continue;\n            vertex[v].vis = t;\n            if (vertex[v].match == 0 || DFS(vertex[v].match, t)) {\n                vertex[v].match = u;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    namespace residual {\n        Vertex vertex[maxN + 10];\n        Edge edge[maxM + 10];\n        int ecnt;\n        int scnt;\n        int dfn;\n        vic s;\n\n        void addEdge(int tail, int head) {\n            ecnt++;\n            edge[ecnt].head = head;\n            edge[ecnt].next = vertex[tail].head;\n            vertex[tail].head = ecnt;\n            return;\n        }\n\n        void addSCC(int u) {\n            scnt++;\n            int v;\n            do {\n                v = s.back();\n                s.pop_back();\n                vertex[v].ins = false;\n                vertex[v].bel = scnt;\n            } while (v != u);\n            return;\n        }\n\n        void Tarjan(int u) {\n            dfn++;\n            vertex[u].dfn = dfn;\n            vertex[u].low = dfn;\n            vertex[u].ins = true;\n            s.push_back(u);\n            for (int e = vertex[u].head; e; e = edge[e].next) {\n                int v = edge[e].head;\n                if (!vertex[v].dfn) {\n                    Tarjan(v);\n                    vertex[u].low = std::min(vertex[u].low, vertex[v].low);\n                } else if (vertex[v].ins) {\n                    vertex[u].low = std::min(vertex[u].low, vertex[v].dfn);\n                }\n            }\n            if (vertex[u].low == vertex[u].dfn) addSCC(u);\n            return;\n        }\n    }\n}\n\nvic e[maxN + 10];\nint v[maxN + 10];\nint c[maxN + 10];\n\nvoid color(int u, int col) {\n    if (v[u]) return;\n    v[u] = true;\n    c[u] = col;\n    for (auto w : e[u]) color(w, col ^ 1);\n    return;\n}\n\nint main() {\n    std::cin >> n >> m;\n    for (int i = 1; i <= m; i++) std::cin >> x[i] >> y[i], e[x[i]].push_back(y[i]), e[y[i]].push_back(x[i]);\n    for (int i = 1; i <= n; i++) if (!v[i]) color(i, 1);\n    for (int i = 1; i <= n; i++) if (c[i]) l[i] = true; else r[i] = true;\n    for (int i = 1; i <= m; i++) if (r[x[i]]) std::swap(x[i], y[i]);\n    for (int i = 1; i <= m; i++) graph::addEdge(x[i], y[i]); \n    for (int i = 1; i <= n; i++) if (l[i]) graph::DFS(i, i);\n    for (int i = 1; i <= m; i++) {\n        if (graph::vertex[y[i]].match == x[i]) {\n            graph::vertex[x[i]].match = y[i];\n            graph::residual::addEdge(y[i], x[i]); \n        } else {\n            graph::residual::addEdge(x[i], y[i]);\n        }\n    }\n    for (int i = 1; i <= n; i++) if (graph::vertex[i].match) {\n        if (l[i]) graph::residual::addEdge(i, 0);\n        else graph::residual::addEdge(n + 1, i);\n    } else {\n        if (l[i]) graph::residual::addEdge(0, i);\n        else graph::residual::addEdge(i, n + 1);\n    }\n    for (int i = 0; i <= n + 1; i++) if (graph::residual::vertex[i].dfn == 0) graph::residual::Tarjan(i);\n    for (int i = 1; i <= m; i++) if (graph::vertex[y[i]].match == x[i]) if (graph::residual::vertex[x[i]].bel != graph::residual::vertex[y[i]].bel) ans.push_back(std::make_pair(std::min(x[i], y[i]), std::max(x[i], y[i])));\n    std::sort(ans.begin(), ans.end());\n    std::cout << ans.size() << '\\n';\n    for (auto i : ans) std::cout << i.first << ' ' << i.second << '\\n';\n    return 0;\n}\n```",
        "postTime": 1684411190,
        "uid": 278046,
        "name": "Lyccrius",
        "ccfLevel": 5,
        "title": "P3731"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problemnew/show/P3731)\n\n\u53d1\u73b0\u9898\u76ee\u7ed9\u4e86\u4e00\u5f20\u8865\u56fe\uff0c\u6c42\u7684\u662f\u6700\u5927\u56e2\n\n\u800c\u4e14\u9690\u9690\u7ea6\u7ea6\u544a\u8bc9\u6211\u4eec\u8fd9\u5f20\u8865\u56fe\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\n\n\u4e8e\u662f\u975e\u5e38\u81ea\u7136\u8054\u60f3\u5230**\u6700\u5927\u56e2\u7b49\u4e8e\u8865\u56fe\u6700\u5927\u72ec\u7acb\u96c6**\n\n**\u6700\u5927\u72ec\u7acb\u96c6\u53c8\u7b49\u4e8e\u603b\u70b9\u6570-\u6700\u5c0f\u70b9\u8986\u76d6**\n\n**\u6700\u5c0f\u70b9\u8986\u76d6=\u6700\u5927\u5339\u914d**\n\n\u4f7f\u5f97\u6700\u5927\u56e2\u589e\u52a0\u5c31\u9700\u8981\u4f7f\u5f97\u6700\u5927\u5339\u914d\u51cf\u5c0f\n\n\u4e8e\u662f\u6211\u4eec\u7ec8\u4e8e\u8bfb\u61c2\u9898\u76ee\u4e86\uff0c\u5c31\u662f\u6c42\u4e8c\u5206\u56fe\u5339\u914d\u7684\u5fc5\u987b\u8fb9\n\n\u76f4\u63a5\u5728\u6b8b\u91cf\u7f51\u7edc\u91cc\u8dd1$tarjan$\uff0c\u5c31\u662f\u5982\u679c\u8fd9\u6761\u8fb9\u6ca1\u6709\u6ee1\u6d41\u5c31\u8fde\u4e0a\n\n\u5bf9\u4e8e\u4e00\u6761\u8fb9$(x,y)$\n\n\u5982\u679c$(x,y)$\u662f\u4e00\u6761\u5339\u914d\u8fb9\u6216\u8005$x$\uff0c$y$\u5728\u540c\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u91cc\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u6761\u6700\u5927\u5339\u914d\u7684\u53ef\u884c\u8fb9\n\n\u5982\u679c$(x,y)$\u662f\u4e00\u6761\u5339\u914d\u8fb9\u5e76\u4e14$x$\uff0c$y$\u4e0d\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u6761\u5fc5\u987b\u8fb9\n\n\u4ee3\u7801\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#define re register\n#define mp std::make_pair\n#define LL long long\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\nconst int maxn=12005;\nconst int inf=1e9;\ninline int read() {\n\tchar c=getchar();int x=0;while(c<'0'||c>'9') c=getchar();\n\twhile(c>='0'&&c<='9') x=(x<<3)+(x<<1)+c-48,c=getchar();return x;\n}\nstruct E{int v,nxt,f;}e[500005];\nint n,m,num=1,S,T;\nstd::queue<int> q;\nint head[maxn],d[maxn],cur[maxn],co[maxn];\ninline void C(int x,int y,int f) {\n\te[++num].v=y;e[num].f=f;\n\te[num].nxt=head[x];head[x]=num;\n}\ninline void add(int x,int y,int f) {C(x,y,f);C(y,x,0);}\ninline int BFS() {\n\tfor(re int i=S;i<=T;i++) d[i]=0,cur[i]=head[i];\n\td[S]=1,q.push(S);\n\twhile(!q.empty()) {\n\t\tint k=q.front();q.pop();\n\t\tfor(re int i=head[k];i;i=e[i].nxt)\n\t\tif(!d[e[i].v]&&e[i].f) d[e[i].v]=d[k]+1,q.push(e[i].v);\n\t}\n\treturn d[T];\n}\nint dfs(int x,int now) {\n\tif(x==T||!now) return now;\n\tint flow=0,ff;\n\tfor(re int& i=cur[x];i;i=e[i].nxt)\n\tif(e[i].f&&d[e[i].v]==d[x]+1) {\n\t\tff=dfs(e[i].v,min(e[i].f,now));\n\t\tif(ff<=0) continue;\n\t\tnow-=ff,flow+=ff,e[i].f-=ff,e[i^1].f+=ff;\n\t\tif(!now) break;\n\t}\n\treturn flow;\n}\nstd::vector<int> ee[maxn];\nnamespace Tarjan {\n\tstd::vector<int> v[maxn];\n\tint dfn[maxn],low[maxn],col[maxn],st[maxn],f[maxn];\n\tint top,p,cnt,mid,tot;\n\tstd::pair<int,int> ans[150005];\n\tvoid tarjan(int x) {\n\t\tdfn[x]=low[x]=++cnt;\n\t\tf[x]=1,st[++top]=x;\n\t\tfor(re int i=0;i<v[x].size();++i) {\n\t\t\tint j=v[x][i];\n\t\t\tif(!dfn[j]) tarjan(j),low[x]=min(low[x],low[j]);\n\t\t\telse if(f[j]) low[x]=min(low[x],dfn[j]);\n\t\t}\n\t\tif(dfn[x]==low[x]) {\n\t\t\t++p;\n\t\t\tdo {\n\t\t\t\tmid=st[top--];\n\t\t\t\tf[mid]=0;\n\t\t\t\tcol[mid]=p;\n\t\t\t}while(mid!=x);\n\t\t}\n\t}\n\tvoid solve() {\n\t\tfor(re int i=S;i<=T;i++)\n\t\t\tfor(re int j=head[i];j;j=e[j].nxt)\n\t\t\tif(e[j].f) v[i].push_back(e[j].v);\n\t\tfor(re int i=S;i<=T;i++) if(!dfn[i]) tarjan(i);\n\t\tfor(re int i=1;i<=n;i++) {\n\t\t\tif(co[i]) continue;\n\t\t\tfor(re int j=head[i];j;j=e[j].nxt)\n\t\t\tif(col[i]!=col[e[j].v]&&!e[j].f&&e[j].v!=S) {\n\t\t\t\tint xx=min(i,e[j].v);\n\t\t\t\tint yy=max(i,e[j].v);\n\t\t\t\tans[++tot]=mp(xx,yy);\n\t\t\t}\n\t\t}\n\t\tstd::sort(ans+1,ans+tot+1);\n\t\tprintf(\"%d\\n\",tot);\n\t\tfor(re int i=1;i<=tot;i++) printf(\"%d %d\\n\",ans[i].first,ans[i].second);\n\t}\n}\nvoid paint(int x,int c) {\n\tco[x]=c;\n\tfor(re int i=0;i<ee[x].size();i++) {\n\t\tint j=ee[x][i];\n\t\tif(co[j]!=2) continue;\n\t\tpaint(j,c^1);\n\t}\n}\nint main() {\n\tn=read(),m=read();T=n+1;\n\tfor(re int x,y,i=1;i<=m;i++) \n\t\tx=read(),y=read(),ee[x].push_back(y),ee[y].push_back(x);\n\tfor(re int i=1;i<=n;i++) co[i]=2;\n\tfor(re int i=1;i<=n;i++)\n\tif(co[i]==2) paint(i,0);\n\tfor(re int i=1;i<=n;i++) \n\tif(!co[i]) add(S,i,1);else add(i,T,1);\n\tfor(re int i=1;i<=n;i++) {\n\t\tif(co[i]) continue;\n\t\tfor(re int j=0;j<ee[i].size();j++) \n\t\t\tadd(i,ee[i][j],1);\n\t}\n\twhile(BFS()) dfs(S,inf);\n\tTarjan::solve();\n\treturn 0;\n}\n```\n",
        "postTime": 1553673667,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3731 \u3010[HAOI2017]\u65b0\u578b\u57ce\u5e02\u5316\u3011"
    },
    {
        "content": "\u9996\u5148\u660e\u663e\u60f3\u5230\u7684\u662f\u4e8c\u5206\u56fe\u3002\u76f8\u5f53\u4e8e\u8981\u6c42\u4e8c\u5206\u56fe\u7684\u6700\u5927\u56e2\uff0c\u7136\u540e\u5982\u679c\u6dfb\u52a0\u5165\u67d0\u4e00\u6761\u8fb9\uff0c\u80fd\u4e0d\u80fd\u4f7f\u90a3\u4e2a\u6700\u5927\u56e2\u53d8\u5927\u3002\n\n\u8003\u8651\u4e8c\u5206\u56fe\u6700\u5927\u56e2\u7684\u7ecf\u5178\u8f6c\u5316\uff1a\u5efa\u539f\u56fe\u7684\u8865\u56fe\uff0c\u7136\u540e\u76f8\u5f53\u4e0e\u96c6\u5408\u4e2d\u7684\u70b9\u4e24\u4e24\u4e4b\u95f4\u6ca1\u6709\u8fb9\uff0c\u5c31\u662f\u6700\u5927\u72ec\u7acb\u96c6\u3002\n\n\u4e8c\u5206\u56fe\u6700\u5927\u72ec\u7acb\u96c6 = \u70b9\u6570 - \u4e8c\u5206\u56fe\u6700\u5c0f\u70b9\u8986\u76d6 = \u70b9\u6570 - \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u95ee\u9898\u53d8\u6210\u4e86\uff0c\u5728\u8865\u56fe\u4e2d\u5220\u6389\u4e00\u6761\u8fb9\uff0c\u4f1a\u4e0d\u4f1a\u8ba9\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u53d8\u5c11\u3002\n\n\u4e5f\u5c31\u662f\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u5fc5\u987b\u8fb9\u95ee\u9898\u3002\n\n\u975e\u5b8c\u5907\u5339\u914d\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5efa\u56fe\u8dd1dinic\u540e\uff0c\u518d\u5728\u6b8b\u4f59\u7f51\u7edc\u4e0a\u8dd1\u4e00\u6b21tarjan\uff0c\u5982\u679c\u8fb9\u7684\u6d41\u91cf\u662f $ 1 $\uff0c\u4e14\u4e24\u7aef\u4e0d\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\uff0c\u5219\u4e3a\u5fc5\u987b\u8fb9\u3002\n\n```cpp\n#pragma GCC optimize(2)\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e4+10;\nstruct edge{int to,cap,next;}E[maxn*30];\nint head[maxn],tot=1;\ninline void add(int u,int v,int c)\n{\n    E[++tot]={v,c,head[u]};\n    head[u]=tot;\n    E[++tot]={u,0,head[v]};\n    head[v]=tot;\n}\nvector<int> G[maxn];\nint dep[maxn],cur[maxn];\nint n,m,S,T,rid;\nbool bfs()\n{\n    for(int i=1;i<=rid;i++)dep[i]=-1,cur[i]=head[i];\n    queue<int> q;\n    q.push(S);\n    dep[S]=1;\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for(int i=head[u];i;i=E[i].next)\n        {\n            int v=E[i].to,c=E[i].cap;\n            if(dep[v]==-1&&c)\n            {\n                dep[v]=dep[u]+1;\n                q.push(v);\n            }\n        }\n    }\n    return dep[T]!=-1;\n}\nint dfs(int u,int flow)\n{\n    //printf(\"!%d %d\\n\",u,flow);\n    if(u==T)return flow;\n    int ret=0;\n    for(int i=head[u];i;i=E[i].next)\n    {\n        int v=E[i].to,c=E[i].cap;\n        if(dep[v]==dep[u]+1&&c)\n        {\n            int fl=dfs(v,min(c,flow-ret));\n            if(!fl)continue;\n            E[i^1].cap+=fl;\n            E[i].cap-=fl;\n            ret+=fl;\n            if(ret==flow)break;\n        }\n    }\n    return ret;\n}\nint dinic()\n{\n    int ret=0;\n    while(bfs())ret+=dfs(S,2e9);\n    return ret;\n}\nint col[maxn];\nbool ins[maxn];\nvoid coldfs(int u)\n{\n    for(int v:G[u])\n    {\n        if(col[v]!=-1)continue;\n        col[v]=col[u]^1;\n        coldfs(v);\n    }\n}\nvector< pair<int,int> > ans;\nint dfn[maxn],low[maxn],times,cnt,stk[maxn],top,bel[maxn];\nvoid tarjan(int u,int fa)\n{\n    dfn[u]=low[u]=++times;\n    stk[++top]=u;\n    ins[u]=1;\n    for(int i=head[u];i;i=E[i].next)\n    {\n        int v=E[i].to,c=E[i].cap;\n        if(!c||v==fa)continue;\n        if(!dfn[v])\n        {\n            tarjan(v,u);\n            low[u]=min(low[u],low[v]);\n        }\n        else if(ins[v])low[u]=min(low[u],dfn[v]);\n    }\n    //printf(\"#%d %d %d\\n\",u,dfn[u],low[u]);\n    if(low[u]==dfn[u])\n    {\n        int x=0;\n        ++cnt;\n        //printf(\"!%d\\n\",cnt);\n        while(x!=u)\n        {\n            x=stk[top];\n          //  printf(\"%d\\n\",x);\n            bel[x]=cnt;\n            ins[x]=0;\n            top--;\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    memset(col,-1,sizeof col);\n    for(int i=1;i<=n;i++)\n        if(col[i]==-1)\n        {\n            col[i]=0;\n            coldfs(i);\n        }\n    rid=n;\n    S=++rid,T=++rid;\n    for(int i=1;i<=n;i++)\n        if(col[i]==0)\n        {\n            add(S,i,1);\n            for(int j:G[i])add(i,j,1);\n        }\n        else \n            add(i,T,1);\n   // printf(\"%d %d\\n\",S,T);\n    dinic();\n  //  puts(\"?\");\n    for(int i=1;i<=n;i++)\n        if(!dfn[i])tarjan(i,0);\n    for(int i=1;i<=n;i++)\n        if(col[i]==0)\n            for(int e=head[i],j=E[e].to;e;e=E[e].next,j=E[e].to)\n                if(E[e].cap==0&&i<=n&&j<=n&&bel[i]!=bel[j])\n                    ans.push_back({min(i,j),max(i,j)});\n    sort(ans.begin(),ans.end());\n    printf(\"%d\\n\",ans.size());\n    for(auto &p:ans)\n        printf(\"%d %d\\n\",p.first,p.second);\n    return 0;\n}\n/*\n6 1\n1 5\n6 2\n2 4\n2 5\n6 3\n4 7\n5 7\n*/\n```",
        "postTime": 1669990557,
        "uid": 343060,
        "name": "kkio",
        "ccfLevel": 7,
        "title": "P3731"
    }
]