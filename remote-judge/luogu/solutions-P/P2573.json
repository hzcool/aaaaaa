[
    {
        "content": "/\\*\n\u9898\u76ee\u5927\u610f\u4e3a\uff1a\u5728\u53ea\u80fd\u4ece\u70b9\u6743\u5927\u7684\u70b9\u5230\u70b9\u6743\u5c0f\u7684\u70b9\uff08\u53ef\u4ee5\u76f8\u7b49\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u4ece1\u70b9\u51fa\u53d1\u5efa\u7acb\u4e00\u68f5\u5c3d\u53ef\u80fd\u6709\u66f4\u591a\u70b9\u7684\u6700\u5c0f\u751f\u6210\u6811\n\n\u663e\u7136\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u56e0\u4e3a\u6709\u4e9b\u70b9\u5e94\u4e3a\u9ad8\u5ea6\u539f\u56e0\u65e0\u6cd5\u5230\u8fbe\u3002\n\n\u4e3a\u4fdd\u8bc1\u6211\u4eec\u53ea\u4f1a\u7531\u9ad8\u5230\u4f4e\uff0c\u6211\u4eec\u5c31\u53ea\u5efa\u7acb\u7531\u9ad8\u5411\u4f4e\u7684\u5355\u5411\u8fb9\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u5efa\u7acb\u51fa\u6765\u7684\u56feA\uff0c\u75311\u70b9\u5f00\u59cb\u5bbd\u641c\uff0c\u5c06\u6269\u5c55\u5230\u7684\u70b9\u548c\u8fb9\u52a0\u5165\u4e00\u4e2a\u65b0\u56feB\uff0c\u6240\u6709\u6269\u5c55\u5230\u7684\u70b9\u4fbf\u662f\u80fd\u5230\u8fbe\u7684\u6700\u591a\u70b9\u3002\n\n\u6211\u4eec\u518d\u5728\u8fd9\u4e2a\u65b0\u56fe\u4e0a\u8dd1Kruskal\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6c42\u5f97\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u5bf9\u4e8e\u6392\u5e8f\u90e8\u5206\uff0c\u4e3a\u4fdd\u8bc1\u6709\u5c3d\u53ef\u80fd\u591a\u7684\u70b9\u5728\u6700\u5c0f\u751f\u6210\u6811\u91cc\uff0c\u6211\u4eec\u6309\u7ec8\u70b9\u7684\u9ad8\u5ea6\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u8fb9\u957f\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff1b\n\n\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u62d3\u5c55\u7684\u70b9\u6700\u591a\uff0c\u8fdb\u800c\u518d\u7528\u6700\u5c0f\u751f\u6210\u6811\u6c42\u6700\u77ed\u8ddd\u79bb\u3002\n\n\\*/\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#include<string>\n#include<queue>\n#include<map>\n#include<vector>\n#define ll long long\n#define R register\n#define Rf(a,b,c) for(R int (a)=(b);(a)<=(c);++(a))\n#define Tf(a,b,c) for(R int (a)=(b);(a)>=(c);--(a))\nusing namespace std;\nconst int N=2000000+5,M=100000+5;\nll n,m,tot,ans,num,sum,cnt,ql,qr;\nstruct it{\n    ll u,v,w;//\u65b0\u56fe \n};\nstruct node {\n    ll to,nx,val;//\u521d\u59cb\u56fe\uff08\u94fe\u5f0f\u524d\u5411\u661f\uff09 \n};\nit a[N];node b[N];\nll fa[M],h[M],head[M],q[M];\nbool vis[M];\ninline ll read()//\u8bfb\u5165\u4f18\u5316 \n{\n    ll x=0,f=1;char ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x*=10;x+=(ch-'0');ch=getchar();}\n    return x*f;\n}\nbool cmp1(it x,it y) {\n//\u6bd4\u8f83\u51fd\u6570\uff0c\u4ee5\u7ec8\u70b9\u7684\u9ad8\u5ea6\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u8fb9\u957f\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \n    if(h[x.v]!=h[y.v]) return h[x.v]>h[y.v];\n    return x.w<y.w;\n}\ninline ll find(ll x) {//\u5e76\u67e5\u96c6\u627e\u7236\u4eb2 \n    if(fa[x]!=x) fa[x]=find(fa[x]);\n    return fa[x];\n}\ninline void add(int u,int v,int c) {//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9 \n    b[++num].to=v;\n    b[num].nx=head[u];\n    head[u]=num;\n    b[num].val=c;\n}\nvoid bfs(){//\u5bbd\u641c\uff0c\u62d3\u5c55\u53ef\u5230\u8fbe\u7684\u70b9\uff0c\u5efa\u65b0\u56fe \n    q[++qr]=1;vis[1]=1;\n    while(ql<qr) {\n        int now=q[++ql];\n        for(int i=head[now];i;i=b[i].nx) {\n            a[++cnt].u=now;a[cnt].v=b[i].to;a[cnt].w=b[i].val;//\u5efa\u7acb\u65b0\u56fe\u7684\u8fb9 \n            if(!vis[b[i].to]) {\n                vis[b[i].to]=1;sum++;//sum\u8ba1\u6570\u5668\u8ba1\u53ef\u5230\u8fbe\u7684\u70b9 \n                q[++qr]=(b[i].to);\n            }\n        }\n    }\n}\nint main()\n{\n//    freopen(\"steep.in\",\"r\",stdin);\n//    freopen(\"steep.out\",\"w\",stdout);\n    n=read();m=read();//\u8bfb\u5165\u6570\u636e \n    Rf(i,1,n) h[i]=read(),fa[i]=i;\n    Rf(i,1,m) {\n        R int u=read(),v=read(),c=read();\n        if(h[u]>=h[v]) add(u,v,c);//\u6839\u636e\u8fb9\u4e24\u8fb9\u7684\u70b9\u7684\u9ad8\u5ea6\uff0c\u5efa\u7acb\u4e00\u6761\u7531\u9ad8\u5230\u4f4e\u7684\u5355\u5411\u8fb9 \n        if(h[u]<=h[v]) add(v,u,c);//\u5f53\u9ad8\u5ea6\u76f8\u7b49\u65f6\u4f1a\u5efa\u4e24\u6761\u8fb9 \n    }\n    bfs();//\u5e7f\u641c\u62d3\u5c55\u70b9 \n    sort(a+1,a+1+cnt,cmp1);//\u5bf9\u65b0\u56fe\u7684\u70b9\u8dd1Kruskal\u6c42\u6700\u5c0f\u751f\u6210\u6811 \n    Rf(i,1,cnt) {\n        R int rx=find(a[i].u),ry=find(a[i].v);\n        if(rx!=ry) {\n            fa[rx]=ry;ans+=a[i].w;//\u6c42\u6700\u77ed\u8ddd\u79bb \n        }\n    }\n    printf(\"%lld %lld\",sum+1,ans);//sum+1\uff0c\u8fd8\u6709\u521d\u59cb\u76841\u70b9\u53ef\u5230 \n    return 0;\n}\n\n```",
        "postTime": 1500640592,
        "uid": 35700,
        "name": "Khassar",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2573 \u3010[SCOI2012]\u6ed1\u96ea\u3011"
    },
    {
        "content": "\u597d\u50cf\u9898\u89e3\u91cc\u53ea\u6709\u4e00\u4e2a\u4eba\u7528\u4e86prim\uff0c~~\u800c\u4e14\u6211\u8fd8\u770b\u4e0d\u61c2~~\uff0c\u5b9e\u9645\u4e0a\u8fd9\u9053\u9898\u76ee\u7528prim\u7684\u8bdd\u4f1a\u5feb\u4e00\u4e9b\u3002\n\n\u6982\u62ec\u4e00\u4e0b\u9898\u610f\uff1a\n\n\u6211\u4eec\u4ece\u7f16\u53f7\u4e3a\u4e00\u7684\u70b9\u5411\u4e0b\u6ed1\u884c\uff0c\u4e2d\u9014\u53ef\u4ee5\u56de\u5230\u5df2\u8d70\u8def\u5f84\u4e0a\u7684\u4efb\u610f\u4e00\u70b9\uff0c\u800c\u4e14\u56de\u5230\u5df2\u8d70\u70b9\u7684\u8ddd\u79bb\u4e0d\u8ba1\u5165\u603b\u8ddd\u79bb\uff0c\u9700\u6c42\u51fa\u6211\u4eec\u80fd\u7ecf\u8fc7\u7684\u6700\u591a\u7684\u70b9\u6570\u4ee5\u53ca\u5728\u6b64\u524d\u63d0\u4e0b\u6240\u8d70\u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u56e0\u4e3a\u5f80\u56de\u8d70\u4e0d\u8ba1\u5165\u603b\u8ddd\u79bb\uff0c\u5373\u91cd\u590d\u8d70\u8fc7\u4e00\u6761\u8fb9\u8fb9\u6743\u53ea\u7b97\u4e00\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u603b\u8ddd\u79bb\u5373\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u8d70\u8fc7\u7684\u8def\u5f84\u7684\u8fb9\u6743\u548c\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u4ee5 1 \u4e3a\u6839\u8282\u70b9\u7684\u70b9\u6570\u6700\u591a\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u6839\u636e\u9898\u76ee\u610f\u601d\uff0c\u6211\u4eec\u53ea\u80fd\u4ece\u9ad8\u7684\u8282\u70b9\u8d70\u5230\u4f4e\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u76f4\u63a5\u6309\u4e00\u822c\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u5c31\u4f1a\u51fa\u73b0\u9519\u8bef\uff0c\u4e3e\u4e2a\u6817\u5b50\u5c31\u77e5\u9053\u4e86\uff1a\n\n```\n3\n3 2 1\n1 2 5\n1 3 2\n2 3 1\n\n```\n\u5982\u679c\u6309\u4e00\u822c\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\uff0c\u6700\u5c0f\u8fb9\u6743\u548c\u4e3a3\uff0c\u4f46\u662f\u5f88\u660e\u663e\u6211\u4eec\u7684\u7b54\u6848\u5e94\u8be5\u662f6\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u4e0d\u80fd\u4ece 3 \u53f7\u8282\u70b9\u5230 2 \u53f7\u8282\u70b9\u3002\n\n\u6211\u4eec\u4f1a\u53d1\u73b0\u4e0d\u7ba1\u6211\u4eec\u5f80\u4e0b\u600e\u4e48\u8fde\u8fb9\uff0c\u90fd\u4e0d\u4f1a\u5bf9\u9ad8\u5ea6\u6bd4\u5b83\u9ad8\u7684\u4ea7\u751f\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u7ed9\u70b9\u6392\u5e8f\u5e94\u8be5\u4ee5\u8282\u70b9\u9ad8\u5ea6\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u8ddd\u751f\u6210\u6811\u7684\u8ddd\u79bb\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u3002\n\n\u800c\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\u90fd\u662f\u5c06\u80fd\u63a5\u5230\u6811\u4e0a\u7684\u8282\u70b9\u5168\u90fd\u63a5\u4e0a\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u5efa\u6811\u6811\u7edf\u8ba1\u4e00\u4e0b\u5c31\u53ef\u4ee5\u7b97\u51fa\u6700\u591a\u80fd\u5230\u666f\u70b9\u7684\u6570\u91cf\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u770b\u4ee3\u7801\uff1a~~\u6211\u77e5\u9053\u4f60\u4eec\u53ea\u770b\u8fd9\u4e2a~~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#define ll long long\nusing namespace std;\n\nconst int N = 1e5 + 10;\nconst int M = 1e6 + 10;\n\ninline int read()\n{\n\tint res=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')res=(res<<3)+(res<<1)+(ch^48),ch=getchar();\n\treturn res;\n}\n\nstruct edge{\n\tint next,to,w;\n}r[M<<1];\n\nint head[N],tot;\n\nvoid add(int u,int v,int w)\n{\n\tr[++tot]=(edge){head[u],v,w};\n\thead[u]=tot;\n}\n\nstruct node{\n\tint high,dis,id;\n};\n\nbool operator <(const node &a,const node &b)\n{\n\tif(a.high!=b.high)return a.high<b.high;\n\treturn a.dis>b.dis;\n}\n\npriority_queue<node> q;\n\nint maxn;\n\nll cnt,ans;\n\nint h[N],d[N];\n\nbool intree[N];\n\nvoid prim(int st)\n{\n\tmemset(d,0x7f,sizeof(d));\n\td[st]=0;\n\tq.push((node){h[st],0,st});\n\twhile(!q.empty())\n\t{\n\t\tint u=q.top().id;\n\t\tq.pop();\n\t\tif(intree[u])continue;\n\t\tintree[u]=true;\n\t\tcnt++,ans+=d[u];\n\t\tfor(int e=head[u];e;e=r[e].next)\n\t\t{\n\t\t\tint v=r[e].to,w=r[e].w;\n\t\t\tif(intree[v])continue;\n\t\t\tif(d[v]>w)\n\t\t\t\td[v]=w,q.push((node){h[v],d[v],v});\n\t\t}\n\t}\n}\n\nint main()\n{\n\tint n=read(),m=read();\n\tfor(int i=1;i<=n;i++)\n\t\th[i]=read();\n\tfor(int i=1,u,v,w;i<=m;i++)\n\t{\n\t\tu=read(),v=read(),w=read();\n\t\tif(h[u]>=h[v])add(u,v,w);\n\t\tif(h[v]>=h[u])add(v,u,w);\n\t}\n\tprim(1);\n\tprintf(\"%lld %lld\\n\",cnt,ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1573443181,
        "uid": 236021,
        "name": "C_\u65ed",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2573 \u3010[SCOI2012]\u6ed1\u96ea\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u4f60\u4e00\u5f20\u5e26\u6743\u6709\u5411\u56fe\uff08\u7531\u4e8e\u5b58\u5728\u9ad8\u5ea6\u9650\u5236\uff0c\u6240\u4ee5\u8fb9\u662f\u6709\u5411\u7684\uff09\uff0c\u95ee\u4f60\u4ece1\u5f00\u59cb\u6700\u591a\u80fd\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u591a\u5c11\u4e2a\u70b9\uff08\u4f7f\u7528\u65f6\u95f4\u80f6\u56ca\u5373\u4e3a\u56de\u6eaf\uff09\uff0c\u5728\u904d\u5386\u6700\u591a\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u5f97\u6240\u6709\u7ecf\u8fc7\u7684\u8fb9\u7684\u6743\u503c\u548c\u6700\u5c0f\uff08\u7531\u4e8e\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u6240\u4ee5\u5c31\u662f\u6c42\u201c\u6709\u5411\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u201d\uff09\u3002\n\n\n\n\u7b2c\u4e00\u95ee\u5f88\u5bb9\u6613\uff0c\u6df1\u641c\u904d\u5386\u5373\u53ef\u3002\n\n\n\u5728\u904d\u5386\u7684\u65f6\u5019\u628a\u6709\u7528\u7684\u8fb9\u8bb0\u5f55\u4e0b\u6765\u3002\n\n\n\u7b2c\u4e8c\u95ee\u5176\u5b9e\u5c31\u662f\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4f46\u8fb9\u662f\u6709\u5411\u7684\uff0c\u600e\u4e48\u529e?\n\n\n\u8fd9\u91cc\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528Kruskal\u89e3\u51b3\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u5728\u5bf9\u8fb9\u6392\u5e8f\u7684\u65f6\u5019\uff0c\u4ee5\u7ec8\u70b9\u7684\u9ad8\u5ea6\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4ece\u5927\u5230\u5c0f\u6392\uff0c\u4ee5\u8fb9\u6743\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u3002\n\n\n\u8981\u4fdd\u8bc1\u6709\u5411\u56fe\u7684\u201c\u6700\u5c0f\u751f\u6210\u6811\u201d\u6b63\u786e\uff0c\u6211\u4eec\u5fc5\u987b\u4ece\u9ad8\u5230\u4f4e\u6309\u6b21\u5e8f\u904d\u5386\u4e0b\u6765\u3002\n\n\n\u800c\u4ee5\u7ec8\u70b9\u7684\u9ad8\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\uff0c\u5c31\u80fd\u4fdd\u8bc1\u6240\u904d\u5386\u7684\u70b9\u4e00\u5b9a\u662f\u4ece\u5927\u5230\u5c0f\u7684\uff0c\u4e5f\u5c31\u4fdd\u8bc1\u4e86\u7b54\u6848\u7684\u6b63\u786e\u6027\u3002\n\n\n\u7136\u540eKruskal\u8dd1\u5373\u53ef\u3002\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6O(mlogm)\uff0c\u65f6\u95f4\u9650\u52365s\uff0c\u5f3a\u7684\u6570\u636e\u80fd\u57281s\u5de6\u53f3\u8fd0\u884c\u5b8c\u3002\n\n\n\u6ce8\u610f\u7b54\u6848\u4f1a\u8d85\u51fa2^32\uff0c\u8981\u752864\u4f4d\u6574\u6570\u3002\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint n,m,h[100002],cnt,head[100002],fa[100002],cnt2,mxJD,head2[100002];\nlong long mxDS;\nbool vis[100002];\nint dad(int x){return fa[x]==x?x:fa[x]=dad(fa[x]);}\nstruct edge{\n    int from,to,dis,nxt;\n    bool operator<(const edge& rhs)const{\n        if(h[to]!=h[rhs.to])return h[to]>h[rhs.to];\n        return dis<rhs.dis;\n    }\n}e[1000005<<1],e2[1000005<<1];\ninline int readint(){\n    char c=getchar();\n    for(;!isdigit(c);c=getchar());\n    int d=0;\n    for(;isdigit(c);c=getchar())\n    d=(d<<3)+(d<<1)+(c^'0');\n    return d;\n}\nvoid dfs(int now){\n    vis[now]=true;\n    ++mxJD;\n    for(int i=head[now];i;i=e[i].nxt){\n        e2[++cnt2]=(edge){e[i].from,e[i].to,e[i].dis,head2[e[i].from]};\n        head2[e[i].from]=cnt2;\n        if(!vis[e[i].to])dfs(e[i].to);\n    }\n}\nint main(){\n    memset(head,0,sizeof head);\n    cnt=cnt2=mxJD=mxDS=0;\n    n=readint(),m=readint();\n    for(int i=1;i<=n;++i)h[i]=readint(),fa[i]=i;\n    while(m--){\n        int u=readint(),v=readint(),t=readint();\n        if(h[u]>=h[v]){\n            e[++cnt]=(edge){u,v,t,head[u]};\n            head[u]=cnt;\n        }//NOT else\n        if(h[u]<=h[v]){\n            e[++cnt]=(edge){v,u,t,head[v]};\n            head[v]=cnt;\n        }\n    }\n    memset(head2,0,sizeof head2);\n    memset(vis,0,sizeof vis);\n    dfs(1);\n    printf(\"%d \",mxJD);\n    sort(e2+1,e2+cnt2+1);\n    for(int i=1;i<=cnt2;++i){\n        int a=dad(e2[i].from),b=dad(e2[i].to);\n        if(a!=b){\n            mxDS+=e2[i].dis;\n            fa[b]=a;\n            if(--mxJD<2)break;\n        }\n    }\n    printf(\"%lld\\n\",mxDS);\n    return 0;\n}\n```",
        "postTime": 1509433057,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2573 \u3010[SCOI2012]\u6ed1\u96ea\u3011"
    },
    {
        "content": ">[$\\mathcal{\\large{\\colorbox{#005}{My Blog }}}$](https://www.cnblogs.com/qf-breeze/p/10753653.html)\n\n[$problem$](https://www.luogu.org/problemnew/show/P2573)\n\n\u8fd9\u9898\u5c31\u662f \u641c\u7d22 + \u6700\u5c0f\u751f\u6210\u6811\uff1f\n\n\u53cd\u6b63\u5c31\u662f\u8fd9\u6837\u7684\n\n1. \u6c42\u4ece1\u5f00\u59cb\u80fd\u6700\u5230\u51e0\u4e2a\u5730\u65b9\u3002\n2.\u6700\u77ed\u957f\u5ea6 \u5373\u6700\u5c0f\u751f\u6210\u6811\u3002\n\u6211\u7684\u505a\u6cd5\u662f \u5148\u524d\u5411\u661f\u5b58\u56fe \u5b58\u597d\u4e4b\u540e\u904d\u5386 \u5f04\u597d\u7b2c\u4e00\u4e2a\u95ee \u987a\u4fbf\u5904\u7406\u597d\u7b2c\u4e8c\u4e2a\u95ee\u3002\n\u53ef\u4ee5\u641c\u7d22 \u904d\u5386\u51fa\u6765 \u80fd\u5230\u51e0\u4e2a\u70b9\u3002 \u7136\u540e\u987a\u4fbf\u91cd\u65b0\u5b58\u56fe \u56e0\u4e3a\u6709\u4e9b\u8def\u5f84\u5c31\u5728\u8fd9\u65f6\u5019\u663e\u5f97\u4e00\u70b9\u6ca1\u7528\u4e86\u3002\n\n\u7136\u540e\u8dd1$kruskal$ \u6c42\u6700\u77ed\u8ddd\u79bb\uff1f \u6ca1\u4e86\u3002\n\n\u5173\u4e8e\u6392\u5e8f\u7684\u8bdd \u6709\u4e00\u70b9 \u8981\u4ece\u9ad8\u5230\u4f4e\u6392 \u9ad8\u5ea6\u76f8\u540c\u7684 \u53d6\u6700\u5c0f\uff08\u6700\u5c0f\u751f\u6210\u6811\uff09\n\n\u6240\u4ee5\u7684\u8bdd\u5462 \n\u6211\u4eec\u9700\u8981\u4e00\u4e2acmp\n\n```cpp\nbool cmp(E x , E y) { return h[x.v] == h[y.v] ? x.w < y.w : h[x.v] > h[y.v] ; }\n\n```\n\u7136\u800c\u8fd9\u6837\u7684\u8bdd \u5c31\u53ef\u4ee5\u8fbe\u5230\u6392\u5e8f\u7684\u76ee\u7684 \u4e5f\u5c31\u662f\u4fdd\u8bc1\u62d3\u5c55\u7684\u70b9\u6700\u591a\n\n\u5173\u4e8e\u524d\u5411\u661f\u5b58\u56fe \u6ce8\u610f\u7684\u662f \u9ad8\u5ea6\u76f8\u7b49\u9700\u8981\u5efa\u53cc\u5411\u8fb9\u3002\n\n\u6570\u7ec4\u5f00\u4e24\u500d\uff08\u5927\u96fe\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std ;\n//#define int long long \n\ntypedef long long LL ;\ninline int rd() { int x = 0 ; int f = 1 ; register char c ;\n#define gc c = getchar()\n    while(isspace(gc)) ;\n    if(c == '-') f = -1 , gc ;\n    while(x = (x<<1) + (x<<3) + (c&15) , isdigit(gc)) ;\n    return x * f ;\n#undef gc\n}\n\nint n , m ;\nconst int inf = INT_MAX >> 1 ;\nconst int N = 100000 + 5 ;\nint h[N] ;\nconst int M = 1000000 + 5 ;\nstruct node { int to ; int val ; int nxt ; } Edge[M << 1] ;\nint cnt(0) ;\nint head[N] ;\nstruct E { int u ; int v ; int w ; } edge[M << 1] ;\nbool cmp(E x , E y) { return h[x.v] == h[y.v] ? x.w < y.w : h[x.v] > h[y.v] ; }\ninline void Add(int u , int v , int w) {\n\tEdge[++ cnt].to = v , Edge[cnt].val = w , Edge[cnt].nxt = head[u] ;\n\thead[u] = cnt ; \n}\nint fa[N] ;\ninline int find (int x) { return x == fa[x] ? x : fa[x] = find (fa[x]) ; } \ninline void merge(int x , int y) { fa[x] = y ; }\nbool vis[N] ;\nint num(0) , sum(1) ;\nLL ans(0) ;\ninline void Dfs(int x) {\n\tfor(register int i = head[x] ; i ; i = Edge[i].nxt) {\n\t\tedge[++ num].u = x ; edge[num].v = Edge[i].to ; edge[num].w = Edge[i].val ;\n\t\tif(!vis[Edge[i].to]) vis[Edge[i].to] = 1 , ++ sum , Dfs(Edge[i].to) ;\n\t}\n} \ninline void kruskal() {\n\tsort(edge + 1 , edge + num + 1 , cmp) ;\n\tfor(register int i=1;i<=num;i++) {\n\t\tint fx = find(edge[i].u) , fy = find(edge[i].v) ;\n\t\tif(fx == fy) continue ;\n\t\tmerge(fx , fy) ; ans += edge[i].w ;\n\t}\n\treturn ;\n}\nsigned main() {\n\tn = rd() , m = rd() ;\n\tfor(register int i=1;i<=n;i++) fa[i] = i ;\n\tfor(register int i=1;i<=n;i++) h[i] = rd() ;\n\tfor(register int i=1;i<=m;i++) {\n\t\tint u = rd() , v = rd() , w = rd() ;\n\t\tif(h[u] >= h[v]) Add(u , v , w) ;\n\t\tif(h[u] <= h[v]) Add(v , u , w) ;\n\t}\n\tvis[1] = 1 , Dfs(1) ;\n\tkruskal() ;\n\tcout << sum << ' ' << ans << endl ;\n\treturn 0 ;\n}\n```",
        "postTime": 1555944736,
        "uid": 96580,
        "name": "SXNhdW5veWE",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2573 \u3010[SCOI2012]\u6ed1\u96ea\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6c42\u4ee51\u70b9\u4e3a\u6839\u7684\u6709\u5411\u6811\u5f62\u56fe\uff0c\u6ee1\u8db3\u542b\u70b9\u6570\u6700\u5927\u7684\u524d\u63d0\u4e0b\uff0c\u8fb9\u6743\u548c\u6700\u5c0f\uff08\u65f6\u95f4\u80f6\u56ca\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u8def\u5f84\u4e0a\u56de\u6eaf\uff0c\u5176\u7ed3\u679c\u5c31\u662f\u6700\u540e\u5347\u6210\u4e00\u68f5\u6811\uff09\u3002\u53e6\u5916\uff0c\u7b2c\u4e00\u95ee\u672c\u8d28\u6c42\u4ece\u6839\u5f00\u59cb\u53ef\u8fbe\u7684\u70b9\u7684\u4e2a\u6570\u3002\n\n\u5f00\u59cb\u6ca1\u770b\u89c1\u5b83\u7ed9\u5b9a\u4e86\u6839\uff0c\u60f3\u4e86\u5f88\u4e45\uff0c\u7136\u800c\u65e2\u7136\u7ed9\u4e86\u6839\u5c31\u662f\u5f88\u7b80\u5355\u7684\u4e00\u9053\u9898\u4e86\u3002\n\n\u8003\u8651\u6309\u70b9\u4ece\u6839\u8fdb\u884c\u62d3\u5c55\uff0c\u4f7f\u7528prim\u6c42\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u7531\u4e8e\u8fd9\u4e2a\u7b97\u6cd5\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9\u53ef\u4ee5\u76f4\u63a5\u5728\u8fc7\u7a0b\u4e2d\u901a\u8fc7\u9ad8\u5ea6\u5224\u65ad\uff0c\u6240\u4ee5\u7b2c\u4e00\u95ee\u7684\u6b63\u786e\u6027\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\n\n\u63a5\u4e0b\u6765\u7b2c\u4e8c\u95ee\n\n\u4ece\u6839\u5230\u8fbe\u7684\u70b9\u7684\u6570\u91cf\u662f\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u53ea\u8981\u80fd\u5230\u8fbe\u7684\u70b9\u90fd\u53ef\u4ee5\u62d3\u5c55\u3002\n\n\u8f6c\u79fb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u80fd\u4ece\u9ad8\u5ea6\u9ad8\u7684\u5411\u9ad8\u5ea6\u4f4e\u7684\u8f6c\u79fb\u3002\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u6240\u6709\u53ef\u4ee5\u62d3\u5c55\u7684\u70b9\uff0c\u5148\u62d3\u5c55\u9ad8\u5ea6\u66f4\u9ad8\u7684\uff0c\u6700\u7ec8\u7b54\u6848\u4e0d\u4f1a\u66f4\u52a3\u3002\n\n\u7136\u540e\u6309\u7167\u4e00\u822c\u7684prim\u505a\u6cd5\uff0c\u4f18\u5148\u62d3\u5c55\u8ddd\u79bb\u5df2\u7ecf\u5b58\u5728\u7684\u751f\u6210\u6811\u8ddd\u79bb\u6700\u5c0f\u7684\u70b9\u5373\u53ef\u3002\n\n\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u62ff\u4e2a\u5806\u7ef4\u62a4\u6570\u636e\uff0c\u6309\u9ad8\u5ea6\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4e0a\u8ff0\u8ddd\u79bb\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u5efa\u5806\u5c31\u53ef\u4ee5\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a\u505a\u6cd5\u5199\u8d77\u6765\u548c\u677f\u5b50\u552f\u4e00\u7684\u533a\u522b\u5c31\u662f\u91cd\u8f7d\u8fd0\u7b97\u7b26\u7684\u65f6\u5019\u3002\u3002\n\n\n\u8d34\u6211\u8dd1\u5f97\u975e\u5e38\u6162\u7684\u7a0b\u5e8f\uff08\u5b9e\u9645\u4e0a\u5c31\u662fstl\u5927\u5e38\u6570\uff09\n\n***cpp\n\n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<queue>\nusing namespace std;\nbool vis[100005];\nint ans,t,n,m,u,v,k,fr[100005];\nlong long asl;\nstruct SSSD\n{\n    int ed,nxt,v;\n}sd[2000005];\nstruct PRR{int a,b,nd;}pr[100005];\nbool operator <(const PRR &a,const PRR &b){return a.a<b.a?1:a.a==b.a?(a.b>b.b?1:a.b==b.b?a.nd<b.nd:0):0;}\nbool operator ==(const PRR &a,const PRR &b){return a.nd==b.nd&&a.b==b.b;}\nstruct HEAP\n{\n    priority_queue<PRR> n,dl;\n    void ck(){while(dl.size()>0&&dl.top()==n.top())dl.pop(),n.pop();}\n    void insert(PRR a){ck();n.push(a);}\n    void del(PRR a){ck();dl.push(a);}\n    int size(){ck();return n.size()-dl.size();}\n    PRR pop(){ck();PRR a=n.top();n.pop();return a;}\n}hp;\nvoid addedge(int s,int e,int k)\n{\n    ++t;\n    sd[t].ed=e;\n    sd[t].v=k;\n    sd[t].nxt=fr[s];\n    fr[s]=t;\n}\nvoid prim()\n{\n    pr[1]=(PRR){pr[1].a,0,1};\n    hp.insert(pr[1]);\n    while(hp.size()>0)\n    {\n        PRR a=hp.pop();\n        vis[a.nd]=1;\n        ans++;\n        asl+=a.b;\n        for(int i=fr[a.nd];i!=0;i=sd[i].nxt)\n        {\n            if(pr[sd[i].ed].a>pr[a.nd].a)continue;\n            if(vis[sd[i].ed])continue;\n            if(pr[sd[i].ed].b==0x7fffffff)\n            {\n                pr[sd[i].ed].b=sd[i].v;\n                hp.insert(pr[sd[i].ed]);\n            }\n            else if(sd[i].v<pr[sd[i].ed].b)\n            {\n                hp.del(pr[sd[i].ed]);\n                pr[sd[i].ed].b=sd[i].v;\n                hp.insert(pr[sd[i].ed]);\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&pr[i].a);\n        pr[i].nd=i;\n        pr[i].b=0x7fffffff;\n    }\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&u,&v,&k);\n        if(pr[u].a>=pr[v].a)addedge(u,v,k);\n        if(pr[u].a<=pr[v].a)addedge(v,u,k);\n    }\n    prim();\n    printf(\"%d %lld\",ans,asl);\n}\n```\n***\n\u6ce8\u610f\u6d1b\u8c37\u6570\u636e\u975e\u5e38\u5f31\uff0c\u6240\u4ee5\u3002\u3002\u3002\u53ef\u4ee5\u9002\u5f53\u5728\u8fd9\u91cc\u4ea4\u5b8c\u4ee5\u540e\u6362\u4e2aoj......\n\n\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u5565\u600e\u4e48\u641c\u90fd\u662fkruscal\u7684\u5199\u6cd5\u554a///\n\n\n\u653e\u4e86\u4e00\u6837\u7684\u4e00\u4efd\u5728\uff1a<http://www.msfakatsuki.com/index/Pennant-number=190>\n",
        "postTime": 1501566406,
        "uid": 3506,
        "name": "MSF_Akatsuki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2573 \u3010[SCOI2012]\u6ed1\u96ea\u3011"
    },
    {
        "content": "\u9898\u610f\u7b80\u8ff0\uff1a\u5728\u4e00\u4e2a\u53ea\u80fd\u6cbf\u7740\u8fb9\u4ece\u70b9\u6743\u5927\u7684\u70b9\u5411\u70b9\u6743\u5c0f\u7684\u70b9\u8fde\u8fb9\uff0c\u5728\u8fd9\u4e2a\u56fe\u5728\u5305\u542b\u7684\u70b9\u6700\u591a\u7684\u524d\u63d0\u4e0b\u6c42\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811\u3002\n\n\u601d\u8def\u89e3\u6790\uff1a\u5982\u679c\u5c06\u8fd9\u9053\u9898\u62bd\u8c61\u51fa\u4e86\u9898\u610f\u7b80\u8ff0\u7684\u5185\u5bb9\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 $Kruskal$ \u8fd8\u662f $Prim$ \u4e86\u3002\u4f46\u662f\u7531\u4e8e\u672c\u849f\u84bb\u4e0d\u77e5\u9053\u5728\u6709\u5411\u8fb9\u7684\u60c5\u51b5\u4e0b\u600e\u4e48\u7528 $Kruskal$\uff0c\u6240\u4ee5\u6211\u5c31\u7528 $Prim$ \u5199\u7684\u8fd9\u9053\u9898\u3002\n\n\u4f46\u8fd9\u4e00\u9053\u9898\u4e2d\uff0c\u770b\u6570\u636e\u8303\u56f4\u80fd\u591f\u53d1\u73b0\u663e\u7136\u8981\u7528\u5806\u4f18\u5316\u7248\u7684 $Prim$\uff0c\u6240\u4ee5\u4e4b\u540e\u91cd\u8981\u7684\u5c31\u662f\u786e\u5b9a $Prim$ \u7684\u6392\u5e8f\u5173\u952e\u5b57\u4e86\u3002\n\n\u6211\u4eec\u5148\u5047\u8bbe\u5df2\u7ecf\u5728\u751f\u6210\u6811\u4e2d\u7684\u96c6\u5408\u53eb $S$,\u7136\u540e\u60f3\u4e00\u60f3\uff0c$S$ \u4e2d\u53ea\u7ecf\u8fc7\u4e00\u6761\u8fb9\u5c31\u80fd\u5230\u8fbe\u7684\u7ed3\u70b9\u4e2d\uff0c\u9ad8\u5ea6\u6700\u5927\u7684\u6211\u4eec\u80af\u5b9a\u8981\u53d6\u3002\u56e0\u4e3a\u8fd9\u4e2a\u7ed3\u70b9\u4e0d\u53ef\u80fd\u7ed5\u8def\u4e4b\u540e\u88ab\u53d6\u5230\uff0c\u56e0\u4e3a\u8fd9\u662f\u9ad8\u5ea6\u6700\u5927\u7684\u7ed3\u70b9\uff0c\u800c\u6211\u4eec\u7ecf\u8fc7\u7684\u7ed3\u70b9\u9ad8\u5ea6\u80af\u5b9a\u662f\u9012\u51cf\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u547d\u9898\u6b63\u786e\u3002\n\n\u8fd9\u6837\u5c31\u6ee1\u8db3\u4e86\u6761\u4ef61\uff0c\u800c\u6761\u4ef62\u600e\u4e48\u6ee1\u8db3\u5462\uff1f\u5f53\u7136\u5c31\u662f\u5728\u6ee1\u8db3\u6761\u4ef61\u7684\u60c5\u51b5\u4e0b\u6309\u79bb\u96c6\u5408 $S$ \u7684\u8ddd\u79bb\u8d8a\u8fd1\u8d8a\u597d\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u7684\u6392\u5e8f\u6709\u4e24\u4e2a\u5173\u952e\u5b57\uff0c\u7b2c\u4e00\u5173\u952e\u5b57\u662f\u901a\u5411\u7684\u7ed3\u70b9\u7684\u9ad8\u5ea6\uff0c\u7b2c\u4e8c\u5173\u952e\u5b57\u662f\u79bb\u96c6\u5408 $S$ \u7684\u8ddd\u79bb\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int NR=1e5+10;\nconst int MR=2e6+10; \nconst int INF=0x3f3f3f3f;\nint n,m;\nint a[NR];\nint to[MR],nxt[MR],val[MR];\nint head[NR];\nint tot=1;\nvoid add(int x,int y,int z)\n{\n\tto[tot]=y;\n\tval[tot]=z;\n\tnxt[tot]=head[x];\n\thead[x]=tot++;\n}\nint ans1;\nll ans2;\nbool vis[NR];\nint dis[NR];\nstruct Nd\n{\n\tint x,h,d;\n\tbool operator <(const Nd &A) const\n\t{\n\t\tif(A.h!=h) return h<A.h;\n\t\treturn d>A.d;\n\t}\n};\npriority_queue<Nd> q;\nNd tmp;\nvoid prim(int s)\n{\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\ttmp.x=s,tmp.h=a[1],tmp.d=0;dis[s]=0;\n\tq.push(tmp);\n\twhile(!q.empty())\n\t{\n\t\tint x=q.top().x;\n\t\tq.pop();\n\t\tif(vis[x]) continue;\n\t\tif(dis[x]>=INF) return;\n\t\tans1++,ans2+=1ll*dis[x];vis[x]=1;\n\t\tfor(int i=head[x];i;i=nxt[i])\n\t\t{\n\t\t\tint y=to[i];\n\t\t\tif(dis[y]>val[i]&&!vis[y])\n\t\t\t{\n\t\t\t\tdis[y]=val[i];\n\t\t\t\ttmp.x=y,tmp.h=a[y],tmp.d=dis[y];\n\t\t\t\tq.push(tmp);\n\t\t\t}\n\t\t}\n\t}\n}\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch<='9'&&ch>='0'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nint main()\n{\n//\tfreopen(\"1.in\",\"r\",stdin);\n//\tfreopen(\"1.out\",\"w\",stdout);\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++) a[i]=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=read(),y=read(),z=read();\n\t\tif(a[x]>a[y]) add(x,y,z);\n\t\telse if(a[y]>a[x]) add(y,x,z);\n\t\telse add(x,y,z),add(y,x,z);\n\t}\n\tprim(1);\n\tprintf(\"%d %lld\\n\",ans1,ans2);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1586524606,
        "uid": 97136,
        "name": "chenzida",
        "ccfLevel": 0,
        "title": "P2573 [SCOI2012]\u6ed1\u96ea"
    },
    {
        "content": "\u5e76\u67e5\u96c6\u5199\u9519\u5c11find\u4e86\u5bfc\u81f4\u4e00\u76f4MLE\u3002\u3002\u3002\n\n## dfs+kruskal\n\n\u56e0\u4e3a\u65f6\u95f4\u80f6\u56ca\u65e0\u9650\uff0c\u6240\u4ee5\u76f8\u5f53\u4e8e\u56de\u6eaf\u56de\u7956\u5148\u8282\u70b9\u518d\u5411\u4e0bdfs\n\n\u5148dfs\u4e00\u904d\u770b\u6700\u591a\u80fd\u6ed1\u591a\u5c11\u70b9\uff0c\u80fd\u6ed1\u5230\u7684\u70b9\u8fde\u8fb9\n\n\u7528\u8fd9\u4e9b\u65b0\u7684\u8fb9\u8dd1\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6392\u5e8f\u7684\u65f6\u5019\u5148\u6309\u9ad8\u5ea6\u4ece\u5927\u5230\u5c0f\u518d\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\n\n\u56e0\u4e3a\u663e\u7136\u5f53\u9ad8\u5ea6\u8f83\u9ad8\u65f6\u80fd\u6ed1\u7684\u70b9\u66f4\u591a\n\ncode\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nnamespace gengyf{\nconst int maxn=1e5+5;\n#define int long long\ninline int read(){\n\tint x=0,f=1;char s=getchar();\n\twhile(s<'0'||s>'9'){if(s=='-')f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9'){x=x*10+s-'0';s=getchar();}\n\treturn f*x;\n}\nint n,m,h[maxn],sum=1,tot,ans;\nstruct Edge{\n\tint u,v,w;\n}E[maxn*20];\nstruct edge{\n\tint nxt,to,w;\n}e[maxn*20];\nint head[maxn],cnt,fa[maxn];\nbool vis[maxn];\ninline void add(int from,int to,int w){\n\te[++cnt].to=to;e[cnt].w=w;e[cnt].nxt=head[from];head[from]=cnt;\n}\nvoid dfs(int x){\n\tfor(int i=head[x];i;i=e[i].nxt){\n\t\tint to=e[i].to;\n\t\tE[++tot].u=x;E[tot].v=to;E[tot].w=e[i].w;\n\t\tif(!vis[to]){\n\t\t\tvis[to]=1;sum++;dfs(to);\n\t\t}\n\t}\n}\nbool cmp(Edge a,Edge b){\n\treturn h[a.v]==h[b.v]?a.w<b.w:h[a.v]>h[b.v];\n}\nint find(int x){\n\treturn x==fa[x]?x:fa[x]=find(fa[x]);\n}\nint main(){\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++){\n\t\th[i]=read();fa[i]=i;\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v,w;\n\t\tu=read();v=read();w=read();\n\t\tif(h[u]==h[v]){\n\t\t\tadd(u,v,w);add(v,u,w);\n\t\t}\n\t\telse if(h[u]>h[v])add(u,v,w);\n\t\telse add(v,u,w);\n\t}\n\tvis[1]=1;dfs(1);\n\tsort(E+1,E+1+tot,cmp);\n\tint k=0;\n\tfor(int i=1;i<=tot;i++){\n\t\tint u=find(E[i].u),v=find(E[i].v);\n\t\tif(u!=v){\n\t\t\tfa[u]=v;\n\t\t\tans+=E[i].w;k++;\n\t\t}\n\t\tif(k==sum-1)break;\n\t}\n\tprintf(\"%lld %lld\",sum,ans);\n\treturn 0;\n}\n}\nsigned main(){\n\tgengyf::main();\n\treturn 0;\n}\n```\n",
        "postTime": 1572184273,
        "uid": 141993,
        "name": "\u55b5\u306e\u8033",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2573 \u3010[SCOI2012]\u6ed1\u96ea\u3011"
    },
    {
        "content": "[\u67e5\u770b\u539f\u9898\u8bf7\u6233\u8fd9\u91cc](https://www.luogu.org/problemnew/show/P2573)  \n# \u89e3\u9898\u601d\u8def\n\u9996\u5148\uff0c\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u6c42`\u201c\u5373\u6ee1\u8db3\u7ecf\u8fc7\u666f\u70b9\u6570\u6700\u5927\u7684\u524d\u63d0\u4e0b\u4f7f\u5f97\u6ed1\u884c\u603b\u8ddd\u79bb\u6700\u5c0f\u201d`\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u76ee\u6211\u4eec\u53ef\u4ee5\u7528\u6700\u5c0f\u751f\u6210\u6811\u6765\u89e3\u51b3\u3002\n# \u5177\u4f53\u505a\u6cd5\n ## \u6838\u5fc3\u7b97\u6cd5\n \u8fd9\u91cc\u63a8\u8350\u7528kruskal\u53bb\u6c42\u6700\u5c0f\u751f\u6210\u6811(`prim`\u867d\u7136\u52a0\u4e0a\u5806\u4f18\u5316\u4e5f\u5e94\u8be5\u4e0d\u4f1a\u8d85\u65f6\uff0c\u4f46\u662fta\u771f\u7684\u662f\u4ee3\u7801\u96be\u6572\u6548\u7387\u8fd8\u4f4eqwq)\u3002  \n \u56e0\u4e3a\u8fd9\u9053\u9898\u76ee\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7684\u9ad8\u5ea6\u90fd\u6709\u4e00\u4e2a\u9650\u5236\uff0c\u6240\u4ee5\u6709\u4e9b\u70b9\u5373\u4f7f\u662f\u6709\u8fb9\u76f8\u8fde\u4e5f\u662f\u5230\u4e0d\u4e86\u7684\u3002\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u5148\u7edf\u8ba1\u53ef\u4ee5\u5230\u8fbe\u7684\u8fb9\uff0c\u7136\u540e\u53ea\u50a8\u5b58\u4e24\u4e2a\u7aef\u70b9\u90fd\u53ef\u4ee5\u5230\u8fbe\u7684\u8fb9\u3002  \n ## \u6ce8\u610f\u4e8b\u9879\n \u56e0\u4e3a\u6bcf\u4e2a\u70b9\u5177\u6709\u9ad8\u5ea6\uff0c\u6240\u4ee5\u5efa\u8fb9\u662f\u5e94\u6839\u636e\u60c5\u51b5\u9009\u62e9\u5efa\u5355\u5411\u8fb9\u8fd8\u662f\u53cc\u5411\u8fb9\u3002  \n \u7531\u4e8e\u6bcf\u4e2a\u70b9\u7684\u9ad8\u5ea6\u90fd\u6709\u9650\u5236\uff0c\u6240\u4ee5\u5e76\u4e0d\u662f\u67d0\u4e2a\u70b9\u5728\u4e00\u5f00\u59cb\u7edf\u8ba1\u7684\u65f6\u5019\u7edf\u8ba1\u4e3a\u80fd\u5230\u8fbe\u5c31\u53ef\u4ee5\u968f\u610f\u9009\u8fb9\u3002\u6240\u4ee5\u6211\u4eec\u5728\u5bf9\u8fb9\u8fdb\u884c\u6392\u5e8f\u662f\uff0c\u5e94\u628a\u7ec8\u70b9\u7684\u9ad8\u5ea6\u8bbe\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u628a\u8fb9\u6743\u8bbe\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\n\n# \u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#define ll long long\n#define INF 0x7fffffff\n#define re register\n\nusing namespace std;\n\nint read()\n{\n    register int x = 0,f = 1;register char ch;\n    ch = getchar();\n    while(ch > '9' || ch < '0'){if(ch == '-') f = -f;ch = getchar();}\n    while(ch <= '9' && ch >= '0'){x = x * 10 + ch - 48;ch = getchar();}\n    return x * f;\n}\n\nstruct edge1{\n\tint next,to,k,from;\n}edge[2000005];\n\nstruct edge2{\n\tint x,y,k;\n}e[2000005];\n\nlong long n,m,u,v,k,t,cnt,ans,tot,h[100005],d[100005],vis[100005],fa[100005];\n\nvoid add(int x, int y, int k)\n{\n\tedge[++cnt].to = y;\n\tedge[cnt].k = k;\n\tedge[cnt].next = d[x];\n\tedge[cnt].from = x;\n\td[x] = cnt;\n}\n\nvoid dfs(int s)\n{\n\tvis[s] = 1;\n\tfor(re int i = d[s]; i; i = edge[i].next) if(!vis[edge[i].to]) dfs(edge[i].to);\n}\n\nint mysort(edge2 a, edge2 b)\n{\n\tif(h[a.y] != h[b.y]) return h[a.y] > h[b.y];\n\treturn a.k < b.k;\n}\n\nint find(int x) {if(fa[x] == x) return x; return fa[x] = find(fa[x]);}\n\nvoid kruskal()\n{\n\tfor(re int i = 1; i <= n; i++) fa[i] = i;\n\tsort(e + 1, e + t + 1, mysort);\n\tfor(re int i = 1; i <= t; i++)\n\t{\n\t\tif(find(e[i].x) != find(e[i].y))\n\t\t{\n\t\t\tans = ans + e[i].k;\n\t\t\tfa[find(e[i].x)] = find(e[i].y);\n\t\t}\n\t}\n}\n\nint main()\n{\n\tn = read(); m = read();\n\tfor(re int i = 1; i <= n; i++) h[i] = read();\n\tfor(re int i = 1; i <= m; i++)\n\t{\n\t\tu = read();  v = read(); k = read();\n\t\tif(h[u] >= h[v]) add(u,v,k);\n\t\tif(h[u] <= h[v]) add(v,u,k);\n\t}\n\tdfs(1);\n\tfor(re int i = 1; i <= cnt; i ++)\n\t{\n\t\tif((edge[i].from != edge[i - 1].to || edge[i].to != edge[i - 1].from) && vis[edge[i].from] && vis[edge[i].to])\n\t\t{\n\t\t\te[++t].k = edge[i].k;\n\t\t\te[t].x = edge[i].from;\n\t\t\te[t].y = edge[i].to;\n\t\t}\n\t}\n\tkruskal();\n\tfor(re int i = 1; i <= n; i++) if(vis[i]) tot ++;\n\tprintf(\"%lld %lld\\n\", tot, ans);\n    return 0;\n}\n```",
        "postTime": 1561257884,
        "uid": 150821,
        "name": "Azuree",
        "ccfLevel": 6,
        "title": "\u6ed1\u96ea-\u9898\u89e3"
    },
    {
        "content": "\u697c\u4e0b\u7684STL\u770b\u7684\u6211\u53d1\u614c233\n\u6211\u53d1\u4e00\u7bc7\u770b\u8d77\u6765\u4e0d\u662f\u90a3\u4e48\u4e71\u7684\u4ee3\u7801\uff0c~~\u6bd5\u7adf\u5f3a\u8feb\u75c7~~\n\u601d\u8def\u662f\u4e00\u6837\u7684\uff0c\u5148\u5728\u539f\u56fe\u4e0adfs\u627e\u5230\u80fd\u53bb\u7684\u6240\u6709\u70b9\uff0c\u4e22\u5230\u65b0\u56fe\u91cc\uff0c\u6211\u76f4\u63a5\u653e\u5230\u4e86priority_queue\u91cc\uff0cstruct\u5c01\u88c5\u5c31\u597d\uff0c\u7136\u540e\u8bb0\u5f97\u5f00longlong\uff0c\u8bb0\u5f97\u80fd\u53bb\u7684\u70b9\u8981\u7b97\u4e0a1\u53f7\u70b9\uff0c\u8bb0\u5f97dfs\u4e4b\u524dvis[1]\u9644\u62101\uff0c\u6211\u56e0\u4e3a\u6ca1\u6709\u8d4b\u503c\uff0cWA\u4e861\u7ec4\uff0c\u5c45\u7136\u53ea\u6709\u4e00\u7ec4\uff0c\u795e\u5947\n\u4ee3\u7801\n```cpp\n#include<cmath>\n#include<queue>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int M=1005000;\nint n,m;\nint high[M],vis[M];\nint fa[M],siz[M];\nlong long int cnt,ans,tot;\nstruct edge\n{\n\tint to,cost;\n}add;\nvector<edge>v[M];\nstruct edg\n{\n\tint from,to,cost;\n\tbool friend operator < (edg a,edg b)\n\t{\n\t\tif (high[a.to]!=high[b.to]) return high[a.to]<high[b.to];\n\t\treturn a.cost>b.cost; \n\t}\n}now;\npriority_queue<edg>q;\nvoid built(int x)\n{\n\tfor (int i=0;i<v[x].size();i++)\n\t{\n\t\tint go=v[x][i].to;\n\t\tint pay=v[x][i].cost;\n\t\tnow.from=x,now.to=go,now.cost=pay,q.push(now);\n\t\tif (!vis[go]) vis[go]=1,built(go),cnt++;\n\t}\n\treturn ;\n}\nint find(int x)\n{\n\tif (x!=fa[x]) return fa[x]=find(fa[x]);\n\treturn x;\n}\nvoid unionn(int a,int b)\n{\n\tif (siz[a]<siz[b]) siz[b]+=siz[a],fa[a]=b;\n\telse siz[a]+=siz[b],fa[b]=a;\n\treturn ;\n}\nvoid kru()\n{\n\twhile (q.size()&&tot!=cnt)\n\t{\n\t\tnow=q.top();q.pop();\n\t\tint r1=find(now.from);\n\t\tint r2=find(now.to);\n\t\tif (r1!=r2)\n\t\t{\n\t\t\tans+=now.cost;\n\t\t\tunionn(r1,r2);\n\t\t\ttot++;\n\t\t}\n\t}\n}\nvoid constt()\n{\n\tfor (int i=1;i<=n;i++)\n\tfa[i]=i,siz[i]=1;\n\tcnt=tot=ans=0;\n\treturn ;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tconstt();int a,b,c;\n\tfor (int i=1;i<=n;i++)\n\tscanf(\"%d\",&high[i]);\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tif (high[a]<high[b]) swap(a,b);\n\t\t\tadd.to=b;add.cost=c;v[a].push_back(add);\n\t\tif (high[a]==high[b]) \n\t\t\tadd.to=a,add.cost=c,v[b].push_back(add);\n\t}\n\tvis[1]=1;built(1);kru();\n\tcout<<cnt+1<<\" \"<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1529918048,
        "uid": 71558,
        "name": "AcerMo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2573 \u3010[SCOI2012]\u6ed1\u96ea\u3011"
    },
    {
        "content": "## \u6700\u5927\u666f\u70b9\u6570\n\n\u7531\u4e8e\u65f6\u95f4\u80f6\u56ca\u662f\u65e0\u9650\u7684\uff0c\u6240\u4ee5\u6ed1\u96ea\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u7c7b\u4f3c\u641c\u7d22\uff0c\u4ece\u9ad8\u8282\u70b9\u5230\u4f4e\u8282\u70b9\u3002\u6211\u4eec\u5c31\u8fdb\u884c\u4e00\u4e2a\u641c\u7d22\uff0c\u80fd\u641c\u5230\u7684\u70b9\u5373\u4e3a\u80fd\u7ecf\u8fc7\u7684\u70b9\u3002\n\n##\u6700\u77ed\u8ddd\u79bb\n\n\u628a\u8fb9\u5148\u6309\u7ec8\u70b9\u9ad8\u5ea6\u6392\u5e8f\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff08\u4ece\u5927\u5230\u5c0f\uff09\uff0c\u8fb9\u957f\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\uff08\u4ece\u5927\u5230\u5c0f\uff09\u4e4b\u540e\uff0c\u5c31\u4f1a\u4fdd\u8bc1\u4f18\u5148\u5230\u9ad8\u70b9\uff0c\u540c\u9ad8\u70b9\u4e4b\u95f4\u9009\u6700\u5c0f\u8fb9\u3002\n",
        "postTime": 1500624217,
        "uid": 35590,
        "name": "Dedsec",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2573 \u3010[SCOI2012]\u6ed1\u96ea\u3011"
    }
]