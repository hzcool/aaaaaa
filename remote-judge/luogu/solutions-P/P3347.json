[
    {
        "content": "[\u53ef\u4ee5\u5728\u6211\u7684\u535a\u5ba2\u98df\u7528](https://hehezhou.github.io/2019/06/04/solve-P3347)  \n\u62b1\u6b49\u4e0a\u6b21\u94fe\u63a5\u6302\u9519\u4e86  \n[\u9898\u9762](https://www.luogu.org/problemnew/show/P3347)  \n\u4e0d\u5f97\u4e0d\u8bf4,\u6d59\u6c5f\u795e\u961f\u9009\u62d4\u8d5b\u771f\u662f\u5e74\u5e74\u6bd2\u7624  \n\u9996\u5148\u4f60\u9700\u8981\u6709\u4e00\u70b9\u5bfc\u6570\u7684\u77e5\u8bc6,\u5426\u5219\u53ef\u80fd\u770b\u4e0d\u61c2  \n\u7b2c\u4e00\u95ee\u5f88\u7b80\u5355,\u5efa\u4e2a\u56fe\u8dd1\u4e2a\u6700\u5927\u6d41\u5c31\u597d\u4e86(\u5982\u679c\u8fd9\u90fd\u4e0d\u4f1a\u8fd8\u6562\u6765\u809dzjoi???)  \n\u7b2c\u4e8c\u95ee\n\n1. \u6709\u4e00\u4e2a\u5f88$fAKe$\u7684\u60f3\u6cd5:  \n\u56e0\u4e3a\u8d39\u7528\u4e0d\u662f\u4e00\u6b21\u51fd\u6570,\u800c\u662f\u4e8c\u6b21\u51fd\u6570,\u5e76\u4e14\u6211\u4eec\u89c2\u5bdf\u5230$a,b>=0$  \n\u6240\u4ee5\u6211\u5148\u60f3\u5230\u7684\u662f\u628a\u6bcf\u4e2a\u917f\u9152\u70b9\u7684\u8d39\u7528\u5f3a\u884c\u79bb\u6563,\u5c31\u662f\u5206\u6210\u4e00\u4e2a\u4e2a\u533a\u95f4,\u7136\u540e\u6e90\u70b9\u5411\u6bcf\u4e2a\u917f\u9152\u70b9\u8fde\u5f88\u591a\u6761\u8fb9,\u518d\u8dd1\u8d39\u7528\u6d41  \n\u56e0\u4e3a\u5bfc\u51fd\u6570\u5355\u8c03\u4e0d\u964d,\u6240\u4ee5\u7406\u8bba\u4e0a\u662f\u53ef\u4ee5\u505a\u5230\u4e00\u5b9a\u7cbe\u5ea6\u7684  \n~~\u7136\u800c\u6211\u4eec\u89c2\u5bdf\u5230\u6bd2\u7624\u51fa\u9898\u4eba\u8981\u6c42\u8f93\u51fa\u5206\u6570~~  \n\n2. \u8ba9\u8bef\u5dee\u964d\u4e3a0???  \n\u663e\u7136\u5206\u7684\u8d8a\u7ec6\u8bef\u5dee\u8d8a\u5c0f  \n\u8003\u8651\u5206\u7684\u4efd\u6570\u65e0\u9650\u8d8b\u4e8e0  \n\u6b64\u65f6\u8d39\u7528\u5373\u4e3a\u5bfc\u6570  \n\u7136\u540e\u5c31\u53ef\u4ee5\u5f00\u4e2a\u96c6\u5408\u7ef4\u62a4\u5f53\u524d\u5355\u4f4d\u8d39\u7528\u6700\u5c0f\u7684\u917f\u9152\u70b9  \n\u7136\u540e\u4e8c\u5206\u51fa\u5f53\u5355\u4f4d\u8d39\u7528\u6da8\u5230\u591a\u5c11\u65f6,\u96c6\u5408\u5185\u70b9\u4f1a\u53d8\u5316(\u8981\u4e48\u662f\u6709\u65b0\u70b9\u52a0\u5165,\u8981\u4e48\u662f\u6709\u4e00\u4e2a\u70b9\u8dd1\u6ee1\u6d41)  \n\u7136\u540e\u66f4\u65b0\u96c6\u5408\u5e76\u8fdb\u884c\u4e0b\u4e00\u8f6e\u64cd\u4f5c  \n~~\u7136\u800c\u4e8c\u5206\u8fd8\u662f\u53ea\u80fd\u505a\u5230\u4e00\u5b9a\u7cbe\u5ea6~~(\u8c8c\u4f3c\u4e58\u4e0a\u4e00\u4e2a\u5965\u5999\u91cd\u91cd\u7684\u7cfb\u6570\u53ef\u4ee5\u4e8c\u5206\u6574\u6570,\u4f46\u6211\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u5bf9\u7684,\u800c\u4e14\u590d\u6742\u5ea6\u597d\u50cf\u662f\u5047\u7684)\n\n3. \u6b63\u89e3!\n\u89c2\u5bdf\u4e00\u4e0b\u89e3\u6cd52,\u5c31\u4f1a\u53d1\u73b0\u5f53\u96c6\u5408\u5185\u70b9\u4e0d\u53d8\u65f6,\u4ea7\u9152\u91cf(\u5f53\u524d\u6d41\u91cf)\u548c\u8d39\u7528\u5448\u7ebf\u6027\u5173\u7cfb,\u5e76\u4e14\u5f53\u96c6\u5408\u5185\u70b9\u53d8\u5316\u65f6,\u8d39\u7528\u7684\u4e00\u6b21\u51fd\u6570\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u6700\u591a\u53d8\u5316$2\nn$\u6b21\n\n\u6240\u4ee5\u641e\u4e00\u4e2a\u51fd\u6570$y = f(x)$\u8868\u793a\u5355\u4f4d\u8d39\u7528(\u5bfc\u6570)\u4e0d\u8d85\u8fc7x\u65f6,\u6700\u5927\u6d41\u662f\u591a\u5c11  \n\u90a3\u4e48$f(x)$\u53ef\u4ee5\u88ab\u5206\u6210\u82e5\u5e72\u6bb5,\u6bcf\u6bb5\u5747\u4e3a\u4e00\u6b21\u51fd\u6570,\u6700\u591a$2n=O(n)$\u6bb5  \n\u7136\u540e\u53ef\u4ee5\u7528\u7c7b\u4f3c\u79ef\u5206\u7684\u65b9\u5f0f\u641e\u51fa\u6700\u5c0f\u8d39\u7528\n![](https://hehezhou.github.io/images/P3345-1.png)\n\u8003\u8651\u600e\u4e48\u641e\u51fa\u8fd9\u4e2a\u51fd\u6570  \n\u5982\u679c\u53ea\u6709\u4e8c\u6b21\u51fd\u6570\u7684\u8d39\u7528,\u90a3\u4e48f(x)\u4f1a\u5f62\u6210\u4e00\u4e2a\u7c7b\u4f3c\u4e0a\u51f8\u58f3\u7684\u56fe\u50cf  \n\u7136\u540e\u8003\u8651\u5206\u6cbb,\u6bcf\u6b21\u6c42\u51fa\u6700\u5de6\u4e00\u6b21\u51fd\u6570\u548c\u6700\u53f3\u4e00\u6b21\u51fd\u6570\u7684\u4ea4\u70b9\uff0c\u5982\u679c\u518d\u56fe\u50cf\u4e0a\u5219\u8be5\u70b9\u662f\u533a\u95f4\u5185\u552f\u4e00\u65ad\u70b9\uff0c\u5426\u5219\u9012\u5f52\u5904\u7406\u4e24\u4e2a\u5b50\u533a\u95f4\n![](https://hehezhou.github.io/images/P3345-2.png)  \n\u7136\u540e\u8003\u8651\u4e00\u6b21\u51fd\u6570  \n\u53d1\u73b0b\u53ea\u4f1a\u662f0, 1, 2, 3(\u8be6\u7ec6\u6570\u636e\u8303\u56f4\u89c1[bzoj](https://www.lydsy.com/JudgeOnline/problem.php?id=4091))  \n\u53ea\u8981\u5f3a\u884c\u8bbe1, 2, 3\u4e3a\u65ad\u70b9\u5373\u53ef  \n\u8bb0\u5f97\u52a0\u4e0a\u5de6\u53f3\u8fb9\u754c\u7684f(x)\u4e4b\u5dee(\u89c1\u4ee3\u7801)\n\u590d\u6742\u5ea6$O(n\\times$\u7f51\u7edc\u6d41$)$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\nconst db feps = 1e-11, eps = 1e-9;\ninline ll gcd(ll a, ll b) {\n    return a == 0 || b == 0 ? a | b : gcd(b, a % b);\n}\nstruct frac {\n    ll a, b; //\u4ed4\u7ec6\u770b\u9898\u53d1\u73b0\u8981\u5f00ll\n    inline frac(ll _a = 0, ll _b = 1) {\n        int g = gcd(_a, _b);\n        a = _a / g, b = _b / g;\n    }\n    friend inline frac operator + (frac a, frac b) {\n        return frac(a.a * b.b + a.b * b.a, a.b * b.b);\n    }\n    friend inline frac operator - (frac a, frac b) {\n        return frac(a.a * b.b - a.b * b.a, a.b * b.b);\n    }\n    friend inline frac operator * (frac a, frac b) {\n        return frac(a.a * b.a, a.b * b.b);\n    }\n    friend inline frac operator / (frac a, frac b) {\n        return frac(a.a * b.b, a.b * b.a);\n    }\n    inline operator db () {\n        return 1.0l * a / b;\n    }\n};\nint dis[210], s, t;\nint a[110], b[110], c[110], d[110], ed[110][110];\nstruct edge {\n    db f;\n    int v, nxt;\n} e[3010];\nint tot, head[210], cur[210];\nint n, m;\ninline void addedge(int u, int v, db c) {\n    e[++tot] = edge{c, v, head[u]};\n    head[u] = tot;\n    e[++tot] = edge{0, u, head[v]};\n    head[v] = tot;\n}\ninline int bfs() {\n    queue<int> q;\n    memset(dis, -1, sizeof dis);\n    dis[s] = 0;\n    q.push(s);\n    memcpy(cur, head, sizeof head);\n    while(!q.empty()) {\n        int now = q.front();\n        q.pop();\n        for(int i = head[now]; i; i = e[i].nxt) {\n            if(~dis[e[i].v] || e[i].f < feps) continue;\n            dis[e[i].v] = dis[now] + 1;\n            q.push(e[i].v);\n        }\n    }\n    return dis[t] != -1;\n}\ninline db dfs(int now, db limit) {\n    if(now == t) return limit;\n    db ans = 0;\n    for(int &i = cur[now]; i; i = e[i].nxt) {\n        if(e[i].f < feps || dis[e[i].v] != dis[now] + 1) continue;\n        db lala = dfs(e[i].v, min(limit, e[i].f));\n        limit -= lala, ans += lala;\n        e[i].f -= lala, e[i ^ 1].f += lala;\n        if(limit < feps) return ans;\n    }\n    return ans;\n}\ninline pair<frac, frac> dinic(db lambda) {\n    tot = 1;\n    memset(head, 0, sizeof head);\n    for(int i = 1; i <= n; i++) {\n        if(a[i] == 0) {\n            if(b[i] < lambda) addedge(s, i, c[i]);\n        }\n        else {\n            db w = (lambda - b[i]) / 2 / a[i];\n            if(w > feps) addedge(s, i, min(1.0 * c[i], w));\n        }\n    }\n    for(int i = 1; i <= n; i++)\n        for(int j = 1; j <= m; j++) if(ed[i][j]) addedge(i, j + n, 1e9);\n    for(int i = 1; i <= m; i++) addedge(i + n, t, d[i]);\n    while(bfs()) dfs(s, 1e9);\n    frac K, B;\n    for(int i = 1; i <= n; i++) {\n        if(dis[i] == -1) {\n            if(a[i] == 0) {\n                if(b[i] < lambda) B = B + frac(c[i]);\n            }\n            else {\n                if(b[i] > lambda) B = B + frac();\n                else if(a[i] * 2 * c[i] + b[i] > lambda)\n                    K = K + frac(1, a[i] * 2), B = B - frac(b[i], a[i] * 2);\n                else B = B + frac(c[i]);\n            }\n        }\n    }\n    for(int i = 1; i <= m; i++) if(dis[i + n] != -1) B = B + frac(d[i]);\n    return make_pair(K, B);\n}                                                                      //dinic\u677f\u5b50\nvector<pair<frac, frac> > v;\ninline void solve(pair<frac, frac> fl, pair<frac, frac> fr) {          //\u5206\u6cbb\u627e\u65ad\u70b9\n    if(fl.first == fr.first && fl.second == fr.second) return;\n    frac px = (fl.second - fr.second) / (fr.first - fl.first);\n    pair<frac, frac> fml = dinic((db)px - eps), fmr = dinic((db)px + eps);\n    if(fmr.first == fr.first && fmr.second == fr.second) {\n        v.push_back(make_pair(px, fml.second + fml.first * px));\n    } else {\n        solve(fl, fml);\n        solve(fmr, fr);\n    }\n}\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    s = 0, t = n + m + 1;\n    for(int i = 1; i <= n; i++) scanf(\"%d%d%d\", a + i, b + i, c + i);\n    for(int i = 1; i <= m; i++) scanf(\"%d\", d + i);\n    for(int i = 1; i <= n; i++)\n        for(int j = 1; j <= m; j++) scanf(\"%d\", &ed[i][j]);\n    frac ans, sum;\n    cout << (sum = dinic(1e9).second).a;//\u7b2c\u4e00\u95ee\n    v.push_back(make_pair(frac(), 0));\n    for(int i = 1; i <= 3; i++) {\n        auto l = dinic(i - 1 + eps), r = dinic(i - eps);\n        solve(l, r);\n        v.push_back(make_pair(frac(i), r.second + frac(i) * r.first));\n    }\n    solve(dinic(3 + eps), dinic(1e9));//\u627e\u65ad\u70b9\n    for(int i = 1; i < v.size(); i++) {\n        auto l = dinic((db)v[i].first - eps), r = dinic((db)v[i].first + eps), _l = dinic((db)v[i - 1].first + eps);//std=c++11(\u6ed1\u7a3d\n        ans = ans + v[i].first * ((r.first - l.first) * v[i].first + r.second - l.second);\n        ans = ans + (v[i].second - v[i - 1].first * _l.first - _l.second) * frac(1, 2) * (v[i].first + v[i - 1].first);//\u79ef\u5206\n    }\n    if(ans.a < 0) ans.a = -ans.a, ans.b = -ans.b;\n    return cout << ans.a << '/' << ans.b << endl, 0;\n}\n```",
        "postTime": 1559710341,
        "uid": 67371,
        "name": "hehezhou",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3347 \u3010[ZJOI2015]\u9189\u718f\u718f\u7684\u5e7b\u60f3\u4e61\u3011"
    },
    {
        "content": "> [P3347 [ZJOI2015] \u9189\u718f\u718f\u7684\u5e7b\u60f3\u4e61](https://www.luogu.com.cn/problem/P3347)\n\n\u76f8\u5f53\u4e0d\u5e73\u51e1\u7684\u4e00\u9053\u9898\uff0c\u9700\u8981\u5bf9\u8d39\u7528\u6d41\u672c\u8d28\u6709\u6df1\u5165\u7406\u89e3\u3002\u5bf9 [hehezhou](https://www.luogu.com.cn/blog/hehezhou/solution-p3347) \u9898\u89e3\u7684\u7ec6\u8282\u8865\u5145\u3002\n\n#### \u77ac\u65f6\u8d39\u7528\n\n\u5f53\u8d39\u7528\u8ba1\u7b97\u6ca1\u6709\u5e73\u65b9\u9879\u65f6\uff0c\u672c\u9898\u5373\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7684\u88f8\u9898\uff0c\u4f46\u5f62\u5982 $ax ^ 2 + bx + c$ \u7684\u8d39\u7528\u8ba1\u7b97\u65b9\u5f0f\u8ba9\u672c\u9898\u770b\u8d77\u6765\u4e0d\u592a\u53ef\u505a\u3002\u5148\u7c7b\u4f3c\u8d39\u7528\u6d41\u589e\u5e7f\u5427\u3002\n\n\u6d88\u53bb\u9ad8\u6b21\u9879\u7684\u6700\u597d\u65b9\u6cd5\u662f\u6c42\u5bfc\uff0c$ax ^ 2 + bx$ \u6c42\u5bfc\u5f97 $2ax + b$\u3002\u8003\u8651\u8db3\u591f\u5c0f\u7684\u6d41\u91cf\u95f4\u9694 $\\Delta t$\uff0c\u6bcf\u6b21\u589e\u5e7f $\\Delta t$ \u7684\u6d41\u91cf\uff0c\u4e14\u6bcf\u6761\u8fb9\u7684 **\u77ac\u65f6\u8d39\u7528** \u4e3a $2ax + b$\uff0c\u5176\u4e2d $x$ \u4e3a\u8fd9\u6761\u8fb9\u7684\u5f53\u524d\u6d41\u91cf\uff0c\u5219\u6574\u4e2a\u8fc7\u7a0b\u7ed3\u675f\u540e\uff0c\u6bcf\u6761\u8fb9\u88ab\u7b97\u5165\u7684\u603b\u8d39\u7528\u5373 $ax ^ 2 + bx$\u3002\u5f53 $\\Delta t \\to 0 ^ {+}$ \u65f6\uff0c\u62df\u5408\u6548\u679c\u8d8b\u4e8e\u6b63\u89e3\uff0c\u4f46\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u5141\u8bb8\u3002\n\n\u4e0a\u8ff0\u8fc7\u7a0b\u662f\u79bb\u6563\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u7528\u8fde\u7eed\u7684\u7b97\u6cd5\u7cbe\u786e\u89e3\u51b3\u95ee\u9898\u3002\n\n\u6ce8\u610f\u6574\u5f20\u56fe\u662f\u4e8c\u5206\u56fe\uff0c\u800c\u589e\u5e7f\u8d39\u7528\u4ec5\u5728 $S$ \u4e0e\u5de6\u90e8\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u4ea7\u751f\uff1a\u8fd0\u8f93\u548c\u50a8\u5b58\u65e0\u9700\u8d39\u7528\uff0c\u5ffd\u7565\u6389\u5b83\u4eec\uff0c\u4f7f\u5f97 **\u917f\u9152\u70b9\u4e0e\u4ea7\u751f\u8d39\u7528\u7684\u8fb9\u4e00\u4e00\u5bf9\u5e94**\u3002\u7531\u6b64\u53ef\u77e5\u6a21\u62df\u8d39\u7528\u6d41\u7684\u8fc7\u7a0b\u4e2d\u6240\u6709\u8fb9\u7684\u77ac\u65f6\u8d39\u7528\u4e00\u5b9a\u76f8\u7b49\u3002\u5c06\u5b83\u4eec\u60f3\u8c61\u6210\u8fde\u901a\u5668\uff0c\u6ce8\u6c34\u65f6\u5404\u5bb9\u5668\u5185\u6db2\u9762\u603b\u4fdd\u6301\u5728\u540c\u4e00\u6c34\u5e73\u9762\u4e0a\uff0c\u7c7b\u4f3c\u5730\uff0c\u5f53\u6211\u4eec\u589e\u5927\u6d41\u91cf\u65f6\uff0c\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u4ee5\u67d0\u79cd\u65b9\u5f0f\u589e\u52a0\uff0c\u4f7f\u5f97\u6bcf\u6761\u8fb9\u7684\u77ac\u65f6\u8d39\u7528 $2ax + b$ \u76f8\u7b49\u3002\n\n\u4e0a\u8ff0\u8868\u8ff0\u5e76\u4e0d\u4e25\u8c28\uff0c\u56e0\u4e3a\u6ca1\u6709\u8003\u8651\u5230 $b_i$\uff0c\u66f4\u7cbe\u786e\u7684\u6bd4\u55bb\u662f\u5e95\u9762\u8fde\u901a\u4f46\u4e0d\u5904\u4e8e\u540c\u4e00\u6c34\u5e73\u9762\u4e0a\u7684\u5bb9\u5668\u3002\u8fde\u7eed\u5730\u589e\u5927\u6d41\u91cf\u65f6\uff0c\u82e5\u6574\u4f53\u6700\u5c0f\u8d39\u7528 $< b_i$ \u5219\u8be5\u8fb9\u6d41\u91cf\u4e0d\u589e\u52a0\uff0c\u5426\u5219\u6240\u6709\u77ac\u65f6\u8d39\u7528\u7b49\u4e8e\u6574\u4f53\u6700\u5c0f\u8d39\u7528\u7684\u8fb9\u7684\u6d41\u91cf\u540c\u65f6\u589e\u52a0\uff0c\u4fdd\u6301\u8fd9\u4e9b\u8fb9\u7684\u77ac\u65f6\u8d39\u7528\u76f8\u7b49\uff0c\u4e14\u6574\u4f53\u6700\u5c0f\u8d39\u7528\u4e0d\u65ad\u589e\u52a0\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u4f1a\u5728\u67d0\u4e00\u6807\u51c6\u8d39\u7528\u5f00\u59cb\u589e\u52a0\uff0c\u5e76\u5728\u67d0\u4e00\u6807\u51c6\u8d39\u7528\u505c\u6b62\u589e\u52a0\u3002\u5e76\u975e\u6240\u6709\u8fb9\u540c\u65f6\u4ece\u8d39\u7528 $0$ \u5f00\u59cb\u589e\u52a0\u7684\u539f\u56e0\u4e3a $b_i$\u3002\u505c\u6b62\u589e\u52a0\u7684\u539f\u56e0\u4e3a\u917f\u9152\u70b9\u65e0\u6cd5\u5236\u9020\u66f4\u591a\u7684\u9152\uff0c\u5373 $x$ \u7b49\u4e8e $c_i$\uff0c\u6216\u6240\u6709\u4e0e\u5f53\u524d\u8fb9\u5bf9\u5e94\u917f\u9152\u70b9\u6709\u901a\u9053\u7684\u5b58\u9152\u70b9\u5747\u65e0\u6cd5\u5b58\u50a8\u66f4\u591a\u7684\u9152\u3002\n\n#### \u6298\u7ebf\u79ef\u5206\n\n\u5e26\u7740\u8fd9\u6837\u7684\u8ba4\u77e5\uff0c\u6211\u4eec\u5c1d\u8bd5\u89e3\u51b3\u539f\u95ee\u9898\u3002\u56e0\u5355\u6761\u8fb9\u7684\u77ac\u65f6\u8d39\u7528\u4e0e\u6d41\u91cf\u5448 **\u5b9a\u4e49\u57df\u975e $\\mathbb R$** \u7684\u4e00\u6b21\u51fd\u6570\u5173\u7cfb\uff0c\u8003\u8651\u6c42\u51fa\u77ac\u65f6\u8d39\u7528\u5173\u4e8e\u6d41\u91cf\u7684\u6298\u7ebf\uff0c\u5176\u4e0e $x$ \u8f74\u56f4\u51fa\u7684\u9762\u79ef\u5373\u4e3a\u7b54\u6848\u3002\u4f46\u8fd9\u65e0\u6cd5\u6c42\u89e3\uff0c\u56e0\u4e3a\u4e3a\u4e86\u6c42\u51fa\u603b\u6d41\u91cf\u4e00\u5b9a\u65f6\uff0c\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u5e76\u4e0d\u786e\u5b9a\uff0c\u77ac\u65f6\u8d39\u7528\u4ecd\u9700\u4f7f\u7528\u79bb\u6563\u7684\u65b9\u6cd5\u6a21\u62df\u3002\u4e5f\u8bb8\u53ef\u4ee5\u89e3\u65b9\u7a0b\uff0c\u4f46\u76f8\u5f53\u590d\u6742\u3002\n\n\u6362\u79cd\u89d2\u5ea6\uff0c\u5f53\u77ac\u65f6\u8d39\u7528 $\\lambda$ \u786e\u5b9a\u65f6\uff0c\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u4e0a\u9650 $L_i$ \u4e5f\u5c31\u51b3\u5b9a\u4e86\uff1a$L_i = \\min(c_i, \\frac {\\lambda - b_i}{2a_i})$\uff0c\u7531 $2a_ix + b_i \\leq \\lambda$ \u53ef\u77e5 $x \\leq \\frac {\\lambda - b_i}{2a_i}$\uff0c\u6ce8\u610f\u7279\u5224 $a_i = 0$ \u7684\u60c5\u51b5\u3002\u56e0\u6b64\u8003\u8651\u6c42\u51fa\u6d41\u91cf\u5173\u4e8e\u77ac\u65f6\u8d39\u7528\u7684\u6298\u7ebf $T$\u3002\n\n\u7531\u6bcf\u6761\u8fb9\u662f\u5426\u6ee1\u6d41\u4ee5\u53ca $\\lambda$ \u662f\u5426\u5c0f\u4e8e $b_i$ \u53ef\u77e5\u6bcf\u6761\u8fb9\u5728 $\\lambda$ \u5904\u6d41\u91cf $x_i$ \u5173\u4e8e $\\lambda$ \u7684\u53d8\u5316\u5173\u7cfb\u3002\u4e3a\u9632\u6b62 $\\lambda$ \u6070\u4e3a\u9876\u70b9\uff0c\u9700\u8981\u5bf9 $\\lambda$ \u8fdb\u884c\u6270\u52a8\u3002\n\n- \u82e5\u5f53\u524d\u8fb9\u6ee1\u6d41\u4e14 $\\lambda \\leq b_i$\uff0c\u8bf4\u660e $L_i = 0$\uff0c\u4e0d\u4ea7\u751f\u4efb\u4f55\u6d41\u91cf\u8d21\u732e\uff0c\u5373 $x_i = 0$\u3002\n- \u82e5\u5f53\u524d\u8fb9\u6ee1\u6d41\u4e14 $\\lambda  > b_i$\uff0c\n    - \u82e5 $L_i \\leq c_i$\uff0c\u5219 $L_i$ \u968f\u7740 $\\lambda$ \u589e\u5927\u4e0d\u65ad\u589e\u52a0\u3002\u56e0\u5f53\u524d $\\lambda$ \u5f53\u524d\u8fb9\u6ee1\u6d41\uff0c\u6545\u5bf9\u4e8e\u66f4\u5c0f\u7684 $\\lambda$ \u548c $L_i$ \u540c\u6837\u6ee1\u6d41\uff0c\u8fd9\u4e00\u70b9\u4e0d\u4f5c\u8bc1\u660e\u3002\u6b64\u65f6 $x_i = L_i = \\frac{\\lambda - b_i}{2a_i}$\u3002\n    - \u82e5 $L_i > c_i$\uff0c\u5219 $L_i$ \u53d7\u5230 $c_i$ \u7684\u9650\u5236\u4e00\u76f4\u7b49\u4e8e $c_i$\uff0c\u6b64\u65f6 $x_i = L_i = c_i$\u3002\n- \u82e5\u5f53\u524d\u8fb9\u4e0d\u6ee1\u6d41\uff0c\u76f4\u63a5\u52a0\u5165\u5176\u5bf9\u5e94\u6d41\u91cf\u3002\n\n\u8fd9\u6837\uff0c\u53ef\u4ee5\u6c42\u51fa $T$ \u5728 $\\lambda$ \u5904 $\\sum x_i$ \u5173\u4e8e $\\lambda$ \u7684\u51fd\u6570\u3002 \n\n#### \u9876\u70b9\n\n\u53ea\u8981\u77e5\u9053\u6240\u6709\u9876\u70b9\u7684\u4f4d\u7f6e $P_1, P_2, \\cdots, P_k$\uff0c\u5bb9\u6613\u79ef\u5206\u5f97\u5230\u7b54\u6848\u3002\u8fdb\u4e00\u6b65\u5730\uff0c\u56e0\u4e3a\u53ef\u4ee5\u6c42\u51fa $T$ \u5728 $\\lambda$ \u5904\u7684\u8868\u8fbe\u5f0f\uff0c\u6240\u4ee5\u53ea\u8981\u77e5\u9053\u6240\u6709\u9876\u70b9\u7684\u6a2a\u5750\u6807 $S = \\{\\lambda_1, \\lambda_2, \\cdots, \\lambda_k\\}$\u3002\n\n\u6298\u7ebf\u5fc5\u7136\u7ecf\u8fc7\u539f\u70b9\uff0c\u6240\u4ee5 $0\\in S$\u3002\u6b64\u5916\u4e0d\u59a8\u5c06 $R = \\sum ac_i ^ 2 + bc_i$ \u52a0\u5165 $S$\uff0c\u56e0\u4e3a\u5f53 $\\lambda \\geq R$ \u65f6\u603b\u6d41\u91cf\u7b49\u4e8e\u539f\u56fe\u6700\u5927\u6d41\u3002\n\n\u56e0 $b_i$ \u4e3a\u4e0d\u5927\u4e8e $3$ \u7684\u6574\u6570\uff0c\u4e14\u5bf9\u4e8e $a_i = 0$ \u7684\u917f\u9152\u70b9\uff0c\u5b83\u7684\u6d41\u91cf\u4f1a\u5728 $b_i$ \u5904\u4ece $0$ \u7a81\u53d8\u5230\u67d0\u4e2a\u503c\uff0c\u6240\u4ee5\u4ee4 $1, 2, 3 \\in S$\u3002\n\n\u5c06 $0, 1, 2, 3, R$ \u89c6\u4e3a $T$ \u7684\u65ad\u70b9\uff0c\u56e0\u4e3a $T$ \u5728\u8fd9\u4e9b\u4f4d\u7f6e\u53d1\u751f\u4e86\u7a81\u53d8\u3002\u5176\u4f59\u6240\u6709\u9876\u70b9\u5728\u4e24\u4fa7\u8868\u8fbe\u5f0f\u7684\u53d6\u503c\u4e00\u5b9a\u76f8\u540c\uff0c\u56e0\u4e3a\u6ca1\u6709\u5176\u5b83\u4f1a\u4ea7\u751f\u7a81\u53d8\u7684\u56e0\u7d20\u3002\u6211\u4eec\u53ea\u9700\u5728\u5b83\u4eec\u5f62\u6210\u7684\u533a\u95f4 $(l, r)$ \u627e\u51fa\u6240\u6709\u9876\u70b9\u7684\u6a2a\u5750\u6807\u3002\n\n\u63a5\u4e0b\u6765\u4ecb\u7ecd\u6c42\u89e3\u8fd9\u4e2a\u95ee\u9898\u7684\u6280\u5de7\uff0c\u76f8\u5f53\u4eba\u7c7b\u667a\u6167\u3002\n\n\u4f7f\u7528\u8be5\u6280\u5de7\u7684\u524d\u63d0\u4e3a\u6a2a\u5750\u6807\u533a\u95f4\u5185\u6298\u7ebf\u6ca1\u6709\u65ad\u70b9\u4e14\u6709\u51f8\u6027\u3002\u56e0\u65ad\u70b9\u4e4b\u95f4\u7684\u6298\u7ebf $T_{l, r}$ \u7531\u6240\u6709\u8fb9\u7684\u6298\u7ebf\u76f8\u52a0\u5f97\u5230\uff0c\u4e14\u540e\u8005\u5f62\u5982 $x_i = \\min(c_i, \\frac {\\lambda - b_i}{2a_i})$\uff08\u6ca1\u6709 $x_i = 0$ \u7684\u539f\u56e0\u662f\u5df2\u5bf9 $b_i$ \u5f62\u6210\u7684\u65ad\u70b9\u7279\u6b8a\u8003\u8651\uff0c\u533a\u95f4\u5185\u4e0d\u542b\u65ad\u70b9\uff09\uff0c\u4e0a\u51f8\uff0c\u6545 $T_{l, r}$ \u4e0a\u51f8\u3002\n\n\u4ee4 $l + eps$ \u5904\u76f4\u7ebf\u4e3a $A_l$\uff0c$r - eps$ \u5904\u76f4\u7ebf\u4e3a $A_r$\u3002\n\n- \u82e5 $A_l = A_r$\uff0c\u6839\u636e\u51f8\u6027\u53ef\u77e5\u533a\u95f4\u5185\u6ca1\u6709\u65ad\u70b9\u3002\n- \u5426\u5219\uff0c\u4ee4 $A_l$ \u4e0e $A_r$ \u4ea4\u4e8e $P$\uff0c\u4ee4 $\\lambda_P + eps$ \u5904\u76f4\u7ebf\u4e3a $A_m$\uff0c\n    - \u82e5 $A_m$ \u7b49\u4e8e $A_r$\uff0c\u6839\u636e\u51f8\u6027\u53ef\u77e5\u533a\u95f4\u5185\u4ec5\u6709 $P$ \u4e00\u4e2a\u9876\u70b9\u3002\n    - \u5426\u5219\uff0c\u56e0\u8fdb\u884c\u968f\u673a\u6270\u52a8\uff0c\u6545 $\\lambda_P$ \u51e0\u4e4e\u4e0d\u53ef\u80fd\u4e3a\u9876\u70b9\u6a2a\u5750\u6807\uff0c\u9012\u5f52\u5904\u7406 $(l, \\lambda_P)$ \u548c $(\\lambda_P, r)$ \u5373\u53ef\u3002\n\n\u6574\u4e2a\u8fc7\u7a0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(nD)$\uff0c$D$ \u662f\u5355\u6b21 Dinic \u7684\u590d\u6742\u5ea6\u3002\n\n\u8fdb\u4e00\u6b65\u5730\uff0c\u4f20\u5165\u76f4\u7ebf $A_l, A_r$ \u4f5c\u4e3a $solve$ \u7684\u53c2\u6570\u53ef\u51cf\u5c0f\u5e38\u6570\uff0c\u9012\u5f52\u65f6\u53ea\u9700\u8c03\u7528 $solve(A_l, A_m)$ \u548c $solve(A_m, A_r)$\uff0c\u56e0 $\\lambda_P$ \u51e0\u4e4e\u4e0d\u53ef\u80fd\u4e3a\u9876\u70b9\u6a2a\u5750\u6807\u6545\u53ef\u884c\u3002\n\n#### \u7cbe\u5ea6\u95ee\u9898\n\n\u770b\u4f3c\u5df2\u7ecf\u5927\u529f\u544a\u6210\u4e86\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd8\u6709\u4e0d\u5c11\u7ec6\u8282\u9700\u8981\u8ba8\u8bba\u3002\n\n\u56e0\u9898\u76ee\u8981\u6c42\u7528\u5206\u6570\u8868\u793a\u7684\u7cbe\u786e\u503c\uff0c\u8fd9\u610f\u5473\u7740\u4e0e\u9876\u70b9\u76f8\u5173\u7684\u6240\u6709\u53c2\u6570\u9700\u8981\u7528\u5206\u6570\u800c\u975e\u5c0f\u6570\u8868\u793a\u3002\u4e3a\u6b64\uff0c\u9700\u8981\u624b\u5199\u5206\u6570\u7c7b `fraction` \u53ca\u5176\u56db\u5219\u8fd0\u7b97\u3002\n\n\u7136\u800c\u9898\u76ee\u53ea\u4fdd\u8bc1\u4e86\u6700\u7ec8\u7b54\u6848\u7684\u5206\u6bcd\u4e0d\u8d85\u8fc7 $10 ^ 7$\uff0c\u5982\u679c\u7f51\u7edc\u6d41\u7684\u6d41\u91cf\u4e5f\u7528\u5206\u6570\u8868\u793a\uff0c\u5f88\u6709\u53ef\u80fd\u56e0\u8fd0\u7b97\u65f6\u8868\u793a\u7206\u70b8\u800c\u5f97\u5230\u9519\u8bef\u7ed3\u679c\u3002\u56e0\u6b64\uff0c\u6700\u5927\u6d41\u5168\u8fc7\u7a0b\u9700\u8981\u4f7f\u7528\u6d6e\u70b9\u6570\u8fd0\u7b97\uff0c\u4f46\u8fd4\u56de\u76f4\u7ebf\u7684\u6240\u6709\u53c2\u6570\u5fc5\u987b\u4e3a\u5206\u6570\u3002\n\n\u6ce8\u610f\u5230\u6c42\u548c\u8fc7\u7a0b\u4e2d\u5f53\u524d\u8fb9\u4e0d\u6ee1\u6d41\u65f6\u52a0\u5165\u7684\u5f53\u524d\u8fb9\u6d41\u91cf\u65e0\u6cd5\u8868\u793a\u6210\u5206\u6570\uff0c\u89e3\u51b3\u529e\u6cd5\u4e3a\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\uff0c\u6240\u6709\u672a\u6ee1\u6d41\u7684\u917f\u9152\u70b9\u7684\u6d41\u91cf\u4e4b\u548c\u7b49\u4e8e\u6240\u6709\u4e0e $T$ \u76f8\u8fde\u4e14\u88ab\u5272\u6389\u7684\u8fb9\u7684\u6d41\u91cf\u4e4b\u548c\uff0c\u800c\u540e\u8005\u6d89\u53ca\u5230\u7684\u6240\u6709\u8fb9\u7684\u6d41\u91cf\u7b49\u4e8e\u5bb9\u91cf\uff0c\u5747\u4e3a\u6574\u6570\uff0c\u53ef\u884c\u3002\n\n\u6b64\u5916\uff0c\u5f53\u533a\u95f4\u5185\u4ec5\u6709 $P$ \u4e00\u4e2a\u9876\u70b9\u65f6\uff0c\u6211\u4eec\u5c06 $\\lambda_P$ \u52a0\u4e0a $eps$ \u6c42\u76f4\u7ebf\uff0c\u4f46\u5982\u679c\u8fd9\u4e2a $eps$ \u65e0\u6cd5\u5728\u6700\u5927\u6d41\u8fc7\u7a0b\u4e2d\u4f53\u73b0\uff0c\u5219\u6709\u53ef\u80fd\u6c42\u5f97 $A_m = A_l$\uff0c\u4f7f\u5f97\u4e0d\u65ad\u8c03\u7528 $solve(A_l, A_r)$ \u6b7b\u5faa\u73af\u3002\u6ce8\u610f\u5230 $\\Delta \\lambda$ \u4ea7\u751f\u7684 $\\Delta L_i$ \u6700\u591a\u8870\u51cf\u81f3  $\\frac{\\Delta \\lambda} {2a_i}\\geq \\frac{eps}{6}$\uff0c\u56e0\u6b64\u6700\u5927\u6d41\u7684 $feps$ \u9700\u8981\u5c0f\u4e8e $\\frac {eps} {6}$\u3002 \n\n\u6ce8\u610f\u79ef\u5206\u8fc7\u7a0b\u4e0d\u662f\u666e\u901a\u79ef\u5206\uff0c\u56e0\u4e3a\u7b54\u6848\u4e3a $T$ \u4e0e $y$ \u8f74\u800c\u975e $x$ \u8f74\u56f4\u6210\u7684\u9762\u79ef\u3002\n\n#### \u4ee3\u7801\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(nD)$\uff0c\u7ec6\u8282\u76f8\u5f53\u591a\u3002\u4ee3\u7801\u6709\u90e8\u5206\u7ec6\u8282\u6ce8\u91ca\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\nusing ll = long long;\nbool Mbe;\nconstexpr int N = 200 + 5;\nconstexpr int M = 2e3 + 5;\nconstexpr double eps = 1e-7;\nconstexpr double feps = 1e-8;\nconstexpr int inf = 0x1064822E;\n// \u4e3a\u4ec0\u4e48\u8981\u7ed9\u7f51\u7edc\u6d41\u518d\u8bbe\u4e00\u4e2a feps\uff1f\n// \u7834\u6848\u4e86\uff0c\u6270\u52a8\u7684 eps \u5fc5\u987b\u8981\u5728\u7f51\u7edc\u6d41\u4e0a\u4f53\u73b0\uff0c\u5426\u5219\u4f1a\u65e0\u9650\u9012\u5f52\n// \u9664\u6389\u4e86\u4e00\u4e2a 2a\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u53ea\u8981 eps / feps > 6 \u5e94\u8be5\u90fd\u6ca1\u95ee\u9898\n// \u786e\u5b9e\u662f\u8fd9\u6837\uff0cfeps = 1.6e-8 \u53ef\u4ee5\uff0c\u4f46 1.7e-8 \u5c31\u7206\u70b8\u4e86\uff01\nstruct frac {\n  ll a, b;\n  frac(ll x = 0, ll y = 1) {ll d = __gcd(x, y); a = x / d, b = y / d;}\n  bool operator == (const frac &z) const {return a * z.b == b * z.a;}\n  frac operator + (const frac &z) const {return frac(a * z.b + b * z.a, b * z.b);}\n  frac operator - (const frac &z) const {return frac(a * z.b - b * z.a, b * z.b);}\n  frac operator * (const frac &z) const {return frac(a * z.a, b * z.b);}\n  frac operator / (const frac &z) const {return frac(a * z.b, b * z.a);}\n  double get() {return 1.0 * a / b;}\n  void print() {cout << a << \"/\" << b;}\n} ans;\nstruct flow {\n  int cnt = 1, hd[N], nxt[M << 1], to[M << 1];\n  double limit[M << 1];\n  void clear() {cnt = 1, memset(hd, 0, sizeof(hd));}\n  void add(int u, int v, double w) {\n    nxt[++cnt] = hd[u], hd[u] = cnt, to[cnt] = v, limit[cnt] = w;\n    nxt[++cnt] = hd[v], hd[v] = cnt, to[cnt] = u, limit[cnt] = 0;\n  }\n  int dis[N], cur[N], T;\n  double dfs(int id, double res) {\n    if(id == T) return res;\n    double flow = 0;\n    for(int i = cur[id]; i && res > feps; i = nxt[i]) {\n      cur[id] = i;\n      int it = to[i];\n      double c = min(res, limit[i]);\n      if(dis[id] + 1 == dis[it] && c > feps) {\n        double k = dfs(it, c);\n        flow += k, res -= k, limit[i] -= k, limit[i ^ 1] += k;\n      }\n    }\n    return flow;\n  }\n  void maxflow(int s, int t) {\n    T = t;\n    while(1) {\n      queue<int> q;\n      memset(dis, -1, sizeof(dis));\n      memcpy(cur, hd, sizeof(cur));\n      q.push(s), dis[s] = 0;\n      while(!q.empty()) {\n        int t = q.front();\n        q.pop();\n        for(int i = hd[t]; i; i = nxt[i])\n          if(dis[to[i]] == -1 && limit[i] > feps)\n            dis[to[i]] = dis[t] + 1, q.push(to[i]);\n      }\n      if(dis[t] == -1) return;\n      dfs(s, 1064);\n    }\n  }\n};\nint n, m, t;\nint a[N], b[N], c[N], d[N], e[N][N];\n// \u5f00\u5bfc\uff01\u627e\u5230\u77ac\u65f6\u8d39\u7528 = x \u65f6\u5bf9\u5e94\u6700\u5927\u6d41\u7684\u76f4\u7ebf\nauto dinic(double lambda) {\n  static flow g;\n  g.clear();\n  for(int i = 1; i <= n; i++)\n    if(b[i] < lambda) {\n      if(!a[i]) g.add(0, i, c[i]); // \u7279\u5224 a[i] = 0\n      else g.add(0, i, min(1.0 * c[i], (lambda - b[i]) / 2 / a[i]));\n    }\n  for(int i = 1; i <= n; i++)\n    for(int j = 1; j <= m; j++)\n      if(e[i][j])\n        g.add(i, n + j, inf);\n  for(int i = 1; i <= m; i++) g.add(n + i, t, d[i]);\n  g.maxflow(0, t);\n  frac K, B; // flow = K * lambda + B\n  for(int i = 1; i <= n; i++)\n    if(b[i] < lambda && g.dis[i] == -1) { // s -> i \u4e4b\u95f4\u7684\u8fb9\u88ab\u5272\u6389\n      if(!a[i]) B = B + frac(c[i]);\n      else if(2 * a[i] * c[i] + b[i] < lambda) B = B + frac(c[i]); // \u5f7b\u5e95\u6ee1\u6d41\uff0c\u5bf9\u6700\u5927\u6d41\u4ea7\u751f\u56fa\u5b9a c \u8d21\u732e\n      else K = K + frac(1, 2 * a[i]), B = B - frac(b[i], 2 * a[i]);\n      // \u6ca1\u6709\u5f7b\u5e95\u6ee1\u6d41\uff08\u5728\u56fe\u4e0a\u6ee1\u6d41\uff0c\u4f46\u6ca1\u6709\u6d41\u6ee1\u5b9e\u9645\u9650\u5236\uff09\uff0c\u4ea7\u751f\u76f4\u7ebf (lambda - b) / 2a \u7684\u8d21\u732e\n    }\n  for(int i = 1; i <= m; i++) if(g.dis[n + i] != -1) B = B + frac(d[i]); // == -> !=\n  // n + i -> t \u4e4b\u95f4\u7684\u8fb9\u88ab\u5272\u6389\u4e86\uff0c\u6ee1\u6d41\uff0c\u6700\u5927\u6d41\u8981\u52a0\u4e0a\u8fd9\u4e9b\u8d21\u732e\n  return make_pair(K, B);\n}\nvector<frac> pt;\nvoid solve(auto l, auto r) {\n  if(l == r) return; // \u5982\u679c\u7aef\u70b9\u5904\u4e24\u6761\u76f4\u7ebf\u91cd\u5408\uff0c\u8bf4\u660e\u533a\u95f4\u5185\u6ca1\u6709\u9876\u70b9\n  frac lambda = (r.se - l.se) / (l.fi - r.fi); // \u6c42\u4ea4\u70b9\u6a2a\u5750\u6807\n  auto mid = dinic(lambda.get() + eps); // \u6270\u52a8\u6c42\u89e3\u4ea4\u70b9\u53f3\u4fa7\u7684\u76f4\u7ebf\n  if(mid == r) return pt.push_back(lambda), void(); // \u5982\u679c\u4ea4\u70b9\u53f3\u4fa7\u76f4\u7ebf\u548c\u533a\u95f4\u53f3\u7aef\u76f4\u7ebf\u76f8\u540c\uff0c\u8bf4\u660e lambda \u662f\u552f\u4e00\u9876\u70b9\n  solve(l, mid), solve(mid, r); // \u5426\u5219\u5411\u4e0b\u5206\u6cbb\u5904\u7406\u5b50\u533a\u95f4\n}\nbool Med;\nint main() {\n  fprintf(stderr, \"%.4lf MB\\n\", (&Mbe - &Med) / 1048576.0);\n  #ifdef ALEX_WEI\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n  #endif\n  ios::sync_with_stdio(0);\n  cin >> n >> m, t = n + m + 1;\n  for(int i = 1; i <= n; i++) cin >> a[i] >> b[i] >> c[i];\n  for(int i = 1; i <= m; i++) cin >> d[i];\n  for(int i = 1; i <= n; i++)\n    for(int j = 1; j <= m; j++)\n      cin >> e[i][j];\n  pt.push_back(frac()); // \u539f\u70b9\u641e\u8fdb\u53bb\n  for(int d : {1, 2, 3}) {\n    solve(dinic(d - 1 + eps), dinic(d - eps));\n    pt.push_back(frac(d)); // \u5148\u6c42\u533a\u95f4\u5185\u90e8\u9876\u70b9\uff0c\u518d\u5f3a\u5236 i \u4e3a\u65ad\u70b9\n    // \u65ad\u70b9\u4ea7\u751f\u56e0\u4e3a\u4ece lambda - eps \u5230 lambda + eps\uff0c\u6240\u6709 a[i] = 0\uff0cb[i] = lambda \u7684\u8fb9\u4ece\u96f6\u6d41\u53d8\u6210\u6ee1\u6d41\n  }\n  solve(dinic(3 + eps), dinic(inf));\n  for(int i = 1; i < pt.size(); i++) { // \u4e0d\u8bb8\u5bfc\uff0c\u79ef\u56de\u53bb\uff01\n    auto l = dinic(pt[i].get() - eps), r = dinic(pt[i].get() + eps);\n    ans = ans + pt[i] * (r.se - l.se + (r.fi - l.fi) * pt[i]);\n    // \u5c06\u8df3\u8dc3\u7684\u6d41\u91cf\u4e58\u4ee5\u8d39\u7528\u52a0\u8fdb\u53bb\uff0c\u8fd9\u90e8\u5206\u662f\u6807\u51c6\u77e9\u5f62\u957f\u4e58\u5bbd\uff0c\u53ea\u4f1a\u5728\u65ad\u70b9 1, 2, 3 \u5904\u4ea7\u751f\u8d21\u732e\n    // \u957f\u4e3a\u6a2a\u5750\u6807 pt[i]\uff0c\u5bbd\u4e3a\u7eb5\u5750\u6807\u4e4b\u5dee\uff0c\u5373 pt[i] \u5728\u5de6\u53f3\u4e24\u4fa7\u76f4\u7ebf\u53d6\u503c\u4e4b\u5dee\n    ans = ans + (pt[i - 1] + pt[i]) * (pt[i] - pt[i - 1]) * l.fi * frac(1, 2);\n    // \u68af\u5f62\u9762\u79ef\u516c\u5f0f\uff0cpt[i] + pt[i - 1] \u4e3a\u4e0a\u5e95 + \u4e0b\u5e95\uff0c(pt[i] - pt[i - 1]) * l.fi \u4e3a\u7eb5\u5750\u6807\u4e4b\u5dee\uff0c\u5373\u9ad8\n    // \u6c42\u51fa\u76f4\u7ebf l \u5de6\u4fa7\u4e0e y \u8f74\u56f4\u6210\u7684\u68af\u5f62\u9762\u79ef\n  }\n  cout << dinic(inf).se.get() << \"\\n\";\n  ans.print(), cout << \"\\n\";\n  return cerr << \"Time: \" << 1e3 * clock() / CLOCKS_PER_SEC << \" ms\\n\", 0;\n}\n/*\n2022/7/14\nstart coding at 13:21\nfinish debugging at 14:13\n*/\n```",
        "postTime": 1657780090,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "P3347 [ZJOI2015] \u9189\u718f\u718f\u7684\u5e7b\u60f3\u4e61"
    },
    {
        "content": "\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u90e8\u5206\u5206\u505a\u6cd5\u3002\n\n\u5047\u8bbe $a_i=0$\uff0c\u6211\u4eec\u8fdb\u884c\u8d39\u7528\u6d41\u5efa\u56fe\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u6e90\u70b9\u548c\u5de6\u90e8\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u5e26\u6709\u8d39\u7528\uff0c\u5de6\u90e8\u70b9\u548c\u53f3\u90e8\u70b9\u7684\u8fde\u8fb9\u5747\u4e3a $+\\infty$ \u6ca1\u6709\u8d39\u7528\uff0c\u53f3\u90e8\u70b9\u548c\u6c47\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u6ca1\u6709\u8d39\u7528\u3002\u76f4\u63a5\u8dd1\u8d39\u7528\u6d41\u5373\u53ef\u3002\n\n\u5f53 $a_i\\not=0$\uff0c\u8d39\u7528\u53d8\u6210\u4e86\u4e00\u4e2a\u4e8c\u6b21\u51fd\u6570\u3002\u4f46\u662f\u597d\u5728\u8fd9\u8fd8\u662f\u51f8\u7684\uff0c\u542f\u53d1\u6211\u4eec\u6a21\u4eff\u8d39\u7528\u6d41\u7b97\u6cd5\u3002\u89c2\u5bdf\u4e00\u4e0b\u6027\u8d28\uff1a\n\n1. \u4e00\u6761\u589e\u5e7f\u8def\u7684\u8d39\u7528\u5b8c\u5168\u7531\u6e90\u70b9\u5230\u5de6\u90e8\u70b9\u4e4b\u95f4\u8fde\u7684\u8fd9\u6761\u8fb9\u786e\u5b9a\u3002\n2. \u4e00\u4e2a\u5de6\u90e8\u70b9\u5931\u53bb\u4f5c\u7528\uff08\u5f53\u6e90\u70b9\u5230\u5b83\u7684\u8fb9\u6d41\u6ee1\u6216\u8005\u5b83\u6d41\u5411\u6c47\u70b9\u7684\u6240\u6709\u8def\u90fd\u88ab\u5835\u6b7b\u4e86\uff09\u540e\uff0c\u5b83\u6c38\u8fdc\u90fd\u5931\u53bb\u4f5c\u7528\u4e86\uff0c\u4e0d\u53ef\u80fd\u6062\u590d\u3002\n\n\u6240\u4ee5\u6211\u4eec\u4ece\u6240\u6709\u8fd8\u672a\u5931\u53bb\u4f5c\u7528\u7684\u5de6\u90e8\u70b9\u4e2d\uff0c\u9009\u62e9\u4e00\u4e2a $\\frac {d\\ cost}{d\\ flow}$ \u6700\u5c0f\u7684\u8fdb\u884c\u589e\u5e7f\uff08\u4e5f\u5c31\u662f\u9009\u62e9 $2a_i\\cdot x_i+b_i)$ \u6700\u5c0f\u7684\uff09\u3002\n\n\u4f46\u662f\u6ce8\u610f\u5230\u4e00\u4e9b\u95ee\u9898\uff1a\u5bfc\u6570\u968f\u7740\u6d41\u7684\u589e\u52a0\u800c\u589e\u52a0\uff0c\u5f88\u53ef\u80fd\u6d41\u7740\u6d41\u7740\u5b83\u5c31\u4e0d\u662f\u6700\u4f18\u7684\u4e86\uff1b\u6216\u8005\u6709\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\u6700\u4f18\u7684\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u9009\u54ea\u4e2a\u53bb\u6d41\u3002\n\n\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff1a\n\n1. \u5f53\u524d\u5bfc\u6570\u6700\u5c0f\u7684\u5de6\u90e8\u70b9\u4e2d\u5b58\u5728 $a_i=0$ \u7684\uff1a\u76f4\u63a5\u8bd5\u56fe\u5c06\u5176\u6d41\u6ee1\uff0c\u7136\u540e\u5220\u6389\u5b83\u3002\n2. \u5426\u5219\uff0c\u8ba9\u8fd9\u4e9b\u5de6\u90e8\u70b9\u540c\u65f6\u6d41\u4e00\u4e2a\u6d41\u91cf $x$\uff0c\u5176\u4e2d $x$ \u662f\u4e00\u4e2a\u5408\u7406\u7684\u6b65\u957f\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u7b2c 2 \u7c7b\u60c5\u51b5\u975e\u5e38\u7684\u96be\u7f20\uff0c\u56e0\u4e3a\u5b83\u8981\u6ee1\u8db3\u6d41\u4e86\u8fd9\u4e2a\u6d41\u91cf\u540e\u8fd9\u4e9b\u70b9\u7684\u5bfc\u6570\u4e0d\u8d85\u8fc7\u5176\u5b83\u5de6\u90e8\u70b9\u7684\u5bfc\u6570\u7684\u6700\u5c0f\u503c\uff0c\u4e14\u8981\u6ee1\u8db3\u8fd9\u4e2a\u6d41\u91cf\u662f\u80fd\u6d41\u7684\uff0c\u4e14\u5b83\u4eec\u4e4b\u95f4\u5177\u4f53\u6bcf\u4e2a\u6d41\u591a\u5c11\u5f88\u96be\u77e5\u9053\u2026\u2026\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u6bd4\u8f83\u597d\u7684\u964d\u4f4e\u95ee\u9898\u590d\u6742\u6027\u7684\u65b9\u6cd5\u3002\n\n\u7c7b\u4f3c NOI \u9a91\u884c\u5ddd\u85cf\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u4e8c\u5206\u5bfc\u6570\uff0c\u8868\u793a\u6700\u4f18\u5de6\u90e8\u70b9\u6d41\u4e86\u4e00\u4e2a\u6d41\u91cf\u540e\u5b83\u4eec\u7684\u5bfc\u6570\u4e3a $mid$\uff0c`check` \u65f6\u5c31\u5224\u65ad\u8fd9\u4e2a\u5bfc\u6570\u662f\u5426\u8d85\u8fc7\u4e86\u5176\u5b83\u5de6\u90e8\u70b9\u7684\u5bfc\u6570\uff0c\u4ee5\u53ca\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5408\u6cd5\u7684\u6d41\u7684\u65b9\u6848\uff0c\u76f4\u63a5\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u8dd1 `dinic` \u5373\u53ef\u3002\n\n\u7531\u4e8e\u8f93\u51fa\u5206\u6570\u7684\u95ee\u9898\uff0c\u6211\u4eec\u6539\u5728 `Stern Brocot Tree` \u4e0a\u4e8c\u5206\uff0c\u7531\u4e8e\u5176\u7ecf\u5178\u6027\u8d28\uff0c\u6240\u4ee5\u53ef\u4ee5\u505a\u5230 $O(\\log^2(U)$ \u7684\u4e8c\u5206\uff0c\u603b\u7684\u590d\u6742\u5ea6\u4fbf\u662f $O(\\log^2(U)\\cdot nm\\cdot n)$\uff08\u56e0\u4e3a\u51f8\u58f3\u5927\u5c0f\u662f $O(n)$ \u7684\uff09\u3002\n\n\u8fc7\u4e0d\u53bb\u662f\u56e0\u4e3a\u4e2d\u95f4\u8868\u793a\u81a8\u80c0\u7684\u95ee\u9898\uff0c\u5f00 `__int128` \u90fd\u6491\u4e0d\u4f4f\uff0c\u4f30\u8ba1\u5199\u9ad8\u7cbe\u4e5f\u6ca1\u7528\uff08\uff09",
        "postTime": 1650721706,
        "uid": 148438,
        "name": "Linshey",
        "ccfLevel": 9,
        "title": "\u4e00\u4e2a\u90e8\u5206\u5206\u505a\u6cd5"
    }
]