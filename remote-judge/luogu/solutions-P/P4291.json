[
    {
        "content": "### Solution\uff1a\n$\\quad\\;\\;$(\u65e2\u7136\u6ca1\u6709\u9898\u89e3\uff0c\u90a3\u6211pbds\u6765\u6c34\u53d1\u9898\u89e3\u54af\uff01)\n\n\u3000\u3000\u672c\u9898\u7eaf\u6a21\u62df~~\u5e73\u8861\u6811+hash~~\u3002\n\n\u3000\u3000\u8fd9\u79cd\u52a8\u6001\u52a0\u70b9\u3001\u6539\u503c\u3001\u67e5\u8be2\u6392\u540d\u548ck\u5927\u503c\u7684\u95ee\u9898\uff0c\u76f4\u63a5\u60f3\u5230\u5e73\u8861\u6811\u3002\n\n\u3000\u3000\u9898\u76ee\u4e2d\u9700\u8981\u7528\u5230\u7684\u4fe1\u606f\u6709\uff1a\u5b57\u7b26\u4e32\u3001\u5f97\u5206\u3001\u65f6\u523b\uff0c\u5176\u4e2d\u65f6\u523b\u5c31\u662f\u8be5\u5b57\u7b26\u4e32\u5f97\u5230\u5f53\u524d\u5206\u6570\u662f\u7b2c\u51e0\u6b21\u64cd\u4f5c\uff0c\u7ef4\u62a4\u65f6\u523b\u662f\u56e0\u4e3a\u5bf9\u4e8e\u5f97\u5206\u76f8\u540c\u7684\u5b57\u7b26\u4e32\uff0c\u65f6\u523b\u5c0f\u7684\u8981\u6392\u5728\u524d\u9762\u3002\n\n\u3000\u3000\u6211\u4eec\u7528~~\u4e00\u68f5Splay\u6765\u7ef4\u62a4~~pbds\u4e2d\u7684rb_tree\u6765\u7ef4\u62a4\u3002\n\n\u3000\u3000\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u628a\u5176\u548c\u63d2\u5165\u7684\u65f6\u523b\u8fdb\u884cmap\u6620\u5c04\uff0c\u7136\u540e\u6bcf\u4e2a\u8282\u70b9\u4ee5\u5206\u6570\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u3001\u65f6\u523b\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u6784\u5efa\u5e73\u8861\u6811\u3002\u5bf9\u4e8e\u6bcf\u79cd\u64cd\u4f5c\uff1a1\u3001\u63d2\u5165\u8282\u70b9\uff0c\u76f4\u63a5\u53ef\u4ee5insert ; 2\u3001\u6539\u53d8\u8282\u70b9\u5206\u6570\u548c\u65f6\u523b\uff0c\u6211\u4eec\u76f4\u63a5\u6539\u4e3a\u5220\u9664\u8fd9\u4e2a\u8282\u70b9\uff0c\u5e76\u52a0\u5165\u65b0\u7684\u503c\u7684\u8282\u70b9 ; 3\u3001\u67e5\u8be2\u6392\u540d\uff0c\u6211\u4eec\u6709order_of_key ; 4\u3001\u67e5\u8be2\u7b2ck\u5927\u503c\uff0c\u6211\u4eec\u6709find_by_order\u3002\n\n\u3000\u3000\u53ea\u9700\u8981\u6a21\u62df\u5c31\u597d\u4e86\uff0c\u51cf\u5c11\u4e86\u5f88\u591a\u5197\u4f59\u7684\u7801\u519c\u64cd\u4f5c\uff08pbds\u5927\u6cd5\u597d\uff01\uff09\n\n$\\quad\\;\\;$\u6b22\u8fce\u6765\u8e29\u535a\u5ba2\uff1a[five20](http://www.cnblogs.com/five20/p/9690055.html)\uff08\u849f\u84bb\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\uff0c\u4e07\u5206\u611f\u8c22\uff01\uff5e\uff09\n### \u4ee3\u7801\uff1a\n```\n    /*Code by 520 -- 9.21*/\n    #include<bits/stdc++.h>\n    #include<ext/pb_ds/assoc_container.hpp>\n    #include<ext/pb_ds/tree_policy.hpp>\n    #define il inline\n    #define ll long long\n    #define RE register\n    #define For(i,a,b) for(RE int (i)=(a);(i)<=(b);(i)++)\n    #define Bor(i,a,b) for(RE int (i)=(b);(i)>=(a);(i)--)\n    using namespace std;\n    using namespace __gnu_pbds;\n    const int N=500005;\n    int n,val[N],cnt,tot;\n    map<string,int> mp;\n    string ss[N];\n    struct node{\n        int v,id;\n        bool operator < (const node &x) const {return v==x.v?id<x.id:v>x.v;}\n    };\n    tree<node,null_type,less<node>,rb_tree_tag,tree_order_statistics_node_update> T;\n    il bool isdig(char x){return x>='0'&&x<='9';}\n    int main(){\n        ios::sync_with_stdio(0);\n        cin>>n;char c;string s;int x,tp;\n        while(n--){\n            cin>>c>>s;\n            if(c=='+') {\n                if(mp[s]) {\n                    tp=mp[s],T.erase(node{val[tp],tp});tot--;\n                }\n                mp[s]=++cnt,cin>>val[cnt],T.insert(node{val[cnt],cnt});tot++;\n                ss[cnt]=s;\n            }\n            else if(c=='?'&&!isdig(s[0])) {\n                x=mp[s];cout<<T.order_of_key(node{val[x],x})+1<<endl;\n            }\n            else {\n                x=0;\n                For(i,0,s.size()-1) x=(x<<3)+(x<<1)+(s[i]^48);\n                tp=min(tot,x+9);\n                For(i,x-1,tp-1) cout<<ss[T.find_by_order(i)->id]<<' ';cout<<endl;\n            }\n        }\n        return 0;\n    }    \n```",
        "postTime": 1537597734,
        "uid": 44000,
        "name": "\u6d45\u8272\u8c03",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4291 \u3010[HAOI2008]\u6392\u540d\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u611f\u89c9\u597d\u4e45\u6ca1\u6709\u53d1\u8fc7\u9898\u89e3\u4e86\u989d\uff0c\u5ffd\u7136\u60f3\u5230\u987a\u624b\u53d1\u53d1\u3002\n\n\u4e3a\u5565\u6ce5\u840c\u90fd\u8fd9\u4e48\u559c\u6b22\u770b\u6211\u5199$Splay$(\u96fe\n\n\u90a3\u5c31\u518d\u6765\u4e00\u9053$Splay$\u6a21\u677f\u9898\u5427\u3002\u7136\u800c\u8fd9\u9898\u6570\u636e\u5f88\u9b3c\uff0c\u6bcf\u6b21\u53ea\u8ddf\u7740\u64cd\u4f5c$Splay$\u662f\u53ef\u4ee5\u5361\u7684\uff0c\u4e5f\u5f88\u5bb9\u6613\u89e3\u51b3\uff0c\u6bcf\u505a\u4e2a\u51e0\u767e\u6b21\u64cd\u4f5c\u5c31\u968f\u673a\u65cb\u8f6c\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<map>\nusing namespace std;\n#define ll long long\n#define ull unsigned long long\n#define MAX 250500\n#define ls (t[x].ch[0])\n#define rs (t[x].ch[1])\n#define inf 2000000000\nconst int base=233;\ninline int read()\n{\n    int x=0;bool t=false;char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-')t=true,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-48,ch=getchar();\n    return t?-x:x;\n}\nmap<ull,int> M;\nchar name[MAX][20],ch[20];\nint len[MAX];\nstruct Node\n{\n    int ch[2],ff;\n    int v,size;\n}t[MAX];\nint rt,n,tot;\nvoid pushup(int x){t[x].size=t[ls].size+t[rs].size+1;}\nvoid rotate(int x)\n{\n    int y=t[x].ff,z=t[y].ff;\n    int k=t[y].ch[1]==x;\n    if(z)t[z].ch[t[z].ch[1]==y]=x;t[x].ff=z;\n    t[y].ch[k]=t[x].ch[k^1];t[t[x].ch[k^1]].ff=y;\n    t[x].ch[k^1]=y;t[y].ff=x;\n    pushup(y);pushup(x);\n}\nvoid Splay(int x,int goal)\n{\n    while(t[x].ff!=goal)\n    {\n        int y=t[x].ff,z=t[y].ff;\n        if(z!=goal)\n            (t[y].ch[0]==x)^(t[z].ch[0]==y)?rotate(x):rotate(y);\n        rotate(x);\n    }\n    if(!goal)rt=x;\n}\nvoid insert(int u,int id)\n{\n    int x=rt;\n    while(233)\n    {\n        if(!t[x].ch[u>t[x].v])\n        {\n            t[id].ff=x;t[id].v=u;t[id].size=1;\n            t[x].ch[u>t[x].v]=id;\n            Splay(id,0);\n            break;\n        }\n        else x=t[x].ch[u>t[x].v];\n    }\n}\nint Kth(int K)\n{\n    int x=rt;\n    while(233)\n    {\n        if(t[ls].size+1==K)return x;\n        else if(t[ls].size>=K)x=ls;\n        else K-=t[ls].size+1,x=rs;\n    }\n}\nvoid Del(int x)\n{\n    Splay(x,0);int rk=t[ls].size;\n    int l=Kth(rk),r=Kth(rk+2);\n    Splay(l,0);Splay(r,l);t[r].ch[0]=0;\n    pushup(r);pushup(l);\n    t[x].ff=t[x].size=t[x].v=0;\n}\nint getnum(char *s)\n{\n    int l=strlen(s+1),ret=0;\n    for(int i=1;i<=l;++i)ret=ret*10+s[i]-48;\n    return ret;\n}\null gethash(char *s)\n{\n    int l=strlen(s+1);ull h=0;\n    for(int i=1;i<=l;++i)h=h*base+s[i];\n    return h;\n}\nvoid Output(int x,int &sum)\n{\n    if(sum>=10)return;\n    if(rs)Output(rs,sum);\n    if(sum>=10)return;\n    if(x>2)\n    {\n        ++sum;\n        for(int i=1;i<len[x];++i)\n            putchar(name[x][i]);\n        putchar(' ');\n    }\n    if(ls)Output(ls,sum);\n}\nint main()\n{\n    n=read();\n    insert(-inf,++tot);insert(inf,++tot);\n    while(n--)\n    {\n        scanf(\"%s\",ch);\n        if(ch[0]=='+')\n        {\n            ull h=gethash(ch);int sco=read(),id;\n            if(M[h])id=M[h],Del(id),insert(sco,id);\n            else\n            {\n                insert(sco,M[h]=id=++tot);\n                for(int i=1,l=strlen(ch);i<l;++i)name[tot][i]=ch[i];\n                len[tot]=strlen(ch);\n            }\n        }\n        else if(ch[1]>='0'&&ch[1]<='9')\n        {\n            int rk=getnum(ch);\n            int l=Kth(tot-rk+1);\n            Splay(l,0);int sum=0;\n            Output(t[l].ch[0],sum);puts(\"\");\n        }\n        else\n        {\n            ull h=gethash(ch);\n            int x=M[h];Splay(x,0);\n            printf(\"%d\\n\",t[rs].size);\n        }\n        if(n%200==0)Splay(rand()%tot+1,0);\n    }\n    return 0;\n}\n```",
        "postTime": 1538535049,
        "uid": 21283,
        "name": "yybyyb",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4291 \u3010[HAOI2008]\u6392\u540d\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u5927\u5bb6\u597d\uff0c\u8fd9\u9898\u4e00\u770b\u5c31\u662f\u5e73\u8861\u6811\u7684\u88f8\u9898\uff0c\u4f46\u662f\u6211\u559c\u6b22\u5199\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u6211\u5c31\u7528\u7ebf\u6bb5\u6811\u8fc7\u4e86\u6b64\u9898\n\n\u5c06\u6240\u6709\u67e5\u8be2\u6309\u5206\u6570\u548c\u63d2\u5165\u7684\u65f6\u95f4\u70b9\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u6bcf\u4e00\u4e2a\u79bb\u6563\u5316\u7684\u503c\u5206\u914d\u4e00\u4e2a\u5355\u72ec\u7684\u53f6\u5b50\u7ed3\u70b9\uff0c\u7136\u540e\u6309\u64cd\u4f5c\u987a\u5e8f\u8fdb\u884c\u63d2\u5165\u5220\u9664\u548c\u67e5\u8be2\u64cd\u4f5c\u5373\u53ef\uff0c\u67e5\u8be2\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e00\u6837\u7684\u67e5\u8be2\u65b9\u5f0f\uff0c\u63d2\u5165\u548c\u5220\u9664\u5c31\u662f\u666e\u901a\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u3002\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=3e5+5;\nmap<string,int>mp;\nstruct node\n{\n    char c;\n    string s;\n    int x,id,p,hs,hsname;\n    bool operator<(const node&o)const\n    {\n        if(x==o.x) return id<o.id;\n        return x>o.x;\n    }\n}opt[N];\nint n,m,f[N],p[N],t[N<<2];\nvoid fix(int l,int r,int k,int x,int v)\n{\n    if(l==r)\n    {t[k]=v;return;}\n    int m=l+r>>1;\n    if(x<=m) fix(l,m,k<<1,x,v);\n    else fix(m+1,r,k<<1|1,x,v);\n    t[k]=t[k<<1]+t[k<<1|1];\n}\nint query(int l,int r,int k,int x)\n{\n    if(l==r) return l;\n    int m=l+r>>1;\n    if(x<=t[k<<1]) return query(l,m,k<<1,x);\n    return query(m+1,r,k<<1|1,x-t[k<<1]);\n}\nint query(int l,int r,int k,int x,int val)\n{\n    if(l==r) return val+1;\n    int m=l+r>>1;\n    if(x>m) return query(m+1,r,k<<1|1,x,val+t[k<<1]);\n    return query(l,m,k<<1,x,val);\n}\nint main()\n{\n    cin.tie(0);\n    cout.tie(0);\n    cin>>m;\n    for(int i=1;i<=m;i++)\n    {\n        cin>>opt[i].c>>opt[i].s;\n        if(opt[i].c!='+') opt[i].x=-1;\n        else cin>>opt[i].x;\n        opt[i].id=i;\n    }\n    sort(opt+1,opt+1+m);\n    for(int i=1;i<=m;i++)\n    {\n        if(opt[i].s[0]>'9')\n        {\n            int k=mp[opt[i].s];\n            if(k) opt[i].hsname=k;\n            else mp[opt[i].s]=opt[i].hsname=i;\n        }\n        opt[i].hs=i;if(opt[i].x!=-1) n=i;\n        p[opt[i].id]=i;\n    }\n    for(int j=1;j<=m;j++)\n    {\n        int i=p[j];\n        if(opt[i].c=='+')\n        {\n            if(f[opt[i].hsname])\n                fix(1,n,1,f[opt[i].hsname],0);\n            f[opt[i].hsname]=opt[i].hs;\n            fix(1,n,1,opt[i].hs,1);\n        }\n        else if(opt[i].s[0]>='0'&&opt[i].s[0]<='9')\n        {\n            int x=0;\n            for(int k=0;k<opt[i].s.size();k++)\n                x=(x<<1)+(x<<3)+opt[i].s[k]-'0';\n            for(int i=1;i<=10&&x<=t[1];i++,x++)\n                cout<<opt[query(1,n,1,x)].s<<' ';\n            cout<<endl;\n        }\n        else  printf(\"%d\\n\",query(1,n,1,f[opt[i].hsname],0));\n    }\n}\n```\n",
        "postTime": 1564040806,
        "uid": 202208,
        "name": "Huah",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4291 \u3010[HAOI2008]\u6392\u540d\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u5e73\u8861\u6811\u597d\u9898\uff0c\u672c\u4eba\u4f7f\u7528 fhq\u3002  \n\u89c2\u5bdf\u672c\u9898\uff0c\u53d1\u73b0\u672c\u9898\u4e0e\u4e00\u822c\u7684 fhq \u9898\u76ee\u6709\u4e9b\u8bb8\u4e0d\u540c\uff1a\n - \u9700\u8981\u652f\u6301\u6309\u6392\u540d\u5206\u88c2\u6216\u8005\u6309\u6743\u503c\u5206\u88c2\uff0c\u5206\u522b\u5b9e\u73b0\u5373\u53ef\uff1b\n - \u5206\u6570\u76f8\u540c\u6309\u65f6\u95f4\u6392\u5e8f\uff0c\u53ef\u4ee5\u53cc\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u4f46\u7b14\u8005\u4f7f\u7528\u4e86\u6309\u7167\uff08\u5206\u6570 $\\times260000+$ \u65f6\u95f4\uff08\u65f6\u95f4\u4e3a\u5012\u5e8f\uff09\uff09\u4f5c\u4e3a\u8282\u70b9\u7684\u6743\u503c\uff0c\u6392\u5e8f\u8d77\u6765\u66f4\u65b9\u4fbf~~\u5176\u5b9e\u672c\u8d28\u8fd8\u662f\u53cc\u5173\u952e\u5b57\u6392\u5e8f~~\u3002\n\n\u63a5\u4e0b\u6765\u5206\u6790\u9898\u76ee\u6240\u7ed9\u7684\u64cd\u4f5c\u3002\n\n## \u4e0a\u4f20\u5206\u6570\n\n\u6211\u4eec\u7ed9\u6bcf\u4e2a\u4eba\u7f16\u53f7\uff0c\u5982\u679c\u8fd9\u4e2a\u540d\u5b57\u4ee5\u524d\u6ca1\u6709\u88ab\u7f16\u8fc7\u53f7\uff0c\u5c31\u7f16\u4e00\u4e2a\u53f7\uff0c\u5e76\u628a\u6743\u503c\u6254\u8fdb fhq \u4e2d\uff1b\u5982\u679c\u8fd9\u4e2a\u540d\u5b57\u5df2\u7ecf\u7f16\u8fc7\u53f7\u4e86\uff0c\u5c31\u628a\u65e7\u7684\u6743\u503c\u5220\u9664\uff0c\u66f4\u65b0\u6743\u503c\uff08\u5916\u90e8\u6570\u7ec4\u8bb0\u5f55\uff09\uff0c\u5e76\u5c06\u65b0\u6743\u503c\u6254\u8fdb fhq \u4e2d\u3002\n\n## \u67e5\u8be2\u6392\u540d\n\n\u5bf9\u4e8e\u8f93\u5165\u7ed9\u5b9a\u7684\u540d\u5b57\uff0c\u5148\u67e5\u9605\u5176\u7f16\u53f7\uff0c\u518d\u7528\u5916\u90e8\u6570\u7ec4\u67e5\u4ed6\u7684\u6743\u503c\uff0c\u5c06 fhq \u6309\u6743\u503c\u5206\u88c2\uff0c\u5f97\u5230\u4ed6\u7684\u6392\u540d\u3002\n\n## \u67e5\u8be2\u540d\u5b57\n\n\u9996\u5148\u6309\u6392\u540d\u5206\u88c2\uff0c\u7531\u4e8e\u7b14\u8005\u7684 fhq \u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\uff0c\u6545\u9700\u8981\u5148\u5c06\u6392\u540d\u53d6\u4e2a\u53cd\u3002  \n\u4e4b\u540e\u5c31\u53d8\u6210\u4e86\u5728\u4e00\u68f5\u5b50\u6811\u4e2d\u67e5\u8be2\u6392\u540d\u4e3a $1\\sim\\min(10,size)$ \u7684\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u5176\u4e2d $size$ \u4e3a\u5b50\u6811\u5927\u5c0f\u3002  \n\u7531\u4e8e\u7b14\u8005\u4e0d\u662f\u5f88\u806a\u660e\uff0c\u91c7\u7528\u4e86 `for` \u5faa\u73af\u52a0\u66b4\u529b\u5206\u88c2\u5408\u5e76\u7684\u65b9\u6cd5\uff0c\u5e38\u6570\u5de8\u5927~~\u5dee\u70b9\u8fc7\u4e0d\u53bb~~\u3002  \n\u5177\u4f53\u5730\uff0c\u82e5\u67e5\u8be2\u6392\u540d\u4e3a $i$ \u7684\u8282\u70b9\u7684\u6743\u503c\uff0c\u5219\u5c06 $i$ \u4f5c\u4e3a\u5173\u952e\u5b57\u6309\u6392\u540d\u5206\u88c2\uff0c\u518d\u5728\u5de6\u5b50\u6811\u4e2d\u5c06 $i-1$ \u4f5c\u4e3a\u5173\u952e\u5b57\u6309\u6392\u540d\u5206\u88c2\uff0c\u6ce8\u610f\u5982\u679c\u67e5\u8be2\u5230\u4e3a\u7a7a\u5c31\u53ca\u65f6\u9000\u51fa\uff0c\u9632\u6b62 RE\u3002  \n\n## code\n\ntrick\uff1a\u5b57\u7b26\u4e32\u5904\u7406\u63a8\u8350\u7528 string\uff0c\u7528\u8d77\u6765\u5f88\u65b9\u4fbf\uff0c\u4f46\u5b83\u53ea\u80fd cin \u548c cout\uff0c\u6b64\u65f6\u53ef\u4ee5\u5173\u95ed\u540c\u6b65\u6d41**\u548c\u5c06 endl \u6539\u4e3a \\`\\n\\`**\u3002\uff08\u5b9e\u6d4b\u80fd\u5feb\u4ebf\u500d\uff0c\u5b66\u6821 OJ \u8fc7\u4e0d\u53bb\u5c31\u662f\u8fd9\u6837\u5361\u8fc7\u53bb\u7684\uff09  \n\u5173\u95ed\u540c\u6b65\u6d41\u7684\u65b9\u6cd5\uff1a\n\n```cpp\nios::sync_with_stdio (0); cin.tie (0); cout.tie (0);\n```\n\n\u4f46\u9700\u6ce8\u610f\u4e4b\u540e\u53ea\u80fd cin \u548c cout\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u51fa\u4e00\u4e9b\u795e\u5947\u7684\u95ee\u9898\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define fq(i,a,b) for (int i = (a); i <= (b); i++)\n#define fnq(i,a,b) for (int i = (a); i < (b); i++)\n#define nfq(i,a,b) for (int i = (a); i >= (b); i--)\n#define nfnq(i,a,b) for (int i = (a); i > (b); i--)\n#define fqs(i,a,b,c) for (int i = (a); i <= (b); i += (c))\n#define fnqs(i,a,b,c) for (int i = (a); i < (b); i += (c))\n#define nfqs(i,a,b,c) for (int i = (a); i >= (b); i -= (c))\n#define nfnqs(i,a,b,c) for (int i = (a); i > (b); i -= (c))\n#define elif else if\nusing namespace std;\n\n#define int long long\n\n//#define GRAPH\n//const int EDGES = -1;\n//const int VERTEXES = -1;\n////# define EDGE_W\n////typedef int W_TYPE;\n\n//#define COMPLEX\n\ninline int rd () {\n\tint f = 1;\n\tchar ch = getchar ();\n\twhile (!isdigit (ch)) (ch == '-' ? (f = -1) : 0), ch = getchar ();\n\tint num = 0;\n\twhile (isdigit (ch)) num = num * 10 + ch - '0', ch = getchar ();\n\treturn num * f;\n}\n#define d rd ()\n\ninline int rd (const int modp) {\n\tint f = 1;\n\tchar ch = getchar ();\n\twhile (!isdigit (ch)) (ch == '-' ? (f = -1) : 0), ch = getchar ();\n\tint num = 0;\n\twhile (isdigit (ch)) num = (num * 10 + ch - '0') % modp, ch = getchar ();\n\treturn (num * f % modp + modp) % modp;\n}\n\n#ifdef GRAPH\nstruct Edge {\n\tint v, nxt;\n# ifdef EDGE_W\n\tW_TYPE w;\n# endif\n\tEdge () {}\n# ifdef EDGE_W\n\tEdge (int _v, W_TYPE _w, int _nxt) {v = _v, w = _w, nxt = _nxt;}\n# else\n\tEdge (int _v, int _nxt) {v = _v, nxt = _nxt;}\n# endif\n} edge[EDGES];\nint head[VERTEXES], ecnt;\n# ifdef EDGE_W\nvoid addedge (int u, int v, W_TYPE w) {edge[++ecnt] = Edge (v, w, head[u]); head[u] = ecnt;}\n#  define fe(u) for (int i = head[u], v, w; v = edge[i].v, w = edge[i].w, i; i = edge[i].nxt)\n# else\nvoid addedge (int u, int v) {edge[++ecnt] = Edge (v, head[u]); head[u] = ecnt;}\n#  define fe(u) for (int i = head[u], v; v = edge[i].v, i; i = edge[i].nxt)\n# endif\nvoid init () {memset (head, 0, sizeof head); ecnt = 0;}\n#endif\n\n#ifdef COMPLEX\nstruct cpx {\n\tdouble a, b;\n\tcpx () {a = 0, b = 0;}\n\tcpx (double _a) {a = _a, b = 0;}\n\tcpx (double _a, double _b) {a = _a, b = _b;}\n\tfriend cpx operator + (cpx a, cpx b) {return cpx (a.a + b.a, a.b + b.b);}\n\tfriend cpx operator - (cpx a, cpx b) {return cpx (a.a - b.a, a.b - b.b);}\n\tfriend cpx operator * (cpx a, cpx b) {return cpx (a.a * b.a - a.b * b.b, a.b * b.a + a.a * b.b);}\n\tfriend cpx operator / (cpx a, cpx b) {return cpx ((a.a * b.a + a.b * b.b) / (b.b * b.b + b.a * b.a), (a.b * b.a - a.a * b.b) / (b.b * b.b + b.a * b.a));}\n\tfriend cpx operator += (cpx &a, cpx b) {return a = a + b;}\n\tfriend cpx operator -= (cpx &a, cpx b) {return a = a - b;}\n\tfriend cpx operator *= (cpx &a, cpx b) {return a = a * b;}\n\tfriend cpx operator /= (cpx &a, cpx b) {return a = a / b;}\n};\n#endif\n// \u4ee5\u4e0a\u5747\u4e3a\u7801\u5934\uff0c\u4ee5\u4e0b\u4e3a\u4e3b\u8981\u7a0b\u5e8f \nconst int maxn = 300300;\nstruct node {\n\tint l, r, pri, sz, key, id;\n\tnode () {}\n\tnode (int k, int i) {l = r = 0; sz = 1; key = k; id = i; pri = rand ();}\n} tree[maxn]; int cnt;\n#define sz(p) tree[p].sz\n#define l(p) tree[p].l\n#define r(p) tree[p].r\n#define pri(p) tree[p].pri\n#define key(p) tree[p].key\n//\u5f00\u59345\u4e2a\u5b8f\uff0c\u4ee3\u7801\u77ed\u4e00\u500d \nvoid push_up (int p) {sz (p) = sz (l (p)) + sz (r (p)) + 1;}\npair <int, int> split (int p, int k) {//\u6309\u6743\u503c\u5206\u88c2\uff0c<k\u653e\u5de6\u5b50\u6811\uff0c>=k\u653e\u53f3\u5b50\u6811 \n\tif (!p) return make_pair (0, 0);\n\tif (k <= key (p)) {\n\t\tpair <int, int> q = split (l (p), k);\n\t\tl (p) = q.second;\n\t\tpush_up (p);\n\t\treturn make_pair (q.first, p);\n\t} else {\n\t\tpair <int, int> q = split (r (p), k);\n\t\tr (p) = q.first;\n\t\tpush_up (p);\n\t\treturn make_pair (p, q.second);\n\t}\n}\npair <int, int> splitt (int p, int k) {//\u6309\u6392\u540d\u5206\u88c2\uff0c<=k\u653e\u5de6\u5b50\u6811\uff0c>k\u653e\u53f3\u5b50\u6811 \n\tif (!k) return make_pair (0, p);\n\tif (!p) make_pair (0, 0);\n\tif (k <= sz (l (p))) {\n\t\tpair <int, int> q = splitt (l (p), k);\n\t\tl (p) = q.second; push_up (p);\n\t\treturn make_pair (q.first, p);\n\t} elif (k == sz (l (p)) + 1) {\n\t\tint rr = r (p);\n\t\tr (p) = 0; push_up (p);\n\t\treturn make_pair (p, rr);\n\t} else {\n\t\tpair <int, int> q = splitt (r (p), k - sz (l (p)) - 1);\n\t\tr (p) = q.first; push_up (p);\n\t\treturn make_pair (p, q.second);\n\t}\n}\nint merge (int x, int y) {//\u5408\u5e76 \n\tif (!x || !y) return x | y;\n\tif (pri (x) > pri (y)) {\n\t\tr (x) = merge (r (x), y);\n\t\tpush_up (x);\n\t\treturn x;\n\t} else {\n\t\tl (y) = merge (x, l (y));\n\t\tpush_up (y);\n\t\treturn y;\n\t}\n}\nint addnode (int id, int k) {tree[++cnt] = node (id, k); return cnt;}\nint root;\nvoid insert (int score, int id) {//\u63d2\u5165 \n\tpair <int, int> q = split (root, score);\n\troot = merge (q.first, merge (addnode (score, id), q.second));\n}\nvoid erase (int score) {//\u5220\u9664 \n\tpair <int, int> q = split (root, score);\n\tpair <int, int> r = split (q.second, score + 1);\n\troot = merge (q.first, r.second);\n}\nmap <string, int> mp; string mmp[maxn]; int ccnt; int sc[maxn];\nconst int shift = 260000;//\u4e58\u4ee5\u4e00\u4e2a\u5f88\u5927\u7684\u6570 \nstring s;\nsigned main () {\n\tios::sync_with_stdio (0); cin.tie (0); cout.tie (0);//\u5173\u95ed\u540c\u6b65\u6d41 \n\tint m; cin >> m; while (m--) {\n\t\tcin >> s;\n\t\tif (s[0] == '+') { int x; cin >> x;\n\t\t\ts = s.substr (1);\n\t\t\tif (!mp[s]) {//\u8fd9\u4e2a\u540d\u5b57\u6ca1\u6709\u88ab\u7f16\u8fc7\u53f7 \n\t\t\t\tmp[s] = ++ccnt;\n\t\t\t\tmmp[ccnt] = s;\n\t\t\t\tsc[ccnt] = x * shift + m;\n\t\t\t\tinsert (x * shift + m, ccnt);\n\t\t\t} else {//\u8fd9\u4e2a\u540d\u5b57\u7f16\u8fc7\u53f7 \n\t\t\t\terase (sc[mp[s]]);\n\t\t\t\tsc[mp[s]] = x * shift + m;\n\t\t\t\tinsert (x * shift + m, mp[s]);\n\t\t\t}\n\t\t} else {\n\t\t\ts = s.substr (1);\n\t\t\tif (isdigit (s[0])) {//\u7ed9\u6392\u540d\u67e5\u8be2\u540d\u5b57 \n\t\t\t\tint num = 0;\n\t\t\t\tfor (auto c : s) num = num * 10 + c - '0';\n\t\t\t\tpair <int, int> q = splitt (root, sz (root) - num + 1);\n\t\t\t\tfq (i, 1, 10) {//\u66b4\u529b\u67e5\u8be2 \n\t\t\t\t\tif (sz (q.first) - i < 0) break;//\u53ca\u65f6\u9000\u51fa\n\t\t\t\t\tpair <int, int> r = splitt (q.first, sz (q.first) - i);\n\t\t\t\t\tpair <int, int> t = splitt (r.second, 1);\n\t\t\t\t\tif (!t.first) {\n\t\t\t\t\t\tq.first = merge (r.first, merge (t.first, t.second));\n\t\t\t\t\t\tbreak;//\u53ca\u65f6\u9000\u51fa\u4e4b\u524d\u4e0d\u8981\u5fd8\u8bb0merge\u56de\u6765\n\t\t\t\t\t}\n\t\t\t\t\tcout << mmp[tree[t.first].id] << ' ';\n\t\t\t\t\tq.first = merge (r.first, merge (t.first, t.second));\n\t\t\t\t} cout << '\\n'; root = merge (q.first, q.second);\n\t\t\t} else {//\u7ed9\u540d\u5b57\u67e5\u8be2\u6392\u540d \n\t\t\t\tint score = sc[mp[s]];\n\t\t\t\tpair <int, int> q = split (root, score);\n\t\t\t\tcout << sz (q.second) << '\\n';\n\t\t\t\troot = merge (q.first, q.second);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\n/*\n20\n+A 1\n+B 1\n+C 2\n+D 3\n?1\n*/\n\n```\n\n\u53ef\u4ee5\u4ece\u4ee3\u7801\u770b\u51fa\uff0cfhq \u7684\u4f18\u70b9\u8fd8\u662f\u4ee3\u7801\u77ed\uff0c\u597d\u5199\uff0c\u597d\u5904\u7406\uff0c**\u6613 debug**\u3002",
        "postTime": 1658403299,
        "uid": 300313,
        "name": "_luanyi_",
        "ccfLevel": 6,
        "title": "P4291"
    },
    {
        "content": "### \u9898\u610f\uff1a\n\n\u5efa\u7acb\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u63d2\u5165\uff08\u5206\u6570\u5bf9\u5e94\u7684\u4eba\uff0c\u4eba\u5bf9\u5e94\u7684\u5206\u6570\uff09\uff0c\u5220\u9664\uff08\u66f4\u65b0\u5206\u6570\u76f8\u5f53\u4e8e\u5220\u9664\u518d\u63d2\u5165\uff09\uff0c\u67e5\u8be2\u4e09\u79cd\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8bf4\u662f\u4e00\u9053\u5e73\u8861\u6811\u7684\u6a21\u677f\u9898\n\n\u8fd9\u91cc\u5c31\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u4e0b\u5e73\u8861\u6811\n\n\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u5b66\u8fc7\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u79fb\u6b65\u81f3 [[P5076]\u666e\u901a\u5e73\u8861\u6811(\u5f31\u5316\u7248)](https://www.luogu.com.cn/problem/P5076)\n\n\u5f53\u7136\uff0c\u5982\u679c\u4e0d\u60f3\u82b1\u8d39\u592a\u591a\u65f6\u95f4\uff0c\u8fd9\u91cc\u53ef\u4ee5\u7b80\u8981\u4ecb\u7ecd\u4e00\u4e0b\u3002\n\n\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u4ee5\u4e00\u68f5\u4e8c\u53c9\u6811\u4e3a\u57fa\u7840\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u5de6\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u6bd4\u5b83\u5c0f\uff0c\u53f3\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u6bd4\u5b83\u5927\u3002\u5047\u8bbe\u6811\u4e0a\u6709 $n$\u4e2a\u8282\u70b9, \u6570\u636e\u5982\u679c\u5b8c\u5168\u968f\u673a\uff0c\u8fd9\u68f5\u4e8c\u53c9\u6811\u5e94\u8be5\u8fd1\u4f3c\u4e8e\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u56e0\u6b64\u6811\u7684\u9ad8\u5ea6\u5e94\u8be5\u662f $\\log n$ \u5de6\u53f3\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\u6570\u5bf9\u5e94\u7684\u6392\u540d\uff0c\u53ea\u9700\u8981\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5224\u65ad\u6bd4\u5f53\u524d\u8282\u70b9\u5927\u6216\u8005\u5c0f\u4ece\u800c\u51b3\u5b9a\u5411\u5de6\u5b50\u6811\u6216\u8005\u53f3\u5b50\u6811\u8d70\uff0c\u56e0\u6b64\u9884\u671f\u5e73\u5747\u590d\u6742\u5ea6\u4e3a $\\log n$ \uff0c\u540c\u6837\uff0c\u5728\u67e5\u8be2\u6392\u540d\u6240\u5bf9\u5e94\u7684\u6570\uff0c\u53ea\u9700\u8981\u6bcf\u6b21\u6bd4\u8f83\u6392\u540d\u4e0e\u5de6\u5b50\u6811\u5927\u5c0f\uff08\u5373\u5c0f\u4e8e\u8be5\u8282\u70b9\u7684\u6570\u7684\u4e2a\u6570\uff09\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u4e5f\u4e3a $\\log n$ \uff0c\u63d2\u5165\u4e0e\u67e5\u8be2\u7c7b\u4f3c\uff0c\u53ea\u662f\u9700\u8981\u4fee\u6539\u53f6\u5b50\u8282\u70b9\u7684\u5b50\u8282\u70b9\u3002\n\n\u4f46\u662f\u5982\u679c\u7ecf\u8fc7\u7cbe\u5fc3\u6784\u9020\u7684\u6570\u636e\uff0c\u6bd4\u5982\u8bf4 $1,2,3,4,5$ \u90a3\u4e48\u5728\u63d2\u5165\u7684\u65f6\u5019\u4f1a\u628a $2$ \u63d2\u5165\u5230 $1$ \u53f3\u8fb9,$3$ \u63d2\u5165\u5230 $2$ \u53f3\u8fb9... \u4ee5\u6b64\u7c7b\u63a8,\u6700\u7ec8\u4f1a\u53d8\u6210\u4e00\u6761\u94fe\uff0c\u8fd9\u6837\u6df1\u5ea6\u5c31\u53d8\u6210\u4e86 $n$ \uff0c\u67e5\u8be2\u65f6\u95f4\u4e5f\u53d8\u6210\u4e86 $O(n)$ \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u89e3\u51b3\u3002\n\n\u8fd9\u91cc\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u7684\u662f\u6709\u65cb Treap \uff0c Treap = Tree + Heap \uff0c\u5373\u6811+\u5806\uff0c\u8fd9\u91cc\u662f\u8981\u7b26\u5408\u5806\u7684\u6027\u8d28\uff0c\u6211\u4eec\u9700\u8981\u7528\u4e00\u4e2a\u968f\u673a\u6743\u503c\u6765\u786e\u5b9a\u5806\uff0c\u6bd4\u5982\u8bf4\u8981\u8ba9\u7236\u8282\u70b9\u7684\u4e00\u4e2a\u968f\u673a\u6743\u503c\u5927\u4e8e\u5b50\u8282\u70b9\u7684\u968f\u673a\u6743\u503c\uff0c\u8fd9\u4e2a\u968f\u673a\u6743\u503c\u81ea\u7136\u662f\u968f\u673a\u8d4b\u4e88\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4fdd\u8bc1\u6570\u636e\u968f\u673a\u6027\uff0c\u5c31\u80fd\u4e0d\u65ad\u4fee\u6539\u7b26\u5408\u5806\u7684\u6027\u8d28\uff0c\u4e5f\u5c31\u4fdd\u8bc1\u4e86\u6811\u7684\u968f\u673a\u6027\u3002\u90a3\u4e48\u5982\u4f55\u6839\u636e\u968f\u673a\u6743\u503c\u6765\u4fee\u6539\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6811\u7684\u65cb\u8f6c\u5f97\u5230\n\n\u5148\u7ed9\u5927\u5bb6\u770b\u4e00\u4e0b\u65cb\u8f6c\u7684\u4ee3\u7801\n\n```cpp\nint turn_l(int Old_Father)//\u5de6\u65cb\n{\n    int RightSon=T[Old_Father].rs;\n    int Old_LeftSon=T[RightSon].ls;\n    T[RightSon].ls=Old_Father;\n    T[Old_Father].rs=Old_LeftSon;\n    pushup(Old_Father);\n    pushup(RightSon);\n    return RightSon;\n}\n\nint turn_r(int Old_Father)//\u53f3\u65cb\n{\n    int LeftSon=T[Old_Father].ls;\n    int Old_RightSon=T[LeftSon].rs;\n    T[LeftSon].rs=Old_Father;\n    T[Old_Father].ls=Old_RightSon;\n    pushup(Old_Father);\n    pushup(LeftSon);\n    return LeftSon;\n}\n```\n\n\u53ef\u80fd\u5f88\u591a\u4eba\u5e76\u6ca1\u6709\u770b\u61c2\uff0c\u90a3\u4e48\u6211\u5728\u8fd9\u91cc\u8be6\u7ec6\u5730\u89e3\u91ca\u4e00\u4e0b\uff0c\u4ee5\u5de6\u65cb\u4e3a\u4f8b\n\n $T$ \u6570\u7ec4\u662f\u7528\u6765\u5b58\u8fd9\u68f5\u6811\u7684\uff0c $Old Father$ \u662f\u4e4b\u524d\u7684\u7236\u8282\u70b9\uff0c  $RightSon$ \u662f\u5b83\u7684\u53f3\u513f\u5b50\uff0c\u90a3\u4e48\u6211\u4eec\u60f3\u8981\u4ee4\u53f3\u513f\u5b50\u53d8\u4e3a\u7236\u8282\u70b9\uff0c\u663e\u7136\u7236\u8282\u70b9\u4e0d\u53ef\u80fd\u53d8\u6210\u53f3\u5b50\u8282\u70b9\uff0c\u5426\u5219\u6211\u4eec\u5c31\u4f1a\u7834\u574f\u8fd9\u68f5\u6811\uff0c\u56e0\u6b64\u7236\u8282\u70b9\u4f1a\u65cb\u8f6c\u6210\u53f3\u5b50\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u53f3\u5b50\u8282\u70b9\u73b0\u5728\u6709\u4e86 3 \u4e2a\u5b50\u8282\u70b9\uff0c\u663e\u7136\u5df2\u7ecf\u4e0d\u662f\u4e8c\u53c9\u6811\u4e86\uff0c\u800c\u539f\u6765\u7684\u7236\u8282\u70b9\u5c11\u4e86\u53f3\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u53f3\u5b50\u8282\u70b9\u7684\u5de6\u5b50\u6811\u8f6c\u4ea4\u7ed9\u7236\u8282\u70b9\u7684\u53f3\u5b50\u6811\u5373\u53ef\uff0c\u663e\u7136\uff0c\u8fd9\u4e9b\u8282\u70b9\u90fd\u6bd4\u539f\u6765\u7684\u7236\u8282\u70b9\u8981\u5927\uff0c\u6240\u4ee5\u6ca1\u6709\u7834\u574f\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u65cb\u8f6c\u540e\u4e5f\u4ecd\u7136\u662f\u539f\u53f3\u5b50\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e2d\u7684\u4e00\u90e8\u5206\u3002\n\n\u56fe\u793a\u5982\u4e0b\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9kwrwdg6.png)\n\n\u4e00\u5f00\u59cb\u4ee5 $2$ \u4e3a\u6839\uff0c\u8981\u5c06\u5b83\u5de6\u65cb\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/a4eozlto.png)\n\n\u65cb\u8f6c\u540e\uff0c\u53ef\u4ee5\u770b\u5230 $1$ \u6709 $3$ \u4e2a\u5b50\u8282\u70b9\uff0c $2$ \u53ea\u6709\u4e00\u4e2a\uff0c\u4e8e\u662f\u6211\u4eec\u9700\u8981\u628a $1$ \u539f\u6765\u7684\u5de6\u5b50\u8282\u70b9 $4$ \u53d8\u6210 $2$ \u7684\u53f3\u5b50\u8282\u70b9\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/redrceiu.png)\n\n\u65cb\u8f6c\u5b8c\u6210\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u4e24\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u90fd\u662f $3,2,4,1,5$ \uff0c\u5e76\u6ca1\u6709\u7834\u574f\u539f\u6709\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7ed3\u6784\n\n\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8981 `return RightSon;` \u5462\uff1f\n\n\u6211\u4eec\u5728\u63d2\u5165\u7684\u65f6\u5019\u4f1a\u8fdb\u884c\u65cb\u8f6c\uff0c\u6beb\u65e0\u7591\u95ee\uff0c\u63d2\u5165\u540e\u7b2c\u4e00\u6b21\u65cb\u8f6c\u7684\u53ea\u662f\u5b83\u548c\u5b83\u7684\u7236\u8282\u70b9\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u9700\u8981\u66f4\u65b0\u8fd9\u4e2a\u70b9\u7684\u7236\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u5b50\u8282\u70b9\uff0c\u8fd9\u6837\u4f1a\u66f4\u65b9\u4fbf\uff1b\u6b64\u5916\uff0c\u65cb\u8f6c\u540e\u53ef\u80fd\u4ecd\u7136\u4e0d\u6ee1\u8db3\u7236\u8282\u70b9\u968f\u673a\u6743\u503c\u5927\u4e8e\u5b50\u8282\u70b9\uff0c\u8981\u7ee7\u7eed\u65cb\u8f6c\n\n\u63d2\u5165\u7684\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8bb0\u5f97\u66f4\u65b0\u5b50\u6811\u5927\u5c0f\u4fbf\u4e8e\u67e5\u8be2\n\n\u63d2\u5165\u4ee3\u7801\u5982\u4e0b\n\n```cpp\nint insert(long long New,int now,string name)//\u63d2\u5165\u73a9\u5bb6\u6570\u636e\n{\n    if(now==0)\n    {\n        Playernum++;\n        cnt++;\n        T[cnt].Name=name;\n        T[cnt].rk=rand()%1000000;\n        T[cnt].val=New;\n        T[cnt].size=1;\n        return cnt;\n    }\n    if(New>T[now].val)//\u5411\u53f3\u63d2\u5165\n    {\n        T[now].rs=insert(New,T[now].rs,name);\n        if(T[T[now].rs].rk>T[now].rk)\n        {\n            now=turn_l(now);//\u5982\u679c\u968f\u673a\u503c\u6bd4\u7236\u8282\u70b9\u5927\u5c31\u5de6\u65cb\uff0c\u540c\u65f6\u66f4\u65b0\u6839\u8282\u70b9\n        }\n    }\n    if(New<T[now].val)//\u5411\u5de6\u63d2\u5165\n    {\n        T[now].ls=insert(New,T[now].ls,name);\n        if(T[T[now].ls].rk>T[now].rk)\n        {\n            now=turn_r(now);//\u5982\u679c\u968f\u673a\u503c\u6bd4\u7236\u8282\u70b9\u5927\u5c31\u53f3\u65cb\uff0c\u540c\u65f6\u66f4\u65b0\u6839\u8282\u70b9\n        }\n    }\n    pushup(now);\n    return now;\n}\n```\n\n\u8fd9\u91cc\u7684 `pushup(now);` \u662f\u7528\u6765\u66f4\u65b0\u5b50\u6811\u5927\u5c0f\u7684\uff0c\u4ee3\u7801\u5982\u4e0b\n\n```cpp\nvoid pushup(int i)//\u66f4\u65b0\u5b50\u6811\u5927\u5c0f\n{\n    T[i].size=T[T[i].ls].size+T[T[i].rs].size+1;\n}\n```\n\n\u6839\u636e\u63d2\u5165\u64cd\u4f5c\u662f\u9012\u5f52\u7684\uff0c\u6240\u4ee5\u65cb\u8f6c\u67d0\u4e2a\u6839\u8282\u70b9\u5fc5\u5b9a\u540e\u4e8e\u5b83\u7684\u5b50\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u5b83\u5b50\u6811\u65cb\u8f6c\u5b8c\u5b83\u624d\u4f1a\u65cb\u8f6c\uff0c\u4e0d\u4f1a\u7834\u574f\u539f\u6709\u7ed3\u6784\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u66f4\u65b0\u5b83\u7684\u5927\u5c0f\u4e3a\u5b50\u6811\u5927\u5c0f\u4e4b\u548c\u52a0\u4e0a\u5b83\u672c\u8eab\n\n\u67e5\u8be2\u6570\u6240\u5bf9\u5e94\u7684\u6392\u540d\u53ea\u9700\u8981\u4e8c\u5206\u5224\u65ad\u6743\u503c\u5927\u5c0f\uff0c\u6743\u503c\u5927\u4e8e\u5f53\u524d\u503c\u5c31\u5728\u53f3\u5b50\u6811\u4e2d\u67e5\u627e\uff0c\u53cd\u4e4b\u5728\u5de6\u5b50\u6811\u4e2d\u67e5\u627e\uff0c\u4ee3\u7801\u5982\u4e0b\uff0c\u8fd9\u91cc\u67e5\u627e\u7684\u662f\u7b2c $K$ \u5c0f\u7684\uff08\u5982\u679c\u627e\u5230\u53f6\u5b50\u8282\u70b9\u8fd8\u6ca1\u627e\u5230\u8bf4\u660e\u8fd9\u4e2a\u6570\u4e0d\u5b58\u5728\uff09\n\n```cpp\nint FindK(long long Target,int now)//\u67e5\u8be2\u6743\u503c\u5bf9\u5e94\u7684\u6570\u7684\u6392\u540d\n{\n    if(now==0)//\u5df2\u7ecf\u4e3a\u53f6\u5b50\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e86\n    {\n        return 0;\n    }\n    if(T[now].val==Target)\n    {\n        return T[T[now].ls].size+1;\n    }\n    else if(Target>T[now].val)//\u5728\u76ee\u524d\u7684\u53f3\u5b50\u6811\n    {\n        return T[T[now].ls].size+1+FindK(Target,T[now].rs);//\u6bd4\u5b83\u5c0f\u7684\u6709\u5de6\u5b50\u6811\u3001\u6839\u8282\u70b9\u548c\u53f3\u5b50\u6811\u4e2d\u7684\u4e00\u90e8\u5206\n    }\n    else//\u5728\u76ee\u524d\u7684\u5de6\u5b50\u6811\n    {\n        return FindK(Target,T[now].ls);\n    }\n}\n```\n\n\u5220\u9664\u6570\u636e\u4e5f\u4e0e\u4e4b\u7c7b\u4f3c\uff0c\u4f46\u662f\u6211\u4eec\u5728\u5220\u9664\u7684\u65f6\u5019\u4e0d\u597d\u5904\u7406\u5b50\u8282\u70b9\uff0c\u800c\u6211\u4eec\u7684\u65cb\u8f6c\u53c8\u662f\u73b0\u6210\u7684\u4e86\uff0c\u76f4\u63a5\u5c06\u5220\u9664\u7684\u8282\u70b9\u8f6c\u5230\u53f6\u5b50\u8282\u70b9\u518d\u8fdb\u884c\u5220\u9664\u5373\u53ef\uff0c\u6709\u53f3\u5b50\u8282\u70b9\u5c31\u4ee5\u5b83\u4e3a\u6839\u5de6\u65cb\uff0c\u6709\u5de6\u5b50\u8282\u70b9\u5c31\u4ee5\u5b83\u4e3a\u6839\u53f3\u65cb\u5373\u53ef\u3002\n\n```cpp\nint delete_(long long Target,int now)//\u5220\u9664\u76ee\u6807\u6570\u636e\uff0c\u8fd4\u56de\u5220\u9664\u540e\u7684\u6839\u8282\u70b9\n{\n    if(Target==T[now].val)\n    {\n        if(T[now].ls==0&&T[now].rs==0)//\u5982\u679c\u5df2\u7ecf\u662f\u53f6\u5b50\u8282\u70b9\u5c31\u76f4\u63a5\u5220\u9664\n        {\n            Playernum--;//\u73a9\u5bb6\u603b\u6570\u91cf\n            return 0;\n        }\n        if(T[now].ls!=0)//\u8fd8\u6709\u5de6\u513f\u5b50\n        {\n            now=turn_r(now);\n            T[now].rs=delete_(Target,T[now].rs);//\u65cb\u8f6c\u540e\u7ee7\u7eed\u67e5\u627e\n        }\n        else if(T[now].rs!=0)//\u8fd8\u6709\u53f3\u513f\u5b50\n        {\n            now=turn_l(now);\n            T[now].ls=delete_(Target,T[now].ls);//\u65cb\u8f6c\u540e\u7ee7\u7eed\u67e5\u627e\n        }\n    }\n    else if(Target>T[now].val)//\u5728\u76ee\u6807\u8282\u70b9\u7684\u53f3\u5b50\u6811\n    {\n        T[now].rs=delete_(Target,T[now].rs);\n    }\n    else\n    {\n        T[now].ls=delete_(Target,T[now].ls);\n    }\n    pushup(now);\n    return now;\n}\n```\n\n\u67e5\u8be2\u6392\u540d\u6240\u5bf9\u5e94\u7684\u6570\uff0c\u5728\u67e5\u8be2\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u5224\u65ad\u5de6\u5b50\u6811\u5927\u5c0f\u4e0e\u5176\u6392\u540d\u7684\u5173\u7cfb\u5373\u53ef\uff0c\u5982\u679c\u5de6\u5b50\u6811\u5927\u5c0f\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u6392\u540d\uff0c\u90a3\u4e48\u8bf4\u660e\u5b83\u5728\u5de6\u5b50\u6811\u4e2d\uff1b\u4f46\u662f\u5982\u679c\u5728\u53f3\u5b50\u6811\uff0c\u9700\u8981\u628a\u6392\u540d\u51cf\u53bb\u5de6\u5b50\u6811\u5927\u5c0f\u4e0e\u6839\u8282\u70b9\uff0c\u56e0\u4e3a\u4f60\u5b58\u7684\u662f\u5b50\u6811\u5927\u5c0f\u800c\u975e\u603b\u4f53\u6392\u540d\uff0c\u4ee3\u7801\u5982\u4e0b\n\n```cpp\nstring FindRank(long long Target,int now)//\u67e5\u8be2\u6392\u540d\u6240\u5bf9\u5e94\u7684\u540d\u5b57\n{\n    if(T[T[now].ls].size>=Target)//\u76ee\u6807\u6392\u540d\u5728\u76ee\u524d\u7684\u5de6\u5b50\u6811\u4e2d\n    {\n        return FindRank(Target,T[now].ls);\n    }\n    else if(T[T[now].ls].size+1==Target)//\u5df2\u7ecf\u627e\u5230\u76ee\u6807\u6392\u540d\n    {\n        return T[now].Name;\n    }\n    else//\u5728\u53f3\u5b50\u6811\u4e2d\n    {\n        return FindRank(Target-T[T[now].ls].size-1,T[now].rs);\n    }\n}\n```\n\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ea\u9700\u8981 `FindK` \u548c `FindRank` \u4e24\u4e2a\u51fd\u6570\u5c31\u80fd\u5904\u7406\u6a21\u677f\u5e73\u8861\u4e8c\u53c9\u6811\u4e2d\u7684\u67e5\u627e\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u901a\u8fc7\u67e5\u8be2\u4e00\u4e2a\u6570\u7684\u6392\u540d\uff0c\u518d\u53cd\u8fc7\u6765\u7528\u6392\u540d $+ 1$ \u548c\u6392\u540d $- 1$ \u67e5\u8be2\u6570\u5373\u53ef\n\n\u8fd8\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff0c\u5206\u6570\u53ef\u80fd\u76f8\u540c\uff0c\u6309\u7167\u65f6\u95f4\u6392\u5e8f\uff0c\u6211\u4eec\u80af\u5b9a\u662f\u4e0d\u5e0c\u671b\u6bcf\u4e2a\u8282\u70b9\u4e0a\u51fa\u73b0\u4e00\u6761\u94fe\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7c7b\u4f3c\u4e8ehash\u8868\u7684\u6620\u5c04\uff0c\u5c06\u4e00\u4e2a\u6570\u6269\u5927\u5f88\u591a\u500d\uff0c\u51cf\u53bb\u5b83\u76ee\u524d\u7684\u65f6\u95f4\u6233\uff08\u63d2\u5165\u8d8a\u665a\u65f6\u95f4\u6233\u8d8a\u5927\uff0c\u90a3\u4e48\u5148\u63d2\u5165\u7684\u503c\u4e00\u5b9a\u5927\u4e8e\u540e\u63d2\u5165\u7684\uff09\uff0c\u8fd9\u4e2a\u500d\u6570\u7684\u8bdd\u6211\u8bbe\u5b9a\u7684\u662f `1e7` \uff0c\u6240\u4ee5\u9700\u8981\u5f00\u4e2a `long long` \u5904\u7406\u3002\n\n\u5168\u90e8\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n/*\n\u5199\u4e00\u68f5\u5e73\u8861\u6811\uff0c\u70b9\u6743\u8bbe\u7f6e\u4e3ascore \u00d7 1e7 - \u65f6\u95f4\u6233 \u652f\u6301\u63d2\u5165\uff0c\u5220\u9664\uff0c\u67e5\u8be2\n*/\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 2000010\nstruct NodeSpot\n{\n    long long val;//\u70b9\u6743\n    int ls;//\u5de6\u513f\u5b50\n    int rs;//\u53f3\u513f\u5b50\n    string Name;//\u73a9\u5bb6\u540d\u5b57\n    int rk;//\u968f\u673a\u6570\n    int size;//\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\n}T[maxn];\n\nint cnt;//\u76ee\u524d\u5230\u7b2c\u51e0\u4e2a\u8282\u70b9\u4e86\uff0c\u8fd9\u4e2a\u4e0e\u73a9\u5bb6\u6570\u91cf\u8981\u5206\u5f00\u8bb0\n\nmap<string,long long>Player;\n\nlong long Playernum;\n\nvoid pushup(int i)//\u66f4\u65b0\u5b50\u6811\u5927\u5c0f\n{\n    T[i].size=T[T[i].ls].size+T[T[i].rs].size+1;\n}\n\nint turn_l(int Old_Father)//\u5de6\u65cb\n{\n    int RightSon=T[Old_Father].rs;\n    int Old_LeftSon=T[RightSon].ls;\n    T[RightSon].ls=Old_Father;\n    T[Old_Father].rs=Old_LeftSon;\n    pushup(Old_Father);\n    pushup(RightSon);\n    return RightSon;\n}\n\nint turn_r(int Old_Father)//\u53f3\u65cb\n{\n    int LeftSon=T[Old_Father].ls;\n    int Old_RightSon=T[LeftSon].rs;\n    T[LeftSon].rs=Old_Father;\n    T[Old_Father].ls=Old_RightSon;\n    pushup(Old_Father);\n    pushup(LeftSon);\n    return LeftSon;\n}\n\nint insert(long long New,int now,string name)//\u63d2\u5165\u73a9\u5bb6\u6570\u636e\n{\n    if(now==0)\n    {\n        Playernum++;//\u8bb0\u5f55\u73a9\u5bb6\u6570\u91cf\n        cnt++;\n        T[cnt].Name=name;//\u5efa\u70b9\n        T[cnt].rk=rand()%1000000;//\u8d4b\u968f\u673a\u6743\u503c\n        T[cnt].val=New;\n        T[cnt].size=1;\n        return cnt;\n    }\n    if(New>T[now].val)//\u5411\u53f3\u63d2\u5165\n    {\n        T[now].rs=insert(New,T[now].rs,name);\n        if(T[T[now].rs].rk>T[now].rk)\n        {\n            now=turn_l(now);//\u5982\u679c\u968f\u673a\u503c\u6bd4\u7236\u8282\u70b9\u5927\u5c31\u5de6\u65cb\uff0c\u540c\u65f6\u66f4\u65b0\u6839\u8282\u70b9\n        }\n    }\n    if(New<T[now].val)//\u5411\u5de6\u63d2\u5165\n    {\n        T[now].ls=insert(New,T[now].ls,name);\n        if(T[T[now].ls].rk>T[now].rk)\n        {\n            now=turn_r(now);//\u5982\u679c\u968f\u673a\u503c\u6bd4\u7236\u8282\u70b9\u5927\u5c31\u53f3\u65cb\uff0c\u540c\u65f6\u66f4\u65b0\u6839\u8282\u70b9\n        }\n    }\n    pushup(now);\n    return now;\n}\n\nint delete_(long long Target,int now)//\u5220\u9664\u76ee\u6807\u6570\u636e\uff0c\u8fd4\u56de\u5220\u9664\u540e\u7684\u6839\u8282\u70b9\n{\n    if(Target==T[now].val)\n    {\n        if(T[now].ls==0&&T[now].rs==0)//\u5982\u679c\u5df2\u7ecf\u662f\u53f6\u5b50\u8282\u70b9\u5c31\u76f4\u63a5\u5220\u9664\n        {\n            Playernum--;\n            return 0;\n        }\n        if(T[now].ls!=0)//\u8fd8\u6709\u5de6\u513f\u5b50\n        {\n            now=turn_r(now);\n            T[now].rs=delete_(Target,T[now].rs);//\u65cb\u8f6c\u540e\u7ee7\u7eed\u67e5\u627e\n        }\n        else if(T[now].rs!=0)//\u8fd8\u6709\u53f3\u513f\u5b50\n        {\n            now=turn_l(now);\n            T[now].ls=delete_(Target,T[now].ls);//\u65cb\u8f6c\u540e\u7ee7\u7eed\u67e5\u627e\n        }\n    }\n    else if(Target>T[now].val)//\u5728\u76ee\u6807\u8282\u70b9\u7684\u53f3\u5b50\u6811\n    {\n        T[now].rs=delete_(Target,T[now].rs);\n    }\n    else\n    {\n        T[now].ls=delete_(Target,T[now].ls);\n    }\n    pushup(now);\n    return now;\n}\n\nint FindK(long long Target,int now)//\u67e5\u8be2\u6743\u503c\u5bf9\u5e94\u7684\u6570\u7684\u6392\u540d\n{\n    if(now==0)\n    {\n        return 0;\n    }\n    if(T[now].val==Target)\n    {\n        return T[T[now].ls].size+1;\n    }\n    else if(Target>T[now].val)//\u5728\u76ee\u524d\u7684\u53f3\u5b50\u6811\n    {\n        return T[T[now].ls].size+1+FindK(Target,T[now].rs);\n    }\n    else//\u5728\u76ee\u524d\u7684\u5de6\u5b50\u6811\n    {\n        return FindK(Target,T[now].ls);\n    }\n}\n\nstring FindRank(long long Target,int now)//\u67e5\u8be2\u6392\u540d\u6240\u5bf9\u5e94\u7684\u540d\u5b57\n{\n    if(T[T[now].ls].size>=Target)//\u76ee\u6807\u6392\u540d\u5728\u76ee\u524d\u7684\u5de6\u5b50\u6811\u4e2d\n    {\n        return FindRank(Target,T[now].ls);\n    }\n    else if(T[T[now].ls].size+1==Target)//\u5df2\u7ecf\u627e\u5230\u76ee\u6807\u6392\u540d\n    {\n        return T[now].Name;\n    }\n    else//\u5728\u53f3\u5b50\u6811\u4e2d\n    {\n        return FindRank(Target-T[T[now].ls].size-1,T[now].rs);\n    }\n}\n\nint n;//\u603b\u8be2\u95ee\u6570\n\nint main()\n{\n    scanf(\"%d\",&n);\n    int root=0;\n    for(int i=1;i<=n;i++)\n    {\n       char type;\n       string sc_or_na;\n       cin>>type;\n       cin>>sc_or_na;\n        if(type=='+')//\u6dfb\u52a0\u73a9\u5bb6\u5206\u6570\n        {\n            long long add;\n            scanf(\"%lld\",&add);\n            add*=10000000;//\u8d4b\u4e88\u65b0\u6743\u503c\n            add-=i;\n            if(Player[sc_or_na]!=0)//\u5224\u65ad\u8fd9\u4e2a\u73a9\u5bb6\u662f\u5426\u51fa\u73b0\u8fc7\n            {\n                root=delete_(Player[sc_or_na],root);//\u5220\u9664\u539f\u6709\u6570\u636e\uff0c\u66f4\u65b0\u6839\u8282\u70b9\n            }\n            Player[sc_or_na]=add;//\u50a8\u5b58\u65b0\u6570\u636e\n            root=insert(add,root,sc_or_na);\n        }\n        else\n        {\n            long long add=0;\n            if(sc_or_na[0]>='0'&&sc_or_na[0]<='9')\n            {\n                for(int i=0;i<sc_or_na.size();i++)\n                {\n                    add*=10;\n                    add+=(sc_or_na[i]-'0');//\u67e5\u8be2\u6392\u540d\uff0c\u6392\u540d\u4ece\u5927\u5230\u5c0f\uff0c\u8981\u51cf\u53bb\n                }\n                for(int i=add;i<=min(Playernum,add+9);i++)\n                {\n                    cout<<FindRank(Playernum-i+1,root)<<\" \";\n                }\n                cout<<endl;\n            }\n            else//\u67e5\u8be2\u73a9\u5bb6\u6392\u540d\uff0c\u6392\u540d\u662f\u4ece\u5927\u5230\u5c0f\u7684\uff0c\u6240\u4ee5\u8981\u51cf\u53bb\n            {\n                cout<<Playernum-FindK(Player[sc_or_na],root)+1<<endl;\n            }\n        }\n    }\n}\n```\n\n\u5199\u5728\u6700\u540e\uff1a\u5176\u5b9e\u5e73\u8861\u6811\u5e76\u4e0d\u7b97\u5f88\u96be\uff0c\u521a\u5f00\u59cb\u5b66\u7684\u65f6\u5019\u89c9\u5f97\u662f\u795e\u4ed9\u4e1c\u897f\uff0c\u5b9e\u73b0\u8d77\u6765\u5f88\u9ebb\u70e6\uff0c\u4f46\u662f\u53ea\u8981\u77e5\u9053\u4e86\u5176\u4e2d\u7684\u539f\u7406\u7684\u8bdd\uff0c\u5927\u81f4\u6784\u67b6\u53ef\u4ee5\u5199\u51fa\u6765\u6162\u6162\u8c03\u8bd5\uff0c\u4e2a\u4eba\u8f83\u4e3a\u53cd\u5bf9STL\u7684\u5c01\u88c5\u7684(\u53bb\u641c\u7d22pbds)\uff0c\u6bd5\u7adf\u8fd9\u73a9\u610f\u5b66\u4e86\u662f\u81ea\u5df1\u7684\uff0c\u795d\u5404\u4f4dOIer\u90fd\u80fd\u52aa\u529b\u62fc\u640f\uff0c\u5b9e\u73b0\u7406\u60f3",
        "postTime": 1658638506,
        "uid": 218387,
        "name": "MC_Launcher",
        "ccfLevel": 5,
        "title": "[HAOI2008]\u6392\u540d\u7cfb\u7edf"
    },
    {
        "content": "\u53ef\u4ee5\u8bf4\u662f\u4e00\u9053\u5f88\u6c34\u7684\u7d2b\u9898\u3002\u6570\u636e\u91cf\u5f88\u5c0f\uff0cfhqtreap+cin \u90fd\u80fd\u968f\u4fbf~~\u6c34~~\u8fc7\u3002\n\n\u540c\u65f6\uff0c\u672c\u9898\u89e3\u7684\u4ee3\u7801\u5e94\u8be5\u662f\u76ee\u524d\u6700\u7b80\u6d01\u7684\u3002\n\n\n------------\n\n\u5927\u4f53\u505a\u6cd5\u5c31\u662f\u5f00\u4e2a `map` \u5b58\u6bcf\u4e2a\u540d\u5b57\u5bf9\u5e94\u7684\u5206\u6570\u3001\u65f6\u95f4\uff0c\u7136\u540e\u7528\u4e00\u4e2a `fhqtreap` \u5b58\u50a8\u5373\u53ef\u3002\u56e0\u4e3a\u6392\u540d\u7531\u5927\u5230\u5c0f\uff0c\u6211\u4eec\u8ba9\u5de6\u5b50\u6811 $>$ \u6839 $>$ \u53f3\u5b50\u6811\u3002\n\n\u6dfb\u52a0\u65b0\u5206\u6570\u5c31\u662f\u628a\u539f\u6709\u7684\u5220\u4e86\u65b0\u5f04\u4e00\u4e2a\uff0c\u540c\u65f6\u66f4\u65b0 `map`\uff1b\u67e5\u6392\u540d\u548c\u540d\u5b57\u662f\u5e73\u8861\u6811\u57fa\u64cd\uff0c\u4e0d\u8fc7\u591a\u89e3\u91ca\u3002\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5728\u8bfb\u53d6\u6570\u636e\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5927\u53ef\u4e0d\u5fc5\u624b\u5199\u4e00\u4e2a\u4ece\u5b57\u7b26\u4e32\u91cc\u63d0\u53d6\u6574\u6570\u7684\u4e1c\u897f\uff0c\u800c\u662f\u53ef\u4ee5\u76f4\u63a5\u7528 `sscanf` \u51fd\u6570\u3002\u5177\u4f53\u7528\u6cd5\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5b57\u7b26\u4e32\uff0c\u540e\u9762\u7684\u53c2\u6570\u548c `scanf` \u5b8c\u5168\u76f8\u540c\u3002\n\n\u5f88\u65b9\u4fbf\u7684\u662f\uff0c`std::string` \u6709 `const char*` \u7684\u6784\u9020\u51fd\u6570\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6307\u9488\u7684 `+1` \u76f4\u63a5\u7565\u8fc7\u7b2c\u4e00\u4f4d\u3002\u5177\u4f53\u505a\u6cd5\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n\u4e0d\u5438\u6c27\u6700\u6162\u7684\u70b9 632ms\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <random>\n#include <map>\n\nconst int MAXN = 2.5e5+9;\nusing namespace std;\n\nstruct Score {\n    int score, dfn;\n    inline bool operator > (const Score& other) const {\n        if(score==other.score) return dfn<other.dfn;\n        return score>other.score;\n    }\n};\nstruct node {\n    int ls, rs, mark, size;\n    Score score;\n    string name;\n}fhq[MAXN];\n#define lson(i) fhq[fhq[i].ls]\n#define rson(i) fhq[fhq[i].rs]\n\nmap<string, Score> nameToScore;\nmt19937 rnd(114514);\nint root, tot, N;\n\ninline int newnode(string name, int val){\n    fhq[++tot].mark=rnd();\n    fhq[tot].name = name;\n    fhq[tot].score = {val,tot};\n    fhq[tot].size=1;\n    return tot;\n}\ninline void pushup(int now){\n    fhq[now].size=lson(now).size+rson(now).size+1;\n}\n// \u6309\u503c\u5206\u88c2\nvoid split_val(int now, Score key, int &a, int &b){\n    if(!now){\n        a=b=0;\n        return;\n    }\n    if(fhq[now].score > key){\n        a=now;\n        split_val(fhq[now].rs, key, fhq[now].rs, b);\n    } else {\n        b=now;\n        split_val(fhq[now].ls, key, a, fhq[now].ls);\n    }\n    pushup(now);\n}\n// \u6309\u5927\u5c0f\u5206\u88c2\nvoid split_size(int now, int size, int &a, int &b){\n    if(!now){\n        a=b=0;\n        return;\n    }\n    if(lson(now).size < size){\n        a=now;\n        split_size(fhq[now].rs, size-lson(now).size-1, fhq[now].rs, b);\n    } else {\n        b=now;\n        split_size(fhq[now].ls, size, a, fhq[now].ls);\n    }\n    pushup(now);\n}\n// \u5408\u5e76\nint merge(int a, int b){\n    if(!a||!b) return a+b;\n    if(fhq[a].mark >= fhq[b].mark){\n        fhq[a].rs = merge(fhq[a].rs, b);\n        pushup(a);\n        return a;\n    }\n    fhq[b].ls = merge(a, fhq[b].ls);\n    pushup(b);\n    return b;\n}\n\nint a,b,c;\ninline void insert(string name, int score){ // \u6dfb\u52a0\u65b0\u5206\u6570\n    auto it = nameToScore.find(name);\n    if(it != nameToScore.end()){ // \u5982\u679c\u4ee5\u524d\u6709\uff0c\u5c31\u8981\u5148\u5220\u6389\n        split_val(root, it->second, a, b);\n        split_size(b,1,b,c);\n        root = merge(a,c);\n    }\n    nameToScore[name] = {score, tot+1}; // \u66f4\u65b0map\n    split_val(root, {score, tot+1}, a, b);\n    root = merge(merge(a, newnode(name, score)), b);\n}\ninline void query_rank(string name){ // \u67e5\u8be2\u6392\u540d\n    split_val(root, nameToScore[name], a, b);\n    cout << fhq[a].size+1 << endl;\n    root = merge(a,b);\n}\nvoid display(int now){ // \u4e2d\u5e8f\u904d\u5386\u8f93\u51fa\u540d\u5b57\n    if(!now) return;\n    display(fhq[now].ls);\n    cout << fhq[now].name << ' ';\n    display(fhq[now].rs);\n}\ninline void query_sub(int begin){ // \u67e5\u8be2\u6392\u540d\u8bb0\u5f55\n    split_size(root, begin-1, a, b); \n    split_size(b,10,b,c); // \u5982\u679cb\u4e2d\u5143\u7d20\u4e0d\u591f\u5341\u4e2a\uff0c\u5b9e\u9645\u4e0a\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u53d1\u751f\n    display(b);\n    cout << endl;\n    root=merge(a,merge(b,c));\n}\n\nint main(){\n    ios::sync_with_stdio(false); cin.tie();\n    int t, val; char cmd[32];\n    cin >> t;\n    while(t--){\n        cin >> cmd;\n        if(cmd[0] == '+'){\n            cin >> val;\n            insert(cmd+1, val); // cmd+1\u5373\u7565\u8fc7\u4e86\u7b2c\u96f6\u4f4d\u7684\u90e8\u5206\n        } else if(cmd[1] > '9'){\n            query_rank(cmd+1);\n        } else {\n            sscanf(cmd+1,\"%d\",&val); // \u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u6574\u6570\n            query_sub(val);\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1629560056,
        "uid": 130256,
        "name": "jia_shengyuan",
        "ccfLevel": 9,
        "title": "P4291\u6392\u540d\u7cfb\u7edf \u9898\u89e3"
    },
    {
        "content": "~~\u5e73\u8861\u6811\u88f8\u9898\uff0cfhq\u6c34\u8fc7\u3002~~\n\n---\n\n\u8fd9\u9053\u9898\u4e00\u770b\u5230\u201c\u6392\u540d\u201d\uff0c\u5c31\u60f3\u5230\u5e73\u8861\u6811\u3002\n\n\u7136\u800c\u8fd9\u9053\u9898\u9700\u8981\u5728\u5e73\u8861\u6811\u4e0a\u52a0\u5165\u7b2c\u4e8c\u952e\u503c\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u65b9\u6cd5\u5904\u7406\u8fd9\u79cd\u95ee\u9898\uff1a\n\n _\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u9700\u8981\u4f18\u5316\u7684\u91cf $v_1,v_2$\uff0c\u8981\u6c42\u9996\u5148\u6ee1\u8db3 $v_1$ \u6700\u5c0f\uff0c\u5728 $v_1$ \u76f8\u540c\u7684\u60c5\u51b5\u4e0b $v_2$ \u6700\u5c0f\uff0c\u5219\u53ef\u4ee5\u628a\u4e8c\u8005\u5408\u5e76\u6210\u4e00\u4e2a\u91cf $Mv_1+v_2$ \uff0c\u5176\u4e2d $M$ \u662f\u4e00\u4e2a\u6bd4\u201c$v_2$\u7684\u6700\u5927\u7406\u8bba\u503c\u548c $v_1$ \u7684\u6700\u5c0f\u7406\u8bba\u503c\u4e4b\u5dee\u201d\u8fd8\u8981\u5927\u7684\u6570\u3002_ \n\n_\u2014\u2014\u5218\u6c5d\u4f73 \u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178--\u8bad\u7ec3\u6307\u5357\u300b_\n\n\u56de\u5230\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u6392\u5728\u524d\u9762\u7684\u4eba\u9996\u5148\u6ee1\u8db3 $score$ \u6700\u5927\uff0c\u5728 $score$ \u76f8\u540c\u7684\u60c5\u51b5\u4e0b $time$ \u6700\u5c0f\uff0c\u5373 $-time$ \u6700\u5927\uff0c\u5373\u53ef\u628a\u4e8c\u8005\u5408\u5e76\u4e3a\u4e00\u4e2a\u6570 $val=M * score-time$\uff0c\u8fd9\u91cc $M$ \u53d6 $maxn=250000$ \u5373\u53ef\u3002\n\n\u7528\u5e73\u8861\u6811\u7ef4\u62a4 $val$ \u5373\u53ef\u3002\n\n---\n\n\u4ee3\u7801\uff1a\u56e0\u4e3a\u6709 $map$ \u548c\u5b57\u7b26\u4e32\u64cd\u4f5c\uff0c\u8f7b\u5fae\u5361\u5e38\u3002\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <map>\n#include <string>\n#define maxn 250005\n#define lxl long long\nusing namespace std;\n\nint n,x,y,z;\nint root,tot,ch[maxn][2],size[maxn],rnd[maxn];\nlxl val[maxn];\nstring str[maxn];\nstd::map<string,int> Name;\n\ninline void update(int p)\n{\n\tsize[p]=size[ch[p][0]]+size[ch[p][1]]+1;\n}\n\ninline void split_val(int p,lxl k,int &x,int &y)\n{\n\tif(!p) {x=y=0;return;}\n\tif(k>=val[p])\n\t{\n\t\tx=p;\n\t\tsplit_val(ch[p][1],k,ch[p][1],y);\n\t}\n\telse\n\t{\n\t\ty=p;\n\t\tsplit_val(ch[p][0],k,x,ch[p][0]);\n\t}\n\tupdate(p);\n}\n\ninline void split_rank(int p,int k,int &x,int &y)\n{\n\tif(!p) {x=y=0;return;}\n\tif(k>=size[ch[p][0]]+1)\n\t{\n\t\tx=p;\n\t\tsplit_rank(ch[p][1],k-size[ch[p][0]]-1,ch[p][1],y);\n\t}\n\telse\n\t{\n\t\ty=p;\n\t\tsplit_rank(ch[p][0],k,x,ch[p][0]);\n\t}\n\tupdate(p);\n}\n\ninline int merge(int a,int b)\n{\n\tif(!a||!b) return a|b;\n\tif(rnd[a]<rnd[b])\n\t{\n\t\tch[a][1]=merge(ch[a][1],b);\n\t\tupdate(a);\n\t\treturn a;\n\t}\n\telse\n\t{\n\t\tch[b][0]=merge(a,ch[b][0]);\n\t\tupdate(b);\n\t\treturn b;\n\t}\n}\n\ninline void erase(lxl k)\n{\n\tsplit_val(root,k,x,z);\n\tsplit_val(x,k-1,x,y);\n\troot=merge(x,z);\n}\n\ninline int new_node(string s,int score,int time)\n{\n\tsize[++tot]=1;\n\tstr[tot]=s;\n\tval[tot]=(lxl)score*maxn-time;//\u8ba1\u7b97\u5408\u5e76\u540e\u7684\u503c\n\trnd[tot]=rand();\n\treturn tot;\n}\n\ninline void insert(string s,int score,int time)\n{\n\tif(Name[s]) erase(val[Name[s]]);\n\tName[s]=new_node(s,score,time);\n\tsplit_val(root,val[tot],x,y);\n\troot=merge(merge(x,tot),y);\n}\n\ninline void print(int p)\n{\n\tif(!p) return;\n\tprint(ch[p][1]);\n\tcout<<str[p]<<' ';\n\tprint(ch[p][0]);\n}\n\ninline void index(int k)\n{\n\tint nowtot=size[root];\n\tsplit_rank(root,nowtot-k+1,x,z);\n\tsplit_rank(x,max(nowtot-k-9,0),x,y);\n\tprint(y);cout<<\"\\n\";//\u7528\\n\u66f4\u5feb\n\troot=merge(merge(x,y),z);\n}\n\ninline void rnk(string s)\n{\n\tint p=Name[s];\n\tsplit_val(root,val[p],x,y);\n\tint ans=size[y]+1;\n\troot=merge(x,y);\n\tcout<<ans<<\"\\n\";//\u7528\\n\u66f4\u5feb\n}\n\ninline int readstr(string s)\n{\n\tint len=s.size(),x=0;\n\tfor(int i=0;i<len;i++)\n\t\tx=(x<<1)+(x<<3)+s[i]-'0';\n\treturn x;\n}\n\nint main()\n{\n\t//freopen(\"P4291.in\",\"r\",stdin);\n\tios::sync_with_stdio(false); //\u5173\u95ed\u540c\u6b65\u52a0\u901f\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528getchar\u5feb\u8bfb\n\tcin>>n;\n\tchar opt;\n\tstring s;\n\tint score;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>opt;\n\t\tif(opt=='+')\n\t\t{\n\t\t\tcin>>s>>score;\n\t\t\tinsert(s,score,i);\n\t\t}\n\t\telse if(opt=='?')\n\t\t{\n\t\t\tcin>>s;\n\t\t\tif(s[0]>='0'&&s[0]<='9') index(readstr(s));\n\t\t\telse rnk(s);\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1589530037,
        "uid": 224236,
        "name": "GoPoux4",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4291 \u3010[HAOI2008]\u6392\u540d\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7ef4\u62a4\u5e73\u8861\u6811\u5373\u53ef\uff0c\u5e76\u4e0d\u9700\u8981\u54c8\u5e0c\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u6784\u4f53\u7ef4\u62a4\u540d\u5b57\u3001\u5206\u6570\u548c\u63d2\u5165\u65f6\u7684\u7f16\u53f7\u3002\u5148\u6309\u5206\u6570\uff0c\u540e\u6309\u63d2\u5165\u7f16\u53f7\u91cd\u8f7d\u8fd0\u7b97\u7b26\u5373\u53ef\u3002\n\n\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u8981\u652f\u6301\u63d2\u5165\uff0c\u6c42\u6392\u540d\uff0c\u6309\u7167\u6392\u540d\u6c42\u503c\u4ee5\u53ca\u5220\u9664\u64cd\u4f5c\u3002\u56e0\u4e3a\u5982\u679c\u4e00\u4e2a\u4eba\u7684\u5206\u6570\u88ab\u66f4\u65b0\uff0c\u6211\u4eec\u8981\u5728\u5e73\u8861\u6811\u4e2d\u4fee\u6539\u5b83\uff0c\u5373\u5148\u5220\u9664\u540e\u63d2\u5165\u3002\n\n\u7531\u4e8e\u9700\u8981\u5220\u9664\u64cd\u4f5c\uff0c\u6240\u4ee5\u9700\u8981\u5199\u524d\u9a71\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u4e5f\u662f\u5e73\u8861\u6811\u57fa\u7840\u64cd\u4f5c\u3002\n\n\u5220\u9664\u64cd\u4f5c\u5177\u4f53\u662f\uff0c\u628a\u8981\u5220\u9664\u7684\u70b9\u8f6c\u5230\u6839\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u7684 $cnt > 1$\uff0c\u90a3\u4e48\u5c31 $cnt \\leftarrow cnt - 1$\uff0c\u5426\u5219\u5408\u5e76\u4e24\u4e2a\u5b50\u6811\u3002\u5408\u5e76\u65f6\u628a\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\u8f6c\u5230\u6839\uff0c\u7136\u540e\u5c06\u53f3\u5b50\u6811\u63a5\u4e0a\u6839\u7684\u53f3\u513f\u5b50\u5373\u53ef\u3002\n\n\u5199\u7684 Splay\uff0c\u5e38\u6570\u975e\u5e38\u5927\uff0c\u4e0d\u5f00 O2 \u4f1a\u8d85\u65f6 $2$ \u4e2a\u70b9\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <string>\n#include <set>\n#include <climits>\n#include <map>\nusing namespace std;\n\nconst int N = 3e5 + 5;\n\nint n;\n\nstruct User\n{\n\tstring name;\n\tlong long score;\n\tint id;\n\tUser(){}\n\tUser(string _n, long long _s, int _i): name(_n), score(_s), id(_i){}\n\tbool operator==(const User& g) const\n\t{\n\t\treturn name == g.name && score == g.score && id == g.id;\n\t}\n\tbool operator<(const User& g) const\n\t{\n\t\tif (score ^ g.score) return score > g.score;\n\t\treturn id < g.id;\n\t}\n\tbool operator>(const User& g) const\n\t{\n\t\tif (score ^ g.score) return score < g.score;\n\t\treturn id > g.id;\n\t}\n};\n\nclass Splay\n{\npublic:\n\tint idx, rt;\n\tstruct Node\n\t{\n\t\tint fa, son[2], sz, cnt;\n\t\tUser val;\n\t}tr[N];\n\tint get(int x)\n\t{\n\t\treturn x == tr[tr[x].fa].son[1];\n\t}\n\tvoid pushup(int u)\n\t{\n\t\ttr[u].sz = tr[tr[u].son[0]].sz + tr[tr[u].son[1]].sz + tr[u].cnt;\n\t}\n\tvoid rotate(int x)\n\t{\n\t\tint y = tr[x].fa, z = tr[y].fa;\n\t\tint chkx = get(x), chky = get(y);\n\t\ttr[y].son[chkx] = tr[x].son[chkx ^ 1];\n\t\tif (tr[x].son[chkx ^ 1]) tr[tr[x].son[chkx ^ 1]].fa = y;\n\t\ttr[x].son[chkx ^ 1] = y;\n\t\ttr[y].fa = x;\n\t\ttr[x].fa = z;\n\t\tif (z) tr[z].son[chky] = x;\n\t\tpushup(y);\n\t\tpushup(x);\n\t}\n\tvoid splay(int u)\n\t{\n\t\tfor (int f = tr[u].fa; f = tr[u].fa, f; rotate(u))\n\t\t{\n\t\t\tif (tr[f].fa) rotate(get(f) == get(u) ? f : u);\n\t\t}\n\t\trt = u;\n\t}\n\tvoid ins(User g)\n\t{\n\t\tif (!rt)\n\t\t{\n\t\t\trt = ++idx;\n\t\t\ttr[rt].val = g;\n\t\t\ttr[rt].cnt = 1;\n\t\t\tpushup(rt);\n\t\t\treturn;\n\t\t}\n\t\tint u = rt, f, last;\n\t\twhile (true)\n\t\t{\n\t\t\tif (tr[u].val == g)\n\t\t\t{\n\t\t\t\ttr[u].cnt++;\n\t\t\t\tpushup(u);\n\t\t\t\tpushup(f);\n\t\t\t\tsplay(u);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!u)\n\t\t\t{\n\t\t\t\tu = ++idx;\n\t\t\t\ttr[u].cnt = 1;\n\t\t\t\ttr[u].val = g;\n\t\t\t\ttr[u].fa = f;\n\t\t\t\ttr[f].son[last] = u;\n\t\t\t\tpushup(u);\n\t\t\t\tpushup(f);\n\t\t\t\tsplay(u);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tf = u;\n\t\t\tlast = g > tr[u].val;\n\t\t\tu = tr[u].son[last];\n\t\t}\n\t}\n\tint rank(User x)\n\t{\n\t\tint res = 0, u = rt;\n\t\twhile (true)\n\t\t{\n\t\t\tif (tr[u].val == x)\n\t\t\t{\n\t\t\t\tres += tr[tr[u].son[0]].sz;\n\t\t\t\tsplay(u);\n\t\t\t\treturn res + 1;\n\t\t\t}\n\t\t\tif (tr[u].val > x)\n\t\t\t{\n\t\t\t\tu = tr[u].son[0];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tres += tr[tr[u].son[0]].sz + tr[u].cnt;\n\t\t\t\tu = tr[u].son[1];\n\t\t\t}\n\t\t}\n\t}\n\tUser kth(int k)\n\t{\n\t\tint u = rt;\n\t\twhile (true)\n\t\t{\n\t\t\tif (tr[tr[u].son[0]].sz >= k)\n\t\t\t{\n\t\t\t\tu = tr[u].son[0];\n\t\t\t}\n\t\t\telse if (tr[tr[u].son[0]].sz + 1 == k)\n\t\t\t{\n\t\t\t\tsplay(u);\n\t\t\t\treturn tr[u].val;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tk -= tr[tr[u].son[0]].sz + tr[u].cnt;\n\t\t\t\tu = tr[u].son[1];\n\t\t\t}\n\t\t}\n\t}\n\tvoid CLEAR(int u)\n\t{\n\t\ttr[u].cnt = tr[u].fa = tr[u].son[0] = tr[u].son[1] = tr[u].sz = 0;\n\t\ttr[u].val.id = tr[u].val.score = 0;\n\t\ttr[u].val.name = \"\";\n\t}\n\tUser pre()\n\t{\n\t\tint u = tr[rt].son[0];\n\t\tif (!u) return User(\"\", 0LL, 0);\n\t\twhile (tr[u].son[1]) u = tr[u].son[1];\n\t\tsplay(u);\n\t\treturn tr[u].val;\n\t}\n\tvoid del(User p)\n\t{\n\t\trank(p);\n\t\tint u = rt;\n\t\tif (tr[u].cnt > 1)\n\t\t{\n\t\t\ttr[u].cnt--;\n\t\t\tpushup(u);\n\t\t\treturn;\n\t\t}\n\t\tif (!tr[u].son[0])\n\t\t{\n\t\t\trt = tr[u].son[1];\n\t\t\ttr[rt].fa = 0;\n\t\t\tCLEAR(u);\n\t\t\treturn;\n\t\t}\n\t\tif (!tr[u].son[1])\n\t\t{\n\t\t\trt = tr[u].son[0];\n\t\t\ttr[rt].fa = 0;\n\t\t\tCLEAR(u);\n\t\t\treturn;\n\t\t}\n\t\tpre();\n\t\ttr[rt].son[1] = tr[u].son[1];\n\t\ttr[tr[u].son[1]].fa = rt;\n\t\tpushup(rt);\n\t\tCLEAR(u);\n\t}\n}tr;\n\nmap<string, User> st;\n\nint main()\n{\n\tcin >> n;\n\ttr.ins(User(\"PPPPP\", INT_MIN, INT_MIN));\n\ttr.ins(User(\"PPPPP\", INT_MAX, INT_MAX));\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tchar c;\n\t\tcin >> c;\n\t\tif (c == '+')\n\t\t{\n\t\t\tstring name;\n\t\t\tlong long score;\n\t\t\tcin >> name >> score;\n\t\t\tif (st.count(name))\n\t\t\t{\n\t\t\t\ttr.del(st[name]);\n\t\t\t}\n\t\t\tst[name] = User(name, score, i);\n\t\t\ttr.ins(st[name]);\n\t\t}\n\t\telse if (c == '?')\n\t\t{\n\t\t\tstring s;\n\t\t\tcin >> s;\n\t\t\tbool flag = 1;\n\t\t\tfor (auto i : s)\n\t\t\t{\n\t\t\t\tif (!(i >= '0' && i <= '9'))\n\t\t\t\t{\n\t\t\t\t\tflag = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag)\n\t\t\t{\n\t\t\t\tint x = stoi(s);\n\t\t\t\tfor (int i = 1; i <= 10; i++)\n\t\t\t\t{\n\t\t\t\t\tUser g = tr.kth(x + i);\n\t\t\t\t\tif (g.name == \"PPPPP\")\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcout << g.name << \" \";\n\t\t\t\t}\n\t\t\t\tcout << \"\\n\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout << tr.rank(st[s]) - 1 << \"\\n\";\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1683119219,
        "uid": 332914,
        "name": "happybob",
        "ccfLevel": 6,
        "title": "P4291 [HAOI2008]\u6392\u540d\u7cfb\u7edf"
    },
    {
        "content": "[\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/P4291)\n\n## \u9898\u610f\n\u7ef4\u62a4\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n1. \u63d2\u5165\u5143\u7d20\n2. \u67e5\u8be2\u5143\u7d20\u6392\u540d\n3. \u67e5\u8be2\u533a\u95f4\u5143\u7d20\n\n\u8303\u56f4\uff1a$10 \\le n \\le 250000$\u3002\n\n## \u5206\u6790\n\n\u770b\u5230\u6392\u540d\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u5e73\u8861\u6811\u3002\u8c01\u80fd\u62d2\u7edd fhq \u5462\uff0c\u4e3b\u8981\u662f\u597d\u5199\u3002\u4f46\u662f\u65e2\u8981\u6709\u6392\u540d\uff0c\u53c8\u8981\u6709\u533a\u95f4\uff0c\u90a3\u4e48 $\\texttt{split}$ \u51fd\u6570\u5fc5\u987b\u652f\u6301\u53ef\u4ee5\u6309\u7167 $\\texttt{val}$ \u5206\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167 $\\texttt{siz}$ \u5206\u3002\u800c\u8fd9\u9053\u9898\u91cc\uff0c\u6392\u540d\u6309\u7167 $\\texttt{val}$ \u5212\u5206\uff0c\u6240\u4ee5 $\\texttt{val}$ \u4e0e $\\texttt{siz}$ \u4e0d\u76f8\u51b2\u7a81\uff0c\u76f4\u63a5\u5199\u4e24\u4e2a $\\texttt{split}$ \u51fd\u6570\u5373\u53ef\u3002\u5176\u4ed6\u7684\u64cd\u4f5c\u90fd\u662f\u6a21\u677f\u5566\u3002\n\n## \u7ec6\u8282\n\n1. \u540c\u4e00\u4e2a\u4eba\u7684\u6392\u540d\u53ef\u4ee5\u88ab\u66f4\u65b0\uff0c\u7528 map \u8bb0\u5f55\u4e00\u4e0b\u3002\u5982\u679c map \u91cc\u6709\u8fd9\u4e2a\u5143\u7d20\uff0c\u5148\u5220\u9664\u65e7\u7684\uff0c\u518d\u63d2\u5165\u65b0\u7684\u3002\n2. \u56e0\u4e3a\u6709\u65f6\u95f4\u7684\u5148\u540e\uff0c\u6240\u4ee5\u5e73\u8861\u6811\u91cc\u8981\u6309\u7167\u53cc\u5173\u952e\u5b57\u6392\u5e8f\u3002\n3. \u672c\u9898\u8f93\u5165\u6bd4\u8f83\u70e6\u4eba\uff0c\u8fd9\u91cc\u7528 string \u5f88\u65b9\u4fbf\u3002\n\n\uff08\u7b14\u8005\u8fd9\u91cc\u662f\u628a fhq \u5c01\u88c5\u8d77\u6765\u4e86\uff0c\u770b\u8d77\u6765\u6bd4\u8f83\u7b80\u6d01\uff09\n\n## Code\n```cpp\n#include <bits/stdc++.h>\n#define gc getchar\n#define PII pair<int, int>\nusing namespace std;\n\ninline int read() {\n\tint x = 0; bool flag = 0; char ch = gc();\n\tfor (;!isdigit(ch); ch = gc()) flag |= ch == '-';\n\tfor (; isdigit(ch); ch = gc()) x = (x << 1) + (x << 3) + (ch ^ 48);\n\treturn flag ? ~(x - 1) : x;\n}\n\nconst int N = 5e5 + 10;\nint n, v;\nstring str;\n\nstruct fhq {\n\tint rt, idx, x, y, z;\n\tint son[N][2], siz[N], val[N], tim[N], rnd[N];\n\tstring name[N];\n\tmap<string, PII> mp;\n\tint New(int v, int t, string s) {\n\t\tint u = ++idx;\n\t\tval[u] = v, tim[u] = t, name[u] = s;\n\t\trnd[u] = rand(), siz[u] = 1;\n\t\treturn u;\n\t}\n\tvoid update(int u) {\n\t\tsiz[u] = siz[son[u][0]] + siz[son[u][1]] + 1;\n\t}\n\tvoid split_val(int u, int v, int t, int &x, int &y) {\n\t\tif (!u) x = y = 0;\n\t\telse {\n\t\t\tif (val[u] > v || (val[u] == v && tim[u] < t)) x = u, split_val(son[x][1], v, t, son[x][1], y);\n\t\t\telse y = u, split_val(son[u][0], v, t, x, son[u][0]);\n\t\t\tupdate(u);\n\t\t}\n\t}\n\tvoid split_siz(int u, int k, int &x, int &y) {\n\t\tif (!u) x = y = 0;\n\t\telse {\n\t\t\tif (siz[son[u][0]] < k) x = u, split_siz(son[u][1], k - siz[son[u][0]] - 1, son[u][1], y);\n\t\t\telse y = u, split_siz(son[u][0], k, x, son[u][0]);\n\t\t\tupdate(u);\n\t\t}\n\t}//\u4e24\u4e2a split\n\tint merge(int x, int y) {\n\t\tif (!x || !y) return x + y;\n\t\tif (rnd[x] < rnd[y]) {\n\t\t\tson[x][1] = merge(son[x][1], y);\n\t\t\tupdate(x);\n\t\t\treturn x;\n\t\t} else {\n\t\t\tson[y][0] = merge(x, son[y][0]);\n\t\t\tupdate(y);\n\t\t\treturn y;\n\t\t}\n\t}\n\tvoid add(int v, int t, string s) {\n\t\tif (mp.find(s) != mp.end()) {\n\t\t\tsplit_val(rt, mp[s].first, mp[s].second, x, y);\n\t\t\tsplit_siz(y, 1, y, z);\n\t\t\trt = merge(x, z);\n\t\t}\n\t\tmp[s] = {v, t};\n\t\tsplit_val(rt, v, t, x, y);\n\t\trt = merge(merge(x, New(v, t, s)), y);\n\t}\n\tint rank(string s) {\n\t\tsplit_val(rt, mp[s].first, mp[s].second, x, y);\n\t\tint res = siz[x] + 1;\n\t\trt = merge(x, y);\n\t\treturn res;\n\t}\n\tvoid print(int u) {\n\t\tif (!u) return;\n\t\tprint(son[u][0]);\n\t\tcout << name[u] << \" \";\n\t\tprint(son[u][1]);\n\t}//\u76f4\u63a5\u4e2d\u5e8f\u904d\u5386\u8f93\u51fa\u5c31\u662f\u7b54\u6848\n\tvoid index(int k) {\n\t\tsplit_siz(rt, k - 1, x, y);\n\t\tsplit_siz(y, min(10, siz[y]), y, z);\n\t\tprint(y); puts(\"\");\n\t\trt = merge(merge(x, y), z);\n\t}\n} tr;\n\nint main() {\n\tn = read();\n\tfor (int t = 1; t <= n; t++) {\n\t\tcin >> str;\n\t\tif (str[0] == '+') v = read(), tr.add(v, t, str.substr(1));//\u8fd9\u91cc\u8981\u53bb\u6389\u5f00\u5934\u7684\u64cd\u4f5c\u7b26\n\t\telse if (str[0] == '?' && !isdigit(str[1])) printf(\"%d\\n\", tr.rank(str.substr(1)));\n\t\telse {\n\t\t\tint k = 0;\n\t\t\tfor (int i = 1; i < str.size(); i++)//\u662f\u4ece 1 \u5f00\u59cb\u54e6\n\t\t\t\tk = k * 10 + str[i] - '0';\n\t\t\ttr.index(k);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1672839155,
        "uid": 482965,
        "name": "Zheng07",
        "ccfLevel": 6,
        "title": "P4291 [HAOI2008]\u6392\u540d\u7cfb\u7edf \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u5e73\u8861\u6811\u9898\uff0c\u6211\u5c31\u4e60\u60ef\u5199 fhq \u4e86\u3002\n\n\u53e6\u5916\u8fd9\u9898\u662f\u6709\u591a\u5173\u952e\u5b57\u7684\uff0c\u53ef\u4ee5\u628a\u4e00\u4e2a\u4eba\u7684\u6743\u503c\u4e58\u4ee5\u4e00\u4e2a\u6781\u5927\u503c\uff08\u4e0d\u8981\u7206\u4e86\uff09\u52a0\u4e0a\u4ed6\u7684\u52a0\u5165\u7684\u65f6\u95f4\u3002\u540c\u65f6\u6743\u503c\u5206\u88c2\u548c\u6392\u540d\u5206\u88c2\u90fd\u8981\u7528\u3002\n\n\u5728\u5e73\u8861\u6811\u4e0a\u7ef4\u62a4 $val$ \u6570\u7ec4\uff08\u4e5f\u5c31\u662f\u6743\u503c\uff09\u3002\n\n\u8fd9\u9898\u6709\u4e09\u4e2a\u64cd\u4f5c\uff1a\n\n1. \u63d2\u5165\uff1a\u5148\u7528 map \u770b\u770b\u6709\u6ca1\u6709\u63d2\u5165\u8fc7\u6b64\u4eba\uff0c\u5982\u679c\u6709\u5c31\u5148\u5220\u9664\u539f\u6709\u8bb0\u5f55\uff0c\u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u6309\u6743\u503c\u5206\u88c2\u3002\n\n1. \u67e5\u8be2\uff08Name\uff09\uff1a\u7528map\u627e\u51fa\u4ed6\u7684\u52a0\u5165\u65f6\u95f4\uff0c\u6309\u6743\u503c\u5206\u88c2\uff0c\u627e\u51fa\u4ed6\u7684\u6392\u540d\u3002\n\n1. \u67e5\u8be2\uff08Index\uff09\uff1a\u6309\u6392\u540d\u5206\u88c2\u51fa\u8981\u6c42\u7684\u524d\u51e0\u4e2a\uff0c\u8f93\u51fa\u5373\u53ef\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 114514\n#define M 3000001\n#define ll long long\n#define re register\n#define in inline\n#define ls c[now][0]\n#define rs c[now][1]\nll n;\nll val[M],size[M],rd[M],c[M][2],bh[M];\nstring ren[M];\nll root,tot,ans,total;\nll x,y,z;\nchar ch;\nstring name;\nmap <string,ll> id;\n//\u4ee5\u4e0b\u90fd\u4e3a\u677f\u5b50\nin void update(ll now){\n\tsize[now]=size[ls]+size[rs]+1;\n}\nin void split_val(ll now,ll k,ll &x,ll &y){\n\tif(!now){\n\t\tx=y=0;\n\t\treturn;\n\t} \n\telse if(val[now]<=k){\n\t\tx=now;\n\t\tsplit_val(rs,k,rs,y);\n\t}\n\telse{\n\t\ty=now;\n\t\tsplit_val(ls,k,x,ls);\n\t}\n\tupdate(now);\n}\nin void split_pm(ll now,ll k,ll &x,ll &y){\n\tif(!now){\n\t\tx=y=0;\n\t\treturn;\n\t} \n\telse{\n\t\tif(k<=size[ls]){\n\t\t\ty=now;\n\t\t\tsplit_pm(ls,k,x,ls);\n\t\t}\n\t\telse{\n\t\t\tx=now;\n\t\t\tsplit_pm(rs,k-size[ls]-1,rs,y);\n\t\t}\n\t\tupdate(now);\n\t}\n}\nin ll merge(ll x,ll y){\n\tif(!x||!y) return x+y;\n\tif(rd[x]<rd[y]){\n\t\tc[x][1]=merge(c[x][1],y);\n\t\tupdate(x);\n\t\treturn x;\n\t}\n\telse{\n\t\tc[y][0]=merge(x,c[y][0]);\n\t\tupdate(y);\n\t\treturn y;\n\t}\n}\nin void deleted(ll v){\n\tsplit_val(root,v,x,z);\n\tsplit_val(x,v-1,x,y);\n\ty=merge(c[y][0],c[y][1]);\n\troot=merge(merge(x,y),z);\n}\nin ll build(string s,ll v,ll t){\n\tsize[++tot]=1;\n\trd[tot]=rand();\n\tval[tot]=M*v-t; //\u591a\u5173\u952e\u5b57\uff0c\u6ee1\u8db3val\uff0c\u518d\u6ee1\u8db3t\uff0c\u7ef4\u62a4val\u503c\u3002\n\tren[tot]=s;\n\treturn tot;\n}\nin void insert(string s,ll v,ll t){\n\tif(id[s]) deleted(val[id[s]]);\n\tid[s]=build(s,v,t);\n\tsplit_val(root,val[tot],x,y);\n\troot=merge(merge(x,tot),y);\n}\nin ll query_rank(ll k){\n\tsplit_val(root,val[k],x,y);\n\tans=size[y]+1;\n\troot=merge(x,y);\n\tcout<<ans<<'\\n';\n}\nin void print_(ll now){\n\tif(!now) return;\n\tprint_(rs);\n\t//cout<<\"QWQWQ\"<<endl;\n\tcout<<ren[now]<<\" \";\n\tprint_(ls);\n}\nin ll index(ll k){\n\tll now=size[root];\n\tsplit_pm(root,now-k+1,x,z);\n\tsplit_pm(x,max(now-k-9,0ll),x,y); //\u7528long long \u8981\u52a00ll\n\tprint_(y);\n\tcout<<'\\n';\n\troot=merge(merge(x,y),z);\n}\nint main(){\n\tll k;\n\tcin>>n;\n\tfor(int i=1;i<=n;++i){\n\t\tcin>>ch>>name;\n\t\tif(ch=='+'){\n\t\t\tcin>>k;\n\t\t\tinsert(name,k,i);\n\t\t}\n\t\telse{\n\t\t\tif(name[0]>'9') query_rank(id[name]);\n\t\t\telse index(atoi(name.c_str()));\n\t\t\t//\u8fd9\u91cc\u7528\u4e86\u4e00\u4e2aatoi\uff0c\u529f\u80fd\u662f\u5c06\u5b57\u7b26\u4e32\u8f6c\u6210\u6574\u578b\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u7136\u800c\u8fd9\u4efd\u4ee3\u7801\u5374\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u4e24\u4e2a\u67e5\u8be2\u7684\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u6211\u5374\u7528\u7684 ll \u7c7b\u578b\uff0c\u4e0d\u8fc7\u8fd9\u9898\u4e5f\u5c31\u795e\u5947\u7684\u8fc7\u4e86\u3002\u4f46\u53bb\u505a[\u53cc\u500d\u7ecf\u9a8c](https://www.luogu.com.cn/problem/P2584)\u7684\u65f6\u5019\u5c31\u56e0\u4e3a\u8fd9\u4e2a\u95ee\u9898\u628a\u6211\u6574\u5f97\u5feb\u5fc3\u808c\u6897\u585e\u4e86\u3002\u6574\u6574\u4ea4\u4e86\u4e09\u9875\u591a\uff0c\u4e09\u56de\u554a\u4e09\u56de\uff01",
        "postTime": 1671413356,
        "uid": 526677,
        "name": "mzyc\u306e\u55b0\u79cd",
        "ccfLevel": 0,
        "title": "P4291 [HAOI2008]\u6392\u540d\u7cfb\u7edf"
    },
    {
        "content": "\u8fd9\u9053\u662f\u4e00\u9053[\u53cc\u500d\u7ecf\u9a8c](https://www.luogu.com.cn/problem/P2584)\n\n-----\n\n\u672c\u9898\u662f\u4e00\u9053\u5e73\u8861\u6811\u7684\u6a21\u677f\u9898\uff0c\u5bf9\u4e8e\u60f3\u7ec3\u4e60\u5e73\u8861\u6811\u57fa\u672c\u77e5\u8bc6\u7684\u540c\u5b66\u4eec\u5f88\u6709\u5e2e\u52a9\u3002\n\n~~\u4f46\u662f\u6211\u5c31\u662f\u7528 pb_ds \u6c34\u4e86\u8fc7\u53bb\u3002~~\n\n-----\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u540d\u5b57\uff0c\u4f7f\u7528 map \u5b58\u50a8\u540d\u5b57\u7684\u7f16\u53f7\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u7f16\u53f7\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u8fd9\u4e2a\u7f16\u53f7\u7684\u503c\u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21\u66f4\u65b0\uff0c\u76f4\u63a5\u628a\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\u5220\u6389\uff0c\u518d\u52a0\u5165\u8fd9\u4e2a\u8282\u70b9\u3002\uff08\u6ce8\u610f\u66f4\u65b0\u4e2a\u5e73\u8861\u6811\u6570\uff09\n\n\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u5229\u7528 ``find_by_order(x)`` \u548c ``T.order_of_key(x)`` \u6765\u5904\u7406\u95ee\u9898\u3002\n\n\u5c31\u8fd9\u6837\uff0c\u4e00\u9053\u5e73\u8861\u6811\u7684\u7d2b\u9898\u5c31\u88ab\u6211\u4eec\u572880\u884c\u4e4b\u5185\u7ed9\u6c34\u6389\u4e86\uff01\n\n-----\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/tree_policy.hpp> \nusing namespace std;\nint cnt=0;\nmap<string,int> mp;\nint val[250010];\nstruct Node{\n\tint v,id;\n\tbool operator<(const Node &rhs) const{\n\t\tif(v!=rhs.v)\n\t\t{\n\t\t\treturn v>rhs.v;\n\t\t}\n\t\treturn id<rhs.id;\n\t}\n};\n__gnu_pbds::tree<Node,__gnu_pbds::null_type,less<Node>,\n\t\t\t\t  __gnu_pbds::rb_tree_tag,\n\t\t\t\t  __gnu_pbds::tree_order_statistics_node_update>\nT;\nstring Name[250010]; \nint main()\n{\n\tint Case;\n\tscanf(\"%d\",&Case);\n\tint tot=0;\n\twhile(Case--)\n\t{\n\t\tchar opt;\n\t\tstring nm;\n\t\tcin>>opt>>nm;\n\t\tif(opt=='+')\n\t\t{\n\t\t\tif(mp[nm])\n\t\t\t{\n\t\t\t\tint pos=mp[nm];\n\t\t\t\tNode tmp;\n\t\t\t\tT.erase((Node){val[pos],pos});\n\t\t\t\ttot--;\n\t\t\t}\n\t\t\tmp[nm]=++cnt;\n\t\t\tscanf(\"%d\",&val[cnt]);\n\t\t\tNode tmp;\n\t\t\ttmp.v=val[cnt];\n\t\t\ttmp.id=cnt;\n\t\t\tT.insert(tmp);\n\t\t\tName[cnt]=nm;\n\t\t\ttot++;\n\t\t}else{\n\t\t\tif(isdigit(nm[0]))\n\t\t\t{\n\t\t\t\tint x=0;\n\t\t\t\tfor(int i=0;i<nm.size();i++)\n\t\t\t\t{\n\t\t\t\t\tx=x*10+nm[i]-'0';\n\t\t\t\t}\n\t\t\t\tint N=min(tot,x+9);\n\t\t\t\tfor(int i=x-1;i<=N-1;i++)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%s \",Name[T.find_by_order(i)->id].c_str());\n\t\t\t\t}\n\t\t\t\tputchar('\\n');\n\t\t\t}else{\n\t\t\t\tint id=mp[nm];\n\t\t\t\tprintf(\"%d\\n\",T.order_of_key((Node){val[id],id})+1);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u56e0\u4e3a pb_ds \u5e38\u6570\u5de8\u5927\uff0c\u6240\u4ee5\u4e0d\u5f00 O2 \u53ea\u6709 90 \u5206\uff0c\u6700\u540e\u4e00\u4e2a\u70b9 TLE1.07 \u79d2\u3002\n\n\u5f53\u7136\uff0c\u4f60\u52a0\u4e0a\u5feb\u8bfb\u548c\u5feb\u8f93\u4e5f\u662f\u53ef\u4ee5\u7684\u2014\u2014\u53ea\u662f\u6211\u61d2\u5f97\u6539\n\n----\n\n\u53e6\u9644\uff1a\u6839\u636e CCF \u7684\u6700\u65b0\u89c4\u5219\uff0cpb_ds \u5df2\u7ecf\u80fd\u5728\u6b63\u89c4\u6bd4\u8d5b\u4e2d\u4f7f\u7528\u5566\uff01\u597d\u65f6\u4ee3\uff0c\u6765\u4e34\u529b\uff01\uff01\uff01\n\n[pb_ds \u7b80\u4ecb](https://oi-wiki.org/lang/pb-ds/)",
        "postTime": 1636630142,
        "uid": 358739,
        "name": "BFSDFS123",
        "ccfLevel": 0,
        "title": "P4291 [HAOI2008]\u6392\u540d\u7cfb\u7edf \u9898\u89e3"
    },
    {
        "content": "### [P4291 [HAOI2008]\u6392\u540d\u7cfb\u7edf](https://www.luogu.com.cn/problem/P4291)\n\n\n\n\u5230\u76ee\u524d\uff0c\u9898\u89e3\u533a\u8fd8\u6ca1\u6709 fhq-Treap \u7684\u9898\u89e3 qwq\uff0c\u90a3\u6211\u53d1\u4e00\u7bc7 fhq -Treap \u7684\u9898\u89e3\u4f9b fhq-Treap \u73a9\u5bb6 debug \u4f7f\u7528\u3002\n\n#### \u9898\u610f\u7b80\u8ff0\uff1a\n\n\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u63d2\u5165\u5220\u9664\u5143\u7d20\uff0c\u67e5\u8be2\u5143\u7d20\u6392\u540d\uff0c\u67e5\u8be2\u4e00\u4e2a\u533a\u6bb5\u5185\u7684\u5143\u7d20\u3002\uff08\u5143\u7d20\u6570\u503c\u76f8\u7b49\u65f6\uff0c\u6309\u65f6\u95f4\u6233\u6392\u5e8f\uff09\n\n#### Solution\uff1a\n\n\u5982\u679c\u5c06\u62ec\u53f7\u5185\u7684\u8bdd\u53bb\u6389\u7684\u8bdd\uff0c\u90a3\u8fd9\u5c31\u662f\u6700\u88f8\u7684\u5e73\u8861\u6811\u6a21\u677f\u9898\u4e86\u3002\u90a3\u4e48\u5982\u4f55\u7ef4\u62a4\u65f6\u95f4\u65f6\u95f4\u6233\u5462\uff1f\u8003\u8651\u5c06\u6210\u7ee9\u4e0e\u65f6\u95f4\u6233\u5c01\u88c5\u6210\u4e00\u4e2a\u7ed3\u6784\u4f53 rec\uff0c\u5c06 rec \u4f5c\u4e3a\u6743\u503c\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u3002\n\n\u7ef4\u62a4\u7ed3\u6784\u4f53\u4e0e\u7ef4\u62a4\u6570\u503c\u7684\u4e0d\u540c\u70b9\u662f\uff0c\u5728 split \u64cd\u4f5c\u65f6\u8981\u6d89\u53ca\u5bf9\u6743\u503c\u7684\u6bd4\u8f83\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u8f7d\u5173\u7cfb\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff0c\u5176\u4f59\u64cd\u4f5c\u4e0d\u53d8\u3002\n\n\u8fd8\u6709\u4e00\u70b9\u5dee\u5f02\uff0c\u5728\u5220\u9664\u64cd\u4f5c\u65f6\u7a0d\u6709\u4e0d\u540c\u3002\n\n```cpp\nvoid del(rec v) {\t// \u7ef4\u62a4\u7ed3\u6784\u4f53\n\tpair<int, int> p = split(root, v);\n\trec v2(v.sco, v.id - 1);\t// \u786e\u4fdd \u53ea\u5206\u79bb\u51fa \u6743\u503c\u4e3a v \u7684\u4e00\u4e2a\u8282\u70b9  \n\tpair<int, int> p2 = split(p.first, v2);\n\tp2.second = merge(z[p2.second].l, z[p2.second].r);\n\troot = merge(merge(p2.first, p2.second), p.second);\n}\n```\n\n\u4e0a\u9762 $v2$ \u5c31\u76f8\u5f53\u4e8e\u4e0b\u9762\u7684 $v - 1$\uff0c\u786e\u4fdd\u53ea\u5206\u79bb\u51fa\u8bb0\u5f55\u4e3a v.sco \u65f6\u95f4\u6233\u4e3a v.id \u8fd9\u4e00\u4e2a\u8282\u70b9 \u3002\n\n```cpp\nvoid del(int v) {\t// \u7ef4\u62a4\u6570\u503c\n\tpair<int, int> p = split(root, v); \n\tpair<int, int> p2 = split(p.first, v - 1);\n\tp2.second = merge(z[p2.second].l, z[p2.second].r);\n\troot = merge(merge(p2.first, p2.second), p.second);\n}\n```\n\n\n\n\u4e0d\u5f00 O2 $\\texttt{2.41s}$\uff0c\u5438\u6c27\u4e4b\u540e $\\texttt{995ms}$\u3002\u4e3b\u8981\u662f\u56e0\u4e3a\u6211 split \u4e60\u60ef\u4f7f\u7528 pair\uff0c\u7136\u540e\u8fd8\u6709 map \u7ef4\u62a4\u5b57\u7b26\u4e32\u7684\u6620\u5c04\uff0c\u6240\u4ee5\u4e0d\u5438\u6c27\u6709\u70b9\u6162\u3002\n\n#### Code:\n\n```cpp\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <map>\n#include <string>\nusing namespace std;\ntypedef long long ll;\ninline ll read() {\n\tll ans = 0;\n\tchar last = ' ', ch = getchar();\n\twhile (ch < '0' || ch > '9') last = ch, ch = getchar();\n\twhile (ch >= '0' && ch <= '9') ans = ans * 10 + ch -'0', ch = getchar();\n\tif (last == '-') return -ans;\n\treturn ans;\n}\n\nint read(char *s) {\t\t// \u5b57\u7b26\u4e32\u8f6c\u6570\u5b57\n\tint ans = 0;\n\twhile (*s != '\\0') {\n\t\tans = ans * 10 + (*s) - '0';\n \t\ts++;\n\t}\n\treturn ans;\n}\n\nconst int INF = 0x3f3f3f3f;\nconst int N = 2.5e5 + 5;\n\n\nint root,  n;\nmap<string, int> m;\nint tot, cnt, times;\nstruct rec {\t// \u5e73\u8861\u6811\u4e2d\u7ef4\u62a4\u7684\u6743\u503c v\n\tint sco, id, ind;\t//sco \u6210\u7ee9 id \u65f6\u95f4\u6233 ind \u5728\u6570\u7ec4 a \u4e2d\u7684\u4e0b\u6807\n\trec() {}\n\trec(int sco, int id): sco(sco), id(id){} \n};\n\nstruct node {\n\tint l, r, size, key;\n\trec v;\n} z[N];\n\nstruct entity {\n\trec v;\n\tchar name[15];\n}a[N];\n\n/*\n\t\u91cd\u8f7d\u8fd0\u7b97\u7b26\n\t\u4ee5 \u6210\u7ee9 \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57 \u964d\u5e8f\uff0c \u65f6\u95f4\u6233 \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57 \u5347\u5e8f\n*/\nbool operator<(const rec &a, const rec &b) {\n\treturn (a.sco > b.sco) || (a.sco == b.sco && a.id < b.id);\n}\nbool operator==(const rec &a, const rec &b) {\n\treturn a.sco == b.sco && a.id == b.id;\n}\nbool operator<=(const rec &a, const rec &b) {\n\treturn a < b || a == b;\n}\nvoid update(int x) {\n\tz[x].size = z[z[x].l].size + z[z[x].r].size + 1;\n}\n\nint merge(int x, int y) {\n\tif (!x || !y) return x | y;\n\tif (z[x].key > z[y].key) {\n\t\tz[x].r = merge(z[x].r, y);\n\t\tupdate(x);\n\t\treturn x;\n\t} else {\n\t\tz[y].l = merge(x, z[y].l);\n\t\tupdate(y);\n\t\treturn y;\n\t}\n}\n\npair<int, int> split(int x, rec v) {\n\tif (x == 0) return make_pair(0, 0);\n\tif (z[x].v <= v) {\n\t\tpair<int, int> p = split(z[x].r, v);\n\t\tz[x].r = p.first;\n\t\tupdate(x);\n\t\treturn make_pair(x, p.second);\n\t} else {\n\t\tpair<int, int> p = split(z[x].l, v);\n\t\tz[x].l = p.second;\n\t\tupdate(x);\n\t\treturn make_pair(p.first, x);\n\t}\n}\n\nint newnode(rec v) {\n\tz[++cnt].key = rand();\n\tz[cnt].l = z[cnt].r = 0;\n\tz[cnt].size = 1;\n\tz[cnt].v = v;\n\treturn cnt;\n}\n\nvoid insert(rec v) {\n\tpair<int, int> p = split(root, v);\n\troot = merge(merge(p.first, newnode(v)), p.second);\n}\n\nvoid del(rec v) {\n\tpair<int, int> p = split(root, v);\n\trec v2(v.sco, v.id - 1);\t// \u786e\u4fdd \u53ea\u5206\u79bb\u51fa \u6743\u503c\u4e3a v \u7684\u4e00\u4e2a\u8282\u70b9  \n\tpair<int, int> p2 = split(p.first, v2);\n\tp2.second = merge(z[p2.second].l, z[p2.second].r);\n\troot = merge(merge(p2.first, p2.second), p.second);\n}\n\nrec kth(int x, int k) {\n\tif (z[z[x].l].size >= k) {\n\t\treturn kth(z[x].l, k);\n\t} else if (z[z[x].l].size + 1 == k) return z[x].v;\n\telse return kth(z[x].r, k - z[z[x].l].size - 1);\n}\n\nint rnk(rec v) {\n\tv.id--;\n\tpair<int, int> p = split(root, v);\n\tint ans = z[p.first].size + 1;\n\troot = merge(p.first, p.second);\n\treturn ans;\n}\n\nvoid print(int x) {\t// \u4e2d\u5e8f\u904d\u5386\u8f93\u51fa\n\tif (z[x].l) print(z[x].l);\n\tprintf(\"%s \", a[z[x].v.ind].name);\n\tif (z[x].r) print(z[x].r);\n}\nvoid getRank(int x) {\t// \u5206\u79bb\u51fa \u6392\u540d\u5728 [x, x + 9] \u7684 \u5b50\u6811\n\trec l = kth(root, x), r = kth(root, min(x + 9, tot));\n\tl.id--;\n\tpair<int, int> p = split(root, l);\n\tpair<int, int> p2 = split(p.second, r);\n\tprint(p2.first);\n\tprintf(\"\\n\");\n\troot = merge(p.first, merge(p2.first, p2.second));\n}\n\nchar op[105];\nstring str;\nint ind, x, tree;\nint main() {\n\t//freopen(\".in\", \"r\", stdin);\n\t//freopen(\".out\", \"w\", stdout);\n\tn = read();\n\tfor (int i = 1; i <= n; ++i) {\n\t\tscanf(\"%s\", op);\n\t\tif (op[0] == '+') {\n\t\t\tx = read();\n\t\t\t++times;\t// \u66f4\u65b0\u65f6\u95f4\u6233\n\t\t\tstr = op + 1;\n\t\t\tind = m[str];\n\t\t\tif (ind) {\n\t\t\t\tdel(a[ind].v);\t// \u5220\u6389\u539f\u6709\u8bb0\u5f55\n\t\t\t} else {\n\t\t\t\tm[str] = ++tot;\t// \u8be5\u7528\u6237\u7b2c\u4e00\u6b21\u4e0a\u4f20\u8bb0\u5f55\u65f6 \u5c06\u5176\u653e\u5165\u6570\u7ec4a\u4e2d\n\t\t\t\tind = tot;\t\n\t\t\t\tfor (int i = 0; i < (int)str.length(); ++i) {\n\t\t\t\t\ta[ind].name[i] = str[i];\n\t\t\t\t}\n\t\t\t\ta[ind].v.ind = ind;\n\t\t\t}\n\t\t\ta[ind].v.sco = x;\n\t\t\ta[ind].v.id = times;\n\t\t\tinsert(a[ind].v);\t// \u63d2\u5165\u8bb0\u5f55\n\t\t} else {\n\t\t\tif (op[1] >='0' && op[1] <= '9') {\t// \u5bf9\u5e94\u8be2\u95ee ?Index\n\t\t\t\tx = read(op + 1);\n\t\t\t\tgetRank(x);\n\t\t\t} else {\t//\u8be2\u95ee ?Name\n\t\t\t\tstr = op + 1;\n\t\t\t\tind = m[str];\n\t\t\t\tprintf(\"%d\\n\", rnk(a[ind].v));\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1584265570,
        "uid": 156945,
        "name": "Stream\u6708",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4291 \u3010[HAOI2008]\u6392\u540d\u7cfb\u7edf\u3011"
    },
    {
        "content": "# \u5514\u59c6\n\u770b\u6ca1\u6709treap\u7684\u9898\u89e3\u5c31\u6765\u4e00\u7bc7\u5427\n\n(\u5e38\u6570\u6709\u70b9\u5927\uff0c\u5927\u4f6c\u8ffd\u6c42\u901f\u5ea6\u8fd8\u662f\u7b97\u4e86\n\n------------\n- \u9996\u5148\u4e0d\u8003\u8651\u4e0a\u4f20\u65f6\u95f4\u8fd9\u4e2a\u56e0\u7d20\uff0c\u90a3\u5c31\u662f\u4e00\u4e2a\u6807\u51c6\u7684\u540d\u6b21\u6811\uff0c\u60f3\u5fc5\u5927\u5bb6\u90fd\u4f1a\u4e86\u3002\n- \u800c\u52a0\u4e86\u65f6\u95f4\u8fd9\u4e2a\u56e0\u7d20\uff0c\u6211\u4eec\u5c31\u6709\u4e24\u4e2a\u5173\u952e\u5b57\u4e86\uff0c\u6240\u4ee5\u4ee5\u5206\u6570\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4e0a\u4f20\u65f6\u95f4\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u7ef4\u62a4\u4e00\u4e2a\u540d\u6b21\u6811\uff08\u5176\u5b9e\u4e5f\u5c31\u662f\u5728\u5927\u5c0f\u76f8\u540c\u7684\u65f6\u5019\u52a0\u4e2a\u7279\u5224\uff09\uff0c\u5c31\u83ab\u5f97\u95ee\u9898\u4e86\u3002\n- \u7136\u9e45\u6211\u4eec\u53d1\u73b0\uff0ctreap\u597d\u50cf\u5f88\u96be\u8fde\u7eed\u8bbf\u95ee\u591a\u4e2a\u8282\u70b9\uff0c\u56e0\u4e3a\u4e0d\u80fd\u50cfsplay\u90a3\u6837\u65cb\u8f6c\uff08jiojio\uff0c\u6211\u53d1\u73b0treap\u662f\u6709\u6781\u9650\u7684\uff01\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u8fdb\u884c\u5341\u6b21\u67e5\u8be2\uff08\u8fd9\u5c31\u662f\u5e38\u6570\u5de8\u5927\u7684\u539f\u56e0QAQ\uff0c\u4e0d\u8fc7\u4eb2\u6d4b\u7a33\u8fc7\uff09\n\n\u8fa3\u4e48\u4e0a\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 1000100\n#define INF 2147483647\nusing namespace std;\nint sum=0,R=0;\nint n;\nstruct qwq{\n    int key;\n    int t;\n};\nstruct node{\n       int son[2];\n       int num;\n       int size;\n       int key;\n       int rd;\n       int time;\n       string s; \n}tree[MAXN];\nvoid up(int now){\n     tree[now].size=tree[tree[now].son[0]].size+tree[tree[now].son[1]].size+tree[now].num;\n}\nvoid rotate(int &now,int d){\n     int to=tree[now].son[!d];\n     tree[now].son[!d]=tree[to].son[d];\n     tree[to].son[d]=now;\n     up(now);\n     up(to);\n     now=to;\n}\nvoid change(int &now,int x,int y,string s){\n     if (!now){now=++sum;tree[now].size=tree[now].num=1;tree[now].key=x;tree[now].rd=rand();tree[now].time=y;tree[now].s=s;return;} \n     int tmp=(x>tree[now].key);\n     change(tree[now].son[tmp],x,y,s);\n     if (tree[now].rd>tree[tree[now].son[tmp]].rd)rotate(now,!tmp);\n     up(now);\n}\nvoid del(int &now,int x,int y){\n     if(!now)return;\n     if (x==tree[now].key&&y==tree[now].time){\n                       if(!tree[now].son[0]&&!tree[now].son[1]){\n                                                      tree[now].num--;tree[now].size--;\n                                                      if(!tree[now].num)now=0;\n                       }\n                       else if(tree[now].son[0]&&!tree[now].son[1]){\n                                                          rotate(now,1);\n                                                          del(tree[now].son[1],x,y);\n                       }\n                       else if(!tree[now].son[0]&&tree[now].son[1]){\n                                                          rotate(now,0);\n                                                          del(tree[now].son[0],x,y);\n                       }\n                       else {int tmp=(tree[tree[now].son[0]].rd>tree[tree[now].son[1]].rd);\n                            rotate(now,tmp);\n                            del(tree[now].son[tmp],x,y);\n                       }\n     }\n     else{\n          int tmp;\n          if (x>tree[now].key||(x==tree[now].key&&y<tree[now].time))tmp=1;\n          else tmp=0;\n          del(tree[now].son[tmp],x,y);\n     }\n     up(now);\n}\nint rank(int now,int x,int y){\n    if (!now)return 0;\n    if (tree[now].key==x&&tree[now].time==y)return tree[tree[now].son[1]].size+1;\n    else if (tree[now].key<x||(tree[now].key==x&&tree[now].time>y)) return rank(tree[now].son[1],x,y);\n    else return tree[tree[now].son[1]].size+tree[now].num+rank(tree[now].son[0],x,y);\n}\nint find(int now,int x){\n    if (!now)return 0;\n    if (tree[tree[now].son[1]].size>=x)return find(tree[now].son[1],x);\n    else if (tree[tree[now].son[1]].size+tree[now].num>=x)return now;\n    else return find(tree[now].son[0],x-tree[tree[now].son[1]].size-tree[now].num);\n}\nint main(){\n    map<string,qwq> imp;\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        string s;\n        cin>>s;\n        if (s[0]=='+'){\n            int a;\n            s=s.substr(1);\n            scanf(\"%d\",&a);\n            if (imp.count(s))del(R,imp[s].key,imp[s].t);\n            imp[s].key=a;\n            imp[s].t=i;\n            change(R,a,i,s);\n        }\n        else {\n            if (s[1]<='9'&&s[1]>='0'){\n                int a=0;\n                for(int i=1;i<=s.length()-1;i++)\n                    a=a*10+s[i]-'0';\n                for(int i=a;i<=a+9;i++){\n                    int b=find(R,i);\n                    if (!b)break;\n                    else cout<<tree[b].s<<\" \";\n                }\n                printf(\"\\n\");\n            } \n            else {\n                qwq a;\n                s=s.substr(1);\n                a=imp[s];\n                printf(\"%d\\n\",rank(R,a.key,a.t)); \n            }\n        }\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1554641054,
        "uid": 118273,
        "name": "\u543e\u738b\u7f8e\u5982\u753b",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4291 \u3010[HAOI2008]\u6392\u540d\u7cfb\u7edf\u3011"
    },
    {
        "content": "\u4e00\u773c\u770b\u53bb\u5e73\u8861\u6811\u88f8\u9898\uff0c\u6211\u7528$Splay$\u5b9e\u73b0\u7684\u3002\n\n\u672c\u9898\u7684\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u7ef4\u62a4\u540d\u5b57\u548c\u7f16\u53f7\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u73b0\u6709\u7684\u9898\u89e3\u90fd\u662f\u7528$map+$\u5b57\u7b26\u4e32\u54c8\u5e0c\u7684\u65b9\u6cd5\u6765\u7ef4\u62a4\u7684\u3002\n\n\u4f46\u8fd8\u6709\u66f4\u5feb\u7684\u65b9\u6cd5\uff1a$Trie$\n\n\u7801\u91cf\u771f\u7684\u4e0d\u5927\uff0c\u8dd1\u7684\u98de\u5feb\uff08\u603b\u5171479ms\uff0c\u672a\u5438\u6c27\uff09\n\n\u53e6\u5916\u672c\u9898\u8fd8\u6709\u4e2a\u5751\uff0cdebug\u4e86\u597d\u4e45\uff0c\u5c31\u662f\u4f1a\u51fa\u73b0\u5206\u6570\u975e\u5e38\u5927\u7684\u7ae5\u978b\uff0c\u8fbe\u5230\u4e86\u5341\u4f4d\u6570\uff0c\u5982\u679c\u4f60\u7684\u865a\u70b9\u7684\u503c\u4e0d\u591f\u5927\u7684\u8bdd\u5c31\u4f1a\u50cf\u6211\u4e00\u6837TLE\uff0c\u6240\u4ee5INF\u8fd8\u662f\u90fd\u8bbe\u4e3a2147483647\u5427\n\n\u4e00\u4e9b\u7ec6\u8282\u770b\u4ee3\u7801\u5427\u3002\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <cstdlib>\n#include <ctime>\n#include <map>\nusing namespace std;\nconst int MAXN = 250010;\ninline int read(){\n    int s = 0;\n    char ch = getchar();\n    while(ch < '0' || ch > '9')ch = getchar(); \n    while(ch >= '0' && ch <= '9'){ s = s * 10 + ch - '0'; ch = getchar(); }\n    return s;\n}\nstruct info{\n    int val, id;\n    int operator > (const info A) const{\n        return val == A.val ? id < A.id : val > A.val;\n    }\n};\nstruct splay{\n    info val;\n    int size, ch[2], fa;\n}t[MAXN];\nint root, num, T;\nstruct Trie{    //\u5b57\u5178\u6811\u7ef4\u62a4\u540d\u5b57\u548c\u7f16\u53f7\u6620\u5c04\u5173\u7cfb\n\tint val;    //\u7f16\u53f7\n\tTrie *ch[26];\n\tTrie(){ for(int i = 0; i < 26; ++i) ch[i] = NULL; val = 0; }\n}rt;\nint Insert(char *s, int pos){ //\u5b57\u5178\u6811\u63d2\u5165\uff0c\u6210\u529f\u8fd4\u56de0\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u4e86\u5c31\u8fd4\u56de\u5df2\u6709\u7684\u7f16\u53f7\n\tint len = strlen(s);\n\tTrie *u = &rt;\n\tfor(int i = 0; i < len; ++i){\n\t   if(u->ch[s[i] - 'A'] == NULL) u->ch[s[i] - 'A'] = new Trie();\n\t   u = u->ch[s[i] - 'A'];\n\t}\n\tif(u->val) return u->val;\n\tu->val = pos;\n\treturn 0;\n}\ninline void pushup(int x){\n    t[x].size = t[t[x].ch[0]].size + t[t[x].ch[1]].size + 1;\n}\ninline void rotate(int x){\n    int y = t[x].fa, z = t[y].fa, k = t[y].ch[1] == x;\n    t[y].ch[k] = t[x].ch[k ^ 1]; t[t[x].ch[k ^ 1]].fa = y;\n    t[y].fa = x; t[x].ch[k ^ 1] = y;\n    t[x].fa = z; t[z].ch[t[z].ch[1] == y] = x;\n    pushup(y); pushup(x);\n}\ninline void Splay(int x, int goal){\n    int y, z;\n    while(t[x].fa != goal){\n        y = t[x].fa; z = t[y].fa;\n        if(z != goal) rotate((t[y].ch[1] == x) ^ (t[z].ch[1] == y) ? x : y);\n        rotate(x);\n    }\n    if(!goal) root = x;\n}\ninline int insert(info x, int num){  //Splay\u63d2\u5165\n    if(!root){ root = num; t[root].val = x; t[root].size = 1; return root; }\n    int u = root, fa = 0;\n    while(u){ fa = u; u = t[u].ch[x > t[u].val]; }\n    int id = num; t[id].val = x; t[id].size = 1; t[id].fa = fa; if(fa) t[fa].ch[x > t[fa].val] = id;\n    Splay(id, 0);\n    return id;\n}\nint limit, tmp, Time;\nvoid find(int x){\n    int u = root;\n    while(233){\n        if(t[t[u].ch[0]].size == x - 1) break;\n        if(t[t[u].ch[0]].size >= x) u = t[u].ch[0];\n        else x -= t[t[u].ch[0]].size + 1, u = t[u].ch[1];\n    }\n    Splay(u, 0);\n}\nchar ch, name[MAXN][12];\nint len[MAXN];\nvoid dfs(int x){\n    if(!limit) return;   //\u9898\u4e2d\u7684\u6392\u540d\u662f\u4ece\u5927\u5230\u5c0f\u7684\uff0c\u6240\u4ee5\u5148\u904d\u5386\u53f3\u513f\u5b50\n    if(t[x].ch[1]) dfs(t[x].ch[1]);\n    if(!limit) return;\n    for(int i = 0; i < len[x]; ++i)\n       putchar(name[x][i]);\n    putchar(' ');\n    --limit;\n    if(t[x].ch[0]) dfs(t[x].ch[0]);\n}\nint next(int x, int mode){\n    Splay(x, 0);\n    int u = t[root].ch[mode]; \n    while(t[u].ch[!mode]) u = t[u].ch[!mode];\n    return u;\n}\nchar s[12];\nint pq;\nint main(){\n\t//freopen(\"1.txt\",\"r\",stdin);\n\t//freopen(\"2.txt\",\"w\",stdout);\n    T = read(); insert((info){ -2147483646, 9999999 }, ++num); insert((info){ 2147483646, -1 }, ++num);\n    while(T--){\n        ch = getchar();\n        while(ch != '+' && ch != '?') ch = getchar();\n        if(ch == '+'){ \n          scanf(\"%s\", s);\n          if(pq = Insert(s, num + 1)){ //\u5df2\u7ecf\u5b58\u5728\u4e86\n          \tint l = next(pq, 0), r = next(pq, 1);  //\u5220\u4e86\u518d\u63d2\u8fdb\u53bb\n            Splay(l, 0);\n            Splay(r, l);\n            t[t[root].ch[1]].ch[0] = 0;\n            Splay(t[root].ch[1], 0);\n            insert((info){ read(), ++Time }, pq);\n          }\n          else{\n            insert((info){read(), ++Time}, ++num); \n            memcpy(name[num], s, sizeof s);\n            len[num] = strlen(name[num]);\n          }\n        }\n        if(ch == '?'){\n            ch = getchar();\n            if(ch >= '0' && ch <= '9'){\n                tmp = 0;\n                while(ch >= '0' && ch <= '9'){ tmp = tmp * 10 + ch - '0'; ch = getchar(); }\n                find(num - tmp);  //\u56e0\u4e3a\u9898\u4e2d\u7684\u6392\u540d\u662f\u4ece\u5927\u5230\u5c0f\u7684\uff0c\u800c\u5e73\u8861\u6811\u6392\u540d\u662f\u4ece\u5c0f\u5230\u5927\u7684\uff0c\u6240\u4ee5\u8981\u53cd\u8fc7\u6765\n\t\t\t\tfor(int i = 0; i < len[root]; ++i)\n       \t\t\t   putchar(name[root][i]);\n    \t\t\tputchar(' '); limit = 9;\n                if(t[root].ch[0]) dfs(t[root].ch[0]);\n                printf(\"\\n\");\n            }\n            else{\n                int p = 0;\n                while(ch >= 'A' && ch <= 'Z'){ s[p++] = ch; ch = getchar(); }\n                for(int i = p; i < 12; ++i) s[i] = 0;\n                Splay(Insert(s, 233), 0);\n                printf(\"%d\\n\", t[t[root].ch[1]].size);\n            }\n        }\n        if(T % 200 == 0) Splay(rand() % num + 1, 0);  //\u4fdd\u6301Splay\u968f\u673a\u6027\n    }\n    return 0;\n}\n```",
        "postTime": 1550128025,
        "uid": 61834,
        "name": "Huami360",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4291 \u3010[HAOI2008]\u6392\u540d\u7cfb\u7edf\u3011"
    }
]