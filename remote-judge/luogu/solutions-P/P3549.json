[
    {
        "content": "# [LG-P3549 [POI2013]MUL-Multidrink](https://www.luogu.com.cn/problem/P3549) Solution\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.monkey-hyx.tech?t=LG-P3549-Solution)\n\n\uff08\u5efa\u8bae\u60a8\u4ece\u4e0a\u65b9\u94fe\u63a5\u8fdb\u5165\u6211\u7684\u4e2a\u4eba\u7f51\u7ad9\u67e5\u770b\u6b64 Blog\uff0c\u5728 Luogu \u4e2d\u56fe\u7247\u4f1a\u88ab\u5899\u6389\uff0c\u90e8\u5206 Markdown \u4e5f\u4f1a\u5931\u6548\uff09\n\n## \u9898\u9762\n\n~~\u4e00\u9053\u8bba\u6587\u9898~~\u3002\n\n\u7ed9\u5b9a\u4e00\u68f5\u6709 $ n $ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u4ee4\u8d77\u70b9\u4e3a $ 1 $\uff0c\u7ec8\u70b9\u4e3a $ n $\uff0c\u6bcf\u6b65\u53ef\u4ee5\u8d70\u7684\u8ddd\u79bb\u4e3a $ 1 $ \u6216 $ 2 $\uff0c\u8981\u6c42\u4e0d\u91cd\u590d\u5730\u904d\u5386 $ n $ \u4e2a\u8282\u70b9\u3002\n\n\u5982\u679c\u65e0\u89e3\u8f93\u51fa `BARK`\uff0c\u5426\u5219\u8f93\u51fa $ n $ \u884c\uff0c\u8868\u793a\u904d\u5386\u7684\u8def\u5f84\uff0c\u5b58\u5728 SPJ\u3002\n\n$ 1 \\le n \\le 5 \\times 10^5 $\u3002\n\n## \u8f93\u5165\u683c\u5f0f\n\n> $ n $\n>\n> Describe the tree($ n - 1 $ lines in total).\n\n## \u56fe\u4f8b\n\n![Oops! The image is blocked! Please visit my own website to observe the image! \u56fe\u7247\u88ab\u5899\u4e86\uff0c\u8bf7\u901a\u8fc7\u6587\u7ae0\u5934\u7684\u8df3\u8f6c\u94fe\u63a5\u8bbf\u95ee\uff01](http://monkey-hyx.tech/Images/Blog/2022_10_04_2.png)\n\n## Solution\n\n\u672c\u9898\u5927\u591a\u6570\u5185\u5bb9\u5747\u53c2\u8003\u81ea\u8bba\u6587\u300aHamiltonian paths in the square of a tree\u300b\u3002\n\n\u4f5c\u8005\uff1aJakub Radoszewski and Wojciech Rytter\u3002\n\n\u539f\u6587\u94fe\u63a5\uff1a[Hamiltonian paths in the square of a tree](http://monkey-hyx.tech/Data/File/content/Hamiltonian%20paths%20in%20the%20square%20of%20a%20tree.pdf)\n\n\u9996\u5148\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u5b9a\u4e49\uff1acaterpillar\uff08\u6bdb\u6bdb\u866b\uff09\uff0c\u539f\u6587\u5b9a\u4e49\u4e3a a single path with several leafs connected to it. \u7b80\u800c\u8a00\u4e4b\u5c31\u662f\u5176\u4e3a\u4e00\u68f5\u6811\uff0c\u4e00\u68f5\u6811\u4e3a caterpillar \u5f53\u4e14\u4ec5\u5f53\u53bb\u6389\u5176\u6240\u6709\u53f6\u5b50\u8282\u70b9\u540e\u5269\u4e0b\u7684\u4ec5\u4e3a\u4e00\u6761\u5355\u94fe\uff0c\u5982\u56fe\u5373\u4e3a\u4e00\u4e2a caterpillar\u3002\n\n![Oops! The image is blocked! Please visit my own website to observe the image! \u56fe\u7247\u88ab\u5899\u4e86\uff0c\u8bf7\u901a\u8fc7\u6587\u7ae0\u5934\u7684\u8df3\u8f6c\u94fe\u63a5\u8bbf\u95ee\uff01](http://monkey-hyx.tech/Images/Blog/2022_10_04_3.png)\n\n\u5bf9\u4e8e\u5176\u66f4\u591a\u7684\u6027\u8d28\u53ca\u6c42\u6cd5\uff0c\u53ef\u4ee5\u53bb\u505a\u4e00\u4e0b [LG-P3174 [HAOI2009] \u6bdb\u6bdb\u866b](https://www.luogu.com.cn/problem/P3174)\uff0c\u4f46\u4e0e\u672c\u9898\u5173\u8054\u4e0d\u5927\uff0c\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u73b0\u5728\u6211\u4eec\u5f15\u5165\u4e0b\u4e00\u4e2a\u5b9a\u4e49\uff0c\u5bf9\u4e8e\u56fe $ G = (V, E) $\uff0c\u6211\u4eec\u5b9a\u4e49 $ G $ \u7684 $ k $ \u6b21\u5e42\uff0c\u8bb0\u4f5c $ G^k $\uff0c\u4e3a\u4e00\u4e2a\u57fa\u4e8e\uff08\u6216\u8005\u8bf4\u5b8c\u5168\u8986\u76d6\uff0c\u539f\u6587\u4e3a cover\uff09\u70b9\u96c6 $ V $ \u7684\u56fe\uff0c\u5bf9\u4e8e $ \\forall u, v \\in V $\uff0c$ u, v $ \u4e4b\u95f4\u6709\u8fb9\u76f8\u8fde\u5f53\u4e14\u4ec5\u5f53\u5728 $ G $ \u4e2d $ u, v $ \u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u4e0d\u5927\u4e8e $ k $\u3002\u6211\u4eec\u79f0 $ G^2 $ \u4e3a the square of $ G $\uff0c\u79f0 $ G^3 $ \u4e3a the cube of  $ G $\u3002\n\n\u7136\u540e\u6211\u4eec\u518d\u5f15\u5165\u4e00\u4e2a\u5b9a\u4e49\uff1a2-connected graph\uff082-\u8fde\u901a\u56fe\uff09\uff0c\u8fd9\u4e2a\u5b9a\u4e49\u7c7b\u4f3c\u70b9\u53cc\uff0c\u5bf9\u4e8e\u5177\u6709\u5272\u70b9\u7684\u56fe\u6211\u4eec\u5b9a\u4e49\u5176\u4e3a 1-connected graph\uff0c\u5219\u540c\u7406 2-connected graph \u53ea\u5f97\u5c31\u662f\u81f3\u5c11\u9700\u8981\u53bb\u6389\u4e24\u4e2a\u9876\u70b9\u624d\u80fd\u4f7f\u56fe\u7684\u8fde\u901a\u5206\u652f\u589e\u52a0\u3002\n\n\u73b0\u5728\u6211\u4eec\u518d\u5f15\u5165\u51e0\u4e2a\u5b9a\u7406\uff1a\n\nLemma 1\uff1a\u5bf9\u4e8e\u6811 $ T $\uff0c\u56fe $ T^2 $ \u5305\u542b\u54c8\u5bc6\u5c14\u987f\u56de\u8def\u5f53\u4e14\u4ec5\u5f53 $ T $ \u4e3a\u4e00\u4e2a caterpillar\u3002\n\nLemma 2\uff1a\u5bf9\u4e8e\u6811 $ T $\uff0c\u56fe $ T^2 $ \u5305\u542b\u54c8\u5bc6\u5c14\u987f\u8def\u5f84\u5f53\u4e14\u4ec5\u5f53 $ T $ \u4e3a\u4e00\u4e2a horsetail\u3002\n\n\u8bc1\u660e\uff1a\u5495\u5495\u5495\u3002\n\n\u7136\u540e\u6211\u4eec\u7ee7\u7eed\u8fdb\u884c\u5b9a\u4e49\u3002\n\n\u5b9a\u4e49 $ P $ \u4e3a $ G $ \u7684 k-path \u5f53\u4e14\u4ec5\u5f53 $ P $ \u4e3a $ G^k $ \u4e2d\u7684\u4e00\u6761\u8def\u5f84\uff0c\u540c\u7406\u6211\u4eec\u5b9a\u4e49 k-cycle\u3002\n\n\u989d\u5916\u5730\uff0c\u6211\u4eec\u5206\u522b\u5b9a\u4e49 $ G $ \u7684 kH-path \u548c kH-cycle \u4e3a $ G^k $ \u4e2d\u7684\u54c8\u5bc6\u5c14\u987f\u8def\u5f84\u548c\u54c8\u5bc6\u5c14\u987f\u56de\u8def\u3002\n\n\u82e5 $ G^k $ \u5305\u542b\u4e00\u4e2a kH-cycle\uff0c\u6211\u4eec\u79f0 $ G $ \u4e3a k-Hamiltonian\uff08\u8fd9\u73a9\u610f\u6211\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u8bd1\uff09\uff0c\u540c\u7406\u5305\u542b kH-path \u79f0\u4e3a k-traceable\u3002\n\n\u7136\u540e\u5bf9\u4e8e caterpillar\uff0c\u6211\u4eec\u989d\u5916\u5b9a\u4e49\u5176\u4e3a non-trivial \u5f53\u4e14\u4ec5\u5f53\u5176\u81f3\u5c11\u542b\u6709 $ 1 $ \u6761\u8fb9\u3002\n\n\u6211\u4eec\u79f0 caterpillar \u7684\u4e3b\u94fe\uff0c\u4e5f\u5c31\u662f\u53bb\u6389\u53f6\u5b50\u7ed3\u70b9\u5269\u4e0b\u7684\u94fe\uff0c\u4e3a spine\u3002\n\n\u4e0b\u9762\u5f00\u59cb\u6b63\u6587\uff1a\n\n\u6211\u4eec\u8003\u8651\u5c06\u539f\u56fe\u4e2d $ 1 $ \u5230 $ n $ \u7684\u8def\u5f84\u62bd\u79bb\u51fa\u6765\uff0c\u4f5c\u4e3a\u5176\u4e3b\u5e72\uff0c\u7136\u540e\u5c06\u4e3b\u5e72\u4e0a\u6bcf\u4e2a\u70b9\u53ca\u5176\u6bcf\u4e2a\u5b50\u6811\u4f5c\u4e3a\u4e00\u4e2a\u65b0\u7684\u90e8\u5206\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u6027\u8d28\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u975e\u4e3b\u5e72\u7684\u90e8\u5206\uff0c\u6709\u4e00\u4e2a\u6027\u8d28\uff1a\u82e5\u5176\u975e caterpillar\uff0c\u5219\u4e00\u5b9a\u65e0\u89e3\uff0c\u8fd9\u4e2a\u4e1c\u897f\u81ea\u5df1\u753b\u4e00\u4e0b\u627e\u627e\u6027\u8d28\u5c31\u4f1a\u53d1\u73b0\u5f88\u663e\u7136\uff0c~~\u5f53\u7136\u4e25\u8c28\u7684\u8bc1\u660e\u6211\u4e0d\u4f1a~~\u3002\n\n\u7136\u540e\u8fd9\u91cc\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u4e3b\u5e72\u4e0a\u7684\u70b9\u5212\u5206\u4e3a\u4e24\u7c7b\uff1a\n\n1. Type A\uff1a\u6709\u4e0d\u8d85\u8fc7 $ 1 $ \u4e2a non-trivial caterpillar\u3002\n2. Type B\uff1a\u6709\u4e14\u4ec5\u6709 $ 2 $ \u4e2a non-trivial caterpillar\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e Type A \u7684\u8282\u70b9\uff0c\u82e5\u4ece\u4e3b\u5e72\u4e0a\u7684\u8282\u70b9\u8fdb\u5165\uff0c\u6700\u540e\u4e00\u6b65\u4e00\u5b9a\u521a\u597d\u8d70\u5230\u4e0b\u4e00\u4e2a\u4e3b\u5e72\u8282\u70b9\u4e0a\uff0c\u5bf9\u4e8e Type B \u7684\u8282\u70b9\uff0c\u5728\u8fdb\u5165\u65f6\u5fc5\u987b\u76f4\u63a5\u8fdb\u5165\u5230\u5176\u4efb\u610f\u5b50\u6811\u4e2d\uff0c\u5426\u5219\u65e0\u89e3\uff0c\u5bf9\u4e8e\u540e\u9762\u7684\u65e0\u89e3\u5224\u65ad\u6211\u4eec\u4e3b\u8981\u4e5f\u5c31\u9760\u8fd9\u4e2a\u6027\u8d28\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u6027\u8d28\uff1a\u82e5\u4e00\u4e2a\u70b9\u6709\u8d85\u8fc7\u4e24\u4e2a\u7684 non-trivial caterpillar \u5219\u4e00\u5b9a\u65e0\u89e3\uff0c\u8fd9\u4e2a\u4f9d\u7136\uff0c\u81ea\u5df1\u753b\u4e00\u4e0b\u4f1a\u53d1\u73b0\u65e0\u8bba\u4e0a\u4e00\u6b65\u521a\u597d\u8d70\u5230\u8fd9\u4e2a\u70b9\u8fd8\u662f\u76f4\u63a5\u8d70\u5230\u67d0\u4e00\u4e2a\u5b50\u6811\u4e0a\uff0c\u6700\u7ec8\u90fd\u662f\u65e0\u89e3\u7684\uff0c\u8def\u5f84\u4e00\u5b9a\u4f1a\u65ad\u5728\u67d0\u4e2a\u5b50\u6811\u4e2d\uff0c~~\u540c\u6837\u4e25\u8c28\u7684\u8bc1\u660e\u6211\u4e0d\u4f1a~~\u3002\n\n\u7136\u540e\u6211\u4eec\u989d\u5916\u5730\u5b9a\u4e49\u4e00\u4e2a\u70b9\u4e3a free \u5f53\u4e14\u4ec5\u5f53\u5176\u4e3a\u5355\u70b9\uff0c\u5373\u6ca1\u6709\u4efb\u4f55\u5b50\u6811\u7684\u4e3b\u5e72\u8282\u70b9\u3002\n\n\u5982\u4e0b\u56fe\u4f8b\uff1a\n\n![Oops! The image is blocked! Please visit my own website to observe the image! \u56fe\u7247\u88ab\u5899\u4e86\uff0c\u8bf7\u901a\u8fc7\u6587\u7ae0\u5934\u7684\u8df3\u8f6c\u94fe\u63a5\u8bbf\u95ee\uff01](http://monkey-hyx.tech/Images/Blog/2022_10_04_4.png)\n\n\u4e0b\u4e00\u4e2a\u6027\u8d28\uff1a\u6bcf\u4e2a Type B \u7684\u8282\u70b9\u524d\u540e\u90fd\u5fc5\u987b\u6709\u81f3\u5c11\u4e00\u4e2a free \u8282\u70b9\uff0c\u5426\u5219\u65e0\u89e3\u3002\u663e\u7136 free \u70b9\u662f\u53ef\u4ee5\u5c06\u8fdb\u5165\u4e0b\u4e00\u4e2a\u4e3b\u5e72\u8282\u70b9\u548c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u4e3b\u5e72\u8282\u70b9\u7684\u67d0\u4e00\u4e2a\u5b50\u8282\u70b9\u76f8\u4e92\u8f6c\u6362\u7684\uff0c\u800c Type A \u4e0d\u80fd\u8fdb\u884c\u8fd9\u6837\u7684\u8f6c\u6362\uff0c\u4e24\u68f5 Type B \u4e4b\u95f4\u53c8\u9700\u8981\u6709\u8fd9\u6837\u7684\u8f6c\u6362\u3002\n\n\u5bf9\u4e8e\u6ee1\u8db3\u4ee5\u4e0a\u6240\u6709\u6027\u8d28\u7684\u4e3b\u5e72\uff0c\u6211\u4eec\u79f0\u5176\u4e3a $ (u, v) $ -horsetail\uff0c\u540c\u65f6\u79f0\u8fd9\u6574\u68f5\u6811\u4e3a horsetail\u3002\n\n\u73b0\u5728\u6211\u4eec\u5bf9\u4e0a\u9762\u7684\u6027\u8d28\u505a\u4e00\u4e2a\u603b\u7ed3\uff1a\n\n1. \u6bcf\u4e00\u4e2a\u4e3b\u5e72\u8282\u70b9\u90fd\u4e3a Type A \u6216 Type B\u3002\n2. \u5728\u4efb\u610f\u4e24\u4e2a Type B \u4e4b\u95f4\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a free\u3002\n3. \u5728 Type B \u4e4b\u524d\u81f3\u5c11\u6709\u4e00\u4e2a free\u3002\n4. \u5728 Type B \u4e4b\u540e\u81f3\u5c11\u6709\u4e00\u4e2a free\u3002\n5. \u81f3\u5c11\u6709\u4e00\u4e2a free\u3002\n\n\u663e\u7136\u5bf9\u4e8e\u4e0a\u9762\u7684\u56db\u4e2a\u56fe\u4f8b\u4e2d\uff0c(a)(b) \u4e3a horsetail\uff0c\u6709\u89e3\uff0c(c)(d) \u975e horsetail\uff0c\u65e0\u89e3\u3002\n\n\u800c\u5bf9\u4e8e\u6211\u4eec\u672c\u9898\u7684\u56fe $ G $\uff0c\u6211\u4eec\u4e5f\u5c31\u9700\u8981\u5148\u5224\u65ad\u5176\u662f\u5426\u4e3a horsetail\uff0c\u5982\u679c\u4e0d\u662f\u5219\u65e0\u89e3\uff0c\u5982\u679c\u662f\u90a3\u4e48\u8bf4\u660e $ G^2 $\uff0c\u4e5f\u5c31\u662f\u6309\u7167\u672c\u9898\u8981\u6c42\u6784\u6210\u7684\u56fe\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u6761\u54c8\u5bc6\u987f\u8def\u5f84\uff0c\u5373 Lemma 2\u3002\n\n\u73b0\u5728\u6211\u4eec\u5bf9 Lemma 1 \u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u9610\u91ca\uff1a\n\nLemma 1\uff1a\u4efb\u610f\u4e00\u4e2a\u5728 caterpillar \u4e0a\u7684 2H-cycle \u90fd\u4e00\u5b9a\u6709\u4ee5\u4e0b\u7684\u987a\u5e8f\uff1a\u6211\u4eec\u5b9a\u4e49 caterpillar \u7684 spine \u957f\u5ea6\u4e3a $ l $\uff0c\u4ee4 spine \u4e3a $ v_1, v_2, \\cdots, v_l $\uff0cspine \u4e0a\u7684\u53f6\u5b50\u4e3a $ P_1, P_2, \\cdots, P_l $\uff0c\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49 $ P_i $ \u8868\u793a\u4e00\u4e2a\u4efb\u610f\u7684 $ v_i $ \u7684\u53f6\u5b50\u7684\u6392\u5217\u3002\n$$\n\\begin{aligned}\n\t&v_1, P_2, v_3, \\cdots, v_{l - 1}, P_l, v_l, P_{l - 1}, \\cdots, P_3, v_2, P_1 \\quad 2 \\mid l \\\\\n\t&v_1, P_2, v_3, \\cdots, P_{l - 1}, v_l, P_l, v_{l - 1}, \\cdots, P_3, v_2, P_1 \\quad 2 \\nmid l\n\\end{aligned}\n$$\n![Oops! The image is blocked! Please visit my own website to observe the image! \u56fe\u7247\u88ab\u5899\u4e86\uff0c\u8bf7\u901a\u8fc7\u6587\u7ae0\u5934\u7684\u8df3\u8f6c\u94fe\u63a5\u8bbf\u95ee\uff01](http://monkey-hyx.tech/Images/Blog/2022_10_05_1.png)\n\n\u5982\u6b64\u56fe\u4e2d\uff0c\u663e\u7136 $ 1, 2, 3, \\cdots, 8, 1 $ \u548c $ 1, 2, 3, \\cdots, 10, 1 $ \u5206\u522b\u4e3a\u4e24\u56fe\u7684\u4e00\u79cd 2H-cycle\u3002\n\n\u6240\u4ee5\u5f53\u6211\u4eec\u60f3\u8981\u5bf9 horsetail \u4e0a\u7684 caterpillar \u627e\u5230 2H-path \u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u53d6 2H-cycle \u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u6216\u8005\u8bf4\u65ad\u5f00 2H-cycle \u4e2d\u7684\u4e00\u6761\u8fb9\uff0c\u5982 $ 2, 3, 4, \\cdots, 8, 1 $ \u8fd9\u79cd\u987a\u5e8f\u3002\n\n\u7136\u540e\u518d\u6b21\u56de\u5230\u672c\u9898\uff0c\u6216\u8005\u8bf4\u56de\u5230 Lemma 2\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a 2H-path $ S $\uff0c\u5f53\u6811 $ T $ \u4e0a\u7684\u8282\u70b9\u88ab\u6309\u7167\u5206\u522b\u904d\u5386\u6bcf\u4e2a\u4e3b\u5e72\u8282\u70b9\u7684\u6bcf\u4e2a\u5b50\u6811\u7684\u987a\u5e8f\u904d\u5386\u65f6\uff0c\u540c\u65f6\u6211\u4eec\u5b9a\u4e49\u6bcf\u4e2a\u4e3b\u5e72\u8282\u70b9 $ u_i $ \u6240\u5728\u5b50\u6811\u8282\u70b9\u96c6\u5408\u4e3a $ layer(u_i) $\uff0c\u6ee1\u8db3\u6bcf\u4e2a $ layer(u_i) $ \u90fd\u6309\u7167\u7279\u5b9a\u987a\u5e8f\u904d\u5386\uff0c\u6211\u4eec\u79f0\u6811 $ T $ \u4e3a layered\uff0c\u6b64\u65f6\u6211\u4eec\u4fbf\u53ef\u4ee5\u6839\u636e\u6bcf\u4e2a\u4e3b\u5e72\u8282\u70b9\u7684\u8def\u5f84\u5c06 $ S $ \u5206\u6210 $ S_1, S_2, S_3, \\cdots $\u3002\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8def\u5f84 $ S $ \u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u5206\u522b\u4e3a $ first(S) $ \u548c $ last(S) $\uff0c\u5b9a\u4e49\u4e3b\u5e72\u8282\u70b9\u4e3a main\uff0c\u4e3b\u5e72\u8282\u70b9\u76f4\u63a5\u8fde\u63a5\u7684\u975e\u4e3b\u5e72\u8282\u70b9\u4e3a secondary\uff0c\u5219\u663e\u7136\u5bf9\u4e8e\u6bcf\u4e2a $ i $\uff0c$ first(S_i) $ \u548c $ last(S_i) $ \u5747\u4e3a main \u6216 secondary\u3002\n\n\u5bf9\u4e8e\u6211\u4eec\u7684\u7b97\u6cd5\u6211\u4eec\u9996\u5148\u9700\u8981\u5b9e\u73b0\u4e00\u4e9b\u8f85\u52a9\u51fd\u6570\uff1a\uff08\u4e3a\u4e86\u4fbf\u4e8e\u7406\u89e3\uff0c\u90e8\u5206\u51fd\u6570\u540d\u4e0e\u539f\u8bba\u6587\u4e2d\u6709\u5fae\u8c03\uff09\n\n`vector < int > BuildCaterpillar(int mp, int S, int T)`\uff1a\n\n\u5bf9\u4e8e\u4ece $ S $ \u5f00\u59cb $ T $ \u7ed3\u675f\u7684\uff0c\u6302\u5728 horsetail \u7684\u4e3b\u5e72\u4e0a\u7684 $ 1 $ \u6216 $ 2 $ \u6761 caterpillar \u751f\u6210 2H-path\uff0c\u8fd9\u91cc\u6211\u4eec\u9996\u5148\u9700\u8981\u5bf9\u8fd9\u4e00\u90e8\u5206\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u56fe\uff0c\u5c06 caterpillar \u4e0a\u6240\u6709\u53f6\u5b50\u6307\u5411 spine\uff0c\u540c\u65f6\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u6bcf\u6761 caterpillar \u7684\u4e3b\u5e72\uff0c\u5177\u4f53\u901a\u8fc7\u4ee3\u7801\u4e2d\u7684 `void BuildSpine(int fa, int p)` \u5b9e\u73b0\uff0c\u6211\u4eec\u79f0 caterpillar \u6240\u5728\u7684 horsetail \u4e0a\u7684\u4e3b\u5e72\u8282\u70b9\u4e3a $ mp $\uff0c\u90a3\u4e48\u5f53 $ mp $ \u4e3a type B \u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u662f non-trivial \u7684 caterpillar \u6709\u4e24\u6761\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5c06\u524d\u9762\u4e00\u6761 caterpillar \u53cd\u8fc7\u6765\u4e0e\u5176\u9996\u5c3e\u76f8\u63a5\uff0c\u5f53\u6210\u540c\u4e00\u6761 caterpillar\uff0c\u8fd9\u6837\u6700\u7ec8\u6211\u4eec\u5bf9\u4e8e\u5f62\u6210\u7684 caterpillar \u8fdb\u884c\u5982 Lemma 1 \u5730\u751f\u6210 2H-cycle\uff0c\u7136\u540e\u65ad\u5f00\u5176\u4e2d $ S \\rightarrow T $ \u7684\u8fb9\uff08\u6216 $ T \\rightarrow S $\uff09\u5373\u53ef\uff0c\u540c\u65f6\u9700\u8981\u6ce8\u610f\u5982\u679c\u8d77\u59cb\u70b9\u662f\u5728\u975e non-trivial \u7684 secondary \u8282\u70b9\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u5148\u904d\u5386\u5176\u53f6\u5b50\u8282\u70b9\uff0c\u7136\u540e\u6700\u540e\u518d\u904d\u5386\u5176 spine\uff0c\u5bf9\u4e8e\u904d\u5386 $ mp $ \u7684\u53f6\u5b50\u8282\u70b9\uff0c\u6211\u4eec\u901a\u8fc7 `void extend(int mp, int unreach1 = -1, int unreach2 = -1)` \u5b9e\u73b0\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u4e00\u4e0b\u4ee3\u7801\u3002\n\n`int FindAnySecondaryNode(int p)`\uff1a\u627e\u5230 horsetail \u4e2d\u4e3b\u5e72\u4e3a $ p $ \u7684\u4efb\u610f\u4e00\u4e2a secondary \u8282\u70b9\u3002\n\n`int FindAnySecondaryNode_PreferablyLeaf(int p)`\uff1a\u627e\u5230 horsetail \u4e2d\u4e3b\u5e72\u4e3a $ p $ \u7684\u4efb\u610f\u4e00\u4e2a secondary \u8282\u70b9\uff0c\u4e14\u4f18\u5148\u627e\u975e non-trivial \u7684\u53f6\u5b50\u8282\u70b9\u3002\n\n`int FindAnotherSecondaryNode(int p, int lst)`\uff1a\u627e\u5230 horsetail \u4e2d\u4e3b\u5e72\u4e3a $ p $ \u7684\u975e $ lst $ \u7684\u53e6\u4e00\u4e2a secondary \u8282\u70b9\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0\uff0c\u9996\u5148\u6211\u4eec\u9700\u8981\u68c0\u67e5\u4e00\u4e0b\u5176\u662f\u5426\u4e3a\u65e0\u89e3\uff0c\u4e5f\u5c31\u662f\u524d\u9762\u7684\u68c0\u67e5\u662f\u5426\u4e3a horsetail\uff0c\u5177\u4f53\u7531 `void Check(void)` \u5b9e\u73b0\u3002\n\n\u7136\u540e\u6211\u4eec\u7b97\u6cd5\u7684\u6838\u5fc3\u5c31\u662f\u627e\u5230 horsetail \u7684\u90a3\u4e00\u6761 2H-path\uff0c\u901a\u8fc7 `vector < int > Get2HPathHorsetail(void)` \u5b9e\u73b0\uff0c\u5927\u6982\u7684\u601d\u8def\u5c31\u662f\u5148\u5bf9\u7b2c\u4e00\u4e2a\u8282\u70b9\u8fdb\u884c\u8ba8\u8bba\uff0c\u663e\u7136\u8d77\u70b9\u4e00\u5b9a\u4e3a $ 1 $\uff0c\u5982\u679c\u5176\u4e3a free \u8282\u70b9\u90a3\u4e48\u7ec8\u70b9\u4e5f\u4e3a $ 1 $\uff0c\u5426\u5219\u4e00\u5b9a\u4e3a\u5176\u7684\u67d0\u4e00\u4e2a secondary \u8282\u70b9\uff0c\u7136\u540e\u6784\u9020\u6b64 2H-path\uff0c\u5bf9\u4e8e\u540e\u9762\u7684\u6bcf\u4e2a\u70b9\uff0c\u5982\u679c\u662f free \u8282\u70b9\u90a3\u4e48\u8d77\u70b9\u7ec8\u70b9\u5747\u4e3a\u4e3b\u5e72\u70b9 $ mp $\uff0c\u5426\u5219\u5982\u679c\u4e0a\u6b21\u7684\u7ec8\u70b9\u4e0d\u662f\u4e3b\u5e72\u8282\u70b9\uff0c\u8fd9\u6b21\u7684\u8d77\u70b9\u4e00\u5b9a\u4e3a $ mp $\uff0c\u7ec8\u70b9\u4e3a\u4f18\u5148\u627e\u975e non-trivial \u8282\u70b9\u7684\u4efb\u610f\u4e00\u4e2a secondary \u8282\u70b9\uff0c\u5982\u679c\u4e0a\u6b21\u7684\u7ec8\u70b9\u662f\u4e3b\u5e72\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u6b21\u7684\u8d77\u70b9\u4e00\u5b9a\u4e3a\u4f18\u5148\u627e\u975e non-trivial \u8282\u70b9\u7684 secondary \u8282\u70b9\uff0c\u5bf9\u4e8e\u7ec8\u70b9\uff0c\u5982\u679c\u8be5\u8282\u70b9\u662f type B\uff0c\u90a3\u4e48\u7ec8\u70b9\u4e5f\u9700\u8981\u4e3a secondary \u8282\u70b9\uff0c\u627e\u5230\u53e6\u5916\u7684\u4e00\u4e2a secondary \u8282\u70b9\u5373\u53ef\uff0c\u5426\u5219\u7ec8\u70b9\u4e3a $ mp $ \u5373\u53ef\u3002\n\n\u5927\u81f4\u7684\u601d\u8def\u5c31\u662f\u8fd9\u6837\uff0c\u7801\u91cf\u5927\u6982 `7.5KiB`\uff0c\u968f\u540e\u7684\u590d\u6742\u5ea6\u662f linear \u7684\uff0c\u4e5f\u5c31\u662f $ O(n) $ \u7684\u3002\n\n\u540c\u65f6\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u539f\u8bba\u6587\u4e2d\u7684\u5bf9\u4e8e\u6700\u540e\u7684 `Get2HPathHorsetail(void)` \u7684\u5b9e\u73b0\uff0c\u53ef\u4ee5\u9009\u62e9\u6027\u5730\u770b\u4e00\u4e0b\u3002\n\n![Oops! The image is blocked! Please visit my own website to observe the image! \u56fe\u7247\u88ab\u5899\u4e86\uff0c\u8bf7\u901a\u8fc7\u6587\u7ae0\u5934\u7684\u8df3\u8f6c\u94fe\u63a5\u8bbf\u95ee\uff01](http://monkey-hyx.tech/Images/Blog/2022_10_09_1.png)\n\n## Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/extc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW(arr) void* Edge::operator new(size_t){static Edge* P = arr; return P++;}\n\n/******************************\nabbr\nmp => mainp\nsubt => subtree\nfa => father\nfst => first\nlst => last\n******************************/\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\n#define EXIT puts(\"BRAK\"), exit(0)\n#define MAXN 510000\n\ntemplate<typename T = int>\ninline T read(void);\n\nstruct Edge{\n    Edge* nxt;\n    int to;\n    OPNEW;\n}ed[(MAXN << 1) + MAXN];\nROPNEW(ed);\nEdge* head[MAXN];\n\nint N;\nint mainLen(0);\nint fa[MAXN], deg[MAXN];\nint mainp[MAXN];\nint non_trivial[MAXN];\nbool isMainp[MAXN], isFree[MAXN];\n\nvoid dfs(int p = 1){\n    for(auto i = head[p]; i; i = i->nxt)\n        if(SON != fa[p])\n            fa[SON] = p,\n            dfs(SON);\n}\nvoid InitMainp(void){\n    int cur = N;\n    do{\n        mainp[++mainLen] = cur;\n        isMainp[cur] = true;\n        cur = fa[cur];\n    }while(cur != 1);\n    mainp[++mainLen] = 1;\n    isMainp[1] = true;\n    reverse(mainp + 1, mainp + mainLen + 1);\n}\nbool isCaterpillar(int fa, int p){\n    int cnt(0);\n    for(auto i = head[p]; i; i = i->nxt){\n        if(SON == fa || deg[SON] == 1)continue;\n        if(!isCaterpillar(p, SON))return false;\n        if(cnt++)return false;\n    }return true;\n}\nvoid Check(void){\n    for(int p = 1; p <= mainLen; ++p){\n        int mp = mainp[p];\n        isFree[mp] = true;\n        for(auto i = head[mp]; i; i = i->nxt){\n            if(isMainp[SON])continue;\n            isFree[mp] = false;\n            if(deg[SON] == 1)continue;\n            ++non_trivial[mp];\n            if(non_trivial[mp] > 2)EXIT;\n            if(!isCaterpillar(mp, SON))EXIT;\n        }\n    }\n    int curFree(0);\n    bool end_with_B(true);\n    bool exist_free(false);\n    for(int p = 1; p <= mainLen; ++p){\n        int mp = mainp[p];\n        if(isFree[mp]){++curFree; exist_free = true; end_with_B = false; continue;}\n        if(non_trivial[mp] == 2){\n            if(!curFree)EXIT;\n            curFree = 0;\n            end_with_B = true;\n        }\n    }\n    if(end_with_B || !exist_free)EXIT;\n}\nint FindAnySecondaryNode(int p){\n    for(auto i = head[p]; i; i = i->nxt)\n        if(!isMainp[SON])return SON;\n    return -1;\n}\nint FindAnySecondaryNode_PreferablyLeaf(int p){\n    for(auto i = head[p]; i; i = i->nxt)\n        if(!isMainp[SON] && deg[SON] == 1)return SON;\n    return FindAnySecondaryNode(p);\n}\nint FindAnotherSecondaryNode(int p, int lst){\n    for(auto i = head[p]; i; i = i->nxt)\n        if(!isMainp[SON] && SON != lst)return SON;\n    return -1;\n}\nnamespace Caterpillar{\n    vector < int > route;\n    Edge* head[MAXN];\n    vector < int > spine;\n    enum type{spineNode = 1, leafNode};\n    int ffa[MAXN];\n    void add(int s, int t){\n        head[s] = new Edge{head[s], t};\n        ffa[t] = s;\n    }\n    void BuildSpine(int fa, int p){\n        spine.push_back(p);\n        for(auto i = ::head[p]; i; i = i->nxt){\n            if(SON == fa)continue;\n            if(::deg[SON] == 1)add(p, SON);\n            else BuildSpine(p, SON);\n        }\n    }\n    void extend(int mp, int unreach1 = -1, int unreach2 = -1){\n        for(auto i = head[mp]; i; i = i->nxt){\n            if(SON == unreach1 || SON == unreach2)continue;\n            route.push_back(SON);\n        }\n    }\n    vector < int > BuildCaterpillar(int mp, int S, int T){\n        route.clear();\n        spine.clear();\n        route.push_back(S);\n        if(S == T)return route;\n        spine.push_back(mp);\n        bool exist_caterpillar(false);\n        for(auto i = ::head[mp]; i; i = i->nxt){\n            if(isMainp[SON])continue;\n            if(deg[SON] == 1)add(mp, SON);\n            else{\n                if(!exist_caterpillar)exist_caterpillar = true;\n                else reverse(spine.begin(), spine.end());\n                BuildSpine(mp, SON);\n            }\n        }\n        vector < pair < int, type >/*spine_node_pos, spine or leaf*/ > temp;\n        vector < pair < int, type >/*spine_node_pos, spine or leaf*/ > unextended;\n        for(int i = 0; i < (int)spine.size(); ++i)\n            temp.push_back({spine.at(i), !(i & 1) ? spineNode : leafNode});\n        for(int i = (int)spine.size() - 1; i >= 0; --i)\n            temp.push_back({spine.at(i), (i & 1) ? spineNode : leafNode});\n        for(auto it = temp.begin(); it < temp.end(); ++it)\n            if(it->second == spineNode || head[it->first])unextended.push_back(*it);\n        #define LEFT(x) (x == 0 ? (int)unextended.size() - 1 : x - 1)\n        #define RIGHT(x) (x == (int)unextended.size() - 1 ? 0 : x + 1)\n        auto Beg = deg[S] == 1 ? make_pair(ffa[S], leafNode) : make_pair(S, spineNode);\n        auto End = deg[T] == 1 ? make_pair(ffa[T], leafNode) : make_pair(T, spineNode);\n        int begPos = -1; while(unextended.at(++begPos) != Beg);\n        if(Beg.second == leafNode)extend(Beg.first, S, T);\n        if(unextended.at(LEFT(begPos)) == End)\n            for(int j = RIGHT(begPos); unextended.at(j) != End; j = RIGHT(j))\n                unextended.at(j).second == spineNode\n                    ? route.push_back(unextended.at(j).first)\n                    : extend(unextended.at(j).first);\n        else\n            for(int j = LEFT(begPos); unextended.at(j) != End; j = LEFT(j))\n                unextended.at(j).second == spineNode\n                    ? route.push_back(unextended.at(j).first)\n                    : extend(unextended.at(j).first);\n        if(End.second == leafNode && Beg != End)extend(End.first, S, T);\n        route.push_back(T);\n        return route;\n    }\n}\nvector < int > Get2HPathHorsetail(void){\n    vector < int > ret;\n    int fst = mainp[1];\n    int lst = isFree[mainp[1]]\n        ? mainp[1]\n        : FindAnySecondaryNode(mainp[1]);\n    auto tmp = Caterpillar::BuildCaterpillar(mainp[1], fst, lst);\n    ret.insert(ret.end(), tmp.begin(), tmp.end());\n    for(int i = 2; i <= mainLen; ++i){\n        int w = mainp[i];\n        if(isFree[w])fst = lst = w;\n        else if(!isMainp[lst])\n            fst = w,\n            lst = FindAnySecondaryNode_PreferablyLeaf(w);\n        else\n            fst = FindAnySecondaryNode_PreferablyLeaf(w),\n            lst = non_trivial[w] == 2\n                ? FindAnotherSecondaryNode(w, fst)\n                : w;\n        auto cp = Caterpillar::BuildCaterpillar(w, fst, lst);\n        ret.insert(ret.end(), cp.begin(), cp.end());\n    }\n    return ret;\n}\nint main(){\n    N = read();\n    for(int i = 1; i <= N - 1; ++i){\n        int s = read(), t = read();\n        head[s] = new Edge{head[s], t};\n        head[t] = new Edge{head[t], s};\n        ++deg[s], ++deg[t];\n    }\n    dfs();\n    InitMainp();\n    Check();\n    auto ans = Get2HPathHorsetail();\n    for(auto i : ans)printf(\"%d\\n\", i);\n    return 0;\n}\ntemplate<typename T>\ninline T read(void){\n    T ret(0);\n    short flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n## \u5199\u5728\u540e\u9762\n\n\u5c31\u662f\u8fd9\u9053\u4e0d\u600e\u4e48\u53cb\u597d\u7684\u9898\uff0c\u6211\u505a\u7684\u65f6\u5019\u7f51\u4e0a\u51e0\u4e4e\u6ca1\u6709\u9898\u89e3\uff0c\u53ea\u80fd\u627e\u5230\u51e0\u7bc7\u8bf4\u7684\u5f88\u7b80\u7565\u7684\u9898\u89e3\uff0c\u7136\u540e\u6ca1\u529e\u6cd5\u53ea\u80fd\u53bb\u81ea\u5df1\u7ffb\u82f1\u6587\u8bba\u6587\uff0c\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u67e5\u8bcd\uff0c\u5728\u6211\u5feb\u8981\u5199\u5b8c\u8fd9\u9053\u9898\u7684\u65f6\u5019\uff0c\u624d\u7a81\u7136\u53d1\u73b0 Luogu \u4e0a\u591a\u51fa\u6765\u4e86\u4e24\u7bc7\u9898\u89e3\u3002\u3002\n\n\u7136\u540e\u5c31\u662f\u8c03\u8fd9\u9053\u9898\uff0c\u4e00\u5171\u4ea4\u4e86 $ 70+ $ \u6b21\u624d\u8fc7\u4e86\u8fd9\u9053\u9898\uff0c\u81ea\u5df1\u5199\u5b8c\u4e4b\u540e\u600e\u4e48\u6539\u90fd\u662f $ 70 $ pts\uff0cLuogu \u4e0a\u4e0b\u4e0d\u4e86\u6570\u636e\uff0chydro \u7b49\u6ca1\u6709 SPJ\uff0c\u6ca1\u529e\u6cd5\u53ea\u80fd\u5f00\u59cb\u628a\u6bcf\u4e00\u90e8\u5206\u7684\u4ee3\u7801\u5bf9\u7740\u5927\u4f6c\u7684\u4ee3\u7801\u6539\uff0c\u6700\u540e\u51e0\u4e4e\u628a\u6574\u7bc7\u4ee3\u7801\u90fd\u91cd\u6784\u4e86\u4e00\u904d\u624d\u627e\u5230\u9519\u8bef\uff0c\u53ea\u662f\u8c03\u4ee3\u7801\u5c31\u8c03\u4e86\u4e00\u5929\u534a\uff0c\u4e0d\u8fc7\u81f3\u5c11\u6700\u540e\u8fd8\u662f\u8fc7\u4e86\u3002\n\n## UPD\n\nupdate-2022_10_09 \u521d\u7a3f\n\nupdate-2022_10_10 \u4fee\u590d\u4e00\u4e9b\u9519\u8bef",
        "postTime": 1665302913,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "LG-P3549 [POI2013]MUL-Multidrink \u9898\u89e3"
    },
    {
        "content": "# P3549 MUL-Multidrink \u89e3\u9898\u62a5\u544a\n\n[P3549](https://www.luogu.com.cn/problem/P3549)\n\n[\u5728\u535a\u5ba2\u67e5\u770b](https://www.cnblogs.com/Dreamerkk/p/17229249.html)\n\n### $\\text{0.\u524d\u8a00}$\n\n\u6a21\u62df\u8d5b\u573a\u5207\u7559\u5ff5\u3002\n\n\u503c\u5f97\u4e00\u60f3\u503c\u5f97\u4e00\u5206\u6790\u4f46\u662f\u4e0d\u503c\u5f97\u4e00\u5199\u7684\u9898\u3002\n\n\u8fd9\u79cd\u590d\u6742\u7684\u9898\u7684\u9898\u89e3\u8fd8\u662f\u8981\u4e00\u6b65\u4e00\u6b65\u6162\u6162\u6765\uff0c\u4e0d\u80fd\u592a\u8df3\u8dc3\u4e5f\u4e0d\u80fd\u778e\u626f\u4e9b\u6df1\u5965\u7684\u5b9a\u4e49\u3002\n\n---\n\n### $\\text{1.\u4e00\u4e9b\u8bf4\u660e}$\n\n\u5c06\u6811\u4ee5 $1$ \u4e3a\u6839\u3002\n\n\u201c\u5e73\u51e1\u513f\u5b50\u201d \u6307 \u662f\u53f6\u5b50\u7684\u513f\u5b50\u3002\n\n\u201c\u975e\u5e73\u51e1\u513f\u5b50\u201d \u6307\u7684\u662f \u4e0d\u662f\u53f6\u5b50\u7684\u513f\u5b50\u3002\n\n\n\u201c\u8df3\u8dc3\u201d \u6307\u4ece\u4e00\u4e2a\u513f\u5b50\u8df3\u5230\u5b83\u7684\u5144\u5f1f\u3002\n\n\u672c\u6587\u4e3a\u65b9\u4fbf\u8bfb\u8005\u7406\u89e3~~\u4e5f\u65b9\u4fbf\u7b14\u8005\u5236\u4f5c~~\uff0c\u63d2\u5165\u4e86\u90e8\u5206\u624b\u7ed8\u56fe\u7247\uff0c\u7b14\u8005\u5b57\u4e11\u8fd8\u8bf7\u89c1\u8c05\uff08\u4e5f\u522b\u5728\u610f\u6211\u7528\u7684\u8349\u7a3f\u7eb8\u662f\u5565\uff09\u3002\n\n\u5982\u6709\u7b14\u8bef\u6216\u903b\u8f91\u9519\u8bef\u6b22\u8fce\u6307\u51fa\u3002\n\n---\n\n### $\\text{2.\u521d\u6b65\u5206\u6790}$\n\n\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e $2$ \u5c31\u662f\u8df3\u513f\u5b50\uff0c\u7236\u4eb2\uff0c\u5144\u5f1f\uff0c\u513f\u5b50\u7684\u513f\u5b50\u548c\u7236\u4eb2\u7684\u7236\u4eb2\u3002\n\n\u9996\u5148\u9898\u76ee\u8981\u6c42\u4e86\u7ec8\u70b9\u4e3a $n$\uff0c\u53c8\u56e0\u4e3a\u4e00\u6b65\u6700\u591a\u8df3\u7684\u8ddd\u79bb\u662f $2$\uff0c\u53ef\u4ee5\u53d1\u73b0\u8d70\u8fdb $n$ \u7684\u5b50\u6811\u540e\u518d\u8d70\u51fa\u6765\u5c31\u65e0\u6cd5\u56de\u5230 $n$ \u4e86\uff0c\u7b80\u5355\u8bc1\u660e\uff1a\n\n\u5047\u8bbe\u4e00\u4e2a\u8282\u70b9 $u$\uff0c\u5176\u513f\u5b50\u4e2d $n$ \u6240\u5728\u5b50\u6811\u4e3a $v$\uff0c\u90a3\u4e48\u5982\u679c\u60f3\u8981\u79bb\u5f00\u518d\u8fdb\u5165\u8fd9\u4e2a\u5b50\u6811\uff0c\u4e00\u5b9a\u4f1a\u7ecf\u8fc7 $u$\uff0c$v$ \u4e4b\u4e00\uff0c\u5373\u4ece $v$ \u8df3\u8dc3\u5230\u5176\u5b83\u513f\u5b50\uff0c\u6216\u8005\u4ece\u5b50\u6811\u5185\u7684\u4e00\u4e2a\u70b9\u8df3\u5230 $u$ \u518d\u8fdb\u5165\uff0c\u6240\u4ee5\u8fdb\u53bb\u51fa\u6765\u540e\u5c31\u56de\u4e0d\u53bb\u4e86\u3002\n\n\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u7684\u6240\u6709\u513f\u5b50\uff0c\u6211\u4eec\u4e00\u5b9a\u5148\u904d\u5386\u5176\u5b83\u5b50\u6811\u5e76\u56de\u6765\uff0c**\u6700\u540e\u4e00\u4e2a**\u8fdb\u5165 $n$ \u6240\u5728\u7684\u5b50\u6811\u3002\n\n---\n\n### $\\text{3.\u5bfb\u627e\u601d\u8def}$\n\n\n\u548c\u6811\u76f8\u5173\u7684\u6784\u9020\u6211\u4eec\u4e00\u822c\u5148\u8003\u8651\u94fe\uff0c\u83ca\u82b1\u56fe\u4e4b\u7c7b\u7684\u7279\u6b8a\u7684\u6811\uff0c\u6211\u4eec\u5148\u6765\u89c2\u5bdf\u4e00\u4e9b\u8f83\u4e3a\u7279\u6b8a\u7684\u6811\uff1a\n\n\u89c1\u4e0b\u56fe\uff1a\n\n![\u56fe1](https://cdn.luogu.com.cn/upload/image_hosting/mu3skjog.png)\n\n\u83ca\u82b1\u56fe\u70b9\u4e24\u4e24\u53ef\u4ee5\u8fde\u901a\uff0c\u6240\u4ee5\u968f\u4fbf\u8d70\u5373\u53ef\u3002\n\n\u94fe\u76f4\u63a5\u8d70\u597d\u50cf\u5c31\u884c\uff1f\n\n\u4f46\u662f $n$ \u4e0d\u4e00\u5b9a\u5728\u94fe\u7684\u53e6\u4e00\u7aef\uff0c\u6240\u4ee5\u53ef\u80fd\u9700\u8981\u8df3\u8fc7 $n$\uff0c\u8d70\u5b8c\u4e0b\u9762\u518d\u56de\u6765\uff08\u5982\u56fe\uff09\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u5982\u679c $n$ \u6709\u4e00\u4e9b\u513f\u5b50\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u8981\u8d70\u5230 $n$ \u7684\u7236\u4eb2\uff0c\u5e76\u4e14\u5176\u5b83\u70b9\u5df2\u7ecf\u904d\u5386\u4e86\uff0c\u7136\u540e\u4e0b\u964d\u5230 $n$ \u7684\u513f\u5b50\uff0c\u904d\u5386\u5b8c\u540e\u56de\u5230 $n$\u3002\n\n\n---\n\n\u4e8e\u662f\u6211\u4eec\u73b0\u5728\u8981\u5904\u7406\u7684\u4e00\u4e2a\u5f88\u5173\u952e\u7684\u884c\u4e3a\u5c31\u662f\uff1a\u201c\u904d\u5386\u67d0\u4e2a\u70b9\u7684\u6574\u68f5\u5b50\u6811\uff0c\u5e76\u4e14\u56de\u6765\u201d\uff0c\u5177\u4f53\u5730\uff1a\u662f\u56de\u5230\u8fd9\u4e2a\u70b9\u7684\u4e00\u4e2a\u513f\u5b50\uff0c\u56e0\u4e3a\u8fd9\u6837\u624d\u80fd\u8df3\u51fa\u8fd9\u4e2a\u5b50\u6811\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5b9a\u4e49\u64cd\u4f5c $\\text {go(u)}$ \u904d\u5386 $u$ \u7684\u5b50\u6811\u5e76\u56de\u5230 $u$ \u7684\u67d0\u4e2a\u513f\u5b50\u7684\u8fc7\u7a0b\u3002\n\n\u7ecf\u8fc7\u4e00\u4e9b\u5206\u6790\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53 $u$ \u7684 **\u975e\u5e73\u51e1\u513f\u5b50** \u7684\u4e2a\u6570\u5927\u4e8e\u4e00\u7684\u65f6\u5019\uff0c$\\text {go(u)}$ **\u4e0d\u53ef\u80fd\u5b9e\u73b0**\uff0c\u7b80\u8ff0\uff1a\n\n\u8003\u8651\u8fd9\u6837\u4e00\u68f5\u6811\uff1a\n\n![\u56fe2](https://cdn.luogu.com.cn/upload/image_hosting/apu8jhp5.png)\n\n\u53ef\u4ee5\u53d1\u73b0\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u80fd\u5b9e\u73b0\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u56e0\u4e3a\u8fdb\u5165\u67d0\u4e2a\u975e\u5e73\u51e1\u5b50\u6811\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u5b83\u7684\u9876\u70b9\uff0c\u800c\u79bb\u5f00\u4e5f\u5fc5\u987b\u8981\u4ece\u540c\u4e00\u4e2a\u70b9\u79bb\u5f00\uff0c\u6240\u4ee5\u4e0d\u884c\uff0c\u7c7b\u4f3c\u5730\uff0c\u8fd9\u4e2a\u975e\u5e73\u51e1\u513f\u5b50\u4e5f\u4e00\u5b9a\u53ea\u80fd\u6709\u4e0d\u8d85\u8fc7\u4e00\u4e2a\u975e\u5e73\u51e1\u513f\u5b50\u3002\n\n\u90a3\u4e48\u73b0\u5728 $u$ \u6709\u4e14\u4ec5\u6709\u4e00\u4e2a **\u975e\u5e73\u51e1\u513f\u5b50**\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u6784\u9020\u3002\uff08\u6ca1\u6709\u975e\u5e73\u51e1\u513f\u5b50\u7684\u60c5\u51b5\u662f\u7b80\u5355\u7684\uff09\n\n\u4e0b\u9762\u7ed9\u51fa\u6211\u89c2\u5bdf\u7684\u53e6\u4e00\u4e2a\u7ed3\u6784\uff1a\uff08\u4e0b\u56fe\u5de6\u4fa7\uff09\n\n![\u56fe3](https://cdn.luogu.com.cn/upload/image_hosting/icnelkoy.png)\n\n\u56e0\u4e3a\u6709\u524d\u9762\u7684\u9650\u5236\uff0c\u6bcf\u4e2a\u70b9\u6700\u591a\u6709\u4e00\u4e2a\u975e\u5e73\u51e1\u513f\u5b50\uff0c\u90a3\u4e48\u6574\u4e2a\u6811\u7684\u7ed3\u6784\u65e0\u975e\u5c31\u662f\u4e0a\u56fe\u5de6\u4e0b\u7684\u90a3\u6837\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u9012\u5f52\u5730\u6784\u9020\u3002\n\n\uff08\u5176\u5b9e\u5927\u6982\u5c31\u662f\u8ba8\u8bba\u4e00\u4e0b\u975e\u5e73\u51e1\u513f\u5b50\u548c\u53f6\u5b50\u7684\u8bbf\u95ee\u987a\u5e8f\u3002\uff09\n\n\u5047\u8bbe\u76ee\u524d\u5728\u70b9 $\\text{go(u)}$\uff0c$u$ \u7684\u975e\u5e73\u51e1\u513f\u5b50\u662f $s$\uff0c$s$ \u7684\u975e\u5e73\u51e1\u513f\u5b50\u662f $t$\uff08\u5982\u4e0a\u56fe\uff09\uff0c\u90a3\u4e48\u6709\u5982\u4e0b\u904d\u5386\u65b9\u5f0f\uff1a\n\n\u5148\u4e0b\u964d\u5230 $s$ \u7684\u5e73\u51e1\u513f\u5b50\uff08\u82e5\u6ca1\u6709\u5219\u76f4\u63a5\u4e0b\u964d\u5230 $t$\uff09\uff0c\u5728\u5176\u4e4b\u95f4\u8df3\u8dc3\u540e\u8df3\u5230 $t$\uff0c\u9012\u5f52\u6267\u884c $\\text{go(t)}$\uff0c\u6b64\u65f6\u5728 $t$ \u7684\u4e00\u4e2a\u513f\u5b50\uff0c\u5219\u4e00\u5b9a\u53ef\u4ee5\u8df3\u5230 $s$\uff0c\u7136\u540e\u518d\u5728\u90a3\u4e9b\u5e73\u51e1\u7684\u53f6\u5b50\u4e4b\u95f4\u8df3\u8dc3\u5373\u53ef\uff0c\u4e0a\u9762\u56fe\u4e2d\u6e05\u6670\u5730\u753b\u51fa\u4e86\u8def\u5f84\u3002\n\n\u8fd9\u6837\u6784\u9020\u539f\u56e0\u662f\u6211\u4eec\u60f3\u8981\u8ba9 $s$ \u662f\u5728\u56de\u6765\u65f6\u88ab\u8bbf\u95ee\uff0c\u8fd9\u6837\u53ef\u4ee5\u8bbf\u95ee $u$ \u7684\u5176\u5b83\u5e73\u51e1\u513f\u5b50\uff0c\u8bbf\u95ee $t$ \u5e76\u9012\u5f52\u540e\u9700\u8981\u76f4\u63a5\u56de\u5230 $s$\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u904d\u5386 $s$ \u7684\u975e\u5e73\u51e1\u513f\u5b50\u518d\u53bb $t$\u3002\n\n---\n\n### $\\text{4.\u56de\u5f52\u539f\u95ee\u9898}$\n\n\u73b0\u5728\u91cd\u65b0\u56de\u5230\u539f\u95ee\u9898\uff0c\u52a0\u5165\u6211\u4eec\u76ee\u524d\u5728\u4e00\u4e2a\u8282\u70b9 $u$ \u4e0a\uff0c\u4e14 $n$ \u5728 $u$ \u7684\u5b50\u6811 $t$ \u4e2d\uff0c\u904d\u5386\u6240\u6709\u70b9\u5e76\u8d70\u5230 $n$ \u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a $\\text{solve(u)}$\u3002\n\n\u90a3\u4e48\u7c7b\u4f3c\u4e0a\u9762 $\\text{go(x)}$ \u4e2d\u7684\u8bc1\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c$u$ \u9664\u4e86 $t$ \u4e4b\u5916\uff0c\u6700\u591a\u53ea\u80fd\u6709\u4e00\u68f5\u975e\u5e73\u51e1\u5b50\u6811\uff0c\u5426\u5219\u662f\u65e0\u6cd5\u904d\u5386\u5e76\u53bb\u5230 $t$ \u7684\uff0c\u90a3\u4e48\u6211\u4eec\u4ee4\u8fd9\u4e2a\u975e\u5e73\u51e1\u513f\u5b50\u4e3a $s$\uff08\u6ca1\u6709\u975e\u5e73\u51e1\u513f\u5b50\u7684\u60c5\u51b5\u662f\u7b80\u5355\u7684\uff09\uff0c\u540c\u7406\uff0c\u8fd9\u4e2a\u975e\u5e73\u51e1\u513f\u5b50\u53ea\u80fd\u6709\u4e00\u4e2a\u975e\u5e73\u51e1\u513f\u5b50\uff08\u5426\u5219\u6211\u4eec\u50cf\u4e0a\u9762\u8bf4\u7684\u90a3\u6837\u65e0\u6cd5\u904d\u5386\u5b83\uff09\uff0c\u7136\u540e\u8fd9\u4e2a\u975e\u5e73\u51e1\u513f\u5b50\u662f $p$\uff0c\u5982\u4e0b\u56fe\u3002\n\n![\u56fe4](https://cdn.luogu.com.cn/upload/image_hosting/m2027w5w.png)\n\n\uff08\u65e0\u975e\u5c31\u662f\u8ba8\u8bba\u4e0b\u53f6\u5b50\u548c\u975e\u5e73\u51e1\u513f\u5b50\u7684\u904d\u5386\u5148\u540e\u987a\u5e8f\uff09\n\n\u6784\u9020\u65b9\u5f0f\uff08\u8def\u5f84\u5728\u4e0a\u56fe\u4e2d\u6e05\u6670\u5730\u753b\u51fa\u4e86\uff09\uff1a\n\n\u5148\u4e0b\u964d\u5230 $s$ \u7684\u4e00\u4e2a\u5e73\u51e1\u513f\u5b50\u5e76\u5728\u5176\u4e4b\u95f4\u8df3\u8dc3\u8bbf\u95ee\u5b8c\uff0c\u518d\u8bbf\u95ee $s$ \u7684\u975e\u5e73\u51e1\u513f\u5b50 $p$\uff08\u82e5\u6ca1\u6709\u5219\u76f4\u63a5\u8bbf\u95ee\u5e73\u51e1\u513f\u5b50\u540e\u8fd4\u56de\uff09\uff0c\u5e76\u5bf9\u5176\u6267\u884c $\\text{go(p)}$\uff0c\u7ed3\u675f\u540e\u5728 $p$ \u7684\u67d0\u4e2a\u513f\u5b50\uff08\u82e5\u6ca1\u6709\u5219\u76f4\u63a5\u8fd4\u56de\uff09\uff0c\u53ef\u4ee5\u8df3\u5230 $s$\uff0c\u7136\u540e\u518d\u8df3\u5230 $u$ \u7684\u5176\u5b83\u5e73\u51e1\u513f\u5b50\u5e76\u5728\u4e4b\u95f4\u8df3\u8dc3\uff0c\u6700\u540e\u8bbf\u95ee $t$\uff0c\u9012\u5f52\u6267\u884c $\\text{solve(t)}$\u3002\n\n---\n\n### $\\text{5.\u7279\u6b8a\u60c5\u51b5}$\n\n\uff08\u89c2\u5bdf\u6837\u4f8b\u53d1\u73b0\uff09\n\n\n\u5f53\u4e00\u4e2a\u70b9 $u$ \u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u513f\u5b50 $t$\uff0c\u4e14\u7ec8\u70b9\u5728\u91cc\u9762\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u4e0d\u4e00\u5b9a\u975e\u8981\u8bbf\u95ee $t$\uff0c\u4e4b\u6240\u4ee5\u524d\u9762\u6211\u4eec\u9700\u8981\u8bbf\u95ee $t$\uff0c\u662f\u56e0\u4e3a\u5176\u5b83\u513f\u5b50\u65e0\u6cd5\u8df3\u5230 $t$ \u7684\u5b50\u6811\u91cc\uff0c\u800c\u4e14 $t$ \u5fc5\u987b\u8981\u88ab\u6700\u540e\u8bbf\u95ee\uff0c\u6240\u4ee5\u5c31\u53ea\u80fd\u8df3\u8dc3\u5230 $t$ \u4e86\u3002\n\n\u70b9 $u$ \u6709\u4e14\u4ec5\u6709\u513f\u5b50 $t$ \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230 $t$ \u7684\u67d0\u4e2a\u5b50\u6811\u540e\u518d\u56de\u5230 $t$\uff0c\u5e76\u6267\u884c $\\text{solve(t)}$ \u7684\u64cd\u4f5c\uff0c\u4e3e\u4f8b\u5982\u56fe\uff1a\n\n![\u56fe5](https://cdn.luogu.com.cn/upload/image_hosting/f2jjb17s.png)\n\n$t$ \u672c\u8eab\u6709\u4e24\u4e2a\u9664 $n$ \u6240\u5728\u5b50\u6811\u5916\u7684\u975e\u5e73\u51e1\u5b50\u6811\uff0c\u5982\u679c\u76f4\u63a5 $\\text{solve(t)}$ \u662f\u65e0\u89e3\u7684\uff0c\u4f46\u662f\u5982\u679c\u6211\u5728 $u$ \u4f4d\u7f6e\u7684\u5c31\u76f4\u63a5\u4e0b\u964d\u5230 $t$ \u7684\u67d0\u4e2a\u975e\u5e73\u51e1\u513f\u5b50\uff0c\u518d\u56de\u5230 $t$\uff0c\u5c31\u80fd\u6784\u9020\u51fa\u4e00\u6761\u5408\u6cd5\u7684\u8def\u5f84\u3002\n\n\u5176\u5b9e\u8fd9\u4e2a\u64cd\u4f5c\u7684\u672c\u8d28\u5c31\u662f\u201c\u5982\u679c\u76ee\u524d\u8fd9\u4e2a\u70b9\u6709\u4e14\u4ec5\u6709\u7ec8\u70b9\u6240\u5728\u5b50\u6811\u8fd9\u4e00\u4e2a\u513f\u5b50\uff0c\u6211\u53ef\u4ee5\u63d0\u524d\u5904\u7406\u6389\u8fd9\u4e2a\u513f\u5b50\u7684\uff08\u9664\u7ec8\u70b9\u6240\u5728\u5b50\u6811\u4e4b\u5916\u7684\uff09 **\u4e00\u4e2a\u975e\u5e73\u51e1\u513f\u5b50** \u548c **\u6240\u6709\u5e73\u51e1\u513f\u5b50**\u201d\uff0c\u8fd9\u6837\u53ef\u80fd\u4f7f\u5f97\u672c\u8eab\u6709 $2$ \u4e2a\uff08\u9664\u7ec8\u70b9\u6240\u5728\u5b50\u6811\u4e4b\u5916\u7684\uff09\u975e\u5e73\u51e1\u513f\u5b50\u7684\u5b50\u6811\u53d8\u5f97\u53ea\u6709\u4e00\u4e2a\u975e\u5e73\u51e1\u513f\u5b50\uff0c\u53ef\u4ee5\u7ee7\u7eed\u3002 \u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u5f97\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u975e\u5e73\u51e1\u513f\u5b50\u7684\u70b9\u53d8\u5f97\u53ea\u6709\u7ec8\u70b9\u6240\u5728\u5b50\u6811\u8fd9\u4e00\u4e2a\u513f\u5b50\uff0c\u53ef\u4ee5\u7ee7\u7eed\u4f20\u9012\u4e0b\u53bb\u8fd9\u4e2a\u6027\u8d28\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u5c11\u4e00\u4e2a\u975e\u5e73\u51e1\u5b50\u6811\u548c\u4e00\u4e9b\u5e73\u51e1\u5b50\u6811\u4e00\u5b9a\u662f\u4e0d\u52a3\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u63d0\u524d\u5904\u7406\u6389\u5bf9\u5e94\u5b50\u6811\uff0c\u5e76\u6253\u597d\u6807\u8bb0\u5220\u9664\u6389\u5c31\u884c\u4e86\u3002\n\n---\n\n### $\\text{6.\u4ee3\u7801\u5b9e\u73b0}$\n\n\u4ee5\u4e0b\u662f\u6240\u7528\u5230\u4e24\u4e2a\u6784\u9020\u7684 \u7b80\u8ff0\uff1a\n\n$\\text{go(u)}$\n\n&#8195;\u82e5 $u$ \u6709\u4e0d\u5c11\u4e8e\u4e24\u4e2a\u975e\u5e73\u51e1\u513f\u5b50\u5219\u975e\u6cd5\u3002\n\n&#8195;\u82e5 $u$ \u6ca1\u6709\u975e\u5e73\u51e1\u513f\u5b50\u5219\u76f4\u63a5\u904d\u5386\u3002\n\n&#8195;\u82e5 $u$ \u6709\u4e00\u4e2a\u975e\u5e73\u51e1\u513f\u5b50 $s$\uff0c\u5219\u5148\u4e0b\u964d\u5230 $s$ \u7684\u5e73\u51e1\u513f\u5b50\uff08\u82e5\u6ca1\u6709\u5219\u76f4\u63a5\u4e0b\u964d   \u5230 $t$\uff09\uff0c\u5728\u5176\u4e4b\u95f4\u8df3\u8dc3\u540e\u8df3\u5230 $t$\uff0c\u9012\u5f52\u6267\u884c $\\text{go(t)}$\u3002\n\n\u56de\u5230 $s$\uff0c\u5728\u90a3\u4e9b $u$ \u5e73\u51e1\u7684\u53f6\u5b50\u4e4b\u95f4\u8df3\u8dc3\u3002\n\n\n$\\text{solve(u)}$ \n\n\u5982\u679c $u$ \u6709\u76ee\u524d\u5269\u4f59\u7684\u552f\u4e00\u513f\u5b50 $t$\u3002\n\n&#8195; $t=n$\uff0c\u8df3\u5230\u513f\u5b50\u5e76\u904d\u5386\uff0c\u82e5\u6709\u8d85\u8fc7\u4e00\u4e2a\u975e\u5e73\u51e1\u513f\u5b50\u5219\u975e\u6cd5\u3002\n\n&#8195; $t\\neq n$\uff0c\u90a3\u4e48\u5904\u7406\u6389 $t$ \u7684\u4e00\u4e2a\u975e\u5e73\u51e1\u513f\u5b50 $p$\uff0c\u6267\u884c $\\text{go(p)}$ \u540e\u6267\u884c $\\text{solve(t)}$\uff08\u5982\u679c\u6ca1\u6709\u5219\u76f4\u63a5\u6267\u884c\uff09\u3002\n\n$u$ \u6709\u522b\u7684\u975e\u5e73\u51e1\u513f\u5b50 $s$\uff0c\u6267\u884c\u4e0a\u9762 $\\text{4}$ \u4e2d\u63d0\u5230\u7684\n\n\u5148\u4e0b\u964d\u5230 $s$ \u7684\u4e00\u4e2a\u5e73\u51e1\u513f\u5b50\u5e76\u5728\u5176\u4e4b\u95f4\u8df3\u8dc3\u8bbf\u95ee\u5b8c\uff0c\u518d\u8bbf\u95ee $s$ \u7684\u975e\u5e73\u51e1\u513f\u5b50 $p$\uff08\u82e5\u6ca1\u6709\u5219\u76f4\u63a5\u8bbf\u95ee\u5e73\u51e1\u513f\u5b50\u540e\u8fd4\u56de\uff09\uff0c\u5e76\u5bf9\u5176\u6267\u884c $\\text{go(p)}$\uff0c\u7ed3\u675f\u540e\u5728 $p$ \u7684\u67d0\u4e2a\u513f\u5b50\uff08\u82e5\u6ca1\u6709\u5219\u76f4\u63a5\u8fd4\u56de\uff09\uff0c\u53ef\u4ee5\u8df3\u5230 $s$\uff0c\u7136\u540e\u518d\u8df3\u5230 $u$ \u7684\u5176\u5b83\u5e73\u51e1\u513f\u5b50\u5e76\u5728\u4e4b\u95f4\u8df3\u8dc3\uff0c\u6700\u540e\u8bbf\u95ee $t$\uff0c\u9012\u5f52\u6267\u884c $\\text{solve(t)}$\u3002\n\n\n\u5982\u679c $n$ \u6709\u5176\u5b83\u6ca1\u6709\u88ab\u6d88\u53bb\u7684\u5144\u5f1f\u5bfc\u81f4\u5b83\u53ea\u80fd\u88ab\u4ece\u5144\u5f1f\u8df3\u8dc3\u8fc7\u6765\uff0c\u90a3\u4e48\u5982\u679c\u5b83\u6709\u513f\u5b50\u5c31\u65e0\u6cd5\u88ab\u8bbf\u95ee\u4e86\uff0c\u65e0\u89e3\u3002\n\n---\n\n\u8d34\u5768[\u5c4e](https://www.luogu.com.cn/paste/uz0lom7o)\u5728\u8fd9\u91cc\u3002\u611f\u89c9\u6ca1\u4ec0\u4e48\u53c2\u8003\u4ef7\u503c\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1679071451,
        "uid": 161697,
        "name": "\u10e6\ua9bf\u0fd0",
        "ccfLevel": 7,
        "title": "MUL-Multidrink \u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "\u5176\u4ed6\u9898\u89e3\u90fd\u662f\u5927\u7801\u91cf\u7684\u76f4\u63a5\u6784\u9020\uff0c\u6765\u4e00\u53d1 dp \u7684\u9898\u89e3\u3002\n\n\u601d\u8def\u5f88\u660e\u786e\uff0c\u76f4\u63a5 dp\uff0c\u7136\u540e\u8f93\u51fa\u8def\u5f84\u5373\u53ef\u3002\n\n\u8003\u8651\u5148\u628a $1\\to n$ \u7684\u8def\u5f84\u627e\u51fa\u6765\uff0c\u8bb0\u4e3a $a_i(1\\le i\\le m)$\u3002\n\n\u90a3\u4e48\u80af\u5b9a\u5b58\u5728\u4e00\u79cd\u8def\u5f84\u4f9d\u6b21\u7ecf\u8fc7\u8fd9\u4e9b\u70b9\u7684\u5b50\u6811\uff0c\u7136\u540e\u904d\u5386\u5b8c $a_i$ \u7684\u5b50\u6811\u540e\u518d\u904d\u5386 $a_{i+1}$ \u7684\u5b50\u6811\u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u4e2a $a_i$ \u7684\u5b50\u6811\u5c31\u5404\u81ea\u72ec\u7acb\u4e86\uff0c\u6240\u4ee5\u5206\u522b\u5bf9\u6bcf\u4e2a\u5b50\u6811\u8fdb\u884c\u6c42\u89e3\u3002\n\n#### \u904d\u5386\u5b50\u6811\n\n\u7531\u4e8e\u6bcf\u6b21\u6700\u591a\u53ea\u80fd\u8df3 $2$ \u6b65\uff0c\u6240\u4ee5\u5982\u679c\u8981\u904d\u5386 $u$ \u7684\u5b50\u6811\u5185\u7684\u6240\u6709\u70b9\uff0c\u90a3\u4e48\u53ea\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a\n\n- \u5148\u5230 $u$\uff0c\u7136\u540e\u4ece $u$ \u8df3\u51fa\u53bb\uff08\u5f53\u4e14\u4ec5\u5f53 $u$ \u4e3a\u53f6\u5b50\u8282\u70b9\u65f6\u53ef\u4ee5\uff09\uff1b\n\n- \u5148\u5230 $u$\uff0c\u7136\u540e\u4ece $u$ \u7684\u67d0\u4e2a\u513f\u5b50\u8df3\u51fa\u53bb\uff1b\n\n- \u5148\u5230 $u$ \u7684\u67d0\u4e2a\u513f\u5b50\uff0c\u7136\u540e\u4ece $u$ \u7684\u67d0\u4e2a\u513f\u5b50\u8df3\u51fa\u53bb\uff1b\n\n- \u5148\u5230 $u$ \u7684\u67d0\u4e2a\u513f\u5b50\uff0c\u7136\u540e\u4ece $u$ \u8df3\u51fa\u53bb\u3002\n\n\u89c2\u5bdf\u8fd9\u4e9b\u60c5\u51b5\uff0c\u53d1\u73b0\u7b2c\u4e8c\u79cd\u548c\u7b2c\u56db\u79cd\u672c\u8d28\u4e0a\u662f\u4e00\u6837\u7684\uff0c\u65e0\u975e\u5c31\u662f\u904d\u5386\u987a\u5e8f\u6b63\u53cd\u800c\u5df2\uff0c\u5148\u5408\u5e76\u4e3a\u4e00\u79cd\u3002\n\n\u4e8e\u662f\uff0c\u8bbe $f_{u,i=0/1/2}$ \u5206\u522b\u4e3a\u4e0a\u8ff0\u7684\u7b2c $i+1$ \u4e2d\u60c5\u51b5\u662f\u5426\u53ef\u884c\u3002\n\n\u8003\u8651\u5982\u4f55\u8f6c\u79fb\uff1a\n\n$f_{u,0}=[u\\ is\\ \\texttt{leaf}];$\n\n$f_{u,1}$ \u81f3\u591a\u53ef\u4ee5\u5148\u8df3\u5230\u4e00\u4e2a\u975e\u53f6\u5b50\u7684\u513f\u5b50\u904d\u5386\uff0c\u6700\u540e\u505c\u5728\u8fd9\u4e2a\u513f\u5b50\uff0c\u63a5\u7740\u8df3\u5230\u5176\u4ed6\u7684\u53f6\u5b50\u7684\u513f\u5b50\u3002\n\n\u5373 $f_{u,1}=\\operatorname{and}_{v\\in son(u)}f_{v,0}/f_{v,1}$\uff0c\u5176\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a $f_{v,1}$\u3002\n\n\u6240\u4ee5\u8f6c\u79fb\u5c31\u662f\uff1a\n\n```cpp\nf[u][1]=1;\nint t1=0;\nfor(int v:A[u])if(v^fa&&!vis[v]){\n\tdfs(v,u);\n\tif(!f[v][0])\n\t\tif(!f[v][1])f[u][1]=0;\n\t\telse if(++t1>1)f[u][1]=0;\n}\n```\n\n$f_{u,2}$ \u7684\u8bdd\u5c31\u662f\u8981\u6709\u4e24\u4e2a\u513f\u5b50\u53ef\u4ee5\u5148\u5230 $v$\uff0c\u518d\u4ece $v$ \u7684\u513f\u5b50\u8df3\u51fa\u6216\u5148\u5230 $v$ \u7684\u513f\u5b50\u518d\u4ece $v$ \u8df3\u51fa\uff08\u4e24\u4e2a\u513f\u5b50\u7684\u904d\u5386\u987a\u5e8f\u51b3\u5b9a\u4e86\u662f\u5c5e\u4e8e\u7b2c\u4e8c\u79cd\u8fd8\u662f\u7b2c\u56db\u79cd\uff0c\u5148\u904d\u5386\u5230\u7684\u9009\u62e9\u7b2c\u4e8c\u79cd\uff0c\u540e\u904d\u5386\u5230\u7684\u9009\u62e9\u7b2c\u56db\u79cd\uff09\u3002\n\n\u8f6c\u79fb\u5982\u4e0b\uff1a\n\n```cpp\nf[u][2]=1;\nint t2=0;\nfor(int v:A[u])if(v^fa&&!vis[v]){\n\tdfs(v,u);\n\tif(!f[v][0])\n\t\tif(!f[v][1])f[u][2]=0;\n\t\telse if(++t2>2)f[u][2]=0;\n}\n```\n\n\u8fd9\u6837 $f$ \u5c31\u53ef\u4ee5 $O(n)$ \u5b8c\u6210\u8f6c\u79fb\u4e86\u3002\n\n#### \u904d\u5386 $1\\to n$ \u7684\u94fe\n\n\u8bbe $g_{i,0/1}$ \u8868\u793a $a_i$ \u7684\u5b50\u6811\u904d\u5386\u5b8c\u4e4b\u540e\uff0c\u5728 $u$ \u6216 $u$ \u7684\u67d0\u4e2a\u513f\u5b50\uff0c\u662f\u5426\u53ef\u884c\u3002\n\n\u8fd9\u6837\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u679a\u4e3e $a_i$ \u548c $a_{i+1}$ \u7684\u72b6\u6001\uff0c\u9009\u62e9\u5408\u9002\u7684 $f_{a_{i+1}}$ \u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\u3002\n\n\u8f6c\u79fb\u89c1\u4ee3\u7801\uff0c\u5176\u5b9e\u5e76\u4e0d\u96be\uff0c\u590d\u6742\u5ea6\u4e5f\u662f $O(n)$\u3002\n\n### \u603b\u7ed3\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86 $f,g$ \u7684\u8f6c\u79fb\uff0c\u5224\u65ad\u6709\u89e3\u65e0\u89e3\uff0c\u7136\u540e\u6309\u7167\u8f6c\u79fb\u7684\u65b9\u5f0f\u8f93\u51fa dp \u7684\u8def\u5f84\u5373\u53ef\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\uff0c\u603b\u590d\u6742\u5ea6\uff1a$O(n)$\u3002\n\n### \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;using ll=long long;const int N=5e5+10;\nint n,m,top,a[N],stk[N],vis[N],f[N][3],g[N][2];vector<int>ans,A[N];\nvoid add(int u,int v){A[u].push_back(v);A[v].push_back(u);}\nvoid find(int u,int fa=0){\n\tstk[++top]=u;if(u==n)copy(stk+1,stk+1+top,a+1),m=top;\n\tfor(int v:A[u])if(v^fa)find(v,u);stk[top--]=0;\n}\nvoid dfs(int u,int fa=0){\n\tf[u][0]=f[u][1]=f[u][2]=1;\n\tint t=0,t1=0,t2=0;\n\tfor(int v:A[u])if(v^fa&&!vis[v]){//f \u7684\u8f6c\u79fb\n\t\tt++;dfs(v,u);\n\t\tif(!f[v][0])if(!f[v][1])f[u][1]=0;else if(++t1>1)f[u][1]=0;\n\t\tif(!f[v][0])if(!f[v][1])f[u][2]=0;else if(++t2>2)f[u][2]=0;\n\t}\n\tif(t)f[u][0]=0;else f[u][1]=f[u][2]=0;//\u7279\u5224\u53f6\u5b50\u8282\u70b9\n}\nvoid findf(int u,int i,int fa=0){\n\tif(!i){\n\t\tans.push_back(u);//\u53f6\u5b50\u8282\u70b9\n\t}\n\telse if(i==1){//u \u5f00\u59cb,v \u7ed3\u675f\n\t\tans.push_back(u);//\u56e0\u4e3a\u662f u \u5f00\u59cb,\u6240\u4ee5\u76f4\u63a5\u628a u \u6254\u8fdb\u53bb\u5c31\u597d\u4e86\n\t\tfor(int v:A[u])if(v^fa&&!vis[v]){//\u5148\u904d\u5386\u975e\u53f6\u5b50\n\t\t\tif(!f[v][0])findf(v,3,u);\n\t\t}\n\t\tfor(int v:A[u])if(v^fa&&!vis[v]){//\u518d\u904d\u5386\u53f6\u5b50\n\t\t\tif(f[v][0])findf(v,0,u);\n\t\t}\n\t}\n\telse if(i==2){//v \u5f00\u59cb,v' \u7ed3\u675f\n\t\tint t=0;\n\t\tfor(int v:A[u])if(v^fa&&!vis[v]){\n\t\t\tif(!f[v][0])t++;\n\t\t}\n\t\tif(t==1)return findf(u,1,fa);//\u5fc5\u987b\u8981\u627e\u5230\u4e24\u4e2a\u4e0d\u540c\u7684 v \u548c v',\u5426\u5219\u5c31\u662f\u7b2c 2 \u79cd\u60c5\u51b5\n\t\tt=0;\n\t\tfor(int v:A[u])if(v^fa&&!vis[v]){\n\t\t\tif(!f[v][0]){\n\t\t\t\tif(!t)findf(v,1,u),ans.push_back(u),t++;\n\t\t\t\telse findf(v,3,u);\n\t\t\t\t//\u7b2c\u4e00\u4e2a v \u5148\u5230 v,\u518d\u5230\u513f\u5b50\n\t\t\t\t//\u7b2c\u4e8c\u4e2a v' \u5148\u5230\u513f\u5b50\uff0c\u518d\u5230 v'\n\t\t\t}\n\t\t}\n\t\tfor(int v:A[u])if(v^fa&&!vis[v]){\n\t\t\tif(f[v][0])findf(v,0,u);//\u6700\u540e\u904d\u5386\u53f6\u5b50\u8282\u70b9\n\t\t}\n\t}else{//\u4e0e\u60c5\u51b5 2 \u7c7b\u4f3c,\u5012\u7740\u505a\u5c31\u597d\u4e86\n\t\tfor(int v:A[u])if(v^fa&&!vis[v]){\n\t\t\tif(f[v][0])findf(v,0,u);\n\t\t}\n\t\tfor(int v:A[u])if(v^fa&&!vis[v]){\n\t\t\tif(!f[v][0])findf(v,1,u);\n\t\t}\n\t\tans.push_back(u);\n\t}\n}\nvoid findg(int i,int j){//g \u7684\u8def\u5f84\u8f93\u51fa\n\tif(i==1){\n\t\tfindf(i,j);\n\t\treturn;\n\t}\n\tint u=a[i];\n\tif(j==0){//\u76f4\u63a5\u7167\u642c\u8f6c\u79fb\u7684\u65b9\u7a0b\u5373\u53ef\n\t\tif(g[i-1][0]&f[u][0])return findg(i-1,0),findf(u,0);\n\t\tif(g[i-1][0]&f[u][1])return findg(i-1,0),findf(u,3);\n\t\tfindg(i-1,1);findf(u,0);\n\t}else{\n\t\tif(g[i-1][0]&f[u][1])return findg(i-1,0),findf(u,1);\n\t\tif(g[i-1][0]&f[u][2])return findg(i-1,0),findf(u,2);\n\t\tfindg(i-1,1);findf(u,1);\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);for(int i=1,u,v;i<n;i++)scanf(\"%d%d\",&u,&v),add(u,v);\n\tfind(1);for(int i=1;i<=m;i++)vis[a[i]]=1;for(int i=1;i<=m;i++)dfs(a[i]);\n\tg[1][0]=f[1][0];g[1][1]=f[1][1];//g \u7684\u521d\u59cb\u5316\n\tfor(int i=2,u;u=a[i],i<=m;i++){//g \u7684\u8f6c\u79fb\n\t\tg[i][0]|=g[i-1][0]&(f[u][0]|f[u][1]);\n\t\tg[i][0]|=g[i-1][1]&f[u][0];\n\t\tg[i][1]|=g[i-1][0]&(f[u][1]|f[u][2]);\n\t\tg[i][1]|=g[i-1][1]&f[u][1];\n\t}\n\tif(!g[m][0])return puts(\"BRAK\"),0;//\u6ce8\u610f\u6700\u540e\u8981\u843d\u5728 n\uff0c\u6240\u4ee5 g[m][1] \u6ca1\u6709\u7528\n\tfindg(m,0);\n\tfor(int x:ans)printf(\"%d\\n\",x);\n\treturn 0;\n}\n\n```\n### \u8c22\u8c22\u60a8\u7684\u9605\u8bfb\uff0c\u6709\u95ee\u9898\u8bf7\u6307\u51fa\n",
        "postTime": 1673969241,
        "uid": 263082,
        "name": "A_zjzj",
        "ccfLevel": 7,
        "title": "P3549 [POI2013]MUL-Multidrink \u9898\u89e3--zhengjun"
    },
    {
        "content": "# \u9898\u76ee\n\n[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P3549)\u770b\u9898\u76ee\u3002\n\n\u7ed9\u5b9a\u4e00\u68f5\u5305\u542b $n$ \u4e2a\u7ed3\u70b9\u7684\u6811\u3002\n\n\u6784\u9020\u4e00\u4e2a $1\\sim n$ \u7684\u6392\u5217 $p_1,p_2,\\dots,p_n$\uff0c\u6ee1\u8db3\uff1a\n\n1. $p_1=1,p_n=n$\u3002\n\n2. \u5bf9\u4e8e\u4efb\u610f\u7684 $1\\le k<n$\uff0c$p_k$ \u548c $p_{k+1}$ \u4e4b\u95f4\u7684**\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $2$**\u3002\n\n\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8f93\u51fa `BRAK`\u3002\u5982\u679c\u5b58\u5728\uff0c\u8f93\u51fa\u4efb\u610f\u4e00\u7ec4\u89e3\u3002\n\n\u6240\u6709\u6570\u636e\u6ee1\u8db3 $2\\le n\\le 5\\times 10^5$\u3002\n\n# \u5206\u6790\n\n\u9996\u5148\u53ef\u4ee5\u624b\u73a9\u4e00\u4e0b\u201c\u6811\u5f62\u4e3a\u94fe\uff0c\u4e14 $1$ \u4e3a\u4e00\u7aef\u201d\u2014\u2014\u8fc7\u7a0b\u548c\u7ed3\u679c\u90fd\u6bd4\u8f83\u7b80\u5355\u3002\u4ece $1$ \u4e00\u8def\u8d70\u5230 $n$ \u7684\u7236\u4eb2\uff0c\u4e4b\u540e\u7684\u4ea4\u9519\u8df3\u5373\u53ef\u3002\n\n\u53ef\u4ee5\u611f\u77e5\u5230\uff0c\u201c\u8ddd\u79bb\u201d\u9650\u5236\u8fd8\u662f\u6bd4\u8f83\u7d27\u7684\u3002\u62ff\u8fd9\u6837\u7684\u7ecf\u9a8c\uff0c\u5206\u6790\u4e00\u4e0b**\u4e00\u822c\u6811\u4e0a\u7684\u8d77\u624b\u7b56\u7565**\u3002\u8bbe $v$ \u4e3a $n$ \u6240\u5728\u5b50\u6811\uff0c\u90a3\u4e48\uff1a\n\n1. \u5982\u679c $v$ \u662f\u552f\u4e00\u7684\u513f\u5b50\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5**\u8df3\u5230 $v$ \u5b50\u6811**\u3002\n\n2. \u5982\u679c\u9664\u4e86 $v$ \u4ee5\u5916\u5176\u5b83\u513f\u5b50\u90fd\u662f\u53f6\u5b50\uff0c\u90a3\u4e48\u53ef\u4ee5\u5148\u8df3\u53f6\u5b50\uff0c\u6700\u540e**\u8df3\u5230 $v$ \u7ed3\u70b9**\u3002\n\n3. \u5426\u5219\uff0c\u53ef\u4ee5\u53d1\u73b0 $v$ \u4ee5\u5916\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u513f\u5b50\u4e0d\u662f\u53f6\u5b50\uff0c\u6211\u4eec\u8bb0\u90a3\u4e2a\u513f\u5b50\u4e3a $w$\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u7ec8\u6211\u4eec\u5fc5\u987b\u56de\u5230 $w$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e**\u94fe\u4e0a\u884c\u8d70**\uff0c\u4e8e\u662f\u53ef\u4ee5\u6784\u9020\uff1a\n\n   ![](https://cdn.luogu.com.cn/upload/image_hosting/y7fo5vhm.png)\n\n   \u4e5f\u5c31\u662f\uff0c\u5148\u8df3\u5230 $w$ \u7684\u4e00\u4e2a\u513f\u5b50\uff0c\u7ecf\u8fc7 $w$ \u5b50\u6811\u4e4b\u540e\u5230\u8fbe $w$\uff0c\u7136\u540e\u4ece $w$ **\u8df3\u5230 $v$ \u7ed3\u70b9**\u3002\n\n\u8fd9\u4e9b\u8003\u8651\u8d77\u6765\u90fd\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u4e00\u5b9a\u8981\u5206\u6e05\u695a\uff1a**\u60c5\u51b5 1 \u548c\u60c5\u51b5 2\uff0c3 \u662f\u672c\u8d28\u4e0d\u540c\u7684**\u3002\u524d\u8005\u662f\u4ece $v$ \u7684\u7236\u4eb2\u51fa\u53d1\uff08\u7b2c\u4e00\u7c7b\uff09\uff0c\u800c\u540e\u8005\u662f\u4ece $v$ \u51fa\u53d1\uff08\u7b2c\u4e8c\u7c7b\uff09\u3002\u7b2c\u4e8c\u7c7b\u53ef\u4ee5\u904d\u5386\u5b8c\u7684\u60c5\u51b5\u65f6\u7b2c\u4e00\u7c7b\u7684**\u771f\u5b50\u96c6**\u3002\u4ece $1$ \u51fa\u53d1\u5c31\u5c5e\u4e8e\u7b2c\u4e8c\u7c7b\uff0c\u56e0\u6b64\u6211\u4eec\u5df2\u7ecf\u5206\u6790\u5b8c\u4e86\u7b2c\u4e8c\u7c7b\u7684\u8d70\u6cd5\u4e86\u3002\n\n----------\n\n\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u89e3\u51b3 $w$ \u7684\u95ee\u9898\uff08\u7b2c\u4e09\u7c7b\uff09\u3002\u8003\u8651\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u7b2c\u4e8c\u7c7b\u7684\u60c5\u51b5\uff1a\u6211\u4eec\u9700\u8981\u4ece $s$ \u51fa\u53d1\uff0c\u904d\u5386\u5b8c $s$ \u5b50\u6811\u540e**\u56de\u5230 $s$ \u7684\u4e00\u4e2a\u513f\u5b50\u4e0a**\u3002\u90a3\u4e48\uff1a\n\n1. \u5982\u679c $s$ \u7684\u6240\u6709\u513f\u5b50\u90fd\u662f\u53f6\u5b50\uff0c\u7565\u3002\n\n2. \u5982\u679c $s$ \u6709\u513f\u5b50\u4e0d\u662f\u53f6\u5b50\uff0c\u5219\u8fd9\u6837\u7684\u513f\u5b50**\u81f3\u591a\u53ea\u6709\u4e00\u4e2a**\uff0c\u6709\u591a\u4e2a\u5c31\u65e0\u6cd5\u56de\u5230 $s$ \u7684\u513f\u5b50\u4e4b\u4e2d\u4e86\u3002\n\n   \u8bbe\u975e\u53f6\u5b50\u513f\u5b50\u4e3a $w$\uff0c\u6784\u9020\u7b56\u7565\u57fa\u672c\u540c\u7b2c\u4e8c\u7c7b 3.\uff1a\u5148\u8d70\u5230 $w$ \u7684\u4e00\u4e2a\u513f\u5b50\uff0c\u904d\u5386\u5b8c\u4e4b\u540e\u56de\u5230 $w$\uff0c\u7136\u540e\u4ece $w$ \u5f00\u59cb\u904d\u5386\u5b8c\u6240\u6709\u53f6\u5b50\u3002\n\n\u4e3a\u4e86 2. \u6211\u4eec\u9700\u8981\u518d\u6784\u9020\u4e00\u4e2a\u201c\u7b2c\u56db\u7c7b\u201d\u95ee\u9898\u5417\uff1f\u663e\u7136\u8fc7\u4e8e\u590d\u6742\u3002\u6211\u4eec\u6ce8\u610f\u5230**\u8def\u5f84\u5177\u6709\u5929\u7136\u7684\u5bf9\u79f0\u6027**\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u5c06\u7b2c\u4e09\u7c7b\u8f93\u51fa\u7684\u8def\u5f84\u53cd\u8fc7\u6765\uff0c\u6070\u597d\u5c31\u662f\u201c\u4ece $s$ \u7684\u4e00\u4e2a\u513f\u5b50\u51fa\u53d1\uff0c\u904d\u5386\u5b8c\u5b50\u6811\u540e\u56de\u5230 $s$ \u7684\u8def\u5f84\u201d\uff01\u53ea\u9700\u8981\u5feb\u901f\u5730\u5904\u7406\u201c\u53cd\u5e8f\u201d\u5373\u53ef\uff0c\u540e\u9762\u518d\u6765\u8ba8\u8bba\u3002\n\n----------\n\n\u76f8\u5e94\u5730\uff0c\u7b2c\u4e8c\u7c7b 3. \u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u7b2c\u4e09\u7c7b\u95ee\u9898\u7684\u89e3\u6cd5\u89e3\u51b3\uff0c\u4e8e\u662f\u6211\u4eec\u989d\u5916\u8ba8\u8bba\u4e00\u4e0b\u7b2c\u4e00\u7c7b\u3002\n\n\u8d2a\u5fc3\u5730\u60f3\uff0c\u4ece $s$ \u51fa\u53d1\uff0c\u5982\u679c $n$ \u5728 $v$ \u7684\u5b50\u6811\u5185\uff0c\u6211\u4eec\u5c31\u5e94\u8be5**\u5c3d\u91cf\u8ba9 $v$ \u4e5f\u53ef\u4ee5\u9762\u5bf9\u201c\u7b2c\u4e00\u7c7b\u201d\u7684\u60c5\u51b5**\u3002\u6b64\u5916\uff0c\u7ed3\u5408\u6837\u4f8b\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u70b9\u63d0\u793a\u3002\u8bbe $c$ \u4e3a\u201c\u975e\u53f6\u5b50\u513f\u5b50\u6216\u5305\u542b $n$ \u7684\u513f\u5b50\u603b\u4e2a\u6570\u201d\uff0c\u5219\u6709\uff1a\n\n1. \u5982\u679c $c=1$\uff0c\u5219\u5148\u904d\u5386\u53f6\u5b50\u513f\u5b50\uff0c\u800c\u540e\u7ecf\u8fc7 $s$\uff0c\u6700\u540e\u8fdb\u5165 $v$ \u7684\u5b50\u6811\uff0c\u53d8\u6210\u7b2c\u4e00\u7c7b\u5b50\u95ee\u9898\u3002\n\n2. \u5982\u679c $c=2$\uff0c\u8bbe\u53e6\u5916\u7684\u975e\u53f6\u5b50\u513f\u5b50\u4e3a $w$\uff0c\u5219\uff1a\n\n   ![](https://cdn.luogu.com.cn/upload/image_hosting/0ko1dunn.png)\n\n   \u5e94\u5f53\u5148\u904d\u5386\u53f6\u5b50\uff0c\u518d\u5230\u8fbe $w$\uff0c\u904d\u5386\u5b8c\u5176\u5b50\u6811\u540e\u5230\u8fbe $w$ \u7684\u4e00\u4e2a\u513f\u5b50\uff0c\u800c\u540e\u5230\u8fbe $s$\uff0c\u6700\u540e\u8fdb\u5165 $v$ \u7684\u5b50\u6811\uff0c\u53d8\u6210\u7b2c\u4e00\u7c7b\u5b50\u95ee\u9898\u3002\n\n3. \u5982\u679c $c=3$\uff0c\u8bbe\u53e6\u5916\u4e24\u4e2a\u975e\u53f6\u5b50\u513f\u5b50\u4e3a $w,x$\uff0c\u5219\uff1a\n\n   ![](https://cdn.luogu.com.cn/upload/image_hosting/dy9mxmo6.png)\n\n   \u5e94\u5f53\u5148\u904d\u5386\u53f6\u5b50\uff0c\u518d\u5230\u8fbe $x$\uff0c\u904d\u5386\u5b8c\u5176\u5b50\u6811\u540e\u5230\u8fbe $x$ \u7684\u4e00\u4e2a\u513f\u5b50\uff0c\u800c\u540e\u5230\u8fbe $s$\uff0c\u518d\u5230\u8fbe $w$ \u7684\u4e00\u4e2a\u513f\u5b50\uff0c\u904d\u5386\u5b8c $w$ \u540e\u5230\u8fbe $w$\uff0c\u6700\u540e\u5230\u8fbe $v$ \u7ed3\u70b9\uff0c\u53d8\u6210\u7b2c\u4e8c\u7c7b\u5b50\u95ee\u9898\u3002\n\n----------\n\n\u6700\u540e\u9700\u8981\u5904\u7406\u4e00\u4e0b\u201c\u5012\u5e8f\u201d\u7684\u95ee\u9898\u3002\n\n\u5728\u4ee3\u7801\u5b9e\u73b0\u4e2d\uff0c\u4e8b\u5b9e\u4e0a\u5c06\u201c\u5012\u5e8f\u201d**\u5355\u72ec\u5199\u6210\u4e00\u4e2a\u51fd\u6570**\u53ef\u4ee5\u5f97\u5230\u66f4\u7b80\u5355\u7684\u903b\u8f91\u3002\u4e0d\u8fc7\uff0c\u7531\u4e8e\u5b50\u6811\u5927\u5c0f\u786e\u5b9a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u77e5\u9053\u67d0\u4e2a\u5b50\u6811\u6700\u7ec8\u4f1a\u5360\u636e\u7684\u533a\u95f4\u3002\u800c\u65b9\u5411\u4e5f\u53ef\u4ee5\u5728\u8fdb\u5165\u5b50\u6811\u524d\u5f97\u77e5\uff0c\u56e0\u6b64\u53e6\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f**\u6539\u53d8\u586b\u5199\u4f4d\u7f6e\u548c\u65b9\u5411\u6a21\u62df\u5012\u5e8f**\u3002\u4e24\u79cd\u90fd\u53ef\u4ee5\u7ebf\u6027\u5904\u7406\u3002\n\n\u6700\u7ec8\u6211\u4eec\u53ef\u4ee5 $O(n)$ \u5f97\u5230\u7ed3\u679c\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <cstdlib>\n#include <algorithm>\n\n#define rep( i, a, b ) for( int i = (a) ; i <= (b) ; i ++ )\n#define per( i, a, b ) for( int i = (a) ; i >= (b) ; i -- )\n\nconst int MAXN = 5e5 + 5;\n\ntemplate<typename _T>\ninline void Read( _T &x ) {\n    x = 0; char s = getchar(); bool f = false;\n    while( s < '0' || '9' < s ) { f = s == '-', s = getchar(); }\n    while( '0' <= s && s <= '9' ) { x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar(); }\n    if( f ) x = -x;\n}\n\ntemplate<typename _T>\ninline void Write( _T x ) {\n    if( x < 0 ) putchar( '-' ), x = -x;\n    if( 9 < x ) Write( x / 10 );\n    putchar( x % 10 + '0' );\n}\n\nstruct Edge {\n    int to, nxt;\n} Graph[MAXN << 1];\n\nstd :: vector<int> son[MAXN];\n\nint ans[MAXN], tot;\nint siz[MAXN]; bool imp[MAXN];\n\nint head[MAXN], cnt = 1;\n\nint N;\n\n#define Dead {\\\n    puts( \"BRAK\" );\\\n    exit( 0 );\\\n}\n\ninline void AddEdge( const int &from, const int &to ) {\n    Graph[++ cnt].to = to, Graph[cnt].nxt = head[from];\n    head[from] = cnt;\n}\n\nvoid Init( const int &u, const int &fa ) {\n    siz[u] = 1, imp[u] = u == N;\n    for( int i = head[u], v ; i ; i = Graph[i].nxt )\n        if( ( v = Graph[i].to ) ^ fa ) {\n            Init( v, u );\n            siz[u] += siz[v];\n            imp[u] |= imp[v];\n            son[u].push_back( v );\n        }\n    std :: sort( son[u].begin(), son[u].end(),\n        [] ( const int &a, const int &b ) -> bool {\n            if( imp[b] ) return true;\n            if( imp[a] ) return false;\n            return siz[a] < siz[b];\n        } );\n}\n\nvoid DFS2( const int &u, const int &fa, int cur, const int &dir ) {\n    // \u6839\u672c\u4e0d\u9700\u8981\u5173\u5fc3\u5230 u \u7684\u8ddd\u79bb\uff01\n    // \u5982\u679c\u6700\u5f00\u59cb\u5c31\u662f\u4ece u \u51fa\u53d1\u7684\uff0c\u90a3\u4e48\u6700\u540e\u5fc5\u987b\u5230 u \u7684\u4e00\u4e2a\u513f\u5b50\n    // \u628a\u6574\u4e2a\u8def\u5f84\u53cd\u8fc7\u6765\u5c31\u53ef\u4ee5\u5f97\u5230\u4ece\u4e00\u4e2a\u513f\u5b50\u51fa\u53d1\u7684\u8def\u5f84\uff01\n\n    ans[cur += dir] = u;\n    int n = son[u].size(), sml = 0, lrg; \n    rep( i, 0, n - 1 )\n        sml += siz[son[u][i]] == 1;\n    lrg = n - sml;\n    if( lrg >= 2 ) Dead\n    if( lrg ) {\n        DFS2( son[u][n - 1], u, cur + dir * ( siz[son[u][n - 1]] + 1 ), - dir );\n        cur += dir * siz[son[u][n - 1]];\n    }\n    rep( i, 0, sml - 1 ) ans[cur += dir] = son[u][i];\n}\n\nvoid DFS1( const int &u, const int &fa, const int &d, int cur, const int dir ) {\n    // d = 0: \u4ece u \u51fa\u53d1\n    // d = 1: \u4ece u \u7684\u7236\u4eb2\u51fa\u53d1\n    // \u6ce8\u610f\u8fd9\u91cc\u7684\u76ee\u6807\u662f\u5230\u8fbe N\uff0c\u800c\u4e0d\u662f\u56de\u5230 u \u9644\u8fd1\uff0c\u6240\u4ee5\u9700\u8981\u8bb0\u5f55 d\n\n    int n = son[u].size(), sml = 0, lrg;\n    rep( i, 0, n - 1 )\n        sml += siz[son[u][i]] == 1 && ! imp[son[u][i]];\n    lrg = n - sml;\n    if( u == N ) {\n        if( d == 0 && siz[u] > 1 ) Dead\n        DFS2( u, fa, cur + dir * ( siz[u] + 1 ), - dir );\n    } else if( d == 1 ) {\n        if( lrg > 3 ) Dead\n        rep( i, 0, sml - 1 ) \n            ans[cur += dir] = son[u][i];\n        if( lrg == 3 ) {\n            DFS2( son[u][n - 3], u, cur, dir );\n            cur += dir * siz[son[u][n - 3]], ans[cur += dir] = u;\n            DFS2( son[u][n - 2], u, cur + dir * ( siz[son[u][n - 2]] + 1 ), - dir );\n            cur += dir * siz[son[u][n - 2]];\n            DFS1( son[u][n - 1], u, 0, cur, dir );\n        } else {\n            if( lrg == 2 ) {\n                DFS2( son[u][n - 2], u, cur, dir );\n                cur += dir * siz[son[u][n - 2]];\n            }\n            ans[cur += dir] = u;\n            DFS1( son[u][n - 1], u, 1, cur, dir );\n        }\n    } else {\n        if( lrg > 2 ) Dead\n        ans[cur += dir] = u;\n        if( lrg == 2 ) {\n            DFS2( son[u][n - 2], u, cur + dir * ( siz[son[u][n - 2]] + 1 ), - dir );\n            cur += dir * siz[son[u][n - 2]];\n        }\n        rep( i, 0, sml - 1 ) ans[cur += dir] = son[u][i];\n        DFS1( son[u][n - 1], u, n == 1, cur, dir );\n    }\n}\n\nint main() {\n    Read( N );\n    rep( i, 1, N - 1 ) {\n        int u, v; Read( u ), Read( v );\n        AddEdge( u, v ), AddEdge( v, u );\n    }\n    Init( 1, 0 );\n    DFS1( 1, 0, 0, 0, 1 );\n    rep( i, 1, N ) \n        Write( ans[i] ), putchar( '\\n' );\n    return 0;\n}\n```",
        "postTime": 1664972849,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "\u300cPOI2013\u300dMultidrink"
    },
    {
        "content": "\u8003\u8651\u6293\u51fa $1 \\sim n$ \u7684\u8def\u5f84\uff0c\u6211\u4eec\u5c06\u6240\u6c42\u8def\u5f84\u5206\u6210\u4e24\u90e8\u5206\uff1a\n\n- \u4e0d\u5728\u8def\u5f84\u4e0a\u7684\u5b50\u6811\uff1a\u6211\u4eec\u9700\u8981\u904d\u5386\u4e00\u904d\u540e\u79bb\u5f00\u3002\n- \u5728\u8def\u5f84\u4e0a\u7684\u5b50\u6811\uff1a\u6211\u4eec\u9700\u8981\u4f9d\u6b21\u8d70\u5b8c\u8def\u5f84\u4e24\u8fb9\u7684\u5b50\u6811\uff0c\u518d\u4f9d\u6b21\u5411\u4e0b\u6700\u7ec8\u8d70\u5230 $n$ \u5b50\u6811\u3002\n\n\u8003\u8651 dp\u3002\u8bbe $f_{u, i}$ \u8868\u793a\u662f\u5426\u53ef\u4ee5\u904d\u5386\u5b8c $u$ \u5b50\u6811\u540e\u79bb\u5f00\uff0c\u5176\u4e2d $i = 0$ \u8868\u793a\u8fdb\u5165\u65f6\u4f4d\u4e8e $u$\uff0c$i = 1$ \u8868\u793a\u8fdb\u5165\u65f6\u4f4d\u4e8e $u$ \u7684\u4e00\u4e2a\u513f\u5b50\u3002\n\n\u521d\u503c\uff1a\u5bf9\u4e8e\u6240\u6709\u53f6\u5b50 $u$\uff0c\u6709 $f_{u, 0} = \\operatorname{true}$\u3002\n\n\u8f6c\u79fb\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u8ba8\u8bba\u3002\u4e0b\u9762\u8bbe\u975e\u53f6\u5b50\u513f\u5b50\u4e2a\u6570\u4e3a $size$\u3002\u624b\u753b\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0 $size > 1$ \u65f6\u90fd\u662f $\\operatorname{false}$\u3002\n\n1. $size = 0$\n\n\u6b64\u65f6\u6211\u4eec\u53ea\u9700\u8981\u8df3\u7740\u904d\u5386\u6240\u6709\u53f6\u5b50\uff0c\u5219 $f_{u, 0} = f_{u, 1} = \\operatorname{true}$\u3002\n\n2. $size = 1$\n\n\u8bbe\u552f\u4e00\u7684\u975e\u53f6\u5b50\u513f\u5b50\u4e3a $v$\u3002\n\n\u5bf9\u4e8e $f_{u, 0}$\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u9009\u62e9\uff1a\n\n- \u8df3\u5230 $v$ \u7684\u4e00\u4e2a\u513f\u5b50\u5e76\u904d\u5386 $v$ \u5b50\u6811\uff0c\u6700\u540e\u904d\u5386\u6240\u6709\u53f6\u5b50\u5373\u53ef\u3002\u6b64\u65f6\u7684\u6761\u4ef6\u4e3a $f_{v, 1}$\u3002\n- \u5148\u904d\u5386\u6240\u6709\u53f6\u5b50\uff0c\u7136\u540e\u8df3\u5230 $v$ \u5e76\u904d\u5386\u5176\u5b50\u6811\u3002\u6b64\u65f6\u7684\u6761\u4ef6\u4e3a $f_{v, 0} \\operatorname{and} [cnt_{leaf} > 0]$\u3002\n\n\u5bf9\u4e8e $f_{u, 1}$\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u79cd\u9009\u62e9\uff1a\n\n- \u8df3\u5230 $v$ \u5e76\u904d\u5386 $v$ \u5b50\u6811\uff0c\u7136\u540e\u56de\u5230 $u$ \u5e76\u904d\u5386\u6240\u6709\u53f6\u5b50\u513f\u5b50\u3002\n\n\u7c7b\u4f3c\u5730\uff0c\u8bbe $g_{u, i}$ \u8868\u793a\u662f\u5426\u53ef\u4ee5\u904d\u5386\u5b8c $u$ \u5b50\u6811\u5e76\u8fdb\u5165 $1 \\to n$ \u8def\u5f84\u4e0a\u7684\u4e0b\u4e00\u4e2a\u70b9 $nxt_i$\uff0c\u5176\u4e2d $i = 0$ \u8868\u793a\u8fdb\u5165\u65f6\u4f4d\u4e8e $u$\uff0c$i = 1$ \u8868\u793a\u8fdb\u5165\u65f6\u4f4d\u4e8e $u$ \u7684\u4e00\u4e2a\u513f\u5b50\u3002\n\n\u521d\u503c\uff1a$g_{n, 0} = [n \\text{ is a leaf}]$\uff0c$g_{n, 1} = f_{n, 1}$\u3002\n\n\u8f6c\u79fb\u8fd8\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u8ba8\u8bba\u3002\u4e0b\u9762\u8bbe\u975e\u53f6\u5b50\u513f\u5b50\u4e2a\u6570\u4e3a $size$\u3002\u624b\u753b\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0 $size > 2$ \u65f6\u90fd\u662f $\\operatorname{false}$\u2014\u2014\u8fd9\u91cc\u4e0e $f$ \u4e0d\u540c\u7684\u539f\u56e0\u662f\u6709\u4e00\u4e2a\u5b50\u6811\u4f60\u5fc5\u987b\u4e0d\u56de\u6765\u3002\n\n\u6ce8\u610f\u4e0b\u9762\u7684 $cnt_{leaf}$ \u4e0d\u5305\u62ec $nxt_u$\u2014\u2014\u5f53\u7136\u4e5f\u53ea\u6709\u53ef\u80fd\u662f $n$\u3002\n\n1. $size = 0$\n\n\u5bf9\u4e8e $g_{u, 0}$\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u9009\u62e9\uff1a\n\n- \u5148\u904d\u5386\u6240\u6709\u53f6\u5b50\uff0c\u7136\u540e\u8df3\u5230 $nxt_u$ \u5e76\u63a5\u4e0b\u53bb\u904d\u5386\u3002\u6b64\u65f6\u7684\u6761\u4ef6\u4e3a $g_{nxt_u, 0}$\u3002\n- \u76f4\u63a5\u8df3\u5230 $nxt_u$ \u7684\u4e00\u4e2a\u513f\u5b50\u5e76\u7ee7\u7eed\u904d\u5386\u3002\u6b64\u65f6\u7684\u6761\u4ef6\u4e3a $g_{nxt_u, 1} \\operatorname{and} [cnt_{leaf} = 0]$\u3002\n\n\u5bf9\u4e8e $g_{u, 1}$\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u9009\u62e9\uff1a\n\n- \u5148\u904d\u5386\u6240\u6709\u53f6\u5b50\uff0c\u7136\u540e\u8df3\u56de $u$\uff0c\u518d\u8df3\u5230 $nxt_u$ \u5e76\u63a5\u4e0b\u53bb\u904d\u5386\u3002\u6b64\u65f6\u7684\u6761\u4ef6\u4e3a $g_{nxt_u, 0}$\u3002\n- \u5148\u904d\u5386\u6240\u6709\u53f6\u5b50\uff0c\u7136\u540e\u8df3\u56de $u$\uff0c\u518d\u8df3\u5230 $nxt_u$ \u7684\u4e00\u4e2a\u513f\u5b50\u5e76\u63a5\u4e0b\u53bb\u904d\u5386\u3002\u6b64\u65f6\u7684\u6761\u4ef6\u4e3a $g_{nxt_u, 1} \\operatorname{and} [cnt_{leaf} > 0]$\u3002\n\n2. $size = 1$\n\n\u8bbe\u552f\u4e00\u7684\u975e\u53f6\u5b50\u513f\u5b50\u4e3a $v$\u3002\n\n\u5bf9\u4e8e $g_{u, 0}$\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u79cd\u9009\u62e9\uff1a\n\n- \u5148\u904d\u5386 $v$\uff0c\u7136\u540e\u8df3\u56de $u$ \u5e76\u904d\u5386\u6240\u6709\u53f6\u5b50\uff0c\u7136\u540e\u8df3\u5230 $nxt_u$ \u5e76\u63a5\u4e0b\u53bb\u904d\u5386\u3002\u6b64\u65f6\u7684\u6761\u4ef6\u4e3a $g_{nxt_u, 0} \\operatorname{and} f_{v, 1}$\u3002\n\n\u5bf9\u4e8e $g_{u, 1}$\uff0c\u6211\u4eec\u6709\u56db\u79cd\u9009\u62e9\uff1a\n\n- \u5148\u904d\u5386\u6240\u6709\u53f6\u5b50\uff0c\u7136\u540e\u904d\u5386 $v$\uff0c\u63a5\u4e0b\u6765\u8df3\u5230 $n$\uff0c\u6700\u540e\u8df3\u5230 $nxt_u$ \u5e76\u63a5\u4e0b\u53bb\u904d\u5386\u3002\u6b64\u65f6\u7684\u6761\u4ef6\u4e3a $g_{nxt_u, 0} \\operatorname{and} f_{v, 0}$\u3002\n- \u7136\u540e\u8df3\u5230 $v$ \u7684\u4e00\u4e2a\u513f\u5b50\u6765\u904d\u5386 $v$\uff0c\u63a5\u4e0b\u6765\u7ecf\u8fc7\u81f3\u5c11\u4e00\u4e2a\u53f6\u5b50\u6765\u8df3\u5230 $n$\uff0c\u6700\u540e\u8df3\u5230 $nxt_u$ \u5e76\u63a5\u4e0b\u53bb\u904d\u5386\u3002\u6b64\u65f6\u7684\u6761\u4ef6\u4e3a $g_{nxt_u, 0} \\operatorname{and} f_{v, 1} \\operatorname{and} [cnt_{leaf} > 0]$\u3002\n- \u5148\u904d\u5386\u6240\u6709\u53f6\u5b50\uff0c\u7136\u540e\u904d\u5386 $v$\uff0c\u63a5\u4e0b\u6765\u8df3\u5230 $n$\uff0c\u6700\u540e\u8df3\u5230 $nxt_u$ \u7684\u4e00\u4e2a\u513f\u5b50\u5e76\u63a5\u4e0b\u53bb\u904d\u5386\u3002\u6b64\u65f6\u7684\u6761\u4ef6\u4e3a $g_{nxt_u, 1} \\operatorname{and} f_{v, 0}$\u3002\n- \u7136\u540e\u8df3\u5230 $v$ \u7684\u4e00\u4e2a\u513f\u5b50\u6765\u904d\u5386 $v$\uff0c\u63a5\u4e0b\u6765\u7ecf\u8fc7\u81f3\u5c11\u4e00\u4e2a\u53f6\u5b50\u6765\u8df3\u5230 $n$\uff0c\u6700\u540e\u8df3\u5230 $nxt_u$ \u7684\u4e00\u4e2a\u513f\u5b50\u5e76\u63a5\u4e0b\u53bb\u904d\u5386\u3002\u6b64\u65f6\u7684\u6761\u4ef6\u4e3a $g_{nxt_u, 1} \\operatorname{and} f_{v, 1} \\operatorname{and} [cnt_{leaf} > 0]$\u3002\n\n3. $size = 2$\n\n\u8bbe\u4e24\u4e2a\u975e\u53f6\u5b50\u513f\u5b50\u4e3a $v_1, v_2$\u3002\n\n\u6b64\u65f6 $g_{u, 0}$ \u4e00\u5b9a\u4e0d\u884c\uff0c\u8003\u8651 $g_{u, 1}$\u3002\n\n\u5bf9\u4e8e $g_{u, 1}$\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u9009\u62e9\uff1a\n\n- \u9996\u5148\u904d\u5386\u6240\u6709\u53f6\u5b50\uff0c\u7136\u540e\u8df3\u5230 $v_1$\uff0c\u63a5\u4e0b\u6765\u8df3\u56de $u$\uff0c\u518d\u8df3\u5230 $v_2$ \u7684\u67d0\u4e2a\u513f\u5b50\uff0c\u6700\u540e\u8df3\u5230 $nxt_u$ \u5e76\u63a5\u4e0b\u53bb\u904d\u5386\u3002\u6b64\u65f6\u7684\u6761\u4ef6\u4e3a $g_{nxt_u, 0} \\operatorname{and} f_{v_1, 0} \\operatorname{and} f_{v_2, 1}$\u3002\n- \u5728\u4e0a\u4e00\u79cd\u9009\u62e9\u7684\u57fa\u7840\u4e0a $\\operatorname{swap}(v_1, v_2)$\u3002\n\ndp \u540e\u5148\u62ff $g_{1, 0}$ \u5224\u65ad\u662f\u5426\u6709\u89e3\uff0c\u7136\u540e\u6a21\u62df\u4e0a\u8ff0\u8f6c\u79fb\u610f\u4e49\u8f93\u51fa\u65b9\u6848\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <vector>\n#include <cstdio>\n\nusing namespace std;\n\ntypedef struct {\n\tint nxt;\n\tint end;\n} Edge;\n\nint cnt = 0;\nint head[2000007], fa[2000007], son_cnt[2000007], nxt[2000007], ans[2000007];\nbool dp1[2000007][7], dp2[2000007][7];\nEdge edge[4000007];\n\ninline int read(){\n\tint ans = 0;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9'){\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0' && ch <= '9'){\n\t\tans = ans * 10 + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\treturn ans;\n}\n\ninline void add_edge(int start, int end){\n\tcnt++;\n\tedge[cnt].nxt = head[start];\n\thead[start] = cnt;\n\tedge[cnt].end = end;\n}\n\nvoid dfs1(int u, int father){\n\tfa[u] = father;\n\tfor (int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tif (x != father){\n\t\t\tson_cnt[u]++;\n\t\t\tdfs1(x, u);\n\t\t}\n\t}\n}\n\nvoid dfs2(int u){\n\tif (son_cnt[u] == 0){\n\t\tdp1[u][0] = true;\n\t\treturn;\n\t}\n\tfor (int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tif (x != fa[u]) dfs2(x);\n\t}\n\tint size;\n\tvector<int> son;\n\tfor (int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tif (x != fa[u] && son_cnt[x] != 0) son.push_back(x);\n\t}\n\tsize = son.size();\n\tif (size == 0){\n\t\tdp1[u][0] = dp1[u][1] = true;\n\t} else if (size == 1){\n\t\tdp1[u][0] = dp1[son[0]][1] || (dp1[son[0]][0] && son_cnt[u] > 1);\n\t\tdp1[u][1] = dp1[son[0]][0];\n\t}\n}\n\nvoid dfs3(int u){\n\tif (nxt[u] == 0){\n\t\tif (son_cnt[u] == 0){\n\t\t\tdp2[u][0] = true;\n\t\t} else {\n\t\t\tdp2[u][1] = dp1[u][1];\n\t\t}\n\t\treturn;\n\t}\n\tint size;\n\tvector<int> son;\n\tdfs3(nxt[u]);\n\tfor (int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tif (x != fa[u] && x != nxt[u] && son_cnt[x] != 0) son.push_back(x);\n\t}\n\tsize = son.size();\n\tif (size == 0){\n\t\tdp2[u][0] = dp2[nxt[u]][0] || (dp2[nxt[u]][1] && son_cnt[u] == 1);\n\t\tdp2[u][1] = dp2[nxt[u]][0] || (dp2[nxt[u]][1] && son_cnt[u] > 1);\n\t} else if (size == 1){\n\t\tdp2[u][0] = dp2[nxt[u]][0] && dp1[son[0]][1];\n\t\tdp2[u][1] = (dp2[nxt[u]][0] || dp2[nxt[u]][1]) && (dp1[son[0]][0] || (dp1[son[0]][1] && son_cnt[u] > 2));\n\t} else if (size == 2){\n\t\tdp2[u][1] = dp2[nxt[u]][0] && ((dp1[son[0]][0] && dp1[son[1]][1]) || (dp1[son[0]][1] && dp1[son[1]][0]));\n\t}\n}\n\nvoid write(int n){\n\tif (n >= 10) write(n / 10);\n\tputchar(n % 10 + '0');\n}\n\ninline void leaf1(int u){\n\tfor (int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tif (x != fa[u] && son_cnt[x] == 0){\n\t\t\twrite(x);\n\t\t\tputchar('\\n');\n\t\t}\n\t}\n}\n\nvoid dfs4(int u, int op){\n\tint size;\n\tvector<int> son;\n\tfor (int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tif (x != fa[u] && son_cnt[x] != 0) son.push_back(x);\n\t}\n\tsize = son.size();\n\tif (op == 0){\n\t\twrite(u);\n\t\tputchar('\\n');\n\t\tif (size == 0){\n\t\t\tleaf1(u);\n\t\t} else if (dp1[son[0]][1]){\n\t\t\tdfs4(son[0], 1);\n\t\t\tleaf1(u);\n\t\t} else {\n\t\t\tleaf1(u);\n\t\t\tdfs4(son[0], 0);\n\t\t}\n\t} else {\n\t\tleaf1(u);\n\t\tif (size > 0) dfs4(son[0], 0);\n\t\twrite(u);\n\t\tputchar('\\n');\n\t}\n}\n\ninline void leaf2(int u){\n\tfor (int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tif (x != fa[u] && x != nxt[u] && son_cnt[x] == 0){\n\t\t\twrite(x);\n\t\t\tputchar('\\n');\n\t\t}\n\t}\n}\n\nvoid dfs5(int u, int op){\n\tif (nxt[u] == 0){\n\t\tif (op == 0){\n\t\t\twrite(u);\n\t\t\tputchar('\\n');\n\t\t} else {\n\t\t\tdfs4(u, 1);\n\t\t}\n\t\treturn;\n\t}\n\tint size;\n\tvector<int> son;\n\tfor (int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tif (x != fa[u] && x != nxt[u] && son_cnt[x] != 0) son.push_back(x);\n\t}\n\tsize = son.size();\n\tif (op == 0){\n\t\twrite(u);\n\t\tputchar('\\n');\n\t\tif (size == 0){\n\t\t\tif (dp2[nxt[u]][0]){\n\t\t\t\tleaf2(u);\n\t\t\t\tdfs5(nxt[u], 0);\n\t\t\t} else {\n\t\t\t\tdfs5(nxt[u], 1);\n\t\t\t}\n\t\t} else {\n\t\t\tdfs4(son[0], 1);\n\t\t\tleaf2(u);\n\t\t\tdfs5(nxt[u], 0);\n\t\t}\n\t} else {\n\t\tif (size == 0){\n\t\t\tleaf2(u);\n\t\t\twrite(u);\n\t\t\tputchar('\\n');\n\t\t\tif (dp2[nxt[u]][0]){\n\t\t\t\tdfs5(nxt[u], 0);\n\t\t\t} else {\n\t\t\t\tdfs5(nxt[u], 1);\n\t\t\t}\n\t\t} else if (size == 1){\n\t\t\tleaf2(u);\n\t\t\tif (dp1[son[0]][0]){\n\t\t\t\tdfs4(son[0], 0);\n\t\t\t\twrite(u);\n\t\t\t\tputchar('\\n');\n\t\t\t} else {\n\t\t\t\twrite(u);\n\t\t\t\tputchar('\\n');\n\t\t\t\tdfs4(son[0], 1);\n\t\t\t}\n\t\t\tif (dp2[nxt[u]][0]){\n\t\t\t\tdfs5(nxt[u], 0);\n\t\t\t} else {\n\t\t\t\tdfs5(nxt[u], 1);\n\t\t\t}\n\t\t} else {\n\t\t\tleaf2(u);\n\t\t\tif (dp1[son[0]][0] && dp1[son[1]][1]){\n\t\t\t\tdfs4(son[0], 0);\n\t\t\t\twrite(u);\n\t\t\t\tputchar('\\n');\n\t\t\t\tdfs4(son[1], 1);\n\t\t\t} else {\n\t\t\t\tdfs4(son[1], 0);\n\t\t\t\twrite(u);\n\t\t\t\tputchar('\\n');\n\t\t\t\tdfs4(son[0], 1);\n\t\t\t}\n\t\t\tdfs5(nxt[u], 0);\n\t\t}\n\t}\n}\n\nint main(){\n\tint n = read();\n\tfor (int i = 1; i < n; i++){\n\t\tint u = read(), v = read();\n\t\tadd_edge(u, v);\n\t\tadd_edge(v, u);\n\t}\n\tdfs1(1, 0);\n\tfor (int i = n; i != 1; i = fa[i]){\n\t\tnxt[fa[i]] = i;\n\t}\n\tdfs2(1);\n\tdfs3(1);\n\tif (!dp2[1][0]){\n\t\tprintf(\"BRAK\");\n\t} else {\n\t\tdfs5(1, 0);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1679117567,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3549 \u3010[POI2013] MUL-Multidrink\u3011"
    },
    {
        "content": "\u96be\u5ea6\u5168\u5728\u5b9e\u73b0\u554a\uff01\n\n\u9996\u5148\u628a $1 \\to n$ \u8fd9\u6761\u94fe\u62bd\u51fa\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u5c42\u5f0f\u7684\u7ed3\u6784\u3002\n\n\u7136\u540e\u6bcf\u5c42\u6784\u9020\u5c31\u597d\u4e86\uff0c\u91c7\u7528 Sudden Death \u5224\u65ad\u662f\u5426\u65e0\u89e3\u3002\n\n\u4ece\u4e00\u5c42\u8df3\u5230\u4e0b\u4e00\u5c42\u7684\u65b9\u6cd5\u6709\u4ece\u5f53\u524d\u5c42\u7684\u513f\u5b50\u8df3\u5230\u4e0b\u4e00\u5c42\uff0c\u5f53\u524d\u5c42\u8df3\u5230\u4e0b\u4e00\u5c42\uff0c\u5f53\u524d\u5c42\u8df3\u5230\u4e0b\u4e00\u5c42\u7684\u513f\u5b50\u3002\u9700\u8981\u5b9e\u73b0\u4e24\u4e2a\u6784\u9020\u51fd\u6570 $F(u)$ \u8868\u793a\u5bf9\u4e8e\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u4ee5 $u$ \u7684\u513f\u5b50\u4e3a\u8d77\u70b9\uff0c$u$ \u4e3a\u7ec8\u70b9\u904d\u5386\u6389\u6574\u68f5\u5b50\u6811\uff1b$G(u)$ \u8868\u793a\u5bf9\u4e8e\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u4ee5 $u$ \u4e3a\u8d77\u70b9\uff0c$u$ \u7684\u513f\u5b50\u4e3a\u7ec8\u70b9\u904d\u5386\u6389\u6574\u68f5\u5b50\u6811\u3002\u4e24\u8005\u9700\u8981\u4e92\u76f8\u8c03\u7528\u3002\n\n\u5177\u4f53\u7684\u8bb2\u89e3\u653e\u5728\u4ee3\u7801\u6ce8\u91ca\u3002\u56e0\u4e3a\u8fd9\u9898\u96be\u5ea6\u5168\u5728\u5224\u65ad\uff0c\u4e0d\u7ed3\u5408\u4ee3\u7801\u5f88\u9ebb\u70e6\uff0c\u6240\u4ee5\u539f\u8c05\u4e00\u4e0b\u5566\uff01\n\n\u540c\u65f6\u7ed9\u4e0a[\u5b8c\u6574\u4ee3\u7801](https://www.luogu.com.cn/paste/lwwmzh2b)\u3002\n\n```cpp\nint n,fa[500005],siz[500005];\nbool vis[500005];\nvector<int> Ans,G[500005];\nvoid initdfs(int u,int f)\n{\n\tfa[u]=f,siz[u]=1;\n\tfor(auto v:G[u])\tif(v^f)\tinitdfs(v,u),siz[u]+=siz[v];\n}\ninline void brak(int id=0){puts(\"BRAK\");exit(id=0);}\nvoid pF(int,int);\nvoid pG(int,int);\nvoid pF(int u,int f) // \u4ece u \u7684\u513f\u5b50\u8df3\u8d77\uff0c\u7136\u540e\u7559\u5728 u\n{\n\tvector<int> Pans;\n\tint pson=0; // \u8fd9\u4e24\u4e2a\u4e1c\u897f\u7684\u5b9a\u4e49\u53c2\u89c1 dfs(int,int,bool)\n\tfor(auto v:G[u])\n\t{\n\t\tif(v==f)\tcontinue;\n\t\tif(siz[v]==1)\tPans.push_back(v);\n\t\telse\t++pson;\n\t}\n\tif(pson>1)\tbrak(1); // \u8df3\u5b8c\u4e00\u4e2a\u5b50\u6811\u4f1a\u5360\u7528 u\uff0c\u8fd9\u6837\u5c31\u4e0a\u4e0d\u6765\u4e86\n\tfor(auto p:Pans)\tAns.push_back(p); // \u4ece\u5927\u5c0f\u4e3a 1 \u7684\u5b50\u6811\u8df3\u8d77\n\tfor(auto v:G[u])\tif(v!=f && siz[v]!=1)\tpG(v,u); // \u7136\u540e\u4ee5\u513f\u5b50\u4e3a\u8d77\u70b9\uff0c\u513f\u5b50\u7684\u513f\u5b50\u4e3a\u7ec8\u70b9\uff0c\u6700\u540e\u8df3\u5230 u\n\tAns.push_back(u); // \u8df3\u5230 u\n}\nvoid pG(int u,int f) // \u4ece u \u8df3\u8d77\uff0c\u7136\u540e\u7559\u5728 u \u7684\u513f\u5b50\n{\n\tAns.push_back(u); // \u4ece u \u8df3\u8d77\n\tvector<int> Pans;\n\tint pson=0; // \u8fd9\u4e24\u4e2a\u4e1c\u897f\u7684\u5b9a\u4e49\u53c2\u89c1 dfs(int,int,bool)\n\tfor(auto v:G[u])\n\t{\n\t\tif(v==f)\tcontinue;\n\t\tif(siz[v]==1)\tPans.push_back(v);\n\t\telse\t++pson;\n\t}\n\tif(pson>1)\tbrak(2); // \u8df3\u5b8c\u4e24\u4e2a\u5b50\u6811\u4f1a\u5360\u7528 u \u7684\u53e6\u4e00\u4e2a\u513f\u5b50\uff0c\u8fd9\u6837\u5c31\u4e0a\u4e0d\u6765\u4e86\n\tfor(auto v:G[u])\tif(v!=f && siz[v]!=1)\tpF(v,u); // \u4ee5 u \u513f\u5b50\u7684\u513f\u5b50\u4e3a\u8d77\u70b9\uff0cu \u7684\u513f\u5b50\u4e3a\u7ec8\u70b9\uff0c\u6700\u540e\u7559\u4e0b\u6765\n\tfor(auto p:Pans)\tAns.push_back(p); // \u5f53\u7136\u8981\u5904\u7406\u6389\u5927\u5c0f\u4e3a 1 \u7684\u5b50\u6811\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684\u5904\u7406\u987a\u5e8f\u548c pG(int,int) \u4e0d\u4e00\u6837\n}\nvoid dfs(int u,int f,bool cris) // \u5f53\u524d\u70b9\uff0c\u7236\u4eb2\u70b9\uff0c\u662f\u5426\u5728 u \u4e0a\uff08cris=true \u65f6\u5728 u \u4e0a\uff0c\u5426\u5219\u5728 f \u4e0a\uff09\n{\n\tassert(vis[u]);\n\tif(u==n) // \u7279\u5224\u5df2\u7ecf\u5230\u7ec8\u70b9\n\t{\n\t\tif(siz[u]==1) // \u5982\u679c\u8bf4 u \u6ca1\u6709\u513f\u5b50\uff0c\u90a3\u5c31\u5f88\u597d\uff0c\u76f4\u63a5\u8d70\u6389\n\t\t{\n\t\t\tAns.push_back(u);\n\t\t\treturn ;\n\t\t}\n\t\tif(cris)\tbrak(3); // \u5426\u5219\u6211\u4eec\u5df2\u7ecf\u5728 u \u4e0a\u4e86\uff0c\u5f88\u4e0d\u597d\uff0c\u5c31\u53bb\u4e16\u4e86\n\t\tpF(u,f); // \u7136\u540e\u4ee5 u \u7684\u513f\u5b50\u4e3a\u8d77\u70b9\uff0cu \u4e3a\u7ec8\u70b9\u6784\u9020\n\t\treturn ;\n\t}\n\tif(cris)\tAns.push_back(u); // \u4e00\u5f00\u59cb\u5c31\u5728 u \u4e0a\n\tvector<int> Pans; // \u5927\u5c0f\u4e3a 1 \u7684\u5b50\u6811\n\tint pson=0; // \u5927\u5c0f\u4e0d\u4e3a 1 \u7684\u5b50\u6811\u7684\u4e2a\u6570\n\tfor(auto v:G[u])\n\t{\n\t\tif(v==f)\tcontinue;\n\t\tif(vis[v])\tcontinue;\n\t\tif(siz[v]==1)\tPans.push_back(v);\n\t\telse\t++pson;\n\t}\n\tbool ncir=true; // \u4e0b\u4e00\u5c42\u662f\u7559\u5728\u4e0b\u4e00\u5c42\u7684\u7236\u4eb2\u7ed3\u70b9 (u) \u8fd8\u662f\u4e0b\u4e00\u5c42\u7684\u7ed3\u70b9\n\tif(cris) // \u5982\u679c\u5728 u \u4e0a\u2014\u2014\n\t{\n\t\tif(pson>1)\tbrak(4); // \u5e76\u4e14\u6709\u5927\u4e8e\u4e00\u4e2a\u5927\u5c0f\u4e0d\u4e3a 1 \u7684\u5b50\u6811\uff0c\u5e94\u8be5\u53bb\u4e16\uff0c\u53ef\u4ee5\u753b\u56fe\u7406\u89e3\n\t\tif(pson==0 && Pans.empty())\tncir=false; // \u5e76\u4e14\u6ca1\u6709\u513f\u5b50\uff0c\u5904\u7406\u4e0b\u4e00\u5c42\u7684\u65f6\u5019\u505c\u7559\u5728 u\n\t\telse\n\t\t{\n\t\t\tfor(auto v:G[u])\n\t\t\t{\n\t\t\t\tif(v==f)\tcontinue;\n\t\t\t\tif(vis[v] || siz[v]==1)\tcontinue;\n\t\t\t\tpF(v,u); // \u4ee5 v \u7684\u513f\u5b50\u4e3a\u8d77\u70b9\uff0cv \u4e3a\u7ec8\u70b9\u6784\u9020\u5b50\u6811\n\t\t\t}\n\t\t}\n\t\tfor(auto p:Pans)\tAns.push_back(p); // \u6700\u540e\u5904\u7406\u6389\u5927\u5c0f\u4e3a 1 \u7684\u5b50\u6811\uff0c\u7136\u540e\u8ddf\u7740\u4ece\u8fd9\u4e2a\u70b9\u76f4\u63a5\u8df3\u5230\u4e0b\u4e00\u5c42\u7684\u70b9\n\t}\n\telse // \u5426\u5219\u5728 f \u4e0a\u2014\u2014\n\t{\n\t\tif(pson>2)\tbrak(5); // \u5e76\u4e14\u6709\u8d85\u8fc7\u4e24\u4e2a\u5927\u5c0f\u4e0d\u4e3a 1 \u7684\u5b50\u6811\uff0c\u5e94\u8be5\u53bb\u4e16\uff0c\u753b\u56fe\u5427\n\t\telse if(pson==0) // \u5e76\u4e14\u6ca1\u6709\u5927\u5c0f\u4e0d\u4e3a 1 \u7684\u5b50\u6811\n\t\t{\n\t\t\tfor(auto p:Pans)\tAns.push_back(p); // \u5904\u7406\u6389\u5927\u5c0f\u4e3a 1 \u7684\u5b50\u6811\n\t\t\tAns.push_back(u); // \u7136\u540e\u8df3\u5230 u\n\t\t\tncir=false; // \u4e0b\u4e00\u5c42\u7559\u5728 u\n\t\t}\n\t\telse if(pson==1) // \u5e76\u4e14\u6709\u4e00\u4e2a\u5927\u5c0f\u4e0d\u4e3a 1 \u7684\u5b50\u6811\n\t\t{\n\t\t\tfor(auto p:Pans)\tAns.push_back(p); // \u5148\u5904\u7406\u6389\u5927\u5c0f\u4e3a 1 \u7684\u5b50\u6811\n\t\t\tfor(auto v:G[u])\n\t\t\t{\n\t\t\t\tif(v==f)\tcontinue;\n\t\t\t\tif(vis[v] || siz[v]==1)\tcontinue;\n\t\t\t\tpG(v,u); // \u7136\u540e\u4ee5 v \u4e3a\u8d77\u70b9\uff0cv \u7684\u513f\u5b50\u4e3a\u7ec8\u70b9\n\t\t\t}\n\t\t\tAns.push_back(u); // \u8df3\u5230 u \u7ed3\u675f\n\t\t\tncir=false; // \u4e0b\u4e00\u5c42\u7559\u5728 u\n\t\t}\n\t\telse // \u5e76\u4e14\u6709\u4e24\u4e2a\u5927\u5c0f\u4e0d\u4e3a 1 \u7684\u5b50\u6811\n\t\t{\n\t\t\tbool c=false; // \u53ef\u4ee5\u8bc1\u660e\u7684\u662f\u6211\u4eec\u5728\u5904\u7406\u4e24\u4e2a\u5b50\u6811\u7684\u8fc7\u7a0b\u4e2d\u4e00\u5b9a\u4f1a\u8df3\u5230 u\uff0c\u4e0d\u7136\u65e0\u6cd5\u5b8c\u6210\u6784\u9020\uff0c\u4e0b\u4e00\u5c42\u4e5f\u81ea\u7136\u4e0d\u4f1a\u7559\u5728 u\n\t\t\tfor(auto v:G[u])\n\t\t\t{\n\t\t\t\tif(v==f)\tcontinue;\n\t\t\t\tif(vis[v] || siz[v]==1)\tcontinue;\n\t\t\t\tif(c)\tAns.push_back(u); // \u89c1\u4e0b\n\t\t\t\tif(!c)\tpG(v,u); // \u5148\u5904\u7406\u7b2c\u4e00\u68f5\u5b50\u6811\uff0c\u6b64\u65f6\u662f\u4ece f \u8df3\u5230 v\uff0c\u4ee5 v \u4e3a\u8d77\u70b9\u6784\u9020\uff0c\u505c\u7559\u5728 v \u7684\u4e00\u4e2a\u513f\u5b50\uff0c\u6700\u540e\u8df3\u5230 u\n\t\t\t\telse\tpF(v,u); // \u7136\u540e\u4ece u \u8df3\u5230\u53e6\u4e00\u4e2a v \u7684\u513f\u5b50\uff0c\u6700\u540e\u5728 v \u7ed3\u675f\uff0c\u7136\u540e\u8df3\u5230\u4e0b\u4e00\u5c42\u7684\u70b9\n\t\t\t\tc=true;\n\t\t\t}\n\t\t\tfor(auto p:Pans)\tAns.push_back(p); // \u6ce8\u610f\u5728\u8df3\u5230\u4e0b\u4e00\u5c42\u4e4b\u524d\u8981\u5904\u7406\u6389\u5927\u5c0f\u4e3a 1 \u7684\u5b50\u6811\n\t\t}\n\t}\n\tfor(auto v:G[u])\tif(vis[v] && v!=f)\tdfs(v,u,ncir); // \u5904\u7406\u4e0b\u4e00\u5c42\u5427\n}\nint main(){\n\tn=read();\n\tif(n==1)\treturn puts(\"1\")&0;\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tint u=read(),v=read();\n\t\tG[u].push_back(v);\n\t\tG[v].push_back(u);\n\t}\n\tinitdfs(1,0);\n\t{\n\tint p=n;\n\twhile(p)\tvis[p]=true,p=fa[p];\n\t} // \u62bd\u51fa 1 -> n \u8fd9\u6761\u94fe\uff0c\u6253\u4e0a\u6807\u8bb0\n\tdfs(1,0,true); // \u6784\u9020\n\tfor(auto p:Ans)\twrite(p),puts(\"\");\n\treturn 0;\n}\n```",
        "postTime": 1664962349,
        "uid": 340163,
        "name": "OotoriEmu",
        "ccfLevel": 0,
        "title": "\u591a\u559d\u70b9"
    }
]