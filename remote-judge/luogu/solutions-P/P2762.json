[
    {
        "content": "\u66f4\u6539\u5185\u5bb9\uff1a\u5bf9\u5efa\u6a21\u56fe\u6709\u6539\u52a8\n\n# \u9898\u76ee\u5927\u610f\n\u6709$m$\u4e2a\u5b9e\u9a8c\uff0c`\u6bcf\u4e2a\u5b9e\u9a8c\u53ea\u53ef\u4ee5\u8fdb\u884c\u4e00\u6b21`\uff0c\u4f46\u4f1a\u83b7\u5f97\u76f8\u5e94\u7684\u5956\u91d1\uff0c\u6709$n$\u4e2a\u4eea\u5668\uff0c\u6bcf\u4e2a\u5b9e\u9a8c\u90fd\u9700\u8981\u4e00\u5b9a\u7684\u4eea\u5668\uff0c`\u6bcf\u4e2a\u4eea\u5668\u53ef\u4ee5\u8fd0\u7528\u4e8e\u591a\u4e2a\u5b9e\u9a8c`\uff0c\u4f46\u9700\u8981\u4e00\u5b9a\u7684\u4ef7\u503c\uff0c\u95ee\u5956\u91d1\u4e0e\u4ee3\u4ef7\u7684\u5dee\u7684\u6700\u5927\u503c\u662f\u591a\u5c11\uff1f\n# \u89e3\u9898\u601d\u8def\n\u8fd9\u9053\u9898\u65e0\u975e\u662f\u8ba9\u6211\u4eec\u6743\u8861\u5956\u91d1\u4e0e\u4ee3\u4ef7\uff0c\u8fd9\u4e24\u8005\u662f\u6709\u6211\u6ca1\u4ed6\u7684\uff0c\u600e\u4e48\u53bb\u5904\u7406\u5462\uff0c\u6211\u4eec\u5148\u5efa\u7acb\u4e00\u5f20\u56fe\uff0c\u6240\u6709\u7684\u5b9e\u9a8c\u4e0e\u6e90\u70b9\u76f8\u8fde\uff0c\u5bb9\u91cf\u4e3a\u5176\u5956\u91d1\uff0c\u6240\u6709\u7684\u5668\u6750\u4e0e\u6c47\u70b9\u76f8\u8fde\uff0c\u5bb9\u91cf\u4e3a\u5176\u4ef7\u683c\uff0c\u4e2d\u95f4\u5b9e\u9a8c\u4e0e\u5668\u6750\u76f8\u8fde\uff0c\u5bb9\u91cf\u4e3a\u65e0\u7a77\u5927\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u8dd1\u6700\u5c0f\u5272\uff0c\u5176\u5fc5\u5b9a\u4f1a\u5272\u6389\u8fde\u63a5\u5b9e\u9a8c\u6216\u5bb9\u5668\u7684\u8fb9\uff0c\u56e0\u4e3a\u4e2d\u95f4\u7684\u8fb9\u7684\u4ee3\u4ef7\u4e3a\u65e0\u7a77\u5927\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u5272\u6389\u3002\n\n\u8dd1\u6700\u5c0f\u5272\u76f8\u5f53\u4e8e\u9009\u62e9\u90e8\u5206\u7684\u5b9e\u9a8c\u548c\u90e8\u5206\u7684\u4eea\u5668\uff0c\u5269\u4e0b\u7684\u5b9e\u9a8c\u548c\u4eea\u5668\u5c31\u4f1a\u88ab\u5272\u6389\uff0c\u6b64\u65f6\u518d\u7528\u5b9e\u9a8c\u7684\u603b\u4ef7\u503c\u51cf\u53bb\u53ef\u80fd\u5f97\u5230\u7684\u6700\u5927\u503c\uff0c\u5373\u4e3a\u5176\u6240\u8981\u6c42\u7684\u7b54\u6848\n\n\u5982\u4e0b\u56fe\n![](https://cdn.luogu.com.cn/upload/pic/21712.png)\n\n\u4ee3\u7801\u8fd9\u91cc\u5c31\u4e0d\u653e\u51fa\u4e86\uff0c\u697c\u4e0b\u7684\u9898\u89e3\u4e2a\u4e2a\u90fd\u6bd4\u672c\u849f\u84bb\u7684\u597d\uff0c\u5173\u952e\u8fd8\u662f\u5728\u4e8e\u5efa\u6a21",
        "postTime": 1529732312,
        "uid": 52915,
        "name": "Ajwallet",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "## Description\n\nW  \u6559\u6388\u6b63\u5728\u4e3a\u56fd\u5bb6\u822a\u5929\u4e2d\u5fc3\u8ba1\u5212\u4e00\u7cfb\u5217\u7684\u592a\u7a7a\u98de\u884c\u3002\u6bcf\u6b21\u592a\u7a7a\u98de\u884c\u53ef\u8fdb\u884c\u4e00\u7cfb\u5217\u5546\u4e1a\u6027\u5b9e\u9a8c\u800c\u83b7\u53d6\u5229\u6da6\u3002\u73b0\u5df2\u786e\u5b9a\u4e86\u4e00\u4e2a\u53ef\u4f9b\u9009\u62e9\u7684\u5b9e\u9a8c\u96c6\u5408E={E1\uff0cE2\uff0c\u2026\uff0cEm}\uff0c\u548c\u8fdb\u884c\u8fd9\u4e9b\u5b9e\u9a8c\u9700\u8981\u4f7f\u7528\u7684\u5168\u90e8\u4eea\u5668\u7684\u96c6\u5408I={I1\uff0cI2\uff0c\u2026In}\u3002\u5b9e\u9a8cEj\u9700\u8981\u7528\u5230\u7684\u4eea\u5668\u662fI\u7684\u5b50\u96c6Rj\u3002\u914d\u7f6e\u4eea\u5668Ik\u7684\u8d39\u7528\u4e3ack\u7f8e\u5143\u3002\u5b9e\u9a8cEj\u7684\u8d5e\u52a9\u5546\u5df2\u540c\u610f\u4e3a\u8be5\u5b9e\u9a8c\u7ed3\u679c\u652f\u4ed8pj\u7f8e\u5143\u3002W\u6559\u6388\u7684\u4efb\u52a1\u662f\u627e\u51fa\u4e00\u4e2a\u6709\u6548\u7b97\u6cd5\uff0c\u786e\u5b9a\u5728\u4e00\u6b21\u592a\u7a7a\u98de\u884c\u4e2d\u8981\u8fdb\u884c\u54ea\u4e9b\u5b9e\u9a8c\u5e76\u56e0\u6b64\u800c\u914d\u7f6e\u54ea\u4e9b\u4eea\u5668\u624d\u80fd\u4f7f\u592a\u7a7a\u98de\u884c\u7684\u51c0\u6536\u76ca\u6700\u5927\u3002\u8fd9\u91cc\u51c0\u6536\u76ca\u662f\u6307\u8fdb\u884c\u5b9e\u9a8c\u6240\u83b7\u5f97\u7684\u5168\u90e8\u6536\u5165\u4e0e\u914d\u7f6e\u4eea\u5668\u7684\u5168\u90e8\u8d39\u7528\u7684\u5dee\u989d\u3002\n\n\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5b9e\u9a8c\u548c\u4eea\u5668\u914d\u7f6e\u60c5\u51b5\uff0c\u7f16\u7a0b\u627e\u51fa\u51c0\u6536\u76ca\u6700\u5927\u7684\u8bd5\u9a8c\u8ba1\u5212\u3002\n\n## Limitation\n\n$1~\\leq~n,~m~\\leq~50$\n\n## Solution\n\n\u4e3a\u5565\u9898\u89e3\u91cc\u6ca1\u4eba\u8bb2\u8bc1\u660e\u554aQAQ\n\n\u7b80\u5316\u4e00\u4e0b\u9898\u610f\u4ee5\u540e\uff0c\u53d1\u73b0\u9898\u610f\u662f\u8fd9\u6837\u7684\uff1a\n\n> \u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u6709\u5de6\u4fa7\u7684\u70b9\u548c\u53f3\u4fa7\u7684\u70b9\uff0c\u5de6\u4fa7\u7684\u70b9\u70b9\u6743\u4e3a\u6b63\uff08\u5bf9\u5e94\u8bd5\u9a8c\uff09\uff0c\u53f3\u4fa7\u7684\u70b9\u70b9\u6743\u4e3a\u8d1f\uff08\u5bf9\u5e94\u5668\u6750\uff09\uff0c\u5982\u679c\u9009\u62e9\u4e86\u5de6\u4fa7\u7684\u67d0\u4e2a\u70b9\u5c31\u5fc5\u987b\u8981\u9009\u53f3\u8fb9\u7684\u4e00\u90e8\u5206\u70b9\u3002\u8981\u6c42\u6700\u5927\u5316\u70b9\u6743\u548c\u3002\n\n\u5982\u679c\u5c06\u5de6\u4fa7\u7684\u70b9\u548c\u53f3\u4fa7\u7684\u70b9\u4e4b\u95f4\u5bf9\u5e94\u8fde\u8fb9\uff0c\u5982\u679c\u8be5\u5b9e\u9a8c\u8981\u6c42\u8be5\u5668\u6750\u5c31\u8fde\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u88ab\u8f6c\u5316\u4e3a\u4e86\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\n\n> \u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u70b9\u6709\u70b9\u6743\uff0c\u9009\u62e9\u4e00\u4e2a\u5b50\u56fe\uff0c\u6ee1\u8db3\u5b50\u56fe\u4e0a\u5982\u679c\u9009\u62e9\u4e86\u4e00\u4e2a\u70b9\u5c31\u5fc5\u987b\u9009\u62e9\u5b83\u540e\u7ee7\u7684\u6240\u6709\u70b9\u3002\u6700\u5927\u5316\u70b9\u6743\u548c\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u7f51\u7edc\u6d41\u95ee\u9898\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u9009\u62e9\u4e86\u5219\u540e\u7ee7\u5fc5\u987b\u88ab\u9009\u62e9\uff0c\u90a3\u4e48\u79f0\u8be5\u56fe\u662f **\u95ed\u5408\u7684**\uff0c\u56e0\u6b64\u8be5\u95ee\u9898\u53eb\u505a**\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u95ee\u9898**\u3002\u53ef\u4ee5\u4f7f\u7528\u6700\u5c0f\u5272\u89e3\u51b3\u3002\n\n\u5177\u4f53\u7684\u5efa\u56fe\u65b9\u6cd5\u4e3a\uff1a\n\n> \u6e90\u70b9\u5411\u6240\u6709\u6b63\u6743\u70b9\u8fde\u7ed3\u4e00\u6761\u5bb9\u91cf\u4e3a\u6743\u503c\u7684\u8fb9\n>\n> \u4fdd\u7559\u539f\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u6b63\u65e0\u7a77\n>\n> \u6240\u6709\u8d1f\u6743\u70b9\u5411\u6c47\u70b9\u8fde\u7ed3\u4e00\u6761\u5bb9\u91cf\u4e3a\u6743\u503c\u7edd\u5bf9\u503c\u7684\u8fb9\n\n\u5219\u539f\u56fe\u7684\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u70b9\u6743\u548c\u5373\u4e3a\u6240\u6709\u6b63\u6743\u70b9\u6743\u503c\u4e4b\u548c\u51cf\u53bb\u5efa\u51fa\u7684\u7f51\u7edc\u6d41\u56fe\u7684\u6700\u5c0f\u5272\u3002\n\n\u4ee5\u4e0b\u7ea6\u5b9a\u6e90\u70b9\u4e3a $s$\uff0c\u6c47\u70b9\u4e3a $t$\u3002\n\n\u5728\u6700\u5c0f\u5272\u56fe\u4e0a\uff0c\u5982\u679c\u5272\u6389 $s$ \u548c $u$ \u4e4b\u95f4\u7684\u8fb9\uff0c\u4ee3\u8868**\u4e0d\u9009\u62e9** $u$ \u8fdb\u5165\u5b50\u56fe\uff0c\u5982\u679c\u5272\u6389 $v$ \u548c $t$ \u4e4b\u95f4\u7684\u8fb9\uff0c\u4ee3\u8868**\u9009\u62e9** $v$ \u8fdb\u5165\u5b50\u56fe\u3002\n\n\u6c42\u5b8c\u6700\u5c0f\u5272\u540e\uff0c\u5982\u679c\u70b9 $i$ \u4e0e $s$ \u76f8\u8fde\uff0c\u90a3\u4e48\u5b50\u56fe\u4e0a\u4f1a\u9009\u62e9\u70b9 $i$\uff0c\u5982\u679c $i$ \u4e0e $t$ \u76f8\u8fde\uff0c\u5219\u4e0d\u9009\u62e9\u70b9 $i$\u3002\n\n#### \u8003\u8651\u8bc1\u660e\uff1a\n\n(\u90e8\u5206\u8bc1\u660e\u5185\u5bb9\u53c2\u8003[CaptainChen\u7684\u535a\u5ba2](https://blog.csdn.net/can919/article/details/77603353))\n\n##### \u5148\u8bc1\u660e\u5f97\u5230\u7684\u5b50\u56fe\u662f\u95ed\u5408\u7684\uff1a\n\n\u9996\u5148\u8003\u8651\u7531\u4e8e\u6c42\u5f97\u662f\u6700\u5c0f\u5272\uff0c\u4e00\u4e2a\u70b9\u8981\u4e48\u548c $s$ \u76f8\u8fde\uff0c\u8981\u4e48\u548c $t$ \u76f8\u8fde\uff0c\u5426\u5219\u4e00\u5b9a\u5272\u6389\u5b83\u5411 $s$ \u6216 $t$ \u7684\u4e00\u6761\u8fb9\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u56e0\u4e3a\u5272\u6389\u8be5\u8fb9\u4e0d\u4f1a\u6539\u53d8\u56fe\u7684\u4e0d\u8fde\u901a\u6027\uff0c\u6700\u5c0f\u5272\u4e0d\u4f1a\u5272\u6389\u5b83\u3002\n\n\u7531\u4e8e\u539f\u56fe\u4e2d\u7684\u8fb9\u5168\u90e8\u662f\u6b63\u65e0\u7a77\uff0c\u6700\u5c0f\u5272\u53ea\u4f1a\u5272\u6389\u6e90\u70b9\u548c\u6b63\u6743\u70b9\u4e4b\u95f4\u6216\u8d1f\u6743\u70b9\u548c\u6c47\u70b9\u4e4b\u95f4\u7684\u8fb9\u3002\n\n\u8003\u8651\u5982\u679c\u9009\u62e9\u4e86\u6b63\u6743\u70b9 $u$\uff0c\u4e3a\u4e86\u4fdd\u8bc1 $s-t$ \u4e0d\u8fde\u901a\uff0c\u5fc5\u987b\u5272\u6389 $u$ \u6240\u6709\u540e\u7ee7\u4e2d\u7684\u8d1f\u6743\u70b9\u3002\u8fd9\u8bc1\u660e\u4e86\u5982\u679c\u9009\u62e9\u4e86\u4e00\u4e2a\u6b63\u6743\u70b9\u90a3\u4e48\u6240\u6709\u7684\u540e\u7ee7\u8d1f\u6743\u70b9\u90fd\u4f1a\u88ab\u9009\u62e9\u3002\n\n\u5982\u679c\u9009\u62e9\u4e86\u6b63\u6743\u70b9 $u$\uff0c\u8bbe $v$ \u662f $u$ \u7684\u540e\u7ee7\u4e14 $v$ \u7684\u7684\u6743\u503c\u4e3a\u6b63\uff0c\u7531\u4e8e\u6ca1\u6709\u5272\u6389 $u$\uff0c\u901a\u8fc7 $u-v$ \u4e4b\u95f4\u7684\u6b63\u65e0\u7a77\u8fb9\u603b\u80fd\u4f7f\u5f97 $s-v$ \u8054\u901a\uff0c\u4e8e\u662f\u5272\u6389 $s-v$ \u7684\u8fb9\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u6700\u5c0f\u5272\u4e0d\u4f1a\u5272\u6389\u8fd9\u6761\u8fb9\uff0c\u8fd9\u8bc1\u660e\u4e86\u5982\u679c\u9009\u62e9\u4e86\u4e00\u4e2a\u6b63\u6743\u70b9\u90a3\u4e48\u8be5\u70b9\u7684\u6240\u6709\u540e\u7ee7\u6b63\u6743\u70b9\u90fd\u4f1a\u88ab\u9009\u62e9\u3002\n\n\u70b9\u6743\u4e3a $0$ \u7684\u60c5\u51b5\u540c\u7406\u3002\n\n\u8003\u8651\u4e8b\u5b9e\u4e0a\u9009\u62e9\u7684\u95ed\u5408\u5b50\u56fe\u7684\u8fc7\u7a0b\u662f\u4e0d\u53ef\u80fd\u4ece\u4e00\u4e2a\u8d1f\u6743\u70b9\u5f00\u59cb\u7684\uff0c\u56e0\u4e3a\u53bb\u6389\u8fd9\u4e2a\u8d1f\u6743\u70b9\u76f4\u63a5\u9009\u62e9\u5b83\u7684\u540e\u7ee7\u663e\u7136\u4f18\u4e8e\u9009\u62e9\u8be5\u70b9\u3002\u4e8e\u662f\u53ea\u8003\u8651\u9009\u62e9\u6b63\u6743\u70b9\u5c31\u53ef\u4ee5\u5305\u62ec\u6240\u6709\u7684\u60c5\u51b5\u3002\u8bc1\u6bd5\u3002\n\n##### \u518d\u8bc1\u660e\u5f97\u5230\u7684\u662f\u6700\u5927\u6743\u5b50\u56fe\uff1a\n\n\u8003\u8651\u5982\u679c $i$ \u4e0e $s$ \u8054\u901a\uff0c\u90a3\u4e48\u9009\u62e9 $i$\uff0c\u5426\u5219\u4e0d\u9009\u62e9 $i$\u3002\u6240\u4ee5\u6700\u5c0f\u5272\u5272\u6389\u7684\u6743\u503c\u548c\u662f \u4e0d\u88ab\u9009\u62e9\u7684\u6b63\u6743\u70b9\u6743\u503c\u548c + \u88ab\u9009\u62e9\u7684\u8d1f\u6743\u70b9\u7684\u6743\u503c\u7684\u7edd\u5bf9\u503c\u548c \uff0c\u5373 \u6700\u5c0f\u5272 = $\\min\\{$\u6ca1\u88ab\u9009\u62e9\u7684\u6b63\u6743\u70b9\u6743\u503c\u548c + \u88ab\u9009\u62e9\u7684\u8d1f\u6743\u70b9\u7684\u6743\u503c\u7684\u7edd\u5bf9\u503c\u548c$\\}$\n\n\u4e8e\u662f\n\n$$\\text{\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6743\u503c\u548c}~=~\\max\\{\\text{\u88ab\u9009\u62e9\u7684\u70b9\u6743\u548c}\\}~=~\\text{\u6b63\u70b9\u6743\u548c} - \\min\\{\\text{\u6ca1\u88ab\u9009\u62e9\u7684\u6b63\u6743\u70b9\u4e4b\u548c + \u88ab\u9009\u62e9\u7684\u8d1f\u6743\u70b9\u7edd\u5bf9\u503c\u548c}\\}~=~\\text{\u6b63\u70b9\u6743\u548c} - \\text{\u6700\u5c0f\u5272}$$\n\n\u8bc1\u6bd5\u3002\n\n\u4e8e\u662f\u672c\u9898\u53ea\u9700\u8981\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\u5efa\u56fe\u5373\u53ef\u3002\u8f93\u51fa\u65b9\u6848\u53ea\u9700\u8981\u8f93\u51fa\u4e0e $s$ \u8054\u901a\u7684\u70b9\u3002\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <vector>\n#include <algorithm>\n#ifdef ONLINE_JUDGE\n#define freopen(a, b, c)\n#endif\n\ntypedef long long int ll;\n\nnamespace IPT {\n\tconst int L = 1000000;\n\tchar buf[L], *front=buf, *end=buf;\n\tchar GetChar() {\n\t\tif (front == end) {\n\t\t\tend = buf + fread(front = buf, 1, L, stdin);\n\t\t\tif (front == end) return -1;\n\t\t}\n\t\treturn *(front++);\n\t}\n}\n\ntemplate <typename T>\ninline bool qr(T &x) {\n\tchar ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n\tif (lst == '-') x = -x;\n  return (ch != '\\r') && (ch != '\\n');\n}\n\nnamespace OPT {\n\tchar buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n\tif (x < 0) {x = -x, putchar('-');}\n\tint top=0;\n\tdo {OPT::buf[++top] = static_cast<char>(x % 10 + '0');} while (x /= 10);\n\twhile (top) putchar(OPT::buf[top--]);\n\tif (pt) putchar(aft);\n}\n\nconst int maxn = 110;\nconst int INF = 10000000;\n\nstruct Edge {\n  int u, v, flow;\n  Edge *nxt, *bk;\n\n  Edge(const int _u, const int _v, const int _fl, Edge* &h) {\n    this->u = _u; this->v = _v; this->flow = _fl; this->nxt = h; h = this;\n  }\n};\nEdge *hd[maxn], *fir[maxn];\ninline void cont(const int _u, const int _v, const int _flow) {\n  auto u = new Edge(_u, _v, _flow, hd[_u]), v = new Edge(_v, _u, 0, hd[_v]);\n  (u->bk = v)->bk = u;\n}\n\nint n, m, s, t, ans;\nint MU[maxn], val[maxn], trial[maxn], tol[maxn], dist[maxn];\nstd::vector<int>tool[maxn];\nstd::queue<int>Q;\n\nbool bfs();\nint dfs(const int u, int canag);\n\nint main() {\n\tfreopen(\"1.in\", \"r\", stdin);\n  qr(m); qr(n);\n  for (int i = 1, x = 0; i <= m; ++i) {\n    qr(MU[i]); ans += MU[i];\n    bool k;\n    do {\n      k = qr(x);\n      tool[i].push_back(x);\n      x = 0;\n    } while (k);\n    trial[i] = ++t;\n  }\n  for (int i = 1; i <= n; ++i) {qr(val[i]); tol[i] = ++t;}\n  s = ++t; ++t;\n  for (int i = 1; i <= m; ++i) {\n    cont(s, trial[i], MU[i]);\n    for (auto j : tool[i]) cont(trial[i], tol[j], INF);\n  }\n  for (int i = 1; i <= n; ++i) cont(tol[i], t, val[i]);\n  while (bfs()) {\n    for (int i = 1; i <= t; ++i) fir[i] = hd[i];\n    ans -= dfs(s, INF);\n  }\n  for (int i = 1; i <= m; ++i) if (dist[i]) qw(i, ' ', true);\n  putchar('\\n');\n  for (int i = tol[1]; i <= tol[n]; ++i) if (dist[i]) qw(i - m, ' ', true);\n  putchar('\\n');\n  qw(ans, '\\n', true);\n  return 0;\n}\n\nbool bfs() {\n  memset(dist, 0, sizeof dist);\n  Q.push(s); dist[s] = 1;\n  while (!Q.empty()) {\n    int u = Q.front(); Q.pop();\n    for (auto e = hd[u]; e; e = e->nxt) if (e->flow > 0) {\n      if (dist[e->v]) continue;\n      dist[e->v] = dist[u] + 1;\n      Q.push(e->v);\n    }\n  }\n  return dist[t];\n}\n\nint dfs(const int u, int canag) {\n  if ((u == t) || (!canag)) return canag;\n  int _flow = 0;\n  for (auto &e = fir[u]; e; e = e->nxt) if (e->flow > 0) {\n    int v = e->v;\n    if (dist[v] != (dist[u] + 1)) continue;\n    int f = dfs(v, std::min(canag, e->flow));\n    _flow += f; e->flow -= f; e->bk->flow += f;\n    if (!(canag -= f)) break;\n  }\n  return _flow;\n}\n```\n\n",
        "postTime": 1552740126,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "PS\uff1a\u672c\u4eba\u56e0\u8bfb\u5165\u95ee\u9898WA\u4e86\u597d\u591a\u6b21= =\u3002\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u70b9\u662f\u6837\u4f8b\uff0c\u5982\u679c\u624b\u6d4b\u6837\u4f8b\u8fc7\u4f46\u662f\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u70b9WA\u53ef\u4ee5\u53c2\u8003\u4e0b\u6211\u7684\u8bfb\u5165\u65b9\u5f0f\u3002\n\n\n\u4ee5\u4e0b\u5185\u5bb9\u53c2\u8003 \u80e1\u4f2f\u6d9b \u300a\u6700\u5c0f\u5272\u6a21\u578b\u5728\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e2d\u7684\u5e94\u7528\u300b\uff0c\u611f\u8c22\u4ed6\u4e3a\u6211\u4eec\u63d0\u4f9b\u8fd9\u4e48\u4f18\u79c0\u7684\u8bba\u6587\u3002\n\n\u8fd9\u9053\u9898\u662f\u6700\u5927\u6743\u95ed\u5408\u56fe\u3002\n\n1. \u5bf9\u4e8e\u6bcf\u4e2a\u5b9e\u9a8c\uff0c\u8fde\u4e00\u6761\u4eces\u5230\u5b9e\u9a8c\uff0c\u8fb9\u6743\u4e3a\u5b9e\u9a8c\u5229\u76ca\u7684\u8fb9\u3002\n\n2. \u5bf9\u4e8e\u6bcf\u4e2a\u9700\u8981\u7684\u4eea\u5668\uff0c\u8fde\u4e00\u6761\u4ece\u5b9e\u9a8c\u5230\u5668\u6750\uff0c\u8fb9\u6743\u4e3aINF\u7684\u8fb9\u3002\n\n3. \u5bf9\u4e8e\u6bcf\u4e2a\u4eea\u5668\uff0c\u8fde\u4e00\u6761\u4ece\u5668\u6750\u5230t\uff0c\u8fb9\u6743\u4e3a\u5668\u6750\u8017\u8d39\u7684\u8fb9\u3002\n\n\u6309\u7167\u4e0a\u9762\u5efa\u56fe\uff0c\u6c42\u6700\u5c0f\u5272\u5373\u6700\u5927\u6d41\uff0c\u7136\u540e\u7528\u5b9e\u9a8c\u5229\u76ca\u603b\u548c\u51cf\u53bb\u6700\u5927\u6d41\u5373\u4e3a\u6700\u5927\u51c0\u6536\u76ca\uff0c\u5177\u4f53\u8bc1\u660e\u53ef\u4ee5\u5728\u8bba\u6587\u4e2d\u67e5\u9605\u3002\n\n\n\u5173\u4e8e\u6c42\u65b9\u6848\uff0c\u7531\u4e8en,m\u53ea\u670950\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u679a\u4e3e\u5220\u9664\u5668\u6750\u548ct\u4e4b\u95f4\u7684\u8fb9\uff0c\u5982\u679c\u5220\u53bb\u540e\u7684\u6700\u5927\u6d41\u548c\u539f\u6765\u7684\u6700\u5927\u6d41\u7684\u5dee\u503c\u7b49\u4e8e\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u5c31\u662f\u5fc5\u987b\u6ee1\u6d41\u7684\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a\u5668\u6750\u662f\u5fc5\u8981\u7684\u3002\u518d\u6839\u636e\u9700\u8981\u7684\u5668\u6750\u6211\u4eec\u5bb9\u6613\u77e5\u9053\u8981\u505a\u7684\u5b9e\u9a8c\u6709\u54ea\u4e9b\u3002\n\n\n\u6700\u5927\u6d41\u6211\u7528\u7684\u662fSAP\u591a\u8def\u589e\u5e7f\u52a0\u5f53\u524d\u5f27\u4f18\u5316\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <vector>\n#define ll long long\n#define pb push\\_back\n#define MAXN 2000\n#define MAXM 800000 \n#define INF 1073741823 \nusing namespace std;\n    int n,m,tmp,s,t,sz=1,yans,sum,rem,num,ulen,cou;\n    int val[MAXN],cost[MAXN],H[MAXN],gap[MAXN],cur[MAXN],pre[MAXM],to[MAXM],v[MAXM],las[MAXN],yv[MAXM];\n    vector <int> req[MAXN];\n    bool canuse1[MAXN],canuse2[MAXN];\n    char c[10010];\nvoid ins(int x,int y,int z)\n{\n    sz++;to[sz]=y;v[sz]=z;pre[sz]=las[x];las[x]=sz;\n    sz++;to[sz]=x;v[sz]=0;pre[sz]=las[y];las[y]=sz;\n}\nvoid init()\n{\n    s=1,t=2+n+m;\n    for (int i=1;i<=n;i++)\n    {\n        ins(s,i+1,val[i]);\n        for (int j=0;j<req[i].size();j++)\n            ins(i+1,1+n+req[i][j],INF);\n    }\n    for (int i=1;i<=m;i++)\n        ins(i+n+1,t,cost[i]);\n}\nvoid bfs()\n{\n    memset(gap,0,sizeof(gap));\n    memset(H,-1,sizeof(H));\n    H[t]=0,gap[0]=1;\n    queue<int> q;\n    q.push(t);\n    while (!q.empty())\n    {\n        tmp=q.front();\n        q.pop();\n        for (int i=las[tmp];i;i=pre[i])\n        if (H[to[i]]==-1)\n        {\n            H[to[i]]=H[tmp]+1;\n            gap[H[to[i]]]++;\n            q.push(to[i]);\n        }\n    }\n}\nint dfs(int x,int F)\n{\n    if (x==t) return F;\n    int used=0,w;\n    for (int i=cur[x];i;i=pre[i])\n    if (v[i]>0&&H[to[i]]+1==H[x])\n    {\n        w=min(v[i],F-used);\n        w=dfs(to[i],w);\n        v[i]-=w,v[i^1]+=w,used+=w;\n        if (v[i]>0) cur[x]=i;\n        if (F==used) return F;\n    }\n    gap[H[x]]--;\n    if (!gap[H[x]]) H[s]=t+2;\n    cur[x]=las[x];\n    gap[++H[x]]++;\n    return used;\n}\nint SAP()\n{\n    int ans=0;\n    for (int i=s;i<=t;i++)\n        cur[i]=las[i];\n    while (H[s]<t+2)\n        ans+=dfs(s,INF);\n    return ans; \n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&val[i]);\n        sum+=val[i];\n        memset(c,0,sizeof(c));\n        cin.getline(c,10000);\n        ulen=0;\n        while (sscanf(c+ulen,\"%d\",&num)==1)\n        {\n            req[i].pb(num);\n            if (num==0) ulen++;\n            else while (num)\n            {\n                num/=10;\n                ulen++;\n            }\n            ulen++;\n        }\n    }\n    for (int i=1;i<=m;i++)\n        scanf(\"%d\",&cost[i]);\n    init();\n    memcpy(yv,v,sizeof(v));\n    bfs();\n    yans=SAP();\n    for (int i=las[t];i;i=pre[i])\n    {\n        memcpy(v,yv,sizeof(yv));\n        rem=v[i^1];\n        v[i^1]=0;\n        bfs();\n        tmp=SAP();\n        if (yans-tmp==rem) canuse1[to[i]-n-1]=true;\n        v[i^1]=rem;\n    }\n    for (int i=1;i<=n;i++)\n    {\n        canuse2[i]=true;\n        for (int j=0;j<req[i].size();j++)\n            if (!canuse1[req[i][j]])\n            {\n                canuse2[i]=false;\n                break;\n            }\n    }\n    for (int i=1;i<=n;i++)\n        if (canuse2[i]) printf(\"%d \",i);\n    putchar('\\n');\n    for (int i=1;i<=m;i++)\n        if (canuse1[i]) printf(\"%d \",i);\n    putchar('\\n');\n    printf(\"%d\",sum-yans);\n    return 0;\n}\n\u00b7\u00b7\u00b7",
        "postTime": 1483520762,
        "uid": 9433,
        "name": "FlierKing",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u5927\u6982\u8bb2\u4e00\u4e0b\u8f6c\u6362\u6210\u6700\u5927\u6d41\u4ee5\u540e\u600e\u4e48\u8f93\u51fa\u3002\n\n\u4e00\u4e2a\u7ed3\u8bba\u5c31\u662f\u5047\u5982\u6211\u4eec\u8dd1\u7684\u662f Dinic \u90a3\u4e48\u6211\u4eec\u6700\u540e\u4e00\u6b21\u7f51\u7edc\u6d41\uff08\u8fd9\u4e00\u6b21\u7f51\u7edc\u6d41\u5e76\u6ca1\u6709\u8d77\u4efb\u4f55\u4f5c\u7528\uff0c\u53ea\u662f\u786e\u8ba4\u4e86\u65e0\u66f4\u591a\u6b8b\u4f59\u6d41\u91cf\u53ef\u4ee5\u9000\u51fa\u4e86\u3002\uff09\u4e2d\u6240\u6709\u88ab\u5206\u5230\u5c42\u7684\u90fd\u4e00\u5b9a\u88ab\u9009\u4e0a\u4e86\u3002\n\n\u6ca1\u6709\u66f4\u591a\u6b8b\u4f59\u6d41\u91cf\u5176\u5b9e\u610f\u5473\u7740\u8fd9\u4e2a\u56fe\u5df2\u7ecf\u88ab\u5272\u6210\u4e86\u4e24\u90e8\u5206\uff0c\u4e00\u4e2a\u5b9e\u9a8c\u5982\u679c\u6709\u5c42\u6570\u610f\u5473\u7740\u5b83\u6ca1\u6709\u88ab\u5272\u6389\uff08\u88ab\u9009\u4e0a\u4e86\uff09\uff0c\u4e00\u4e2a\u4eea\u5668\u5982\u679c\u6709\u5c42\u6570\u610f\u5473\u7740\u5b83\u5df2\u7ecf\u88ab\u5272\u6389\u4e86\uff08\u4e5f\u662f\u88ab\u9009\u4e0a\u4e86\uff09\u3002\n\n\u4e8e\u662f\u53ea\u8981\u5728\u6700\u540e\u8f93\u51fa\u6240\u6709\u6709\u5c42\u6570\u7684\u70b9\u5c31\u884c\u4e86\u3002",
        "postTime": 1588681226,
        "uid": 35891,
        "name": "huangzirui",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "# \u6765\u81ea\u4e00\u4e2a\u849f\u84bb\u7684\u8bc1\u660e\u8fc7\u7a0b\n### [luogu2762 \u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898](https://www.luogu.org/problemnew/show/P2762)\n\u8fd9\u9898\u771f\u7684\u592a\u8d39\u8111\u5b50\u4e86\u2026\u2026\u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u592a\u5929\u771f\uff0c\u5c31\u662f\u5148\u7528\u6e90\u70b9\u8fde\u63a5\u4eea\u5668\uff0c\u7136\u540e\u4eea\u5668\u8fde\u5b9e\u9a8c\uff0c\u5b9e\u9a8c\u548c\u5b9e\u9a8c\u81ea\u8fde\uff0c\u8fb9\u6743\u662f\u5b9e\u9a8c\u7684\u51c0\u6536\u76ca\uff0c\u4f46\u662f\u8fd9\u6837\u540e\u6765\u8bc1\u660e\u662f\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a\u9898\u9762\u7684\u610f\u601d\u662f\u591a\u4e2a\u5b9e\u9a8c\u53ef\u4ee5\u5171\u7528\u4e00\u4e2a\u4eea\u5668\u3002\u6240\u4ee5\u8bf4\u5c31\u7b97\u67d0\u4e2a\u5b9e\u9a8c\u7684\u6536\u76ca\u4e3a\u8d1f\u6570\uff0c\u4f46\u662f\u5b83\u7528\u5230\u7684\u4eea\u5668\u80fd\u4e3a\u522b\u7684\u5b9e\u9a8c\u6240\u7528\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e0e\u4f60\u82b1\u4e86\u8fd9\u4e2a\u5b9e\u9a8c\u7684\u8d5e\u52a9\u5546\u7ed9\u4f60\u7684\u94b1\u4e3a\u522b\u7684\u5b9e\u9a8c\u4e70\u4eea\u5668\u3002    \n\u5b9e\u5728\u60f3\u4e0d\u51fa\u6765\uff0c\u770b\u9898\u89e3\u3002\n\u5e94\u8be5\u7684\u5efa\u56fe\u65b9\u6cd5\u662f\u6e90\u70b9\u8fde\u63a5\u5b9e\u9a8c\uff0c\u8fb9\u6743\u662f\u5b9e\u9a8c\u7ecf\u8d39\uff0c\u5b9e\u9a8c\u548c\u4eea\u5668\u4e4b\u95f4\u8fdeinf\uff0c\u7136\u540e\u4eea\u5668\u548c\u6c47\u70b9\u4e4b\u95f4\u8fde\u63a5\uff0c\u8fb9\u6743\u662f\u4e70\u4eea\u5668\u7684\u94b1\uff0c\u8fd9\u6837\u8dd1\u51fa\u6765\u7684\u6700\u5927\u6d41\u7528\u603b\u7ecf\u8d39\u51cf\u53bb\u5c31\u884c\u4e86\u3002    \n\u4e0b\u9762\u770b\u56fe    \n![image](https://cdn.luogu.com.cn/upload/pic/14118.png)\n\u8fd9\u4e2a\u56fe\u4e2d\u5c31\u662f\u4e00\u4e2a\u660e\u663e\u7684\u4e8f\u672c\u5b9e\u9a8c\uff0c\u90a3\u4e48\u8fd9\u4e48\u5efa\u56fe\u7684\u8bdd\u6d41\u5230\u6700\u540e\u7684\u5c31\u662f24\uff0c\u8d5e\u52a9\u5546\u7ed9\u7684\u7ecf\u8d39\uff0c\u6240\u4ee5\u6700\u540e\u7528\u603b\u7ecf\u8d39\u51cf\u53bb\u6700\u5927\u6d41\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u51cf\u53bb\u8fd9\u4e2a\u7ecf\u8d39\uff0c\u5c31\u76f8\u5f53\u4e8e\u6ca1\u9009\u8fd9\u4e2a\u5b9e\u9a8c\u3002    \n\u5bf9\u4e8e\u4e4b\u524dpass\u6389\u6211\u7a0b\u5e8f\u7684\u90a3\u4e2a\u60f3\u6cd5\uff0c\u7528\u8fd9\u79cd\u5efa\u56fe\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u3002    \n![image](https://cdn.luogu.com.cn/upload/pic/14149.png)\n\u6b63\u786e\u6027\u663e\u7136\u3002    \n\u8fd9\u4e2a\u9898\u6700\u96be\u7684\u4e00\u70b9\u5c31\u5728\u4e8e\u5982\u4f55\u8f93\u51fa\u65b9\u6848\u3002\u4ecb\u5165\u672c\u4eba\u592a\u849f\u84bb\uff0c\u53ea\u80fd\u770b\u9898\u89e3\u3002\u9898\u89e3\u63d0\u4f9b\u7684\u65b9\u6848\u662f\u6700\u540e\u4e00\u904d\u589e\u5e7f\u7684\u5206\u5c42\u56fe\u4e2d\u6709\u5c42\u6570\u7684\uff0c\u4e5f\u5c31\u662f\u904d\u5386\u5230\u7684\u70b9\u662f\u9009\u8fc7\u7684\u3002\u8fd9\u4e2a\u5927\u6982\u7684\u89e3\u91ca\u65b9\u6cd5\u5c31\u662f\u6574\u5f20\u56fe\u770b\u505a\u6700\u5c0f\u5272\u4e4b\u540e\u5206\u6210\u4e86\u4e24\u4e2a\u96c6\u5408\uff0c\u4e00\u4e2a\u5305\u62ec\u6e90\u70b9\uff0c\u4e00\u4e2a\u5305\u62ec\u6c47\u70b9\u3002    \n\u4e3a\u4ec0\u4e48\u8981\u770b\u505a\u6700\u5c0f\u5272\u5462\uff1f\u4e4b\u524d\u6211\u4eec\u8bf4\u8fc7\uff0c\u5982\u679c\u67d0\u4e2a\u5b9e\u9a8c\u7684\u6536\u76ca\u4e3a\u8d1f\u6570\uff0c\u4f46\u662f\u5b83\u7528\u5230\u7684\u4eea\u5668\u80fd\u4e3a\u522b\u7684\u5b9e\u9a8c\u6240\u7528\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e0e\u4f60\u82b1\u4e86\u8fd9\u4e2a\u5b9e\u9a8c\u7684\u8d5e\u52a9\u5546\u7ed9\u4f60\u7684\u94b1\u4e3a\u522b\u7684\u5b9e\u9a8c\u4e70\u4eea\u5668\uff0c\u5177\u8c61\u5316\u5728\u8fd9\u4e2a\u56fe\u4e0a\uff0c\u5c31\u662f\u4eea\u5668\u90a3\u4e2a\u70b9\u7ed9\u8fd9\u4e2a\u5b9e\u9a8c\u4e00\u4e2a\u6d41\uff0c\u628a\u8fd9\u4e2a\u5b9e\u9a8c\u6d41\u51fa\u53bb\u7684\u62b5\u6d88\u6389\u4e86\u3002\u5f53\u7136\uff0c\u4e5f\u4f1a\u5b58\u5728\u90a3\u79cd\u65e0\u8bba\u600e\u4e48\u4e70\u4eea\u5668\u90fd\u4e0d\u5212\u7b97\u7684\u5b9e\u9a8c\uff0c\u8fd9\u6837\u7684\u5b9e\u9a8c\u6709\u4e00\u4e2a\u7279\u70b9\uff0c\u56e0\u4e3a\u5b83\u4e0d\u80fd\u4f9b\u7ed9\u4eea\u5668\u7684\u9700\u6c42\uff0c\u6240\u4ee5\u6e90\u70b9\u5230\u5b83\u7684\u6b8b\u6d41\u4e00\u5b9a\u662f0\uff0c\u5c31\u662f\u8bf4\u4e0d\u7ba1\u662f\u6b63\u5411\u8fb9\u8fd8\u662f\u53cd\u5411\u8fb9\u90fd\u662f0\uff0c\u540c\u6837\u7684\u90a3\u4e9b\u53ef\u4ee5\u4f9b\u7ed9\u7684\uff0c\u6e90\u70b9\u5230\u5b83\u7684\u6b8b\u7559\u4e00\u5b9a\u5927\u4e8e0\uff0c\u4e5f\u5c31\u662f\u6b63\u5411\u8fb9\u6216\u8005\u53cd\u5411\u8fb9\u5927\u4e8e0\uff0c\u8bf4\u660e\u505a\u8fd9\u4e2a\u5b9e\u9a8c\u80fd\u8d5a\u94b1\u3002    \n\u90a3\u4e48\uff0c\u56e0\u4e3a\u8fd9\u79cd\u5fc5\u987b\u8981\u5220\u6389\u7684\u5b9e\u9a8c\uff0c\u5b83\u7684\u7ecf\u8d39\u6700\u7ec8\u80af\u5b9a\u8981\u4ece\u603b\u7ecf\u8d39\u91cc\u9762\u51cf\u6389\uff0c\u6211\u4eec\u5c31\u4e0d\u7b97\u5b83\uff0c\u800c\u5269\u4e0b\u7684\u90a3\u4e9b\u5b9e\u9a8c\uff0c\u5b83\u4eec\u6240\u9700\u8981\u7684\u4eea\u5668\u4e00\u8d77\u6d41\u5230\u6c47\u70b9\uff0c\u5c31\u662f\u6700\u5927\u6d41\u3002\u6240\u4ee5\u8bf4\uff0c\u6700\u5c0f\u5272\u4e5f\u662f\u5272\u6389\u8fd9\u4e9b\u4eea\u5668\u4e0e\u6c47\u70b9\u4e4b\u95f4\u7684\u8fb9\u3002    \n\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u8bc1\u51fa\uff0c\u5728\u6700\u5c0f\u5272\u4e2d\uff0c\u4e0e\u6e90\u70b9\u540c\u4e00\u96c6\u5408\u7684\u5b9e\u9a8c\u548c\u4eea\u5668\uff0c\u5fc5\u9009\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define rint register int\n#define inv inline void\n#define inb inline bool\n#define ini inline int\n#define big 1e9\nusing namespace std;\nint n,m,all,cnt,head[10001],cur[10001],dis[10001],ans,tot,s=0,t=151;\nbool flag;\nstruct node\n{\n    int from,to,dis,num,next;\n}ljb[10001];\nini read()\n{\n    char c;int r=0;\n    while (c<'0' || c>'9') c=getchar();\n    while (c>='0' && c<='9')\n    {\n        r=r*10+c-'0';\n        c=getchar();\n    }\n    if (c=='\\r') flag=1;\n    return r;\n}\ninv add(int x,int y,int z)\n{\n    ljb[++cnt].from=x;\n    ljb[cnt].to=y;\n    ljb[cnt].dis=z;\n    ljb[cnt].num=cnt;\n    ljb[cnt].next=head[x];\n    head[x]=cnt;\n}\nqueue<int> q;\ninb bfs()\n{\n    q.push(s);\n    memset(dis,128,sizeof(dis));\n    dis[s]=0;\n    while(!q.empty())\n    {\n        int x=q.front();\n        q.pop();\n        for (rint i=head[x];i!=-1;i=ljb[i].next)\n        {\n            int y=ljb[i].to;\n            if (dis[y]<0 && ljb[i].dis>0)\n            {\n                dis[y]=dis[x]+1;\n                q.push(y);\n            }\n        }\n    }\n    if (dis[t]>0) return 1;\n    return 0;\n}\nini dfs(int x,int low)\n{\n    if (x==t) return low;\n    for (rint& i=cur[x];i!=-1;i=ljb[i].next)\n    {\n        int y=ljb[i].to;\n        if (dis[y]==dis[x]+1 && ljb[i].dis>0)\n        {\n            int flow=dfs(y,min(low,ljb[i].dis));\n            if (flow)\n            {\n                ljb[i].dis-=flow;\n                ljb[ljb[i].num^1].dis+=flow;\n                return flow;\n            }\n        }\n    } \n    return 0;\n} \nint main()\n{\n    m=read();n=read();\n    for (rint i=s;i<=t;i++) head[i]=-1;cnt=-1;\n    for (rint i=1;i<=m;i++)\n    {\n        int x;x=read();all+=x;\n        add(s,i,x);add(i,s,0);\n        flag=0;\n        while (!flag)\n        {\n            x=read();\n            add(i,x+50,big);\n            add(x+50,i,0);\n        }\n    }\n    for (rint i=1;i<=n;i++)\n    {\n        int x;x=read();\n        add(i+50,t,x);\n        add(t,i+50,0);\n    }\n    while (bfs())\n    {\n        for (rint i=s;i<=t;i++) cur[i]=head[i];\n        do\n        {\n            tot=dfs(s,big);\n            ans+=tot;\n        }\n        while (tot);\n    }\n    for (rint i=1;i<=m;i++) if (dis[i]>0) cout<<i<<\" \";\n    printf(\"\\n\");\n    for (rint i=1;i<=n;i++) if (dis[i+50]>0) cout<<i<<\" \";\n    printf(\"\\n\");\n    printf(\"%d\",all-ans);\n }\n```",
        "postTime": 1517972316,
        "uid": 43470,
        "name": "xMinh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "# 0 ~~\u626f\u6de1~~\n\n\u597d\u5427\u505a\u5b8c\u4e86\u4e4b\u540e\u5e76\u4e0d\u77e5\u9053\u9898\u89e3\u91cc\u5199\u7684\u201c\u6700\u5927\u6743\u95ed\u5408\u56fe\u201d\u3002\n\n\u5f53\u65f6\u5199\u8fd9\u9898\u5c31\u4e71\u6784\u9020\u4e86\u4e00\u4e0b\uff0c\u56e0\u4e3a\u5728\u7f51\u7edc\u6d41 24 \u9898\u4e2d\uff0c\u6240\u4ee5\u5927\u6982\u60f3\u4e86\u4e00\u4e0b\u6a21\u578b\u3002\u4e00\u5f00\u59cb\u60f3\u7684\u662f\u8d39\u7528\u6d41\uff0c\u4f46\u662f\u53d1\u73b0\u5e76\u4e0d\u53ef\u884c\uff0c\u56e0\u4e3a\u6709\u7684\u5b9e\u9a8c\u7528\u7684\u4eea\u5668\u4e0e\u5176\u4ed6\u5b9e\u9a8c\u6709\u53ef\u80fd\u91cd\u590d\uff0c\u7136\u540e\u5c31\u6709\u540e\u6548\u6027\u3002\n\n\u6240\u4ee5\u6211\u7d22\u6027\u5efa\u56fe\u8dd1\u4e86\u4e2a\u6700\u5927\u6d41\uff0c\u8003\u8651\u4e86\u201c\u4eea\u5668-\u6c47\u70b9\u201d\u7684\u8fb9\u7684\u60c5\u51b5\uff0c\u53d1\u73b0\u7b54\u6848\u5982\u6b64\u5947\u5999\u2026\u2026\u540e\u9762\u60f3\u4e86\u4e00\u4e0b\u8fd9\u6837\u7684\u6b63\u786e\u6027\u663e\u7136\u3002\n\n~~\u7136\u540e\u5c31\u4e0d\u5c0f\u5fc3\u8fc7\u6389\u4e86~~\n\n\u5176\u5b9e\u770b\u4e86\u9898\u89e3\u4e4b\u540e\u6211\u624d\u77e5\u9053\u539f\u6765\u8fd9\u9898\u7b97\u6cd5\u7684\u6b63\u786e\u540d\u79f0\u3002\n\n\n\n# 1 \u6b63\u6587\n\n## \u5efa\u56fe\u6c42\u89e3\n\n\u5efa\u56fe\u6bd4\u8f83\u7b80\u5355\uff0c\u5148\u4e0d\u8003\u8651\u6d41\u91cf\u4ec0\u4e48\u7684\uff0c\u663e\u7136\u662f\u5b9e\u9a8c\u5411\u4eea\u5668\u8fde\u4e00\u6761\u6709\u5411\u8fb9\u3002\n\n\u4e0a\u9762\u626f\u7684\u65f6\u5019\u5df2\u7ecf\u63d0\u5230\u8d39\u7528\u6d41\u4e0d\u662f\u90a3\u4e48\u7684\u53ef\u884c\u2026\u2026\u6240\u4ee5\u5148\u8003\u8651\u6700\u5927\u6d41\u3002\u5efa\u7acb\u8d85\u7ea7\u6e90\u70b9\u5411\u5b9e\u9a8c\u8fde\u8fb9\uff0c\u6240\u6709\u4eea\u5668\u5411\u8d85\u7ea7\u6c47\u70b9\u8fde\u8fb9\u3002\u63a5\u4e0b\u6765\u6b63\u9762\u8003\u8651\u6d41\u91cf\u9650\u5236\u3002\n\n- \u6211\u4eec\u53d1\u73b0\uff0c\u5b9e\u9a8c\u5411\u4eea\u5668\u7684\u6d41\u91cf\u5e94\u8be5\u4e3a $inf$\uff0c\u7136\u540e\u8d85\u7ea7\u6e90\u70b9\u5411\u5b9e\u9a8c $i$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $p_i$ \u7684\u8fb9\uff0c\u7528\u6765\u9650\u5236\u6bcf\u4e2a\u5b9e\u9a8c\u7684\u6536\u76ca\u3002\n\n- \u8003\u8651\u4eea\u5668\u3002\u5e94\u8be5\u4ece\u4eea\u5668 $j$ \u5411\u8d85\u7ea7\u6c47\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u9650\u5236\u4e3a $c_j$ \u7684\u8fb9\u3002\n\n\u5148\u4e0d\u8003\u8651\u4e0a\u9762\u4eea\u5668\u8d39\u7528\u9650\u5236\u7684\u6b63\u8d1f\u95ee\u9898\uff0c\u6211\u4eec\u6765\u8003\u8651\u8fd9\u6837\u629b\u51fa\u6700\u5927\u6d41\u662f\u4ec0\u4e48\u7ed3\u679c\u3002\n\n\u6211\u4eec\u77e5\u9053\u4e00\u4e2a~~\u663e\u7136\u7684~~\u4e8b\u5b9e\uff0c\u6700\u5927\u6d41 $=$ \u6700\u5c0f\u5272\u3002\u65e2\u7136\u4ece\u6700\u5927\u6d41\u7684\u65b9\u5411\u89e3\u91ca\u4e0d\u4e86\uff0c\u8003\u8651\u4e0b\u6700\u5c0f\u5272\u3002\u663e\u7136 \u201c\u5b9e\u9a8c-\u4eea\u5668\u201d \u7684\u8fb9\u662f\u4e0d\u80fd\u5272\u65ad\u7684\uff0c\u4e0d\u7136\u5c31\u4e0d\u4f1a\u6700\u5c0f\u5272\u4e86\uff08\u6d41\u91cf $inf$\uff09\uff1b\u6240\u4ee5\u53ea\u4f1a\u4ece \u201c\u6e90\u70b9-\u5b9e\u9a8c\u201d \u548c \u201c\u4eea\u5668-\u6c47\u70b9\u201d\u7684\u8fb9\u4e2d\u9009\u62e9\u3002\n\n\u6211\u4eec\u4e0a\u9762\u5bf9\u8fd9\u4e24\u7c7b\u8fb9\u8fdb\u884c\u4e86\u6d41\u91cf\u9650\u5236\uff0c\u90a3\u4e48\u5272\u53bb \u201c\u6e90\u70b9-\u5b9e\u9a8c\u201d\u7684\u8fb9\u610f\u5473\u7740\u6211\u4eec\u8017\u8d39\u8fd9\u4e48\u591a\u4ee3\u4ef7\u727a\u7272\u4e86\u8fd9\u4e2a\u5b9e\u9a8c\uff0c\u4e5f\u5c31\u662f\u4e0d\u9009\uff1b\u5272\u53bb\u201c\u4eea\u5668-\u6c47\u70b9\u201d\u7684\u8fb9\uff0c\u610f\u5473\u7740\u6211\u4eec\u7528\u8fd9\u6761\u7684\u4ee3\u4ef7\u8d2d\u4e70\u4e86\u4eea\u5668\uff08\u56e0\u4e3a\u6211\u4eec\u7528\u6b63\u6743\u8fde\u7684\u8fb9\uff09\u3002\n\n- \u7b54\u6848\u4e3a\u5b9e\u9a8c\u6536\u76ca\u7684\u603b\u548c $-$ \u4e0a\u56fe\u7684\u6700\u5927\u6d41\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u7684\u6784\u9020\u5f88\u5de7\u5999\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u50cf\u4e00\u4e2a\u5c0f\u5c0f\u7684\u5bb9\u65a5\uff08\u96fe\u3002\u6211\u4eec\u9009\u62e9\u820d\u5f03\u4e00\u4e9b\u5b9e\u9a8c\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u5b9e\u9a8c\u5c31\u662f\u8981\u9009\u62e9\u7684\uff0c\u5e76\u4e14\u518d\u6b64\u8fd8\u9009\u62e9\u4e86\u4e00\u4e9b\u4eea\u5668\uff0c\u6240\u4ee5\u7b54\u6848\u663e\u7136\u3002\n\n\u8003\u8651\u6b63\u786e\u6027\uff0c\u5982\u4f55\u4fdd\u8bc1\u5269\u4f59\u7684\u5b9e\u9a8c\u4e00\u5b9a\u4f1a\u7528\u5230\u9009\u5230\u7684\u4eea\u5668\uff0c\u5e76\u4e14\u4e0d\u4f1a\u591a\u4f59\uff1f\u6211\u4eec\u9009\u62e9\u5272\u6389\u201c\u6e90\u70b9-\u5b9e\u9a8c\u201d\u7684\u8fb9\u65f6\uff0c\u4e00\u5b9a\u8981\u4fdd\u8bc1\u6ee1\u6d41\uff0c\u4e0d\u7136\u5c31\u5272\u4e0d\u6389\u4e86\uff0c\u90a3\u4e48\u4eea\u5668\u4e5f\u662f\u663e\u7136\u3002\u7136\u540e\u80e1\u601d\u4e71\u60f3\u4e00\u4e0b\u6b63\u786e\u6027\u663e\u7136\u3002\uff08\u611f\u6027\u7406\u89e3\n\n\uff08\u5982\u679c\u8981\u770b\u4e25\u8c28\u8bc1\u660e\u8bf7\u79fb\u6b65\u5176\u4ed6\u9898\u89e3\uff09\n\n\u7136\u540e\u5c31\u6c42\u5b8c\u4e86\u3002\n\n## \u601d\u8def\u603b\u7ed3\n\n\u4e0a\u9762\u8bb2\u7684\u5e94\u8be5\u6bd4\u8f83\u6e05\u695a\u4e86\u3002\n\n- \u8d85\u7ea7\u6e90\u70b9\u5411\u5b9e\u9a8c $i$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $p_i$ \u7684\u8fb9\uff1b\n\n- \u5b9e\u9a8c\u5411\u5bf9\u5e94\u4eea\u5668\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $+\u221e$ \u7684\u8fb9\uff1b\n\n- \u4eea\u5668 $j$ \u5411\u8d85\u7ea7\u6c47\u70b9 \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $c_j$ \u7684\u8fb9\uff1b\n\n- \u8dd1\u6700\u5927\u6d41\uff0c\u7b54\u6848\u4e3a\u201c\u5b9e\u9a8c\u6536\u5165\u603b\u548c - \u6700\u5927\u6d41\u201d\u3002\n\n\u597d\u5427\u67e5\u4e86\u4e00\u4e0b\u8fd9\u5c31\u662f\u201c\u6700\u5927\u6743\u95ed\u5408\u56fe\u201d\u7684\u677f\u5b50\u9898\u3002\u611f\u6027\u7406\u89e3\u5c31\u597d\u4e86\u5427 $QwQ$~\n\n# \u4ee3\u7801\n\n\uff08~~\u6211\u77e5\u9053\u4f60\u4eec\u53ea\u770b\u8fd9\u4e2a~~\uff09\n\n\u4f46\u662f\u7ed9\u4ee3\u7801\u524d\u8fd8\u662f\u5206\u6790\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u5982\u679c\u4f7f\u7528 $dinic$ \u6216\u8005 $EK$ \u5e94\u8be5\u90fd\u53ef\u4ee5\u8fc7\uff0c\u4e5f\u53ef\u4ee5\u5361\u6ee1\u3002\u8003\u8651\u6700\u574f\u6e05\u7a7a\uff0c\u6bcf\u4e2a\u5b9e\u9a8c\u90fd\u9700\u8981\u6240\u6709\u4eea\u5668\uff0c\u8fb9\u6570\u4e3a $nm$\uff0c\u7136\u540e\u5982\u679c\u80fd\u5361\u6ee1\uff0c$dinic$ \u5c31\u662f $O(n^3m)$\uff0c$EK$ \u5c31\u662f $O(n^3m^2)$\uff0c\u4e5f\u8bb8\u80fd\u5361\u6ee1\u3002\uff08$EK$ \u662f\u5426\u80fd\u8fc7\u672c\u4eba\u6ca1\u8bd5\u8fc7\uff09\n\n\uff08\u6240\u4ee5\u6211\u5199\u7684 $dinic$\n\n\u5f53\u7136\u9884\u6d41\u63a8\u8fdb\u66f4\u52a0\u4f18\u79c0\u5566\uff08~~\u800c\u4e14\u5e94\u8be5\u662f\u5361\u4e0d\u6ee1\u7684~~\n\n~~~cpp\n#include<bits/stdc++.h>\n#define inf (1 << 28)\nusing namespace std;\n\nconst int N = 1e2 + 10;\nconst int M = 6e3 + 10;\n\nint head[N], ver[M], Next[M], edge[M], cnt;\n\nvoid add(int x, int y, int v) {\n\tver[++cnt] = y, edge[cnt] = v;\n\tNext[cnt] = head[x], head[x] = cnt;\n\t\n\tver[++cnt] = x, edge[cnt] = 0;\n\tNext[cnt] = head[y], head[y] = cnt;\n} \n\nint d[N], s, t;\n\nbool bfs() {\n\tmemset(d, 0, sizeof d), d[s] = 1;\n\tqueue<int> q; q.push(s);\n\twhile(q.size()) {\n\t\tint x = q.front(); q.pop();\n\t\tfor(int i = head[x]; i; i = Next[i])\n\t\t\tif(edge[i] and !d[ver[i]]) {\n\t\t\t\td[ver[i]] = d[x] + 1;\n\t\t\t\tif(ver[i] == t) return 1;\n\t\t\t\tq.push(ver[i]);\n\t\t\t}\n\t}\n\treturn 0;\n}\n\nint dinic(int x, int flow) {\n\tif(x == t) return flow;\n\tint rest = flow, k;\n\tfor(int i = head[x]; i and rest; i = Next[i]) \n\t\tif(edge[i] and d[ver[i]] == d[x] + 1) {\n\t\t\tk = dinic(ver[i], min(rest, edge[i]));\n\t\t\tif(!k) d[ver[i]] = 0;\n\t\t\tedge[i] -= k, edge[i ^ 1] += k;\n\t\t\trest -= k;\n\t\t} \n\treturn flow - rest;\n}\n\nint read() {\n\tstatic char c;\n\tstatic int x;\n\tif(c == '\\n') return c = 0, -1;\n\twhile(!isdigit(c = getchar())); \n\tx = c ^ 48;\n\twhile(isdigit(c = getchar()))\n\t\tx = x * 10 + (c ^ 48);\n\treturn x;\n}\n\nint main() {\n\tint m, n, maxflow = 0, flow, sum = 0;\n\tscanf(\"%d %d\", &m, &n);\n\ts = n + m + 1, t = s + 1, cnt = 1;\n\tfor(int i = 1, x; i <= m; i++) { \n\t\tscanf(\"%d\", &x), add(s, i, x), sum += x;\n\t\twhile(~(x = read())) add(i, m + x, inf);\n\t}\n\tfor(int i = 1, x; i <= n; i++) \n\t\tscanf(\"%d\", &x), add(m + i, t, x);\n\twhile(bfs())\n\t\twhile((flow = dinic(s, inf)))\n\t\t\tmaxflow += flow;\n\tfor(int i = 1; i <= m; i++) \n\t\tif(d[i]) printf(\"%d \", i);\n\tputs(\"\");\n\tfor(int i = 1; i <= n; i++)\n\t\tif(d[i + m]) printf(\"%d \", i);\n\tprintf(\"\\n%d\\n\", sum - maxflow);\n\treturn 0;\n}\n~~~\n\n# \u540e\u8bdd\n\n- \u5b8c\u7ed3\u6492\u82b1\u2740\u2740\u2740\n\n- \u53ef\u4ee5\u6c42\u6ce2\u8d5e\u5417 $\\rm QAQ$",
        "postTime": 1584949472,
        "uid": 196649,
        "name": "xiejinhao",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u662f\u7f51\u7edc\u6d41\u7684\u7ecf\u5178\u9898\uff0c\u6211\u53d1\u9898\u89e3\u6574\u4f53\u601d\u8def\u4e0d\u8fc7\u662f\u5927\u4f17\u65b9\u6cd5\uff0c\u4f46\u4e00\u65b9\u9762\u60f3\u8bb2\u8be6\u7ec6\u70b9\uff08\u697c\u4e0a\u7684$dalao$\u90fd\u5404\u6709\u7406\u89e3\uff0c\u4f46\u6211\u4e00\u4e2a\u90fd\u6ca1\u61c2\uff0c\u5012\u662f\u6700\u540e\u7684\u51e0\u7bc7\u8ba9\u6211\u6709\u4e9b\u601d\u8def\uff09\uff1b\u53e6\u4e00\u65b9\u9762\u662f\u60f3\u7ed9\u51fa\u53e6\u4e00\u79cd\u8bfb\u5165\u65b9\u6cd5\uff0c\u4ee5\u51cf\u8f7b\u5927\u5bb6\u7684\u82e6\u75db\u3002\n\n\u6b64\u9898\u662f\u6c42\u6700\u5c0f\u5272\uff0c\u7136\u800c\u6211\u521a\u5f00\u59cb\u5e76\u6ca1\u6709\u770b\u51fa\u6765\u3002\u9996\u5148\u8bb2\u8bb2\u5b83\u7684\u6b63\u786e\u6027\u5427\uff1a\uff08\u6784\u56fe\u5176\u4ed6\u9898\u89e3\u5df2\u7ecf\u5f88\u6e05\u695a\u4e86\uff0c\u5b9e\u5728\u4e0d\u660e\u767d\u53ef\u4ee5\u770b\u7a0b\u5e8f\uff09\n\n\u6211\u4eec\u770b\u5230\uff0c\u6784\u6210\u4e00\u4e2a\u5272\u7684\u70b9\u96c6\u6070\u597d\u662f{\u6e90\u70b9\u53ca\u6240\u6709A\uff08\u8981\u505a\u7684\u5b9e\u9a8c\uff09\u548ca\uff08\u8981\u7528\u7684\u5b9e\u9a8c\u5668\u6750\uff09}\u3001{B\uff08\u6240\u6709\u4e0d\u505a\u7684\u5b9e\u9a8c\uff09\u548cb\uff08\u4e0d\u7528\u7684\u5b9e\u9a8c\u5668\u6750\uff09\u53ca\u6c47\u70b9}\uff0c\u6b64\u5904\u5b9e\u9a8c\u8981\u4e0d\u8981\u505a\u662f\u4e3b\u89c2\u6761\u4ef6\uff08\u53ef\u4ee5\u505a\u4e5f\u53ef\u4ee5\u4e0d\u505a\uff09\uff0c\u800c\u5b9e\u9a8c\u5668\u6750\u7528\u4e0d\u7528\u662f\u6839\u636e\u8981\u505a\u7684\u5b9e\u9a8c\u51b3\u5b9a\u7684\u3002\n\n\u7531\u4e8e\u5b9e\u9a8c\u53ca\u5668\u6750\u4e4b\u95f4\u7684\u8fb9\u662f\u4e0d\u53ef\u5272\u7684\uff0c\u56e0\u6b64a\uff08\u8981\u7528\u7684\u5b9e\u9a8c\u5668\u6750\uff09\u4e00\u5b9a\u5728A\uff08\u8981\u505a\u7684\u5b9e\u9a8c\uff09\u7684\u70b9\u96c6\u4e2d\uff1b\u800cb\uff08\u4e0d\u8981\u7528\u7684\u5b9e\u9a8c\u5668\u6750\uff09\u4e0eA\uff08\u8981\u505a\u7684\u5b9e\u9a8c\uff09\u95f4\u5e76\u65e0\u8fde\u8fb9\uff0c\u56e0\u6b64\u65e0\u6cd5\u901a\u8fc7A\uff08\u8981\u505a\u7684\u5b9e\u9a8c\uff09\u4e0e\u6e90\u70b9\u8054\u901a\uff0c\u5c31\u53ea\u80fd\u4e0eB\uff08\u6240\u6709\u4e0d\u505a\u7684\u5b9e\u9a8c\uff09\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\u5566\uff01\n\n\u6211\u4eec\u8fd9\u6837\u7ed9\u8fb9\u8d4b\u503c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5272\uff0c\u7528\u6240\u6709\u5b9e\u9a8c\u7684\u5956\u91d1($w_A+w_B$)\u51cf\u53bb\u8be5\u5272($w_B+w_a$)\u5c31\u662f\u8be5\u65b9\u6848\u7684\u7b54\u6848($w_A-w_a$)\uff0c\u6700\u5927\u5316\u7b54\u6848\u5c31\u662f\u6700\u5c0f\u5316\u5272\u503c\u3002\n\n\u81f3\u4e8e\u6700\u540e\u6240\u505a\u5b9e\u9a8c\u548c\u6240\u7528\u4eea\u5668\uff0c\u76f4\u63a5\u8f93\u51fa{\u6e90\u70b9\u53ca\u6240\u6709A\uff08\u8981\u505a\u7684\u5b9e\u9a8c\uff09\u548ca\uff08\u8981\u7528\u7684\u5b9e\u9a8c\u5668\u6750\uff09}\uff08\u5176\u5b9e\u7b49\u4ef7\u4e8e\u8f93\u51fa\u8dd1\u6700\u5927\u6d41\u65f6\u6700\u540e\u4e0e\u6e90\u70b9\u8fde\u901a\u7684\u70b9\uff09\u4e2d\u7684\u70b9\uff08\u9664\u6e90\u70b9\uff09\u5c31\u597d\u4e86\u3002\n\n\u4ee5\u4e0b\u662f\u4ee3\u7801\uff08\u6709\u70b9\u538b\u884c\uff09\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int N=202;\nconst int M=1e4+4;\nconst int S=256;\nconst int INF=1e9+7;\n\nint n,m;\nstruct graph{//\u6700\u5927\u6d41\uff08\u6700\u5c0f\u5272\uff09\u6a21\u677f\n\tint cnt,l[N],x[M],e[M],f[M],d[N];\n\tint hd,tl,q[N],r[N];\n\tgraph(){cnt=1;}\n\tvoid pshe(int u,int v,int c){\n\t\t++cnt;x[cnt]=l[u];l[u]=cnt;e[cnt]=v;f[cnt]=c;\n\t\t++cnt;x[cnt]=l[v];l[v]=cnt;e[cnt]=u;f[cnt]=0;\n\t}\n\tbool bfs(){\n\t\tmemset(d,0,sizeof(d));\n\t\td[1]=1;hd=0;tl=1;q[0]=1;\n\t\tint nw,i;\n\t\twhile(hd!=tl){\n\t\t\tnw=q[hd];++hd;\n\t\t\tfor(i=l[nw];i;i=x[i])\n\t\t\t\tif(f[i]&&!d[e[i]]){\n\t\t\t\t\td[e[i]]=d[nw]+1;\n\t\t\t\t\tq[tl]=e[i];++tl;\n\t\t\t\t}\n\t\t}\n\t\treturn d[n+m+2];\n\t}\n\tint dfs(int v,int c){\n\t\tint i,t,w=0;\n\t\tif(v==n+m+2)return c;\n\t\tfor(i=r[v];i;i=x[i])\n\t\t\tif(f[i]&&d[e[i]]==d[v]+1){\n\t\t\t\tt=c-w;t=dfs(e[i],min(f[i],t));\n\t\t\t\tf[i]-=t;if(f[i])r[v]=i;f[i^1]+=t;\n\t\t\t\tw+=t;if(w==c)return c;\n\t\t\t}\n\t\tif(!w)d[v]=0;\n\t\treturn w;\n\t}\n\tint mxflw(){\n\t\tint ans=0;\n\t\twhile(bfs()){memcpy(r,l,sizeof(r));ans+=dfs(1,INF);}\n\t\treturn ans;\n\t}\n}g;\n\ninline int read(int &x){\n//\u8fd4\u56de\u503c\u4ee3\u8868\u672c\u884c\u662f\u5426\u8fd8\u6709\u6570\n//\u5176\u5b9e\u8be5\u8bfb\u5165\u7684\u9c81\u68d2\u6027\u8fd8\u4e0d\u591f\u597d\uff0c\u5982\u679c\u884c\u672b\u6709\u7a7a\u683c\u5c31GG\u4e86\n    char c;x=0;\n    while(c<'0'||c>'9')c=getchar();\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n\treturn c=='\\r'||c=='\\n'?0:1;\n}\n\nint main()\n{\n\tint i,t,w,sm=0;\n\tread(m);read(n);\n\tfor(i=1;i<=m;i++){\n\t\tt=read(w);g.pshe(1,i+1,w);sm+=w;\n\t\twhile(t){t=read(w);g.pshe(i+1,m+w+1,INF);}\n\t}\n\tfor(i=1;i<=n;i++){read(w);g.pshe(m+i+1,n+m+2,w);}\n\tsm-=g.mxflw();\n\tfor(i=1;i<=m;i++)if(g.d[i+1])printf(\"%d \",i);printf(\"\\n\");\n\tfor(i=1;i<=n;i++)if(g.d[m+i+1])printf(\"%d \",i);\n    printf(\"\\n%d\",sm);\n\treturn 0;\n}\n```\n\n\u65e2\u7136\u7a0b\u5e8f\u5df2\u7ecf\u901a\u8fc7\u6d4b\u8bd5\u4e86\uff0c\u5c31\u9700\u8981\u53cd\u601d\uff1a\u90fd\u5df2\u7ecf\u662f\u7f51\u7edc\u6d4124\u9898\u4e2d\u7684\u4e60\u9898\u4e86\uff08\u5c31\u662f\u7528\u7f51\u7edc\u6d41\u505a\uff0c\u6709\u5c11\u6570\u9898\u4f8b\u5916\uff09\uff0c\u4e3a\u4ec0\u4e48\u6211\u4e00\u5f00\u59cb\u60f3\u4e0d\u5230\u5462\uff1f\u4e00\u70b9\u539f\u56e0\u662f\u6211\u521a\u521a\u5b66\u7f51\u7edc\u6d41\uff0c\u8bb8\u591a\u5957\u8def\u8fd8\u4e0d\u77e5\u9053\uff1b\u66f4\u91cd\u8981\u7684\u662f\u6211\u4e00\u770b\u5230\u8d39\u7528\u5c31\u88ab\u5e26\u504f\uff0c\u8fd9\u662f\u4e00\u79cd\u6781\u4e0d\u53ef\u53d6\u7684\u601d\u8def\uff0c\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e2d\u8bb8\u591a\u9898\u770b\u5c71\u4e0d\u662f\u5c71\uff0c\u5982\u679c\u8fd9\u6837\u4e00\u5b9a\u4f1a\u5403\u4e8f\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u60f3\u5230\u8be5\u505a\u6cd5\uff0c\u975e\u543e\u4e4b\u529b\u6240\u80fd\u53ca\u4e5f\uff0c\u6211\u65e5\u540e\u5c3d\u529b\u5427\uff0c\u6709\u6b32\u6c42\u8005\u8bf7\u54a8\u8be2$dalao$\u3002",
        "postTime": 1547571120,
        "uid": 41425,
        "name": "wanghaoyu1008",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "~~\u770b\u89c1\u9898\u89e3\u6ca1\u6709\u6a21\u62df\u9000\u706b\u7684\u65b9\u6cd5\u679c\u65ad\u6765\u4e00\u7bc7~~\n\n\u7f51\u7edc\u6d41\u7684\u9898\u7b2c\u4e00\u53cd\u5e94\u770b\u6a21\u62df\u9000\u706b\u53ef\u4e0d\u53ef\u884c\n\n\u53d1\u73b0\u6570\u636e\u8303\u56f4\u624d50\uff0c\u90a3\u4e48\u5c31\u679c\u65ad\u4e0a\n\n\u7136\u540e\u5c31\u5f00\u59cb\u5feb\u4e50\u8c03\u53c2\u6570\n\n\u90e8\u5206\u6210\u679c\u5982\u4e0b\n![\u6a21\u62df\u9000\u706b](https://img-blog.csdnimg.cn/20190927110703248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzA2MTM0MA==,size_16,color_FFFFFF,t_70)\n\nAC\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\ntypedef long long ll;\nusing namespace std;\nconst double dT = 0.997;\nconst int MAXN = 55;\nint m, n;\nint tim[MAXN];\nint need[MAXN][MAXN], cnt[MAXN];\nint pay[MAXN], cost[MAXN];\nint vis[MAXN], ansvis[MAXN];//\u8bb0\u5f55\u5f53\u524d\u53d6\u54ea\u4e9b\u3001\u7b54\u6848\u53d6\u54ea\u4e9b\nint ans = 0;\n\nchar tools[10000];\nvoid readline(int id)\n{\n    scanf(\"%d\", &pay[id]);\n    memset(tools,0,sizeof(tools));\n    cin.getline(tools,10000);\n    int ulen=0,tool;\n    while(sscanf(tools+ulen,\"%d\",&tool)==1)\n    {\n        need[id][++cnt[id]] = tool;\n        if(tool==0) ulen++;\n        else\n        {\n            while(tool)\n            {\n                tool/=10;\n                ulen++;\n            }\n        }\n        ulen++;\n    }\n}\n\n//\u8ba1\u7b97\u5f53\u524d\u7684\u82b1\u8d39\nint calc()\n{\n    int ret = 0;\n    memset(tim, 0, sizeof(tim));\n    for(int i = 1; i <= m; i++)\n    {\n        if(!vis[i]) continue;\n        ret += pay[i];\n        for(int j = 1; j <= cnt[i]; j++)\n        {\n            int tool = need[i][j];\n            tim[tool]++;\n        }\n    }\n    for(int i = 1; i <= n; i++) if(tim[i]) ret -= cost[i];\n    return ret;\n}\n\nvoid SA()\n{\n    double T = 1e8;\n    while(T > 1e-12)\n    {\n        int id = rand() % m + 1;\n        if(vis[id])\n        {\n            vis[id] = 0;\n            int dans = calc();\n            if(dans > ans)\n            {\n                ans = dans;\n                for(int i = 1; i <= m; i++) ansvis[i] = vis[i];\n            }\n            else if(exp((1.0*(dans-ans))/T) * RAND_MAX > rand()) {}\n            else vis[id] = 1;\n        }\n        else\n        {\n            vis[id] = 1;\n            int dans = calc();\n            if(dans > ans)\n            {\n                ans = dans;\n                for(int i = 1; i <= m; i++) ansvis[i] = vis[i];\n            }\n            else if(exp((1.0*(dans-ans))/T) * RAND_MAX > rand()) {}\n            else vis[id] = 0;\n        }\n        T *= dT;\n    }\n}\n\nvoid output()\n{\n    memset(tim, 0, sizeof(tim));\n    for(int i = 1; i <= m; i++)\n    {\n        if(ansvis[i])\n        {\n            printf(\"%d \", i);\n            for(int j = 1; j <= cnt[i]; j++) tim[need[i][j]]++;\n        }\n    }\n    putchar(10);\n    for(int i = 1; i <= n; i++) if(tim[i]) printf(\"%d \", i);\n    putchar(10);\n    printf(\"%d\\n\", ans);\n}\n\nint main()\n{\n    srand(unsigned(time(0)));\n    scanf(\"%d%d\", &m, &n);\n    for(int i = 1; i <= m; i++) readline(i);\n    for(int i = 1; i <= n; i++) scanf(\"%d\", &cost[i]);\n//    for(int i = 1; i <= m; i++)\n//    {\n//        printf(\"#%d \", cnt[i]);\n//        for(int j = 1; j <= cnt[i]; j++) printf(\"%d \", need[i][j]);\n//        putchar(10);\n//    }\n    for(int i = 1; i <= 200; i++) SA();\n    output();\n    \n    return 0;\n}\n```",
        "postTime": 1569554057,
        "uid": 188886,
        "name": "\u90ae\u5dee\u5c06\u519b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "## \u601d\u8def\n\n> \u95ee\u9898\u6a21\u578b\uff1a\u6700\u5927\u6743\u95ed\u5408\u56fe\n>\n> \u8f6c\u5316\u6a21\u578b\uff1a\u7f51\u7edc\u6700\u5c0f\u5272\n\n\u8fd9\u9053\u9898\u662f\u7f51\u7edc\u6d41\u4e2d\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u6a21\u578b\uff1a**\u6700\u5927\u6743\u95ed\u5408\u56fe\u8f6c\u6700\u5927\u6d41**\n\n\u5efa\u7acb\u8d85\u7ea7\u6e90\u70b9$S$\u548c\u8d85\u7ea7\u6c47\u70b9$T$\uff0c\u7136\u540e\u6bcf\u4e2a\u5b9e\u9a8c\u8fde\u4e00\u6761\u4ece$S$\u5230\u5b9e\u9a8c\uff0c\u6d41\u91cf\u4e3a\u5b9e\u9a8c\u6536\u76ca\u7684\u8fb9\uff0c\u6bcf\u4e2a\u4eea\u5668\u8fde\u4e00\u6761\u4ece\u4eea\u5668\u5230$T$, \u6d41\u91cf\u4e3a\u4eea\u5668\u8017\u8d39\u7684\u8fb9\uff0c\u7136\u540e\u9700\u8981\u7684\u4eea\u5668\u5c31\u8fde\u4e00\u6761\u4ece\u5b9e\u9a8c\u5230\u4eea\u5668\u6d41\u91cf\u4e3a$inf$\uff08\u65e0\u7a77\u5927\uff09\u7684\u8fb9\uff0c\u56e0\u4e3a\u5b9e\u9a8c\u5230\u4eea\u5668\u7684\u8fb9\u7684\u6d41\u91cf\u4e3a\u6b63\u65e0\u7a77\uff0c\u6240\u4ee5\u6700\u5c0f\u5272\u4e00\u5b9a\u4e0d\u4f1a\u5728\u4e0a\u9762\uff0c\u6839\u636e\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\uff0c\u6700\u5927\u6d41\u5c31\u7b49\u4e8e\u6700\u5c0f\u5272\uff0c\u6211\u4eec\u6309\u7167\u4ee5\u4e0a\u6240\u8bf4\u5efa\u56fe\uff0c\u6c42\u51fa\u6700\u5927\u6d41\uff0c\u4e4b\u540e\u7528\u5b9e\u9a8c\u5229\u76ca\u7684\u603b\u548c\u51cf\u53bb\u6700\u5927\u6d41\uff0c\u5f97\u51fa\u7684\u5c31\u662f\u6700\u5927\u51c0\u6536\u76ca\n\n\u6700\u5927\u6d41\u7b97\u6cd5\u6211\u7528\u7684\u662f$\\text{Dinic}$\u7b97\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u6837\u65b9\u4fbf\u8f93\u51fa\uff0c\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u5982\u679c$d[i]$\u4e0d\u4e3a$0$\u5c31\u8bf4\u660e\u5b83\u4e00\u5b9a\u7528\u8fc7\uff0c\u8fd9\u6837\u5c31\u80fd\u65b9\u4fbf\u8f93\u51fa\u5566~\n\n## \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nconst int A = 1e5 + 11;\nconst int B = 1e6 + 11;\nconst int mod = 1e9 + 7;\nconst int inf = 0x3f3f3f3f;\n\ninline int read() {\n\tchar c = getchar(); int x = 0, f = 1;\n\tfor ( ; !isdigit(c); c = getchar()) if(c == '-') f = -1;\n\tfor ( ; isdigit(c); c = getchar()) x = x * 10 + (c ^ 48);\n\treturn x * f;\n}\n\nint m, n, cnt, opt, S, T, ans, head[A], d[A], q[A];\nstruct node { int from, to, nxt, val; } e[A];\n\ninline void add(int from, int to, int val) {\n\te[cnt].to = to;\n\te[cnt].val = val;\n\te[cnt].nxt = head[from];\n\thead[from] = cnt++;\n}\n\ninline bool makelevel(int s, int t) {\n\tmemset(d, 0, sizeof(d));\n\tmemset(q, 0, sizeof(q));\n\tint l = 0, r = 0;\n\td[s] = 1; q[r++] = s;\n\twhile (l < r) {\n\t\tint x = q[l++];\n\t\tif (x == t) return true;\n\t\tfor (int i = head[x]; i != -1; i = e[i].nxt) {\n\t\t\tint to = e[i].to;\n\t\t\tif (d[to] == 0 && e[i].val > 0) {\n\t\t\t\td[to] = d[x] + 1;\n\t\t\t\tq[r++] = e[i].to;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nint dfs(int x, int flow, int t) {\n\tif (x == t) return flow;\n\tint sum = 0;\n\tfor (int i = head[x]; i != -1; i = e[i].nxt) {\n\t\tint to = e[i].to;\n\t\tif (d[to] == d[x] + 1 && e[i].val > 0) {\n\t\t\tint tmp = dfs(to, min(flow - sum, e[i].val), t);\n\t\t\te[i].val -= tmp, e[i ^ 1].val += tmp;\n\t\t\tsum += tmp;\n\t\t\tif (sum == flow) return sum;\n\t\t}\n\t}\n\treturn sum;\n}\n\nint main() {\n\tmemset(head, -1, sizeof(head));\n\tm = read(), n = read();\n\tint S = 0, T = 555;\n\tint w, tot = 0, x;\n\tfor (int i = 1; i <= m; i++) {\n\t\tscanf(\"%d\", &w), tot += w;\n\t\tadd(S, i, w), add(i, S, 0);\n\t\twhile (getchar() == ' ') {\n\t\t\tscanf(\"%d\", &x);\n\t\t\tadd(i, x + m, inf);\n\t\t\tadd(x + m, i, 0);\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++) {\n\t\tx = read();\n\t\tadd(i + m, T, x), add(T, i + m, 0);\n\t}\n\twhile (makelevel(S, T)) ans += dfs(S, inf, T);\n\tans = tot - ans;\n\tfor (int i = 1; i <= m; i++) if (d[i]) cout << i << ' '; puts(\"\");\n\tfor (int i = 1; i <= n; i++) if (d[i + m]) cout << i << ' '; puts(\"\");\n\tcout << ans << '\\n';\n\treturn 0;\n}\n```",
        "postTime": 1581734514,
        "uid": 198323,
        "name": "loceaner",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u6700\u5927\u6743\u95ed\u5408\u56fe\u6a21\u578b\u9898\uff0c\u6700\u5927\u6d41\u6700\u5c0f\u5272\u3002\u4ece\u8d77\u70b9\u5f80\u6bcf\u4e2a\u6743\u503c\u4e3a\u6b63\u7684\u70b9\u5efa\u7acb\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u70b9\u6743\u503c\u3002\u6bcf\u4e2a\u6743\u503c\u4e3a\u8d1f\u7684\u70b9\u5f80\u7ec8\u70b9\u5efa\u7acb\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u6743\u503c\u7684\u7edd\u5bf9\u503c\u3002\u5982\u679c\u9009A\u5c31\u5fc5\u987b\u9009B \u5219\u5c31\u4eceA\u5efa\u7acb\u4e00\u6761\u5f80B\u7684\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u6b63\u65e0\u7a77\u3002\u7136\u540e\u6b63\u6743\u503c\u52a0\u8d77\u6765\u51cf\u53bb\u6700\u5927\u6d41\u5c31\u662f\u80fd\u9009\u51fa\u6765\u6700\u5927\u6743\u95ed\u5408\u56fe\u6240\u6709\u70b9\u52a0\u8d77\u6765\u7684\u503c\u3002\u6700\u5927\u6743\u95ed\u5408\u56fe\u7684\u70b9\u5c31\u662f\u4ece\u8d77\u70b9\u5f00\u59cb\u5e7f\u641c\uff0c\u6743\u503c\u4e3a0\u7684\u70b9\u4e0d\u8d70\uff0c\u80fd\u8d70\u5230\u7684\u70b9\u5c31\u662f\u88ab\u9009\u4e2d\u7684\u70b9\u3002dinic\u6700\u540e\u4e00\u6b21bfs\u7684d\u6570\u7ec4\u6b63\u597d\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u8fd9\u4e2a\u6761\u4ef6\u3002\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#define inf 0x3fffffff\nusing namespace std;\nconst int maxn=555;\nint first[maxn],sign,cur[maxn];\nint s,t,d[maxn];\nstruct node\n{\n    int to,w,next;\n} edge[maxn*50];\nvoid creat()\n{\n    memset(first,-1,sizeof(first));\n    sign=0;\n}\nvoid add_edge(int u,int v,int w)\n{\n    edge[sign].to=v;\n    edge[sign].w=w;\n    edge[sign].next=first[u];\n    first[u]=sign++;\n  \n    edge[sign].to=u;\n    edge[sign].w=0;\n    edge[sign].next=first[v];\n    first[v]=sign++;\n}\nint bfs()\n{\n    queue<int>q;\n    memset(d,0,sizeof(d));\n    d[s]=1;\n    q.push(s);\n    while(!q.empty())\n    {\n        int top=q.front();\n        q.pop();\n        for(int i=first[top]; ~i; i=edge[i].next)\n        {\n            int to=edge[i].to;\n            if(edge[i].w>0&&d[to]==0)\n            {\n                d[to]=d[top]+1;\n                if(to==t)\n                    return 1;\n                q.push(to);\n            }\n        }\n    }\n    return d[t]!=0;\n}\nint dfs(int top,int flow)\n{\n    if(top==t)\n        return flow;\n    int ans=0,x=0;\n    for(int i=cur[top]; ~i; i=edge[i].next)\n    {\n        int to=edge[i].to;\n        if(edge[i].w>0&&d[to]==d[top]+1)\n        {\n            x=dfs(to,min(flow-ans,edge[i].w));\n            edge[i].w-=x;\n            edge[i^1].w+=x;\n            if(edge[i].w)\n                cur[top] = i;\n            ans+=x;\n            if(ans==flow)\n                return flow;\n        }\n    }\n    if(ans==0)\n        d[top]=0;\n    return ans;\n}\nint dinic(int n)\n{\n    int ans=0;\n    while(bfs())\n    {\n        for(int i=0; i<=n; i++)\n            cur[i]=first[i];\n        ans+=dfs(s,inf);\n    }\n    return ans;\n}\n \nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&m,&n);\n    creat();\n    s=0,t=n+m+1;\n    int sum=0;\n    for(int i=1; i<=m; i++)\n    {\n        int x;\n        char c;\n        scanf(\"%d\",&x);\n        sum+=x;\n        add_edge(s,n+i,x);\n        while(1)\n        {\n            scanf(\"%d%c\",&x,&c);\n            add_edge(n+i,x,inf);\n            if(c=='\\n'||c=='\\r')break;\n        }\n    }\n    for(int i=1; i<=n; i++)\n    {\n        int w;\n        scanf(\"%d\",&w);\n        add_edge(i,t,w);\n    }\n    sum-=dinic(t);\n  \n    for(int i=1; i<=m; i++)\n    {\n        if(d[i+n])\n            printf(\"%d \",i);\n    }\n    printf(\"\\n\");\n    for(int i=1; i<=n; i++)\n        if(d[i])\n            printf(\"%d \",i);\n    printf(\"\\n\");\n    printf(\"%d\\n\",sum);\n    return 0;\n}\n```",
        "postTime": 1525004179,
        "uid": 79263,
        "name": "\u5df2\u6ce8\u9500!$@NM@&7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u4ed4\u7ec6\u628a\u63e1\u4e00\u4e0b\u9898\u610f, \u4e00\u4e2a\u4eea\u5668\u53ef\u4ee5\u7528\u4e8e\u591a\u4e2a\u5b9e\u9a8c, \u4e0d\u7136\u5c31\u662f\u8d39\u7528\u6d41(\u96be\u9053\u4e0d\u662f\u76f4\u63a5\u8d2a\u5fc3\u5417?)\n\n\u5927\u81f4\u601d\u8def:\n\n\u5047\u8bbe\u5148\u628a\u6240\u6709\u7684\u8d5e\u52a9\u5168\u90e8\u62ff\u5230, \u5373\u6ca1\u6709\u4efb\u4f55\u4eea\u5668\u8d39\u7528\u7684\u6536\u76ca.\n\n\u7136\u540e\u518d\u8ba1\u7b97\u51fa\u4eea\u5668\u7684\u8d39\u7528\u51cf\u53bb, \u56e0\u4e3a\u6709\u4e9b\u5b9e\u9a8c\u53ef\u80fd\u4e8f\u94b1, \u4e0d\u80fd\u505a,\n\n\u81ea\u7136\u5c31\u5f97\u4e0d\u5230\u8d5e\u52a9\u5546\u7684\u62a5\u916c\u54af, \u4e5f\u8981\u51cf\u53bb. \u6574\u7406\u4e00\u4e0b, \u53d1\u73b0\u53ef\u4ee5\u8f6c\u5316\u4e3a\u7f51\u7edc**\u6700\u5c0f\u5272**.\n\n\u6784\u56fe:\n\n\u6e90\u70b9 (\u5b9e\u9a8c\u6536\u76ca) \u5b9e\u9a8c (\u65e0\u7a77\u5927) \u4eea\u5668 (\u5b9e\u9a8c\u8d39\u7528) \u6c47\u70b9\n\n\u8dd1\u4e00\u904d\u6700\u5927\u6d41, \u4e00\u51cf\u5c31\u662f\u7b54\u6848!\n\n\n**PS** \u672c\u9898\u771f\u6b63\u5751\u70b9\u5728\u4e8e\u5982\u4f55\u8bfb\u5165:\n\n\u56e0\u4e3a\u8f93\u5165\u6570\u636e\u4e0d\u6807\u51c6, \u6211\u4eec\u8981\u8ba9\u81ea\u5df1\u7684\u7a0b\u5e8f\u9002\u5e94\u6027\u5f3a\n\n\u5176\u5b9e\u5c31\u662f\u9047\u5230'\\n'\u5c31\u8981\u8bfb\u4e0b\u4e00\u884c, \u641e\u4e0d\u597d\u75af\u72c2TLE\u76f4\u63a5\u7206\u96f6\n\n(\u4e0a\u7f51\u641c\u4e86\u4e00\u4e0b, \u60ca\u5947\u5730\u53d1\u73b0\u56de\u8f66\u548c\u6362\u884c\u5c45\u7136\u4e0d\u4e00\u6837 0x0A, 0x0D)\n\n\u6240\u4ee5\u6211\u4eec\u8981\u6539\u826f\u4e00\u4e0b\u6211\u4eec\u7684\u8bfb\u5165\u4f18\u5316, \u6b63\u786e\u5730\u5224\u65ad\u7ed3\u675f\n\n\n```cpp\n#include <bits/stdc++.h> \nusing namespace std;\n\ninline bool EXrnum(int &res) //\u9047\u5230'\\n'\u8df3\u51fa\u7684\u8bfb\u5165\u4f18\u5316 \n{\n    res = 0; char ch = getchar();\n    while (!isdigit(ch)) { if (ch == '\\n') return false; ch = getchar(); }\n    while (isdigit(ch)) { res = res * 10 + ch - '0'; ch = getchar(); }\n    if (ch == '\\n') return false; else return true;\n}\n\nconst int N = 129, oo = 0x3f3f3f3f;\nstruct Edge{ int to, cap, rev; };\nstruct NetworkFlows\n{\n    int m, n, Source, Sink, ans;\n    int level[N], current[N];\n    vector<Edge> G[N];\n    \n    inline void addEdge(int u, int v, int c)\n    {\n        int Gus = G[u].size(), Gvs = G[v].size();\n        G[u].push_back((Edge){v, c, Gvs});\n        G[v].push_back((Edge){u, 0, Gus});\n    }\n    void Build()\n    {\n        Source = 101, Sink = 102;\n        scanf(\"%d%d\", &m, &n);\n        for (int i = 1, x; i <= m; i++)\n        {\n            scanf(\"%d\", &x); ans += x; //\u5148\u628a\u6240\u6709\u5b9e\u9a8c\u7684\u6536\u76ca\u52a0\u8d77\u6765 \n            addEdge(Source, i, x); //\u6e90\u70b9\u4e0e\u5b9e\u9a8c\u8fde\u8fb9(\u8fb9\u6743\u4e3a\u5b9e\u9a8c\u6536\u76ca) \n            while (EXrnum(x)) addEdge(i, x + 50, oo);\n            addEdge(i, x + 50, oo); //\u5b9e\u9a8c\u4e0e\u5339\u914d\u4eea\u5668\u8fde\u65e0\u7a77\u5927\u8fb9 \n        }\n        for (int i = 1, x; i <= n; i++)\n        {\n            scanf(\"%d\", &x);\n            addEdge(i + 50, Sink, x); //\u4eea\u5668\u4e0e\u6c47\u70b9\u8fde\u8fb9(\u8fb9\u6743\u4e3aabs(\u4eea\u5668\u8d39\u7528)) \n        }\n    }\n    bool BFS()\n    {\n        memset(current, 0, sizeof (current));\n        memset(level, -1, sizeof (level));\n        queue<int> q;\n        q.push(Source), level[Source] = 0;\n        \n        int u, v;\n        while (!q.empty())\n        {\n            u = q.front(), q.pop();\n            for (int i = 0; i < (int)G[u].size(); i++)\n            {\n                v = G[u][i].to;\n                if (G[u][i].cap > 0 && level[v] == -1)\n                {\n                    level[v] = level[u] + 1;\n                    q.push(v);\n                }\n            }\n        }\n        return ~level[Sink];\n    }\n    int DFS(int V, int f)\n    {\n        if (V == Sink) return f;\n        for (int &i = current[V]; i < (int)G[V].size(); i++)\n        {\n            Edge &E = G[V][i];\n            if (E.cap > 0 && level[E.to] > level[V])\n            {\n                int delta = DFS(E.to, min(E.cap, f));\n                if (delta > 0)\n                {\n                    E.cap -= delta;\n                    G[E.to][E.rev].cap += delta;\n                    return delta;\n                }\n            }\n        } \n        return 0;\n    }\n    int max_flow() //\u6700\u5927\u6d41\u5c31\u662f\u6700\u5c0f\u5272, \u5c31\u662f(\u4e8f\u94b1\u7684\u5b9e\u9a8c\u6536\u76ca + \u8d2d\u4e70\u4eea\u5668\u7684\u8d39\u7528) \n    {\n        int maxFlow = 0, delta; \n        while (BFS())\n        {\n            if ((delta = DFS(Source, oo)) > 0) maxFlow += delta;\n        }\n        return maxFlow;\n    }\n    void Work()\n    {\n        ans -= max_flow(); //\u51cf\u53bb\u540e\u5c31\u662f\u6700\u540e\u7684\u6700\u5927\u6536\u76ca\n        for (int i = 1; i <= m; i++) //\u6700\u540e\u4e00\u6b21BFS\u5efa\u7acb\u5206\u5c42\u56fe\u6709\u7b49\u7ea7\u7684\u70b9\u5c31\u662f\u6240\u6c42 \n            if (level[i] != -1) printf(\"%d \", i); \n        printf(\"\\n\"); \n        for (int i = 1; i <= n; i++)\n            if (level[i+50] != -1) printf(\"%d \", i);\n        printf(\"\\n%d\\n\", ans); \n    }\n} NF;\n\nint main()\n{\n    NF.Build();\n    NF.Work();\n    return 0;\n}\n/***************\nINPUT:\n4 5     \n10 2 3   \n12 1   \n13 4   \n10 4 5  \n6 7 8 9 9  \nOUTPUT():\n2 3 4 (\u5b9e\u9a8c\u7f16\u53f7) \n1 4 5 (\u4eea\u5668\u7f16\u53f7) \n11      (\u51c0\u6536\u76ca)\n***************/\n```",
        "postTime": 1512909835,
        "uid": 45660,
        "name": "yxr811740686",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "**ISAP\u6700\u5927\u6d41**\n\n## \u601d\u8def\n\n\u8fd9\u9053\u9898\u9700\u8981\u6536\u76ca\u6700\u5927\uff0c\u4e5f\u5c31\u662f\u6c42\u51fa\u6700\u5c0f\u5272\uff0c\u5e94\u4f7f\u7528\u6700\u5927\u6d41\u6c42\u89e3\u3002\n\n## \u8bfb\u5165\n\n\u5bf9\u4e8e\u4e00\u6574\u884c\u4e0d\u77e5\u9053\u6709\u591a\u5c11\u4e2a\u6570\u636e\uff0c\u5e76\u4e14\u7ed3\u5c3e\u8fd8\u662f`\\r\\n`\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528C++\u7684`stringstream`\uff0c\u628a\u6574\u884c\u7528`getline`\u8bfb\u8fdb\u4e00\u4e2a`string`\uff0c\u7136\u540e\u653e\u5165`stringstream`\uff0c\u4ece\u91cc\u9762\u8bfb\u53d6\u6570\u636e\n\n## \u5efa\u56fe\n\n* \u6211\u4eec\u8bbe$0$\u4e3a\u8d85\u7ea7\u6e90\u70b9\uff0c$n + m + 1$\u4e3a\u8d85\u7ea7\u6c47\u70b9\uff0c\u6bcf\u4e2a\u5b9e\u9a8c\u5bf9\u5e94$[1, m]$\uff0c\u6bcf\u4e2a\u4eea\u5668\u5bf9\u5e94$[m + 1, n]$\n\n* \u5bf9\u4e8e$\\forall i \\in [1, m]$\n\n  * \u4ece$0$\u5411$i$\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u8d39\u7528\n  \n  * \u5bf9\u4e8e$\\forall j \\in R_i$\uff0c\u4ece$i$\u5411$m + j$\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a$\\infty$\n  \n* \u5bf9\u4e8e$\\forall j \\in [1, n]$\n\n  * \u4ece$j + m$\u5411$n + m + 1$\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u8d39\u7528\n  \n## \u8f93\u51fa\n\n\u663e\u7136\uff0c\u6700\u7ec8\u8f93\u51fa\u7684\u90a3\u4e2a\u6570\u662f\u603b\u8d39\u7528\u51cf\u6700\u5927\u6d41\u3002\n\n\u90a3\u4e48\u5982\u4f55\u8f93\u51fa\u65b9\u6848\uff1f\n\n\u6839\u636eISAP\u7684\u5206\u5c42\u539f\u7406\uff0c\u6211\u4eec\u628a`gap`\u4f18\u5316\u53bb\u6389~~\uff08\u8c8c\u4f3c\u8fd9\u5c31\u6210\u666e\u901a\u7684SAP\u4e86\uff09~~\uff0c\u4f7f\u5f97\u6700\u7ec8\u6d41\u5b8c\u7684\u6df1\u5ea6\u533a\u5206\u66f4\u660e\u663e\u3002\u8fd9\u6837\uff0c\u8dd1\u5b8c\u4e00\u904d\u6700\u5927\u6d41\u540e\uff0c\u88ab\u5272\u6389\u7684\u70b9\u6df1\u5ea6\u8d8b\u8fd1\u4e8e$0$\uff0c\u6ca1\u88ab\u5272\u6389\u7684\u70b9\u6df1\u5ea6\u8d8b\u8fd1\u4e8e$n + m$\uff0c\u90a3\u4e48\u6211\u4eec\u53d6\u4e2d\u95f4\u503c\u4f5c\u4e3a\u5206\u754c\u7ebf\uff0c\u6df1\u5ea6\u5927\u4e8e\u8fd9\u4e2a\u503c\u7684\u70b9\u5c31\u662f\u6211\u4eec\u7559\u4e0b\u6765\u7684\u70b9\uff0c\u8f93\u51fa\u5373\u53ef\n\n## \u7a0b\u5e8f\u5b9e\u73b0\n\n```cpp\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <queue>\n#include <cstring>\n#include <algorithm>\n\nusing namespace std;\n\nconst int MAXN = 55;\nconst int INF = 0x3f3f3f3f;\n\nint n, m;\n\nstruct Edge{\n    int to, val;\n    Edge *next, *ops;\n    Edge(int to, int val, Edge *next): to(to), val(val), next(next){}\n};\n\nEdge *head[MAXN << 1];\n\ninline void AddEdge(int u, int v, int w) {\n    head[u] = new Edge(v, w, head[u]);\n    head[v] = new Edge(u, 0, head[v]);\n    head[u]->ops = head[v]; head[v]->ops = head[u];\n}\n\nint s, t, dep[MAXN << 1], /*gap[MAXN << 1], */res;\n\nvoid Bfs() {\n    memset(dep, -1, sizeof(dep));\n    //memset(gap, 0, sizeof(gap));\n    dep[t] = 0; //gap[dep[t]]++;\n    queue<int> q; q.push(t);\n    while (!q.empty()) {\n        int u = q.front(); q.pop();\n        for (Edge *e = head[u]; e; e = e->next) {\n            int v = e->to;\n            if (dep[v] != -1) continue;\n            dep[v] = dep[u] + 1;\n            //gap[dep[v]]++;\n            q.push(v);\n        }\n    }\n}\n\nint Dfs(int u, int flow) {\n    if (u == t) {\n        res += flow;\n        return flow;\n    }\n    int used = 0;\n    for (Edge *e = head[u]; e; e = e->next) {\n        int v = e->to;\n        if (e->val && dep[v] == dep[u] - 1) {\n            int mi = Dfs(v, std :: min(e->val, flow - used));\n            if (mi) {\n                e->val -= mi;\n                e->ops->val += mi;\n                used += mi;\n            }\n            if (used == flow) return used;\n        }\n    }\n    //gap[dep[u]]--;\n    //if (gap[dep[u]] == 0) dep[s] = n + m + 3;\n    dep[u]++;\n    //gap[dep[u]]++;\n    return used;\n}\n\nvoid Work() {\n    res = 0;\n    Bfs();\n    while (dep[s] <= n + m + 2) Dfs(s, INF);\n}\n\nint main() {\n    cin >> m >> n;\n    s = 0; t = n + m + 1;\n    int tot = 0;\n    string str;\n    stringstream ss;\n    for (int i = 1; i <= m; i++) {\n        int x;\n        cin >> x;\n        tot += x;\n        AddEdge(s, i, x);\n        ss.clear();\n        getline(cin, str);\n        ss << str;\n        while (ss >> x) AddEdge(i, x + m, INF);\n    }\n    for (int i = 1; i <= n; i++) {\n        int x;\n        cin >> x;\n        AddEdge(i + m, t, x);\n    }\n    Work();\n    /*for (int i = 1; i <= m; i++) cout << dep[i] << ' ';\n    cout << endl;\n    for (int i = m + 1; i <= n + m; i++) cout << dep[i] << ' ';\n    cout << endl;*/\n    for (int i = 1; i <= m; i++) {\n        if (dep[i] > n + m >> 1) cout << i << ' ';\n    }\n    cout << endl;\n    for (int i = m + 1; i <= n + m; i++) {\n        if (dep[i] > n + m >> 1) cout << i - m << ' ';\n    }\n    cout << endl;\n    cout << tot - res << endl;\n    return 0;\n}\n```\n\n*PS\uff1a\u867d\u7136\u672c\u4ee3\u7801\u53ef\u4ee5AC\u6b64\u9898\uff0c\u4f46\u662f\u7531\u4e8e\u6700\u540e\u8f93\u51fa\u65b9\u6848\u7684\u65b9\u6cd5\u6709\u4e00\u70b9\u70b9\u7384\u5b66\u6210\u5206\uff0c\u6240\u4ee5\u5982\u679c\u9488\u5bf9\u8fd9\u4efd\u4ee3\u7801\u523b\u610f\u5236\u9020\u6bd2\u7624\u6570\u636e\uff0c\u6709\u53ef\u80fd\u662f\u53ef\u4ee5HACK\u6389\u7684*",
        "postTime": 1555164879,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "# P2762 \u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\n\n\u9898\u76ee\u63cf\u8ff0\nW \u6559\u6388\u6b63\u5728\u4e3a\u56fd\u5bb6\u822a\u5929\u4e2d\u5fc3\u8ba1\u5212\u4e00\u7cfb\u5217\u7684\u592a\u7a7a\u98de\u884c\u3002\u6bcf\u6b21\u592a\u7a7a\u98de\u884c\u53ef\u8fdb\u884c\u4e00\u7cfb\u5217\u5546\u4e1a\u6027\u5b9e\u9a8c\u800c\u83b7\u53d6\u5229\u6da6\u3002\u73b0\u5df2\u786e\u5b9a\u4e86\u4e00\u4e2a\u53ef\u4f9b\u9009\u62e9\u7684\u5b9e\u9a8c\u96c6\u5408E={E1\uff0cE2\uff0c\u2026\uff0cEm}\uff0c\u548c\u8fdb\u884c\u8fd9\u4e9b\u5b9e\u9a8c\u9700\u8981\u4f7f\u7528\u7684\u5168\u90e8\u4eea\u5668\u7684\u96c6\u5408I={I1\uff0cI2\uff0c\u2026In}\u3002\u5b9e\u9a8cEj\u9700\u8981\u7528\u5230\u7684\u4eea\u5668\u662fI\u7684\u5b50\u96c6Rj\u00cdI\u3002\u914d\u7f6e\u4eea\u5668Ik\u7684\u8d39\u7528\u4e3ack\u7f8e\u5143\u3002\u5b9e\u9a8cEj\u7684\u8d5e\u52a9\u5546\u5df2\u540c\u610f\u4e3a\u8be5\u5b9e\u9a8c\u7ed3\u679c\u652f\u4ed8pj\u7f8e\u5143\u3002W\u6559\u6388\u7684\u4efb\u52a1\u662f\u627e\u51fa\u4e00\u4e2a\u6709\u6548\u7b97\u6cd5\uff0c\u786e\u5b9a\u5728\u4e00\u6b21\u592a\u7a7a\u98de\u884c\u4e2d\u8981\u8fdb\u884c\u54ea\u4e9b\u5b9e\u9a8c\u5e76\u56e0\u6b64\u800c\u914d\u7f6e\u54ea\u4e9b\u4eea\u5668\u624d\u80fd\u4f7f\u592a\u7a7a\u98de\u884c\u7684\u51c0\u6536\u76ca\u6700\u5927\u3002\u8fd9\u91cc\u51c0\u6536\u76ca\u662f\u6307\u8fdb\u884c\u5b9e\u9a8c\u6240\u83b7\u5f97\u7684\u5168\u90e8\u6536\u5165\u4e0e\u914d\u7f6e\u4eea\u5668\u7684\u5168\u90e8\u8d39\u7528\u7684\u5dee\u989d\u3002\n\n\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5b9e\u9a8c\u548c\u4eea\u5668\u914d\u7f6e\u60c5\u51b5\uff0c\u7f16\u7a0b\u627e\u51fa\u51c0\u6536\u76ca\u6700\u5927\u7684\u8bd5\u9a8c\u8ba1\u5212\u3002\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c1\u884c\u67092 \u4e2a\u6b63\u6574\u6570m\u548cn\u3002m\u662f\u5b9e\u9a8c\u6570\uff0cn\u662f\u4eea\u5668\u6570\u3002\u63a5\u4e0b\u6765\u7684m \u884c\uff0c\u6bcf\u884c\u662f\u4e00\u4e2a\u5b9e\u9a8c\u7684\u6709\u5173\u6570\u636e\u3002\u7b2c\u4e00\u4e2a\u6570\u8d5e\u52a9\u5546\u540c\u610f\u652f\u4ed8\u8be5\u5b9e\u9a8c\u7684\u8d39\u7528\uff1b\u63a5\u7740\u662f\u8be5\u5b9e\u9a8c\u9700\u8981\u7528\u5230\u7684\u82e5\u5e72\u4eea\u5668\u7684\u7f16\u53f7\u3002\u6700\u540e\u4e00\u884c\u7684n\u4e2a\u6570\u662f\u914d\u7f6e\u6bcf\u4e2a\u4eea\u5668\u7684\u8d39\u7528\u3002\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u7b2c1 \u884c\u662f\u5b9e\u9a8c\u7f16\u53f7\uff1b\u7b2c2\u884c\u662f\u4eea\u5668\u7f16\u53f7\uff1b\u6700\u540e\u4e00\u884c\u662f\u51c0\u6536\u76ca\u3002\n\n---\n\n\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff1a\u6e90\u70b9\u8fde\u6b63\u70b9\u6743\uff08\u5373\u5b9e\u9a8c\u6536\u76ca\uff09\uff0c\u5bb9\u91cf\u4e3a\u6b63\uff1b\u8d1f\u70b9\u6743\uff08\u5668\u6750\u82b1\u8d39\uff09\u8fde\u6c47\u70b9\uff0c\u5bb9\u91cf\u4e3a**\u8d1f\u7684\u8d1f**\uff08\u82b1\u8d39\u8f83\u603b\u6536\u76ca\u6765\u8bf4\u539f\u672c\u5c31\u662f\u8d1f\u7684\uff0c\u8fde\u5f97\u65f6\u5019\u8fde\u6b63\u7684\u5c31\u884c\uff09\uff0c\u6709\u5173\u7cfb\u7684\u5b9e\u9a8c\u548c\u5668\u6750\u4e4b\u95f4\u8fde\u8fb9\u5bb9\u91cf\u4e3a\u6b63\u65e0\u7a77\uff0c\u7b54\u6848\u4e3a**\u5168\u90e8\u5b9e\u9a8c\u6536\u76ca - \u4e0a\u9762\u56fe\u8dd1\u51fa\u6765\u7684\u6700\u5c0f\u5272**\n\n\u89e3\u91ca\uff1a\u6b63\u70b9\u4e4b\u95f4\u4e0e\u8d1f\u70b9\u8fde\u8fb9\u4e3aINF\u6700\u5c0f\u5272\u8dd1\u51fa\u6765\uff0c\u8981\u4e48\u5272\u6b63\u8fb9\uff0c**\u610f\u4e49\u5c31\u662f\u820d\u5f03\u8fd9\u4e2a\u5b9e\u9a8c**\uff0c\u8981\u4e48\u5272\u8d1f\u7684\u8d1f\u8fb9\uff0c**\u610f\u4e49\u4e3a\u4e70\u5668\u6750\u82b1\u94b1**\uff0c\u65e0\u8bba\u600e\u6837\uff0c\u8981\u662f\u4f7f\u5f97\u653e\u5f03\u5b9e\u9a8c\u94b1\u4e0e\u82b1\u7684\u5668\u6750\u94b1\u6700\u5c11\uff08\u4e5f\u5c31\u662f\u6700\u5c0f\u5272\uff09\uff0c\u7b54\u6848\u5373\u4e3a\u6700\u4f18\n\n# Code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<algorithm>\n#define ll long long\nusing namespace std;\nint RD(){\n    int out = 0,flag = 1;char c = getchar();\n    while(c < '0' || c >'9'){if(c == '-')flag = -1;c = getchar();}\n    while(c >= '0' && c <= '9'){out = out * 10 + c - '0';c = getchar();}\n    return flag * out;\n    }\nconst int maxn = 10019,INF = 1e9;;\nint nl,nr,nume = 1;\nint s,t,maxflow;\nint head[maxn],cur[maxn];\nstruct Node{\n    int v,dis,nxt;\n    }E[maxn << 2];\nvoid add(int u,int v,int dis){\n    E[++nume].nxt = head[u];\n    E[nume].v = v;\n    E[nume].dis = dis;\n    head[u] = nume;\n    }\nint d[maxn];\nbool bfs(){\n    queue<int>Q;\n    memset(d,0,sizeof(d));\n    for(int i = 1;i <= t;i++)cur[i] = head[i];\n    Q.push(s);\n    d[s] = 1;\n    while(!Q.empty()){\n        int u = Q.front();\n        Q.pop();\n        for(int i = head[u];i;i = E[i].nxt){\n            int v = E[i].v;\n            if(E[i].dis && !d[v]){\n                d[v] = d[u] + 1;\n                Q.push(v);\n                if(v == t)return 1;\n                }\n            }\n        }\n    return 0;\n    }\nint Dinic(int u,int flow){\n    if(u == t)return flow;\n    int rest = flow,k;\n    for(int i = cur[u];i != -1;i = E[i].nxt){\n        cur[u] = i;\n        int v = E[i].v;\n        if(E[i].dis && d[v] == d[u] + 1){\n            k = Dinic(v,min(rest,E[i].dis));\n            if(!k)d[v] = 0;\n            E[i].dis -= k;\n            E[i ^ 1].dis += k;\n            rest -= k;\n            }\n        if(rest == 0)break;\n        }\n    return flow - rest;\n    }\nint tot,ans;\nint main(){\n    memset(head,-1,sizeof(head));\n    nl = RD();nr = RD();\n    s = nl + nr + 1,t = s + 1;\n    int temp;\n    for(int i = 1;i <= nl;i++){\n        temp = RD();\n        tot += temp;\n        add(s,i,temp);\n        add(i,s,0);\n        char tools[10000];\n        memset(tools,0,sizeof tools);\n        cin.getline(tools,10000);\n        int ulen=0,tool;\n        while (sscanf(tools+ulen,\"%d\",&tool)==1)//\u4e4b\u524d\u5df2\u7ecf\u7528scanf\u8bfb\u5b8c\u4e86\u8d5e\u52a9\u5546\u540c\u610f\u652f\u4ed8\u8be5\u5b9e\u9a8c\u7684\u8d39\u7528\n            {//tool\u662f\u8be5\u5b9e\u9a8c\u6240\u9700\u4eea\u5668\u7684\u5176\u4e2d\u4e00\u4e2a      \n                //\u8fd9\u4e00\u884c\uff0c\u4f60\u53ef\u4ee5\u5c06\u8bfb\u8fdb\u6765\u7684\u7f16\u53f7\u8fdb\u884c\u50a8\u5b58\u3001\u5904\u7406\uff0c\u5982\u8fde\u8fb9\u3002\n                add(i,tool + nl,INF);\n                add(tool + nl,i,0);\n                if (tool==0) \n                    ulen++;\n                else {\n                    while (tool) {\n                        tool/=10;\n                        ulen++;\n                    }\n                }\n                ulen++;\n            }\n        }\n    for(int i = 1 + nl;i <= nr + nl;i++){\n        temp = RD();\n        add(i,t,temp);\n        add(t,i,0);\n        }\n    int flow = 0;\n    while(bfs())while(flow = Dinic(s,INF))maxflow += flow;\n    ans = tot - maxflow;\n    if(ans < 0){\n        printf(\"0\\n\");\n        return 0;\n        }\n    for(int i = 1;i <= nl;i++){\n        if(d[i])printf(\"%d \",i);\n        }\n    printf(\"\\n\");\n    for(int i = 1 + nl;i <= nr + nl;i++){\n        if(d[i])printf(\"%d \",i - nl);\n        }\n    printf(\"\\n\");\n    printf(\"%d\\n\",ans);\n    return 0;\n    }\n```",
        "postTime": 1531137475,
        "uid": 56230,
        "name": "\u5929\u4e0a\u4e00\u9897\u86cb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "**\u8fd9\u9053\u9898\u662f\u4e00\u9053\u57fa\u7840\u7684\u6700\u5927\u6743\u95ed\u5408\u56fe\u8f6c\u6700\u5927\u6d41\uff08\u6700\u5c0f\u5272\uff09**\n\n\u8bb8\u591a\u5927\u4f6c\u90fd\u628a\u601d\u8def\u8bb2\u5f97\u5f88\u8be6\u7ec6\u4e86\uff0c\u90a3\u6211\u5c31\u7740\u91cd\u8bb2\u4e00\u8bb2\u4ee3\u7801\u4e2d\u7684\u7ec6\u8282\u548c\u603b\u7ed3\u5427\n\n# \u601d\u8def\n\n- \u8fd9\u9053\u9898\u7684\u7cbe\u9ad3\u5728\u4e8e\u8054\u7cfb\u4e86\u5b9e\u9a8c\u548c\u8bbe\u5907\n\n- \u5efa\u7acb\u6e90\u70b9 $S$ \u548c\u6c47\u70b9 $T$ \u3002\u6b64\u65f6\uff0c\u56fe\u4e2d\u7684\u6d41\u91cf\u81ea\u7136\u5c31\u662f\u94b1\u4e86\u3002\u9996\u5148\uff0c\u5148\u628a\u6bcf\u4e00\u4e2a\u5b9e\u9a8c\u4e0e $S$ \u8fde\u7ebf\uff0c\u6d41\u91cf\u4e3a\u5b9e\u9a8c\u6536\u76ca\u3002\u4e4b\u540e\uff0c\u628a\u5b9e\u9a8c\u548c\u4eea\u5668\u8fde\u7ebf\uff0c\u6d41\u91cf\u662f $inf$ \u3002\u6700\u540e\u628a\u4eea\u5668\u548c $T$ \u8fde\u7ebf\uff0c\u6d41\u91cf\u4e3a\u4eea\u5668\u8d39\u7528\u3002\n\n- \u7136\u540e\u7528 $Dinic$ \u8dd1\u4e00\u624b\u6700\u5927\u6d41\u6a21\u677f\uff0c\u7528\u5b9e\u9a8c\u603b\u6536\u76ca\u51cf\u53bb\u6700\u5927\u6d41\u5c31\u884c\u4e86\u3002\u800c\u90a3\u4e9b\u9009\u4e2d\u7684\u5b9e\u9a8c\u548c\u4eea\u5668\u53ea\u7528\u627e\u90a3\u4e9b\u8d70\u8fc7\u7684\u8282\u70b9\uff08\u4e0e\u6e90\u70b9\u8ddd\u79bb\u4e0d\u4e3a0\u7684\u8282\u70b9\uff09\u8f93\u51fa\u5373\u53ef\u3002\n\n# \u4ee3\u7801\u8bb2\u89e3\uff08\u4e3b\u8981\u7ed9\u50cf\u6211\u4e00\u6837\u521a\u5b66\u7f51\u7edc\u6d41\u7684\uff09\n\n\u9996\u5148\uff0c\u6211\u4eec\u7528 $1-m$ \u8868\u793a\u5b9e\u9a8c\uff0c\u7528 $m+1-m+n$ \u8868\u793a\u4eea\u5668\uff08\u57fa\u64cd\uff09\u3002\u7136\u540e\u6211\u4eec\u8bfb\u5165\u6570\u636e\u65f6\uff0c\u5982\u679c\u5c0f\u4f19\u4f34\u4eec\u61d2\u5f97\u4fee\u6539\u5feb\u8bfb\u7684\u8bdd\uff0c\u5efa\u8bae\u8fd8\u662f\u7528 scanf \uff0c\u7136\u540e\u8fdb\u884c\u7279\u5224\uff0c\u8fd9\u6837\u4f1a\u65b9\u4fbf\u5f88\u591a\u3002\u81f3\u4e8e $Dinic$ \u548c $SPFA$ \u7684\u5199\u6cd5\u8fd9\u91cc\u5c31\u4e0d\u8bb2\u89e3\u4e86\uff0c\u8fd9\u91cc\u653e\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define N 5010\n#define inf 0x7fffffff\nusing namespace std;\nint read(){\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-'){\n\t\t\tf=-1;\n\t\t}\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\tx=(x<<3)+(x<<1)+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn x*f;\n}\nint n,m,head[N],s=0,t=2333,cnt=1,dis[N],ans,w,x;\nstruct edge{\n\tint to,next,val;\n}e[N<<1];\nvoid add(int u,int v,int w){\n\te[++cnt].to=v,e[cnt].next=head[u],e[cnt].val=w,head[u]=cnt;\n\te[++cnt].to=u,e[cnt].next=head[v],e[cnt].val=0,head[v]=cnt;\n}\nint SPFA(){//SPFA \u8fd8\u6ca1\u6b7b\u900f\n\tmemset(dis,0,sizeof(dis));\n\tqueue<int>q;\n\tq.push(s);\n\tdis[s]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u];i;i=e[i].next){\n\t\t\tint v=e[i].to;\n\t\t\tif(!dis[v]&&e[i].val){\n\t\t\t\tdis[v]=dis[u]+1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[t];\n}\nint MCMF(int u,int cur){\n\tif(u==t||!cur){\n\t\treturn cur;\n\t}\n\tint sum=0,tmp;\n\tfor(int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].to;\n\t\tif(dis[v]==dis[u]+1&&e[i].val){\n\t\t\tsum+=(tmp=MCMF(v,min(cur-sum,e[i].val)));\n\t\t\te[i].val-=tmp,e[i^1].val+=tmp;\n\t\t}\n\t}\n\tif(!sum){\n\t\tdis[u]=-1;\n\t}\n\treturn sum;\n}\nint Dinic(){//Dinic \u6a21\u677f\n\tint maxflow=0;\n\twhile(SPFA()){\n\t\tmaxflow+=MCMF(s,inf);\n\t}\n\treturn maxflow;\n}\nint main(){\n\tm=read(),n=read();\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d\",&w);\n\t\tans+=w;\n\t\tadd(s,i,w);\n\t\twhile(getchar()==' '){//\u8bfb\u5165\u5224\u65ad\n\t\t\tscanf(\"%d\",&x);\n\t\t\tadd(i,x+m,inf);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tw=read();\n\t\tadd(i+m,t,w);\n\t}\n\tans-=Dinic();\n\tfor(int i=1;i<=m;i++){\n\t\tif(dis[i]){//\u8d70\u8fc7\u7684\u8f93\u51fa\n\t\t\tprintf(\"%d \",i);\n\t\t}\n\t}\n\tprintf(\"\\n\");\n\tfor(int i=1;i<=n;i++){\n\t\tif(dis[i+m]){//\u8d70\u8fc7\u7684\u8f93\u51fa\n\t\t\tprintf(\"%d \",i);\n\t\t}\n\t}\n\tprintf(\"\\n%d\",ans);\n\treturn 0;\n}\n```\n\n# \u603b\u7ed3\n\n\u7f51\u7edc\u6d41\u7684\u6a21\u677f\u90e8\u5206\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u9898\u76ee\u7684\u7cbe\u9ad3\u5728\u4e8e\u5efa\u6a21\u3002\u5927\u5bb6\u4e00\u5b9a\u8981\u60f3\u597d\u6a21\u578b\uff0c\u4e09\u601d\u800c\u540e\u7801\uff0c\u8fd9\u6837\u624d\u80fd\u5b66\u53f7\u7f51\u7edc\u6d41\u3002\n\n# \u50f5\u5367\u5b64\u6751\u4e0d\u81ea\u54c0\uff0c[\u521b\u5b87](https://www.luogu.com.cn/user/147999) AK IOI ",
        "postTime": 1593945614,
        "uid": 178556,
        "name": "Skyjoy",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u89e3\u9898\u601d\u8def\u57fa\u672c\u4e0e\u5176\u4ed6\u9898\u89e3\u4e00\u81f4\uff0c\u8fd9\u91cc\u4e3b\u8981\u8bf4\u8bf4\u6211\u5bf9\u4e3a\u4ec0\u4e48\u6700\u540e\u4e00\u6b21\u5206\u5c42\u5c31\u662f\u65b9\u6848\u7684\u7406\u89e3\u3002\u6211\u6bd4\u8f83\u559c\u6b22\u901a\u4fd7\u76f4\u89c2\u7684\u89e3\u91ca\u95ee\u9898\uff0c\u6240\u4ee5\uff0c\u6211\u7684\u7406\u89e3\u4e5f\u4f1a\u6bd4\u8f83\u901a\u4fd7\u3002\n\n\u9996\u5148\u53ef\u4ee5\u786e\u5b9a\uff0c\u6700\u540e\u4e00\u6b21\u5206\u5c42\u4e4b\u524d\uff0c\u7f51\u7edc\u6d41\u91cc\u5df2\u7ecf\u6ca1\u6709\u589e\u5e7f\u8def\u5f84\u4e86\uff0c\u63a5\u7740\u5c31\u9000\u51fawhile\u5faa\u73af\uff0c\u8fd9\u4e2a\u5f88\u597d\u7406\u89e3\u3002\n\n\u7136\u540e\u60f3\u60f3\u770b\u4e3a\u70b9\u5206\u5c42\u7684\u6761\u4ef6\uff0c\u4e00\u4e2a\u662f\u8fd8\u6ca1\u6709\u5206\u5c42\uff0c\u53e6\u4e00\u4e2a\u5c31\u662f\u8fb9\u7684\u5bb9\u91cf\u5927\u4e8e0\u3002\u518d\u7ed3\u5408\u95ee\u9898\u60f3\u60f3\uff0c\u5982\u679c\u6211\u8981\u505a\u4e00\u4e2a\u5b9e\u9a8c\uff0c\u90a3\u4e48\u6211\u5fc5\u987b\u8981\u76c8\u5229\uff0c\u5982\u679c\u6211\u5f97\u4e0d\u5230\u5229\u76ca\uff0c\u6211\u80af\u5b9a\u4e0d\u4f1a\u53bb\u505a\u5bf9\u5427\u3002\u653e\u5230\u56fe\u91cc\u5c31\u662f\u4ece\u6e90\u70b9\u6d41\u51fa\u4e00\u9053\u6d41\u5230\u5bf9\u5e94\u7684\u5b9e\u9a8c\uff0c\u7136\u540e\u8fd9\u4e2a\u6d41\u5206\u522b\u6d41\u5411\u8fd9\u4e2a\u5b9e\u9a8c\u9700\u8981\u7684\u4eea\u5668\uff0c\u5728\u6d41\u5230\u6c47\u70b9\u65f6\uff0c\u4eea\u5668\u4e0e\u6c47\u70b9\u8fde\u63a5\u7684\u8fb9\u7684\u5bb9\u91cf\u4e4b\u548c\uff0c\u4e00\u5b9a\u8981\u5c0f\u4e8e\u6e90\u70b9\u5230\u5b9e\u9a8c\u8fd9\u6761\u8fb9\u7684\u5bb9\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u7684\u82b1\u8d39\u8981\u5c0f\u4e8e\u6211\u7684\u5229\u76ca\uff0c\u624d\u80fd\u6709\u6536\u76ca\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u5bb9\u91cf\u5927\u4e8e0\u7684\u8fb9\uff08\u4ece\u6e90\u70b9\u5230\u5b9e\u9a8c\u5bf9\u5e94\u7684\u70b9\uff09\uff0c\u5176\u5b9e\u5269\u4f59\u7684\u5bb9\u91cf\u5c31\u662f\u6211\u505a\u8fd9\u4e2a\u5b9e\u9a8c\u7684\u6536\u76ca\u4e86\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u89e3\u91ca\u603b\u6536\u76ca\u51cf\u53bb\u6700\u5927\u6d41\uff08\u5373\u603b\u82b1\u8d39\uff09\u662f\u51c0\u6536\u76ca\u3002\u90a3\u4e9b\u6b8b\u91cf\u4e3a0\u7684\u8fb9\u8bf4\u660e\u8fd9\u4e2a\u5b9e\u9a8c\u5f97\u4e0d\u5230\u6536\u76ca\uff0c\u90a3\u5c31\u4e0d\u9009\uff0c\u5728\u5206\u5c42\u65f6\u5c31\u4e0d\u4f1a\u5206\u914d\u5230\u503c\u3002\u597d\u4e86\uff0c\u90a3\u4e48\u90a3\u4e9b\u6b8b\u91cf\u5927\u4e8e0\u7684\u8fb9\u6240\u8fde\u7684\u5b9e\u9a8c\u5c31\u662f\u8981\u505a\u7684\u5b9e\u9a8c\u4e86\u3002\n\n\u81f3\u4e8e\u4eea\u5668\u561b\uff0c\u56e0\u4e3a\u5b9e\u9a8c\u4e0e\u4eea\u5668\u4e4b\u95f4\u7684\u8fb9\u5bb9\u91cf\u662finf\uff0c\u6240\u4ee5\u53ea\u8981\u5b9e\u9a8c\u9009\u4e86\uff0c\u5206\u4e86\u5c42\u4e86\uff0c\u5b83\u9700\u8981\u7684\u4eea\u5668\u81ea\u7136\u4e5f\u4f1a\u5206\u5230\u5c42\u3002\n\n\u8fd9\u5c31\u662f\u6211\u5bf9\u8fd9\u4e2a\u95ee\u9898\u7684\u7406\u89e3\uff0c\u6709\u95ee\u9898\u7684\u6b22\u8fce\u8ba8\u8bba\u3002\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#define max 10005\n#define nump 105\n#define inf 0x7fffffff\nusing namespace std;\nint n, m,s,t,cnt=-1;\nint head[nump], cur[nump],depth[nump];\nstruct node {\n\tint next, to, c;\n}edge[max];\nvoid add_edge(int from, int to, int c) {\n\tedge[++cnt].next = head[from];\n\tedge[cnt].to = to;\n\tedge[cnt].c = c;\n\thead[from] = cnt;\n}\nbool bfs() {//\u6784\u9020\u5206\u5c42\u56fe\n\tmemset(depth, 0, sizeof(depth));\n\tfor (int i = 0; i <= 105; i++) cur[i] = head[i];//\u590d\u5236head\u6570\u7ec4\n\n\tqueue<int> Q;//\u5b9a\u4e49\u4e00\u4e2abfs\u5bfb\u627e\u5206\u5c42\u56fe\u65f6\u7684\u961f\u5217\n\tdepth[s] = 1;//\u6e90\u70b9\u6df1\u5ea6\u4e3a1\n\tQ.push(s);\n\tdo {\n\t\tint u = Q.front();//\u53d6\u961f\u9996\u5143\u7d20\n\t\tQ.pop();\n\t\tfor (int i = head[u]; i != -1; i = edge[i].next)\n\t\t\tif (edge[i].c > 0 && depth[edge[i].to] == 0) {\n\t\t\t\tdepth[edge[i].to] = depth[u] + 1;\t\n\t\t\t\tQ.push(edge[i].to);\n\t\t\t}\n\t} while (!Q.empty());\n\n\tif (depth[t] == 0) return 0;\n\treturn 1;\n}\nint dfs(int u, int dist) {\n\tif (u == t || dist == 0) return dist; \n\tfor (int i = cur[u]; i != -1; i = edge[i].next) {\n\t\tcur[u] = i;\n\t\tif (depth[edge[i].to] == depth[u] + 1 && edge[i].c) { \n\t\t\tint di = dfs(edge[i].to, min(dist, edge[i].c));\n\t\t\tif (di > 0) {//\u82e5\u589e\u5e7f\u6210\u529f\n\t\t\t\tedge[i].c -= di;//\u6b63\u5411\u8fb9\u51cf\u5c11\n\t\t\t\tedge[i ^ 1].c += di;//\u53cd\u5411\u8fb9\u589e\u52a0\n\t\t\t\treturn di;//\u5411\u4e0a\u4f20\u9012\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;//\u6ca1\u6709\u589e\u5e7f\u8def\uff0c\u8fd4\u56de0\n}\nint dinic() {\n\tint ans = 0,d;//\u8bb0\u5f55\u6700\u5927\u6d41\u91cf\n\twhile (bfs())\t//\u5982\u679c\u5b58\u5728\u4e00\u6761\u589e\u5e7f\u8def\n\t\twhile (d = dfs(s, inf))//\u8fdb\u884c\u589e\u5e7f\u64cd\u4f5c\uff0c\u589e\u52a0\u7684\u6d41\u91cf\u7d2f\u52a0\u5230\u6700\u5927\u6d41\u91cf\u4e2d\n\t\t\tans += d;\n\treturn ans;\n}\nint main() {\n\tmemset(head, -1, sizeof(head));\n\tcin >> m >> n;\n\ts = 0, t = 102;\n\tint sum=0;\n\tfor (int i = 1,eo,to; i <= m; i++) {\n\t\tscanf(\"%d\", &eo);//\u5b9e\u9a8c\u82b1\u8d39\n\t\tsum += eo;\n\t\tadd_edge(s, 50+i, eo);\n\t\tadd_edge(50+i, s, 0);\n\n\t\tchar tools[10000];\n\t\tmemset(tools, 0, sizeof tools);\n\t\tcin.getline(tools, 10000);\n\t\tint ulen = 0, tool;\n\t\twhile (sscanf(tools + ulen, \"%d\", &tool) == 1)//\u4e4b\u524d\u5df2\u7ecf\u7528scanf\u8bfb\u5b8c\u4e86\u8d5e\u52a9\u5546\u540c\u610f\u652f\u4ed8\u8be5\u5b9e\u9a8c\u7684\u8d39\u7528\n\t\t{//tool\u662f\u8be5\u5b9e\u9a8c\u6240\u9700\u4eea\u5668\u7684\u5176\u4e2d\u4e00\u4e2a      \n\t\t\tadd_edge(50 + i, tool, inf);\n\t\t\tadd_edge(tool, 50 + i, 0);\n\t\t\tif (tool == 0)\n\t\t\t\tulen++;\n\t\t\telse {\n\t\t\t\twhile (tool) {\n\t\t\t\t\ttool /= 10;\n\t\t\t\t\tulen++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tulen++;\n\t\t}\n\t}\n\tfor (int i = 1,cost; i <= n; i++) { \n\t\tscanf(\"%d\", &cost); \n\t\tadd_edge(i, t, cost);\n\t\tadd_edge(t, i, 0);\n\t}\n\tint ans = dinic();\n\t\n\tfor (int i = 51; i <= 50+m; i++) {\n\t\tif (depth[i] != 0) printf(\"%d \", i - 50);\n\t}\n\tcout << endl;\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (depth[i] != 0) printf(\"%d \", i);\n\t}\n\tcout << endl;\n\tcout << sum - ans << endl;\n\treturn 0;\n}\n```",
        "postTime": 1545377707,
        "uid": 145501,
        "name": "w12144",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "\u5206\u6790\uff1a\n\n\u6211\u4eec\u5148\u628a\u9898\u76ee\u62bd\u8c61\u51fa\u6e05\u6670\u7684\u6570\u5b66\u7ed3\u6784\uff1a\n\n\u6709\u4e24\u4e2a\u70b9\u96c6E\u548cL\uff0c\u4eceE\u4e2d\u9009\u7b2ci\u4e2a\u70b9\u4f1a\u83b7\u5f97pi\u7684\u6536\u76ca\uff0c\n\n\u4eceL\u4e2d\u9009\u7b2ci\u4e2a\u70b9\u4f1a\u6263\u9664ci\u7684\u7684\u6536\u76ca\uff0c\n\n\u4e24\u4e2a\u70b9\u96c6\u4e4b\u95f4\u6709\u5173\u7cfb\uff0c\u9009\u4e86E\u4e2d\u7684\u67d0\u4e2a\u70b9\u540e\uff0c\u5fc5\u987b\u4eceL\u4e2d\u9009\u51fa\u67d0\u4e9b\u89c4\u5b9a\u7684\u70b9\u3002\n\n\u8fd9\u6837\uff0c\u9898\u76ee\u5c31\u5f88\u660e\u663e\u7684\u8f6c\u5316\u6210\u4e86\uff0c\u9009\u8fd8\u662f\u4e0d\u9009\u7684\u95ee\u9898\u3002\u8fd9\u5c31\u662f\u6700\u5c0f\u5272\u6a21\u578b\u4e86\u3002\n\n\u5efa\u56fe\uff1a\n\n\u8bbe\u6e90\u70b9S\u6c47\u70b9T\uff0cS\u5411E\u4e2d\u7684\u70b9\u8fde\u5bb9\u91cf\u4e3api\u7684\u8fb9\uff0c\n\nEi\u5411\u6240\u6709\u4e0e\u5b83\u6709\u5173\u7cfb\u7684L\u4e2d\u7684\u70b9\u8fde\u5bb9\u91cf\u4e3aINF\u7684\u8fb9\uff0c\u4fdd\u8bc1\u4e00\u8d77\u53d6\u5230\u3002\n\nLi\u5411T\u8fde\u5bb9\u91cf\u4e3aci\u7684\u8fb9\u3002\n\n\u8fd9\u6837\uff0c\u7528pi\u7684\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u5c31\u662f\u7b54\u6848\u4e86\u3002\n\n\u90a3\u4e48\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5982\u4f55\u786e\u5b9a\u65b9\u6848\u5462\uff1f\n\n\u6211\u4eec\u5148\u786e\u5b9a\u8981\u7528\u54ea\u4e9b\u4eea\u5668\uff0c\u5220\u6389\u67d0\u4e2a\u4eea\u5668\u8fde\u5411T\u7684\u8fb9\uff0c\n\n\u8dd1\u4e00\u904d\u6700\u5927\u6d41\uff0c\u5982\u679c\u539f\u56fe\u6700\u5927\u6d41\u4e0e\u5176\u7684\u5dee\u503c\u7b49\u4e8e\u8fd9\u6761\u8fb9\u7684\u5bb9\u91cf\uff0c\n\n\u5219\u8bf4\u660e\u8fd9\u4e2a\u4eea\u5668\u662f\u9700\u8981\u7684\uff0c\u518d\u901a\u8fc7\u4eea\u5668\u786e\u5b9a\u5b9e\u9a8c\u3002\n\n\u4ee3\u7801\uff1a\n```pascal\n\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cstdio>\n\nusing namespace std;\n\nconst int inf=1e9;\n\nint n,m,p[51],c[51],x,p1[51][51],S=0,T,sum=0,ans,mi=inf,yu=0;\nint to[6001],w[6001],w1[6001],next[6001],first[201],e1=0;\nint d[201],f[6001],cur[201],e[201],now,check[51];\n\nint read()\n{\n    char ch=getchar();yu=0;\n    while((ch<'0')||(ch>'9')) {if(ch=='\\n') return 0;ch=getchar();}\n    while((ch>='0')&&(ch<='9')) yu=yu*10+ch-'0',ch=getchar();\n    if(ch=='\\n') return 0;\n    return yu;\n}\n\nvoid insert(int o,int p,int q)\n{\n    to[e1]=p;w[e1]=w1[e1]=q;next[e1]=first[o];first[o]=e1++;\n    to[e1]=o;w[e1]=w1[e1]=0;next[e1]=first[p];first[p]=e1++;\n}\n\nint sap()\n{\n    int yus=0;\n    for(int i=0;i<=T;i++) cur[i]=first[i];\n    memset(e,-1,sizeof(e));\n    memset(d,0,sizeof(d));\n    memset(f,0,sizeof(f));\n    e[S]=now=S;f[0]=T;\n    while(d[S]<T)\n    {\n        bool bo=false;\n        for(int i=cur[now];i!=-1;i=next[i])\n            if((d[now]==(d[to[i]]+1))&&(w1[i]>0))\n            {\n                cur[now]=i;\n                e[to[i]]=now;\n                now=to[i];\n                bo=true;\n                mi=min(mi,w1[i]);\n                if(now==T)\n                {\n                    yus+=mi;\n                    while(now!=S)\n                    {\n                        w1[cur[e[now]]]-=mi;\n                        w1[cur[e[now]]^1]+=mi;\n                        now=e[now];\n                    }\n                    mi=inf;\n                }\n                break;\n            }\n        if(bo) continue;int mmi=T;\n        for(int i=first[now];i!=-1;i=next[i])\n            if((w1[i]>0)&&(mmi>d[to[i]])) mmi=d[to[i]],cur[now]=i;\n        if(!(--f[d[now]])) break;\n        f[d[now]=(mmi+1)]++;\n        now=e[now];\n    }\n    return yus;\n}\n\nint main()\n{\n    memset(first,-1,sizeof(first));\n    scanf(\"%d%d\",&m,&n);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d\",&p[i]);sum+=p[i];\n        while(true) \n        {\n            x=read();\n            p1[i][++p1[i][0]]=yu;\n            if(!x)break;\n        }\n        S+=p1[i][0];\n    }\n    for(int i=1;i<=n;i++) scanf(\"%d\",&c[i]);\n    S+=n+m+1;T=S+1;\n    for(int i=1;i<=m;i++) \n    {\n        insert(S,i,p[i]);\n        for(int j=1;j<=p1[i][0];j++) insert(i,m+p1[i][j],inf);\n    }\n    for(int i=1;i<=n;i++) insert(i+m,T,c[i]);\n    ans=sap();\n    memset(check,0,sizeof(check));\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=0;j<=e1;j++) w1[j]=w[j];\n        w1[first[m+i]]=0;\n        if(ans-sap()==w[first[m+i]]) check[i]=true;\n    }\n    for(int i=1;i<=m;i++)\n    {\n        bool b1=true;\n        for(int j=1;j<=p1[i][0];j++)\n            if(!check[p1[i][j]]) {b1=false;break;}\n        if(b1) cout<<i<<' ';\n    }\n    cout<<endl;\n    for(int i=1;i<=n;i++)\n        if(check[i]) cout<<i<<' ';\n    cout<<endl;\n    cout<<sum-ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1527157670,
        "uid": 79044,
        "name": "\u7834\u58c1\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    },
    {
        "content": "##\u9898\u76ee\n\nW \u6559\u6388\u6b63\u5728\u4e3a\u56fd\u5bb6\u822a\u5929\u4e2d\u5fc3\u8ba1\u5212\u4e00\u7cfb\u5217\u7684\u592a\u7a7a\u98de\u884c\u3002\u6bcf\u6b21\u592a\u7a7a\u98de\u884c\u53ef\u8fdb\u884c\u4e00\u7cfb\u5217\u5546\u4e1a\n\n\u6027\u5b9e\u9a8c\u800c\u83b7\u53d6\u5229\u6da6\u3002\u73b0\u5df2\u786e\u5b9a\u4e86\u4e00\u4e2a\u53ef\u4f9b\u9009\u62e9\u7684\u5b9e\u9a8c\u96c6\u5408E={E1\uff0cE2\uff0c\u2026\uff0cEm}\uff0c\u548c\u8fdb\u884c\u8fd9\n\n\u4e9b\u5b9e\u9a8c\u9700\u8981\u4f7f\u7528\u7684\u5168\u90e8\u4eea\u5668\u7684\u96c6\u5408I={I1\uff0cI2\uff0c\u2026In}\u3002\u5b9e\u9a8cEj\u9700\u8981\u7528\u5230\u7684\u4eea\u5668\u662fI\u7684\u5b50\u96c6Rj\u3002\n\n\u914d\u7f6e\u4eea\u5668Ik\u7684\u8d39\u7528\u4e3ack\u7f8e\u5143\u3002\u5b9e\u9a8cEj\u7684\u8d5e\u52a9\u5546\u5df2\u540c\u610f\u4e3a\u8be5\u5b9e\u9a8c\u7ed3\u679c\u652f\u4ed8pj\u7f8e\u5143\u3002W\u6559\u6388\u7684\n\n\u4efb\u52a1\u662f\u627e\u51fa\u4e00\u4e2a\u6709\u6548\u7b97\u6cd5\uff0c\u786e\u5b9a\u5728\u4e00\u6b21\u592a\u7a7a\u98de\u884c\u4e2d\u8981\u8fdb\u884c\u54ea\u4e9b\u5b9e\u9a8c\u5e76\u56e0\u6b64\u800c\u914d\u7f6e\u54ea\u4e9b\u4eea\u5668\u624d\n\n\u80fd\u4f7f\u592a\u7a7a\u98de\u884c\u7684\u51c0\u6536\u76ca\u6700\u5927\u3002\u8fd9\u91cc\u51c0\u6536\u76ca\u662f\u6307\u8fdb\u884c\u5b9e\u9a8c\u6240\u83b7\u5f97\u7684\u5168\u90e8\u6536\u5165\u4e0e\u914d\u7f6e\u4eea\u5668\u7684\u5168\u90e8\n\n\u8d39\u7528\u7684\u5dee\u989d\u3002\n\n\u00ab\u7f16\u7a0b\u4efb\u52a1\uff1a\n\n\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5b9e\u9a8c\u548c\u4eea\u5668\u914d\u7f6e\u60c5\u51b5\uff0c\u7f16\u7a0b\u627e\u51fa\u51c0\u6536\u76ca\u6700\u5927\u7684\u8bd5\u9a8c\u8ba1\u5212\u3002\n\n\n##\u9898\u89e3\n\n\u5982\u679c\u628a\u5b9e\u9a8c\u7684\u6536\u5165\u548c\u4eea\u5668\u7684\u652f\u51fa\u5206\u522b\u770b\u4f5c\u662f\u4e00\u6761\u8def\u7684\u4e24\u4e2a\u9650\u5236\u5bb9\u91cf\uff0c\u90a3\u4e48\u5b8c\u6210\u4e00\u4e2a\u5b9e\u9a8c\u6240\u9700\u7684\u6700\u5c0f\u8d44\u91d1\u6d88\u8017\u5c31\u662f\u8fd9\u6761\u8def\u5f84\u7684\u6700\u5927\u6d41\uff0c\u4e5f\u5c31\u662f\u6700\u5c0f\u5272\u3002\n\n\u6ce8\u610f\uff1a\u5982\u679c\u67d0\u5b9e\u9a8c\u7684\u62a5\u916c\u5927\u4e8e\u6d88\u8017\uff0c\u5219\u8be5\u5b9e\u9a8c\u7684\u6700\u5c0f\u635f\u5931\u4e3a\u5b9e\u9a8c\u62a5\u916c\uff0c\u5373\u4e0d\u505a\u8be5\u5b9e\u9a8c\uff0c\u5728\u540e\u9762ans=sum(\u5b9e\u9a8c\u62a5\u916c)-Maxflow\u65f6\u521a\u597d\u628a\u8be5\u5b9e\u9a8c\u51cf\u53bb\n\n\u521b\u5efa\u8d85\u7ea7\u6839\u8282\u70b9\u548c\u8d85\u7ea7\u6c47\u8282\u70b9\uff0c\u5efa\u7acb\n\n\u6839\u2014(\u5b9e\u9a8c\u62a5\u916c)\u2014\u5b9e\u9a8c\u2014(\u65e0\u7a77)\u2014\u4eea\u5668\u2014(\u4eea\u5668\u8017\u8d39)\u2014\u6c47\n\n\u7684\u56fe\uff0cans=sum(\u5b9e\u9a8c\u62a5\u916c)-Maxflow\n\n\n##\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n\nusing namespace std; \n\nconst int INF = 0x7fffffff;\nconst int MAXN = 1010;\nstruct Edge{\n    int to,c,nxt;\n}e[10010];\n\nint head[MAXN],dis[MAXN],cur[MAXN];\nint s,t,tot=1;\nqueue<int>q;\n\nint read(int &x)\n{\n    x = 0;char ch = getchar();\n    for (; ch<'0'||ch>'9'; ch = getchar());\n    for (; ch>='0'&&ch<='9'; ch = getchar())\n        x = x*10+ch-'0';\n    if (ch==10||ch==13) return 0;\n    return 1;\n}\nvoid add_edge(int u,int v,int w)\n{\n    e[++tot].c = w,e[tot].to = v,e[tot].nxt = head[u];\n    head[u] = tot;\n    e[++tot].c = 0,e[tot].to = u,e[tot].nxt = head[v];\n    head[v] = tot;\n}\nbool bfs()\n{\n    memset(dis,-1,sizeof(dis));\n    dis[s] = 0;\n    q.push(s);\n    while (!q.empty())\n    {\n        int u = q.front();\n        q.pop();\n        for (int i=head[u]; i; i=e[i].nxt)\n        {\n            int v = e[i].to;\n            if (dis[v]==-1&&e[i].c>0)\n            {\n                dis[v] = dis[u]+1;\n                q.push(v);\n            }\n        }\n    }\n    return dis[t]!=-1;\n}\nint dfs(int u,int low)\n{\n    if(u==t || low==0)\n        return low;\n    int res=0;\n    for(int i=head[u];i;i=e[i].nxt)\n    {\n        int v=e[i].to;\n        if(e[i].c>0 && dis[v]==dis[u]+1)\n        {\n            int w=dfs(v,min(e[i].c,low));\n            e[i].c-=w;\n            e[i^1].c+=w;\n            res+=w;\n            low-=w;\n            if(low==0)\n            {\n                break;    \n            }\n        }    \n    }\n    return res;\n}\nint main()\n{\n    int ans = 0,sum = 0,m,n,flag;\n    read(m),read(n);\n    s = 0,t = n+m+1;\n    for (int x,i=1; i<=m; ++i)\n    {\n        flag = 1;\n        read(x);\n        sum += x;\n        add_edge(s,i,x);\n        while (flag) \n        {\n            flag = read(x);\n            add_edge(i,x+m,INF);\n        }\n    }\n    for (int x,i=1; i<=n; ++i)\n    {\n        read(x);\n        add_edge(i+m,t,x);\n    }\n    while (bfs())\n    {\n        memset(cur,0,sizeof(cur));\n        ans += dfs(s,INF);    \n    }\n    for (int i=1; i<=m; ++i)\n        if (dis[i]!=-1) printf(\"%d \",i);\n    printf(\"\\n\");\n    for (int i=m+1; i<=t; ++i)\n        if (dis[i]!=-1) printf(\"%d \",i-m);\n    printf(\"\\n%d\\n\",sum-ans);\n    return 0;\n}\n```",
        "postTime": 1513240201,
        "uid": 36294,
        "name": "feng_chengjie",
        "ccfLevel": 0,
        "title": "\u7f51\u7edc\u6d4124\u9898(3) --- \u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3010\u6700\u5c0f\u5272\u6a21\u578b\u3011"
    },
    {
        "content": "### \u3010\u9898\u76ee\u5927\u610f\u3011\n\n- \u6709n\u9879\u8bd5\u9a8c\uff0c\u505a\u6bcf\u4e00\u9879\u8bd5\u9a8c\u6709\u4e00\u4e9b\u6536\u5165\uff0c\u800c\u6bcf\u4e00\u79cd\u8bd5\u9a8c\u8981\u7528\u5230\u82e5\u5e72\u79cd\u4eea\u5668\uff0c\u6bcf\u4e00\u79cd\u4eea\u5668\u8981\u4e00\u4e9b\u8d39\u7528\uff0c\u95ee\u8981\u505a\u4ec0\u4e48\u5b9e\u9a8c\u3001\u914d\u7f6e\u4ec0\u4e48\u8bbe\u5907\uff0c\u624d\u80fd\u4f7f\u51c0\u6536\u76ca\u6700\u5927\uff1f\u8f93\u51fa\u6700\u5927\u51c0\u6536\u76ca\u3001\u505a\u54ea\u4e9b\u8bd5\u9a8c\u3001\u9700\u8981\u914d\u5907\u54ea\u4e9b\u4eea\u5668\u3002\n\n### \u3010\u89e3\u9898\u601d\u8def\u3011\n\n- \u5047\u8bbe\u5168\u90e8\u8bd5\u9a8c\u90fd\u53ef\u4ee5\u505a\u4e14\u4e0d\u7528\u652f\u51fa\uff0c\u90a3\u662f\u6700\u597d\u7684\uff0c\u4f46\u662f\u73b0\u5728\u9700\u8981\u652f\u51fa\uff0c\u90a3\u4e48\u53ea\u8981\u4f7f\u652f\u51fa\u6700\u5c0f\u5316\uff0c\u90a3\u4e48\u6536\u5165\u5c31\u662f\u6700\u5927\u4e86\u3002\u90a3\u4e48\u8fd9\u5c31\u7528\u4e86\u6700\u5c0f\u5272\u601d\u60f3\u3002\n\n- \u6784\u56fe\uff1a\u6e90\u70b9\u8fde\u63a5\u7740\u6bcf\u4e00\u9879\u5b9e\u9a8c\uff0c\u8fb9\u7684\u5bb9\u91cf\u662f\u8bd5\u9a8c\u7684\u6536\u5165\uff1b\u6bcf\u4e00\u9879\u5b9e\u9a8c\u8fde\u63a5\u7740\u9700\u8981\u7684\u4eea\u5668\uff0c\u8fb9\u7684\u5bb9\u91cf\u662f\u65e0\u7a77\u5927\uff1b\u6bcf\u4e00\u4e2a\u4eea\u5668\u8fde\u63a5\u7740\u6c47\u70b9\uff0c\u8fb9\u7684\u5bb9\u91cf\u662f\u4eea\u5668\u7684\u8d39\u7528\u3002\u7136\u540e\u6c42\u4e00\u4e2a\u6700\u5927\u6d41\uff0c\u800c\u6700\u5927\u6d41\u5c31\u662f\u6700\u5c0f\u5272\uff0c\u7b54\u6848\u5c31\u51fa\u6765\u4e86\u3002\n\n- \u5982\u679c\u6e90\u70b9\u548c\u5176\u4e2d\u4e00\u4e2a\u8bd5\u9a8c\u7684\u8fb9\u7684\u5269\u4f59\u5bb9\u91cf\u8fd8\u662f\u539f\u6765\u7684\u5bb9\u91cf\uff0c\u5c31\u8bc1\u660e\u8fd9\u9879\u8bd5\u9a8c\u6ca1\u6709\u88ab\u5272\uff0c\u6240\u4ee5\u8f93\u51fa\u8fd9\u9879\u8bd5\u9a8c\uff1b\u4eea\u5668\u4e5f\u662f\u4e00\u6837\u7684\u9053\u7406\u3002\n\n### \u3010\u89e3\u9898\u53cd\u601d\u3011\n\n- \u5728\u8fd9\u9898\u4e4b\u4e2d\uff0c\u8f93\u5165\u4eea\u5668\u662f\u82e5\u5e72\u4e2a\uff0c\u6ca1\u6709\u7ed9\u5b9a\u6570\u76ee\uff0c\u56e0\u6b64\u53ef\u4ee5\u8fd9\u6837\u8f93\u5165\u3002\n\n- \u5176\u4e2d\uff0c\u8981\u7528\u5230sstream\u5e93\u3002\n\n### \u3010\u53c2\u8003\u7a0b\u5e8f\u3011\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<sstream>\n#define min(a,b)(a<b?a:b)\nusing namespace std;\nstruct EDGE{int f,t,c,next;};\nEDGE edge[100005];\nint head[100005],cur=-1,s,t,n,m,sz,value;\nbool visit[100005],viu[100005],viv[100005];\nconst int oo=1000000000;\nvoid add(int u,int v,int c)\n{\n\tcur++;\n\tedge[cur].f=u;\n\tedge[cur].t=v;\n\tedge[cur].c=c;\n\tedge[cur].next=head[u];\n\thead[u]=cur;\n}\nint dfs(int now,int mi)\n{\n\tif (visit[now]) return 0;\n\tif (now==t) return mi;\n\tvisit[now]=true;\n\tint h=head[now];\n\twhile (h!=-1)\n\t{\n\t\tint to=edge[h].t;\n\t\n\t\tif (edge[h].c!=0)\n\t\t{\n\t\t\tint res=dfs(to,min(mi,edge[h].c));\n\t\t\tif (res)\n\t\t\t{\n\t\t\t\tedge[h].c-=res;\n\t\t\t\tedge[h^1].c+=res; \n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t\th=edge[h].next;\n\t}\n\treturn 0;\n}\nint main()\n{\n\tcur=-1;\n\tmemset(edge,0,sizeof(edge));\n\tmemset(head,-1,sizeof(head));\n\t\n\tscanf(\"%d%d\",&n,&m);\n\ts=n+m+1,t=n+m+2;\n\tint sum=0;\n\tstring st;\n\tstringstream ss;\n\tfor (int i=1;i<=n;i++)\n\t  {\t\n\t      scanf(\"%d\",&value);\n\t\t  sum+=value;\n\t\t  add(s,i,value);\n\t\t  add(i,s,0);\n\t\t  getline(cin,st);\n\t\t  ss.clear();\n\t\t  ss.str(st);\n\t\t  while (ss>>sz) add(i,sz+n,oo),add(sz+n,i,0);\n\t  }\n\tfor (int i=1;i<=m;i++)\n\t  {\n\t\t  scanf(\"%d\",&value);\n\t\t  add(i+n,t,value);\n\t\t  add(t,i+n,0);\n\t  }\n\tint ans=0;\n\twhile (1)\n\t  {\n\t\t  memset(visit,0,sizeof(visit));\n\t\t  int res=dfs(s,oo);\n\t\t  if (res) ans+=res;else break;\t\n\t  }\n\tfor (int i=1;i<=n;i++) if (visit[i]) printf(\"%d \",i);\n\tprintf(\"\\n\");\n\tfor (int i=1;i<=m;i++) if (visit[i+n]) printf(\"%d \",i);\n\tprintf(\"\\n\");\n\tcout<<sum-ans;\n\treturn 0;\n}\n\n```",
        "postTime": 1532496699,
        "uid": 12349,
        "name": "FREEH",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2762 \u3010\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898\u3011"
    }
]