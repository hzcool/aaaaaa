[
    {
        "content": "# \u6811\u4e0a\u5dee\u5206\n\n\u672c\u9898\u89e3\u6709\uff1a\n\n1. **\u5dee\u5206**\u7684**\u601d\u60f3\u539f\u7406** + \u505a **\u5dee\u5206** \u9898\u7684**\u5c0f\u6280\u5de7**\n\n1. **\u6811\u4e0a\u5dee\u5206**\n\n\u8981\u770b\u61c2\u8fd9\u7bc7\u9898\u89e3  ....   \u4f60\u5fc5\u987b\u719f\u7ec3\u638c\u63e1 \uff1a\n\n1.  **LCA**\n\n1.  **\u5dee\u5206**\n\n- LCA\u7684\u9898\u76ee\u53ef\u4ee5\u505a\uff1a\n\n\t[P3379 \u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09](https://www.luogu.org/problem/P3379)\n\n\t[P1351\u8054\u5408\u6743\u503c](https://www.luogu.org/problem/P1351)\n\n- \u81f3\u4e8e**\u5dee\u5206\uff0c\u4ed6\u5b9e\u5728\u662f\u592a\u91cd\u8981**\u4e86\uff0c\u6211\u76f8\u4fe1\u5404\u4f4d\u90fd\u638c\u63e1\u4e86\uff0c~~\u5982\u679c\u4f60\u4e0d\u4f1a\u6211\u5efa\u8bae\u6253\u56de\u666e\u53ca\u7ec4\u91cd\u9020~~\n\n------------\n\n# \u4e00\uff1a\u5dee\u5206\u7684\u601d\u60f3\u539f\u7406\n\n\u5148\u6765\u5927\u81f4\u5206\u6790\u4e00\u4e0b\u6211\u4eec\u672c\u9898\u8981\u5e72\u4ec0\u4e48\n\n1. \u627e\u5230**\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148**\n\n1. \u5904\u4e8e**\u5230\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9 \u5747 + 1**\n\n\u8003\u8651\u5230**\u672c\u9898\u7684\u6570\u636e\u91cf**\uff0c\u904d\u5386\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u8def\u5f84\uff0c\u7136\u540e\u9010\u4e2a\u52a0 1\uff0c\u663e\u7136\u4e0d\u53ef\u80fd\n\n\u4e0e\u533a\u95f4\u52a0\u503c\u6709\u5173\u7cfb\u7684\uff1a\n\n- \u7ebf\u6bb5\u6811\n\n- \u5dee\u5206\n\n- \u6811\u72b6\u6570\u7ec4\n\n**\u7ebf\u6bb5\u6811** \u548c **\u6811\u72b6\u6570\u7ec4**\u7528\u4e8e\u6570\u8f74\u4e0a\u7684\u5904\u7406\u6bd4\u8f83\u591a\uff0c\u800c\u6811\u4e0a\u7684\u8def\u5f84\u662f**\u65e0\u6cd5\u8868\u793a\u6210\u4e00\u4e2a\u4e2a\u533a\u95f4**\n\n\u8fd9\u91cc**\u5dee\u5206\u7684\u4f18\u70b9**\u5c31\u975e\u5e38\u660e\u663e\u4e86\uff1a\n\n- \u7b97\u6cd5\u590d\u6742\u5ea6\u8d85\u4f4e\n\n- \u9002\u7528\u4e8e**\u4e00\u5207 \u8fde\u7eed\u7684 \u201c\u7ebf\u6bb5\u201d**\n\n\u8fd9\u91cc\u6240\u8c13\u7684\u7ebf\u6bb5\u53ef\u4ee5\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u4e5f\u53ef\u4ee5\u662f**\u8def\u5f84**\n\n\u552f\u4e00\u7684\u95ee\u9898\u662f**\u600e\u4e48\u5dee\u5206**\uff1f\n\n\u6211\u4eec\u5148\u6682\u65f6**\u629b\u5f00\u8fd9\u9053\u9898\u76ee**\uff0c\u60f3\u8c61\u4e00\u4e0b\u51fa\u4e00\u6761\u94fe\u8868...\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/jkm5lbts.png)\n\n\u628a**1 -> 5\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u503c\u5168\u4f53\u52a01**\n\n\u73b0\u5728\u6765\u5904\u7406\u5dee\u5206\u6570\u7ec4\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/frepwnug.png)\n\n\u53ef\u4ee5\u5f88\u6e05\u695a\u7684\u770b\u5230\uff0c1\u53f7\u8282\u70b9\u7684\u503c\u88ab\u589e\u52a01\uff0c\u5728 6\u53f7\u8282\u70b9\u7684\u503c\u88ab\u51cf\u53bb1\n\n\u6b63\u786e\u6027\u5f88\u597d\u8bf4\u660e\uff1a\u5dee\u5206\u6570\u7ec4\u7684\u7684\u5b9a\u4e49\uff1aa[ i ] = a[ i - 1 ] + \u5dee\u5206\u6570\u7ec4[ i ],\n\n\u7531\u4e8e\u533a\u95f4[1, 5]\u533a\u95f4\u5185\uff0c**\u4e24\u4e2a\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u5927\u5c0f**\u4e0d\u4f1a\u6539\u53d8\uff0c\u6539\u53d8\u7684\u53ea\u662f**a[1]\u76f8\u5bf9\u4e8ea[0]\u7684\u5927\u5c0f**\u548c**a[5]\u76f8\u5bf9\u4e8ea[6]\u7684\u5927\u5c0f**\uff0c\u56e0\u6b64\u53ea\u9700\u628aa[1] + 1\uff0ca[6] - 1\u5373\u53ef\uff1b\n\n\n\u53ef\u4ee5\u603b\u7ed3\u51fa**\u5dee\u5206\u7684\u601d\u60f3\u65b9\u6cd5**\uff1a\n\n\u5982\u679c\u6709\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u6743\u503c\u53d1\u751f\u76f8\u540c\u7684\u6539\u53d8\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u5dee\u5206\u7684\u601d\u60f3\u65b9\u6cd5\n\n\u800c**\u5dee\u5206\u7684\u601d\u60f3\u65b9\u6cd5\u5728\u4e8e\u4e0d\u76f4\u63a5\u6539\u53d8\u533a\u95f4\u5185\u7684\u503c**\uff0c\u800c\u662f\u6539\u53d8\u533a\u95f4[ L , r ] \u5bf9\u4e8e \u533a\u95f4 [ 0, L - 1 ] & \u533a\u95f4[ r + 1, R]\u7684 **\u76f8\u5bf9\u5927\u5c0f**\u5173\u7cfb\n\n**\u603b\u7ed3\u51fa\u4e00\u70b9\uff1a**\n\n#### \u5dee\u5206\u5c31\u662f\u76f8\u5bf9\u6539\u53d8 \uff01\n\n### \u5dee\u5206\u5c31\u662f\u76f8\u5bf9\u6539\u53d8\uff01\uff01\n\n## \u5dee\u5206\u5c31\u662f\u76f8\u5bf9\u6539\u53d8\uff01\uff01\uff01\n\n\u53ea\u8981\u6211\u4eec\u80fd\u627e\u51fa\u533a\u95f4\u548c\u533a\u95f4\u4e4b\u95f4**\u76f8\u5bf9\u6539\u53d8\u7684\u5173\u7cfb**\uff0c\u4e00\u5207\u5747\u80fd\u88ab**\u5dee\u5206**\u8f7b\u677e\u7684\u89e3\u51b3\n\n\u53e6\u6ce8\uff1a~~\uff08\u9632\u6b62\u63a5\u4e0b\u6765\u6709\u4eba\u4f1a\u770b\u7684\u4e91\u91cc\u96fe\u91cc\u7684\uff09~~\n\n**\u63a5\u4e0b\u6765\u6240\u6709\u201c\u5b50\u8282\u70b9\u201d\u6307\u201c \u76f4\u7cfb\u5b50\u8282\u70b9\u201d\uff01\uff01\uff01\uff01**\n\n![\u76f4\u7cfb\u513f\u5b50](https://cdn.luogu.com.cn/upload/image_hosting/flcy23s2.png)\n\n**\u76f4\u7cfb\u5b50\u8282\u70b9**\u6307\u7684\u662f\u548c\u7236\u8282\u70b9\u6709\u4e00\u6761\u8fb9**\u76f4\u63a5\u76f8\u8fde**\u7684\u5b50\u8282\u70b9\n\n\n# \u4e8c\uff1a**\u6811\u4e0a\u5dee\u5206**\n![](https://cdn.luogu.com.cn/upload/image_hosting/vp8bn2i6.png)\n\n\u7c7b\u6bd4\u521a\u624d\u7684\u5dee\u5206\uff0c\n\n\u5982\u679c\u628as -> t\u7684**\u8def\u5f84\u4e0a**\u7684\u6240\u6709**\u8282\u70b9\u7684\u6743\u503c**\u90fd\u52a0\u4e0a w\uff0c\n\n\u6211\u4eec\u5047\u5b9a\u4e00\u4e2a\u7236\u8282\u70b9u = **\u5176\u6240\u6709\u7684\u5b50\u8282\u70b9** + **\u4ed6\u672c\u8eab\u7684\u5dee\u5206\u6570\u7ec4**\n\n\u5199\u51fa\u4f2a\u4ee3\u7801\uff1a\n\n```cpp\n//chafen[ maxn ]\uff1a\u5dee\u5206\u6570\u7ec4\uff0c\u5b9a\u4e49 \u5f53\u524d\u8282\u70b9 \u4e0e\u5176\u5b50\u6811\u7684\u603b\u548c\u4e4b\u5dee \n//num[ maxn ]: \u5f53\u524d\u8282\u70b9\u7684\u6743\u503c \n\nint chafen[maxn], a[maxn];\n\nnum[u] += chafen[u];//\u52a0\u4e0a\u5dee\u5206\u6570\u7ec4 \n\n//\u52a0\u4e0a\u5b50\u6811\u7684\u603b\u548c \nfor(\u904d\u5386\u4e0e u \u76f8\u8fde\u7684\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9 v){\n\tnum[u] += num[v]; \n} \n\n```\n\n\u6211\u4eec\u8981\u5904\u7406\u7684**\u76f8\u5bf9\u6539\u53d8**\u6709\u4ee5\u4e0b\u51e0\u79cd\u53ef\u80fd\uff1a\n\n1. **s -> t\u8def\u5f84\u4e0a\u7684\u70b9**\u4e0e**\u4ed6\u4eec\u7684\u5b50\u8282\u70b9** \u7684\u76f8\u5bf9\u6539\u53d8\n\n1. **s \u4e0e s\u7236\u8282\u70b9** \u7684\u76f8\u5bf9\u6539\u53d8\n\n1. **t \u4e0e t\u5b50\u8282\u70b9** \u7684\u76f8\u5bf9\u6539\u53d8\n\n\n- \u6765\u770b **s -> t \u8def\u5f84\u4e0a\u7684\u70b9\uff08\u4e0d\u5305\u62ec t\uff09** \u548c**\u4ed6\u4eec\u7684\u5b50\u8282\u70b9\u7684\u603b\u548c** \u7684\u76f8\u5bf9\u6539\u53d8\n\n\u6709\u6539\u53d8\u5417\uff1f\n\nA) \u5f53\u7136\u662f\u6709\u7684\n\nB) \u548c **\u81ea\u5df1\u5b50\u8282\u70b9\u7684\u548c** \u53d1\u751f\u76f8\u5bf9\u6539\u53d8...\uff1f\u55ef\u548c **\u5355\u4e2a\u5b50\u8282\u70b9** \u786e\u5b9e\u662f\u6709\u76f8\u5bf9\u6539\u53d8\uff0c\u4f46\u662f\u548c\u4ed6\u7684\u5b50\u8282\u70b9\u7684\u548c\u5e94\u8be5\u662f\u6ca1\u6709\u5427\u3002\n\n\u5982\u679c\u4f60\u9009 A\uff09\u4f60\u53ef\u4ee5\u770b\u4e00\u773c B\uff09\n \n\u5982\u679c\u4f60\u9009 B\uff09\u90a3\u606d\u559c\u4f60\u9009\u5bf9\u4e86\u3002\n\n**\u5dee\u5206\u6570\u7ec4**\u5b58\u50a8**\u8be5\u8282\u70b9\u76f8\u5bf9\u4e8e\u5176\u5b50\u8282\u70b9\u7684\u603b\u548c**\u53d1\u751f\u7684\u76f8\u5bf9\u6539\u53d8\uff0c\u5728**s->t\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684\u5b50\u8282\u70b9** \u5747\u548c **\u4ed6\u4eec\u81ea\u5df1\u53d1\u751f\u4e86\u540c\u6837\u7684\u6539\u53d8**\uff0c\u56e0\u6b64**\u76f8\u5bf9\u6539\u53d8\u4e3a0**\n\n- \u518d\u6765\u770b **t** \u548c **t \u5b50\u8282\u70b9\u603b\u548c** \u7684\u76f8\u5bf9\u6539\u53d8\n\n\u663e\u7136\u662f\u6709\u7684\uff0c\u5927\u5c0f\u4e5f\u5f88\u597d\u770b\u51fa\uff0ct \u6bd4 \u5176\u5b50\u8282\u70b9\u603b\u548c\u9ad8\u51fa\u4e86w, \u56e0\u6b64\u5728\u5904\u7406\u5dee\u5206\u7684\u65f6\u5019\u53ea\u9700\u8981\u628a **t \u7684\u5dee\u5206\u6570\u7ec4\u503c** + w \u5373\u53ef\n\n- \u6700\u540e\u662f s \u4e0e s\u7236\u8282\u70b9\u7684\u76f8\u5bf9\u6539\u53d8\n\ns\u7684\u503c\u589e\u4e86 w\uff0c **s\u7684\u7236\u8282\u70b9**\u76f8\u5bf9\u4e8e**\u5176\u5b50\u6811\u548c** \u5c0f\u4e86s\uff0c\u53ea\u9700\u8981\u628a **s\u7684\u7236\u8282\u70b9\u7684\u5dee\u5206\u6570\u7ec4\u503c - w**\u5373\u53ef\n\n\u8fd9\u6837\u628a**s -> t\u8def\u5f84\u4e0a\u7684\u503c\u5747\u52a0w**\u7684**\u6811\u4e0a\u5dee\u5206**\u7684\u4f2a\u4ee3\u7801\u5c31\u80fd\u5199\u51fa\u6765\u4e86\n\n```cpp\nint chafen[maxn], a[maxn];\n\nnum[u] += chafen[u];//\u52a0\u4e0a\u5dee\u5206\u6570\u7ec4 \n\n//\u628as->t\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u5747\u52a0w,\nchafen[t] += w;\nchafen[s\u7684\u7236\u8282\u70b9] -= w; \n\n//\u5dee\u5206\u6570\u7ec4\u5904\u7406 \n//\u52a0\u4e0a\u5b50\u6811\u7684\u603b\u548c \nfor(\u904d\u5386\u4e0e u \u76f8\u8fde\u7684\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9 v){\n\tnum[u] += num[v]; \n}  \n```\n~~\uff08\u5176\u5b9e\u548c\u666e\u901a\u7684\u5dee\u5206\u5e76\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff09~~\n\n# \u4e09\uff1alca\u4e0a\u7684\u5dee\u5206\n![](https://cdn.luogu.com.cn/upload/image_hosting/9u7v9sfc.png)\n\n\u5982\u4e0a\u56fe\u6240\u793a ~~\uff08\u6211\u968f\u4fbf\u753b\u7684\u6811\uff09~~\n\nlca\u7684\u5dee\u5206\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u7a0d\u5fae\u52a0\u4e86\u4e00\u4e01\u70b9\u4e1c\u897f\uff0c\u6211\u89c9\u5f97\u4e0d\u9700\u8981\u6211\u4ed4\u7ec6\u7684\u8bb2\uff0c~~\u56e0\u4e3a\u5982\u679c\u8981\u662f\u521a\u624d\u7684\u6811\u4e0a\u5dee\u5206\u5b66\u4f1a\u4e86lca\u4e0a\u7684\u5dee\u5206\u8fd8\u662f\u4e0d\u4f1a\u4f60\u80af\u5b9a\u6ca1\u52a8\u8111\u5b50~~\n\n\u5047\u8bbe \u628a4\u548c5\u7684lca\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u503c\u5747 + 1\n\n\u53ef\u4ee5\u628a\u8fd9\u4e2a\u95ee\u9898**\u62c6\u6210\u4e24\u4e2a\u95ee\u9898**\u6c42\u89e3\uff1a\n\n1. 4 -> \u6700\u8fd1\u516c\u5171\u7956\u5148 \u8def\u5f84\u4e0a\u7684\u70b9+1\n\n1. 5 -> \u6700\u8fd1\u516c\u5171\u7956\u5148 \u8def\u5f84\u4e0a\u7684\u70b9+1\n\n\u6700\u540e\u7531\u4e8e\u6700\u8fd1\u516c\u5171\u7956\u5148\u88ab\u591a\u52a0\u4e86\u4e00\u6b21\uff0c\u56e0\u6b64 lca(4,5)\u7684\u5dee\u5206\u6570\u7ec4\u5e94\u8be5 - 1\uff0c\u4ed6\u7684\u7236\u4eb2\u8282\u70b9\u7684\u5dee\u5206\u6570\u7ec4\u5e94\u8be5+ 1\n\n\u7ed9\u51fa\u6240\u6709\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nconst int maxn = 300050;\nconst int maxm = maxn << 1;\nint N, M;\nint a[maxn], t1, t2;\nint head[maxn], cnt;\n\nstruct Edge{\n\tint u, v, next;\n}edge[maxm];\n\ninline void addedge(int u, int v){\n\tedge[++cnt].u = u;\n\tedge[cnt].v = v;\n\tedge[cnt].next = head[u];\n\thead[u] = cnt;\n}\n\nint fa[maxn][31], dep[maxn];\n\nvoid dfs(int u, int faa){\n\tfa[u][0] = faa, dep[u] = dep[faa] + 1;\n\tfor(int i = 1; i <= 30; i++){\n\t\tfa[u][i] = fa[ fa[u][i - 1] ][i - 1];\n\t}\n\tfor(int i = head[u]; i ; i = edge[i].next){\n\t\tint v = edge[i].v;\n\t\tif(v == faa)continue;\n\t\tdfs(v, u);\n\t}\n} \n\ninline int lca(int x, int y){\n\tif(dep[x] < dep[y])swap(x,y);\n\tfor(int i = 30; i >= 0; i--){\n\t\tif(dep[ fa[x][i] ] >= dep[y]) x = fa[x][i];\n\t}\n\tif(x == y)return x;\n\tfor(int i = 30; i >= 0; i--){\n\t\tif(fa[x][i] != fa[y][i]){\n\t\t\tx = fa[x][i], y = fa[y][i];\n\t\t}\n\t}\n\treturn fa[x][0];\n}\n\nint num[maxn];\n\nint answer(int u, int faa){\n\tfor(int i = head[u]; i ; i = edge[i].next){\n\t\tint v = edge[i].v;\n\t\tif(v == faa)continue;\n\t\tanswer(v, u);\n\t\tnum[u] += num[v];\n\t}\n}\nint main(){\n\tcin>>N;\n\tfor(int i = 1; i <= N; i++){\n\t\tcin>> a[i];\n\t}\n\tfor(int i = 1; i < N; i++){\n\t\tcin>> t1>> t2;\n\t\taddedge(t1, t2);\n\t\taddedge(t2, t1);\n\t}\n\tdfs(1, 0);\n\tfor(int i = 1; i <= N - 1; i++){\n\t\tint u = a[i], v = a[i + 1];\n\t\tint t = lca(u, v);\n\t\tnum[ fa[t][0] ]\t-= 1;\n\t\tnum[ t ] -= 1;\n\t\tnum[ u ] += 1;\n\t\tnum[ v ] += 1;\n\t}\n\tanswer(1,0);\n\tfor(int i = 2; i <= N; i++){\n\t\tnum[a[i]]--;\n\t}\n\tfor(int i = 1; i <= N; i++){\n\t\tcout<<num[i]<<endl;\n\t}\n}\n```\n~~\u5b66\u519c\u7684\u65f6\u5019\u8fd8\u8981\u5199\u4e2a\u9898\u89e3\u6c42\u4e2a\u8d5e\u5e94\u8be5\u4e0d\u8fc7\u5206\u5427\uff1f~~",
        "postTime": 1570357354,
        "uid": 208273,
        "name": "dzz1537568241",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "```cpp\n//\u7b2c\u4e00\u6b21A\u6389\u7d2b\u9898\u5c31\u6765\u5199\u9898\u89e3\uff0c\u6211\u662f\u4e0d\u662f\u75af\u4e86 \n//\u8bf4\u5b9e\u8bdd\u8fd9\u9053\u9898\u8fd8\u662f\u6bd4\u8f83\u88f8\u7684\u6811\u4e0a\u5dee\u5206 \n//\u5bf9\u4e8e\u6811\u4e0a\u7684\u4e00\u6761\u8def\u5f84(s,t)\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628ach[s]++,ch[t]++,ch[LCA(S,T)]--,\u518d\u628alca\u7684\u7238\u7238\u51cf\u4e00 \n//\u518ddfs\u8dd1\u4e00\u904d\u5c31\u53ef\u4ee5\u4e86 \n//\u4f46\u8fd9\u9898\u8fd8\u662f\u6709\u4e9b\u4e0d\u4e00\u6837\u7684\uff0c\u8fd9\u9053\u9898\u91cc\u7684\u8def\u5f84\u7ec8\u70b9\u4f1a\u7b97\u4f5c\u4e0b\u4e00\u6761\u8def\u5f84\u7684\u8d77\u70b9 \n//\u89e3\u6cd5\u4e0e\u697c\u4e0b\u7684\u5927\u4f6c\u4eec\u6709\u4e9b\u7c7b\u4f3c\uff0c\u4f46\u6211\u53ef\u80fd\u5199\u7684\u6bd4\u8f83\u597d\u7406\u89e3\u4e00\u4e9b\u5427\uff08\u5176\u5b9e\u53ea\u56e0\u4e3a\u6211\u592a\u5f31\u4e86\uff09 \n//\u8fd8\u662f\u4e0a\u4ee3\u7801\u5427 \n#include<iostream>\n#include<cstring>\n#include<fstream>\n#include<cstdio>\nusing namespace std;\nconst int maxn=300001;\nstruct node\n{\n    int u,v;\n    int nxt;\n}edge[maxn*2];// \u65e0\u5411\u8fb9\uff0c\u9886\u63a5\u8868\u5f00\u4e24\u500d \nint deep[maxn],ch[maxn],head[maxn],a[maxn];\nint f[maxn][30];//\u500d\u589e\u6570\u7ec4\uff0cf[i][j]\u8868\u793ai\u5411\u4e0a\u8df32^j\u5230\u8fbe\u7684\u70b9 \nint n,num=1;\ninline void read(int &x)//\u8bfb\u5165\u4f18\u5316 \n{\n    char c=getchar();\n    x=0;\n    while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=x*10+c-48;\n        c=getchar();\n    }\n}\nvoid add_edge(int x,int y)//\u90bb\u63a5\u8868\u52a0\u8fb9 \n{\n    edge[num].u=x;\n    edge[num].v=y;\n    edge[num].nxt=head[x];\n    head[x]=num;\n    num++;\n}\nvoid build(int r)//\u5efa\u6811 \n{\n    for(int i=head[r];i!=-1;i=edge[i].nxt)\n    {\n        int xx=edge[i].v;\n        if(deep[xx]==0)//\u5982\u679c\u70b9xx\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u7684\u8bdd\n        {\n            deep[xx]=deep[r]+1;\n            f[xx][0]=r;\n            build(xx);//\u7ee7\u7eed\u4ee5xx\u4e3a\u6839\u5efa\u6811 \n        }\n    }\n}\nvoid fill()\n{\n    for(int i=1;i<=29;i++)\n    for(int j=1;j<=n;j++)\n    f[j][i]=f[f[j][i-1]][i-1];//\u7b2cj\u4e2a\u8282\u70b9\uff0c\u5411\u4e0a\u8df3i\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u5148\u8df3\u52302^(i-1)\u5904\u518d\u5411\u4e0a\u8df32^(i-1)\u80fd\u5230\u8fbe\u7684\u8282\u70b9\n}\nint lca(int x,int y)\n{\n    if(deep[x]<deep[y]) swap(x,y);//\u5982\u679cx\u5728y\u4e0a\u9762\uff0c\u4ea4\u6362\u8ba9x\u5f80\u4e0a\u8df3 \n    for(int i=29;i>=0;i--)\n    if(deep[f[x][i]]>=deep[y])\n      x=f[x][i];//\u4f7fx\u8df3\u5230\u4e0ey\u540c\u4e00\u6df1\u5ea6 \n    if(x==y) return x;\n    for(int i=29;i>=0;i--)\n    if(f[x][i]!=f[y][i])\n    {\n        x=f[x][i];\n        y=f[y][i];\n    }\n    return f[x][0];//\u518d\u8df3\u4e00\u6b65\uff0c\u627e\u5230lca \n}\nvoid dfs(int r)\n{\n    for(int i=head[r];i!=-1;i=edge[i].nxt)\n    {\n        int xx=edge[i].v;\n        if(xx==f[r][0]) continue;\n        dfs(xx);\n        ch[r]+=ch[xx];//\u6c42\u5b50\u6811\u548c \n    }\n}\ninline void write(int x)//\u95f2\u7684\u6ca1\u4e8b\u5e72\u52a0\u7684\u8f93\u51fa\u4f18\u5316 \n{\n     if(x>9) write(x/10);\n     putchar(x%10+'0');\n}\nint main()\n{\n    read(n);\n    for(int i=1;i<=n;i++)\n    {\n        read(a[i]);\n        head[i]=-1;\n    }\n    int xx,yy;\n    for(int i=1;i<=n-1;i++)\n    {\n        read(xx);\n        read(yy);\n        add_edge(xx,yy);\n        add_edge(yy,xx);\n    }\n    deep[1]=1;\n    build(1);//\u4ee51\u4e3a\u6839\u5efa\u6811 \n    fill();\n    for(int i=1;i<=n-1;i++)\n    {\n        xx=a[i];\n        yy=a[i+1];\n        ch[xx]++;\n        ch[yy]++;\n        ch[lca(xx,yy)]--;\n        ch[f[lca(xx,yy)][0]]--;\n    }\n    dfs(1);\n    for(int i=2;i<=n;i++)\n        ch[a[i]]--;//\u56e0\u4e3a\u6211\u4eec\u628a\u65e2\u4f5c\u4e3a\u8d77\u70b9\u53c8\u505a\u4e3a\u7ec8\u70b9\u7684\u70b9\u7b97\u4e86\u4e24\u6b21\uff0c\u73b0\u5728\u628a\u8fd9\u4e9b\u70b9\u7684\u6743\u503c\u51cf\u4e00\u5373\u53ef \n    for(int i=1;i<=n;i++)\n    {\n        write(ch[i]);\n        putchar(char(10));//char(10)\u5373\u6362\u884c \n    }\n    return 0;\n}\n```",
        "postTime": 1507007825,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "# \u6811\u94fe\u5256\u5206\u677f\u5b50\u9898\n## \u5148\u8bf4\u70b9\u522b\u7684\n\n**\u5c0f\u718a\u7ef4\u5c3c\u554a\uff0c\u563f\u563f\u563f\u3002**\n### \u5199\u9898\u7ecf\u5386\n\n\u60b2\u60e8\u547d\u8fd0\uff1a\u6811\u5256\u8c03\u4e862\u5929\uff0c\u4e00\u76f490\u5206\uff0c\u6b7b\u6d3b\u4e0dAC\uff0c\u8c03\u51fa\u4e86\u5fc3\u75c5\uff0c\u5feb\u4e0b\u8bfe\u65f6\u6539\u4e86\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff0cA\u4e86\u2026\u2026\u3002\uff08\u521a\u5f00\u59cb\u6570\u7ec4\u5f00\u4e86800100\uff0c\u65391200100\u8fc7\u4e86\uff09\n\n\u6240\u4ee5\u8bf4\u554a\uff0c\u7ebf\u6bb5\u6811\u5fc5\u987b\u8981\u6ce8\u610f\u6570\u636e\u8303\u56f4\uff0c\u8981\u5f004\u500d\uff0c\u4e0d\u7136\u4f1a\u60f3\u50bbX\u4f5c\u8005\u4e00\u6837\u8c03\u51fa\u5fc3\u75c5\u3002\uff08\u592a\u53ef\u6015\u4e86\uff0c\u6570\u636e\u8303\u56f4\u5c0f\u4e86\uff0c\u4e0dRE\uff0c\u7adf\u7136WA\uff0c\u8bc4\u6d4b\u673a\u592a\u53ef\u6015\u4e86QAQ\uff09\n\n\u5410\u69fd\uff0c\u6811\u94fe\u5256\u5206\u9898\u600e\u4e48\u90fd\u6bd4\u3010\u6a21\u677f\u3011\u6811\u94fe\u5256\u5206 \u7b80\u5355\n### \u524d\u7f6e\u6280\u80fd\n\n1\u3001\u7ebf\u6bb5\u6811 2\u3001\u6811\u94fe\u5256\u5206 \n\n\u5982\u679c\u4f60\u5df2\u7ecf\u8fc7\u4e86[P3384 \u3010\u6a21\u677f\u3011\u6811\u94fe\u5256\u5206](https://www.luogu.org/problemnew/show/P3384)\u8fd9\u9053\u9898\u3002\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u662f\u9644\u8d60\u7684\u7d2b\u9898\u54c8\u3002\n\n## \u601d\u8def\n\u6211\u4eec\u77e5\u9053\u6811\u94fe\u5256\u5206\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n1\u3001\u5728\u6811\u4e2d\u5c06u\u5230v\u8282\u70b9\u6570\u503c\u5168\u90e8\u52a0\u4e00\u4e2a\u503c\u3002\n\n2\u3001\u67e5\u8be2\u6811\u4e2du\u5230v\u8282\u70b9\u7684\u6570\u503c\u548c\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u628a\u5c0f\u718a\u7ef4\u5c3c\u53bb\u6bcf\u4e00\u4e2a\u623f\u95f4\u62bd\u8c61\u6210\u4e00\u4e2a\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u4eceu\u623f\u95f4\u53bb\u5230v\u623f\u95f4\uff0c\u5219\u8981\u5728u\u5230v\u4e4b\u95f4\u90fd\u653e\u4e00\u4e2a\u7cd6\u679c\uff0c\u4e8e\u662f\u6211\u4eec\u5c06\u677e\u9f20\u5b83\u5bb6u\u5230v\u7684\u7cd6\u679c\u6570\u90fd\u52a01\u3002\n\n\u770b\u5230\u8fd9\u91cc\uff0c\u60f3\u5230\u6811\u5256\u5199\u6cd5\u4e86\u5427\uff0c\u6bcf\u4e00\u6b21\u5c06a[i]\u5230a[i+1] (a\u6570\u7ec4\u662f\u8bbf\u95ee\u987a\u5e8f)\u7684\u8282\u70b9\u52a01\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\u505a\u3002\n\n\u67e5\u8be2\u53ea\u9700\u8981\u67e5\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u5c31OK\u4e86\u3002\n\n\u5f53\u7136\u8fd8\u6709\u4e9b\u7ec6\u8282\uff0c\u5728\u5904\u7406\u5b8c\u4e00\u6b21\u4fee\u6539\u540e\uff0c\u7ec8\u70b9\u8981\u51cf1\uff0c\u4e0d\u7136\u4f1a\u91cd\u590d\u8ba1\u7b97\u3002\n\n## \u4ee3\u7801\n```cpp\n//by:hyfhaha \n#include<bits/stdc++.h>\nusing namespace std;\nconst long long maxn=1200100;\t\t//\u7279\u4ee5\u6b64\u7eaa\u5ff5\u672c\u4eba\u6570\u636e\u8303\u56f4\u5f00\u5c0f\u536190\u5206\u5361\u4e24\u5929\nint a[maxn],tree[maxn],tag[maxn],n,m,mode,x,y,z,S,cnt;\nint large[maxn],seg[maxn],father[maxn],vis[maxn],dep[maxn],son[maxn],rev[maxn],top[maxn];\nint Next[maxn],head[maxn],from[maxn],to[maxn],id[maxn],tot;\n//********************\u4ee5\u4e0b\u7ebf\u6bb5\u6811********************\nvoid pushdown(int node,int begin,int end){\n    if(tag[node]){\n        int m=(begin+end)/2;\n        tree[node*2]+=tag[node]*(m-begin+1);\n        tree[node*2+1]+=tag[node]*(end-m);\n        tag[node*2]+=tag[node];\n        tag[node*2+1]+=tag[node];\n        tag[node]=0;\n    }\n}\nint query(int node,int begin,int end,int x,int y){\n    if(x<=begin&&end<=y)\n    return tree[node];\n    else{\n        int m=(begin+end)/2,res=0;\n        pushdown(node,begin,end);\n        if(x<=m)\n            res+=query(node*2,begin,m,x,y);\n        if(y>m)\n            res+=query(node*2+1,m+1,end,x,y);\n        return res;\n    }\n}\nvoid update(int node,int begin,int end,int x,int y,int val){\n    if(x<=begin&&end<=y){\n        tree[node]+=val*(end-begin+1);\n        tag[node]+=val;\n    }\n    else{\n        int m=(begin+end)/2; \n        pushdown(node,begin,end);\n        if(x<=m){\n            update(node*2,begin,m,x,y,val);\n        }\n        if(y>m){\n            update(node*2+1,m+1,end,x,y,val);\t\t\t\t\t \n        }\n        tree[node]=tree[node*2]+tree[node*2+1];\n    }\n}\n//********************\u4ee5\u4e0a\u7ebf\u6bb5\u6811********************\n//********************\u4ee5\u4e0b\u6811\u94fe\u5256\u5206********************\nvoid dfs1(int x,int f){\n    large[x]=1;father[x]=f;\n    dep[x]=dep[f]+1;\n    int maxy=0;\n    for(int i=head[x];i!=-1;i=Next[i]){\n        int u=to[i],big=0;\n        if(u==f)continue;\n        dfs1(u,x);\n        large[x]+=large[u];\n        if(large[u]>maxy){son[x]=u;maxy=large[u];}\n    }\n}\nvoid dfs2(int x,int f){\n    top[x]=f;id[x]=++tot;\n    if(!son[x]){\n        return;\n    }\n    dfs2(son[x],f);\n    for(int i=head[x];i!=-1;i=Next[i]){\n        int u=to[i];\n        if(u!=son[x]&&u!=father[x]){\n            dfs2(u,u);\n        }\n    }\n}\nvoid updatelong(int x,int y,int z){\n    while(top[x]!=top[y]){\n        if(dep[top[x]]<=dep[top[y]]){\n        \tupdate(1,1,n,id[top[y]],id[y],z);\n       \t \ty=father[top[y]];\n    \t}else{\n    \t\tupdate(1,1,n,id[top[x]],id[x],z);\n       \t \tx=father[top[x]];\n        }\n    }\n    if(dep[x]>dep[y])swap(x,y);\n    update(1,1,n,id[x],id[y],z);\n}\n//********************\u4ee5\u4e0a\u6811\u94fe\u5256\u5206********************\nvoid add(int x,int y){\t//\u5efa\u8fb9 \n    cnt++;\n    from[cnt]=x;to[cnt]=y;\n    Next[cnt]=head[x];head[x]=cnt;\n}\n//********************\u4ee5\u4e0b\u4e3b\u7a0b\u5e8f********************\nint main(){\n    scanf(\"%d\",&n);S=1;\n    memset(head,-1,sizeof(head));\n    for(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n    for(int i=1;i<=n-1;i++){\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);add(y,x);\n    }\n    dfs1(S,0);dfs2(S,S);\n    for(int i=1;i<=n-1;i++){\n    \tupdatelong(a[i],a[i+1],1);\n    \tupdatelong(a[i+1],a[i+1],-1);//\u8bb0\u5f97\u7ec8\u70b9\u51cf1\n    }\n    for(int i=1;i<=n;i++)\n    printf(\"%d\\n\",query(1,1,n,id[i],id[i]));\n}//\u5149\u68cd\u6570\u5b57\u6536\u573a \n```\n",
        "postTime": 1544157106,
        "uid": 58711,
        "name": "hyfhaha",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "## \u4e00\u3001\u601d\u8def\u89e3\u6790  \n\u7ed9\u51fa\u4e00\u68f5\u6811\uff0c\u8981\u6c42\u6309\u987a\u5e8f\u8d70\u5b8c\u7ed9\u5b9a\u7684\u6240\u6709\u70b9\uff0c\u6bcf\u79fb\u52a8\u4e00\u6b65\u5c31\u8981\u7ed9\u8fd9\u6b21\u79fb\u52a8\u7ecf\u8fc7\u7684\u70b9\u589e\u52a0$1$\u7684\u70b9\u6743\u3002\u6c42\u6bcf\u4e00\u4e2a\u70b9\u7684\u6700\u5c0f\u70b9\u6743\u3002  \n\u663e\u7136\u8fd9\u662f\u4e00\u4e2a\u6811\u4e0a\u5dee\u5206\u7684\u9898\u76ee\uff0c\u56e0\u4e3a\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4**\u6709\u4e14\u4ec5\u6709**\u4e00\u6761\u6700\u77ed\u8def\u3002\u5e76\u4e14\uff0c\u53ea\u6709\u6bcf\u4e00\u6b65\u90fd\u8d70\u6700\u77ed\u8def\uff0c\u6700\u7ec8\u7684\u7b54\u6848\u624d\u4f1a\u662f\u6700\u4f18\uff08\u6811\u4e0a\u4e24\u70b9\u95f4\u65e0\u8bba\u5982\u4f55\u8d70\uff0c\u7ecf\u8fc7\u7684\u8fb9\u7ec4\u6210\u7684\u8fb9\u96c6\u4e00\u5b9a\u5305\u542b\u6700\u77ed\u8def\u4e0a\u7684\u6240\u6709\u70b9\uff09\u3002  \n\u6240\u4ee5\uff0c\u4e0d\u96be\u60f3\u5230\u4ee5\u4e0b\u7684\u89e3\u6cd5\uff1a  \n```cpp\nvoid work(int u, int v) {\n    \u6c42\u51fau, v\u7684LCA,\n    \u540c\u65f6\u5c06\u7ecf\u8fc7\u7684\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743+1;\n}\nfor(int i = 1; i < n; ++i)\n\twork(a[i], a[i + 1]);\nfor(innt i = 1; i <= n; ++i)\n\tprintf(\"%d\\n\", ans[i]);\n```\n\u53ef\u60dc\uff0c\u8fd9\u6837\u7684\u4ee3\u7801\u5b58\u5728\u95ee\u9898\uff1a\n### 1\u3001\u7b54\u6848\u9519\u8bef\n\u5728\u4e0a\u9762\u7684\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u5c06\u6240\u6709\u7ecf\u8fc7\u7684\u70b9\u7684\u70b9\u6743$+1$\uff0c\u8fd9\u6837\u6bcf\u6b21\u5c31\u91cd\u590d\u8ba1\u7b97\u4e86\u4f5c\u4e3a\u51fa\u53d1\u70b9\u548c\u7ec8\u5230\u70b9\u7684\u70b9\u7684\u70b9\u6743\u3002\u6bd4\u5982\u8bf4\uff0c\u5bf9\u4e8e\u4e0b\u9762\u7684\u6570\u636e\uff1a  \n![](https://raw.githubusercontent.com/Sparky-14145/items/master/pictures/\u677e\u9f20\u7684\u65b0\u5bb61.png)  \n\u6309\u7167\u4e0a\u9762\u7684\u7b97\u6cd5\uff0c\u5f97\u5230\u8f93\u51fa\uff1a  \n```plain\n2\n1\n0\n```\n\u53ef\u662f\uff0c\u5b9e\u9645\u4e0a\u6b63\u786e\u7684\u8f93\u51fa\u5e94\u8be5\u662f\uff1a  \n```plain\n1\n1\n0\n```\n\u9519\u8bef\u7684\u539f\u56e0\u4fbf\u662f\u4e0a\u9762\u8bf4\u7684\u91cd\u590d\u8ba1\u7b97\u3002  \n### 2\u3001\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\n\u5982\u679c\u6574\u68f5\u6811\u9000\u5316\u6210\u4e00\u6761\u94fe\uff0c\u6bcf\u4e00\u6b21\u4ece\u94fe\u7684\u4e00\u6bb5\u8d70\u5230\u53e6\u4e00\u7aef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u662f$O(n^2)$\uff0c\u5bf9\u4e8e\u672c\u9898\u800c\u8a00\u592a\u5927\u4e86\u3002  \n### 3\u3001\u89e3\u51b3\u65b9\u6cd5\n\u6211\u4eec\u5148\u6765\u89e3\u51b3\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u95ee\u9898\u3002  \n\u89e3\u51b3\u7684\u65b9\u6cd5\u662f\u5229\u7528\u500d\u589e$LCA+$\u6811\u4e0a\u5dee\u5206\uff0c\u500d\u589e$LCA$\u7684\u6c42\u6cd5\u8be6\u89c1[\u8fd9\u7bc7\u6587\u7ae0](https://sparky-14145.github.io/2018/07/01/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/)\u3002  \n#### \u6811\u4e0a\u5dee\u5206\uff1a\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u6bcf\u4e2a\u70b9\u4e3a\u6839\u7684\u6811\u4fdd\u5b58\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\u3002\u90a3\u4e48\u6bcf\u6b21\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u4e24\u4e2a\u7aef\u70b9\u7684$LCA$\u5373\u53ef\u3002  \n\u4e3a\u4e86\u62b5\u6d88\u5176\u5bf9$LCA$\u53ca\u5176\u4e0a\u65b9\u7684\u70b9\u7684\u5f71\u54cd\uff0c\u9700\u8981\u7ed9$LCA$\u53ca\u5176\u7236\u8282\u70b9\u7684\u6743\u503c$-1$\u3002  \n\u6700\u540e\u9700\u8981\u4e00\u904d$DFS$\u8fd8\u539f\u6240\u6709\u70b9\u7684\u70b9\u6743\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(n)$\u3002  \n\u500d\u589e\u6c42$LCA$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(log\\;n)$\uff0c\u4e8e\u662f\u672c\u9898\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e3a$O(n\\; log\\; n)$\uff0c\u672c\u9898\u53ef\u4ee5\u63a5\u53d7\u3002  \n\u7136\u540e\u518d\u6765\u770b\u9519\u8bef\u7b54\u6848\u7684\u89e3\u51b3\u65b9\u6cd5\u3002  \n\u4ed4\u7ec6\u5206\u6790\u6bcf\u4e00\u4e2a\u70b9\u53ca\u5176\u76f8\u90bb\u7684\u8fb9\uff0c\u53d1\u73b0\u6bcf\u4e2a\u70b9\u88ab\u7ecf\u8fc7\u7684\u65b9\u5f0f\uff0c\u4e0d\u5916\u4e4e\u4ee5\u4e0b\u51e0\u79cd\uff1a  \n![](https://raw.githubusercontent.com/Sparky-14145/items/master/pictures/\u677e\u9f20\u7684\u65b0\u5bb62.png)   \n\u7ed3\u5408\u56fe\u7247\uff0c\u66f4\u8fdb\u4e00\u6b65\u601d\u8003\uff0c\u4e0d\u96be\u53d1\u73b0\u6bcf\u6761\u8def\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u7684\u7ecf\u8fc7\u6b21\u6570\u4e3a\uff1a$$\\frac{1 + \\sum_{i=1}^{n}cnt[i]}{2} \\text{i\u662f\u4e0e\u8fd9\u4e2a\u70b9\u76f8\u8fde\u7684\u8fb9\u7684\u7f16\u53f7\uff0cn\u662f\u4e0e\u8fd9\u4e2a\u70b9\u76f8\u8fde\u7684\u8fb9\u7684\u6570\u91cf}$$\u3002   \n\u5e76\u4e14\uff0c\u672c\u9898\u7684\u9898\u610f\u4fbf\u662f\u7edf\u8ba1\u4e00\u6761\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684\u7ecf\u8fc7\u6b21\u6570\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7edf\u8ba1\u8fb9\u7684\u7ecf\u8fc7\u6b21\u6570\u6765\u8fbe\u5230\u7edf\u8ba1\u70b9\u7684\u7ecf\u8fc7\u6b21\u6570\u7684\u76ee\u7684\u3002  \n\u8fd9\u65f6\uff0c\u5dee\u5206\u7edf\u8ba1\u7684\u5bf9\u8c61\u7531\u70b9\u53d8\u4e3a\u8fb9\u3002\u8fd9\u5e76\u6ca1\u6709\u5e26\u6765\u4efb\u4f55\u56f0\u96be\uff0c\u53ea\u8981\u7528\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u7684\u70b9\u6743\u548c\u8868\u793a\u8fd9\u4e2a\u70b9\u5230\u7236\u8282\u70b9\u76f8\u8fde\u7684\u8fb9\u7684\u7ecf\u8fc7\u6b21\u6570\uff0c\u540c\u65f6\uff0c\u5dee\u5206\u65f6\u4fee\u6539LCA\u7684\u6743\u503c$-2$\u5c31\u53ef\u4ee5\u4e86\u3002  \n## \u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\nusing namespace std;\nstruct Path{\n    int next, ends;\n    int wei;\n}ph[600020];\nint pta[300010], fa[40][300010], d[300010], s[300010], e;\nint cnt[300010];\nbool vis[300010];\nvoid dfs(int p, int dpt){  //\u500d\u589eLCA\u7684\u521d\u59cb\u5316\n    vis[p] = true;\n    d[p] = dpt;\n    for(int i = pta[p]; i; i = ph[i].next){\n        if(vis[ph[i].ends]) continue;\n        fa[0][ph[i].ends] = p;\n        dfs(ph[i].ends, dpt+1);\n    }\n}\nvoid makep(int u, int v){ //\u5efa\u8fb9\n    ph[++e].ends = v;\n    ph[e].next = pta[u];\n    pta[u] = e;\n    ph[++e].ends = u;\n    ph[e].next = pta[v];\n    pta[v] = e;\n}\nint lca(int x, int y){//\u6c42LCA\n    if(d[x] < d[y]) swap(x, y);\n    int dif = d[x] - d[y];\n    for(int i = 30; i >= 0; --i)\n        if(1<<i <= dif)\n        dif -= 1<<i,\n        x = fa[i][x];\n    if(x == y) return x;\n    for(int i = 30;i >= 0;--i)\n        if(fa[i][x]!=fa[i][y])\n        x=fa[i][x],y=fa[i][y];\n    if(x == y) return x;\n    else return fa[0][x];\n}\nint dfs_ans(int p){ //\u8fd8\u539f\u7b54\u6848\n    int ans = cnt[p]; //\u52a0\u4e0a\u81ea\u8eab\u6743\u503c\n    vis[p] = true;\n    for(int i = pta[p]; i; i = ph[i].next){\n        if(vis[ph[i].ends]) continue;\n        ans += ph[i].wei = dfs_ans(ph[i].ends); //\u8fb9i\u7684\u6743\u503c\u4e3a\u5b50\u6811\u6743\u503c\u548c\n    }\n    for(int i = pta[p]; i; i = ph[i].next){\n        if(ph[i].ends == fa[0][p]) ph[i].wei = ans, i = 0;\n        //\u627e\u5230\u6307\u5411\u7236\u4eb2\u7684\u8fb9\uff08\u56e0\u4e3a\u4e00\u6761\u65e0\u5411\u8fb9\u88ab\u5b58\u62102\u6761\u6709\u5411\u8fb9\uff09\n    }\n    return ans;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; ++i)\n        scanf(\"%d\", s+i);\n    for(int i = 1; i < n; ++i){\n        int a, b;\n        scanf(\"%d %d\", &a, &b);\n        makep(a, b);\n    }\n    fa[0][s[1]] = s[1]; dfs(s[1], 1);\n    for(int i = 1; 1<<i <= n; ++i) //\u500d\u589e\u9884\u5904\u7406\u7b2c\u4e8c\u6b65\n    for(int j = 1; j <= n; ++j)\n        fa[i][j] = fa[i-1][fa[i-1][j]];\n    for(int i = 1; i < n; ++i) //\u5904\u7406\u6bcf\u4e00\u6b65\n        cnt[s[i]]++,cnt[s[i+1]]++,\n        cnt[lca(s[i],s[i+1])] -= 2;\n    memset(vis, 0, sizeof(vis));\n    dfs_ans(s[1]);\n    for(int i = 1; i <= n; ++i){\n        int ans = 0;\n        for(int j = pta[i]; j; j = ph[j].next)\n            ans += ph[j].wei;\n        if(i == s[n]) ans--;//\u7ed3\u675f\u65f6\u4e0d\u9700\u8981\u518d\u589e\u52a0\u6743\u503c\n        printf(\"%d\\n\", (ans+1)>>1);//\u5411\u4e0a\u53d6\u6574\n    }\n    return 0;\n}\n```\n## \u4e09\u3001\u603b\u7ed3  \n\t1\u3001\u500d\u589e\u6c42LCA\u662f\u4e2a\u5f88\u7075\u6d3b\u7684\u7b97\u6cd5\uff0c\u8981\u5b66\u4f1a\u719f\u7ec3\u7f16\u5199\u3001\u8fd0\u7528\uff1b\n\t2\u3001\u4e5f\u6709\u76f4\u63a5\u7edf\u8ba1\u70b9\u7684\u7ecf\u8fc7\u6b21\u6570\uff0c\u7136\u540e\u628a\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9\u6743\u503c-1\u7684\u89e3\u6cd5\uff0c\u8bfb\u8005\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002",
        "postTime": 1532315403,
        "uid": 67387,
        "name": "Mosklia",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u4e3b\u8981\u8bb2\u4e00\u8bb2\n# \u6811\u4e0a\u5dee\u5206\n\u987e\u540d\u601d\u4e49\uff0c\u6811\u4e0a\u5dee\u5206\u5c31\u662f\u5728\u6811\u4e0a\u7684\u5dee\u5206\uff08\uff1f\uff1f\uff1f\uff09\n\n\u5b66\u8fc7\u6811\u72b6\u6570\u7ec4\uff08\u533a\u95f4\u4fee\u6539\uff09\u7684\u540c\u5b66\u5e94\u8be5\u4e86\u89e3\uff0c\u5dee\u5206\u5177\u6709\u5f88\u4f18\u79c0\u7684\u6027\u8d28\n\n\u5df2\u77e5\u539f\u6570\u7ec4  a[i],\u8bbe\u5dee\u5206\u6570\u7ec4  b[i]=a[i]-a[i-1]\n\n\u90a3\u4e48\u5c31\u6709 a[i]=b[1]+b[2]+...+b[n]\n\n\u4fee\u6539\u4e5f\u5f88\u65b9\u4fbf\uff0c\u4f8b\u5982\u5bf9\u4e8e\u533a\u95f4\uff08p,q\uff09\u540c\u65f6\u52a0\u4e0ax,\u76f8\u5f53\u4e8e b[p]+=n,b[q+1]-=n\n\n\n\n------------\n\u63a5\u4e0b\u6765\u5c31\u662f\u628a\u7ebf\u6027\u7684\u5dee\u5206\u79fb\u5230\u6811\u4e0a\uff0c\n\n\u540c\u7406\uff0c\u5df2\u77e5\u539f\u6570\u7ec4a[i]\u8868\u793a\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\uff0c\n\n\u6211\u4eec\u8bbe\u5dee\u5206\u6570\u7ec4b[i]=a[i]-sum(a[j])(j\u4e3ai\u7684\u6bcf\u4e2a\u76f4\u63a5\u76f8\u8fde\u7684\u513f\u5b50)\uff1b\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u53f6\u5b50\u8282\u70b9\u7684b[i]\u6070\u597d\u4e3a\u8be5\u70b9\u70b9\u6743a[i],\u6b64\u5916\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u8282\u70b9K\uff0c\n\na[K]=\u4ee5K\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u6240\u6709b[i]\u4e4b\u548c\u3002\n\n\u5982\u679c\u6211\u4eec\u8981\u5bf9\u6811\u4e0a\u7684\u4e00\u6761\u94fe(u,v)\u7684\u70b9\u6743\u8fdb\u884c\u4fee\u6539(\u540c\u65f6\u52a0\u4e0ax)\uff0c\u53ea\u9700\u8981\uff1a\n#### b[u]+=x;\n#### b[v]+=x;\n#### b[lca(u,v)]-=x;\n#### b[fa[lca(u,v)]]-=x;\n### \u6ce8\u610f\u4e3a\u4e86\u4e0d\u5f71\u54cd\u5230\u94fe\u5916\u7684\u5176\u4ed6\u70b9\u6743\uff0clca\uff08u,v\uff09\u7684\u7236\u8282\u70b9\u9700\u8981\u4fee\u6539\uff0c\u53ef\u4ee5\u81ea\u5df1\u63a8\u4e00\u4e0b\u3002\n\n\u8fd9\u662f\u70b9\u6743\u7684\u60c5\u51b5\uff0c\u5982\u679c\u662f\u8fb9\u6743\uff0c\u53ea\u9700\u8981\u628a\u4e00\u4e2a\u70b9\u5230\u7236\u4eb2\u7684\u8fb9\u6743\u8d4b\u7ed9\u81ea\u5df1\u5f53\u4f5c\u70b9\u6743\uff0c\n\n\u7136\u540e\u5f53\u4f5c\u70b9\u6743\u7684\u60c5\u51b5\u505a\u5c31\u597d\u4e86\uff0c\u7ec6\u8282\u9700\u8981\u5904\u7406\u4e00\u4e0b\u3002\n\n------------\n\u5728\u672c\u9898\u4e2d\uff0c\u539f\u6570\u7ec4\u521d\u59cb\u90fd\u662f0\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8bfb\u5165\u3001\u5904\u7406\uff0c\u6700\u540e\u904d\u5386\u6574\u9897\u6811\uff0c\u9012\n\n\n\u5f52\u6c42\u51faa[i]\u5c31ok\u4e86\n\n------------\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint h[300000+5],fa[300000+5][25];\nint vis[300000+5],lg[300000+5],dep[300000+5];\nint a[300000+5],b[300000+5];//a\u4e3a\u7cd6\u679c\u6570,b\u4e3a\u5dee\u5206\u6570\u7ec4\nint m,n,i,j,x,y,tmp;\nstruct EDGE{\n    int from,to,next;\n};\nEDGE e[600000+5];\nvoid add(int a,int b){\n    tmp++;\n    e[tmp].from=a;\n    e[tmp].to=b;\n    e[tmp].next=h[a];\n    h[a]=tmp;\n}\nvoid dfs1(int k){\n    int s=h[k];\n    while(s!=0){\n        int t=e[s].to;\n        if(t!=fa[k][0]){\n            fa[t][0]=k;\n            dep[t]=dep[k]+1;\n            dfs1(t);\n        } \n        s=e[s].next;\n    }\n}\nint lca(int a,int b){\n    if(dep[a]<dep[b]){\n        int t=a;\n        a=b;\n        b=t;\n    }\n    while(dep[a]!=dep[b]){\n        int k=lg[dep[a]-dep[b]]-1;\n        a=fa[a][k];\n    }\n    if(a==b) return a;\n    else{\n        for(j=lg[dep[a]]-1;j>=0;j--){\n            if(fa[a][j]!=fa[b][j]){\n                a=fa[a][j];\n                b=fa[b][j];\n            }\n        }\n    }\n    return fa[a][0];\n}\nvoid dfs2(int k){\n    int s=h[k];\n    while(s!=0){\n        int t=e[s].to;\n        if(t!=fa[k][0]){\n            dfs2(t);\n            b[k]+=b[t];\n        }\n        s=e[s].next;\n    }\n}\nint main(){\n    cin>>n;\n    for(i=1;i<=n;i++)\n        scanf(\"%d\",&vis[i]); \n    for(i=1;i<=n-1;i++){\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n        add(y,x);\n    }\n    dfs1(1);\n    for(j=1;j<=20;j++)\n        for(i=1;i<=n;i++)\n            fa[i][j]=fa[fa[i][j-1]][j-1];\n    for(i=1;i<=n;i++)\n        lg[i]=lg[i-1]+(1<<lg[i-1]==i);\n    a[vis[1]]++;\n    for(i=2;i<=n;i++){\n    \tint now=lca(vis[i],vis[i-1]);\n    \tb[vis[i]]++;\n    \tb[vis[i-1]]++;\n    \tb[now]--;\n    \tb[fa[now][0]]--;\n    \ta[vis[i-1]]--;//\u94fe\u9996\u7cd6\u679c\u6570\u76f4\u63a5\u51cf1\n    }\n    a[vis[n]]--;\n    dfs2(1);\n    for(i=1;i<=n;i++)\n        cout<<a[i]+b[i]<<endl;\n    return 0;\n}\n```\n\u660e\u5929\u751f\u65e5\u5199\u7bc7\u9898\u89e3\u5f00\u5fc3\u4e00\u4e0b",
        "postTime": 1558532696,
        "uid": 27771,
        "name": "Tofu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u770b\u5230\u524d\u9762$dalao$\u90fd\u662f$Lca$+\u5dee\u5206\u6216\u8005\u6811\u5256+\u7ebf\u6bb5\u6811\uff0c\u6765\u4e00\u53d1\u6811\u5256+\u5dee\u5206\u7684\u9898\u89e3$qwq$  \n\n\u56e0\u4e3a\u672c\u9898\u53ea\u9700\u8981\u67e5\u8be2$1$\u6b21\uff0c\u4f46\u8981\u4fee\u6539$n$\u6b21\uff0c\u6240\u4ee5\u6811\u5256$O(nlog^2n)$\u5bb9\u6613\u7206\uff0c\u91c7\u7528\u5dee\u5206\u5e8f\u5217\u4ee3\u66ff\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u6811\u5256\u3002  \n\n\u5728\u7ef4\u62a4\u5e8f\u5217$a[i]$\u65f6\uff0c\u5dee\u5206\u5e8f\u5217$d[i]$\u5b58\u653e\u7684\u662f$a[i]-a[i-1]$\u7684\u503c\uff0c\u4e0e\u524d\u7f00\u548c\u4e92\u4e3a\u9006\u8fd0\u7b97(\u53e3\u80e1)\uff08\u9003\n\n\u5dee\u5206\u5e8f\u5217\u7684\u524d\u7f00\u548c$SumD[i]$\u7684\u503c\u5c31\u662f\u539f\u5e8f\u5217$a[i]$  \n\u5dee\u5206\u5e8f\u5217\u53ef\u4ee5\u652f\u6301$O(1)$\u533a\u95f4\u4fee\u6539\u4e0e$O(n)$\u67e5\u8be2(\u7edf\u8ba1\u4e00\u904d\u524d\u7f00\u548c) \n\n\u4e8e\u662f\u6211\u4eec\u7528\u6811\u5256\u5c06\u6811\u5256\u5206\u6210\u5e8f\u5217\uff0c\u7136\u540e\u7528\u5dee\u5206\u7ef4\u62a4\u533a\u95f4\u4fee\u6539\uff0c\u6700\u540e\u7edf\u8ba1\u4e00\u904d\u524d\u7f00\u548c\u5c31\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u4e86\u3002\n\n\u7136\u540e\u5c31\u662f\u6ce8\u610f\u4ece$a[2]$\u5230$a[n-1]$\u6bcf\u4e2a\u70b9\u7ed3\u675f\u88ab\u8ba1\u7b97\u4e86$1$\u6b21\uff0c\u51fa\u53d1\u88ab\u8ba1\u7b97\u4e86$1$\u6b21\uff0c\u4f46\u662f\u7b54\u6848\u53ea\u7b97$1$\u6b21\uff0c\u9700\u8981$-1$\u3002\u53e6\u5916\uff0c\u9898\u76ee\u63cf\u8ff0\u8bf4$a[n]$\u7ed3\u675f\u65f6\u4e0d\u8ba1\u5165\u7b54\u6848\uff0c\u8fd8\u8981\u5355\u72ec$-1$\u3002\n\n```\n#include<cstdio>\n#define MaxN 300123\nint n;\nint a[MaxN],fa[MaxN],son[MaxN],size[MaxN],dep[MaxN],top[MaxN],seg[MaxN],rev[MaxN];\nint d[MaxN],sum[MaxN],seg_cnt;\n//d\u4e3a\u5dee\u5206\u6570\u7ec4\uff0csum\u4e3a\u7528\u6765\u7edf\u8ba1\u524d\u7f00\u548c\u7684\u6570\u7ec4\nstruct Edge{int v,next;}edge[MaxN<<1];\nint head[MaxN],num_edge;\ntemplate<typename T>\ninline void read(T&x)\n{\n\tx=0;int ch=getchar();\n\twhile(ch<48||ch>57)ch=getchar();\n\twhile(ch>47&&ch<58)x=10*x+ch-48,ch=getchar();\n}\ntemplate<typename T>inline void swap(T&a,T&b){a^=b^=a^=b;}\ninline void add_edge(int u,int v)\n{\n\tedge[++num_edge].v=v;\n\tedge[num_edge].next=head[u];\n\thead[u]=num_edge;\n}\ninline void Init()\n{\n\tread(n);\n\tfor(int i=1;i<=n;++i)\n\tread(a[i]);\n\tfor(int i=1,u,v;i<n;++i)\n\t{\n\t\tread(u);read(v);\n\t\tadd_edge(u,v);\n\t\tadd_edge(v,u);\n\t}\n\ttop[1]=1;\n}\ninline void Dfs1(int u=1,int f=0)\n{\n\tfa[u]=f;size[u]=1;dep[u]=dep[f]+1;\n\tfor(int i=head[u];i;i=edge[i].next)\n\t{\n\t\tif(edge[i].v==f)continue;\n\t\tDfs1(edge[i].v,u);\n\t\tsize[u]+=size[edge[i].v];\n\t\tif(size[edge[i].v]>size[son[u]])\n\t\tson[u]=edge[i].v;\n\t}\n}\ninline void Dfs2(int u=1)\n{\n\tseg[u]=++seg_cnt;\n\trev[seg_cnt]=u;\n\tif(son[u])\n\t{\n\t\ttop[son[u]]=top[u];\n\t\tDfs2(son[u]);\n\t}\n\tfor(int i=head[u];i;i=edge[i].next)\n\t{\n\t\tif(!top[edge[i].v])\n\t\t{\n\t\t\ttop[edge[i].v]=edge[i].v;\n\t\t\tDfs2(edge[i].v);\n\t\t}\n\t}\n}\n#define modify(l,r) ++d[(l)],--d[(r)+1]\ninline void Modify(int u,int v)\n{\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(dep[top[u]]<dep[top[v]])\n\t\tswap(u,v);\n\t\tmodify(seg[top[u]],seg[u]);\n\t\tu=fa[top[u]];\n\t}\n\tif(dep[u]>dep[v])swap(u,v);\n\tmodify(seg[u],seg[v]);\n}\ninline void Print()\n{\n\tfor(int i=1;i<=n;++i)\n\tsum[i]=sum[i-1]+d[i];\n\t++sum[seg[a[1]]];\n   //\u8f93\u51fa\u7684\u65f6\u5019\u7ed9\u6bcf\u4e2a\u6570-1\uff0c\u4f46\u662fa[1]\u6ca1\u6709\u591a\u8ba1\u5165\uff0c\u5c31\u8865\u4e0a\n   //\u672c\u6765\u554aa[n]\u4e5f\u5e94\u8be5\u8865\u7684\uff0c\u4f46\u662fa[n]\u6700\u540e\u8981-1\uff0c\u5c31\u62b5\u6d88\u4e86\n\tfor(int i=1;i<=n;++i)\n\tprintf(\"%d\\n\",sum[seg[i]]-1);\n   //\u6b64\u5904\u7ed9\u6bcf\u4e2a\u6570\u51cf\u4e861\n}\ninline void Work()\n{\n\tfor(int i=1;i<n;++i)\n\tModify(a[i],a[i+1]);\n}\nint main()\n{\n\tInit();\n\tDfs1();\n\tDfs2();\n\tWork();\n\tPrint();\n\treturn 0;\n}\n```\n\n\u8bf4\u5b9e\u8bdd\u611f\u89c9\u6076\u610f\u8bc4\u5206$qwq$",
        "postTime": 1553147046,
        "uid": 77609,
        "name": "BeyondHeaven",
        "ccfLevel": 9,
        "title": "\u9898\u89e3\u3010P3258\u3011[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6"
    },
    {
        "content": "\u521a\u5b66\u5b8c\u6811\u5256\uff0c\u51c6\u5907\u6765\u5237\u6a21\u677f\u9898\u3002\u3002\u3002\n\n\u7b2c\u4e00\u6b21\u770b\u5230\u9898\u76ee\uff0c\u89c9\u5f97\u8fd9\u5c31\u662f\u88f8\u7684\u6811\u5256\uff0c\u4f46\u4e00\u770b\u9898\u89e3\uff0cLCA+\u6811\u4e0a\u5dee\u5206\u2026\u2026\n\n\u7784\u4e00\u773c\u6570\u636e\u8303\u56f4\uff0c\u611f\u89c9\u6709\u70b9\u614c\u3002\u3002\u3002\n\n\u4f46\u849f\u84bb\u8fd8\u662f\u6253\u4e86\u4e00\u6ce2\uff0c\u7ed3\u679c\u8fc7\u4e86\uff1f\uff1f\uff1f\n\n\u8bb2\u4e00\u8bb2\u89e3\u6cd5\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u6210n-1\u6b21\u8d4b\u503c\uff0c\u6bcf\u6b21\u8d4b\u503c\u90fd\u662f\u4ecea[i]->a[i+1]\u5168\u90e8\u52a01\uff0c\u7136\u540e\u8f93\u51fa\u6bcf\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u3002\n\n\u6ce8\u610f\uff1aa[2]\u2026\u2026a[n]\u8fd9\u4e9b\u70b9\u5c31\u591a\u7b97\u4e00\u6b21\uff0c\u9700\u8981\u51cf1\u3002\n\n\u6ce8\u91ca\u5199\u5728\u4ee3\u7801\u91cc\u5427\u3002\u3002\u3002\n\nPascal Code\uff1a\n\n```cpp\n// luogu-judger-enable-o2//O2\u3002\u3002\u3002\nvar\n  tree,lazy:array[0..2000005]of longint;\n  head,next,d:array[0..800005]of longint;\n  id,top,size,f,deep,son,a:array[0..400005]of longint;\n  n,i,x,y,num,cnt:longint;\nprocedure add(x,y:longint);//\u94fe\u5f0f\u524d\u5411\u661f\nbegin\n  inc(num);\n  d[num]:=y;\n  next[num]:=head[x];\n  head[x]:=num;\nend;\nprocedure swap(var x,y:longint);//pascal \u545c\u545c\u545c~\nvar\n  t:longint;\nbegin\n  t:=x;\n  x:=y;\n  y:=t;\nend;\nprocedure dfs1(u,fa:longint);//dfs1\u6c42\u51fa\u6bcf\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u3001\u6df1\u5ea6\u3001\u91cd\u513f\u5b50\u548c\u7236\u4eb2\nvar\n  v,ll,sum:longint;\nbegin\n  size[u]:=1;//size\u8bb0\u5f55\u5b50\u6811\u5927\u5c0f\n  sum:=-1;\n  ll:=head[u];\n  while ll<>0 do\n  begin\n    v:=d[ll];\n    if v<>fa then\n    begin\n      deep[v]:=deep[u]+1;//\u6df1\u5ea6\n      dfs1(v,u);\n      size[u]:=size[u]+size[v];//\u5b50\u6811\u5927\u5c0f\n      f[v]:=u;//\u7236\u4eb2\n      if size[v]>sum then//\u66f4\u65b0\u91cd\u513f\u5b50\n      begin\n        sum:=size[v];\n        son[u]:=v;\n      end;\n    end;\n    ll:=next[ll];\n  end;\nend;\nprocedure dfs2(u,topl:longint);//dfs2\u8bb0\u5f55\u91cd\u94fe\u9876\u548cid\nvar\n  v,ll:longint;\nbegin\n  inc(cnt);\n  id[u]:=cnt;\n  top[u]:=topl;\n  if son[u]=0 then\n    exit;\n  dfs2(son[u],topl);\n  ll:=head[u];\n  while ll<>0 do\n  begin\n    v:=d[ll];\n    if (v<>f[u]) and (v<>son[u]) then\n      dfs2(v,v);\n    ll:=next[ll];\n  end;\nend;\n//--------\u4ee5\u4e0b\u4e3a\u7ebf\u6bb5\u6811--------\nprocedure down(p,l,r:longint);//\u6807\u8bb0\u4e0b\u4f20\nbegin\n  if l=r then\n  begin\n    tree[p]:=tree[p]+lazy[p];\n    lazy[p]:=0;\n    exit;\n  end;\n  lazy[p+p]:=lazy[p+p]+lazy[p];\n  lazy[p+p+1]:=lazy[p+p+1]+lazy[p];\n  tree[p]:=tree[p]+(r-l+1)*lazy[p];\n  lazy[p]:=0;\nend;\nprocedure update(p,l,r:longint);//\u6807\u8bb0\u66f4\u65b0\nvar\n  mid:longint;\nbegin\n  if l=r then\n    exit;\n  mid:=(l+r) div 2;\n  down(p+p,l,mid);\n  down(p+p+1,mid+1,r);\n  tree[p]:=tree[p+p]+tree[p+p+1];\nend;\nprocedure change(p,l,r,x,y:longint);//\u5c06[x,y]\u90fd\u589e\u52a01\nvar\n  mid:longint;\nbegin\n  down(p,l,r);\n  if (l=x) and (r=y) then\n  begin\n    inc(lazy[p]);\n    exit;\n  end;\n  mid:=(l+r) div 2;\n  if y<=mid then\n    change(p+p,l,mid,x,y) else\n  if x>mid then\n    change(p+p+1,mid+1,r,x,y) else\n    begin\n      change(p+p,l,mid,x,mid);\n      change(p+p+1,mid+1,r,mid+1,y);\n    end;\n  update(p,l,r);\nend;\nfunction calc(p,l,r,x:longint):longint;//\u8ba1\u7b97x\u8282\u70b9\u7684\u503c\nvar\n  mid:longint;\nbegin\n  down(p,l,r);\n  if l=r then\n    exit(tree[p]);\n  mid:=(l+r) div 2;\n  if x<=mid then\n    exit(calc(p+p,l,mid,x)) else\n    exit(calc(p+p+1,mid+1,r,x));\n  update(p,l,r);\nend;\n//--------\u4ee5\u4e0a\u4e3a\u7ebf\u6bb5\u6811--------\n//--------\u4ee5\u4e0b\u4e3a\u6811\u94fe\u5256\u5206--------\nprocedure ChangeRange(x,y:longint);//\u5c06x->y\u7684\u8def\u5f84+1\nbegin\n  while top[x]<>top[y] do//\u5f53x\uff0cy\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u505c\u6b62\n  begin\n    if deep[top[x]]<deep[top[y]] then\n      swap(x,y);\n    change(1,1,n,id[top[x]],id[x]);\n    x:=f[top[x]];\n  end;\n  if deep[x]>deep[y] then\n    swap(x,y);\n  change(1,1,n,id[x],id[y]);\nend;\nfunction GetRange(x:longint):longint;\nvar\n  ans:longint;\nbegin\n  ans:=calc(1,1,n,id[x]);//\u6ce8\u610f\u662fid[x]\u800c\u4e0d\u662fx\n  exit(ans);\nend;\n//--------\u4ee5\u4e0a\u4e3a\u6811\u94fe\u5256\u5206--------\nbegin\n  readln(n);\n  for i:=1 to n do\n    read(a[i]);\n  readln;\n  for i:=1 to n-1 do\n  begin\n    readln(x,y);\n    add(x,y);\n    add(y,x);\n  end;\n  dfs1(1,0);\n  dfs2(1,1);\n  for i:=1 to n-1 do\n    ChangeRange(a[i],a[i+1]);\n  for i:=1 to n do\n  begin\n    if i=a[1] then//\u7279\u5224\n      writeln(GetRange(i)) else\n      writeln(GetRange(i)-1);\n  end;\nend.\n```\n\n\u7ed3\u675f\u4e86\u5427\u3002\u3002\u3002",
        "postTime": 1535542584,
        "uid": 10341,
        "name": "GK0328",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "### **\u8fd9\u9053\u9898\u6211\u5927\u7ea6\u8c03\u8bd5\u4e86\u5c06\u8fd1\u4e00\u4e2a\u4e2d\u5348\uff0c\u7ed3\u679c\u53d1\u73b0\u662f\u4e00\u4e2azz\u9519\u8bef** \n\u6211\u628a `top[son[u]]=top[u]` \u5199\u6210\u4e86 `top[son[u]]=top[f]` \uff0c~~\u5b8c\u7f8e\u7206\u96f6~~  \n\n\n------------  \n### \u9898\u76ee\u5206\u6790\uff1a  \n\u6839\u636e\u6211\u89c2\u5bdf\u73b0\u6709\u7684\u9898\u89e3\uff0c\u8fd9\u9053\u9898\u6709\u4e24\u79cd\u505a\u6cd5\uff1a  \n1. $LCA$+\u6811\u4e0a\u5dee\u5206\uff08\u7136\u800c\u672c\u849f\u84bb\u592a\u83dc\u4e86\uff0c\u4e0d\u4f1a $QAQ$\uff09\n2. \u6811\u94fe\u5256\u5206\uff08\u4e8e\u662f\u6211\u53ea\u597d\u6253\u4e86\u4e00\u4e2a\u6811\u94fe\u5256\u5206\uff09  \n\n\u90a3\u4e48\uff0c\u6211\u4eec\u600e\u4e48\u6765\u628a\u5b83\u8f6c\u6362\u6210\u6811\u94fe\u5256\u5206\u5462\uff1f  \n\u6211\u4eec\u8fd8\u662f\u5148\u6765\u624b\u73a9\u4e00\u4e0b\u6837\u4f8b\uff1a\uff08\u6211\u5b9a\u4e49\u7684\u662f $1$ \u4e3a\u6839\u8282\u70b9\uff09  \n![](https://cdn.luogu.com.cn/upload/pic/69251.png)  \n\u9996\u5148\u6309\u7167\u9898\u76ee\u7684\u8981\u6c42\uff0c\u6211\u4eec\u5e94\u8be5\u4ece $1$ \u8d70\u5230 $4$ \uff0c\u5e76\u4e14\uff0c\u8d2a\u5403\u7684\u5c0f\u718a\u7ef4\u5c3c\u6bcf\u8d70\u8fc7\u4e00\u4e2a\u623f\u95f4\uff0c\u90fd\u8981\u5403\u4e00\u5757\u7cd6\u679c\uff0c\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u4ece $1$ \u5230 $4$\u7684\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u70b9\u52a0\u4e2a $1$ \uff0c\u4e8e\u662f\uff0c\u8fd9\u9053\u9898\u5c31\u53ef\u4ee5\u88ab\u6211\u4eec\u8f6c\u6362\u6210\u6811\u94fe\u5256\u5206\u7684\u5f62\u5f0f\u6765\u6c42\u89e3\u4e86\u3002  \n\u4f46\u662f\uff0c\u5982\u679c\u5c31\u8fd9\u4e48\u505a\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u7b54\u6848\u548c\u6837\u4f8b\u4e0d\u4e00\u6837\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u9664\u4e86\u6700\u5f00\u59cb\u8d70\u7684\u8282\u70b9\u4ee5\u5916\uff0c\u5176\u4ed6\u7684\u6bcf\u4e00\u4e2a\u70b9\u90fd\u88ab\u91cd\u590d\u8ba1\u7b97\u4e86\u4e00\u6b21\uff0c\u6240\u4ee5\u5728\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u8981\u51cf\u53bb $1$  \n$Code:$\n```cpp\n#include <iostream>\n#include <cstdio>\n#define N 300011\n#define lc k<<1\n#define rc k<<1|1 \nusing namespace std;\nstruct Node\n{\n\tint t;\n\tint next;\n}node[N<<1];\nstruct Tree\n{\n\tint l;\n\tint r;\n\tint sum; //\u533a\u95f4\u548c\n\tint lazy;//\u61d2\u6807\u8bb0\n}tree[N<<2];\nint n,tot,root;\nint a[N];\nint val[N],seg[N],rev[N],size[N],son[N],fa[N],head[N],dep[N],top[N];\n//top[i]\u8868\u793ai\u8282\u70b9\u6240\u5728\u7684\u91cd\u94fe\u7684\u9876\u7aef\u8282\u70b9,son[i]\u8868\u793ai\u8282\u70b9\u7684\u91cd\u513f\u5b50\uff0chead\u662f\u90bb\u63a5\u8868\uff0cdep[i]\u8868\u793ai\u8282\u70b9\u7684\u6df1\u5ea6,fa[i]\u8868\u793ai\u8282\u70b9\u7684\u7236\u4eb2,size[i]\u8868\u793ai\u53f7\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570,seg[i]\u8868\u793ai\u8282\u70b9\u5728\u7ebf\u6bb5\u6811\u4e2d\u5bf9\u5e94\u7684\u5e8f\u53f7,reg[i]\u8868\u793a\u4e3a\u5e8f\u53f7i\u5bf9\u5e94\u6811\u4e2d\u7684\u8282\u70b9\nvoid add(int x,int y)\n{\n\tnode[++tot].t=y;\t\n\tnode[tot].next=head[x];\n\thead[x]=tot;\n\treturn;\n}\nvoid dfs1(int u,int f)\n{\n\tdep[u]=dep[f]+1;\n\tfa[u]=f;\n\tsize[u]=1;\n\tfor(int i=head[u];i;i=node[i].next)\n\t{\n\t\tint v=node[i].t;\n\t\tif(v!=f)\n\t\t{\n\t\t\tdfs1(v,u);\n\t\t\tsize[u]+=size[v];\n\t\t\tif(size[v]>size[son[u]]) son[u]=v;\n\t\t}\t\n\t}\n}\nvoid dfs2(int u,int f)\n{\n\tif(son[u])\n\t{\n\t\tseg[son[u]]=++seg[0];\n\t\trev[seg[0]]=son[u];\n\t\ttop[son[u]]=top[u];\n\t\tdfs2(son[u],u);\n\t}\n\tfor(int i=head[u];i;i=node[i].next)\n\t{\n\t\tint v=node[i].t;\n\t\tif(v!=f && v!=son[u])\n\t\t{\n\t\t\tseg[v]=++seg[0];\n\t\t\trev[seg[0]]=v;\n\t\t\ttop[v]=v;\n\t\t\tdfs2(v,u);\n\t\t}\n\t}\n}\nvoid build(int k,int l,int r)\n{\n\ttree[k].l=l; tree[k].r=r;\n\tif(l==r)\n\t{\n\t\ttree[k].sum=0;\n\t\ttree[k].lazy=0;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(lc,l,mid);\n\tbuild(rc,mid+1,r);\n\ttree[k].sum=tree[lc].sum+tree[rc].sum;\n\ttree[k].lazy=0;\n}\nvoid pushdown(int k)\n{\n\tif(!tree[k].lazy) return;\n\ttree[lc].sum+=(tree[lc].r-tree[lc].l+1)*tree[k].lazy;\n\ttree[lc].lazy+=tree[k].lazy;\n\ttree[rc].sum+=(tree[rc].r-tree[rc].l+1)*tree[k].lazy;\n\ttree[rc].lazy+=tree[k].lazy;\n\ttree[k].lazy=0;\n}\nvoid update(int k,int l,int r,int val)\n{\n\tif(tree[k].l>=l && tree[k].r<=r)\n\t{\n\t\ttree[k].sum+=(tree[k].r-tree[k].l+1)*val;\n\t\ttree[k].lazy+=val;\n\t\treturn;\n\t}\n\tpushdown(k);\n\tint mid=(tree[k].l+tree[k].r)>>1;\n\tif(l<=mid) update(lc,l,r,val);\n\tif(r>mid) update(rc,l,r,val);\n\ttree[k].sum=tree[lc].sum+tree[rc].sum;\n}\nvoid query(int k)\n{\n\tif(tree[k].l==tree[k].r)\n\t{\n\t\tif(rev[tree[k].l]!=root) a[rev[tree[k].l]]=tree[k].sum-1;\n\t\telse a[rev[tree[k].l]]=tree[k].sum;\n\t\treturn; //\u9664\u4e86\u6700\u5f00\u59cb\u8d70\u7684\u90a3\u4e2a\u8282\u70b9\uff0c\u5176\u4f59\u7684\u6240\u6709\u8282\u70b9\u90fd\u8981\u51cf\u53bb1\n\t}\n\tpushdown(k);\n\tquery(lc);\n\tquery(rc);\n}\nvoid ask(int x,int y)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tupdate(1,seg[top[x]],seg[x],1);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y]) swap(x,y);\n\tupdate(1,seg[x],seg[y],1);\n}\nint main()\n{\n// \tfreopen(\"b.in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n\tint b[N]={0};\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i)\n\t\tscanf(\"%d\",&b[i]);\n\troot=b[1];\n\tfor(int i=1;i<=n-1;++i)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tseg[1]=seg[0]=1;\n\trev[1]=1;\n\tdfs1(1,0);\n\tdfs2(1,0);\n\tbuild(1,1,n);\t\n\tfor(int i=1;i<=n-1;++i)\n\t\task(b[i],b[i+1]); //\u6bcf\u6b21\u5c06b[i]\u5230b[i+1]\u7684\u8def\u5f84\u52a0\u4e0a1\n\tquery(1);\n\tfor(int i=1;i<=n;++i) printf(\"%d\\n\",a[i]);\n\treturn 0;\n}\n```",
        "postTime": 1564990404,
        "uid": 101042,
        "name": "zhz\u5c0f\u849f\u84bb",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "```\n//\u8bb0\u5f55\u4ece\u54ea\u4e00\u4e2a\u623f\u95f4\u51fa\u53d1\uff0cupdate(\u51fa\u53d1\u70b9\uff0c\u7ec8\u70b9,add)\n//\u56e0\u4e3a\u4ece\u623f\u95f4\u51fa\u53d1\u7684\u65f6\u5019\u4e0d\u9700\u8981\u7cd6\u679c\uff0c\u5230\u8fbe\u7684\u65f6\u5019\u624d\u9700\u8981\u7cd6\u679c\n//\u6240\u4ee5update\u7684\u65f6\u5019\u4f1a\u5728\u51fa\u53d1\u70b9\u591a\u653e\u4e00\u5757\u7cd6\u679c\n//\u90a3\u6211\u4eec\u5c31update(s,s,-1),\u628a\u591a\u653e\u7684\u90a3\u5757\u51cf\u53bb\n//\u7b2c\u4e00\u4e2a\u623f\u95f4\u662f\u8d77\u70b9\uff0c\u63d0\u524d\u5728for\u5faa\u73af\u5916\u8fb9\u653e\u4e0a\u4e00\u5757\u7cd6\u3002 \n//last\u8bb0\u5f55\u8d77\u70b9\u662f\u8c01\n//\u8fd9\u6837\uff0c\u5728\u6bcf\u6b21update\u4e4b\u524d\u90fd\u5148\u628alast\u4e0a\u7684\u7cd6--\uff0c\u7136\u540eupdate\uff08\u533a\u95f4\uff09\n//\u6700\u540e\u8ba9\u7ec8\u70b9\u7684\u7cd6--\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u8bf4\u6700\u540e\u4e00\u4e2a\u70b9\u662f\u9910\u5385\uff0c\u4e0d\u7528\u653e\u7cd6 \n\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n\nconst int N=3e5+5;\n\nint n;\nint a[N];\nint head[N],num_edge;\nstruct Edge\n{\n\tint v,nxt;\n}edge[N<<1];\nstruct NODE\n{\n\tint fa,son;\n\tint top,dep;\n\tint s,t;\n\tint size;\n}node[N];\nstruct TREE\n{\n\tTREE *lson,*rson;\n\tint l,r,mid,len;\n\tint sum,add;\n}tree[N<<2];\n\ntypedef TREE* Tree;\nTree now_node=tree,Root;\n\ninline int read()\n{\n\tchar c=getchar();int num=0;\n\tfor(;!isdigit(c);c=getchar());\n\tfor(;isdigit(c);c=getchar())\n\t\tnum=num*10+c-'0';\n\treturn num;\n}\n\ninline void add_edge(int u,int v)\n{\n\tedge[++num_edge].v=v;\n\tedge[num_edge].nxt=head[u];\n\thead[u]=num_edge;\n}\n\nvoid dfs1(int u)\n{\n\tnode[u].size=1;\n\tfor(int i=head[u],v;i;i=edge[i].nxt)\n\t{\n\t\tv=edge[i].v;\n\t\tif(v==node[u].fa)\n\t\t\tcontinue;\n\t\tnode[v].fa=u;\n\t\tnode[v].dep=node[u].dep+1;\n\t\tdfs1(v);\n\t\tnode[u].size+=node[v].size;\n\t\tif(node[v].size>node[node[u].son].size)\n\t\t\tnode[u].son=v;\n\t}\n}\n\nint bound;\nvoid dfs2(int u,int top)\n{\n\tnode[u].top=top;\n\tnode[u].s=++bound;\n\tif(node[u].son)\n\t{\n\t\tdfs2(node[u].son,top);\n\t\tfor(int i=head[u],v;i;i=edge[i].nxt)\n\t\t{\n\t\t\tv=edge[i].v;\n\t\t\tif(v==node[u].son||v==node[u].fa)\n\t\t\t\tcontinue;\n\t\t\tdfs2(v,v);\n\t\t}\n\t}\n\tnode[u].t=bound;\n}\n\nvoid build(Tree &root,int l,int r)\n{\n\troot=++now_node;\n\troot->l=l,root->r=r,root->mid=l+r>>1;\n\troot->len=r-l+1;\n\tif(l==r)\n\t\treturn;\n\tbuild(root->lson,l,root->mid);\n\tbuild(root->rson,root->mid+1,r);\n}\n\ninline void pushdown(Tree root)\n{\n\tif(root->add)\n\t{\n\t\troot->lson->add+=root->add;\n\t\troot->rson->add+=root->add;\n\t\troot->lson->sum+=root->add*root->lson->len;\n\t\troot->rson->sum+=root->add*root->rson->len;\n\t\troot->add=0;\n\t}\n}\n\nvoid update(const Tree &root,int l,int r,int add)\n{\n\tif(root->l==l&&root->r==r)\n\t{\n\t\troot->sum+=root->len*add;\n\t\troot->add+=add;\n\t\treturn;\n\t}\n\tpushdown(root);\n\tif(r<=root->mid)\n\t\tupdate(root->lson,l,r,add);\n\telse if(l>root->mid)\n\t\tupdate(root->rson,l,r,add);\n\telse\n\t{\n\t\tupdate(root->lson,l,root->mid,add);\n\t\tupdate(root->rson,root->mid+1,r,add);\n\t}\n//\troot->sum=root->lson->sum+=root->rson->sum;\t\t\u4e0d\u7528pushup \n}\n\nint query(const Tree &root,int pos)\n{\n\tif(root->l==root->r)\n\t\treturn root->sum;\n\tpushdown(root);\n\tif(pos<=root->mid)\n\t\treturn query(root->lson,pos);\n\telse\n\t\treturn query(root->rson,pos);\n}\n\ninline void Modify(int x,int y)\n{\n\tint fx=node[x].top,fy=node[y].top;\n\twhile(fx!=fy)\n\t{\n\t\tif(node[fx].dep>node[fy].dep)\n\t\t{\n\t\t\tupdate(Root,node[fx].s,node[x].s,1);\n\t\t\tx=node[fx].fa;\n\t\t\tfx=node[x].top;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tupdate(Root,node[fy].s,node[y].s,1);\n\t\t\ty=node[fy].fa;\n\t\t\tfy=node[y].top;\n\t\t}\n\t}\n\tif(node[x].dep>node[y].dep)\n\t\tupdate(Root,node[y].s,node[x].s,1);\n\telse\n\t\tupdate(Root,node[x].s,node[y].s,1);\n}\n\n\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;++i)\n\t\ta[i]=read();\n\tfor(int i=1,u,v;i<n;++i)\n\t{\n\t\tu=read(),v=read();\n\t\tadd_edge(u,v);\n\t\tadd_edge(v,u);\n\t}\n\tdfs1(1);\n\tdfs2(1,1);\n\tbuild(Root,1,n);\n\tint last=a[1];\n\tupdate(Root,node[last].s,node[last].s,1);\t//\u8d77\u70b9\u653e\u7cd6 \n\tfor(int i=2;i<=n;++i)\n\t{\n\t\tupdate(Root,node[last].s,node[last].s,-1);\t//\u8ba9\u8d77\u70b9\u7684\u7cd6-- \n\t\tModify(last,a[i]);\n\t\tlast=a[i];\n\t}\n\tupdate(Root,node[last].s,node[last].s,-1);\t\t//\u7ec8\u70b9\u7684\u7cd6-- \n\tfor(int i=1;i<=n;++i)\t//\u67e5\u8be2\u6bcf\u4e2a\u623f\u95f4\u8981\u653e\u591a\u5c11\u7cd6 \n\t\tprintf(\"%d\\n\",query(Root,node[i].s));\n\treturn 0;\n}\n```",
        "postTime": 1521114402,
        "uid": 39886,
        "name": "Drifterming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "LCA + \u6811\u4e0a\u5dee\u5206\n\n\u5bf9\u4e8e\u8bbf\u95ee\u5e8f\u53f7\u6211\u4eec\u5c06\u5176\u53d8\u6210\u8fb9\u7684\u5f62\u5f0f\u3002\n\n\u5bf9\u4e8e\u6240\u6709\u7684\u7684\u8fb9\uff0c\n\n\u6211\u4eec\u4f1a\u53d1\u73b0\u7b2c\u4e00\u6761\u548c\u6700\u540e\u4e00\u6761\u662f\u7279\u6b8a\u7684\u3002\n\n1. \u7b2c\u4e00\u6761\u662f\u4e24\u4e2a\u7aef\u70b9\u90fd\u662f\u5305\u542b\u7684\uff0c \u5373\u5728\u4e24\u4e2a\u7aef\u70b9\u4e0a\u90fd\u653e\u7cd6\u679c\uff1a[u,v]\n\n2. \u6700\u540e\u4e00\u6761\u662f\u4e24\u4e2a\u7aef\u70b9\u90fd\u4e0d\u5305\u542b\uff0c \u5373\u5728\u4e24\u4e2a\u7aef\u70b9\u4e0a\u4e0d\u653e\u7cd6\u679c\uff1a(u,v)\n\n3. \u5176\u4f59\u7684\u8def\u5f84\u90fd\u662f\u4e00\u6837\u7684\uff0c\u524d\u4e00\u4e2a\u5305\u542b\uff0c\u540e\u4e00\u4e2a\u4e0d\u5305\u542b\uff1a[u,v)\n\nf\u6570\u7ec4\u662f\u500d\u589elca\u6570\u7ec4\uff0cu\u548cv\u5206\u522b\u662f\u4e00\u8fb9\u7684\u7aef\u70b9\u3002\n\n1. \u5148\u770b\u7b2c\u4e00\u6761\u8fb9\uff0c\u76f4\u63a5\u8fdb\u884c\u6811\u4e0a\u5dee\u5206\uff0c\u65e0\u7279\u6b8a\u5904\u7406\u3002\n\n2. \u6700\u540e\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u8981\u8fdb\u884c\u8ba8\u8bba\uff0c\u4e00\u5171\u67093\u79cd\u60c5\u51b5\uff1a\n\n    1. `u != LCA && v != LCA`\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5dee\u5206\u7684\u8fb9\u5c31\u662ff[u][0]-f[v][0].\n    2. `u == LCA && v != LCA`\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5dee\u5206\u7684\u8fb9\u5c31\u662fson[u]-f[v][0].\n    3. `u != LCA && v == LCA`\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5dee\u5206\u7684\u8fb9\u5c31\u662ff[u][0]-son[v].\n3. \u5176\u4f59\u7684\u8fb9\uff0c\u4e5f\u662f\u8ba8\u8bba3\u79cd\u60c5\u51b5\uff1a\n    1. `u != LCA && v != LCA`\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5dee\u5206\u7684\u8fb9\u5c31\u662ff[u][0]-v.\n    2. `u == LCA && v != LCA`\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5dee\u5206\u7684\u8fb9\u5c31\u662fson[u]-v.\n    3. `u != LCA && v == LCA`\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5dee\u5206\u7684\u8fb9\u5c31\u662ff[u][0]-v\n    \n\u505a\u5b8c\u8fd9\u4e9b\uff0c\u5c31\u662f\u6811\u4e0a\u5dee\u5206\u7684\u677f\u5b50\u4e86\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8d58\u8ff0\u4e86\u3002\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define re register\n#define gc getchar\ninline int read() {\n\tint s = 0, f = 1; char ch = gc();\n\twhile(ch < '0' || ch > '9') {if(ch == '-') f = -1; ch = gc();}\n\twhile(ch >= '0' && ch <= '9') s = s * 10 + ch - '0', ch = gc();\n\treturn s * f;\n}\ninline int min(int a, int b) {return a < b ? a : b;}\ninline int max(int a, int b) {return a > b ? a : b;}\nconst int INF = 0x7fffffff;\nconst int Max = 600012;\nconst int mod = 19260817;\nconst int N = 1000007;\nstruct Candy {\n\tint net, to;\n}t[Max];\nint n, head[Max], cnt, f[Max][21];\nint x[Max], y[Max], k[Max], deep[Max];\ninline void insert(int u, int v) {\n\tt[++cnt].to = v;\n\tt[cnt].net = head[u];\n\thead[u] = cnt;\n}\nvoid dfs(int x, int Fa) {\n\tf[x][0] = Fa; deep[x] = deep[Fa] + 1;\n\tfor(int i = 1; (1 << i) <= deep[x]; i++)\n\t\tf[x][i] = f[f[x][i-1]][i-1];\n\tint v;\n\tfor(re int i = head[x]; i; i = t[i].net) {\n\t\tv = t[i].to;\n\t\tif(v == Fa) continue;\n\t\tdfs(v,x);\n\t}\n}\nint lca(int x, int y) {\n\tif(deep[x] < deep[y]) std :: swap(x, y);\n\tfor(re int i = 21; i >= 0; -- i)\n\t\tif(deep[x] - (1 << i) >= deep[y])\n\t\t\tx = f[x][i];\n\tif(x == y) return x;\n\tfor(re int i = 20; i >= 0; -- i)\n\t\tif(f[x][i] == f[y][i]) continue;\n\t\telse x = f[x][i], y = f[y][i];\n\treturn f[x][0];\n}\nvoid SUM(int x, int Fa) {\n\tint v;\n\tfor(re int i = head[x]; i; i = t[i].net) {\n\t\tv = t[i].to; if(v == Fa) continue;\n\t\tSUM(v, x); k[x] += k[v];\n\t}\n}\nint find_son(int x, int LCA) {\n\tint depth = deep[LCA] + 1;\n\tfor(re int i = 21; i >= 0; -- i)\n\t\tif(deep[x] - (1 << i) >= depth)\n\t\t\tx = f[x][i];\n\treturn x;\n}\nint main() {\n\tn = read(); int u, v; x[1] = read();\n\tfor(re int i = 1; i < n; ++ i) y[i] = read(), x[i+1] = y[i];\n\tfor(re int i = 1; i < n; ++ i)\n\t\tu = read(), v = read(), insert(u,v), insert(v,u);\n\tdfs(1,0);\n\tint LCA = lca(x[n-1], y[n-1]); bool fg = 1;\n\tif(x[n-1] != LCA && y[n-1] != LCA)\n\t\tu = f[x[n-1]][0], v = f[y[n-1]][0];\n\telse if(x[n-1] == LCA && y[n-1] != LCA) {\n\t\tu = find_son(y[n-1], LCA), v = f[y[n-1]][0];\n\t\tif(f[y[n-1]][0] == x[n-1]) fg = 0;\n\t}\n\telse if(x[n-1] != LCA && y[n-1] == LCA) {\n\t\tu = f[x[n-1]][0], v = find_son(x[n-1], LCA);\n\t\tif(f[x[n-1]][0] == y[n-1]) fg = 0;\n\t}\n\tLCA = lca(u, v);\n\tif(fg) k[u] ++, k[v] ++, k[LCA] --, k[f[LCA][0]] --;\n\tu = x[1]; v = y[1]; LCA = lca(u, v);\n\tk[u] ++, k[v] ++, k[LCA] --, k[f[LCA][0]] --;\n\tfor(re int i = 2; i < n - 1; ++ i) {\n\t\tLCA = lca(x[i], y[i]);\n\t\tif(x[i] != LCA && y[i] != LCA)\n\t\t\tu = f[x[i]][0], v = y[i];\n\t\telse if(x[i] == LCA && y[i] != LCA)\n\t\t\tu = find_son(y[i], LCA), v = y[i];\n\t\telse if(x[i] != LCA && y[i] == LCA)\n\t\t\tu = f[x[i]][0], v = y[i];\n\t\tLCA = lca(u,v);\n\t\tk[u] ++, k[v] ++, k[LCA] --, k[f[LCA][0]] --;\n\t}\n\tSUM(1,0);\n\tfor(re int i = 1; i <= n; ++ i) printf(\"%d\\n\",k[i]);\n\treturn 0;\n}\n```",
        "postTime": 1570517450,
        "uid": 186534,
        "name": "Atmizz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "# ~~\u6bd4\u677f\u5b50\u7b80\u5355\u7cfb\u5217~~\n\n\u8fd9\u9898\u7684\u601d\u8def\u5f88\u660e\u663e\uff0c\u5728\u6bcf\u4e00\u6b21\u7ecf\u8fc7\u4e00\u4e2a\u623f\u95f4\u65f6\u5c31\u7ed9\u8fd9\u4e2a\u623f\u95f4\u7684\u591a\u51c6\u5907\u4e00\u4e2a\u7cd6\u679c\u3002\n\n\u56e0\u6b64\uff0c\u672c\u9898\u9700\u8981\u7ef4\u62a4\uff1a\n\n\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u90fd\u52a0\u4e0a1\n\n\u6c42\u51fa\u4e00\u4e2a\u8282\u70b9\u7684\u503c\n\n\u6240\u4ee5\u4e3b\u8981\u6709\u4e24\u79cd\u505a\u6cd5\uff1a\n\n1. \u6811\u4e0a\u5dee\u5206+lca\n\n2. \u6811\u94fe\u5256\u5206\uff08\u672c\u4eba\u7528\u7684\u662f\u8fd9\u4e2a\uff09\n\n\u5230\u6b64\u8fd9\u9053\u9898\u5c31\u53ef\u4ee5~~\u53bb\u590d\u5236\u677f\u5b50\u7684\u4ee3\u7801~~\u89e3\u51b3\u4e86\uff01\n\n\u90a3\u4e48\uff0c\u8fd9\u9898\u8981\u6ce8\u610f\u4e9b\u4ec0\u4e48\u7ec6\u8282\u5462\uff1f\n\n## ~~\u5e76\u6ca1\u6709~~\n\n\u54e6\u5bf9\u4e86\uff0c\u4e0d\u8981\u6025\u7740\u628a\u4e24\u70b9\u8def\u5f84\u4e0a\u6240\u6709\u7684\u70b9\u90fd+1\uff0c\u5982\u679c\u4f60\u624b\u73a9\u8fc7\u6837\u4f8b\uff0c\u6211\u4eec\u53d1\u73b0\u4e0d\u4f1a\u7ed9\u7ec8\u70b9\u7684\u8282\u70b9+1\uff0c\u6240\u4ee5\u6bcf\u6b21\u52a0\u5b8c\u540e\u8bb0\u5f97\u628a\u6bcf\u4e00\u6b21\u7684\u7ec8\u70b9\u4e0a\u7684\u503c\u51cf\u56de\u6765\u3002\n\n$Code\\ Below$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 333333\n#define ls rt << 1\n#define rs rt << 1 | 1\n#define int long long\n\nint f[N], d[N], sz[N], son[N], tp[N], id[N], rk[N], cnt;\nint to[N << 1], nxt[N << 1], head[N], tot;\nint n, m, a[N];\n\nvoid addedge(int x, int y)\n{\n\tto[++tot] = y;\n\tnxt[tot] = head[x];\n\thead[x] = tot;\n}//\u524d\u5411\u661f\u5efa\u8fb9\n\n//--------------------\u4ee5\u4e0b\u7ebf\u6bb5\u6811--------------------\n\nstruct tree\n{\n\tint l, r, val, tag;\n} t[N << 2];\n\ninline void pushup(int rt)\n{\n\tt[rt].val = (t[ls].val + t[rs].val);\n}\n\ninline void pushdown(int rt)\n{\n\tt[ls].val = (t[ls].val + t[rt].tag * (t[ls].r - t[ls].l + 1)); t[ls].tag = (t[ls].tag + t[rt].tag);\n\tt[rs].val = (t[rs].val + t[rt].tag * (t[rs].r - t[rs].l + 1)); t[rs].tag = (t[rs].tag + t[rt].tag);\n\tt[rt].tag = 0;\n}\n\nvoid build(int rt, int l, int r)\n{\n\tt[rt].l = l, t[rt].r = r;\n\tif (l == r) return;\n\tint mid = (l + r) >> 1;\n\tbuild(ls, l, mid);\n\tbuild(rs, mid + 1, r);\n\tpushup(rt);\n}\n\nvoid update(int rt, int l ,int r, int v)\n{\n\tif (l <= t[rt].l && t[rt].r <= r)\n\t{\n\t\tt[rt].val = (t[rt].val + v * (t[rt].r - t[rt].l + 1));\n\t\tt[rt].tag = (t[rt].tag + v);\n\t\treturn;\n\t}\n\tpushdown(rt);\n\tint mid = (t[rt].l + t[rt].r) >> 1;\n\tif (l <= mid) update(ls, l, r, v);\n\tif (mid < r) update(rs, l, r, v);\n\tpushup(rt);\n}\n\nint query(int rt, int l, int r)\n{\n\tif (l <= t[rt].l && t[rt].r <= r) return t[rt].val;\n\tpushdown(rt);\n\tint ans = 0, mid = (t[rt].l + t[rt].r) >> 1;\n\tif (l <= mid) ans = (ans + query(ls, l, r));\n\tif (mid < r) ans = (ans + query(rs, l, r));\n\treturn ans;\n}\n\n//--------------------\u4ee5\u4e0a\u7ebf\u6bb5\u6811--------------------\n//--------------------\u4ee5\u4e0b\u6811\u94fe\u5256\u5206--------------------\n\nvoid dfs1(int x, int fa, int depth)\n{\n\tf[x] = fa; d[x] = depth; sz[x] = 1;\n\tfor (int i = head[x]; i; i = nxt[i])\n\t{\n\t\tint y = to[i];\n\t\tif (y == fa) continue;\n\t\tdfs1(y, x, depth + 1);\n\t\tsz[x] += sz[y];\n\t\tif (sz[y] > sz[son[x]]) son[x] = y;\n\t}\n}\n\nvoid dfs2(int x, int top)\n{\n\ttp[x] = top; id[x] = ++cnt; rk[cnt] = x;\n\tif (!son[x]) return;\n\tdfs2(son[x], top);\n\tfor (int i = head[x]; i; i = nxt[i])\n\t{\n\t\tint y = to[i];\n\t\tif (y != son[x] && y != f[x]) dfs2(y, y);\n\t}\n}\n\nvoid change(int x, int y, int z)\n{\n\twhile (tp[x] != tp[y])\n\t{\n\t\tif (d[tp[x]] < d[tp[y]]) swap(x, y);\n\t\tupdate(1, id[tp[x]], id[x], z);\n\t\tx = f[tp[x]];\n\t}\n\tif (d[x] > d[y]) swap(x, y);\n\tupdate(1, id[x], id[y], z);\n}\n\n//--------------------\u4ee5\u4e0a\u6811\u94fe\u5256\u5206--------------------\n\nsigned main()\n{\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++) scanf(\"%lld\", a + i);\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tint x, y;\n\t\tscanf(\"%lld%lld\", &x, &y);\n\t\taddedge(x, y);\n\t\taddedge(y, x);\n\t}\n\tdfs1(1, 0, 1); dfs2(1, 1); build(1, 1, n);\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tchange(a[i], a[i + 1], 1);\n\t\tchange(a[i + 1], a[i + 1], -1);\n\t}\n\tfor (int i = 1; i <= n; i++) printf(\"%lld\\n\", query(1, id[i], id[i]));//\u5355\u70b9\u4fee\u6539\uff0c\u76f4\u63a5\u7ebf\u6bb5\u6811\u4e0a\u64cd\u4f5c\u5c31\u597d\u4e86\n}\n```",
        "postTime": 1565587558,
        "uid": 36908,
        "name": "Gu_Pigeon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u7531\u4e8e\u6811\u4e0a\u4e24\u70b9\u8def\u5f84\u552f\u4e00\uff0c\u7ef4\u5c3c\u7684\u8def\u7ebf\u4e5f\u662f\u552f\u4e00\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u8981 ** \u7edf\u8ba1\u7ef4\u5c3c\u7ecf\u8fc7\u6bcf\u4e2a\u70b9\u7684\u6b21\u6570 ** \u5373\u53ef\u3002\u800c\u6811\u4e0a\u8def\u5f84\u53c8\u8ddf ** LCA ** \u4ec0\u4e48\u7684\u6709\u5173\uff0c\u56e0\u6b64\u8fd9\u9053\u9898\u7684\u505a\u6cd5\u5c31\u591a\u79cd\u591a\u6837\u4e86\u3002\n\n\u7531\u4e8e\u53ea\u6709\u4e00\u6b21\u8be2\u95ee\uff0c\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7684\u505a\u6cd5\u662f ** \u6811\u4e0a\u5dee\u5206 ** \u540e\u6c42 ** LCA ** \u8f7b\u677e\u641e\u5b9a\u3002\u518d\u60f3\u6df1\u4e00\u70b9\u4f60\u4f1a\u53d1\u73b0\u8fd9\u9053\u9898\u7b80\u76f4\u5c31\u662f ** \u6811\u94fe\u5256\u5206 ** \u7684\u677f\u5b50(\u4e8b\u5b9e\u4e0a\u5b83\u5c31\u5728\u8bd5\u70bc\u573a\u7701\u9009\u6811\u5256\u91cc\u5934)\uff0c\u518d\u52a0\u4e0a\u8fd9\u9053\u9898\u4e0d\u7528\u7ef4\u62a4\u4ec0\u4e48\u5b50\u6811\u4fe1\u606f\uff0c\u6240\u4ee5 ** \u6811\u94fe\u5256\u5206 ** \u80fd\u505a ** Link-Cut Tree ** \u5f53\u7136\u4e5f\u80fd\u505a\uff01\n\n### \u503c\u5f97\u6ce8\u610f\u7684\u51e0\u70b9\uff1a\n#### 1.\u8fd9\u9053\u9898LCT\u5f97\u5361\u5e38\uff0c\u5199\u7684\u65f6\u5019\u6ce8\u610f\u4e0d\u8981\u592a\u98d8\uff1b\n#### 2.\u7531\u4e8e\u4e24\u6761\u94fe\u76f8\u4ea4\u7684\u70b9\u4f1a\u88ab\u91cd\u590d\u8ba1\u7b97\uff0c\u56e0\u6b64\u6bcf\u6b21\u52a0\u7684\u65f6\u5019\u94fe\u5934\u94fe\u5c3e\u8981\u6709\u4e00\u4e2a\u51cf1(\u6211\u662f\u94fe\u5c3e)\uff1b\n#### 3.\u6700\u540e\u4e00\u4e2a\u70b9\u662f\u4e0d\u9700\u8981\u51c6\u5907\u7cd6\u679c\u7684\uff01\n#### 4.\u8f93\u51fa\u7b54\u6848\u7684\u65f6\u5019\u8bb0\u5f97\u628a\u6807\u8bb0\u90fd\u4e0b\u653e\u4e86(\u6211\u662f\u5148makeroot\u518d\u8f93\u51fa)\u3002\n\n\u5148\u653e**90\u5206**\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n\n#define N 300010\n#define lc(x) ch[x][0]\n#define rc(x) ch[x][1]\ninline void swap(int&a,int&b){int tmp(a);a=b,b=tmp;}\n\nint ch[N][2],fa[N],rev[N],val[N],addv[N];\ninline void add(int x,int y){val[x]+=y,addv[x]+=y;}\ninline void down(int x)\n{\n    if(rev[x])\n        rev[lc(x)]^=1,rev[rc(x)]^=1,swap(lc(x),rc(x)),rev[x]=0;\n    if(addv[x])\n        add(lc(x),addv[x]),add(rc(x),addv[x]),addv[x]=0;\n}\ninline int nrt(int x){return x==lc(fa[x])||x==rc(fa[x]);}\nvoid psa(int x){if(nrt(x))psa(fa[x]);down(x);}\ninline void rotate(int x)\n{\n    int y(fa[x]),z(fa[y]),k(x==rc(y));\n    ch[y][k]=ch[x][!k],ch[x][!k]=y;if(nrt(y))ch[z][y==rc(z)]=x;\n    if(ch[y][k])fa[ch[y][k]]=y;fa[y]=x,fa[x]=z;\n}\ninline void splay(int x)\n{\n    int y,z;\n    for(psa(x);nrt(x);rotate(x))\n    {y=fa[x],z=fa[y];if(nrt(y))rotate(x==rc(y)^y==rc(z)?x:y);}\n}\ninline void access(int x){for(int y(0);x;x=fa[y=x])splay(x),rc(x)=y;}\ninline void mrt(int x){access(x),splay(x),rev[x]^=1;}\ninline void link(int x,int y){mrt(x),fa[x]=y;}\n\nint n,a[N],x,y;\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i(1);i<=n;++i)\n        scanf(\"%d\",a+i);\n    for(int i(1);i<n;++i)\n        scanf(\"%d%d\",&x,&y),link(x,y);\n    for(int i(1);i<n;++i)\n        --val[a[i+1]],mrt(a[i]),access(a[i+1]),splay(a[i+1]),add(a[i+1],1);\n    for(int i(1);i<=n;++i)\n        mrt(i),printf(\"%d\\n\",val[i]);\n    return 0;\n}\n```\n**\u65e0O2  \u65e0\u5feb\u8bfb  \u65e0register**[\u8bc4\u6d4b\u8bb0\u5f55](https://www.luogu.org/recordnew/show/16027893)\n\n\u52a0\u4e86\u82e5\u5e72\u4e2aregister\u540eAC\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n\n#define N 300010\n#define lc(x) ch[x][0]\n#define rc(x) ch[x][1]\n#define re register\ninline void swap(re int&a,re int&b){re int tmp(a);a=b,b=tmp;}\n\nint ch[N][2],fa[N],rev[N],val[N],addv[N];\ninline void add(re int x,re int y){val[x]+=y,addv[x]+=y;}\ninline void down(re int x)\n{\n    if(rev[x])\n        rev[lc(x)]^=1,rev[rc(x)]^=1,swap(lc(x),rc(x)),rev[x]=0;\n    if(addv[x])\n        add(lc(x),addv[x]),add(rc(x),addv[x]),addv[x]=0;\n}\ninline int nrt(re int x){return x==lc(fa[x])||x==rc(fa[x]);}\nvoid psa(int x){if(nrt(x))psa(fa[x]);down(x);}\ninline void rotate(re int x)\n{\n    re int y(fa[x]),z(fa[y]),k(x==rc(y));\n    ch[y][k]=ch[x][!k],ch[x][!k]=y;if(nrt(y))ch[z][y==rc(z)]=x;\n    if(ch[y][k])fa[ch[y][k]]=y;fa[y]=x,fa[x]=z;\n}\ninline void splay(re int x)\n{\n    re int y,z;\n    for(psa(x);nrt(x);rotate(x))\n    {y=fa[x],z=fa[y];if(nrt(y))rotate(x==rc(y)^y==rc(z)?x:y);}\n}\ninline void access(re int x){for(re int y(0);x;x=fa[y=x])splay(x),rc(x)=y;}\ninline void mrt(re int x){access(x),splay(x),rev[x]^=1;}\ninline void link(re int x,re int y){mrt(x),fa[x]=y;}\n\nint n,a[N],x,y;\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(re int i(1);i<=n;++i)\n        scanf(\"%d\",a+i);\n    for(re int i(1);i<n;++i)\n        scanf(\"%d%d\",&x,&y),link(x,y);\n    for(re int i(1);i<n;++i)\n        --val[a[i+1]],mrt(a[i]),access(a[i+1]),splay(a[i+1]),add(a[i+1],1);\n    for(re int i(1);i<=n;++i)\n        mrt(i),printf(\"%d\\n\",val[i]);\n    return 0;\n}\n```\n**\u65e0O2  \u65e0\u5feb\u8bfb**[\u8bc4\u6d4b\u8bb0\u5f55](https://www.luogu.org/recordnew/show/16027980)\n\n\u83dc\u9e21\u6700\u540e\u795d\u5404\u4f4d\u5168\u90fd AKIOI qwq",
        "postTime": 1549112014,
        "uid": 126486,
        "name": "yurzhang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\uff08\u8bdd\u8bf4\u4e3a\u4ec0\u4e48\u6ca1\u6709\u5dee\u5206\u7684\u6807\u7b7e\uff09\u7b97\u662f\u6c34\u7684\u7d2b\u9898\u6bd5\u7adf\u5929\u5929\u7231\u8dd1\u6b65\u4e5f\u201c\u4e0d\u8fc7\u201d\u662f\u5dee\u5206\u7684\u7d2b\u9898\u3002\u3002\u3002\n\u9898\u610f\u4e3a\u8981\u6c42\u51fa\u6bcf\u4e2a\u70b9\u88ab\u6bcf\u6761\u94fe\u7ecf\u8fc7\u7684\u6b21\u6570\nlca\u662f\u80af\u5b9a\u7684\u54af\nbut\u6211\u4eec\u53d1\u73b0\u8981\u6c42\u597d\u591a\u70b9\u7684lca\ntarjan\uff08\u4ed6\u65e5\u6e10\uff09\u80af\u5b9a\u6bd4lca\u4f18\u79c0\uff1b\n\u4e0d\u4f1a\u7684\u53ef\u4ee5\u767e\u5ea6\u5b66\u4e60\u4e00\u4e0b\u3002\u3002\nps.tarjan\u662f\u4e00\u4e2a\u79bb\u7ebf\u7b97\u6cd5\uff0c\u672c\u8d28\u662f\u5bf9\u5411\u4e0a\u6807\u8bb0\u6cd5\u7684\u4f18\u5316\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n+m)\uff1b\u800c\u500d\u589e\u591a\u4e00\u4e2alog\n\u5dee\u5206\u7edf\u8ba1\u65f6\uff1a\uff1a\n```cpp\n--ans[fat[lca[i]]];\n--ans[lca[i]];\n++ans[a[i]];\n++ans[a[i+1]];\n```\n\u5c31OK\u4e86\u3002\n\u6700\u540e\u8dd1\u4e00\u904d\u5927\u6cd5\u5e08\u7edf\u8ba1\u5373\u53ef\uff1b\n\u7531\u4e8e\u9898\u76ee\u7684\u7279\u6b8a\u6027\uff0c\u6709\u4e00\u4e9b\u5c0f\u5c0f \u7684\u7ec6\u8282\u89c1\u4ee3\u7801\u6ce8\u91ca\u3002\u3002\u3002\u3002\n&&\u849f\u84bb\u53d1\u9898\u89e3\u7684\u52a8\u673a\u662f\uff1a\uff08\u56e0\u4e3a\u592a\u5f31\u88ab\u7981\u8a00\u4e86\uff09\u53d1\u4e0d\u4e86\u7287\u7287\u3002\u53ea\u80fd\u5728\u9898\u89e3\u91cc     \nwhile(1) ++noip2018rp;\n\u6734\u7d20\u800c\u7b80\u77ed\u7684\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define N 300010\nusing namespace std;\nint a[300010];\nint head[N],nex[N<<1],ver[N<<1],tot;\nvector<int> qr[N],qid[N];\nint fat[N];\nint lca[N],f[N];\nint v[N];\ninline void add(int x,int y){ ver[++tot]=y; nex[tot]=head[x]; head[x]=tot; }\ninline int fa(int x){\n\treturn f[x]==x?x:f[x]=fa(f[x]);\n}\ninline void tarjan(int x){\n\tv[x]=1;\n\tfor(int i=head[x];i;i=nex[i]){\n\t\tint y=ver[i];\n\t\tif(v[y]) continue;\n\t\tfat[y]=x;\n\t\ttarjan(y);f[y]=x;\n\t}\n\tfor(int i=0;i<qr[x].size();++i){\n\t\tint y=qr[x][i];\n\t\tif(v[y]==2)\tlca[qid[x][i]]=fa(y);\n\t}\n\tv[x]=2;\n}\nint ans[N];\ninline void dfs(int x,int fa){\n\tfor(int i=head[x];i;i=nex[i]){\n\t\tint y=ver[i];\n\t\tif(y==fa) continue;\n\t\tdfs(y,x);ans[x]+=ans[y];\n\t}\n}\nint main()\n{\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%d\",&a[i]);f[i]=i;\n\t\tif(i!=1) \n\t\tqr[a[i]].push_back(a[i-1]),\n\t\tqr[a[i-1]].push_back(a[i]),\n\t\tqid[a[i]].push_back(i-1),\n\t\tqid[a[i-1]].push_back(i-1);\n\t}\n\tfor(int i=1;i<n;++i){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);add(x,y);add(y,x);\n\t}\n\tfat[1]=0;\n\ttarjan(1);\n\tfor(int i=1;i<n;++i){\n\t\t--ans[fat[lca[i]]];--ans[lca[i]];++ans[a[i]],++ans[a[i+1]];//\u6ce8\u610f\u5230\u9664\u4e86a\u30101\u3011\u548ca\u3010n\u3011\uff0c\u5176\u4ed6\u70b9\u5747\u88ab\u52a0\u4e86\u4e24\u6b21\u6240\u4ee5\u4e0b\u9762\u6211\u4eec\u8981\u526a\u6389\u3002\u4ee5\u53ca\u8981\u5728dfs\u540e\u518d\u51cf \n\t}\n\tdfs(1,0);\n\tfor(int i=2;i<=n;++i) --ans[a[i]];//\u987a\u4fbf\u628aans[a[n]]\u4e5f\u526a\u6389 \n\tfor(int i=1;i<=n;++i) printf(\"%d\\n\",ans[i]);\n}\n```",
        "postTime": 1541559773,
        "uid": 21165,
        "name": "no_one_cm_Fe_in_hand",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u6811\u5256\u840c\u65b0\uff08\u4e0d\u662f\u59b9\u5b50\uff09\u5237\u5230\u4e86\u8fd9\u9898\uff0c\u5c31\u6765\u4e00\u53d1\u7ed9\u540c\u662f\u849f\u84bb\u7684\u540c\u5b66\u7684\u9898\u89e3\u5427\n### \u6811\u5256\u57fa\u7840\u77e5\u8bc6\uff08\u5b66\u8fc7\u7684\u8bf7\u76f4\u63a5\u8df3\u8fc7\uff09\n\u6811\u94fe\u5256\u5206\uff0c\u7b80\u79f0\u6811\u5256\uff0c~~(\u4e00\u79cd\u7801\u91cf\u5f88\u5927\u7684\u6bd2\u7624\u6570\u636e\u7ed3\u6784)~~\u7528\u4e8e\u89e3\u51b3\u6811\u4e0a\u8def\u5f84\u548c\u5b50\u6811\u7684\u4fee\u6539\u548c\u8be2\u95ee\u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6811\u4e0a\u7684\u7ebf\u6bb5\u6811\u3002\u4e3b\u8981\u7684\u624b\u6bb5\u4e3a\u5212\u5206\u8f7b\u91cd\u513f\u5b50\u548c\u8f7b\u91cd\u94fe\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u68f5\u5b50\u6811\u628a\u5b50\u8282\u70b9\u6700\u591a\u7684\u5b50\u8282\u70b9\u8bbe\u4e3a\u91cd\u513f\u5b50\uff08\u5b50\u8282\u70b9\u6570\u76f8\u540c\u5219\u65e0\u6240\u8c13\uff09\uff0c\u91cd\u513f\u5b50\u7684\u8fde\u7ebf\u5373\u4e3a\u91cd\u94fe\u3002\u5982\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/42456.png)\n\n\u4ee5\u8282\u70b91\u4e3a\u6839\u8282\u70b9\u5efa\u6811\uff0c2\u67091\u4e2a\u5b50\u8282\u70b9\uff08\u5305\u62ec\u81ea\u5df1\uff09\uff0c4\u67092\u4e2a\u5b50\u8282\u70b9\uff0c3\u67094\u4e2a\u5b50\u8282\u70b9\uff0c\u6240\u4ee53\u662f1\u7684\u91cd\u513f\u5b50\uff0c\u540c\u74065\u662f3\u7684\u91cd\u513f\u5b50\uff0c8\u662f5\u7684\u91cd\u513f\u5b50\uff0c7\u662f4\u7684\u91cd\u513f\u5b50\u3002\u8be5\u64cd\u4f5c\u53ea\u9700\u4e00\u6b21\u641c\u7d22\u5c31\u53ef\u5b8c\u6210\u3002\n\u6709\u4e86\u8f7b\u91cd\u94fe\u548c\u8f7b\u91cd\u513f\u5b50\uff0c\u518d\u8bb0\u5f55\u8fd9\u6761\u94fe\u7684\u9876\u7aef\uff08\u91cd\u94fe\u7684\u662f\u9876\u7aef\uff0c\u8f7b\u94fe\u5219\u662f\u5b83\u81ea\u5df1\uff0c\u56fe\u4e2d2\u7684\u9876\u7aef\u662f2\uff0c1\uff0c3\uff0c5\uff0c8\u7684\u9876\u7aef\u662f1\uff0c6\u7684\u9876\u7aef\u662f6\uff0c7\u7684\u9876\u7aef\u662f4\uff09\u6211\u4eec\u627e2\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u5c31\u884c\u5566\uff0c\u5982\u679c\u9876\u7aef\u4e0d\u540c\u5c31\u5411\u4e0a\u8df3\u5230\u9876\u7aef\u7684\u7236\u8282\u70b9\uff0c\u4e00\u770b\u5c31\u5feb\u4e86\u5f88\u591a\u6709\u6728\u6709\uff01\u4f46\u662f\uff0c\u8fd9\u4e00\u6574\u6761\u94fe\u90fd\u9700\u8981\u6539\u53d8\uff0c\u8fd9\u5c31\u9700\u8981\u7528\u5230\u7ebf\u6bb5\u6811\u5566\uff01\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c\uff0c\u5fc5\u987b\u8981\u6709\u8fde\u7eed\u7684\u7f16\u53f7\u3002\u800c\u6211\u4eec\u8282\u70b9\u5411\u4e0a\u8df3\u90fd\u662f\u5728\u91cd\u94fe\u4e0a\u8df3\uff08\u8f7b\u94fe\u53ea\u4f1a\u8df3\u4e00\u4e2a\u8282\u70b9\uff0c\u76f8\u5f53\u4e8e\u8df3\u5230\u7236\u4eb2\u8282\u70b9\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u80fd\u8ba9\u6574\u6761\u91cd\u94fe\u90fd\u6709\u5e8f\uff0c\u5c31\u80fd\u505a\u5230\u4fee\u6539\u548c\u67e5\u8be2\u7684\u5de5\u4f5c\u5566\uff01\u4e8e\u662f\u6211\u4eec\u8fd8\u9700\u8981\u518ddfs\u4e00\u6b21\uff0c\u6309\u91cd\u94fe\u4f18\u5148\u7684\u89c4\u5219\u6807\u53f7\uff0c\u5c31\u53ef\u4ee5\u5728\u6811\u4e0a\u7528\u7ebf\u6bb5\u6811\u4e86\u3002\u4e8e\u662f\u4e0a\u56fe\u53d8\u6210\u4e86\u8fd9\u6837\uff08~~shit~~\u9ec4\u8272\u6570\u5b57\u4e3a\u7f16\u53f7\uff09\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/42458.png)\n\n\u6709\u6ca1\u6709\u53d1\u73b0\uff0c\u4e00\u68f5\u5b50\u6811\uff0c\u867d\u7136\u4e0d\u5728\u4e00\u6761\u94fe\u4e0a\uff0c\u4f46\u5b83\u4eec\u7684\u7f16\u53f7\u662f\u8fde\u7eed\u7684\u3002\u6240\u4ee5\u5b50\u6811\u7684\u4fee\u6539\u548c\u67e5\u8be2\u4e5f\u4e0d\u5728\u8bdd\u4e0b\u3002\n\n**\u65f6\u95f4\u590d\u6742\u5ea6\uff1a**\u9996\u5148\u67e5\u8be2\u65f6\u9700\u8981\u8dd1\u91cd\u94fe\uff0c\u800c\u4e00\u6761\u8def\u5f84\u4e0a\u91cd\u94fe\u4e0d\u8d85\u8fc7logn\u6761\uff0c\u56e0\u4e3a\u6bcf\u8df3\u4e00\u6761\u91cd\u94fe\u4e5f\u8981\u8df3\u4e00\u6761\u8f7b\u94fe\uff0c\u800c\u8f7b\u94fe\u7684\u5b50\u8282\u70b9\u6570\u4e0d\u4f1a\u8d85\u8fc7\u5b50\u6811\u76841/2\uff0c\u6240\u4ee5\u6700\u591a\u53ea\u8981\u8df3log\uff08n\uff09\u6b21\uff0c\u6bcf\u6b21\u7528\u4e00\u6b21\u7ebf\u6bb5\u6811\u4fee\u6539\u6216\u67e5\u8be2\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u5c31\u662fqlog^2(n)(q\u4e3a\u8be2\u95ee\u6570\uff0c\u8fd9\u9898\u7b49\u4e8en\uff09\n\n### \u9898\u610f\u89e3\u6790\n\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u70b9\u521d\u59cb\u503c\u90fd\u4e3a0\uff0c\u8f93\u5165n-1\u6761\u8def\u5f84\uff0c\u8981\u628a\u6bcf\u6761\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u70b9\u7684\u503c+1\uff0c\u6700\u540e\u4f9d\u6b21\u8f93\u51fa\u6240\u6709\u70b9\u7684\u503c\u3002\u770b\u5230\u4fee\u6539\u8def\u5f84\u4e0a\u70b9\u7684\u503c\uff0c\u5c31\u786e\u5b9a\u53ef\u4ee5\u7528\u6811\u5256\u505a\uff0c\u6570\u636en<=300000,qlog^2(n)\u7565\u8d85\u4e00\u4ebf\uff0c\u5f53\u7136\u6811\u5256\u662f\u8dd1\u4e0d\u6ee1\u7684\uff0c\u6240\u4ee5\u52c9\u5f3a\u80fd\u8dd1\u8fc7\u3002\n\n\u867d\u7136\u8fd9\u9898\u6ca1\u5fc5\u8981\u7528\u6811\u5256\uff0c\u4f46\u662f\u56e0\u4e3a~~\uff08\u6211\u4e0d\u4f1a\u6811\u4e0a\u5dee\u5206\uff09~~\u9898\u76ee\u8981\u6c42\u6bd4\u8f83\u5c11\uff08\u751a\u81f3\u4e0d\u7528\u5efa\u6811\uff09\uff0c\u6240\u4ee5\u4ee3\u7801\u91cf\u8fd8\u662f\u6bd4\u8f83\u826f\u5fc3\u7684\uff0c\u4e00\u767e\u884c\u90fd\u4e0d\u7528\uff0c\u53ef\u4ee5\u62ff\u6765\u7ec3\u7ec3\u624b\u6216\u505a\u6811\u5256\u6a21\u677f\u7684\u94fa\u57ab\u3002\n### \u8fd9\u9898\u7565\u5751\u7684\u5730\u65b9\n\u53ef\u80fd\u6709\u4e9b\u540c\u5b66\u6309\u9898\u610f\u6253\u5b8c\u6811\u5256\u53d1\u73b0Wa\u4e86\uff0c\u5982\u679c\u6811\u5256\u90e8\u5206\u6ca1\u9519\uff0c\u53ef\u80fd\u5c31\u662f\u4f60\u7406\u89e3\u9519\u9898\u610f\u4e86\uff1a\u9664\u4e86\u521a\u5f00\u59cb\u7684\u70b9\u4e4b\u5916\uff0c\u5176\u5b83\u7684\u70b9\u90fd\u662f\u5230\u8fbe\u548c\u5f00\u59cb\u7b97\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u7684\uff0c\u4f46\u662f\u8ba1\u7b97\u65f6\u7b97\u4e862\u6b21\uff0c\u52a0\u4e2a\u5224\u65ad\u5c31\u884c\u4e86\u3002\n### \u54c1\u5c1d\u4ee3\u7801\u524d\u9700\u8981\u77e5\u9053\u7684\u5c0f\u73a9\u610f\u513f\uff08\u8be6\u7ec6\u4e86\u89e3\u8bf7[\u70b9\u8fd9\u91cc](www.cplusplus.com)\uff09\n1\u3001**vector**\uff0c\u52a8\u6001\u6570\u7ec4\uff0c\u5185\u5b58\u52a8\u6001\uff0c\u5728\u5b58\u8fb9\u65f6\u6bd4\u8f83\u5e38\u7528\uff0c\u76f8\u5f53\u4e8e\u90bb\u63a5\u94fe\u8868\n\n2\u3001**define a b** \u5b8f\u5b9a\u4e49\uff0c\u628aa\u53d8\u6210b\uff0c\u7528\u4e8e\u8282\u7701\u4ee3\u7801\u91cf\u548c\u4f5c\u6b7b\n\n3\u3001**register int** \u7528\u4e8e\u5361\u5e38\uff08\u597d\u50cf\u53ea\u662f\u5fc3\u7406\u5b89\u6170\uff09\n\n4\u3001**>>1 **\u7b49\u4e8e\u9664\u4ee52,**<<1**\u7b49\u4e8e\u4e582\uff0c**<<1|1**\u7b49\u4e8e\u4e58\u4e8c\u52a0\u4e00\uff0c\u7528\u4e8e\u5361\u5e38\uff08\u7ecf\u5b9e\u6d4b\uff0c\u4ece969ms\u53d8\u6210\u4e86940ms\uff0c\u6574\u6574\u5feb\u4e8626ms\u3002\u3002\u3002\uff09\n### AC~~\uff08\u5361\u8fc7\u53bb\u7684\uff09~~\u4ee3\u7801\uff08\u5e26\u6ce8\u91ca\uff09\n```cpp\n#include<bits/stdc++.h>\n#define MN 1200005\n#define mn 300005\nusing namespace std;\nint Q[mn],h[mn],fa[mn],siz[mn],val[mn],id[mn],N,w[mn],add[MN],n,a,b,que[mn],top[mn];\nvector<int>edge[mn];\nvoid bfs(){\n\tint l=0,r=1;\n\tQ[0]=1;h[1]=1;\n\twhile(l<r){\n\t\tint o=Q[l++],sz=edge[o].size();\n\t\tfor(register int i=0;i<sz;i++){\n\t\t\tif(!h[edge[o][i]]){\n\t\t\t\tQ[r++]=edge[o][i];\n\t\t\t\th[edge[o][i]]=h[o]+1;\n\t\t\t\tfa[edge[o][i]]=o;\n\t\t\t}\n\t\t}\n\t}\n\tfor(register int i=r-1;i>=0;i--){\n\t\tint o=Q[i];\n\t\tsiz[o]=1;\n\t\tint sz=edge[o].size();\n\t\tfor(register int j=0;j<sz;j++){\n\t\t\tsiz[o]+=siz[edge[o][j]];\n\t\t\tif(siz[w[o]]<siz[edge[o][j]]) w[o]=edge[o][j];\n\t\t}\n\t}\n}//\u7236\u5b50\u5173\u7cfb\u3001\u513f\u5b50\u6570\u91cf\u3001\u91cd\u513f\u5b50 \u3001\u6df1\u5ea6\uff0c\u4e5f\u53ef\u4ee5\u7528dfs\nvoid dfs(int o){\n\tid[o]=++N;\n\tval[N]=0;\n\tif(w[o]) top[w[o]]=top[o],dfs(w[o]);\n\tint sz=edge[o].size();\n\tfor(register int i=0;i<sz;i++){\n\t\tif(fa[o]!=edge[o][i]&&w[o]!=edge[o][i]){\n\t\t\ttop[edge[o][i]]=edge[o][i];\n\t\t\tdfs(edge[o][i]);\n\t\t}\n\t}\n}//\u91cd\u94fe(\u9876\u7aef\uff09\u3001\u7f16\u53f7\uff08\u4ef7\u503c\uff09\uff08\u7528\u4e8e\u7ebf\u6bb5\u6811\uff09\uff0c\u5fc5\u987b\u7528dfs\n\n\n//\u4e3a\u7ebf\u6bb5\u6811\u7684\u51c6\u5907\u9636\u6bb5\n\n\nvoid down(int nod){\n\tadd[nod*2]+=add[nod];\n\tadd[nod*2+1]+=add[nod];\n\tadd[nod]=0;\n}//\u4e0b\u4f20\u6807\u8bb0\nvoid pluss(int nod,int l,int r,int b,int e){\n\tif(l>e||r<b) return;\n\tif(b<=l&&r<=e) {\n\t\tadd[nod]++;\n\t\treturn;\n\t}\n\tdown(nod);\n\tint mid=(l+r)>>1;\n\tpluss(nod<<1,l,mid,b,e);\n\tpluss(nod<<1|1,mid+1,r,b,e);\n}//\u5728\u4e00\u6761\u94fe\u4e0a\u65f6\u7684\u4fee\u6539\nvoid plusroad(int x,int y){\n\twhile(top[x]!=top[y]){\n\t\tif(h[top[x]]>h[top[y]]) swap(x,y);\n\t\tpluss(1,1,n,id[top[y]],id[y]);\n\t\ty=fa[top[y]];\n\t}\n\tif(h[x]>h[y]) swap(x,y);\n\tpluss(1,1,n,id[x],id[y]);\n}//\u6574\u6761\u8def\u5f84\u7684\u4fee\u6539\nint ask(int nod,int l,int r,int b,int e){\n\tif(l>e||r<b) return 0;\n\tif(l==r) return add[nod];\n\tdown(nod);\n\tint mid=(l+r)>>1;\n\treturn ask(nod<<1,l,mid,b,e)+ask(nod<<1|1,mid+1,r,b,e);\n}\n\n//\u7ebf\u6bb5\u6811\u6a21\u677f\n\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(register int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&que[i]);\n\tfor(register int i=1;i<n;i++){\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tedge[a].push_back(b);\n\t\tedge[b].push_back(a);\n\t}\n\tbfs();dfs(1);\n\tfor(register int i=1;i<n;i++)\n\t\tplusroad(que[i],que[i+1]);\n\tfor(register int i=1;i<=n;i++)\n\t\tif(que[1]!=i) printf(\"%d\\n\",ask(1,1,n,id[i],id[i])-1);\n\t\t else printf(\"%d\\n\",ask(1,1,n,id[i],id[i]));\n        //\u7279\u5224\uff0c\u9664\u4e86\u7b2c\u4e00\u4e2a\u623f\u95f4\u4e4b\u5916\u90fd\u8981-1\n\treturn 0;\n}\n```\n\u6700\u540e\uff0c\u795d\u5927\u5bb6NOIPrp++\uff0c\u66b4\u529b\u8dd1\u98de\u5feb\uff0c\u9a97\u5206\u51faAC\uff0c\u4e71\u641e\u5207DP\uff0c\u6253\u8868\u51fa\u7701\u4e00\uff01\n\n",
        "postTime": 1541505144,
        "uid": 7480,
        "name": "skydogli",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u7ffb\u4e86\u7b2c\u4e00\u7248\uff0c\u7adf\u7136\u6ca1\u4eba\u5199\u53c8\u597d\u5199\u53c8\u5feb\u7684tarjan\uff08\u4e5f\u6709\u53ef\u80fd\u662f\u6211\u592a\u849f\u84bb\u4e86\u770b\u4e0d\u61c2\u5927\u4f6c\u7684tarjan\uff09\r\n\u4e0d\u8fc7\u6bcf\u6b21\u5199tarjan\u90fd\u4f1a\u56e0\u4e3a\u524d\u5411\u661f\u6ca1\u5f00\u53cc\u500d\u5404\u81eawa\uff0c\uff0c\uff0c\r\n\u4e00\u5f00\u59cb\u7adf\u7136\u60f3\u5206\u60c5\u51b5\u8ba8\u8bba\u6765\u5dee\u5206\uff0c\uff0c\uff0c\u7136\u540e\u53d1\u73b0\u5404\u81ea\u60c5\u51b5\u8981\u5206\u6790\uff0c\r\n\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u4e2d\u95f4\u8282\u70b9\u91cd\u590d\u8ba1\u7b97\u7684\u95ee\u9898\uff0c\uff0c\uff0c\r\n\u7ed3\u679c\uff0c\uff0c\uff0c\r\n\u6700\u540e\u4e00\u60f3\uff0c\u4e2d\u95f4\u91cd\u590d\u8ba1\u7b97\u4e86\u4e00\u6b21\uff0c\u90a3\u6211\u6700\u540e\u51cf\u6389\u4e0d\u5c31\u597d\u4e86\u4e48\uff0c\uff0c\uff0c\r\n\u90a3\u8fd9\u5c31\u662f\u4e00\u9053\u5dee\u5206\u88f8\u4f53\u4e86\uff08\u8fd9\u662f\u552f\u4e00\u4e0d\u540c\u7684\u5730\u65b9\uff09\r\n\t#include<bits/stdc++.h>\r\n\tusing namespace std;\r\n\t#define R register int\r\n\t#define AC 300100\r\n\t#define D printf(\"line in %d\\n\",__LINE__);\r\n\tint n,cnt;//cnt\u662f\u8ba1LCA\u7684\r\n\tint date[AC*2],Next[AC*2],Head[AC],tot=1;//\u5b58\u56fe\r\n\tint qdate[AC*2],qNext[AC*2],qHead[AC],qtot=1;//\u5b58\u8be2\u95ee\r\n\tint LCA[AC],ans[AC*2];//\u76f4\u63a5\u6309\u987a\u5e8f\u6c42\uff0c\u6240\u4ee5\u7ebf\u6027\u987a\u5e8f\u5373\u53ef\r\n\tint father[AC],t[AC],power[AC],fa[AC];\r\n\tbool vis[AC];\r\n\t//error!!!\u524d\u5411\u661f\u56e0\u4e3a\u662f\u53cc\u5411\u8fb9\uff0c\u7136\u540e\u8be2\u95ee\u4e5f\u662f\u53cc\u5411\u7684\uff0c\u6240\u4ee5\u8fd9\u4e9b\u6570\u7ec4\u90fd\u8981*2\u554a\uff01\uff01\uff01\r\n\tinline int read()\r\n\t{\r\n\t\tint x=0;char c;\r\n\t\twhile(isspace(c=getchar()));\r\n\t\twhile(c>='0' && c<='9')x=x*10+c-'0',c=getchar();\r\n\t\treturn x;\r\n\t}\r\n\r\n\tvoid add1(int f,int w)//\u52a0\u56fe\r\n\t{\r\n\t\tdate[++tot]=w,Next[tot]=Head[f],Head[f]=tot;\r\n\t\tdate[++tot]=f,Next[tot]=Head[w],Head[w]=tot;\r\n\t}\r\n\t\r\n\tint find(int x)\r\n\t{\r\n\t\tif(father[x]==x)\treturn x;\r\n\t\telse return father[x]=find(father[x]);\r\n\t}\r\n\r\n\tvoid add2(int f,int w)//\u52a0\u8be2\u95ee\r\n\t{\r\n\t\tqdate[++qtot]=w,qNext[qtot]=qHead[f],qHead[f]=qtot;\r\n\t\tqdate[++qtot]=f,qNext[qtot]=qHead[w],qHead[w]=qtot;\r\n\t}\r\n\t\r\n\tvoid DFS(int x)\t\r\n\t{\r\n\t\tR now;\r\n\t\tvis[x]=true;\r\n\t\tfor(R i=Head[x]; i ;i=Next[i])\r\n\t\t{\r\n\t\t\tnow=date[i];\r\n\t\t\tif(!vis[now])\r\n\t\t\t{\r\n\t\t\t\tDFS(now);\r\n\t\t\t\tfather[now]=x;//\u8bbf\u95ee\u5b8c\u6240\u6709\u7684\u5b57\u8282\u70b9\u540e\u63a5\u4e0a\u6765\r\n\t\t\t}\r\n\t\t\telse fa[x]=now;//\u4e0d\u7136\u5c31\u662f\u7236\u4eb2\uff0c\u56e0\u4e3a\u662f\u70b9\u6743\uff0c\u6240\u4ee5\u76f4\u63a5\u7b49\u4e8enow\u5c31\u597d\u4e86\r\n\t\t}\r\n\t\tfor(R i=qHead[x]; i ;i=qNext[i])\r\n\t\t{\r\n\t\t\tnow=qdate[i];\r\n\t\t\tif(vis[now] && !ans[i ^ 1])ans[i]=find(now);\r\n\t\t} \r\n\t}\r\n\t\r\n\tvoid pre()\r\n\t{\r\n\t\tR a,b;\r\n\t\tn=read();\r\n\t\tfor(R i=1;i<=n;i++)\tt[i]=read();\r\n\t\tfor(R i=1;i<n;i++)\r\n\t\t{\r\n\t\t\ta=read(),b=read();\t\r\n\t\t\tadd1(a,b);\r\n\t\t}\r\n\t\tfor(R i=1;i<n;i++)//\u6dfb\u52a0\u8be2\u95ee\r\n\t\t\tadd2(t[i],t[i+1]);\r\n\t\tfor(R i=1;i<=n;i++)father[i]=i;\r\n\t\tDFS(1);\r\n\t\tfor(R i=1;i<=n*2+1;i++)\r\n\t\t\tif(ans[i])\tLCA[++cnt]=ans[i];\r\n\t}\r\n\r\n\tvoid getans(int x)//\u7edf\u8ba1\u7b54\u6848,\u53ef\u4ee5\u7edf\u8ba1\u8fdb\u5165\r\n\t{\r\n\t\tR now;\r\n\t\tfor(R i=Head[x]; i ;i=Next[i])\r\n\t\t{\r\n\t\t\tnow=date[i];\r\n\t\t\tif(now!=fa[x])\t\r\n\t\t\t{\r\n\t\t\t\tgetans(now);\r\n\t\t\t\tpower[x]+=power[now];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tvoid work()\r\n\t{\r\n\t\tfor(R i=1;i<n;i++)\r\n\t\t{\r\n\t\t\tpower[t[i]]++,power[t[i+1]]++,power[LCA[i]]--,power[fa[LCA[i]]]--;//\u7531\u4e8e\u9898\u76ee\u7279\u6b8a\u6027\uff0c\u4e0d\u80fd\u6bcf\u6b21\u90fd+1,\u56e0\u4e3a\u8fdb\u51fa\u623f\u95f4\u53ea\u662f\u4e00\u6b21\r\n\t\t}//\u4f46\u662f\u8fd9\u6837\u5e76\u4e0d\u597d\u8ba1\u7b97\uff0c\u90a3\u5b8c\u5168\u53ef\u4ee5\u76f4\u63a5\u50cf\u5e73\u5e38\u4e00\u6837\u7edf\u8ba1\u554a\uff0c\u7531\u4e8e\u8fd9\u6837\u6bcf\u4e2a\u4e2d\u95f4\u8282\u70b9\u90fd\u4f1a\u88ab\u91cd\u590d\u8ba1\u7b97\u4e00\u6b21\uff0c\u90a3\u8f93\u51fa\u7684\u65f6\u5019-1\u4e0d\u5c31\u597d\u4e86\u5417\t\r\n\t\tgetans(1);\r\n\t\tfor(R i=2;i<=n;i++)//\u56e0\u4e3a\u8981\u6309\u4e0b\u6807\u8f93\u51fa\uff0c\u4f46\u662f\u91cd\u590d\u8ba1\u7b97\u7684\u662f\u5e8f\u5217\u4e2d\u95f4\u7684\uff0c\u6240\u4ee5\u662f\u8981\u5e8f\u5217\u4e2d\u95f4\u90fd-1,\u6240\u4ee5\u5148\u5904\u7406\r\n\t\t\tpower[t[i]]--;\r\n\t\tfor(R i=1;i<=n;i++)\tprintf(\"%d\\n\",power[i]);\r\n\t}\r\n\r\n\tint main()\r\n\t{\r\n\t\tfreopen(\"in.in\",\"r\",stdin);\r\n\t\tpre();\r\n\t\twork();\r\n\t\tfclose(stdin);\r\n\t\treturn 0;\r\n\t}",
        "postTime": 1518195182,
        "uid": 47136,
        "name": "ww3113306",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "- \u9898\u89e3\uff1a\u672c\u9898\u4e3b\u8981\u8003\u67e5\u6811\u94fe\u5256\u5206\u3002\n- \u7b80\u8981\u9898\u610f\uff1a\u4e00\u9897\u6811\uff0c\u6709n\u4e2a\u623f\u95f4\uff0c\u5e76\u4e14\u6709n-1\u6839\u6811\u679d\u8fde\u63a5\u3002\u5c0f\u718a\u7ef4\u5c3c\u5148\u53bb$a_1$\uff0c\u518d\u53bb$a_2$\u6700\u540e\u5230$a_n$\uff0c\u6bcf\u8d70\u5230\u4e00\u4e2a\u623f\u95f4\uff0c\u4ed6\u5c31\u53ef\u4ee5\u4ece\u623f\u95f4\u62ff\u4e00\u5757\u7cd6\u679c\u5403\uff0c\u6700\u540e\u4e00\u4e2a\u623f\u95f4\u4e0d\u7528\uff0c\u6c42\u6bcf\u4e2a\u623f\u95f4\u81f3\u5c11\u9700\u8981\u653e\u591a\u5c11\u4e2a\u7cd6\u679c\u3002\n- 1.\u6811\u94fe\u5256\u5206\uff1a\u8def\u8fc7\u7684\u70b9\u90fd\u52a0\u4e00\uff0c\u53ef\u4ee5\u60f3\u5230\u6811\u94fe\u5256\u5206\uff0c\u6bcf\u4e00\u6b21\u5c06$a[i]$\u5230$a[i+1]\u7684\u8282\u70b9\u52a0\u4e00\uff0c\u5728\u4e00\u6b21\u4fee\u6539\u540e\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u4e2a\u623f\u95f4\u4e0d\u7528\u52a0\uff0c\u6240\u4ee5\u907f\u514d\u91cd\u590d\u7ec8\u70b9\u8981\u51cf1\u3002\n- \u7ebf\u6bb5\u6811\u6a21\u677f\u533a\u95f4\u52a0\u548c\u533a\u95f4\u67e5\u8be2\u3002\u4ee3\u7801\u8fd8\u662f\u6bd4\u8f83\u6e05\u695a\u7684\u3002\n- \u6ce8\u610f\uff1a\u672c\u9898\u6570\u636e\u8f83\u5927\uff0c\u8981\u7528\u9ad8\u6548\u7684\u8bfb\u5199(\u4e00\u822c\u505a\u8fd9\u4e9b\u9898\u90fd\u8981\u5427QwQ)\uff0c\u6570\u7ec4\u4e00\u5b9a\u8981\u5f00\u56db\u500d\uff01\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nstruct N\n{\n\tint ans,lazy;\n}t[1126666];\nstruct E\n{\n\tint start,to;\n}e[1266666];\nint a[1266666],h[1266666],siz[1266666],son[1266666],d[1266666];\nint id[1266666],rk[1266666],top[1266666],f[1266666];\nint P,num,n,m;\nvoid pushup(int p)\n{\n\tt[p].ans=t[p*2].ans+t[p*2+1].ans;\n\treturn ;\n}\n/*void build(int p,int l,int r)//\u4e0d\u9700\u8981\u5efa\u6811\u7684\n{\n\tif(l==r){t[p].ans=a[l];return ;}\n\tint mid=l+r>>1;\n\tbuild(p<<1,l,mid);\n\tbuild(p<<1|1,mid+1,r);\n\tpushup(p);\n}*/\nvoid lai(int p,int l,int r)\n{\n\tint mid=l+r>>1;\n\tif(t[p].lazy)\n\t{\n\t\tt[p*2].ans+=t[p].lazy*(mid-l+1);\n\t\tt[p*2+1].ans+=t[p].lazy*(r-mid);\n\t\tt[p*2].lazy+=t[p].lazy;\n\t\tt[p*2+1].lazy+=t[p].lazy;\n\t\tt[p].lazy=0;\n\t}\n\treturn ;\n}\nvoid change(int p,int l,int r,int x,int y,int z)\n{\n\tif(x<=l&&y>=r)\n\t{\n\t\tt[p].ans+=z*(r-l+1);\n\t\tt[p].lazy+=z;\n\t\treturn ;\n\t}\n\tlai(p,l,r);\n\tint mid=l+r>>1;\n\tif(x<=mid)change(p<<1,l,mid,x,y,z);\n\tif(y>mid)change(p<<1|1,mid+1,r,x,y,z);\n\tpushup(p);\n}\nlong long ask(int p,int l,int r,int x,int y)\n{\n\tlong long ans=0;\n\tif(x<=l&&y>=r)return t[p].ans;\n\tlai(p,l,r);\n\tint mid=l+r>>1;\n\tif(x<=mid)ans+=ask(p<<1,l,mid,x,y);\n\tif(y>mid)ans+=ask(p<<1|1,mid+1,r,x,y);\n\treturn ans;\n}\nvoid add(int start,int to)\n{\n\te[++P].to=to;\n\te[P].start=h[start];\n\th[start]=P;\n}\nvoid dfs1(int p,int fa,int deep)\n{\n    f[p]=fa;siz[p]=1;d[p]=deep;\n    for(int i=h[p];i;i=e[i].start)\n\t{\n        int k=e[i].to;\n        if(k==fa)continue;\n        dfs1(k,p,deep+1);\n        siz[p]+=siz[k];\n        if(siz[k]>siz[son[p]])son[p]=k;\n    }\n}\nvoid dfs2(int p,int tp)\n{\n\tid[p]=++num;rk[num]=a[p];top[p]=tp;\n    if(!son[p])return;\n    dfs2(son[p],tp);\n    for(int i=h[p];i;i=e[i].start)\n\t{\n        int k=e[i].to;\n        if(k==f[p]||k==son[p]) continue;\n        dfs2(k,k);\n    }\n}\nint sum(int x,int y,int z)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(d[top[x]]<d[top[y]])swap(x,y);\n\t\tchange(1,1,n,id[top[x]],id[x],z);\n\t\tx=f[top[x]];\n\t}\n\tif(d[x]>d[y])swap(x,y);\n\tchange(1,1,n,id[x],id[y],z);\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)cin>>a[i];\n\tfor(int i=1;i<=n-1;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);add(y,x);\n\t}\n\t//build(1,1,n);\n\tdfs1(1,0,1);dfs2(1,1);\n\tfor(int i=1;i<=n-1;i++)\n\t{\n        sum(a[i],a[i+1],1);\n        sum(a[i+1],a[i+1],-1);\n    }\n    for(int i=1;i<=n;i++)\n    printf(\"%d\\n\",ask(1,1,n,id[i],id[i]));\n\treturn 0;\n}```",
        "postTime": 1574750023,
        "uid": 120734,
        "name": "wshl",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "## \u3010\u601d\u8def\u3011\n\n\u500d\u589e/\u6811\u94fe\u5256\u5206 + \u6811\u4e0a\u5dee\u5206    \n\u5f88\u6709\u610f\u601d\u5f88\u6709\u610f\u601d\u7684\u4e00\u9053\u9898\u76ee     \n\u4f1a\u4e86\u6811\u4e0a\u5dee\u5206\u51e0\u4e4e\u5c31\u662f\u4e00\u4e2a\u677f\u5b50\u9898      \n\u4e0d\uff0c\u662f\u4e24\u4e2a\u677f\u5b50\u9898     \n\u500d\u589e/\u6811\u94fe\u5256\u5206\u677f\u5b50 + \u6811\u4e0a\u5dee\u5206\u677f\u5b50    \n\u5148dfs\u51fa\u8fd9\u68f5\u6811\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u548c\u4ed6\u8df32^n\u4e4b\u540e\u4f1a\u8df3\u5230\u54ea\u4e00\u4e2a\u70b9     \n\u7136\u540e\u6309\u7167\u9898\u76ee\u7ed9\u51fa\u7684\u5230\u8fbe\u623f\u95f4\u7684\u987a\u5e8f     \n\u627e $a_1$\u548c $a_2$\u7684LCA, $a_2$ \u548c $a_3$ \u7684LCA\u2026\u2026     \n\u7136\u540e\u8fd0\u7528\u6811\u4e0a\u5dee\u5206     \n\u5c06 $a_i$ \u548c $a_i+1$ \u7684\u5dee\u5206\u6570\u7ec4\u90fd\u52a0\u4e0a1\uff0c    \n\u7136\u540e\u5c06LCA\u548cLCA\u592b\u59bb\u7684\u5dee\u5206\u6570\u7ec4\u90fd\u51cf\u53bb1     \n\n\u6700\u540e\u4e00\u4e2a\u9012\u5f52\u9012\u5f52\u51fa\u6bcf\u4e2a\u5e97\u7684\u503c    \n\u8f93\u51fa\u5c31\u597d\u4e86      \n\u6ce8\u610f\uff1a     \n\u8fd9\u91cc\u6709n-1\u4e2a\u70b9\u4f5c\u4e3a\u4e86\u8d77\u70b9\u4e5f\u4f5c\u4e3a\u4e86\u7ec8\u70b9     \n\u6240\u4ee5\u91cd\u590d\u4e861\u6b21     \n\u5224\u65ad\u4e00\u4e0b\u91cd\u590d\u8fc7\u7684\u5728\u8f93\u51fa\u7684\u65f6\u5019\u987a\u624b\u51cf\u53bb1\u5c31\u597d\u4e86      \n\n## \u3010\u5b8c\u6574\u4ee3\u7801\u3011\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\nconst int Max = 300005;\nstruct node\n{\n\tint y;\n\tint ne;\n}s[Max << 1];\nint a[Max];\nint depth[Max];\nint fa[Max][23];\nint head[Max];\nint sum = 0;\nint c[Max];\nint ans[Max];\n\nvoid add(int x,int y)\n{\n\ts[++ sum].y = y;\n\ts[sum].ne = head[x];\n\thead[x] = sum;\n\t\n\ts[++ sum].y = x;\n\ts[sum].ne = head[y];\n\thead[y] = sum;\n}\n\nvoid dfs(int f,int fath)\n{\n\tdepth[f] = depth[fath] + 1;\n\tfa[f][0] = fath;\n\tfor(register int i = 1;(1 << i) <= depth[f];++ i)\n\t\tfa[f][i] = fa[fa[f][i - 1]][i - 1];\n\tfor(int i = head[f];i != 0;i = s[i].ne)\n\t\tif(s[i].y != fath)\n\t\t\tdfs(s[i].y,f);\n}\n\nint lca(int x,int y)\n{\n\tif(depth[x] < depth[y])swap(x,y);\n\tfor(register int i = 22;i >= 0;i --)\n\t\tif(depth[fa[x][i]] >= depth[y])\n\t\t\tx = fa[x][i];\n\tif(x == y)return x;\n\tfor(register int i = 22;i >= 0;i --)\n\t\tif(fa[x][i] != fa[y][i])\n\t\t\tx = fa[x][i],y = fa[y][i];\n\treturn fa[x][0];\n}\n\n/*\nvoid doit(int x)\n{\n\tans[x] = c[x];\n\twhile(fa[x][0] != 0)\n\t{\n\t\tans[fa[x][0]] += ans[x] + a[fa[x][0]];\n\t\tx = fa[x][0];\n\t}\n}\n\nvoid search(int x)\n{\n\tint js = 0;\n\tfor(register int i = head[x];i != 0;i = s[i].ne)\n\t{\n\t\tint qwq = s[i].y;\n\t\tif(qwq != fa[x][0])\n\t\t{\n\t\t\tjs ++;\n\t\t\tans[qwq] = ans[x] + c[qwq];\n\t\t\tsearch(qwq);\n\t\t}\n\t}\n\tif(js == 0)\n\t\tdoit(x);\n}\n*/\n\nint search(int x)\n{\n\tans[x] = c[x];\n\tfor(register int i = head[x];i != 0;i = s[i].ne)\n\t{\n\t\tint qwq = s[i].y;\n\t\tif(qwq != fa[x][0])\n\t\t\tans[x] += search(qwq);\n\t}\n\treturn ans[x];\n}\nint main()\n{\n\tfreopen(\"1.in\",\"r\",stdin);\n\tfreopen(\"1.out\",\"w\",stdout);\n\tint n;\n\tcin >> n;\n\tint x,y;\n\tfor(register int i = 1;i <= n;++ i)\n\t\tcin >> a[i];\n\tfor(register int i = 1;i < n;++ i)\n\t\tcin >> x >> y,add(x,y);\n\tdfs(1,0);\n\t//fa[1][0] = 1;\n\tfor(register int i = 1;i < n;++ i)\n\t{\n\t\tint LCA = lca(a[i],a[i + 1]);\n\t\tc[LCA] -= 1;c[fa[LCA][0]] -= 1;\n\t\tc[a[i]] ++;c[a[i + 1]] ++;\n\t}\n\t/*\n\tfor(int i = 1;i <= n;++ i)\n\t\tcout << c[i] << endl;\n\t*/\n\tint acioi = search(1);\n\tfor(register int i = 1;i <= n;++ i)\n\t{\n\t\tif(i == a[1])\n\t\t\tcout << ans[i] << endl;\n\t\telse\n\t\t\tcout << ans[i] - 1<< endl;\n\t}\n\treturn 0;\n```",
        "postTime": 1570609945,
        "uid": 186489,
        "name": "EarthGiao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u4e00\u773c\u6811\u5256\u3002\n\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u5256\u66b4\u529b\u6a21\u62df\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u652f\u6301\u533a\u95f4\u4fee\u6539\u548c\u5355\u70b9\u67e5\u8be2\u3002\n\n\u4e8e\u662f\u6211\u5c31\u61a8\u61a8\u7684\u5199\u4e86\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5957\u6811\u5256\uff0c\u7ed3\u679c...\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/oiwr1vqk.png)\n\n\u679c\u7136\u7ebf\u6bb5\u6811\u7684\u5e38\u6570\u8fd8\u662f\u592a\u5927\u4e86...\u8fd8\u5f88\u96be\u5199\n\n\u7b49\u7b49\uff0c\u533a\u95f4\u4fee\u6539\u5355\u70b9\u67e5\u8be2\uff1f\u6211\u4e3a\u4ec0\u4e48\u4e0d\u7528\u6811\u72b6\u6570\u7ec4\uff1f\uff1f\uff1f\n\n\u62b1\u7740\u8bd5\u8bd5\u7684\u5fc3\u6001\uff0c\u7ed3\u679c\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/8cuhccs0.png)\n\n\u6811\u72b6\u6570\u7ec4nb\uff01\n\n$Code:$\n\n\u7ebf\u6bb5\u6811\uff1a\n```cpp\nn#include <bits/stdc++.h>\n#define ls(x) x << 1\n#define rs(x) x << 1 | 1 \n\nusing namespace std;\n\nconst int maxn = 300000 + 10;\n\nstruct Edge {\n    int to , nxt;\n}e[maxn << 1];\n\nint n , a[maxn];\nint head[maxn] , cnt;\n\nvoid add(int u ,int v ) {\n    e[++cnt].to = v;\n    e[cnt].nxt = head[u];\n    head[u] = cnt;\n}\n\nint fa[maxn] , dep[maxn] , son[maxn] , size[maxn];\nvoid dfs1(int now , int f) {\n    fa[now] = f;\n    size[now] = 1;\n    dep[now] = dep[f] + 1;\n    for(int i = head[now] ; i ; i = e[i].nxt) {\n        int v = e[i].to;\n        if(v == f) continue;\n        dfs1(v , now);\n        size[now] += size[v];\n        if(size[son[now]] < size[v]) son[now] = v;\n    }\n}\n\nint seg[maxn] ,top[maxn] , idx;\nvoid dfs2(int now , int t) {\n    top[now] = t;\n    seg[now] = ++ idx;\n    if(!son[now]) return;\n    dfs2(son[now] , t);\n    for(int i = head[now] ; i ; i = e[i].nxt) {\n        int v = e[i].to;\n        if(v == fa[now] || v == son[now]) continue;\n        dfs2( v , v);\n    }\n}\n\nstruct Segment_Tree {\n    int l , r , dis , add;\n}t[maxn << 2];\n\nvoid pushup(int x) {t[x].dis = t[ls(x)].dis + t[rs(x)].dis;}\n\nvoid pushdown(int x) {\n    int len1 = t[ls(x)].r - t[ls(x)].l + 1;\n    int len2 = t[rs(x)].r - t[rs(x)].l + 1;\n    t[ls(x)].dis += t[x].add * len1;\n    t[rs(x)].dis += t[x].add * len2;\n    t[ls(x)].add += t[x].add;\n    t[rs(x)].add += t[x].add;\n    t[x].add = 0;\n}\n\nvoid built(int x ,int l , int r) {\n    t[x].l = l , t[x].r = r;\n    if(l == r ) {t[x].dis = 0 ; return ;}\n    int mid = (l + r) >> 1;\n    built(ls(x) , l , mid); built(rs(x) , mid + 1 , r);\n    pushup(x);\n}\n\nvoid updata(int x , int l ,int r , int w) {\n    if(t[x].l >= l && t[x].r <= r) {\n        t[x].dis += (t[x].r - t[x].l + 1) * w;\n        t[x].add += w; return;\n    }\n    pushdown(x);\n    int mid = (t[x].l + t[x].r) >> 1;\n    if(l <= mid) updata(ls(x) , l , r , w);\n    if(r > mid) updata(rs(x) , l ,r ,w);\n    pushup(x);\n}\n\nint query(int x , int p) {\n    if(t[x].l == t[x].r) {\n        return t[x].dis;\n    }\n    pushdown(x);\n    int mid = (t[x].l + t[x].r ) >> 1;\n    if(p <= mid) return query (ls(x) , p);\n    else return query(rs(x) , p);\n    pushup(x);\n}\n\nvoid modify(int u , int v , int w) {\n    while(top[u] != top[v]) {\n        if(dep[top[u]] < dep[top[v]]) swap(u , v);\n        updata(1 , seg[top[u]] , seg[u] ,w);\n        u = fa[top[u]];\n    }\n    if(dep[u] > dep[v]) swap(u , v);\n    updata(1 , seg[u] , seg[v] , w);\n}\n\nint main () {\n    scanf(\"%d\" ,&n);\n    for(int i = 1 ; i <= n ; ++ i) scanf(\"%d\" , a + i);\n    for(int i = 1 ; i < n ; ++ i) {\n        int u , v;\n        scanf(\"%d%d\" , &u , &v);\n        add(u , v); add(v , u);\n    }\n    dfs1(1 , 1); dfs2(1 , 1); built(1 , 1 , n);\n    for(int i = 1 ; i < n ; ++ i) {\n    \t//printf(\"%d -> %d \\n\" , a[i] , a [i + 1]);\n    \tmodify(a[i] , a[i + 1] ,1) ,modify(a[i + 1] , a[i + 1] , -1);\n\t}\n\tfor(int i = 1 ; i < n ; ++ i) printf(\"%d\\n\" , query(1 , seg[i]));\n    printf(\"%d\" , query(1 , seg[n]) );\n    return 0;\n}\n```\n\n\u6811\u72b6\u6570\u7ec4:\n\n```cpp\n#include <bits/stdc++.h>\n#define ls(x) x << 1\n#define rs(x) x << 1 | 1 \n#define lowbit(x) x & (-x)\n\nusing namespace std;\n\nconst int maxn = 300000 + 10;\n\nstruct Edge {\n    int to , nxt;\n}e[maxn << 1];\n\nint n , a[maxn];\nint head[maxn] , cnt;\n\nvoid add(int u ,int v ) {\n    e[++cnt].to = v;\n    e[cnt].nxt = head[u];\n    head[u] = cnt;\n}\n\nint fa[maxn] , dep[maxn] , son[maxn] , size[maxn];\nvoid dfs1(int now , int f) {\n    fa[now] = f;\n    size[now] = 1;\n    dep[now] = dep[f] + 1;\n    for(int i = head[now] ; i ; i = e[i].nxt) {\n        int v = e[i].to;\n        if(v == f) continue;\n        dfs1(v , now);\n        size[now] += size[v];\n        if(size[son[now]] < size[v]) son[now] = v;\n    }\n}\n\nint seg[maxn] ,top[maxn] , idx;\nvoid dfs2(int now , int t) {\n    top[now] = t;\n    seg[now] = ++ idx;\n    if(!son[now]) return;\n    dfs2(son[now] , t);\n    for(int i = head[now] ; i ; i = e[i].nxt) {\n        int v = e[i].to;\n        if(v == fa[now] || v == son[now]) continue;\n        dfs2( v , v);\n    }\n}\n\nint tree[maxn << 1];\n\nvoid change (int x , int w) {\n\twhile(x) {\n\t\ttree[x] += w;\n\t\tx -= lowbit(x);\t\n\t}\n}\n\nvoid updata(int l ,int r , int w) {\n    change(l - 1, -w);\n    change(r , w);\n}\n\nint query(int p) {\n\tint ans = 0;\n    while(p <= n) {\n    \tans += tree[p];\n    \tp += lowbit(p);\n\t}\n\treturn ans;\n}\n\nvoid modify(int u , int v , int w) {\n    while(top[u] != top[v]) {\n        if(dep[top[u]] < dep[top[v]]) swap(u , v);\n        updata(seg[top[u]] , seg[u] ,w);\n        u = fa[top[u]];\n    }\n    if(dep[u] > dep[v]) swap(u , v);\n    updata(seg[u] , seg[v] , w);\n}\n\nint main () {\n    scanf(\"%d\" ,&n);\n    for(int i = 1 ; i <= n ; ++ i) scanf(\"%d\" , a + i);\n    for(int i = 1 ; i < n ; ++ i) {\n        int u , v;\n        scanf(\"%d%d\" , &u , &v);\n        add(u , v); add(v , u);\n    }\n    dfs1(1 , 1); dfs2(1 , 1);\n    for(int i = 1 ; i < n ; ++ i) {\n    \t//printf(\"%d -> %d \\n\" , a[i] , a [i + 1]);\n    \tmodify(a[i] , a[i + 1] ,1) ,modify(a[i + 1] , a[i + 1] , -1);\n\t}\n\tfor(int i = 1 ; i < n ; ++ i) printf(\"%d\\n\" , query(seg[i]));\n    printf(\"%d\" , query(seg[n]) );\n    return 0;\n}\n```",
        "postTime": 1569898769,
        "uid": 134080,
        "name": "jins3599",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5927\u4f6c\u4eec\u7684\u65b9\u6cd5\u90fd\u5f88\u5f3a\u5440\n\n~~\u6211\u8fd9\u4e2a\u5c0f\u849f\u84bb\u8fd8\u662f\u592a\u83dc~~\n\n\u6811\u94fe\u5256\u5206+\u6811\u4e0a\u5dee\u5206\n\n\u6811\u94fe\u5256\u5206\u4e4b\u540e\uff0c\u6bcf\u4e00\u6b21\u5728\u6811\u4e0a\u8df3\u91cd\u94fe\u7684\u65f6\u5019\n\n\u5229\u7528\u6811\u4e0a\u5dee\u5206\uff0c\u5c06\u4e00\u6bb5\u533a\u95f4\u7684\u503c\u5dee\u5206\u8868\u793a\u51fa\u6765\n\n\u6700\u540eO(n)\u626b\u4e00\u904d\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\n\n\u56e0\u4e3a\u6bcf\u4e00\u6b21\u8bbf\u95ee\u7684\u65f6\u5019\u4f1a\u6709\u4e00\u4e2a\u8282\u70b9\u88ab\u7b97\u4e24\u6b21\n\n\u8bb0\u4f4f\u8981\u51cf\u53bb\u4e00\u6b21\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#define MAX 301000\ninline int read()\n{\n    register int x=0,t=1;\n    register char ch=getchar();\n    while(ch!='-'&&(ch<'0'||ch>'9'))ch=getchar();\n    if(ch=='-'){t=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-48;ch=getchar();}\n    return x*t;\n}\nstruct Line\n{\n    int v,next;\n}e[MAX*3];\nint h[MAX],hson[MAX],size[MAX],top[MAX],f[MAX],dep[MAX],dfn[MAX];\nint N,M,cnt=1,c[MAX],tim,A[MAX],line[MAX],Ans[MAX];\ninline void Add(int u,int v)\n{\n    e[cnt]=(Line){v,h[u]};\n    h[u]=cnt++;\n}\nvoid DFS1(int u,int ff)\n{\n    hson[u]=0;size[u]=1;f[u]=ff;dep[u]=dep[ff]+1;\n    for(int i=h[u];i;i=e[i].next)\n    {\n        int v=e[i].v;\n        if(v==ff)continue;\n        DFS1(v,u);\n        if(size[v]>size[hson[u]])hson[u]=v;\n        size[u]+=size[v];\n    }\n}\nvoid DFS2(int u,int tp)\n{\n    top[u]=tp;dfn[u]=++tim;line[tim]=u;\n    if(hson[u])DFS2(hson[u],tp);\n    for(int i=h[u];i;i=e[i].next)\n    {\n        int v=e[i].v;\n        if(v==hson[u]||v==f[u])continue;\n        DFS2(v,v);\n    }\n}\nvoid LCA(int x,int y)\n{\n    int tp1=top[x],tp2=top[y];\n    while(tp1!=tp2)\n    {\n        if(dep[tp1]<dep[tp2])\n        {\n            swap(tp1,tp2);\n            swap(x,y);\n        }\n        c[dfn[tp1]]++;c[dfn[x]+1]--;\n        x=f[tp1];tp1=top[x];\n    }\n    if(dep[x]<dep[y])swap(x,y);\n    c[dfn[y]]++;c[dfn[x]+1]--;\n}\nint main()\n{\n    N=read();\n    for(int i=1;i<=N;++i)A[i]=read();\n    for(int i=1;i<N;++i)\n    {\n        int a=read(),b=read();\n        Add(a,b);Add(b,a);\n    }\n    DFS1(1,0);DFS2(1,1);\n    for(int i=1;i<N;++i)\n    {\n        int x=A[i],y=A[i+1];\n        LCA(x,y);\n        c[dfn[y]]--;c[dfn[y]+1]++;\n    }\n    int ans=0,pl=0;\n    for(int i=1;i<=N;++i)\n    {\n        pl=pl+c[i];\n        Ans[line[i]]=pl;\n    } \n    for(int i=1;i<=N;++i)printf(\"%d\\n\",Ans[i]);\n    return 0;\n}\n```",
        "postTime": 1503761349,
        "uid": 21283,
        "name": "yybyyb",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u8fd9\u662f\u6811\u5256\u7684\u6a21\u677f\u9898\u4e86\u5427\u2026\u2026\n\n\u9898\u76ee\u8981\u6c42\u6211\u4eec\u7ef4\u62a4\u4e00\u68f5\u6811\uff0c\u8fdb\u884c\u8def\u5f84\u4fee\u6539\u548c\u5355\u70b9\u67e5\u8be2\u3002\n\n\u5982\u679c\u4e0d\u4f1a\u6811\u94fe\u5256\u5206\u7684\u8bdd\u8bf7\u70b9[\u8fd9\u91cc](https://www.cnblogs.com/szbszb/p/11624130.html)\n\n\u8003\u8651\u5b9e\u73b0\u65b9\u6cd5\uff1a\n\n\u9996\u5148\uff0c\u6211\u4eec\u60f3\u5230\u76f4\u63a5\u5bf9\u6bcf\u6761\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u52a0\u4e00\u5c31\u53ef\u4ee5\u4e86\uff0c\u6700\u540e\u4e00\u4e2a\u70b9-1\uff0c\u8fd9\u6837\u597d\u50cf\u5c31\u7b97\u505a\u51fa\u6765\u4e86\u3002\n\n\u4f46\u662f\uff01\u6211\u4eec\u4ed4\u7ec6\u60f3\u60f3\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e00\u4e2a\u8def\u5f84\u7684\u7ec8\u70b9\u53c8\u662f\u4e0b\u6761\u8def\u5f84\u7684\u8d77\u70b9\uff0c\u800c\u6211\u4eec\u5bf9\u5176\u4fee\u6539\u4e86\u4e24\u904d\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u6709\u95ee\u9898\u4e86\n\n\u535a\u4e3b\u60f3\u5230\u4e86\u4e24\u79cd\u89e3\u9898\u65b9\u6cd5\n\n1\u3001\u5bf9\u6bcf\u6761\u8def\u5f84\u4fee\u6539\u540e\uff0c\u5c06\u7ec8\u70b9\u7684\u503c\u51cf\u4e00\uff1a\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u4e0d\u5b58\u5728\u91cd\u590d\u8986\u76d6\u7684\u95ee\u9898\u4e86\uff0c\u800c\u4e14\u8fd9\u4e5f\u6070\u597d\u7b26\u5408\u4e86\u7ec8\u70b9\u8981-1\u7684\u60c5\u51b5\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long max1,n,m,r1,p,q,x,y,k,i,c[4000001],siz[1000001],id[1000001],son[1000001],l[4000001],r[4000001],a[1000001],w[1000001],cnt,z[4000001],he[1000001],ne[2000001],to[2000001],top[1000001],d[1000001],f[1000001];\nvoid did1(long long u,long long fat,long long deep)\n{\n\td[u]=deep;\n\tf[u]=fat;\n\tsiz[u]=1;\n\tfor (long long i=he[u];i;i=ne[i])\n\t{\n\t\tlong long v=to[i];\n\t\tif (v==f[u]) continue;\n\t\tdid1(v,u,deep+1);\n\t\tif (siz[v]>siz[son[u]]) son[u]=v;\n\t\tsiz[u]+=siz[v];\n\t}\n}\nvoid did2(long long u,long long t)\n{\n\ttop[u]=t;\n\tid[u]=++cnt;\n\tif (!son[u]) return;\n\tdid2(son[u],t);\n\tfor (long long i=he[u];i;i=ne[i])\n\t{\n\t\tlong long v=to[i];\n\t\tif (v==f[u]||v==son[u]) continue;\n\t\tdid2(v,v);\n\t}\n}\nvoid xiafang(long long u)\n{\n\tz[u*2]+=c[u]*(r[u*2]-l[u*2]+1);\n\tz[u*2+1]+=c[u]*(r[u*2+1]-l[u*2+1]+1);\n\tc[u*2]+=c[u];\n\tc[u*2+1]+=c[u];\n\tc[u]=0;\n}\nvoid build(long long u,long long l1,long long r1)\n{\n\tl[u]=l1;\n\tr[u]=r1;\n\tif (l1==r1)\n\t\treturn;\n\tbuild(u*2,l1,(l1+r1)/2);\n\tbuild(u*2+1,(l1+r1)/2+1,r1);\n\tz[u]=(z[u*2]+z[u*2+1]);\n}\nvoid jia(long long u,long long l1,long long r1,long long k)\n{\n\tif (l[u]>r1||r[u]<l1) return;\n\tif (l[u]>=l1&&r[u]<=r1)\n\t{\n\t\tz[u]=(z[u]+k*(r[u]-l[u]+1));\n\t\tc[u]+=k;\n\t\treturn;\n\t}\n\txiafang(u);\n\tjia(u*2,l1,r1,k);\n\tjia(u*2+1,l1,r1,k);\n\tz[u]=(z[u*2]+z[u*2+1]);\n}\nlong long qui(long long u,long long l1,long long r1)\n{\n\tif (l[u]>r1||r[u]<l1) return 0;\n\tif (l[u]>=l1&&r[u]<=r1) return z[u];\n\txiafang(u);\n\treturn (qui(u*2,l1,r1)+qui(u*2+1,l1,r1));\n}\nvoid jiapro(long long x,long long y,long long k)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif (d[top[x]]<d[top[y]]) swap(x,y);\n\t\tjia(1,id[top[x]],id[x],k);\n\t\tx=f[top[x]];\n\t}\n\tif (d[x]>d[y]) swap(x,y);\n\tjia(1,id[x],id[y],k); \n}\nlong long quipro(long long x,long long y)\n{\n\tlong long ans=0;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif (d[top[x]]<d[top[y]]) swap(x,y);\n\t\tans=(ans+qui(1,id[top[x]],id[x]));\n\t\tx=f[top[x]];\n\t}\n\tif (d[x]>d[y]) swap(x,y);\n\tans=(ans+qui(1,id[x],id[y]));\n\treturn ans;\n}\nvoid jiason(long long x,long long k)\n{\n\tjia(1,id[x],id[x]+siz[x]-1,k);\n}\nlong long quison(long long x)\n{\n\treturn qui(1,id[x],id[x]+siz[x]-1);\n}\nint main()\n{\n\tscanf(\"%lld\",&n);\n\tfor(i=1;i<=n;i++)\n\t\tscanf(\"%lld\",&a[i]);\n\tfor (i=1;i<n;i++)\n\t{\n\t\tscanf(\"%lld%lld\",&x,&y);\n\t\tcnt++;\n\t\tne[cnt]=he[x];\n\t\tto[cnt]=y;\n\t\the[x]=cnt;\n\t\tcnt++;\n\t\tne[cnt]=he[y];\n\t\tto[cnt]=x;\n\t\the[y]=cnt;\n\t}\n\tcnt=0;\n\tdid1(1,0,1);\n\tdid2(1,1);\n\tbuild(1,1,n);\n\tfor (i=1;i<n;i++)\n\t{\n\t\tjiapro(a[i],a[i+1],1);\n\t\tjiapro(a[i+1],a[i+1],-1);//\u5c06\u7ec8\u70b9\u7684\u503c-1\n\t}\n\tfor (i=1;i<=n;i++)\n\t\tprintf(\"%lld\\n\",qui(1,id[i],id[i]));//\u76f4\u63a5\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u7cd6\u679c\u6570\n\treturn 0;\n}\n```\n\u8fd9\u662f\u80fdAC\u7684\u3002\n\n2\u3001\u5c06\u9664\u4e00\u53f7\u70b9\u4ee5\u5916\u7684\u6240\u6709\u70b9\u6743-1\u3002\n\n\u539f\u7406\u8bc1\u660e\uff1a\u9664\u4e00\u53f7\u70b9\u3001\u7ec8\u70b9\u4ee5\u5916\u7684\u6240\u6709\u70b9\u90fd\u88ab\u5f53\u6210\u4e86\u8def\u5f84\u7ec8\u70b91\u6b21\u3001\u8d77\u70b91\u6b21\uff0c\u800c\u7ec8\u70b9\u672c\u56e0-1\uff0c\u6240\u4ee5\u4e5f\u662f\u6b63\u786e\u7684\uff08\u4f46\u535a\u4e3b\u6ca1\u8bd5\u8fc7\uff0c\u4ee3\u7801\u5199\u597d\u4e86\u6ca1\u4ea4\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long max1,n,m,r1,p,q,x,y,k,i,c[4000001],siz[1000001],id[1000001],son[1000001],l[4000001],r[4000001],a[1000001],w[1000001],cnt,z[4000001],he[1000001],ne[2000001],to[2000001],top[1000001],d[1000001],f[1000001];\nvoid did1(long long u,long long fat,long long deep)\n{\n\td[u]=deep;\n\tf[u]=fat;\n\tsiz[u]=1;\n\tfor (long long i=he[u];i;i=ne[i])\n\t{\n\t\tlong long v=to[i];\n\t\tif (v==f[u]) continue;\n\t\tdid1(v,u,deep+1);\n\t\tif (siz[v]>siz[son[u]]) son[u]=v;\n\t\tsiz[u]+=siz[v];\n\t}\n}\nvoid did2(long long u,long long t)\n{\n\ttop[u]=t;\n\tid[u]=++cnt;\n\tif (!son[u]) return;\n\tdid2(son[u],t);\n\tfor (long long i=he[u];i;i=ne[i])\n\t{\n\t\tlong long v=to[i];\n\t\tif (v==f[u]||v==son[u]) continue;\n\t\tdid2(v,v);\n\t}\n}\nvoid xiafang(long long u)\n{\n\tz[u*2]+=c[u]*(r[u*2]-l[u*2]+1);\n\tz[u*2+1]+=c[u]*(r[u*2+1]-l[u*2+1]+1);\n\tc[u*2]+=c[u];\n\tc[u*2+1]+=c[u];\n\tc[u]=0;\n}\nvoid build(long long u,long long l1,long long r1)\n{\n\tl[u]=l1;\n\tr[u]=r1;\n\tif (l1==r1)\n\t\treturn;\n\tbuild(u*2,l1,(l1+r1)/2);\n\tbuild(u*2+1,(l1+r1)/2+1,r1);\n\tz[u]=(z[u*2]+z[u*2+1]);\n}\nvoid jia(long long u,long long l1,long long r1,long long k)\n{\n\tif (l[u]>r1||r[u]<l1) return;\n\tif (l[u]>=l1&&r[u]<=r1)\n\t{\n\t\tz[u]=(z[u]+k*(r[u]-l[u]+1));\n\t\tc[u]+=k;\n\t\treturn;\n\t}\n\txiafang(u);\n\tjia(u*2,l1,r1,k);\n\tjia(u*2+1,l1,r1,k);\n\tz[u]=(z[u*2]+z[u*2+1]);\n}\nlong long qui(long long u,long long l1,long long r1)\n{\n\tif (l[u]>r1||r[u]<l1) return 0;\n\tif (l[u]>=l1&&r[u]<=r1) return z[u];\n\txiafang(u);\n\treturn (qui(u*2,l1,r1)+qui(u*2+1,l1,r1));\n}\nvoid jiapro(long long x,long long y,long long k)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif (d[top[x]]<d[top[y]]) swap(x,y);\n\t\tjia(1,id[top[x]],id[x],k);\n\t\tx=f[top[x]];\n\t}\n\tif (d[x]>d[y]) swap(x,y);\n\tjia(1,id[x],id[y],k); \n}\nlong long quipro(long long x,long long y)\n{\n\tlong long ans=0;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif (d[top[x]]<d[top[y]]) swap(x,y);\n\t\tans=(ans+qui(1,id[top[x]],id[x]));\n\t\tx=f[top[x]];\n\t}\n\tif (d[x]>d[y]) swap(x,y);\n\tans=(ans+qui(1,id[x],id[y]));\n\treturn ans;\n}\nvoid jiason(long long x,long long k)\n{\n\tjia(1,id[x],id[x]+siz[x]-1,k);\n}\nlong long quison(long long x)\n{\n\treturn qui(1,id[x],id[x]+siz[x]-1);\n}\nint main()\n{\n\tscanf(\"%lld\",&n);\n\tfor(i=1;i<=n;i++)\n\t\tscanf(\"%lld\",&a[i]);\n\tfor (i=1;i<n;i++)\n\t{\n\t\tscanf(\"%lld%lld\",&x,&y);\n\t\tcnt++;\n\t\tne[cnt]=he[x];\n\t\tto[cnt]=y;\n\t\the[x]=cnt;\n\t\tcnt++;\n\t\tne[cnt]=he[y];\n\t\tto[cnt]=x;\n\t\the[y]=cnt;\n\t}\n\tcnt=0;\n\tdid1(1,0,1);\n\tdid2(1,1);\n\tbuild(1,1,n);\n\tfor (i=1;i<n;i++)\n\t\tjiapro(a[i],a[i+1],1);\n    printf(\"%lld\\n\",qui(1,id[1],id[1]));\n    for (i=2;i<=n;i++)\n\t\tprintf(\"%lld\\n\",qui(1,id[i],id[i])-1);\n\treturn 0;\n}\n```\n\u6ca1\u8bd5\u8fc7\uff0c\u4e5f\u8bb8\u662f\u5bf9\u7684\uff1f\u4e5f\u8bb8\u54ea\u91cc\u5199\u51fa\u9505\u4e86\uff1f\u4e0d\u8fc7\u601d\u60f3\u5e94\u8be5\u662f\u5bf9\u7684\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u4e0d\u4fdd\u8bc1\u6b63\u786e\uff0c\u5982\u679c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u5df1\u5c1d\u8bd5\u7528\u6211\u90a3\u4e2a\u7b97\u6cd5\u8bd5\u8bd5\u3002\n\n\u8c03\u6162\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u590d\u5236\u4ee3\u7801\u65e0\u6cd5AC\uff08\u5f53\u7136\u4f60\u4f18\u5316\u6211\u4e5f\u4e0d\u62e6\u4f60\uff09",
        "postTime": 1572172999,
        "uid": 33480,
        "name": "szbszb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6211\u592a\u5f31\u4e86\u53ea\u60f3\u5230\u6811\u94fe\u5256\u5206\u7684\u89e3\u6cd5\n\n\u4e3a\u4ec0\u4e48\u5927\u4f6c\u90fd\u7528\u7ebf\u6bb5\u6811\u5462\uff1f\uff1f\uff1f\n\n\u6211\u6765\u4e2a\u6811\u72b6\u6570\u7ec4\u3002\n\n\u601d\u8def\u5f88\u7b80\u5355\uff0c\u6bcf\u6b21\u5728\u8def\u5f84ai\u5230aj\uff08\u4e0d\u5305\u62ecaj\uff09\u7684\u6240\u6709\u70b9\u52a0\u4e00\uff0c\u6700\u540e\u518d\u6c42\u5355\u70b9\u7684\u503c\n\n\u5bf9\u4e8e\u6b64\u9898\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u8981\u8ba9\u6570\u636e\u7ed3\u6784\u652f\u6301\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u5c31\u884c\n\n\u56e0\u6b64\u8003\u8651\u6811\u72b6\u6570\u7ec4\uff08\u5982\u679c\u4e0d\u77e5\u9053\u6811\u72b6\u6570\u7ec4\u5982\u4f55\u652f\u6301\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u901a\u8fc7\u6d1b\u8c37\u7684\u6811\u72b6\u6570\u7ec42\u677f\u5b50\uff09\n\n\u4e0b\u9762\u5c31\u653e\u4e0a\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n\nusing namespace std;\n\nstruct edge\n{\n\tint to,next;\n}e[600010];\n\nint c[300010];\n\nint num,head[300010];\n\nint n,cnt;\n\nint d[300010],f[300010],size[300010],son[300010],top[300010],id[300010],path[300010];\n\nvoid addedge(int a,int b)//\u5efa\u8fb9\n{\n\te[++num].to=b;\n\te[num].next=head[a];\n\thead[a]=num;\n}\n\nvoid add(int x,int val)//\u6dfb\u52a0\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6811\u72b6\u6570\u7ec4\u53ea\u80fd\u6dfb\u52a0\u524d\u7f00\u548c\n{\n  for(;x;x-=(x&-x)) c[x]+=val;\n}\n\nint ask(int x)//\u6c38\u4e45\u6807\u8bb0\uff0c\u5355\u70b9\u67e5\u8be2\n{\n  long long ans=0;\n  for(;x<=n;x+=(x&-x)) ans+=c[x];\n  return ans;\n}\n\nvoid dfs1(int u,int fa,int depth)\n{\n\td[u]=depth;\n\tf[u]=fa;\n\tsize[u]=1;\n\tfor(int i=head[u];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==fa)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tdfs1(e[i].to,u,depth+1);\n\t\tsize[u]+=size[e[i].to];\n\t\tif(size[e[i].to]>size[son[u]])\n\t\t{\n\t\t\tson[u]=e[i].to;\n\t\t}\n\t}\n}\n\nvoid dfs2(int u,int t)\n{\n\ttop[u]=t;\n\tid[u]=++cnt;\n\tif(!son[u])\n\t{\n\t\treturn ;\n\t}\n\tdfs2(son[u],t);\n\tfor(int i=head[u];i;i=e[i].next)\n\t{\n\t\tif(e[i].to!=f[u]&&e[i].to!=son[u])\n\t\t{\n\t\t\tdfs2(e[i].to,e[i].to);\n\t\t}\n\t}\n}\n\n//\u4e0a\u9762\u4e24\u4e2adfs\u662f\u6811\u94fe\u5256\u5206\u7684\u6a21\u677f\u5185\u5bb9\uff0c\u76ee\u7684\u662f\u5212\u5206\u91cd\u94fe\n\nvoid up(int x,int y,int a)\n{\n\tadd(id[y]-1,a);\n\tadd(id[y],-a);//\u6211\u89c9\u5f97\u8fd9\u91cc\u5927\u5bb6\u53ef\u80fd\u6709\u70b9\u8ff7\uff0c\u5b9e\u9645\u4e0a\u662f\u4e3a\u4e86\u4e0d\u5305\u62ecy\u70b9\uff0c\u5148\u5c06y\u70b9\u591a\u52a0\u7684\u51cf\u53bb\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(d[top[x]]<d[top[y]])\n\t\t{\n\t\t\tswap(x,y);\n\t\t}\n\t\tadd(id[x],a);\n\t\tadd(id[top[x]]-1,-a);\n\t\tx=f[top[x]];\n\t}\n\tif(id[x]>id[y])\n\t{\n\t\tswap(x,y);\n\t}\n\tadd(id[y],a);\n\tadd(id[x]-1,-a);\n}\n\nint find(int x)\n{\n\treturn ask(id[x]);//\u6811\u72b6\u6570\u7ec4\u7684\u5355\u70b9\u67e5\u8be2\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&path[i]);\n\t}\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\taddedge(x,y);\n\t\taddedge(y,x);\n\t}\n\tdfs1(1,0,1);\n\tdfs2(1,1);\n\tcnt=1;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tup(path[i],path[i+1],1);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tprintf(\"%d\\n\",find(i));\n\t}\n}\n```",
        "postTime": 1566637254,
        "uid": 62573,
        "name": "zzqDeco",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "**\u89e3\u9898\u601d\u8def\uff1a**\u8fd9\u9898\u6211\u7684\u505a\u6cd5\u662flca+\u6811\u4e0a\u5dee\u5206\uff0c\u5e94\u8be5\u5df2\u7ecf\u6709\u5f88\u591a\u4eba\u53d1\u8fc7\u7c7b\u4f3c\u7684\u9898\u89e3\u4e86\n\n\u4f46\u611f\u89c9\u6211\u5199\u7684\u66f4\u5bb9\u6613\u7406\u89e3\uff1f~~\u4e5f\u8bb8\u662f\u6211\u592a\u83dc\u4e86pa~~ =\u3002=\n\n~~\u5927\u4f6c\u7ed5\u884c~~\n\n# \u5148\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u6811\u4e0a\u5dee\u5206\n\n\n\n------------\n\n\u50cf\u5dee\u5206\u4e00\u6837\uff0c\u6811\u4e0a\u5dee\u5206\u4e5f\u6709\u524d\u7f00\u548c\u601d\u60f3 \n**\u4e00\u4e2a\u70b9\u7684\u771f\u5b9e\u6743\u503c\u662f\u4e00\u4e2a\u70b9\u5b50\u6811\u5185\u6240\u6709\u5dee\u5206\u540e\u7684\u6743\u503c\u4e4b\u548c**\uff08\u989d\uff0c\u6709\u70b9\u62d7\u53e3\u6ca1\u5173\u7cfb\uff09 \n\u603b\u7684\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u70b9\u7684\u5dee\u5206\u6570\u7ec4\u6700\u540e\u7684\u503c\u662f\u6574\u4e2a\u5b50\u6811\u5185\u5dee\u5206\u6570\u7ec4\u7684\u548c\uff0c\u518d\u52a0\u8fdb\u70b9\u7684\u6743\u503c\u91cc\n\n\u6240\u4ee5\u600e\u4e48\u5dee\u5206\u5462 \n\u5148\u629b\u51fa\u4e00\u4e2a\u95ee\u9898\uff1a\u7ed9\u4f60m\u4e2a\u64cd\u4f5c\uff0c\u95ee\u4f60\u6bcf\u6b21\u5728(p,q)\u8def\u5f84\u4e0a\u7ed9\u6240\u6709\u70b9\u7684\u6743\u503c+1\uff0c\u95ee\u4f60\u6700\u540e\u70b9\u7684\u6743\u503c\u60c5\u51b5\uff08\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u8bf7\u4f60\u5c3d\u91cf\u8dd1\u5f97\u5feb\uff09 \n\u6211\u4eec\u8003\u8651\u5dee\u5206\uff0c\u65f6\u523b\u8bb0\u4f4f\u4e0a\u9762\u7684\u90a3\u53e5\u52a0\u7c97\u7684\u8bdd\n\n\n```\n\u9996\u5148\u5728p\u4e0a\u9762\u5bf9\u5dee\u5206\u6570\u7ec4+1\uff0c\u518d\u5728q\u4e0a\u9762\u5bf9\u5dee\u5206\u6570\u7ec4+1\uff0c\u5728Lca(p,q)\u5904\u5bf9\u5dee\u5206\u6570\u7ec4-1\n```\n\n\n\u6211\u4eec\u6839\u636e\u4e0a\u9762\u6240\u8bf4\u7684\u65b9\u6cd5\u7edf\u8ba1\u4e00\u904d\u5b50\u6811\u5dee\u5206\u6570\u7ec4\u548c\uff0c\u5c31\u4f1a\u53d1\u73b0\u6b63\u5982\u6240\u60f3 \n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u63a8\u5e7f\u5230\u6240\u6709\u7684\u60c5\u51b5\u4e86\u662f\u5427 \n\u663e\u7136\u8fd9\u6837\u5dee\u5206\u7684\u4fee\u6539\u590d\u6742\u5ea6\u662f(O(logn))\u7684(\u6c42Lca)\uff0c\u53ea\u8981\u6700\u540e\u518d\u4e00\u8fb9\u626b\u5c31\u662f\u5427 \n\u4f60\u751a\u81f3\u53ef\u4ee5Tarjan\u7528\u6c42\u6765\u4f18\u5316\u6389\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u5019\u67e5\u7684\u90a3\u4e2alogn\n\n\n------------\n# \u603b\u7ed3\u4e00\u4e0b\n\n\u6811\u4e0a\u5dee\u5206\u4e3b\u8981\u7528\u4e8e\u6c42\u89e3\u4e00\u4e9b\u6811\u4e0a\u7684\u8def\u5f84\u95ee\u9898\n\n\u5b83\u901a\u8fc7\u5229\u7528\u6811\u7684\u4e00\u4e9b\u6027\u8d28\uff0c\u7528\u4e00\u4e2a\u5dee\u5206\u6570\u7ec4\u6765\u5b9e\u73b0\u5bf9\u4e00\u6761\u8def\u5f84\u7684\u64cd\u4f5c\uff0c\u8fd9\u6d89\u53ca\u5230\u8def\u5f84\u7684 \u8d77\uff0c\u7ec8\u70b9 \u4e0elca\u3002\n\n\u4e00\u822c\u60c5\u51b5\u4e0b\uff1a\u4e00\u4e2a\u70b9\u7684\u771f\u5b9e\u6743\u503c\u4e3a\u5176\u6240\u5728\u5b50\u6811\u5185\u6240\u6709\u70b9\u7684\u5dee\u5206\u6570\u7ec4\u7684\u503c\u7684\u548c\n\n\u6811\u4e0a\u5dee\u5206\u4e00\u822c\u4e0d\u9002\u7528\u4e8e\u8be2\u95ee\u548c\u64cd\u4f5c\u5d4c\u5957\u7684\u9898\u76ee\uff0c\u8fd9\u65f6\u4e00\u822c\u7528\u6811\u94fe\u5256\u5206\u89e3\u51b3\n\n\n\n------------\n# \u9898\u76ee\u63a8\u8350\nluoguP3128 [USACO15DEC]\u6700\u5927\u6d41Max Flow     \u677f\u5b50\u9898\n\nluoguP3258 [JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6                      \u677f\u5b50\u9898\n\nluoguP2680 \u8fd0\u8f93\u8ba1\u5212                                   \u9898\u89e3 \u6709\u96be\u5ea6\n\n\u53ef\u4ee5\u6311\u6218\u4e00\u4e0b\u5929\u5929\u7231\u8dd1\u6b65\u3002\u3002\u3002 \n\n\n\n------------\n\u56de\u5230\u8fd9\u9053\u9898\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u9053\u6811\u4e0a\u5dee\u5206\u6a21\u677f\u9898\uff0c\u8981\u6ce8\u610f\u7684\u9664\u53bb\u8d77\u70b9\u5916\u7684\u70b9\u7684\u5dee\u5206\u6570\u7ec4\u7684\u503c\u8981\u51cf\u53bb1\uff08\u53bb\u91cd\uff09\uff0c\u540c\u65f6\u6709\u4e00\u4e2a\u7ec6\u8282\u8981\u6ce8\u610f\uff0c\u94fe\u5f0f\u524d\u5411\u661f\u6a21\u62df\u94fe\u8868\uff0c\u6570\u7ec4\u8981\u5f00\u4e24\u500d\uff08\u5b58\u7684\u662f\u53cc\u5411\u8fb9\uff0c\u6211\u56e0\u4e3a\u8fd9\u4e2a\u5361\u4e86\u5f88\u4e45\uff0c~~\u6211\u771f\u83dc~~\uff09\n\n```\n#include<bits/stdc++.h>\n#define maxn 600010\nusing namespace std;\nint nxt[maxn],go[maxn],first[maxn],tot=0,f[300010][31],cf[300010],dep[300010],sum=0,hh[300010];\ninline void Deal_work(int u,int father){\n\tdep[u]=dep[father]+1;\n\tfor(int i=0;i<=19;i++)f[u][i+1]=f[f[u][i]][i];\n\tfor(int i=first[u];i;i=nxt[i]){\n\t\tint v=go[i];\n\t\tif(v==father)continue;\n\t\tf[v][0]=u;\n\t\tDeal_work(v,u);\n\t}\n}\ninline int LCA(int x,int y){\n\tif(dep[x]<dep[y])swap(x,y);\n\tfor(int i=20;i>=0;i--){\n\t\tif(dep[f[x][i]]>=dep[y])x=f[x][i];\n\t\tif(x==y)return x;\n\t}\n\tfor(int i=20;i>=0;i--){\n\t\tif(f[x][i]!=f[y][i]){\n\t\t\tx=f[x][i];\n\t\t\ty=f[y][i];\n\t\t}\n\t}\n\treturn f[x][0];\n}\nvoid add(int x,int y){\n\tnxt[++tot]=first[x];first[x]=tot;go[tot]=y;\n}\n\ninline void Get(int u,int father){\n\tfor(int i=first[u];i;i=nxt[i]){\n\t\tint v=go[i];\n\t\tif(v==father)continue;\n\t\tGet(v,u);\n\t\tcf[u]+=cf[v];\n\t}\n}\nint main() {\n\tint a[300001];\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=1; i<=n; i++) {\n\t\tscanf(\"%d\",&a[i]);\n\t}\n\tfor(int i=1;i<=n-1;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\thh[x]++,hh[y]++;\n\t\tadd(x,y);add(y,x);\n\t}\n\tDeal_work(1,0);\n\tfor(int i=1;i<n;i++){\n\t\tint lca=LCA(a[i],a[i+1]);\n\t\t++cf[a[i]];++cf[a[i+1]];--cf[lca];--cf[f[lca][0]];\n\t}\n\tGet(1,0);\n\tfor(int i=2;i<=n;i++){\n\t\tcf[a[i]]--;\n\t}\n\tfor(int i=1;i<=n;i++)printf(\"%d\\n\",cf[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1565100679,
        "uid": 111289,
        "name": "Ryan_",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "[\u4e00\u53ea\u677e\u9f20\u548c\u4e00\u53ea\u718a\u7684\u53cb\u2642\u8c0a](https://www.luogu.org/problemnew/show/P3258)\n\n[\u849f\u84bb\u7684blog](https://www.luogu.org/blog/zgj-bloom/)\n\n\u636e\u8bf4\u6709$dalao$\u7528\u6811\u94fe\u5256\u5206\u88f8\u8fc7~~\u849f\u84bb\u745f\u745f\u53d1\u6296~~\n\n## \u9898\u76ee\u5927\u610f\n\n\u5c0f\u718a\u7ef4\u6309\u987a\u5e8f\u4ece$a1$\u8d70\u5230$an$\uff0c\u6bcf\u5230\u4e00\u4e2a\u623f\u95f4\u5c31\u5728\u8fd9\u4e2a\u623f\u95f4\u62ff\u4e00\u4e2a\u7cd6\uff0c\u6c42\u6bcf\u4e2a\u623f\u95f4\u6700\u5c11\u653e\u51e0\u4e2a\u7cd6\u679c$?$\n\n## \u9898\u76ee\u5206\u6790\n\n\u5176\u5b9e\u60f3\u4e00\u4e0b\u5c31\u80fd\u660e\u767d\uff0c\u5c31\u662f$n-1$\u6761\u8def\u5f84\uff0c\u6c42\u6bcf\u4e2a\u70b9\u88ab\u8986\u76d6\u4e86\u51e0\u6b21\u3002\n\n\u4f46\u662f\u8fd9\u6837\u505a\u6b63\u786e\u6027\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u7b2c$i-1$\u6761\u8def\u5f84\u548c\u7b2c$i$\u6761\u8def\u5f84\uff0c\u5b83\u4eec\u662f\u9996\u5c3e\u76f8\u8fde\u7684\uff0c\u4f46\u662f\u5b83\u4eec\u76f8\u8fde\u7684\u90a3\u4e2a\u70b9\u88ab\u7b97\u4e86\u4e24\u6b21\uff0c\u6240\u4ee5\u7b54\u6848\u8981\u5168$-1$\u3002\n\n#### \u7136\u540e\u4f60\u5c31**WA**\u4e86(~~\u8fc5\u901f\u9003\u8dd1~~)\n\n\u56e0\u4e3a\u5bf9\u4e8ea1\u6765\u8bf4\uff0c\u5b83\u660e\u660e\u53ea\u88ab\u52a0\u4e86\u4e00\u6b21\uff0c\u4f46\u662f\u5374\u88ab\u6211\u4eec~~\u65e0\u5dee\u522b\u653b\u51fb~~\u8fdb\u884c\u4e86\u7279\u5224\uff0c\u6240\u4ee5\u5e94\u8be5\u662f$a2$\u2014\u2014\u2014\u2014$an$\u51cf\u4e00\u3002\n\n\u4f46\u662f\u600e\u4e48\u64cd\u4f5c\u5462\uff1f\n\n\u8fd9\u5c31\u7528\u5230\u4e86\u7b97\u6cd5\u2014\u2014\u2014\u2014\u6811\u4e0a\u5dee\u5206\n\n\u5728\u4e86\u89e3\u6811\u4e0a\u5dee\u5206\u4e4b\u524d\uff0c\u9996\u5148\u8981\u4e86\u89e3\u4e00\u4e2a\u7b80\u5355\u70b9\u7684\u4e1c\u897f\n\n## \u5dee\u5206\u6570\u7ec4\n\n\u5bf9\u4e8e\u6570\u7ec4$a$\uff0c\u6211\u4eec\u5efa\u7acb\u5dee\u5206\u6570\u7ec4$f$,$f[i]=a[i]-a[i-1]$\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u6027\u8d28$:$\n\n$f[i]$\u524d\u7f00\u548c\u5c31\u7b49\u4e8e$a[i]$\uff0c\u5373$a[i]=sigma(x\u2208[1,i]) f[i]$\n\n\u4e0d\u4f7f\u7528\u5dee\u5206\u6570\u7ec4\u65f6\uff0c\u4e00\u65e6\u5bf9$a[i]$\u8fdb\u884c\u66f4\u6539\uff0c\u90a3\u4e48a[i]\u7684\u524d\u7f00\u548c\u6570\u7ec4\u5c31\u8981\u66f4\u6539$i$\u4e2a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n)$\n\n\u90a3\u4e48\u5c31\u8981\u7528\u5230\u5dee\u5206\u6570\u7ec4\u7684\u53e6\u5916\u4e00\u4e2a\u6027\u8d28$:$\n\n$sigma(x\u2208[1,i]) a[i]$ (\u5c31\u662f$a[i]$\u7684\u524d\u7f00\u548c)$= sigma(x\u2208[1,i]) (i-x+1)*f[i]$\n\n\u6240\u4ee5\u5728\u66f4\u6539$[l,r]$\u533a\u95f4\u65f6\uff0c\u53ea\u9700\u8981\u66f4\u6539$f[l-1]$\u548c$f[r]$\u5c31\u884c\u4e86\uff0c\u90a3\u4e48\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\u5c31\u80fd\u89e3\u51b3\u95ee\u9898\u4e86\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5230\u8fd9\u9053\u9898\u9700\u8981\u7684\u7b97\u6cd5\u4e86\n\n## \u6811\u4e0a\u5dee\u5206\n\n\u5c31\u662f\u5728\u6811\u4e0a\u8fdb\u884c\u5dee\u5206\uff0c\u81f3\u4e8e$a[i]$\u2026\u2026\u5c31\u662f$i$\u8282\u70b9\u7684\u5b50\u6811\u548c\u5566!\n\n## \u56de\u5230\u8fd9\u9053\u9898\n\n\u5bf9\u4e8e\u6bcf\u6761\u94fe$x,y$\uff0c\u6211\u4eec\u6c42\u51fa$x$\u548c$y$\u7684$lca$\uff0c\u5c06$x$\u5230$lca$\u548c$y$\u5230$lca$\u5206\u522b\u6253\u4e0a\u5dee\u5206\u3002\n\n\u4f46\u662f\u8fd9\u6837\u6709\u4e00\u4e9b\u95ee\u9898\u2026\u2026\n\n$lca$\u88ab\u8ba1\u7b97\u4e86\u4e24\u6b21!\u90a3\u4e48\u53ea\u8981$lca$\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u6211\u4eec\u5c31\u53ea\u5c06$lca$\u6253\u4e00\u6b21\u5dee\u5206\uff0c\u53e6\u4e00\u6b21\u5dee\u5206\u6253\u5728$lca$\u7684\u7236\u4eb2\u4e0a\u5c31\u884c\u4e86\u3002\n\n~~\u5949\u4e0a\u849f\u84bb\u7684\u4ee3\u7801~~\n\n## \u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define N 300010\n#define LOG 20\n#define ll long long\nusing namespace std;\nstruct E\n{\n\tll v,next;\n}edge[N*2];\nll n,tot;\nll indexx[N],dep[N],ans[N],s[N],point[N];\nll father[N][LOG];\nvoid addedge(ll x,ll y)    //\u524d\u5411\u661f\u5efa\u56fe \n{\n\tedge[++tot].v=y;\n\tedge[tot].next=indexx[x];\n\tindexx[x]=tot;\n\treturn;\n}\nvoid dfs(ll x,ll fa)     //\u500d\u589e\u641c\u7d22 \n{\n    for(ll i=indexx[x];i>=1;i=edge[i].next)\n    {\n        ll v=edge[i].v;\n        if(v==fa) continue;\n    \tfather[v][0]=x;\n        dep[v]=dep[x]+1;\n        dfs(v,x);\n    }\n    return;\n}\nll getlca(ll x,ll y)    //\u500d\u589e\u51fd\u6570 \n{\n    ll cnt=1;\n    if(dep[x]<dep[y]) swap(x,y);\n    for(ll i=LOG-1;i>=0;i--)\n        if(dep[father[x][i]]>=dep[y])\n            x=father[x][i];\n    if(x==y) return x;\n    for(ll i=LOG-1;i>=0;i--)\n    {\n        if(father[x][i]!=father[y][i]) \n        {\n            x=father[x][i];\n            y=father[y][i];\n        }\n        else cnt=father[x][i];\n    }\n    return cnt;\n}\nvoid getans(ll x,ll fa)      \n{\n\tfor(ll i=indexx[x];i>=1;i=edge[i].next)\n\t{\n\t\tll v=edge[i].v;\n\t\tif(v==fa) continue;\n\t\tgetans(v,x);\n\t\tans[x]+=ans[v];\n\t}\n\tans[x]+=s[x];\n}\nint main()\n{\n\tfreopen(\"squirrel.in\",\"r\",stdin);\n\tfreopen(\"squirrel.out\",\"w\",stdout);\n\tscanf(\"%lld\",&n);\n\tfor(ll i=1;i<=n;i++) scanf(\"%lld\",&point[i]);\n\tfor(ll i=1;i<=n-1;i++)\n\t{\n\t\tll x,y;\n\t\tscanf(\"%lld%lld\",&x,&y);\n\t\taddedge(x,y);\n\t\taddedge(y,x);\n\t}\n\tdep[1]=1;\n    dfs(1,0);      //\u500d\u589eDFS \n    for(ll j=1;j<=LOG-1;j++)\n        for(ll i=1;i<=n;i++)\n            father[i][j]=father[father[i][j-1]][j-1];  //\u500d\u589efather \n\tfor(ll i=1;i<=n-1;i++)\n\t{\n\t\tll lca=getlca(point[i],point[i+1]);    //\u6c42\u51falca \n\t\ts[point[i]]++;\n\t\ts[point[i+1]]++;\n\t\ts[lca]--;\n\t\tif(lca!=1) s[father[lca][0]]--;\t\t\t//\u6253\u4e0a\u5dee\u5206 \n\t}\n\tgetans(1,0);                //\u8ba1\u7b97\u5b50\u6811\u548c \n\tfor(ll i=1;i<=n;i++) ans[i]--;\n\tans[point[1]]++;\t\t\t//\u9664\u4e86a[1]\u90fd-1 \n\tfor(ll i=1;i<=n;i++) printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1555148452,
        "uid": 80672,
        "name": "Unaccepted",
        "ccfLevel": 0,
        "title": "[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6"
    },
    {
        "content": "### \u6811\u4e0a\u5dee\u5206\n\n\u5176\u5b9e\u4e0d\u5fc5\u628a\u70b9\u4e0a\u5dee\u5206\u8f6c\u6210\u8fb9\u4e0a\u5dee\u5206\uff0c\u53ea\u8981\u6bcf\u6b21\u64cd\u4f5c\u65f6\u5728 $a_{i}$ \u548c $fa[a_{i+1}]$ \u5904\u52a0 $1$ \u5728 $lca$ $fa[lca]$ \u5904\u51cf $1$ \u7136\u540e\u4ece\u4f4e\u5230\u4e0a\u7d2f\u52a0\u7edf\u8ba1\u7b54\u6848\u5c31\u597d\u4e86\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\ntypedef struct edge{\n    int next,to;\n}edge;\n\nedge e[600010];\nint n,head[300010],et,dt,fa[300010],dfn[300010],top[300010],son[300010],dep[300010],siz[300010],a[300010],ans[300010];\n\ninline int read(){\n    int num=0,k=1; char c=getchar();\n    while(c>'9' || c<'0') k=(c=='-')?0:k,c=getchar();\n    while(c>='0' && c<='9') num=num*10+c-'0',c=getchar();\n    return k?num:-num;\n}\n\nvoid addedge(int u,int v){\n    e[++et].to=v; e[et].next=head[u]; head[u]=et;\n    e[++et].to=u; e[et].next=head[v]; head[v]=et;\n}\n\nvoid dfs1(int x){\n    siz[x]=1;\n    for(int i=head[x],to;i;i=e[i].next){\n        to=e[i].to;\n        if(to==fa[x]) continue;\n        dep[to]=dep[x]+1; fa[to]=x;\n        dfs1(to);\n        siz[x]+=siz[to];\n        if(siz[to]>siz[son[x]]) son[x]=to;\n    }    \n}\n\nvoid dfs2(int x,int t){\n    dfn[x]=++dt; top[x]=t;\n    if(son[x]) dfs2(son[x],t);\n    for(int i=head[x],to;i;i=e[i].next){\n        to=e[i].to;\n        if(to==fa[x] || to==son[x]) continue;\n        dfs2(to,to);\n    }\n}\n\nvoid dfs3(int x){\n    for(int i=head[x],to;i;i=e[i].next){\n        to=e[i].to;\n        if(to==fa[x]) continue;\n        dfs3(to); ans[x]+=ans[to];\n    }\n}\n\nint lca(int x,int y){\n    while(top[x]!=top[y]){\n        if(dep[top[x]]>dep[top[y]]) x=fa[top[x]];\n        else y=fa[top[y]];\n    }\n    return ((dep[x]<dep[y])?x:y);\n}\n\nint main(){\n    n=read();\n    for(int i=1;i<=n;i++) a[i]=read();\n    for(int i=1;i<n;i++){\n        int u=read(),v=read();\n        addedge(u,v);\n    }\n    dfs1(1); dfs2(1,1);\n    for(int i=1;i<n;i++){\n        int l=lca(a[i],a[i+1]);\n        ans[a[i]]++; ans[fa[a[i+1]]]++;\n        ans[l]--; ans[fa[l]]--;\n    }\n    dfs3(1);\n    for(int i=1;i<=n;i++) printf(\"%d\\n\",ans[i]);\n}\n\n```",
        "postTime": 1550415254,
        "uid": 100037,
        "name": "kkxhh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "$LCT$\u88f8\u9898\n\n\u6211\u4eec\u6bcf\u6b21\u8d70\u5230\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u76f8\u5f53\u4e8e\u5728\u4e0a\u4e00\u4e2a\u7ed3\u70b9\u5230\u8fd9\u4e2a\u7ed3\u70b9\u95f4\u62c9\u51fa\u4e00\u6761\u94fe\uff0c\u7136\u540e\u6253\u52a0\u6cd5\u6807\u8bb0\n\n\u5176\u4ed6\u7684\u5c31\u57fa\u672c\u90fd\u662f$LCT$\u677f\u5b50\u4e86\n\n\u8981\u6ce8\u610f\u7684\u51e0\u4e2a\u7ec6\u8282\uff1a\n\n\u6211\u4eec\u6bcf\u6b21\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u4e00\u5f00\u59cb\u8981\u8bbe\u7f6e\u4e3a$0$\n\n\u6bcf\u6b21\u4e3a\u4e86\u907f\u514d\u9ebb\u70e6\uff0c\u6211\u4eec\u5148\u5c06\u5f53\u524d\u70b9\u7684\u503c$-1$\uff0c\u518d\u76f4\u63a5\u7ed9\u6574\u6761\u94fe\u6253\u6807\u8bb0\n\n\u6700\u540e\u4e00\u4e2a\u70b9\u4e00\u5b9a\u4e0d\u8981\u5fd8\u4e86\u51cf$1$\n\n\u7136\u540e\u6211\u672c\u6765\u60f3\u7684\u662f\u76f4\u63a5\u4ece$1$\u5230$n$\u8f93\u51fa\u503c\uff0c\u540e\u9762\u53d1\u73b0\u4e0d\u884c\uff0c\u8fd9\u6837\u5b50\u7684\u8bdd\u5f88\u591a\u6807\u8bb0\u6ca1\u6709\u4e0b\u653e\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5bf9\u6bcf\u4e2a\u70b9$makeroot$\u4e4b\u540e\u518d\u8f93\u51fa\u4ed6\u7684\u503c\u5c31\u53ef\u4ee5\u4e86\n\n~~\u4e0d\u5438\u6c27\u53ea\u670970~~\n\n\u63d0\u4f9b\u6211\u7684\u5927\u5e38\u6570$LCT$\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 300010\nint ch[maxn][2],f[maxn],rev[maxn],key[maxn],tag[maxn];\nint ord[maxn];\nint get(int x)\n{\n\treturn ch[f[x]][1]==x;\n}\nint isroot(int x)\n{\n\treturn ch[f[x]][1]!=x&&ch[f[x]][0]!=x;\n}\nvoid pushdown(int x)\n{\n\tif(rev[x])\n\t{\n\t\tswap(ch[x][0],ch[x][1]);\n\t\trev[ch[x][1]]^=1;\n\t\trev[ch[x][0]]^=1;\n\t\trev[x]=0;\n\t}\n\tif(tag[x])\n\t{\n\t\tkey[x]+=tag[x];\n\t\ttag[ch[x][0]]+=tag[x];\n\t\ttag[ch[x][1]]+=tag[x];\n\t\ttag[x]=0;\n\t}\n}\nvoid rotate(int x)\n{\n\tint old=f[x],oldf=f[old],which=get(x);\n\tif(!isroot(old))\n\t{\n\t\tch[oldf][get(old)]=x;\n\t}\n\tch[old][which]=ch[x][which^1];\n\tf[ch[old][which]]=old;\n\tch[x][which^1]=old;\n\tf[old]=x;\n\tf[x]=oldf;\n}\nvoid splay(int x)\n{\n\tstack<int> st;\n\tst.push(x);\n\tfor(int fa=x;!isroot(fa);fa=f[fa])\n\t{\n\t\tst.push(f[fa]);\n\t} \n\twhile(!st.empty())\n\t{\n\t\tpushdown(st.top());\n\t\tst.pop();\n\t}\n\tfor(int fa=f[x];!isroot(x);rotate(x),fa=f[x])\n\t{\n\t\tif(!isroot(fa))\n\t\t{\n\t\t\trotate(get(fa)==get(x)?fa:x);\n\t\t}\n\t}\n}\nvoid access(int x)\n{\n\tfor(int y=0;x;x=f[y=x])\n\t{\n\t\tsplay(x);\n\t\tch[x][1]=y;\n\t}\n}\nvoid makeroot(int x)\n{\n\taccess(x);\n\tsplay(x);\n\trev[x]^=1;\n}\nvoid link(int x,int y)\n{\n\tmakeroot(x);\n\tf[x]=y;\n}\nint main()\n{\n\tint n;\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&ord[i]);\n\t}\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tlink(x,y);\n\t}\n\tint now=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(!now)\n\t\t{\n\t\t\tkey[ord[i]]=1;\n\t\t\tnow=ord[i];\n\t\t\tcontinue;\n\t\t}\n\t\tkey[now]--;\n\t\tmakeroot(now);\n\t\taccess(ord[i]);\n\t\tsplay(ord[i]);\n\t\ttag[ord[i]]++;\n\t\tnow=ord[i];\n\t}\n\tkey[ord[n]]--;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tmakeroot(i);\n\t\tprintf(\"%d\\n\",key[i]);\n\t}\n}\n```",
        "postTime": 1541158342,
        "uid": 48265,
        "name": "decoqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u4e2a\u5f88\u5947\u602a\u7684\u89e3\u6cd5\u3002\u3002\n\n---\n\n**\u9898\u610f**\n\n\u7ed9\u4f60\u4e00\u9897\u6811\uff0c\u5e76\u7ed9\u4f60\u4e00\u4e2a\u4efb\u52a1\uff0c\u957f\u5ea6\u4e3a$N$\uff0c\u8981\u6c42\u6309\u8fd9\u4e2a\u4efb\u52a1\u5728\u6811\u4e0a\u8d70\uff0c\u5e76\u5c06\u8d70\u8fc7\u7684\u8282\u70b9\u6743\u503c+1\uff0c\u6700\u540e\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\n\n---\n\n\u9996\u5148\u6211\u770b\u5230\u8fd9\u9898\u65f6\u60f3\u5230\u4e86\u6811\u5256+\u7ebf\u6bb5\u6811\u3002\u3002\u5728\u6811\u4e0a\u52a0\u6743\u503c\uff0c\u5e76\u8fdb\u884c\u8be2\u95ee\uff0c\u5f88\u81ea\u7136\u5c31\u8054\u60f3\u5230\u4e86\u3002\u3002\n\n\u7136\u540e\u5c31\u5f00\u59cb\u7801\uff0c\u7801\u5230\u4e00\u534a\u53d1\u73b0\u590d\u6742\u5ea6\u597d\u50cf\u4e0d\u5bf9\u52b2\uff0c\u7b97\u4e86\u4e00\u4e0b$300000*\\log_2^2{300000}$\u5927\u6982\u662f$100000000$\u3002\u3002\u7136\u540e\u5c31\u5341\u5206\u5d29\u6e83\n\n\u7136\u540e\u5c31\u62b1\u7740\u8bd5\u4e00\u8bd5\u7684\u5fc3\u6001\u7ee7\u7eed\u5199\u4e0b\u53bb\n\n\u7136\u540e\u7ebf\u6bb5\u6811\u5199\u5b8c\u7a81\u7136\u53d1\u73b0\u4e00\u4e2a\u4e8b\u5b9e\n\n> \u9898\u76ee\u5b9e\u9645\u4e0a\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5728\u5e8f\u5217\u4e0a\u533a\u95f4\u52a0\uff0c\u5355\u70b9\u67e5\u8be2\n\n> \u800c\u4e14..\u4f3c\u4e4e\u662f\u4fee\u6539\u5728\u524d\uff0c\u67e5\u8be2\u5728\u540e\uff1f\n\n\u4e8e\u662f\u5c31\u60f3\u5230\u4e86\u666e\u901a\u7684\u5e8f\u5217\u5dee\u5206\u65b9\u6cd5\uff0c\u7136\u540e\u5c31\u628a\u7801\u5b8c\u7684\u7ebf\u6bb5\u6811\u5220\u4e86\u3002\u3002\n\n\u5e76\u6ca1\u6709\u60f3\u5230\u53ef\u4ee5\u5728\u6811\u4e0a\u76f4\u63a5\u5dee\u5206\u3002\u3002\u800c\u4e14\u6211\u4e5f\u4e0d\u4f1aqaq\n\n---\n\n**\u601d\u8def**\n\n\u5c06\u6811\u5256\u5206\u5b8c\u540e\u6811\u53d8\u6210\u4e00\u4e2a\u5e8f\u5217\n\n\u5e76\u5bf9\u6bcf\u6b21\u5728\u6811\u4e0a\u8d70\u7684\u64cd\u4f5c\u53d8\u6210\u5728\u5e8f\u5217\u4e0a\u64cd\u4f5c\uff0c\u5e76\u7528\u5dee\u5206\u7ef4\u62a4\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\n\n---\n\n**Code**\n\n```cpp\n#include <cstdio>\n\n#define MAXN 300005\ntypedef long long ll;\ntypedef unsigned long long ull;\n#define min(a, b) ((a < b) ? (a) : (b))\n#define max(a, b) ((a > b) ? (a) : (b))\n\ninline ll read()\n{\n    char c = getchar();\n    ll ret = 0, t = 1;\n    while ((c < '0' || c > '9') && c != '-') c = getchar();\n    if (c == '-') t = -1, c = getchar();\n    while (c >= '0' && c <= '9') ret = (ret << 3) + (ret << 1) + c - '0', c = getchar();\n    return ret * t;\n}\nvoid swap(int& a, int& b)\n{\n    int t = a;\n    a = b, b = t;\n}\n\nstruct node\n{\n    int v, next;\n}E[MAXN << 1];\nint Elen, head[MAXN], dep[MAXN], N;\nint fa[MAXN], size[MAXN], wson[MAXN], top[MAXN], id[MAXN], wid[MAXN], cnt;\n//\u8fd9\u662f\u4e00\u53ea\u6811\u94fe\u5256\u5206\u9700\u8981\u7684\u6570\u7ec4\nint task[MAXN];\nll s[MAXN], ans[MAXN];\n\nvoid add(int u, int v)\n{\n    ++Elen, E[Elen].v = v, E[Elen].next = head[u], head[u] = Elen;\n}\nvoid dfs1(int u, int ff) //\u7b2c\u4e00\u6b21dfs\uff0c\u5904\u7406dep, father, size, wson\n{\n    dep[u] = dep[ff] + 1, fa[u] = ff, size[u] = 1;\n    int i;\n    for (i = head[u]; i; i = E[i].next)\n    {\n        if (E[i].v != ff)\n        {\n            dfs1(E[i].v, u);\n            size[u] += size[E[i].v];\n            if (size[E[i].v] > size[wson[u]]) wson[u] = E[i].v;\n        }\n    }\n}\nvoid dfs2(int u, int ff, int tp)\n//\u7b2c\u4e8c\u6b21dfs\u5904\u7406\u4e86\u91cd\u94fe\u9876top\uff0c\u5e76\u5efa\u7acb\u4e86\u6811\u8282\u70b9\u548c\u5e8f\u5217\u7684\u76f8\u4e92\u6620\u5c04\n//\uff08id\u662f\u6811->\u5e8f\u5217\uff0cwid\u662f\u5e8f\u5217->\u6811\uff09\n{\n    top[u] = tp, id[u] = ++cnt, wid[cnt] = u;\n    if (wson[u]) dfs2(wson[u], u, tp);\n    int i;\n    for (i = head[u]; i; i = E[i].next) if (E[i].v != ff && E[i].v != wson[u]) dfs2(E[i].v, u, E[i].v);\n}\n\nvoid modify(int L, int R, int k)\n{\n    s[L] += k, s[R + 1] -= k;\n} //\u5728\u5e8f\u5217\u4e0a\u5dee\u5206\nvoid qwq(int u, int v, int k) \n//\u6811\u94fe\u5256\u5206\u7684\u4f5c\u7528\uff0c\u5c06\u6811\u53d8\u6210\u5e8f\u5217\u5e76\u5728\u91cd\u94fe\u4e0a\u8dd1\uff0c\u590d\u6742\u5ea6logn\n{\n    while (top[u] != top[v])\n    {\n        if (dep[top[u]] < dep[top[v]]) swap(u, v);\n        modify(id[top[u]], id[u], k); //\u4e0d\u662f\u7528\u7ebf\u6bb5\u6811\u800c\u662f\u5dee\u5206\u7ef4\u62a4\n        u = fa[top[u]];\n    }\n    if (dep[u] > dep[v]) swap(u, v);\n    modify(id[u], id[v], k);\n}\nint main()\n{\n    N = read();\n    int i, j, u, v;\n    for (i = 1; i <= N; ++i) task[i] = read(); //task[i]\u8868\u793a\u5728\u6811\u4e0a\u8d70\u7684\u4efb\u52a1\n    for (i = 1; i < N; ++i)\n    {\n        u = read(), v = read();\n        add(u, v), add(v, u);\n    }\n    dfs1(1, 0);\n    dfs2(1, 0, 1);\n    modify(id[task[1]], id[task[1]], 1); //\u539f\u56e0\u4e0b\u9762\u8bf4\n    modify(id[task[N]], id[task[N]], -1); //\u9898\u610f\u4e2d\u8bf4\u4e86\u7ec8\u70b9\u4e0d\u7528\u52a0\u6743\u503c\n    for (i = 2; i <= N; ++i)\n    {\n        qwq(task[i - 1], task[i], 1); //\u4fee\u6539(task[i-1],task[i])\n        modify(id[task[i - 1]], id[task[i - 1]], -1);\n        //\u8003\u8651\u5230task[i-1]\u5728\u4e0a\u4e00\u6b21\u64cd\u4f5c\u4e2d\u7b97\u8fc7\u4e86\uff0c\u5c31\u5c06\u5176\u518d\u51cf\u53bb\u4e00\u4e2a1\n        \n        /*\u4e0a\u9762\u7684modify(id[task[1]], id[task[1]], 1);\u662f\u56e0\u4e3a\n        \u5728\u64cd\u4f5c\u8fc7\u7a0b\u4e2dtask[1]\u4f1a\u88ab\u51cf\u53bb\u4e00\u4e2a1\n        \u800c\u4ed6\u5e76\u6ca1\u6709\u88ab\u4e0a\u4e00\u6b21\u64cd\u4f5c\u7b97\u8fc7\uff0c\u9700\u8981\u52a0\u4e0a*/\n    }\n    for (i = 1; i <= N; ++i) s[i] += s[i - 1];\n    //\u5dee\u5206\u6570\u7ec4\u7684\u524d\u7f00\u548c\u5c31\u662f\u70b9\u7684\u6743\n    for (i = 1; i <= N; ++i) ans[wid[i]] = s[i]; //\u5c06\u5e8f\u5217\u5728\u8f6c\u5230\u6811\u4e0a\n    for (i = 1; i <= N; ++i) printf(\"%lld\\n\", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1540562856,
        "uid": 62308,
        "name": "Mr_Wu",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u4e0d\u77e5\u9053\u90a3\u4f4d $Pascal$ \u7684\u4ec1\u5144\u662f\u600e\u4e48\u60f3\u7684,\u4e0d\u7528\u4fee\u6539\u4e3a\u4ec0\u4e48\u8981\u6253\u6811\u5256? \u4e3a\u4ec0\u4e48\u8981\u6253\u7ebf\u6bb5\u6811?\n\n\u8fd8\u662f\u5148\u7b80\u5316\u4e00\u4e0b\u9898\u9762:\n\n- \u7ed9\u4f60\u4e00\u68f5\u6811\n- \u7ed9\u4f60 $N$ \u4e2a\u70b9,\u8981\u4f60\u5bf9\u6bcf\u4e00\u4e2a $node_i$ \u5230 $node_{i+1}$ \u7684\u6811\u4e0a\u8def\u5f84\u7684\u70b9\u6743\u5168\u90e8 $+1$\u3002\n- \u6700\u540e\u8f93\u51fa\u6bcf\u4e00\u4e2a\u70b9\u7684\u70b9\u6743\n\n\u5e26\u7740\u6253\u6811\u5256\u7684\u60c5\u7eea,\u53d1\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(N \\log^2 N)$\u3002\u663e\u7136\u4e0d\u7528\u4fee\u6539,\u5e76\u4e0d\u9700\u8981\u6811\u5256\u3002\u73b0\u5728\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5**\u76f4\u63a5\u4fee\u6539**,\u4e14\u53ef\u4ee5**\u6700\u540e\u67e5\u8be2**\u7684\u6570\u636e\u7ed3\u6784 (\u6216\u8005\u67d0\u79cd\u65b9\u6cd5)\u3002\u5f88\u5bb9\u6613\u60f3\u5230\u53ef\u4ee5\u5dee\u5206\u3002\n\n\u5148\u8bf4\u5dee\u5206\u6570\u7ec4,\u5982\u679c\u6211\u4eec\u7ed9\u51fa $M$ \u4e2a\u4fee\u6539,\u5728\u4e00\u4e2a\u533a\u95f4\u52a0\u4e0a\u4e00\u4e2a\u6570\u5b57\u3002\u6700\u540e\u95ee\u4f60\u8fd9\u4e2a\u5e8f\u5217\u662f\u591a\u5c11\u3002\u5148\u4e3e\u4e00\u4e2a\u4f8b\u5b50:\n\n```\n\u539f\u6570\u7ec4   : 3 4 9 2 3 (num)\n\u5dee\u5206\u6570\u7ec4 : 3 1 5 -7 1 (sum)\n```\n\n\u5f88\u663e\u7136\u5dee\u5206\u6570\u7ec4 $sum_i=num_i-num_{i-1}$\u3002\n\n\u800c\u6211\u4eec\u7ed9 $2,4$ \u533a\u95f4\u52a0\u4e0a\u4e00\u4e2a $3$,\u53ef\u4ee5\u8fd9\u6837\u5b50\u3002\n\n```\n\u5dee\u5206\u6570\u7ec4 : 3 4 5 -7 -2 (sum)\n```\n\n\u6211\u4eec\u53d1\u73b0 $sum_l+3\\ ,\\ sum_{r+1}-3$\u3002\n\n\u6c42\u4e00\u4e0b\u524d\u7f00\u548c\u3002\n\n```pascal\n\u524d\u7f00\u548c  : 3 7 12 5 3\n```\n\n\u53d1\u73b0\u4e86\u4ec0\u4e48?\n\n\u6811\u4e0a\u5dee\u5206\u66f4\u7b80\u5355\u3002\u5047\u5982\u6211\u4eec\u8981\u4f7f $l->r$ \u8fd9\u4e00\u6761\u8def\u5f84\u5168\u90e8 $+1$,\u6211\u4eec\u53ef\u4ee5\u5728\u5b83\u4eec\u7684 $sum_{lca}$ \u4e0a\u9762 $-1$,$sum_{lca_{father}}$ \u4e5f\u662f $-1$\u3002\u7136\u540e $sum_l+1,sum_r+1$\u3002\u6709\u4eba\u4f1a\u95ee,\u4e3a\u4ec0\u4e48\u8981\u5728 $sum_{lca_{father}}-1$ \u5462? \u56e0\u4e3a $lca$ \u4e5f\u662f\u8981 $+1$ \u7684,\u5982\u679c\u6c42\u524d\u7f00\u548c\u90a3\u4e48 $lca$ \u8fd9\u91cc\u5c31 $+2$ \u4e86\u3002\u7136\u800c $lca$ \u5df2\u7ecf $-1$,$lca_{father}$ \u662f\u4e0d\u7528 $+1$ \u7684\u3002\u6240\u4ee5\u76f4\u63a5 $sum_{lca_{father}}-1$ \u5c31\u5de7\u5999\u7684\u89e3\u51b3\u4e86\u95ee\u9898\u3002\n\n\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u4f60\u8f93\u51fa\u4e86\u4ee5\u4e0b\u4e1c\u897f\n\n```pascal\n1 3 2 3 2\n```\n\n\u800c\u7b54\u6848\u662f\n\n```pascal\n1 2 1 2 1\n```\n\n\u56e0\u4e3a\u6211\u4eec\u628a\u9664 $node_1$ (\u6ce8\u610f\u662f $node_1$ \u4e0d\u662f $1$) \u4ee5\u5916\u7684\u90fd\u6c42\u4e86\u4e24\u6b21 (\u8d77\u70b9\u7ec8\u70b9),\u6240\u4ee5\u6211\u4eec\u8981\u628a\u5b83\u4eec\u51cf\u4e00\u3002\n\n\u56e0\u4e3a\u8981\u6c42 $lca$,\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(N \\log N)$\u3002\u5176\u4e2d $lca$ \u7528\u6811\u5256\u6c42,\u66f4\u5feb\u3002 (\u7279\u522b\u5bf9\u4e8e\u4e00\u6761\u94fe\u7684\u60c5\u51b5)\n\n```pascal\n// \u603b\u5171 400ms,\u7b2c 11 \u9875 (\u5df2\u7ecf\u5f88\u4e0d\u9519\u5566)\n// luogu-judger-enable-o2\nvar\n    cnt,size,dep,top,father,son,node,sum:array[-1..510000] of longint;\n    next,reach:array[-1..1050000] of longint;\n    j,i,n,m,l,r,tot,root,lca:longint;\n\nprocedure add(l,r:longint);\nbegin\n    inc(tot);\n    reach[tot]:=r;\n    next[tot]:=cnt[l];\n    cnt[l]:=tot;\nend;\n\nprocedure Dfs_1(x:longint);\nvar i:longint;\nbegin\n    size[x]:=1; i:=cnt[x]; size[0]:=-maxlongint div 843;\n    while i<>-1 do\n    begin\n        if dep[reach[i]]=0 then\n        begin\n            dep[reach[i]]:=dep[x]+1;\n            father[reach[i]]:=x;\n            Dfs_1(reach[i]); inc(size[x],size[reach[i]]);\n            if size[reach[i]]>size[son[x]] then son[x]:=reach[i];\n        end;\n        i:=next[i];\n    end;\nend;\n\nprocedure Dfs_2(x,centre:longint);\nvar i:longint;\nbegin\n    top[x]:=centre;\n    if son[x]=0 then exit; Dfs_2(son[x],centre);\n    i:=cnt[x];\n    while i<>-1 do\n    begin\n        if (reach[i]<>father[x])and(reach[i]<>son[x]) then Dfs_2(reach[i],reach[i]);\n        i:=next[i];\n    end;\nend;\n\nprocedure Dfs_3(x:longint);\nvar i:longint;\nbegin\n    i:=cnt[x];\n    while i<>-1 do\n    begin\n        if (reach[i]<>father[x]) then\n        begin\n            Dfs_3(reach[i]);\n            inc(sum[x],sum[reach[i]]);\n        end;\n        i:=next[i];\n    end;\nend;\n\nfunction Refer(x,y:longint):int64;\nbegin\n    while top[x]<>top[y] do\n    begin\n        if dep[top[x]]<dep[top[y]] then y:=father[top[y]] else x:=father[top[x]];\n    end;\n    if dep[x]<dep[y] then exit(x) else exit(y);\nend;\n\nbegin\n    filldword(cnt,sizeof(cnt) div 4,maxlongint*2+1);\n    read(n); root:=1;\n    for i:=1 to n do read(node[i]);\n    for i:=1 to n-1 do begin read(l,r); add(l,r); add(r,l); end;\n    dep[root]:=1; father[root]:=0;  Dfs_1(root); Dfs_2(root,root);\n\n    for i:=1 to n-1 do\n    begin\n        lca:=Refer(node[i+1],node[i]);\n        inc(sum[node[i]]);\n        inc(sum[node[i+1]]);\n        dec(sum[father[lca]]);\n        dec(sum[lca]);\n    end;\n    Dfs_3(root);\n    for i:=2 to n do dec(sum[node[i]]);\n    for i:=1 to n do writeln(sum[i]);\nend.\n```\n\n\n",
        "postTime": 1540443602,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\t~~\u7b2c\u4e00\u6b21\u4e00\u904dac\u7701\u9009\u9898\u554a\uff0c\u597d\u6fc0\u52a8~~\n    \u8fd9\u9898\u7684\u601d\u8def\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5f88\u5bb9\u6613\u770b\u51fa\u6765\u5c5e\u4e8e\u6811\u4e0a\u5dee\u5206\n    \u8fd9\u91cc\u6211\u7528\u7684\u662f \u6811\u94fe\u5256\u5206+\u6811\u4e0a\u5dee\u5206\n    \u6811\u4e0a\u5dee\u5206\u5728\u5904\u7406\u4e00\u6761\u8def\u5f84x->y\u65f6\uff1a\n    \tcon[x]\u548ccon[y]\u52a01\n       \tcon[lca(x,y)]\u548ccon[fa[lca(x,y)]]\u51cf1\n        \u6700\u540e\u4e00\u904ddfs\u5c31\u53ef\u4ee5\u4ece\u53f6\u8282\u70b9\u7edf\u8ba1\u5168\u6811\u6bcf\u4e2a\u8282\u70b9\u7684\u7ecf\u8fc7\u6b21\u6570\n        \uff08\u7ecf\u8fc7\u6b21\u6570ans[n]=con[n]+n\u7684\u5b50\u5b59\u7684\u5168\u90e8con\u76f8\u52a0\uff09\n    \u4f46\u8fd9\u9898\u7684\u8def\u5f84\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u9664\u8d77\u70b9\u548c\u7ec8\u70b9\u5916\uff0c\u5176\u4ed6\u70b9\u4f1a\u88ab\u540c\u65f6\u7b97\u4f5c\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u6240\u4ee5\u6700\u540e\u53ea\u8981\u628a\u8fd9\u4e9b\u70b9\u7684\u6b21\u6570\u51cf1\u5c31\u53ef\u4ee5\u4e86\u3002",
        "postTime": 1534160293,
        "uid": 37160,
        "name": "liuhanzhong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "##\u9898\u76ee\u5206\u6790\uff1a\n\n\u770b\u5927\u5bb6\u6e05\u4e00\u8272\u90fd\u662f\u6811\u5256+\u6811\u4e0a\u5dee\u5206\u7684\u505a\u6cd5\uff0c\u672c\u5f31\u8d21\u732e\u4e00\u79cd\u7528\u6811\u5256+\u7ebf\u6bb5\u6811\u7684\u601d\u8def\u3002\n\n\u9898\u610f\u5f88\u660e\u663e \u6bcf\u6b21\u628a$u_{i-1}->lca(u_{i-1},u_i)->u_i$\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u503c\u90fd+1\n\n\u5f88\u660e\u663e\u5c31\u662f\u7ebf\u6bb5\u6811\u561b\u3002\n\n\u6211\u4eec\u628a\u6240\u6709\u7684\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\u90fd\u641e\u597d\u4e86\u4ee5\u540e\uff0c\u7136\u540e\u628a\u6574\u9897\u7ebf\u6bb5\u6811\u90fd\u904d\u5386\u4e00\u904d\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u4e0a\u7684\u6743\u503c\u3002\n\n\u4f46\u95ee\u9898\u662f \u4e2d\u95f4\u7684\u70b9\u6bcf\u6b21\u52a0\u90fd\u591a\u52a0\u4e861\uff08\u4e0d\u5305\u62ec\u7b2c\u4e00\u6b21\u7684\u70b9\u548c\u6700\u540e\u4e00\u6b21\u7684\u70b9\uff09\n\n\u90a3\u6211\u4eec\u5c31\u7528\u4e2a\u6570\u7ec4\u8bb0\u5f55\u4e0b\u6765 \u6700\u540e\u8f93\u51fa\u7684\u65f6\u5019\u51cf\u53bb\u591a\u52a0\u7684\u503c\u5c31\u884c\u3002\n\n\u603b\u8017\u65f61000ms\u5de6\u53f3 \u6bd5\u7adf\u4e0d\u662f\u6b63\u89e3\u601d\u8def\uff0c\u4e5f\u8bb8\u6539\u6210ZKW\u5f0f\u7ebf\u6bb5\u6811\u4f1a\u66f4\u5feb\n\n\u603b\u884c\u6570140\u884c\u5de6\u53f3\uff0c\u6bd4\u5dee\u5206\u591a\u4e86\u4e0d\u5c11\uff0c\u6211\u771f\u662f\u83dc\u3002\n\n##AC Code\uff1a\n\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#define lson (o<<1),l,mid\n#define rson (o<<1)+1,mid+1,r\nusing namespace std;\nconst int maxm=310000;\nint deep[maxm],son[maxm],size[maxm],fa[maxm],top[maxm];\nint head[maxm],to[maxm<<1],net[maxm<<1],cnt;\nint p[maxm],val[maxm],who[maxm],ans[maxm],sx[maxm];\nint id[maxm],tot;\nint n,m,root;\nstruct node{\n    int l,r,siz,maxi,sum,add;\n};\nnode t[maxm*4];\nstruct war{\n    int u,v;\n};\nwar a[maxm];\ninline void add(int x,int y)\n{\n    to[++cnt]=y;\n    net[cnt]=head[x];\n    head[x]=cnt;\n}\nint dfs1(int now,int fax,int dep)\n{\n    fa[now]=fax,deep[now]=dep,size[now]=1;\n    int maxson=-1;\n    for(int i=head[now];i;i=net[i])\n    if(to[i]!=fax)\n    {\n        size[now]+=dfs1(to[i],now,dep+1);\n        if(maxson<size[to[i]])\n         son[now]=to[i],maxson=size[to[i]];\n    }\n    return size[now];\n}\nvoid dfs2(int now,int topx)\n{\n    id[now]=++tot;\n    who[tot]=now;\n    val[tot]=p[now];\n    top[now]=topx;\n    if(!son[now]) return;\n    dfs2(son[now],topx);\n    for(int i=head[now];i;i=net[i])\n     if(!id[to[i]])\n      dfs2(to[i],to[i]);\n}\ninline void update(int o)\n{\n    t[o].sum=(t[(o<<1)].sum+t[(o<<1)|1].sum);\n    t[o].maxi=max(t[(o<<1)].maxi,t[(o<<1)|1].maxi);\n}\ninline void pushdown(int o)\n{\n    int adi=t[o].add;\n    for(int i=0;i<=1;i++)\n     t[(o<<1)+i].sum=(t[(o<<1)+i].sum+(t[(o<<1)+i].siz*adi)),t[(o<<1)+i].add=(t[(o<<1)+i].add+adi);\n    t[o].add=0;\n}\nvoid build(int o,int l,int r)\n{\n    t[o].l=l,t[o].r=r,t[o].siz=r-l+1;\n    if(l==r)\n    {\n        t[o].sum=t[o].maxi=val[l];\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(lson),build(rson);\n    update(o);\n}\nvoid adj(int o,int ql,int qr,int num)\n{\n    int l=t[o].l,r=t[o].r;\n    if(ql<=l&&qr>=r)\n    {\n        t[o].sum=(t[o].sum+(t[o].siz*num));\n        t[o].add=(t[o].add+num);\n        return;\n    }\n    pushdown(o);\n    int mid=(l+r)>>1;\n    if(ql<=mid) adj((o<<1),ql,qr,num);\n    if(qr>mid) adj((o<<1)|1,ql,qr,num);\n    update(o);\n}\ninline void tree_x(int u,int v,int num)\n{\n    while(top[u]!=top[v])\n    {\n        if(deep[top[u]]<deep[top[v]]) swap(u,v);\n        adj(1,id[top[u]],id[u],num);\n        u=fa[top[u]];\n    }\n    if(deep[u]<deep[v]) swap(u,v);\n    adj(1,id[v],id[u],num);\n}\ninline int read()\n{\n    int x=0,w=1;char ch=0;\n    while(ch<'0'||ch>'9') \n    {\n        if(ch=='-') w=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9') x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x*w;\n}\nvoid print(int o,int l,int r)\n{\n    if(l==r)\n    {\n        ans[who[l]]=t[o].sum;\n        return;\n    }\n    int mid=(l+r)>>1;\n    pushdown(o);\n    print((o<<1),l,mid);\n    print((o<<1)|1,mid+1,r);\n}\nint main()\n{   \n    n=read();\n    for(int i=1;i<=n;i++)\n    {\n         a[i].u=read();\n         if(i!=1) sx[a[i].u]++;\n    }\n    \n    for(int i=1,u,v;i<n;i++)\n     u=read(),v=read(),add(u,v),add(v,u);\n    dfs1(1,0,0),dfs2(1,1);\n    build(1,1,tot);\n    for(int i=2;i<=n;i++)\n     tree_x(a[i-1].u,a[i].u,1);\n    print(1,1,tot);\n    for(int i=1;i<=n;i++)\n     printf(\"%d\\n\",ans[i]-sx[i]);\n    return 0;\n}\n```\n",
        "postTime": 1516436506,
        "uid": 19842,
        "name": "\u534a\u4ed9\u80e1\u5c0f\u6843",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u5c31\u662f\u6811\u4e0a\u7684\u8def\u5f84\u66f4\u65b0\u95ee\u9898\u3002\n\n\u4e00\u79cd\u505a\u6cd5\u662f\u6811\u5256\uff0c\u4f46\u662f\u5e38\u6570\u6bd4\u8f83\u5927\u3002\n\n\u73b0\u5728\u4ecb\u7ecd\u6811\u4e0a\u5dee\u5206\u3002\n\n\u8bb0\u5dee\u5206\u6570\u7ec4$b[]$\uff0c\u5982\u679c\u7b2c$u$\u4e2a\u8282\u70b9\u7684\u6743\u503c\u4e3a$val[u]$\uff0c\u5219\u4ee4$b[u]=val[u]-sigma(val[v])$\uff0c\u5176\u4e2d$v$\u4e3a$u$\u7684\u5b50\u8282\u70b9\u3002\n\n\u90a3\u4e48\u5f88\u5bb9\u6613\u5f97\u5230\uff0c\u7b2c$u$\u4e2a\u8282\u70b9\u7684\u6743\u503c\u5c31\u662f$u$\u7684\u5b50\u6811\u548c\u3002\n\n\u800c\u5982\u679c\u5bf9\u8def\u5f84$(u,v)$\u7684\u6743\u503c\u52a0\u4e0a$x$\uff0c\u8bbe$w$\u4e3a$(u,v)$\u7684$LCA$\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u6267\u884c\uff1a\n\n$b[u]+=x,b[v]+=x,b[w]-=x,b[fa[w]]-=x$\u3002\n\n\u4f46\u8981\u6ce8\u610f\u8fd9\u9898\u91cc\uff0c\u8def\u5f84\u7684\u672b\u5c3e\uff08$v$\uff09\u4e0d\u9700\u8981\u66f4\u65b0\u3002\n\n\u8fd9\u6837\u6700\u540e\uff0c$DFS$\u4e00\u904d\u6c42\u5f97\u5b50\u6811\u548c\u5373\u4e3a\u7b54\u6848\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\nconst int N = 3e5 + 5, LogN = 23;\nint n, a[N], ecnt, nxt[N << 1], adj[N], go[N << 1], fa[N][LogN],\ndep[N], T[N], res[N];\nvoid add_edge(int u, int v) {\n    nxt[++ecnt] = adj[u]; adj[u] = ecnt; go[ecnt] = v;\n}\nvoid dfs(int u, int fu) {\n    int i; dep[u] = dep[fu] + 1; for (i = 1; i <= 21; i++)\n        fa[u][i] = fa[fa[u][i - 1]][i - 1];\n    for (int e = adj[u], v; e; e = nxt[e]) {\n        if ((v = go[e]) == fu) continue;\n        fa[v][0] = u; dfs(v, u);\n    }\n}\nint lca(int u, int v) {\n    int i; if (dep[u] < dep[v]) swap(u, v);\n    for (i = 21; i >= 0; i--) {\n        if (dep[fa[u][i]] >= dep[v]) u = fa[u][i];\n        if (u == v) return u;\n    }\n    for (i = 21; i >= 0; i--) if (fa[u][i] != fa[v][i])\n        u = fa[u][i], v = fa[v][i];\n    return fa[u][0];\n}\nvoid change(int u, int v, int x) {\n    int w = lca(u, v);\n    T[u] += x; T[v] += x; T[w] -= x; T[fa[w][0]] -= x;\n}\nvoid dfs_ans(int u, int fu) {\n    res[u] = T[u];\n    for (int e = adj[u], v; e; e = nxt[e])\n        if ((v = go[e]) != fu) dfs_ans(v, u), res[u] += res[v];\n}\nint main() {\n    int i, x, y; n = read();\n    for (i = 1; i <= n; i++) a[i] = read();\n    for (i = 1; i < n; i++) {\n        x = read(); y = read();\n        add_edge(x, y); add_edge(y, x);\n    }\n    dfs(1, 0);\n    for (i = 1; i < n; i++) change(a[i], a[i + 1], 1),\n        change(a[i + 1], a[i + 1], -1); dfs_ans(1, 0);\n    for (i = 1; i <= n; i++) printf(\"%d\\n\", res[i]);\n    printf(\"\\n\");\n    return 0;\n}\n```",
        "postTime": 1503133687,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u4e24\u79cd\u5e38\u89c1\u89e3\u6cd5\uff1a\u6811\u5256\u7ef4\u62a4\u7ebf\u6bb5\u6811\uff0c\u6811\u4e0a\u5dee\u5206LCA\u3002\u8fd9\u91cc\u7528\u7684\u662f\u500d\u589e\u6c42LCA\u4e4b\u540e\u6811\u4e0a\u5dee\u5206\u7684\u65b9\u6cd5\uff0c\u800c\u4e14\u6548\u7387\u6bd4\u4e00\u4e9b\u795e\u65b9\u6cd5\u4f4e\uff0c\u4f46\u662f\u7406\u89e3\u8d77\u6765\u7684\u8bdd\u8fd8\u662f\u633a\u7b80\u5355\u7684\u3002\n\na\u6570\u7ec4\u7684\u8bdd\u610f\u601d\u4e0d\u7528\u591a\u8bf4\uff0c\u4f46\u662f\u6ce8\u610f\u4e8b\u9879\u7684\u8bdd\uff0c\u8981\u4ee5a[1]\u800c\u4e0d\u662f1\u4e3a\u6839\uff0c\u4e0b\u653e\u6807\u8bb0\u4e5f\u4ee5a[1]\u5f00\u59cb\u3002\u5176\u4ed6\u6570\u7ec4\u5e94\u8be5\u610f\u601d\u4e5f\u5f88\u660e\u663e\uff0c\u4e3b\u8981\u6ce8\u610f\u5230tmp\u6570\u7ec4\u3002\u4fdd\u5b58\u7684\u4e5f\u5c31\u662f\u8fd9\u4e2a\u70b9\u88ab\u8bbf\u95ee\u7684\u6b21\u6570\uff0c\u6211\u4eec\u91c7\u7528\u5dee\u5206\u7684\u601d\u60f3\uff0c\u6bcf\u6b21\u7ecf\u8fc7\u4e00\u6761\u8fb9\uff0c\uff08\u5982\u4eceu\u5230v\uff09\u6211\u4eec\u8ba9tmp[u]++,tmp[v]++,tmp[LCA(u,v)]--,tmp[grand[LCA(u,v)][0]]--\u3002\uff08\u6700\u540e\u8981\u628atmp\u63a8\u4e0a\u53bb\uff09\u4ee5\u4e00\u6b21\u6dfb\u52a0\u4e3a\u4f8b\u60f3\u8c61\u4e00\u4e0b\uff0c\u9996\u5148u\u5230\u6839\u7684\u8def\u5f84\u4e0atmp\u90fd+1\uff0c\u6b64\u65f6u\u5230\u6839\u95f4\u7ed3\u70b9tmp\u90fd\u4e3a1\uff0c\u4e4b\u540ev\u5230\u6839\u8def\u5f84\u4e0atmp+1\uff0c\u6b64\u65f6u\u5230LCA\u524d\u4e00\u4e2a\uff0cv\u5230LCA\u524d\u4e00\u4e2a\u70b9\u7684tmp\u90fd+1\uff0c\u800cLCA\u5230\u6839\u7684\u6240\u6709\u70b9\u90fd+2\uff0c\u7136\u540e\u4ecetmp[LCA]--,\u66f4\u65b0\u4e0a\u53bb\uff0c\u6b64\u65f6u-v\u8def\u4e0a\u6240\u6709tmp\u90fd+1\uff0c\u5df2\u7ecf\u8fbe\u5230\u76ee\u7684\u3002\u800c\u591a\u4f59\u7684\u662f\u4ec0\u4e48\u90e8\u5206\u5462\uff0c\u4e5f\u5c31\u662fLCA\u7684\u4e0a\u4e00\u4e2a\u7ed3\u70b9\uff08grand[LCA][0]\uff09\u5230\u6839\u7684\u8fd9\u4e00\u6bb5\u90fd\u591a\u52a0\u4e861\uff0c\u6240\u4ee5tmp[grand[LCA][0]]--,\u66f4\u65b0\u4e0a\u53bb\uff0c\u4e5f\u5c31\u5b8c\u6210\u4e86\u3002\n\n\u5b9e\u9645\u64cd\u4f5c\u65f6\u4e5f\u5c31\u4e0d\u9700\u8981\u6bcf\u6b21\u66f4\u65b0\u90fd\u63a8\u4e0a\u53bb\uff0c\u53ea\u8981\u628a\u56db\u4e2atmp\u7ef4\u62a4\u597d\uff0c\u6700\u540eDfs\u8d70\u4e00\u8fb9\u5c31\u66f4\u65b0\u5b8c\u4e86\u3002\u4f46\u662f\u6700\u540e\u6c42\u7b54\u6848\u65f6\uff0ca[2]~a[n]\u90fd\u8981\u51cf\u4e00\u3002\u4e3a\u4ec0\u4e48\u5450......\u563f\u563f\u563f\uff0c\u4e0d\u544a\u8bc9\u4f60\u3002\n\n\n\n----------------------------------------------\u6211\u662f\u4e00\u6761\u840c\u840c\u54d2\u7684\u5206\u5272\u7ebf>w<---------------------------------------------------\n\n\n\n\u54b3\u54b3\uff0c\u770b\u5728\u4f60\u8fd9\u4e48\u6709\u8bda\u610f\u5730\u7ffb\u4e0b\u6765\u7684\u4efd\u4e0a\uff0c\u5c31\u544a\u8bc9\u4f60\u3002\u56e0\u4e3a\u6bcf\u6b21\u7684\u7ec8\u70b9\u5c31\u662f\u4e0b\u4e00\u6b21\u7684\u8d77\u70b9\uff08\u7ed3\u675f...\u4e5f\u6b63\u662f\u65b0\u7684\u5f00\u59cb\uff09\u2190\u4e0d\u6b63\u5e38\u3002\u6240\u4ee5\u8fd9\u6837\u7684\u8bdd\u76f8\u5f53\u4e8e\u540e\u9762\u7684\u6bcf\u4e2a\u623f\u95f4\u90fd\u591a\u653e\u4e86\u4e00\u9897\uff0c\u6700\u540e\u4e00\u4e2a\u623f\u95f4\u4e5f\u662f\u4e00\u6837\uff08\u6240\u4ee5\u9898\u76ee\u8bf4\u4e0d\u7528\u653e\u7cd6\uff09\uff0c\u628a\u5b83\u5f53\u4f5c\u591a\u7b97\u4e86\u4e00\u904d\u51cf\u53bb\u5c31\u597d\u3002\u8fd9\u9898\u7684\u6837\u4f8b\u8fd8\u7b97\u826f\u5fc3\u7684\uff0c\u53ef\u4ee5\u5bf9\u7740\u56fe\u63a8\u4e00\u63a8\u5427...\u770b\u61c2\u610f\u601d\u6bd4\u8f83\u91cd\u8981\u3002\u6811\u5256\u7684\u8bdd...hhhhhhh\u5b66\u4f1a\u4e86\u4ee5\u540e\u518d\u8bf4\u5427\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int maxx = 300000 + 100;\nint head[maxx],next[maxx<<1],to[maxx<<1];\nint grand[maxx][20+2],depth[maxx],tmp[maxx],a[maxx];\nbool done[maxx];\nint n,m,root,x,y,num,size,Ans;\ninline int read(){\n    int x = 0,f = 1;char c = getchar();\n    while(c>'9'||c<'0') {if(c == '-') f = -1;c = getchar();}\n    while(c>='0'&&c<='9') {x = x*10+c-'0'; c = getchar();}\n    return x*f;\n}\nvoid Add(int x,int y){\n    to[++num] = y;\n    next[num] = head[x];\n    head[x] = num;\n}\nvoid Dfs(int x){\n    done[x] = true;\n    for(int i=1;i<=20;i++){\n        if(depth[x] < (1<<i)) break;\n        grand[x][i] = grand[grand[x][i-1]][i-1];\n    }\n    for(int i=head[x];i;i=next[i]){\n        int now = to[i];\n        if(done[now]) continue;\n        grand[now][0] = x;\n        depth[now] = depth[x] + 1;\n        Dfs(now);\n    }\n}\nint Lca(int x,int y){\n    if(depth[x] > depth[y]) x^=y^=x^=y;\n    int d = depth[y] - depth[x];\n    for(int i=0;i<=20;i++)\n    if((1<<i) & d)\n        y = grand[y][i];\n    for(int i=20;i>=0;i--)\n    if(grand[x][i] != grand[y][i])\n        x = grand[x][i],y = grand[y][i];\n    return x == y? x : grand[x][0];\n}\nvoid pushdown(int x)\n{\n    for(int i=head[x];i;i=next[i])\n    {\n        if (to[i]==grand[x][0]) continue;\n        pushdown(to[i]);\n        tmp[x]+=tmp[to[i]];\n    }\n}\nint main(){\n    n = read();\n    for(int i=1;i<=n;i++)\n        a[i] = read();\n    for(int i=1;i<n;i++){\n        x = read();y = read();\n        Add(x,y);Add(y,x);\n    }\n    Dfs(a[1]);\n    for(int i=1;i<n;i++){\n        int u = a[i],v = a[i+1];\n        tmp[u]++;tmp[v]++;\n        tmp[Lca(u,v)]--;\n        tmp[grand[Lca(u,v)][0]]--;\n    }\n    pushdown(a[1]);\n    for(int i=2;i<=n;i++)\n        tmp[a[i]]--;\n    for(int i=1;i<=n;i++)\n        printf(\"%d\\n\",tmp[i]);\n    return 0;\n}\n```",
        "postTime": 1486799984,
        "uid": 21673,
        "name": "Sor4",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "/\\*\n\u8fd9\u4e2a\u9898\u5c31\u662f\u8003\u6811\u4e0a\u500d\u589e\u548c\u6811\u4e0a\u524d\u7f00\u548c\u95ee\u9898\uff0c\n\n\u6211\u4eec\u5199\u610f\u7684\u53bb\u601d\u8003\u4e00\u4e0b\uff0c\u6839\u636e\u8bbf\u95ee\u987a\u5e8f\uff0c\u5728\u8bbf\u95ee\u8282\u70b9Ai~Ai+1\u7684\u8def\u5f84\u4e0a\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u8981++\n\n\u90a3\u4e48\u4eceAi~Ai+1\u7684\u8def\u5f84\u4e0a\u8981\u7ecf\u8fc7\u5b83\u4eec\u7684lca\uff0c\u8fd9\u4e2a\u9700\u8981O(1)\u4fee\u6539\uff0c\n\n\u90a3\u4e48\u5c31\u662f\u6811\u4e0a\u524d\u7f00\u548c\u4e86\uff0csum\u6570\u7ec4\u662f\u524d\u7f00\u548c\u6570\u7ec4\uff0c\n\n\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff0c\n\n1.\u8bbf\u95ee\u5230\u4e00\u4e2a\u70b9p1\uff0c\u82e5\u4e0b\u4e00\u4e2a\u70b9p2\u9700\u8981\u5f80\u513f\u5b50\u4e0b\u9762\u627e\u7684\u8bdd\uff0c\u90a3\u4e48lca\u5c31\u662f\u8fd9\u4e2a\u70b9p1\uff0c\u90a3\u4e48\u5c31\u8fd9\u6837\u52a0\uff1a\n\n          sum[p1]--; sum[p2]++;\n\n2.\u8bbf\u95ee\u5230\u4e00\u4e2a\u70b9p1\uff0c\u82e5\u4e0b\u4e00\u4e2a\u70b9p2\u9700\u8981\u5f80\u7236\u4eb2\u4e0a\u627e\u7684\u8bdd\uff0c\u90a3\u4e48lca\u5c31\u662fp2,\u90a3\u4e48\u5c31\u8fd9\u6837\u52a0\uff1a\n\nsum[f[p2][0]]--; sum[f[p1][0]]++;//\u6811\u4e0a\u500d\u589ef[i][j]\u8868\u793a\u4ecei\u5f80\u4e0a\u8df32^j\u6b65\u5230\u8fbe\u7684\u70b9\n\n3.\u8bbf\u95ee\u5230\u4e00\u4e2a\u70b9p1\uff0c\u82e5\u4e0b\u4e00\u4e2a\u70b9p2\u9700\u8981\u8de8\u8fc7p1,p2\u7684lca\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u8fd9\u6837\u52a0\uff1a\n\nsum[lca]--; sum[f[lca][0]]--; sum[p1]++; sum[p2]++;\n\n\u6700\u540e\u4e00\u4e9b\u7ec6\u8282\u7684\u8bdd\uff0c\u624b\u52a8\u8111\u8865\u4e00\u4e0b\u597d\u4e86\uff0c\u6837\u4f8b\u7ed9\u7684\u975e\u5e38\u826f\u5fc3~\n\n\u6700\u6700\u540e~%%%yts\u592a\u795e\u8fa3~~~\n\n\\*/\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nstruct edge{\n    int to,next;\n}mem[600060];\nint n,m,father,x,y,num=0,p1,p2;\nint fa[300060],head[300060],f[300060][30],g[300060],sum[300060],dep[300060],cnt[300060];\nvoid init(int x,int y){\n    num++;\n    mem[num].to=y;\n    mem[num].next=head[x];\n    head[x]=num;\n}\nvoid dfs(int k,int pre){\n    int u,s;\n    for (int j=head[k];j;j=mem[j].next){\n        u=mem[j].to;\n        if (u==pre) continue;\n        dep[u]=dep[k]+1; f[u][0]=k;\n        for (int e=1;e<=30;e++){\n            s=1<<e;\n            if (s>dep[u]) break;\n            f[u][e]=f[f[u][e-1]][e-1];\n        }\n        dfs(u,k);\n    }\n}\nint lca(int x,int y){\n    int k,tmp;\n    if (dep[x]<dep[y]){\n        tmp=x; x=y; y=tmp;\n    }\n    for (int e=30;e>=0;e--){\n        if (dep[x]==dep[y]) break;\n        k=1<<e;\n        if (k>dep[x]-dep[y]) continue;\n        x=f[x][e];\n    }\n    if (x==y) return x;\n    for (int e=30;e>=0;e--){\n        k=1<<e;\n        if (k>dep[x]) continue;\n        if (f[x][e]==f[y][e]) continue;\n        x=f[x][e]; y=f[y][e];\n    }\n    return f[x][0];\n}\nvoid dfns(int k,int pre){\n    int u;\n    if (mem[head[k]].next==0&&k!=1){\n        cnt[k]=sum[k];\n        return;\n    }\n    for (int j=head[k];j;j=mem[j].next){\n        u=mem[j].to;\n        if (u==pre) continue;\n        dfns(u,k);\n        cnt[k]+=cnt[u];\n    }\n    cnt[k]+=sum[k];\n}\nint main(){\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++) scanf(\"%d\",&g[i]);\n    for (int i=1;i<n;i++){\n        scanf(\"%d%d\",&x,&y);\n        init(x,y);\n        init(y,x);\n    }\n    dfs(1,0);\n    father=lca(g[1],g[2]);\n    sum[g[1]]++; sum[g[2]]++;\n    sum[father]--; sum[f[father][0]]--;\n    for (int i=2;i<n;i++){\n        p1=g[i]; p2=g[i+1];\n        father=lca(p1,p2);\n        if (father==p1||father==p2){\n            if (father==p1){\n                sum[p2]++;\n                sum[p1]--;\n            }\n            if (father==p2){\n                sum[f[p1][0]]++;\n                sum[f[p2][0]]--;\n            }\n            continue;\n        }\n        sum[f[p1][0]]++; sum[p2]++;\n        sum[father]--;\n        sum[f[father][0]]--;\n    }\n    dfns(1,0); \n    for (int i=1;i<=n;i++){\n        if (i==g[n]) cnt[i]--;\n        printf(\"%d\\n\",cnt[i]);\n    }\n    return 0;\n}\n```",
        "postTime": 1477837983,
        "uid": 18008,
        "name": "wdyhy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\n## \u9898\u89e3\uff1a\n\n\u4e00\u9053\u6811\u94fe\u5256\u5206\u7684\u9898\u3002\n\n\u5173\u4e8e\u6811\u94fe\u5256\u5206\u7684\u8bb2\u89e3\u8be6\u89c1\uff1a\n\n[\u6d45\u8c08\u6811\u94fe\u5256\u5206](https://www.cnblogs.com/fusiwei/p/11519470.html)\n\n\u5176\u5b9e\u6811\u94fe\u5256\u5206\u7684\u7ec3\u4e60\u9898\u5f88\u591a\u90fd\u662f\u6a21\u677f\u3002\n\n\u6240\u4ee5\u6811\u94fe\u5256\u5206\u9898\u76ee\u7684\u91cd\u70b9\u6709\u4e8c\uff1a\u7b2c\u4e00\uff1a\u62cd\u719f\u6a21\u677f\u3002\u7b2c\u4e8c\uff1a\u5206\u6790\u600e\u4e48\u7528\u6811\u94fe\u5256\u5206\u89e3\u51b3\uff0c\u89e3\u51b3\u7684\u65f6\u5019\u8981\u6ce8\u610f\u7684\u95ee\u9898\u662f\u4ec0\u4e48\u3002\n\n\u5c31\u62ff\u8fd9\u9053\u9898\u8bf4\u5427\uff1a\u6211\u4eec\u7528\u6811\u94fe\u5256\u5206\u7684\u7406\u7531\u662f\uff0c\u8fd9\u9053\u9898\u660e\u663e\u662f\u4fee\u6539\u6811\u4e0a\u4e00\u6761\u8def\u5f84\u7684\u6743\u503c\u5e76\u67e5\u8be2\u6240\u6709\u70b9\u6743\uff0c\u7b26\u5408\u6811\u94fe\u5256\u5206\u7684\u57fa\u672c\u64cd\u4f5c\u3002\u5982\u679c\u4f60\u662f\u6a21\u677f\u62cd\u9519\u4e86\uff0c\u8bf7\u81ea\u884c\u7167\u4e0a\u9762\u7684\u535a\u5ba2\u8c03\u8bd5\u3002\n\n\u5982\u679c\u4f60\u662fWA\u4e86\u4f46\u662f\u6a21\u677f\u6b63\u786e\uff0c\u90a3\u4f60\u53ef\u80fd\u72af\u4e86\u4e0b\u9762\u7684\u95ee\u9898\uff1a\n\n\u56e0\u4e3a\u5c0f\u718a\u7ef4\u5c3c\u662f\u8fde\u7eed\u884c\u8fdb\u7684\uff0c\u5c31\u6bd4\u5982\u8bf4\u4ece1-2\uff0c\u518d\u4ece2-3.\u5982\u679c\u6211\u4eec\u6309\u7167\u88f8\u7684\u6811\u94fe\u5256\u5206\u6765\u505a\u7684\u8bdd\uff0c\u5c31\u4f1a\u5bfc\u81f42\u8fd9\u4e2a\u70b9\u88ab\u52a0\u4e86\u4e24\u6b21\u7cd6\u3002\u4f46\u662f\u663e\u71362\u8fd9\u4e2a\u70b9\u53ea\u9700\u8981\u4e00\u5757\u5c31\u884c\u3002\u6240\u4ee5\u6211\u4eec\u5728\u8fdb\u884c\u8def\u5f84\u4fee\u6539\u4e4b\u540e\uff0c\u8fd8\u8981\u8bb0\u5f97\u628a\u7ec8\u70b9\u7684\u6743\u503c\u51cf\u53bb1.\uff08\u8fd9\u6837\u7684\u8bdd\u4e5f\u5904\u7406\u4e86\u9910\u5385\u4e0d\u7528\u52a0\u7684\u95ee\u9898\u3002\uff09\n\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define lson pos<<1\n#define rson pos<<1|1\n#define R register\nusing namespace std;\nconst int maxn=3*1e5+1;\nint n,a[maxn],cnt;\nint tot,head[maxn],nxt[maxn<<1],to[maxn<<1];\nint fa[maxn],deep[maxn],size[maxn],son[maxn];\nint top[maxn],id[maxn];\nint tree[maxn<<2],lazy[maxn<<2];\nchar *p1,*p2,buf[100000];\n#define nc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++)\nint read()\n{\n    int x=0,f=1;\n    char ch=nc();\n    while(ch<48){if(ch=='-')f=-1;ch=nc();}\n    while(ch>47)    x=x*10+ch-'0',ch=nc();\n    return x*f;\n}\nvoid add(int x,int y)\n{\n    to[++tot]=y;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\nvoid dfs1(int x,int f)\n{\n    deep[x]=deep[f]+1;\n    fa[x]=f;\n    size[x]=1;\n    for(R int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==f)\n            continue;\n        dfs1(y,x);\n        size[x]+=size[y];\n        if(!son[x]||size[y]>size[son[x]])\n            son[x]=y;\n    }\n}\nvoid dfs2(int x,int t)\n{\n    top[x]=t;\n    id[x]=++cnt;\n    if(!son[x])\n        return;\n    dfs2(son[x],t);\n    for(R int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==fa[x]||y==son[x])\n            continue;\n        dfs2(y,y);\n    }\n}\nvoid mark(int pos,int l,int r,int k)\n{\n    tree[pos]+=(r-l+1)*k;\n    lazy[pos]+=k;\n}\nvoid pushdown(int pos,int l,int r)\n{\n    int mid=(l+r)>>1;\n    mark(lson,l,mid,lazy[pos]);\n    mark(rson,mid+1,r,lazy[pos]);\n    lazy[pos]=0;\n}\nvoid update(int pos,int l,int r,int x,int y,int k)\n{\n    int mid=(l+r)>>1;\n    if(x<=l && r<=y)\n    {\n        mark(pos,l,r,k);\n        return;\n    }\n    pushdown(pos,l,r);\n    if(x<=mid)\n        update(lson,l,mid,x,y,k);\n    if(y>mid)\n        update(rson,mid+1,r,x,y,k);\n    tree[pos]=tree[lson]+tree[rson];\n}\nvoid upd_chain(int x,int y,int k)\n{\n    while(top[x]!=top[y])\n    {\n        if(deep[top[x]]<deep[top[y]])\n            swap(x,y);\n        update(1,1,n,id[top[x]],id[x],k);\n        x=fa[top[x]];\n    }\n    if(deep[x]<deep[y])\n        swap(x,y);\n    update(1,1,n,id[y],id[x],k);\n}\nint query(int pos,int l,int r,int x,int y)\n{\n    int ret=0;\n    int mid=(l+r)>>1;\n    if(x<=l && r<=y)\n        return tree[pos];\n    pushdown(pos,l,r);\n    if(x<=mid)\n        ret+=query(lson,l,mid,x,y);\n    if(y>mid)\n        ret+=query(rson,mid+1,r,x,y);\n    return ret;\n}\nint main()\n{\n    n=read();\n    for(R int i=1;i<=n;i++)\n        a[i]=read();\n    for(R int i=1;i<n;i++)\n    {\n        int x,y;\n        x=read(),y=read();\n        add(y,x);\n        add(x,y);\n    }\n    dfs1(1,0);\n    dfs2(1,1);\n    for(R int i=1;i<n;i++)\n    {\n        upd_chain(a[i],a[i+1],1);\n        upd_chain(a[i+1],a[i+1],-1);\n    }\n    for(R int i=1;i<=n;i++)\n        printf(\"%d\\n\",query(1,1,n,id[i],id[i]));\n    return 0;\n}\n```",
        "postTime": 1571206355,
        "uid": 175131,
        "name": "\u5085\u601d\u7ef4666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u697c\u4e0b\u5404\u4f4d\u795e\u7287\u90fd\u7528\u4e86lca\uff0c\u672c\u849f\u84bb\u770b\u4e0d\u61c2\uff0c\u5c31\u81ea\u5df1\u6765\u53d1\u4e2a\u9898\u89e3\u5427\u3002\n\n\u9996\u5148\u8fd8\u662f\u6811\u5256+\u5dee\u5206\uff0c\u4f46\u7701\u53bb\u4e86lca~~\u7e41\u7410~~\u7684\u8fc7\u7a0b\u3002\n\n\u6253\u5f00\u8fd9\u4e2a\u9898\u8bf4\u660e\u4f60\u4f1a\u6811\u5256\u6240\u4ee5\u4e0d\u8bb2\u3002\n\n\u5dee\u5206\u5bf9\u4e8e\u91cd\u590d\u7684\u4f4d\u7f6e\u6253\u6807\u8bb0\uff0c\u6700\u7ec8\u7b54\u6848\u5c31\u662f\u5dee\u5206\u6570\u7ec4\u7684\u524d\u7f00\u548c+\u5bf9\u5e94\u6807\u8bb0\u7684\u503c\u3002\n\n---\n\n\u6bd4\u5982\u9898\u76ee\u6837\u4f8b\uff1a\n\n\u4ee51\u53f7\u70b9\u4e3a\u6839\uff0c\u7ecf\u8fc7\u4e24\u904ddfs\u4e4b\u540e\uff0c\u6211\u4eec\u5f97\u5230\u7684dfs\u5e8f\u5c31\u662f\uff1a\n\n1 2 4 5 3\n\n---\n\n\u7136\u540e\u5f00\u59cb\uff1a\n\n1.\u8981\u4ece1\u53f7\u70b9\u8d70\u52304\u53f7\u70b9\uff0c\u5c31\u53ef\u4ee5\u628a\u5dee\u5206\u6570\u7ec4\u4e2d1\u53f7\u70b9+1\uff0c4\u53f7\u70b9-1\uff0c\u5e76\u628a4\u53f7\u70b9\u6253\u4e0a\u4e00\u4e2a+1\u6807\u8bb0\u3002\n\n------dfs\u5e8f\uff1a1 2 4 5 3\n\n\u5dee\u5206\u6570\u7ec4\uff1a1 0 -1 0 0\n\n----\u524d\u7f00\u548c\uff1a1 1 0 0 0\n\n----------tag\uff1a0 0 1 0 0\n\n\u6b64\u65f6\u7b54\u6848\uff1a1 1 1 0 0\uff08\u8868\u793a1\u53f7\u70b9\u30012\u53f7\u70b9\u30014\u53f7\u70b9\u5404\u9700\u8981\u4e00\u4e2a\u7cd6\u679c\uff09\n\n---\n\n2.\u7531\u4e8e\u4e0a\u4e00\u6b21\u57284\u53f7\u70b9\uff0c\u6240\u4ee5\u4e3a\u4e86\u53bb\u91cd\u5c31\u628a4\u53f7\u70b9\u6253\u4e00\u4e2a-1\u6807\u8bb0\u3002\n\n\u8981\u4ece4\u53f7\u70b9\u8d70\u52305\u53f7\u70b9\uff0c\u5c31\u53ef\u4ee5\u628a\u5dee\u5206\u6570\u7ec4\u4e2d4\u53f7\u70b9+1\uff0c5\u53f7\u70b9-1\uff0c5\u53f7\u70b9\u6253\u4e0a\u4e00\u4e2a+1\u6807\u8bb0\u3002\n\n------dfs\u5e8f\uff1a1 2 4 5 3\n\n\u5dee\u5206\u6570\u7ec4\uff1a1 0 0 -1 0\n\n----\u524d\u7f00\u548c\uff1a1 1 1 0 0\n\n----------tag\uff1a0 0 0 1 0\n\n\u6b64\u65f6\u7b54\u6848\uff1a1 1 1 1 0\uff08\u8868\u793a1\u30012\u30014\u30015\u5404\u9700\u8981\u4e00\u4e2a\u7cd6\u679c\uff09\n\n---\n\n3.\u7531\u4e8e\u4e0a\u4e00\u6b21\u57285\u53f7\u70b9\uff0c\u6240\u4ee5\u4e3a\u4e86\u53bb\u91cd\u5c31\u628a5\u53f7\u70b9\u6253\u4e00\u4e2a-1\u6807\u8bb0\u3002\n\n\u8981\u4ece5\u53f7\u70b9\u8d70\u52303\u53f7\u70b9\uff0c\u6309\u7167\u6811\u5256\u601d\u60f3\uff0c\u7531\u4e8etop[5] = 1\u7684\u6df1\u5ea6 < top[3] = 3\u7684\u6df1\u5ea6(\u8fd9\u4e2a\u81ea\u5df1\u628a\u6837\u4f8b\u4e2d\u7684\u6811\u753b\u51fa\u6765\u5c31\u77e5\u9053\u4e86\uff09\uff0c\u4ea4\u6362\u4e24\u4e2a\u503c\uff0c\u4e5f\u5c31\u662f\u770b\u6210\u4ece3\u53f7\u70b9\u8d70\u52305\u53f7\u70b9\u3002\n\n\u8fd8\u662f\u6811\u5256\u601d\u60f3\uff0c\u628a3\u5230top[3] = 3\u548cfa[top[3]] = 2\u52305\u7684\u8def\u5f84\u90fd+1\u3002\n\n\u90a3\u4e48\u8981\u505a\u7684\u5c31\u662f\u5728\u5dee\u5206\u6570\u7ec4\u4e2d\uff0c\u628a3\u53f7\u70b9+1\uff0c3\u53f7\u70b9-1\u5e76\u7ed93\u53f7\u70b9\u6253\u4e00\u4e2a+1\u6807\u8bb0\uff08\u6b63\u597d\u91cd\u5408\u4e86\u6240\u4ee5\u8fd9\u4e48\u52a0\uff09\uff0c\u7136\u540e\u628a2\u53f7\u70b9+1\uff0c5\u53f7\u70b9-1\u5e76\u7ed95\u53f7\u70b9\u6253\u4e00\u4e2a+1\u6807\u8bb0\u3002\n\n------dfs\u5e8f\uff1a1 2 4 5 3\n\n\u5dee\u5206\u6570\u7ec4\uff1a1 1 0 -2 0\n\n----\u524d\u7f00\u548c\uff1a1 2 2 1 0\n\n----------tag\uff1a0 0 0 1 1\n\n\u6b64\u65f6\u7b54\u6848\uff1a1 2 2 1 1\n\n---\n\n4.\u7531\u4e8e\u4e0a\u4e00\u6b21\u57283\u53f7\u70b9\uff0c\u6240\u4ee5\u628a3\u53f7\u70b9\u6253\u4e00\u4e2a-1\u6807\u8bb0\u3002\n\n\u8981\u4ece3\u53f7\u70b9\u8d70\u52302\u53f7\u70b9\uff0c\u540c\u7b2c\u4e09\u6b65\uff0c\u628a3\u5230top[3] = 3\u548cfa[top[3]] = 2\u52302\u7684\u8def\u5f84\u90fd+1\u3002\n\n\u90a3\u4e48\u8981\u505a\u7684\u5c31\u662f\u5728\u5dee\u5206\u6570\u7ec4\u4e2d\uff0c\u628a3\u53f7\u70b9+1-1\u518d\u6253\u4e2a+1\u6807\u8bb0\uff0c2\u53f7\u70b9+1-1\u518d\u6253\u4e2a+1\u6807\u8bb0\u3002\n\n------dfs\u5e8f\uff1a1 2 4 5 3\n\n\u5dee\u5206\u6570\u7ec4\uff1a1 1 0 -2 0\n\n----\u524d\u7f00\u548c\uff1a1 2 2 1 0\n\n----------tag\uff1a0 1 0 1 1\n\n\u6b64\u65f6\u7b54\u6848\uff1a1 3 2 1 1\n\n---\n\n\u6700\u540e\u4e00\u6b65\uff0c\u628a\u6700\u540e\u4e00\u4e2a\u70b9\u6253\u4e00\u4e2a-1\u6807\u8bb0\uff08\u56e0\u4e3a\u6700\u540e\u4e00\u4e2a\u623f\u95f4\u4e0d\u9700\u8981\u7cd6\u679c\uff09\uff0c\u4e5f\u5c31\u662f2\u53f7\u70b9\u6807\u8bb0-1\u3002\n\n------dfs\u5e8f\uff1a1 2 4 5 3\n\n\u5dee\u5206\u6570\u7ec4\uff1a1 1 0 -2 0\n\n----\u524d\u7f00\u548c\uff1a1 2 2 1 0\n\n----------tag\uff1a0 0 0 1 1\n\n\u6700\u7ec8\u7b54\u6848\uff1a1 2 2 1 1\n\n\uff08\u8868\u793a1\u30013\u30015\u5404\u8981\u4e00\u4e2a\u7cd6\u679c\uff0c2\u30014\u5404\u89812\u4e2a\u7cd6\u679c\uff09\n\n---\n\n```\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n\nconst int maxn = 300007;\n\nusing namespace std;\n\nint n;\nint a[maxn];\n\nint to[maxn << 1];\nint nex[maxn << 1];\nint last[maxn], k; //\u524d\u5411\u661f\u7684\u4e1c\u897f\n\nint st[maxn]; //\u5dee\u5206\u6570\u7ec4\nint tag[maxn]; //\u6807\u8bb0\u6570\u7ec4\n\nint fa[maxn]; //\u7236\u8282\u70b9\nint son[maxn]; //\u91cd\u513f\u5b50\nint dep[maxn]; //\u6df1\u5ea6\nint top[maxn]; //\u5c31\u662f\u90a3\u4e2atop\nint size[maxn]; //\u5b50\u6811\u5927\u5c0f\n\nint cnt;\nint id[maxn]; //\u5b58\u50a8dfs\u5e8f\u7684\u4f4d\u7f6e\n //\u6811\u5256\u7684\u4e00\u5806\u4e1c\u897f\n\ninline int read()\n{\n    int X = 0; char ch = 0;\n    while (ch < '0' || ch > '9') ch = getchar();\n    while (ch >= '0' && ch <= '9') X = (X << 3) + (X << 1) + ch - '0', ch = getchar();\n    return X;\n} //\u5feb\u8bfb\n\ninline void add_edge(int u, int v)\n{\n    to[++k] = v; nex[k] = last[u]; last[u] = k;\n} //\u8fde\u8fb9\n\ninline void uprange(int x, int y)\n{\n    while (top[x] != top[y]) { //\u6811\u5256\u601d\u60f3\n        if (dep[top[x]] < dep[top[y]]) swap(x, y);\n        st[id[top[x]]]++;\n        st[id[x]]--;\n        tag[x]++; //\u524d\u4e24\u6761\u8bed\u53e5\u6c42\u524d\u7f00\u548c\u540e\u4f1a\u6f0f\u4e0b\u7b2cx\u4e2a\u70b9\u6ca1\u6709\u7cd6\u679c\uff0c\u6240\u4ee5\u628a\u8fd9\u4e2a\u6f0f\u4e0b\u7684\u653e\u6807\u8bb0\u91cc\n        x = fa[top[x]];\n    }\n    if (dep[x] > dep[y]) swap(x, y);\n    st[id[x]]++;\n    st[id[y]]--;\n    tag[y]++; //\u8fd9\u91cc\u4e5f\u4e00\u6837\uff0c\u67e5\u6f0f\u8865\u7f3a\n}\n\nvoid dfs1(int x, int f, int depth)\n{\n    fa[x] = f;\n    dep[x] = depth;\n    size[x] = 1;\n    int wson = -1;\n    for (int i = last[x]; i; i = nex[i]) {\n        int y = to[i];\n        if (y == f) continue;\n        dfs1(y, x, depth + 1);\n        size[x] += size[y];\n        if (size[y] > wson) wson = size[y], son[x] = y;\n    }\n}\n\nvoid dfs2(int x, int topf)\n{\n    id[x] = ++cnt;\n    top[x] = topf;\n    if (!son[x]) return;\n    dfs2(son[x], topf);\n    for (int i = last[x]; i; i = nex[i]) {\n        int y = to[i];\n        if (y == fa[x] || y == son[x]) continue;\n        dfs2(y, y);\n    }\n}\n//\u4e24\u4e2adfs\n\nint main(void)\n{\n    n = read();\n    for (int i = 1; i <= n; i++) a[i] = read();\n    int x, y;\n    for (int i = 1; i < n; i++) {\n        x = read();\n        y = read();\n        add_edge(x, y);\n        add_edge(y, x); //\u6811\u662f\u53cc\u5411\u8fb9\n    }\n    dfs1(1, 0, 1);\n    dfs2(1, 1);\n    //\u4ee51\u4e3a\u6839\uff0c\u5f53\u7136\u5176\u5b83\u70b9\u4e5f\u53ef\u4ee5\n    uprange(a[1], a[2]); //\u5148\u66f4\u65b0\u524d\u4e24\u4e2a\u70b9\n    for (int i = 2; i < n; i++) {\n        uprange(a[i], a[i+1]); //\u66f4\u65b0\u6bcf\u4e24\u4e2a\u70b9\n        tag[a[i]]--; //\u53bb\u91cd\u7684-1\u6807\u8bb0\n    }\n    tag[a[n]]--; //\u6700\u540e\u4e00\u4e2a\u70b9\u7684\u6807\u8bb0\n    for (int i = 1; i < n; i++) st[i+1] += st[i]; //\u6c42\u5dee\u5206\u7684\u524d\u7f00\u548c\n    for (int i = 1; i <= n; i++) printf(\"%d\\n\", st[id[i]] + tag[i]); //\u7b54\u6848\u5c31\u662f\u5dee\u5206\u7684\u524d\u7f00\u548c+\u6807\u8bb0\u7684\u503c\n    \n    return 0;\n}\n```",
        "postTime": 1520646170,
        "uid": 47421,
        "name": "star_city",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u6709\u4eba\u8bf4\u500d\u589e\u4f1aT\uff1f\u7136\u800c\u8dd1\u5f97\u5f88\u5feb\u7684\u6837\u5b50\u3002\n\n\u6811\u4e0a\u5dee\u5206\uff08\u4f3c\u4e4e\u4e0d\u5fc5\u5206\u60c5\u51b5\uff0c\u50cf\u533a\u95f4\u7684\u5dee\u5206\u4e00\u6837\uff09\n\n\u5b9a\u4e49\u5dee\u5206\u6570\u7ec4T[i]=V[i]-Sigma(V[son])\n\n\u6bcf\u4e00\u6b21\u6811\u4e0a\u94fe\u52a0<u,v,1>\uff0c\u76f8\u5f53\u4e8eT[u]+1\uff0cT[v]+1\uff0cT[lca]-1\uff0cT[Father[lca]]-1\n\n\u6700\u540e\u904d\u5386\u8fd9\u68f5\u6811\uff0c\u628a\u524d\u7f00\u548c\u7b97\u51fa\u6765\uff0c\u5c31\u662f\u6bcf\u4e2a\u70b9\u7684\u589e\u52a0\u91cf\u3002\n\n\n\n\n```cpp\nprocedure Plus(u,v:longint);\n var\n  l:longint;\n begin\n  inc(T[u]);\n  inc(T[v]);\n  l:=Lca(u,v);\n  dec(T[l]);\n  dec(T[Father[l]]);\n end;\nprocedure Count(x:longint);\n var\n  v:longint;\n begin\n  v:=Tree[x];\n  while v<>0 do\n  begin\n   Count(Etree[v].x);\n   inc(T[x],T[Etree[v].x]);\n   v:=Etree[v].next;\n  end;\n end;\nfor i:=1 to n do\nwriteln(T[i]);\n```",
        "postTime": 1479125385,
        "uid": 13036,
        "name": "liaoy14866",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": "\u56e0\u4e3a\u4f1f\u5927\u7684\u795e\u7287yhy\u5df2\u7ecf\u5199\u4e86LCA\u7684\u9898\u89e3\n\n\u6211\u5c31\u5f3a\u884c\u5199\u4e00\u6ce2\u6811\u5256\u5427\n\n\u8fd9\u4e2a\u9898\u5b8c\u5168\u662f\u88f8\u9898 \u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\n\n\u6811\u5256\u4ee5\u540e\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c \u975e\u5e38\u7b80\u5355\n\n\u8fd9\u4e2a\u9898\u6211WA\u4e86\u5f88\u4e45 \u540e\u6765\u624d\u53d1\u73b0\u81ea\u5df1\u72af\u4e86\u4e24\u4e2a\u5c0f\u9519\n\n\n1 \u6ce8\u610f\u91cd\u590d\u8ba1\u7b97\u95ee\u9898\n\n\u6bd4\u5982\u5bf9\u4e8e\u5e8f\u52171 3 5 2 4\n\n\u90a3\u4e483 5 2\u5728\u8ba1\u7b97\u533a\u95f4\u52a0\u7684\u65f6\u5019 \u90fd\u4f1a\u88ab\u52a0\u4e24\u6b21 \u8fd9\u662f\u4e0d\u7b26\u5408\u5b9e\u9645\u7684\n\n\u6240\u4ee5\u8f93\u51fa\u7684\u65f6\u5019\u8bb0\u5f97\u5224\u4e00\u4e0b\n\n\u5982\u679c\u4e0d\u662fa[1] \u5c31\u628a\u7b54\u6848-1 \u5982\u679c\u8fd9\u4e2a\u70b9\u7684\u7b54\u6848\u662f0 \u5c31\u4e0d\u9700\u8981-1\u4e86\n\n\n2 update\u5f00\u5934\u7279\u5224\u4e00\u4e0b \u5982\u679c\u8981\u67e5\u8be2\u7684l0>r0\u5c31swap\u4e00\u4e0b\n\n\u8fd9\u9519\u8bef\u6211\u72af\u4e86\u597d\u51e0\u6b21\u4e86\n\n\u8822\u6b7b\u4e86QAQQQ\n\n\n\u90a3\u4e48\u6211\u5c31\u4e0a\u4ee3\u7801\u5566\n\n[codec]\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int N=300005;\nint n=0;\nint a[N];\nint head[N*2],next[N*2],to[N*2],edge=0;\nint depth[N],sz[N],id[N],son[N],num[N],fa[N],top[N],rank[N],yts=1;\nint sum[N*8],flag[N*8];\ninline void addEdge(int u,int v) {\n    to[edge]=v,next[edge]=head[u],head[u]=edge++;\n    to[edge]=u,next[edge]=head[v],head[v]=edge++;\n}\nvoid dfs1(int x,int f,int d) {\n    depth[x]=d;\n    sz[x]=1;\n    fa[x]=f;\n    for (int e=head[x];~e;e=next[e]) {\n        int& v=to[e];\n        if (v!=f) {\n            dfs1(v,x,d+1);\n            sz[x]+=sz[v];\n            if (son[x]==-1 || sz[son[x]]<sz[v])\n                son[x]=v; \n        }\n    }\n}\nvoid dfs2(int x,int t) {\n    top[x]=t;\n    id[x]=yts++;\n    rank[id[x]]=x;\n    if (son[x]==-1) \n         return;  \n    dfs2(son[x],t);\n    for (int e=head[x];~e;e=next[e]) {\n        int& v=to[e];\n        if (v!=fa[x] && v!=son[x])\n            dfs2(v,v);\n    }\n}\ninline void pushUp(int rt) {\n    sum[rt]=sum[rt<<1]+sum[rt<<1|1];\n}\ninline void pushDown(int rt,int l,int r) {\n    sum[rt]+=(r-l+1)*flag[rt];\n    flag[rt<<1]+=flag[rt];\n    flag[rt<<1|1]+=flag[rt];\n    flag[rt]=0;\n}\nvoid update(int rt,int l,int r,int d,int l0,int r0) {\n    if (l0>r0)\n        swap(l0,r0);\n    if (l0<=l && r<=r0) {\n        flag[rt]+=d;\n        pushDown(rt,l,r);\n    } else {\n        int mid=(l+r)>>1;\n        if (l0<=mid)\n            update(rt<<1,l,mid,d,l0,r0);\n        if (r0>mid)\n            update(rt<<1|1,mid+1,r,d,l0,r0);\n        pushDown(rt<<1,l,mid);\n        pushDown(rt<<1|1,mid+1,r);\n        pushUp(rt);\n    }\n}\nint query(int rt,int l,int r,int x) {\n    pushDown(rt,l,r);\n    if (l==r) {\n        return sum[rt];\n    }        \n    int mid=(l+r)>>1;\n    if (x<=mid)\n        return query(rt<<1,l,mid,x);\n    if (x>mid)\n        return query(rt<<1|1,mid+1,r,x);\n}\ninline void change(int x,int y,int d) {\n    while (top[x]!=top[y]) {\n        if (depth[top[x]]<depth[top[y]])\n            swap(x,y);\n        update(1,1,n,d,id[x],id[top[x]]);\n        x=fa[top[x]];\n    }\n    if(depth[x]>depth[y]) \n        swap(x,y);  \n    update(1,1,n,d,id[x],id[y]);  \n}\nint main(void) {\n    memset(head,-1,sizeof(head));\n    memset(son,-1,sizeof(son));\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i)\n        scanf(\"%d\",a+i);\n    for (int i=1;i<=n-1;++i) {\n        int u=0,v=0;\n        scanf(\"%d %d\",&u,&v);\n        addEdge(u,v);\n    }        \n    dfs1(1,-1,1);\n    dfs2(1,-1);\n    for (int i=1;i<=n-1;++i) { \n        change(a[i],a[i+1],1);\n    } \n    for (int i=1;i<=n;++i) {\n        int ret=query(1,1,n,id[i]);\n        if (!ret)\n            printf(\"0\\n\");\n        else\n            printf(\"%d\\n\",i!=a[1]?(ret-1):ret);\n    }\n    return 0;\n}\n```\n[codec/]\n\n\u6700\u540e\n\u8ba9\u6211\u4eec\n\nsro yts1999 orz\n\nyts\u795e\u7287\u6c38\u5782\u4e0d\u673d\uff01\n",
        "postTime": 1478659366,
        "uid": 13433,
        "name": "QwQ2000",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3258 \u3010[JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6\u3011"
    },
    {
        "content": " \t\u8fd9\u9898\u5c31\u662f\u4e00\u4e2a\u7eaf\u7684\u6811\u4e0a\u5dee\u5206\n  \n  \u7528\u500d\u589e\u627e\u4e24\u4e2a\u70b9\u7684lca\uff0c\u7136\u540e++\u8fd9\u4e24\u4e2a\u70b9\u7684\u6743\u503c,--lca\u6743\u503c\u548cfa[lca][0]\u7684\u6743\u503c\uff1b\t\n  \u7528\u62d3\u6251\u5e8f\u5c06\u5dee\u5206\u7684\u503c\u52a0\u4e0a\u53bb\n  \u6700\u540e\u5bf9\u4e8ea2~an\uff0c--\u5176\u503c\u6765\u53bb\u91cd\n ```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<queue>\nusing namespace std;\n#define Int int\n#define ri register Int\n#define For(i,a,b) for(ri i=(a);i<=(b);++i)\n#define DFor(i,a,b) for(ri i=(a);i>=(b);--i)\n#define Max(a,b) ((a)>(b)?(a):(b))\n#define Min(a,b) ((a)<(b)?(a):(b))\n#define MAXN 300000\nInt n;\nInt head[MAXN+5],t;\nInt a[MAXN+5];\nInt fa[MAXN+5][22];\nInt b[MAXN+5],dep[MAXN+5];\nInt c[MAXN+5],out[MAXN+5],s[MAXN+5];\nstruct node{\n Int u,v,nxt;\n}e[2*MAXN+5];\nvoid read(Int &x){\n char ch=getchar();\n x=0;\n   while(ch<'0'||ch>'9')ch=getchar();\n   while(ch>='0'&&ch<='9'){\n\tx=(x<<3)+(x<<1)+(ch^48);\n\tch=getchar();\n   }\n  return;\n}\nvoid add(Int u,Int v){\n ++t;\n e[t].u=u;e[t].v=v;\n e[t].nxt=head[u];head[u]=t;\n}\nqueue<Int> q; \nvoid bfs(){\n q.push(1);b[1]=1;dep[1]=1;\n  while(!q.empty()){\n   Int u=q.front();q.pop();\n    for(ri i=head[u];i;i=e[i].nxt){\n     Int v=e[i].v;\n      if(!b[v]){\n       dep[v]=dep[u]+1;\n       fa[v][0]=u;\n       b[v]=1;\n       ++out[u];\n       q.push(v);\n      }\n    }\n  }\n}\n//bfs\u627e\u7236\u4eb2\u548c\u5efa\u6df1\u5ea6\nvoid lca(){\n For(i,1,20)\n  For(j,1,n)\n  fa[j][i]=fa[fa[j][i-1]][i-1];\n}\nvoid cf(){\n For(i,1,n)\n  if(!out[i])q.push(i);\n   while(!q.empty()){\n    Int u=q.front();q.pop();\n    s[u]+=c[u];\n     --out[fa[u][0]];\n     s[fa[u][0]]+=s[u];\n     if(!out[fa[u][0]])q.push(fa[u][0]);\n   }\n}\n//\u62d3\u6251\u5e8f\nint main(){\n  read(n);\n  For(i,1,n)read(a[i]);\n  Int u,v,w;\n  For(i,1,n-1)read(u),read(v),add(u,v),add(v,u);\n  bfs();lca();\n  For(i,1,n-1){\n   Int u=a[i],v=a[i+1],lcf;\n    if(dep[u]<dep[v])swap(u,v);\n     DFor(j,20,0)\n\t  if(dep[fa[u][j]]>=dep[v]) u=fa[u][j];\n     if(u!=v){\n      DFor(j,20,0){\n       if(fa[u][j]==fa[v][j])continue;\n       u=fa[u][j],v=fa[v][j];\n      }\n      lcf=fa[u][0];\n     }\n     else lcf=u;\n     ++c[a[i]];--c[fa[lcf][0]];++c[a[i+1]];--c[lcf];\n  }\n  cf();\n   For(i,2,n)--s[a[i]];\n   For(i,1,n)printf(\"%d\\n\",s[i]);\n return 0;\n}\n ```",
        "postTime": 1520083661,
        "uid": 7118,
        "name": "NOILinux_Ubuntu",
        "ccfLevel": 6,
        "title": "\u677e\u9f20\u7684\u65b0\u5bb6"
    }
]