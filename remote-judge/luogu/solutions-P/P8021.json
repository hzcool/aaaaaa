[
    {
        "content": "\u6211\u4eec\u8003\u8651\u8fd9\u6837\u60f3\uff1a\n\n\u5047\u5982\u5546\u5e97\u6bcf\u4e2a\u957f\u5ea6\u4e3a 1 \u7684\u65f6\u95f4\u6bb5\u5185\u53ea\u80fd\u591f\u88ab\u62a2\u52ab\u4e00\u6b21\uff0c\u90a3\u4e48\u4f60\u5c31\u53ea\u9700\u8981\u7ad9\u5728\u5546\u5e97\u95e8\u53e3\u76ef\u7740\u5c31\u53ef\u4ee5\u4e86\uff0c\u800c\u628a\u95ee\u9898\u629b\u7ed9\u4e86\u5f3a\u76d7\u4eec\u53bb\u89e3\u51b3\u4e86\u2014\u2014\u800c\u5f3a\u76d7\u4eec\u7684\u95ee\u9898\u662f\uff0c\u5982\u4f55\u89c4\u5212\u62a2\u52ab\u65f6\u95f4\u624d\u80fd\u4f7f\u88ab\u62a2\u52ab\u7684\u8d22\u7269\u4ef7\u503c\u603b\u548c\u6700\u5927\u3002\n\n\u5bf9\u4e8e\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u5e26\u6743\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u7136\u540e\u5c31\u8f6c\u5316\u6210\u4e3a\u4e86\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u95ee\u9898\u3002\n\n\u6211\u4eec\u5c06\u6bcf\u4e00\u4e2a\u5f3a\u76d7\u548c\u6bcf\u4e00\u4e2a\u957f\u5ea6\u4e3a 1 \u7684\u65f6\u95f4\u6bb5\u90fd\u8bbe\u4e3a\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u8ba9\u6bcf\u4e00\u4e2a\u5f3a\u76d7\u5411\u5176\u53ef\u4ee5\u62a2\u52ab\u7684\u65f6\u95f4\u6bb5\u533a\u95f4\u5185\u7684\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6bb5\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a 1\u3001\u8d39\u7528\u4e3a $c_i$ \u7684\u8fb9\u3002\n\u7136\u540e\u6bcf\u4e00\u4e2a\u5f3a\u76d7\u5411\u6e90\u70b9\u8fde\u8fb9\uff0c\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6bb5\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u8fd9\u4e24\u6b21\u8fde\u8fb9\u90fd\u662f\u5bb9\u91cf\u4e3a 1\u3001\u8d39\u7528\u4e3a 0\u3002\n\n\u7136\u540e\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u8fd9\u6837\u8fde\u8fb9\u7684\u8bdd\u8fb9\u7684\u6570\u91cf\u662f $O(n^2)$ \u7ea7\u522b\u7684\uff0c\u65e0\u6cd5\u8fbe\u5230\u6211\u4eec\u7684\u8981\u6c42\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u5f15\u5165\u4e86\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u8fd9\u6837\u4e00\u79cd\u8282\u7ea6\u8fb9\u6570\u7684\u65b9\u5f0f\uff0c\u4f7f\u5f97\u8fb9\u7684\u6570\u91cf\u51cf\u5c0f\u4e3a $O(\\log{n})$ \u7ea7\u522b\u7684\u3002\n\n\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u7684\u5927\u610f\u5c31\u662f\u5c06\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4f5c\u4e3a\u4e00\u4e2a\u4e2d\u8f6c\u70b9\uff0c\u7531\u5176\u5411\u5176\u5b50\u8282\u70b9\u8fde\u8fb9\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u8fde\u8fb9\u3002\n\n\u6211\u4eec\u5efa\u7acb\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\uff0c\u4e0e\u6b63\u5e38\u60c5\u51b5\u4e0b\u5efa\u7acb\u7ebf\u6bb5\u6811\u7684\u65b9\u5f0f\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u4e0d\u9700\u8981\u7ef4\u62a4\u4efb\u4f55\u4fe1\u606f\uff0c\u53ea\u9700\u8981\u5c06\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u8fde\u5411\u6c47\u70b9\uff0c\u540c\u65f6\u5c06\u4e00\u4e2a\u8282\u70b9\u4e0e\u5176\u5de6\u53f3\u5b50\u8282\u70b9\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u8fde\u8fb9\u5373\u53ef\u3002\n\n\u8fd9\u9053\u9898\u91cc\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6bb5\u53ea\u80fd\u591f\u88ab\u62a2\u52ab\u4e00\u6b21\uff08\u4e0a\u9762\u8bf4\u4e86\uff09\uff0c\u6240\u4ee5\u4ee3\u8868\u5176\u7684\u70b9\u5411\u6c47\u70b9\u8fde\u7684\u8fb9\u5bb9\u91cf\u4e3a 1\u3001\u8d39\u7528\u4e3a 0\u3002\n\n\u4f46\u662f\u7ebf\u6bb5\u6811\u4e2d\u7236\u4eb2\u8282\u70b9\u5411\u5b50\u8282\u70b9\u8fde\u7684\u8fb9\u7684\u5bb9\u91cf\u5c31\u4e0d\u80fd\u662f 1 \u4e86\uff0c\u5fc5\u987b\u662f $+\\infty$ \u624d\u80fd\u4fdd\u8bc1\u5176\u8986\u76d6\u7684\u533a\u95f4\u90fd\u53ef\u4ee5\u88ab\u62a2\u52ab\u3002\n\n\u8fd9\u91cc\u5199\u7684\u65f6\u5019\u4e0d\u662f\u7279\u522b\u653e\u5fc3\uff0c\u5728\u7ed3\u6784\u4f53\u91cc\u9762\u5b58\u4e86\u4e00\u4e2a\u8282\u70b9\u7f16\u53f7\uff0c\u5176\u5b9e\u5728\u7ebf\u6bb5\u6811\u8282\u70b9\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u5b58\u3002\n\n``` cpp\nvoid build(int p, int l, int r)\n{\n\ttr[p].l = l, tr[p].r = r;\n\ttr[p].id = ++cnt;\n\tif(l == r)\n\t{\n\t\tadd(tr[p].id, T, 1, 0);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(p << 1, l, mid);\n\tbuild(p << 1 | 1, mid + 1, r);\n\tadd(tr[p].id, tr[p << 1].id, INF, 0);\n\tadd(tr[p].id, tr[p << 1 | 1].id, INF, 0);\n\treturn;\n}\n```\n\n\u7136\u540e\u5c31\u662f\u533a\u95f4\u8fde\u8fb9\u3002\n\n\u6211\u4eec\u5176\u5b9e\u53ea\u9700\u8981\u5411\u7ebf\u6bb5\u6811\u533a\u95f4\u52a0\u90a3\u6837\uff0c\u5411\u6bcf\u4e00\u4e2a\u6700\u957f\u7684\u5b8c\u5168\u88ab\u8986\u76d6\u7684\u533a\u95f4\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a 1\u3001\u8d39\u7528\u4e3a $c_i$ \u7684\u8fb9\u5373\u53ef\u3002\n\n``` cpp\nvoid seglnk(int p, int l, int r, int k)\n{\n\tif(tr[p].l >= l && tr[p].r <= r)\n\t{\n\t\tadd(k + 1, tr[p].id, 1, -c[k]);\n\t\treturn;\n\t}\n\tint mid = (tr[p].l + tr[p].r) >> 1;\n\tif(l <= mid)seglnk(p << 1, l, r, k);\n\tif(r > mid)seglnk(p << 1 | 1, l, r, k);\n\treturn;\n}\n```\n\n\u6700\u540e\u6ce8\u610f\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff1a\u7ebf\u6bb5\u6811\u5185\u7684\u53f6\u5b50\u7ed3\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u662f $[a,a]$\uff0c\u800c\u8fd9\u91cc\u8981\u6c42\u7684\u6700\u5c0f\u533a\u95f4\u662f $[a,a+1]$\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u53f3\u7aef\u70b9\u81ea\u51cf\u4e00\u6765\u66ff\u4ee3\u4e00\u4e0b\u3002\n\n\u6700\u540e\u653e\u603b\u7684\u4ee3\u7801\uff1a\n\n``` cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int N = 2000010, M = 2000010, INF = 1e8;\nint n, m, S, T;\nint a[N], b[N], c[N];\nint h[N], e[M], f[M], w[M], ne[M], idx;\nint q[N], d[N], pre[N], incf[N];\nbool st[N];\n\nvoid add(int a, int b, int c, int d)\n{\n\te[idx] = b, f[idx] = c, w[idx] = d, ne[idx] = h[a], h[a] = idx++;\n\te[idx] = a, f[idx] = 0, w[idx] = -d, ne[idx] = h[b], h[b] = idx++;\n}\n\nstruct SegTree\n{\n\tint l, r;\n\tint id;\n}tr[N << 3];\nint cnt;\n\nvoid build(int p, int l, int r)\n{\n\ttr[p].l = l, tr[p].r = r;\n\ttr[p].id = ++cnt;\n\tif(l == r)\n\t{\n\t\tadd(tr[p].id, T, 1, 0);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(p << 1, l, mid);\n\tbuild(p << 1 | 1, mid + 1, r);\n\tadd(tr[p].id, tr[p << 1].id, INF, 0);\n\tadd(tr[p].id, tr[p << 1 | 1].id, INF, 0);\n\treturn;\n}\nvoid seglnk(int p, int l, int r, int k)\n{\n\tif(tr[p].l >= l && tr[p].r <= r)\n\t{\n\t\tadd(k + 1, tr[p].id, 1, -c[k]);\n\t\treturn;\n\t}\n\tint mid = (tr[p].l + tr[p].r) >> 1;\n\tif(l <= mid)seglnk(p << 1, l, r, k);\n\tif(r > mid)seglnk(p << 1 | 1, l, r, k);\n\treturn;\n}\n\nbool spfa()\n{\n\tint hh = 0, tt = 1;\n\tmemset(d, 0x3f, sizeof(d));\n\tmemset(incf, 0, sizeof(incf));\n\tq[0] = S, d[S] = 0, incf[S] = INF;\n\twhile(hh != tt)\n\t{\n\t\tint t = q[hh++];\n\t\tif(hh == N) hh = 0;\n\t\tst[t] = false;\n\n\t\tfor(int i = h[t]; ~i; i = ne[i])\n\t\t{\n\t\t\tint ver = e[i];\n\t\t\tif(f[i] && d[ver] > d[t] + w[i])\n\t\t\t{\n\t\t\t\td[ver] = d[t] + w[i];\n\t\t\t\tpre[ver] = i;\n\t\t\t\tincf[ver] = min(f[i], incf[t]);\n\t\t\t\tif(!st[ver])\n\t\t\t\t{\n\t\t\t\t\tq[tt++] = ver;\n\t\t\t\t\tif(tt == N) tt = 0;\n\t\t\t\t\tst[ver] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn incf[T] > 0;\n}\n\nvoid EK(int &flow, int &cost)\n{\n\tflow = cost = 0;\n\twhile(spfa())\n\t{\n\t\tint t = incf[T];\n\t\tflow += t, cost += t * d[T];\n\t\tfor(int i = T; i != S; i = e[pre[i] ^ 1])\n\t\t{\n\t\t\tf[pre[i]] -= t;\n\t\t\tf[pre[i] ^ 1] += t;\n\t\t}\n\t}\n}\nint main()\n{\n\tmemset(h, -1, sizeof(h));\n\tscanf(\"%d\", &n);\n\tS = 0, T = 1;\n\tint maxn = 0;\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%d%d%d\", &a[i], &b[i], &c[i]);\n\t\tadd(S, i + 1, 1, 0);\n\t\tmaxn = max(maxn, b[i]);\n\t}\n\tcnt = n + 1;\n\tbuild(1, 1, maxn + 1);\n\tfor(int i = 1; i <= n; i++)\n\t\tseglnk(1, a[i], b[i] - 1, i);\n\tint flow, cost;\n\tEK(flow, cost);\n\tprintf(\"%d\\n\", -cost);\n\treturn 0;\n}\n```\n\n\u611f\u8c22\u9605\u8bfb~qwq\n\n",
        "postTime": 1653657517,
        "uid": 196903,
        "name": "\u5357\u9633\u5218\u5b50\u9aa5",
        "ccfLevel": 6,
        "title": "P8021 [ONTAK2015] Bajtman i Okr\u0105g\u0142y Robin \u9898\u89e3"
    },
    {
        "content": "## \u524d\u8a00\n\n\u8fd9\u9053\u9898\u975e\u5e38\u5361\u5e38\uff0c\u6ce8\u610f\u4f18\u5316\u5e38\u6570\uff01\n\n## \u89e3\u6cd5\n\n\u7b2c\u4e00\u773c\u770b\u4e0a\u53bb\uff0c\u611f\u89c9\u6709\u70b9\u6570\u636e\u7ed3\u6784\uff0c\u5f53\u7136\uff0c\u6b63\u89e3\u5176\u4e2d\u4e5f\u6709\u6570\u636e\u7ed3\u6784\u2014\u2014\u8d39\u7528\u6d41\u548c\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u3002\n\n### \u6734\u7d20\u306e\u5efa\u56fe\n\n\u5f15\u5165\u8d85\u7ea7\u6e90\u548c\u8d85\u7ea7\u6c47\uff0c\u6bcf\u4e2a\u65f6\u95f4\u70b9\u90fd\u5411\u6e90\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $ 1 $\uff0c\u8d39\u7528\u4e3a $  0 $ \u7684\u8fb9\uff0c\u6bcf\u4e2a\u5f3a\u76d7\u4e5f\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $ 1 $\uff0c\u8d39\u7528\u4e3a $0$ \u7684\u8fb9\u3002\u6700\u540e\u518d\u5c06\u65f6\u95f4\u6bb5\u548c\u7b2c $ i $ \u4e2a\u5f3a\u76d7\u4e4b\u95f4\u8fde\u63a5\u4e00\u6761\u6d41\u91cf\u4e3a $ 1 $,\u8d39\u7528\u4e3a $ c_i $ \u7684\u8fb9\uff0c\u8dd1\u4e00\u904d\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u3002\n\n### \u7ebf\u6bb5\u6811\u306e\u4f18\u5316\n\n\u4e0a\u9762\u5efa\u56fe\u7684\u65b9\u5f0f\u4f1a\u6709 $ n^2 $ \u6761\u8fb9\uff0c\u8dd1\u7f51\u7edc\u6d41\u76f4\u63a5\u8d77\u98de\uff0c\u4e8e\u662f\u6211\u4eec\u5fc5\u987b\u60f3\u4e00\u4e9b\u529e\u6cd5\u6765\u51cf\u5c11\u8fb9\u6570\u3002\n\n\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u6bcf\u4e2a\u65f6\u95f4\u70b9\uff0c\u53d8\u6210\u82e5\u5e72\u4e2a\u65f6\u95f4\u6bb5\uff0c\u518d\u548c\u5f3a\u76d7\u4eec\u8fde\u8fb9\uff0c\u8fd9\u6837\u8fb9\u6570\u76f4\u63a5\u4ece $ n^2 $ \u7f29\u51cf\u81f3 $ n \\times log {n}$\uff0c**\u51b2\uff01**\n\n## AC Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define INF 0x3f3f3f3f\nint n,m,s,t,S,T,N;\nconst int maxn=2e6+10;\ninline int read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile (ch<'0'||ch>'9'){if (ch=='-') f=-1;ch=getchar();}\n\twhile (ch>='0'&&ch<='9'){x=x*10+ch-48;ch=getchar();}\n\treturn x*f;\n}\nint to[maxn],cap[maxn],cost[maxn],nt[maxn],head[maxn],cnt=1;\nint dis[maxn],vis[maxn],pre[maxn],incf[maxn],mincost,maxflow;\ninline void addedge(int u,int v,int w,int c)\n{\n    to[++cnt]=v,cap[cnt]=w,cost[cnt]=c,nt[cnt]=head[u],head[u]=cnt;\n    to[++cnt]=u,cap[cnt]=0,cost[cnt]=-c,nt[cnt]=head[v],head[v]=cnt;\n}\ninline int spfa()\n{\n    queue <int> que;\n    for(int i=0;i<=t;++i)   dis[i]=INF,vis[i]=0;\n    que.push(s),incf[s]=INF,dis[s]=0,vis[s]=1;\n    while(!que.empty())\n    {\n        int u=que.front(),v;\n        que.pop(),vis[u]=0;\n        for(int i=head[u];i;i=nt[i])\n        {\n            v=to[i];\n            if(dis[v]<=dis[u]+cost[i]||!cap[i]) continue;\n            dis[v]=dis[u]+cost[i],incf[v]=min(incf[u],cap[i]),pre[v]=i;\n            if(!vis[v]) vis[v]=1,que.push(v);\n        }\n    }\n    return dis[t]<INF;\n}\ninline void mcmf()\n{\n    while(spfa())\n    {\n        int x=t,i;\n        maxflow+=incf[t];\n        mincost+=incf[t]*dis[t];\n        while(x!=s)\n        {\n            i=pre[x];\n            cap[i]-=incf[t],cap[i^1]+=incf[t];\n            x=to[i^1];\n        }\n    }\n}\n#define ls rt<<1\n#define rs rt<<1|1\n#define mid ((l+r)>>1)\nint co;\ninline void build(int rt,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\taddedge(s,rt,1,0);\n\t\tco=max(co,rt);\n\t\treturn ;\n\t}\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n\taddedge(ls,rt,mid-l+1,0);\n\taddedge(rs,rt,r-mid,0);\n}\ninline void update(int rt,int l,int r,int L,int R,int c,int x)\n{\n\tif(L<=l&&r<=R)\n\t{\n\t\taddedge(rt,x,1,-c);\n\t\treturn ;\n\t}\n\tif(L<=mid)\tupdate(ls,l,mid,L,R,c,x);\n\tif(mid<R)\tupdate(rs,mid+1,r,L,R,c,x);\n}\nstruct node\n{\n\tint a,b,c;\n}p[maxn];\nsigned main()\n{\n\tn=read(),s=0,t=30000;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tp[i].a=read(),p[i].b=read()-1,p[i].c=read();\n\t\tN=max(N,p[i].b);\n\t}\n\tbuild(1,1,N);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tupdate(1,1,N,p[i].a,p[i].b,p[i].c,co+i);\n\t\taddedge(co+i,t,1,0);\n\t}\n\tmcmf();\n\tprintf(\"%d\\n\",-mincost);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1644482286,
        "uid": 187081,
        "name": "jockbutt",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P8021 \u3010[ONTAK2015] Bajtman i Okr\u0105g\u0142y Robin\u3011"
    }
]