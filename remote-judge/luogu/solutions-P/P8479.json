[
    {
        "content": "# $\\mathscr{Description}$\r\n\r\n&emsp;&emsp;[Link](). (It's empty temporarily.)\r\n\r\n&emsp;&emsp;\u7ed9\u5b9a\u4e00\u68f5\u542b\u6709 $n$ \u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u70b9\u6709\u70b9\u6743\u3002\u73b0\u8fdb\u884c $q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5f62\u5982\uff1a\r\n\r\n0. **\u4fee\u6539\u64cd\u4f5c**&emsp;\u7ed9\u5b9a $u,v,k$\uff0c\u5bf9\u4e8e\u6240\u6709\u5728\u8def\u5f84 $(u,v)$ \u4e0a\uff0c\u6216\u8005\u5b58\u5728\u4e00\u4e2a\u90bb\u63a5\u70b9\u5728\u8def\u5f84 $(u,v)$ \u4e0a\u7684\u7ed3\u70b9 $w$\uff0c\u5c06\u5176\u70b9\u6743**\u53d8\u4e3a** $k$\u3002\r\n1. **\u8be2\u95ee\u64cd\u4f5c**&emsp;\u7ed9\u5b9a $u,v$\uff0c\u4ece $u$ \u51fa\u53d1\u6cbf\u6811\u8fb9\u8d70\u5411 $v$\uff0c\u8d70\u5230\u7ed3\u70b9 $w$ \u65f6\uff1a$a)$ \u5c06 $w$ \u7684\u70b9\u6743\u52a0\u5165\u961f\u5217 $S$\uff1b$b)$ \u6309\u6807\u53f7\u4ece\u5c0f\u5230\u5927\u679a\u4e3e $w$ \u7684\u90bb\u63a5\u70b9 $x$\uff0c\u82e5 $x$ **\u4e0d\u5728\u8def\u5f84\u4e0a**\uff0c\u5c06 $x$ \u7684\u70b9\u6743\u52a0\u5165\u961f\u5217 $S$\uff1b$c)$ \u6700\u540e\uff0c\u8d70\u5411\u8def\u5f84\u4e0a\u7684\u4e0b\u4e00\u4e2a\u70b9\u3002\u6c42\u51fa $S$ \u7684\u6700\u5927**\u53ef\u7a7a**\u5b50\u6bb5\u548c\u3002\r\n\r\n&emsp;&emsp;$n,q\\le10^5$\u3002\r\n\r\n# $\\mathscr{Solution}$\r\n\r\n## $\\mathscr{Subtasks}$\r\n\r\n&emsp;&emsp;**Subtask 1**&emsp;\u6309\u9898\u610f\u6a21\u62df\uff0c\u6ce8\u610f\u5f00 `long long`\uff0c\u5927\u5bb6\u5e94\u8be5\u90fd\u6709\u8fd9\u6863\u221a\r\n\r\n&emsp;&emsp;**Subtask 2**&emsp;\u7ebf\u6bb5\u6811\u677f\u9898\u3002\u53cd\u6b63\u6b63\u89e3\u4e5f\u8981\u6253\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u8fd9\u662f\u975e\u5e38\u5212\u7b97\u7684\u90e8\u5206\u5206\uff0c\u5e94\u8be5\u4e5f\u4e0d\u96be\u62ff\u53ed\u3002\r\n\r\n&emsp;&emsp;**Subtask 3**&emsp;\u5728\u6bcf\u4e2a\u7ed3\u70b9\u5904\u62ff\u4e00\u4e9b\u4e1c\u897f\uff08\u4f8b\u5982\u7ebf\u6bb5\u6811\uff09\u7ef4\u62a4\u513f\u5b50\uff0c\u5e94\u8be5\u5bf9\u6b63\u89e3\u6709\u4e9b\u8bb8\u542f\u53d1\uff1b\u5f53\u7136\uff0c\u4e5f\u80fd\u76f4\u63a5\u79bb\u7ebf\u5904\u7406\u3002\r\n\r\n&emsp;&emsp;**Subtask 4 & Subtask 5**&emsp;\u732e\u7ed9\u5dee\u4e0d\u591a\u60f3\u5230\u89e3\u6cd5\u4f46\u89c9\u5f97\u4fee\u6539 / \u8be2\u95ee\u64cd\u4f5c\u7279\u522b\u6bd2\u7624\u7684\u9009\u624b\uff0c\u5f53\u7136\u5982\u679c\u786e\u5b9e\u6709\u7279\u6b8a\u89e3\u6cd5\u4e5f\u662f\u597d\u4e8b awa\u3002\u7531\u4e8e\u8fd9\u4e24\u6863\u5df2\u7ecf\u5411\u6b63\u89e3\u9760\u62e2\u4e86\uff0c\u6240\u4ee5\u5206\u503c\u7ed9\u9ad8\u4e00\u4e9b w\u3002\r\n\r\n&emsp;&emsp;**Subtask 6**&emsp;\u76f8\u5f53\u4e8e\u8d4b\u503c\u4e0e\u6c42\u548c\u3002\u732e\u7ed9\u5927\u6982\u4f1a\u7ef4\u62a4\u4f46\u662f\u4e0d\u4f1a\u5904\u7406\u7ed3\u70b9\u987a\u5e8f~~\u6216\u8005\u61d2\u5f97\u5199\u5206\u8ba8~~\u7684\u9009\u624b\uff0c\u6709\u7279\u6b8a\u89e3\u6cd5\u2026\u2026\u4e5f\u662f\u597d\u4e8b\u3002\uff08\r\n\r\n&emsp;&emsp;**Subtask 7**&emsp;\u732e\u7ed9\u9ad8\u9ad8\u5174\u5174\u5199\u5b8c\u53d1\u73b0\u4e8b\u60c5\u5e76\u4e0d\u7b80\u5355\uff08\uff1f\uff09\u7684\u9009\u624b\uff08\u6bd4\u5982\u6211\uff09\uff0c\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u4e5f\u7b97\u6b63\u89e3\u5361\u5e38\u7684\u4fdd\u5e95\u6863\u3002\u62ff\u5230\u8fd9\u6863\u51e0\u4e4e\u5c31\u4f1a\u6b63\u89e3\u5566\u3002\r\n\r\n&emsp;&emsp;**Subtask 8**&emsp;\u732e\u7ed9\u6b63\u89e3\u3002\u606d\u559c\u62ff\u5230\u8fd9\u6863\u7684\u9009\u624b\uff01\u56e0\u4e3a\u81ea\u5df1\u7684\u4ee3\u7801\u5f88\u5197\u957f\uff0c\u4e5f\u60f3\u5b66\u4e60\u4e00\u4e0b\u5404\u4f4d\u7684\u5b9e\u73b0\u5462 www\u3002\r\n\r\n## $\\mathscr{Intro}$\r\n\r\n&emsp;&emsp;\u672c\u9898 idea \u6781\u5176\u6602\u8d35\uff0c\u5b83\u51fa\u81ea [\u300cNOI 2021\u300d\u8f7b\u91cd\u8fb9](https://www.luogu.com.cn/problem/P7735)\u3002\u5f53\u7136\u8fd9\u9053\u9898\u7684\u8bde\u751f\u610f\u5473\u8fd9\u6211\u5728 NOI 2021 \u6210\u4e3a\u4e86\u5c38\u4f53\u3002\uff08\r\n\r\n&emsp;&emsp;\u5148\u4ece[\u300cNOI 2021\u300d\u8f7b\u91cd\u8fb9](https://www.luogu.com.cn/problem/P7735) \u8fd9\u9053\u9898\u5165\u624b\u8ba8\u8bba\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u9898\u76ee\u62bd\u8c61\u4e3a\uff0c\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\r\n\r\n1. <u>\u6bdb\u6bdb\u866b</u>\u8d4b\u503c\uff1b\r\n2. \u8def\u5f84\u548c\u67e5\u8be2\u3002\r\n\r\n\u5176\u4e2d<u>\u6bdb\u6bdb\u866b</u>\u6b63\u5982\u672c\u9898\u4fee\u6539\u548c\u67e5\u8be2\u4e2d\u6d89\u53ca\u7684\u6811\u7ed3\u6784\u3002\u8fd9\u91cc\u7ed9\u51fa\u5f62\u5f0f\u5316\u5b9a\u4e49\uff1a\r\n\r\n&emsp;&emsp;<u>\u6bdb\u6bdb\u866b</u>\u662f\u4e00\u4e2a\u6811\u4e0a\u70b9\u96c6\uff0c\u7531\u4e00\u6761\u6811\u4e0a\u8def\u5f84 $P$ \u63cf\u8ff0\u3002\u6bdb\u6bdb\u866b $C$ \u8868\u793a\u8def\u5f84 $P$ \u4e2d\u7684\u4ee5\u53ca\u4e0e $P$ \u90bb\u63a5\u7684\u6240\u6709\u7ed3\u70b9\u6784\u6210\u7684\u70b9\u96c6\u3002\u6b64\u65f6\uff0c\u79f0 $P$ \u4e3a $C$ \u7684<u>\u866b\u8eab</u>\uff0c$C\\setminus P$ \u4e3a $C$ \u7684<u>\u866b\u8db3</u>\u3002\r\n\r\n&emsp;&emsp;\u81ea\u7136\u5730\uff0c\u6bdb\u6bdb\u866b\u548c\u8def\u5f84\u6709\u8bf8\u591a\u76f8\u4f3c\u4e4b\u5904\uff0c\u90a3\u4e48\u53ef\u4ee5\u60f3\u5230\u7528\u6811\u4e0a\u8def\u5f84\u7ef4\u62a4\u7684\u4e00\u8d2f\u505a\u6cd5\u2014\u2014\u6811\u94fe\u5256\u5206\u7ef4\u62a4\u6bdb\u6bdb\u866b\u3002\u53ef\u60dc\uff0c\u76f4\u63a5\u6811\u5256\u5168\u7136\u65e0\u4ece\u4e0b\u624b\u3002\u6240\u4ee5\uff0c\u6709\u4e00\u4e2a\u8822\u8d27\uff08\u7279\u6307\u6211\uff09\u5728\u8d5b\u573a\u4e0a\u78e8\u8e6d\u534a\u5929 DIY \u51fa\u4e86\u4e00\u4e2a\u201c\u6bdb\u6bdb\u866b\u5256\u5206\u201d\u3002\u5bf9\u4e8e\u60f3\u8981\u8fdb\u884c\u6bdb\u6bdb\u866b\u7ef4\u62a4\u7684\u6811\uff0c\u6bdb\u6bdb\u866b\u5256\u5206\u7528\u5982\u4e0b\u65b9\u5f0f\u5bf9\u5176\u91cd\u6807\u53f7\uff1a\r\n\r\n- \u9996\u5148\u91cd\u94fe\u5256\u5206\uff0c\u6c42\u51fa\u91cd\u94fe\u76f8\u5173\u4fe1\u606f\u3002\r\n\r\n- \u4ece\u6811\u6839\u5f00\u59cb\u9012\u5f52\u6807\u53f7\u3002\u82e5\u73b0\u5728\u9012\u5f52\u5230 $u$\uff1a\r\n    - \u82e5 $u$ \u672a\u88ab\u6807\u53f7\uff0c\u5219\u6309\u987a\u5e8f\u4e3a\u5176\u6807\u53f7\uff1b\r\n    - \u82e5 $u$ \u662f\u91cd\u94fe\u5934\uff0c\u904d\u5386\u8fd9\u6761\u91cd\u94fe\uff0c\u6309\u987a\u5e8f\u4e3a**\u4e0d\u5728\u91cd\u94fe\u4e0a\u4f46\u90bb\u63a5\u8fd9\u6761\u91cd\u94fe**\u7684\u7ed3\u70b9\u6807\u53f7\uff1b\r\n    - \u82e5 $u$ \u6709\u91cd\u513f\u5b50\uff0c\u5148\u9012\u5f52\u91cd\u513f\u5b50\uff1b\u6700\u540e\u9012\u5f52 $u$ \u7684\u5176\u4ed6\u513f\u5b50\u3002\r\n\r\n&emsp;&emsp;\u8003\u5bdf\u8fd9\u4e2a\u5999\u5999\u6807\u53f7\u65b9\u6cd5\u7684\u6027\u8d28\uff1a\r\n\r\n1. \u5bf9\u4e8e\u91cd\u94fe\uff0c**\u9664\u94fe\u5934\u5916**\uff0c\u7ed3\u70b9\u6807\u53f7\u8fde\u7eed\u3002\r\n\r\n2. \u5bf9\u4e8e\u4efb\u610f\u7ed3\u70b9\uff0c\u5b83\u7684\u8f7b\u513f\u5b50\u6807\u53f7\u8fde\u7eed\u3002\r\n\r\n3. \u5bf9\u4e8e\u91cd\u94fe\uff0c\u4e0d\u5728\u8fd9\u6761\u91cd\u94fe\u4f46\u4e0e\u5176\u90bb\u63a5\u7684\u7ed3\u70b9\u6807\u53f7\u8fde\u7eed\u3002\r\n\r\n&emsp;&emsp;\u53ef\u89c1\uff0c\u5229\u7528\u8fd9\u4e09\u4e2a\u6027\u8d28\uff0c\u6bdb\u6bdb\u866b\u5256\u5206\u80fd\u591f**\u540c\u65f6**\u652f\u6301\uff1a\r\n\r\n- \u6811\u4e0a\u8def\u5f84\u4fee\u6539 / \u67e5\u8be2\uff1b\r\n- \u6811\u4e0a\u6bdb\u6bdb\u866b\u4fee\u6539 / \u67e5\u8be2\uff1b\r\n- \u5b50\u6811\u4fee\u6539 / \u67e5\u8be2\u3002\r\n\r\n&emsp;&emsp;\u65f6\u95f4\u590d\u6742\u5ea6\u57fa\u4e8e\u6807\u53f7\u540e\u9009\u7528\u7684\u6570\u636e\u7ef4\u62a4\u65b9\u6cd5\uff0c\u603b\u7684\u6765\u8bf4\uff0c**\u8be5\u65b9\u6cd5\u4e0d\u5f31\u4e8e\u4f20\u7edf\u7684\u91cd\u94fe\u5256\u5206**\u3002\u5f53\u7136\uff0c\u6807\u53f7\u590d\u6742\u7684\u4ee3\u4ef7\u662f\u5e38\u6570\u56e0\u5b50\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u7b97\u6cd5\u786e\u5b9e\u662f\u80fd\u591f\u901a\u8fc7 NOI \u90a3\u9898\u7684\u3002\r\n\r\n## $\\mathscr{Body}$\r\n\r\n&emsp;&emsp;~~\u4ec0\u4e48\u9b3c\u6807\u9898\u554a\u8fd9\u662f\uff0c\u4e0d\u80fd\u7528\u5206\u5272\u7ebf\u5417\u3002~~\r\n\r\n&emsp;&emsp;\u7528\u4e0a\u6587\u7684\u6bdb\u6bdb\u866b\u5256\u5206\uff0c\u6211\u4eec\u4f3c\u4e4e\u80fd\u591f\u8f7b\u677e\u89e3\u51b3\u8fd9\u9053\u9898\u5566\uff1f\r\n\r\n&emsp;&emsp;\u53ef\u60dc\uff0c\u8fd9\u79cd\u5256\u5206\u65b9\u6cd5\u5c06\u6bdb\u6bdb\u866b\u7684\u7ed3\u6784**\u4e71\u5e8f\u5316**\uff0c\u6211\u4eec\u5c31\u7b97\u53ef\u4ee5\u5206\u522b\u5f97\u5230\u866b\u8eab\u548c\u866b\u8db3\u7684**\u70b9\u96c6**\uff0c\u5374\u65e0\u6cd5\u7528\u540c\u6837\u4f18\u79c0\u7684\u65f6\u95f4\u53bb\u7ef4\u62a4\u6216\u4fee\u6539\u987a\u5e8f\u8bbf\u95ee\u6bdb\u6bdb\u866b\u5f97\u5230\u7684**\u5e8f\u5217**\u3002\r\n\r\n&emsp;&emsp;\u53d7\u4e0a\u6587\u201c\u6bdb\u6bdb\u866b\u5256\u5206 1.0\u201d\u7684\u542f\u53d1\uff0c\u6211\u4eec\u7acb\u9a6c\u5f04\u4e00\u4e2a\u201c\u6bdb\u6bdb\u866b\u5256\u5206 2.0\u201d\u7684\u91cd\u6807\u53f7\u65b9\u6cd5\uff1a\r\n\r\n- \u9996\u5148\u91cd\u94fe\u5256\u5206\uff0c\u6c42\u51fa\u91cd\u94fe\u76f8\u5173\u4fe1\u606f\u3002\r\n- **\u5148\u4e3a\u6811\u6839\u6807\u53f7**\uff0c\u7136\u540e\u4ece\u6811\u6839\u5f00\u59cb\u9012\u5f52\u6807\u53f7\u3002\u82e5\u73b0\u5728\u9012\u5f52\u5230\u7ed3\u70b9 $u$\uff1a\r\n    - \u82e5 $u$ \u662f\u91cd\u94fe\u5934\uff0c\u4ece $u$ \u51fa\u53d1\u904d\u5386\u8fd9\u6761\u91cd\u94fe\uff0c\u82e5\u73b0\u5728\u8d70\u5230\u7ed3\u70b9 $v$\uff1a\r\n        - \u82e5 $v$ \u4e0d\u662f\u91cd\u94fe\u5934\uff0c\u4e3a\u5b83\u6807\u53f7\uff1b\r\n        - **\u987a\u5e8f\u904d\u5386** $v$ \u7684**\u8f7b\u513f\u5b50**\uff0c\u4e3a\u5b83\u4eec\u6807\u53f7\uff1b\r\n        - \u82e5 $v$ \u8fd8\u6709\u91cd\u513f\u5b50\uff0c\u5219\u7ee7\u7eed\u5411\u91cd\u513f\u5b50\u904d\u5386\u3002\r\n    - \u5ffd\u7565\u8fd9\u6761\u91cd\u94fe\uff0c\u76f4\u63a5\u4ee5\u4efb\u610f\u987a\u5e8f\u9012\u5f52\u6240\u6709\u90bb\u63a5\u4e8e\u91cd\u94fe\u7684\u7ed3\u70b9\u3002\r\n\r\n&emsp;&emsp;\u53ef\u89c1\uff0c\u6bdb\u6bdb\u866b\u5256\u5206 2.0 **\u65e0\u6cd5\u652f\u6301**\u8def\u5f84\u4fee\u6539 / \u8bbf\u95ee\uff0c\u4f46\u5374\u652f\u6301**\u987a\u5e8f\u4fee\u6539 / \u8bbf\u95ee**\u6bdb\u6bdb\u866b\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u91cd\u6807\u53f7\u540e\u5e8f\u5217\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u7136\u540e\u722c\u91cd\u94fe\u8fdb\u884c\u4fee\u6539\u548c\u8be2\u95ee\u3002\r\n\r\n---\r\n\r\n&emsp;&emsp;\u60f3\u4e00\u60f3\u5bf9\u4e8e\u4e00\u6761\u5782\u76f4\u7684\u94fe\uff08\u7aef\u70b9\u5b58\u5728\u7956\u5148-\u540e\u4ee3\u5173\u7cfb\uff09\u5728\u8fd9\u79cd\u6807\u53f7\u65b9\u6cd5\u4e0b\u5f97\u5230\u7684\u5e8f\u5217\u4fe1\u606f\u662f\uff1a**\u4ece\u4e0a\u5230\u4e0b**\u904d\u5386\u94fe\uff0c**\u5148\u52a0\u5165**\u94fe\u4e0a\u7ed3\u70b9\uff0c\u7136\u540e**\u987a\u5e8f\u52a0\u5165**\u94fe\u5916\u513f\u5b50\u3002\u8fd9\u5bf9\u5e94\u4e86 **subtask 7** \u7684 $20$ \u5206\u3002\r\n\r\n&emsp;&emsp;\u4f46\u662f\uff01\u4e8b\u60c5\u786e\u5b9e\u5e76\u4e0d\u7b80\u5355\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u505a\u6811\u5256\u8be2\u95ee\u9700\u8981\u4e24\u4e2a\u8def\u5f84\u7aef\u70b9\u5404\u81ea\u722c\u5230 LCA\uff0c\u7136\u540e**\u5c06\u5176\u4e2d\u4e00\u4e2a\u7ed3\u70b9\u722c\u5230\u7684\u7b54\u6848\u53cd\u5e8f**\uff0c\u6700\u540e\u5c06\u4e24\u4e2a\u7b54\u6848\u62fc\u5728\u4e00\u8d77\u3002\u800c\u8fd9\u79cd\u7f16\u53f7\u65b9\u6cd5\u53cd\u5e8f\u7684\u7ed3\u679c\u662f\uff1a**\u4ece\u4e0b\u5230\u4e0a**\u904d\u5386\u94fe\uff0c**\u5148\u9006\u5e8f\u52a0\u5165**\u94fe\u5916\u513f\u5b50\uff0c**\u540e\u52a0\u5165**\u94fe\u4e0a\u7ed3\u70b9\uff0c\u8fd9\u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42\u7684\u987a\u5e8f\uff01\r\n\r\n&emsp;&emsp;\u56e0\u6b64\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8bbe\u8ba1\u4e00\u4e2a\u4e0e\u201c\u6bdb\u6bdb\u866b\u5256\u5206 2.0\u201d\u5bf9\u5e94\u7684\u201c\u6bdb\u6bdb\u866b\u5256\u5206 2.1\u201d\uff1a\r\n\r\n- \u9996\u5148\u91cd\u94fe\u5256\u5206\uff0c\u6c42\u51fa\u91cd\u94fe\u76f8\u5173\u4fe1\u606f\u3002\r\n- **\u5148\u4e3a\u6811\u6839\u6807\u53f7**\uff0c\u7136\u540e\u4ece\u6811\u6839\u5f00\u59cb\u9012\u5f52\u6807\u53f7\u3002\u82e5\u73b0\u5728\u9012\u5f52\u5230\u7ed3\u70b9 $u$\uff1a\r\n    - \u82e5 $u$ \u662f\u91cd\u94fe\u5934\uff0c\u4ece $u$ \u51fa\u53d1\u904d\u5386\u8fd9\u6761\u91cd\u94fe\uff0c\u82e5\u73b0\u5728\u8d70\u5230\u7ed3\u70b9 $v$\uff1a\r\n        - **\u9006\u5e8f\u904d\u5386** $v$ \u7684**\u8f7b\u513f\u5b50**\uff0c\u4e3a\u5b83\u4eec\u6807\u53f7\uff1b\r\n        - \u82e5 $v$ \u4e0d\u662f\u91cd\u94fe\u5934\uff0c\u4e3a\u5b83\u6807\u53f7\uff1b\r\n        - \u82e5 $v$ \u8fd8\u6709\u91cd\u513f\u5b50\uff0c\u5219\u7ee7\u7eed\u5411\u91cd\u513f\u5b50\u904d\u5386\u3002\r\n    - \u5ffd\u7565\u8fd9\u6761\u91cd\u94fe\uff0c\u76f4\u63a5\u4ee5\u4efb\u610f\u987a\u5e8f\u9012\u5f52\u6240\u6709\u90bb\u63a5\u4e8e\u91cd\u94fe\u7684\u7ed3\u70b9\u3002\r\n\r\n&emsp;&emsp;\u5728\u201c\u6bdb\u6bdb\u866b\u5256\u5206 2.1\u201d\u4e0b\uff0c\u8be2\u95ee\u5782\u76f4\u6811\u94fe\u5f97\u5230\u7684\u5e8f\u5217\u4fe1\u606f\u662f\uff1a**\u4ece\u4e0a\u5230\u4e0b**\u904d\u5386\u94fe\uff0c**\u5148\u9006\u5e8f\u52a0\u5165**\u94fe\u5916\u513f\u5b50\uff0c**\u540e\u52a0\u5165**\u94fe\u4e0a\u7ed3\u70b9\u3002\u53cd\u5e8f\u5f97\u5230\uff1a**\u4ece\u4e0b\u5230\u4e0a**\u904d\u5386\u94fe\uff0c**\u5148\u52a0\u5165**\u94fe\u4e0a\u7ed3\u70b9\uff0c**\u540e\u987a\u5e8f\u52a0\u5165**\u94fe\u5916\u513f\u5b50\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u624d\u80fd\u7528\u8fd9\u4e00\u4fe1\u606f\u4e0e\u53e6\u4e00\u6761\u94fe\u5408\u5e76\u3002\r\n\r\n&emsp;&emsp;\u6982\u62ec\u5730\u8bb2\uff0c\u6807\u7b97\u4e3a\uff1a\u7528\u4e24\u79cd\u6807\u53f7\u65b9\u6cd5\u5bf9\u6811\u91cd\u6807\u53f7\uff0c\u7528\u7ebf\u6bb5\u6811\u5206\u522b\u7ef4\u62a4\u5e8f\u5217\u6700\u5927\u5b50\u6bb5\u548c\u3002\u590d\u6742\u5ea6\u4e3a $\\mathcal O(q\\log^2 n)$\u3002\u8fd8\u6709\u4e00\u5927\u96be\u70b9\u662f\u7ec6\u8282\uff0c\u4f8b\u5982\u91cd\u94fe\u5934\u4e0e\u91cd\u94fe\u5934\u7684\u513f\u5b50\u4eec\u7684\u5148\u540e\u987a\u5e8f\uff1bLCA \u5904\u5220\u53bb\u4e24\u4e2a\u8f7b\u513f\u5b50\u8d21\u732e\uff0c\u52a0\u5165 LCA \u7956\u5148\u548c LCA \u91cd\u513f\u5b50\u8d21\u732e\u7684\u987a\u5e8f\u2026\u2026\u96be\u4ee5\u4e00\u4e00\u7f57\u5217\uff0c\u5177\u4f53\u53ef\u89c1\u4ee3\u7801\u4e2d\u7684\u5904\u7406\u65b9\u6cd5\u3002\r\n\r\n---\r\n\r\n&emsp;&emsp;\u672c\u6765\u60f3\u52a0\u4e0a\u4f46\u662f\u5bb3\u6015\u88ab\u7fa4\u6bb4\uff0c\u6240\u4ee5\u5199\u5728\u9898\u89e3\u91cc\u7684 hard version\uff1a\u8ffd\u52a0\u4e24\u79cd\u64cd\u4f5c\uff1a\r\n\r\n0. **\u4fee\u6539\u64cd\u4f5c**&emsp;\u2026\u2026\r\n1. **\u8be2\u95ee\u64cd\u4f5c**&emsp;\u2026\u2026\r\n\r\n2. **\u94fe\u8be2\u95ee\u64cd\u4f5c**&emsp;\u7ed9\u5b9a $u,v$\uff0c\u8be2\u95ee\u8def\u5f84 $(u,v)$ \u4e0a\u70b9\u6743\u5e8f\u5217\u7684\u6700\u5927\u5b50\u6bb5\u548c\u3002\uff08\u9700\u989d\u5916\u7ef4\u62a4\u201c\u6bdb\u6bdb\u866b\u5256\u5206 1.0\u201d\u3002\uff09\r\n3. **\u4f18\u5148\u7ea7\u4fee\u6539\u64cd\u4f5c**&emsp;\u6bcf\u4e2a\u70b9 $u$ \u521d\u59cb\u6709\u4f18\u5148\u7ea7 $r_u=u$\uff0c\u8be2\u95ee\u64cd\u4f5c\u4e2d\u904d\u5386\u513f\u5b50\u65f6\uff0c\u4ee5\u4f18\u5148\u7ea7\u5347\u5e8f\u904d\u5386\u3002\u7ed9\u5b9a $u,v$\uff0c\u4ea4\u6362 $r_u,r_v$\u3002\uff08\u5e73\u8861\u6811\u7ef4\u62a4\u5e8f\u5217\uff0c\u533a\u95f4\u4f4d\u79fb\uff0c\u7a76\u6781\u5206\u8ba8\u3002\uff09\r\n\r\n&emsp;&emsp;\u8fd8\u662f $\\mathcal O(q\\log^2 n)$\uff0c\u53cd\u6b63\u6211\u4e0d\u60f3\u5199 qwq\u3002\r\n\r\n## $\\mathscr{Code}$\r\n\r\n```cpp\r\n/*+Rainybunny+*/\r\n\r\n#include <bits/stdc++.h>\r\n\r\n#define rep(i, l, r) for (int i = l, rep##i = r; i <= rep##i; ++i)\r\n#define per(i, r, l) for (int i = r, per##i = l; i >= per##i; --i)\r\n\r\ntypedef long long LL;\r\n#define fi first\r\n#define se second\r\n\r\ninline char fgc() {\r\n    static char buf[1 << 17], *p = buf, *q = buf;\r\n    return p == q && (q = buf + fread(p = buf, 1, 1 << 17, stdin), p == q) ?\r\n      EOF : *p++;\r\n}\r\n\r\ntemplate <typename Tp = int>\r\ninline Tp rint() {\r\n    Tp x = 0, s = fgc(), f = 1;\r\n    for (; s < '0' || '9' < s; s = fgc()) f = s == '-' ? -f : f;\r\n    for (; '0' <= s && s <= '9'; s = fgc()) x = x * 10 + (s ^ '0');\r\n    return x * f;\r\n}\r\n\r\ntemplate <typename Tp>\r\ninline void wint(Tp x) {\r\n    if (x < 0) putchar('-'), x = -x;\r\n    if (9 < x) wint(x / 10);\r\n    putchar(x % 10 ^ '0');\r\n}\r\n\r\ntemplate <typename Tp>\r\ninline Tp imin(const Tp& u, const Tp& v) { return u < v ? u : v; }\r\ntemplate <typename Tp>\r\ninline Tp imax(const Tp& u, const Tp& v) { return u < v ? v : u; }\r\n\r\nconst int MAXN = 1e5, IINF = 0x3f3f3f3f;\r\nint n, ecnt, fa[MAXN + 5], val[MAXN + 5], head[MAXN + 5];\r\nint dep[MAXN + 5], siz[MAXN + 5], son[MAXN + 5];\r\nstd::vector<int> adj[MAXN + 5];\r\n\r\nint dfc[2], dfn[MAXN + 5][2], top[MAXN + 5], ref[MAXN + 5][2];\r\nint clef[MAXN + 5][2], crig[MAXN + 5][2];\r\nint spos[MAXN + 5][2];\r\n\r\nstruct Atom {\r\n    LL sum, lmx, rmx, amx;\r\n    inline Atom rev() const { return { sum, rmx, lmx, amx }; }\r\n    inline Atom operator + (const Atom& t) const {\r\n        return { sum + t.sum, imax(lmx, sum + t.lmx),\r\n          imax(rmx + t.sum, t.rmx), imax(imax(amx, t.amx), rmx + t.lmx) };\r\n    }\r\n    inline Atom& operator *= (const Atom& t) { return *this = *this + t; }\r\n    inline Atom& operator += (const Atom& t) { return *this = t + *this; }\r\n};\r\n\r\nstruct SegmentTree {\r\n    Atom uni[MAXN << 2];\r\n    int len[MAXN << 2], tag[MAXN << 2];\r\n\r\n    inline void pushup(const int u) {\r\n        uni[u] = uni[u << 1] + uni[u << 1 | 1];\r\n    }\r\n\r\n    inline void build(const int u, const int l, const int r, const int id) {\r\n        len[u] = r - l + 1, tag[u] = IINF;\r\n        if (l == r) {\r\n            uni[u].sum = val[ref[l][id]];\r\n            uni[u].lmx = uni[u].rmx = uni[u].amx = imax(0, val[ref[l][id]]);\r\n            return ;\r\n        }\r\n        int mid = l + r >> 1;\r\n        build(u << 1, l, mid, id), build(u << 1 | 1, mid + 1, r, id);\r\n        pushup(u);\r\n    }\r\n\r\n    inline void pushas(const int u, const int v) {\r\n        tag[u] = v, uni[u].sum = 1ll * len[u] * v;\r\n        uni[u].lmx = uni[u].rmx = uni[u].amx = imax(0ll, uni[u].sum);\r\n    }\r\n\r\n    inline void pushdn(const int u) {\r\n        if (tag[u] != IINF) {\r\n            pushas(u << 1, tag[u]), pushas(u << 1 | 1, tag[u]);\r\n            tag[u] = IINF;\r\n        }\r\n    }\r\n\r\n    inline void assign(const int u, const int l, const int r,\r\n      const int al, const int ar, const int k) {\r\n        if (al > ar) return ;\r\n        if (al <= l && r <= ar) return pushas(u, k);\r\n        int mid = l + r >> 1; pushdn(u);\r\n        if (al <= mid) assign(u << 1, l, mid, al, ar, k);\r\n        if (mid < ar) assign(u << 1 | 1, mid + 1, r, al, ar, k);\r\n        pushup(u);\r\n    }\r\n\r\n    inline Atom query(const int u, const int l, const int r,\r\n      const int ql, const int qr) {\r\n        if (ql > qr) return { 0, 0, 0, 0 };\r\n        if (ql <= l && r <= qr) return uni[u];\r\n        int mid = l + r >> 1; pushdn(u);\r\n        if (qr <= mid) return query(u << 1, l, mid, ql, qr);\r\n        if (mid < ql) return query(u << 1 | 1, mid + 1, r, ql, qr);\r\n        return query(u << 1, l, mid, ql, qr)\r\n          + query(u << 1 | 1, mid + 1, r, ql, qr);\r\n    }\r\n} sgt[2];\r\n\r\ninline void init(const int u) {\r\n    siz[u] = 1, dep[u] = dep[fa[u]] + 1;\r\n    for (int v: adj[u]) {\r\n        init(v), siz[u] += siz[v];\r\n        if (siz[v] > siz[son[u]]) son[u] = v;\r\n    }\r\n}\r\n\r\ninline void retopF(const int u) {\r\n    clef[u][0] = dfc[0] + 1;\r\n    if (!top[u]) dfn[u][0] = ++dfc[0];\r\n    for (int v: adj[u]) {\r\n        if (v == son[u]) spos[u][0] = dfc[0];\r\n        else dfn[v][0] = ++dfc[0];\r\n    }\r\n    crig[u][0] = dfc[0];\r\n    if (son[u]) retopF(son[u]);\r\n}\r\n\r\ninline void retopR(const int u) {\r\n    clef[u][1] = dfc[1] + 1;\r\n    for (int i = int(adj[u].size()) - 1, v; ~i; --i) {\r\n        if ((v = adj[u][i]) == son[u]) spos[u][1] = dfc[1];\r\n        else dfn[v][1] = ++dfc[1];\r\n    }\r\n    if (!top[u]) dfn[u][1] = ++dfc[1];\r\n    crig[u][1] = dfc[1];\r\n    if (son[u]) retopR(son[u]);\r\n}\r\n\r\ninline void renum(const int u, const int tp) {\r\n    top[u] = tp;\r\n    if (u == tp) retopF(u), retopR(u);\r\n    if (son[u]) renum(son[u], tp);\r\n    for (int v: adj[u]) if (v != son[u]) renum(v, v);\r\n}\r\n\r\ninline int lca(int u, int v) {\r\n    while (top[u] != top[v]) {\r\n        if (dep[top[u]] < dep[top[v]]) v = fa[top[v]];\r\n        else u = fa[top[u]];\r\n    }\r\n    return dep[u] < dep[v] ? u : v;\r\n}\r\n\r\ninline void assign(int u, int v, const int k, const int id) {\r\n    while (top[u] != top[v]) {\r\n        if (dep[top[u]] < dep[top[v]]) u ^= v ^= u ^= v;\r\n        sgt[id].assign(1, 1, n, clef[top[u]][id], crig[u][id], k);\r\n        if (son[u]) {\r\n            sgt[id].assign(1, 1, n, dfn[son[u]][id], dfn[son[u]][id], k);\r\n        }\r\n        u = top[u];\r\n        sgt[id].assign(1, 1, n, dfn[u][id], dfn[u][id], k);\r\n        u = fa[u];\r\n    }\r\n    if (dep[u] < dep[v]) u ^= v ^= u ^= v;\r\n    sgt[id].assign(1, 1, n, clef[v][id], crig[u][id], k);\r\n    if (son[u]) sgt[id].assign(1, 1, n, dfn[son[u]][id], dfn[son[u]][id], k);\r\n    if (v == top[v]) sgt[id].assign(1, 1, n, dfn[v][id], dfn[v][id], k);\r\n    if (fa[v]) sgt[id].assign(1, 1, n, dfn[fa[v]][id], dfn[fa[v]][id], k);\r\n}\r\n\r\ninline void append(Atom& res, const int u, const int p, const int id) {\r\n    int l = clef[u][id];\r\n    if (dfn[p][id] < spos[u][id]) {\r\n        res += sgt[id].query(1, 1, n, spos[u][id] + 1, crig[u][id]);\r\n        res += sgt[id].query(1, 1, n, dfn[son[u]][id], dfn[son[u]][id]);\r\n        res += sgt[id].query(1, 1, n, imax(dfn[p][id] + 1, l), spos[u][id]);\r\n        res += sgt[id].query(1, 1, n, l, dfn[p][id] - 1);\r\n    } else {\r\n        res += sgt[id].query(1, 1, n, imax(dfn[p][id] + 1, l), crig[u][id]);\r\n        res += sgt[id].query(1, 1, n, imax(spos[u][id] + 1, l), dfn[p][id] -1);\r\n        if (son[u])\r\n            res += sgt[id].query(1, 1, n, dfn[son[u]][id], dfn[son[u]][id]);\r\n        res += sgt[id].query(1, 1, n, l, imin(spos[u][id], dfn[p][id] - 1));\r\n    }\r\n}\r\n\r\ninline std::pair<Atom, int> climb(int u, const int tar, const int id) {\r\n    Atom ret = { 0, 0, 0, 0 }; int p = 0;\r\n    while (top[u] != top[tar]) {\r\n        if (u != top[u]) {\r\n            append(ret, u, p, id);\r\n            ret += sgt[id].query(1, 1, n,\r\n              crig[top[u]][id] + 1, clef[u][id] - 1);\r\n            u = top[u];\r\n            if (!id) {\r\n                ret += sgt[0].query(1, 1, n, clef[u][0], crig[u][0]);\r\n                ret += sgt[0].query(1, 1, n, dfn[u][0], dfn[u][0]);\r\n            } else {\r\n                ret += sgt[1].query(1, 1, n, dfn[u][1], dfn[u][1]);\r\n                ret += sgt[1].query(1, 1, n, clef[u][1], crig[u][1]);\r\n            }\r\n        } else if (!id) {\r\n            append(ret, u, p, 0);\r\n            ret += sgt[0].query(1, 1, n, dfn[u][0], dfn[u][0]);\r\n        } else {\r\n            ret += sgt[1].query(1, 1, n, dfn[u][1], dfn[u][1]);\r\n            append(ret, u, p, 1);\r\n        }\r\n        u = fa[p = u];\r\n    }\r\n    if (u != tar) {\r\n        append(ret, u, p, id);\r\n        ret += sgt[id].query(1, 1, n, clef[p = son[tar]][id], clef[u][id] - 1);\r\n    }\r\n    return { ret, p };\r\n}\r\n\r\ninline LL query(const int u, const int v) {\r\n    int w = lca(u, v);\r\n    auto su(climb(u, w, 1)), sv(climb(v, w, 0));\r\n    auto ret(su.fi.rev());\r\n    ret *= sgt[0].query(1, 1, n, dfn[w][0], dfn[w][0]);\r\n    if (fa[w]) ret *= sgt[0].query(1, 1, n, dfn[fa[w]][0], dfn[fa[w]][0]);\r\n\r\n    std::vector<std::pair<int, int> > tmp;\r\n    if (su.se && su.se != son[w]) tmp.push_back({ dfn[su.se][0], 0 });\r\n    if (sv.se && sv.se != son[w]) tmp.push_back({ dfn[sv.se][0], 0 });\r\n    if (su.se != son[w] && sv.se != son[w]) tmp.push_back({ spos[w][0], 2 });\r\n    tmp.push_back({ crig[w][0], 1 });\r\n    std::sort(tmp.begin(), tmp.end());\r\n    \r\n    int las = clef[w][0] + (w != top[w]);\r\n    for (auto& p: tmp) {\r\n        ret *= sgt[0].query(1, 1, n, las, p.fi - !p.se);\r\n        if (p.fi == spos[w][0] && p.se == 2) {\r\n            ret = ret + sgt[0].query(1, 1, n, dfn[son[w]][0], dfn[son[w]][0]);\r\n        }\r\n        las = p.fi + 1;\r\n    }\r\n    ret *= sv.fi;\r\n    return ret.amx;\r\n}\r\n\r\nint main() {\r\n    rint(), n = rint();\r\n    rep (i, 1, n) val[i] = rint();\r\n    rep (i, 2, n) adj[fa[i] = rint()].push_back(i);\r\n\r\n    init(1);\r\n    dfn[1][0] = dfc[0] = dfn[1][1] = dfc[1] = 1;\r\n    renum(1, 1);\r\n    rep (i, 1, n) ref[dfn[i][0]][0] = ref[dfn[i][1]][1] = i;\r\n\r\n    sgt[0].build(1, 1, n, 0), sgt[1].build(1, 1, n, 1);\r\n    for (int q = rint(), op, u, v, k; q--;) {\r\n        op = rint(), u = rint(), v = rint();\r\n        if (!op) k = rint(), assign(u, v, k, 0), assign(u, v, k, 1);\r\n        else wint(query(u, v)), putchar('\\n');\r\n    }\r\n    return 0;\r\n}\r\n\r\n```\r\n\r\n## $\\mathscr{Details}$\r\n\r\n&emsp;&emsp;\u9644\u4e0a\u6570\u636e\u751f\u6210\u7ec6\u5219\uff1a\r\n\r\n```plain\r\n1. O(n^2) brute-force | 10pts\r\n    1.1. 10/10/10 (n=10/q=10/V=[-10,10])\r\n    1.2. 1000/999/100   | op=1\r\n    1.3. 999/1000/100   | only op[q]=1\r\n    1.4. 1000/999/1000  | u=v.\r\n    1.5. 1000/1000/1e9\r\n2. chain | 10pts\r\n    2.1. 1000/1000/1e9\r\n    2.2. 1e5/(1e5-1)/1e9    | when op=0, |u-v|<10\r\n    2.3. (1e5-1)/1e5/10     | when op=0, |u-v|<100\r\n    2.4. 1e5/1e5/1000\r\n    2.5. 1e5/1e5/1e9\r\n3. in all operations, u=v holds | 10pts\r\n    3.1. 1000/1000/1e9\r\n    3.2. 1e5/(1e5-1)/10     | fa<=10, u,v are generated in [1,10] with pr=0.5\r\n    3.3. (1e5-1)/1e5/100    | fa<=100, u,v are generated in [1,100] with pr=0.5\r\n    3.4. 1e5/1e5/1000       | fa=712, u,v=712 with pr=0.412\r\n    3.5. 1e5/1e5/1e9        | fa<=1e4\r\n4. no modification | 15pts\r\n    4.1. 1000/1000/1e9\r\n    4.2. 1e5/(1e5-1)/100    | fa<=1e4\r\n    4.3. (1e5-1)/1e5/1000   | fa<=1e4\r\n    4.4. 1e5/1e5/1e9        | fa[u] is in [u-9,u)\r\n    4.5. 1e5/1e5/100        | `fa[u] = u - 1 - (u & 1)`\r\n5. only one query operation | 15pts\r\n    5.1. 1000/1000/1e9\r\n    5.2. 1e5/(1e5-1)/10\r\n    5.3. (1e5-1)/1e5/100\r\n    5.4. 1e5/1e5/1000       | `fa[u] = u - 1 - (u & 1)`, |u-v|<100\r\n    5.5. 1e5/1e5/1e9\r\n6. v>=0 | 10pts\r\n    6.1. 1000/1000/1e9\r\n    6.2. 1e5/(1e5-1)/1e9\r\n    6.3. (1e5-1)/1e5/1e9\r\n    6.4. 1e5/1e5/1e9        | fa<=10\r\n    6.5. 1e5/1e5/1e9        | `fa[u] = u - 1 - (u & 1)`\r\n7. when op=1, node 1 considered as root, u is v's ancestor | 20pts\r\n    7.1. 1000/1000/1e9\r\n    7.2. 1e5/(1e5-1)/10     | fa=712, v=712 with pr=0.412\r\n    7.3. (1e5-1)/1e5/100    | `fa[u] = u - 1 - (u & 1)`, |u-v|<10 for op=0.\r\n    7.4. 1e5/1e5/1000       | fa<=100\r\n    7.5. 1e5/1e5/1e9        | fa[u] is in [u-127,u)\r\n8. completed solution | 10pts\r\n    8.1. 1000/1000/1e9\r\n    8.2. 1e5/(1e5-1)/10     | fa=712, u,v=712 with pr=0.412\r\n    8.3. (1e5-1)/1e5/100    | `fa[u] = u - 1 - (u & 1)`, |u-v|<10\r\n    8.4. 1e5/1e5/1000       | fa<=100\r\n    8.5. 1e5/1e5/1e9        | fa[u] is in [u-127,u)\r\n\r\n```\r\n\r\n&emsp;&emsp;\u82e5\u65e0\u7279\u6b8a\u8bf4\u660e\uff0c\u6811\u5f62\u7684\u751f\u6210\u65b9\u5f0f\u4e3a\u6bcf\u4e2a\u70b9\u968f\u673a\u9009\u7236\u4eb2\u3002\u53ef\u4ee5\u5bf9\u7740\u770b\u4e00\u770b\u81ea\u5df1\u4e3a\u4ec0\u4e48\u5f97\u5206 / \u6302\u5206\u3002\uff08",
        "postTime": 1644672238,
        "uid": 123807,
        "name": "Rainybunny",
        "ccfLevel": 9,
        "title": "Solution -\u300cGLR-R3\u300dF"
    },
    {
        "content": "\u6807\u7a0b\u7528\u9ad8\u8d85\u7684 DFS \u6280\u5de7\u50cf\u6211\u4eec\u5c55\u793a\u4e86\u91cd\u6392\u4fe1\u606f\u5b58\u50a8\u65b9\u5f0f\u4ece\u800c\u8fbe\u5230\u7b80\u5316\u7ef4\u62a4\u4fe1\u606f\u7684\u8fc7\u7a0b\u3002\u800c\u6211\u4eec\u8003\u8651\u7ee7\u7eed\u6cbf\u7528\u6811\u5256\u7684\u65b9\u5f0f\u7ef4\u62a4\u4fe1\u606f\u3002\n\n\u8003\u8651\u4e00\u6b21\u6bdb\u6bdb\u866b\u6240\u8986\u76d6\u7684\u4fe1\u606f\u4e3a\uff1a\n1. \u4e00\u6761\u94fe\u4e0a\u672c\u8eab\u7684\u4fe1\u606f\u3002\n1. \u94fe\u4e0a\u6240\u6709\u70b9\u4e0d\u518d\u94fe\u4e0a\u7684\u8f7b\u513f\u5b50\u3002\n1. \u4e00\u4e9b\u4e0d\u518d\u94fe\u4e0a\u7684\u91cd\u513f\u5b50\u3002\n1. \u94fe\u7aef\u70b9\u7684 LCA \u7684\u7236\u4eb2\u3002\n\n\u5176\u4e2d $3$ \u4e0d\u8d85\u8fc7 $\\log$ \u4e2a\uff0c\u603b\u4f53\u800c\u8a00\uff0c$1$\u3001$3$\u3001$4$ \u662f\u6bd4\u8f83\u597d\u7ef4\u62a4\u7684\u3002\u90a3\u4e48\u91cd\u70b9\u5c31\u6765\u5230\u4e86\u5982\u4f55\u7ef4\u62a4 $2$ \u4e0a\u3002\n\n\u6211\u4eec\u8003\u8651\u4ece\u52a8\u6001 DP \u7684\u89d2\u5ea6\u7ef4\u62a4\u8fd9\u4e2a\u4e1c\u897f\uff0c\u5373\u5bf9\u4e8e\u6bcf\u6761\u91cd\u94fe\u5206\u6cbb\uff0c\u800c\u975e\u5bf9\u4e8e\u6574\u68f5\u6811\u7684 DFS \u5e8f\u6216\u8005\u5b50\u6811\u5206\u6cbb\u3002\n\n\u8003\u8651 $2$ \u6240\u5177\u6709\u7684\u91cd\u8981\u7279\u6b8a\u6027\u8d28\uff1a\u4e00\u5b9a\u662f\u4e00\u6761\u91cd\u94fe\u7684\u94fe\u9876\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u4fee\u6539\u6807\u8bb0\u5148\u6253\u5230\u5176\u7236\u4eb2\u4e0a\u3002\u5373\u5bf9\u4e8e\u6240\u6709\u8f7b\u513f\u5b50\u7684\u6807\u8bb0\u3002\n\n\u8003\u8651\u5230\u6807\u8bb0\u662f\u8986\u76d6\uff0c\u6211\u4eec\u60f3\u529e\u6cd5\u5c06\u6807\u8bb0\u4e0b\u653e\u3002\u7528\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u5c06\u6240\u6709\u8f7b\u513f\u5b50\u7ef4\u62a4\uff0c\u5c06\u6807\u8bb0\u4e0b\u653e\uff0c\u90a3\u4e48\u6bcf\u6b21\u94fe\u67e5\u8be2\u5148\u7531\u4e0a\u81f3\u4e0b\u5c06\u6240\u6709\u94fe\u4e0a\u8f7b\u513f\u5b50\u7684\u6807\u8bb0\u4e0b\u653e\uff0c\u90a3\u4e48\u6b64\u65f6\u5c31\u53ef\u4ee5\u7ef4\u62a4\u51fa\u4e00\u4e2a\u8282\u70b9\u53ca\u5176\u8f7b\u513f\u5b50\u6784\u6210\u7684\u7b54\u6848\u3002\n\n\u8003\u8651\u67e5\u8be2\u7684\u6784\u6210\u90e8\u5206\uff1a\u4e00\u4e9b\u91cd\u94fe\u7684\u8282\u70b9\u53ca\u5176\u8f7b\u513f\u5b50\u4fe1\u606f\u7684\u533a\u95f4\u7b54\u6848\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\uff0c\u6ce8\u610f\u5bf9\u4e8e\u4e00\u6761\u91cd\u94fe\u7684\u94fe\u9876\u548c\u5f53\u524d\u67e5\u8be2\u7684\u8f7b\u8fb9\u8f6c\u79fb\u7279\u5224\u3002\n\n\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u80fd\u591f\u5728 $\\mathcal O(n\\log^{2} n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5bf9\u672c\u9898\u8fdb\u884c\u7ef4\u62a4\uff0c\u5bf9\u6bcf\u4e00\u6761\u91cd\u94fe\u5f00\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u533a\u95f4\u7b54\u6848\uff0c\u67e5\u8be2\u8df3\u7684\u65f6\u5019\u7279\u5224\u94fe\u9876\u5373\u53ef\u548c\u94fe\u5c3e\u3002\n\n\u8003\u8651\u4e00\u4e9b\u66f4\u597d\u7684\u4f18\u5316\uff0c\u5176\u5b9e\u4e0a\u9762\u90a3\u4e2a\u7b97\u6cd5\u6709\u5f88\u591a\u4e0d\u597d\u770b\u7684\u5730\u65b9\u3002\n\n\u6211\u4eec\u8003\u8651\u5c06\u8f7b\u91cd\u94fe\u5256\u6539\u6210\u865a\u5b9e\u94fe\u5256\u3002\u90a3\u4e48\u8fd9\u4e0b\u7684\u6bdb\u6bdb\u866b\u4fe1\u606f\u5c31\u6bd4\u8f83\u597d\u770b\u4e86\uff1a\n1. \u4e00\u6761\u94fe\u672c\u8eab\u3002\n2. \u8fd9\u6761\u94fe\u7684\u6240\u6709\u865a\u513f\u5b50\u7684\u94fe\u9876\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5c06\u6807\u8bb0\u5bf9\u5e94\u96c6\u5408\u7684\u4fe1\u606f\u5206\u79bb\u3002\u672c\u9898\u94fe\u4fee\u4f1a\u8c03\u7528\u6362\u6839\u3002\u6240\u4ee5\u8003\u8651\u5c06\u4e00\u6761\u5b9e\u94fe\u7684\u4fe1\u606f\u5206\u4e3a\uff1a\n1. \u94fe\u9876\u53ca\u94fe\u9876\u7684\u865a\u513f\u5b50\n2. \u94fe\u5c3e\u53ca\u94fe\u5c3e\u7684\u865a\u513f\u5b50\n3. \u4e2d\u95f4\u90e8\u5206\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u6b21\u4fee\u6539\u5c31\u53ef\u4ee5\u64cd\u4f5c\u4e3a\uff1a\u5bf9\u4e8e\u4e00\u6761\u94fe\u76f4\u63a5\u6253\u8986\u76d6\u6807\u8bb0\uff0c\u5176\u4e2d\u8986\u76d6\u6807\u8bb0\u5f80\u4e0b\u4f20\u65f6\u5bf9\u6bcf\u4e2a\u8f7b\u513f\u5b50\u7684\u4f20\u4e00\u4e2a\u94fe\u9876\u4fee\u6539\u6807\u8bb0\u3002\u540c\u65f6\u7ef4\u62a4\u94fe\u53ca\u5176\u8f7b\u513f\u5b50\u6700\u5927\u5b50\u6bb5\u548c\u4fe1\u606f\u53ca\u53d6 reverse \u4fe1\u606f\u3002\n\n\u5982\u6b64\u4f18\u5316\uff0c\u5b9e\u73b0\u590d\u6742\u5ea6\u8fbe\u5230 $\\mathcal O(n\\log n)$\u3002\n\n\u5bf9\u4e8e\u7ed9\u51fa\u7684 hard version \u4e5f\u53ef\u4ee5\u7ef4\u62a4\uff1a\n\n3. \u591a\u7ef4\u62a4\u4e00\u4e2a\u94fe\u4fe1\u606f\u3002\n4. \u5728 rake tree \u4e0a\u641e\u4e00\u4e0b\u5c31\u884c\u4e86\u3002",
        "postTime": 1660742274,
        "uid": 27338,
        "name": "jerry3128",
        "ccfLevel": 9,
        "title": "\u9898\u89e3\u3010P8479 \u300cGLR-R3\u300d\u8c37\u96e8\u3011"
    },
    {
        "content": "\u8003\u8651\u865a\u5b9e\u94fe\u5256\u5206\uff0c\u5728 LCT \u4e0a $\\text{split}$ \u51fa $u,v$ \u8fd9\u6761\u8def\u5f84\uff0c\u90a3 $u,v$ \u6bdb\u6bdb\u866b\u7684\u7ed3\u6784\u5c31\u7531\u4ee5\u4e0b\u7ec4\u6210\uff1a\n\n1. \u5b9e\u94fe\u7684\u70b9\n2. \u5b9e\u94fe\u4e0a\u6bcf\u4e2a\u865a\u513f\u5b50\u7684\u94fe\u9876\uff0c\u6309\u7167\u7f16\u53f7\u987a\u5e8f\n\n\u8fd9\u662f\u4e00\u4e2a\u9002\u5e94\u9898\u76ee\u4fe1\u606f\u7684\u7ed3\u6784\uff0c\u53ef\u4ee5\u7ef4\u62a4\u3002\n\n\u6211\u4eec\u60f3\u8981\u8bbe\u8ba1\u4e00\u4e2a\u7ed3\u6784\uff0c\u4f7f\u5f97 pushup/pushtag \u7684\u65f6\u5019\u80fd\u7528\u5230 \u6bcf\u4e2a\u865a\u513f\u5b50\u7684\u94fe\u9876 \u7684\u4fe1\u606f\uff08\u8bbe\u8ba1\u548c\u865a\u513f\u5b50\u7684\u94fe\u9876\u7684\u7236\u5b50\u5173\u7cfb\uff09\uff0c\u5e76\u4e14\u865a\u513f\u5b50\u7684\u94fe\u9876\u8fd8\u8981\u6709\u5e8f\u3002\n\n\u4e8e\u662f\u5bf9\u6bcf\u4e2a\u70b9\u5f00\u4e00\u4e2a\u5e73\u8861\u6811\u653e\u6240\u6709\u865a\u513f\u5b50\u7684\u94fe\u9876\uff08\u6309\u7167\u7f16\u53f7\u987a\u5e8f\u7684\u5e73\u8861\u6811\uff09\uff0c\u4e00\u4e2a\u70b9\u7684\u70b9\u6743\u5c31\u662f\u81ea\u5df1\u7684\u4fe1\u606f\u52a0\u4e0a\u5b83\u5e73\u8861\u6811\u6839\u7684\u4fe1\u606f\u3002\u4e00\u6761\u94fe\u7684\u6743\u503c\u5c31\u662f\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u5408\u5e76\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\u3002\n\n\u5728\u4e00\u6761\u5b9e\u94fe\u4e0a\u7ef4\u62a4\u51fa\u4ece\u4e0a\u5230\u4e0b\u548c\u4ece\u4e0b\u5230\u4e0a\u7684\u6700\u5927\u5b50\u6bb5\u548c\u4fe1\u606f\uff08\u56e0\u4e3a LCT \u6709 reverse \u4e00\u6761\u94fe\u64cd\u4f5c\uff09\uff0c\u5982\u4e0b\uff1a\n\n```cpp\nvoid up(int x){\n\ts[x]=s[ls(x)]+v[x]+T::s[T::rt[x]]+s[rs(x)];\n\ts1[x]=s1[rs(x)]+v[x]+T::s[T::rt[x]]+s1[ls(x)];\n\tsz[x]=sz[ls(x)]+1+T::sz[T::rt[x]]+sz[rs(x)];\n}\n```\n\n\u8fd9\u6837\u5c31\u80fd\u652f\u6301\u8be2\u95ee\u4e86\u3002\u8003\u8651\u4fee\u6539\uff1a\n\n\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a tag\uff0c\u8868\u793a\u8fd9\u6761\u5b9e\u94fe\u4ee5\u53ca\u5b9e\u94fe\u4e0a\u6bcf\u4e2a\u865a\u513f\u5b50\u7684\u94fe\u9876\u88ab\u4fee\u6539\u6210 $x$\u3002push tag \u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u70b9\u7684\u5e73\u8861\u6811\u4e5f\u8fdb\u884c push tag\uff0c\u5c31\u652f\u6301\u4e86\u4fee\u6539\u3002\n\n\u4ece\u5e73\u8861\u6811\u4e2d\u5220\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u8981\u628a LCT \u4e0a\u7684\u70b9\u6743\u66f4\u65b0\u6210\u5e73\u8861\u6811\u4e0a\u7684\u70b9\u6743\u3002\u63d2\u5165\u4e00\u4e2a\u70b9\u5c31\u662f\u5e73\u8861\u6811\u4e0a\u7684\u70b9\u6743\u66f4\u65b0\u6210 LCT \u4e0a\u7684\u70b9\u6743\u3002\n\n\u5e73\u8861\u6811\u7684\u590d\u6742\u5ea6\u65e0\u6cd5\u5747\u644a\uff0c\u6240\u4ee5\u662f $O((n+q)\\log^2 n)$\u3002\n\n[\u4ee3\u7801\uff0c\u5751\u70b9\u5199\u6ce8\u91ca\u91cc\u4e86](https://www.luogu.com.cn/paste/vv4webyc)",
        "postTime": 1663810774,
        "uid": 151935,
        "name": "Rainbow_qwq",
        "ccfLevel": 0,
        "title": "\u300cGLR-R3\u300d\u8c37\u96e8"
    },
    {
        "content": "[\u9898\u4f20](https://www.luogu.com.cn/problem/P8479)\n\nP8479 \u300cGLR-R3\u300d\u8c37\u96e8 \u00d7\n\n\u3010\u6a21\u677f\u3011\u6bdb\u6bdb\u866b\u5256\u5206 \u00d7\n\n[Ynoi \uff1f\uff1f\uff1f] \u5e72\u6389\u6bdb\u6bdb\u866b \u221a\n\n\u81ea\u5df1\u5199\u7684\u5173\u4e8e\u8fd9\u7c7b\u5256\u5206\u65b9\u6cd5\u7684 [$blog$](https://www.cnblogs.com/sizeof127/p/16693494.html)\n\n### \u9898\u610f\u7b80\u8ff0\n\n\u79f0\u4e00\u6761\u94fe\u548c\u4e0e\u5176\u6709\u8fde\u8fb9\u7684\u70b9 \u6784\u6210\u7684\u70b9\u96c6 \u4e3a \u201c\u6bdb\u6bdb\u866b\u201d\uff0c\u94fe\u4e0a\u7684\u70b9\u4e3a \u201c\u6bdb\u70b9\u201d\uff0c\u67d0\u4e2a \u201c\u6bdb\u70b9\u201d $x$ \u7684\u811a\uff08\u4e0e\u4e4b\u53f3\u8fb9\u4f46\u975e\u94fe\u70b9\uff09\u7684\u70b9\u96c6\u4e3a $T_x$\u3002\n\n\u64cd\u4f5c\uff1a\u7ed9\u51fa\u4e00\u6761 \u201c\u6bdb\u6bdb\u866b\u201d \u7684\u4e24\u7aef $u, v$\uff0c\u5c06\u8be5\u201c\u6bdb\u6bdb\u866b\u201d\u5185\u7684\u70b9\u7684\u70b9\u6743\u6539\u4e3a $k$\uff1b\n\n\u8be2\u95ee\uff1a\u5f00\u59cb\u6709\u4e2a\u7a7a\u5e8f\u5217 $q$\uff0c\u7ed9\u51fa\u4e00\u6761 \u201c\u6bdb\u6bdb\u866b\u201d \u7684**\u5934\u3001\u5c3e** $u, v$\uff0c\u4ece\u5934\u5230\u5c3e\u6309\u94fe\u4e0a\u7684\u987a\u5e8f\u904d\u5386 \u201c\u6bdb\u70b9\u201d\uff0c\u6bcf\u8d70\u5230\u4e00\u4e2a \u201c\u6bdb\u70b9\u201d $x$\uff0c\u73b0\u5c06 $x$ \u7684\u70b9\u6743\u52a0\u5165 $q$\uff0c\u7136\u540e\u5c06 $T_x$ \u5185\u7684\u70b9\u7684\u70b9\u6743\u6309\u70b9\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u987a\u5e8f\u653e\u5165 $q$\u3002\u64cd\u4f5c\u5b8c\u540e\uff0c\u8be2\u95ee $q$ \u7684\u6700\u5927\u5b50\u6bb5\u548c\uff08\u53ef\u4ee5\u4e3a 0\uff09\uff1b\n\n### \u4e3b\u8981\u601d\u8def\n\n\u8003\u8651\u6839\u636e\u91cd\u94fe\u6784\u9020\u6ee1\u8db3\u9898\u76ee\u4fee\u6539\u8981\u6c42\u7684 dfn \u5e8f\uff0c\u7136\u540e\u76f4\u63a5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u8bbe $S$ \u4e3a\u5c06\u91cd\u94fe\u4f5c\u4e3a \u201c\u6bdb\u6bdb\u866b\u201d \u65f6\u7684 $T$\u3002\n\ndfn \u5e8f\u6ee1\u8db3\uff1a\n\n>\u6bcf\u6761\u91cd\u94fe\u7684 $S$ \u7684\u7f16\u53f7\u8fde\u7eed\uff1b\n\n\u56e0\u4e3a\u8df3\u91cd\u94fe\u65f6\u4f1a\u51fa\u73b0\u534a\u6761\u94fe\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u9700\u8981\u989d\u5916\u6ee1\u8db3\uff1a\n\n>\u5bf9\u4e8e\u6bcf\u6761\u91cd\u94fe\u4e0a\u7684\u70b9 $x$\uff0c$x$ \u4e0e $x$ \u6240\u6709\u5728 $S$ \u4e2d\u7684\u62d3\u5c55\u70b9\uff08\u5373 $T_x$\uff09\u7f16\u53f7\u8fde\u7eed\uff1b\n\n\u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u8be2\u95ee\u5206\u5411\u4e0a\u8d70\u548c\u5411\u4e0b\u8d70\u4e24\u79cd\uff0c\u56e0\u6b64\u8fd8\u6709\u4e00\u4e2a\u9650\u5236\uff1a\n\n>\u91cd\u94fe\u70b9\u7684\u7f16\u53f7\u7684\u504f\u5e8f\u5173\u7cfb\u548c\u91cd\u94fe\u70b9\u7684\u6df1\u5ea6\u504f\u5e8f\u5173\u7cfb\u5168\u90e8\u76f8\u540c\u6216\u76f8\u53cd\uff08\u5206\u522b\u5bf9\u5e94\u5411\u4e0b\u548c\u5411\u4e0b\u7684\u60c5\u51b5\uff09\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e09\u4e2a\u9650\u5236\uff0c\u7531\u4e8e\u4e0d\u80fd\u540c\u65f6\u6b63\u5e8f\u548c\u5012\u5e8f\uff0c\u6240\u4ee5\u6784\u9020\u4e24\u4e2a\u4e0d\u540c\u7684 dfn \u5e8f\u5206\u522b\u6ee1\u8db3\u76f8\u540c\u548c\u76f8\u53cd\uff0c\u5206\u5f00\u4e24\u68f5\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u8003\u8651\u6784\u9020\u3002\n\n\u5c06 1 \u53f7\u70b9\u7684\u91cd\u94fe\u52a0\u5165\u961f\u5217\u4e2d\uff0c\u63a5\u4e0b\u6765\uff0c\u6bcf\u6b21\u53d6\u51fa\u961f\u5934\u91cd\u94fe\uff0c\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a\n\n1. \u6309\u7167\u9700\u8981\u6784\u9020\u7684\u504f\u5e8f\u5173\u7cfb\uff0c\u81ea\u4e0a\u5f80\u4e0b/\u81ea\u4e0b\u5f80\u4e0a \u904d\u5386\u91cd\u94fe\uff0c\u5047\u8bbe\u73b0\u5728\u5728 $x$ \u70b9\uff1b\n\n1. \u7ed9 $x$ \u70b9\u7f16\u53f7\uff0c\u968f\u540e\u7ed9\u4e0e $x$ \u6709\u8fb9\u4f46\u4e0d\u662f\u5f53\u524d\u91cd\u94fe\u4e0a\u7684\u70b9\u7f16\u53f7\uff0c\u5e76\u5c06\u5176\u7684\u91cd\u94fe\uff08\u8fd9\u4e9b\u70b9\u5fc5\u5b9a\u662f\u67d0\u4e2a\u91cd\u94fe\u7684 $top$\uff09\u52a0\u5165\u961f\u5217\u3002\n\n\u4e0d\u96be\u770b\u51fa\uff0c\u8fd9\u6837\u6784\u9020\u7684 dfn \u5e8f\uff0c\u6709\u70b9\u7455\u75b5\uff1a\n\n\u91cd\u94fe\u4e0a\u7684 $top$ \u548c $S$ \u4e2d\u5176\u4ed6\u70b9\u7f16\u53f7\u4e0d\u8fde\u7eed\uff0c$top$ \u7684\u7236\u4eb2\u4e5f\u6ca1\u88ab\u6211\u4eec\u5f53\u6210 $S$ \u4e2d\u7684\u70b9\n\n\u4e0d\u8fc7\u8fd9\u4e2a\u7b80\u5355\uff0c~~\u5c0f\u5c0f~~\u5927\u529b\u5206\u8ba8\u5373\u53ef\u3002\n\n### \u4ee3\u7801\u7ec6\u8282\n\n\u7ec6\u8282\u5de8\u591a /px\u3002\n\n\u9996\u5148\u9700\u8981\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u8f7b\u513f\u5b50\u7684\u533a\u95f4\u3002\n\n\u4fee\u6539\u91cd\u94fe\u7684\u6bdb\u6bdb\u866b\u65f6\uff0c\n\n\u5bf9\u4e8e\u94fe\u5e95\uff0c\u9700\u8981\u5355\u72ec\u628a\u5b83\u7684\u91cd\u513f\u5b50\u4fee\u6539\uff0c\u56e0\u4e3a\u6784\u9020\u4e2d\u7684\u91cd\u94fe\u662f**\u6574\u6761\u91cd\u94fe**\uff0c\u800c\u4fee\u6539\u53ef\u80fd\u53ea\u6d89\u53ca\u534a\u6761\u91cd\u94fe\u3002\n\n\u5bf9\u4e8e $u, v$ \u7684 $\\operatorname{LCA}$\uff0c\u5b83\u7684\u7236\u4eb2\u4e5f\u9700\u8981\u5355\u72ec\u4fee\u6539\u3002\n\n\u4fee\u6539\u8fd8\u7b97\u597d\uff0c\u56e0\u4e3a\u8d4b\u503c\u64cd\u4f5c\u91cd\u53e0\u6ca1\u6709\u5173\u7cfb\uff0c\u4f46\u662f\u8be2\u95ee\u5c31\u6709\u70b9\u75db\u82e6\u3002\n\n\u5bf9\u4e8e\u4e00\u6b21\u8be2\u95ee $(u, v)$\u3002\n\n\u5728 $\\operatorname{LCA}$ \u5904\u7684\u7236\u4eb2\u6bd4\u8f83\u70e6\uff0c\u8003\u8651\u62ff\u6389 $\\operatorname{LCA}$ \u518d\u505a\u4e0d\u7528\u8003\u8651\u7236\u4eb2\u7684\uff0c\u6700\u540e\u518d\u5408\u5e76\uff0c\u6ce8\u610f $\\operatorname{LCA}$ \u7684\u8f7b\u513f\u5b50\u533a\u95f4\u8981\u5220\u9664\u5411\u4e0b\u7684\u94fe\u3002\n\n\u8df3\u94fe\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u94fe\u5e95 $y$\uff0c\u9700\u8981\u628a\u4e0b\u9762\u4e00\u4e2a\u88ab\u8986\u76d6\u5230\u7684\u94fe\u7684 $top$ \u5728 $y$ \u7684\u8f7b\u513f\u5b50\u5e8f\u5217\u4e2d\u5220\u53bb\u8d21\u732e\uff0c\u540c\u65f6\u4e5f\u8981\u628a $y$ \u7684\u91cd\u513f\u5b50\u52a0\u5165\u5e8f\u5217\uff0c\u5177\u4f53\u770b\u4e2a\u4eba\u5b9e\u73b0\u3002\n\n### Code\n\n\u4ec0\u4e48\u65f6\u5019\u6211\u91cd\u6784\u4e00\u904d\uff0c\u8fc7\u4e86\u5c31\u653e [\u535a\u5ba2\u56ed](https://www.cnblogs.com/sizeof127/p/16698002.html)",
        "postTime": 1663251004,
        "uid": 341102,
        "name": "ReKoJ",
        "ccfLevel": 0,
        "title": "P8479 \u300cGLR-R3\u300d\u8c37\u96e8"
    }
]