[
    {
        "content": "noip\u53cc\u6808\u6392\u5e8f\u52a0\u5f3a\u7248\u3002\n\n\u5982\u679c\u5b58\u5728k\u4f7f\u5f97ak<ai<aj\u4e14k>j>i\uff0c\u90a3\u4e48i,j\u4e0d\u80fd\u5165\u4e00\u4e2a\u6808\u3002\n\ni<->j\u8fde\u4e00\u6761\u8fb9\uff0c\u4e4b\u540e\u8dd1\u4e8c\u5206\u56fe\u67d3\u8272\uff0c\u4f18\u5148\u7ed9\u5c0f\u7684\u67d3\u9ed1\u8272\uff0c\u8868\u793a\u8fdb\u7b2c\u4e00\u4e2a\u6808\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u9884\u5904\u7406m[i]=min{a[i+1..n]}\n\n\u5bf9\u6bcf\u4e2aj\uff0c\u627eai<aj\u4e14ai>m[j]\u7684\u3002\n\n\u7136\u800c\u6211\u4eec\u4e0d\u80fd\u628a\u8fb9\u90fd\u8fde\u51fa\u6765\uff0c\u56e0\u4e3a\u4f1a\u662fn^2\u3002\n\n\u6211\u4eec\u60f3\u529e\u6cd5\u53ea\u8fde\u51fa\u4e00\u4e9b\u751f\u6210\u6811\uff0c\u67d3\u8272\u4e4b\u540e\u6a21\u62df\u5224\u65ad\u4e00\u4e0b\u884c\u4e0d\u884c\u3002\n\n\u65b9\u6cd5\u5c31\u662f\u6bcf\u8fde\u4e86\u4e24\u4e2a\u5757\u5c31\u5e76\u6210\u4e00\u4e2a\u5757\uff0c\u5e76\u4e14\u7528\u53ef\u5e76\u5806\u7ef4\u62a4\u5757\u5185\u6700\u5c0fai\u3002\n\n\u56e0\u4e3am\u662f\u5355\u8c03\u589e\u7684\uff0c\u5982\u679c\u6700\u5c0fai<=m\uff0c\u5c31\u5f39\u51fa\u3002\n\n\u4e4b\u540e\u6211\u4eec\u518d\u7528\u4e00\u4e2a\u5806\u7ef4\u62a4\u6240\u6709\u5757\u91cc\u9762\u6700\u5c0fai\u6700\u5c0f\u7684\u5757\uff0c\u6bcf\u6b21\u53d6\u51fa\uff0c\u5982\u679c\u6ee1\u8db3ai<aj\u5c31\u8fde\u8fb9\uff0c\u5408\u5e76\u3002\n\n\u65f6\u95f4nlogn\u3002\n\n(\u597d\u4e45\u6ca1\u6253\u5806\u4e86233)\n\n```cpp\n#include<cstdio>\n#include<algorithm> \nusing std::swap;\n\n#define ch_top 10000000\nchar ch[ch_top],*now_w=ch-1;\n#define print(x) *++now_w=x;\n#define chmin(x,y) {if(x>y)x=y;}\n#define N 101000\nint a[N],m[N];//m[i]=i->n min \nint t[N];\nstruct edge\n{\n    int to,next;\n}l[10000000];int e;\n#define add_e(x,y) l[++e]=(edge){y,t[x]};t[x]=e;\nbool vis[N],col[N];//col[i]=1 \u7b2c\u4e00\u4e2a\u6808 \nint q1[N],t1,q2[N],t2;\n\nint n;\nint head[N],next[N];\nint h[N<<1],top;\n\nvoid dfs(int x,bool now)\n{\n    if (vis[x])\n    {\n     if (col[x]!=now) {puts(\"NIE\");exit(0);}\n    }\n    else\n    {\n        vis[x]=1;col[x]=now;\n    for (int i=t[x];i;i=l[i].next) dfs(l[i].to,now^1);\n    }\n}\n\nvoid move()\n{\n    for (int i=1,j;(j=i<<1)<=top;)\n    {\n        if (j<top&&a[h[j]]>a[h[j+1]]) ++j;\n        if (a[h[i]]<a[h[j]]) break ;\n        swap(h[i],h[j]);i=j;\n    }\n}\n\nvoid push(int x)\n{\n    h[++top]=x;\n    for (int i=top,j;i>1;)\n    {\n      if (a[h[i]]>=a[h[j=i>>1]])  break;\n      swap(h[i],h[j]);i=j;\n    }\n}\n\nvoid merge(int &x,int y)\n{\n    if (a[x]<a[y])\n    {\n        next[y]=head[x];head[x]=y;\n    }\n    else\n    {\n        next[x]=head[y];head[y]=x;\n        x=y;\n    }\n}\n\nvoid merges(int &x)\n{\n    int y=next[x],r;\n    while (y)\n    {\n        r=next[y];\n        merge(x,y);\n        y=r;\n    }\n    next[x]=0;\n}\n\nint main()\n{\n    freopen(\"1.in\",\"r\",stdin);\n    int i,j;\n    scanf(\"%d\",&n);\n    for (i=1;i<=n;++i) {scanf(\"%d\",a+i);m[i]=a[i];}\n    for (i=n;--i;) chmin(m[i],m[i+1])\n    h[top=1]=1;\n    a[0]=N+1;\n    m[n+1]=N;\n    int p;\n    for (i=2;i<=n;++i)\n    {\n        int rt=i;\n        for (;a[p=h[1]]<a[i];)\n        {\n          while (a[p]<=m[i+1]) \n            merges(p=head[p]);\n          if(a[p]<a[i]) {add_e(i,p);add_e(p,i);merge(rt,p);h[1]=h[top--]; }\n          else h[1]=p;\n          move();\n        }\n        push(rt);\n    }\n    int now=1;\n    print('T') print('A') print('K') print('\\n')\n    for (i=1;i<=n;++i)\n    {\n        if (!vis[i]) dfs(i,1);\n        if (col[i]) {q1[++t1]=i;print('1') }\n        else {q2[++t2]=i;print('2') }\n        print(' ')\n        while (a[q1[t1]]==now||a[q2[t2]]==now)\n        {\n            if (a[q1[t1]]==now++) {  --t1; }\n            else {  --t2; }\n        }\n    }\n    if (now<=n) puts(\"NIE\");\n    else fwrite(ch,1,now_w-ch,stdout);\n}\n```",
        "postTime": 1486803312,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3497 \u3010[POI2010]KOL-Railway\u3011"
    },
    {
        "content": "\n\n\n# \u795e\u9898\u3002\u3002\u3002\n\n\u4ece\u5404\u5904\u90fd\u53ef\u4ee5\u770b\u5230 __\u53cc\u6808\u6392\u5e8f__ \u8fd9\u4e2a\u540d\u8bcd\n\n\u603b\u800c\u8a00\u4e4b\u5c31\u662f\u4e24\u4e2a\u6808\uff0c\u7ed9\u51fa\u5165\u6808\u5e8f\u5217\uff0c\u8981\u6c42\u51fa\u6808\u5e8f\u5217\u6709\u5e8f\u3002\n\n---\n\n### \u6316\u6398\u6027\u8d28\n\n\u9996\u5148\u80fd\u53d1\u73b0\u4e24\u4e2a\u6027\u8d28\n\n\uff08\u5728\u4e0b\u9762\u6211\u79f0\u7b2c $ i $  \u8f86\u5165\u6808\u7684\u8f66\u7684\u7f16\u53f7\u4e3a\u7b2c $ i $ \u4e2a\u4e0b\u6807\u4e0a\u7684\u503c\uff0c\u5373\u7b2c $ i $ \u4e2a\u5143\u7d20\uff09\n\n>\u4e00\u4e2a\u5143\u7d20\u5165\u6808\u7684\u65f6\u5019\uff0c\u4ed6\u6240\u8fdb\u5165\u7684\u6808\u7684\u6808\u9876\u5143\u7d20\u5fc5\u5927\u4e8e\u4ed6\u3002\n\n\u5426\u5219\u90a3\u4e2a\u5143\u7d20\u5c31\u4e0d\u80fd\u5728\u4ed6\u51fa\u6808\u524d\u51fa\u6808\uff0c\u4e5f\u5c31\u4e0d\u6ee1\u8db3\u51fa\u6808\u5e8f\u5217\u6709\u5e8f\u3002\n\n\u8fd8\u6709\n\n>\u4e00\u4e2a\u5143\u7d20\u4f1a\u88ab\u6bd4\u4ed6\u5c0f\u7684\u5143\u7d20\u201c\u5361\u201d\u4f4f\u4e0d\u51fa\u6808\uff0c\u56e0\u4e3a\u8981\u6709\u5e8f\u3002\n\n\u90a3\u4e48\u5728\u4e00\u4e2a\u5143\u7d20\u5165\u6808\u4e4b\u540e\uff0c\u51fa\u6808\u4e4b\u524d\uff0c\u6240\u6709\u6bd4\u4ed6\u5927\u7684\u5143\u7d20\u90fd\u4e0d\u80fd\u548c\u4ed6\u5728\u4e00\u4e2a\u6808\u4e2d\u3002\n\n\u540c\u6837\u7684\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u5143\u7d20 $ Ele[i] $ \u6765\u8bf4\uff0c\u5728\u4ed6\u5165\u6808\u7684\u65f6\u5019\uff0c\u8bbe\u5df2\u7ecf\u51fa\u6808\u7684\u5143\u7d20\u4e2d\u6700\u5927\u503c\u4e3a $ Mx $  \uff0c\u90a3\u4e48 $ Ele[i] $ \u80af\u5b9a\u4e0d\u80fd\u4e0e $ [Mx + 1, Ele[i] - 1] $ \u4e2d\u5df2\u7ecf\u5165\u6808\u7684\u5143\u7d20\u5904\u4e8e\u540c\u4e00\u4e2a\u6808\u4e2d\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u6ee1\u8db3 $ v | v \\in [Mx + 1, Ele[i] - 1] $ \u4e14 $ v $ \u7684\u5165\u6808\u65f6\u95f4\u5c0f\u4e8e $ i $ \u7684 $ v $ \u6765\u8bf4\uff0c$ ans[v] \\ne ans[Ele[i]] $ \u3002\n\n---\n\n### \u6df1\u5165\u601d\u8003\n\n\u6211\u4eec\u53d1\u73b0\u5f97\u5230\u7684\u5173\u7cfb\u662f\u7b54\u6848\u7684\u4e0d\u540c\uff0c\u4e8e\u662f\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u67d3\u8272\u95ee\u9898\uff08\u5176\u5b9e\u4e5f\u662f\u4e8c\u5206\u56fe\uff0c\u4f46\u5e76\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\uff09\uff0c\u540c\u4e00\u6761\u8fb9\u8fde\u63a5\u7740\u7684\u4e24\u4e2a\u5143\u7d20\u7684\u7b54\u6848\u5fc5\u4e0d\u540c\u3002\n\n\u4e0a\u8ff0\u4e24\u79cd\u5173\u7cfb\u5176\u5b9e\u662f\u5b8c\u5168\u5bf9\u5e94\u7684\uff0c\u53ea\u4e0d\u8fc7\u4e00\u79cd\u662f\u4ece\u524d\u5f80\u540e\u8fde\uff0c\u4e00\u79cd\u662f\u4ece\u540e\u5f80\u524d\u8fde\u3002\n\n\u800c\u67d3\u8272\u5173\u7cfb\u4e8b\u5b9e\u4e0a\u662f\u65e0\u5411\u8fb9\uff0c\u65e2\u7136\u4e24\u79cd\u5173\u7cfb\u90fd\u662f\u5bf9\u5e94\u7684\uff0c\u90a3\u4e48\u6bcf\u6b21\u53ea\u8fde\u6709\u5411\u8fb9\u5c31\u53ef\u4ee5\u6ee1\u8db3\u4e86\u3002\n\n\u56e0\u4e3a\u5728\u4e00\u4e2a\u5143\u7d20\u7684\u7b54\u6848\u5bf9\u524d\u9762\u6ca1\u6709\u5f71\u54cd\u65f6\uff0c\u53ef\u80fd\u5bf9\u540e\u9762\u7684\u5143\u7d20\u6709\u5f71\u54cd\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u6240\u4ee5\u53ea\u8fde\u4e00\u79cd\u8fb9\u4f1a\u5bfc\u81f4\u7b54\u6848\u7684\u5224\u65ad\u51fa\u73b0\u95ee\u9898\u3002\n\n---\n\n### \u5982\u4f55\u5b9e\u73b0\uff1f\n\n\u5728\u8fde\u4e86\u65e0\u5411\u8fb9\u4e4b\u540e\uff0c\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u70b9\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u6240\u4ee5\u5982\u679c\u7528\u6df1\u641c\u6765\u67d3\u8272\uff0c\u90a3\u4e48\u5faa\u73af\u65f6\u6bcf\u78b0\u5230\u4e00\u4e2a\u7a7a\u767d\u70b9\u5c31\u76f4\u63a5\u968f\u4fbf\u67d3\u5c31\u884c\u4e86\u3002\n\n\u4f46\u662f\u5982\u679c\u76f4\u63a5\u66b4\u529b\u6df1\u641c\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86\u8fb9\u7684\u6570\u91cf\uff08\u5f88\u663e\u7136\u600e\u4e48\u5361\u90fd\u53ef\u4ee5 TLE )\uff0c\u662f\u4e0d\u53ef\u53d6\u7684\u3002\n\n\uff08\u6240\u4ee5\u5b58\u8fb9\u4e5f\u6210\u4e3a\u4e86\u4e0d\u53ef\u80fd\uff09\n\n---\n\n### \u8fdb\u4e00\u6b65\u4f18\u5316\n\n\u5bf9\u4e8e\u6211\u4eec\u6784\u5efa\u51fa\u7684\u8fb9\u6765\u8bf4\uff0c\u8fd9\u4e9b\u5173\u7cfb\u662f\u5fc5\u987b\u6ee1\u8db3\u7684\uff0c\u90a3\u4e48\u6bcf\u4e2a\u8fde\u901a\u5757\u4e2d\u989c\u8272\u7684\u5bf9\u5e94\u6027\u4e5f\u5c31\u662f\u786e\u5b9a\u7684\u3002\n\n\u6211\u4eec\u7528 $ ans[i] $ \u8868\u793a\u6bcf\u4e2a\u70b9\u7b2c\u4e00\u6b21\u88ab\u641c\u5230\u65f6\u6240\u67d3\u7684\u989c\u8272\uff0c\u56e0\u4e3a\u5bf9\u5e94\u5173\u7cfb\u5df2\u7ecf\u786e\u5b9a\uff0c\u6240\u4ee5\u5bf9\u4e8e\u67d0\u4e9b\u8fb9\u6765\u8bf4\uff0c$ i $ \u53ea\u80fd\u662f $ ans[i] $ \u8fd9\u4e2a\u989c\u8272\u3002\n\n\u90a3\u4e48\u53ea\u8981\u5728\u6700\u540e\u5224\u65ad\u4e00\u4e0b\u6309\u7167 $ ans[i] $ \u5165\u6808\u662f\u5426\u53ef\u884c\u5373\u53ef\u3002\u56e0\u4e3a\u4e0d\u53ef\u884c\u5c31\u505a\u4e0d\u5230\u5168\u90e8\u6ee1\u8db3\u4e86\u3002\n\n\u8fd9\u6837\u6bcf\u4e2a\u70b9\u5c31\u4e4b\u4f1a\u88ab\u67d3\u4e00\u6b21\u3002\n\n---\n\n### \u8fd8\u6709\u6700\u91cd\u8981\u7684\u4e00\u90e8\u5206\n\n\u63a5\u7740\u8003\u8651\u8fde\u8fb9\u3002\n\n\u6211\u4eec\u518d\u6b21\u5ba1\u89c6\u4e00\u4e0b\u8981\u8fde\u7684\u4e24\u79cd\u8fb9\u3002\n\n> 1. \u5728\u503c\u57df [L, R] \u4e2d\u67e5\u8be2\u5165\u6808\u65f6\u95f4\u5c0f\u4e8e i \u7684\u5143\u7d20\uff0c\u4e0e\u5176\u8fde\u8fb9\n>\n> 2. \u5728\u4e0b\u6807 [L, R] \u4e2d\u67e5\u8be2\u503c\u5927\u4e8e Ele[i]  \u7684\u5143\u7d20\uff0c\u4e0e\u5176\u8fde\u8fb9\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e24\u9897\u7ebf\u6bb5\u6811\uff0c\u4e00\u9897\u503c\u57df\uff0c\u4e00\u9897\u4e0b\u6807\uff0c\u5728 $ O(n) $ \u7684\u590d\u6742\u5ea6\u5904\u7406\u5b8c\u4e24\u79cd\u8fb9\uff08\u8be2\u95ee\uff09\u4e4b\u540e\uff0c\u76f4\u63a5\u6df1\u641c\uff0c\u641c\u4e00\u4e2a\u70b9\u4e4b\u524d\u628a\u4ed6\u5728\u4e24\u9897\u7ebf\u6bb5\u6811\u4e2d\u5220\u6389\uff0c\u7136\u540e\u5728\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e0a\u5904\u7406\u4e24\u79cd\u8fb9\uff0c\u7ee7\u7eed\u67d3\u8272\u3002\n\n\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u70b9\u503c\u641c\u4e86\u4e00\u6b21\uff0c\u5e76\u4e14\u5220\u4e86\u4e00\u6b21\uff0c\u67e5\u8be2\u4e0e\u5220\u9664\u7684\u590d\u6742\u5ea6\u90fd\u662f $ O(\\log n) $ \uff0c\u800c\u9884\u5904\u7406\u4e0e\u6700\u540e\u5224\u65ad\u7684\u590d\u6742\u5ea6\u90fd\u662f $ O(n) $ \uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $ O(n \\log n) $ \u3002\n\n---\n\n\u56e0\u4e3a\u6709\u4e24\u79cd\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u4ee3\u7801\u5c31\u4f1a\u7279\u522b\u7e41\u7410\u3002\u3002\u3002\u800c\u4e14\u67e5\u8be2\u662f\u7279\u6b8a\u7684\u533a\u95f4\u67e5\u8be2\uff0c\u6240\u4ee5\u6709\u5f88\u591a\u7ec6\u8282\u8981\u6ce8\u610f\u3002\n\n```cpp\n#define ll long long\n#define reg register\n#define rep(i, a, b) for (reg int i = (a), i##end = (b); i <= i##end; ++i)\n#define dep(i, a, b) for (reg int i = (a), i##end = (b); i >= i##end; --i)\n\ntemplate <typename _typer> inline _typer read() {\n\t_typer init = 0;\n\tchar ch = getchar(), k = 0;\n\tfor ( ; !isdigit(ch); ch = getchar()) k = (ch == '-');\n\tfor ( ; isdigit(ch); ch = getchar())\n\t\tinit = (init << 3) + (init << 1) + (ch ^ 48);\n\treturn k ? -init : init;\n}\nconst ll N = 100005, INF = 1e9;\n\n/*******************************************************************************\n *\n * \u6bcf\u4e2a\u70b9\u53ea\u67d3\u4e00\u6b21\uff0c\u6700\u540e\u5224\u65ad\u6309\u7167\u8fd9\u6837\u67d3\u884c\u4e0d\u884c\uff0c\u53ea\u8981\u4fdd\u8bc1\u67d3\u4e86\u7684\u8fb9\u662f\u5fc5\u987b\u6ee1\u8db3\u7684\u5373\u53ef\n * \uff08\u6216\u8005\u8bf4\u7528\u6765\u66f4\u65b0\u522b\u7684\u70b9\u7684\u90a3\u4e9b\u70b9\u4e0d\u662f\u968f\u4fbf\u7684\u70b9\uff09\n *\n * \u6709\u4e24\u79cd\u8fb9\uff0c\u4e00\u79cd\u8fde\u5411 i \u524d\u9762\uff0c\u8fd9\u79cd\u8fb9\u8fde\u5411\u6240\u6709\u5728\u6808\u91cc\u800c\u4e14\u503c\u5c0f\u4e8e A[i] \u7684\u70b9\n * \uff08\u5728\u503c\u57df\u4e2d\u627e\u4e0b\u6807\uff09\n * \u53e6\u4e00\u79cd\u8fb9\u8fde\u5411 i \u540e\u9762\uff0c\u8fd9\u79cd\u8fb9\u8fde\u5411\u6240\u6709\u5728 i \u8fd9\u4e2a\u70b9\u8d70\u4e4b\u524d\u5165\u6808\u800c\u4e14\u503c\u5927\u4e8e A[i] \u7684\u70b9\n * \uff08\u5728\u4e0b\u6807\u4e2d\u627e\u503c\uff09\n *\n * \u8fd9\u6837\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5c31\u6709\u4e86\u4e24\u7ec4\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e24\u9897\u7ebf\u6bb5\u6811\u67e5\u8be2\uff08\u7c7b\u578b\u89c1\u4e0a\uff09\n *\n * \u7136\u540e\u76f4\u63a5\u6df1\u641c\u6765\u67d3\u8272\uff0c\u4e0b\u4e2a\u8981\u627e\u7684\u70b9\u7531\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u5f97\u5230\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u627e\u5230\u4e86\u5c31\u76f4\u63a5\u5220\n * \u6389 \uff08\u4e24\u68f5\u90fd\u8981\u5220\uff09\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u627e\u4e00\u6b21\uff0c\u627e\u70b9\u7684\u590d\u6742\u5ea6\u662f logn \uff0c \u6240\u4ee5\n * \u603b\u590d\u6742\u5ea6\u5c31\u662f O(nlogn)\n *\n * \u6700\u540e\u76f4\u63a5\u6309\u7167\u67d3\u4e0b\u6765\u7684\u4e00\u4e2a\u4e2a\u5165\u6808\uff0c\u5224\u65ad\u662f\u5426\u53ef\u884c\uff0c\u56e0\u4e3a\u6b64\u65f6\u6ca1\u67d3\u8272\u7684\u70b9\u90fd\u662f\u4e0d\u5f71\u54cd\u4efb\n * \u4f55\u4e00\u4e2a\u70b9\u7684\uff0c\u6240\u4ee5\u8fd9\u65f6\u7684\u60c5\u51b5\u662f\u5fc5\u987b\u6ee1\u8db3\u7684\uff08\u5426\u5219\u5982\u679c\u4e00\u4e2a\u70b9\u4f1a\u5f71\u54cd\u522b\u7684\u70b9\uff0c\u5c31\u4f1a\u6709\u522b\n * \u7684\u70b9\u6765\u67d3\u4ed6\uff0c\u56e0\u4e3a\u8fb9\u662f\u53cc\u5411\u7684\uff09\n *\n * \uff08\u6700\u540e\u7684\u60c5\u51b5\u53ef\u4ee5\u7c97\u7565\u7684\u7406\u89e3\u4e3a\u6ca1\u6709\u8054\u901a\u5728\u4e00\u8d77\u7684\u70b9\u5c31\u662f\u4e0d\u540c\u7684\u8054\u901a\u5757\uff0c\u5c5e\u4e8e\u4e0d\u540c\u8054\u901a\n * \u5757\u7684\u70b9\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u6240\u4ee5\u53ef\u4ee5\u968f\u4fbf\u653e\u5728\u4efb\u4f55\u4e00\u4e2a\u6808\u4e2d\uff09\n *\n * ps:\u672c\u6765\u60f3\u5c01\u88c5\u7684\uff0c\u7ed3\u679c\u53d1\u73b0\u5c01\u88c5\u4e5f\u6ca1\u6709\u7279\u522b\u597d\u6253\uff0c\u5c31\u653e\u5f03\u4e86\n *\n ******************************************************************************/\n\nint n;\n// \u5e8f\u5217\u53ca\u7b54\u6848\nint Element[N], ans[N];\n// \u5165\u6808\u65f6\u95f4\u3001\u51fa\u6808\u65f6\u95f4\u53ca\u5df2\u7ecf\u51fa\u6808\u7684\u6700\u5927\u7684\u70b9\nint IntoStackTime[N], OutStackTime[N], HaveOutMx;\nint Valque[2][N], Timque[2][N];\n\n// Val \u503c\u57df\u7ebf\u6bb5\u6811\uff1a\u652f\u6301 [L, R] \u67e5\u8be2\u51fa\u6808\u65f6\u95f4\u5c0f\u4e8e id  \u7684\u70b9\n// Tim \u4e0b\u6807\u7ebf\u6bb5\u6811\uff1a\u652f\u6301 [L, R] \u67e5\u8be2\u503c(\u7f16\u53f7)\u5927\u4e8e val \u7684\u70b9\n\nint Mx[N << 2], Mi[N << 2], Cntmx[N << 2], Cntmi[N << 2];\n#define ls (p << 1)\n#define rs (p << 1 | 1)\nvoid Up_mx(int p) {\n\tMx[p] = 0;\n\tif (Cntmx[ls]) Mx[p] = Mx[ls];\n\tif (Cntmx[rs] && Mx[rs] > Mx[p]) Mx[p] = Mx[rs];\n\tCntmx[p] = Cntmx[ls] + Cntmx[rs];\n}\nvoid Up_mi(int p) {\n\tMi[p] = INF;\n\tif (Cntmi[ls]) Mi[p] = Mi[ls];\n\tif (Cntmi[rs] && Mi[rs] < Mi[p]) Mi[p] = Mi[rs];\n\tCntmi[p] = Cntmi[ls] + Cntmi[rs];\n}\nvoid Built(int p, int l, int r) {\n\tif (l == r) {\n\t\tMx[p] = Element[l];       // l \u8fd9\u4e2a\u4e0b\u6807\u7684\u5143\u7d20\n\t\tMi[p] = IntoStackTime[l]; // l \u8fd9\u4e2a\u503c\u7684\u51fa\u6808\u65f6\u95f4\n\t\tCntmx[p] = Cntmi[p] = 1;\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tBuilt(ls, l, mid); Built(rs, mid + 1, r);\n\tUp_mi(p), Up_mx(p);\n}\n\nvoid Dfs(int, int) ;\nvoid EraseVal(int p, int l, int r, int id) {\n\tif (l == r) {\n\t\t--Cntmi[p];\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (id <= mid) EraseVal(ls, l, mid, id);\n\tif (id >  mid) EraseVal(rs, mid + 1, r, id);\n\tUp_mi(p);\n}\nvoid EraseTim(int p, int l, int r, int id) {\n\tif (l == r) {\n\t\t--Cntmx[p];\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (id <= mid) EraseTim(ls, l, mid, id);\n\tif (id >  mid) EraseTim(rs, mid + 1, r, id);\n\tUp_mx(p);\n}\nvoid ValQuery(int p, int l, int r, int L, int R, int mi, int k) {\n\tif (!Cntmi[p] || Mi[p] > mi) return ;\n\t// \u56e0\u4e3a\u6709\u53ef\u80fd\u662f\u4ece\u7b2c\u4e00\u79cd\u60c5\u51b5\uff08\u9012\u5f52\u65f6\u4e0a\u4e24\u4e2a if \uff09\u9012\u5f52\u4e0b\u6765\u7684\uff0c\u6240\u4ee5\u4e0d\u4e00\u5b9a\u6ee1\u8db3\n\t// \u67e5\u8be2\u6761\u4ef6\uff0c\u5982\u679c\u8fd9\u65f6\u5019 l == r \u5c31\u4f1a\u67e5\u8be2\u5230\u9519\u8bef\u7684\u70b9\n\t// \uff08\u5176\u5b9e\u4e00\u5f00\u59cb\u5728 if \u65f6\u5224\u4e86\uff0c\u4f46\u611f\u89c9\u6ca1\u7528\u53c8\u5220\u6389\u4e86\uff0c\u7ed3\u679c\u5c31\u4e00\u76f4\u8fc7\u4e0d\u4e86\u3002\u3002\u3002\uff09\n\tif (l == r) {\n\t\tEraseTim(1, 1, n, IntoStackTime[l]);\n\t\tEraseVal(1, 1, n, l);\n\t\treturn Dfs(l, k);\n\t}\n\tint mid = (l + r) >> 1;\n\tif (R <= mid) return ValQuery(ls, l, mid, L, R, mi, k);\n\tif (L >  mid) return ValQuery(rs, mid + 1, r, L, R, mi, k);\n\tif (Mi[ls] < mi && Cntmi[ls]) ValQuery(ls, l, mid, L, R, mi, k);\n\tif (Mi[rs] < mi && Cntmi[rs]) ValQuery(rs, mid + 1, r, L, R, mi, k);\n}\nvoid TimQuery(int p, int l, int r, int L, int R, int mx, int k) {\n\tif (!Cntmx[p] || Mx[p] < mx) return ;\n\tif (l == r) {\n\t\tEraseTim(1, 1, n, l);\n\t\tEraseVal(1, 1, n, Element[l]);\n\t\treturn Dfs(Element[l], k);\n\t}\n\tint mid = (l + r) >> 1;\n\tif (R <= mid) return TimQuery(ls, l, mid, L, R, mx, k);\n\tif (L >  mid) return TimQuery(rs, mid + 1, r, L, R, mx, k);\n\tif (Mx[ls] > mx && Cntmx[ls]) TimQuery(ls, l, mid, L, R, mx, k);\n\tif (Mx[rs] > mx && Cntmx[rs]) TimQuery(rs, mid + 1, r, L, R, mx, k);\n}\n\nvoid Dfs(int u, int k) {\n\tans[u] = k;\n\tif (Valque[0][u] <= Valque[1][u])\n\t\tValQuery(1, 1, n, Valque[0][u], Valque[1][u], IntoStackTime[u], k ^ 1);\n\tif (Timque[0][u] <= Timque[1][u])\n\t\tTimQuery(1, 1, n, Timque[0][u], Timque[1][u], u, k ^ 1);\n}\n\nint Stk[2][N], Top[2];\nbool Check() {\n\tStk[0][0] = Stk[1][0] = INF;\n\trep (i, 1, n) {\n\t\trep (d, 0, 1)\n\t\t\twhile (Top[d] && OutStackTime[Stk[d][Top[d]]] <= i) --Top[d];\n\t\tint id = ans[Element[i]];\n\t\tif (Stk[id][Top[id]] < Element[i]) return false;\n\t\tStk[id][++Top[id]] = Element[i];\n\t}\n\treturn true;\n}\n\nint main() {\n\tn = read<int>();\n\trep (i, 1, n) {\n\t\tElement[i] = read<int>();\n\t\tOutStackTime [Element[i]] = i;\n\t\tIntoStackTime[Element[i]] = i;\n\t}\n\trep (i, 1, n)\n\t\tOutStackTime[i] = max(OutStackTime[i - 1], OutStackTime[i]);\n\n\trep (i, 1, n) {\n\t\twhile (HaveOutMx <= n && OutStackTime[HaveOutMx] <= i) ++HaveOutMx;\n\t\tValque[0][Element[i]] = HaveOutMx + 1;\n\t\tValque[1][Element[i]] = Element[i] - 1;\n\t\tTimque[0][Element[i]] = i + 1;\n\t\tTimque[1][Element[i]] = OutStackTime[Element[i]] - 1;\n\t}\n\n\tBuilt(1, 1, n);\n\n\tmemset(ans, -1, sizeof ans);\n\trep (i, 1, n) if (ans[Element[i]] == -1) {\n\t\tEraseVal(1, 1, n, Element[i]);\n\t\tEraseTim(1, 1, n, i);\n\t\tDfs(Element[i], 0);\n\t}\n\n\tif (!Check()) puts(\"NIE\");\n\telse {\n\t\tputs(\"TAK\");\n\t\trep (i, 1, n) printf(\"%d%c\", ans[Element[i]] + 1, \" \\n\"[i == n]);\n\t}\n\treturn 0;\n}\n```\n\n(\u8865\u9898\u7684\u65f6\u5019\u5c31\u4f1a\u559c\u6b22\u7528\u957f\u53d8\u91cf\u540d\uff08\u56e0\u4e3a\u7528\u7684\u662f nvim \u6240\u4ee5\u4e0d\u600e\u4e48\u9ebb\u70e6\uff09\uff0c\u5e94\u8be5\u6ca1\u6709\u5f88\u96be\u770b\u5427\u3002\u3002\u3002\uff09\n\n\u6700\u540e\u819c\u62dc [\u673a\u623f\u5de8\u4f6c](https://www.luogu.org/space/show?uid=130740) \u7684\u601d\u60f3 orzorzorz\n\n",
        "postTime": 1563342693,
        "uid": 39947,
        "name": "Ameiyo",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3497 \u3010[POI2010]KOL-Railway\u3011"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3497)\n\nNOIP2008\u63d0\u9ad8T4\u52a0\u5f3a\u7248\u3002\n\n\u53ea\u6709\u4e00\u4e2a\u6808\u7684\u60c5\u51b5\u662f\u521d\u5b66\u7684\u65f6\u5019\u5c31\u90fd\u5b66\u8fc7\u7684\u3002\u8003\u8651\u5f53\u65f6\u6211\u4eec\u5b66\u4e60\u7684\u65f6\u5019\uff0c\u662f\u600e\u4e48\u505a\u7684\uff1a\n\n- \u5982\u679c\u5f53\u524d\u5143\u7d20\u5c0f\u4e8e\u6808\u9876\uff0c\u76f4\u63a5\u52a0\u5165\n- \u5426\u5219\uff0c\u5982\u679c\u6808\u9876\u662f\u5f85\u8f93\u51fa\u5e8f\u5217\u91cc\u6700\u5c0f\u7684\uff0c\u51fa\u6808\uff1b\u5426\u5219\u65e0\u89e3\n\n\u53ef\u4ee5\u62bd\u8c61\u201c\u65e0\u89e3\u201d\u7684\u60c5\u51b5\uff1a\u5b58\u5728 $i<j<k$ \u6ee1\u8db3 $a_k<a_i<a_j$. \u6b64\u65f6\uff0c\u7531\u4e8e\u8981\u5148\u51fa\u6808 $a_k$ \u7684\u7f18\u6545\uff0c$a_i$ \u548c $a_j$ \u5728 $a_k$ \u51fa\u6808\u524d\u90fd\u5e94\u8be5\u5728\u6808\u4e2d\uff0c\u800c $a_j$ \u53c8\u66f4\u9760\u8fd1\u6808\u9876\uff0c\u65e0\u6cd5\u8ba9 $a_i$ \u5148\u51fa\u6808\u3002\n\n\u663e\u7136\u8fd9\u662f\u5355\u6808\u7684\u60c5\u51b5\u3002\u6211\u4eec\u5c06\u5176\u63a8\u5e7f\u5230\u53cc\u6808\uff0c\u53d1\u73b0\u4e00\u6837\u6210\u7acb\u3002\u53ea\u4e0d\u8fc7\u53d8\u6210\u4e86 $i,j$ \u4e0d\u80fd\u8fdb\u5165\u4e00\u4e2a\u6808\u4e2d\u3002\n\n\u90a3\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u66b4\u529b\u8fde\u8fb9\u5224\u65ad\u5176\u662f\u5426\u662f\u4e8c\u5206\u56fe\u3002\n\n\u7b80\u5355\u8bf4\u660e\u5982\u679c\u662f\u4e8c\u5206\u56fe\u5219\u4e00\u5b9a\u6709\u89e3\u8fd9\u4e2a\u4e8b\u5b9e\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u5fc5\u8981\u6027\u6bd4\u8f83\u597d\u8bf4\u660e\u3002\u5145\u5206\u6027\u4e0d\u662f\u5f88\u597d\u8bf4\u660e\uff0c\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u5c31\u884c\u4e86\uff09\uff0c\u8003\u8651\u6808\u6392\u5e8f\u7684\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u4e00\u4e2a\u6808\u6392\u5e8f\u5408\u6cd5\u7b49\u4ef7\u4e8e\u4efb\u610f\u65f6\u523b\u4e24\u6808\u90fd\u662f\u5355\u8c03\uff08\u9012\u51cf\uff09\u6808\u3002 \u5bb9\u6613\u8bf4\u660e\u5176\u5145\u8981\u6027\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u80fd\u6784\u9020\u51fa\u4e00\u4e2a\u65b9\u6848\u4f7f\u5f97\u4e24\u4e2a\u6808\u59cb\u7ec8\u4e3a\u5355\u8c03\u6808\u5373\u53ef\u3002\u5bb9\u6613\u6784\u9020\u51fa\u4e00\u4e2a\u8fc7\u7a0b\uff1a\n\n- \u5982\u679c\u5f53\u524d\u52a0\u5165\u5143\u7d20\u662f\u5f85\u8f93\u51fa\u5e8f\u5217\u91cc\u6700\u5c0f\u7684\uff0c\u968f\u4fbf\u52a0\u4e00\u4e2a\u6808\u51fa\u6808\n- \u5426\u5219\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u6808\u4e2d\u7684\u672b\u5c3e\u5143\u7d20 $a_i$\uff0c\u5f53\u524d\u52a0\u5165\u5143\u7d20 $a_j$\uff0c\u5f85\u8f93\u51fa\u5e8f\u5217\u91cc\u6700\u5c0f\u7684\uff08\u4e00\u5b9a\u5728 $j$ \u4e4b\u540e\uff09\u5143\u7d20 $a_k(i<j<k)$\uff0c\u4e00\u5b9a\u6709 $a_i>a_j,a_j<a_k$\u3002\u76f4\u63a5\u63a8\u5165 $a_j$ \u5373\u53ef\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684 $a_i$\uff0c\u5219\u8bf4\u660e $a_j$ \u5728\u4e8c\u5206\u56fe\u67d3\u8272\u7684\u8fc7\u7a0b\u4e2d\u5c31\u5df2\u7ecf\u5931\u8d25\u4e86\uff0c\u77db\u76fe\u3002\n\n~~\u6839\u636e\u4e2a\u4eba\u7406\u89e3\u53e3\u80e1\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5047\u4e86\u8f7b\u55b7\u3002~~\n\n\u597d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5 $O(n^2)$ \u66b4\u529b\u8fde\u8fb9\uff0c$O(n^2)$ dfs \u5224\u65ad\u662f\u5426\u662f\u4e8c\u5206\u56fe\u3002\u5c31\u53ef\u4ee5\u901a\u8fc7 NOIP \u7684\u90a3\u9053\u9898\u3002\u81f3\u4e8e\u6784\u9020\u7b54\u6848\uff0c\u9996\u5148\u67d3\u8272\u7684\u65f6\u5019\uff0c\u4f18\u5148\u628a\u5c0f\u7684\u70b9\u5c3d\u53ef\u80fd\u653e\u8fdb\u7b2c\u4e00\u4e2a\u6808\u3002\u6700\u540e\u6a21\u62df\u7684\u65f6\u5019\uff0c\u4f9d\u6b21\u68c0\u67e5\u56db\u79cd\u64cd\u4f5c\u662f\u5426\u80fd\u505a\u5373\u53ef\u3002\n\n\u770b\u4e0a\u53bb\uff0c\u8fd9\u5df2\u7ecf\u65e0\u6cd5\u518d\u4f18\u5316\u4e86\u3002\u6bd5\u7adf\u5efa\u56fe\u7684 $O(n^2)$ \u662f\u6446\u8131\u4e0d\u6389\u7684\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u5c31\u6709\u4e00\u4e2a\u5f88\u5999\u7684 trick\uff1a\u8003\u8651\u5230\u6211\u4eec\u53ea\u5173\u6ce8\u6700\u540e\u7684\u67d3\u8272\u65b9\u6848\u3002\u90a3\u4e48\u5bf9\u4e8e\u56fe\u4e2d\u7684\u6bcf\u4e2a\u8fde\u901a\u5757\uff0c\u6211\u4eec\u4ece\u4e2d\u53ea\u8981\u90fd\u62bd\u51fa\u4e00\u9897\u751f\u6210\u6811\uff0c\u5c31\u5df2\u7ecf\u53ef\u4ee5\u77e5\u9053\u6240\u6709\u70b9\u7684\u67d3\u8272\u65b9\u6848\uff0c\u6700\u540e\u6a21\u62df\u7684\u65f6\u5019\u5224\u65ad\u5176\u662f\u5426\u5408\u6cd5\u5373\u53ef\u3002\u800c\u5982\u679c\u6211\u4eec\u4fdd\u7559\u539f\uff08\u4e8c\u5206\uff1f\uff09\u56fe\u7684\u751f\u6210\u68ee\u6797\u3002\u5219\u8fb9\u6570\u7acb\u9a6c\u964d\u5230 $O(n)$ \u7ea7\u522b\u3002\n\n\u8003\u8651\u6bcf\u6b21\u4ece\u5f85\u9009\u70b9\u96c6\u4e2d\u627e\u5230\u4e00\u4e2a $v$ \u4f7f\u5f97\u548c\u5f53\u524d\u70b9 $(u,v)$ \u6709\u8fde\u8fb9\uff0c\u7136\u540e dfs $v$ \u70b9\uff0c\u540c\u65f6\u4ece\u5f85\u9009\u70b9\u96c6\u4e2d\u5220\u9664 $v$\u3002 \u8fd9\u6837\u4e00\u4e2a\u8fc7\u7a0b\u5c31\u5b9e\u73b0\u4e86\u4e0a\u9762\u7684\u7b97\u6cd5\u3002\u53d1\u73b0\u74f6\u9888\u4e3b\u8981\u5728\u4ece\u5f85\u9009\u70b9\u96c6\u4e2d\u5220\u9664 $v$\uff0c\u8fd8\u6709\u4ece\u5f85\u9009\u70b9\u96c6\u4e2d\u5bfb\u627e $v$\u3002 \u7531\u4e8e\u4ece\u5f85\u9009\u70b9\u96c6\u4e2d\u5220\u9664\u8fd9\u4e2a\u8981\u6c42\uff0c\u6211\u4eec\u5927\u80c6\u731c\u60f3\u5176\u662f polylog \u7684\uff08\u5c31\u7b97\u73b0\u5728\u731c\u4e0d\u4e2d\u4e5f\u6ca1\u5173\u7cfb\uff08\u96fe\uff09\uff09\u3002\n\n\u8003\u8651 $i-j$ \u8fde\u8fb9\u662f\u8fd9\u6837\u7684\uff1a\n$$\n\\begin{cases}\ni<j<lim(i) \\\\\na_i<a_j\n\\end{cases}\n$$\n\u5176\u4e2d $lim(i)$ \u662f $max\\{j | a_j<a_i\\}$.\n\n\u4f46\u662f\u8fd9\u8fd8\u4e0d\u591f\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u66b4\u529b\u627e\u5230\u6240\u6709 $(i,j)$. \u5c31\u5fc5\u987b\u8003\u8651 $i$ \u5411\u540e\u8fde\u548c\u5411\u524d\u8fde\u4e24\u4e2a\u65b9\u5411\uff0c\u8003\u8651\u628a\u4e0a\u9762\u7684\u4e1c\u897f\u9006\u8fc7\u6765\uff1a\n$$\n\\begin{cases}\nlow(i) \\lt a_j \\lt a_i \n\\\\\nj<i\n\\end{cases}\n$$\n\u5176\u4e2d $low(i)$ \u662f $\\min\\{j|a_j<a_i,i<j\\}$.\n\n\u5bb9\u6613\u53d1\u73b0\u4e00\u4e2a\u4e0b\u6807\u5185\u67e5\u503c\uff0c\u4e00\u4e2a\u503c\u57df\u5185\u67e5\u4e0b\u6807\uff0c\u4e24\u9897\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u540c\u65f6\u53d1\u73b0\u5220\u9664\u4e5f\u5f88\u597d\u7ef4\u62a4\u3002\n\n\u81f3\u4e8e\u67e5\u503c\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u7c7b\u8fb9\uff0c\u5728\u4e0b\u6807\u533a\u95f4\u5185\u4e0d\u65ad\u67e5\u6700\u5927\u503c\u5373\u53ef\uff1b\u5bf9\u4e8e\u7b2c\u4e8c\u7c7b\u8fb9\uff0c\u5728\u503c\u57df\u533a\u95f4\u5185\u4e0d\u65ad\u67e5\u6700\u5c0f\u7684\u4e0b\u6807\u5373\u53ef\u3002\u4e0d\u6ee1\u8db3\u5c31 break \u6389\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n \\log n)$.\n\n```C++\n//POI,2010\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(ll i=(a);i<=(b);i++)\n#define per(i,a,b) for(ll i=(a);i>=(b);i--)\n#define op(x) ((x&1)?x+1:x-1)\n#define odd(x) (x&1)\n#define even(x) (!odd(x))\n#define lc(x) (x<<1)\n#define rc(x) (lc(x)|1)\n#define lowbit(x) (x&-x)\n#define Max(a,b) (a>b?a:b)\n#define Min(a,b) (a<b?a:b)\n#define next Cry_For_theMoon\n#define il inline\n#define pb(x) push_back(x)\n#define is(x) insert(x)\n#define sit set<int>::iterator\n#define mapit map<int,int>::iterator\n#define pi pair<int,int>\n#define ppi pair<int,pi>\n#define pp pair<pi,pi>\n#define fr first\n#define se second\n#define vit vector<int>::iterator\n#define mp(x,y) make_pair(x,y)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef unsigned int uint;\ntypedef double db;\nusing namespace std;\nconst int MAXN=1e5+10,INF=1e9;\nint n,a[MAXN],color[MAXN];\nint st1[MAXN],st2[MAXN],top1,top2,cnt,cur,flag;\npi lim[MAXN]; //lim[i]=max{j|aj<=ai} \nstruct Tree{\n\tpi minn[MAXN<<2],maxn[MAXN<<2];\n\tvoid pushup(int x){\n\t\tminn[x]=min(minn[lc(x)],minn[rc(x)]);\n\t\tmaxn[x]=max(maxn[lc(x)],maxn[rc(x)]);\n\t}\n\tvoid build(int x,int l,int r){\n\t\tif(l==r){\n\t\t\tminn[x]=mp(INF,l);\n\t\t\tmaxn[x]=mp(-INF,l);\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(lc(x),l,mid);build(rc(x),mid+1,r);\n\t\tpushup(x);\n\t}\n\tvoid update(int x,int l,int r,int pos,int val){\n\t\tif(l==r){minn[x]=maxn[x]=mp(val,pos);return;}\n\t\tint mid=(l+r)>>1;\n\t\tif(pos<=mid)update(lc(x),l,mid,pos,val);\n\t\telse update(rc(x),mid+1,r,pos,val);\n\t\tpushup(x);\n\t}\n\tvoid modify(int x,int l,int r,int pos){\n\t\tif(l==r){minn[x]=mp(INF,0);maxn[x]=mp(-INF,0);return;}\n\t\tint mid=(l+r)>>1;\n\t\tif(pos<=mid)modify(lc(x),l,mid,pos); \n\t\telse modify(rc(x),mid+1,r,pos);\n\t\tpushup(x);\n\t}\n\tvoid del(int x){modify(1,1,n,x);}\n\tpi minquery(int x,int l,int r,int ql,int qr){\n\t\tif(ql>qr)return mp(INF,0);\n\t\tif(ql<=l && qr>=r)return minn[x];\n\t\tpi ret=mp(INF,0);\n\t\tint mid=(l+r)>>1;\n\t\tif(ql<=mid)ret=min(ret,minquery(lc(x),l,mid,ql,qr));\n\t\tif(qr>mid)ret=min(ret,minquery(rc(x),mid+1,r,ql,qr));\n\t\treturn ret;\n\t}\n\tpi maxquery(int x,int l,int r,int ql,int qr){\n\t\tif(ql>qr)return mp(-INF,0);\n\t\tif(ql<=l && qr>=r)return maxn[x];\n\t\tpi ret=mp(-INF,0);\n\t\tint mid=(l+r)>>1;\n\t\tif(ql<=mid)ret=max(ret,maxquery(lc(x),l,mid,ql,qr));\n\t\tif(qr>mid)ret=max(ret,maxquery(rc(x),mid+1,r,ql,qr));\n\t\treturn ret;\n\t}\n}bucket,tree1,tree2;\nvoid dfs(int u,int c){\n\tcolor[u]=c;\n\t//del u\n\ttree1.del(u);\n\ttree2.del(a[u]);\n\t//front edge \n\tint L=u,R=lim[u].fr; \n\twhile(1){\n\t\tint v=tree1.maxquery(1,1,n,L+1,R-1).se;\n\t\tif(v==0 || a[u]>=a[v])break;\n\t\tdfs(v,-c);\n\t}\n\t//back edge\n\tL=lim[u].se,R=a[u];\n\twhile(1){\n\t\tint v=tree2.minquery(1,1,n,L+1,R-1).fr;\n\t\tif(v==INF || v>=u)break;\n\t\tdfs(v,-c);\n\t}\n}\nint main(){\n\tcin>>n;\n\trep(i,1,n){\n\t\tcin>>a[i];\n\t}\n\tbucket.build(1,1,n);\n\ttree1.build(1,1,n);\n\ttree2.build(1,1,n);\n\tper(i,n,1){\n\t\tbucket.update(1,1,n,a[i],i);\n\t\tlim[i].fr=bucket.maxquery(1,1,n,1,a[i]).fr;\n\t\tlim[i].se=((i==n)?a[i]:min(lim[i+1].se,a[i]));\n\t}\n\trep(i,1,n){\n\t\ttree1.update(1,1,n,i,a[i]);\n\t\ttree2.update(1,1,n,a[i],i);\n\t}\n\trep(i,1,n){\n\t\tif(color[i])continue;\n\t\tdfs(i,1);\n\t}\n\trep(i,1,n)if(color[i]==-1)color[i]=2;\n\t//\u6a21\u62df\u8fc7\u7a0b\uff0c\u5224\u65ad\u662f\u5426\u5408\u6cd5\n\tcur=flag=1;\n\twhile(cnt!=n){\n\t\tif(color[cur]==1 && cur<=n){\n\t\t\tif(top1==0 || a[cur]<st1[top1]){\n\t\t\t\tst1[++top1]=a[cur];\n\t\t\t\tcur++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tif(top1 && st1[top1]==cnt+1){\n\t\t\ttop1--;\n\t\t\tcnt++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(color[cur]==2 && cur<=n){\n\t\t\tif(top2==0 || a[cur]<st2[top2]){\n\t\t\t\tst2[++top2]=a[cur];\n\t\t\t\tcur++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tif(top2 && st2[top2]==cnt+1){\n\t\t\ttop2--;\n\t\t\tcnt++;\n\t\t\tcontinue;\n\t\t}\n\t\tflag=0;break;\n\t}\n\tif(!flag)return printf(\"NIE\\n\"),0;\n\tprintf(\"TAK\\n\");\n\trep(i,1,n)printf(\"%d \",color[i]);\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1627047891,
        "uid": 340632,
        "name": "Cry_For_theMoon",
        "ccfLevel": 8,
        "title": "\u3010POI2010\u3011Railway"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $1\\sim n$ \u7684\u6392\u5217 $p$\u3002\u73b0\u5728\u8981\u5bf9\u5176\u8fdb\u884c\u53cc\u6808\u6392\u5e8f\uff0c\u5373\uff0c\u6709\u4e24\u4e2a\u6808 $s_1$ \u548c $s_2$\uff0c\u6709\u56db\u79cd\u64cd\u4f5c\uff1a\u5c06\u539f\u5e8f\u5217\u5934\u5165\u6808 $s1$\u3001\u6808 $s1$ \u9876\u5f39\u51fa\u5230\u6700\u7ec8\u5e8f\u5217\u3001\u5c06\u539f\u5e8f\u5217\u5934\u5165\u6808 $s2$\u3001\u6808 $s2$ \u9876\u5f39\u51fa\u5230\u6700\u7ec8\u5e8f\u5217\uff0c\u4f7f\u5f97\u6700\u7ec8\u5e8f\u5217\u5347\u5e8f\u6392\u5217\u3002\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5165\u6808\u65b9\u6848\uff08\u5f31\u5316\u7248\u5728 [P1155 [NOIP2008 \u63d0\u9ad8\u7ec4] \u53cc\u6808\u6392\u5e8f](https://www.luogu.com.cn/problem/P1155)\uff09\u3002\n\n### \u601d\u8def\n\n\u9996\u5148\u6211\u4eec\u5148\u8003\u8651\u53ea\u6709\u4e00\u4e2a\u6808\u65f6\u7684\u60c5\u51b5\u3002\u6b64\u65f6\u8981\u60f3\u5b8c\u6210\u6392\u5e8f\uff0c\u5fc5\u987b\u6ee1\u8db3\u5728\u4efb\u610f\u6570 $x$ \u8fdb\u6808\u65f6\uff0c\u6808\u9876\u90fd\u5927\u4e8e $x$\uff0c\u6216\u8005\u5c0f\u4e8e $x$ \u7684\u90a3\u4e9b\u6570\u521a\u597d\u53ef\u4ee5\u5f39\u51fa\u8fdb\u5165\u6700\u7ec8\u5e8f\u5217\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u82e5 $\\exists i<j<k,p_k<p_i<p_j$\uff0c\u90a3\u4e48\u539f\u5e8f\u5217\u65e0\u6cd5\u6392\u5e8f\uff0c\u56e0\u4e3a $p_j$ \u8fdb\u6808\u65f6\uff0c\u4e00\u5b9a\u8981\u628a $p_i$ \u5f39\u51fa\uff0c\u4f46\u662f\u6b64\u65f6\u5c0f\u4e8e $p_i$ \u7684 $p_k$ \u5c1a\u672a\u5165\u6808\uff0c\u6240\u4ee5\u6700\u7ec8\u5e8f\u5217\u65e0\u6cd5\u6709\u5e8f\uff08\u4e0b\u79f0\u8fd9\u6837\u7684 $i$ \u548c $j$ \u662f\u51b2\u7a81\u7684\uff09\u3002\u4e0d\u96be\u8bc1\u660e\u6b64\u4e3a\u539f\u5e8f\u5217\u80fd\u6392\u5e8f\u7684\u5145\u8981\u6761\u4ef6\u3002\n\n\u90a3\u4e48\uff0c\u5728\u53cc\u6808\u7684\u524d\u63d0\u4e0b\uff0c\u539f\u6765\u4e0d\u80fd\u8fdb\u540c\u4e00\u4e2a\u6808\u7684 $p_i$ \u548c $p_j$ \u53ef\u4ee5\u8fdb\u5165\u4e24\u4e2a\u6808\u5206\u522b\u64cd\u4f5c\uff0c\u4f7f\u5f97\u6392\u5e8f\u6210\u4e3a\u53ef\u80fd\u3002\u4e8e\u662f\u5047\u8bbe\u6211\u4eec\u53ef\u4ee5\u5c06 $p$ \u5212\u5206\u4e3a\u4e24\u4e2a\u5b50\u5e8f\u5217\uff0c\u4e14\u5b50\u5e8f\u5217\u5185\u90e8\u6ca1\u6709\u51b2\u7a81\uff0c\u90a3\u4e48\u539f\u5e8f\u5217\u6709\u89e3\u3002\u6240\u4ee5\uff0c\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u5c06\u51b2\u7a81\u7684 $i$ \u548c $j$ \u8fde\u8fb9\uff0c\u7136\u540e\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u5f20\u4e8c\u5206\u56fe\u3002\u82e5\u662f\uff0c\u5219\u53ef\u4ee5\u8fdb\u884c\u8fd9\u6837\u7684\u5212\u5206\uff0c\u4e5f\u5c31\u8bf4\u660e\u539f\u5e8f\u5217\u6709\u89e3\uff1b\u5426\u5219\u65e0\u6cd5\u5212\u5206\uff0c\u4e00\u5b9a\u4f1a\u4ea7\u751f\u51b2\u7a81\uff0c\u539f\u5e8f\u5217\u4e5f\u5c31\u65e0\u89e3\u3002\n\n\u6b64\u65f6\uff0c\u8fde\u8fb9\u64cd\u4f5c\u662f $\\mathcal{O}(n^2)$ \u7684\uff08\u5904\u7406\u540e\u7f00\u6700\u5c0f\u503c $min_x = \\min\\limits_{i=x}^n p_i$\uff0c\u82e5\u6709 $i,j$ \u6ee1\u8db3 $min_{j+1} < p_i < p_j$ \u4e14 $i<j$ \u5219 $i,j$ \u51b2\u7a81\uff09\uff0c\u67d3\u8272\u4e5f\u662f $\\mathcal{O}(n^2)$ \u7684\uff0c\u6700\u540e\u7684\u6a21\u62df\u8fc7\u7a0b~~\u5e94\u8be5~~\u662f $\\mathcal{O}(n)$ \u7684\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6 $\\mathcal{O}(n^2)$\uff0c\u80fd\u8fc7\u5f31\u5316\u7248\uff08\u67d3\u8272\u65b9\u6cd5\u89c1\u540e\u6587\uff09\u3002\n\n---\n\n\u63a5\u4e0b\u6765\u8003\u8651\u4f18\u5316\u3002\u6211\u4eec\u53d1\u73b0\u74f6\u9888\u4e3b\u8981\u5728\u5efa\u8fb9\u548c\u67d3\u8272\u4e0a\uff0c\u800c $\\mathcal{O}(n^2)$ \u7684\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u7528\u4e8c\u91cd\u5faa\u73af\u679a\u4e3e\u70b9\u5bf9 $(i,j)$\uff0c~~\u6548\u7387\u6781\u9ad8~~\u3002\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u4f18\u5316\u6389\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u53ef\u4ee5\u628a\u5224\u65ad\u65e0\u89e3\u7684\u60c5\u51b5\u4ea4\u7ed9 $\\mathcal{O}(n)$ \u7684\u6a21\u62df\u6765\u5224\u65ad\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f00\u59cb\u67d3\u8272\u65f6\u53ef\u4ee5\u4e0d\u7ba1\u77db\u76fe\u7684\u5730\u65b9\uff0c\u6700\u540e\u5728\u6a21\u62df\u6392\u5e8f\u8fc7\u7a0b\u65f6\u9047\u5230\u77db\u76fe\u518d\u5224\u65ad\u65e0\u89e3\uff0c\u8fd9\u6837\u4e5f\u80fd\u987a\u5229\u5224\u65ad\u539f\u5e8f\u5217\u662f\u5426\u6709\u89e3\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u67d3\u8272\u65f6\u5c31\u4e0d\u7528\u904d\u5386\u6bcf\u4e00\u6761\u8fb9\uff0c\u53ea\u7528\u627e\u51fa\u539f\u56fe\u7684\u4e00\u68f5\u751f\u6210\u68ee\u6797\u5373\u53ef\uff08\u56e0\u4e3a\u6b64\u65f6\u6bcf\u4e2a\u70b9\u90fd\u5df2\u7ecf\u88ab\u67d3\u4e86\u8272\uff09\uff0c\u6b64\u65f6\u904d\u5386\u7684\u590d\u6742\u5ea6\u5c31\u5230\u4e86 $\\mathcal{O}(n)$ \u7684\u7ea7\u522b\u3002\n\n\u4f46\u662f\u5982\u4f55\u627e\u51fa\u8fd9\u6837\u4e00\u68f5\u751f\u6210\u68ee\u6797\u5462\uff1f\u53d1\u73b0\u53ea\u8981\u80fd\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u8981\u8fde\u5411\u7684\u6240\u6709\u70b9\uff0c\u5c31\u53ef\u4ee5 BFS \u89e3\u51b3\u3002\u800c\u4e00\u4e2a\u70b9 $i$ \u8fde\u7684\u8fb9\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u8fde\u5411\u524d\u9762\u7684\u70b9\uff08\u524d\u5411\u8fb9\uff09\uff0c\u4e00\u79cd\u8fde\u5411\u540e\u9762\u7684\uff08\u540e\u5411\u8fb9\uff09\u3002\u5373\u82e5 $i$ \u8981\u8fde\u5411 $j$\uff0c\u5f53\u4e14\u4ec5\u5f53\u6ee1\u8db3 $\\exists k$\uff0c\u4f7f\u5f97 $\\begin{cases}j<i<k\\\\p_k<p_j<p_i\\end{cases}$ \u6216 $\\begin{cases}i<j<k\\\\p_k<p_i<p_j\\end{cases}$\u3002\n\n\u5148\u8003\u8651\u524d\u5411\u8fb9\uff0c\u5373\u6ee1\u8db3 $\\begin{cases}j<\\color{red}i\\color{defalt}<k\\\\p_k<p_j<\\color{red}p_i\\end{cases}$ \u7684 $j$\u3002\u53d1\u73b0\u5728\u4e0b\u6807\u4e0a\uff0c$j$ \u548c $k$ \u4e0d\u4e92\u76f8\u9650\u5236\uff0c\u800c\u503c\u57df\u4e0a $p_j$ \u53d7 $p_k$ \u9650\u5236\u3002\u90a3\u4e48\uff0c\u5bf9\u8fd9\u4e2a $i$\uff0c\u6211\u4eec\u4e0d\u59a8\u627e\u51fa\u6700\u5c0f\u7684 $p_k$\uff08\u4ee4 $le_i$ \u7b49\u4e8e\u6b64\u65f6\u7684 $k$\uff09\uff0c\u90a3\u4e48\u6240\u6709\u6ee1\u8db3 $p_j\\in(p_k,p_i)$\uff08\u5373 $p_j\\in(p_{le[i]},p_i)$\uff09\u4e14 $j<i$ \u7684 $j$ \u90fd\u662f $i$ \u7684\u8fde\u8fb9\u5bf9\u8c61\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u68f5\u7ef4\u62a4\u6743\u503c\u7684\u7ebf\u6bb5\u6811\uff0c\u4e0d\u65ad\u627e $(p_k,p_i)$ \u4e4b\u95f4\u6700\u5c0f\u7684 $j$ \u5e76\u5411\u5176\u8fde\u8fb9\uff0c\u540c\u65f6\u5728\u7ebf\u6bb5\u6811\u4e0a\u5220\u4e86 $j$ \u70b9\u4ee5\u9632\u6b62\u5efa\u4e0d\u5fc5\u8981\u7684\u8fb9\uff0c\u76f4\u81f3 $j\\ge i$\u3002\n\n\u540c\u7406\u8003\u8651\u540e\u5411\u8fb9\uff0c\u5373\u6ee1\u8db3 $\\begin{cases}\\color{red}i\\color{defalt}<j<k\\\\p_k<\\color{red}p_i\\color{defalt}<p_j\\end{cases}$ \u7684 $j$\u3002\u540c\u7406\uff0c\u6b64\u5904 $j$ \u7684\u9650\u5236\u5728\u4e0b\u6807\uff0c\u6240\u4ee5\u5904\u7406\u51fa\u6700\u5927\u7684 $k$ \u6ee1\u8db3 $p_k<p_i$\uff08\u4ee4 $ri_i$ \u7b49\u4e8e\u6b64\u65f6\u7684 $p_k$\uff09\uff0c\u90a3\u4e48\u6240\u6709\u6ee1\u8db3 $j\\in(i,k)$ \u4e14 $p_j>p_i$ \u7684 $j$ \u4e5f\u90fd\u662f $i$ \u7684\u8fde\u8fb9\u5bf9\u8c61\u3002\u56e0\u6b64\u518d\u5f00\u4e00\u68f5\u7ef4\u62a4\u4e0b\u6807\u7684\u7ebf\u6bb5\u6811\uff0c\u4e0d\u65ad\u627e $(i,k)$ \u5185\u6700\u5927\u7684 $p_j$\uff0c\u5411\u5bf9\u5e94\u7684 $j$ \u8fde\u8fb9\uff0c\u5e76\u5220\u9664 $j$ \u5bf9\u5e94\u7684\u70b9\uff0c\u76f4\u81f3 $p_j\\le p_i$\u3002\n\n\u56e0\u4e3a\u6bcf\u627e\u5230\u4e00\u4e2a\u70b9\u90fd\u4f1a\u5220\u6389\uff0c\u6240\u4ee5\u627e\u5230\u7684\u8fb9\u96c6\u5c31\u662f\u539f\u56fe\u7684\u751f\u6210\u68ee\u6797\uff08\u627e\u7684\u65f6\u5019\u987a\u4fbf\u67d3\u8272\uff09\uff0c\u6b64\u65f6\u590d\u6742\u5ea6\u662f $\\mathcal{O}(n\\log n)$\uff0c\u53ef\u4ee5\u8fc7\u6b64\u9898\u3002\n\n---\n\n\u6700\u540e\u8003\u8651\u4e00\u4e0b\u6a21\u62df\u8fc7\u7a0b\uff0c\u4ee5 NOIP \u90a3\u9898\u4e3a\u4f8b\uff0c\u4f18\u5148\u7ea7\u4e3a $push1>pop1>push2>pop2$\u3002\u6240\u4ee5\u4ece\u524d\u5f80\u540e\u904d\u5386 $p$\uff0c\u82e5\u904d\u5386\u5230\u7684 $p_i$ \u4e0d\u80fd\u5165\u6808\uff08\u6808\u9876\u5c0f\u4e8e $p_i$\uff09\uff0c\u5219\u4e0d\u65ad\u5f39\u51fa\u76f4\u81f3\u53ef\u4ee5\u5165\u6808\u3002\u4e4b\u540e\u5982\u679c\u662f\u6808 $s_1$ \u5219\u76f4\u63a5\u5165\u6808\uff0c\u5426\u5219\u7531\u4e8e $pop1>push2$\uff0c\u5148\u5224\u65ad $s_1$ \u80fd\u5426\u7ee7\u7eed\u5f39\u51fa\u518d\u5165\u6808\u3002\u5728\u8fc7\u7a0b\u4e2d\u4e00\u65e6\u6709\u77db\u76fe\u5c31\u62a5\u544a\u539f\u5e8f\u5217\u65e0\u89e3\u3002\n\n---\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#define maxn 100005\n#define inf 2100000000\nusing namespace std;\nint n,p[maxn],col[maxn],pos[maxn],s[3][maxn],ppos=1,len,le[maxn],ri[maxn]; bool flag=1; char ans[maxn*2]; queue<int> q;\n// le[i] <- k : maximum k satisfying p[k]<i   ri[i] <- p[k] : minimum p[k] satisfying k>i\nstruct seg_tree{int l,r,val;}a[3][maxn*8]; // a1 : position--maximum value   a2 : value--minimum position\nint cmp(int p1,int p2,int typ){return (typ==1?max(p1,p2):min(p1,p2));}\nvoid update(int typ,int p,int l,int r,int pos,int val){\n\ta[typ][p].l=l; a[typ][p].r=r; if(l==r){a[typ][p].val=val; return;}\n\tif(pos<=(l+r)/2) update(typ,p*2,l,(l+r)/2,pos,val); else update(typ,p*2+1,(l+r)/2+1,r,pos,val);\n\ta[typ][p].val=cmp(a[typ][p*2].val,a[typ][p*2+1].val,typ);\n}\nint query(int typ,int p,int l,int r){\n\tif(l>r) return (typ-1)*inf; if(l<=a[typ][p].l&&r>=a[typ][p].r) return a[typ][p].val; int res=(typ-1)*inf;\n\tif(l<=a[typ][p*2].r) res=query(typ,p*2,l,r); if(r>=a[typ][p*2+1].l) res=cmp(res,query(typ,p*2+1,l,r),typ); return res;\n}\nvoid bfs(int x){\n\tq.push(x); col[x]=1; update(1,1,1,n,x,-inf); update(2,1,1,n,p[x],inf); /*delete x*/ while(!q.empty()){\n\t\tint top=q.front(); q.pop(); while(1){\n\t\t\tint res=query(2,1,le[top]+1,p[top]); if(res>=top) break; q.push(res);\n\t\t\tcol[res]=3-col[top]; update(1,1,1,n,res,-inf); update(2,1,1,n,p[res],inf);\n\t\t} while(1){\n\t\t\tint res=query(1,1,top,ri[top]-1); if(res<=p[top]) break; q.push(pos[res]);\n\t\t\tcol[pos[res]]=3-col[top]; update(1,1,1,n,pos[res],-inf); update(2,1,1,n,res,inf);\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n); for(int i=1;i<=n;i++){scanf(\"%d\",&p[i]); pos[p[i]]=i; update(1,1,1,n,i,p[i]); update(2,1,1,n,p[i],i);}\n\tle[n]=inf; for(int i=n-1;i>=1;i--) le[i]=min(le[i+1],p[i+1]);\n\tri[pos[1]]=-inf; for(int i=2;i<=n;i++) ri[pos[i]]=max(ri[pos[i-1]],pos[i-1]);\n\tfor(int i=1;i<=n;i++) if(!col[i]) bfs(i);\n\tfor(int i=1;i<=n;i++){\n\t\tint id=col[i]; while(s[id][0]&&s[id][s[id][0]]<p[i])\n\t\t\tif(s[1][s[1][0]]==ppos){ans[++len]='b'; s[1][0]--; ppos++;}\n\t\t\telse if(s[2][s[2][0]]==ppos){ans[++len]='d'; s[2][0]--; ppos++;}else{printf(/*\"0\"*/\"NIE\"); return 0;}\n\t\tif(id==2) while(s[1][0]&&s[1][s[1][0]]==ppos){ans[++len]='b'; s[1][0]--; ppos++;}\n\t\tans[++len]=(id==1?'a':'c'); s[id][++s[id][0]]=p[i];\n\t} while(s[1][0]||s[2][0]) if(s[1][s[1][0]]==ppos){ans[++len]='b'; s[1][0]--; ppos++;}\n\t\telse if(s[2][s[2][0]]==ppos){ans[++len]='d'; s[2][0]--; ppos++;}else{printf(/*\"0\"*/\"NIE\"); return 0;}\n\t/*for(int i=1;i<=len;i++) printf(\"%c \",ans[i]);*/ printf(\"TAK\\n\"); for(int i=1;i<=n;i++) printf(\"%d \",col[i]); return 0;\n}\n\n```",
        "postTime": 1683205212,
        "uid": 294382,
        "name": "qzhwlzy",
        "ccfLevel": 5,
        "title": "P3497 [POI2010]KOL-Railway \u9898\u89e3"
    }
]